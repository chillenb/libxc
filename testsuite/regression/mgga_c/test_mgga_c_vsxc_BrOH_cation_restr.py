
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_vsxc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.631461546277720e-02, -9.631622426283827e-02, -9.632276526283234e-02, -9.629894877113850e-02, -9.631151178695517e-02, -9.631151178695517e-02, -9.141752063223001e-02, -9.137545095355913e-02, -9.027762665297377e-02, -9.072090284782859e-02, -9.067080036309144e-02, -5.342114456579476e-02, -2.566476571148636e-01, -9.628623836999296e-03, -3.691810205269729e-03, -6.413941958134629e-03, -5.789872926084724e-03, -5.789872926084724e-03, 4.221394016179150e-03, 3.138380696988188e-03, -7.377719560093313e-01, 1.280723105922151e-02, 1.143572494161861e-02, 1.143572494161862e-02, 1.107364763875762e-05, 1.310401433297772e-05, 1.049838596705689e-03, 1.924187090688829e-06, 4.417750873973105e-06, 4.417750873973105e-06, -5.007043451484048e-02, -4.988670230020698e-02, -5.005986777217233e-02, -8.662327071161348e-02, -4.997851531043029e-02, -4.997851531043029e-02, -1.169800488490625e-01, -1.077423232166211e-01, -1.249461588201479e-01, -1.158793622369076e-01, -1.082348928914755e-01, -4.086592955271517e-02, -3.468653070538468e-02, -3.105479131458257e-02, -3.195752221578844e-02, -3.418455689632408e-02, -3.468766880200846e-02, -3.142033491256288e-02, -1.409189573971504e+00, 1.203101591187125e-02, -1.387896563836375e+00, -5.018064910283716e-02, 1.137279200719856e-02, 1.137279200719856e-02, -4.846866751726992e-04, 1.693254608376277e-06, 2.192626817010819e-06, -1.040897351862839e+00, -1.497478305876908e-03, 2.344959065223794e-06, -1.368531936440858e-02, -1.923933743069729e-02, -5.860461942913400e-02, -1.580599592465304e-02, -1.662654581038999e-02, -1.662654581039000e-02, -1.438223178517311e-02, -3.195010401960580e-02, -3.261661636968277e-02, -2.884672240460296e-02, -3.137841593419162e-02, -3.253358790374938e-02, -3.374211274599291e-02, -4.167904005691184e-01, -3.083318615806717e-03, -6.710498533146650e-02, -1.368283860718802e-02, -1.368283860718802e-02, -4.432119791366550e-02, 9.436225952742226e-04, 1.954756886154724e-03, -2.579865183759917e-02, -1.275758658368202e+00, 6.576444045607635e-03, 2.064164400359333e-05, 3.836817369826627e-08, 5.817338676881178e-07, 5.994023232839482e-03, 2.230046618231929e-06, 2.230046618231928e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_vsxc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.860963844858060e-01, -1.860998385075997e-01, -1.861138694295838e-01, -1.860627237826857e-01, -1.860897128557927e-01, -1.860897128557927e-01, 1.689357345296657e-01, 1.687746138038408e-01, 1.645484394440151e-01, 1.662556800098667e-01, 1.660677053321419e-01, -1.827299934722584e-01, 5.703946729649051e-01, -1.908458522804291e-01, -1.960348220100336e-01, -1.938875717474124e-01, -1.944704659764452e-01, -1.944704659764452e-01, -1.122159419447420e-01, -1.137081209495321e-01, 1.181081325156523e+00, -6.007006858367004e-02, -8.539558336240780e-02, -8.539558336240775e-02, -2.471376084379232e-05, -2.889123319312019e-05, -1.660543966507065e-03, -4.855984078315629e-06, -1.061602079478230e-05, -1.061602079478230e-05, -6.538907927465751e-02, -6.550190389305567e-02, -6.539540379825472e-02, -1.588012494897938e-01, -6.544493022566596e-02, -6.544493022566596e-02, 2.721119121844011e-01, 2.438876564362916e-01, 2.954874333603532e-01, 2.688096084412398e-01, 2.454325345551413e-01, -1.865556970131627e-01, -6.045745601338171e-02, -3.624651205676274e-02, -8.951857463727776e-02, -5.858307554012641e-02, -5.381855949513959e-02, -3.671241588663876e-02, -1.063054770140853e+00, -9.446797507970667e-02, -1.295111543932375e+00, -7.235531683676125e-02, -4.227599866813307e-02, -4.227599866813318e-02, -1.431250703484698e-03, -4.293142900789217e-06, -5.869322625758078e-06, -1.753054685254061e+00, -4.409399085073002e-03, -6.049717485041230e-06, -5.544830506413471e-02, -4.350930605757022e-02, -8.751081353187870e-02, -5.050985397543712e-02, -4.871805315965566e-02, -4.871805315965567e-02, -5.291818410733631e-02, -7.325387863595600e-02, -4.745780192066622e-02, -3.383614422499986e-02, -3.874224990837227e-02, -6.079948230114051e-02, -4.063667761632602e-02, 6.680986086469684e-01, -1.356328425728451e-01, 1.540775892193317e-01, -1.255729448077359e-01, -1.255729448077360e-01, 7.198281329630432e-02, -1.491732675674319e-03, -3.181240569215667e-03, -7.970782481694359e-02, -1.260321392808901e+00, -1.520278256254323e-02, -4.224103197896815e-05, -1.212026266959505e-07, -1.645620304371256e-06, -1.334781600458613e-02, -5.843880373559047e-06, -5.843880373559073e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.816412775711874e-10, 1.816535163791386e-10, 1.817012880563054e-10, 1.815203858446868e-10, 1.816160607803069e-10, 1.816160607803069e-10, 4.382859435023248e-06, 4.380270709536708e-06, 4.311997439707351e-06, 4.337648797394448e-06, 4.337029818266516e-06, 1.478413512153933e-06, 3.701609732230925e-02, 3.806963114585634e-03, 4.138575464899735e-03, 4.070862815115304e-03, 4.085334939296921e-03, 4.085334939296921e-03, 1.541932777651367e+00, 1.488621531361036e+00, 3.500981959817123e-02, 2.087549809753336e+00, 2.019440338616972e+00, 2.019440338616971e+00, 2.246219526377533e+01, 2.314278119852813e+01, 6.543844296599438e+00, 1.836808753607411e+01, 2.450838320608566e+01, 2.450838320608566e+01, 5.338094669979433e-07, 5.409566843135445e-07, 5.342209254269910e-07, 4.281703716743597e-07, 5.373718138119400e-07, 5.373718138119400e-07, 1.019523162805411e-04, 9.089003220377059e-05, 1.112342003564862e-04, 1.004919366940633e-04, 9.160693216528717e-05, 2.332732549229458e-05, 5.039397530830251e-03, 5.898864710581482e-03, 8.249125401444221e-03, 6.021888517957178e-03, 4.696027841649684e-03, 3.423536444635664e-03, 1.041308663836054e+03, 1.014266601875441e+00, 1.368297874496778e+03, 2.060693150017068e-05, 3.587678659978175e+00, 3.587678659978177e+00, 2.216309662531910e+04, 1.630250017914501e+01, 1.378016314741114e+02, 4.394884918252535e+03, 8.568538224443157e+04, 5.130053067199268e+01, 1.092366410303131e-01, 4.289167177686394e-02, 5.603584441869663e-02, 7.389907881006705e-02, 6.441226166472895e-02, 6.441226166472894e-02, 1.050934824893097e-01, 1.207281740519479e-02, 9.345226177741202e-03, 1.351967526441776e-02, 1.003811401600262e-02, 4.533028434830705e-03, 3.557377477416410e-03, 1.169560332805176e+01, 2.691548270031850e-01, 3.272905182144446e-01, 1.509222424373575e-01, 1.509222424373575e-01, 5.434841346553217e-02, 6.771342020930192e+00, 5.156537690492503e+00, 7.820247676167594e-02, 2.650881210193561e+03, 6.007990417781242e+00, 9.911701591474024e+00, 2.387882773122010e+01, 6.265547037497365e+01, 6.837822697891505e+00, 7.406712972898389e+01, 7.406712972898426e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.914352009861287e-05, 4.914579338238457e-05, 4.915480808595280e-05, 4.912117539632347e-05, 4.913895178771677e-05, 4.913895178771677e-05, -2.015935932058314e-03, -2.014900163096655e-03, -1.987548082745762e-03, -1.998283208705706e-03, -1.997493853451340e-03, -6.363518746507827e-04, -8.188568676200432e-02, -1.196023477345806e-02, -1.257612441320349e-02, -1.240137289437138e-02, -1.244297812009730e-02, -1.244297812009730e-02, -9.634611542555822e-02, -9.558336813142339e-02, -8.135560574874752e-02, -7.375068921427046e-02, -9.166236659296602e-02, -9.166236659296600e-02, -9.313440178384692e-05, -1.119828809648533e-04, -5.401385487628405e-03, -1.454430210709293e-05, -3.863825136593985e-05, -3.863825136593985e-05, -1.748964587169432e-03, -1.769864261864702e-03, -1.750163308107005e-03, 9.465612411229523e-04, -1.759392662496699e-03, -1.759392662496699e-03, -7.713596848473433e-03, -7.165031330749543e-03, -8.151123523258542e-03, -7.646028701463407e-03, -7.199128189650578e-03, -1.723343273065522e-03, -1.652042182187659e-02, -3.775520228719623e-02, -1.453779099963200e-02, -1.789300537370681e-02, -1.831824205231272e-02, 6.625263456428263e-04, -3.330410171111980e-01, -7.393082377459828e-02, -1.979368088210079e-01, -2.866568438716432e-03, -7.213950583830459e-02, -7.213950583830463e-02, 4.682741338916240e-04, -1.205614650248490e-05, -4.537882363419268e-05, 3.103504905203526e-01, 2.871113590120861e-03, -2.961554754427366e-05, -3.993066979075379e-01, -1.725594058100869e-01, 5.570970284038324e-02, -2.796841199834667e-01, -2.472362349831552e-01, -2.472362349831552e-01, -3.594268368995091e-01, -1.811907911393427e-02, -2.536847366366082e-02, -5.222762219921631e-02, -3.452438447791954e-02, 1.930577141807642e-02, -2.543725039836989e-02, -6.148038017596822e-01, -5.320512321758238e-02, -1.378899862202715e-01, -4.063231705769738e-02, -4.063231705769736e-02, -5.655848529930537e-02, -4.903941747207290e-03, -9.390202936093323e-03, -3.087197397233364e-02, -1.930627401816024e-01, -4.091326731328783e-02, -1.162275919770487e-04, -3.319383070172826e-07, -8.119975086226167e-06, -3.882686241021731e-02, -3.383715574353903e-05, -3.383715574353909e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
