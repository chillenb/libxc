
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_vsxc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.136377118835944e-02, -8.136297668729024e-02, -8.135833189045107e-02, -8.137003819546820e-02, -8.136406558584390e-02, -8.136406558584390e-02, -6.186834646343430e-02, -6.186383913373194e-02, -6.175138555341715e-02, -6.183831371463677e-02, -6.181026596266559e-02, -6.181026596266559e-02, -7.213266364774654e-02, -7.220665820100314e-02, -7.103239639475369e-02, -6.313482803581877e-02, -6.560026384985064e-02, -6.560026384985064e-02, -1.087939524043655e-03, -3.153945237998259e-03, -2.940059345285005e-01, -3.264236603136448e-03, -2.197645220699343e-03, -2.197645220699341e-03, 1.059128666116024e-05, 1.206037583626559e-05, 5.089092031133424e-04, 6.451817960613515e-07, 2.725118346872982e-06, 2.725118346872954e-06, -5.039018044717956e-02, -5.020697158572360e-02, -5.037322419161032e-02, -5.021181694940856e-02, -5.030183989993275e-02, -5.030183989993275e-02, -4.863809370745501e-02, -4.872299649094138e-02, -4.676237631095490e-02, -4.678691300582179e-02, -4.951699335802610e-02, -4.951699335802610e-02, -3.624774842086854e-02, -3.734743321958010e-02, -3.449319035907585e-02, -3.033524481759188e-02, -3.619442015792983e-02, -3.619442015792983e-02, 1.411008280600510e-03, 5.459659307089748e-03, 9.821088305419245e-04, -4.589141987782254e-02, 4.128682030105883e-03, 4.128682030105893e-03, -1.818644096497740e-06, -1.105902370631217e-06, 4.579805883023519e-07, 6.986756035580600e-04, -1.026756144415567e-06, -1.026756144415547e-06, -3.573687464020282e-02, -2.736043217412887e-02, -2.840672829188423e-02, -3.039993258123300e-02, -2.923520352080873e-02, -2.923520352080874e-02, -5.097625624084669e-02, -3.319715837574497e-02, -3.391277766988084e-02, -3.155984472897332e-02, -3.307752060204587e-02, -3.307752060204587e-02, -3.600061260570478e-02, 1.398558653778045e-03, -1.211690423164540e-02, -3.057769905216817e-02, -2.349852396469040e-02, -2.349852396469042e-02, -3.377741572645684e-02, 7.101674850497983e-04, 7.183240686224757e-04, -2.998761442950898e-02, 2.141050992524800e-03, 2.141050992524794e-03, -1.228063557233641e-05, -6.101179472374525e-07, 3.652680788728179e-07, 3.545635185634190e-03, -4.391749022124551e-08, -4.391749022125229e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_vsxc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.523056234384360e-02, -8.523021708268434e-02, -8.523046292493701e-02, -8.523563594570603e-02, -8.523266757964504e-02, -8.523266757964504e-02, -2.979047021885344e-02, -2.980183899481525e-02, -3.014017237603084e-02, -3.036920728144292e-02, -3.019039959941602e-02, -3.019039959941602e-02, -1.362600011690963e-02, -1.507322093401422e-02, -5.392115904274979e-02, -5.087905918043347e-02, -5.013616978547688e-02, -5.013616978547688e-02, -1.046219276074264e-01, -1.035443867972318e-01, 4.696693632505129e-02, -8.157045341239348e-02, -8.863501169836695e-02, -8.863501169836692e-02, -2.646739476747504e-05, -3.270287815554762e-05, -3.663112685883262e-03, -9.879202239989602e-06, -1.704994257290038e-05, -1.704994257290047e-05, -6.547693941528485e-02, -6.559635006909084e-02, -6.548175914187465e-02, -6.558704776489199e-02, -6.553711512479508e-02, -6.553711512479508e-02, -1.375993898033059e-01, -1.384842212508193e-01, -1.490692085420613e-01, -1.503120475617374e-01, -1.326390114850059e-01, -1.326390114850059e-01, -3.055585596745650e-02, -5.916598295215426e-02, -2.356620727448061e-02, -3.546536402195927e-02, -3.150414065512407e-02, -3.150414065512407e-02, -3.994056823355526e-02, -9.470896954111929e-02, -3.588714107994478e-02, -6.744389500935120e-02, -5.464787842359451e-02, -5.464787842359452e-02, -1.424215724340274e-05, -1.640835394328104e-05, -1.275705127763761e-05, -1.651697040667062e-02, -2.035512921532885e-05, -2.035512921532872e-05, -6.864141225450532e-02, -5.104697673451631e-02, -5.626723686259324e-02, -6.132389702052687e-02, -5.870736918976599e-02, -5.870736918976598e-02, -7.809454178543930e-02, -6.394840468777195e-02, -3.958087075928382e-02, -3.328848840939506e-02, -3.337526549604491e-02, -3.337526549604492e-02, -5.622560730953437e-02, -1.184357245196945e-01, -1.121179708818631e-01, -4.185847933248682e-02, -8.189845941102379e-02, -8.189845941102387e-02, -4.849962023233352e-02, -2.322870067521676e-03, -7.670107047305794e-03, -2.897134855551957e-02, -2.783543724010999e-02, -2.783543724011006e-02, -1.860411896623637e-04, -3.498677917177524e-06, -2.464817822076842e-06, -2.021715029688070e-02, -1.510449791010354e-05, -1.510449791010357e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.765429253974207e-10, 2.765565471630880e-10, 2.766354334900624e-10, 2.764350688801911e-10, 2.765373770683126e-10, 2.765373770683126e-10, -2.622913635896634e-07, -2.628897906092198e-07, -2.789647150291076e-07, -2.763734367080996e-07, -2.751312207567178e-07, -2.751312207567178e-07, 6.310181162929766e-03, 6.331994320312430e-03, 6.544360164698149e-03, 5.216762431548815e-03, 5.619305014949805e-03, 5.619305014949805e-03, 1.452530672725353e+00, 1.375020529251474e+00, 1.273588558132724e-02, 2.547236025005736e+00, 2.088659165550738e+00, 2.088659165550737e+00, 2.278621225534198e+01, 2.376543400881316e+01, 8.129705802032339e+00, 2.306441762455935e+01, 2.789418599989064e+01, 2.789418599989069e+01, 5.300849170690071e-07, 5.372741402948247e-07, 5.305734639847137e-07, 5.369118475265506e-07, 5.336299739687406e-07, 5.336299739687406e-07, 1.513029225054034e-05, 1.515803279792435e-05, 1.719451883610691e-05, 1.727705332299904e-05, 1.415624115578446e-05, 1.415624115578446e-05, -2.374934895407115e-03, 1.074425309364193e-03, -3.226954009388970e-03, -2.667809550548253e-03, -2.126058575377683e-03, -2.126058575377683e-03, 3.772066397204675e+00, 1.007329643134762e+00, 4.350693387991198e+00, -6.578594082803188e-06, 4.003975397444555e+00, 4.003975397444552e+00, 4.332945755939258e+01, 2.988148705261356e+01, 1.797557233810340e+02, 7.726749198342427e+00, 8.614332917157510e+01, 8.614332917157475e+01, 1.084360748187446e-01, 4.119180140395746e-02, 5.514323578121705e-02, 7.257703090128920e-02, 6.296218509340128e-02, 6.296218509340126e-02, 1.043760028713368e-01, 9.248711217719013e-03, 5.570206992472619e-03, 9.144391544299909e-03, 5.676565499577625e-03, 5.676565499577625e-03, -6.401391169121655e-04, 4.888119138335731e-01, 2.263949516822974e-01, 1.396642658917727e-02, 9.295916188182328e-02, 9.295916188182331e-02, 3.873284695256666e-03, 7.470637826324184e+00, 6.733288638762041e+00, -1.132967281110840e-02, 7.486592270370852e+00, 7.486592270370863e+00, 1.902376961327171e+01, 4.424958341176111e+02, 7.024701316436835e+01, 7.759390217020398e+00, 1.056110337754320e+02, 1.056110337754325e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.467943632035830e-05, -6.468293416178994e-05, -6.470339830907319e-05, -6.465188100349303e-05, -6.467816067738834e-05, -6.467816067738834e-05, -1.573530220771134e-04, -1.570139591447911e-04, -1.475635987171125e-04, -1.462251623483560e-04, -1.485408012639968e-04, -1.485408012639968e-04, -2.329545744062473e-02, -2.324408129427450e-02, -2.107430714574557e-02, -1.808773389772304e-02, -1.913356071552188e-02, -1.913356071552188e-02, -8.457084346027087e-02, -8.116198781408242e-02, -4.306022415828024e-02, -6.842508298464255e-02, -7.893198691514415e-02, -7.893198691514410e-02, -9.294711954148700e-05, -1.115966721689507e-04, -5.399005734008175e-03, -1.452635285412262e-05, -3.833340318998346e-05, -3.833340318998343e-05, -1.727093522815780e-03, -1.747961903746728e-03, -1.728730229412433e-03, -1.747124319533990e-03, -1.737278829217422e-03, -1.737278829217422e-03, -8.912049122318322e-04, -9.379802838316564e-04, -1.026647733134722e-03, -1.077456192032915e-03, -8.507787239207644e-04, -8.507787239207644e-04, 3.170064685203817e-03, 9.844123456057476e-03, 1.113808403749676e-03, 3.489060557648859e-03, 2.802162928462284e-03, 2.802162928462284e-03, -3.836494316538443e-02, -6.738306712455767e-02, -3.475527599097487e-02, 1.043444785165840e-03, -6.769926178524216e-02, -6.769926178524215e-02, -6.856699757166944e-06, -1.324212759910791e-05, -4.551881216779312e-05, -1.939062805012531e-02, -3.157375130408837e-05, -3.157375130408832e-05, -1.967624586146570e-01, -1.219276228894013e-01, -1.461072733486062e-01, -1.696585490725696e-01, -1.575027172482900e-01, -1.575027172482899e-01, -3.561733998744666e-02, -1.344125070632558e-02, -1.672675330417798e-02, -3.257338077056616e-02, -2.152293427280952e-02, -2.152293427280950e-02, 9.711687065290450e-03, -5.977996770371535e-02, -3.979718234598359e-02, -5.731920589892182e-03, -2.058055609552497e-02, -2.058055609552496e-02, -2.281413184308417e-03, -4.865083905826723e-03, -9.436466209467621e-03, 2.447521871435272e-03, -4.008481036322531e-02, -4.008481036322534e-02, -1.304352445944181e-04, -1.303625364733155e-06, -8.045267258325857e-06, -3.789252637733171e-02, -3.451541982400376e-05, -3.451541982400380e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
