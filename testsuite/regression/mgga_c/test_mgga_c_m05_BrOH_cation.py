
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.005702551378939e-01, -1.005702861596238e-01, -1.005715339173944e-01, -1.005711092210033e-01, -1.005711742799939e-01, -1.005711742799939e-01, -5.095582819751393e-02, -5.096065545142801e-02, -5.108550461615976e-02, -5.101170068945691e-02, -5.102847426062399e-02, -5.102847426062399e-02, -2.332133551072848e-02, -2.321924725175679e-02, -2.001468767576388e-02, -2.092085062438665e-02, -1.916345973812460e-02, -1.916345973812460e-02, 1.010393106444410e-02, 7.946133060922766e-03, -2.140157661835970e-02, 2.594824270009148e-02, 1.628713387158230e-02, 1.628713387158233e-02, -1.905602651247517e-03, -1.987448651558955e-03, -3.940457462709231e-03, -1.208360593267892e-03, -8.503074701215980e-04, -8.503074701215937e-04, -7.457736026656099e-02, -7.452804829092610e-02, -7.457568148393082e-02, -7.453207796990552e-02, -7.455213803266636e-02, -7.455213803266636e-02, -4.273800278884087e-02, -4.418474674292247e-02, -4.137213573803091e-02, -4.274176746724975e-02, -4.411724098891222e-02, -4.411724098891222e-02, -3.453597337508435e-02, -5.442962654557932e-02, -3.021410695365604e-02, -4.864934278464753e-02, -3.543633533735805e-02, -3.543633533735802e-02, 1.724216580328738e-02, 2.450884812518448e-02, 1.457359377725865e-02, -8.381977738827004e-02, 2.397962041904404e-02, 2.397962041904404e-02, -1.000983848197237e-03, -1.213170469340372e-03, -9.170437806613070e-04, 3.534449241416479e-03, -9.155218872544632e-04, -9.155218872544616e-04, -4.988610257966108e-02, -4.170975139111837e-02, -4.351484650890831e-02, -4.573592212898796e-02, -4.452808356503554e-02, -4.452808356503554e-02, -5.975180353361388e-02, -3.513826410182190e-02, -3.716254057370739e-02, -3.767264072713099e-02, -3.726411499374790e-02, -3.726411499374789e-02, -5.476517192466623e-02, 1.416111750167629e-02, -1.970966140817906e-03, -2.337965291752462e-02, -1.615902011931879e-02, -1.615902011931876e-02, -2.979805089745728e-02, -4.263095144391176e-03, -1.802337718344821e-03, -2.550690836442468e-02, 1.214540157286071e-02, 1.214540157286069e-02, -2.669137025523316e-03, -3.819564880532856e-04, -6.801327447297123e-04, 1.013004679145784e-02, -8.797655716436559e-04, -8.797655716436570e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.300481752457191e-02, -7.295922018594860e-02, -7.300628280538402e-02, -7.296005386485038e-02, -7.300175258604501e-02, -7.295698853215930e-02, -7.298803229726873e-02, -7.293611500707979e-02, -7.301070105855557e-02, -7.293411763624234e-02, -7.301070105855557e-02, -7.293411763624234e-02, -9.110722610023216e-02, -9.133898791851131e-02, -9.111051022902741e-02, -9.136104849125121e-02, -9.141587156410126e-02, -9.157874906060316e-02, -9.057510172445708e-02, -9.080914255809636e-02, -9.108877039735871e-02, -9.104729584730420e-02, -9.108877039735871e-02, -9.104729584730420e-02, -4.885261521054623e-02, -4.930101054386567e-02, -4.909878029245669e-02, -4.945531220015067e-02, -5.887704729491914e-02, -6.458545865739145e-02, -6.221439080567629e-02, -6.053109269127255e-02, -5.179373404882447e-02, -1.101457716613031e-01, -5.179373404882447e-02, -1.101457716613031e-01, -8.183665659132033e-02, -6.361982433149940e-02, -8.651542586306757e-02, -6.514458155192500e-02, -5.120661194149561e-02, -5.710591109447524e-02, 5.971068990900137e-03, 5.138187709307192e-03, 1.503560698841536e-02, 5.949225328667005e-02, 1.503560698841535e-02, 5.949225328666950e-02, -3.052723198720575e-03, -2.517372568566437e-03, -3.202448810479767e-03, -2.576436640936800e-03, 5.666471359632563e-03, 3.674002786626927e-03, -1.740874939365333e-03, -1.835955333892703e-03, -8.498888235230140e-04, -4.439835096148047e-03, -8.498888235230113e-04, -4.439835096147825e-03, -6.053928969638107e-02, -6.049956625976829e-02, -6.098148757905802e-02, -6.091895238864480e-02, -6.053680973302395e-02, -6.049100291991062e-02, -6.091179761382026e-02, -6.087820012180827e-02, -6.078853441922144e-02, -6.071167250539874e-02, -6.078853441922144e-02, -6.071167250539874e-02, -1.084935900947166e-01, -1.086616126544628e-01, -1.061487865966725e-01, -1.064427412410396e-01, -1.176462474822593e-01, -1.146329111214344e-01, -1.156314141470385e-01, -1.126987935099932e-01, -1.006247739755907e-01, -1.069567431655157e-01, -1.006247739755907e-01, -1.069567431655157e-01, -4.940815815810450e-02, -4.933339654305050e-02, -1.041427677026054e-01, -1.034048265959032e-01, -5.163749377307338e-02, -4.917196730106661e-02, -1.138272999407434e-01, -1.071741542536250e-01, -4.955720094227795e-02, -5.881944770277217e-02, -4.955720094227788e-02, -5.881944770277238e-02, 5.713826277618095e-02, 5.428799388553356e-02, -3.189477210212491e-02, -3.075485938060433e-02, 6.112145398113100e-02, 4.771894472302884e-02, -1.567869698552130e-01, -1.568047350632960e-01, 4.373450644156219e-02, 3.388483942952706e-02, 4.373450644156219e-02, 3.388483942952706e-02, -1.526995033092431e-03, -1.348755382013984e-03, -1.801313901083603e-03, -1.717247272448819e-03, -1.488496632237815e-03, -1.240113008035018e-03, 3.272436026709816e-02, 3.219199045382917e-02, -2.559264612302146e-03, -9.406870410108471e-04, -2.559264612302306e-03, -9.406870410108483e-04, -7.465158239714335e-02, -7.398908074661256e-02, -7.147488577242919e-02, -7.123382755394986e-02, -7.519530605543306e-02, -7.480481642029251e-02, -7.648314275867409e-02, -7.593240802915457e-02, -7.610887283556046e-02, -7.562633235331218e-02, -7.610887283556046e-02, -7.562633235331218e-02, -6.960944395241307e-02, -6.917613502117145e-02, -4.304299055148571e-02, -4.175639233943812e-02, -2.999505173246458e-02, -2.961404956108827e-02, -4.345095617993666e-02, -4.341663752170997e-02, -3.295146594858190e-02, -3.248425524745813e-02, -3.295146594858189e-02, -3.248425524745815e-02, -1.103020854848948e-01, -1.091102663328652e-01, -7.830821620526372e-02, -7.536726113011677e-02, -9.650550127097000e-02, -8.923842875655347e-02, -4.442933028122379e-02, -4.289384239887274e-02, -7.375476882303678e-02, -7.317221434353315e-02, -7.375476882303666e-02, -7.317221434353248e-02, -4.359887242976034e-02, -4.177820739919996e-02, 2.867969698749656e-03, 2.677912225018262e-03, 1.682825756848031e-02, 1.373428196575650e-02, -3.561942245084021e-02, -3.250895372107714e-02, 5.772184969705976e-02, 4.133314567210852e-02, 5.772184969705914e-02, 4.133314567210814e-02, -3.767723028901212e-03, -3.381168777309793e-03, -5.343321559977519e-04, -5.333928598154074e-04, -1.147041259808342e-03, -9.389587594658890e-04, 4.777152363115872e-02, 4.428914364379048e-02, -2.287958315358266e-03, -9.226296373904576e-04, -2.287958315358200e-03, -9.226296373904566e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.111224073916525e-10, 0.000000000000000e+00, -4.114533307840726e-10, -4.111014398641987e-10, 0.000000000000000e+00, -4.114405153872060e-10, -4.111085398044263e-10, 0.000000000000000e+00, -4.114178434590073e-10, -4.113148766794243e-10, 0.000000000000000e+00, -4.117166472499899e-10, -4.110767105012089e-10, 0.000000000000000e+00, -4.116709514452612e-10, -4.110767105012089e-10, 0.000000000000000e+00, -4.116709514452612e-10, 3.386048220170523e-07, 0.000000000000000e+00, 3.486342736323304e-07, 3.385820304537691e-07, 0.000000000000000e+00, 3.494999626125177e-07, 3.485319501457375e-07, 0.000000000000000e+00, 3.547406713098304e-07, 3.094764186021258e-07, 0.000000000000000e+00, 3.196058771028944e-07, 3.365847756248457e-07, 0.000000000000000e+00, 3.289128494446014e-07, 3.365847756248457e-07, 0.000000000000000e+00, 3.289128494446014e-07, 4.866204438497445e-04, 0.000000000000000e+00, 6.319695398212632e-04, 4.877360050263508e-04, 0.000000000000000e+00, 6.556502612951998e-04, 1.282457618616490e-03, 0.000000000000000e+00, 1.406070434417630e-03, 1.192299039761767e-03, 0.000000000000000e+00, 1.139517637790403e-03, 1.884987901307634e-03, 0.000000000000000e+00, 2.774545157223348e-03, 1.884987901307634e-03, 0.000000000000000e+00, 2.774545157223348e-03, 1.332911475573073e+00, 0.000000000000000e+00, 9.083298787487242e-01, 1.357677985284494e+00, 0.000000000000000e+00, 8.719810100434638e-01, 5.869135440530256e-04, 0.000000000000000e+00, 1.066997340839288e-03, 6.631589560503199e-01, 0.000000000000000e+00, 5.978143207014169e-01, -1.967302083867096e-01, 0.000000000000000e+00, 2.038863829032549e+00, -1.967302083867127e-01, 0.000000000000000e+00, 2.038863829032637e+00, 2.955107094318243e+02, 0.000000000000000e+00, 2.704066991175278e+02, 2.643281081523899e+02, 0.000000000000000e+00, 2.421032071176816e+02, -1.193518710339071e+01, 0.000000000000000e+00, -6.736953359192174e+00, 8.485346043421175e+02, 0.000000000000000e+00, 8.813347921685081e+02, 4.196801427354853e+02, 0.000000000000000e+00, 1.458203620591853e+03, 4.196801427354837e+02, 0.000000000000000e+00, 1.458203620592370e+03, -1.933869190341931e-07, 0.000000000000000e+00, -1.947542103061539e-07, -1.833659747012751e-07, 0.000000000000000e+00, -1.851340735165394e-07, -1.930887724712515e-07, 0.000000000000000e+00, -1.946381232800995e-07, -1.845283500124073e-07, 0.000000000000000e+00, -1.858510226966077e-07, -1.880697108039497e-07, 0.000000000000000e+00, -1.899277894544360e-07, -1.880697108039497e-07, 0.000000000000000e+00, -1.899277894544360e-07, 2.519009489948950e-06, 0.000000000000000e+00, 2.471638403736395e-06, 1.251686547398331e-06, 0.000000000000000e+00, 1.240521749879456e-06, 4.782615057930940e-06, 0.000000000000000e+00, 4.192693136312103e-06, 3.643046345357857e-06, 0.000000000000000e+00, 3.061070528116287e-06, 3.348360081131714e-07, 0.000000000000000e+00, 1.383031635943242e-06, 3.348360081131714e-07, 0.000000000000000e+00, 1.383031635943242e-06, -1.557496986462047e-03, 0.000000000000000e+00, -1.847817379323924e-03, 3.700012253469571e-02, 0.000000000000000e+00, 3.763569288637239e-02, 8.517834219627243e-05, 0.000000000000000e+00, 5.340612057546003e-04, 6.055718974818319e-02, 0.000000000000000e+00, 5.044787961055366e-02, -1.574277060447078e-04, 0.000000000000000e+00, 4.726716718039242e-04, -1.574277060447149e-04, 0.000000000000000e+00, 4.726716718038847e-04, -2.352384710594208e+00, 0.000000000000000e+00, -2.187903998891715e+00, 5.129082624079492e-01, 0.000000000000000e+00, 4.893440504256955e-01, -3.781204150403252e+00, 0.000000000000000e+00, -2.460398408540340e+00, 2.185081779728802e-04, 0.000000000000000e+00, 2.190044041751820e-04, -5.853552510951648e-01, 0.000000000000000e+00, -4.644062467827704e-01, -5.853552510951647e-01, 0.000000000000000e+00, -4.644062467827703e-01, 1.339538202230612e+03, 0.000000000000000e+00, 1.191008934096233e+03, 8.892905782668632e+02, 0.000000000000000e+00, 8.091749609459256e+02, 4.354406482415274e+03, 0.000000000000000e+00, 4.124233638543493e+03, -8.583133110180675e+00, 0.000000000000000e+00, -8.042897892266126e+00, 1.581267222259944e+03, 0.000000000000000e+00, 1.714112789781278e+03, 1.581267222260794e+03, 0.000000000000000e+00, 1.714112789781357e+03, 1.481738515857036e-01, 0.000000000000000e+00, 1.494500551629345e-01, 6.059774299104703e-02, 0.000000000000000e+00, 6.162492928342666e-02, 8.504916958177400e-02, 0.000000000000000e+00, 8.625164030938534e-02, 1.107541331573571e-01, 0.000000000000000e+00, 1.115628473211019e-01, 9.727066274284794e-02, 0.000000000000000e+00, 9.828126718125264e-02, 9.727066274284794e-02, 0.000000000000000e+00, 9.828126718125262e-02, 1.084232526752653e-01, 0.000000000000000e+00, 1.110431874341910e-01, -1.164883852653779e-02, 0.000000000000000e+00, -1.177538238532392e-02, -1.785979057078151e-02, 0.000000000000000e+00, -1.748493546644370e-02, -3.787875210180305e-03, 0.000000000000000e+00, -3.215211012661662e-03, -1.496427082313088e-02, 0.000000000000000e+00, -1.467999604827183e-02, -1.496427082313088e-02, 0.000000000000000e+00, -1.467999604827181e-02, 2.818513914057278e-02, 0.000000000000000e+00, 2.872835765882967e-02, 3.614106009609475e-01, 0.000000000000000e+00, 3.415410974231867e-01, 2.079605918772789e-01, 0.000000000000000e+00, 1.849353339011318e-01, -8.577061527771317e-03, 0.000000000000000e+00, -9.339763385164691e-03, 6.900763066899313e-02, 0.000000000000000e+00, 6.838247512810948e-02, 6.900763066899362e-02, 0.000000000000000e+00, 6.838247512810863e-02, -9.714372928933703e-03, 0.000000000000000e+00, -1.052552549196446e-02, -8.073880951579955e+00, 0.000000000000000e+00, -7.536425529800393e+00, -9.359645981753717e+00, 0.000000000000000e+00, -6.900451548389043e+00, -3.647629508778723e-02, 0.000000000000000e+00, -5.139285815137113e-02, -7.076281279672446e+00, 0.000000000000000e+00, -4.534049957805490e+00, -7.076281279672274e+00, 0.000000000000000e+00, -4.534049957805417e+00, 7.607356330791049e+01, 0.000000000000000e+00, 7.470442610438276e+01, 1.597664012592757e+04, 0.000000000000000e+00, 1.586329937336147e+04, 5.912804254928870e+03, 0.000000000000000e+00, 5.373761330566803e+03, -7.121171107751493e+00, 0.000000000000000e+00, -6.152747848916150e+00, 2.989069897433756e+03, 0.000000000000000e+00, 2.089637581625538e+03, 2.989069897433900e+03, 0.000000000000000e+00, 2.089637581625465e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.786042644917138e-05, 2.787386718692166e-05, 2.785887391836741e-05, 2.787273820172435e-05, 2.785765911137026e-05, 2.786994442951180e-05, 2.787522123120872e-05, 2.789232830637027e-05, 2.785936273922024e-05, 2.788613687975537e-05, 2.785936273922024e-05, 2.788613687975537e-05, 1.904088334403070e-04, 1.898226978397732e-04, 1.904669670303079e-04, 1.898077370814776e-04, 1.909780626594906e-04, 1.909114542471688e-04, 1.932686734625572e-04, 1.927210861396645e-04, 1.903889537110430e-04, 1.932279476497687e-04, 1.903889537110430e-04, 1.932279476497687e-04, 1.458499127265196e-03, 1.450596520237851e-03, 1.464455113471508e-03, 1.449750678053801e-03, 1.448081368338909e-03, 1.480270415901272e-03, 1.626379586971336e-03, 1.659226811058732e-03, 1.351586722825374e-03, 1.557517087577972e-03, 1.351586722825374e-03, 1.557517087577972e-03, 7.491320894800255e-03, 1.011279652218078e-02, 8.122155891532879e-03, 1.125738353725242e-02, 3.166549910336727e-04, 3.430456429057423e-04, 9.556465129360392e-04, 1.274049641166437e-03, 7.186519728590276e-03, -3.301573934493195e-04, 7.186519728590483e-03, -3.301573934493431e-04, -5.294689893666147e-04, -5.607896956131989e-04, -5.551416697114250e-04, -5.953537597441199e-04, -1.118454020044261e-03, -1.196377930375062e-03, -2.667647659719645e-04, -2.694129124998382e-04, -4.591385713787539e-04, -3.087951205278309e-04, -4.591385713787556e-04, -3.087951205278625e-04, 5.885460028456423e-05, 5.943354275016715e-05, 4.615900620744075e-05, 4.716570438152408e-05, 5.823008829640720e-05, 5.906908689725464e-05, 4.733712894212728e-05, 4.792455608798010e-05, 5.233247374456792e-05, 5.329641516181181e-05, 5.233247374456792e-05, 5.329641516181181e-05, 9.793931452853866e-04, 9.879106123581829e-04, 1.035936777853684e-03, 1.042975967223991e-03, 9.532437292514111e-04, 9.687912889175740e-04, 1.003278345013458e-03, 1.020059063779866e-03, 1.029391021308949e-03, 1.019993675907571e-03, 1.029391021308949e-03, 1.019993675907571e-03, 7.185338293390714e-03, 7.455978904078824e-03, -8.895096168057171e-03, -9.637214419223081e-03, 5.080975129044358e-03, 5.882105867625810e-03, -2.541453330958831e-03, -3.135193139374669e-03, 6.621754741767757e-03, 6.169836664059234e-03, 6.621754741767752e-03, 6.169836664059219e-03, -8.053652417891085e-04, -7.567896135685283e-04, 2.587964387693023e-03, 2.616423890261476e-03, -9.009995369052797e-04, -8.774957509871516e-04, -5.631983458967384e-04, -5.643745908341994e-04, -3.224421888419075e-04, 4.861592792844700e-04, -3.224421888419075e-04, 4.861592792844704e-04, -1.282979495626424e-04, -1.311744193091635e-04, -2.227815501455147e-04, -2.069701222795045e-04, -5.247522601162490e-04, -5.735825053685187e-04, -1.168936112583259e-03, -1.357601436284024e-03, -1.427730798570768e-04, -5.988422321378711e-04, -1.427730798570784e-04, -5.988422321378444e-04, -1.385734937312230e-01, -1.418164090199368e-01, -6.903183068776236e-02, -7.139618415646638e-02, -9.328461251587461e-02, -9.622451856215083e-02, -1.157852289713797e-01, -1.186452251749132e-01, -1.044145212962412e-01, -1.073279971626613e-01, -1.044145212962412e-01, -1.073279971626613e-01, -5.156877870889329e-02, -5.390989933170563e-02, 1.818762771769796e-02, 1.829396268919395e-02, 2.005425461403186e-02, 1.997789256018017e-02, 7.099084951024811e-03, 6.711431056169621e-03, 1.676541127229139e-02, 1.668999603144257e-02, 1.676541127229139e-02, 1.668999603144256e-02, -5.368919438489874e-03, -6.139093463166399e-03, 5.224427781297910e-03, 5.325360747880181e-03, 8.489206638962462e-03, 8.911596621469686e-03, 1.350412101770443e-02, 1.332886452009446e-02, 1.291103495424357e-02, 1.305109626860715e-02, 1.291103495424362e-02, 1.305109626860733e-02, 1.308967693005295e-02, 1.379559678098683e-02, -1.228434895018084e-03, -1.206532597228387e-03, -1.166988405952764e-03, -1.204497057978113e-03, 1.554666394712148e-02, 2.070026674715518e-02, -1.235635732748781e-03, -1.167190629701320e-03, -1.235635732748772e-03, -1.167190629701190e-03, -3.799683459741129e-04, -3.807953373462683e-04, -4.279295380289553e-05, -3.207566468888623e-05, -2.848812953354083e-04, -3.087046526903215e-04, -1.363091803280549e-03, -1.527300569570128e-03, -2.448691413076769e-04, -5.663264080583954e-04, -2.448691413076813e-04, -5.663264080583699e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
