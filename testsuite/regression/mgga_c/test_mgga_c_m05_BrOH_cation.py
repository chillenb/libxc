
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504602604e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.374481135353435e-01, -1.374471588820496e-01, -1.029532093255392e-01, -9.717898763618085e-02, -5.794340270857547e-02, -5.819811009976043e-02, -5.809686013381245e-02, -5.810602587249004e-02, -9.719325960544190e-02, -6.701332647017211e-02, -5.033441728606700e-02, 3.361813548339370e-03, -4.730546762601420e-02, -6.628241523783371e-02, 1.301701316772759e-03, -2.081490191021973e-02, -2.234148191790775e-02, -2.648710212882084e-02, 2.711666416045281e-02, 1.497038143937120e-02, -5.902705491883287e-03, -1.902641781159376e-03, -2.842091769427865e-03, -3.789837496209968e-03, -1.181222108849094e-03, -8.334559722982987e-04, -8.334559722983033e-04, -7.463828671939331e-02, -7.458535707650686e-02, -7.463522734054187e-02, -7.458853680121788e-02, -9.991561915381166e-02, -9.989132129160772e-02, -4.168815188882461e-02, -4.358515402819198e-02, -4.012179966681828e-02, -4.191347342621797e-02, -8.240605015121551e-02, -4.347130729406146e-02, -5.565722680867537e-02, -4.160338721060069e-02, -3.506776081699718e-02, -3.944588086566209e-02, -5.395349008300917e-02, -4.054816189260477e-02, 1.493241700176809e-02, -4.119269207286926e-03, 1.210149205012888e-02, -5.965682647713667e-02, 2.334319542486244e-02, 2.334319542486247e-02, -1.404553461584587e-03, -1.157617003397454e-03, -8.932990254250667e-04, 4.282082242376709e-03, -8.880297919927497e-04, -8.880297919927487e-04, -3.526656532455990e-02, -3.704021091719746e-02, -6.383563580100113e-02, -4.989899732109293e-02, -6.385539257642651e-02, -5.004102564561472e-02, -3.519016224929646e-02, -5.272272668308874e-02, -5.267645687232600e-02, -3.903257663233022e-02, -3.923929687423471e-02, -5.228471662898870e-02, -5.691405436921989e-02, 1.578988098648826e-02, -3.208732772948480e-02, -4.494345145366165e-02, -1.288361540804682e-02, -4.014885446527672e-02, -3.142196226768023e-02, -1.432337785401933e-02, -2.535763260162656e-03, -2.821195215246483e-02, 1.039290465718629e-02, 1.039290465718625e-02, -5.037446550363285e-03, -3.334557721364376e-04, -1.374982125405463e-03, -2.268013163367492e-02, -8.551007187072636e-04, -1.702784103415924e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747369753440880e-01, -1.747373592460837e-01, -1.747369289286906e-01, -1.747375762850792e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.889071774829790e-01, -1.739531471122491e-02, -1.889050559323358e-01, -1.741036486783358e-02, -5.792094270691945e-02, -5.793226301628418e-02, -5.067229522785485e-02, -1.349245149049828e-01, -1.192432423637587e-01, -1.192923667318177e-01, -1.182413163378218e-01, -1.181100170032946e-01, -1.186234816186612e-01, -1.186150800048719e-01, -1.192457832978575e-01, -1.178944467396623e-01, -1.350047364174518e-01, -4.910195804138089e-02, -7.534022876448582e-02, -7.481054072998643e-02, -7.505471560238852e-02, -1.517538238087404e-01, -1.353860221277685e-01, -1.424802793275541e-01, -1.769209665128057e-01, -7.090499361415444e-02, -7.037457509512338e-02, -7.906556863981586e-02, -1.024021758973158e-01, -1.810820686854142e-01, -3.648724500568609e-02, -1.279466745312692e-01, -3.872716293899900e-02, -1.203394895603457e-01, -3.216929698943030e-01, -4.738332881207320e-02, 2.761310112071470e-02, 2.722505493977967e-02, 1.513099315711509e-02, 1.748162882346802e-01, -4.058804125491490e-02, -3.891680557055947e-02, -3.052793286185276e-03, -2.518497630545321e-03, -5.461228368125463e-03, -2.107885342334937e-03, -9.436817998505213e-03, 2.909603230381540e-02, -1.735770629649110e-03, -1.832837769418452e-03, -8.500498167950319e-04, -4.445509389839819e-03, -8.500498167950159e-04, -4.445509389839594e-03, -5.899586652247298e-02, -5.905674025309636e-02, -5.943984513079555e-02, -5.947856055396277e-02, -5.902926556610028e-02, -5.907281571317116e-02, -5.940465443842769e-02, -5.946120488068059e-02, -1.401678124039088e-01, -4.069285843189936e-02, -4.065713875832366e-02, -1.402300271372207e-01, -1.327358404245748e-01, -1.321850501562481e-01, -1.268598554767014e-01, -1.266243315088030e-01, -1.384978021437053e-01, -1.354222812283778e-01, -1.333388251227353e-01, -1.303052528046237e-01, -6.788426302967376e-02, -1.163628273082699e-01, -1.245136738615042e-01, -1.296549818508039e-01, -5.480841547537234e-03, -8.019052058467868e-02, -2.632040705438597e-02, -2.780018618751502e-02, -6.820534747299910e-02, -4.886287177277918e-02, -3.930416623371980e-02, -3.116650542979684e-02, -6.235629414551840e-04, -8.391753245993767e-02, -2.706636828226236e-02, -3.760518438720978e-02, 5.730084235546352e-02, 5.482625925457063e-02, -1.542432136433872e-02, -1.733462388383048e-01, 6.022463568540167e-02, 4.564129530126732e-02, -4.111342014992098e-02, -4.124730575838057e-02, 5.338212303554524e-02, 3.901293084000694e-02, 5.338212303554537e-02, 3.901293084000697e-02, -2.618355922097684e-03, -1.307980745753517e-03, -1.794221669641193e-03, -1.707972893684184e-03, -1.487402714498406e-03, -1.236824848912310e-03, 7.223951581923771e-02, -7.577808670460409e-04, -2.554205095102685e-03, -9.474460684749689e-04, -2.554205095102634e-03, -9.474460684749592e-04, -6.638233128145316e-02, -6.637847661953637e-02, -5.179832706150011e-02, -5.209205889931754e-02, -7.198832468635549e-02, -7.148872356177728e-02, -7.382971162976039e-02, -5.883914619703361e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.398790129240673e-02, -5.636736712830261e-02, -6.386886250888391e-02, -6.404359117870025e-02, -1.259822783275026e-02, -7.534740128921731e-02, -3.911338798298299e-03, -7.549649551500948e-02, -2.615577484566445e-02, -2.595064621702422e-02, -2.484355150830064e-02, -2.449190629859162e-02, -5.442693977960137e-03, -7.523280800143617e-02, -5.921301713449128e-03, -8.174703564715895e-02, -7.542931701817647e-02, -7.283685790722906e-02, -5.024371686921363e-02, -1.247609237049060e-01, -6.596430909823102e-02, -4.610734129614342e-02, -9.187294341307577e-02, -9.128235711039531e-02, -7.944173079496529e-02, -5.943995748023342e-02, -6.328233412482966e-02, -5.892491089340048e-02, -1.773472996354030e-02, -1.753120798266076e-02, 1.377039681347518e-02, 1.102337681990422e-02, -5.876140830040460e-02, -4.690765226305641e-02, 5.618976194712550e-02, 3.955435633812374e-02, 5.618976194712521e-02, 3.955435633812338e-02, -6.593851617928386e-03, -6.257235187311729e-03, -5.220392247300670e-04, -5.181024124176348e-04, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635372e-02, -2.688551334493897e-02, -2.278154421407955e-03, -9.296473831925059e-04, -2.221863196129922e-03, -2.247166125594686e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.605376196191023e-09, 0.000000000000000e+00, -3.605149687675020e-09, -3.605282714963961e-09, 0.000000000000000e+00, -3.605082904941932e-09, -3.604991651522347e-09, 0.000000000000000e+00, -3.604657141700714e-09, -3.395500998834483e-09, 0.000000000000000e+00, -6.849505159232267e-10, -3.394844369031523e-09, 0.000000000000000e+00, -6.848333780443275e-10, -5.230628731906246e-10, 0.000000000000000e+00, -5.230611334345455e-10, -1.344218173179877e-06, 0.000000000000000e+00, -2.218500582133706e-05, -1.934801376795434e-07, 0.000000000000000e+00, -1.926753295683999e-07, -2.145162137114039e-07, 0.000000000000000e+00, -2.168351727484522e-07, -2.064023202274215e-07, 0.000000000000000e+00, -2.064687199276736e-07, -1.961946370332227e-07, 0.000000000000000e+00, -2.188907544898952e-07, -2.221992870400527e-05, 0.000000000000000e+00, -1.380913303468427e-06, -5.941643478305586e-02, 0.000000000000000e+00, -5.819572878805422e-02, -5.029136827797287e-02, 0.000000000000000e+00, 2.165609716054492e-03, 2.822842751900332e-03, 0.000000000000000e+00, 3.047655802599571e-03, 2.946932317403095e-03, 0.000000000000000e+00, -5.382908390982457e-02, -5.556123399729970e-02, 0.000000000000000e+00, -7.768013680755360e-02, 1.861727192908246e-03, 0.000000000000000e+00, 4.143268167296484e-03, -2.645379743709141e+01, 0.000000000000000e+00, 1.427606417866751e+00, -2.500651081395351e+01, 0.000000000000000e+00, 1.259082548898305e+00, 1.959075138817848e-03, 0.000000000000000e+00, -2.274540453655085e-02, 9.819314746509807e-02, 0.000000000000000e+00, 5.816022309088088e-02, -1.857238903439972e-01, 0.000000000000000e+00, -3.992398561751473e+00, 3.406052355125518e-01, 0.000000000000000e+00, -3.196756413464326e+02, 2.963007100182446e+02, 0.000000000000000e+00, 2.708873263327627e+02, -5.467555572413182e+07, 0.000000000000000e+00, 1.484994119742314e+02, -3.616747431346679e+04, 0.000000000000000e+00, -2.743070343291600e+01, 8.550478976029134e+02, 0.000000000000000e+00, 8.887093974166812e+02, 4.211210611856376e+02, 0.000000000000000e+00, 1.582886520663697e+03, 4.211210611856252e+02, 0.000000000000000e+00, 1.582886520664056e+03, -2.112128744355199e-07, 0.000000000000000e+00, -2.114993273022597e-07, -2.012886207578403e-07, 0.000000000000000e+00, -2.019567212510891e-07, -2.105101395591517e-07, 0.000000000000000e+00, -2.110977075902953e-07, -2.020428940016014e-07, 0.000000000000000e+00, -2.023917650885371e-07, -2.562741465308467e-06, 0.000000000000000e+00, -3.157089259298504e-07, -3.150179165767721e-07, 0.000000000000000e+00, -2.566056997114484e-06, 6.441084070177453e-06, 0.000000000000000e+00, 6.334568409499363e-06, 4.626201394388226e-06, 0.000000000000000e+00, 4.574607728765536e-06, 8.088048676553276e-06, 0.000000000000000e+00, 7.488442252527388e-06, 6.473869232152658e-06, 0.000000000000000e+00, 5.875350428241481e-06, -1.086266919316570e-05, 0.000000000000000e+00, -3.288408172208617e-04, 4.206843972192957e-06, 0.000000000000000e+00, 5.221834856504689e-06, -1.324692434297749e-02, 0.000000000000000e+00, -9.108289485179880e-02, -8.678035646796449e-03, 0.000000000000000e+00, -8.231650764282096e-03, -2.253147016086862e-03, 0.000000000000000e+00, -5.021025854839784e-03, -1.005090006693293e-02, 0.000000000000000e+00, -1.010986288060226e-02, -1.273443025918118e-02, 0.000000000000000e+00, -9.636891073723440e-02, -8.525161637553347e-03, 0.000000000000000e+00, -9.567876664903658e-03, -2.122657382267723e+00, 0.000000000000000e+00, -1.961309330707201e+00, -2.502141776736370e+01, 0.000000000000000e+00, 1.455577642653123e+00, -3.222222630408453e+00, 0.000000000000000e+00, -2.073145014097976e+00, -4.232064458470695e-05, 0.000000000000000e+00, -4.241722294208670e-05, -9.604258635331125e-01, 0.000000000000000e+00, -6.659495739896294e-01, -9.604258635330906e-01, 0.000000000000000e+00, -6.659495739896266e-01, -1.837889775707390e+09, 0.000000000000000e+00, 1.164296183358683e+03, 9.063230106448996e+02, 0.000000000000000e+00, 8.243328149898761e+02, 4.427008012706466e+03, 0.000000000000000e+00, 4.171093515233059e+03, -1.522965994691856e+01, 0.000000000000000e+00, -3.809888262089929e+03, 1.791233533431765e+03, 0.000000000000000e+00, 1.730677108883849e+03, 1.791233533431771e+03, 0.000000000000000e+00, 1.730677108883873e+03, 1.293518376050076e-01, 0.000000000000000e+00, 1.325074119992874e-01, 3.446159471651005e-02, 0.000000000000000e+00, 3.615363391627254e-02, -3.122949796496403e-02, 0.000000000000000e+00, -2.851773501339027e-02, -1.193815645753448e-02, 0.000000000000000e+00, 8.183510504427741e-02, -2.311788992224497e-02, 0.000000000000000e+00, -2.042317059679034e-02, -2.154499358844321e-02, 0.000000000000000e+00, 6.781524137157502e-02, 1.212809342155554e-01, 0.000000000000000e+00, 1.251731960662122e-01, -2.286595353551112e-02, 0.000000000000000e+00, -2.040311065660920e-01, -2.857374161315321e-02, 0.000000000000000e+00, -1.599303740244320e-01, -1.826922276178316e-02, 0.000000000000000e+00, -1.771015869145268e-02, -2.112387296687053e-02, 0.000000000000000e+00, -2.070468499384086e-02, -2.859129216980260e-02, 0.000000000000000e+00, -1.403322831015809e-01, -9.498894971361844e-03, 0.000000000000000e+00, -4.615794984338848e-02, 3.399937613457157e-01, 0.000000000000000e+00, 3.217167609448242e-01, -3.712899195358228e+00, 0.000000000000000e+00, 1.955527881964425e-01, -1.040172269170419e+00, 0.000000000000000e+00, -2.244250164297249e-02, 9.038487514083464e-02, 0.000000000000000e+00, 8.995221603064592e-02, 3.970850994317693e-02, 0.000000000000000e+00, -1.937289426059372e+00, -3.519591638747793e-03, 0.000000000000000e+00, -5.100564954048901e-03, -4.337720335890736e+04, 0.000000000000000e+00, -4.201161430333257e+04, -6.956505392988842e+00, 0.000000000000000e+00, -5.034155566002170e+00, -1.038880443748720e-02, 0.000000000000000e+00, -3.363500225868322e-02, -6.168663518371750e+00, 0.000000000000000e+00, -3.885307045093023e+00, -6.168663518371639e+00, 0.000000000000000e+00, -3.885307045093003e+00, -1.622396168515903e+07, 0.000000000000000e+00, -1.379972197152873e+07, 1.615366079776080e+04, 0.000000000000000e+00, 1.604169952841516e+04, -8.658972586658968e+09, 0.000000000000000e+00, -6.594174456188433e+09, -2.017109425089640e+03, 0.000000000000000e+00, -1.866483672048782e+03, 3.227538808226956e+03, 0.000000000000000e+00, 2.113815588504449e+03, 2.897286265059951e+03, 0.000000000000000e+00, -7.707914408206497e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.069559741411132e-16, -1.035299799956451e-56, -1.034821437599831e-56, -1.035329916613480e-56, -1.034920065353472e-56, -1.035480926332508e-56, -1.034456529929615e-56, 3.465994143479362e-05, -1.034808318398247e-56, 3.465160059019775e-05, 3.465365115216006e-05, 3.465160059019775e-05, 5.274015837390440e-04, -6.111313770439478e-50, 5.276132491450036e-04, 5.273777191468194e-04, 5.317418111445479e-04, 5.324729813678133e-04, 5.301608113140102e-04, 5.301535163294047e-04, 5.270768855974774e-04, 5.338669536159511e-04, -3.726118509200105e-22, 5.338669536159511e-04, -8.854145924598528e-16, -1.158130193591934e-43, -1.133520361690705e-43, 2.615435394695462e-03, 2.026561303798387e-03, 1.957717282373887e-03, 2.208391025339903e-03, -1.179164723058977e-43, -1.116681953517117e-43, -1.182532822669449e-43, 2.692265726559711e-03, 1.707961231394388e-03, -2.020310098625965e-38, 1.005449813889666e-02, -1.960559286474365e-38, 1.120480060260771e-02, 5.083951622904990e-04, -9.073090154422682e-45, 2.714935775595386e-04, 8.027878030424538e-04, 6.958044819870270e-03, -1.089682514610802e-03, 6.958044819870410e-03, -1.545147666508291e-37, -5.359713585811392e-04, -5.637213286525456e-04, -9.454052540822911e-31, -6.021805934883295e-04, -5.417041858002263e-35, -1.342084378453669e-03, -3.020448196284675e-04, -2.993343849620802e-04, -4.764769857515503e-04, -3.902047284142420e-04, -4.764769857515503e-04, -3.902047284142556e-04, 6.993160084219707e-05, 6.988247595994404e-05, 5.720280692080467e-05, 5.757762005549590e-05, 6.905364024133959e-05, 6.933524490090447e-05, 5.814012938221218e-05, 5.816523468125594e-05, -2.218607472576559e-50, 6.375892024356154e-05, 6.358393889492125e-05, -2.311696445317106e-38, 1.061884424198467e-03, 1.068643094270269e-03, 1.114725288602132e-03, 1.119991030876481e-03, 1.014289848089145e-03, 1.034239770276666e-03, 1.060318115632430e-03, 1.081095134464910e-03, 1.128389003639407e-03, -1.092582549568346e-47, 1.128389003639407e-03, 1.101317310877648e-03, 1.723248016610975e-02, -5.177963968334691e-42, 1.457153296011171e-02, 1.368524731495807e-02, 1.295090240193211e-02, 1.527334236769408e-02, 1.821815537172720e-02, 1.901987615350041e-02, 1.788357401058875e-02, -5.868004662295546e-42, 1.788357401058870e-02, 1.802211296160411e-02, -1.164798378681439e-03, -1.148449465518798e-03, -7.501831208085723e-39, 2.430272772012456e-03, -1.302771382144997e-03, -1.243912160632878e-03, 2.646107440380012e-03, 2.648927228324114e-03, -6.812351046778521e-04, 1.288422145006880e-04, -6.812351046778940e-04, 1.288422145006586e-04, -3.783726735757703e-29, -2.001478542935786e-04, -2.847994397375170e-04, -2.707965280882159e-04, -5.965517744943989e-04, -6.564638188804612e-04, -1.552922300064757e-03, -4.228316336911445e-36, -2.638083034135558e-04, -6.149709602278118e-04, -2.638083034135566e-04, -6.149709602277984e-04, -2.238750525310313e-01, -2.311902665493937e-01, -6.654335991177227e-02, -6.968060034384327e-02, -1.764061906412740e-40, -1.784393239974966e-40, -2.563269840910659e-40, -1.485878887840977e-01, -2.106422784831079e-40, -2.128447289333898e-40, -2.106422784831079e-40, -1.253121547809506e-01, -1.956588026665218e-01, -2.030707932408394e-01, 1.921170454656945e-02, -1.747815744959901e-41, 2.351030865443849e-02, -2.444624542510080e-41, 1.781778309074338e-02, 1.744149624852999e-02, 2.335727359195201e-02, 2.315956843270998e-02, 2.335727359195202e-02, -3.114685677739919e-41, 1.576787944363129e-02, -3.727205388356403e-42, 5.144848949396297e-03, 5.245371965438548e-03, -6.987015760598067e-40, 8.996792732362171e-03, -1.837125357568214e-40, 1.773360310997953e-02, 1.390554898305031e-02, 1.408091445177263e-02, 1.390554898305042e-02, -3.880340025661193e-40, 1.658517385971054e-02, 1.734690813804664e-02, -6.306557078975310e-35, -5.959682909553658e-35, -1.374495655905492e-03, -1.413099935084113e-03, 2.561435483777208e-02, 3.122478575616487e-02, -1.579916312040735e-03, -1.551128361749158e-03, -1.579916312040811e-03, -1.551128361749118e-03, -8.700710198417887e-32, -7.120266832717187e-32, -9.641969766786219e-05, -9.640740103067790e-05, -9.660802072655339e-28, -7.462917623473833e-28, -2.238229478102899e-36, -2.302715405311212e-36, -4.044246862644532e-04, -5.819646404848800e-04, -4.044246862644493e-04, -7.506989385187999e-29])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
