
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_ccalda_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504593144e-01, -1.645996352753138e-01, -1.646000385269956e-01, -1.645987760391359e-01, -1.645994337815262e-01, -1.645994337815262e-01, -1.107858338079807e-01, -1.107858953437147e-01, -1.107880165072750e-01, -1.107897430442740e-01, -1.107865686223898e-01, -1.107865686223898e-01, -6.701250247406935e-02, -6.698500377937716e-02, -6.633259148116975e-02, -6.653654308132115e-02, -6.601466217048685e-02, -6.601466217048685e-02, -3.772546353230669e-02, -3.795946683943207e-02, -7.068124505518066e-02, -3.293139689504487e-02, -1.526541811240782e-02, -1.526541811240782e-02, -3.742804480620166e-03, -3.896428770832829e-03, -1.464210916660881e-02, -2.354652783933932e-03, -1.364590841799276e-03, -1.364590841799277e-03, -1.224262316422455e-01, -1.224315803275297e-01, -1.224264973736021e-01, -1.224312205343068e-01, -1.224289319332372e-01, -1.224289319332372e-01, -9.471366535617835e-02, -9.491131677971464e-02, -9.456775994772994e-02, -9.474328335635160e-02, -9.488785088736884e-02, -9.488785088736884e-02, -6.380887766455101e-02, -6.578528704992190e-02, -6.183010859331449e-02, -6.280527360019050e-02, -6.383239922492884e-02, -6.383239922492885e-02, -2.698776593992570e-02, -3.791012633846802e-02, -2.562647700741955e-02, -9.418617811411110e-02, -2.924905814190179e-02, -2.924905814190178e-02, -1.867437303682261e-03, -2.308706657538892e-03, -1.805463207363423e-03, -2.030936909926109e-02, -1.707408334331035e-03, -1.707408334331034e-03, -6.392276690979566e-02, -6.378586267921407e-02, -6.383403429922513e-02, -6.387372934543464e-02, -6.385386255596297e-02, -6.385386255596297e-02, -6.327339264869264e-02, -5.970926945809524e-02, -6.077511354053345e-02, -6.179473836338838e-02, -6.127904999422965e-02, -6.127904999422965e-02, -6.692269726717126e-02, -4.238284622033884e-02, -4.605065041828248e-02, -5.192487929158572e-02, -4.894362432492207e-02, -4.894362432492208e-02, -5.781341812083731e-02, -1.432196011399807e-02, -1.760412020854827e-02, -5.111200887367875e-02, -2.337130478069041e-02, -2.337130478069040e-02, -5.026498563469858e-03, -6.963031878437730e-04, -1.364000878075964e-03, -2.266785655329535e-02, -1.648554673759688e-03, -1.648554673759690e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_ccalda_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363820950907e-01, -1.747379524988061e-01, -1.747359285530817e-01, -1.747385766668718e-01, -1.747391220991472e-01, -1.747361943173829e-01, -1.747317436311544e-01, -1.747410332518002e-01, -1.747292783533832e-01, -1.747448219204566e-01, -1.747292783533832e-01, -1.747448219204566e-01, -1.202873553124831e-01, -1.202941961874114e-01, -1.202869326523579e-01, -1.202947444813794e-01, -1.202981708433881e-01, -1.202878352641602e-01, -1.202982988010641e-01, -1.202912305492166e-01, -1.203856176792718e-01, -1.201975663411471e-01, -1.203856176792718e-01, -1.201975663411471e-01, -7.561949805100188e-02, -7.453436925848513e-02, -7.571829837112404e-02, -7.438193949452400e-02, -7.335183471384975e-02, -7.539407020301540e-02, -7.490570289340769e-02, -7.424452805638995e-02, -6.542122377202803e-02, -8.502178848358621e-02, -6.542122377202803e-02, -8.502178848358621e-02, -4.989024025793506e-02, -3.876443343590320e-02, -5.100189681354315e-02, -3.840217923122101e-02, -8.269970174571295e-02, -7.553585606745356e-02, -4.027642985427035e-02, -3.716382812670876e-02, -1.789953671880991e-02, -1.107042832661090e-01, -1.789953671880992e-02, -1.107042832661091e-01, -5.796933252982760e-03, -4.020978954878458e-03, -6.182496769999469e-03, -4.094080766802625e-03, -2.131174272695599e-02, -1.534827900065998e-02, -2.908032617959914e-03, -3.189454967001279e-03, -1.629075210570026e-03, -9.386739011720942e-03, -1.629075210570026e-03, -9.386739011720930e-03, -1.320294350129500e-01, -1.322513643643562e-01, -1.320319767287522e-01, -1.322596799327263e-01, -1.320277016234427e-01, -1.322536254358359e-01, -1.320342320799363e-01, -1.322566903921079e-01, -1.320301307186048e-01, -1.322561532896347e-01, -1.320301307186048e-01, -1.322561532896347e-01, -1.038104976695949e-01, -1.038447689921231e-01, -1.039372680129672e-01, -1.041247039720366e-01, -1.042733365023918e-01, -1.030858492062545e-01, -1.044877575693533e-01, -1.032329631215686e-01, -1.025286176020377e-01, -1.055111503734279e-01, -1.025286176020377e-01, -1.055111503734279e-01, -7.122678134034136e-02, -7.219613783525940e-02, -7.384396990987420e-02, -7.372693340855023e-02, -7.558190314511644e-02, -6.443387277886761e-02, -7.435478248776940e-02, -6.735389953437955e-02, -6.333532146409727e-02, -8.197262643014276e-02, -6.333532146409730e-02, -8.197262643014275e-02, -3.304493631068481e-02, -3.120756798311928e-02, -4.483756374648949e-02, -4.338975050819046e-02, -3.587553722111005e-02, -2.628661331682416e-02, -1.032205762642877e-01, -1.033494199965705e-01, -4.162158617834120e-02, -2.905160405986762e-02, -4.162158617834125e-02, -2.905160405986764e-02, -2.639793008505088e-03, -2.236000649175710e-03, -3.099713540034764e-03, -2.877895912499635e-03, -2.748879844204344e-03, -2.022386942413472e-03, -2.502384897269258e-02, -2.413055489983935e-02, -5.284740026121520e-03, -1.458378118254469e-03, -5.284740026121526e-03, -1.458378118254470e-03, -7.249569428123830e-02, -7.117155058682417e-02, -7.252453595256785e-02, -7.085781145256898e-02, -7.253945817486167e-02, -7.094359032352042e-02, -7.253088726281282e-02, -7.103469797318386e-02, -7.253697817747276e-02, -7.098732656592259e-02, -7.253697817747275e-02, -7.098732656592258e-02, -7.150393721343271e-02, -7.079176696078616e-02, -6.839384906085726e-02, -6.640426049252290e-02, -6.952991236392346e-02, -6.751735999381112e-02, -7.035646457725717e-02, -6.883267233747241e-02, -6.987694549814076e-02, -6.822710975366343e-02, -6.987694549814075e-02, -6.822710975366320e-02, -7.518240211674081e-02, -7.477641865193678e-02, -4.990239578982239e-02, -4.799733113072457e-02, -5.460945893165157e-02, -5.121117456395832e-02, -6.002181052598218e-02, -5.828634456827268e-02, -5.590899698234707e-02, -5.602925309771543e-02, -5.590899698234712e-02, -5.602925309771542e-02, -6.672733510301879e-02, -6.408448109536795e-02, -1.801445290970453e-02, -1.725650040800006e-02, -2.372839519028372e-02, -1.946912005854401e-02, -6.060994675505581e-02, -5.608115884233107e-02, -3.322546905073422e-02, -2.388000779291492e-02, -3.322546905073419e-02, -2.388000779291490e-02, -7.022645807289801e-03, -5.866199381838326e-03, -9.161755581291244e-04, -9.098602230520988e-04, -2.125786315798915e-03, -1.505770728337457e-03, -2.870296230051467e-02, -2.589861206172394e-02, -4.804464993502957e-03, -1.370108601158768e-03, -4.804464993502959e-03, -1.370108601158772e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.691632701878297e-21, 7.383320063832346e-21, 3.691632701878297e-21, 1.049856712307209e-20, 2.099570667285965e-20, 1.049856712307209e-20, 1.282593697687083e-20, 2.565545240258927e-20, 1.282593697687083e-20, 1.291338213677823e-19, 2.582674922156644e-19, 1.291338213677823e-19, 3.615718194941101e-19, 7.231476534473007e-19, 3.615718194941101e-19, 3.615718194941101e-19, 7.231476534473007e-19, 3.615718194941101e-19, 8.710581932257336e-16, 1.742116672344679e-15, 8.710581932257336e-16, 1.136078693354412e-15, 2.272158190947053e-15, 1.136078693354412e-15, 1.996638426818629e-15, 3.993276575710103e-15, 1.996638426818629e-15, 9.250217207127635e-16, 1.850043707370534e-15, 9.250217207127635e-16, 6.578086021075212e-13, 1.315617204444892e-12, 6.578086021075212e-13, 6.578086021075212e-13, 1.315617204444892e-12, 6.578086021075212e-13, 7.837140705648715e-08, 1.567428141136751e-07, 7.837140705648715e-08, 1.180807986453015e-07, 2.361615972900861e-07, 1.180807986453015e-07, 2.332479450749984e-07, 4.664958901510235e-07, 2.332479450749984e-07, 2.356800200619018e-08, 4.713600401198317e-08, 2.356800200619018e-08, 2.118887061156152e-05, 4.237774122312288e-05, 2.118887061156152e-05, 2.118887061156152e-05, 4.237774122312288e-05, 2.118887061156152e-05, 2.275384928916591e-03, 4.550769857832295e-03, 2.275384928916591e-03, 2.904551008321318e-03, 5.809102016643313e-03, 2.904551008321318e-03, 1.546520296439682e-06, 3.093040592879380e-06, 1.546520296439682e-06, 4.001144198329012e-04, 8.002288396656831e-04, 4.001144198329012e-04, 3.602943040365404e-01, 7.205886080730802e-01, 3.602943040365404e-01, 3.602943040365416e-01, 7.205886080730832e-01, 3.602943040365416e-01, 1.216902518116838e+01, 2.433805036237309e+01, 1.216902518116838e+01, 1.425688664818113e+01, 2.851377329634646e+01, 1.425688664818113e+01, 1.400190642934536e-01, 2.800381285869500e-01, 1.400190642934536e-01, 2.598583189328857e+00, 5.197166378656880e+00, 2.598583189328857e+00, 1.200006494997240e+03, 2.400012989994479e+03, 1.200006494997240e+03, 1.200006494997239e+03, 2.400012989994484e+03, 1.200006494997239e+03, -9.323723620999802e-13, -1.864744680872369e-12, -9.323723620999802e-13, -1.008346519822457e-12, -2.016693038502060e-12, -1.008346519822457e-12, -1.014273117856853e-12, -2.028546224366449e-12, -1.014273117856853e-12, -1.005320793958205e-12, -2.010641616741590e-12, -1.005320793958205e-12, -9.570042641841346e-13, -1.914008576559879e-12, -9.570042641841346e-13, -9.570042641841346e-13, -1.914008576559879e-12, -9.570042641841346e-13, 1.464092686237010e-13, 2.928185256509837e-13, 1.464092686237010e-13, 4.273469112393037e-12, 8.546938237995080e-12, 4.273469112393037e-12, 1.697378477320563e-10, 3.394756954424492e-10, 1.697378477320563e-10, 1.851713039166473e-10, 3.703426078603302e-10, 1.851713039166473e-10, 1.113373469079911e-09, 2.226746938166376e-09, 1.113373469079911e-09, 1.113373469079911e-09, 2.226746938166376e-09, 1.113373469079911e-09, 2.269399875587691e-07, 4.538799751174073e-07, 2.269399875587691e-07, 8.660495450396146e-09, 1.732099089948885e-08, 8.660495450396146e-09, 4.211510207573384e-05, 8.423020415146519e-05, 4.211510207573384e-05, 4.184650484998902e-05, 8.369300969998013e-05, 4.184650484998902e-05, 8.657300046141143e-05, 1.731460009228218e-04, 8.657300046141143e-05, 8.657300046141059e-05, 1.731460009228242e-04, 8.657300046141059e-05, 4.121799838771496e-04, 8.243599677536397e-04, 4.121799838771496e-04, 2.366559519556896e-05, 4.733119038910017e-05, 2.366559519556896e-05, 1.529048193353715e-02, 3.058096386707617e-02, 1.529048193353715e-02, 3.046889565528385e-11, 6.093779132986613e-11, 3.046889565528385e-11, 1.337142963741917e-02, 2.674285927483958e-02, 1.337142963741917e-02, 1.337142963741902e-02, 2.674285927484081e-02, 1.337142963741902e-02, 1.958146150707748e+01, 3.916292301415486e+01, 1.958146150707748e+01, 2.048946188347385e+00, 4.097892376694555e+00, 2.048946188347385e+00, 1.488294442144741e+02, 2.976588884289845e+02, 1.488294442144741e+02, 6.122034197931610e-04, 1.224406839577491e-03, 6.122034197931610e-04, 1.563706404320125e+03, 3.127412808640260e+03, 1.563706404320125e+03, 1.563706404320134e+03, 3.127412808640276e+03, 1.563706404320134e+03, 4.602640124581798e-06, 9.205280249137554e-06, 4.602640124581798e-06, 2.398696416608656e-06, 4.797392833176251e-06, 2.398696416608656e-06, 2.890845593215753e-06, 5.781691186403872e-06, 2.890845593215753e-06, 3.426720061466580e-06, 6.853440122921609e-06, 3.426720061466580e-06, 3.132066271909358e-06, 6.264132543817936e-06, 3.132066271909358e-06, 3.132066271909965e-06, 6.264132543820095e-06, 3.132066271909965e-06, 3.378363418097418e-06, 6.756726836175005e-06, 3.378363418097418e-06, 1.057598930761854e-06, 2.115197861442360e-06, 1.057598930761854e-06, 1.345460849991162e-06, 2.690921699993655e-06, 1.345460849991162e-06, 1.156960718732774e-06, 2.313921437501869e-06, 1.156960718732774e-06, 1.077505159268240e-06, 2.155010318562571e-06, 1.077505159268240e-06, 1.077505159106918e-06, 2.155010318266555e-06, 1.077505159106918e-06, 7.345942786493754e-08, 1.469188557318949e-07, 7.345942786493754e-08, 1.683794267539446e-05, 3.367588535251735e-05, 1.683794267539446e-05, 3.206312530660229e-05, 6.412625061321216e-05, 3.206312530660229e-05, 5.309662987908143e-06, 1.061932597581066e-05, 5.309662987908143e-06, 3.089361974258065e-08, 6.178723961979775e-08, 3.089361974258065e-08, 3.089361980562598e-08, 6.178723943365369e-08, 3.089361980562598e-08, 3.195542219866021e-06, 6.391084439759110e-06, 3.195542219866021e-06, 2.458034833112794e-03, 4.916069666201552e-03, 2.458034833112794e-03, 2.623891590268954e-02, 5.247783180536575e-02, 2.623891590268954e-02, 6.262032416497322e-05, 1.252406483299534e-04, 6.262032416497322e-05, 3.141630503412596e-02, 6.283261006825709e-02, 3.141630503412596e-02, 3.141630503411721e-02, 6.283261006824258e-02, 3.141630503411721e-02, 1.379165923141476e+00, 2.758331846282808e+00, 1.379165923141476e+00, 8.267361460775491e-01, 1.653472292127448e+00, 8.267361460775491e-01, 2.166916149114873e+02, 4.333832298228594e+02, 2.166916149114873e+02, 3.401286171192001e-03, 6.802572342404201e-03, 3.401286171192001e-03, 1.836228727924341e+03, 3.672457455848684e+03, 1.836228727924341e+03, 1.836228727924329e+03, 3.672457455848661e+03, 1.836228727924329e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.334948218755960e-16, -5.337885022284718e-16, -1.515578387483258e-15, -1.514602034063403e-15, -1.850307636057189e-15, -1.849723498103018e-15, -1.862816493765736e-14, -1.862817847904302e-14, -5.216375705741961e-14, -5.216310431959447e-14, -5.216375705741961e-14, -5.216310431959447e-14, -2.557166653429790e-13, -2.557164778484586e-13, -3.335397078952895e-13, -3.335395147110149e-13, -5.876006501823966e-13, -5.876011463470476e-13, -2.737587920405624e-13, -2.737586472600438e-13, -1.939860172507264e-10, -1.939860177164467e-10, -1.939860172507264e-10, -1.939860177164467e-10, -1.310645190779504e-07, -1.310645190698523e-07, -1.980066468298590e-07, -1.980066468308185e-07, -4.199253277421144e-07, -4.199253277439404e-07, -4.595843574810640e-08, -4.595843574460627e-08, -4.013165796196348e-05, -4.013165796196292e-05, -4.013165796196348e-05, -4.013165796196292e-05, -1.752559992556709e-04, -1.752559992556407e-04, -2.305345691827757e-04, -2.305345691828273e-04, -2.112146399450793e-06, -2.112146399452013e-06, -1.146970120565726e-05, -1.146970120562499e-05, -1.540556399543507e-02, -1.540556399543505e-02, -1.540556399543510e-02, -1.540556399543511e-02, -4.197496391687710e-05, -4.197496391686573e-05, -5.694392000802232e-05, -5.694392000797871e-05, -8.520361401781117e-05, -8.520361401785393e-05, -1.552134191753961e-06, -1.552134191751855e-06, -1.488407779477069e-03, -1.488407779477067e-03, -1.488407779477064e-03, -1.488407779477067e-03, 2.090991672862848e-09, 2.090991573490624e-09, 2.262560981200181e-09, 2.262560944998229e-09, 2.274561330000478e-09, 2.274561181635710e-09, 2.255537491762694e-09, 2.255537369013135e-09, 2.146883277273992e-09, 2.146883189028686e-09, 2.146883277273992e-09, 2.146883189028686e-09, -1.521157288973404e-11, -1.521156873179500e-11, -4.620158902235445e-10, -4.620158877044020e-10, -1.770595312191398e-08, -1.770595312861903e-08, -2.002722148793403e-08, -2.002722148467662e-08, -1.180019124949063e-07, -1.180019124959046e-07, -1.180019124949063e-07, -1.180019124959046e-07, -4.511742738360623e-07, -4.511742738752302e-07, -1.137419839597211e-08, -1.137419839198578e-08, -5.304203455715604e-05, -5.304203455717271e-05, -2.779917321998065e-05, -2.779917321998654e-05, -1.793101838950224e-04, -1.793101838950386e-04, -1.793101838950489e-04, -1.793101838950296e-04, -4.174677107080269e-06, -4.174677107074198e-06, -1.816684707737691e-06, -1.816684707869175e-06, -1.215975308040488e-04, -1.215975308040422e-04, -6.401672616925369e-10, -6.401672595656608e-10, -2.302427109303067e-04, -2.302427109303618e-04, -2.302427109302937e-04, -2.302427109303622e-04, -3.893802660023364e-06, -3.893802660022235e-06, -9.908891558493352e-07, -9.908891558468901e-07, -3.650971306102680e-05, -3.650971306102229e-05, -1.497098630963203e-06, -1.497098630970893e-06, -6.090161571978529e-04, -6.090161571978569e-04, -6.090161571978502e-04, -6.090161571978581e-04, -8.383384067980377e-06, -8.383384068333373e-06, -6.001046419252911e-06, -6.001046419036998e-06, -6.831052491088862e-06, -6.831052491186187e-06, -7.493650677343571e-06, -7.493650677070428e-06, -7.152807189943181e-06, -7.152807189781437e-06, -7.152807190176090e-06, -7.152807189959450e-06, -2.360019788066195e-06, -2.360019788000179e-06, -1.897974975420178e-06, -1.897974975513816e-06, -2.662496506521018e-06, -2.662496506506497e-06, -2.395317399970781e-06, -2.395317400161102e-06, -2.185482025240363e-06, -2.185482025319641e-06, -2.185482025076884e-06, -2.185482025093238e-06, -1.001524088729915e-07, -1.001524088710728e-07, -2.668380118361162e-06, -2.668380118383641e-06, -8.219233973491395e-06, -8.219233973576289e-06, -2.364433804443529e-06, -2.364433804483542e-06, -1.105846835715831e-08, -1.105846830162572e-08, -1.105846825489834e-08, -1.105846832794159e-08, -3.645462202062329e-06, -3.645462202111760e-06, -1.388792249604547e-06, -1.388792249619465e-06, -3.457361288294827e-05, -3.457361288294660e-05, -2.407718545597921e-05, -2.407718545595064e-05, -1.632282724319605e-04, -1.632282724319378e-04, -1.632282724318630e-04, -1.632282724318411e-04, -1.028879633435228e-05, -1.028879633435262e-05, -3.815246460656094e-09, -3.815246460514669e-09, -2.250893782811063e-05, -2.250893782809680e-05, -1.546566990462982e-05, -1.546566990454457e-05, -6.018692470333587e-04, -6.018692470333558e-04, -6.018692470333545e-04, -6.018692470333574e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
