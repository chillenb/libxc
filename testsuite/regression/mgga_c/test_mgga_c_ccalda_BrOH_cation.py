
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_ccalda_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504598874e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.645987760538142e-01, -1.645994338075875e-01, -1.645994338376562e-01, -1.107858338051932e-01, -1.107858953703292e-01, -1.107880165538277e-01, -1.107897430660373e-01, -1.107865828494445e-01, -1.107865666594656e-01, -6.701332647009471e-02, -6.698536162360412e-02, -6.632224241161556e-02, -6.653649472945748e-02, -6.628241523783371e-02, -6.563688002683274e-02, -3.777492745827601e-02, -3.806422031456862e-02, -7.062853691411924e-02, -3.292870842246134e-02, -6.343149818832171e-03, -7.145499878032616e-03, -3.757993720539827e-03, -3.912198784756782e-03, -1.467301415123428e-02, -2.355237969326837e-03, -6.842038443354337e-04, -6.842038443354328e-04, -1.224262387625096e-01, -1.224315961542850e-01, -1.224265129572441e-01, -1.224312356475950e-01, -1.224289434185696e-01, -1.224289393113849e-01, -9.471366555938793e-02, -9.491132293955538e-02, -9.456824179729605e-02, -9.474381754756526e-02, -9.489040905095401e-02, -9.488938760146313e-02, -6.380898863686880e-02, -6.578529502882967e-02, -6.176888255127957e-02, -6.263889813408363e-02, -6.385067202685422e-02, -6.367490910272469e-02, -2.698679307200425e-02, -3.791101016575390e-02, -2.567856628779372e-02, -9.418618645328876e-02, -2.933291544909106e-02, -2.933291544909106e-02, -1.867909583487804e-03, -2.308438584752102e-03, -1.810467951385501e-03, -2.030994353624461e-02, -1.808678528131394e-03, -1.808678528131393e-03, -6.392391322116166e-02, -6.378754700960620e-02, -6.383563580100113e-02, -6.387410499477622e-02, -6.385539257642651e-02, -6.385431018069404e-02, -6.327298048952804e-02, -5.971102674986092e-02, -6.077622357445384e-02, -6.179636886825787e-02, -6.128094052485777e-02, -6.127976722593043e-02, -6.692270983739020e-02, -4.238427240840482e-02, -4.605451467074115e-02, -5.192543891385921e-02, -4.894362866096569e-02, -4.894362862722563e-02, -5.781546699739908e-02, -1.432337785401933e-02, -1.759846091030372e-02, -5.111572696835854e-02, -2.334977938631266e-02, -2.334977938631266e-02, -5.037446550363285e-03, -6.962981732624794e-04, -1.374982125405463e-03, -2.268013163367492e-02, -1.557199084625575e-03, -1.850045185910846e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_ccalda_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753456868e-01, -1.747373592460346e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530872e-01, -1.747343128890325e-01, -1.747384639386486e-01, -1.747320046843354e-01, -1.747420954930400e-01, -1.747348525186126e-01, -1.747386521303000e-01, -1.202870829183073e-01, -1.202944685922588e-01, -1.202883296397281e-01, -1.202915862047950e-01, -1.202936293196764e-01, -1.202893237620366e-01, -1.202955194363820e-01, -1.202925864543587e-01, -1.198631685785606e-01, -1.197765313399990e-01, -1.203926175508297e-01, -1.201905739843529e-01, -7.534022876474469e-02, -7.481054072997749e-02, -7.561942719910790e-02, -7.447946538222196e-02, 1.184958857103155e-01, 1.124613915515910e-01, -7.493558525121609e-02, -7.421482742315921e-02, -7.037457509512336e-02, -7.906556863981587e-02, -5.357312966211222e-02, -8.856638892841452e-02, -4.807183543849444e-02, -4.040230809095352e-02, -4.759290691900278e-02, -4.142772547295833e-02, -8.492439368154782e-02, -7.350955632497809e-02, -4.031046379937953e-02, -3.667479708381637e-02, -1.180262228601058e-02, -1.388121252712495e-01, -1.235041999140980e-02, -1.362840024315696e-01, -5.437393704541226e-03, -4.328493975105773e-03, -5.849906148365489e-03, -4.372655662992115e-03, -2.050118645241273e-02, -1.604968038820421e-02, -2.953469012559885e-03, -3.142020838109378e-03, -9.344424120951320e-04, -1.191379589456462e-02, -9.344424120951312e-04, -1.191379589456463e-02, -1.320691501914817e-01, -1.322118225602897e-01, -1.320618046326665e-01, -1.321178654621566e-01, -1.320572803896430e-01, -1.321129090543720e-01, -1.320645356594224e-01, -1.321193163571969e-01, -1.320929837197594e-01, -1.321934618613033e-01, -1.320705441021936e-01, -1.322159172579818e-01, -1.038158590884168e-01, -1.038394068018156e-01, -1.039674318776792e-01, -1.040945167478668e-01, -9.504386150449103e-02, -9.459992746684538e-02, -9.482057398619455e-02, -9.435708797573941e-02, -1.033009039578776e-01, -1.047291407985574e-01, -1.029925412021966e-01, -1.050413930795079e-01, -7.128238707685476e-02, -7.214011582599324e-02, -7.369467696084508e-02, -7.362451898672906e-02, -1.472219486893594e-02, 9.479879007600024e-04, 6.714947929578888e-02, 8.772370663967785e-02, -6.377770924497687e-02, -8.146183546475363e-02, -5.654753498992440e-02, -8.340012285813157e-02, -3.275244148512996e-02, -3.064172823266054e-02, -4.459922311486527e-02, -4.362485233521191e-02, -3.445481777659459e-02, -2.751956201037455e-02, -1.029198865931171e-01, -1.029992435048771e-01, -3.953034138304639e-02, -3.083912212636421e-02, -3.953034138304639e-02, -3.083912212636420e-02, -2.622627810238238e-03, -2.251559165917252e-03, -3.123961302920403e-03, -2.854553999019723e-03, -2.624004497378651e-03, -2.130264623571962e-03, -2.489787283423343e-02, -2.425447457373111e-02, -4.696234645035331e-03, -1.726764129835097e-03, -4.696234645035332e-03, -1.726764129835096e-03, -7.025932223842403e-02, -6.972746971902227e-02, -6.809213896025405e-02, -6.757797396208412e-02, -7.198832468635556e-02, -7.148872356177734e-02, -7.240043026298554e-02, -7.116375091320226e-02, -7.200798844943501e-02, -7.151058106231505e-02, -7.238221947977207e-02, -7.114041377565181e-02, -7.167122696508577e-02, -7.062602402885945e-02, -6.784862933278867e-02, -6.694304625160449e-02, -6.919363016016526e-02, -6.784954801647260e-02, -6.011031063139318e-02, -5.982521946080935e-02, -5.493568497283582e-02, -5.464551811417170e-02, -6.961769761531010e-02, -6.848369462855761e-02, -7.517208469021472e-02, -7.478668881638997e-02, -4.957041438257023e-02, -4.832408810696116e-02, -5.408602635123405e-02, -5.172032492938631e-02, -5.988544814383794e-02, -5.842062465541437e-02, -5.592537478567260e-02, -5.601285920966340e-02, -5.592524734501330e-02, -5.601298677559301e-02, -3.935561394739436e-02, -3.750892118617796e-02, -1.773472996354030e-02, -1.753120798266075e-02, -2.395748142094622e-02, -1.923989413626193e-02, -6.027180546806705e-02, -5.640547641839024e-02, -3.365260567843108e-02, -2.325193783539127e-02, -3.365260567843092e-02, -2.325193783538883e-02, -6.593851617928387e-03, -6.257235187311730e-03, -9.190972839143315e-04, -9.069245432117077e-04, -1.869567052566781e-03, -1.724808884064575e-03, -2.767194528635372e-02, -2.688551334493897e-02, -5.381852545870161e-03, -1.085656599855414e-03, -3.531000048805462e-03, -1.997485134329454e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.879554782699823e-21, 7.759003590748886e-21, 3.879554782699823e-21, 1.103248294344151e-20, 2.206508536120583e-20, 1.103248294344151e-20, 1.348533571028331e-20, 2.697058293886517e-20, 1.348533571028331e-20, 1.357116120278448e-19, 2.714230072601041e-19, 1.357116120278448e-19, 3.798224517831172e-19, 7.596453015071300e-19, 3.798224517831172e-19, -1.880909543537450e-15, -3.761819087074901e-15, -1.880909543537450e-15, 8.710097477616840e-16, 1.742020192650114e-15, 8.710097477616840e-16, -1.653571963824813e-11, -3.307143125927626e-11, -1.653571963824813e-11, -2.885108229259807e-11, -5.770214751816510e-11, -2.885108229259807e-11, -1.341009871476463e-11, -2.682019640076216e-11, -1.341009871476463e-11, -8.895967163358045e-09, -1.779193431766957e-08, -8.895967163358045e-09, 6.577740926939394e-13, 1.315548184766832e-12, 6.577740926939394e-13, 7.837486742940204e-08, 1.567497348584663e-07, 7.837486742940204e-08, 1.180830640572495e-07, 2.361661281137567e-07, 1.180830640572495e-07, -6.208226462164723e-03, -1.241645292431284e-02, -6.208226462164723e-03, 2.356735970344136e-08, 4.713471940683432e-08, 2.356735970344136e-08, 2.119010632769575e-05, 4.238021265539153e-05, 2.119010632769575e-05, -1.398492653354217e-04, -2.796985306706038e-04, -1.398492653354217e-04, 2.286172353125788e-03, 4.572344706251634e-03, 2.286172353125788e-03, 2.914483249713319e-03, 5.828966499426385e-03, 2.914483249713319e-03, 1.546454760474763e-06, 3.092909520949758e-06, 1.546454760474763e-06, -6.297548695185347e-03, -1.259509739034255e-02, -6.297548695185347e-03, 3.604373274138019e-01, 7.208746548276038e-01, 3.604373274138019e-01, 3.604303582624927e-01, 7.208607165249852e-01, 3.604303582624927e-01, 1.217295166358154e+01, 2.434590332716369e+01, 1.217295166358154e+01, 1.425844226406874e+01, 2.851688452813768e+01, 1.425844226406874e+01, 1.400253030299410e-01, 2.800506060598672e-01, 1.400253030299410e-01, 2.598584533273496e+00, 5.197169066546715e+00, 2.598584533273496e+00, 1.200009626446064e+03, 2.400019252892127e+03, 1.200009626446064e+03, 1.200009626446065e+03, 2.400019252892129e+03, 1.200009626446065e+03, 1.692526064185656e-13, 3.385052135673199e-13, 1.692526064185656e-13, -6.052450275039212e-10, -1.210490055007842e-09, -6.052450275039212e-10, -5.966476772840215e-10, -1.193295354568043e-09, -5.966476772840215e-10, -5.784705130819869e-10, -1.156941026163974e-09, -5.784705130819869e-10, 1.762608415973553e-13, 3.525216831075850e-13, 1.762608415973553e-13, 1.761444394378822e-13, 3.522888789309834e-13, 1.761444394378822e-13, 1.468899017133499e-13, 2.937798083791892e-13, 1.468899017133499e-13, 4.292981063084382e-12, 8.585962120104363e-12, 4.292981063084382e-12, -2.376525713772024e-06, -4.753051427544047e-06, -2.376525713772024e-06, -2.500724798192546e-06, -5.001449596385093e-06, -2.500724798192546e-06, 1.117333128367831e-09, 2.234666256736359e-09, 1.117333128367831e-09, 1.117189667284822e-09, 2.234379334568016e-09, 1.117189667284822e-09, 2.270107210860478e-07, 4.540214421813098e-07, 2.270107210860478e-07, -3.575500375548529e-05, -7.151000748176766e-05, -3.575500375548529e-05, -1.467685965829238e-02, -2.935371931657910e-02, -1.467685965829238e-02, -4.112885699689707e-02, -8.225771399380942e-02, -4.112885699689707e-02, 8.658861960157254e-05, 1.731772392031514e-04, 8.658861960157254e-05, -5.901092498831131e-04, -1.180218499767054e-03, -5.901092498831131e-04, -3.203561353664503e-02, -6.407122707221369e-02, -3.203561353664503e-02, 2.372064443880685e-05, 4.744128887774169e-05, 2.372064443880685e-05, 1.529191416704682e-02, 3.058382833409140e-02, 1.529191416704682e-02, -2.317215488184992e-07, -4.634430976369983e-07, -2.317215488184992e-07, 1.337709892287372e-02, 2.675419784574744e-02, 1.337709892287372e-02, 1.337709892287431e-02, 2.675419784574981e-02, 1.337709892287431e-02, 1.958146166649779e+01, 3.916292333300137e+01, 1.958146166649779e+01, 2.040998917278947e+00, 4.081997835993660e+00, 2.040998917278947e+00, 1.488295317652778e+02, 2.976590635305557e+02, 1.488295317652778e+02, 6.122362198881453e-04, 1.224472439775494e-03, 6.122362198881453e-04, 1.563706663309222e+03, 3.127413326618445e+03, 1.563706663309222e+03, 1.563706663309219e+03, 3.127413326618439e+03, 1.563706663309219e+03, -3.974076475437430e-03, -7.948152950921083e-03, -3.974076475437430e-03, -4.290964572872841e-03, -8.581929145745681e-03, -4.290964572872841e-03, 2.917086434670913e-06, 5.834172869342709e-06, 2.917086434670913e-06, 3.442532511821232e-06, 6.885065023677865e-06, 3.442532511821232e-06, 3.157384086211572e-06, 6.314768172420589e-06, 3.157384086211572e-06, 3.150332029502428e-06, 6.300664058962903e-06, 3.150332029502428e-06, 3.370813507449907e-06, 6.741627014910666e-06, 3.370813507449907e-06, 1.095431541218632e-06, 2.190863082434636e-06, 1.095431541218632e-06, 1.367771339452601e-06, 2.735542678903533e-06, 1.367771339452601e-06, -6.552432505949346e-03, -1.310486501182899e-02, -6.552432505949346e-03, -8.191313425747559e-03, -1.638262685149512e-02, -8.191313425747559e-03, 1.088441638602262e-06, 2.176883277213569e-06, 1.088441638602262e-06, 7.346154767984356e-08, 1.469230953570112e-07, 7.346154767984356e-08, 1.696316186339981e-05, 3.392632372672472e-05, 1.696316186339981e-05, 3.212941252529819e-05, 6.425882505069769e-05, 3.212941252529819e-05, 5.311083828291392e-06, 1.062216765656919e-05, 5.311083828291392e-06, 3.092615015702976e-08, 6.185230033427826e-08, 3.092615015702976e-08, 3.092609986118753e-08, 6.185219969226229e-08, 3.092609986118753e-08, -1.408699761288439e-02, -2.817399522576878e-02, -1.408699761288439e-02, 2.458455215197952e-03, 4.916910430395950e-03, 2.458455215197952e-03, 2.009063199490966e-02, 4.018126398982640e-02, 2.009063199490966e-02, 6.263834462533320e-05, 1.252766892506980e-04, 6.263834462533320e-05, 3.542324567781498e-03, 7.084649135525619e-03, 3.542324567781498e-03, 3.542324568159828e-03, 7.084649135723880e-03, 3.542324568159828e-03, 1.379166637867547e+00, 2.758333275735064e+00, 1.379166637867547e+00, -7.368649881640130e-01, -1.473728952949875e+00, -7.368649881640130e-01, 2.166918142636061e+02, 4.333836285272208e+02, 2.166918142636061e+02, 3.402503077256093e-03, 6.805006154512226e-03, 3.402503077256093e-03, 1.836228591087298e+03, 3.672457182174580e+03, 1.836228591087298e+03, 1.836229378951222e+03, 3.672458757902441e+03, 1.836229378951222e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.254217212083492e-21, -5.728194877151193e-20, -2.091723184734428e-20, 2.998253182242186e-20, -1.703603396748199e-20, -1.254097701733891e-20, -5.245051580753873e-15, -5.245021647634656e-15, -2.935812637130061e-14, -2.935805739163334e-14, 2.909084724485091e-10, 2.909087759612763e-10, -2.906219420280725e-13, -2.906218549231136e-13, 1.103702551515245e-08, 1.103702888420611e-08, 1.926141061002670e-08, 1.926140776707538e-08, 8.954403579168039e-09, 8.954403052439287e-09, 5.938191421054930e-06, 5.938191418739022e-06, -2.186792838135369e-10, -2.186792847213398e-10, -3.227876005605170e-18, 1.572393378331833e-18, -1.413233652467921e-07, -1.413233652475998e-07, 2.733693724620679e-02, 2.733693724620486e-02, -5.329339896111624e-08, -5.329339895315927e-08, -1.214508385908118e-18, -1.017625032119799e-18, 6.277641631964960e-04, 6.277641631954910e-04, -1.007291120428621e-04, -1.007291120428563e-04, -6.788740274157640e-05, -6.788740274156613e-05, -5.676003232553196e-06, -5.676003232553873e-06, 2.272177196092744e-04, 2.272177196178182e-04, -2.645996439046855e-02, -2.645996439046852e-02, -2.546593636020001e-02, -2.546593636020003e-02, -2.134344688032243e-05, -2.134344688032170e-05, -3.506784483668087e-05, -3.506784483667780e-05, -5.513678738926443e-05, -5.513678738927002e-05, -8.711764195297402e-07, -8.711764195289683e-07, -2.422720223555725e-03, -2.422720223555727e-03, -2.422720223555727e-03, -2.422720223555726e-03, -1.894637376886177e-10, -1.894637372139009e-10, 1.356586181074610e-06, 1.356586177226375e-06, 1.336616613307530e-06, 1.336616613267526e-06, 1.296526079083477e-06, 1.296526075155491e-06, -9.860953861373591e-11, -9.860953874055539e-11, -1.974158654202916e-10, -1.974158648448304e-10, -8.736532101508829e-12, -8.736532021241583e-12, -2.609280528229923e-10, -2.609280513254289e-10, 2.782598251260861e-04, 2.782598251146692e-04, 2.984991207862424e-04, 2.984991207830348e-04, -3.410757845830942e-08, -3.410757845876019e-08, -6.776469490384075e-08, -6.776469490437640e-08, -3.712843225899004e-07, -3.712843226260968e-07, 1.469511845228348e-04, 1.469511844767093e-04, 3.727422200608899e-02, 3.727422200608001e-02, 1.173298453432720e-01, 1.173298453432925e-01, -1.651617122605429e-04, -1.651617122605720e-04, 1.983458236326434e-03, 1.983458236322636e-03, 3.868084916597532e-04, 3.868084916612856e-04, -9.994951667152286e-07, -9.994951667338799e-07, -7.344659549712770e-05, -7.344659549710852e-05, 2.601575646224696e-05, 2.601575645592764e-05, -1.304014195457531e-04, -1.304014195457443e-04, -1.304014195457518e-04, -1.304014195457658e-04, -3.436629871694543e-06, -3.436629871693801e-06, -1.279196091348459e-06, -1.279196092085569e-06, -2.093799341829342e-05, -2.093799341829437e-05, -9.014730422526353e-07, -9.014730422641022e-07, -4.138271060135541e-04, -4.138271060135564e-04, -4.138271060135542e-04, -4.138271060135584e-04, 1.292621479570112e-02, 1.292621479565595e-02, 1.371812955253080e-02, 1.371812955252986e-02, 5.282678937610631e-17, 1.713903963596280e-17, -5.576351028369031e-06, -5.576351028264220e-06, 1.919085027006280e-17, 8.683956576578584e-18, -5.089752997867900e-06, -5.089752997879834e-06, -5.038183983260558e-06, -5.038183983253544e-06, -5.134201660218656e-07, -5.134201660184430e-07, -1.474941203846493e-06, -1.474941203850412e-06, 1.625248302761291e-02, 1.625248302761450e-02, 1.901530144761027e-02, 1.901530144747574e-02, -1.251742455468108e-06, -1.251742455469208e-06, -8.920135312829376e-08, -8.920135312145309e-08, -1.416925775523555e-06, -1.416925775511766e-06, -4.755282542076427e-06, -4.755282542114433e-06, -1.807185888095035e-06, -1.807185888064696e-06, -6.780787357446505e-09, -6.780787344408370e-09, -6.814152789585033e-09, -6.814152822781441e-09, 2.082721789470631e-02, 2.082721789466114e-02, 4.356866226385002e-18, 2.443041931592512e-18, -3.048101822108384e-05, -3.048101822190427e-05, -1.868389326503713e-05, -1.868389326499267e-05, -2.161221006384379e-05, -2.161221006425925e-05, -2.161221006444760e-05, -2.161221006724923e-05, 6.757732902672232e-19, 4.654255060352943e-19, 8.809938661949691e-09, 8.809928867716704e-09, 9.733872582573120e-19, 8.526160303704770e-19, 1.019232996708374e-19, 8.235238540556694e-19, -8.120783757625996e-04, -8.120783757625894e-04, -1.382396746784585e-04, -1.382396746784590e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
