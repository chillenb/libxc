
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.265783760731466e-02, -9.265535162711314e-02, -9.264532920446070e-02, -4.885053033569538e-02, -3.663570977167352e-02, -2.649775655996872e-02, -4.403423351099692e-02, -2.343143706320580e-02, -2.345083350707425e-02, -2.344306414232942e-02, -2.344382616531898e-02, -4.412377642862799e-02, -8.150672154285826e-02, -4.648388316511290e-02, -1.848498214585789e-02, -3.568304910739727e-02, -8.200744517534726e-02, -1.857802804010835e-02, -2.374508841975933e-02, -3.035176291055570e-02, -3.277700284251039e-02, -1.053104122034574e-02, -7.532764729458248e-03, -7.601705630883871e-03, -4.439355844470476e-04, -4.560197169791707e-04, -3.751829646608763e-03, -2.010419444067574e-04, -1.591643119462555e-04, -1.591643119462555e-04, -3.331704218098875e-02, -2.639582446954085e-02, -2.638796376854126e-02, -2.639532136557082e-02, -4.037576613140537e-02, -3.328695909481336e-02, -4.379167189573379e-02, -4.365832286274781e-02, -2.222352009127908e-02, -2.234323884415041e-02, -6.137327019957989e-02, -4.366517163380185e-02, -3.243293244756783e-02, -2.307884625367541e-02, -2.100536117078330e-02, -2.183669401880834e-02, -2.995783446300444e-02, -2.208801114970247e-02, -7.534670145198034e-03, -2.209564642399187e-02, -1.163179830531476e-02, -2.439950346187917e-02, -1.562507424646197e-02, -1.562507424646197e-02, -1.285969568272423e-04, -1.611528297118461e-04, -1.696342112900312e-04, -7.793371025882666e-03, -1.728210310423103e-04, -1.728210310423103e-04, -2.382822502635247e-02, -2.356638457348856e-02, -2.816466677121089e-02, -2.505653312081449e-02, -2.772610642893945e-02, -2.520727746291838e-02, -2.474450977403529e-02, -4.518394652092772e-02, -3.085006995437774e-02, -2.264911859646276e-02, -2.225631465680226e-02, -2.952589075822297e-02, -3.718266749216392e-02, -2.595073278915517e-02, -2.931141759284363e-02, -3.377880117945475e-02, -3.311751710701141e-02, -3.304765022696911e-02, -2.034131165584279e-02, -1.315189024327166e-02, -3.915026886009408e-03, -3.211985056720754e-02, -6.554451181684655e-03, -6.554451181684655e-03, -3.186340154019141e-03, -2.472838391467173e-05, -8.156004217362716e-04, -2.689521831031307e-02, -1.370612724822262e-04, -2.136287911019222e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.834476050050537e-02, 3.834416897733246e-02, 3.834315278910525e-02, 3.834215535454339e-02, 3.833481106303747e-02, 3.833591367839094e-02, -3.522316408990889e-02, -3.522477907596098e-02, -4.288189891551264e-02, -4.288367396693039e-02, -3.041900109901435e-02, -3.042006514542017e-02, -6.595809720114139e-02, -6.596046949009035e-02, -3.114751900506614e-02, -3.114866920785032e-02, -3.114189869881604e-02, -3.114037760652227e-02, -3.114455945547104e-02, -3.114352286404823e-02, -3.115745577199149e-02, -3.112982351248351e-02, -6.589134901740934e-02, -6.582610843882833e-02, -6.663803571628943e-02, -6.582784225511015e-02, -7.448076572357695e-02, -7.383595454647199e-02, -2.801357607432962e-02, -2.841619154399010e-02, -6.861691631558278e-02, -6.843695843436208e-02, -6.351603161242962e-02, -7.660088123994567e-02, -2.642936802183542e-02, -3.027410469829239e-02, -4.419558947338499e-02, -4.179431211113337e-02, -5.108482471925775e-02, -4.756518748961718e-02, -6.363680036138784e-02, -6.072409465984518e-02, -2.066562766353720e-02, -2.021074117231002e-02, -9.696979820053884e-03, -3.457998495899384e-02, -9.755415822091712e-03, -3.486615365494525e-02, -9.147178072075390e-04, -8.295013560515519e-04, -9.458381345612942e-04, -8.465512611985852e-04, -7.919372576979368e-03, -7.257257528847388e-03, -3.908195873839793e-04, -4.014656349950272e-04, -2.483205942578745e-04, -6.611385696935837e-04, -2.483205942578745e-04, -6.611385696935837e-04, -3.621895808378753e-02, -3.624811664305758e-02, -2.930620689303646e-02, -2.932665597523598e-02, -2.931584138087358e-02, -2.933612959326325e-02, -2.930704761741185e-02, -2.932703620212137e-02, -2.895393604429888e-02, -2.899369828790971e-02, -3.618559497391113e-02, -3.621524396783962e-02, -7.028352156601177e-02, -7.029161247695567e-02, -6.879724196664297e-02, -6.884158860302592e-02, -3.075679347179231e-02, -3.063579369466228e-02, -3.074922490048015e-02, -3.062249779979843e-02, -9.746735952908728e-02, -9.822114757277399e-02, -6.854428019341752e-02, -6.925871704083031e-02, -3.892915049247429e-02, -3.926591306141931e-02, -2.692528114538685e-02, -2.689227803698028e-02, -2.894055897143599e-02, -2.654851913909046e-02, -2.853827745468884e-02, -2.628740261522576e-02, -3.566002817858652e-02, -4.143878584539141e-02, -2.570494397015656e-02, -2.927039601905149e-02, -1.372233990223981e-02, -1.349701487239591e-02, -4.136986187486645e-02, -4.108425868806544e-02, -2.307822579424461e-02, -2.156507198403561e-02, -2.958438098441741e-02, -2.961892604263197e-02, -3.096639310773949e-02, -2.870363919511202e-02, -3.096639310773950e-02, -2.870363919511202e-02, -2.622117837046907e-04, -2.465965938225335e-04, -3.213450477288527e-04, -3.137165142708865e-04, -3.518677673471448e-04, -3.211265127092811e-04, -1.464091332694315e-02, -1.452479467015387e-02, -4.760491037800929e-04, -2.886310962360726e-04, -4.760491037800929e-04, -2.886310962360722e-04, -2.561425597725994e-02, -2.532459757857090e-02, -2.595289996375780e-02, -2.566354319095629e-02, -2.162129616192693e-02, -2.123908047314139e-02, -2.598021294594697e-02, -2.566135158016975e-02, -2.198797150093734e-02, -2.161664789844761e-02, -2.615543106212528e-02, -2.583213295389548e-02, -2.563130323001580e-02, -2.536362260505466e-02, -3.849208662916431e-02, -3.773488832628027e-02, -3.529244043188268e-02, -3.476802413355762e-02, -2.654305399003785e-02, -2.629256849051961e-02, -2.682401850401018e-02, -2.656401450670063e-02, -3.271763189053120e-02, -3.230999639804299e-02, -2.526122395477274e-02, -2.501493832944465e-02, -4.681407435860904e-02, -4.639762876569040e-02, -5.420550042262039e-02, -5.351254333442938e-02, -5.049450287720260e-02, -4.982784141639614e-02, -5.532857920494825e-02, -5.536270557205002e-02, -5.520789682572827e-02, -5.524208958646562e-02, -2.743413030997277e-02, -2.699430318141775e-02, -1.627498524924681e-02, -1.597476448177026e-02, -7.501725303801983e-03, -7.095201940041344e-03, -4.267950667734137e-02, -4.082360447042962e-02, -1.254949080016182e-02, -1.142348796162094e-02, -1.254949080016183e-02, -1.142348796162094e-02, -4.278475491912932e-03, -3.920131777555927e-03, -4.926455356575017e-05, -4.908668528277571e-05, -1.160882690445265e-03, -1.001974349166347e-03, -3.261690012085131e-02, -3.165025946630935e-02, -3.624029014508483e-04, -2.313125847391024e-04, -5.649858183363005e-04, -3.606635802661816e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.373658067704871e-09, 8.747316135409741e-09, 4.373658067704871e-09, 4.373456220947016e-09, 8.746912441894030e-09, 4.373456220947016e-09, 4.372604672643972e-09, 8.745209345287944e-09, 4.372604672643972e-09, 4.437483539412602e-10, 8.874967078825203e-10, 4.437483539412602e-10, 2.162686874263741e-10, 4.325373748527482e-10, 2.162686874263741e-10, 9.099208633426601e-12, 1.819841726685320e-11, 9.099208633426601e-12, 1.258382906422703e-06, 2.516765812845405e-06, 1.258382906422703e-06, 5.266096183332050e-08, 1.053219236666410e-07, 5.266096183332050e-08, 5.281763750372293e-08, 1.056352750074459e-07, 5.281763750372293e-08, 5.273064456284665e-08, 1.054612891256933e-07, 5.273064456284665e-08, 5.276719643904277e-08, 1.055343928780855e-07, 5.276719643904277e-08, 1.266967144224838e-06, 2.533934288449676e-06, 1.266967144224838e-06, 1.109108326425936e-02, 2.218216652851873e-02, 1.109108326425936e-02, 2.140793077626308e-03, 4.281586155252615e-03, 2.140793077626308e-03, 1.116215857552307e-04, 2.232431715104615e-04, 1.116215857552307e-04, 7.790895790054009e-04, 1.558179158010802e-03, 7.790895790054009e-04, 1.224920211674205e-02, 2.449840423348411e-02, 1.224920211674205e-02, 1.119124338613956e-04, 2.238248677227912e-04, 1.119124338613956e-04, 2.975985414062258e-01, 5.951970828124515e-01, 2.975985414062258e-01, 5.799906428271953e-01, 1.159981285654391e+00, 5.799906428271953e-01, 2.833044786975284e-04, 5.666089573950569e-04, 2.833044786975284e-04, 1.341369442114318e-01, 2.682738884228636e-01, 1.341369442114318e-01, 3.034505987202775e-02, 6.069011974405549e-02, 3.034505987202775e-02, 3.160970799807535e-02, 6.321941599615072e-02, 3.160970799807535e-02, 8.658492272970844e+01, 1.731698454594169e+02, 8.658492272970844e+01, 6.475198723937861e+01, 1.295039744787572e+02, 6.475198723937861e+01, 3.723439520772739e+00, 7.446879041545478e+00, 3.723439520772739e+00, 1.749980357681624e+02, 3.499960715363248e+02, 1.749980357681624e+02, 2.716126981948910e+01, 5.432253963897820e+01, 2.716126981948910e+01, 2.716126981948910e+01, 5.432253963897820e+01, 2.716126981948910e+01, 2.322195354536258e-07, 4.644390709072517e-07, 2.322195354536258e-07, 1.096468133779079e-08, 2.192936267558157e-08, 1.096468133779079e-08, 1.096140732890102e-08, 2.192281465780204e-08, 1.096140732890102e-08, 1.096453916241936e-08, 2.192907832483873e-08, 1.096453916241936e-08, 4.009803330576380e-07, 8.019606661152759e-07, 4.009803330576380e-07, 2.319292377627248e-07, 4.638584755254496e-07, 2.319292377627248e-07, 1.663922080403464e-05, 3.327844160806927e-05, 1.663922080403464e-05, 1.697863489611753e-05, 3.395726979223507e-05, 1.697863489611753e-05, 8.180980000069818e-07, 1.636196000013964e-06, 8.180980000069818e-07, 8.091696882364012e-07, 1.618339376472802e-06, 8.091696882364012e-07, 2.353185594738999e-05, 4.706371189477999e-05, 2.353185594738999e-05, 1.698339197103430e-05, 3.396678394206860e-05, 1.698339197103430e-05, 7.680609115882029e-03, 1.536121823176406e-02, 7.680609115882029e-03, 3.152910571005032e-04, 6.305821142010072e-04, 3.152910571005032e-04, 5.077839324964318e-04, 1.015567864992864e-03, 5.077839324964318e-04, 4.820511897270236e-04, 9.641023794540473e-04, 4.820511897270236e-04, 6.408866809985709e-03, 1.281773361997142e-02, 6.408866809985709e-03, 3.794293474270003e-04, 7.588586948540007e-04, 3.794293474270003e-04, 1.460500862916788e-01, 2.921001725833575e-01, 1.460500862916788e-01, 1.877014492516449e-01, 3.754028985032897e-01, 1.877014492516449e-01, 7.521329481822191e-01, 1.504265896364438e+00, 7.521329481822191e-01, 1.283205064916537e-06, 2.566410129833074e-06, 1.283205064916537e-06, 6.656499719976943e-01, 1.331299943995389e+00, 6.656499719976943e-01, 6.656499719976946e-01, 1.331299943995389e+00, 6.656499719976946e-01, 1.776907640435315e+02, 3.553815280870631e+02, 1.776907640435315e+02, 7.051336168508394e+01, 1.410267233701678e+02, 7.051336168508394e+01, 9.401321307429325e+02, 1.880264261485865e+03, 9.401321307429325e+02, 1.502954012460544e+00, 3.005908024921088e+00, 1.502954012460544e+00, 3.155664323954116e+02, 6.311328647908232e+02, 3.155664323954116e+02, 3.155664323954111e+02, 6.311328647908222e+02, 3.155664323954111e+02, 5.426362832581399e-04, 1.085272566516280e-03, 5.426362832581399e-04, 5.350586195950888e-04, 1.070117239190175e-03, 5.350586195950888e-04, 8.680863778152359e-03, 1.736172755630472e-02, 8.680863778152359e-03, 6.419398126080026e-03, 1.283879625216005e-02, 6.419398126080026e-03, 8.377372287365483e-03, 1.675474457473097e-02, 8.377372287365483e-03, 6.473170837366117e-03, 1.294634167473223e-02, 6.473170837366117e-03, 7.111655528747412e-03, 1.422331105749483e-02, 7.111655528747412e-03, 2.390696808463760e-02, 4.781393616927519e-02, 2.390696808463760e-02, 1.425399284861887e-02, 2.850798569723774e-02, 1.425399284861887e-02, 7.146843105897372e-04, 1.429368621179474e-03, 7.146843105897372e-04, 7.487685721852061e-04, 1.497537144370414e-03, 7.487685721852061e-04, 1.259379527034225e-02, 2.518759054068451e-02, 1.259379527034225e-02, 6.259800916930651e-03, 1.251960183386130e-02, 6.259800916930651e-03, 1.159840076427613e-01, 2.319680152855227e-01, 1.159840076427613e-01, 4.985668731380303e-02, 9.971337462760606e-02, 4.985668731380303e-02, 5.870167847601513e-02, 1.174033569520303e-01, 5.870167847601513e-02, 6.389377417479418e-02, 1.277875483495884e-01, 6.389377417479418e-02, 6.418657303987273e-02, 1.283731460797455e-01, 6.418657303987273e-02, 1.159025801126154e-03, 2.318051602252309e-03, 1.159025801126154e-03, 7.848540298404814e+02, 1.569708059680963e+03, 7.848540298404814e+02, 6.217481010243131e-01, 1.243496202048626e+00, 6.217481010243131e-01, 9.162083375770291e-02, 1.832416675154058e-01, 9.162083375770291e-02, 3.393139390961235e-01, 6.786278781922469e-01, 3.393139390961235e-01, 3.393139390961235e-01, 6.786278781922470e-01, 3.393139390961235e-01, 8.076753856922682e+04, 1.615350771384536e+05, 8.076753856922682e+04, 6.261202351678347e+02, 1.252240470335669e+03, 6.261202351678347e+02, 3.475868109635763e+07, 6.951736219271526e+07, 3.475868109635763e+07, 8.211025984256921e+01, 1.642205196851384e+02, 8.211025984256921e+01, 1.787030850387349e+02, 3.574061700774698e+02, 1.787030850387349e+02, 1.636628803652134e+03, 3.273257607304268e+03, 1.636628803652134e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.964920478561979e-05, -7.964920478561970e-05, -7.964860121500022e-05, -7.964860121500025e-05, -7.964587894382221e-05, -7.964587894382217e-05, -3.562180932316613e-05, -3.562180932316612e-05, -2.317762448059265e-05, -2.317762448059265e-05, 0.000000000000000e+00, 0.000000000000000e+00, -5.117732494951075e-04, -5.117732494951074e-04, -1.400724807609375e-17, -1.400724807609374e-17, -2.865770548185050e-16, -2.865770548185051e-16, 0.000000000000000e+00, 0.000000000000000e+00, -7.078677410173147e-12, -7.078677410173148e-12, -5.146343876076630e-04, -5.146343876076634e-04, -2.459909943085065e-03, -2.459909943085065e-03, -1.732130546078677e-03, -1.732130546078520e-03, 0.000000000000000e+00, 0.000000000000000e+00, 2.346936707088815e-05, 2.346936707088815e-05, -2.091870347064947e-03, -2.091870347064948e-03, 0.000000000000000e+00, 0.000000000000000e+00, -5.809460776697529e-03, -5.809460776697529e-03, -7.626981763674021e-03, -7.626981763674026e-03, -5.198682790764602e-04, -5.198682790764602e-04, -2.226992665733440e-03, -2.226992665733442e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.092106067818331e-09, -4.092106067818334e-09, -3.961448521134257e-09, -3.961448521134259e-09, -8.916353029394562e-04, -8.916353029394562e-04, -2.144637014017402e-11, -2.144637014017402e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.803598577123817e-04, -3.803598577123817e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.362091795615635e-04, -5.362091795615634e-04, -3.802367303031693e-04, -3.802367303031691e-04, -1.092094975117069e-03, -1.092094975117071e-03, -1.172880174477619e-03, -1.172880174477618e-03, -3.514981130483805e-10, -3.514981130483805e-10, -3.576286271013515e-10, -3.576286271013515e-10, -4.690629988787174e-04, -4.690629988787052e-04, -1.169015794398547e-03, -1.169015794398546e-03, -1.806117272317969e-02, -1.806117272317969e-02, -9.526141084254160e-10, -9.526141084254168e-10, -5.187967342310885e-06, -5.187967342310886e-06, 0.000000000000000e+00, 0.000000000000000e+00, -1.643943488284555e-02, -1.643943488284555e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.245176223148527e-03, -3.245176223148531e-03, -1.011430810272823e-03, -1.011430810272823e-03, 0.000000000000000e+00, 0.000000000000000e+00, -1.977757244209336e-03, -1.977757244209337e-03, -1.977757244209338e-03, -1.977757244209339e-03, -1.504464066676287e-12, -1.504464066676287e-12, 0.000000000000000e+00, 0.000000000000000e+00, -1.941334942544421e-13, -1.941334942544420e-13, -2.695952449201540e-08, -2.695952449201540e-08, -1.863401149533861e-12, -1.863401149533861e-12, -1.863401149533831e-12, -1.863401149533831e-12, -2.704765168041645e-10, -2.704765168041645e-10, -3.799849924598065e-11, -3.799849924598065e-11, -2.180334439964149e-02, -2.180334439964151e-02, -1.790282204273776e-02, -1.790282204273777e-02, -2.136153166411918e-02, -2.136153166411917e-02, -1.788441236811469e-02, -1.788441236811468e-02, -1.855202457457334e-02, -1.855202457457335e-02, -2.346209234746997e-02, -2.346209234746996e-02, -2.315275081942152e-02, -2.315275081942153e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.227098124073007e-02, -2.227098124073007e-02, -1.984746602457804e-02, -1.984746602457805e-02, -5.735459936577484e-03, -5.735459936577481e-03, 1.243188951052289e-04, 1.243188951052289e-04, -2.382292919129140e-02, -2.382292919129145e-02, -1.091166581318046e-02, -1.091166581318048e-02, -1.114971237430125e-02, -1.114971237430132e-02, -1.624619427655049e-07, -1.624619427655050e-07, -4.273048823904403e-03, -4.273048823904411e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.778078778146777e-02, -3.778078778146777e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.676642413012734e-06, -5.676642413012735e-06, 0.000000000000000e+00, 0.000000000000000e+00, -6.655166646966209e-13, -6.655166646966208e-13, -3.074991104789730e-03, -3.074991104789728e-03, 0.000000000000000e+00, 0.000000000000000e+00, -2.601783164006079e-12, -2.601783164006080e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
