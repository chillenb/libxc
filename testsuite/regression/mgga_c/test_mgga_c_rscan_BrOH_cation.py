
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.694963022864395e-02, -2.694964117736109e-02, -2.694925322030792e-02, -2.694907586684875e-02, -2.694923125566541e-02, -2.694923125566541e-02, -4.825343708753346e-02, -4.824961056682654e-02, -4.812673195708371e-02, -4.797268220177271e-02, -4.807462855054762e-02, -4.807462855054762e-02, -4.140979469955000e-02, -4.125420505570601e-02, -3.753693011672655e-02, -3.747710257125621e-02, -3.746814028548235e-02, -3.746814028548235e-02, -1.535636661369368e-02, -1.590612648089126e-02, -4.874444177840058e-02, -1.487813911166932e-02, -1.203834639047680e-02, -1.203834639047680e-02, -3.744560380263513e-04, -4.036398988985512e-04, -3.131681875663389e-03, -1.739381431197570e-04, -1.798616966320934e-04, -1.798616966320934e-04, -2.639433772082962e-02, -2.640259422080997e-02, -2.639466417882524e-02, -2.640195478649438e-02, -2.639855241041777e-02, -2.639855241041777e-02, -2.534311319208039e-02, -2.492945906375812e-02, -2.474813375452179e-02, -2.438170622092105e-02, -2.539307435370891e-02, -2.539307435370891e-02, -2.902695453538851e-02, -3.276967004793250e-02, -3.536237813276633e-02, -4.366932654808218e-02, -2.866501482749893e-02, -2.866501482749891e-02, -1.018047442510323e-02, -1.490034649899028e-02, -9.527190427466390e-03, -5.526746950036765e-02, -1.213497218322095e-02, -1.213497218322095e-02, -1.246357320080510e-04, -1.719742984168696e-04, -1.475725325584506e-04, -5.928125189402663e-03, -1.568652503977003e-04, -1.568652503977005e-04, -2.451885787314334e-02, -2.416512464041213e-02, -2.428643368193886e-02, -2.438945525381143e-02, -2.433815534654536e-02, -2.433815534654536e-02, -2.566284065653750e-02, -2.160698128686386e-02, -2.271309254830187e-02, -2.386087797202820e-02, -2.334747545511807e-02, -2.334747545511807e-02, -3.613942601526409e-02, -1.579781818396522e-02, -1.914877172373217e-02, -2.766698413193926e-02, -2.220958405408828e-02, -2.220958405408827e-02, -2.488262793490785e-02, -2.927295089326821e-03, -4.273169914889153e-03, -2.709688193021922e-02, -8.041865217910784e-03, -8.041865217910791e-03, -5.794796485224966e-04, -3.137649858652956e-05, -8.381853861947509e-05, -6.940716438118015e-03, -1.477467722489435e-04, -1.477467722489427e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.057693368213159e-02, -4.057704527173866e-02, -4.057641998893507e-02, -4.057660815799682e-02, -4.057195315643648e-02, -4.057174512821897e-02, -4.057846390173182e-02, -4.057912397689076e-02, -4.057496910338121e-02, -4.057607354649612e-02, -4.057496910338121e-02, -4.057607354649612e-02, -6.885764087260701e-02, -6.886019948767871e-02, -6.884345983438381e-02, -6.884638161875446e-02, -6.846289959795709e-02, -6.845903643080482e-02, -6.845939179390254e-02, -6.845676735865798e-02, -6.855902004239547e-02, -6.848894224222155e-02, -6.855902004239547e-02, -6.848894224222155e-02, -7.461113811457896e-02, -7.419573562095377e-02, -7.436760293784332e-02, -7.385775718266414e-02, -6.757751818449383e-02, -6.827167033376616e-02, -7.049372058205661e-02, -7.029638091876753e-02, -6.697235649094811e-02, -7.308478816406795e-02, -6.697235649094811e-02, -7.308478816406795e-02, -4.696566315354073e-02, -4.502872257920407e-02, -4.808449313982429e-02, -4.577546687395963e-02, -8.977991011042605e-02, -8.570345123662228e-02, -2.932317296564775e-02, -2.880421544036728e-02, -2.991086253283627e-02, -5.845229377261218e-02, -2.991086253283627e-02, -5.845229377261218e-02, -7.712961855479251e-04, -6.994169731907668e-04, -8.369803261329284e-04, -7.490979960401948e-04, -6.677692322072023e-03, -6.136052938599081e-03, -3.380717188781520e-04, -3.472825017263679e-04, -2.806785894459911e-04, -7.471785262450218e-04, -2.806785894459911e-04, -7.471785262450218e-04, -2.942824000778711e-02, -2.944816288250050e-02, -2.941445207649248e-02, -2.943490692458525e-02, -2.942272472620851e-02, -2.944301859275674e-02, -2.941121431875405e-02, -2.943120840832076e-02, -2.942362579005305e-02, -2.944391705203189e-02, -2.942362579005305e-02, -2.944391705203189e-02, -5.527557016667239e-02, -5.527989262775835e-02, -5.356660597078049e-02, -5.358922663391752e-02, -5.466711273155205e-02, -5.452442108165281e-02, -5.306864659158647e-02, -5.292377959397883e-02, -5.442947677340752e-02, -5.480509289480943e-02, -5.442947677340752e-02, -5.480509289480943e-02, -4.049947777441671e-02, -4.078601944921958e-02, -2.679340514786821e-02, -2.673613211564645e-02, -4.854558986834175e-02, -4.349293562291567e-02, -3.269805745944468e-02, -2.682461836075785e-02, -3.642346820060165e-02, -4.182652317107980e-02, -3.642346820060163e-02, -4.182652317107977e-02, -1.907505978260815e-02, -1.883851372211207e-02, -5.552229923963665e-02, -5.527336175998800e-02, -1.875567609415168e-02, -1.752037519584063e-02, -2.996517253271856e-02, -3.007505820907022e-02, -3.470177356373018e-02, -3.261966541697588e-02, -3.470177356373018e-02, -3.261966541697595e-02, -2.541280916524749e-04, -2.389939028952169e-04, -3.429487488525151e-04, -3.348079566882800e-04, -3.060759630172252e-04, -2.793327443831021e-04, -1.540438135598713e-02, -1.528601490502842e-02, -4.320673991968880e-04, -2.619528450122855e-04, -4.320673991968882e-04, -2.619528450122852e-04, -2.583552011544123e-02, -2.552793519319387e-02, -2.839593159376683e-02, -2.809079020840846e-02, -2.756483668435143e-02, -2.725791878667882e-02, -2.682172698385095e-02, -2.651601248641601e-02, -2.719977206979060e-02, -2.689347765361792e-02, -2.719977206979060e-02, -2.689347765361792e-02, -2.425329016978521e-02, -2.397098286911650e-02, -3.982583993576238e-02, -3.952523994346889e-02, -3.717060524250477e-02, -3.684422101862732e-02, -3.333243651389718e-02, -3.305793740971309e-02, -3.545700415669224e-02, -3.517431489141434e-02, -3.545700415669224e-02, -3.517431489141433e-02, -2.678691109132818e-02, -2.654984028217933e-02, -4.958714979054289e-02, -4.928885727237403e-02, -5.233185615799427e-02, -5.167699132883979e-02, -4.901260051929472e-02, -4.844029380254044e-02, -5.025445699133607e-02, -5.028229037591996e-02, -5.025445699133606e-02, -5.028229037591998e-02, -4.594673470411311e-02, -4.534058388927290e-02, -5.940618668150012e-03, -5.877492226991674e-03, -1.000079063736986e-02, -9.550473574137906e-03, -4.337933140989899e-02, -4.185323082405578e-02, -2.403360431813232e-02, -2.261705635060706e-02, -2.403360431813230e-02, -2.261705635060704e-02, -1.160456480013022e-03, -1.095365819496222e-03, -6.251222377097437e-05, -6.228653640100313e-05, -1.749173699147644e-04, -1.585864993292229e-04, -2.008796673896270e-02, -1.972319193376296e-02, -3.906771935150989e-04, -2.493668815882544e-04, -3.906771935150971e-04, -2.493668815882537e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.192483444877115e-11, 1.638496688975423e-10, 8.192483444877115e-11, 8.192292132877152e-11, 1.638458426575431e-10, 8.192292132877152e-11, 8.189114893312436e-11, 1.637822978662487e-10, 8.189114893312436e-11, 8.191877843413076e-11, 1.638375568682615e-10, 8.191877843413076e-11, 8.190763583863155e-11, 1.638152716772631e-10, 8.190763583863155e-11, 8.190763583863155e-11, 1.638152716772631e-10, 8.190763583863155e-11, 1.380612703853600e-06, 2.761225407707201e-06, 1.380612703853600e-06, 1.380921029207695e-06, 2.761842058415391e-06, 1.380921029207695e-06, 1.388216406320400e-06, 2.776432812640799e-06, 1.388216406320400e-06, 1.378617211621853e-06, 2.757234423243705e-06, 1.378617211621853e-06, 1.382889666343544e-06, 2.765779332687088e-06, 1.382889666343544e-06, 1.382889666343544e-06, 2.765779332687088e-06, 1.382889666343544e-06, 1.355768577466554e-03, 2.711537154933108e-03, 1.355768577466554e-03, 1.350216065723574e-03, 2.700432131447148e-03, 1.350216065723574e-03, 1.192038288630634e-03, 2.384076577261269e-03, 1.192038288630634e-03, 1.007273117267320e-03, 2.014546234534640e-03, 1.007273117267320e-03, 1.059006032939988e-03, 2.118012065879976e-03, 1.059006032939988e-03, 1.059006032939988e-03, 2.118012065879976e-03, 1.059006032939988e-03, 5.177258008431966e-01, 1.035451601686393e+00, 5.177258008431966e-01, 5.289874784604673e-01, 1.057974956920935e+00, 5.289874784604673e-01, 8.537743837083836e-04, 1.707548767416767e-03, 8.537743837083836e-04, 2.182533311318812e-01, 4.365066622637624e-01, 2.182533311318812e-01, 5.618079685044925e-01, 1.123615937008985e+00, 5.618079685044925e-01, 5.618079685044927e-01, 1.123615937008985e+00, 5.618079685044927e-01, 3.710454797005258e+01, 7.420909594010516e+01, 3.710454797005258e+01, 3.527735653598430e+01, 7.055471307196859e+01, 3.527735653598430e+01, 2.112520124198295e+00, 4.225040248396589e+00, 2.112520124198295e+00, 8.495537199263745e+01, 1.699107439852749e+02, 8.495537199263745e+01, 4.997692425052701e+01, 9.995384850105403e+01, 4.997692425052701e+01, 4.997692425052710e+01, 9.995384850105420e+01, 4.997692425052710e+01, 1.227364418462339e-08, 2.454728836924678e-08, 1.227364418462339e-08, 1.224851751158059e-08, 2.449703502316113e-08, 1.224851751158059e-08, 1.222049332966521e-08, 2.444098665933042e-08, 1.222049332966521e-08, 1.220103781346329e-08, 2.440207562692663e-08, 1.220103781346329e-08, 1.228782765012658e-08, 2.457565530025310e-08, 1.228782765012658e-08, 1.228782765012658e-08, 2.457565530025310e-08, 1.228782765012658e-08, 8.460443068694181e-06, 1.692088613738836e-05, 8.460443068694181e-06, 7.821944108470662e-06, 1.564388821694133e-05, 7.821944108470662e-06, 8.039235831494423e-06, 1.607847166298885e-05, 8.039235831494423e-06, 7.466078901174413e-06, 1.493215780234883e-05, 7.466078901174413e-06, 8.298837178927262e-06, 1.659767435785453e-05, 8.298837178927262e-06, 8.298837178927262e-06, 1.659767435785453e-05, 8.298837178927262e-06, 6.273853875619881e-03, 1.254770775123976e-02, 6.273853875619881e-03, 6.616178314572290e-03, 1.323235662914458e-02, 6.616178314572290e-03, 1.033531218533424e-02, 2.067062437066849e-02, 1.033531218533424e-02, 1.442956081595282e-02, 2.885912163190563e-02, 1.442956081595282e-02, 5.847589830098741e-03, 1.169517966019748e-02, 5.847589830098741e-03, 5.847589830098743e-03, 1.169517966019749e-02, 5.847589830098743e-03, 2.526164454323349e-01, 5.052328908646698e-01, 2.526164454323349e-01, 4.452306143380805e-01, 8.904612286761611e-01, 4.452306143380805e-01, 3.503171823951967e-01, 7.006343647903933e-01, 3.503171823951967e-01, 6.180729295127238e-05, 1.236145859025447e-04, 6.180729295127238e-05, 1.104501783698365e+00, 2.209003567396730e+00, 1.104501783698365e+00, 1.104501783698369e+00, 2.209003567396738e+00, 1.104501783698369e+00, 1.519898507657354e+02, 3.039797015314708e+02, 1.519898507657354e+02, 9.753334924569803e+01, 1.950666984913960e+02, 9.753334924569803e+01, 4.689790366478506e+02, 9.379580732957011e+02, 4.689790366478506e+02, 2.542491125645674e+00, 5.084982251291348e+00, 2.542491125645674e+00, 1.946019935269678e+02, 3.892039870539357e+02, 1.946019935269678e+02, 1.946019935269675e+02, 3.892039870539351e+02, 1.946019935269675e+02, 5.896693181470530e-03, 1.179338636294107e-02, 5.896693181470530e-03, 5.343718391770388e-03, 1.068743678354078e-02, 5.343718391770388e-03, 5.520619028098928e-03, 1.104123805619786e-02, 5.520619028098928e-03, 5.681176358071082e-03, 1.136235271614216e-02, 5.681176358071082e-03, 5.600220272233274e-03, 1.120044054446655e-02, 5.600220272233274e-03, 5.600220272233274e-03, 1.120044054446655e-02, 5.600220272233274e-03, 7.903501026157561e-03, 1.580700205231512e-02, 7.903501026157561e-03, 6.738986621424543e-03, 1.347797324284909e-02, 6.738986621424543e-03, 6.738848268013311e-03, 1.347769653602662e-02, 6.738848268013311e-03, 6.956707213463931e-03, 1.391341442692786e-02, 6.956707213463931e-03, 6.868091147838280e-03, 1.373618229567656e-02, 6.868091147838280e-03, 6.868091147838280e-03, 1.373618229567656e-02, 6.868091147838280e-03, 5.936910631642642e-03, 1.187382126328528e-02, 5.936910631642642e-03, 1.622386081986200e-01, 3.244772163972399e-01, 1.622386081986200e-01, 1.050739099565075e-01, 2.101478199130150e-01, 1.050739099565075e-01, 5.560197863979879e-02, 1.112039572795975e-01, 5.560197863979879e-02, 7.532376388265387e-02, 1.506475277653077e-01, 7.532376388265387e-02, 7.532376388265387e-02, 1.506475277653077e-01, 7.532376388265387e-02, 1.447211469061491e-02, 2.894422938122983e-02, 1.447211469061491e-02, 2.022093247338189e+00, 4.044186494676377e+00, 2.022093247338189e+00, 2.058423844035125e+00, 4.116847688070250e+00, 2.058423844035125e+00, 7.670280336868733e-02, 1.534056067373747e-01, 7.670280336868733e-02, 2.540468020966213e+00, 5.080936041932427e+00, 2.540468020966213e+00, 2.540468020966207e+00, 5.080936041932414e+00, 2.540468020966207e+00, 1.841745799913636e+01, 3.683491599827271e+01, 1.841745799913636e+01, 2.058495588997326e+03, 4.116991177994651e+03, 2.058495588997326e+03, 4.140567263872338e+02, 8.281134527744676e+02, 4.140567263872338e+02, 2.521144760181508e+00, 5.042289520363015e+00, 2.521144760181508e+00, 2.599453406964723e+02, 5.198906813929445e+02, 2.599453406964723e+02, 2.599453406964732e+02, 5.198906813929465e+02, 2.599453406964732e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.103077024215340e-05, -1.103077024215339e-05, -1.103059419641166e-05, -1.103059419641166e-05, -1.102649041008468e-05, -1.102649041008468e-05, -1.102898912148939e-05, -1.102898912148938e-05, -1.102815600523418e-05, -1.102815600523418e-05, -1.102815600523418e-05, -1.102815600523418e-05, -4.993057337883477e-04, -4.993057337883472e-04, -4.995301584990665e-04, -4.995301584990662e-04, -5.054835941986418e-04, -5.054835941986422e-04, -5.038530017708101e-04, -5.038530017708105e-04, -5.037731557062896e-04, -5.037731557062897e-04, -5.037731557062896e-04, -5.037731557062897e-04, -6.863645007724501e-04, -6.863645007725019e-04, -7.047032388107506e-04, -7.047032388107506e-04, -9.644219209070287e-04, -9.644219209069468e-04, -3.092052135533052e-04, -3.092052135533052e-04, -4.699636205700926e-04, -4.699636205700275e-04, -4.699636205700926e-04, -4.699636205700275e-04, -3.726504513320066e-02, -3.726504513320066e-02, -3.973301547532523e-02, -3.973301547532525e-02, -3.878460414305314e-04, -3.878460414305314e-04, -2.190883631779670e-03, -2.190883631780262e-03, -2.369439788909707e-02, -2.369439788909708e-02, -2.369439788909703e-02, -2.369439788909709e-02, -9.768672182321583e-13, -9.768672182321594e-13, -5.258981213152068e-12, -5.258981213152071e-12, -5.545056113617870e-04, -5.545056113617870e-04, -8.754430513265950e-13, -8.754430513265950e-13, -1.274207167821659e-12, -1.274207167821661e-12, -1.274207167821694e-12, -1.274207167821694e-12, -2.912865789682544e-06, -2.912865789682544e-06, -2.850546581186607e-06, -2.850546581186607e-06, -2.793933970737339e-06, -2.793933970737339e-06, -2.744959033755893e-06, -2.744959033755893e-06, -2.941383017463632e-06, -2.941383017463632e-06, -2.941383017463632e-06, -2.941383017463632e-06, -8.380552987287934e-04, -8.380552987287934e-04, -7.944574033076903e-04, -7.944574033076901e-04, -7.872264054613139e-04, -7.872264054613139e-04, -7.474182640085429e-04, -7.474182640085432e-04, -8.380546015212785e-04, -8.380546015212784e-04, -8.380546015212785e-04, -8.380546015212784e-04, -1.560494919598705e-02, -1.560494919598705e-02, -1.960080610909450e-02, -1.960080610909451e-02, -1.790871324276629e-02, -1.790871324276629e-02, -2.377832890156886e-02, -2.377832890156888e-02, -1.531256843731190e-02, -1.531256843731190e-02, -1.531256843731192e-02, -1.531256843731192e-02, 8.035245234542742e-05, 8.035245234515131e-05, -3.297685067000256e-02, -3.297685067000260e-02, -3.669712338377497e-04, -3.669712338376056e-04, -3.417240780944845e-03, -3.417240780944845e-03, -1.690779471383073e-02, -1.690779471383061e-02, -1.690779471383075e-02, -1.690779471383068e-02, -9.886930983988056e-13, -9.886930983988054e-13, -3.525465927868599e-12, -3.525465927868600e-12, -1.040354352529187e-14, -1.040354352529187e-14, -5.448803831248993e-03, -5.448803831248994e-03, -3.338692855967692e-13, -3.338692855967690e-13, -3.338692855967601e-13, -3.338692855967601e-13, -1.684276429832882e-02, -1.684276429832882e-02, -1.494954626915892e-02, -1.494954626915892e-02, -1.555914918613621e-02, -1.555914918613623e-02, -1.610851388362184e-02, -1.610851388362185e-02, -1.583120604002232e-02, -1.583120604002232e-02, -1.583120604002233e-02, -1.583120604002232e-02, -1.998923092484148e-02, -1.998923092484148e-02, -1.091194221842916e-02, -1.091194221842916e-02, -1.253681783644360e-02, -1.253681783644360e-02, -1.473628405682587e-02, -1.473628405682586e-02, -1.360132465800321e-02, -1.360132465800322e-02, -1.360132465800322e-02, -1.360132465800322e-02, -1.920117657238955e-02, -1.920117657238956e-02, -2.381850622343241e-02, -2.381850622343241e-02, -2.609867702121546e-02, -2.609867702121546e-02, -2.822182072430984e-02, -2.822182072430985e-02, -2.741458531249562e-02, -2.741458531249562e-02, -2.741458531249563e-02, -2.741458531249561e-02, -1.744157684789763e-02, -1.744157684789764e-02, -4.229236225979418e-04, -4.229236225979422e-04, -1.926796116477678e-03, -1.926796116477677e-03, -3.548468537395377e-02, -3.548468537395377e-02, -1.220666432294982e-02, -1.220666432294983e-02, -1.220666432294979e-02, -1.220666432294979e-02, -5.085845001587311e-08, -5.085845001587311e-08, -3.430600930508404e-17, -3.430600930508404e-17, -2.152337623709802e-16, -2.152337623709802e-16, -1.001809782711110e-02, -1.001809782711110e-02, -6.601296259959915e-14, -6.601296259959915e-14, -6.601296259959630e-14, -6.601296259959632e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
