
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_bc95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.661163850734333e-02, -7.661186447087154e-02, -7.661202680971607e-02, -7.660865160774295e-02, -7.661054052737547e-02, -7.661054052737547e-02, -6.183878734417036e-02, -6.183866948379706e-02, -6.181751056860221e-02, -6.165384625633882e-02, -6.174246352341464e-02, -6.174246352341464e-02, -3.826984336747048e-02, -3.806597176113195e-02, -3.305842381795539e-02, -3.259723950713109e-02, -3.330623102473508e-02, -3.330623102473508e-02, -9.782423947913307e-03, -1.021501179927365e-02, -5.743855865121251e-02, -5.498786870521248e-03, -2.885589470291469e-03, -2.885589470291475e-03, -1.740469246144029e-06, -2.069419754858639e-06, -1.948637038084845e-04, -3.447737907920167e-07, -3.916653498432980e-07, -3.916653498432989e-07, -5.807675672275497e-02, -5.811167382769384e-02, -5.807698153367627e-02, -5.810786002839072e-02, -5.809517476642712e-02, -5.809517476642712e-02, -3.685911567334619e-02, -3.701088165660792e-02, -3.612444660835901e-02, -3.625770487725918e-02, -3.729873442112156e-02, -3.729873442112156e-02, -3.260830326683943e-02, -3.973540467599974e-02, -3.339227252833622e-02, -4.341384231368225e-02, -3.303585702328181e-02, -3.303585702328178e-02, -2.186018308778227e-03, -7.486641827078306e-03, -1.854488323615024e-03, -6.636740937221985e-02, -3.601636052120419e-03, -3.601636052120419e-03, -1.963806165271646e-07, -3.586777749561448e-07, -3.958038165823963e-07, -7.846308984907375e-04, -3.504741320372421e-07, -3.504741320372413e-07, -3.365670241825085e-02, -3.271032426113075e-02, -3.303309219707672e-02, -3.330832419428049e-02, -3.317024921389806e-02, -3.317024921389806e-02, -3.471131230277762e-02, -2.520527353471860e-02, -2.769741271917305e-02, -3.033600858510427e-02, -2.903021901934324e-02, -2.903021901934324e-02, -4.195676028148794e-02, -1.051570787331040e-02, -1.427070621890942e-02, -2.313738910579969e-02, -1.821146317158480e-02, -1.821146317158480e-02, -2.545938184989167e-02, -1.653145091608615e-04, -3.868418833704429e-04, -2.452218725844525e-02, -1.553379693229339e-03, -1.553379693229340e-03, -4.415786346314834e-06, -1.967907681155897e-08, -9.684194145000659e-08, -1.330302278168399e-03, -3.693869926279300e-07, -3.693869926279303e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_bc95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.147080220438063e-01, -1.147030615342795e-01, -1.147074137983695e-01, -1.147029854128604e-01, -1.147070606593519e-01, -1.146999690890059e-01, -1.147090997398440e-01, -1.147080260064480e-01, -1.147044631706010e-01, -1.147074207422618e-01, -1.147044631706010e-01, -1.147074207422618e-01, -1.039249229730301e-01, -1.039490075284512e-01, -1.039146783378595e-01, -1.039445627842128e-01, -1.037456516213036e-01, -1.037030999982873e-01, -1.036895457679509e-01, -1.036966729919256e-01, -1.040005022683309e-01, -1.034854666040576e-01, -1.040005022683309e-01, -1.034854666040576e-01, -7.931580628771492e-02, -7.865014125364793e-02, -7.916616305404847e-02, -7.845573264834400e-02, -7.330290330303191e-02, -7.347933700156997e-02, -7.182638471215373e-02, -7.125169206588984e-02, -7.071599521943428e-02, -7.539158201899872e-02, -7.071599521943428e-02, -7.539158201899872e-02, -2.886801421004902e-02, -2.404505752354179e-02, -3.004508139533517e-02, -2.447661416997186e-02, -1.283474363087878e-01, -1.166843455717540e-01, -1.827424111876578e-02, -1.690587664823081e-02, -4.880093504699038e-03, -4.777064435166631e-02, -4.880093504699049e-03, -4.777064435166634e-02, -8.172036316126010e-06, -6.274251701631877e-06, -9.904372898329301e-06, -7.330118107933530e-06, -8.756725549657009e-04, -6.872333536498695e-04, -1.371174649004166e-06, -1.479149055995439e-06, -8.298900131598078e-07, -6.455165882492756e-06, -8.298900131598101e-07, -6.455165882492767e-06, -8.292051475632205e-02, -8.298274427309993e-02, -8.285264324618359e-02, -8.292047117024769e-02, -8.291444901291460e-02, -8.298076073603890e-02, -8.285871458295296e-02, -8.292173382157009e-02, -8.288628805497414e-02, -8.295214828035184e-02, -8.288628805497414e-02, -8.295214828035184e-02, -7.464607758891499e-02, -7.454845122791792e-02, -7.431528822893907e-02, -7.429868340005848e-02, -7.427094420023277e-02, -7.356273707957482e-02, -7.402611280854156e-02, -7.329320765098894e-02, -7.406757770435711e-02, -7.544828737382861e-02, -7.406757770435711e-02, -7.544828737382861e-02, -5.282359715846862e-02, -5.290466934458819e-02, -4.561024862878137e-02, -4.514920398695530e-02, -6.143208368287848e-02, -5.249485681256335e-02, -5.304761934466912e-02, -4.731981572589539e-02, -4.762910587155360e-02, -5.724936329547715e-02, -4.762910587155357e-02, -5.724936329547711e-02, -8.051073232238692e-03, -7.697721726006856e-03, -2.257881515683773e-02, -2.214632590777230e-02, -7.602130317544340e-03, -6.057539708612432e-03, -6.537669596185323e-02, -6.543102971614741e-02, -1.444084107198753e-02, -1.030529292062112e-02, -1.444084107198753e-02, -1.030529292062112e-02, -8.731498730575014e-07, -7.756932719219022e-07, -1.514475970670614e-06, -1.463072287698608e-06, -1.882138893350616e-06, -1.435664375083266e-06, -3.047370078620407e-03, -2.960301384734485e-03, -3.231495251015713e-06, -8.069728461412637e-07, -3.231495251015708e-06, -8.069728461412617e-07, -3.901166120061612e-02, -3.839471361337029e-02, -4.205933729120523e-02, -4.139204770440538e-02, -4.112889973312201e-02, -4.046616597207713e-02, -4.023889387254958e-02, -3.961102367691736e-02, -4.069663529915322e-02, -4.005130873289234e-02, -4.069663529915322e-02, -4.005130873289234e-02, -3.697394897608459e-02, -3.652713244177450e-02, -4.693692693650571e-02, -4.615224803166932e-02, -4.703891221012018e-02, -4.620809815788499e-02, -4.555734186940256e-02, -4.497777882353042e-02, -4.657109433462151e-02, -4.592217889135614e-02, -4.657109433462151e-02, -4.592217889135615e-02, -4.819123069800117e-02, -4.720981788989967e-02, -2.900088977754905e-02, -2.831153749966301e-02, -3.585531767417554e-02, -3.432937215211114e-02, -4.657965296388179e-02, -4.590541581803349e-02, -4.029257357655463e-02, -4.024852284817454e-02, -4.029257357655464e-02, -4.024852284817453e-02, -4.910359146745993e-02, -4.750481033327986e-02, -6.663474881491487e-04, -6.474064495879932e-04, -1.635312556259201e-03, -1.405880685388026e-03, -4.746763169407281e-02, -4.282104593265284e-02, -6.635606047395109e-03, -4.936547042395479e-03, -6.635606047395112e-03, -4.936547042395481e-03, -1.958975331628209e-05, -1.691405012010966e-05, -8.336914428069600e-08, -8.669375753243659e-08, -4.636226892282960e-07, -3.491401096488968e-07, -5.125547781749710e-03, -4.746363700900349e-03, -2.863324763303951e-06, -9.841084196811354e-07, -2.863324763303951e-06, -9.841084196811360e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.948882134042704e-10, 0.000000000000000e+00, 2.948528317425332e-10, 2.948889072972475e-10, 0.000000000000000e+00, 2.948537211482339e-10, 2.948792209769226e-10, 0.000000000000000e+00, 2.948410618625919e-10, 2.948663275595663e-10, 0.000000000000000e+00, 2.948303609595178e-10, 2.948854903471683e-10, 0.000000000000000e+00, 2.948277510869561e-10, 2.948854903471683e-10, 0.000000000000000e+00, 2.948277510869561e-10, 2.358797565554046e-06, 0.000000000000000e+00, 2.363293369257274e-06, 2.358707759088610e-06, 0.000000000000000e+00, 2.363671569662661e-06, 2.361988104907018e-06, 0.000000000000000e+00, 2.363488397612340e-06, 2.339630507630479e-06, 0.000000000000000e+00, 2.343640421995514e-06, 2.360773731111457e-06, 0.000000000000000e+00, 2.345636842555190e-06, 2.360773731111457e-06, 0.000000000000000e+00, 2.345636842555190e-06, 4.412325568318033e-03, 0.000000000000000e+00, 4.582376906830969e-03, 4.347893243970240e-03, 0.000000000000000e+00, 4.561276179329160e-03, 3.555373011578213e-03, 0.000000000000000e+00, 3.318275105922819e-03, 3.187260040929475e-03, 0.000000000000000e+00, 3.227132489447837e-03, 4.708583030772919e-03, 0.000000000000000e+00, 2.437712479227332e-03, 4.708583030772919e-03, 0.000000000000000e+00, 2.437712479227332e-03, 2.984545460596479e-01, 0.000000000000000e+00, 2.325956933208433e-01, 3.094938902684710e-01, 0.000000000000000e+00, 2.338561884174137e-01, 4.232605583313425e-03, 0.000000000000000e+00, 4.245963179579073e-03, 3.669338748628861e-01, 0.000000000000000e+00, 3.211578221075550e-01, 7.997121604978440e-02, 0.000000000000000e+00, 2.328370010167442e+00, 7.997121604978438e-02, 0.000000000000000e+00, 2.328370010167446e+00, 1.951263018865821e+00, 0.000000000000000e+00, 1.268277405790984e+00, 2.109630623048685e+00, 0.000000000000000e+00, 1.296346366638757e+00, 8.402888948059432e-01, 0.000000000000000e+00, 5.724226182537081e-01, 1.474202067544334e+00, 0.000000000000000e+00, 1.638094530275922e+00, 3.972078038514950e-01, 0.000000000000000e+00, 1.804055811739076e+01, 3.972078038514968e-01, 0.000000000000000e+00, 1.804055811739079e+01, 2.918614201205203e-07, 0.000000000000000e+00, 2.921708002919572e-07, 2.927498279080293e-07, 0.000000000000000e+00, 2.930351509254347e-07, 2.918828895450821e-07, 0.000000000000000e+00, 2.921831947394256e-07, 2.926496543751306e-07, 0.000000000000000e+00, 2.929651790067493e-07, 2.923352778287608e-07, 0.000000000000000e+00, 2.926087205513201e-07, 2.923352778287608e-07, 0.000000000000000e+00, 2.926087205513201e-07, 1.113326556730347e-05, 0.000000000000000e+00, 1.110623812312169e-05, 1.085508267440827e-05, 0.000000000000000e+00, 1.084633771383864e-05, 1.072391683456971e-05, 0.000000000000000e+00, 1.074484996467358e-05, 1.049473671672518e-05, 0.000000000000000e+00, 1.050401547077511e-05, 1.121352465831357e-05, 0.000000000000000e+00, 1.111390166173407e-05, 1.121352465831357e-05, 0.000000000000000e+00, 1.111390166173407e-05, 8.408804807243450e-03, 0.000000000000000e+00, 8.450191945900415e-03, 1.194811309940402e-02, 0.000000000000000e+00, 1.184620748874650e-02, 1.469752516733070e-02, 0.000000000000000e+00, 1.171606883863181e-02, 2.923866435661652e-02, 0.000000000000000e+00, 2.207277779425758e-02, 7.135208048308555e-03, 0.000000000000000e+00, 9.897554649344409e-03, 7.135208048308552e-03, 0.000000000000000e+00, 9.897554649344406e-03, 4.006818814164416e-01, 0.000000000000000e+00, 3.792431798174324e-01, 1.437278962064955e-01, 0.000000000000000e+00, 1.393495051113668e-01, 5.248564110731632e-01, 0.000000000000000e+00, 3.656703027359922e-01, 9.368468746111606e-05, 0.000000000000000e+00, 9.392664975025889e-05, 5.396629197653653e-01, 0.000000000000000e+00, 3.862232580254667e-01, 5.396629197653653e-01, 0.000000000000000e+00, 3.862232580254666e-01, 2.673608950831510e+00, 0.000000000000000e+00, 2.017286603932762e+00, 2.013758542804788e+00, 0.000000000000000e+00, 1.810787176780823e+00, 1.413289873839427e+01, 0.000000000000000e+00, 9.779065385685925e+00, 7.335482787649059e-01, 0.000000000000000e+00, 6.849423581065236e-01, 1.600203179584314e+01, 0.000000000000000e+00, 1.791557884802314e+00, 1.600203179584309e+01, 0.000000000000000e+00, 1.791557884802309e+00, 1.461234414700968e-02, 0.000000000000000e+00, 1.433461085880114e-02, 1.236688283473428e-02, 0.000000000000000e+00, 1.215201630578002e-02, 1.307594075790854e-02, 0.000000000000000e+00, 1.284615436758501e-02, 1.373049206977065e-02, 0.000000000000000e+00, 1.347464348906042e-02, 1.339653296203644e-02, 0.000000000000000e+00, 1.315368164604760e-02, 1.339653296203644e-02, 0.000000000000000e+00, 1.315368164604760e-02, 1.903525565772244e-02, 0.000000000000000e+00, 1.862412133393907e-02, 9.396278173052112e-03, 0.000000000000000e+00, 9.222674224886032e-03, 1.065039045508906e-02, 0.000000000000000e+00, 1.048406268978876e-02, 1.284430803311146e-02, 0.000000000000000e+00, 1.264328589830174e-02, 1.169613262546755e-02, 0.000000000000000e+00, 1.147195755285269e-02, 1.169613262546755e-02, 0.000000000000000e+00, 1.147195755285269e-02, 1.023142714977888e-02, 0.000000000000000e+00, 1.000525936735282e-02, 8.332815872410131e-02, 0.000000000000000e+00, 8.050133369783258e-02, 6.292664857478641e-02, 0.000000000000000e+00, 5.991949659850297e-02, 5.163325108438158e-02, 0.000000000000000e+00, 5.064795545393260e-02, 5.419188215787209e-02, 0.000000000000000e+00, 5.465609550657561e-02, 5.419188215787214e-02, 0.000000000000000e+00, 5.465609550657563e-02, 1.552543757829429e-02, 0.000000000000000e+00, 1.494465583865815e-02, 6.460638418858939e-01, 0.000000000000000e+00, 6.172419365130944e-01, 6.642118639848000e-01, 0.000000000000000e+00, 5.297470772285935e-01, 8.754769356823197e-02, 0.000000000000000e+00, 7.471737426711653e-02, 8.715868526022785e-01, 0.000000000000000e+00, 6.214829753701718e-01, 8.715868526022789e-01, 0.000000000000000e+00, 6.214829753701721e-01, 1.454998388588945e+00, 0.000000000000000e+00, 1.159103573443348e+00, 1.155292341205769e+01, 0.000000000000000e+00, 1.659086456504090e+01, 5.485316617268644e+00, 0.000000000000000e+00, 3.630603006836046e+00, 8.024283668186942e-01, 0.000000000000000e+00, 7.037977858127764e-01, 2.330135096707123e+01, 0.000000000000000e+00, 2.769026932525983e+00, 2.330135096707132e+01, 0.000000000000000e+00, 2.769026932525997e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
