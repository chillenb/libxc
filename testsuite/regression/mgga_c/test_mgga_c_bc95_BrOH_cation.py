
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_bc95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.236640582374151e-01, -1.236628790325480e-01, -1.236581564297542e-01, -9.920022795030430e-02, -9.919581677221148e-02, -7.516788635983607e-02, -8.804561284860642e-02, -4.257847829604795e-02, -4.265198663164243e-02, -4.262327384447539e-02, -4.262517380918420e-02, -8.810787883322577e-02, -1.346632370534001e-01, -7.644716513049186e-02, -1.884161785222349e-02, -7.859677628284546e-02, -1.444119755928644e-01, -1.905449194079214e-02, -5.792477736085785e-02, -5.628452320217934e-02, -1.094525389782025e-01, -4.500568221928551e-03, -2.005979961964819e-03, -5.933796774446261e-02, -1.723154277111475e-06, -3.909323944044101e+00, -6.554444611815442e-01, -3.022544615267251e-07, -3.241234799299828e-07, -3.241234799299830e-07, -5.798925710955093e-02, -5.802493427857367e-02, -5.799129249027580e-02, -5.802276802111361e-02, -7.026849208736073e-02, -7.026165970924807e-02, -3.451367068744912e-02, -3.499422607615049e-02, -3.413457576393256e-02, -3.457150943689897e-02, -8.081469789081380e-02, -3.496239576843879e-02, -4.339961459345516e-02, -3.067937502820275e-02, -2.475910984016731e-02, -2.701308688152377e-02, -4.266937804857052e-02, -2.788771469973805e-02, -1.836975268228739e-03, -8.203149387314861e-02, -1.537979168918195e-03, -4.125633686114211e-02, -3.217799170097036e-03, -3.217799170097037e-03, -1.536882972925145e+01, -2.662970842333285e-07, -3.400533398336631e-07, -3.199585007186004e-01, -2.176206298501953e-07, -2.176206298501951e-07, -3.230093706573096e-02, -3.160253851907721e-02, -3.750509830565273e-02, -3.439198938770698e-02, -3.711120454877792e-02, -3.453916164880984e-02, -3.189060533280971e-02, -4.329507947459185e-02, -3.987055945461511e-02, -2.893525909305246e-02, -2.786499642062150e-02, -3.845134088612717e-02, -4.126139506443615e-02, -1.014087277033760e-02, -5.637351431536138e-02, -4.502089088971848e-02, -1.632410319091310e-02, -4.852452810654095e-02, -2.271581173551365e-02, -1.434117853067011e+00, -3.328165136607751e-04, -2.023585720003715e-02, -1.343550095077791e-03, -1.343550095077791e-03, -8.605419151897404e+00, -6.028182949287860e-09, -2.266005579921556e+01, -4.307171049933322e-01, -2.614364548340945e-07, -7.445458136439814e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_bc95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.442875930367079e-02, -6.443509987715931e-02, -6.442951802753419e-02, -6.443590056108574e-02, -6.443284149610606e-02, -6.443892303759360e-02, -5.972475352819235e-02, -1.204309950508050e-01, -5.973205063554821e-02, -1.204288253992068e-01, -1.140098659918844e-01, -1.140124165911118e-01, -9.797318512103563e-02, -6.974611126288815e-03, -8.294200774485770e-02, -8.295521190363848e-02, -8.296740145311773e-02, -8.293448925850616e-02, -8.295377598056293e-02, -8.295005524166575e-02, -8.312891642427712e-02, -8.277067022488106e-02, -7.063997721399726e-03, -9.776386940490897e-02, 1.634617538553245e-02, 1.543894666754141e-02, 2.671156967160778e-02, -6.690704228864902e-02, -4.612725649784115e-02, -4.760866802658940e-02, -6.796876821779205e-02, 3.074531213706928e-02, 1.914867869265722e-02, 2.530477206239067e-02, -4.008114418639230e-02, -5.554703479103386e-02, 3.154053936785692e-02, -3.766885551494173e-02, 2.920466402492517e-02, -3.750855755275667e-02, -7.727738948357249e-02, 6.874937980866948e-02, -1.563210356350734e-02, -1.386289296605599e-02, -3.158025944363887e-03, -3.861491650703811e-02, -1.165486733651558e-02, 1.567380868599679e-01, -8.103605373087203e-06, -6.198589472558135e-06, 3.478577422847101e+00, -2.639030391980386e-05, 6.388869372278652e-01, -2.107899826520189e-03, -1.201046632471978e-06, -1.289024131518511e-06, -6.501699116937394e-07, -5.619490786713084e-06, -6.501699116937398e-07, -5.619490786713087e-06, -8.290782063356897e-02, -8.296856278695437e-02, -8.284079314657122e-02, -8.290708867976820e-02, -8.290198610165117e-02, -8.296696896688997e-02, -8.284696429874572e-02, -8.290863200432567e-02, -5.293932816528477e-02, -8.605867711148919e-02, -8.599231503245634e-02, -5.299635120134492e-02, -7.119495885986833e-02, -7.110507538874568e-02, -7.139289812794215e-02, -7.138305602955455e-02, -7.132279512747869e-02, -7.058963149084743e-02, -7.156138941316102e-02, -7.080802601047616e-02, -8.610340364264937e-02, 9.392929762360213e-04, -7.063727391590960e-02, -7.210836542634215e-02, -5.346543142415290e-02, -1.899703889745252e-02, -4.783152678010607e-02, -4.739399874296740e-02, -5.183599489377522e-02, -4.384236106778512e-02, -5.114547123249807e-02, -4.460191888387863e-02, -4.837297205216099e-02, -2.330751240553315e-02, -4.396009097909361e-02, -5.337015345298674e-02, -6.807323456790034e-03, -6.533719027396991e-03, 6.048256068600181e-02, -3.889409797887645e-02, -6.427205806718361e-03, -4.995226596960081e-03, -6.934577907806136e-02, -6.942866627141195e-02, -1.318373015331291e-02, -9.176182764134075e-03, -1.318373015331292e-02, -9.176182764134077e-03, 1.242091638510774e+01, -1.513757965778143e-06, -1.111389062128429e-06, -1.081461525996091e-06, -1.617648470934976e-06, -1.222303085687842e-06, -7.206515545888434e-03, 2.925244254830699e-01, -2.212696636478514e-06, -4.443077996035499e-07, -2.212696636478512e-06, -4.443077996035495e-07, -4.048738831780478e-02, -3.983893902228860e-02, -4.265967082578991e-02, -4.198399764881763e-02, -3.468848534362082e-02, -3.419748439816553e-02, -3.464886777992460e-02, -4.124682650560082e-02, -3.491930017281656e-02, -3.442435461541161e-02, -3.436522166712586e-02, -4.162457991499206e-02, -4.042181119405432e-02, -3.984511970215056e-02, -5.246027644591986e-02, -1.366580951610679e-02, -5.028909046034429e-02, -2.053602260521649e-02, -4.505301424046577e-02, -4.447670077906874e-02, -4.579011668959976e-02, -4.514479478542902e-02, -4.892316923426954e-02, -2.361629181444404e-02, -5.279721572554055e-02, -2.637364315439958e-02, -2.818418303345699e-02, -2.750993047284291e-02, 2.119649573567752e-02, -4.692179152904231e-02, -1.443169924512336e-03, -4.887993039863182e-02, -3.714910762633088e-02, -3.709332837859554e-02, -4.855761779019740e-02, 7.272841596730835e-03, -4.545998242226879e-02, -4.390960941954894e-02, 6.293110659957222e-01, 6.304474017053412e-01, -1.411521053549317e-03, -1.203864016309773e-03, -4.177522655829369e-02, -3.780402413681495e-02, -5.812231571157182e-03, -4.254029531832065e-03, -5.812231571157183e-03, -4.254029531832066e-03, 3.564765072198845e+00, 3.445890962818200e+00, -2.509108512124574e-08, -2.487294715892498e-08, 8.938332555499466e+00, 8.125523744932533e+00, 1.910708442308810e-01, 1.761947093372566e-01, -2.232028887834012e-06, -6.163559748954970e-07, -4.504058462555737e-06, 4.087430999059266e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.319333182788872e-09, 0.000000000000000e+00, 1.319171785243409e-09, 1.319287540334996e-09, 0.000000000000000e+00, 1.319138952158724e-09, 1.319148235069838e-09, 0.000000000000000e+00, 1.318935806244291e-09, 1.307473100900015e-09, 0.000000000000000e+00, 2.842587300889312e-10, 1.307121631329657e-09, 0.000000000000000e+00, 2.842640680074617e-10, 2.738404316763906e-10, 0.000000000000000e+00, 2.738724312272273e-10, 8.410548528765878e-07, 0.000000000000000e+00, 1.543004126694172e-05, 7.214654036870076e-07, 0.000000000000000e+00, 7.213779593536027e-07, 7.253433597679243e-07, 0.000000000000000e+00, 7.257303413342075e-07, 7.235912978424355e-07, 0.000000000000000e+00, 7.235286714237941e-07, 7.227188954465104e-07, 0.000000000000000e+00, 7.255537246961529e-07, 1.544836870903490e-05, 0.000000000000000e+00, 8.456435553950724e-07, 6.650956876226052e-02, 0.000000000000000e+00, 6.365264826864415e-02, 6.675430578389026e-02, 0.000000000000000e+00, 1.112964266456388e-03, 7.497715258173094e-04, 0.000000000000000e+00, 7.790384587118513e-04, 1.147301173778583e-03, 0.000000000000000e+00, 7.499617001723706e-02, 6.030221564425126e-02, 0.000000000000000e+00, 1.057250059016829e-01, 6.702282537720239e-04, 0.000000000000000e+00, 9.273392320209653e-04, 5.590090899384340e+01, 0.000000000000000e+00, 3.597666620819054e-01, 5.083850928945853e+01, 0.000000000000000e+00, 3.476280916351858e-01, 3.635181401792684e-04, 0.000000000000000e+00, 4.382401365707581e-02, 2.321890309405964e-01, 0.000000000000000e+00, 2.180660617001991e-01, 5.159480917058271e-02, 0.000000000000000e+00, 1.249652533762501e+00, 1.243611296494421e-01, 0.000000000000000e+00, 3.983611764733860e+03, 1.911135922193183e+00, 0.000000000000000e+00, 1.245401259544039e+00, 7.818046340328726e+10, 0.000000000000000e+00, 5.113590899748977e+00, 2.411624339227535e+06, 0.000000000000000e+00, 1.747430115585068e+00, 1.129910468563809e+00, 0.000000000000000e+00, 1.273105386435007e+00, 3.140398219541309e-01, 0.000000000000000e+00, 1.256982437732088e+01, 3.140398219541310e-01, 0.000000000000000e+00, 1.256982437732088e+01, 2.900624746207780e-07, 0.000000000000000e+00, 2.904686458027572e-07, 2.909615107563048e-07, 0.000000000000000e+00, 2.913438258008717e-07, 2.901255291762672e-07, 0.000000000000000e+00, 2.905114578968556e-07, 2.909000345992406e-07, 0.000000000000000e+00, 2.913018483981907e-07, 9.376692309125505e-07, 0.000000000000000e+00, 2.975350633462576e-07, 2.971276761182413e-07, 0.000000000000000e+00, 9.388730783495362e-07, 9.047108390213217e-06, 0.000000000000000e+00, 9.072571316949579e-06, 9.079680141738972e-06, 0.000000000000000e+00, 9.111882998470369e-06, 9.025961549721011e-06, 0.000000000000000e+00, 8.999774063246856e-06, 9.066037471909210e-06, 0.000000000000000e+00, 9.038285715633201e-06, 1.090580358250905e-05, 0.000000000000000e+00, 2.630192072914318e-04, 9.032265403936581e-06, 0.000000000000000e+00, 9.179442313572790e-06, 4.867180014308885e-03, 0.000000000000000e+00, 4.519861808357820e-02, 4.730563857547297e-03, 0.000000000000000e+00, 4.818368282685348e-03, 5.195471472061182e-03, 0.000000000000000e+00, 4.641552572891338e-03, 5.832979071010968e-03, 0.000000000000000e+00, 5.206040600694475e-03, 4.402019853287130e-03, 0.000000000000000e+00, 4.690252819442668e-02, 4.097776709959417e-03, 0.000000000000000e+00, 5.124124150470932e-03, 2.833809652446429e-01, 0.000000000000000e+00, 2.648641608035849e-01, 7.520089176228204e+01, 0.000000000000000e+00, 2.384059747009820e-01, 3.603034734156027e-01, 0.000000000000000e+00, 2.505887403010987e-01, 2.027582099425876e-05, 0.000000000000000e+00, 2.034079800737459e-05, 4.300809187855033e-01, 0.000000000000000e+00, 3.044229482644202e-01, 4.300809187855035e-01, 0.000000000000000e+00, 3.044229482644205e-01, 1.982101374430138e+13, 0.000000000000000e+00, 2.739363130861602e+00, 1.131009188998493e+00, 0.000000000000000e+00, 1.001894954564393e+00, 1.059207522599252e+01, 0.000000000000000e+00, 7.179608270521846e+00, 1.534488432998202e+00, 0.000000000000000e+00, 8.151152223914387e+04, 6.015774431511087e+00, 0.000000000000000e+00, 1.064133898263959e+00, 6.015774431511082e+00, 0.000000000000000e+00, 1.064133898263957e+00, 1.243643070353796e-02, 0.000000000000000e+00, 1.224143511609067e-02, 1.078118393213537e-02, 0.000000000000000e+00, 1.062003706878543e-02, 2.057359601256888e-02, 0.000000000000000e+00, 2.004522799224764e-02, 1.942618885809770e-02, 0.000000000000000e+00, 1.168419498769134e-02, 2.003784102064386e-02, 0.000000000000000e+00, 1.953506653055594e-02, 1.994936786753353e-02, 0.000000000000000e+00, 1.145390409499930e-02, 1.375456407029652e-02, 0.000000000000000e+00, 1.358836796724587e-02, 9.736978790454020e-03, 0.000000000000000e+00, 1.158797865202429e-01, 1.009321696889946e-02, 0.000000000000000e+00, 7.229237721531825e-02, 1.068039332176266e-02, 0.000000000000000e+00, 1.051205819814943e-02, 9.970499632050574e-03, 0.000000000000000e+00, 9.819123632754053e-03, 1.046939415959098e-02, 0.000000000000000e+00, 5.740966870043654e-02, 3.512108324522389e-03, 0.000000000000000e+00, 1.841231117484842e-02, 7.660291708988651e-02, 0.000000000000000e+00, 7.383064992011033e-02, 5.549284085439530e+00, 0.000000000000000e+00, 7.291303572432896e-02, 8.686027129474734e-01, 0.000000000000000e+00, 3.319372217816097e-02, 3.961043122389546e-02, 0.000000000000000e+00, 3.985302739391646e-02, 5.207431074142891e-02, 0.000000000000000e+00, 2.051334560439538e+00, 1.050805768395638e-02, 0.000000000000000e+00, 1.032876659621711e-02, 2.650925501315649e+06, 0.000000000000000e+00, 2.564393635840768e+06, 4.939644585775007e-01, 0.000000000000000e+00, 3.917699327916829e-01, 4.251314976878282e-02, 0.000000000000000e+00, 4.311515006638407e-02, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 1.659306439991141e+10, 0.000000000000000e+00, 1.339174880163417e+10, 1.422099214566522e+00, 0.000000000000000e+00, 1.398930753374009e+00, 8.504076785764570e+13, 0.000000000000000e+00, 5.664031625193285e+13, 2.451397349537679e+04, 0.000000000000000e+00, 2.086372416794747e+04, 1.116088107910786e+01, 0.000000000000000e+00, 1.729358674818302e+00, 2.449295636189682e+01, 0.000000000000000e+00, 2.264031559070814e+12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917471522261091e-05, -3.917480666326107e-05, -3.917448580994359e-05, -3.917464000171363e-05, -3.917370661284050e-05, -3.917353614629186e-05, -3.917629863541938e-05, -1.378716895281572e-05, -3.917458068216103e-05, -1.378888624786437e-05, -1.378769232225893e-05, -1.378888624786437e-05, -1.086307176581860e-04, -9.886367289552889e-04, -1.086762179304513e-04, -1.086254899047673e-04, -1.095650411891742e-04, -1.097228200789897e-04, -1.092250898329168e-04, -1.092236389627861e-04, -1.085596230900190e-04, -1.100246529098191e-04, -9.889006949787293e-04, -1.100246529098191e-04, -1.598021136832418e-02, -1.587732578179836e-02, -1.602089576144582e-02, -5.816541241886695e-04, -4.710803402561351e-04, -4.585272505900273e-04, -5.059211528733358e-04, -1.642148573775559e-02, -1.568044317361094e-02, -1.744678139345269e-02, -5.953671632135174e-04, -4.125746990187820e-04, -1.383354092125630e-01, -2.545594631964812e-03, -1.358014431510194e-01, -2.761031995452824e-03, -1.511044147610398e-04, -1.205958836055364e-02, -5.537625639604731e-04, -7.010054770280826e-04, -1.911908828015881e-03, -1.836805468040011e-04, -1.911908828015880e-03, -3.259754731379892e-01, -2.925053862903257e-07, -3.482503482707788e-07, -1.204977028068718e+01, -4.248691717209683e-07, -1.369328487948551e+00, -2.183566043800917e-05, -5.082405532873740e-08, -4.895047635855906e-08, -2.015180548687125e-07, -6.979620591902826e-08, -2.015180548687125e-07, -6.979620591902835e-08, -2.259855269312626e-04, -2.260881212058678e-04, -2.270958956349527e-04, -2.271617442885251e-04, -2.260634434835929e-04, -2.261367632496152e-04, -2.270154474710338e-04, -2.271113465430546e-04, -4.879961484479221e-04, -2.266247031240197e-04, -2.265412913612535e-04, -4.882054926856168e-04, -2.184886358410226e-04, -2.198407711106584e-04, -2.290425707302488e-04, -2.301086062234988e-04, -2.090918765935176e-04, -2.130296248907240e-04, -2.181735888507632e-04, -2.223153613090707e-04, -2.317988057317349e-04, -2.641639124623456e-03, -2.317988057317349e-04, -2.263597005645318e-04, -3.929170235622424e-03, -1.984749290175147e-02, -6.303138297431693e-03, -6.504666655764184e-03, -2.674119186441406e-03, -3.235583825171795e-03, -4.075837800125147e-03, -4.531443570850382e-03, -4.490464816718589e-03, -2.014640642022206e-02, -4.490464816718591e-03, -4.176864456846772e-03, -2.006900302560310e-04, -2.048784310581295e-04, -1.344952233432972e-01, -9.423807568459265e-04, -1.556672292865342e-04, -1.896343766166793e-04, -6.620210932860224e-04, -6.630589334612137e-04, -3.860796718241865e-04, -6.415843739916735e-04, -3.860796718241866e-04, -6.415843739916738e-04, -3.228303714073314e+01, -1.673609233594659e-08, -4.320386791748026e-08, -3.974284072041291e-08, -1.358766007760613e-07, -1.757549224413043e-07, -7.429711701765857e-05, -6.758971769825938e-01, -2.718102425525728e-08, -2.133696627854412e-07, -2.718102425525730e-08, -2.133696627854409e-07, -1.552306914455465e-02, -1.552582117956704e-02, -1.268299878892380e-02, -1.271124538750983e-02, -1.983160539830672e-02, -1.970666739122217e-02, -1.977746314944726e-02, -1.442137908417866e-02, -1.980452801724910e-02, -1.968033565964845e-02, -1.980452801724910e-02, -1.400805702816674e-02, -1.573383149051152e-02, -1.576560080490087e-02, -4.103405104669137e-03, -2.619498423429564e-02, -5.855996421654132e-03, -2.431986097731804e-02, -8.622152563779987e-03, -8.630992571357915e-03, -7.055802023881759e-03, -7.089637270769390e-03, -7.055802023881757e-03, -2.350005329694931e-02, -4.894091693419611e-03, -1.600564578451296e-02, -1.408010276920654e-03, -1.425686809925916e-03, -7.129940082659059e-02, -2.075504996960211e-03, -4.596769162591872e-02, -3.651606863563957e-03, -2.954446459371496e-03, -2.988292442326723e-03, -2.954446459371497e-03, -5.701619287669108e-02, -3.420976223119365e-03, -3.590918706190889e-03, -1.404516281424835e+00, -1.391711463467844e+00, -3.381789829807270e-05, -3.836836569884722e-05, -5.271356587168376e-03, -6.540211187909225e-03, -1.641862007921526e-04, -2.374257902366361e-04, -1.641862007921527e-04, -2.374257902366361e-04, -8.271235436698682e+00, -7.918925502147195e+00, -1.133943442251980e-09, -1.136480995602016e-09, -4.818582270800353e+01, -4.495849352159821e+01, -5.342280621683502e-01, -5.221142930065400e-01, -6.008281617989573e-08, -1.726523620548169e-07, -6.008281617989576e-08, -2.538022450106644e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
