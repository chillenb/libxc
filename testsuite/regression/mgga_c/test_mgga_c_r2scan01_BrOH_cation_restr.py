
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan01_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731077455816380e-02, -2.731079103974106e-02, -2.731041082984989e-02, -2.731015117867165e-02, -2.731035211179085e-02, -2.731035211179085e-02, -4.814487743241015e-02, -4.814108521384799e-02, -4.801911404031756e-02, -4.786449559773703e-02, -4.796659341087924e-02, -4.796659341087924e-02, -4.138298358678543e-02, -4.122656281684596e-02, -3.748489118023189e-02, -3.746301360568027e-02, -3.759322360609651e-02, -3.759322360609651e-02, -1.544241168144649e-02, -1.600778789902271e-02, -4.875029104237009e-02, -1.502270022545980e-02, -1.688102599098247e-02, -1.688102599098247e-02, -5.176080043174790e-04, -6.135263896537448e-04, -4.374706415117326e-03, -3.178682425670852e-04, -4.315094005633319e-04, -4.315094005633322e-04, -2.644909790343751e-02, -2.645688360737725e-02, -2.644829989489867e-02, -2.645522052564379e-02, -2.645364094897415e-02, -2.645364094897415e-02, -2.535509737880382e-02, -2.496048752274630e-02, -2.476911535172042e-02, -2.442146845157677e-02, -2.541218770283889e-02, -2.541218770283889e-02, -2.905544273582087e-02, -3.297418341812110e-02, -3.537629893212690e-02, -4.396649917019289e-02, -2.881347990596374e-02, -2.881347990596374e-02, -1.064350325964323e-02, -1.490414013837240e-02, -1.006253288545185e-02, -5.551516950996916e-02, -1.251750378001546e-02, -1.251750378001546e-02, -2.392225204518165e-04, -3.196948094309170e-04, -2.802262297321083e-04, -7.263007129830533e-03, -3.282783034306648e-04, -3.282783034306648e-04, -2.490800687115903e-02, -2.451291343120223e-02, -2.464865884563081e-02, -2.476371051825243e-02, -2.470636743709506e-02, -2.470636743709506e-02, -2.597076996957919e-02, -2.174725749537298e-02, -2.287557922026794e-02, -2.406154502886593e-02, -2.352019031045766e-02, -2.352019031045766e-02, -3.635123440001729e-02, -1.578407049957790e-02, -1.910021573200206e-02, -2.760057990474188e-02, -2.215797880994419e-02, -2.215797880994419e-02, -2.488323820711320e-02, -4.011581047865496e-03, -5.661474538154534e-03, -2.709067447162700e-02, -9.210069434037488e-03, -9.210069434037493e-03, -9.678213261547599e-04, -6.660064502754753e-05, -1.596363848929994e-04, -8.400725911429218e-03, -3.039639904730876e-04, -3.039639904730910e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.167229634049378e-02, -4.167205977800471e-02, -4.167072482584429e-02, -4.167421308299572e-02, -4.167242621991027e-02, -4.167242621991027e-02, -6.901384385882500e-02, -6.900009243593648e-02, -6.862280714017772e-02, -6.861910922820443e-02, -6.868431596613613e-02, -6.868431596613613e-02, -7.477290750076705e-02, -7.448553806082095e-02, -6.829955984177921e-02, -7.064528320597485e-02, -7.020400450599369e-02, -7.020400450599369e-02, -4.675376895237651e-02, -4.767689895598348e-02, -8.768727096970404e-02, -3.148686624624744e-02, -3.729816150187710e-02, -3.729816150187709e-02, -1.726508876129210e-02, -2.073548260757017e-03, -9.206254299850600e-03, -6.886493182702048e-04, -1.111034558228732e-03, -1.111034558228723e-03, -3.785264623570590e-02, -3.780693058598979e-02, -3.784951169424098e-02, -3.780921223521861e-02, -3.783001768157367e-02, -3.783001768157367e-02, -5.488989614635116e-02, -5.315824524720963e-02, -5.413254471552462e-02, -5.247606540523529e-02, -5.425138225421848e-02, -5.425138225421848e-02, -4.084017856461630e-02, -2.712273894027619e-02, -4.619170957634351e-02, -3.055639902480214e-02, -3.930887702726212e-02, -3.930887702726212e-02, -2.239032980965157e-02, -5.543075324062910e-02, -2.071435778385782e-02, -3.053959993407574e-02, -2.339424760921033e-02, -2.339424760921009e-02, -4.678250023723085e-04, -6.324008345118207e-04, -5.953878033239235e-04, -1.457379030799797e-02, -6.547137191890036e-04, -6.547137191890037e-04, -2.621348643368771e-02, -2.873386776183238e-02, -2.791138784029893e-02, -2.717941983307132e-02, -2.755126289801635e-02, -2.755126289801635e-02, -2.470092845523895e-02, -3.890521667387387e-02, -3.661314435537220e-02, -3.325488862111257e-02, -3.515278128434674e-02, -3.515278128434673e-02, -2.711253078560838e-02, -4.851545970815359e-02, -5.143905183567701e-02, -4.878977341572367e-02, -5.004532101743965e-02, -5.004532101743966e-02, -4.560651146402679e-02, -1.167480983699433e-02, -1.155567886166057e-02, -4.272742838116572e-02, -2.015332146632716e-02, -2.015332146632717e-02, -1.878227262208487e-03, -1.310108825323601e-04, -4.526122395151636e-04, -2.245358529914196e-02, -6.226778833102072e-04, -6.226778833102110e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.467436152479284e-11, 8.467424819170280e-11, 8.466777731814530e-11, 8.466937102287783e-11, 8.466938746272383e-11, 8.466938746272383e-11, 1.382099790939891e-06, 1.382402313861785e-06, 1.389532735409217e-06, 1.379878454292833e-06, 1.384208571004568e-06, 1.384208571004568e-06, 1.340206042022332e-03, 1.334420624886356e-03, 1.172110937975783e-03, 9.909621605032125e-04, 1.051433378774364e-03, 1.051433378774364e-03, 5.334047485594393e-01, 5.447738858395560e-01, 8.560946994370089e-04, 3.479836958392113e-01, 3.782802201101572e-01, 3.782802201101584e-01, 6.462861095322930e+03, 3.645474287260578e+02, 3.629017623670955e+00, 2.998694857910363e+02, 4.295712119861943e+02, 4.295712119861845e+02, 1.029325641728736e-07, 1.032079118196752e-07, 1.029315727162668e-07, 1.031751110386875e-07, 1.030789507711698e-07, 1.030789507711698e-07, 8.253139086268096e-06, 7.605668700345804e-06, 7.816087534639975e-06, 7.225199255038444e-06, 8.095919419787980e-06, 8.095919419787980e-06, 6.235255734437137e-03, 6.700296996730918e-03, 1.033945611755379e-02, 1.489001183101984e-02, 5.848544632275521e-03, 5.848544632275521e-03, 5.611803522502261e-01, 4.451778552786539e-01, 6.174990252390156e-01, 6.248546438963838e-05, 2.442199239787169e-01, 2.442199239786934e-01, 3.102679451750026e+02, 2.138120529538368e+02, 1.542080273663774e+03, 1.364811384639804e+00, 5.022057253865614e+02, 5.022057253865615e+02, 5.737469961410846e-03, 5.246470508879241e-03, 5.408875984230586e-03, 5.551170290767454e-03, 5.479381165433520e-03, 5.479381165433520e-03, 7.485050131138499e-03, 6.203909595098454e-03, 6.261319813805109e-03, 6.556373672610225e-03, 6.440223848130648e-03, 6.440223848130648e-03, 6.036175967434530e-03, 1.563698510727430e-01, 1.024459105940436e-01, 5.530946922841008e-02, 7.413547421075284e-02, 7.413547421075281e-02, 1.427853490694730e-02, 9.314506555097246e+00, 1.854894420732433e+00, 7.636943267466061e-02, 1.435885190457908e+00, 1.435885190457909e+00, 3.527735562151022e+01, 4.429993436586478e+03, 3.578272103435332e+03, 2.755294978590225e+00, 7.701127867672036e+02, 7.701127867672112e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.123767975012233e-05, -1.123777898246767e-05, -1.123759601465241e-05, -1.123611350457465e-05, -1.123697927516374e-05, -1.123697927516374e-05, -4.980060382220394e-04, -4.982256622624234e-04, -5.040459895897505e-04, -5.024006242289290e-04, -5.023510175164085e-04, -5.023510175164085e-04, -6.065596769625136e-04, -6.238496856991012e-04, -8.694664825409753e-04, -2.341185357146620e-04, -4.160043564233230e-04, -4.160043564233230e-04, -3.837910659720423e-02, -4.087691413730720e-02, -3.912298628849176e-04, -6.628890940283794e-03, -1.190161737639343e-02, -1.190161737639333e-02, -2.211937273359710e-02, -1.241753551352631e-03, -1.121973609916365e-03, -8.629114553331552e-05, -3.840907205793597e-04, -3.840907205793469e-04, -2.053563318007627e-04, -2.060817229811395e-04, -2.053729603773851e-04, -2.060138438429355e-04, -2.057320382819339e-04, -2.057320382819339e-04, -8.112880056395506e-04, -7.659617120903191e-04, -7.590959443190512e-04, -7.165381342989934e-04, -8.112265842137957e-04, -8.112265842137957e-04, -1.540900146406590e-02, -1.967726098344915e-02, -1.781026273627259e-02, -2.396197299496583e-02, -1.520708387746289e-02, -1.520708387746289e-02, -3.326903383475277e-03, -3.279443099508091e-02, -2.588465188698285e-03, -3.425979302451378e-03, 9.512826084056035e-05, 9.512826084058381e-05, -3.618536993702566e-06, -1.559586629142559e-05, -1.597003395500997e-04, -1.400700825905369e-03, -3.677933062693962e-05, -3.677933062693988e-05, -1.602980469940462e-02, -1.435407887163644e-02, -1.491085671522885e-02, -1.539738434674489e-02, -1.515167854277893e-02, -1.515167854277893e-02, -1.861381813683565e-02, -9.829958343600075e-03, -1.140335762208244e-02, -1.357355791058750e-02, -1.249342472062615e-02, -1.249342472062615e-02, -1.929841115254655e-02, -2.278849644215547e-02, -2.526892132078478e-02, -2.790964041189254e-02, -2.681059666686492e-02, -2.681059666686490e-02, -1.710187037529855e-02, -4.303209435799193e-03, -1.099551471930223e-03, -3.512825440127044e-02, -4.815961179748599e-03, -4.815961179748603e-03, -3.298753533517313e-05, -2.718176869929314e-07, -2.897695363693000e-04, -1.023516781192189e-02, -7.696189840818863e-05, -7.696189840819031e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
