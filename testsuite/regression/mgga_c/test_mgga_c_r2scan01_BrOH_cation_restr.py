
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan01_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.298816375263860e-02, -9.298568721419950e-02, -9.297570311104295e-02, -9.301236146594666e-02, -9.299300910762222e-02, -9.299300910762222e-02, -1.246263199060775e-01, -1.246236313152654e-01, -1.245501011197378e-01, -1.245835690144320e-01, -1.245765931336972e-01, -2.344382324508712e-02, -8.151081688967630e-02, -1.903848934337702e-02, -1.848623083923402e-02, -1.873511186006935e-02, -1.867872079644435e-02, -1.867872079644435e-02, -1.394704026957986e-02, -1.414608825422232e-02, -9.350674579371476e-02, -1.053113682889921e-02, -1.197087882545875e-02, -1.197087882545875e-02, -3.752969608554565e-04, -4.043342295309950e-04, -3.006770894735077e-03, -1.690554397653761e-04, -2.423674805307686e-04, -2.423674805307686e-04, -2.638748628300914e-02, -2.639582654344772e-02, -2.638796582272888e-02, -5.515011405435179e-02, -2.639166675215895e-02, -2.639166675215895e-02, -1.064125319947992e-01, -1.066393028356633e-01, -1.063031527266575e-01, -1.064444918412377e-01, -1.066167229772850e-01, -2.245106115096360e-02, -2.194107103768985e-02, -2.307883720109014e-02, -2.103684193380526e-02, -2.186504758504402e-02, -2.216299935947394e-02, -5.717835537260256e-02, -3.485127931031878e-02, -1.259698489983484e-02, -3.326776006969985e-02, -2.439951112505812e-02, -9.243807626673815e-03, -9.243807626673813e-03, -2.393092053162897e-03, -1.612449521113995e-04, -1.433344975083344e-04, -2.589845160387997e-02, -2.738488192827941e-03, -1.655366233430323e-04, -2.382863708468445e-02, -2.356680477191464e-02, -2.837873736475650e-02, -2.373437886717115e-02, -2.369617165436425e-02, -2.369617165436425e-02, -2.371386260334273e-02, -2.106617976452839e-02, -2.187346278504973e-02, -2.264947272640659e-02, -2.225670021742472e-02, -4.614807106784603e-02, -2.296077862260221e-02, -5.321972045930101e-02, -1.625478537067641e-02, -5.703462481488839e-02, -1.772508998369475e-02, -1.772508998369475e-02, -6.328523590075506e-02, -2.872884982296584e-03, -3.922013656692814e-03, -1.945525937830211e-02, -3.018011994892934e-02, -6.580397726471757e-03, -5.420728841374571e-04, -2.472863204531331e-05, -8.288757437547117e-05, -6.270602045790454e-03, -1.550602435844342e-04, -1.550602435844342e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.749313070473283e-02, 3.749131506139326e-02, 3.748400286739284e-02, 3.751087133628729e-02, 3.749668985494031e-02, 3.749668985494031e-02, -1.181195626032949e-01, -1.180611206687779e-01, -1.164972459168370e-01, -1.171372303129283e-01, -1.170660795231001e-01, -4.605895069826232e-02, -6.624314911185129e-02, -4.507438749183371e-02, -4.554181274174653e-02, -4.531210155617425e-02, -4.536628451704050e-02, -4.536628451704050e-02, -3.694873655415518e-02, -3.686894036969426e-02, -8.926688246923120e-02, -3.841112283828381e-02, -3.760463343876592e-02, -3.760463343876590e-02, -1.116364854047431e-02, -1.183260558745198e-02, -3.875201238220665e-02, -5.848834745302468e-03, -7.902567215389369e-03, -7.902567215389369e-03, -3.782753801858720e-02, -3.778249767601334e-02, -3.782494745806769e-02, 2.842351351358287e-04, -3.780499123423263e-02, -3.780499123423263e-02, -1.156054996893979e-01, -1.179578963748332e-01, -1.119746112790852e-01, -1.160173540485926e-01, -1.178853881450329e-01, -4.600116918119433e-02, -3.750408857406474e-02, -3.407779291164782e-02, -3.924800135294598e-02, -3.720041641503557e-02, -3.693997008565601e-02, -9.543893751035348e-03, -4.125751458239686e-02, -3.903255087350035e-02, -3.958020844736300e-02, -4.094126139060646e-02, -3.780379488454528e-02, -3.780379488454529e-02, -3.092106456939255e-03, -5.610756083606063e-03, -5.273067112221255e-03, -3.142048694472796e-02, -3.531175961823871e-03, -5.854560215747499e-03, -2.750182188984542e-02, -2.942472847034961e-02, -2.190096133609304e-02, -2.823380957616104e-02, -2.851746667599473e-02, -2.851746667599473e-02, -2.769839894913716e-02, -3.781514035517249e-02, -3.573798154483701e-02, -3.307594123815294e-02, -3.452057642195202e-02, -6.687581559930517e-03, -3.543668014598018e-02, -5.407095439556281e-02, -3.944394808825456e-02, -6.376498204437288e-02, -3.884856861560471e-02, -3.884856861560471e-02, -6.029536820466266e-02, -3.824955056130271e-02, -4.095117972295174e-02, -3.645066450689596e-02, -3.610903527058664e-02, -3.881297895846107e-02, -1.454213617509674e-02, -1.097730416698543e-03, -3.258402913141125e-03, -3.873741316241531e-02, -5.577675429176989e-03, -5.577675429177260e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.378398129486377e-09, 4.378197303236545e-09, 4.377349871833333e-09, 4.380326987036812e-09, 4.378760595259691e-09, 4.378760595259691e-09, 1.328075288920710e-05, 1.328095651304560e-05, 1.328532274172657e-05, 1.327878906674572e-05, 1.328498208360856e-05, 3.340506397854058e-07, 1.013500249402773e-02, 6.602933584057941e-04, 6.783164036557481e-04, 6.837670301251767e-04, 6.820737187388105e-04, 6.820737187388105e-04, 3.199518859779686e-01, 3.083283433973212e-01, 5.984964341593497e-03, 6.507638447626969e-01, 4.867072885170507e-01, 4.867072885170498e-01, 4.112479219339781e+03, 3.812700913053240e+03, 4.841058103933233e+01, 9.653215333742122e+03, 7.733942841670022e+03, 7.733942841670022e+03, 1.020701116622108e-07, 1.023507248842898e-07, 1.020869351552662e-07, 1.046431874050405e-06, 1.022101175215266e-07, 1.022101175215266e-07, 1.281453324324140e-04, 1.241942179679550e-04, 1.315259707474428e-04, 1.275160852784965e-04, 1.245342725091398e-04, 4.967035765209008e-06, 2.644598422879234e-03, 2.352201584269681e-03, 3.187020322083547e-03, 3.204499474913161e-03, 2.576881547367838e-03, 1.710775738702539e-02, 1.899725564377853e+01, 2.322655075379091e-01, 2.501347908974003e+01, 9.357878411734710e-06, 1.450210072992135e+00, 1.450210072992135e+00, -7.749523295528520e+06, 9.321666814462509e+03, 5.587429457241243e+04, 9.978284845153378e+01, -3.405471557120437e+06, 2.193947169780742e+04, 4.937478966336064e-03, 4.563078482697092e-03, 8.434330381975450e-03, 4.797041412391793e-03, 4.741829281662735e-03, 4.741829281662735e-03, 5.517843442563999e-03, 5.467697442445752e-03, 5.283536721121794e-03, 5.248346509635269e-03, 5.245553129759012e-03, 2.681186822335682e-02, 1.742355542929866e-03, 7.591765372645540e-01, 5.405592117447643e-02, 1.058693378750634e-01, 3.531428951473006e-02, 3.531428951473006e-02, 4.131580984576604e-02, 5.511290693814248e+01, 2.117328614515359e+01, 3.027622605494274e-02, 4.300253106768383e+01, 5.752034816548643e+00, 1.309641404037164e+03, 1.067806047460345e+05, 5.774371679160353e+04, 7.324175710497196e+00, 3.152199836649920e+04, 3.152199836650092e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.935798095753808e-05, -7.935737300128208e-05, -7.935463401939113e-05, -7.936366209351393e-05, -7.935893909784828e-05, -7.935893909784828e-05, -1.318390184405670e-04, -1.322899837456370e-04, -1.444081443940536e-04, -1.394356243696986e-04, -1.399895507387233e-04, -1.877609570763742e-04, -2.458956879711426e-03, -2.629083197592379e-03, -2.495299792288462e-03, -2.576251919971435e-03, -2.556855303599611e-03, -2.556855303599611e-03, -2.229134660661508e-02, -2.242437878533363e-02, -6.551432575630721e-04, -2.086786292287801e-02, -2.157181316265083e-02, -2.157181316265078e-02, -1.417623801724522e-02, -1.532277733369325e-02, -3.221522962617580e-02, -6.418650170998332e-03, -1.019814160602023e-02, -1.019814160602023e-02, -2.040977428281988e-04, -2.048311620804545e-04, -2.041403959513451e-04, -8.477261787154983e-04, -2.044643083371723e-04, -2.044643083371723e-04, -2.715196129223263e-05, 1.405604601385954e-05, -9.298790737263912e-05, -1.989407893151759e-05, 1.306997030728334e-05, -5.052643535293956e-04, -7.201466715523094e-03, -8.371599092981583e-03, -6.807768994107245e-03, -7.764496104842697e-03, -7.385086116243060e-03, -2.531959421707116e-02, -3.953147479753032e-04, -1.663480762751492e-02, -3.283827318341962e-04, -9.065566773992394e-04, -2.559388258450983e-02, -2.559388258450984e-02, -2.390897089001701e-08, -5.791005056917678e-03, -1.552552807727202e-02, -1.359175593007806e-04, -1.465206422832930e-07, -1.065499597151325e-02, -1.429478442935834e-02, -1.287747059858371e-02, -2.122963701422830e-02, -1.376171886318908e-02, -1.355289298036649e-02, -1.355289298036650e-02, -1.468250648416928e-02, -8.732794290103468e-03, -9.791613746936795e-03, -1.124514411709213e-02, -1.043879233644420e-02, -3.562794622160752e-02, -7.112083398328700e-03, -4.329032978220237e-03, -1.307385486124616e-02, -8.987511677050786e-04, -1.288456563278483e-02, -1.288456563278483e-02, -5.365155784787000e-03, -3.218567663085211e-02, -3.109827309117354e-02, -1.511502191256740e-02, -3.661217099299455e-04, -3.249179535348969e-02, -1.267675078397295e-02, -1.269200890430634e-03, -6.342478335960090e-03, -3.438410567801124e-02, -1.213010326799868e-02, -1.213010326799931e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
