
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_hltapw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.624613448533322e-01, -1.624613366471195e-01, -1.624613619020285e-01, -1.624614865376758e-01, -1.624613401168969e-01, -1.624613401168969e-01, -1.118534360674149e-01, -1.118528370399680e-01, -1.118358272082049e-01, -1.118447003627362e-01, -1.118534057295302e-01, -1.118534057295302e-01, -6.968680870702662e-02, -6.967565496389078e-02, -6.937547266785771e-02, -6.940773396368148e-02, -6.968249172990103e-02, -6.968249172990103e-02, -4.138771896120897e-02, -4.155155386622138e-02, -7.520565527935208e-02, -3.759039744979289e-02, -4.143850120142548e-02, -4.143850120142548e-02, -1.005341544696433e-02, -1.033717843452999e-02, -2.282472864414027e-02, -6.654995992268357e-03, -1.025597404140135e-02, -1.025597404140135e-02, -1.192717922409941e-01, -1.192542932360247e-01, -1.192698357498154e-01, -1.192562426550130e-01, -1.192630638117722e-01, -1.192630638117722e-01, -9.629992582598321e-02, -9.638228093832685e-02, -9.627049804652008e-02, -9.633342547703307e-02, -9.639229984792834e-02, -9.639229984792834e-02, -6.338055552119967e-02, -6.387383388853721e-02, -6.273999185122407e-02, -6.277042528889670e-02, -6.381519589335079e-02, -6.381519589335079e-02, -3.316404879167337e-02, -4.257569921909421e-02, -3.284753595825255e-02, -9.337693371038758e-02, -3.483906077786781e-02, -3.483906077786781e-02, -6.395918125388698e-03, -7.014056915682756e-03, -5.519611046398535e-03, -2.692513080318895e-02, -6.557962562920647e-03, -6.557962562920647e-03, -5.845822221903327e-02, -5.991553211879603e-02, -5.950467443128100e-02, -5.911576243626521e-02, -5.931990415616413e-02, -5.931990415616413e-02, -5.840569410190526e-02, -6.019570387815244e-02, -6.033602882467828e-02, -6.018483702970006e-02, -6.030905189498130e-02, -6.030905189498130e-02, -6.548136892567330e-02, -4.634506376987984e-02, -4.921294116647616e-02, -5.335153437711004e-02, -5.116138822751867e-02, -5.116138822751867e-02, -5.854002782984433e-02, -2.203737484130781e-02, -2.554638018102018e-02, -5.162826751594548e-02, -2.990488479286427e-02, -2.990488479286427e-02, -1.142836244713277e-02, -2.960594337385427e-03, -4.446755161465898e-03, -2.914706148452224e-02, -5.828047201740303e-03, -5.828047201740310e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_hltapw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.675238118767659e-01, -1.675238036454041e-01, -1.675238289777103e-01, -1.675239539953196e-01, -1.675238071258152e-01, -1.675238071258152e-01, -1.166166961407897e-01, -1.166160911485005e-01, -1.165989119079659e-01, -1.166078734422051e-01, -1.166166655008160e-01, -1.166166655008160e-01, -7.378062478496136e-02, -7.376921226249161e-02, -7.346204590175676e-02, -7.349505959695897e-02, -7.377620765528087e-02, -7.377620765528087e-02, -4.462731268405956e-02, -4.479753704248835e-02, -7.942130211599385e-02, -4.067500353818877e-02, -4.468007786613598e-02, -4.468007786613598e-02, -1.130237936279372e-02, -1.161495620099790e-02, -2.512897919684752e-02, -7.536001048500124e-03, -1.152553476807928e-02, -1.152553476807928e-02, -1.241031990887368e-01, -1.240855521757862e-01, -1.241012260634527e-01, -1.240875180748395e-01, -1.240943968908751e-01, -1.240943968908751e-01, -1.008792982982914e-01, -1.009627944268896e-01, -1.008494623308301e-01, -1.009132623156661e-01, -1.009729520143614e-01, -1.009729520143614e-01, -6.731955405075001e-02, -6.782557298345902e-02, -6.666228062983955e-02, -6.669351219748967e-02, -6.776542622663137e-02, -6.776542622663137e-02, -3.604867866933213e-02, -4.586110967124626e-02, -3.571694238583406e-02, -9.791453072318523e-02, -3.780210116388030e-02, -3.780210116388030e-02, -7.247031211801560e-03, -7.936035814979016e-03, -6.267517318354325e-03, -2.948218073735942e-02, -7.427804519928275e-03, -7.427804519928276e-03, -6.226388813066987e-02, -6.376187188990771e-02, -6.333965145849151e-02, -6.293990843327164e-02, -6.314974456572431e-02, -6.314974456572431e-02, -6.220987455548545e-02, -6.404974560011684e-02, -6.419391398352814e-02, -6.403858072130882e-02, -6.416619889748783e-02, -6.416619889748783e-02, -6.947387074734260e-02, -4.976850278483629e-02, -5.273469102978789e-02, -5.700619190491345e-02, -5.474696268820502e-02, -5.474696268820502e-02, -6.234800443727359e-02, -2.428903531153562e-02, -2.802216838430925e-02, -5.522879898008527e-02, -3.262599490163615e-02, -3.262599490163615e-02, -1.281436800268166e-02, -3.386609340637994e-03, -5.063650983985393e-03, -3.182785818624459e-02, -6.612655955268990e-03, -6.612655955268994e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_hltapw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_hltapw_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_hltapw_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.968177134380140e-06, -2.968242777172255e-06, -2.968517743535819e-06, -2.967451549948208e-06, -2.968211795872366e-06, -2.968211795872366e-06, -3.585962378612439e-05, -3.586769803698788e-05, -3.610907337921341e-05, -3.600979418426256e-05, -3.586153394253584e-05, -3.586153394253584e-05, -3.826795130953072e-04, -3.812515792278337e-04, -3.465861520147610e-04, -3.642704030119913e-04, -3.821966406408906e-04, -3.821966406408906e-04, -3.419717856733410e-03, -3.501324482297824e-03, -1.833825642497750e-04, -1.838617800509767e-03, -3.441613903534077e-03, -3.441613903534077e-03, -1.465947615637933e-03, -1.494586992662166e-03, -1.648587534312714e-03, -6.133648811446097e-04, -1.518698287955208e-03, -1.518698287955207e-03, -6.959877631734146e-05, -7.011773045629931e-05, -6.965598333776526e-05, -7.005917120732671e-05, -6.985808849800955e-05, -6.985808849800955e-05, -8.793769501639580e-05, -9.029451552815584e-05, -8.687164477005552e-05, -8.874050066392325e-05, -9.098224755317851e-05, -9.098224755317851e-05, -1.663126789840124e-03, -2.625839660797894e-03, -1.428245078742397e-03, -1.975331729354736e-03, -1.876713443918864e-03, -1.876713443918864e-03, -1.727768619285197e-03, -2.001377159508072e-03, -1.862082334437587e-03, -2.172940748783492e-04, -2.183561349062867e-03, -2.183561349062867e-03, -7.317517739281045e-04, -7.212634533988957e-04, -1.160050026015097e-03, -1.569352270354573e-03, -7.552912616430341e-04, -7.552912616430337e-04, -1.717672977289503e-02, -8.815790028678551e-03, -1.066808415119721e-02, -1.274998882041341e-02, -1.161373580883614e-02, -1.161373580883614e-02, -1.353410058723041e-02, -2.017718670067191e-03, -2.693825341689372e-03, -3.917791334156344e-03, -3.177553629181154e-03, -3.177553629181155e-03, -1.973962066648073e-03, -2.007629946642818e-03, -2.064370518498760e-03, -2.236514112887905e-03, -2.252154721363996e-03, -2.252154721363997e-03, -1.794174167438427e-03, -1.551733652934080e-03, -1.621910929038648e-03, -3.088855015707951e-03, -2.131290346513901e-03, -2.131290346513902e-03, -1.016163910715957e-03, -3.502387399535525e-04, -7.112262007009054e-04, -2.299909683697466e-03, -8.076746295146830e-04, -8.076746295146793e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
