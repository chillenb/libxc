
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rmggac_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.715360816144490e-02, -2.715360966392478e-02, -2.715279979263226e-02, -2.715274869520377e-02, -2.715289229906857e-02, -2.715289229906857e-02, -5.095836282699365e-02, -5.096097945524732e-02, -5.101542262246601e-02, -5.085497595311104e-02, -5.093014878041992e-02, -5.093014878041992e-02, -3.772731984094981e-02, -3.758184027988880e-02, -3.409979624079618e-02, -3.419797915014355e-02, -3.418007391900224e-02, -3.418007391900224e-02, -1.438922067666653e-02, -1.479143897160723e-02, -4.004947038722911e-02, -1.247771147178556e-02, -9.851528187631015e-03, -9.851528187631013e-03, -3.744894467165386e-04, -4.038373965789445e-04, -3.184853089046662e-03, -1.865990582769912e-04, -1.871436774591523e-04, -1.871436774591526e-04, -2.639460693886978e-02, -2.640285994736889e-02, -2.639491758102554e-02, -2.640220580231091e-02, -2.639882814337852e-02, -2.639882814337852e-02, -2.568571443513673e-02, -2.506546531700025e-02, -2.472055510459479e-02, -2.419947504984568e-02, -2.582476781950426e-02, -2.582476781950426e-02, -3.796525344352001e-02, -5.279005417246114e-02, -4.003141757724496e-02, -5.206374367336432e-02, -3.853142903581424e-02, -3.853142903581423e-02, -8.439321146789773e-03, -1.310306405569097e-02, -7.925573500983928e-03, -7.270396653039198e-02, -9.949680170626522e-03, -9.949680170626521e-03, -1.626967612617505e-04, -2.078783086541218e-04, -1.623583420957772e-04, -5.582846244117486e-03, -1.920179276365408e-04, -1.920179276365396e-04, -2.782240051525477e-02, -2.598238734794360e-02, -2.652557195392818e-02, -2.705449811621041e-02, -2.678333620191913e-02, -2.678333620191913e-02, -3.772842311041909e-02, -2.145908382273899e-02, -2.306050739718500e-02, -2.604514028967856e-02, -2.450940438585947e-02, -2.450940438585947e-02, -5.449948983130355e-02, -1.488997352220925e-02, -1.785732223731849e-02, -2.887208858358208e-02, -2.184142691026534e-02, -2.184142691026534e-02, -2.767685969337378e-02, -2.936299140859422e-03, -4.240633162604056e-03, -3.091058184512804e-02, -7.157495015095073e-03, -7.157495015095077e-03, -6.703166008258321e-04, -4.523252614762004e-05, -8.597946085691967e-05, -6.554238380823051e-03, -1.708057326914212e-04, -1.708057326914217e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rmggac_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.180148383344131e-02, -5.180159265221179e-02, -5.180039452896545e-02, -5.180057802597027e-02, -5.178040265512857e-02, -5.178019978732068e-02, -5.179499546942377e-02, -5.179563915571037e-02, -5.178913190785191e-02, -5.179020893949094e-02, -5.178913190785191e-02, -5.179020893949094e-02, -9.841680471651185e-02, -9.841840052756497e-02, -9.842108697979493e-02, -9.842290932250428e-02, -9.852247430104122e-02, -9.852006364412270e-02, -9.832513844369312e-02, -9.832349961296812e-02, -9.843253535912493e-02, -9.838879549951392e-02, -9.843253535912493e-02, -9.838879549951392e-02, -6.969891961533187e-02, -6.934215616913028e-02, -6.953843762471389e-02, -6.910175650288637e-02, -6.402479233722612e-02, -6.459415576207514e-02, -6.479907269075350e-02, -6.462018001645618e-02, -6.210476045516022e-02, -6.751843535292767e-02, -6.210476045516022e-02, -6.751843535292767e-02, -3.334883695039414e-02, -3.164649283061888e-02, -3.623443323011598e-02, -3.426152351483032e-02, -7.497605299211708e-02, -7.183220535472970e-02, -2.874193813953476e-02, -2.826770082469496e-02, -2.366926364097643e-02, -4.965173689431689e-02, -2.366926364097642e-02, -4.965173689431686e-02, -7.828473382296145e-04, -7.109716732048818e-04, -8.731416887978043e-04, -7.852835477926426e-04, -7.806866444809408e-03, -7.288289776677537e-03, -5.520889269324519e-04, -5.609953375189441e-04, -5.221378056884624e-04, -9.768663345168852e-04, -5.221378056884655e-04, -9.768663345168878e-04, -2.955054544082832e-02, -2.957046779263006e-02, -2.953575314055224e-02, -2.955620747205041e-02, -2.954029568478879e-02, -2.956058905130491e-02, -2.952808881579440e-02, -2.954808242816639e-02, -2.954787222793120e-02, -2.956816295103694e-02, -2.954787222793120e-02, -2.956816295103694e-02, -7.604241145242724e-02, -7.604619562552066e-02, -7.254297444363680e-02, -7.256321755585517e-02, -7.123001256591199e-02, -7.110312999973230e-02, -6.679811028797084e-02, -6.666666840210983e-02, -7.640075059755234e-02, -7.673143542871157e-02, -7.640075059755234e-02, -7.673143542871157e-02, -7.487030883189111e-02, -7.511859392277587e-02, -6.931405110968199e-02, -6.926086965084771e-02, -7.347508696658843e-02, -7.002381274504947e-02, -7.739620156924343e-02, -7.363037430297135e-02, -7.273930834040254e-02, -7.759488673303705e-02, -7.273930834040254e-02, -7.759488673303705e-02, -1.965809344455603e-02, -1.942852798560643e-02, -3.042220068653891e-02, -3.022128475473828e-02, -1.883902474816627e-02, -1.765508229538441e-02, -1.088794098266146e-01, -1.089497662954130e-01, -2.479453499800980e-02, -2.308390549950627e-02, -2.479453499800979e-02, -2.308390549950626e-02, -3.558158680601223e-04, -3.425863761460928e-04, -5.270301807923801e-04, -5.196544482010705e-04, -5.115888206622635e-04, -4.859339445784516e-04, -1.285975194413101e-02, -1.276188474063253e-02, -6.377618754677748e-04, -4.832716697428798e-04, -6.377618754677696e-04, -4.832716697428748e-04, -2.989188201075680e-02, -2.958029437086834e-02, -4.253203729657056e-02, -4.222850007537846e-02, -3.953671785101854e-02, -3.922980380488399e-02, -3.599094814038897e-02, -3.568362871331767e-02, -3.790584085443813e-02, -3.759877269435230e-02, -3.790584085443814e-02, -3.759877269435230e-02, -2.067317388726109e-02, -2.036317919689781e-02, -4.157400602931262e-02, -4.128403061150243e-02, -5.304923236188851e-02, -5.273556390356917e-02, -6.140458192096156e-02, -6.113568220947169e-02, -5.988446684583391e-02, -5.961135802941282e-02, -5.988446684583395e-02, -5.961135802941286e-02, -7.479386257500870e-02, -7.459810502941691e-02, -3.161326231622009e-02, -3.134506145224322e-02, -4.708828734428842e-02, -4.655722642539848e-02, -6.119215060199607e-02, -6.078662074145620e-02, -5.730447071099992e-02, -5.732604484816711e-02, -5.730447071099991e-02, -5.732604484816712e-02, -7.094256381346339e-02, -7.043022406075210e-02, -6.465334567397409e-03, -6.403072575044461e-03, -1.012452149074911e-02, -9.715361929491833e-03, -6.295365719726219e-02, -6.179011112104391e-02, -1.741094575324110e-02, -1.626855752630326e-02, -1.741094575324112e-02, -1.626855752630327e-02, -1.588619616306148e-03, -1.529899503269543e-03, -8.964443911189365e-05, -8.944726809191285e-05, -2.558472102507702e-04, -2.396695720968346e-04, -1.524280409478407e-02, -1.491831711786181e-02, -6.102960144571725e-04, -4.778323661722343e-04, -6.102960144571826e-04, -4.778323661722440e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.546116516823152e-10, 3.092233033646305e-10, 1.546116516823152e-10, 1.546072365941544e-10, 3.092144731883088e-10, 1.546072365941544e-10, 1.544747704083683e-10, 3.089495408167367e-10, 1.544747704083683e-10, 1.545363795970579e-10, 3.090727591941159e-10, 1.545363795970579e-10, 1.545202507494960e-10, 3.090405014989920e-10, 1.545202507494960e-10, 1.545202507494960e-10, 3.090405014989920e-10, 1.545202507494960e-10, 9.358071645931261e-07, 1.871614329186252e-06, 9.358071645931261e-07, 9.361157365621878e-07, 1.872231473124376e-06, 9.361157365621878e-07, 9.439506118936745e-07, 1.887901223787349e-06, 9.439506118936745e-07, 9.378038436577193e-07, 1.875607687315439e-06, 9.378038436577193e-07, 9.399982985175521e-07, 1.879996597035104e-06, 9.399982985175521e-07, 9.399982985175521e-07, 1.879996597035104e-06, 9.399982985175521e-07, 1.113373450490661e-03, 2.226746900981321e-03, 1.113373450490661e-03, 1.105099654881239e-03, 2.210199309762478e-03, 1.105099654881239e-03, 9.207767935671034e-04, 1.841553587134207e-03, 9.207767935671034e-04, 9.275571050132176e-04, 1.855114210026435e-03, 9.275571050132176e-04, 9.291902483501839e-04, 1.858380496700368e-03, 9.291902483501839e-04, 9.291902483501839e-04, 1.858380496700368e-03, 9.291902483501839e-04, 2.408140665987489e-01, 4.816281331974978e-01, 2.408140665987489e-01, 2.828420675745466e-01, 5.656841351490931e-01, 2.828420675745466e-01, 5.756144767778588e-04, 1.151228953555718e-03, 5.756144767778588e-04, 3.365969079446984e-01, 6.731938158893968e-01, 3.365969079446984e-01, 3.587750477473373e-01, 7.175500954946746e-01, 3.587750477473373e-01, 3.587750477473370e-01, 7.175500954946741e-01, 3.587750477473370e-01, 4.163614224825769e+01, 8.327228449651538e+01, 4.163614224825769e+01, 4.773630795432818e+01, 9.547261590865637e+01, 4.773630795432818e+01, 3.799023103581892e+00, 7.598046207163783e+00, 3.799023103581892e+00, 4.617862770908669e+02, 9.235725541817338e+02, 4.617862770908669e+02, 3.022412549351782e+02, 6.044825098703564e+02, 3.022412549351782e+02, 3.022412549351815e+02, 6.044825098703629e+02, 3.022412549351815e+02, 1.358960748341176e-08, 2.717921496682352e-08, 1.358960748341176e-08, 1.356320592574216e-08, 2.712641185148432e-08, 1.356320592574216e-08, 1.348596222389771e-08, 2.697192444779542e-08, 1.348596222389771e-08, 1.346711090632042e-08, 2.693422181264084e-08, 1.346711090632042e-08, 1.362959725501176e-08, 2.725919451002352e-08, 1.362959725501176e-08, 1.362959725501176e-08, 2.725919451002352e-08, 1.362959725501176e-08, 1.351444854337038e-05, 2.702889708674077e-05, 1.351444854337038e-05, 1.264120582983335e-05, 2.528241165966671e-05, 1.264120582983335e-05, 1.209300280066318e-05, 2.418600560132636e-05, 1.209300280066318e-05, 1.092104435541847e-05, 2.184208871083693e-05, 1.092104435541847e-05, 1.376588125146352e-05, 2.753176250292704e-05, 1.376588125146352e-05, 1.376588125146352e-05, 2.753176250292704e-05, 1.376588125146352e-05, 1.035448316696241e-02, 2.070896633392481e-02, 1.035448316696241e-02, 1.102655463141541e-02, 2.205310926283082e-02, 1.102655463141541e-02, 7.615356012133579e-03, 1.523071202426716e-02, 7.615356012133579e-03, 1.027758055852900e-02, 2.055516111705800e-02, 1.027758055852900e-02, 1.098793707519813e-02, 2.197587415039625e-02, 1.098793707519813e-02, 1.098793707519813e-02, 2.197587415039626e-02, 1.098793707519813e-02, 5.701485355502197e-01, 1.140297071100439e+00, 5.701485355502197e-01, 1.355894186001617e-01, 2.711788372003233e-01, 1.355894186001617e-01, 6.697052738735201e-01, 1.339410547747040e+00, 6.697052738735201e-01, 5.572267043812536e-05, 1.114453408762507e-04, 5.572267043812536e-05, 5.964754130934335e-01, 1.192950826186867e+00, 5.964754130934335e-01, 5.964754130934318e-01, 1.192950826186864e+00, 5.964754130934318e-01, 3.499521502838055e+02, 6.999043005676109e+02, 3.499521502838055e+02, 3.835867421883757e+02, 7.671734843767514e+02, 3.835867421883757e+02, 2.776975549648669e+03, 5.553951099297338e+03, 2.776975549648669e+03, 1.663589523353354e+00, 3.327179046706707e+00, 1.663589523353354e+00, 9.853300595075832e+02, 1.970660119015166e+03, 9.853300595075832e+02, 9.853300595075640e+02, 1.970660119015128e+03, 9.853300595075640e+02, 4.304060421629394e-02, 8.608120843258787e-02, 4.304060421629394e-02, 2.838455438876007e-02, 5.676910877752014e-02, 2.838455438876007e-02, 3.273932775472573e-02, 6.547865550945146e-02, 3.273932775472573e-02, 3.696144358679210e-02, 7.392288717358420e-02, 3.696144358679210e-02, 3.478929523253310e-02, 6.957859046506620e-02, 3.478929523253310e-02, 3.478929523253311e-02, 6.957859046506622e-02, 3.478929523253311e-02, 6.570901830361855e-02, 1.314180366072371e-01, 6.570901830361855e-02, 7.319214129165121e-03, 1.463842825833024e-02, 7.319214129165121e-03, 1.517546358719774e-02, 3.035092717439547e-02, 1.517546358719774e-02, 2.934139957542010e-02, 5.868279915084020e-02, 2.934139957542010e-02, 2.225576484428127e-02, 4.451152968856254e-02, 2.225576484428127e-02, 2.225576484428130e-02, 4.451152968856260e-02, 2.225576484428130e-02, 7.093311724797214e-03, 1.418662344959443e-02, 7.093311724797214e-03, 5.927358711675301e-02, 1.185471742335060e-01, 5.927358711675301e-02, 7.812981890318320e-02, 1.562596378063664e-01, 7.812981890318320e-02, 4.649707980211877e-02, 9.299415960423754e-02, 4.649707980211877e-02, 7.634523941367868e-02, 1.526904788273574e-01, 7.634523941367868e-02, 7.634523941367871e-02, 1.526904788273574e-01, 7.634523941367871e-02, 2.412579971778435e-02, 4.825159943556870e-02, 2.412579971778435e-02, 2.907128697333847e+00, 5.814257394667694e+00, 2.907128697333847e+00, 2.183724825366325e+00, 4.367449650732650e+00, 2.183724825366325e+00, 8.009827274047879e-02, 1.601965454809576e-01, 8.009827274047879e-02, 1.290470921848048e+00, 2.580941843696097e+00, 1.290470921848048e+00, 1.290470921848048e+00, 2.580941843696096e+00, 1.290470921848048e+00, 5.488800188095906e+01, 1.097760037619181e+02, 5.488800188095906e+01, 3.077114070557922e+03, 6.154228141115845e+03, 3.077114070557922e+03, 1.942426849052313e+03, 3.884853698104625e+03, 1.942426849052313e+03, 1.323005942549489e+00, 2.646011885098978e+00, 1.323005942549489e+00, 1.581349637306975e+03, 3.162699274613950e+03, 1.581349637306975e+03, 1.581349637307049e+03, 3.162699274614098e+03, 1.581349637307049e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.140257148509251e-05, -2.140257148509251e-05, -2.140214728482043e-05, -2.140214728482044e-05, -2.138429634984072e-05, -2.138429634984071e-05, -2.139003114613978e-05, -2.139003114613978e-05, -2.138931187137026e-05, -2.138931187137026e-05, -2.138931187137026e-05, -2.138931187137026e-05, -8.929074554986100e-05, -8.929074554986199e-05, -8.936128076660082e-05, -8.936128076660167e-05, -9.141456924514706e-05, -9.141456924514642e-05, -9.225264578481359e-05, -9.225264578481330e-05, -9.146809147828618e-05, -9.146809147828542e-05, -9.146809147828618e-05, -9.146809147828542e-05, -1.414319971246956e-04, -1.414319971246948e-04, -1.428358033248408e-04, -1.428358033248504e-04, -1.920820595028822e-04, -1.920820595028773e-04, -2.738210015246307e-04, -2.738210015246273e-04, -2.411527349459441e-04, -2.411527349459354e-04, -2.411527349459441e-04, -2.411527349459354e-04, -1.433800829293076e-02, -1.433800829293074e-02, -1.806163601687916e-02, -1.806163601687918e-02, 9.885687809351630e-06, 9.885687809350471e-06, -6.286312335572674e-03, -6.286312335572680e-03, -1.242595805426907e-02, -1.242595805426904e-02, -1.242595805426906e-02, -1.242595805426905e-02, -1.561951270376180e-05, -1.561951270376182e-05, -4.969342207942564e-05, -4.969342207942567e-05, -1.506649188377360e-03, -1.506649188377360e-03, -2.213764346850577e-04, -2.213764346850580e-04, -3.103747935278268e-04, -3.103747935278271e-04, -3.103747935278303e-04, -3.103747935278304e-04, -5.841340792093933e-06, -5.841340792093932e-06, -5.778138533623795e-06, -5.778138533623795e-06, -5.610526372007333e-06, -5.610526372007334e-06, -5.564537974475091e-06, -5.564537974475091e-06, -5.928081307358555e-06, -5.928081307358554e-06, -5.928081307358555e-06, -5.928081307358554e-06, -1.285437999185313e-03, -1.285437999185315e-03, -1.255851545890478e-03, -1.255851545890478e-03, -1.151455656463653e-03, -1.151455656463652e-03, -1.076845659718789e-03, -1.076845659718790e-03, -1.340487548273392e-03, -1.340487548273391e-03, -1.340487548273392e-03, -1.340487548273391e-03, -1.802041347160139e-02, -1.802041347160139e-02, -1.504654662642340e-02, -1.504654662642343e-02, -5.166108237131402e-03, -5.166108237131398e-03, -2.170200174739534e-03, -2.170200174739532e-03, -2.066609231835215e-02, -2.066609231835211e-02, -2.066609231835217e-02, -2.066609231835216e-02, -3.743471651447151e-03, -3.743471651447162e-03, -7.683681581461837e-03, -7.683681581461843e-03, -3.381038370703231e-03, -3.381038370703234e-03, -3.313574216066787e-04, -3.313574216066782e-04, -7.293103947484181e-03, -7.293103947484168e-03, -7.293103947484190e-03, -7.293103947484170e-03, -3.011406012676914e-05, -3.011406012676937e-05, -1.284598481540694e-04, -1.284598481540691e-04, -5.546204580992653e-04, -5.546204580992651e-04, -2.539925765708106e-03, -2.539925765708110e-03, -2.909290090765249e-04, -2.909290090765239e-04, -2.909290090765164e-04, -2.909290090765174e-04, -1.244348824390107e-01, -1.244348824390108e-01, -8.166092123477209e-02, -8.166092123477209e-02, -9.444379632572364e-02, -9.444379632572374e-02, -1.067758867549211e-01, -1.067758867549211e-01, -1.004335133467451e-01, -1.004335133467451e-01, -1.004335133467452e-01, -1.004335133467451e-01, -1.540595810453021e-01, -1.540595810453021e-01, -1.163270211565764e-02, -1.163270211565763e-02, -2.896817688031477e-02, -2.896817688031477e-02, -6.303186003272608e-02, -6.303186003272608e-02, -4.509671887820434e-02, -4.509671887820434e-02, -4.509671887820439e-02, -4.509671887820440e-02, -7.493089499223482e-03, -7.493089499223415e-03, -6.756695072875036e-03, -6.756695072875032e-03, -1.707794452439390e-02, -1.707794452439388e-02, -1.525521845548942e-02, -1.525521845548945e-02, -2.360028701745141e-02, -2.360028701745141e-02, -2.360028701745137e-02, -2.360028701745136e-02, -2.491672987628060e-02, -2.491672987628063e-02, -8.976529432075709e-04, -8.976529432075737e-04, -1.850104502212097e-03, -1.850104502212092e-03, -2.415494915167736e-02, -2.415494915167736e-02, -4.440042921643185e-03, -4.440042921643197e-03, -4.440042921643208e-03, -4.440042921643202e-03, -2.503503459217221e-04, -2.503503459217228e-04, -5.029590110343804e-07, -5.029590110343900e-07, -1.576496046020337e-04, -1.576496046020336e-04, -3.879512914501641e-03, -3.879512914501647e-03, -4.197876774167023e-04, -4.197876774167026e-04, -4.197876774167244e-04, -4.197876774167242e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
