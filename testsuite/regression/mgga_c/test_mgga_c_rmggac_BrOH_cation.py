
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rmggac_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.624483484623933e-01, -1.624481803819963e-01, -1.624475598828380e-01, -8.730771092540708e-02, -6.277633795631966e-02, -2.649775655996873e-02, -4.802848435300537e-02, -2.343143706320580e-02, -2.345083350707425e-02, -2.344306414232943e-02, -2.344382616531860e-02, -4.818089420678743e-02, -6.667879468145538e-02, -4.146759824204108e-02, -1.848498214513021e-02, -3.237662699611719e-02, -6.591992672030200e-02, -1.857800040451340e-02, -2.116113101397926e-02, -2.598387235751991e-02, -2.909489029206632e-02, -1.053053459486161e-02, -7.866760920922682e-03, -7.807883339063161e-03, -5.594372402450325e-04, -5.660484744266178e-04, -3.939506532211771e-03, -2.638042144997621e-04, -1.766374978575592e-04, -1.766374978575592e-04, -5.941151542282399e-02, -2.639582446954086e-02, -2.638796376854127e-02, -2.639532136557082e-02, -8.263922887220884e-02, -5.934341544998745e-02, -4.373393471298419e-02, -4.427904796549493e-02, -2.222352009125081e-02, -2.234323884412147e-02, -5.654672529422707e-02, -4.424643470787367e-02, -4.258025647862804e-02, -2.307884625367655e-02, -2.100536023378096e-02, -2.183669371425680e-02, -4.075475639576322e-02, -2.208778459462848e-02, -7.534670137915356e-03, -1.889048651265745e-02, -9.844419636085447e-03, -2.439950346187916e-02, -1.321680709704676e-02, -1.321680709704676e-02, -1.706825902322238e-04, -1.611527681243896e-04, -2.276719107119144e-04, -6.898274988013303e-03, -2.370117134765855e-04, -2.370117134765897e-04, -2.382822502635446e-02, -2.356638457348862e-02, -5.221431687277124e-02, -3.196066999301071e-02, -5.053412914880764e-02, -3.308105054945543e-02, -3.009371208666172e-02, -4.817733008013048e-02, -4.258399860742067e-02, -2.264911859643926e-02, -2.225631465678696e-02, -4.332849109755352e-02, -5.571173147233423e-02, -2.285924763758511e-02, -2.634174013596190e-02, -3.315229792460492e-02, -3.019919065664927e-02, -3.014651964224758e-02, -2.034131165253308e-02, -1.423020883724325e-02, -3.915024224748890e-03, -3.508348751041827e-02, -6.554447340043177e-03, -6.554447340043177e-03, -5.004968741493748e-03, -2.472838391464538e-05, -1.365173986541120e-03, -2.252397661457911e-02, -1.241274312729888e-04, -2.954188474327526e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rmggac_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.589016604069106e-01, -1.589020400542684e-01, -1.589002123451813e-01, -1.589008525290762e-01, -1.588956107224826e-01, -1.588949029531907e-01, -1.401450993915248e-01, -1.401464856473794e-01, -1.160610090042027e-01, -1.160627721278078e-01, -3.041900109901440e-02, -3.042006514542020e-02, -9.538335232490050e-02, -9.538487137133815e-02, -3.114751900506519e-02, -3.114866920784937e-02, -3.114189869879671e-02, -3.114037760650294e-02, -3.114455945547105e-02, -3.114352286404824e-02, -3.115745529278100e-02, -3.112982303327303e-02, -9.559134286624547e-02, -9.554957711207043e-02, -7.549487596793973e-02, -7.496695577756288e-02, -7.427119225810659e-02, -7.379572635671731e-02, -2.801361242299732e-02, -2.841622789265466e-02, -6.272990094787345e-02, -6.255916322065465e-02, -7.047591765594574e-02, -7.913526073349703e-02, -2.647133863327254e-02, -3.031607411209580e-02, -4.098020265528972e-02, -3.894460906054448e-02, -4.643219794146775e-02, -4.368168127403824e-02, -5.790220847288608e-02, -5.556082040713316e-02, -1.852230180116987e-02, -1.806748464285813e-02, -6.928290024306622e-03, -3.111742712276335e-02, -6.891614156761988e-03, -3.158052876150111e-02, -1.139873722078565e-03, -1.066879493047302e-03, -1.199043710435433e-03, -1.113198611436224e-03, -7.898204366802520e-03, -7.362400037855129e-03, -5.188524247935382e-04, -5.279915710404298e-04, -1.828296547326134e-04, -5.673875046554124e-04, -1.828296547326141e-04, -5.673875046554128e-04, -9.606622802438332e-02, -9.609931293506202e-02, -2.930620689324630e-02, -2.932665597544582e-02, -2.931584138110377e-02, -2.933612959349344e-02, -2.930704761769832e-02, -2.932703620240783e-02, -1.069315443481385e-01, -1.069746755012910e-01, -9.589178423644661e-02, -9.592544998478880e-02, -8.616285857832527e-02, -8.616807151015671e-02, -8.709296688398535e-02, -8.712137471490644e-02, -3.075678320202451e-02, -3.063578342489504e-02, -3.074921479140644e-02, -3.062248769072535e-02, -1.010600379123211e-01, -1.016242774170919e-01, -8.682270300263373e-02, -8.728047783063837e-02, -7.394940696152334e-02, -7.421715510075740e-02, -2.692528140205567e-02, -2.689227829364910e-02, -2.893347001753158e-02, -2.654143064791926e-02, -2.854028813167763e-02, -2.628941330595174e-02, -7.195488172081416e-02, -7.698885242479497e-02, -2.587215930889795e-02, -2.943759510453641e-02, -1.372244286245595e-02, -1.349711783252368e-02, -3.592211443993570e-02, -3.568444610844840e-02, -1.938899333093525e-02, -1.807460732110978e-02, -2.958438099623357e-02, -2.961892605444812e-02, -2.610263606480524e-02, -2.415926133057093e-02, -2.610263606480525e-02, -2.415926133057093e-02, -3.553837544011404e-04, -3.418742740813089e-04, -3.214977574520837e-04, -3.138692226811378e-04, -4.685368829380132e-04, -4.420625648401486e-04, -1.316131239177034e-02, -1.305439949206900e-02, -5.926914804054096e-04, -4.337836465683304e-04, -5.926914804054167e-04, -4.337836465683344e-04, -2.561425619169084e-02, -2.532459779300181e-02, -2.595289999682747e-02, -2.566354322402595e-02, -2.870182041966994e-02, -2.826187788781285e-02, -3.239584708672243e-02, -3.206213879646990e-02, -2.490082288381591e-02, -2.447148792880953e-02, -3.428622936654598e-02, -3.394497092495249e-02, -2.958013583445621e-02, -2.930388442231561e-02, -7.300542919222355e-02, -7.253743814268036e-02, -7.067511823162688e-02, -7.023069316626303e-02, -2.654305701990535e-02, -2.629257152038722e-02, -2.682402099210909e-02, -2.656401699479962e-02, -6.894936174213348e-02, -6.857162911266787e-02, -7.503437121745717e-02, -7.483596427982928e-02, -4.317915121485427e-02, -4.284882528596743e-02, -4.969037480236975e-02, -4.903771489742913e-02, -6.053300652411917e-02, -6.008847962527689e-02, -5.540792149083458e-02, -5.543403718400013e-02, -5.538061044918220e-02, -5.540669188516876e-02, -2.743395265404102e-02, -2.699412552578401e-02, -1.761843895234462e-02, -1.741510990728169e-02, -7.505896216750916e-03, -7.099372664605478e-03, -6.196474765824175e-02, -6.070213413410268e-02, -1.255594180465027e-02, -1.142993865678866e-02, -1.255594180465027e-02, -1.142993865678866e-02, -6.553255814942283e-03, -6.216270728797671e-03, -4.926455868009041e-05, -4.908669039711580e-05, -1.857142193697788e-03, -1.712135917583215e-03, -2.748837400696414e-02, -2.670373341866728e-02, 5.964157174962841e-04, 7.324705428553701e-04, -6.963352822155285e-04, -5.232808728277384e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.141108625232645e-09, 1.628221725046529e-08, 8.141108625232645e-09, 8.141013139025441e-09, 1.628202627805088e-08, 8.141013139025441e-09, 8.140562323895585e-09, 1.628112464779117e-08, 8.140562323895585e-09, 7.537466432618795e-10, 1.507493286523759e-09, 7.537466432618795e-10, 5.732460834779237e-10, 1.146492166955847e-09, 5.732460834779237e-10, 9.099208633426713e-12, 1.819841726685343e-11, 9.099208633426713e-12, 9.031061287465398e-07, 1.806212257493080e-06, 9.031061287465398e-07, 5.266096183330259e-08, 1.053219236666052e-07, 5.266096183330259e-08, 5.281763750335747e-08, 1.056352750067149e-07, 5.281763750335747e-08, 5.273064456284677e-08, 1.054612891256935e-07, 5.273064456284677e-08, 5.276718740170437e-08, 1.055343748034087e-07, 5.276718740170437e-08, 9.095275069401048e-07, 1.819055013880210e-06, 9.095275069401048e-07, 8.242740672115459e-03, 1.648548134423092e-02, 8.242740672115459e-03, 1.506739916329031e-03, 3.013479832658061e-03, 1.506739916329031e-03, 1.116227744910715e-04, 2.232455489821429e-04, 1.116227744910715e-04, 8.584081313640550e-04, 1.716816262728110e-03, 8.584081313640550e-04, 8.972207171338844e-03, 1.794441434267769e-02, 8.972207171338844e-03, 1.133121980628606e-04, 2.266243961257212e-04, 1.133121980628606e-04, 2.557459167350348e-01, 5.114918334700697e-01, 2.557459167350348e-01, 4.022386919907670e-01, 8.044773839815339e-01, 4.022386919907670e-01, 2.035128099317798e-04, 4.070256198635596e-04, 2.035128099317798e-04, 7.245501175459797e-02, 1.449100235091959e-01, 7.245501175459797e-02, -2.681165457600162e-02, -5.362330915200324e-02, -2.681165457600162e-02, -2.491187452359154e-02, -4.982374904718308e-02, -2.491187452359154e-02, 1.244127120381331e+02, 2.488254240762662e+02, 1.244127120381331e+02, 1.136288165994835e+02, 2.272576331989671e+02, 1.136288165994835e+02, 3.041558396167843e+00, 6.083116792335685e+00, 3.041558396167843e+00, 2.649072706235096e+02, 5.298145412470192e+02, 2.649072706235096e+02, -3.958003114473566e+01, -7.916006228947131e+01, -3.958003114473566e+01, -3.958003114473561e+01, -7.916006228947121e+01, -3.958003114473561e+01, 9.842950038183865e-07, 1.968590007636773e-06, 9.842950038183865e-07, 1.096468134005590e-08, 2.192936268011180e-08, 1.096468134005590e-08, 1.096140733136915e-08, 2.192281466273830e-08, 1.096140733136915e-08, 1.096453916551023e-08, 2.192907833102046e-08, 1.096453916551023e-08, 1.072905692615731e-06, 2.145811385231461e-06, 1.072905692615731e-06, 9.886121399973858e-07, 1.977224279994772e-06, 9.886121399973858e-07, 1.100031216153622e-05, 2.200062432307243e-05, 1.100031216153622e-05, 1.127142709083522e-05, 2.254285418167043e-05, 1.127142709083522e-05, 8.180952443249278e-07, 1.636190488649856e-06, 8.180952443249278e-07, 8.091669612970462e-07, 1.618333922594092e-06, 8.091669612970462e-07, 1.806723544854975e-05, 3.613447089709950e-05, 1.806723544854975e-05, 1.127027415026600e-05, 2.254054830053201e-05, 1.127027415026600e-05, 8.664480341898447e-03, 1.732896068379689e-02, 8.664480341898447e-03, 3.152911300257380e-04, 6.305822600514761e-04, 3.152911300257380e-04, 5.061349546089082e-04, 1.012269909217816e-03, 5.061349546089082e-04, 4.826088896614838e-04, 9.652177793229677e-04, 4.826088896614838e-04, 1.010073191152475e-02, 2.020146382304950e-02, 1.010073191152475e-02, 4.178854959570773e-04, 8.357709919141547e-04, 4.178854959570773e-04, 1.460578442687730e-01, 2.921156885375459e-01, 1.460578442687730e-01, 1.381930091250545e-01, 2.763860182501091e-01, 1.381930091250545e-01, 5.750988789772939e-01, 1.150197757954588e+00, 5.750988789772939e-01, 1.283205073330534e-06, 2.566410146661068e-06, 1.283205073330534e-06, 5.013582416141660e-01, 1.002716483228332e+00, 5.013582416141660e-01, 5.013582416141665e-01, 1.002716483228333e+00, 5.013582416141665e-01, 3.194022449785761e+02, 6.388044899571521e+02, 3.194022449785761e+02, 7.078010701435637e+01, 1.415602140287127e+02, 7.078010701435637e+01, 1.475567950820070e+03, 2.951135901640139e+03, 1.475567950820070e+03, 1.431466541154500e+00, 2.862933082309001e+00, 1.431466541154500e+00, 5.541167522481817e+02, 1.108233504496363e+03, 5.541167522481817e+02, 5.541167522481890e+02, 1.108233504496378e+03, 5.541167522481890e+02, 5.426367468794510e-04, 1.085273493758902e-03, 5.426367468794510e-04, 5.350586564240391e-04, 1.070117312848078e-03, 5.350586564240391e-04, 4.200906273219180e-02, 8.401812546438360e-02, 4.200906273219180e-02, 5.095630350174353e-02, 1.019126070034871e-01, 5.095630350174353e-02, 4.564104280299720e-02, 9.128208560599439e-02, 4.564104280299720e-02, 5.081518744282462e-02, 1.016303748856492e-01, 5.081518744282462e-02, 5.629032748764191e-02, 1.125806549752838e-01, 5.629032748764191e-02, 1.526417881675069e-02, 3.052835763350138e-02, 1.526417881675069e-02, 1.921936744808216e-02, 3.843873489616433e-02, 1.921936744808216e-02, 7.146863735315733e-04, 1.429372747063147e-03, 7.146863735315733e-04, 7.487700016424024e-04, 1.497540003284805e-03, 7.487700016424024e-04, 2.337686124575928e-02, 4.675372249151856e-02, 2.337686124575928e-02, 7.084066734520824e-03, 1.416813346904165e-02, 7.084066734520824e-03, 8.217611238290685e-02, 1.643522247658137e-01, 8.217611238290685e-02, 5.693323339986614e-02, 1.138664667997323e-01, 5.693323339986614e-02, 3.682077783674926e-02, 7.364155567349852e-02, 3.682077783674926e-02, 4.827327812846729e-02, 9.654655625693458e-02, 4.827327812846729e-02, 4.828376016919158e-02, 9.656752033838316e-02, 4.828376016919158e-02, 1.158933000172855e-03, 2.317866000345710e-03, 1.158933000172855e-03, 1.327784768090495e+03, 2.655569536180990e+03, 1.327784768090495e+03, 6.242928559149815e-01, 1.248585711829963e+00, 6.242928559149815e-01, 6.317132045000920e-02, 1.263426409000184e-01, 6.317132045000920e-02, 3.406141018396552e-01, 6.812282036793105e-01, 3.406141018396552e-01, 3.406141018396543e-01, 6.812282036793086e-01, 3.406141018396543e-01, 3.196988313126257e+05, 6.393976626252513e+05, 3.196988313126257e+05, 6.261207529342457e+02, 1.252241505868491e+03, 6.261207529342457e+02, 1.259213318930310e+08, 2.518426637860619e+08, 1.259213318930310e+08, 7.852406901968342e+01, 1.570481380393668e+02, 7.852406901968342e+01, -4.718323005002067e+03, -9.436646010004133e+03, -4.718323005002067e+03, 2.240595138873005e+03, 4.481190277746009e+03, 2.240595138873005e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.930565444958627e-06, -7.930565444958612e-06, -7.931430597228363e-06, -7.931430597228249e-06, -7.934901625177926e-06, -7.934901625177870e-06, -1.608952367279170e-05, -1.608952367279175e-05, -3.986421870214325e-05, -3.986421870214325e-05, -1.704747605595180e-20, -1.704747605595180e-20, -1.318477707478508e-04, -1.318477707478517e-04, -2.049208164068401e-18, -2.049208164068400e-18, -4.259671035142932e-17, -4.259671035142934e-17, -7.510341570700526e-20, -7.510341570700529e-20, -1.046119977671105e-12, -1.046119977671105e-12, -1.316839842165312e-04, -1.316839842165308e-04, 5.213743738802142e-05, 5.213743738803432e-05, -2.803185659672807e-05, -2.803185659672964e-05, -5.234759869142377e-09, -5.234759869142376e-09, -4.928394385224050e-04, -4.928394385224090e-04, 4.593701399750120e-05, 4.593701399750527e-05, -6.299150472952226e-06, -6.299150472952226e-06, -2.951872254404780e-03, -2.951872254404758e-03, -9.326151634351913e-05, -9.326151634352131e-05, -1.209794976730166e-04, -1.209794976730168e-04, -1.825236908942145e-06, -1.825236908942145e-06, 4.308599970079367e-03, 4.308599970079359e-03, 4.047601920865782e-03, 4.047601920865790e-03, -2.643587792485314e-05, -2.643587792485602e-05, -8.141206040235136e-05, -8.141206040235251e-05, -1.873079144398753e-04, -1.873079144398806e-04, -1.175286329711481e-05, -1.175286329711494e-05, 1.407794866753836e-04, 1.407794866753830e-04, 1.407794866753829e-04, 1.407794866753827e-04, -1.254773922209626e-03, -1.254773922209624e-03, -5.076942874013475e-15, -5.076942874013475e-15, -5.529161989883236e-15, -5.529161989883237e-15, -6.927590926819415e-15, -6.927590926819417e-15, -6.508456836078210e-04, -6.508456836078206e-04, -1.264208137561108e-03, -1.264208137561108e-03, -2.497914940438207e-04, -2.497914940438217e-04, -2.699500294476030e-04, -2.699500294476034e-04, -2.884449829348281e-11, -2.884449829348281e-11, -3.212781312246675e-11, -3.212781312246677e-11, -3.477819639852348e-05, -3.477819639852550e-05, -2.688915148911630e-04, -2.688915148911647e-04, -1.040252931866516e-02, -1.040252931866519e-02, -1.252323934310557e-09, -1.252323934310558e-09, -1.000140313550848e-06, -1.000140313550848e-06, -1.591577006188312e-06, -1.591577006188313e-06, -1.657030007506188e-02, -1.657030007506190e-02, -1.297699693203281e-04, -1.297699693203281e-04, -9.369497409573506e-08, -9.369497409573514e-08, -9.460669575427154e-04, -9.460669575427266e-04, -2.391340710735651e-04, -2.391340710735772e-04, -9.446538687093006e-13, -9.446538687093006e-13, -5.203732556921807e-04, -5.203732556921480e-04, -5.203732556921475e-04, -5.203732556921157e-04, -1.464000788149818e-05, -1.464000788149788e-05, -1.671987789901279e-07, -1.671987789901280e-07, -2.989363912485053e-05, -2.989363912484986e-05, -1.686980288565580e-04, -1.686980288565740e-04, -3.199624867902688e-05, -3.199624867902644e-05, -3.199624867902818e-05, -3.199624867902873e-05, -1.778456554965533e-09, -1.778456554965533e-09, -1.557396368804416e-10, -1.557396368804417e-10, -7.653240686465729e-02, -7.653240686465738e-02, -1.384910951003028e-01, -1.384910951003029e-01, -8.895813555634419e-02, -8.895813555634412e-02, -1.354742477296682e-01, -1.354742477296681e-01, -1.452935575488771e-01, -1.452935575488771e-01, -1.517513956210211e-03, -1.517513956210188e-03, -1.696143261302066e-02, -1.696143261302068e-02, -5.116942198316093e-09, -5.116942198316092e-09, -3.318383498317631e-09, -3.318383498317632e-09, -2.563787230530138e-02, -2.563787230530132e-02, -6.418580085360934e-03, -6.418580085360875e-03, -1.342118197325056e-03, -1.342118197325074e-03, -2.298972122815693e-03, -2.298972122815714e-03, -5.489959497335853e-03, -5.489959497335877e-03, -3.535015768344561e-03, -3.535015768344557e-03, -3.602349956347600e-03, -3.602349956347600e-03, -2.525875186911367e-08, -2.525875186911368e-08, 9.386320261296244e-07, 9.386320261163459e-07, -3.859285142696603e-06, -3.859285142696604e-06, -1.012287696777477e-02, -1.012287696777477e-02, -7.823182179822090e-06, -7.823182179822090e-06, -7.823182179815770e-06, -7.823182179815770e-06, 1.932119011583715e-08, 1.932119011004636e-08, -6.190607271447024e-12, -6.190607271447024e-12, 1.398120025710746e-09, 1.398120024593572e-09, 1.092650173709239e-05, 1.092650173711125e-05, 2.158238055842730e-03, 2.158238055842728e-03, 2.006108880499177e-06, 2.006108880499133e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
