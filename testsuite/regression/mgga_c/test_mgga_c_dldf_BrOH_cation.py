
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_dldf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.236674324857562e-01, -1.236666672489545e-01, -1.236638879645659e-01, -1.236752203213423e-01, -1.236691949746672e-01, -1.236691949746672e-01, -9.642761440967307e-02, -9.642334247338126e-02, -9.632020464152638e-02, -9.645071491872538e-02, -9.639773477682607e-02, -9.639773477682607e-02, -6.576144534541063e-02, -6.585131741787377e-02, -6.715514820703025e-02, -6.705254777608144e-02, -6.661331477441701e-02, -6.661331477441701e-02, -2.318047794971619e-02, -2.517023183255660e-02, -6.953467679193986e-02, 1.512991785253212e-03, 4.625233787323426e-03, 4.625233787323421e-03, 7.323352848097328e-03, 7.637338185709682e-03, 2.756817305281901e-02, 4.405593357517920e-03, 3.121010952115737e-03, 3.121010952115735e-03, -8.534614878196885e-02, -8.520587391685762e-02, -8.533805855283974e-02, -8.521429478864846e-02, -8.527590808302993e-02, -8.527590808302993e-02, -8.886132082204222e-02, -8.875129846062257e-02, -8.850299396801538e-02, -8.843180921610565e-02, -8.891606831801389e-02, -8.891606831801389e-02, -5.296336522952767e-02, -5.083987570551501e-02, -5.371082283610223e-02, -4.975066970414963e-02, -5.190876208787448e-02, -5.190876208787444e-02, 2.603337623901363e-02, -8.078752775798191e-03, 2.758283962110385e-02, -7.571644994188860e-02, 1.415695338274086e-02, 1.415695338274086e-02, 3.295454612136068e-03, 4.220802023527842e-03, 3.328400510430868e-03, 3.080817767531173e-02, 3.280293474810214e-03, 3.280293474810212e-03, -4.549738204189977e-02, -4.200321529176243e-02, -4.216564819976846e-02, -4.292631759145914e-02, -4.245098791498691e-02, -4.245098791498691e-02, -5.424410799716073e-02, -5.370613889864543e-02, -5.066781777689180e-02, -4.594858701662932e-02, -4.845445422258031e-02, -4.845445422258031e-02, -5.217012948659959e-02, -2.351948938610731e-02, -3.801537884832098e-02, -4.980809093415082e-02, -4.643601594533275e-02, -4.643601594533275e-02, -5.358829216347786e-02, 2.744487848957367e-02, 3.095637400555448e-02, -4.655153588498232e-02, 2.697440940457597e-02, 2.697440940457595e-02, 9.558946044829814e-03, 1.110147355039958e-03, 2.516737547617629e-03, 2.853923589421548e-02, 3.170204454470912e-03, 3.170204454470914e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_dldf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.854273783337463e-02, -7.853859168221577e-02, -7.854318279312412e-02, -7.853845552718970e-02, -7.854186167223538e-02, -7.853935408383104e-02, -7.854283240971058e-02, -7.853375909808620e-02, -7.855035629515199e-02, -7.852891250621218e-02, -7.855035629515199e-02, -7.852891250621218e-02, -5.818266361653320e-02, -5.828158738223421e-02, -5.817895888099670e-02, -5.828445875353330e-02, -5.817846574456090e-02, -5.826718953073587e-02, -5.818635091036519e-02, -5.828884436389908e-02, -5.816424769420434e-02, -5.829480301504433e-02, -5.816424769420434e-02, -5.829480301504433e-02, -4.719636201074639e-02, -4.788753038487370e-02, -4.769524349274371e-02, -4.846331047070310e-02, -6.486911328748418e-02, -6.638964575149510e-02, -6.519068237517828e-02, -6.481243285101926e-02, -6.355176635793561e-02, -8.181647376475695e-02, -6.355176635793561e-02, -8.181647376475695e-02, -1.145058289330349e-01, -9.530186874762853e-02, -1.129686318316272e-01, -9.199051349716934e-02, -4.343795326803725e-02, -4.587823928123566e-02, -9.895418477161959e-02, -9.385304027594948e-02, -1.756597840195458e-02, -2.996341750538316e-01, -1.756597840195459e-02, -2.996341750538317e-01, 9.428329581306827e-03, 7.122036988409088e-03, 1.001435997251085e-02, 7.289562353305462e-03, 2.522547621827959e-02, 1.977365708449633e-02, 4.832543576876157e-03, 5.235711375548653e-03, 7.524127203839575e-04, 1.564449095976203e-02, 7.524127203839497e-04, 1.564449095976200e-02, -6.214201986118627e-02, -6.215567189087314e-02, -6.228364226709856e-02, -6.228216485706786e-02, -6.214771051837851e-02, -6.215336721842169e-02, -6.226183470947380e-02, -6.227608202833324e-02, -6.222002131842806e-02, -6.221739178510329e-02, -6.222002131842806e-02, -6.221739178510329e-02, -1.051244782281937e-01, -1.052052594463889e-01, -1.029483200205192e-01, -1.030913914683269e-01, -1.118646484128803e-01, -1.110332250102514e-01, -1.098781925759916e-01, -1.090846575193042e-01, -1.002288074721939e-01, -1.018880741767532e-01, -1.002288074721939e-01, -1.018880741767532e-01, -3.515445102458394e-02, -3.554182596961586e-02, -6.298589317412580e-02, -6.357972144071988e-02, -3.524090281472144e-02, -3.437416015447918e-02, -5.985536654023682e-02, -5.450867303451287e-02, -3.383931235119612e-02, -3.837952965166798e-02, -3.383931235119609e-02, -3.837952965166798e-02, -3.896969525916628e-02, -3.634813939333653e-02, -1.171313796549932e-01, -1.145651888734155e-01, -3.250006898927223e-02, -2.505839540518428e-02, -9.492498326930719e-02, -9.505347836246686e-02, -8.888922181845403e-02, -5.586955683565308e-02, -8.888922181845403e-02, -5.586955683565308e-02, 4.284397649339863e-03, 3.558964389772927e-03, 5.079871698854928e-03, 4.724935475987427e-03, 4.367856091239646e-03, 3.318710508516618e-03, 4.884229855622011e-03, 4.294880153933676e-03, 8.356849388462647e-03, 1.791048069194091e-03, 8.356849388462642e-03, 1.791048069194092e-03, -6.585145997125670e-02, -6.561896878629433e-02, -5.062375934044240e-02, -5.059279776274074e-02, -5.528631501258936e-02, -5.524133039095095e-02, -5.980448839255643e-02, -5.962160268673880e-02, -5.748326872022711e-02, -5.736865341206885e-02, -5.748326872022711e-02, -5.736865341206886e-02, -7.179115080184457e-02, -7.133309422030497e-02, -4.628175151159922e-02, -4.583734923721536e-02, -3.466609560240254e-02, -3.466198244210395e-02, -3.483020528436861e-02, -3.474703462053750e-02, -3.297414354516444e-02, -3.279641953663366e-02, -3.297414354516444e-02, -3.279641953663366e-02, -6.312808641929230e-02, -6.394471004777576e-02, -1.220694332280286e-01, -1.188230634622104e-01, -1.046090112327744e-01, -9.956594684554491e-02, -4.550214156055100e-02, -4.469267347242050e-02, -7.236154986151887e-02, -7.228373697612603e-02, -7.236154986151895e-02, -7.228373697612600e-02, -4.487196695536383e-02, -4.436043190084479e-02, 2.350144570247646e-02, 2.278595738682699e-02, 1.971997469714007e-02, 1.723978802277861e-02, -3.354718252019910e-02, -3.306137205783338e-02, -2.744922573517876e-02, -1.625788644227438e-02, -2.744922573517859e-02, -1.625788644227430e-02, 1.183841542964166e-02, 1.003554058475552e-02, 1.385480414539778e-03, 1.361163691268517e-03, 3.321194802598497e-03, 2.465439868704293e-03, -1.508146466470542e-02, -1.417082363733589e-02, 7.396991339720505e-03, 1.866389942568221e-03, 7.396991339720504e-03, 1.866389942568222e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.023692899736284e-10, 0.000000000000000e+00, -1.023290024501495e-10, -1.023614147842611e-10, 0.000000000000000e+00, -1.023262716708976e-10, -1.023494946763583e-10, 0.000000000000000e+00, -1.022900302475874e-10, -1.023989160423751e-10, 0.000000000000000e+00, -1.023976246154237e-10, -1.023301159485895e-10, 0.000000000000000e+00, -1.023843373095032e-10, -1.023301159485895e-10, 0.000000000000000e+00, -1.023843373095032e-10, -1.176000148637905e-06, 0.000000000000000e+00, -1.175389728349593e-06, -1.176065107862081e-06, 0.000000000000000e+00, -1.175473170324612e-06, -1.177723153247783e-06, 0.000000000000000e+00, -1.176075596200701e-06, -1.169844852598244e-06, 0.000000000000000e+00, -1.168731366997069e-06, -1.179109537614680e-06, 0.000000000000000e+00, -1.167872218471934e-06, -1.179109537614680e-06, 0.000000000000000e+00, -1.167872218471934e-06, -1.515187034258569e-03, 0.000000000000000e+00, -1.459121271297634e-03, -1.473888997956763e-03, 0.000000000000000e+00, -1.410388294050234e-03, -1.757763892706499e-04, 0.000000000000000e+00, -1.452977697259799e-04, -1.655143730170685e-04, 0.000000000000000e+00, -1.615193469945197e-04, 8.103449492327127e-05, 0.000000000000000e+00, 4.211732085506348e-04, 8.103449492327127e-05, 0.000000000000000e+00, 4.211732085506348e-04, 1.521689504143282e+00, 0.000000000000000e+00, 1.200380738889441e+00, 1.449527649816491e+00, 0.000000000000000e+00, 1.108012135060090e+00, -1.300694262041736e-03, 0.000000000000000e+00, -9.415612864685256e-04, 3.095689830486379e+00, 0.000000000000000e+00, 2.866417148494175e+00, 4.159206919518174e-01, 0.000000000000000e+00, 2.358822856769512e+01, 4.159206919518179e-01, 0.000000000000000e+00, 2.358822856769512e+01, 1.089839040391280e+03, 0.000000000000000e+00, 9.481927984590367e+02, 1.006241115634762e+03, 0.000000000000000e+00, 8.615034940764194e+02, 2.552846739830695e+01, 0.000000000000000e+00, 2.000559135862823e+01, 2.767349985458494e+03, 0.000000000000000e+00, 2.886302268935622e+03, 1.330894427935793e+03, 0.000000000000000e+00, 6.174180374735588e+03, 1.330894427935793e+03, 0.000000000000000e+00, 6.174180374735790e+03, -1.202341835861254e-09, 0.000000000000000e+00, -1.645101460804735e-09, 2.355576394191108e-09, 0.000000000000000e+00, 1.734177473222065e-09, -9.810549859114660e-10, 0.000000000000000e+00, -1.541454607864970e-09, 2.027269376266404e-09, 0.000000000000000e+00, 1.570458934056264e-09, 6.114400224249460e-10, 0.000000000000000e+00, 2.932279850422789e-11, 6.114400224249460e-10, 0.000000000000000e+00, 2.932279850422789e-11, 6.835633170852296e-06, 0.000000000000000e+00, 6.887742845428510e-06, 6.338738347857708e-06, 0.000000000000000e+00, 6.384818665347640e-06, 8.419984721574381e-06, 0.000000000000000e+00, 8.386075582847449e-06, 7.946315054697906e-06, 0.000000000000000e+00, 7.923323117665899e-06, 5.781271039162339e-06, 0.000000000000000e+00, 5.928942900716826e-06, 5.781271039162339e-06, 0.000000000000000e+00, 5.928942900716826e-06, -4.389065127081602e-03, 0.000000000000000e+00, -4.448903768507904e-03, 9.451193823967995e-03, 0.000000000000000e+00, 1.023516192798726e-02, -8.743679842012953e-03, 0.000000000000000e+00, -5.310276586028661e-03, 5.055487288674133e-03, 0.000000000000000e+00, 5.581472160669860e-03, -2.716918569342825e-03, 0.000000000000000e+00, -5.763213026043969e-03, -2.716918569342818e-03, 0.000000000000000e+00, -5.763213026043949e-03, 5.541546214366507e+00, 0.000000000000000e+00, 5.190096709304401e+00, 1.121242988195404e+00, 0.000000000000000e+00, 1.081638490544797e+00, 7.498214002414032e+00, 0.000000000000000e+00, 5.308910493858072e+00, 5.516931850220494e-05, 0.000000000000000e+00, 5.539800009634622e-05, 6.197893597725380e+00, 0.000000000000000e+00, 4.292614009609490e+00, 6.197893597725380e+00, 0.000000000000000e+00, 4.292614009609490e+00, 4.380444621783354e+03, 0.000000000000000e+00, 3.864546094304217e+03, 2.934684963849883e+03, 0.000000000000000e+00, 2.666752515225285e+03, 1.477477325809846e+04, 0.000000000000000e+00, 1.363157576929327e+04, 1.330264474772147e+01, 0.000000000000000e+00, 1.308281342785605e+01, 6.275528750334611e+03, 0.000000000000000e+00, 5.465723168105827e+03, 6.275528750334389e+03, 0.000000000000000e+00, 5.465723168105823e+03, 1.050431423791068e-01, 0.000000000000000e+00, 1.073441663615014e-01, 2.518963876577227e-02, 0.000000000000000e+00, 2.612696670325572e-02, 4.029516690414005e-02, 0.000000000000000e+00, 4.158026592724039e-02, 6.071864361376948e-02, 0.000000000000000e+00, 6.198146676189809e-02, 4.931292824433297e-02, 0.000000000000000e+00, 5.059377257968525e-02, 4.931292824433297e-02, 0.000000000000000e+00, 5.059377257968525e-02, 1.467882731131694e-01, 0.000000000000000e+00, 1.481258613110083e-01, -8.232605448752808e-04, 0.000000000000000e+00, -6.412306285631371e-04, -5.052672419058254e-03, 0.000000000000000e+00, -4.633029600274377e-03, -3.362592615851489e-03, 0.000000000000000e+00, -2.941443831064478e-03, -5.562525167480384e-03, 0.000000000000000e+00, -5.171694327004777e-03, -5.562525167480384e-03, 0.000000000000000e+00, -5.171694327004778e-03, 5.585114532403953e-03, 0.000000000000000e+00, 6.392637775733304e-03, 4.688244544675949e-01, 0.000000000000000e+00, 4.505513940705462e-01, 1.971384499900798e-01, 0.000000000000000e+00, 1.850191461615809e-01, -6.137102563215560e-03, 0.000000000000000e+00, -5.687569002050455e-03, 6.378006262147606e-02, 0.000000000000000e+00, 6.399224033725674e-02, 6.378006262147622e-02, 0.000000000000000e+00, 6.399224033725685e-02, -3.433659740923132e-03, 0.000000000000000e+00, -2.749999617666295e-03, 2.380316987546863e+01, 0.000000000000000e+00, 2.294004096229225e+01, 1.574384715002806e+01, 0.000000000000000e+00, 1.327485969201856e+01, -4.319082148863315e-02, 0.000000000000000e+00, -3.063056838026336e-02, 1.318967012551676e+01, 0.000000000000000e+00, 9.454139112607781e+00, 1.318967012551672e+01, 0.000000000000000e+00, 9.454139112607765e+00, 3.545688422844823e+02, 0.000000000000000e+00, 3.218821054857120e+02, 5.064680029020261e+04, 0.000000000000000e+00, 5.029199452541811e+04, 1.891991665740731e+04, 0.000000000000000e+00, 1.706037353813129e+04, 1.289326190290192e+01, 0.000000000000000e+00, 1.179907978844147e+01, 1.123278681147722e+04, 0.000000000000000e+00, 6.726547766518263e+03, 1.123278681147736e+04, 0.000000000000000e+00, 6.726547766518323e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.901013230636518e-05, -1.901945412276983e-05, -1.901096170284955e-05, -1.902005544090246e-05, -1.901365026990866e-05, -1.902389988424049e-05, -1.900437512829568e-05, -1.901204543828046e-05, -1.901066050823650e-05, -1.901680077464119e-05, -1.901066050823650e-05, -1.901680077464119e-05, -7.241406255835567e-05, -7.228441386531142e-05, -7.244785309510468e-05, -7.229640575253666e-05, -7.299126374173889e-05, -7.305883277233302e-05, -7.326038939638094e-05, -7.315511245702023e-05, -7.236981150876521e-05, -7.365462349149396e-05, -7.236981150876521e-05, -7.365462349149396e-05, -4.991813328791263e-04, -4.869770698355388e-04, -5.050203862638711e-04, -4.876744330670483e-04, -5.699114317300186e-04, -6.187594200436528e-04, -6.588715140815773e-04, -6.590995109157642e-04, -4.448770063742721e-04, -9.037205548138629e-04, -4.448770063742721e-04, -9.037205548138629e-04, -1.146716781278779e-02, -1.328260573143206e-02, -1.135887935311245e-02, -1.333644608405439e-02, -1.072176631972617e-04, -1.124318105957078e-04, -6.416196315766434e-03, -8.074662897014424e-03, -1.055298780894083e-02, -4.146624318880307e-03, -1.055298780894084e-02, -4.146624318880306e-03, -1.657504043638503e-03, -1.756214944222486e-03, -1.738546424298161e-03, -1.865407451500867e-03, -3.800231123007070e-03, -4.109778395967495e-03, -8.334468448164945e-04, -8.416794799703562e-04, -1.436437607544325e-03, -9.649498833923571e-04, -1.436437607544322e-03, -9.649498833923606e-04, -4.275115631791712e-04, -4.277948747616026e-04, -4.329609943204669e-04, -4.330636938237045e-04, -4.279164302289533e-04, -4.280500649898794e-04, -4.325878298744496e-04, -4.328320354239453e-04, -4.302090272475659e-04, -4.304148126583102e-04, -4.302090272475659e-04, -4.304148126583102e-04, -4.166507627114185e-04, -4.202958173199973e-04, -4.325074750526771e-04, -4.356384908035064e-04, -4.269522232335675e-04, -4.272843060385560e-04, -4.415774962659072e-04, -4.423248535244543e-04, -4.181976091339611e-04, -4.275260402829244e-04, -4.181976091339611e-04, -4.275260402829244e-04, -3.323954664502625e-03, -3.465652956543034e-03, -5.715681230606976e-03, -6.121076364513819e-03, -1.881811693113412e-03, -2.399079806598598e-03, -2.030952860944322e-03, -2.600306533643698e-03, -4.073764886910029e-03, -3.403898260340990e-03, -4.073764886910032e-03, -3.403898260340993e-03, -5.968716700218776e-03, -5.886476656795010e-03, -8.318373669643591e-03, -8.248956255127966e-03, -5.488398471151209e-03, -6.003127014515853e-03, -3.525769543636607e-04, -3.531414560000104e-04, -7.669561921977035e-03, -9.586273254508315e-03, -7.669561921977036e-03, -9.586273254508323e-03, -4.006980070181202e-04, -4.096831233448207e-04, -6.960441812871146e-04, -6.466371935182567e-04, -1.640088626745936e-03, -1.793173755775487e-03, -4.925710977630305e-03, -5.706783930965363e-03, -4.460621913621852e-04, -1.872656457995420e-03, -4.460621913621861e-04, -1.872656457995421e-03, -9.192034467703755e-02, -9.466408506202513e-02, -4.346874595441836e-02, -4.467784508971623e-02, -5.620629588756637e-02, -5.792758314536212e-02, -7.057414352245588e-02, -7.249570138882860e-02, -6.291030610996261e-02, -6.473378079828099e-02, -6.291030610996261e-02, -6.473378079828097e-02, -4.005770045059798e-02, -4.194614456035670e-02, -6.112924158848409e-03, -6.123321327541192e-03, -7.181732847722534e-03, -7.256416265625123e-03, -1.182642614644572e-02, -1.191500657839700e-02, -8.533187609610205e-03, -8.632550832191733e-03, -8.533187609610202e-03, -8.632550832191730e-03, -3.632420129103974e-03, -4.054956531811944e-03, -8.396872811729407e-03, -8.382277136862785e-03, -7.562492219079205e-03, -7.607105169118927e-03, -4.862107749335549e-03, -4.769445020180481e-03, -6.846593772857794e-03, -6.863281711199868e-03, -6.846593772857811e-03, -6.863281711199889e-03, -4.450312189546459e-03, -4.648382873669111e-03, -4.143955270591052e-03, -4.074943999616804e-03, -4.224263051655663e-03, -4.419731354941649e-03, -5.087408743929726e-03, -6.791455020443304e-03, -6.685060052023093e-03, -7.735319575484780e-03, -6.685060052023083e-03, -7.735319575484771e-03, -1.192482193751165e-03, -1.195644595091212e-03, -1.335762739312039e-04, -1.001276683080612e-04, -8.895368178879751e-04, -9.640014310861899e-04, -7.188052697935947e-03, -8.200334703713574e-03, -7.652698506362234e-04, -1.770474163161785e-03, -7.652698506362250e-04, -1.770474163161788e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
