
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_dldf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504595566e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.478198601654044e-01, -1.478168677125957e-01, -1.241767634635662e-01, -1.186604187118267e-01, -1.012560460718840e-01, -1.012259418042824e-01, -1.012406740487187e-01, -1.012364480972069e-01, -1.184563930793619e-01, -6.701332647005485e-02, -7.796003455312729e-02, -4.864756616173187e-02, -7.762840698808214e-02, -6.628241523783371e-02, -4.960723562373807e-02, -4.262390479891065e-02, -4.320277013268119e-02, -7.610226071084258e-02, 1.132564911698094e-02, 1.344143736188497e-02, -1.837197245851428e-02, 7.334064062499498e-03, 6.701761497491145e-03, 2.215890175866418e-02, 4.493820553566311e-03, 3.179381060540702e-03, 3.179381060540702e-03, -8.534682968405657e-02, -8.520552350088860e-02, -8.533867239807015e-02, -8.521401796141355e-02, -1.051591509059322e-01, -1.051343446349644e-01, -8.673448099093342e-02, -8.707336441042121e-02, -8.641960913704201e-02, -8.678389859155197e-02, -1.041523653388512e-01, -8.704675790698049e-02, -6.319980445846440e-02, -4.967380799582734e-02, -5.657795399381590e-02, -5.439630980165195e-02, -6.018488566133395e-02, -5.442531982917301e-02, 3.121889279066791e-02, -3.514851789396500e-02, 3.251791942675445e-02, -7.851971807786028e-02, 1.876662875397855e-02, 1.876662875397859e-02, 3.045337701269026e-03, 4.401696575901919e-03, 3.407095018594375e-03, 2.073624063386867e-02, 3.377659249737264e-03, 3.377659249737260e-03, -3.673526562751141e-02, -3.999469227148213e-02, -6.383563580100113e-02, -5.087851779981992e-02, -6.385539257642651e-02, -5.112556219229460e-02, -3.684486058605261e-02, -6.152841859444980e-02, -5.868446701958868e-02, -4.637054309453253e-02, -4.898363058798938e-02, -5.706174025660241e-02, -6.199684508956392e-02, -2.132272075857687e-02, -5.361632309736158e-02, -5.785010544785280e-02, -4.319221954153660e-02, -5.651888949934922e-02, -5.329550276685764e-02, -1.432337785401933e-02, 3.238411508664326e-02, -4.711639968984347e-02, 3.036555183126817e-02, 3.036555183126819e-02, -5.037446550363285e-03, 1.262436200698661e-03, -1.374982125405463e-03, -2.268013163367492e-02, 3.256436700907098e-03, 2.403362780832200e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_dldf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747369753463178e-01, -1.747373592461118e-01, -1.747369289286906e-01, -1.747375762850792e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.999089184371011e-01, -2.754120455317621e-02, -1.999045333493685e-01, -2.755222192174083e-02, -7.734233018406622e-02, -7.735164077480161e-02, -1.374884691913638e-02, -1.582193658624413e-01, -1.147352810761319e-01, -1.147393288745990e-01, -1.138904889671962e-01, -1.138886586740658e-01, -1.142365207709564e-01, -1.142315336815879e-01, -1.142368833604014e-01, -1.141525432401666e-01, -1.580779953604937e-01, -1.321631039762281e-02, -7.534022876484492e-02, -7.481054072999151e-02, -1.062352033540807e-01, -7.438181112932357e-02, -1.577610078573933e-01, -1.632601437783932e-01, -9.206893442360392e-02, -1.046909413166988e-01, -7.037457509512338e-02, -7.906556863981586e-02, -1.306052843692983e-01, -1.873757331280465e-01, -6.388848514125069e-02, -7.893195741746382e-02, -6.520531778226155e-02, -7.173845933719206e-02, -2.321767377444461e-01, -9.938983752201118e-02, -9.615602736090416e-02, -8.048042581372226e-02, -1.114690769435894e-02, -2.542767356008750e-01, -3.397099829424603e-02, -1.088915948100850e-01, 9.433187749860600e-03, 7.124931610592389e-03, 8.761544644180285e-03, 6.982385024775131e-03, 2.652568775251433e-02, -1.923443449079422e-03, 4.861234464064561e-03, 5.260744776194389e-03, 7.658404101423649e-04, 1.569846960828362e-02, 7.658404101423610e-04, 1.569846960828358e-02, -6.183416488348954e-02, -6.188125122819246e-02, -6.197306225811717e-02, -6.200528766893245e-02, -6.184748918804670e-02, -6.188285135194162e-02, -6.195903198254318e-02, -6.200326436496013e-02, -1.458183739493489e-01, -3.844449264339453e-02, -3.842268216874712e-02, -1.458850232549914e-01, -1.237531936973110e-01, -1.236872335828631e-01, -1.186708954136383e-01, -1.187276292825984e-01, -1.283225449404489e-01, -1.272748681652656e-01, -1.236426058891257e-01, -1.226553718932884e-01, -2.188809555575878e-02, -1.403568336803469e-01, -1.180049271916794e-01, -1.199692906159558e-01, -4.359165786693618e-03, -8.869473767334839e-02, -3.335122803867125e-02, -3.463781408897109e-02, -6.103362906605921e-02, -5.588687298451278e-02, -4.263257425440267e-02, -4.132323968566085e-02, -5.267649800216026e-03, -9.163992413734950e-02, -3.843805835696237e-02, -4.174712252811619e-02, -2.823687923536696e-02, -2.704391681136734e-02, -5.189447102018556e-02, -1.577837461735818e-01, -2.205203960536359e-02, -1.549713818360705e-02, -5.385966319127772e-02, -5.397497966227344e-02, -8.243422207482622e-02, -4.961619406894647e-02, -8.243422207482612e-02, -4.961619406894659e-02, 3.689084537416371e-03, 3.610178493340051e-03, 5.133219484186557e-03, 4.782357217829068e-03, 4.392649970553306e-03, 3.344513529766234e-03, -5.262006709845550e-02, 1.904067140442866e-02, 8.452627248824481e-03, 1.802723354754935e-03, 8.452627248824472e-03, 1.802723354754929e-03, -5.128665201844477e-02, -5.132433282137480e-02, -4.176880877614918e-02, -4.185676144020588e-02, -7.198832468635549e-02, -7.148872356177728e-02, -7.493659491616851e-02, -4.359075709975321e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.521352103286290e-02, -4.172058394276563e-02, -4.913089712724796e-02, -4.929020839078720e-02, -4.607217367660950e-03, -8.518732491369349e-02, -5.831835021997530e-03, -8.220102974759928e-02, -3.222458302979930e-02, -3.209569058437161e-02, -3.322191678927773e-02, -3.312976786371563e-02, -9.228216420855251e-03, -8.056807930004803e-02, -1.020278014347807e-02, -8.741395623263432e-02, -1.243873134946314e-01, -1.212323679691135e-01, -7.542786250824006e-02, -6.662693393551632e-02, -8.080255115266248e-02, -1.689090925595541e-02, -8.930051933099663e-02, -8.915833521711305e-02, -3.474884923453282e-02, -7.815038822596511e-02, -6.041999405937626e-02, -5.926726814235234e-02, -1.773472996354030e-02, -1.753120798266076e-02, 2.261148618933267e-02, 1.977371866017367e-02, -5.287785797531012e-02, -5.126199527737376e-02, -1.946668362424319e-02, -1.023915779890097e-02, -1.946668362424307e-02, -1.023915779890084e-02, -6.593851617928386e-03, -6.257235187311729e-03, 1.428057846837317e-03, 1.411999878995916e-03, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635372e-02, -2.688551334493897e-02, 7.472049485141733e-03, 1.877946474704502e-03, 7.434889465124541e-03, 1.087356340128195e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.197808112256065e-09, 0.000000000000000e+00, 3.198075732450793e-09, 3.197796180425135e-09, 0.000000000000000e+00, 3.198065314099484e-09, 3.197726133905306e-09, 0.000000000000000e+00, 3.197984006095100e-09, 3.395687248559814e-09, 0.000000000000000e+00, -2.480791271001044e-10, 3.395557939542258e-09, 0.000000000000000e+00, -2.480295734751300e-10, -9.685887630892528e-11, 0.000000000000000e+00, -9.685344743976571e-11, -8.076229192600228e-07, 0.000000000000000e+00, 1.741744956446508e-05, 4.664534861952166e-07, 0.000000000000000e+00, 4.663524953838067e-07, 4.564773208582911e-07, 0.000000000000000e+00, 4.568259027583739e-07, 4.604089565481586e-07, 0.000000000000000e+00, 4.603892429876037e-07, 4.587253286159143e-07, 0.000000000000000e+00, 4.617482231696544e-07, 1.741065014531592e-05, 0.000000000000000e+00, -8.202713014931995e-07, 3.060974187979958e-02, 0.000000000000000e+00, 3.024124093388857e-02, 4.033995698039582e-02, 0.000000000000000e+00, 7.200931794460714e-04, 3.119980590513638e-03, 0.000000000000000e+00, 3.259360112455763e-03, 1.169684152833972e-03, 0.000000000000000e+00, 4.359050417628300e-02, 3.012681365492207e-02, 0.000000000000000e+00, 3.735451288745485e-02, 2.556911460123167e-03, 0.000000000000000e+00, 3.799224012402621e-03, 2.150876908934647e+01, 0.000000000000000e+00, 7.761230059939126e-01, 2.028573449262586e+01, 0.000000000000000e+00, 6.560156097677962e-01, 1.261388229112240e-03, 0.000000000000000e+00, 1.855021245812608e-02, 2.604139435964275e+00, 0.000000000000000e+00, 2.416620220900824e+00, 3.758645733574362e-01, 0.000000000000000e+00, 1.546036673044382e+01, 4.655962661018791e-01, 0.000000000000000e+00, 3.001351353275551e+02, 1.089341139911149e+03, 0.000000000000000e+00, 9.478850757951104e+02, 3.761886605241797e+07, 0.000000000000000e+00, 9.239038875862661e+02, 2.492695672514572e+04, 0.000000000000000e+00, 3.819823162332494e+01, 2.763286814694207e+03, 0.000000000000000e+00, 2.881634070818209e+03, 1.330020075204456e+03, 0.000000000000000e+00, 6.092965768465920e+03, 1.330020075204459e+03, 0.000000000000000e+00, 6.092965768466021e+03, -2.971387989874464e-09, 0.000000000000000e+00, -3.243785482766101e-09, 5.315788795145504e-10, 0.000000000000000e+00, 8.616308521956110e-11, -2.709624812333511e-09, 0.000000000000000e+00, -3.117461763696207e-09, 2.511812053344973e-10, 0.000000000000000e+00, -5.050108120785216e-11, 3.275341047946183e-06, 0.000000000000000e+00, -1.030990437228510e-07, -1.025463778678741e-07, 0.000000000000000e+00, 3.278625317233007e-06, 1.116649947154441e-05, 0.000000000000000e+00, 1.118978914181107e-05, 1.004044831884008e-05, 0.000000000000000e+00, 1.006851973268857e-05, 1.209055662989423e-05, 0.000000000000000e+00, 1.204491134437248e-05, 1.105102925417705e-05, 0.000000000000000e+00, 1.101522506035246e-05, -8.219161776449447e-06, 0.000000000000000e+00, 2.568382244275549e-04, 1.006782090287331e-05, 0.000000000000000e+00, 1.019793295950486e-05, -5.948219648618848e-03, 0.000000000000000e+00, 7.509392598434843e-02, -1.837325710773579e-03, 0.000000000000000e+00, -1.567162790353156e-03, 1.391488670951542e-03, 0.000000000000000e+00, 1.860656736561281e-03, -1.960127301005156e-03, 0.000000000000000e+00, -7.009129918639868e-04, -4.736008884663697e-03, 0.000000000000000e+00, 7.650738887579622e-02, -7.032129132178765e-04, 0.000000000000000e+00, -2.327622817983471e-03, 4.546975895225950e+00, 0.000000000000000e+00, 4.271987202489258e+00, 2.001968858542198e+01, 0.000000000000000e+00, 1.199560359487269e+00, 6.011334666234845e+00, 0.000000000000000e+00, 4.336028672637212e+00, -7.071203228435842e-06, 0.000000000000000e+00, -7.109841763738515e-06, 5.491675891434572e+00, 0.000000000000000e+00, 3.857113894277761e+00, 5.491675891434582e+00, 0.000000000000000e+00, 3.857113894277761e+00, 1.264461829384461e+09, 0.000000000000000e+00, 3.882926738234647e+03, 2.923950689315959e+03, 0.000000000000000e+00, 2.657248270901126e+03, 1.472857097222496e+04, 0.000000000000000e+00, 1.360263868757501e+04, 2.473742657768840e+01, 0.000000000000000e+00, 2.642225887055386e+03, 6.139665195358271e+03, 0.000000000000000e+00, 5.454976813806923e+03, 6.139665195358272e+03, 0.000000000000000e+00, 5.454976813806915e+03, 6.809332361229421e-02, 0.000000000000000e+00, 7.050443084250765e-02, 1.605519733688702e-02, 0.000000000000000e+00, 1.699362650137199e-02, 1.351068667737980e-01, 0.000000000000000e+00, 1.349337986063653e-01, 1.530356514804111e-01, 0.000000000000000e+00, 3.958161493547925e-02, 1.425724360966263e-01, 0.000000000000000e+00, 1.424067718292700e-01, 1.440643726572410e-01, 0.000000000000000e+00, 3.193737849778620e-02, 6.159102004011469e-02, 0.000000000000000e+00, 6.424843214465149e-02, -1.165111959762888e-02, 0.000000000000000e+00, 1.631576340640063e-01, -1.224221452012871e-02, 0.000000000000000e+00, 1.371954625192637e-01, -3.774097591608685e-03, 0.000000000000000e+00, -3.421009874974261e-03, -4.440950819430016e-03, 0.000000000000000e+00, -4.103783753068395e-03, -1.146131368940269e-02, 0.000000000000000e+00, 1.291703517274918e-01, -3.751952431385474e-03, 0.000000000000000e+00, 4.410306665581231e-02, 4.690956331802242e-01, 0.000000000000000e+00, 4.510013599657614e-01, 3.002590261084630e+00, 0.000000000000000e+00, 8.106289556406623e-02, 8.157354505420076e-01, 0.000000000000000e+00, -2.189176316339010e-02, 9.332547369839095e-02, 0.000000000000000e+00, 9.371704436764607e-02, -1.506632805738628e-03, 0.000000000000000e+00, 1.541490552697972e+00, 5.379432072177780e-03, 0.000000000000000e+00, 5.507424262821117e-03, 2.045815934493834e+04, 0.000000000000000e+00, 2.001799031599123e+04, 1.371943548775819e+01, 0.000000000000000e+00, 1.172457206023195e+01, 1.822735660929244e-02, 0.000000000000000e+00, 2.135359569958684e-02, 1.110157585034119e+01, 0.000000000000000e+00, 8.119525055023427e+00, 1.110157585034117e+01, 0.000000000000000e+00, 8.119525055023392e+00, 7.840097180139711e+06, 0.000000000000000e+00, 6.995912863926699e+06, 5.053456495128867e+04, 0.000000000000000e+00, 5.018302437919404e+04, 4.299925320530890e+09, 0.000000000000000e+00, 3.524571023813973e+09, 9.347978465913981e+02, 0.000000000000000e+00, 8.876125752317497e+02, 1.108038173809243e+04, 0.000000000000000e+00, 6.710786211968265e+03, 1.129842420176502e+04, 0.000000000000000e+00, 5.303149604121342e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.069559741373827e-16, -7.568087448602233e-55, -7.564590598562112e-55, -7.568307602700654e-55, -7.565311571814923e-55, -7.569411490443359e-55, -7.561923107310810e-55, -1.989242769372000e-05, -7.564494696616755e-55, -1.989673115446142e-05, -1.989427975730776e-05, -1.989673115446142e-05, -2.119087993472081e-04, -4.467397467137395e-48, -2.119440034101179e-04, -2.119074077070519e-04, -2.126317724775512e-04, -2.127513435281239e-04, -2.123501878046859e-04, -2.123459632782063e-04, -2.118893989642109e-04, -2.129606882890405e-04, -3.726118509200105e-22, -2.129606882890405e-04, -8.854145924531674e-16, -8.465983073056789e-42, -8.286084110522711e-42, -2.208309136820949e-03, -2.074852488264022e-03, -2.064977162188149e-03, -2.129884239511621e-03, -8.619746416248275e-42, -8.162994600065610e-42, -8.644367373760996e-42, -2.211549110052803e-03, -2.020581246268520e-03, -1.476855641268226e-36, -1.392104777976686e-02, -1.433177532617251e-36, -1.420068489895159e-02, -1.090914756489593e-03, -6.632469137984106e-43, -8.838816526956542e-03, -9.780030312856765e-03, -1.223110297180552e-02, -6.586352912292922e-03, -1.223110297180550e-02, -1.129509796257115e-35, -1.677797947112039e-03, -1.765364576938306e-03, -6.910954331840652e-29, -1.886714019943703e-03, -3.959881620360049e-33, -4.564809706959438e-03, -9.435558677923369e-04, -9.350643742084655e-04, -1.490550807566047e-03, -1.219029218438259e-03, -1.490550807566047e-03, -1.219029218438267e-03, -4.287117352872183e-04, -4.289269557497121e-04, -4.341602873760493e-04, -4.341942258733923e-04, -4.290892887751753e-04, -4.291624277105191e-04, -4.337607375772720e-04, -4.339438331106631e-04, -1.621811900986368e-48, -4.315495514290176e-04, -4.314294492457028e-04, -2.311696445317106e-38, -5.085789401209642e-04, -5.098241459353855e-04, -5.140305056482684e-04, -5.151063529593042e-04, -5.032400227453731e-04, -5.059747057924504e-04, -5.081948776541457e-04, -5.109544913240862e-04, -5.156918682710930e-04, -7.986826888499201e-46, -5.156918682710930e-04, -5.132930897364381e-04, -5.638935307213904e-03, -3.785114622809428e-40, -9.287463012240873e-03, -9.808271821719073e-03, -5.062973953990319e-03, -5.321990659230606e-03, -5.979160616976536e-03, -6.286901917048763e-03, -6.100035846463686e-03, -4.289537430116992e-40, -6.100035846463688e-03, -5.905759828087257e-03, -7.116070739319746e-03, -7.138168956665681e-03, -5.483871880380375e-37, -9.032313247721765e-03, -6.761975468792093e-03, -7.169668346306318e-03, -9.001971901897390e-04, -9.014831310532668e-04, -8.849119329785483e-03, -1.081184642817908e-02, -8.849119329785488e-03, -1.081184642817909e-02, -2.765921022976447e-27, -6.249491545015231e-04, -8.896019703783044e-04, -8.458393598107083e-04, -1.864174876412665e-03, -2.051846310124082e-03, -6.129419054081797e-03, -3.090917992976078e-34, -8.238130282797225e-04, -1.922994218714862e-03, -8.238130282797224e-04, -1.922994218714859e-03, -1.353443823811848e-01, -1.400877611390913e-01, -4.810740079403615e-02, -4.948030375087191e-02, -1.289537076414114e-38, -1.304399371408482e-38, -1.873761620662209e-38, -9.018917563333724e-02, -1.539804396755454e-38, -1.555904407215852e-38, -1.539804396755454e-38, -7.744896313516196e-02, -1.177221114684232e-01, -1.222103228626677e-01, -6.580589071673612e-03, -1.277661060347621e-39, -7.972992407820616e-03, -1.787031381392496e-39, -1.305707311773380e-02, -1.313982185716858e-02, -9.576299382960760e-03, -9.642433286398334e-03, -9.576299382960765e-03, -2.276849042667270e-39, -6.671982109840283e-03, -2.724603667379173e-40, -8.945756645633842e-03, -8.950635911798151e-03, -5.107539505290401e-38, -8.932205809399619e-03, -1.342946783212528e-38, -8.627212859391361e-03, -9.105256856948277e-03, -9.149337135225305e-03, -9.105256856948293e-03, -2.836545766332674e-38, -6.551441217525746e-03, -6.640669124910423e-03, -4.610121191493930e-33, -4.356554635414739e-33, -4.872767265748193e-03, -5.071819022145432e-03, -1.042266555905546e-02, -1.125405335659687e-02, -7.772975237028952e-03, -8.957045983361507e-03, -7.772975237028947e-03, -8.957045983361486e-03, -6.360257738805872e-30, -5.204946629918448e-30, -3.009452909705351e-04, -3.009069568276450e-04, -7.062089156451957e-26, -5.455425877464724e-26, -1.636155674040950e-34, -1.683295172796503e-34, -1.263242601191648e-03, -1.819281082852447e-03, -1.263242601191651e-03, -5.487642530716350e-27])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
