
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.694989486542112e-02, -2.694990447627406e-02, -2.694952260383548e-02, -2.694934225703000e-02, -2.694990388779051e-02, -2.694990388779051e-02, -4.819701409991640e-02, -4.819313904625709e-02, -4.806219800568023e-02, -4.791761293280428e-02, -4.819720883966382e-02, -4.819720883966382e-02, -4.039466747183341e-02, -4.024854254808524e-02, -3.645637116186452e-02, -3.645231454852641e-02, -4.034157856531181e-02, -4.034157856531181e-02, -1.753592041478898e-02, -1.811228498222621e-02, -5.078540275273920e-02, -1.609448158243589e-02, -1.775011192678073e-02, -1.775011192678073e-02, -8.290386560880140e-04, -8.806118334301659e-04, -4.257144513878242e-03, -2.966040870109713e-04, -8.729971311341938e-04, -8.729971311341938e-04, -2.639331589054531e-02, -2.640132011240258e-02, -2.639410647460331e-02, -2.640033133003171e-02, -2.639746095623595e-02, -2.639746095623595e-02, -2.524696335918256e-02, -2.485121875913747e-02, -2.483988008012999e-02, -2.452677968153663e-02, -2.549978677223913e-02, -2.549978677223913e-02, -3.028479072393387e-02, -3.456328130682258e-02, -3.553818021739935e-02, -4.048962751502067e-02, -2.864402844355634e-02, -2.864402844355634e-02, -1.120417524846709e-02, -1.580611405672328e-02, -1.131466411317178e-02, -5.548488009347034e-02, -1.326045159631958e-02, -1.326045159631958e-02, -2.843590617202317e-04, -3.417435809429066e-04, -2.618506914014297e-04, -7.421404708768659e-03, -3.158784276583152e-04, -3.158784276583152e-04, -2.466996025778076e-02, -2.433333796839863e-02, -2.445116750620645e-02, -2.454423470499368e-02, -2.449796515874026e-02, -2.449796515874026e-02, -2.585542247584382e-02, -2.191423858716682e-02, -2.299879670025892e-02, -2.405079115695806e-02, -2.358722649179865e-02, -2.358722649179865e-02, -3.857587100755803e-02, -1.664025151861887e-02, -2.019479931318352e-02, -2.821800309907948e-02, -2.301699649616359e-02, -2.301699649616359e-02, -2.570334849506957e-02, -3.759578413403102e-03, -5.643352848265107e-03, -2.944616684803327e-02, -9.447607338268764e-03, -9.447607338268767e-03, -9.805316751214984e-04, -5.845182219501822e-05, -1.441477688364556e-04, -9.128527461741668e-03, -2.644598076830843e-04, -2.644598076830878e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.058022086913930e-02, -4.057980793197914e-02, -4.057531845143986e-02, -4.058188956498002e-02, -4.058002837191611e-02, -4.058002837191611e-02, -6.876156331647872e-02, -6.874889485143221e-02, -6.835938028801919e-02, -6.835986745614421e-02, -6.875906623082201e-02, -6.875906623082201e-02, -7.290244400593043e-02, -7.264856899190342e-02, -6.672723742817915e-02, -6.888263618745692e-02, -7.281409674220107e-02, -7.281409674220107e-02, -4.731969839579249e-02, -4.746674977958774e-02, -8.867574501397865e-02, -3.146200442588630e-02, -4.745115621592329e-02, -4.745115621592329e-02, -1.606079802349156e-03, -1.704377067559509e-03, -9.032185189786990e-03, -5.817382693575522e-04, -1.690027195761062e-03, -1.690027195761062e-03, -2.944316191518766e-02, -2.943000261770200e-02, -2.943874219089618e-02, -2.942873162673506e-02, -2.944057110421879e-02, -2.944057110421879e-02, -5.518660749920980e-02, -5.353369873320467e-02, -5.463016412058928e-02, -5.327254611869579e-02, -5.472189628886523e-02, -5.472189628886523e-02, -4.098058059806822e-02, -2.532731330122683e-02, -4.457533947276479e-02, -2.917745269316012e-02, -3.854944141670404e-02, -3.854944141670404e-02, -2.218946808597095e-02, -5.408680154261598e-02, -2.139825925790152e-02, -3.003563164253048e-02, -2.825680674177969e-02, -2.825680674177969e-02, -5.580015996958154e-04, -6.693555681440778e-04, -5.149479629321957e-04, -1.550342435986260e-02, -6.195638307999375e-04, -6.195638307999375e-04, -2.533573559997206e-02, -2.780821764587488e-02, -2.698583646109682e-02, -2.630320079033162e-02, -2.664980549909911e-02, -2.664980549909911e-02, -2.416078231754881e-02, -3.910234177847764e-02, -3.645668297207422e-02, -3.299720672161314e-02, -3.490616511911747e-02, -3.490616511911748e-02, -2.512831088544937e-02, -4.802542733071371e-02, -5.089879636559345e-02, -4.813384174786350e-02, -4.924852162497787e-02, -4.924852162497786e-02, -4.575615627641895e-02, -7.803730399010602e-03, -1.399311479169662e-02, -4.287446991932116e-02, -2.464897176931791e-02, -2.464897176931790e-02, -1.893818658610936e-03, -1.159598961673421e-04, -2.845649875945229e-04, -2.390887301267806e-02, -5.198476223260941e-04, -5.198476223260966e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.195357151125014e-11, 8.195191308523393e-11, 8.192109710238373e-11, 8.194695007360403e-11, 8.195291555363452e-11, 8.195291555363452e-11, 1.381353400395379e-06, 1.381607237200257e-06, 1.388500592071220e-06, 1.379485483908863e-06, 1.381428784058155e-06, 1.381428784058155e-06, 1.297242963103811e-03, 1.291201390026783e-03, 1.108920975862123e-03, 9.413176435736979e-04, 1.294895002623336e-03, 1.294895002623336e-03, 5.556198831185427e-01, 5.547910557960405e-01, 9.011191911611722e-04, 2.924897475922075e-01, 5.574954951856872e-01, 5.574954951856872e-01, 2.496169492180050e+01, 2.312979186725955e+01, 2.349315903875774e+00, 6.729875856636357e+01, 2.411351334875399e+01, 2.411351334875399e+01, 1.234465616896263e-08, 1.232001534648762e-08, 1.230822666488344e-08, 1.229132619363070e-08, 1.237808776268995e-08, 1.237808776268995e-08, 8.404267732367212e-06, 7.787324418642119e-06, 8.090157958098608e-06, 7.600017256747084e-06, 8.379750103379994e-06, 8.379750103379994e-06, 7.066479579323297e-03, 7.603708760596539e-03, 1.008903589773390e-02, 1.265334645627283e-02, 5.589098519417092e-03, 5.589098519417092e-03, 3.991183821629470e-01, 3.905686866384084e-01, 3.356030042574007e-01, 6.240143864128774e-05, 5.164787884146237e-01, 5.164787884146237e-01, 7.400507378205180e+01, 5.971622527524021e+01, 1.835900413071681e+02, 1.558209472547899e+00, 8.864163567956228e+01, 8.864163567956226e+01, 5.676702436085963e-03, 5.174358666126134e-03, 5.339427519489509e-03, 5.477815921694735e-03, 5.408112580589684e-03, 5.408112580589682e-03, 7.595447609437569e-03, 6.454298535754080e-03, 6.478748747038337e-03, 6.678824951527546e-03, 6.601226530607503e-03, 6.601226530607500e-03, 6.807671793968977e-03, 1.419922706164414e-01, 9.806573850285330e-02, 5.555877667515385e-02, 7.283559590620153e-02, 7.283559590620156e-02, 1.554101562049825e-02, 2.130289979866280e+00, 2.585506339335427e+00, 8.738889615733944e-02, 2.045925490168219e+00, 2.045925490168217e+00, 1.599705678916243e+01, 6.491333020817555e+02, 2.170484627909243e+02, 2.542181924372923e+00, 1.459604338047220e+02, 1.459604338047218e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.103397274851489e-05, -1.103382055410231e-05, -1.102983261126722e-05, -1.103213582189352e-05, -1.103392344576109e-05, -1.103392344576109e-05, -5.006022305035141e-04, -5.008009741939722e-04, -5.067594467137675e-04, -5.051857641464109e-04, -5.006472774794039e-04, -5.006472774794039e-04, -7.200553111769777e-04, -7.326187270896546e-04, -8.854633217171701e-04, -2.815069629404113e-04, -7.237825683677213e-04, -7.237825683677213e-04, -4.582975079684172e-02, -4.728453293840641e-02, -4.974876646686038e-04, -3.636880906511159e-03, -4.642284987215435e-02, -4.642284987215435e-02, -5.833554102688311e-10, -1.487183591313168e-09, -1.515947623569032e-03, -2.309914574238932e-10, -9.694650354626391e-10, -9.694650354626711e-10, -3.017367282815245e-06, -2.956427207346278e-06, -2.935533028030111e-06, -2.893163270164855e-06, -3.088845478560460e-06, -3.088845478560460e-06, -8.303271425113086e-04, -7.882469466226065e-04, -7.948897794979208e-04, -7.609796206476810e-04, -8.474116369846958e-04, -8.474116369846958e-04, -1.667097792453750e-02, -2.110744826751596e-02, -1.829041797939796e-02, -2.379691485841365e-02, -1.514834602667285e-02, -1.514834602667285e-02, -1.838769772662535e-03, -3.397228253985982e-02, -3.609476657700047e-04, -3.422905961280320e-03, -6.086214253292147e-03, -6.086214253292147e-03, -3.198185236814918e-11, -3.138548627221925e-10, -1.076487944192944e-12, -2.513875742109626e-03, -1.683403987978509e-10, -1.683403987978515e-10, -1.698190855612359e-02, -1.519595372801004e-02, -1.578655467410258e-02, -1.627880875461700e-02, -1.603058096259442e-02, -1.603058096259442e-02, -1.969456386675125e-02, -1.113449583743714e-02, -1.272557992220256e-02, -1.469378504604556e-02, -1.369096050959042e-02, -1.369096050959043e-02, -2.038959898244025e-02, -2.415806412376763e-02, -2.726513959937824e-02, -2.868114549772761e-02, -2.835160921555046e-02, -2.835160921555045e-02, -1.855672210562356e-02, -9.728940497285600e-04, -4.649338910505576e-03, -3.715876630138935e-02, -1.184758372221651e-02, -1.184758372221646e-02, -1.367815514009558e-06, -1.463904745328449e-15, -2.351405874994352e-14, -1.285562048856701e-02, -2.629445748750084e-11, -2.629445748750058e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
