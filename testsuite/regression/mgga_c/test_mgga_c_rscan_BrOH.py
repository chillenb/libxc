
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.266459065225469e-02, -9.266242712838721e-02, -9.265300495991113e-02, -9.268820408045127e-02, -9.266345066904574e-02, -9.266345066904574e-02, -1.246064153014294e-01, -1.246040021292628e-01, -1.245293335965050e-01, -1.245616434411218e-01, -1.246059034740102e-01, -2.343437174083064e-02, -8.181704603274338e-02, -1.891818958679538e-02, -1.836795476876870e-02, -1.860532470558261e-02, -1.893187964525997e-02, -1.893187964525997e-02, -1.479135704355116e-02, -1.496592380378953e-02, -9.310143787086265e-02, -1.046730060528617e-02, -1.484210654047586e-02, -1.484210654047586e-02, -8.248107780317367e-04, -8.749289444310634e-04, -3.971779670309544e-03, -2.705936573363056e-04, -8.681144847785061e-04, -8.681144847785061e-04, -2.638633312158743e-02, -2.639441810671565e-02, -2.638722752804926e-02, -5.489246447991650e-02, -2.639039073068604e-02, -2.639039073068604e-02, -1.063822855334703e-01, -1.065946210334195e-01, -1.063212872789415e-01, -1.064555066802227e-01, -1.066433819287153e-01, -2.246893159693127e-02, -2.182829388537655e-02, -2.296402739657464e-02, -2.119449019001544e-02, -2.206978729462794e-02, -2.225745357423934e-02, -5.599472326574478e-02, -3.534672148694253e-02, -1.335351490502833e-02, -3.494668066106976e-02, -2.439087911411654e-02, -9.679402054113086e-03, -9.679402054113086e-03, -1.897531273847576e-03, -3.185456043826788e-04, -2.540181244366428e-04, -2.475569159664623e-02, -1.968074821401529e-03, -2.878122657884578e-04, -2.389740447200197e-02, -2.365956925096099e-02, -2.774110777289883e-02, -2.381014423742728e-02, -2.377707538125549e-02, -2.377707538125549e-02, -2.372210732818876e-02, -2.130843028733496e-02, -2.205129934369708e-02, -2.272006254117529e-02, -2.238067837445335e-02, -4.470041548922153e-02, -2.282833382343176e-02, -5.343883912877166e-02, -1.684992687133086e-02, -5.723732697504327e-02, -1.808844494365365e-02, -1.808844494365366e-02, -6.315513281903620e-02, -3.631507741046515e-03, -4.877709609922076e-03, -1.933757417157387e-02, -3.022864880561498e-02, -7.256116481917242e-03, -8.974691554280581e-04, -5.157757619575444e-05, -1.410265895458317e-04, -7.116021843593067e-03, -2.398333326944931e-04, -2.398333326944966e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.834929622761589e-02, 3.834772078717248e-02, 3.834086820434437e-02, 3.836649239304429e-02, 3.834846605979320e-02, 3.834846605979320e-02, -1.177140600840808e-01, -1.176621466227870e-01, -1.160782199354825e-01, -1.166990780227935e-01, -1.176997869763289e-01, -3.114698704987314e-02, -6.745956554884994e-02, -2.842653666808953e-02, -2.814816836432496e-02, -2.826913562060532e-02, -2.843256035900881e-02, -2.843256035900881e-02, -2.298235825012007e-02, -2.311176239475596e-02, -8.654784662862099e-02, -1.821065058781935e-02, -2.302107696703869e-02, -2.302107696703869e-02, -1.597865371332098e-03, -1.693345520932000e-03, -7.402036045836646e-03, -5.306372230536661e-04, -1.680547587385789e-03, -1.680547587385789e-03, -2.932740004487484e-02, -2.931757485208482e-02, -2.932631298944112e-02, 1.006820227999179e-03, -2.932247349833486e-02, -2.932247349833486e-02, -1.151001545932995e-01, -1.177532971199646e-01, -1.131660654870149e-01, -1.163270874002687e-01, -1.180233963167171e-01, -3.066989075949371e-02, -2.755182555563853e-02, -2.697259196949239e-02, -2.769803272315313e-02, -2.732083007474040e-02, -2.740599535621639e-02, -7.816316177643001e-03, -4.148458654362640e-02, -2.199200946660668e-02, -4.096690674674007e-02, -2.960632125019840e-02, -1.698492438874569e-02, -1.698492438874569e-02, -2.468934812923988e-03, -6.238329785259878e-04, -4.995245515162501e-04, -2.981823679542785e-02, -2.558776684702760e-03, -5.644231312840591e-04, -2.547127525183301e-02, -2.578205024159929e-02, -2.185624106982149e-02, -2.558789819008452e-02, -2.563132125455974e-02, -2.563132125455974e-02, -2.551098080081205e-02, -2.720683614814457e-02, -2.686625883827343e-02, -2.642077367699257e-02, -2.666398626416300e-02, -6.763099417658985e-03, -2.735273979412868e-02, -5.199851613819430e-02, -2.528538767922330e-02, -6.550732903654352e-02, -2.595020007603349e-02, -2.595020007603350e-02, -5.824952411131527e-02, -6.785916382057864e-03, -9.019056620611816e-03, -2.603237156180851e-02, -3.577046555180430e-02, -1.312364607349692e-02, -1.732106758694679e-03, -1.023172704344381e-04, -2.783978104807452e-04, -1.288408555964778e-02, -4.713731603380698e-04, -4.713731603380724e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.374545990391220e-09, 4.374370299324737e-09, 4.373566806894898e-09, 4.376430814996476e-09, 4.374453676372138e-09, 4.374453676372138e-09, 1.357957441320647e-05, 1.357972393672333e-05, 1.358218443678869e-05, 1.357691602188276e-05, 1.357935766749364e-05, 5.269916217681424e-08, 1.143097284234284e-02, 1.102179332636917e-04, 1.123121163995441e-04, 1.137230251271322e-04, 1.101717958226264e-04, 1.101717958226264e-04, 4.752716094553442e-02, 4.632714357881820e-02, 5.902912769204493e-03, 6.815062486532465e-02, 4.713959126650344e-02, 4.713959126650344e-02, 2.433698682257237e+01, 2.239958992603331e+01, 9.503370820889455e-01, 4.258925919930746e+01, 2.345259260933262e+01, 2.345259260933261e+01, 1.098343522714847e-08, 1.098689740568063e-08, 1.098386889752264e-08, 1.053638982270895e-06, 1.098510981837302e-08, 1.098510981837302e-08, 1.337593366138440e-04, 1.296693982041409e-04, 1.356338621410771e-04, 1.321562701536413e-04, 1.289187749050937e-04, 8.020521570038597e-07, 4.132587736591149e-04, 3.276246148999246e-04, 4.841361135636850e-04, 4.566871667134806e-04, 3.662756961502011e-04, 1.719721922893114e-02, 2.269317725909664e+01, 2.919309151128303e-02, 2.372069072081599e+01, 1.289087020729325e-06, 1.280325644533241e-01, 1.280325644533241e-01, 9.005016841633904e+05, 4.207023284471550e+01, 1.577909623967953e+02, 1.261548297418049e+02, 7.638310334021586e+05, 5.574706081454764e+01, 5.054512924921086e-04, 4.994441975275984e-04, 7.806338602512335e-03, 5.032295645698224e-04, 5.023862492497753e-04, 5.023862492497753e-04, 5.835080245228313e-04, 8.045517071482632e-04, 7.333637893921586e-04, 6.734676364952056e-04, 7.031585328652996e-04, 2.556559643332288e-02, 2.489353112911293e-04, 7.634272747216437e-01, 8.206231671635929e-03, 1.188089394907889e-01, 5.607542963235228e-03, 5.607542963235229e-03, 4.704333643253521e-02, 1.052954251848901e+00, 5.433998196602402e-01, 5.158201693629775e-03, 4.823770256688430e+01, 3.095739597428631e-01, 1.029264986137498e+01, 3.473800623930283e+02, 1.945777431054017e+02, 3.821262582164131e-01, 8.964879009651827e+01, 8.964879009651821e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.965342928911731e-05, -7.965290417996300e-05, -7.965032426258325e-05, -7.965890584801337e-05, -7.965315458934659e-05, -7.965315458934659e-05, -1.349042932738701e-04, -1.353055314612755e-04, -1.475981214066208e-04, -1.427661072160662e-04, -1.350145512946226e-04, -3.210360266068316e-37, -2.330303598003858e-03, 0.000000000000000e+00, -3.035523933084886e-30, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.497849753378088e-29, -3.331729460318655e-29, -7.967528773369857e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.324032900738633e-38, -4.005831178068711e-33, 0.000000000000000e+00, -4.929518776556435e-39, -1.708705046598108e-38, 0.000000000000000e+00, -8.655685856774997e-34, -3.366008423199549e-33, -8.535905163072815e-04, -8.889883558324866e-35, -8.889883558324866e-35, -3.617297527873767e-05, 1.087527319173358e-05, -7.129290774190979e-05, -1.416751171109782e-05, 1.531656616707955e-05, -1.907182771216045e-32, 0.000000000000000e+00, -1.351327012755176e-33, -2.118583987704765e-33, -1.633633512559654e-31, -2.320778042427262e-31, -2.596808582589931e-02, -1.326154529880950e-03, 0.000000000000000e+00, -1.563899400703084e-03, 0.000000000000000e+00, -3.791115291879774e-29, -3.791115291879774e-29, -9.762376165720837e-09, 0.000000000000000e+00, 0.000000000000000e+00, -2.488882583232203e-03, -1.421262383123330e-08, -1.442301630722346e-40, -6.579735029580822e-33, 0.000000000000000e+00, -2.084119275335038e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.273283422396424e-35, 0.000000000000000e+00, -1.946307773650439e-32, 0.000000000000000e+00, 0.000000000000000e+00, -3.519045350129067e-02, 0.000000000000000e+00, -6.117005154348882e-03, -8.510641033021564e-30, 1.551729208487718e-05, 0.000000000000000e+00, 0.000000000000000e+00, -6.350262171452995e-03, 0.000000000000000e+00, -5.894818574773792e-32, -1.965625909696728e-31, -2.647255719272236e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.107153914795890e-30, -4.131339189562865e-42, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
