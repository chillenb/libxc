
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scan_vv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731288071118362e-02, -2.731289713197514e-02, -2.731251685763882e-02, -2.731225811085965e-02, -2.731245853667102e-02, -2.731245853667102e-02, -5.100786377306236e-02, -5.100358460319658e-02, -5.086139492145583e-02, -5.068898809766188e-02, -5.080469201494329e-02, -5.080469201494329e-02, -4.103043878163042e-02, -4.089230067782900e-02, -3.741555105411334e-02, -3.692354788563221e-02, -3.705502564063869e-02, -3.705502564063869e-02, -1.542156201304932e-02, -1.597599877694315e-02, -4.874486702253128e-02, -1.514774647407248e-02, -1.241956412411898e-02, -1.241956412411898e-02, -6.536118836518906e-04, -7.025325139820185e-04, -4.439393700919853e-03, -3.256632268197028e-04, -3.904957849769031e-04, -3.904957849769031e-04, -2.644924235654181e-02, -2.645702385773627e-02, -2.644844114887852e-02, -2.645535838174586e-02, -2.645378474967932e-02, -2.645378474967932e-02, -2.529595813307187e-02, -2.492490496535284e-02, -2.473106062485144e-02, -2.440212811355857e-02, -2.535570055983141e-02, -2.535570055983141e-02, -2.878411278775292e-02, -3.244194193479445e-02, -3.600226612419959e-02, -4.501280726259928e-02, -2.845392783407080e-02, -2.845392783407078e-02, -1.075817889912607e-02, -1.512272764643972e-02, -1.013945783514697e-02, -5.623139723191641e-02, -1.237110719793446e-02, -1.237110719793446e-02, -2.403205118064824e-04, -3.228428492311744e-04, -2.858373321803390e-04, -7.338848890018740e-03, -3.144383498191923e-04, -3.144383498191895e-04, -2.489824790891097e-02, -2.450108839023862e-02, -2.463634760672767e-02, -2.475193033944104e-02, -2.469419579500083e-02, -2.469419579500083e-02, -2.594424109219660e-02, -2.175010770796769e-02, -2.287523648413441e-02, -2.405340219254121e-02, -2.351642639868318e-02, -2.351642639868318e-02, -3.570893266561848e-02, -1.579641016965985e-02, -1.908570549194058e-02, -2.794547061607588e-02, -2.212037133702933e-02, -2.212037133702932e-02, -2.473683162654715e-02, -4.164934940418987e-03, -5.732125940489094e-03, -2.698670484367895e-02, -9.308795868328773e-03, -9.308795868328777e-03, -9.749285078856074e-04, -6.673795966970401e-05, -1.675675675417458e-04, -8.586167967060661e-03, -2.955495832805983e-04, -2.955495832805916e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scan_vv10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.166561009494848e-02, -4.166572234637447e-02, -4.166533829587615e-02, -4.166552758108921e-02, -4.166426807971467e-02, -4.166405881543775e-02, -4.166727300437811e-02, -4.166793699379259e-02, -4.166527983202091e-02, -4.166639083027716e-02, -4.166527983202091e-02, -4.166639083027716e-02, -7.366697094852515e-02, -7.366969813970894e-02, -7.361518738841195e-02, -7.361830380663670e-02, -7.222528085115111e-02, -7.222108576769716e-02, -7.207433267184385e-02, -7.207147501487451e-02, -7.241721681063924e-02, -7.234123699481863e-02, -7.241721681063924e-02, -7.234123699481863e-02, -6.810481155028253e-02, -6.762639639381730e-02, -6.808322516041282e-02, -6.749800487272649e-02, -6.486800838222709e-02, -6.561689269168124e-02, -6.424422938654033e-02, -6.401014797532750e-02, -6.103804128088258e-02, -6.813294574945651e-02, -6.103804128088258e-02, -6.813294574945651e-02, -4.760626419701103e-02, -4.566093198907242e-02, -4.914159965469508e-02, -4.681448799755795e-02, -8.978197750056582e-02, -8.570560069869304e-02, -3.186928856712817e-02, -3.130653461472650e-02, -1.985194566744874e-02, -4.390630921455319e-02, -1.985194566744876e-02, -4.390630921455316e-02, -1.853701233152806e-03, -1.784013080873844e-03, -1.590110573842150e-03, -1.505465230727809e-03, -8.883442091303853e-03, -8.356435786528770e-03, -6.253979009286037e-04, -6.343080696882059e-04, -7.048643244987375e-04, -1.017764475143711e-03, -7.048643244987379e-04, -1.017764475143711e-03, -3.786428534954559e-02, -3.788427240429904e-02, -3.781777530564831e-02, -3.783829548429543e-02, -3.786096712787235e-02, -3.788132504253112e-02, -3.782035122069956e-02, -3.784040797912731e-02, -3.784119089851773e-02, -3.786154791278326e-02, -3.784119089851773e-02, -3.786154791278326e-02, -5.373174702447939e-02, -5.373602153177098e-02, -5.216361170881370e-02, -5.218603395722562e-02, -5.315710067871232e-02, -5.301572889634963e-02, -5.172020716860789e-02, -5.157634783715809e-02, -5.294317743920717e-02, -5.331476172510657e-02, -5.294317743920717e-02, -5.331476172510657e-02, -3.997816918970788e-02, -4.026030889526232e-02, -2.705512317942351e-02, -2.699907780064395e-02, -4.675157832729189e-02, -4.103666739409769e-02, -2.341646206934546e-02, -1.651035892751637e-02, -3.604290878355863e-02, -4.134897214800886e-02, -3.604290878355862e-02, -4.134897214800884e-02, -2.204021216860969e-02, -2.178793138520107e-02, -6.496043355393219e-02, -6.469716113760668e-02, -2.095898421329875e-02, -1.967059691738278e-02, -1.698627197202754e-02, -1.711217363296609e-02, -3.112960577356821e-02, -2.913692349416219e-02, -3.112960577356822e-02, -2.913692349416220e-02, -4.739777176281393e-04, -4.592332516462394e-04, -6.282300815107062e-04, -6.203512723664231e-04, -5.694204799329296e-04, -5.433297136236982e-04, -1.428313645026855e-02, -1.417959134856277e-02, -7.240619051041600e-04, -5.637388604284360e-04, -7.240619051041566e-04, -5.637388604284336e-04, -2.637609704421675e-02, -2.606734277848451e-02, -2.883441579291670e-02, -2.852807600405744e-02, -2.803674293807706e-02, -2.772862874333903e-02, -2.732343197355914e-02, -2.701653745866111e-02, -2.768623953188293e-02, -2.737875897395199e-02, -2.768623953188293e-02, -2.737875897395199e-02, -2.490950605186848e-02, -2.462838736638825e-02, -3.902038404318327e-02, -3.871993179924915e-02, -3.667473638652992e-02, -3.634881440910153e-02, -3.324080818174815e-02, -3.296694507431477e-02, -3.516345038820133e-02, -3.488137258751885e-02, -3.516345038820133e-02, -3.488137258751885e-02, -2.601835048149886e-02, -2.578211614393503e-02, -4.839516673796737e-02, -4.809817315631408e-02, -5.236308193407539e-02, -5.170746495095632e-02, -5.064522640075564e-02, -5.001992518126017e-02, -5.075556210201111e-02, -5.078368537932294e-02, -5.075556210201109e-02, -5.078368537932292e-02, -4.506989682660541e-02, -4.447188041004090e-02, -9.070736697148385e-03, -9.007785885343719e-03, -1.130800952453664e-02, -1.088498343756935e-02, -4.322371163350337e-02, -4.165874977283707e-02, -2.011925346382281e-02, -1.887046771162984e-02, -2.011925346382279e-02, -1.887046771162982e-02, -1.890235969803358e-03, -1.828154131053829e-03, -1.311676615416187e-04, -1.309394669645837e-04, -3.356954890875954e-04, -3.196076967083718e-04, -2.126721265222490e-02, -2.090878671850698e-02, -6.670445153930256e-04, -5.325274999979122e-04, -6.670445153930170e-04, -5.325274999979067e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.463980725334387e-11, 1.692796145066877e-10, 8.463980725334387e-11, 8.463971682236281e-11, 1.692794336447256e-10, 8.463971682236281e-11, 8.463371007468133e-11, 1.692674201493626e-10, 8.463371007468133e-11, 8.463497785599303e-11, 1.692699557119861e-10, 8.463497785599303e-11, 8.463511321210386e-11, 1.692702264242077e-10, 8.463511321210386e-11, 8.463511321210386e-11, 1.692702264242077e-10, 8.463511321210386e-11, 1.531662832865329e-06, 3.063325665730659e-06, 1.531662832865329e-06, 1.533378888290773e-06, 3.066757776581547e-06, 1.533378888290773e-06, 1.578170383486571e-06, 3.156340766973142e-06, 1.578170383486571e-06, 1.573233715104904e-06, 3.146467430209808e-06, 1.573233715104904e-06, 1.569063444372054e-06, 3.138126888744108e-06, 1.569063444372054e-06, 1.569063444372054e-06, 3.138126888744108e-06, 1.569063444372054e-06, 1.587768803241762e-03, 3.175537606483524e-03, 1.587768803241762e-03, 1.577051405745474e-03, 3.154102811490948e-03, 1.577051405745474e-03, 1.320239669323479e-03, 2.640479338646958e-03, 1.320239669323479e-03, 1.295669110033509e-03, 2.591338220067017e-03, 1.295669110033509e-03, 1.310885255744956e-03, 2.621770511489911e-03, 1.310885255744956e-03, 1.310885255744956e-03, 2.621770511489911e-03, 1.310885255744956e-03, 5.329449947750436e-01, 1.065889989550087e+00, 5.329449947750436e-01, 5.545117692180261e-01, 1.109023538436052e+00, 5.545117692180261e-01, 8.537757623820191e-04, 1.707551524764039e-03, 8.537757623820191e-04, 3.529043555799977e-01, 7.058087111599953e-01, 3.529043555799977e-01, 1.029276050467878e-01, 2.058552100935756e-01, 1.029276050467878e-01, 1.029276050467879e-01, 2.058552100935758e-01, 1.029276050467879e-01, 2.900244933416783e+02, 5.800489866833566e+02, 2.900244933416783e+02, 1.323399243881905e+02, 2.646798487763810e+02, 1.323399243881905e+02, 2.492713051238058e+00, 4.985426102476117e+00, 2.492713051238058e+00, 1.602181721753638e+02, 3.204363443507277e+02, 1.602181721753638e+02, 1.132897243949345e+02, 2.265794487898690e+02, 1.132897243949345e+02, 1.132897243949346e+02, 2.265794487898693e+02, 1.132897243949346e+02, 1.031719130304234e-07, 2.063438260608467e-07, 1.031719130304234e-07, 1.034432142176706e-07, 2.068864284353411e-07, 1.034432142176706e-07, 1.031708850292732e-07, 2.063417700585464e-07, 1.031708850292732e-07, 1.034108475866345e-07, 2.068216951732690e-07, 1.034108475866345e-07, 1.033161795699613e-07, 2.066323591399226e-07, 1.033161795699613e-07, 1.033161795699613e-07, 2.066323591399226e-07, 1.033161795699613e-07, 7.876260782711171e-06, 1.575252156542234e-05, 7.876260782711171e-06, 7.286538825484793e-06, 1.457307765096959e-05, 7.286538825484793e-06, 7.483788384047058e-06, 1.496757676809412e-05, 7.483788384047058e-06, 6.965342528420722e-06, 1.393068505684144e-05, 6.965342528420722e-06, 7.724905108653544e-06, 1.544981021730709e-05, 7.724905108653544e-06, 7.724905108653544e-06, 1.544981021730709e-05, 7.724905108653544e-06, 6.005500297942051e-03, 1.201100059588410e-02, 6.005500297942051e-03, 6.281959889488492e-03, 1.256391977897698e-02, 6.281959889488492e-03, 1.287965445741495e-02, 2.575930891482991e-02, 1.287965445741495e-02, 1.801480295270887e-02, 3.602960590541773e-02, 1.801480295270887e-02, 5.529053480419613e-03, 1.105810696083923e-02, 5.529053480419613e-03, 5.529053480419615e-03, 1.105810696083923e-02, 5.529053480419615e-03, 5.003390830799945e-01, 1.000678166159989e+00, 5.003390830799945e-01, 5.743660657781640e-01, 1.148732131556328e+00, 5.743660657781640e-01, 5.493874275302847e-01, 1.098774855060570e+00, 5.493874275302847e-01, 7.175053309628422e-05, 1.435010661925684e-04, 7.175053309628422e-05, 8.599075797079906e-01, 1.719815159415981e+00, 8.599075797079906e-01, 8.599075797079914e-01, 1.719815159415983e+00, 8.599075797079914e-01, 2.935020165899138e+02, 5.870040331798275e+02, 2.935020165899138e+02, 1.835902690661020e+02, 3.671805381322039e+02, 1.835902690661020e+02, 9.158143535944807e+02, 1.831628707188961e+03, 9.158143535944807e+02, 1.165505837770836e+00, 2.331011675541673e+00, 1.165505837770836e+00, 3.916602836332020e+02, 7.833205672664039e+02, 3.916602836332020e+02, 3.916602836332021e+02, 7.833205672664043e+02, 3.916602836332021e+02, 5.683885051795614e-03, 1.136777010359123e-02, 5.683885051795614e-03, 5.159448606238804e-03, 1.031889721247761e-02, 5.159448606238804e-03, 5.326062789605890e-03, 1.065212557921178e-02, 5.326062789605890e-03, 5.478027759363713e-03, 1.095605551872743e-02, 5.478027759363713e-03, 5.400649992960074e-03, 1.080129998592015e-02, 5.400649992960074e-03, 5.400649992960074e-03, 1.080129998592015e-02, 5.400649992960074e-03, 7.369588405635432e-03, 1.473917681127087e-02, 7.369588405635432e-03, 6.188221537909845e-03, 1.237644307581969e-02, 6.188221537909845e-03, 6.200576081507644e-03, 1.240115216301529e-02, 6.200576081507644e-03, 6.432866823884009e-03, 1.286573364776802e-02, 6.432866823884009e-03, 6.345932365899252e-03, 1.269186473179850e-02, 6.345932365899252e-03, 6.345932365899254e-03, 1.269186473179851e-02, 6.345932365899254e-03, 5.889403747471474e-03, 1.177880749494295e-02, 5.889403747471474e-03, 1.552004900951469e-01, 3.104009801902937e-01, 1.552004900951469e-01, 1.060398584060230e-01, 2.120797168120460e-01, 1.060398584060230e-01, 6.841758555564513e-02, 1.368351711112903e-01, 6.841758555564513e-02, 7.858511069740873e-02, 1.571702213948175e-01, 7.858511069740873e-02, 7.858511069740870e-02, 1.571702213948174e-01, 7.858511069740870e-02, 1.374198631723376e-02, 2.748397263446753e-02, 1.374198631723376e-02, 4.319873324286363e+00, 8.639746648572725e+00, 4.319873324286363e+00, 1.444988899658426e+00, 2.889977799316853e+00, 1.444988899658426e+00, 8.214184380984096e-02, 1.642836876196819e-01, 8.214184380984096e-02, 1.231735882313884e+00, 2.463471764627769e+00, 1.231735882313884e+00, 1.231735882313877e+00, 2.463471764627755e+00, 1.231735882313877e+00, 3.125415518436598e+01, 6.250831036873197e+01, 3.125415518436598e+01, 4.380177073749247e+03, 8.760354147498494e+03, 4.380177073749247e+03, 8.374497126421592e+02, 1.674899425284318e+03, 8.374497126421592e+02, 2.307530899030289e+00, 4.615061798060578e+00, 2.307530899030289e+00, 5.230438587370830e+02, 1.046087717474166e+03, 5.230438587370830e+02, 5.230438587370877e+02, 1.046087717474176e+03, 5.230438587370877e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.123480704182663e-05, -1.123480704182662e-05, -1.123490967275467e-05, -1.123490967275467e-05, -1.123479563499411e-05, -1.123479563499411e-05, -1.123326476282191e-05, -1.123326476282190e-05, -1.123414816932121e-05, -1.123414816932121e-05, -1.123414816932121e-05, -1.123414816932121e-05, -5.552518319338255e-04, -5.552518319338251e-04, -5.564175606149902e-04, -5.564175606149900e-04, -5.875975723957456e-04, -5.875975723957460e-04, -5.896672503554304e-04, -5.896672503554306e-04, -5.835643379811603e-04, -5.835643379811603e-04, -5.835643379811603e-04, -5.835643379811603e-04, -1.892345224691395e-03, -1.892345224691395e-03, -1.877399543987904e-03, -1.877399543987904e-03, -1.554292695836556e-03, -1.554292695836555e-03, -1.726094706904750e-03, -1.726094706904750e-03, -1.687588506656379e-03, -1.687588506656379e-03, -1.687588506656379e-03, -1.687588506656379e-03, -3.846245990789655e-02, -3.846245990789655e-02, -4.187047075562831e-02, -4.187047075562834e-02, -3.877697511701801e-04, -3.877697511701801e-04, -6.880112615135992e-03, -6.880112615135995e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.827806747026873e-04, -7.827806747026882e-04, -2.868453812917673e-04, -2.868453812917675e-04, -4.113674775867130e-04, -4.113674775867130e-04, -5.925196087302496e-07, -5.925196087302496e-07, -6.031228807218401e-06, -6.031228807218408e-06, -6.031228807218240e-06, -6.031228807218243e-06, -2.058993994392966e-04, -2.058993994392966e-04, -2.066160831890681e-04, -2.066160831890681e-04, -2.059158229501049e-04, -2.059158229501049e-04, -2.065490153428614e-04, -2.065490153428615e-04, -2.062706116978290e-04, -2.062706116978289e-04, -2.062706116978290e-04, -2.062706116978289e-04, -7.697223757052351e-04, -7.697223757052353e-04, -7.294790401014717e-04, -7.294790401014715e-04, -7.225985114966294e-04, -7.225985114966294e-04, -6.871577778360025e-04, -6.871577778360028e-04, -7.693633618761893e-04, -7.693633618761892e-04, -7.693633618761893e-04, -7.693633618761892e-04, -1.486104836742570e-02, -1.486104836742570e-02, -1.845233366421952e-02, -1.845233366421954e-02, -2.404301766395121e-02, -2.404301766395121e-02, -3.297558813471464e-02, -3.297558813471466e-02, -1.434541157096824e-02, -1.434541157096824e-02, -1.434541157096824e-02, -1.434541157096824e-02, -2.669739106176951e-03, -2.669739106176953e-03, -4.355646495095184e-02, -4.355646495095187e-02, -2.017308305140755e-03, -2.017308305140756e-03, -4.423509090008584e-03, -4.423509090008584e-03, -1.199627251057687e-02, -1.199627251057687e-02, -1.199627251057689e-02, -1.199627251057689e-02, -1.752791369645390e-08, -1.752791369645389e-08, -1.133200051673925e-07, -1.133200051673925e-07, -1.674002668694876e-06, -1.674002668694876e-06, -8.855971963552456e-04, -8.855971963552459e-04, -4.298706094326768e-07, -4.298706094326766e-07, -4.298706094326719e-07, -4.298706094326719e-07, -1.579798638078002e-02, -1.579798638078003e-02, -1.409346990172433e-02, -1.409346990172433e-02, -1.464055410029288e-02, -1.464055410029289e-02, -1.513439206587738e-02, -1.513439206587739e-02, -1.488299921176724e-02, -1.488299921176723e-02, -1.488299921176724e-02, -1.488299921176723e-02, -1.810215177485105e-02, -1.810215177485106e-02, -9.804254433599622e-03, -9.804254433599623e-03, -1.127875381788706e-02, -1.127875381788706e-02, -1.330884888382565e-02, -1.330884888382564e-02, -1.228866698139099e-02, -1.228866698139099e-02, -1.228866698139100e-02, -1.228866698139100e-02, -1.924365218295607e-02, -1.924365218295608e-02, -2.264350846589927e-02, -2.264350846589926e-02, -2.641519639523336e-02, -2.641519639523336e-02, -3.655736406191214e-02, -3.655736406191216e-02, -2.890511991455075e-02, -2.890511991455074e-02, -2.890511991455074e-02, -2.890511991455072e-02, -1.643661026084711e-02, -1.643661026084712e-02, -1.436525854277067e-03, -1.436525854277068e-03, -5.382935578097767e-04, -5.382935578097764e-04, -3.884362492011943e-02, -3.884362492011943e-02, -3.711679050740012e-03, -3.711679050740012e-03, -3.711679050739971e-03, -3.711679050739972e-03, -1.264205029191565e-06, -1.264205029191565e-06, -3.185608387851799e-10, -3.185608387851799e-10, -9.842807023124962e-07, -9.842807023124958e-07, -8.166073131109883e-03, -8.166073131109881e-03, -8.437382902531418e-07, -8.437382902531417e-07, -8.437382902531011e-07, -8.437382902531018e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
