
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.139264822769435e-02, -5.139283774210485e-02, -5.139306394883623e-02, -5.138994627926489e-02, -5.139275368994694e-02, -5.139275368994694e-02, -5.695240495828763e-02, -5.695080796589638e-02, -5.689317308224828e-02, -5.677377297400641e-02, -5.695290627343610e-02, -5.695290627343610e-02, -4.641995319409558e-02, -4.626012253092211e-02, -4.149372605880472e-02, -4.014359027345080e-02, -4.636002820026795e-02, -4.636002820026795e-02, -1.184177463267218e-02, -1.235177691552927e-02, -7.730621941131000e-02, -1.174557361634759e-02, -1.201480794173833e-02, -1.201480794173833e-02, -5.409353683685405e-04, -6.425368843957478e-04, -3.699296528258776e-03, -7.718233648959938e-03, -5.811660258356686e-04, -5.811660258356719e-04, -5.010333970055563e-02, -5.015073024213579e-02, -5.010751393620787e-02, -5.014439805080724e-02, -5.012855260300203e-02, -5.012855260300203e-02, -3.419958728542066e-02, -3.413355405791408e-02, -3.362110548994502e-02, -3.355889573651916e-02, -3.490623095618547e-02, -3.490623095618547e-02, -3.468892160968445e-02, -4.098129021721457e-02, -3.631309129475112e-02, -4.161182493665027e-02, -3.480688550939250e-02, -3.480688550939250e-02, -6.993537452714795e-03, -9.641914012496835e-03, -6.943139416050436e-03, -6.031445108446844e-02, -7.038060976981268e-03, -7.038060976981268e-03, -3.514892837761514e-03, -5.639814815425361e-03, -1.799995847045622e-03, -7.830659931612673e-03, -7.145211298406489e-03, -7.145211298406499e-03, -3.645626755805432e-02, -3.527671347442457e-02, -3.569187077644542e-02, -3.601863730025612e-02, -3.585493338264924e-02, -3.585493338264924e-02, -3.687814693971498e-02, -2.598132806183413e-02, -2.895769739013893e-02, -3.192348779130626e-02, -3.046815577692540e-02, -3.046815577692541e-02, -4.308062996648557e-02, -1.197200479679356e-02, -1.611744007417007e-02, -2.540614975023174e-02, -2.001184023073579e-02, -2.001184023073579e-02, -2.710720042284556e-02, -2.599421149380392e-03, -4.651976924957368e-03, -2.684813785851508e-02, -5.520554919424660e-03, -5.520554919424668e-03, -7.367553660026587e-03, -8.316231698564628e-03, -1.388359360746557e-03, -5.539690093291017e-03, -6.916141121461634e-03, -6.916141121461643e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.176276158965244e-02, -8.176244981280628e-02, -8.176149904864884e-02, -8.176659392377390e-02, -8.176259350804949e-02, -8.176259350804949e-02, -8.207599212855289e-02, -8.207223162999756e-02, -8.196576636865821e-02, -8.209414758195015e-02, -8.207442309290752e-02, -8.207442309290752e-02, -7.348593349670067e-02, -7.361186009713371e-02, -7.554892331228967e-02, -7.416838093249703e-02, -7.352993641989752e-02, -7.352993641989752e-02, -3.430489425454599e-02, -3.490927079164664e-02, -8.281690552639742e-02, -3.223881138664171e-02, -3.451203145957112e-02, -3.451203145957112e-02, -1.689791978830644e-02, -1.695143615919970e-02, -2.000921633171526e-02, -2.659229991165640e-02, -1.675455410507263e-02, -1.675455410507263e-02, -7.424460055156229e-02, -7.416271683803355e-02, -7.423649170805222e-02, -7.417282003519561e-02, -7.420229410982483e-02, -7.420229410982483e-02, -7.986812633672255e-02, -7.963676639035881e-02, -7.964013949839414e-02, -7.945588791247345e-02, -7.995723064781664e-02, -7.995723064781664e-02, -5.405520575528020e-02, -4.465420349580825e-02, -5.429316789450760e-02, -4.535051491570036e-02, -5.332353771069134e-02, -5.332353771069134e-02, -2.459637551836932e-02, -3.252790572337379e-02, -2.424554987987721e-02, -5.560586010353735e-02, -2.506632443901583e-02, -2.506632443901583e-02, -2.133749514529208e-02, -2.390617384292108e-02, -1.569748385433111e-02, -2.349607755071776e-02, -2.420204320043489e-02, -2.420204320043490e-02, -4.223400092397063e-02, -4.491803541152283e-02, -4.400459146124461e-02, -4.326144090373529e-02, -4.363691922899171e-02, -4.363691922899171e-02, -4.092036049210884e-02, -5.380560453319817e-02, -5.221804245094412e-02, -4.916955948341024e-02, -5.088696957586513e-02, -5.088696957586514e-02, -4.536949231639954e-02, -3.754376479959780e-02, -4.346669623961655e-02, -4.974850019875651e-02, -4.703932189183070e-02, -4.703932189183068e-02, -5.353447988991311e-02, -1.986091818355072e-02, -2.097446171936872e-02, -4.631647742089863e-02, -2.141152742569393e-02, -2.141152742569393e-02, -2.490697703932209e-02, -2.407088300397988e-02, -1.664974878242820e-02, -2.092144429972067e-02, -2.262598273477523e-02, -2.262598273477528e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.165671288880206e-10, 1.165666427453817e-10, 1.165614691646691e-10, 1.165694414938965e-10, 1.165668982490117e-10, 1.165668982490117e-10, 1.006542966798556e-06, 1.006552349626343e-06, 1.006405812152953e-06, 1.002465234835230e-06, 1.006545421597748e-06, 1.006545421597748e-06, 2.499252369065464e-03, 2.493243002448699e-03, 2.278209166912130e-03, 2.154960931569215e-03, 2.497051357877014e-03, 2.497051357877014e-03, 3.085172568694508e-01, 3.086466150432850e-01, 1.771525580358331e-03, 7.092552604693670e-01, 3.089951357178118e-01, 3.089951357178118e-01, 1.947570429833500e+03, 1.696464491347018e+03, 1.771380526764599e+01, 1.971217805022108e+04, 1.766476254116975e+03, 1.766476254116975e+03, 1.384547279610953e-07, 1.385949232605174e-07, 1.384668156921992e-07, 1.385759152099065e-07, 1.385297252010046e-07, 1.385297252010046e-07, 8.634048935709140e-06, 8.416973282180072e-06, 8.525013382701183e-06, 8.355952353757254e-06, 8.625442557380834e-06, 8.625442557380834e-06, 4.965793227316709e-03, 4.500302968556218e-03, 6.552145982386395e-03, 6.947365258634509e-03, 4.259424519527489e-03, 4.259424519527489e-03, 1.381107494081931e+00, 1.847634355659828e-01, 1.517250115646477e+00, 2.533097454281586e-05, 9.719871901228246e-01, 9.719871901228246e-01, 1.981107706337114e+04, 1.422150361178255e+04, 4.063673754722044e+04, 7.120310526534253e+00, 2.218618859243728e+04, 2.218618859243727e+04, 5.525410466043237e-03, 5.316969840396641e-03, 5.389758383707208e-03, 5.447593568799616e-03, 5.418575933752738e-03, 5.418575933752738e-03, 6.588465498960959e-03, 6.968830042698987e-03, 6.865119407853991e-03, 6.786819844228190e-03, 6.848297011167973e-03, 6.848297011167973e-03, 3.690313618118256e-03, 9.021561210483330e-02, 6.068873609376450e-02, 3.695798980039465e-02, 4.750268802027170e-02, 4.750268802027173e-02, 1.158412850433604e-02, 2.085874152440537e+01, 8.488012782375955e+00, 5.699439817533754e-02, 2.951370286384423e+00, 2.951370286384424e+00, 1.339941356677115e+03, 8.036883897741034e+05, 9.435939517400261e+04, 3.672094288159108e+00, 4.041424880884997e+04, 4.041424880885020e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-9.380754151664047e-06, -9.380773743022092e-06, -9.380734160910727e-06, -9.380415869697423e-06, -9.380765544940477e-06, -9.380765544940477e-06, -2.985225654386373e-04, -2.985378490591695e-04, -2.989344301933171e-04, -2.981300395914317e-04, -2.985279872849431e-04, -2.985279872849431e-04, -4.807859958425013e-03, -4.790008706189639e-03, -4.286599065321256e-03, -4.266700887129511e-03, -4.801472888038141e-03, -4.801472888038141e-03, -2.057919300907038e-02, -2.106121024007084e-02, -4.069972371788282e-03, -1.731823196487322e-02, -2.073435447343920e-02, -2.073435447343920e-02, -3.218620617772167e-02, -3.212132026364147e-02, -2.079241583698482e-02, -2.899666355744473e-02, -3.247186098309989e-02, -3.247186098309989e-02, -1.627144417963054e-04, -1.629173637696204e-04, -1.627344076002851e-04, -1.628922024577576e-04, -1.628196000728552e-04, -1.628196000728552e-04, -5.929134984673086e-04, -5.926741646409690e-04, -5.854147078882892e-04, -5.853010499974187e-04, -6.025358788861170e-04, -6.025358788861170e-04, -8.070727243139130e-03, -8.872411789145758e-03, -8.635724221995480e-03, -9.874549188490388e-03, -7.866575904096618e-03, -7.866575904096618e-03, -1.622958678627128e-02, -1.383006302331851e-02, -1.707478754630837e-02, -1.234325755339744e-03, -1.746373226116131e-02, -1.746373226116131e-02, -2.941879406916125e-02, -2.970964034374328e-02, -3.946795970129408e-02, -1.966744821654926e-02, -3.305878241352145e-02, -3.305878241352141e-02, -1.030931517289242e-02, -9.858355857462774e-03, -1.001594523388913e-02, -1.014095856512935e-02, -1.007813232339330e-02, -1.007813232339330e-02, -1.098058771907362e-02, -8.469714193226384e-03, -9.172596797571719e-03, -9.873345850982169e-03, -9.528073130229235e-03, -9.528073130229235e-03, -8.127499160373744e-03, -1.283517712743608e-02, -1.306346282378110e-02, -1.391009192839747e-02, -1.367030437960829e-02, -1.367030437960829e-02, -9.722632520217532e-03, -2.017016861015879e-02, -1.907779535005288e-02, -1.749146411677621e-02, -1.930708851325989e-02, -1.930708851325989e-02, -2.950599517424269e-02, -2.891990323075576e-02, -3.117888854779587e-02, -2.069192619386042e-02, -3.646226591346791e-02, -3.646226591346795e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
