
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.375322740229655e-02, -7.375288108700080e-02, -7.375137113528685e-02, -7.375700568152938e-02, -7.375304493698108e-02, -7.375304493698108e-02, -9.027984901797503e-02, -9.027173748946107e-02, -9.002879720662160e-02, -9.012344660807009e-02, -9.027764131572152e-02, -3.527094359100733e-02, -9.467376491275681e-02, -1.917279053994790e-02, -1.793779221818224e-02, -1.845245114767908e-02, -1.920462447736505e-02, -1.920462447736505e-02, -9.985917809633683e-03, -1.023820658850350e-02, -1.301418987001440e-01, -5.312525685201373e-03, -1.005874798546408e-02, -1.005874798546408e-02, -2.104643672410169e-04, -2.247368427676605e-04, -1.334750022244469e-03, -6.094131522557912e-05, -2.227440703837311e-04, -2.227440703837310e-04, -5.001892751317030e-02, -5.006716518290830e-02, -5.002426133814236e-02, -6.556832963268955e-02, -5.004313011314772e-02, -5.004313011314772e-02, -9.158589404490428e-02, -9.007450805588053e-02, -9.227858711895384e-02, -9.104482498852712e-02, -8.968932026957946e-02, -3.109606978493595e-02, -2.696735076920762e-02, -3.125768255589274e-02, -2.483043627601367e-02, -2.778768514375742e-02, -2.852173187321707e-02, -4.962894332578866e-02, -1.656183621119768e-01, -8.243849117520548e-03, -1.560675705972247e-01, -3.895050384704705e-02, -4.609399804114460e-03, -4.609399804114460e-03, -3.220272574676248e+00, -7.319599494732764e-05, -5.783596962759003e-05, -2.791001753101414e-01, -3.057719325705648e+00, -6.556732327225578e-05, -3.520654407721768e-02, -3.412736453539299e-02, -3.854860327160015e-02, -3.480630010522926e-02, -3.465593216500357e-02, -3.465593216500357e-02, -3.438935764161365e-02, -2.505913383112240e-02, -2.761125823634280e-02, -3.013992702788788e-02, -2.882797142168365e-02, -4.395242240051396e-02, -3.078585593124575e-02, -7.034253554132736e-02, -1.358261919833497e-02, -5.293702413886284e-02, -1.609814835509101e-02, -1.609814835509101e-02, -5.345949270902754e-02, -1.196164284738492e-03, -1.745267234314444e-03, -1.902548937476831e-02, -1.633054990501352e-01, -2.960824267482793e-03, -2.321787437122015e-04, -9.750682367388842e-06, -3.011446502351749e-05, -2.862045921869035e-03, -5.383162320431712e-05, -5.383162320432060e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.262325904295974e-02, -5.262349202211013e-02, -5.262451111379191e-02, -5.262072007270735e-02, -5.262338177188398e-02, -5.262338177188398e-02, -3.459659050998732e-02, -3.460177544097635e-02, -3.475733930981381e-02, -3.469734322859544e-02, -3.459803806001901e-02, -8.343620831296578e-02, -1.069414849522234e-02, -5.815219199054235e-02, -5.661627537829979e-02, -5.723366914154476e-02, -5.818926100925294e-02, -5.818926100925294e-02, -3.223215635636863e-02, -3.261170066967392e-02, 6.505178788566687e-03, -2.476280762056794e-02, -3.234456075563016e-02, -3.234456075563016e-02, -1.670263497535614e-02, -1.670847255191297e-02, -1.884021305402365e-02, -2.027769280600824e-02, -1.654626008316284e-02, -1.654626008316283e-02, -7.431890585617604e-02, -7.423669557341267e-02, -7.430981969684960e-02, -5.320352836811942e-02, -7.427770749228742e-02, -7.427770749228742e-02, -2.835216702480124e-02, -2.936643282523269e-02, -2.789161271075919e-02, -2.871672531690652e-02, -2.962059919744308e-02, -7.782752099675853e-02, -5.640479368201740e-02, -5.411100698107508e-02, -5.633318888730834e-02, -5.536117905927653e-02, -5.609753495327284e-02, -3.386430719766630e-02, 5.012939570606481e-02, -3.078278608250875e-02, 4.612121604929879e-02, -7.449408114596597e-02, -2.251340579371320e-02, -2.251340579371320e-02, 1.110015353152290e+00, -1.952173762753502e-02, -1.435803545031258e-02, 9.873274714144835e-02, 1.055000130942827e+00, -1.855519324374920e-02, -4.398265451416402e-02, -4.631453779002485e-02, -3.978960476102857e-02, -4.487479400846888e-02, -4.520177067079337e-02, -4.520177067079337e-02, -4.438831005529201e-02, -5.376584391396076e-02, -5.267325993101601e-02, -5.047023314444008e-02, -5.175434823357521e-02, -3.448356158379864e-02, -5.641799550099444e-02, -3.868760828396378e-03, -4.094210288911797e-02, -2.070894334542512e-02, -4.430230165675257e-02, -4.430230165675257e-02, -2.582154312901097e-02, -1.919702682271706e-02, -1.938550137226375e-02, -4.575098350796903e-02, 5.044159525097325e-02, -1.938061422946091e-02, -2.049629244125733e-02, -1.530527905240854e-02, -1.545038745295594e-02, -1.879190678367330e-02, -1.703733422377647e-02, -1.703733422377645e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.948476973994877e-10, 1.948445415662104e-10, 1.948288036005467e-10, 1.948804350588478e-10, 1.948460480476530e-10, 1.948460480476530e-10, 1.996933258452370e-06, 1.996752363118481e-06, 1.990979363569961e-06, 1.992432648920317e-06, 1.996836613164944e-06, 5.262265230464044e-07, 7.555563293958110e-03, 8.130527902329952e-04, 8.142739311847870e-04, 8.298110942817819e-04, 8.131101547593744e-04, 8.131101547593744e-04, 2.619342957982046e-01, 2.566825226454738e-01, 4.137173297287780e-03, 4.150420997329248e-01, 2.601926721847426e-01, 2.601926721847426e-01, 1.905788252448239e+03, 1.650721377060369e+03, 1.527484975512340e+01, 1.264185625963363e+04, 1.725156046146600e+03, 1.725156046146599e+03, 1.381339456089839e-07, 1.382772805629359e-07, 1.381504317623663e-07, 2.023737225576408e-07, 1.382050617769871e-07, 1.382050617769871e-07, 3.549116654764207e-05, 3.376760696646360e-05, 3.624169289526330e-05, 3.484198490839910e-05, 3.340520326298370e-05, 7.468412036048695e-06, 3.564379678695297e-03, 3.111055635592269e-03, 3.974597099935730e-03, 4.018135251374576e-03, 3.272118268269272e-03, 7.038609935906737e-03, 1.722403173828435e+02, 1.640290344033603e-01, 1.732733293298060e+02, 1.377920901859507e-05, 7.836086254046696e-01, 7.836086254046696e-01, 1.141097101126956e+10, 1.019194280508853e+04, 3.528167434636794e+04, 3.013367311253138e+03, 8.852596334830084e+09, 1.421982346740502e+04, 5.268634376485028e-03, 5.083513581965235e-03, 5.992045231980670e-03, 5.199550470566300e-03, 5.173655051292581e-03, 5.173655051292581e-03, 5.988832568742765e-03, 6.659032294389970e-03, 6.453847916668995e-03, 6.287920227724494e-03, 6.368149081125948e-03, 1.137868601552779e-02, 2.332741528894693e-03, 1.068051840697952e+00, 5.067638832007768e-02, 1.065171904468353e-01, 3.695187292095185e-02, 3.695187292095189e-02, 3.038460961417719e-02, 1.918070516960270e+01, 7.029772199172371e+00, 3.682418428894400e-02, 4.769924178425467e+02, 2.392545752178460e+00, 9.094903753343701e+02, 4.114862624175583e+05, 8.477455077596180e+04, 2.929229033716394e+00, 2.523328740515370e+04, 2.523328740515377e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.267405936812072e-05, -1.267399832699856e-05, -1.267368106176954e-05, -1.267468154903659e-05, -1.267402755282586e-05, -1.267402755282586e-05, -4.424963064361773e-04, -4.424945311162503e-04, -4.424109238749567e-04, -4.423757164339879e-04, -4.424917898544294e-04, -2.079634888031541e-04, -8.855554683891759e-03, -2.657251386243392e-03, -2.513669422337844e-03, -2.595245568987946e-03, -2.661054266959389e-03, -2.661054266959389e-03, -1.893212450888204e-02, -1.916770014736172e-02, -6.510115766685589e-03, -1.341557551476613e-02, -1.899391577891487e-02, -1.899391577891487e-02, -3.183993800246072e-02, -3.168663908437436e-02, -1.934063948962985e-02, -2.337983569467258e-02, -3.209087433516748e-02, -3.209087433516746e-02, -1.624947300751573e-04, -1.626997174415472e-04, -1.625176984968608e-04, -2.034747216666256e-04, -1.625971873865185e-04, -1.625971873865185e-04, -1.310686081177525e-03, -1.293721507909323e-03, -1.317639110387333e-03, -1.304264607341535e-03, -1.290363367393554e-03, -5.570118446498161e-04, -6.705666251652811e-03, -7.183455119858333e-03, -6.548196490987615e-03, -7.248598240204610e-03, -6.781738717109538e-03, -1.048153621137634e-02, -1.528716963258028e-01, -1.303565346595375e-02, -1.554308985473327e-01, -8.703335955145213e-04, -1.573632769168833e-02, -1.573632769168833e-02, -4.613235944142057e+00, -2.525270976967307e-02, -3.680396150456778e-02, -2.767042993031009e-01, -4.423820933527069e+00, -2.665319737553163e-02, -1.002768924512108e-02, -9.605336541111932e-03, -1.065269392654030e-02, -9.870089866667316e-03, -9.811114252221425e-03, -9.811114252221425e-03, -1.038813990550242e-02, -8.259224298141514e-03, -8.859670665603288e-03, -9.453142160968693e-03, -9.144204882761903e-03, -1.273928215732527e-02, -6.257723705190893e-03, -4.672583116384938e-02, -1.189766752893991e-02, -2.497357846303868e-02, -1.196851694299808e-02, -1.196851694299808e-02, -1.666767034884896e-02, -1.935344140300119e-02, -1.741038155095935e-02, -1.378850485215170e-02, -1.993063343556025e-01, -1.745012655892042e-02, -2.446841232830064e-02, -2.094215009227000e-02, -2.956457202581860e-02, -1.856060883951220e-02, -2.903554182303733e-02, -2.903554182303727e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
