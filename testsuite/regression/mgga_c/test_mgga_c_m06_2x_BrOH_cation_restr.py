
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.081659180078772e-01, -1.081675427262689e-01, -1.081732056942915e-01, -1.081491178537445e-01, -1.081619597005213e-01, -1.081619597005213e-01, -6.968152161170987e-02, -6.968070346095070e-02, -6.964527041029384e-02, -6.952002824614645e-02, -6.959086692671929e-02, -6.959086692671929e-02, -4.764589381988044e-02, -4.750120033351343e-02, -4.237483842401546e-02, -4.127838747155116e-02, -4.189287056243846e-02, -4.189287056243846e-02, -6.420633145552065e-03, -6.959965426490314e-03, -7.209937022569982e-02, 1.288276159577898e-02, 3.585994637957168e-03, 3.585994637957210e-03, 8.192462464506712e-03, 8.503857726483320e-03, 2.801091364250197e-02, 4.399921705278884e-03, 5.729479254777600e-03, 5.729479254777627e-03, -9.489879215679542e-02, -9.521276693762064e-02, -9.491667977067934e-02, -9.519371550115210e-02, -9.505607314018820e-02, -9.505607314018820e-02, -3.466802765144009e-02, -3.445211452010141e-02, -3.312217469703713e-02, -3.287796973488608e-02, -3.531990057080170e-02, -3.531990057080170e-02, -3.863724821108391e-02, -4.708379266193138e-02, -3.802112681408740e-02, -4.578214018085718e-02, -3.998003899167836e-02, -3.998003899167836e-02, 2.764401859012418e-02, 1.695050604261839e-03, 2.879057714195671e-02, -6.897089166012477e-02, 1.700318840541202e-02, 1.700318840541202e-02, 2.289845126058030e-03, 3.621485676074045e-03, 3.275275694941606e-03, 3.040979396255293e-02, 3.472713935091111e-03, 3.472713935091130e-03, -5.652598916267421e-02, -5.735864302741948e-02, -5.812776846484007e-02, -5.810956907524741e-02, -5.821344409220831e-02, -5.821344409220831e-02, -4.720970118259686e-02, -2.512764428172470e-02, -3.319029392672829e-02, -4.381065466817264e-02, -3.822722261080247e-02, -3.822722261080247e-02, -4.764036526291608e-02, -6.523067047919093e-03, -1.142886923850230e-02, -2.584890051532010e-02, -1.733380982768734e-02, -1.733380982768720e-02, -2.731349271039218e-02, 2.881541648253956e-02, 3.081636011618511e-02, -2.783756261962021e-02, 2.731717832494272e-02, 2.731717832494276e-02, 8.333225293901512e-03, 2.994630662844037e-04, 2.662092778447694e-03, 2.838212870646756e-02, 3.474279549678976e-03, 3.474279549678960e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.275334635721567e-01, -2.275328257012189e-01, -2.275372485462568e-01, -2.275469188012290e-01, -2.275408163424412e-01, -2.275408163424412e-01, -1.007570180867091e-01, -1.007608638900906e-01, -1.008771690197949e-01, -1.009600351107262e-01, -1.008941902465781e-01, -1.008941902465781e-01, -7.269034147081888e-02, -7.337949614839401e-02, -9.502133540032454e-02, -9.231707705485254e-02, -9.217092703122837e-02, -9.217092703122837e-02, -1.760069703099632e-02, -2.118125586997517e-02, -8.396553830091796e-02, -1.949461745308022e-02, -2.341531254894270e-02, -2.341531254894198e-02, 1.442893811575099e-03, 1.522250720289664e-03, 4.689474562287957e-03, 5.137539747673213e-04, 8.290261138947870e-04, 8.290261138947870e-04, -1.674827960003992e-01, -1.671595930495364e-01, -1.674823153562349e-01, -1.671964605052191e-01, -1.673120237759689e-01, -1.673120237759689e-01, -1.137271274463721e-01, -1.145810117549949e-01, -1.109444872956780e-01, -1.115485290006060e-01, -1.152414520955040e-01, -1.152414520955040e-01, -7.123586802991161e-02, -5.579319443021397e-02, -6.097797373816691e-02, -5.380186758311799e-02, -7.217288640709939e-02, -7.217288640709939e-02, -7.969597089092516e-03, -1.540833820216682e-02, -5.996991251357149e-03, -7.108341750503316e-02, -1.395013288216406e-02, -1.395013288216407e-02, -9.460205245166839e-06, 3.058138608868253e-04, 2.770138363787529e-04, 5.523882855055498e-04, 2.845479750542726e-04, 2.845479750545779e-04, -5.447021239315676e-02, -6.613735587015716e-02, -6.160656582794280e-02, -5.804155633580635e-02, -5.977605760537674e-02, -5.977605760537674e-02, -5.096362452585014e-02, -8.486384371697867e-02, -8.794611498717947e-02, -8.157428138372991e-02, -8.567740470226642e-02, -8.567740470226642e-02, -5.641232233955588e-02, -1.577479363332669e-02, -3.930551444250953e-02, -6.179740928323749e-02, -5.911430525266095e-02, -5.911430525266123e-02, -7.144105862839331e-02, 4.455802847989758e-03, 3.394568716632741e-03, -5.697047558427830e-02, -6.355338216349647e-03, -6.355338216346283e-03, 1.602130466923592e-03, -2.844142102395763e-04, 1.972072145115111e-04, -7.833352213085270e-03, 3.033785709546573e-04, 3.033785709548490e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.790485113175357e-10, 1.790358020232748e-10, 1.789983104696923e-10, 1.791871556778482e-10, 1.790855145969941e-10, 1.790855145969941e-10, 9.553836651686514e-07, 9.554267825043001e-07, 9.563298522423193e-07, 9.541385317044364e-07, 9.554199860020613e-07, 9.554199860020613e-07, 2.164515189152432e-03, 2.181709430777378e-03, 2.660999575525792e-03, 2.507806123030865e-03, 2.539202591006664e-03, 2.539202591006664e-03, -1.680336128046382e-01, -9.761493502620390e-02, 1.438315766824776e-03, -1.817263469194121e-01, -2.357536760569203e-01, -2.357536760569331e-01, 3.594197189775393e+03, 3.275041591541732e+03, 3.941316353627153e+01, 1.022342100420750e+04, 7.340699018232052e+03, 7.340699018232124e+03, 1.140208548488431e-08, 6.413245429289540e-09, 1.117606199916970e-08, 6.772967408603386e-09, 8.882889645773095e-09, 8.882889645773095e-09, 1.557430305144711e-05, 1.558576134209537e-05, 1.508165929973230e-05, 1.511717723032148e-05, 1.576074407629301e-05, 1.576074407629301e-05, 4.400989861505763e-03, -3.409640367286887e-04, 5.840255988143410e-03, 6.717120222531482e-03, 3.921886435607764e-03, 3.921886435607764e-03, 8.319833207945658e-01, -2.250367714676623e-01, 1.391863826988056e+00, 2.090769229474065e-05, -3.607447519965087e-01, -3.607447519965070e-01, 1.487101891144835e+04, 1.009279727818755e+04, 5.103122425780952e+04, 8.835294092637513e+00, 2.119522880351059e+04, 2.119522880351128e+04, -6.162051743474482e-02, -2.091345046477725e-02, -3.051684159655085e-02, -4.167470727148665e-02, -3.564339889623408e-02, -3.564339889623406e-02, -4.604543764691802e-02, 1.449426377342332e-02, 1.158741559102752e-02, 3.850394800804487e-03, 8.527204183937966e-03, 8.527204183937966e-03, 1.032245817723747e-03, -7.851865823366701e-02, 3.204077679135769e-02, 4.965793846535730e-02, 6.749914068711881e-02, 6.749914068711887e-02, 1.704508071092434e-02, 4.509649555019853e+01, 1.752133436202051e+01, 6.063122607612145e-02, 2.880920761028135e+00, 2.880920761027938e+00, 1.153970540315220e+03, 1.840031468429569e+05, 6.524584215933342e+04, 4.192665934763394e+00, 2.990412214417529e+04, 2.990412214417491e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.467191056763016e-05, 2.467475092311186e-05, 2.468570047872004e-05, 2.464365379895584e-05, 2.466591773143035e-05, 2.466591773143035e-05, -2.597148966392634e-04, -2.596795392843595e-04, -2.587269353449752e-04, -2.591223313838232e-04, -2.591034125948157e-04, -2.591034125948157e-04, -3.943650841154472e-03, -3.932092969347644e-03, -3.551991402930689e-03, -3.624444968125631e-03, -3.621095454874361e-03, -3.621095454874361e-03, 2.996947089272765e-02, 2.464592136847217e-02, -3.001798764433622e-03, 2.985887037644920e-02, 3.662425624476302e-02, 3.662425624476293e-02, -1.234018335890828e-02, -1.301246413991728e-02, -2.078696880265438e-02, -6.099654063288345e-03, -9.084372005621046e-03, -9.084372005621039e-03, 8.982243826603136e-04, 9.136332453625339e-04, 8.991560247456272e-04, 9.127487358952849e-04, 9.058917333356183e-04, 9.058917333356183e-04, -1.129900119740323e-03, -1.175587018592767e-03, -1.110548418843616e-03, -1.157816946408617e-03, -1.159296828000903e-03, -1.159296828000903e-03, -1.932633740487691e-03, 2.894947759581764e-03, -5.318483494586745e-03, -6.015874569761561e-03, -2.646970212938159e-04, -2.646970212938159e-04, 8.864057569038101e-03, 3.733436728240293e-02, 4.728816142440364e-03, -9.165046763089339e-04, 3.430379637176402e-02, 3.430379637176400e-02, -2.956721603031180e-03, -4.877325002484457e-03, -1.249901456996566e-02, -1.185984113752048e-02, -8.245097357157673e-03, -8.245097357157664e-03, 1.425971072537207e-01, 8.780530599829547e-02, 1.064525391141758e-01, 1.239785280434472e-01, 1.150401742976188e-01, 1.150401742976188e-01, 4.397644400994020e-02, -1.364399598485012e-02, -3.041918776786014e-03, 1.998745089031614e-02, 6.443726926271205e-03, 6.443726926271213e-03, -6.050366259540037e-04, 2.432935268080150e-02, 1.020042240475617e-03, -1.601028745923701e-02, -1.532494854300227e-02, -1.532494854300224e-02, -1.231480262638134e-02, -2.231670273446731e-02, -1.780259820385198e-02, -1.528662760855609e-02, 4.584132805969719e-03, 4.584132805969770e-03, -8.567085389115037e-03, -8.492879714686817e-04, -6.773404217334543e-03, 1.357983871437034e-03, -9.788417724838690e-03, -9.788417724838691e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
