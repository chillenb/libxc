
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.343450331484998e-01, -1.343441524934206e-01, -1.343406403395106e-01, -1.343536714893440e-01, -1.343467869049973e-01, -1.343467869049973e-01, -1.275587085236268e-01, -1.275451636692572e-01, -1.271894269536573e-01, -1.273360205411434e-01, -1.273168504805009e-01, -3.614177776840938e-02, -1.071139547685658e-01, -1.684817895136495e-02, -1.581305660188209e-02, -1.630379704775062e-02, -1.619892376556040e-02, -1.619892376556040e-02, -7.269544383304155e-03, -7.770463456786669e-03, -1.476662237523197e-01, 1.030715784930791e-02, 7.070825806779618e-04, 7.070825806780798e-04, 8.269100410423365e-03, 8.649628386606611e-03, 3.098313549828980e-02, 5.039028936845039e-03, 6.205808411345520e-03, 6.205808411345520e-03, -9.489105978986404e-02, -9.520809181651554e-02, -9.490925881707242e-02, -9.318028963922864e-02, -9.504981967399152e-02, -9.504981967399152e-02, -1.188324318784383e-01, -1.169694535728962e-01, -1.203542413706023e-01, -1.186251281215741e-01, -1.170647461057075e-01, -2.840527106151042e-02, -2.895416533958622e-02, -4.451675449085316e-02, -2.212398585018310e-02, -2.883880430947861e-02, -3.130461565423458e-02, -5.992365776453209e-02, -8.567149763320571e-02, 4.956512833220739e-07, -8.105382815603951e-02, -4.766926910360808e-02, 1.623104376400839e-02, 1.623104376400834e-02, -1.082348000252975e-03, 4.935385159035752e-03, 3.842168757208144e-03, -5.470196009518749e-02, -1.283392367978082e-03, 4.571046729817843e-03, -6.913809621771391e-02, -6.109597388737605e-02, -4.510996425684251e-02, -6.612661379251812e-02, -6.494344006967732e-02, -6.494344006967732e-02, -6.729464832028334e-02, -2.340425315172817e-02, -3.103197918379572e-02, -4.255790033013256e-02, -3.612934117029395e-02, -5.301155847086919e-02, -4.058769920321879e-02, -8.577865007974321e-02, -1.112033986299799e-02, -6.509969433863175e-02, -1.315664461247779e-02, -1.315664461247773e-02, -6.495243416480538e-02, 3.030523755456672e-02, 3.460226821385857e-02, -1.759112162049600e-02, -7.405104526132975e-02, 2.938009935354280e-02, 1.118370755596095e-02, 1.415342850183320e-03, 2.875356540538172e-03, 2.986148192380383e-02, 4.252722245420603e-03, 4.252722245420629e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.148066319436132e-02, -9.148117311336512e-02, -9.148326372588975e-02, -9.147571203470528e-02, -9.147969358040495e-02, -9.147969358040495e-02, -5.195519674044656e-02, -5.195868980894457e-02, -5.205118149757168e-02, -5.201464206693069e-02, -5.201753058286848e-02, -1.379755096575898e-01, -3.445125521233600e-02, -2.989369734111932e-02, -2.052422868876211e-02, -2.455039284351457e-02, -2.358858464692215e-02, -2.358858464692215e-02, -6.485927623705937e-03, -7.213322855132279e-03, -4.982637212455700e-02, -1.711290669150452e-02, -9.301550922763926e-03, -9.301550922762566e-03, 1.461640020041651e-03, 1.557287992445579e-03, 3.822602629116443e-03, 6.882494036227922e-04, 9.539688043390668e-04, 9.539688043390668e-04, -1.683835232614129e-01, -1.680529633439650e-01, -1.683645329007648e-01, -7.462314993510230e-02, -1.682183653483146e-01, -1.682183653483146e-01, -4.422718710503726e-02, -4.466545167797818e-02, -4.390468325059770e-02, -4.427880612271163e-02, -4.463737333547790e-02, -1.032681207604133e-01, -9.782554760633946e-02, -9.968930717805520e-02, -8.492971137283167e-02, -9.669334677564104e-02, -9.971051426628312e-02, -3.862747273740152e-02, -1.105474696314081e-01, -9.446126548720221e-03, -1.126149455658311e-01, -1.448860638584994e-01, -1.911987758808150e-02, -1.911987758808179e-02, -1.443414293597559e-03, 6.658088704557519e-04, 4.328852676603157e-04, -9.846166603054395e-02, -1.769279873159022e-03, 5.836317334765601e-04, -6.375710989346087e-02, -7.691177073866341e-02, -4.476768105510043e-02, -6.885332004367600e-02, -7.082169400894840e-02, -7.082169400894837e-02, -6.518273305287633e-02, -8.693572871058633e-02, -9.505690676013695e-02, -9.348091097842343e-02, -9.566736644632856e-02, -3.881577368591207e-02, -1.037030474801604e-01, -3.215595009993281e-02, -1.581298328883263e-02, -2.839811831456025e-02, -3.547756014692080e-02, -3.547756014692047e-02, -3.221272349452341e-02, 4.088804395795355e-03, 1.004428448098628e-03, -6.810257647250514e-02, -1.052764224082818e-01, -1.408931962244786e-02, 2.247304576720109e-03, 5.331683821032565e-05, 2.585888396115047e-04, -1.263419417511205e-02, 5.164557735617067e-04, 5.164557735619058e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.805923386749061e-09, 1.805877441180252e-09, 1.805674435383055e-09, 1.806356536967743e-09, 1.805998972307711e-09, 1.805998972307711e-09, 1.380024068608635e-05, 1.379947378580175e-05, 1.377809552341268e-05, 1.378082410910805e-05, 1.378731575369872e-05, 1.221502640360958e-06, 3.449431760311304e-02, 9.121174119242943e-05, -2.909084345838811e-04, -1.183007239215450e-04, -1.586530451912951e-04, -1.586530451912951e-04, -3.075260999246324e-01, -2.671459930714593e-01, 1.797382097261889e-02, -4.667809619450489e-01, -5.821170000046738e-01, -5.821170000046780e-01, 3.594500276533298e+03, 3.275611309307452e+03, 4.026018837334435e+01, 1.022703656955424e+04, 7.343544952713488e+03, 7.343544952713488e+03, 1.432792646279597e-08, 9.328206290529623e-09, 1.404249403624649e-08, 1.282121488074807e-06, 1.183356198967519e-08, 1.183356198967519e-08, 2.154805071258111e-04, 2.068957335867493e-04, 2.220777692593303e-04, 2.141911280316720e-04, 2.076367741873193e-04, 1.382398633935344e-05, 7.217315524372435e-03, 3.251962565923657e-03, 8.543800329822760e-03, 8.662572835514816e-03, 6.758680624607537e-03, 4.731338743394890e-02, 2.478022666488719e+02, -2.919235544287725e-01, 3.312863968550640e+02, 2.838757281622912e-05, -4.109297921359488e-01, -4.109297921359458e-01, 6.066883273624694e+08, 1.009984052504533e+04, 5.106312594262990e+04, 1.444758850536899e+03, 3.154650366784337e+08, 2.121517806599234e+04, -6.083075628120347e-02, -1.766027610743653e-02, 8.032790391634339e-03, -3.809772971166190e-02, -3.188861808309008e-02, -3.188861808309008e-02, -5.701396629296616e-02, 1.492320803259175e-02, 1.314910405531387e-02, 6.625779233809402e-03, 1.078328242260946e-02, 7.731314901907402e-02, 3.438326767520424e-03, 6.121177418019568e+00, -1.471146913702719e-02, 6.593715404654478e-01, 3.342153144806449e-02, 3.342153144806455e-02, 1.867596032325524e-01, 4.554655966014350e+01, 1.824611267868464e+01, 7.395019362053119e-02, 6.510457518525202e+02, 3.336958563346180e+00, 1.157871777676963e+03, 1.839960748124825e+05, 6.525286728597364e+04, 4.589978824475172e+00, 2.992569704518568e+04, 2.992569704518601e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.991418170932499e-05, -2.991409050170336e-05, -2.991361475246977e-05, -2.991497713434818e-05, -2.991427320334504e-05, -2.991427320334504e-05, -6.515222966850695e-04, -6.515525715088236e-04, -6.523289695033659e-04, -6.519138882531346e-04, -6.520751559499033e-04, -5.584726857432046e-04, -8.201210607816443e-03, 3.538974840940370e-04, 2.294029986312470e-03, 1.428896831053812e-03, 1.631312286301273e-03, 1.631312286301273e-03, 3.876536336698124e-02, 3.516023147437320e-02, -4.694774070269185e-03, 4.513948172320498e-02, 5.510688891956960e-02, 5.510688891956960e-02, -1.244456165393165e-02, -1.321518624029524e-02, -2.366075510401641e-02, -6.843765579793907e-03, -9.739161121965817e-03, -9.739161121965817e-03, 9.005637477757184e-04, 9.160681373181054e-04, 9.014528658673974e-04, -3.739581290137829e-04, 9.083041650331166e-04, 9.083041650331166e-04, -1.661658982743607e-03, -1.657356541402937e-03, -1.663478263131057e-03, -1.660405478178350e-03, -1.658369197039990e-03, -1.256021225076573e-03, -8.730398245277925e-03, 1.354156585753369e-02, -1.344620212333644e-02, -8.994592584459568e-03, -6.266906783140807e-03, -1.334748995689414e-02, 5.219095212349950e-03, 4.395664181751760e-02, 9.375632793245860e-03, -6.532141251740181e-04, 4.027024459689413e-02, 4.027024459689438e-02, 1.923693676965592e-05, -6.315167861228673e-03, -1.426435033997252e-02, 2.067313108957224e-02, 1.171707241220491e-04, -1.036305633032543e-02, 2.583765740763249e-01, 1.082200494088757e-01, -1.480562798189343e-02, 1.803974540216652e-01, 1.587797624099993e-01, 1.587797624099993e-01, 2.326408425102988e-01, -1.519726550648428e-02, -5.713538736624282e-03, 1.995160557605541e-02, 3.984696232788902e-03, -1.666907806695153e-02, 4.445544817214245e-03, -3.583201272633249e-02, 8.462868737065426e-03, -2.743579578986390e-02, -1.131128241832247e-02, -1.131128241832251e-02, -1.914307929801234e-02, -2.378348436117222e-02, -2.116515593574711e-02, -2.877735095390520e-02, 1.275002743575092e-02, 3.923784468216019e-03, -1.124623006578166e-02, -2.199708246931039e-03, -7.210710736890608e-03, 3.381239848876083e-04, -1.158082488311271e-02, -1.158082488311275e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
