
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.485472840913766e-01, -1.485451764518677e-01, -1.485360229213180e-01, -1.485703021111581e-01, -1.485461733882355e-01, -1.485461733882355e-01, -1.328118802254764e-01, -1.327784373910904e-01, -1.317875145293159e-01, -1.321707821470053e-01, -1.328027563859293e-01, 1.293931252068765e-01, -2.493056426621516e-01, 1.925901942070894e-01, 1.982751834134514e-01, 1.961859802172135e-01, 1.923548977918886e-01, 1.923548977918886e-01, 9.040279782483102e-02, 8.966206792191653e-02, -3.917235905944699e-01, 2.405615795561289e-02, 9.023904073876859e-02, 9.023904073876859e-02, -2.526512481299446e-02, -2.616861291101269e-02, -5.745332606080759e-02, -1.397220315773011e-02, -2.594803283199369e-02, -2.594803283199372e-02, -3.439624469828613e-01, -3.457298004575776e-01, -3.441573821795736e-01, -8.829783330429461e-02, -3.448479207685800e-01, -3.448479207685800e-01, -1.524382916781321e-01, -1.435794243118715e-01, -1.566327048709623e-01, -1.492066976594721e-01, -1.414168768603274e-01, 1.603006247871945e-01, -4.063051286610317e-02, -1.073991438903951e-01, 5.732564412929390e-03, -6.329567520271380e-02, -6.933023122515720e-02, -6.545070140269922e-02, -3.064652826549953e-01, 8.617967437059654e-02, -3.001431956677204e-01, -1.074730848014174e-01, 1.226258672391298e-02, 1.226258672391298e-02, -4.486333657675012e-02, -1.517092268201807e-02, -1.182800612475402e-02, -2.725211606064443e-01, -4.644671121850286e-02, -1.401483791311772e-02, -1.693249622423474e-01, -1.421665256932907e-01, -6.627383855222911e-02, -1.573461948028580e-01, -1.534888837917402e-01, -1.534888837917402e-01, -1.544559350296082e-01, -2.791288741268278e-02, -7.708533488031011e-02, -1.051044344713763e-01, -9.301549135425750e-02, -5.904912661422840e-02, -9.609034615613614e-02, -2.163639403840165e-01, 1.088075577079797e-01, -8.066644717257906e-02, 8.575921645415879e-02, 8.575921645415882e-02, -6.516636371310708e-02, -5.738389196976389e-02, -5.831014361537486e-02, 2.327607354354346e-02, -2.814413507611881e-01, -3.145068809636323e-02, -2.878790316894463e-02, -4.823958791668923e-03, -8.602985384010543e-03, -3.082762007595996e-02, -1.218558948183782e-02, -1.218558948183790e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.335985348910663e-02, -2.335349343374789e-02, -2.332572367230151e-02, -2.342924817374535e-02, -2.335650275867458e-02, -2.335650275867458e-02, 9.814614984145395e-02, 9.795865850850831e-02, 9.232777226752616e-02, 9.450849043474856e-02, 9.809423288297284e-02, -6.516579286262395e-01, 2.144164098116143e-01, 1.853332728301602e-04, 8.637195112441361e-02, 4.863028843940473e-02, -2.071117721247883e-03, -2.071117721247883e-03, -1.588455390265778e-02, -2.911745275688210e-02, 6.337967378816610e-02, 1.500552714351559e-01, -1.965347064208459e-02, -1.965347064208459e-02, -3.106784374209855e-02, -3.204942955595847e-02, -4.281087720855352e-02, -1.789677614261221e-02, -3.178487234691283e-02, -3.178487234691298e-02, -6.540842958605420e-01, -6.551197385263595e-01, -6.541982099600780e-01, -2.629184025090420e-02, -6.546032799823241e-01, -6.546032799823241e-01, 2.296287410352503e-01, 2.044059093285858e-01, 2.402605984212491e-01, 2.208741071274835e-01, 1.976451006600183e-01, -4.692769526001506e-01, -3.293689955113799e-01, -1.820684375758789e-01, -3.553889035944200e-01, -2.877157395136830e-01, -2.845246246552328e-01, -7.484489324580709e-02, -2.384556316148118e-01, 1.306326597371020e-01, -2.290272614858175e-01, -4.919440901629960e-01, 1.294266543195118e-01, 1.294266543195118e-01, -5.765224587200130e-02, -1.937180467091165e-02, -1.516131207043485e-02, -2.752364734502129e-01, -5.964063764959394e-02, -1.793061971583621e-02, -2.009313165690537e-01, -1.631680320772559e-01, -1.725140393014850e-01, -1.852131556050946e-01, -1.798455310959611e-01, -1.798455310959611e-01, -1.830939306897814e-01, -3.197350475204414e-01, -2.324897784777930e-01, -1.429742761301230e-01, -1.831526287225995e-01, -2.688678717011985e-02, -2.344827264636390e-01, 6.515499102268801e-02, -7.368794737820120e-02, 1.141198389570709e-01, -1.809674509172150e-01, -1.809674509172149e-01, 2.238778149874783e-02, -4.809760836926263e-02, -2.843010273395050e-02, -2.724131069771218e-01, -2.330598994315747e-01, 5.276717891843712e-02, -3.543796906461310e-02, -6.295833702853063e-03, -1.112795825429929e-02, 5.056502466148190e-02, -1.564118105578207e-02, -1.564118105578215e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.632615823019495e-08, -1.632704184156138e-08, -1.633077076604284e-08, -1.631641369886696e-08, -1.632662461943687e-08, -1.632662461943687e-08, 3.431394457932480e-05, 3.429780360169888e-05, 3.380825875643672e-05, 3.398676007661219e-05, 3.430881100614632e-05, 1.160817087222338e-06, 6.641268577910554e-02, 3.073938588040356e-03, 2.890416209604068e-03, 3.045462125253818e-03, 3.077672297457675e-03, 3.077672297457675e-03, 1.420417175922375e+00, 1.412495589512192e+00, 3.863454921117288e-02, 5.894208494607528e-01, 1.417335567598609e+00, 1.417335567598609e+00, 2.834663044347385e-01, 3.005711356458775e-01, 4.383643082389406e-01, 1.884951929149207e-02, 3.165019102513596e-01, 3.165019102490355e-01, -1.125893018216337e-06, -1.146014229171905e-06, -1.128106900459005e-06, -9.332187614910495e-06, -1.135935720255318e-06, -1.135935720255318e-06, 4.992645278120576e-04, 4.563233342551565e-04, 5.184732822197473e-04, 4.834622804184689e-04, 4.463662322707025e-04, 2.048266919388563e-05, 2.795458833080722e-03, -8.781797886022236e-03, 7.686374269481171e-03, 1.480174847795165e-04, -5.070486380548225e-04, -1.604048635507575e-03, 1.949624494494337e+02, 5.616671804178938e-01, 2.053463770370678e+02, -3.442124231318732e-06, 9.825571475087841e-01, 9.825571475087841e-01, 3.516363458468639e+07, 3.129421000806158e-02, 1.524675432621231e-01, 1.297108136239808e+03, 2.990791547849546e+07, 3.682667470032640e-02, -1.414328792262395e-01, -8.366888764676358e-02, -1.324806819684864e-01, -1.159903554072186e-01, -1.077995511530437e-01, -1.077995511530437e-01, -1.323150058261975e-01, 7.517086461338314e-03, -4.795366362804769e-03, -2.465580339755003e-02, -1.267705291870843e-02, -2.958973830636788e-02, -3.312913826586666e-03, 5.310500102787954e+00, 2.543578041984524e-01, 4.634841325095682e-01, 1.685227041834272e-01, 1.685227041834274e-01, 1.040577069353986e-01, 3.606176124808561e-01, 4.292540856140014e-01, 1.043064451053226e-01, 4.488875735430570e+02, 9.786280534558823e-01, 8.764501949545729e-02, 4.057185285882691e-03, 3.400976544782078e-02, 1.220088305292955e+00, 4.705303240540257e-02, 4.705303243266647e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.876285042449825e-05, -7.876700770190681e-05, -7.878487740368856e-05, -7.871725846164338e-05, -7.876504254425291e-05, -7.876504254425291e-05, -1.824523666168660e-03, -1.823251472405267e-03, -1.784740217205558e-03, -1.799431917939791e-03, -1.824155423819121e-03, 4.768720826806254e-03, -4.615442519333411e-02, -2.063423321703096e-03, -7.692337596684714e-03, -5.459241980367297e-03, -1.898437684514495e-03, -1.898437684514495e-03, -8.220221968776724e-02, -7.332050819775517e-02, -2.177169356342020e-02, -1.059704309274408e-01, -7.972205160474456e-02, -7.972205160474456e-02, -1.179693998325739e-03, -1.332717226157186e-03, -2.043973153392396e-02, -5.233280953882970e-05, -1.353551416068288e-03, -1.353551416069438e-03, 7.877236076860002e-03, 7.964558466519011e-03, 7.886839874779776e-03, -1.000763471455855e-03, 7.920850365994025e-03, 7.920850365994025e-03, -7.618578832935630e-03, -7.131776388717354e-03, -7.815998318665654e-03, -7.448925941717870e-03, -7.004435121688278e-03, 8.976955586942741e-03, 1.066471167553501e-01, 9.337996385565639e-02, 1.008033755860570e-01, 1.083618454400569e-01, 1.008433365224760e-01, 6.355279464952123e-04, -7.508097368338401e-02, -1.036076799702531e-01, -8.270160205032284e-02, 1.849942517620740e-02, -1.188416226711981e-01, -1.188416226711981e-01, -7.400746363106075e-05, -8.724920498863473e-05, -1.502529207488958e-04, -3.299952477214566e-02, -8.473056904912567e-05, -8.242438882841975e-05, 7.620736771496720e-01, 4.249323369796634e-01, 2.727961763790383e-01, 6.108888677534294e-01, 5.631263888842344e-01, 5.631263888842344e-01, 6.400324862375778e-01, 1.279213541304536e-01, 1.183187194376442e-01, 1.205995389473883e-01, 1.110364373708053e-01, -3.263955954810339e-02, 8.556639182215681e-02, -1.844787491776171e-01, -1.135880709796147e-02, -1.260518540619734e-01, 5.323023204971839e-02, 5.323023204971823e-02, -4.527435470370766e-02, -1.583424075567197e-02, -2.936141473195156e-02, 1.648392196708945e-01, -8.109851375017103e-02, -8.257928878232078e-02, -7.192719879184043e-04, -2.292412032449873e-06, -2.903163473616293e-05, -8.782968318513508e-02, -7.273095714499110e-05, -7.273095714468312e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
