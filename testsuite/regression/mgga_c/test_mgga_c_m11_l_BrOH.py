
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.758444167539615e-01, -3.758554892514505e-01, -3.759060383011524e-01, -3.757259742395571e-01, -3.758502300758552e-01, -3.758502300758552e-01, 7.218781750089001e-02, 7.211444701054399e-02, 6.993553636319902e-02, 7.123102130644494e-02, 7.216477016759974e-02, 7.216477016759974e-02, 6.695786039477089e-02, 6.802724072328607e-02, 9.653387509760288e-02, 1.012202000537841e-01, 6.734997965176760e-02, 6.734997965176760e-02, 8.008320051772967e-02, 7.772199423954979e-02, -3.568588450830810e-02, 1.253224336886095e-02, 7.930556800819308e-02, 7.930556800819308e-02, -2.526517493418433e-02, -2.616869089061410e-02, -5.753122109540536e-02, -1.397221934787113e-02, -2.594810001260902e-02, -2.594810001260905e-02, -3.432731145691469e-01, -3.450359141665414e-01, -3.434762805734318e-01, -3.448454990522315e-01, -3.441444569048664e-01, -3.441444569048664e-01, 1.661208212108989e-01, 1.548422058486485e-01, 1.728210772229334e-01, 1.640193583539206e-01, 1.495429738939674e-01, 1.495429738939674e-01, -4.697072416963856e-02, -7.731400899300396e-02, -1.788368404857808e-02, -6.385409456008963e-02, -6.831484660167363e-02, -6.831484660167363e-02, -2.713285966843628e-02, 8.122786238728240e-02, -2.343169194664256e-02, -1.002385828143838e-01, 8.876391176956802e-03, 8.876391176956802e-03, -1.354037042718584e-02, -1.517094499561583e-02, -1.182801455696715e-02, -5.866561047677045e-02, -1.401486411585850e-02, -1.401486411585851e-02, -1.351045369017277e-01, -1.229627996564497e-01, -1.264999341207852e-01, -1.298135626440224e-01, -1.280723175054162e-01, -1.280723175054162e-01, -9.743388316768425e-02, -2.895887990478874e-02, -7.607704307222470e-02, -9.801552471928308e-02, -8.971532715634067e-02, -8.971532715634067e-02, -7.659287714461208e-02, 1.052568064818871e-01, 9.577088408059777e-02, 3.374428629932333e-02, 6.748443677008509e-02, 6.748443677008514e-02, 1.389290220535002e-02, -5.741245457009231e-02, -5.851976462516831e-02, 6.252113776366656e-04, -3.265893787852962e-02, -3.265893787852956e-02, -2.878887882037027e-02, -4.823958921164362e-03, -8.602985973588904e-03, -3.212904625267665e-02, -1.218560810013115e-02, -1.218560810013124e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.014971229410910e+00, -1.014978430613654e+00, -1.015020817859218e+00, -1.014904190823976e+00, -1.014974922662924e+00, -1.014974922662924e+00, -5.534666769514857e-01, -5.535540615581338e-01, -5.562248238786212e-01, -5.561815292717888e-01, -5.534855539382117e-01, -5.534855539382117e-01, -1.373905276048894e-01, -1.364219092896102e-01, -9.423964116260966e-02, -1.035408773672658e-01, -1.370541309075837e-01, -1.370541309075837e-01, -3.699436154163741e-02, -5.113469414657742e-02, -1.716908659204825e-01, 9.461633262790409e-02, -4.137192982032260e-02, -4.137192982032260e-02, -3.106816865055993e-02, -3.204993470852408e-02, -4.329484308354564e-02, -1.789688198176630e-02, -3.178530758294595e-02, -3.178530758294605e-02, -6.518230892338717e-01, -6.528598528558018e-01, -6.519657587616404e-01, -6.527698255493857e-01, -6.523040201209085e-01, -6.523040201209085e-01, -4.322501375317755e-01, -4.591343077474236e-01, -4.203069073900669e-01, -4.425776148302991e-01, -4.645459359710120e-01, -4.645459359710120e-01, -2.656144096620477e-01, -6.791324232436603e-02, -2.641678322922775e-01, -1.610153293471335e-01, -2.289220340214011e-01, -2.289220340214011e-01, 6.667833963148392e-02, 1.116784488430212e-01, 7.045930176767527e-02, -2.514034830168165e-01, 1.120961236997333e-01, 1.120961236997333e-01, -1.734263170119648e-02, -1.937195041256942e-02, -1.516136725936764e-02, -2.375418427197491e-02, -1.793079098032044e-02, -1.793079098032075e-02, -2.121700830659931e-01, -1.530468564438105e-01, -1.693079016706813e-01, -1.852377677012262e-01, -1.768414331638936e-01, -1.768414331638936e-01, -1.892962004016560e-01, -3.127285172426336e-01, -2.201022003240809e-01, -1.205435356727067e-01, -1.656946575207784e-01, -1.656946575207784e-01, -1.050803251307235e-01, 2.476320212063732e-02, -9.098712747147643e-02, -2.129820886758922e-01, -1.790116385670865e-01, -1.790116385670864e-01, -2.880378246676419e-01, -4.827630140637239e-02, -2.971176137130355e-02, -2.103612835568766e-01, 4.588600084468519e-02, 4.588600084468523e-02, -3.544428435668668e-02, -6.295834556065558e-03, -1.112796212417588e-02, 4.316103139550381e-02, -1.564130289985187e-02, -1.564130289985197e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.856165276284539e-10, -3.856472364187628e-10, -3.857629925730091e-10, -3.852632039392311e-10, -3.856328673129015e-10, -3.856328673129015e-10, 3.188143703675901e-06, 3.187193219429997e-06, 3.156507177110775e-06, 3.146979182073970e-06, 3.187937026252214e-06, 3.187937026252214e-06, 1.311526257954752e-02, 1.306189181114929e-02, 1.120843778315088e-02, 1.064817560542415e-02, 1.309578957567176e-02, 1.309578957567176e-02, 1.754774716014796e+00, 1.784606782011333e+00, 9.367097785067167e-03, 1.528942441838550e+00, 1.767494652896484e+00, 1.767494652896484e+00, 3.011474047891251e-01, 3.244852459934955e-01, 6.648827998903577e-01, 5.640007230298920e-02, 3.382069168259501e-01, 3.382069168259498e-01, -1.132815278760492e-06, -1.153018363268226e-06, -1.134950221732089e-06, -1.150650205958062e-06, -1.143018482334030e-06, -1.143018482334030e-06, 2.602868828774390e-05, 2.441642347963590e-05, 2.587805622314593e-05, 2.463422057618212e-05, 2.504953009787843e-05, 2.504953009787843e-05, 4.269790980408542e-03, -1.543820203949907e-02, 1.429265443854382e-02, 3.108834893946426e-04, -7.181989114045412e-04, -7.181989114045412e-04, 9.566939427835665e-01, 6.756795275990265e-01, 1.179687423788259e+00, -1.256395986729847e-05, 1.493267202089689e+00, 1.493267202089689e+00, 5.812384081898358e-02, 7.239900497923472e-02, 2.191520913952154e-01, 1.072047966760047e+00, 1.118351415945171e-01, 1.118351415743647e-01, -1.544018834381081e-01, -9.021014128428226e-02, -1.086079750071262e-01, -1.259979687565828e-01, -1.169004740782142e-01, -1.169004740782142e-01, -1.567989330847012e-01, 7.941715985897407e-03, -5.181441223163996e-03, -2.734910672357474e-02, -1.392867592212324e-02, -1.392867592212325e-02, -6.638034061843087e-03, 4.327761099373659e-01, 3.190212283018538e-01, 1.468501263951323e-01, 2.262520377555957e-01, 2.262520377555958e-01, 3.115298841637736e-02, 4.585298569758398e-01, 7.146786217358188e-01, 1.675932609270715e-01, 1.589328608747105e+00, 1.589328608747115e+00, 2.490006020670323e-01, 1.818217271427171e-02, 4.419823629365758e-02, 2.055160986109471e+00, 1.512802244852538e-01, 1.512802245296319e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.468274815114089e-04, 4.468403127698951e-04, 4.468994563542000e-04, 4.466912285691791e-04, 4.468342084278659e-04, 4.468342084278659e-04, 3.329413953366243e-03, 3.330875350165575e-03, 3.375389170442623e-03, 3.369109598534503e-03, 3.329722393616687e-03, 3.329722393616687e-03, -1.439157349251357e-02, -1.440508858422373e-02, -1.472012780406360e-02, -1.324054102385352e-02, -1.439451780364594e-02, -1.439451780364594e-02, -9.082568361958530e-02, -8.448300108847029e-02, -1.422689613883834e-02, -1.060463865151796e-01, -8.915522059846673e-02, -8.915522059846673e-02, -1.179694024616708e-03, -1.332717270396641e-03, -2.043982385758339e-02, -5.233281027427470e-05, -1.353551455100315e-03, -1.353551455101464e-03, 7.853224555561733e-03, 7.940402718507608e-03, 7.863116627179853e-03, 7.930833940285724e-03, 7.896354113668734e-03, 7.896354113668734e-03, 7.638333857636506e-03, 8.342337793076726e-03, 7.409330836190873e-03, 7.976713967263495e-03, 8.407143689744411e-03, 8.407143689744411e-03, 7.822638290808215e-02, 1.268241685080214e-02, 6.121224761991891e-02, 4.454615958291187e-02, 7.461606862211728e-02, 7.461606862211728e-02, -7.655243932366271e-02, -1.043003411770132e-01, -8.432078957737942e-02, 7.161771496681556e-03, -1.188453093638423e-01, -1.188453093638423e-01, -7.199127400365566e-05, -8.724920653822727e-05, -1.502529220399557e-04, -3.300091840609612e-02, -8.242439069201110e-05, -8.242439069165602e-05, 6.526087162205884e-01, 3.699585932435602e-01, 4.506070442518846e-01, 5.270936308221326e-01, 4.869979023609898e-01, 4.869979023609898e-01, 4.553886692117788e-01, 1.237765992320900e-01, 1.099393352795152e-01, 9.717687306852768e-02, 9.707691050471699e-02, 9.707691050471701e-02, 2.067855136310879e-02, -6.565266207116768e-02, -2.045092132033957e-02, 5.456202241262818e-02, 3.120728913489008e-02, 3.120728913488999e-02, 9.123955709417557e-02, -1.583427633553975e-02, -2.936151294863049e-02, 9.660406891540099e-02, -8.257213193057554e-02, -8.257213193057698e-02, -7.192722652905570e-04, -2.292412033204157e-06, -2.903163476042376e-05, -8.782127491021494e-02, -7.273095849147693e-05, -7.273095849116897e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
