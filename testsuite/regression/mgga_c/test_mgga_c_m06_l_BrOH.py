
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.486845614428317e-02, -7.486799040781089e-02, -7.486672599826139e-02, -7.487434099663193e-02, -7.486820366784941e-02, -7.486820366784941e-02, -6.991175145858741e-02, -6.990465211694197e-02, -6.969243611647302e-02, -6.978886973852250e-02, -6.990979170271561e-02, -6.990979170271561e-02, -5.313909838280328e-02, -5.296432565418840e-02, -4.636507505671128e-02, -4.630223818099499e-02, -5.307461810898784e-02, -5.307461810898784e-02, -1.516903189729091e-02, -1.694704341640962e-02, -9.971007442716939e-02, 4.455481254030719e-02, -1.572126097006066e-02, -1.572126097006066e-02, 2.590829402567127e-02, 2.704985011448675e-02, 7.543445731421936e-02, 1.774009830318766e-02, 2.672512950151383e-02, 2.672512950151384e-02, -5.293899924286860e-02, -5.287715513261770e-02, -5.293422683598048e-02, -5.288607285054314e-02, -5.290513422209120e-02, -5.290513422209120e-02, -6.018549337650825e-02, -5.979378106025868e-02, -5.970642266933446e-02, -5.940110009430022e-02, -6.045942905330426e-02, -6.045942905330426e-02, -3.362090898998726e-02, -2.984076452346790e-02, -3.630567922817995e-02, -3.378040669019317e-02, -3.137082106630695e-02, -3.137082106630695e-02, 7.504306986090598e-02, 9.041847092239652e-03, 7.154883740323328e-02, -5.755716730240271e-02, 5.055994373826145e-02, 5.055994373826145e-02, 1.530433142649655e-02, 1.837893095757213e-02, 1.265982796708411e-02, 9.112521155738416e-02, 1.784866499207276e-02, 1.784866499207276e-02, -1.797745413900410e-02, -2.279412308908146e-02, -2.191421385823653e-02, -2.085261848672164e-02, -2.144806874567326e-02, -2.144806874567326e-02, -1.502325437635361e-02, -3.397366750913200e-02, -3.092344110064438e-02, -2.648450130937863e-02, -2.886576669996932e-02, -2.886576669996932e-02, -3.376040160531102e-02, -1.140246615931528e-02, -2.525988020506997e-02, -3.550995601509621e-02, -3.242898635568903e-02, -3.242898635568880e-02, -3.692526193520629e-02, 7.083380422093603e-02, 8.302542750207396e-02, -3.247462608365670e-02, 7.264484631977469e-02, 7.264484631977447e-02, 3.728963182329058e-02, 6.392254990289648e-03, 8.811380469587632e-03, 7.102477190423009e-02, 1.561174128036468e-02, 1.561174128036468e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.587113574767264e-02, -2.587034445085012e-02, -2.587273514740285e-02, -2.588594230229435e-02, -2.587066430209650e-02, -2.587066430209650e-02, -2.147185470063073e-02, -2.145534685089112e-02, -2.095827343603229e-02, -2.108566923835253e-02, -2.146772262752350e-02, -2.146772262752350e-02, -8.550769550257620e-02, -8.659874820345337e-02, -1.173597166220723e-01, -1.096665782390622e-01, -8.589235670026119e-02, -8.589235670026119e-02, -8.463542062402585e-02, -8.220110928140656e-02, -9.841861112974248e-02, -9.255969818238807e-02, -8.397296513400354e-02, -8.397296513400354e-02, 5.677023373156273e-02, 5.878703010902644e-02, 1.157433855006807e-01, 3.259545118279823e-02, 5.827904525837696e-02, 5.827904525837696e-02, -1.809003843603507e-02, -1.797223656532609e-02, -1.808206510889399e-02, -1.799012750726248e-02, -1.802360132912217e-02, -1.802360132912217e-02, -9.489574869846829e-02, -9.263785205574937e-02, -9.902596481007153e-02, -9.725681959994104e-02, -8.788591532583268e-02, -8.788591532583268e-02, -2.961165225805695e-03, -2.779843173195135e-02, -7.499444216336970e-03, -3.223638631580394e-02, -2.474917616590300e-03, -2.474917616590300e-03, 1.252219322854620e-02, -9.999650991319042e-02, 5.462432662128314e-03, -4.688529363666152e-02, -4.097038700880645e-02, -4.097038700880645e-02, 3.110481322874950e-02, 3.511889698021641e-02, 2.699995424627436e-02, 8.701780768077162e-02, 3.268841921779455e-02, 3.268841921779402e-02, -5.256111754168173e-03, -1.538714033279287e-02, -1.461015389307113e-02, -1.212058618335879e-02, -1.362317125670580e-02, -1.362317125670580e-02, 1.689105997615216e-03, -3.262419079143908e-02, -1.473252014892013e-02, -7.030590847599494e-03, -8.564959192629673e-03, -8.564959192629729e-03, -3.174472813251411e-02, -1.004400243448318e-01, -8.443542837766482e-02, -3.259777971323885e-02, -5.881214344879004e-02, -5.881214344879049e-02, -2.600514399564247e-02, 1.199001686600385e-01, 1.084519765515440e-01, -1.351745903597068e-02, 3.517979713075134e-02, 3.517979713075151e-02, 6.590777559106553e-02, 1.143339411021288e-02, 1.958126823971996e-02, 3.298381927116698e-02, 2.849190912670880e-02, 2.849190912670836e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.433489769887226e-10, -1.433590205591072e-10, -1.433808098796442e-10, -1.432164327441540e-10, -1.433544707594852e-10, -1.433544707594852e-10, -8.122820313548345e-08, -8.147020864528916e-08, -8.930940641907262e-08, -9.465885917899405e-08, -8.123827036893170e-08, -8.123827036893170e-08, 2.329522640870796e-03, 2.334039446502438e-03, 2.424284079895324e-03, 2.005312320539514e-03, 2.330654795219430e-03, 2.330654795219430e-03, 3.659593793308828e-01, 3.566163723641343e-01, 3.390785822951828e-03, 1.006324232073319e+00, 3.632268990760795e-01, 3.632268990760795e-01, -2.869983219018934e+03, -2.572470360623725e+03, -4.678524174330509e+01, -8.757007292723067e+03, -2.693603981170129e+03, -2.693603981170128e+03, -2.713289901630062e-07, -2.750427002014733e-07, -2.717180219394909e-07, -2.746051798915232e-07, -2.732175345427537e-07, -2.732175345427537e-07, 8.632835754523137e-06, 8.826362204754398e-06, 9.154409794650278e-06, 9.339752709728094e-06, 8.041766251712649e-06, 8.041766251712649e-06, -2.675557428798638e-03, 1.004725610711224e-02, -1.805212913975928e-03, 1.422477208743657e-02, -2.794114347130961e-03, -2.794114347130961e-03, -1.168661674303369e+00, 1.647593087184247e-01, -1.112516844483899e+00, 8.972528226905454e-05, -1.375351490064500e-01, -1.375351490064500e-01, -1.170895350487767e+04, -7.945298237130682e+03, -2.955460173803944e+04, -9.880849302484373e+00, -1.079914865218031e+04, -1.079914865217981e+04, -3.581086850630313e-02, -1.145561756938861e-02, -1.370990370333254e-02, -1.836260256478324e-02, -1.552981419938126e-02, -1.552981419938130e-02, -4.258812869717797e-02, 4.318619704673634e-03, -1.773174032768504e-03, -8.152297001316476e-03, -5.247063977338322e-03, -5.247063977338461e-03, 9.531998563973196e-03, 1.105664008214428e-01, 6.584453754727101e-02, 4.720919249571321e-03, 3.391945107591709e-02, 3.391945107591722e-02, 1.190209417213497e-03, -5.864679950308425e+01, -2.094715684770479e+01, -1.288759877445782e-02, -4.347492403688225e+00, -4.347492403688224e+00, -1.239590371182224e+03, -1.355595903705316e+05, -4.847412506647688e+04, -5.096761078884760e+00, -1.825491260436466e+04, -1.825491260436525e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.798952983164399e-06, 1.800690633090836e-06, 1.807605763420163e-06, 1.779297655387408e-06, 1.799874705442013e-06, 1.799874705442013e-06, -3.713207173001770e-04, -3.713630049841084e-04, -3.723515193551804e-04, -3.682757131216342e-04, -3.713530208162111e-04, -3.713530208162111e-04, -3.971582460573777e-03, -3.891285805700668e-03, -1.682723026966262e-03, -1.281585296085180e-03, -3.942014554618105e-03, -3.942014554618105e-03, 2.111707393418522e-02, 1.801315370881301e-02, -8.191990683851135e-03, 4.646330540530926e-02, 2.026215843311996e-02, 2.026215843311996e-02, 4.788325570645751e-02, 4.914415656411956e-02, 6.750948272825802e-02, 1.129576583558430e-02, 5.003057015733480e-02, 5.003057015733476e-02, 4.032955800015248e-04, 4.121062046536633e-04, 4.043126366555038e-04, 4.111570885324556e-04, 4.076466365042903e-04, 4.076466365042903e-04, -8.788268391463407e-04, -9.898321357315644e-04, -8.922248285215507e-04, -9.861777390860868e-04, -9.316610291975939e-04, -9.316610291975939e-04, -6.935863862534242e-03, -2.141526098203778e-02, -8.422947104203491e-03, -2.139594174573635e-02, -5.968382476756189e-03, -5.968382476756189e-03, 6.785420895006937e-02, 4.354311870745559e-02, 7.174638793232986e-02, -3.759424428771611e-03, 7.845852306964354e-02, 7.845852306964354e-02, 1.624170033617124e-02, 1.497192953573335e-02, 2.745046951766265e-02, 5.340493037397458e-02, 1.406636082762311e-02, 1.406636082762310e-02, 2.831569570582860e-02, 2.270029574377611e-02, 2.344530862426222e-02, 2.486960247039407e-02, 2.399229975977100e-02, 2.399229975977099e-02, -1.533774145261593e-02, -1.607723881137001e-02, -8.149982653169126e-03, 4.551047127700355e-03, -2.096715611101920e-03, -2.096715611101902e-03, -2.026343330714766e-02, 1.863014918128810e-02, 2.705894883406874e-03, -8.148382749036042e-03, -6.722583816213163e-03, -6.722583816213216e-03, -9.498028342208012e-03, 6.645853664310121e-02, 6.686032787257204e-02, -1.328485899741313e-02, 8.603603191607696e-02, 8.603603191607695e-02, 2.427383820007833e-02, 4.187772462154804e-03, 1.551873282681850e-02, 9.045618228334004e-02, 1.431174488109395e-02, 1.431174488109398e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
