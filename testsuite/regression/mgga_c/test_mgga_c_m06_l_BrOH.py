
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.324756380329758e-02, -8.324534309245828e-02, -8.323567238936624e-02, -8.327180123198599e-02, -8.324639368438810e-02, -8.324639368438810e-02, -1.553819685667885e-01, -1.553505394783944e-01, -1.544084249850557e-01, -1.547760163698361e-01, -1.553734346343551e-01, -6.440645812647050e-02, -1.767434507855236e-01, -2.892546634936188e-02, -2.235976660530836e-02, -2.543003371313501e-02, -2.907028137829593e-02, -2.907028137829593e-02, -1.275747699589613e-02, -1.420677182036623e-02, -2.478591827348492e-01, 4.651539386359521e-02, -1.318299612014739e-02, -1.318299612014739e-02, 2.541583847893480e-02, 2.640730138646403e-02, 6.844311159037493e-02, 1.345656828337903e-02, 2.617187164341776e-02, 2.617187164341778e-02, -5.310406328915118e-02, -5.304266079309206e-02, -5.309724984389652e-02, -4.200161692167132e-02, -5.307325489538628e-02, -5.307325489538628e-02, -1.598334189496621e-01, -1.547786968151025e-01, -1.621215787454464e-01, -1.580328386474232e-01, -1.534791199100941e-01, -5.560305962836565e-02, -3.450939673600317e-02, -3.083206945681582e-02, -3.565722973675178e-02, -3.314383344389293e-02, -3.342515675091595e-02, -5.032270448736978e-02, -1.582889118883053e-01, 1.019138020340105e-02, -1.574976622593890e-01, -4.828066235623674e-02, 4.891045899794727e-02, 4.891045899794727e-02, -1.938684277392123e-03, 1.468549661857705e-02, 1.129840918813505e-02, -9.539344869612294e-02, -2.026846798761729e-03, 1.350496724808885e-02, -2.514870469244461e-02, -2.597498766563522e-02, -8.436941470891829e-03, -2.543502307389719e-02, -2.554889238051827e-02, -2.554889238051827e-02, -2.514756250482014e-02, -3.324584319317159e-02, -3.094788778633495e-02, -2.846485190308751e-02, -2.974520776725842e-02, -3.564329645751445e-02, -3.276982610561319e-02, -1.393742620660200e-01, -2.200689942568601e-02, -8.584132422911601e-02, -2.817831691057571e-02, -2.817831691057548e-02, -7.659074889549136e-02, 6.665583103598580e-02, 7.449058759154069e-02, -2.986688717277652e-02, -1.388893698889445e-01, 6.719646540713259e-02, 2.914250176303791e-02, 4.410050102846575e-03, 8.074877534617483e-03, 6.541352163142025e-02, 1.165085814820807e-02, 1.165085814820806e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([5.117092144977638e-02, 5.116994982697290e-02, 5.116572670234773e-02, 5.118153237295112e-02, 5.117040943595839e-02, 5.117040943595839e-02, 5.903267912807796e-02, 5.902916218184195e-02, 5.892270644138942e-02, 5.896570229230108e-02, 5.903179074872868e-02, -1.080454882887558e-01, 1.724065964129091e-02, -1.308192297573865e-01, -1.413467879858159e-01, -1.367166111668445e-01, -1.305299620268874e-01, -1.305299620268874e-01, -8.442247912471690e-02, -8.285895087790429e-02, -2.019631283355179e-02, -3.236953937908216e-02, -8.400001688511705e-02, -8.400001688511705e-02, 5.667632542485543e-02, 5.866957170211160e-02, 1.207698410492269e-01, 3.148106439550561e-02, 5.817763173931018e-02, 5.817763173930972e-02, -1.851638417394619e-02, -1.838363742242521e-02, -1.850153251723241e-02, 2.736966035310667e-02, -1.844938775048921e-02, -1.844938775048921e-02, 5.005372332223701e-02, 5.015453200006001e-02, 4.997491808905924e-02, 5.010594223908282e-02, 5.015436271433025e-02, -1.094032414516211e-01, -3.897155724540979e-02, -1.784871870206739e-02, -5.068660608830255e-02, -3.217465918202511e-02, -3.118622040881802e-02, 2.281903735652944e-02, -2.011811256664823e-01, -9.284664860616298e-02, -1.935571578292596e-01, -4.327288818113473e-02, -1.664158104187302e-02, -1.664158104187302e-02, -2.826800908025348e-03, 3.417656154908619e-02, 2.664131519493210e-02, -1.821651613547368e-01, -2.981957252116925e-03, 3.157363483504702e-02, -1.274941574989491e-02, -1.102207341611683e-02, 6.206752696887811e-03, -1.239728012807353e-02, -1.212306760133283e-02, -1.212306760133283e-02, -1.229374873730590e-02, -4.020657029022023e-02, -2.578770619148585e-02, -1.423939440067284e-02, -1.971735917764850e-02, 1.760077468502959e-02, -2.389064080908865e-02, -8.345807219050566e-03, -8.853729301169533e-02, 2.324893967583823e-02, -7.268986533603639e-02, -7.268986533603594e-02, 2.598909017584215e-02, 1.219433593121027e-01, 1.190724324974756e-01, -4.917503694751668e-02, -1.935198569730272e-01, 5.754418918501472e-02, 6.456297869168336e-02, 1.084956980766193e-02, 1.937497404835582e-02, 5.652305926336258e-02, 2.745246656406745e-02, 2.745246656406718e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.939308000496753e-09, -1.939309693159014e-09, -1.939298310365500e-09, -1.939273485231984e-09, -1.939309019239574e-09, -1.939309019239574e-09, -5.384435438209129e-06, -5.385724196942832e-06, -5.423587159791887e-06, -5.406877025535076e-06, -5.384671879639349e-06, 8.908187949350027e-07, -3.382411964808313e-03, 1.216563956242480e-03, 1.151725407594715e-03, 1.207008865061548e-03, 1.217976413222634e-03, 1.217976413222634e-03, 3.750434320730595e-01, 3.758554963507793e-01, -1.175332409017557e-03, -3.741332178746379e-01, 3.750630530473311e-01, 3.750630530473311e-01, -2.871661800090411e+03, -2.574581171254219e+03, -5.004556657752840e+01, -8.779032632546205e+03, -2.695509391541434e+03, -2.695509391541448e+03, -2.695070238618465e-07, -2.732994805459717e-07, -2.699269028752988e-07, -1.977052959306323e-06, -2.714056497585189e-07, -2.714056497585189e-07, -6.275019415817053e-05, -6.407561969049952e-05, -6.204906280796163e-05, -6.318866148369099e-05, -6.451978269352891e-05, 1.241337871018618e-05, 3.044678071903997e-03, -1.675458832588510e-03, 4.789370508447849e-03, 2.285708436631920e-03, 1.610255164429450e-03, -3.309162538980617e-02, -4.375784210638233e+02, 1.234154125264660e-01, -4.388806233494472e+02, 6.907958865655572e-06, -9.674582296918774e-01, -9.674582296918774e-01, -3.503487973227241e+08, -7.962927351604470e+03, -2.957723935070010e+04, -6.160261112355055e+03, -2.968254299775991e+08, -1.083421485361743e+04, -3.107127742910779e-02, -1.708166331578334e-02, -7.790598137363285e-02, -2.320935583265732e-02, -2.139943452721366e-02, -2.139943452721366e-02, -2.683110697932850e-02, 6.439676719064182e-03, 1.617715069398945e-03, -5.751930669240209e-03, -1.572662357089685e-03, -6.780789535920900e-02, -4.476028929071892e-05, -3.176581280351489e-01, 7.678611757687158e-02, -1.891319226476672e-01, 5.737830153253253e-02, 5.737830153253275e-02, -7.817441266989007e-02, -6.031878755093129e+01, -2.396261317230463e+01, 5.039687320355899e-02, -1.254686864925502e+03, -6.680606594857135e+00, -1.259921821889943e+03, -1.356196554335745e+05, -4.848283672112889e+04, -8.237384805302904e+00, -1.830950180884053e+04, -1.830950180884127e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.178646748707340e-05, -8.178632264966521e-05, -8.178539146394881e-05, -8.178779098316107e-05, -8.178639320299862e-05, -8.178639320299862e-05, -1.714926116464327e-03, -1.715030647510578e-03, -1.718061660479987e-03, -1.716650898111381e-03, -1.714940946448943e-03, -6.635962275428742e-04, -2.013963208059606e-02, 4.924391637915154e-05, 1.901819151770101e-03, 1.103930802308631e-03, 1.052478814040386e-06, 1.052478814040386e-06, 1.572226437296241e-02, 1.136564139075002e-02, -1.116516543704279e-02, 7.385702053466163e-02, 1.447867269659103e-02, 1.447867269659103e-02, 4.885455505589083e-02, 5.040844342010994e-02, 7.747667210732634e-02, 1.628116144668716e-02, 5.114375385309817e-02, 5.114375385309816e-02, 4.067101683390805e-04, 4.156658159217887e-04, 4.076989703532667e-04, -1.053170148663105e-03, 4.111948741339835e-04, 4.111948741339835e-04, -4.327512391437071e-03, -4.334584973314298e-03, -4.321757458859683e-03, -4.329134704506924e-03, -4.339051903859970e-03, -1.450875449113477e-03, -1.500593896080461e-02, -4.255940554118193e-04, -1.644025536172824e-02, -1.352849678841558e-02, -1.193534121631112e-02, -3.768111328060246e-02, 8.212386093097579e-03, 4.435511380677955e-02, 4.508528933409053e-03, -1.695917946458960e-03, 8.974629950828082e-02, 8.974629950828082e-02, 2.857536688450344e-04, 1.980292980185503e-02, 3.097665218618505e-02, 4.142734233064691e-02, 3.264387972524669e-04, 2.037674754638402e-02, 9.969984670972065e-02, 5.016046269058885e-02, -4.338587890845474e-02, 7.206283129537792e-02, 6.563685443646264e-02, 6.563685443646264e-02, 7.600948117422558e-02, -1.933768261222552e-02, -1.225284455169735e-02, 5.727476629343625e-03, -5.178902894472792e-03, -4.753810979725796e-02, -5.984227368796732e-03, -8.935817294883375e-02, -3.143324722318010e-03, -7.407513872616844e-02, -1.803818533886196e-02, -1.803818533886178e-02, -5.307229528190335e-02, 7.188140084857934e-02, 7.931262346307832e-02, -3.357246236660072e-02, 2.188770865687316e-02, 1.012938328322306e-01, 3.444065358027652e-02, 6.904929255605783e-03, 1.693471761154240e-02, 1.080701169331951e-01, 2.113045668992668e-02, 2.113045668992674e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
