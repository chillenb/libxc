
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645987698522729e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -5.893544791155395e-02, -6.686302819127440e-02, -2.306342989297275e-02, -1.767338819279353e-02, -2.016370483884295e-02, -2.318575850096611e-02, -2.318575850096611e-02, -1.007790959789211e-02, -1.124564404034424e-02, -7.129454252820250e-02, 3.977925418373756e-02, -1.041948328360972e-02, -1.041948328360972e-02, 2.591788507607359e-02, 2.692121887456505e-02, 6.777117823079219e-02, 1.375894971166491e-02, 2.668107274145364e-02, 2.668107274145367e-02, -6.613160708722032e-02, -6.611562974724111e-02, -6.612982985785378e-02, -1.224181159734425e-01, -6.612362243491406e-02, -6.612362243491406e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119327e-02, -4.892751181759494e-02, -3.541202088573044e-02, -3.626222779103883e-02, -3.427126589770127e-02, -3.534988204340080e-02, -3.597511924549740e-02, -6.444458984389427e-02, -2.795790560897061e-02, 8.149857879108151e-03, -2.775589238622643e-02, -5.221249180151687e-02, 4.235568975472549e-02, 4.235568975472549e-02, -3.066310498112501e-03, 1.501317373748248e-02, 1.154975237740656e-02, -2.111687625325582e-02, -3.174878197427740e-03, 1.380692850106856e-02, -3.376490728703477e-02, -3.421259686475186e-02, -6.421258200260355e-02, -3.393777982829797e-02, -3.400072270874088e-02, -3.400072270874088e-02, -3.355724475150438e-02, -3.349382982923752e-02, -3.416519811859931e-02, -3.425090615002381e-02, -3.426723062304410e-02, -6.165502636499921e-02, -3.708168525254176e-02, -4.342835275928391e-02, -1.764871239408742e-02, -5.212060951466563e-02, -2.359709732394275e-02, -2.359709732394275e-02, -5.782933926396749e-02, 6.635923053659357e-02, 7.278916728986327e-02, -2.756375038363687e-02, -2.479856847389609e-02, 6.201507683400002e-02, 2.973112920976625e-02, 4.510849268684517e-03, 8.257917046368558e-03, 6.038516378327699e-02, 1.191227293648676e-02, 1.191227293648677e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747363821482563e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -7.532071219639301e-02, -7.491623656166164e-02, -4.967760789415054e-02, -5.583532355284797e-02, -5.281530018472163e-02, -4.954574569372124e-02, -4.954574569372124e-02, -3.425822541206783e-02, -3.306427560462742e-02, -7.955565354779474e-02, -4.125292760911186e-02, -3.391120148881208e-02, -3.391120148881208e-02, 4.696528113089058e-02, 4.858837176535656e-02, 8.950489979981212e-02, 2.614681411528732e-02, 4.817581457186235e-02, 4.817581457186230e-02, -1.130682726104017e-01, -1.129916808325410e-01, -1.130598387511763e-01, -1.321322029122264e-01, -1.130300442034928e-01, -1.130300442034928e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -6.077925352591981e-02, -5.480589069032873e-02, -6.318828085127276e-02, -4.841272168058067e-02, -5.735410566879669e-02, -5.890985818898990e-02, -7.237723572555273e-02, -3.318915835573125e-02, -5.301260142623845e-02, -3.296452513148780e-02, -8.494090243012778e-02, -3.191701164817584e-02, -3.191701164817584e-02, -3.946287688264066e-03, 2.839680502432549e-02, 2.207220875175612e-02, -2.549362941948338e-02, -4.083422991717209e-03, 2.621532332829259e-02, -5.848826797546060e-02, -5.740298504571855e-02, -7.213338981778679e-02, -5.753188605334420e-02, -5.736954462002902e-02, -5.736954462002902e-02, -5.691781595571516e-02, -5.068274404677788e-02, -5.743342002032915e-02, -5.998358928316271e-02, -5.932545976316019e-02, -6.944209849581727e-02, -6.337715854134331e-02, -5.006348929577377e-02, -3.425661667234634e-02, -5.935291128433449e-02, -3.219872076833116e-02, -3.219872076833126e-02, -6.540488546969517e-02, 9.263568367549055e-02, 8.238349561632796e-02, -3.727250172738814e-02, -2.965891225314009e-02, 2.039026750661202e-02, 5.365366120707250e-02, 8.929605914054834e-03, 1.602124146457391e-02, 2.030530698911316e-02, 2.276507916744090e-02, 2.276507916744085e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.140061333923080e-09, 2.140050144708869e-09, 2.139980546248714e-09, 2.140165619067161e-09, 2.140055579359703e-09, 2.140055579359703e-09, 1.053619977029612e-05, 1.053632999568697e-05, 1.053849171809080e-05, 1.053365961619606e-05, 1.053599846306481e-05, -8.413495457614514e-08, 2.305061092064932e-02, -9.396493564382596e-04, -9.561438365053502e-04, -9.732736915410249e-04, -9.387078762565519e-04, -9.387078762565519e-04, -3.077423672365938e-01, -3.027318786502192e-01, 9.798189284740019e-03, -1.511303243711015e-01, -3.061899690647678e-01, -3.061899690647678e-01, -1.680169587242066e+03, -1.504403313457419e+03, -2.504212306868809e+01, -5.195177949072368e+03, -1.575062876782812e+03, -1.575062876782815e+03, 4.911591808367099e-07, 4.939133980935788e-07, 4.914651249289393e-07, 2.049757988906591e-06, 4.925356782719874e-07, 4.925356782719874e-07, 1.569030572752531e-04, 1.522990158144234e-04, 1.588000543646201e-04, 1.551377221170865e-04, 1.514285346024099e-04, -3.742830909742796e-06, 3.078042448447072e-03, 6.811622024946733e-03, 1.139685630450292e-03, 4.898701448774169e-03, 4.268381757296268e-03, 4.216450848536327e-02, 1.405103872493004e+02, -1.305152121904420e-01, 1.488702715996216e+02, 2.009982826572150e-05, -3.035829984470295e-01, -3.035829984470295e-01, 6.400145188147278e+07, -4.709319303540964e+03, -1.748924991013290e+04, 1.143310896446297e+03, 5.403367379147436e+07, -6.408692612061194e+03, 4.761528242620668e-02, 2.347337282591601e-02, 7.941850351834552e-02, 3.391680073543897e-02, 3.070152902209532e-02, 3.070152902209532e-02, 3.923476287357443e-02, 4.656567072712545e-03, 1.000157718364075e-02, 1.538599042043797e-02, 1.258067756112337e-02, 7.735411117620380e-02, 4.178695266766730e-03, 2.943673532083432e+00, -5.640837374039599e-02, 4.604427740589262e-01, -3.065930736063491e-02, -3.065930736063477e-02, 1.448927971314816e-01, -3.111528547982135e+01, -1.107223945369205e+01, -2.048167003003138e-03, 3.546719225498808e+02, -2.130642059419910e+00, -7.383440637974494e+02, -8.037340071385838e+04, -2.871351130829244e+04, -2.641492261586139e+00, -1.083404553414786e+04, -1.083404553414793e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.175597516792102e-17, -2.587876733339336e-57, -2.588166329025969e-57, -2.586905263055629e-57, -2.587840182021747e-57, -2.587840182021747e-57, -1.532653304938058e-50, -1.533328950126966e-50, -1.553265067327200e-50, -1.544309361994475e-50, -1.532769823524282e-50, 1.757553649209265e-04, -2.848528787829981e-44, 9.269480458435843e-03, 9.669198666110067e-03, 9.586112060510753e-03, 9.256592740108555e-03, 9.256592740108555e-03, 7.119038535833913e-02, 7.008149601150311e-02, -2.222008655621928e-45, 6.134431829282628e-02, 7.086841080740264e-02, 7.086841080740264e-02, 2.904763149851816e-02, 2.997999842346792e-02, 4.749326848716463e-02, 9.654557316606702e-03, 3.041754388716422e-02, 3.041754388716422e-02, -1.156394267730387e-03, -1.163550380393767e-03, -1.157185492048655e-03, -3.409626118506600e-23, -1.159975508089263e-03, -1.159975508089263e-03, -2.099537646195673e-20, -2.725986234288325e-48, -2.671274612169622e-48, -2.700301497350878e-48, -2.745474687700150e-48, 8.718519641773128e-04, -8.913586004214706e-03, -2.832673116285552e-02, -1.225105622635485e-03, -1.466979433252939e-02, -1.489438768740889e-02, -1.298014893456710e-42, -5.098186819519628e-38, 5.859168876139276e-02, -6.420583570033312e-38, -2.268119105493900e-03, 7.139732197848123e-02, 7.139732197848123e-02, -9.844747062768174e-31, 1.174478603025459e-02, 1.837317703093951e-02, -7.022489663536089e-37, -8.142297594961194e-31, 1.208457305651144e-02, -1.665316681901061e-01, -8.232588025248297e-02, -4.701162828437413e-41, -1.189271645952110e-01, -1.077110089768544e-01, -1.077110089768544e-01, -1.254697726522862e-01, -8.243473851990975e-03, -2.352549447332081e-02, -4.173665387985682e-02, -3.189426029626448e-02, -7.587461213507463e-42, -1.981371979083954e-02, -4.181193925129255e-40, 3.780639589884598e-02, -4.466809033364565e-41, 2.655002617099609e-02, 2.655002617099606e-02, -6.296235696830039e-42, 4.379640066897589e-02, 4.938919322909597e-02, 6.934027285709872e-03, -2.713023882309868e-37, 6.890082805454181e-02, 2.046785732037821e-02, 4.092951247365181e-03, 1.004016024408748e-02, 7.348609844368682e-02, 1.253061727189686e-02, 1.253061727189686e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
