
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.375976326458441e-02, -9.375966914611976e-02, -9.375721729380793e-02, -9.375862754349427e-02, -9.375973281959293e-02, -9.375973281959293e-02, -8.306365710088322e-02, -8.306495166147156e-02, -8.309043858396385e-02, -8.289025973945427e-02, -8.306535557640177e-02, -8.306535557640177e-02, -3.910781667475716e-02, -3.868834708533739e-02, -2.688164871322828e-02, -2.791264731168868e-02, -3.895679865130116e-02, -3.895679865130116e-02, -8.530933484437772e-03, -9.580124837646770e-03, -5.497270105490902e-02, 3.712321315644988e-02, -8.821861341691661e-03, -8.821861341691661e-03, 2.620589928775201e-02, 2.729647099112380e-02, 7.112575677614059e-02, 1.629135051772372e-02, 2.700420193234996e-02, 2.700420193234996e-02, -6.643099999111408e-02, -6.641336895440393e-02, -6.642526773972550e-02, -6.641178176135569e-02, -6.642727723212072e-02, -6.642727723212072e-02, -4.737864610530693e-02, -4.820808326433670e-02, -4.692704895269519e-02, -4.762768699115159e-02, -4.856209198575916e-02, -4.856209198575916e-02, -4.536402785310154e-02, -5.051966664781403e-02, -4.656018709584907e-02, -5.029149846901939e-02, -4.535967215056410e-02, -4.535967215056410e-02, 6.379561519366900e-02, 8.985801040862381e-03, 6.058969534103210e-02, -7.530986139212721e-02, 4.233088616165557e-02, 4.233088616165557e-02, 1.466296189942895e-02, 1.719525255374187e-02, 1.235438582986693e-02, 7.968095909318318e-02, 1.637313540447535e-02, 1.637313540447535e-02, -4.626382646776633e-02, -3.932568048280950e-02, -4.051962329876766e-02, -4.213398025020319e-02, -4.122445836122079e-02, -4.122445836122079e-02, -5.296982070163751e-02, -3.424047265523598e-02, -3.634874046492791e-02, -3.837252525159399e-02, -3.750538861914385e-02, -3.750538861914385e-02, -5.220419387681809e-02, -6.983152134557797e-03, -1.585210233873102e-02, -3.005730960091309e-02, -2.275157706657976e-02, -2.275157706657977e-02, -3.438909423789760e-02, 6.847468718601538e-02, 7.640685670601190e-02, -3.426169402106104e-02, 6.312300371910382e-02, 6.312300371910377e-02, 3.447609182469755e-02, 5.685422085992433e-03, 8.694051752855743e-03, 6.148283893429778e-02, 1.425339776242577e-02, 1.425339776242579e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.545838554225873e-01, -1.545834910796384e-01, -1.545817653996587e-01, -1.545876704534802e-01, -1.545836648807219e-01, -1.545836648807219e-01, -1.462150682765410e-01, -1.461945346980143e-01, -1.456118371537087e-01, -1.463011531086710e-01, -1.462065440850605e-01, -1.462065440850605e-01, -1.358447109906138e-01, -1.361202324934071e-01, -1.361205718355059e-01, -1.326934645966585e-01, -1.359423529273005e-01, -1.359423529273005e-01, -4.192734786245558e-02, -4.244241102264075e-02, -1.380534304410484e-01, -6.276555994712478e-02, -4.216498588165914e-02, -4.216498588165914e-02, 4.700219893014052e-02, 4.863106790256250e-02, 8.367581769511120e-02, 2.677985599865707e-02, 4.821280301608688e-02, 4.821280301608688e-02, -1.128809632964247e-01, -1.128013644643882e-01, -1.128745972692320e-01, -1.128126569020232e-01, -1.128379270006459e-01, -1.128379270006459e-01, -9.109889093259370e-02, -8.807207945216620e-02, -8.769650818884929e-02, -8.511934147996783e-02, -9.347262303423894e-02, -9.347262303423894e-02, -7.189295252016696e-02, -5.892945253195088e-02, -7.662367386052397e-02, -5.035448600520001e-02, -6.688363579287002e-02, -6.688363579287002e-02, -1.344128321839067e-02, -5.592249362082747e-02, -1.762776181241518e-02, -8.253046368476727e-02, -4.341739518974570e-02, -4.341739518974570e-02, 2.566303909071946e-02, 2.892417662360962e-02, 2.227360884420148e-02, 5.169811578128300e-02, 2.684096408328542e-02, 2.684096408328539e-02, -6.909099205190872e-02, -5.832967455530606e-02, -6.096597051988206e-02, -6.399567857935423e-02, -6.237171199918230e-02, -6.237171199918229e-02, -7.244969571395014e-02, -5.728718571268875e-02, -6.238180518707756e-02, -5.825893016548243e-02, -6.151999637965289e-02, -6.151999637965287e-02, -5.811615313140337e-02, -4.580278508495158e-02, -4.808726686107392e-02, -7.694120550850250e-02, -5.871791515665961e-02, -5.871791515665978e-02, -7.380397660955584e-02, 9.001518193040711e-02, 7.153881860625474e-02, -7.260490868693538e-02, 4.124487239032061e-03, 4.124487239031703e-03, 5.411197259470804e-02, 9.274312351479273e-03, 1.614146500280349e-02, 3.290838650738132e-03, 2.335380821321041e-02, 2.335380821321028e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.005994973356131e-10, 4.006054463103280e-10, 4.006268205868046e-10, 4.005305333625097e-10, 4.006026644922699e-10, 4.006026644922699e-10, 1.357842798531825e-06, 1.357785571001787e-06, 1.356081582166735e-06, 1.359533944726515e-06, 1.357774559063514e-06, 1.357774559063514e-06, 3.207142631005318e-03, 3.200066765224057e-03, 2.728173566926254e-03, 2.543718600003470e-03, 3.204639294480293e-03, 3.204639294480293e-03, -1.601719618939960e-01, -1.331362830123504e-01, 1.586048216045398e-03, 6.657468583776452e-01, -1.503329935764758e-01, -1.503329935764758e-01, -1.677839683500112e+03, -1.501487961479627e+03, -2.133424156455254e+01, -5.171168450377040e+03, -1.572425741561480e+03, -1.572425741561479e+03, 4.898367283588178e-07, 4.925641778293991e-07, 4.901566809381770e-07, 4.922749224338762e-07, 4.911765353401672e-07, 4.911765353401672e-07, 1.314284723164752e-06, 1.120763940672414e-06, 4.512578877358849e-07, 2.764512704899958e-07, 2.311638149842489e-06, 2.311638149842489e-06, 6.490005478311219e-03, 4.652969701258079e-03, 7.603118688539389e-03, 1.503476419488958e-03, 5.838304241786350e-03, 5.838304241786350e-03, 4.307771070694313e-01, -7.638597780233938e-02, 5.448531353210857e-01, 1.401446251362487e-05, 3.474437236990903e-01, 3.474437236990903e-01, -6.919178955705617e+03, -4.688459845726827e+03, -1.745843737458084e+04, -1.592269388471169e+00, -6.370688718073234e+03, -6.370688718073208e+03, 6.361103363607895e-02, 2.326891383143296e-02, 3.025367267618166e-02, 3.967353404404576e-02, 3.435328328413253e-02, 3.435328328413252e-02, 7.034417675184598e-02, 6.362033617377990e-03, 1.148940316566168e-02, 1.451367990915121e-02, 1.328682289349799e-02, 1.328682289349799e-02, 2.405214275314495e-03, -7.278344553684959e-02, -2.069652909519482e-02, 3.994013299777204e-02, 1.459004132916773e-02, 1.459004132916792e-02, 1.221550711841935e-02, -2.909184689871125e+01, -7.876854864701172e+00, 7.504225583833019e-02, -4.230941420682843e-02, -4.230941420682428e-02, -7.166822807917509e+02, -8.031478994897175e+04, -2.870122819393107e+04, 1.340929836102823e-01, -1.077571666243067e+04, -1.077571666243073e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.044457849154267e-05, -6.044617589592052e-05, -6.045482661272855e-05, -6.042897235088941e-05, -6.044540385976735e-05, -6.044540385976735e-05, -2.165286300563865e-04, -2.166176232133733e-04, -2.193198650000161e-04, -2.186133856254060e-04, -2.165491518774592e-04, -2.165491518774592e-04, -2.054373343449041e-04, -1.730253383977459e-04, 8.581097802915061e-04, 8.845698443380853e-04, -1.938433566208154e-04, -1.938433566208154e-04, 5.551345246193281e-02, 5.223339810654715e-02, -2.327768547295347e-04, 3.700073733109550e-02, 5.437484712005199e-02, 5.437484712005199e-02, 2.846469833495062e-02, 2.922044813260240e-02, 4.100662563801000e-02, 6.697850002346518e-03, 2.974871469539125e-02, 2.974871469539123e-02, -1.147534601471833e-03, -1.154643259060668e-03, -1.148432535140016e-03, -1.153950066228143e-03, -1.150940153330834e-03, -1.150940153330834e-03, 5.351134705132758e-04, 5.024919063920487e-04, 6.139269684841452e-04, 5.916707080000503e-04, 4.094343789551386e-04, 4.094343789551386e-04, -9.957057967451208e-03, -6.665590244154510e-03, -6.799518801776384e-03, -5.059057628980896e-03, -1.239808508229285e-02, -1.239808508229285e-02, 4.543769037718729e-02, 5.144256908399875e-02, 4.842291928573514e-02, -4.669685013519195e-04, 5.829180134926656e-02, 5.829180134926656e-02, 9.629647304103924e-03, 8.877400552116064e-03, 1.627796606500765e-02, 3.384558353325338e-02, 8.341624434161986e-03, 8.341624434161974e-03, -9.205968572577414e-02, -6.085676012400491e-02, -6.968646141598835e-02, -7.899397464745836e-02, -7.404455226491553e-02, -7.404455226491553e-02, -3.742179138116825e-02, -9.530211786810721e-03, -2.293760217213927e-02, -3.386952085580420e-02, -2.859948941615112e-02, -2.859948941615111e-02, -4.533195621819652e-03, 4.358282614633500e-02, 2.692132624555283e-02, -2.306672647888434e-03, 1.180080699007207e-02, 1.180080699007205e-02, -4.998799123323819e-03, 4.027770952141842e-02, 4.107621922752764e-02, -1.124093001131161e-02, 5.653793618607209e-02, 5.653793618607213e-02, 1.442559464054502e-02, 2.482409857680431e-03, 9.200068130228825e-03, 5.938845552305135e-02, 8.486857384778621e-03, 8.486857384778626e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
