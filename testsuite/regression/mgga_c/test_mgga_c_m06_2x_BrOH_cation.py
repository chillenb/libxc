
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.081659186438362e-01, -1.081675433246591e-01, -1.081732064682547e-01, -1.081491181776685e-01, -1.081619593309752e-01, -1.081619593309752e-01, -6.968153265861160e-02, -6.968071775626414e-02, -6.964525947177533e-02, -6.952003562151812e-02, -6.959062236431482e-02, -6.959062236431482e-02, -4.764485196693569e-02, -4.750169826186243e-02, -4.239536149132828e-02, -4.127642905181775e-02, -4.332872061028095e-02, -4.332872061028095e-02, -6.466785881546255e-03, -7.005618616462830e-03, -7.214416291283973e-02, 1.260179486175519e-02, 7.102526635431417e-03, 7.102526635431391e-03, 8.135693257982635e-03, 8.427891389139037e-03, 2.786625409101401e-02, 4.397148270760378e-03, 3.144378676458573e-03, 3.144378676458554e-03, -9.489878525027623e-02, -9.521275467899987e-02, -9.491666922449415e-02, -9.519370796593950e-02, -9.505606231804309e-02, -9.505606231804309e-02, -3.466791062246008e-02, -3.445201668882081e-02, -3.312116355487851e-02, -3.287683868736763e-02, -3.531660574103759e-02, -3.531660574103759e-02, -3.863678888537883e-02, -4.708340504915141e-02, -3.786178049293376e-02, -4.567707898019898e-02, -3.978625610640409e-02, -3.978625610640403e-02, 2.765734755654238e-02, 1.696283338242371e-03, 2.871663474122618e-02, -6.897087518367917e-02, 1.718082402700633e-02, 1.718082402700633e-02, 2.278675881377219e-03, 3.623017051953976e-03, 3.250178299021543e-03, 3.040460669501075e-02, 3.087185326059585e-03, 3.087185326059599e-03, -5.652407444145162e-02, -5.735642735192089e-02, -5.812556666722507e-02, -5.810776502294584e-02, -5.821145082833884e-02, -5.821145082833884e-02, -4.721004194129055e-02, -2.512599542704572e-02, -3.318747604976102e-02, -4.380921107623813e-02, -3.822589768244639e-02, -3.822589768244637e-02, -4.763652349778175e-02, -6.521906269324806e-03, -1.142656236095510e-02, -2.584687811776747e-02, -1.733202677539963e-02, -1.733202677539966e-02, -2.730350908768953e-02, 2.881392523815317e-02, 3.077183101004195e-02, -2.779448752201114e-02, 2.747711954292995e-02, 2.747711954293006e-02, 8.306957337060364e-03, 3.032319653100972e-04, 2.640405353403346e-03, 2.832699946992780e-02, 3.030531592837286e-03, 3.030531592837274e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.275256182109758e-01, -2.275413143206066e-01, -2.275237237652498e-01, -2.275419330241509e-01, -2.275337056590880e-01, -2.275407970256986e-01, -2.275291368238329e-01, -2.275647063942479e-01, -2.275048983551693e-01, -2.275767428960745e-01, -2.275048983551693e-01, -2.275767428960745e-01, -1.007466405709726e-01, -1.007674175590802e-01, -1.007437305116692e-01, -1.007780264125974e-01, -1.009576727870718e-01, -1.007966739257784e-01, -1.009720917297542e-01, -1.009479961670169e-01, -1.016272760441427e-01, -1.001629508713073e-01, -1.016272760441427e-01, -1.001629508713073e-01, -7.304133625893719e-02, -7.231862157348418e-02, -7.366461730878934e-02, -7.306484856987305e-02, -9.595430267589969e-02, -9.396877756231597e-02, -9.276693650515352e-02, -9.184457391960038e-02, -9.092433998727620e-02, -8.062730491909706e-02, -9.092433998727620e-02, -8.062730491909706e-02, -2.283886105837415e-02, -1.256593286701430e-02, -2.665350023965431e-02, -1.596486321999913e-02, -7.545300495850607e-02, -8.879537766056042e-02, -1.752951972694050e-02, -2.160483463700602e-02, 2.879508379940560e-02, -3.088034094143027e-01, 2.879508379940554e-02, -3.088034094143009e-01, 2.950530831123915e-03, 3.181977377733649e-05, 3.305870521264501e-03, -1.320189317595590e-04, 6.757324701481171e-03, 2.862655333738296e-03, 2.445693368509301e-04, 7.883574352885014e-04, -6.112540335383112e-03, 1.290174191037658e-02, -6.112540335383231e-03, 1.290174191037536e-02, -1.673748514794725e-01, -1.675907998094940e-01, -1.670314218709794e-01, -1.672878375886695e-01, -1.673625314106267e-01, -1.676021641842199e-01, -1.670885087882196e-01, -1.673044689762149e-01, -1.671844538105493e-01, -1.674396731026459e-01, -1.671844538105493e-01, -1.674396731026459e-01, -1.138862081337309e-01, -1.135680447226223e-01, -1.146510248850213e-01, -1.145109208531762e-01, -1.113296865325681e-01, -1.105380778569311e-01, -1.119869979857706e-01, -1.110906195172409e-01, -1.141012839039437e-01, -1.162480424704665e-01, -1.141012839039437e-01, -1.162480424704665e-01, -7.119613973397321e-02, -7.129353901767824e-02, -5.679758122039845e-02, -5.480451740474417e-02, -7.104067187499533e-02, -5.125517354867162e-02, -6.260045358416474e-02, -4.540298004884224e-02, -6.216326943214287e-02, -8.270559656882490e-02, -6.216326943214288e-02, -8.270559656882472e-02, -1.205748425001398e-02, -3.929192521649666e-03, -1.651207935653368e-02, -1.432018947737425e-02, -1.541529430141549e-02, 2.880728431074906e-03, -7.103087050142684e-02, -7.113599940754128e-02, -3.902153940231014e-02, 7.154958485669338e-03, -3.902153940231005e-02, 7.154958485669254e-03, 4.666727161267292e-04, -4.668407329402358e-04, 5.522535749340107e-04, 6.577155693088924e-05, 9.819624520610154e-04, -3.851396428492848e-04, 3.348711238765725e-03, -2.455798773270347e-03, 4.993292758630038e-03, -3.053804753493237e-03, 4.993292758630219e-03, -3.053804753493186e-03, -5.535588153759212e-02, -5.359208332089806e-02, -6.723557675888833e-02, -6.504938270198213e-02, -6.267041181118724e-02, -6.055325133039274e-02, -5.898113202019955e-02, -5.711045164469960e-02, -6.077601236405007e-02, -5.878562709105503e-02, -6.077601236405007e-02, -5.878562709105505e-02, -5.164104015275080e-02, -5.029106885677336e-02, -8.578375143434136e-02, -8.394545814371587e-02, -8.928124919267402e-02, -8.661821037141193e-02, -8.246685106973381e-02, -8.068709345137701e-02, -8.652583986912578e-02, -8.483350192062573e-02, -8.652583986912575e-02, -8.483350192062579e-02, -5.842249027101473e-02, -5.445100986221597e-02, -1.643857587758546e-02, -1.512903478565637e-02, -3.953658815296068e-02, -3.907828932866722e-02, -6.231693051338454e-02, -6.128249745275798e-02, -5.904891688516190e-02, -5.916731429735778e-02, -5.904891688516237e-02, -5.916731429735841e-02, -7.314428846772106e-02, -6.977113012817387e-02, 4.635898140783405e-03, 4.279312717961024e-03, 3.141574385082978e-03, 3.733554910892692e-03, -6.172605391947655e-02, -5.265842412623184e-02, -2.216326398333326e-02, 8.736406268399628e-03, -2.216326398333143e-02, 8.736406268400387e-03, 2.760143074944429e-03, 4.925881705343063e-04, -2.420460409128362e-04, -3.242565020789711e-04, 7.764852349118170e-04, -3.453656096565570e-04, -6.464868830731668e-03, -9.426971467544147e-03, 4.197566587645907e-03, -2.621889998793701e-03, 4.197566587645876e-03, -2.621889998793564e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.581238174623490e-10, 0.000000000000000e+00, 3.580702361614118e-10, 3.580923286605832e-10, 0.000000000000000e+00, 3.580508895996274e-10, 3.580454129274531e-10, 0.000000000000000e+00, 3.579478314418679e-10, 3.583543019739624e-10, 0.000000000000000e+00, 3.583943427950128e-10, 3.580776506497926e-10, 0.000000000000000e+00, 3.582644574812006e-10, 3.580776506497926e-10, 0.000000000000000e+00, 3.582644574812006e-10, 1.907805153740825e-06, 0.000000000000000e+00, 1.913735860177473e-06, 1.907486031547086e-06, 0.000000000000000e+00, 1.914228879402259e-06, 1.913009169592589e-06, 0.000000000000000e+00, 1.912309580866593e-06, 1.905861595550485e-06, 0.000000000000000e+00, 1.910698006088963e-06, 1.931166004461696e-06, 0.000000000000000e+00, 1.890502089560344e-06, 1.931166004461696e-06, 0.000000000000000e+00, 1.890502089560344e-06, 4.198372648921709e-03, 0.000000000000000e+00, 4.465023502271294e-03, 4.193734949419011e-03, 0.000000000000000e+00, 4.541628822002383e-03, 5.616586442076642e-03, 0.000000000000000e+00, 5.036143893452907e-03, 4.992433846467567e-03, 0.000000000000000e+00, 5.038363186546411e-03, 8.034629717187663e-03, 0.000000000000000e+00, 2.846400723055764e-03, 8.034629717187663e-03, 0.000000000000000e+00, 2.846400723055764e-03, -1.633238415444760e-01, 0.000000000000000e+00, -4.711763394237713e-01, -1.296895178810994e-02, 0.000000000000000e+00, -3.321215149743517e-01, 2.394789224344752e-03, 0.000000000000000e+00, 3.296567237666265e-03, 4.785586543384413e-03, 0.000000000000000e+00, -7.154896260642003e-01, -1.439314076556292e+00, 0.000000000000000e+00, 3.207895991608803e+01, -1.439314076556287e+00, 0.000000000000000e+00, 3.207895991608771e+01, 7.713729910942512e+03, 0.000000000000000e+00, 6.738727829376068e+03, 7.085684259589292e+03, 0.000000000000000e+00, 6.098979163092864e+03, 8.846363506795662e+01, 0.000000000000000e+00, 7.052896437685966e+01, 2.002928436211482e+04, 0.000000000000000e+00, 2.088537002706690e+04, 9.611280357868704e+03, 0.000000000000000e+00, 4.340021526483678e+04, 9.611280357868702e+03, 0.000000000000000e+00, 4.340021526483846e+04, 2.246006849115958e-08, 0.000000000000000e+00, 2.314876056573605e-08, 1.228177599708596e-08, 0.000000000000000e+00, 1.337204700296099e-08, 2.186714634701094e-08, 0.000000000000000e+00, 2.283782808880410e-08, 1.318511035826328e-08, 0.000000000000000e+00, 1.390726876240842e-08, 1.727517589453062e-08, 0.000000000000000e+00, 1.825718312129440e-08, 1.727517589453062e-08, 0.000000000000000e+00, 1.825718312129440e-08, 3.117590325548035e-05, 0.000000000000000e+00, 3.112152966235550e-05, 3.116937206294425e-05, 0.000000000000000e+00, 3.117381315374919e-05, 3.001537625242909e-05, 0.000000000000000e+00, 3.030497901984526e-05, 3.011366682463396e-05, 0.000000000000000e+00, 3.034900613840500e-05, 3.167123159363881e-05, 0.000000000000000e+00, 3.133464262210950e-05, 3.167123159363881e-05, 0.000000000000000e+00, 3.133464262210950e-05, 8.826693500566599e-03, 0.000000000000000e+00, 8.778629916855017e-03, -1.433313155377560e-04, 0.000000000000000e+00, -1.236528930487574e-03, 1.447697899362814e-02, 0.000000000000000e+00, 9.109201972659174e-03, 1.831764557815901e-02, 0.000000000000000e+00, 9.277638027297421e-03, 5.660678306470893e-03, 0.000000000000000e+00, 1.052623570778863e-02, 5.660678306470945e-03, 0.000000000000000e+00, 1.052623570778865e-02, 2.045487788742749e+00, 0.000000000000000e+00, 1.294803082296379e+00, -4.420758779270224e-01, 0.000000000000000e+00, -4.578043735965190e-01, 4.980557517010943e+00, 0.000000000000000e+00, 9.942451667648521e-01, 4.179307348028696e-05, 0.000000000000000e+00, 4.183769122956671e-05, 1.732356823123869e+00, 0.000000000000000e+00, -2.814008277150148e+00, 1.732356823123855e+00, 0.000000000000000e+00, -2.814008277150144e+00, 3.173255593144209e+04, 0.000000000000000e+00, 2.802155282532183e+04, 2.120314309454916e+04, 0.000000000000000e+00, 1.927032728171422e+04, 1.062525435054682e+05, 0.000000000000000e+00, 9.821506254260072e+04, 1.744275468058129e+01, 0.000000000000000e+00, 1.796919690864930e+01, 4.442586236409740e+04, 0.000000000000000e+00, 3.952562942499625e+04, 4.442586236409248e+04, 0.000000000000000e+00, 3.952562942499611e+04, -1.219155731647363e-01, 0.000000000000000e+00, -1.245669760222235e-01, -4.111659308800426e-02, 0.000000000000000e+00, -4.252841361950048e-02, -6.013477359260773e-02, 0.000000000000000e+00, -6.192431066297960e-02, -8.249912682524851e-02, 0.000000000000000e+00, -8.419150114709485e-02, -7.040865835512639e-02, 0.000000000000000e+00, -7.215655822116250e-02, -7.040865835512639e-02, 0.000000000000000e+00, -7.215655822116246e-02, -9.018067281511405e-02, 0.000000000000000e+00, -9.402179919756755e-02, 2.939560072745141e-02, 0.000000000000000e+00, 2.858559541642801e-02, 2.372500361161062e-02, 0.000000000000000e+00, 2.263123901073893e-02, 8.069112211392773e-03, 0.000000000000000e+00, 7.338498832940876e-03, 1.745147263692806e-02, 0.000000000000000e+00, 1.666305345526879e-02, 1.745147263692805e-02, 0.000000000000000e+00, 1.666305345526879e-02, 2.702131744873981e-03, 0.000000000000000e+00, 1.403692621420686e-03, -1.546363369722105e-01, 0.000000000000000e+00, -1.592904417765791e-01, 6.443294847168372e-02, 0.000000000000000e+00, 6.378579249192919e-02, 1.006573595814568e-01, 0.000000000000000e+00, 9.800977076849575e-02, 1.338176486219542e-01, 0.000000000000000e+00, 1.361456619518214e-01, 1.338176486219534e-01, 0.000000000000000e+00, 1.361456619518230e-01, 3.492957524338522e-02, 0.000000000000000e+00, 3.327166884159784e-02, 9.198904121279335e+01, 0.000000000000000e+00, 8.844615880010764e+01, 3.879134262190777e+01, 0.000000000000000e+00, 3.161495216002207e+01, 1.347807220240909e-01, 0.000000000000000e+00, 1.092311928455151e-01, 1.127257367071846e+01, 0.000000000000000e+00, 8.210696224704943e-01, 1.127257367071805e+01, 0.000000000000000e+00, 8.210696224701001e-01, 2.419890642624856e+03, 0.000000000000000e+00, 2.206769390838540e+03, 3.693221060107650e+05, 0.000000000000000e+00, 3.667067196384635e+05, 1.376214720072286e+05, 0.000000000000000e+00, 1.241725373067614e+05, 9.360614235999297e+00, 0.000000000000000e+00, 7.499251181472187e+00, 7.983718511166611e+04, 0.000000000000000e+00, 4.864583615323689e+04, 7.983718511166562e+04, 0.000000000000000e+00, 4.864583615323738e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.466175893970877e-05, 2.468206607934153e-05, 2.466488557100011e-05, 2.468461986618346e-05, 2.467441941161377e-05, 2.469698655714230e-05, 2.463562032119977e-05, 2.465168902553589e-05, 2.466025122572420e-05, 2.467158259003449e-05, 2.466025122572420e-05, 2.467158259003449e-05, -2.592695907668935e-04, -2.601607585655898e-04, -2.592000579183616e-04, -2.601596626890540e-04, -2.583791110409044e-04, -2.590749028436454e-04, -2.586525468331515e-04, -2.595927193870399e-04, -2.588075561264464e-04, -2.593863753362882e-04, -2.588075561264464e-04, -2.593863753362882e-04, -3.733797833682670e-03, -4.161150668043057e-03, -3.678186320847644e-03, -4.197210745504723e-03, -3.826719160788211e-03, -3.289465141329096e-03, -3.546471062314033e-03, -3.704270509759351e-03, -6.997251675218047e-03, -1.507142323850474e-03, -6.997251675218047e-03, -1.507142323850474e-03, 2.380151054583713e-02, 3.522966475656100e-02, 1.840493369168328e-02, 2.971593788975077e-02, -2.595299878834654e-03, -3.506354110706404e-03, 2.131230367705849e-02, 3.912574996236778e-02, 7.342264550485564e-02, -6.813075060483857e-02, 7.342264550485531e-02, -6.813075060483875e-02, -1.198341334057752e-02, -1.266884617510006e-02, -1.255299228706923e-02, -1.342942174184809e-02, -2.074369001810242e-02, -2.074511686362776e-02, -6.070610446750347e-03, -6.131807947010815e-03, -1.039623466735859e-02, -7.044750175087928e-03, -1.039623466735859e-02, -7.044750175087948e-03, 8.977377588312367e-04, 8.987116546890941e-04, 9.133516396693357e-04, 9.139150234016454e-04, 8.988494883730677e-04, 8.994628293110304e-04, 9.123096307674063e-04, 9.131883972267932e-04, 9.054790128049697e-04, 9.063048211598899e-04, 9.054790128049697e-04, 9.063048211598899e-04, -1.126906579043891e-03, -1.132922389284256e-03, -1.172861516717381e-03, -1.178334837859872e-03, -1.097093885224742e-03, -1.123916798473617e-03, -1.144683484032652e-03, -1.170855804910763e-03, -1.175741031374540e-03, -1.142422889575017e-03, -1.175741031374540e-03, -1.142422889575017e-03, -2.038231894178442e-03, -1.821740909329538e-03, 2.677727582059919e-03, 3.133809417459221e-03, -4.924333721097598e-03, -5.601339170398382e-03, -5.861020382835191e-03, -6.042536020355483e-03, -6.236823626768350e-05, -3.621225075018259e-04, -6.236823626767128e-05, -3.621225075018314e-04, 8.189035632861488e-03, 9.524846372110244e-03, 3.720301950675191e-02, 3.746577632421176e-02, 4.419097316966911e-05, 9.358675478268064e-03, -9.172151968859372e-04, -9.157923610420026e-04, 1.771362298446656e-02, 5.212968200369501e-02, 1.771362298446665e-02, 5.212968200369500e-02, -2.924622529894875e-03, -2.989663657516738e-03, -5.071360507663026e-03, -4.711880985401627e-03, -1.193264385183372e-02, -1.302899577078516e-02, -1.201303460581791e-02, -1.172820484749766e-02, -3.261451096061556e-03, -1.357918936193709e-02, -3.261451096061563e-03, -1.357918936193712e-02, 1.410926344647725e-01, 1.441271413848746e-01, 8.697439161120074e-02, 8.864316575196211e-02, 1.053263159030823e-01, 1.075909851479780e-01, 1.227840515570816e-01, 1.251867358302651e-01, 1.138745054172142e-01, 1.162187448312259e-01, 1.138745054172142e-01, 1.162187448312259e-01, 4.284179465953626e-02, 4.516678597237807e-02, -1.368166720363814e-02, -1.360601250771679e-02, -3.159970185781863e-03, -2.924088734610726e-03, 1.995777555311844e-02, 2.001694739843682e-02, 6.354279103433975e-03, 6.533529380840915e-03, 6.354279103433975e-03, 6.533529380840899e-03, -7.561929990587733e-04, -4.157873244167921e-04, 2.413074207049261e-02, 2.452308495929659e-02, 1.060060534091222e-03, 9.697313713139511e-04, -1.608346434775983e-02, -1.594159923253748e-02, -1.513033755932194e-02, -1.551905338829312e-02, -1.513033755932196e-02, -1.551905338829333e-02, -1.216531990833416e-02, -1.246605773295267e-02, -2.256291457976880e-02, -2.207856962124927e-02, -1.828097028542687e-02, -1.729613893625841e-02, -1.480989289736452e-02, -1.574850491050636e-02, -3.436306260978262e-03, 1.326265046531363e-02, -3.436306260978330e-03, 1.326265046531368e-02, -8.569197168838805e-03, -8.573642145625272e-03, -9.765576406112770e-04, -7.323205467428157e-04, -6.492776274176840e-03, -7.033310437794850e-03, -1.193148157570253e-03, 4.040835192818014e-03, -5.585396835251258e-03, -1.285523318842689e-02, -5.585396835251250e-03, -1.285523318842694e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
