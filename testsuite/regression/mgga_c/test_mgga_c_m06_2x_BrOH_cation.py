
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.343450330956004e-01, -1.343441524510804e-01, -1.343406402337244e-01, -1.234433415958215e-01, -1.234423765720658e-01, -1.061878453592339e-01, -1.048041421835777e-01, -3.605176481480005e-02, -3.619323781213618e-02, -3.613667735892412e-02, -3.614167337876212e-02, -1.048896615749199e-01, -1.071006032839997e-01, -1.120702083676693e-01, -1.581087650577284e-02, -1.175477721742462e-01, -1.099446280476785e-01, -1.597663577468283e-02, -8.855309465052250e-02, -8.596795176235021e-02, -1.700602095705779e-01, 1.036072277580929e-02, 1.195657396623761e-02, -5.080901395822603e-02, 8.211633510741606e-03, 8.009673592331538e-03, 1.119884733696394e-02, 5.036283390966872e-03, 3.562477344688932e-03, 3.562477344688932e-03, -9.489105521677120e-02, -9.520808366848266e-02, -9.490925151021253e-02, -9.518892945142238e-02, -9.507883299291878e-02, -9.509164014191430e-02, -2.787341127576337e-02, -2.844095888293563e-02, -2.746010387653941e-02, -2.793811864848778e-02, -1.002919867910459e-01, -2.840319770996524e-02, -4.961443743535125e-02, -4.451620845579699e-02, -2.197811726693849e-02, -2.869876638761119e-02, -5.066600392610817e-02, -3.104426295433763e-02, 2.956764213364652e-02, -1.139749022034656e-01, 3.136818829407322e-02, -4.766927650923219e-02, 1.662376548211911e-02, 1.662376548211923e-02, 3.785853197231569e-03, 4.933226975296121e-03, 3.817675445504028e-03, -2.374060367274591e-02, 3.785447271057897e-03, 3.785447271057892e-03, -6.913540655514291e-02, -6.109324995190280e-02, -4.510763801534104e-02, -5.554591604365119e-02, -4.481733379915281e-02, -5.511984547942782e-02, -6.729244643962071e-02, -4.953090637064712e-02, -4.625917067996790e-02, -4.255656488948571e-02, -3.612771470223883e-02, -4.629314441121284e-02, -4.980105676875754e-02, -7.437890444501299e-03, -8.493310563235644e-02, -5.666216029343367e-02, -1.315665289255233e-02, -6.665195731988378e-02, -1.952646009448544e-02, -2.372794829669655e-02, 3.454922139676780e-02, -1.755132553104646e-02, 2.945567722824873e-02, 2.945567722824877e-02, -3.394166989737882e-03, 1.415327930973049e-03, -7.895330477846261e-04, -7.056879485901804e-02, 3.649263171753044e-03, 3.291155688224871e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.148698097177538e-02, -9.147434564511359e-02, -9.148684588217683e-02, -9.147550053182395e-02, -9.149217638645385e-02, -9.147435149001348e-02, -3.688053912208082e-02, -2.689214434289428e-01, -3.689445109675611e-02, -2.689241193019848e-01, -2.413553830815802e-01, -2.413499134411932e-01, -1.114010191538588e-01, 6.069333434210145e-02, -1.375542777053303e-01, -1.375731132084586e-01, -1.382321845216965e-01, -1.381842375191238e-01, -1.379544353676241e-01, -1.379486038789863e-01, -1.382332803616550e-01, -1.377127722715933e-01, 5.967387783568062e-02, -1.117165834186761e-01, -3.782823065662820e-02, -3.111985279323611e-02, 6.709455553094812e-02, 2.631388895630865e-02, -2.004916248611882e-02, -2.102944508375851e-02, 2.618945251765012e-02, 6.948206203466532e-02, 3.930633961821417e-04, -7.755697025675735e-02, -2.282469300152393e-02, -2.749351569132169e-02, 1.534233247466754e-02, 1.730800343207328e-02, 1.772101688508533e-02, 2.222929541306588e-02, -4.642117571697169e-02, 5.893745336934411e-02, -2.791857143785147e-02, -6.951470504226683e-03, 6.280835109110885e-02, -2.979726797118578e-01, 7.547014856501585e-02, -3.133689889671712e-01, 2.976487780146379e-03, 4.460784393745322e-05, 1.060119050692014e-02, -7.656368070751904e-04, -3.588298752400244e-02, -4.449841888177471e-02, 4.322023810817641e-04, 9.489395768093699e-04, -6.037779838891851e-03, 1.321303727373529e-02, -6.037779838891917e-03, 1.321303727373466e-02, -1.683095182951143e-01, -1.684575426124887e-01, -1.679586346354012e-01, -1.681473228530587e-01, -1.682747877741702e-01, -1.684543051665450e-01, -1.679952110665456e-01, -1.681506725855264e-01, -4.798988143203919e-02, -1.864653718310703e-01, -1.862808240095842e-01, -4.812677917270035e-02, -9.918196247505073e-02, -9.925901694055272e-02, -1.034641613664765e-01, -1.035694555709709e-01, -9.588231342614173e-02, -9.563809614671182e-02, -9.991501516586943e-02, -9.953311691698086e-02, -6.410200222145948e-02, 6.431309562551295e-02, -1.026073744199081e-01, -1.039090349528913e-01, -1.039249596920359e-01, 3.230326787506996e-03, -1.014188028987841e-01, -9.795374151415216e-02, -9.245038659873156e-02, -7.664262098967223e-02, -1.064627694755770e-01, -8.699845765766677e-02, -9.370932182022970e-02, -1.192233077574089e-02, -8.674247751770070e-02, -1.133003291141217e-01, -1.988217544198522e-02, -1.662805460281976e-02, -2.603036327161476e-02, -7.506533050994513e-02, -2.629637854083463e-02, -6.329870220216643e-03, -1.448324779036705e-01, -1.449396562515555e-01, -4.797771386758844e-02, 6.553066619701228e-03, -4.797771386758960e-02, 6.553066619698941e-03, 5.106950647772063e-03, -3.854406586221288e-05, 8.954362438351799e-04, 4.398257966468090e-04, 1.132660306947655e-03, -2.251250998952875e-04, -1.266535965516083e-01, -1.387217037363536e-01, 5.595888017511967e-03, -3.002721011996595e-03, 5.595888017511749e-03, -3.002721011996605e-03, -6.486685236484710e-02, -6.265798556860609e-02, -7.815869785261735e-02, -7.567531336324539e-02, -4.554896599873787e-02, -4.399151016245262e-02, -4.121576550890725e-02, -7.199380547094553e-02, -4.570023998064535e-02, -4.417025334190471e-02, -4.052468984375301e-02, -7.434177741082323e-02, -6.624340871522300e-02, -6.413137243418854e-02, -8.699872386229203e-02, 1.362822332872450e-02, -1.051229091584540e-01, -3.839380477870170e-03, -9.440393701718543e-02, -9.256277566198980e-02, -9.671982385074854e-02, -9.462005917199851e-02, -1.074117899213076e-01, -1.238296396115854e-02, -1.183311296806460e-01, -1.419207634304220e-02, -7.422452060557930e-03, -5.754385300029710e-03, 4.174013805000602e-02, 2.117381595908650e-02, 3.383690129069128e-02, -3.050354447703992e-02, -3.532328151062472e-02, -3.563186515049324e-02, -7.358632993344910e-04, 4.273967902873306e-02, -7.673478024969141e-02, -7.414500009220001e-02, -4.826573437167943e-02, -4.934969247100724e-02, 1.333727989234370e-03, 7.904672706007762e-04, -7.145450813377596e-02, -6.406258367459072e-02, -2.754973850970512e-02, -6.975115085845474e-04, -2.754973850970487e-02, -6.975115085831162e-04, -5.109264740541011e-03, -5.089119432260530e-03, 6.392634079295111e-05, 4.273248599799443e-05, -1.134126545906873e-03, -9.978349603564918e-04, -1.008576787786392e-01, -1.076001212429885e-01, 4.677482345446720e-03, -2.571494590440022e-03, 4.598472189400221e-03, 2.102492565150373e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.612094693248163e-09, 0.000000000000000e+00, 3.611598812687345e-09, 3.611984360865866e-09, 0.000000000000000e+00, 3.611525364310947e-09, 3.611670145185921e-09, 0.000000000000000e+00, 3.611027551269710e-09, 3.835398032842214e-09, 0.000000000000000e+00, 3.118792802181792e-10, 3.834432869931333e-09, 0.000000000000000e+00, 3.117675184531512e-10, 4.201509576179531e-10, 0.000000000000000e+00, 4.201252999717046e-10, 9.120843957541209e-07, 0.000000000000000e+00, 3.402839439836932e-05, 2.430106314562284e-06, 0.000000000000000e+00, 2.429494050111527e-06, 2.448888683171105e-06, 0.000000000000000e+00, 2.451151008694327e-06, 2.440928539954602e-06, 0.000000000000000e+00, 2.440697898607417e-06, 2.433722362629587e-06, 0.000000000000000e+00, 2.452199958646604e-06, 3.404996371176171e-05, 0.000000000000000e+00, 9.245440446683293e-07, 6.996155593788153e-02, 0.000000000000000e+00, 6.802489289452579e-02, 1.057554920812872e-01, 0.000000000000000e+00, -2.741264374255453e-03, -5.779930199060351e-04, 0.000000000000000e+00, -5.845133574549017e-04, -3.075846554696469e-03, 0.000000000000000e+00, 1.161246740462618e-01, 6.504847585101453e-02, 0.000000000000000e+00, 9.181698571172663e-02, -8.792123079731872e-05, 0.000000000000000e+00, -4.289868994839031e-04, 6.643289085851585e+01, 0.000000000000000e+00, -1.431605883875948e+00, 6.195946052397954e+01, 0.000000000000000e+00, -1.397108030291781e+00, -8.166005003166645e-04, 0.000000000000000e+00, 5.560498021667738e-02, -5.100983597792002e-01, 0.000000000000000e+00, -1.353961299948975e+00, -1.882627099181094e+00, 0.000000000000000e+00, 2.112524120895024e+01, -2.290627210725106e+00, 0.000000000000000e+00, 8.481575301921008e+02, 7.714713098358835e+03, 0.000000000000000e+00, 6.738926284605607e+03, 8.012067289909746e+07, 0.000000000000000e+00, 6.233940246544728e+03, 5.538378083318366e+04, 0.000000000000000e+00, 1.128844148027752e+02, 2.003854023160660e+04, 0.000000000000000e+00, 2.089053890273497e+04, 9.615588686633935e+03, 0.000000000000000e+00, 4.330376095296436e+04, 9.615588686633972e+03, 0.000000000000000e+00, 4.330376095296530e+04, 2.846379276283389e-08, 0.000000000000000e+00, 2.884797983379971e-08, 1.826486335031998e-08, 0.000000000000000e+00, 1.904842912708001e-08, 2.773477011309605e-08, 0.000000000000000e+00, 2.843559637082545e-08, 1.903920593525653e-08, 0.000000000000000e+00, 1.948893299208406e-08, 2.674765266253810e-06, 0.000000000000000e+00, -3.581164101550543e-08, -3.630083115724683e-08, 0.000000000000000e+00, 2.678449592373234e-06, 2.640280046675677e-05, 0.000000000000000e+00, 2.660468275190147e-05, 2.758393764165664e-05, 0.000000000000000e+00, 2.776885721405111e-05, 2.527508805850310e-05, 0.000000000000000e+00, 2.560719123152868e-05, 2.646067675505548e-05, 0.000000000000000e+00, 2.675550299653148e-05, 4.328271333902363e-06, 0.000000000000000e+00, 5.401586001528508e-04, 2.763443064094063e-05, 0.000000000000000e+00, 2.765390749258080e-05, 9.609512965191252e-03, 0.000000000000000e+00, 1.183813466519604e-01, 6.865576990506590e-03, 0.000000000000000e+00, 6.124312693525508e-03, 1.810038687873863e-02, 0.000000000000000e+00, 1.583715409254399e-02, 1.959306412645403e-02, 0.000000000000000e+00, 1.514564510482354e-02, 7.094536875649913e-03, 0.000000000000000e+00, 1.233341878279784e-01, 1.089674575267734e-02, 0.000000000000000e+00, 1.660965349314206e-02, 2.254411050229581e+00, 0.000000000000000e+00, 1.782677380553356e+00, 6.762619286049478e+01, 0.000000000000000e+00, -3.507494605225058e-01, 5.304126675724234e+00, 0.000000000000000e+00, 1.605106678917763e+00, 5.669558174221652e-05, 0.000000000000000e+00, 5.685483504038163e-05, 1.611398986781835e+00, 0.000000000000000e+00, -2.960447420027518e+00, 1.611398986781841e+00, 0.000000000000000e+00, -2.960447420027531e+00, 2.692795989310973e+09, 0.000000000000000e+00, 2.811056766445790e+04, 2.121624228539168e+04, 0.000000000000000e+00, 1.928519432111576e+04, 1.062857042028635e+05, 0.000000000000000e+00, 9.830672659933640e+04, 4.724335686898145e+01, 0.000000000000000e+00, 6.989477519682083e+03, 4.427744870364789e+04, 0.000000000000000e+00, 3.951700817855702e+04, 4.427744870364769e+04, 0.000000000000000e+00, 3.951700817855693e+04, -1.200155755080042e-01, 0.000000000000000e+00, -1.233041990931783e-01, -3.454221446881260e-02, 0.000000000000000e+00, -3.609073677639219e-02, 1.763406143702647e-02, 0.000000000000000e+00, 1.451578736164524e-02, -3.056649946045702e-03, 0.000000000000000e+00, -7.767517078227502e-02, 7.948680820220549e-03, 0.000000000000000e+00, 4.863109048967711e-03, 8.693853143963065e-03, 0.000000000000000e+00, -6.532293180127208e-02, -1.121080636270100e-01, 0.000000000000000e+00, -1.159546095137848e-01, 1.746835355335455e-02, 0.000000000000000e+00, 2.832689018594435e-01, 1.923852362181988e-02, 0.000000000000000e+00, 1.983852059725922e-01, 1.366002401331153e-02, 0.000000000000000e+00, 1.284935366097270e-02, 2.203733306526233e-02, 0.000000000000000e+00, 2.110204577004679e-02, 1.651039806082498e-02, 0.000000000000000e+00, 1.649904546929800e-01, 5.562286409492996e-03, 0.000000000000000e+00, 5.345834488493036e-02, -2.220101548533727e-01, 0.000000000000000e+00, -2.279819648610129e-01, 8.233737275595409e+00, 0.000000000000000e+00, -2.143700568649901e-01, 1.749239786742271e+00, 0.000000000000000e+00, 4.452771221960003e-03, 6.582815346003477e-02, 0.000000000000000e+00, 6.786680598961407e-02, -6.710226449003960e-02, 0.000000000000000e+00, 3.672192005853647e+00, 3.597703963993264e-02, 0.000000000000000e+00, 3.558042432940919e-02, 2.229280457135957e+04, 0.000000000000000e+00, 2.255815829233629e+04, 3.979713932252098e+01, 0.000000000000000e+00, 3.344770896664138e+01, 1.441674019900339e-01, 0.000000000000000e+00, 1.492812470997178e-01, 1.141056785994033e+01, 0.000000000000000e+00, 2.332924408499750e+00, 1.141056785993999e+01, 0.000000000000000e+00, 2.332924408499540e+00, 8.580013422422456e+06, 0.000000000000000e+00, 8.795195263980465e+06, 3.692814627307935e+05, 0.000000000000000e+00, 3.667135283677534e+05, 5.107479561257528e+09, 0.000000000000000e+00, 5.032761520894525e+09, 1.612488600667784e+03, 0.000000000000000e+00, 1.703672712070417e+03, 7.980964508707082e+04, 0.000000000000000e+00, 4.862718408554538e+04, 8.028973211969885e+04, 0.000000000000000e+00, 1.129375676391903e+09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_2x_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.991326683081769e-05, -2.991509660418831e-05, -2.991327034413947e-05, -2.991491067645955e-05, -2.991231862663358e-05, -2.991491088620683e-05, -5.379265981897915e-05, 4.096568020580910e-05, -5.378821536850818e-05, 4.098341524703824e-05, 2.347714400177079e-05, 2.348393724730002e-05, -9.122751360803159e-05, -1.725407127689525e-03, -5.570702441786171e-04, -5.568082250796079e-04, -5.588696579878229e-04, -5.597019633716306e-04, -5.582731667237182e-04, -5.582484824308404e-04, -5.546814289259212e-04, -5.622440553068134e-04, -1.718961311610543e-03, -9.243831214456101e-05, -7.963838868819829e-03, -8.437353383807163e-03, -2.593874969258619e-02, 3.833407296413002e-03, 2.281698843431948e-03, 2.304541847006351e-03, 4.579677475201540e-03, -2.634090656633277e-02, -1.077900253973116e-02, -5.094977054834219e-03, 1.020397201818234e-03, 1.983696816134777e-03, -1.721368772864962e-01, 5.222941416835183e-02, -1.739066393674252e-01, 4.994196026148133e-02, 4.085771326264950e-03, -1.576368812449186e-02, 3.827070436752588e-02, 5.224680663935998e-02, 8.745536608566697e-02, -5.109601248005995e-02, 8.892836765524277e-02, -1.781569352001502e-02, -1.213097540510491e-02, -1.273529346694731e-02, 5.726694248588797e-04, -1.358860105699375e-02, 1.958876108645941e-02, -2.378971769661042e-02, -6.874087832346997e-03, -6.813256853347468e-03, -1.079030830467921e-02, -8.895684404073425e-03, -1.079030830467921e-02, -8.895684404073468e-03, 9.002090650764950e-04, 9.009189890937482e-04, 9.159236214864828e-04, 9.162128620044810e-04, 9.012648507038053e-04, 9.016411523974692e-04, 9.148114518930754e-04, 9.154487548221018e-04, -5.983943413292094e-04, 1.089452875122332e-03, 1.088761954372450e-03, -5.982279916225720e-04, -1.192536620264031e-03, -1.204210713151698e-03, -1.254016333418139e-03, -1.263306740813721e-03, -1.129531170770241e-03, -1.159674654202595e-03, -1.190276366166405e-03, -1.219895787109543e-03, -1.328098590502296e-04, -4.626124079771162e-03, -1.270951713190225e-03, -1.240811977572096e-03, 1.572919987623530e-03, -3.173329133047774e-02, 1.283801508315406e-02, 1.428205901386350e-02, -1.285356713183274e-02, -1.377908266450293e-02, -9.639709119285843e-03, -8.277403727903433e-03, 4.449161476421788e-03, -2.875860800355027e-02, -5.355148789537470e-03, -7.236620669190819e-03, 9.051729826728465e-03, 1.051139310426512e-02, -1.122947025571987e-01, 4.310967387100106e-02, -2.998303208880974e-04, 9.483066390028543e-03, -6.537355146078287e-04, -6.526854641638440e-04, 2.237483619205717e-02, 5.891813271553192e-02, 2.237483619205711e-02, 5.891813271553183e-02, 2.774370548036891e-05, -4.561385913570096e-03, -6.483453627971439e-03, -6.165178373104828e-03, -1.356630071070809e-02, -1.491439850725669e-02, -1.793044571897129e-02, 3.795202565982898e-02, -6.015087098223709e-03, -1.394581082265502e-02, -6.015087098223682e-03, -1.394581082265501e-02, 2.551557360640358e-01, 2.616267591396799e-01, 1.071586144102061e-01, 1.092853503376719e-01, -1.462847208852008e-02, -1.498069537438222e-02, -1.845473154024440e-02, 1.857352139958303e-01, -1.463436755913536e-02, -1.498216580277231e-02, -1.882908493350550e-02, 1.643284067975779e-01, 2.294459633419887e-01, 2.358764722977131e-01, -1.425439504900115e-03, -4.397004239536809e-02, 6.877536608023993e-03, -3.725955806863944e-02, 1.985437338893898e-02, 2.004805747183476e-02, 3.849676822778256e-03, 4.118843024706931e-03, 1.553014300034864e-02, -3.366703258279015e-02, 1.125427459463211e-02, -2.292821778552549e-02, 2.873941883537270e-02, 2.926903964375245e-02, -1.104419745349021e-01, 2.084776417994131e-02, -8.120091805524919e-02, -1.130963253029631e-03, -1.109930351175017e-02, -1.152491116424362e-02, 6.825722569597174e-03, -9.907716625293839e-02, -1.730705663238167e-02, -1.786243396620404e-02, 1.163859736157197e-02, 1.190005286381077e-02, -2.165377555110058e-02, -2.064299898423900e-02, -2.623028613141316e-02, -3.086904549360960e-02, -4.455119774393538e-03, 1.300868677812556e-02, -4.455119774393470e-03, 1.300868677812557e-02, 3.778072290350115e-04, 4.831117509361777e-04, -2.199855087346178e-03, -2.199572748354712e-03, 2.458744746133362e-05, 4.124705240814689e-05, 1.570242396102749e-02, 1.542638895038316e-02, -9.213737208585180e-03, -1.321066245553333e-02, -9.216417500487630e-03, 3.025184972915264e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
