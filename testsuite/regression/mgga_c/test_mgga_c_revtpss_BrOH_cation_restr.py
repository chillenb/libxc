
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.915112889595762e-02, -4.915168441089734e-02, -4.915274735186127e-02, -4.914448356050306e-02, -4.914901399121001e-02, -4.914901399121001e-02, -4.240035346893400e-02, -4.240539681140495e-02, -4.252303587076842e-02, -4.232825332819645e-02, -4.241082053609250e-02, -4.241082053609250e-02, -2.886607568681279e-02, -2.864051080600354e-02, -2.323019279701445e-02, -2.356222683000199e-02, -2.367511105318438e-02, -2.367511105318438e-02, -9.236385098590566e-03, -9.904208234406936e-03, -3.097778696701270e-02, -3.189779877296844e-03, -5.358081820500888e-03, -5.358081820500883e-03, -2.069843040266374e-08, -2.746251349449579e-08, -2.228229095637915e-05, -1.450727336470876e-09, -5.386629964642396e-09, -5.386629968842518e-09, -5.208474295908394e-02, -5.219675589321232e-02, -5.208579295322789e-02, -5.218479146655789e-02, -5.214362115256048e-02, -5.214362115256048e-02, -2.400582311713734e-02, -2.453607284467712e-02, -2.305485817484618e-02, -2.352142588169965e-02, -2.477522187729229e-02, -2.477522187729229e-02, -3.966355690690510e-02, -5.567077233039475e-02, -3.743917658287412e-02, -5.165225982370065e-02, -4.125724041099574e-02, -4.125724041099574e-02, -7.502392790575175e-04, -5.018341156247724e-03, -5.978007923428504e-04, -7.189992065380985e-02, -1.885416666330308e-03, -1.885416666330308e-03, -5.168976374248593e-10, -1.458411659144814e-09, -2.748338987382534e-09, -1.757165339609506e-04, -2.941460490787340e-09, -2.941460490785960e-09, -5.629649398123778e-02, -4.880713894576471e-02, -5.072385869803074e-02, -5.278860477541143e-02, -5.169032015787385e-02, -5.169032015787384e-02, -6.105596093332217e-02, -2.976496614406493e-02, -3.521634121087735e-02, -4.160097250424622e-02, -3.827239095075311e-02, -3.827239095075311e-02, -5.580007086901702e-02, -8.397785999404600e-03, -1.325145878825272e-02, -2.598123989048461e-02, -1.921662393026301e-02, -1.921662393026303e-02, -2.899498734960686e-02, -1.745404533973603e-05, -5.895225166967238e-05, -3.026409069907167e-02, -5.370114345051345e-04, -5.370114345051317e-04, -6.997134394515887e-08, -1.242000809156999e-11, -2.494527939195662e-10, -4.289750320255666e-04, -2.645530569576692e-09, -2.645530574530191e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.145902270101502e-01, -1.145911752268279e-01, -1.145933569592159e-01, -1.145792636854502e-01, -1.145869373379487e-01, -1.145869373379487e-01, -1.067372101201566e-01, -1.067425197537680e-01, -1.068607144790535e-01, -1.066054394007232e-01, -1.067195155660060e-01, -1.067195155660060e-01, -7.818152352419024e-02, -7.791630044908535e-02, -7.044723773394890e-02, -7.079019864600045e-02, -7.102526778595439e-02, -7.102526778595439e-02, -3.325754149024784e-02, -3.486366986080153e-02, -8.339384829466225e-02, -1.479486587600873e-02, -2.254878634223235e-02, -2.254878634223233e-02, -1.241608056055430e-07, -1.647085847448820e-07, -1.284434308635340e-04, -8.891280690217289e-09, -3.273177006476553e-08, -3.273177006653566e-08, -1.173560613620473e-01, -1.175823301579061e-01, -1.173651533742223e-01, -1.175649285150558e-01, -1.174712665803358e-01, -1.174712665803358e-01, -7.265073958595172e-02, -7.332748593813510e-02, -7.084411057559079e-02, -7.146009001118689e-02, -7.390289639081896e-02, -7.390289639081896e-02, -7.894030296670951e-02, -8.245784778612077e-02, -7.849594484069286e-02, -8.048809877473781e-02, -7.971438385695739e-02, -7.971438385695739e-02, -3.953099261554125e-03, -2.142804644915498e-02, -3.190634985085753e-03, -1.173292070108396e-01, -9.189573793901399e-03, -9.189573793901399e-03, -3.266003247081415e-09, -9.064633124762182e-09, -1.693595753189698e-08, -9.808300965975705e-04, -1.825093776755263e-08, -1.825093776407777e-08, -7.835861640061838e-02, -7.955123078471882e-02, -7.980869979661184e-02, -7.964106152727293e-02, -7.978655629816044e-02, -7.978655629816042e-02, -7.358960494819702e-02, -6.684825836885641e-02, -7.058883271681229e-02, -7.465661033181664e-02, -7.260781857663187e-02, -7.260781857663187e-02, -8.442886852366831e-02, -3.196618431973620e-02, -4.384767149132024e-02, -6.308704805801366e-02, -5.408722370712869e-02, -5.408722370712869e-02, -6.758915326747950e-02, -1.001841436014241e-04, -3.357205905541500e-04, -6.441472518329287e-02, -2.865481820611823e-03, -2.865481820611865e-03, -4.288214892436250e-07, -8.091539833093858e-11, -1.532259531683498e-09, -2.297692349310583e-03, -1.633873461812940e-08, -1.633873460960449e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.240034068776842e-10, 2.240114481500809e-10, 2.240388976158232e-10, 2.239200375698234e-10, 2.239834753451938e-10, 2.239834753451938e-10, 9.985103847798730e-07, 9.987169203973544e-07, 1.003291491203749e-06, 9.933576769769567e-07, 9.981292686511810e-07, 9.981292686511810e-07, 1.684475390903890e-03, 1.671346379698634e-03, 1.344089512239125e-03, 1.301096983768221e-03, 1.329670403847214e-03, 1.329670403847214e-03, 1.386040504755474e-01, 1.437924682523029e-01, 9.534412249844301e-04, 1.336300570088418e-01, 1.538520728207511e-01, 1.538520728207514e-01, 1.219319954860063e-02, 1.429613399915366e-02, 5.314354083931812e-02, 4.484697739266883e-03, 9.239437913766215e-03, 9.239437903519518e-03, 4.451438934827629e-07, 4.504019360780697e-07, 4.454623010101646e-07, 4.501002834821346e-07, 4.477580201436340e-07, 4.477580201436340e-07, 4.875498635509611e-06, 4.848169384768778e-06, 4.625817659317343e-06, 4.602519878944820e-06, 4.986155334938688e-06, 4.986155334938688e-06, 5.356354235529774e-03, 8.187353099146028e-03, 6.867032243003348e-03, 1.126777973309740e-02, 5.524714155182388e-03, 5.524714155182388e-03, 9.150316375430675e-02, 5.930449911324940e-02, 9.624638577879847e-02, 6.064854100780032e-05, 1.562651303146488e-01, 1.562651303146488e-01, 4.437712584188102e-03, 5.520340175309116e-03, 5.593774130545616e-02, 1.089764608858149e-01, 2.413603471566508e-02, 2.413603471012857e-02, 4.709890022824010e-02, 2.825084163927935e-02, 3.388721897768216e-02, 3.967171613856392e-02, 3.665047514871220e-02, 3.665047514871217e-02, 2.713662326340790e-02, 6.398852161071901e-03, 8.691883752658863e-03, 1.390135810817453e-02, 1.069239225906033e-02, 1.069239225906033e-02, 6.189315654287370e-03, 3.883025381618103e-02, 3.230502845697712e-02, 2.786152834853428e-02, 3.017028455556970e-02, 3.017028455556971e-02, 8.978895693245711e-03, 4.402803873859229e-02, 6.135558802211533e-02, 4.492322183889117e-02, 1.708990199531465e-01, 1.708990199531487e-01, 1.460840106908284e-02, 6.240257869824046e-03, 7.718296306245029e-03, 1.600998864026719e-01, 3.016903005902459e-02, 3.016902996521045e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.355328782950750e-05, -1.355445148925763e-05, -1.356056614790810e-05, -1.354339958717507e-05, -1.355225578664376e-05, -1.355225578664376e-05, 1.263431174505251e-05, 1.263191018287744e-05, 1.258872690436920e-05, 1.282240200767482e-05, 1.270807033628192e-05, 1.270807033628192e-05, 1.443308460078794e-04, 1.463580770393398e-04, 1.934260861627901e-04, 2.233338225951267e-04, 2.115080829704943e-04, 2.115080829704943e-04, 4.889183699654976e-03, 5.082192329121699e-03, 1.898520808176703e-05, 1.163454530220731e-03, 2.334408700936347e-03, 2.334408700936335e-03, 1.414394693854944e-08, 1.901499557356153e-08, 1.010449511685512e-05, 6.963111032753673e-10, 3.324021274177069e-09, 3.324021285712296e-09, -6.542481914614972e-04, -6.651357902248354e-04, -6.551075818351121e-04, -6.647057443786499e-04, -6.595551979561652e-04, -6.595551979561652e-04, 1.288944482004984e-04, 1.289923651655888e-04, 1.310983412871169e-04, 1.317346827490057e-04, 1.277210193900387e-04, 1.277210193900387e-04, -1.019272605245993e-03, -2.051410432620504e-03, -8.445274376328942e-06, -4.748704318931549e-04, -1.562584992129383e-03, -1.562584992129383e-03, 2.850215915226899e-04, 1.957627530284976e-03, 2.288106525851878e-04, -3.970831075058877e-05, 9.714021512208176e-04, 9.714021512208178e-04, 1.180193412696731e-10, 5.202419191695980e-10, 3.369842148580098e-09, 7.749864681462726e-05, 1.932005506667401e-09, 1.932005506662077e-09, -7.088461307832179e-02, -5.776105787072201e-02, -6.650610736689577e-02, -7.249635135429104e-02, -6.979700809297876e-02, -6.979700809297872e-02, -9.671203956394425e-03, -6.061195441106885e-04, -5.337550436725897e-03, -1.584417068933994e-02, -9.304439496059099e-03, -9.304439496059096e-03, -1.106498036273836e-03, 2.841195082794889e-03, 3.275395632834032e-03, 1.660619879167325e-03, 3.146009743302544e-03, 3.146009743302565e-03, 9.470740912755983e-04, 8.684599124308060e-06, 2.453643383580639e-05, 4.383258416498044e-04, 2.854797299040694e-04, 2.854797299040712e-04, 2.228960122840790e-08, 1.267335248038140e-12, 2.206855142987682e-10, 2.592757763638992e-04, 2.279231372585149e-09, 2.279231387397960e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
