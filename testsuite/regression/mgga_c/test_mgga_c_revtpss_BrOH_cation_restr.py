
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504592300e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -2.586540289006665e-02, -6.701411225019485e-02, -1.343611708272372e-02, -1.137194517439572e-02, -1.230464849007334e-02, -1.208751094284254e-02, -1.208751094284254e-02, -8.775878867100401e-03, -9.319511263242472e-03, -7.077000961998538e-02, -2.463978750232125e-03, -4.507908455225182e-03, -4.507908455225178e-03, -2.044168684441436e-08, -2.684069797122412e-08, -1.891942049710360e-05, -1.214399081686311e-09, -4.846089888773004e-09, -4.846089888773004e-09, -5.181694277225241e-02, -5.192895405186611e-02, -5.182338262494241e-02, -1.224312405851439e-01, -5.187303691124876e-02, -5.187303691124876e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214133e-02, -9.474413043394064e-02, -9.489275971457944e-02, -2.269272679895428e-02, -3.238485103627425e-02, -3.932005413821825e-02, -2.735802381323456e-02, -3.240888180771637e-02, -3.371544754637210e-02, -6.418936514394004e-02, -2.699430518029856e-02, -4.664012896736361e-03, -2.581454244194446e-02, -3.798472759150787e-02, -1.628712555430364e-03, -1.628712555430356e-03, -1.873262677774475e-03, -9.664754280683418e-10, -2.237401206656469e-09, -2.031142249656109e-02, -2.148658723728447e-03, -2.047779192494933e-09, -4.415685900192204e-02, -4.300954827966422e-02, -6.383636564200691e-02, -4.378526057665181e-02, -4.361991630174738e-02, -4.361991630174739e-02, -4.368404293199914e-02, -2.903092856577327e-02, -3.372867407760979e-02, -3.826483889411756e-02, -3.598271545892893e-02, -6.128134397443009e-02, -3.793229241315446e-02, -4.238697070491520e-02, -1.219169432861498e-02, -5.192846777352227e-02, -1.711791509483431e-02, -1.711791509483431e-02, -5.782021926348150e-02, -1.612011487777053e-05, -4.831638259190183e-05, -2.514699433067102e-02, -2.356177787973960e-02, -4.433533107660488e-04, -4.573015781290543e-08, -2.296045480787365e-12, -2.264720227565709e-10, -3.812519584962958e-04, -2.032939635559851e-09, -2.032939641803122e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672968089e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -7.580598024067059e-02, -7.507468276142483e-02, -4.753527659769583e-02, -4.668847519371326e-02, -4.479485987901737e-02, -4.425380946961609e-02, -4.425380946961609e-02, -3.191629766951608e-02, -3.323122130178351e-02, -7.900736698061860e-02, -1.154374514182225e-02, -1.929225530118098e-02, -1.929225530118094e-02, -1.224939899517906e-07, -1.606747604079929e-07, -1.180933133461087e-04, -7.346860737355318e-09, -2.920826629281101e-08, -2.920826629281101e-08, -1.171652102373420e-01, -1.173935874760084e-01, -1.171783090915431e-01, -1.321455341852712e-01, -1.172794741297784e-01, -1.172794741297784e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -6.904388826970040e-02, -7.046928143113979e-02, -7.634286396105003e-02, -6.609084338230793e-02, -6.986867877401687e-02, -7.151087195672542e-02, -7.210898567657270e-02, -3.211636191061110e-02, -2.223149225530833e-02, -3.079828628005500e-02, -8.909187101478802e-02, -7.937740449784691e-03, -7.937740449784693e-03, -2.429818831173949e-03, -5.849094902189583e-09, -1.358931352441717e-08, -2.457414087463874e-02, -2.781518125836640e-03, -1.240625091468173e-08, -8.272368191718880e-02, -7.936432134396990e-02, -7.173787450420190e-02, -8.134577581291837e-02, -8.084813155569812e-02, -8.084813155569814e-02, -8.135972095406455e-02, -6.585283068704072e-02, -6.902538883483023e-02, -7.245557680702827e-02, -7.059423580245655e-02, -6.904837093538647e-02, -7.614215244683040e-02, -4.894336676652947e-02, -4.116199418056862e-02, -5.914859868946302e-02, -5.005273433941895e-02, -5.005273433941894e-02, -6.539524416530183e-02, -9.191204624116599e-05, -2.711113108449930e-04, -5.795383673655237e-02, -2.826624935272212e-02, -2.344734225214610e-03, -2.722167874970597e-07, -1.411522718598331e-11, -1.381319298228774e-09, -2.028939079235578e-03, -1.232968308059190e-08, -1.232968307438932e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.146882401042725e-09, 8.146791560079789e-09, 8.146359682604643e-09, 8.147711840697310e-09, 8.147007288489827e-09, 8.147007288489827e-09, 1.149095375720084e-05, 1.149085481283416e-05, 1.148744522038142e-05, 1.148467082797742e-05, 1.148973014642859e-05, 3.172016010789083e-07, 7.967804144485046e-03, 3.336460297974763e-04, 4.367532648040230e-04, 3.205561532275005e-04, 3.149188158353048e-04, 3.149188158353048e-04, 1.213912592496923e-01, 1.226829089314956e-01, 4.339354264991174e-03, 7.638806624451887e-02, 1.034017503947715e-01, 1.034017503947715e-01, 1.189122532030592e-02, 1.365363043396272e-02, 5.302242854942751e-02, 3.177368889677401e-03, 7.504458604326876e-03, 7.504458604326876e-03, 4.459180212052766e-07, 4.511972426547326e-07, 4.462226958804514e-07, 2.293331352097402e-06, 4.485505335460699e-07, 4.485505335460699e-07, 1.136298717661886e-04, 1.104065130245582e-04, 1.160575974001029e-04, 1.131269037701816e-04, 1.107054174666438e-04, 4.053385983199035e-06, 3.645901609308756e-03, 6.175296232410913e-03, 3.235505668104578e-03, 4.457751992260571e-03, 3.920434928634163e-03, 1.269146810649917e-02, 1.921425832639827e+01, 7.462749317744831e-02, 2.594707476376711e+01, 1.654029195947201e-05, 1.134191754158857e-01, 1.134191754158853e-01, 1.876414461063435e+07, 2.545978750588755e-03, 3.767869621298388e-02, 1.198364198293228e+02, 1.014916310680449e+07, 1.217559721679245e-02, 7.096820173095383e-02, 3.175156754589793e-02, 1.345905773996269e-02, 5.017693924345881e-02, 4.457281692365305e-02, 4.457281692365306e-02, 6.922283631247268e-02, 6.151417476224507e-03, 8.405626448121118e-03, 1.393282274502675e-02, 1.043524171854373e-02, 2.066673019326189e-02, 3.759299655376808e-03, 6.443062837138216e-01, 2.598066244227781e-02, 1.060527877928484e-01, 2.208373975841991e-02, 2.208373975841989e-02, 3.737380396378821e-02, 3.737315692479207e-02, 4.092674435946138e-02, 2.780973582970489e-02, 4.718621753417992e+01, 1.144411652239804e-01, 6.495760706345727e-03, 3.588747086214428e-04, 6.398860027635586e-03, 1.247126048940851e-01, 1.824145034034973e-02, 1.824145023559004e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.647987116897745e-29, -3.072850029741685e-99, -3.073280083484382e-99, -3.071321717870357e-99, -3.072370289741741e-99, -3.072370289741741e-99, -1.225729986275231e-86, -1.226646513536643e-86, -1.250689168370597e-86, -1.238920280700001e-86, -1.242462784332183e-86, 3.925489955834899e-05, -5.506308202174826e-75, 7.183250701718151e-04, 0.000000000000000e+00, 6.689370171316712e-04, 6.563636892698708e-04, 6.563636892698708e-04, 5.184511674368678e-03, 5.476232171279261e-03, -7.099433532597498e-77, 1.308198088107247e-03, 2.634549349341979e-03, 2.634549349341972e-03, 1.414427572495797e-08, 1.901590714706449e-08, 0.000000000000000e+00, 6.963844602972488e-10, 3.324392649094501e-09, 3.324392649094501e-09, -6.660641188896838e-04, -6.770676101648934e-04, -6.666940684559808e-04, -6.168900077947702e-43, -6.715514268270500e-04, -6.715514268270500e-04, -2.264049813434127e-37, -1.722292669627720e-82, -1.721490398693929e-82, -1.719047562748186e-82, -1.730816071258367e-82, 1.327276081844176e-04, -2.782138572546681e-03, -1.635766153635554e-02, 3.041906300813533e-04, -3.214333087959750e-03, -4.182496576695636e-03, -2.515686662979426e-72, -1.023111283712505e-62, 0.000000000000000e+00, -2.625413627344224e-62, -5.446947820777852e-04, 1.020759692836156e-03, 1.020759692836153e-03, -3.224140829087078e-45, 5.203614102013720e-10, 3.370482815407246e-09, -3.519492398475794e-60, -4.492422613719745e-45, 1.932590512643282e-09, -2.245062553576368e-01, -9.286917367075934e-02, -5.100343351028724e-70, -1.548289426723842e-01, -1.360065247457360e-01, -1.360065247457360e-01, -2.004488341191893e-01, -9.320219760089063e-04, -6.948143863555967e-03, -2.336751460069196e-02, -1.283018980149867e-02, -5.342455013217941e-71, -9.542908434504295e-03, -4.042951386824844e-67, 3.662949353125480e-03, -2.750051564384357e-69, 3.916419382063598e-03, 3.916419382063599e-03, -5.922701733799099e-71, 8.705362837397699e-06, 2.478457632822997e-05, 1.022343244176181e-03, -3.500873542257648e-61, 2.944177603619476e-04, 2.231431982812883e-08, 1.267482770784168e-12, 2.206926032142148e-10, 2.637876929253760e-04, 2.279739849335221e-09, 2.279739870083568e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
