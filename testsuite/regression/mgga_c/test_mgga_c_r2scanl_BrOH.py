
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.916893284400402e-02, -3.916965585554816e-02, -3.917183903300531e-02, -3.916001541406278e-02, -3.916932267598446e-02, -3.916932267598446e-02, -3.002418395389768e-02, -3.002744339826566e-02, -3.011746895868793e-02, -2.718155452689715e-02, -3.002586493299938e-02, -2.718143186569763e-02, -2.172433942872871e-02, -2.443207256057243e-02, -2.435737799973320e-02, -2.437920946443248e-02, -2.443386269537191e-02, -2.443386269537191e-02, -1.511666185513403e-02, -1.929877246393569e-02, -2.375130490483389e-02, -1.741817795742424e-02, -1.924954089798432e-02, -1.924954089798432e-02, -3.708981635279121e-03, -3.853987708957855e-03, -1.046984670242396e-02, -1.960077025080059e-03, -3.820823280888742e-03, -3.820823280888742e-03, -2.749607128436003e-02, -2.749619172180610e-02, -2.749608399319731e-02, -4.715980466570550e-02, -2.749613250317612e-02, -2.749613250317612e-02, -2.269477101192846e-02, -2.276611321547456e-02, -2.260105699550263e-02, -2.265760683625709e-02, -2.286337899670557e-02, -2.655978125153041e-02, -2.403805062479452e-02, -2.427910332920428e-02, -2.387875890483742e-02, -2.400709755041222e-02, -2.414943219522126e-02, -3.118794705396894e-02, -8.599303654550298e-03, -1.926635600096717e-02, -8.677466440618719e-03, -7.070596994913603e-02, -1.644016096244133e-02, -1.644016096244133e-02, -4.417316703880733e-04, -2.139351797146073e-03, -1.648471104849696e-03, -5.820612251953473e-03, -4.899158426116052e-04, -1.968071541988201e-03, -2.413092477788498e-02, -2.411520677024487e-02, -5.313512934034847e-02, -2.412520414758285e-02, -2.412302970010102e-02, -2.412302970010102e-02, -2.403433268761261e-02, -2.359035270096481e-02, -2.373053121329902e-02, -2.385224778216818e-02, -2.379117222721797e-02, -3.021765867881333e-02, -2.441161565250820e-02, -1.548757699003414e-02, -2.124362467692965e-02, -1.993788155500477e-02, -2.178161765990412e-02, -2.178161765990412e-02, -2.100828650652894e-02, -1.000902964635931e-02, -1.186754475962501e-02, -2.205753383915716e-02, -7.587315964362880e-03, -1.422683009042105e-02, -4.224563209260882e-03, -6.399502312847810e-04, -1.474439648155185e-04, -1.392738433059065e-02, -1.698306993431146e-03, -1.698306993431143e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scanl_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
