
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scanl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.659082740693128e-02, -2.659086331057439e-02, -2.659097286189530e-02, -2.659038592388005e-02, -2.659084676445805e-02, -2.659084676445805e-02, -4.655764546898881e-02, -4.655510740785916e-02, -4.646236034619058e-02, -4.628525625496813e-02, -4.655818264176411e-02, -4.655818264176411e-02, -4.024222849009450e-02, -4.009133120419267e-02, -3.622164549403976e-02, -3.641884798532169e-02, -4.018766430121304e-02, -4.018766430121304e-02, -1.916500357697497e-02, -1.963044935709233e-02, -4.949471150700535e-02, -1.634585458405700e-02, -1.932331648656519e-02, -1.932331648656518e-02, -1.363168171855059e-03, -1.440017373715910e-03, -5.884777385095896e-03, -5.284044524949541e-04, -1.429400054175504e-03, -1.429400054175504e-03, -8.719004454419586e-02, -7.679059334088315e-02, -2.639384237738821e-02, -8.579718695571849e-02, -2.639717595938473e-02, -7.239724686727987e-02, -2.271616616617063e-02, -4.162704163799078e-02, -3.188405906718710e-02, -3.270431564169350e-02, -3.367286061288684e-02, -2.286337899670557e-02, -5.475750462679067e-02, -7.615135879276226e-02, -5.461268544721336e-02, -5.594694074667392e-02, -4.649899625785806e-02, -5.060119663639759e-02, -8.599303654550298e-03, -2.095755095472017e-02, -8.677466440618719e-03, -8.172375964115258e-02, -1.006955594532407e-02, -1.006955594532407e-02, -4.427089933125345e-04, -3.616442358986923e-04, -2.770503411486994e-04, -5.820612251953473e-03, -5.373104519823222e-04, -3.158784156522867e-04, -5.916932719914796e-02, -5.518388057364585e-02, -5.656033917902653e-02, -5.930338114026425e-02, -5.703623436320560e-02, -5.709946757999546e-02, -5.917981885417831e-02, -2.758959708871524e-02, -5.372086875430362e-02, -2.290701647193450e-02, -4.895950069092271e-02, -5.415257165931951e-02, -7.171651383797918e-02, -1.548757699003414e-02, -1.909573952972886e-02, -1.993788155500477e-02, -3.362937239294447e-02, -3.104607297859093e-02, -3.244297239981511e-02, -5.260124644250603e-03, -7.244379035641269e-03, -3.393035259816429e-02, -7.587315964362880e-03, -7.587315964362881e-03, -9.804170761928065e-04, -5.963214658749821e-05, -1.441477688361192e-04, -7.465295616018219e-03, -2.644598060350293e-04, -2.644598060350452e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scanl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031682398627375e-02, -3.031678506180544e-02, -3.031666899588880e-02, -3.031730523104572e-02, -3.031680297750139e-02, -3.031680297750139e-02, -1.125633503099060e-01, -1.125662682705589e-01, -1.126467846806643e-01, -1.125283094852086e-01, -1.125647640242587e-01, -1.125647640242587e-01, -7.558800583935395e-02, -7.535940911037559e-02, -6.930038429716207e-02, -6.965339429566310e-02, -7.550609600539808e-02, -7.550609600539808e-02, -6.308381477116190e-02, -6.299660831762306e-02, -8.723345646205198e-02, -3.178623836459484e-02, -6.303864092724817e-02, -6.303864092724817e-02, -2.587091379646100e-03, -2.731181922419009e-03, -1.106636843356787e-02, -1.011589031638357e-03, -2.711573170153694e-03, -2.711573170153694e-03, -1.717928782648727e-01, -1.303308426045214e-01, -2.931807270267429e-02, -1.720816396970066e-01, -2.931401320337139e-02, -1.338494228204824e-01, -3.062316512678849e-02, -8.094258875111335e-02, -9.591593342630539e-02, -9.626938158460210e-02, -9.705855686116209e-02, -3.055987235585953e-02, -1.003314070395571e-01, -1.064965757336571e-01, -9.962897645629960e-02, -8.187658718588850e-02, -8.361886190023658e-02, -8.583072657522134e-02, -1.531425326278704e-02, -4.050099372363743e-02, -1.542424372499093e-02, -1.226899989189163e-01, -1.751274350513695e-02, -1.751274350513695e-02, -8.542955541961917e-04, -7.566454004923706e-04, -5.823162462105958e-04, -1.067909622131339e-02, -1.054160381624831e-03, -6.195637279737533e-04, -7.131487944126561e-02, -7.442439724451230e-02, -7.355476138446045e-02, -7.731726352947896e-02, -7.294402969998878e-02, -7.312769491028737e-02, -6.968184424312483e-02, -7.629724561642079e-02, -9.750347302209200e-02, -2.620506859827654e-02, -8.203809780739273e-02, -9.762630409074306e-02, -1.150749311180856e-01, -2.414588876524436e-02, -3.141133970817062e-02, -2.607353127730148e-02, -6.149098034834923e-02, -5.716514998373644e-02, -7.933379755941265e-02, -9.753528841971667e-03, -1.354430626012701e-02, -7.070997795277106e-02, -1.365504547593787e-02, -1.365504547593790e-02, -1.892818300294219e-03, -1.207260725550757e-04, -2.845649875826760e-04, -1.344403026451669e-02, -5.198476088401566e-04, -5.198476088402178e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.227477938632839e-12, 9.227414785312943e-12, 9.226980652198759e-12, 9.228017848423211e-12, 9.227445907623444e-12, 9.227445907623444e-12, 1.485326723191292e-06, 1.485533768553088e-06, 1.490980393685182e-06, 1.481676313890503e-06, 1.485392422756518e-06, 1.485392422756518e-06, 1.168219753261853e-03, 1.160245845518555e-03, 9.516703898621241e-04, 8.718302235359621e-04, 1.165193770116259e-03, 1.165193770116259e-03, 6.506014424035880e-01, 6.351938980123770e-01, 8.919180913474529e-04, 2.764754558368105e-01, 6.458871032197252e-01, 6.458871032197252e-01, 4.074022893045772e+01, 3.760745489302834e+01, 1.838891248313522e+00, 1.088685481468029e+02, 3.925239437318394e+01, 3.925239437318394e+01, 3.169454400821875e-07, 2.976415207619410e-07, 1.099479090294439e-08, 3.046518186923483e-07, 1.099631293094034e-08, 2.659231751848695e-07, 1.045489132874744e-06, 5.909429543646694e-06, 1.219413583021333e-05, 1.202287468254470e-05, 1.235210071468600e-05, 8.609169858937764e-07, 4.947064878409547e-03, 9.587578580192066e-03, 6.367883614877345e-03, 1.225676698275991e-02, 7.113516462965271e-03, 4.429756005606668e-03, 1.823855058106151e-01, 7.329512269532586e-02, 2.059773000403430e-01, 6.331276626450814e-05, 1.531395132854141e-01, 1.531395132854141e-01, 1.157272628944603e+02, 7.610311154285186e+01, 2.351890335187836e+02, 6.194306534411151e-01, 1.242549775275193e+02, 8.864154257126293e+01, 9.290825736075587e-03, 7.923857363553378e-03, 8.341081002071144e-03, 8.841396995515423e-03, 8.512855859107661e-03, 8.517361837219434e-03, 1.096403819965616e-02, 1.095909679166211e-02, 7.755244775010401e-03, 6.962818768783718e-04, 7.628603434193327e-03, 7.434622026707508e-03, 6.328645582662331e-03, 1.501183142620777e-02, 2.429137859424473e-02, 4.292123838352401e-03, 3.216123772008289e-02, 3.098261047671964e-02, 1.922501406879450e-02, 1.597042302392722e+00, 1.032493067519330e+00, 8.796345016864447e-02, 3.807833395564138e-01, 3.807833395564159e-01, 1.594447457503711e+01, 6.838941915563945e+02, 2.170484627229462e+02, 4.773720796616013e-01, 1.459604100604830e+02, 1.459604100605245e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.118757626209111e-04, -1.119036223689462e-04, -1.127382689340341e-04, -1.124809533293531e-04, -1.118823800037904e-04, -1.118823800037904e-04, -2.828332787337673e-05, -2.946703571857723e-05, -4.762157875627862e-05, 3.645624318607892e-06, -2.856498505714918e-05, -2.856498505714918e-05, -1.003077271324023e-02, -1.010650135087250e-02, -1.335783125769939e-04, -5.529395026136304e-04, -1.004864645856742e-02, -1.004864645856742e-02, 1.697486692741684e-06, 1.614674962894881e-06, -3.958800017170822e-05, 3.485059641765512e-06, 1.644390584321184e-06, 1.644390584321184e-06, 3.596630411895908e-07, -9.157830334052892e-06, 0.000000000000000e+00, 5.254170104076732e-07, 0.000000000000000e+00, -5.675546332543145e-06, 6.124222959202319e-08, -2.765164273684158e-05, -2.080696819018445e-04, -2.050989822327974e-04, -2.109094117203671e-04, 0.000000000000000e+00, 2.044569170188057e-05, -2.674905063549301e-05, 2.142623848806416e-05, -1.891530535667250e-03, -2.161722182509462e-03, -2.942149784437376e-05, 0.000000000000000e+00, 8.587478741171271e-06, 0.000000000000000e+00, -9.133130928244573e-05, 0.000000000000000e+00, 0.000000000000000e+00, -4.264086451580791e-08, 2.757881703340986e-11, 1.344034858203816e-11, 0.000000000000000e+00, 5.428283547816689e-06, 0.000000000000000e+00, 1.458379027557606e-11, 1.118843741774358e-10, 3.123489151906310e-13, 1.329687767217290e-07, 1.873439794904241e-10, 8.702294323146830e-14, 6.147943200778869e-13, -3.297618189297866e-03, 1.763543916223443e-05, 0.000000000000000e+00, -1.527162301438942e-04, 2.301704095486518e-05, 2.909120398371889e-05, 0.000000000000000e+00, 6.577592419166253e-06, 0.000000000000000e+00, -2.805980721170043e-04, -5.211869930378530e-04, -3.834626064684791e-03, 3.991138574858135e-06, -7.268572709539550e-06, -6.144982492764709e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.579254824067296e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
