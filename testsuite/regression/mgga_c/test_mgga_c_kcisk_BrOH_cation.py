
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcisk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646005790285457e-01, -1.646006638472372e-01, -1.646010671028778e-01, -8.468456070536538e-02, -6.673170944461228e-02, -3.954067944134811e-02, -4.322085527438135e-02, -2.465354478238492e-02, -2.472840680228616e-02, -2.469812111970222e-02, -2.470128706205136e-02, -4.335598432687489e-02, -6.701338314956612e-02, -4.028028667548314e-02, -1.661482061980069e-02, -2.962736000589792e-02, -6.623719739663438e-02, -1.682985265222010e-02, -2.023925339240758e-02, -2.597726957125563e-02, -2.493609642481184e-02, -7.101873735144327e-03, -2.674688761743844e-03, -3.003334028392284e-03, -8.492953215198285e-05, -8.220900672195448e-05, -1.640693118733235e-03, -2.494497211448786e-05, -6.181720095965824e-06, -6.181720095965820e-06, -5.718008266624196e-02, -4.241821862993333e-02, -4.233105221959660e-02, -4.241263193932601e-02, -8.194950291757733e-02, -6.893871766842122e-02, -3.426861982192669e-02, -3.478029372847294e-02, -2.223666212535842e-02, -2.259496305380493e-02, -5.221262153995407e-02, -3.474942548768372e-02, -4.259868926561405e-02, -3.099747033995626e-02, -2.482443163048521e-02, -2.728580935077102e-02, -4.133918020766076e-02, -2.781911249412936e-02, -3.829677522371304e-03, -1.742608108473462e-02, -6.151862545867460e-03, -3.134843670830715e-02, -9.767593041062827e-03, -9.767593041062830e-03, -1.127519149667671e-05, -1.022255339041386e-05, -3.647004001054343e-05, -3.910381504870583e-03, -2.564520687492980e-05, -2.564520687492977e-05, -3.294428094083566e-02, -3.251760752898671e-02, -6.383568959259737e-02, -4.812811128464219e-02, -6.385544782141395e-02, -4.806493780473509e-02, -3.444207444015795e-02, -4.599668369859625e-02, -4.294827681078191e-02, -3.012428698292944e-02, -2.903764837507078e-02, -4.410604595598895e-02, -5.166973640291586e-02, -1.994124695714706e-02, -2.651782626075681e-02, -3.405583949399352e-02, -2.656825194762012e-02, -3.083737119146614e-02, -2.445805011823296e-02, -1.432335981602766e-02, -1.267120228601301e-03, -2.935546913247175e-02, -3.280345588903373e-03, -3.280345588903366e-03, -5.037378779620498e-03, -8.132929341160324e-07, -1.375123481831801e-03, -2.267983071859012e-02, -1.124392382515954e-05, -8.305259691342440e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcisk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747380229573807e-01, -1.747385518320050e-01, -1.747379267949456e-01, -1.747388186159121e-01, -1.747392712956082e-01, -1.747382853179331e-01, -1.632532446722475e-01, -1.373612926429870e-01, -1.465095869376891e-01, -1.206164948397516e-01, -9.703592200062944e-02, -9.703737585966841e-02, -8.592189620430886e-02, -1.029296590843809e-01, -6.440728586651633e-02, -6.441188228095286e-02, -6.458697261546013e-02, -6.457604797476890e-02, -6.451303330611184e-02, -6.451142624035087e-02, -6.458113125845967e-02, -6.445762397682452e-02, -1.031892381519108e-01, -8.605208371665067e-02, -7.539767300587123e-02, -7.475392600385586e-02, -8.133772023713799e-02, -6.830334873834229e-02, -4.287338901178699e-02, -4.351355908994210e-02, -5.874276650171134e-02, -7.031667811750825e-02, -6.948153132256576e-02, -8.003125490130764e-02, -4.072147914664350e-02, -4.729290905187601e-02, -4.996956716659914e-02, -3.733981190709044e-02, -5.259247180984574e-02, -3.877453900289697e-02, -5.474912648434127e-02, -6.073775840963853e-02, -2.183991415252650e-02, -2.091779552341173e-02, -8.289911326576123e-03, -3.317184368048930e-02, -8.665081626653691e-03, -3.654394407166016e-02, -3.272623949215124e-04, -3.034174402909740e-04, -3.292865623798659e-04, -2.803738917211432e-04, -6.001128482822123e-03, -5.122247686854757e-03, -9.215454403858350e-05, -9.404632912611971e-05, -2.155044760547457e-05, -6.301753687408326e-05, -2.155044760547455e-05, -6.301753687408325e-05, -1.080558577785979e-01, -1.081101147027345e-01, -9.723664539060618e-02, -9.728535776966830e-02, -9.711899438426676e-02, -9.716693292463621e-02, -9.723020386569076e-02, -9.727666314613616e-02, -1.423285325115850e-01, -1.135625133406835e-01, -1.080705950927745e-01, -1.369545247480540e-01, -7.678483314607069e-02, -7.676240136675895e-02, -7.754831540354348e-02, -7.756425081099150e-02, -5.740711766328405e-02, -5.713469798387116e-02, -5.824259201684610e-02, -5.795672756167469e-02, -9.021036375026362e-02, -1.069327129153651e-01, -7.714063663704375e-02, -7.787904103491343e-02, -6.095062102912072e-02, -7.984570951175057e-02, -6.282097254313637e-02, -6.282635234414333e-02, -5.818517722794164e-02, -5.329698774200930e-02, -6.068308882875711e-02, -5.624166868626652e-02, -5.761670772811629e-02, -8.377176612915627e-02, -5.635495101548714e-02, -6.324345095309927e-02, -1.215376710710344e-02, -1.195575903294752e-02, -4.508692175035674e-02, -3.739011041211569e-02, -1.828973583139262e-02, -1.679764066916805e-02, -7.465511093622045e-02, -7.471385411080814e-02, -2.745037548110135e-02, -2.440880030201224e-02, -2.745037548110136e-02, -2.440880030201225e-02, -4.436742697586514e-05, -3.949705320240034e-05, -3.970942209409911e-05, -3.920085846822161e-05, -1.406639814520182e-04, -1.305930574189952e-04, -1.116797681936423e-02, -1.230362971043133e-02, -1.314542429297217e-04, -8.360741943748552e-05, -1.314542429297216e-04, -8.360741943748546e-05, -6.504951658318076e-02, -6.456378853116630e-02, -6.334624442837201e-02, -6.283985840047764e-02, -7.204032729039576e-02, -7.143747091044085e-02, -7.454255652677404e-02, -6.198583961538615e-02, -7.205977711058216e-02, -7.145954059047982e-02, -7.474369332741117e-02, -6.162940158223718e-02, -6.253880959549331e-02, -6.215193891806193e-02, -5.584918683135796e-02, -7.253600779218733e-02, -5.749190030230757e-02, -7.496329084211532e-02, -5.963467650890130e-02, -5.914295230176055e-02, -5.860084108738299e-02, -5.809522212600117e-02, -5.753270143048659e-02, -7.511443030930401e-02, -6.124961262369481e-02, -8.061322113074391e-02, -4.375083109184466e-02, -4.325459007303659e-02, -6.005109980389559e-02, -4.677738551481515e-02, -6.835787326921254e-02, -5.138926584808645e-02, -4.965561320530126e-02, -4.966088854264702e-02, -4.964829175416369e-02, -6.425529845806684e-02, -5.283105544427801e-02, -5.184568622029975e-02, -1.773901260182250e-02, -1.752696290361578e-02, -4.341965641912820e-03, -4.093702938428231e-03, -5.069627958146417e-02, -4.870495193061129e-02, -1.104868387269735e-02, -9.843228392801795e-03, -1.104868387269733e-02, -9.843228392801774e-03, -6.596405392601157e-03, -6.254697210531100e-03, -3.150849319013851e-06, -3.141421481152369e-06, -1.866351724749047e-03, -1.727730053188652e-03, -2.769811217871049e-02, -2.685974619732670e-02, -6.039793227203972e-05, -3.779002334452882e-05, -3.594411235408668e-04, -2.691187695076705e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.657675718304660e-09, 1.726792554804321e-08, 9.657932746902417e-09, 9.657600232492580e-09, 1.726773283466819e-08, 9.657851508770755e-09, 9.657191968597048e-09, 1.726681663350017e-08, 9.657469574186665e-09, 1.665203260854415e-09, 1.283304816471348e-09, 7.669671881857710e-10, 1.352576121923462e-09, 6.576978484504604e-10, 4.541908143537330e-10, 2.750992379927192e-10, 2.995611233493833e-10, 2.751224518031944e-10, 9.277325787516909e-07, 1.519731745234147e-06, 2.794622037522530e-06, 4.919209074078503e-07, 6.479242767805857e-07, 4.918238398472827e-07, 4.965909076967938e-07, 6.536554294186605e-07, 4.969070446578397e-07, 4.945531889616716e-07, 6.510411445749218e-07, 4.945436951644096e-07, 4.936265276189968e-07, 6.516577609572959e-07, 4.964726896548908e-07, 2.802269084158432e-06, 1.533888372475392e-06, 9.375879954139388e-07, 7.481226880886815e-03, 1.066931872370833e-02, 7.504079813569414e-03, 3.947205735061730e-03, 3.606261806479411e-03, 1.959675512597027e-03, 5.200170755669490e-04, 7.813900481511295e-04, 5.182038226451631e-04, 1.085248067090375e-03, 1.890650204817896e-03, 3.126059569016462e-03, 7.868952902079439e-03, 1.147143952524577e-02, 7.904598748252663e-03, 5.597918795095729e-04, 8.046854717351517e-04, 5.220882471564451e-04, 9.744818861440843e-01, 5.972685016579754e-01, 3.588248482574106e-01, 1.123031424714098e+00, 9.105009706452012e-01, 5.187994380916851e-01, 2.610948824888843e-04, 4.832460020622228e-04, 8.674909054850770e-04, 1.987793854537960e-01, 3.546119197519360e-01, 2.052116368288775e-01, 1.205251999449378e-01, 1.600290866113624e-01, 9.468113456847606e-02, 1.251479512157605e-01, 1.692745891530079e-01, 1.691877614482527e+00, 7.046833201056450e+01, 1.408648067123413e+02, 7.046883760197005e+01, 1.603386561436585e+03, 9.672379182368078e+01, 4.840116013035038e+01, 2.583093222686470e+01, 7.534038734129819e+00, 3.785882137986912e+00, 9.365761795828820e+01, 1.872728268961528e+02, 9.365790572547708e+01, 7.886481535862548e+00, 1.570739124546202e+01, 7.922560371976208e+00, 7.886481535862546e+00, 1.570739124546202e+01, 7.922560371976190e+00, 7.063184386806581e-07, 8.709900769149182e-07, 7.066723315891837e-07, 5.140193408513880e-07, 4.792735812098659e-07, 5.142577077512260e-07, 5.091854611696568e-07, 4.762274079905678e-07, 5.094461708402283e-07, 5.136635563963000e-07, 4.790806847850170e-07, 5.139987089092188e-07, 2.019518555904931e-06, 1.459245833783657e-06, 1.002515588477328e-06, 7.089893234691658e-07, 8.727813837549391e-07, 1.727661350247217e-06, 1.180284210621257e-05, 1.941059025890570e-05, 1.182005995994771e-05, 1.199655051746254e-05, 1.962297104104262e-05, 1.201158208444945e-05, 6.137097944024151e-06, 8.241339412977819e-06, 6.176297229043744e-06, 6.284849148776189e-06, 8.384698343933433e-06, 6.325855860829819e-06, 2.157159583047002e-05, 3.872105772690387e-05, 4.449761246235141e-05, 1.202908457850788e-05, 1.963603522297960e-05, 1.198801427940397e-05, 7.831633981089939e-03, 9.185727160497462e-03, 1.873298674118456e-02, 9.742440851826125e-03, 6.377699606319932e-03, 1.019340561832295e-02, 5.462198783134004e-03, 6.336835396318511e-03, 5.943527844113706e-03, 7.561506488392618e-03, 7.194583803909973e-03, 7.968569150927831e-03, 7.998080216712564e-03, 8.573923027420032e-03, 1.931359802065025e-02, 6.703409034978845e-03, 5.984580663952591e-03, 6.685227834038561e-03, 2.909887182203571e-01, 5.432602665704331e-01, 2.908956855680278e-01, 6.109657593479834e-01, 3.944890851561058e-01, 2.141399566573288e-01, 9.104831953783845e-01, 1.782139769649482e+00, 9.122246303464353e-01, 2.404612699480373e-05, 2.586772441646064e-05, 2.408691406057389e-05, 8.293065911262452e-01, 1.600325122661076e+00, 8.466692497403969e-01, 8.293065911262454e-01, 1.600325122661077e+00, 8.466692497403971e-01, 6.994890330302446e+03, 1.304543798584741e+02, 6.523851873267107e+01, 2.143426230744653e+01, 4.282950126498505e+01, 2.143092739168357e+01, 8.652667051123013e+02, 1.729804248260371e+03, 8.653234051021135e+02, 2.088486614054637e+00, 4.126240186715034e+00, 9.313740190828119e+00, 2.121454472514687e+02, 4.242308734062373e+02, 2.122901113210131e+02, 2.121454472514682e+02, 4.242308734062364e+02, 2.122901113210127e+02, 1.115805189217906e-01, 1.432199428719065e-02, 1.133226600395100e-01, 5.041015970631063e-02, 1.288755872187621e-02, 5.084863840236736e-02, 9.085814736381749e-02, 1.663377250098882e-02, 9.139353802392175e-02, 1.070567388213478e-01, 1.505549346935361e-02, 8.067740996511001e-02, 9.850441918268199e-02, 1.658826462089232e-02, 9.904122211358377e-02, 9.768647980047947e-02, 1.495238585648724e-02, 7.188974080144651e-02, 1.101503900524893e-01, 1.667505127313668e-02, 1.122624292119631e-01, 1.654838465572292e-02, 2.200892847923967e-02, 3.613855496498219e-02, 1.733275494561405e-02, 1.684599597806083e-02, 3.841659047085458e-02, 2.370216356877514e-02, 1.309444496496019e-02, 2.363307784300500e-02, 1.817046331283438e-02, 1.245683001537870e-02, 1.818351126118301e-02, 2.032700292298961e-02, 1.676990923568918e-02, 4.238013488334822e-02, 7.740691821976523e-03, 8.268708040918676e-03, 1.643034376450344e-02, 1.181438944031827e-01, 2.079215965650352e-01, 1.181316326701243e-01, 1.999346392619712e-01, 1.215976283341742e-01, 7.430341769560374e-02, 1.028146607738578e-01, 5.395446593495539e-02, 4.046853269345039e-02, 5.777251138996548e-02, 8.576942640752958e-02, 5.802637542807588e-02, 5.764389656569316e-02, 8.551219675898496e-02, 1.497816362606356e-01, 1.209960117251075e-02, 1.340481446214386e-02, 1.238536234548851e-02, 5.384400261637011e+02, 1.029560934938402e+03, 5.378317288281934e+02, 8.293866301770617e-01, 1.626157526111532e+00, 8.306707081537953e-01, 6.302975512739793e-02, 7.377505361356813e-02, 7.155240441002318e-02, 6.580112269279882e-01, 1.243749527070789e+00, 6.708140908155771e-01, 6.580112269279864e-01, 1.243749527070786e+00, 6.708140908155752e-01, 3.020510079718874e+06, 6.039953096300926e+06, 3.020465927038538e+06, 9.912871360909644e+01, 1.982141054762640e+02, 9.912857383051471e+01, 1.244501569542884e+13, 2.489003133078578e+13, 1.244501569251389e+13, 4.131791303698494e+01, 7.154589992521448e+01, 4.142402019899626e+01, 7.653312981814837e+01, 1.528191375655705e+02, 7.659230057939057e+01, 2.441033204297555e+03, 4.881819286524383e+03, 1.311208134652041e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.069529783692498e-16, -4.805366430552800e-54, -4.803146101293755e-54, -4.805506217654424e-54, -4.803603884082357e-54, -4.806207132442172e-54, -4.801452374594524e-54, -1.909163846085224e-05, -4.803085208243515e-54, -1.909649706698487e-05, -1.909379493493221e-05, -1.909649706698487e-05, -1.365607494824798e-04, -2.836587623311544e-47, -1.366287787523931e-04, -1.365528837264182e-04, -1.379599984832982e-04, -1.381968233343892e-04, -1.374507061581271e-04, -1.374485962948787e-04, -1.364538094315694e-04, -1.386507078835082e-04, -3.726075225040724e-22, -1.386507078835082e-04, -8.854079329734997e-16, -5.375523680036081e-41, -5.261295905664271e-41, -1.121292006594131e-03, -9.118411788944233e-04, -8.893473445593296e-04, -9.791164617532035e-04, -5.473156917419993e-41, -5.183139323587893e-41, -5.488790742893821e-41, -1.145600442332092e-03, -8.064318062265493e-04, -9.377417327957383e-36, -8.479825971342947e-03, -9.100079247243409e-36, -9.130153348800098e-03, -2.782440986560925e-04, -4.211321604057267e-42, -2.194895311329248e-03, -2.736542435998340e-03, -6.392972520234106e-03, -8.929577321188739e-04, -6.392972520234101e-03, -7.171926201054293e-35, -1.043056504674182e-05, -1.182242727653962e-05, -4.388182322165068e-28, -1.379795418760045e-05, -2.514366745636689e-32, -2.015650301235972e-04, -2.763138767800263e-06, -2.699234322549569e-06, -7.888016427214211e-06, -4.374767978780388e-06, -7.888016427214211e-06, -4.374767978780388e-06, -5.626704578332341e-04, -5.629820680550639e-04, -5.692402591002720e-04, -5.693338980883059e-04, -5.631269626958006e-04, -5.632668397680128e-04, -5.687597661911670e-04, -5.690327729891778e-04, -1.029773619496987e-47, -5.661478790474327e-04, -5.659506616089055e-04, -2.311667830134825e-38, -3.136651651882714e-04, -3.158482848667565e-04, -3.305752615534568e-04, -3.323285852422734e-04, -2.988339095942953e-04, -3.050539254019932e-04, -3.131511358502242e-04, -3.197846506972501e-04, -3.350550835189327e-04, -5.071266291628245e-45, -3.350550835189327e-04, -3.262838342736612e-04, -1.021822324627101e-02, -2.403380856545230e-39, -2.162341681626231e-02, -2.285929450067037e-02, -6.328953609642475e-03, -7.936667048067862e-03, -1.066846848502547e-02, -1.236410463860883e-02, -1.240699843128906e-02, -2.723667169448629e-39, -1.240699843128906e-02, -1.107951792078452e-02, -9.973449719544631e-04, -1.012205800226389e-03, -3.482029732516204e-36, -3.231627282438192e-03, -8.240025459907111e-04, -9.691422826878578e-04, -1.273701567825792e-03, -1.276358313452224e-03, -1.742121795179470e-03, -2.752010813672116e-03, -1.742121795179471e-03, -2.752010813672118e-03, -1.756250363576447e-26, -1.124795143326250e-06, -2.426721484721525e-06, -2.204493726106370e-06, -9.752875753004007e-06, -1.200278086856050e-05, -4.995854446105697e-04, -1.962608479966587e-33, -1.920859515727454e-06, -1.148105262214593e-05, -1.920859515727454e-06, -1.148105262214592e-05, -1.904682302101607e-01, -1.953749961661152e-01, -8.705381671707896e-02, -8.866852212802621e-02, -8.187991718803521e-38, -8.282360639775504e-38, -1.189755985723141e-37, -1.388579572326447e-01, -9.777078804229212e-38, -9.879306654022036e-38, -9.777078804229212e-38, -1.237421040459569e-01, -1.730977801110802e-01, -1.779004619983154e-01, -1.083093093811211e-02, -8.112588528076939e-39, -1.734654938251445e-02, -1.134686551465465e-38, -3.235406113801950e-02, -3.250638454186355e-02, -2.298410078384750e-02, -2.319277099816999e-02, -2.298410078384749e-02, -1.445699189618053e-38, -1.470561765501186e-02, -1.730002484129838e-39, -4.392577849429560e-03, -4.438138375043483e-03, -3.243070430410952e-37, -6.091567114051009e-03, -8.527133674678088e-38, -1.039643449390221e-02, -8.475607320704102e-03, -8.577761128796359e-03, -8.475607320704098e-03, -1.801085163507898e-37, -8.942207838374803e-03, -9.436231597699556e-03, -2.927242956799652e-32, -2.766238299896994e-32, -2.691086086598644e-04, -2.983817945849197e-04, -1.565728677638136e-02, -2.004677053417122e-02, -9.444482948028746e-04, -1.308004854112152e-03, -9.444482948028742e-04, -1.308004854112153e-03, -4.038511695722021e-29, -3.304934898402316e-29, -2.021803059702755e-07, -2.022125246254023e-07, -4.484147084231394e-25, -3.463979495438036e-25, -1.038892724751392e-33, -1.068824373767812e-33, -4.444059982449250e-06, -1.000133281207325e-05, -4.444059982449246e-06, -3.484435772505778e-26]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
