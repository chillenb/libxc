
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.690387236201312e-01, -3.690465915600459e-01, -3.690828202568643e-01, -3.689548422104790e-01, -3.690428517063050e-01, -3.690428517063050e-01, 9.532826571728307e-03, 9.504129996501591e-03, 8.659143022439159e-03, 9.328148864397473e-03, 9.522779165646752e-03, 9.522779165646752e-03, -1.152183332650988e-02, -1.077885378953613e-02, 1.099570315475150e-02, 1.350635121689467e-02, -1.124929916090213e-02, -1.124929916090213e-02, 2.400094769158112e-02, 2.139687100460278e-02, -9.497143859067368e-02, 1.321615720226590e-02, 2.315426288447026e-02, 2.315426288447026e-02, -1.496578881532905e-02, -1.548674014056498e-02, -3.059556602870192e-02, -8.346829859724118e-03, -1.535593658331173e-02, -1.535593658331173e-02, -2.649408239403074e-01, -2.638868832105374e-01, -2.648316862931173e-01, -2.640126001654651e-01, -2.644126628586848e-01, -2.644126628586848e-01, 6.230795988094722e-02, 5.829532415744079e-02, 6.532263202308855e-02, 6.222454986068504e-02, 5.555923748670492e-02, 5.555923748670492e-02, -4.587881267131046e-02, -8.523648047212763e-02, -2.927331801439261e-02, -5.964398918456939e-02, -6.511758648178047e-02, -6.511758648178047e-02, -4.028732990886301e-03, 4.331748332372067e-02, -2.078190476383458e-03, -9.498620352085402e-02, 1.620005931502413e-02, 1.620005931502413e-02, -8.087228908272981e-03, -9.058519527455058e-03, -7.060992875454279e-03, -2.882419296085364e-02, -8.369433669919098e-03, -8.369433669919085e-03, -5.391473702834136e-02, -2.987680004980729e-02, -2.271483273518335e-02, -2.631806765856652e-02, -2.316091324554901e-02, -2.316091324554901e-02, -3.919780729396510e-02, -3.171079662393628e-02, -7.469659938975724e-02, -1.019757308651530e-01, -9.255604177187847e-02, -9.255604177187847e-02, -7.783344097157847e-02, 4.151542045288277e-02, 2.643790294821217e-02, -5.478137519278072e-03, 1.074910202527002e-02, 1.074910202527006e-02, -9.580910876778653e-03, -3.118877996932997e-02, -2.928079110887414e-02, -1.866751727701231e-02, -8.755710145222801e-03, -8.755710145222820e-03, -1.707816447441386e-02, -2.885196112130626e-03, -5.142426513365023e-03, -8.943674116287919e-03, -7.278784275801262e-03, -7.278784275801343e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.187326929312490e-01, -8.186955641207406e-01, -8.185402374560962e-01, -8.191444601488695e-01, -8.187130698323020e-01, -8.187130698323020e-01, -2.736443675858876e-01, -2.737353390529730e-01, -2.765316731956519e-01, -2.759995696375703e-01, -2.736665105438196e-01, -2.736665105438196e-01, -1.520577163179281e-01, -1.527796055866839e-01, -1.612871296998014e-01, -1.564077982216712e-01, -1.523125911226769e-01, -1.523125911226769e-01, -9.418146492084045e-02, -9.728717490555956e-02, -1.997074269334821e-01, 3.786177440279140e-03, -9.530850451912358e-02, -9.530850451912358e-02, -1.816127619762098e-02, -1.869372190524027e-02, -1.724246926892300e-02, -1.067298812901169e-02, -1.853866290857357e-02, -1.853866290857345e-02, -1.349955960108474e-02, -1.870095087808614e-03, -1.221824269557916e-02, -3.182191620052564e-03, -7.666921776374328e-03, -7.666921776374328e-03, -1.998867464829189e-01, -2.120191108984179e-01, -1.946967078691927e-01, -2.039486583553400e-01, -2.151917931917068e-01, -2.151917931917068e-01, -2.122911639439207e-01, -1.263827476015833e-01, -1.523175768152216e-01, -1.601696561505543e-01, -2.344075544513892e-01, -2.344075544513892e-01, 4.129433726006053e-02, -2.494550022530739e-02, 4.073494119549388e-02, -2.722145812160451e-01, 4.130222659014694e-02, 4.130222659014694e-02, -1.033765959201418e-02, -1.153967312987099e-02, -9.027188984194089e-03, -4.419940725363460e-03, -1.068481016955912e-02, -1.068481016955950e-02, -2.540335223013732e-01, 6.957186530546203e-02, -1.243743501430070e-02, -1.039549848626992e-01, -5.517028425918695e-02, -5.517028425918695e-02, -1.407361725024120e-01, -2.337349978812754e-01, -2.467163515677162e-01, -1.027700167591336e-01, -2.017104012607270e-01, -2.017104012607270e-01, -1.644209788172962e-01, -7.864475079662400e-02, -1.061527044693631e-01, -1.071422408958319e-01, -1.079213853215982e-01, -1.079213853215984e-01, -1.537696688107711e-01, -2.127478974532299e-02, -6.420646151323347e-03, -1.068812220028629e-01, 3.348094014557440e-02, 3.348094014557462e-02, -2.079594202862666e-02, -3.764832372338905e-03, -6.645521799376172e-03, 3.073715635090786e-02, -9.325716379643464e-03, -9.325716379643618e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.270182883806460e-10, -3.270372130846987e-10, -3.271042700195941e-10, -3.267961566547528e-10, -3.270283955944696e-10, -3.270283955944696e-10, 2.410882521531929e-06, 2.410346669914977e-06, 2.392604833704064e-06, 2.383269356616075e-06, 2.410777013353522e-06, 2.410777013353522e-06, 9.287983553986802e-03, 9.262590530803898e-03, 8.291552212475175e-03, 7.717538725942644e-03, 9.278478905988123e-03, 9.278478905988123e-03, 1.304671946667880e+00, 1.306103402167513e+00, 7.647168481930863e-03, 1.974376888305991e+00, 1.308038641861937e+00, 1.308038641861937e+00, 6.153939827757815e-01, 6.627218526844628e-01, 1.280923992107232e+00, 1.158383515386065e-01, 6.907400400484902e-01, 6.907400400484902e-01, -6.266561919497443e-07, -6.300760425940415e-07, -6.269955683145582e-07, -6.296550915350262e-07, -6.284512717806862e-07, -6.284512717806862e-07, 1.847814417493682e-05, 1.750894853817279e-05, 1.829574328158007e-05, 1.754870337537904e-05, 1.801245983116948e-05, 1.801245983116948e-05, 3.400841989132012e-03, -1.322799483882086e-02, 1.148060720795164e-02, -6.015474913014053e-04, -1.175406486595755e-03, -1.175406486595755e-03, 1.507009001551901e+00, 6.369356813509919e-01, 1.832299883213441e+00, -1.709448356479273e-05, 2.014906070447647e+00, 2.014906070447647e+00, 1.193644913113271e-01, 1.486545474697003e-01, 4.499219799151945e-01, 1.978387430426086e+00, 2.296472035947910e-01, 2.296472035534093e-01, 9.693471036220569e-02, 9.611358404247291e-03, 2.968930501588992e-02, 5.258453664049748e-02, 4.015970165924843e-02, 4.015970165924843e-02, 6.585827947385432e-02, 6.508262023305147e-03, -5.616536098033751e-03, -2.073824578005335e-02, -1.294747982661448e-02, -1.294747982661448e-02, -6.548329328586851e-03, 3.358275874744652e-01, 2.230908230443587e-01, 1.049058000490034e-01, 1.555957745355822e-01, 1.555957745355823e-01, 2.404850312169664e-02, 8.933679082127990e-01, 1.338333021723321e+00, 1.281786596772231e-01, 2.593741465577328e+00, 2.593741465577341e+00, 5.092560198890441e-01, 3.737047347639698e-02, 9.081047698859379e-02, 3.356253003486405e+00, 3.106904395988758e-01, 3.106904396900169e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.229879627890517e-04, 3.229716234246466e-04, 3.229016622436220e-04, 3.231676869129365e-04, 3.229793387974247e-04, 3.229793387974247e-04, 1.058636606102235e-03, 1.059735917974647e-03, 1.093570146104373e-03, 1.087475608983667e-03, 1.058888905782045e-03, 1.058888905782045e-03, -1.124615383004005e-02, -1.115486448277014e-02, -8.867846807292232e-03, -8.324853963614449e-03, -1.121269406243379e-02, -1.121269406243379e-02, -4.072200890048212e-02, -4.169902881296725e-02, -1.222040296716943e-02, -6.844727591978177e-02, -4.111367777803608e-02, -4.111367777803608e-02, -9.939956540655119e-04, -1.122560957540935e-03, -1.662539580670008e-02, -4.423003242613917e-05, -1.140103025583086e-03, -1.140103025582877e-03, -1.822442104701272e-03, -1.991739858738898e-03, -1.841047600001089e-03, -1.972585434876669e-03, -1.906986202634572e-03, -1.906986202634572e-03, 2.197396814861768e-03, 2.531836638612734e-03, 2.111869568342511e-03, 2.365092093996990e-03, 2.553208229099011e-03, 2.553208229099011e-03, 5.859693233861283e-02, 4.202151092167084e-02, 2.125590431328427e-02, 4.761004924053881e-02, 8.039762067138309e-02, 8.039762067138309e-02, -5.488531983056181e-02, -4.251630785346307e-02, -5.993514396415284e-02, 8.573629559911663e-03, -7.565864924543513e-02, -7.565864924543513e-02, -6.084032563695766e-05, -7.372721478125317e-05, -1.269569346735303e-04, -2.623271083666159e-02, -6.965379104636108e-05, -6.965379104619463e-05, 6.347048569780555e-01, -2.721621430035785e-01, -1.388760644383252e-01, 8.289377357770392e-02, -4.454759028452115e-02, -4.454759028452115e-02, 2.718552960337669e-01, 8.491909145051665e-02, 1.309619505120874e-01, 5.359277603654510e-02, 1.210244319131654e-01, 1.210244319131654e-01, 4.917937601607735e-02, -2.070746407370960e-02, -1.662188875793359e-02, -9.181208740337378e-03, -1.367268078511898e-02, -1.367268078511895e-02, 2.729913972474992e-02, -1.296346150114719e-02, -2.348124089623124e-02, 8.818923652750813e-03, -6.060067764071816e-02, -6.060067764071771e-02, -6.063655090604743e-04, -1.938310839744403e-06, -2.454201837033326e-05, -6.458331997595795e-02, -6.146760500996744e-05, -6.146760500970698e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
