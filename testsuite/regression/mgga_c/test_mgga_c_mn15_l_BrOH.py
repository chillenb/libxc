
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.762816347726187e-01, -1.762825207119814e-01, -1.762864547758269e-01, -1.762720221153706e-01, -1.762821010767393e-01, -1.762821010767393e-01, -1.454884755101015e-01, -1.454481579903174e-01, -1.442451653012749e-01, -1.447120456219159e-01, -1.454774599953141e-01, 5.279992099893951e-02, -2.354937284603314e-01, 7.755258013362731e-02, 8.625983776363756e-02, 8.233523920755517e-02, 7.731775434937768e-02, 7.731775434937768e-02, 3.167355032518951e-02, 3.013547438539558e-02, -3.856356749245253e-01, 2.809739144646375e-02, 3.124560550771388e-02, 3.124560550771388e-02, -1.496568639280053e-02, -1.548658087666452e-02, -3.044549804875305e-02, -8.346796607297830e-03, -1.535579937635759e-02, -1.535579937635759e-02, -2.653221521528280e-01, -2.642660628855489e-01, -2.652079562655316e-01, -1.236254146218664e-01, -2.647994394214748e-01, -2.647994394214748e-01, -1.638417850132355e-01, -1.557019866901549e-01, -1.676006512544365e-01, -1.609085965451503e-01, -1.536623568392774e-01, 6.329478197935023e-02, -4.082890345562106e-02, -1.110144828670770e-01, -1.030351268692380e-02, -6.072450897729841e-02, -6.677936799367130e-02, -6.043011788224881e-02, -4.440403783466058e-01, 4.798535560737802e-02, -4.318686974598255e-01, -1.048294437590448e-01, 2.076914511141531e-02, 2.076914511141531e-02, -7.241281145965058e-02, -9.058473711662714e-03, -7.060975564015437e-03, -4.234792321211500e-01, -7.496641641028208e-02, -8.369379864057487e-03, -3.243088628118301e-02, -2.783075632335528e-02, -3.917836518879624e-02, -1.482748000185092e-02, -1.442936850794295e-02, -1.442936850794295e-02, -1.524755359124006e-02, -3.085360238214719e-02, -7.578955926203103e-02, -1.073511003145984e-01, -9.562372814895731e-02, -6.405010085560883e-02, -9.706742605991747e-02, -2.080573194040929e-01, 3.555441931539722e-02, -8.721010346099115e-02, 2.331684960278437e-02, 2.331684960278438e-02, -7.061059373826475e-02, -3.113313057132390e-02, -2.888824722842032e-02, -1.343687327651420e-03, -4.147619046154862e-01, -6.783879056590948e-03, -1.707616907216303e-02, -2.885195845973992e-03, -5.142425302006906e-03, -6.818334279679829e-03, -7.278746038643966e-03, -7.278746038644047e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.369977868634395e-01, -2.369881416428208e-01, -2.369460745441968e-01, -2.371029288676570e-01, -2.369927051773963e-01, -2.369927051773963e-01, 1.340801866416784e-01, 1.339821058293962e-01, 1.310192542597811e-01, 1.321726700088101e-01, 1.340531389544175e-01, -3.241689278667312e-01, 1.836047742110865e-01, -9.064786193336058e-02, -6.949519665730781e-02, -7.972748845927446e-02, -9.110466452005116e-02, -9.110466452005116e-02, -8.285938862895108e-02, -8.573801694965366e-02, 2.080316084238917e-01, 6.546481641469942e-02, -8.374064305624392e-02, -8.374064305624392e-02, -1.816061324897032e-02, -1.869269189415619e-02, -1.632627136019358e-02, -1.067277079361628e-02, -1.853777546862944e-02, -1.853777546862940e-02, -1.376285327615471e-02, -2.108228297087533e-03, -1.247546968773009e-02, -2.879387635896155e-02, -7.921896506597638e-03, -7.921896506597638e-03, 1.806065601674885e-01, 1.701140746965765e-01, 1.849972803030639e-01, 1.769880243747245e-01, 1.672552898781844e-01, -2.151287426377809e-01, -2.693694332256923e-01, -1.902433151637161e-01, -2.172701728197151e-01, -2.797230534608293e-01, -2.871021857562900e-01, -9.029248891217946e-02, -2.538011242835533e-01, -1.093857421742666e-02, -2.346370844243716e-01, -4.999978703906064e-01, 6.185652930139332e-02, 6.185652930139332e-02, -9.301984542579173e-02, -1.153937396666545e-02, -9.027075715746485e-03, -3.980853931136742e-01, -9.622186833140717e-02, -1.068445857783515e-02, -2.255776931812478e-01, 9.853747809990965e-02, -9.334004751747611e-02, -6.963998434873397e-02, -2.091744228140944e-02, -2.091744228140944e-02, -7.238318312461582e-02, -2.396918890203045e-01, -2.580425308487055e-01, -1.108750266035948e-01, -2.144647810741915e-01, -1.049602193575022e-01, -2.704691297260521e-01, 1.191478870012806e-01, -9.687828834383502e-02, 9.197489066747631e-02, -1.075039318328114e-01, -1.075039318328115e-01, 5.245751954820349e-02, -2.093160015418439e-02, -4.081238891341521e-03, -1.447915271334927e-01, -2.714093247049280e-01, 4.398067881603843e-02, -2.078304272448086e-02, -3.764830618738765e-03, -6.645513849138873e-03, 4.204365079240693e-02, -9.325466198402391e-03, -9.325466198402540e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.384523727005315e-08, -1.384568527280575e-08, -1.384753061628319e-08, -1.384025578528838e-08, -1.384547404367205e-08, -1.384547404367205e-08, 2.594829371578392e-05, 2.593805615322486e-05, 2.562636445319556e-05, 2.573884323183570e-05, 2.594495821215893e-05, 8.778313773260216e-07, 4.703222139481606e-02, 2.179824704531069e-03, 2.138213851152721e-03, 2.207276885823082e-03, 2.180557142163781e-03, 2.180557142163781e-03, 1.056077697654444e+00, 1.033765708841045e+00, 3.154070917379344e-02, 7.611397727056365e-01, 1.048902573971680e+00, 1.048902573971680e+00, 5.792626975848516e-01, 6.138801758730869e-01, 8.445268245762183e-01, 3.871444047609629e-02, 6.464106181333822e-01, 6.464106181286361e-01, -6.228269026440507e-07, -6.262485778859349e-07, -6.232150217948807e-07, -5.106729583380159e-06, -6.245570470547684e-07, -6.245570470547684e-07, 3.544351457267612e-04, 3.272281783163149e-04, 3.665597596687476e-04, 3.444044891134496e-04, 3.209702456433488e-04, 1.472854998270986e-05, 2.226552499186098e-03, -7.524553494937893e-03, 6.174097626207643e-03, -2.864080907327738e-04, -8.298373176640449e-04, -2.625190794711014e-03, 3.071098845154630e+02, 5.294608666377434e-01, 3.189456249818056e+02, -4.683343207216487e-06, 1.325791096400351e+00, 1.325791096400351e+00, 7.221286989499190e+07, 6.425539451135331e-02, 3.130177699905704e-01, 2.393719788859619e+03, 6.141423042041892e+07, 7.562151522361575e-02, 8.879266805695343e-02, 8.914426416022676e-03, 3.621519851942204e-02, 4.840791604853985e-02, 3.703319295703287e-02, 3.703319295703287e-02, 5.557460411786822e-02, 6.160276749899555e-03, -5.198041842023100e-03, -1.869597116758167e-02, -1.178402655382345e-02, -2.750530933008451e-02, -3.268143937136544e-03, 4.120866186583832e+00, 1.778718368944943e-01, 3.311006597304929e-01, 1.158947382059663e-01, 1.158947382059664e-01, 8.032719226245982e-02, 7.026024526548795e-01, 8.038367176725569e-01, 7.977564405238240e-02, 7.325724249051651e+02, 1.597094614452788e+00, 1.792515898388816e-01, 8.338878829145491e-03, 6.987706482373802e-02, 1.992508162054024e+00, 9.663475429281680e-02, 9.663475434880983e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.923284738798494e-05, 2.922728995836094e-05, 2.920289431898549e-05, 2.929328486823824e-05, 2.922992046865433e-05, 2.922992046865433e-05, -2.198670807181620e-03, -2.198100382933410e-03, -2.180605776797480e-03, -2.187121580523730e-03, -2.198494281254705e-03, 1.968372884347919e-03, -4.182762452410488e-02, 8.325472747773058e-04, -1.224074104400801e-04, 3.101997191141804e-04, 8.552098818171258e-04, 8.552098818171258e-04, -2.969430545416369e-02, -2.860580259525281e-02, -2.776860541560798e-02, -6.244125759629184e-02, -2.934970339081235e-02, -2.934970339081235e-02, -9.939944254435458e-04, -1.122558876504406e-03, -1.661364030215467e-02, -4.423000004140971e-05, -1.140101189292003e-03, -1.140101189291794e-03, -1.823385745508750e-03, -1.993006650556856e-03, -1.842014303362117e-03, -1.517423655562385e-03, -1.908110119513236e-03, -1.908110119513236e-03, -6.917263718837051e-03, -6.717726740420967e-03, -6.995670237144727e-03, -6.847125722033423e-03, -6.667417052783719e-03, 2.894122164621757e-03, 8.389306748500022e-02, 8.860593846150275e-02, 5.002761830999416e-02, 1.077679017101058e-01, 1.051230636916333e-01, 1.065335108021559e-02, -1.637095189039812e-01, -3.951169585408025e-02, -1.805850471244560e-01, 1.923501678046665e-02, -7.356796808128187e-02, -7.356796808128187e-02, -1.497437231749646e-04, -7.372714631578637e-05, -1.269568775488733e-04, -6.945370480517646e-02, -1.714466587769738e-04, -6.965370880443640e-05, 4.057015627416111e-01, -3.419367235847293e-01, 1.372224762637675e-01, -6.652071796630118e-02, -1.714405109294296e-01, -1.714405109294296e-01, -5.814517465336332e-02, 8.842829998696020e-02, 1.385774891125462e-01, 6.230196525407269e-02, 1.311388599809384e-01, 2.703787218656527e-02, 1.025081857824529e-01, -2.105265977328892e-01, -8.609096046848145e-03, -1.170601094728534e-01, 3.656717807447912e-04, 3.656717807447843e-04, -6.234321537944625e-02, -1.295997152306347e-02, -2.344130952616583e-02, 5.281526312817576e-02, -1.759500299879295e-01, -6.004046589491283e-02, -6.063526753422263e-04, -1.938310806801073e-06, -2.454201730649124e-05, -6.392370634950294e-02, -6.146754567614785e-05, -6.146754567588738e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
