
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.457609102691249e-02, -3.457648417501913e-02, -3.457642499873778e-02, -3.457054859078245e-02, -3.457388561284902e-02, -3.457388561284902e-02, -3.903735244684385e-02, -3.904169252629567e-02, -3.913747333731064e-02, -3.892023822102868e-02, -3.901837660422867e-02, -3.901837660422867e-02, -2.736758442717363e-02, -2.713413848953302e-02, -2.153915882730045e-02, -2.165879502535803e-02, -2.184941164545542e-02, -2.184941164545542e-02, -6.197221520770924e-03, -6.726049089309203e-03, -3.054728176267545e-02, -2.365221502827680e-03, -3.861004663176724e-03, -3.861004663176721e-03, -1.311329407078363e-08, -1.750314704391302e-08, -1.529389559799823e-05, -1.000139242374930e-09, -3.588557204540506e-09, -3.588557207183036e-09, -3.551870517444915e-02, -3.560296404554570e-02, -3.551658535723136e-02, -3.559116154117867e-02, -3.556448726393171e-02, -3.556448726393171e-02, -1.710404327861780e-02, -1.728762353408968e-02, -1.619819923361752e-02, -1.634748283553865e-02, -1.766377056445057e-02, -1.766377056445057e-02, -3.391447063836547e-02, -5.372003585652194e-02, -3.385747011272020e-02, -5.066986488750860e-02, -3.541313925289588e-02, -3.541313925289588e-02, -5.371383295557288e-04, -3.370903193319150e-03, -4.301647448837697e-04, -7.100428156953402e-02, -1.307657678680925e-03, -1.307657678680925e-03, -4.236478467830133e-10, -1.099848253403490e-09, -1.918233460403095e-09, -1.255652377962571e-04, -2.181776155731102e-09, -2.181776155731101e-09, -5.053509199235168e-02, -3.868824347910363e-02, -4.153057737605359e-02, -4.475452454713575e-02, -4.302184767813189e-02, -4.302184767813189e-02, -6.001241702626978e-02, -2.024153880389432e-02, -2.488346820667321e-02, -3.141993164501827e-02, -2.793387950127320e-02, -2.793387950127320e-02, -5.419823807583739e-02, -5.560979364344965e-03, -9.273591474578145e-03, -2.140596193308870e-02, -1.426244285564225e-02, -1.426244285564226e-02, -2.242454042888495e-02, -1.148461055555888e-05, -4.117745061531453e-05, -2.543471472665557e-02, -3.768646045433038e-04, -3.768646045433019e-04, -5.301773648603956e-08, -1.156809107342907e-11, -1.654181261209061e-10, -2.896551694605723e-04, -1.891303164680720e-09, -1.891303167982172e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.052450015826654e-01, -1.052459299304957e-01, -1.052467315079986e-01, -1.052328875600848e-01, -1.052406156113204e-01, -1.052406156113204e-01, -1.056036413347188e-01, -1.056092701050236e-01, -1.057327733756698e-01, -1.054450067113642e-01, -1.055753921818210e-01, -1.055753921818210e-01, -7.748819502392056e-02, -7.719766713439072e-02, -6.899345939858050e-02, -6.918126723507197e-02, -6.950489015422817e-02, -6.950489015422817e-02, -2.718454365485581e-02, -2.883675152355122e-02, -8.323237574196066e-02, -1.234462585726888e-02, -1.872890094039185e-02, -1.872890094039185e-02, -9.001714823295891e-08, -1.199241762730722e-07, -9.888196035509104e-05, -6.844548288640065e-09, -2.459278548968683e-08, -2.459278549101304e-08, -1.070221865836085e-01, -1.072398900167486e-01, -1.070239026742873e-01, -1.072163607070714e-01, -1.071366952595787e-01, -1.071366952595787e-01, -6.355415795826147e-02, -6.393978767582842e-02, -6.132143042213215e-02, -6.164279978445594e-02, -6.486579344985373e-02, -6.486579344985373e-02, -7.966650396642730e-02, -8.386214362575371e-02, -7.887629105505217e-02, -8.115763668242890e-02, -8.083859521546785e-02, -8.083859521546785e-02, -3.168849855963251e-03, -1.696667383395066e-02, -2.562853917977562e-03, -1.178587678599282e-01, -7.281204852222514e-03, -7.281204852222512e-03, -2.841010118543149e-09, -7.435455587844361e-09, -1.315277480982489e-08, -7.800269990900464e-04, -1.479634580901954e-08, -1.479634580671976e-08, -8.243215035666812e-02, -8.390511554509064e-02, -8.449285538962503e-02, -8.436472233050693e-02, -8.452898258924021e-02, -8.452898258924021e-02, -7.448587455812072e-02, -6.180261308787238e-02, -6.866598894820604e-02, -7.641317359390849e-02, -7.256527279000236e-02, -7.256527279000236e-02, -8.555372568001465e-02, -2.562071262740044e-02, -3.734968388172023e-02, -6.125097042838160e-02, -4.909477745962212e-02, -4.909477745962214e-02, -6.490300150500486e-02, -7.482794499724752e-05, -2.620625781773549e-04, -6.425175741986824e-02, -2.261655836735823e-03, -2.261655836735852e-03, -3.530471180150169e-07, -7.699364450604673e-11, -1.147831346670366e-09, -1.763513164084790e-03, -1.290561255791505e-08, -1.290561255301980e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.121014523656625e-10, 3.121111116306085e-10, 3.121362363336296e-10, 3.119932558600658e-10, 3.120706888133158e-10, 3.120706888133158e-10, 1.208807465317597e-06, 1.209106202736745e-06, 1.216130357290085e-06, 1.205321423529377e-06, 1.210207944971338e-06, 1.210207944971338e-06, 1.891175711842592e-03, 1.876910893120441e-03, 1.518875457427774e-03, 1.492844098862293e-03, 1.517606390269476e-03, 1.517606390269476e-03, 1.868664863822949e-01, 1.963052124251911e-01, 9.852837640535602e-04, 1.480279856834682e-01, 1.811901973126359e-01, 1.811901973126360e-01, 1.219998247432727e-02, 1.430500801749413e-02, 5.361999789026268e-02, 4.485379404187687e-03, 9.242111644461710e-03, 9.242111637946136e-03, 5.750986453888530e-07, 5.811568311215884e-07, 5.753858960450601e-07, 5.807318143408140e-07, 5.781527947138023e-07, 5.781527947138023e-07, 6.931037501586191e-06, 6.967784195424585e-06, 6.553076681171762e-06, 6.583841351080787e-06, 7.143811953830161e-06, 7.143811953830161e-06, 8.695366591868925e-03, 1.150885206052533e-02, 9.624039733064551e-03, 1.350666378072936e-02, 9.084625725941297e-03, 9.084625725941297e-03, 9.578082854944052e-02, 7.046484261899631e-02, 1.001611224331377e-01, 6.700543448176618e-05, 1.706443462150876e-01, 1.706443462150876e-01, 4.437960738962609e-03, 5.520995073306166e-03, 5.595059365943592e-02, 1.113773465240133e-01, 2.414048350297607e-02, 2.414048349928557e-02, 8.774726665665784e-02, 5.100729686320964e-02, 6.146685699798367e-02, 7.252679756163029e-02, 6.670206703529691e-02, 6.670206703529689e-02, 4.648865701631603e-02, 1.154568018225417e-02, 1.620953987907933e-02, 2.609084522240090e-02, 2.008294068047741e-02, 2.008294068047741e-02, 8.147663958208399e-03, 5.016551039439056e-02, 4.521103400968174e-02, 4.237012456690795e-02, 4.596240251975164e-02, 4.596240251975168e-02, 1.499733272146112e-02, 4.441613721355640e-02, 6.218064111344852e-02, 7.336769147621079e-02, 1.781686674939990e-01, 1.781686674940003e-01, 1.461660876017206e-02, 6.240290202610914e-03, 7.718987262160000e-03, 1.667325817949661e-01, 3.017511299077839e-02, 3.017511293484247e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.087568120033221e-05, -3.087725444799303e-05, -3.088432365314894e-05, -3.086108131078418e-05, -3.087324401022911e-05, -3.087324401022911e-05, -6.913938622686195e-05, -6.917922466793079e-05, -7.028882560190995e-05, -7.033201040799995e-05, -7.012931789209702e-05, -7.012931789209702e-05, -3.275786722456656e-04, -3.260462333452888e-04, -2.872852566914384e-04, -3.453554909381719e-04, -3.278599872198405e-04, -3.278599872198405e-04, -3.835873663078540e-03, -4.245224457364328e-03, -3.914992343720928e-05, -5.257922781194403e-04, -1.283881803059857e-03, -1.283881803059863e-03, -6.475332622670780e-09, -8.624006566221918e-09, -3.493373526658887e-06, -3.523542793587990e-10, -1.614211814397308e-09, -1.614211807139851e-09, -1.024984173241207e-03, -1.037984908697630e-03, -1.025826067950096e-03, -1.037291765579452e-03, -1.031419790975208e-03, -1.031419790975208e-03, -2.557768153933259e-04, -2.806886514788094e-04, -2.416471361184573e-04, -2.630503516004818e-04, -2.768453816720530e-04, -2.768453816720530e-04, -8.677498491497770e-03, -6.539154104456231e-03, -4.079406488321280e-03, -2.021754764903686e-03, -9.928314144841370e-03, -9.928314144841370e-03, -1.014605738805338e-04, -1.011746342206200e-03, -8.037611100791936e-05, -1.823509198217777e-04, -3.922430307187453e-04, -3.922430307187455e-04, -6.251461313364510e-11, -2.643383272881071e-10, -1.795732208087753e-09, -2.643578424007088e-05, -9.964404655519166e-10, -9.964404655519183e-10, -1.454082951687729e-01, -1.161172201509290e-01, -1.327966141021709e-01, -1.451862086823238e-01, -1.394095254106176e-01, -1.394095254106176e-01, -2.322483232188035e-02, -1.300750976978011e-02, -2.319268108021688e-02, -4.339367238698622e-02, -3.104027901277523e-02, -3.104027901277521e-02, -3.868400674860902e-03, -1.937824911973699e-03, -3.374308811818168e-03, -6.897252309463337e-03, -5.842799124593437e-03, -5.842799124593438e-03, -8.106169581809951e-03, -3.011221249115191e-06, -8.307963496069578e-06, -1.268664870544576e-02, -1.014482143216802e-04, -1.014482143216765e-04, -9.576032200969995e-09, -7.950348553067436e-13, -1.238168541256275e-10, -9.105214140109872e-05, -1.191724028371270e-09, -1.191724021161184e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
