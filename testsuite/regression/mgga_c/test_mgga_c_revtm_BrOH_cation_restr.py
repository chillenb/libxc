
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504592300e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -1.678249190661620e-02, -6.701411225019485e-02, -8.578166059619819e-03, -7.242524541064587e-03, -7.845176295081148e-03, -7.704750359992024e-03, -7.704750359992024e-03, -5.572383726599268e-03, -5.921253109659502e-03, -7.077000961998538e-02, -1.553695125293658e-03, -2.848787754693767e-03, -2.848787754693767e-03, -1.285640709345268e-08, -1.688094259104352e-08, -1.189924052740078e-05, -7.637730083149471e-10, -3.047855291312294e-09, -3.047855291312294e-09, -3.517396039990822e-02, -3.525865010606186e-02, -3.517882781946130e-02, -1.224312405851439e-01, -3.521636460909638e-02, -3.521636460909638e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214133e-02, -9.474413043394064e-02, -9.489275971457944e-02, -1.465971071730806e-02, -2.121551341170184e-02, -2.605205867280650e-02, -1.778868277027072e-02, -2.123204479393196e-02, -2.213312475148299e-02, -6.418936514394004e-02, -2.699430518029856e-02, -2.947939911893370e-03, -2.581454244194446e-02, -2.511002972361075e-02, -1.026096935428002e-03, -1.026096935427997e-03, -1.873262677774475e-03, -6.078461817892327e-10, -1.407170573499021e-09, -2.031142249656109e-02, -2.148658723728447e-03, -1.287911444565354e-09, -2.951261394638621e-02, -2.868453501362629e-02, -6.383636564200691e-02, -2.924389487104663e-02, -2.912448702872851e-02, -2.912448702872852e-02, -2.917078618511989e-02, -1.892240546003594e-02, -2.214226946358806e-02, -2.530718845237067e-02, -2.370763914220210e-02, -6.128134397443009e-02, -2.507314899675296e-02, -4.238697070491520e-02, -7.772117650139613e-03, -5.192846777352227e-02, -1.097836142408650e-02, -1.097836142408650e-02, -5.782021926348150e-02, -1.013860685099493e-05, -3.038918789370005e-05, -1.629995009370686e-02, -2.356177787973960e-02, -2.789673246800535e-04, -2.876110690926018e-08, -1.444053761609711e-12, -1.424352344730486e-10, -2.398762910072574e-04, -1.278578389847726e-09, -1.278578393773859e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747371672968089e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -6.344259178912254e-02, -7.507468276142483e-02, -3.778679286152408e-02, -3.003518721317350e-02, -3.535898168266891e-02, -3.488401467893958e-02, -3.488401467893958e-02, -2.516986202732049e-02, -2.633192347863033e-02, -7.900736698061860e-02, -8.617380398792982e-03, -1.466729164866706e-02, -1.466729164866704e-02, -8.834931114176537e-08, -1.158875839373535e-07, -7.427521060456640e-05, -5.299856010609741e-09, -2.106812435198977e-08, -2.106812435198977e-08, -1.064861013628803e-01, -1.067060662701791e-01, -1.064987276266783e-01, -1.321455341852712e-01, -1.065961868079090e-01, -1.065961868079090e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -5.715799099906741e-02, -6.470941522315458e-02, -7.379059200180040e-02, -5.850117743217183e-02, -6.438466051768751e-02, -6.632208677316134e-02, -7.210898567657270e-02, -3.211636191061110e-02, -1.410813729416781e-02, -3.079828628005500e-02, -7.973798655745332e-02, -5.882375041749944e-03, -5.882375041749936e-03, -2.429818831173949e-03, -4.219445162234543e-09, -9.805231158739596e-09, -2.457414087463874e-02, -2.781518125836640e-03, -8.950342445772295e-09, -8.550065105006419e-02, -8.077162479988662e-02, -7.173787450420190e-02, -8.361803603015741e-02, -8.291913928743969e-02, -8.291913928743967e-02, -8.405784724567471e-02, -5.955354170754273e-02, -6.496191512629104e-02, -7.096022520137835e-02, -6.775314915260405e-02, -6.904837093538647e-02, -7.234192514696974e-02, -4.894336676652947e-02, -3.306940089175001e-02, -5.914859868946302e-02, -4.179092528681087e-02, -4.179092528681086e-02, -6.539524416530183e-02, -6.647281352840871e-05, -1.964178369549861e-04, -5.211929313053146e-02, -2.826624935272212e-02, -1.713551668935007e-03, -1.963329825548357e-07, -1.019292521933846e-11, -9.968758145702739e-10, -1.481380494942877e-03, -8.895599582048434e-09, -8.895599579437730e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.146882401043132e-09, 8.146791560079789e-09, 8.146359682604643e-09, 8.147711840697310e-09, 8.147007288489827e-09, 8.147007288489827e-09, 1.149095375720084e-05, 1.149085481283416e-05, 1.148744522038142e-05, 1.148467082797742e-05, 1.148973014642859e-05, 4.599209689818854e-07, 7.967804144485046e-03, 4.516313887525707e-04, 2.818728179177076e-04, 4.257465604305430e-04, 4.166733825095396e-04, 4.166733825095396e-04, 1.657534374632167e-01, 1.702288890904598e-01, 4.339354264991174e-03, 8.633318838440300e-02, 1.245622362954836e-01, 1.245622362954835e-01, 1.189789569811452e-02, 1.366223629944536e-02, 3.334875057948178e-02, 3.177910593476976e-03, 7.506786007194208e-03, 7.506786007194208e-03, 5.719694751655658e-07, 5.780184809826962e-07, 5.723192231280307e-07, 2.293331352097402e-06, 5.749864543666331e-07, 5.749864543666331e-07, 1.136298717661886e-04, 1.104065130245582e-04, 1.160575974001029e-04, 1.131269037701816e-04, 1.107054174666438e-04, 5.860617387850947e-06, 6.400798722970767e-03, 1.049041683592980e-02, 5.565168052179404e-03, 7.889926395625853e-03, 6.880129768797533e-03, 1.269146810649917e-02, 1.921425832639827e+01, 4.740905265946836e-02, 2.594707476376711e+01, 2.493471854364032e-05, 1.249999549995593e-01, 1.249999549995588e-01, 1.876414461063435e+07, 2.546369622980181e-03, 3.768857097116880e-02, 1.198364198293228e+02, 1.014916310680449e+07, 1.217841589273322e-02, 1.120608527120497e-01, 5.172054018413974e-02, 1.345905773996269e-02, 8.017895087829441e-02, 7.155083116199991e-02, 7.155083116199989e-02, 1.103915674046452e-01, 1.098995329852030e-02, 1.520930181209242e-02, 2.450152776765199e-02, 1.871305764139566e-02, 2.066673019326189e-02, 6.398277557818082e-03, 6.443062837138216e-01, 3.723292227225624e-02, 1.060527877928484e-01, 3.530411800761534e-02, 3.530411800761533e-02, 3.737380396378821e-02, 3.772073322371260e-02, 4.155438717498822e-02, 5.224164446818097e-02, 4.718621753417992e+01, 1.199753465067019e-01, 6.500539243330389e-03, 3.588793684475019e-04, 6.399469771371392e-03, 1.303077400362977e-01, 1.824579931359741e-02, 1.824579925535256e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.765207729479575e-29, -7.850668223232276e-99, -7.851766122732356e-99, -7.846765369294372e-99, -7.849442970838510e-99, -7.849442970838510e-99, -3.191957112719685e-86, -3.194343771267096e-86, -3.256950559580713e-86, -3.226300209627859e-86, -3.235530258295209e-86, -1.382219010895476e-04, -1.476394860179956e-74, -6.566356115700324e-04, 0.000000000000000e+00, -5.530242506857678e-04, -5.323560171122480e-04, -5.323560171122480e-04, -3.923067579183184e-03, -4.371504809206210e-03, -1.897475940187785e-76, -5.453394330391852e-04, -1.335673595754923e-03, -1.335673595754923e-03, -6.475393671618617e-09, -8.624174237624066e-09, 0.000000000000000e+00, -3.523693112994578e-10, -1.614284895981741e-09, -1.614284895981741e-09, -1.029718256112013e-03, -1.042759156492540e-03, -1.030466148272943e-03, -1.598079415992762e-42, -1.036223871054505e-03, -1.036223871054505e-03, -5.947533387942985e-37, -4.523825323399005e-82, -4.522658723061599e-82, -4.515759188827298e-82, -4.546264269371517e-82, -2.952599731992555e-04, -1.439301664725993e-02, -3.673143897355122e-02, -8.375128615299194e-03, -1.597061803149370e-02, -1.691531957901452e-02, -6.761914745262274e-72, -2.752537205744881e-62, 0.000000000000000e+00, -7.036666314130672e-62, -1.876333445593805e-03, -3.983039586907597e-04, -3.983039586907556e-04, -6.203271579049466e-45, -2.643629019038092e-10, -1.795870038948309e-09, -9.190067539120929e-60, -8.742709017605923e-45, -9.965624728537276e-10, -3.599130894482417e-01, -1.591311801852566e-01, -1.371347555916727e-69, -2.538605587395605e-01, -2.251453820612687e-01, -2.251453820612687e-01, -3.256734816064179e-01, -1.353487727038813e-02, -2.524948133616736e-02, -5.289127403193349e-02, -3.549189446978265e-02, -1.439693438320679e-70, -2.449098099928983e-02, -1.104357309060530e-66, -3.542934015292424e-03, -7.470415075441069e-69, -6.571931766060183e-03, -6.571931766060186e-03, -1.600940291452488e-70, -3.014011222749941e-06, -8.339370021792777e-06, -1.937648655205669e-02, -9.300364531239965e-61, -1.024989324901089e-04, -9.580337767465321e-09, -7.950681731393686e-13, -1.238184581545662e-10, -9.158445868201996e-05, -1.191831478009053e-09, -1.191831467924184e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
