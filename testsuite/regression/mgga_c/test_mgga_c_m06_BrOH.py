
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.084078006022020e-01, -1.084091419388362e-01, -1.084164804694372e-01, -1.083947318203946e-01, -1.084084935417033e-01, -1.084084935417033e-01, -6.320121249881172e-02, -6.319504310792401e-02, -6.299948471160066e-02, -6.289780350662277e-02, -6.320073445601948e-02, -6.320073445601948e-02, -6.815186344380675e-02, -6.816748691939556e-02, -6.616346236925819e-02, -6.132487592091262e-02, -6.815050142448364e-02, -6.815050142448364e-02, -9.521967179872748e-03, -1.142497370628515e-02, -1.497530762146467e-01, 5.173651299342219e-04, -1.018011079715542e-02, -1.018011079715542e-02, -5.011588628143699e-04, -6.049463542144001e-04, -2.040581681926952e-03, -3.315314172222089e-03, -5.370261105851044e-04, -5.370261105851128e-04, -9.656722636175386e-02, -9.685083814345019e-02, -9.660201034091598e-02, -9.682218322988845e-02, -9.670466265813160e-02, -9.670466265813160e-02, -4.147276873964567e-02, -4.125467289941920e-02, -4.068026989910556e-02, -4.048727944092367e-02, -4.222218646974496e-02, -4.222218646974496e-02, -3.259599642360211e-02, -4.278921701370736e-02, -3.325442996545624e-02, -4.173798964017478e-02, -3.442988428268168e-02, -3.442988428268168e-02, 7.371502316874723e-03, 5.803036676245488e-03, 7.581493931446998e-03, -6.580688113902899e-02, 1.063149434530924e-02, 1.063149434530924e-02, -1.824737854199491e-03, -2.885784262781125e-03, -1.120170324288177e-03, -4.770300996633378e-03, -3.357753931721433e-03, -3.357753931721424e-03, -5.373007019373521e-02, -5.652667602381503e-02, -5.680875283427417e-02, -5.628830557952111e-02, -5.665062677909444e-02, -5.665062677909441e-02, -4.512474936457135e-02, -3.025545554954456e-02, -3.516983249071448e-02, -4.214984798255317e-02, -3.815032765631587e-02, -3.815032765631587e-02, -4.407545466226115e-02, -3.227472733289605e-03, -1.692795320417062e-02, -2.737178637277171e-02, -2.362911459953809e-02, -2.362911459953743e-02, -2.791141124159457e-02, -6.261768852040828e-04, -1.237697965063879e-03, -2.619672753129654e-02, 6.686123001778843e-03, 6.686123001778316e-03, -6.222105428819819e-03, -1.519076320991701e-03, -6.305627244911015e-04, 6.063773693491481e-03, -3.056912653015888e-03, -3.056912653015914e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.508815664045318e-01, -1.508827871294784e-01, -1.508866157012678e-01, -1.508666582189935e-01, -1.508822236815990e-01, -1.508822236815990e-01, -6.771737455436977e-02, -6.773482426692690e-02, -6.823876175477173e-02, -6.773610354214465e-02, -6.772427830387318e-02, -6.772427830387318e-02, -3.305048089279494e-02, -3.397615165837009e-02, -7.051022244087468e-02, -6.479184295523055e-02, -3.337926282657144e-02, -3.337926282657144e-02, -9.934629797061234e-02, -9.470516437395460e-02, 1.858567826071444e-02, -6.912316711228711e-02, -9.790150030095512e-02, -9.790150030095512e-02, -1.835536078991496e-02, -1.895618412838903e-02, -2.806794698573724e-02, -1.138023560918373e-02, -1.879582326552830e-02, -1.879582326552831e-02, -1.216598157081905e-01, -1.217648235917462e-01, -1.216695003328621e-01, -1.217512376344377e-01, -1.217156930036065e-01, -1.217156930036065e-01, -9.999142921610815e-02, -9.984898211324578e-02, -1.063573589359195e-01, -1.062892532313120e-01, -9.216143218510298e-02, -9.216143218510298e-02, -5.381221499726629e-02, -5.274588420320059e-02, -4.681491408121896e-02, -5.307850908585476e-02, -6.046387811016629e-02, -6.046387811016629e-02, -1.245710047099158e-02, -1.093441944672303e-01, -1.383033377694745e-02, -6.223604865211319e-02, -3.729748729354676e-02, -3.729748729354676e-02, -1.068744236425171e-02, -1.210398039047539e-02, -9.263006789916249e-03, -1.105134083337933e-02, -1.140293993493515e-02, -1.140293993493693e-02, -5.257947607778413e-02, -6.039261568055812e-02, -5.730555276688637e-02, -5.504253250768318e-02, -5.613959037403798e-02, -5.613959037403790e-02, -5.026311097597512e-02, -4.960286345648224e-02, -5.387100562027414e-02, -6.527664398281330e-02, -5.980369220098025e-02, -5.980369220097981e-02, -5.197313483009430e-02, -1.249910328404501e-01, -9.543957281112769e-02, -2.853594042488805e-02, -5.505183689608195e-02, -5.505183689608295e-02, -3.527302956278389e-02, -3.179734188692319e-02, -2.206235184473927e-02, -2.902518818049538e-02, -1.063222234423669e-02, -1.063222234423966e-02, -2.159029338115583e-02, -4.236515088277164e-03, -6.797071322020505e-03, -9.830063496454045e-03, -1.002954923958629e-02, -1.002954923958773e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.777000217802774e-10, -2.777088430755403e-10, -2.777643223405826e-10, -2.776222893835736e-10, -2.777045039281690e-10, -2.777045039281690e-10, 1.270695706307710e-06, 1.270647001067336e-06, 1.267686045907239e-06, 1.250224422153509e-06, 1.270770505595929e-06, 1.270770505595929e-06, 3.894233850258948e-03, 3.908093863339762e-03, 4.386855905867381e-03, 3.879697302744658e-03, 3.898814675175777e-03, 3.898814675175777e-03, 1.182643895951194e+00, 1.107876576817030e+00, 2.660923027256366e-03, 1.869350901236788e+00, 1.159215205558767e+00, 1.159215205558767e+00, 2.139235605958108e+03, 1.917725671617384e+03, 3.546990956441306e+01, 6.498817379204036e+03, 2.008308190947953e+03, 2.008308190947952e+03, -4.522257697177621e-07, -4.567655469069342e-07, -4.527757286798182e-07, -4.562999805621514e-07, -4.544245032223065e-07, -4.544245032223065e-07, 1.230115818787313e-05, 1.148351316265745e-05, 1.328843030970543e-05, 1.265419197343272e-05, 1.051842738489093e-05, 1.051842738489093e-05, 2.630700427993889e-03, 3.178630484423929e-03, 6.174494410080758e-03, 1.057939949148228e-02, 1.468653543237085e-03, 1.468653543237085e-03, 2.642259038304535e+00, 8.418567873220985e-01, 2.981324211931629e+00, 3.714337629283367e-05, 2.756282650818659e+00, 2.756282650818659e+00, 8.693564146309682e+03, 5.895983693557783e+03, 2.195181777913153e+04, 8.874816439395348e+00, 8.012908450548281e+03, 8.012908450548573e+03, -7.100135096822290e-02, -3.154336688587167e-02, -4.134331009185756e-02, -5.180246226518193e-02, -4.618946935453253e-02, -4.618946935453253e-02, -4.019882917968433e-02, -1.198013306054427e-03, -5.625092570247954e-03, -8.284344260264155e-03, -6.674338945232628e-03, -6.674338945232731e-03, 4.120770949465611e-03, 4.073436951706333e-01, 1.796745054773890e-01, 2.551802440508653e-02, 7.271178160200570e-02, 7.271178160200621e-02, 3.813456388190450e-03, 4.469025575045038e+01, 1.637426734187193e+01, 3.407710082685756e-02, 6.079222044403501e+00, 6.079222044403409e+00, 9.168530704073642e+02, 1.006688351622600e+05, 3.600481697774793e+04, 7.324109846819905e+00, 1.354679643809780e+04, 1.354679643809658e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.534976896731583e-05, 8.535270163999409e-05, 8.537018761669866e-05, 8.532279695623788e-05, 8.535126952089414e-05, 8.535126952089414e-05, -6.039910770712754e-04, -6.038309459903232e-04, -5.986648563327573e-04, -5.964798207707268e-04, -6.039679455004481e-04, -6.039679455004481e-04, -1.474827388151957e-02, -1.471746106000740e-02, -1.339447393480374e-02, -1.279619717023821e-02, -1.473667896380944e-02, -1.473667896380944e-02, -6.716590214777754e-02, -6.570868507782898e-02, -1.407150769412532e-02, -3.249417416984996e-02, -6.660177980608736e-02, -6.660177980608736e-02, -3.543592541631019e-02, -3.634558040868290e-02, -4.530067371847019e-02, -8.372707926300200e-03, -3.700760028724349e-02, -3.700760028724345e-02, 1.860992317684327e-03, 1.877030802860198e-03, 1.862985385384466e-03, 1.875434784495719e-03, 1.868703719948467e-03, 1.868703719948467e-03, -9.973005491160094e-04, -9.066198512085867e-04, -1.048884905294251e-03, -9.812652924697672e-04, -8.695040238051829e-04, -8.695040238051829e-04, -3.356398824237253e-04, -2.354923475197490e-03, -9.253516048971518e-03, -1.063863548349413e-02, 5.370009232904992e-03, 5.370009232904992e-03, -3.670133580084337e-02, -5.073236228285117e-02, -3.877614599518978e-02, -1.705773169143014e-03, -4.725568215303576e-02, -4.725568215303576e-02, -1.204379818155393e-02, -1.109237739298899e-02, -2.035721632268782e-02, -3.170271867982470e-02, -1.042113630503471e-02, -1.042113630503471e-02, 1.550121646135284e-01, 1.198606905799069e-01, 1.365000593453584e-01, 1.491954211313866e-01, 1.430309597649741e-01, 1.430309597649741e-01, 4.674822708135433e-02, 1.177368625605730e-02, 2.857336607607691e-02, 4.633276780474890e-02, 3.631123204491379e-02, 3.631123204491377e-02, -6.136572943551774e-03, -4.886708377021375e-02, -3.680377502051086e-02, -1.978149895579012e-02, -2.610717203411787e-02, -2.610717203411775e-02, -4.932365222274130e-03, -4.629766203197126e-02, -4.245514150148235e-02, -1.887703261070819e-02, -4.866257104214341e-02, -4.866257104214360e-02, -1.780617394860737e-02, -3.109510714458333e-03, -1.152073981213617e-02, -5.059525035830030e-02, -1.060669373158802e-02, -1.060669373158805e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
