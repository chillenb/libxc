
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.312831875128619e-01, -1.312823410238358e-01, -1.312786911327148e-01, -1.312924575335233e-01, -1.312827412417268e-01, -1.312827412417268e-01, -1.293988086158624e-01, -1.293854701670583e-01, -1.289864062204523e-01, -1.291434022009405e-01, -1.293952658660897e-01, -4.649332070026957e-02, -1.142987785446400e-01, -8.981674531841621e-03, -3.059211541874607e-03, -5.738018790017563e-03, -9.124047904426558e-03, -9.124047904426558e-03, -1.435857544738517e-03, -2.628241893067429e-03, -1.517710780255307e-01, 2.015636067953874e-02, -1.779116700149408e-03, -1.779116700149408e-03, -1.339675895979360e-04, -1.257154081744943e-04, 3.369162162501840e-03, -1.344914828586324e-04, -1.243592228368001e-04, -1.243592228362533e-04, -9.684444846723606e-02, -9.712773298148059e-02, -9.687571160767272e-02, -9.026958996502418e-02, -9.698643036475463e-02, -9.698643036475463e-02, -1.219931910302210e-01, -1.199177906100921e-01, -1.229420374211380e-01, -1.212547240887230e-01, -1.193798693334067e-01, -3.618507439113317e-02, -3.306901027563425e-02, -4.476892909495933e-02, -2.901152830510956e-02, -3.527009950871030e-02, -3.650164137116541e-02, -5.893074489665678e-02, -1.085146417633633e-01, 1.267699382248599e-02, -1.069049510141511e-01, -5.345724798586748e-02, 1.884884106908449e-02, 1.884884106908449e-02, -6.252204057045865e-03, -1.427606387168485e-04, -1.085221210040709e-04, -8.190667759426760e-02, -6.494522070582144e-03, -1.323665690580071e-04, -7.173729993518882e-02, -6.373662879847397e-02, -4.311398144441631e-02, -6.864210703558321e-02, -6.751841846383941e-02, -6.751841846383941e-02, -6.791678577887675e-02, -3.038403958846814e-02, -3.643506063292345e-02, -4.501898898457024e-02, -4.016846835570498e-02, -5.162888419832025e-02, -4.169764018717159e-02, -8.554157711324428e-02, -8.030603878567466e-03, -6.571553363299779e-02, -1.535417174897025e-02, -1.535417174896936e-02, -6.530683240716159e-02, 2.592050041938878e-03, 5.603050706210484e-03, -2.202030185250969e-02, -9.844550664111787e-02, 1.349409105011598e-02, -1.762386513309704e-04, -4.701713611751665e-05, -8.345304220776046e-05, 1.309503293561687e-02, -1.157684966436595e-04, -1.157684966438772e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.335936098842225e-02, -8.335985668088833e-02, -8.336204838389114e-02, -8.335397927509736e-02, -8.335962195066859e-02, -8.335962195066859e-02, -4.368928679041625e-02, -4.369342808311055e-02, -4.381838666301893e-02, -4.377058249133922e-02, -4.369047257769870e-02, -1.308880026368100e-01, -2.669280746918545e-02, -1.806570628307569e-01, -1.934965897532210e-01, -1.882088428703650e-01, -1.802633314162543e-01, -1.802633314162543e-01, -1.142555283965001e-01, -1.126978693654764e-01, -3.424500315198714e-02, -4.992677088496988e-02, -1.138618120758551e-01, -1.138618120758551e-01, -1.829499124110267e-02, -1.888244832674478e-02, -3.282086406036860e-02, -1.056542677212389e-02, -1.873206875069363e-02, -1.873206875069851e-02, -1.214938445817358e-01, -1.216028205710804e-01, -1.215060316925681e-01, -6.906470775862669e-02, -1.215489346645159e-01, -1.215489346645159e-01, -3.620543568335197e-02, -3.680334686922901e-02, -3.594843494866520e-02, -3.641660464127391e-02, -3.695722461100956e-02, -1.364041936490112e-01, -5.643506864484371e-02, -6.329352637347652e-02, -6.286513538533867e-02, -5.542598973493917e-02, -5.647634710644844e-02, -3.549653209039590e-02, -1.029937618053219e-01, -1.114458596619053e-01, -9.798750208320030e-02, -8.030044379892831e-02, -3.975879200645838e-02, -3.975879200645838e-02, -8.326719945945511e-03, -1.142028662090545e-02, -9.002742810009992e-03, -1.179455514661738e-01, -8.662827901291725e-03, -1.059120536862682e-02, -5.806080342299039e-02, -6.554888611000270e-02, -4.256153059831661e-02, -6.134283374076688e-02, -6.243974698780932e-02, -6.243974698780932e-02, -6.069060413071378e-02, -5.483909196750680e-02, -5.472988381585364e-02, -6.245231968811671e-02, -5.801090005267651e-02, -3.626735586048944e-02, -6.081410158368616e-02, -2.235646365747276e-02, -1.213828780190164e-01, -2.445794210874946e-02, -9.567625058417528e-02, -9.567625058417495e-02, -2.828589632996542e-02, -3.390172098148158e-02, -3.086744966628938e-02, -5.971019318083515e-02, -1.030996457053508e-01, -2.143810622467479e-02, -2.073620981552838e-02, -3.803425747465240e-03, -6.644976939928653e-03, -2.093709287387049e-02, -9.269929366732280e-03, -9.269929366733379e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.066293140633761e-09, 2.066256954770914e-09, 2.066078857289810e-09, 2.066670488191273e-09, 2.066274212693579e-09, 2.066274212693579e-09, 1.175674465251873e-05, 1.175741497897460e-05, 1.177542689572635e-05, 1.176403729529449e-05, 1.175666594598894e-05, 7.382493610310940e-07, 1.459881607788543e-02, 3.578655451879553e-03, 3.943521710630976e-03, 3.866980727227006e-03, 3.568703531650460e-03, 3.568703531650460e-03, 1.301650713905369e+00, 1.243742200496835e+00, 9.057508575771093e-04, 1.759683396747260e+00, 1.284109447202670e+00, 1.284109447202670e+00, 2.141917542290510e+03, 1.921076972147721e+03, 3.950953428937391e+01, 6.523931470260713e+03, 2.011341411706005e+03, 2.011341411706049e+03, -4.561283268034927e-07, -4.606533595128349e-07, -4.566273318579831e-07, 1.569958147791161e-06, -4.583864087124407e-07, -4.583864087124407e-07, 1.643246903524360e-04, 1.618697978156750e-04, 1.651443364570215e-04, 1.633576529140468e-04, 1.615144517259415e-04, 1.518363313272120e-05, -1.075830014168274e-03, -5.273105803315665e-03, 1.892444369182167e-03, -2.824236309759882e-03, -2.596477190367477e-03, 4.682187472943890e-02, -6.037046688138960e+02, 8.734014948994914e-01, -6.141472346919384e+02, -1.266045785086878e-05, 3.196299361427332e+00, 3.196299361427332e+00, -3.846259357276540e+08, 5.918784428299060e+03, 2.198753681162843e+04, -7.319711111762812e+03, -3.260008746193368e+08, 8.052524932332035e+03, -8.180032856314617e-02, -3.372831622159891e-02, 8.873320865189927e-03, -5.595098386844969e-02, -4.939977910787206e-02, -4.939977910787206e-02, -6.477195051966578e-02, -6.452440244863237e-04, -6.724270546283085e-03, -1.253555737295176e-02, -9.342192063500494e-03, 7.886248437258715e-02, -2.997418219587147e-03, 7.599020347194675e-01, 2.110900562712799e-01, 4.823052498995071e-01, 1.073361381566243e-01, 1.073361381566248e-01, 1.624626933184694e-01, 4.694857716298059e+01, 1.975210492019727e+01, 3.920912071906597e-02, -1.669370425266567e+03, 8.040869918938675e+00, 9.390598791192762e+02, 1.007260930425090e+05, 3.601925362091910e+04, 9.887224220590987e+00, 1.360714972265727e+04, 1.360714972265657e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.276452060842554e-05, -3.276442387320771e-05, -3.276388236506645e-05, -3.276547343726775e-05, -3.276447045093547e-05, -3.276447045093547e-05, -7.297202035156403e-04, -7.297445224739519e-04, -7.304288280082223e-04, -7.300637820988265e-04, -7.297209704486975e-04, -1.824596730684407e-04, -9.515133941858099e-03, -1.094195419717747e-02, -1.114723859405476e-02, -1.117344536910904e-02, -1.093261187256305e-02, -1.093261187256305e-02, -8.158107380911897e-02, -8.099280655746548e-02, -5.906201065370769e-03, -5.936538422352249e-02, -8.141199368462530e-02, -8.141199368462530e-02, -3.618691562967030e-02, -3.732653135829588e-02, -5.534042546065390e-02, -1.208834484248545e-02, -3.787144176431184e-02, -3.787144176431186e-02, 1.878853882377969e-03, 1.894926936656073e-03, 1.880625409310794e-03, -4.086253581508239e-04, 1.886887696103407e-03, 1.886887696103407e-03, -1.876772093061324e-03, -1.869302290105657e-03, -1.879068347762086e-03, -1.873698682984968e-03, -1.868566505316579e-03, -1.031458007533859e-03, 1.350005511542881e-02, 4.228551617583101e-02, 2.997417572593370e-03, 2.156448669301046e-02, 2.181936578823998e-02, -1.455384143375270e-02, -1.492444303384420e-02, -6.053915797421509e-02, -1.820378106850130e-02, 3.308652356268628e-03, -6.926340649880204e-02, -6.926340649880204e-02, 1.837777907989560e-04, -1.470156688522506e-02, -2.299758641364271e-02, 1.226286026447300e-02, 2.092312905156567e-04, -1.512826846570989e-02, 3.450558749967815e-01, 1.674045977869045e-01, -1.573296178472113e-02, 2.512137486049488e-01, 2.269615881377997e-01, 2.269615881377997e-01, 2.650452336439798e-01, 1.287987290941091e-02, 3.433514826981233e-02, 6.386440803083297e-02, 4.699163149204728e-02, -1.794556778513193e-02, 2.898324294759861e-02, -4.478993890288403e-02, -4.492700041536789e-02, -3.089217521393216e-02, -3.227764132083413e-02, -3.227764132083423e-02, -2.150561830392153e-02, -5.164593280719579e-02, -5.589784366564397e-02, -6.527892382640587e-03, -1.060795274479587e-02, -7.056716106401656e-02, -2.551495014082399e-02, -5.127920240152358e-03, -1.257553930898925e-02, -7.534297178782209e-02, -1.568895957808585e-02, -1.568895957808590e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
