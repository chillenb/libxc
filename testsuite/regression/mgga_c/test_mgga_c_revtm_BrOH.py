
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.457612150066249e-02, -3.457646400728822e-02, -3.457634393750667e-02, -3.457068137090084e-02, -3.457631702807277e-02, -3.457631702807277e-02, -3.902490611866442e-02, -3.902828909934034e-02, -3.911803073574991e-02, -3.891217809120261e-02, -3.902695109717807e-02, -3.902695109717807e-02, -2.586515434133569e-02, -2.564590740269670e-02, -2.000733195743797e-02, -2.016863139915935e-02, -2.578593095431692e-02, -2.578593095431692e-02, -8.715238797733268e-03, -9.336672782487230e-03, -3.342323132729075e-02, -2.956119789214785e-03, -8.911697857121760e-03, -8.911697857121760e-03, -2.872745203608011e-07, -3.537101870974655e-07, -5.557641517662567e-05, -8.225922856329920e-09, -3.505715389113484e-07, -3.505715389113484e-07, -3.551478149373850e-02, -3.559650575386267e-02, -3.551937591815890e-02, -3.558310555955626e-02, -3.556174853750035e-02, -3.556174853750035e-02, -1.695031958065180e-02, -1.713051947495168e-02, -1.638779907266025e-02, -1.652139451618562e-02, -1.783265982981698e-02, -1.783265982981698e-02, -3.471173013506579e-02, -5.475997824821537e-02, -3.515823441429682e-02, -4.994979509080694e-02, -3.593711493695323e-02, -3.593711493695323e-02, -8.431549890115461e-04, -4.491670442843304e-03, -9.278530451015552e-04, -7.105994370302950e-02, -1.711596978265091e-03, -1.711596978265091e-03, -7.135365046648396e-09, -1.341710962510297e-08, -9.893194941139104e-09, -2.199660085909506e-04, -1.319703208047023e-08, -1.319703208047023e-08, -5.382603432224056e-02, -4.088092578807956e-02, -4.413250409241955e-02, -4.752740360533207e-02, -4.571481935251457e-02, -4.571481935251456e-02, -5.998248444700418e-02, -2.138507200059923e-02, -2.606542833867633e-02, -3.228779141266312e-02, -2.899887805371681e-02, -2.899887805371682e-02, -5.523064093241149e-02, -7.061824021517164e-03, -1.118981934311384e-02, -2.241396347614372e-02, -1.595025513991111e-02, -1.595025513991111e-02, -2.349906708908782e-02, -3.375248242171076e-05, -1.183069434557908e-04, -2.702276991892184e-02, -6.179166836219483e-04, -6.179166836219484e-04, -4.658322846537336e-07, -5.772720819613287e-11, -9.311151253047736e-10, -6.341976016232362e-04, -9.188927701410477e-09, -9.188927705664686e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.052444071342003e-01, -1.052452156484851e-01, -1.052458538630216e-01, -1.052325377762760e-01, -1.052448600941374e-01, -1.052448600941374e-01, -1.055859477809405e-01, -1.055903220812877e-01, -1.057059584090912e-01, -1.054330763922309e-01, -1.055886647496736e-01, -1.055886647496736e-01, -7.555085461088630e-02, -7.525406352134474e-02, -6.628778364420337e-02, -6.656468840775669e-02, -7.544389588894992e-02, -7.544389588894992e-02, -3.435906744938014e-02, -3.592016804447731e-02, -8.627603444923669e-02, -1.487821996800621e-02, -3.486199727680709e-02, -3.486199727680709e-02, -1.945428779352667e-06, -2.390995349948108e-06, -3.522286181074001e-04, -5.495619158752871e-08, -2.371193414807476e-06, -2.371193414807476e-06, -1.070049445872452e-01, -1.072159255244421e-01, -1.070213665572461e-01, -1.071856658367081e-01, -1.071199397092490e-01, -1.071199397092490e-01, -6.318027635347524e-02, -6.356227619164551e-02, -6.179088791626758e-02, -6.207809927092256e-02, -6.526579186038189e-02, -6.526579186038189e-02, -8.009480989989452e-02, -8.300828978165604e-02, -7.982883819649622e-02, -8.198604506605621e-02, -8.132490762981170e-02, -8.132490762981170e-02, -4.833350423733245e-03, -2.146085146679204e-02, -5.280539180875698e-03, -1.178182206882470e-01, -9.264450419395888e-03, -9.264450419395888e-03, -4.829201837198348e-08, -8.996834638420591e-08, -6.748525406294711e-08, -1.332910221400333e-03, -8.812227244100411e-08, -8.812227244286428e-08, -8.113311937294829e-02, -8.471413800960764e-02, -8.482657018824669e-02, -8.414575298316065e-02, -8.460174823724498e-02, -8.460174823724496e-02, -7.501782199966489e-02, -6.366827328900702e-02, -7.036046212847405e-02, -7.731879831214067e-02, -7.391520037774106e-02, -7.391520037774109e-02, -8.473724479106338e-02, -3.062869821519082e-02, -4.219642920592636e-02, -6.250031047166091e-02, -5.221902281721320e-02, -5.221902281721320e-02, -6.632392261946038e-02, -2.166121808316145e-04, -7.359935928894295e-04, -6.544642460546660e-02, -3.609992077480204e-03, -3.609992077480220e-03, -3.063548188189530e-06, -3.880933948855133e-10, -6.409938591074409e-09, -3.693979519404505e-03, -6.142949126302532e-08, -6.142949126753682e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.121094563944816e-10, 3.121178639332959e-10, 3.121408293166727e-10, 3.120039178099126e-10, 3.121140060479757e-10, 3.121140060479757e-10, 1.209193999054285e-06, 1.209437891235758e-06, 1.216087682980014e-06, 1.205916173291473e-06, 1.209279290343358e-06, 1.209279290343358e-06, 1.793513772009044e-03, 1.779736644076710e-03, 1.409120002965019e-03, 1.391728429593403e-03, 1.788602925688337e-03, 1.788602925688337e-03, 2.448051162398322e-01, 2.545072361924978e-01, 1.025267683972081e-03, 1.922242155234877e-01, 2.480028980392046e-01, 2.480028980392046e-01, 7.943677427478039e-02, 8.502310961048840e-02, 1.264550352006727e-01, 1.608883873670833e-02, 8.874660632262910e-02, 8.874660632262910e-02, 5.756959343365126e-07, 5.815701107316175e-07, 5.763038754933183e-07, 5.808695291609762e-07, 5.786826200809340e-07, 5.786826200809340e-07, 6.873506044732433e-06, 6.910142651326638e-06, 6.635312562991920e-06, 6.664248801674542e-06, 7.220834895232216e-06, 7.220834895232216e-06, 8.938639371615867e-03, 1.136620436174619e-02, 9.632522556200316e-03, 1.292954725572409e-02, 9.032094719832819e-03, 9.032094719832819e-03, 1.376011026348528e-01, 8.286534172059830e-02, 1.692815269311414e-01, 6.739331635077935e-05, 2.004153262104665e-01, 2.004153262104665e-01, 1.662540462093605e-02, 2.049202836137132e-02, 6.332996990261847e-02, 1.817149852751639e-01, 3.188318044111484e-02, 3.188318044041021e-02, 8.150780097457039e-02, 5.238291807267692e-02, 6.236697351784354e-02, 7.147180511348863e-02, 6.680063293189897e-02, 6.680063293189899e-02, 4.265033787760940e-02, 1.201732249116544e-02, 1.673167082934458e-02, 2.550217650509193e-02, 2.026243694760882e-02, 2.026243694760883e-02, 8.184644502689489e-03, 5.687888609708507e-02, 5.005268455576722e-02, 4.357580158108044e-02, 4.886973125415080e-02, 4.886973125415079e-02, 1.581070530095954e-02, 8.957285752575532e-02, 1.264458886249689e-01, 7.882137866309508e-02, 2.429023369784531e-01, 2.429023369784538e-01, 6.416582736792897e-02, 5.483837388587532e-03, 1.303652697345435e-02, 3.170049165811122e-01, 4.362741900627197e-02, 4.362741901174518e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.087177059581717e-05, -3.087313930355564e-05, -3.087980853418469e-05, -3.085760556386857e-05, -3.087248489583572e-05, -3.087248489583572e-05, -6.943184933562691e-05, -6.946827121253760e-05, -7.060239484363066e-05, -7.063714503830062e-05, -6.943819123513823e-05, -6.943819123513823e-05, -3.238551606920606e-04, -3.224706321567557e-04, -2.832464896452700e-04, -3.365980158654119e-04, -3.234390951089341e-04, -3.234390951089341e-04, -6.268806121149917e-03, -6.795986676478562e-03, -4.514375894824562e-05, -4.588855153874272e-04, -6.408136477225571e-03, -6.408136477225571e-03, -1.860924790141126e-07, -2.242313073366254e-07, -1.451733315374614e-05, -1.591687455511730e-09, -2.294161108014194e-07, -2.294161108014191e-07, -1.024379035535328e-03, -1.036963356862444e-03, -1.025824734970936e-03, -1.035599078757697e-03, -1.030580813766238e-03, -1.030580813766238e-03, -2.533251462745277e-04, -2.772611758347836e-04, -2.459591245360295e-04, -2.644962580318217e-04, -2.796470852023670e-04, -2.796470852023670e-04, -7.558242586961246e-03, -4.648339081655787e-03, -4.243038767307248e-03, -2.890603349415674e-03, -1.040144441795283e-02, -1.040144441795283e-02, -1.649792299845027e-04, -1.552273369829815e-03, -1.987394643219244e-04, -1.794237553173365e-04, -5.007084010838666e-04, -5.007084010838666e-04, -2.554841150036167e-09, -3.478556556188459e-09, -7.510438508398269e-09, -3.163939788668030e-05, -3.149696453751373e-09, -3.149696453751367e-09, -1.213888057361586e-01, -1.190902696162162e-01, -1.319755223551168e-01, -1.375157821613585e-01, -1.355903257714780e-01, -1.355903257714780e-01, -2.224411484705724e-02, -1.488566739913751e-02, -2.542651621222094e-02, -4.327888380749393e-02, -3.254687681716487e-02, -3.254687681716487e-02, -2.704524501192962e-03, -2.898260334756045e-03, -4.563891702468331e-03, -7.154574166249139e-03, -6.911004429872913e-03, -6.911004429872895e-03, -8.072537680711998e-03, -9.715558146376090e-06, -2.614560182398790e-05, -1.060064588187981e-02, -1.716498231698187e-04, -1.716498231698186e-04, -8.880386021277449e-08, -1.113515782910434e-11, -5.917286762114391e-10, -1.886562803385912e-04, -2.541213224121622e-09, -2.541213222916950e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
