
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645987698516514e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -1.673749658803458e-02, -6.686302819127442e-02, -8.274449920439537e-03, -6.980768026046122e-03, -7.539300305593351e-03, -8.308895163911948e-03, -8.308895163911948e-03, -7.264204841622710e-03, -7.618766091353351e-03, -7.129454252820250e-02, -1.474703911452315e-03, -7.364868386179420e-03, -7.364868386179420e-03, -2.740528668726671e-07, -3.332762032860100e-07, -4.072698756101464e-05, -3.606734604728618e-09, -3.329420655124810e-07, -3.329420655124810e-07, -3.516435983281833e-02, -3.524641315136334e-02, -3.517342606810546e-02, -1.224181159734425e-01, -3.520549449230968e-02, -3.520549449230968e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572412e-02, -9.491339721119328e-02, -1.473261543851692e-02, -2.078355354129141e-02, -2.557368749960349e-02, -1.835590033642969e-02, -2.203899208181483e-02, -2.249145989648862e-02, -6.444458984389427e-02, -2.795790560897061e-02, -3.881329522340957e-03, -2.775589238622643e-02, -2.506239908949527e-02, -1.252897964363316e-03, -1.252897964363316e-03, -3.066310498112501e-03, -7.100384235885159e-09, -7.456285839700172e-09, -2.111687625325582e-02, -3.174878197427740e-03, -5.725330976906850e-09, -2.971675250240180e-02, -2.898551331859983e-02, -6.421258200260356e-02, -2.947537919984227e-02, -2.937488462420202e-02, -2.937488462420202e-02, -2.920281482923373e-02, -1.980049903768662e-02, -2.279126177177062e-02, -2.552431506786580e-02, -2.413976781962217e-02, -6.165502636499921e-02, -2.449368805560543e-02, -4.342835275928391e-02, -9.132513907445024e-03, -5.212060951466563e-02, -1.197025581837990e-02, -1.197025581837991e-02, -5.782933926396749e-02, -2.816658469814524e-05, -8.108253055872175e-05, -1.595977950301769e-02, -2.479856847389609e-02, -4.318970490492608e-04, -2.142166633252443e-07, -1.866959556998494e-11, -7.572118722424924e-10, -4.317995264634869e-04, -3.818602355429525e-09, -3.818602360151922e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747363821491129e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -6.333247831994218e-02, -7.491623656166166e-02, -3.679675612830606e-02, -3.235994459446070e-02, -3.087054551030325e-02, -3.690989993686346e-02, -3.690989993686346e-02, -3.041484080435463e-02, -3.142236705696662e-02, -7.955565354779474e-02, -8.224110168084308e-03, -3.070492472214989e-02, -3.070492472214989e-02, -1.860462876127574e-06, -2.259822194132268e-06, -2.624419947418711e-04, -2.488495673430741e-08, -2.258007687800650e-06, -2.258007687797200e-06, -1.064599216958423e-01, -1.066729829081817e-01, -1.064834407936181e-01, -1.321322029122264e-01, -1.065666862881284e-01, -1.065666862881284e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -5.734473281039058e-02, -6.392424597051131e-02, -7.276260423645917e-02, -5.956187025242653e-02, -6.582674728456411e-02, -6.699969343931042e-02, -7.237723572555273e-02, -3.318915835573125e-02, -1.914223690399310e-02, -3.296452513148780e-02, -7.963694466112395e-02, -7.066834662564689e-03, -7.066834662564689e-03, -3.946287688264066e-03, -4.623105783873652e-08, -5.159464134586855e-08, -2.549362941948338e-02, -4.083422991717209e-03, -3.949468095525822e-08, -8.644417932726667e-02, -8.192394060407251e-02, -7.213338981778680e-02, -3.489036872320241e-02, -8.398408672746839e-02, -8.398408672746839e-02, -8.386358786819216e-02, -6.110137146755826e-02, -6.618289551423914e-02, -7.151408885282956e-02, -6.866456731313206e-02, -6.944209849581726e-02, -7.121201839792486e-02, -5.006348929577377e-02, -3.693115568785543e-02, -5.935291128433449e-02, -3.639589246994676e-02, -4.405097346762819e-02, -6.540488546969517e-02, -1.825137490702645e-04, -5.155422732536676e-04, -3.868675662497686e-02, -2.965891225314009e-02, -2.604632693002641e-03, -1.450320635242264e-06, -1.310903059026931e-10, -5.271313455907362e-09, -2.603148355231835e-03, -2.641487288068092e-08, -2.641487288152507e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.147718495638534e-09, 8.147639422954951e-09, 8.147228442600387e-09, 8.148524493556326e-09, 8.147677282150960e-09, 8.147677282150960e-09, 1.149307014000050e-05, 1.149297391480334e-05, 1.148844275177404e-05, 1.148653493924161e-05, 1.149282533484084e-05, 4.574999661080191e-07, 8.167119208549975e-03, 4.379512192780902e-04, 3.768204843116804e-04, 2.960924219027309e-04, 4.396238821772024e-04, 4.396238821772024e-04, 2.012974995479154e-01, 2.050171971607749e-01, 3.990104051789617e-03, 7.762141274391933e-02, 2.021764429440234e-01, 2.021764429440234e-01, 7.478042454386775e-02, 7.876795885930275e-02, 8.377038110413586e-02, 5.378920435141967e-03, 8.306116222347178e-02, 8.306116222356547e-02, 5.725103274858861e-07, 5.783745914241309e-07, 5.731573939294339e-07, 2.297458926478586e-06, 5.754375976145362e-07, 5.754375976145362e-07, 1.141371680434514e-04, 1.109905480717616e-04, 1.154407957542619e-04, 1.129404200233150e-04, 1.103733960085537e-04, 5.896323758226082e-06, 6.312436467776654e-03, 1.000258464867668e-02, 5.642841799868774e-03, 8.271394084212791e-03, 6.919561484103061e-03, 1.216484705514294e-02, 1.512059771589781e+01, 6.958108709833313e-02, 1.589301173696347e+01, 2.492914661950540e-05, 1.343828979861439e-01, 1.343828979861439e-01, 2.012797916043335e+06, 7.457856967875459e-03, 4.406672835486149e-02, 9.428922567569576e+01, 1.714516686642245e+06, 1.050358120232413e-02, 1.162695897986490e-01, 5.416624827035215e-02, 1.264260127689440e-02, 1.489409949388964e-03, 7.462665289881151e-02, 7.462665289881151e-02, 9.635244575915705e-02, 1.139626367418803e-02, 1.563361334405855e-02, 2.390568219973398e-02, 1.882525529225158e-02, 1.940185850767850e-02, 6.058326247122170e-03, 5.247704952216742e-01, 4.036464088681187e-02, 1.024286894131023e-01, 2.004059206624404e-02, 3.695505196665382e-02, 3.731481733522451e-02, 7.060602214401958e-02, 7.652332903205332e-02, 2.042735856480671e-02, 3.383688969889253e+01, 1.518274254574322e-01, 2.262319689872577e-02, 1.223746284525877e-03, 1.003181137469963e-02, 1.913903343140416e-01, 1.357513602817179e-02, 1.357513602877381e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.766526589818295e-29, -7.852154488836670e-99, -7.853166043308722e-99, -7.848393060512236e-99, -7.852016364111010e-99, -7.852016364111010e-99, -3.206627864322020e-86, -3.208727398350207e-86, -3.270497177735321e-86, -3.241830224484862e-86, -3.206939932627764e-86, -1.371575685991702e-04, -1.491652859131824e-74, -6.105828596669041e-04, -4.367738921012064e-04, 0.000000000000000e+00, -6.157635595138882e-04, -6.157635595138882e-04, -6.630028335751608e-03, -7.270823657073214e-03, -1.827082830198984e-76, -4.913315875962090e-04, -6.804969145342982e-03, -6.804969145342982e-03, -1.861082735197350e-07, -2.242574449025478e-07, -1.458391591926630e-05, -1.592145679148621e-09, -2.294393291047760e-07, -2.294393291047759e-07, -1.029190901955445e-03, -1.041816104533328e-03, -1.030579715026073e-03, -1.603666411852823e-42, -1.035496455865728e-03, -1.035496455865728e-03, -5.963240376539271e-37, -4.536021795158337e-82, -4.539011723546068e-82, -4.534041813853736e-82, -4.564593017940041e-82, -2.989380567777413e-04, -1.347268115762744e-02, -3.334648853827322e-02, -9.129011126948340e-03, -1.828889596629453e-02, -1.782208066131620e-02, -6.326992811050325e-72, -1.786646990889942e-62, -1.584782808014517e-03, -2.634046555911823e-62, -1.866417202787927e-03, -5.124111367474015e-04, -5.124111367474015e-04, -3.793530753301394e-47, 0.000000000000000e+00, -7.511427360610568e-09, -4.342582427913345e-60, -2.485564119386323e-47, -3.150855567335542e-09, -3.919481664303495e-01, -1.757298641364405e-01, -1.422636193948711e-69, 0.000000000000000e+00, -2.470080149460996e-01, -2.470080149460996e-01, -2.926250778320973e-01, -1.561667035408742e-02, -2.815555752447622e-02, -5.399144341579059e-02, -3.800979426417068e-02, -1.304139700413381e-70, -2.196911912081995e-02, -7.930640694753531e-67, -4.894060522590963e-03, -7.215442137413963e-69, 0.000000000000000e+00, -8.013791095579799e-03, -1.675773668208458e-70, -9.736658058079612e-06, -2.634366987097793e-05, 0.000000000000000e+00, -4.348481752402230e-61, -1.743524252285577e-04, -8.893159696192742e-08, -1.113574716705053e-11, -5.917495270635435e-10, -1.919398793787656e-04, -2.542086253980828e-09, -2.542086251169642e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
