
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.200618888083362e-01, -1.200589193218193e-01, -1.200469534559662e-01, -1.200909066142276e-01, -1.200677032415555e-01, -1.200677032415555e-01, -1.134797040597225e-01, -1.134713673106146e-01, -1.132571361642167e-01, -1.133452083282100e-01, -1.133326363037402e-01, -2.371802879882113e-02, -9.209223637240523e-02, -1.803193185092863e-02, -1.729958772573359e-02, -1.762844830299919e-02, -1.755334322288807e-02, -1.755334322288807e-02, -1.240828155136305e-02, -1.263709055255033e-02, -1.121249588651995e-01, -8.856433393133805e-03, -1.027827895133108e-02, -1.027827895133108e-02, -2.622768682108544e-04, -2.830755379595573e-04, -2.294939528059269e-03, -1.162270212539793e-04, -1.676609059851105e-04, -1.676609059851105e-04, -2.787412486044615e-02, -2.788443546772879e-02, -2.787471818510262e-02, -6.984510897987269e-02, -2.787929448275436e-02, -2.787929448275436e-02, -1.054210029393620e-01, -1.035581769017833e-01, -1.069770961051672e-01, -1.052096017095855e-01, -1.036524526498541e-01, -2.242131353137446e-02, -2.247865747117813e-02, -2.400886072361107e-02, -2.118766224899590e-02, -2.239715123433094e-02, -2.278935121593750e-02, -6.375628594144359e-02, -4.286175037565080e-02, -1.089853061738217e-02, -4.098518283678706e-02, -2.541333106003399e-02, -7.645524168589440e-03, -7.645524168589438e-03, -3.168014201793171e-03, -1.107952505407411e-04, -9.786194994288136e-05, -3.217843949080020e-02, -3.618876732470934e-03, -1.135029016114814e-04, -2.488829270096199e-02, -2.459817249989320e-02, -3.206932512618853e-02, -2.478514720540045e-02, -2.474293356937698e-02, -2.474293356937698e-02, -2.475432388521430e-02, -2.132906240509396e-02, -2.247409509510868e-02, -2.349891771475223e-02, -2.299141344986801e-02, -5.438335576374717e-02, -2.383861477293719e-02, -6.232266369470329e-02, -1.497952993885319e-02, -5.705514964043087e-02, -1.686577679786447e-02, -1.686577679786447e-02, -5.841113610666271e-02, -2.186892425317924e-03, -3.043051732216592e-03, -1.932157108002207e-02, -3.723554958734547e-02, -5.269573024092428e-03, -3.838872412249770e-04, -1.661268526533297e-05, -5.625914932149895e-05, -5.000276311490524e-03, -1.061248259155842e-04, -1.061248259157572e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.584940261805914e-02, 3.584883310010827e-02, 3.584655763950698e-02, 3.585496745493268e-02, 3.585053562949870e-02, 3.585053562949870e-02, -6.978442849247359e-02, -6.986659526010139e-02, -7.204957758585454e-02, -7.116472124792773e-02, -7.125806449883020e-02, -4.848442687944978e-02, -5.386041901879410e-02, -4.505111408135027e-02, -4.482241540313350e-02, -4.491458578075824e-02, -4.489386873261413e-02, -4.489386873261413e-02, -3.870109385450328e-02, -3.861661418942880e-02, -9.378525323677714e-02, -4.428526934797049e-02, -4.064386423665813e-02, -4.064386423665812e-02, -9.423867417388887e-01, -8.857098499671080e-01, -1.782127135285519e-01, -1.693701688567802e+00, -1.238285728958445e+00, -1.238285728958445e+00, -4.299138171308720e-02, -4.295133546681909e-02, -4.298908220535136e-02, 1.486040003122679e-03, -4.297135330406063e-02, -4.297135330406063e-02, -2.946162440226525e-02, -3.258810399164501e-02, -2.811507113266756e-02, -2.973706126600381e-02, -3.236457258540340e-02, -4.797534508763354e-02, -4.176998701274741e-02, -3.868880149471137e-02, -4.297034073083702e-02, -4.148056073037162e-02, -4.131126249783012e-02, -5.542856817423963e-02, -4.992547358094624e-02, -4.121756706403459e-02, -4.805411052931949e-02, -4.526897703218184e-02, -4.752926689534591e-02, -4.752926689534587e-02, -4.081942885614216e-03, -1.806565998789585e+00, -1.020257033767563e+00, -3.863287750843799e-02, -4.652014915144833e-03, -1.262714025246918e+00, -3.018347742785829e-02, -3.302472965307562e-02, -2.220256218533350e-02, -3.129189689007680e-02, -3.171314138757189e-02, -3.171314138757189e-02, -3.050219339182502e-02, -4.181478177574691e-02, -4.012800845448510e-02, -3.755424359412733e-02, -3.900654043479015e-02, -1.350822545539688e-02, -4.004903492494628e-02, -5.617310741183141e-02, -4.065698559247722e-02, -2.672148254201192e-02, -4.106158124563017e-02, -4.106158124563019e-02, -5.080187991004566e-02, -1.872528650519693e-01, -1.325598591069999e-01, -4.018142422240540e-02, -4.388287188264496e-02, -6.584971323775987e-02, -8.976685877982518e-01, -4.353106547743863e+00, -1.757754721354947e+00, -6.872033718720681e-02, -1.175649580982921e+00, -1.175649580984683e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.076436691268163e-09, 6.076189439473353e-09, 6.075140640985133e-09, 6.078806494371252e-09, 6.076878565884103e-09, 6.076878565884103e-09, 1.246782218708185e-05, 1.246567417742861e-05, 1.240858626908049e-05, 1.242703156890735e-05, 1.243024049013428e-05, 3.250963438312181e-07, 1.360743972072823e-02, 6.220605726316206e-04, 6.319064827576416e-04, 6.402120860954407e-04, 6.378279994969885e-04, 6.378279994969885e-04, 3.646410092898195e-01, 3.499465137524887e-01, 8.392895475569947e-03, 8.744293969620159e-01, 5.978866955027043e-01, 5.978866955027041e-01, 3.680719633882874e+05, 3.028499190927556e+05, 2.492167762815324e+02, 2.941148180480949e+06, 1.278766638296515e+06, 1.278766638296515e+06, 1.369390442779411e-07, 1.375608162313720e-07, 1.369756775680636e-07, 1.498433091361914e-06, 1.372494837092195e-07, 1.372494837092195e-07, 1.456166119380469e-04, 1.377020693808195e-04, 1.518062919534328e-04, 1.445273170182839e-04, 1.382946817294863e-04, 4.771336052282409e-06, 3.141322141509666e-03, 3.199478858427386e-03, 3.538784404159018e-03, 3.831405638059475e-03, 3.128389923076113e-03, 1.479723400975313e-02, 3.995838443682475e+01, 2.732869028119269e-01, 5.393034868396890e+01, 1.074010668127126e-05, 2.166280313384872e+00, 2.166280313384870e+00, 3.462012712909143e+07, 3.157077541937884e+06, 1.134080791766325e+07, 2.464388692030448e+02, 1.876972541856270e+07, 4.973211364623191e+06, 7.945971868746609e-03, 7.095618564899757e-03, 1.274861553466178e-02, 7.632277729324766e-03, 7.507142432601784e-03, 7.507142432601784e-03, 8.841356173719379e-03, 6.305744022874321e-03, 6.589407817317953e-03, 7.263681807446699e-03, 6.861363154658759e-03, 3.330031005435023e-02, 2.264182792597273e-03, 1.228220794202309e+00, 5.700571605865468e-02, 1.581220230254806e-01, 3.767886926474357e-02, 3.767886926474362e-02, 4.278586350582950e-02, 3.013114076336948e+02, 7.793664015192057e+01, 3.498669399082622e-02, 9.731490236227617e+01, 1.158277942926084e+01, 8.621764300920125e+04, 4.407005950000834e+08, 3.258224518900751e+07, 1.538790759414647e+01, 6.977284587149796e+06, 6.977284587160276e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-9.541293675325454e-05, -9.541315498987756e-05, -9.541369898063133e-05, -9.541049740729693e-05, -9.541224068346325e-05, -9.541224068346325e-05, -4.022380712101923e-04, -4.016540357621700e-04, -3.860460448060433e-04, -3.923403657315143e-04, -3.917361737450262e-04, -1.620177358033955e-04, -4.820968927584378e-03, -2.246660306672020e-03, -2.129923093037712e-03, -2.199596723873033e-03, -2.182603252967609e-03, -2.182603252967609e-03, -2.519328200973629e-02, -2.513996504517465e-02, -1.350496017497539e-03, -2.905400907764495e-02, -2.712405030562592e-02, -2.712405030562589e-02, -1.280181848763124e+00, -1.228229293868293e+00, -1.691677795741394e-01, -1.970630552264453e+00, -1.699961823032538e+00, -1.699961823032538e+00, -2.763329890990026e-04, -2.779073857098817e-04, -2.764240629239161e-04, -1.098501363957704e-03, -2.771198634305276e-04, -2.771198634305276e-04, -1.666009003898512e-03, -1.607610376975678e-03, -1.688544065949733e-03, -1.660241277738219e-03, -1.612569486088188e-03, -4.280470330273988e-04, -8.199390848795911e-03, -1.148172832270012e-02, -7.017730556392378e-03, -8.918726072208448e-03, -8.679228458215537e-03, -7.535540143589847e-03, -9.047995229747974e-04, -1.989641659297789e-02, -7.575269451918565e-04, -9.982920901226988e-04, -3.981041167797482e-02, -3.981041167797477e-02, -6.749073514944985e-08, -1.976253093599142e+00, -3.173820300705285e+00, -3.271853577986463e-04, -4.139155546689375e-07, -2.433334313602349e+00, -2.394073000894342e-02, -2.075970115274326e-02, -3.167711017149168e-02, -2.276133151199251e-02, -2.229327231062580e-02, -2.229327231062580e-02, -2.448166402821616e-02, -9.494489995466752e-03, -1.192873840399173e-02, -1.575869199125662e-02, -1.358462537126515e-02, -3.794358279907080e-02, -9.194151374236502e-03, -9.029031803280537e-03, -1.312310891172740e-02, -2.306149246155091e-02, -1.277600178927229e-02, -1.277600178927231e-02, -7.085489868041553e-03, -1.793936946540863e-01, -1.172113301169758e-01, -1.639226396554544e-02, -8.572791458398742e-04, -6.785189779269593e-02, -8.429139255719531e-01, -5.269086281285021e+00, -3.602752228304221e+00, -7.483854652582880e-02, -2.704686742157511e+00, -2.704686742161565e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
