
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.885590973664745e-02, -2.885594215480890e-02, -2.885552725070141e-02, -2.885502826820099e-02, -2.885536970367091e-02, -2.885536970367091e-02, -4.373793755163459e-02, -4.374064718396885e-02, -4.379641124465729e-02, -4.364273852739194e-02, -4.371446480256636e-02, -4.371446480256636e-02, -3.456678332935319e-02, -3.441885657526297e-02, -3.083566238466715e-02, -3.033596032043169e-02, -3.063830134682518e-02, -3.063830134682518e-02, -1.390484317743865e-02, -1.445691302686086e-02, -4.315903225021155e-02, -1.262099313011743e-02, -1.336063627857672e-02, -1.336063627857672e-02, -6.940740178916189e-04, -7.481219801306126e-04, -4.292311309081431e-03, -3.531027751863870e-04, -4.846543049575166e-04, -4.846543049575166e-04, -2.795686776295774e-02, -2.796657961398653e-02, -2.795575202330996e-02, -2.796438735070039e-02, -2.796259935824875e-02, -2.796259935824875e-02, -2.490093869452365e-02, -2.468986314259282e-02, -2.432535966676530e-02, -2.413494795844914e-02, -2.506236247579826e-02, -2.506236247579826e-02, -3.063871691503367e-02, -3.767528842217384e-02, -3.564847614074051e-02, -4.881036511178618e-02, -3.069700127768990e-02, -3.069700127768990e-02, -9.387743274764715e-03, -1.307395450369562e-02, -8.973029292250351e-03, -6.395498439690800e-02, -1.021746393129726e-02, -1.021746393129726e-02, -2.620704626720797e-04, -3.502342841610597e-04, -3.121131601452312e-04, -6.769618156802124e-03, -3.607655495231308e-04, -3.607655495231308e-04, -2.662985036067764e-02, -2.607844980916159e-02, -2.626894647899492e-02, -2.642968729667871e-02, -2.634978323399105e-02, -2.634978323399105e-02, -2.836921897583685e-02, -2.210961576115598e-02, -2.372494997498360e-02, -2.547564131272902e-02, -2.465477471869156e-02, -2.465477471869156e-02, -4.161761951333157e-02, -1.419340033477799e-02, -1.752608330278627e-02, -2.640965980194673e-02, -2.086912670016150e-02, -2.086912670016150e-02, -2.492856710531175e-02, -3.982486570214149e-03, -5.409566641895171e-03, -2.723522141779039e-02, -8.252697935002030e-03, -8.252697935002030e-03, -1.031131911080025e-03, -7.366453980536298e-05, -1.838911737298860e-04, -7.456990430328423e-03, -3.361551344755385e-04, -3.361551344755449e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.704581007191117e-02, -4.704560999490664e-02, -4.704400482557677e-02, -4.704693846618290e-02, -4.704550409413703e-02, -4.704550409413703e-02, -8.956066656757723e-02, -8.955031768895264e-02, -8.920917388963731e-02, -8.884085241053098e-02, -8.909436120175167e-02, -8.909436120175167e-02, -6.315021122242628e-02, -6.297989782593266e-02, -5.817986749027920e-02, -5.691698929049663e-02, -5.748004957104626e-02, -5.748004957104626e-02, -4.343607991330774e-02, -4.378161678703978e-02, -9.065602889139285e-02, -2.790402759663247e-02, -2.670936252053706e-02, -2.670936252053706e-02, -2.706976353107301e-03, -1.912870476323320e-03, -8.608860986878311e-03, -6.808222542601324e-04, -9.362436063591533e-04, -9.362436063591531e-04, -4.308090755316690e-02, -4.303948209365441e-02, -4.307672850737882e-02, -4.304027035533747e-02, -4.306111054670507e-02, -4.306111054670507e-02, -5.403512982237518e-02, -5.309433455313197e-02, -5.322914448138722e-02, -5.236126516634413e-02, -5.389006592109967e-02, -5.389006592109967e-02, -4.983803616224649e-02, -3.348655531609128e-02, -5.990555121506129e-02, -5.071588558638170e-02, -4.824990780267141e-02, -4.824990780267141e-02, -2.033752647450661e-02, -4.580374627345738e-02, -1.880793664821361e-02, -5.495003894597052e-02, -2.836604491836373e-02, -2.836604491836373e-02, -5.068511102040185e-04, -6.748030113992499e-04, -6.050129608886886e-04, -1.351489640146842e-02, -6.963625398800670e-04, -6.963625398800670e-04, -2.819518495519091e-02, -3.216135995872882e-02, -3.089328283587804e-02, -2.974083625229572e-02, -3.032878631133417e-02, -3.032878631133417e-02, -2.592220691276681e-02, -4.310694757882241e-02, -4.166507819744959e-02, -3.859638587112382e-02, -4.055193393655427e-02, -4.055193393655428e-02, -3.554668244139093e-02, -4.462827378498541e-02, -4.654069138055055e-02, -5.202034939062569e-02, -4.822122043546102e-02, -4.822122043546102e-02, -4.946916215701495e-02, -1.021580058271989e-02, -1.079606120892767e-02, -4.946050808851925e-02, -1.892881157889982e-02, -1.892881157889982e-02, -1.952100086335108e-03, -1.444532578559704e-04, -3.584460752730826e-04, -2.288352942629919e-02, -6.499824282267967e-04, -6.499824282268027e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.034270771999624e-10, 1.034277624588655e-10, 1.034225541786322e-10, 1.034122881257138e-10, 1.034188441199274e-10, 1.034188441199274e-10, 8.780107301582335e-07, 8.788098829507327e-07, 9.004025207951359e-07, 8.929135259671635e-07, 8.934118259676718e-07, 8.934118259676718e-07, 1.732175014777484e-03, 1.715177282236080e-03, 1.328380083916209e-03, 1.277122003666897e-03, 1.311329427018355e-03, 1.311329427018355e-03, 4.778724448409046e-01, 4.740571541473440e-01, 1.077310339746243e-03, 3.940885661676951e-01, 1.798784472140310e-01, 1.798784472140312e-01, 6.219755186924273e+02, 2.396811561922813e+02, 3.197721830683688e+00, 1.748642063396553e+02, 1.434031362014325e+02, 1.434031362014324e+02, 1.383743050953557e-07, 1.389907176988550e-07, 1.383815471734837e-07, 1.389263379579031e-07, 1.386970597366414e-07, 1.386970597366414e-07, 6.761644101184133e-06, 6.440775345742323e-06, 6.445222678704748e-06, 6.157349870399712e-06, 6.738728861874096e-06, 6.738728861874096e-06, 7.165405216697304e-03, 9.238302390842125e-03, 1.027895276432740e-02, 1.735834504331601e-02, 6.977011662139687e-03, 6.977011662139687e-03, 6.208019317494687e-01, 3.441437375122662e-01, 6.718808417837024e-01, 8.232617868717184e-05, 1.026593427590708e+00, 1.026593427590709e+00, 3.200570574456275e+02, 1.993467093486468e+02, 1.007708930904356e+03, 1.414584146097605e+00, 4.501534528384649e+02, 4.501534528384644e+02, 9.248260808921563e-03, 8.232961840083382e-03, 8.579991109829021e-03, 8.875510798480431e-03, 8.727293650788706e-03, 8.727293650788706e-03, 1.185657707255424e-02, 7.043828260881240e-03, 7.790049133270359e-03, 9.221850733731524e-03, 8.488327806383996e-03, 8.488327806383998e-03, 8.160393357475353e-03, 1.378348418874422e-01, 8.172602144841512e-02, 4.631480947532544e-02, 6.075706569296563e-02, 6.075706569296564e-02, 1.373514690707575e-02, 7.310641999051221e+00, 1.796323437057874e+00, 7.745178159996624e-02, 1.672061101079936e+00, 1.672061101079936e+00, 3.321674497116490e+01, 4.834434398323318e+03, 9.304296500822645e+02, 3.542654556300858e+00, 5.971198744441690e+02, 5.971198744441718e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.333295091273366e-05, -1.333320804539173e-05, -1.333358532091073e-05, -1.332976436011336e-05, -1.333187532742548e-05, -1.333187532742548e-05, -7.136805182429014e-05, -7.178095636930332e-05, -8.364940977954428e-05, -8.506424011687477e-05, -8.226391462853546e-05, -8.226391462853546e-05, -2.036288033024222e-03, -2.014936579330950e-03, -1.559584619863976e-03, -1.664272640264058e-03, -1.659427727392068e-03, -1.659427727392068e-03, -3.307240623955841e-02, -3.397799259312017e-02, -4.903370337312235e-04, -9.224994322329743e-03, -3.253735048563036e-03, -3.253735048563043e-03, -1.923557648068194e-03, -7.061489970075318e-04, -9.367992774679461e-04, -1.450335530548994e-06, -1.127251480208925e-05, -1.127251480208890e-05, -2.782010026273707e-04, -2.797684787166388e-04, -2.782538939585190e-04, -2.796380096901348e-04, -2.790038971644680e-04, -2.790038971644680e-04, -5.704017816236733e-04, -5.598947354025996e-04, -5.384259755548100e-04, -5.280665779598897e-04, -5.806840513357520e-04, -5.806840513357520e-04, -1.517594747086989e-02, -2.426258945530808e-02, -1.283008396965464e-02, -1.952422229292098e-02, -1.570035869109429e-02, -1.570035869109429e-02, -4.555056983076168e-03, -2.461785631769145e-02, -3.563767324791980e-03, -3.347859458350217e-03, -1.601938622309537e-02, -1.601938622309538e-02, -4.253228103806561e-08, -2.772364610170165e-07, -4.047831926982365e-06, -1.809028166616961e-03, -9.409431708768495e-07, -9.409431708768557e-07, -2.646306624764798e-02, -2.292065013529345e-02, -2.412246907157373e-02, -2.515400969170492e-02, -2.463475214886695e-02, -2.463475214886695e-02, -2.979757389687877e-02, -1.040812411355916e-02, -1.355969136409628e-02, -1.865367928690696e-02, -1.588272876983369e-02, -1.588272876983369e-02, -2.258934311796139e-02, -1.927909961230126e-02, -1.849768536297894e-02, -1.867932955185437e-02, -1.937549227780791e-02, -1.937549227780791e-02, -1.433165002256996e-02, -3.275267022389546e-03, -1.166938446270060e-03, -2.994930859638809e-02, -6.769711334589461e-03, -6.769711334589459e-03, -3.150263004045053e-06, -7.537283400107722e-10, -2.359085195776585e-06, -1.474046111388482e-02, -1.877955938741924e-06, -1.877955938741968e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
