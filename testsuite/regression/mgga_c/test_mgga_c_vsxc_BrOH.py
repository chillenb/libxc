
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_vsxc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.630975974573101e-02, -9.631115966451442e-02, -9.631731200378411e-02, -9.629453174010098e-02, -9.631049699809452e-02, -9.631049699809452e-02, -9.121481352955535e-02, -9.117791487981242e-02, -9.007984239856519e-02, -9.050437925826529e-02, -9.120467923928144e-02, -5.332637192279048e-02, -2.736751439078762e-01, -8.322409963330647e-03, -2.467574816410808e-03, -5.034804815456949e-03, -8.471623154763300e-03, -8.471623154763300e-03, -1.112773096628326e-03, -2.233957930421986e-03, -6.162283152375297e-01, 1.288506350131153e-02, -1.431304949452822e-03, -1.431304949452822e-03, 7.126956987462402e-05, 8.097364371625356e-05, 2.148711755958674e-03, 5.145323468764135e-06, 8.037268310326441e-05, 8.037268310326447e-05, -5.008504176521500e-02, -4.990709410710475e-02, -5.006539062688291e-02, -8.655507767229222e-02, -4.999591264891917e-02, -4.999591264891917e-02, -1.183263623853813e-01, -1.092173575067498e-01, -1.226573505268189e-01, -1.149966657517612e-01, -1.070019035823766e-01, -4.106834313774055e-02, -3.454031082828898e-02, -3.177692753091357e-02, -3.268425821891521e-02, -3.420830408942048e-02, -3.467006291955607e-02, -3.163885567758132e-02, -1.353839546773860e+00, 9.651707899606222e-03, -1.311494902548923e+00, -5.019141181583308e-02, 1.182305332837362e-02, 1.182305332837362e-02, -3.540931319712103e-03, 7.669535143635875e-06, 6.572272459912454e-06, -1.112313739213691e+00, -4.007354937179157e-03, 6.499071793287911e-06, -1.316663362201203e-02, -1.835602174323137e-02, -6.027260811608472e-02, -1.517249736531324e-02, -1.590162245322374e-02, -1.590162245322374e-02, -1.497752894742499e-02, -3.261622136901846e-02, -3.238989795200517e-02, -2.865279192584144e-02, -3.102613609755756e-02, -3.367144260086728e-02, -3.433663084253243e-02, -3.037378269116642e-01, -7.693126443599819e-03, -6.201572375098290e-02, -1.653786723066288e-02, -1.653786723066290e-02, -4.307467882222051e-02, 1.724666972295290e-03, 3.388155518119777e-03, -2.523874650246020e-02, -1.271274732253323e+00, 7.952187110300947e-03, 7.010116908604234e-05, 1.813862968352172e-07, 1.680846936824887e-06, 7.716005136237960e-03, 4.800798075661510e-06, 4.800798075661496e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_vsxc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.860860385408753e-01, -1.860890449182293e-01, -1.861022452546899e-01, -1.860533120455106e-01, -1.860876219101733e-01, -1.860876219101733e-01, 1.681613801357688e-01, 1.680198127026789e-01, 1.637843039196819e-01, 1.654230861850584e-01, 1.681222905815914e-01, -1.833792846157644e-01, 5.994544850980913e-01, -1.923342736772852e-01, -1.965190863259712e-01, -1.949085762448926e-01, -1.921707409088917e-01, -1.921707409088917e-01, -1.154677095787564e-01, -1.154645889443230e-01, 1.072558765278032e+00, -5.863704102809032e-02, -1.155062613369080e-01, -1.155062613369080e-01, -1.406108817590280e-04, -1.580242150540634e-04, -3.644937427662587e-03, -1.205658273516402e-05, -1.573032013469630e-04, -1.573032013469626e-04, -6.537107297934794e-02, -6.547976595724465e-02, -6.538283029131946e-02, -1.587422782206114e-01, -6.542496765341803e-02, -6.542496765341803e-02, 2.761238467673327e-01, 2.484857307421474e-01, 2.888557960746969e-01, 2.661583407581785e-01, 2.415800510452832e-01, -1.856041700887033e-01, -6.367389210340663e-02, -3.715187031279732e-02, -8.438024793041986e-02, -5.293347809719014e-02, -5.162690666645339e-02, -4.165713879824693e-02, -6.322738018353307e-01, -1.069515246818236e-01, -5.170377821693714e-01, -7.264601547271504e-02, -4.867810328180266e-02, -4.867810328180266e-02, -1.037613075308413e-02, -1.757547668449427e-05, -1.609765472993120e-05, -1.754183480748896e+00, -1.173381889737934e-02, -1.522079949486593e-05, -5.721466383344238e-02, -4.562245941627330e-02, -8.783171097617541e-02, -5.241817879375461e-02, -5.076848397582250e-02, -5.076848397582250e-02, -5.188493817820015e-02, -6.585073349420442e-02, -4.384375015535001e-02, -3.377169615372782e-02, -3.730747822769818e-02, -6.479564622637031e-02, -4.291329176261917e-02, 5.601523848047243e-01, -1.323094476342671e-01, 1.391116532237108e-01, -1.187605962230228e-01, -1.187605962230228e-01, 6.690286962107066e-02, -2.848224925203693e-03, -6.133015295437970e-03, -8.268248369580124e-02, -8.543914301146026e-01, -2.090935511587206e-02, -1.320818623019424e-04, -5.351122020059973e-07, -4.433979708952106e-06, -2.030379061626412e-02, -1.166381453711896e-05, -1.166381453711894e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.816222918839713e-10, 1.816329394074399e-10, 1.816777138940815e-10, 1.815047920256214e-10, 1.816279129033718e-10, 1.816279129033718e-10, 4.371629287097502e-06, 4.369349797038781e-06, 4.300397183136563e-06, 4.325378078796330e-06, 4.370897896375346e-06, 1.481235144024495e-06, 3.990714097327507e-02, 3.889706815965832e-03, 4.211801224733465e-03, 4.155240037480783e-03, 3.881330462247092e-03, 3.881330462247092e-03, 1.387940817700537e+00, 1.331147980487028e+00, 2.822238079225244e-02, 1.952315623728258e+00, 1.370517332021460e+00, 1.370517332021460e+00, 4.077447791672338e+01, 3.996963585804955e+01, 8.631199757393871e+00, 1.712289785905570e+01, 4.191972509264052e+01, 4.191972509264051e+01, 5.341134439102355e-07, 5.410390621674979e-07, 5.348757969631736e-07, 4.275294956543218e-07, 5.375686959653567e-07, 5.375686959653567e-07, 1.036235574150668e-04, 9.271648770518692e-05, 1.086509548555651e-04, 9.956379516658080e-05, 9.024209476224699e-05, 2.319455926551339e-05, 5.340937159012339e-03, 5.519224271065795e-03, 7.508853974768445e-03, 5.580841219902527e-03, 4.513272648059109e-03, 2.944307140961183e-03, 8.534495623911888e+02, 9.511146938689644e-01, 9.150700164274774e+02, 2.068829876208641e-05, 3.468096947905844e+00, 3.468096947905844e+00, 4.431591067611601e+04, 2.118209398641195e+01, 8.812009255425575e+01, 3.767466271511856e+03, 4.485172857446020e+04, 2.660065203442417e+01, 1.151169756645179e-01, 4.646253361686979e-02, 6.088397775810666e-02, 7.817283896924757e-02, 6.886218971856338e-02, 6.886218971856338e-02, 9.050538393619122e-02, 1.055237495584713e-02, 8.970877314466759e-03, 1.336339778893505e-02, 1.002850387534039e-02, 4.639585119800501e-03, 3.423578353420736e-03, 7.417045326952590e+00, 2.321365108875024e-01, 2.907306969059044e-01, 1.326962023758173e-01, 1.326962023758173e-01, 5.207662989452392e-02, 8.397989637535659e+00, 6.323613518394422e+00, 8.393710635549036e-02, 2.051343036675893e+03, 6.223315848671350e+00, 1.527575700067237e+01, 2.897492814567143e+01, 5.195924258679332e+01, 7.628611725162355e+00, 3.860045558780493e+01, 3.860045558780497e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.913869204035418e-05, 4.914067052416406e-05, 4.914913444654428e-05, 4.911696762681170e-05, 4.913973555501067e-05, 4.913973555501067e-05, -2.011169372336486e-03, -2.010257073157597e-03, -1.982710034069414e-03, -1.993094865983385e-03, -2.010899445794435e-03, -6.364163230792866e-04, -8.470415444343966e-02, -1.211790609925558e-02, -1.268976103650524e-02, -1.254684331852137e-02, -1.210137255943235e-02, -1.210137255943235e-02, -9.319225492329510e-02, -9.151816229135962e-02, -7.658348465862599e-02, -7.057434301018684e-02, -9.270229189471042e-02, -9.270229189471042e-02, -8.212401921736584e-04, -9.257522742710647e-04, -1.336738967166823e-02, -3.765582406020358e-05, -9.406867521625672e-04, -9.406867521625672e-04, -1.748038813537198e-03, -1.768272423876419e-03, -1.750265086041644e-03, 9.461969212624203e-04, -1.758146307508079e-03, -1.758146307508079e-03, -7.792187134748514e-03, -7.257049945459250e-03, -8.030176590893784e-03, -7.598581589363169e-03, -7.126645585812164e-03, -1.719014626661066e-03, -1.598710025325282e-02, -3.406851289219098e-02, -1.448658366645868e-02, -1.953270789375880e-02, -1.902028587923773e-02, 2.910747654717677e-03, -5.821790245286735e-01, -7.764274605082816e-02, -6.734245464665881e-01, -2.856254537797347e-03, -7.859981450236728e-02, -7.859981450236728e-02, 5.029290716670395e-03, -6.251779120254330e-05, -1.089760718172781e-04, 2.555532120340074e-01, 5.743539691317272e-03, -5.929676373390772e-05, -4.361148306621775e-01, -1.919312401292195e-01, 5.570663828696229e-02, -3.057364206004516e-01, -2.725966845184596e-01, -2.725966845184596e-01, -3.227095502755604e-01, -1.881649406822247e-02, -2.782850699220830e-02, -5.362963204819769e-02, -3.708489140255008e-02, 2.211892386831494e-02, -2.287645381954777e-02, -5.338581617552461e-01, -4.933125317805035e-02, -1.283288380663701e-01, -3.785084028617983e-02, -3.785084028617983e-02, -5.445785912409131e-02, -1.038160134126594e-02, -1.907740047353588e-02, -3.130047357032022e-02, -5.186365261895119e-01, -5.357964681575893e-02, -4.970013437467690e-04, -1.723447526463723e-06, -2.135804785670427e-05, -5.703779760248523e-02, -5.268011032040999e-05, -5.268011032040980e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
