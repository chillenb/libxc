
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_vsxc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.136675939174427e-02, -8.136606840823135e-02, -8.136164678687136e-02, -8.137280463006721e-02, -8.136640854071990e-02, -8.136640854071990e-02, -6.185318943937158e-02, -6.184935563428483e-02, -6.173938539291723e-02, -6.182211506182587e-02, -6.185195688694477e-02, -6.185195688694477e-02, -7.148335947623019e-02, -7.147814360179823e-02, -6.834818994636398e-02, -6.144073612880932e-02, -7.147084458502422e-02, -7.147084458502422e-02, -9.467435886718528e-03, -1.129592208245598e-02, -2.621779922083362e-01, -1.533813954837301e-02, -1.009937543712005e-02, -1.009937543712005e-02, 6.415246236437836e-05, 7.077096254967906e-05, 7.398656979184062e-04, -7.744200953714703e-06, 7.159960001630124e-05, 7.159960001630104e-05, -5.040989410666562e-02, -5.023254981352446e-02, -5.038622192140062e-02, -5.024864038880662e-02, -5.032659902131711e-02, -5.032659902131711e-02, -4.834130051777605e-02, -4.842663791725248e-02, -4.715852249921974e-02, -4.719592402113495e-02, -4.980467210922462e-02, -4.980467210922462e-02, -3.576482276460500e-02, -3.652522915863850e-02, -3.425179336237117e-02, -3.128367989487337e-02, -3.625462196951348e-02, -3.625462196951348e-02, -5.732827615023993e-04, 2.146432296419248e-03, -6.728608328507819e-04, -4.581816780067687e-02, 1.575820567607760e-03, 1.575820567607760e-03, -4.461527971086710e-07, -5.715408809914940e-06, 2.022641511735221e-06, -3.391474200968856e-03, -1.008332385806536e-05, -1.008332385806538e-05, -3.973298991918098e-02, -2.843822273314055e-02, -3.019637238425455e-02, -3.282580597054800e-02, -3.132940361292827e-02, -3.132940361292826e-02, -5.042891079757177e-02, -3.384404075832994e-02, -3.380624679966019e-02, -3.168221121485287e-02, -3.295819407236529e-02, -3.295819407236530e-02, -3.486278553788236e-02, -3.485974995597505e-03, -1.703236501719066e-02, -3.081968626284111e-02, -2.582655771741463e-02, -2.582655771741464e-02, -3.398304076714120e-02, 1.093083685033000e-03, 6.101674917276661e-04, -2.953369757816913e-02, 1.222655742715011e-03, 1.222655742714992e-03, -7.989635255120147e-05, -6.242294063833422e-07, 8.259505513488717e-07, 6.435796858561737e-04, -8.555129305192073e-06, -8.555129305192024e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_vsxc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.523014989434327e-02, -8.522984896131260e-02, -8.523014527554140e-02, -8.523513473043917e-02, -8.522997638724378e-02, -8.522997638724378e-02, -2.991311175834765e-02, -2.992397671084443e-02, -3.027538970924094e-02, -3.048860091357490e-02, -2.991388420669426e-02, -2.991388420669426e-02, -2.335891434563801e-02, -2.479523510646189e-02, -6.487964476429130e-02, -6.077114141107523e-02, -2.387777381841116e-02, -2.387777381841116e-02, -9.593441484293910e-02, -9.245635862173553e-02, 1.015626026406688e-01, -1.064076573049489e-01, -9.474197343857732e-02, -9.474197343857732e-02, -1.664917545957952e-04, -1.952335941712920e-04, -8.688769794929888e-03, -7.152750912966289e-05, -1.892185268385311e-04, -1.892185268385314e-04, -6.545973102060777e-02, -6.557495415412642e-02, -6.547101698715616e-02, -6.556054127736173e-02, -6.551858810221019e-02, -6.551858810221019e-02, -1.394458312841466e-01, -1.403057784391329e-01, -1.467995762984376e-01, -1.477403142945794e-01, -1.306688458804967e-01, -1.306688458804967e-01, -2.960741348343181e-02, -5.973149213233193e-02, -2.393953565013840e-02, -4.016949250586147e-02, -3.205760966252744e-02, -3.205760966252744e-02, -5.310546640655760e-02, -1.030113873859387e-01, -5.428339982838626e-02, -6.711929886542441e-02, -6.444864976058873e-02, -6.444864976058873e-02, -3.894435301041177e-05, -7.633967551849818e-05, -3.402157309865101e-05, -3.617817120875783e-02, -9.190625414700029e-05, -9.190625414700037e-05, -7.203261627439757e-02, -5.458017433667474e-02, -5.994307552723262e-02, -6.471568150467187e-02, -6.225681861522647e-02, -6.225681861522645e-02, -7.796044070235243e-02, -5.656388875781827e-02, -3.662259150701952e-02, -3.392468118433545e-02, -3.280585463863111e-02, -3.280585463863114e-02, -5.555178296546282e-02, -1.201426427756405e-01, -1.012506519417632e-01, -3.796012750980975e-02, -7.087055905810744e-02, -7.087055905810741e-02, -4.360985294283118e-02, -5.051480414288184e-03, -1.580890800339554e-02, -2.439991491629033e-02, -3.860707239195937e-02, -3.860707239195947e-02, -8.161545909257055e-04, -4.472327299752901e-06, -7.725696423847384e-06, -3.915103585544311e-02, -7.400412158863599e-05, -7.400412158863555e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.765098614856915e-10, 2.765217084664513e-10, 2.765967178983535e-10, 2.764058496306091e-10, 2.765158786867301e-10, 2.765158786867301e-10, -2.660007872593987e-07, -2.665354101495918e-07, -2.827214112175151e-07, -2.801457961603672e-07, -2.661176966835670e-07, -2.661176966835670e-07, 6.272487337798444e-03, 6.283866249841208e-03, 6.280810180194378e-03, 5.116740524157420e-03, 6.275226760910620e-03, 6.275226760910620e-03, 1.179335303002385e+00, 1.092564761500606e+00, 1.096836623074950e-02, 3.284713637691641e+00, 1.151194806295813e+00, 1.151194806295813e+00, 4.223407783135062e+01, 4.180326194672443e+01, 1.131547385791521e+01, 4.425777140538282e+01, 4.357180564039253e+01, 4.357180564039250e+01, 5.303163158422467e-07, 5.372823952361858e-07, 5.311308281113029e-07, 5.365400038708456e-07, 5.337276777666191e-07, 5.337276777666191e-07, 1.548104313966594e-05, 1.550219043742810e-05, 1.679223262620550e-05, 1.684685767103483e-05, 1.381074641376684e-05, 1.381074641376684e-05, -2.919352291641644e-03, 3.402754476997512e-04, -3.495366342121337e-03, -3.185782189832970e-03, -1.918025566481264e-03, -1.918025566481264e-03, 4.301866151315688e+00, 9.210834875744416e-01, 4.927396765018849e+00, -6.526591539463539e-06, 3.994384012626766e+00, 3.994384012626766e+00, 3.920926818529997e+01, 4.162518525288019e+01, 1.122337877706331e+02, 1.156279389530694e+01, 6.989116444311163e+01, 6.989116444311169e+01, 1.145970455541246e-01, 4.488486815302907e-02, 5.981107258395649e-02, 7.704471428284045e-02, 6.759122865078028e-02, 6.759122865078028e-02, 8.956102663079041e-02, 7.612920241080051e-03, 5.104705059523112e-03, 9.005805576223517e-03, 5.653620510494334e-03, 5.653620510494329e-03, -9.427767381105370e-04, 4.216369909338646e-01, 1.782825697400519e-01, 8.870367811480470e-03, 6.934163285100652e-02, 6.934163285100643e-02, 1.930812268045308e-03, 9.704763568786930e+00, 8.837650858278339e+00, -1.732592566678162e-02, 8.045693146667794e+00, 8.045693146667812e+00, 3.771854921470274e+01, 1.166499114913050e+02, 6.135485802120321e+01, 1.013259458920110e+01, 1.078362449942981e+02, 1.078362449942981e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.466712026758423e-05, -6.467016230424410e-05, -6.468964055807825e-05, -6.464054432148465e-05, -6.466866449168846e-05, -6.466866449168846e-05, -1.547785170304674e-04, -1.544681689799826e-04, -1.448166545782844e-04, -1.436371245448072e-04, -1.547230841189998e-04, -1.547230841189998e-04, -2.254089842359872e-02, -2.246749890460635e-02, -1.973272577480685e-02, -1.713774508294342e-02, -2.251088985801184e-02, -2.251088985801184e-02, -7.025149990499416e-02, -6.585004744114163e-02, -4.185011971428038e-02, -7.749348919025489e-02, -6.876311380288812e-02, -6.876311380288812e-02, -8.177613672643057e-04, -9.210722404302804e-04, -1.342391495791633e-02, -4.787855989716543e-05, -9.364051483003519e-04, -9.364051483003507e-04, -1.725798766346302e-03, -1.745995596650919e-03, -1.728301286045045e-03, -1.743978672725414e-03, -1.735508643262387e-03, -1.735508643262387e-03, -9.130892038367215e-04, -9.586637271467612e-04, -1.002207213359290e-03, -1.043550411326553e-03, -8.276029866574292e-04, -8.276029866574292e-04, 4.003266576736785e-03, 1.186107381370877e-02, 1.885193827612070e-03, 6.677773118282004e-03, 2.475156333386241e-03, 2.475156333386241e-03, -4.913157345900154e-02, -6.860667177861793e-02, -5.397916297963543e-02, 1.026206639590065e-03, -7.291959573921976e-02, -7.291959573921976e-02, -5.357112588740580e-05, -7.062452227238263e-05, -1.090681860378117e-04, -2.597673145006445e-02, -7.598973140685295e-05, -7.598973140685295e-05, -1.819297331373064e-01, -1.283203796637266e-01, -1.506525451758388e-01, -1.688666473666095e-01, -1.598010626851715e-01, -1.598010626851715e-01, -3.077407463724170e-02, -1.347878294196534e-02, -1.784566626511795e-02, -3.228468487157411e-02, -2.246265250229908e-02, -2.246265250229906e-02, 9.862239860959923e-03, -5.609547141635453e-02, -3.283942847954506e-02, -4.554060660221220e-03, -1.572442117043565e-02, -1.572442117043560e-02, -9.357427798114495e-04, -1.028651174998334e-02, -1.935831859026946e-02, 1.303824314418326e-03, -5.243375332261621e-02, -5.243375332261632e-02, -6.218818207997075e-04, -2.746449074157508e-06, -2.120429206681666e-05, -5.616691448814660e-02, -6.949563956913291e-05, -6.949563956913264e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
