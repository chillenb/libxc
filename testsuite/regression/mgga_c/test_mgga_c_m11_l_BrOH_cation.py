
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.758832808422454e-01, -3.758960053427030e-01, -3.759496696655523e-01, -3.757613665175131e-01, -3.758604260429946e-01, -3.758604260429946e-01, 7.250842947584811e-02, 7.242386053034809e-02, 7.023916880615386e-02, 7.159520132583100e-02, 7.124872462051227e-02, 7.124872462051227e-02, 5.920979052047883e-02, 6.030275150473707e-02, 8.773570376086505e-02, 9.299065061254423e-02, 9.027173664007486e-02, 9.027173664007486e-02, 8.527221537435518e-02, 8.500142934635696e-02, -3.230648863446649e-02, 2.040295714470137e-02, 4.827574684168945e-02, 4.827574684168945e-02, -1.662998755611921e-02, -1.733862879225217e-02, -5.664006535637063e-02, -1.042517375561479e-02, -1.081914175225700e-02, -1.081914175225697e-02, -3.435311877951348e-01, -3.453518970106195e-01, -3.436492580201687e-01, -3.452550293532560e-01, -3.444350912375576e-01, -3.444350912375576e-01, 1.640813928473283e-01, 1.524111515743447e-01, 1.758611563307544e-01, 1.656849294561971e-01, 1.517169710470624e-01, 1.517169710470624e-01, -5.222006075559261e-02, -7.990182213268716e-02, -9.780593725321748e-03, -5.851077630665180e-02, -6.399667014177141e-02, -6.399667014177143e-02, -3.928390793896978e-02, 6.777987375588883e-02, -4.529009856671165e-02, -1.006462649400118e-01, 1.137292885681033e-04, 1.137292885678708e-04, -8.288023943429942e-03, -1.022167333104570e-02, -8.034525812180652e-03, -5.918253638559991e-02, -8.948377096219373e-03, -8.948377096219382e-03, -1.340554929417065e-01, -1.208411167441701e-01, -1.244921265502928e-01, -1.282523371972197e-01, -1.262635366288076e-01, -1.262635366288076e-01, -1.008687123340469e-01, -1.288709611752062e-02, -6.777147751970367e-02, -9.715324525928724e-02, -8.606454946382362e-02, -8.606454946382362e-02, -7.967186907270078e-02, 1.017104005761964e-01, 1.046219674479370e-01, 3.984815806794127e-02, 7.969092741701210e-02, 7.969092741701206e-02, 1.847352585001314e-02, -5.569558775176557e-02, -6.190394132660600e-02, 6.516959621575744e-04, -4.324039964723889e-02, -4.324039964723897e-02, -2.215100443419816e-02, -3.085839135217208e-03, -6.088954589488373e-03, -4.541171176665233e-02, -8.447066374378091e-03, -8.447066374378028e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.015006771657013e+00, -1.015007601042270e+00, -1.015014768805729e+00, -1.015016167409051e+00, -1.015060855244331e+00, -1.015059308777980e+00, -1.014935386433448e+00, -1.014940291086071e+00, -1.014996625078115e+00, -1.015004833567407e+00, -1.014996625078115e+00, -1.015004833567407e+00, -5.528257885233057e-01, -5.528250075991109e-01, -5.529226721429468e-01, -5.529217822750446e-01, -5.555512601806627e-01, -5.555523728827828e-01, -5.555235941743469e-01, -5.555243834459948e-01, -5.550745117191662e-01, -5.550953114933355e-01, -5.550745117191662e-01, -5.550953114933355e-01, -1.424064854309753e-01, -1.421255598701013e-01, -1.416913096908978e-01, -1.413536030962788e-01, -1.082840537932960e-01, -1.084441900609705e-01, -1.171317627085164e-01, -1.171186963019048e-01, -1.151074199623296e-01, -1.159287831212825e-01, -1.151074199623296e-01, -1.159287831212825e-01, 3.835241011120719e-02, 3.562882550111827e-02, 2.202043470264291e-02, 1.915585937855669e-02, -1.800060630862672e-01, -1.697960171527348e-01, 1.193622224098647e-01, 1.194267731823380e-01, 1.055455419149873e-01, 1.466769332558354e-01, 1.055455419149879e-01, 1.466769332558358e-01, -2.216405377072288e-02, -2.031635676875010e-02, -2.322486864926005e-02, -2.103272536565517e-02, -5.954027646523866e-02, -5.307037938689765e-02, -1.329770744882507e-02, -1.360630069855356e-02, -1.203293900317146e-02, -2.363341685708832e-02, -1.203293900317138e-02, -2.363341685708770e-02, -6.520522840372839e-01, -6.521800730734896e-01, -6.531221495416658e-01, -6.532538328123938e-01, -6.521570207488090e-01, -6.522872240121150e-01, -6.531017503005154e-01, -6.532304456773128e-01, -6.525641624119380e-01, -6.526945499884085e-01, -6.525641624119380e-01, -6.526945499884085e-01, -4.360278469426337e-01, -4.360167865569596e-01, -4.634306527249729e-01, -4.633758084388591e-01, -4.137373911497638e-01, -4.141508537281567e-01, -4.399860454185825e-01, -4.403894623460046e-01, -4.615970514050914e-01, -4.607227869657216e-01, -4.615970514050914e-01, -4.607227869657216e-01, -2.637247304913046e-01, -2.640307465345326e-01, -6.600024467248135e-02, -6.593932261628571e-02, -2.663266621105881e-01, -2.638681152029847e-01, -1.678224645408406e-01, -1.637961837222612e-01, -2.352867406958391e-01, -2.419079688930841e-01, -2.352867406958390e-01, -2.419079688930841e-01, 4.498205946112212e-02, 4.588263802220039e-02, 1.445567362094888e-01, 1.441965324537534e-01, 2.590180641123655e-02, 3.142507021048888e-02, -2.509289121873240e-01, -2.510138599756606e-01, 1.065794119316726e-01, 1.081202722175634e-01, 1.065794119316722e-01, 1.081202722175643e-01, -1.103200985637219e-02, -1.047807503441831e-02, -1.333067361862348e-02, -1.306055786064370e-02, -1.082649568126015e-02, -1.002721169495408e-02, -2.846217141609109e-02, -2.767558005614276e-02, -1.521814879131571e-02, -1.012014812693037e-02, -1.521814879131547e-02, -1.012014812693066e-02, -2.024293255989180e-01, -2.015974832155481e-01, -1.448546568151131e-01, -1.442254213784694e-01, -1.600686312806041e-01, -1.593956450213239e-01, -1.763379169950496e-01, -1.756137032784760e-01, -1.677158953402502e-01, -1.670201757873165e-01, -1.677158953402502e-01, -1.670201757873166e-01, -1.972749836252790e-01, -1.966868843036811e-01, -3.241160502493155e-01, -3.238546721647322e-01, -2.428841492707666e-01, -2.423007657830872e-01, -1.248798662118181e-01, -1.243480431174698e-01, -1.802907920163190e-01, -1.797359750667271e-01, -1.802907920163190e-01, -1.797359750667271e-01, -9.690524946095802e-02, -9.667376117390904e-02, 8.347814146790736e-02, 8.285580508877466e-02, -3.653223040508504e-02, -3.738108013650063e-02, -2.093748752428816e-01, -2.092955978589228e-01, -1.528805790985552e-01, -1.528667618112081e-01, -1.528805790985552e-01, -1.528667618112080e-01, -2.918643711395600e-01, -2.916915264131487e-01, -5.664345735768102e-02, -5.585086687571980e-02, -5.302266195411084e-02, -4.868567701248328e-02, -2.268981458683729e-01, -2.261405428626407e-01, 1.958495114466969e-02, 2.501343955515541e-02, 1.958495114466933e-02, 2.501343955515666e-02, -2.870270231888086e-02, -2.722249117561202e-02, -4.051457936520265e-03, -4.039786593455570e-03, -8.270339034058606e-03, -7.629293588943186e-03, 1.424871106376743e-02, 1.591320688398271e-02, -1.390411787641450e-02, -9.628916558013324e-03, -1.390411787641466e-02, -9.628916558013467e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.856715985630227e-10, -7.713431971260457e-10, -3.856715985630227e-10, -3.857068852067504e-10, -7.714137704135008e-10, -3.857068852067504e-10, -3.858309244823211e-10, -7.716618489646423e-10, -3.858309244823211e-10, -3.853086228540860e-10, -7.706172457081720e-10, -3.853086228540860e-10, -3.855868739409592e-10, -7.711737478819184e-10, -3.855868739409592e-10, -3.855868739409592e-10, -7.711737478819184e-10, -3.855868739409592e-10, 3.196098982583239e-06, 6.392197965166479e-06, 3.196098982583239e-06, 3.195082387685237e-06, 6.390164775370473e-06, 3.195082387685237e-06, 3.165658526608548e-06, 6.331317053217095e-06, 3.165658526608548e-06, 3.155034618794103e-06, 6.310069237588207e-06, 3.155034618794103e-06, 3.166645279547163e-06, 6.333290559094325e-06, 3.166645279547163e-06, 3.166645279547163e-06, 6.333290559094325e-06, 3.166645279547163e-06, 1.353793835572390e-02, 2.707587671144780e-02, 1.353793835572390e-02, 1.349319932877672e-02, 2.698639865755344e-02, 1.349319932877672e-02, 1.191318415956983e-02, 2.382636831913966e-02, 1.191318415956983e-02, 1.120930841749102e-02, 2.241861683498204e-02, 1.120930841749102e-02, 1.147992923684114e-02, 2.295985847368227e-02, 1.147992923684114e-02, 1.147992923684114e-02, 2.295985847368227e-02, 1.147992923684114e-02, 1.445037888898855e+00, 2.890075777797712e+00, 1.445037888898855e+00, 1.500363423332600e+00, 3.000726846665200e+00, 1.500363423332600e+00, 9.250506981340993e-03, 1.850101396268199e-02, 9.250506981340993e-03, 1.155323485346791e+00, 2.310646970693582e+00, 1.155323485346791e+00, 9.502044824235051e-01, 1.900408964847008e+00, 9.502044824235051e-01, 9.502044824235075e-01, 1.900408964847014e+00, 9.502044824235075e-01, 4.326713609755475e-02, 8.653427219850610e-02, 4.326713609755475e-02, 5.089307092788219e-02, 1.017861418511643e-01, 5.089307092788219e-02, 2.615228314627400e-01, 5.230456629255889e-01, 2.615228314627400e-01, 1.536754663553945e-02, 3.073509327052831e-02, 1.536754663553945e-02, 2.254802906401497e-02, 4.509605813492405e-02, 2.254802906401497e-02, 2.254802907239191e-02, 4.509605813782627e-02, 2.254802907239191e-02, -1.132602160410015e-06, -2.265204320820029e-06, -1.132602160410015e-06, -1.153445998722568e-06, -2.306891997445137e-06, -1.153445998722568e-06, -1.133661948525439e-06, -2.267323897050878e-06, -1.133661948525439e-06, -1.152051983119520e-06, -2.304103966239040e-06, -1.152051983119520e-06, -1.143066194267465e-06, -2.286132388534929e-06, -1.143066194267465e-06, -1.143066194267465e-06, -2.286132388534929e-06, -1.143066194267465e-06, 2.599559384029337e-05, 5.199118768058673e-05, 2.599559384029337e-05, 2.431944468866146e-05, 4.863888937732293e-05, 2.431944468866146e-05, 2.593834819870743e-05, 5.187669639741486e-05, 2.593834819870743e-05, 2.449519811830790e-05, 4.899039623661579e-05, 2.449519811830790e-05, 2.503920584166886e-05, 5.007841168333772e-05, 2.503920584166886e-05, 2.503920584166886e-05, 5.007841168333772e-05, 2.503920584166886e-05, 2.835207861914321e-03, 5.670415723828643e-03, 2.835207861914321e-03, -1.713602562812493e-02, -3.427205125624986e-02, -1.713602562812493e-02, 1.671893796751101e-02, 3.343787593502201e-02, 1.671893796751101e-02, 4.755404012920580e-03, 9.510808025841160e-03, 4.755404012920580e-03, 2.479742065826233e-04, 4.959484131652467e-04, 2.479742065826233e-04, 2.479742065826175e-04, 4.959484131652351e-04, 2.479742065826175e-04, 6.436759280344210e-01, 1.287351856068848e+00, 6.436759280344210e-01, 5.739320361523940e-01, 1.147864072304788e+00, 5.739320361523940e-01, 6.523396708096943e-01, 1.304679341619389e+00, 6.523396708096943e-01, -1.345821827299015e-05, -2.691643654598030e-05, -1.345821827299015e-05, 1.232927551231848e+00, 2.465855102463690e+00, 1.232927551231848e+00, 1.232927551231846e+00, 2.465855102463688e+00, 1.232927551231846e+00, 1.498392061376496e-02, 2.996784119351180e-02, 1.498392061376496e-02, 1.889427256845878e-02, 3.778854511928149e-02, 1.889427256845878e-02, 1.882235761097678e-01, 3.764471521641868e-01, 1.882235761097678e-01, 6.374233750871403e-01, 1.274846750174278e+00, 6.374233750871403e-01, 7.203693722260496e-02, 1.440738744339576e-01, 7.203693722260496e-02, 7.203693728434558e-02, 1.440738745522473e-01, 7.203693728434558e-02, -1.539638867472199e-01, -3.079277734944397e-01, -1.539638867472199e-01, -8.590231769282944e-02, -1.718046353856589e-01, -8.590231769282944e-02, -1.046855055064419e-01, -2.093710110128838e-01, -1.046855055064419e-01, -1.239901511131798e-01, -2.479803022263596e-01, -1.239901511131798e-01, -1.138393724505782e-01, -2.276787449011565e-01, -1.138393724505782e-01, -1.138393724505782e-01, -2.276787449011565e-01, -1.138393724505782e-01, -1.712896766500337e-01, -3.425793533000674e-01, -1.712896766500337e-01, 1.154463811830244e-02, 2.308927623660488e-02, 1.154463811830244e-02, -2.120164479596490e-03, -4.240328959192979e-03, -2.120164479596490e-03, -2.669266246530399e-02, -5.338532493060796e-02, -2.669266246530399e-02, -1.163305860158195e-02, -2.326611720316389e-02, -1.163305860158195e-02, -1.163305860158195e-02, -2.326611720316389e-02, -1.163305860158195e-02, -8.179261275497075e-03, -1.635852255099415e-02, -8.179261275497075e-03, 4.018899499279063e-01, 8.037798998558122e-01, 4.018899499279063e-01, 3.208499907540471e-01, 6.416999815080940e-01, 3.208499907540471e-01, 1.527752738988369e-01, 3.055505477976739e-01, 1.527752738988369e-01, 2.424394298468619e-01, 4.848788596937237e-01, 2.424394298468619e-01, 2.424394298468622e-01, 4.848788596937244e-01, 2.424394298468622e-01, 3.076304544860957e-02, 6.152609089721914e-02, 3.076304544860957e-02, 2.149219411396539e-01, 4.298438822793160e-01, 2.149219411396539e-01, 3.292528695090371e-01, 6.585057390181112e-01, 3.292528695090371e-01, 1.392086546967374e-01, 2.784173093934748e-01, 1.392086546967374e-01, 1.112679488337246e+00, 2.225358976674491e+00, 1.112679488337246e+00, 1.112679488337226e+00, 2.225358976674450e+00, 1.112679488337226e+00, 5.394678593426773e-02, 1.078935718688195e-01, 5.394678593426773e-02, 2.049020666761091e-02, 4.098041306722831e-02, 2.049020666761091e-02, 2.564495475719458e-02, 5.128990948418485e-02, 2.564495475719458e-02, 1.021013769834876e+00, 2.042027539669752e+00, 1.021013769834876e+00, 9.194811739520795e-02, 1.838962348334107e-01, 9.194811739520795e-02, 9.194811735800820e-02, 1.838962347189739e-01, 9.194811735800820e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.468586610594438e-04, 4.468586610594437e-04, 4.468734111603825e-04, 4.468734111603828e-04, 4.469362559283980e-04, 4.469362559283980e-04, 4.467183157533957e-04, 4.467183157533956e-04, 4.468328349050829e-04, 4.468328349050829e-04, 4.468328349050829e-04, 4.468328349050829e-04, 3.319118667582541e-03, 3.319118667582539e-03, 3.320747574896646e-03, 3.320747574896644e-03, 3.364784936723339e-03, 3.364784936723340e-03, 3.358378539844679e-03, 3.358378539844680e-03, 3.354631735429015e-03, 3.354631735429015e-03, 3.354631735429015e-03, 3.354631735429015e-03, -1.447432994856079e-02, -1.447432994856081e-02, -1.449452409603214e-02, -1.449452409603213e-02, -1.484154279608941e-02, -1.484154279608940e-02, -1.317209347466825e-02, -1.317209347466825e-02, -1.366084116222657e-02, -1.366084116222661e-02, -1.366084116222657e-02, -1.366084116222661e-02, -1.141298813684496e-01, -1.141298813684495e-01, -1.096129045202731e-01, -1.096129045202734e-01, -1.354652001511735e-02, -1.354652001511735e-02, -1.104758240580762e-01, -1.104758240580764e-01, -1.031430318378359e-01, -1.031430318378354e-01, -1.031430318378362e-01, -1.031430318378362e-01, -1.302906385050874e-04, -1.302906385050752e-04, -1.569009073742318e-04, -1.569009073742764e-04, -8.178791491966358e-03, -8.178791491966358e-03, -1.993120036547624e-05, -1.993120036547624e-05, -4.551101515808898e-05, -4.551101515806473e-05, -4.551101515811932e-05, -4.551101515811932e-05, 7.858035434379433e-03, 7.858035434379433e-03, 7.948109761218122e-03, 7.948109761218118e-03, 7.863675723007739e-03, 7.863675723007741e-03, 7.943119110094998e-03, 7.943119110094998e-03, 7.902723925530139e-03, 7.902723925530139e-03, 7.902723925530139e-03, 7.902723925530139e-03, 7.714120210391004e-03, 7.714120210391012e-03, 8.437959056321860e-03, 8.437959056321854e-03, 7.272933942799258e-03, 7.272933942799259e-03, 7.935620836180194e-03, 7.935620836180188e-03, 8.329518138257410e-03, 8.329518138257410e-03, 8.329518138257410e-03, 8.329518138257410e-03, 8.034730330546579e-02, 8.034730330546577e-02, 1.685392819954443e-02, 1.685392819954443e-02, 5.822471087167292e-02, 5.822471087167294e-02, 4.274027317221819e-02, 4.274027317221823e-02, 7.678519514282157e-02, 7.678519514282157e-02, 7.678519514282157e-02, 7.678519514282159e-02, -6.041036614810191e-02, -6.041036614810223e-02, -1.043970531692369e-01, -1.043970531692366e-01, -5.403061774718565e-02, -5.403061774718536e-02, 7.163127906414542e-03, 7.163127906414542e-03, -1.095205377200766e-01, -1.095205377200764e-01, -1.095205377200748e-01, -1.095205377200749e-01, -6.525159533649502e-06, -6.525159533692414e-06, -1.650743388453001e-05, -1.650743388453001e-05, -6.138508098490069e-05, -6.138508098503710e-05, -2.951003200839715e-02, -2.951003200839696e-02, -3.807024993213784e-05, -3.807024993234439e-05, -3.807024993218211e-05, -3.807024993213785e-05, 6.323992719353749e-01, 6.323992719353749e-01, 3.385975001471596e-01, 3.385975001471596e-01, 4.189615184826475e-01, 4.189615184826481e-01, 5.021717828252078e-01, 5.021717828252082e-01, 4.583057036927432e-01, 4.583057036927430e-01, 4.583057036927432e-01, 4.583057036927430e-01, 5.046129986363510e-01, 5.046129986363510e-01, 1.220176693001589e-01, 1.220176693001589e-01, 1.170443781134452e-01, 1.170443781134453e-01, 9.828807061644149e-02, 9.828807061644150e-02, 1.019689590568225e-01, 1.019689590568226e-01, 1.019689590568225e-01, 1.019689590568226e-01, 2.050386782578674e-02, 2.050386782578674e-02, -7.957863733186897e-02, -7.957863733186887e-02, -4.115121558703645e-02, -4.115121558703645e-02, 4.905768122544440e-02, 4.905768122544443e-02, 1.234843811723864e-02, 1.234843811723854e-02, 1.234843811723854e-02, 1.234843811723851e-02, 9.162235521877571e-02, 9.162235521877576e-02, -7.430083092467721e-03, -7.430083092468000e-03, -1.437226377205219e-02, -1.437226377205239e-02, 1.171043860544698e-01, 1.171043860544697e-01, -6.302408900947355e-02, -6.302408900947362e-02, -6.302408900947355e-02, -6.302408900947362e-02, -1.654203184945042e-04, -1.654203184945156e-04, -4.355881264537236e-07, -4.355881264656328e-07, -1.086342815010573e-05, -1.086342815010573e-05, -5.990829687175434e-02, -5.990829687175545e-02, -4.385504763256367e-05, -4.385504763256367e-05, -4.385504763242016e-05, -4.385504763248636e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
