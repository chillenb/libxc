
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.485409417284428e-01, -1.485385194698480e-01, -1.485287785894726e-01, -2.996160482427287e-01, -3.395483958613496e-01, -3.796367978748775e-01, 8.205027255504127e-02, 1.298625532547150e-01, 1.268126338005846e-01, 1.280507437087224e-01, 1.279126318554753e-01, 8.010414547928879e-02, -2.400031889789980e-01, 1.227445633742097e-02, 1.976911589119650e-01, 1.139230327285933e-01, -2.675120488099538e-01, 1.953456992186759e-01, 3.534875396730884e-02, -3.861905655598209e-02, 1.348504584485831e-01, 2.664012320841145e-02, 6.073630387742205e-02, 6.014429745244398e-02, -1.663014497826969e-02, -1.733874864123782e-02, -5.675223560810722e-02, -1.042518232881095e-02, -1.081913541145132e-02, -1.081913541145129e-02, -2.741853102368123e-01, -3.460350916273228e-01, -3.443145607433138e-01, -3.459246367224281e-01, -2.136565188438641e-01, -2.748150951072051e-01, 1.125770363950025e-01, 1.021013011270003e-01, 1.854915459981649e-01, 1.735660324047029e-01, 3.851543534737639e-02, 1.026883848160005e-01, -5.369431728026278e-02, -1.117199621878327e-01, 1.680500899362313e-02, -4.989003939567929e-02, -6.405034524177687e-02, -6.364856877760344e-02, -3.819965922446011e-02, 2.762359368022252e-02, -4.980082161972271e-02, -1.084203735011111e-01, -1.571917853910218e-02, -1.571917853910239e-02, -8.288024380121715e-03, -1.022167164132038e-02, -8.034540947046505e-03, -6.044931819783515e-02, -8.948385579288155e-03, -8.948385579288164e-03, -1.640484603107373e-01, -1.368939038298922e-01, -6.002633520682557e-02, -1.143995078995663e-01, -6.515312035854355e-02, -1.095933447775052e-01, -1.211898459673333e-01, -4.122317834603719e-02, -6.570003503841780e-02, -1.032874870940968e-01, -8.849006175615713e-02, -7.717838804024528e-02, -7.824767040694382e-02, 4.203908497601752e-02, 4.727580259951338e-02, 2.172764413121473e-02, 3.499611316485024e-02, 3.544755432486819e-02, 3.024662764509058e-02, -2.017704170477782e-01, -6.184623109524420e-02, -8.357790704164909e-03, -4.262543629814151e-02, -4.262543629814153e-02, -7.360673425445242e-02, -3.085839101975211e-03, -2.013516492381060e-02, -2.747081130124746e-01, -8.447063422436873e-03, -8.447183754380964e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.333912076995191e-02, -2.333946721633677e-02, -2.333169675098020e-02, -2.333228094036411e-02, -2.330279130189348e-02, -2.330214547906510e-02, -6.389208207931425e-01, -6.389245966839480e-01, -8.321882207851408e-01, -8.321955154592442e-01, -1.034558109321113e+00, -1.034566414215672e+00, -5.727117324979489e-01, -5.727106869218587e-01, -6.511381154926561e-01, -6.511352797513263e-01, -6.545607567205011e-01, -6.545643989187369e-01, -6.532037984146262e-01, -6.532063103467652e-01, -6.532994244814221e-01, -6.533662954792957e-01, -5.737610026256021e-01, -5.737885314988457e-01, 2.220689247209772e-01, 2.239659625820195e-01, -1.341653621310736e-01, -1.333762125607275e-01, 6.786181623986946e-02, 6.976966783002102e-02, -1.000661286459067e-01, -1.001603042674927e-01, 2.082727802689158e-01, 1.731964258392766e-01, 3.048433622109447e-02, 4.818914642549296e-02, -7.514547329669433e-02, -7.216324509339975e-02, -1.367730441249629e-01, -1.264529232071961e-01, 7.618467046354076e-02, 7.317935317985202e-02, 1.500960061912322e-01, 1.497915199128933e-01, 1.590284409799899e-01, 2.407193487882539e-01, 1.562771327584808e-01, 2.359417234933250e-01, -2.216510213782836e-02, -2.031736558349333e-02, -2.322566897726662e-02, -2.103349139052200e-02, -6.026090402883574e-02, -5.376112546784854e-02, -1.329776336016090e-02, -1.360635717760383e-02, -1.203289985917999e-02, -2.363336313685377e-02, -1.203289985917986e-02, -2.363336313685315e-02, -4.364551625285362e-01, -4.365530649987855e-01, -6.553448936974866e-01, -6.554768920453352e-01, -6.543367201017374e-01, -6.544672281442822e-01, -6.552812858461540e-01, -6.554102831051211e-01, -2.683582539675416e-01, -2.684339103794633e-01, -4.369340652782299e-01, -4.370339122235351e-01, -3.968477667813551e-01, -3.968425985843555e-01, -4.158391951571851e-01, -4.158150888563619e-01, -4.139783837409590e-01, -4.144339613009949e-01, -4.415343975543771e-01, -4.419734121316675e-01, -3.085363645774515e-01, -3.086870685351430e-01, -4.149342993108153e-01, -4.145422205554110e-01, -2.422970376276522e-01, -2.426089644141454e-01, -1.711420508832045e-01, -1.710627075738329e-01, -3.536668187022601e-01, -3.529998113708444e-01, -3.116695996684594e-01, -3.080582315653682e-01, -2.265970318696154e-01, -2.332223483605922e-01, -2.915372808844438e-01, -2.981290302878941e-01, 5.123935921170369e-02, 5.209043670089827e-02, 7.594676201751064e-04, 1.114833911231456e-03, 2.242492323195777e-04, 6.857203178681999e-03, -4.907906684642879e-01, -4.908815347771406e-01, 2.882080413393626e-02, 3.423931801440476e-02, 2.882080413393614e-02, 3.423931801440584e-02, -1.103201275801688e-02, -1.047807787108440e-02, -1.333066249018089e-02, -1.306054683205808e-02, -1.082659685566281e-02, -1.002730952079189e-02, -3.603535917845318e-02, -3.521095182077259e-02, -1.521821206553095e-02, -1.012020076317640e-02, -1.521821206553070e-02, -1.012020076317664e-02, -1.955628374090537e-01, -1.946318416399675e-01, -1.560302757114516e-01, -1.553356229004932e-01, -1.552063544208959e-01, -1.547365662814445e-01, -1.763856922549266e-01, -1.757075353611398e-01, -1.698793531831780e-01, -1.693718370274911e-01, -1.656726323106578e-01, -1.650340587108641e-01, -1.913106633465967e-01, -1.906708196326309e-01, -1.722556197577616e-01, -1.718050631954672e-01, -1.819244679436453e-01, -1.813546869955503e-01, -1.453316512415584e-01, -1.447700133570517e-01, -1.956562023244503e-01, -1.950875588893153e-01, -1.268066472151445e-01, -1.262967384245308e-01, -9.026875568772677e-02, -9.003974555053741e-02, -6.506582359490100e-02, -6.462463798919058e-02, -1.078990619450085e-01, -1.072410857967869e-01, -1.795017599485361e-01, -1.792361128549644e-01, -1.399731332428757e-01, -1.399938139124209e-01, -1.403020091808302e-01, -1.403223807845251e-01, -3.200482388231449e-01, -3.200418183951503e-01, -2.369467393355977e-01, -2.340797679145413e-01, -5.265767957766734e-02, -4.833012990159467e-02, -1.961868005516626e-01, -1.952143513674502e-01, 2.327360049280032e-02, 2.853962483907116e-02, 2.327360049280002e-02, 2.853962483907248e-02, -9.604730423486611e-02, -9.112869400121566e-02, -4.051457716864248e-03, -4.039786374075246e-03, -2.736875787036201e-02, -2.524892697001409e-02, -2.568118257050361e-01, -2.472863415443519e-01, -1.390409620474950e-02, -9.628898179842702e-03, -1.390497898353728e-02, -9.629646771606147e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.632785931957678e-08, -3.265571863915356e-08, -1.632785931957678e-08, -1.632887466682591e-08, -3.265774933365181e-08, -1.632887466682591e-08, -1.633285066769897e-08, -3.266570133539793e-08, -1.633285066769897e-08, -1.425234559056972e-09, -2.850469118113944e-09, -1.425234559056972e-09, -7.354185473271229e-10, -1.470837094654246e-09, -7.354185473271229e-10, -3.588059683387984e-10, -7.176119366775968e-10, -3.588059683387984e-10, 2.782625258182215e-06, 5.565250516364430e-06, 2.782625258182215e-06, 1.161256126692956e-06, 2.322512253385912e-06, 1.161256126692956e-06, 1.156265961286616e-06, 2.312531922573232e-06, 1.156265961286616e-06, 1.157782722783320e-06, 2.315565445566639e-06, 1.157782722783320e-06, 1.158223485580068e-06, 2.316446971160136e-06, 1.158223485580068e-06, 2.781875806052676e-06, 5.563751612105352e-06, 2.781875806052676e-06, 6.335694486869828e-02, 1.267138897373966e-01, 6.335694486869828e-02, 1.859915321086326e-02, 3.719830642172654e-02, 1.859915321086326e-02, 2.928743004986056e-03, 5.857486009972111e-03, 2.928743004986056e-03, 9.278623621720470e-03, 1.855724724344094e-02, 9.278623621720470e-03, 7.353940776756569e-02, 1.470788155351314e-01, 7.353940776756569e-02, 3.020704927012354e-03, 6.041409854024708e-03, 3.020704927012354e-03, 3.566566399034662e+00, 7.133132798069326e+00, 3.566566399034662e+00, 7.116630922041701e+00, 1.423326184408340e+01, 7.116630922041701e+00, 2.498103109206227e-03, 4.996206218412454e-03, 2.498103109206227e-03, 6.574359839129645e-01, 1.314871967825927e+00, 6.574359839129645e-01, 2.531218474274791e-01, 5.062436948549591e-01, 2.531218474274791e-01, 2.793335610221285e-01, 5.586671220442585e-01, 2.793335610221285e-01, 3.288377162246827e-01, 6.576754324553157e-01, 3.288377162246827e-01, 2.176956152827970e-01, 4.353912305644070e-01, 2.176956152827970e-01, 9.437216675665449e-01, 1.887443335133250e+00, 9.437216675665449e-01, 8.686892615836747e-02, 1.737378523009230e-01, 8.686892615836747e-02, 5.230371976087548e-03, 1.046074395444609e-02, 5.230371976087548e-03, 5.230371972114599e-03, 1.046074394576695e-02, 5.230371972114599e-03, -2.047986186353972e-06, -4.095972372707945e-06, -2.047986186353972e-06, -1.146559019335797e-06, -2.293118038671595e-06, -1.146559019335797e-06, -1.126989304064251e-06, -2.253978608128502e-06, -1.126989304064251e-06, -1.145304435470052e-06, -2.290608870940103e-06, -1.145304435470052e-06, -3.399294023506632e-06, -6.798588047013265e-06, -3.399294023506632e-06, -2.064154424152369e-06, -4.128308848304737e-06, -2.064154424152369e-06, 5.298181244006946e-05, 1.059636248801389e-04, 5.298181244006946e-05, 5.024115995513144e-05, 1.004823199102629e-04, 5.024115995513144e-05, 2.179676422771757e-05, 4.359352845543515e-05, 2.179676422771757e-05, 2.115938274403501e-05, 4.231876548807003e-05, 2.115938274403501e-05, 9.861070714579245e-05, 1.972214142915849e-04, 9.861070714579245e-05, 5.046422651424877e-05, 1.009284530284975e-04, 5.046422651424877e-05, 3.207691848819789e-03, 6.415383697639578e-03, 3.207691848819789e-03, -1.039116822812328e-02, -2.078233645624657e-02, -1.039116822812328e-02, 8.962663071839566e-03, 1.792532614367913e-02, 8.962663071839566e-03, 2.060131296223774e-03, 4.120262592447547e-03, 2.060131296223774e-03, 2.608520780999283e-04, 5.217041561998567e-04, 2.608520780999283e-04, 1.730614794773436e-04, 3.461229589546873e-04, 1.730614794773436e-04, 3.956105604041791e-01, 7.912211208083626e-01, 3.956105604041791e-01, 1.925017383759525e+00, 3.850034767519050e+00, 1.925017383759525e+00, 2.549362924108009e+00, 5.098725848216008e+00, 2.549362924108009e+00, -3.707750547112147e-06, -7.415501094224296e-06, -3.707750547112147e-06, 4.883331107402629e+00, 9.766662214805256e+00, 4.883331107402629e+00, 4.883331107402619e+00, 9.766662214805244e+00, 4.883331107402619e+00, 2.179335187706141e-02, 4.358670373853075e-02, 2.179335187706141e-02, 8.681618877285845e-03, 1.736323776213607e-02, 8.681618877285845e-03, 9.972030625416926e-01, 1.994406124907570e+00, 9.972030625416926e-01, 2.698623800989264e+00, 5.397247601978550e+00, 2.698623800989264e+00, 2.295087929853445e-01, 4.590175859570234e-01, 2.295087929853445e-01, 2.295087929856524e-01, 4.590175859477131e-01, 2.295087929856524e-01, -1.420391879914305e-01, -2.840783759828610e-01, -1.420391879914305e-01, -8.019759533948843e-02, -1.603951906789769e-01, -8.019759533948843e-02, -1.315992983884801e-01, -2.631985967769603e-01, -1.315992983884801e-01, -1.295260530985278e-01, -2.590521061970556e-01, -1.295260530985278e-01, -1.395233595193379e-01, -2.790467190386758e-01, -1.395233595193379e-01, -1.204175144109966e-01, -2.408350288219932e-01, -1.204175144109966e-01, -1.617192829649233e-01, -3.234385659298467e-01, -1.617192829649233e-01, 2.691914634286414e-02, 5.383829268572828e-02, 2.691914634286414e-02, -3.060920566381069e-03, -6.121841132762138e-03, -3.060920566381069e-03, -2.424632904981885e-02, -4.849265809963771e-02, -2.424632904981885e-02, -1.066646941083944e-02, -2.133293882167888e-02, -1.066646941083944e-02, -1.559274695319579e-02, -3.118549390639157e-02, -1.559274695319579e-02, -8.469846218142726e-03, -1.693969243628545e-02, -8.469846218142726e-03, 1.198805109478842e+00, 2.397610218957684e+00, 1.198805109478842e+00, 6.925794749802580e-01, 1.385158949960516e+00, 6.925794749802580e-01, 1.932532460463720e-01, 3.865064920927441e-01, 1.932532460463720e-01, 4.147267177984818e-01, 8.294534355969636e-01, 4.147267177984818e-01, 4.128560361558669e-01, 8.257120723117337e-01, 4.128560361558669e-01, 2.358474162182323e-02, 4.716948324364646e-02, 2.358474162182323e-02, 1.374573556021113e+04, 2.749147112042226e+04, 1.374573556021113e+04, 2.179553384385212e-01, 4.359106768770433e-01, 2.179553384385212e-01, 1.653482620724827e-01, 3.306965241449653e-01, 1.653482620724827e-01, 7.379637128854666e-01, 1.475927425770924e+00, 7.379637128854666e-01, 7.379637128854527e-01, 1.475927425770916e+00, 7.379637128854527e-01, 3.309311296427872e+06, 6.618622592855743e+06, 3.309311296427872e+06, 1.178274919068075e-03, 2.356550053497327e-03, 1.178274919068075e-03, 1.302977370323716e+09, 2.605954740647432e+09, 1.302977370323716e+09, 8.139983283872443e+02, 1.627996656774489e+03, 8.139983283872443e+02, 3.744164502709855e-02, 7.488329007439784e-02, 3.744164502709855e-02, 7.565922939787450e+00, 1.513184587975033e+01, 7.565922939787450e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.877377683527494e-05, -7.877377683527486e-05, -7.877855240230815e-05, -7.877855240230822e-05, -7.879757294421666e-05, -7.879757294421664e-05, 2.706145914008288e-04, 2.706145914008288e-04, 3.628721623044243e-04, 3.628721623044244e-04, 4.555645614818950e-04, 4.555645614818950e-04, 3.558257135657338e-03, 3.558257135657336e-03, 4.761193351963127e-03, 4.761193351963126e-03, 4.807449860281778e-03, 4.807449860281780e-03, 4.788067235539172e-03, 4.788067235539172e-03, 4.790964099711636e-03, 4.790964099711636e-03, 3.579101388149256e-03, 3.579101388149256e-03, -4.694791579169626e-02, -4.694791579169627e-02, -1.963077624240121e-02, -1.963077624240120e-02, -6.637972884055561e-03, -6.637972884055545e-03, -1.130703058205341e-02, -1.130703058205341e-02, -4.427639642583664e-02, -4.427639642583667e-02, -4.669663140994082e-03, -4.669663140994118e-03, -1.357552087294999e-01, -1.357552087294998e-01, -1.713919203007321e-01, -1.713919203007323e-01, -1.100126833316133e-02, -1.100126833316133e-02, -1.104191678856929e-01, -1.104191678856931e-01, -1.021292713171364e-01, -1.021292713171359e-01, -1.021774355155688e-01, -1.021774355155687e-01, -1.302906533240981e-04, -1.302906533240859e-04, -1.569009203688629e-04, -1.569009203689075e-04, -8.178902523449732e-03, -8.178902523449732e-03, -1.993120056542358e-05, -1.993120056542358e-05, -4.551101483440466e-05, -4.551101483438041e-05, -4.551101483443500e-05, -4.551101483443500e-05, 5.444684957845963e-03, 5.444684957845962e-03, 7.971871567925169e-03, 7.971871567925167e-03, 7.886828576309393e-03, 7.886828576309395e-03, 7.966409233914644e-03, 7.966409233914644e-03, 3.352836283628318e-03, 3.352836283628317e-03, 5.480590435120370e-03, 5.480590435120369e-03, 5.219960848640114e-03, 5.219960848640121e-03, 5.793939442785149e-03, 5.793939442785143e-03, 7.709834286552276e-03, 7.709834286552278e-03, 8.320661478758635e-03, 8.320661478758630e-03, 2.404722540985281e-03, 2.404722540985281e-03, 5.763436768010788e-03, 5.763436768010788e-03, 7.096204357910975e-02, 7.096204357910975e-02, 9.619958140400692e-02, 9.619958140400700e-02, 9.722539424696156e-02, 9.722539424696160e-02, 1.115755779343877e-01, 1.115755779343878e-01, 7.273391901114465e-02, 7.273391901114465e-02, 1.030591051665493e-01, 1.030591051665494e-01, -6.041440742986148e-02, -6.041440742986180e-02, -1.071633632454011e-01, -1.071633632454009e-01, -5.401760815091037e-02, -5.401760815091009e-02, 1.847389026786862e-02, 1.847389026786862e-02, -1.094662262570141e-01, -1.094662262570139e-01, -1.094662262570123e-01, -1.094662262570125e-01, -6.525159537856402e-06, -6.525159537899314e-06, -1.650743385122091e-05, -1.650743385122091e-05, -6.138508239129158e-05, -6.138508239142800e-05, -2.951047187507971e-02, -2.951047187507952e-02, -3.807025037149314e-05, -3.807025037169968e-05, -3.807025037153740e-05, -3.807025037149314e-05, 7.297315648237777e-01, 7.297315648237777e-01, 3.852503069409649e-01, 3.852503069409650e-01, 2.261585402142993e-01, 2.261585402142997e-01, 4.594129635900201e-01, 4.594129635900205e-01, 2.728145818784012e-01, 2.728145818784012e-01, 4.077059405740779e-01, 4.077059405740779e-01, 5.727318400829395e-01, 5.727318400829396e-01, 4.340961662509382e-02, 4.340961662509383e-02, 7.660303594659315e-02, 7.660303594659322e-02, 1.193703861028779e-01, 1.193703861028779e-01, 1.138386494515407e-01, 1.138386494515407e-01, 5.848289418353884e-02, 5.848289418353886e-02, 1.656747412675917e-02, 1.656747412675916e-02, -9.258594742219778e-02, -9.258594742219768e-02, -6.885041108281426e-02, -6.885041108281426e-02, 2.254638556444663e-02, 2.254638556444663e-02, -3.125577909610724e-02, -3.125577909610732e-02, -3.081535354048454e-02, -3.081535354048453e-02, 1.110824446855155e-01, 1.110824446855156e-01, -7.570729539697165e-03, -7.570729539697413e-03, -1.437220650510432e-02, -1.437220650510452e-02, 8.785541237242828e-02, 8.785541237242823e-02, -6.302620355861341e-02, -6.302620355861346e-02, -6.302620355861341e-02, -6.302620355861346e-02, -1.700003156568049e-04, -1.700003156568049e-04, -4.355881263961600e-07, -4.355881264080691e-07, -1.117000493629528e-05, -1.117000493629528e-05, -5.925683421075807e-02, -5.925683421075888e-02, -4.385504744602686e-05, -4.385504744602686e-05, -4.385505504980768e-05, -4.385505504987389e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
