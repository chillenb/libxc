
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revscan_vv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.885590973659031e-02, -2.885594215464640e-02, -2.885552725050275e-02, -2.885502826620110e-02, -2.885536969807192e-02, -2.885536969807192e-02, -4.373793754369461e-02, -4.374064717360969e-02, -4.379641122627939e-02, -4.364273851886353e-02, -4.371445875477133e-02, -4.371445875477133e-02, -3.456613973175711e-02, -3.441789160918464e-02, -3.083398893946895e-02, -3.033579721694260e-02, -3.048870324898213e-02, -3.048870324898213e-02, -1.388051613653425e-02, -1.442404697949735e-02, -4.311261884591026e-02, -1.261848857658153e-02, -1.009175868557996e-02, -1.009175868557996e-02, -6.924744587286404e-04, -7.459373317922356e-04, -4.282541667986839e-03, -3.530456291250162e-04, -4.256959845452647e-04, -4.256959845452647e-04, -2.795686586451189e-02, -2.796657761337148e-02, -2.795575005368130e-02, -2.796438543930478e-02, -2.796259738915107e-02, -2.796259738915107e-02, -2.490093861845212e-02, -2.468986095842015e-02, -2.432527316708124e-02, -2.413485494929020e-02, -2.506178408158764e-02, -2.506178408158764e-02, -3.063842437457346e-02, -3.767527728217466e-02, -3.558670188887250e-02, -4.874000391719224e-02, -3.058873927760512e-02, -3.058873927760510e-02, -9.386964572161347e-03, -1.307357318564557e-02, -8.951173424058335e-03, -6.395496479318066e-02, -1.017999697272934e-02, -1.017999697272933e-02, -2.618525625660895e-04, -3.501890858499757e-04, -3.115388005883968e-04, -6.769408423881578e-03, -3.427654559771256e-04, -3.427654559771218e-04, -2.662936783280700e-02, -2.607796897233509e-02, -2.626846201313106e-02, -2.642920836070782e-02, -2.634930160905689e-02, -2.634930160905689e-02, -2.836883201171790e-02, -2.210912187399002e-02, -2.372438764073959e-02, -2.547525579141774e-02, -2.465436119168640e-02, -2.465436119168640e-02, -4.161745561074712e-02, -1.419283741628941e-02, -1.752397198765667e-02, -2.640864119060540e-02, -2.086912347651608e-02, -2.086912347651607e-02, -2.492707364816042e-02, -3.982337648390101e-03, -5.404911605675463e-03, -2.722704963499805e-02, -8.230130153861950e-03, -8.230130153861960e-03, -1.030317137921337e-03, -7.366433542900284e-05, -1.835080815816373e-04, -7.455007848018427e-03, -3.223939236251990e-04, -3.223939236251906e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revscan_vv10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.704575089163488e-02, -4.704586925220795e-02, -4.704551020143346e-02, -4.704570978843815e-02, -4.704411515252689e-02, -4.704389449869781e-02, -4.704658840702920e-02, -4.704728852605359e-02, -4.704491836551458e-02, -4.704608982476761e-02, -4.704491836551458e-02, -4.704608982476761e-02, -8.955989064573813e-02, -8.956144246375800e-02, -8.954943115229044e-02, -8.955120419210370e-02, -8.921036411279655e-02, -8.920798360568519e-02, -8.884166264168830e-02, -8.884004215136379e-02, -8.911590638406414e-02, -8.907279613768981e-02, -8.911590638406414e-02, -8.907279613768981e-02, -6.336697451929171e-02, -6.293313351530862e-02, -6.324446019999595e-02, -6.271484745269780e-02, -5.785647686720490e-02, -5.850204477308451e-02, -5.701745188005314e-02, -5.681646234457978e-02, -5.438736569773475e-02, -6.049798152848385e-02, -5.438736569773475e-02, -6.049798152848385e-02, -4.425106301494725e-02, -4.254920922577599e-02, -4.474853096999189e-02, -4.272674539741268e-02, -9.249502937514983e-02, -8.874878852199462e-02, -2.814830859425648e-02, -2.766094974534588e-02, -1.636518911847481e-02, -3.602302546507850e-02, -1.636518911847483e-02, -3.602302546507850e-02, -2.747384013246093e-03, -2.676939683248562e-03, -1.957790277583691e-03, -1.872816420321589e-03, -8.851790950332665e-03, -8.372628700525688e-03, -6.762896998997421e-04, -6.853608485157149e-04, -7.764606579064033e-04, -1.073291691652803e-03, -7.764606579064033e-04, -1.073291691652803e-03, -4.307034202636718e-02, -4.309147398084718e-02, -4.302863416032618e-02, -4.305033098492722e-02, -4.306596710605787e-02, -4.308749084380160e-02, -4.302966761801984e-02, -4.305087400734014e-02, -4.305034906120317e-02, -4.307187297085968e-02, -4.305034906120317e-02, -4.307187297085968e-02, -5.403312259795617e-02, -5.403713698228946e-02, -5.308363399217370e-02, -5.310503344263835e-02, -5.329584945680071e-02, -5.316236947087665e-02, -5.243011977965470e-02, -5.229234303641036e-02, -5.371411534468022e-02, -5.406554281220994e-02, -5.371411534468022e-02, -5.406554281220994e-02, -4.969094308090371e-02, -4.998521227142994e-02, -3.351929446385985e-02, -3.345384355235999e-02, -6.217302080577674e-02, -5.760609704340749e-02, -5.356764580504252e-02, -4.782183835940048e-02, -4.544727461884281e-02, -5.110146251092435e-02, -4.544727461884279e-02, -5.110146251092432e-02, -2.044731923965588e-02, -2.022851139147769e-02, -4.590589466703739e-02, -4.570162863595796e-02, -1.937541891663253e-02, -1.825931422155728e-02, -5.489187965209128e-02, -5.500821321135629e-02, -2.920761726603165e-02, -2.747045189851096e-02, -2.920761726603165e-02, -2.747045189851096e-02, -5.144178926252274e-04, -4.993033368522439e-04, -6.788177957554515e-04, -6.707926054629473e-04, -6.184283032610703e-04, -5.916521764387763e-04, -1.356058635654100e-02, -1.346934385669239e-02, -7.788344707309203e-04, -6.157664374054190e-04, -7.788344707309151e-04, -6.157664374054159e-04, -2.836239662758302e-02, -2.802888570832218e-02, -3.232621382659395e-02, -3.199718084787022e-02, -3.105947842889240e-02, -3.072784554259141e-02, -2.990667887581531e-02, -2.957581123552603e-02, -3.049479671974742e-02, -3.016356355875491e-02, -3.049479671974742e-02, -3.016356355875491e-02, -2.607899113157610e-02, -2.576631405800149e-02, -4.325918136858119e-02, -4.295451627562624e-02, -4.183439303222049e-02, -4.149574564590482e-02, -3.874294396826240e-02, -3.845005895104904e-02, -4.070068900352952e-02, -4.040327713069342e-02, -4.070068900352952e-02, -4.040327713069342e-02, -3.568110506690598e-02, -3.541266413742093e-02, -4.475748985909946e-02, -4.449747746882778e-02, -4.682095136348274e-02, -4.625673601668848e-02, -5.226650919757680e-02, -5.177388141478775e-02, -4.820903653445325e-02, -4.823340075458842e-02, -4.820903653445324e-02, -4.823340075458840e-02, -4.975883725772145e-02, -4.917848621577590e-02, -1.024508072625199e-02, -1.018684011957975e-02, -1.098630577186973e-02, -1.060897363688258e-02, -5.018787953926507e-02, -4.873173700404300e-02, -1.949767561608673e-02, -1.838852039380918e-02, -1.949767561608670e-02, -1.838852039380915e-02, -1.982695621473626e-03, -1.921621456820900e-03, -1.445726271990803e-04, -1.443338994452370e-04, -3.667769964281375e-04, -3.501513836483642e-04, -2.304889323652300e-02, -2.272290026518042e-02, -7.193470849812693e-04, -5.820786517979978e-04, -7.193470849812583e-04, -5.820786517979916e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.034270771996880e-10, 2.068541543993760e-10, 1.034270771996880e-10, 1.034277624580855e-10, 2.068555249161710e-10, 1.034277624580855e-10, 1.034225541776783e-10, 2.068451083553565e-10, 1.034225541776783e-10, 1.034122881161153e-10, 2.068245762322305e-10, 1.034122881161153e-10, 1.034188440930522e-10, 2.068376881861044e-10, 1.034188440930522e-10, 1.034188440930522e-10, 2.068376881861044e-10, 1.034188440930522e-10, 8.780107304221918e-07, 1.756021460844384e-06, 8.780107304221918e-07, 8.788098832956462e-07, 1.757619766591293e-06, 8.788098832956462e-07, 9.004025214271945e-07, 1.800805042854389e-06, 9.004025214271945e-07, 8.929135262611580e-07, 1.785827052522316e-06, 8.929135262611580e-07, 8.934120334759385e-07, 1.786824066951877e-06, 8.934120334759385e-07, 8.934120334759385e-07, 1.786824066951877e-06, 8.934120334759385e-07, 1.732137262803988e-03, 3.464274525607975e-03, 1.732137262803988e-03, 1.715121265270829e-03, 3.430242530541657e-03, 1.715121265270829e-03, 1.328305288885106e-03, 2.656610577770212e-03, 1.328305288885106e-03, 1.277113619908188e-03, 2.554227239816375e-03, 1.277113619908188e-03, 1.303939009647654e-03, 2.607878019295307e-03, 1.303939009647654e-03, 1.303939009647654e-03, 2.607878019295307e-03, 1.303939009647654e-03, 4.768627589798863e-01, 9.537255179597726e-01, 4.768627589798863e-01, 4.727792103967692e-01, 9.455584207935384e-01, 4.727792103967692e-01, 1.076028665862570e-03, 2.152057331725140e-03, 1.076028665862570e-03, 3.940878514512784e-01, 7.881757029025568e-01, 3.940878514512784e-01, 8.710671938720051e-02, 1.742134387744010e-01, 8.710671938720051e-02, 8.710671938720063e-02, 1.742134387744013e-01, 8.710671938720063e-02, 6.238484354273129e+02, 1.247696870854626e+03, 6.238484354273129e+02, 2.403073151146402e+02, 4.806146302292803e+02, 2.403073151146402e+02, 3.197810296570525e+00, 6.395620593141050e+00, 3.197810296570525e+00, 1.748368370415327e+02, 3.496736740830654e+02, 1.748368370415327e+02, 1.288224947963735e+02, 2.576449895927471e+02, 1.288224947963735e+02, 1.288224947963735e+02, 2.576449895927470e+02, 1.288224947963735e+02, 1.383742911545257e-07, 2.767485823090514e-07, 1.383742911545257e-07, 1.389907029353737e-07, 2.779814058707474e-07, 1.389907029353737e-07, 1.383815327082669e-07, 2.767630654165337e-07, 1.383815327082669e-07, 1.389263238592535e-07, 2.778526477185070e-07, 1.389263238592535e-07, 1.386970452401090e-07, 2.773940904802179e-07, 1.386970452401090e-07, 1.386970452401090e-07, 2.773940904802179e-07, 1.386970452401090e-07, 6.761644076071688e-06, 1.352328815214338e-05, 6.761644076071688e-06, 6.440774657891534e-06, 1.288154931578307e-05, 6.440774657891534e-06, 6.445195652639310e-06, 1.289039130527862e-05, 6.445195652639310e-06, 6.157322169106927e-06, 1.231464433821386e-05, 6.157322169106927e-06, 6.738537772003075e-06, 1.347707554400615e-05, 6.738537772003075e-06, 6.738537772003075e-06, 1.347707554400615e-05, 6.738537772003075e-06, 7.165306836930233e-03, 1.433061367386046e-02, 7.165306836930233e-03, 9.238298829004413e-03, 1.847659765800883e-02, 9.238298829004413e-03, 1.027187025400812e-02, 2.054374050801625e-02, 1.027187025400812e-02, 1.735684924467625e-02, 3.471369848935250e-02, 1.735684924467625e-02, 6.941394508219855e-03, 1.388278901643971e-02, 6.941394508219855e-03, 6.941394508219857e-03, 1.388278901643971e-02, 6.941394508219857e-03, 6.208205013340125e-01, 1.241641002668025e+00, 6.208205013340125e-01, 3.441420854859420e-01, 6.882841709718840e-01, 3.441420854859420e-01, 6.723246369359603e-01, 1.344649273871920e+00, 6.723246369359603e-01, 8.232616052371763e-05, 1.646523210474353e-04, 8.232616052371763e-05, 1.023067805867025e+00, 2.046135611734050e+00, 1.023067805867025e+00, 1.023067805867025e+00, 2.046135611734050e+00, 1.023067805867025e+00, 3.197911112220246e+02, 6.395822224440491e+02, 3.197911112220246e+02, 1.993211178080502e+02, 3.986422356161005e+02, 1.993211178080502e+02, 1.005926662508053e+03, 2.011853325016106e+03, 1.005926662508053e+03, 1.414585117726936e+00, 2.829170235453872e+00, 1.414585117726936e+00, 4.279372922555161e+02, 8.558745845110324e+02, 4.279372922555161e+02, 4.279372922555162e+02, 8.558745845110325e+02, 4.279372922555162e+02, 9.248021923540746e-03, 1.849604384708149e-02, 9.248021923540746e-03, 8.232741184065497e-03, 1.646548236813100e-02, 8.232741184065497e-03, 8.579762642332267e-03, 1.715952528466453e-02, 8.579762642332267e-03, 8.875279902502906e-03, 1.775055980500581e-02, 8.875279902502906e-03, 8.727063989149141e-03, 1.745412797829828e-02, 8.727063989149141e-03, 8.727063989149141e-03, 1.745412797829828e-02, 8.727063989149141e-03, 1.185635116644570e-02, 2.371270233289138e-02, 1.185635116644570e-02, 7.043615537836416e-03, 1.408723107567283e-02, 7.043615537836416e-03, 7.789781895191450e-03, 1.557956379038290e-02, 7.789781895191450e-03, 9.221643349972457e-03, 1.844328669994491e-02, 9.221643349972457e-03, 8.488117281449627e-03, 1.697623456289925e-02, 8.488117281449627e-03, 8.488117281449629e-03, 1.697623456289926e-02, 8.488117281449629e-03, 8.160354208999233e-03, 1.632070841799847e-02, 8.160354208999233e-03, 1.378285721891958e-01, 2.756571443783915e-01, 1.378285721891958e-01, 8.171484617794203e-02, 1.634296923558841e-01, 8.171484617794203e-02, 4.631395830929932e-02, 9.262791661859864e-02, 4.631395830929932e-02, 6.075705486845253e-02, 1.215141097369051e-01, 6.075705486845253e-02, 6.075705486845252e-02, 1.215141097369051e-01, 6.075705486845252e-02, 1.373398248773578e-02, 2.746796497547157e-02, 1.373398248773578e-02, 7.310843556372970e+00, 1.462168711274594e+01, 7.310843556372970e+00, 1.796333824263475e+00, 3.592667648526949e+00, 1.796333824263475e+00, 7.742368033532317e-02, 1.548473606706463e-01, 7.742368033532317e-02, 1.674170171483180e+00, 3.348340342966361e+00, 1.674170171483180e+00, 1.674170171483171e+00, 3.348340342966341e+00, 1.674170171483171e+00, 3.319106454484246e+01, 6.638212908968492e+01, 3.319106454484246e+01, 4.834420984795210e+03, 9.668841969590421e+03, 4.834420984795210e+03, 9.286143915512507e+02, 1.857228783102502e+03, 9.286143915512507e+02, 3.543190812258687e+00, 7.086381624517375e+00, 3.543190812258687e+00, 5.731987642771378e+02, 1.146397528554276e+03, 5.731987642771378e+02, 5.731987642771429e+02, 1.146397528554286e+03, 5.731987642771429e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.333295091269756e-05, -1.333295091269755e-05, -1.333320804528911e-05, -1.333320804528912e-05, -1.333358532078522e-05, -1.333358532078521e-05, -1.332976435885075e-05, -1.332976435885074e-05, -1.333187532388993e-05, -1.333187532388993e-05, -1.333187532388993e-05, -1.333187532388993e-05, -7.136805210457055e-05, -7.136805210457051e-05, -7.178095673542411e-05, -7.178095673542407e-05, -8.364941044675765e-05, -8.364941044675766e-05, -8.506424042634334e-05, -8.506424042634338e-05, -8.226413340854904e-05, -8.226413340854904e-05, -8.226413340854904e-05, -8.226413340854904e-05, -2.036261524385215e-03, -2.036261524385215e-03, -2.014898355770097e-03, -2.014898355770096e-03, -1.559562671503486e-03, -1.559562671503485e-03, -1.664263888417341e-03, -1.664263888417341e-03, -1.653490142635841e-03, -1.653490142635842e-03, -1.653490142635841e-03, -1.653490142635842e-03, -3.300123545025441e-02, -3.300123545025441e-02, -3.388519439197200e-02, -3.388519439197202e-02, -4.907563588519237e-04, -4.907563588519237e-04, -9.226051975332317e-03, -9.226051975332323e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.930626206739001e-03, -1.930626206739003e-03, -7.094671099207938e-04, -7.094671099207941e-04, -9.397514952361090e-04, -9.397514952361090e-04, -1.450740370102632e-06, -1.450740370102632e-06, -1.373047615552145e-05, -1.373047615552147e-05, -1.373047615552108e-05, -1.373047615552109e-05, -2.782009736181713e-04, -2.782009736181712e-04, -2.797684479637039e-04, -2.797684479637039e-04, -2.782538638537592e-04, -2.782538638537593e-04, -2.796379803214936e-04, -2.796379803214937e-04, -2.790038669845508e-04, -2.790038669845506e-04, -2.790038669845508e-04, -2.790038669845506e-04, -5.704017795187754e-04, -5.704017795187756e-04, -5.598946756345436e-04, -5.598946756345432e-04, -5.384237346805752e-04, -5.384237346805752e-04, -5.280642084467184e-04, -5.280642084467185e-04, -5.806676285179541e-04, -5.806676285179540e-04, -5.806676285179541e-04, -5.806676285179540e-04, -1.517573612665497e-02, -1.517573612665497e-02, -2.426257949369313e-02, -2.426257949369315e-02, -1.284209346774758e-02, -1.284209346774758e-02, -1.956278523541621e-02, -1.956278523541623e-02, -1.561839461143058e-02, -1.561839461143057e-02, -1.561839461143057e-02, -1.561839461143057e-02, -4.555539749822896e-03, -4.555539749822899e-03, -2.461784402162293e-02, -2.461784402162295e-02, -3.575367654926297e-03, -3.575367654926299e-03, -3.347859374434195e-03, -3.347859374434195e-03, -1.596630381185218e-02, -1.596630381185218e-02, -1.596630381185218e-02, -1.596630381185218e-02, -4.259430020761050e-08, -4.259430020761049e-08, -2.772982902876050e-07, -2.772982902876050e-07, -4.060894860435883e-06, -4.060894860435882e-06, -1.809105301409704e-03, -1.809105301409705e-03, -1.021013960901946e-06, -1.021013960901946e-06, -1.021013960901936e-06, -1.021013960901936e-06, -2.646236130911224e-02, -2.646236130911225e-02, -2.292001465026408e-02, -2.292001465026408e-02, -2.412180522226308e-02, -2.412180522226311e-02, -2.515333401284320e-02, -2.515333401284322e-02, -2.463408245709130e-02, -2.463408245709129e-02, -2.463408245709130e-02, -2.463408245709129e-02, -2.979698435529143e-02, -2.979698435529145e-02, -1.040779375685471e-02, -1.040779375685472e-02, -1.355920518264706e-02, -1.355920518264707e-02, -1.865324331827661e-02, -1.865324331827661e-02, -1.588231871336558e-02, -1.588231871336558e-02, -1.588231871336558e-02, -1.588231871336558e-02, -2.258922995594433e-02, -2.258922995594434e-02, -1.927821182658173e-02, -1.927821182658172e-02, -1.849517429787060e-02, -1.849517429787060e-02, -1.867938974586469e-02, -1.867938974586470e-02, -1.937548894637734e-02, -1.937548894637733e-02, -1.937548894637734e-02, -1.937548894637732e-02, -1.433041236214866e-02, -1.433041236214867e-02, -3.275429056270045e-03, -3.275429056270048e-03, -1.168331336191072e-03, -1.168331336191071e-03, -2.993925642520213e-02, -2.993925642520213e-02, -6.791768340620515e-03, -6.791768340620519e-03, -6.791768340620461e-03, -6.791768340620462e-03, -3.154238937785060e-06, -3.154238937785061e-06, -7.537321814850785e-10, -7.537321814850784e-10, -2.367847803262713e-06, -2.367847803262712e-06, -1.474392645706687e-02, -1.474392645706687e-02, -2.009962204241751e-06, -2.009962204241750e-06, -2.009962204241664e-06, -2.009962204241665e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
