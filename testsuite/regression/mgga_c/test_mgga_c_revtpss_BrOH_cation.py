
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504590447e-01, -1.645996352769430e-01, -1.646000385289871e-01, -8.693245618514714e-02, -6.141924831709703e-02, -4.689565294907087e-02, -3.510054345664803e-02, -2.577738596404859e-02, -2.591511920392338e-02, -2.585939522696391e-02, -2.586518014714768e-02, -3.531482102754079e-02, -6.701332647008433e-02, -3.345844976469704e-02, -1.137240598266967e-02, -1.858654739210156e-02, -6.628241523783371e-02, -1.203458166430303e-02, -1.272782039692684e-02, -2.133354816495595e-02, -1.191731909922592e-02, -2.443830712133583e-03, -2.695235029961722e-04, -1.709150451753670e-04, -5.889465648482653e-08, -4.426282113127966e-08, -3.327107110323710e-05, -3.613813767655724e-09, -1.470329636154686e-10, -1.470329636048052e-10, -7.501743932935517e-02, -5.192895061867753e-02, -5.182337904197242e-02, -5.192219080896709e-02, -9.015481961279923e-02, -6.993807814116954e-02, -3.267018964370656e-02, -3.362483857047121e-02, -2.134736914397608e-02, -2.204633752639121e-02, -4.879080850469750e-02, -3.356943907590925e-02, -4.050120968692109e-02, -3.931825264397096e-02, -2.729717155729051e-02, -3.237759825241274e-02, -4.028003357782029e-02, -3.366713085067288e-02, -5.988395688268466e-04, -8.004898576981593e-03, -1.129869360870778e-03, -3.798471445779605e-02, -3.488035146493494e-03, -3.488035146493500e-03, -4.887186258940564e-10, -6.056360510633785e-10, -6.598038743604234e-09, -3.210621023066332e-04, -4.478861497901668e-09, -4.478861495841683e-09, -4.415764911773613e-02, -4.300949616993596e-02, -6.383563580100113e-02, -5.662039169895582e-02, -6.385539257642651e-02, -5.628460672417553e-02, -5.715915305128094e-02, -4.670211323731734e-02, -4.236506386680725e-02, -3.826458823078654e-02, -3.598244123239231e-02, -4.518467554385017e-02, -5.665279601523596e-02, -1.322510638708317e-02, -1.705585273322853e-02, -2.701231410886660e-02, -2.380343861068577e-02, -2.243764668444820e-02, -2.563647377797981e-02, -1.432337785401933e-02, -6.174712552007241e-05, -3.227144353277805e-02, -4.659001585344692e-04, -4.659001585344586e-04, -5.037446550363285e-03, -2.152981767884023e-12, -1.374982125405463e-03, -2.268013163367492e-02, -7.032407911538843e-10, -3.547775889809568e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753468101e-01, -1.747373592471579e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.657174640385608e-01, -1.705238138809013e-01, -1.355761311832629e-01, -1.488012938930965e-01, -9.452295510802297e-02, -9.451899982198378e-02, -1.084804423675402e-01, -9.318099855962977e-02, -7.565549307439171e-02, -7.567669077010937e-02, -7.591739956493859e-02, -7.585241908962247e-02, -7.891739749682501e-02, -7.891773720075171e-02, -7.611028842281473e-02, -7.550212604494937e-02, -9.355159585192238e-02, -1.086875601257282e-01, -7.534022876475832e-02, -7.481054072999122e-02, -8.485056709297170e-02, -8.701183034050722e-02, -4.631068684234051e-02, -4.706902388918090e-02, -7.210404439410165e-02, -5.659631861470422e-02, -7.037457509512338e-02, -7.906556863981584e-02, -4.326013862009460e-02, -5.445658020140510e-02, -3.088177198285561e-02, -5.128211025353421e-02, -5.463669064329966e-02, -5.346211975605310e-02, -5.610791063297073e-02, -4.417994447671817e-02, -1.327373248345901e-02, -9.854153624551948e-03, -6.046604082975106e-04, -1.065107618129271e-02, -3.824500099858371e-06, -8.203304426684533e-03, -3.921799223011566e-07, -3.761805972976264e-07, -3.072614551043032e-07, -3.056421307786347e-07, -2.196610288883872e-04, -2.176617195195214e-04, -2.356565869583575e-08, -2.382359236088830e-08, -8.869154097247543e-10, -1.336537701977797e-09, -8.869154102891843e-10, -1.336537701354424e-09, -1.414176733617865e-01, -1.414466592576544e-01, -8.940866671239833e-02, -8.940946986581709e-02, -8.942236664090303e-02, -8.942137818423282e-02, -8.941279967767846e-02, -8.940696743511939e-02, -1.474426134445046e-01, -1.497407863134341e-01, -1.518621418648295e-01, -1.433797311403848e-01, -9.523198982719175e-02, -9.520467946584366e-02, -9.661816168135670e-02, -9.661834441939945e-02, -6.708747856777261e-02, -6.630160489499755e-02, -6.833662100961059e-02, -6.753028173705605e-02, -1.155846335086613e-01, -1.123385233384160e-01, -9.626876914411125e-02, -9.680651169914750e-02, -9.169168612192730e-02, -8.285406300601561e-02, -7.683681431840252e-02, -7.585799677080030e-02, -7.063583147556712e-02, -6.202238428174527e-02, -6.849046251706349e-02, -6.334973815575733e-02, -8.904751992121662e-02, -8.378632767293000e-02, -6.391699849023261e-02, -6.842693837906960e-02, -3.450307711053797e-03, -3.443551426687902e-03, -2.534834482411427e-02, -4.029440788631209e-02, -6.350123456072800e-03, -6.053258810339621e-03, -8.230567464936785e-02, -8.225136876057995e-02, -1.726468756953282e-02, -1.626323975700590e-02, -1.726468756953283e-02, -1.626323975700590e-02, -3.368817807038152e-09, -3.413423940141905e-09, -3.964179766349371e-09, -3.963012258710628e-09, -4.425456722024052e-08, -4.261040470947026e-08, -2.919380792899166e-03, -1.025445253567261e-03, -3.459850153787464e-08, -2.762813170319527e-08, -3.459850153104864e-08, -2.762813169768391e-08, -8.276706040071223e-02, -8.267897664405736e-02, -7.944338811214326e-02, -7.928492040153154e-02, -7.198832468635549e-02, -7.148872356177727e-02, -7.914561524315890e-02, -7.794619635471851e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.934991873368899e-02, -7.820202268425025e-02, -7.646439358105744e-02, -7.613338509390699e-02, -8.055597588926677e-02, -7.832399096045689e-02, -8.596880730961004e-02, -7.922286872789992e-02, -5.870124763762984e-02, -5.853748736716752e-02, -6.112004226460651e-02, -6.082954252536008e-02, -8.443100623588123e-02, -7.959984813751672e-02, -8.602669568242456e-02, -8.466936587096144e-02, -4.638583605013272e-02, -4.609634453060894e-02, -4.613518165359286e-02, -6.135671337024727e-02, -6.649492325155475e-02, -8.011689298978304e-02, -6.393983673899142e-02, -6.392838761595721e-02, -7.623758270560771e-02, -6.140256520945605e-02, -6.359446153960850e-02, -6.153356647511939e-02, -1.773472996354030e-02, -1.753120798266077e-02, -4.412516020268105e-04, -2.276548965431161e-04, -7.112649006730123e-02, -6.874751744639557e-02, -3.832396901795053e-03, -1.627103970366342e-03, -3.832396901794948e-03, -1.627103970366344e-03, -6.593851617928384e-03, -6.257235187311728e-03, -4.244856074314562e-10, 3.637789444710878e-10, -1.869567052566782e-03, -1.724808884064575e-03, -2.767194528635373e-02, -2.688551334493897e-02, -7.112381149794193e-09, -3.549441933792114e-09, -2.624105142757479e-07, -2.215164347323365e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.146882401039348e-09, 1.629376480207870e-08, 8.146882401039348e-09, 8.146791560070185e-09, 1.629358312014037e-08, 8.146791560070185e-09, 8.146359682592905e-09, 1.629271936518581e-08, 8.146359682592905e-09, -6.056646041196589e-10, 1.671724604258341e-09, 8.380836670083946e-10, 5.686836043102321e-10, 1.021083514440385e-09, 5.105034282514705e-10, 1.353353691333974e-10, 1.800545437495687e-10, 1.353151934630815e-10, 1.201779103126886e-06, 1.944070486464002e-06, 1.291024946049733e-06, 7.345712883550696e-07, -2.091483083279312e-07, 7.348250804420893e-07, 7.389859512528564e-07, -2.038165804860399e-07, 7.382693281976546e-07, 7.955253200754461e-07, -8.828025382856523e-08, 7.954937480472315e-07, 7.408447527776124e-07, -2.057436850888355e-07, 7.337056668529259e-07, 1.301455989476167e-06, 1.965406163474694e-06, 1.210851043312856e-06, 7.967772971048313e-03, 1.593554594209663e-02, 7.967772971048313e-03, 1.605518786731339e-03, 5.376048548055394e-03, 2.721754862445212e-03, 1.449490345438125e-03, -1.203658593385988e-03, 1.501774681870972e-03, 1.607992284263831e-03, 1.907310715027967e-03, 1.670039792258530e-03, 8.665498048326500e-03, 1.733099609665300e-02, 8.665498048326500e-03, 1.288911021563283e-03, -1.248861662457695e-03, 1.853787257401254e-03, 8.275160979891406e-01, 1.668824615808100e-01, 7.070878361254856e-01, 5.906232217170597e-01, 1.649735536749783e+00, 8.351222057651291e-01, 3.525312832190529e-04, 4.535960356331582e-04, 3.463437206557479e-04, 8.439384384779784e-01, -1.305777274132972e+00, 7.698498385241394e-01, -2.078511238807345e-02, 8.406341965815092e-02, -1.957412772200056e-02, -2.029715166756100e-02, 6.497732393802749e-02, 2.816393371506590e-02, 9.212350409535704e-02, 1.860500329448588e-01, 9.203787505975945e-02, 6.152555688489871e-02, 1.230511158450757e-01, 5.987671623763739e-02, 1.893897439649053e-01, 3.919738738401829e-01, 1.867714961573086e-01, 2.533335826493644e-02, 5.119595985886337e-02, 2.533603432451491e-02, 2.341417197238383e-04, 4.682834396234413e-04, -2.468422406890640e-03, 2.341417197751724e-04, 4.682834389747207e-04, -2.468422403822640e-03, 5.800945972582644e-07, 1.170906049690044e-06, 5.800432269546213e-07, 1.386803756398226e-07, 3.192039946832406e-07, 1.386013444200018e-07, 1.390447608819207e-07, 3.164833296848927e-07, 1.389494062945184e-07, 1.387382976332341e-07, 3.190311349431364e-07, 1.385908335908439e-07, 5.776252502350845e-07, 1.944698896490428e-06, 9.727932254485032e-07, 7.991734859514056e-07, 1.627399191249370e-06, -8.294269250946158e-07, 1.310438988263227e-05, 2.538043085666142e-05, 1.309784992788980e-05, 1.327058546271375e-05, 2.565425513882526e-05, 1.326579068583154e-05, 1.092056582353582e-05, -6.268871729343174e-06, 1.074663239140150e-05, 1.092675356809758e-05, -5.871040726233584e-06, 1.074594532889944e-05, 2.784360417811265e-05, 5.480678363158535e-05, 1.075247164954736e-05, 1.325925733529303e-05, 2.567253352884153e-05, 1.329328513155287e-05, 9.693686765645578e-03, 1.574228404862494e-02, 3.949143654355851e-04, 7.183943890323753e-03, 1.056623897376521e-02, 6.950739734804734e-03, 8.693618857629790e-03, -2.321184031989865e-03, 6.706615993076016e-03, 7.429457208589567e-03, -3.519558597442427e-05, 6.014611090881699e-03, 9.172031177948823e-03, 1.453378883093494e-02, -2.359417673854469e-03, 4.596404793053570e-03, 3.763662002589974e-04, 5.826650651956478e-03, 1.285687110739458e+00, -2.176782752133062e+00, 1.218301270478538e+00, 3.704574193195889e-01, 1.675033814870192e-01, 3.576479679557344e-01, 3.713406202527282e-01, 7.503196037634970e-01, 3.708175904059396e-01, 1.886818242145974e-05, 9.032692903023667e-06, 1.885385959069734e-05, 6.198406199528314e-01, 1.252714873347383e+00, 6.146583443419351e-01, 6.198406199528310e-01, 1.252714873347384e+00, 6.146583443419348e-01, 6.505093909356888e-03, 1.301018781941073e-02, 6.376735805604104e-03, 1.491292857664410e-03, 5.309483740475794e-03, 1.643219979097958e-03, 2.952811503022708e-01, 5.963006179605165e-01, 2.945391263325951e-01, 1.088405483267372e+00, -3.120571556825178e-01, 1.071053170466695e+00, 6.912251421304372e-02, 1.388064188136081e-01, 6.681047229156280e-02, 6.912251420846277e-02, 1.388064188036550e-01, 6.681047228592348e-02, 6.678652672418886e-02, 1.502728786165823e-01, 6.680192118263543e-02, 2.984756642029042e-02, 6.734777219899589e-02, 2.980787276195572e-02, 1.345900667671572e-02, 2.691801335343144e-02, 1.345900667671572e-02, 2.972980062596273e-02, 7.112445453610880e-02, 3.338833890221855e-02, 1.341481579603964e-02, 2.682963159207928e-02, 1.341481579603964e-02, 2.684501839672247e-02, 6.541623571486846e-02, 3.076439874738365e-02, 3.928593457783005e-02, 8.414542278979339e-02, 3.927395204226228e-02, 2.049910778131683e-02, 3.976930705014580e-02, 1.676090181608839e-02, 1.887182778099291e-02, 3.163650497761303e-02, 5.382442646073409e-03, 6.534130637501951e-03, 5.046316164940133e-03, 6.467158643972825e-03, 8.456188413443847e-03, 2.870578062769851e-03, 8.307452390876973e-03, 1.915037435840320e-02, 3.369386267377470e-02, 7.560357554412905e-03, 7.019697096227715e-03, 1.376498816879428e-02, 5.841206902965446e-03, 1.353880362176172e-01, 2.751870563873130e-01, 1.353500228501284e-01, 1.353072771627139e-01, 1.215529829106602e-01, 1.259524703936697e-01, -1.100967141695754e-02, 9.150429863596467e-02, 6.812339119230949e-02, 6.994253055365701e-02, 1.388331693872815e-01, 6.987288565199450e-02, 1.059579235723604e-01, 1.405811510504613e-01, -2.884200714139664e-02, 1.783225659242783e-02, -7.973733046073754e-03, 1.684835937340107e-02, 9.206119364047361e+02, 1.841223872809472e+03, 9.206119364047361e+02, 6.809115291758673e+00, -1.205471936543985e+01, 5.597830950886710e+00, 7.182087317142646e-02, 1.363614990795936e-01, 6.953504510423957e-02, 4.104396553313642e+00, -6.310852968897191e+00, 2.984135327585684e+00, 4.104396553313389e+00, -6.310852968896760e+00, 2.984135327585493e+00, 1.947409243302083e+05, 3.894818486604167e+05, 1.947409243302083e+05, -3.646660898556357e+01, 7.243715217552638e+01, -3.597049843282225e+01, 7.292544950083569e+07, 1.458508990016713e+08, 7.292544950083569e+07, 6.013762429563149e+01, 1.202752485912630e+02, 6.013762429563149e+01, 7.372272057549509e-03, 2.205097036059373e-02, 2.830902808741543e-03, 2.222759268506616e+00, 4.445794109496777e+00, 2.222897054748507e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.647987116775365e-29, -2.647987116775364e-29, -1.229140011878541e-98, -1.229140011878541e-98, -1.229312033371584e-98, -1.229312033371584e-98, -4.517862402334179e-06, -4.517862402334177e-06, -1.593954835681781e-05, -1.593954835681781e-05, 0.000000000000000e+00, 0.000000000000000e+00, -8.712712428148037e-05, -8.712712428148032e-05, 3.953900808861777e-05, 3.953900808861780e-05, 3.908810572845637e-05, 3.908810572845638e-05, 0.000000000000000e+00, 0.000000000000000e+00, 3.925056005970532e-05, 3.925056005970536e-05, -8.744200343272217e-05, -8.744200343272219e-05, -7.212530051392448e-30, -7.212530051392448e-30, -3.173569218698896e-04, -3.173569218698896e-04, 0.000000000000000e+00, 0.000000000000000e+00, -4.701319331062263e-04, -4.701319331062263e-04, -9.347248729828364e-74, -9.347248729828364e-74, 0.000000000000000e+00, 0.000000000000000e+00, -1.752128134179338e-03, -1.752128134179336e-03, -1.998835127807666e-03, -1.998835127807668e-03, -1.523638893473200e-04, -1.523638893473200e-04, 1.264539777561955e-03, 1.264539777561956e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.670141819396928e-09, -1.670141819396930e-09, -2.669212995915564e-08, -2.669212995915565e-08, -1.254416318463250e-05, -1.254416318463249e-05, -8.830516034829849e-11, -8.830516034829850e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.072913893670685e-04, -1.072913893670685e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.905715783407108e-05, -6.905715783407106e-05, -3.362030598397104e-04, -3.362030598397102e-04, -4.474987639672054e-05, -4.474987639672054e-05, -4.735451545567660e-05, -4.735451545567659e-05, 1.368894973624316e-04, 1.368894973624316e-04, 1.350898782093180e-04, 1.350898782093180e-04, -8.944175895017850e-05, -8.944175895017850e-05, -4.723661412835810e-05, -4.723661412835810e-05, -3.641981080383069e-03, -3.641981080383068e-03, -1.635944394959122e-02, -1.635944394959123e-02, 2.891645270851563e-04, 2.891645270851563e-04, 0.000000000000000e+00, 0.000000000000000e+00, -4.439952602551520e-03, -4.439952602551520e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.947513873072940e-04, -9.947513873072942e-04, -2.188050503994503e-05, -2.188050503994505e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.161527631097720e-04, -1.161527631097720e-04, -1.161527631097730e-04, -1.161527631097730e-04, -1.845070181407882e-10, -1.845070181407882e-10, 0.000000000000000e+00, 0.000000000000000e+00, -4.636762295590445e-10, -4.636762295590444e-10, -7.159900814004481e-05, -7.159900814004481e-05, -5.578725525301026e-10, -5.578725525301023e-10, -5.578725525301029e-10, -5.578725525301029e-10, -2.244888219382490e-01, -2.244888219382490e-01, -9.286534645185909e-02, -9.286534645185909e-02, -8.160194810800037e-69, -8.160194810800046e-69, -4.018047444975641e-02, -4.018047444975643e-02, -1.061104847030454e-68, -1.061104847030453e-68, -3.564343814908132e-02, -3.564343814908130e-02, -4.479332807549618e-02, -4.479332807549617e-02, -1.120723360261662e-03, -1.120723360261662e-03, -5.071139168845920e-03, -5.071139168845921e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.428256199746139e-03, -6.428256199746143e-03, -1.300238487887832e-03, -1.300238487887832e-03, -5.380853844018245e-04, -5.380853844018243e-04, -2.481889604670531e-03, -2.481889604670531e-03, -3.868717825018104e-03, -3.868717825018106e-03, -1.359587372611232e-03, -1.359587372611232e-03, -3.859269286808604e-03, -3.859269286808599e-03, 9.605298797817482e-04, 9.605298797817474e-04, -2.013138791858640e-56, -2.013138791858641e-56, 0.000000000000000e+00, 0.000000000000000e+00, -3.006101447645162e-03, -3.006101447645163e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.074518513973357e-49, -1.074518513973357e-49, 0.000000000000000e+00, 0.000000000000000e+00, -2.232990939654138e-41, -2.232990939654138e-41, -1.298681326284163e-59, -1.298681326284162e-59, 0.000000000000000e+00, 0.000000000000000e+00, -4.440601481868200e-09, -4.440601481868201e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
