
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.915112889565890e-02, -4.915168441054089e-02, -4.915274734974408e-02, -4.914448355155083e-02, -4.914901389796895e-02, -4.914901389796895e-02, -4.240035226625902e-02, -4.240539544633750e-02, -4.252303482024788e-02, -4.232825194357375e-02, -4.241081225661703e-02, -4.241081225661703e-02, -2.886460827280077e-02, -2.863832081269756e-02, -2.322596093849670e-02, -2.356172814830769e-02, -2.323875927890369e-02, -2.323875927890369e-02, -9.217846749280325e-03, -9.881383649737284e-03, -3.093938773926877e-02, -3.187916855221854e-03, -3.686688568288315e-03, -3.686688568288313e-03, -2.017694992573754e-08, -2.712559558156950e-08, -2.217995752538200e-05, -1.114701927993220e-09, -1.956935766646626e-09, -1.956935766637345e-09, -5.208474233768889e-02, -5.219675518742190e-02, -5.208579230738299e-02, -5.218479084500759e-02, -5.214362047545860e-02, -5.214362047545860e-02, -2.400581808336167e-02, -2.453606584324248e-02, -2.305411946745606e-02, -2.352069826192538e-02, -2.477173891136454e-02, -2.477173891136454e-02, -3.966311834174561e-02, -5.567075756937973e-02, -3.739852117991200e-02, -5.160687158153838e-02, -4.117943052344414e-02, -4.117943052344413e-02, -7.499513458501926e-04, -5.018167353802901e-03, -5.955180233872950e-04, -7.189990877860554e-02, -1.805705267467415e-03, -1.805705267467415e-03, -4.226186974727715e-10, -1.099867387324467e-09, -1.954287045100415e-09, -1.751688894117164e-04, -1.784737414394139e-09, -1.784737412307015e-09, -5.629599985988205e-02, -4.880679437662612e-02, -5.072348005799591e-02, -5.278819882086495e-02, -5.168993136734353e-02, -5.168993136734353e-02, -6.105547830101515e-02, -2.976455515734918e-02, -3.521579668146953e-02, -4.160071182228470e-02, -3.827210326977292e-02, -3.827210326977292e-02, -5.579997764462923e-02, -8.397453404645823e-03, -1.324896502950929e-02, -2.598043463218271e-02, -1.921511161792274e-02, -1.921511161792274e-02, -2.899204235494010e-02, -1.744844510691032e-05, -5.843299167623221e-05, -3.025517327804678e-02, -5.133600450319091e-04, -5.133600450319143e-04, -5.858801580705621e-08, -1.155066492957825e-11, -1.675634125403143e-10, -4.278644950848050e-04, -1.624218963310135e-09, -1.624218958145601e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.145903035456663e-01, -1.145901504804658e-01, -1.145910841053078e-01, -1.145912663561810e-01, -1.145939741082588e-01, -1.145927398196899e-01, -1.145779836118813e-01, -1.145805438056293e-01, -1.145828677434171e-01, -1.145910073273205e-01, -1.145828677434171e-01, -1.145910073273205e-01, -1.067444281776780e-01, -1.067299963505328e-01, -1.067501594398499e-01, -1.067348848996694e-01, -1.068689590830659e-01, -1.068524743958803e-01, -1.066145614303200e-01, -1.065963230992504e-01, -1.067500262931082e-01, -1.066890303074514e-01, -1.067500262931082e-01, -1.066890303074514e-01, -7.851559800020921e-02, -7.785336564269676e-02, -7.832792027155622e-02, -7.751339486635148e-02, -6.985008485752500e-02, -7.105886146081561e-02, -7.100306635141450e-02, -7.057914254609049e-02, -6.576304485884217e-02, -7.772899229156066e-02, -6.576304485884217e-02, -7.772899229156066e-02, -3.466569932841537e-02, -3.191101201641638e-02, -3.646249403074153e-02, -3.333792547791171e-02, -8.498060960851243e-02, -8.182375893094404e-02, -1.479115061776127e-02, -1.479123487017171e-02, -1.244354914366269e-02, -3.796014947866293e-02, -1.244354914366272e-02, -3.796014947866311e-02, 7.387862377561911e-08, -2.865994625284988e-07, -5.096467236236244e-08, -2.547677040943025e-07, -1.419038203571080e-04, -1.159166207906310e-04, 1.081150024103701e-08, -2.720791137279678e-08, -1.277365202675828e-08, -2.524269823912775e-08, -1.277365202893665e-08, -2.524269823770651e-08, -1.173538271712079e-01, -1.173582888371204e-01, -1.175760198221169e-01, -1.175886369798546e-01, -1.173603751914991e-01, -1.173699267703253e-01, -1.175625436169048e-01, -1.175673067845231e-01, -1.174654202081866e-01, -1.174771091500234e-01, -1.174654202081866e-01, -1.174771091500234e-01, -7.265005077697215e-02, -7.265145127465547e-02, -7.331839499060380e-02, -7.333660433450984e-02, -7.126419591448220e-02, -7.042652879929925e-02, -7.188342106863489e-02, -7.103935417505119e-02, -7.300175815704817e-02, -7.481774267933174e-02, -7.300175815704817e-02, -7.481774267933174e-02, -7.889105375297620e-02, -7.899200924558550e-02, -8.249009658823879e-02, -8.242600783644242e-02, -8.013101880869711e-02, -7.688272776348415e-02, -8.232454676914124e-02, -7.870686791511639e-02, -7.797463832738885e-02, -8.139305332683816e-02, -7.797463832738888e-02, -8.139305332683816e-02, -4.070317719042250e-03, -3.837610002429980e-03, -2.147545470626469e-02, -2.138017723195261e-02, -3.289966786906625e-03, -3.081903582937332e-03, -1.172954272163407e-01, -1.173629998879042e-01, -1.118925610591481e-02, -7.294743952825110e-03, -1.118925610591481e-02, -7.294743952825110e-03, -2.862151055962710e-09, -2.810335237912672e-09, -7.424115836269558e-09, -7.451448180730281e-09, -3.135892333746042e-08, 1.392288426283269e-09, -9.168013310663797e-04, -1.042146769736858e-03, -1.589847693507519e-08, -1.102505898299033e-08, -1.589847693211255e-08, -1.102505898136693e-08, -7.853005894245464e-02, -7.818719859256956e-02, -7.967323128959265e-02, -7.942887685017837e-02, -7.993883186406761e-02, -7.967824984827221e-02, -7.978285008927941e-02, -7.949893341242614e-02, -7.992124981617368e-02, -7.965150504703347e-02, -7.992124981617371e-02, -7.965150504703347e-02, -7.378913422360900e-02, -7.339078260920166e-02, -6.708276231644662e-02, -6.661559251017793e-02, -7.085203098107780e-02, -7.032847474902856e-02, -7.476337801349306e-02, -7.454975270220043e-02, -7.271418587504436e-02, -7.250154318800570e-02, -7.271418587504438e-02, -7.250154318800570e-02, -8.453333658333609e-02, -8.432536049231620e-02, -3.211769198420925e-02, -3.181514230643208e-02, -4.442165544966042e-02, -4.328423472179964e-02, -6.327540357363215e-02, -6.289980364490100e-02, -5.425953650256685e-02, -5.392149165045226e-02, -5.425953650256683e-02, -5.392149165045225e-02, -6.801003066353638e-02, -6.718587743414109e-02, -1.019446802689803e-04, -9.843145312041060e-05, -3.736964410828057e-04, -2.989916996830590e-04, -6.505165450917910e-02, -6.381555772380409e-02, -3.556357097745440e-03, -2.198812572481820e-03, -3.556357097745437e-03, -2.198812572481812e-03, -5.439133109086425e-07, -2.559170861026477e-07, -7.760890658016772e-11, -7.622335654237585e-11, -3.273485543831419e-09, 5.644034454751890e-10, -2.271299750032354e-03, -2.319023306438360e-03, -1.346996636408353e-08, -1.029929016123824e-08, -1.346996636145278e-08, -1.029929015675086e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.411196597181266e-10, 4.137752421674432e-10, 2.411187256488161e-10, 2.411244406698281e-10, 4.137959156514671e-10, 2.411254363166884e-10, 2.411495362666025e-10, 4.138636485017018e-10, 2.411424057143463e-10, 2.410538608867691e-10, 4.135577252766283e-10, 2.410685642796705e-10, 2.410826872556677e-10, 4.137214145131014e-10, 2.411298001252385e-10, 2.410826872556677e-10, 4.137214145131014e-10, 2.411298001252385e-10, 1.081837143667421e-06, 1.830868685202216e-06, 1.081335788331562e-06, 1.082050528749201e-06, 1.831300252590909e-06, 1.081516986697276e-06, 1.086510974155540e-06, 1.840632228007089e-06, 1.086022883618821e-06, 1.078179899989903e-06, 1.817626334402292e-06, 1.077624615972283e-06, 1.082427747250327e-06, 1.828739531937997e-06, 1.081350695754587e-06, 1.082427747250327e-06, 1.828739531937997e-06, 1.081350695754587e-06, 1.925053936208830e-03, 2.914729828349963e-03, 1.898609205541392e-03, 1.919097308121419e-03, 2.880427961597886e-03, 1.886580144007514e-03, 1.665211543255443e-03, 1.999079995707396e-03, 1.713232906015030e-03, 1.680623215943569e-03, 1.860368283971522e-03, 1.663537645262000e-03, 1.411586376133937e-03, 2.146688537670531e-03, 1.880471814958530e-03, 1.411586376133937e-03, 2.146688537670531e-03, 1.880471814958530e-03, 8.125636394456073e-01, -9.081976903692015e-01, 6.586678850596137e-01, 8.055618259553612e-01, -8.556081293899371e-01, 6.358510908733771e-01, 9.895126153905381e-04, 1.849921512825119e-03, 9.730705230726605e-04, 8.358942650438059e-01, -1.079844432427480e+00, 7.795667373434152e-01, 2.497739336758348e-01, -1.992447553992418e+00, 7.771590865529345e+00, 2.497739336758365e-01, -1.992447553992431e+00, 7.771590865529397e+00, 3.575579425873782e+01, -5.955384443017093e+01, 2.483854537662491e+01, 3.924424282308249e+01, -6.379208601383374e+01, 2.597039416099202e+01, 5.287685504778154e+00, -8.780568810680476e+00, 3.824023681997773e+00, 5.087349853483630e+00, -1.068251697768020e+01, 5.626694814280135e+00, 5.923267611892093e-03, 1.728097393763841e-02, 3.898841998077141e-03, 5.923267614196182e-03, 1.728097393878810e-02, 3.898842003216018e-03, 4.348788961284001e-07, 9.108579405972851e-07, 4.348385556140047e-07, 4.391848495770119e-07, 9.231946845049818e-07, 4.392280852190015e-07, 4.351333298795207e-07, 9.115703016323654e-07, 4.351454276644038e-07, 4.389931941089482e-07, 9.224533666253058e-07, 4.389543912644097e-07, 4.369934332617443e-07, 9.170107188087312e-07, 4.370278001102509e-07, 4.369934332617443e-07, 9.170107188087312e-07, 4.370278001102509e-07, 1.079382113529880e-05, -2.087522639457555e-06, 1.079570397134239e-05, 1.077404348849557e-05, -2.167303808689901e-06, 1.078595036494281e-05, 1.086907718175903e-05, -3.045747840208180e-06, 1.068073555813967e-05, 1.087255828535451e-05, -3.142128693589001e-06, 1.068046587662169e-05, 1.057727937277376e-05, -1.644521277124424e-06, 1.101649389787237e-05, 1.057727937277376e-05, -1.644521277124424e-06, 1.101649389787237e-05, 6.241038791764100e-03, 8.957752870398680e-03, 6.227125815980329e-03, 7.925994748267527e-03, 1.691950899111335e-02, 7.904041940061904e-03, 8.018434395440142e-03, 1.173564892051987e-02, 7.695823311254870e-03, 1.107454726667737e-02, 2.276842344038334e-02, 1.118572661460335e-02, 6.158235759196769e-03, 9.632882463783351e-03, 6.200626489332979e-03, 6.158235759196769e-03, 9.632882463783358e-03, 6.200626489332980e-03, 1.229496639995309e+00, -2.026936879545363e+00, 1.164352122431218e+00, 3.965247758730565e-01, -5.453939306670829e-01, 3.861591703885952e-01, 1.612721989340466e+00, -2.395673821475859e+00, 1.198890353110889e+00, 5.964257752815690e-05, 1.233199393373880e-04, 5.963160258148372e-05, 1.542143578731481e+00, -1.978436166640541e+00, 1.103221091140625e+00, 1.542143578731482e+00, -1.978436166640543e+00, 1.103221091140625e+00, 5.759241346977034e-03, 6.459439845687329e-03, 5.507826288145747e-03, 1.025101889448294e-02, 1.934967860855723e-03, 9.897425160009327e-03, 8.931174807138392e+00, -1.482722731749030e+01, 6.341443854848738e+00, 2.934379837015666e+00, -5.330943294714052e+00, 2.833454084530457e+00, 2.139408523616036e-02, 4.873206549081641e-02, 1.861620487404024e-02, 2.139408523629879e-02, 4.873206548584454e-02, 1.861620487086556e-02, 4.470818847240893e-02, 9.892961423924648e-02, 4.475114478115503e-02, 2.618758897473234e-02, 6.061782307538239e-02, 2.619455547180667e-02, 3.144676835750296e-02, 7.263527109425687e-02, 3.146259568226866e-02, 3.704640412027391e-02, 8.454421590614519e-02, 3.709081521783415e-02, 3.409361546412502e-02, 7.837878948255900e-02, 3.412466964577832e-02, 3.409361546412504e-02, 7.837878948255898e-02, 3.412466964577833e-02, 2.654454612460500e-02, 5.543725002507077e-02, 2.656199385036091e-02, 1.297948256206805e-02, -1.016498450326804e-04, 1.271903373991278e-02, 1.272885352746255e-02, 9.549210639255866e-03, 1.249087891634798e-02, 1.484570436436219e-02, 2.594918998302861e-02, 1.480943252287699e-02, 1.318976016212973e-02, 1.646069781828955e-02, 1.311851185577739e-02, 1.318976016212972e-02, 1.646069781828956e-02, 1.311851185577739e-02, 6.036647734282231e-03, 1.270318199243554e-02, 6.017590627851060e-03, 2.140773865300400e-01, -2.662406494526661e-01, 2.075376867795006e-01, 1.270233853454283e-01, -1.178460769402397e-01, 1.201554630005253e-01, 4.802067338574596e-02, 1.619068699923784e-02, 4.723986114520264e-02, 8.182748136286296e-02, -4.262942192641417e-02, 8.150411257457896e-02, 8.182748136286305e-02, -4.262942192641415e-02, 8.150411257457892e-02, 1.620736202608995e-02, 4.005757005479403e-03, 1.571587167430643e-02, 4.841532173928698e+00, -9.312181469500636e+00, 4.648724493815529e+00, 3.250251507426858e+00, -5.652317230808060e+00, 2.675574992971643e+00, 6.678258942079912e-02, 4.892159485647827e-02, 6.412550608728726e-02, 2.841710547452029e+00, -4.167947340876471e+00, 2.073508443797563e+00, 2.841710547451971e+00, -4.167947340876364e+00, 2.073508443797518e+00, 3.642303368109959e+00, -6.490519487292170e+00, 2.943856420795373e+00, 6.194736834446014e-03, 1.284322677872173e-02, 5.884617679631534e-03, 2.824121087264865e+00, -4.665607475272824e+00, 1.952620040798075e+00, 3.476970782860049e+00, -5.996285971273609e+00, 3.167195127630768e+00, 1.961057608878785e-02, 6.270494291183970e-02, 2.499629041287735e-02, 1.961057609283208e-02, 6.270494297089790e-02, 2.499629043070986e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.355328782966568e-05, -1.355328782966568e-05, -1.355445148928166e-05, -1.355445148928166e-05, -1.356056614938770e-05, -1.356056614938770e-05, -1.354339959140989e-05, -1.354339959140989e-05, -1.355225585731442e-05, -1.355225585731442e-05, -1.355225585731442e-05, -1.355225585731442e-05, 1.263428274557066e-05, 1.263428274557066e-05, 1.263187729011807e-05, 1.263187729011805e-05, 1.258870166002446e-05, 1.258870166002445e-05, 1.282236849135321e-05, 1.282236849135322e-05, 1.270800511089871e-05, 1.270800511089869e-05, 1.270800511089871e-05, 1.270800511089869e-05, 1.440205503426078e-04, 1.440205503426078e-04, 1.458980478021339e-04, 1.458980478021340e-04, 1.925783631144450e-04, 1.925783631144449e-04, 2.232218188968262e-04, 2.232218188968262e-04, 1.159381337511846e-04, 1.159381337511846e-04, 1.159381337511846e-04, 1.159381337511846e-04, 4.883106187752035e-03, 4.883106187752035e-03, 5.081668970191838e-03, 5.081668970191840e-03, 1.860497218018233e-05, 1.860497218018233e-05, 1.161335329491210e-03, 1.161335329491210e-03, 2.288532244148452e-03, 2.288532244148451e-03, 2.288532244148469e-03, 2.288532244148471e-03, 1.296567402113469e-08, 1.296567402113470e-08, 1.849857219917020e-08, 1.849857219917021e-08, 1.008596325797016e-05, 1.008596325797016e-05, -8.461185535603585e-11, -8.461185535603577e-11, -2.673561479167918e-09, -2.673561479167921e-09, -2.673561479193405e-09, -2.673561479193406e-09, -6.542481041895025e-04, -6.542481041895021e-04, -6.651356977579102e-04, -6.651356977579103e-04, -6.551074912482634e-04, -6.551074912482634e-04, -6.647056556569825e-04, -6.647056556569827e-04, -6.595551072552494e-04, -6.595551072552493e-04, -6.595551072552494e-04, -6.595551072552493e-04, 1.288941843250984e-04, 1.288941843250985e-04, 1.289920964751594e-04, 1.289920964751592e-04, 1.310640415126047e-04, 1.310640415126047e-04, 1.317012286281152e-04, 1.317012286281154e-04, 1.275605314130346e-04, 1.275605314130347e-04, 1.275605314130346e-04, 1.275605314130347e-04, -1.019485432532204e-03, -1.019485432532200e-03, -2.051422283576053e-03, -2.051422283576054e-03, -2.180890025515384e-07, -2.180890025515412e-07, -4.726024140451590e-04, -4.726024140451594e-04, -1.523254253390983e-03, -1.523254253390983e-03, -1.523254253390981e-03, -1.523254253390981e-03, 2.846760284895652e-04, 2.846760284895655e-04, 1.957599808709115e-03, 1.957599808709116e-03, 2.289612316189304e-04, 2.289612316189306e-04, -3.970829667983058e-05, -3.970829667983058e-05, 8.037621361315998e-04, 8.037621361315993e-04, 8.037621361316003e-04, 8.037621361316002e-04, -6.261665487354714e-11, -6.261665487354713e-11, -2.634077446477280e-10, -2.634077446477280e-10, -1.506437024971266e-09, -1.506437024971266e-09, 7.638394698848113e-05, 7.638394698848114e-05, -1.353521701797366e-09, -1.353521701797365e-09, -1.353521701797499e-09, -1.353521701797499e-09, -7.088162289884135e-02, -7.088162289884138e-02, -5.775870744037946e-02, -5.775870744037946e-02, -6.650342535907416e-02, -6.650342535907423e-02, -7.249338819157831e-02, -7.249338819157836e-02, -6.979417119648637e-02, -6.979417119648633e-02, -6.979417119648636e-02, -6.979417119648633e-02, -9.670765167029565e-03, -9.670765167029570e-03, -6.058059465766885e-04, -6.058059465766862e-04, -5.337107471562940e-03, -5.337107471562938e-03, -1.584339302630365e-02, -1.584339302630364e-02, -9.303820784546927e-03, -9.303820784546927e-03, -9.303820784546932e-03, -9.303820784546932e-03, -1.106444642814239e-03, -1.106444642814240e-03, 2.841211225230336e-03, 2.841211225230335e-03, 3.273897386852191e-03, 3.273897386852191e-03, 1.660709501580158e-03, 1.660709501580159e-03, 3.143336204838112e-03, 3.143336204838112e-03, 3.143336204838114e-03, 3.143336204838111e-03, 9.451253400156823e-04, 9.451253400156852e-04, 8.675802844280019e-06, 8.675802844280025e-06, 2.374699662204430e-05, 2.374699662204430e-05, 4.332140199782672e-04, 4.332140199782693e-04, 2.338179757669742e-04, 2.338179757669743e-04, 2.338179757669741e-04, 2.338179757669742e-04, 1.115473984239794e-09, 1.115473984239794e-09, -8.370089952207363e-13, -8.370089952207363e-13, -1.107341245923915e-10, -1.107341245923915e-10, 2.568815120684362e-04, 2.568815120684360e-04, -1.403238614646330e-09, -1.403238614646330e-09, -1.403238617894205e-09, -1.403238617894206e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
