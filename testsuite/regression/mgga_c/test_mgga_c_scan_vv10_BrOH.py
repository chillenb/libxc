
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scan_vv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.167981393668492e-02, -9.167740800130886e-02, -9.166692690475800e-02, -9.170607265257241e-02, -9.167854624422535e-02, -9.167854624422535e-02, -1.129326829045501e-01, -1.129275037616527e-01, -1.127756102327816e-01, -1.128361027856725e-01, -1.129313836194579e-01, -2.343437174083064e-02, -8.181978215832449e-02, -1.891818958679538e-02, -1.836795476876870e-02, -1.860532470558260e-02, -1.893187964525997e-02, -1.893187964525997e-02, -1.479135704355117e-02, -1.496592380378953e-02, -9.310229683069865e-02, -1.046730060528617e-02, -1.484210654047586e-02, -1.484210654047586e-02, -8.248107780317325e-04, -8.749289444310413e-04, -3.971779670309533e-03, -2.705936573362053e-04, -8.681144847784832e-04, -8.681144847784922e-04, -2.638633312158743e-02, -2.639441810671565e-02, -2.638722752804926e-02, -5.384277038463411e-02, -2.639039073068604e-02, -2.639039073068604e-02, -1.020580556453918e-01, -1.010436423550658e-01, -1.025250425081397e-01, -1.016985090306698e-01, -1.007773992035245e-01, -2.246893159693126e-02, -2.182829388537656e-02, -2.296402739657464e-02, -2.119449019001544e-02, -2.206978729462794e-02, -2.225745357423935e-02, -5.955108471240378e-02, -3.608585790739129e-02, -1.335351490502833e-02, -3.577290957913080e-02, -2.439087911411654e-02, -9.679402054113087e-03, -9.679402054113087e-03, -3.884280442416108e-03, -3.185456043826027e-04, -2.540181244366640e-04, -2.696991586304225e-02, -4.019442599929010e-03, -2.878122657885477e-04, -2.389740447200197e-02, -2.365956925096099e-02, -2.788838859686120e-02, -2.381014423742728e-02, -2.377707538125549e-02, -2.377707538125549e-02, -2.372210732818876e-02, -2.130843028733496e-02, -2.205129934369708e-02, -2.272006254117529e-02, -2.238067837445335e-02, -4.491477829697375e-02, -2.282833382343176e-02, -5.354322181455747e-02, -1.684992687133086e-02, -5.500819130909217e-02, -1.808844494365365e-02, -1.808844494365366e-02, -5.823071936681272e-02, -3.631507741046514e-03, -4.877709609922077e-03, -1.933757417157387e-02, -3.178681229751994e-02, -7.256116481917241e-03, -8.974691554281092e-04, -5.157757619573838e-05, -1.410265895458633e-04, -7.116021843593067e-03, -2.398333326945007e-04, -2.398333326944911e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scan_vv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.435305437101903e-02, 5.434873194551227e-02, 5.432988860922040e-02, 5.440021972961664e-02, 5.435077696541963e-02, 5.435077696541963e-02, -8.477376957551026e-02, -8.481327014935874e-02, -8.602111903000938e-02, -8.555047054393976e-02, -8.478481280052871e-02, -4.629424299992251e-02, -6.746973711956071e-02, -4.571696321585745e-02, -4.627941937209062e-02, -4.601369411612284e-02, -4.570217015383882e-02, -4.570217015383882e-02, -3.690017957714924e-02, -3.678537113981720e-02, -8.655129960767939e-02, -4.123311033273871e-02, -3.686944658386950e-02, -3.686944658386950e-02, -2.198749136365339e-01, -2.104654497694027e-01, -7.136067509727451e-02, -6.493150744049502e-01, -2.092045818647266e-01, -2.092045818647386e-01, -3.785489142453987e-02, -3.781073472447864e-02, -3.785001203176569e-02, -6.663797589040528e-04, -3.783276057945818e-02, -3.783276057945818e-02, -6.060998739321594e-02, -6.114193779013634e-02, -6.062660845245998e-02, -6.070668934661591e-02, -6.141411525491660e-02, -4.623477554042935e-02, -3.782880488700721e-02, -3.448241044293861e-02, -3.912569006619062e-02, -3.679751629028644e-02, -3.681733153460465e-02, 7.201731975562923e-03, -4.243315850953477e-02, -3.979590153597610e-02, -4.202839632516765e-02, -4.104930466215285e-02, -4.050349095274795e-02, -4.050349095274795e-02, -4.979917665639666e-03, -5.452591905970440e-01, -4.218074349512372e-01, -3.263455246157913e-02, -5.150091534201453e-03, -5.483913580298950e-01, -2.732912211600862e-02, -2.910509007717465e-02, -2.262421685754435e-02, -2.801247977485814e-02, -2.826142976793056e-02, -2.826142976793056e-02, -2.789570322838034e-02, -3.745979840794916e-02, -3.539800421051296e-02, -3.300725149112563e-02, -3.429773563065298e-02, 2.090684959089759e-03, -3.590052332445617e-02, -5.212906936276361e-02, -3.946522118618842e-02, -4.073018566631022e-02, -3.878017824862303e-02, -3.878017824862302e-02, -5.564282591483659e-02, -7.842343937422015e-02, -6.178092538078512e-02, -3.673563764504363e-02, -3.776684213729770e-02, -4.469532153129908e-02, -2.647155995369854e-01, -1.500100865953768e+00, -7.132855120773239e-01, -4.412603309929923e-02, -5.570221641639329e-01, -5.570221641638058e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.372504276794343e-09, 4.372304175942796e-09, 4.371394017707432e-09, 4.374655394723647e-09, 4.372399103296053e-09, 4.372399103296053e-09, 1.221347520283524e-05, 1.221224557839303e-05, 1.217363484474673e-05, 1.218464889013186e-05, 1.221290071399879e-05, 3.374954036950314e-07, 1.143129872463566e-02, 6.829556232615320e-04, 7.053567748659180e-04, 7.094402427254600e-04, 6.824942051698663e-04, 6.824942051698663e-04, 3.019609420032371e-01, 2.918203774770354e-01, 5.902967667417414e-03, 6.917911831748684e-01, 2.987420765404433e-01, 2.987420765404433e-01, 2.549240846224265e+04, 2.114529974211922e+04, 5.989624770454611e+01, 4.067316750647436e+05, 2.218245628747843e+04, 2.218245628747970e+04, 1.024978195430856e-07, 1.027662977350439e-07, 1.025279020255059e-07, 1.010054663257659e-06, 1.026316847801187e-07, 1.026316847801187e-07, 1.346550532475044e-04, 1.289770166700295e-04, 1.370758037630978e-04, 1.325399616237167e-04, 1.277482361622934e-04, 5.039300731944301e-06, 2.744723081624126e-03, 2.419538924365311e-03, 3.101007296875841e-03, 3.101188882967700e-03, 2.511777789257692e-03, 2.084947375766358e-02, 2.338938279881758e+01, 2.130402152465211e-01, 2.454144450958709e+01, 9.452362268832644e-06, 1.412514881790033e+00, 1.412514881790033e+00, 2.791238404415713e+06, 2.863205034117065e+05, 1.042991962699448e+06, 1.444478028264059e+02, 2.379840855801218e+06, 4.225788740463740e+05, 4.606202391379387e-03, 4.284454421355159e-03, 7.359063410596422e-03, 4.479691073418426e-03, 4.434396218289536e-03, 4.434396218289536e-03, 5.159129644808984e-03, 5.238960420171734e-03, 5.051723047519961e-03, 4.994016080312554e-03, 5.006403922388991e-03, 2.874669450017504e-02, 1.785948736776786e-03, 7.650596811476009e-01, 5.047740521329606e-02, 1.314192730241396e-01, 3.395631567891613e-02, 3.395631567891613e-02, 4.098342469305148e-02, 8.110003742038869e+01, 2.313216246613800e+01, 3.165383953495832e-02, 5.200171462785776e+01, 5.608879358576715e+00, 1.191647820762098e+04, 4.037621758444067e+07, 3.926377711163844e+06, 6.997214007540583e+00, 8.291137919281023e+05, 8.291137919279167e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.841670489366682e-05, -8.841461043542017e-05, -8.840514438252638e-05, -8.843926996530902e-05, -8.841560363310204e-05, -8.841560363310204e-05, -2.853285456613169e-04, -2.850523701929603e-04, -2.765438521096992e-04, -2.798433875980900e-04, -2.852496560261082e-04, -1.900672576735336e-04, -2.329454703791766e-03, -2.683893227825952e-03, -2.562880991938729e-03, -2.635715891179154e-03, -2.687202763566869e-03, -2.687202763566869e-03, -2.448610648466687e-02, -2.458204415562408e-02, -7.966188100225424e-04, -2.287137216524431e-02, -2.450491758811048e-02, -2.450491758811048e-02, -4.269975489248745e-01, -4.069931402638671e-01, -7.626587809495844e-02, -7.528174524192893e-01, -4.137473024380289e-01, -4.137473024380527e-01, -2.047377999083388e-04, -2.054402734635753e-04, -2.048156603398424e-04, -8.125837862696986e-04, -2.050891470058364e-04, -2.050891470058364e-04, -9.889445420019842e-04, -9.817680212393970e-04, -9.868740826221270e-04, -9.879950331038313e-04, -9.777696596845722e-04, -5.152571252674320e-04, -7.231922664440823e-03, -8.316835836618708e-03, -6.935361928955616e-03, -7.952750562192960e-03, -7.452046944544028e-03, -3.508076797373506e-02, -5.670297229341915e-04, -1.807602807265806e-02, -6.430162939107851e-04, -9.132926845553333e-04, -2.888600122638863e-02, -2.888600122638863e-02, -2.537877814253209e-07, -7.101131041410255e-01, -1.089125448704292e+00, -1.574355014978570e-04, -2.898185109503220e-07, -7.928047416893742e-01, -1.397553642661601e-02, -1.269398232721212e-02, -1.918242831148775e-02, -1.347289395865251e-02, -1.329271464619913e-02, -1.329271464619913e-02, -1.414017797927132e-02, -8.946276345514662e-03, -9.929028879055489e-03, -1.115990396516286e-02, -1.048125639148426e-02, -4.268342402165246e-02, -7.043620431683309e-03, -6.013305386370072e-03, -1.385316551200341e-02, -1.351314387471182e-02, -1.343117922163365e-02, -1.343117922163364e-02, -4.823742774570789e-03, -8.228176251082442e-02, -5.760795118698089e-02, -1.530368384729383e-02, -5.424902503094876e-04, -4.121382109797149e-02, -3.213483204852669e-01, -2.055317291691513e+00, -1.370056667703397e+00, -4.467183060285047e-02, -9.548537236091750e-01, -9.548537236089567e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
