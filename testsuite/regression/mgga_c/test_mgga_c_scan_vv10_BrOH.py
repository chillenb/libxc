
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scan_vv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731313974867308e-02, -2.731315413229799e-02, -2.731277904922308e-02, -2.731252036558027e-02, -2.731315141590825e-02, -2.731315141590825e-02, -5.094475988339067e-02, -5.094034221178454e-02, -5.078635073506562e-02, -5.062421657033571e-02, -5.094495357527768e-02, -5.094495357527768e-02, -4.006902046084460e-02, -3.993526790279913e-02, -3.632277672836924e-02, -3.590966234366531e-02, -4.001989950815690e-02, -4.001989950815690e-02, -1.763728722374364e-02, -1.824157153945529e-02, -5.078596183955650e-02, -1.635212427359403e-02, -1.786421669458138e-02, -1.786421669458138e-02, -1.349755078238146e-03, -1.428089886325530e-03, -5.835648973793254e-03, -5.338702126059789e-04, -1.415382555767684e-03, -1.415382555767685e-03, -2.644916139070908e-02, -2.645671272203859e-02, -2.644920093529800e-02, -2.645511436053012e-02, -2.645402386389212e-02, -2.645402386389212e-02, -2.520449518100597e-02, -2.484968620206399e-02, -2.481954566097485e-02, -2.453866936029677e-02, -2.545701990217754e-02, -2.545701990217754e-02, -3.000275508744182e-02, -3.415395331282533e-02, -3.603426092004355e-02, -4.082522639278188e-02, -2.844738011038874e-02, -2.844738011038874e-02, -1.182195578161733e-02, -1.595145607713791e-02, -1.193238314581625e-02, -5.650856882822460e-02, -1.338586029798173e-02, -1.338586029798173e-02, -5.139716330989268e-04, -6.079264293400838e-04, -4.820133303883071e-04, -8.206542211619068e-03, -5.683335009369197e-04, -5.683335009369197e-04, -2.505415058919424e-02, -2.467678310407451e-02, -2.480801790046930e-02, -2.491233244468598e-02, -2.486030191724545e-02, -2.486030191724545e-02, -2.612169263706015e-02, -2.206290756547863e-02, -2.316290266397924e-02, -2.423910244514272e-02, -2.375552557585606e-02, -2.375552557585606e-02, -3.821554825841628e-02, -1.663536459285931e-02, -2.011835019053024e-02, -2.853640361592827e-02, -2.292010621669134e-02, -2.292010621669135e-02, -2.552456500927047e-02, -5.234704474852335e-03, -7.149204972493490e-03, -2.971143411211714e-02, -1.039993786087103e-02, -1.039993786087104e-02, -1.582735400944587e-03, -1.194602933722963e-04, -2.764331533406170e-04, -1.028628365366673e-02, -4.851046033693659e-04, -4.851046033693701e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scan_vv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.166654419370948e-02, -4.166634124049154e-02, -4.166513473506631e-02, -4.166841861581132e-02, -4.166644026292849e-02, -4.166644026292849e-02, -7.328219776083644e-02, -7.323581493826078e-02, -7.183948781617097e-02, -7.171416171085444e-02, -7.327394662801569e-02, -7.327394662801569e-02, -6.719469940491449e-02, -6.710674953191451e-02, -6.409317487432356e-02, -6.316086983239230e-02, -6.716127740596210e-02, -6.716127740596210e-02, -4.946320782500355e-02, -5.020276093652324e-02, -8.867866975724775e-02, -3.154846428999993e-02, -4.989728495684492e-02, -4.989728495684492e-02, -3.302101979750865e-03, -3.232801059386778e-03, -1.135028079271109e-02, -1.026638666410252e-03, -3.385334499408666e-03, -3.385334499408643e-03, -3.787909549634865e-02, -3.783428611004086e-02, -3.787384207548641e-02, -3.783904885617498e-02, -3.785703956494389e-02, -3.785703956494389e-02, -5.364458116154041e-02, -5.213389964348725e-02, -5.312018423630682e-02, -5.189634018024580e-02, -5.322974859704773e-02, -5.322974859704773e-02, -4.039127352023317e-02, -2.522061683356408e-02, -4.218501767504543e-02, -2.312179422941059e-02, -3.815899776779628e-02, -3.815899776779628e-02, -2.365387376988640e-02, -6.030647125077859e-02, -2.396010219761839e-02, -1.678032255662889e-02, -3.012427671029488e-02, -3.012427671029488e-02, -9.893221221375387e-04, -1.167403064466037e-03, -9.313694541938771e-04, -1.547349462642637e-02, -1.093047542905974e-03, -1.093047542905973e-03, -2.590421077453724e-02, -2.825320341715924e-02, -2.747247677253621e-02, -2.682416635174807e-02, -2.715337449095926e-02, -2.715337449095926e-02, -2.481175466870966e-02, -3.836372198918941e-02, -3.603814564089174e-02, -3.294041611489263e-02, -3.467159928499045e-02, -3.467159928499046e-02, -2.290275449524241e-02, -4.675979841117078e-02, -5.094121695863238e-02, -4.946110670761004e-02, -4.968043779808663e-02, -4.968043779808665e-02, -4.503500707066618e-02, -1.093126296074166e-02, -1.383240964741568e-02, -4.252275979773116e-02, -2.131984347870740e-02, -2.131984347870739e-02, -3.000846281577897e-03, -2.334637245155397e-04, -5.366282512445739e-04, -2.079569743987565e-02, -9.354117958695614e-04, -9.354117958695645e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.465090955300991e-11, 8.465083168286493e-11, 8.464493135972805e-11, 8.464605764052306e-11, 8.465091825330382e-11, 8.465091825330382e-11, 1.543056061131355e-06, 1.544568457025629e-06, 1.588756198626585e-06, 1.583726926874392e-06, 1.543348672484864e-06, 1.543348672484864e-06, 1.513968354936083e-03, 1.503889610260810e-03, 1.247036569808576e-03, 1.230260458985598e-03, 1.510368934369035e-03, 1.510368934369035e-03, 6.145754401778168e-01, 6.318466531152490e-01, 9.011201703831244e-04, 2.766545473158873e-01, 6.252718721127326e-01, 6.252718721127326e-01, 1.315975364648285e+02, 9.414586030660728e+01, 2.292978658259710e+00, 1.215914069049163e+02, 1.182597252637784e+02, 1.182597252637758e+02, 1.033696342478796e-07, 1.036331120934575e-07, 1.033881033525676e-07, 1.035933855477709e-07, 1.035159175870915e-07, 1.035159175870915e-07, 7.822992796739818e-06, 7.255289081589182e-06, 7.530699867994553e-06, 7.086177899748097e-06, 7.800776088292000e-06, 7.800776088292000e-06, 6.957416221250901e-03, 7.363939968783336e-03, 1.232139322763908e-02, 1.469621372798091e-02, 5.266277289508380e-03, 5.266277289508380e-03, 4.863554120066897e-01, 4.721465982032419e-01, 5.662339663322481e-01, 7.263828728992544e-05, 7.097541223345017e-01, 7.097541223345017e-01, 1.347449973463147e+02, 1.068105545010046e+02, 3.437935728308841e+02, 1.039014599667703e+00, 1.601596323524253e+02, 1.601596323524250e+02, 5.412685138723413e-03, 4.939380004806229e-03, 5.093723874020096e-03, 5.224174331314667e-03, 5.157914057899698e-03, 5.157914057899698e-03, 7.098535755277114e-03, 5.925520729896336e-03, 5.971868255555433e-03, 6.189216257928198e-03, 6.112068513521534e-03, 6.112068513521534e-03, 7.047640762606495e-03, 1.347895234599305e-01, 9.926154733865980e-02, 6.873179148095718e-02, 7.620465159320246e-02, 7.620465159320255e-02, 1.500104530748038e-02, 3.321668652571888e+00, 1.341804403861054e+00, 1.053952560116885e-01, 1.110613744175307e+00, 1.110613744175304e+00, 2.610362082824646e+01, 1.327651137227957e+03, 4.212607162956779e+02, 1.311411549231117e+00, 2.686990935671753e+02, 2.686990935671765e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_vv10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.123525161970757e-05, -1.123534102538008e-05, -1.123521140896189e-05, -1.123373676952718e-05, -1.123530346081224e-05, -1.123530346081224e-05, -5.637545695041791e-04, -5.647977047369209e-04, -5.959260264267504e-04, -5.975649677884718e-04, -5.639441008750729e-04, -5.639441008750729e-04, -1.816636923047826e-03, -1.803705800820941e-03, -1.508755020693769e-03, -1.667014731061572e-03, -1.812217167617815e-03, -1.812217167617815e-03, -5.139387385216580e-02, -5.485533539955080e-02, -4.973746247660064e-04, -2.870809565703731e-03, -5.289908961028187e-02, -5.289908961028187e-02, -1.520230368583475e-03, -1.085890457727646e-03, -7.934525358401226e-04, -2.279357548564029e-07, -1.472760187422374e-03, -1.472760187422325e-03, -2.060099092255599e-04, -2.067047834843447e-04, -2.060708105956131e-04, -2.066115658951906e-04, -2.063791939660521e-04, -2.063791939660521e-04, -7.624503673176111e-04, -7.238595885555697e-04, -7.296103197342894e-04, -6.992815412135219e-04, -7.780924452025784e-04, -7.780924452025784e-04, -1.647145323416237e-02, -2.044535056887319e-02, -2.394837906768953e-02, -2.969454190012551e-02, -1.412426152748059e-02, -1.412426152748059e-02, -2.796080265994541e-03, -4.190614930033761e-02, -3.247756668533029e-03, -4.450896933958344e-03, -1.035074096909265e-02, -1.035074096909265e-02, -1.039537110876994e-06, -6.178610984699873e-07, -5.178848432118839e-06, -3.132924454688318e-04, -3.722813148243735e-07, -3.722813148243722e-07, -1.572553218935150e-02, -1.413276990800595e-02, -1.465732491606922e-02, -1.509665349217912e-02, -1.487350404349504e-02, -1.487350404349504e-02, -1.789215056991749e-02, -9.999041780208417e-03, -1.147014680360106e-02, -1.330416831339393e-02, -1.239834885438072e-02, -1.239834885438073e-02, -2.172171866111209e-02, -2.275192050694321e-02, -2.770640991509033e-02, -3.745462436969374e-02, -3.001737172224338e-02, -3.001737172224340e-02, -1.785220071560041e-02, -1.660691651185984e-03, -8.542597416816109e-04, -4.727852668467537e-02, -4.009027465517546e-03, -4.009027465517516e-03, -4.148042770933870e-06, -4.505399918430203e-09, -1.535061143846119e-06, -3.786798292601563e-03, -3.041862477281307e-07, -3.041862477281309e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
