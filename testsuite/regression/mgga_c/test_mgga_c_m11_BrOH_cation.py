
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.002541228227572e-02, -9.002001845500032e-02, -8.999824177051623e-02, -2.609956331227147e-01, -3.061994609867024e-01, -3.515687167824131e-01, -6.248258968428404e-02, -5.433205873011050e-02, -5.475384158887984e-02, -5.458792809490248e-02, -5.460482265423123e-02, -6.282497962504816e-02, -7.465670698468982e-02, -6.409788463188628e-03, 4.602875541883032e-02, 2.258980292413598e-02, -8.304643936481758e-02, 4.529833526363537e-02, -5.185112429216441e-04, -2.012784951094780e-02, 1.384033391682479e-02, -1.381685603342164e-02, 3.538883985149353e-03, 3.331619582794264e-03, -3.190723299047477e-02, -3.325756837126652e-02, -1.038241321635079e-01, -2.003264583066206e-02, -2.077875766076177e-02, -2.077875766076183e-02, -2.107120916505066e-01, -2.765063802404948e-01, -2.775880708042864e-01, -2.765777730661667e-01, -1.522207621664561e-01, -2.103097612566746e-01, -3.523895753176617e-02, -4.078821564726150e-02, -1.958366199859242e-02, -2.586954619856175e-02, -5.056478871088733e-02, -4.048620599375524e-02, -4.803327730371737e-02, -9.533372848648101e-02, -3.776926793643816e-02, -4.041914465660865e-02, -5.002574875278863e-02, -4.536635427993913e-02, -6.610089348277473e-02, -1.408619620322744e-02, -7.904349847619598e-02, -7.001871620532528e-02, -3.646704232857110e-02, -3.646704232857073e-02, -1.593085767305197e-02, -1.964280697985114e-02, -1.543423255456970e-02, -1.022085390818926e-01, -1.719129769016257e-02, -1.719129769016259e-02, -2.452159250396700e-01, -8.170072438509482e-02, -1.485950476177545e-01, -1.812906490006223e-01, -1.733195124852378e-01, -1.547777706752025e-01, -2.231920728885467e-01, -5.040665396516993e-02, -5.083728139659069e-02, -8.718476992687887e-02, -6.815882484475362e-02, -5.906606624854523e-02, -5.902549442506951e-02, -1.800801175990382e-03, 6.909358063693790e-03, -2.481337370985782e-02, -5.665981621219641e-03, -5.560843559341973e-03, -3.462261880155305e-02, -2.584693742603824e-01, -1.102512727015091e-01, -3.736749903853430e-02, -7.108299431736718e-02, -7.108299431736721e-02, -9.938484592768694e-02, -5.932989128367348e-03, -2.727054043021983e-02, -2.763355428250744e-01, -1.622789230707647e-02, -1.622802561717735e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.969340636075177e-01, 1.969338536386144e-01, 1.969384392097676e-01, 1.969380851686792e-01, 1.969555134223708e-01, 1.969559047466621e-01, -7.194463534648613e-01, -7.194495494718010e-01, -9.958343973127136e-01, -9.958408505303884e-01, -1.283079385421425e+00, -1.283086981936112e+00, -1.861687701881941e-01, -1.861705600819554e-01, -1.737084715207503e-01, -1.737102356122274e-01, -1.669270021422074e-01, -1.669246541308768e-01, -1.696657440451761e-01, -1.696641479802974e-01, -1.693886801391554e-01, -1.693461228149626e-01, -1.825412086612908e-01, -1.824918868803134e-01, 5.617399771462694e-02, 5.676410070589665e-02, -7.794293529948067e-02, -7.763489564303529e-02, 1.681442656412777e-02, 1.722020521595824e-02, -5.100963557203654e-02, -5.099713052573684e-02, 7.204231796406130e-02, 6.115321463492732e-02, -1.476871060001067e-02, -1.102224455943037e-02, 8.766031301588741e-03, 1.045902152922150e-02, -8.249617251640903e-03, -4.490690661722512e-03, 7.027748231230647e-02, 7.104599757599458e-02, 4.411213192765803e-02, 4.474479268439911e-02, 3.769736341553723e-02, 3.745585200542694e-02, 3.698543514259298e-02, 3.603450001766639e-02, -4.241306367859553e-02, -3.886794973355256e-02, -4.441554123603091e-02, -4.021073596968942e-02, -1.016823303476727e-01, -8.981429999636134e-02, -2.553214206784441e-02, -2.612512419202649e-02, -2.307066273726006e-02, -4.535000064515522e-02, -2.307066273725724e-02, -4.535000064515290e-02, 4.976113379151038e-02, 4.969051877124613e-02, 3.600499256796768e-02, 3.590338592246321e-02, 1.904123909396225e-02, 1.893993863329018e-02, 3.492280816020032e-02, 3.482345791614150e-02, 5.941363667116381e-02, 5.936486252630566e-02, 5.499302704866273e-02, 5.492127650445788e-02, -2.860372425021696e-01, -2.860415950919595e-01, -2.666548323150902e-01, -2.666807274976788e-01, -3.248581522351852e-01, -3.247662888626527e-01, -3.067467831450119e-01, -3.066313888828046e-01, -2.397204057398063e-01, -2.402210559171593e-01, -2.676338610590485e-01, -2.680492653420384e-01, -9.286073922729490e-02, -9.315322707936509e-02, -1.463426650510926e-01, -1.462819833803274e-01, -6.171498620079474e-02, -5.848196975568618e-02, -1.162384286151999e-01, -1.130582996505148e-01, -1.203829180128977e-01, -1.260339772491882e-01, -1.602471325813081e-01, -1.655089149035995e-01, 5.673251648571144e-02, 5.813549204088584e-02, -2.676828940576335e-03, -2.308428627627065e-03, 1.624533649950585e-02, 2.599578949824418e-02, -3.518460872160324e-01, -3.519100275493808e-01, 1.602097978120404e-02, 2.258759453787046e-02, 1.602097978120554e-02, 2.258759453786271e-02, -2.119721849305575e-02, -2.013247056922874e-02, -2.559940555476009e-02, -2.508032910179928e-02, -2.077428461195839e-02, -1.923886787348563e-02, -4.001716180405079e-02, -3.864814570139267e-02, -2.921319174542709e-02, -1.941909529806346e-02, -2.921319174542812e-02, -1.941909529806459e-02, -6.852409038415884e-01, -6.832629826564334e-01, -3.236035526548507e-01, -3.228932930579731e-01, -6.151995605415918e-01, -6.140366011386649e-01, -6.509583311347382e-01, -6.494641579327328e-01, -6.349569583393141e-01, -6.336068702361201e-01, -6.181241739595880e-01, -6.168287667974268e-01, -6.475723290455292e-01, -6.460342543786206e-01, -7.576165584055004e-02, -7.527898436816850e-02, -1.135197819225871e-01, -1.130435623740976e-01, -1.024481512238491e-01, -1.020305901581657e-01, -2.169261452200961e-01, -2.164912937086973e-01, -1.081514004328042e-01, -1.077637620887297e-01, -4.536728626867274e-02, -4.519899554078371e-02, 1.491189996353284e-02, 1.520427463244278e-02, -3.143279338015149e-02, -3.111939483113016e-02, -1.444959662971043e-01, -1.441301333368422e-01, -1.288957154752365e-01, -1.289106032771775e-01, -1.291372725085977e-01, -1.291520883308714e-01, -8.666299866950039e-02, -8.609945586771968e-02, -2.792961559183003e-01, -2.756235446402705e-01, -8.135449614988842e-02, -7.365282488977229e-02, -8.246824052036096e-02, -8.117112742880357e-02, 3.194389394571989e-02, 4.048163430308763e-02, 3.194389394570063e-02, 4.048163430308849e-02, -1.291118527112909e-01, -1.224706761232931e-01, -7.789108431688524e-03, -7.766668522307075e-03, -3.705027286093775e-02, -3.417922936604147e-02, -1.218930993925443e-01, -1.123111842195707e-01, -2.668897363597083e-02, -1.847577165131717e-02, -2.668995149140483e-02, -1.847660084725938e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.847959011143043e-08, -3.695918022286086e-08, -1.847959011143043e-08, -1.848117997158982e-08, -3.696235994317963e-08, -1.848117997158982e-08, -1.848746112224567e-08, -3.697492224449134e-08, -1.848746112224567e-08, -1.612679948141211e-09, -3.225359896282422e-09, -1.612679948141211e-09, -8.322953900565789e-10, -1.664590780113158e-09, -8.322953900565789e-10, -4.060715553864505e-10, -8.121431107729010e-10, -4.060715553864505e-10, 4.741708203389129e-07, 9.483416406778258e-07, 4.741708203389129e-07, 1.979802329280916e-07, 3.959604658561832e-07, 1.979802329280916e-07, 1.997917698097481e-07, 3.995835396194962e-07, 1.997917698097481e-07, 1.989517743519718e-07, 3.979035487039435e-07, 1.989517743519718e-07, 1.991441181350006e-07, 3.982882362700013e-07, 1.991441181350006e-07, 4.783137374217549e-07, 9.566274748435099e-07, 4.783137374217549e-07, 1.710839122938636e-02, 3.421678245877272e-02, 1.710839122938636e-02, 5.033339926019081e-03, 1.006667985203816e-02, 5.033339926019081e-03, 8.181933765030991e-04, 1.636386753006198e-03, 8.181933765030991e-04, 2.565287487560672e-03, 5.130574975121345e-03, 2.565287487560672e-03, 2.039157550335382e-02, 4.078315100670763e-02, 2.039157550335382e-02, 8.376044145910626e-04, 1.675208829182125e-03, 8.376044145910626e-04, 1.009971612632881e+00, 2.019943225265763e+00, 1.009971612632881e+00, 2.009085984451618e+00, 4.018171968903236e+00, 2.009085984451618e+00, 7.161180996071040e-04, 1.432236199214208e-03, 7.161180996071040e-04, 3.198711391732326e-01, 6.397422783464641e-01, 3.198711391732326e-01, 8.861922137427819e-02, 1.772384427485567e-01, 8.861922137427819e-02, 9.779607304967136e-02, 1.955921460993432e-01, 9.779607304967136e-02, 3.639634679704463e-01, 7.279269359474785e-01, 3.639634679704463e-01, 2.409007586134528e-01, 4.818015172255921e-01, 2.409007586134528e-01, 1.005332790312624e+00, 2.010665580625418e+00, 1.005332790312624e+00, 9.625371928632116e-02, 1.925074385551221e-01, 9.625371928632116e-02, 5.793237621403894e-03, 1.158647524532317e-02, 5.793237621403894e-03, 5.793237617003390e-03, 1.158647523571002e-02, 5.793237617003390e-03, -1.957761236547980e-06, -3.915522473095960e-06, -1.957761236547980e-06, -1.081917251732826e-06, -2.163834503465653e-06, -1.081917251732826e-06, -1.076549356889530e-06, -2.153098713779059e-06, -1.076549356889530e-06, -1.081594183262665e-06, -2.163188366525330e-06, -1.081594183262665e-06, -3.228681887371246e-06, -6.457363774742493e-06, -3.228681887371246e-06, -1.960553560801734e-06, -3.921107121603466e-06, -1.960553560801734e-06, 8.595465382030255e-06, 1.719093076406051e-05, 8.595465382030255e-06, 7.878353806233420e-06, 1.575670761246684e-05, 7.878353806233420e-06, 3.661212361386230e-06, 7.322424722772460e-06, 3.661212361386230e-06, 3.417135360362071e-06, 6.834270720724143e-06, 3.417135360362071e-06, 1.548715115937878e-05, 3.097430231875755e-05, 1.548715115937878e-05, 7.925580566132754e-06, 1.585116113226551e-05, 7.925580566132754e-06, 4.532118349774710e-03, 9.064236699549420e-03, 4.532118349774710e-03, -1.215740533169629e-02, -2.431481066339259e-02, -1.215740533169629e-02, 2.289562518053153e-03, 4.579125036106306e-03, 2.289562518053153e-03, 3.265005080137016e-03, 6.530010160274031e-03, 3.265005080137016e-03, 3.025096886724054e-03, 6.050193773448108e-03, 3.025096886724054e-03, 2.006990883845777e-03, 4.013981767691554e-03, 2.006990883845777e-03, 3.189713584887149e-01, 6.379427169774333e-01, 3.189713584887149e-01, 6.572599769236299e-01, 1.314519953847260e+00, 6.572599769236299e-01, 2.156071435700659e+00, 4.312142871401310e+00, 2.156071435700659e+00, 4.725110626943187e-06, 9.450221253886375e-06, 4.725110626943187e-06, 2.904872874654650e+00, 5.809745749309299e+00, 2.904872874654650e+00, 2.904872874654665e+00, 5.809745749309333e+00, 2.904872874654665e+00, 2.415310882961957e-02, 4.830621764195879e-02, 2.415310882961957e-02, 9.619955854866247e-03, 1.923991171811445e-02, 9.619955854866247e-03, 1.104695741372184e+00, 2.209391482549601e+00, 1.104695741372184e+00, 2.643446368841089e+00, 5.286892737682200e+00, 2.643446368841089e+00, 2.542653126991768e-01, 5.085306253832139e-01, 2.542653126991768e-01, 2.542653126995181e-01, 5.085306253728998e-01, 2.542653126995181e-01, 3.234409136443859e-02, 6.468818272887718e-02, 3.234409136443859e-02, 1.500229900237309e-02, 3.000459800474619e-02, 1.500229900237309e-02, 4.966722192704189e-02, 9.933444385408378e-02, 4.966722192704189e-02, 5.478521680720631e-02, 1.095704336144126e-01, 5.478521680720631e-02, 5.821316481859368e-02, 1.164263296371874e-01, 5.821316481859368e-02, 5.024165586036622e-02, 1.004833117207324e-01, 5.024165586036622e-02, 5.585594391478688e-02, 1.117118878295738e-01, 5.585594391478688e-02, 1.247358026749559e-02, 2.494716053499118e-02, 1.247358026749559e-02, 3.676020403794095e-03, 7.352040807588190e-03, 3.676020403794095e-03, -2.855691971104129e-02, -5.711383942208258e-02, -2.855691971104129e-02, -8.574118548891145e-03, -1.714823709778229e-02, -8.574118548891145e-03, -1.253404999630897e-02, -2.506809999261795e-02, -1.253404999630897e-02, -7.866203355216279e-03, -1.573240671043256e-02, -7.866203355216279e-03, 3.418039663356712e-01, 6.836079326713423e-01, 3.418039663356712e-01, 1.930555302978621e-01, 3.861110605957242e-01, 1.930555302978621e-01, 3.202654910925599e-02, 6.405309821851198e-02, 3.202654910925599e-02, 9.658747845786314e-02, 1.931749569157263e-01, 9.658747845786314e-02, 9.615180741207964e-02, 1.923036148241593e-01, 9.615180741207964e-02, 4.462150278885801e-03, 8.924300557771601e-03, 4.462150278885801e-03, 1.469119452781610e+04, 2.938238905563220e+04, 1.469119452781610e+04, 2.259729270924290e-01, 4.519458541848589e-01, 2.259729270924290e-01, 3.387655846013562e-02, 6.775311692027124e-02, 3.387655846013562e-02, 6.318565908098790e-01, 1.263713181619750e+00, 6.318565908098790e-01, 6.318565908098670e-01, 1.263713181619743e+00, 6.318565908098670e-01, 3.660674340188287e+06, 7.321348680376574e+06, 3.660674340188287e+06, 1.306099286498183e-03, 2.612198811720856e-03, 1.306099286498183e-03, 1.444040185568499e+09, 2.888080371136998e+09, 1.444040185568499e+09, 7.143254130092299e+02, 1.428650826018460e+03, 7.143254130092299e+02, 4.147983738708307e-02, 8.295967479654562e-02, 4.147983738708307e-02, 8.381930147525456e+00, 1.676386029524526e+01, 8.381930147525456e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.715043293947604e-04, -1.715043293947603e-04, -1.715078535679046e-04, -1.715078535679046e-04, -1.715214703953723e-04, -1.715214703953723e-04, 3.527051713181123e-04, 3.527051713181123e-04, 4.909423140200380e-04, 4.909423140200380e-04, 6.299776939294681e-04, 6.299776939294681e-04, 6.480883220559478e-04, 6.480883220559471e-04, 6.588060495216192e-04, 6.588060495216196e-04, 6.079393364029246e-04, 6.079393364029242e-04, 6.284296058118999e-04, 6.284296058118989e-04, 6.263478110724552e-04, 6.263478110724552e-04, 6.206174151722429e-04, 6.206174151722429e-04, -1.337228018482326e-02, -1.337228018482328e-02, -2.395822844588595e-03, -2.395822844588563e-03, -2.554829713107639e-03, -2.554829713107600e-03, -1.911345797877759e-03, -1.911345797877732e-03, -1.440945494944044e-02, -1.440945494944045e-02, -5.320679405831318e-05, -5.320679405840856e-05, -7.751879761942529e-02, -7.751879761942447e-02, -8.727452009117453e-02, -8.727452009117438e-02, -6.277733906366461e-03, -6.277733906366461e-03, -5.554879644215430e-02, -5.554879644215509e-02, -3.494770116451698e-02, -3.494770116451840e-02, -3.515129753799667e-02, -3.515129753799642e-02, -3.419976841699144e-04, -3.419976841709291e-04, -4.116262033647355e-04, -4.116262033637985e-04, -1.951098965702529e-02, -1.951098965702529e-02, -5.246976340064340e-05, -5.246976340064340e-05, -1.196893000519772e-04, -1.196893000518438e-04, -1.196893000524198e-04, -1.196893000524198e-04, -7.233448669535631e-04, -7.233448669535562e-04, -1.193720104663799e-03, -1.193720104663794e-03, -9.505344251410997e-04, -9.505344251410958e-04, -1.178102569351967e-03, -1.178102569351956e-03, -5.691660681679178e-04, -5.691660681679178e-04, -7.996758790930771e-04, -7.996758790930771e-04, 3.987999121231485e-03, 3.987999121231486e-03, 3.664420980213300e-03, 3.664420980213298e-03, 5.057731320440241e-03, 5.057731320440237e-03, 4.748967099122045e-03, 4.748967099122045e-03, 2.937777676659196e-03, 2.937777676659196e-03, 3.686846970315296e-03, 3.686846970315296e-03, 5.768078780991170e-03, 5.768078780991169e-03, 1.026051626516067e-01, 1.026051626516068e-01, -2.646293890413845e-03, -2.646293890413854e-03, 1.871793025972406e-02, 1.871793025972408e-02, 2.245979230790400e-02, 2.245979230790399e-02, 4.180405938290145e-02, 4.180405938290146e-02, -8.025566528774251e-02, -8.025566528774254e-02, -5.027935939573368e-02, -5.027935939573512e-02, -8.027029619168938e-02, -8.027029619168811e-02, 1.238930727156027e-02, 1.238930727156027e-02, -8.855050723098748e-02, -8.855050723098742e-02, -8.855050723098892e-02, -8.855050723098734e-02, -1.718787013341038e-05, -1.718787013371935e-05, -4.346167948396207e-05, -4.346167948396207e-05, -1.615059828047301e-04, -1.615059828055789e-04, -5.851427714347433e-02, -5.851427714347687e-02, -1.001815600122426e-04, -1.001815600122942e-04, -1.001815600104502e-04, -1.001815600111952e-04, 1.568601569558599e+00, 1.568601569558600e+00, 4.230491026382976e-01, 4.230491026382975e-01, 1.156784493446817e+00, 1.156784493446818e+00, 1.265136690176012e+00, 1.265136690176011e+00, 1.243720379911562e+00, 1.243720379911561e+00, 1.134839763509558e+00, 1.134839763509557e+00, 1.428658066049186e+00, 1.428658066049185e+00, 5.081161175575119e-04, 5.081161175575119e-04, 3.134563705906487e-02, 3.134563705906488e-02, 1.104101872026485e-01, 1.104101872026486e-01, 1.419310221592527e-01, 1.419310221592526e-01, 5.467714458639933e-02, 5.467714458639934e-02, 3.274811467706449e-03, 3.274811467706458e-03, -5.285722561283936e-02, -5.285722561283931e-02, -2.238533113667987e-02, -2.238533113667987e-02, 5.292690011131652e-02, 5.292690011131655e-02, 4.050947425103400e-02, 4.050947425103404e-02, 4.070997474788357e-02, 4.070997474788353e-02, 1.184083561302382e-02, 1.184083561302382e-02, -2.394431517551731e-02, -2.394431517551759e-02, -3.217437316055402e-02, -3.217437316055402e-02, 1.892213194797448e-02, 1.892213194797448e-02, -9.443390854637071e-02, -9.443390854637214e-02, -9.443390854637072e-02, -9.443390854637215e-02, -5.523915948015944e-04, -5.523915948018697e-04, -1.147946044877417e-06, -1.147946044940933e-06, -3.635147018133667e-05, -3.635147018133667e-05, -1.627875899221886e-01, -1.627875899221870e-01, -1.154001891118839e-04, -1.154001891118839e-04, -1.154003820655033e-04, -1.154003820657791e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
