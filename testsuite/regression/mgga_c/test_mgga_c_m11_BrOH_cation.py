
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.473275582384049e-01, -3.473454435096097e-01, -3.474202293767879e-01, -3.471555056477162e-01, -3.472948826804053e-01, -3.472948826804053e-01, -6.410855909827616e-02, -6.412466649618519e-02, -6.452919870734938e-02, -6.428917005339148e-02, -6.434757435705890e-02, -6.434757435705890e-02, 6.140318894575638e-03, 6.587724536655150e-03, 1.531085870960988e-02, 1.680256764912839e-02, 1.616261461532313e-02, 1.616261461532313e-02, 1.361869333544740e-02, 1.477127457433421e-02, -3.407767028408053e-02, -1.685150801905998e-02, -8.236191872122486e-04, -8.236191872120445e-04, -3.190705875282198e-02, -3.325743574704474e-02, -1.037046388467346e-01, -2.003263633126966e-02, -2.077876468393224e-02, -2.077876468393230e-02, -2.770029054766410e-01, -2.758617034034223e-01, -2.769525446141480e-01, -2.759454141813701e-01, -2.764354976450341e-01, -2.764354976450341e-01, -2.688318613548789e-02, -3.289909043365490e-02, -2.120128291364793e-02, -2.714230523363262e-02, -3.278609767825078e-02, -3.278609767825078e-02, -4.595031380141239e-02, -5.810730532992422e-02, -4.456070916515043e-02, -5.408174463770841e-02, -4.940327957752329e-02, -4.940327957752330e-02, -6.697509735906523e-02, -3.756105542158107e-04, -7.522864691583744e-02, -7.992594230112360e-02, -2.704876135110745e-02, -2.704876135110702e-02, -1.593085718907576e-02, -1.964280885220735e-02, -1.543421578825350e-02, -1.009676585336518e-01, -1.719128829204710e-02, -1.719128829204713e-02, -2.520456970947813e-01, -8.470366618979573e-02, -1.242648512978124e-01, -1.754313624840490e-01, -1.478224864192859e-01, -1.478224864192859e-01, -2.302107541471813e-01, -3.727650519886436e-02, -4.834957723656554e-02, -7.995996277339865e-02, -6.620910473257420e-02, -6.620910473257421e-02, -6.034819096932018e-02, 1.521271685737492e-02, 2.289451885073071e-02, -2.181038389544469e-02, 4.743184761102788e-03, 4.743184761102754e-03, -3.685004831087810e-02, -1.023472283479312e-01, -1.103111058306145e-01, -3.552163505471031e-02, -7.160953598662405e-02, -7.160953598662410e-02, -4.246585193277687e-02, -5.932989165215580e-03, -1.170366057514637e-02, -7.511615353471836e-02, -1.622789557739329e-02, -1.622789557739329e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.255373564147628e+00, -1.255374320698433e+00, -1.255335702625033e+00, -1.255336978427779e+00, -1.255200497430380e+00, -1.255199086650732e+00, -1.255754020973803e+00, -1.255758494196157e+00, -1.255456969015567e+00, -1.255464456425501e+00, -1.255456969015567e+00, -1.255464456425501e+00, -1.878655585065242e-01, -1.878673934980599e-01, -1.876664394782928e-01, -1.876685353178361e-01, -1.824288545536835e-01, -1.824260694694626e-01, -1.844583968437942e-01, -1.844565047593303e-01, -1.842975928393072e-01, -1.842471140618454e-01, -1.842975928393072e-01, -1.842471140618454e-01, -8.976177828644498e-02, -8.960807704338461e-02, -8.734830801854548e-02, -8.716243876030524e-02, -2.681155441822964e-02, -2.698350278617560e-02, -5.381305855973186e-02, -5.377090400459425e-02, -4.662376082104420e-02, -4.801437535257065e-02, -4.662376082104420e-02, -4.801437535257065e-02, 3.912430592478593e-02, 3.920153793463411e-02, 3.417675758011945e-02, 3.421353126946852e-02, 1.097628262343480e-02, 1.553317666054396e-02, 3.320746516051509e-02, 3.401967845884029e-02, 2.426248706751158e-02, 9.820886628383705e-03, 2.426248706751065e-02, 9.820886628385353e-03, -4.241190377453326e-02, -3.886683360675252e-02, -4.441465598300310e-02, -4.020988867632551e-02, -1.009231100939550e-01, -8.908691204591666e-02, -2.553208012311840e-02, -2.612506161825362e-02, -2.307070608416024e-02, -4.535006013691856e-02, -2.307070608415748e-02, -4.535006013691623e-02, 1.841642624872387e-02, 1.831724132856840e-02, 3.634590625295894e-02, 3.624459692086500e-02, 1.944481907127274e-02, 1.934380974902788e-02, 3.526155385190109e-02, 3.516248869710634e-02, 2.742044796195145e-02, 2.731968963495708e-02, 2.742044796195145e-02, 2.731968963495708e-02, -3.059557712457980e-01, -3.059591679206910e-01, -2.825922207907343e-01, -2.826132959268981e-01, -3.217358322793721e-01, -3.216368948342947e-01, -3.044968125269689e-01, -3.043756694208760e-01, -2.835218020741824e-01, -2.838614774349223e-01, -2.835218020741824e-01, -2.838614774349223e-01, -9.791314832410686e-02, -9.819728494130932e-02, -3.938090375425841e-03, -3.898961107303212e-03, -8.218028225316314e-02, -7.848960698161318e-02, -7.465567541074013e-02, -7.081797082145015e-02, -1.258715265552803e-01, -1.314751739222452e-01, -1.258715265552804e-01, -1.314751739222453e-01, 5.222723585656026e-02, 5.367012294526214e-02, 3.051841194563860e-02, 3.064249469740145e-02, 3.595675276545177e-02, 4.476870806892760e-02, -1.445241021480610e-01, -1.445955849745549e-01, 5.168750665485287e-02, 5.594748061726298e-02, 5.168750665485450e-02, 5.594748061725505e-02, -2.119721527739933e-02, -2.013246742558672e-02, -2.559941788477269e-02, -2.508034132116205e-02, -2.077417254984219e-02, -1.923875952089006e-02, -3.288914719751985e-02, -3.155717388750766e-02, -2.921312165520397e-02, -1.941903699329978e-02, -2.921312165520501e-02, -1.941903699330095e-02, -6.290599599970391e-01, -6.270594603515869e-01, -3.612651006052132e-01, -3.605426035964124e-01, -5.477253940187257e-01, -5.466391241288607e-01, -6.540986882720217e-01, -6.526239955757639e-01, -6.102990483094209e-01, -6.090274840851035e-01, -6.102990483094207e-01, -6.090274840851039e-01, -6.207024935649383e-01, -6.191465469916928e-01, -4.803998858720789e-02, -4.764497713556239e-02, -1.683954738976145e-01, -1.679355903539219e-01, -7.713791995612078e-02, -7.675547425025159e-02, -1.931179014806665e-01, -1.926941642303784e-01, -1.931179014806665e-01, -1.926941642303784e-01, -5.671962214886608e-02, -5.654902988795761e-02, 5.337423978925324e-02, 5.336338249007237e-02, -1.500681666818038e-02, -1.511344366101937e-02, -1.548974319107111e-01, -1.545624847377746e-01, -1.482339747973912e-01, -1.482408282226567e-01, -1.482339747973914e-01, -1.482408282226569e-01, -9.115437788132576e-02, -9.055934818681152e-02, -9.668591240675795e-02, -9.523036210501636e-02, -8.172558970746568e-02, -7.401413610115602e-02, -7.935965191960595e-02, -7.810655652157614e-02, 2.904966236896654e-02, 3.772650711311036e-02, 2.904966236894730e-02, 3.772650711311119e-02, -5.481879196272054e-02, -5.198108328512216e-02, -7.789108675171870e-03, -7.766668765484820e-03, -1.589023777271883e-02, -1.465807586688648e-02, 2.480547569437435e-02, 2.748896915425396e-02, -2.668899764171018e-02, -1.847579200834902e-02, -2.668899764170944e-02, -1.847579200834901e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.364964763335268e-10, -8.729929526670539e-10, -4.364964763335268e-10, -4.365468231726546e-10, -8.730936463453092e-10, -4.365468231726546e-10, -4.367292863476566e-10, -8.734585726953133e-10, -4.367292863476566e-10, -4.359840181912469e-10, -8.719680363824937e-10, -4.359840181912469e-10, -4.363803154187211e-10, -8.727606308374422e-10, -4.363803154187211e-10, -4.363803154187211e-10, -8.727606308374422e-10, -4.363803154187211e-10, 5.446284482610774e-07, 1.089256896522155e-06, 5.446284482610774e-07, 5.447232017107114e-07, 1.089446403421422e-06, 5.447232017107114e-07, 5.469957093095327e-07, 1.093991418619065e-06, 5.469957093095327e-07, 5.421567649947204e-07, 1.084313529989441e-06, 5.421567649947204e-07, 5.444707256354352e-07, 1.088941451270870e-06, 5.444707256354352e-07, 5.444707256354352e-07, 1.088941451270870e-06, 5.444707256354352e-07, 3.655674153939024e-03, 7.311348307878048e-03, 3.655674153939024e-03, 3.651556505895006e-03, 7.303113011790012e-03, 3.651556505895006e-03, 3.328147384672314e-03, 6.656294769344629e-03, 3.328147384672314e-03, 3.099069409420271e-03, 6.198138818840543e-03, 3.099069409420271e-03, 3.183243527689263e-03, 6.366487055378527e-03, 3.183243527689263e-03, 3.183243527689263e-03, 6.366487055378527e-03, 3.183243527689263e-03, 4.092023205741549e-01, 8.184046411483100e-01, 4.092023205741549e-01, 4.235654705747453e-01, 8.471309411494904e-01, 4.235654705747453e-01, 2.651794257597751e-03, 5.303588515195501e-03, 2.651794257597751e-03, 5.621150171487895e-01, 1.124230034297580e+00, 5.621150171487895e-01, 3.326713289845344e-01, 6.653426579690681e-01, 3.326713289845344e-01, 3.326713289845361e-01, 6.653426579690719e-01, 3.326713289845361e-01, 4.788884038002354e-02, 9.577768076380651e-02, 4.788884038002354e-02, 5.631798958728922e-02, 1.126359791694880e-01, 5.631798958728922e-02, 2.785964198139545e-01, 5.571928396280250e-01, 2.785964198139545e-01, 1.702776338319205e-02, 3.405552676577402e-02, 1.702776338319205e-02, 2.497453161254348e-02, 4.994906323272298e-02, 2.497453161254348e-02, 2.497453162182187e-02, 4.994906323593746e-02, 2.497453162182187e-02, -1.082704864347154e-06, -2.165409728694309e-06, -1.082704864347154e-06, -1.088415950609394e-06, -2.176831901218787e-06, -1.088415950609394e-06, -1.082923358024712e-06, -2.165846716049425e-06, -1.082923358024712e-06, -1.087966382708446e-06, -2.175932765416892e-06, -1.087966382708446e-06, -1.085695174344057e-06, -2.171390348688115e-06, -1.085695174344057e-06, -1.085695174344057e-06, -2.171390348688115e-06, -1.085695174344057e-06, 4.217376051306479e-06, 8.434752102612957e-06, 4.217376051306479e-06, 3.813550280278315e-06, 7.627100560556632e-06, 3.813550280278315e-06, 4.356876097154176e-06, 8.713752194308352e-06, 4.356876097154176e-06, 3.955852997306408e-06, 7.911705994612817e-06, 3.955852997306408e-06, 3.932493509121659e-06, 7.864987018243319e-06, 3.932493509121659e-06, 3.932493509121659e-06, 7.864987018243319e-06, 3.932493509121659e-06, 4.005839146031172e-03, 8.011678292062344e-03, 4.005839146031172e-03, -2.004871875441440e-02, -4.009743750882880e-02, -2.004871875441440e-02, 4.270946414614275e-03, 8.541892829228549e-03, 4.270946414614275e-03, 7.536615888875438e-03, 1.507323177775088e-02, 7.536615888875438e-03, 2.875752440943147e-03, 5.751504881886295e-03, 2.875752440943147e-03, 2.875752440943144e-03, 5.751504881886289e-03, 2.875752440943144e-03, 5.189805473894894e-01, 1.037961094778983e+00, 5.189805473894894e-01, 1.959580001820791e-01, 3.919160003641581e-01, 1.959580001820791e-01, 5.517029047950350e-01, 1.103405809590070e+00, 5.517029047950350e-01, 1.715098396545481e-05, 3.430196793090963e-05, 1.715098396545481e-05, 7.334128530745320e-01, 1.466825706149061e+00, 7.334128530745320e-01, 7.334128530745363e-01, 1.466825706149070e+00, 7.334128530745363e-01, 1.660636084436244e-02, 3.321272165102332e-02, 1.660636084436244e-02, 2.093642563530829e-02, 4.187285125107435e-02, 2.093642563530829e-02, 2.085129807206245e-01, 4.170259613799339e-01, 2.085129807206245e-01, 6.243902931823420e-01, 1.248780586364681e+00, 6.243902931823420e-01, 7.980737526673427e-02, 1.596147505210024e-01, 7.980737526673427e-02, 7.980737533513477e-02, 1.596147506520519e-01, 7.980737533513477e-02, 3.505949372279289e-02, 7.011898744558577e-02, 3.505949372279289e-02, 1.606946255145525e-02, 3.213892510291051e-02, 1.606946255145525e-02, 3.950961971836897e-02, 7.901923943673794e-02, 3.950961971836897e-02, 5.244371420417376e-02, 1.048874284083475e-01, 5.244371420417376e-02, 4.749706553899521e-02, 9.499413107799046e-02, 4.749706553899521e-02, 4.749706553899521e-02, 9.499413107799046e-02, 4.749706553899521e-02, 5.916144566521143e-02, 1.183228913304229e-01, 5.916144566521143e-02, 5.349462735322131e-03, 1.069892547064426e-02, 5.349462735322131e-03, 2.546216968841752e-03, 5.092433937683504e-03, 2.546216968841752e-03, -3.143817017946914e-02, -6.287634035893826e-02, -3.143817017946914e-02, -9.351100133920673e-03, -1.870220026784135e-02, -9.351100133920673e-03, -9.351100133920673e-03, -1.870220026784135e-02, -9.351100133920673e-03, -7.596328295865344e-03, -1.519265659173069e-02, -7.596328295865344e-03, 1.145870816112226e-01, 2.291741632224450e-01, 1.145870816112226e-01, 8.943647241762742e-02, 1.788729448352548e-01, 8.943647241762742e-02, 2.531840945650698e-02, 5.063681891301396e-02, 2.531840945650698e-02, 5.646275535845431e-02, 1.129255107169086e-01, 5.646275535845431e-02, 5.646275535845434e-02, 1.129255107169087e-01, 5.646275535845434e-02, 5.820260150777861e-03, 1.164052030155572e-02, 5.820260150777861e-03, 2.297046987225760e-01, 4.594093974451607e-01, 2.297046987225760e-01, 3.413645896887512e-01, 6.827291793775405e-01, 3.413645896887512e-01, 2.852107466919474e-02, 5.704214933838947e-02, 2.852107466919474e-02, 9.526943613743354e-01, 1.905388722748669e+00, 9.526943613743354e-01, 9.526943613743181e-01, 1.905388722748634e+00, 9.526943613743181e-01, 5.967453567102297e-02, 1.193490713423601e-01, 5.967453567102297e-02, 2.271307304914358e-02, 4.542614580122054e-02, 2.271307304914358e-02, 2.842132647113785e-02, 5.684265290880143e-02, 2.842132647113785e-02, 8.959921137312713e-01, 1.791984227462543e+00, 8.959921137312713e-01, 1.018649943089108e-01, 2.037299886654535e-01, 1.018649943089108e-01, 1.018649942676985e-01, 2.037299885386736e-01, 1.018649942676985e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.168605970672740e-04, 6.168605970672738e-04, 6.168527150668362e-04, 6.168527150668366e-04, 6.168257359785321e-04, 6.168257359785318e-04, 6.169425512523832e-04, 6.169425512523830e-04, 6.168804072841204e-04, 6.168804072841204e-04, 6.168804072841204e-04, 6.168804072841204e-04, 6.455716502561371e-04, 6.455716502561364e-04, 6.441156526195802e-04, 6.441156526195805e-04, 6.055551854050168e-04, 6.055551854050166e-04, 6.211401693472480e-04, 6.211401693472471e-04, 6.195559913282732e-04, 6.195559913282732e-04, 6.195559913282732e-04, 6.195559913282732e-04, -6.832175876313927e-05, -6.832175876312819e-05, -3.054236533827243e-04, -3.054236533826853e-04, -5.329064489805621e-03, -5.329064489805594e-03, -2.601316876532469e-03, -2.601316876532443e-03, -3.312238079312777e-03, -3.312238079312852e-03, -3.312238079312777e-03, -3.312238079312852e-03, -6.976611480401516e-02, -6.976611480401428e-02, -6.758476828920568e-02, -6.758476828920552e-02, -7.581053450030320e-03, -7.581053450030320e-03, -5.809573446728373e-02, -5.809573446728449e-02, -3.923299962909887e-02, -3.923299962910024e-02, -3.923299962910125e-02, -3.923299962910103e-02, -3.419973029006953e-04, -3.419973029017099e-04, -4.116258680368741e-04, -4.116258680359371e-04, -1.950593609492701e-02, -1.950593609492701e-02, -5.246975833902912e-05, -5.246975833902912e-05, -1.196893082918669e-04, -1.196893082917335e-04, -1.196893082923095e-04, -1.196893082923095e-04, -9.336942829104663e-04, -9.336942829104566e-04, -1.190643591485925e-03, -1.190643591485919e-03, -9.484601360449372e-04, -9.484601360449333e-04, -1.175146647081289e-03, -1.175146647081279e-03, -1.062077215506090e-03, -1.062077215506090e-03, -1.062077215506090e-03, -1.062077215506090e-03, 4.653981266909827e-03, 4.653981266909828e-03, 4.246803434489382e-03, 4.246803434489380e-03, 4.926251081119572e-03, 4.926251081119568e-03, 4.648148489323413e-03, 4.648148489323413e-03, 4.259141196483206e-03, 4.259141196483206e-03, 4.259141196483206e-03, 4.259141196483206e-03, 8.109341958150664e-03, 8.109341958150662e-03, -3.813767933059863e-03, -3.813767933059905e-03, 2.539870059029551e-03, 2.539870059029547e-03, -1.847723404776931e-03, -1.847723404776928e-03, 2.504407875165773e-02, 2.504407875165773e-02, 2.504407875165778e-02, 2.504407875165778e-02, -8.054711385217267e-02, -8.054711385217271e-02, -4.046718661940170e-02, -4.046718661940325e-02, -7.916906069592505e-02, -7.916906069592375e-02, 2.196282648028301e-03, 2.196282648028301e-03, -8.101113313085977e-02, -8.101113313085970e-02, -8.101113313086131e-02, -8.101113313085959e-02, -1.718787002726082e-05, -1.718787002756979e-05, -4.346168032661980e-05, -4.346168032661980e-05, -1.615059470883343e-04, -1.615059470891830e-04, -5.833319867647740e-02, -5.833319867647996e-02, -1.001815488653597e-04, -1.001815488654113e-04, -1.001815488635673e-04, -1.001815488643123e-04, 1.360318763976180e+00, 1.360318763976182e+00, 5.077638704231033e-01, 5.077638704231032e-01, 9.143897452053923e-01, 9.143897452053935e-01, 1.256811077693581e+00, 1.256811077693580e+00, 1.093997018270516e+00, 1.093997018270516e+00, 1.093997018270516e+00, 1.093997018270516e+00, 1.354889204302190e+00, 1.354889204302189e+00, -1.172311544485803e-02, -1.172311544485803e-02, 6.810168067839109e-02, 6.810168067839110e-02, 8.434105108214061e-02, 8.434105108214064e-02, 1.232215581204326e-01, 1.232215581204325e-01, 1.232215581204325e-01, 1.232215581204325e-01, 9.644513621498155e-03, 9.644513621498166e-03, -4.706756343411525e-02, -4.706756343411519e-02, -1.278990868892754e-02, -1.278990868892754e-02, 6.058148059822725e-02, 6.058148059822730e-02, 6.035997362463766e-02, 6.035997362463772e-02, 6.035997362463771e-02, 6.035997362463764e-02, 1.271057695606071e-02, 1.271057695606071e-02, -1.785985265840286e-02, -1.785985265840090e-02, -3.217848866369032e-02, -3.217848866369032e-02, 1.671997859611712e-02, 1.671997859611712e-02, -9.462399346453307e-02, -9.462399346453448e-02, -9.462399346453310e-02, -9.462399346453451e-02, -4.335403945314073e-04, -4.335403945314074e-04, -1.147946046325902e-06, -1.147946046389418e-06, -2.861411021967346e-05, -2.861411021967346e-05, -9.441332174666606e-02, -9.441332174666485e-02, -1.154001938454210e-04, -1.154001938454210e-04, -1.154001938427175e-04, -1.154001938429934e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
