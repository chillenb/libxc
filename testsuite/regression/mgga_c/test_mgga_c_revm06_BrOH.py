
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.086522179629240e-01, -1.086527615932733e-01, -1.086556922544695e-01, -1.086468705210533e-01, -1.086524992712975e-01, -1.086524992712975e-01, -6.080249792304933e-02, -6.080457766976292e-02, -6.085801741854312e-02, -6.069431986122867e-02, -6.080408483472874e-02, -6.080408483472874e-02, -3.657132452353309e-02, -3.639189232250133e-02, -3.131983876213326e-02, -3.034628252529710e-02, -3.650444664100867e-02, -3.650444664100867e-02, -1.163045246714193e-02, -1.240619884614006e-02, -7.418094019601526e-02, 1.459392028924999e-02, -1.185960450330073e-02, -1.185960450330073e-02, 1.618363925105796e-02, 1.684986283994098e-02, 4.346826346568945e-02, 9.823507344577296e-03, 1.667450021140384e-02, 1.667450021140385e-02, -8.612807118603143e-02, -8.621031045169311e-02, -8.613783617724771e-02, -8.620168892586132e-02, -8.616841155699023e-02, -8.616841155699023e-02, -4.535621941743066e-02, -4.643648601787317e-02, -4.531275891543298e-02, -4.620461412191072e-02, -4.613341996272022e-02, -4.613341996272022e-02, -3.694224416478480e-02, -4.836247818182597e-02, -3.516494649254687e-02, -4.501149494709442e-02, -3.921595328684521e-02, -3.921595328684521e-02, 3.664732194989503e-02, 4.523726910923378e-04, 3.457277289791584e-02, -7.048806959337139e-02, 2.287519035792505e-02, 2.287519035792505e-02, 8.934205350496566e-03, 1.041699086232871e-02, 7.560605936273990e-03, 4.694187319859449e-02, 9.870024557074050e-03, 9.870024557074048e-03, -5.051766731635703e-02, -4.889843171503006e-02, -4.956740827227341e-02, -5.004557408794506e-02, -4.981330810610973e-02, -4.981330810610974e-02, -4.957682585461710e-02, -3.531116250920689e-02, -3.839995560176745e-02, -4.218748025842133e-02, -4.007652295210343e-02, -4.007652295210343e-02, -4.902978639807213e-02, -1.078453742077558e-02, -1.754996065994633e-02, -2.439620814751506e-02, -2.157382149803243e-02, -2.157382149803243e-02, -2.938179051050419e-02, 4.213510222095773e-02, 4.639269835749857e-02, -2.617122087229251e-02, 3.726263839025867e-02, 3.726263839025862e-02, 2.082371168154685e-02, 3.400464841379011e-03, 5.333508245290147e-03, 3.614301354839558e-02, 8.581897296819973e-03, 8.581897296819983e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.300829355386067e-01, -1.300837291458549e-01, -1.300823928255935e-01, -1.300692010098300e-01, -1.300833985840053e-01, -1.300833985840053e-01, -1.163153331895378e-01, -1.163171505751706e-01, -1.163596209168582e-01, -1.161609929669561e-01, -1.163171491598974e-01, -1.163171491598974e-01, -6.887902352809552e-02, -6.883453994242206e-02, -6.901515464369685e-02, -6.695381831411375e-02, -6.886111524186843e-02, -6.886111524186843e-02, -3.890969088376346e-02, -3.741563089648404e-02, -7.518013525787692e-02, -7.335847137880845e-02, -3.847524705907594e-02, -3.847524705907594e-02, 2.758796422408883e-02, 2.853774553684017e-02, 4.601879606023150e-02, 1.566622443689800e-02, 2.829334012836103e-02, 2.829334012836103e-02, -1.013160939122612e-01, -1.014649458482696e-01, -1.013257568920593e-01, -1.014418325568291e-01, -1.014000991609447e-01, -1.014000991609447e-01, -5.684894537326340e-02, -5.564498038237688e-02, -5.591903992213928e-02, -5.485807269025821e-02, -5.745575154057255e-02, -5.745575154057255e-02, -6.589658431264819e-02, -6.450183025365841e-02, -6.690660525823650e-02, -6.581845612844628e-02, -6.664443866217004e-02, -6.664443866217004e-02, -2.933758855525141e-02, -6.039303283764635e-02, -3.227893322007487e-02, -8.685740905640374e-02, -5.128689873746447e-02, -5.128689873746447e-02, 1.503621694918187e-02, 1.693416439950853e-02, 1.305091628411313e-02, 1.903014645334587e-02, 1.569714262562728e-02, 1.569714262562727e-02, -5.805882343157234e-02, -6.123218936247589e-02, -6.045660135084886e-02, -5.956829437335891e-02, -6.004408277560977e-02, -6.004408277560977e-02, -5.646687161254876e-02, -3.927575209331983e-02, -4.939911304503689e-02, -5.905850607567613e-02, -5.478840713053282e-02, -5.478840713053285e-02, -6.572548860267487e-02, -4.847969001053783e-02, -3.794878306047666e-02, -4.398913452225038e-02, -3.515936645927861e-02, -3.515936645927865e-02, -4.611575119283115e-02, 5.095277161706830e-02, 3.618029861698351e-02, -4.955273800388217e-02, -1.356759593702621e-02, -1.356759593702640e-02, 3.157641838908481e-02, 5.407537694052655e-03, 9.456388346519124e-03, -1.405821954841536e-02, 1.365125093018543e-02, 1.365125093018541e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.960242762495540e-11, -9.959981482467015e-11, -9.960987529941081e-11, -9.965377842963871e-11, -9.960084819878516e-11, -9.960084819878516e-11, 1.026765096321775e-06, 1.026719338790324e-06, 1.024260017158266e-06, 1.011883177814856e-06, 1.026812587769309e-06, 1.026812587769309e-06, 2.562768945165736e-03, 2.547769907993810e-03, 2.145420862450121e-03, 1.877093430770417e-03, 2.557129830779214e-03, 2.557129830779214e-03, 1.810639559332706e-03, -5.718461695260821e-03, 2.396120959497357e-03, 1.267556596438161e+00, 7.863692982372322e-04, 7.863692982372322e-04, -8.634039449764336e+02, -7.716344859230126e+02, -7.881757439603915e+00, -2.679998575875969e+03, -8.081912509323995e+02, -8.081912509323990e+02, -8.964235984355802e-08, -8.885533484809017e-08, -8.960504557243526e-08, -8.899075683684545e-08, -8.918139311683315e-08, -8.918139311683315e-08, -5.944153079410453e-06, -6.438552310311843e-06, -6.225363586922240e-06, -6.638723517723005e-06, -5.886663378779183e-06, -5.886663378779183e-06, 2.507692625486328e-03, 4.374798494085979e-03, 5.013663553956139e-03, 8.080127655616809e-03, 1.917152272007437e-03, 1.917152272007437e-03, 1.508469838068258e+00, 1.258663853873443e-01, 1.750514518491990e+00, 2.785239184268689e-05, 1.282611496464620e+00, 1.282611496464620e+00, -3.590671884368137e+03, -2.429123668428197e+03, -9.057843603832383e+03, 2.536361136703980e+00, -3.297924319341365e+03, -3.297924319341354e+03, -9.068893987160351e-04, 1.493793144504559e-03, 1.427828353358588e-03, 9.575140198672907e-04, 1.257731839676207e-03, 1.257731839676207e-03, -1.118907887623858e-03, -6.272517810565485e-03, -3.952019089813450e-03, -3.609353456983017e-04, -2.199344366670938e-03, -2.199344366670929e-03, 3.836023139551337e-03, 1.512827026846660e-03, -1.373486533051373e-02, 5.756303735721891e-03, -1.246158652644738e-02, -1.246158652644731e-02, -1.915869386602653e-03, -1.251361016393871e+01, -1.511372911203063e+00, 2.462586405846938e-02, 2.343373520336916e+00, 2.343373520336928e+00, -3.631380894086819e+02, -4.176733218793038e+04, -1.492097913089696e+04, 3.066444498626609e+00, -5.581281949725830e+03, -5.581281949725860e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.175921856829425e-05, 3.175912879882294e-05, 3.176145941012385e-05, 3.176309465298630e-05, 3.175914556088595e-05, 3.175914556088595e-05, -1.038250934704060e-04, -1.037559818975959e-04, -1.014575998301598e-04, -9.933138767691711e-05, -1.038242898673816e-04, -1.038242898673816e-04, -4.431160374846349e-03, -4.404773641916459e-03, -3.519717023892460e-03, -3.081398691209619e-03, -4.421195307094887e-03, -4.421195307094887e-03, 2.656384841622763e-02, 2.561170170057481e-02, -5.727596353815455e-03, 3.688219186771887e-03, 2.611561902955839e-02, 2.611561902955839e-02, 1.472657332605301e-02, 1.510776031408302e-02, 1.947426218930606e-02, 3.477978884645185e-03, 1.538181845534319e-02, 1.538181845534318e-02, 4.406597350305556e-04, 4.398276804563959e-04, 4.406609240434231e-04, 4.400091992383220e-04, 4.401186971930296e-04, 4.401186971930296e-04, 1.126941937959573e-03, 1.208023483595903e-03, 1.160853538640105e-03, 1.227908214573866e-03, 1.135901578011111e-03, 1.135901578011111e-03, 3.054837553073312e-03, -8.442781012665216e-04, -3.368124570675703e-04, -2.840020780994988e-03, 4.208250758396741e-03, 4.208250758396741e-03, 1.543509359843279e-02, 1.895142153991058e-02, 1.613019998510871e-02, -4.660143451267520e-04, 1.861507104186414e-02, 1.861507104186414e-02, 5.003542836296848e-03, 4.608905853709518e-03, 8.456783282147695e-03, 1.322792053838298e-02, 4.329039676741628e-03, 4.329039676741623e-03, 8.802764742286071e-03, 8.661796003381761e-03, 8.230094815534276e-03, 8.251290156649708e-03, 8.191410884607569e-03, 8.191410884607569e-03, 4.285679503530584e-03, 1.880775277010337e-02, 1.738432673812737e-02, 1.306772723477895e-02, 1.538770760424799e-02, 1.538770760424797e-02, -1.593194216476409e-03, 2.069920756027131e-02, 1.668266042646947e-02, 5.843307516461367e-03, 1.411978642965461e-02, 1.411978642965459e-02, 9.468896948888625e-03, 1.968127973535207e-02, 1.851161950978820e-02, 3.801159192657508e-03, 2.122640467513066e-02, 2.122640467513064e-02, 7.410088309583268e-03, 1.291342981519664e-03, 4.784855059940018e-03, 2.196139758749163e-02, 4.405635581867780e-03, 4.405635581867780e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
