
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.267571260011519e-01, -1.267570579173034e-01, -1.267568073360262e-01, -1.267579087085504e-01, -1.267570898161566e-01, -1.267570898161566e-01, -9.914106390641196e-02, -9.913402165985391e-02, -9.892437287014874e-02, -9.900730923207077e-02, -9.913923059234761e-02, -6.068030283448755e-02, -8.954400742783611e-02, -2.482742437120555e-02, -2.062178648057686e-02, -2.253613828082817e-02, -2.492476561776788e-02, -2.492476561776788e-02, -1.190301976662934e-02, -1.281441906438383e-02, -1.322391083422082e-01, 2.351102245907855e-02, -1.216902874875743e-02, -1.216902874875743e-02, 1.603537636590386e-02, 1.665691873840859e-02, 4.210012232608228e-02, 8.508894801017042e-03, 1.650834714764694e-02, 1.650834714764696e-02, -8.618397592065934e-02, -8.626511553200233e-02, -8.619292924711490e-02, -9.375818415892631e-02, -8.622468788042376e-02, -8.622468788042376e-02, -9.156217865932489e-02, -9.025356947369319e-02, -9.218023185746990e-02, -9.109059634033891e-02, -8.992183162944101e-02, -4.971341795263429e-02, -3.877993667051714e-02, -4.431844978026239e-02, -3.610705579459750e-02, -3.976076444388549e-02, -4.073707842203703e-02, -5.126022644446217e-02, -1.516562802094911e-01, 1.264084957961491e-03, -1.482015972527554e-01, -5.933727708679382e-02, 2.545579441409028e-02, 2.545579441409028e-02, -3.468433626914765e-03, 9.284780498844939e-03, 7.142933088060810e-03, -1.149516195167367e-01, -3.616667838365934e-03, 8.538722652161001e-03, -5.065162997188927e-02, -4.880492187260108e-02, -4.967072505836512e-02, -4.995494667763940e-02, -4.969679831176334e-02, -4.969679831176334e-02, -4.940719567360460e-02, -3.625244852682007e-02, -3.945957336127175e-02, -4.286357211570790e-02, -4.105921205356933e-02, -4.810340067314667e-02, -4.372439225779941e-02, -7.245540701633449e-02, -1.860243764359290e-02, -4.969290428761250e-02, -2.387288700296372e-02, -2.387288700296372e-02, -5.070532712412705e-02, 4.119756998431006e-02, 4.527277647621503e-02, -2.848087255176529e-02, -1.391918711614782e-01, 3.851293735091795e-02, 1.839331068641339e-02, 2.789450278782612e-03, 5.106746889359367e-03, 3.750230749158322e-02, 7.366902094949645e-03, 7.366902094949656e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.268126917564619e-01, -1.268131501162751e-01, -1.268151960177310e-01, -1.268077311756668e-01, -1.268129329349895e-01, -1.268129329349895e-01, -5.637842427033819e-02, -5.639248033456215e-02, -5.681391711346286e-02, -5.665212815619115e-02, -5.638238513209357e-02, -5.376262480917429e-02, 8.507256374330717e-03, -5.529289925287518e-02, -6.394116593874700e-02, -5.991110951044999e-02, -5.508743440006459e-02, -5.508743440006459e-02, -3.902232059534898e-02, -3.743528145857979e-02, 4.232832547526491e-02, -4.718053891468663e-02, -3.856916453876412e-02, -3.856916453876412e-02, 2.757689535500681e-02, 2.852726670981406e-02, 5.079515450131017e-02, 1.535234806000957e-02, 2.828415906105625e-02, 2.828415906105632e-02, -1.007707322820326e-01, -1.009267347634745e-01, -1.007880197619713e-01, -9.953720231630131e-02, -1.008491358204339e-01, -1.008491358204339e-01, -3.643955092571795e-02, -3.918879218795752e-02, -3.518618271287120e-02, -3.743028586577732e-02, -3.987333498669238e-02, -4.730489178655931e-02, -3.825140501947202e-02, -5.113989187104131e-02, -3.377157029736069e-02, -4.103075147406417e-02, -4.244297830345006e-02, -4.992972572827536e-02, -1.107442947721462e-01, -5.893587758749224e-02, -9.989446211379416e-02, -6.041187382620219e-02, -3.877078224179852e-02, -3.877078224179852e-02, -4.886172265161763e-03, 1.667594970067441e-02, 1.295131838320878e-02, -1.838804933256540e-01, -5.129261651263391e-03, 1.539155990548602e-02, -5.947718303829252e-02, -5.948587185870041e-02, -5.612965489920112e-02, -5.972178494208076e-02, -5.973548343272244e-02, -5.973548343272244e-02, -5.909573335559263e-02, -3.524835911940817e-02, -4.256662649089781e-02, -5.075571681766491e-02, -4.652540468667655e-02, -5.089174177094516e-02, -4.827340968873055e-02, 1.757272928125744e-02, -3.710091467963382e-02, -2.363246363211255e-02, -2.956863938992677e-02, -2.956863938992685e-02, -3.433232644498641e-02, 5.308636074313026e-02, 4.520256702086432e-02, -2.709566478364003e-02, -1.245030292967789e-01, 1.556865711321081e-03, 3.152729015735284e-02, 5.229066151224240e-03, 9.394773495646243e-03, 1.821999766982798e-03, 1.336082743706299e-02, 1.336082743706300e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.993247603848339e-11, -7.993241464506469e-11, -7.993137171233336e-11, -7.993248397492927e-11, -7.993244893517572e-11, -7.993244893517572e-11, -2.671354440655818e-07, -2.672127442300658e-07, -2.694768546096892e-07, -2.685014130486374e-07, -2.671508484503995e-07, -7.242534259930904e-07, 6.852373146121306e-04, -4.425298925852353e-04, -2.770295776185262e-04, -3.590569552896508e-04, -4.465438626978146e-04, -4.465438626978146e-04, -8.188073007421356e-02, -9.858141406679972e-02, 9.392510320227422e-04, 3.406200439606152e-01, -8.669093890529961e-02, -8.669093890529961e-02, -8.652117331767894e+02, -7.738979400771191e+02, -1.091109202777554e+01, -2.699738698901160e+03, -8.102379645836044e+02, -8.102379645836061e+02, -9.353794401245640e-08, -9.272822015423911e-08, -9.344901532113671e-08, -8.299666744437266e-08, -9.313188025659976e-08, -9.313188025659976e-08, -2.734393141492501e-06, -2.938371338141984e-06, -2.628175526903049e-06, -2.809130027598034e-06, -2.990602906060700e-06, -9.057542559287421e-06, -4.008715475132978e-03, -2.546313796762908e-03, -4.623595368063851e-03, -4.305335221768676e-03, -3.453082111840867e-03, -1.541803984206238e-03, 4.457941000559532e+01, 7.740273137230599e-02, 4.799062969239582e+01, -1.552935903205118e-05, 6.074894825853664e-01, 6.074894825853664e-01, -5.757220589750703e+06, -2.446031697532183e+03, -9.082313068989015e+03, 1.401762231211284e+02, -4.864350022199258e+06, -3.329199218090973e+03, -1.013706996541375e-03, -8.336822872162643e-04, -4.128840274480864e-03, -5.976006962813635e-04, -5.873999052332749e-04, -5.873999052332749e-04, -6.908005102156539e-04, -7.615775778812732e-03, -6.488621045869596e-03, -4.583341935461012e-03, -5.673369249767373e-03, -2.961397003441084e-03, -2.196424661786572e-03, 2.137815305322471e-01, -3.141842271124019e-02, -9.393299846388134e-03, -3.499803866127705e-02, -3.499803866127696e-02, -4.200713397812291e-03, -1.413466505651790e+01, -4.197906531961985e+00, -4.300268100958710e-02, 1.051021811444910e+02, 3.915169353126547e-01, -3.807609662699421e+02, -4.181722200857643e+04, -1.493072131363512e+04, 4.624930525610260e-01, -5.629522529116534e+03, -5.629522529116553e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.510635136388376e-06, -4.510421099119403e-06, -4.509469914489023e-06, -4.512954892474876e-06, -4.510522486796351e-06, -4.510522486796351e-06, -3.862075757836188e-04, -3.861313582142084e-04, -3.838153709143872e-04, -3.846588841232222e-04, -3.861832391387017e-04, 6.827274367441094e-04, -1.018489544685123e-02, 5.881443148831871e-03, 5.381070994563824e-03, 5.633811210959446e-03, 5.895046846888190e-03, 5.895046846888190e-03, 3.920295167628983e-02, 4.012380775692836e-02, -8.267692983012971e-03, 2.461773642324444e-02, 3.945108643792513e-02, 3.945108643792513e-02, 1.503353058271623e-02, 1.550819503015445e-02, 2.332548780311769e-02, 5.020145621265050e-03, 1.573441191483677e-02, 1.573441191483676e-02, 4.479805580279404e-04, 4.471042883029354e-04, 4.478848801341875e-04, -2.286151715685174e-05, 4.475414627941931e-04, 4.475414627941931e-04, -1.228901002892825e-03, -1.178699013620471e-03, -1.250887284154884e-03, -1.210652221674850e-03, -1.166745805073182e-03, 1.621182098533264e-03, 1.767276145069836e-02, 1.719945038715059e-02, 1.713107826929713e-02, 1.890494138082481e-02, 1.765682602301819e-02, -3.616011085611230e-03, -4.146015154395355e-02, 2.461989210456153e-02, -4.934765193738865e-02, 2.561468799873283e-03, 2.892200491379027e-02, 2.892200491379027e-02, 3.568117686290167e-04, 6.105371115607537e-03, 9.550021921203985e-03, 2.767080863273563e-02, 4.080541414492363e-04, 6.282508714579860e-03, 1.763947958852190e-02, 1.537381048886617e-02, 1.186468139733080e-03, 1.559785865736414e-02, 1.533373524053853e-02, 1.533373524053853e-02, 1.641485943545102e-02, 2.166424816011155e-02, 2.259944015666395e-02, 2.157119104452882e-02, 2.240711007511787e-02, -2.670072276872432e-03, 1.578885097729049e-02, -5.930669873885456e-02, 2.572959912763667e-02, -2.018640632653769e-02, 2.798931853615353e-02, 2.798931853615350e-02, -1.085197409489371e-02, 2.171545984255599e-02, 2.370276155718110e-02, 3.515528886851842e-02, -3.282234051438439e-02, 3.015093305746150e-02, 1.060103033771170e-02, 2.129633922488580e-03, 5.222411513869636e-03, 3.217193509576609e-02, 6.515274937007992e-03, 6.515274937007996e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
