
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.084135166287064e-01, -1.084150584387542e-01, -1.084227996100362e-01, -1.084000238263323e-01, -1.084118278575610e-01, -1.084118278575610e-01, -6.326827563906545e-02, -6.326175158427505e-02, -6.307238975015927e-02, -6.296340645203680e-02, -6.305145861034034e-02, -6.305145861034034e-02, -6.844358503587467e-02, -6.850940809036898e-02, -6.806872538643982e-02, -6.262574124018094e-02, -6.438753200932879e-02, -6.438753200932879e-02, -1.340643995819679e-04, -2.489376519923758e-03, -1.631968036809295e-01, 7.524732564940462e-03, 4.414823111365096e-03, 4.414823111365096e-03, -2.554066057403153e-04, -3.522071192225065e-04, -2.874292800311581e-03, -9.559536788224884e-04, -7.589815232758939e-04, -7.589815232758734e-04, -9.661218326773191e-02, -9.690504309706482e-02, -9.663444889538908e-02, -9.689260614850548e-02, -9.675595067850096e-02, -9.675595067850096e-02, -4.166078642055648e-02, -4.143458433240998e-02, -4.043880452266602e-02, -4.020264610340551e-02, -4.204394595212979e-02, -4.204394595212979e-02, -3.270931163223167e-02, -4.272568874172022e-02, -3.296145221294489e-02, -4.342981150874442e-02, -3.387472938346170e-02, -3.387472938346170e-02, 6.852963468424622e-03, 1.102743272486739e-02, 5.080293683593667e-03, -6.571073248906611e-02, 1.232991301302910e-02, 1.232991301302905e-02, -2.315524090172175e-03, -1.855035590520424e-03, -8.343486006446745e-04, -9.122676696054349e-04, -1.559143593489585e-03, -1.559143593489467e-03, -5.525286975384974e-02, -5.602870372147761e-02, -5.685464819576180e-02, -5.687145222523884e-02, -5.696041242330827e-02, -5.696041242330827e-02, -4.503454352786357e-02, -2.901508150531418e-02, -3.388831505339596e-02, -4.161527962201383e-02, -3.712260835848369e-02, -3.712260835848369e-02, -4.338868784373873e-02, 2.919157164209207e-03, -1.226894439999948e-02, -2.728762861231049e-02, -2.218796514243004e-02, -2.218796514242960e-02, -2.769557337327888e-02, -9.558846383580198e-04, -2.641146555773022e-03, -2.541473433346153e-02, 5.462011240113071e-03, 5.462011240113057e-03, -4.013195046257469e-03, -1.518209440795831e-03, -3.440973506820806e-04, 6.487039051678564e-03, -1.125418534141309e-03, -1.125418534141475e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.508848848923390e-01, -1.508862870557965e-01, -1.508904200843975e-01, -1.508696017926712e-01, -1.508808099156320e-01, -1.508808099156320e-01, -6.767870842223833e-02, -6.769942377422877e-02, -6.821250695973236e-02, -6.768465213582586e-02, -6.787472199252487e-02, -6.787472199252487e-02, -2.769288140471038e-02, -2.842676047304749e-02, -5.878052107592735e-02, -5.419266804677991e-02, -5.399022557765432e-02, -5.399022557765432e-02, -1.114798633660872e-01, -1.102962242198654e-01, 7.198435148983551e-03, -5.481890708738846e-02, -8.771990739068081e-02, -8.771990739067825e-02, -1.250889576899620e-02, -1.303928407844239e-02, -3.401034105300178e-02, -8.226426937091132e-03, -9.818334951051987e-03, -9.818334951051980e-03, -1.216799571079515e-01, -1.217879097882204e-01, -1.216829846359248e-01, -1.217784064356232e-01, -1.217361478900498e-01, -1.217361478900498e-01, -9.839099742203272e-02, -9.830121395141567e-02, -1.084634487843326e-01, -1.084470717852581e-01, -9.376938114121369e-02, -9.376938114121369e-02, -5.426030493758627e-02, -5.547800666789277e-02, -4.315371983348060e-02, -4.888858794960943e-02, -5.885305887006820e-02, -5.885305887006820e-02, -1.115766120603992e-02, -9.462780270642146e-02, -1.084369952875744e-02, -6.247657730501788e-02, -2.912175233800024e-02, -2.912175233800057e-02, -7.047779204558726e-03, -8.324093173389946e-03, -6.442140950080452e-03, -2.184709317847260e-02, -7.709437495604644e-03, -7.709437495604274e-03, -5.319507174604560e-02, -6.208408284277678e-02, -5.889894632747716e-02, -5.614109350482030e-02, -5.750682081925576e-02, -5.750682081925582e-02, -4.986829718081093e-02, -5.110189463955728e-02, -5.165309336301638e-02, -6.440314662630375e-02, -5.773413344223965e-02, -5.773413344223965e-02, -5.533539717944774e-02, -1.260368626157620e-01, -1.131438586265138e-01, -3.053829671677821e-02, -6.842659238156479e-02, -6.842659238156568e-02, -3.713566622045317e-02, -3.467799658412401e-02, -3.186427320452732e-02, -2.947067242008017e-02, -1.281843055375924e-02, -1.281843055373849e-02, -1.717928729291632e-02, -2.913877736937730e-03, -4.857376863871705e-03, -1.710245297676946e-02, -7.127558097050359e-03, -7.127558097049673e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.777187174807983e-10, -2.777288599641433e-10, -2.777872419852257e-10, -2.776381130079640e-10, -2.777143199631651e-10, -2.777143199631651e-10, 1.273883539353334e-06, 1.273882582691886e-06, 1.271769562632501e-06, 1.253159799485243e-06, 1.263701694221464e-06, 1.263701694221464e-06, 3.856510419114898e-03, 3.868799879379716e-03, 4.322940674466339e-03, 3.786920432625402e-03, 3.934334322832743e-03, 3.934334322832743e-03, 1.392560452891314e+00, 1.332829941169243e+00, 3.145330646144965e-03, 1.684453941192538e+00, 1.734671540968822e+00, 1.734671540968738e+00, 4.814463904285258e+03, 4.388979788412382e+03, 5.522710180979466e+01, 1.365297541851173e+04, 9.813546609787207e+03, 9.813546609787414e+03, -4.518875142453138e-07, -4.565722339086454e-07, -4.522354790291689e-07, -4.563649170460206e-07, -4.541834049815270e-07, -4.541834049815270e-07, 1.201767406645918e-05, 1.118025257585591e-05, 1.366749859501826e-05, 1.293741380056486e-05, 1.078290320672717e-05, 1.078290320672717e-05, 1.680158628400103e-03, 1.984960794559196e-03, 5.979802626609216e-03, 1.251363900827497e-02, 1.592214148672522e-03, 1.592214148672522e-03, 2.977599175990792e+00, 8.796635332429296e-01, 3.706064724143040e+00, 3.679814234000509e-05, 2.961568797352738e+00, 2.961568797352738e+00, 1.983847610311072e+04, 1.347275483839161e+04, 6.819652899542935e+04, 1.386176270202139e+01, 2.830863144779010e+04, 2.830863144779458e+04, -7.014284317120975e-02, -2.917468366404994e-02, -3.860077654450873e-02, -4.982395530570306e-02, -4.372959249090859e-02, -4.372959249090854e-02, -4.716639194776059e-02, 5.876998863685733e-04, -5.191866081704286e-03, -8.746320946235201e-03, -6.801953001533717e-03, -6.801953001533717e-03, 3.270321616103921e-03, 4.630501800515117e-01, 2.263781568658787e-01, 2.817716177209337e-02, 9.566388878644812e-02, 9.566388878644971e-02, 4.086633630899362e-03, 6.375494237170206e+01, 2.521631975338007e+01, 2.151448898772333e-02, 7.655841833813134e+00, 7.655841833811690e+00, 1.542240521152741e+03, 2.453949809950756e+05, 8.709504738465846e+04, 1.037206272264490e+01, 3.995111216293529e+04, 3.995111216293170e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.536004315907246e-05, 8.536341471052681e-05, 8.538182585602152e-05, 8.533213101225134e-05, 8.535767187161102e-05, 8.535767187161102e-05, -6.055361683234044e-04, -6.053667627287415e-04, -6.004135421401750e-04, -5.980492286698677e-04, -6.002087993654073e-04, -6.002087993654073e-04, -1.499190101652205e-02, -1.497110880305122e-02, -1.396485443457349e-02, -1.326989140787481e-02, -1.355542937866379e-02, -1.355542937866379e-02, -6.989393385787182e-02, -6.875853277833958e-02, -1.455775432561684e-02, -3.759910701543734e-02, -4.964009063195854e-02, -4.964009063195835e-02, -1.663736150382906e-02, -1.756775268486531e-02, -3.593152703726688e-02, -8.160653057503740e-03, -1.218613696250597e-02, -1.218613696250593e-02, 1.861665610948914e-03, 1.878231647116274e-03, 1.862971925728579e-03, 1.877573670501735e-03, 1.869754001494140e-03, 1.869754001494140e-03, -9.816178290362151e-04, -8.868377856675232e-04, -1.072377135634992e-03, -9.953559193020497e-04, -8.851276328592825e-04, -8.851276328592825e-04, 2.267837388381529e-03, 1.217461536966622e-03, -9.888600024442994e-03, -1.325176533078773e-02, 4.455934721318508e-03, 4.455934721318508e-03, -3.763188757958831e-02, -4.813135917512408e-02, -3.769155610753343e-02, -1.691802186089898e-03, -5.026650065732120e-02, -5.026650065732124e-02, -3.948484604316202e-03, -6.521974709299982e-03, -1.674752832766143e-02, -4.123427335154108e-02, -1.104007131569660e-02, -1.104007131569658e-02, 1.681923808153657e-01, 1.155074813750169e-01, 1.338131048776145e-01, 1.509970048348925e-01, 1.422467720034312e-01, 1.422467720034312e-01, 5.057578870525954e-02, 7.442389371450718e-03, 2.547193166581520e-02, 4.688601376158249e-02, 3.490100494652754e-02, 3.490100494652753e-02, -3.554858646095138e-03, -4.824073764938379e-02, -3.932861627993733e-02, -2.038446572242908e-02, -2.923465659007728e-02, -2.923465659007709e-02, -4.744598571324379e-03, -3.791449858595662e-02, -3.721608745267758e-02, -1.277265097454692e-02, -4.945459382941714e-02, -4.945459382941710e-02, -1.157401281970203e-02, -1.132912987497213e-03, -9.049762387258726e-03, -5.653548005934944e-02, -1.310965492819871e-02, -1.310965492819870e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
