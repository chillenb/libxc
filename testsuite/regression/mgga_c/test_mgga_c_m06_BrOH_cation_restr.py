
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.312808691931806e-01, -1.312798965257819e-01, -1.312760111821898e-01, -1.312904045750063e-01, -1.312828011662936e-01, -1.312828011662936e-01, -1.294734241986591e-01, -1.294582505068849e-01, -1.290597182007301e-01, -1.292236219444070e-01, -1.292025411348560e-01, -4.657704399348805e-02, -1.125471740749018e-01, -1.021460446667932e-02, -4.353921535478644e-03, -7.123222795459183e-03, -6.501295078075398e-03, -6.501295078075398e-03, 4.902287052801269e-03, 3.516337298145822e-03, -1.598862744689868e-01, 1.991814362279609e-02, 1.618070260344168e-02, 1.618070260344134e-02, -1.527473563513203e-04, -1.568475280835663e-04, 1.347817614647221e-03, -1.023756618066719e-04, -1.221336828346471e-04, -1.221336828346471e-04, -9.688495991893142e-02, -9.717741154738591e-02, -9.690173036609917e-02, -9.025362447647640e-02, -9.703134567407246e-02, -9.703134567407246e-02, -1.216982941709585e-01, -1.195714005952963e-01, -1.234362934723784e-01, -1.214603172573484e-01, -1.196812047445721e-01, -3.603429576644790e-02, -3.389067062945228e-02, -4.640886332570393e-02, -2.811888376352867e-02, -3.362947758359847e-02, -3.570778803668950e-02, -5.946181703539505e-02, -1.072107732874979e-01, 1.685306379957685e-02, -1.032602045174234e-01, -5.357030986119882e-02, 1.845652247598578e-02, 1.845652247598564e-02, -3.689566091433213e-03, -1.006388036056530e-04, -7.666141660432487e-05, -7.758325930095093e-02, -4.288195731649545e-03, -9.171250225197748e-05, -7.043458987449025e-02, -6.187838257692135e-02, -4.324590682209612e-02, -6.716608813901870e-02, -6.590276387165062e-02, -6.590276387165062e-02, -6.846969169874922e-02, -2.890306425010003e-02, -3.485870025005977e-02, -4.423406160993537e-02, -3.886719837209029e-02, -5.213702230826357e-02, -4.333145435415775e-02, -9.272466544847871e-02, -3.563809684790531e-03, -6.670824433423897e-02, -1.314720970754446e-02, -1.314720970754391e-02, -6.578152719679645e-02, 1.161427272247866e-03, 2.967401762701671e-03, -2.255484675980890e-02, -9.472812021348247e-02, 1.122689225334053e-02, -1.956771215749839e-04, -2.972273408996687e-05, -5.941238334302608e-05, 1.023207244486975e-02, -8.523245202819736e-05, -8.523245202809483e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.336119929690031e-02, -8.336176887960006e-02, -8.336409768470848e-02, -8.335566309601039e-02, -8.336011106844027e-02, -8.336011106844027e-02, -4.366717625065811e-02, -4.367187784881174e-02, -4.379609090872841e-02, -4.374655123106383e-02, -4.375106815956811e-02, -1.304078305677761e-01, -2.661662394616734e-02, -1.771474781745443e-01, -1.912890088749306e-01, -1.851265056327780e-01, -1.866482131505716e-01, -1.866482131505716e-01, -1.165259285713057e-01, -1.172350735424753e-01, -3.822084595912911e-02, -5.180416464121484e-02, -8.526940740446998e-02, -8.526940740446592e-02, -1.248354585495997e-02, -1.299187946525200e-02, -3.563575548312693e-02, -7.992780298253767e-03, -9.650466074657251e-03, -9.650466074657251e-03, -1.215170324551584e-01, -1.216290663549092e-01, -1.215235354448242e-01, -6.908429906097331e-02, -1.215736035782454e-01, -1.215736035782454e-01, -3.629016596609699e-02, -3.690873539475861e-02, -3.581941662273866e-02, -3.636221130865802e-02, -3.687123064430770e-02, -1.373222552512841e-01, -5.614784773679016e-02, -6.481473972335716e-02, -6.547921865063833e-02, -5.528757111100391e-02, -5.613618441030466e-02, -3.507865894316727e-02, -1.158782579303885e-01, -9.518762136476222e-02, -1.201247317986477e-01, -8.035792412217235e-02, -3.344263077974488e-02, -3.344263077975013e-02, -4.854611403916599e-03, -7.843509727735216e-03, -6.232772362975984e-03, -1.147701667599682e-01, -5.689038398455721e-03, -7.309434469007054e-03, -5.877529648532315e-02, -6.616884153275132e-02, -4.215406175278117e-02, -6.212155846370848e-02, -6.327021755649759e-02, -6.327021755649737e-02, -5.962833064519218e-02, -5.699865131189019e-02, -5.364429654467795e-02, -6.170735462488053e-02, -5.671647513110689e-02, -3.573176629553870e-02, -6.235026701649748e-02, -2.556664968112224e-02, -1.317051288819291e-01, -2.414308919781272e-02, -1.058695230622132e-01, -1.058695230622121e-01, -2.814393911262233e-02, -3.532194277473384e-02, -3.608516676815623e-02, -5.775820733980042e-02, -1.129539746319404e-01, -2.267199129299137e-02, -1.633925611283550e-02, -2.463662180181770e-03, -4.775212771611537e-03, -2.317953686999429e-02, -6.841947634685165e-03, -6.841947634684502e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.065998854790261e-09, 2.065957279853858e-09, 2.065769458563499e-09, 2.066387128960345e-09, 2.066063931117383e-09, 2.066063931117383e-09, 1.174988327195408e-05, 1.175065925167900e-05, 1.176998617940790e-05, 1.175716579816772e-05, 1.176432960171695e-05, 7.313682207391141e-07, 1.498067242215301e-02, 3.482112316689324e-03, 3.864925430862710e-03, 3.772266242796921e-03, 3.793397512861470e-03, 3.793397512861470e-03, 1.448406826432076e+00, 1.400850862744844e+00, -1.131321225800812e-03, 1.873838568286351e+00, 1.812208873981914e+00, 1.812208873981958e+00, 4.815049876808710e+03, 4.390098262319908e+03, 5.783454436690067e+01, 1.365995290290456e+04, 9.819028311274231e+03, 9.819028311274231e+03, -4.557180090427395e-07, -4.603866389561184e-07, -4.559877577954476e-07, 1.565500401646599e-06, -4.580457748815101e-07, -4.580457748815101e-07, 1.638957058552670e-04, 1.613384903273779e-04, 1.654521922241812e-04, 1.633950972202187e-04, 1.616930125818886e-04, 1.537693424086944e-05, -1.485782088636653e-03, -5.606739815683953e-03, 2.758604220620280e-03, -1.953317829702567e-03, -2.350945851188425e-03, 4.921574996043662e-02, -9.117992222745711e+02, 9.128127287498595e-01, -1.382885408294069e+03, -1.275014878558265e-05, 3.428865742882456e+00, 3.428865742882615e+00, -3.792631353025955e+09, 1.348826920445708e+04, 6.825624785721712e+04, -9.836384805803398e+03, -2.024361857307023e+09, 2.835066251222186e+04, -7.781981902936494e-02, -3.139299518368201e-02, 1.555212059351044e-02, -5.301117864090260e-02, -4.634472702851023e-02, -4.634472702851023e-02, -7.508614564450757e-02, 1.368707791124065e-03, -5.797850530935433e-03, -1.277670465741117e-02, -9.007822450347173e-03, 8.561226140296897e-02, -3.294449733618726e-03, -2.559025208415246e-01, 2.510642445516720e-01, 4.925928476221828e-01, 1.287353320011838e-01, 1.287353320011845e-01, 1.619876517821760e-01, 6.503763989728346e+01, 2.763995894094264e+01, 3.290988763783558e-02, -2.782002746215153e+03, 9.572739902829129e+00, 1.552813860914461e+03, 2.454534796389316e+05, 8.710694454025292e+04, 1.180289083955900e+01, 3.999350895065103e+04, 3.999350895065223e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.276315528337377e-05, -3.276304414852979e-05, -3.276247762054926e-05, -3.276413616005521e-05, -3.276327736043259e-05, -3.276327736043259e-05, -7.295152428034050e-04, -7.295431811740363e-04, -7.302555921408944e-04, -7.298541396035468e-04, -7.300279806287746e-04, -1.776266323818386e-04, -9.531992537929626e-03, -1.084341658483121e-02, -1.112224874012173e-02, -1.111474488561440e-02, -1.112069071252961e-02, -1.112069071252961e-02, -7.934280029202433e-02, -7.975647386296590e-02, -5.720596646870797e-03, -6.135224741837339e-02, -7.068909244808655e-02, -7.068909244808655e-02, -1.677839954304078e-02, -1.784215801599734e-02, -4.124643631200543e-02, -9.157104866339062e-03, -1.306578981575476e-02, -1.306578981575476e-02, 1.879231076358873e-03, 1.895827225908139e-03, 1.880185513019085e-03, -4.083259363647741e-04, 1.887517319638047e-03, 1.887517319638047e-03, -1.875366544259570e-03, -1.867586597801430e-03, -1.879813806255174e-03, -1.873608279547347e-03, -1.868891817433503e-03, -1.049114894380206e-03, 1.546895442455872e-02, 4.587653177198870e-02, 7.872220297097420e-04, 1.723971512150906e-02, 2.015007455723835e-02, -1.475803116858323e-02, -5.860917168378992e-03, -5.695408549148936e-02, -1.161383073639756e-03, 3.331353614759025e-03, -6.748889782465338e-02, -6.748889782465332e-02, 1.781673688292394e-05, -8.447174312206093e-03, -1.911622896583594e-02, 1.354872936715260e-02, 1.081915290517219e-04, -1.388102955024052e-02, 3.196356545433018e-01, 1.536408707314002e-01, -1.611362567398208e-02, 2.328281408790427e-01, 2.089483084996772e-01, 2.089483084996772e-01, 2.922946092086333e-01, 7.970562184779475e-03, 2.978454300234392e-02, 6.284629790626894e-02, 4.385971234721184e-02, -1.834418525097347e-02, 3.222669914854316e-02, -4.364928095089556e-02, -4.725088637129694e-02, -3.108140847738088e-02, -3.639763917224345e-02, -3.639763917224351e-02, -2.146463072878269e-02, -4.053350303241129e-02, -4.489556886849590e-02, -3.494813223101131e-03, 2.922683203798609e-04, -6.565995444699008e-02, -1.522161484627418e-02, -2.934776894516114e-03, -9.634243396152658e-03, -6.701868619098730e-02, -1.551379955663169e-02, -1.551379955663170e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
