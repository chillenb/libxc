
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_hx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.254585754367043e-01, -1.254584503773797e-01, -1.254579535670566e-01, -1.254599946498305e-01, -1.254585092064159e-01, -1.254585092064159e-01, -1.123852841284831e-01, -1.123806094826862e-01, -1.122493428601514e-01, -1.123005921701165e-01, -1.123841222689359e-01, 4.350993978412208e-02, -1.664139432609839e-01, 4.176832411238188e-02, 3.456832247978708e-02, 3.780397222651864e-02, 4.192869905260643e-02, 4.192869905260643e-02, 7.919334979674394e-03, 9.071589986292268e-03, -2.445914214258021e-01, -5.820308804745582e-02, 8.253417985513401e-03, 8.253417985513401e-03, -4.034270271620389e-02, -4.185094029647120e-02, -1.076628475668783e-01, -2.198612588474565e-02, -4.149929619655450e-02, -4.149929619655597e-02, -2.014361559253123e-01, -1.966699930163167e-01, -2.009192333130001e-01, -1.222950394008210e-01, -1.990720002593103e-01, -1.990720002593103e-01, -1.094605331256000e-01, -1.054242829139644e-01, -1.115402373933583e-01, -1.079313475460364e-01, -1.045153466005859e-01, 5.344222391233133e-02, -1.915849405148941e-02, -9.303421102169780e-02, -5.277374788772303e-03, -3.112070520504605e-02, -3.521926867850993e-02, -5.812309505362900e-02, -9.688654371191893e-02, -7.312429576180758e-03, -1.073541110590923e-01, -4.663705523711053e-02, -6.481949158068519e-02, -6.481949158068519e-02, 5.730828040612530e-02, -2.389279405923972e-02, -1.863476127169727e-02, 1.136361268500928e-01, 5.929096722276737e-02, -2.206653925688749e-02, -4.943984992618990e-02, 2.984474679858987e-02, -2.071510067260442e-01, 6.281868079957174e-03, 1.852783878712749e-02, 1.852783878712749e-02, 2.339816889432580e-03, -1.560326420971342e-02, -4.627579089703212e-02, -9.499744519454803e-02, -7.298131269427205e-02, -4.815479277920383e-02, -6.713885646782103e-02, -1.368701172604154e-01, 2.027135629523589e-02, -5.871512814794144e-02, 2.237103926700825e-02, 2.237103926700823e-02, -5.829502252596805e-02, -1.043776909860227e-01, -1.179297590988621e-01, -4.254720380157383e-04, -5.536147588895744e-02, -1.041552570855352e-01, -4.585833027249870e-02, -7.574952323756580e-03, -1.352290733924865e-02, -1.014902534423995e-01, -1.917825608771066e-02, -1.917825608771018e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_hx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.219745311443730e-01, -1.219897504963647e-01, -1.220563074239414e-01, -1.218087901345558e-01, -1.219825483990492e-01, -1.219825483990492e-01, -8.773480924819423e-02, -8.786156878370346e-02, -9.159231396683135e-02, -9.016845850570111e-02, -8.777011282783287e-02, -2.346377316400922e-01, 9.761294754389944e-02, 7.099578755301705e-02, 8.247821381295346e-02, 7.924522163870767e-02, 7.044700898616245e-02, 7.044700898616245e-02, 1.081812370706476e-02, 1.052774519198754e-02, 1.719485468161833e-02, 9.681390908251668e-02, 1.077089308908773e-02, 1.077089308908773e-02, -5.072795030682659e-02, -5.252271623865452e-02, -1.091895983356198e-01, -2.824722537981747e-02, -5.209207644349476e-02, -5.209207644349902e-02, 8.095316611806362e-01, 8.523802160513915e-01, 8.142616813869538e-01, -4.440175962977148e-01, 8.310004124467643e-01, 8.310004124467643e-01, 7.479820810684053e-02, 4.218744856689916e-02, 8.915155541896633e-02, 6.322143772011576e-02, 3.385967605498314e-02, -1.968362518925121e-01, -1.457887889472872e-01, -2.579543237823324e-01, -1.301946144352535e-01, -2.051245711043570e-01, -2.290708161932683e-01, -1.581294809776449e-02, -4.717660415701067e-01, 4.692734636594696e-02, -4.578127172473511e-01, -4.217384673014610e-01, 8.252610524678380e-02, 8.252610524678380e-02, 7.296901427328123e-02, -3.063553285547112e-02, -2.399627894499394e-02, -1.991770692449489e-01, 7.536759980602410e-02, -2.833989470741446e-02, -4.958342562256088e-01, -5.930727028161972e-02, -3.072671540786723e-01, -3.884550463021325e-01, -3.232769359578858e-01, -3.232769359578858e-01, -3.841415224687675e-01, -1.242622370897272e-01, -2.559178858493722e-01, -1.234306480500462e-01, -2.771404044131922e-01, -2.908301117054992e-02, -3.259142928973401e-01, 5.574901875705681e-03, 1.497509620855792e-02, 2.724724743587405e-02, -5.388419479082084e-02, -5.388419479082091e-02, -6.277676363045386e-02, -1.109421750185193e-01, -1.035319829951307e-01, -1.247554235264499e-01, -4.307850752477446e-01, -8.450384957643838e-03, -5.754952401072335e-02, -9.889388712153887e-03, -1.752057903846554e-02, -8.927283967654466e-03, -2.469719453912921e-02, -2.469719453912479e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.482187172818900e-08, -1.482292138822008e-08, -1.482738638369626e-08, -1.481031935579094e-08, -1.482242552817398e-08, -1.482242552817398e-08, 2.040057353010128e-05, 2.039638853330926e-05, 2.026910085416506e-05, 2.031155149219598e-05, 2.039902335409365e-05, 6.901881521874165e-07, 3.135021011793208e-02, 1.449251627418223e-03, 1.319458375605141e-03, 1.409839924363335e-03, 1.452193709402202e-03, 1.452193709402202e-03, 6.464628985931050e-01, 6.493093228570961e-01, 1.712166177151337e-02, 2.531000417066164e-01, 6.468487630648904e-01, 6.468487630648904e-01, -6.879860034747020e-01, -7.267738929882431e-01, -6.920618254300561e-01, -4.735155283077989e-02, -7.652436048869452e-01, -7.652436048813261e-01, -3.545815824697727e-07, -3.303123343529854e-07, -3.519786350147244e-07, -2.718080670759735e-06, -3.426112602928351e-07, -3.426112602928351e-07, 2.564354293728365e-04, 2.378263564154488e-04, 2.649262785312671e-04, 2.494866980869787e-04, 2.336852361015955e-04, 1.072325153767731e-05, 5.228346365788054e-03, -7.899424939752851e-03, 6.326378323995373e-03, 4.323476188123115e-03, 2.993495217518465e-03, 9.469923708856860e-03, -5.834623641123958e+00, 2.591868507448810e-01, 5.490215771845297e+00, 1.086997790429653e-05, 3.717029951472283e-01, 3.717029951472283e-01, -8.826256616132914e+07, -7.845798602198889e-02, -3.819307736977302e-01, -1.425863152528659e+03, -7.502599077218981e+07, -9.238215743333138e-02, 2.683321888178461e-01, 2.118730548389213e-01, 3.695951239691651e-01, 3.124088288964988e-01, 3.000839549962533e-01, 3.000839549962533e-01, 3.557187426206379e-01, 1.038336895429075e-02, 1.850258462330468e-03, -2.175743845309858e-02, -9.265846055635891e-03, -2.162757872287012e-02, -1.457013091997467e-03, 2.371797239748105e+00, 1.215907122374034e-01, 2.401486496917612e-01, 8.386839597759274e-02, 8.386839597759278e-02, 6.716652940033228e-02, -6.210183822916091e-01, -5.369459016651705e-01, 6.470955646530523e-02, -8.761496054229876e+01, -1.910109865870453e-01, -2.139318069023408e-01, -1.024134456206328e-02, -8.564638386524864e-02, -2.424411563113959e-01, -1.181514075524265e-01, -1.181514076208864e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.573136705090548e-06, -6.564278964990216e-06, -6.525540630927248e-06, -6.669583109162946e-06, -6.568470647773398e-06, -6.568470647773398e-06, -2.581686440698684e-04, -2.572343371457873e-04, -2.296098218494137e-04, -2.401587798220697e-04, -2.579070456536949e-04, 1.411573743868035e-03, -2.655417339587766e-02, -1.269345904738386e-02, -1.248211453754746e-02, -1.287989876397961e-02, -1.267243049836818e-02, -1.267243049836818e-02, -9.720032410905902e-02, -9.975541795885561e-02, -1.262069246243228e-02, -1.127723794978262e-01, -9.794669900344188e-02, -9.794669900344188e-02, -5.395581962344170e-04, -6.132428871904994e-04, -1.453313242111205e-02, -2.256955008260391e-05, -6.228945882501026e-04, -6.228945882384027e-04, -1.359606934925299e-02, -1.433558293394148e-02, -1.367717381984181e-02, 4.524631103967208e-03, -1.396514273300699e-02, -1.396514273300699e-02, -3.740632030860464e-03, -3.109572195442426e-03, -4.011296115338192e-03, -3.517493114885840e-03, -2.947907558920250e-03, 3.065981719986686e-03, 2.789517157529911e-02, 1.492417376600074e-01, 1.976695048267711e-02, 6.601049054829729e-02, 7.432647842173301e-02, -2.350014872757223e-02, 2.136783619344600e-01, -7.298075740528061e-02, 2.143542308165934e-01, 1.589827103213359e-02, -1.301427939273012e-01, -1.301427939273012e-01, 6.755422409137689e-04, -3.776165309267164e-05, -6.512739944707527e-05, 2.064396217435504e-01, 7.732070227960814e-04, -3.563643866712771e-05, 6.333685704379414e-01, -8.432028764515119e-01, 2.074195959183137e-01, -2.506976256287800e-01, -4.614681212909421e-01, -4.614681212909421e-01, -2.541405340997103e-01, 2.408995619891096e-02, 1.358699926198277e-01, 1.010674669335988e-01, 1.945519564024910e-01, -2.072190588862589e-02, 1.339982332954590e-01, -9.579824104653899e-02, -5.619369481624736e-02, -5.759165035009564e-02, -1.080909052295641e-02, -1.080909052295645e-02, -1.486426278706340e-03, -1.059437844872396e-02, -2.366027193046902e-02, 4.976091747405684e-02, 2.855493484273012e-01, -8.864819179452738e-02, -3.259348556362969e-04, -9.800455368911525e-07, -1.246491439292449e-05, -9.411508950259859e-02, -3.139031339136194e-05, -3.139031338719403e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
