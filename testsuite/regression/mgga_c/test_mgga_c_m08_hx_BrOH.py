
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_hx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.318126298938725e-01, -3.318279158357784e-01, -3.318966525361119e-01, -3.316479541972490e-01, -3.318206649512749e-01, -3.318206649512749e-01, 9.492612988455326e-03, 9.466110689189474e-03, 8.689889550680950e-03, 9.258691360804285e-03, 9.483620692112973e-03, 9.483620692112973e-03, -1.712127188121618e-02, -1.695863411468745e-02, -1.187599960653283e-02, -6.158665565785539e-03, -1.705462932753844e-02, -1.705462932753844e-02, 3.222660720486949e-03, 3.582864063800128e-03, -8.680629629873494e-02, -6.315151032535593e-02, 3.263559921230794e-03, 3.263559921230794e-03, -4.034258106972751e-02, -4.185075174364038e-02, -1.075398718162926e-01, -2.198608521377118e-02, -4.149913376614069e-02, -4.149913376614216e-02, -2.012190619615450e-01, -1.964699961971382e-01, -2.007067240077751e-01, -1.970167745579516e-01, -1.988598274782103e-01, -1.988598274782103e-01, 5.415982911467459e-02, 5.010694603903556e-02, 5.680202330040303e-02, 5.370635954033246e-02, 4.781029208788785e-02, 4.781029208788785e-02, -3.101659059538883e-02, -6.597195474926069e-02, -2.471505985625403e-02, -4.743170250511314e-02, -4.121385930792258e-02, -4.121385930792258e-02, -1.052460999418099e-01, -9.597491972885227e-03, -9.995585118277489e-02, -6.948308619442917e-02, -6.610049496064031e-02, -6.610049496064031e-02, -2.131400664690251e-02, -2.389273811662474e-02, -1.863474014902673e-02, -1.214473950046127e-01, -2.206647352557304e-02, -2.206647352557330e-02, -1.143642273705443e-01, -1.878446549466838e-02, -3.913201009124307e-02, -6.787461966406265e-02, -5.222480954993559e-02, -5.222480954993559e-02, -1.509595950957522e-01, -1.704809606375872e-02, -4.666483321606723e-02, -8.874185842076383e-02, -7.056917372062375e-02, -7.056917372062375e-02, -5.856390731501598e-02, 6.773453947087806e-03, 1.403943258227913e-02, 5.653978212062301e-04, 1.327626200020786e-02, 1.327626200020786e-02, -7.264333256816751e-03, -1.043285034276892e-01, -1.176675481010320e-01, -1.447759741562385e-02, -1.039194279754641e-01, -1.039194279754660e-01, -4.585594881518833e-02, -7.574951996877889e-03, -1.352290585452054e-02, -1.012316498103769e-01, -1.917820933668419e-02, -1.917820933668372e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_hx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.235141643123094e+00, -1.235065673627855e+00, -1.234745495617622e+00, -1.235981106390798e+00, -1.235101513820500e+00, -1.235101513820500e+00, -2.415136026746541e-01, -2.415003632123101e-01, -2.410534274208526e-01, -2.412999854731102e-01, -2.415097838318260e-01, -2.415097838318260e-01, -1.452454125485625e-02, -1.473963257295047e-02, -1.582041204947574e-02, -7.420578361060811e-03, -1.459384551691135e-02, -1.459384551691135e-02, -3.431135924788216e-04, -1.563963486156431e-03, -8.591819776838547e-02, 6.583375347899546e-02, -8.401218111382511e-04, -8.401218111382511e-04, -5.072716986475676e-02, -5.252150857802714e-02, -1.085296394907819e-01, -2.824695987032122e-02, -5.209103601698777e-02, -5.209103601699215e-02, 8.063510394266020e-01, 8.490461276267176e-01, 8.111046229297663e-01, 8.442765895758897e-01, 8.276871304246566e-01, 8.276871304246566e-01, -1.803317844419749e-01, -1.951677078826785e-01, -1.723327110357479e-01, -1.858144026163500e-01, -1.985829632538293e-01, -1.985829632538293e-01, -1.251424991560966e-01, -1.187195188286875e-01, -1.277081786169586e-01, -9.848382102253819e-02, -1.775256959201712e-01, -1.775256959201712e-01, 1.375511964381310e-02, 3.905356689736568e-02, 2.130248707214672e-02, -1.868046007232813e-01, 7.301169053511063e-02, 7.301169053511063e-02, -2.739421762588999e-02, -3.063516815554068e-02, -2.399614098721962e-02, -9.478982157614976e-02, -2.833946582629546e-02, -2.833946582630782e-02, -2.663492452324832e-01, -1.562183280796701e-01, -2.806261971303649e-01, -3.252254807772217e-01, -3.108970081177811e-01, -3.108970081177811e-01, -2.336340901486680e-01, -1.233678549173472e-01, -2.403088213423498e-01, -1.147464828396477e-01, -2.513762145163370e-01, -2.513762145163370e-01, -1.275848659373807e-01, 1.668550724295595e-02, 4.645972822585268e-03, -1.050530335667887e-01, -5.420644038844385e-02, -5.420644038844390e-02, -1.366198646551279e-01, -1.106678385693502e-01, -1.022770153727548e-01, -1.174697545514300e-01, -9.418154886218810e-03, -9.418154886252576e-03, -5.753424534556611e-02, -9.889386558750471e-03, -1.752056930029522e-02, -9.947999484708595e-03, -2.469688904039322e-02, -2.469688904038879e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.500859558133994e-10, -3.501196802514579e-10, -3.502502744882356e-10, -3.497013002784706e-10, -3.501038696116501e-10, -3.501038696116501e-10, 1.895438162202961e-06, 1.895375925209479e-06, 1.892424060661602e-06, 1.880733248990993e-06, 1.895454839232076e-06, 1.895454839232076e-06, 6.191079803461675e-03, 6.158212801686705e-03, 5.116587383259027e-03, 4.929374417653455e-03, 6.179222933239205e-03, 6.179222933239205e-03, 7.986363221468198e-01, 8.203649128519689e-01, 4.151213960851160e-03, 6.565349633464571e-01, 8.066556404049002e-01, 8.066556404049002e-01, -7.308988625325239e-01, -7.845976458823518e-01, -1.049674883518021e+00, -1.416816504450709e-01, -8.177223323045568e-01, -8.177223323045564e-01, -3.567616351553315e-07, -3.323311154680758e-07, -3.541138075588223e-07, -3.351368631534218e-07, -3.447475026865475e-07, -3.447475026865475e-07, 1.336902080011567e-05, 1.272533880463687e-05, 1.322300948945567e-05, 1.271228511597284e-05, 1.311413124908318e-05, 1.311413124908318e-05, 7.985789628134718e-03, -1.388701035921945e-02, 1.176377002501380e-02, 9.080666150222041e-03, 4.240076484110408e-03, 4.240076484110408e-03, -2.863089334201685e-02, 3.117989709508783e-01, 3.154055403062071e-02, 3.967607121945178e-05, 5.649054540788395e-01, 5.649054540788395e-01, -1.458938874330773e-01, -1.815121749104204e-01, -5.489753821254347e-01, -1.178462805713073e+00, -2.805458744628923e-01, -2.805458744123399e-01, 2.929375090658476e-01, 2.284373409151077e-01, 3.029949528516711e-01, 3.393633696904076e-01, 3.254183920721921e-01, 3.254183920721921e-01, 4.215419027711224e-01, 1.096991070089149e-02, 1.999222738139189e-03, -2.413413575258025e-02, -1.018067587796938e-02, -1.018067587796938e-02, -2.919394538914214e-03, 1.932882333322032e-01, 1.525017818514007e-01, 7.608860171740066e-02, 1.125984512601337e-01, 1.125984512601337e-01, 2.010843957647322e-02, -7.896327305052401e-01, -8.939781118212462e-01, 1.039713851834796e-01, -3.102089956401244e-01, -3.102089956401278e-01, -6.077829524897524e-01, -4.589632529274289e-02, -1.113038876313720e-01, -4.083766754561367e-01, -3.798686406389301e-01, -3.798686407503628e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.954281422670022e-04, 5.953936540809374e-04, 5.952460555971152e-04, 5.958071463864024e-04, 5.954099394756205e-04, 5.954099394756205e-04, 1.047186971799777e-03, 1.047268659757125e-03, 1.049405559837305e-03, 1.051389700506490e-03, 1.047183430894396e-03, 1.047183430894396e-03, -1.660203837438609e-02, -1.652555000766233e-02, -1.434596671841768e-02, -1.503645950044426e-02, -1.657546526284016e-02, -1.657546526284016e-02, -9.948496132762831e-02, -1.027610671053751e-01, -9.323311683021683e-03, -1.085285937922252e-01, -1.004479284167541e-01, -1.004479284167541e-01, -5.395485946984271e-04, -6.132266546798909e-04, -1.445851077344134e-02, -2.256929257254989e-05, -6.228802652786786e-04, -6.228802652669787e-04, -1.354755439354615e-02, -1.428470308088438e-02, -1.362901683503395e-02, -1.420173141914333e-02, -1.391459573709236e-02, -1.391459573709236e-02, 2.466759775492127e-03, 2.817008387742714e-03, 2.325665327086824e-03, 2.634329547205912e-03, 2.851558224432950e-03, 2.851558224432950e-03, 1.636826564575578e-02, 5.236608503990475e-02, 1.361510490776503e-02, 1.172606554924928e-02, 4.872243424100511e-02, 4.872243424100511e-02, -8.255329606206262e-02, -7.383209421251885e-02, -9.141149731534087e-02, 4.075572043869856e-03, -1.279641601831887e-01, -1.279641601831887e-01, -3.109249102054382e-05, -3.776110922790238e-05, -6.512694586250879e-05, -2.728923704253752e-02, -3.563578519632766e-05, -3.563578517679843e-05, -9.848307853221476e-02, -5.406173620242101e-01, -3.876289589208085e-01, -2.355943259568112e-01, -3.124478483779551e-01, -3.124478483779551e-01, -2.338767049607859e-01, 2.296338338245631e-02, 1.248663908392692e-01, 9.169262004591067e-02, 1.736359973789698e-01, 1.736359973789698e-01, 3.554092967136390e-02, -5.982259896933752e-02, -5.933271302311822e-02, 1.323625451405925e-02, -2.095542865725706e-02, -2.095542865725709e-02, 2.701429825619274e-02, -1.057130627152043e-02, -2.343201710186710e-02, 3.420394518427525e-02, -8.683962785999667e-02, -8.683962786001601e-02, -3.258342746279294e-04, -9.800452742993104e-07, -1.246490592314398e-05, -9.197886833158153e-02, -3.138984169340520e-05, -3.138984168923730e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
