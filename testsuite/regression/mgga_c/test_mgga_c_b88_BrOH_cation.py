
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.139285310852736e-02, -5.139307073143376e-02, -5.139333685416844e-02, -5.139009364327816e-02, -5.139189304675780e-02, -5.139189304675780e-02, -5.698712000177474e-02, -5.698571093148932e-02, -5.693328983999991e-02, -5.680655421168784e-02, -5.688183259558199e-02, -5.688183259558199e-02, -4.762286475788666e-02, -4.746863221468854e-02, -4.315365099524683e-02, -4.160957870810227e-02, -4.186685269826805e-02, -4.186685269826805e-02, -9.831135304164820e-03, -1.030409104697269e-02, -7.778684841882351e-02, -8.972306270943734e-03, -6.407879270242963e-03, -6.407879270242958e-03, -2.479098053942225e-04, -3.876079659430712e-04, -3.116544197693323e-03, -2.286669960194561e-03, -1.243331017157471e-03, -1.243331017157491e-03, -5.010875680426372e-02, -5.015764223667134e-02, -5.010989353525764e-02, -5.015309238916624e-02, -5.013411200148519e-02, -5.013411200148519e-02, -3.434931221363189e-02, -3.427804382326752e-02, -3.344599112439722e-02, -3.336697665861542e-02, -3.474407681073280e-02, -3.474407681073280e-02, -3.412758550913159e-02, -4.024978082210710e-02, -3.576338849175149e-02, -4.283894399992023e-02, -3.453902802820634e-02, -3.453902802820634e-02, -6.073901052254550e-03, -8.635108528043485e-03, -5.924714338524987e-03, -6.024234171316967e-02, -6.040334512881490e-03, -6.040334512881485e-03, -9.234743718025025e-03, -5.272886704883370e-03, -1.710990509441840e-03, -4.727789364355437e-03, -3.582195128859953e-03, -3.582195128859932e-03, -3.604817330716656e-02, -3.477246713459228e-02, -3.521199978526044e-02, -3.558330810399878e-02, -3.539713511785395e-02, -3.539713511785395e-02, -3.666766444444549e-02, -2.510509855292333e-02, -2.818491564035396e-02, -3.151036892533343e-02, -2.986513956081090e-02, -2.986513956081090e-02, -4.211851457025278e-02, -1.077446657730246e-02, -1.464676163843240e-02, -2.476504081360823e-02, -1.882998435599682e-02, -1.882998435599681e-02, -2.638734075512028e-02, -1.974726924375286e-03, -3.896321974846967e-03, -2.557739975379595e-02, -4.716840060016519e-03, -4.716840060016525e-03, -6.404085842793291e-03, -1.627203816578264e-02, -9.003027888198029e-04, -3.742511350688883e-03, -2.622312319223274e-03, -2.622312319223281e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.176203679893337e-02, -8.176209212309214e-02, -8.176147532732352e-02, -8.176193725516853e-02, -8.176139575815765e-02, -8.175995932689023e-02, -8.176440957614411e-02, -8.176757691792690e-02, -8.175919544641730e-02, -8.176706044222315e-02, -8.175919544641730e-02, -8.176706044222315e-02, -8.209818485670274e-02, -8.206423738203412e-02, -8.209434975848942e-02, -8.205900883919671e-02, -8.199074752444241e-02, -8.194352630894369e-02, -8.212469535344130e-02, -8.208042833266042e-02, -8.215709794694198e-02, -8.194196403006040e-02, -8.215709794694198e-02, -8.194196403006040e-02, -7.368519957877057e-02, -7.159604700618534e-02, -7.404642990936772e-02, -7.155008067422321e-02, -7.437784872623796e-02, -7.658630166364179e-02, -7.457891500442579e-02, -7.354112105979232e-02, -6.123243295728835e-02, -8.372141496057921e-02, -6.123243295728835e-02, -8.372141496057921e-02, -3.360157848157228e-02, -3.009205673859967e-02, -3.457467232328979e-02, -3.050518801056331e-02, -9.849458345690701e-02, -7.997340943697782e-02, -3.017659879800508e-02, -2.739801594397501e-02, -1.841248295464883e-02, -5.384074982970761e-02, -1.841248295464881e-02, -5.384074982970759e-02, -1.952294723486830e-02, -1.942971551570712e-02, -1.955409014505737e-02, -1.938439742632557e-02, -2.234396111194045e-02, -2.135064262422325e-02, -2.160498429503609e-02, -2.118618255443777e-02, -1.981166009913482e-02, -1.986430164467926e-02, -1.981166009913481e-02, -1.986430164467925e-02, -7.421501005590642e-02, -7.426257250836488e-02, -7.412723067254372e-02, -7.418134750403996e-02, -7.420952567673182e-02, -7.426128622754562e-02, -7.413689508945945e-02, -7.418471032740596e-02, -7.416911384068282e-02, -7.422235038426721e-02, -7.416911384068282e-02, -7.422235038426721e-02, -7.994868427209860e-02, -7.988905193616201e-02, -7.967336693877415e-02, -7.968041476298156e-02, -7.990602352472830e-02, -7.926249529356280e-02, -7.969957012372675e-02, -7.903720695723758e-02, -7.919857996032095e-02, -8.062491581145492e-02, -7.919857996032095e-02, -8.062491581145492e-02, -5.414968276985771e-02, -5.438872899347435e-02, -4.555355242078148e-02, -4.532463823808090e-02, -5.842031143545413e-02, -5.164341471867451e-02, -4.572910096405354e-02, -4.295546466904280e-02, -5.004200389491915e-02, -5.728583126395276e-02, -5.004200389491918e-02, -5.728583126395276e-02, -2.383185862702153e-02, -2.381163404070813e-02, -3.093944029434836e-02, -3.076716352966936e-02, -2.425534041287664e-02, -2.257051122343755e-02, -5.565121999864329e-02, -5.569367927365652e-02, -2.524690051222626e-02, -2.241446424312507e-02, -2.524690051222626e-02, -2.241446424312506e-02, -2.885337937177575e-02, -2.878778978535361e-02, -2.397014777065902e-02, -2.508004486489491e-02, -1.413264404626844e-02, -1.400980374229136e-02, -2.201649003301094e-02, -2.069755219583017e-02, -2.882226788486419e-02, -1.500077577692453e-02, -2.882226788486408e-02, -1.500077577692456e-02, -4.263918377474779e-02, -4.219109500343588e-02, -4.554405569250711e-02, -4.500763080338831e-02, -4.458610386796114e-02, -4.406700914671045e-02, -4.372999867483039e-02, -4.325935850805623e-02, -4.416296467240099e-02, -4.366850562656595e-02, -4.416296467240099e-02, -4.366850562656595e-02, -4.087050934919851e-02, -4.057361198760175e-02, -5.419391393250649e-02, -5.345023621170913e-02, -5.290605224570295e-02, -5.207790951920867e-02, -4.951318712141969e-02, -4.899627306232769e-02, -5.140777116550506e-02, -5.084329983974288e-02, -5.140777116550507e-02, -5.084329983974288e-02, -4.651279084433198e-02, -4.606501693055395e-02, -3.590990911972759e-02, -3.552564231822013e-02, -4.239156913735202e-02, -4.135841198408146e-02, -5.014323087731543e-02, -4.945910665355960e-02, -4.640105390264899e-02, -4.635274830745691e-02, -4.640105390264897e-02, -4.635274830745687e-02, -5.433011367529673e-02, -5.292246233685257e-02, -2.126743716639590e-02, -2.139226486513980e-02, -2.234209821483721e-02, -2.167261251257067e-02, -4.812454724567305e-02, -4.508762947789245e-02, -2.174181617283152e-02, -1.993715836123498e-02, -2.174181617283154e-02, -1.993715836123498e-02, -2.732115023521439e-02, -2.764367512522018e-02, -2.926051947232856e-02, -3.629296546990724e-02, -1.488747762928825e-02, -1.492534020004777e-02, -2.039014412935617e-02, -1.916996540933088e-02, -2.165982297274758e-02, -1.476278107977551e-02, -2.165982297274756e-02, -1.476278107977554e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.331108584255702e-10, 0.000000000000000e+00, 2.331047010849249e-10, 2.331093142803769e-10, 0.000000000000000e+00, 2.331040099103400e-10, 2.331011942113290e-10, 0.000000000000000e+00, 2.330908119244144e-10, 2.331130354880188e-10, 0.000000000000000e+00, 2.331123174476923e-10, 2.331064937798587e-10, 0.000000000000000e+00, 2.331030060972106e-10, 2.331064937798587e-10, 0.000000000000000e+00, 2.331030060972106e-10, 2.012825963696025e-06, 0.000000000000000e+00, 2.014613234821098e-06, 2.012774355132028e-06, 0.000000000000000e+00, 2.014753507943405e-06, 2.013789036867737e-06, 0.000000000000000e+00, 2.014154955424911e-06, 2.004777793524410e-06, 0.000000000000000e+00, 2.006163486910789e-06, 2.015005778288453e-06, 0.000000000000000e+00, 2.006124452876258e-06, 2.015005778288453e-06, 0.000000000000000e+00, 2.006124452876258e-06, 5.089336711367323e-03, 0.000000000000000e+00, 5.115731797313176e-03, 5.073234942031889e-03, 0.000000000000000e+00, 5.111995818115262e-03, 4.798542345433863e-03, 0.000000000000000e+00, 4.685030642291111e-03, 4.454789357508842e-03, 0.000000000000000e+00, 4.459944643739538e-03, 4.981582317122091e-03, 0.000000000000000e+00, 3.920940115621194e-03, 4.981582317122091e-03, 0.000000000000000e+00, 3.920940115621194e-03, 6.407716346940497e-01, 0.000000000000000e+00, 5.454468654634618e-01, 6.468495606263022e-01, 0.000000000000000e+00, 5.374416581269865e-01, 4.042705762308825e-03, 0.000000000000000e+00, 3.501464009299436e-03, 1.264097896858472e+00, 0.000000000000000e+00, 1.113392830309916e+00, 4.451832141014294e-01, 0.000000000000000e+00, 4.350034442537982e+00, 4.451832141014292e-01, 0.000000000000000e+00, 4.350034442537981e+00, 1.669723706831949e+04, 0.000000000000000e+00, 1.385941897626913e+04, 1.484009256209616e+04, 0.000000000000000e+00, 1.202238967902706e+04, 6.774307239662360e+01, 0.000000000000000e+00, 5.627759600642689e+01, 7.629290406962665e+04, 0.000000000000000e+00, 7.844371782292644e+04, 2.364429986885032e+04, 0.000000000000000e+00, 1.809944498734625e+05, 2.364429986885032e+04, 0.000000000000000e+00, 1.809944498734626e+05, 2.761505415637573e-07, 0.000000000000000e+00, 2.765747818496138e-07, 2.764404892211830e-07, 0.000000000000000e+00, 2.768617236308262e-07, 2.761564169953595e-07, 0.000000000000000e+00, 2.765806348575235e-07, 2.764099188466502e-07, 0.000000000000000e+00, 2.768368597205357e-07, 2.763046600432225e-07, 0.000000000000000e+00, 2.767208931724635e-07, 2.763046600432225e-07, 0.000000000000000e+00, 2.767208931724635e-07, 1.730838108706395e-05, 0.000000000000000e+00, 1.728549330874580e-05, 1.684540683805282e-05, 0.000000000000000e+00, 1.684791531639664e-05, 1.699631380045976e-05, 0.000000000000000e+00, 1.701228864521347e-05, 1.660748714598984e-05, 0.000000000000000e+00, 1.660738258896230e-05, 1.719626881354629e-05, 0.000000000000000e+00, 1.717225353505454e-05, 1.719626881354629e-05, 0.000000000000000e+00, 1.717225353505454e-05, 9.204954191993022e-03, 0.000000000000000e+00, 9.326847327311741e-03, 8.380198385877693e-03, 0.000000000000000e+00, 8.342257699107123e-03, 1.537827049923564e-02, 0.000000000000000e+00, 1.215693329997053e-02, 1.767742970419030e-02, 0.000000000000000e+00, 1.386104572735689e-02, 7.544803349483156e-03, 0.000000000000000e+00, 1.056538783465895e-02, 7.544803349483158e-03, 0.000000000000000e+00, 1.056538783465895e-02, 3.002900667397993e+00, 0.000000000000000e+00, 2.961769750854616e+00, 4.017897374919904e-01, 0.000000000000000e+00, 3.953206248750857e-01, 4.280573329368424e+00, 0.000000000000000e+00, 3.530216581435928e+00, 5.023173180232275e-05, 0.000000000000000e+00, 5.038115071495536e-05, 2.166069628509506e+00, 0.000000000000000e+00, 1.970186398314554e+00, 2.166069628509506e+00, 0.000000000000000e+00, 1.970186398314554e+00, 2.404179037324821e+05, 0.000000000000000e+00, 2.016955955658398e+05, 9.766216277997447e+04, 0.000000000000000e+00, 9.273971362471973e+04, 3.508665427296209e+05, 0.000000000000000e+00, 3.082294546148953e+05, 1.485879631054054e+01, 0.000000000000000e+00, 1.377497727570646e+01, 3.746933462475147e+05, 0.000000000000000e+00, 1.005054018636670e+05, 3.746933462475131e+05, 0.000000000000000e+00, 1.005054018636671e+05, 1.190822817700131e-02, 0.000000000000000e+00, 1.161824972730332e-02, 1.140443380995370e-02, 0.000000000000000e+00, 1.113414315791430e-02, 1.157618199666964e-02, 0.000000000000000e+00, 1.129978503300745e-02, 1.172374918229155e-02, 0.000000000000000e+00, 1.144054857644332e-02, 1.164968692362096e-02, 0.000000000000000e+00, 1.136980907201873e-02, 1.164968692362096e-02, 0.000000000000000e+00, 1.136980907201873e-02, 1.397916937418368e-02, 0.000000000000000e+00, 1.366939546808420e-02, 1.470018652090614e-02, 0.000000000000000e+00, 1.439411209977502e-02, 1.453101894013621e-02, 0.000000000000000e+00, 1.421449558438811e-02, 1.440089594180343e-02, 0.000000000000000e+00, 1.410470946980666e-02, 1.452455370412341e-02, 0.000000000000000e+00, 1.420503508530920e-02, 1.452455370412341e-02, 0.000000000000000e+00, 1.420503508530920e-02, 6.879265402622332e-03, 0.000000000000000e+00, 6.778227081162727e-03, 1.941938428688499e-01, 0.000000000000000e+00, 1.903480983525407e-01, 1.272138082405423e-01, 0.000000000000000e+00, 1.232878233538507e-01, 7.475853353469382e-02, 0.000000000000000e+00, 7.293677292414114e-02, 9.623981783002959e-02, 0.000000000000000e+00, 9.700022134555625e-02, 9.623981783002965e-02, 0.000000000000000e+00, 9.700022134555626e-02, 2.274364741129696e-02, 0.000000000000000e+00, 2.190119514175247e-02, 6.752750630844017e+01, 0.000000000000000e+00, 6.644724788474348e+01, 2.750748469916863e+01, 0.000000000000000e+00, 2.477691072721656e+01, 1.083900705125771e-01, 0.000000000000000e+00, 9.591987350598148e-02, 7.496339387324815e+00, 0.000000000000000e+00, 6.660169396390096e+00, 7.496339387324824e+00, 0.000000000000000e+00, 6.660169396390099e+00, 6.260985916474214e+03, 0.000000000000000e+00, 5.717782200900971e+03, 8.847679390212215e+06, 0.000000000000000e+00, 1.338355442566959e+07, 6.090907929827783e+05, 0.000000000000000e+00, 5.232861637939847e+05, 8.668293266650245e+00, 0.000000000000000e+00, 7.888503108389655e+00, 4.994425685210365e+05, 0.000000000000000e+00, 1.307719536595976e+05, 4.994425685210376e+05, 0.000000000000000e+00, 1.307719536595983e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-9.380408712804664e-06, -9.380439571475836e-06, -9.380434801407916e-06, -9.380458473654086e-06, -9.380391047447163e-06, -9.380431394920859e-06, -9.380099663785534e-06, -9.380058966788031e-06, -9.380430696600548e-06, -9.380114269722468e-06, -9.380430696600548e-06, -9.380114269722468e-06, -2.984464410466619e-04, -2.985846133829228e-04, -2.984609735190902e-04, -2.986085585853701e-04, -2.989087068701699e-04, -2.990228604754038e-04, -2.980406468061744e-04, -2.981758729057814e-04, -2.984907791633817e-04, -2.985586323294433e-04, -2.984907791633817e-04, -2.985586323294433e-04, -4.888237973385178e-03, -4.975138054501432e-03, -4.860422387236210e-03, -4.966666057872954e-03, -4.506293497086758e-03, -4.370886836488098e-03, -4.386001440132347e-03, -4.431224390238460e-03, -5.091696207309541e-03, -3.709366843575085e-03, -5.091696207309541e-03, -3.709366843575085e-03, -1.795513950133553e-02, -1.824383659537303e-02, -1.839139041554571e-02, -1.869671696916740e-02, -3.901322241708165e-03, -4.044767501837544e-03, -1.607918611273244e-02, -1.596085665825105e-02, -1.718164598462971e-02, -1.654881841028535e-02, -1.718164598462971e-02, -1.654881841028535e-02, -2.617542327277847e-02, -2.618367505167435e-02, -2.664045529488187e-02, -2.668042000541768e-02, -1.958502684016598e-02, -1.939754897692856e-02, -2.423733597331598e-02, -2.397738129001229e-02, -2.596212501877628e-02, -3.222788429086027e-02, -2.596212501877626e-02, -3.222788429086030e-02, -1.625693275820595e-04, -1.626339228097783e-04, -1.627819610944114e-04, -1.628395410141057e-04, -1.625796254410931e-04, -1.626399041030147e-04, -1.627620957880127e-04, -1.628267134035924e-04, -1.626794293496976e-04, -1.627374067608401e-04, -1.626794293496976e-04, -1.627374067608401e-04, -5.946346211328056e-04, -5.946696909284433e-04, -5.942820139907396e-04, -5.944000468090363e-04, -5.807923147312322e-04, -5.849656598326137e-04, -5.806979243293365e-04, -5.846560862201451e-04, -6.044463746618836e-04, -5.959994555144536e-04, -6.044463746618836e-04, -5.959994555144536e-04, -7.872193725971074e-03, -7.913580914078408e-03, -8.645335004256629e-03, -8.662812994531753e-03, -8.767794457899781e-03, -8.498417844419891e-03, -1.054821942470320e-02, -9.957946456013077e-03, -7.652184219253459e-03, -8.235246660430221e-03, -7.652184219253459e-03, -8.235246660430219e-03, -1.514659704557419e-02, -1.524228333722415e-02, -1.301854679969456e-02, -1.300698804972843e-02, -1.576827399699140e-02, -1.561008632336974e-02, -1.230658218687050e-03, -1.231869149529126e-03, -1.596302084057796e-02, -1.759308518237441e-02, -1.596302084057796e-02, -1.759308518237441e-02, -2.571707647946338e-02, -2.475443900574505e-02, -2.553999092968959e-02, -2.497936667570960e-02, -4.146338131297825e-02, -4.311807853104642e-02, -1.844398503360110e-02, -1.822990395654192e-02, -3.369595929154795e-02, -3.491158757569245e-02, -3.369595929154786e-02, -3.491158757569247e-02, -1.053208868765063e-02, -1.047544407242926e-02, -1.002039296533152e-02, -9.973514734920648e-03, -1.019474374361184e-02, -1.014572346833320e-02, -1.034488240093464e-02, -1.029079183092784e-02, -1.026940309357053e-02, -1.021779639736615e-02, -1.026940309357053e-02, -1.021779639736615e-02, -1.122071491710621e-02, -1.116132146463919e-02, -8.395795449985550e-03, -8.385553044273414e-03, -9.166564990344867e-03, -9.155744044419113e-03, -1.001490894549175e-02, -9.975901386231202e-03, -9.600838129111517e-03, -9.563471610180852e-03, -9.600838129111517e-03, -9.563471610180852e-03, -7.913561738448247e-03, -7.925740251553041e-03, -1.207931125149964e-02, -1.208895689509814e-02, -1.228537989979058e-02, -1.237730897219508e-02, -1.370342039947473e-02, -1.365748491247181e-02, -1.313847063428027e-02, -1.321050738673526e-02, -1.313847063428028e-02, -1.321050738673526e-02, -9.491379423277293e-03, -9.492265230922621e-03, -1.920741448935134e-02, -1.918686354755685e-02, -1.798867498745986e-02, -1.797023000585094e-02, -1.679464640708889e-02, -1.667712006562515e-02, -1.799428254188193e-02, -1.893769812329053e-02, -1.799428254188196e-02, -1.893769812329053e-02, -2.476724690351201e-02, -2.491222790040179e-02, -2.891228386180239e-02, -3.486927661020573e-02, -2.939260962644063e-02, -3.034427330076318e-02, -1.867914412520388e-02, -1.853699942942921e-02, -4.158461928759206e-02, -3.495991566481240e-02, -4.158461928759204e-02, -3.495991566481246e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
