
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.375213104620179e-02, -7.375173311383156e-02, -7.375012711128381e-02, -6.182475872378237e-02, -6.182383017480199e-02, -5.022688419262744e-02, -6.208843262751043e-02, -3.525901811211390e-02, -3.533812014685369e-02, -3.530646042374519e-02, -3.530952683148691e-02, -6.215343332208671e-02, -9.301043279444035e-02, -5.581706104994627e-02, -1.819511366104976e-02, -5.680493143415308e-02, -9.825819492107329e-02, -1.845556980283660e-02, -3.705564669366246e-02, -3.630518323487755e-02, -7.369212893894175e-02, -5.352750206099008e-03, -3.807166464915321e-03, -3.483407739594765e-02, -8.731845311785912e-05, -1.141339735831687e+00, -2.636183945653780e-01, -3.617298551024593e-05, -3.597579869473917e-05, -3.597579869473916e-05, -5.002579333021321e-02, -5.007556120309224e-02, -5.002865288685510e-02, -5.007255780047332e-02, -5.774337276221335e-02, -5.774179367375678e-02, -3.058449096780002e-02, -3.105928046230230e-02, -3.021217517703222e-02, -3.064016532747781e-02, -5.988213518846952e-02, -3.102962294195789e-02, -3.897050690535170e-02, -3.173198092333469e-02, -2.425367139515828e-02, -2.699864122414296e-02, -3.908247420116606e-02, -2.805938196997118e-02, -3.206821015292916e-03, -4.998159683491828e-02, -2.906739523051187e-03, -3.899198108872495e-02, -4.263821640022674e-03, -4.263821640022676e-03, -3.995825731411491e+00, -3.427137076143822e-05, -3.092824473181213e-05, -1.445669418676084e-01, -2.964692077086297e-05, -2.964692077086120e-05, -3.488152959903787e-02, -3.370538708026812e-02, -3.856064122413099e-02, -3.630580475605163e-02, -3.834917475855121e-02, -3.632666825704912e-02, -3.434590187457317e-02, -3.744695052865149e-02, -3.647795478418891e-02, -2.985272997854784e-02, -2.835374025027982e-02, -3.619415638707454e-02, -3.931901506816331e-02, -9.888273252146822e-03, -3.936428496353928e-02, -3.545319035337369e-02, -1.533013782226919e-02, -3.616591104631429e-02, -2.203278296357791e-02, -5.716484493881394e-01, -1.332255024624309e-03, -1.932160626904830e-02, -2.577602913311578e-03, -2.577602913311577e-03, -2.648649913811731e+00, -4.252761486278246e-06, -5.680322846778397e+00, -1.998192884149069e-01, -2.940647760551029e-05, -1.986835172071723e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.262289615167959e-02, -5.262515527415243e-02, -5.262315169789687e-02, -5.262543513731026e-02, -5.262431311590415e-02, -5.262644102268660e-02, -4.536673742658362e-02, -9.092520771251458e-02, -4.537010159567846e-02, -9.092197717981808e-02, -8.251228596406016e-02, -8.251273284232064e-02, -1.011940207719568e-01, -2.019703381617584e-02, -8.343105759633838e-02, -8.344230486797204e-02, -8.345031017187224e-02, -8.342166347883843e-02, -8.343853231974567e-02, -8.343560133067320e-02, -8.358965555164090e-02, -8.328231773632955e-02, -2.029116924083864e-02, -1.010372555745514e-01, -1.150098435442093e-02, -1.196670036824955e-02, 3.355847662639014e-03, -7.535332694011516e-02, -5.646869631704347e-02, -5.744806497748956e-02, -7.541518290681706e-02, 5.938925637761481e-03, -9.380766176106847e-03, -6.731484713014070e-03, -5.250923304484034e-02, -6.254351037883890e-02, 7.626988725488985e-03, -3.857009985392480e-02, 6.408245594812240e-03, -3.872232641031544e-02, -8.033786617726288e-02, 2.818812399279993e-02, -2.514110625822090e-02, -2.421361927491295e-02, -1.649443493016771e-02, -4.448443602062722e-02, -2.297568707688977e-02, 5.095964775921664e-02, -1.934564675816587e-02, -1.935510076477914e-02, 8.839325431260809e-01, -1.993265645221124e-02, 2.144932947198733e-01, -2.377978687082448e-02, -1.943016924008012e-02, -1.934836748041715e-02, -1.924821490885333e-02, -1.641727355317429e-02, -1.924821490885333e-02, -1.641727355317429e-02, -7.429204853407778e-02, -7.433167692652071e-02, -7.420391216113974e-02, -7.425010417332233e-02, -7.428461083134719e-02, -7.432934951007335e-02, -7.421174947465312e-02, -7.425249568089086e-02, -4.824689882280808e-02, -7.978732073864035e-02, -7.974213899372806e-02, -4.827437935756306e-02, -7.766479207347442e-02, -7.759601248980992e-02, -7.782250247313818e-02, -7.781575981999667e-02, -7.775482036251116e-02, -7.717981248860700e-02, -7.795830393605327e-02, -7.735519430825769e-02, -9.520435878815779e-02, -1.485731200222038e-02, -7.720567687318147e-02, -7.840883861773910e-02, -6.393885362105307e-02, -2.594572729434512e-02, -5.411253968473149e-02, -5.344849663799376e-02, -6.006214569080803e-02, -5.247981454240091e-02, -5.888591105226205e-02, -5.233988243998867e-02, -5.889332473119650e-02, -2.923872821037096e-02, -5.178614635936661e-02, -6.089183095107254e-02, -2.170350515196705e-02, -2.149628453611385e-02, 2.202886218268094e-02, -3.958110078202234e-02, -2.186687149725433e-02, -2.053328767968237e-02, -7.444478506060814e-02, -7.450531802332287e-02, -2.333090034554832e-02, -2.081772005795207e-02, -2.333090034554833e-02, -2.081772005795207e-02, 2.890087802727896e+00, -2.036845870149246e-02, -1.951532517840531e-02, -2.003385515520164e-02, -1.272739041362079e-02, -1.257822116679517e-02, -2.515171290125550e-02, 1.074616131118375e-01, -1.764763781345015e-02, -1.468206418470194e-02, -1.764763781345012e-02, -1.468206418470195e-02, -4.427939890350652e-02, -4.375980114952807e-02, -4.682287362201622e-02, -4.623352617043099e-02, -3.960277480130505e-02, -3.927875070312400e-02, -3.868781040592426e-02, -4.594465782864048e-02, -3.973852692290272e-02, -3.941251016370725e-02, -3.843233072477979e-02, -4.643400975184152e-02, -4.422149492981707e-02, -4.374011829898369e-02, -6.233755402564625e-02, -2.152203603405788e-02, -5.945110476442741e-02, -2.670682204546887e-02, -5.068203164124008e-02, -5.015219987586463e-02, -5.214999884948487e-02, -5.152642303709705e-02, -5.735935621933667e-02, -2.916597412171331e-02, -6.212633422614941e-02, -3.193496537731073e-02, -3.481314405163197e-02, -3.441607824477812e-02, 1.942857869730361e-03, -5.015964986026425e-02, -1.202498735418907e-02, -5.622298710996085e-02, -4.355388530499889e-02, -4.352779973807402e-02, -5.386382494914970e-02, -6.208999479626891e-03, -5.326659795032071e-02, -5.183560510457318e-02, 2.095218070068558e-01, 2.102484218797330e-01, -2.106040610657779e-02, -2.046074508329459e-02, -4.778844644876401e-02, -4.405457476823022e-02, -2.021826550555511e-02, -1.847078370967755e-02, -2.021826550555510e-02, -1.847078370967751e-02, 9.434854891558411e-01, 9.166780368691386e-01, -1.389234898790523e-02, -1.391209553712324e-02, 2.021541043674288e+00, 1.846195953326556e+00, 6.905628705365732e-02, 6.356322358659547e-02, -1.460986242355889e-02, -1.443553285394427e-02, -1.502389474094208e-02, 9.693166741554644e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.896459965232704e-10, 0.000000000000000e+00, 3.896348173235205e-10, 3.896372988712058e-10, 0.000000000000000e+00, 3.896290131103856e-10, 3.896115172804754e-10, 0.000000000000000e+00, 3.895884697029796e-10, 3.796766354974991e-10, 0.000000000000000e+00, 2.329910847456995e-10, 3.796137625480682e-10, 0.000000000000000e+00, 2.329843421082553e-10, 2.258799699017937e-10, 0.000000000000000e+00, 2.259048198076396e-10, 1.120245143306730e-06, 0.000000000000000e+00, 3.831299856072622e-06, 1.051543841614360e-06, 0.000000000000000e+00, 1.051423719739257e-06, 1.055714860533416e-06, 0.000000000000000e+00, 1.056254385552127e-06, 1.053742397797703e-06, 0.000000000000000e+00, 1.053650129838327e-06, 1.052530802709650e-06, 0.000000000000000e+00, 1.056432959840987e-06, 3.836711704922303e-06, 0.000000000000000e+00, 1.125711044816458e-06, 1.469114984907434e-02, 0.000000000000000e+00, 1.414970430361334e-02, 1.435952219536571e-02, 0.000000000000000e+00, 1.738113871608351e-03, 1.605483715444014e-03, 0.000000000000000e+00, 1.643148586385843e-03, 1.775163330272167e-03, 0.000000000000000e+00, 1.580301181128443e-02, 1.316099435191658e-02, 0.000000000000000e+00, 2.217710485650413e-02, 1.514447542261831e-03, 0.000000000000000e+00, 1.792978365047042e-03, 9.341928802933989e+00, 0.000000000000000e+00, 5.474264651247509e-01, 8.623516443768921e+00, 0.000000000000000e+00, 5.310039400056841e-01, 5.359948061943845e-04, 0.000000000000000e+00, 8.160780436954295e-03, 8.588072009509332e-01, 0.000000000000000e+00, 8.838458602393983e-01, 3.776817590426061e-01, 0.000000000000000e+00, 2.496331501022945e+00, 3.897122425158273e-01, 0.000000000000000e+00, 5.126181251808849e+02, 1.646317988318603e+04, 0.000000000000000e+00, 1.377666493633662e+04, 4.893875374874667e+09, 0.000000000000000e+00, 1.188628764495340e+04, 2.134239166180495e+05, 0.000000000000000e+00, 5.101700951275468e+01, 6.544986150545221e+04, 0.000000000000000e+00, 6.888076231939257e+04, 2.263740299184979e+04, 0.000000000000000e+00, 1.355694282967112e+05, 2.263740299184979e+04, 0.000000000000000e+00, 1.355694282967110e+05, 2.755051819102059e-07, 0.000000000000000e+00, 2.759616585984130e-07, 2.758017492563862e-07, 0.000000000000000e+00, 2.762550457668954e-07, 2.755260265743994e-07, 0.000000000000000e+00, 2.759786584687409e-07, 2.757846628830809e-07, 0.000000000000000e+00, 2.762401819132521e-07, 3.963438580968861e-07, 0.000000000000000e+00, 2.819466474076992e-07, 2.814792166480181e-07, 0.000000000000000e+00, 3.969974831291231e-07, 1.495812165966467e-05, 0.000000000000000e+00, 1.500424838604564e-05, 1.487848847106306e-05, 0.000000000000000e+00, 1.493272848314470e-05, 1.501729513271477e-05, 0.000000000000000e+00, 1.499770067323606e-05, 1.496519272083998e-05, 0.000000000000000e+00, 1.493932110207417e-05, 1.583458359664915e-05, 0.000000000000000e+00, 6.567518639846308e-05, 1.482264786182456e-05, 0.000000000000000e+00, 1.503683033875478e-05, 7.075398524216397e-03, 0.000000000000000e+00, 1.615753203941062e-02, 6.025394072855805e-03, 0.000000000000000e+00, 6.072649449497361e-03, 8.744304774690273e-03, 0.000000000000000e+00, 7.720279246435687e-03, 9.000496618278777e-03, 0.000000000000000e+00, 7.762094855627562e-03, 6.116379843821862e-03, 0.000000000000000e+00, 1.747215662029271e-02, 5.925128116892108e-03, 0.000000000000000e+00, 7.758736206559641e-03, 2.463147487105507e+00, 0.000000000000000e+00, 2.381886640055312e+00, 1.141471518410842e+01, 0.000000000000000e+00, 3.746831183673077e-01, 3.394811681893061e+00, 0.000000000000000e+00, 2.894752958974962e+00, 2.740689344807066e-05, 0.000000000000000e+00, 2.749742542959949e-05, 1.833466732993529e+00, 0.000000000000000e+00, 1.709561898635651e+00, 1.833466732993529e+00, 0.000000000000000e+00, 1.709561898635653e+00, 1.099203486250779e+12, 0.000000000000000e+00, 1.168691300525689e+05, 7.187459192440422e+04, 0.000000000000000e+00, 6.623454894679207e+04, 3.004321244229768e+05, 0.000000000000000e+00, 2.621138660735296e+05, 1.200176902660544e+01, 0.000000000000000e+00, 8.243026162838602e+03, 1.695521638931497e+05, 0.000000000000000e+00, 9.740040460751884e+04, 1.695521638931495e+05, 0.000000000000000e+00, 9.740040460751895e+04, 1.138032467753213e-02, 0.000000000000000e+00, 1.111466697957890e-02, 1.092850537357912e-02, 0.000000000000000e+00, 1.067930177984443e-02, 1.313267532861971e-02, 0.000000000000000e+00, 1.278828704493100e-02, 1.283591880147896e-02, 0.000000000000000e+00, 1.101939713924888e-02, 1.301949438325320e-02, 0.000000000000000e+00, 1.268089243565063e-02, 1.294090824854110e-02, 0.000000000000000e+00, 1.096197745435446e-02, 1.276706642290738e-02, 0.000000000000000e+00, 1.251860340614284e-02, 1.463009143638756e-02, 0.000000000000000e+00, 3.740983054778951e-02, 1.411710430308286e-02, 0.000000000000000e+00, 2.754692420442320e-02, 1.340336727254935e-02, 0.000000000000000e+00, 1.313174694687372e-02, 1.355545156611137e-02, 0.000000000000000e+00, 1.328631202439309e-02, 1.388293141992718e-02, 0.000000000000000e+00, 2.397506178027595e-02, 4.647398976953128e-03, 0.000000000000000e+00, 7.970694088270993e-03, 1.810182390852437e-01, 0.000000000000000e+00, 1.770337535265820e-01, 1.087301131173084e+00, 0.000000000000000e+00, 1.117010856696287e-01, 2.224292272629894e-01, 0.000000000000000e+00, 5.163824656288225e-02, 7.641115712257034e-02, 0.000000000000000e+00, 7.694276412323173e-02, 8.048396499188239e-02, 0.000000000000000e+00, 4.643532975103869e-01, 1.798900962632175e-02, 0.000000000000000e+00, 1.767000554975941e-02, 2.337226945438283e+05, 0.000000000000000e+00, 2.264081833494795e+05, 2.375583942764781e+01, 0.000000000000000e+00, 2.151224903702767e+01, 7.138256686853511e-02, 0.000000000000000e+00, 7.182753877888441e-02, 6.362040849508923e+00, 0.000000000000000e+00, 5.664254763170428e+00, 6.362040849508919e+00, 0.000000000000000e+00, 5.664254763170421e+00, 1.095099434417127e+09, 0.000000000000000e+00, 8.894085420312692e+08, 2.824040129790773e+06, 0.000000000000000e+00, 2.802583158596045e+06, 4.525214932028360e+12, 0.000000000000000e+00, 3.034616681817166e+12, 2.630056734670946e+03, 0.000000000000000e+00, 2.252904863765862e+03, 2.652102340740028e+05, 0.000000000000000e+00, 1.266016148972377e+05, 2.655967836292684e+05, 0.000000000000000e+00, 1.290070730884612e+11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.267339773080128e-05, -1.267343011194584e-05, -1.267331649063513e-05, -1.267337109336881e-05, -1.267304055997067e-05, -1.267298019412019e-05, -1.267395845375243e-05, -9.211262242464554e-06, -1.267335008699789e-05, -9.211420613880611e-06, -9.210985268134798e-06, -9.211420613880611e-06, -2.078085558042097e-04, -4.424630286359612e-04, -2.078435267298968e-04, -2.078075755483212e-04, -2.085257307688327e-04, -2.086437367202387e-04, -2.082437863104823e-04, -2.082391162153364e-04, -2.077946683709949e-04, -2.088470203048113e-04, -4.425929587010555e-04, -2.088470203048113e-04, -8.792227526490778e-03, -8.733890301692476e-03, -8.815294688594840e-03, -2.707260574068051e-03, -2.546441931336280e-03, -2.536108216814346e-03, -2.613430048013297e-03, -9.042378834850161e-03, -8.622242743403903e-03, -9.623215484826756e-03, -2.710182197025122e-03, -2.489306596575496e-03, -7.238276280966227e-02, -1.779235676962483e-02, -7.115882436064234e-02, -1.809110136468785e-02, -1.336317839621708e-03, -6.567040741750823e-03, -1.335131601030724e-02, -1.427823514047868e-02, -1.584480077706009e-02, -1.283327622026077e-02, -1.584480077706009e-02, -1.570123328824876e-01, -2.599152515284457e-02, -2.610543888439005e-02, -3.516494378284886e+00, -2.650771995232569e-02, -5.452329068481574e-01, -1.840169730372793e-02, -2.246667153056186e-02, -2.248111228856600e-02, -2.540519029217392e-02, -2.796938992264362e-02, -2.540519029217392e-02, -2.796938992264362e-02, -1.623472348355449e-04, -1.624244694889443e-04, -1.625620507209655e-04, -1.626322128718129e-04, -1.623627381139658e-04, -1.624341895517683e-04, -1.625468919597644e-04, -1.626227439098889e-04, -2.032800090769032e-04, -1.625283784564223e-04, -1.624546029995407e-04, -2.033761810636661e-04, -5.492098146821952e-04, -5.506589284823691e-04, -5.553478966814622e-04, -5.565974608615831e-04, -5.430933103443573e-04, -5.462594880297275e-04, -5.487591958844737e-04, -5.519264418632153e-04, -5.572222511332527e-04, -1.297462082259253e-03, -5.572222511332527e-04, -5.545789725463179e-04, -6.668233483424875e-03, -1.098071033028455e-02, -7.155245282066864e-03, -7.224231140659189e-03, -6.404105370689927e-03, -6.631242388289636e-03, -7.188226886643020e-03, -7.206108951131665e-03, -6.696069522330634e-03, -1.114945336401940e-02, -6.696069522330634e-03, -6.905463086632569e-03, -1.376627865414603e-02, -1.372277428285544e-02, -7.052676044559074e-02, -1.233727760418780e-02, -1.410514949081533e-02, -1.418302807009046e-02, -8.692398859763697e-04, -8.702212280928779e-04, -1.472713866915548e-02, -1.641958404479536e-02, -1.472713866915548e-02, -1.641958404479537e-02, -8.393060318012997e+00, -1.900294287838370e-02, -2.197691083124259e-02, -2.118695399293561e-02, -3.840040229067638e-02, -3.979939867454346e-02, -1.649902356009538e-02, -2.972559921266930e-01, -2.308482729716941e-02, -3.436969998672658e-02, -2.308482729716937e-02, -3.436969998672662e-02, -1.025749810537896e-02, -1.020941175170089e-02, -9.775999989099513e-03, -9.736231549402164e-03, -1.097173966076677e-02, -1.090118866290464e-02, -1.094116757227495e-02, -1.003531742764282e-02, -1.095645035029876e-02, -1.088631800605663e-02, -1.095645035029876e-02, -9.966500806500883e-03, -1.064325393472214e-02, -1.060611050262854e-02, -8.202363158891687e-03, -1.454845404959468e-02, -8.876695241135504e-03, -1.349806492285777e-02, -9.613766991285397e-03, -9.578578832462718e-03, -9.233147473107385e-03, -9.209859718672110e-03, -9.233147473107385e-03, -1.303786125509165e-02, -6.238351117654617e-03, -8.806648373494232e-03, -1.166022049595630e-02, -1.165569415103899e-02, -3.886430034485175e-02, -1.142632263643141e-02, -2.542622691807429e-02, -1.106558159699522e-02, -1.163844078499468e-02, -1.169555327120874e-02, -1.163844078499470e-02, -3.135117506124401e-02, -8.348570932289632e-03, -8.446303507211816e-03, -5.571790865531067e-01, -5.528373644412077e-01, -1.674351218203721e-02, -1.676924956148470e-02, -1.335065547261924e-02, -1.427246149279760e-02, -1.662061217564401e-02, -1.750677468081401e-02, -1.662061217564400e-02, -1.750677468081399e-02, -2.537256876045246e+00, -2.443662858055972e+00, -1.682277867382709e-02, -1.680971189076140e-02, -1.203693780821858e+01, -1.130526702159331e+01, -2.423399075746261e-01, -2.375432382887074e-01, -3.068331028039663e-02, -3.439957910035536e-02, -3.068331028039662e-02, -6.772251291148261e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
