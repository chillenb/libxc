
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_bc95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.661163851355281e-02, -7.661186447279862e-02, -7.661202683274952e-02, -7.660865158420122e-02, -7.661054046005476e-02, -7.661054046005476e-02, -6.183878096709248e-02, -6.183866155832252e-02, -6.181751373579186e-02, -6.165384121902412e-02, -6.174257947867846e-02, -6.174257947867846e-02, -3.827028113497803e-02, -3.806579849130071e-02, -3.305336239369764e-02, -3.259802949947434e-02, -3.293752403214979e-02, -3.293752403214979e-02, -9.826338931314640e-03, -1.027231000713958e-02, -5.762781745682091e-02, -5.501462773385929e-03, -7.317470911021646e-03, -7.317470911021643e-03, -1.760167370637943e-06, -2.100034992779821e-06, -1.967031925004447e-04, -3.451720431413163e-07, -7.521869804057938e-07, -7.521869804057947e-07, -5.807676191180434e-02, -5.811167946988650e-02, -5.807698700862270e-02, -5.810786524535558e-02, -5.809518032166661e-02, -5.809518032166661e-02, -3.685912050831048e-02, -3.701088986485723e-02, -3.612505297561588e-02, -3.625834449885399e-02, -3.730094311780881e-02, -3.730094311780881e-02, -3.260980735333973e-02, -3.973691873201118e-02, -3.346981969226514e-02, -4.343796994523417e-02, -3.315270482365421e-02, -3.315270482365421e-02, -2.186827249692349e-03, -7.487080748765922e-03, -1.869173482924098e-03, -6.636743055150601e-02, -3.679697340940643e-03, -3.679697340940643e-03, -1.966788848055869e-07, -3.589108953729412e-07, -4.013785118225981e-07, -7.846294151590405e-04, -4.801580049259342e-07, -4.801580049259336e-07, -3.365759144698191e-02, -3.271123978087870e-02, -3.303401462966428e-02, -3.330920856881164e-02, -3.317115199618463e-02, -3.317115199618463e-02, -3.471199453314820e-02, -2.520628934066957e-02, -2.769861909999982e-02, -3.033669880408765e-02, -2.903098243887435e-02, -2.903098243887435e-02, -4.196180816092959e-02, -1.051661222931918e-02, -1.427504074460475e-02, -2.313873385290773e-02, -1.821217575527340e-02, -1.821217575527340e-02, -2.546444249405200e-02, -1.653383365654892e-04, -3.883512747316158e-04, -2.454464550372315e-02, -1.579647027187463e-03, -1.579647027187463e-03, -4.434854610558545e-06, -1.948291644684361e-08, -9.825261216355060e-08, -1.331328740089961e-03, -4.255801318447715e-07, -4.255801318447717e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_bc95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.147055417978806e-01, -1.147051996204618e-01, -1.147035148537911e-01, -1.147085629164553e-01, -1.147059420721363e-01, -1.147059420721363e-01, -1.039369683110379e-01, -1.039296235792658e-01, -1.037243823975869e-01, -1.036931144820363e-01, -1.037428831137794e-01, -1.037428831137794e-01, -7.898772323906178e-02, -7.881686502529069e-02, -7.338140466243924e-02, -7.153983592352441e-02, -7.235992771650036e-02, -7.235992771650036e-02, -2.640758218938722e-02, -2.719301095164805e-02, -1.227529380522632e-01, -1.758388642107007e-02, -2.178394798046140e-02, -2.178394798046140e-02, -7.213177805809324e-06, -8.603300686271199e-06, -7.806386722657719e-04, -1.425325533477808e-06, -3.096290871116780e-06, -3.096290871116784e-06, -8.295162503562389e-02, -8.288655154026078e-02, -8.294759947099396e-02, -8.289021951319135e-02, -8.291921304112029e-02, -8.291921304112029e-02, -7.459727587562041e-02, -7.430700208928355e-02, -7.391629587399814e-02, -7.365909643357331e-02, -7.475335793085680e-02, -7.475335793085680e-02, -5.286542408247377e-02, -4.537785730387251e-02, -5.679371354941840e-02, -5.012156250404385e-02, -5.222667085153714e-02, -5.222667085153714e-02, -7.874299781028110e-03, -2.236200722673991e-02, -6.817558005514467e-03, -6.540386974905221e-02, -1.240985622168386e-02, -1.240985622168386e-02, -8.227222145516903e-07, -1.489175344517329e-06, -1.661246833789572e-06, -3.003387606988359e-03, -1.991193265775235e-06, -1.991193265775232e-06, -3.870206401570436e-02, -4.172450714228162e-02, -4.079632169149023e-02, -3.992384857927181e-02, -4.037280949431887e-02, -4.037280949431887e-02, -3.674977338205684e-02, -4.654319839225576e-02, -4.662195926058009e-02, -4.526679179075369e-02, -4.624566413896879e-02, -4.624566413896879e-02, -4.769357502827029e-02, -2.865503672638545e-02, -3.508747374333731e-02, -4.624176817912145e-02, -4.027177039480580e-02, -4.027177039480579e-02, -4.830186196841695e-02, -6.568681231710060e-04, -1.520450457292447e-03, -4.511221954271801e-02, -5.802113172004881e-03, -5.802113172004884e-03, -1.825362734771801e-05, -8.392975265015766e-08, -4.065651367591177e-07, -4.934952399473028e-03, -1.762274556961260e-06, -1.762274556961261e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.474352613747293e-10, 1.474356571912276e-10, 1.474300707954290e-10, 1.474241721050237e-10, 1.474283098443958e-10, 1.474283098443958e-10, 1.180522096043719e-06, 1.180594060780655e-06, 1.181369160316529e-06, 1.170817243069800e-06, 1.176603703025298e-06, 1.176603703025298e-06, 2.248404915047298e-03, 2.226784809114308e-03, 1.717041923274350e-03, 1.603588501543002e-03, 1.659475102672423e-03, 1.659475102672423e-03, 1.317495306287154e-01, 1.344763268577897e-01, 2.129443378024354e-03, 1.716720788206482e-01, 1.662487781387138e-01, 1.662487781387137e-01, 7.873672663569671e-01, 8.282647678285656e-01, 3.473613364120952e-01, 7.773529470439632e-01, 9.551880425943868e-01, 9.551880425943893e-01, 1.460080238824522e-07, 1.464462186835787e-07, 1.460164916690520e-07, 1.464036757759721e-07, 1.462359763013596e-07, 1.462359763013596e-07, 5.559879415804916e-06, 5.425360054780321e-06, 5.367156638911619e-06, 5.249664207846288e-06, 5.581319556763413e-06, 5.581319556763413e-06, 4.215286868468716e-03, 5.949165539032283e-03, 6.547180861364893e-03, 1.264484135516211e-02, 4.170733482547652e-03, 4.170733482547652e-03, 1.949307694956471e-01, 7.075907752804388e-02, 2.190776066741695e-01, 4.690278102270624e-05, 2.320007712832368e-01, 2.320007712832368e-01, 1.155895737789403e+00, 9.549434298922754e-01, 5.914085038307722e+00, 3.543545935700601e-01, 2.786777773488938e+00, 2.786777773488931e+00, 7.236296421477949e-03, 6.129416358540565e-03, 6.480195069607995e-03, 6.800881239181248e-03, 6.637188053696926e-03, 6.637188053696926e-03, 9.414154084486896e-03, 4.654427289259738e-03, 5.283379289244871e-03, 6.371627166087343e-03, 5.791655223974125e-03, 5.791655223974125e-03, 5.060521058150868e-03, 4.095004045936541e-02, 3.070071083820848e-02, 2.556887579908075e-02, 2.721463231601377e-02, 2.721463231601378e-02, 7.617854211793232e-03, 3.157494929389333e-01, 2.969917866400772e-01, 4.050015660787385e-02, 3.725503909314006e-01, 3.725503909314009e-01, 6.499588413138689e-01, 6.761122071028788e+00, 2.241873723751696e+00, 3.758111036120749e-01, 3.481479953816376e+00, 3.481479953816392e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
