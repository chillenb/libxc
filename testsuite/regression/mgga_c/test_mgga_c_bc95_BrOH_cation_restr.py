
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_bc95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.236640582434843e-01, -1.236628790425935e-01, -1.236581564183781e-01, -1.236756075523735e-01, -1.236663905532258e-01, -1.236663905532258e-01, -1.354850125351365e-01, -1.354644268641577e-01, -1.349238739701883e-01, -1.351451452253095e-01, -1.351177704365251e-01, -4.262523258140805e-02, -1.346611525471152e-01, -2.028764931294041e-02, -1.884422578482113e-02, -1.948149117864665e-02, -1.933674948571147e-02, -1.933674948571147e-02, -9.383810334754420e-03, -9.718981671877989e-03, -2.195614215390856e-01, -4.508956123462482e-03, -6.360917820418825e-03, -6.360917820418823e-03, -1.743535682894357e-06, -2.063799622683385e-06, -1.737808834436555e-04, -3.024937608676526e-07, -6.948673219835734e-07, -6.948673219835734e-07, -5.798926161185129e-02, -5.802493937563418e-02, -5.799129743391820e-02, -8.261558931835350e-02, -5.800715218078405e-02, -5.800715218078405e-02, -1.313687043462124e-01, -1.282734058210184e-01, -1.339112158303102e-01, -1.310171518925309e-01, -1.284362472976462e-01, -3.496437100631430e-02, -2.740116494249938e-02, -3.067945240688223e-02, -2.485080586839415e-02, -2.707993112327974e-02, -2.803091460262936e-02, -5.794415155025349e-02, -3.942302121387753e-01, -7.055482508227737e-03, -4.319436937772898e-01, -4.125634534071066e-02, -3.282985165452782e-03, -3.282985165452783e-03, -3.260436647680050e+01, -2.661731064138701e-07, -3.447992799220428e-07, -6.649256982802437e-01, -1.371336772783068e+01, -3.687197759064637e-07, -3.230178513921344e-02, -3.160341261263561e-02, -3.750579747733112e-02, -3.205042066177691e-02, -3.194853156902255e-02, -3.194853156902255e-02, -3.189124067613328e-02, -2.468119229518799e-02, -2.683051323267206e-02, -2.893589366703150e-02, -2.786573909594725e-02, -4.929163621504511e-02, -3.056483508087172e-02, -1.272265579084488e-01, -1.325548227882120e-02, -7.275382136953908e-02, -1.632408769134631e-02, -1.632408769134631e-02, -6.872831056983045e-02, -1.555672999009884e-04, -3.341803497107779e-04, -2.025828808139463e-02, -4.109013547829599e-01, -1.364867971745502e-03, -3.252660150125384e-06, -6.028247865353150e-09, -9.142551388783979e-08, -1.215612195187872e-03, -3.506574667353351e-07, -3.506574667353351e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_bc95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.443192958085274e-02, -6.443270927881913e-02, -6.443588228572521e-02, -6.442433770615309e-02, -6.443042796881186e-02, -6.443042796881186e-02, -1.564834532156147e-02, -1.566031925317377e-02, -1.597512140253152e-02, -1.584822027562014e-02, -1.586170230773929e-02, -8.294969873970261e-02, 1.588737686983575e-02, -4.857576457872539e-02, -4.686438267316224e-02, -4.761408187785857e-02, -4.744928346677381e-02, -4.744928346677381e-02, -2.547061312159215e-02, -2.604396773942809e-02, 5.978862739755880e-02, -1.474878325048331e-02, -1.936156012430476e-02, -1.936156012430475e-02, -7.143402864566215e-06, -8.451356163685270e-06, -6.887055875506451e-04, -1.244853207834277e-06, -2.854682133635028e-06, -2.854682133635028e-06, -8.293818755667591e-02, -8.287393531815294e-02, -8.293447226660665e-02, -5.548458663051974e-02, -8.290605639408186e-02, -8.290605639408186e-02, -5.968130724610956e-03, -7.875699520598186e-03, -4.414697551874912e-03, -6.190692220155882e-03, -7.769228265513459e-03, -7.136973418534759e-02, -4.847337157315137e-02, -4.761329698718619e-02, -4.770076456917913e-02, -4.777652000681837e-02, -4.846704911313244e-02, -2.366475592252534e-02, 1.665205555190621e-01, -2.127939660778182e-02, 1.845416674308143e-01, -6.938721663054563e-02, -1.118669179685723e-02, -1.118669179685723e-02, 1.242641712694108e+01, -1.095564587212057e-06, -1.421395077151550e-06, 2.918560524331684e-01, 5.267510288419794e+00, -1.518324261850243e-06, -4.016210107500057e-02, -4.232072219308167e-02, -3.444248625464541e-02, -4.101582879926730e-02, -4.133602664503162e-02, -4.133602664503162e-02, -4.013263143665786e-02, -4.590840229559341e-02, -4.584136944723182e-02, -4.476407778347601e-02, -4.546646860835009e-02, -2.605946843549057e-02, -4.920809585472051e-02, 2.850342295274545e-02, -3.316412952542411e-02, -6.405481331622516e-03, -3.712122184169544e-02, -3.712122184169543e-02, -1.297230110051367e-02, -6.175980996909043e-04, -1.307572699817047e-03, -3.975579307487845e-02, 1.742283252249349e-01, -5.039597076807859e-03, -1.328421967022349e-05, -2.498189268556690e-08, -3.775993337670190e-07, -4.518800965346979e-03, -1.444635500484929e-06, -1.444635500484929e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.596262422727079e-10, 6.596066235441559e-10, 6.595210097335337e-10, 6.598121675841528e-10, 6.596593751345394e-10, 6.596593751345394e-10, 7.805796115084330e-06, 7.804151606937747e-06, 7.760283268571081e-06, 7.774643081839491e-06, 7.776930253854038e-06, 3.620642438174510e-07, 3.253097577325831e-02, 3.966158671824490e-04, 3.821181409611752e-04, 3.966439612027352e-04, 3.930690747208951e-04, 3.930690747208951e-04, 1.180368511323550e-01, 1.176378204074374e-01, 2.612158001853395e-02, 1.126006342458882e-01, 1.220463489346067e-01, 1.220463489346067e-01, 7.727653328679283e-01, 8.003205044098904e-01, 2.716932451051468e-01, 5.996547861649331e-01, 8.171780932607046e-01, 8.171780932607046e-01, 1.451327220801815e-07, 1.455762837478288e-07, 1.451591950777881e-07, 4.719358558241128e-07, 1.453542469680726e-07, 1.453542469680726e-07, 1.388442010971926e-04, 1.298389104629284e-04, 1.461387349314814e-04, 1.375923775922069e-04, 1.304987128758387e-04, 4.552639690363610e-06, 2.272907231551215e-03, 2.386985072848579e-03, 2.450167966159055e-03, 2.751580778736073e-03, 2.282464392218929e-03, 1.982467731147755e-02, 2.345917447793116e+03, 6.209014479752905e-02, 3.803274716006379e+03, 1.015413298488710e-05, 1.831322939245599e-01, 1.831322939245600e-01, 8.972100062199740e+12, 5.311353292625086e-01, 4.387742518491287e+00, 4.292209662892247e+04, 1.742429371809151e+12, 1.659498907763941e+00, 6.169193987225028e-03, 5.350086333497048e-03, 1.015338467738602e-02, 5.850102463071875e-03, 5.728799655402441e-03, 5.728799655402441e-03, 6.835563948006674e-03, 4.321760872261887e-03, 4.686532585223618e-03, 5.297848224348901e-03, 4.947172902477486e-03, 2.936394340464428e-02, 1.700836456513569e-03, 8.718827320209877e+00, 2.536061883877486e-02, 4.334270424682274e-01, 1.986560270979401e-02, 1.986560270979402e-02, 1.034073493516988e-01, 2.798194700446983e-01, 2.203269890040014e-01, 2.136558295917660e-02, 7.859960765365336e+03, 2.774428359704279e-01, 3.531878581019126e-01, 7.052281159479137e-01, 1.946034217036985e+00, 3.129585872780374e-01, 2.379988096489895e+00, 2.379988096489904e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_bc95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_bc95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917476094290055e-05, -3.917456290562790e-05, -3.917362137932091e-05, -3.917656909685308e-05, -3.917503319995349e-05, -3.917503319995349e-05, -9.886250054216535e-04, -9.886212963460517e-04, -9.884934715953247e-04, -9.883894443422218e-04, -9.885791352840607e-04, -1.092890167284502e-04, -1.592853529406604e-02, -5.685700042247030e-04, -4.648129682438896e-04, -5.139818280660836e-04, -5.022363367313802e-04, -5.022363367313802e-04, -2.272476539174919e-03, -2.438635333769843e-03, -1.238371199050499e-02, -6.228892557979323e-04, -1.124305293517300e-03, -1.124305293517299e-03, -3.204729070861083e-07, -3.855175240946730e-07, -1.991413646192578e-05, -4.988686685971546e-08, -1.326836629820020e-07, -1.326836629820020e-07, -2.260367971782170e-04, -2.271288073430429e-04, -2.261000879123792e-04, -4.880334250829034e-04, -2.265829779956127e-04, -2.265829779956127e-04, -2.661303104094819e-03, -2.628685277403782e-03, -2.685517452651573e-03, -2.656249081361493e-03, -2.631732964054590e-03, -2.290778277697597e-04, -3.980651631573461e-03, -6.402809383628741e-03, -2.954762597660942e-03, -4.309697953295984e-03, -4.345624039846454e-03, -1.929735692306609e-02, -3.460331214744272e-01, -9.414838695722697e-04, -3.870885540310496e-01, -6.625392309547946e-04, -5.032062162522918e-04, -5.032062162522921e-04, -3.156062561985356e+01, -4.134727186741635e-08, -1.556221706271906e-07, -6.787815240163054e-01, -2.642940795733916e+01, -1.015876081719198e-07, -1.552468435401276e-02, -1.269737312846192e-02, -1.976885817934797e-02, -1.441831558918538e-02, -1.399960176047655e-02, -1.399960176047655e-02, -1.574997737406090e-02, -4.123336256814151e-03, -5.890729233565684e-03, -8.626635291583489e-03, -7.072833338322452e-03, -2.357026059631729e-02, -5.028715317686327e-03, -9.384751940055865e-02, -2.033973732592932e-03, -4.576736496754310e-02, -2.971284313366229e-03, -2.971284313366229e-03, -3.001494066796270e-02, -1.798465892885614e-05, -3.609275702144947e-05, -5.873978700190716e-03, -4.830320359587126e-01, -1.992430445642115e-04, -4.006917532914426e-07, -1.135208051828429e-09, -2.781011732063595e-08, -1.840090343808162e-04, -1.160538313713013e-07, -1.160538313713013e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
