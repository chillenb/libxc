
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.803590203190244e-01, -2.803676975298367e-01, -2.804028891904040e-01, -1.835755281847529e-01, -1.581001723761218e-01, -1.324435295325068e-01, 1.782826303977878e-02, 5.539686698409405e-02, 5.426423334924910e-02, 5.472480388081755e-02, 5.467241365551985e-02, 1.701986941116529e-02, -1.909068349304019e-01, -3.312211996533895e-02, 8.658585023658373e-02, 3.224685055068447e-02, -2.056289633913860e-01, 8.365662671727413e-02, 6.664288718493630e-03, -4.202637509193386e-02, 6.218143640424808e-02, 3.506151919209322e-02, 4.207639778299738e-02, 4.165437849739033e-02, -1.044355508582682e-03, -1.085910744467152e-03, -1.876444162563828e-03, -6.641018607175003e-04, -6.857832620429727e-04, -6.857832620429493e-04, -1.892035201637318e-01, -1.488207020064161e-01, -1.483185807285688e-01, -1.487886842116039e-01, -2.254552607038409e-01, -1.896812259303950e-01, 2.441457524490583e-02, 2.049671120414142e-02, 7.205398106881285e-02, 6.731055126788264e-02, -2.473482146544767e-02, 2.071189118457502e-02, -4.292642514112589e-02, -8.614650977911242e-02, -1.143234701074164e-03, -2.995897189759569e-02, -4.820231011041225e-02, -3.744513181492042e-02, 1.445786799727146e-02, 1.662111673367324e-02, 6.768193158120988e-03, -4.975886961032294e-02, 1.170163650694129e-02, 1.170163650694131e-02, -5.294760283009334e-04, -6.515060576502824e-04, -5.103800723162635e-04, 1.386715276758013e-03, -5.689134883525960e-04, -5.689134883525960e-04, -3.061765759261946e-01, -1.857198996838756e-01, -2.863641308163466e-01, -2.827852908674068e-01, -3.032320044571043e-01, -2.642291632874768e-01, -3.135740756063912e-01, -4.579277006180710e-02, -5.349922797388722e-02, -8.548331888643189e-02, -6.092169169606531e-02, -7.137307985675485e-02, -8.870553333309264e-02, 1.085903520846652e-02, 3.430840900430570e-03, -1.508805367001371e-02, -9.135097304724248e-03, -8.847090103912105e-03, 3.031182164022393e-03, -1.503010088770217e-01, -4.357034516972870e-04, -2.451041596545641e-02, 1.006780684753241e-02, 1.006780684753238e-02, -5.473111030163754e-02, -1.976122909033071e-04, -1.496988443676495e-02, -2.050898462063470e-01, -5.369381741701691e-04, -5.370630579920332e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.563976590192679e-01, -7.563983129088144e-01, -7.564206936164616e-01, -7.564217962788087e-01, -7.565161691428086e-01, -7.565149499138571e-01, -5.395985141639048e-01, -5.396012759161276e-01, -4.626785012124531e-01, -4.626824988021185e-01, -3.801723938180001e-01, -3.801757448649222e-01, -2.435917051701824e-01, -2.435920830527503e-01, -2.573796174246079e-01, -2.573787592663185e-01, -2.585241183983477e-01, -2.585252136652372e-01, -2.580671256037397e-01, -2.580678829862629e-01, -2.581009180793200e-01, -2.581210737536366e-01, -2.438636074959155e-01, -2.438527784810987e-01, 5.803091100038580e-02, 5.953988050756352e-02, -1.589132219906956e-01, -1.580240895499939e-01, -5.011992395417477e-02, -4.943973114455486e-02, -1.446651880508659e-01, -1.445555619232521e-01, 5.865659462269707e-02, 3.169439074065952e-02, -6.419440432312369e-02, -5.816843760023591e-02, -1.074637856634684e-01, -1.042421001593815e-01, -1.356441542630839e-01, -1.274536061366505e-01, -7.546503947368161e-02, -7.571775882397370e-02, 5.113911487745574e-02, 5.048494604220143e-02, 5.234559696572520e-02, 1.085944482857930e-01, 5.053824871070282e-02, 1.053426142149799e-01, -1.357473187755626e-03, -1.241408281949306e-03, -1.413610409460577e-03, -1.276286151845397e-03, 6.040435640501477e-04, 8.482868976418378e-04, -8.408266662574234e-04, -8.604850643546242e-04, -7.504753380561045e-04, -1.485788556539546e-03, -7.504753380560098e-04, -1.485788556539413e-03, -4.680709544113303e-01, -4.681699449195578e-01, -3.225173010834845e-01, -3.226012572426947e-01, -3.226444629576610e-01, -3.227273524490730e-01, -3.225254812374196e-01, -3.226075211297569e-01, -5.834475186364424e-01, -5.835627862840657e-01, -4.686447919554743e-01, -4.687459096173502e-01, -1.997781170358113e-01, -1.997797521182258e-01, -2.016467021026655e-01, -2.016567227043513e-01, -1.918947879030726e-01, -1.920240655339060e-01, -1.983041426274899e-01, -1.984246186016564e-01, -1.621850720499636e-01, -1.627300025853849e-01, -2.014476306340755e-01, -2.016081672745967e-01, -1.690303818389548e-01, -1.693261039894413e-01, -2.674110306428917e-01, -2.673193152517686e-01, -1.610080331858337e-01, -1.592338632130157e-01, -1.878498984831267e-01, -1.849164750255022e-01, -1.861545057104393e-01, -1.922867440626032e-01, -1.961796194478086e-01, -2.014131313249751e-01, 3.867773107028389e-02, 3.845232181852565e-02, -6.799025350212842e-02, -6.770818995857390e-02, 6.892285227034381e-03, 7.096120032714877e-03, -2.902517612581689e-01, -2.903079817107260e-01, -1.913771680072111e-02, -1.771635881834861e-02, -1.913771680072093e-02, -1.771635881834869e-02, -7.022965761064423e-04, -6.669085827651860e-04, -8.441059353654274e-04, -8.268892996752942e-04, -6.805628726854743e-04, -6.297868751555738e-04, 6.129780469476333e-03, 6.145756870740202e-03, -9.603186612487332e-04, -6.361907588225047e-04, -9.603186612487265e-04, -6.361907588224371e-04, -7.293610544388602e-01, -7.266435961718426e-01, -4.896345388580226e-01, -4.878887218664560e-01, -6.225072349819092e-01, -6.202660441486151e-01, -6.559953470178392e-01, -6.536116489754964e-01, -6.471943721404798e-01, -6.448323188675689e-01, -6.244469659513313e-01, -6.221999348850683e-01, -6.994398451722066e-01, -6.971988212926039e-01, -9.689303361394755e-02, -9.639225954260296e-02, -1.877157764257018e-01, -1.871535848380471e-01, -2.615061070601475e-01, -2.608006025882697e-01, -2.232324472435868e-01, -2.226901645446677e-01, -2.322957145372901e-01, -2.316991641337156e-01, -2.677798563562561e-01, -2.674706427425013e-01, -1.096870138904077e-01, -1.092002893379758e-01, -1.276214594136821e-01, -1.266675452856945e-01, -1.078751119918935e-01, -1.073512177712355e-01, -1.192084208325290e-01, -1.192445483953002e-01, -1.193416380996996e-01, -1.193775684868514e-01, -1.462764674874802e-01, -1.459699814957562e-01, -1.769183721184527e-01, -1.747827334886123e-01, 6.048763976517504e-03, 6.096438512204407e-03, -9.667345099252175e-02, -9.532106695853272e-02, 2.996397157867155e-02, 2.906858771380633e-02, 2.996397157867124e-02, 2.906858771380582e-02, -7.142956385639770e-02, -6.777227621885543e-02, -2.593163033409606e-04, -2.585688888487823e-04, -2.034822340644335e-02, -1.877219342487774e-02, -1.908531706581222e-01, -1.837416949170805e-01, -8.767891625703721e-04, -6.050337648950683e-04, -8.777052551562570e-04, -6.058105944733956e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.044916346061873e-08, 2.089832692123746e-08, 1.044916346061873e-08, 1.044945730636280e-08, 2.089891461272560e-08, 1.044945730636280e-08, 1.045056298385845e-08, 2.090112596771689e-08, 1.045056298385845e-08, 9.123955000589711e-10, 1.824791000117942e-09, 9.123955000589711e-10, 4.706690728898340e-10, 9.413381457796681e-10, 4.706690728898340e-10, 2.296364064778503e-10, 4.592728129557006e-10, 2.296364064778503e-10, 2.183674143534753e-06, 4.367348287069505e-06, 2.183674143534753e-06, 9.114811840461200e-07, 1.822962368092240e-06, 9.114811840461200e-07, 9.124008503026378e-07, 1.824801700605276e-06, 9.124008503026378e-07, 9.116247663407244e-07, 1.823249532681448e-06, 9.116247663407244e-07, 9.121824249465527e-07, 1.824364849893105e-06, 9.121824249465527e-07, 2.190922779807381e-06, 4.381845559614762e-06, 2.190922779807381e-06, 3.959446719852568e-02, 7.918893439705135e-02, 3.959446719852568e-02, 1.162179169554642e-02, 2.324358339109284e-02, 1.162179169554642e-02, 1.833934023626714e-03, 3.667868047253427e-03, 1.833934023626714e-03, 5.797224111899802e-03, 1.159444822379960e-02, 5.797224111899802e-03, 4.596205003133217e-02, 9.192410006266434e-02, 4.596205003133217e-02, 1.887937300556660e-03, 3.775874601113319e-03, 1.887937300556660e-03, 2.299075326412762e+00, 4.598150652825525e+00, 2.299075326412762e+00, 4.553867972978121e+00, 9.107735945956241e+00, 4.553867972978121e+00, 1.635588014607917e-03, 3.271176029215834e-03, 1.635588014607917e-03, 5.124827792332696e-01, 1.024965558466538e+00, 5.124827792332696e-01, 1.804411180619369e-01, 3.608822361238744e-01, 1.804411180619369e-01, 1.991264704145934e-01, 3.982529408291878e-01, 1.991264704145934e-01, 3.410744188017552e-01, 6.821488376096820e-01, 3.410744188017552e-01, 2.257676380338252e-01, 4.515352760664195e-01, 2.257676380338252e-01, 9.571620064246199e-01, 1.914324012849402e+00, 9.571620064246199e-01, 9.016435057025265e-02, 1.803287011240935e-01, 9.016435057025265e-02, 5.427482758467821e-03, 1.085496551929222e-02, 5.427482758467821e-03, 5.427482754345151e-03, 1.085496551028601e-02, 5.427482754345151e-03, 1.196647478342673e-06, 2.393294956685346e-06, 1.196647478342673e-06, 6.714093411424194e-07, 1.342818682284839e-06, 6.714093411424194e-07, 6.585861557476061e-07, 1.317172311495212e-06, 6.585861557476061e-07, 6.705841837538916e-07, 1.341168367507783e-06, 6.705841837538916e-07, 1.988379554135978e-06, 3.976759108271956e-06, 1.988379554135978e-06, 1.207404368431175e-06, 2.414808736862350e-06, 1.207404368431175e-06, 3.686405546339583e-05, 7.372811092679166e-05, 3.686405546339583e-05, 3.562047035706682e-05, 7.124094071413364e-05, 3.562047035706682e-05, 1.496427269043952e-05, 2.992854538087904e-05, 1.496427269043952e-05, 1.475271735026687e-05, 2.950543470053374e-05, 1.475271735026687e-05, 6.983522666449215e-05, 1.396704533289843e-04, 6.983522666449215e-05, 3.573831685296061e-05, 7.147663370592121e-05, 3.573831685296061e-05, 8.294819708045482e-03, 1.658963941609096e-02, 8.294819708045482e-03, 6.290642113436554e-03, 1.258128422687311e-02, 6.290642113436554e-03, 8.016048210567551e-03, 1.603209642113510e-02, 8.016048210567551e-03, 6.036394599737458e-03, 1.207278919947492e-02, 6.036394599737458e-03, 6.984063435978361e-03, 1.396812687195672e-02, 6.984063435978361e-03, 4.633554617613745e-03, 9.267109235227489e-03, 4.633554617613745e-03, 3.572843395695345e-01, 7.145686791390730e-01, 3.572843395695345e-01, 1.361766572412182e+00, 2.723533144824365e+00, 1.361766572412182e+00, 2.341318068440904e+00, 4.682636136881799e+00, 2.341318068440904e+00, 1.795573802529004e-05, 3.591147605058010e-05, 1.795573802529004e-05, 4.018685267404785e+00, 8.037370534809568e+00, 4.018685267404785e+00, 4.018685267404784e+00, 8.037370534809574e+00, 4.018685267404784e+00, 2.262327963334910e-02, 4.524655925051237e-02, 2.262327963334910e-02, 9.011216232222563e-03, 1.802243247229668e-02, 9.011216232222563e-03, 1.034889995253265e+00, 2.069779990324070e+00, 1.034889995253265e+00, 2.627131087180630e+00, 5.254262174361283e+00, 2.627131087180630e+00, 2.381925539730093e-01, 4.763851079318359e-01, 2.381925539730093e-01, 2.381925539733289e-01, 4.763851079221735e-01, 2.381925539733289e-01, 1.438036449007072e-01, 2.876072898014145e-01, 1.438036449007072e-01, 6.201361821689677e-02, 1.240272364337935e-01, 6.201361821689677e-02, 1.111140380799372e-01, 2.222280761598745e-01, 1.111140380799372e-01, 1.183241585890698e-01, 2.366483171781395e-01, 1.183241585890698e-01, 1.224522941082106e-01, 2.449045882164212e-01, 1.224522941082106e-01, 1.056841015098360e-01, 2.113682030196719e-01, 1.056841015098360e-01, 1.572416186175201e-01, 3.144832372350402e-01, 1.572416186175201e-01, 2.998498223796775e-02, 5.996996447593549e-02, 2.998498223796775e-02, 1.430943871499555e-02, 2.861887742999110e-02, 1.430943871499555e-02, 1.438765932438300e-02, 2.877531864876600e-02, 1.438765932438300e-02, 9.855253512129616e-03, 1.971050702425923e-02, 9.855253512129616e-03, 1.440687337630844e-02, 2.881374675261689e-02, 1.440687337630844e-02, 6.818723721208811e-03, 1.363744744241762e-02, 6.818723721208811e-03, 7.804819929931682e-01, 1.560963985986336e+00, 7.804819929931682e-01, 4.333369972261085e-01, 8.666739944522170e-01, 4.333369972261085e-01, 1.333146544087690e-01, 2.666293088175379e-01, 1.333146544087690e-01, 2.645843836888944e-01, 5.291687673777887e-01, 2.645843836888944e-01, 2.633909396009013e-01, 5.267818792018025e-01, 2.633909396009013e-01, 1.921703965474370e-02, 3.843407930948740e-02, 1.921703965474370e-02, 1.396657829039911e+04, 2.793315658079822e+04, 1.396657829039911e+04, 2.179419685933129e-01, 4.358839371866267e-01, 2.179419685933129e-01, 1.381957152332007e-01, 2.763914304664014e-01, 1.381957152332007e-01, 6.807746312697414e-01, 1.361549262539475e+00, 6.807746312697414e-01, 6.807746312697285e-01, 1.361549262539466e+00, 6.807746312697285e-01, 3.431194194627751e+06, 6.862388389255502e+06, 3.431194194627751e+06, 1.223290318188425e-03, 2.446580859965792e-03, 1.223290318188425e-03, 1.352583850636936e+09, 2.705167701273871e+09, 1.352583850636936e+09, 7.577910368868478e+02, 1.515582073773696e+03, 7.577910368868478e+02, 3.885797542864132e-02, 7.771595087824755e-02, 3.885797542864132e-02, 7.852124218272809e+00, 1.570424843672768e+01, 7.852124218272809e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.689923748546553e-04, 2.689923748546552e-04, 2.690074541423252e-04, 2.690074541423253e-04, 2.690674606530623e-04, 2.690674606530622e-04, 1.492312887105491e-04, 1.492312887105491e-04, 1.176370304435807e-04, 1.176370304435807e-04, 8.587629678714677e-05, 8.587629678714678e-05, 8.646719999964668e-04, 8.646719999964669e-04, 1.449242690857539e-03, 1.449242690857538e-03, 1.463730850286167e-03, 1.463730850286169e-03, 1.457652705227204e-03, 1.457652705227206e-03, 1.458543215666969e-03, 1.458543215666969e-03, 8.697214720433015e-04, 8.697214720433017e-04, -2.602345217064164e-02, -2.602345217064164e-02, -9.492742757736684e-03, -9.492742757736679e-03, 2.640049065827060e-04, 2.640049065826983e-04, -3.566034827945219e-03, -3.566034827945213e-03, -2.491101925951244e-02, -2.491101925951244e-02, 8.984227611455498e-04, 8.984227611455527e-04, -5.132837724263627e-02, -5.132837724263615e-02, -8.426139836970552e-02, -8.426139836970557e-02, -3.336421725161774e-03, -3.336421725161774e-03, -3.450876643066775e-02, -3.450876643066766e-02, -2.832939218162571e-02, -2.832939218162577e-02, -2.847811905609891e-02, -2.847811905609905e-02, -3.719181437418198e-05, -3.719181437420031e-05, -4.479049197758535e-05, -4.479049197759278e-05, -2.363391535973799e-03, -2.363391535973799e-03, -5.687460792393103e-06, -5.687460792393103e-06, -1.298827981487404e-05, -1.298827981489223e-05, -1.298827981493466e-05, -1.298827981493466e-05, 1.803377423659725e-03, 1.803377423659724e-03, 7.898804765540928e-05, 7.898804765541008e-05, 1.158575004012871e-04, 1.158575004012856e-04, 8.136172575605734e-05, 8.136172575605845e-05, 3.277435841355783e-03, 3.277435841355783e-03, 1.798619305667974e-03, 1.798619305667974e-03, 1.021968106409498e-03, 1.021968106409498e-03, 1.137405623262205e-03, 1.137405623262201e-03, 2.408453762890171e-03, 2.408453762890171e-03, 2.545983881333982e-03, 2.545983881333981e-03, -5.340013322080043e-04, -5.340013322080043e-04, 1.130894195087429e-03, 1.130894195087429e-03, 3.199007277052862e-02, 3.199007277052861e-02, 8.081795334503115e-02, 8.081795334503125e-02, 2.528764261785190e-02, 2.528764261785191e-02, 4.640877594642059e-02, 4.640877594642064e-02, 4.282755572692648e-02, 4.282755572692645e-02, 4.927549755331888e-02, 4.927549755331889e-02, -1.834060798447801e-02, -1.834060798447824e-02, -3.949589702862386e-02, -3.949589702862393e-02, -1.680578353239021e-02, -1.680578353239024e-02, 8.242456766507238e-03, 8.242456766507238e-03, -3.741733693732088e-02, -3.741733693732089e-02, -3.741733693732124e-02, -3.741733693732121e-02, -1.861857012258938e-06, -1.861857012263229e-06, -4.710405807522472e-06, -4.710405807511700e-06, -1.751770064780979e-05, -1.751770064784769e-05, -8.778878961762614e-03, -8.778878961762639e-03, -1.086402829894268e-05, -1.086402829897219e-05, -1.086402829892055e-05, -1.086402829896481e-05, 9.271542814802416e-01, 9.271542814802420e-01, 3.033579545901821e-01, 3.033579545901821e-01, 7.741681372851669e-01, 7.741681372851678e-01, 7.702384724283158e-01, 7.702384724283162e-01, 8.637884548035990e-01, 8.637884548035987e-01, 6.705833196964732e-01, 6.705833196964731e-01, 1.007609387091603e+00, 1.007609387091604e+00, 1.310015768189550e-03, 1.310015768189551e-03, 6.156664705698468e-02, 6.156664705698470e-02, 1.135249701146032e-01, 1.135249701146031e-01, 8.903881648306135e-02, 8.903881648306136e-02, 9.653215533357952e-02, 9.653215533357955e-02, 7.570264024042850e-02, 7.570264024042853e-02, -3.451763850803049e-02, -3.451763850803043e-02, -2.696444127324615e-02, -2.696444127324615e-02, -1.458940119931631e-02, -1.458940119931631e-02, -2.353591940798292e-02, -2.353591940798291e-02, -2.330041016485429e-02, -2.330041016485428e-02, 2.606310823507276e-02, 2.606310823507275e-02, -5.396072001459592e-03, -5.396072001459592e-03, -4.176234939327117e-03, -4.176234939327117e-03, -2.893793665530651e-03, -2.893793665530668e-03, -1.899404658567951e-02, -1.899404658567948e-02, -1.899404658567951e-02, -1.899404658567948e-02, -1.193477293005097e-04, -1.193477293005154e-04, -1.242814625096151e-07, -1.242814625185470e-07, -7.834750146577918e-06, -7.834750146577918e-06, -4.490187994937346e-02, -4.490187994937343e-02, -1.251486306115996e-05, -1.251486306115996e-05, -1.251498094684994e-05, -1.251498094684442e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
