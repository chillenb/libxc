
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.348692034101222e-01, -1.348731432273880e-01, -1.348877923839371e-01, -1.348294145692927e-01, -1.348604136802614e-01, -1.348604136802614e-01, 1.034027091707675e-02, 1.031268060088620e-02, 9.622533866849397e-03, 1.027236075770993e-02, 1.004560289572202e-02, 1.004560289572202e-02, -3.915834548085277e-03, -3.111353582665593e-03, 1.773342790329556e-02, 1.916843339853376e-02, 1.798551415824716e-02, 1.798551415824716e-02, 3.884588454161531e-02, 3.707725943983262e-02, -4.726156384659365e-02, 3.019953980994133e-02, 3.319373172294382e-02, 3.319373172294387e-02, -1.044192228442258e-03, -1.085786451553049e-03, -1.762676399352253e-03, -6.640929622920348e-04, -6.857898418070248e-04, -6.857898418070014e-04, -1.486844140942909e-01, -1.492207714661972e-01, -1.487073680589049e-01, -1.491807442588590e-01, -1.489577769120554e-01, -1.489577769120554e-01, 6.025063606318608e-02, 5.616588242010297e-02, 6.544236773057872e-02, 6.181569890786102e-02, 5.543350034435576e-02, 5.543350034435576e-02, -3.911412250985907e-02, -1.054086877564072e-01, -2.492093016880274e-02, -5.521860939280680e-02, -4.676521094639106e-02, -4.676521094639106e-02, 1.347865984494882e-02, 4.502786274064582e-02, 1.091081141222574e-02, -8.740699478206206e-02, 2.473115918886301e-02, 2.473115918886304e-02, -5.294755749791995e-04, -6.515078115259667e-04, -5.103643654639276e-04, 2.619937142798863e-03, -5.689046843159736e-04, -5.689046843159736e-04, -3.365421256737391e-01, -1.981328829589605e-01, -2.319333361091741e-01, -2.701305057372214e-01, -2.495986150950571e-01, -2.495986150950571e-01, -3.333325600991399e-01, -1.422947635651120e-02, -4.381548133793862e-02, -8.912334957112959e-02, -6.316273675202748e-02, -6.316273675202747e-02, -8.755896975026051e-02, 4.970804156980776e-02, 3.931150987139258e-02, -2.587720026953901e-03, 1.937898046140599e-02, 1.937898046140597e-02, -6.561637112233366e-03, -1.879301600404351e-03, -4.934101429904387e-04, -1.698041572154320e-02, 9.500500569572967e-03, 9.500500569572903e-03, -1.380250976264733e-03, -1.976123254152984e-04, -3.889118937546353e-04, 8.373439398622713e-03, -5.369412377764600e-04, -5.369412377764262e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.882485718531379e-01, -3.882489166815197e-01, -3.882381712982378e-01, -3.882387527866611e-01, -3.881928921265403e-01, -3.881922491737113e-01, -3.883435753130394e-01, -3.883456144633607e-01, -3.882632920020044e-01, -3.882667047484547e-01, -3.882632920020044e-01, -3.882667047484547e-01, -2.374821504913555e-01, -2.374827360603519e-01, -2.375070745082885e-01, -2.375077436849040e-01, -2.382062596567540e-01, -2.382053589171155e-01, -2.382514135847295e-01, -2.382508145642446e-01, -2.381125542553724e-01, -2.380964256019387e-01, -2.381125542553724e-01, -2.380964256019387e-01, -1.623819066139209e-01, -1.618829148698875e-01, -1.625908180645419e-01, -1.619837724568716e-01, -1.550490188505984e-01, -1.556637683716839e-01, -1.549492356895719e-01, -1.547726054353740e-01, -1.525254756542034e-01, -1.580783471741637e-01, -1.525254756542034e-01, -1.580783471741637e-01, -4.202358727732007e-02, -4.247997530073856e-02, -5.108998674767338e-02, -5.133620689079555e-02, -2.126650801754398e-01, -2.042652784960274e-01, 2.889049802931129e-02, 2.852399999101380e-02, 1.746011626919562e-02, 4.479560205478937e-02, 1.746011626919543e-02, 4.479560205478957e-02, -1.356386074417638e-03, -1.240362192795297e-03, -1.412780634402639e-03, -1.275491951867039e-03, 1.330543800821924e-03, 1.544480084286951e-03, -8.407686380268983e-04, -8.604264468730800e-04, -7.505159515240743e-04, -1.485844295568071e-03, -7.505159515240318e-04, -1.485844295567928e-03, -3.241296707025590e-01, -3.242111983567760e-01, -3.240036862569236e-01, -3.240878269210031e-01, -3.240910429885122e-01, -3.241741105857736e-01, -3.239822636274305e-01, -3.240644802740019e-01, -3.240774056147730e-01, -3.241606588712285e-01, -3.240774056147730e-01, -3.241606588712285e-01, -2.014390632572198e-01, -2.014365986314497e-01, -2.068842311148391e-01, -2.068724587982314e-01, -1.960489576215555e-01, -1.961493217832578e-01, -2.012010781137881e-01, -2.012967347407556e-01, -2.069226621352085e-01, -2.067417191584676e-01, -2.069226621352085e-01, -2.067417191584676e-01, -1.751528888879763e-01, -1.754333263565060e-01, -3.084205196178933e-01, -3.083176523034765e-01, -1.294549097577433e-01, -1.260784182986942e-01, -1.475721394514679e-01, -1.434229794630085e-01, -1.878700581455390e-01, -1.938928363662137e-01, -1.878700581455390e-01, -1.938928363662138e-01, 3.323380513549515e-02, 3.305310135812536e-02, 2.344359842536975e-02, 2.321946427005602e-02, 2.969079913459146e-02, 2.887550183976540e-02, -2.767595458231296e-01, -2.768444282566797e-01, 4.076611276435339e-02, 3.899639706568746e-02, 4.076611276435348e-02, 3.899639706568742e-02, -7.022935640665373e-04, -6.669056381783789e-04, -8.441174855666171e-04, -8.269007462284525e-04, -6.804578855393934e-04, -6.296853631254422e-04, 1.337420550441135e-02, 1.335336774017399e-02, -9.602529984669082e-04, -6.361361365111697e-04, -9.602529984669115e-04, -6.361361365111514e-04, -7.375419909181784e-01, -7.347241475498948e-01, -5.080343116780346e-01, -5.062379100266869e-01, -5.793681086344022e-01, -5.772984853086929e-01, -6.480337029553140e-01, -6.456920785705340e-01, -6.127358792508110e-01, -6.105390021737085e-01, -6.127358792508110e-01, -6.105390021737085e-01, -7.045850684090713e-01, -7.022937328297061e-01, -1.587582312755996e-01, -1.584681813194154e-01, -1.949475846457934e-01, -1.944489833089567e-01, -2.703863652166902e-01, -2.696631687864648e-01, -2.257323406488784e-01, -2.251772830086961e-01, -2.257323406488784e-01, -2.251772830086961e-01, -2.670357584181157e-01, -2.667285398605636e-01, -2.332706882835235e-02, -2.353275019891757e-02, -8.530838568473670e-02, -8.529727079584459e-02, -1.200407542288707e-01, -1.196454260941004e-01, -1.198595893959819e-01, -1.198737081990781e-01, -1.198595893959819e-01, -1.198737081990781e-01, -1.372657094187633e-01, -1.368236195525738e-01, 9.901558876344398e-04, 1.018086009401411e-03, 5.687359491319040e-03, 5.744468713781521e-03, -1.103996152133504e-01, -1.092267965459884e-01, 2.666499765113318e-02, 2.591948756932702e-02, 2.666499765113282e-02, 2.591948756932646e-02, -1.724119759371270e-03, -1.631868451432276e-03, -2.593165313876856e-04, -2.585691166092813e-04, -5.262878021796930e-04, -4.853430575950226e-04, 2.514822309848553e-02, 2.494151857092449e-02, -8.768116520696126e-04, -6.050528363146971e-04, -8.768116520695295e-04, -6.050528363146032e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.468140799493126e-10, 4.936281598986253e-10, 2.468140799493126e-10, 2.468282543638124e-10, 4.936565087276248e-10, 2.468282543638124e-10, 2.468736449906508e-10, 4.937472899813017e-10, 2.468736449906508e-10, 2.466638571117712e-10, 4.933277142235425e-10, 2.466638571117712e-10, 2.467762298569748e-10, 4.935524597139496e-10, 2.467762298569748e-10, 2.467762298569748e-10, 4.935524597139496e-10, 2.467762298569748e-10, 2.508148981945210e-06, 5.016297963890420e-06, 2.508148981945210e-06, 2.507851119929777e-06, 5.015702239859552e-06, 2.507851119929777e-06, 2.497997543948687e-06, 4.995995087897374e-06, 2.497997543948687e-06, 2.484237880351714e-06, 4.968475760703428e-06, 2.484237880351714e-06, 2.493955791784193e-06, 4.987911583568384e-06, 2.493955791784193e-06, 2.493955791784193e-06, 4.987911583568384e-06, 2.493955791784193e-06, 8.460437246023187e-03, 1.692087449204637e-02, 8.460437246023187e-03, 8.431305991604946e-03, 1.686261198320989e-02, 8.431305991604946e-03, 7.459853501236088e-03, 1.491970700247218e-02, 7.459853501236088e-03, 7.003503502769633e-03, 1.400700700553927e-02, 7.003503502769633e-03, 7.174943312129305e-03, 1.434988662425861e-02, 7.174943312129305e-03, 7.174943312129305e-03, 1.434988662425861e-02, 7.174943312129305e-03, 9.314984173568602e-01, 1.862996834713721e+00, 9.314984173568602e-01, 9.600690293184357e-01, 1.920138058636871e+00, 9.600690293184357e-01, 6.056602824747197e-03, 1.211320564949439e-02, 6.056602824747197e-03, 9.005947425633680e-01, 1.801189485126737e+00, 9.005947425633680e-01, 6.773653121549869e-01, 1.354730624309972e+00, 6.773653121549869e-01, 6.773653121549885e-01, 1.354730624309976e+00, 6.773653121549885e-01, 4.487719190826273e-02, 8.975438382004845e-02, 4.487719190826273e-02, 5.278015545122410e-02, 1.055603108976775e-01, 5.278015545122410e-02, 2.652473994098192e-01, 5.304947988197488e-01, 2.652473994098192e-01, 1.595052366280483e-02, 3.190104732503818e-02, 1.595052366280483e-02, 2.339776970775130e-02, 4.679553942265654e-02, 2.339776970775130e-02, 2.339776971644394e-02, 4.679553942566814e-02, 2.339776971644394e-02, 6.617845023813329e-07, 1.323569004762666e-06, 6.617845023813329e-07, 6.754422624439429e-07, 1.350884524887886e-06, 6.754422624439429e-07, 6.624854929006000e-07, 1.324970985801200e-06, 6.624854929006000e-07, 6.745349226078822e-07, 1.349069845215764e-06, 6.745349226078822e-07, 6.686239654435163e-07, 1.337247930887033e-06, 6.686239654435163e-07, 6.686239654435163e-07, 1.337247930887033e-06, 6.686239654435163e-07, 1.808739582505738e-05, 3.617479165011477e-05, 1.808739582505738e-05, 1.724223842376303e-05, 3.448447684752607e-05, 1.724223842376303e-05, 1.780762096290626e-05, 3.561524192581252e-05, 1.780762096290626e-05, 1.707851021221582e-05, 3.415702042443165e-05, 1.707851021221582e-05, 1.773254310879801e-05, 3.546508621759602e-05, 1.773254310879801e-05, 1.773254310879801e-05, 3.546508621759602e-05, 1.773254310879801e-05, 7.331607634961958e-03, 1.466321526992392e-02, 7.331607634961958e-03, 1.037386770252295e-02, 2.074773540504590e-02, 1.037386770252295e-02, 1.495312405507498e-02, 2.990624811014997e-02, 1.495312405507498e-02, 1.393381827448614e-02, 2.786763654897227e-02, 1.393381827448614e-02, 6.639270815377568e-03, 1.327854163075514e-02, 6.639270815377568e-03, 6.639270815377570e-03, 1.327854163075514e-02, 6.639270815377570e-03, 5.813174668786115e-01, 1.162634933757228e+00, 5.813174668786115e-01, 4.060022877000802e-01, 8.120045754001601e-01, 4.060022877000802e-01, 5.991044443238400e-01, 1.198208888647680e+00, 5.991044443238400e-01, 6.517489203398488e-05, 1.303497840679698e-04, 6.517489203398488e-05, 1.014624582470354e+00, 2.029249164940704e+00, 1.014624582470354e+00, 1.014624582470355e+00, 2.029249164940706e+00, 1.014624582470355e+00, 1.555453369272249e-02, 3.110906735013140e-02, 1.555453369272249e-02, 1.961159296112319e-02, 3.922318590394075e-02, 1.961159296112319e-02, 1.953370412745258e-01, 3.906740824916111e-01, 1.953370412745258e-01, 6.205365726683175e-01, 1.241073145336632e+00, 6.205365726683175e-01, 7.476254758806254e-02, 1.495250951644470e-01, 7.476254758806254e-02, 7.476254765213922e-02, 1.495250952872124e-01, 7.476254765213922e-02, 1.558764761360484e-01, 3.117529522720969e-01, 1.558764761360484e-01, 6.642485364803312e-02, 1.328497072960662e-01, 6.642485364803312e-02, 8.838975121981735e-02, 1.767795024396347e-01, 8.838975121981735e-02, 1.132670219838990e-01, 2.265340439677979e-01, 1.132670219838990e-01, 9.991081324615229e-02, 1.998216264923046e-01, 9.991081324615229e-02, 9.991081324615229e-02, 1.998216264923046e-01, 9.991081324615229e-02, 1.665470283761081e-01, 3.330940567522163e-01, 1.665470283761081e-01, 1.285946309411210e-02, 2.571892618822420e-02, 1.285946309411210e-02, 9.911516169256718e-03, 1.982303233851344e-02, 9.911516169256718e-03, 1.583930223921498e-02, 3.167860447842995e-02, 1.583930223921498e-02, 1.074833079477491e-02, 2.149666158954982e-02, 1.074833079477491e-02, 1.074833079477491e-02, 2.149666158954982e-02, 1.074833079477491e-02, 6.584785773528045e-03, 1.316957154705609e-02, 6.584785773528045e-03, 2.616504272491950e-01, 5.233008544983896e-01, 2.616504272491950e-01, 2.007512156743408e-01, 4.015024313486815e-01, 2.007512156743408e-01, 1.053911551743936e-01, 2.107823103487872e-01, 1.053911551743936e-01, 1.546697725876626e-01, 3.093395451753251e-01, 1.546697725876626e-01, 1.546697725876628e-01, 3.093395451753256e-01, 1.546697725876628e-01, 2.506598010552688e-02, 5.013196021105376e-02, 2.506598010552688e-02, 2.183749355647738e-01, 4.367498711295559e-01, 2.183749355647738e-01, 3.292326724359521e-01, 6.584653448719410e-01, 3.292326724359521e-01, 1.163486048255774e-01, 2.326972096511548e-01, 1.163486048255774e-01, 1.026451511324861e+00, 2.052903022649721e+00, 1.026451511324861e+00, 1.026451511324843e+00, 2.052903022649684e+00, 1.026451511324843e+00, 5.593366176107025e-02, 1.118673235224350e-01, 5.593366176107025e-02, 2.127302468085564e-02, 4.254604908347920e-02, 2.127302468085564e-02, 2.662130014297831e-02, 5.324260025460240e-02, 2.662130014297831e-02, 9.505118823178217e-01, 1.901023764635644e+00, 9.505118823178217e-01, 9.542630095090385e-02, 1.908526019464289e-01, 9.542630095090385e-02, 9.542630091229683e-02, 1.908526018276630e-01, 9.542630091229683e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.885337734232726e-05, 8.885337734232726e-05, 8.884489813350270e-05, 8.884489813350273e-05, 8.880863871472852e-05, 8.880863871472851e-05, 8.893409870734419e-05, 8.893409870734419e-05, 8.886819304431410e-05, 8.886819304431413e-05, 8.886819304431410e-05, 8.886819304431413e-05, 7.484005291203399e-04, 7.484005291203400e-04, 7.489100008801345e-04, 7.489100008801338e-04, 7.630236801179235e-04, 7.630236801179248e-04, 7.629629539610375e-04, 7.629629539610388e-04, 7.606558072247764e-04, 7.606558072247767e-04, 7.606558072247764e-04, 7.606558072247767e-04, -6.432110530090932e-03, -6.432110530090936e-03, -6.380757952091341e-03, -6.380757952091336e-03, -5.337008417042024e-03, -5.337008417042029e-03, -4.765770554926301e-03, -4.765770554926296e-03, -4.960613533706425e-03, -4.960613533706422e-03, -4.960613533706425e-03, -4.960613533706422e-03, -3.032835743043652e-02, -3.032835743043640e-02, -2.876218572301693e-02, -2.876218572301698e-02, -6.241820355272033e-03, -6.241820355272033e-03, -3.561633652128444e-02, -3.561633652128435e-02, -3.145979689334714e-02, -3.145979689334719e-02, -3.145979689334705e-02, -3.145979689334719e-02, -3.719158241671736e-05, -3.719158241673568e-05, -4.479028815386740e-05, -4.479028815387484e-05, -2.360715797312432e-03, -2.360715797312432e-03, -5.687457697736536e-06, -5.687457697736536e-06, -1.298828484410816e-05, -1.298828484412635e-05, -1.298828484416878e-05, -1.298828484416878e-05, 1.344278551721183e-04, 1.344278551721181e-04, 9.558496791859719e-05, 9.558496791859797e-05, 1.318780346635294e-04, 1.318780346635278e-04, 9.761945400101040e-05, 9.761945400101151e-05, 1.152053385282779e-04, 1.152053385282779e-04, 1.152053385282779e-04, 1.152053385282779e-04, 2.264057224499638e-03, 2.264057224499638e-03, 2.447683779628623e-03, 2.447683779628619e-03, 2.189932278936632e-03, 2.189932278936632e-03, 2.354347900584878e-03, 2.354347900584876e-03, 2.402886126292387e-03, 2.402886126292387e-03, 2.402886126292387e-03, 2.402886126292387e-03, 3.492247097330253e-02, 3.492247097330252e-02, 1.129886552090331e-01, 1.129886552090332e-01, 6.895849115418955e-03, 6.895849115418957e-03, 2.577044623879998e-02, 2.577044623880000e-02, 4.368896487659626e-02, 4.368896487659623e-02, 4.368896487659626e-02, 4.368896487659629e-02, -1.845006014031409e-02, -1.845006014031432e-02, -3.180121141574072e-02, -3.180121141574079e-02, -1.638301940238585e-02, -1.638301940238587e-02, 6.651757588224139e-03, 6.651757588224139e-03, -3.453964452600872e-02, -3.453964452600874e-02, -3.453964452600910e-02, -3.453964452600908e-02, -1.861856947294286e-06, -1.861856947298578e-06, -4.710406322824807e-06, -4.710406322814035e-06, -1.751767883228894e-05, -1.751767883232684e-05, -8.698724766409253e-03, -8.698724766409279e-03, -1.086402148840750e-05, -1.086402148843701e-05, -1.086402148838537e-05, -1.086402148842963e-05, 1.089545040803564e+00, 1.089545040803565e+00, 3.602782387491911e-01, 3.602782387491911e-01, 5.105042928664483e-01, 5.105042928664488e-01, 7.061367505823906e-01, 7.061367505823910e-01, 5.981091881860491e-01, 5.981091881860490e-01, 5.981091881860491e-01, 5.981091881860490e-01, 1.116762656914349e+00, 1.116762656914349e+00, 3.565066711556179e-02, 3.565066711556180e-02, 6.716482014248468e-02, 6.716482014248470e-02, 1.227360331228789e-01, 1.227360331228788e-01, 9.064558007517111e-02, 9.064558007517112e-02, 9.064558007517109e-02, 9.064558007517112e-02, 7.493880442754933e-02, 7.493880442754935e-02, -2.051341621973773e-02, -2.051341621973768e-02, -8.368502822322066e-03, -8.368502822322066e-03, -1.351415905513661e-03, -1.351415905513653e-03, -2.193882439083614e-04, -2.193882439083582e-04, -2.193882439084328e-04, -2.193882439084409e-04, 1.667191952250896e-02, 1.667191952250895e-02, -2.142525662681698e-03, -2.142525662681698e-03, -4.178263746669414e-03, -4.178263746669414e-03, 1.114220608671822e-02, 1.114220608671820e-02, -1.906754632018808e-02, -1.906754632018805e-02, -1.906754632018809e-02, -1.906754632018806e-02, -4.722793046904664e-05, -4.722793046904091e-05, -1.242814633968518e-07, -1.242814634057836e-07, -3.099731525943493e-06, -3.099731525943493e-06, -1.802542484008203e-02, -1.802542484008201e-02, -1.251486595309120e-05, -1.251486595309120e-05, -1.251486595306356e-05, -1.251486595305805e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
