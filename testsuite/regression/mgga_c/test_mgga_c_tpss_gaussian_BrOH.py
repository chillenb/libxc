
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_gaussian_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645987698516499e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -2.471664086075826e-02, -6.686302819127442e-02, -1.182694558286249e-02, -9.938228327804438e-03, -1.075062139038704e-02, -1.187730338883934e-02, -1.187730338883934e-02, -9.456058229044917e-03, -9.971929330358998e-03, -7.129454252820250e-02, -1.657638090659599e-03, -9.602335527087762e-03, -9.602335527087762e-03, -1.562230027674434e-07, -1.912645474228871e-07, -3.206077437882797e-05, -1.898236338981437e-09, -1.907937747524679e-07, -1.907937747478446e-07, -5.017567377917698e-02, -5.028259966277496e-02, -5.018749137792635e-02, -1.224181159734425e-01, -5.022928564511936e-02, -5.022928564511936e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572412e-02, -9.491339721119328e-02, -2.168949185553452e-02, -3.007488696070986e-02, -3.706466464591458e-02, -2.648757104938020e-02, -3.191909938177294e-02, -3.258214547701378e-02, -6.444458984389427e-02, -2.795790560897061e-02, -4.829498269138669e-03, -2.775589238622643e-02, -3.641872289814020e-02, -1.353707881152898e-03, -1.353707881152898e-03, -3.066310498112501e-03, -3.766955018234410e-09, -3.872765874313852e-09, -2.111687625325582e-02, -3.174878197427740e-03, -3.014728172263880e-09, -4.305180333942585e-02, -4.201730482784274e-02, -6.421258200260356e-02, -4.271308871114877e-02, -4.257101960599580e-02, -4.257101960599580e-02, -4.234637976355730e-02, -2.860539071864271e-02, -3.303614232105424e-02, -3.704783562925827e-02, -3.502103314831687e-02, -6.165502636499921e-02, -3.549132749084898e-02, -4.342835275928391e-02, -1.246089130574284e-02, -5.212060951466563e-02, -1.672311726447110e-02, -1.672311726447112e-02, -5.782933926396749e-02, -2.165354427299821e-05, -6.834882074080273e-05, -2.276087158098354e-02, -2.479856847389609e-02, -4.146198471013635e-04, -1.248791003772590e-07, -9.280074730872728e-12, -3.851645471671813e-10, -4.097406049959383e-04, -1.987150754902609e-09, -1.987150762129719e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_gaussian_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747363821491154e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -7.415554790298010e-02, -7.491623656166166e-02, -4.399820846412407e-02, -3.888279790928579e-02, -4.472087346297930e-02, -4.412707061102437e-02, -4.412707061102437e-02, -3.416044792740865e-02, -3.535175526945178e-02, -7.955565354779474e-02, -8.279373607154132e-03, -3.450449798149021e-02, -3.450449798149021e-02, -9.407951542132578e-07, -1.150784130497666e-06, -1.851361790732353e-04, -1.157422665501942e-08, -1.148129123799666e-06, -1.148129123822238e-06, -1.153088519541268e-01, -1.155248176895391e-01, -1.153326789816495e-01, -1.321322029122264e-01, -1.154170473492808e-01, -1.154170473492808e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -6.756091910939446e-02, -6.893878565106393e-02, -7.475184065574947e-02, -6.570794426440493e-02, -6.992148846216947e-02, -7.107566818346372e-02, -7.237723572555273e-02, -3.318915835573125e-02, -2.102110149260529e-02, -3.296452513148780e-02, -8.758313519736197e-02, -6.863441219136670e-03, -6.863441219136670e-03, -3.946287688264066e-03, -2.463869126619444e-08, -2.366910266307223e-08, -2.549362941948338e-02, -4.083422991717209e-03, -1.837927246408287e-08, -8.300500539386266e-02, -7.960274763274897e-02, -7.213338981778680e-02, -5.016868452832054e-02, -8.110458411956278e-02, -8.110458411956278e-02, -8.070009260356373e-02, -6.596452047024981e-02, -6.905215352971736e-02, -7.216402641576565e-02, -7.048446397055724e-02, -6.944209849581726e-02, -7.444576186885246e-02, -5.006348929577377e-02, -4.234561485768188e-02, -5.935291128433449e-02, -5.325366036286025e-02, -5.009945166693869e-02, -6.540488546969517e-02, -1.256372762973666e-04, -3.898959771123451e-04, -5.742815006334171e-02, -2.965891225314009e-02, -2.251371136307125e-03, -7.504528090180160e-07, -5.739743330565793e-11, -2.365398752228901e-09, -2.225694702768512e-03, -1.214141773069828e-08, -1.214141773366932e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.162553267717465e-09, 8.162474015663086e-09, 8.162062103032058e-09, 8.163361094016564e-09, 8.162511960740273e-09, 8.162511960740273e-09, 1.161854977437560e-05, 1.161845223958246e-05, 1.161385941184317e-05, 1.161192563763317e-05, 1.161830163749667e-05, 3.250762677180982e-07, 8.605510380110077e-03, 3.239269265979020e-04, 2.856953440822098e-04, 4.288510568096468e-04, 3.249491969477638e-04, 3.249491969477638e-04, 1.315242040169213e-01, 1.328105684736533e-01, 4.170891588097339e-03, 5.336506469672535e-02, 1.317871705131847e-01, 1.317871705131847e-01, 2.772696921250697e-02, 2.939815326583521e-02, 4.256499058575264e-02, 1.844874113852466e-03, 3.095624389957828e-02, 3.095624390040388e-02, 4.477464188658345e-07, 4.528032617670098e-07, 4.483039284790869e-07, 2.314314444767057e-06, 4.502703312333086e-07, 4.502703312333086e-07, 1.163276101847885e-04, 1.131060842672704e-04, 1.176624195734664e-04, 1.151023132429544e-04, 1.124743009294674e-04, 4.181214680800426e-06, 3.700105479738312e-03, 5.972200949256255e-03, 3.361749886384721e-03, 4.805938005900098e-03, 4.054168074229645e-03, 1.288183904038739e-02, 1.908540893039436e+01, 4.916718358517914e-02, 2.009607341784872e+01, 1.689695915171690e-05, 8.952335886571081e-02, 8.952335886571081e-02, 3.442374708782503e+06, 3.958037559974107e-03, 1.492176460877760e-02, 1.272722169398782e+02, 2.927873997561099e+06, 3.604272560122891e-03, 7.605180703090503e-02, 3.430182179886429e-02, 1.339449623049254e-02, 2.109166108857250e-03, 4.797509848444589e-02, 4.797509848444589e-02, 6.190212657583313e-02, 6.540848399659463e-03, 8.906804194444241e-03, 1.396162412180836e-02, 1.081393774211204e-02, 2.067681986116288e-02, 3.619710619316824e-03, 5.966794092747778e-01, 2.657924128438033e-02, 1.122647789400823e-01, 2.979996528534503e-02, 2.283051107305797e-02, 4.016605326146636e-02, 3.506964964591618e-02, 4.151475489801811e-02, 3.109668805880022e-02, 4.397523244673469e+01, 9.242967061261534e-02, 8.573872134210849e-03, 3.971276876865005e-04, 3.328812527621025e-03, 1.152171019573868e-01, 4.605218230673418e-03, 4.605218222782688e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.067284878542474e-29, -7.668501312672199e-110, -7.669489801275211e-110, -7.664826583215556e-110, -7.668366363888622e-110, -7.668366363888622e-110, -3.085661641892256e-97, -3.087682042644130e-97, -3.147124951309702e-97, -3.119540780783535e-97, -3.085962113613439e-97, 2.546955782957700e-05, -1.403343777751200e-85, 5.747081704964541e-04, 4.883228804837276e-04, 0.000000000000000e+00, 5.768381982415601e-04, 5.768381982415601e-04, 5.453962140277381e-03, 5.682169714288515e-03, -1.723893390067497e-87, 7.987369810503986e-04, 5.518311635470828e-03, 5.518311635470828e-03, 1.447703475931548e-07, 1.772001646637613e-07, 1.955649710973407e-05, 9.885395867602040e-10, 1.806421236952847e-07, 1.806421236768494e-07, -6.737172161389254e-04, -6.842265188986165e-04, -6.748721732429873e-04, -7.191744775989427e-43, -6.789645752079652e-04, -6.789645752079652e-04, -2.645571946976888e-37, -4.335954396719289e-93, -4.338264624443156e-93, -4.333819523876539e-93, -4.363343455235341e-93, 9.850789849306562e-05, -2.499833895740412e-03, -1.444254886756033e-02, -3.144326224804542e-04, -4.778543387181471e-03, -4.992165125303016e-03, -5.942791306886710e-83, -1.673231609154183e-73, 2.083738663605943e-03, -2.467853802958562e-73, -6.016679984641983e-04, 8.135139146990567e-04, 8.135139146990567e-04, -4.479799237794237e-58, 0.000000000000000e+00, 4.427065241135634e-09, -4.154567155014166e-71, -2.926671843261956e-58, 1.958634258262332e-09, -2.531750685408330e-01, -1.065499489580498e-01, -1.336038779463092e-80, 0.000000000000000e+00, -1.546881187203698e-01, -1.546881187203698e-01, -1.840081024084453e-01, -2.246541642576986e-03, -8.963464925319430e-03, -2.468903630819986e-02, -1.478690677715839e-02, -1.222636262049002e-81, -8.197875411773713e-03, -7.358363442668816e-78, 3.396741258763108e-03, -6.722275218462274e-80, 0.000000000000000e+00, 3.302012032091206e-03, -1.566986565936122e-81, 1.270136491856854e-05, 3.836009993162578e-05, 0.000000000000000e+00, -4.104381022816435e-72, 2.747675264741387e-04, 7.311894656733513e-08, 5.214579131017758e-12, 3.182767673040123e-10, 2.969921077636463e-04, 1.511523508177373e-09, 1.511523519583038e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
