
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_gaussian_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.771215553184118e-02, -4.771262749323779e-02, -4.771350003963339e-02, -4.770575497136478e-02, -4.771241527194013e-02, -4.771241527194013e-02, -4.179967940051876e-02, -4.180369248189562e-02, -4.191437217580977e-02, -4.172769108922844e-02, -4.180172637307553e-02, -4.180172637307553e-02, -2.632589739142332e-02, -2.611361951682544e-02, -2.067100459929687e-02, -2.102058062995060e-02, -2.624940434640813e-02, -2.624940434640813e-02, -1.042361373188563e-02, -1.111139573067334e-02, -3.295192800877945e-02, -2.714238977322009e-03, -1.063259713629048e-02, -1.063259713629048e-02, -1.611256049715068e-07, -1.988916529454487e-07, -3.962951732329460e-05, -3.482867072576251e-09, -1.973646176322320e-07, -1.973646176322319e-07, -5.044894911677926e-02, -5.055590345599920e-02, -5.045732010765888e-02, -5.054059809797574e-02, -5.050724127566211e-02, -5.050724127566211e-02, -2.281528576860507e-02, -2.330245877624290e-02, -2.225131053104107e-02, -2.263215525108005e-02, -2.389936001364429e-02, -2.389936001364429e-02, -3.858571430191603e-02, -5.568384490289827e-02, -3.746224057073263e-02, -5.059009312959902e-02, -4.059372290835005e-02, -4.059372290835005e-02, -7.486192054378644e-04, -5.265187498112292e-03, -8.238603386317861e-04, -7.155575267105026e-02, -1.663743098632511e-03, -1.663743098632511e-03, -3.294105367177753e-09, -5.950850506407897e-09, -4.698024354076767e-09, -1.568565412014707e-04, -5.579305792347349e-09, -5.579305792349707e-09, -5.774696688652178e-02, -4.922877646477136e-02, -5.147075992502889e-02, -5.372456603794021e-02, -5.252991708321230e-02, -5.252991708321231e-02, -6.087967883655982e-02, -2.951229912330331e-02, -3.488026425289609e-02, -4.089649356991593e-02, -3.776221599536443e-02, -3.776221599536442e-02, -5.587120038564732e-02, -8.902165895565129e-03, -1.384319122275759e-02, -2.525017305588320e-02, -1.926445620881971e-02, -1.926445620881972e-02, -2.817481237771805e-02, -2.443213257553777e-05, -8.864607013387194e-05, -2.951107861605370e-02, -5.290640811954382e-04, -5.290640811954406e-04, -2.203359630840338e-07, -2.195546029551763e-11, -4.428715770724734e-10, -5.330195615315209e-04, -3.809430936737154e-09, -3.809430942164626e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_gaussian_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.133309359072640e-01, -1.133317487484501e-01, -1.133334984168488e-01, -1.133201726429302e-01, -1.133313809512378e-01, -1.133313809512378e-01, -1.063892852261781e-01, -1.063935024940569e-01, -1.065061614266124e-01, -1.062597964698249e-01, -1.063917998082980e-01, -1.063917998082980e-01, -7.549863244817036e-02, -7.521121378560604e-02, -6.660088984877448e-02, -6.706524499794962e-02, -7.539515966739002e-02, -7.539515966739002e-02, -3.681485148709649e-02, -3.834874561280049e-02, -8.587288236601556e-02, -1.331252634288007e-02, -3.729568314606532e-02, -3.729568314606532e-02, -9.725750725091217e-07, -1.200190897810234e-06, -2.321205030832727e-04, -2.193335353032069e-08, -1.190697484854455e-06, -1.190697484854455e-06, -1.155616326421530e-01, -1.157756629661167e-01, -1.155820372344349e-01, -1.157485147336650e-01, -1.156731850445249e-01, -1.156731850445249e-01, -7.093794694943192e-02, -7.159093364690503e-02, -6.980324884098552e-02, -7.032325195945315e-02, -7.285422080802140e-02, -7.285422080802140e-02, -7.934044595962772e-02, -8.238288817322703e-02, -7.930911213280280e-02, -8.160344160216357e-02, -8.017329026956971e-02, -8.017329026956971e-02, -4.048179132036684e-03, -2.273951413807819e-02, -4.428430124787853e-03, -1.174657104299852e-01, -8.431959219905362e-03, -8.431959219905362e-03, -2.046486288910387e-08, -3.719959045667533e-08, -2.907040092915283e-08, -9.119580956745950e-04, -3.514164986662950e-08, -3.514164985864969e-08, -7.813513619716139e-02, -8.038272510609513e-02, -8.046689981916158e-02, -8.004404364069123e-02, -8.032948383990786e-02, -8.032948383990787e-02, -7.429474696232929e-02, -6.727078122761965e-02, -7.118447955137605e-02, -7.523399077994671e-02, -7.322231573589387e-02, -7.322231573589383e-02, -8.433097854839679e-02, -3.393156303996742e-02, -4.578571112118993e-02, -6.340057089949117e-02, -5.506004030635568e-02, -5.506004030635566e-02, -6.790084963983342e-02, -1.430094104113191e-04, -5.138029096695008e-04, -6.526113726770406e-02, -2.898861035437911e-03, -2.898861035437895e-03, -1.368328536805411e-06, -1.409123420673517e-10, -2.744175588807312e-09, -2.922418651133205e-03, -2.406698368562976e-08, -2.406698369437314e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.296937143188989e-10, 2.297007075002672e-10, 2.297248343156093e-10, 2.296111724145574e-10, 2.296974524972103e-10, 2.296974524972103e-10, 1.017940269390932e-06, 1.018110561057377e-06, 1.022553333951160e-06, 1.013114119060426e-06, 1.018011002938827e-06, 1.018011002938827e-06, 1.605471918875386e-03, 1.592239788673942e-03, 1.241079666062411e-03, 1.210772911193449e-03, 1.600723890337423e-03, 1.600723890337423e-03, 1.666003616838589e-01, 1.728752444234366e-01, 9.971698569577071e-04, 1.415289990870997e-01, 1.687952891852994e-01, 1.687952891852994e-01, 2.945700904081423e-02, 3.173799711124693e-02, 6.464241126680828e-02, 5.520326047186634e-03, 3.307993589537751e-02, 3.307993589537751e-02, 4.476880361325200e-07, 4.527299036832785e-07, 4.482443154120076e-07, 4.521614883884112e-07, 4.502038053612486e-07, 4.502038053612486e-07, 4.979918907166534e-06, 4.958434628322179e-06, 4.811137619373319e-06, 4.795202348134045e-06, 5.192502609487780e-06, 5.192502609487780e-06, 6.001705775295136e-03, 9.037280523755404e-03, 7.191950970022996e-03, 1.090050050101218e-02, 5.791280926075447e-03, 5.791280926075447e-03, 9.050056344684716e-02, 5.974471037920252e-02, 1.113179725302129e-01, 6.220044746552933e-05, 1.373137426988869e-01, 1.373137426988869e-01, 5.688867990523090e-03, 7.086038897231633e-03, 2.144860385639425e-02, 1.039364658650048e-01, 1.094604156836049e-02, 1.094604156882771e-02, 4.726960579947865e-02, 3.076254823990517e-02, 3.660176091805153e-02, 4.181741633741849e-02, 3.915751435792750e-02, 3.915751435792750e-02, 2.750818464520338e-02, 6.871897196197313e-03, 9.375880706380747e-03, 1.436812748207019e-02, 1.135168828351359e-02, 1.135168828351358e-02, 6.876459488667523e-03, 3.992465746411968e-02, 3.434558842330616e-02, 3.002614786389224e-02, 3.240932278032362e-02, 3.240932278032362e-02, 1.005122107879655e-02, 4.461955114952090e-02, 6.927047035495036e-02, 5.419904409229277e-02, 1.509097194736163e-01, 1.509097194736156e-01, 2.436448028936132e-02, 1.779728221854268e-03, 4.326069242891089e-03, 1.951884033851456e-01, 1.480696454794510e-02, 1.480696454201598e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.476558676889609e-05, -1.476660711438872e-05, -1.477226791976431e-05, -1.475574750998080e-05, -1.476611292244762e-05, -1.476611292244762e-05, 4.901952246455667e-06, 4.897114504832879e-06, 4.758628154405690e-06, 4.956333617440923e-06, 4.899650954608473e-06, 4.899650954608473e-06, 1.218195557171167e-04, 1.236303933404344e-04, 1.676332509972834e-04, 1.908538229737149e-04, 1.224989177465324e-04, 1.224989177465324e-04, 4.801412352291601e-03, 4.883102789047826e-03, 1.243153661501160e-05, 6.661430296606824e-04, 4.815942366585850e-03, 4.815942366585850e-03, 1.447515224074026e-07, 1.771684180530659e-07, 1.938706428462454e-05, 9.881174789742826e-10, 1.806140420739199e-07, 1.806140420739197e-07, -6.634349356328333e-04, -6.738433666767404e-04, -6.647077812134414e-04, -6.727886780829639e-04, -6.684567430722808e-04, -6.684567430722808e-04, 9.647311596449064e-05, 9.517848125658049e-05, 9.847608097943148e-05, 9.778855996053396e-05, 9.260749374416456e-05, 9.260749374416456e-05, -1.174580255376596e-03, -1.684727051685824e-03, -3.720390049977643e-04, -8.413874224689924e-04, -2.274628680433064e-03, -2.274628680433064e-03, 2.673893766864183e-04, 1.968663520032253e-03, 3.171121618580605e-04, -5.196213355615103e-05, 7.648936066368192e-04, 7.648936066368192e-04, 1.570292015194952e-09, 2.219768543950422e-09, 4.426203387046733e-09, 4.687331752477223e-05, 1.957564993244925e-09, 1.957564993251754e-09, -6.345302042883785e-02, -6.325771548903961e-02, -7.059775672054604e-02, -7.343452063671872e-02, -7.253943560845622e-02, -7.253943560845626e-02, -1.047089814344597e-02, -1.865360778646054e-03, -7.133045854583407e-03, -1.710229682867647e-02, -1.101386533466753e-02, -1.101386533466752e-02, -9.164759149760493e-04, 2.808750333206291e-03, 2.917416258357414e-03, 1.085191935806196e-03, 2.463407549967669e-03, 2.463407549967675e-03, 3.974166361269322e-04, 1.265027661013812e-05, 3.777751547748062e-05, -8.970545705718665e-05, 2.647563818212738e-04, 2.647563818212803e-04, 7.295652873961112e-08, 5.214173028911180e-12, 3.182602537056734e-10, 2.851924920704635e-04, 1.510755637489377e-09, 1.510755642719900e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
