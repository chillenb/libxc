
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_hx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.254585836638470e-01, -1.254584408880331e-01, -1.254579128841386e-01, -1.254600348135009e-01, -1.254588995795257e-01, -1.254588995795257e-01, -1.124127258569431e-01, -1.124072978483864e-01, -1.122730339434510e-01, -1.123280016198008e-01, -1.123189803005225e-01, 4.301141284236574e-02, -1.610327900581269e-01, 4.313296445415205e-02, 3.620064454269043e-02, 3.949737889139737e-02, 3.877309868576784e-02, 3.877309868576784e-02, 1.946647554382976e-03, 3.366856499903205e-03, -2.633754944747337e-01, -5.474546478405668e-02, -2.086435325377504e-02, -2.086435325377540e-02, -2.628234632168325e-02, -2.743710130564136e-02, -9.811376401796873e-02, -1.638888724808381e-02, -1.999198436142192e-02, -1.999198436142192e-02, -2.009492060474527e-01, -1.960033244870094e-01, -2.006705183778549e-01, -1.225902643445634e-01, -1.984995813895520e-01, -1.984995813895520e-01, -1.088359512714535e-01, -1.048221635629602e-01, -1.126748081119694e-01, -1.083354928092388e-01, -1.050175032457621e-01, 5.418439881956016e-02, -2.226364641659613e-02, -1.002456493210343e-01, -1.873416491029291e-03, -2.334917303702946e-02, -3.101292585310719e-02, -5.909403142279162e-02, -4.376082599963161e-02, -1.909214835257076e-02, -7.448299571713492e-03, -4.751097997986710e-02, -7.543213975922637e-02, -7.543213975922643e-02, 3.523588565376606e-02, -1.606642328772553e-02, -1.266270569266289e-02, 1.303539438968245e-01, 4.029151986558550e-02, -1.494156257919512e-02, -3.082302901928761e-02, 2.178582871687596e-02, -1.986073463978131e-01, 1.656600276162983e-02, 2.531083959368278e-02, 2.531083959368278e-02, -1.043281593087122e-02, -1.086266004085566e-02, -3.667318896597070e-02, -9.323887967883947e-02, -6.461506204757574e-02, -4.891579580737251e-02, -7.946802211490503e-02, -1.537867360348936e-01, 1.583671504187706e-02, -6.101952743244955e-02, 2.371833811684616e-02, 2.371833811684607e-02, -5.833627617583502e-02, -9.557913625384362e-02, -1.132868724023689e-01, -2.614432456105145e-03, 2.510015157379828e-03, -1.137899121970587e-01, -3.500564426862103e-02, -4.844826830971147e-03, -9.588179344613467e-03, -1.138712320780389e-01, -1.394876808562052e-02, -1.394876808562006e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_hx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.220242411418984e-01, -1.220417379079455e-01, -1.221125546715708e-01, -1.218536688818778e-01, -1.219902162640039e-01, -1.219902162640039e-01, -8.704257762211787e-02, -8.718765795575655e-02, -9.093088925894401e-02, -8.943903898866078e-02, -8.959805322689290e-02, -2.341339716626423e-01, 1.108886148095945e-01, 6.570251497314651e-02, 8.144917135947209e-02, 7.644115309659352e-02, 7.792957858433561e-02, 7.792957858433561e-02, 1.506367770376748e-02, 1.326472757957807e-02, 3.228594579837905e-02, 9.648295903822632e-02, 7.036931303724812e-02, 7.036931303723910e-02, -3.361910371487025e-02, -3.505527571139727e-02, -1.116293523423782e-01, -2.117371031897549e-02, -2.573053794270466e-02, -2.573053794270466e-02, 8.143957368998165e-01, 8.586393932841375e-01, 8.169363861558263e-01, -4.461376396703964e-01, 8.365365473587429e-01, 8.365365473587429e-01, 7.016424633544818e-02, 3.661936561673183e-02, 9.641596364594109e-02, 6.630499660131435e-02, 3.851028066742248e-02, -1.950734916220065e-01, -1.613740090747873e-01, -1.989895721867418e-01, -1.364998386933836e-01, -1.638009964324367e-01, -2.079192537300067e-01, -1.796005671036439e-02, -4.671030623593606e-01, 7.532045419015862e-02, -4.312632673111645e-01, -4.262834583971045e-01, 7.089069684967260e-02, 7.089069684969766e-02, 4.559886358710113e-02, -2.076479918917355e-02, -1.641703229916755e-02, -1.530008230317652e-01, 5.183039874648585e-02, -1.932730506233444e-02, -4.714601632492120e-01, 3.927314902703986e-02, -3.806093181160797e-01, -3.225701659155382e-01, -2.400569233807407e-01, -2.400569233807407e-01, -4.193700777759132e-01, -1.196196117420404e-01, -2.206128030252102e-01, -1.500257214157315e-01, -2.815828405389880e-01, -2.290114463815729e-02, -3.243782290481628e-01, 1.007721996955301e-02, 2.533982267047730e-02, 4.501838319220949e-02, -2.323137516799425e-02, -2.323137516799397e-02, -5.946589179824920e-02, -1.097444661295067e-01, -1.189117615182722e-01, -1.225775417494765e-01, -3.869230830614939e-01, -4.411239373239437e-02, -4.446000021775511e-02, -6.352358630914929e-03, -1.248237983617237e-02, -5.420811742688667e-02, -1.806104656230612e-02, -1.806104656230208e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.482421757638923e-08, -1.482542324390069e-08, -1.483017903306231e-08, -1.481233914303461e-08, -1.482177504370460e-08, -1.482177504370460e-08, 2.041871651809161e-05, 2.041396204904618e-05, 2.028867184539530e-05, 2.033159498185909e-05, 2.033542219139113e-05, 6.913293316038598e-07, 3.012042314211349e-02, 1.470333479245595e-03, 1.345962089350112e-03, 1.438417718670074e-03, 1.416722957491115e-03, 1.416722957491115e-03, 5.641278024236099e-01, 5.724158754775447e-01, 1.930020056181145e-02, 2.893419933370994e-01, 4.772168384590738e-01, 4.772168384590710e-01, -1.061518759297710e-01, -1.223237389224310e-01, -3.737024059800635e-01, -2.743427446821163e-02, -6.558302137878175e-02, -6.558302137878175e-02, -3.512821160637455e-07, -3.260803897814579e-07, -3.498810231995455e-07, -2.670737034402721e-06, -3.388736865325519e-07, -3.388736865325519e-07, 2.535659313759069e-04, 2.346823833169412e-04, 2.692517975979565e-04, 2.510209250809727e-04, 2.359622643948747e-04, 1.074168372401195e-05, 4.805365528986884e-03, -9.545309497771262e-03, 6.568110957678527e-03, 5.673375287856629e-03, 3.666866708037239e-03, 1.192021841850179e-02, -6.834381506976574e+01, 2.328137717996485e-01, -1.498221224791978e+02, 1.056980486836122e-05, 2.713972696678402e-01, 2.713972696678421e-01, -8.402243586803656e+08, -2.196035298840184e-02, -3.204004608569924e-01, -2.020013258109005e+03, -4.517459684281852e+08, -1.044669807737785e-01, 3.163473987297822e-01, 1.812241662574438e-01, 3.551383660183127e-01, 3.198492634174159e-01, 2.943076740762564e-01, 2.943076740762564e-01, 3.735199800094668e-01, 1.118730117264514e-02, 5.372750952337466e-03, -2.195931865422391e-02, -5.878108563602870e-03, -1.416368513996813e-02, -3.100796809938386e-03, 3.095671167763934e+00, 1.206690683682255e-01, 2.609750201800887e-01, 9.056137974890938e-02, 9.056137974890945e-02, 6.814422630539817e-02, -3.689215650689024e-01, -3.719126385748372e-01, 6.210687345531957e-02, -3.089466987568082e+02, -3.638936682091977e-01, -5.988577262836831e-02, -2.975567541679693e-03, -5.390856516496400e-02, -4.694856109324442e-01, -1.559121506071681e-01, -1.559121507240734e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.544213050567336e-06, -6.534029257146777e-06, -6.492808983795563e-06, -6.643475971237820e-06, -6.564016624013616e-06, -6.564016624013616e-06, -2.632486069447949e-04, -2.621810437425910e-04, -2.345141112711072e-04, -2.455434318564816e-04, -2.443977645481079e-04, 1.409242190994767e-03, -2.780168750793332e-02, -1.243946848845037e-02, -1.264918954125696e-02, -1.291348661784207e-02, -1.288347699584999e-02, -1.288347699584999e-02, -8.320363915051206e-02, -8.462869863638484e-02, -1.323961533358645e-02, -1.161615885924312e-01, -1.079929805052006e-01, -1.079929805051904e-01, -5.676056088315475e-05, -6.855630701026851e-05, -4.848381482053607e-03, -8.556241539584133e-06, -2.303992659314329e-05, -2.303992659314329e-05, -1.366791379406908e-02, -1.443232434131059e-02, -1.371152229132418e-02, 4.553504961435032e-03, -1.404891293037124e-02, -1.404891293037124e-02, -3.651158974638598e-03, -2.999535917686071e-03, -4.146044295110940e-03, -3.575230976283122e-03, -3.038196339404497e-03, 3.026497100737061e-03, 3.570764741351430e-02, 1.195378245994554e-01, 2.222811944890883e-02, 4.082861711551589e-02, 6.200159345594317e-02, -2.256353728678256e-02, 2.265798781530210e-01, -8.409596983614091e-02, 2.343235007903555e-01, 1.614489005074505e-02, -1.226876252502923e-01, -1.226876252503086e-01, 6.144262109635624e-05, -7.082600557300543e-06, -2.646825832507222e-05, 1.933308964788738e-01, 3.798494128588269e-04, -1.738145060636107e-05, 3.188885672239608e-01, -8.932978174698504e-01, 4.068113023956300e-01, -4.666798392924378e-01, -6.489418186066790e-01, -6.489418186066790e-01, -5.992126056062637e-02, 2.108919008183112e-02, 1.017692949508057e-01, 1.273647204683495e-01, 1.876168332279273e-01, -2.577885298779548e-02, 1.451918835950359e-01, -1.003715096796484e-01, -5.741906494824661e-02, -6.851501056237354e-02, -3.084755886596963e-02, -3.084755886596910e-02, -3.017624748410504e-03, -4.308093270284619e-03, -9.752375816817781e-03, 4.784512076518314e-02, 2.833801350164934e-01, -6.376195126126712e-02, -7.241219000856824e-05, -1.860908778504221e-07, -4.663012507802736e-06, -5.892298210413476e-02, -1.980372789480457e-05, -1.980372791556805e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
