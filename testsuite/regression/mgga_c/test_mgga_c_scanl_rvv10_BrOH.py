
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scanl_rvv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.659082740693128e-02, -2.659086331057439e-02, -2.659097286189530e-02, -2.659038592388005e-02, -2.659084676445805e-02, -2.659084676445805e-02, -4.881513802855296e-02, -4.881095419868606e-02, -4.866327166262031e-02, -4.844879371906501e-02, -4.881553503720416e-02, -4.881553503720416e-02, -3.940068602517129e-02, -3.926649142446755e-02, -3.568395742912678e-02, -3.534213464779005e-02, -3.935096056434416e-02, -3.935096056434416e-02, -1.938557663366108e-02, -1.989000181650658e-02, -4.950043525290139e-02, -1.635388466233927e-02, -1.956109278290912e-02, -1.956109278290911e-02, -1.364187788948869e-03, -1.441008543047607e-03, -5.887761249834106e-03, -5.330900400798301e-04, -1.430388713824784e-03, -1.430388713824784e-03, -8.715228216744798e-02, -7.676189697178279e-02, -2.639384237738820e-02, -8.575971291177169e-02, -2.639717595938474e-02, -6.681410031025950e-02, -2.271619983150309e-02, -4.163627723802730e-02, -3.227130708091763e-02, -3.332925944077759e-02, -3.443207706315939e-02, -2.286337899670557e-02, -5.475775430817715e-02, -7.554739620324984e-02, -5.461371260448573e-02, -5.299978028176513e-02, -4.653779534755734e-02, -4.785785530538904e-02, -8.599303654550298e-03, -2.095953262417630e-02, -8.677466440618719e-03, -7.452501510207232e-02, -1.006955594532407e-02, -1.006955594532407e-02, -5.013123624275397e-04, -4.983083834428897e-04, -3.910017614442776e-04, -5.820612251953473e-03, -5.627994993594843e-04, -3.158784156523648e-04, -6.165350399930637e-02, -5.726382455049227e-02, -5.872103997889894e-02, -6.000249114892153e-02, -5.930435983888362e-02, -5.931561757424467e-02, -6.175366000582690e-02, -2.733736863471872e-02, -5.372227892629224e-02, -2.290701647193450e-02, -4.596530887533921e-02, -5.414571142888590e-02, -7.118263406039775e-02, -1.548757699003413e-02, -1.901389696930178e-02, -1.993788155500477e-02, -3.363423223057256e-02, -3.093495485776437e-02, -3.349143805219558e-02, -5.268719834116996e-03, -7.245943726264402e-03, -3.543817669005640e-02, -7.587315964362880e-03, -7.587315964362881e-03, -9.804170761928269e-04, -1.020520202313869e-04, -1.441477688361832e-04, -7.465295616018219e-03, -2.644598060350745e-04, -2.644598060351528e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scanl_rvv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031682398627375e-02, -3.031678506180543e-02, -3.031666899588880e-02, -3.031730523104572e-02, -3.031680297750140e-02, -3.031680297750140e-02, -1.291618333678727e-01, -1.291742407226046e-01, -1.295346016581325e-01, -1.295231359227619e-01, -1.291645564740386e-01, -1.291645564740386e-01, -7.206800068719664e-02, -7.192013949593462e-02, -6.766677463948818e-02, -6.743259242425126e-02, -7.201345039850092e-02, -7.201345039850092e-02, -7.435536929720821e-02, -7.450391590360222e-02, -8.723717590907340e-02, -3.177875856575348e-02, -7.446758883254948e-02, -7.446758883254945e-02, -2.589773654656863e-03, -2.733689039949696e-03, -1.106044863042352e-02, -1.022520354916715e-03, -2.714077975159290e-03, -2.714077975159290e-03, -1.712391321861367e-01, -1.298773778306673e-01, -2.931807270267428e-02, -1.715274155276788e-01, -2.931401320337139e-02, -1.190169178842962e-01, -3.062311334016213e-02, -8.090261459851585e-02, -1.099005840145323e-01, -1.123651877740480e-01, -1.136896199198454e-01, -3.055987235585953e-02, -1.002330645882734e-01, -1.055951934212292e-01, -9.957976092193878e-02, -7.799546361792749e-02, -7.710360821429844e-02, -7.667422134735148e-02, -1.531425326278704e-02, -4.050271866781096e-02, -1.542424372499093e-02, -1.106476512813210e-01, -1.751274350513695e-02, -1.751274350513695e-02, -9.499230839843246e-04, -9.620698089383006e-04, -7.586889313928736e-04, -1.067909622131340e-02, -1.073756383514325e-03, -6.195637279739260e-04, -7.506897084148982e-02, -7.794632195838407e-02, -7.725523353245459e-02, -7.657856027212663e-02, -7.686065916947328e-02, -7.689434057474406e-02, -7.333664420252402e-02, -7.612366410888033e-02, -9.747996887314377e-02, -2.620506859827654e-02, -7.387658344124978e-02, -9.734939574690785e-02, -1.138510918073122e-01, -2.414588876524435e-02, -3.110797493423248e-02, -2.607353127730149e-02, -6.149505448876549e-02, -5.657567214627170e-02, -9.216817703778710e-02, -9.757352500406546e-03, -1.354486704934005e-02, -7.013265780435635e-02, -1.365504547593789e-02, -1.365504547593790e-02, -1.892818300294232e-03, -1.904640332450811e-04, -2.845649875827407e-04, -1.344403026451668e-02, -5.198476088402896e-04, -5.198476088402812e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.227477938632855e-12, 9.227414785312950e-12, 9.226980652198808e-12, 9.228017848423237e-12, 9.227445907623422e-12, 9.227445907623422e-12, 1.883496528592153e-06, 1.884046088473385e-06, 1.899432661768105e-06, 1.891447039027691e-06, 1.883614914538197e-06, 1.883614914538197e-06, 1.474419543216880e-03, 1.465117444072496e-03, 1.225078172233830e-03, 1.183889780844024e-03, 1.471059163372609e-03, 1.471059163372609e-03, 8.534902630982333e-01, 8.404734059456649e-01, 8.917095910349796e-04, 2.756442527003904e-01, 8.512255597630192e-01, 8.512255597630185e-01, 4.102013321595354e+01, 3.782831129886389e+01, 1.825471224255048e+00, 1.189329253238633e+02, 3.948480842534838e+01, 3.948480842534838e+01, 3.148321555142531e-07, 2.957937599929956e-07, 1.099479090294441e-08, 3.025442781191918e-07, 1.099631293094036e-08, 2.470346608606981e-07, 1.045748493634544e-06, 5.925593043065850e-06, 1.538999948051683e-05, 1.566691710637944e-05, 1.621849187141007e-05, 8.609169858937787e-07, 4.933307488798353e-03, 9.460370895730472e-03, 6.359472495196061e-03, 7.805634990855877e-03, 3.773719036887731e-03, 4.857580946116128e-03, 1.823855058106150e-01, 7.330369252547612e-02, 2.059773000403431e-01, 5.474771196637915e-05, 1.531395132854142e-01, 1.531395132854142e-01, 1.150057297377008e+02, 8.717770281275902e+01, 2.754395064808249e+02, 6.194306534411208e-01, 1.484909195518280e+02, 8.864154257125233e+01, 1.076566517728451e-02, 8.510476170578084e-03, 9.212895117455377e-03, 9.850006526947213e-03, 9.512237594019516e-03, 9.513098060892488e-03, 1.286168391547377e-02, 1.101443088332229e-02, 7.750324715202173e-03, 6.962818768783712e-04, 7.922714402431166e-03, 7.369671981405464e-03, 6.178337142276390e-03, 1.501183142620778e-02, 2.339212339383097e-02, 4.292123838352385e-03, 3.214968623519918e-02, 3.531608985980239e-02, 2.539133528592393e-02, 1.602734562426988e+00, 1.031432952149059e+00, 7.509897123871739e-02, 3.807833395564141e-01, 3.807833395564145e-01, 1.594447457503350e+01, 7.136422351622639e+02, 2.170484627220637e+02, 4.773720796616021e-01, 1.459604100607137e+02, 1.459604100602244e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.549126707130503e-04, -1.549879530241720e-04, -1.572288471966833e-04, -1.572938583306988e-04, -1.549267662891045e-04, -1.549267662891045e-04, -3.382426787174874e-04, -3.364353565976002e-04, -2.912993310579988e-04, -2.973718084793646e-04, -3.376211671871909e-04, -3.376211671871909e-04, -1.367462607293529e-02, -1.393328313482849e-02, -1.334766401265137e-04, -5.482068195387824e-04, -1.377733846088654e-02, -1.377733846088654e-02, 8.206229811593748e-07, 8.188105623882409e-07, -3.643035051342826e-05, 5.260503696515085e-07, 8.330905812464480e-07, 8.330905812464480e-07, 3.593007676189032e-07, -9.149396653831036e-06, 0.000000000000000e+00, 5.248794112433107e-07, 0.000000000000000e+00, -1.060887438066774e-05, 6.133755541152861e-08, -2.805068665799979e-05, -2.770375871559608e-04, -2.842340283166635e-04, -2.957661389743108e-04, 0.000000000000000e+00, 2.043259635953947e-05, -2.643573242252938e-05, 2.141247749742368e-05, -1.018583489839317e-05, 0.000000000000000e+00, -5.862348640588867e-04, 0.000000000000000e+00, 8.535608381654457e-06, 0.000000000000000e+00, -7.239471818092685e-05, 0.000000000000000e+00, 0.000000000000000e+00, 6.913284040045986e-07, 9.368155270857710e-12, 2.033804613616863e-11, 0.000000000000000e+00, 9.591595577715447e-07, 0.000000000000000e+00, 2.418151545118636e-12, 2.049660743260524e-11, 5.316184288076050e-14, 6.770180413921282e-12, 3.502089840902115e-11, 1.472946187845750e-14, 1.054523805911157e-13, -3.341657246340903e-03, 1.762382846057349e-05, 0.000000000000000e+00, -6.505224855278737e-04, 2.299877104423664e-05, 2.876064440619346e-05, 0.000000000000000e+00, 6.169670158253226e-06, 0.000000000000000e+00, -2.801063757791990e-04, -9.263307527022063e-04, -5.446485422327872e-03, 3.584561445053353e-06, -6.870726695114217e-06, -4.454821455620510e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 8.707116316999216e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
