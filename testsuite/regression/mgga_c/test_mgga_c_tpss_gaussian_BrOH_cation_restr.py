
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_gaussian_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504592285e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -2.478150893782137e-02, -6.701411225019485e-02, -1.227136329230564e-02, -1.032011748948810e-02, -1.119743640108948e-02, -1.099295440941585e-02, -1.099295440941585e-02, -7.056303540355562e-03, -7.546883458177605e-03, -7.077000961998538e-02, -1.748390759698937e-03, -3.372544663347934e-03, -3.372544663347932e-03, -6.889590795874224e-09, -9.090689137690286e-09, -8.772591533825952e-06, -3.929089282723716e-10, -1.591144503080646e-09, -1.591144503080646e-09, -5.018821011232893e-02, -5.029856243514100e-02, -5.019455425306876e-02, -1.224312405851439e-01, -5.024347230975188e-02, -5.024347230975188e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214133e-02, -9.474413043394064e-02, -9.489275971457944e-02, -2.158342720095557e-02, -3.071066970500551e-02, -3.775355875210750e-02, -2.564587259187513e-02, -3.073194264710571e-02, -3.205743172949977e-02, -6.418936514394004e-02, -2.699430518029856e-02, -3.584783533437208e-03, -2.581454244194446e-02, -3.648545471563606e-02, -1.088769819776734e-03, -1.088769819776739e-03, -1.873262677774475e-03, -3.122849705067220e-10, -7.134750873897722e-10, -2.031142249656109e-02, -2.148658723728447e-03, -6.588298628322547e-10, -4.277380141558362e-02, -4.159703317880189e-02, -6.383636564200691e-02, -4.239481197442551e-02, -4.222524564251456e-02, -4.222524564251456e-02, -4.230757965828491e-02, -2.729782468160466e-02, -3.207882921757858e-02, -3.673587737881660e-02, -3.438905583193953e-02, -6.128134397443009e-02, -3.632794311321181e-02, -4.238697070491520e-02, -1.046765115260650e-02, -5.192846777352227e-02, -1.523644329031829e-02, -1.523644329031829e-02, -5.782021926348150e-02, -7.385024230703200e-06, -2.418779767988835e-05, -2.328107314880865e-02, -2.356177787973960e-02, -2.591515711780367e-04, -1.598637436045670e-08, -7.105969477395730e-13, -7.134681205714348e-11, -2.185223761740053e-04, -6.515134985932287e-10, -6.515135046004281e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_gaussian_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672968115e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -7.426255595142656e-02, -7.507468276142483e-02, -4.512374569391302e-02, -4.347934069552147e-02, -4.234652277731560e-02, -4.180223324438907e-02, -4.180223324438907e-02, -2.792138517870424e-02, -2.931451859299603e-02, -7.900736698061860e-02, -8.686806732639203e-03, -1.548527189079299e-02, -1.548527189079305e-02, -4.187718032288658e-08, -5.521249258162905e-08, -5.578806742758542e-05, -2.406621741612864e-09, -9.716162868360823e-09, -9.716162868360823e-09, -1.153362855877764e-01, -1.155592835857304e-01, -1.153490765633073e-01, -1.321455341852712e-01, -1.154478615282838e-01, -1.154478615282838e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -6.737371560484748e-02, -6.950435583150039e-02, -7.546622480752489e-02, -6.485870487849957e-02, -6.894228683636672e-02, -7.058529079394069e-02, -7.210898567657270e-02, -3.211636191061110e-02, -1.802168243969565e-02, -3.079828628005500e-02, -8.767233748461011e-02, -5.612379255667136e-03, -5.612379255667131e-03, -2.429818831173949e-03, -1.913360093769473e-09, -4.385101778778813e-09, -2.457414087463874e-02, -2.781518125836640e-03, -4.040406087744299e-09, -8.212021064915956e-02, -7.862112984132809e-02, -7.173787450420190e-02, -8.067468708650473e-02, -8.015616581141591e-02, -8.015616581141592e-02, -8.074249604879508e-02, -6.486239991409293e-02, -6.823854908145913e-02, -7.169140215946307e-02, -6.983317498783005e-02, -6.904837093538647e-02, -7.521648727511041e-02, -4.894336676652947e-02, -3.792355680991369e-02, -5.914859868946302e-02, -4.776349576839727e-02, -4.776349576839727e-02, -6.539524416530183e-02, -4.327272842726439e-05, -1.399860778171802e-04, -5.706908061760656e-02, -2.826624935272212e-02, -1.431746832537760e-03, -9.666982082054756e-08, -4.414582307458332e-12, -4.400892566452698e-10, -1.213787915547174e-03, -3.999252140506452e-09, -3.999252137099336e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161715276515188e-09, 8.161624229490688e-09, 8.161191372361051e-09, 8.162546597680575e-09, 8.161840447255666e-09, 8.161840447255666e-09, 1.161640458886579e-05, 1.161630429795711e-05, 1.161284830582491e-05, 1.161003616040705e-05, 1.161516432607486e-05, 3.266800254599383e-07, 8.393015457201071e-03, 3.321169245478372e-04, 4.079095972592155e-04, 3.174060697020732e-04, 3.115048103724866e-04, 3.115048103724866e-04, 1.123599195674822e-01, 1.146914349505203e-01, 4.539925279610938e-03, 5.928446798715803e-02, 8.646140829646588e-02, 8.646140829646604e-02, 4.153093891082184e-03, 4.791764372239975e-03, 2.473844708446820e-02, 1.066088116927985e-03, 2.554501037262346e-03, 2.554501037262346e-03, 4.473830740847198e-07, 4.526000141882454e-07, 4.476842189788836e-07, 2.310149110661953e-06, 4.499845811446881e-07, 4.499845811446881e-07, 1.158082031914422e-04, 1.125082025695527e-04, 1.182940045850361e-04, 1.152932408094521e-04, 1.128141913916352e-04, 4.159367445699889e-06, 3.749255481432849e-03, 6.303025738873091e-03, 3.334697134281217e-03, 4.585023095602652e-03, 4.026105423047815e-03, 1.344695047524759e-02, 2.446176786859496e+01, 6.056347913645545e-02, 3.339525359251442e+01, 1.690548801405649e-05, 8.237021070264335e-02, 8.237021070264215e-02, 3.261009993716906e+07, 8.531388183922599e-04, 1.246731051002295e-02, 1.631940070472090e+02, 1.757413124420112e+07, 4.063326406015961e-03, 7.283441413254127e-02, 3.246610768260931e-02, 1.427130264901030e-02, 5.141112916803849e-02, 4.564370761617952e-02, 4.564370761617950e-02, 7.103560531768049e-02, 6.348338989802245e-03, 8.636768623419859e-03, 1.424276256534640e-02, 1.069179557583089e-02, 2.204485060512481e-02, 3.841552549180871e-03, 7.364881038419330e-01, 2.530020990240905e-02, 1.163162628317960e-01, 2.236723002385945e-02, 2.236723002385950e-02, 4.023058039380836e-02, 1.778423383083163e-02, 2.135590599571059e-02, 2.890433858229014e-02, 6.208072797490081e+01, 7.107888411323100e-02, 2.351401915895128e-03, 1.153396720273907e-04, 2.092208749297715e-03, 7.584048107907224e-02, 6.064814055771891e-03, 6.064813997607827e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.066687518177073e-29, -7.667051032736423e-110, -7.668123877140025e-110, -7.663238134203185e-110, -7.665854126160741e-110, -7.665854126160741e-110, -3.071545839961665e-97, -3.073842536580365e-97, -3.134090077072344e-97, -3.104597942228053e-97, -3.113476147924984e-97, 2.519919173355152e-05, -1.389128462085312e-85, 5.925415675822046e-04, 0.000000000000000e+00, 5.515626034201515e-04, 5.411048216930143e-04, 5.411048216930143e-04, 4.060356036802923e-03, 4.330546189417067e-03, -1.789709103558104e-87, 8.756987123619256e-04, 1.880747301987134e-03, 1.880747301987129e-03, 4.270319391513008e-09, 5.774548130690323e-09, 0.000000000000000e+00, 1.999305080245819e-10, 9.723219491412023e-10, 9.723219491412023e-10, -6.743192488969483e-04, -6.851768501857502e-04, -6.749409333784511e-04, -7.166719815098205e-43, -6.797339607743094e-04, -6.797339607743094e-04, -2.638641363384180e-37, -4.324369019719209e-93, -4.322560756618566e-93, -4.316321385566273e-93, -4.345780958797566e-93, 9.912862331229364e-05, -3.024452573965017e-03, -1.667849609751367e-02, 3.083914273062750e-05, -3.456839107616810e-03, -4.421694944855139e-03, -6.350210183660655e-83, -2.583135105827203e-73, 0.000000000000000e+00, -6.622765836626987e-73, -6.088644770605829e-04, 6.420802560729879e-04, 6.420802560730006e-04, -7.598913657956394e-56, 1.491420173821153e-10, 9.492775593625138e-10, -8.824911476827753e-71, -1.060984784715645e-55, 5.507972480623884e-10, -2.304673304039382e-01, -9.485788170025651e-02, -1.287545130609362e-80, -1.586140134972029e-01, -1.392271400722444e-01, -1.392271400722444e-01, -2.057223851525339e-01, -1.197840846314679e-03, -7.176409398865933e-03, -2.374981772198947e-02, -1.308623884839864e-02, -1.349376204989104e-81, -9.800283922971071e-03, -1.024407630267591e-77, 3.015400933373486e-03, -6.959014784375746e-80, 3.342899660291652e-03, 3.342899660291655e-03, -1.497002040605026e-81, 3.675624691980315e-06, 1.147751816988425e-05, 7.600305842310378e-04, -8.813043191755451e-72, 1.604830658369428e-04, 7.030094443246713e-09, 3.412097703043257e-13, 6.110951810051298e-11, 1.409019149990969e-04, 6.463991268707040e-10, 6.463991465326432e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
