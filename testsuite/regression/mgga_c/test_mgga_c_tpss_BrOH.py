
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645987698516499e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -2.471715351177127e-02, -6.686302819127442e-02, -1.182730332476488e-02, -9.938551780349638e-03, -1.075096036230478e-02, -1.187766194901512e-02, -1.187766194901512e-02, -9.456331402179927e-03, -9.972209495026651e-03, -7.129454252820250e-02, -1.657711703089493e-03, -9.602610760851532e-03, -9.602610760851532e-03, -1.562312725855187e-07, -1.912746699189589e-07, -3.206243515743178e-05, -1.898337044015987e-09, -1.908038722527114e-07, -1.908038722527328e-07, -5.017603628049558e-02, -5.028296094513107e-02, -5.018785374458491e-02, -1.224181159734425e-01, -5.022964753569602e-02, -5.022964753569602e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572412e-02, -9.491339721119328e-02, -2.168997838017849e-02, -3.007522548486309e-02, -3.706488750575637e-02, -2.648794685402836e-02, -3.191940528259159e-02, -3.258245007801560e-02, -6.444458984389427e-02, -2.795790560897061e-02, -4.829679078423303e-03, -2.775589238622643e-02, -3.641915136622306e-02, -1.353768954052786e-03, -1.353768954052786e-03, -3.066310498112501e-03, -3.767154836350161e-09, -3.872971294995405e-09, -2.111687625325582e-02, -3.174878197427740e-03, -3.014888089045430e-09, -4.305182454913854e-02, -4.201736380131812e-02, -6.421258200260356e-02, -4.271312283596886e-02, -4.257105897482981e-02, -4.257105897482981e-02, -4.234641238638221e-02, -2.860572370214235e-02, -3.303640488855977e-02, -3.704801374951616e-02, -3.502125640910808e-02, -6.165502636499921e-02, -3.549159766641169e-02, -4.342835275928391e-02, -1.246122015777342e-02, -5.212060951466563e-02, -1.672347514310275e-02, -1.672347514310276e-02, -5.782933926396749e-02, -2.165467056638823e-05, -6.835232621838611e-05, -2.276120491674124e-02, -2.479856847389609e-02, -4.146400451854867e-04, -1.248857136930833e-07, -9.280559561755425e-12, -3.851849876369468e-10, -4.097605564068650e-04, -1.987256178397296e-09, -1.987256185956171e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747363821491154e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -7.415639330795780e-02, -7.491623656166166e-02, -4.399911450752306e-02, -3.888371386507837e-02, -4.472183361012697e-02, -4.412797600566908e-02, -4.412797600566908e-02, -3.416106323744700e-02, -3.535235552742008e-02, -7.955565354779474e-02, -8.279706498510384e-03, -3.450510931426649e-02, -3.450510931426649e-02, -9.408449023302048e-07, -1.150844962990644e-06, -1.851456644773931e-04, -1.157484059334089e-08, -1.148189815276225e-06, -1.148189815273854e-06, -1.153095797217686e-01, -1.155255455575958e-01, -1.153334067609175e-01, -1.321322029122264e-01, -1.154177751693933e-01, -1.154177751693933e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -6.756176580988260e-02, -6.893900492105726e-02, -7.475200406487889e-02, -6.570824123057176e-02, -6.992166947617623e-02, -7.107585634875892e-02, -7.237723572555273e-02, -3.318915835573125e-02, -2.102173084796078e-02, -3.296452513148780e-02, -8.758365198723692e-02, -6.863724395514652e-03, -6.863724395514652e-03, -3.946287688264066e-03, -2.463999796807548e-08, -2.367035779965314e-08, -2.549362941948338e-02, -4.083422991717209e-03, -1.838024725541369e-08, -8.300511644631967e-02, -7.960288430445449e-02, -7.213338981778680e-02, -5.016859584679684e-02, -8.110471204748115e-02, -8.110471204748115e-02, -8.070021508802014e-02, -6.596471737784956e-02, -6.905229101081264e-02, -7.216415804921440e-02, -7.048459431165544e-02, -6.944209849581726e-02, -7.444594859945841e-02, -5.006348929577377e-02, -4.234625664550487e-02, -5.935291128433449e-02, -5.325406554933323e-02, -5.009993097298128e-02, -6.540488546969517e-02, -1.256437524209469e-04, -3.899156597879081e-04, -5.742815127250652e-02, -2.965891225314009e-02, -2.251476180076810e-03, -7.504925151506964e-07, -5.740048097998552e-11, -2.365524242749003e-09, -2.225798474380689e-03, -1.214206172934127e-08, -1.214206173518601e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.162336672663971e-09, 8.162257422712558e-09, 8.161845521011715e-09, 8.163144477527225e-09, 8.162295366782862e-09, 8.162295366782862e-09, 1.161824147373395e-05, 1.161814394152891e-05, 1.161355123566127e-05, 1.161161751276436e-05, 1.161799334343939e-05, 3.250811465620772e-07, 8.605282031097209e-03, 3.239329627940386e-04, 2.857014577138606e-04, 4.288588029669549e-04, 3.249552302561734e-04, 3.249552302561734e-04, 1.315260288636981e-01, 1.328122705143815e-01, 4.170780912619087e-03, 5.336711847180693e-02, 1.317889589881255e-01, 1.317889589881255e-01, 2.772843475180709e-02, 2.939970657419084e-02, 4.256716115619356e-02, 1.844971967740440e-03, 3.095787951290276e-02, 3.095787951267781e-02, 4.477529459475208e-07, 4.528098446546322e-07, 4.483104617351757e-07, 2.314253033950547e-06, 4.502768861997219e-07, 4.502768861997219e-07, 1.163245234073887e-04, 1.131030829737328e-04, 1.176592973766211e-04, 1.150992589790646e-04, 1.124713164004324e-04, 4.181275386955770e-06, 3.700141466913735e-03, 5.972263868749218e-03, 3.361779614823127e-03, 4.805986512782357e-03, 4.054210069284228e-03, 1.288149721810157e-02, 1.908490249508757e+01, 4.916851074907579e-02, 2.009554016434895e+01, 1.689720260893837e-05, 8.952690868050808e-02, 8.952690868050808e-02, 3.442283364651597e+06, 3.958247463335387e-03, 1.492255581194726e-02, 1.272688397450553e+02, 2.927796305813879e+06, 3.604463709079627e-03, 7.605210879449238e-02, 3.430203920233835e-02, 1.339414080474125e-02, 2.109081595972383e-03, 4.797535139640983e-02, 4.797535139640983e-02, 6.190243084561444e-02, 6.540906274286997e-03, 8.906893874050663e-03, 1.396176317634761e-02, 1.081404864497755e-02, 2.067627119743510e-02, 3.619749986911446e-03, 5.966635762621976e-01, 2.657955902331991e-02, 1.122617999707570e-01, 2.979997716983981e-02, 2.283068673014895e-02, 4.016498744686525e-02, 3.507145038893059e-02, 4.151683642157942e-02, 3.109633803067840e-02, 4.397406555476940e+01, 9.243390283385225e-02, 8.574325608292115e-03, 3.971489287872146e-04, 3.328989100331755e-03, 1.152223729302171e-01, 4.605462480545935e-03, 4.605462473554524e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.067284878542478e-29, -7.668501312672199e-110, -7.669489801275211e-110, -7.664826583215556e-110, -7.668366363888622e-110, -7.668366363888622e-110, -3.085661641892256e-97, -3.087682042644130e-97, -3.147124951309702e-97, -3.119540780783535e-97, -3.085962113613439e-97, 2.546678887737520e-05, -1.403343777751200e-85, 5.747132633438257e-04, 4.883304748226969e-04, 0.000000000000000e+00, 5.768432017458137e-04, 5.768432017458137e-04, 5.454019306356850e-03, 5.682217174227558e-03, -1.723893390067497e-87, 7.987697508375638e-04, 5.518366187834053e-03, 5.518366187834053e-03, 1.447780064228217e-07, 1.772095365652372e-07, 1.955750473582471e-05, 9.885920233653927e-10, 1.806516775292990e-07, 1.806516775293844e-07, -6.737355974449065e-04, -6.842450569751282e-04, -6.748905718432661e-04, -7.191744775989427e-43, -6.789830349061312e-04, -6.789830349061312e-04, -2.645571946976888e-37, -4.335954396719289e-93, -4.338264624443156e-93, -4.333819523876539e-93, -4.363343455235341e-93, 9.850302351847887e-05, -2.500081535865724e-03, -1.444301792277707e-02, -3.146022692011005e-04, -4.778862667356057e-03, -4.992475384413786e-03, -5.942791306886710e-83, -1.673231609154183e-73, 2.083798817436653e-03, -2.467853802958562e-73, -6.017086346293912e-04, 8.135482275770638e-04, 8.135482275770638e-04, -4.479799237794237e-58, 0.000000000000000e+00, 4.427300025013540e-09, -4.154567155014166e-71, -2.926671843261956e-58, 1.958738141510234e-09, -2.531763531051622e-01, -1.065509881266075e-01, -1.336038779463092e-80, 0.000000000000000e+00, -1.546892677490057e-01, -1.546892677490057e-01, -1.840093373675361e-01, -2.246823388084422e-03, -8.963914639357798e-03, -2.468970089726502e-02, -1.478745270472637e-02, -1.222636262049002e-81, -8.198227550830144e-03, -7.358363442668816e-78, 3.396744408171835e-03, -6.722275218462274e-80, 0.000000000000000e+00, 3.301934439346265e-03, -1.566986565936122e-81, 1.270202269382799e-05, 3.836205174854195e-05, 0.000000000000000e+00, -4.104381022816435e-72, 2.747805676465720e-04, 7.312281682834140e-08, 5.214848333320041e-12, 3.182936639457152e-10, 2.970061958988489e-04, 1.511603690800762e-09, 1.511603703344823e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
