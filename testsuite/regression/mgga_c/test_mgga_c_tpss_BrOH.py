
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.771265726595176e-02, -4.771312922362633e-02, -4.771400173489069e-02, -4.770625672612273e-02, -4.771291700426612e-02, -4.771291700426612e-02, -4.180032266619766e-02, -4.180433574346545e-02, -4.191501528240384e-02, -4.172833383129842e-02, -4.180236964069656e-02, -4.180236964069656e-02, -2.632638784580065e-02, -2.611410952250510e-02, -2.067147041657752e-02, -2.102104841907833e-02, -2.624989464110584e-02, -2.624989464110584e-02, -1.042389910421008e-02, -1.111168885326864e-02, -3.295244625085472e-02, -2.714350448080394e-03, -1.063288497661014e-02, -1.063288497661014e-02, -1.611341339181390e-07, -1.989021784193552e-07, -3.963156309959289e-05, -3.483051823416287e-09, -1.973750622972091e-07, -1.973750622972091e-07, -5.044931558688922e-02, -5.055626869693373e-02, -5.045768639208541e-02, -5.054096343007342e-02, -5.050760719733827e-02, -5.050760719733827e-02, -2.281579485645021e-02, -2.330296823327777e-02, -2.225181505858293e-02, -2.263266021989170e-02, -2.389987497219209e-02, -2.389987497219209e-02, -3.858607978526391e-02, -5.568404262356961e-02, -3.746262844077589e-02, -5.059034706023546e-02, -4.059406210901252e-02, -4.059406210901252e-02, -7.486544792623977e-04, -5.265379744955411e-03, -8.238988634154017e-04, -7.155616524683303e-02, -1.663816181139863e-03, -1.663816181139863e-03, -3.294280103397914e-09, -5.951166126395470e-09, -4.698273522612247e-09, -1.568644223851836e-04, -5.579601698139759e-09, -5.579601698142118e-09, -5.774702079894065e-02, -4.922887325240538e-02, -5.147084406544417e-02, -5.372463918619593e-02, -5.252999595579614e-02, -5.252999595579614e-02, -6.087972321272757e-02, -2.951263932473032e-02, -3.488054282254242e-02, -4.089670285779303e-02, -3.776246267635507e-02, -3.776246267635507e-02, -5.587142171042163e-02, -8.902441696271477e-03, -1.384353451579043e-02, -2.525054934635948e-02, -1.926482750294596e-02, -1.926482750294596e-02, -2.817519896897922e-02, -2.443340138244675e-05, -8.865058864899110e-05, -2.951141232420166e-02, -5.290894544322386e-04, -5.290894544322393e-04, -2.203476221172339e-07, -2.195662840475355e-11, -4.428950780574723e-10, -5.330450759937402e-04, -3.809632988222292e-09, -3.809632993802009e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.133317890663738e-01, -1.133326019115977e-01, -1.133343515982901e-01, -1.133210257586898e-01, -1.133322341124691e-01, -1.133322341124691e-01, -1.063900252237742e-01, -1.063942424110683e-01, -1.065068990735864e-01, -1.062605370413238e-01, -1.063925397714788e-01, -1.063925397714788e-01, -7.549922718912076e-02, -7.521181573820009e-02, -6.660167353058698e-02, -6.706601385509101e-02, -7.539575699846326e-02, -7.539575699846326e-02, -3.681544458271411e-02, -3.834931555755017e-02, -8.587334917038650e-02, -1.331299703627136e-02, -3.729626963425733e-02, -3.729626963425733e-02, -9.726264977682401e-07, -1.200254336338137e-06, -2.321323369057942e-04, -2.193451672682219e-08, -1.190760421621513e-06, -1.190760421621513e-06, -1.155623574050774e-01, -1.157763878145939e-01, -1.155827620452563e-01, -1.157492396091677e-01, -1.156739098010291e-01, -1.156739098010291e-01, -7.093881806398204e-02, -7.159178415440846e-02, -6.980413011549105e-02, -7.032411677975245e-02, -7.285506449302423e-02, -7.285506449302423e-02, -7.934054471060117e-02, -8.238276444314035e-02, -7.930921912701114e-02, -8.160332694025860e-02, -8.017336544585915e-02, -8.017336544585915e-02, -4.048358513026423e-03, -2.274016530451298e-02, -4.428623986753352e-03, -1.174656763620165e-01, -8.432292482584548e-03, -8.432292482584548e-03, -2.046594821834212e-08, -3.720156290650249e-08, -2.907194233592049e-08, -9.120027549061208e-04, -3.514351315970173e-08, -3.514351315531084e-08, -7.813510557610820e-02, -8.038276507363676e-02, -8.046691628733997e-02, -8.004403886750790e-02, -8.032948988281732e-02, -8.032948988281734e-02, -7.429469880034595e-02, -6.727096866281458e-02, -7.118459665196422e-02, -7.523406607696120e-02, -7.322241109173475e-02, -7.322241109173475e-02, -8.433084975165303e-02, -3.393227504145181e-02, -4.578631845970437e-02, -6.340081530427312e-02, -5.506044958096317e-02, -5.506044958096315e-02, -6.790108600677489e-02, -1.430167653475191e-04, -5.138286155713422e-04, -6.526122354055662e-02, -2.898993098982551e-03, -2.898993098982581e-03, -1.368400852484245e-06, -1.409198231055451e-10, -2.744321175820475e-09, -2.922551394640939e-03, -2.406825991574224e-08, -2.406825992077134e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.296973632351691e-10, 2.297043565289041e-10, 2.297284839208382e-10, 2.296148202037472e-10, 2.297011014717839e-10, 2.297011014717839e-10, 1.017943296542621e-06, 1.018113588065462e-06, 1.022556359082413e-06, 1.013117182471878e-06, 1.018014029743034e-06, 1.018014029743034e-06, 1.605475126789301e-03, 1.592243230974293e-03, 1.241088189925723e-03, 1.210780869777606e-03, 1.600727183037990e-03, 1.600727183037990e-03, 1.666022642060233e-01, 1.728769788001591e-01, 9.971681595582857e-04, 1.415337185457414e-01, 1.687971439879584e-01, 1.687971439879584e-01, 2.945856592259619e-02, 3.173967390162739e-02, 6.464569141191637e-02, 5.520618785709769e-03, 3.308168358228944e-02, 3.308168358228945e-02, 4.476945133166706e-07, 4.527364365170964e-07, 4.482507993847477e-07, 4.521680155641146e-07, 4.502103094964620e-07, 4.502103094964620e-07, 4.979978250303301e-06, 4.958493963629449e-06, 4.811196912251515e-06, 4.795261631044023e-06, 5.192561952024562e-06, 5.192561952024562e-06, 6.001691676962372e-03, 9.037156134084661e-03, 7.191916333931305e-03, 1.090035290763850e-02, 5.791273791951424e-03, 5.791273791951424e-03, 9.050448223708606e-02, 5.974623556180532e-02, 1.113227255532214e-01, 6.219974657439865e-05, 1.373189394222075e-01, 1.373189394222075e-01, 5.689169675268447e-03, 7.086414590432136e-03, 2.144974103854302e-02, 1.039415127875896e-01, 1.094662191073404e-02, 1.094662191096416e-02, 4.726953261476110e-02, 3.076265606592166e-02, 3.660184321611841e-02, 4.181745702425315e-02, 3.915757906575733e-02, 3.915757906575734e-02, 2.750789285615499e-02, 6.871945970774151e-03, 9.375948821139169e-03, 1.436821258273777e-02, 1.135176442478668e-02, 1.135176442478668e-02, 6.876358942807169e-03, 3.992534617443715e-02, 3.434590020538211e-02, 3.002611595057625e-02, 3.240942849800284e-02, 3.240942849800280e-02, 1.005123269984696e-02, 4.462183714837106e-02, 6.927391230409578e-02, 5.419881023121851e-02, 1.509164603148754e-01, 1.509164603148753e-01, 2.436576745441056e-02, 1.779822639612093e-03, 4.326298721032649e-03, 1.951970937638919e-01, 1.480774969013242e-02, 1.480774968482629e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.476622883751104e-05, -1.476724920714667e-05, -1.477291016168434e-05, -1.475638936205475e-05, -1.476675500336717e-05, -1.476675500336717e-05, 4.901086670645126e-06, 4.896248415525170e-06, 4.757746038219623e-06, 4.955450560413476e-06, 4.898785291003383e-06, 4.898785291003383e-06, 1.218168888845874e-04, 1.236277846474585e-04, 1.676324844453136e-04, 1.908526518280661e-04, 1.224962709670275e-04, 1.224962709670275e-04, 4.801452297988200e-03, 4.883131194358088e-03, 1.243111008256259e-05, 6.661672123581500e-04, 4.815978882949222e-03, 4.815978882949222e-03, 1.447591797441904e-07, 1.771777874366947e-07, 1.938805858200294e-05, 9.881698849882750e-10, 1.806235936671142e-07, 1.806235936671140e-07, -6.634530912488112e-04, -6.738616785264369e-04, -6.647259569079217e-04, -6.728069750178766e-04, -6.684749729613908e-04, -6.684749729613908e-04, 9.646996459034938e-05, 9.517469767177966e-05, 9.847309469846256e-05, 9.778507725514065e-05, 9.260370222341569e-05, 9.260370222341569e-05, -1.174677048739421e-03, -1.684754937056757e-03, -3.720920167541065e-04, -8.414099377986557e-04, -2.274757716020986e-03, -2.274757716020986e-03, 2.674014803899298e-04, 1.968717940638914e-03, 3.171263567388930e-04, -5.196345361809632e-05, 7.649246302752894e-04, 7.649246302752894e-04, 1.570375296746276e-09, 2.219886255210629e-09, 4.426438100815641e-09, 4.687563795083216e-05, 1.957668791627568e-09, 1.957668791634397e-09, -6.345328243012048e-02, -6.325834490257361e-02, -7.059832252835369e-02, -7.343499281630647e-02, -7.253996046472039e-02, -7.253996046472042e-02, -1.047093112831859e-02, -1.865613864924752e-03, -7.133418788510920e-03, -1.710277083430491e-02, -1.101428672598547e-02, -1.101428672598547e-02, -9.164933086335974e-04, 2.808793985582669e-03, 2.917413407925108e-03, 1.085102564533564e-03, 2.463342262136625e-03, 2.463342262136641e-03, 3.973015870179281e-04, 1.265093035526233e-05, 3.777942181992233e-05, -8.984235167044650e-05, 2.647686786197612e-04, 2.647686786197628e-04, 7.296038608314386e-08, 5.214451224239354e-12, 3.182771474094099e-10, 2.852057030645708e-04, 1.510835750014620e-09, 1.510835755767545e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
