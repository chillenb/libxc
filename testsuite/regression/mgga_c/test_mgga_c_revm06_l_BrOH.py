
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.190203472024993e-01, -1.190212667008720e-01, -1.190268491812847e-01, -1.190119683818097e-01, -1.190208171064839e-01, -1.190208171064839e-01, -3.506026621364289e-02, -3.507023369751189e-02, -3.536445276926983e-02, -3.516205478647921e-02, -3.506365865143253e-02, -3.506365865143253e-02, -5.299426504605909e-03, -5.123338583561565e-03, -1.269363466216533e-03, -2.007259150440484e-03, -5.235809115671904e-03, -5.235809115671904e-03, -9.766730462722292e-03, -9.928443928757896e-03, -2.564123253974083e-02, 2.144852108476891e-02, -9.761369725021767e-03, -9.761369725021767e-03, 1.431558933393478e-02, 1.491719517124065e-02, 3.957087633914621e-02, 9.016602870885571e-03, 1.475466375353984e-02, 1.475466375353985e-02, -9.786883196123110e-02, -9.800370122151983e-02, -9.788534562250042e-02, -9.799002210352346e-02, -9.793430123593638e-02, -9.793430123593638e-02, -4.064701484552857e-02, -4.291769515139827e-02, -4.141776791533632e-02, -4.329147562626189e-02, -4.120587752363974e-02, -4.120587752363974e-02, -3.105291550846187e-02, -5.233208920503518e-02, -2.460308045081069e-02, -4.199265202340982e-02, -3.616048316324175e-02, -3.616048316324175e-02, 3.636771712892591e-02, 3.393499478635438e-04, 3.452972571510220e-02, -6.873611466831095e-02, 2.324521884580091e-02, 2.324521884580091e-02, 8.066122806961371e-03, 9.491899032601839e-03, 6.779046765465694e-03, 4.543162337523542e-02, 9.064055364618333e-03, 9.064055364618333e-03, -6.410914544162991e-02, -5.849860645158655e-02, -6.026521978981415e-02, -6.179180882793324e-02, -6.100823488968275e-02, -6.100823488968275e-02, -6.409189752935572e-02, -3.637684982798400e-02, -4.010660316289912e-02, -4.596999534022558e-02, -4.247689536480323e-02, -4.247689536480323e-02, -5.049671937714874e-02, -1.134060262612245e-02, -1.444489033415491e-02, -1.441649024393569e-02, -1.572342225839757e-02, -1.572342225839757e-02, -2.306872598836290e-02, 3.784388718994720e-02, 4.283227281247162e-02, -1.682049898501747e-02, 3.577908384190154e-02, 3.577908384190152e-02, 1.908871493768633e-02, 3.160573407188957e-03, 4.762633248724709e-03, 3.492944713588837e-02, 7.895704370849030e-03, 7.895704370849041e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.332275213815659e-01, -1.332299560615584e-01, -1.332297217259202e-01, -1.331894877327284e-01, -1.332289056167464e-01, -1.332289056167464e-01, -1.320658442415115e-01, -1.320777340132574e-01, -1.323914613234330e-01, -1.316480816767560e-01, -1.320733083823069e-01, -1.320733083823069e-01, -4.649992721854316e-02, -4.587703910851480e-02, -3.128659647092574e-02, -3.028103501088304e-02, -4.627440619227040e-02, -4.627440619227040e-02, -3.016240747111203e-03, -1.833959694584844e-03, -5.701445110532978e-02, -3.378637959741935e-02, -2.665213259090079e-03, -2.665213259090079e-03, 2.651187523097152e-02, 2.744456556283126e-02, 5.044197722265302e-02, 1.508353216682349e-02, 2.720780449171088e-02, 2.720780449171088e-02, -1.137490012999596e-01, -1.142011444454121e-01, -1.137832963414731e-01, -1.141355547830631e-01, -1.139973197078722e-01, -1.139973197078722e-01, 3.607066531941122e-03, 4.435602450134246e-03, 6.776352301886397e-03, 7.604417235334629e-03, -3.313750334671892e-04, -3.313750334671892e-04, -7.659929533646570e-02, -9.303887259776157e-02, -7.771015708293702e-02, -9.395376480910649e-02, -8.012716349940152e-02, -8.012716349940152e-02, -2.002964422310145e-03, -2.269861081619785e-02, -4.665783892325914e-03, -1.286191439432923e-01, -2.052483937278088e-02, -2.052483937278088e-02, 1.444261282092344e-02, 1.628771230361458e-02, 1.253736212900826e-02, 3.462750209912244e-02, 1.512335526906788e-02, 1.512335526906787e-02, -8.081205711727645e-02, -8.291209372711139e-02, -8.284560139011529e-02, -8.225168993583926e-02, -8.260945677519384e-02, -8.260945677519385e-02, -7.966617684372829e-02, -1.787723224520630e-02, -4.446644353199036e-02, -7.053175202206242e-02, -5.844591408058819e-02, -5.844591408058824e-02, -9.527642286155406e-02, -7.544787513870794e-03, 2.311839258474623e-03, -2.693159733335720e-02, -2.654327465861719e-03, -2.654327465861785e-03, -2.990169979345047e-02, 5.324907964659357e-02, 4.505140839294266e-02, -4.660214725080569e-02, 8.152935136554115e-03, 8.152935136554035e-03, 3.061835678688107e-02, 5.229906914693211e-03, 9.080819074389400e-03, 7.509421427676528e-03, 1.316057882412282e-02, 1.316057882412282e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.938528976661764e-10, -2.938436896054630e-10, -2.938424183257003e-10, -2.939949740641280e-10, -2.938476757228875e-10, -2.938476757228875e-10, 6.407013696155315e-07, 6.407248248562636e-07, 6.398369633962834e-07, 6.187202560311447e-07, 6.408299646308625e-07, 6.408299646308625e-07, 1.313638088018680e-03, 1.281852562039240e-03, 4.813560338500955e-04, 2.056555696720227e-04, 1.301831246298654e-03, 1.301831246298654e-03, -6.752419899604594e-01, -6.678669886221725e-01, 2.156046852144236e-03, 2.283812615506060e-01, -6.714520176974115e-01, -6.714520176974115e-01, -1.013285319368572e+03, -9.078456125401249e+02, -1.518285163165773e+01, -3.096320343102468e+03, -9.506913993928674e+02, -9.506913993928670e+02, -2.115931161117100e-07, -2.087428630512649e-07, -2.113751267042832e-07, -2.091552370599706e-07, -2.100376775411267e-07, -2.100376775411267e-07, -2.467604061345649e-05, -2.507205504973327e-05, -2.524515129564406e-05, -2.559951869603716e-05, -2.415212006508970e-05, -2.415212006508970e-05, 1.993241125678154e-04, 6.915437509780341e-03, 2.799780132615720e-03, 1.075987191045209e-02, 1.789232959213081e-04, 1.789232959213081e-04, -2.688016331772524e-01, -2.716351135548833e-01, -2.672112094559719e-01, 3.825847517127256e-05, -3.319518997555789e-01, -3.319518997555789e-01, -4.141133890531771e+03, -2.808629993475754e+03, -1.045362574943697e+04, -2.299487290281091e+00, -3.817416980508658e+03, -3.817416980508650e+03, 1.626850612094063e-02, 8.097196036806734e-03, 1.076301083512099e-02, 1.303531220295196e-02, 1.187589734343149e-02, 1.187589734343149e-02, 1.284881278504283e-02, -1.908284186062666e-02, -1.295682230542225e-02, -3.728339865653305e-03, -8.648687020264136e-03, -8.648687020264114e-03, 5.623318731059023e-03, -2.083649685332802e-01, -1.397998192611352e-01, -3.669165067205256e-02, -9.585959709371294e-02, -9.585959709371283e-02, -1.713992998371770e-02, -1.968659449569219e+01, -6.385319829483490e+00, -1.900227237760898e-02, -1.192737137072168e+00, -1.192737137072161e+00, -4.350398084186065e+02, -4.797590957348024e+04, -1.715388401843998e+04, -1.342561796662527e+00, -6.454532517112016e+03, -6.454532517112042e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.213668176000459e-05, 7.213607015940940e-05, 7.213784580273516e-05, 7.214809568297452e-05, 7.213631736376086e-05, 7.213631736376086e-05, 4.070813255952700e-04, 4.072168352375615e-04, 4.115663723212589e-04, 4.140690558188843e-04, 4.070884342024098e-04, 4.070884342024098e-04, 1.962188616994366e-04, 2.200922658494679e-04, 1.112081466300235e-03, 1.853499425730338e-03, 2.057098268220768e-04, 2.057098268220768e-04, 8.276338651007713e-02, 8.210877074120970e-02, -3.609028079017157e-03, 2.607169647224347e-02, 8.230239993478632e-02, 8.230239993478632e-02, 1.711066054827328e-02, 1.757557486332259e-02, 2.597155184267698e-02, 4.003744350330248e-03, 1.789350726965909e-02, 1.789350726965908e-02, 8.710912540686747e-04, 8.667158137282699e-04, 8.707592491354718e-04, 8.673511497378175e-04, 8.687046099120989e-04, 8.687046099120989e-04, 3.180356305057298e-03, 3.320483052888739e-03, 3.232643491083535e-03, 3.349190952237232e-03, 3.203507077755552e-03, 3.203507077755552e-03, 1.706381576507278e-02, 1.068890336151042e-02, 1.248708273266069e-02, 9.547925068724981e-03, 1.820410869599780e-02, 1.820410869599780e-02, 3.213006463949247e-02, 5.325305520510842e-02, 3.448914488711523e-02, 1.279671810772299e-03, 4.549239845689407e-02, 4.549239845689407e-02, 5.756746246055796e-03, 5.308375956044412e-03, 9.734753464871980e-03, 2.161380700026220e-02, 4.987765241423937e-03, 4.987765241423931e-03, -3.135792810927215e-03, 7.151737114741398e-03, 2.308336245261514e-03, -1.086809988184608e-03, 5.320254329557293e-04, 5.320254329556942e-04, 1.222284875544088e-02, 4.591002675686070e-02, 4.233961843848800e-02, 3.183843698538620e-02, 3.779720510933944e-02, 3.779720510933941e-02, 8.964827079453648e-03, 5.813933277809729e-02, 5.226995338144360e-02, 3.263458357366990e-02, 4.807954243675212e-02, 4.807954243675208e-02, 3.196517536944223e-02, 2.531229588388254e-02, 2.651177132317411e-02, 3.370966994702365e-02, 3.965621457906902e-02, 3.965621457906902e-02, 8.663710920049719e-03, 1.482492222893462e-03, 5.496496624111626e-03, 4.154605959177448e-02, 5.073808534420461e-03, 5.073808534420459e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
