
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_l_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.404972081980123e-01, -1.404980435878761e-01, -1.405017451014170e-01, -1.404881454240933e-01, -1.404976479443736e-01, -1.404976479443736e-01, -7.253097523264831e-02, -7.253415795773607e-02, -7.263155402248578e-02, -7.259510873599880e-02, -7.253194754512887e-02, -6.541218534236100e-02, -5.062304795083128e-02, -2.885738508011471e-02, -2.493215821246791e-02, -2.671722574943746e-02, -2.894751276542573e-02, -2.894751276542573e-02, -1.446497719540191e-02, -1.533128923928903e-02, -7.788113361881205e-02, 1.960943149210841e-02, -1.471844822096211e-02, -1.471844822096211e-02, 1.414168228571448e-02, 1.469036298045949e-02, 3.723810741273699e-02, 7.501430257181509e-03, 1.455934150337851e-02, 1.455934150337852e-02, -9.800028187362400e-02, -9.813196695048011e-02, -9.801481536032583e-02, -1.121109914937361e-01, -9.806632774516776e-02, -9.806632774516776e-02, -6.035161427306934e-02, -6.061745527663095e-02, -6.026602922129330e-02, -6.043898033242865e-02, -6.069213087220816e-02, -5.388707666134789e-02, -4.192785269999642e-02, -4.933772766120177e-02, -3.886074211517893e-02, -4.323182799003664e-02, -4.436545232718884e-02, -4.979235961824696e-02, -1.067540841366688e-01, -1.993593643830009e-03, -1.046527536467215e-01, -6.468048617077655e-02, 2.162881665494798e-02, 2.162881665494798e-02, -2.530319742700756e-03, 8.185617919525056e-03, 6.297384169622291e-03, -7.028847744222354e-02, -2.620523767941026e-03, 7.527835606256906e-03, -6.045901592401787e-02, -5.725258402730543e-02, -6.525407666631892e-02, -5.924005613198598e-02, -5.879113994452188e-02, -5.879113994452188e-02, -5.859555490447562e-02, -3.911894185036106e-02, -4.319567968665920e-02, -4.808432264979401e-02, -4.542847258657917e-02, -5.154184662572955e-02, -4.814570152159320e-02, -4.219599446478332e-02, -2.134346982488728e-02, -3.320654094769623e-02, -2.630341036995962e-02, -2.630341036995961e-02, -3.828644928842685e-02, 3.642493241670800e-02, 4.007231884364249e-02, -3.068194585642910e-02, -9.569756042768882e-02, 3.395226768279792e-02, 1.622024588184547e-02, 2.459052067736740e-03, 4.501985906012546e-03, 3.306311772379918e-02, 6.494679315336478e-03, 6.494679315336488e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_l_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.968463617224739e-01, -1.968466172851762e-01, -1.968478029198389e-01, -1.968436336263492e-01, -1.968464958905244e-01, -1.968464958905244e-01, -1.014829440873321e-01, -1.015008667346798e-01, -1.020380452974220e-01, -1.018326657472724e-01, -1.014880377812992e-01, 1.973104507574136e-02, 1.942927367071762e-03, 6.714153696643466e-03, -1.700345191440231e-03, 2.213315642094593e-03, 6.903894681442251e-03, 6.903894681442251e-03, -2.843493795758920e-03, -1.126428169816653e-03, 5.206866309830550e-02, -1.912643606504368e-02, -2.345894913936535e-03, -2.345894913936535e-03, 2.648326155236585e-02, 2.740969910457075e-02, 5.313920318206147e-02, 1.469449213247759e-02, 2.717765362221166e-02, 2.717765362221171e-02, -1.124904252972503e-01, -1.129574507933608e-01, -1.125421628547931e-01, -1.494009264147355e-01, -1.127249545354085e-01, -1.127249545354085e-01, -7.033456405587589e-02, -7.409875495610654e-02, -6.861197971258894e-02, -7.169532247461655e-02, -7.502857932541220e-02, 2.352150737105358e-02, -1.339424597526484e-02, -4.775465140033144e-02, 1.257824315572045e-04, -2.217024103256076e-02, -2.466216851209172e-02, -7.824748602095885e-02, -9.244009895941568e-02, -2.307267587340335e-02, -8.318114315752284e-02, -3.512443543662528e-02, -1.368826980803322e-02, -1.368826980803322e-02, -3.271522372172293e-03, 1.596084853140148e-02, 1.241276320531192e-02, -1.298150736577150e-01, -3.392498129656312e-03, 1.473563695152824e-02, -7.967470477152280e-02, -7.628438767516398e-02, -8.050765985071315e-02, -7.887181254541034e-02, -7.842211536876784e-02, -7.842211536876784e-02, -7.805310522410930e-02, -9.117286788391681e-03, -2.955782176950796e-02, -5.133050834789632e-02, -4.006906090737274e-02, -7.768559282423229e-02, -3.818717784990874e-02, 2.250215174178587e-02, 5.650711436322287e-03, -4.130020091229844e-02, 1.176754837252875e-02, 1.176754837252864e-02, -5.732953625593547e-02, 5.441160306091265e-02, 5.036498067535187e-02, 5.115713203656971e-03, -1.029790812105306e-01, 1.726096894254658e-02, 3.022518584242849e-02, 5.023406882556193e-03, 9.008202547954569e-03, 1.707433272203897e-02, 1.279768011421826e-02, 1.279768011421826e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.897003058621883e-10, -1.896931321038618e-10, -1.896599539292185e-10, -1.897769411631173e-10, -1.896965390383074e-10, -1.896965390383074e-10, -2.121822855554873e-06, -2.121645307938534e-06, -2.115923995581939e-06, -2.117341515533638e-06, -2.121725693968357e-06, -2.197650413561889e-06, -5.191788597423284e-03, -2.525582930155437e-03, -2.353123563855600e-03, -2.480360142490957e-03, -2.529828511300485e-03, -2.529828511300485e-03, -7.589934497533340e-01, -7.645472989098462e-01, -1.786127475636894e-03, -4.386993402952792e-01, -7.600385880909669e-01, -7.600385880909669e-01, -1.014331222115317e+03, -9.091587661696840e+02, -1.709574464530867e+01, -3.106715926905132e+03, -9.518782817356564e+02, -9.518782817356573e+02, -2.191213281863204e-07, -2.162339681542696e-07, -2.188043018334429e-07, -9.999680898692185e-08, -2.176754819786872e-07, -2.176754819786872e-07, -3.419873524624000e-05, -3.280412567291684e-05, -3.478217954786982e-05, -3.367614107894107e-05, -3.251176464546730e-05, -2.905298185811737e-05, -1.115872168724330e-02, -6.663585468668362e-03, -1.338966570828397e-02, -1.178278206627262e-02, -9.416673472335961e-03, -5.895153162447206e-03, 3.286044858579583e+00, -3.079646577221798e-01, 4.254980412712893e+00, -4.231183407621982e-05, -7.975658160516821e-01, -7.975658160516821e-01, -1.743981323831094e+07, -2.817713613335429e+03, -1.046675504190413e+04, -1.685157020044634e+02, -1.472204799779972e+07, -3.833881590967571e+03, 1.383360543307955e-02, 2.852060029009619e-03, 3.203036824225256e-03, 8.577515588350022e-03, 7.059385890133373e-03, 7.059385890133373e-03, 9.950278216132277e-03, -2.139752027860510e-02, -1.751944529993044e-02, -1.172257522626913e-02, -1.503749074023702e-02, -8.160992828253779e-03, -5.872540380355709e-03, -5.855401680837699e-01, -1.606876976483249e-01, -1.009439933700677e-01, -1.279094449040992e-01, -1.279094449040991e-01, -2.888086758896220e-02, -2.070635938839145e+01, -8.106069873041140e+00, -1.291568619322448e-01, -3.551821107956445e-01, -2.491169840814711e+00, -4.450420161061512e+02, -4.799918153636123e+04, -1.715900101138088e+04, -3.073484694308708e+00, -6.479517662978086e+03, -6.479517662978119e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.799271383323268e-05, 2.799296587570959e-05, 2.799396432197348e-05, 2.798987801005245e-05, 2.799284730809018e-05, 2.799284730809018e-05, 1.709947676738704e-04, 1.711424951336047e-04, 1.755736333382471e-04, 1.738338606366057e-04, 1.710343524859004e-04, 1.664082607161881e-03, -5.479299893636418e-03, 1.530481202416121e-02, 1.404839948649573e-02, 1.469713894959006e-02, 1.533787355437822e-02, 1.533787355437822e-02, 1.021327085857236e-01, 1.045028947398852e-01, -6.036185083402404e-03, 5.088973250122209e-02, 1.027779248066243e-01, 1.027779248066243e-01, 1.746048301661529e-02, 1.803163730160583e-02, 3.016919642099853e-02, 5.770321208047175e-03, 1.829509034755539e-02, 1.829509034755538e-02, 8.828255293437652e-04, 8.783617646729313e-04, 8.823364939963385e-04, 4.128399029815820e-04, 8.805932260423625e-04, 8.805932260423625e-04, 7.980587081026050e-05, 1.505386202280233e-04, 4.788667721657638e-05, 1.050941222080210e-04, 1.685556657993225e-04, 4.014051922371516e-03, 4.117168089145183e-02, 3.740547312912473e-02, 4.083288647049865e-02, 4.342557500142980e-02, 4.041848652038862e-02, 1.061625255693655e-02, -2.141955838612275e-02, 6.109172987100481e-02, -2.762378090482409e-02, 5.864547939986947e-03, 5.765502989152512e-02, 5.765502989152512e-02, 1.849909660060389e-05, 7.022013207562502e-03, 1.098689299638627e-02, 2.616883631447115e-02, 2.390925234059988e-05, 7.224474246197823e-03, -2.179312225268613e-02, 1.238558389331763e-02, 2.030071078449628e-02, -5.006130638584788e-03, -2.860680470518847e-04, -2.860680470518847e-04, -5.437864128337007e-03, 5.078057215672943e-02, 5.116166660491151e-02, 4.569586056566802e-02, 4.953391201724077e-02, 1.620467370862554e-02, 3.531096270464192e-02, -4.170389114727261e-02, 6.661169200995957e-02, 2.127108591843943e-03, 7.071488620299635e-02, 7.071488620299628e-02, 6.604817356048270e-03, 2.754959752424645e-02, 3.211129521651302e-02, 8.498991875805105e-02, -1.050313577488919e-02, 4.942986012981380e-02, 1.229091684502294e-02, 2.444191639129913e-03, 5.998258940643280e-03, 5.270752836787197e-02, 7.489902872754787e-03, 7.489902872754789e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
