
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_hf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.625897564720942e-01, -1.625916755444949e-01, -1.625982199250318e-01, -1.625697589077949e-01, -1.625849541037736e-01, -1.625849541037736e-01, -8.677665078292851e-02, -8.678720084736341e-02, -8.703911934462649e-02, -8.668967932616989e-02, -8.683005561290325e-02, -8.683005561290325e-02, -3.366001538265356e-02, -3.309773162141999e-02, -1.786055473141668e-02, -1.753797446793259e-02, -1.829807351650969e-02, -1.829807351650969e-02, 2.745048439498571e-02, 2.609725285945108e-02, -6.203354627103191e-02, 1.055205492306316e-02, 2.630665624660494e-02, 2.630665624660533e-02, -2.292206180528491e-02, -2.418325329659731e-02, -8.897131434088026e-02, -1.592755248253467e-02, -1.858924478675118e-02, -1.858924478675120e-02, -1.359436676876055e-01, -1.362423976450045e-01, -1.359606041981689e-01, -1.362242211259044e-01, -1.360935078873876e-01, -1.360935078873876e-01, -2.056608538972826e-02, -2.299527906223697e-02, -1.637690590776231e-02, -1.858465588583036e-02, -2.396087623230503e-02, -2.396087623230503e-02, -5.649035060934193e-02, -5.920307194671536e-02, -5.004472301140439e-02, -5.529038052687454e-02, -5.925808340134697e-02, -5.925808340134697e-02, -5.215071474961802e-02, 2.978167487221017e-02, -6.147637935310549e-02, -7.831591470902131e-02, -7.041821636381507e-03, -7.041821636381562e-03, -1.635852388338820e-02, -1.784830110361615e-02, -1.240042531449260e-02, -8.887052601824837e-02, -1.613840679025223e-02, -1.613840679025225e-02, -6.869346648873496e-02, -7.491664138655654e-02, -7.410695752928073e-02, -7.251543698251248e-02, -7.343550388627477e-02, -7.343550388627477e-02, -5.587227176930608e-02, -3.379592462712661e-02, -5.036596960642664e-02, -6.485231842089101e-02, -5.810745815945936e-02, -5.810745815945936e-02, -5.943523627476376e-02, 3.244502725037901e-02, 2.080489529179441e-02, -2.091082091947832e-02, 1.264014362543198e-03, 1.264014362543531e-03, -3.030777033878179e-02, -8.330703903405577e-02, -9.648071264063258e-02, -3.355467162477849e-02, -5.840092254662579e-02, -5.840092254662466e-02, -3.990473779805917e-02, -7.537657656463661e-03, -8.596614648877236e-03, -6.091507262757945e-02, -1.421956399564915e-02, -1.421956399564910e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_hf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.094548736372140e-01, -3.094511102362960e-01, -3.094464418284664e-01, -3.095024939482063e-01, -3.094714057672735e-01, -3.094714057672735e-01, -2.152085070369919e-01, -2.151800124487674e-01, -2.145385744458985e-01, -2.158557430554952e-01, -2.152676266104948e-01, -2.152676266104948e-01, -1.522972929660735e-01, -1.526784153218215e-01, -1.571074892058469e-01, -1.625247421658069e-01, -1.608809000421753e-01, -1.608809000421753e-01, -2.045641459159436e-02, -3.017897712692041e-02, -7.833045544972633e-02, 9.904754378168945e-02, 4.718554967700578e-02, 4.718554967700289e-02, -5.919548614223536e-02, -6.172558899936035e-02, -1.521316628540936e-01, -3.785285954047485e-02, -4.571172935957706e-02, -4.571172935957722e-02, -2.090529437863290e-01, -2.082707174338698e-01, -2.090401471793154e-01, -2.083488871891485e-01, -2.086449246309969e-01, -2.086449246309969e-01, -2.333914888424398e-01, -2.329036052276360e-01, -2.292398178976076e-01, -2.287801138461010e-01, -2.348418808851406e-01, -2.348418808851406e-01, -1.199649863275590e-01, -4.790597821996042e-02, -1.226723853436668e-01, -4.652493940525063e-02, -1.120837387520076e-01, -1.120837387520076e-01, 7.330425846536893e-02, 6.089734617417508e-02, 5.158130543954095e-02, -6.140934549218439e-02, 1.144924057074274e-01, 1.144924057074265e-01, -3.125177751537988e-02, -3.773254692869808e-02, -2.928653688191316e-02, -6.332543413481782e-02, -3.492632751509137e-02, -3.492632751509181e-02, -5.914052419871344e-02, -6.670738071746068e-02, -6.157277936775244e-02, -5.904868074636437e-02, -6.006051888852697e-02, -6.006051888852697e-02, -6.103841125229820e-02, -1.466093563777887e-01, -1.369004590353329e-01, -1.043278881287370e-01, -1.235586465836714e-01, -1.235586465836714e-01, -4.772815402647454e-02, -9.975511396226988e-03, -7.650858962191065e-02, -1.358554021060911e-01, -1.184497226971942e-01, -1.184497226971960e-01, -1.461728502591964e-01, -1.559670986400786e-01, -1.310154726229237e-01, -1.226453905620806e-01, 3.515127401976942e-02, 3.515127401975565e-02, -8.010528752001717e-02, -1.218503949410796e-02, -2.208241602196455e-02, 1.129501284491033e-02, -3.239828453092652e-02, -3.239828453092783e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.411502759007296e-10, 2.411328165517870e-10, 2.410873700195592e-10, 2.413469676034253e-10, 2.412063887347941e-10, 2.412063887347941e-10, 1.692424245788685e-06, 1.692041594195031e-06, 1.682795956380840e-06, 1.695680439214351e-06, 1.691019337244822e-06, 1.691019337244822e-06, 4.828361558042290e-03, 4.849971921638024e-03, 5.165949788550759e-03, 4.927716124582654e-03, 5.004571207766422e-03, 5.004571207766422e-03, 2.894544340378541e-01, 3.398719061093177e-01, 2.307838726048950e-03, 8.746033480711742e-02, 2.981099200902798e-01, 2.981099200903422e-01, 1.172060216250629e+04, 1.067508534576288e+04, 1.138803001210246e+02, 3.339864825018551e+04, 2.396556834891073e+04, 2.396556834891036e+04, 1.910878522850040e-08, 1.185748099534767e-08, 1.884393548788128e-08, 1.244265587562823e-08, 1.541608092496755e-08, 1.541608092496755e-08, 2.040400152396238e-05, 1.983356702816975e-05, 1.949206766835985e-05, 1.897284789915604e-05, 2.049492895978200e-05, 2.049492895978200e-05, 6.020911360293824e-03, -1.226382691767647e-02, 9.832571754943233e-03, -1.076466498204030e-02, 4.480377321840994e-03, 4.480377321840994e-03, 7.224890505029299e-01, 2.483086102593273e-02, 1.559872255379100e+00, -4.645061340822437e-05, -3.972854284646608e-01, -3.972854284646509e-01, 4.857793166950915e+04, 3.296353407091706e+04, 1.666508433484061e+05, 1.863876319029214e+01, 6.919771836408609e+04, 6.919771836408411e+04, -8.815310748894109e-02, -3.643991365522365e-02, -5.040784927024552e-02, -6.521831829457356e-02, -5.739634997104864e-02, -5.739634997104864e-02, -6.121533803837648e-02, 1.706368205191550e-02, 1.519496322775713e-02, 2.957994167939443e-03, 1.121518011151055e-02, 1.121518011151055e-02, -8.172952359291420e-03, 7.317154417738757e-02, 1.025364526299855e-01, 8.633051306672183e-02, 1.055599001805967e-01, 1.055599001805963e-01, 2.567121593811322e-02, 1.335882290362846e+02, 4.591556882472044e+01, 1.077683971757404e-01, 4.049179220838825e+00, 4.049179220839765e+00, 3.744382958158295e+03, 6.013510854987208e+05, 2.132606326640375e+05, 7.483226507774340e+00, 9.765172378975309e+04, 9.765172378975524e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.447260600769370e-05, 2.447475286006500e-05, 2.448191033718012e-05, 2.445009987904270e-05, 2.446710091423758e-05, 2.446710091423758e-05, 1.151075992789337e-04, 1.151704764898890e-04, 1.168607117237205e-04, 1.164745633834987e-04, 1.164053051629423e-04, 1.164053051629423e-04, -1.973612555729006e-03, -2.014988574642058e-03, -3.021212720586055e-03, -2.353008943321681e-03, -2.527022166360453e-03, -2.527022166360453e-03, 1.222072104921306e-02, 1.349300614684594e-02, -4.672866078268968e-03, -5.797098429708814e-02, -3.260468205962842e-02, -3.260468205962862e-02, -4.066491328873743e-02, -4.292711645280205e-02, -8.638935830204279e-02, -1.999168774366984e-02, -2.983194737508432e-02, -2.983194737508427e-02, 8.321643484580192e-04, 8.488971856151744e-04, 8.330501459622132e-04, 8.478141247852174e-04, 8.405424899640908e-04, 8.405424899640908e-04, 6.708834805391849e-04, 6.804556386424744e-04, 7.290015533742137e-04, 7.420854323526475e-04, 6.493694301983831e-04, 6.493694301983831e-04, 5.333504043027586e-03, 1.292900651816024e-02, 3.695979051737846e-03, 4.039122867560658e-03, 6.401426809050013e-03, 6.401426809050013e-03, -8.571427433050069e-02, -1.768528895871866e-02, -8.929829226937619e-02, 3.938881651325479e-04, -7.692768065457233e-02, -7.692768065457228e-02, -9.681693207466846e-03, -1.598547161807754e-02, -4.101561205264844e-02, -1.007557466587005e-01, -2.705335165749301e-02, -2.705335165749299e-02, 1.822949512607157e-01, 1.092639550060739e-01, 1.354551226895715e-01, 1.591977978514698e-01, 1.472350764190559e-01, 1.472350764190559e-01, 6.241290419124570e-02, 4.749781867937690e-03, 5.252459827522471e-03, 2.202933772598469e-02, 1.012531308360739e-02, 1.012531308360739e-02, 8.041283683892862e-03, 6.809214844013931e-03, 1.220673085321600e-02, 5.540901490999131e-03, 1.072234081733159e-02, 1.072234081733159e-02, 5.001520192048471e-03, -8.987904395859009e-02, -8.975232749557566e-02, 7.290996217900256e-03, -1.103464650860689e-01, -1.103464650860689e-01, -2.838969275789606e-02, -2.777494243432816e-03, -2.217340488047274e-02, -1.186402291082562e-01, -3.211450577556951e-02, -3.211450577556952e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
