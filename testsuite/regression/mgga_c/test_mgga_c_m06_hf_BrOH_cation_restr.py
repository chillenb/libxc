
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_hf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.455433381564190e-01, -1.455428256374313e-01, -1.455408059332501e-01, -1.455483869961872e-01, -1.455443783362873e-01, -1.455443783362873e-01, -1.214752602288315e-01, -1.214665116315530e-01, -1.212370023490067e-01, -1.213324895601159e-01, -1.213189575646705e-01, -3.484513915289911e-02, -9.303064091988449e-02, 2.623336310870994e-02, 3.496544515332600e-02, 3.100372924500538e-02, 3.192982594465654e-02, 3.192982594465654e-02, 2.822012263531481e-02, 2.720474538436418e-02, -1.235284693253258e-01, 9.487358236939025e-03, 2.669374008223740e-02, 2.669374008223746e-02, -2.267214027260130e-02, -2.370808252522309e-02, -8.024693560213153e-02, -1.383942416473656e-02, -1.703395197197237e-02, -1.703395197197237e-02, -1.359299702991440e-01, -1.362331588527890e-01, -1.359473911276068e-01, -1.044501203364720e-01, -1.360819507108730e-01, -1.360819507108730e-01, -1.101029574821330e-01, -1.089536885565104e-01, -1.110519780388674e-01, -1.099777389467846e-01, -1.090093386147180e-01, -1.567436574408287e-02, -4.333713410071754e-02, -6.653140933081544e-02, -2.639570752869819e-02, -4.331973204717293e-02, -4.777363712592564e-02, -6.164423561231446e-02, -7.545713451569418e-02, 2.967774357755304e-02, -7.220711590274484e-02, -7.318978982847696e-02, -7.682358737272577e-03, -7.682358737273021e-03, -1.531478969203941e-03, -1.355570403893082e-02, -1.054877927278388e-02, -5.180810376365775e-02, -1.801462311414532e-03, -1.255121697500028e-02, -8.673427145989632e-02, -8.100100492044479e-02, -5.301280627170343e-02, -8.467872049034064e-02, -8.384245740253508e-02, -8.384245740253508e-02, -8.510348578379118e-02, -3.184322841280146e-02, -4.765125811359805e-02, -6.334630396906504e-02, -5.535215013134290e-02, -5.641061418960818e-02, -6.195006639596265e-02, -7.147389690890918e-02, 2.364370626660983e-02, -6.001202963541673e-02, 7.882445610043587e-03, 7.882445610044031e-03, -6.215064061419596e-02, -7.886567408891819e-02, -8.619671313637485e-02, -1.921485067882089e-02, -6.628035085967217e-02, -5.474985363173157e-02, -3.063588276058753e-02, -3.889610064851398e-03, -7.899528134035045e-03, -5.799841674492634e-02, -1.167692346354554e-02, -1.167692346354551e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_hf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.228418288113720e-01, -1.228422113791296e-01, -1.228437980187684e-01, -1.228381301922405e-01, -1.228411159739548e-01, -1.228411159739548e-01, -7.591201763024560e-02, -7.591568186404302e-02, -7.601251148517910e-02, -7.597483250563294e-02, -7.597721816605355e-02, -2.587562848523155e-01, -4.514744384069570e-02, -1.029490709445803e-01, -7.922687695621566e-02, -9.064718336000099e-02, -8.813460071312373e-02, -8.813460071312373e-02, -1.036177811014427e-02, -1.796611682743310e-02, -5.010695728856826e-02, 1.136963098935283e-01, 7.114733754087355e-02, 7.114733754086866e-02, -5.913712399938871e-02, -6.161746274398829e-02, -1.585238687331388e-01, -3.728938285777841e-02, -4.531294279837333e-02, -4.531294279837333e-02, -2.106499135849162e-01, -2.098611955253362e-01, -2.106045438753446e-01, -9.711661445216881e-02, -2.102552615051858e-01, -2.102552615051858e-01, -6.437640752378886e-02, -6.497897718270548e-02, -6.390885055975973e-02, -6.444981601106436e-02, -6.494065034167167e-02, -2.140533428763537e-01, -1.532580145274965e-01, -1.338777400911059e-01, -1.500875033777594e-01, -1.508654248269968e-01, -1.518769396445444e-01, -5.225891326299762e-02, -8.772956865117874e-02, 7.086590138934185e-02, -9.072459736037616e-02, -2.169989838768678e-01, 1.077516414956339e-01, 1.077516414956363e-01, -2.034939843083162e-03, -3.657121833555405e-02, -2.878582213942033e-02, -8.514805304470044e-02, -2.444606520954942e-03, -3.396694190485611e-02, -6.723521967629312e-02, -8.553041859716073e-02, -5.617465700413050e-02, -7.343245070840319e-02, -7.613637846691394e-02, -7.613637846691394e-02, -6.892679604748619e-02, -1.455717348299900e-01, -1.423807213545645e-01, -1.246473179857096e-01, -1.358444788733352e-01, -5.142246337198948e-02, -1.455840539190219e-01, -3.234074998778380e-02, -5.796094750356218e-02, -3.941204513748132e-02, -9.595349021794553e-02, -9.595349021794464e-02, -4.488284602841157e-02, -1.587292390268685e-01, -1.455040604620301e-01, -1.237625314769267e-01, -8.538602501553989e-02, 8.326969127643497e-03, -7.822051423570028e-02, -1.108308698787344e-02, -2.188273041375656e-02, -6.116798198189749e-03, -3.171373686169162e-02, -3.171373686169272e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.706672438849270e-09, 2.706605937688868e-09, 2.706311230888747e-09, 2.707298612140958e-09, 2.706781132184225e-09, 2.706781132184225e-09, 2.114083191445117e-05, 2.113939775040024e-05, 2.109982129397349e-05, 2.110675935730759e-05, 2.111640641576939e-05, 1.281255358451920e-06, 5.444183723608825e-02, 9.074511409296113e-04, 7.379867291687909e-04, 8.337030319476065e-04, 8.111794388713530e-04, 8.111794388713530e-04, 1.480668747947684e-01, 1.685488559775303e-01, 2.788272294980598e-02, -2.466434552840739e-01, -1.230982669422555e-01, -1.230982669422629e-01, 1.172222406498901e+04, 1.067816351803001e+04, 1.198021661280995e+02, 3.341776292610797e+04, 2.398065387207552e+04, 2.398065387207552e+04, 2.645432109347174e-08, 1.923406692220043e-08, 2.604260178968730e-08, 1.966431411940437e-06, 2.285417172340640e-08, 2.285417172340640e-08, 3.334337963391670e-04, 3.195296393111486e-04, 3.441586895370428e-04, 3.313652303236112e-04, 3.207097955260472e-04, 1.515937765528808e-05, 8.259196263384345e-03, 4.464763941724142e-03, 9.143668407548740e-03, 9.954870327954869e-03, 7.969745138875030e-03, 7.072081043875988e-02, 1.446912895522028e+02, -5.145853314459103e-02, 1.407956781436162e+02, 3.411266916843568e-05, -2.033923637491026e-01, -2.033923637491638e-01, -5.311482835887091e+08, 3.300436871531259e+04, 1.668155591795783e+05, -6.401621787787552e+02, -2.867509667936060e+08, 6.930952075897262e+04, -8.530946917134184e-02, -2.629938097253006e-02, 2.167607914190007e-02, -5.511966017855646e-02, -4.656317243291373e-02, -4.656317243291373e-02, -8.106065620772046e-02, 1.626567641621366e-02, 1.581789592624492e-02, 9.146522745621950e-03, 1.386854282789193e-02, 1.150464379465082e-01, 4.488774187986052e-03, 9.554043545129643e+00, 5.398290394893455e-02, 1.022742782911998e+00, 5.748827836598580e-02, 5.748827836598648e-02, 2.855920632784962e-01, 1.365870059820373e+02, 5.105874668108130e+01, 7.938628901598890e-02, 2.491783596268470e+02, 6.928328821074369e+00, 3.770849398662137e+03, 6.015832374041916e+05, 2.132947062710598e+05, 9.809323426351758e+00, 9.776681352596740e+04, 9.776681352596841e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.848541461894513e-05, -1.848533616608335e-05, -1.848495324639036e-05, -1.848612211478415e-05, -1.848551448271697e-05, -1.848551448271697e-05, -4.218790034347658e-04, -4.218878909679233e-04, -4.221084234182228e-04, -4.219542729184776e-04, -4.220456967191752e-04, 3.005971975802133e-04, -5.680073573756467e-03, 5.643151180241743e-03, 5.027014469461403e-03, 5.389947126985842e-03, 5.311740172537710e-03, 5.311740172537710e-03, 1.996635954944238e-02, 2.318378564050871e-02, -3.594221756100147e-03, -4.956750821559026e-02, -1.957601366109979e-02, -1.957601366109960e-02, -4.100660400787876e-02, -4.359085101987769e-02, -9.614670487957284e-02, -2.242573189339307e-02, -3.197445456145120e-02, -3.197445456145120e-02, 8.286102991433119e-04, 8.454011689390591e-04, 8.295701995252251e-04, -2.236713170582056e-04, 8.369810175860975e-04, 8.369810175860975e-04, -1.089546315708583e-03, -1.081804050428099e-03, -1.094743137571998e-03, -1.088155262059981e-03, -1.082736129969380e-03, 9.513516109089836e-04, 2.937894079823112e-03, 1.225104679413916e-02, 5.491130288164070e-03, 3.113199116261347e-03, 2.917795812936320e-03, -7.893355305313097e-03, -5.397047383433335e-04, -1.343696813930758e-02, 3.152756424675156e-03, 4.370687871998201e-04, -7.721717150109159e-02, -7.721717150109127e-02, 1.753173939293551e-05, -2.068899568929151e-02, -4.679167747374066e-02, 1.462256832712463e-02, 1.064038348470717e-04, -3.398322188286046e-02, 3.171668537407183e-01, 1.231196246748265e-01, -8.197452070664140e-03, 2.176656362850500e-01, 1.895371477231931e-01, 1.895371477231931e-01, 2.841737107877512e-01, 5.102160661498521e-03, 4.062125057044195e-03, 1.784850205470748e-02, 7.374079133010940e-03, -9.635010626461889e-03, 5.895410586780815e-03, -2.690628968281793e-02, 2.099995268799574e-02, -1.738930983020210e-02, 2.196742055617578e-02, 2.196742055617559e-02, -1.180943814292721e-02, -9.482639741765274e-02, -1.016695862882747e-01, 1.293428255937015e-02, 5.165308672731145e-03, -1.205965140544352e-01, -3.716985791525042e-02, -7.193353008301156e-03, -2.360357237164833e-02, -1.264417875052216e-01, -3.797895933280693e-02, -3.797895933280701e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
