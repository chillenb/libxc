
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b94_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.177024121650911e-02, -7.177040833674488e-02, -7.177016975095325e-02, -7.176767446425616e-02, -7.176912160563391e-02, -7.176912160563391e-02, -5.015517751582729e-02, -5.015553823011257e-02, -5.015299000099983e-02, -5.003003183091747e-02, -5.009306862918122e-02, -5.009306862918122e-02, -3.362332318816392e-02, -3.346639529314124e-02, -2.951579370343172e-02, -2.915300246805705e-02, -2.935276501988546e-02, -2.935276501988546e-02, -7.279963359209610e-03, -7.656635061101856e-03, -4.851692560172471e-02, -4.881890206658934e-03, -3.356739168431835e-03, -3.356739168432787e-03, -4.206692819081726e-06, -5.112390417739637e-06, -3.266110648213366e-04, -2.104170593520366e-06, -2.176744283352055e-06, -2.176744283354608e-06, -1.035148785831480e-02, -1.923790506686033e-02, -1.136806010892978e-01, -6.049290720501482e-03, -8.953421329271113e-02, -3.108678541611926e-02, -1.095135712188806e-01, -1.854290470832792e-02, -2.537010064339611e-02, -2.548604658406077e-02, -2.620214507590284e-02, -3.452227457349164e-02, -4.216787198499800e-03, -1.018591473825876e-02, -4.340198667834571e-03, -3.037757964744308e-02, -2.516409639325930e-02, -2.125878335121670e-02, -7.551753376597915e-02, -1.808194912780021e-03, -8.259013828009441e-02, -3.994028607916992e-02, -3.858038767196974e-03, -5.406745608738239e-03, -1.980271372419990e-07, -5.977471555787466e-11, -6.219775358905232e-01, -1.001660403620099e-01, -6.003757361120264e-07, -1.628325355004396e+00, -3.614172705458193e-07, -6.799968737354148e-02, -6.807200187603414e-02, -9.597222104178112e-05, -6.810014207903381e-02, -1.401863422478823e-08, -6.870070483788063e-02, -2.120739152696917e-02, -5.238933401482849e-03, -5.529397936601571e-02, -1.880124681210000e-02, -2.737469192292587e-03, -4.234400410596560e-03, -4.403506444916733e-02, -5.278861252189232e-02, -6.613526097980633e-02, -8.821453895472618e-03, -1.135568738336610e-02, -2.045069914716420e-02, -6.586357396866278e-02, -5.187289472239124e-04, -1.995424591344834e-02, -6.314988586480129e-02, -2.234066658455758e-03, -1.165223561248841e+00, -2.300580248031741e+01, -6.345769537571755e-01, -4.160060320872208e-02, -1.030598996936440e+00, -1.030599926577991e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b94_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.722081475547243e-02, -4.722455266327526e-02, -4.722024373730469e-02, -4.722420053163771e-02, -4.721981676621995e-02, -4.722293046255720e-02, -4.722544817088153e-02, -4.723104587213778e-02, -4.721935629684982e-02, -4.722959090054344e-02, -4.721935629684982e-02, -4.722959090054344e-02, -5.344237085000176e-02, -5.338462332052623e-02, -5.343978198572000e-02, -5.337807372936487e-02, -5.333457888133390e-02, -5.328028805361014e-02, -5.356479940170266e-02, -5.349860961102936e-02, -5.349722302611187e-02, -5.336605715325570e-02, -5.349722302611187e-02, -5.336605715325570e-02, -4.811390654053870e-02, -4.647910009709581e-02, -4.835976417191036e-02, -4.639357642567300e-02, -4.743490870550939e-02, -4.931377392069881e-02, -4.863718207303671e-02, -4.790634274077883e-02, -3.763971821051080e-02, -5.709638806371036e-02, -3.763971821051080e-02, -5.709638806371036e-02, -2.184899882192408e-02, -1.946301481481202e-02, -2.267061520277148e-02, -1.988281477709572e-02, -5.792087520522452e-02, -4.482401088894924e-02, -1.610157073552650e-02, -1.474104424240961e-02, -9.003919170189440e-03, -3.291442211221970e-02, -9.003919170191143e-03, -3.291442211222426e-02, -4.529496487904551e-05, -4.600788380869738e-05, -5.214433349477378e-05, -5.301157108527289e-05, -1.814161387288234e-03, -1.739928948672446e-03, -1.733223247491165e-05, -1.614340687661383e-05, -2.773180704815530e-05, -2.700285083023788e-05, -2.773180704821620e-05, -2.700285083024360e-05, -2.233073958943501e-02, -2.183209639058086e-02, -3.575354543683563e-02, -3.571845057224644e-02, -1.324684821998866e-01, -1.327685716676422e-01, -1.391826542217242e-02, -1.396487312303865e-02, -7.248155113799237e-02, -7.241116641386995e-02, -4.879845553175056e-02, -4.672873000575967e-02, -1.728359928366705e-01, -1.729503364369753e-01, -3.931386454967326e-02, -3.933246511516222e-02, -5.295422525168363e-02, -5.248035678701520e-02, -5.305474274240288e-02, -5.256011442168414e-02, -5.227364193193092e-02, -5.336316918942501e-02, -6.556980954305834e-02, -6.750811473725540e-02, -9.725767057493454e-03, -9.839324456781012e-03, -2.009901102244288e-02, -2.008475652209000e-02, -1.061578602568937e-02, -9.434330401378617e-03, -3.258539644072989e-02, -3.033887692354596e-02, -3.441260843431049e-02, -3.963841962957942e-02, -3.197471370275157e-02, -3.692793889530935e-02, -2.946331943019895e-01, -2.845118701267540e-01, -5.049421480917405e-03, -4.996431426314096e-03, -3.212263012547908e-01, -3.029743132704132e-01, -4.046938485312244e-02, -4.050313729299244e-02, -1.574652572725046e-02, -1.368583742006138e-02, -2.417318202715386e-02, -2.204015448606011e-02, -7.294439569291981e-07, -7.924236117760676e-07, -1.944279908655225e-10, -1.873943024475278e-10, -4.473295956682410e+00, -3.988759473346333e+00, -4.273658221014985e-01, -4.505194912596762e-01, -4.221584455988054e-06, -4.590467778695694e-06, -4.638306735237843e+00, -4.704654125952215e+00, -1.126045844247159e-06, -1.110669946972951e-06, -8.129165373341445e-02, -8.054314058730271e-02, -8.023294728306320e-02, -7.949203206974445e-02, -2.730884483897236e-04, -2.723093748338163e-04, -7.978215906069643e-02, -7.905790323653245e-02, -4.464517079663278e-08, -4.408560688562071e-08, -7.571459343890449e-02, -7.518939913331614e-02, -3.945883434325235e-02, -3.882819515604288e-02, -1.199494917930061e-02, -1.183473654764809e-02, -5.420426138687830e-02, -5.582907257379410e-02, -3.239039084999988e-02, -3.201958207905601e-02, -6.660455102002309e-03, -6.581605660548728e-03, -9.761868402343011e-03, -9.691613669296771e-03, -1.500299231633708e-01, -1.482256754353967e-01, -1.238412386658649e-01, -1.205144685328280e-01, -8.149046977230964e-02, -8.051400293306454e-02, -1.995032395138965e-02, -1.992375509714589e-02, -2.521550560613795e-02, -2.515600314158859e-02, -3.754553883716007e-02, -3.663068671101104e-02, -1.001237297720243e+00, -9.871309578964650e-01, -2.668027677362179e-03, -2.277600758812047e-03, -3.383589938847401e-02, -3.172310784249643e-02, -3.335915724690377e-01, -2.798861345048239e-01, -9.792195862507883e-03, -1.007868783043714e-02, -3.446510873695121e+00, -3.254833935444247e+00, -9.660678210101151e+00, -4.078592321001505e+00, -1.013480475783158e+01, -9.217931570707048e+00, -3.105576143783026e-01, -3.220290223541582e-01, -3.733932914805822e+00, -5.047796247587142e+00, -3.733939485239274e+00, -5.047808921217279e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b94_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.703035462614599e-10, 0.000000000000000e+00, 2.702977125598611e-10, 2.702987755815213e-10, 0.000000000000000e+00, 2.702947132161990e-10, 2.702839385494409e-10, 0.000000000000000e+00, 2.702707012382832e-10, 2.703316861238911e-10, 0.000000000000000e+00, 2.703385107658704e-10, 2.702966990244715e-10, 0.000000000000000e+00, 2.703135596330563e-10, 2.702966990244715e-10, 0.000000000000000e+00, 2.703135596330563e-10, 1.728458180310559e-06, 0.000000000000000e+00, 1.730041901232734e-06, 1.728456567899899e-06, 0.000000000000000e+00, 1.730199497804501e-06, 1.730319502969026e-06, 0.000000000000000e+00, 1.730794935752412e-06, 1.721716136476246e-06, 0.000000000000000e+00, 1.722989737483558e-06, 1.730194901384927e-06, 0.000000000000000e+00, 1.723618405130291e-06, 1.730194901384927e-06, 0.000000000000000e+00, 1.723618405130291e-06, 3.050020694697571e-03, 0.000000000000000e+00, 3.100037752599961e-03, 3.026928216922272e-03, 0.000000000000000e+00, 3.089375238848573e-03, 2.672891157426209e-03, 0.000000000000000e+00, 2.592815090357535e-03, 2.541011179855545e-03, 0.000000000000000e+00, 2.556931417864021e-03, 3.000996722562087e-03, 0.000000000000000e+00, 2.198159545738924e-03, 3.000996722562087e-03, 0.000000000000000e+00, 2.198159545738924e-03, 3.081060127402105e-01, 0.000000000000000e+00, 2.680490456340865e-01, 3.153938078886562e-01, 0.000000000000000e+00, 2.683491650470488e-01, 2.080806517010899e-03, 0.000000000000000e+00, 2.096278822016023e-03, 4.715609631409064e-01, 0.000000000000000e+00, 4.241954948790040e-01, 1.935623938627945e-01, 0.000000000000000e+00, 1.575357065624056e+00, 1.935623938629044e-01, 0.000000000000000e+00, 1.575357065624144e+00, 2.836597227808725e+01, 0.000000000000000e+00, 2.582315520563558e+01, 2.848203962055718e+01, 0.000000000000000e+00, 2.569197208955115e+01, 3.403095417873826e+00, 0.000000000000000e+00, 3.037383428332930e+00, 4.462502533407253e+01, 0.000000000000000e+00, 4.352673723819704e+01, 2.925391278120511e+01, 0.000000000000000e+00, 1.233385862706647e+02, 2.925391278127796e+01, 0.000000000000000e+00, 1.233385862706704e+02, 9.143550815703092e-09, 0.000000000000000e+00, 1.197026567759106e-08, 3.418572162623691e-08, 0.000000000000000e+00, 3.457103496433533e-08, 3.777531190381009e-07, 0.000000000000000e+00, 3.790134150791774e-07, 4.033248296808298e-09, 0.000000000000000e+00, 3.801283967604470e-09, 2.960219619220413e-07, 0.000000000000000e+00, 2.962889128741488e-07, 8.838088362519716e-08, 0.000000000000000e+00, 1.007662288076205e-07, 4.582391195240455e-05, 0.000000000000000e+00, 4.579863750492779e-05, 4.345511084294885e-06, 0.000000000000000e+00, 4.351959906277299e-06, 8.876321515927171e-06, 0.000000000000000e+00, 8.869050458339542e-06, 8.800117148792158e-06, 0.000000000000000e+00, 8.667985340116010e-06, 8.897630857412160e-06, 0.000000000000000e+00, 8.938872071796156e-06, 1.706245695923567e-05, 0.000000000000000e+00, 1.600898730091860e-05, 1.599520496310090e-04, 0.000000000000000e+00, 1.173533469398286e-04, 4.708982841544438e-04, 0.000000000000000e+00, 4.616179256120729e-04, 1.954644055248312e-04, 0.000000000000000e+00, 2.327336294313288e-04, 9.473426840999333e-03, 0.000000000000000e+00, 7.439810204325338e-03, 3.812140859275290e-03, 0.000000000000000e+00, 5.361830538372849e-03, 2.596129284721613e-03, 0.000000000000000e+00, 3.632406134923743e-03, 5.294668612800927e+01, 0.000000000000000e+00, 5.083988387153097e+01, 1.861798562509259e-02, 0.000000000000000e+00, 1.854026194332097e-02, 8.197060901500055e+01, 0.000000000000000e+00, 6.563973422523352e+01, 2.370037236764830e-05, 0.000000000000000e+00, 2.377690322655700e-05, 1.016195317930714e+00, 0.000000000000000e+00, 9.456188551129876e-01, 1.854209596433642e+00, 0.000000000000000e+00, 1.855356465988493e+00, 2.110456807044096e+00, 0.000000000000000e+00, 2.203100798400623e+00, 1.085748121310190e-06, 0.000000000000000e+00, 1.200510880904819e-06, 1.264410050175483e+08, 0.000000000000000e+00, 1.004051212063651e+08, 3.921252873433625e+02, 0.000000000000000e+00, 3.825155716984549e+02, 1.661418064065801e+01, 0.000000000000000e+00, 2.479733071964247e+01, 1.161488735602025e+08, 0.000000000000000e+00, 3.242366076741625e+07, 1.395130859868164e-11, 0.000000000000000e+00, 1.350849381433725e-11, 1.405816554563033e-02, 0.000000000000000e+00, 1.380712641872500e-02, 1.392714902716352e-02, 0.000000000000000e+00, 1.367851409443624e-02, 1.597130542941923e-07, 0.000000000000000e+00, 1.925114491930330e-07, 1.387219508750512e-02, 0.000000000000000e+00, 1.362579176517663e-02, 6.066562521898981e-14, 0.000000000000000e+00, 5.983047419660135e-14, 1.552167325833554e-02, 0.000000000000000e+00, 1.528685588356562e-02, 9.286177593068615e-03, 0.000000000000000e+00, 9.195899164597768e-03, 4.240919403854390e-04, 0.000000000000000e+00, 4.054031399908452e-04, 1.619165895446721e-02, 0.000000000000000e+00, 1.632590902333135e-02, 4.846355770673105e-03, 0.000000000000000e+00, 4.745379056085522e-03, 1.115256285516264e-04, 0.000000000000000e+00, 1.113950882550822e-04, 6.902410156314668e-05, 0.000000000000000e+00, 7.085924058827018e-05, 1.197435202927019e+00, 0.000000000000000e+00, 1.167338286432183e+00, 5.374793073111827e-01, 0.000000000000000e+00, 5.141168301463298e-01, 1.475735468207053e-01, 0.000000000000000e+00, 1.442449902623480e-01, 1.889923213141040e-02, 0.000000000000000e+00, 1.868768789802818e-02, 3.157126386224863e-02, 0.000000000000000e+00, 3.106625953518349e-02, 1.273665721625847e-02, 0.000000000000000e+00, 1.212565692602413e-02, 3.535948781924870e+03, 0.000000000000000e+00, 3.435201725953716e+03, 2.030294798627325e+00, 0.000000000000000e+00, 1.543889051130364e+00, 6.262000582520225e-02, 0.000000000000000e+00, 5.838156296834469e-02, 1.584591146337585e+02, 0.000000000000000e+00, 1.258682109220536e+02, 2.351981100310375e+00, 0.000000000000000e+00, 2.650064361692884e+00, 1.017209646791139e+06, 0.000000000000000e+00, 8.805968676985101e+05, 7.647778386141472e+09, 0.000000000000000e+00, 7.578119387293233e+09, 4.425547876196109e+08, 0.000000000000000e+00, 3.455207150485756e+08, 1.819152340138057e+02, 0.000000000000000e+00, 1.690079743786615e+02, 1.444361394250891e+08, 0.000000000000000e+00, 4.603737521686959e+07, 1.444362452098042e+08, 0.000000000000000e+00, 4.603748567789944e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b94_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [2.558415688169076e-06, 2.558269704405738e-06, 2.558377021792148e-06, 2.558250656323113e-06, 2.558312088943404e-06, 2.558090025843703e-06, 2.558629192122215e-06, 2.558629105261058e-06, 2.558313319057418e-06, 2.558492006906264e-06, 2.558313319057418e-06, 2.558492006906264e-06, 9.865151056486910e-05, 9.875178115952146e-05, 9.864978584359530e-05, 9.876085108056515e-05, 9.874099867773046e-05, 9.876576606091595e-05, 9.821201993644396e-05, 9.829737306088170e-05, 9.872660325122275e-05, 9.830166136118666e-05, 9.872660325122275e-05, 9.830166136118666e-05, 1.203381546279468e-03, 1.239227274711326e-03, 1.186344570789672e-03, 1.230999666858660e-03, 9.438206977793111e-04, 8.903989635745330e-04, 8.957508747726897e-04, 9.064114360424772e-04, 1.198912829032400e-03, 6.787240515064836e-04, 1.198912829032400e-03, 6.787240515064836e-04, 1.166719840345533e-03, 9.858848017769678e-04, 1.279089002706851e-03, 1.061233178741333e-03, 1.422770146139903e-03, 1.570218711060547e-03, 8.142379222827448e-04, 6.612561465182601e-04, 3.294010821448761e-04, 1.809849767886772e-03, 3.294010821445727e-04, 1.809849767886924e-03, 9.535719783897970e-07, 7.306753743211136e-07, 1.232423666398018e-06, 9.393675248272367e-07, 6.194003997230894e-05, 5.418628990240284e-05, 6.230872106306638e-07, 5.339744403802168e-07, 4.122588212542631e-07, 2.136777244337879e-06, 4.122588212545041e-07, 2.136777244338211e-06, 9.516951803959674e-07, 1.224193992382143e-06, 4.349580616058171e-06, 4.398105176322573e-06, 3.447462443805538e-08, 2.729721299099046e-08, 3.547633898651162e-07, 3.365826390132586e-07, 1.224227261600602e-05, 1.238173177246201e-05, 1.363011731986321e-05, 1.569632684314778e-05, 1.530576275484150e-08, 2.065372621935469e-08, 3.017171014274688e-05, 3.018724946893524e-05, 6.757856899324438e-05, 6.774001236563277e-05, 6.832599148125518e-05, 6.743295767833625e-05, 7.173550144382142e-05, 7.132808432085193e-05, 1.559776667595602e-04, 1.437708542960230e-04, 1.790912533196636e-05, 1.346861501295079e-05, 9.080226589546166e-05, 8.886560568321639e-05, 1.820698107432587e-05, 2.106105915179481e-05, 2.063675062942649e-03, 1.688722186348863e-03, 9.259662006652897e-04, 1.230081485710956e-03, 5.764988645075133e-04, 7.697381044301517e-04, 6.115990545183389e-05, 6.622400949513857e-05, 4.297859065812074e-05, 4.275127719215911e-05, 1.212113217231966e-06, 1.057393782634395e-06, 2.140659422487782e-04, 2.145762177079511e-04, 8.182686258940717e-04, 7.561225475436840e-04, 1.717877961022579e-03, 1.772749820037020e-03, 9.323873129214949e-09, 1.041382130848804e-08, 2.507190000722832e-15, 2.575942714009328e-15, -5.429828130040597e-13, 5.562356584238135e-12, 5.121270737650687e-05, 2.103062446995837e-05, 1.511014025752617e-07, 6.639477833103944e-08, 2.413342543075264e-09, 5.138578576893160e-10, 3.637428495129640e-13, 3.525078581796033e-13, 1.330496505313483e-12, 1.307946959159590e-12, 4.463570702841610e-15, 4.363959076235856e-15, 8.637074639780215e-09, 9.862828305454173e-09, 1.537974444349091e-11, 1.110000960338241e-11, 1.146745901697241e-15, 1.125054017555353e-15, 1.559915606293182e-14, 1.457077431732243e-14, 1.141632113004541e-03, 1.137939968507464e-03, 3.408446505201873e-05, 3.262936939027239e-05, 5.281493898897323e-04, 3.596300649544776e-04, 6.811300193887556e-04, 6.690222804371546e-04, 8.029427711313107e-06, 7.994531680754536e-06, 1.165490140070672e-05, 1.190681920051569e-05, 2.703263386420528e-07, 2.611056645837111e-07, 1.458789847790507e-07, 1.408573264231136e-07, 2.309717169138798e-05, 2.020867694555601e-05, 3.859999538546569e-04, 3.812922554542908e-04, 7.219784964725543e-04, 7.088931090382470e-04, 1.235125198597647e-03, 1.179092071687401e-03, 1.466989517030124e-05, 2.923059330567754e-05, 8.892959520496557e-05, 6.620197082978440e-05, 2.573491973783839e-03, 2.394531082694907e-03, 2.714079535075759e-06, 3.470284657905965e-06, 5.406080390597091e-04, 6.460039999288694e-04, 5.544866801923311e-08, 2.079316567692823e-07, 6.627721027777612e-06, 1.784915722856111e-06, 2.030504668906309e-09, 2.658703389335645e-09, 1.587267877907258e-02, 7.408044925728300e-04, 6.964277722271305e-08, 1.365272707207764e-08, 2.309452221601276e-08, 3.465416088886433e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b94_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.090338152378445e-05, -2.090284963556294e-05, -2.090321518907207e-05, -2.090276486491962e-05, -2.090275588657113e-05, -2.090188269674485e-05, -2.090415925480374e-05, -2.090420928520584e-05, -2.090297081902008e-05, -2.090347543118117e-05, -2.090297081902008e-05, -2.090347543118117e-05, -5.768514816383287e-04, -5.773563957431072e-04, -5.768563539385842e-04, -5.774110514645440e-04, -5.775756448965235e-04, -5.777700256815981e-04, -5.748139151361115e-04, -5.752633406208425e-04, -5.771414719815397e-04, -5.755933714078420e-04, -5.771414719815397e-04, -5.755933714078420e-04, -7.260717931132802e-03, -7.467890938446695e-03, -7.172154570634516e-03, -7.427601787627292e-03, -5.945843823746827e-03, -5.649333987501720e-03, -5.716325096621433e-03, -5.789604255422140e-03, -7.396915788804982e-03, -4.452193881215340e-03, -7.396915788804982e-03, -4.452193881215340e-03, -1.197611452231041e-02, -1.168287167139583e-02, -1.271818614777242e-02, -1.232621934727572e-02, -7.508823084207027e-03, -8.353492124551526e-03, -8.331807066329801e-03, -7.809530012454801e-03, -8.565655438547178e-03, -1.076424846993353e-02, -8.565655438552039e-03, -1.076424846993414e-02, -4.485091115340700e-05, -4.899081488842198e-05, -5.181791063434473e-05, -5.746209192734466e-05, -1.064412010013607e-03, -1.118780987886526e-03, -1.532684278492449e-05, -1.421469561258469e-05, -3.283913820529882e-05, -2.551453892654369e-05, -3.283913820538059e-05, -2.551453892654489e-05, -1.024514032760620e-05, -1.340277385961090e-05, -3.832578566999142e-05, -3.872918282198679e-05, -4.232782020180459e-04, -4.243795909644262e-04, -4.521489675421205e-06, -4.258373437834001e-06, -3.317802846211419e-04, -3.318365309235976e-04, -9.905695690226625e-05, -1.128557780897367e-04, -2.725967239327680e-03, -2.724050724444802e-03, -2.642591533547909e-04, -2.644353103761946e-04, -5.183030990514250e-04, -5.205703347757088e-04, -5.237949505740332e-04, -5.187241493762695e-04, -5.433146066110014e-04, -5.386930713909479e-04, -1.041882073912032e-03, -9.647671954273358e-04, -2.573994958324664e-04, -1.873524629579460e-04, -9.670247740428586e-04, -9.492585254752001e-04, -2.347774987449130e-04, -3.115209926514726e-04, -1.285061974658502e-02, -1.113180421938498e-02, -6.901247198152421e-03, -8.326599914304185e-03, -4.699860423214399e-03, -5.640907968895387e-03, -3.150983579730249e-01, -3.112988415537196e-01, -7.653170280465957e-04, -7.735893964395648e-04, -3.611298687331769e-01, -3.383457337998921e-01, -1.331336529767062e-03, -1.333836184210267e-03, -9.059950310953488e-03, -1.002226391159662e-02, -1.653131687714320e-02, -1.966423580883663e-02, -3.060297967916863e-07, -3.585684169785701e-07, -3.321751268470302e-13, -3.842161174265618e-13, -1.617467685206421e+01, -1.525579517456272e+01, -5.650477217873072e-01, -5.614303748332479e-01, -2.264371850899009e-06, -8.753652110360440e-06, -1.583010594935570e+01, -1.144580639389063e+01, -2.255793920485083e-11, -2.209623143594128e-11, -2.234048139816735e-02, -2.219956876481272e-02, -2.226739187743850e-02, -2.212695380920525e-02, -2.566511668815824e-07, -3.129598592536592e-07, -2.223564300159110e-02, -2.209622864101431e-02, -9.724049988691318e-14, -9.702392788117535e-14, -2.313045794070503e-02, -2.300719673935556e-02, -8.740257157739646e-03, -8.768266416918174e-03, -4.582654275044672e-04, -4.439290380834818e-04, -1.997495668281618e-02, -2.035378451066884e-02, -5.593875787558013e-03, -5.538591046721688e-03, -1.287277580862547e-04, -1.300152909106724e-04, -1.630373050231860e-04, -1.681915084239721e-04, -9.915176330832437e-02, -9.834838316423423e-02, -7.659675380608762e-02, -7.549401779895622e-02, -4.879455028826148e-02, -4.848949428915846e-02, -4.146319912608820e-03, -4.095571631843660e-03, -6.926448604263983e-03, -6.808444787501779e-03, -9.318472874679616e-03, -9.055983388501231e-03, -1.045057038481228e+00, -1.036264385613622e+00, -1.460462218375042e-03, -1.225877493071972e-03, -1.828415196940431e-02, -1.782942743917166e-02, -4.370433097252927e-01, -4.086827028543434e-01, -6.486957893629377e-03, -8.604519426635130e-03, -4.707554637706298e+00, -4.534832037318155e+00, -4.556250828524980e+01, -4.545777810767366e+01, -2.221183463534884e+01, -2.086425350299199e+01, -4.412776081860584e-01, -4.304120095954492e-01, -1.672964740424914e+01, -1.251402708581561e+01, -1.672965965700657e+01, -1.251405711168722e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
