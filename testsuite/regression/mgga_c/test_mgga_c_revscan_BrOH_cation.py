
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revscan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.200618888079903e-01, -1.200589193208360e-01, -1.200469534547645e-01, -5.793397714172803e-02, -4.094072180907800e-02, -2.786950897647975e-02, -4.084504977482120e-02, -2.369870112757064e-02, -2.372895459562709e-02, -2.371680241356214e-02, -2.371806675117795e-02, -4.097471981191756e-02, -9.209066854733836e-02, -4.095721961086295e-02, -1.729745053364398e-02, -2.800541807745622e-02, -9.383655977119527e-02, -1.742722848699034e-02, -2.020361648999926e-02, -2.810913023188464e-02, -2.624753207223962e-02, -8.875492469296897e-03, -3.501042216735804e-03, -3.682368571037989e-03, -8.351624753780518e-04, -8.515161605255181e-04, -4.895465253284186e-03, -4.082714967391257e-04, 1.263073074362102e-04, 1.263073074362102e-04, -3.810811826182533e-02, -2.788443111290905e-02, -2.787471375442275e-02, -2.788380927917933e-02, -4.863232155125885e-02, -3.807467833649653e-02, -3.741894161245411e-02, -3.804016162275355e-02, -2.207604669276625e-02, -2.225741590014066e-02, -5.002689663195786e-02, -3.800408735013874e-02, -3.461493497446062e-02, -2.400900374679139e-02, -2.116111105962286e-02, -2.236264626997906e-02, -3.213522945800815e-02, -2.266375014855836e-02, -6.108866513952610e-03, -1.887452697292419e-02, -1.086704371045055e-02, -2.541330958076782e-02, -1.411117359951081e-02, -1.411117359951081e-02, -2.701866545314280e-04, 6.769131111493144e-05, -3.583296792484129e-04, -8.012970842163146e-03, -3.777549999032780e-04, -3.777549999032741e-04, -2.488795781090894e-02, -2.459776636489861e-02, -3.206868481965009e-02, -2.743956733730459e-02, -3.142844475763382e-02, -2.765965842353883e-02, -2.699092685509070e-02, -4.674561155013409e-02, -3.362196298610735e-02, -2.349832746706745e-02, -2.299081966017411e-02, -3.267734386063854e-02, -4.305029634791282e-02, -2.188720578216435e-02, -2.388118336336212e-02, -3.038619986251920e-02, -2.707055629110412e-02, -2.702624691572547e-02, -2.031364335034529e-02, -2.272569398754655e-02, -2.815304275195998e-03, -3.224920860382053e-02, -5.150895014788661e-03, -5.150895014788698e-03, -8.241536973379981e-03, 7.831788930686594e-06, -2.346684556236356e-03, -3.583147427393759e-02, 8.784580540508689e-05, -4.666545554963289e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revscan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.584976066172566e-02, 3.584904457292152e-02, 3.584943684118542e-02, 3.584822935484814e-02, 3.584589021153627e-02, 3.584722506236464e-02, -5.430666679520122e-02, -5.430852037220762e-02, -5.732000227558606e-02, -5.732193382607846e-02, -4.554769957114270e-02, -4.554881870176740e-02, -7.949824735272479e-02, -7.949995197240907e-02, -4.849077583859127e-02, -4.849193916083844e-02, -4.848125250114465e-02, -4.847971336907204e-02, -4.848552965546833e-02, -4.848448096004998e-02, -4.849850223176735e-02, -4.847054673572887e-02, -7.967065641798393e-02, -7.962366721515726e-02, -5.438982955840616e-02, -5.333297609038910e-02, -7.348208038148160e-02, -7.284043209505808e-02, -4.462974685002932e-02, -4.500650137554747e-02, -5.357503442657445e-02, -5.339551413674980e-02, -5.267022180915369e-02, -6.967189524576808e-02, -4.293297179199736e-02, -4.654082083530006e-02, -3.906413251803677e-02, -3.674422666734940e-02, -5.326806853219727e-02, -4.977335470670318e-02, -5.274825134396397e-02, -5.044922596852432e-02, -4.467535051470400e-02, -4.429200845021009e-02, -8.291154529276246e-03, -3.349127638825830e-02, -9.245462834199478e-03, -3.434201237415608e-02, -1.637051686819711e-03, -1.555665647726413e-03, -1.674137255140891e-03, -1.579598693531255e-03, -9.334042339737777e-03, -8.807558531726208e-03, -7.812786425735291e-04, -7.917615730065405e-04, 2.762132651478211e-04, -3.032876849708117e-05, 2.762132651478211e-04, -3.032876849708117e-05, -4.666524986025434e-02, -4.669876045070135e-02, -4.294053223212276e-02, -4.296213455036936e-02, -4.297836433798947e-02, -4.299979562741248e-02, -4.294319488923803e-02, -4.296431067144164e-02, -3.855856248044194e-02, -3.860630874397006e-02, -4.659772773211507e-02, -4.663180679235490e-02, -7.746273959613593e-02, -7.746729434890073e-02, -7.847258974520116e-02, -7.849803156387795e-02, -4.804764400286811e-02, -4.792744720069419e-02, -4.804956029402362e-02, -4.792331998457701e-02, -9.963762637715599e-02, -1.001965313265329e-01, -7.823728558032138e-02, -7.864639678726695e-02, -5.094628140552054e-02, -5.129446014967259e-02, -3.870609796793712e-02, -3.867176462011657e-02, -4.418009898181662e-02, -4.177015726624014e-02, -4.262146772440861e-02, -4.031660443562172e-02, -4.568238088983675e-02, -5.174959362493467e-02, -3.940017322409540e-02, -4.305530627039548e-02, -6.067913969039897e-02, -6.049647177385276e-02, -3.615937334870515e-02, -3.591669666318163e-02, -2.091763922282047e-02, -1.969777826218715e-02, -4.525096078160987e-02, -4.528694118905446e-02, -2.763162910883565e-02, -2.576476894525097e-02, -2.763162910883565e-02, -2.576476894525097e-02, -5.308078592664367e-04, -5.152124188590796e-04, -1.072690512445497e-02, -1.072418892708625e-02, -7.104320119821677e-04, -6.796643280130647e-04, -1.489320430007236e-02, -1.479146383488121e-02, -8.581441168061556e-04, -6.784969399909217e-04, -8.581441168061510e-04, -6.784969399909187e-04, -3.033496657743306e-02, -3.003242538529075e-02, -3.317596203025940e-02, -3.287394136448767e-02, -2.242264900845038e-02, -2.198434007587096e-02, -2.866644556071209e-02, -2.831738236566221e-02, -2.285590359647689e-02, -2.243201239420762e-02, -2.894904243884275e-02, -2.859403044184133e-02, -2.812160864481706e-02, -2.783010051328550e-02, -7.449409420258307e-02, -7.397801570409425e-02, -4.581087927226953e-02, -4.524892663302708e-02, -3.768406045668320e-02, -3.742418450507907e-02, -3.914062134177417e-02, -3.887203778406710e-02, -4.143130994871761e-02, -4.098245500325273e-02, -3.373615029209940e-02, -3.345657599947083e-02, -4.153056260261282e-02, -4.116574209893853e-02, -4.477618748069283e-02, -4.404745724989821e-02, -5.908435427801073e-02, -5.866327973626394e-02, -5.237773640378225e-02, -5.240205494164329e-02, -5.231830474919853e-02, -5.234254819975656e-02, -4.250346544595858e-02, -4.206423235828488e-02, -2.796641603317253e-02, -2.772229989167171e-02, -1.102239583846981e-01, -1.099337046051088e-01, -5.495027587023162e-02, -5.330672581975882e-02, -6.314257877714527e-02, -6.225916644596417e-02, -6.314257877714669e-02, -6.225916644596559e-02, -1.061461938670579e-02, -1.023176084124694e-02, -5.363531460984240e-01, -5.363531303517912e-01, -3.128039708799592e-03, -2.962636550752109e-03, -4.290482229871258e-02, -4.190046105754850e-02, 1.192842280398799e-04, 1.756468201401926e-04, -1.041068969995875e-03, -8.424995727012031e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.076436691252119e-09, 1.215287338250424e-08, 6.076436691252119e-09, 6.076189439427737e-09, 1.215237887885547e-08, 6.076189439427737e-09, 6.075140640929385e-09, 1.215028128185877e-08, 6.075140640929385e-09, 6.364177773172250e-10, 1.272835554634450e-09, 6.364177773172250e-10, 2.869493296573012e-10, 5.738986593146024e-10, 2.869493296573012e-10, 9.110351992180230e-11, 1.822070398436046e-10, 9.110351992180230e-11, 9.304225093218617e-07, 1.860845018643723e-06, 9.304225093218617e-07, 3.238915487820637e-07, 6.477830975641275e-07, 3.238915487820637e-07, 3.257200536820260e-07, 6.514401073640519e-07, 3.257200536820260e-07, 3.248325342472991e-07, 6.496650684945982e-07, 3.248325342472991e-07, 3.250983065182021e-07, 6.501966130364041e-07, 3.250983065182021e-07, 9.418581771903783e-07, 1.883716354380756e-06, 9.418581771903783e-07, 1.360729090337151e-02, 2.721458180674302e-02, 1.360729090337151e-02, 2.722461787614218e-03, 5.444923575228436e-03, 2.722461787614218e-03, 6.317359293979219e-04, 1.263471858795844e-03, 6.317359293979219e-04, 1.000958550718048e-03, 2.001917101436097e-03, 1.000958550718048e-03, 1.519513713304108e-02, 3.039027426608216e-02, 1.519513713304108e-02, 6.306011731189530e-04, 1.261202346237906e-03, 6.306011731189530e-04, 3.783968512292132e-01, 7.567937024584265e-01, 3.783968512292132e-01, 7.929751718513668e-01, 1.585950343702734e+00, 7.929751718513668e-01, 2.524591604230881e-04, 5.049183208461763e-04, 2.524591604230881e-04, 8.806645753461593e-01, 1.761329150692319e+00, 8.806645753461593e-01, 7.511870250080323e-02, 1.502374050016065e-01, 7.511870250080323e-02, 8.832673846399967e-02, 1.766534769279994e-01, 8.832673846399967e-02, 1.636843002775581e+02, 3.273686005551161e+02, 1.636843002775581e+02, 1.216512486105621e+02, 2.433024972211242e+02, 1.216512486105621e+02, 3.334955589357408e+00, 6.669911178714816e+00, 3.334955589357408e+00, 3.561063722173338e+02, 7.122127444346679e+02, 3.561063722173338e+02, -2.144873610752199e+01, -4.289747221504399e+01, -2.144873610752199e+01, -2.144873610752213e+01, -4.289747221504425e+01, -2.144873610752213e+01, 3.402172560293744e-07, 6.804345120587488e-07, 3.402172560293744e-07, 1.375607605839241e-07, 2.751215211678482e-07, 1.375607605839241e-07, 1.369756205026466e-07, 2.739512410052931e-07, 1.369756205026466e-07, 1.375240441164630e-07, 2.750480882329260e-07, 1.375240441164630e-07, 5.999955640455808e-07, 1.199991128091162e-06, 5.999955640455808e-07, 3.400026686832816e-07, 6.800053373665631e-07, 3.400026686832816e-07, 8.032404848542188e-06, 1.606480969708438e-05, 8.032404848542188e-06, 8.524867500736791e-06, 1.704973500147358e-05, 8.524867500736791e-06, 4.757899592326812e-06, 9.515799184653625e-06, 4.757899592326812e-06, 4.759436407476981e-06, 9.518872814953959e-06, 4.759436407476981e-06, 2.187678082288666e-05, 4.375356164577333e-05, 2.187678082288666e-05, 8.496606978842022e-06, 1.699321395768404e-05, 8.496606978842022e-06, 9.172531570538168e-03, 1.834506314107634e-02, 9.172531570538168e-03, 3.199541211969417e-03, 6.399082423938836e-03, 3.199541211969417e-03, 3.535196790792004e-03, 7.070393581584008e-03, 3.535196790792004e-03, 3.821433276683234e-03, 7.642866553366465e-03, 3.821433276683234e-03, 7.727982987845397e-03, 1.545596597569079e-02, 7.727982987845397e-03, 3.090612825234641e-03, 6.181225650469281e-03, 3.090612825234641e-03, 3.833475782270736e+00, 7.666951564541472e+00, 3.833475782270736e+00, 1.870461996107804e-01, 3.740923992215610e-01, 1.870461996107804e-01, 6.673681471971035e-01, 1.334736294394206e+00, 6.673681471971035e-01, 1.074008061733381e-05, 2.148016123466762e-05, 1.074008061733381e-05, 6.246045567071626e-01, 1.249209113414325e+00, 6.246045567071626e-01, 6.246045567071629e-01, 1.249209113414325e+00, 6.246045567071629e-01, 3.738352222786760e+02, 7.476704445573523e+02, 3.738352222786760e+02, 1.886397376278873e+04, 3.772794752557747e+04, 1.886397376278873e+04, 1.990415277571771e+03, 3.980830555143542e+03, 1.990415277571771e+03, 1.659284144540035e+00, 3.318568289080070e+00, 1.659284144540035e+00, 6.914201907264495e+02, 1.382840381452899e+03, 6.914201907264495e+02, 6.914201907264501e+02, 1.382840381452900e+03, 6.914201907264501e+02, 7.945846756583540e-03, 1.589169351316708e-02, 7.945846756583540e-03, 7.095457892584618e-03, 1.419091578516924e-02, 7.095457892584618e-03, 1.274827150325397e-02, 2.549654300650795e-02, 1.274827150325397e-02, 9.617132835502000e-03, 1.923426567100400e-02, 9.617132835502000e-03, 1.238606604273318e-02, 2.477213208546636e-02, 1.238606604273318e-02, 9.690392133941949e-03, 1.938078426788389e-02, 9.690392133941949e-03, 1.072873524524302e-02, 2.145747049048605e-02, 1.072873524524302e-02, 2.017521367644198e-02, 4.035042735288395e-02, 2.017521367644198e-02, 1.807529581400687e-02, 3.615059162801375e-02, 1.807529581400687e-02, 7.263285376768910e-03, 1.452657075353782e-02, 7.263285376768910e-03, 6.860992897733043e-03, 1.372198579546608e-02, 6.860992897733043e-03, 1.680027648881398e-02, 3.360055297762796e-02, 1.680027648881398e-02, 8.587861579271995e-03, 1.717572315854399e-02, 8.587861579271995e-03, 1.198860258141735e-01, 2.397720516283471e-01, 1.198860258141735e-01, 7.577744029388829e-02, 1.515548805877766e-01, 7.577744029388829e-02, 2.924603625845817e-02, 5.849207251691634e-02, 2.924603625845817e-02, 4.081003463633865e-02, 8.162006927267730e-02, 4.081003463633865e-02, 4.042069590466595e-02, 8.084139180933192e-02, 4.042069590466595e-02, 7.946956937302574e-03, 1.589391387460515e-02, 7.946956937302574e-03, 1.850696724895464e+03, 3.701393449790928e+03, 1.850696724895464e+03, 6.408360133992771e+01, 1.281672026798554e+02, 6.408360133992771e+01, 8.727745221663283e-02, 1.745549044332657e-01, 8.727745221663283e-02, 1.092551669651231e+01, 2.185103339302463e+01, 1.092551669651231e+01, 1.092551669651260e+01, 2.185103339302519e+01, 1.092551669651260e+01, 3.689112368653431e+05, 7.378224737306862e+05, 3.689112368653431e+05, 5.429880586083525e+07, 1.085976117216705e+08, 5.429880586083525e+07, 1.340913654799028e+08, 2.681827309598056e+08, 1.340913654799028e+08, 1.238215658655051e+02, 2.476431317310102e+02, 1.238215658655051e+02, -1.064534865281395e+02, -2.129069730562791e+02, -1.064534865281395e+02, 3.585549317947208e+03, 7.171098635894417e+03, 3.585549317947208e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-9.541293675301309e-05, -9.541293675301304e-05, -9.541315498919092e-05, -9.541315498919094e-05, -9.541369897979181e-05, -9.541369897979177e-05, -4.169811867160396e-05, -4.169811867160396e-05, -2.597235709875372e-05, -2.597235709875372e-05, -1.222564605411549e-05, -1.222564605411549e-05, -2.091224334123074e-04, -2.091224334123072e-04, -1.613127654500971e-04, -1.613127654500970e-04, -1.624056637432889e-04, -1.624056637432889e-04, -1.619333019639044e-04, -1.619333019639044e-04, -1.620185972417261e-04, -1.620185972417261e-04, -2.119619597967018e-04, -2.119619597967018e-04, -4.821003475401673e-03, -4.821003475401673e-03, -2.327639165592422e-03, -2.327639165592422e-03, -2.129339710077839e-03, -2.129339710077838e-03, -1.390656770238484e-03, -1.390656770238484e-03, -4.152129249844347e-03, -4.152129249844347e-03, -2.158027880452806e-03, -2.158027880452806e-03, -1.209807936177305e-02, -1.209807936177305e-02, -1.023404811005862e-02, -1.023404811005863e-02, -4.832602222549471e-04, -4.832602222549471e-04, -2.926964529454065e-02, -2.926964529454066e-02, -3.205214062063744e-03, -3.205214062063743e-03, -3.810236905867631e-03, -3.810236905867635e-03, -6.419246776419185e-07, -6.419246776419191e-07, -1.194785297186339e-06, -1.194785297186340e-06, -6.697882141818225e-05, -6.697882141818225e-05, -7.916344662700326e-08, -7.916344662700326e-08, -3.046574673976178e-07, -3.046574673975313e-07, -3.046574673973964e-07, -3.046574673974613e-07, -4.934877361981019e-04, -4.934877361981017e-04, -2.779073016498146e-04, -2.779073016498146e-04, -2.764239772742193e-04, -2.764239772742194e-04, -2.778127767548550e-04, -2.778127767548552e-04, -6.990953812476992e-04, -6.990953812476988e-04, -4.938739980097657e-04, -4.938739980097654e-04, -4.178978903146167e-06, -4.178978903146168e-06, -4.047660851531433e-05, -4.047660851531431e-05, -4.096849557409624e-04, -4.096849557409624e-04, -4.189164801462767e-04, -4.189164801462768e-04, -1.055114728824566e-04, -1.055114728824566e-04, -3.698978705889655e-05, -3.698978705889654e-05, -1.771871513633745e-02, -1.771871513633745e-02, -1.148188518731105e-02, -1.148188518731106e-02, -7.009001402850776e-03, -7.009001402850778e-03, -8.896262091731119e-03, -8.896262091731128e-03, -1.679153082899174e-02, -1.679153082899173e-02, -8.587262926405792e-03, -8.587262926405792e-03, -4.479021214915136e-02, -4.479021214915140e-02, -3.813799162095093e-03, -3.813799162095096e-03, -4.786320179521609e-04, -4.786320179521611e-04, -9.982901615936636e-04, -9.982901615936636e-04, -1.682753024638770e-03, -1.682753024638769e-03, -1.682753024638771e-03, -1.682753024638771e-03, -2.980310644026740e-08, -2.980310644026740e-08, -1.182724615289243e-02, -1.182724615289240e-02, -2.877502362776838e-07, -2.877502362776837e-07, -2.163742818564957e-04, -2.163742818564957e-04, -2.221627057502806e-07, -2.221627057502805e-07, -2.221627057502772e-07, -2.221627057502772e-07, -2.394025519088106e-02, -2.394025519088107e-02, -2.075918721207018e-02, -2.075918721207018e-02, -3.167621051349933e-02, -3.167621051349935e-02, -2.655608930145734e-02, -2.655608930145736e-02, -3.130940724092778e-02, -3.130940724092775e-02, -2.644757447708938e-02, -2.644757447708937e-02, -2.784297106411642e-02, -2.784297106411644e-02, -3.456273014515997e-03, -3.456273014515998e-03, -2.472530881415663e-02, -2.472530881415664e-02, -1.575796897712962e-02, -1.575796897712961e-02, -1.358398391751024e-02, -1.358398391751024e-02, -2.583103809189378e-02, -2.583103809189379e-02, -2.337227841102745e-02, -2.337227841102746e-02, -6.439858938293326e-03, -6.439858938293325e-03, -7.742489542756522e-03, -7.742489542756522e-03, -1.081044605722752e-04, -1.081044605722753e-04, -3.988243519653146e-04, -3.988243519653146e-04, -3.378983518439809e-04, -3.378983518439806e-04, -9.124588748343156e-03, -9.124588748343161e-03, -7.050303700847757e-05, -7.050303700847763e-05, -9.630715068208125e-02, -9.630715068208122e-02, -2.474050272232749e-02, -2.474050272232749e-02, -6.395166250258580e-02, -6.395166250258583e-02, -6.395166250258751e-02, -6.395166250258753e-02, -1.582465904706301e-06, -1.582465904706301e-06, -6.492081376518066e-01, -6.492081376518065e-01, -1.153221102616075e-07, -1.153221102616075e-07, -7.837165752469400e-04, -7.837165752469397e-04, -3.365566001657320e-06, -3.365566001657764e-06, -1.068937601547833e-07, -1.068937601547834e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
