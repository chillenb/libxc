
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.486771498834988e-02, -7.486718006528714e-02, -7.486580201671034e-02, -7.487374329643015e-02, -7.486943974807403e-02, -7.486943974807403e-02, -6.994941789158649e-02, -6.994131204956955e-02, -6.972896004082418e-02, -6.982936260435380e-02, -6.981117260845915e-02, -6.981117260845915e-02, -5.434006321830820e-02, -5.419275107589516e-02, -4.869655398702188e-02, -4.822904112725168e-02, -4.862735547594110e-02, -4.862735547594110e-02, -5.029768680614444e-03, -7.517610616204595e-03, -1.019002169077997e-01, 4.488057764052128e-02, 2.045526526063468e-02, 2.045526526063501e-02, 1.637234083946705e-02, 1.724787909226405e-02, 6.887959690928774e-02, 1.102988091234894e-02, 1.303089338272117e-02, 1.303089338272124e-02, -5.294002854110069e-02, -5.287629719086284e-02, -5.293961940476943e-02, -5.288329278574189e-02, -5.290638127869829e-02, -5.290638127869829e-02, -6.029536884345865e-02, -5.988082367136460e-02, -5.957618705778223e-02, -5.921886761948914e-02, -6.036388960913297e-02, -6.036388960913297e-02, -3.341519304974960e-02, -2.797737155345253e-02, -3.718839463940649e-02, -3.700830065194097e-02, -3.186962867859172e-02, -3.186962867859172e-02, 8.238165339565809e-02, 2.109019481272334e-02, 8.501429724949769e-02, -5.730905318716153e-02, 5.641042266400803e-02, 5.641042266400798e-02, 1.077747202063578e-02, 1.203928039542321e-02, 8.555658112891364e-03, 8.455604901916211e-02, 1.094032824917476e-02, 1.094032824917478e-02, -1.933102770120494e-02, -2.320352099580603e-02, -2.241837459306506e-02, -2.150393419601340e-02, -2.200934399848826e-02, -2.200934399848826e-02, -1.423057168121039e-02, -3.443971820171310e-02, -3.158504759285674e-02, -2.676488045490855e-02, -2.940695295606960e-02, -2.940695295606960e-02, -3.119910497558734e-02, -2.175925325296202e-03, -1.998910264141640e-02, -3.551171427947353e-02, -3.079405028120719e-02, -3.079405028120730e-02, -3.698850761526273e-02, 6.450052781483979e-02, 7.983402159929034e-02, -3.247342115288021e-02, 7.779610026901670e-02, 7.779610026901738e-02, 2.711080755660720e-02, 4.778186591638028e-03, 6.020109630108058e-03, 7.575848764492184e-02, 9.740790812209290e-03, 9.740790812209322e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.587277160840973e-02, -2.587186377162798e-02, -2.587415728906350e-02, -2.588780927980161e-02, -2.587974939330073e-02, -2.587974939330073e-02, -2.157423908372280e-02, -2.155565278273208e-02, -2.106243526278484e-02, -2.119290828132203e-02, -2.120571973610086e-02, -2.120571973610086e-02, -7.886474877861904e-02, -7.996938764614925e-02, -1.095687809049801e-01, -1.018747297343399e-01, -1.030242653965263e-01, -1.030242653965263e-01, -9.255874553619570e-02, -9.188027122562781e-02, -1.106330891805934e-01, -6.995754973496293e-02, -9.287874902096582e-02, -9.287874902096416e-02, 3.758396629365131e-02, 3.923715695417324e-02, 1.214598384788431e-01, 2.380859716737452e-02, 2.885741854916679e-02, 2.885741854916645e-02, -1.808498133527570e-02, -1.796370700633410e-02, -1.808608872775097e-02, -1.797856139628218e-02, -1.801964787031984e-02, -1.801964787031984e-02, -9.375524262157486e-02, -9.145775170434578e-02, -1.005322500761388e-01, -9.850421300044787e-02, -8.910687389531691e-02, -8.910687389531691e-02, -2.839721588318356e-03, -2.704135334007460e-02, -8.797112709546751e-03, -3.588241015517193e-02, -2.375409516150284e-03, -2.375409516150284e-03, 4.630677465404584e-02, -9.128184429333153e-02, 6.052209213124435e-02, -4.689311443190755e-02, -2.005520948798428e-02, -2.005520948798473e-02, 1.953265044997361e-02, 2.368381241488306e-02, 1.841432781105045e-02, 1.088364511002566e-01, 2.194799893775466e-02, 2.194799893775484e-02, -8.315496105109774e-03, -1.478134535440925e-02, -1.513506146807450e-02, -1.372657482551397e-02, -1.469237899867036e-02, -1.469237899867042e-02, 2.226130522687924e-03, -3.783619315221032e-02, -1.822957170381545e-02, -7.098211954246536e-03, -1.016199916251775e-02, -1.016199916251775e-02, -3.040371538672784e-02, -1.046496943866081e-01, -9.564321184910596e-02, -3.691278091762717e-02, -6.848682007994034e-02, -6.848682007993911e-02, -2.997350054901327e-02, 1.204000923069624e-01, 1.265863603544741e-01, -1.544006119653052e-02, 6.520720956844991e-02, 6.520720956845925e-02, 5.107433838370216e-02, 7.536550656974731e-03, 1.384723677760721e-02, 7.783070361362757e-02, 2.036660728652422e-02, 2.036660728652456e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.433545911341715e-10, -1.433661273487548e-10, -1.433902932344774e-10, -1.432189411458629e-10, -1.433125834545609e-10, -1.433125834545609e-10, -7.833736961170981e-08, -7.858755686482882e-08, -8.608996309880836e-08, -9.186131660493995e-08, -8.762369952549367e-08, -8.762369952549367e-08, 2.348096645918564e-03, 2.353561522569777e-03, 2.481697241166183e-03, 2.012378929005617e-03, 2.151495473601021e-03, 2.151495473601021e-03, 3.425353405802941e-01, 3.488200032173265e-01, 3.736999878974946e-03, 3.190915167286124e-01, 3.925295366281882e-01, 3.925295366281625e-01, -6.476041045229279e+03, -5.903330609669437e+03, -7.390560521696419e+01, -1.838288621927809e+04, -1.321009271496484e+04, -1.321009271496482e+04, -2.711692940011950e-07, -2.749961887145044e-07, -2.713562802490675e-07, -2.747346506892505e-07, -2.731009178086474e-07, -2.731009178086474e-07, 8.491867313379887e-06, 8.689473471179397e-06, 9.289339904612922e-06, 9.518151058927183e-06, 8.188804255578508e-06, 8.188804255578508e-06, -2.689470527412710e-03, 7.537929091295682e-03, -1.851741891557182e-03, 1.979435868924599e-02, -2.828827895387492e-03, -2.828827895387492e-03, -2.339965717705286e+00, 1.151229621194763e-01, -3.379618376889638e+00, 8.864495903557119e-05, -7.204421191937017e-01, -7.204421191936996e-01, -2.671741844105500e+04, -1.814547304731598e+04, -9.182348673528444e+04, -1.761760682594094e+01, -3.812801396355652e+04, -3.812801396355536e+04, -2.985359320095931e-02, -1.197042091038662e-02, -1.343475014690105e-02, -1.682590911989270e-02, -1.471477594460331e-02, -1.471477594460335e-02, -5.115778371793166e-02, 5.792596163007577e-03, -2.790760322640844e-04, -8.252183308829262e-03, -4.405739588290440e-03, -4.405739588290440e-03, 7.241065905622596e-03, 1.047710811438392e-01, 7.294312068906009e-02, 7.666481600883285e-03, 4.132820937568576e-02, 4.132820937568635e-02, 2.532481830607362e-03, -8.459711279240878e+01, -3.350823478818938e+01, -8.976220537025624e-03, -7.485555138099621e+00, -7.485555138099877e+00, -2.079523711874591e+03, -3.302274806673739e+05, -1.172623762247004e+05, -1.083491269488638e+01, -5.379919953159970e+04, -5.379919953160195e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.804051732534865e-06, 1.806048560174292e-06, 1.813433340107707e-06, 1.783852483695626e-06, 1.799561005388780e-06, 1.799561005388780e-06, -3.717148480307718e-04, -3.717736850611200e-04, -3.729101872593971e-04, -3.685840202563669e-04, -3.707076233576576e-04, -3.707076233576576e-04, -4.563239615233867e-03, -4.481346986706256e-03, -2.394654144170125e-03, -1.921713999005496e-03, -2.152783373374664e-03, -2.152783373374664e-03, 3.703763647673830e-02, 3.351782262812000e-02, -8.289309974432913e-03, 6.172211445380495e-02, 5.994182498308651e-02, 5.994182498308669e-02, 2.241556958808593e-02, 2.367328925932999e-02, 5.086391349573270e-02, 1.099344011244950e-02, 1.641891678452643e-02, 1.641891678452641e-02, 4.040207501111911e-04, 4.131145025862319e-04, 4.046133374995655e-04, 4.126355010921364e-04, 4.085325930363165e-04, 4.085325930363165e-04, -8.779555801682118e-04, -9.912296737043882e-04, -8.859508606245500e-04, -9.977427607774313e-04, -9.341477776559056e-04, -9.341477776559056e-04, -6.448730194910234e-03, -1.884570939828988e-02, -7.967991863245136e-03, -2.375458841673366e-02, -6.173409621890808e-03, -6.173409621890808e-03, 6.628193041651799e-02, 5.044936730677271e-02, 6.585389974092333e-02, -3.743622798004588e-03, 8.200390402876528e-02, 8.200390402876534e-02, 5.319223609229222e-03, 8.788511331184645e-03, 2.256702774608034e-02, 6.517238692521257e-02, 1.488075632104214e-02, 1.488075632104215e-02, 3.091875612101912e-02, 2.403207960624655e-02, 2.507980568134740e-02, 2.655484302632708e-02, 2.565538173785451e-02, 2.565538173785450e-02, -1.394607458838252e-02, -1.714654283390450e-02, -1.065388820179982e-02, 4.079758223796479e-03, -4.021865390594313e-03, -4.021865390594297e-03, -1.815255645418231e-02, 2.805625174887372e-02, 9.376750478965964e-03, -7.564565904833159e-03, -3.908396122905790e-03, -3.908396122905889e-03, -1.010032416378421e-02, 5.278237583535936e-02, 5.474245909716290e-02, -1.327202036541261e-02, 8.292338750712311e-02, 8.292338750712304e-02, 1.565276579965512e-02, 1.524798094277924e-03, 1.218731940221499e-02, 8.917070402702056e-02, 1.766674224131419e-02, 1.766674224131418e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
