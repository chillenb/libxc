
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.324063786156181e-02, -8.323808613250316e-02, -8.322779912346122e-02, -8.326556980862271e-02, -8.324563057833397e-02, -8.324563057833397e-02, -1.555555120634409e-01, -1.555197729087030e-01, -1.545800020587053e-01, -1.549630411066450e-01, -1.549177836258410e-01, -6.438886548195910e-02, -1.728595212052911e-01, -3.016250342391547e-02, -2.388736785163337e-02, -2.695086598736274e-02, -2.628375472456512e-02, -2.628375472456512e-02, -3.851884664105687e-03, -6.024685406445851e-03, -2.632338694090380e-01, 4.444362436324889e-02, 2.198831895477116e-02, 2.198831895477071e-02, 1.623425629033111e-02, 1.698513214627376e-02, 6.328768082349506e-02, 9.880753097399926e-03, 1.217376077416227e-02, 1.217376077416227e-02, -5.310249559134161e-02, -5.303916364960437e-02, -5.309882663822552e-02, -4.194058062780301e-02, -5.307074969914327e-02, -5.307074969914327e-02, -1.591126023437479e-01, -1.539265387921927e-01, -1.633057730814549e-01, -1.585227900320044e-01, -1.542062550273625e-01, -5.558012201751539e-02, -3.427369705674399e-02, -3.048693278743009e-02, -3.579635058770736e-02, -3.367013074546177e-02, -3.362261381158582e-02, -5.209642026168176e-02, -1.495722079210705e-01, 2.165646615821570e-02, -1.395546561878927e-01, -4.825036882107991e-02, 5.432867645279260e-02, 5.432867645279266e-02, -1.087821994559468e-03, 9.677043871179323e-03, 7.535715133583564e-03, -8.747279987978661e-02, -1.301605998675148e-03, 8.964615800415306e-03, -2.509202694986107e-02, -2.602602592646169e-02, -9.423697777881063e-03, -2.540867650228576e-02, -2.554368525307735e-02, -2.554368525307735e-02, -2.496670456112973e-02, -3.365103861856000e-02, -3.135589485835844e-02, -2.848676258666982e-02, -2.997451476683466e-02, -3.758888466814749e-02, -3.232279784253922e-02, -1.539192384696462e-01, -1.725198510256409e-02, -8.848299225477947e-02, -2.670140843837443e-02, -2.670140843837410e-02, -7.777445417025663e-02, 6.170435862532481e-02, 7.251537925559007e-02, -2.987522861016900e-02, -1.264860641395042e-01, 7.209420295865017e-02, 2.197051577809501e-02, 2.774008034208946e-03, 5.636832814836903e-03, 7.187570415521322e-02, 8.340447566913945e-03, 8.340447566914036e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.116796359026597e-02, 5.116684709855594e-02, 5.116235402830926e-02, 5.117887886087928e-02, 5.117015457954319e-02, 5.117015457954319e-02, 5.905284337235860e-02, 5.904886103942612e-02, 5.894286236568714e-02, 5.898767788544104e-02, 5.898098062042045e-02, -1.076796630835786e-01, 1.916554458557179e-02, -1.282836870888884e-01, -1.393118219716680e-01, -1.342262123861515e-01, -1.354297832425178e-01, -1.354297832425178e-01, -9.005346803999514e-02, -8.950684973850287e-02, -3.731920837260536e-02, -3.584471445927312e-02, -7.420739464981463e-02, -7.420739464981385e-02, 3.754900085560709e-02, 3.917150699255798e-02, 1.228358047446290e-01, 2.349169286199441e-02, 2.862836731855669e-02, 2.862836731855669e-02, -1.850307519423200e-02, -1.836653213035966e-02, -1.849511428036643e-02, 2.734197675513393e-02, -1.843422717983301e-02, -1.843422717983301e-02, 5.007754683178260e-02, 5.016227557412562e-02, 4.992719359438533e-02, 5.009881583507102e-02, 5.015589379216068e-02, -1.099907035062637e-01, -3.700938837658851e-02, -1.619408153368640e-02, -5.349969179465541e-02, -3.586081384657225e-02, -3.271403627903258e-02, 2.327376818584548e-02, -2.152008155053957e-01, -8.269068168248583e-02, -2.153910922838524e-01, -4.305758267728399e-02, -1.438060518668627e-03, -1.438060518673734e-03, -1.457337049889514e-03, 2.303200696091731e-02, 1.812934086167350e-02, -1.720513228005013e-01, -1.826195230697879e-03, 2.140357732964594e-02, -1.267100588804301e-02, -1.056418933424574e-02, 6.671240091696191e-03, -1.207374618777554e-02, -1.171937665285183e-02, -1.171937665285183e-02, -1.241434397115032e-02, -4.438590539805509e-02, -2.856934837107505e-02, -1.473045474656176e-02, -2.131708714720726e-02, 1.822493194061998e-02, -2.153009877686451e-02, -2.492297564923934e-02, -9.646648209901121e-02, 2.299995306420411e-02, -7.879695037399759e-02, -7.879695037399603e-02, 2.609222407066242e-02, 1.208975671237045e-01, 1.308785317923082e-01, -4.751781007178613e-02, -1.995278280421187e-01, 8.093850715797374e-02, 4.988905484407812e-02, 6.931329330896527e-03, 1.373623728338880e-02, 8.652577365505168e-02, 1.997798819565263e-02, 1.997798819565301e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.939147371857054e-09, -1.939149320226058e-09, -1.939138694709761e-09, -1.939111981943710e-09, -1.939128685319429e-09, -1.939128685319429e-09, -5.375951038170068e-06, -5.377420305526386e-06, -5.415726960548844e-06, -5.397924280314439e-06, -5.402490217753769e-06, 8.908557413840677e-07, -3.518930593790208e-03, 1.225617436864274e-03, 1.165065524319701e-03, 1.220225525020512e-03, 1.207292410166191e-03, 1.207292410166191e-03, 3.223273046494880e-01, 3.312020001547077e-01, -1.673438745980226e-03, -3.540368516955383e-01, 9.264640915710418e-02, 9.264640915710140e-02, -6.476393411158889e+03, -5.904007706624422e+03, -7.584016016380487e+01, -1.838724282026453e+04, -1.321344588471191e+04, -1.321344588471191e+04, -2.693877127617951e-07, -2.732948765588139e-07, -2.696139683681552e-07, -1.974076276442494e-06, -2.713420282290301e-07, -2.713420282290301e-07, -6.291081475326497e-05, -6.425555532917303e-05, -6.164753440096649e-05, -6.298826665784893e-05, -6.426347275586387e-05, 1.242935196096431e-05, 2.681070084459518e-03, -2.241434268455776e-03, 5.194850216305757e-03, 3.117886078812993e-03, 1.942891126652417e-03, -3.391319510400176e-02, -6.946204673348606e+02, 6.094410305899285e-02, -1.081878093652942e+03, 6.755369752593182e-06, -1.393960418580705e+00, -1.393960418580749e+00, -3.473943783378712e+09, -1.815675495269141e+04, -9.186067437530743e+04, -8.354449523605634e+03, -1.851487694009954e+09, -3.815729450800387e+04, -3.014266268965398e-02, -1.686066426301843e-02, -7.964735037107640e-02, -2.295174972429592e-02, -2.114031207532070e-02, -2.114031207532070e-02, -3.020876644164486e-02, 7.680577002247870e-03, 2.958348921533796e-03, -5.521368133024622e-03, -6.158910474366710e-04, -7.079342865410729e-02, -4.918136573358203e-04, -5.449165437339922e-01, 7.712946956368183e-02, -1.863836092451840e-01, 5.956439989532000e-02, 5.956439989531960e-02, -7.691654082331048e-02, -8.549486710347647e+01, -3.543399689374311e+01, 4.784788178299685e-02, -2.192960400818174e+03, -9.406827130822562e+00, -2.087862164273191e+03, -3.305002929135899e+05, -1.172692889372210e+05, -1.210781410361086e+01, -5.382668518224617e+04, -5.382668518224559e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.178335825830007e-05, -8.178319187435313e-05, -8.178222502867085e-05, -8.178472159877956e-05, -8.178344551969621e-05, -8.178344551969621e-05, -1.714184885771893e-03, -1.714304386572837e-03, -1.717396484761401e-03, -1.715877790713405e-03, -1.716350875511081e-03, -6.655184173614857e-04, -2.032820501124761e-02, -3.735956679094395e-04, 1.519425735629521e-03, 6.627795112279208e-04, 8.617973057419046e-04, 8.617973057419046e-04, 3.570283267654401e-02, 3.152092669628638e-02, -1.042177144276913e-02, 7.527641503917137e-02, 6.669654919108499e-02, 6.669654919108493e-02, 2.260356293904065e-02, 2.403858414497540e-02, 5.678628227022513e-02, 1.233144896828188e-02, 1.759712128280928e-02, 1.759712128280928e-02, 4.073923781658664e-04, 4.166322582018027e-04, 4.079237820375459e-04, -1.052441504230284e-03, 4.120140676104479e-04, 4.120140676104479e-04, -4.327771117598633e-03, -4.334705304155463e-03, -4.317762082287606e-03, -4.326599652315769e-03, -4.336357289997983e-03, -1.440540568589829e-03, -1.437462838353962e-02, 2.170445329082118e-03, -1.641071374793726e-02, -1.515566890133455e-02, -1.278008770892310e-02, -3.810464575597790e-02, 2.058699735668276e-02, 5.209254808834847e-02, 2.739641608162360e-02, -1.682309224070532e-03, 9.063465939214697e-02, 9.063465939214678e-02, 2.656840131379915e-05, 1.137529093350093e-02, 2.574333351148532e-02, 4.150526997140200e-02, 1.631257537563161e-04, 1.869335229929376e-02, 9.157861512609379e-02, 4.644142875115007e-02, -4.438631724818643e-02, 6.732324434226911e-02, 6.114743355032124e-02, 6.114743355032123e-02, 8.355845672062935e-02, -2.007405483913887e-02, -1.477331426243847e-02, 4.388596570239839e-03, -7.633346434641916e-03, -4.844661384812454e-02, -3.919376946623184e-03, -8.175658658283010e-02, 5.738623043045092e-03, -7.408510841904617e-02, -1.312326654458008e-02, -1.312326654457979e-02, -5.285849873532127e-02, 5.570672026544768e-02, 6.262603876080780e-02, -3.396537567184663e-02, 3.512691888282130e-02, 9.473623860193293e-02, 2.051306775751709e-02, 3.951754263527199e-03, 1.297312142221396e-02, 9.660832876944458e-02, 2.089206860482940e-02, 2.089206860482941e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
