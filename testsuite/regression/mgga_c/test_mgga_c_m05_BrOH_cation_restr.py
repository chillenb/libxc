
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.005702547206927e-01, -1.005702857158918e-01, -1.005715335741145e-01, -1.005711085703299e-01, -1.005711727445267e-01, -1.005711727445267e-01, -5.095580807001700e-02, -5.096063146870437e-02, -5.108549442469953e-02, -5.101167993625000e-02, -5.102823401469753e-02, -5.102823401469753e-02, -2.331867408782013e-02, -2.321580690430957e-02, -2.003187327079834e-02, -2.092236817312346e-02, -2.080162717903462e-02, -2.080162717903462e-02, 1.003410240385839e-02, 7.851278291351398e-03, -2.135433658724591e-02, 2.596035245064946e-02, 2.137000970289455e-02, 2.137000970289457e-02, -1.918811148487432e-03, -2.005053553877007e-03, -3.944672263482146e-03, -1.208996966122962e-03, -1.469091246521344e-03, -1.469091246521347e-03, -7.457736407876037e-02, -7.452805014015554e-02, -7.457568449720249e-02, -7.453208198982263e-02, -7.455213910845741e-02, -7.455213910845741e-02, -4.273786053284675e-02, -4.418466601380092e-02, -4.137422502152342e-02, -4.274375612405939e-02, -4.412875827937648e-02, -4.412875827937648e-02, -3.453527626100633e-02, -5.443415228349809e-02, -3.025757475857611e-02, -4.870590325978232e-02, -3.558506866927157e-02, -3.558506866927157e-02, 1.724868010469055e-02, 2.450911077901375e-02, 1.469627349133644e-02, -8.381979227385199e-02, 2.418255769731166e-02, 2.418255769731166e-02, -1.003680809743193e-03, -1.213835685969950e-03, -9.226742040522162e-04, 3.532715888471819e-03, -1.116192825992949e-03, -1.116192825992951e-03, -4.988772464602844e-02, -4.171101165262076e-02, -4.351627910371265e-02, -4.573753147515049e-02, -4.452961974355223e-02, -4.452961974355223e-02, -5.975439997944481e-02, -3.513975197519705e-02, -3.716356815704574e-02, -3.767321233280680e-02, -3.726488502012916e-02, -3.726488502012916e-02, -5.477828144247301e-02, 1.415957404204193e-02, -1.984699039267953e-03, -2.338142062938589e-02, -1.615993077602450e-02, -1.615993077602451e-02, -2.979773198411676e-02, -4.263239711141077e-03, -1.791168502928863e-03, -2.545157914080659e-02, 1.238212701366209e-02, 1.238212701366206e-02, -2.674973524777444e-03, -3.821235108811410e-04, -6.851425557626575e-04, 1.013741205185924e-02, -1.028223273926211e-03, -1.028223273926217e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.298202181116654e-02, -7.298317113189751e-02, -7.297937413056403e-02, -7.296207533533804e-02, -7.297240857705398e-02, -7.297240857705398e-02, -9.122305144520160e-02, -9.123571568874907e-02, -9.149728842031324e-02, -9.069206180867229e-02, -9.106903999900372e-02, -9.106903999900372e-02, -4.900014719469549e-02, -4.916106702489367e-02, -6.152684809108787e-02, -6.135310673192765e-02, -6.059535795647687e-02, -6.059535795647687e-02, -7.255703447261899e-02, -7.554536795627230e-02, -5.296018151895191e-02, 5.562621203757423e-03, -3.436003654474355e-02, -3.436003654474365e-02, -2.775876211088234e-03, -2.877134628119383e-03, 4.678001664893543e-03, -1.787988269184979e-03, -2.157035193166785e-03, -2.157035193166794e-03, -6.051944354895759e-02, -6.095023313131590e-02, -6.051391785037515e-02, -6.089501199269556e-02, -6.075012254460706e-02, -6.075012254460706e-02, -1.085773996309888e-01, -1.062955310634432e-01, -1.161275918940873e-01, -1.141532969431496e-01, -1.037191381410186e-01, -1.037191381410186e-01, -4.938191058607670e-02, -1.037809246490864e-01, -5.045156874827111e-02, -1.105016389471160e-01, -5.400486926188024e-02, -5.400486926188024e-02, 5.569632686773487e-02, -3.132599586494391e-02, 5.414629292886727e-02, -1.567959039841442e-01, 3.709727079973937e-02, 3.709727079973936e-02, -1.436085568764187e-03, -1.758997082723443e-03, -1.360358533602446e-03, 3.245879481258150e-02, -1.617372638726266e-03, -1.617372638726293e-03, -7.431895327821862e-02, -7.135615951972708e-02, -7.500138716989070e-02, -7.620764345545962e-02, -7.586816349035853e-02, -7.586816349035855e-02, -6.939146971817908e-02, -4.239350719385298e-02, -2.980005212027899e-02, -4.343435431388647e-02, -3.271780823906033e-02, -3.271780823906033e-02, -1.097247212751292e-01, -7.683479052864678e-02, -9.283214500793549e-02, -4.365301492641794e-02, -7.345697256714173e-02, -7.345697256714140e-02, -4.266969782771311e-02, 2.773132580368542e-03, 1.528063651686384e-02, -3.413755469683675e-02, 4.916013993728265e-02, 4.916013993728193e-02, -3.570111669459432e-03, -5.339069591655904e-04, -1.039614697889711e-03, 4.601632502152089e-02, -1.505965395260392e-03, -1.505965395260376e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.056439237428943e-10, -2.056354783946727e-10, -2.056315836906193e-10, -2.057578738308106e-10, -2.056869202578514e-10, -2.056869202578514e-10, 1.718076140813166e-07, 1.720180401468751e-07, 1.758169617067705e-07, 1.572683026529213e-07, 1.663994827077878e-07, 1.663994827077878e-07, 2.763276561145950e-04, 2.809078739770269e-04, 6.663158226799403e-04, 5.824407202526460e-04, 5.857107958933365e-04, 5.857107958933365e-04, 5.536300254552705e-01, 5.482000994644368e-01, 3.911785862492096e-04, 3.147804801734008e-01, 5.972933299625184e-01, 5.972933299625194e-01, 1.411045124853279e+02, 1.262853188475162e+02, -4.547292822408829e+00, 4.322584418111649e+02, 3.020905057688880e+02, 3.020905057688485e+02, -9.703501682366856e-08, -9.212472492459516e-08, -9.693146196882088e-08, -9.259459423288783e-08, -9.449904549087389e-08, -9.449904549087389e-08, 1.247688517638843e-06, 6.230634244593123e-07, 2.242841400995443e-06, 1.675036859105549e-06, 4.215563553269308e-07, 4.215563553269308e-07, -8.483188529593110e-04, 1.865904141043086e-02, 1.727738482101235e-04, 2.757484164680222e-02, 4.139918902298836e-05, 4.139918902298836e-05, -1.134177995273228e+00, 2.505155387676380e-01, -1.522909571918023e+00, 1.093780689916607e-04, -2.196269778243624e-01, -2.196269778243624e-01, 6.300379515880421e+02, 4.235301170241593e+02, 2.117698901567268e+03, -4.155078858574415e+00, 8.738680038055546e+02, 8.738680038054379e+02, 7.440448449038889e-02, 3.055810644398824e-02, 4.282748105008909e-02, 5.558057137746029e-02, 4.888985135218409e-02, 4.888985135218407e-02, 5.485738941304111e-02, -5.857350511619543e-03, -8.837026185970237e-03, -1.749565306527410e-03, -7.410599066162979e-03, -7.410599066162979e-03, 1.423111007174123e-02, 1.756873794469599e-01, 9.811023686913328e-02, -4.485932505298975e-03, 3.434384222754603e-02, 3.434384222754621e-02, -5.064573058982362e-03, -3.901200300156372e+00, -4.034117105532363e+00, -2.172752895076009e-02, -2.846819966333971e+00, -2.846819966333916e+00, 3.767547559995295e+01, 7.958813838535037e+03, 2.813768484640626e+03, -3.310555454698524e+00, 1.241011545257394e+03, 1.241011545257469e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.786714555966346e-05, 2.786580476662257e-05, 2.786380061742080e-05, 2.788377329771738e-05, 2.787274794977904e-05, 2.787274794977904e-05, 1.901156969976635e-04, 1.901372429223674e-04, 1.909448427132096e-04, 1.929948627531231e-04, 1.918000570284891e-04, 1.918000570284891e-04, 1.455222218850526e-03, 1.458111238346539e-03, 1.465260574873737e-03, 1.642827809685658e-03, 1.587034956507611e-03, 1.587034956507611e-03, 8.758174936701998e-03, 9.635684377580171e-03, 3.321533858892536e-04, 1.103386899656305e-03, 3.257112519398505e-03, 3.257112519398434e-03, -5.457490347291167e-04, -5.761845729165677e-04, -1.159444864507019e-03, -2.680207033992474e-04, -4.000805711649417e-04, -4.000805711649507e-04, 5.914391923663200e-05, 4.666210736067803e-05, 5.864938652543910e-05, 4.763069921722338e-05, 5.281415573505591e-05, 5.281415573505591e-05, 9.836374802966986e-04, 1.039445573228382e-03, 9.610147539157637e-04, 1.011663623479013e-03, 1.024897349501831e-03, 1.024897349501831e-03, 7.316403731454359e-03, -9.257231505393987e-03, 5.488905678297895e-03, -2.828960825460848e-03, 6.442822331818476e-03, 6.442822331818476e-03, -7.808380735755998e-04, 2.602215193602962e-03, -8.925124629652318e-04, -5.637856380745700e-04, 3.585749839468345e-05, 3.585749839468345e-05, -1.297180138774081e-04, -2.142467738766515e-04, -5.499593104543469e-04, -1.259342202750688e-03, -3.626269026378980e-04, -3.626269026378958e-04, -1.401866856759257e-01, -7.021311426231855e-02, -9.475204374472902e-02, -1.172119138123481e-01, -1.058684434728558e-01, -1.058684434728558e-01, -5.271512640041078e-02, 1.824147331682522e-02, 2.001779268051738e-02, 6.904801506544499e-03, 1.672797713540927e-02, 1.672797713540926e-02, -5.739875727439681e-03, 5.275025996112353e-03, 8.700837428311679e-03, 1.341520295105701e-02, 1.298035455551321e-02, 1.298035455551317e-02, 1.343755789681191e-02, -1.217283260744684e-03, -1.186388613553270e-03, 1.788352931315914e-02, -1.208324993108981e-03, -1.208324993109098e-03, -3.801920643448004e-04, -3.720929709301035e-05, -2.972466605345943e-04, -1.443722463912866e-03, -4.305503193090120e-04, -4.305503193090464e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
