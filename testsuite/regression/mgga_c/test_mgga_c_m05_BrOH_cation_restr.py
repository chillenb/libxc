
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504602593e-01, -1.645996352774702e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -5.810621187530127e-02, -6.701411225019485e-02, -5.215115983637365e-03, 3.353923426656603e-03, -6.437041628399331e-04, 2.645506669969263e-04, 2.645506669969263e-04, 1.193654199718190e-02, 1.018491833473241e-02, -7.077000961998538e-02, 2.712154901380365e-02, 2.463919000713126e-02, 2.463919000713126e-02, -1.915799419874494e-03, -1.999420619664886e-03, -4.235906459888506e-03, -1.181864639196604e-03, -1.449401193269619e-03, -1.449401193269619e-03, -7.463829358179663e-02, -7.458536371059191e-02, -7.463523400255154e-02, -1.224312405851439e-01, -7.461184454804713e-02, -7.461184454804713e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457944e-02, -4.347671568796763e-02, -4.002408893187071e-02, -4.160333677158368e-02, -3.525487529163158e-02, -3.953785373313161e-02, -4.073971282717846e-02, -6.418936514394004e-02, -2.699430518029856e-02, 2.599699276152972e-02, -2.581454244194446e-02, -5.965684239534061e-02, 2.359927240403877e-02, 2.359927240403872e-02, -1.873262677774475e-03, -1.158128008726637e-03, -8.989815223995897e-04, -2.031142249656109e-02, -2.148658723728447e-03, -1.070310736464997e-03, -3.526715482005063e-02, -3.704083290411628e-02, -6.383636564200691e-02, -3.594715239027285e-02, -3.620969151759107e-02, -3.620969151759107e-02, -3.519053118937874e-02, -3.580583836892790e-02, -3.879044306359195e-02, -3.903328707440380e-02, -3.924013683011447e-02, -6.128134397443009e-02, -4.273703182493352e-02, -4.238697070491521e-02, 1.582343967650526e-03, -5.192846777352228e-02, -1.288350706097510e-02, -1.288350706097510e-02, -5.782021926348150e-02, -4.381333922883594e-03, -2.526787396960785e-03, -2.826953001882081e-02, -2.356177787973960e-02, 1.060743366153811e-02, -2.574152783789042e-03, -3.334592871238124e-04, -6.759361420073390e-04, 9.076334356699150e-03, -9.956303873808901e-04, -9.956303873808927e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747371672952983e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -1.185687043782132e-01, -7.507468276142483e-02, -1.382720308532938e-01, -1.389121140197960e-01, -1.391721580208784e-01, -1.392379623994885e-01, -1.392379623994885e-01, -7.033183809953643e-02, -7.377836457484195e-02, -7.900736698061860e-02, 2.720341881135190e-02, -1.738105280537094e-02, -1.738105280537125e-02, -2.776443109356361e-03, -2.878619907091134e-03, 3.191230750221406e-03, -1.783869699192854e-03, -2.156321747742387e-03, -2.156321747742387e-03, -5.902629360273026e-02, -5.945919726384163e-02, -5.905103426905142e-02, -1.321455341852713e-01, -5.924244382039742e-02, -5.924244382039742e-02, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -1.270588022027467e-01, -3.592125513687472e-02, -2.704884870414456e-02, -5.753193716983050e-02, -3.478945142781092e-02, -3.174366695690942e-02, -7.210898567657270e-02, -3.211636191061110e-02, -2.337291871513743e-02, -3.079828628005500e-02, -4.118037028234428e-02, 4.467563847267587e-02, 4.467563847267592e-02, -2.429818831173949e-03, -1.750774206418725e-03, -1.358169175658139e-03, -2.457414087463874e-02, -2.781518125836640e-03, -1.613345568843207e-03, -6.638279848929544e-02, -5.194700514595988e-02, -7.173787450420190e-02, -6.146308341641585e-02, -5.931015068109747e-02, -5.931015068109748e-02, -6.395886533829469e-02, -4.554505257849375e-02, -2.823221171312854e-02, -2.605247068029699e-02, -2.466571931624606e-02, -6.904837093538647e-02, -2.633598417168891e-02, -4.894336676652947e-02, -9.702308100302563e-02, -5.914859868946303e-02, -9.157803560113500e-02, -9.157803560113487e-02, -6.539524416530183e-02, 2.116461653067984e-03, 1.239954235955459e-02, -5.245692094336719e-02, -2.826624935272212e-02, 4.758034268620536e-02, -3.637983637831330e-03, -5.200684996943483e-04, -1.037487994128748e-03, 4.457274671554379e-02, -1.502763762385033e-03, -1.502763762385118e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.802631479046409e-09, -1.802591412641331e-09, -1.802412207629187e-09, -1.803007276057579e-09, -1.802695641883307e-09, -1.802695641883307e-09, -1.253352025669109e-05, -1.253312553483133e-05, -1.252165368337884e-05, -1.252091848239802e-05, -1.252716511594687e-05, -1.037627835843676e-07, -2.940072430559284e-02, 1.314887597934282e-03, 1.466912184340399e-03, 1.433739137907898e-03, 1.442075898791131e-03, 1.442075898791131e-03, 5.182185329938264e-01, 5.119142078876290e-01, -1.463765835815010e-02, 4.175443774115399e-02, 3.864703370679103e-01, 3.864703370679117e-01, 1.413967180494404e+02, 1.268437025582394e+02, -3.321522855295248e+00, 4.357382980884435e+02, 3.048202438252460e+02, 3.048202438252460e+02, -1.056780631355025e-07, -1.008112574049207e-07, -1.054019001373570e-07, -1.344136946569758e-06, -1.032546044924939e-07, -1.032546044924939e-07, -1.922946297597425e-04, -1.853523124657703e-04, -1.975716187570776e-04, -1.912295068470542e-04, -1.859754287817830e-04, 2.353935521425356e-06, -4.147730558890553e-03, -4.232776532273344e-03, -1.925001619755780e-03, -5.097747023007838e-03, -4.560553419495813e-03, -4.541297872031472e-02, -2.617187596066305e+02, 2.074032581092491e-01, -3.698631421828204e+02, -2.118443215851529e-05, -3.712935383582786e-01, -3.712935383582771e-01, -9.180060161168079e+08, 4.315873280333492e+02, 2.147310373685702e+03, -2.131794898311867e+03, -4.839952129458942e+08, 8.953808109174776e+02, 6.546700578522849e-02, 1.765597406666608e-02, -1.493287617802883e-02, 4.106521469873484e-02, 3.410760080467672e-02, 3.410760080467672e-02, 6.161339400663272e-02, -5.507014630890942e-03, -9.705342831031716e-03, -8.994190273611462e-03, -1.045714862521984e-02, -7.604098767108111e-02, -3.537607449715804e-03, -5.045206061382823e+00, 9.645819885841590e-02, -5.920320131542086e-01, 4.508528219517345e-02, 4.508528219517335e-02, -1.715436181680978e-01, -3.299115852227610e+00, -2.974487851027594e+00, -1.118880812183686e-02, -7.344928129564554e+02, -2.467246786628162e+00, 4.333791365078590e+01, 8.048723671078867e+03, 2.819571786158356e+03, -2.982599806766714e+00, 1.262271403023200e+03, 1.262271403023451e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.175198931711959e-17, -2.587689075614103e-57, -2.588001097248922e-57, -2.586680657467291e-57, -2.587384486064473e-57, -2.587384486064473e-57, -1.528122237485599e-50, -1.528890758729215e-50, -1.549043322529345e-50, -1.539504120735506e-50, -1.542083552311275e-50, 5.304618642025247e-04, -2.866854390112774e-44, 2.545842762419401e-03, 1.992176498998370e-03, 2.250715220528941e-03, 2.188943552820839e-03, 2.188943552820839e-03, 8.629969249997271e-03, 9.508648315609538e-03, -2.178676168983625e-45, 5.154561580547998e-04, 2.763854765227839e-03, 2.763854765227764e-03, -5.503505017040789e-04, -5.851292202488328e-04, -1.312019040206260e-03, -3.006937276438321e-04, -4.288741524977912e-04, -4.288741524977912e-04, 6.990717779320782e-05, 5.739021408240703e-05, 6.919446553854282e-05, -3.404891354087704e-23, 6.367148566926127e-05, 6.367148566926127e-05, -2.100774294371138e-20, -2.728671857060377e-48, -2.657382488130872e-48, -2.690697678800476e-48, -2.733790658313002e-48, 1.114873251857902e-03, 1.738753165496318e-02, 1.415049181247134e-02, 1.416397193729727e-02, 1.870546766154962e-02, 1.804562887426673e-02, -1.326235209831317e-42, -5.938728647215999e-38, 2.420385490403288e-03, -9.365887513293462e-38, 2.647516261584295e-03, -3.363792927292387e-04, -3.363792927293312e-04, -8.173065852946958e-30, -2.773950488689164e-04, -6.275541952765553e-04, -1.009586858816444e-36, -1.462293683966558e-29, -4.557332674121932e-04, -2.275245901754399e-01, -6.811089812690158e-02, -4.435478677724311e-41, -1.462708520936861e-01, -1.230766687721394e-01, -1.230766687721394e-01, -1.993498115389719e-01, 1.927526993333216e-02, 2.351061272199778e-02, 1.762975140892953e-02, 2.325929713585330e-02, -7.832866507086401e-42, 1.558064224791871e-02, -4.655084139311988e-40, 8.770118158609648e-03, -4.485513674947574e-41, 1.399279485498128e-02, 1.399279485498134e-02, -6.102143377928924e-42, -1.292824235335526e-03, -1.394622660595232e-03, 2.836166641182764e-02, -3.728305104387470e-37, -1.577807504547464e-03, -4.990481006962567e-04, -9.641330080220244e-05, -3.164286363253504e-04, -1.679761535109348e-03, -5.093284206043530e-04, -5.093284206043569e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
