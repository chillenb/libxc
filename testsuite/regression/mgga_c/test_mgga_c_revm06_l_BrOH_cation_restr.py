
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.405003751231612e-01, -1.405013350589889e-01, -1.405052676034445e-01, -1.404910519612398e-01, -1.404985472888776e-01, -1.404985472888776e-01, -7.251475745770154e-02, -7.251835603514631e-02, -7.261455371202646e-02, -7.257714040402051e-02, -7.257919126023978e-02, -6.546610967603449e-02, -4.961323060803627e-02, -2.963655142462958e-02, -2.582538790246494e-02, -2.763114596144298e-02, -2.723352742125333e-02, -2.723352742125333e-02, -9.397619620908799e-03, -1.063037306117374e-02, -8.736205877289353e-02, 1.843308460619674e-02, 5.285615485724954e-03, 5.285615485724964e-03, 9.047770941436991e-03, 9.465599816298886e-03, 3.483814298838400e-02, 5.508872658610975e-03, 6.786424965627082e-03, 6.786424965627082e-03, -9.802429864686529e-02, -9.816021416751181e-02, -9.803208203772555e-02, -1.121485635930822e-01, -9.809237226442585e-02, -9.809237226442585e-02, -6.038632926216879e-02, -6.067360480495522e-02, -6.023120397507427e-02, -6.041976789413550e-02, -6.065021668257728e-02, -5.379121379979634e-02, -4.253773277086976e-02, -5.027306981034934e-02, -3.816399956082427e-02, -4.207390759352206e-02, -4.379690548658201e-02, -4.904874951916808e-02, -1.054401248786515e-01, 4.518084661266603e-03, -1.002392369113968e-01, -6.475891762980307e-02, 2.499311846538212e-02, 2.499311846538212e-02, -1.556049362837832e-03, 5.395379839230437e-03, 4.201118061817942e-03, -6.437960522760842e-02, -1.779127538366460e-03, 4.997835425329255e-03, -5.977305286813848e-02, -5.631483262139394e-02, -6.439550808337102e-02, -5.847763544788005e-02, -5.796891454833583e-02, -5.796891454833583e-02, -5.868793629959186e-02, -3.798714945217803e-02, -4.212109142937598e-02, -4.756817936621624e-02, -4.458556898737034e-02, -5.050575431254366e-02, -4.913181158317240e-02, -5.085713683668093e-02, -1.835242104084945e-02, -3.302418044269085e-02, -2.491022189216098e-02, -2.491022189216101e-02, -3.813522220502572e-02, 3.400104945352497e-02, 3.959301836766768e-02, -3.110557969625483e-02, -9.030539338251567e-02, 3.732274507414453e-02, 1.224230184378000e-02, 1.546824598439072e-03, 3.142957724641995e-03, 3.746264120365194e-02, 4.649836490013554e-03, 4.649836490013562e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.968478039428633e-01, -1.968480975145208e-01, -1.968493526393553e-01, -1.968449978875135e-01, -1.968472873211721e-01, -1.968472873211721e-01, -1.013866589750646e-01, -1.014070518830164e-01, -1.019423571225044e-01, -1.017289001931768e-01, -1.017492483257719e-01, 1.950824200354176e-02, -1.847313056263140e-03, 8.330870165238896e-03, 2.081603755037936e-04, 4.173371954766497e-03, 3.299501327692765e-03, 3.299501327692765e-03, -1.224860031497956e-02, -1.020827608564511e-02, 6.357977926773618e-02, -1.995417035202045e-02, -2.505359416380208e-02, -2.505359416380208e-02, 1.754618878938531e-02, 1.830869029338574e-02, 5.603583697733355e-02, 1.094025111506435e-02, 1.335193389179246e-02, 1.335193389179246e-02, -1.125521504184485e-01, -1.130337987894053e-01, -1.125798969652276e-01, -1.494142802206865e-01, -1.127937312406908e-01, -1.127937312406908e-01, -7.088396181665001e-02, -7.472956731251539e-02, -6.771925660534485e-02, -7.134194998260465e-02, -7.451066934671270e-02, 2.371552481344946e-02, -1.610593231894182e-02, -5.137179771623457e-02, 2.744471152091310e-03, -1.678197739321809e-02, -2.224468216029579e-02, -7.740340464972456e-02, -1.207228173057423e-01, -2.683784673734485e-02, -1.316356000864138e-01, -3.546777950221755e-02, -8.436482059776568e-03, -8.436482059776545e-03, -2.007378917323694e-03, 1.072469162822418e-02, 8.423367433330652e-03, -1.235272039567057e-01, -2.293646391727223e-03, 9.958801281323473e-03, -7.909303825695474e-02, -7.476530442094032e-02, -8.023565047911504e-02, -7.802490480140098e-02, -7.741940574620840e-02, -7.741940574620840e-02, -7.803080399802417e-02, -4.187610820253734e-03, -2.492969027495887e-02, -4.988111507086087e-02, -3.689108833354447e-02, -7.690280120675211e-02, -4.250362109092842e-02, 3.539643936654805e-02, -3.160270022889294e-04, -3.906356378645062e-02, 1.071323849352923e-02, 1.071323849352926e-02, -5.664428876463303e-02, 5.531418336054828e-02, 5.821798033697118e-02, 3.870282126049545e-03, -1.239028022729197e-01, 2.883021000233082e-02, 2.336359084660922e-02, 3.200017466059405e-03, 6.370260652766826e-03, 3.199439666290881e-02, 9.290043502386729e-03, 9.290043502386750e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.896607901643349e-10, -1.896525480324411e-10, -1.896174112374377e-10, -1.897396275444582e-10, -1.896753795858340e-10, -1.896753795858340e-10, -2.122209008200567e-06, -2.122009921918162e-06, -2.116562998559500e-06, -2.117858950120706e-06, -2.118764601892090e-06, -2.200800772959644e-06, -5.088138437047170e-03, -2.556325923557012e-03, -2.386278813242240e-03, -2.517478163040996e-03, -2.486177530919509e-03, -2.486177530919509e-03, -6.577538635869846e-01, -6.699078425599303e-01, -1.755632559949347e-03, -4.693641827761553e-01, -5.383714045195767e-01, -5.383714045195767e-01, -2.291468037526372e+03, -2.088822489773552e+03, -2.628910424175253e+01, -6.507464811298541e+03, -4.676091277158532e+03, -4.676091277158532e+03, -2.183720520379678e-07, -2.153950391050303e-07, -2.182030061414610e-07, -9.950989558456126e-08, -2.168837425752913e-07, -2.168837425752913e-07, -3.397956371781128e-05, -3.254891777143606e-05, -3.506183813420622e-05, -3.376857194259216e-05, -3.267076328275376e-05, -2.904234542830997e-05, -1.065470984957258e-02, -6.019249859117804e-03, -1.399542156855621e-02, -1.276536845358236e-02, -9.917409743225377e-03, -6.350452756320754e-03, -1.534068701367196e+00, -2.771214400001762e-01, -9.066598330192067e+00, -4.206263755809045e-05, -8.697497249861217e-01, -8.697497249861215e-01, -1.813482636932879e+08, -6.425922423842296e+03, -3.251149309201135e+04, -2.489797873359963e+02, -9.544938388528465e+07, -1.350438360472199e+04, 1.293220425655844e-02, 1.539136877195352e-03, 2.489281449690650e-03, 7.583262979792719e-03, 5.921670439751325e-03, 5.921670439751330e-03, 1.198153877656465e-02, -2.304666162308953e-02, -1.931044953424438e-02, -1.279283568547747e-02, -1.659548500672388e-02, -9.227010014422169e-03, -5.419423163747788e-03, -6.214392974503622e-01, -1.573212570378910e-01, -1.059612491443145e-01, -1.297417760637132e-01, -1.297417760637134e-01, -2.910729109719000e-02, -2.968595241220851e+01, -1.213210597613946e+01, -1.249846618924571e-01, -2.384703262178098e+01, -3.276514173818385e+00, -7.385043141770658e+02, -1.169718214279871e+05, -4.150470142605808e+04, -4.170218544816077e+00, -1.905017439568202e+04, -1.905017439568214e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.799262314036765e-05, 2.799291274861729e-05, 2.799398256162858e-05, 2.798970685688265e-05, 2.799197787463605e-05, 2.799197787463605e-05, 1.701730536713867e-04, 1.703409511023681e-04, 1.747609869689610e-04, 1.729474423359992e-04, 1.731733754216949e-04, 1.666961034459296e-03, -5.124744792942184e-03, 1.558279906950289e-02, 1.429717109983979e-02, 1.498734295324029e-02, 1.482452687965806e-02, 1.482452687965806e-02, 8.797391777947682e-02, 9.043593031365200e-02, -6.525305550166964e-03, 5.300506031188219e-02, 6.721903201263295e-02, 6.721903201263296e-02, 8.019632088520046e-03, 8.531450766076141e-03, 2.117408001277213e-02, 4.367532791779104e-03, 6.236325052647971e-03, 6.236325052647971e-03, 8.816907050440844e-04, 8.770796013084670e-04, 8.814294522387807e-04, 4.127059387033235e-04, 8.793885470427541e-04, 8.793885470427541e-04, 8.996208941067791e-05, 1.624837097061654e-04, 3.144531218766623e-05, 9.835454828165433e-05, 1.584832793939540e-04, 4.004437916930488e-03, 4.096375696304869e-02, 3.613910088390575e-02, 4.070713752994911e-02, 4.379823503144250e-02, 4.084870676058677e-02, 1.040006461480869e-02, -3.517316684181294e-03, 5.462573727750835e-02, 5.617071106772411e-03, 5.855976912927450e-03, 5.438858045860401e-02, 5.438858045860398e-02, -1.134339656908375e-06, 4.028588660133779e-03, 9.121135124610111e-03, 2.696395532059551e-02, -2.228870319515425e-06, 6.622462145066641e-03, -1.647298827223286e-02, 1.688445286277581e-02, 2.057039886176601e-02, -3.454058233570140e-04, 4.516191558010530e-03, 4.516191558010553e-03, -9.740478100207116e-03, 5.071339835575079e-02, 5.224888607341766e-02, 4.712862527438656e-02, 5.103029710662647e-02, 1.602737841669348e-02, 3.455468723017970e-02, -5.032252329460390e-02, 6.162476386300274e-02, 8.603600416650007e-04, 6.778730356440908e-02, 6.778730356440912e-02, 6.256233945969707e-03, 2.069160075335813e-02, 2.406633381661058e-02, 8.521293189867923e-02, 9.726405495964414e-03, 4.323488160473616e-02, 7.284186163854496e-03, 1.398686884372615e-03, 4.593280645442105e-03, 4.323334340632285e-02, 7.401585175676874e-03, 7.401585175676892e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
