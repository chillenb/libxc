
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_dldf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.236690023060246e-01, -1.236683363194248e-01, -1.236657372005915e-01, -1.236765814243223e-01, -1.236686486714568e-01, -1.236686486714568e-01, -9.642188952139136e-02, -9.641834448011147e-02, -9.631841117488912e-02, -9.644199837487646e-02, -9.642048612384650e-02, -9.642048612384650e-02, -6.628697793319414e-02, -6.635670223303881e-02, -6.711894671560137e-02, -6.703200674932973e-02, -6.631200951957228e-02, -6.631200951957228e-02, -3.115970516484832e-02, -3.258084334478928e-02, -6.812043185115128e-02, -3.939126499583901e-03, -3.162367203519988e-02, -3.162367203519988e-02, 1.150649336067253e-02, 1.194178243023262e-02, 2.899640973053467e-02, 5.789702278633209e-03, 1.184250240421866e-02, 1.184250240421866e-02, -8.535273332356838e-02, -8.521682052119395e-02, -8.533769283760648e-02, -8.523208628533380e-02, -8.528460313815346e-02, -8.528460313815346e-02, -8.880693897674312e-02, -8.870825582388499e-02, -8.857660007477337e-02, -8.851169934938305e-02, -8.895066915774461e-02, -8.895066915774461e-02, -5.287962081144325e-02, -5.138738962563599e-02, -5.330610750719966e-02, -4.975272996327587e-02, -5.191294346528321e-02, -5.191294346528321e-02, 2.011685766671186e-02, -1.601694740731543e-02, 1.848816504241335e-02, -7.573327915525466e-02, 8.472146638592191e-03, 8.472146638592191e-03, 5.747109036336973e-03, 6.392651690277499e-03, 5.033997935161465e-03, 2.776979962417556e-02, 5.804836813149918e-03, 5.804836813149915e-03, -4.771328206601254e-02, -4.241655460749685e-02, -4.300468440282534e-02, -4.417962997067736e-02, -4.348767820123734e-02, -4.348767820123734e-02, -5.411578810797996e-02, -5.327982351902857e-02, -5.003944634262539e-02, -4.588209317205462e-02, -4.804136873811945e-02, -4.804136873811945e-02, -5.265204338070527e-02, -3.014998408744959e-02, -4.192858217595293e-02, -4.967544490803732e-02, -4.752213441259048e-02, -4.752213441259050e-02, -5.334028860200018e-02, 2.907708776464254e-02, 3.025006156779158e-02, -4.613534758465176e-02, 2.235472884031891e-02, 2.235472884031886e-02, 1.253547395083896e-02, 1.855679353065435e-03, 3.617916893261233e-03, 2.141891876253976e-02, 4.992523839023219e-03, 4.992523839023227e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_dldf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.854059202483851e-02, -7.854072645989778e-02, -7.854049602837009e-02, -7.853826281354755e-02, -7.854067054391847e-02, -7.854067054391847e-02, -5.823113489082419e-02, -5.823078403584190e-02, -5.822222132371407e-02, -5.823642150118561e-02, -5.823103935169959e-02, -5.823103935169959e-02, -5.117208941001242e-02, -5.176010935299837e-02, -7.211880118160481e-02, -7.128438037453740e-02, -5.138266266678321e-02, -5.138266266678321e-02, -9.012038090638984e-02, -8.650578378565743e-02, -4.110789563603665e-02, -9.918382263746775e-02, -8.899427269000557e-02, -8.899427269000557e-02, 1.242066393926310e-02, 1.283796748699705e-02, 1.472570145919381e-02, 6.755012863755326e-03, 1.272853501771354e-02, 1.272853501771354e-02, -6.213394857467126e-02, -6.226363016908394e-02, -6.214437056920772e-02, -6.224529861222361e-02, -6.220377339840458e-02, -6.220377339840458e-02, -1.061971072272513e-01, -1.040808933818816e-01, -1.100227899884445e-01, -1.083224391502519e-01, -9.996694959334550e-02, -9.996694959334550e-02, -3.541986675380128e-02, -6.521516399924482e-02, -3.500316156893207e-02, -5.540839504494947e-02, -3.645022298950306e-02, -3.645022298950306e-02, -5.393907361525377e-02, -1.166962284107270e-01, -5.651912041300158e-02, -9.508152712694058e-02, -8.167671174608923e-02, -8.167671174608923e-02, 6.580623440206991e-03, 7.375034320515002e-03, 5.713808112643748e-03, -6.100964945623885e-03, 6.761768242999475e-03, 6.761768242999457e-03, -6.833239461851422e-02, -5.386910054966913e-02, -5.862762385010430e-02, -6.272534261735911e-02, -6.064005075591778e-02, -6.064005075591777e-02, -7.178150617878998e-02, -4.234149786284556e-02, -3.369470345799516e-02, -3.560633179146830e-02, -3.314534437598848e-02, -3.314534437598848e-02, -6.565163002280718e-02, -1.124654401620774e-01, -8.920735046300426e-02, -4.228539892882181e-02, -6.339660644572660e-02, -6.339660644572669e-02, -4.222389253556443e-02, 1.871688305836213e-02, 5.587689283603994e-03, -3.159079044524192e-02, -3.795191605432211e-02, -3.795191605432222e-02, 1.388128806399336e-02, 2.214428843999752e-03, 4.116118296818198e-03, -3.737046326236477e-02, 5.838536200160624e-03, 5.838536200160586e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.118702678605090e-11, -5.118471983809915e-11, -5.117333029289357e-11, -5.121086971230832e-11, -5.118582242823883e-11, -5.118582242823883e-11, -5.875656131922741e-07, -5.875897260763128e-07, -5.879736302548812e-07, -5.844123281886949e-07, -5.875795838210764e-07, -5.875795838210764e-07, -5.923911474874564e-04, -5.693875174984560e-04, 1.278894699037424e-04, 1.144704023901121e-04, -5.841125438832682e-04, -5.841125438832682e-04, 5.130361333885445e-01, 4.690112241354988e-01, -6.236778235011782e-04, 1.567250504110499e+00, 4.993658867395613e-01, 4.993658867395613e-01, 2.451331360406321e+02, 2.223439659853246e+02, 1.135007297500096e+01, 6.872730467656874e+02, 2.326487563404851e+02, 2.326487563404850e+02, -8.820355701773583e-10, 7.973481349688239e-10, -7.094607052686222e-10, 5.956465809275879e-10, -3.008677115194192e-11, -3.008677115194192e-11, 3.562817456777607e-06, 3.314321981654085e-06, 4.032803943424199e-06, 3.831616344361966e-06, 2.793070734808575e-06, 2.793070734808575e-06, -2.414583108190299e-03, 5.731067958105570e-03, -3.358807262690971e-03, 1.937234839444240e-03, -1.885232823895073e-03, -1.885232823895073e-03, 2.830450804033293e+00, 4.755576849246755e-01, 3.208636628498246e+00, 2.793952765519478e-05, 2.496931139082826e+00, 2.496931139082826e+00, 9.133191599287368e+02, 6.264682846597259e+02, 2.313861697635664e+03, 7.328030685705896e+00, 8.544275633792810e+02, 8.544275633792888e+02, 5.964644438875481e-02, 1.580795842563748e-02, 2.448702077930396e-02, 3.510828871224207e-02, 2.922199683200024e-02, 2.922199683200023e-02, 6.480187781818814e-02, -9.955734266891541e-04, -2.506529141785454e-03, -1.226909506884893e-03, -2.467820024513265e-03, -2.467820024513265e-03, 3.613501166524972e-03, 1.848458039316181e-01, 7.014215684742878e-02, -5.635665081938366e-03, 2.071706946789753e-02, 2.071706946789752e-02, -2.352729291345970e-03, 1.127962997576774e+01, 7.584760512742485e+00, -2.424951747239784e-02, 5.616657475648478e+00, 5.616657475648482e+00, 1.137505329860262e+02, 1.036359319916672e+04, 3.725042128949734e+03, 6.984542192103690e+00, 1.437701006622890e+03, 1.437701006622882e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.901308260762788e-05, -1.901370495964332e-05, -1.901678779457533e-05, -1.900669829750251e-05, -1.901340689666029e-05, -1.901340689666029e-05, -7.255093703415959e-05, -7.257222314598365e-05, -7.324314705862219e-05, -7.341341024520567e-05, -7.255342521245980e-05, -7.255342521245980e-05, -5.209088254007765e-04, -5.244895265909815e-04, -6.378425800822022e-04, -7.010069610979997e-04, -5.222793000806502e-04, -5.222793000806502e-04, -1.264618367428898e-02, -1.250392347144188e-02, -1.092617351916305e-04, -5.772510622542374e-03, -1.257342231973269e-02, -1.257342231973269e-02, -3.662233120388268e-03, -3.760014333832200e-03, -5.365987797625602e-03, -8.607179010039738e-04, -3.827978552769084e-03, -3.827978552769081e-03, -4.273830400414527e-04, -4.325681038862508e-04, -4.279672817444998e-04, -4.319949188140529e-04, -4.299500131446698e-04, -4.299500131446698e-04, -4.199186414667888e-04, -4.350487009667545e-04, -4.265025535272510e-04, -4.390428341607785e-04, -4.213491641707644e-04, -4.213491641707644e-04, -3.108525365144783e-03, -5.020520543091772e-03, -2.161781510646054e-03, -2.759434462221415e-03, -3.882050664517777e-03, -3.882050664517777e-03, -6.356527527219030e-03, -8.849566241032510e-03, -6.807849553632255e-03, -3.501951136390772e-04, -8.574448308388790e-03, -8.574448308388790e-03, -1.237458670049924e-03, -1.140886256305549e-03, -2.091939057091295e-03, -4.516459197173692e-03, -1.072033973065531e-03, -1.072033973065531e-03, -9.225339511109616e-02, -4.906052145529238e-02, -6.243267106363805e-02, -7.536903245649589e-02, -6.862570881525475e-02, -6.862570881525475e-02, -3.780489688118633e-02, -6.219573021290556e-03, -7.501089069833012e-03, -1.206443473424774e-02, -8.924857368862137e-03, -8.924857368862133e-03, -3.235340138557808e-03, -8.863220899135096e-03, -7.633824053289506e-03, -4.679229327605393e-03, -6.711566565649154e-03, -6.711566565649140e-03, -4.350250212390866e-03, -5.248976660197010e-03, -5.424127361261037e-03, -5.051238198046927e-03, -7.791288957299028e-03, -7.791288957299029e-03, -1.856501669873005e-03, -3.189270074011856e-04, -1.182073107240736e-03, -8.190305474396298e-03, -1.090649137307094e-03, -1.090649137307094e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
