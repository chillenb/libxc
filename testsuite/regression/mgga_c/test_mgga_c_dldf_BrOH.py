
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_dldf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698523289e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -1.012501723425150e-01, -6.686302819127440e-02, -5.270723844595120e-02, -4.745579461262700e-02, -4.982855115109829e-02, -5.282670191375125e-02, -5.282670191375125e-02, -2.767845076118100e-02, -2.886663266807929e-02, -7.129454252820250e-02, 1.240667310276734e-02, -2.802653321810213e-02, -2.802653321810213e-02, 1.154846801306897e-02, 1.199715923772838e-02, 3.051529920945266e-02, 6.122814791766698e-03, 1.189016896654763e-02, 1.189016896654764e-02, -8.535353426807261e-02, -8.521660671001677e-02, -8.533837632012074e-02, -1.224181159734425e-01, -8.528489601572430e-02, -8.528489601572430e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119327e-02, -8.708502103547180e-02, -5.562325178892120e-02, -5.032169153284556e-02, -5.662328365797712e-02, -5.381521775968943e-02, -5.434931017430693e-02, -6.444458984389427e-02, -2.795790560897061e-02, -1.223198456042287e-02, -2.775589238622643e-02, -7.855870504841635e-02, 1.496175177509753e-02, 1.496175177509753e-02, -3.066310498112501e-03, 6.681460066156464e-03, 5.140265456518862e-03, -2.111687625325582e-02, -3.174878197427740e-03, 6.144496028953911e-03, -3.660724065050634e-02, -3.960668876677904e-02, -6.421258200260355e-02, -3.773428143776719e-02, -3.815349440683154e-02, -3.815349440683154e-02, -3.729889706836825e-02, -5.337171686854910e-02, -5.048142168919235e-02, -4.629007746540390e-02, -4.860888598070773e-02, -6.165502636499921e-02, -5.354402416151695e-02, -4.342835275928391e-02, -3.843379646212079e-02, -5.212060951466563e-02, -4.473380708227531e-02, -4.473380708227533e-02, -5.782933926396749e-02, 2.983944853121066e-02, 3.283847301916372e-02, -4.702212128306082e-02, -2.479856847389609e-02, 2.726718583276142e-02, 1.324482023646399e-02, 2.006980758760016e-03, 3.674473318866928e-03, 2.655862262583110e-02, 5.301118253791793e-03, 5.301118253791799e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_dldf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821481665e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -1.146056205280651e-01, -7.491623656166164e-02, -1.495653713729696e-01, -1.631955187483174e-01, -1.571255415023149e-01, -1.492010102019760e-01, -1.492010102019760e-01, -9.822139019004916e-02, -9.608213870191680e-02, -7.955565354779474e-02, -8.705182677850855e-02, -9.763284820329074e-02, -9.763284820329074e-02, 1.244485898791377e-02, 1.287145196417827e-02, 1.772226851731111e-02, 6.867138229376050e-03, 1.275732727359396e-02, 1.275732727359399e-02, -6.183832319862998e-02, -6.196536731362837e-02, -6.185222198925771e-02, -1.321322029122264e-01, -6.190169927108226e-02, -6.190169927108226e-02, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -1.182734916784789e-01, -4.438925319475039e-02, -3.401062771823422e-02, -5.509251016331221e-02, -3.935627692143139e-02, -3.901698412248526e-02, -7.237723572555273e-02, -3.318915835573125e-02, -1.185124599057012e-01, -3.296452513148780e-02, -5.403325749868385e-02, -7.431146508712237e-02, -7.431146508712237e-02, -3.946287688264066e-03, 7.476331854342937e-03, 5.751158311999166e-03, -2.549362941948338e-02, -4.083422991717209e-03, 6.881654306747228e-03, -5.277874100656013e-02, -4.349279597740797e-02, -7.213338981778679e-02, -4.886577783991418e-02, -4.754657954979859e-02, -4.754657954979859e-02, -4.839301188976886e-02, -4.496198545803854e-02, -3.506173422346423e-02, -3.233503234224950e-02, -3.281683159549586e-02, -6.944209849581727e-02, -3.605912030451847e-02, -5.006348929577377e-02, -1.014261766758368e-01, -5.935291128433449e-02, -8.174863083838045e-02, -8.174863083838049e-02, -6.540488546969517e-02, 2.011374147137830e-02, 1.106384405965192e-02, -5.376361231370642e-02, -2.965891225314009e-02, -2.867944048646185e-02, 1.432980111504308e-02, 2.260321559714591e-03, 4.133654079994222e-03, -2.766329506146974e-02, 5.945204437512156e-03, 5.945204437512146e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.599123676699888e-09, 1.599118810143838e-09, 1.599082073440105e-09, 1.599163513616092e-09, 1.599121217577881e-09, 1.599121217577881e-09, 7.352171925677840e-06, 7.352333843797556e-06, 7.355987893821270e-06, 7.351784092489567e-06, 7.352051247371272e-06, 2.325156538556218e-07, 1.562227718330103e-02, 1.414647692582920e-03, 1.646162626702567e-03, 1.574829915858552e-03, 1.408862004654460e-03, 1.408862004654460e-03, 5.498739840547092e-01, 5.156931006497142e-01, 6.595205366891921e-03, 1.185202102895946e+00, 5.395474445302427e-01, 5.395474445302427e-01, 2.442689281254467e+02, 2.212614288234013e+02, 9.852800484282442e+00, 6.784762925758622e+02, 2.316696199216908e+02, 2.316696199216898e+02, -1.736870942994242e-09, -8.343535429782781e-11, -1.556131504517503e-09, 1.581592773759799e-06, -9.130264732797559e-10, -9.130264732797559e-10, 1.084314611230923e-04, 1.054046807471209e-04, 1.096726819862517e-04, 1.072669437746847e-04, 1.048426077527047e-04, 4.993817955127031e-06, -4.034522985097793e-04, -9.499718745101109e-04, 5.020526767200728e-04, -8.755970759243718e-04, -7.779482407238574e-04, 3.030939351595727e-02, 9.323328595471523e+01, 4.662918525569650e-01, 9.880801227839233e+01, -3.531136483011239e-06, 2.170427855888280e+00, 2.170427855888280e+00, 4.482629379145496e+07, 6.188165694445161e+02, 2.302586891268494e+03, 7.607939104596328e+02, 3.781547792731307e+07, 8.404986703034832e+02, 3.795051102964723e-02, 1.004153320825218e-02, 6.701551675955497e-02, 2.244788120987868e-02, 1.868703688386930e-02, 1.868703688386930e-02, 2.603861580959884e-02, -3.648358361289437e-04, -1.847693807137462e-03, -1.608106105648284e-03, -2.043768156623248e-03, 5.686210169903293e-02, -7.269824681685824e-04, 1.978091309358057e+00, 8.193260863188095e-02, 3.168532630879359e-01, 3.776802246158110e-02, 3.776802246158115e-02, 1.008116163954361e-01, 1.047551925283141e+01, 6.247347917031364e+00, 1.185778714533586e-02, 2.356446908280855e+02, 4.621510780755988e+00, 1.057023359183349e+02, 1.034234532734477e+04, 3.720565577419556e+03, 5.661426529946870e+00, 1.416356880918904e+03, 1.416356880918886e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_dldf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.175597516793780e-17, -1.891749368148146e-55, -1.891961063879302e-55, -1.891039219062719e-55, -1.891722648972900e-55, -1.891722648972900e-55, -1.120376362542363e-48, -1.120870262171640e-48, -1.135443652252783e-48, -1.128896991940009e-48, -1.120461538145601e-48, -2.120627777224659e-04, -2.082287175856215e-42, -2.167300007059868e-03, -2.046001790390131e-03, -2.114138744577504e-03, -2.170436979979287e-03, -2.170436979979287e-03, -1.493011075572214e-02, -1.513660068236833e-02, -1.624298180875260e-43, -8.959777073414882e-03, -1.498503151437708e-02, -1.498503151437708e-02, -3.737122876288242e-03, -3.857594235478550e-03, -6.199572600026932e-03, -1.240566972963410e-03, -3.913903457895928e-03, -3.913903457895922e-03, -4.285691984211416e-04, -4.337533520299707e-04, -4.291383821859906e-04, -3.409626118506600e-23, -4.311558915357062e-04, -4.311558915357062e-04, -2.099537646195673e-20, -1.992708025795788e-46, -1.952713587405417e-46, -1.973932369194182e-46, -2.006954171662416e-46, -5.154710726951107e-04, -5.608646083318675e-03, -8.804358653898640e-03, -5.233673834680878e-03, -6.383588670048451e-03, -6.087573710355903e-03, -9.488546432329759e-41, -3.726797173249607e-36, -9.813950770114020e-03, -4.693475062113873e-36, -8.996025137971540e-04, -1.027930974791426e-02, -1.027930974791426e-02, -7.196553759938287e-29, -1.509260140297875e-03, -2.361111448319107e-03, -5.133471085649005e-35, -5.952055649368620e-29, -1.552891717037282e-03, -1.539850616839493e-01, -5.599686722537992e-02, -3.436570875144489e-39, -9.984031520508577e-02, -8.663274941629229e-02, -8.663274941629229e-02, -1.054872512279109e-01, -6.748734803041474e-03, -8.371257390049925e-03, -1.336626238906558e-02, -1.002367839093521e-02, -5.546467794074482e-40, -6.455499588464293e-03, -3.056471300996454e-38, -9.318248802229661e-03, -3.265257211691863e-39, -9.350610436503360e-03, -9.350610436503355e-03, -4.602576215375019e-40, -5.701109360024429e-03, -6.492760103351107e-03, -1.078371162438108e-02, -1.983232489017297e-35, -9.385482372006764e-03, -2.632754639478303e-03, -5.258337291905926e-04, -1.289999987291040e-03, -1.000824270761012e-02, -1.610152183682481e-03, -1.610152183682481e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
