
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scanl_rvv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.862820616607801e-02, -3.862902916058228e-02, -3.863137091121752e-02, -3.861914979891855e-02, -3.464471270262454e-02, -3.464471270262454e-02, -2.915031995861006e-02, -2.718147027664118e-02, -2.718153675959016e-02, -2.614424946133027e-02, -2.915060780005111e-02, -2.718148771973304e-02, -2.445154336937431e-02, -2.444829958140505e-02, -2.437340598295246e-02, -2.439756630967844e-02, -2.337565391008893e-02, -2.427008570872782e-02, -1.410547549952170e-02, -1.433531664718054e-02, -2.394518594048903e-02, -1.738217785637194e-02, -1.235590838547158e-02, -1.969185467103316e-02, -8.223426940845032e-04, -6.562951515737515e-04, -9.173739163610087e-03, -1.111894621264924e-04, -9.253722649732151e-04, -6.923030310548709e-05, -2.749636480652998e-02, -3.803144275008905e-02, -2.749637092739776e-02, -2.749648069812044e-02, -2.749642748932815e-02, -3.796786032392491e-02, -2.434063665361704e-02, -2.439706611380218e-02, -2.654290081144486e-02, -2.430882113922495e-02, -2.655817688416516e-02, -2.434780271382501e-02, -2.407054079257307e-02, -3.924364946123425e-02, -2.379808290069849e-02, -3.357398645419277e-02, -2.404376917054870e-02, -2.404376917054868e-02, -1.106874189046005e-02, -1.895812590306762e-02, -1.461605404991302e-02, -6.689957850808168e-02, -1.608732534686956e-02, -9.978936683581598e-03, -7.309561422096103e-05, -1.408804788577254e-03, -3.530763268818732e-04, -1.214287247450274e-02, -1.168727589306467e-03, -1.168727589306466e-03, -3.863212180499800e-02, -3.506678977566738e-02, -3.611177606736583e-02, -2.407858130094375e-02, -3.656923429071707e-02, -2.407610462217323e-02, -2.400276452966144e-02, -2.352122657804275e-02, -2.367116028392360e-02, -2.380982076770610e-02, -2.637290755243439e-02, -2.374027700536388e-02, -2.444160683509042e-02, -1.643846433513522e-02, -2.105215271653865e-02, -2.078951643395232e-02, -2.167148079745935e-02, -2.167148079745935e-02, -2.184062742907904e-02, -3.236302186725006e-03, -6.583350371874523e-03, -2.148120078203482e-02, -1.363052275451069e-02, -1.363052275451069e-02, -4.352490501479212e-04, -4.014203202069063e-04, -4.531148990847909e-05, -7.099870312705096e-03, -1.109937370003485e-03, -4.850130768636582e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scanl_rvv10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.126322367723599e-01, -1.126323019535205e-01, -1.126348217391664e-01, -1.126348355000037e-01, -1.126420060701637e-01, -1.126422177879247e-01, -1.126042888834115e-01, -1.126039142003913e-01, -1.048167160577689e-01, "nan", -1.048167160577689e-01, "nan", -7.801837498276469e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.801051500813491e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.465958516448389e-02, "nan", "nan", -2.306063097466636e-02, -2.180803017871412e-02, -2.337634947681890e-02, -2.187975362171621e-02, -1.946543201128485e-02, "nan", "nan", "nan", "nan", "nan", "nan", 5.586386299533217e-02, -1.605797977844323e-03, "nan", -1.453286863335217e-03, "nan", "nan", "nan", -1.948531313426205e-04, "nan", "nan", -2.398450432760586e-03, -5.965899948965226e-05, "nan", "nan", "nan", -1.134075994512491e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.132355567868630e-01, "nan", -1.802272740438320e-02, "nan", -1.809765564359783e-02, "nan", "nan", -1.784188819860189e-02, "nan", "nan", "nan", -1.830568275185603e-02, "nan", "nan", "nan", -7.899021875602194e-02, "nan", "nan", "nan", "nan", -7.810566327077605e-02, "nan", "nan", "nan", "nan", 2.932983461103770e-02, "nan", "nan", "nan", "nan", "nan", -1.305755863296937e-01, -1.306227138593315e-01, "nan", "nan", "nan", -1.078639176348285e-02, "nan", -1.392140323751495e-04, "nan", "nan", -6.985880662753695e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -8.212761923473105e-02, -8.002831231628370e-02, "nan", -8.080895480307927e-02, "nan", "nan", "nan", -8.109437641672999e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.377382996351497e-02, "nan", "nan", "nan", "nan", "nan", "nan", -1.257129048401049e-02, "nan", "nan", "nan", -1.843738831453040e-02, "nan", "nan", "nan", "nan", "nan", -1.962712759871859e-02, "nan", 2.352360470277714e-02, 1.941393176912069e-03, "nan", -3.481218198392644e-02, "nan", "nan", "nan", "nan", "nan", "nan", -7.572092097293330e-04, "nan", "nan", "nan", -8.410554632605442e-05, "nan", -3.084093051086099e-04, "nan", "nan", -1.093685723458919e-03, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.927480278486603e-10, 3.627791097038604e-10, 1.927482003794890e-10, 1.927564143370832e-10, 3.627920678130153e-10, 1.927561702087889e-10, 1.927736522519792e-10, 3.628192628927929e-10, 1.927751843563731e-10, 1.926546732840676e-10, 3.626270364913155e-10, 1.926514658056817e-10, 2.006101747557556e-10, 3.773353263499010e-10, "nan", 2.006101747557556e-10, 3.773353263499010e-10, "nan", 8.792469714134440e-07, 1.991402313381600e-06, "nan", "nan", 3.115097476778729e-06, "nan", "nan", 3.114011613875532e-06, "nan", "nan", 1.526337024399494e-06, "nan", 8.788451519026766e-07, 1.991839897672698e-06, "nan", "nan", 3.114738527059590e-06, "nan", "nan", 6.184949511033545e-03, "nan", "nan", 6.215844766606363e-03, "nan", "nan", 7.021205259581796e-03, "nan", "nan", 6.763844517423094e-03, "nan", "nan", 3.719043542102037e-03, -1.566684621401037e-03, "nan", 6.768834578287718e-03, "nan", -2.767229336568078e-01, 6.918619062983018e-01, -2.093683507441951e-01, -2.715049833247203e-01, 6.705794912776425e-01, -1.974120622082901e-01, -7.448428990029698e-04, 1.869563159580186e-03, "nan", "nan", 8.342024523058560e+00, "nan", "nan", 3.507412252999405e+00, "nan", "nan", 8.132343183631503e+00, -1.769415062220226e+01, 1.853846017537404e+02, 4.196033739523899e+02, "nan", -2.106446126011117e+04, 3.446553780371497e+04, "nan", "nan", 2.311424576509816e+03, "nan", -4.108807859136633e+00, 4.340710730766305e+02, "nan", "nan", 1.585457285961986e+04, 7.858799000966169e+03, 1.857872837746121e+01, 4.798118032581628e+01, "nan", "nan", 4.671705024344597e-07, "nan", 3.128015925855110e-07, 5.645303624719026e-07, "nan", "nan", 4.671503622439363e-07, "nan", "nan", 4.667936014162938e-07, "nan", "nan", 4.669664098539013e-07, "nan", "nan", 5.626108766618176e-07, 3.116807402204892e-07, "nan", 1.673007030079081e-05, -6.063575089054111e-06, "nan", 1.636359822503486e-05, -5.946656737112712e-06, "nan", 4.662975943011525e-05, "nan", -5.949421070717000e-06, 1.639697301588729e-05, "nan", "nan", 4.413209893985145e-05, "nan", -5.909639967214263e-06, 1.641260705661221e-05, "nan", "nan", 1.132723396668320e-02, "nan", -2.863165231811599e-03, 1.879951167396638e-02, "nan", "nan", 1.603914302816250e-02, "nan", "nan", 2.490306455855735e-02, 1.419671485309808e-02, "nan", 1.049223589146553e-02, "nan", "nan", 1.049223589146553e-02, "nan", -8.675653891085739e+00, 1.897365075968649e+01, "nan", "nan", 2.513154334862539e+00, "nan", "nan", 5.547264869296495e+01, "nan", 9.008793460238326e-05, 1.630098122077732e-04, 9.010110007575768e-05, "nan", 2.003990128725882e+01, "nan", "nan", 2.547207878863000e+00, -6.273618676712054e-01, "nan", 3.533929813847407e+02, 1.330742690177581e+02, "nan", 4.180404676390555e+07, "nan", 2.510285209829204e+03, 5.405729454072864e+03, "nan", "nan", 3.003672382265459e+02, "nan", "nan", 5.362177679609064e+07, "nan", "nan", 5.362177679609063e+07, "nan", "nan", 2.805611724881884e-02, 1.616159241452744e-02, 1.345468557416992e-02, 2.333352279753507e-02, "nan", 1.426410693420683e-02, 2.471105345637151e-02, "nan", "nan", 1.118552908743266e-02, "nan", 1.462017245563338e-02, 2.532254022425334e-02, "nan", "nan", 1.122772212860754e-02, "nan", "nan", 1.254514334166721e-02, "nan", "nan", 2.493738414961819e-02, "nan", "nan", 2.027269172727151e-02, "nan", "nan", 1.665400594851026e-02, "nan", 9.863387418386672e-03, 1.923046539274423e-02, "nan", "nan", 1.839412122348193e-02, "nan", "nan", 6.291630711426323e-03, "nan", "nan", 3.151073484197649e-01, -1.028754197808238e-01, "nan", 4.048613100586211e-01, "nan", "nan", 7.167127748674047e-02, -2.468845692039448e-02, "nan", 2.195302939578999e-01, "nan", "nan", 2.195302939578999e-01, "nan", "nan", 2.185514927327993e-02, -7.393930494535780e-03, "nan", 2.205932040882960e+02, -1.025124939870401e+02, -1.633158940500466e+01, 4.004615980682636e+01, "nan", 4.733005813160405e-03, 1.021090327804366e-01, "nan", "nan", 1.072993548718383e+02, "nan", "nan", 1.072993548718382e+02, "nan", "nan", 9.734154166888615e+01, 3.435449242957564e+00, "nan", 9.795348327074646e+09, "nan", "nan", 7.995419932848787e+02, 3.631920358049493e+02, "nan", 1.643704635248220e+01, -6.118910742410328e+00, "nan", 7.526258666062917e+07, "nan", 6.119854588416772e+03, 1.233029952766726e+04, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-3.810134603921183e-06, -3.810136482533607e-06, -3.810286773573578e-06, -3.810282127659170e-06, -3.810655540934651e-06, -3.810679111674681e-06, -3.808482137938710e-06, -3.808431517219964e-06, -4.005703805089530e-06, "nan", -4.005703805089530e-06, "nan", -9.237655975592747e-05, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", -9.237262828382556e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.538124538884325e-06, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, -1.426333378808621e-07, "nan", -2.888205414752877e-04, 0.000000000000000e+00, "nan", "nan", -9.928577980445998e-08, "nan", "nan", -2.191661399175894e-08, -1.797687567106883e-08, "nan", "nan", "nan", -8.282325184734688e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -8.260278249713181e-05, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 2.279853543469409e-62, "nan", "nan", "nan", "nan", -5.148438091514197e-03, "nan", "nan", "nan", "nan", 2.698099136660645e-64, "nan", "nan", "nan", "nan", "nan", -8.963051809937114e-04, -8.963225458919845e-04, "nan", "nan", "nan", 0.000000000000000e+00, "nan", -6.242283675188669e-09, "nan", "nan", -4.355746605881738e-08, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.181587150401032e-03, -5.292147114648730e-03, "nan", -5.562097913636921e-03, "nan", "nan", "nan", -5.679323114993774e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.360503407649033e-03, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", -3.722686267448369e-05, "nan", -5.729323181287651e-66, 0.000000000000000e+00, "nan", -2.295998069308146e-03, "nan", "nan", "nan", "nan", "nan", "nan", -1.641039030880583e-06, "nan", "nan", "nan", -1.534994454740528e-09, "nan", 0.000000000000000e+00, "nan", "nan", -8.798150152900578e-09, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
