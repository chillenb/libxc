
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_gaussian_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.771284813660264e-02, -4.771339015179830e-02, -4.771436849245558e-02, -4.770630347757458e-02, -4.771073320686425e-02, -4.771073320686425e-02, -4.180384503626044e-02, -4.180882053304491e-02, -4.192437197761271e-02, -4.172754625011327e-02, -4.181152529290309e-02, -4.181152529290309e-02, -2.776447657482649e-02, -2.753687221191328e-02, -2.211532494584029e-02, -2.243651464450863e-02, -2.214888323484150e-02, -2.214888323484150e-02, -7.468229524801376e-03, -8.075921486120078e-03, -3.001847721885262e-02, -2.316254718016478e-03, -2.768237253595850e-03, -2.768237253595859e-03, -6.812160438732351e-09, -9.197235133472838e-09, -1.034582018442099e-05, -3.706854193360786e-10, -6.674887658980855e-10, -6.674887658888041e-10, -5.045710584032700e-02, -5.056741171004878e-02, -5.045803108004288e-02, -5.055552551567111e-02, -5.051514137807292e-02, -5.051514137807292e-02, -2.297687941400553e-02, -2.347735272000168e-02, -2.203331431042461e-02, -2.247244528775935e-02, -2.372310784453706e-02, -2.372310784453706e-02, -3.836038314582188e-02, -5.507117815653517e-02, -3.615395032998495e-02, -5.096622515137101e-02, -3.991214993806005e-02, -3.991214993806005e-02, -4.746887370477840e-04, -3.887649553744056e-03, -3.676527446263948e-04, -7.151148891519366e-02, -1.225072947141098e-03, -1.225072947141098e-03, -1.400534290715022e-10, -3.689646382230749e-10, -6.455883785801738e-10, -9.514869882772040e-05, -5.962463535312570e-10, -5.962463514712423e-10, -5.560056021971696e-02, -4.763847009974511e-02, -4.965763579376732e-02, -5.184686333998389e-02, -5.068055543152006e-02, -5.068055543152006e-02, -6.086333016380578e-02, -2.805834888964646e-02, -3.362108335554449e-02, -4.020421231645246e-02, -3.676590200061753e-02, -3.676590200061753e-02, -5.520096656891119e-02, -6.916929505291609e-03, -1.150214416787317e-02, -2.429682941845211e-02, -1.737599784632855e-02, -1.737599784632854e-02, -2.736600946448606e-02, -8.017580487634172e-06, -2.949821488391896e-05, -2.867903361434534e-02, -3.043915476713444e-04, -3.043915476713545e-04, -2.104225249088973e-08, -3.712723732124232e-12, -5.472169418414743e-11, -2.470048639508448e-04, -5.406385149342835e-10, -5.406385097561966e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.133323945389660e-01, -1.133322552696286e-01, -1.133331670951616e-01, -1.133333499709756e-01, -1.133357869349393e-01, -1.133346050463923e-01, -1.133200804892033e-01, -1.133225441176095e-01, -1.133250121377290e-01, -1.133327919380503e-01, -1.133250121377290e-01, -1.133327919380503e-01, -1.064100692862858e-01, -1.063966450315423e-01, -1.064158362732493e-01, -1.064016351078958e-01, -1.065361098600759e-01, -1.065205530789140e-01, -1.062771087128132e-01, -1.062599522829872e-01, -1.064144568506154e-01, -1.063550694085975e-01, -1.064144568506154e-01, -1.063550694085975e-01, -7.768936480249770e-02, -7.705779812142927e-02, -7.747985406629382e-02, -7.670354382609143e-02, -6.860055533113005e-02, -6.973198737690092e-02, -6.972448301347496e-02, -6.932832384836929e-02, -6.476254227718563e-02, -7.598314062422160e-02, -6.476254227718563e-02, -7.598314062422160e-02, -3.049267643045640e-02, -2.822484455962303e-02, -3.239264804564261e-02, -2.978336436381245e-02, -8.426976496178186e-02, -8.118738929411039e-02, -1.145038946258279e-02, -1.143439485112622e-02, -1.017843728417798e-02, -2.938075638843356e-02, -1.017843728417806e-02, -2.938075638843363e-02, 1.979176374811985e-08, -9.347865078059867e-08, -2.078573713136459e-08, -8.495057329453647e-08, -6.751730237173137e-05, -5.597951043737148e-05, 3.029946752344934e-09, -8.459867023154096e-09, -4.367905478348818e-09, -8.625061426223688e-09, -4.367905478359756e-09, -8.625061431226047e-09, -1.155821110349531e-01, -1.155874752601816e-01, -1.157991539082524e-01, -1.158123624225019e-01, -1.155873029238607e-01, -1.155975645676398e-01, -1.157847377206603e-01, -1.157903942440357e-01, -1.156917872409837e-01, -1.157040971413395e-01, -1.156917872409837e-01, -1.157040971413395e-01, -7.125122658588262e-02, -7.125275219702407e-02, -7.190622939574612e-02, -7.192431259604168e-02, -6.977849914285794e-02, -6.899929580555382e-02, -7.038322775477977e-02, -6.959684466530931e-02, -7.168351349272564e-02, -7.338084343968654e-02, -7.168351349272564e-02, -7.338084343968654e-02, -7.889810694713212e-02, -7.900483559263421e-02, -8.295988007480083e-02, -8.289670731668793e-02, -8.010503115907847e-02, -7.687096478523212e-02, -8.281535964953932e-02, -7.921045586338560e-02, -7.802826896692155e-02, -8.150773156199512e-02, -7.802826896692161e-02, -8.150773156199509e-02, -2.687062537432762e-03, -2.547938615293340e-03, -1.776070140909405e-02, -1.768180214639573e-02, -2.117991745199760e-03, -1.989043464642629e-03, -1.174657900956515e-01, -1.175333241553774e-01, -7.859326180461796e-03, -5.358802951411037e-03, -7.859326180461796e-03, -5.358802951411037e-03, -9.508625887581760e-10, -9.328784886464129e-10, -2.498174197457672e-09, -2.504119754056323e-09, -9.805464888276447e-09, -1.203583482703596e-11, -5.198496583043811e-04, -5.827433865638333e-04, -5.319840496404637e-09, -3.692677631712007e-09, -5.319840493848687e-09, -3.692677629683242e-09, -7.896278546702665e-02, -7.861923379313586e-02, -7.983078962705827e-02, -7.958281277430418e-02, -8.021907863812125e-02, -7.995613020833250e-02, -8.015950542487101e-02, -7.987359759952181e-02, -8.025192950774140e-02, -7.998000967724053e-02, -8.025192950774143e-02, -7.998000967724053e-02, -7.399732591639491e-02, -7.359878084013377e-02, -6.624857633519510e-02, -6.578219409173566e-02, -7.038216037914782e-02, -6.985473043499639e-02, -7.465552434236136e-02, -7.443480813541142e-02, -7.242917243333802e-02, -7.220702899938963e-02, -7.242917243333802e-02, -7.220702899938963e-02, -8.499107647372858e-02, -8.478447861063344e-02, -2.834543022853621e-02, -2.809047232253084e-02, -4.134622297465096e-02, -4.035162528066567e-02, -6.259026563044287e-02, -6.221588906520662e-02, -5.246534821842799e-02, -5.216819473517414e-02, -5.246534821842799e-02, -5.216819473517415e-02, -6.736299154596587e-02, -6.655477625512290e-02, -4.805822983966718e-05, -4.652893758399837e-05, -1.926209739078722e-04, -1.571368064639574e-04, -6.497759369480412e-02, -6.373966433764591e-02, -2.153250879523822e-03, -1.397420478184212e-03, -2.153250879523830e-03, -1.397420478184200e-03, -1.914050423939102e-07, -9.688033038581705e-08, -2.496457633568632e-11, -2.452031282217625e-11, -1.003392604074213e-09, 1.296641688105567e-10, -1.371682074443618e-03, -1.395349224493711e-03, -4.492711408627801e-09, -3.435115241842566e-09, -4.492711406608410e-09, -3.435115242193860e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.396674761817465e-10, 4.394383639986587e-10, 2.396665153274682e-10, 2.396723863512002e-10, 4.394588430953941e-10, 2.396732695332032e-10, 2.396960982722905e-10, 4.395232316143551e-10, 2.396892498850536e-10, 2.395995746955305e-10, 4.392201364979139e-10, 2.396135900509703e-10, 2.396298507165709e-10, 4.393826987714532e-10, 2.396752231393237e-10, 2.396298507165709e-10, 4.393826987714532e-10, 2.396752231393237e-10, 1.084025511212505e-06, 1.904615844701918e-06, 1.083541719927407e-06, 1.084245158396900e-06, 1.905070582875055e-06, 1.083730220703219e-06, 1.088865188471296e-06, 1.915050595321511e-06, 1.088396945280779e-06, 1.080277714051311e-06, 1.892138549054026e-06, 1.079744276780756e-06, 1.084609235774093e-06, 1.903116278752334e-06, 1.083602990057991e-06, 1.084609235774093e-06, 1.903116278752334e-06, 1.083602990057991e-06, 1.905758478481434e-03, 3.018870472902298e-03, 1.880896909460429e-03, 1.898457031617268e-03, 2.984329331531144e-03, 1.867913729424603e-03, 1.618283304697266e-03, 2.105144381103083e-03, 1.662373525635970e-03, 1.629914460513747e-03, 1.979350024263657e-03, 1.614193495197945e-03, 1.383076674683674e-03, 2.238081355385577e-03, 1.817019452425176e-03, 1.383076674683674e-03, 2.238081355385577e-03, 1.817019452425176e-03, 6.413306148376025e-01, -6.414977568369117e-01, 5.232176853164910e-01, 6.428017711508874e-01, -6.040296484780089e-01, 5.113048061171159e-01, 9.875607148416431e-04, 1.865247153326765e-03, 9.723166637255195e-04, 5.798424722620942e-01, -6.974128027510745e-01, 5.417030944063979e-01, 1.918259601374788e-01, -1.423761379362569e+00, 5.673365349141712e+00, 1.918259601374802e-01, -1.423761379362587e+00, 5.673365349141774e+00, 1.125690070974810e+01, -1.874761517712362e+01, 7.819954086118448e+00, 1.241787539439552e+01, -2.018361784035644e+01, 8.217824594643323e+00, 2.295888604562644e+00, -3.802908888469954e+00, 1.660998365362853e+00, 1.536823665437723e+00, -3.226441743151626e+00, 1.699741569109131e+00, 2.015842166799260e-03, 5.874108762635495e-03, 1.375178568513879e-03, 2.015842167706197e-03, 5.874108763114718e-03, 1.375178571592137e-03, 4.285957311026578e-07, 9.321552397334095e-07, 4.285440408242130e-07, 4.328563790401804e-07, 9.443591467441135e-07, 4.328865943798489e-07, 4.288330394543082e-07, 9.328331636886480e-07, 4.288327152265258e-07, 4.326521132751398e-07, 9.435997694186841e-07, 4.326018861335062e-07, 4.306958527602343e-07, 9.382557899312134e-07, 4.307174400420390e-07, 4.306958527602343e-07, 9.382557899312134e-07, 4.307174400420390e-07, 1.017469310530642e-05, -2.733804206883835e-07, 1.017634756027594e-05, 1.015776565668291e-05, -3.420599775045268e-07, 1.016836071262741e-05, 1.020768614778102e-05, -1.212545006917352e-06, 1.003324607512703e-05, 1.021168860589857e-05, -1.297761975891022e-06, 1.003376643048755e-05, 9.993220118708412e-06, 1.669031588492564e-07, 1.040002053933604e-05, 9.993220118708412e-06, 1.669031588492564e-07, 1.040002053933604e-05, 6.317035569929117e-03, 1.003237321711400e-02, 6.299888533499428e-03, 8.386823698025523e-03, 1.808438061181047e-02, 8.364013381418673e-03, 8.093992165255113e-03, 1.280629029073162e-02, 7.811280415155791e-03, 1.161466978932811e-02, 2.408869248168513e-02, 1.173991843549778e-02, 6.296217187111826e-03, 1.072192543827130e-02, 6.280820220453244e-03, 6.296217187111828e-03, 1.072192543827131e-02, 6.280820220453249e-03, 7.301057603771804e-01, -1.176057999133565e+00, 6.917797233837329e-01, 2.949111594481123e-01, -3.787341588527617e-01, 2.873748867023861e-01, 9.321065152572956e-01, -1.358243004752083e+00, 6.946424069882591e-01, 6.072156491738994e-05, 1.256799590590242e-04, 6.071064090323967e-05, 9.884539724920862e-01, -1.215649004287323e+00, 7.109802540385897e-01, 9.884539724920868e-01, -1.215649004287324e+00, 7.109802540385901e-01, 1.852522628596340e-03, 2.237627135406543e-03, 1.780261857525226e-03, 3.259319907928185e-03, 9.850691252336421e-04, 3.155547073516348e-03, 2.661957816896647e+00, -4.412369152326149e+00, 1.890452031598082e+00, 1.485356588560215e+00, -2.672305946045325e+00, 1.434474433136847e+00, 7.136605971455573e-03, 1.626260855835760e-02, 6.213356783943955e-03, 7.136605974184368e-03, 1.626260855970089e-02, 6.213356786164176e-03, 4.826834525067406e-02, 1.075517334263871e-01, 4.831858304883840e-02, 2.734405271300784e-02, 6.501604926909647e-02, 2.735974616810878e-02, 3.315807387827338e-02, 7.807838615720276e-02, 3.318216087201591e-02, 3.943048863792348e-02, 9.120114695594510e-02, 3.948403311827091e-02, 3.611177493758289e-02, 8.438217758942483e-02, 3.615158313961845e-02, 3.611177493758289e-02, 8.438217758942484e-02, 3.615158313961845e-02, 2.906193821660513e-02, 6.083077835146109e-02, 2.908167969629237e-02, 1.225289032923348e-02, 2.372735497909597e-03, 1.201603511452107e-02, 1.233453085257036e-02, 1.189821159728586e-02, 1.211263736722861e-02, 1.494892189060692e-02, 2.873904727967505e-02, 1.492356393336084e-02, 1.301134745444392e-02, 1.892558601219630e-02, 1.295274982976538e-02, 1.301134745444392e-02, 1.892558601219630e-02, 1.295274982976538e-02, 6.348124588073278e-03, 1.347514430717565e-02, 6.328649023100513e-03, 1.709779259891317e-01, -1.931733774455304e-01, 1.658952915437618e-01, 1.084207660119670e-01, -8.417696888341858e-02, 1.027530787317017e-01, 4.610381521164265e-02, 2.497982830744885e-02, 4.541610939735700e-02, 7.409706839623166e-02, -2.419193542939654e-02, 7.379251994124879e-02, 7.409706839623170e-02, -2.419193542939642e-02, 7.379251994124869e-02, 1.554073142797262e-02, 7.089799242631368e-03, 1.509307169022050e-02, 2.074138028012750e+00, -3.981041475712093e+00, 1.991610624429481e+00, 1.526549329406688e+00, -2.642132828516096e+00, 1.257163166808004e+00, 6.577048810624209e-02, 6.174919166618235e-02, 6.336901081577283e-02, 1.575273386916316e+00, -2.265590485683552e+00, 1.152510668422704e+00, 1.575273386916318e+00, -2.265590485683554e+00, 1.152510668422699e+00, 1.189809908835429e+00, -2.118243066513295e+00, 9.617379905610310e-01, 1.991083188404080e-03, 4.127525439521836e-03, 1.891729638750491e-03, 8.312861684027285e-01, -1.372386769623154e+00, 5.748115789221684e-01, 1.880288351038779e+00, -3.198771984387494e+00, 1.713678468056340e+00, 6.571473357337230e-03, 2.082580516911489e-02, 8.311265112376429e-03, 6.571473371560011e-03, 2.082580519122870e-02, 8.311265127583843e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.476926021373481e-05, -1.476926021373481e-05, -1.477043328563105e-05, -1.477043328563104e-05, -1.477640622082522e-05, -1.477640622082522e-05, -1.475909496075693e-05, -1.475909496075694e-05, -1.476805331531680e-05, -1.476805331531680e-05, -1.476805331531680e-05, -1.476805331531680e-05, 4.901917624879634e-06, 4.901917624879637e-06, 4.896044064048129e-06, 4.896044064048116e-06, 4.754009864373191e-06, 4.754009864373187e-06, 4.961422925936930e-06, 4.961422925936940e-06, 4.876775296133530e-06, 4.876775296133534e-06, 4.876775296133530e-06, 4.876775296133534e-06, 1.076318867320358e-04, 1.076318867320359e-04, 1.093824236713644e-04, 1.093824236713643e-04, 1.523493270515280e-04, 1.523493270515279e-04, 1.760139921717291e-04, 1.760139921717291e-04, 7.928889874850157e-05, 7.928889874850157e-05, 7.928889874850157e-05, 7.928889874850157e-05, 3.835644948964361e-03, 3.835644948964362e-03, 4.031757068686036e-03, 4.031757068686036e-03, 1.387041109687211e-05, 1.387041109687211e-05, 7.912633323527635e-04, 7.912633323527642e-04, 1.645576717739182e-03, 1.645576717739181e-03, 1.645576717739206e-03, 1.645576717739207e-03, 3.899563746595345e-09, 3.899563746595350e-09, 5.611276547424742e-09, 5.611276547424744e-09, 4.320104509431289e-06, 4.320104509431289e-06, -3.597562963140303e-11, -3.597562963140305e-11, -9.053236491458908e-10, -9.053236491458918e-10, -9.053236491713812e-10, -9.053236491713817e-10, -6.641981796615651e-04, -6.641981796615649e-04, -6.749561544474912e-04, -6.749561544474912e-04, -6.650166822351902e-04, -6.650166822351902e-04, -6.745013775064209e-04, -6.745013775064210e-04, -6.694581033834825e-04, -6.694581033834823e-04, -6.694581033834825e-04, -6.694581033834823e-04, 9.586497367378974e-05, 9.586497367378971e-05, 9.441847519522807e-05, 9.441847519522802e-05, 9.903081945410674e-05, 9.903081945410674e-05, 9.833821405909901e-05, 9.833821405909912e-05, 9.316158839380496e-05, 9.316158839380496e-05, 9.316158839380496e-05, 9.316158839380496e-05, -1.447128397530225e-03, -1.447128397530224e-03, -2.395760532904868e-03, -2.395760532904871e-03, -2.372873741435016e-04, -2.372873741435013e-04, -5.835644828329474e-04, -5.835644828329477e-04, -1.998361907915620e-03, -1.998361907915620e-03, -1.998361907915618e-03, -1.998361907915618e-03, 1.671980621853426e-04, 1.671980621853428e-04, 1.434153100591854e-03, 1.434153100591854e-03, 1.310253483601372e-04, 1.310253483601373e-04, -5.281625226244667e-05, -5.281625226244667e-05, 5.098916891474837e-04, 5.098916891474836e-04, 5.098916891474843e-04, 5.098916891474841e-04, -2.054964201266729e-11, -2.054964201266729e-11, -8.727498330476720e-11, -8.727498330476721e-11, -5.038644530176931e-10, -5.038644530176929e-10, 3.827114566276803e-05, 3.827114566276804e-05, -4.487257128269337e-10, -4.487257128269334e-10, -4.487257128270514e-10, -4.487257128270514e-10, -7.734160973197315e-02, -7.734160973197321e-02, -6.145906157765908e-02, -6.145906157765908e-02, -7.118990590691102e-02, -7.118990590691110e-02, -7.812686040915440e-02, -7.812686040915442e-02, -7.494665378297255e-02, -7.494665378297248e-02, -7.494665378297248e-02, -7.494665378297247e-02, -1.095969827277622e-02, -1.095969827277623e-02, -9.616265969189718e-04, -9.616265969189710e-04, -5.838867144170028e-03, -5.838867144170026e-03, -1.697193588054308e-02, -1.697193588054308e-02, -1.002690590889272e-02, -1.002690590889272e-02, -1.002690590889272e-02, -1.002690590889272e-02, -1.318342114594343e-03, -1.318342114594343e-03, 2.226218069277164e-03, 2.226218069277163e-03, 2.690301902579556e-03, 2.690301902579556e-03, 1.272882491554872e-03, 1.272882491554875e-03, 2.629295493556812e-03, 2.629295493556812e-03, 2.629295493556805e-03, 2.629295493556804e-03, 5.291828294228147e-04, 5.291828294228168e-04, 3.665849101452873e-06, 3.665849101452875e-06, 1.102555333798449e-05, 1.102555333798449e-05, -1.819863489494509e-05, -1.819863489494509e-05, 1.282592794508651e-04, 1.282592794508652e-04, 1.282592794508685e-04, 1.282592794508685e-04, 1.113426013523442e-10, 1.113426013523443e-10, -2.681380246229706e-13, -2.681380246229706e-13, -3.644853818671404e-11, -3.644853818671402e-11, 1.377912500973006e-04, 1.377912500973005e-04, -4.629754136541784e-10, -4.629754136541784e-10, -4.629754169020543e-10, -4.629754169020545e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
