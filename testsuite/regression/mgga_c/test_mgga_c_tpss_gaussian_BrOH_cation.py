
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_gaussian_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504590431e-01, -1.645996352769430e-01, -1.646000385289871e-01, -8.676556974859168e-02, -6.098256235381930e-02, -4.541378731707828e-02, -3.461904372002134e-02, -2.469620092625885e-02, -2.482970396387003e-02, -2.477570540338663e-02, -2.478130167597092e-02, -3.483331128795228e-02, -6.701332647008379e-02, -3.248522127654523e-02, -1.032037274382325e-02, -1.762281839896326e-02, -6.628241523783371e-02, -1.093759788778809e-02, -1.090925814194833e-02, -1.954278535716177e-02, -1.126963474680482e-02, -1.735107974373192e-03, -1.983355217595536e-04, -1.269870037415218e-04, -2.057730440425381e-08, -1.553692025346269e-08, -1.602728665130687e-05, -1.212755453503574e-09, -5.029485983537628e-11, -5.029485982471304e-11, -7.432537474485978e-02, -5.029855882882914e-02, -5.019455049372312e-02, -5.029189877593137e-02, -8.985605493648201e-02, -6.924827221147663e-02, -3.218602051829505e-02, -3.313572031757629e-02, -2.028050601830407e-02, -2.095725542885849e-02, -4.832392088190725e-02, -3.308052343359086e-02, -3.929627772561505e-02, -3.775173426444991e-02, -2.558620209649506e-02, -3.069861822272776e-02, -3.898482607457431e-02, -3.199893035021849e-02, -3.736160785000721e-04, -6.594658363892838e-03, -7.321901756447667e-04, -3.648544015800248e-02, -2.526840548885943e-03, -2.526840548885943e-03, -1.618680549566236e-10, -2.033676535009827e-10, -2.183628484671147e-09, -1.808277742077540e-04, -1.495016617661492e-09, -1.495016615574403e-09, -4.277461057798479e-02, -4.159696962507787e-02, -6.383563580100113e-02, -5.598377659500996e-02, -6.385539257642651e-02, -5.563213235369229e-02, -5.663485404094581e-02, -4.595220544200775e-02, -4.122336775538172e-02, -3.673558408970916e-02, -3.438873675379039e-02, -4.413440210846029e-02, -5.613607844607025e-02, -1.165978826324250e-02, -1.547344940561576e-02, -2.536298303947456e-02, -2.237021857136182e-02, -2.081509029764986e-02, -2.386174257407812e-02, -1.432337785401933e-02, -3.045592959983348e-05, -3.109932298978258e-02, -2.712650026057655e-04, -2.712650026057569e-04, -5.037446550363285e-03, -6.692596422483406e-13, -1.374982125405463e-03, -2.268013163367492e-02, -2.344640752889705e-10, -1.180994150919179e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753468127e-01, -1.747373592471605e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.656789432696358e-01, -1.702493578304728e-01, -1.359670261827309e-01, -1.483980172770389e-01, -9.205990833258894e-02, -9.205619071364543e-02, -1.075080573672851e-01, -9.336771978133776e-02, -7.411202118058376e-02, -7.413183198209168e-02, -7.437222187617722e-02, -7.431159782251674e-02, -7.625744202269405e-02, -7.625769795069903e-02, -7.454683754666755e-02, -7.397870578192101e-02, -9.373755409459519e-02, -1.077260504396216e-01, -7.534022876475924e-02, -7.481054072999213e-02, -8.442350353947395e-02, -8.651940229564899e-02, -4.313957427133928e-02, -4.382090287525364e-02, -6.966168897392952e-02, -5.590646081037563e-02, -7.037457509512338e-02, -7.906556863981584e-02, -4.058974342107212e-02, -5.057159386114321e-02, -3.040708212352836e-02, -4.675589654617043e-02, -5.414559648713192e-02, -5.311794030710822e-02, -5.366284085007631e-02, -4.308027278779956e-02, -9.842805294412402e-03, -7.552517221212538e-03, -4.169523372462834e-04, -8.074909379364361e-03, 1.283846944313190e-05, -6.259857705688462e-03, -1.377201723043159e-07, -1.321283078490873e-07, -1.083670376563959e-07, -1.078377930301554e-07, -1.078657172535521e-04, -1.070753538995029e-04, -7.932226864016167e-09, -8.018801292926794e-09, -3.031025966456956e-10, -4.668009499561985e-10, -3.031025959135249e-10, -4.668009478276784e-10, -1.409950345209406e-01, -1.410243989683345e-01, -8.723865696160393e-02, -8.724053118920796e-02, -8.724922488112516e-02, -8.724937304991262e-02, -8.724246827427901e-02, -8.723795388266878e-02, -1.475050686711444e-01, -1.496556672865483e-01, -1.513747113357076e-01, -1.434431977438142e-01, -9.446259518025593e-02, -9.443674918092035e-02, -9.585264483601276e-02, -9.585379149550248e-02, -6.536366393113570e-02, -6.463299265282153e-02, -6.662594214536313e-02, -6.587493137395833e-02, -1.152312782904348e-01, -1.121392203521885e-01, -9.550830652460365e-02, -9.603634783450292e-02, -9.168778156635504e-02, -8.343419845693006e-02, -7.595040756505150e-02, -7.499132528652616e-02, -6.920198778533479e-02, -6.095420829504675e-02, -6.723130880877140e-02, -6.213256953221870e-02, -8.909616263950917e-02, -8.452101304820668e-02, -6.263714454279390e-02, -6.724852164983447e-02, -2.226828008722747e-03, -2.221166887558415e-03, -2.330164899846636e-02, -3.473136782881332e-02, -4.307055936439036e-03, -4.111018418010182e-03, -8.008093972099922e-02, -8.003171648990748e-02, -1.334475146317312e-02, -1.260307091348986e-02, -1.334475146317314e-02, -1.260307091348987e-02, -1.118132994971844e-09, -1.133063481658399e-09, -1.335165060976596e-09, -1.334595897355456e-09, -1.468145287968783e-08, -1.413735149722490e-08, -1.634546702441389e-03, -6.640406910442367e-04, -1.157534671695224e-08, -9.249573529510083e-09, -1.157534671542944e-08, -9.249573528787379e-09, -8.216531023731197e-02, -8.207413389259878e-02, -7.870370546008638e-02, -7.853837757965343e-02, -7.198832468635549e-02, -7.148872356177727e-02, -7.971333187875437e-02, -7.835348911241927e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.993367141857265e-02, -7.861828190600938e-02, -7.668173294189509e-02, -7.635125840901132e-02, -8.099860278443285e-02, -7.883042687439029e-02, -8.628090516598294e-02, -7.994879351810066e-02, -5.771648262324360e-02, -5.754125970950802e-02, -6.017239322196023e-02, -5.987117720661285e-02, -8.485256374702946e-02, -8.035740982460667e-02, -8.638558326535953e-02, -8.510100735680072e-02, -4.356060922212267e-02, -4.329817901664339e-02, -4.535678988746330e-02, -5.838837288602375e-02, -6.688044409130867e-02, -7.935683386662651e-02, -6.305353474500676e-02, -6.304403527746173e-02, -6.681354848526141e-02, -5.479447346636571e-02, -6.230907175415146e-02, -6.035709233364459e-02, -1.773472996354030e-02, -1.753120798266077e-02, -2.203345507242681e-04, -1.201995755489737e-04, -7.107881450698533e-02, -6.874403483743649e-02, -2.249167829137150e-03, -1.037357063254333e-03, -2.249167829137137e-03, -1.037357063254391e-03, -6.593851617928384e-03, -6.257235187311728e-03, -1.229566900947782e-10, 1.047863916405987e-10, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635373e-02, -2.688551334493897e-02, -2.372795461689049e-09, -1.188581445949285e-09, -8.760061720183121e-08, -7.398075587192005e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161715276511807e-09, 1.632343055302361e-08, 8.161715276511807e-09, 8.161624229481066e-09, 1.632324845896213e-08, 8.161624229481066e-09, 8.161191372349294e-09, 1.632238274469859e-08, 8.161191372349294e-09, -5.603353757500679e-10, 1.681130989749303e-09, 8.415931507072589e-10, 5.722581584846182e-10, 1.040071197310758e-09, 5.162991067744625e-10, 1.255855565465489e-10, 1.901938545527400e-10, 1.255652803074154e-10, 1.196679971038906e-06, 1.992822149810930e-06, 1.281460237743205e-06, 6.922373891043535e-07, -8.683907019601597e-08, 6.924783854360913e-07, 6.965943637750002e-07, -8.099616737982750e-08, 6.959088974128137e-07, 7.321424836673142e-07, -7.798977288728822e-09, 7.321150404844716e-07, 6.983047210328394e-07, -8.309537545921985e-08, 6.915117862170546e-07, 1.292008113991081e-06, 2.014320005911114e-06, 1.205950041533845e-06, 8.392982620156789e-03, 1.678596524031358e-02, 8.392982620156789e-03, 1.561270084347038e-03, 5.423580207505009e-03, 2.739815358063414e-03, 1.264902484618768e-03, -9.425463266259219e-04, 1.309767776259299e-03, 1.544550560122288e-03, 1.963957905218297e-03, 1.599258481419479e-03, 9.137288639630358e-03, 1.827457727926072e-02, 9.137288639630358e-03, 1.130169458875415e-03, -9.792101959179072e-04, 1.617926283769212e-03, 7.223122486640000e-01, 2.702474842920973e-01, 6.290921153634851e-01, 5.703133987645943e-01, 1.717463284375811e+00, 8.668185537982529e-01, 3.345032620744785e-04, 4.541405692269522e-04, 3.293809516520292e-04, 5.690751134708980e-01, -8.500558968743441e-01, 5.197077276866634e-01, -1.600087769616193e-02, 6.269996335022696e-02, -9.918575426275875e-03, -1.565540451010267e-02, 4.940111293176546e-02, 2.170365476826314e-02, 3.220835358557253e-02, 6.503281203974348e-02, 3.217756364260290e-02, 2.159884144882280e-02, 4.319768355333928e-02, 2.103041867780362e-02, 9.207841824750546e-02, 1.898847540772218e-01, 9.087477600548430e-02, 8.502776410040984e-03, 1.718110843624654e-02, 8.503730218485777e-03, 7.966822438226682e-05, 1.593364487848110e-04, -8.104835593285932e-04, 7.966822419298068e-05, 1.593364486760777e-04, -8.104835602968791e-04, 5.946381725331211e-07, 1.212047458006597e-06, 5.945838792722497e-07, 1.279763942677104e-07, 3.317623294543360e-07, 1.278862249169211e-07, 1.283267418490928e-07, 3.290510788820029e-07, 1.282206061874349e-07, 1.280326996304606e-07, 3.315901455362131e-07, 1.278754232541698e-07, 5.994120550872544e-07, 1.973193612395526e-06, 9.852518304456237e-07, 8.126154981900315e-07, 1.664939713017533e-06, -7.708595185845280e-07, 1.305002368093431e-05, 2.547662611495562e-05, 1.304364504275959e-05, 1.322146541239643e-05, 2.577332587811818e-05, 1.321672433525520e-05, 1.014619194353506e-05, -4.352411959314013e-06, 9.985826063712871e-06, 1.016840088699865e-05, -3.965063086448942e-06, 1.000151872815660e-05, 2.792621538775988e-05, 5.510545396755535e-05, 1.075451158796199e-05, 1.321080247858739e-05, 2.579042455942266e-05, 1.324279214772212e-05, 9.932682501017661e-03, 1.685075101226301e-02, 1.622025405911279e-04, 6.994962021161613e-03, 1.145919850830526e-02, 6.757838793748277e-03, 8.087442870899093e-03, -8.764120773870019e-04, 6.256573311443455e-03, 6.889820390112415e-03, 1.111277721628419e-03, 5.570047137426679e-03, 9.425103231619495e-03, 1.576181142752067e-02, -2.769667934914025e-03, 4.269322073591672e-03, 1.267363546103143e-03, 5.389428505236788e-03, 7.542666820306599e-01, -1.260253348806484e+00, 7.149342117494288e-01, 3.097569544510373e-01, 1.884073638848774e-01, 3.004906123892361e-01, 2.501830524639276e-01, 5.047699554479743e-01, 2.498360512879366e-01, 1.745743120365734e-05, 1.103099433517606e-05, 1.744086230167538e-05, 4.794934545286216e-01, 9.671385394652398e-01, 4.760129533911674e-01, 4.794934545286226e-01, 9.671385394652419e-01, 4.760129533911684e-01, 2.154361784338151e-03, 4.308723569075912e-03, 2.112215679269880e-03, 5.074558281104314e-04, 1.771133887934975e-03, 5.572800719747165e-04, 9.775380401857416e-02, 1.973869203244964e-01, 9.750839697660227e-02, 5.864614068707761e-01, -9.513304787932933e-02, 5.775824854766660e-01, 2.307313716165078e-02, 4.633022943014317e-02, 2.230451306280435e-02, 2.307313716863031e-02, 4.633022944626750e-02, 2.230451307082859e-02, 6.780659614862039e-02, 1.556874507532024e-01, 6.783350204107644e-02, 2.988106080156748e-02, 7.013013632448628e-02, 2.985040192299917e-02, 1.427124850413138e-02, 2.854249700826277e-02, 1.427124850413138e-02, 3.214330375112224e-02, 7.755094995902535e-02, 3.611826004891753e-02, 1.422376904163419e-02, 2.844753808326838e-02, 1.422376904163419e-02, 2.898692284471944e-02, 7.130523616510319e-02, 3.323891401797027e-02, 4.230431770465623e-02, 9.127841912567188e-02, 4.229453315775253e-02, 2.137727536245174e-02, 4.171735426967753e-02, 1.735118240460953e-02, 1.956808992069799e-02, 3.418809166562786e-02, 5.188670064282599e-03, 5.923988931245756e-03, 6.877257931182339e-03, 5.869513911811562e-03, 7.804395084684480e-03, 4.746021064541064e-03, 7.668733484450586e-03, 2.001139168244605e-02, 3.649210609936833e-02, 7.630562494353983e-03, 7.332331857454939e-03, 1.446124370136083e-02, 6.092363780362078e-03, 1.284241618148573e-01, 2.602988615338391e-01, 1.283872622529552e-01, 1.265567039956585e-01, 1.293362391408489e-01, 1.189546659677840e-01, -1.819207710077072e-02, 1.002633149901950e-01, 6.841742500611848e-02, 6.999365805896070e-02, 1.392635072162938e-01, 6.992993838845768e-02, 9.146331821429075e-02, 1.241535907765962e-01, 9.755272149241183e-02, 1.648305883203961e-02, -4.493271325892391e-03, 1.557634670320457e-02, 1.347296404498458e+03, 2.694592808996916e+03, 1.347296404498458e+03, 3.185417506538256e+00, -5.631049473195501e+00, 2.619099400743889e+00, 7.319991761250225e-02, 1.405425629179281e-01, 7.095862998912364e-02, 2.251035327772400e+00, -3.430786516113168e+00, 1.638681347575611e+00, 2.251035327772241e+00, -3.430786516112890e+00, 1.638681347575499e+00, 3.239843600318842e+05, 6.479687200637683e+05, 3.239843600318842e+05, -1.053578410871148e+01, 2.092828505491888e+01, -1.039244975761193e+01, 1.275517032301290e+08, 2.551034064602580e+08, 1.275517032301290e+08, 7.983379321570517e+01, 1.596675864314103e+02, 7.983379321570517e+01, 2.470024754740236e-03, 7.330052399435428e-03, 9.555690866617399e-04, 7.406033663386106e-01, 1.481296875108629e+00, 7.406484375542907e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_gaussian_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.066687518058850e-29, -3.066687518058848e-29, -3.066820413056937e-109, -3.066820413056938e-109, -3.067249550810008e-109, -3.067249550810007e-109, -4.740747341619650e-06, -4.740747341619649e-06, -1.663956394304166e-05, -1.663956394304166e-05, 0.000000000000000e+00, 0.000000000000000e+00, -9.211532942854685e-05, -9.211532942854677e-05, 2.555072297372071e-05, 2.555072297372072e-05, 2.499525178081370e-05, 2.499525178081366e-05, 0.000000000000000e+00, 0.000000000000000e+00, 2.519492337169870e-05, 2.519492337169869e-05, -9.244922967235357e-05, -9.244922967235361e-05, -8.445776671304709e-30, -8.445776671304709e-30, -3.208133181233720e-04, -3.208133181233720e-04, 0.000000000000000e+00, 0.000000000000000e+00, -4.799476643082321e-04, -4.799476643082321e-04, -2.363476199609535e-84, -2.363476199609535e-84, 0.000000000000000e+00, 0.000000000000000e+00, -1.746461272676272e-03, -1.746461272676273e-03, -1.984842870546637e-03, -1.984842870546638e-03, -1.514554210347594e-04, -1.514554210347594e-04, 8.463920407381914e-04, 8.463920407381919e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.721444810757223e-10, -5.721444810757227e-10, -9.353863982780075e-09, -9.353863982780077e-09, -6.018685325158037e-06, -6.018685325158037e-06, -2.927907457369502e-11, -2.927907457369503e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.297460115018967e-04, -1.297460115018966e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.643633328595047e-05, -7.643633328595046e-05, -3.589535731285048e-04, -3.589535731285047e-04, -4.724262115120434e-05, -4.724262115120434e-05, -5.025324911790596e-05, -5.025324911790595e-05, 1.052880162976169e-04, 1.052880162976169e-04, 1.024575496718621e-04, 1.024575496718621e-04, -9.182212659535341e-05, -9.182212659535341e-05, -5.011182347784784e-05, -5.011182347784784e-05, -4.074107884475277e-03, -4.074107884475276e-03, -1.668058447903582e-02, -1.668058447903583e-02, 1.309278859828789e-05, 1.309278859828789e-05, 0.000000000000000e+00, 0.000000000000000e+00, -5.028924247037698e-03, -5.028924247037698e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -8.967664275034001e-04, -8.967664275034007e-04, -1.242791690362437e-05, -1.242791690362438e-05, 0.000000000000000e+00, 0.000000000000000e+00, -7.134089358724332e-05, -7.134089358724331e-05, -7.134089358724296e-05, -7.134089358724296e-05, -6.107216953163414e-11, -6.107216953163413e-11, 0.000000000000000e+00, 0.000000000000000e+00, -1.520301597262267e-10, -1.520301597262266e-10, -4.177884322434616e-05, -4.177884322434617e-05, -1.850789915316438e-10, -1.850789915316437e-10, -1.850789915316438e-10, -1.850789915316438e-10, -2.304507735885555e-01, -2.304507735885556e-01, -9.485422676569503e-02, -9.485422676569503e-02, -2.059998262665980e-79, -2.059998262665982e-79, -4.420605858094556e-02, -4.420605858094562e-02, -2.678692314354500e-79, -2.678692314354499e-79, -3.924321776290408e-02, -3.924321776290406e-02, -4.886731707906745e-02, -4.886731707906746e-02, -1.190617813054814e-03, -1.190617813054814e-03, -5.697041489410601e-03, -5.697041489410602e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.209804498012545e-03, -7.209804498012549e-03, -1.435868216450341e-03, -1.435868216450341e-03, -4.125712334857736e-04, -4.125712334857734e-04, -2.397762612977256e-03, -2.397762612977256e-03, -4.376235669586694e-03, -4.376235669586697e-03, -1.159211014568751e-03, -1.159211014568751e-03, -4.027547829120328e-03, -4.027547829120324e-03, 6.473261183586922e-04, 6.473261183586913e-04, -4.991922479325582e-67, -4.991922479325586e-67, 0.000000000000000e+00, 0.000000000000000e+00, -2.736666139957461e-03, -2.736666139957461e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.581452293840021e-60, -2.581452293840022e-60, 0.000000000000000e+00, 0.000000000000000e+00, -5.242833262952976e-52, -5.242833262952974e-52, -3.266504737891419e-70, -3.266504737891420e-70, 0.000000000000000e+00, 0.000000000000000e+00, -1.478169655733065e-09, -1.478169655733065e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
