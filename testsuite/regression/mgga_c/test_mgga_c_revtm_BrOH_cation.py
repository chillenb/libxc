
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.457609102765954e-02, -3.457648417585443e-02, -3.457642499765094e-02, -3.457054858501447e-02, -3.457388556929817e-02, -3.457388556929817e-02, -3.903735204439410e-02, -3.904169206867326e-02, -3.913747296988481e-02, -3.892023775001824e-02, -3.901836976870653e-02, -3.901836976870653e-02, -2.736680492701895e-02, -2.713296003443672e-02, -2.153699825534333e-02, -2.165855879202535e-02, -2.163559197374047e-02, -2.163559197374047e-02, -6.178767275051352e-03, -6.700731859338485e-03, -3.051059085520270e-02, -2.364407694446618e-03, -2.112729660130182e-03, -2.112729660130173e-03, -1.300177683613122e-08, -1.731275880864793e-08, -1.519032313627283e-05, -9.994055434855327e-10, -1.956935663745925e-09, -1.956935663736645e-09, -3.551870280572783e-02, -3.560296150352008e-02, -3.551658289355848e-02, -3.559115915907958e-02, -3.556448478158881e-02, -3.556448478158881e-02, -1.710404430163630e-02, -1.728762301923279e-02, -1.619791392077571e-02, -1.634718972798886e-02, -1.766223838000049e-02, -1.766223838000049e-02, -3.391446257558015e-02, -5.372007828112328e-02, -3.381052900496152e-02, -5.062332000915450e-02, -3.531466600949993e-02, -3.531466600949992e-02, -5.370156899364172e-04, -3.370738629518624e-03, -4.276310816914549e-04, -7.100426957548703e-02, -1.294337051984723e-03, -1.294337051984723e-03, -4.225754860813560e-10, -1.099481775878458e-09, -1.901299526044218e-09, -1.255561811183060e-04, -1.784712699154773e-09, -1.784712697067681e-09, -5.053446658858516e-02, -3.868766962003369e-02, -4.152998995914936e-02, -4.475393574127092e-02, -4.302126146222910e-02, -4.302126146222911e-02, -6.001191931638774e-02, -2.024094239598595e-02, -2.488274498888674e-02, -3.141951105554879e-02, -2.793344571621680e-02, -2.793344571621681e-02, -5.419828126258863e-02, -5.560609604243211e-03, -9.271737923793546e-03, -2.140517477115485e-02, -1.426262102668445e-02, -1.426262102668445e-02, -2.242364135407719e-02, -1.148335259328512e-05, -4.107327031196250e-05, -2.542964789919556e-02, -3.737809934250171e-04, -3.737809934250243e-04, -5.287506013963561e-08, -1.155066492943194e-11, -1.637267874253027e-10, -2.894955519107614e-04, -1.624218912741563e-09, -1.624218907577029e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.052449753780841e-01, -1.052450277871961e-01, -1.052457920558601e-01, -1.052460678054725e-01, -1.052471036831612e-01, -1.052463593374488e-01, -1.052319952967689e-01, -1.052337798472612e-01, -1.052383023372527e-01, -1.052429290699477e-01, -1.052383023372527e-01, -1.052429290699477e-01, -1.056057044846953e-01, -1.056015793116266e-01, -1.056114115434209e-01, -1.056071299321104e-01, -1.057364731212064e-01, -1.057290749540225e-01, -1.054487723071346e-01, -1.054412427526832e-01, -1.056001220818775e-01, -1.055506708750449e-01, -1.056001220818775e-01, -1.055506708750449e-01, -7.770774050899484e-02, -7.727016054506869e-02, -7.746689352814333e-02, -7.693067048932498e-02, -6.863667130734273e-02, -6.935264016275450e-02, -6.930110188280839e-02, -6.906175819507158e-02, -6.609754449959339e-02, -7.320156209144628e-02, -6.609754449959339e-02, -7.320156209144628e-02, -2.804993177393296e-02, -2.629820644051535e-02, -2.986588434312648e-02, -2.778206076472614e-02, -8.472478775330260e-02, -8.173664003076710e-02, -1.243525513052139e-02, -1.225013557112591e-02, -9.543104007476738e-03, -2.330262919111405e-02, -9.543104007476754e-03, -2.330262919111409e-02, -9.306462579555377e-08, -8.623755137853960e-08, -1.246495883288740e-07, -1.139831509752762e-07, -1.018645112950158e-04, -9.519810358306799e-05, -6.752611971457807e-09, -6.932521856352013e-09, -1.277364817684628e-08, -2.524270918861487e-08, -1.277364817902465e-08, -2.524270918719364e-08, -1.070091642130534e-01, -1.070352084777761e-01, -1.072247070718094e-01, -1.072550743354867e-01, -1.070095165111432e-01, -1.070382894510111e-01, -1.072032158996957e-01, -1.072295050937457e-01, -1.071218264315139e-01, -1.071515652214166e-01, -1.071218264315139e-01, -1.071515652214166e-01, -6.355239382841214e-02, -6.355592547245800e-02, -6.392843719196448e-02, -6.395114141805444e-02, -6.150008537235122e-02, -6.114316509425637e-02, -6.182703630443471e-02, -6.145901108222656e-02, -6.444758374759114e-02, -6.528677396157341e-02, -6.444758374759114e-02, -6.528677396157341e-02, -7.954791611650616e-02, -7.978476118135519e-02, -8.388742118927893e-02, -8.383674514285620e-02, -8.067894948907323e-02, -7.710811865007097e-02, -8.308689469885466e-02, -7.929123312625698e-02, -7.834538128922902e-02, -8.338942069549124e-02, -7.834538128922905e-02, -8.338942069549124e-02, -3.190968494598210e-03, -3.146105981228114e-03, -1.702294754566097e-02, -1.690983254020457e-02, -2.635279653482827e-03, -2.475097873577839e-03, -1.178236378654702e-01, -1.178939119787809e-01, -7.663931243347525e-03, -6.851612592337292e-03, -7.663931243347525e-03, -6.851612592337292e-03, -2.873398271767632e-09, -2.799198471937966e-09, -7.464964948281768e-09, -7.402383761798641e-09, -1.371364240391411e-08, -1.250097673048069e-08, -7.813580633875834e-04, -7.786112042150390e-04, -1.589831133693733e-08, -1.102462904561522e-08, -1.589831133397465e-08, -1.102462904399224e-08, -8.264946560504846e-02, -8.221550188415433e-02, -8.410031720833608e-02, -8.371042176657638e-02, -8.469104894354157e-02, -8.429517476882131e-02, -8.456980507597761e-02, -8.416013856255616e-02, -8.473016169838657e-02, -8.432829431143410e-02, -8.473016169838658e-02, -8.432829431143410e-02, -7.469268227231085e-02, -7.427984985162220e-02, -6.203135234064054e-02, -6.157496821958267e-02, -6.891642536564467e-02, -6.841734902294121e-02, -7.658640980477760e-02, -7.624032310750892e-02, -7.274405052039985e-02, -7.238687566277011e-02, -7.274405052039987e-02, -7.238687566277012e-02, -8.565201943050776e-02, -8.545506324474536e-02, -2.573522919883016e-02, -2.550549330249776e-02, -3.768553255364275e-02, -3.701381292942769e-02, -6.147065333463005e-02, -6.103158609845946e-02, -4.912856373293366e-02, -4.906151040233900e-02, -4.912856373293366e-02, -4.906151040233900e-02, -6.525520750841272e-02, -6.455360994472906e-02, -7.515674379372415e-05, -7.449085316304363e-05, -2.673016999998782e-04, -2.561490341902036e-04, -6.491062746775127e-02, -6.359840562127661e-02, -2.356274626775616e-03, -2.152086452634080e-03, -2.356274626775632e-03, -2.152086452634072e-03, -3.597877760416716e-07, -3.453421600026189e-07, -7.760890656234853e-11, -7.622335655563168e-11, -1.202916727595749e-09, -1.084140892954331e-09, -1.779611901767433e-03, -1.746399022230144e-03, -1.346997016449815e-08, -1.029928745653220e-08, -1.346997016186739e-08, -1.029928745204483e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.515862074098493e-10, 7.452346101109995e-10, 2.515849919293060e-10, 2.515939151667761e-10, 7.452568626600577e-10, 2.515936686853984e-10, 2.516149225558927e-10, 7.453190572212656e-10, 2.516109655735018e-10, 2.514880877176344e-10, 7.449898497292501e-10, 2.514950861107108e-10, 2.515438659350522e-10, 7.451675240424116e-10, 2.515713657356470e-10, 2.515438659350522e-10, 7.451675240424116e-10, 2.515713657356470e-10, 1.122466493288312e-06, 2.590624044988316e-06, 1.122139282941874e-06, 1.122742808380062e-06, 2.591288250312146e-06, 1.122393705415390e-06, 1.128829125038050e-06, 2.607153415388797e-06, 1.128538888965442e-06, 1.118147918084323e-06, 2.585327847824066e-06, 1.117809917807780e-06, 1.123118679400363e-06, 2.594958752654073e-06, 1.122754465067766e-06, 1.123118679400363e-06, 2.594958752654073e-06, 1.122754465067766e-06, 1.808246250147123e-03, 3.959422692744966e-03, 1.797101214522488e-03, 1.795348825295368e-03, 3.930688295280896e-03, 1.781707363534310e-03, 1.426713613113462e-03, 3.204420781594312e-03, 1.444485969337107e-03, 1.404871185229009e-03, 3.168190028067274e-03, 1.398332427693635e-03, 1.328492744640648e-03, 3.233989685877366e-03, 1.523007201985039e-03, 1.328492744640648e-03, 3.233989685877366e-03, 1.523007201985039e-03, 1.543314331442036e-01, 4.420355185778188e-01, 1.507834549119252e-01, 1.621434497748202e-01, 4.641363271124598e-01, 1.585029089098824e-01, 9.736813408162166e-04, 1.995550385980508e-03, 9.694473968180435e-04, 1.322021562650535e-01, 3.268566668022623e-01, 1.328903447735573e-01, 1.267441218709375e-01, 1.112462719223823e-01, 8.320647961188385e-01, 1.267441218709381e-01, 1.112462719223821e-01, 8.320647961188434e-01, 6.108323018186081e-02, -5.638945425004290e-02, 4.534684329952671e-02, 8.383808760305962e-02, -8.362350773242920e-02, 5.924847861976623e-02, 5.407664515783864e-02, 1.080005215451267e-01, 5.165079788946744e-02, 4.403350025256893e-03, 8.996630563350832e-03, 4.540148438733832e-03, 5.923259490066803e-03, 1.728106220280078e-02, 3.898601920046158e-03, 5.923259492370892e-03, 1.728106220395047e-02, 3.898601925185036e-03, 4.686055419851311e-07, 1.363355740483143e-06, 4.684331551297258e-07, 4.738379199238982e-07, 1.377064901005057e-06, 4.737244039284350e-07, 4.688226631503108e-07, 1.364033829744382e-06, 4.686869749149974e-07, 4.734843372818038e-07, 1.376130328043422e-06, 4.733124477805573e-07, 4.712382306957331e-07, 1.370253569546890e-06, 4.711192755325111e-07, 4.712382306957331e-07, 1.370253569546890e-06, 4.711192755325111e-07, 5.648949983034825e-06, 1.642658171597114e-05, 5.648618358455605e-06, 5.632634552033740e-06, 1.660660284458610e-05, 5.631898311947088e-06, 5.353265362306163e-06, 1.557406988895193e-05, 5.285136322274168e-06, 5.336280816177359e-06, 1.573090863805186e-05, 5.268363467162415e-06, 5.732510023165244e-06, 1.696077125092377e-05, 5.883129330994472e-06, 5.732510023165244e-06, 1.696077125092377e-05, 5.883129330994472e-06, 7.528253148877282e-03, 1.976080832599868e-02, 7.491720975911701e-03, 1.095473245717451e-02, 2.413840162004901e-02, 1.094197990531073e-02, 8.569070335257290e-03, 2.118709333391954e-02, 8.712757963077633e-03, 1.298733414438346e-02, 2.787988852344855e-02, 1.312799784709264e-02, 8.082536491010503e-03, 2.056206054628330e-02, 7.604270233231528e-03, 8.082536491010503e-03, 2.056206054628330e-02, 7.604270233231528e-03, 8.685758126950364e-02, 2.102332020005838e-01, 8.599685896343216e-02, 5.990754340365257e-02, 1.620064015997602e-01, 5.993798995064320e-02, 9.218378941315764e-02, 2.158640589587340e-01, 9.105605211739216e-02, 6.565287795312566e-05, 1.367247922456118e-04, 6.564403175145086e-05, 1.614150664314577e-01, 3.784741504156869e-01, 1.416137397032370e-01, 1.614150664314577e-01, 3.784741504156869e-01, 1.416137397032370e-01, 4.060877748688029e-03, 9.485735403624851e-03, 4.159696024499662e-03, 4.918524743455053e-03, 1.213004640037510e-02, 5.024491068094635e-03, 6.158059209754012e-02, 1.074512471024599e-01, 5.467529293996321e-02, 1.003560958657272e-01, 2.436530045578109e-01, 1.014497490191964e-01, 2.080071711821342e-02, 4.919008392677992e-02, 1.852781892168460e-02, 2.080071711913488e-02, 4.919008392120258e-02, 1.852781891862642e-02, 8.451243268001353e-02, 1.818945745858014e-01, 8.457902674561844e-02, 4.650381034316603e-02, 1.109423604595166e-01, 4.658135250810090e-02, 5.706501916312436e-02, 1.316598568451122e-01, 5.714054531546129e-02, 6.840898217869590e-02, 1.532024082006182e-01, 6.849322542717488e-02, 6.241093713991297e-02, 1.419032420242809e-01, 6.249179673047242e-02, 6.241093713991297e-02, 1.419032420242808e-01, 6.249179673047243e-02, 4.576017722629602e-02, 9.441471601304971e-02, 4.577813358124669e-02, 8.737512632778785e-03, 2.869721468599818e-02, 8.748007329410619e-03, 1.269725642026507e-02, 3.943993002175344e-02, 1.270122211582207e-02, 2.184680948636532e-02, 6.059129590802687e-02, 2.192435821422029e-02, 1.619591549417031e-02, 4.786433524428666e-02, 1.627063969235914e-02, 1.619591549417031e-02, 4.786433524428665e-02, 1.627063969235914e-02, 7.797964370182958e-03, 1.700361286824750e-02, 7.788439691840038e-03, 4.133860798785449e-02, 1.180460201907049e-01, 4.127346819907051e-02, 3.714142500912553e-02, 1.069667618260485e-01, 3.673841995978377e-02, 3.585471015915848e-02, 9.763477454737886e-02, 3.598759903354512e-02, 3.755909188655034e-02, 1.090252142276021e-01, 3.726441226709713e-02, 3.755909188655037e-02, 1.090252142276022e-01, 3.726441226709714e-02, 1.221180771529237e-02, 3.558125793553205e-02, 1.219590003622257e-02, 3.926557570982779e-02, 9.922123274169949e-02, 3.916678550205774e-02, 5.765197082794295e-02, 1.341720832154750e-01, 5.654934165278959e-02, 6.205720577181757e-02, 1.688362224573230e-01, 6.253249832782692e-02, 1.687343109775724e-01, 3.871995431444501e-01, 1.549358867476267e-01, 1.687343109775747e-01, 3.871995431444512e-01, 1.549358867476259e-01, 1.517452835046097e-02, 2.858947898820800e-02, 1.463641424197909e-02, 6.194736805843364e-03, 1.284322683550866e-02, 5.884617651449875e-03, 1.086040325986187e-02, 1.095099705574203e-02, 9.128403415765920e-03, 1.476970821447939e-01, 3.708669862620789e-01, 1.480910760062145e-01, 1.961024039703178e-02, 6.270522889442331e-02, 2.499622949496769e-02, 1.961024040107722e-02, 6.270522895348049e-02, 2.499622951280043e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.087568119911515e-05, -3.087568119911513e-05, -3.087725444644012e-05, -3.087725444644013e-05, -3.088432365437137e-05, -3.088432365437136e-05, -3.086108131543170e-05, -3.086108131543169e-05, -3.087324406380873e-05, -3.087324406380873e-05, -3.087324406380873e-05, -3.087324406380873e-05, -6.913939585290131e-05, -6.913939585290127e-05, -6.917923558611475e-05, -6.917923558611473e-05, -7.028883420017366e-05, -7.028883420017368e-05, -7.033202173445431e-05, -7.033202173445434e-05, -7.012934844696535e-05, -7.012934844696538e-05, -7.012934844696535e-05, -7.012934844696538e-05, -3.276725978239094e-04, -3.276725978239095e-04, -3.261894525874167e-04, -3.261894525874167e-04, -2.875454625451049e-04, -2.875454625451048e-04, -3.453892966413016e-04, -3.453892966413016e-04, -3.578325743018444e-04, -3.578325743018444e-04, -3.578325743018444e-04, -3.578325743018444e-04, -3.843170200082466e-03, -3.843170200082467e-03, -4.254959035552046e-03, -4.254959035552048e-03, -3.929957947655949e-05, -3.929957947655949e-05, -5.257744194738563e-04, -5.257744194738565e-04, -1.550945968623340e-03, -1.550945968623339e-03, -1.550945968623340e-03, -1.550945968623341e-03, -6.539169917014866e-09, -6.539169917014871e-09, -8.733784261168760e-09, -8.733784261168762e-09, -3.514325206808796e-06, -3.514325206808796e-06, -3.529441281391363e-10, -3.529441281391363e-10, -2.673561761774754e-09, -2.673561761774757e-09, -2.673561761800242e-09, -2.673561761800243e-09, -1.024984143952483e-03, -1.024984143952482e-03, -1.037984878884751e-03, -1.037984878884751e-03, -1.025826037741512e-03, -1.025826037741512e-03, -1.037291735521214e-03, -1.037291735521214e-03, -1.031419761213262e-03, -1.031419761213262e-03, -1.031419761213262e-03, -1.031419761213262e-03, -2.557767521530045e-04, -2.557767521530046e-04, -2.806885726563431e-04, -2.806885726563429e-04, -2.416594126872520e-04, -2.416594126872520e-04, -2.630628846324018e-04, -2.630628846324019e-04, -2.769078554724087e-04, -2.769078554724086e-04, -2.769078554724087e-04, -2.769078554724086e-04, -8.677141844607602e-03, -8.677141844607600e-03, -6.539034360107884e-03, -6.539034360107891e-03, -4.078521590230537e-03, -4.078521590230538e-03, -2.021315604065047e-03, -2.021315604065048e-03, -9.920292885134576e-03, -9.920292885134576e-03, -9.920292885134574e-03, -9.920292885134574e-03, -1.015068952541143e-04, -1.015068952541144e-04, -1.011761322801123e-03, -1.011761322801124e-03, -8.069196401490930e-05, -8.069196401490937e-05, -1.823509247732991e-04, -1.823509247732991e-04, -4.037001433707843e-04, -4.037001433707842e-04, -4.037001433707846e-04, -4.037001433707846e-04, -6.270031322082288e-11, -6.270031322082285e-11, -2.642515092897757e-10, -2.642515092897757e-10, -1.836167356597634e-09, -1.836167356597633e-09, -2.643454037474572e-05, -2.643454037474573e-05, -1.353616974583930e-09, -1.353616974583929e-09, -1.353616974583937e-09, -1.353616974583937e-09, -1.454070730555846e-01, -1.454070730555847e-01, -1.161163522109755e-01, -1.161163522109755e-01, -1.327955848791302e-01, -1.327955848791303e-01, -1.451850189189063e-01, -1.451850189189063e-01, -1.394084077619898e-01, -1.394084077619898e-01, -1.394084077619897e-01, -1.394084077619897e-01, -2.322459006337750e-02, -2.322459006337751e-02, -1.300752349998292e-02, -1.300752349998292e-02, -2.319269340839766e-02, -2.319269340839767e-02, -4.339339870131204e-02, -4.339339870131203e-02, -3.104003963991857e-02, -3.104003963991857e-02, -3.104003963991855e-02, -3.104003963991857e-02, -3.868112056667391e-03, -3.868112056667392e-03, -1.937886364652842e-03, -1.937886364652842e-03, -3.374864166151759e-03, -3.374864166151759e-03, -6.897149424767558e-03, -6.897149424767561e-03, -5.842463306255692e-03, -5.842463306255690e-03, -5.842463306255699e-03, -5.842463306255693e-03, -8.105411813244550e-03, -8.105411813244551e-03, -3.011510199945256e-06, -3.011510199945258e-06, -8.330495221043951e-06, -8.330495221043951e-06, -1.268155693879035e-02, -1.268155693879035e-02, -1.034549273279231e-04, -1.034549273279232e-04, -1.034549273279183e-04, -1.034549273279184e-04, -9.622474148964904e-09, -9.622474148964907e-09, -8.370089955749193e-13, -8.370089955749191e-13, -1.264624718821007e-10, -1.264624718821007e-10, -9.105740964416247e-05, -9.105740964416241e-05, -1.403238847362959e-09, -1.403238847362959e-09, -1.403238850610833e-09, -1.403238850610834e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
