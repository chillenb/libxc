
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504590447e-01, -1.645996352769430e-01, -1.646000385289871e-01, -8.579275151234203e-02, -5.753871829331510e-02, -3.150906943254835e-02, -3.266667676506860e-02, -1.672331248405651e-02, -1.681592741963578e-02, -1.677845200784191e-02, -1.678242133339514e-02, -3.288434838795508e-02, -6.701332647008433e-02, -3.331690645587149e-02, -7.241087742608089e-03, -1.725648006748201e-02, -6.628241523783371e-02, -7.590008948734685e-03, -1.122908216533314e-02, -2.126012761056642e-02, -1.132337491566882e-02, -1.553066764858309e-03, -2.515254585640952e-04, -1.685043690001079e-04, -5.889465648482381e-08, -4.426282111221684e-08, -3.325273565052339e-05, -3.613813767655723e-09, -1.470329636154676e-10, -1.470329636048042e-10, -6.960122123394442e-02, -3.525864376941783e-02, -3.517882132246825e-02, -3.525353088612213e-02, -8.860129509245387e-02, -6.478136771942258e-02, -3.190878384259885e-02, -3.279866707984903e-02, -1.376603780134081e-02, -1.423001168367130e-02, -4.841582938544961e-02, -3.274706409078650e-02, -3.706779927467352e-02, -2.605119390483024e-02, -1.773717940779918e-02, -2.118059484944638e-02, -3.571870817932554e-02, -2.198101928239282e-02, -3.747470382186893e-04, -7.346927257659103e-03, -1.129858198195362e-03, -2.510999972435108e-02, -3.487612652202954e-03, -3.487612652202961e-03, -4.887186258935908e-10, -6.056170473186294e-10, -6.598038743604223e-09, -3.080469452744824e-04, -4.478861497901662e-09, -4.478861495841678e-09, -2.951360137379154e-02, -2.868423619720042e-02, -6.383563580100113e-02, -5.200451980958611e-02, -6.385539257642651e-02, -5.168688691554783e-02, -5.277145135740686e-02, -4.613339910267345e-02, -3.894124604775861e-02, -2.530648484060082e-02, -2.370690672107285e-02, -4.150969741490512e-02, -5.569384349254088e-02, -1.318166829245949e-02, -1.568785201775423e-02, -2.481954307947407e-02, -2.345794894004148e-02, -2.081546840293009e-02, -1.662965565115820e-02, -1.432337785401933e-02, -3.017868086837679e-05, -3.127433724321613e-02, -2.751554578096867e-04, -2.751554578096860e-04, -5.037446550363285e-03, -1.443978501402499e-12, -1.374982125405463e-03, -2.268013163367492e-02, -7.032407911534671e-10, -3.547775889809536e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747369753468101e-01, -1.747373592471579e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.656009527504473e-01, -1.680591537683145e-01, -1.398499461723593e-01, -1.452907220370497e-01, -6.647850259717544e-02, -6.647791771951424e-02, -1.016974677152529e-01, -9.741069367919837e-02, -6.329382287971164e-02, -6.330183646790544e-02, -6.353571776795777e-02, -6.351290161158385e-02, -5.245773956371621e-02, -5.245691572331211e-02, -6.355546408723282e-02, -6.333002207009517e-02, -9.776382855233391e-02, -1.019884460908884e-01, -7.534022876475832e-02, -7.481054072999122e-02, -8.462412256755791e-02, -8.585434910016557e-02, -2.982072834346990e-02, -3.024394377525037e-02, -6.422926568303648e-02, -6.118741735981474e-02, -7.037457509512338e-02, -7.906556863981584e-02, -2.868681713544870e-02, -3.364530048912752e-02, -4.115901560600733e-02, -4.156255744789781e-02, -5.453274844542051e-02, -5.281889166176479e-02, -5.008748119528932e-02, -4.658455753778306e-02, -8.841935874847929e-03, -8.402517833609398e-03, -3.076755465096643e-04, -9.644801405459430e-03, 2.419786065386886e-05, -8.019875462807387e-03, -3.921799223011144e-07, -3.761805972975860e-07, -3.072614540718112e-07, -3.056421310918353e-07, -2.182117751080300e-04, -2.182954997904361e-04, -2.356565869583573e-08, -2.382359236088829e-08, -8.869154097247364e-10, -1.336537701977771e-09, -8.869154102891664e-10, -1.336537701354398e-09, -1.379132056808631e-01, -1.379499872192053e-01, -6.359427914453926e-02, -6.361934404480879e-02, -6.358537468076195e-02, -6.360941598447553e-02, -6.359544798878145e-02, -6.361696274467295e-02, -1.478647026756611e-01, -1.486224149425206e-01, -1.472118558054168e-01, -1.445061785676909e-01, -9.188111322249248e-02, -9.186526008771649e-02, -9.310430819133671e-02, -9.311419319709978e-02, -5.498486053571013e-02, -5.464915864778266e-02, -5.622070137333762e-02, -5.586836472121869e-02, -1.135065120951155e-01, -1.119765925431347e-01, -9.278828556809748e-02, -9.328739774202199e-02, -8.660905925761772e-02, -8.582870345726945e-02, -7.395838871074871e-02, -7.363083877840958e-02, -6.122781417597799e-02, -5.600302346096418e-02, -4.634385527701643e-02, -4.217263298906353e-02, -8.411244632766304e-02, -8.875373853331597e-02, -4.185782661330344e-02, -4.732755880634445e-02, -2.177994509499950e-03, -2.149832464667211e-03, -3.108498088905528e-02, -3.239162944770053e-02, -6.349972174754201e-03, -6.053116082021075e-03, -5.625909969028865e-02, -5.627678653215067e-02, -1.725937021978931e-02, -1.625870944030078e-02, -1.725937021978932e-02, -1.625870944030078e-02, -3.368817806998934e-09, -3.413423940163432e-09, -3.961650148388608e-09, -3.964756830341263e-09, -4.425456722024037e-08, -4.261040470947012e-08, -1.933259420788684e-03, -1.851840406374472e-03, -3.459850153787452e-08, -2.762813170319520e-08, -3.459850153104852e-08, -2.762813169768384e-08, -8.565869651800245e-02, -8.534334682811015e-02, -8.094721055417173e-02, -8.059705788398078e-02, -7.198832468635549e-02, -7.148872356177727e-02, -8.268214354225770e-02, -8.086185689129165e-02, -7.200798844943504e-02, -7.151058106231506e-02, -8.287433676003093e-02, -8.099949598962550e-02, -7.895401525877280e-02, -7.857839320629709e-02, -7.917522148742304e-02, -7.834422364129061e-02, -8.274916245924213e-02, -8.217273593273883e-02, -3.981063881665646e-02, -3.947505364531306e-02, -4.133508664634750e-02, -4.094945131917487e-02, -8.255722146309921e-02, -8.264651873792131e-02, -8.518900220353910e-02, -8.503990634505786e-02, -4.604597955417186e-02, -4.575778233345367e-02, -5.193229365050275e-02, -5.385950855411131e-02, -6.955241317435483e-02, -7.182111509130137e-02, -6.224130995516322e-02, -6.224048478664014e-02, -6.724375384417224e-02, -6.391600663977007e-02, -5.573221033703286e-02, -5.464781734358044e-02, -1.773472996354030e-02, -1.753120798266077e-02, -1.909609444862658e-04, -1.816689949730063e-04, -6.805430075558765e-02, -6.611171690000789e-02, -1.705650315078264e-03, -1.523174811937373e-03, -1.705650315078260e-03, -1.523174811937373e-03, -6.593851617928384e-03, -6.257235187311728e-03, -9.549869055719749e-12, -9.521491804960652e-12, -1.869567052566782e-03, -1.724808884064575e-03, -2.767194528635373e-02, -2.688551334493897e-02, -7.112381149786085e-09, -3.549441933785311e-09, -2.624105142757340e-07, -2.215164347323354e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.146882401039757e-09, 1.629376480207951e-08, 8.146882401039757e-09, 8.146791560070185e-09, 1.629358312014037e-08, 8.146791560070185e-09, 8.146359682592905e-09, 1.629271936518581e-08, 8.146359682592905e-09, -1.288063003122678e-10, 1.762534346719286e-09, 8.717726077554853e-10, 6.067534535474531e-10, 1.213506907087681e-09, 5.700520377378701e-10, 2.115905292232800e-11, 2.886352429598793e-10, 2.113825763300761e-11, 1.185666417220032e-06, 2.483774724927147e-06, 1.241887362486261e-06, 3.527146235568917e-07, 1.120808489965234e-06, 3.528491639769097e-07, 3.568215777094487e-07, 1.133700159521736e-06, 3.563874984027256e-07, 1.480796242862306e-07, 7.143435087698628e-07, 1.480909690581322e-07, 3.572228509087574e-07, 1.129173845288566e-06, 3.532910750386591e-07, 1.253364884474883e-06, 2.506729734865627e-06, 1.196525718720716e-06, 7.967772971048372e-03, 1.593554594209674e-02, 7.967772971048372e-03, 1.728725419221430e-03, 5.458992823126488e-03, 2.717256901619848e-03, 2.067031996654910e-04, 7.110030511986946e-04, 2.095853844688176e-04, 1.362091012237133e-03, 2.808584829626303e-03, 1.404293695425421e-03, 8.665498048326500e-03, 1.733099609665300e-02, 8.665498048326500e-03, 1.889677020977647e-04, 7.481952082679242e-04, 2.446445109065359e-04, 4.865462829672038e-01, 9.722624650175319e-01, 4.647782009265595e-01, 6.047147627672466e-01, 1.678399568436115e+00, 8.333150701179806e-01, 2.940195735193190e-04, 5.966895534306947e-04, 2.983947525163768e-04, 7.709447654281729e-02, 1.994817832980359e-01, 6.922606340667518e-02, -1.855711126888310e-02, 6.756040774369405e-02, 1.700733901134313e-02, -1.993108985575020e-02, 6.302615109736420e-02, 3.111885576247840e-02, 9.212350409534675e-02, 1.860500329448756e-01, 9.203787505975233e-02, 6.152555745460140e-02, 1.230511149128046e-01, 5.987671661717604e-02, 1.929514047065334e-01, 3.859178486776531e-01, 1.893488812585357e-01, 2.533335826493643e-02, 5.119595985886341e-02, 2.533603432451490e-02, 2.341417197238380e-04, 4.682834396234194e-04, -2.468422406890573e-03, 2.341417197751721e-04, 4.682834389746989e-04, -2.468422403822573e-03, 7.300822665266059e-07, 1.590473088791190e-06, 7.300013513225038e-07, 5.247282056226400e-09, 4.408653847187135e-07, 5.040391147663605e-09, 5.549116435365219e-09, 4.384514055476050e-07, 5.331184578394885e-09, 5.290538831615062e-09, 4.407129596464820e-07, 5.035211751735445e-09, 8.089757395607580e-07, 2.184625057374427e-06, 1.075241905226250e-06, 9.286629550210127e-07, 1.988894993024250e-06, -9.970190911699066e-08, 1.307830686908445e-05, 2.748864535712020e-05, 1.307222966315551e-05, 1.326675843680021e-05, 2.793225331656633e-05, 1.326154530096472e-05, 4.318320503432997e-06, 1.341548138436115e-05, 4.263532509531656e-06, 4.447526629292898e-06, 1.388010595215921e-05, 4.390419067414511e-06, 2.799537440315480e-05, 5.635683750062252e-05, 1.416416106250731e-05, 1.326273648777893e-05, 2.794366657309276e-05, 1.327892844138706e-05, 1.054175850236932e-02, 2.291915513587402e-02, 4.670531977410505e-03, 8.399403771627617e-03, 2.532124769394522e-02, 8.242036649912897e-03, 4.344548293573972e-03, 1.401407224286043e-02, 3.959473045987081e-03, 3.755998830539540e-04, 8.549186879670129e-03, 2.456690077822174e-04, 1.047974467009154e-02, 2.331140329263010e-02, 3.037250647349067e-03, 2.398877157384538e-04, 7.071003690795043e-03, 3.730535054116443e-05, 4.305047221722643e-02, 1.182038289320488e-01, 4.303621141076892e-02, 2.373861602309324e-01, 4.747668983281487e-01, 2.321455487576813e-01, 3.713320646527673e-01, 7.503364301219072e-01, 3.708115439226285e-01, 2.346298387183720e-06, 2.823594693616507e-05, 2.306723918081798e-06, 6.196664609035071e-01, 1.253108431705656e+00, 6.145462247439338e-01, 6.196664609035067e-01, 1.253108431705656e+00, 6.145462247439336e-01, 6.505093909568361e-03, 1.301018781903272e-02, 6.376735805772533e-03, 1.615169147545898e-03, 5.072392213108760e-03, 1.756410879597408e-03, 2.952811503022697e-01, 5.963006179605180e-01, 2.945391263325942e-01, 4.600343036483412e-01, 9.283846266272735e-01, 4.642098984655407e-01, 6.912251421304323e-02, 1.388064188136084e-01, 6.681047229156274e-02, 6.912251420846227e-02, 1.388064188036553e-01, 6.681047228592342e-02, 1.043665565696006e-01, 2.393880915859382e-01, 1.044845371726134e-01, 4.566207103545232e-02, 1.154773493891444e-01, 4.574186150737688e-02, 1.345900667671572e-02, 2.691801335343144e-02, 1.345900667671572e-02, 5.760098853342259e-02, 1.280968074704753e-01, 5.994121650731889e-02, 1.341481579603964e-02, 2.682963159207928e-02, 1.341481579603964e-02, 5.205920670638176e-02, 1.170528582644077e-01, 5.456403029734329e-02, 7.393410015543853e-02, 1.575881956996420e-01, 7.395599343065970e-02, 2.170335518606287e-02, 4.419113469688131e-02, 1.888179213105421e-02, 2.189097659619252e-02, 4.787516375611057e-02, 1.341998683598770e-02, -1.799515312424123e-03, 1.622242512876833e-02, -1.713274766007017e-03, -8.465582623794690e-04, 1.534416892728583e-02, -8.019051310449854e-04, 2.386664388855577e-02, 5.247538943354849e-02, 1.658958620208512e-02, 8.091765695246510e-03, 1.661314231085096e-02, 7.264229699392233e-03, 1.347594643810712e-01, 2.783494611024631e-01, 1.347604445050102e-01, 1.068609656541837e-01, 2.137162628851307e-01, 1.024644134804007e-01, 1.240719165818045e-02, 1.323320028780480e-01, 6.221682071356676e-02, 6.959486618781850e-02, 1.480893780062625e-01, 6.952425647711089e-02, 9.190501788779618e-02, 1.928126799623598e-01, 7.044833271876577e-03, 8.754925465282679e-03, 2.940084539440802e-02, 8.513697407923522e-03, 9.206119364047361e+02, 1.841223872809472e+03, 9.206119364047361e+02, 3.358013108302608e-02, 7.729026585969201e-02, 3.214681061092838e-02, 7.410607154438609e-02, 1.617862114880236e-01, 7.255564941702224e-02, 9.577865626875970e-02, 2.285172868078642e-01, 8.243857986321816e-02, 9.577865626876174e-02, 2.285172868078675e-01, 8.243857986321354e-02, 1.947409243302083e+05, 3.894818486604167e+05, 1.947409243302083e+05, 1.532028528083847e-04, 8.616947093316876e-04, 1.545436869129208e-04, 7.292544950083569e+07, 1.458508990016713e+08, 7.292544950083569e+07, 6.013762429563149e+01, 1.202752485912630e+02, 6.013762429563149e+01, 7.372272057710344e-03, 2.205097036043985e-02, 2.830902808769861e-03, 2.222759268506477e+00, 4.445794109496893e+00, 2.222897054748481e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.765207729407442e-29, -6.765207729407438e-29, -3.140267289290523e-98, -3.140267289290524e-98, -3.140706449090021e-98, -3.140706449090020e-98, -6.719732920844807e-06, -6.719732920844804e-06, -2.306462930983898e-05, -2.306462930983898e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.460525194600142e-04, -1.460525194600141e-04, -1.368057699176098e-04, -1.368057699176098e-04, -1.390173797756603e-04, -1.390173797756604e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.382245028632789e-04, -1.382245028632790e-04, -1.465667404521258e-04, -1.465667404521258e-04, -1.933964863406264e-29, -1.933964863406265e-29, -3.620088829074187e-04, -3.620088829074186e-04, 0.000000000000000e+00, 0.000000000000000e+00, -8.665933532362999e-04, -8.665933532362999e-04, -2.537358683190755e-73, -2.537358683190755e-73, 0.000000000000000e+00, 0.000000000000000e+00, -6.252842299545857e-03, -6.252842299545857e-03, -2.227151297588406e-03, -2.227151297588408e-03, -2.318650485360875e-04, -2.318650485360875e-04, -5.496149703546617e-04, -5.496149703546619e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.670141819404324e-09, -1.670141819404326e-09, -2.669213001205836e-08, -2.669213001205837e-08, -1.257984249344997e-05, -1.257984249344997e-05, -8.830516034830097e-11, -8.830516034830099e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.463484319005672e-04, -3.463484319005670e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.430661186122140e-04, -1.430661186122139e-04, -5.671031291303992e-04, -5.671031291303989e-04, -9.195914496099844e-05, -9.195914496099844e-05, -9.992472838803195e-05, -9.992472838803192e-05, -2.542437738612015e-04, -2.542437738612015e-04, -2.748351022941626e-04, -2.748351022941627e-04, -1.140033384680407e-04, -1.140033384680407e-04, -9.951617535388235e-05, -9.951617535388235e-05, -8.385128951509243e-03, -8.385128951509242e-03, -3.673354758005014e-02, -3.673354758005017e-02, -8.396633038025703e-03, -8.396633038025705e-03, 0.000000000000000e+00, 0.000000000000000e+00, -1.111600520753148e-02, -1.111600520753148e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.208118067023860e-03, -2.208118067023861e-03, -2.190112284649937e-05, -2.190112284649939e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.171561615817188e-04, -1.171561615817188e-04, -1.171561615817198e-04, -1.171561615817198e-04, -1.845070181416896e-10, -1.845070181416895e-10, 0.000000000000000e+00, 0.000000000000000e+00, -4.636762295591063e-10, -4.636762295591062e-10, -9.858482391644085e-05, -9.858482391644085e-05, -5.578725525301242e-10, -5.578725525301240e-10, -5.578725525301245e-10, -5.578725525301245e-10, -3.598983153586932e-01, -3.598983153586933e-01, -1.591294831074798e-01, -1.591294831074798e-01, -2.194153090517872e-68, -2.194153090517874e-68, -8.552366830776983e-02, -8.552366830776988e-02, -2.853099848225585e-68, -2.853099848225584e-68, -7.651898604022382e-02, -7.651898604022378e-02, -9.880318423024056e-02, -9.880318423024058e-02, -2.055548028335929e-03, -2.055548028335929e-03, -1.236029203936236e-02, -1.236029203936236e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.579882835956986e-02, -1.579882835956986e-02, -2.958817990210278e-03, -2.958817990210279e-03, -6.144566263456422e-04, -6.144566263456420e-04, -4.904159316501990e-03, -4.904159316501990e-03, -8.120161664430060e-03, -8.120161664430064e-03, -2.026114376434432e-03, -2.026114376434432e-03, -6.999332116777278e-03, -6.999332116777271e-03, -9.971794272556660e-03, -9.971794272556666e-03, -5.001693066092132e-56, -5.001693066092133e-56, 0.000000000000000e+00, 0.000000000000000e+00, -5.805818245239882e-03, -5.805818245239884e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.292310004546825e-49, -2.292310004546826e-49, 0.000000000000000e+00, 0.000000000000000e+00, -4.212063082826810e-41, -4.212063082826808e-41, -3.437962808843471e-59, -3.437962808843469e-59, 0.000000000000000e+00, 0.000000000000000e+00, -4.440601481869693e-09, -4.440601481869693e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
