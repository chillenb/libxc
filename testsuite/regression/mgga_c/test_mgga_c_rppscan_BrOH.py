
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rppscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.299488887116075e-02, -9.299273356341090e-02, -9.298334743588364e-02, -9.301841285705068e-02, -9.299375321534736e-02, -9.299375321534736e-02, -1.246114816952615e-01, -1.246090848027861e-01, -1.245349183077630e-01, -1.245670310664434e-01, -1.246109743922851e-01, -2.343437174083064e-02, -8.181978215832447e-02, -1.891818958679538e-02, -1.836795476876870e-02, -1.860532470558260e-02, -1.893187964525997e-02, -1.893187964525997e-02, -1.479135704355117e-02, -1.496592380378953e-02, -9.310229683069865e-02, -1.046730060528617e-02, -1.484210654047586e-02, -1.484210654047586e-02, -8.248107780317347e-04, -8.749289444310522e-04, -3.971779670309534e-03, -2.705936573362944e-04, -8.681144847784946e-04, -8.681144847784990e-04, -2.638633312158743e-02, -2.639441810671565e-02, -2.638722752804926e-02, -5.519878999111456e-02, -2.639039073068604e-02, -2.639039073068604e-02, -1.063826357819219e-01, -1.065945116872671e-01, -1.063219597134789e-01, -1.064556476164132e-01, -1.066432249631798e-01, -2.246893159693126e-02, -2.182829388537656e-02, -2.296402739657464e-02, -2.119449019001544e-02, -2.206978729462794e-02, -2.225745357423935e-02, -5.605481243149788e-02, -3.608585790739129e-02, -1.335351490502833e-02, -3.577290957913080e-02, -2.439087911411654e-02, -9.679402054113087e-03, -9.679402054113087e-03, -3.884280442416108e-03, -3.185456043826677e-04, -2.540181244366462e-04, -2.696991586304225e-02, -4.019442599929010e-03, -2.878122657884700e-04, -2.389740447200197e-02, -2.365956925096099e-02, -2.797104273563956e-02, -2.381014423742728e-02, -2.377707538125549e-02, -2.377707538125549e-02, -2.372210732818876e-02, -2.130843028733496e-02, -2.205129934369708e-02, -2.272006254117529e-02, -2.238067837445335e-02, -4.478797281065876e-02, -2.282833382343176e-02, -5.354322181455747e-02, -1.684992687133086e-02, -5.723732859749446e-02, -1.808844494365365e-02, -1.808844494365366e-02, -6.316410982950892e-02, -3.631507741046514e-03, -4.877709609922077e-03, -1.933757417157387e-02, -3.178681229751994e-02, -7.256116481917241e-03, -8.974691554280807e-04, -5.157757619575423e-05, -1.410265895458337e-04, -7.116021843593067e-03, -2.398333326944940e-04, -2.398333326944959e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rppscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.749797949067669e-02, 3.749639971949991e-02, 3.748952784474207e-02, 3.751522253349911e-02, 3.749714704388099e-02, 3.749714704388099e-02, -1.178372345341762e-01, -1.177855242045263e-01, -1.162077190843602e-01, -1.168262078693245e-01, -1.178230180047666e-01, -4.627225398690346e-02, -6.746973711956070e-02, -4.566172475244228e-02, -4.621231551229506e-02, -4.595215628782537e-02, -4.564720361468572e-02, -4.564720361468572e-02, -3.684789787387988e-02, -3.673640872635232e-02, -8.655129960767939e-02, -4.094429862764758e-02, -3.681813315651164e-02, -3.681813315651164e-02, -1.061794550581883e-01, -1.063773098500731e-01, -6.563118000205968e-02, -7.290935830863543e-02, -1.058167132859529e-01, -1.058167132859559e-01, -3.785199974913178e-02, -3.780787710307588e-02, -3.784712413357919e-02, 3.393815857755805e-04, -3.782988601004555e-02, -3.782988601004555e-02, -1.150734024518502e-01, -1.177430062833888e-01, -1.131337512881977e-01, -1.163055854849168e-01, -1.180181293965866e-01, -4.620813425426520e-02, -3.781924804196018e-02, -3.447864804242055e-02, -3.911200883279738e-02, -3.678997129803385e-02, -3.681011734416817e-02, -8.048969701090735e-03, -4.243315850953477e-02, -3.968195553717278e-02, -4.202839632516765e-02, -4.104070852708275e-02, -4.017336462103695e-02, -4.017336462103695e-02, -4.979917665639666e-03, -8.035367765121684e-02, -6.806817615989244e-02, -3.263455246157913e-02, -5.150091534201453e-03, -7.532371827184933e-02, -2.732897019989341e-02, -2.910454927299916e-02, -2.236623494482946e-02, -2.801221034455050e-02, -2.826110795324027e-02, -2.826110795324027e-02, -2.789543917346259e-02, -3.744955582837715e-02, -3.539214548164971e-02, -3.300437607929519e-02, -3.429345935513069e-02, -6.990205778800732e-03, -3.589528863500686e-02, -5.212906936276361e-02, -3.942280998259465e-02, -6.545378413669310e-02, -3.875214591581875e-02, -3.875214591581874e-02, -5.838048571006219e-02, -7.080029942789870e-02, -5.840514794578682e-02, -3.672062223142212e-02, -3.776684213729770e-02, -4.385969622157192e-02, -1.177324513106411e-01, -2.009622566494242e-02, -4.590375200343468e-02, -4.329665956848720e-02, -6.680614627344372e-02, -6.680614627344211e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.392606945053270e-09, 4.392431520837020e-09, 4.391629051413011e-09, 4.394488737996561e-09, 4.392514772581738e-09, 4.392514772581738e-09, 1.357923103849729e-05, 1.357938119650353e-05, 1.358186240066203e-05, 1.357658577739749e-05, 1.357901447846886e-05, 3.370819698504345e-07, 1.143287794994136e-02, 6.811258737265493e-04, 7.031619133201159e-04, 7.073743055053446e-04, 6.806725900612842e-04, 6.806725900612842e-04, 3.010051723371094e-01, 2.909413161081559e-01, 5.903436987115504e-03, 6.839677492323195e-01, 2.978097945311973e-01, 2.978097945311973e-01, 1.222667993733667e+04, 1.061399147917816e+04, 5.461579910834121e+01, 4.541303007607268e+04, 1.114290527923247e+04, 1.114290527923279e+04, 1.024667869822970e-07, 1.027354174993421e-07, 1.024968861665530e-07, 1.058998076996501e-06, 1.026007287807914e-07, 1.026007287807914e-07, 1.337648696193161e-04, 1.296707256001864e-04, 1.356414465819406e-04, 1.321602289527999e-04, 1.289191419641021e-04, 5.032048140394639e-06, 2.742554988996375e-03, 2.418490880459920e-03, 3.097874369072334e-03, 3.099083427061778e-03, 2.510133170429060e-03, 1.719708695603256e-02, 2.339029588778705e+01, 2.118635824035726e-01, 2.454246387547128e+01, 9.446229898093232e-06, 1.394484810339205e+00, 1.394484810339205e+00, 2.791239462676710e+06, 4.195072469533990e+04, 1.674057753844263e+05, 1.444504541599794e+02, 2.379841833192386e+06, 5.771543690405683e+04, 4.605867073012523e-03, 4.283838434356937e-03, 7.677544462585928e-03, 4.479249191299724e-03, 4.433915105603893e-03, 4.433915105603893e-03, 5.158622996581655e-03, 5.234530501973748e-03, 5.048757640686584e-03, 4.992129889170652e-03, 5.003993329370781e-03, 2.557087245469329e-02, 1.785007464933237e-03, 7.651896964359588e-01, 5.035097415567170e-02, 1.188568896898725e-01, 3.389437619463418e-02, 3.389437619463417e-02, 4.701752507798476e-02, 7.258201373948374e+01, 2.168690214806390e+01, 3.161666929568186e-02, 5.200361103478885e+01, 5.468619658987508e+00, 5.262035306438997e+03, 5.385288675868232e+05, 2.514311958698666e+05, 6.821604638876059e+00, 9.890026828662195e+04, 9.890026828661999e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.936220860604271e-05, -7.936167968086213e-05, -7.935908413167265e-05, -7.936772763968778e-05, -7.936193188890697e-05, -7.936193188890697e-05, -1.340193286333297e-04, -1.344189729305077e-04, -1.466633819205906e-04, -1.418502130410919e-04, -1.341291512993201e-04, -1.897913402785109e-04, -2.329454703791766e-03, -2.675318879618527e-03, -2.553395755278440e-03, -2.626575273113439e-03, -2.678649806223262e-03, -2.678649806223262e-03, -2.439412546814330e-02, -2.449402085232499e-02, -7.966188100225430e-04, -2.258445582068317e-02, -2.441411763523809e-02, -2.441411763523809e-02, -2.045844160614559e-01, -2.040773384497793e-01, -6.943388509201331e-02, -8.398469706470085e-02, -2.076196031657729e-01, -2.076196031657789e-01, -2.046683732464116e-04, -2.053711507187716e-04, -2.047462671372993e-04, -8.487979771820196e-04, -2.050198728458431e-04, -2.050198728458431e-04, -3.669426414424342e-05, 1.067483768562260e-05, -7.192032293764366e-05, -1.458721284262497e-05, 1.521546085329815e-05, -5.143751969579346e-04, -7.225197501134795e-03, -8.312669122393724e-03, -6.927058888151324e-03, -7.946418871978290e-03, -7.446334632840290e-03, -2.588740011936461e-02, -5.670297229341916e-04, -1.796034038677956e-02, -6.430162939107852e-04, -9.126066058473309e-04, -2.848053307862902e-02, -2.848053307862902e-02, -2.537877814253209e-07, -1.039543369728540e-01, -1.746721012940311e-01, -1.574355014978571e-04, -2.898185109503221e-07, -1.081902328949285e-01, -1.397439364717448e-02, -1.269191646011881e-02, -2.016981473553989e-02, -1.347139679065170e-02, -1.329108817686327e-02, -1.329108817686327e-02, -1.413861226936307e-02, -8.937339128638189e-03, -9.922210638995604e-03, -1.115503196516626e-02, -1.047538499880448e-02, -3.507944041613592e-02, -7.039306896434331e-03, -6.013305386370077e-03, -1.381173135675334e-02, -1.728381874054939e-05, -1.340183331933904e-02, -1.340183331933903e-02, -6.289894039069126e-03, -7.352594063911307e-02, -5.392211468680962e-02, -1.528221459285196e-02, -5.424902503094876e-04, -4.012299169089545e-02, -1.417446985119570e-01, -2.739591027457966e-02, -8.766998179627072e-02, -4.348593673922688e-02, -1.138081306067349e-01, -1.138081306067321e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
