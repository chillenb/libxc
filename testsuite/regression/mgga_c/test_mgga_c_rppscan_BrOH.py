
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rppscan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731409082883133e-02, -2.731410508669926e-02, -2.731372768601095e-02, -2.731347094751583e-02, -2.731410244633868e-02, -2.731410244633868e-02, -4.821637467401509e-02, -4.821252322748479e-02, -4.808230945590079e-02, -4.793761870679370e-02, -4.821657485002138e-02, -4.821657485002138e-02, -4.039223122845311e-02, -4.024602063599452e-02, -3.645183564860488e-02, -3.645107936336658e-02, -4.033911489765563e-02, -4.033911489765563e-02, -1.771365810602882e-02, -1.830030346432359e-02, -5.078126267496264e-02, -1.634407900065606e-02, -1.793341107352138e-02, -1.793341107352138e-02, -1.333009936417538e-03, -1.414336053170345e-03, -5.828105774220141e-03, -5.335377242059290e-04, -1.399504991243616e-03, -1.399504991243616e-03, -2.644914299789453e-02, -2.645669461377123e-02, -2.644918279244934e-02, -2.645509642509042e-02, -2.645400532133532e-02, -2.645400532133532e-02, -2.530431780658350e-02, -2.491774623740347e-02, -2.489973835202341e-02, -2.459481175157709e-02, -2.555993656996756e-02, -2.555993656996756e-02, -3.034603005649038e-02, -3.466635396475098e-02, -3.557310555017762e-02, -4.054973765292747e-02, -2.872462475676083e-02, -2.872462475676083e-02, -1.181165438055647e-02, -1.594700198508115e-02, -1.192190539968851e-02, -5.557271036277647e-02, -1.339222490932509e-02, -1.339222490932509e-02, -5.132679534533225e-04, -6.074162966532615e-04, -4.809521748171269e-04, -8.202782400179562e-03, -5.679853722966184e-04, -5.679853722966184e-04, -2.505722311319167e-02, -2.467928761528275e-02, -2.481071231971252e-02, -2.491518272308929e-02, -2.486307692328498e-02, -2.486307692328498e-02, -2.614431760673651e-02, -2.206584621743356e-02, -2.316966395844100e-02, -2.425090618422735e-02, -2.376603742105779e-02, -2.376603742105779e-02, -3.866146597775624e-02, -1.668240709053748e-02, -2.023486766343285e-02, -2.825330750516110e-02, -2.305617152443587e-02, -2.305617152443587e-02, -2.574920176511059e-02, -5.222234710147718e-03, -7.141957594487999e-03, -2.949886838056602e-02, -1.038859685517303e-02, -1.038859685517303e-02, -1.581841125450614e-03, -1.194021842768782e-04, -2.755349259798533e-04, -1.027593140019232e-02, -4.848181333979012e-04, -4.848181333979054e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rppscan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.171390238432913e-02, -4.171369480696081e-02, -4.171242026066294e-02, -4.171577666849727e-02, -4.171379646427321e-02, -4.171379646427321e-02, -6.890929942629764e-02, -6.889670267362931e-02, -6.850933856229699e-02, -6.850904314830357e-02, -6.890682189527240e-02, -6.890682189527240e-02, -7.293464208147711e-02, -7.268108998819628e-02, -6.676119922526060e-02, -6.890357807276359e-02, -7.284639809660319e-02, -7.284639809660319e-02, -4.856054669698865e-02, -4.854619102387813e-02, -8.867285063555819e-02, -3.155399519097040e-02, -4.863462955756479e-02, -4.863462955756479e-02, -4.131249031591821e-03, -3.765072849507908e-03, -1.139407611203386e-02, -1.027101991291561e-03, -4.099976262947161e-03, -4.099976262947113e-03, -3.787649817743678e-02, -3.783171553864515e-02, -3.787124102103710e-02, -3.783646905758638e-02, -3.785446475046795e-02, -3.785446475046795e-02, -5.511961683678768e-02, -5.341058242076435e-02, -5.452461064977527e-02, -5.310417139557227e-02, -5.467018784549993e-02, -5.467018784549993e-02, -4.113948502177141e-02, -2.558605201106100e-02, -4.471051761296081e-02, -2.937914699920603e-02, -3.873187592722783e-02, -3.873187592722783e-02, -2.368487110628589e-02, -5.541901011160085e-02, -2.399119978268790e-02, -3.037467609167456e-02, -2.842273932009990e-02, -2.842273932009990e-02, -9.921951864678483e-04, -1.168541293553040e-03, -9.387028832565201e-04, -1.547887395589798e-02, -1.093519851234631e-03, -1.093519851234630e-03, -2.590202971010576e-02, -2.826713385827457e-02, -2.748123608359868e-02, -2.682848280008991e-02, -2.715996418989545e-02, -2.715996418989545e-02, -2.475637323306222e-02, -3.850869446278850e-02, -3.619691451598334e-02, -3.306315005247505e-02, -3.483059606772924e-02, -3.483059606772924e-02, -2.537241462588043e-02, -4.826861616307849e-02, -5.100763067218813e-02, -4.821029830177320e-02, -4.932070918217844e-02, -4.932070918217845e-02, -4.583502643276284e-02, -1.107191845100056e-02, -1.386418689873083e-02, -4.297217477902671e-02, -2.136657776589980e-02, -2.136657776589980e-02, -3.002241185376403e-03, -2.334995428972378e-04, -5.456903276751331e-04, -2.083447458032445e-02, -9.357608282266418e-04, -9.357608282266450e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.499267800864246e-11, 8.499257104704145e-11, 8.498616948446835e-11, 8.498774861452902e-11, 8.499267486873291e-11, 8.499267486873291e-11, 1.380123326169245e-06, 1.380376418211223e-06, 1.387246965021415e-06, 1.378228892287094e-06, 1.380198610877956e-06, 1.380198610877956e-06, 1.295996351471355e-03, 1.289932451811436e-03, 1.107139052935497e-03, 9.399044165172256e-04, 1.293640395061774e-03, 1.293640395061774e-03, 5.854435022031999e-01, 5.812332046581371e-01, 9.012873619355299e-04, 2.774948296544610e-01, 5.861804319750390e-01, 5.861804319750390e-01, 2.335433942936696e+02, 1.516985859328675e+02, 2.352693685517297e+00, 1.224973693099088e+02, 1.990819091515233e+02, 1.990819091515179e+02, 1.033412858988770e-07, 1.036048624350559e-07, 1.033596989373022e-07, 1.035650622733116e-07, 1.034877097258550e-07, 1.034877097258550e-07, 8.320379256118050e-06, 7.679953276125405e-06, 7.994224489631330e-06, 7.479403745013256e-06, 8.296963544537799e-06, 8.296963544537799e-06, 7.050766422299177e-03, 7.597043942679027e-03, 1.007584932975660e-02, 1.264597250668470e-02, 5.569434850321067e-03, 5.569434850321067e-03, 4.905784680241023e-01, 4.070533814294979e-01, 5.710276133473987e-01, 6.240705955442861e-05, 5.503215281630490e-01, 5.503215281630490e-01, 1.389077099635887e+02, 1.081758340519089e+02, 3.691245958624846e+02, 1.043868217809475e+00, 1.613183920235365e+02, 1.613183920235363e+02, 5.452349484050707e-03, 4.973825018317285e-03, 5.129916599974430e-03, 5.261799828564395e-03, 5.194845340472915e-03, 5.194845340472915e-03, 7.264018654192193e-03, 5.996267887651141e-03, 6.072697033770141e-03, 6.315744165842004e-03, 6.236603084449302e-03, 6.236603084449303e-03, 6.804234494232583e-03, 1.430876267859498e-01, 9.828533565300493e-02, 5.551809305089843e-02, 7.283504421343157e-02, 7.283504421343164e-02, 1.548864088899175e-02, 3.517060903800344e+00, 1.364234220858432e+00, 8.741532596397607e-02, 1.123952733280136e+00, 1.123952733280133e+00, 2.628391658989907e+01, 1.333561576103275e+03, 4.846232767594005e+02, 1.326021738246832e+00, 2.704941158611010e+02, 2.704941158611022e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.128718375400220e-05, -1.128726912510556e-05, -1.128706560369133e-05, -1.128565347037097e-05, -1.128723399470847e-05, -1.128723399470847e-05, -4.990602330649052e-04, -4.992580082023375e-04, -5.051869649017073e-04, -5.036165778490389e-04, -4.991050794704168e-04, -4.991050794704168e-04, -7.133372111865008e-04, -7.258020613463730e-04, -8.768103695790407e-04, -2.749755484868339e-04, -7.170302051351306e-04, -7.170302051351306e-04, -4.848594000759911e-02, -4.969734764929391e-02, -4.977855356074104e-04, -2.895584115380033e-03, -4.899327095973321e-02, -4.899327095973321e-02, -3.204303119876679e-03, -2.174171848870489e-03, -8.634338200510969e-04, -1.489130823736106e-06, -2.957537504205947e-03, -2.957537504205848e-03, -2.059462444700394e-04, -2.066413074118988e-04, -2.060070202585060e-04, -2.065479318767415e-04, -2.063158228171179e-04, -2.063158228171179e-04, -8.187887558951483e-04, -7.734562748403328e-04, -7.820125353518082e-04, -7.447906105455859e-04, -8.356336066402115e-04, -8.356336066402115e-04, -1.658568164142541e-02, -2.100002192463502e-02, -1.822603641596698e-02, -2.371692583851699e-02, -1.503579364174346e-02, -1.503579364174346e-02, -2.849920273929001e-03, -3.548993295270429e-02, -3.306516182415181e-03, -3.411383807906999e-03, -6.746740232601229e-03, -6.746740232601229e-03, -7.049936473095232e-06, -3.346629946120929e-06, -2.931378306915879e-05, -3.266719138824134e-04, -2.000944352918565e-06, -2.000944352918558e-06, -1.585719522946933e-02, -1.424569981105879e-02, -1.477652968025689e-02, -1.522100348742809e-02, -1.499535055465648e-02, -1.499535055465648e-02, -1.837933075613233e-02, -1.013982157159194e-02, -1.169744848924083e-02, -1.362208953407382e-02, -1.269435734597037e-02, -1.269435734597037e-02, -2.030926758779418e-02, -2.434133826785016e-02, -2.730009220639457e-02, -2.860834098322351e-02, -2.831044585094593e-02, -2.831044585094595e-02, -1.844839913612843e-02, -1.850503882233065e-03, -9.050162306654655e-04, -3.709627496200677e-02, -4.101818207915857e-03, -4.101818207915825e-03, -7.865293999543269e-06, -2.069416753180505e-07, -2.223050424997273e-05, -3.874322422813020e-03, -1.828895780781976e-06, -1.828895780781983e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
