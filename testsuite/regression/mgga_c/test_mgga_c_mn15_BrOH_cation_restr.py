
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.803590203193400e-01, -2.803676975307345e-01, -2.804028891915016e-01, -2.802744466734566e-01, -2.803422092056450e-01, -2.803422092056450e-01, -1.509303837104111e-01, -1.508937792782048e-01, -1.499360275206157e-01, -1.503250822918690e-01, -1.502792453161078e-01, 5.467253397649657e-02, -1.909090734522484e-01, 7.819795640201962e-02, 8.658424432194185e-02, 8.277142134346900e-02, 8.369002853269485e-02, 8.369002853269485e-02, 4.195918949761972e-02, 4.100545167591769e-02, -3.022267487598307e-01, 3.507715321355825e-02, 4.232077198558259e-02, 4.232077198558247e-02, -1.046824522650185e-03, -1.089311623198231e-03, -1.750170882189869e-03, -6.642159566308322e-04, -8.054199935232654e-04, -8.054199935232654e-04, -1.482878276261564e-01, -1.488207212808044e-01, -1.483186001872938e-01, -2.996618812033465e-01, -1.485553049204212e-01, -1.485553049204212e-01, -1.590716014386426e-01, -1.526705853127060e-01, -1.643441462363022e-01, -1.583327920242253e-01, -1.530145597526215e-01, 6.289326112098897e-02, -2.885087060904011e-02, -8.614623269956723e-02, -1.153563223176985e-03, -3.000480890501918e-02, -3.762837048183613e-02, -7.329967613449177e-02, -2.317844692800115e-01, 4.745511462701003e-02, -2.280983310654256e-01, -4.975890485749451e-02, 2.644183876003841e-02, 2.644183876003842e-02, -2.039517076852951e-02, -6.516030263079154e-04, -5.114512304087964e-04, -1.981501576671161e-01, -2.338399483076041e-02, -6.041247303269785e-04, -3.061786466011979e-01, -1.857221430865329e-01, -2.863674048541569e-01, -2.483793429423661e-01, -2.305196498943466e-01, -2.305196498943466e-01, -2.793310097466896e-01, -1.276178098312106e-02, -4.214673703814482e-02, -8.548473912745015e-02, -6.092276219778137e-02, -8.724473954874487e-02, -6.897105350784780e-02, -1.770533706226660e-01, 4.594483357067175e-02, -8.911102007141811e-02, 3.035079884054749e-02, 3.035079884054746e-02, -7.556582414162429e-02, -1.872757945839410e-03, -4.369847706932584e-04, -2.898425494069386e-03, -2.097834689006744e-01, 1.007986998614566e-02, -1.381388485634956e-03, -1.976129307694782e-04, -3.898548431475747e-04, 8.657799139426926e-03, -5.638676138741669e-04, -5.638676138741883e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.563979859642596e-01, -7.564212449482561e-01, -7.565155595290926e-01, -7.561712258071198e-01, -7.563529178837848e-01, -7.563529178837848e-01, 6.965464970779525e-02, 6.956609577710003e-02, 6.720998554367438e-02, 6.816911769872196e-02, 6.806451695669780e-02, -2.581110141625799e-01, 5.879059269343755e-02, -8.332796153628098e-02, -4.979699281994084e-02, -6.583413431347819e-02, -6.222776850879908e-02, -6.222776850879908e-02, -3.392296894790437e-02, -4.135096570443393e-02, -1.663650992116452e-02, 5.086178619264396e-02, 2.835457951846013e-02, 2.835457951845986e-02, -1.296423312747114e-03, -1.341491871762877e-03, 1.553763697242312e-03, -8.505054009991023e-04, -1.019298299725427e-03, -1.019298299725427e-03, -3.226946092476066e-01, -3.225593257244314e-01, -3.226859555596140e-01, -7.602220574357852e-01, -3.226224404733097e-01, -3.226224404733097e-01, 1.026169466099394e-01, 9.652379890546070e-02, 1.065442687553411e-01, 1.019899327865692e-01, 9.689639843733053e-02, -2.039448856234940e-01, -1.879362050230693e-01, -2.673644465839333e-01, -1.602217760249883e-01, -1.864406017917918e-01, -1.989211892774282e-01, -1.422746009575562e-01, -1.917491877244120e-01, 3.288275752881707e-02, -1.985681226056042e-01, -2.902799029119575e-01, 4.809169910440902e-02, 4.809169910440898e-02, -2.644657258602893e-02, -8.354299707608555e-04, -6.542932689382760e-04, -2.047829125121427e-01, -3.024623165487274e-02, -7.721146428249765e-04, -7.280020875866071e-01, -4.887622621370862e-01, -6.213871504238334e-01, -6.305895355833413e-01, -5.939230357666645e-01, -5.939230357666645e-01, -6.837078363972289e-01, -1.603573998572583e-01, -1.953473640239349e-01, -2.611554847699384e-01, -2.229626208613387e-01, -2.331543644790077e-01, -2.452244567900505e-01, -1.326326430390033e-02, -7.247794243295252e-02, 5.391479131380840e-02, -1.124464545172723e-01, -1.124464545172722e-01, 2.435218448275874e-02, 1.045928994142998e-03, 6.073376728823746e-03, -1.286966470626039e-01, -1.862738098336533e-01, 2.948235840621913e-02, -1.676455399268677e-03, -2.589421618537497e-04, -5.051639994634740e-04, 2.667020009321497e-02, -7.211949134638500e-04, -7.211949134638891e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.044916346062305e-08, 1.044945730637512e-08, 1.045056298387350e-08, 1.044622466080764e-08, 1.044852475405734e-08, 1.044852475405734e-08, 2.699076520233355e-05, 2.698177308516861e-05, 2.674331669451480e-05, 2.682984884665078e-05, 2.683171577991170e-05, 9.121793470196026e-07, 3.959462210951895e-02, 1.935094331912501e-03, 1.834251597485101e-03, 1.926411175478232e-03, 1.904662425439470e-03, 1.904662425439470e-03, 8.205348569082821e-01, 8.256247143952770e-01, 2.834012971611488e-02, 5.117532862869709e-01, 7.021075021650571e-01, 7.021075021650575e-01, 4.401555702531201e-02, 5.077901136203686e-02, 1.910176357765105e-01, 1.130514136177566e-02, 2.708342272710929e-02, 2.708342272710929e-02, 6.578079424105049e-07, 6.714094856742665e-07, 6.585863021606576e-07, 5.466038777739384e-06, 6.645775027253765e-07, 6.645775027253765e-07, 3.428700442147037e-04, 3.183052968650090e-04, 3.626248831646610e-04, 3.395914522484369e-04, 3.200093570050212e-04, 1.456775010397396e-05, 5.049473237962390e-03, 6.290590881073345e-03, 8.020944348806644e-03, 6.043292010407922e-03, 4.658004750039245e-03, 1.514220134950233e-02, 2.254427906009967e+02, 3.416805444109826e-01, 3.128218109452304e+02, 1.795575997018314e-05, 7.376358222844172e-01, 7.376358222844143e-01, 3.458076339335900e+08, 9.047166965691938e-03, 1.321927226801853e-01, 1.619177250010359e+03, 1.863143251053714e+08, 4.308548693059684e-02, 1.438036548813190e-01, 6.201389358917988e-02, 1.111144596447454e-01, 1.049851758193480e-01, 9.276592413155661e-02, 9.276592413155661e-02, 1.421319061055349e-01, 1.222557039471941e-02, 9.237603256410981e-03, 1.438794473432017e-02, 9.855456816283446e-03, 2.374736460648716e-02, 3.547387724776844e-03, 4.534784291064234e+00, 1.636540816840903e-01, 3.520458045698372e-01, 1.171953114277934e-01, 1.171953114277935e-01, 8.822520478836879e-02, 1.852907205785169e-01, 2.196264616430735e-01, 7.917098873351046e-02, 5.840592876702353e+02, 6.879357426287586e-01, 2.491311300979028e-02, 1.223355903064087e-03, 2.218883318908979e-02, 7.389100503583571e-01, 6.430784792720548e-02, 6.430784797542465e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.689923748549580e-04, 2.690074541431865e-04, 2.690674606541155e-04, 2.688443743211117e-04, 2.689622368163100e-04, 2.689622368163100e-04, -1.755765596437478e-03, -1.755253049212103e-03, -1.741447012397156e-03, -1.746806811749959e-03, -1.746552040611748e-03, 1.458545157034823e-03, -2.602375731459273e-02, 2.050553597986379e-03, 2.636312580314241e-04, 1.068764042442612e-03, 8.803626266767271e-04, 8.803626266767271e-04, -2.836089963605671e-02, -2.608773137980079e-02, -1.301447412011873e-02, -3.451157252101707e-02, -3.956324420927869e-02, -3.956324420927873e-02, -3.728536459761583e-05, -4.493578585256502e-05, -2.365810207350509e-03, -5.688517953150004e-06, -1.525396693154757e-05, -1.525396693154757e-05, 1.180925352253401e-04, 7.898858940437789e-05, 1.158580523899603e-04, 6.337687400400761e-03, 9.856781798724672e-05, 9.856781798724672e-05, -5.337720379518169e-03, -5.223754940799527e-03, -5.404778281414862e-03, -5.323450639066945e-03, -5.233397956285793e-03, 2.676172270470714e-03, 4.281724129132854e-02, 8.081748082732219e-02, 2.530542164703388e-02, 4.642844463039313e-02, 4.930658017723927e-02, 2.792490392332999e-02, -4.586608014800014e-02, -3.114459171940726e-02, -4.081288202903614e-02, 8.242456782280720e-03, -3.426809720762837e-02, -3.426809720762778e-02, -4.710491453562266e-06, -4.711106846571643e-06, -1.755504261661638e-05, -2.174819636200722e-02, -2.915845898646111e-05, -1.153664374606936e-05, 9.271573914876323e-01, 3.033619684446558e-01, 7.741769884487040e-01, 5.959506800250247e-01, 5.035920731133990e-01, 5.035920731133990e-01, 8.184319116398237e-01, 3.724823503770401e-02, 6.813089490801430e-02, 1.135276064414358e-01, 8.904005594222525e-02, 1.079121418770204e-01, 6.255564618172570e-02, -1.022569812676911e-01, -4.932868526213987e-03, -9.298047154979699e-02, 8.752485336536822e-03, 8.752485336536709e-03, -5.088104663981474e-02, -2.142458566059911e-03, -4.179856884532210e-03, 3.739857816696601e-02, -4.752588692477242e-02, -1.904057367480241e-02, -4.726990026047807e-05, -1.242818649293435e-07, -3.107247678115981e-06, -1.799364543955228e-02, -1.314249637651208e-05, -1.314249637658739e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
