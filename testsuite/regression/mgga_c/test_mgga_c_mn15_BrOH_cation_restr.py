
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.348692034102887e-01, -1.348731432278614e-01, -1.348877923845161e-01, -1.348294145751175e-01, -1.348604136965724e-01, -1.348604136965724e-01, 1.034027091408066e-02, 1.031268059697639e-02, 9.622533859895529e-03, 1.027236075455738e-02, 1.004560063308546e-02, 1.004560063308546e-02, -3.916574797117924e-03, -3.112459636072322e-03, 1.773183430364743e-02, 1.916829006231584e-02, 1.784928617562393e-02, 1.784928617562393e-02, 3.885236563047190e-02, 3.708119102493769e-02, -4.736564528914780e-02, 3.020142275731329e-02, 3.654693843247842e-02, 3.654693843247830e-02, -1.046825472993720e-03, -1.089313935799149e-03, -1.767037236591265e-03, -6.642167975055734e-04, -8.054219443538836e-04, -8.054219443538836e-04, -1.486844214185467e-01, -1.492207792246174e-01, -1.487073756603875e-01, -1.491807516692925e-01, -1.489577845284131e-01, -1.489577845284131e-01, 6.025063610989005e-02, 5.616588362166510e-02, 6.544243276982420e-02, 6.181576348267279e-02, 5.543379813903633e-02, 5.543379813903633e-02, -3.911440129905624e-02, -1.054087052648210e-01, -2.496659933819986e-02, -5.526941739664298e-02, -4.688040347872931e-02, -4.688040347872931e-02, 1.347930290401877e-02, 4.502828113646068e-02, 1.092674916493106e-02, -8.740700908586177e-02, 2.476920625835349e-02, 2.476920625835346e-02, -5.299856563282427e-04, -6.516047744780130e-04, -5.114530230488907e-04, 2.619985039723534e-03, -6.041278929370001e-04, -6.041278929370008e-04, -3.365462025592877e-01, -1.981355081522193e-01, -2.319363595144972e-01, -2.701338952697806e-01, -2.496018094292866e-01, -2.496018094292866e-01, -3.333353958122007e-01, -1.422994655336584e-02, -4.381630928048524e-02, -8.912430150537146e-02, -6.316350851375722e-02, -6.316350851375721e-02, -8.755915732902798e-02, 4.970848683911217e-02, 3.931146806916262e-02, -2.588537455641726e-03, 1.937897859333800e-02, 1.937897859333797e-02, -6.562774775329896e-03, -1.879373017665260e-03, -4.941148735110866e-04, -1.698699714521868e-02, 9.515641611034251e-03, 9.515641611034294e-03, -1.381481474295583e-03, -1.976129652815358e-04, -3.898549228365735e-04, 8.374696324483290e-03, -5.638697735627544e-04, -5.638697735627757e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.882487442674876e-01, -3.882384620428992e-01, -3.881925706506762e-01, -3.883445948937440e-01, -3.882649983907372e-01, -3.882649983907372e-01, -2.374824432977167e-01, -2.375074091251008e-01, -2.382058093366060e-01, -2.382511140977718e-01, -2.381045064026202e-01, -2.381045064026202e-01, -1.621328676737880e-01, -1.622880348509816e-01, -1.553603510857944e-01, -1.548613086123334e-01, -1.556480066268092e-01, -1.556480066268092e-01, -4.241452572677886e-02, -5.142324468992848e-02, -2.084533119348982e-01, 2.869619079182627e-02, 6.058196414524556e-03, 6.058196414524522e-03, -1.296429512539644e-03, -1.341506950528869e-03, 1.447847328787683e-03, -8.505109123036602e-04, -1.019311062628647e-03, -1.019311062628635e-03, -3.241704380767637e-01, -3.240457603037287e-01, -3.241325804657319e-01, -3.240233755009685e-01, -3.241190359105330e-01, -3.241190359105330e-01, -2.014378314346706e-01, -2.068783589676652e-01, -1.960997329731338e-01, -2.012495420153153e-01, -2.068357948466373e-01, -2.068357948466373e-01, -1.752933648820251e-01, -3.083691004543141e-01, -1.277614866868807e-01, -1.454979515069862e-01, -1.909974664476284e-01, -1.909974664476284e-01, 3.314274617845305e-02, 2.332935566474981e-02, 2.927063996257967e-02, -2.768019970352615e-01, 3.977488922927117e-02, 3.977488922927112e-02, -6.842468856432738e-04, -8.354414305823590e-04, -6.543050382274947e-04, 1.336390837327338e-02, -7.721353829061817e-04, -7.721353829062216e-04, -7.361331659687855e-01, -5.071371297412881e-01, -5.783341990873645e-01, -6.468635621925314e-01, -6.116382457771105e-01, -6.116382457771105e-01, -7.034394858621431e-01, -1.586141724040639e-01, -1.946994255041452e-01, -2.700256499926716e-01, -2.254557202942299e-01, -2.254557202942299e-01, -2.668823107342874e-01, -2.343395096431523e-02, -8.531484578035006e-02, -1.198436465363608e-01, -1.198666582089757e-01, -1.198666582089756e-01, -1.370462208353180e-01, 1.004279098546013e-03, 5.720495550280836e-03, -1.098127056698805e-01, 2.628262158910957e-02, 2.628262158910969e-02, -1.677060029740945e-03, -2.589423897572586e-04, -5.051645237499150e-04, 2.504472874942958e-02, -7.212090835055228e-04, -7.212090835055406e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.468140799496194e-10, 2.468282543646852e-10, 2.468736449917178e-10, 2.466638571225058e-10, 2.467762298870404e-10, 2.467762298870404e-10, 2.508148982297168e-06, 2.507851120388633e-06, 2.497997544746056e-06, 2.484237880720750e-06, 2.493956054863807e-06, 2.493956054863807e-06, 8.460539037377160e-03, 8.431459716405677e-03, 7.460162342218105e-03, 7.003531781334438e-03, 7.201310301212667e-03, 7.201310301212667e-03, 9.332231796107738e-01, 9.623093582224357e-01, 6.061563752427537e-03, 9.008628051465674e-01, 1.045534244982194e+00, 1.045534244982190e+00, 4.513362632515771e-02, 5.316928236943749e-02, 2.666951372805676e-01, 1.595717881966548e-02, 3.334607424371538e-02, 3.334607425491593e-02, 6.617845291104653e-07, 6.754422911557171e-07, 6.624855206621600e-07, 6.745349500072662e-07, 6.686239934342738e-07, 6.686239934342738e-07, 1.808739586749762e-05, 1.724223958953677e-05, 1.780767058728857e-05, 1.707856154884061e-05, 1.773285346206919e-05, 1.773285346206919e-05, 7.331637876205238e-03, 1.037386854000441e-02, 1.496494371391010e-02, 1.394001650045707e-02, 6.649074191867614e-03, 6.649074191867614e-03, 5.814112891431507e-01, 4.060172451950313e-01, 6.020712538982544e-01, 6.517489877087979e-05, 1.020316462944534e+00, 1.020316462944534e+00, 1.558791766255197e-02, 1.961812076762771e-02, 1.962652212791876e-01, 6.205797340004670e-01, 8.541826496366155e-02, 8.541826500384461e-02, 1.558771800627333e-01, 6.642523557047703e-02, 8.839022651669194e-02, 1.132675832459828e-01, 9.991132945382973e-02, 9.991132945382973e-02, 1.665475286981365e-01, 1.285963858306849e-02, 9.911636508620019e-03, 1.583940037400020e-02, 1.074841387165304e-02, 1.074841387165304e-02, 6.584792884638296e-03, 2.616619681620105e-01, 2.007736524349499e-01, 1.053935389014214e-01, 1.546697903520179e-01, 1.546697903520180e-01, 2.506684169916038e-02, 2.183935551255345e-01, 3.298961596606442e-01, 1.163650610253157e-01, 1.031949337875473e+00, 1.031949337875478e+00, 5.604744848860512e-02, 2.127317589117646e-02, 2.676441193550233e-02, 9.509679572539775e-01, 1.063647527158635e-01, 1.063647526076540e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.885337734244570e-05, 8.884489813383857e-05, 8.880863871513946e-05, 8.893409871148136e-05, 8.886819305589153e-05, 8.886819305589153e-05, 7.484005291512308e-04, 7.489100009204919e-04, 7.630236801922581e-04, 7.629629539957078e-04, 7.606558315934376e-04, 7.606558315934376e-04, -6.432258697639353e-03, -6.380979806549861e-03, -5.337381063792042e-03, -4.765806613786917e-03, -4.993807676184246e-03, -4.993807676184246e-03, -3.038824977499059e-02, -2.884099774535963e-02, -6.248640771298286e-03, -3.562227513795323e-02, -4.159804273003087e-02, -4.159804273003091e-02, -3.728536594768373e-05, -4.493578964492052e-05, -2.366206892274904e-03, -5.688518245585846e-06, -1.525396842266242e-05, -1.525396842266242e-05, 1.344279163055709e-04, 9.558503192651349e-05, 1.318780980576824e-04, 9.761951517064471e-05, 1.152054017360454e-04, 1.152054017360454e-04, 2.264057226441546e-03, 2.447683844269640e-03, 2.189934486594211e-03, 2.354350615796433e-03, 2.402902195904108e-03, 2.402902195904108e-03, 3.492260073927013e-02, 1.129886746970265e-01, 6.886292531351048e-03, 2.578605338139212e-02, 4.376083491755241e-02, 4.376083491755241e-02, -1.845143031041838e-02, -3.180196094923772e-02, -1.641979922622576e-02, 6.651758488891739e-03, -3.463751379905049e-02, -3.463751379904991e-02, -1.863650599730102e-06, -4.711107360197632e-06, -1.755504510644544e-05, -8.698987875857460e-03, -1.153664619256053e-05, -1.153664619256837e-05, 1.089558879747415e+00, 3.602840033213641e-01, 5.105119299612682e-01, 7.061464872101068e-01, 5.981177820239282e-01, 5.981177820239282e-01, 1.116772370189860e+00, 3.565088076793929e-02, 6.716571534035905e-02, 1.227374844038704e-01, 9.064660534652463e-02, 9.064660534652461e-02, 7.493896238392204e-02, -2.051426103274129e-02, -8.370754723050960e-03, -1.352249043363160e-03, -2.193913209842436e-04, -2.193913209843532e-04, 1.667163413936072e-02, -2.142603574786159e-03, -4.181865420621624e-03, 1.113733224404340e-02, -1.911367463875066e-02, -1.911367463875094e-02, -4.727002596273634e-05, -1.242818658165819e-07, -3.107247703994152e-06, -1.802928997709223e-02, -1.314249841517838e-05, -1.314249841525369e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
