
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rppscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.731383013271843e-02, -2.731384640884129e-02, -2.731346374762740e-02, -2.731320708071052e-02, -2.731340667040202e-02, -2.731340667040202e-02, -4.827263811285283e-02, -4.826883783529159e-02, -4.814667477245820e-02, -4.799251848543291e-02, -4.809440848486198e-02, -4.809440848486198e-02, -4.140832747000911e-02, -4.125295141779950e-02, -3.753417006796979e-02, -3.747601834844750e-02, -3.761587933650754e-02, -3.761587933650754e-02, -1.550963494833042e-02, -1.608693236130409e-02, -4.879085908470163e-02, -1.513733962550147e-02, -1.696142047319377e-02, -1.696142047319377e-02, -6.335178349395732e-04, -6.923667906797054e-04, -4.442707351336742e-03, -3.249476903979092e-04, -4.477879272278903e-04, -4.477879272278903e-04, -2.644922606835598e-02, -2.645700795983493e-02, -2.644842528879730e-02, -2.645534270936295e-02, -2.645376849998658e-02, -2.645376849998658e-02, -2.540011903735599e-02, -2.499577424546951e-02, -2.480816430175820e-02, -2.445174276923906e-02, -2.545429845158901e-02, -2.545429845158901e-02, -2.909516620673481e-02, -3.288131392303242e-02, -3.546208894728566e-02, -4.379206989048840e-02, -2.884524898606452e-02, -2.884524898606452e-02, -1.074753523541032e-02, -1.507233205465086e-02, -1.015450774761616e-02, -5.535591581397947e-02, -1.252038719391027e-02, -1.252038719391028e-02, -2.404025473027335e-04, -3.225703513553267e-04, -2.857891260120530e-04, -7.331541081368799e-03, -3.317163864894338e-04, -3.317163864894338e-04, -2.490124233757893e-02, -2.450358621652571e-02, -2.463900880966939e-02, -2.475473113204604e-02, -2.469692886382929e-02, -2.469692886382929e-02, -2.596329486303801e-02, -2.175296368741177e-02, -2.288117828953639e-02, -2.406357219395973e-02, -2.352551653882823e-02, -2.352551653882823e-02, -3.623357569460380e-02, -1.584159662590709e-02, -1.919029572894321e-02, -2.770262009235178e-02, -2.224712819124293e-02, -2.224712819124293e-02, -2.493206042020414e-02, -4.150048843679241e-03, -5.729844955265322e-03, -2.715811311038907e-02, -9.321804355251090e-03, -9.321804355251094e-03, -9.749687450309937e-04, -6.672442337866609e-05, -1.671326905440531e-04, -8.569153736337256e-03, -3.085143898362706e-04, -3.085143898362750e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rppscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.171297558530308e-02, -4.171273698133859e-02, -4.171139720006071e-02, -4.171491579656143e-02, -4.171311243051655e-02, -4.171311243051655e-02, -6.900625382244874e-02, -6.899233590469293e-02, -6.861052991704278e-02, -6.860683144700816e-02, -6.867279615347852e-02, -6.867279615347852e-02, -7.443334675641577e-02, -7.414268308405272e-02, -6.795759407286554e-02, -7.041705683986529e-02, -6.991346379795178e-02, -6.991346379795178e-02, -4.789637356933891e-02, -4.870768326290066e-02, -8.774071476740754e-02, -3.161102551431314e-02, -3.577923781643920e-02, -3.577923781643916e-02, -4.459303691687588e-03, -2.351069520656355e-03, -8.674924233725442e-03, -6.355167015659137e-04, -8.915879865067749e-04, -8.915879865067742e-04, -3.787167521328203e-02, -3.782545936706651e-02, -3.786853367621486e-02, -3.782779221568574e-02, -3.784878491796932e-02, -3.784878491796932e-02, -5.521809034214051e-02, -5.346399532944361e-02, -5.448131972807190e-02, -5.279839989634005e-02, -5.455760014880265e-02, -5.455760014880265e-02, -4.080344659752951e-02, -2.703539839437957e-02, -4.610998018437152e-02, -2.987464137370429e-02, -3.924642314950139e-02, -3.924642314950139e-02, -2.196205984104960e-02, -5.716799888323298e-02, -2.034886736362483e-02, -3.035966397266357e-02, -2.427489070422746e-02, -2.427489070422728e-02, -4.667187404784083e-04, -6.250840325667685e-04, -5.601298667201239e-04, -1.426504437181643e-02, -6.442089418774829e-04, -6.442089418774826e-04, -2.622200288773710e-02, -2.869668211622738e-02, -2.789338107375165e-02, -2.717630099558575e-02, -2.754106544565478e-02, -2.754106544565478e-02, -2.472157666514943e-02, -3.901052921773442e-02, -3.666480126380965e-02, -3.322113922152783e-02, -3.517719077467764e-02, -3.517719077467763e-02, -2.692000464424461e-02, -4.984522261764467e-02, -5.214301926931850e-02, -4.879902928026834e-02, -5.033896847772826e-02, -5.033896847772826e-02, -4.571079510253606e-02, -9.299457466002754e-03, -1.114044163945750e-02, -4.271497543113133e-02, -1.955317884784874e-02, -1.955317884784875e-02, -1.861020982914262e-03, -1.310492668086870e-04, -3.394434600381945e-04, -2.125723835038262e-02, -6.014490012692942e-04, -6.014490012692984e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.498118881280748e-11, 8.498106488716181e-11, 8.497454143185714e-11, 8.497629203613916e-11, 8.497622705510266e-11, 8.497622705510266e-11, 1.379389247399724e-06, 1.379696757675860e-06, 1.386969645482902e-06, 1.377367286323165e-06, 1.381645017153644e-06, 1.381645017153644e-06, 1.354712204481880e-03, 1.349160896148539e-03, 1.190610052324875e-03, 1.005969058417118e-03, 1.069204691207112e-03, 1.069204691207112e-03, 5.584190740280836e-01, 5.677755423902928e-01, 8.547287728315130e-04, 3.544202310197249e-01, 3.137689688357813e-01, 3.137689688357780e-01, 1.344557120286557e+03, 4.185710985825175e+02, 2.605491975757132e+00, 1.737482556027757e+02, 1.572621978237799e+02, 1.572621978237792e+02, 1.031435594191785e-07, 1.034149633330452e-07, 1.031424349756932e-07, 1.033824927107093e-07, 1.032879306975725e-07, 1.032879306975725e-07, 8.378772153977773e-06, 7.717247289684446e-06, 7.941116846135426e-06, 7.335956419979088e-06, 8.213896260054058e-06, 8.213896260054058e-06, 6.255911728735831e-03, 6.606534469490517e-03, 1.034239088103408e-02, 1.444492127171325e-02, 5.861061850434326e-03, 5.861061850434326e-03, 5.065024643509418e-01, 4.685423712383827e-01, 5.563375381248040e-01, 6.181299472806408e-05, 3.215535723964077e-01, 3.215535723963929e-01, 2.953983038257868e+02, 1.865898319187655e+02, 9.782076750924842e+02, 1.185205749982601e+00, 4.222353835455921e+02, 4.222353835455913e+02, 5.721743506312353e-03, 5.192106396330220e-03, 5.360407049942917e-03, 5.513890376759962e-03, 5.435774126973151e-03, 5.435774126973151e-03, 7.524603438126456e-03, 6.256364813758363e-03, 6.295610997777432e-03, 6.552948455462722e-03, 6.464736796145954e-03, 6.464736796145956e-03, 5.932568656246476e-03, 1.644318963737580e-01, 1.054457025167465e-01, 5.556257417822427e-02, 7.533801339373854e-02, 7.533801339373859e-02, 1.441323928739573e-02, 4.813465993753750e+00, 1.485650444256063e+00, 7.674574923601896e-02, 1.252015578595731e+00, 1.252015578595731e+00, 3.167444395312437e+01, 4.385155017881460e+03, 1.098678180848746e+03, 2.362740588483946e+00, 5.684241049040069e+02, 5.684241049040101e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.128668459235674e-05, -1.128678257628657e-05, -1.128659238148557e-05, -1.128512830214865e-05, -1.128598465684895e-05, -1.128598465684895e-05, -4.977707016667822e-04, -4.979940479055319e-04, -5.039182782942558e-04, -5.022910132705956e-04, -5.022142002525749e-04, -5.022142002525749e-04, -6.803775113927537e-04, -6.986763932889402e-04, -9.568348386088529e-04, -3.029823125993923e-04, -4.981604013065043e-04, -4.981604013065043e-04, -4.048584886273907e-02, -4.291545104871373e-02, -3.878327633286137e-04, -6.924607120755044e-03, -8.681864926890808e-03, -8.681864926891028e-03, -4.427417061737414e-03, -1.433773014721563e-03, -4.792011644294793e-04, -8.883819849187680e-06, -4.068170824006950e-05, -4.068170824006817e-05, -2.058356426240131e-04, -2.065525232449358e-04, -2.058518534542505e-04, -2.064852295241685e-04, -2.062070700850884e-04, -2.062070700850884e-04, -8.267434731128269e-04, -7.799332190452030e-04, -7.741504432281454e-04, -7.300856891055834e-04, -8.260365704127077e-04, -8.260365704127077e-04, -1.550959703385334e-02, -1.947831461842934e-02, -1.787858504452552e-02, -2.373405083629011e-02, -1.529414980579185e-02, -1.529414980579185e-02, -2.736158530404695e-03, -3.479762940213692e-02, -2.068317320838823e-03, -3.405709034640765e-03, -1.408071053638213e-03, -1.408071053638328e-03, -3.747140835344005e-07, -1.639002963915511e-06, -1.701810037768435e-05, -9.364831839080182e-04, -3.964473850740242e-06, -3.964473850740272e-06, -1.591807578623024e-02, -1.419564773459951e-02, -1.474854533773407e-02, -1.524760853894641e-02, -1.499366371954209e-02, -1.499366371954209e-02, -1.854580351742077e-02, -9.931700256116992e-03, -1.148179376892170e-02, -1.359911853457136e-02, -1.255830290469757e-02, -1.255830290469757e-02, -1.911445539719806e-02, -2.415561783746078e-02, -2.617214762984549e-02, -2.815198364327151e-02, -2.738323147287265e-02, -2.738323147287265e-02, -1.732425213560373e-02, -1.719988908927819e-03, -5.926933757716303e-04, -3.543653787052282e-02, -3.811958583112918e-03, -3.811958583112921e-03, -4.390897532772325e-06, -2.739231717933233e-08, -2.834340630266538e-05, -8.422531194074880e-03, -8.217188867546729e-06, -8.217188867546969e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
