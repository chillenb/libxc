
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rppscan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.298816375263688e-02, -9.298568721419950e-02, -9.297570311104295e-02, -9.301236146594666e-02, -9.299300910762222e-02, -9.299300910762222e-02, -1.246263199060775e-01, -1.246236313152654e-01, -1.245501011197378e-01, -1.245835690144320e-01, -1.245765931336973e-01, -2.344382324508710e-02, -8.151081688967630e-02, -1.903848934337702e-02, -1.848623083923402e-02, -1.873511186006935e-02, -1.867872079644435e-02, -1.867872079644435e-02, -1.394704026957987e-02, -1.414608825422232e-02, -9.350674579371480e-02, -1.053113682889921e-02, -1.197087882545875e-02, -1.197087882545875e-02, -3.752969608554651e-04, -4.043342295309827e-04, -3.006770894735078e-03, -1.690554397653773e-04, -2.423674805307680e-04, -2.423674805307680e-04, -2.638748628300915e-02, -2.639582654344771e-02, -2.638796582272889e-02, -5.515011405435179e-02, -2.639166675215896e-02, -2.639166675215896e-02, -1.064125319947992e-01, -1.066393028356633e-01, -1.063031527266575e-01, -1.064444918412377e-01, -1.066167229772850e-01, -2.245106115096360e-02, -2.194107103768986e-02, -2.307883720109014e-02, -2.103684193380526e-02, -2.186504758504401e-02, -2.216299935947394e-02, -5.717835537260256e-02, -3.485127931031878e-02, -1.259698489983484e-02, -3.326776006969985e-02, -2.439951112505812e-02, -9.243807626673818e-03, -9.243807626673817e-03, -2.393092053162897e-03, -1.612449521114007e-04, -1.433344975083365e-04, -2.589845160387997e-02, -2.738488192827941e-03, -1.655366233430445e-04, -2.382863708468445e-02, -2.356680477191464e-02, -2.837873736475650e-02, -2.373437886717115e-02, -2.369617165436425e-02, -2.369617165436425e-02, -2.371386260334273e-02, -2.106617976452838e-02, -2.187346278504974e-02, -2.264947272640659e-02, -2.225670021742472e-02, -4.614807106784603e-02, -2.296077862260221e-02, -5.321972045930101e-02, -1.625478537067641e-02, -5.703462481488839e-02, -1.772508998369475e-02, -1.772508998369475e-02, -6.328523590075508e-02, -2.872884982296587e-03, -3.922013656692809e-03, -1.945525937830211e-02, -3.018011994892934e-02, -6.580397726471758e-03, -5.420728841374406e-04, -2.472863204531392e-05, -8.288757437547250e-05, -6.270602045790450e-03, -1.550602435844317e-04, -1.550602435844379e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rppscan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.749313070472736e-02, 3.749131506139326e-02, 3.748400286739284e-02, 3.751087133628729e-02, 3.749668985494031e-02, 3.749668985494031e-02, -1.181195626032950e-01, -1.180611206687779e-01, -1.164972459168370e-01, -1.171372303129283e-01, -1.170660795231001e-01, -4.625316914444354e-02, -6.624314911185129e-02, -4.553622979958521e-02, -4.610134521060001e-02, -4.582398974142717e-02, -4.588871911961071e-02, -4.588871911961071e-02, -3.758120176190023e-02, -3.745784650808283e-02, -8.926688246923123e-02, -4.061188213588065e-02, -3.887528355241444e-02, -3.887528355241442e-02, -8.785571066883463e-02, -9.113003253874814e-02, -8.526239247036757e-02, -5.250770464993612e-02, -6.762414275534967e-02, -6.762414275534967e-02, -3.784763810067975e-02, -3.780209777904157e-02, -3.784501878197578e-02, 2.842351351358287e-04, -3.782484097779981e-02, -3.782484097779981e-02, -1.156054996893979e-01, -1.179578963748333e-01, -1.119746112790852e-01, -1.160173540485926e-01, -1.178853881450329e-01, -4.623866990407990e-02, -3.758379538133239e-02, -3.410475888353699e-02, -3.937945842812060e-02, -3.727758869345628e-02, -3.700831236085685e-02, -9.543893751035348e-03, -4.125751458239686e-02, -4.029323500226472e-02, -3.958020844736300e-02, -4.101761909876097e-02, -4.087125889085216e-02, -4.087125889085212e-02, -3.092106456939254e-03, -5.066003172284159e-02, -4.626501333586160e-02, -3.142048694472795e-02, -3.531175961823871e-03, -5.167178790177515e-02, -2.748110158502201e-02, -2.938913731172248e-02, -2.190096133609304e-02, -2.820434251729506e-02, -2.848535747881954e-02, -2.848535747881954e-02, -2.767402550507765e-02, -3.791964994704981e-02, -3.579725203891437e-02, -3.309888175970971e-02, -3.456229649759312e-02, -6.687581559930517e-03, -3.547786739003951e-02, -5.407095439556282e-02, -3.990397785371020e-02, -6.376498204437288e-02, -3.913377948101476e-02, -3.913377948101476e-02, -6.029536820466267e-02, -8.762941686062282e-02, -7.203078993486924e-02, -3.657707499982493e-02, -3.610903527058663e-02, -4.693536146759179e-02, -1.073234190896691e-01, -1.049204353715545e-02, -3.019364348863091e-02, -4.771248763205972e-02, -4.919274402453693e-02, -4.919274402454791e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.391718624898700e-09, 4.391517084777392e-09, 4.390666635497977e-09, 4.393654334329954e-09, 4.392082374618461e-09, 4.392082374618461e-09, 1.357528377311492e-05, 1.357546768482853e-05, 1.357927638920781e-05, 1.357284035593084e-05, 1.357917288031512e-05, 3.377133487258189e-07, 1.109308206390150e-02, 6.756202633766002e-04, 6.966156850595852e-04, 7.009751537761641e-04, 6.995139889883571e-04, 6.995139889883571e-04, 3.316388667760780e-01, 3.189805974408016e-01, 6.503205536048525e-03, 7.140270556409087e-01, 5.175090158335982e-01, 5.175090158335977e-01, 3.408072300792545e+04, 3.094164956464828e+04, 1.148529109391060e+02, 9.068691573515622e+04, 6.942226860772463e+04, 6.942226860772463e+04, 1.022855339086419e-07, 1.025622960428122e-07, 1.023021390309318e-07, 1.055515857775532e-06, 1.024236183380278e-07, 1.024236183380278e-07, 1.330812671209040e-04, 1.289649390245449e-04, 1.365852386643113e-04, 1.324261381015667e-04, 1.293205820425113e-04, 5.031560309821502e-06, 2.662538177913276e-03, 2.359863360890422e-03, 3.217572075045864e-03, 3.225913485939976e-03, 2.592661805659794e-03, 1.809915060776356e-02, 2.976493840286213e+01, 2.464114251247892e-01, 4.014256633927324e+01, 9.412250941207351e-06, 1.637551330109926e+00, 1.637551330109924e+00, 2.574062978619741e+07, 8.805619671418691e+04, 5.116016407253332e+05, 1.831685983427386e+02, 1.395852993717377e+07, 2.024191131841744e+05, 4.892681926831698e-03, 4.523441743632553e-03, 8.572698629690543e-03, 4.749518522315175e-03, 4.694865277329739e-03, 4.694865277329739e-03, 5.464656219292308e-03, 5.513298627172611e-03, 5.313783457191485e-03, 5.263966443657100e-03, 5.269522543327693e-03, 2.808467860409034e-02, 1.749936969239465e-03, 9.544137318070927e-01, 5.548824470020854e-02, 1.244320085527611e-01, 3.595773833949113e-02, 3.595773833949113e-02, 4.659836912051062e-02, 1.361224511656347e+02, 4.015297957276974e+01, 3.058365968830464e-02, 7.250986886159629e+01, 7.390351125211621e+00, 1.022742805917910e+04, 1.057850113668575e+06, 5.570507941328009e+05, 9.599118135703513e+00, 2.904106062728268e+05, 2.904106062728930e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rppscan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rppscan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.935798095753592e-05, -7.935737300128208e-05, -7.935463401939113e-05, -7.936366209351393e-05, -7.935893909784828e-05, -7.935893909784828e-05, -1.318390184405670e-04, -1.322899837456370e-04, -1.444081443940536e-04, -1.394356243696986e-04, -1.399895507387233e-04, -1.902058701932317e-04, -2.458956879711426e-03, -2.702249099315390e-03, -2.575877766133133e-03, -2.653927744749711e-03, -2.635166277899870e-03, -2.635166277899870e-03, -2.325499588583632e-02, -2.334322402313705e-02, -6.551432575630725e-04, -2.315032255919924e-02, -2.314533721649554e-02, -2.314533721649551e-02, -1.184153202921318e-01, -1.253549857728690e-01, -7.747007673616749e-02, -6.071385090321121e-02, -9.220791240714286e-02, -9.220791240714286e-02, -2.045803208496844e-04, -2.053053741712684e-04, -2.046224980139096e-04, -8.477261787154983e-04, -2.049427150703886e-04, -2.049427150703886e-04, -2.715196129223263e-05, 1.405604601385954e-05, -9.298790737263912e-05, -1.989407893151759e-05, 1.306997030728334e-05, -5.130929189965250e-04, -7.258976381114886e-03, -8.403088591840375e-03, -6.885359961714038e-03, -7.825584701497985e-03, -7.438159440942330e-03, -2.531959421707116e-02, -3.953147479753032e-04, -1.780653045599745e-02, -3.283827318341962e-04, -9.126611700256307e-04, -2.924969537737134e-02, -2.924969537737130e-02, -2.390897089001701e-08, -5.507764641278121e-02, -1.430677153394232e-01, -1.359175593007805e-04, -1.465206422832930e-07, -9.896356782552991e-02, -1.414907607222166e-02, -1.275075272145298e-02, -2.122963701422830e-02, -1.360809539302746e-02, -1.340145565974115e-02, -1.340145565974115e-02, -1.452319824057863e-02, -8.819195263079666e-03, -9.857418892362576e-03, -1.128388739483363e-02, -1.049443489346779e-02, -3.562794622160752e-02, -7.147986263459282e-03, -4.329032978220236e-03, -1.348830228442195e-02, -8.987511677050786e-04, -1.316674994730211e-02, -1.316674994730211e-02, -5.365155784787002e-03, -8.056558931710583e-02, -5.982127218647525e-02, -1.529867680724968e-02, -3.661217099299454e-04, -4.232987183695646e-02, -9.987161656090202e-02, -1.264034978676536e-02, -6.155334802418599e-02, -4.569609417860143e-02, -1.124884028509785e-01, -1.124884028510039e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
