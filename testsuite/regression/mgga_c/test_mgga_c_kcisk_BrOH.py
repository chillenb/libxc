
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcisk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.177440527105007e-02, -4.177476948628867e-02, -4.177518424238029e-02, -4.176919260189393e-02, -4.177460813343073e-02, -4.177460813343073e-02, -4.369487224596768e-02, -4.369709764754241e-02, -4.375382653997775e-02, -4.358611959861657e-02, -4.369643657296010e-02, -4.369643657296010e-02, -3.356457710504259e-02, -3.339898034407038e-02, -2.906065670896870e-02, -2.901524193298431e-02, -3.350452276939032e-02, -3.350452276939032e-02, -1.547893241959273e-02, -1.601666260993456e-02, -4.078655659311329e-02, -9.735765016448458e-03, -1.565303503827269e-02, -1.565303503827269e-02, -1.626917133975695e-04, -1.786418561604180e-04, -1.698940890104285e-03, -3.403546113566976e-05, -1.781299589049548e-04, -1.781299589049548e-04, -4.254363219224383e-02, -4.263266221948838e-02, -4.255056784571103e-02, -4.261989614309260e-02, -4.259217165750623e-02, -4.259217165750623e-02, -2.508265191804599e-02, -2.515965813414704e-02, -2.461761105968267e-02, -2.466972154181435e-02, -2.575877028714171e-02, -2.575877028714171e-02, -3.732133410644667e-02, -5.245931160665646e-02, -3.832790828668311e-02, -4.941480774014716e-02, -3.787050523839512e-02, -3.787050523839512e-02, -5.449045229038203e-03, -1.202419116552935e-02, -5.634034671406854e-03, -6.924274618948897e-02, -7.268447154352919e-03, -7.268447154352919e-03, -3.175042170485484e-05, -4.206375983216300e-05, -3.881824746978719e-05, -3.049171292981959e-03, -4.293070298132797e-05, -4.293070298132795e-05, -4.824082369308363e-02, -3.961978853780272e-02, -4.156105923261014e-02, -4.370523169109410e-02, -4.254244585884106e-02, -4.254244585884106e-02, -5.534486807041160e-02, -2.757108839099575e-02, -3.063430683548210e-02, -3.452049621533673e-02, -3.250165812543032e-02, -3.250165812543033e-02, -5.350770759760668e-02, -1.525305014944526e-02, -1.945315666080448e-02, -2.881744484164466e-02, -2.348807813568622e-02, -2.348807813568622e-02, -2.984703340561675e-02, -1.403354207221116e-03, -2.267398860226705e-03, -3.120269255212884e-02, -4.651277870032271e-03, -4.651277870032289e-03, -2.046646874582353e-04, -4.296039753356717e-06, -1.348375360755842e-05, -4.665215864194679e-03, -3.755788859099116e-05, -3.755788859099102e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcisk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.005769556713742e-01, -1.005776543422795e-01, -1.005788604658292e-01, -1.005673893582155e-01, -1.005773409843814e-01, -1.005773409843814e-01, -9.593443174022770e-02, -9.593749975418628e-02, -9.601588362588630e-02, -9.578568246644326e-02, -9.593661811964699e-02, -9.593661811964699e-02, -7.001637972462733e-02, -6.982379533576329e-02, -6.424923289356095e-02, -6.418902394648655e-02, -6.994657153521459e-02, -6.994657153521459e-02, -3.765875304542783e-02, -3.841403088353588e-02, -7.990105512569083e-02, -2.715815244165954e-02, -3.790769570031142e-02, -3.790769570031142e-02, -6.152884462569260e-04, -6.745131831514694e-04, -5.399511983700518e-03, -1.283280580342872e-04, -6.726244490683705e-04, -6.726244490683706e-04, -9.740746615067496e-02, -9.752749570518578e-02, -9.741706918789747e-02, -9.751052994987223e-02, -9.747259755856473e-02, -9.747259755856473e-02, -6.274781366027136e-02, -6.302012745194786e-02, -6.182817732327338e-02, -6.203040247921209e-02, -6.414617401907054e-02, -6.414617401907054e-02, -6.834344510506028e-02, -7.497844169932195e-02, -6.881270616538197e-02, -7.317082180170974e-02, -6.884781355474313e-02, -6.884781355474313e-02, -1.634714773228973e-02, -3.267726222645095e-02, -1.678045300364690e-02, -1.091127462004590e-01, -2.121299724156093e-02, -2.121299724156093e-02, -1.207027406236762e-04, -1.589790119414094e-04, -1.475764466822840e-04, -9.658853222623167e-03, -1.615028849802134e-04, -1.615028849802134e-04, -7.037092438081967e-02, -6.739529741864100e-02, -6.831096758092967e-02, -6.912921216795345e-02, -6.870817629554654e-02, -6.870817629554654e-02, -7.105353982204042e-02, -5.712955577390812e-02, -6.005945786454051e-02, -6.315576100200589e-02, -6.162000939546953e-02, -6.162000939546953e-02, -7.695671659172890e-02, -3.897645202547903e-02, -4.575048234959158e-02, -5.695198892483985e-02, -5.098515072157449e-02, -5.098515072157447e-02, -5.810621722865478e-02, -4.741216509532697e-03, -7.429982603665939e-03, -5.709046749936998e-02, -1.397306736436878e-02, -1.397306736436884e-02, -7.603824047404201e-04, -1.620073903419822e-05, -5.165677285995155e-05, -1.395146112981222e-02, -1.411812916632978e-04, -1.411812916632972e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.275892997956068e-10, 2.275943745705487e-10, 2.276060394634459e-10, 2.275233549124770e-10, 2.275920654586413e-10, 2.275920654586413e-10, 1.030752452474423e-06, 1.030952495819610e-06, 1.036357142691676e-06, 1.027445581619550e-06, 1.030825415850601e-06, 1.030825415850601e-06, 1.488055697081743e-03, 1.477888649330811e-03, 1.214141916212545e-03, 1.197756622350584e-03, 1.484436025894600e-03, 1.484436025894600e-03, 2.327589802503029e-01, 2.357584109049196e-01, 8.217958531573591e-04, 3.016521522052619e-01, 2.338244876469501e-01, 2.338244876469501e-01, 2.261492237794502e+01, 2.159049924089290e+01, 1.807836921309324e+00, 3.449572142543677e+01, 2.265473712144784e+01, 2.265473712144784e+01, 3.760510931742031e-07, 3.793215709163500e-07, 3.763853929565537e-07, 3.789275622578255e-07, 3.777201480141744e-07, 3.777201480141744e-07, 6.126952229193013e-06, 6.127427278294541e-06, 5.962247983181211e-06, 5.963477458877298e-06, 6.350605166700775e-06, 6.350605166700775e-06, 6.827055161826097e-03, 1.128045069735837e-02, 7.642712636261875e-03, 1.179745185026581e-02, 6.724446832974059e-03, 6.724446832974059e-03, 4.096621886759227e-01, 1.100558337987018e-01, 4.734623027236367e-01, 6.587529766703511e-05, 4.044345665838194e-01, 4.044345665838194e-01, 3.794612424839588e+01, 3.316155867393849e+01, 1.258917049997360e+02, 1.126437424016983e+00, 5.361899799488273e+01, 5.361899799488267e+01, 6.869378468470767e-02, 3.233307626183961e-02, 4.018551685897684e-02, 4.917994065307812e-02, 4.425423664139436e-02, 4.425423664139436e-02, 6.319557812477519e-02, 8.857469444122579e-03, 1.132541591087682e-02, 1.628919903679180e-02, 1.328232325313326e-02, 1.328232325313326e-02, 8.071658598369605e-03, 6.280000225043199e-02, 4.663361918955061e-02, 3.385095535837149e-02, 4.063538897054760e-02, 4.063538897054759e-02, 1.224336670416680e-02, 1.795054951571711e+00, 1.105835787774186e+00, 5.917907320277613e-02, 8.257290770142580e-01, 8.257290770142601e-01, 1.447064813647138e+01, 2.117791653108209e+02, 9.535183808044897e+01, 1.047336836202566e+00, 9.209373524927368e+01, 9.209373524927356e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.846091500085508e-05, -1.846157927819553e-05, -1.846473831928849e-05, -1.845396074271872e-05, -1.846126236635819e-05, -1.846126236635819e-05, -9.510359029859238e-05, -9.513953206488092e-05, -9.624030903819316e-05, -9.607553174948672e-05, -9.511087300488994e-05, -9.511087300488994e-05, -7.114890563838426e-04, -7.086432177309195e-04, -6.376299904750116e-04, -7.103694065522281e-04, -7.105804282451203e-04, -7.105804282451203e-04, -1.006887223968616e-02, -1.056205537412416e-02, -1.877579924347635e-04, -2.114244020321536e-03, -1.019789472661596e-02, -1.019789472661596e-02, -6.520744079520418e-05, -7.098736567263671e-05, -4.187078927435335e-04, -5.331531921814427e-06, -7.270089750150063e-05, -7.270089750150056e-05, -5.606212004115353e-04, -5.668586847949788e-04, -5.613326887982875e-04, -5.661776253418903e-04, -5.637021184324519e-04, -5.637021184324519e-04, -2.963733650024918e-04, -3.137418196326208e-04, -2.914190927794661e-04, -3.050864328796540e-04, -3.148712023140946e-04, -3.148712023140946e-04, -7.355597801338909e-03, -8.028769859029838e-03, -5.135638684892965e-03, -5.384123571635782e-03, -9.217689965218628e-03, -9.217689965218628e-03, -1.297423833804550e-03, -4.067304286300084e-03, -1.469872931804276e-03, -4.577212484092569e-04, -2.461427375824591e-03, -2.461427375824591e-03, -7.566986640687767e-06, -8.175181900382476e-06, -1.802808771025583e-05, -5.624430866982339e-04, -8.356549401097859e-06, -8.356549401097842e-06, -1.081717515506286e-01, -7.561517549841985e-02, -8.790147095263286e-02, -9.837136803829998e-02, -9.308674484143406e-02, -9.308674484143409e-02, -4.216727678603015e-02, -1.166488542483414e-02, -1.783665331210341e-02, -2.875947936423586e-02, -2.213669769495924e-02, -2.213669769495924e-02, -5.300839729292693e-03, -5.515713162664275e-03, -6.892546722790684e-03, -8.839817874765166e-03, -8.751905806156729e-03, -8.751905806156732e-03, -8.171401169837302e-03, -3.371392447952246e-04, -5.363283292249863e-04, -1.251794165647893e-02, -1.475914998729619e-03, -1.475914998729620e-03, -3.492225970078808e-05, -6.797098630260670e-07, -4.815382164873716e-06, -1.600989071475453e-03, -8.482594564243182e-06, -8.482594564243147e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
