
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcisk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645997984142278e-01, -1.645998722376647e-01, -1.646002559406559e-01, -1.645990459764830e-01, -1.645998368922163e-01, -1.645998368922163e-01, -1.107850779813080e-01, -1.107851378255798e-01, -1.107879564174404e-01, -1.107891435020754e-01, -1.107852302312699e-01, -2.466499742459870e-02, -6.686325305100879e-02, -1.751313043026440e-02, -1.638139020898858e-02, -1.687902308763125e-02, -1.754224043439263e-02, -1.754224043439263e-02, -1.405481141504699e-02, -1.437004601670378e-02, -7.129479792198967e-02, -6.981133501860986e-03, -1.414591651903335e-02, -1.414591651903335e-02, -1.588874962173101e-04, -1.733827200487853e-04, -1.468038179963459e-03, -2.230216615456383e-05, -1.735768363407605e-04, -1.735768363407604e-04, -4.231474675939622e-02, -4.240433313350731e-02, -4.232464078549282e-02, -1.224187739336419e-01, -4.235965070962293e-02, -4.235965070962293e-02, -9.468350884767802e-02, -9.487551903244792e-02, -9.460553775405933e-02, -9.475589169031329e-02, -9.491382938026718e-02, -2.298334427563734e-02, -2.702533685724740e-02, -3.062228050226063e-02, -2.529427498057136e-02, -2.793930479926383e-02, -2.828358111408741e-02, -6.444479849692640e-02, -2.795793269891251e-02, -1.118621659203612e-02, -2.775591893236855e-02, -3.130599536548113e-02, -6.266004318673403e-03, -6.266004318673403e-03, -3.066310529287210e-03, -3.038547928741086e-05, -3.367217307547404e-05, -2.111688835133230e-02, -3.174878232166117e-03, -2.800035458763727e-05, -3.314488582984747e-02, -3.277273716084930e-02, -6.421278911905946e-02, -3.303522696952316e-02, -3.298489253690545e-02, -3.298489253690545e-02, -3.269379608355980e-02, -2.640000787136776e-02, -2.842468440080725e-02, -3.030113648152356e-02, -2.935026540496540e-02, -6.165521676530553e-02, -2.985258311904994e-02, -4.342843891221907e-02, -1.747146874516269e-02, -5.212074169948084e-02, -2.006048476105531e-02, -2.006048476105531e-02, -5.782950547549860e-02, -1.286023131431559e-03, -1.906213892293582e-03, -2.282684013584341e-02, -2.479858776778672e-02, -3.953570021703640e-03, -1.375569322474851e-04, -2.415116310689609e-06, -1.215541337889393e-05, -3.921782275167928e-03, -2.398012644930062e-05, -2.398012644930054e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcisk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747375022395988e-01, -1.747375764902732e-01, -1.747379624249751e-01, -1.747367454232825e-01, -1.747375409392460e-01, -1.747375409392460e-01, -1.202900715742411e-01, -1.202901326384370e-01, -1.202930086854292e-01, -1.202942199669432e-01, -1.202902269278121e-01, -6.443577673877116e-02, -7.491651594909549e-02, -4.505257328879153e-02, -4.270151797794462e-02, -4.373750917888618e-02, -4.511249463047826e-02, -4.511249463047826e-02, -3.553474671855236e-02, -3.602148307812569e-02, -7.955596680641969e-02, -2.108645400625556e-02, -3.567784354436643e-02, -3.567784354436643e-02, -6.019314416087157e-04, -6.560924935159472e-04, -4.789542591572656e-03, -8.587390669136158e-05, -6.566824371707532e-04, -6.566824371707527e-04, -9.711809402016955e-02, -9.723942304086322e-02, -9.713149728740227e-02, -1.321329433242859e-01, -9.717894079817774e-02, -9.717894079817774e-02, -1.037966701665785e-01, -1.039941747748390e-01, -1.037164617218208e-01, -1.038711268068387e-01, -1.040335787945163e-01, -5.898728221241219e-02, -5.857299414480371e-02, -6.240481051227880e-02, -5.627756026375585e-02, -5.913452944769212e-02, -6.012171927529356e-02, -7.237749697184795e-02, -3.318919960782708e-02, -3.107629238981861e-02, -3.296456561895865e-02, -7.461097745367661e-02, -1.887932019234687e-02, -1.887932019234687e-02, -3.946287747265610e-03, -1.168328997294961e-04, -1.290930833673527e-04, -2.549364889155059e-02, -4.083423057386236e-03, -1.076643292872133e-04, -6.534572568750846e-02, -6.366541071124480e-02, -7.213364933755588e-02, -6.462707390200538e-02, -6.438902886926204e-02, -6.438902886926204e-02, -6.399319512256355e-02, -5.584677086674771e-02, -5.793595746543322e-02, -5.973251517437870e-02, -5.881357847767939e-02, -6.944233915338220e-02, -6.266221372157910e-02, -5.006360750936622e-02, -4.291181877669981e-02, -5.935308484285391e-02, -4.675970465673528e-02, -4.675970465673527e-02, -6.540509854452931e-02, -4.404101061878493e-03, -6.412568544060993e-03, -4.947664810353576e-02, -2.965894237843184e-02, -1.223269715777947e-02, -5.238391542615133e-04, -9.334909424426323e-06, -4.683474717125449e-05, -1.211256601099949e-02, -9.221636536475592e-05, -9.221636536475562e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.146788838926239e-09, 9.146712794260301e-09, 9.146306108573593e-09, 9.147554203044272e-09, 9.146749281091958e-09, 9.146749281091958e-09, 1.258264646893049e-05, 1.258277658870501e-05, 1.258493319215699e-05, 1.258009888934792e-05, 1.258244489885684e-05, 4.086180412229700e-07, 6.523452311518110e-03, 4.832762794922049e-04, 4.491726869408115e-04, 4.736900090465368e-04, 4.842381192388330e-04, 4.842381192388330e-04, 2.043249250183920e-01, 2.038247377661088e-01, 3.223825951220114e-03, 1.759317319438576e-01, 2.039956396336303e-01, 2.039956396336303e-01, 2.174790829889990e+01, 2.055024702608265e+01, 1.423730069934996e+00, 1.673263261205289e+01, 2.170618987455196e+01, 2.170618987455193e+01, 3.739282968386359e-07, 3.771938555417431e-07, 3.742889950337927e-07, 3.022980217406101e-06, 3.755584162492689e-07, 3.755584162492689e-07, 1.195402397434166e-04, 1.167985052892605e-04, 1.206576107131219e-04, 1.184864631762467e-04, 1.162900048856411e-04, 5.386956276457760e-06, 4.634290512291791e-03, 6.362038654512060e-03, 4.429125778440451e-03, 5.825981960363081e-03, 4.843171554890872e-03, 1.476015443280566e-02, 9.789823127942295e+00, 9.887357973980554e-02, 1.036136131753936e+01, 1.851230714378791e-05, 3.197645888718736e-01, 3.197645888718736e-01, 4.364500829462994e+05, 1.908270045795649e+01, 9.921604494716885e+01, 5.903140195322546e+01, 3.830269189208321e+05, 2.580296253774164e+01, 6.186401037217720e-02, 2.967764523253419e-02, 5.064742151022776e-02, 4.463162793436411e-02, 4.026727062962869e-02, 4.026727062962869e-02, 5.179734294550011e-02, 8.449220000150420e-03, 1.053799202141491e-02, 1.466872800132665e-02, 1.212510585243792e-02, 2.805620516625274e-02, 4.041462439472173e-03, 3.772147236028243e-01, 4.029517002696892e-02, 8.629757657503392e-02, 3.313460037033578e-02, 3.313460037033577e-02, 3.357913235479633e-02, 1.556935265998344e+00, 8.301656295695562e-01, 4.078128059445305e-02, 2.208743573522401e+01, 6.328499962666270e-01, 7.353314625649829e+00, 7.817801224875005e+01, 8.017578072288620e+01, 7.881116675211390e-01, 4.268420245316838e+01, 4.268420245316837e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.175522598320478e-17, -1.201168587269655e-54, -1.201303003715831e-54, -1.200717677274762e-54, -1.201151621898194e-54, -1.201151621898194e-54, -7.113863825786213e-48, -7.116999856490161e-48, -7.209534039101503e-48, -7.167965819534385e-48, -7.114404650796550e-48, -1.368326599604662e-04, -1.322160013676613e-41, -1.050761742396553e-03, -8.652061055292210e-04, -9.508781134907635e-04, -1.055977865820829e-03, -1.055977865820829e-03, -1.052825390813986e-02, -1.112973043557458e-02, -1.031356765983377e-42, -2.286883383393806e-03, -1.069323184110066e-02, -1.069323184110066e-02, -6.522712749273263e-05, -7.101596442610678e-05, -4.221140192162262e-04, -5.340491700337022e-06, -7.272648397555943e-05, -7.272648397555938e-05, -5.626130407378991e-04, -5.688680732172263e-04, -5.633012339268334e-04, -3.409583914194651e-23, -5.657369636249426e-04, -5.657369636249426e-04, -2.099515867318623e-20, -1.265277580792900e-45, -1.239882987722334e-45, -1.253355918599653e-45, -1.274323221435112e-45, -3.332229764937330e-04, -9.913862547429122e-03, -2.048028869826305e-02, -7.528785324748833e-03, -1.274795227541830e-02, -1.222159678423151e-02, -6.024808015540267e-40, -2.366363995312269e-35, -4.156539235004607e-03, -2.980165053593990e-35, -1.270290684251472e-03, -2.537664561813703e-03, -2.537664561813703e-03, -4.569526706292496e-28, -8.187780554291200e-06, -1.804392444477832e-05, -3.259547190078583e-34, -3.779319673148016e-28, -8.374423751885626e-06, -2.093809255344698e-01, -9.636326706790518e-02, -2.182070827355189e-38, -1.490255558025627e-01, -1.336917288034907e-01, -1.336917288034907e-01, -1.580287804571456e-01, -1.202658262562334e-02, -1.899544192616783e-02, -3.287756547231148e-02, -2.433010122244431e-02, -3.521763409426208e-39, -1.405134277607469e-02, -1.940730063872277e-37, -7.272563763177953e-03, -2.073297621433539e-38, -9.671516456645825e-03, -9.671516456645827e-03, -2.922435215748782e-39, -3.384645918461201e-04, -5.437877394907568e-04, -1.705241130345629e-02, -1.259272141241096e-34, -1.512677464032791e-03, -3.508522794366112e-05, -6.802429297418940e-07, -4.816875592284363e-06, -1.645032573470395e-03, -8.501622890078872e-06, -8.501622890078835e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
