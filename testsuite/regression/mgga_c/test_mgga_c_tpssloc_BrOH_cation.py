
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpssloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.775583723087984e-02, -4.775612048142782e-02, -4.775513943794503e-02, -4.775087322417849e-02, -4.775342877096542e-02, -4.775342877096542e-02, -5.102756664767135e-02, -5.103270262547303e-02, -5.114916012469534e-02, -5.092120812200538e-02, -5.102121244748625e-02, -5.102121244748625e-02, -2.410573621631438e-02, -2.375323547459292e-02, -1.548948879687398e-02, -1.595470429280384e-02, -1.577228445184694e-02, -1.577228445184694e-02, -2.224024527420709e-03, -2.635289923488967e-03, -2.813204368476869e-02, -2.625833781884927e-04, -4.474321000256356e-04, -4.474321000256240e-04, -1.958340033646950e-12, -3.077312926674710e-12, -5.889782561651559e-08, -3.483341291661726e-14, -1.173812076166250e-13, -1.173811983346176e-13, -4.607002811241332e-02, -4.611954746804973e-02, -4.606403864485890e-02, -4.610803488506757e-02, -4.609940358885009e-02, -4.609940358885009e-02, -2.311983661130733e-02, -2.379949620753300e-02, -2.170878400266362e-02, -2.231086478004995e-02, -2.419268959697685e-02, -2.419268959697685e-02, -3.912224996895456e-02, -5.723342423254913e-02, -3.639443348640065e-02, -5.365993122255237e-02, -4.098293178706792e-02, -4.098293178706792e-02, -1.784746766458895e-05, -4.865688277343202e-04, -1.236302894679417e-05, -7.819000309000067e-02, -9.727030228507318e-05, -9.727030228507318e-05, -1.010900897356760e-14, -3.906345223452034e-14, -2.533446066030487e-13, -1.779729125974055e-06, -1.483039427205762e-13, -1.483018556081092e-13, -5.387537328124520e-02, -4.456034724224441e-02, -4.671541169236152e-02, -4.924925791481437e-02, -4.787934528921697e-02, -4.787934528921697e-02, -6.110854794955824e-02, -2.428286717453236e-02, -3.244559353980669e-02, -3.932074140625630e-02, -3.608293525327968e-02, -3.608293525327968e-02, -5.781496751172786e-02, -1.298896526778074e-03, -3.775154473362038e-03, -1.961485211759934e-02, -9.671264848406668e-03, -9.671264848406675e-03, -2.332201418607705e-02, -3.797050677065423e-08, -2.696407661380420e-07, -2.694037295846111e-02, -1.173044130469487e-05, -1.173044130470162e-05, -1.002129824300082e-11, -1.329766140486983e-16, -4.518579956520496e-15, -8.082836702764536e-06, -1.482693749202436e-13, -1.482642103858222e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpssloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.268892834560650e-01, -1.268891925249383e-01, -1.268902322716959e-01, -1.268903057738606e-01, -1.268922002610178e-01, -1.268915870447138e-01, -1.268759194525577e-01, -1.268771668202028e-01, -1.268829713858207e-01, -1.268870445393672e-01, -1.268829713858207e-01, -1.268870445393672e-01, -1.246829119275814e-01, -1.246704575566088e-01, -1.246854502803947e-01, -1.246722981041655e-01, -1.247258170769306e-01, -1.247107726596451e-01, -1.245355997173102e-01, -1.245190857414654e-01, -1.246524191846805e-01, -1.245894813003498e-01, -1.246524191846805e-01, -1.245894813003498e-01, -1.016006882480035e-01, -1.008498142303301e-01, -1.012559708801026e-01, -1.003413717674023e-01, -8.419606949551835e-02, -8.517648512316023e-02, -8.608159595014260e-02, -8.573442554234625e-02, -8.055283405691488e-02, -9.085048708917497e-02, -8.055283405691488e-02, -9.085048708917497e-02, -1.776964297216405e-02, -1.706400801401051e-02, -2.058273740694295e-02, -1.967483659020596e-02, -1.098528304901988e-01, -1.063173600057458e-01, -2.464224235766674e-03, -2.454454450857996e-03, -3.456581824303980e-03, -6.844347986620094e-03, -3.456581824304022e-03, -6.844347986620106e-03, -7.824727831862807e-12, -3.209489878585772e-11, -2.416897321011154e-11, -4.010612839719071e-11, -6.475599542716191e-07, -5.917987963468416e-07, -2.442392828599691e-14, -7.843190417646199e-13, -1.231237508544513e-12, -1.974648016139286e-12, -1.231237338307026e-12, -1.974641796882090e-12, -1.249271467098031e-01, -1.249257815057530e-01, -1.251505622007513e-01, -1.251523571580451e-01, -1.249323633888247e-01, -1.249329678496081e-01, -1.251320359147191e-01, -1.251307798549791e-01, -1.250418204289294e-01, -1.250432778460835e-01, -1.250418204289294e-01, -1.250432778460835e-01, -9.542411649673056e-02, -9.542654272280145e-02, -9.579210318134476e-02, -9.581552291931758e-02, -9.363906367040074e-02, -9.285153702471242e-02, -9.410427048817829e-02, -9.329785010232436e-02, -9.567226684151142e-02, -9.752767354618058e-02, -9.567226684151142e-02, -9.752767354618058e-02, -9.003930662364057e-02, -9.012017651840240e-02, -8.329159742655792e-02, -8.326719141180446e-02, -9.638674833710670e-02, -9.256954028122130e-02, -8.467946511569109e-02, -8.093291250114332e-02, -8.682923155696046e-02, -9.028252777599102e-02, -8.682923155696044e-02, -9.028252777599102e-02, -1.813578568738162e-04, -1.770362246637254e-04, -4.427406925804264e-03, -4.414908873654317e-03, -1.273133566749197e-04, -1.225406470276235e-04, -1.181106868869408e-01, -1.181828336819138e-01, -1.035045004713962e-03, -8.707984126887128e-04, -1.035045004713962e-03, -8.707984126887128e-04, -1.148648210028008e-13, -1.126980851786955e-13, -4.401139128485777e-13, -4.388331973377102e-13, -4.339361043006209e-12, -1.625580070987109e-12, -1.790627164676499e-05, -1.875820391066001e-05, -1.999195412257483e-12, -1.551421929829743e-12, -1.999185211527394e-12, -1.551413853771513e-12, -8.091850449695139e-02, -8.062600152884272e-02, -8.140692062390109e-02, -8.132811021361246e-02, -8.239787632291376e-02, -8.227532313693074e-02, -8.257426942863405e-02, -8.238078689365530e-02, -8.259501592909294e-02, -8.243858468009306e-02, -8.259501592909292e-02, -8.243858468009305e-02, -7.372950925605443e-02, -7.333475835182772e-02, -8.626540334820847e-02, -8.566588443578531e-02, -8.100001638128143e-02, -8.026405781776591e-02, -7.553648768479057e-02, -7.539119596605347e-02, -7.714664158203989e-02, -7.692207739231725e-02, -7.714664158203990e-02, -7.692207739231727e-02, -8.563618660432570e-02, -8.547588408961571e-02, -1.109288846627187e-02, -1.104047396878734e-02, -2.847355166299777e-02, -2.812427151941564e-02, -8.072580529712958e-02, -8.030964541594988e-02, -5.694901111244691e-02, -5.677379829134898e-02, -5.694901111244696e-02, -5.677379829134898e-02, -8.838696291024381e-02, -8.738260814930082e-02, -4.005757790301376e-07, -3.946814095434292e-07, -2.952302481770280e-06, -2.690860562393845e-06, -8.040134826001348e-02, -7.886602930980882e-02, -1.317571409398850e-04, -1.084418094282293e-04, -1.317571409398685e-04, -1.084418094281709e-04, -1.298122103150426e-10, -9.643014250116820e-11, -1.483499823918332e-15, -1.469775742525346e-15, -8.667683049953079e-14, -2.199102954529934e-14, -8.129720863963854e-05, -8.160801349394723e-05, -1.903031483424052e-12, -1.574448204362621e-12, -1.903024464706656e-12, -1.574445041228319e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.953223895115247e-10, 8.194309887148333e-10, 3.953216186638656e-10, 3.953339709074860e-10, 8.194605517417041e-10, 3.953342464653560e-10, 3.953787969848287e-10, 8.195599184362437e-10, 3.953747974533821e-10, 3.951940890080945e-10, 8.191228721329273e-10, 3.952019262847704e-10, 3.952797815283001e-10, 8.193563621032481e-10, 3.953066892058582e-10, 3.952797815283001e-10, 8.193563621032481e-10, 3.953066892058582e-10, 1.232829759810061e-06, 2.448567452116918e-06, 1.232282325936326e-06, 1.233060212350418e-06, 2.449112175362211e-06, 1.232477082906218e-06, 1.237890668575441e-06, 2.461602398296816e-06, 1.237378896091430e-06, 1.229162081905500e-06, 2.438988269608780e-06, 1.228571977302937e-06, 1.233521340479170e-06, 2.449566342205709e-06, 1.232581161025847e-06, 1.233521340479170e-06, 2.449566342205709e-06, 1.232581161025847e-06, 2.763076131869380e-03, 4.974485981092813e-03, 2.730654367234895e-03, 2.748761650968726e-03, 4.928464818781649e-03, 2.709538178721258e-03, 2.132543348984498e-03, 3.583180072271519e-03, 2.168240657832648e-03, 2.134072677008615e-03, 3.472599818196841e-03, 2.121023363521850e-03, 1.875856174563193e-03, 3.686768930158846e-03, 2.281338870409563e-03, 1.875856174563193e-03, 3.686768930158846e-03, 2.281338870409563e-03, 2.278249020124997e-01, 9.554420260444785e-03, 1.995661955527969e-01, 2.540766585828604e-01, 2.700895379049060e-02, 2.193518880505496e-01, 1.450899432897881e-03, 2.818845850903718e-03, 1.429633343199687e-03, 7.037115556029754e-02, -1.838312677775890e-02, 6.710374266604888e-02, 5.164902053576351e-02, -1.862861823292465e-01, 9.321254881871898e-01, 5.164902053576407e-02, -1.862861823292382e-01, 9.321254881871716e-01, 2.427448048079895e-03, -4.036087369604209e-03, 1.686871719183796e-03, 3.133023850258484e-03, -5.083212618034585e-03, 2.074225443717033e-03, 1.002272993836751e-02, -1.579087341634261e-02, 7.312989827022541e-03, 1.015997985230860e-04, -2.126170374545189e-04, 1.123525316519444e-04, 5.360836050487698e-07, 1.271040716865306e-06, 4.970565228821051e-07, 5.360841596836701e-07, 1.271041861815218e-06, 4.970514355922268e-07, 6.969403132753934e-07, 1.526245815479741e-06, 6.968571956104366e-07, 7.042082639277350e-07, 1.542656753914379e-06, 7.041677455649014e-07, 6.973622269587209e-07, 1.527162199431904e-06, 6.973057977871797e-07, 7.038046233678061e-07, 1.541639179462436e-06, 7.037221441467923e-07, 7.005495964547727e-07, 1.534450233370652e-06, 7.005049321948745e-07, 7.005495964547727e-07, 1.534450233370652e-06, 7.005049321948745e-07, 1.179164165900384e-05, 8.074610585496955e-06, 1.179316527922088e-05, 1.174652074272965e-05, 8.034758187166548e-06, 1.175660653537678e-05, 1.164131072445271e-05, 7.114585242102105e-06, 1.147014117534974e-05, 1.163169735881472e-05, 7.058390613478330e-06, 1.145497738402582e-05, 1.165495867491064e-05, 8.543233642957531e-06, 1.208454395138428e-05, 1.165495867491064e-05, 8.543233642957531e-06, 1.208454395138428e-05, 6.967022225290280e-03, 1.568195232029845e-02, 6.919033383340596e-03, 8.385307172240923e-03, 1.888696517617166e-02, 8.384456181956565e-03, 9.979622618611073e-03, 2.005308633937385e-02, 9.682442762517640e-03, 1.111969673454717e-02, 2.422239578112160e-02, 1.129424639880178e-02, 6.888674147063237e-03, 1.614735599212427e-02, 6.496769064769998e-03, 6.888674147063231e-03, 1.614735599212427e-02, 6.496769064769999e-03, 2.421775494427910e-02, -2.566774514837562e-02, 2.313947872624569e-02, 4.090766138165178e-02, -1.104628456646501e-02, 4.018247985727320e-02, 2.683071524964803e-02, -2.765161137867429e-02, 2.084085609496952e-02, 5.223653830771742e-05, 1.091454288016926e-04, 5.222776474486933e-05, 7.396050556370613e-02, -4.264418481013676e-02, 5.725943006967300e-02, 7.396050556370616e-02, -4.264418481013682e-02, 5.725943006967302e-02, 2.201236067731206e-07, 3.563830618301895e-07, 2.162714632341135e-07, 4.660068355330065e-07, 5.033401867549032e-07, 4.583151251264287e-07, 7.335969495802459e-04, -1.187173334423691e-03, 5.232683285798324e-04, 2.244667404473764e-02, -3.368999347586320e-02, 2.173904272619078e-02, 3.112594415015263e-06, 6.327344175053802e-06, 2.874118220052083e-06, 3.112601865170286e-06, 6.327333762059627e-06, 2.874114108171210e-06, 7.011650385190955e-02, 1.480339040294366e-01, 7.020965340451320e-02, 3.877110158891019e-02, 9.224182181494481e-02, 3.891866057574477e-02, 4.819000135926813e-02, 1.097517283432814e-01, 4.833598092648669e-02, 5.790475869069579e-02, 1.272838416656381e-01, 5.803341747719137e-02, 5.283499780593594e-02, 1.181951335867914e-01, 5.297417773329580e-02, 5.283499780593594e-02, 1.181951335867914e-01, 5.297417773329580e-02, 3.256815916823132e-02, 6.659904190037672e-02, 3.258101579523072e-02, 1.411751806458898e-02, 1.553977256440767e-02, 1.386735899583417e-02, 1.331725229035083e-02, 2.556942115567344e-02, 1.303258019861305e-02, 1.594817317590777e-02, 4.540867587374636e-02, 1.601033044136426e-02, 1.336569698980200e-02, 3.356592782150549e-02, 1.335472496240594e-02, 1.336569698980199e-02, 3.356592782150548e-02, 1.335472496240594e-02, 6.116965084278954e-03, 1.361795600246444e-02, 6.117535290527829e-03, 3.973583718263621e-02, 1.193024201699299e-03, 3.898085458918144e-02, 5.113039843983564e-02, 2.377407033899684e-02, 4.955169138719556e-02, 5.877937246626812e-02, 7.937879092979683e-02, 5.819790337668337e-02, 6.585801983672956e-02, 5.537209172891237e-02, 6.561884446034261e-02, 6.585801983672965e-02, 5.537209172891240e-02, 6.561884446034262e-02, 1.932306142007352e-02, 2.438329457394572e-02, 1.882485784632511e-02, 7.497314666807114e-03, -1.378109885389851e-02, 7.205245753923858e-03, 1.084898408563061e-02, -1.711445316493036e-02, 9.013576691135958e-03, 8.086757670434666e-02, 1.363283532825220e-01, 7.827637311389286e-02, 5.147726274901494e-02, -5.251246101766396e-02, 3.932176601293435e-02, 5.147726274903975e-02, -5.251246101770841e-02, 3.932176601294776e-02, 4.098875357944847e-04, -7.179937445599539e-04, 3.319154070798076e-04, 1.377597379205553e-07, 2.774014375060306e-07, 1.347131477532175e-07, 4.709382935734437e-05, -7.694816868369910e-05, 3.263221889035315e-05, 5.117844192445074e-02, -6.810786305528158e-02, 4.709996592975072e-02, 3.847607788294675e-06, 8.873121555684859e-06, 4.154808077665175e-06, 3.847631602741568e-06, 8.873152612045232e-06, 4.154820790514268e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.688718555911355e-05, -4.688718555911354e-05, -4.688958834327627e-05, -4.688958834327627e-05, -4.690170604454065e-05, -4.690170604454065e-05, -4.686625270898160e-05, -4.686625270898158e-05, -4.688461647982286e-05, -4.688461647982286e-05, -4.688461647982286e-05, -4.688461647982286e-05, -3.598391598002390e-05, -3.598391598002388e-05, -3.601775646691553e-05, -3.601775646691552e-05, -3.693407927013491e-05, -3.693407927013493e-05, -3.670824003448348e-05, -3.670824003448348e-05, -3.667437311367994e-05, -3.667437311367993e-05, -3.667437311367994e-05, -3.667437311367993e-05, 1.480433229699899e-04, 1.480433229699899e-04, 1.492409352457003e-04, 1.492409352457002e-04, 1.585110808677182e-04, 1.585110808677181e-04, 1.865351515885397e-04, 1.865351515885397e-04, 1.033489613602439e-04, 1.033489613602439e-04, 1.033489613602439e-04, 1.033489613602439e-04, 1.273222055365659e-03, 1.273222055365659e-03, 1.481800959827591e-03, 1.481800959827592e-03, 1.957940158190247e-05, 1.957940158190247e-05, 8.671917233059583e-05, 8.671917233059590e-05, 3.876353209695460e-04, 3.876353209695458e-04, 3.876353209695346e-04, 3.876353209695347e-04, 1.160954053823999e-12, 1.160954053824000e-12, 1.917394443656252e-12, 1.917394443656252e-12, 2.278600460949486e-08, 2.278600460949486e-08, 2.783212982532229e-15, 2.783212982532229e-15, -4.864819476492100e-14, -4.864819476492106e-14, -4.864822025705826e-14, -4.864822025705830e-14, -1.471932184850204e-03, -1.471932184850204e-03, -1.489844789193072e-03, -1.489844789193072e-03, -1.473258630427615e-03, -1.473258630427615e-03, -1.489050796496886e-03, -1.489050796496886e-03, -1.480715998177374e-03, -1.480715998177373e-03, -1.480715998177374e-03, -1.480715998177373e-03, 3.227246429095879e-05, 3.227246429095890e-05, 1.592656900552196e-05, 1.592656900552200e-05, 4.243583020433326e-05, 4.243583020433321e-05, 2.969997445588646e-05, 2.969997445588653e-05, 1.753673491909302e-05, 1.753673491909302e-05, 1.753673491909302e-05, 1.753673491909302e-05, -2.830405093141300e-03, -2.830405093141297e-03, -4.640241721496870e-03, -4.640241721496872e-03, -4.610841109398049e-04, -4.610841109398042e-04, -1.203744445819300e-03, -1.203744445819301e-03, -3.991091918648713e-03, -3.991091918648711e-03, -3.991091918648715e-03, -3.991091918648715e-03, 5.768664249562036e-06, 5.768664249562039e-06, 1.834228164466458e-04, 1.834228164466459e-04, 4.052246910064360e-06, 4.052246910064364e-06, -1.314097241288427e-04, -1.314097241288427e-04, 3.963624459665473e-05, 3.963624459665472e-05, 3.963624459665475e-05, 3.963624459665475e-05, -3.538018085670744e-16, -3.538018085670743e-16, -2.134759807175984e-15, -2.134759807175985e-15, -2.894059312770428e-14, -2.894059312770426e-14, 6.527516691064289e-07, 6.527516691064289e-07, -3.321040348978631e-14, -3.321040348978629e-14, -3.321040357954575e-14, -3.321040357954575e-14, -1.227691242782664e-01, -1.227691242782664e-01, -1.014188812189906e-01, -1.014188812189906e-01, -1.159366066759416e-01, -1.159366066759417e-01, -1.258603800123448e-01, -1.258603800123448e-01, -1.214009889343542e-01, -1.214009889343542e-01, -1.214009889343542e-01, -1.214009889343542e-01, -1.713062940769809e-02, -1.713062940769810e-02, -1.420958964778359e-03, -1.420958964778360e-03, -1.067791813426129e-02, -1.067791813426130e-02, -3.111925256813669e-02, -3.111925256813668e-02, -1.858731957721915e-02, -1.858731957721915e-02, -1.858731957721915e-02, -1.858731957721915e-02, -2.634493082613039e-03, -2.634493082613040e-03, 4.691172186007104e-04, 4.691172186007102e-04, 1.113322267285265e-03, 1.113322267285265e-03, 1.589066964680539e-03, 1.589066964680540e-03, 2.072656254347624e-03, 2.072656254347623e-03, 2.072656254347625e-03, 2.072656254347623e-03, 8.531419317223893e-04, 8.531419317223883e-04, 1.602917707569752e-08, 1.602917707569753e-08, 9.262874548024144e-08, 9.262874548024143e-08, -4.042522873136738e-04, -4.042522873136747e-04, 4.696203492045517e-06, 4.696203492045517e-06, 4.696203492057059e-06, 4.696203492057060e-06, 8.038458262812027e-13, 8.038458262812028e-13, -2.797326589992349e-18, -2.797326589992348e-18, -5.124961018473172e-16, -5.124961018473169e-16, 4.138741317577342e-06, 4.138741317577339e-06, -3.194141434285969e-14, -3.194141434285969e-14, -3.194466221897186e-14, -3.194466221897187e-14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
