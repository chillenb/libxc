
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpssloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504594130e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.016674961812874e-01, -7.249519150289233e-02, -4.370459317257436e-02, -4.264604502672696e-02, -2.771563463684875e-02, -2.786087541936122e-02, -2.780255944410787e-02, -2.780822482680209e-02, -4.290011129114926e-02, -6.701332647008856e-02, -3.171626523762151e-02, -2.207915636593383e-03, -1.068424426030415e-02, -6.628241523783371e-02, -2.575129820866851e-03, -6.654665607074849e-03, -1.910318351344443e-02, -4.402446663300107e-03, -1.273593153606462e-04, -6.068519790621366e-06, -2.579251261742599e-06, -2.250482820793198e-11, -1.366322869854535e-11, -2.169544834745499e-07, -3.359535671181390e-13, -2.778902049781948e-15, -2.778891386514713e-15, -8.180618067117254e-02, -4.568128482175474e-02, -4.563412037778896e-02, -4.567826668884079e-02, -9.885484352222385e-02, -7.799830301145286e-02, -3.741752919295378e-02, -3.868972472888156e-02, -1.889435117359910e-02, -1.987531991538864e-02, -5.685057715715161e-02, -3.861473176990200e-02, -4.107514973997178e-02, -3.581277084702135e-02, -2.009312500776796e-02, -2.823416953838071e-02, -4.060755900050885e-02, -3.002245469145218e-02, -9.943431569806550e-06, -2.288773062605843e-03, -6.485773623974409e-05, -3.710912197113856e-02, -5.610479002980419e-04, -5.610479002980352e-04, -1.433034189592349e-14, -1.363498767157922e-14, -2.346152127646949e-12, -8.885973144274411e-06, -7.268554916778536e-13, -7.268536696239784e-13, -3.581829215689163e-02, -3.609288349329268e-02, -6.383563580100113e-02, -5.530673197897457e-02, -6.385539257642651e-02, -5.511142869462419e-02, -5.555318414634913e-02, -4.868508324519545e-02, -4.317507719693359e-02, -3.462779375195201e-02, -3.279024569405629e-02, -4.622835697005240e-02, -5.906667675683411e-02, -5.979336908490728e-03, -9.925475536025085e-03, -2.247177582459795e-02, -1.871833690125964e-02, -1.695001616323459e-02, -1.741093755845604e-02, -1.432337785401933e-02, -1.996418370442526e-07, -3.155036941940666e-02, -7.704361684221328e-06, -7.704361684235192e-06, -5.037446550363285e-03, -1.059487752075513e-35, -1.374982125405463e-03, -2.268013163367492e-02, -3.989708053653077e-14, -5.123635590962891e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpssloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753463196e-01, -1.747373592466674e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.783938685689914e-01, -1.813844499509547e-01, -1.644599880351423e-01, -1.757839055465187e-01, -6.892197306013123e-02, -6.891992400701454e-02, -1.289134782706666e-01, -1.145244712594606e-01, -9.194912139905084e-02, -9.197030461017527e-02, -9.208566578861668e-02, -9.202124566524769e-02, -8.495016034385716e-02, -8.495023078500812e-02, -9.232311264669701e-02, -9.171676473563696e-02, -1.148229143654889e-01, -1.290101871529431e-01, -7.534022876475284e-02, -7.481054072998572e-02, -1.079835849473772e-01, -1.102974608222702e-01, -2.047616026054748e-02, -2.060713797929888e-02, -7.221758979873961e-02, -6.435522051481650e-02, -7.037457509512338e-02, -7.906556863981584e-02, -2.254638994020423e-02, -2.456804655508500e-02, -3.652831208492494e-02, -4.465967373258703e-02, -6.644060833612087e-02, -6.537020039167185e-02, -3.851249849341565e-02, -3.463095560037138e-02, -1.284267273189234e-03, -1.151847746691554e-03, -5.737506997362459e-05, -1.353595030492885e-04, 5.852467768551517e-05, -6.081688411432315e-04, -2.551446276254106e-10, -2.458282000329578e-10, -1.577913215901212e-10, -1.569729640507972e-10, -2.424294606487984e-06, -2.409074518681281e-06, -3.737966734754858e-12, -3.775380602880486e-12, -2.872294035227528e-14, -4.381507993954816e-14, -2.872276569665606e-14, -4.381416052120565e-14, -1.472717645245602e-01, -1.473022810608727e-01, -6.262819641049125e-02, -6.262521385959491e-02, -6.266752685868107e-02, -6.266385424820908e-02, -6.263195019167664e-02, -6.262642965303156e-02, -1.488921866858709e-01, -1.496554222152030e-01, -1.542741615820697e-01, -1.516698234172280e-01, -1.205440558079323e-01, -1.205139284168824e-01, -1.213149067911284e-01, -1.213161434349927e-01, -8.702670826224154e-02, -8.637289361339834e-02, -8.861391138407407e-02, -8.791871102282840e-02, -1.303582657707636e-01, -1.271842230146269e-01, -1.209506638568562e-01, -1.215923875529113e-01, -1.041767083970350e-01, -9.614527414770352e-02, -7.820858318529196e-02, -7.726245668423060e-02, -8.967903120753155e-02, -8.133548778431599e-02, -8.097082693218621e-02, -7.394784209148582e-02, -9.970632512928845e-02, -9.700604657027534e-02, -7.084840610355525e-02, -7.740973766435225e-02, -1.044758334452467e-04, -1.041898349442428e-04, -1.692085900575019e-02, -2.005223379168405e-02, -6.631981476690902e-04, -6.383314368026107e-04, -7.139724144069967e-02, -7.134938180239800e-02, -5.212346234394683e-03, -4.989599806877392e-03, -5.212346234394701e-03, -4.989599806877374e-03, -1.649966969319436e-13, -1.666146835890446e-13, -1.530423159047004e-13, -1.525945329501030e-13, -2.664113522757770e-11, -2.575774907889553e-11, -1.118695625605047e-04, -7.783140217822401e-05, -9.291213912281864e-12, -7.672570922842092e-12, -9.291218535158354e-12, -7.672570305144513e-12, -8.343819233694874e-02, -8.352279172576586e-02, -7.831657886954552e-02, -7.841197160873928e-02, -7.198832468635549e-02, -7.148872356177727e-02, -8.061847103318877e-02, -7.830932932945756e-02, -7.200798844943504e-02, -7.151058106231506e-02, -8.077994054660551e-02, -7.826452054681182e-02, -7.734116266227169e-02, -7.708221400969455e-02, -8.550544894058656e-02, -8.298101944049373e-02, -9.321848170552292e-02, -8.837958518887737e-02, -4.768781852360778e-02, -4.756415013309448e-02, -5.778384497349591e-02, -5.741688130803391e-02, -8.721802983618600e-02, -8.575141425313304e-02, -8.543914650641617e-02, -8.501889960666670e-02, -4.021071424699759e-02, -4.002689224421331e-02, -5.308941405970652e-02, -6.074144714258335e-02, -7.726874186891369e-02, -8.856379931638600e-02, -7.944731929868096e-02, -7.945159260572428e-02, -7.994812361226430e-02, -6.988862147401043e-02, -8.048297106101353e-02, -7.870934050428868e-02, -1.773472996354030e-02, -1.753120798266077e-02, -2.313190685865539e-06, -1.788534123026580e-06, -8.559262870262255e-02, -8.275185927285966e-02, -9.464905728493704e-05, -6.759340231390467e-05, -9.464905728501440e-05, -6.759340231389334e-05, -6.593851617928384e-03, -6.257235187311728e-03, -4.862470005357277e-20, -4.378074174516214e-19, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635373e-02, -2.688551334493897e-02, -5.793922004317453e-13, -3.904182669960899e-13, -6.382891519930751e-10, -5.397300423417884e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.586860437809648e-09, 9.173720875619297e-09, 4.586860437809648e-09, 4.586809269586106e-09, 9.173618539172212e-09, 4.586809269586106e-09, 4.586566005126902e-09, 9.173132010253805e-09, 4.586566005126902e-09, 1.378923085981414e-10, 1.678506964197433e-09, 8.370631243283650e-10, -2.102759045722995e-09, 1.375398517577510e-09, 6.721646404529787e-10, 5.574645630217056e-11, 1.268125482408174e-10, 5.573321896500414e-11, 1.444840011065095e-06, 2.576805531398456e-06, 1.533460498399978e-06, 7.837939752309613e-07, 5.331879888766297e-07, 7.840663039567965e-07, 7.891150952688319e-07, 5.455631256076443e-07, 7.883224734529011e-07, 6.533091718436530e-07, 2.740464140609325e-07, 6.532875622203171e-07, 7.909190875662426e-07, 5.411583807201473e-07, 7.831944503129146e-07, 1.544589139800749e-06, 2.599616504212466e-06, 1.454121059600347e-06, 4.716832017647968e-03, 9.433664035295936e-03, 4.716832017647968e-03, 3.245906366608779e-03, 7.727096767394501e-03, 3.889200535914509e-03, 3.698683373220189e-04, 1.318469650022912e-04, 3.774610323811997e-04, 1.639933871585939e-03, 2.747299473175712e-03, 1.642274818519440e-03, 5.135129853167127e-03, 1.027025970633425e-02, 5.135129853167127e-03, 3.931016686914697e-04, 1.537814166387131e-04, 4.835731399785746e-04, 6.305772407633796e-01, 7.373485015025478e-01, 5.976777411123171e-01, 1.068242268034600e+00, 2.449434620854066e+00, 1.232468350524853e+00, 2.416714861356249e-04, 4.219237404230942e-04, 2.388890266579185e-04, 3.981446784630450e-02, -3.101691979122103e-02, 3.701995276636032e-02, 3.592641059502567e-04, 9.978305050137150e-04, -5.056506712804333e-04, -2.396978429220956e-03, 5.558351496979774e-03, 2.725547395689427e-03, 6.916424757564884e-05, 1.384101553156893e-04, 6.915418539723032e-05, 3.370326431691062e-05, 6.740652903630375e-05, 3.360365691960484e-05, 2.253878719153751e-03, 4.561104417379338e-03, 2.253683716771273e-03, 4.644123989045025e-06, 9.294425678051750e-06, 4.644228860467836e-06, 8.171891590654211e-09, 1.634378318130878e-08, -4.137944277798212e-08, 8.171854794346878e-09, 1.634370958869411e-08, -4.137714276997569e-08, 7.265299260001696e-07, 1.527697599064317e-06, 7.264544888772733e-07, 3.359120532544342e-08, 1.983297367303940e-07, 3.348723423392276e-08, 3.393995770324264e-08, 1.973106660990927e-07, 3.382782472009168e-08, 3.363065906754348e-08, 1.982655689409892e-07, 3.349226458741089e-08, 7.024533845241897e-07, 1.781475978225606e-06, 8.819509521344140e-07, 8.793515797546343e-07, 1.832706680642222e-06, 1.827497154817240e-07, 1.697367973635854e-05, 3.319353329856919e-05, 1.696689227706987e-05, 1.701812377483583e-05, 3.328361958526923e-05, 1.701306544913820e-05, 1.079393194563436e-05, 4.101340956288809e-06, 1.065662214359559e-05, 1.095140951003667e-05, 4.517406231565316e-06, 1.080365670374911e-05, 3.001856631478090e-05, 5.924928242173491e-05, 2.101431568221512e-05, 1.701561939858266e-05, 3.332317190693933e-05, 1.705643851465519e-05, 1.169123569117033e-02, 2.130688015304129e-02, 7.503300150119090e-03, 8.061923366437948e-03, 1.998906422522521e-02, 7.774973403882054e-03, 8.667594743870822e-03, 6.543047590686181e-03, 6.976564381676804e-03, 7.061826800630692e-03, 7.194031692292829e-03, 5.443895140960295e-03, 1.082863032814842e-02, 2.024905899582031e-02, 6.222371789406774e-03, 3.835280850434820e-03, 5.647740234011255e-03, 5.097444911411943e-03, 1.690868387959277e-02, -2.168937002450100e-02, 1.612060010419909e-02, 1.738004084583199e-01, 2.418283696164158e-01, 1.727041191932246e-01, 4.466770911210105e-02, 8.938503304591153e-02, 4.465805997912078e-02, 1.040376385911490e-05, 1.467409516685922e-05, 1.037537971695461e-05, 2.193247802290700e-01, 4.388002431592583e-01, 2.190972352061260e-01, 2.193247802290696e-01, 4.388002431592575e-01, 2.190972352061257e-01, 3.444180685167893e-07, 6.888361370481896e-07, 3.438129778059844e-07, 8.807342444763672e-08, 2.014585173470906e-07, 9.037996057883661e-08, 2.057591913072550e-04, 4.117510903709571e-04, 2.056950486518190e-04, 3.554207478846167e-02, 2.824675715339356e-02, 3.516828090538616e-02, 2.119192356028788e-05, 4.238836388015165e-05, 2.106873662925070e-05, 2.119193565191802e-05, 4.238836061244008e-05, 2.106874193872513e-05, 9.289008759983276e-02, 2.032860062125249e-01, 9.309158696726026e-02, 4.007372948653042e-02, 9.761731962166782e-02, 4.022418899739292e-02, 8.020400484852848e-03, 1.604080096970570e-02, 8.020400484852848e-03, 4.765449768550182e-02, 1.003102181949184e-01, 4.666601735240738e-02, 7.993717163914052e-03, 1.598743432782810e-02, 7.993717163914052e-03, 4.312908526564308e-02, 9.126611967005631e-02, 4.213281554644743e-02, 5.933097570651890e-02, 1.264947441813893e-01, 5.940722217617191e-02, 2.212219882117735e-02, 4.339298731724772e-02, 2.013369913661234e-02, 2.173464092313622e-02, 4.151657471919388e-02, 1.655948110298266e-02, -7.437212255898439e-05, 1.057882145691633e-02, -5.803973225560399e-05, 4.073874266863059e-03, 1.124820312868645e-02, 3.945220383068104e-03, 2.083997477912563e-02, 4.255297832119227e-02, 1.761885567562769e-02, 6.396460219869595e-03, 1.296690723774844e-02, 6.002597337193489e-03, 1.434485520831289e-01, 2.862548512110091e-01, 1.434319682267667e-01, 1.334263722920787e-01, 2.093398153318530e-01, 1.317994567925848e-01, 8.399086144816502e-02, 1.384632906110514e-01, 8.181699651292190e-02, 1.052728657780236e-01, 2.072841583328783e-01, 1.052419172634850e-01, 1.188740768358193e-01, 1.982914727274645e-01, 1.202892297560045e-01, 1.715632547442596e-02, 1.283872359696945e-02, 1.638121726638364e-02, 7.571766921970244e+02, 1.514353384394049e+03, 7.571766921970244e+02, 1.682606754075491e-02, -2.866913886457072e-02, 1.388623992464912e-02, 9.814205384535314e-02, 1.897188921791229e-01, 9.501400376397652e-02, 5.256797268243751e-02, -6.729785734779473e-02, 3.925003606324932e-02, 5.256797268252415e-02, -6.729785734793593e-02, 3.925003606331093e-02, 1.820782755995194e+05, 3.641565511990389e+05, 1.820782755995194e+05, -1.881591684923849e-22, -1.148573241769407e-10, 1.325742289465746e-21, 7.168368921153466e+07, 1.433673784230693e+08, 7.168368921153466e+07, 4.486636145600881e+01, 8.973272291201762e+01, 4.486636145600881e+01, 9.083135132608309e-07, 1.951698420989436e-06, 6.317336236160758e-07, 6.232730082271295e-03, 1.246546525848443e-02, 6.232732629242298e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.322788721982506e-29, -4.322788721982504e-29, -9.313569481677500e-104, -9.313569481677501e-104, -9.314872319595734e-104, -9.314872319595733e-104, -6.584029875973946e-06, -6.584029875973946e-06, -2.680087979146160e-05, -2.680087979146160e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.468589381528957e-04, -1.468589381528956e-04, -8.707766232011518e-05, -8.707766232011515e-05, -9.015191602522873e-05, -9.015191602522879e-05, 0.000000000000000e+00, 0.000000000000000e+00, -8.903900945933289e-05, -8.903900945933289e-05, -1.474312979718036e-04, -1.474312979718036e-04, -1.214539298320994e-29, -1.214539298320994e-29, -3.287671329775410e-04, -3.287671329775409e-04, 0.000000000000000e+00, 0.000000000000000e+00, -3.230156261546818e-04, -3.230156261546818e-04, -7.331243636098488e-79, -7.331243636098488e-79, 0.000000000000000e+00, 0.000000000000000e+00, -1.466497552126904e-03, -1.466497552126905e-03, -1.973093356019655e-03, -1.973093356019656e-03, -6.374451704814755e-05, -6.374451704814755e-05, 6.019550240261332e-05, 6.019550240261336e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.109367767556510e-14, -4.109367767556514e-14, -7.562950157487094e-12, -7.562950157487096e-12, -7.687014989031737e-08, -7.687014989031735e-08, -5.104144410266844e-16, -5.104144410266844e-16, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.964947629580925e-04, -3.964947629580924e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.248791735704323e-04, -1.248791735704323e-04, -5.570635670748336e-04, -5.570635670748335e-04, -6.157159293414213e-05, -6.157159293414213e-05, -6.814400003012867e-05, -6.814400003012864e-05, 3.837683395329906e-05, 3.837683395329894e-05, 2.324652367204374e-05, 2.324652367204373e-05, -1.009344418267831e-04, -1.009344418267831e-04, -6.778459768207308e-05, -6.778459768207308e-05, -5.019061280433340e-03, -5.019061280433336e-03, -3.127050510865439e-02, -3.127050510865442e-02, 1.544987068185275e-04, 1.544987068185282e-04, 0.000000000000000e+00, 0.000000000000000e+00, -6.450955976247646e-03, -6.450955976247644e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.788528684621287e-04, -3.788528684621289e-04, -8.185624892798358e-08, -8.185624892798366e-08, 0.000000000000000e+00, 0.000000000000000e+00, -1.713787334354967e-06, -1.713787334354967e-06, -1.713787334354953e-06, -1.713787334354953e-06, -5.052389461336774e-15, -5.052389461336773e-15, 0.000000000000000e+00, 0.000000000000000e+00, -1.080169310446689e-14, -1.080169310446689e-14, -2.211525724998278e-06, -2.211525724998278e-06, -1.320728482716972e-14, -1.320728482716971e-14, -1.320626316389520e-14, -1.320626316389520e-14, -3.190432922704974e-01, -3.190432922704975e-01, -1.440004599441076e-01, -1.440004599441076e-01, -6.389582944745564e-74, -6.389582944745571e-74, -6.964064436267652e-02, -6.964064436267656e-02, -8.308551947978485e-74, -8.308551947978481e-74, -6.203268898479074e-02, -6.203268898479070e-02, -8.275609809920718e-02, -8.275609809920723e-02, -1.323840914988445e-03, -1.323840914988445e-03, -7.392295668136699e-03, -7.392295668136702e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.945336883406469e-03, -9.945336883406469e-03, -1.884111091454182e-03, -1.884111091454182e-03, -4.684763814948782e-05, -4.684763814948780e-05, -1.727802210577050e-03, -1.727802210577050e-03, -5.117816234444083e-03, -5.117816234444086e-03, -3.823865886549151e-04, -3.823865886549150e-04, -3.557111392812131e-03, -3.557111392812129e-03, 1.105153626401638e-03, 1.105153626401638e-03, -1.498617634179379e-61, -1.498617634179380e-61, 0.000000000000000e+00, 0.000000000000000e+00, -1.735963523091090e-03, -1.735963523091091e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.279194374415790e-55, -7.279194374415793e-55, 0.000000000000000e+00, 0.000000000000000e+00, -1.406475873852708e-46, -1.406475873852707e-46, -1.006434933023310e-64, -1.006434933023310e-64, 0.000000000000000e+00, 0.000000000000000e+00, -6.405392521932420e-12, -6.405392521932422e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
