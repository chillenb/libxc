
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cf22d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.143553383299571e-01, -1.143563716751992e-01, -1.143593000340675e-01, -1.143439499945665e-01, -1.143522351748375e-01, -1.143522351748375e-01, -7.959746689279092e-03, -7.985781547231228e-03, -8.646119528448399e-03, -8.120887411001556e-03, -8.286391513545370e-03, -8.286391513545370e-03, -1.448564554380603e-02, -1.395895494285088e-02, -7.740861312338673e-04, 2.235417559636441e-03, 7.681020964445183e-04, 7.681020964445183e-04, 1.515402057242142e-02, 1.522278074838368e-02, -6.343469554307098e-02, -1.471577704133393e-02, -9.401944062916868e-04, -9.401944062916868e-04, -7.423246832654718e-03, -7.748086168608648e-03, -2.706184869979656e-02, -4.633236664489018e-03, -5.650024673184020e-03, -5.650024673184020e-03, -1.125368217298287e-01, -1.127026758770085e-01, -1.125386417087113e-01, -1.126851864834148e-01, -1.126244484833565e-01, -1.126244484833565e-01, 3.575236874803721e-02, 3.164269893741007e-02, 4.045482893633089e-02, 3.683221020836260e-02, 3.115342391762867e-02, 3.115342391762867e-02, -3.960912307282051e-02, -9.480762402868721e-02, -2.671313449180079e-02, -4.892398344793362e-02, -4.579476220538076e-02, -4.579476220538076e-02, -3.207268692262567e-02, 3.506176724188849e-03, -3.304442901100178e-02, -8.023431692868385e-02, -2.043145221142407e-02, -2.043145221142403e-02, -3.684769912168507e-03, -4.542247835990221e-03, -3.579159592930007e-03, -3.253310728664100e-02, -4.223525625754130e-03, -4.223525625754129e-03, -1.709372878371696e-01, -1.328017583701254e-01, -1.427608546021754e-01, -1.531677948609556e-01, -1.476360337740515e-01, -1.476360337740515e-01, -1.766473049369189e-01, -2.114636059010923e-02, -4.374149403726417e-02, -7.846301754179366e-02, -5.844597035525420e-02, -5.844597035525419e-02, -7.961452024486691e-02, 1.937777505309343e-02, 2.137578029092706e-02, -7.503491615075218e-03, 1.004425829127742e-02, 1.004425829127741e-02, -1.297195765847570e-02, -2.640082263141716e-02, -3.093506268080284e-02, -1.926430926601607e-02, -3.072667120925356e-02, -3.072667120925347e-02, -9.882283686128205e-03, -1.370141771220800e-03, -2.711115749457887e-03, -3.065204043256045e-02, -3.942848651241499e-03, -3.942848651241509e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cf22d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.096977696054594e-01, -2.096890562655283e-01, -2.096484533208237e-01, -2.097772520429768e-01, -2.097100490684734e-01, -2.097100490684734e-01, -2.253963149710119e-01, -2.254093321470548e-01, -2.257952865699727e-01, -2.260874774183506e-01, -2.258641650181782e-01, -2.258641650181782e-01, -1.100876726472487e-01, -1.097678072713097e-01, -9.188642912685031e-02, -9.562251156923600e-02, -9.543468178422464e-02, -9.543468178422464e-02, -1.243703939451256e-04, -8.537300653987254e-03, -1.371568226139916e-01, 2.365998878157312e-02, 2.781726916134911e-02, 2.781726916134909e-02, -9.479545365431731e-03, -9.880706099401511e-03, -3.005427176842702e-02, -5.983037917557727e-03, -7.265291334090053e-03, -7.265291334090050e-03, -2.075120355279323e-01, -2.072418270269242e-01, -2.074716839315572e-01, -2.072341579760395e-01, -2.073878230171307e-01, -2.073878230171307e-01, -2.024776772763343e-01, -2.093756190587875e-01, -1.964611621175814e-01, -2.035535260040987e-01, -2.087632448692822e-01, -2.087632448692822e-01, -1.443040490913350e-01, -2.637745835355979e-01, -1.072711748390349e-01, -1.310830041001454e-01, -1.583443148667028e-01, -1.583443148667028e-01, -9.911982296184381e-03, 4.397549730822235e-02, -1.490313238656275e-02, -2.458275173658611e-01, 1.628431347133566e-02, 1.628431347133596e-02, -4.777025165384946e-03, -5.868004823521291e-03, -4.637008675769296e-03, -2.807190905706683e-02, -5.459709847364525e-03, -5.459709847364523e-03, -2.837228345375086e-01, -2.443864054191008e-01, -2.523423717389595e-01, -2.635949177100759e-01, -2.573695836677560e-01, -2.573695836677560e-01, -2.662720609369242e-01, -1.333912804741495e-01, -1.561147090071851e-01, -2.189977369427644e-01, -1.850286296467386e-01, -1.850286296467385e-01, -2.399674537154363e-01, 2.109637405726087e-02, -4.128256496546948e-02, -1.029388568425786e-01, -9.445609462133409e-02, -9.445609462133411e-02, -1.207704029117720e-01, -2.960251855195411e-02, -3.167184738591854e-02, -9.272423016521356e-02, -1.506637908518150e-02, -1.506637908518172e-02, -1.252253112556800e-02, -1.796418104065385e-03, -3.528566154891305e-03, -1.682699547455359e-02, -5.101881751802311e-03, -5.101881751802220e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.396836093805259e-10, 2.397012638555036e-10, 2.397610669712684e-10, 2.394997577281345e-10, 2.396392794048115e-10, 2.396392794048115e-10, 1.753441425055693e-06, 1.753003690968308e-06, 1.740066731028087e-06, 1.732918510038765e-06, 1.739435620875692e-06, 1.739435620875692e-06, 6.860767945072612e-03, 6.833763181415046e-03, 5.935275252543221e-03, 5.628689322596186e-03, 5.775568563777006e-03, 5.775568563777006e-03, 6.929380698306081e-01, 7.257024111130571e-01, 4.360818783589653e-03, 4.591129113507552e-01, 6.371325673497676e-01, 6.371325673497658e-01, 1.177022926635861e-02, 1.387064032873206e-02, 7.386016411369148e-02, 4.153521766830915e-03, 8.685396608769335e-03, 8.685396611686652e-03, 6.466609590323679e-07, 6.581235974011011e-07, 6.472411281141430e-07, 6.573544574632626e-07, 6.524172781532144e-07, 6.524172781532144e-07, 1.379551869780793e-05, 1.296294518213388e-05, 1.372261968332226e-05, 1.300551051134463e-05, 1.334325549178616e-05, 1.334325549178616e-05, 4.227622945083958e-03, 1.034188088141082e-02, 9.715591919422279e-03, 8.066186683027833e-03, 4.022403297098236e-03, 4.022403297098236e-03, 2.148277244510672e-01, 2.511609173315609e-01, 2.138487046507907e-01, 4.167935049455695e-05, 4.640807780725933e-01, 4.640807780725935e-01, 4.055851432665856e-03, 5.106041302045969e-03, 5.110537615497414e-02, 1.910990750200912e-01, 2.223946098526502e-02, 2.223946099572708e-02, 7.778540540347634e-02, 4.647685404084706e-02, 5.552481065904409e-02, 6.447263615582108e-02, 5.980898520648737e-02, 5.980898520648737e-02, 8.755874639607307e-02, 7.740351361037888e-03, 6.350476287558115e-03, 1.593112427931035e-02, 8.951318288552017e-03, 8.951318288552014e-03, 5.775403774263310e-03, 1.903876304537152e-01, 1.602115761656476e-01, 8.091700090126078e-02, 1.254775655189738e-01, 1.254775655189740e-01, 1.711337342216243e-02, 6.019563327214425e-02, 9.483735672262394e-02, 7.826649779050975e-02, 3.626605872049237e-01, 3.626605872049259e-01, 1.463104346840427e-02, 5.533327303144663e-03, 6.964069542008859e-03, 3.269800764250829e-01, 2.769370480065902e-02, 2.769370477248500e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.483625478910786e-06, -1.492471370871983e-06, -1.530496005081314e-06, -1.399649061946462e-06, -1.468366911304882e-06, -1.468366911304882e-06, 8.455957445424261e-04, 8.460491453936165e-04, 8.585775808757726e-04, 8.590475122610796e-04, 8.567513557231187e-04, 8.567513557231187e-04, -8.466617335366399e-03, -8.458777176526107e-03, -8.428424722110694e-03, -7.799796803399831e-03, -8.014712973854470e-03, -8.014712973854470e-03, -6.580767242590832e-02, -6.393213336589272e-02, -6.344919975505152e-03, -4.578081251270947e-02, -6.344939388969037e-02, -6.344939388969013e-02, -2.923636530292682e-05, -3.524517999920661e-05, -1.946010725922768e-03, -4.453640843986101e-06, -1.194895450194459e-05, -1.194895450194459e-05, -9.332192948230398e-04, -9.696172654568540e-04, -9.355603926290433e-04, -9.676612818881481e-04, -9.512650629995940e-04, -9.512650629995940e-04, 2.452439521049966e-03, 2.676457675696269e-03, 2.336213894715496e-03, 2.547722751688117e-03, 2.629930631000680e-03, 2.629930631000680e-03, 3.055264725706881e-02, 9.013684851033603e-02, 8.897007811407245e-03, 2.814060041047665e-02, 3.728992171452868e-02, 3.728992171452868e-02, -1.878756088177760e-02, -5.194537546772007e-02, -1.623666101710065e-02, 6.274386448374913e-03, -4.127612122104677e-02, -4.127612122104671e-02, -1.458630495504635e-06, -3.688177556165822e-06, -1.374833671933364e-05, -7.749654259676389e-03, -9.034151607611648e-06, -9.034151607595981e-06, 1.766908331712461e-01, 3.013724131079140e-02, 4.248498943480484e-02, 7.682638945119750e-02, 5.591269949168251e-02, 5.591269949168251e-02, 1.748555252203197e-01, 3.322467222684964e-02, 5.216380414256120e-02, 8.291123530635962e-02, 6.803633068175811e-02, 6.803633068175809e-02, 6.715681617881092e-02, -4.570073629830331e-02, -2.736694943574909e-02, 1.740492353988680e-03, -5.686368180576155e-03, -5.686368180576184e-03, 1.953805514240550e-02, -1.755777876705872e-03, -3.539496676776693e-03, 1.614419266702755e-02, -1.875964468096403e-02, -1.875964468096365e-02, -3.709552735864219e-05, -9.724670350366586e-08, -2.432013727221244e-06, -1.745028184112819e-02, -1.029185679063217e-05, -1.029185679074801e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
