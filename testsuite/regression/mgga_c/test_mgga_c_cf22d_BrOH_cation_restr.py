
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cf22d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.556419474731283e-01, -2.556498740753103e-01, -2.556820194845001e-01, -2.555646799250670e-01, -2.556265899142328e-01, -2.556265899142328e-01, -1.207037058640812e-01, -1.206701099236838e-01, -1.197921632436977e-01, -1.201481147066843e-01, -1.201066248378506e-01, 2.283912786222147e-02, -1.661204450612451e-01, 5.194376487984759e-02, 5.400461525799581e-02, 5.335280762846500e-02, 5.357345360437837e-02, 5.357345360437837e-02, 1.746090340692515e-02, 1.818216734471979e-02, -2.467872317225750e-01, -1.223092497291718e-02, 2.578291394431318e-03, 2.578291394431318e-03, -7.423246584818189e-03, -7.748085565304369e-03, -2.705717762961212e-02, -4.633236445616273e-03, -5.650024165066108e-03, -5.650024165066108e-03, -1.121492911804548e-01, -1.123128756281958e-01, -1.121588123117809e-01, -2.593335421575744e-01, -1.122317245414447e-01, -1.122317245414447e-01, -1.315278771818295e-01, -1.253633375910144e-01, -1.366190795558679e-01, -1.308133110209512e-01, -1.256955401896470e-01, 3.676636830994650e-02, -3.369089053388014e-02, -7.560454699112006e-02, -1.125315377426711e-02, -3.430498722505498e-02, -4.019768102420183e-02, -6.177728343629924e-02, -1.226960701497226e-01, 5.007407849001152e-03, -1.179433565969901e-01, -5.615835269733122e-02, -1.967067198195359e-02, -1.967067198195353e-02, -8.853532106175593e-03, -4.542247380991048e-03, -3.579159126145593e-03, -9.435753767143970e-02, -1.015448151942364e-02, -4.223524802338409e-03, -1.557833528586043e-01, -1.241162919000588e-01, -1.769532490055058e-01, -1.407849638978176e-01, -1.362130589865879e-01, -1.362130589865879e-01, -1.482556717451944e-01, -2.026265633229006e-02, -4.267178381069087e-02, -7.480237893200496e-02, -5.657986864781078e-02, -7.850090742302267e-02, -6.331122766664647e-02, -1.456162170913833e-01, 2.666901438509653e-02, -7.393204005150764e-02, 1.894526792475736e-02, 1.894526792475735e-02, -6.008100175926715e-02, -2.639899932469243e-02, -3.091863912514185e-02, -9.788413732680456e-03, -1.077955168130781e-01, -3.052838299264699e-02, -9.882259411675533e-03, -1.370141762243931e-03, -2.711115728722901e-03, -3.055469858275330e-02, -3.942848088933247e-03, -3.942848088933257e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cf22d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.904910659307795e-01, -6.905024066966982e-01, -6.905484960721496e-01, -6.903805382698300e-01, -6.904691807195248e-01, -6.904691807195248e-01, 8.322789497653445e-02, 8.312609306136463e-02, 8.041871970192162e-02, 8.152055371871601e-02, 8.140037757186350e-02, -2.659062228779255e-01, 4.945261568845016e-02, -3.682931970176963e-02, 7.218564778487506e-03, -1.315361719055217e-02, -8.458583426810103e-03, -8.458583426810103e-03, 7.329222201464747e-03, 4.268662978729115e-04, -1.012965089904692e-01, 3.675193312071420e-02, 4.391337829763368e-02, 4.391337829763352e-02, -9.479543747514411e-03, -9.880702162680452e-03, -3.002446108067975e-02, -5.983036482733772e-03, -7.265288008637016e-03, -7.265288008637016e-03, -2.062954707459965e-01, -2.060267273412476e-01, -2.062797637358320e-01, -5.447240199656956e-01, -2.061592953888643e-01, -2.061592953888643e-01, 1.212591380159704e-01, 1.143364805083587e-01, 1.256076620602815e-01, 1.205543317550690e-01, 1.147632664960665e-01, -2.099868861095017e-01, -1.496447819158861e-01, -2.125513619034230e-01, -1.427347034703255e-01, -1.482263853710464e-01, -1.565070163269622e-01, -1.478034235692205e-01, -1.377749056575064e-01, 5.094537104362856e-02, -1.339651031591352e-01, -2.150246766089412e-01, 2.057873135217076e-02, 2.057873135217110e-02, -1.148341563914346e-02, -5.868001840336975e-03, -4.637005610289412e-03, -1.114853845775201e-01, -1.314364980484502e-02, -5.459704446087215e-03, -2.894541193941582e-01, -2.398094588291574e-01, -2.489935208281507e-01, -2.642337612206692e-01, -2.564565140195817e-01, -2.564565140195817e-01, -2.760852943264346e-01, -1.351400280596606e-01, -1.547662598732569e-01, -2.086950275666339e-01, -1.795371154121342e-01, -2.281436949955112e-01, -1.946803135938965e-01, -6.019517897894977e-02, -2.966508130831240e-02, 6.495428212562768e-02, -8.960785144938736e-02, -8.960785144938739e-02, 3.088304789909479e-02, -2.959086604424068e-02, -3.156776538569125e-02, -1.139808282970270e-01, -1.234142341242350e-01, -1.385531388481954e-02, -1.252237314050028e-02, -1.796418044785008e-03, -3.528566018458663e-03, -1.622818043387767e-02, -5.101878061436688e-03, -5.101878061436603e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.014728662870638e-08, 1.014773664947414e-08, 1.014947598617913e-08, 1.014282475196413e-08, 1.014634571592152e-08, 1.014634571592152e-08, 1.886918445983924e-05, 1.886042892364367e-05, 1.862898374554005e-05, 1.871557552870665e-05, 1.871405957846340e-05, 6.362089844119862e-07, 3.210782586855891e-02, 1.568408892739864e-03, 1.459323217657253e-03, 1.548243136876043e-03, 1.527570396060149e-03, 1.527570396060149e-03, 6.092645922188742e-01, 6.226249810330615e-01, 2.038849627637872e-02, 2.608083493049774e-01, 4.278535663053044e-01, 4.278535663053048e-01, 1.147865216373335e-02, 1.324707371368013e-02, 5.290157919984850e-02, 2.942634863837420e-03, 7.054211724854968e-03, 7.054211724854968e-03, 6.427752481159639e-07, 6.541941951622661e-07, 6.434316341660287e-07, 5.326818062096444e-06, 6.484688699592290e-07, 6.484688699592290e-07, 2.615119468016919e-04, 2.393061581714639e-04, 2.794393199821366e-04, 2.586025871762986e-04, 2.407941067924416e-04, 1.096164314409990e-05, 2.911664389573788e-03, 6.271193944175627e-03, 5.207384911776606e-03, 3.496862542049543e-03, 2.817892104042588e-03, 9.160379155952154e-03, 8.329965826787749e+01, 2.113624482314470e-01, 1.111106677557090e+02, 1.148270925320988e-05, 3.355063049282375e-01, 3.355063049282364e-01, 8.997637900575899e+07, 2.354721369110780e-03, 3.442157899137401e-02, 4.986035763300028e+02, 4.850871375038607e+07, 1.121771796736669e-02, 7.176050778531677e-02, 4.339029671623695e-02, 6.979967781948601e-02, 5.975823663206649e-02, 5.553159801175810e-02, 5.553159801175810e-02, 7.472276303805792e-02, 7.358699067081464e-03, 5.918617009682404e-03, 1.447126344899731e-02, 8.207660394832290e-03, 1.977689188798136e-02, 3.111350169000328e-03, 3.299550339160823e+00, 1.305912307445058e-01, 2.702868788978334e-01, 9.507598306514184e-02, 9.507598306514195e-02, 6.023219410368239e-02, 5.107152662204027e-02, 6.313742212094224e-02, 5.324997005274384e-02, 2.052574447744228e+02, 2.417630122178606e-01, 6.503504605630997e-03, 3.182048911979994e-04, 5.773509156757614e-03, 2.540662520692170e-01, 1.674354061273617e-02, 1.674354062529078e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.457340477579600e-04, 2.457420144072879e-04, 2.457733365738681e-04, 2.456554886578829e-04, 2.457178230508066e-04, 2.457178230508066e-04, -1.611063960376851e-03, -1.610439081390292e-03, -1.593647511190850e-03, -1.600243667397737e-03, -1.599830205550830e-03, 1.540548685691344e-03, -2.248203342774064e-02, -2.474799157535411e-03, -5.278667352934655e-03, -4.104670730663898e-03, -4.387420627805494e-03, -4.387420627805494e-03, -6.535219902835811e-02, -6.313685819553232e-02, -7.068427068609099e-03, -4.633207538243059e-02, -6.407367370725349e-02, -6.407367370725324e-02, -2.923636584518951e-05, -3.524518152296719e-05, -1.946179671413587e-03, -4.453640961217808e-06, -1.194895510010227e-05, -1.194895510010227e-05, -9.459324449555516e-04, -9.824025722464356e-04, -9.480208207825225e-04, 3.842421290545556e-03, -9.641474624300087e-04, -9.641474624300087e-04, -5.115113177211852e-03, -4.983845000349872e-03, -5.191157496332689e-03, -5.099300172326202e-03, -4.994537208319908e-03, 2.902777278389771e-03, 3.426096770875572e-02, 5.081662969018129e-02, 2.595109324799971e-02, 3.697527479349660e-02, 3.755524152766811e-02, 3.653229833741137e-02, -4.477799758809574e-03, -5.212994456823278e-02, -3.743801507532355e-03, 5.400661382838412e-03, -4.147393144581660e-02, -4.147393144581654e-02, -3.178348036592064e-07, -3.688177762052076e-06, -1.374833771783827e-05, -1.664302097812995e-03, -1.968040916010957e-06, -9.034152588609285e-06, 1.369516308353685e-01, 7.996961762248926e-03, 1.295681890513658e-01, 4.507644892979031e-02, 2.675294232723776e-02, 2.675294232723776e-02, 9.717544373818263e-02, 3.453310455157284e-02, 5.160738711675137e-02, 7.224845604982642e-02, 6.396541340397570e-02, 1.117863521775681e-01, 4.254471185945693e-02, -5.773779796736047e-02, -2.536633232625760e-02, -8.924130546280376e-02, 2.287593606711945e-03, 2.287593606711916e-03, -4.579255438641792e-02, -1.755839360236583e-03, -3.540381496047405e-03, 4.126513358330677e-02, -4.290892271294444e-03, -1.879687091796456e-02, -3.709557789909458e-05, -9.724670385908613e-08, -2.432013737591511e-06, -1.746821008163673e-02, -1.029185760812885e-05, -1.029185760824470e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
