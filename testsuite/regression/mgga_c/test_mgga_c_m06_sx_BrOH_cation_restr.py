
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.621559550574659e-01, -1.621556448478413e-01, -1.621544499414150e-01, -1.621590355707028e-01, -1.621566067839512e-01, -1.621566067839512e-01, -1.306704992944016e-01, -1.306603656611116e-01, -1.303949503468337e-01, -1.305050145870977e-01, -1.304896846252341e-01, -6.289903129321864e-02, -1.088738312563968e-01, -2.414182965421671e-02, -1.943417870599492e-02, -2.164989940597327e-02, -2.115604966319400e-02, -2.115604966319400e-02, -4.907879238630772e-03, -6.223272834859232e-03, -1.630948303688064e-01, 2.084672863096363e-02, 9.353071587993554e-03, 9.353071587993561e-03, 7.908353229466085e-03, 8.274068496429003e-03, 3.078705329001677e-02, 4.813519085775374e-03, 5.930493837211357e-03, 5.930493837211357e-03, -8.687977240662000e-02, -8.693859344717646e-02, -8.688312963995590e-02, -1.179487442551779e-01, -8.690925706181409e-02, -8.690925706181409e-02, -1.196294182579229e-01, -1.180935956392542e-01, -1.209197617445077e-01, -1.194578720420845e-01, -1.181693092663358e-01, -5.085351244708578e-02, -4.089330671548004e-02, -4.587099389537953e-02, -3.688855769852906e-02, -4.041653039190286e-02, -4.184800829763494e-02, -6.657915731811542e-02, -1.304719570733409e-01, 9.008043013525799e-03, -1.243570860854194e-01, -6.160109910391395e-02, 2.589731468596507e-02, 2.589731468596507e-02, -1.373805464054440e-03, 4.714288230491303e-03, 3.671075971142513e-03, -8.370844677053950e-02, -1.612725288673590e-03, 4.367186375961990e-03, -4.890662251526474e-02, -4.760374890272800e-02, -6.042035534950722e-02, -4.842724289440391e-02, -4.823636162650375e-02, -4.823636162650376e-02, -4.824567764180922e-02, -3.676000914635873e-02, -4.006159646181488e-02, -4.327125429765492e-02, -4.162574632081233e-02, -6.147007284475796e-02, -4.566389614796212e-02, -9.517069742558402e-02, -1.397257510961763e-02, -6.579480230292366e-02, -2.204337936804182e-02, -2.204337936804184e-02, -6.703667811498160e-02, 3.002016581024999e-02, 3.524497426198402e-02, -2.999856076323006e-02, -1.130623787712569e-01, 3.485113520474451e-02, 1.070246698686961e-02, 1.351410915143555e-03, 2.746068555635438e-03, 3.476937225202227e-02, 4.063115568665999e-03, 4.063115568666006e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.509577765807132e-01, -1.509583427376204e-01, -1.509606830638160e-01, -1.509522957688458e-01, -1.509567155096779e-01, -1.509567155096779e-01, -7.698508124881463e-02, -7.699787833380350e-02, -7.733440264470010e-02, -7.720023169698842e-02, -7.721283541600793e-02, -6.458442770718693e-02, -1.892341373559817e-02, -6.312388157316465e-02, -6.985194917855549e-02, -6.662847515761253e-02, -6.736693602541723e-02, -6.736693602541723e-02, -4.852330231180806e-02, -4.757267279650040e-02, 2.155623312407512e-03, -3.849205063552762e-02, -4.961839127246098e-02, -4.961839127246095e-02, 1.216527936224825e-02, 1.270034801031349e-02, 3.849117936791575e-02, 7.538943176645863e-03, 9.224517812979324e-03, 9.224517812979324e-03, -1.058316212756388e-01, -1.060618797957635e-01, -1.058448500589793e-01, -1.182281157609877e-01, -1.059470323168898e-01, -1.059470323168898e-01, -5.744749705158209e-02, -5.965809134138128e-02, -5.565711741938068e-02, -5.770960179363382e-02, -5.953048217330175e-02, -5.905801403281966e-02, -4.157854877057667e-02, -5.403523026714020e-02, -3.796135405861548e-02, -4.123149066926964e-02, -4.330143027623180e-02, -5.943625335450640e-02, -1.514884731289448e-01, -5.408780088596352e-02, -1.608255811939250e-01, -6.279426411518051e-02, -2.431695955995028e-02, -2.431695955995024e-02, -1.806777580193354e-03, 7.388586086378676e-03, 5.782955816141236e-03, -1.530805401036852e-01, -2.188520747848078e-03, 6.852918971717619e-03, -6.701594058192403e-02, -6.439313182515272e-02, -6.635900859236207e-02, -6.633311845883585e-02, -6.596018868510672e-02, -6.596018868510672e-02, -6.617767073934189e-02, -3.717400807273827e-02, -4.221817601656590e-02, -5.155789378044345e-02, -4.631863310735042e-02, -5.976761892570345e-02, -5.115528366359270e-02, -2.181036706716887e-03, -4.870558045375657e-02, -3.398809554088237e-02, -3.939083827516061e-02, -3.939083827516060e-02, -4.482375583952736e-02, 3.808376710150813e-02, 3.910654378225156e-02, -3.199012892464733e-02, -1.511843575684419e-01, 1.231999675513164e-02, 1.626293436725814e-02, 2.173407213940356e-03, 4.359222837342290e-03, 1.540601616257684e-02, 6.386599955582833e-03, 6.386599955582847e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.423585235611324e-10, 1.423618324049741e-10, 1.423738551731286e-10, 1.423250360780339e-10, 1.423509892148232e-10, 1.423509892148232e-10, 2.135722746955940e-07, 2.136110960771977e-07, 2.146382980139970e-07, 2.141270365251336e-07, 2.142861028696750e-07, -6.709991115932892e-07, 8.240050350698647e-04, -3.486887014431877e-04, -1.902807141377173e-04, -2.698562871117850e-04, -2.514006765834609e-04, -2.514006765834609e-04, 4.882749059055342e-02, 2.843261533234935e-02, 1.008706238985752e-03, 3.676025181059553e-01, 2.624412039642735e-01, 2.624412039642732e-01, -7.612932689208924e+02, -6.931645926784784e+02, -6.622046232881631e+00, -2.175360851624043e+03, -1.559911220648013e+03, -1.559911220648013e+03, 8.110252594464773e-09, 1.064425937364238e-08, 8.255251949248487e-09, 1.886208259592463e-07, 9.375479594056722e-09, 9.375479594056722e-09, 2.944896292431222e-06, 2.838986836125953e-06, 3.043996654008101e-06, 2.927384978621463e-06, 2.847809210157150e-06, -8.134618964434213e-06, -3.601890282246297e-03, -1.413153324209496e-03, -4.463470936066798e-03, -4.316258527786380e-03, -3.340983964058362e-03, 1.652678724570645e-03, 2.179999668262263e+01, 1.267670342118347e-01, 2.299871819068407e+01, -1.403612574548113e-05, 6.771173067954770e-01, 6.771173067954764e-01, -1.393998963272654e+08, -2.148615016178444e+03, -1.085648133857504e+04, -8.947285575702325e+01, -7.336606481973419e+07, -4.510853048298185e+03, 2.168693043373601e-02, 8.023146085930251e-03, 1.251475443909668e-02, 1.491704050276864e-02, 1.293700365779557e-02, 1.293700365779556e-02, 2.110246147692512e-02, -7.611608041647893e-03, -6.451472889156098e-03, -2.811792673354615e-03, -5.119715346989072e-03, 4.353720009330324e-03, -1.616580924358434e-03, 3.316632007719165e-01, -1.323482160031922e-02, 8.171665347294207e-03, -2.680724642013145e-02, -2.680724642013151e-02, 2.726024536344152e-03, -7.687002730172908e+00, -2.339738799962042e+00, -3.901985576769973e-02, 4.043071885529427e+01, 7.605241603808677e-01, -2.444799721542960e+02, -3.918685637381319e+04, -1.389027661748960e+04, 7.367312170659774e-01, -6.362980138692018e+03, -6.362980138692068e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.240755855930484e-05, -1.240734520047773e-05, -1.240643820401415e-05, -1.240960172236845e-05, -1.240793829167043e-05, -1.240793829167043e-05, -4.884084125908476e-04, -4.883550064411624e-04, -4.869312160177818e-04, -4.874302810018025e-04, -4.874646237040057e-04, 6.892806450351043e-04, -9.846858117393257e-03, 6.097148079983853e-03, 5.497149748513931e-03, 5.809960378339558e-03, 5.736161957185815e-03, 5.736161957185815e-03, 3.269523351578622e-02, 3.383398230078612e-02, -7.480492075321660e-03, 1.799277933743824e-02, 2.355418639976971e-02, 2.355418639976972e-02, 2.685995925268501e-03, 2.857277415440063e-03, 7.049053238219157e-03, 1.463214438477906e-03, 2.089090412166228e-03, 2.089090412166228e-03, 1.461911747417115e-04, 1.408680115204552e-04, 1.458873153257901e-04, -1.310603480755452e-04, 1.435342546370446e-04, 1.435342546370446e-04, -1.421826253069763e-03, -1.383203035156372e-03, -1.451578556191388e-03, -1.416680385290345e-03, -1.386021290347140e-03, 1.646395104092179e-03, 1.661480688994583e-02, 1.116913086439984e-02, 1.689787169647193e-02, 1.772950940015454e-02, 1.628907054034630e-02, -7.158758529970498e-03, -2.161717292310193e-03, 1.920888426358170e-02, 6.767433385605915e-03, 2.298084315322419e-03, 1.821401537226131e-02, 1.821401537226132e-02, 2.126620771637786e-05, 1.349677470562579e-03, 3.055570221629422e-03, 3.200780863217100e-02, 1.320352619877633e-04, 2.218566022544596e-03, -6.156375134587920e-02, -1.756358865928745e-02, -3.821147588743056e-03, -3.958433446921107e-02, -3.321051414022008e-02, -3.321051414022006e-02, -5.397087513711794e-02, 2.096979811006917e-02, 2.054776615757612e-02, 1.411172844815379e-02, 1.861481471353179e-02, -7.587450226211923e-03, 1.229395947802311e-02, -5.762365145136263e-02, 2.379061122167785e-02, -2.453164940727416e-02, 2.724751341347422e-02, 2.724751341347425e-02, -1.438109102539335e-02, 6.891100224194094e-03, 7.990761559664576e-03, 3.540558058225857e-02, 1.107924994781345e-02, 1.427978195097783e-02, 2.439368651751238e-03, 4.686419808004480e-04, 1.538927408887153e-03, 1.427644533901610e-02, 2.479564826852289e-03, 2.479564826852295e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
