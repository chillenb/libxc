
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.116807515030622e-01, -1.116812685490906e-01, -1.116835924185063e-01, -1.116759411108234e-01, -1.116799460015098e-01, -1.116799460015098e-01, -6.927558552794878e-02, -6.927821016094096e-02, -6.932489510292061e-02, -6.908624164788853e-02, -6.920268389039635e-02, -6.920268389039635e-02, -4.301313410194445e-02, -4.276238490964485e-02, -3.622082762315092e-02, -3.492915228472612e-02, -3.558780043613999e-02, -3.558780043613999e-02, -5.176273987587316e-03, -6.487507584084121e-03, -8.196631395803128e-02, 1.683621851985244e-02, 6.821013757533519e-03, 6.821013757533533e-03, 7.924582951493345e-03, 8.304908655976632e-03, 3.124134858840747e-02, 4.949404269487948e-03, 6.031627752440982e-03, 6.031627752440985e-03, -8.688635724801209e-02, -8.694659965399326e-02, -8.688962865830370e-02, -8.694275639427222e-02, -8.691664956902612e-02, -8.691664956902612e-02, -4.704286495931759e-02, -4.822331569707335e-02, -4.661631547848866e-02, -4.774679322172449e-02, -4.789425882670886e-02, -4.789425882670886e-02, -4.045035939169847e-02, -5.595973128071101e-02, -3.831332670178944e-02, -5.489551707210572e-02, -4.191997857871765e-02, -4.191997857871765e-02, 3.508552329244027e-02, 8.029906886320218e-03, 3.619421401413112e-02, -8.619042197116690e-02, 2.420845983142876e-02, 2.420845983142876e-02, 4.141076373272825e-03, 4.993530598646107e-03, 3.791517536927538e-03, 3.680264379179395e-02, 4.600428105779182e-03, 4.600428105779182e-03, -5.381987199734564e-02, -4.962490194540169e-02, -5.077624966248803e-02, -5.194094457949935e-02, -5.132971720416848e-02, -5.132971720416849e-02, -5.714075732637468e-02, -3.595095919309969e-02, -3.918418938358646e-02, -4.329143695758518e-02, -4.097525115279361e-02, -4.097525115279361e-02, -5.725275730957154e-02, -3.977084823720767e-03, -1.380945705236541e-02, -2.571116905092177e-02, -2.075635676213291e-02, -2.075635676213291e-02, -3.118789409962164e-02, 3.026422911908994e-02, 3.563146095157761e-02, -2.840444584328489e-02, 3.399601153791256e-02, 3.399601153791257e-02, 1.130045172339152e-02, 1.588947996549910e-03, 2.791460886831311e-03, 3.439834759958511e-02, 4.228488897729248e-03, 4.228488897729255e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.374192166904347e-01, -1.374202595561389e-01, -1.374175395788090e-01, -1.374018535161191e-01, -1.374111239719240e-01, -1.374111239719240e-01, -1.399128417733809e-01, -1.399138898190254e-01, -1.399095005661748e-01, -1.396017157245959e-01, -1.397629629092773e-01, -1.397629629092773e-01, -8.886000496630730e-02, -8.878184825333432e-02, -8.781483845341601e-02, -8.524766971852264e-02, -8.606765653585438e-02, -8.606765653585438e-02, -4.917097022207424e-02, -4.827681495268231e-02, -1.131657163865637e-01, -5.127582700061743e-02, -5.553236450677963e-02, -5.553236450677965e-02, 1.216866757561021e-02, 1.270647909843204e-02, 3.736702040649439e-02, 7.574539863129582e-03, 9.249035729738021e-03, 9.249035729738019e-03, -1.066652162868746e-01, -1.068863636905836e-01, -1.066612096188671e-01, -1.068570297298594e-01, -1.067846475694362e-01, -1.067846475694362e-01, -7.031309207561806e-02, -6.845732437065238e-02, -6.920218444352906e-02, -6.736246296534677e-02, -6.994237773571396e-02, -6.994237773571396e-02, -7.402318311191791e-02, -7.978933012511233e-02, -7.737016379338603e-02, -7.999187926132126e-02, -7.568876223536958e-02, -7.568876223536958e-02, -5.967087363354274e-03, -5.663358653213681e-02, 6.400213221840149e-04, -1.088590369747645e-01, -3.182758498400343e-02, -3.182758498400340e-02, 6.064542468586872e-03, 7.461501132384509e-03, 5.814121113944397e-03, 2.589571034103634e-02, 6.912232929470683e-03, 6.912232929470684e-03, -6.866086877836920e-02, -6.987482923874017e-02, -7.002391997158869e-02, -6.969311924204559e-02, -6.991570367532927e-02, -6.991570367532929e-02, -6.676642204605918e-02, -4.103454969868927e-02, -4.980477514638860e-02, -6.327557591775626e-02, -5.661134279372756e-02, -5.661134279372756e-02, -8.240049780953060e-02, -5.653127867103700e-02, -4.981810082872269e-02, -5.137173789036054e-02, -4.406722370620626e-02, -4.406722370620622e-02, -5.108662768962362e-02, 3.761392645949346e-02, 3.647621107739090e-02, -5.425136368896225e-02, 4.868411083054441e-03, 4.868411083054567e-03, 1.634777751627960e-02, 2.244635135404017e-03, 4.372072733468155e-03, 1.120773334937636e-02, 6.429181134552498e-03, 6.429181134552509e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.653656792636467e-11, -3.653028194275362e-11, -3.653621616541078e-11, -3.663039305106085e-11, -3.657621372021553e-11, -3.657621372021553e-11, 1.507784445260598e-06, 1.507855395041965e-06, 1.507713195829545e-06, 1.488987191379727e-06, 1.499341601530313e-06, 1.499341601530313e-06, 3.390105578957052e-03, 3.370289831262376e-03, 2.880844075946969e-03, 2.568853703373563e-03, 2.689580685250675e-03, 2.689580685250675e-03, 1.037834555739216e-01, 9.363893694807891e-02, 2.855370437363591e-03, 7.942597979327305e-01, 5.073844894106596e-01, 5.073844894106595e-01, -7.610659864722139e+02, -6.927293543270689e+02, -5.485289006969747e+00, -2.172592449222255e+03, -1.557761126448170e+03, -1.557761126448170e+03, 1.380089293429503e-08, 1.631097487499549e-08, 1.382987340787919e-08, 1.604848514695609e-08, 1.511325580417539e-08, 1.511325580417539e-08, -4.343428706696497e-06, -4.979343514185496e-06, -4.786762487089584e-06, -5.391911279849541e-06, -4.466907060052760e-06, -4.466907060052760e-06, 3.697628651219238e-03, 9.187662979348111e-03, 7.622832143491762e-03, 1.626623091417463e-02, 3.983705544540986e-03, 3.983705544540986e-03, 1.102905719649197e+00, 1.750215256949713e-01, 1.233624605592506e+00, 5.479520131391349e-05, 1.100435246477675e+00, 1.100435246477674e+00, -3.156050059809004e+03, -2.141999971669182e+03, -1.083277071125819e+04, 1.008426889345485e+00, -4.493278909672315e+03, -4.493278909672324e+03, 2.587656686513287e-02, 1.273123757504626e-02, 1.620966126387587e-02, 1.985647719226341e-02, 1.792649562094792e-02, 1.792649562094791e-02, 2.549601590908289e-02, -6.188374056210402e-03, -3.554953163144146e-03, 3.058900953900038e-03, -7.748720639654484e-04, -7.748720639654484e-04, 7.356453185077859e-03, 3.756683974027138e-02, 5.116191323443890e-03, 1.264983972118044e-02, -3.186966662121796e-03, -3.186966662121845e-03, -8.902731256091477e-04, -7.145765019585959e+00, -1.227811721412413e+00, 2.435871439415553e-02, 1.878319144950636e+00, 1.878319144950626e+00, -2.398101305964693e+02, -3.910460979105721e+04, -1.388570322356621e+04, 1.496191873061699e+00, -6.345833693806440e+03, -6.345833693806486e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.957418083415615e-05, 1.957338118114756e-05, 1.957350532050925e-05, 1.958546703889914e-05, 1.957867536715487e-05, 1.957867536715487e-05, -2.214244112597324e-04, -2.213912666293508e-04, -2.201406829062278e-04, -2.170485598858959e-04, -2.189185932684593e-04, -2.189185932684593e-04, -5.185244267249322e-03, -5.153280986910995e-03, -4.214464010547917e-03, -3.812692971653998e-03, -3.992280031340259e-03, -3.992280031340259e-03, 2.664846347176131e-02, 2.623371468596333e-02, -5.360525992937438e-03, 7.793495288590705e-03, 1.247666261039947e-02, 1.247666261039948e-02, 2.663453664818362e-03, 2.813409883892870e-03, 6.147858122969593e-03, 1.304019075456635e-03, 1.948521580744162e-03, 1.948521580744159e-03, 1.380174325717098e-04, 1.327627532592102e-04, 1.378813002933431e-04, 1.332390914901863e-04, 1.353105103711367e-04, 1.353105103711367e-04, 1.085285675831694e-03, 1.172425667334457e-03, 1.142096108731921e-03, 1.225558558565135e-03, 1.104670681613348e-03, 1.104670681613348e-03, 6.328326284363433e-04, -7.345472552601701e-03, -3.218778658970823e-03, -8.615571764184822e-03, 1.536062817869382e-04, 1.536062817869382e-04, 8.245538949868333e-03, 1.529286151653238e-02, 7.991123086274587e-03, -1.152984566190714e-03, 1.296596897210661e-02, 1.296596897210662e-02, 6.305004288283612e-04, 1.041980176549089e-03, 2.677025752189949e-03, 7.814391728223246e-03, 1.764376259421299e-03, 1.764376259421300e-03, -4.071006490176526e-02, -2.077316199603016e-02, -2.771626328889596e-02, -3.395490226063677e-02, -3.080384836715573e-02, -3.080384836715575e-02, -1.837885382095181e-02, 1.806529319520902e-02, 1.507622839810979e-02, 4.654258761178569e-03, 1.093949805253315e-02, 1.093949805253315e-02, -6.477804475372424e-03, 1.825387192174551e-02, 1.626959574865618e-02, 4.227885940713504e-03, 1.391663240039787e-02, 1.391663240039790e-02, 8.983037500580250e-03, 6.454829228420756e-03, 6.623358374269693e-03, 4.111514540625550e-03, 1.062315061880949e-02, 1.062315061880951e-02, 1.853564160995726e-03, 1.808084968316928e-04, 1.445581420239486e-03, 1.207768691829544e-02, 2.095316851486792e-03, 2.095316851486797e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
