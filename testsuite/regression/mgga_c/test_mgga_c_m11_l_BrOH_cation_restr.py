
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.758832808426456e-01, -3.758960053438418e-01, -3.759496696669443e-01, -3.757613665315233e-01, -3.758604260822266e-01, -3.758604260822266e-01, 7.250842947984376e-02, 7.242386053554703e-02, 7.023916881474407e-02, 7.159520132998491e-02, 7.124872753844405e-02, 7.124872753844405e-02, 5.920937376393962e-02, 6.030213617945963e-02, 8.773528855399020e-02, 9.299064000815215e-02, 9.025084913694434e-02, 9.025084913694434e-02, 8.531107319956679e-02, 8.504786805880393e-02, -3.243301344008907e-02, 2.040262486277904e-02, 5.342858791440414e-02, 5.342858791440414e-02, -1.667192234557865e-02, -1.739495352408255e-02, -5.677192376420737e-02, -1.042711775208058e-02, -1.270643967919473e-02, -1.270643967919473e-02, -3.435311992754058e-01, -3.453519091528351e-01, -3.436492699350173e-01, -3.452550409529569e-01, -3.444351031659605e-01, -3.444351031659605e-01, 1.640813930569196e-01, 1.524111571721232e-01, 1.758614242685110e-01, 1.656852017910515e-01, 1.517184099326134e-01, 1.517184099326134e-01, -5.222036497287443e-02, -7.990183250185603e-02, -9.813851782403515e-03, -5.856007833207599e-02, -6.412328232409263e-02, -6.412328232409263e-02, -3.928711294840419e-02, 6.778054615750413e-02, -4.539823861523144e-02, -1.006462792548245e-01, 8.042507212963857e-05, 8.042507212966708e-05, -8.296008356557786e-03, -1.022319459594537e-02, -8.051663950906852e-03, -5.918434446057142e-02, -9.502398612432312e-03, -9.502398612432314e-03, -1.340566964587608e-01, -1.208420362825083e-01, -1.244931096787923e-01, -1.282533855044220e-01, -1.262645482267545e-01, -1.262645482267545e-01, -1.008694401542331e-01, -1.288751983470484e-02, -6.777244624344071e-02, -9.715394528992875e-02, -8.606532088956732e-02, -8.606532088956731e-02, -7.967201041273329e-02, 1.017117478741460e-01, 1.046251434630176e-01, 3.984799413017334e-02, 7.969092924518564e-02, 7.969092924518555e-02, 1.847308103773747e-02, -5.569761439995837e-02, -6.195743712742200e-02, 6.474443846703403e-04, -4.335082850697425e-02, -4.335082850697407e-02, -2.217074828972537e-02, -3.085849127123081e-03, -6.103718987214791e-03, -4.542183441491920e-02, -8.870694951589164e-03, -8.870694951589209e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.015007186349854e+00, -1.015015468107993e+00, -1.015060082011891e+00, -1.014937838767189e+00, -1.015000729343544e+00, -1.015000729343544e+00, -5.528253981306769e-01, -5.529222272995693e-01, -5.555518166895510e-01, -5.555239888839005e-01, -5.550849638666704e-01, -5.550849638666704e-01, -1.422668821521896e-01, -1.415238171225295e-01, -1.083699996562342e-01, -1.171258418768329e-01, -1.160568008217850e-01, -1.160568008217850e-01, 3.678398914332914e-02, 2.031110875196883e-02, -1.748595274588257e-01, 1.193970108910912e-01, 1.085394058618394e-01, 1.085394058618392e-01, -2.121063981259358e-02, -2.208894740980591e-02, -5.617575801474432e-02, -1.345066252131897e-02, -1.630681349763439e-02, -1.630681349763438e-02, -6.521161737459897e-01, -6.531879860200439e-01, -6.522221173858134e-01, -6.531660930671096e-01, -6.526293511679452e-01, -6.526293511679452e-01, -4.360223179446117e-01, -4.634032653226924e-01, -4.139455388011762e-01, -4.401892978074469e-01, -4.611688733830442e-01, -4.611688733830442e-01, -2.638781223081527e-01, -6.596976723576392e-02, -2.652015882156846e-01, -1.658061001989898e-01, -2.386696534126207e-01, -2.386696534126207e-01, 4.543996208797601e-02, 1.443753426474212e-01, 2.889283863266079e-02, -2.509713838873704e-01, 1.075264959447015e-01, 1.075264959447003e-01, -1.074955856552114e-02, -1.319456671611842e-02, -1.041502784784784e-02, -2.806630907447611e-02, -1.226629175158780e-02, -1.226629175158780e-02, -2.020133427209946e-01, -1.445395546747866e-01, -1.597318515912384e-01, -1.759756625352631e-01, -1.673678239270056e-01, -1.673678239270056e-01, -1.969811229413519e-01, -3.239879818633147e-01, -2.425929839855430e-01, -1.246130425980897e-01, -1.800129287437237e-01, -1.800129287437237e-01, -9.678933372801252e-02, 8.316219754080953e-02, -3.697500341895685e-02, -2.093381925007111e-01, -1.528736898506267e-01, -1.528736898506272e-01, -2.917845970192832e-01, -5.624521098173058e-02, -5.079322963220248e-02, -2.265355597162502e-01, 2.252670235911541e-02, 2.252670235911792e-02, -2.794850974411857e-02, -4.045615490731043e-03, -7.939699476773390e-03, 1.510112451080752e-02, -1.146173776659261e-02, -1.146173776659289e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.856715985635018e-10, -3.857068852081144e-10, -3.858309244839886e-10, -3.853086228708543e-10, -3.855868739879363e-10, -3.855868739879363e-10, 3.196098983031736e-06, 3.195082388269833e-06, 3.165658527619037e-06, 3.155034619262788e-06, 3.166645613586692e-06, 3.166645613586692e-06, 1.353810123679437e-02, 1.349344534515663e-02, 1.191367737026012e-02, 1.120935367814583e-02, 1.152211649264201e-02, 1.152211649264201e-02, 1.447713520719379e+00, 1.503864533608163e+00, 9.258084017093349e-03, 1.155667368098129e+00, 1.466669916929612e+00, 1.466669916929608e+00, 4.351437043517935e-02, 5.126828512873622e-02, 2.629502403949912e-01, 1.537395855251377e-02, 3.213503939091283e-02, 3.213503940170660e-02, -1.132602206155228e-06, -1.153446047753378e-06, -1.133661996031724e-06, -1.152052029915488e-06, -1.143066242119906e-06, -1.143066242119906e-06, 2.599559390128937e-05, 2.431944633293578e-05, 2.593842048093481e-05, 2.449527174889857e-05, 2.503964407545140e-05, 2.503964407545140e-05, 2.835219556513220e-03, -1.713602701151483e-02, 1.673215340945701e-02, 4.757519374846112e-03, 2.483403589169156e-04, 2.483403589169156e-04, 6.437798146998639e-01, 5.739531803325950e-01, 6.555701051679521e-01, -1.345821966411800e-05, 1.239844076197019e+00, 1.239844076197018e+00, 1.501607990337012e-02, 1.890056161165967e-02, 1.891179551717782e-01, 6.374677109784056e-01, 8.230418022611130e-02, 8.230418026482943e-02, -1.539645820367918e-01, -8.590281160469089e-02, -1.046860684302300e-01, -1.239907655106396e-01, -1.138399606227305e-01, -1.138399606227305e-01, -1.712901912193979e-01, 1.154479566426532e-02, -2.120190221293244e-03, -2.669282784371893e-02, -1.163314851677067e-02, -1.163314851677067e-02, -8.179270108529871e-03, 4.019076765447605e-01, 3.208858502351956e-01, 1.527787293553121e-01, 2.424394576918641e-01, 2.424394576918643e-01, 3.076410286762909e-02, 2.149402662836614e-01, 3.299163974359473e-01, 1.392283441930613e-01, 1.118639164723134e+00, 1.118639164723140e+00, 5.405653072906957e-02, 2.049035231360017e-02, 2.578281787525372e-02, 1.021503673010791e+00, 1.024878746422566e-01, 1.024878745379911e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.468586610598943e-04, 4.468734111616635e-04, 4.469362559299632e-04, 4.467183157691539e-04, 4.468328349492099e-04, 4.468328349492099e-04, 3.319118667880468e-03, 3.320747575285374e-03, 3.364784937414197e-03, 3.358378540165177e-03, 3.354631962705002e-03, 3.354631962705002e-03, -1.447462025120784e-02, -1.449496036665021e-02, -1.484234039071636e-02, -1.317216976898472e-02, -1.373116403271815e-02, -1.373116403271815e-02, -1.142870285619829e-01, -1.098161884829874e-01, -1.355906726295088e-02, -1.104924084831954e-01, -1.308076218826771e-01, -1.308076218826769e-01, -1.306191828227729e-04, -1.574105990440118e-04, -8.197794231891334e-03, -1.993491696208160e-05, -5.344997479755613e-05, -5.344997479755613e-05, 7.858035669361033e-03, 7.948110011622971e-03, 7.863675966998294e-03, 7.943119349211202e-03, 7.902724170598202e-03, 7.902724170598202e-03, 7.714120220114691e-03, 8.437959373336964e-03, 7.272944581438790e-03, 7.935633770172822e-03, 8.329598839777358e-03, 8.329598839777358e-03, 8.034755224555092e-02, 1.685392584500536e-02, 5.824737453313190e-02, 4.275750793628245e-02, 7.687035848476431e-02, 7.687035848476431e-02, -6.041472997807878e-02, -1.043991457948309e-01, -5.414919444034899e-02, 7.163128471657867e-03, -1.098113847434465e-01, -1.098113847434477e-01, -6.531445659245377e-06, -1.650989064166317e-05, -6.151601899912534e-05, -2.951091782693408e-02, -4.042729359374170e-05, -4.042729359375736e-05, 6.324053905675289e-01, 3.386000284363773e-01, 4.189649919644114e-01, 5.021762117746272e-01, 4.583096243089507e-01, 4.583096243089507e-01, 5.046168058374993e-01, 1.220187315243092e-01, 1.170453767853864e-01, 9.828828157309510e-02, 1.019694130482818e-01, 1.019694130482818e-01, 2.050386174904825e-02, -7.958100525748030e-02, -4.115679571376022e-02, 4.905722493855676e-02, 1.234843359334630e-02, 1.234843359334646e-02, 9.162381097176103e-02, -7.430353048979456e-03, -1.438461904766990e-02, 1.171104514036429e-01, -6.317337497640663e-02, -6.317337497640686e-02, -1.655677607836549e-04, -4.355895369497169e-07, -1.088976961002108e-05, -5.992092835955301e-02, -4.605441866943581e-05, -4.605441866940097e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
