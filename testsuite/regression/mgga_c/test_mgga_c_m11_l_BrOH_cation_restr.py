
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.485409417286102e-01, -1.485385194703237e-01, -1.485287785900541e-01, -1.485646232592192e-01, -1.485457014097051e-01, -1.485457014097051e-01, -1.329964982083516e-01, -1.329583157168857e-01, -1.319659620714793e-01, -1.323669459783693e-01, -1.323202043133642e-01, 1.279127904212424e-01, -2.400060031914139e-01, 1.904287917889415e-01, 1.976907240383784e-01, 1.947892775852836e-01, 1.955962198637760e-01, 1.955962198637760e-01, 9.013070372014549e-02, 9.118056994226495e-02, -4.216932117966205e-01, 2.665743142348252e-02, 6.152809112851544e-02, 6.152809112851544e-02, -1.667192142933053e-02, -1.739495129416562e-02, -5.675529424486308e-02, -1.042711694193904e-02, -1.270643779921275e-02, -1.270643779921275e-02, -3.442099443721104e-01, -3.460350841038348e-01, -3.443145523677489e-01, -8.824524369661768e-02, -3.451231742755153e-01, -3.451231742755153e-01, -1.511332383140343e-01, -1.421438089757341e-01, -1.588427066238823e-01, -1.500673091477302e-01, -1.426207217183611e-01, 1.622515313200782e-01, -4.825135239716484e-02, -1.117204591707662e-01, 1.681126495967583e-02, -4.993764489429198e-02, -6.377772245683024e-02, -6.511003197740234e-02, -3.108605563225812e-01, 7.121116103044968e-02, -3.056626109296648e-01, -1.084203834912450e-01, 2.112935155210981e-03, 2.112935155211053e-03, -2.743244552524226e-02, -1.022319291171694e-02, -8.051662223548195e-03, -2.654180905726231e-01, -3.145178232767236e-02, -9.502395565121233e-03, -1.640516454223263e-01, -1.368953171095897e-01, -6.002702149560944e-02, -1.520674682200348e-01, -1.480069502339071e-01, -1.480069502339071e-01, -1.564116729820390e-01, -1.156946790032915e-02, -6.812958310362260e-02, -1.032873979261660e-01, -8.849050985171743e-02, -6.000189046701004e-02, -1.027611378344199e-01, -2.465900397398985e-01, 1.152268987384625e-01, -8.557520630974579e-02, 9.688887167836605e-02, 9.688887167836595e-02, -6.621317239465536e-02, -5.569110392716115e-02, -6.190030351990686e-02, 1.750412357816196e-02, -2.810723568839291e-01, -4.273920162270561e-02, -2.217065860420843e-02, -3.085849093881019e-03, -6.103718910448414e-03, -4.511773314305334e-02, -8.870692870618846e-03, -8.870692870618891e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.333929399283543e-02, -2.333198884479278e-02, -2.330246838940457e-02, -2.341065117739415e-02, -2.335352502878610e-02, -2.335352502878610e-02, 9.916908522272343e-02, 9.895597801440872e-02, 9.334523832870834e-02, 9.561359125770401e-02, 9.536746097648040e-02, -6.533331145863016e-01, 2.230257255806185e-01, -1.960313667280142e-02, 6.878877027911220e-02, 2.831045475518278e-02, 3.768864466821146e-02, 3.768864466821146e-02, 5.111355394484791e-02, 3.737406077104307e-02, 9.501034516147791e-03, 1.500304913523139e-01, 1.427714309557489e-01, 1.427714309557483e-01, -2.121063383374024e-02, -2.208893286605940e-02, -5.607068716239426e-02, -1.345065721107107e-02, -1.630680119661605e-02, -1.630680119661605e-02, -6.543409929373647e-01, -6.554108236285764e-01, -6.544019025494610e-01, -2.659504194725984e-02, -6.548763868634666e-01, -6.548763868634666e-01, 2.261501816268799e-01, 1.999205000029342e-01, 2.455567751401229e-01, 2.232395661643724e-01, 2.014391858993665e-01, -4.654507229846699e-01, -3.200809703351982e-01, -1.711041585888378e-01, -3.536334157532963e-01, -3.099057561263858e-01, -2.944973619979291e-01, -7.827837599973339e-02, -2.610342216238449e-01, 1.591227824201759e-01, -2.684207770796735e-01, -4.908359600178088e-01, 1.182702295927198e-01, 1.182702295927186e-01, -3.557120591561934e-02, -1.319455567475206e-02, -1.041501650595420e-02, -2.735772814667740e-01, -4.067955334782970e-02, -1.226627176572359e-02, -1.950966206571082e-01, -1.556825773692017e-01, -1.549718500532852e-01, -1.787258264136975e-01, -1.728138717873806e-01, -1.728138717873806e-01, -1.865093098619869e-01, -3.300333252397090e-01, -2.532311361000624e-01, -1.450471129641758e-01, -1.953692982541304e-01, -3.564485680844548e-02, -2.162980569246586e-01, 5.994614217124016e-03, -1.576702087599526e-02, 1.272475842308688e-01, -1.458166420634328e-01, -1.458166420634334e-01, 2.948126219264564e-02, -5.620398755134066e-02, -5.043680661301011e-02, -2.758630561735807e-01, -2.513902590455246e-01, 2.610716750054766e-02, -2.794792639048263e-02, -4.045615271212972e-03, -7.939698971696428e-03, 1.689893452194727e-02, -1.146172411170577e-02, -1.146172411170606e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.632785931958352e-08, -1.632887466684516e-08, -1.633285066772249e-08, -1.631783628623111e-08, -1.632577821432273e-08, -1.632577821432273e-08, 3.439395260141920e-05, 3.437564027937820e-05, 3.389122968870404e-05, 3.407447515300419e-05, 3.406897844641540e-05, 1.158219577450309e-06, 6.335719274896931e-02, 3.096864657323520e-03, 2.929250161843575e-03, 3.083276391065896e-03, 3.047465173299932e-03, 3.047465173299932e-03, 1.272899594139000e+00, 1.290258392938154e+00, 4.328508495221869e-02, 6.565001575157835e-01, 9.849126958951204e-01, 9.849126958951214e-01, 4.243641402779516e-02, 4.896347509404581e-02, 1.883353920858164e-01, 1.089194880188049e-02, 2.609982961758769e-02, 2.609982961758769e-02, -1.125796530484029e-06, -1.146559266151388e-06, -1.126989554609972e-06, -9.335559364898137e-06, -1.136148442319401e-06, -1.136148442319401e-06, 4.927801932139441e-04, 4.489560967065618e-04, 5.281946703960789e-04, 4.870658973614364e-04, 4.518686412967622e-04, 2.057036552881231e-05, 1.952683086111595e-03, -1.039108360017988e-02, 8.968137394877224e-03, 2.062485279441793e-03, 1.739746825018546e-04, 5.655553855192239e-04, 2.496262468044299e+02, 4.830056788062161e-01, 3.406185333918140e+02, -3.707755078598945e-06, 8.963428875887582e-01, 8.963428875887545e-01, 3.331217918103908e+08, 8.716254664320229e-03, 1.273787441245336e-01, 1.663240287559304e+03, 1.795218832728846e+08, 4.151472384710913e-02, -1.420391978495810e-01, -8.019795145795990e-02, -1.315997976740244e-01, -1.149242523241682e-01, -1.056984148644297e-01, -1.056984148644297e-01, -1.461793012811423e-01, 1.097555823007031e-02, -1.976008308556913e-03, -2.424681002751611e-02, -1.066668944957669e-02, -2.570208243262238e-02, -4.406371299592793e-03, 6.965340170967631e+00, 2.615596145648341e-01, 5.103264512956102e-01, 1.836995297007763e-01, 1.836995297007766e-01, 1.082772735473066e-01, 1.823608613273654e-01, 2.196399348250163e-01, 9.472642021900464e-02, 6.331237103686786e+02, 7.457263998073197e-01, 2.402814927862967e-02, 1.178338090510630e-03, 2.137505006115314e-02, 7.937168909930620e-01, 6.196389770662974e-02, 6.196389775309136e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.877377683536344e-05, -7.877855240256051e-05, -7.879757294452498e-05, -7.872689291252154e-05, -7.876424899422013e-05, -7.876424899422013e-05, -1.831262991228983e-03, -1.829820350889537e-03, -1.791594466283541e-03, -1.806789732927133e-03, -1.805489522895305e-03, 4.790968272391924e-03, -4.694846629023910e-02, -5.789279144123228e-04, -6.638771945978910e-03, -4.101971240634389e-03, -4.716761618712531e-03, -4.716761618712531e-03, -1.121993109873335e-01, -1.067513866933026e-01, -1.948622250163354e-02, -1.104355920708844e-01, -1.301486660613444e-01, -1.301486660613442e-01, -1.306191827365214e-04, -1.574105988022330e-04, -8.197777771197238e-03, -1.993491694318717e-05, -5.344997470158714e-05, -5.344997470158714e-05, 7.881657113926344e-03, 7.971871134348271e-03, 7.886828114183843e-03, -9.961341246019642e-04, 7.926662696465333e-03, 7.926662696465333e-03, -7.550521024795348e-03, -7.042291528515731e-03, -7.911524053023198e-03, -7.490830076575242e-03, -7.075662056479487e-03, 8.880886336331675e-03, 1.056146704552138e-01, 9.620079252979533e-02, 9.730602439206375e-02, 1.116063592132468e-01, 1.029524420237454e-01, 2.392708364179602e-03, -5.940250391923894e-02, -1.041628155253790e-01, -5.339855327509498e-02, 1.847388454101901e-02, -1.098183568421604e-01, -1.098183568421615e-01, -6.715797849784415e-06, -1.650989060846243e-05, -6.151601883861242e-05, -2.958252870171853e-02, -4.156409658393876e-05, -4.042729343593095e-05, 7.297441140680567e-01, 3.852542701473791e-01, 2.261611259138759e-01, 5.756819221395982e-01, 5.243052889663290e-01, 5.243052889663290e-01, 6.908009341377735e-01, 1.256751825132044e-01, 1.240178580845271e-01, 1.193678847221752e-01, 1.138375211672948e-01, -2.557677614971240e-02, 8.432072795181507e-02, -1.555047436725611e-01, -3.603596343580164e-02, -1.344437265919588e-01, 2.912672946561840e-02, 2.912672946561857e-02, -4.835646755487402e-02, -7.430346780446588e-03, -1.438456235291671e-02, 1.718350527441434e-01, -6.235597040409820e-02, -6.317547805312508e-02, -1.655677528008818e-04, -4.355895368921531e-07, -1.088976960834555e-05, -5.992179235315565e-02, -4.605441853793672e-05, -4.605441853790188e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
