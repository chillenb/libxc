
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rmggac_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.624483484625766e-01, -1.624481803825175e-01, -1.624475598834752e-01, -1.624500400855312e-01, -1.624487234336141e-01, -1.624487234336141e-01, -1.106479396368744e-01, -1.106481612341629e-01, -1.106544849713931e-01, -1.106545127159782e-01, -1.106515516782650e-01, -2.344382324508711e-02, -6.667957783900945e-02, -1.903848934337702e-02, -1.848623083923402e-02, -1.873511186006935e-02, -1.867872079644436e-02, -1.867872079644436e-02, -1.394704026957986e-02, -1.414608825422232e-02, -7.024383714320553e-02, -1.053113682889921e-02, -1.197087882545875e-02, -1.197087882545875e-02, -3.752969608554552e-04, -4.043342295309966e-04, -3.006770894735076e-03, -1.690554397653762e-04, -2.423674805307684e-04, -2.423674805307684e-04, -2.638748628300914e-02, -2.639582654344771e-02, -2.638796582272888e-02, -1.173456429292593e-01, -2.639166675215895e-02, -2.639166675215895e-02, -9.448725684055255e-02, -9.470818698982013e-02, -9.432363283141063e-02, -9.452038295872456e-02, -9.468831488379031e-02, -2.245106115096360e-02, -2.194107103768985e-02, -2.307883720109014e-02, -2.103684193380526e-02, -2.186504758504402e-02, -2.216299935947394e-02, -6.414849509034831e-02, -2.680106516714993e-02, -1.259698489983484e-02, -2.563080740841822e-02, -2.439951112505812e-02, -9.243807626673817e-03, -9.243807626673817e-03, -1.860241096056923e-03, -1.612449521113991e-04, -1.433344975083342e-04, -2.017261660434346e-02, -2.133884101010272e-03, -1.655366233430307e-04, -2.382863708468445e-02, -2.356680477191464e-02, -5.221495956167680e-02, -2.373437886717115e-02, -2.369617165436425e-02, -2.369617165436425e-02, -2.371386260334273e-02, -2.106617976452838e-02, -2.187346278504973e-02, -2.264947272640658e-02, -2.225670021742472e-02, -6.101203980612735e-02, -2.296077862260221e-02, -4.213667000077401e-02, -1.625478537067641e-02, -5.182469190109942e-02, -1.772508998369475e-02, -1.772508998369475e-02, -5.777448781266745e-02, -2.872884982296581e-03, -3.922013656692821e-03, -1.945525937830211e-02, -2.339852437257838e-02, -6.580397726471755e-03, -5.420728841374601e-04, -2.472863204531316e-05, -8.288757437547114e-05, -6.270602045790453e-03, -1.550602435844347e-04, -1.550602435844338e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rmggac_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.589018502304037e-01, -1.589005324366000e-01, -1.588952568371897e-01, -1.589147531913953e-01, -1.589044590118002e-01, -1.589044590118002e-01, -1.211569917371516e-01, -1.211568960111568e-01, -1.211547217032359e-01, -1.211583014422932e-01, -1.211548667328374e-01, -3.114363894937539e-02, -7.523022026548340e-02, -2.847892672865572e-02, -2.821448137945435e-02, -2.833445215453768e-02, -2.830878144928512e-02, -2.830878144928512e-02, -2.231841256962120e-02, -2.249671121410429e-02, -7.881030433428507e-02, -1.829022228973324e-02, -2.018499070769164e-02, -2.018499070769164e-02, -7.337320155192212e-04, -7.898678877794071e-04, -5.643015882912195e-03, -3.329335375870210e-04, -4.760242761569150e-04, -4.760242761569150e-04, -2.932656780630637e-02, -2.931642952224867e-02, -2.932598359122889e-02, -1.036377220864415e-01, -2.932149004718513e-02, -2.932149004718513e-02, -1.045374311550455e-01, -1.047547510932855e-01, -1.043736894793063e-01, -1.045707216079888e-01, -1.047349176577373e-01, -3.067260742675817e-02, -2.752305471424596e-02, -2.690879010150292e-02, -2.771406347289450e-02, -2.739164869066523e-02, -2.743022878721703e-02, -7.138947527831116e-02, -3.189723862406022e-02, -2.113477039907211e-02, -3.058655765483580e-02, -2.960164736615631e-02, -1.632886767740634e-02, -1.632886767740633e-02, -2.413229088925219e-03, -3.176264269581383e-04, -2.831761145935655e-04, -2.440592968821691e-02, -2.762741133255569e-03, -3.264176337618376e-04, -2.546904699222416e-02, -2.580784260413898e-02, -2.848104632947292e-02, -2.559412581291790e-02, -2.564385196065330e-02, -2.564385196065330e-02, -2.545204155808438e-02, -2.725205598506111e-02, -2.691870486304309e-02, -2.641750947746392e-02, -2.669370380548504e-02, -6.657531200603592e-02, -2.727780163776283e-02, -4.884338736841224e-02, -2.493218604294192e-02, -5.944683377055767e-02, -2.582581034909549e-02, -2.582581034909549e-02, -6.573551223565786e-02, -5.398635366571329e-03, -7.301413459667188e-03, -2.604692670341941e-02, -2.807686774983011e-02, -1.198753287528102e-02, -1.053208926394852e-03, -4.917580835009958e-05, -1.641538859364501e-04, -1.145662968069826e-02, -3.060109201034769e-04, -3.060109201034758e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.141108625236087e-09, 8.141013139035192e-09, 8.140562323907526e-09, 8.141983243132227e-09, 8.141242434359505e-09, 8.141242434359505e-09, 1.154777839035801e-05, 1.154771404995641e-05, 1.154521609139984e-05, 1.154204320381821e-05, 1.154717833989532e-05, 5.276713265282845e-08, 8.242772616969521e-03, 1.095489900470015e-04, 1.116330917367323e-04, 1.130301023679428e-04, 1.126484513070869e-04, 1.126484513070869e-04, 4.960608136527078e-02, 4.836053841674948e-02, 4.460644830071745e-03, 7.236675433465269e-02, 6.443912862716585e-02, 6.443912862716582e-02, 3.687774977299418e+01, 3.479946599306620e+01, 1.112776465670420e+00, 7.360299372222015e+01, 6.282907735842348e+01, 6.282907735842348e+01, 1.096112556249389e-08, 1.096468243125317e-08, 1.096140842561554e-08, 2.447587601125204e-06, 1.096287172740431e-08, 1.096287172740431e-08, 1.146371444403781e-04, 1.114180953468225e-04, 1.170608767083480e-04, 1.141329664517476e-04, 1.117181929163521e-04, 8.025496333245755e-07, 3.981491098313875e-04, 3.152900889023161e-04, 5.064341282559428e-04, 4.827311857350181e-04, 3.810785317663366e-04, 1.369366503164712e-02, 2.404622370209986e+01, 3.143762226304287e-02, 3.283701389235616e+01, 1.283205760414102e-06, 1.386576468750965e-01, 1.386576468750966e-01, 3.219173324766510e+07, 7.063959369416706e+01, 3.992563896737916e+02, 1.606477604246581e+02, 1.734791935062496e+07, 1.634446077494691e+02, 5.426450983809799e-04, 5.350679644906604e-04, 4.200934210723657e-02, 5.399011973413847e-04, 5.387826216569907e-04, 5.387826216569907e-04, 6.158890115790926e-04, 8.586548369375616e-04, 7.829105955558677e-04, 7.146978507143982e-04, 7.487840369272283e-04, 2.363217731803523e-02, 2.405328890540473e-04, 7.205797233560211e-01, 8.872892296463696e-03, 1.139899924671504e-01, 5.934348152097640e-03, 5.934348152097640e-03, 3.966844642148497e-02, 1.219734136703967e+00, 6.240500629331491e-01, 4.974062924663952e-03, 6.105170771219367e+01, 3.412374604983977e-01, 1.313663893910659e+01, 6.261362230694004e+02, 3.846434984066228e+02, 4.092234228773882e-01, 2.306596146342225e+02, 2.306596146342232e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.930565444966119e-06, -7.931430597249676e-06, -7.934901625204399e-06, -7.922101972625732e-06, -7.928858698885211e-06, -7.928858698885211e-06, 7.663309105978809e-06, 7.662754972986692e-06, 7.646564337530721e-06, 7.652267540116448e-06, 7.653004453891385e-06, -8.191415141990606e-33, 5.213784611865482e-05, -6.705074185999442e-33, -5.022702636491969e-33, -6.559744122405576e-33, -7.789912820360593e-33, -7.789912820360593e-33, -3.500699891225106e-31, -1.249416022945782e-33, 1.679891807250401e-05, -1.928863286506312e-32, -2.071577032180154e-32, -1.083093435118564e-32, -3.305371973277846e-33, -6.832239305742413e-33, -3.033896440680606e-34, -7.484071198408082e-35, -2.699931690071863e-36, -2.699931690071863e-36, -1.995295216687911e-35, -2.273219259115454e-36, -9.298732549571545e-36, -3.324787102374705e-04, -2.808581312664862e-34, -2.808581312664862e-34, 1.859572659180722e-05, 1.886148772492797e-05, 1.831215309078743e-05, 1.862257445833965e-05, 1.885722452490586e-05, -2.596130652990048e-35, -1.295399149001206e-31, -1.620418237493177e-31, -2.818934493496792e-32, -2.598766597535180e-33, -7.479908773030980e-33, -3.129135527177248e-04, 1.283481944442490e-05, -5.439667070399092e-33, 1.073667670465876e-05, -1.177100518888792e-33, -7.595736771658809e-33, -6.075680987462489e-34, 8.191208229977056e-10, -7.778871948928088e-35, -7.790405346636950e-34, 4.547526412461766e-06, 5.019368072447415e-09, -1.446122178202050e-32, -1.047131276082634e-32, -1.234456083798542e-31, -7.653298080639605e-02, -9.478542703997000e-33, -3.284040373621617e-33, -6.687981072178616e-32, -1.160312003417135e-33, -4.570014839002566e-32, -2.076735497710003e-31, -9.443214380136864e-33, -5.323326221875797e-32, -1.724980687975636e-03, -4.062149843299389e-32, 1.099207004273275e-04, -3.501987466788434e-32, 2.528214850025807e-04, -5.116953964839829e-33, -1.526746478960744e-35, 1.827768051018977e-04, -3.321397685616258e-33, -2.865196250441838e-32, -4.814756523526880e-32, 1.199255625105850e-05, -4.819700135766948e-33, -8.068131683917234e-33, -1.480354370757931e-34, -2.163339569670753e-34, -2.964793986550564e-33, -9.139905182281165e-34, -1.709662512186347e-33])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
