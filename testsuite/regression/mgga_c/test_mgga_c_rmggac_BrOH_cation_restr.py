
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rmggac_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.715360816149746e-02, -2.715360966407420e-02, -2.715279979281491e-02, -2.715274869704244e-02, -2.715289230421623e-02, -2.715289230421623e-02, -5.095836283515871e-02, -5.096097946589451e-02, -5.101542264107665e-02, -5.085497596173599e-02, -5.093015491654206e-02, -5.093015491654206e-02, -3.772784909196961e-02, -3.758263591579262e-02, -3.410127213043354e-02, -3.419812432174866e-02, -3.431243471257672e-02, -3.431243471257672e-02, -1.441354820094472e-02, -1.482349772806458e-02, -4.008841343158166e-02, -1.248014853597166e-02, -1.371719304902431e-02, -1.371719304902431e-02, -3.761207168843920e-04, -4.060948200063633e-04, -3.195422228529234e-03, -1.866551647923154e-04, -2.528451159057475e-04, -2.528451159057478e-04, -2.639460872864773e-02, -2.640286183341646e-02, -2.639491943806341e-02, -2.640220760439528e-02, -2.639882999965910e-02, -2.639882999965910e-02, -2.568571450684580e-02, -2.506546738314919e-02, -2.472063732889062e-02, -2.419956378249268e-02, -2.582531207309129e-02, -2.582531207309129e-02, -3.796550026919730e-02, -5.279006322415064e-02, -4.007808917018250e-02, -5.210985709345647e-02, -3.862428732484886e-02, -3.862428732484886e-02, -8.440138126041326e-03, -1.310343911840513e-02, -7.948750949983699e-03, -7.270397838637664e-02, -9.986541571682711e-03, -9.986541571682711e-03, -1.628874662652235e-04, -2.079198483990888e-04, -1.629084579930212e-04, -5.583071203759755e-03, -2.088317591246606e-04, -2.088317591246605e-04, -2.782285132344028e-02, -2.598283092549070e-02, -2.652602030852962e-02, -2.705494296502547e-02, -2.678378268932021e-02, -2.678378268932022e-02, -3.772880675389283e-02, -2.145955389620696e-02, -2.306102825219148e-02, -2.604549423877250e-02, -2.450978412079730e-02, -2.450978412079731e-02, -5.449960935520073e-02, -1.489055416583954e-02, -1.785930944318821e-02, -2.887292709624603e-02, -2.184142976475302e-02, -2.184142976475302e-02, -2.767817811311658e-02, -2.936458344340364e-03, -4.245680140599346e-03, -3.091711095646866e-02, -7.180730762272177e-03, -7.180730762272179e-03, -6.710998816529039e-04, -4.523269494695976e-05, -8.635206318786080e-05, -6.556211728915018e-03, -1.839373875435884e-04, -1.839373875435889e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rmggac_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.180153824279875e-02, -5.180048627738792e-02, -5.178030122112699e-02, -5.179531731158302e-02, -5.178967042091644e-02, -5.178967042091644e-02, -9.841760262068375e-02, -9.842199814938288e-02, -9.852126896948135e-02, -9.832431902691011e-02, -9.841066441320714e-02, -9.841066441320714e-02, -6.952040547018350e-02, -6.931989995257196e-02, -6.430918934731489e-02, -6.470959847305358e-02, -6.478570470250318e-02, -6.478570470250318e-02, -3.249013247690129e-02, -3.523894619874205e-02, -7.339398972211354e-02, -2.850420063751722e-02, -3.340880989578101e-02, -3.340880989578102e-02, -7.468060681775207e-04, -8.289907452633191e-04, -7.542375094264674e-03, -5.565115727461128e-04, -6.890336290592248e-04, -6.890336290592277e-04, -2.956050503341898e-02, -2.954597863629818e-02, -2.955044072484239e-02, -2.953808402612766e-02, -2.955801594674807e-02, -2.955801594674807e-02, -7.604430354089238e-02, -7.255309595796609e-02, -7.116656800048037e-02, -6.673238022569987e-02, -7.656611157251164e-02, -7.656611157251164e-02, -7.499437660183281e-02, -6.928745319199307e-02, -7.173176452920188e-02, -7.548135654760178e-02, -7.513617634385464e-02, -7.513617634385464e-02, -1.954301297121450e-02, -3.032162497183520e-02, -1.823854794536972e-02, -1.089145804695203e-01, -2.392607126766859e-02, -2.392607126766858e-02, -3.491731184316547e-04, -5.233269016366141e-04, -4.984657624735518e-04, -1.281072488105264e-02, -5.525568025703161e-04, -5.525568025703161e-04, -2.973566412516298e-02, -4.237997683620073e-02, -3.938293184619582e-02, -3.583692603615306e-02, -3.775196210669953e-02, -3.775196210669954e-02, -2.051770631656313e-02, -4.142881206993189e-02, -5.289225164855482e-02, -6.127004287028187e-02, -5.974783345633346e-02, -5.974783345633349e-02, -7.469589393248048e-02, -3.147896965494730e-02, -4.682241914711072e-02, -6.098922535970636e-02, -5.731525760210117e-02, -5.731525760210115e-02, -7.068635832439582e-02, -6.434147305467973e-03, -9.917573789464866e-03, -6.237010491454519e-02, -1.683034954117948e-02, -1.683034954117948e-02, -1.558968560194789e-03, -8.954584996168483e-05, -2.476249959889847e-04, -1.507977531621659e-02, -5.366603317232601e-04, -5.366603317232703e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.546116516824531e-10, 1.546072365945403e-10, 1.544747704088405e-10, 1.545363796018032e-10, 1.545202507627835e-10, 1.545202507627835e-10, 9.358071647204508e-07, 9.361157367282599e-07, 9.439506121857180e-07, 9.378038437924618e-07, 9.399983945359883e-07, 9.399983945359883e-07, 1.113387089686076e-03, 1.105120104497002e-03, 9.208120137649847e-04, 9.275605286423016e-04, 9.323360796748767e-04, 9.323360796748767e-04, 2.409491651650643e-01, 2.830383755556053e-01, 5.761140575596490e-04, 3.366152549810572e-01, 3.719782144127325e-01, 3.719782144127327e-01, 4.178688581655790e+01, 4.789451730641635e+01, 3.797109578700272e+00, 4.617575621760564e+02, 2.840564162740461e+02, 2.840564162740495e+02, 1.358960831594623e-08, 1.356320680204329e-08, 1.348596308407589e-08, 1.346711174033871e-08, 1.362959811984926e-08, 1.362959811984926e-08, 1.351444856002076e-05, 1.264120628502428e-05, 1.209301991845929e-05, 1.092106134785550e-05, 1.376601079178365e-05, 1.376601079178365e-05, 1.035452615713325e-02, 1.102655578786383e-02, 7.621682192846283e-03, 1.028321942079364e-02, 1.100474300688433e-02, 1.100474300688433e-02, 5.701536278290079e-01, 1.355904448004990e-01, 6.698695668633129e-01, 5.572267678212421e-05, 5.967582254870935e-01, 5.967582254870950e-01, 3.500756507096051e+02, 3.835784381656644e+02, 2.775160341500056e+03, 1.663588256234609e+00, 9.721514183937635e+02, 9.721514183937630e+02, 4.304093591344318e-02, 2.838478997730097e-02, 3.273959511263275e-02, 3.696173539029252e-02, 3.478957460818289e-02, 3.478957460818290e-02, 6.570936974559463e-02, 7.319293448938578e-03, 1.517563220144331e-02, 2.934160297697744e-02, 2.225593769240879e-02, 2.225593769240880e-02, 7.093321336716534e-03, 5.927444245530139e-02, 7.813296231443878e-02, 4.649789919959045e-02, 7.634524395434522e-02, 7.634524395434517e-02, 2.412642069102953e-02, 2.907135654995952e+00, 2.183452548080645e+00, 8.010856737515445e-02, 1.290581060788228e+00, 1.290581060788231e+00, 5.488156732077353e+01, 3.077124954526607e+03, 1.941792597870977e+03, 1.323021489058123e+00, 1.557762540125726e+03, 1.557762540125799e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.140257148511001e-05, -2.140214728486931e-05, -2.138429634990052e-05, -2.139003114674053e-05, -2.138931187305268e-05, -2.138931187305268e-05, -8.929074555892872e-05, -8.936128077843667e-05, -9.141456926630406e-05, -9.225264579471627e-05, -9.146809846161534e-05, -9.146809846161534e-05, -1.414331076454595e-04, -1.428374900562821e-04, -1.920862462180321e-04, -2.738215894952280e-04, -2.416253361244396e-04, -2.416253361244396e-04, -1.434124747285318e-02, -1.806762048676080e-02, 9.891277022989830e-06, -6.286178176463130e-03, -1.183199992442131e-02, -1.183199992442131e-02, -1.558192260785120e-05, -4.953730782449666e-05, -1.502808516907633e-03, -2.213429122686173e-04, -2.651744123612342e-04, -2.651744123612379e-04, -5.841340989613969e-06, -5.778138739626669e-06, -5.610526568857111e-06, -5.564538164023181e-06, -5.928081515317290e-06, -5.928081515317290e-06, -1.285438000555066e-03, -1.255851585181997e-03, -1.151457049045210e-03, -1.076847089032674e-03, -1.340498546394727e-03, -1.340498546394727e-03, -1.802048256212534e-02, -1.504654831187424e-02, -5.169717123492971e-03, -2.171457187729383e-03, -2.069569881690057e-02, -2.069569881690057e-02, -3.743325339669320e-03, -7.683681994098353e-03, -3.376620668599895e-03, -3.313574616547152e-04, -7.286890096815529e-03, -7.286890096815547e-03, -3.009235028928480e-05, -1.284444333321522e-04, -5.537462128486651e-04, -2.539860785773289e-03, -2.776689424462125e-04, -2.776689424462129e-04, -1.244358365393419e-01, -8.166158711509035e-02, -9.444455721218281e-02, -1.067767214118378e-01, -1.004343104678994e-01, -1.004343104678995e-01, -1.540604259225676e-01, -1.163280993985812e-02, -2.896847806380625e-02, -6.303228449047431e-02, -4.509705442076377e-02, -4.509705442076379e-02, -7.493100405542586e-03, -6.756727331689803e-03, -1.707841596806240e-02, -1.525543316782280e-02, -2.360028814404554e-02, -2.360028814404550e-02, -2.491730463921423e-02, -8.976164708766039e-04, -1.848519387438644e-03, -2.415760298637589e-02, -4.433229574602767e-03, -4.433229574602764e-03, -2.501163307476064e-04, -5.029581248702235e-07, -1.573925209793369e-04, -3.878938954232976e-03, -4.044814107924829e-04, -4.044814107925052e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
