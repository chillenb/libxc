
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scanl_vv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.659091432039087e-02, -2.659095556456015e-02, -2.659107406690800e-02, -2.659046175965346e-02, -2.659079182648866e-02, -2.659079182648866e-02, -4.888398419900177e-02, -4.888004700672781e-02, -4.874446289070523e-02, -4.851582395139220e-02, -4.866227817708429e-02, -4.866227817708429e-02, -4.035431858575665e-02, -4.021544332806017e-02, -3.676211262625697e-02, -3.634458820994682e-02, -3.659312629034241e-02, -3.659312629034241e-02, -1.751170010724361e-02, -1.795816015448131e-02, -4.775930324887331e-02, -1.539503396733168e-02, -1.645011165999676e-02, -1.645011165999676e-02, -6.595296703994024e-04, -7.073708506906795e-04, -4.483911467877339e-03, -3.254921999269704e-04, -4.493811209963067e-04, -4.493811209963067e-04, -8.756205107616481e-02, -8.124674616261617e-02, -2.639442060614609e-02, -8.484874342613589e-02, -2.639828923551386e-02, -6.626216820649197e-02, -2.412482223483457e-02, -4.171914300371336e-02, -3.193241770891763e-02, -3.135213466629224e-02, -3.401647263167489e-02, -2.283663519460113e-02, -5.511560726613070e-02, -7.492150728159912e-02, -5.260671557947739e-02, -5.326004964529234e-02, -4.601687643354654e-02, -4.719816128996322e-02, -7.882224560082151e-03, -1.928447230383364e-02, -7.406917673241164e-03, -7.447647597259098e-02, -9.529777611094784e-03, -9.529777611094784e-03, -2.325815950333320e-04, -2.606911429373983e-04, -2.291923274242791e-04, -5.255962619890100e-03, -3.287281381731912e-04, -2.160998650675209e-04, -6.070706244823876e-02, -5.612076974897867e-02, -5.760502163513502e-02, -5.900206051201736e-02, -5.823338699213713e-02, -5.825603060682999e-02, -6.168230205442076e-02, -2.572930571929107e-02, -5.193258333824259e-02, -2.282450944844197e-02, -4.505611602541389e-02, -5.200696439747119e-02, -7.080182447956022e-02, -1.472436835921187e-02, -1.752815651887469e-02, -1.978053492042296e-02, -3.207060337833977e-02, -2.964807762618253e-02, -3.335221840399487e-02, -2.914395210852384e-03, -5.795030184330452e-03, -3.457870657458537e-02, -6.828820886569168e-03, -6.828820886569178e-03, -5.803435408960543e-04, -3.137669179920198e-05, -8.426946613619354e-05, -6.416281780916955e-03, -1.617192011756854e-04, -1.617192011758964e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scanl_vv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031674003617101e-02, -3.031669532092040e-02, -3.031656956659642e-02, -3.031723331534395e-02, -3.031687514579561e-02, -3.031687514579561e-02, -1.290665917954209e-01, -1.290807324698862e-01, -1.294491537424653e-01, -1.294476317698656e-01, -1.293880558399600e-01, -1.293880558399600e-01, -7.308098052774274e-02, -7.293411764455696e-02, -6.897979468267881e-02, -6.866513093521201e-02, -6.890765629847385e-02, -6.890765629847385e-02, -7.507773073086269e-02, -7.506388565382256e-02, -8.622418163653083e-02, -3.130500571720373e-02, -3.420266904209112e-02, -3.420266904209115e-02, -1.262062148606363e-03, -1.352470865124094e-03, -8.380608441167359e-03, -6.279577338190788e-04, -8.640697658968923e-04, -8.640697658968925e-04, -1.685369107890844e-01, -1.411483147947462e-01, -2.931794179649751e-02, -1.705522539881227e-01, -2.931323049357290e-02, -1.196052489459678e-01, -3.424272360314232e-02, -8.102106028633213e-02, -1.090466810610292e-01, -1.063621526790274e-01, -1.130877014326349e-01, -3.064707037444536e-02, -1.010228595381884e-01, -1.045686243963307e-01, -9.704069609776229e-02, -7.690825954537395e-02, -7.658326603758875e-02, -7.628004824014452e-02, -1.417286506646017e-02, -3.713629962193177e-02, -1.338479061359653e-02, -1.107268569634310e-01, -1.673536416428108e-02, -1.673536416428108e-02, -4.425389735792290e-04, -5.065326486275576e-04, -4.472335683976474e-04, -9.691231458652003e-03, -6.311689974574814e-04, -4.729164730960542e-04, -7.522037718244355e-02, -7.785137962679980e-02, -7.727681232782578e-02, -7.663706221942644e-02, -7.686925641756852e-02, -7.693870567671730e-02, -7.288488029100954e-02, -7.094000762865510e-02, -9.549171211116501e-02, -2.621832055887408e-02, -7.323589374327655e-02, -9.412451497413178e-02, -1.142806039094191e-01, -2.352472433255289e-02, -2.874664284895130e-02, -2.610437125203406e-02, -5.928433562341436e-02, -5.502390041588450e-02, -9.189218948231725e-02, -5.476702251809453e-03, -1.081242180606085e-02, -7.548812258567024e-02, -1.240368993791514e-02, -1.240368993791512e-02, -1.127812228399642e-03, -6.239937790633135e-05, -1.699489642006982e-04, -1.170444023069657e-02, -3.191650725856721e-04, -3.191650725860534e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_vv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.226407933608734e-12, 9.226335372122463e-12, 9.225883797924131e-12, 9.226966025547181e-12, 9.226417290225851e-12, 9.226417290225851e-12, 1.880016465837855e-06, 1.880660374493190e-06, 1.896742289884528e-06, 1.888530416152428e-06, 1.890830965725936e-06, 1.890830965725936e-06, 1.544324076898687e-03, 1.534566178871653e-03, 1.297302158107534e-03, 1.248661178414420e-03, 1.276749978743282e-03, 1.276749978743282e-03, 8.904640621604658e-01, 8.699337998010944e-01, 8.472736252014249e-04, 2.970047315330848e-01, 2.572421249646634e-01, 2.572421249646645e-01, 6.491918583396468e+01, 6.141669444847953e+01, 1.948697037174568e+00, 1.571104663980074e+02, 1.235204421399793e+02, 1.235204421399796e+02, 3.214968410037408e-07, 3.092761615700271e-07, 1.097204390735795e-08, 2.951390685313032e-07, 1.097378328111898e-08, 2.355800237842003e-07, 2.443047818240553e-06, 5.959084503745323e-06, 1.518873569908116e-05, 1.432352916372308e-05, 1.605649321044104e-05, 8.713526816232056e-07, 4.738630374482534e-03, 8.802823861291182e-03, 6.061704855609313e-03, 9.158960568613700e-03, 3.832082660489232e-03, 4.917175842961993e-03, 1.798566985884407e-01, 7.158762739343416e-02, 2.200336748352006e-01, 5.427909156725110e-05, 1.592860766336194e-01, 1.592860766336194e-01, 2.404930393257713e+02, 1.478753610480650e+02, 7.315956248112612e+02, 5.778253263539697e-01, 3.816838485009403e+02, 5.151175303218545e+02, 1.105778845502614e-02, 8.611509097981347e-03, 9.351360061153276e-03, 1.007429836892577e-02, 9.690371734423801e-03, 9.691890392793858e-03, 1.353255700196661e-02, 1.020533476425334e-02, 7.601618042644198e-03, 7.374316404947856e-04, 8.072922292069983e-03, 7.102754106824789e-03, 5.720516642769037e-03, 1.625767341411205e-02, 2.092350255386843e-02, 4.359523115635311e-03, 3.113721212653856e-02, 3.480398385503613e-02, 2.436537597675211e-02, 1.307665092666247e+00, 1.117116046329616e+00, 8.613612797186994e-02, 4.057234960491503e-01, 4.057234960491488e-01, 1.843970400431390e+01, 2.058508264917866e+03, 4.767032512751390e+02, 4.557377972537024e-01, 2.845284007172112e+02, 2.845284007181214e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_vv10_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.542981997222985e-04, -1.543826274858715e-04, -1.566419886183420e-04, -1.567599199150131e-04, -1.563372527110513e-04, -1.563372527110513e-04, -3.500234443086267e-04, -3.480444223711070e-04, -3.006685363916711e-04, -3.087320307894323e-04, -3.109712965156446e-04, -3.109712965156446e-04, -1.250061868148334e-02, -1.271277190172750e-02, -1.042304951580265e-04, -9.093010972162202e-04, -1.180662931427494e-03, -1.180662931427505e-03, 3.483024306030002e-07, 3.871646973982148e-07, -6.597353150556574e-06, 2.076641059634762e-07, 3.137695825734753e-07, 3.137695825734749e-07, -4.354443147046519e-09, -5.228434776571441e-06, 0.000000000000000e+00, 5.306767429973935e-07, 0.000000000000000e+00, -7.157305320201042e-06, 3.398310920930503e-07, -2.857961010786019e-05, -2.730043549779535e-04, -2.627731078044864e-04, -2.934832553418430e-04, -2.540101681458282e-07, 2.034519087581511e-05, -4.287187561679373e-05, 2.130654776383901e-05, -2.647906289861517e-04, 0.000000000000000e+00, -5.775622544003696e-04, 0.000000000000000e+00, 8.331394246862372e-06, 0.000000000000000e+00, -7.114885568576877e-05, 0.000000000000000e+00, 0.000000000000000e+00, 2.933532637570415e-07, 2.277961529351895e-12, 1.742988644089228e-11, 0.000000000000000e+00, 6.878683817352352e-07, 1.401432733502287e-07, 2.075205520551493e-12, 1.326203928805697e-11, 4.216964282598792e-14, 4.420590122695390e-12, 1.508753200862453e-10, 1.289259437344297e-14, 1.452245605669028e-13, -2.929546698791280e-03, 1.914508767058765e-05, 0.000000000000000e+00, -6.557786242936247e-04, 2.016690708199283e-05, 2.777666795387945e-05, 0.000000000000000e+00, 5.562276768373321e-06, 0.000000000000000e+00, -2.648830879481932e-04, -8.755177809288925e-04, -5.209331215722818e-03, 0.000000000000000e+00, -5.766814586964225e-06, -6.322848401709437e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.040965621987687e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
