
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcisk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646005790288541e-01, -1.646006638479634e-01, -1.646010671037655e-01, -1.645998046284074e-01, -1.646004624244909e-01, -1.646004624244909e-01, -1.107863943172288e-01, -1.107864558641111e-01, -1.107885770793571e-01, -1.107903035880350e-01, -1.107871554840383e-01, -2.470136930571756e-02, -6.701433813354900e-02, -1.776835892464189e-02, -1.661720146814458e-02, -1.714547257234302e-02, -1.702394336610695e-02, -1.702394336610695e-02, -1.251989514000591e-02, -1.286996452273724e-02, -7.077026134652131e-02, -7.106078396587487e-03, -9.250223106519026e-03, -9.250223106519021e-03, -3.959565477818141e-05, -4.472989982852920e-05, -8.831554870974369e-04, -1.139381070033766e-05, -2.115774674958234e-05, -2.115774674958234e-05, -4.232575017594249e-02, -4.241822767616175e-02, -4.233106139524653e-02, -1.224318986567447e-01, -4.237204543323538e-02, -4.237204543323538e-02, -9.471409660098920e-02, -9.491176806352430e-02, -9.456895893468423e-02, -9.474456126927767e-02, -9.489319172099715e-02, -2.292703206863800e-02, -2.733997306933780e-02, -3.099858352144368e-02, -2.490005854209892e-02, -2.735522481471547e-02, -2.801583245855267e-02, -6.418957210681180e-02, -2.699432973200030e-02, -9.909987740762786e-03, -2.581456407787728e-02, -3.134847007679883e-02, -5.751464984311725e-03, -5.751464984311727e-03, -1.873262684533397e-03, -1.024308185290027e-05, -1.692034278140755e-05, -2.031143328390536e-02, -2.148658734063699e-03, -1.525702892455549e-05, -3.294514903670523e-02, -3.251855424616587e-02, -6.383657027377532e-02, -3.282119662256550e-02, -3.276068116586441e-02, -3.276068116586441e-02, -3.260026551929660e-02, -2.582483612496036e-02, -2.797675045116829e-02, -3.012522796764125e-02, -2.903863872729571e-02, -6.128153196763172e-02, -3.031113285619359e-02, -4.238705188938242e-02, -1.624929155049224e-02, -5.192859886080499e-02, -1.926957512859096e-02, -1.926957512859095e-02, -5.782038541859819e-02, -8.203302555366244e-04, -1.272503461903382e-03, -2.308783753771242e-02, -2.356179453227854e-02, -3.309802515197427e-03, -5.450472279973437e-05, -8.133161485122388e-07, -6.042071970785681e-06, -3.088144624471207e-03, -1.558106620337809e-05, -1.558106620337806e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcisk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747382873944569e-01, -1.747383727047485e-01, -1.747387783059391e-01, -1.747375084877817e-01, -1.747381701097621e-01, -1.747381701097621e-01, -1.202914147432737e-01, -1.202914775447517e-01, -1.202936419986544e-01, -1.202954036988508e-01, -1.202921914258883e-01, -6.451940457886556e-02, -7.507496329060674e-02, -4.557741445737577e-02, -4.319471483574255e-02, -4.429031836234510e-02, -4.403928877757259e-02, -4.403928877757259e-02, -3.306908104356741e-02, -3.368068603750354e-02, -7.900767619048780e-02, -2.137525944842486e-02, -2.651222000776991e-02, -2.651222000776989e-02, -1.520488043139639e-04, -1.716469239664958e-04, -3.216143020969022e-03, -4.394873208945703e-05, -8.144820083381060e-05, -8.144820083381060e-05, -9.713577859243369e-02, -9.726100440273354e-02, -9.714296677793426e-02, -1.321462747126927e-01, -9.719849862818168e-02, -9.719849862818168e-02, -1.038281346471248e-01, -1.040314586538446e-01, -1.036788320534475e-01, -1.038594719679676e-01, -1.040123520846879e-01, -5.885945903714319e-02, -5.899046154309217e-02, -6.282184855699448e-02, -5.569698977938853e-02, -5.843002100549396e-02, -5.975902138322961e-02, -7.210924502370672e-02, -3.211639957987510e-02, -2.837750373341348e-02, -3.079831978749471e-02, -7.468450767837935e-02, -1.745567819291810e-02, -1.745567819291811e-02, -2.429818844145475e-03, -3.952253417364899e-05, -6.503884559740846e-05, -2.457415835517307e-02, -2.781518145603631e-03, -5.874582128288711e-05, -6.480615267469021e-02, -6.309244379347560e-02, -7.173813122961308e-02, -6.407915696166898e-02, -6.382385374172279e-02, -6.382385374172278e-02, -6.394876097928025e-02, -5.504518382600960e-02, -5.733887581620278e-02, -5.938832331488130e-02, -5.834755223940492e-02, -6.904860886416335e-02, -6.315266146547938e-02, -4.894347882857778e-02, -4.105852213301952e-02, -5.914877095673511e-02, -4.575185358591769e-02, -4.575185358591769e-02, -6.539545717536099e-02, -3.006835301604523e-03, -4.226994279264768e-03, -4.976812451893170e-02, -2.826627561701371e-02, -1.047203864351569e-02, -2.092362229032423e-04, -3.146203376338656e-06, -2.331437436689266e-05, -9.855660517880505e-03, -5.996230667276675e-05, -5.996230667276666e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.145883495256111e-09, 9.145796136277333e-09, 9.145369534697823e-09, 9.146671181938586e-09, 9.145994516103621e-09, 9.145994516103621e-09, 1.257906165105574e-05, 1.257922034753552e-05, 1.258255898281868e-05, 1.257667644266200e-05, 1.258249794434349e-05, 4.104340222862812e-07, 6.413642040968551e-03, 4.905892037103207e-04, 4.549574034833244e-04, 4.811038504782469e-04, 4.746798433045286e-04, 4.746798433045286e-04, 1.904556624646762e-01, 1.901874068976230e-01, 3.444526958421292e-03, 1.894010414161054e-01, 1.984551700966057e-01, 1.984551700966055e-01, 1.845659918618642e+01, 1.823884110457427e+01, 1.423488956535122e+00, 2.373568434221469e+01, 2.614962524164941e+01, 2.614962524164941e+01, 3.735195897386225e-07, 3.768876809530657e-07, 3.737147791100678e-07, 3.018352820200474e-06, 3.751996392231283e-07, 3.751996392231283e-07, 1.190897021087702e-04, 1.162810649968098e-04, 1.211771195996298e-04, 1.186312603903612e-04, 1.165608500170082e-04, 5.363153766836323e-06, 4.644267633601253e-03, 6.575618471489729e-03, 4.436715232421823e-03, 5.687640936649078e-03, 4.862302694806597e-03, 1.509874494608962e-02, 1.229519590420311e+01, 9.777774424391046e-02, 1.655261191079628e+01, 1.850018872038218e-05, 3.307920367742628e-01, 3.307920367742630e-01, 2.613606726849864e+06, 2.148227527020795e+01, 2.246528177376357e+02, 7.460338277648593e+01, 1.606099275155876e+06, 7.192888572353604e+01, 5.980486083214504e-02, 2.853681070450167e-02, 4.972112275447618e-02, 4.326913296905997e-02, 3.879866350339989e-02, 3.879866350339988e-02, 5.918730573436580e-02, 8.361071071275235e-03, 1.045226555226192e-02, 1.510750955459208e-02, 1.220288647050525e-02, 2.886073668748356e-02, 4.196114571575967e-03, 4.470464931645070e-01, 3.995726249369791e-02, 8.813260293854525e-02, 3.286928264383176e-02, 3.286928264383177e-02, 3.336981242495794e-02, 1.525480824554891e+00, 8.253976686848197e-01, 4.044932079037102e-02, 3.036001916837319e+01, 6.469874162662458e-01, 6.247077274245609e+00, 9.912164065008542e+01, 1.344083786233070e+02, 7.612613534619128e-01, 1.106171025826688e+02, 1.106171025826691e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.175124018821916e-17, -1.201081485491919e-54, -1.201226310989535e-54, -1.200613426068002e-54, -1.200940109602941e-54, -1.200940109602941e-54, -7.092832717355496e-48, -7.096399835508950e-48, -7.189938662916562e-48, -7.145662123887844e-48, -7.157634647176004e-48, -1.375460128997240e-04, -1.330665916207460e-41, -1.096199544929194e-03, -9.006102853685107e-04, -9.946439330670487e-04, -9.720781606970659e-04, -9.720781606970659e-04, -7.636673921123152e-03, -8.139836374174252e-03, -1.011243830855818e-42, -2.450114076294632e-03, -4.107192807852267e-03, -4.107192807852266e-03, -1.113747667711532e-05, -1.285358399260118e-05, -1.871799250548336e-04, -2.731210055729020e-06, -5.997267731342896e-06, -5.997267731342896e-06, -5.628261455359136e-04, -5.692870402983322e-04, -5.631968489923185e-04, -3.404849205645712e-23, -5.660491981405974e-04, -5.660491981405974e-04, -2.100752497188891e-20, -1.266524119605201e-45, -1.233434905637224e-45, -1.248898268378662e-45, -1.268900033990554e-45, -3.306565966874683e-04, -1.039697999747980e-02, -2.222789618609248e-02, -7.111338688715468e-03, -1.151294287844305e-02, -1.176357929659292e-02, -6.155794376268553e-40, -2.756508525061482e-35, -3.231894654569280e-03, -4.347252453649547e-35, -1.275027590135500e-03, -2.211534787188827e-03, -2.211534787188827e-03, -3.793601090744999e-27, -2.307757558744758e-06, -1.088377736407683e-05, -4.686082072936304e-34, -6.787365965659408e-27, -6.068692026853822e-06, -1.929090128083296e-01, -8.785996471893470e-02, -2.058752152372705e-38, -1.375050946929353e-01, -1.224770126984696e-01, -1.224770126984696e-01, -1.754827457856989e-01, -1.089280978358783e-02, -1.749943307880948e-02, -3.243042136078517e-02, -2.308863687709298e-02, -3.635669854835193e-39, -1.536492361339226e-02, -2.160689822201884e-37, -5.976701726400207e-03, -2.081979556657958e-38, -8.526412321377772e-03, -8.526412321377770e-03, -2.832346116015480e-39, -1.741425969447237e-04, -2.838546572959781e-04, -1.770197070233808e-02, -1.730523451576089e-34, -1.120693219306194e-03, -1.060381621353899e-05, -2.021954344342880e-07, -2.550248300691090e-06, -1.074337555613975e-03, -7.402818434152681e-06, -7.402818434152678e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
