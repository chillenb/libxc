
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcisk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.177477339398507e-02, -4.177519162163355e-02, -4.177568261856764e-02, -4.176945020372860e-02, -4.177291084755808e-02, -4.177291084755808e-02, -4.370911611451673e-02, -4.371206741913590e-02, -4.377399912670358e-02, -4.359689668453142e-02, -4.367958212653032e-02, -4.367958212653032e-02, -3.471243531954660e-02, -3.453770107694096e-02, -3.028369532415540e-02, -3.019013960601386e-02, -3.039694994424702e-02, -3.039694994424702e-02, -1.322215185565002e-02, -1.374607269425930e-02, -3.869916861422332e-02, -8.693652972783846e-03, -1.074434527855672e-02, -1.074434527855672e-02, -3.999244668674955e-05, -4.555400837672918e-05, -1.000924398036942e-03, -1.305682436248556e-05, -2.297492470379852e-05, -2.297492470379854e-05, -4.255089401723740e-02, -4.264274371361414e-02, -4.255162220823618e-02, -4.263281533495727e-02, -4.259921992219247e-02, -4.259921992219247e-02, -2.520738029211318e-02, -2.528508173170220e-02, -2.446683982260310e-02, -2.452178968535554e-02, -2.562184524282457e-02, -2.562184524282457e-02, -3.662132322983602e-02, -5.121070321576360e-02, -3.746620395459837e-02, -5.038209293758047e-02, -3.754828537699989e-02, -3.754828537699989e-02, -4.520427856626754e-03, -1.057902408810516e-02, -4.113591336561688e-03, -6.917436242491092e-02, -6.448772099186282e-03, -6.448772099186282e-03, -9.371573797889390e-06, -1.385603058126467e-05, -1.976206932938252e-05, -2.351814795112873e-03, -1.992725507124614e-05, -1.992725507124612e-05, -4.566931081236210e-02, -3.825578906755148e-02, -3.990171413730896e-02, -4.184320284412538e-02, -4.078776372521323e-02, -4.078776372521323e-02, -5.540457813194324e-02, -2.682477581113530e-02, -2.985997908574149e-02, -3.394735958623771e-02, -3.180755422480575e-02, -3.180755422480575e-02, -5.224686597807786e-02, -1.370558777620143e-02, -1.780665087466665e-02, -2.809781119949554e-02, -2.220628288867119e-02, -2.220628288867119e-02, -2.905538048857314e-02, -8.731125154552968e-04, -1.469159650656345e-03, -2.997362035553612e-02, -3.792914295291647e-03, -3.792914295291649e-03, -7.461376870399947e-05, -2.367381857358234e-06, -6.509551725697586e-06, -3.363446630909297e-03, -1.897950519171031e-05, -1.897950519171029e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcisk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.005779367683721e-01, -1.005787391478115e-01, -1.005801002354988e-01, -1.005681572832833e-01, -1.005747295187054e-01, -1.005747295187054e-01, -9.595437069681571e-02, -9.595843515454784e-02, -9.604376046771310e-02, -9.580082931574029e-02, -9.591383225482085e-02, -9.591383225482085e-02, -7.131082596158357e-02, -7.111842368787397e-02, -6.592264217490874e-02, -6.579848726253222e-02, -6.607238031929344e-02, -6.607238031929344e-02, -3.425353876543900e-02, -3.512008502064910e-02, -7.774070142367866e-02, -2.494747542099967e-02, -2.949713764511649e-02, -2.949713764511648e-02, -1.534802516909078e-04, -1.746157349475217e-04, -3.596291116937041e-03, -4.999865813971481e-05, -8.803348134496293e-05, -8.803348134496302e-05, -9.742037540412138e-02, -9.754420290056202e-02, -9.742174407368989e-02, -9.753120185123609e-02, -9.748535160258606e-02, -9.748535160258606e-02, -6.299659318017720e-02, -6.327318408103076e-02, -6.151769906082685e-02, -6.174356480500141e-02, -6.387966417325913e-02, -6.387966417325913e-02, -6.787914894336307e-02, -7.483052986936407e-02, -6.811543850252434e-02, -7.309033962144085e-02, -6.853747364553685e-02, -6.853747364553685e-02, -1.384261223634554e-02, -2.975184820035825e-02, -1.266705505456339e-02, -1.091082471396520e-01, -1.912970778173102e-02, -1.912970778173102e-02, -3.539146429503814e-05, -5.266695506644509e-05, -7.530053017752797e-05, -7.718412899916554e-03, -7.566045601431068e-05, -7.566045601431061e-05, -6.942615984998321e-02, -6.641385301082667e-02, -6.730065566618369e-02, -6.816625288008472e-02, -6.771815577138963e-02, -6.771815577138963e-02, -7.076664163139293e-02, -5.617249710588382e-02, -5.919776773790816e-02, -6.253080264726865e-02, -6.086625310648539e-02, -6.086625310648539e-02, -7.682693774948313e-02, -3.630943498850570e-02, -4.346238061885660e-02, -5.635365147572523e-02, -4.957318905071521e-02, -4.957318905071521e-02, -5.737076199916781e-02, -3.180040573271250e-03, -4.769566867158594e-03, -5.624837714496696e-02, -1.171653507318879e-02, -1.171653507318881e-02, -2.815509569180277e-04, -8.826198222070402e-06, -2.501666940489267e-05, -1.057496450932961e-02, -7.226205439029204e-05, -7.226205439029195e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.275797187385532e-10, 2.275855485537722e-10, 2.275984847171708e-10, 2.275121689442154e-10, 2.275592326360655e-10, 2.275592326360655e-10, 1.030530494044996e-06, 1.030777324528630e-06, 1.036517239270846e-06, 1.027045500069672e-06, 1.031385137332298e-06, 1.031385137332298e-06, 1.561194430303475e-03, 1.550446230361735e-03, 1.291301974421065e-03, 1.268719742024842e-03, 1.287759739858649e-03, 1.287759739858649e-03, 2.055551084549885e-01, 2.084109080876760e-01, 7.892531212395127e-04, 2.608116090453586e-01, 2.490782547613642e-01, 2.490782547613641e-01, 1.876405531846079e+01, 1.879926047637343e+01, 1.750242209579634e+00, 2.982576479762966e+01, 3.000271013656800e+01, 3.000271013656806e+01, 3.756044358390344e-07, 3.789769291293633e-07, 3.757576703221498e-07, 3.787338871510828e-07, 3.773085024120336e-07, 3.773085024120336e-07, 6.164888799736364e-06, 6.164501107587577e-06, 5.906406016917197e-06, 5.905812718656178e-06, 6.296635966043099e-06, 6.296635966043099e-06, 6.544731852076192e-03, 1.096941091804991e-02, 7.625605939609227e-03, 1.245762300027036e-02, 6.784879242788284e-03, 6.784879242788284e-03, 3.694858321609977e-01, 1.079436097033698e-01, 4.362903631024870e-01, 6.546592299005854e-05, 3.967820613035847e-01, 3.967820613035847e-01, 5.100567566074663e+01, 3.588005795612305e+01, 2.914742761696016e+02, 9.526267008380022e-01, 1.130318979331253e+02, 1.130318979331251e+02, 6.580402737970534e-02, 3.083616453299862e-02, 3.818813789925755e-02, 4.726814043576461e-02, 4.227240910903693e-02, 4.227240910903692e-02, 7.130248159998100e-02, 8.723158849848886e-03, 1.114694445098854e-02, 1.663955221904052e-02, 1.325802850059351e-02, 1.325802850059351e-02, 7.801729369575416e-03, 6.187058570176961e-02, 4.540420636362921e-02, 3.321412297182733e-02, 3.964144853390345e-02, 3.964144853390346e-02, 1.169123749748900e-02, 1.690128717101572e+00, 1.045125023924709e+00, 5.475179037009291e-02, 8.086296596509918e-01, 8.086296596509919e-01, 1.064477994366097e+01, 6.623662000547650e+02, 1.522012468727086e+02, 8.746232914355987e-01, 1.541938690068217e+02, 1.541938690068222e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcisk_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcisk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.846265456926785e-05, -1.846341809203398e-05, -1.846677003702110e-05, -1.845548931416190e-05, -1.846140379719025e-05, -1.846140379719025e-05, -9.484741578329899e-05, -9.488737501090363e-05, -9.597461511127717e-05, -9.580599873025213e-05, -9.572242081619908e-05, -9.572242081619908e-05, -7.237268226648665e-04, -7.204482848701048e-04, -6.464663592425312e-04, -7.253337610098334e-04, -7.028405840443060e-04, -7.028405840443060e-04, -7.481760368384131e-03, -7.931758324673063e-03, -1.683278797730108e-04, -2.343124844421187e-03, -3.937543295856545e-03, -3.937543295856543e-03, -1.113694780305606e-05, -1.285236887330323e-05, -1.864467210227510e-04, -2.730339627551532e-06, -5.995553450493847e-06, -5.995553450493848e-06, -5.608662206574185e-04, -5.673098401650743e-04, -5.612755192593504e-04, -5.669585401942693e-04, -5.640601300578973e-04, -5.640601300578973e-04, -2.980143870268250e-04, -3.160241680580905e-04, -2.883325410093332e-04, -3.041820899038283e-04, -3.129465254240793e-04, -3.129465254240793e-04, -7.970627877503267e-03, -9.686239735437625e-03, -4.949988499236148e-03, -4.413612929739884e-03, -8.899351955788297e-03, -8.899351955788297e-03, -9.831562916600564e-04, -3.177594626007524e-03, -8.785302391326865e-04, -4.615267445078033e-04, -2.164660243911357e-03, -2.164660243911357e-03, -1.125244932501022e-06, -2.306127532115334e-06, -1.087601758763703e-05, -5.256350274986163e-04, -6.062699065664300e-06, -6.062699065664300e-06, -1.139517370648338e-01, -7.199056036321695e-02, -8.494059385674378e-02, -9.784181285751101e-02, -9.114036725782131e-02, -9.114036725782129e-02, -4.526148871843390e-02, -1.061747631268621e-02, -1.659913914938188e-02, -2.874528155601102e-02, -2.126834737692386e-02, -2.126834737692386e-02, -6.451064723793676e-03, -4.352877803198644e-03, -5.740024213432174e-03, -8.584201647650612e-03, -7.849695674381912e-03, -7.849695674381910e-03, -8.127111613121489e-03, -1.738315586524237e-04, -2.819623381651632e-04, -1.384548373928426e-02, -1.101409163144888e-03, -1.101409163144889e-03, -1.058471622956541e-05, -2.019903156448391e-07, -2.549855629295506e-06, -1.063452495930892e-03, -7.397109987927081e-06, -7.397109987927074e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
