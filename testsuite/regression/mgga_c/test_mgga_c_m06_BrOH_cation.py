
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.084135185598742e-01, -1.084150603213463e-01, -1.084228017695659e-01, -1.084000254117550e-01, -1.084118293499727e-01, -1.084118293499727e-01, -6.326830194706723e-02, -6.326178465398113e-02, -6.307238721730690e-02, -6.296342827218759e-02, -6.305183846183327e-02, -6.305183846183327e-02, -6.845050348775783e-02, -6.852098237818471e-02, -6.807187133889858e-02, -6.262404571547919e-02, -6.424579363409699e-02, -6.424579363409699e-02, 6.010179349347222e-05, -2.266608752467647e-03, -1.636359749487690e-01, 7.857864821176508e-03, 7.019730251975498e-03, 7.019730251975470e-03, -2.534146898813628e-04, -3.495376525949292e-04, -2.883727600144674e-03, -9.559582978478469e-04, -6.289947991059791e-04, -6.289947991060023e-04, -9.661217971772895e-02, -9.690503423640728e-02, -9.663444117035658e-02, -9.689260144137612e-02, -9.675594465299875e-02, -9.675594465299875e-02, -4.166079326649341e-02, -4.143454855839113e-02, -4.043617716006698e-02, -4.020024988988147e-02, -4.202498450284131e-02, -4.202498450284131e-02, -3.271148849190098e-02, -4.272548032874213e-02, -3.292075181045717e-02, -4.335075655348486e-02, -3.373323933811356e-02, -3.373323933811356e-02, 6.845302658632119e-03, 1.102744229925146e-02, 5.025677157171726e-03, -6.571071219130120e-02, 1.253937621064610e-02, 1.253937621064607e-02, -2.314956702018414e-03, -1.850066760559420e-03, -8.348274064497154e-04, -8.188789473069502e-04, -1.003331449537315e-03, -1.003331449537223e-03, -5.525087870371528e-02, -5.602645467536183e-02, -5.685238429645129e-02, -5.686961580380112e-02, -5.695837204182935e-02, -5.695837204182935e-02, -4.503501865020867e-02, -2.901361358778642e-02, -3.388613526328876e-02, -4.161397797779953e-02, -3.712159679855775e-02, -3.712159679855775e-02, -4.338529145345366e-02, 2.920777158401444e-03, -1.225589331821375e-02, -2.728520745672602e-02, -2.218524967108371e-02, -2.218524967108371e-02, -2.769690192486252e-02, -9.556711452015677e-04, -2.653107846947052e-03, -2.552260429598874e-02, 5.374397316471977e-03, 5.374397316470922e-03, -4.013279271782432e-03, -1.513164281578046e-03, -3.440291429285869e-04, 6.592265071591150e-03, -8.959592801222401e-04, -8.959592801222843e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.508949142319047e-01, -1.508748551707999e-01, -1.508953627057270e-01, -1.508772111320411e-01, -1.509041159132500e-01, -1.508767235101633e-01, -1.508725036843304e-01, -1.508667004280906e-01, -1.508746993166727e-01, -1.508869231669243e-01, -1.508746993166727e-01, -1.508869231669243e-01, -6.761013660086901e-02, -6.774726048347768e-02, -6.762154078096461e-02, -6.777728743805556e-02, -6.822075321663612e-02, -6.820421265843990e-02, -6.762868936507416e-02, -6.774058161625152e-02, -6.834865839009541e-02, -6.740063831724163e-02, -6.834865839009541e-02, -6.740063831724163e-02, -2.655289718482789e-02, -2.891946091043329e-02, -2.705574742473704e-02, -2.993924123384950e-02, -5.803081922091824e-02, -6.012072729353424e-02, -5.474266252825855e-02, -5.368353405594783e-02, -6.106261937559543e-02, -1.025670910899670e-01, -6.106261937559543e-02, -1.025670910899670e-01, -1.164308915191533e-01, -1.075967079053690e-01, -1.167292553581336e-01, -1.053084909953276e-01, 2.807621464361343e-02, -1.230072863948695e-02, -5.185033386589000e-02, -5.872646845300500e-02, -4.557729677936992e-02, -1.282339338925220e-02, -4.557729677936945e-02, -1.282339338924240e-02, -1.221721185945038e-02, -1.278237091045024e-02, -1.269287984654869e-02, -1.336150209316922e-02, -3.157990335105047e-02, -3.634248153629686e-02, -8.297739644238033e-03, -8.153151369399918e-03, -1.113753468115983e-02, -7.542114414513687e-03, -1.113753468115985e-02, -7.542114414514347e-03, -1.216002838063085e-01, -1.217596539976257e-01, -1.216933172538033e-01, -1.218825321037964e-01, -1.215926216786722e-01, -1.217733763428717e-01, -1.216966189909302e-01, -1.218602187721028e-01, -1.216466397254595e-01, -1.218256822264964e-01, -1.216466397254595e-01, -1.218256822264964e-01, -9.800478664509904e-02, -9.878078437352156e-02, -9.790802434979029e-02, -9.869725701692733e-02, -1.104442070249110e-01, -1.065108054060846e-01, -1.103651382490134e-01, -1.065553342144945e-01, -8.900237789204635e-02, -9.875949877502621e-02, -8.900237789204635e-02, -9.875949877502621e-02, -5.432383841733324e-02, -5.419552963585839e-02, -5.656572005151828e-02, -5.440695032605281e-02, -5.002650869249148e-02, -3.604741286368429e-02, -5.626819231795027e-02, -4.161692886801355e-02, -4.881554861796056e-02, -6.937054052838720e-02, -4.881554861796045e-02, -6.937054052838709e-02, -9.483338173496197e-03, -1.278353688984976e-02, -9.515192298613440e-02, -9.409745759654509e-02, -2.015358103131165e-03, -1.901198837849635e-02, -6.242838451554189e-02, -6.252482876435050e-02, -2.026899169457391e-02, -3.485901355080229e-02, -2.026899169457486e-02, -3.485901355080290e-02, -6.957416736344541e-03, -7.134701928281547e-03, -8.254242458765318e-03, -8.389436664793068e-03, -6.283089480386031e-03, -6.591150283985874e-03, -2.149405702061477e-02, -2.215458069781065e-02, -7.049954231688591e-03, -8.098717217863059e-03, -7.049954231687784e-03, -8.098717217862568e-03, -5.413662396825553e-02, -5.226158214487969e-02, -6.322395016535898e-02, -6.095401139778905e-02, -6.001748851420236e-02, -5.779101272405285e-02, -5.713751068158501e-02, -5.515349708561951e-02, -5.856390308467546e-02, -5.645952245440278e-02, -5.856390308467546e-02, -5.645952245440278e-02, -5.057802244321782e-02, -4.916370504427783e-02, -5.203518913726557e-02, -5.017643039932385e-02, -5.268747679696872e-02, -5.062387307607019e-02, -6.519721950746926e-02, -6.361206648864770e-02, -5.852345876958620e-02, -5.694681100465937e-02, -5.852345876958620e-02, -5.694681100465937e-02, -5.740683813465669e-02, -5.331466585955669e-02, -1.273527334976592e-01, -1.247223688207673e-01, -1.167005523848438e-01, -1.096741239912022e-01, -3.126055478564138e-02, -2.983582912048566e-02, -6.886407170122788e-02, -6.801108211804796e-02, -6.886407170122977e-02, -6.801108211804818e-02, -3.808734244317502e-02, -3.620900999212906e-02, -3.435437771961804e-02, -3.499966869244942e-02, -2.937684191237717e-02, -3.430411650398557e-02, -3.230226781375523e-02, -2.686756881186092e-02, -2.607784900336529e-03, -2.233343601057027e-02, -2.607784900327814e-03, -2.233343601056813e-02, -1.689990369948699e-02, -1.744588348511233e-02, -2.868689906599216e-03, -2.955710420088763e-03, -4.731452405563649e-03, -4.974926871867254e-03, -1.497625469768522e-02, -1.915666350860890e-02, -6.616248314987594e-03, -7.525877835837197e-03, -6.616248314987893e-03, -7.525877835836949e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.551644696718821e-10, 0.000000000000000e+00, -5.557104608786191e-10, -5.551904166468521e-10, 0.000000000000000e+00, -5.557250806072071e-10, -5.552775679242771e-10, 0.000000000000000e+00, -5.558714723122153e-10, -5.550432239984623e-10, 0.000000000000000e+00, -5.555092640981732e-10, -5.552220921294945e-10, 0.000000000000000e+00, -5.556351816806672e-10, -5.552220921294945e-10, 0.000000000000000e+00, -5.556351816806672e-10, 2.541069750532686e-06, 0.000000000000000e+00, 2.554471470667564e-06, 2.540290764925251e-06, 0.000000000000000e+00, 2.555247919217495e-06, 2.542221346452062e-06, 0.000000000000000e+00, 2.544855742033005e-06, 2.500249293275443e-06, 0.000000000000000e+00, 2.512395977715206e-06, 2.555751065449768e-06, 0.000000000000000e+00, 2.498881637177405e-06, 2.555751065449768e-06, 0.000000000000000e+00, 2.498881637177405e-06, 7.477850639917055e-03, 0.000000000000000e+00, 7.962276208733167e-03, 7.446805431010651e-03, 0.000000000000000e+00, 8.050522594672599e-03, 8.872576364794660e-03, 0.000000000000000e+00, 8.465558237090227e-03, 7.564282972534597e-03, 0.000000000000000e+00, 7.586042570315532e-03, 1.154136838973789e-02, 0.000000000000000e+00, 8.433763030449936e-03, 1.154136838973789e-02, 0.000000000000000e+00, 8.433763030449936e-03, 2.854031979220840e+00, 0.000000000000000e+00, 2.728902307718175e+00, 2.776186264304700e+00, 0.000000000000000e+00, 2.576147732892720e+00, 6.008003224993633e-03, 0.000000000000000e+00, 6.673273627070542e-03, 2.896897980552481e+00, 0.000000000000000e+00, 3.900557390003385e+00, 1.829446412009279e+00, 0.000000000000000e+00, 4.566395110256705e+00, 1.829446412009273e+00, 0.000000000000000e+00, 4.566395110256078e+00, 1.030225883947921e+04, 0.000000000000000e+00, 9.051302301873300e+03, 9.458757073387133e+03, 0.000000000000000e+00, 8.202810386122799e+03, 1.128853039062415e+02, 0.000000000000000e+00, 1.080506210131246e+02, 2.675634311869466e+04, 0.000000000000000e+00, 2.788323979600924e+04, 1.295395416994821e+04, 0.000000000000000e+00, 5.690489017981740e+04, 1.295395416994820e+04, 0.000000000000000e+00, 5.690489017983658e+04, -9.031916825587651e-07, 0.000000000000000e+00, -9.043593473592664e-07, -9.127707763841511e-07, 0.000000000000000e+00, -9.135186815908887e-07, -9.040772473467398e-07, 0.000000000000000e+00, -9.048652271705804e-07, -9.122037441123525e-07, 0.000000000000000e+00, -9.132567630602693e-07, -9.078434803498901e-07, 0.000000000000000e+00, -9.088909677084476e-07, -9.078434803498901e-07, 0.000000000000000e+00, -9.088909677084476e-07, 2.396150640103686e-05, 0.000000000000000e+00, 2.411000361606545e-05, 2.227530258243494e-05, 0.000000000000000e+00, 2.244643932047168e-05, 2.792397978233300e-05, 0.000000000000000e+00, 2.675081671105964e-05, 2.645712810838961e-05, 0.000000000000000e+00, 2.529699778202943e-05, 2.021680366458459e-05, 0.000000000000000e+00, 2.298146150737285e-05, 2.021680366458459e-05, 0.000000000000000e+00, 2.298146150737285e-05, 3.633671758038820e-03, 0.000000000000000e+00, 3.070550151205678e-03, 4.640087596581521e-03, 0.000000000000000e+00, 3.279009565625134e-03, 1.533020116789458e-02, 0.000000000000000e+00, 8.791878311720836e-03, 3.066140071081415e-02, 0.000000000000000e+00, 1.997150438238739e-02, 6.212490551084835e-04, 0.000000000000000e+00, 6.479356414381969e-03, 6.212490551083606e-04, 0.000000000000000e+00, 6.479356414382210e-03, 5.989492600727229e+00, 0.000000000000000e+00, 5.919044305400865e+00, 1.782870073021432e+00, 0.000000000000000e+00, 1.736153050675842e+00, 6.517569604365280e+00, 0.000000000000000e+00, 8.102887160735021e+00, 7.355946455824805e-05, 0.000000000000000e+00, 7.363309616369866e-05, 4.885642302612616e+00, 0.000000000000000e+00, 6.775098057335163e+00, 4.885642302612637e+00, 0.000000000000000e+00, 6.775098057335180e+00, 4.231836482675149e+04, 0.000000000000000e+00, 3.739312271029517e+04, 2.830304413174852e+04, 0.000000000000000e+00, 2.572464423045617e+04, 1.417444741049431e+05, 0.000000000000000e+00, 1.314724525367795e+05, 2.561280009095537e+01, 0.000000000000000e+00, 2.989833588852601e+01, 5.851110836393852e+04, 0.000000000000000e+00, 5.313383519482001e+04, 5.851110836391693e+04, 0.000000000000000e+00, 5.313383519481922e+04, -1.387784087033681e-01, 0.000000000000000e+00, -1.417945167690491e-01, -5.762752895651964e-02, 0.000000000000000e+00, -5.906387158884911e-02, -7.623596250197585e-02, 0.000000000000000e+00, -7.815997310288936e-02, -9.869788176722964e-02, 0.000000000000000e+00, -1.005900092421218e-01, -8.649643126916591e-02, 0.000000000000000e+00, -8.841419857494295e-02, -8.649643126916591e-02, 0.000000000000000e+00, -8.841419857494295e-02, -9.203461419896497e-02, 0.000000000000000e+00, -9.665654587665572e-02, 1.552658469160706e-03, 0.000000000000000e+00, 8.064780233040348e-04, -1.004438687253268e-02, 0.000000000000000e+00, -1.071665496286406e-02, -1.734057842540218e-02, 0.000000000000000e+00, -1.764273771165249e-02, -1.334108420607830e-02, 0.000000000000000e+00, -1.386311436754444e-02, -1.334108420607830e-02, 0.000000000000000e+00, -1.386311436754444e-02, 7.327908610670166e-03, 0.000000000000000e+00, 5.722744263087825e-03, 9.396838538249261e-01, 0.000000000000000e+00, 9.127180678311013e-01, 4.679865415925757e-01, 0.000000000000000e+00, 4.379944274375363e-01, 5.747684666344082e-02, 0.000000000000000e+00, 5.527703717458819e-02, 1.919087095625097e-01, 0.000000000000000e+00, 1.907744724896544e-01, 1.919087095625090e-01, 0.000000000000000e+00, 1.907744724896544e-01, 9.139001177818585e-03, 0.000000000000000e+00, 7.215262539881550e-03, 1.290471886362627e+02, 0.000000000000000e+00, 1.260199111395200e+02, 5.034312576755784e+01, 0.000000000000000e+00, 5.046123949262086e+01, 6.431783705630163e-02, 0.000000000000000e+00, 2.122103822654690e-02, 1.290549181068731e+01, 0.000000000000000e+00, 1.745536049549593e+01, 1.290549181068512e+01, 0.000000000000000e+00, 1.745536049549385e+01, 3.221732203199864e+03, 0.000000000000000e+00, 2.960383669344025e+03, 4.925328950630923e+05, 0.000000000000000e+00, 4.890589122702918e+05, 1.836087408963257e+05, 0.000000000000000e+00, 1.658391403668897e+05, 1.885254023027422e+01, 0.000000000000000e+00, 2.259551538055942e+01, 1.056583236870211e+05, 0.000000000000000e+00, 6.524973728282210e+04, 1.056583236870129e+05, 0.000000000000000e+00, 6.524973728282294e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.532919921715554e-05, 8.539089886667970e-05, 8.533295781625067e-05, 8.539388295273976e-05, 8.534912540409292e-05, 8.541453984276450e-05, 8.530379844826663e-05, 8.536047237493429e-05, 8.532856641777300e-05, 8.538678327927683e-05, 8.532856641777300e-05, 8.538678327927683e-05, -6.047316848817167e-04, -6.063406880260201e-04, -6.044724926839724e-04, -6.062609692668552e-04, -6.001926857909798e-04, -6.006344225980145e-04, -5.972900718617247e-04, -5.988086054253490e-04, -6.030772185032209e-04, -5.972844168155004e-04, -6.030772185032209e-04, -5.972844168155004e-04, -1.483739027029709e-02, -1.515202298465871e-02, -1.478486831211529e-02, -1.516567155451225e-02, -1.410470411080990e-02, -1.383540623628864e-02, -1.322876811029610e-02, -1.331180320170809e-02, -1.543394072656074e-02, -1.284922963590290e-02, -1.543394072656074e-02, -1.284922963590290e-02, -6.101286066464891e-02, -7.854138772738838e-02, -5.996679787139542e-02, -7.715815213240404e-02, -1.461709871031342e-02, -1.464339149888264e-02, -2.728018747342334e-02, -5.002858080336588e-02, -7.864481528915922e-02, 6.879427421195423e-03, -7.864481528915940e-02, 6.879427421195630e-03, -1.612752435953283e-02, -1.710924203119523e-02, -1.690743744340422e-02, -1.817076493942310e-02, -3.383487118906452e-02, -3.791478677970553e-02, -8.122735203627416e-03, -8.202714809757311e-03, -1.401708400313577e-02, -9.360087944198660e-03, -1.401708400313577e-02, -9.360087944198665e-03, 1.860520582996834e-03, 1.862812282235066e-03, 1.877311647490131e-03, 1.879152667447498e-03, 1.862073571214345e-03, 1.863871331246033e-03, 1.876525815241090e-03, 1.878622957244051e-03, 1.868583968313357e-03, 1.870925544164145e-03, 1.868583968313357e-03, 1.870925544164145e-03, -9.822342234716895e-04, -9.809977861055124e-04, -8.869962395594526e-04, -8.866801194299340e-04, -1.092552603034007e-03, -1.052242470154696e-03, -1.016632764066552e-03, -9.740955789974652e-04, -8.469996239720404e-04, -9.255569613631896e-04, -8.469996239720404e-04, -9.255569613631896e-04, 1.852491382374673e-03, 2.709036971973260e-03, 8.821889142117420e-04, 1.579553419853183e-03, -1.114031928579978e-02, -8.550841592528884e-03, -1.363611484946565e-02, -1.271961244366652e-02, 6.203379179395960e-03, 2.597089461900005e-03, 6.203379179395999e-03, 2.597089461900017e-03, -3.793153933079366e-02, -3.733543385275694e-02, -4.833339348046203e-02, -4.793302852215446e-02, -3.236818728657438e-02, -4.289230090834815e-02, -1.692440477989943e-03, -1.691160966255618e-03, -3.686769287083849e-02, -6.525815399193959e-02, -3.686769287083841e-02, -6.525815399193961e-02, -3.905037239450309e-03, -3.993035542657195e-03, -6.781991988071327e-03, -6.300295643799410e-03, -1.597378846837091e-02, -1.747332392776843e-02, -3.660641414082333e-02, -4.634761087519138e-02, -4.337821783756295e-03, -1.827392434623763e-02, -4.337821783756312e-03, -1.827392434623767e-02, 1.664902511156727e-01, 1.699242743995890e-01, 1.145831184108750e-01, 1.164410597640854e-01, 1.325493837629706e-01, 1.350920472890166e-01, 1.496352003456384e-01, 1.523754391681557e-01, 1.409265258155963e-01, 1.435828502312266e-01, 1.409265258155963e-01, 1.435828502312266e-01, 4.924797262546363e-02, 5.196755175268705e-02, 7.208663741206944e-03, 7.673025192144646e-03, 2.522988542080682e-02, 2.571012586541723e-02, 4.690996659050330e-02, 4.686298712341046e-02, 3.468123275558817e-02, 3.512060758654805e-02, 3.468123275558818e-02, 3.512060758654805e-02, -3.859679660544060e-03, -3.202640905443719e-03, -4.827054617139390e-02, -4.820676397880446e-02, -3.965549538525951e-02, -3.898526882018184e-02, -2.045379846257873e-02, -2.031544149184167e-02, -2.932530185624257e-02, -2.914464363179486e-02, -2.932530185624251e-02, -2.914464363179501e-02, -5.361932933885970e-03, -4.103676287271390e-03, -3.824191568606146e-02, -3.759957650612741e-02, -3.574653323933588e-02, -3.865651924777775e-02, -1.703717208314263e-02, -7.465494412391875e-03, -4.155455803436715e-02, -5.790181391683294e-02, -4.155455803436710e-02, -5.790181391683302e-02, -1.156105301599644e-02, -1.159831007598273e-02, -1.302854455689561e-03, -9.766806032922696e-04, -8.672127751744776e-03, -9.399800882138754e-03, -4.927449787726990e-02, -6.433404108167236e-02, -7.437218015493508e-03, -1.727192972559734e-02, -7.437218015493518e-03, -1.727192972559742e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
