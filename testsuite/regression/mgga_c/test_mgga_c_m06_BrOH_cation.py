
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.312808691364410e-01, -1.312798964801791e-01, -1.312760110699181e-01, -1.212941899760278e-01, -1.212923565099657e-01, -1.114155309910689e-01, -1.095296762847764e-01, -4.646766696644833e-02, -4.663912043207241e-02, -4.657095608730444e-02, -4.657691719525792e-02, -1.096079148171840e-01, -1.125334632125089e-01, -1.119960106158315e-01, -4.347907205802581e-03, -1.148511933871614e-01, -1.162030894366965e-01, -5.745510267612941e-03, -8.246681695696689e-02, -8.142339797975395e-02, -1.422674693642063e-01, 1.992414627104627e-02, 1.194131163909204e-02, -9.923695414835282e-02, -1.517867082789107e-04, -7.741147875172593e-04, -9.779656887296581e-03, -1.023207944363978e-04, -7.102666956061719e-05, -7.102666956066723e-05, -9.688495490921101e-02, -9.717740320511425e-02, -9.690172281041465e-02, -9.715971612745289e-02, -9.305528698814747e-02, -9.307062218538520e-02, -3.497905170430360e-02, -3.609960330920714e-02, -3.406512068300116e-02, -3.511213211052011e-02, -1.051759087649935e-01, -3.603083097075688e-02, -5.024531778168895e-02, -4.640839712841616e-02, -2.796550699371347e-02, -3.350458770092735e-02, -5.097900323348259e-02, -3.546240592327665e-02, 1.424948920255259e-02, -8.863048639363846e-02, 1.252399880389579e-02, -5.357030995856071e-02, 1.833718395104009e-02, 1.833718395104225e-02, -3.368435627996644e-04, -1.005918497937476e-04, -7.620390624560276e-05, -3.127990497280905e-02, -7.702509372546916e-05, -7.702509372546908e-05, -7.043176602613366e-02, -6.187560332397768e-02, -4.324348857221334e-02, -5.496503245541359e-02, -4.292579193551537e-02, -5.448125529639739e-02, -6.846737765117833e-02, -5.095674091334446e-02, -4.629358529375416e-02, -4.423276365780449e-02, -3.886568411399671e-02, -4.578564395254908e-02, -4.913894601547081e-02, 7.407825582076755e-03, -8.278399202518449e-02, -5.935689006960176e-02, -1.314727293914897e-02, -6.853380609525095e-02, -2.510381264007755e-02, -4.346503153190007e-02, 2.954280280948827e-03, -2.251145830381251e-02, 1.108844502906595e-02, 1.108844502906649e-02, -1.068618274486482e-02, -2.972242079771910e-05, -2.672172274028545e-03, -9.132533201737299e-02, -7.362133777740059e-05, -5.983460782904850e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.336781619931910e-02, -8.335458263925083e-02, -8.336771458256512e-02, -8.335582337856859e-02, -8.337341428024750e-02, -8.335478153959411e-02, -2.320146263962686e-02, -1.972009495251168e-01, -2.321646215401096e-02, -1.972170273812957e-01, -1.482788428569559e-01, -1.482778654416375e-01, -1.169924420917199e-01, 7.294670090362043e-02, -1.310041467487528e-01, -1.310799375226261e-01, -1.301613310786522e-01, -1.299452548784652e-01, -1.304576385049494e-01, -1.304509577262343e-01, -1.314718998360711e-01, -1.293452898765912e-01, 7.216650490404897e-02, -1.151429286486152e-01, -3.007154085765723e-02, -2.320758342893048e-02, 8.432860955943311e-02, -2.409989265472638e-01, -1.882567190492284e-01, -1.943519720306301e-01, -2.892497645384675e-01, 8.549864178222677e-02, 9.404153568711826e-03, -6.987024852671503e-02, -1.529166410038232e-01, -2.240307925102258e-01, 4.407253016525425e-02, -2.653354674668671e-01, 4.602685340532020e-02, -2.442307202092941e-01, -6.122199745141814e-01, 7.593574936266223e-02, -4.990454242323494e-02, -5.312316378900189e-02, -6.912652255882432e-02, 1.374960891269095e-01, -3.164595021316525e-01, 4.784276973741787e-01, -1.218023816962875e-02, -1.276731894454074e-02, -2.777969345056321e-03, -1.303806265942335e-02, -6.795574521049302e-02, -2.436224805945426e-02, -8.044177921236384e-03, -7.940413283995813e-03, -1.103494289248372e-02, -7.162757336758781e-03, -1.103494289248405e-02, -7.162757336761661e-03, -1.214435819475497e-01, -1.215905069148382e-01, -1.215407802111363e-01, -1.217173834217278e-01, -1.214387064597938e-01, -1.216083937066187e-01, -1.215461920715946e-01, -1.216985835754725e-01, -3.890310772177941e-02, -1.526112340564179e-01, -1.524247554694439e-01, -3.904276573619203e-02, -1.440369798953813e-01, -1.432281016711840e-01, -1.371960749053280e-01, -1.367274852716147e-01, -1.509003648519993e-01, -1.473639877959851e-01, -1.446359025308543e-01, -1.410955092393775e-01, -1.160514096984895e-01, 7.640126446929685e-02, -1.345600779100284e-01, -1.401227927442994e-01, -6.882629336944068e-02, 9.117896451647400e-03, -6.599819510568716e-02, -6.363591809567848e-02, -7.923770212881198e-02, -5.304648301286319e-02, -6.482560819530314e-02, -4.632278797933553e-02, -5.853736696523315e-02, -5.509298537670460e-03, -4.472968533734123e-02, -6.845233827974251e-02, -2.192082560447908e-02, -2.503425754208660e-02, 6.166511538709840e-03, -4.256142174015102e-01, -1.469802723651099e-02, -3.269089427191878e-02, -8.030778429877850e-02, -8.040810289986622e-02, -2.081540329511422e-02, -4.261373538225527e-02, -2.081540329510784e-02, -4.261373538226282e-02, -8.664950702979379e-04, -6.495171813147613e-03, -7.798087795058183e-03, -7.888152882048525e-03, -6.085207617910233e-03, -6.371527420980121e-03, -9.186416173735432e-03, -1.615548281774178e-01, -6.278047226529193e-03, -8.050160902704908e-03, -6.278047226531456e-03, -8.050160902705104e-03, -5.989233599159016e-02, -5.766822479768124e-02, -6.735137236413324e-02, -6.499447793344665e-02, -4.296599239805347e-02, -4.134745958830045e-02, -3.771538452330209e-02, -6.744478636781528e-02, -4.313130187375887e-02, -4.154159193025533e-02, -3.692837585968514e-02, -6.928631887832976e-02, -6.068207835314138e-02, -5.858296918254197e-02, -6.197778804616527e-02, 1.937663625615782e-02, -7.089400978807880e-02, 1.647518790348523e-03, -6.249820472126755e-02, -6.092012291824767e-02, -5.758907011002279e-02, -5.584820463993190e-02, -7.641663276416483e-02, -7.064229275618283e-03, -8.495763533883610e-02, -8.537775443821949e-03, -1.307370501754210e-01, -1.289168337731300e-01, 5.633620318896093e-02, -2.106976098694897e-01, 4.016526281266863e-02, -7.209245119414331e-02, -1.062727407995755e-01, -1.054648341733048e-01, -1.150849592164456e-01, 5.048676969793664e-02, -6.964638078324814e-02, -6.398527980632229e-02, -6.940100522510526e-02, -7.009656289806636e-02, -3.381833368183006e-02, -3.830888548405765e-02, -6.684123439534706e-02, -4.915305816107873e-02, -1.223737885486849e-02, -3.239595105532554e-02, -1.223737885486945e-02, -3.239595105531456e-02, -1.502918910737044e-02, -1.386020037897525e-02, -2.461324090546101e-03, -2.465994566305678e-03, -3.906128493859452e-03, -3.219123379222204e-03, -1.089556313373368e-01, -1.171356098398775e-01, -5.976703397945934e-03, -7.480790817487577e-03, -5.913415630059372e-03, -1.251527176461356e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.132201892940321e-09, 0.000000000000000e+00, 4.131793481929785e-09, 4.132100693404089e-09, 0.000000000000000e+00, 4.131728383981945e-09, 4.131815428643798e-09, 0.000000000000000e+00, 4.131262353966319e-09, 4.186964448370310e-09, 0.000000000000000e+00, -5.789620799294275e-10, 4.186079404607079e-09, 0.000000000000000e+00, -5.790477637939765e-10, -6.254975207147766e-10, 0.000000000000000e+00, -6.256258023406012e-10, 1.104578254435998e-06, 0.000000000000000e+00, 3.174653147856697e-05, 1.479545152880627e-06, 0.000000000000000e+00, 1.481207978802745e-06, 1.454873866746724e-06, 0.000000000000000e+00, 1.450117184377999e-06, 1.463240427539371e-06, 0.000000000000000e+00, 1.463073592079935e-06, 1.486100432606909e-06, 0.000000000000000e+00, 1.439217237396376e-06, 3.176029656244544e-05, 0.000000000000000e+00, 1.049867612506862e-06, 3.009589853335186e-02, 0.000000000000000e+00, 2.981046352073045e-02, 8.900049727036896e-02, 0.000000000000000e+00, 9.818162835244329e-03, 7.588585122021929e-03, 0.000000000000000e+00, 7.873362232387226e-03, 1.172239601420837e-02, 0.000000000000000e+00, 9.689457445601199e-02, 2.679791284963917e-02, 0.000000000000000e+00, 2.423034730852152e-02, 6.247282852995149e-03, 0.000000000000000e+00, 9.055628215481721e-03, 5.201872026282517e+01, 0.000000000000000e+00, 5.637434498483295e+00, 4.893494479666423e+01, 0.000000000000000e+00, 5.106529556315368e+00, 6.191397307712759e-03, 0.000000000000000e+00, 4.296539418087413e-02, 3.512300494955468e+00, 0.000000000000000e+00, 3.976377778927894e+00, 2.290625016679708e+00, 0.000000000000000e+00, -6.865482324201341e+00, 5.021869823344836e+00, 0.000000000000000e+00, 8.205385365647631e+02, 1.030388696135573e+04, 0.000000000000000e+00, 9.052188386358235e+03, 2.161482116688349e+07, 0.000000000000000e+00, 8.175553762797476e+03, 1.623285400546947e+04, 0.000000000000000e+00, 1.114030287454706e+02, 2.677017514594049e+04, 0.000000000000000e+00, 2.789726343543918e+04, 1.295743967786144e+04, 0.000000000000000e+00, 5.708686372485392e+04, 1.295743967786164e+04, 0.000000000000000e+00, 5.708686372486161e+04, -9.110464458120451e-07, 0.000000000000000e+00, -9.118260902073796e-07, -9.205942664826743e-07, 0.000000000000000e+00, -9.209523845653006e-07, -9.117533494390049e-07, 0.000000000000000e+00, -9.121978532870853e-07, -9.198587833061373e-07, 0.000000000000000e+00, -9.205653821293266e-07, 3.098249514127838e-06, 0.000000000000000e+00, -8.517241956043723e-07, -8.512863138373614e-07, 0.000000000000000e+00, 3.102443048179515e-06, 3.368899093499134e-05, 0.000000000000000e+00, 3.349599289267300e-05, 3.059055067337071e-05, 0.000000000000000e+00, 3.049488241583412e-05, 3.648918483143652e-05, 0.000000000000000e+00, 3.543385691622911e-05, 3.373585597952421e-05, 0.000000000000000e+00, 3.265518713505281e-05, 2.609720629753031e-05, 0.000000000000000e+00, 4.917414015963386e-04, 2.982222079893931e-05, 0.000000000000000e+00, 3.169915431468338e-05, -3.571683882864072e-03, 0.000000000000000e+00, 1.185825884351558e-01, -1.075080194192342e-02, 0.000000000000000e+00, -1.169165739748333e-02, 9.233240037200314e-03, 0.000000000000000e+00, 2.262970219469418e-03, -1.593532776688878e-03, 0.000000000000000e+00, -5.886270548025654e-03, -6.697048539746667e-03, 0.000000000000000e+00, 1.240558249850002e-01, -6.089879112953372e-03, 0.000000000000000e+00, -2.840818656532143e-03, 7.860705659238202e+00, 0.000000000000000e+00, 7.915786382990001e+00, 4.793037155672174e+01, 0.000000000000000e+00, 5.370234414608431e+00, 9.374716857338951e+00, 0.000000000000000e+00, 1.034443472736040e+01, -2.544805511267718e-05, 0.000000000000000e+00, -2.555276405703726e-05, 5.682557778512527e+00, 0.000000000000000e+00, 7.796927465683606e+00, 5.682557778512574e+00, 0.000000000000000e+00, 7.796927465683592e+00, 7.262583116207283e+08, 0.000000000000000e+00, 3.741272972463346e+04, 2.833511252981643e+04, 0.000000000000000e+00, 2.575450663185124e+04, 1.418775306427955e+05, 0.000000000000000e+00, 1.315792312192986e+05, 3.631093229596106e+01, 0.000000000000000e+00, 2.697122588378969e+03, 5.877007847496926e+04, 0.000000000000000e+00, 5.315287318927664e+04, 5.877007847496925e+04, 0.000000000000000e+00, 5.315287318927675e+04, -1.539690573522469e-01, 0.000000000000000e+00, -1.573105732515147e-01, -6.216514740031784e-02, 0.000000000000000e+00, -6.340258291495565e-02, 3.295523097158211e-02, 0.000000000000000e+00, 2.927458011657109e-02, 8.067040729983179e-03, 0.000000000000000e+00, -1.053843049224109e-01, 2.240879427948085e-02, 0.000000000000000e+00, 1.874642223942097e-02, 2.074310585726094e-02, 0.000000000000000e+00, -9.194142751149971e-02, -1.482040229302592e-01, 0.000000000000000e+00, -1.521521961821951e-01, -2.201617082644875e-04, 0.000000000000000e+00, 2.750355174902803e-01, -1.158615680537283e-02, 0.000000000000000e+00, 2.038268668945850e-01, -2.544691637753554e-02, 0.000000000000000e+00, -2.565730272985378e-02, -1.780805961576367e-02, 0.000000000000000e+00, -1.821886438270554e-02, -1.679503105776742e-02, 0.000000000000000e+00, 1.752290889870290e-01, -5.647256543485297e-03, 0.000000000000000e+00, 5.733371390442383e-02, 9.647920217770112e-01, 0.000000000000000e+00, 9.427961211064261e-01, 6.803593679876220e+00, 0.000000000000000e+00, 7.843878069874141e-01, 1.583064627609025e+00, 0.000000000000000e+00, 9.792869433713659e-02, 2.577498626766662e-01, 0.000000000000000e+00, 2.571834736084376e-01, 3.054201957814206e-01, 0.000000000000000e+00, 3.203671940005055e+00, 1.976306003649367e-02, 0.000000000000000e+00, 1.628048917783488e-02, -2.205757169542627e+05, 0.000000000000000e+00, -2.084319280188128e+05, 5.560366634891742e+01, 0.000000000000000e+00, 5.493335282085228e+01, 9.099939988622452e-02, 0.000000000000000e+00, 3.988036071619386e-02, 1.682453359280446e+01, 0.000000000000000e+00, 2.117069580779315e+01, 1.682453359280258e+01, 0.000000000000000e+00, 2.117069580779157e+01, -7.909706655034569e+07, 0.000000000000000e+00, -5.885568102142745e+07, 4.926262100387771e+05, 0.000000000000000e+00, 4.892019647285847e+05, -3.923491056964654e+10, 0.000000000000000e+00, -2.344512259697807e+10, -8.226675251601693e+03, 0.000000000000000e+00, -7.046698600593270e+03, 1.060464374085085e+05, 0.000000000000000e+00, 6.528017765268710e+04, 1.057299054251293e+05, 0.000000000000000e+00, 3.046181885131146e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.276217659267846e-05, -3.276413399133912e-05, -3.276216504382067e-05, -3.276392327120374e-05, -3.276109832576763e-05, -3.276385692429426e-05, -5.860604977015652e-05, 1.086106566177256e-04, -5.860103295285968e-05, 1.086325842395969e-04, 9.503989359404865e-05, 9.505093824819532e-05, -1.769895761309071e-04, -1.869624299564700e-03, -1.837028050456995e-04, -1.842104959849975e-04, -1.747838436948021e-04, -1.732579687309440e-04, -1.780293661360351e-04, -1.780160191882130e-04, -1.848561387374925e-04, -1.703373170465364e-04, -1.864939005578674e-03, -1.585594540814492e-04, -9.285700881385806e-03, -9.777120171257904e-03, -2.797833588002529e-02, -1.833677537587738e-02, -1.108565742498446e-02, -1.115586415000283e-02, -1.949832547941091e-02, -2.798037447431606e-02, -1.223187084394525e-02, -6.419080490207319e-03, -1.039199145398581e-02, -1.139686539348916e-02, -1.942868771881159e-01, -1.605415541581296e-01, -1.976402833365944e-01, -1.576967876125522e-01, -1.335689246538446e-02, -1.556909047777520e-02, -5.565795336887974e-02, -6.723046290117815e-02, -1.016586573548038e-01, 4.033254416319047e-02, -1.316882943152767e-01, -5.440639864215497e-01, -1.632674044978979e-02, -1.719913909798336e-02, 5.965182088398550e-04, -1.846124279637384e-02, 2.029331868156118e-02, -4.773691639332125e-02, -9.198750747426982e-03, -9.115202624762208e-03, -1.454737130159883e-02, -1.184161607713939e-02, -1.454737130159883e-02, -1.184161607713940e-02, 1.878647575645152e-03, 1.879815298133744e-03, 1.895476252721966e-03, 1.896178537266208e-03, 1.879786834653100e-03, 1.880584598665653e-03, 1.894282698342957e-03, 1.895368800929395e-03, -6.520063124676442e-04, 2.047377156616128e-03, 2.046276295793005e-03, -6.518443927385155e-04, -1.173099023958897e-03, -1.161105941785813e-03, -1.045493871029684e-03, -1.037052908555597e-03, -1.282029791672196e-03, -1.238462839201835e-03, -1.175534917921994e-03, -1.129196868541821e-03, -1.282596884083995e-03, -5.018074343471025e-03, -1.013402750581641e-03, -1.084775050813552e-03, 2.007892103803066e-02, -3.449612177154672e-02, 4.493603536522726e-02, 4.684905104191019e-02, -2.607188113420293e-03, 4.052942705419941e-03, 1.473882310112646e-02, 1.948818779347693e-02, 2.737184263724817e-02, -3.170181326344449e-02, 2.170614823242071e-02, 1.820390789174338e-02, -5.340103418038009e-02, -5.478261276946952e-02, -1.169682753806909e-01, -1.242840238409446e-01, -4.898720154380237e-02, -5.923757144980622e-02, 3.327252818369576e-03, 3.335469667388992e-03, -5.178491777335796e-02, -8.347760045565748e-02, -5.178491777335806e-02, -8.347760045565725e-02, 2.979394581191109e-05, -6.096878340338834e-03, -8.672747678125443e-03, -8.246159626176213e-03, -1.816491829942770e-02, -2.000414405154224e-02, -6.668385541625869e-02, 4.422442110214301e-02, -8.019988346401111e-03, -1.876545361912085e-02, -8.019988346401110e-03, -1.876545361912088e-02, 3.161126884961685e-01, 3.231936298078899e-01, 1.525873057916593e-01, 1.547005199265090e-01, -1.592680895421291e-02, -1.629824742294237e-02, -2.009023993957167e-02, 2.383413602687217e-01, -1.592778425374761e-02, -1.629462054613972e-02, -2.050310710625397e-02, 2.146244238398822e-01, 2.888047501971928e-01, 2.958322889324735e-01, 1.213668603690907e-02, -4.772635807209599e-02, 3.704033514467680e-02, -4.054254683007531e-02, 6.282198765379390e-02, 6.286981327273751e-02, 4.371642349359763e-02, 4.400037415194896e-02, 5.195154043453642e-02, -3.667936913431859e-02, 3.645421897555896e-02, -2.493171138960918e-02, -5.328986985435263e-02, -5.358927993950308e-02, -1.189089698921504e-01, -8.434082825099182e-02, -8.779202235145786e-02, -2.753269131556326e-02, -3.650647719567025e-02, -3.628713724641779e-02, -5.618423778043709e-02, -1.063999841360110e-01, -4.470142792834813e-03, -2.506902916929155e-03, 9.514372032034696e-03, 9.884502672609759e-03, -4.331509533584794e-02, -4.643199195858435e-02, -9.819994148086632e-03, 3.363528261539787e-03, -5.569290343736435e-02, -7.581692194004026e-02, -5.569290343736425e-02, -7.581692194004017e-02, 3.263052771234380e-04, 4.498420497009159e-04, -2.934970449420855e-03, -2.934598467769158e-03, 2.120771030089470e-05, 4.013092585472514e-05, 3.040833288713283e-03, 3.675334876535162e-03, -1.229881107179102e-02, -1.774846508407355e-02, -1.230748185159121e-02, 3.276021562934816e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
