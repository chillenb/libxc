
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.108334046669720e-02, -5.108383377630524e-02, -5.108440086782105e-02, -5.107704865330082e-02, -5.108113286475450e-02, -5.108113286475450e-02, -4.991591233053923e-02, -4.991884853490904e-02, -4.997944559337089e-02, -4.979409179483169e-02, -4.988114161146389e-02, -4.988114161146389e-02, -3.433898625249687e-02, -3.417636113813942e-02, -3.018952451848212e-02, -3.011769974122429e-02, -3.030650364032788e-02, -3.030650364032788e-02, -1.122637659419067e-02, -1.168364054565699e-02, -3.913835046170102e-02, -7.308829238988280e-03, -9.049788591403428e-03, -9.049788591403428e-03, -3.999244647452678e-05, -4.555400802077409e-05, -9.964305481837109e-04, -1.305682436112390e-05, -2.297492469033920e-05, -2.297492469033923e-05, -4.784016259937073e-02, -4.791838680346774e-02, -4.783980715451427e-02, -4.790899376499601e-02, -4.788184953749094e-02, -4.788184953749094e-02, -2.846661545762022e-02, -2.855768718642524e-02, -2.765036762942589e-02, -2.771742812578284e-02, -2.892440713710869e-02, -2.892440713710869e-02, -3.453350374213814e-02, -4.893537386155716e-02, -3.498411284923639e-02, -4.756604803482320e-02, -3.544518208345696e-02, -3.544518208345696e-02, -3.935882549029296e-03, -9.000586989239091e-03, -3.625943849936161e-03, -7.041259491550589e-02, -5.442131159943214e-03, -5.442131159943213e-03, -9.371573797716300e-06, -1.385603057995979e-05, -1.976206932869726e-05, -2.142904766474850e-03, -1.992725506949076e-05, -1.992725506949073e-05, -4.455404301947281e-02, -3.654514772317458e-02, -3.834634215788121e-02, -4.045370833842529e-02, -3.931022408998856e-02, -3.931022408998856e-02, -5.452781451443586e-02, -2.452139349374400e-02, -2.750144293309654e-02, -3.161134530232931e-02, -2.942928352764197e-02, -2.942928352764197e-02, -4.999607544130803e-02, -1.173970740001968e-02, -1.529670735341140e-02, -2.446258318658477e-02, -1.916653391045765e-02, -1.916653391045764e-02, -2.601509455754340e-02, -8.707066847601318e-04, -1.385708257723222e-03, -2.640447064805558e-02, -3.385026995249546e-03, -3.385026995249549e-03, -7.461376471523459e-05, -2.367381857358192e-06, -6.509551725681164e-06, -3.027029173253897e-03, -1.897950519061872e-05, -1.897950519061870e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.210901763395068e-01, -1.210909045728277e-01, -1.210918207898411e-01, -1.210809675497393e-01, -1.210869857287820e-01, -1.210869857287820e-01, -1.051618888242693e-01, -1.051644415936721e-01, -1.052134361598304e-01, -1.050189409914412e-01, -1.051120148036267e-01, -1.051120148036267e-01, -6.885942920422017e-02, -6.869491468464872e-02, -6.424543011148708e-02, -6.414396438247075e-02, -6.437585251715371e-02, -6.437585251715371e-02, -2.941335722705903e-02, -3.023736528191687e-02, -7.612568268988040e-02, -2.080115243467269e-02, -2.491646137244151e-02, -2.491646137244150e-02, -1.534802500154606e-04, -1.746157321383433e-04, -3.557246432851188e-03, -4.999865812894243e-05, -8.803348123864621e-05, -8.803348123864627e-05, -1.033084311305792e-01, -1.033759887346210e-01, -1.033070206747270e-01, -1.033668248632123e-01, -1.033450121536940e-01, -1.033450121536940e-01, -7.014901982790658e-02, -7.036438824108443e-02, -6.871730416874663e-02, -6.889271247397422e-02, -7.096744154293093e-02, -7.096744154293093e-02, -6.483771907414487e-02, -7.409748749344525e-02, -6.491628424804290e-02, -7.213269988623638e-02, -6.563227238064183e-02, -6.563227238064183e-02, -1.146588588769516e-02, -2.514049290540293e-02, -1.059681053820146e-02, -1.058059087588813e-01, -1.572940869316659e-02, -1.572940869316659e-02, -3.539146429366926e-05, -5.266695505612987e-05, -7.530053017212596e-05, -6.837124845765719e-03, -7.566045600046466e-05, -7.566045600046461e-05, -6.979103555114899e-02, -6.593052117592925e-02, -6.710209228070803e-02, -6.821685132260873e-02, -6.764282026761086e-02, -6.764282026761086e-02, -7.153937646738245e-02, -5.299727288390908e-02, -5.639956130395880e-02, -6.062432712624646e-02, -5.843185575942557e-02, -5.843185575942557e-02, -7.568960086187347e-02, -3.096397577461645e-02, -3.750221642774048e-02, -5.065571747718417e-02, -4.354981591422452e-02, -4.354981591422452e-02, -5.434535246252917e-02, -3.159211341896749e-03, -4.227569690245432e-03, -5.175185789716801e-02, -9.962248665349836e-03, -9.962248665349867e-03, -2.815509254329225e-04, -8.826198222070072e-06, -2.501666940476257e-05, -9.105477537426966e-03, -7.226205438168108e-05, -7.226205438168105e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.711547624649676e-10, 2.711612071879739e-10, 2.711750891855440e-10, 2.710796777918244e-10, 2.711317609552539e-10, 2.711317609552539e-10, 1.092177772369235e-06, 1.092415454222046e-06, 1.097958943273297e-06, 1.089023804618757e-06, 1.093128740987544e-06, 1.093128740987544e-06, 1.419514657986049e-03, 1.410461833574459e-03, 1.192024652566263e-03, 1.173542672668944e-03, 1.189528787596317e-03, 1.189528787596317e-03, 1.755578361472329e-01, 1.785288716147809e-01, 7.181813985719964e-04, 2.165419102401173e-01, 2.092869724460090e-01, 2.092869724460088e-01, 1.876405515501533e+01, 1.879926023500839e+01, 1.737254156510316e+00, 2.982576479241050e+01, 3.000271010734465e+01, 3.000271010734471e+01, 4.004450341839125e-07, 4.038751109408884e-07, 4.006045564170382e-07, 4.036315023199247e-07, 4.021763489810006e-07, 4.021763489810006e-07, 6.741651175092098e-06, 6.732822492670963e-06, 6.480469149736762e-06, 6.472733140421018e-06, 6.869328135205964e-06, 6.869328135205964e-06, 6.110031295364178e-03, 1.106606813377257e-02, 7.033238842250902e-03, 1.263604121220596e-02, 6.369329941705183e-03, 6.369329941705183e-03, 3.076725593844858e-01, 9.032131616743683e-02, 3.662701872686686e-01, 5.755701654001586e-05, 3.283197839918472e-01, 3.283197839918472e-01, 5.100567565909279e+01, 3.588005795032903e+01, 2.914742761525873e+02, 8.268976321567638e-01, 1.130318979161260e+02, 1.130318979161258e+02, 6.632035317641811e-02, 3.042202924687280e-02, 3.786429555283906e-02, 4.712686243197391e-02, 4.202073992461469e-02, 4.202073992461468e-02, 7.607559819952900e-02, 8.005912071896598e-03, 1.044289174469149e-02, 1.598762924253202e-02, 1.256816890986123e-02, 1.256816890986123e-02, 7.766204283082862e-03, 5.242018263805847e-02, 3.910836202642735e-02, 3.017936804532704e-02, 3.492446300769431e-02, 3.492446300769433e-02, 1.062448152816865e-02, 1.682506563206814e+00, 9.535812410378761e-01, 5.107133286937905e-02, 6.858644744749716e-01, 6.858644744749718e-01, 1.064477897059028e+01, 6.623662000547433e+02, 1.522012468720685e+02, 7.481702616646909e-01, 1.541938689918131e+02, 1.541938689918135e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.225738067303268e-05, -2.225832597075143e-05, -2.226243568011586e-05, -2.224846767396443e-05, -2.225579685867193e-05, -2.225579685867193e-05, -1.100405766156735e-04, -1.100869070535667e-04, -1.113476776058723e-04, -1.111541020879621e-04, -1.110558413560542e-04, -1.110558413560542e-04, -7.396949977800084e-04, -7.365203588223319e-04, -6.641406533641932e-04, -7.458492986521685e-04, -7.223624493226054e-04, -7.223624493226054e-04, -6.301535105338226e-03, -6.674412403169828e-03, -1.753314167256654e-04, -2.023812388926538e-03, -3.344623405728120e-03, -3.344623405728119e-03, -1.113694779371635e-05, -1.285236885747820e-05, -1.863823599127706e-04, -2.730339627504157e-06, -5.995553449920433e-06, -5.995553449920434e-06, -6.582439468701352e-04, -6.656778103548261e-04, -6.587191632750560e-04, -6.652754828664474e-04, -6.619276008172174e-04, -6.619276008172174e-04, -3.324491121991690e-04, -3.528630780174791e-04, -3.211158806832823e-04, -3.390507836996255e-04, -3.495540398449825e-04, -3.495540398449825e-04, -7.721774271229101e-03, -9.230077577291031e-03, -4.728611452943694e-03, -4.148073374365607e-03, -8.615243571154124e-03, -8.615243571154124e-03, -9.041686634716211e-04, -2.720836276726217e-03, -8.130367074913018e-04, -4.863629281838531e-04, -1.924252653311610e-03, -1.924252653311611e-03, -1.125244932497379e-06, -2.306127532078429e-06, -1.087601758757306e-05, -5.031711377588360e-04, -6.062699065573351e-06, -6.062699065573351e-06, -1.090300081498044e-01, -6.796099322414377e-02, -8.031851946196610e-02, -9.282369173190962e-02, -8.629867963381387e-02, -8.629867963381385e-02, -4.393643582970453e-02, -1.002971556687929e-02, -1.566832691965533e-02, -2.699345661707706e-02, -2.002709249341337e-02, -2.002709249341336e-02, -6.185989915594988e-03, -3.731964525249487e-03, -4.915921866170212e-03, -7.337041906847279e-03, -6.706221814821713e-03, -6.706221814821710e-03, -7.399763020199048e-03, -1.737928386111211e-04, -2.806657804003979e-04, -1.185864214776807e-02, -1.015823335364390e-03, -1.015823335364390e-03, -1.058471613971554e-05, -2.019903156448384e-07, -2.549855629294416e-06, -9.834574397058458e-04, -7.397109987854942e-06, -7.397109987854936e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
