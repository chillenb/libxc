
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646005790288031e-01, -1.646006638479634e-01, -1.646010671037655e-01, -1.645998046284074e-01, -1.646004624244909e-01, -1.646004624244909e-01, -1.107863943172288e-01, -1.107864558641111e-01, -1.107885770793571e-01, -1.107903035880350e-01, -1.107871554840383e-01, -2.890886208414246e-02, -6.701433813354900e-02, -1.826166961784427e-02, -1.708310745554333e-02, -1.761298584775369e-02, -1.749175349983046e-02, -1.749175349983046e-02, -1.062741512645409e-02, -1.093448920808530e-02, -7.077026134652131e-02, -5.992107650230318e-03, -7.797147706352382e-03, -7.797147706352378e-03, -3.959565456940121e-05, -4.472989948307827e-05, -8.794927766618410e-04, -1.139381069925183e-05, -2.115774673783626e-05, -2.115774673783626e-05, -4.760004536883589e-02, -4.767903739514474e-02, -4.760458167980744e-02, -1.224318986567447e-01, -4.763961730153910e-02, -4.763961730153910e-02, -9.471409660098920e-02, -9.491176806352430e-02, -9.456895893468423e-02, -9.474456126927767e-02, -9.489319172099715e-02, -2.597136611206375e-02, -2.587178493652185e-02, -2.930624997232555e-02, -2.344218088806107e-02, -2.567606637570018e-02, -2.650754354779017e-02, -6.418957210681180e-02, -2.699432973200030e-02, -8.440965446698740e-03, -2.581456407787728e-02, -3.427950461118820e-02, -4.864843226062811e-03, -4.864843226062811e-03, -1.873262684533397e-03, -1.024308185211504e-05, -1.692034278087834e-05, -2.031143328390536e-02, -2.148658734063699e-03, -1.525702892343370e-05, -3.193971595167854e-02, -3.091395792088677e-02, -6.383657027377532e-02, -3.154991617345386e-02, -3.139924994366018e-02, -3.139924994366019e-02, -3.149505569953692e-02, -2.360380185071507e-02, -2.573840470151612e-02, -2.794883947534983e-02, -2.680829619286042e-02, -6.128153196763172e-02, -2.893235436774274e-02, -4.238705188938242e-02, -1.395819012742951e-02, -5.192859886080499e-02, -1.659395949676186e-02, -1.659395949676186e-02, -5.782038541859819e-02, -8.181565440157917e-04, -1.205485821930224e-03, -2.011584649299510e-02, -2.356179453227854e-02, -2.973303116958342e-03, -5.450472044201468e-05, -8.133161485122326e-07, -6.042071970771164e-06, -2.790778007086239e-03, -1.558106620259278e-05, -1.558106620259276e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747382873945386e-01, -1.747383727047485e-01, -1.747387783059391e-01, -1.747375084877817e-01, -1.747381701097621e-01, -1.747381701097621e-01, -1.202914147432737e-01, -1.202914775447517e-01, -1.202936419986544e-01, -1.202954036988508e-01, -1.202921914258883e-01, -7.480030474081233e-02, -7.507496329060674e-02, -4.630335874835297e-02, -4.405516938370757e-02, -4.505933668387224e-02, -4.483144882270257e-02, -4.483144882270257e-02, -2.833653674240005e-02, -2.891946861484792e-02, -7.900767619048780e-02, -1.777903442585369e-02, -2.231373049359868e-02, -2.231373049359867e-02, -1.520488026655407e-04, -1.716469212397313e-04, -3.184177365184046e-03, -4.394873208085854e-05, -8.144820074096443e-05, -8.144820074096443e-05, -1.030466401647249e-01, -1.031156250890249e-01, -1.030505859820373e-01, -1.321462747126927e-01, -1.030812201496782e-01, -1.030812201496782e-01, -1.038281346471248e-01, -1.040314586538446e-01, -1.036788320534475e-01, -1.038594719679676e-01, -1.040123520846879e-01, -6.592719630043997e-02, -5.594634324611044e-02, -6.032488897850451e-02, -5.260209477792951e-02, -5.534868792373655e-02, -5.675163257983161e-02, -7.210924502370672e-02, -3.211639957987510e-02, -2.396125092431702e-02, -3.079831978749471e-02, -7.792143087337856e-02, -1.434085348515375e-02, -1.434085348515376e-02, -2.429818844145475e-03, -3.952253416742873e-05, -6.503884559323079e-05, -2.457415835517307e-02, -2.781518145603631e-03, -5.874582127401967e-05, -6.449925048279952e-02, -6.229727475536209e-02, -7.173813122961308e-02, -6.363200554850459e-02, -6.330500362306693e-02, -6.330500362306694e-02, -6.357969317367812e-02, -5.187124529863529e-02, -5.448383646801606e-02, -5.726936840229702e-02, -5.579011550789589e-02, -6.904860886416335e-02, -6.038909389078037e-02, -4.894347882857778e-02, -3.528975411223378e-02, -5.914877095673511e-02, -3.983791893155091e-02, -3.983791893155093e-02, -6.539545717536099e-02, -2.987980014781112e-03, -3.782648739548261e-03, -4.473371100223208e-02, -2.826627561701371e-02, -8.966661258516457e-03, -2.092362042346026e-04, -3.146203376338607e-06, -2.331437436677761e-05, -8.526345147080032e-03, -5.996230666656172e-05, -5.996230666656164e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.638519773420394e-09, 9.638425809433217e-09, 9.637967804376399e-09, 9.639367773364036e-09, 9.638639875829684e-09, 9.638639875829684e-09, 1.542795543410888e-05, 1.542808504212736e-05, 1.543042132607648e-05, 1.542372321087801e-05, 1.543103200368548e-05, 4.681349340175566e-07, 1.271178362119617e-02, 4.866916024871113e-04, 4.531595941036419e-04, 4.778897660937454e-04, 4.718219030722758e-04, 4.718219030722758e-04, 1.622323316359004e-01, 1.623534982272706e-01, 6.538509014678034e-03, 1.570439561865229e-01, 1.660854534423339e-01, 1.660854534423338e-01, 1.845659902669444e+01, 1.823884087379682e+01, 1.413958786431935e+00, 2.373568433849465e+01, 2.614962521781278e+01, 2.614962521781278e+01, 3.984991297798343e-07, 4.019271021047554e-07, 3.986978928150560e-07, 3.438398561072781e-06, 4.002090575927803e-07, 4.002090575927803e-07, 1.619154008784530e-04, 1.576771859054969e-04, 1.650843029052930e-04, 1.612334103920922e-04, 1.580892284783766e-04, 5.901694602694683e-06, 4.346938326904438e-03, 6.308517362635811e-03, 4.090804882292691e-03, 5.311844623218958e-03, 4.569033107925783e-03, 2.594867031286410e-02, 3.675647942288747e+01, 8.176657588862594e-02, 4.994720426786040e+01, 1.915787985739409e-05, 2.740628805560099e-01, 2.740628805560099e-01, 3.522306093461329e+07, 2.148227526749895e+01, 2.246528177260770e+02, 2.377941585362775e+02, 1.917988255157768e+07, 7.192888571484036e+01, 5.855624956060045e-02, 2.789324945204553e-02, 6.134115677008074e-02, 4.236304870106082e-02, 3.797862832139404e-02, 3.797862832139404e-02, 5.786754322879097e-02, 7.671754150929088e-03, 9.779644356125930e-03, 1.444574273751639e-02, 1.153741984458378e-02, 4.802963992425838e-02, 4.005074979068755e-03, 1.183520014334035e+00, 3.427653574168241e-02, 2.044465626754952e-01, 2.865032859382364e-02, 2.865032859382365e-02, 7.161520539750056e-02, 1.518943118051028e+00, 7.597912063933376e-01, 3.630815899888216e-02, 9.243951792733155e+01, 5.541707347777264e-01, 6.247076832155546e+00, 9.912164065008419e+01, 1.344083786227747e+02, 6.554281207893060e-01, 1.106171025735000e+02, 1.106171025735003e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.175124018818662e-17, -1.201081485491919e-54, -1.201226310989535e-54, -1.200613426068002e-54, -1.200940109602941e-54, -1.200940109602941e-54, -7.092832717355496e-48, -7.096399835508950e-48, -7.189938662916562e-48, -7.145662123887845e-48, -7.157634647176004e-48, -1.570681906032675e-04, -1.330665916207460e-41, -1.141151050638042e-03, -9.351654864830958e-04, -1.033665079407575e-03, -1.010039532297921e-03, -1.010039532297921e-03, -6.443054316734108e-03, -6.862676511509530e-03, -1.011243830855818e-42, -2.141296568889132e-03, -3.513962717226630e-03, -3.513962717226628e-03, -1.113747666784839e-05, -1.285358397700124e-05, -1.871215929204720e-04, -2.731210055686527e-06, -5.997267730805711e-06, -5.997267730805711e-06, -6.606502719026901e-04, -6.681062220702199e-04, -6.610781451061062e-04, -3.404849205645712e-23, -6.643701544461154e-04, -6.643701544461154e-04, -2.100752497188891e-20, -1.266524119605201e-45, -1.233434905637224e-45, -1.248898268378662e-45, -1.268900033990554e-45, -3.679661437883065e-04, -1.027198398381618e-02, -2.176307752507794e-02, -6.994509285566977e-03, -1.126065058674721e-02, -1.161276130453996e-02, -6.155794376268553e-40, -2.756508525061479e-35, -2.776703418314603e-03, -4.347252453649545e-35, -1.430896341060702e-03, -1.979413413571794e-03, -1.979413413571795e-03, -3.793601090744999e-27, -2.307757558715848e-06, -1.088377736402031e-05, -4.686082072936305e-34, -6.787365965659410e-27, -6.068692026780468e-06, -1.828367928679078e-01, -8.296590621864157e-02, -2.058752152372705e-38, -1.299368248367590e-01, -1.156717507867593e-01, -1.156717507867593e-01, -1.657076979735148e-01, -1.031291895471192e-02, -1.657467596439351e-02, -3.058504472377275e-02, -2.183293586984918e-02, -3.635669854835193e-39, -1.529913850559431e-02, -2.160689822201884e-37, -5.137442152746525e-03, -2.081979556657958e-38, -7.313039133909023e-03, -7.313039133909021e-03, -2.832346116015480e-39, -1.741057146410630e-04, -2.827004030118171e-04, -1.512087306853742e-02, -1.730523451576089e-34, -1.041049664962979e-03, -1.060381614369193e-05, -2.021954344342878e-07, -2.550248300690063e-06, -9.979239887385860e-04, -7.402818434091084e-06, -7.402818434091081e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
