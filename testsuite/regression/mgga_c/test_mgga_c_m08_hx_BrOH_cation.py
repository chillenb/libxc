
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_hx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.318648389715348e-01, -3.318823999482151e-01, -3.319553945009899e-01, -3.316954176369264e-01, -3.318323825720474e-01, -3.318323825720474e-01, 9.589735163863898e-03, 9.558836239133501e-03, 8.775201362597873e-03, 9.372354795285096e-03, 9.189219127161299e-03, 9.189219127161299e-03, -1.878309760098803e-02, -1.864761197206336e-02, -1.432066438971484e-02, -7.993787629793771e-03, -1.002412946841637e-02, -1.002412946841637e-02, -1.628427252044815e-04, 6.806592613472825e-04, -8.969227076142799e-02, -5.749206277790265e-02, -1.675540129412059e-02, -1.675540129412023e-02, -2.621623691604140e-02, -2.734825584856365e-02, -9.785393406666026e-02, -1.638582972308157e-02, -1.702256336192674e-02, -1.702256336192735e-02, -2.007374099817049e-01, -1.958090225838643e-01, -2.004639696394026e-01, -1.961161763110145e-01, -1.982943460976545e-01, -1.982943460976545e-01, 5.336150037650915e-02, 4.915026580705782e-02, 5.794344653268000e-02, 5.439496046999626e-02, 4.868375748168145e-02, 4.868375748168145e-02, -3.203076734199876e-02, -7.101686566530627e-02, -2.133488746335266e-02, -4.702348832504621e-02, -3.820288606283799e-02, -3.820288606283800e-02, -1.181050110391297e-01, -2.074501702821556e-02, -1.216631704252250e-01, -6.967283318094621e-02, -7.583590095190898e-02, -7.583590095190956e-02, -1.301890594068597e-02, -1.606402828020391e-02, -1.263574859674446e-02, -1.201143567623381e-01, -1.407041471083187e-02, -1.407041471083171e-02, -9.762553114206751e-02, -1.448872883399314e-02, -2.463614714735413e-02, -4.971006507464470e-02, -3.522734756382860e-02, -3.522734756382860e-02, -1.523538197222040e-01, -1.220572142891855e-02, -3.764357910672776e-02, -8.768343777847626e-02, -6.327801950292862e-02, -6.327801950292863e-02, -6.321991484520402e-02, 1.012836720026458e-03, 1.094708494434245e-02, 3.120928546784846e-03, 1.523998687855365e-02, 1.523998687855367e-02, -5.038164220454131e-03, -9.556249959134169e-02, -1.130933843504792e-01, -1.366120273213233e-02, -1.132271004447831e-01, -1.132271004447830e-01, -3.497424814404854e-02, -4.844811059594777e-03, -9.564986136557433e-03, -1.136677092181798e-01, -1.328262789593015e-02, -1.328262789593039e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_hx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.234909118839487e+00, -1.234909849914972e+00, -1.234821503098552e+00, -1.234822735944204e+00, -1.234481444780964e+00, -1.234480081491724e+00, -1.235771142777803e+00, -1.235775465264489e+00, -1.235086459573770e+00, -1.235093694817483e+00, -1.235086459573770e+00, -1.235093694817483e+00, -2.415750067842947e-01, -2.415754042857411e-01, -2.415605054157780e-01, -2.415609600812807e-01, -2.411325626685822e-01, -2.411319366141481e-01, -2.413838254862378e-01, -2.413834135905761e-01, -2.413322184170815e-01, -2.413211067384676e-01, -2.413322184170815e-01, -2.413211067384676e-01, -1.374373523434216e-02, -1.323922199719280e-02, -1.409919105254461e-02, -1.347985402911501e-02, -1.763674020358072e-02, -1.846580445183815e-02, -9.181305202461075e-03, -8.952892555429541e-03, -8.306984779213428e-03, -1.550580955477340e-02, -8.306984779213428e-03, -1.550580955477340e-02, 7.831247021684362e-03, 9.682915699916217e-03, 4.438820011749309e-03, 6.561598210068424e-03, -8.693199507322460e-02, -7.743436034082554e-02, 7.851553874993383e-02, 8.048254143452314e-02, 6.083816217955508e-02, 1.544258273519161e-02, 6.083816217957840e-02, 1.544258273521789e-02, -3.512162257968632e-02, -3.220886394589088e-02, -3.684621827085821e-02, -3.338859380305113e-02, -1.171942225563321e-01, -1.060640666694176e-01, -2.093328314193496e-02, -2.141831585224232e-02, -1.899520908817320e-02, -3.724705580656495e-02, -1.899520908817063e-02, -3.724705580655624e-02, 8.112905408775528e-01, 8.112088497915327e-01, 8.553794740376672e-01, 8.552972470566856e-01, 8.138867534171983e-01, 8.138036307359049e-01, 8.527793880089820e-01, 8.526989121628243e-01, 8.333205246997006e-01, 8.332381335451542e-01, 8.333205246997006e-01, 8.332381335451542e-01, -1.827375570249408e-01, -1.827348801606140e-01, -1.973848393724612e-01, -1.973721159858788e-01, -1.679644624387943e-01, -1.680700188397504e-01, -1.842208385891515e-01, -1.843216222524792e-01, -1.968951406491692e-01, -1.966959257723025e-01, -1.968951406491692e-01, -1.966959257723025e-01, -1.361739461045499e-01, -1.364131707427051e-01, -1.134978470599604e-01, -1.134440478289846e-01, -1.352314891318275e-01, -1.323990204923911e-01, -8.657815195458560e-02, -8.299983190602631e-02, -1.615184155915099e-01, -1.664023227721122e-01, -1.615184155915100e-01, -1.664023227721124e-01, -2.126463272210266e-02, -1.889477290659809e-02, 6.846908242883297e-02, 6.885662228956960e-02, -4.807253740385213e-02, -3.462492345593277e-02, -1.888640275379941e-01, -1.889297244944781e-01, 5.989733772900847e-02, 6.971850611053410e-02, 5.989733772899538e-02, 6.971850611057656e-02, -1.734198896766861e-02, -1.647186345725001e-02, -2.097866776136763e-02, -2.055416373664823e-02, -1.706403030271374e-02, -1.580701501047134e-02, -1.030392566311438e-01, -1.014873958108882e-01, -2.396643266998535e-02, -1.595036445553311e-02, -2.396643266998974e-02, -1.595036445553238e-02, -3.051958966066685e-01, -3.039780917561419e-01, -6.874732521937336e-02, -6.791772522008753e-02, -2.207126304459033e-01, -2.197066295137231e-01, -3.109102095075323e-01, -3.097724451284428e-01, -2.731565805915642e-01, -2.720807603470020e-01, -2.731565805915627e-01, -2.720807603470027e-01, -2.022932537268050e-01, -2.010742735775716e-01, -1.198134457404000e-01, -1.195551618836422e-01, -2.101605692876474e-01, -2.097618075149898e-01, -1.378034078287156e-01, -1.373239107759229e-01, -2.588040431224369e-01, -2.583796925213366e-01, -2.588040431224369e-01, -2.583796925213365e-01, -1.419033920766678e-01, -1.417172145490615e-01, 2.433104090176672e-02, 2.458839772558486e-02, 1.358016702132665e-02, 1.396242052533363e-02, -9.757281792583711e-02, -9.733682991837968e-02, -2.811343553128056e-02, -2.812415244072351e-02, -2.811343553128057e-02, -2.812415244072346e-02, -1.383270655278613e-01, -1.379860177340638e-01, -1.103467329577927e-01, -1.089913209982062e-01, -1.223918931543290e-01, -1.145485712712199e-01, -1.191604811262203e-01, -1.182299564199507e-01, -5.052366036048938e-02, -3.752516628102597e-02, -5.052366036049347e-02, -3.752516628107135e-02, -4.564901959865569e-02, -4.331198713771197e-02, -6.361530796504695e-03, -6.343206623643415e-03, -1.300174738162460e-02, -1.199474550034067e-02, -5.573459771652314e-02, -5.184632333861460e-02, -2.189973095591928e-02, -1.517718754910337e-02, -2.189973095592219e-02, -1.517718754910479e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.501548842520237e-10, -7.003097685040475e-10, -3.501548842520237e-10, -3.501936255832321e-10, -7.003872511664642e-10, -3.501936255832321e-10, -3.503333130861628e-10, -7.006666261723255e-10, -3.503333130861628e-10, -3.497597289455676e-10, -6.995194578911352e-10, -3.497597289455676e-10, -3.500648992244855e-10, -7.001297984489710e-10, -3.500648992244855e-10, -3.500648992244855e-10, -7.001297984489710e-10, -3.500648992244855e-10, 1.897433535639500e-06, 3.794867071278999e-06, 1.897433535639500e-06, 1.897398566999494e-06, 3.794797133998986e-06, 1.897398566999494e-06, 1.895092258701528e-06, 3.790184517403055e-06, 1.895092258701528e-06, 1.882549495921152e-06, 3.765098991842304e-06, 1.882549495921152e-06, 1.890137938572171e-06, 3.780275877144341e-06, 1.890137938572171e-06, 1.890137938572171e-06, 3.780275877144341e-06, 1.890137938572171e-06, 6.436024294224837e-03, 1.287204858844967e-02, 6.436024294224837e-03, 6.406318942068646e-03, 1.281263788413729e-02, 6.406318942068646e-03, 5.473992781871372e-03, 1.094798556374274e-02, 5.473992781871372e-03, 5.229394253618210e-03, 1.045878850723642e-02, 5.229394253618210e-03, 5.336854853240219e-03, 1.067370970648044e-02, 5.336854853240219e-03, 5.336854853240219e-03, 1.067370970648044e-02, 5.336854853240219e-03, 6.404166145050604e-01, 1.280833229010121e+00, 6.404166145050604e-01, 6.656277899078032e-01, 1.331255579815606e+00, 6.656277899078032e-01, 4.124668814567418e-03, 8.249337629134837e-03, 4.124668814567418e-03, 5.091904341110022e-01, 1.018380868222005e+00, 5.091904341110022e-01, 4.603997703366683e-01, 9.207995406733355e-01, 4.603997703366683e-01, 4.603997703366722e-01, 9.207995406733440e-01, 4.603997703366722e-01, -1.082298721059670e-01, -2.164597442204304e-01, -1.082298721059670e-01, -1.271443807692496e-01, -2.542887615270068e-01, -1.271443807692496e-01, -5.189237681455661e-01, -1.037847536291348e+00, -5.189237681455661e-01, -3.870725982751976e-02, -7.741451965365273e-02, -3.870725982751976e-02, -5.665814274734561e-02, -1.133162855120146e-01, -5.665814274734561e-02, -5.665814276839483e-02, -1.133162855193069e-01, -5.665814276839483e-02, -3.534056757095725e-07, -7.068113514191453e-07, -3.534056757095725e-07, -3.280389701247723e-07, -6.560779402495446e-07, -3.280389701247723e-07, -3.519525100210357e-07, -7.039050200420714e-07, -3.519525100210357e-07, -3.295815254995116e-07, -6.591630509990232e-07, -3.295815254995116e-07, -3.409370120786123e-07, -6.818740241572247e-07, -3.409370120786123e-07, -3.409370120786123e-07, -6.818740241572247e-07, -3.409370120786123e-07, 1.337634315371516e-05, 2.675268630743032e-05, 1.337634315371516e-05, 1.271247964410632e-05, 2.542495928821265e-05, 1.271247964410632e-05, 1.322229713902001e-05, 2.644459427804003e-05, 1.322229713902001e-05, 1.262417944883650e-05, 2.524835889767299e-05, 1.262417944883650e-05, 1.307527712499375e-05, 2.615055424998749e-05, 1.307527712499375e-05, 1.307527712499375e-05, 2.615055424998749e-05, 1.307527712499375e-05, 6.977174239925278e-03, 1.395434847985056e-02, 6.977174239925278e-03, -1.574125225778775e-02, -3.148250451557549e-02, -1.574125225778775e-02, 1.224466517739605e-02, 2.448933035479210e-02, 1.224466517739605e-02, 1.308091353649792e-02, 2.616182707299585e-02, 1.308091353649792e-02, 5.226555665995425e-03, 1.045311133199085e-02, 5.226555665995425e-03, 5.226555665995423e-03, 1.045311133199085e-02, 5.226555665995423e-03, -1.762285382791106e-01, -3.524570765582227e-01, -1.762285382791106e-01, 2.766412238124013e-01, 5.532824476248025e-01, 2.766412238124013e-01, -2.869336353628968e-01, -5.738672707257936e-01, -2.869336353628968e-01, 3.836573290463214e-05, 7.673146580926428e-05, 3.836573290463214e-05, 3.733093392448452e-01, 7.466186784896889e-01, 3.733093392448452e-01, 3.733093392448503e-01, 7.466186784896992e-01, 3.733093392448503e-01, -3.779354998001461e-02, -7.558709987422620e-02, -3.779354998001461e-02, -4.760357642611281e-02, -9.520715280779204e-02, -4.760357642611281e-02, -4.734457145437140e-01, -9.468914289482073e-01, -4.734457145437140e-01, -7.741537277178876e-01, -1.548307455435772e+00, -7.741537277178876e-01, -1.812725856867245e-01, -3.625451713451336e-01, -1.812725856867245e-01, -1.812725858420871e-01, -3.625451716427952e-01, -1.812725858420871e-01, 3.429058725211150e-01, 6.858117450422301e-01, 3.429058725211150e-01, 1.941143834780578e-01, 3.882287669561157e-01, 1.941143834780578e-01, 2.825068125366665e-01, 5.650136250733331e-01, 2.825068125366665e-01, 3.450808484940186e-01, 6.901616969880372e-01, 3.450808484940186e-01, 3.169754339949448e-01, 6.339508679898898e-01, 3.169754339949448e-01, 3.169754339949448e-01, 6.339508679898898e-01, 3.169754339949448e-01, 4.376824628207622e-01, 8.753649256415245e-01, 4.376824628207622e-01, 1.176735987831584e-02, 2.353471975663168e-02, 1.176735987831584e-02, 5.764710440505746e-03, 1.152942088101149e-02, 5.764710440505746e-03, -2.417442460018725e-02, -4.834884920037449e-02, -2.417442460018725e-02, -6.410647062530396e-03, -1.282129412506079e-02, -6.410647062530396e-03, -6.410647062530396e-03, -1.282129412506079e-02, -6.410647062530396e-03, -5.755808021230002e-03, -1.151161604246000e-02, -5.755808021230002e-03, 1.786157029044393e-01, 3.572314058088784e-01, 1.786157029044393e-01, 1.480223525128637e-01, 2.960447050257273e-01, 1.480223525128637e-01, 7.812750071556109e-02, 1.562550014311222e-01, 7.812750071556109e-02, 1.195193548303240e-01, 2.390387096606479e-01, 1.195193548303240e-01, 1.195193548303242e-01, 2.390387096606483e-01, 1.195193548303242e-01, 1.936070111681760e-02, 3.872140223363520e-02, 1.936070111681760e-02, -4.347936191777002e-01, -8.695872383554168e-01, -4.347936191777002e-01, -5.575183927959203e-01, -1.115036785591903e+00, -5.575183927959203e-01, 9.127141383730851e-02, 1.825428276746170e-01, 9.127141383730851e-02, -5.429565329278710e-01, -1.085913065855741e+00, -5.429565329278710e-01, -5.429565329278613e-01, -1.085913065855721e+00, -5.429565329278613e-01, -1.344525089730532e-01, -2.689050179468142e-01, -1.344525089730532e-01, -5.174236017103615e-02, -1.034847196653286e-01, -5.174236017103615e-02, -6.467740242598488e-02, -1.293548047757936e-01, -6.467740242598488e-02, -6.039323075279689e-01, -1.207864615055938e+00, -6.039323075279689e-01, -2.313577624706677e-01, -4.627155250495181e-01, -2.313577624706677e-01, -2.313577623770661e-01, -4.627155247615738e-01, -2.313577623770661e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.953017052286404e-04, 5.953017052286399e-04, 5.952620313175240e-04, 5.952620313175247e-04, 5.951047998189104e-04, 5.951047998189106e-04, 5.956918316945704e-04, 5.956918316945703e-04, 5.953819715289635e-04, 5.953819715289635e-04, 5.953819715289635e-04, 5.953819715289635e-04, 1.046110980830787e-03, 1.046110980830787e-03, 1.046202178452139e-03, 1.046202178452138e-03, 1.048431877265243e-03, 1.048431877265244e-03, 1.050459514214774e-03, 1.050459514214775e-03, 1.049172635968054e-03, 1.049172635968054e-03, 1.049172635968054e-03, 1.049172635968054e-03, -1.706694377171613e-02, -1.706694377171618e-02, -1.699259021431160e-02, -1.699259021431148e-02, -1.485445656793323e-02, -1.485445656793321e-02, -1.553710994887206e-02, -1.553710994887214e-02, -1.538090605137706e-02, -1.538090605137709e-02, -1.538090605137706e-02, -1.538090605137709e-02, -8.404965805148258e-02, -8.404965805148200e-02, -8.564475360534157e-02, -8.564475360534274e-02, -9.285070327142965e-03, -9.285070327142965e-03, -1.140179822656247e-01, -1.140179822656280e-01, -8.560804816466783e-02, -8.560804816467284e-02, -8.560804816467010e-02, -8.560804816466573e-02, -5.661776748448322e-05, -5.661776749308927e-05, -6.833424996187405e-05, -6.833424996425368e-05, -4.829216411699077e-03, -4.829216411699077e-03, -8.554639751114414e-06, -8.554639751114414e-06, -1.961780157684830e-05, -1.961780157413200e-05, -1.961780157219231e-05, -1.961780157219231e-05, -1.361996473118074e-02, -1.361996473118074e-02, -1.438198527700758e-02, -1.438198527700757e-02, -1.366440813255037e-02, -1.366440813255035e-02, -1.433662439388977e-02, -1.433662439388977e-02, -1.399925914386160e-02, -1.399925914386160e-02, -1.399925914386160e-02, -1.399925914386160e-02, 2.510987378475633e-03, 2.510987378475631e-03, 2.860494075249925e-03, 2.860494075249924e-03, 2.241789748057130e-03, 2.241789748057132e-03, 2.610619134947615e-03, 2.610619134947616e-03, 2.816940383809874e-03, 2.816940383809874e-03, 2.816940383809874e-03, 2.816940383809874e-03, 2.254570580695888e-02, 2.254570580695888e-02, 5.439741476647080e-02, 5.439741476647082e-02, 1.561394207399091e-02, 1.561394207399092e-02, 2.165501427456396e-03, 2.165501427456390e-03, 4.004458938303598e-02, 4.004458938303597e-02, 4.004458938303602e-02, 4.004458938303605e-02, -6.299559529188269e-02, -6.299559529187555e-02, -8.446042604944326e-02, -8.446042604944339e-02, -5.434621521600347e-02, -5.434621521600694e-02, 4.202217941328451e-03, 4.202217941328451e-03, -1.207308593271590e-01, -1.207308593271509e-01, -1.207308593271820e-01, -1.207308593271719e-01, -2.793591994634758e-06, -2.793591995733329e-06, -7.081535045202954e-06, -7.081535045202954e-06, -2.641186475364307e-05, -2.641186475800811e-05, -2.385759088389900e-02, -2.385759088389719e-02, -1.636801317338013e-05, -1.636801317007551e-05, -1.636801317007549e-05, -1.636801317054760e-05, -1.034118991879364e-01, -1.034118991879510e-01, -6.117911555302997e-01, -6.117911555302965e-01, -4.948105265027277e-01, -4.948105265027278e-01, -3.242973916875713e-01, -3.242973916875677e-01, -4.159493606559396e-01, -4.159493606559438e-01, -4.159493606559396e-01, -4.159493606559438e-01, -3.329455820668059e-01, -3.329455820668116e-01, 2.045109921066423e-02, 2.045109921066423e-02, 9.436320348032882e-02, 9.436320348032887e-02, 1.143974775393517e-01, 1.143974775393516e-01, 1.694499780442296e-01, 1.694499780442297e-01, 1.694499780442296e-01, 1.694499780442297e-01, 4.878236938726358e-02, 4.878236938726360e-02, -5.597481371049193e-02, -5.597481371049182e-02, -5.881121182505521e-02, -5.881121182505521e-02, 7.585787226547198e-03, 7.585787226547243e-03, -3.828295801519557e-02, -3.828295801519552e-02, -3.828295801519564e-02, -3.828295801519573e-02, 2.786039328090397e-02, 2.786039328090398e-02, -4.304963122295417e-03, -4.304963122299391e-03, -9.705986777761732e-03, -9.705986777761732e-03, 3.677656793306244e-02, 3.677656793306244e-02, -6.273409688460513e-02, -6.273409688461125e-02, -6.273409688460499e-02, -6.273409688461111e-02, -7.234489360908848e-05, -7.234489360138214e-05, -1.860902529754835e-07, -1.860902524673564e-07, -4.651732493735440e-06, -4.651732493735440e-06, -5.845139397521795e-02, -5.845139397521470e-02, -1.885794784128061e-05, -1.885794784128061e-05, -1.885794783775064e-05, -1.885794783669144e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
