
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_hx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.254585836637057e-01, -1.254584408876313e-01, -1.254579128836475e-01, -2.625753297370297e-01, -2.988655778251607e-01, -3.352608582648292e-01, 1.525445742338461e-02, 4.366878397806943e-02, 4.264238402229127e-02, 4.305830937143145e-02, 4.301132149659805e-02, 1.447492859241294e-02, -1.610309018533851e-01, -4.145054918425198e-02, 3.620280270039989e-02, 1.771638984875888e-03, -1.763526923363746e-01, 3.882325238975705e-02, -2.228808551938322e-02, -5.416287367131454e-02, -1.515937778999838e-02, -5.474313112725794e-02, -1.071792441031723e-02, -1.100476753423325e-02, -2.621584313496990e-02, -2.734795643403062e-02, -9.763136149286462e-02, -1.638580812920328e-02, -1.702257929495008e-02, -1.702257929495069e-02, -1.790994266078251e-01, -1.960033224979534e-01, -2.006705170706182e-01, -1.963077390368733e-01, -1.592876324537556e-01, -1.775291151944537e-01, 2.685931888951765e-02, 2.285184666560085e-02, 6.285262088609528e-02, 5.845667319410486e-02, -1.042919760194576e-02, 2.308141385818817e-02, -3.565877105387665e-02, -1.002451931579789e-01, -1.864045208579163e-03, -2.331002174114797e-02, -3.933419686295108e-02, -3.086594895834615e-02, -1.184018616090625e-01, -4.010076259411768e-02, -1.196791148455463e-01, -4.751095658058404e-02, -8.062983418307632e-02, -8.062983418307698e-02, -1.301890483922976e-02, -1.606403253741827e-02, -1.263571052745724e-02, -1.185758442124758e-01, -1.407039336417456e-02, -1.407039336417440e-02, -3.082568045980634e-02, 2.178592535394137e-02, -1.986050757205275e-01, -8.826430543292500e-02, -2.053837732529117e-01, -8.164398868805445e-02, -1.004288935394161e-01, -4.108846974095785e-02, -4.327581481942515e-02, -9.323896326821234e-02, -6.461465020208669e-02, -5.838110919083866e-02, -6.221769547256380e-02, -2.550744322494485e-02, -1.550924814921578e-02, -6.145691825929237e-03, -6.793951111870556e-03, -6.571396735202997e-03, 2.371229152290286e-03, 1.999513198148789e-01, -1.131911041227766e-01, -1.956822473284781e-02, -1.135271853941359e-01, -1.135271853941359e-01, 9.326975852953728e-02, -4.844811143538265e-03, 2.586000903127840e-02, 2.196171009380865e-02, -1.328263532353752e-02, -1.328233254703574e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_hx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.220240948366821e-01, -1.220243874474077e-01, -1.220414911996628e-01, -1.220419846170577e-01, -1.221128274259003e-01, -1.221122819182559e-01, -8.227686263882222e-01, -8.227719242535955e-01, -1.035124564580451e+00, -1.035130970193688e+00, -1.256381218497415e+00, -1.256388541265114e+00, -2.425837053610321e-01, -2.425839457461361e-01, -2.347946506663916e-01, -2.347939497756346e-01, -2.337441307248355e-01, -2.337450189299045e-01, -2.341846388351116e-01, -2.341852548183898e-01, -2.341258173897922e-01, -2.341422051498944e-01, -2.421971842422416e-01, -2.421900890935293e-01, 1.102471006150264e-01, 1.115199241925520e-01, -1.850005524435836e-02, -1.766638153055640e-02, 8.139649427879629e-02, 8.151765042964537e-02, 2.411288104829908e-03, 2.589669935943399e-03, 8.023201473000470e-02, 5.710853461563128e-02, 7.752474216077132e-02, 7.893847031880219e-02, -4.213679783739176e-02, -3.775640838787898e-02, -7.033581973889956e-02, -6.236372524588107e-02, 1.350736464286507e-02, 1.711245784805895e-02, 9.551064078748042e-02, 9.731499626677226e-02, 8.544022432963783e-02, 5.969682755961558e-02, 8.416946759231675e-02, 5.744426539779351e-02, -3.511900650844511e-02, -3.220634681226132e-02, -3.684422430170006e-02, -3.338668553222836e-02, -1.158572115251865e-01, -1.047863476376964e-01, -2.093314241357583e-02, -2.141817369394316e-02, -1.899530731172568e-02, -3.724719065694895e-02, -1.899530731172324e-02, -3.724719065694022e-02, 4.862170627496413e-01, 4.861446971641419e-01, 8.586806069778939e-01, 8.585982903892719e-01, 8.169780509235275e-01, 8.168948336215950e-01, 8.560069412316701e-01, 8.559263790224078e-01, 2.014540357563604e-01, 2.013879690104982e-01, 5.002564403531392e-01, 5.001831584099301e-01, -1.769276455117695e-01, -1.769280005434679e-01, -1.917634669204253e-01, -1.917668111709666e-01, -1.660227644863193e-01, -1.661497893631019e-01, -1.827390715463621e-01, -1.828582013001245e-01, -1.595425745530609e-01, -1.598785901431939e-01, -1.909676205597523e-01, -1.910201992694483e-01, -1.255005684601800e-01, -1.257543388698120e-01, -1.990234577160529e-01, -1.989527366153600e-01, -1.371648469441144e-01, -1.356444713518021e-01, -1.650016741496055e-01, -1.625646740271235e-01, -1.543115048710872e-01, -1.592815810733102e-01, -2.060405863221828e-01, -2.103031685720280e-01, -2.085799688727290e-02, -1.847458444200327e-02, 4.452418133738944e-03, 5.184870215781549e-03, -4.581006529367639e-02, -3.285055201214925e-02, -4.262591663453974e-01, -4.263079911925005e-01, 1.825453143537477e-02, 2.924978689100824e-02, 1.825453143536196e-02, 2.924978689104952e-02, -1.734198165143198e-02, -1.647185630490720e-02, -2.097869578158166e-02, -2.055419150527551e-02, -1.706377607647989e-02, -1.580676920700639e-02, -9.598478508779468e-02, -9.447885197705856e-02, -2.396627357956995e-02, -1.595023213433167e-02, -2.396627357957436e-02, -1.595023213433107e-02, -4.719490407780650e-01, -4.709520687407441e-01, 3.893083746417737e-02, 3.961261312501797e-02, -3.813867175632111e-01, -3.798323613179570e-01, -2.992111364664015e-01, -2.979451899103930e-01, -3.160329493904879e-01, -3.144330938123024e-01, -2.921852854323731e-01, -2.909503474510617e-01, -2.873887325580465e-01, -2.863019706109353e-01, -9.890521604458653e-02, -9.845410403629666e-02, -1.463631522666337e-01, -1.459274052965001e-01, -1.502811238137711e-01, -1.497746247563041e-01, -2.818016022472564e-01, -2.813696322640169e-01, -1.760975827026799e-01, -1.756979797081462e-01, -1.311594237350281e-01, -1.309749901002208e-01, -3.827608380063103e-02, -3.754605597095322e-02, -2.900206770933206e-02, -2.792464849562070e-02, -8.658004271262811e-02, -8.624874740020207e-02, -2.541043087018997e-02, -2.543815480507152e-02, -2.553559239306436e-02, -2.556316396266833e-02, -1.388962842206999e-01, -1.386599754426023e-01, 1.413415956543651e-01, 1.385004719262308e-01, -1.229404406888317e-01, -1.150811422279159e-01, -1.142396370357919e-01, -1.131682495756213e-01, -5.108967829563097e-02, -3.801190628756730e-02, -5.108967829563504e-02, -3.801190628761263e-02, 1.193442525355031e-01, 1.131117033884578e-01, -6.361531351157945e-03, -6.343207177600478e-03, 3.507883640778552e-02, 3.235629371021110e-02, -3.546535611884907e-01, -3.554150819144042e-01, -2.189978543879316e-02, -1.517723374496158e-02, -2.189756612175390e-02, -1.517535206626058e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.482421757638311e-08, -2.964843515276623e-08, -1.482421757638311e-08, -1.482542324388322e-08, -2.965084648776644e-08, -1.482542324388322e-08, -1.483017903304095e-08, -2.966035806608190e-08, -1.483017903304095e-08, -1.293741233630261e-09, -2.587482467260522e-09, -1.293741233630261e-09, -6.676685257115532e-10, -1.335337051423106e-09, -6.676685257115532e-10, -3.257511695455121e-10, -6.515023390910241e-10, -3.257511695455121e-10, 1.651965884274658e-06, 3.303931768549316e-06, 1.651965884274658e-06, 6.896115477957626e-07, 1.379223095591525e-06, 6.896115477957626e-07, 6.921879456726713e-07, 1.384375891345343e-06, 6.921879456726713e-07, 6.908270572305238e-07, 1.381654114461047e-06, 6.908270572305238e-07, 6.913316643262438e-07, 1.382663328652488e-06, 6.913316643262438e-07, 1.660473004468667e-06, 3.320946008937335e-06, 1.660473004468667e-06, 3.012030529821405e-02, 6.024061059642810e-02, 3.012030529821405e-02, 8.830530448555408e-03, 1.766106089711082e-02, 8.830530448555408e-03, 1.345729055684205e-03, 2.691458111368410e-03, 1.345729055684205e-03, 4.328686413266857e-03, 8.657372826533715e-03, 4.328686413266857e-03, 3.418741850683548e-02, 6.837483701367096e-02, 3.418741850683548e-02, 1.404282501863963e-03, 2.808565003727925e-03, 1.404282501863963e-03, 1.580642553544253e+00, 3.161285107088506e+00, 1.580642553544253e+00, 3.157253261817252e+00, 6.314506523634504e+00, 3.157253261817252e+00, 1.113868462658372e-03, 2.227736925316744e-03, 1.113868462658372e-03, 2.897544439238610e-01, 5.795088878477210e-01, 2.897544439238610e-01, 1.226443808448212e-01, 2.452887616896428e-01, 1.226443808448212e-01, 1.353446649861133e-01, 2.706893299722272e-01, 1.353446649861133e-01, -8.225657434402518e-01, -1.645131486895388e+00, -8.225657434402518e-01, -5.438613488373318e-01, -1.087722697671698e+00, -5.438613488373318e-01, -1.872569217284651e+00, -3.745138434569620e+00, -1.872569217284651e+00, -2.188025307809014e-01, -4.376050615219761e-01, -2.188025307809014e-01, -1.314275235327893e-02, -2.628550471226435e-02, -1.314275235327893e-02, -1.314275234329577e-02, -2.628550469045557e-02, -1.314275234329577e-02, -6.390328107534983e-07, -1.278065621506996e-06, -6.390328107534983e-07, -3.260803195873315e-07, -6.521606391746631e-07, -3.260803195873315e-07, -3.498809454160424e-07, -6.997618908320848e-07, -3.498809454160424e-07, -3.276511724596508e-07, -6.553023449193016e-07, -3.276511724596508e-07, -1.013891543082286e-06, -2.027783086164571e-06, -1.013891543082286e-06, -6.156656940505132e-07, -1.231331388101026e-06, -6.156656940505132e-07, 2.726242410379750e-05, 5.452484820759500e-05, 2.726242410379750e-05, 2.626251262734122e-05, 5.252502525468245e-05, 2.626251262734122e-05, 1.111108892055068e-05, 2.222217784110136e-05, 1.111108892055068e-05, 1.090498813266037e-05, 2.180997626532076e-05, 1.090498813266037e-05, 5.149373872222225e-05, 1.029874774444445e-04, 5.149373872222225e-05, 2.635202373208662e-05, 5.270404746417325e-05, 2.635202373208662e-05, 7.893821556382258e-03, 1.578764311276452e-02, 7.893821556382258e-03, -9.545387237489572e-03, -1.909077447497915e-02, -9.545387237489572e-03, 6.564101656800721e-03, 1.312820331360144e-02, 6.564101656800721e-03, 5.666900075475594e-03, 1.133380015095119e-02, 5.666900075475594e-03, 5.497982736061704e-03, 1.099596547212341e-02, 5.497982736061704e-03, 3.647619115686146e-03, 7.295238231372293e-03, 3.647619115686146e-03, -1.083120678455449e-01, -2.166241356910909e-01, -1.083120678455449e-01, 9.278784444121514e-01, 1.855756888824303e+00, 9.278784444121514e-01, -1.121345219992138e+00, -2.242690439984272e+00, -1.121345219992138e+00, 1.056979195032056e-05, 2.113958390064112e-05, 1.056979195032056e-05, 1.478588995109142e+00, 2.957177990218284e+00, 1.478588995109142e+00, 1.478588995109162e+00, 2.957177990218325e+00, 1.478588995109162e+00, -5.496879986411046e-02, -1.099375996888935e-01, -5.496879986411046e-02, -2.187308911893037e-02, -4.374617825691897e-02, -2.187308911893037e-02, -2.508301702943423e+00, -5.016603405444612e+00, -2.508301702943423e+00, -3.277491470968493e+00, -6.554982941937014e+00, -3.277491470968493e+00, -5.775322209178749e-01, -1.155064441801362e+00, -5.775322209178749e-01, -5.775322209186482e-01, -1.155064441777931e+00, -5.775322209186482e-01, 3.163473767738696e-01, 6.326947535477392e-01, 3.163473767738696e-01, 1.812233615327359e-01, 3.624467230654717e-01, 1.812233615327359e-01, 3.551370186343843e-01, 7.102740372687686e-01, 3.551370186343843e-01, 3.604879896026686e-01, 7.209759792053373e-01, 3.604879896026686e-01, 3.884901724601013e-01, 7.769803449202026e-01, 3.884901724601013e-01, 3.352916751854801e-01, 6.705833503709602e-01, 3.352916751854801e-01, 4.132280207307020e-01, 8.264560414614041e-01, 4.132280207307020e-01, 2.743847657999266e-02, 5.487695315998533e-02, 2.743847657999266e-02, 8.322618795091772e-03, 1.664523759018354e-02, 8.322618795091772e-03, -2.195888305290121e-02, -4.391776610580241e-02, -2.195888305290121e-02, -5.877987306525691e-03, -1.175597461305138e-02, -5.877987306525691e-03, -8.592718465175713e-03, -1.718543693035143e-02, -8.592718465175713e-03, -5.960294843131513e-03, -1.192058968626303e-02, -5.960294843131513e-03, 5.327961480833444e-01, 1.065592296166689e+00, 5.327961480833444e-01, 3.195176753715044e-01, 6.390353507430088e-01, 3.195176753715044e-01, 9.882746555421085e-02, 1.976549311084217e-01, 9.882746555421085e-02, 2.044546539871100e-01, 4.089093079742201e-01, 2.044546539871100e-01, 2.035324332775518e-01, 4.070648665551036e-01, 2.035324332775518e-01, 1.484304062874002e-02, 2.968608125748003e-02, 1.484304062874002e-02, -2.780804082073830e+04, -5.561608164147659e+04, -2.780804082073830e+04, -3.690601396085934e-01, -7.381202792171883e-01, -3.690601396085934e-01, 1.084097083458921e-01, 2.168194166917842e-01, 1.084097083458921e-01, -3.601056936653330e-01, -7.202113873306617e-01, -3.601056936653330e-01, -3.601056936653261e-01, -7.202113873306573e-01, -3.601056936653261e-01, -8.247853863244879e+06, -1.649570772648976e+07, -8.247853863244879e+06, -2.975408019641381e-03, -5.950816583117959e-03, -2.975408019641381e-03, -3.286150922482561e+09, -6.572301844965122e+09, -3.286150922482561e+09, -4.814821340424450e+02, -9.629642680848900e+02, -4.814821340424450e+02, -9.420981594933646e-02, -1.884196319495016e-01, -9.420981594933646e-02, -1.903720328335885e+01, -3.807440656715911e+01, -1.903720328335885e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_hx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.544213050559670e-06, -6.544213050559670e-06, -6.534029257126021e-06, -6.534029257126062e-06, -6.492808983769935e-06, -6.492808983769935e-06, 3.938182790573804e-04, 3.938182790573803e-04, 4.992250643018117e-04, 4.992250643018115e-04, 6.053820798698392e-04, 6.053820798698392e-04, 1.106906134807459e-03, 1.106906134807459e-03, 1.412114270943859e-03, 1.412114270943858e-03, 1.407377763887447e-03, 1.407377763887447e-03, 1.409185631889137e-03, 1.409185631889137e-03, 1.409241124348898e-03, 1.409241124348898e-03, 1.105444046786481e-03, 1.105444046786481e-03, -2.780136151670167e-02, -2.780136151670169e-02, -1.867322925307223e-02, -1.867322925307213e-02, -1.264858527749500e-02, -1.264858527749499e-02, -1.499761343543025e-02, -1.499761343543034e-02, -2.405586281605202e-02, -2.405586281605206e-02, -1.283324425246149e-02, -1.283324425246153e-02, -9.393744116229014e-02, -9.393744116228965e-02, -1.090021069188888e-01, -1.090021069188893e-01, -7.590581348368155e-03, -7.590581348368155e-03, -1.161396564736554e-01, -1.161396564736587e-01, -8.414212794306367e-02, -8.414212794306876e-02, -8.421177444339598e-02, -8.421177444339153e-02, -5.661255226005092e-05, -5.661255226865697e-05, -6.832966981329157e-05, -6.832966981567119e-05, -4.774768842990824e-03, -4.774768842990824e-03, -8.554569962600836e-06, -8.554569962600836e-06, -1.961791487494238e-05, -1.961791487222607e-05, -1.961791487028638e-05, -1.961791487028638e-05, -8.721154743939519e-03, -8.721154743939521e-03, -1.443232536377389e-02, -1.443232536377389e-02, -1.371152332914807e-02, -1.371152332914805e-02, -1.438584030016277e-02, -1.438584030016277e-02, -4.561865571037989e-03, -4.561865571037989e-03, -8.975261007204489e-03, -8.975261007204489e-03, 1.504126177119290e-03, 1.504126177119289e-03, 1.859603675881066e-03, 1.859603675881066e-03, 2.425585977180055e-03, 2.425585977180057e-03, 2.765016488024801e-03, 2.765016488024802e-03, 5.650706117015032e-04, 5.650706117015032e-04, 1.841635670666808e-03, 1.841635670666808e-03, 1.765682287639916e-02, 1.765682287639916e-02, 1.195368240429180e-01, 1.195368240429181e-01, 2.220880585404756e-02, 2.220880585404757e-02, 4.082892700684240e-02, 4.082892700684241e-02, 3.663769197706264e-02, 3.663769197706263e-02, 6.213948318815503e-02, 6.213948318815506e-02, -6.415173317796628e-02, -6.415173317795916e-02, -8.874669432619665e-02, -8.874669432619693e-02, -4.934129052649233e-02, -4.934129052649563e-02, 1.614489658653800e-02, 1.614489658653800e-02, -1.077722693823047e-01, -1.077722693822971e-01, -1.077722693823277e-01, -1.077722693823182e-01, -2.793590528708751e-06, -2.793590529807322e-06, -7.081546667355436e-06, -7.081546667355436e-06, -2.641137307747480e-05, -2.641137308183983e-05, -2.252351585563291e-02, -2.252351585563108e-02, -1.636785965033307e-05, -1.636785964702845e-05, -1.636785964702843e-05, -1.636785964750053e-05, 3.188660457033215e-01, 3.188660457033072e-01, -8.932902806915879e-01, -8.932902806915849e-01, 4.068066513230488e-01, 4.068066513230502e-01, -2.414732180169303e-01, -2.414732180169264e-01, 2.389116914237541e-01, 2.389116914237497e-01, -2.373110852130964e-01, -2.373110852131006e-01, -2.330534987437902e-01, -2.330534987437962e-01, 6.736859353621210e-03, 6.736859353621210e-03, 5.141043518059087e-02, 5.141043518059089e-02, 1.273657566518402e-01, 1.273657566518402e-01, 1.876184211357549e-01, 1.876184211357550e-01, 1.028876610291026e-01, 1.028876610291026e-01, 4.283557626307846e-02, 4.283557626307848e-02, -6.358060842897229e-02, -6.358060842897205e-02, -6.636970830285122e-02, -6.636970830285122e-02, -3.408803239233411e-03, -3.408803239233378e-03, -5.760643600541392e-02, -5.760643600541387e-02, -5.741125870206355e-02, -5.741125870206362e-02, 3.215314500157030e-02, 3.215314500157032e-02, 6.244815900506812e-02, 6.244815900507011e-02, -9.744605784465255e-03, -9.744605784465255e-03, 3.086255968447566e-02, 3.086255968447566e-02, -6.362981640695219e-02, -6.362981640695831e-02, -6.362981640695212e-02, -6.362981640695824e-02, 1.546586628670976e-03, 1.546586628677582e-03, -1.860902730061660e-07, -1.860902724980389e-07, 1.021894028990762e-04, 1.021894028990762e-04, 2.884619819614982e-01, 2.884619819614999e-01, -1.885801302884617e-05, -1.885801302884617e-05, -1.885535574120239e-05, -1.885535574014320e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
