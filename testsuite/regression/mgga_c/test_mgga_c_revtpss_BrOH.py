
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698516514e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -2.579848424508499e-02, -6.686302819127442e-02, -1.296768618709012e-02, -1.096615750751103e-02, -1.183152697319436e-02, -1.302084041089727e-02, -1.302084041089727e-02, -1.140553673166156e-02, -1.195449678428219e-02, -7.129454252820250e-02, -2.339019175165337e-03, -1.156146853194525e-02, -1.156146853194525e-02, -4.357438610503839e-07, -5.299088714707555e-07, -6.475155238673469e-05, -5.734707987340089e-09, -5.293775929955803e-07, -5.293775929956440e-07, -5.180423994256341e-02, -5.191277430128680e-02, -5.181623580703656e-02, -1.224181159734425e-01, -5.185865935589845e-02, -5.185865935589845e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572412e-02, -9.491339721119328e-02, -2.280221048989799e-02, -3.175617234675502e-02, -3.864292938806999e-02, -2.819619388112536e-02, -3.357925884294209e-02, -3.423322332041487e-02, -6.444458984389427e-02, -2.795790560897061e-02, -6.130859566221308e-03, -2.775589238622643e-02, -3.791700652545561e-02, -1.987955337884407e-03, -1.987955337884407e-03, -3.066310498112501e-03, -1.128961080261812e-08, -1.185549433906886e-08, -2.111687625325582e-02, -3.174878197427740e-03, -9.103276167164076e-09, -4.443868955412809e-02, -4.342730862915586e-02, -6.421258200260356e-02, -4.410541012475302e-02, -4.396648610019925e-02, -4.396648610019925e-02, -4.372839226784027e-02, -3.032000962291815e-02, -3.466562090723996e-02, -3.857292978064052e-02, -3.660138428015533e-02, -6.165502636499921e-02, -3.710691206451496e-02, -4.342835275928391e-02, -1.428964900278353e-02, -5.212060951466563e-02, -1.862877356305933e-02, -1.862877356305935e-02, -5.782933926396749e-02, -4.478278544765221e-05, -1.289039469588576e-04, -2.463955251290719e-02, -2.479856847389609e-02, -6.862251514315450e-04, -3.406043741517818e-07, -2.968465695496427e-11, -1.203966875355023e-09, -6.860703125710406e-04, -6.071577706815175e-09, -6.071577714329814e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821491129e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -7.569954142817278e-02, -7.491623656166166e-02, -4.642572526501652e-02, -4.134133349154537e-02, -4.794116524628907e-02, -4.655296298278792e-02, -4.655296298278792e-02, -3.765000580096665e-02, -3.870105525070897e-02, -7.955565354779474e-02, -1.103115194698804e-02, -3.795505901972424e-02, -3.795505901972424e-02, -2.578621974583487e-06, -3.131979002560213e-06, -3.619913579948931e-04, -3.450158069873093e-08, -3.129461830644220e-06, -3.129461830638923e-06, -1.171371413391348e-01, -1.173583130294388e-01, -1.171615414969846e-01, -1.321322029122264e-01, -1.172479414953082e-01, -1.172479414953082e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -6.922891179985946e-02, -6.992393883844722e-02, -7.562577471486481e-02, -6.688108349701910e-02, -7.081723579858837e-02, -7.199359091384744e-02, -7.237723572555273e-02, -3.318915835573125e-02, -2.489563947323940e-02, -3.296452513148780e-02, -8.900265891501780e-02, -9.501637927104262e-03, -9.501637927104262e-03, -3.946287688264066e-03, -7.350738037151269e-08, -7.152272476046663e-08, -2.549362941948338e-02, -4.083422991717209e-03, -5.475608211607553e-08, -8.359481322476660e-02, -8.033732671669211e-02, -7.213338981778680e-02, -5.158850415431179e-02, -8.178452444489737e-02, -8.178452444489737e-02, -8.134083998047735e-02, -6.688541010754399e-02, -6.983221103634052e-02, -7.293638416248865e-02, -7.125210084350089e-02, -6.944209849581726e-02, -7.537474331695584e-02, -5.006348929577377e-02, -4.519544738277614e-02, -5.935291128433449e-02, -5.575555178204075e-02, -5.208713198320164e-02, -6.540488546969517e-02, -2.519502451492351e-04, -7.097327178295831e-04, -5.856935779633105e-02, -2.965891225314009e-02, -3.551349165855870e-03, -2.010293732260483e-06, -1.816085218492232e-10, -7.306182421122856e-09, -3.548709700329573e-03, -3.661949801952466e-08, -3.661949801628328e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.147718495638127e-09, 8.147639422954951e-09, 8.147228442600387e-09, 8.148524493556326e-09, 8.147677282150960e-09, 8.147677282150960e-09, 1.149307014000050e-05, 1.149297391480334e-05, 1.148844275177404e-05, 1.148653493924161e-05, 1.149282533484084e-05, 3.156498079345631e-07, 8.167119208549975e-03, 3.261026409027592e-04, 2.904555501366330e-04, 4.582605924588112e-04, 3.270529224531450e-04, 3.270529224531450e-04, 1.359452993235969e-01, 1.361817983933214e-01, 3.990104051789617e-03, 6.899873451017964e-02, 1.359030039526643e-01, 1.359030039526643e-01, 7.462022333333358e-02, 7.858477649170931e-02, 8.226675203118576e-02, 5.377185902632723e-03, 8.286734700992389e-02, 8.286734701007281e-02, 4.462714472854434e-07, 4.513885738615637e-07, 4.468355436355469e-07, 2.297458926478586e-06, 4.488254164504160e-07, 4.488254164504160e-07, 1.141371680434514e-04, 1.109905480717616e-04, 1.154407957542619e-04, 1.129404200233150e-04, 1.103733960085537e-04, 4.074284059507705e-06, 3.596020522537047e-03, 5.847501597263461e-03, 3.261562753443019e-03, 4.678418867910148e-03, 3.950093059392942e-03, 1.216484705514294e-02, 1.512059771589781e+01, 5.569416694658701e-02, 1.589301173696347e+01, 1.653066439120170e-05, 1.203759675161035e-01, 1.203759675161035e-01, 2.012797916043335e+06, 1.185799230073135e-02, 4.404460968357859e-02, 9.428922567569576e+01, 1.714516686642245e+06, 1.049931910184218e-02, 7.409052623101259e-02, 3.353912501520082e-02, 1.264260127689440e-02, 2.058248617427059e-03, 4.683830810040867e-02, 4.683830810040867e-02, 6.036280687195456e-02, 6.343203648028680e-03, 8.678988975905098e-03, 1.366146136125182e-02, 1.056216553819198e-02, 1.940185850767850e-02, 3.538957813912555e-03, 5.247704952216742e-01, 2.675955179369419e-02, 1.024286894131023e-01, 3.046154446798391e-02, 2.235590331224332e-02, 3.731481733522451e-02, 6.954457696482044e-02, 7.464100080108729e-02, 3.049663379512497e-02, 3.383688969889253e+01, 1.429384643941552e-01, 2.258282150202552e-02, 1.223699011387171e-03, 1.002994419496989e-02, 1.800377966831169e-01, 1.357033002920990e-02, 1.357033002330654e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.648502798020881e-29, -3.073431140401897e-99, -3.073827381974969e-99, -3.071958210760248e-99, -3.073377048428855e-99, -3.073377048428855e-99, -1.231362854336275e-86, -1.232169122756837e-86, -1.255890775892250e-86, -1.244883207777160e-86, -1.231482781141220e-86, 3.947528661535191e-05, -5.562486267082206e-75, 6.967553522255898e-04, 5.931054078514147e-04, 0.000000000000000e+00, 6.993270164716854e-04, 6.993270164716854e-04, 6.659204532943705e-03, 6.877022819226222e-03, -6.839050650168946e-77, 1.196078251373100e-03, 6.720849056168584e-03, 6.720849056168584e-03, 4.464954753004357e-07, 5.423951591248720e-07, 4.268377669217059e-05, 3.346244771244070e-09, 5.538372394226863e-07, 5.538372394229397e-07, -6.654398781245427e-04, -6.760901890121427e-04, -6.666102331333939e-04, -6.190433152305791e-43, -6.707575113173210e-04, -6.707575113173210e-04, -2.269986841743412e-37, -1.726898161191737e-82, -1.727753385346270e-82, -1.726019210179168e-82, -1.737815751333628e-82, 1.322792479489920e-04, -2.254814552770603e-03, -1.414593399607601e-02, -4.726661435998201e-05, -4.539107237021944e-03, -4.753172410682259e-03, -2.354407667544582e-72, -6.623055029799703e-63, 2.771120038800012e-03, -9.769588741105011e-63, -5.374665422846987e-04, 1.266582335980501e-03, 1.266582335980501e-03, -1.885279124191148e-47, 0.000000000000000e+00, 1.523340796715186e-08, -1.655073231551847e-60, -1.230841860999063e-47, 6.626140113628521e-09, -2.465664418700702e-01, -1.042590658463526e-01, -5.292849933675826e-70, 0.000000000000000e+00, -1.510447639227882e-01, -1.510447639227882e-01, -1.794304277068968e-01, -1.995108626622256e-03, -8.729171975585438e-03, -2.428854525989625e-02, -1.451263167787960e-02, -4.841040234783066e-71, -7.950354208434068e-03, -2.904296068066021e-67, 4.048455424615066e-03, -2.656591867158215e-69, 0.000000000000000e+00, 3.840318597241505e-03, -6.199598365525315e-71, 2.842100017601368e-05, 7.798464944368185e-05, 0.000000000000000e+00, -1.628473949425066e-61, 4.862876304944057e-04, 2.199423740735766e-07, 1.905021021095229e-11, 1.125146849753143e-09, 5.315272162764373e-04, 5.188607311594537e-09, 5.188607323986803e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
