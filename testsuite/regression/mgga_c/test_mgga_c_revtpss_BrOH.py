
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.915037776143987e-02, -4.915086146486452e-02, -4.915181473888223e-02, -4.914388027771568e-02, -4.915064341255051e-02, -4.915064341255051e-02, -4.239706086387907e-02, -4.240114071772433e-02, -4.251402234329728e-02, -4.232926312570440e-02, -4.239910750600447e-02, -4.239910750600447e-02, -2.743467333575981e-02, -2.722326795350956e-02, -2.177765307500441e-02, -2.214250975820210e-02, -2.735852454634943e-02, -2.735852454634943e-02, -1.239954219805426e-02, -1.311498952925460e-02, -3.385554183155655e-02, -3.679454099583054e-03, -1.261715839515945e-02, -1.261715839515945e-02, -4.489374730799443e-07, -5.502959346957296e-07, -7.935198736065216e-05, -1.035267540694882e-08, -5.469663801488201e-07, -5.469663801488200e-07, -5.207639225070271e-02, -5.218500201504308e-02, -5.208496356609423e-02, -5.216952644299869e-02, -5.213549289285308e-02, -5.213549289285308e-02, -2.384281575034919e-02, -2.435889600390821e-02, -2.327581843834529e-02, -2.368007082404985e-02, -2.494937362824507e-02, -2.494937362824507e-02, -3.985205721240709e-02, -5.622551367586776e-02, -3.867193475010303e-02, -5.127491271382949e-02, -4.184959027070253e-02, -4.184959027070253e-02, -1.148120016236746e-03, -6.622488525579617e-03, -1.262783342654298e-03, -7.194265855611626e-02, -2.401752563707212e-03, -2.401752563707212e-03, -9.887332384573970e-09, -1.760396736341028e-08, -1.429125397660557e-08, -2.799368884168605e-04, -1.657249940046586e-08, -1.657249940047349e-08, -5.830498477645003e-02, -5.033025795855816e-02, -5.244931566420660e-02, -5.456505360893645e-02, -5.344536406438020e-02, -5.344536406438021e-02, -6.108652967001567e-02, -3.119473040462231e-02, -3.644335272862063e-02, -4.227096447585766e-02, -3.923983462991415e-02, -3.923983462991416e-02, -5.641561757148229e-02, -1.056945986370449e-02, -1.567379143019282e-02, -2.690694484791478e-02, -2.109713069075566e-02, -2.109713069075566e-02, -2.977214157078709e-02, -5.028791839315664e-05, -1.652855417468862e-04, -3.102742012499959e-02, -8.621423426522538e-04, -8.621423426522545e-04, -5.918477531894057e-07, -6.874112856914545e-11, -1.377839171369105e-09, -8.773967380828417e-04, -1.144036667690711e-08, -1.144036668242468e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.145886684878531e-01, -1.145894939783596e-01, -1.145914805263039e-01, -1.145779590464404e-01, -1.145891185006002e-01, -1.145891185006002e-01, -1.067235497060323e-01, -1.067277161391598e-01, -1.068391075724998e-01, -1.065970368223601e-01, -1.067260253993395e-01, -1.067260253993395e-01, -7.642499749287322e-02, -7.615499980182977e-02, -6.801884403545923e-02, -6.845824246191602e-02, -7.632779372158309e-02, -7.632779372158309e-02, -4.000709269100194e-02, -4.133604042150350e-02, -8.637385867278938e-02, -1.691540421437782e-02, -4.042621897013293e-02, -4.042621897013293e-02, -2.663389822296966e-06, -3.262821038743937e-06, -4.500900200668528e-04, -6.456409669247175e-08, -3.242360384000250e-06, -3.242360384000249e-06, -1.173313415686445e-01, -1.175504892723681e-01, -1.173530407754391e-01, -1.175234571412787e-01, -1.174444649628173e-01, -1.174444649628173e-01, -7.234631661585073e-02, -7.301239737511309e-02, -7.124918263928443e-02, -7.178122777860636e-02, -7.422024377180590e-02, -7.422024377180590e-02, -7.929396159394826e-02, -8.192051808213931e-02, -7.925946803223549e-02, -8.111257188529601e-02, -8.007074452316036e-02, -8.007074452316036e-02, -5.906255310372603e-03, -2.665230680871423e-02, -6.443913938234094e-03, -1.172951048134160e-01, -1.144107476717072e-02, -1.144107476717072e-02, -6.073171964138914e-08, -1.088493201681922e-07, -8.740510972628784e-08, -1.567193496396279e-03, -1.033659785763603e-07, -1.033659785791612e-07, -7.772780401924669e-02, -8.013436047429218e-02, -8.010977284170517e-02, -7.962322954558906e-02, -7.993633729992561e-02, -7.993633729992562e-02, -7.407181362208638e-02, -6.800552364936936e-02, -7.159162043164023e-02, -7.529991012049575e-02, -7.345687026175046e-02, -7.345687026175046e-02, -8.387738366506070e-02, -3.745833224311188e-02, -4.828618008887468e-02, -6.396161288299344e-02, -5.646496031302758e-02, -5.646496031302760e-02, -6.844301115284303e-02, -2.854982359686356e-04, -9.245449514642641e-04, -6.523157463161364e-02, -4.493071869092639e-03, -4.493071869092667e-03, -3.620899210596892e-06, -4.386033695224167e-10, -8.444585101423426e-09, -4.569897168093791e-03, -7.162312313887604e-08, -7.162312314242894e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.240025771314546e-10, 2.240095746671911e-10, 2.240351019854575e-10, 2.239214342546587e-10, 2.240063048574429e-10, 2.240063048574429e-10, 9.983547828677845e-07, 9.985169832699400e-07, 1.002718325544106e-06, 9.933781119608890e-07, 9.984237525466241e-07, 9.984237525466241e-07, 1.592450955835331e-03, 1.579783999742159e-03, 1.242035212292117e-03, 1.209121734291996e-03, 1.587903872861317e-03, 1.587903872861317e-03, 1.702342442681770e-01, 1.750391785440190e-01, 9.907090938225888e-04, 1.763453944638542e-01, 1.719969586296155e-01, 1.719969586296155e-01, 7.926996607789608e-02, 8.483031542608252e-02, 1.244652669704682e-01, 1.608523613083496e-02, 8.854401017020816e-02, 8.854401017020815e-02, 4.454858340576713e-07, 4.505818730416946e-07, 4.460571167075441e-07, 4.500159634662812e-07, 4.480162734273989e-07, 4.480162734273989e-07, 4.838066041020941e-06, 4.812776662458995e-06, 4.677155913009886e-06, 4.658404227871807e-06, 5.037114563961415e-06, 5.037114563961415e-06, 5.685978842017198e-03, 8.515609893425979e-03, 6.867634760204321e-03, 1.033381005176491e-02, 5.463980080358121e-03, 5.463980080358121e-03, 1.302177888838616e-01, 6.716464121087733e-02, 1.595920464108962e-01, 6.106776299961884e-05, 1.819437196061011e-01, 1.819437196061011e-01, 1.662025317341867e-02, 2.048527887175008e-02, 6.330179527343786e-02, 1.780176642083836e-01, 3.187423954680923e-02, 3.187423954583504e-02, 4.339157901883935e-02, 2.891619803966363e-02, 3.419419538178255e-02, 3.882557238540948e-02, 3.647557018056487e-02, 3.647557018056489e-02, 2.513503550629187e-02, 6.596022820072184e-03, 8.956645318585376e-03, 1.360755060361577e-02, 1.079711499748440e-02, 1.079711499748441e-02, 6.523454151291078e-03, 4.184978722707512e-02, 3.424254430590274e-02, 2.866693974387208e-02, 3.133020997047119e-02, 3.133020997047119e-02, 9.563358269810765e-03, 8.832536433267101e-02, 1.237932732333847e-01, 5.109136818466392e-02, 2.306040238698995e-01, 2.306040238699005e-01, 6.408474169798559e-02, 5.483708864079756e-03, 1.303430331591813e-02, 3.009197390237305e-01, 4.361694647594421e-02, 4.361694647784627e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revtpss_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.354947717825311e-05, -1.355048928345199e-05, -1.355629043719555e-05, -1.353991283879928e-05, -1.354999735754522e-05, -1.354999735754522e-05, 1.266429438409259e-05, 1.266268292488261e-05, 1.262593955534714e-05, 1.284799771769229e-05, 1.266240315396216e-05, 1.266240315396216e-05, 1.598079389424167e-04, 1.617726727536580e-04, 2.100722738123837e-04, 2.399219258404541e-04, 1.605514583967513e-04, 1.605514583967513e-04, 5.842311392065236e-03, 5.890973046593460e-03, 1.744870366145890e-05, 9.654692847844719e-04, 5.845031770673204e-03, 5.845031770673204e-03, 4.464016116201556e-07, 5.422384542743685e-07, 4.216166042930686e-05, 3.343869880521478e-09, 5.536983090536908e-07, 5.536983090536898e-07, -6.534359154070859e-04, -6.639688771633694e-04, -6.547437053886021e-04, -6.629203999055417e-04, -6.584907747867117e-04, -6.584907747867117e-04, 1.293378405936766e-04, 1.295306652746530e-04, 1.308153974163037e-04, 1.312825431381844e-04, 1.272107444167529e-04, 1.272107444167529e-04, -7.892885941877671e-04, -1.434188550548715e-03, -1.312981950401737e-04, -6.852419860696902e-04, -1.783398336418567e-03, -1.783398336418567e-03, 4.410947632113223e-04, 2.605540804409883e-03, 5.221107394740576e-04, -3.906252022398814e-05, 1.175710699465428e-03, 1.175710699465428e-03, 5.331916898193193e-09, 7.439362490869916e-09, 1.522845411544201e-08, 9.095417205093692e-05, 6.620127602574663e-09, 6.620127602596746e-09, -5.771928960792194e-02, -5.915884493736630e-02, -6.558395266108480e-02, -6.774320690147326e-02, -6.716883498496817e-02, -6.716883498496819e-02, -9.242614517761814e-03, -1.494097270317132e-03, -6.564334726343343e-03, -1.591585765069779e-02, -1.021133758854269e-02, -1.021133758854268e-02, -7.654019738160263e-04, 3.490663328478076e-03, 3.499914661580669e-03, 1.465530835965204e-03, 2.960322969757167e-03, 2.960322969757177e-03, 8.107305234199805e-04, 2.825796906238638e-05, 7.636537581253701e-05, 3.018104375682986e-04, 4.635153234964351e-04, 4.635153234964381e-04, 2.191606698680925e-07, 1.904767269311560e-11, 1.125048732982758e-09, 5.042000942524763e-04, 5.184208658798539e-09, 5.184208664338218e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
