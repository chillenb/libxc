
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.190247904236258e-01, -1.190258473817318e-01, -1.190317159753024e-01, -1.190161210469752e-01, -1.190241246598668e-01, -1.190241246598668e-01, -3.502291425745140e-02, -3.503449716561267e-02, -3.533038840796177e-02, -3.511800134495426e-02, -3.517860144838072e-02, -3.517860144838072e-02, -6.561338548586100e-03, -6.366955777340224e-03, -2.169173312902443e-03, -2.745972531045249e-03, -6.609658361675652e-03, -6.609658361675652e-03, -7.152705524820866e-03, -7.802145291294717e-03, -2.561738139812808e-02, 2.041876616970518e-02, 1.571785215404593e-02, 1.571785215404592e-02, 9.033198602658854e-03, 9.473587494595719e-03, 3.658316700035336e-02, 5.912561924510723e-03, 4.160898754988381e-03, 4.160898754988387e-03, -9.789525486991098e-02, -9.803443364877668e-02, -9.790577756286742e-02, -9.802841677998085e-02, -9.796366698894103e-02, -9.796366698894103e-02, -4.051618388170380e-02, -4.285299844377298e-02, -4.146850123569720e-02, -4.368722639938601e-02, -4.138022054667178e-02, -4.138022054667178e-02, -3.236653570778382e-02, -5.275556813932705e-02, -2.271565200171410e-02, -4.109762942297282e-02, -3.480438496728521e-02, -3.480438496728518e-02, 4.077860783871128e-02, 6.202917982812427e-03, 4.230256022751087e-02, -6.878972379345777e-02, 2.660357014568374e-02, 2.660357014568373e-02, 5.383996352552181e-03, 6.226584957504709e-03, 4.535716146899026e-03, 4.355502054886484e-02, 4.578803526664846e-03, 4.578803526664840e-03, -6.286390398994343e-02, -5.715006911003998e-02, -5.891451778363822e-02, -6.054929952905132e-02, -5.970911090250287e-02, -5.970911090250287e-02, -6.415471853744571e-02, -3.540305789481065e-02, -3.909974647029908e-02, -4.541245288349083e-02, -4.161185045031352e-02, -4.161185045031352e-02, -5.092674694603481e-02, -6.936243590103620e-03, -1.287575962662836e-02, -1.419181523569498e-02, -1.534602076481795e-02, -1.534602076481794e-02, -2.380233499128392e-02, 3.496509414406284e-02, 4.198624706019100e-02, -1.844624867011656e-02, 3.921168284975556e-02, 3.921168284975555e-02, 1.403001642766141e-02, 2.253758538006693e-03, 3.255361055970002e-03, 3.868967554482369e-02, 4.381123076951973e-03, 4.381123076951978e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.332644441093537e-01, -1.331917460584039e-01, -1.332671381538244e-01, -1.331946418245089e-01, -1.332687716662517e-01, -1.331934305765705e-01, -1.332259135545266e-01, -1.331527503252441e-01, -1.332597311184430e-01, -1.331661896992063e-01, -1.332597311184430e-01, -1.331661896992063e-01, -1.319909393118356e-01, -1.322386617848881e-01, -1.319911262326994e-01, -1.322690663745718e-01, -1.324515276300453e-01, -1.324789330823429e-01, -1.315701161321258e-01, -1.317945873277373e-01, -1.326453407730128e-01, -1.314259155141246e-01, -1.326453407730128e-01, -1.314259155141246e-01, -4.790420187557660e-02, -5.360279134577987e-02, -4.654336420418825e-02, -5.360028080642978e-02, -3.963794273588207e-02, -3.050491422796239e-02, -3.288631483807974e-02, -3.563766886939959e-02, -7.965634544001690e-02, 4.883655375363068e-03, -7.965634544001690e-02, 4.883655375363068e-03, -1.945176359263594e-02, -4.552472349689581e-03, -1.793987366241397e-02, -2.064186024283262e-03, -3.098584172992909e-02, -7.866061336979356e-02, -2.772483694524685e-02, -2.847496926214009e-02, 5.066905011101844e-02, -2.979029379955259e-01, 5.066905011101838e-02, -2.979029379955265e-01, 1.883382611502878e-02, 1.636334603155912e-02, 1.984610508433961e-02, 1.692489485944122e-02, 5.791318883334323e-02, 5.261738698419889e-02, 1.085238515881552e-02, 1.125443881953482e-02, 7.613254710790733e-03, 2.354064338689278e-02, 7.613254710790730e-03, 2.354064338689278e-02, -1.137749969122722e-01, -1.138031792695548e-01, -1.142430155235399e-01, -1.142675585410924e-01, -1.137743476240016e-01, -1.138079704884936e-01, -1.141854737350670e-01, -1.142216214593273e-01, -1.140321563433654e-01, -1.140391221158363e-01, -1.140321563433654e-01, -1.140391221158363e-01, 2.358112304952024e-03, 3.196394149515329e-03, 3.278882790606043e-03, 3.949760789524318e-03, 8.235443483108923e-03, 7.061020950350411e-03, 9.203765464662006e-03, 8.187110875221705e-03, -1.864867570359759e-03, 3.138390443393091e-03, -1.864867570359759e-03, 3.138390443393091e-03, -7.458844717233219e-02, -7.334317847171186e-02, -9.503624786310412e-02, -9.313578193522624e-02, -8.025801715313602e-02, -6.643962637006229e-02, -9.850603499477743e-02, -8.518627788571433e-02, -6.890981513233552e-02, -8.901671931257488e-02, -6.890981513233548e-02, -8.901671931257482e-02, 9.846368114522032e-03, 1.454500012948617e-02, -2.864910926844532e-02, -2.602406027320700e-02, 1.319395822419106e-02, 2.463600929282940e-02, -1.287752302034452e-01, -1.288298121088078e-01, -3.457013617569746e-02, 4.769752810856849e-03, -3.457013617569743e-02, 4.769752810856839e-03, 9.379895524132783e-03, 8.606893323886044e-03, 1.112903461583787e-02, 1.078033330790733e-02, 9.084266166362261e-03, 7.995288152691935e-03, 4.622426138178365e-02, 4.363212367951801e-02, 1.439099949673606e-02, 7.042452215042069e-03, 1.439099949673606e-02, 7.042452215042063e-03, -8.158980209324423e-02, -8.027794326150983e-02, -8.259512318365594e-02, -8.129915252066874e-02, -8.307931837461820e-02, -8.173884106769348e-02, -8.278628938469715e-02, -8.147864441253898e-02, -8.301534308939899e-02, -8.168692690260540e-02, -8.301534308939899e-02, -8.168692690260540e-02, -7.974256876731409e-02, -7.859663541946116e-02, -1.179884240978163e-02, -1.139585871775728e-02, -3.840107060769531e-02, -3.792738087894815e-02, -6.843749950597172e-02, -6.765920444109763e-02, -5.445708079174119e-02, -5.332418782357731e-02, -5.445708079174119e-02, -5.332418782357735e-02, -9.862307052977087e-02, -9.501585555953768e-02, -1.720072755478911e-02, -1.461546494187475e-02, -2.451640119489191e-03, 1.510499337896952e-04, -2.247212737083911e-02, -2.303454686036501e-02, 1.005901994737414e-03, 5.662849789705229e-04, 1.005901994737438e-03, 5.662849789705611e-04, -2.584035590201487e-02, -2.339761599951051e-02, 5.525857410842341e-02, 5.466698728164670e-02, 5.675684563000200e-02, 5.503440963653803e-02, -4.651325986053548e-02, -3.285523172258252e-02, 1.322164036699069e-02, 3.090415960921794e-02, 1.322164036699069e-02, 3.090415960921787e-02, 2.471712218474671e-02, 2.284706282237091e-02, 3.401921631195565e-03, 3.425443848767298e-03, 6.869220387567997e-03, 5.978134085373911e-03, 2.816507544032429e-02, 2.790571094300758e-02, 1.296680995633494e-02, 6.791725796893097e-03, 1.296680995633492e-02, 6.791725796893097e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.874160390417602e-10, 0.000000000000000e+00, -5.878937984321967e-10, -5.873910276742968e-10, 0.000000000000000e+00, -5.878765311919892e-10, -5.873981689255213e-10, 0.000000000000000e+00, -5.878577657243683e-10, -5.876704882377990e-10, 0.000000000000000e+00, -5.882184495525020e-10, -5.873856459907248e-10, 0.000000000000000e+00, -5.881464420265434e-10, -5.873856459907248e-10, 0.000000000000000e+00, -5.881464420265434e-10, 1.282474893872411e-06, 0.000000000000000e+00, 1.294380582678798e-06, 1.282052335382561e-06, 0.000000000000000e+00, 1.295158026393367e-06, 1.285998190920648e-06, 0.000000000000000e+00, 1.291157376688080e-06, 1.237945631374008e-06, 0.000000000000000e+00, 1.249644692063045e-06, 1.281052455452346e-06, 0.000000000000000e+00, 1.254343357475688e-06, 1.281052455452346e-06, 0.000000000000000e+00, 1.254343357475688e-06, 2.859727295342703e-03, 0.000000000000000e+00, 3.385705692446687e-03, 2.733383841582857e-03, 0.000000000000000e+00, 3.381514310283243e-03, 1.859321643002354e-03, 0.000000000000000e+00, 1.109066301970723e-03, 7.807429137015216e-04, 0.000000000000000e+00, 9.659215700544742e-04, 5.207356514871920e-03, 0.000000000000000e+00, -2.073232075254593e-03, 5.207356514871920e-03, 0.000000000000000e+00, -2.073232075254593e-03, -1.071190453300381e+00, 0.000000000000000e+00, -1.356574370743774e+00, -1.074937442563572e+00, 0.000000000000000e+00, -1.359637646374049e+00, 4.245800619691099e-03, 0.000000000000000e+00, 4.688584014920250e-03, 3.625449413164855e-02, 0.000000000000000e+00, -4.443061303024957e-01, -1.726904536605929e+00, 0.000000000000000e+00, 2.929455995138146e+01, -1.726904536605927e+00, 0.000000000000000e+00, 2.929455995138150e+01, -4.900345871642614e+03, 0.000000000000000e+00, -4.309678572917807e+03, -4.497559537523810e+03, 0.000000000000000e+00, -3.905617781764767e+03, -5.010755323499554e+01, 0.000000000000000e+00, -5.017422383715189e+01, -1.274930140504682e+04, 0.000000000000000e+00, -1.328359927832652e+04, -6.178477988321196e+03, 0.000000000000000e+00, -2.697471566399886e+04, -6.178477988321193e+03, 0.000000000000000e+00, -2.697471566399893e+04, -4.212190067109855e-07, 0.000000000000000e+00, -4.227162989675541e-07, -4.152393263814956e-07, 0.000000000000000e+00, -4.169468304106047e-07, -4.211514781156291e-07, 0.000000000000000e+00, -4.227116419585243e-07, -4.160207267649575e-07, 0.000000000000000e+00, -4.174540375716194e-07, -4.179573956091091e-07, 0.000000000000000e+00, -4.197979484052590e-07, -4.179573956091091e-07, 0.000000000000000e+00, -4.197979484052590e-07, -4.880424596600426e-05, 0.000000000000000e+00, -4.924468624655420e-05, -4.963187797466707e-05, 0.000000000000000e+00, -5.004493242085708e-05, -5.098743791363175e-05, 0.000000000000000e+00, -5.044773557906775e-05, -5.181868094921450e-05, 0.000000000000000e+00, -5.131571440376442e-05, -4.727906535319281e-05, 0.000000000000000e+00, -4.991246746922971e-05, -4.727906535319281e-05, 0.000000000000000e+00, -4.991246746922971e-05, -1.183222689894251e-03, 0.000000000000000e+00, -1.740577869908162e-03, 1.304937772160905e-02, 0.000000000000000e+00, 1.297615009245040e-02, 4.791129873980414e-03, 0.000000000000000e+00, 3.483855026668577e-03, 2.592398786751961e-02, 0.000000000000000e+00, 2.236504748781132e-02, -6.110194626030896e-04, 0.000000000000000e+00, 7.741018683272399e-04, -6.110194626031059e-04, 0.000000000000000e+00, 7.741018683272569e-04, -1.064051972183176e+00, 0.000000000000000e+00, -1.438104206017894e+00, -4.697174164563306e-01, 0.000000000000000e+00, -4.857008814524189e-01, -5.082008265260308e-01, 0.000000000000000e+00, -2.787280120429240e+00, 7.617669835531114e-05, 0.000000000000000e+00, 7.624585919802692e-05, 6.589993783966474e-01, 0.000000000000000e+00, -2.448408144984756e+00, 6.589993783966451e-01, 0.000000000000000e+00, -2.448408144984757e+00, -2.016531927711466e+04, 0.000000000000000e+00, -1.782154168115028e+04, -1.348611756117329e+04, 0.000000000000000e+00, -1.225914647526247e+04, -6.750109880983327e+04, 0.000000000000000e+00, -6.266218175939956e+04, -1.008365509080413e+01, 0.000000000000000e+00, -1.132034797262597e+01, -2.774178973590218e+04, 0.000000000000000e+00, -2.532503550736353e+04, -2.774178973590216e+04, 0.000000000000000e+00, -2.532503550736351e+04, 3.277127860963429e-02, 0.000000000000000e+00, 3.295461379392756e-02, 1.365217561438860e-02, 0.000000000000000e+00, 1.389284978219764e-02, 1.953773623421719e-02, 0.000000000000000e+00, 1.975845724949664e-02, 2.512116360571933e-02, 0.000000000000000e+00, 2.522525375269271e-02, 2.225158854064854e-02, 0.000000000000000e+00, 2.241101435831264e-02, 2.225158854064854e-02, 0.000000000000000e+00, 2.241101435831264e-02, 2.796289059769847e-02, 0.000000000000000e+00, 2.836535727986027e-02, -4.255407201040663e-02, 0.000000000000000e+00, -4.162099519046458e-02, -3.098956834194278e-02, 0.000000000000000e+00, -2.998538543719415e-02, -1.031540236287527e-02, 0.000000000000000e+00, -9.825179168266565e-03, -2.143556109145594e-02, 0.000000000000000e+00, -2.108183912557058e-02, -2.143556109145594e-02, 0.000000000000000e+00, -2.108183912557055e-02, 1.067910561285895e-02, 0.000000000000000e+00, 1.051819861270900e-02, -3.837090068406976e-01, 0.000000000000000e+00, -3.884252545545376e-01, -2.823972722905941e-01, 0.000000000000000e+00, -2.816321942395120e-01, -8.616208914056241e-02, 0.000000000000000e+00, -8.072466879059340e-02, -2.066492627651673e-01, 0.000000000000000e+00, -2.067122164366723e-01, -2.066492627651676e-01, 0.000000000000000e+00, -2.067122164366725e-01, -3.812648737233840e-02, 0.000000000000000e+00, -3.831568842824321e-02, -5.877417670318755e+01, 0.000000000000000e+00, -5.775861619899691e+01, -2.121020090045970e+01, 0.000000000000000e+00, -2.267295907310984e+01, -6.096762644709165e-02, 0.000000000000000e+00, -9.925872431575648e-02, -1.373913985993701e+00, 0.000000000000000e+00, -7.097929878941730e+00, -1.373913985993696e+00, 0.000000000000000e+00, -7.097929878941708e+00, -1.531322939629688e+03, 0.000000000000000e+00, -1.411232431906102e+03, -2.346031235659900e+05, 0.000000000000000e+00, -2.330961479361654e+05, -8.747947884358355e+04, 0.000000000000000e+00, -7.903029554895122e+04, -5.925026848582815e+00, 0.000000000000000e+00, -7.677744991897306e+00, -5.025541143782767e+04, 0.000000000000000e+00, -3.109107712005186e+04, -5.025541143782758e+04, 0.000000000000000e+00, -3.109107712005200e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.212348197888433e-05, 7.214792514676945e-05, 7.212249284673647e-05, 7.214751090090554e-05, 7.212527900216837e-05, 7.214814147893833e-05, 7.213258667278996e-05, 7.216199659950603e-05, 7.211985372466261e-05, 7.216226493985625e-05, 7.211985372466261e-05, 7.216226493985625e-05, 4.060124034111647e-04, 4.050787404940042e-04, 4.061958624384930e-04, 4.051791059867265e-04, 4.101736033533313e-04, 4.095733337709555e-04, 4.130382679995592e-04, 4.120285256519031e-04, 4.103052978676395e-04, 4.106411762587149e-04, 4.103052978676395e-04, 4.106411762587149e-04, 4.894889994977079e-05, -8.044116803418320e-05, 7.952693964410211e-05, -7.508417754349759e-05, 6.295907998593984e-04, 7.882121086197827e-04, 1.510929450440359e-03, 1.474789289531665e-03, 4.369163452154281e-04, 2.627372637088698e-03, 4.369163452154281e-04, 2.627372637088698e-03, 7.113064249693314e-02, 8.640773891853649e-02, 7.055940947425167e-02, 8.715707623028245e-02, -4.190431401092012e-03, -3.322862612293224e-03, 3.198893171760610e-02, 4.306120891540205e-02, 7.735996683584972e-02, -3.025207724101780e-02, 7.735996683584967e-02, -3.025207724101795e-02, 7.711376091591607e-03, 8.176187366892919e-03, 8.088841819690483e-03, 8.686940571968827e-03, 1.790066954278727e-02, 1.977119889801393e-02, 3.875475642608987e-03, 3.913410103763295e-03, 6.688064188766179e-03, 4.475902115106163e-03, 6.688064188766168e-03, 4.475902115106173e-03, 8.694132806949596e-04, 8.709118307689714e-04, 8.647737797579471e-04, 8.665149193418046e-04, 8.693347511903676e-04, 8.709405079269082e-04, 8.654095243933271e-04, 8.668748326774564e-04, 8.668836916279055e-04, 8.686925992950426e-04, 8.668836916279055e-04, 8.686925992950426e-04, 3.156668021963530e-03, 3.182078018692955e-03, 3.302076796597169e-03, 3.324966812362201e-03, 3.243225055084520e-03, 3.227663271955496e-03, 3.380285560100060e-03, 3.366503111036848e-03, 3.158899044640684e-03, 3.271977174457488e-03, 3.158899044640684e-03, 3.271977174457488e-03, 1.838757574832743e-02, 1.889134545435874e-02, 1.100832018587325e-02, 1.065668568112706e-02, 1.346689451701954e-02, 1.192502929739545e-02, 1.037978688595872e-02, 7.176417218601985e-03, 1.704166503113744e-02, 1.976308609544964e-02, 1.704166503113745e-02, 1.976308609544961e-02, 2.992440648575364e-02, 3.015100564781525e-02, 4.865812892409319e-02, 4.857022419703041e-02, 2.615125685288669e-02, 3.151947952826060e-02, 1.279396064145727e-03, 1.282997689045706e-03, 3.680942667298626e-02, 5.585209540026506e-02, 3.680942667298628e-02, 5.585209540026510e-02, 1.862721747645169e-03, 1.904682222099421e-03, 3.236313809668872e-03, 3.006644367012632e-03, 7.625779535427491e-03, 8.341630119406404e-03, 2.401695028346737e-02, 2.803257066382699e-02, 2.068503590112162e-03, 8.715380234949256e-03, 2.068503590112165e-03, 8.715380234949256e-03, -3.503255499456862e-03, -4.741641148663714e-03, 1.101509698186621e-02, 9.862384617369463e-03, 5.521924620347732e-03, 4.283126890470564e-03, 8.416213200185665e-04, -3.298069136040858e-04, 3.157941032440826e-03, 1.953280002628476e-03, 3.157941032440826e-03, 1.953280002628476e-03, 1.269294503736670e-02, 1.170099839143304e-02, 4.674530053340813e-02, 4.625759839163002e-02, 4.485880746607604e-02, 4.404000871153566e-02, 3.429040169483710e-02, 3.356331345440162e-02, 4.044494428891197e-02, 3.998650432846429e-02, 4.044494428891197e-02, 3.998650432846427e-02, 9.525568993504310e-03, 8.981185355262567e-03, 5.309202644168350e-02, 5.329649015055275e-02, 5.023807546366191e-02, 5.074155053361009e-02, 3.415936729076425e-02, 3.325748501293313e-02, 4.833520503434417e-02, 4.836469426108241e-02, 4.833520503434423e-02, 4.836469426108245e-02, 3.365749073357891e-02, 3.408021808584148e-02, 1.970492375475403e-02, 1.941252299844404e-02, 2.010763479058793e-02, 2.152196499672013e-02, 3.836554795704683e-02, 4.410230508517305e-02, 3.165275597239776e-02, 4.152364370158594e-02, 3.165275597239774e-02, 4.152364370158590e-02, 5.548801702894066e-03, 5.570589476769787e-03, 6.208547036813774e-04, 4.654564475550819e-04, 4.135035667566909e-03, 4.481801768269689e-03, 3.604779739582393e-02, 4.211475255778358e-02, 3.553506595248150e-03, 8.237253588191700e-03, 3.553506595248152e-03, 8.237253588191712e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
