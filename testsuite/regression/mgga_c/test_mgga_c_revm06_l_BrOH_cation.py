
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.405003750577481e-01, -1.405013350097508e-01, -1.405052674592146e-01, -1.335636538202073e-01, -1.335698369413388e-01, -1.224205301750688e-01, -7.772223919938553e-02, -6.539625407581984e-02, -6.550613494784460e-02, -6.546323107892828e-02, -6.546602146424037e-02, -7.766226655249531e-02, -4.961407020677396e-02, -4.634197684376520e-02, -2.581976967072411e-02, -4.598120666160815e-02, -5.362808244380166e-02, -2.660543056526840e-02, -2.181447792372578e-02, -2.276589558996076e-02, -3.749463019833879e-02, 1.849959944906608e-02, 1.786076029804307e-02, -4.137572512182067e-02, 8.984842025897706e-03, 8.582713666274191e-03, 4.832402094355557e-02, 5.505870657242968e-03, 3.895324053436064e-03, 3.895324053436064e-03, -9.802429185224808e-02, -9.816020560785732e-02, -9.803207390965324e-02, -9.815197689136460e-02, -1.058346250014559e-01, -1.058246896474826e-01, -5.311459521803826e-02, -5.383595251483463e-02, -5.253965071732894e-02, -5.320189557991968e-02, -6.605387845827806e-02, -5.378822384604709e-02, -4.736600875113238e-02, -5.027282813941870e-02, -3.802154005160276e-02, -4.195924709520589e-02, -4.715593124141146e-02, -4.355519293095018e-02, 3.871120203920593e-02, -4.562404461240330e-03, 4.006094076288619e-02, -6.475890765274919e-02, 2.541129223783057e-02, 2.541129223783055e-02, 3.756789029866527e-03, 5.393021984608965e-03, 4.174320837471774e-03, 8.303627873820286e-02, 4.138346687123566e-03, 4.138346687123561e-03, -5.977118766833080e-02, -5.631294137576748e-02, -6.439342039912341e-02, -6.190730157306768e-02, -6.483738265976680e-02, -6.143902114220307e-02, -5.868647749901050e-02, -4.319583598758260e-02, -4.651040494803288e-02, -4.756702834465762e-02, -4.458422555506740e-02, -4.874164494036854e-02, -5.364054895536303e-02, -8.833838053044222e-03, -3.129638460600331e-02, -3.635229701639849e-02, -2.491025254301974e-02, -3.450880019994854e-02, -3.488095328621992e-02, -2.455321171294481e-02, 3.952836144782769e-02, -3.107121598552860e-02, 3.735225445478757e-02, 3.735225445478757e-02, -4.200303586594269e-03, 1.546808293263682e-03, -1.150086583940805e-03, -8.568341324985665e-02, 3.989784471478358e-03, 3.122126962131169e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.968580496963789e-01, -1.968375584739035e-01, -1.968576424043796e-01, -1.968385528651270e-01, -1.968623738676078e-01, -1.968363319070141e-01, -2.030126319301246e-01, -8.829680593251786e-02, -2.030079256696226e-01, -8.833336239437452e-02, -1.111041836343413e-01, -1.111159577599459e-01, 9.519795361431063e-02, -1.342656356948871e-01, 1.979236110434328e-02, 1.981038180751749e-02, 1.937344876256345e-02, 1.931007148933667e-02, 1.952679089316147e-02, 1.953118448039787e-02, 1.977721834404729e-02, 1.923724367737628e-02, -1.347948858439283e-01, 9.442057830398798e-02, -1.341215210819188e-03, -2.300129648219927e-03, -9.244245184645744e-02, 6.359196352958793e-02, 1.998773382712968e-03, -1.636969024542995e-03, 4.976556974160411e-02, -9.373559524036729e-02, 5.045431904172337e-04, 2.945306659758917e-02, 1.766222239439166e-02, -1.748468455525981e-02, -6.414848852558128e-02, -1.428461987055599e-02, -6.290838029157111e-02, -4.264186351971174e-03, -9.797797823340958e-02, -1.291842951177287e-01, -2.891433758428405e-02, -1.121705169430584e-02, 6.598008400057824e-02, -2.284114435781585e-01, -9.355200705861022e-02, 3.861820870031107e-01, 1.881594789997980e-02, 1.635644234090249e-02, 1.333843325600591e-02, 1.627652494585281e-02, 1.551160036231052e-01, 7.233393430564886e-03, 1.073097767400224e-02, 1.115324974608161e-02, 7.564114649362467e-03, 2.336582772345533e-02, 7.564114649362464e-03, 2.336582772345534e-02, -1.124986405415273e-01, -1.126056873806820e-01, -1.129824601236925e-01, -1.130851581134506e-01, -1.125282536218535e-01, -1.126315623221725e-01, -1.129517552591912e-01, -1.130578610458188e-01, -1.525026513567439e-01, -1.036201109297646e-01, -1.035218795639549e-01, -1.526274391875384e-01, 2.497660691994590e-02, 2.477603280535785e-02, 2.375273599184089e-02, 2.352790563832403e-02, 2.567670601819962e-02, 2.564326641497922e-02, 2.478642190004715e-02, 2.470951689965115e-02, 9.970552504007946e-02, -1.168377000354862e-01, 2.391292909176146e-02, 2.350585786647397e-02, 7.534954649136519e-03, -8.225441925524957e-02, -5.096951324086069e-02, -5.177487555779935e-02, 2.420929863955396e-03, 2.946029192409876e-03, -1.772682914230995e-02, -1.573581230406421e-02, 1.170290055132785e-04, -9.308972869044273e-02, -1.904193083101673e-02, -2.543736431923967e-02, 2.121928593927815e-02, 2.306700393085945e-02, -7.899616997457393e-02, -1.348924328942274e-01, 2.372376232194628e-02, 3.426512297962715e-02, -3.537712290869680e-02, -3.555858919462630e-02, -2.898131539402072e-02, 1.110412852239058e-02, -2.898131539402072e-02, 1.110412852239056e-02, 4.692563784154224e-03, 8.276274378939968e-03, 1.091166456565867e-02, 1.054060935238182e-02, 8.990401026735180e-03, 7.889549268756452e-03, -7.158900128564728e-02, 2.250092920953181e-01, 1.402858401555868e-02, 7.024155834031415e-03, 1.402858401555868e-02, 7.024155834031406e-03, -7.965570596114659e-02, -7.853241628400309e-02, -7.525972034741325e-02, -7.427169284588922e-02, -8.092159198302235e-02, -7.955473084789448e-02, -8.137754663115064e-02, -7.631429423833247e-02, -8.078063611603761e-02, -7.945066470544490e-02, -8.159515566009955e-02, -7.555087257660927e-02, -7.850862414424239e-02, -7.755390632779377e-02, 2.519374189476033e-02, -7.559231196890073e-02, -8.063287566341799e-03, -7.839360155651126e-02, -5.021272506979666e-02, -4.955024573509945e-02, -3.715260616748506e-02, -3.662926007499336e-02, -2.516479119866048e-02, -7.966394545849331e-02, -2.999513718366504e-02, -8.595599930355660e-02, -1.776210591537483e-02, -1.512946838743725e-02, -6.784809766929359e-02, 2.975864463681609e-02, -6.571250503627020e-02, 5.566728022068733e-02, 1.076914538411387e-02, 1.065693886276248e-02, 5.626694248966189e-02, -6.316337709106939e-02, 5.992548782990596e-03, 5.886810843951734e-03, -5.364781247922770e-02, -4.892239207925259e-02, 5.946416320650204e-02, 5.708977241603432e-02, 5.132139630275253e-03, 2.416202749703177e-03, 2.188441408230873e-02, 3.611722491373430e-02, 2.188441408230879e-02, 3.611722491373427e-02, -6.184466892362151e-03, -5.013337011929225e-03, 3.208349049317486e-03, 3.191705423068473e-03, -1.526357691488950e-03, -1.452904600707308e-03, -1.259357336586031e-01, -1.267246294086349e-01, 1.266006189643509e-02, 6.774578294540362e-03, 1.259325239161122e-02, 2.085497701662887e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.793480972946750e-10, 0.000000000000000e+00, -3.792950575514230e-10, -3.793290870172887e-10, 0.000000000000000e+00, -3.792810994690649e-10, -3.792714879872510e-10, 0.000000000000000e+00, -3.791981508832919e-10, -2.593463380026767e-10, 0.000000000000000e+00, -8.440124321811597e-10, -2.592395790945736e-10, 0.000000000000000e+00, -8.438233895084329e-10, -7.494639354843017e-10, 0.000000000000000e+00, -7.494749375147102e-10, -5.334669015964722e-06, 0.000000000000000e+00, -2.455686527020920e-06, -4.391992707644075e-06, 0.000000000000000e+00, -4.391950027580397e-06, -4.405932263474914e-06, 0.000000000000000e+00, -4.406597696265741e-06, -4.398760199280981e-06, 0.000000000000000e+00, -4.398467195306735e-06, -4.400280784914575e-06, 0.000000000000000e+00, -4.402860360259992e-06, -2.471696263797718e-06, 0.000000000000000e+00, -5.351373123276670e-06, -1.042434632662608e-02, 0.000000000000000e+00, -9.932028491362637e-03, -7.379131430507542e-03, 0.000000000000000e+00, -6.086898533420549e-03, -4.775353325522549e-03, 0.000000000000000e+00, -4.767853141227120e-03, -5.738288094250777e-03, 0.000000000000000e+00, -8.007508958236367e-03, -7.830376226090032e-03, 0.000000000000000e+00, -1.478284931738026e-02, -5.006099932477334e-03, 0.000000000000000e+00, -4.697309898487790e-03, -5.982987601744830e+00, 0.000000000000000e+00, -1.120444929706952e+00, -5.450879383509379e+00, 0.000000000000000e+00, -1.244551125748114e+00, -4.886150809566795e-04, 0.000000000000000e+00, -4.628729757701409e-03, -6.624923232366249e-01, 0.000000000000000e+00, -1.222465725960387e+00, -1.910577203145686e+00, 0.000000000000000e+00, 1.370558330288268e+01, -3.578672879176910e-01, 0.000000000000000e+00, 8.151381536109666e+00, -4.900906603623144e+03, 0.000000000000000e+00, -4.310091483446584e+03, -1.239826114746685e+07, 0.000000000000000e+00, -3.768073392091834e+03, -9.882391945034791e+03, 0.000000000000000e+00, -8.266648359860527e+00, -1.275351224927031e+04, 0.000000000000000e+00, -1.328947693608974e+04, -6.179092417113162e+03, 0.000000000000000e+00, -2.710963702186348e+04, -6.179092417113162e+03, 0.000000000000000e+00, -2.710963702186358e+04, -4.364433958259564e-07, 0.000000000000000e+00, -4.370450040313535e-07, -4.303854493250354e-07, 0.000000000000000e+00, -4.311951236403010e-07, -4.360225506857247e-07, 0.000000000000000e+00, -4.367898453328002e-07, -4.308363771540141e-07, 0.000000000000000e+00, -4.314706618533194e-07, -1.309814420522503e-07, 0.000000000000000e+00, -4.927375626513150e-07, -4.919142547067163e-07, 0.000000000000000e+00, -1.313540026246264e-07, -5.824161553802685e-05, 0.000000000000000e+00, -5.834714259310243e-05, -5.792570058871224e-05, 0.000000000000000e+00, -5.805836685756233e-05, -5.842301612903268e-05, 0.000000000000000e+00, -5.830286298249461e-05, -5.826463374385336e-05, 0.000000000000000e+00, -5.810607568502663e-05, -7.111790334657309e-05, 0.000000000000000e+00, -3.829918244745083e-05, -5.770770563809804e-05, 0.000000000000000e+00, -5.845881937533530e-05, -2.464414919489780e-02, 0.000000000000000e+00, -9.150800631519681e-03, -1.225310314130489e-02, 0.000000000000000e+00, -1.181501650028994e-02, -3.005978503544218e-02, 0.000000000000000e+00, -2.591927299576964e-02, -2.798231776656810e-02, 0.000000000000000e+00, -2.325715162082865e-02, -1.993763325719657e-02, 0.000000000000000e+00, -1.064029308020942e-02, -1.716311577287715e-02, 0.000000000000000e+00, -2.301246267544463e-02, -2.405937386952436e+00, 0.000000000000000e+00, -2.589546638341937e+00, -8.354131141960822e+00, 0.000000000000000e+00, 4.211708381718995e-01, -2.512230975098610e+00, 0.000000000000000e+00, -4.011082104627174e+00, -8.403380758114989e-05, 0.000000000000000e+00, -8.421688191358243e-05, -3.245922365124708e-01, 0.000000000000000e+00, -3.036532982132681e+00, -3.245922365124706e-01, 0.000000000000000e+00, -3.036532982132682e+00, -4.165320229283952e+08, 0.000000000000000e+00, -1.776641634654047e+04, -1.349904161579745e+04, 0.000000000000000e+00, -1.226969176946088e+04, -6.756219407200575e+04, 0.000000000000000e+00, -6.268743640693341e+04, 1.748503610777429e+01, 0.000000000000000e+00, -1.693628695988110e+03, -2.796324136206007e+04, 0.000000000000000e+00, -2.534430349995867e+04, -2.796324136206006e+04, 0.000000000000000e+00, -2.534430349995863e+04, 2.550518978359896e-02, 0.000000000000000e+00, 2.621899865879763e-02, 2.752769698883461e-03, 0.000000000000000e+00, 3.397461999836926e-03, 4.783170847850252e-03, 0.000000000000000e+00, 5.171260817775018e-03, 9.052722952512453e-03, 0.000000000000000e+00, 1.483582170841718e-02, 6.430839673216688e-03, 0.000000000000000e+00, 6.811548552188301e-03, 7.172693372333075e-03, 0.000000000000000e+00, 1.146897465180640e-02, 2.350604685989090e-02, 0.000000000000000e+00, 2.441657963911732e-02, -5.533595628580879e-02, 0.000000000000000e+00, -2.145072704207358e-02, -4.503582711253853e-02, 0.000000000000000e+00, -1.515078856996225e-02, -2.593709887720888e-02, 0.000000000000000e+00, -2.523946169866224e-02, -3.361801268431993e-02, 0.000000000000000e+00, -3.276975501572316e-02, -3.817472587551119e-02, 0.000000000000000e+00, -1.216605300191483e-02, -1.247157628773081e-02, 0.000000000000000e+00, -3.815955744978341e-03, -4.050792650159525e-01, 0.000000000000000e+00, -4.099342460198809e-01, -5.948796438745999e-01, 0.000000000000000e+00, -3.524528575170738e-01, -1.222207408549671e-01, 0.000000000000000e+00, -2.155546806689482e-01, -2.587576749836810e-01, 0.000000000000000e+00, -2.602134219456078e-01, -3.206052539770453e-01, 0.000000000000000e+00, -2.449331254699296e-01, -6.240854737121328e-02, 0.000000000000000e+00, -6.094322278864984e-02, -7.810392852366856e+03, 0.000000000000000e+00, -7.664119645580601e+03, -2.392643717777542e+01, 0.000000000000000e+00, -2.455014249586602e+01, -2.540709043838686e-01, 0.000000000000000e+00, -2.445590964325216e-01, -4.292383405444072e+00, 0.000000000000000e+00, -8.617237233368151e+00, -4.292383405444073e+00, 0.000000000000000e+00, -8.617237233368130e+00, -3.126268403973914e+06, 0.000000000000000e+00, -2.714119087085005e+06, -2.347628921976883e+05, 0.000000000000000e+00, -2.331311866645889e+05, -1.688295605497805e+09, 0.000000000000000e+00, -1.327059737694139e+09, -4.860676663932095e+01, 0.000000000000000e+00, -1.239624943150147e+02, -5.046101792128348e+04, 0.000000000000000e+00, -3.111915140166514e+04, -5.002576574689913e+04, 0.000000000000000e+00, -1.747082896048351e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.799379489673808e-05, 2.799145136121589e-05, 2.799394286589892e-05, 2.799188261699007e-05, 2.799572707391223e-05, 2.799223799255109e-05, 2.319464427343043e-05, 8.584546470227592e-05, 2.319609702126446e-05, 8.584046397219398e-05, 8.174055182095652e-05, 8.174070214515182e-05, 1.666088837226382e-03, 2.078930383335100e-04, 1.663022668123669e-03, 1.662955280024350e-03, 1.668950485860707e-03, 1.669243046182061e-03, 1.666391919126901e-03, 1.666342044302410e-03, 1.665880567253763e-03, 1.668020077146140e-03, 2.119321031289246e-04, 1.672218749795818e-03, -5.086772402831242e-03, -5.167800203812770e-03, 3.048593716631077e-03, 1.308460047783435e-02, 1.434768626637223e-02, 1.424431336276584e-02, 1.207412478942765e-02, 3.316922012154412e-03, -6.026336388040301e-03, -7.237242011110180e-03, 1.547718872796428e-02, 1.386691052904686e-02, 3.839571465577056e-02, 6.299221536236126e-02, 3.544150217013033e-02, 6.660914485288204e-02, 4.486560358879419e-03, 4.270341065385288e-03, 4.896826536983743e-02, 5.730071185515913e-02, 8.924647333043767e-02, 1.207334479163971e-02, 7.643614298045692e-02, -2.739399723892734e-01, 7.805772193150539e-03, 8.218805463889861e-03, -1.263218241718197e-03, 8.753847709045512e-03, -3.701155352348111e-02, 2.006607946177783e-02, 4.387317882948817e-03, 4.347627152033814e-03, 6.939514226387006e-03, 5.660684383994493e-03, 6.939514226387006e-03, 5.660684383994516e-03, 8.812945800135850e-04, 8.820870035922855e-04, 8.765617396273426e-04, 8.775977670768901e-04, 8.809392768534590e-04, 8.819199062271150e-04, 8.769436461595835e-04, 8.777797858004853e-04, 3.585592249440969e-04, 9.273407710880546e-04, 9.263623170382033e-04, 3.592360665315863e-04, 3.945450971498453e-03, 3.951323894470501e-03, 4.002894425892125e-03, 4.008734514348998e-03, 3.895684504191161e-03, 3.902197512615561e-03, 3.950631050427192e-03, 3.955597455364999e-03, 3.911519335698535e-03, 4.851414605478599e-04, 3.999356199816000e-03, 4.009079363925513e-03, 4.244510867302215e-02, 7.632689481258123e-03, 3.657569622689928e-02, 3.568324119006397e-02, 4.171887823220436e-02, 3.937988852493376e-02, 4.592779131146443e-02, 4.156681009237184e-02, 3.928988620631930e-02, 1.070751604976680e-02, 3.762425097015532e-02, 4.419882547048837e-02, 3.705216571793298e-02, 3.753633836713557e-02, 5.585540274683506e-02, 2.957600935771992e-02, 3.386475436197999e-02, 3.822346283198746e-02, 5.852750248674679e-03, 5.859207804100821e-03, 4.528837972017082e-02, 6.396211639493267e-02, 4.528837972017084e-02, 6.396211639493268e-02, -6.024384962858111e-05, 2.904019390986939e-03, 4.136213663406356e-03, 3.932683593193620e-03, 8.668093621060999e-03, 9.543912185801055e-03, 2.349962629291015e-02, -3.849186232115237e-02, 3.827644423373642e-03, 8.950113857786251e-03, 3.827644423373641e-03, 8.950113857786242e-03, -1.540113212065152e-02, -1.754250749903288e-02, 1.764342563325756e-02, 1.613055428953850e-02, 2.088544531020803e-02, 2.025810398084655e-02, 2.019897025963351e-02, -1.358945612637743e-04, 2.109106860947685e-02, 2.046542201627788e-02, 1.989550854434185e-02, 4.807803430311207e-03, -8.665609707153811e-03, -1.081598001583579e-02, 5.239037941127125e-02, 7.789447985459290e-03, 5.501696656273261e-02, 1.090693310871146e-02, 4.753058681223894e-02, 4.672931978642279e-02, 5.142498927489522e-02, 5.063714149303155e-02, 5.393742508991549e-02, 1.279986287502273e-02, 3.673228700232062e-02, 8.875429009961818e-03, 5.765087784394586e-02, 5.795992112830189e-02, 1.519910900259556e-02, 4.897892819144401e-02, 7.913157922351385e-03, 6.465023765919779e-02, 6.764855166295770e-02, 6.792674387131366e-02, 6.119338060927335e-02, 8.845606654609780e-03, 5.212108583250404e-02, 5.175853548315883e-02, 1.234397686641338e-02, 1.093488030001147e-02, 2.338217131572127e-02, 2.472759081357619e-02, 8.510665520351260e-02, 8.482117407127919e-02, 3.835521593238655e-02, 4.818215344846843e-02, 3.835521593238655e-02, 4.818215344846838e-02, 3.160776194637390e-04, -6.512316027780343e-05, 1.398779342947182e-03, 1.398601636914746e-03, 2.148067702161335e-05, -3.070546179859867e-05, 9.121603853458424e-03, 2.275257787888351e-02, 5.870403975534334e-03, 8.465094482170137e-03, 5.863456681941718e-03, -6.136357183035894e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
