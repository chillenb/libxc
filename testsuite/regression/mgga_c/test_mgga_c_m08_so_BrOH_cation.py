
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_so_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.139997934587280e-02, -6.138905975163851e-02, -6.134307110550948e-02, -6.150461606255543e-02, -6.141964339696587e-02, -6.141964339696587e-02, 5.380053808245383e-03, 5.352698668831525e-03, 4.648960318140106e-03, 5.178235408927897e-03, 5.018615795103468e-03, 5.018615795103468e-03, -1.520695623126498e-02, -1.469026813063135e-02, -2.794999367611372e-04, 1.797953559418928e-03, 6.916062233303413e-04, 6.916062233303413e-04, 1.638741581625172e-02, 1.672740912362363e-02, -6.105839592217983e-02, -3.212336454398159e-02, -5.401198954710891e-03, -5.401198954710196e-03, -2.184486913941816e-02, -2.277326220415295e-02, -7.336528095620386e-02, -1.370247989354879e-02, -1.421736801481119e-02, -1.421736801481109e-02, -5.731601810445098e-03, -5.229382916095751e-03, -5.686126742197652e-03, -5.243501787498696e-03, -5.481678527179004e-03, -5.481678527179004e-03, 3.817533008455273e-02, 3.597427377814195e-02, 4.103857163126663e-02, 3.916825224355026e-02, 3.551494701943821e-02, 3.551494701943821e-02, -4.496119911919640e-02, -9.382572616232959e-02, -2.252745121870225e-02, -5.405572096142229e-02, -5.072129090711804e-02, -5.072129090711805e-02, -6.462304993982819e-02, -5.467177371942979e-03, -6.819399585976453e-02, -8.342667880842856e-02, -4.051039117004598e-02, -4.051039117004600e-02, -1.089480326281539e-02, -1.343533106276836e-02, -1.055904680234504e-02, -7.731118210939049e-02, -1.176046211111475e-02, -1.176046211111457e-02, -1.904811236355401e-02, -7.051205933433428e-02, -5.112220186411057e-02, -3.121707209063089e-02, -4.121553713773388e-02, -4.121553713773388e-02, -3.311939466835411e-02, -2.021860987478215e-02, -4.870310930700023e-02, -6.884882996289064e-02, -5.707842261880317e-02, -5.707842261880317e-02, -7.603767677990923e-02, 1.999960057624030e-02, 2.153046128010487e-02, -9.123856370646132e-04, 9.089783688023934e-03, 9.089783688023918e-03, -6.209236842009942e-03, -7.220368777664833e-02, -7.996503426069146e-02, -1.389171692636985e-02, -6.392499151943448e-02, -6.392499151943451e-02, -2.908800335427324e-02, -4.056822297899251e-03, -8.004008859468666e-03, -6.513614124561656e-02, -1.110153319636394e-02, -1.110153319636386e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_so_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.721174320483816e-01, 4.721172466821876e-01, 4.721616239400762e-01, 4.721613113979263e-01, 4.723544729273544e-01, 4.723548183072150e-01, 4.717021024478499e-01, 4.717010048206262e-01, 4.720452257548692e-01, 4.720433907283657e-01, 4.720452257548692e-01, 4.720433907283657e-01, -2.160090793351620e-01, -2.160094979718964e-01, -2.161642364544668e-01, -2.161647152124659e-01, -2.202579522608542e-01, -2.202572953404817e-01, -2.185591584058613e-01, -2.185587241861522e-01, -2.187624308013640e-01, -2.187507399124087e-01, -2.187624308013640e-01, -2.187507399124087e-01, -1.088484771318157e-01, -1.083609200126430e-01, -1.102597360317043e-01, -1.096636415906597e-01, -1.145716688502926e-01, -1.152609767644301e-01, -1.158418781874639e-01, -1.156429109374042e-01, -1.131576958967545e-01, -1.193743701143890e-01, -1.131576958967545e-01, -1.193743701143890e-01, 1.280009672625804e-02, 1.344510294788447e-02, -2.695723876595548e-03, -1.860256208012995e-03, -1.073166317515856e-01, -9.958140285373107e-02, 3.164808961982723e-02, 3.289981368332108e-02, 6.059944286626808e-02, 3.538271570000005e-02, 6.059944286624261e-02, 3.538271569997323e-02, -2.908400595712689e-02, -2.665691576702181e-02, -3.046879522476945e-02, -2.758956489523440e-02, -7.579457217826478e-02, -6.743302448902047e-02, -1.747255166789522e-02, -1.787815547891023e-02, -1.580185982293459e-02, -3.104595535016543e-02, -1.580185982294688e-02, -3.104595535017764e-02, 7.697837816444252e-04, 7.384613220893539e-04, -1.015000365139906e-02, -1.018215301296850e-02, 1.854662925240956e-04, 1.535681659838801e-04, -9.450480061034943e-03, -9.481899037907308e-03, -4.692621898612857e-03, -4.724520835405914e-03, -4.692621898612857e-03, -4.724520835405914e-03, -1.070929368916831e-01, -1.070912926257144e-01, -1.157947990663190e-01, -1.157867234428725e-01, -1.021705996279452e-01, -1.022353638382260e-01, -1.074637053617844e-01, -1.075272172889015e-01, -1.155405402949711e-01, -1.154157991163614e-01, -1.155405402949711e-01, -1.154157991163614e-01, -1.602512871248854e-01, -1.605330237979996e-01, -3.046494916294917e-01, -3.045528006625846e-01, -1.702414208023554e-01, -1.674855763229541e-01, -1.086348587366441e-01, -1.047847938731622e-01, -1.389249471481090e-01, -1.446982957194650e-01, -1.389249471481090e-01, -1.446982957194649e-01, 2.288862712403912e-04, 1.583553433393489e-03, 7.791628042646231e-02, 7.812771307348984e-02, -1.019911658604634e-02, -2.386743006231941e-03, -1.796132496116023e-01, -1.796891326151628e-01, 1.891750256680509e-02, 2.468141736415583e-02, 1.891750256683726e-02, 2.468141736421308e-02, -1.449966920396437e-02, -1.377150901230683e-02, -1.751694726099931e-02, -1.716190830470899e-02, -1.422196158411758e-02, -1.317153686459242e-02, -4.257747630286766e-02, -4.156616913464409e-02, -1.999421277400167e-02, -1.329414121095333e-02, -1.999421277399853e-02, -1.329414121094557e-02, -4.620470453823804e-02, -4.589896388249168e-02, 5.893392394260098e-02, 5.956001203710064e-02, 1.214057741181384e-01, 1.218364087193789e-01, 1.139546150363162e-01, 1.142466962241139e-01, 1.276411183128121e-01, 1.279945108694892e-01, 1.276411183128133e-01, 1.279945108694887e-01, -5.712804001809840e-02, -5.687106297255506e-02, -1.927052802387881e-01, -1.924061842233533e-01, -1.337096987896678e-01, -1.332304796570902e-01, -1.826009302879012e-01, -1.819552437191965e-01, -1.245686133516313e-01, -1.240843624946438e-01, -1.245686133516314e-01, -1.240843624946439e-01, -2.384526434454374e-01, -2.381859804301024e-01, 4.522661687470574e-02, 4.526706236271401e-02, -6.195616911488687e-02, -6.174355665949662e-02, -5.876824080434587e-02, -5.853452064627500e-02, -6.644002520433807e-02, -6.645326143443618e-02, -6.644002520433859e-02, -6.645326143443650e-02, -1.414868933408442e-01, -1.411639254889772e-01, -7.218794985772753e-02, -7.116223445688978e-02, -6.783866822254696e-02, -6.226698000652933e-02, -1.316131671170563e-01, -1.307389531642104e-01, -1.184221603245198e-02, -4.255323512288729e-03, -1.184221603248505e-02, -4.255323512264331e-03, -3.763546176239568e-02, -3.569172634776677e-02, -5.326164729646081e-03, -5.310820908473630e-03, -1.086976744400944e-02, -1.002710513221666e-02, -1.263760192427280e-02, -1.034940740179293e-02, -1.826734001839185e-02, -1.264867559641102e-02, -1.826734001838183e-02, -1.264867559640670e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.437836279587786e-10, 6.875672559175573e-10, 3.437836279587786e-10, 3.438325932433934e-10, 6.876651864867868e-10, 3.438325932433934e-10, 3.440139881657500e-10, 6.880279763314999e-10, 3.440139881657500e-10, 3.432893298395030e-10, 6.865786596790060e-10, 3.432893298395030e-10, 3.436740197556852e-10, 6.873480395113703e-10, 3.436740197556852e-10, 3.436740197556852e-10, 6.873480395113703e-10, 3.436740197556852e-10, 1.640599710202137e-06, 3.281199420404273e-06, 1.640599710202137e-06, 1.640678813987729e-06, 3.281357627975457e-06, 1.640678813987729e-06, 1.641500149105587e-06, 3.283000298211174e-06, 1.641500149105587e-06, 1.629520420725986e-06, 3.259040841451971e-06, 1.629520420725986e-06, 1.636210006083204e-06, 3.272420012166406e-06, 1.636210006083204e-06, 1.636210006083204e-06, 3.272420012166406e-06, 1.636210006083204e-06, 6.640476152167930e-03, 1.328095230433586e-02, 6.640476152167930e-03, 6.628155594055819e-03, 1.325631118811164e-02, 6.628155594055819e-03, 5.945930358203264e-03, 1.189186071640653e-02, 5.945930358203264e-03, 5.578141463147509e-03, 1.115628292629502e-02, 5.578141463147509e-03, 5.720403695060190e-03, 1.144080739012038e-02, 5.720403695060190e-03, 5.720403695060190e-03, 1.144080739012038e-02, 5.720403695060190e-03, 6.846967528299697e-01, 1.369393505659940e+00, 6.846967528299697e-01, 7.214667593106708e-01, 1.442933518621341e+00, 7.214667593106708e-01, 4.260044104242086e-03, 8.520088208484171e-03, 4.260044104242086e-03, 5.519773346883181e-01, 1.103954669376637e+00, 5.519773346883181e-01, 4.171410031391604e-01, 8.342820062783198e-01, 4.171410031391604e-01, 4.171410031391617e-01, 8.342820062783232e-01, 4.171410031391617e-01, -1.730298022444466e-02, -3.460596045024766e-02, -1.730298022444466e-02, -2.028069061662788e-02, -4.056138123142263e-02, -2.028069061662788e-02, -4.607285967907979e-02, -9.214571935817875e-02, -4.607285967907979e-02, -6.264672278474360e-03, -1.252934455672427e-02, -6.264672278474360e-03, -9.131439143973623e-03, -1.826287829073921e-02, -9.131439143973623e-03, -9.131439147365847e-03, -1.826287829191405e-02, -9.131439147365847e-03, 1.263644131046399e-06, 2.527288262092799e-06, 1.263644131046399e-06, 1.281870718661895e-06, 2.563741437323790e-06, 1.281870718661895e-06, 1.264554399132116e-06, 2.529108798264231e-06, 1.264554399132116e-06, 1.280637378629029e-06, 2.561274757258058e-06, 1.280637378629029e-06, 1.272879647150285e-06, 2.545759294300569e-06, 1.272879647150285e-06, 1.272879647150285e-06, 2.545759294300569e-06, 1.272879647150285e-06, 1.101815386250070e-05, 2.203630772500141e-05, 1.101815386250070e-05, 1.051827044573144e-05, 2.103654089146289e-05, 1.051827044573144e-05, 1.088864224963811e-05, 2.177728449927621e-05, 1.088864224963811e-05, 1.040155659278847e-05, 2.080311318557694e-05, 1.040155659278847e-05, 1.081444438262248e-05, 2.162888876524496e-05, 1.081444438262248e-05, 1.081444438262248e-05, 2.162888876524496e-05, 1.081444438262248e-05, 4.297450230393100e-03, 8.594900460786200e-03, 4.297450230393100e-03, 1.675044001203171e-02, 3.350088002406343e-02, 1.675044001203171e-02, 1.067983493302969e-02, 2.135966986605939e-02, 1.067983493302969e-02, 7.917048147922707e-03, 1.583409629584541e-02, 7.917048147922707e-03, 3.062640344577182e-03, 6.125280689154366e-03, 3.062640344577182e-03, 3.062640344577182e-03, 6.125280689154363e-03, 3.062640344577182e-03, 2.659790540354953e-01, 5.319581080709929e-01, 2.659790540354953e-01, 2.511879739185677e-01, 5.023759478371352e-01, 2.511879739185677e-01, 2.424442970346981e-01, 4.848885940693962e-01, 2.424442970346981e-01, 2.668414923690672e-05, 5.336829847381345e-05, 2.668414923690672e-05, 6.098377342924786e-01, 1.219675468584955e+00, 6.098377342924786e-01, 6.098377342924811e-01, 1.219675468584960e+00, 6.098377342924811e-01, -6.131797436966137e-03, -1.226359486001120e-02, -6.131797436966137e-03, -7.708320613698471e-03, -1.541664122020193e-02, -7.708320613698471e-03, -7.644178426414121e-02, -1.528835685058041e-01, -7.644178426414121e-02, 7.966559279360111e-02, 1.593311855872019e-01, 7.966559279360111e-02, -2.928952708237959e-02, -5.857905416018406e-02, -2.928952708237959e-02, -2.928952710748322e-02, -5.857905420828054e-02, -2.928952710748322e-02, 1.175596363635823e-01, 2.351192727271646e-01, 1.175596363635823e-01, 2.005613711325872e-02, 4.011227422651744e-02, 2.005613711325872e-02, 1.060751130662623e-02, 2.121502261325246e-02, 1.060751130662623e-02, 2.294072228999222e-02, 4.588144457998444e-02, 2.294072228999222e-02, 1.279128089706221e-02, 2.558256179412444e-02, 1.279128089706221e-02, 1.279128089706221e-02, 2.558256179412444e-02, 1.279128089706221e-02, 7.827663029274634e-02, 1.565532605854927e-01, 7.827663029274634e-02, 9.491847312541707e-03, 1.898369462508341e-02, 9.491847312541707e-03, 4.048861015406217e-03, 8.097722030812434e-03, 4.048861015406217e-03, 2.714577621192108e-02, 5.429155242384215e-02, 2.714577621192108e-02, 7.451607970951601e-03, 1.490321594190320e-02, 7.451607970951601e-03, 7.451607970951601e-03, 1.490321594190320e-02, 7.451607970951601e-03, 5.679789188565932e-03, 1.135957837713186e-02, 5.679789188565932e-03, 1.868967753354951e-01, 3.737935506709901e-01, 1.868967753354951e-01, 1.601257831394330e-01, 3.202515662788658e-01, 1.601257831394330e-01, 6.432151220094244e-02, 1.286430244018849e-01, 6.432151220094244e-02, 1.087653390909827e-01, 2.175306781819654e-01, 1.087653390909827e-01, 1.087653390909828e-01, 2.175306781819656e-01, 1.087653390909828e-01, 1.690136772838752e-02, 3.380273545677505e-02, 1.690136772838752e-02, -4.135642412221043e-02, -8.271284824442242e-02, -4.135642412221043e-02, -1.886719557149447e-02, -3.773439114299105e-02, -1.886719557149447e-02, 7.992079596612392e-02, 1.598415919322478e-01, 7.992079596612392e-02, 3.990882583661823e-01, 7.981765167323640e-01, 3.990882583661823e-01, 3.990882583661751e-01, 7.981765167323494e-01, 3.990882583661751e-01, -2.135443819833559e-02, -4.270887639678362e-02, -2.135443819833559e-02, -8.412162707236732e-03, -1.682432530444992e-02, -8.412162707236732e-03, -1.049178909801814e-02, -2.098357818367919e-02, -1.049178909801814e-02, 3.364079195292685e-01, 6.728158390585374e-01, 3.364079195292685e-01, -3.737672731303976e-02, -7.475345464355683e-02, -3.737672731303976e-02, -3.737672729791822e-02, -7.475345459703867e-02, -3.737672729791822e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.914220553688836e-04, -3.914220553688832e-04, -3.914607213432883e-04, -3.914607213432885e-04, -3.916228778221338e-04, -3.916228778221340e-04, -3.910508101829807e-04, -3.910508101829806e-04, -3.913519487882849e-04, -3.913519487882847e-04, -3.913519487882849e-04, -3.913519487882847e-04, 9.343727328667498e-04, 9.343727328667489e-04, 9.356663142027996e-04, 9.356663142027990e-04, 9.701232293056737e-04, 9.701232293056739e-04, 9.578332161820455e-04, 9.578332161820461e-04, 9.585463353939107e-04, 9.585463353939111e-04, 9.585463353939107e-04, 9.585463353939111e-04, -8.125929873017062e-03, -8.125929873017114e-03, -7.994740197896337e-03, -7.994740197896210e-03, -6.420173178626620e-03, -6.420173178626709e-03, -5.862350365976270e-03, -5.862350365976180e-03, -6.017916553827505e-03, -6.017916553827462e-03, -6.017916553827505e-03, -6.017916553827462e-03, -7.564762233465644e-02, -7.564762233465598e-02, -6.766349545239464e-02, -6.766349545239887e-02, -7.404017779661436e-03, -7.404017779661436e-03, -6.797798655342975e-02, -6.797798655343024e-02, -7.470950534778252e-02, -7.470950534778727e-02, -7.470950534777995e-02, -7.470950534777737e-02, -1.954642511865625e-04, -1.954642511756093e-04, -2.352406288608485e-04, -2.352406288665597e-04, -1.099811483294004e-02, -1.099811483294004e-02, -3.000159038794679e-05, -3.000159038794679e-05, -6.842658955074783e-05, -6.842658955229998e-05, -6.842658954298734e-05, -6.842658954298734e-05, -4.345724062406555e-03, -4.345724062406561e-03, -4.243194133449779e-03, -4.243194133449773e-03, -4.340346766616212e-03, -4.340346766616206e-03, -4.249877687531379e-03, -4.249877687531371e-03, -4.294881359449397e-03, -4.294881359449397e-03, -4.294881359449397e-03, -4.294881359449397e-03, 1.109368063271900e-03, 1.109368063271899e-03, 1.324186008659161e-03, 1.324186008659159e-03, 1.026478814950698e-03, 1.026478814950697e-03, 1.174873692527103e-03, 1.174873692527107e-03, 1.291607763116065e-03, 1.291607763116065e-03, 1.291607763116065e-03, 1.291607763116065e-03, 3.470436710672517e-02, 3.470436710672517e-02, 1.070137941521393e-01, 1.070137941521393e-01, 3.052143609347322e-02, 3.052143609347323e-02, 1.392523598543978e-02, 1.392523598543978e-02, 2.989119402859328e-02, 2.989119402859327e-02, 2.989119402859329e-02, 2.989119402859329e-02, -4.664232468649099e-02, -4.664232468649099e-02, -7.675737575426514e-02, -7.675737575428113e-02, -4.479999611601726e-02, -4.479999611601718e-02, 3.398745108816046e-03, 3.398745108816046e-03, -6.626160063442231e-02, -6.626160063440587e-02, -6.626160063442145e-02, -6.626160063441755e-02, -9.828691068535897e-06, -9.828691069634465e-06, -2.485131659952543e-05, -2.485131659952543e-05, -9.233917513364814e-05, -9.233917513752826e-05, -3.232753455546795e-02, -3.232753455546792e-02, -5.727916765282426e-05, -5.727916765660096e-05, -5.727916766037767e-05, -5.727916766509854e-05, -2.133624908847133e-01, -2.133624908846952e-01, -3.705499340303012e-01, -3.705499340302990e-01, -5.000296010890994e-01, -5.000296010891053e-01, -5.411218336366921e-01, -5.411218336366982e-01, -5.361618801307263e-01, -5.361618801307254e-01, -5.361618801307263e-01, -5.361618801307254e-01, -3.358558508498335e-03, -3.358558508503568e-03, 5.831597633284652e-02, 5.831597633284654e-02, 4.023198765011433e-02, 4.023198765011437e-02, 2.185050571425145e-02, 2.185050571425128e-02, 2.527180604660659e-02, 2.527180604660664e-02, 2.527180604660661e-02, 2.527180604660659e-02, 6.858426324241641e-02, 6.858426324241648e-02, -5.738395384963800e-02, -5.738395384964241e-02, -1.612051563701180e-02, -1.612051563701180e-02, -9.039397978606712e-03, -9.039397978606768e-03, -1.382793098787394e-02, -1.382793098787394e-02, -1.382793098787427e-02, -1.382793098787412e-02, 3.297160853791026e-02, 3.297160853791026e-02, -1.008174597985146e-02, -1.008174597984350e-02, -1.800916349377373e-02, -1.800916349377373e-02, 5.403166926518480e-02, 5.403166926518480e-02, -5.332073127640848e-02, -5.332073127641652e-02, -5.332073127640844e-02, -5.332073127641648e-02, -2.477259099751060e-04, -2.477259099765739e-04, -6.564889763259552e-07, -6.564889770881461e-07, -1.636256099142313e-05, -1.636256099142313e-05, -5.292541772249805e-02, -5.292541772247201e-02, -6.598014476613868e-05, -6.598014476613868e-05, -6.598014476896358e-05, -6.598014476613898e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
