
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_so_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.640505619150385e-01, -2.640634660409088e-01, -2.641157437114233e-01, -1.293460131414509e-01, -9.378459724113265e-02, -5.805375888359916e-02, 1.027800755618155e-02, 3.484753943389034e-02, 3.398419987199901e-02, 3.433653960884972e-02, 3.429693522053508e-02, 9.594224029720788e-03, -1.619735171785093e-01, -3.828282061055314e-02, 5.459982284343756e-02, 1.221463443348447e-02, -1.775906502345619e-01, 5.304954949882715e-02, -7.267626157412080e-03, -4.271690280865936e-02, 1.592073271807801e-02, -2.914344217287034e-02, 6.900178387240817e-05, -1.908898063563267e-04, -2.184480618465382e-02, -2.277321444479879e-02, -7.334551975891367e-02, -1.370247639863411e-02, -1.421737058269333e-02, -1.421737058269324e-02, -8.310079132100892e-02, -4.470121385630256e-03, -4.944008259344765e-03, -4.499156707127238e-03, -1.511122499832634e-01, -8.300813898365160e-02, 1.634536430392096e-02, 1.421503462346714e-02, 4.508130662000697e-02, 4.251485666522287e-02, -1.337684769612909e-02, 1.433947834414696e-02, -4.719579508187995e-02, -6.272354075164764e-02, -5.544922233596738e-03, -3.970346213981547e-02, -5.138421278533022e-02, -4.642201600834732e-02, -6.417501788695164e-02, -2.304203640914589e-02, -6.987042169838950e-02, -6.801264191138871e-02, -4.834175533028480e-02, -4.834175533028486e-02, -1.089480308411013e-02, -1.343533175212776e-02, -1.055904065573910e-02, -7.746950533372797e-02, -1.176045866198043e-02, -1.176045866198025e-02, 3.853117345962435e-03, -6.676411739879247e-02, -5.765435363868796e-02, -3.378012977702767e-02, -4.808205865329040e-02, -4.308864221542130e-02, -2.383296307684500e-02, -4.351615832909912e-02, -5.265892631499525e-02, -6.261045803974545e-02, -5.552474981870779e-02, -6.277049325670871e-02, -7.702665951461773e-02, -7.750226130550048e-03, -7.089142338446963e-03, -8.541492288447786e-03, -1.096160246981146e-02, -1.075907291065520e-02, 2.589629035174193e-04, -4.409519144578779e-02, -7.996834123330251e-02, -1.906413488549225e-02, -6.370442067713643e-02, -6.370442067713644e-02, -8.719631386094580e-03, -4.056822311546604e-03, -2.257464252570198e-03, -1.406856858037967e-01, -1.110153439632219e-02, -1.110148548162553e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_so_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.668033590257176e-01, -9.668039748785691e-01, -9.668333047150033e-01, -9.668343432541925e-01, -9.669565983008604e-01, -9.669554498905777e-01, -4.925317101955645e-02, -4.925527431305603e-02, 2.204609576521011e-01, 2.204583081410794e-01, 4.986994859626193e-01, 4.986977368622393e-01, -2.148022883813894e-01, -2.148025711688195e-01, -1.978153636972773e-01, -1.978148432468304e-01, -2.020051607553187e-01, -2.020058154635430e-01, -2.003061464120041e-01, -2.003066019164305e-01, -2.004785539471009e-01, -2.004906681233054e-01, -2.176287092210881e-01, -2.176204952669534e-01, 1.275515796463148e-01, 1.288318538621757e-01, -9.768974415124837e-02, -9.687189101443008e-02, -2.575662817558046e-02, -2.541379290956261e-02, -1.090306666036241e-01, -1.088850667141365e-01, 6.931516072764901e-02, 4.602935876572129e-02, -4.687519833811737e-02, -4.386035305971344e-02, -5.212474559813967e-02, -4.877617600589761e-02, -1.050613687144056e-01, -9.788589040428362e-02, 4.656318454923921e-02, 4.821247347942506e-02, 4.527345006891036e-02, 4.634885980114326e-02, 8.313192648161119e-02, 7.572087977572679e-02, 8.196907095219409e-02, 7.366846841667427e-02, -2.908358953885037e-02, -2.665651516614861e-02, -3.046847873490573e-02, -2.758926207503831e-02, -7.570642844089119e-02, -6.735014501614436e-02, -1.747252891969288e-02, -1.787813249927571e-02, -1.580187561433404e-02, -3.104597704461194e-02, -1.580187561434634e-02, -3.104597704462414e-02, -1.800436655238905e-01, -1.801083324224621e-01, -8.321831454507841e-03, -8.353630658258473e-03, 2.040787949315659e-03, 2.009229791782497e-03, -7.653803509345764e-03, -7.684886909702459e-03, -3.147408958061638e-01, -3.148337415068173e-01, -1.821052461959269e-01, -1.821711541411363e-01, -1.042451894556062e-01, -1.042460425759946e-01, -1.169361025574994e-01, -1.169413212525040e-01, -1.008357598573258e-01, -1.009182034882447e-01, -1.058729692089208e-01, -1.059515971995165e-01, -9.720997863650256e-02, -9.752792177440267e-02, -1.160792658499517e-01, -1.161627808873865e-01, -1.490990911689949e-01, -1.493897870176772e-01, -1.336227286839178e-01, -1.335440444650728e-01, -1.775486224590754e-01, -1.759371896035974e-01, -1.827125815079052e-01, -1.795532852808590e-01, -1.356442724568193e-01, -1.414681140754004e-01, -1.589020697504017e-01, -1.643113363294029e-01, 3.310081814120058e-03, 4.644294198177637e-03, 1.700960483400150e-02, 1.753421496360242e-02, -2.214176948077402e-02, -1.391697571607547e-02, -2.160409070679784e-01, -2.161050551755633e-01, -1.928962323618207e-02, -1.160772105982871e-02, -1.928962323615175e-02, -1.160772105977336e-02, -1.449966801765958e-02, -1.377150785259292e-02, -1.751695179322133e-02, -1.716191279619224e-02, -1.422192061185703e-02, -1.317149725225860e-02, -4.429758392369836e-02, -4.328155048719814e-02, -1.999418710625182e-02, -1.329411986849963e-02, -1.999418710624867e-02, -1.329411986849189e-02, 8.408344158846992e-02, 8.431347334769973e-02, 3.080562054923091e-02, 3.141643525106689e-02, 1.376575156438437e-01, 1.381087397846115e-01, 9.024697152658262e-02, 9.054757417170275e-02, 8.721246640252266e-02, 8.758700597071412e-02, 1.163167661107424e-01, 1.166765797317913e-01, 9.823281023970804e-03, 1.005661171352638e-02, -1.403808442575403e-01, -1.399262082237132e-01, -1.231546629381784e-01, -1.226494671454108e-01, -1.500161762296027e-01, -1.494008105635992e-01, -1.113230913488146e-01, -1.108476971092836e-01, -1.712959406772792e-01, -1.707829236972226e-01, -2.460642372843814e-01, -2.457958534084080e-01, -3.711175094378153e-02, -3.657672023536199e-02, -9.671033083075593e-02, -9.574571064282832e-02, -4.965982475289003e-02, -4.934763913869641e-02, -4.512417370065469e-02, -4.515288671182632e-02, -4.542852963250465e-02, -4.545710398779814e-02, -1.403463728157712e-01, -1.401148392879597e-01, -8.500291682471708e-02, -8.437636484783387e-02, -6.783187424925195e-02, -6.225964536368525e-02, -1.278536022259642e-01, -1.268560433731060e-01, -1.018138631297242e-02, -2.652765290679191e-03, -1.018138631300545e-02, -2.652765290654704e-03, -1.224901856994622e-02, -1.166634813084472e-02, -5.326164819812619e-03, -5.310820998526983e-03, -3.094869675669629e-03, -2.857203756517893e-03, -2.350461974139133e-01, -2.301679313261022e-01, -1.826734880691838e-02, -1.264868304613862e-02, -1.826699081358247e-02, -1.264837959956759e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.455448297100207e-08, 2.910896594200414e-08, 1.455448297100207e-08, 1.455612937381612e-08, 2.911225874763224e-08, 1.455612937381612e-08, 1.456267172946166e-08, 2.912534345892332e-08, 1.456267172946166e-08, 1.269807597397192e-09, 2.539615194794383e-09, 1.269807597397192e-09, 6.554793885475959e-10, 1.310958777095192e-09, 6.554793885475959e-10, 3.198041681009282e-10, 6.396083362018565e-10, 3.198041681009282e-10, 1.428358200747930e-06, 2.856716401495861e-06, 1.428358200747930e-06, 5.963064777365228e-07, 1.192612955473046e-06, 5.963064777365228e-07, 5.995626919025544e-07, 1.199125383805109e-06, 5.995626919025544e-07, 5.979746080441577e-07, 1.195949216088315e-06, 5.979746080441577e-07, 5.984556807252105e-07, 1.196911361450421e-06, 5.984556807252105e-07, 1.437399085695848e-06, 2.874798171391697e-06, 1.437399085695848e-06, 3.107713083188378e-02, 6.215426166376756e-02, 3.107713083188378e-02, 9.136312181824178e-03, 1.827262436364836e-02, 9.136312181824178e-03, 1.461750419658655e-03, 2.923500839317310e-03, 1.461750419658655e-03, 4.617365605222925e-03, 9.234731210445849e-03, 4.617365605222925e-03, 3.664439834490438e-02, 7.328879668980876e-02, 3.664439834490438e-02, 1.505205412827329e-03, 3.010410825654658e-03, 1.505205412827329e-03, 1.689932458471640e+00, 3.379864916943281e+00, 1.689932458471640e+00, 3.422112648634826e+00, 6.844225297269651e+00, 3.422112648634826e+00, 1.150426613765995e-03, 2.300853227531990e-03, 1.150426613765995e-03, 3.141022983874879e-01, 6.282045967749749e-01, 3.141022983874879e-01, 1.111208201028838e-01, 2.222416402057680e-01, 1.111208201028838e-01, 1.226277964486292e-01, 2.452555928972590e-01, 1.226277964486292e-01, -1.315056417891452e-01, -2.630112835806701e-01, -1.315056417891452e-01, -8.675085510959117e-02, -1.735017102187093e-01, -8.675085510959117e-02, -1.662568263073251e-01, -3.325136526146783e-01, -1.662568263073251e-01, -3.541263719393018e-02, -7.082527438141450e-02, -3.541263719393018e-02, -2.118181738385788e-03, -4.236363477691276e-03, -2.118181738385788e-03, -2.118181736776777e-03, -4.236363474176311e-03, -2.118181736776777e-03, 2.284938008517869e-06, 4.569876017035737e-06, 2.284938008517869e-06, 1.274216942736792e-06, 2.548433885473583e-06, 1.274216942736792e-06, 1.257111332071238e-06, 2.514222664142476e-06, 1.257111332071238e-06, 1.273136708641386e-06, 2.546273417282771e-06, 1.273136708641386e-06, 3.785338241040439e-06, 7.570676482080879e-06, 3.785338241040439e-06, 2.298572180907294e-06, 4.597144361814586e-06, 2.298572180907294e-06, 2.245618103457225e-05, 4.491236206914450e-05, 2.245618103457225e-05, 2.172953020435150e-05, 4.345906040870301e-05, 2.172953020435150e-05, 9.150049419382578e-06, 1.830009883876516e-05, 9.150049419382578e-06, 8.985047437360983e-06, 1.797009487472197e-05, 8.985047437360983e-06, 4.259000923202479e-05, 8.518001846404959e-05, 4.259000923202479e-05, 2.179552236605729e-05, 4.359104473211459e-05, 2.179552236605729e-05, 4.862040720158402e-03, 9.724081440316805e-03, 4.862040720158402e-03, 1.015735175923372e-02, 2.031470351846745e-02, 1.015735175923372e-02, 5.725229817445007e-03, 1.145045963489001e-02, 5.725229817445007e-03, 3.429815556981242e-03, 6.859631113962483e-03, 3.429815556981242e-03, 3.221690309509880e-03, 6.443380619019759e-03, 3.221690309509880e-03, 2.137420163346466e-03, 4.274840326692932e-03, 2.137420163346466e-03, 1.634737575849330e-01, 3.269475151698678e-01, 1.634737575849330e-01, 8.425060563376254e-01, 1.685012112675251e+00, 8.425060563376254e-01, 9.474795565545168e-01, 1.894959113109030e+00, 9.474795565545168e-01, 7.351505743589116e-06, 1.470301148717823e-05, 7.351505743589116e-06, 2.415421389004543e+00, 4.830842778009085e+00, 2.415421389004543e+00, 2.415421389004552e+00, 4.830842778009107e+00, 2.415421389004552e+00, -8.918388092626772e-03, -1.783677617887288e-02, -8.918388092626772e-03, -3.541851188479760e-03, -7.083702380045567e-03, -3.541851188479760e-03, -4.049863622286005e-01, -8.099727243857987e-01, -4.049863622286005e-01, 3.372757781330821e-01, 6.745515562661670e-01, 3.372757781330821e-01, -9.331607182320754e-02, -1.866321436408588e-01, -9.331607182320754e-02, -9.331607182333430e-02, -1.866321436370764e-01, -9.331607182333430e-02, 1.084544930790570e-01, 2.169089861581140e-01, 1.084544930790570e-01, 1.872422085320152e-02, 3.744844170640303e-02, 1.872422085320152e-02, 1.333461627611839e-02, 2.666923255223679e-02, 1.333461627611839e-02, 2.396497775649746e-02, 4.792995551299491e-02, 2.396497775649746e-02, 1.567719888906139e-02, 3.135439777812277e-02, 1.567719888906139e-02, 1.353041762792387e-02, 2.706083525584774e-02, 1.353041762792387e-02, 7.390311413639325e-02, 1.478062282727865e-01, 7.390311413639325e-02, 2.213256268859151e-02, 4.426512537718302e-02, 2.213256268859151e-02, 5.845415330622894e-03, 1.169083066124579e-02, 5.845415330622894e-03, 2.465791575503250e-02, 4.931583151006499e-02, 2.465791575503250e-02, 6.832454920575577e-03, 1.366490984115115e-02, 6.832454920575577e-03, 9.988004141031709e-03, 1.997600828206342e-02, 9.988004141031709e-03, 5.881575286357328e-03, 1.176315057271466e-02, 5.881575286357328e-03, 5.574979151817626e-01, 1.114995830363525e+00, 5.574979151817626e-01, 3.456438647758080e-01, 6.912877295516160e-01, 3.456438647758080e-01, 8.136356562302377e-02, 1.627271312460475e-01, 8.136356562302377e-02, 1.860583986686275e-01, 3.721167973372549e-01, 1.860583986686275e-01, 1.852191567873921e-01, 3.704383135747842e-01, 1.852191567873921e-01, 1.295757247426417e-02, 2.591514494852835e-02, 1.295757247426417e-02, -2.645027616470543e+03, -5.290055232941087e+03, -2.645027616470543e+03, -1.248950693217261e-02, -2.497901386434528e-02, -1.248950693217261e-02, 9.492775248231589e-02, 1.898555049646318e-01, 9.492775248231589e-02, 2.646877703776249e-01, 5.293755407552467e-01, 2.646877703776249e-01, 2.646877703776200e-01, 5.293755407552436e-01, 2.646877703776200e-01, -1.309966522282345e+06, -2.619933044564690e+06, -1.309966522282345e+06, -4.837354983209901e-04, -9.674710850575483e-04, -4.837354983209901e-04, -5.330703016776230e+08, -1.066140603355246e+09, -5.330703016776230e+08, 2.681995994993695e+02, 5.363991989987391e+02, 2.681995994993695e+02, -1.521995442619501e-02, -3.043990886060158e-02, -1.521995442619501e-02, -3.075532665627436e+00, -6.151065331326184e+00, -3.075532665627436e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.025109625619473e-04, 4.025109625619471e-04, 4.025308492632288e-04, 4.025308492632289e-04, 4.026097659362832e-04, 4.026097659362830e-04, -1.251529812227453e-04, -1.251529812227452e-04, -2.645439505352307e-04, -2.645439505352304e-04, -4.045397036525767e-04, -4.045397036525765e-04, 9.713086771702556e-04, 9.713086771702547e-04, 1.158079687265899e-03, 1.158079687265898e-03, 1.191295058340284e-03, 1.191295058340284e-03, 1.177592017414888e-03, 1.177592017414889e-03, 1.179260448449871e-03, 1.179260448449871e-03, 9.930394802537860e-04, 9.930394802537862e-04, -2.955409972867093e-02, -2.955409972867089e-02, -1.136119380265560e-02, -1.136119380265549e-02, -2.403473329437456e-03, -2.403473329437571e-03, -4.781159569372992e-03, -4.781159569372898e-03, -2.319223871015666e-02, -2.319223871015679e-02, -9.741606404701300e-04, -9.741606404700346e-04, -7.570424667449765e-02, -7.570424667449681e-02, -7.302312822874278e-02, -7.302312822874646e-02, -7.688395652879997e-03, -7.688395652879997e-03, -6.729237904905881e-02, -6.729237904905915e-02, -7.356113931574203e-02, -7.356113931574702e-02, -7.361569867991917e-02, -7.361569867991660e-02, -1.954619335284438e-04, -1.954619335174906e-04, -2.352385941419388e-04, -2.352385941476501e-04, -1.097543771037335e-02, -1.097543771037335e-02, -3.000155931480136e-05, -3.000155931480136e-05, -6.842663996339639e-05, -6.842663996494853e-05, -6.842663995563591e-05, -6.842663995563591e-05, -2.513549693296010e-03, -2.513549693296015e-03, -4.260281150016640e-03, -4.260281150016633e-03, -4.357871069471287e-03, -4.357871069471279e-03, -4.266682289573565e-03, -4.266682289573558e-03, -9.316292045280695e-04, -9.316292045280695e-04, -2.504453480284738e-03, -2.504453480284738e-03, 3.173554864656695e-04, 3.173554864656683e-04, 6.107253682912093e-04, 6.107253682912078e-04, 1.182815654391779e-03, 1.182815654391777e-03, 1.294942589787126e-03, 1.294942589787130e-03, -3.224223199297741e-04, -3.224223199297741e-04, 5.925570601638050e-04, 5.925570601638050e-04, 2.971123809998730e-02, 2.971123809998730e-02, -1.836636714366115e-02, -1.836636714366120e-02, 3.826410559004037e-02, 3.826410559004038e-02, 4.996563421007533e-02, 4.996563421007535e-02, 2.833394488114543e-02, 2.833394488114541e-02, 3.999048685750147e-02, 3.999048685750148e-02, -4.691453358304654e-02, -4.691453358304654e-02, -7.909893904933905e-02, -7.909893904935353e-02, -4.346398249249109e-02, -4.346398249249089e-02, 5.532387642307921e-03, 5.532387642307921e-03, -6.641657145476877e-02, -6.641657145475277e-02, -6.641657145476659e-02, -6.641657145476314e-02, -9.828690415586621e-06, -9.828690416685187e-06, -2.485132177465521e-05, -2.485132177465521e-05, -9.233895629816861e-05, -9.233895630204869e-05, -3.184623727594053e-02, -3.184623727594046e-02, -5.727909931488935e-05, -5.727909931866605e-05, -5.727909932244276e-05, -5.727909932716363e-05, -8.595260567557121e-01, -8.595260567556937e-01, -3.157799377237121e-01, -3.157799377237100e-01, -5.237653274456909e-01, -5.237653274456968e-01, -4.590245130855718e-01, -4.590245130855779e-01, -4.002269977429651e-01, -4.002269977429651e-01, -4.990804673865153e-01, -4.990804673865147e-01, -3.077386369709880e-01, -3.077386369709931e-01, 2.966459895624594e-02, 2.966459895624595e-02, 3.288182628529333e-02, 3.288182628529336e-02, -1.153240597216313e-02, -1.153240597216330e-02, 1.494533824256047e-02, 1.494533824256051e-02, 6.310408590442428e-02, 6.310408590442426e-02, 7.288843910059160e-02, 7.288843910059166e-02, -5.634104306388846e-02, -5.634104306389238e-02, -3.041061354834305e-02, -3.041061354834305e-02, -1.812593375407247e-02, -1.812593375407253e-02, -4.260631404502339e-02, -4.260631404502339e-02, -4.231563722159040e-02, -4.231563722159021e-02, 3.596040571376836e-02, 3.596040571376837e-02, 1.787399696154595e-02, 1.787399696154595e-02, -1.802453132100651e-02, -1.802453132100651e-02, 4.933197778718745e-02, 4.933197778718745e-02, -5.356698932009037e-02, -5.356698932009844e-02, -5.356698932009035e-02, -5.356698932009843e-02, 4.710083185238807e-04, 4.710083185224128e-04, -6.564889852508411e-07, -6.564889860130320e-07, 3.122511084864826e-05, 3.122511084864826e-05, 4.794184550294402e-02, 4.794184550294402e-02, -6.598017378251852e-05, -6.598017378251852e-05, -6.597899097134312e-05, -6.597899096851853e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
