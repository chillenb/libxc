
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.375213104833339e-02, -7.375173311742081e-02, -7.375012710729113e-02, -7.375601755266106e-02, -7.375290818609392e-02, -7.375290818609392e-02, -9.032458560528650e-02, -9.031535878055272e-02, -9.007296478481240e-02, -9.017160887404267e-02, -9.016005780741052e-02, -3.530949505562896e-02, -9.300932308744427e-02, -1.945533122030968e-02, -1.819671350570010e-02, -1.874531141714149e-02, -1.861965938662350e-02, -1.861965938662350e-02, -8.857737794273865e-03, -9.114279103799500e-03, -1.398956023025930e-01, -5.353154381971648e-03, -6.640815555287430e-03, -6.640815555287424e-03, -8.782538183883856e-05, -9.540800162544670e-05, -9.568967396883130e-04, -3.618827302710219e-05, -5.416757765721437e-05, -5.416757765721437e-05, -5.002579504139298e-02, -5.007556362257298e-02, -5.002865514106199e-02, -6.555794076957193e-02, -5.005073420126936e-02, -5.005073420126936e-02, -9.136896630102592e-02, -8.982234221460537e-02, -9.263918988947692e-02, -9.119207199444733e-02, -8.990469118430265e-02, -3.103094792714806e-02, -2.736893871848949e-02, -3.173185046767334e-02, -2.432414626670259e-02, -2.705309311081262e-02, -2.816869352523806e-02, -4.997651812849835e-02, -1.938407165227461e-01, -7.403885202438955e-03, -2.088693407640460e-01, -3.899198083434806e-02, -4.289354228410699e-03, -4.289354228410699e-03, -8.497080050912656e+00, -3.426818946383500e-05, -3.111119436994055e-05, -2.958603500697164e-01, -3.643101078221268e+00, -3.592054457125016e-05, -3.488218567538760e-02, -3.370608181575397e-02, -3.856110434702227e-02, -3.445366347408849e-02, -3.428162139603474e-02, -3.428162139603474e-02, -3.434641715356689e-02, -2.427202485862457e-02, -2.696734772594286e-02, -2.985319418420596e-02, -2.835431732866582e-02, -4.424504739304037e-02, -3.132016608718717e-02, -7.839658030988327e-02, -1.253215520195948e-02, -5.371321145920550e-02, -1.533009229234403e-02, -1.533009229234402e-02, -5.382661011462392e-02, -9.049122078861571e-04, -1.334545513497129e-03, -1.933249916722044e-02, -1.931667108419386e-01, -2.591194070013268e-03, -1.317044422651439e-04, -4.252789965285019e-06, -1.680699475061707e-05, -2.417212614885987e-03, -3.360883202562761e-05, -3.360883202563159e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.262402570938046e-02, -5.262429341191449e-02, -5.262537707623269e-02, -5.262141399138762e-02, -5.262350551075683e-02, -5.262350551075683e-02, -3.456843506683923e-02, -3.457433116309825e-02, -3.472936038378326e-02, -3.466696298743693e-02, -3.467348124470646e-02, -8.343615510023686e-02, -1.173668190849384e-02, -5.848228657035657e-02, -5.695713160977756e-02, -5.759940409297189e-02, -5.745681714149883e-02, -5.745681714149883e-02, -3.058781737817573e-02, -3.101137631842255e-02, 1.238182845673831e-02, -2.467105924551834e-02, -2.669559344339412e-02, -2.669559344339412e-02, -1.935198112234738e-02, -1.924569352158584e-02, -2.080042425513978e-02, -1.939008699003806e-02, -1.873103307868547e-02, -1.873103307868547e-02, -7.431185952967022e-02, -7.422700309740493e-02, -7.430697551450711e-02, -5.321294035268886e-02, -7.426938432864702e-02, -7.426938432864702e-02, -2.849896893343757e-02, -2.953744491623792e-02, -2.765355237351939e-02, -2.862097031226661e-02, -2.947880733402481e-02, -7.780603075263820e-02, -5.638902896910022e-02, -5.378142908412419e-02, -5.619004965798993e-02, -5.552099483802813e-02, -5.612630180324929e-02, -3.344886286445508e-02, 6.255423982393984e-02, -2.934414991905386e-02, 6.925349588659947e-02, -7.447504656989663e-02, -2.202474074819450e-02, -2.202474074819451e-02, 2.896152976568226e+00, -1.978233161125483e-02, -1.264719999022781e-02, 1.054289897992936e-01, 1.244717930223053e+00, -1.569494628958947e-02, -4.401846518484009e-02, -4.652688784068763e-02, -3.944041392971916e-02, -4.496477345579697e-02, -4.533445965853698e-02, -4.533445965853698e-02, -4.397984518977364e-02, -5.370045874737685e-02, -5.280078233457305e-02, -5.041622005210022e-02, -5.183708606243485e-02, -3.397992449324059e-02, -5.607148624266723e-02, 9.440618160203531e-04, -3.953080472138871e-02, -2.012518600720961e-02, -4.354086106618461e-02, -4.354086106618461e-02, -2.561715244093439e-02, -2.083115558355394e-02, -2.075200646843475e-02, -4.592974163519585e-02, 6.327473054330783e-02, -1.930308429061280e-02, -2.295862888858659e-02, -1.390224725706280e-02, -1.406330564511380e-02, -1.890020516190032e-02, -1.447593078453828e-02, -1.447593078453827e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.948202034825982e-10, 1.948165780259546e-10, 1.947999966867373e-10, 1.948538874257579e-10, 1.948257145179094e-10, 1.948257145179094e-10, 1.997356662508195e-06, 1.997153207988073e-06, 1.991634412753256e-06, 1.992978363074562e-06, 1.993846483422877e-06, 5.272392373761086e-07, 7.208541937987004e-03, 8.117182327891321e-04, 8.120846704538083e-04, 8.282234646265849e-04, 8.240101246906006e-04, 8.240101246906006e-04, 2.695124701903919e-01, 2.634428091160087e-01, 4.915458305193004e-03, 4.353470558587844e-01, 3.568762506320945e-01, 3.568762506320943e-01, 7.500417357552059e+03, 6.525819613193572e+03, 2.738797784645472e+01, 3.356030736304575e+04, 1.924646538493484e+04, 1.924646538493484e+04, 1.378666404008910e-07, 1.380141314492656e-07, 1.378761037701745e-07, 2.018925826655795e-07, 1.379400797533181e-07, 1.379400797533181e-07, 3.521952619820741e-05, 3.346203107004289e-05, 3.661134894398346e-05, 3.496435786700378e-05, 3.360263229573455e-05, 7.464710827125428e-06, 3.465460847447921e-03, 3.024469388414767e-03, 4.108896123298888e-03, 4.176448764724020e-03, 3.377835298780791e-03, 7.464555509243696e-03, 2.729939326031366e+02, 1.795678769364651e-01, 4.317391591445221e+02, 1.372604985881922e-05, 8.833170263476853e-01, 8.833170263476852e-01, 4.987957771023920e+11, 3.446469462041993e+04, 1.399754353673998e+05, 4.345106301700944e+03, 9.882440874748965e+10, 6.156644605264385e+04, 5.623203232365722e-03, 5.401456783458922e-03, 6.479418333944653e-03, 5.541921718944801e-03, 5.509325028137447e-03, 5.509325028137447e-03, 6.321000796882891e-03, 6.973413440173137e-03, 6.787790163142959e-03, 6.633280639731811e-03, 6.709971739010803e-03, 1.237917680415303e-02, 2.280044534052685e-03, 1.528032091606983e+00, 5.359225334277665e-02, 1.126749639673670e-01, 3.833802093737924e-02, 3.833802093737927e-02, 3.062485888000596e-02, 3.164558861301229e+01, 1.129070331425782e+01, 3.581301099845284e-02, 8.615232631684421e+02, 2.995183206273245e+00, 2.184122317010818e+03, 1.406634077823238e+06, 2.601206672242467e+05, 3.739500186316639e+00, 8.556215857600626e+04, 8.556215857600654e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.267341392135307e-05, -1.267334379192705e-05, -1.267301037695308e-05, -1.267405423061544e-05, -1.267351033369823e-05, -1.267351033369823e-05, -4.424572581217867e-04, -4.424554324557052e-04, -4.423925154680165e-04, -4.423413124751284e-04, -4.424346801544203e-04, -2.083198661208559e-04, -8.762927236370550e-03, -2.688375208274111e-03, -2.541337869742041e-03, -2.627814044767550e-03, -2.607261641172546e-03, -2.607261641172546e-03, -1.729866731065721e-02, -1.754961697688314e-02, -6.751064878579850e-03, -1.380125704357026e-02, -1.527499651867592e-02, -1.527499651867591e-02, -2.605378119852974e-02, -2.642940251595814e-02, -1.840868064451066e-02, -2.247340714356772e-02, -2.556419245742338e-02, -2.556419245742338e-02, -1.623858379355634e-04, -1.625971206584585e-04, -1.623984520892345e-04, -2.032971335226320e-04, -1.624914780459561e-04, -1.624914780459561e-04, -1.307968582758999e-03, -1.290543829958447e-03, -1.320913854389459e-03, -1.305267685200477e-03, -1.292171289546254e-03, -5.559115062451760e-04, -6.709304303678403e-03, -7.189612082083555e-03, -6.526877920394351e-03, -7.202655069759743e-03, -6.802263064950887e-03, -1.066997741374003e-02, -1.655378474273153e-01, -1.236112867713013e-02, -1.827568775695844e-01, -8.697300675807074e-04, -1.556668148521993e-02, -1.556668148521993e-02, -8.224815876730357e+00, -2.156267690255292e-02, -3.914497854120721e-02, -2.983535998256236e-01, -7.020670929676483e+00, -3.010329390578946e-02, -1.023340488770584e-02, -9.756093304811950e-03, -1.093630847348193e-02, -1.005835901014716e-02, -9.988351985952056e-03, -9.988351985952056e-03, -1.062466867414170e-02, -8.198499676758168e-03, -8.873488075469184e-03, -9.596134586351125e-03, -9.221512078262110e-03, -1.307729520679657e-02, -6.289371288767354e-03, -5.042952523273030e-02, -1.138544724101817e-02, -2.531782257849537e-02, -1.166690645437659e-02, -1.166690645437660e-02, -1.667838515733279e-02, -1.866522818150702e-02, -1.675853484996508e-02, -1.380903385234582e-02, -2.219446446965788e-01, -1.707611306334105e-02, -2.131951390458918e-02, -1.681620496436291e-02, -2.875192087994930e-02, -1.772208074660558e-02, -3.314467921295808e-02, -3.314467921295809e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
