
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.139285311205896e-02, -5.139307073516416e-02, -5.139333685850426e-02, -5.139009365135906e-02, -5.139189309176986e-02, -5.139189309176986e-02, -5.698711880717072e-02, -5.698570927801790e-02, -5.693329251195918e-02, -5.680655423252570e-02, -5.688186634310229e-02, -5.688186634310229e-02, -4.762721974112621e-02, -4.747451252447302e-02, -4.315695480054391e-02, -4.161093851263929e-02, -4.228366152535651e-02, -4.228366152535651e-02, -9.858700949894222e-03, -1.033923950952743e-02, -7.800906125663938e-02, -8.971373175014801e-03, -9.346408599368724e-03, -9.346408599368722e-03, -2.485226186561538e-04, -3.884131356382470e-04, -3.120668787822748e-03, -2.286604695365604e-03, -1.355388674846008e-03, -1.355388674846029e-03, -5.010875961550069e-02, -5.015764570751499e-02, -5.010989673759782e-02, -5.015309521474640e-02, -5.013411543058444e-02, -5.013411543058444e-02, -3.434932078364461e-02, -3.427805855382726e-02, -3.344654124128280e-02, -3.336754830680706e-02, -3.474645335594558e-02, -3.474645335594558e-02, -3.412903647864642e-02, -4.025051535996938e-02, -3.580550486094201e-02, -4.285374511063681e-02, -3.460542761921627e-02, -3.460542761921627e-02, -6.074229617806149e-03, -8.635419659719952e-03, -5.936060336639471e-03, -6.024235303988273e-02, -6.128722058591936e-03, -6.128722058591933e-03, -9.238039018493514e-03, -5.287797217808165e-03, -1.712741309604665e-03, -4.725043535874004e-03, -3.692588329726302e-03, -3.692588329726285e-03, -3.604881347754498e-02, -3.477315657737491e-02, -3.521269110636534e-02, -3.558394951272270e-02, -3.539780052703497e-02, -3.539780052703497e-02, -3.666812786982855e-02, -2.510589037650104e-02, -2.818592672546598e-02, -3.151089183673256e-02, -2.986569513112547e-02, -2.986569513112548e-02, -4.212100127681442e-02, -1.077502758858480e-02, -1.464984431447718e-02, -2.476631877140356e-02, -1.883124610519445e-02, -1.883124610519444e-02, -2.639212950646591e-02, -1.974885645422499e-03, -3.900733641238631e-03, -2.559080074746884e-02, -4.761242212439899e-03, -4.761242212439903e-03, -6.408926733443513e-03, -1.607141217839003e-02, -9.010000987883550e-04, -3.742831222683711e-03, -2.495729050140252e-03, -2.495729050140256e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.176206445924099e-02, -8.176170629161106e-02, -8.176067752908511e-02, -8.176599325435432e-02, -8.176312796586870e-02, -8.176312796586870e-02, -8.208121836577317e-02, -8.207668795074495e-02, -8.196713674937550e-02, -8.210256809387093e-02, -8.204939315683492e-02, -8.204939315683492e-02, -7.264391040882959e-02, -7.280407816749655e-02, -7.550335580892935e-02, -7.406086196487088e-02, -7.444539821106003e-02, -7.444539821106003e-02, -3.180413637616800e-02, -3.248132554797367e-02, -8.883657088779898e-02, -2.876034539671357e-02, -3.000402987305658e-02, -3.000402987305658e-02, -1.947292125630184e-02, -1.946209972511466e-02, -2.181960160549690e-02, -2.140088772963350e-02, -1.980371854611747e-02, -1.980371854611745e-02, -7.423878583147844e-02, -7.415428195347039e-02, -7.423539941559604e-02, -7.416079716973736e-02, -7.419572524698612e-02, -7.419572524698612e-02, -7.991887619256419e-02, -7.967690785066736e-02, -7.958476161623990e-02, -7.936878749582031e-02, -7.991453942893599e-02, -7.991453942893599e-02, -5.426851500102323e-02, -4.543788444454679e-02, -5.488131815450140e-02, -4.433289740293760e-02, -5.350285500941413e-02, -5.350285500941413e-02, -2.382196194062031e-02, -3.085332590049994e-02, -2.337477344800371e-02, -5.567244694289195e-02, -2.384101588610020e-02, -2.384101588610020e-02, -2.882111183580164e-02, -2.455284927187769e-02, -1.406893699884001e-02, -2.134786525736514e-02, -1.884441955585904e-02, -1.884441955585903e-02, -4.241418296967183e-02, -4.527463082182993e-02, -4.432536893496608e-02, -4.349367455757837e-02, -4.391464039974536e-02, -4.391464039974536e-02, -4.072153888661631e-02, -5.382073457397535e-02, -5.249017905570166e-02, -4.925380042612343e-02, -5.112446676007191e-02, -5.112446676007192e-02, -4.628445100803549e-02, -3.571741455880518e-02, -4.187387722998854e-02, -4.980015816696488e-02, -4.637790380759819e-02, -4.637790380759817e-02, -5.362110823720134e-02, -2.133079384563330e-02, -2.199791231657041e-02, -4.656776871693233e-02, -2.081831700427150e-02, -2.081831700427150e-02, -2.749682796356804e-02, -3.255132148950857e-02, -1.490713467041666e-02, -1.976721385925233e-02, -1.658557896166515e-02, -1.658557896166513e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.165538898954569e-10, 1.165533310696622e-10, 1.165480015289121e-10, 1.165563382741711e-10, 1.165523751513535e-10, 1.165523751513535e-10, 1.006859714761254e-06, 1.006881858932732e-06, 1.006986051400699e-06, 1.002735302342963e-06, 1.005281049358152e-06, 1.005281049358152e-06, 2.551629807742636e-03, 2.546823163131001e-03, 2.371528281436581e-03, 2.228772837822228e-03, 2.284360241134373e-03, 2.284360241134373e-03, 2.951903244550114e-01, 2.942389697033493e-01, 1.884783151223768e-03, 5.929827897546440e-01, 4.555313884243783e-01, 4.555313884243782e-01, 7.573338127114376e+03, 6.641945424517090e+03, 3.075449557473611e+01, 3.868007747968702e+04, 2.091215416720006e+04, 2.091215416720006e+04, 1.381812726162440e-07, 1.383254971997012e-07, 1.381842055427371e-07, 1.383116357830736e-07, 1.382563334948194e-07, 1.382563334948194e-07, 8.648472277819783e-06, 8.423335569774430e-06, 8.502301443128962e-06, 8.303862481021228e-06, 8.592868221082422e-06, 8.592868221082422e-06, 4.633004893861109e-03, 4.180706391620139e-03, 6.817445587870582e-03, 7.800759348238964e-03, 4.433855790652284e-03, 4.433855790652284e-03, 1.491098829426985e+00, 1.992665088327463e-01, 1.936072473117575e+00, 2.515318101499332e-05, 1.035960221626927e+00, 1.035960221626927e+00, 1.097108071858721e+05, 4.760530503566504e+04, 1.641106859164083e+05, 7.151924314044277e+00, 8.138973442684476e+04, 8.138973442684462e+04, 5.881001141789874e-03, 5.634088216577377e-03, 5.718419541657739e-03, 5.790474969351334e-03, 5.754287708917240e-03, 5.754287708917240e-03, 6.911552466342792e-03, 7.273033845734209e-03, 7.185831316357045e-03, 7.125866821952279e-03, 7.181781742038307e-03, 7.181781742038307e-03, 3.414539823443566e-03, 9.612785463776294e-02, 6.261781579382110e-02, 3.692024401669469e-02, 4.831333869668333e-02, 4.831333869668333e-02, 1.116011514957677e-02, 3.349191918557020e+01, 1.303880480765820e+01, 5.098242623386194e-02, 3.533375489758621e+00, 3.533375489758620e+00, 2.989472585552345e+03, 5.402037598767159e+06, 2.814563170388915e+05, 4.132235810156172e+00, 1.049361326629126e+05, 1.049361326629129e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b88_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-9.380424142330576e-06, -9.380446637808106e-06, -9.380411221417341e-06, -9.380079316575724e-06, -9.380272491865391e-06, -9.380272491865391e-06, -2.985155218791651e-04, -2.985347597758376e-04, -2.989657848905044e-04, -2.981082595186819e-04, -2.985247863152370e-04, -2.985247863152370e-04, -4.931957912507003e-03, -4.913927286681667e-03, -4.439060725060674e-03, -4.408658916079005e-03, -4.440793090057749e-03, -4.440793090057749e-03, -1.810971151038000e-02, -1.855660373974250e-02, -3.981470439991755e-03, -1.601937960727308e-02, -1.721489806531911e-02, -1.721489806531911e-02, -2.618001783293885e-02, -2.666316483005614e-02, -1.948946066637739e-02, -2.411050878190271e-02, -2.664078669886702e-02, -2.664078669886700e-02, -1.626016161398676e-04, -1.628107448698479e-04, -1.626097574780089e-04, -1.627943955988511e-04, -1.627084116534338e-04, -1.627084116534338e-04, -5.946522421859331e-04, -5.943411226572421e-04, -5.828826021285744e-04, -5.826810973197954e-04, -6.002494451504139e-04, -6.002494451504139e-04, -7.892974694468112e-03, -8.654178565600482e-03, -8.631312615445702e-03, -1.024031181328064e-02, -7.925626896687193e-03, -7.925626896687193e-03, -1.519489555134910e-02, -1.301275036781763e-02, -1.568552080207567e-02, -1.231263276449098e-03, -1.681724851239007e-02, -1.681724851239007e-02, -2.519853599036112e-02, -2.525712354780284e-02, -4.234747750204982e-02, -1.833607013900763e-02, -3.451982564508191e-02, -3.451982564508186e-02, -1.050369008315642e-02, -9.996912104118894e-03, -1.017018764640956e-02, -1.031776702805547e-02, -1.024354146402446e-02, -1.024354146402446e-02, -1.119094310773236e-02, -8.390732541240368e-03, -9.161257916607183e-03, -9.995371675779043e-03, -9.582126277469800e-03, -9.582126277469800e-03, -7.919999491023738e-03, -1.208421640264893e-02, -1.233232677900672e-02, -1.368051369224567e-02, -1.317494812907529e-02, -1.317494812907528e-02, -9.492764094811394e-03, -1.919713949716196e-02, -1.798168296520827e-02, -1.674045136306906e-02, -1.849915483209921e-02, -1.849915483209922e-02, -2.484711066735730e-02, -3.167028991701253e-02, -2.990188373455817e-02, -1.860742514372265e-02, -3.665266869575841e-02, -3.665266869575839e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
