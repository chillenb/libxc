
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.690669121503239e-01, -3.690759513799916e-01, -3.691143868244026e-01, -3.689805865209914e-01, -3.690509530569350e-01, -3.690509530569350e-01, 9.628655354316246e-03, 9.595167234641098e-03, 8.743478961409319e-03, 9.445350447497954e-03, 9.219136491264624e-03, 9.219136491264624e-03, -1.682412857586812e-02, -1.609931582634602e-02, 4.019806955740097e-03, 7.223298572969646e-03, 5.349599383084511e-03, 5.349599383084511e-03, 3.507999587148976e-02, 3.286407470424533e-02, -9.227481433610428e-02, 2.108475257514366e-02, 3.217608842461771e-02, 3.217608842461771e-02, -9.949162365651817e-03, -1.037740351605866e-02, -3.198869475099031e-02, -6.233090975104036e-03, -7.591166095884496e-03, -7.591166095884496e-03, -2.648711262586650e-01, -2.637765468636748e-01, -2.648171560133311e-01, -2.638513430844244e-01, -2.643262600417302e-01, -2.643262600417302e-01, 6.141973415055921e-02, 5.725934413165069e-02, 6.659707316643135e-02, 6.302827603246210e-02, 5.652366991323891e-02, 5.652366991323891e-02, -5.005786718315284e-02, -8.917792617374695e-02, -2.548092525422400e-02, -5.468094989356830e-02, -6.082085497476961e-02, -6.082085497476961e-02, -1.151856536494886e-02, 4.299337343149395e-02, -1.621194194996506e-02, -9.546956909981008e-02, 1.249519315866741e-02, 1.249519315866741e-02, -4.960863288499030e-03, -6.111612849730478e-03, -4.811487054471956e-03, -2.935726186031134e-02, -5.678995177886612e-03, -5.678995177886620e-03, -4.136937724504053e-02, -3.727155994749005e-02, -2.494697695989796e-02, -2.275649776743171e-02, -2.253666782542663e-02, -2.253666782542663e-02, -4.406887437833982e-02, -2.112945345571832e-02, -6.531487758812378e-02, -1.014446660345774e-01, -8.763132152461002e-02, -8.763132152461002e-02, -8.360936363684107e-02, 4.722816181902093e-02, 3.450918053202956e-02, -2.903773461861597e-03, 1.641514206840258e-02, 1.641514206840250e-02, -7.029207823782685e-03, -3.152623160552734e-02, -3.353001366062171e-02, -1.698618118440406e-02, -1.605322405361364e-02, -1.605322405361375e-02, -1.321888478350854e-02, -1.845813194288557e-03, -3.649826900037823e-03, -1.775114629783073e-02, -5.301356871193927e-03, -5.301356871193982e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.186209134120253e-01, -8.185782373948408e-01, -8.184126779132095e-01, -8.190443962052739e-01, -8.187101117989751e-01, -8.187101117989751e-01, -2.730564270495537e-01, -2.731579030282781e-01, -2.759125694689907e-01, -2.753739068719677e-01, -2.751832127061912e-01, -2.751832127061912e-01, -1.471066089817906e-01, -1.480502948537237e-01, -1.620060720166807e-01, -1.561134533433982e-01, -1.577314761077599e-01, -1.577314761077599e-01, -6.775575489903561e-02, -7.552426257762934e-02, -2.215042159779858e-01, 2.885344788829591e-02, -1.055616002556413e-02, -1.055616002556396e-02, -1.261838103757811e-02, -1.313136638314735e-02, -2.854224931421870e-02, -8.033457468438704e-03, -9.726163630364080e-03, -9.726163630364057e-03, -1.224439489355457e-02, -2.384967953854747e-04, -1.155949324885418e-02, -9.677262999675645e-04, -6.232092378924841e-03, -6.232092378924841e-03, -2.015679892637721e-01, -2.142247818108686e-01, -1.921311139628349e-01, -2.027741780270338e-01, -2.133931116442606e-01, -2.133931116442606e-01, -2.247716155181097e-01, -1.085047265043747e-01, -1.450323491395727e-01, -1.394595516730472e-01, -2.325112829117846e-01, -2.325112829117846e-01, 3.748318212361804e-02, 9.886836194543214e-03, 2.939431050088950e-02, -2.732877901905161e-01, 5.036567254938605e-02, 5.036567254938685e-02, -6.425270718958226e-03, -7.881758907315994e-03, -6.215673732117964e-03, -4.929684395330299e-03, -7.322209011577323e-03, -7.322209011577521e-03, -2.059732925020916e-01, 9.977111217562282e-02, 3.509397686280998e-02, -5.435022476965032e-02, -5.397508762351835e-03, -5.397508762351835e-03, -1.729136596946624e-01, -2.165530214518985e-01, -2.523341604570506e-01, -1.162568970375436e-01, -2.182335716961031e-01, -2.182335716961032e-01, -1.601390996440343e-01, -5.150147304403289e-02, -9.923408998762781e-02, -1.073330886207201e-01, -1.086076614209362e-01, -1.086076614209360e-01, -1.542819926193873e-01, -2.896473229850580e-02, -2.202482387608120e-02, -1.195420293362041e-01, 2.524949229043800e-02, 2.524949229043791e-02, -1.659248026121989e-02, -2.419753256857934e-03, -4.745497504759716e-03, 2.250649112209778e-02, -6.841625456508463e-03, -6.841625456508325e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.270419212961832e-10, -3.270636626978322e-10, -3.271357504741485e-10, -3.268138676698188e-10, -3.269859993573262e-10, -3.269859993573262e-10, 2.415900073947392e-06, 2.415339729437355e-06, 2.398548792154956e-06, 2.388299347413780e-06, 2.397325160781518e-06, 2.397325160781518e-06, 9.517628671270935e-03, 9.498745992045608e-03, 8.724800436778606e-03, 8.045287402408627e-03, 8.305687894823277e-03, 8.305687894823277e-03, 1.188431455845130e+00, 1.205594338580023e+00, 7.958912710384271e-03, 1.473133114105814e+00, 1.554880287071480e+00, 1.554880287071475e+00, 8.931678151909590e-02, 1.052126482213693e-01, 5.221777265275838e-01, 3.158849365708800e-02, 6.600384568028289e-02, 6.600384570245277e-02, -6.257046242162895e-07, -6.292065092387018e-07, -6.258384618249660e-07, -6.289302900000796e-07, -6.275150009544449e-07, -6.275150009544449e-07, 1.847991877733394e-05, 1.747139783949396e-05, 1.830144499876818e-05, 1.743349405316582e-05, 1.797751272875312e-05, 1.797751272875312e-05, 2.132715790515138e-03, -1.378386770181435e-02, 1.322609426527835e-02, 3.460675206294470e-03, -2.756412180414503e-04, -2.756412180414503e-04, 1.066079604282992e+00, 5.981161101364489e-01, 1.115772461132982e+00, -1.789792174001881e-05, 1.748912169059436e+00, 1.748912169059435e+00, 3.085951705351034e-02, 3.883612424718425e-02, 3.884977680657472e-01, 1.189676873871649e+00, 1.690847198162026e-01, 1.690847198957446e-01, 8.690466273682837e-02, 1.398526241598922e-03, 1.944735751067759e-02, 4.271140073279561e-02, 2.991749132734238e-02, 2.991749132734238e-02, 8.154001957463196e-02, 9.442396240837233e-03, -2.791726162934354e-03, -2.084313367518478e-02, -1.126300429362024e-02, -1.126300429362023e-02, -7.660135394717766e-03, 3.399498532013002e-01, 2.336532428220059e-01, 1.080865260673322e-01, 1.660667033969808e-01, 1.660667033969810e-01, 2.361114184775007e-02, 4.279808474706867e-01, 6.413670185179987e-01, 1.078407138328970e-01, 1.917725142571808e+00, 1.917725142571817e+00, 1.108957013626185e-01, 4.211696422285345e-02, 5.298546932040074e-02, 1.777067035586779e+00, 2.105473049229814e-01, 2.105473047087822e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.229268174434117e-04, 3.229080338914937e-04, 3.228335697130026e-04, 3.231117001102059e-04, 3.229647824519413e-04, 3.229647824519413e-04, 1.051291987764336e-03, 1.052515944152436e-03, 1.085854363452254e-03, 1.079676429406225e-03, 1.077337872674264e-03, 1.077337872674264e-03, -1.193130815208802e-02, -1.183573053784843e-02, -9.562885542434800e-03, -8.967836975375676e-03, -9.255043360851060e-03, -9.255043360851060e-03, -4.144944604184499e-02, -4.053759532728199e-02, -1.168498035071810e-02, -6.768990939437068e-02, -6.659939041937023e-02, -6.659939041937017e-02, -1.103532245262382e-04, -1.329728354155907e-04, -6.789564729647212e-03, -1.685235503313927e-05, -4.517531124588561e-05, -4.517531124588561e-05, -1.839587798628934e-03, -2.014511620024617e-03, -1.849600370189127e-03, -2.003913251678054e-03, -1.926835647756102e-03, -1.926835647756102e-03, 2.228535510800934e-03, 2.578749854024556e-03, 2.059709689628654e-03, 2.350405210883663e-03, 2.516349167720382e-03, 2.516349167720382e-03, 6.657174210631717e-02, 3.282803755427053e-02, 1.609801620121594e-02, 3.359953917648061e-02, 7.736037955007700e-02, 7.736037955007700e-02, -4.465400127625063e-02, -4.833928016485111e-02, -4.077618577631926e-02, 8.644044418326771e-03, -7.197980448932180e-02, -7.197980448932155e-02, -5.522168103979831e-06, -1.395729538155100e-05, -5.199738252082125e-05, -2.354952016711792e-02, -3.417307966711409e-05, -3.417307966700445e-05, 4.383226394672700e-01, -3.078223421450277e-01, -2.314522539549149e-01, -4.864470101695472e-02, -1.578908525802201e-01, -1.578908525802201e-01, 3.995689837964133e-01, 6.984489163221741e-02, 1.273874374637020e-01, 6.676134381760042e-02, 1.300124729590389e-01, 1.300124729590390e-01, 5.027827158242097e-02, -2.610684943509641e-02, -1.674616447156090e-02, -1.087325455506549e-02, -1.514382885037877e-02, -1.514382885037887e-02, 2.693246142683434e-02, -6.163402481593913e-03, -1.176231550898017e-02, 2.457889437147907e-02, -4.778713455524490e-02, -4.778713455524432e-02, -1.398341921107447e-04, -3.683182331181194e-07, -9.206938586755286e-06, -4.568854424316815e-02, -3.892938511405489e-05, -3.892938511419393e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
