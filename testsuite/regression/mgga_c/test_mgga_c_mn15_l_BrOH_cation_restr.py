
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.762850851950767e-01, -1.762861026028791e-01, -1.762902787635014e-01, -1.762752018410963e-01, -1.762831556292524e-01, -1.762831556292524e-01, -1.457105167534003e-01, -1.456645944046921e-01, -1.444628344243444e-01, -1.449499960693265e-01, -1.448937582980587e-01, 5.211695337301458e-02, -2.271801305575564e-01, 7.550368228210456e-02, 8.454399791084791e-02, 8.028721643992109e-02, 8.128753760652345e-02, 8.128753760652345e-02, 3.903644197372744e-02, 3.778044217330226e-02, -4.269107859503660e-01, 2.905777571419989e-02, 4.076272249771444e-02, 4.076272249771444e-02, -9.949160484978077e-03, -1.037739893982863e-02, -3.195567114701337e-02, -6.233089310526185e-03, -7.591162234490734e-03, -7.591162234490734e-03, -2.652460981096504e-01, -2.641492198005279e-01, -2.651844253897743e-01, -1.235440981649837e-01, -2.647039940059213e-01, -2.647039940059213e-01, -1.626621163077048e-01, -1.543526690990240e-01, -1.695610709615058e-01, -1.616954820116162e-01, -1.548006392455023e-01, 6.408605072208974e-02, -4.707228683417307e-02, -1.147721750718706e-01, -4.434841391775714e-03, -4.840889101897282e-02, -6.120440335624841e-02, -5.972562873958782e-02, -4.612358482547340e-01, 4.656841420745654e-02, -4.591787840211251e-01, -1.058082552481107e-01, 1.536223239874690e-02, 1.536223239874697e-02, -4.428811866744185e-02, -6.111609389044721e-03, -4.811483506025263e-03, -4.142418828944522e-01, -5.077154558582151e-02, -5.678988917527319e-03, -2.443885407534081e-02, -3.701020721547767e-02, -3.692273536798808e-02, -1.455320274169692e-02, -1.682269779305560e-02, -1.682269779305560e-02, -1.762886214087800e-02, -2.005142929727435e-02, -6.578513176923677e-02, -1.062339814992403e-01, -8.997934567767218e-02, -6.239717890771302e-02, -1.052330341904719e-01, -2.473796510674743e-01, 4.222885560619495e-02, -9.163705512353545e-02, 2.819542582369479e-02, 2.819542582369471e-02, -7.202506195124740e-02, -3.151326820079463e-02, -3.341894427518361e-02, -3.929670833626852e-03, -4.235881703308759e-01, -1.500468910970735e-02, -1.321870079577997e-02, -1.845813125961049e-03, -3.649826742277622e-03, -1.722211408777510e-02, -5.301352596125354e-03, -5.301352596125409e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.369672706030896e-01, -2.369561825762409e-01, -2.369114164596116e-01, -2.370754720547752e-01, -2.369889217785331e-01, -2.369889217785331e-01, 1.346159389578544e-01, 1.345046850833322e-01, 1.315581228839727e-01, 1.327555940241160e-01, 1.326236022855500e-01, -3.260078096547370e-01, 1.821994339991186e-01, -9.452640347818665e-02, -7.449574864696228e-02, -8.457768480631229e-02, -8.239827128418400e-02, -8.239827128418400e-02, -5.895550422470649e-02, -6.538155894952574e-02, 2.015631556886253e-01, 6.248926754375338e-02, 1.878962346308695e-02, 1.878962346308678e-02, -1.261836876996967e-02, -1.313133654881921e-02, -2.833549350917406e-02, -8.033446558733923e-03, -9.726138369543638e-03, -9.726138369543638e-03, -1.250079706600408e-02, -4.692731491198673e-04, -1.180928613230233e-02, -2.819392557097653e-02, -6.478208809261558e-03, -6.478208809261558e-03, 1.791721716759643e-01, 1.682295804821952e-01, 1.871853018734416e-01, 1.779750264409664e-01, 1.688626025594898e-01, -2.131223704651488e-01, -2.764547839447169e-01, -1.549311780705555e-01, -2.042723013149460e-01, -2.721444890455600e-01, -2.854302832513333e-01, -8.248239822981114e-02, -3.132918854515301e-01, 2.234098059030215e-02, -3.407185159887688e-01, -5.002685080955191e-01, 6.389292031862957e-02, 6.389292031863038e-02, -5.742296185720524e-02, -7.881736222066506e-03, -6.215650436501664e-03, -4.014763259911314e-01, -6.565293132965476e-02, -7.322167958569799e-03, -1.766974882554566e-01, 1.238285690323826e-01, -5.682272623251885e-02, -2.229373748821105e-02, 2.571102030833940e-02, 2.571102030833940e-02, -1.115915357373425e-01, -2.212351920581061e-01, -2.623915250697211e-01, -1.246765735191113e-01, -2.305121514753684e-01, -1.062848470673736e-01, -2.478092263373759e-01, 1.124619778480546e-01, -8.769028564007905e-02, 9.721958778631334e-02, -1.039861242064511e-01, -1.039861242064510e-01, 5.651262248289389e-02, -2.888333721061160e-02, -2.134224127653647e-02, -1.506398276651823e-01, -3.238473857411027e-01, 3.107761483607498e-02, -1.659128412776146e-02, -2.419752805652066e-03, -4.745496466848506e-03, 2.548974203896225e-02, -6.841597408400089e-03, -6.841597408399993e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.384570319001895e-08, -1.384621784335176e-08, -1.384818847196714e-08, -1.384058095812082e-08, -1.384461262771978e-08, -1.384461262771978e-08, 2.599805358790625e-05, 2.598645030139273e-05, 2.567862810384262e-05, 2.579370960766269e-05, 2.579209333727956e-05, 8.768360194200647e-07, 4.454171406252636e-02, 2.180045940766213e-03, 2.145191807466969e-03, 2.212959410456356e-03, 2.196757394002785e-03, 2.196757394002785e-03, 1.044926289736929e+00, 1.034353945497657e+00, 3.721096202629144e-02, 8.368429776153936e-01, 1.044148596529267e+00, 1.044148596529267e+00, 8.710418839267424e-02, 1.004827227559855e-01, 3.740043999059450e-01, 2.237941870769986e-02, 5.360781125565005e-02, 5.360781125565005e-02, -6.219448374921926e-07, -6.254497597833480e-07, -6.221549384373747e-07, -5.096485146689996e-06, -6.237173005338938e-07, -6.237173005338938e-07, 3.503108249902661e-04, 3.225357382994241e-04, 3.726798135607964e-04, 3.466489578966311e-04, 3.244245096359452e-04, 1.476874060250240e-05, 1.468852047826445e-03, -8.358373940886468e-03, 7.088951891964707e-03, 1.500275901691395e-03, -1.931002822188455e-04, -6.277287188208316e-04, 4.133733993135267e+02, 5.033397978803440e-01, 5.797286610754227e+02, -4.930898133937557e-06, 1.264372685122018e+00, 1.264372685122013e+00, 6.845979564188054e+08, 1.790981432556042e-02, 2.616692727374835e-01, 3.104029383329761e+03, 3.688076018822028e+08, 8.528735029801687e-02, 8.017342963706905e-02, 1.305649227787427e-03, 2.444707640735657e-02, 3.958823687166654e-02, 2.777786809414099e-02, 2.777786809414099e-02, 6.958637271064320e-02, 8.976821486194851e-03, -2.601876962628916e-03, -1.893315708471291e-02, -1.032729607948358e-02, -2.488429201916239e-02, -4.126700831053256e-03, 5.891567906774869e+00, 1.904548053133328e-01, 3.610411836357783e-01, 1.258309006438907e-01, 1.258309006438908e-01, 8.310172656792053e-02, 3.631099808603099e-01, 4.269863857662847e-01, 7.337130118481670e-02, 1.085387760433789e+03, 1.278426780939683e+00, 4.929318309483006e-02, 2.422019028317136e-03, 4.392720239955986e-02, 1.380795938222040e+00, 1.272963432034631e-01, 1.272963432989121e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.921388939244621e-05, 2.920750027550105e-05, 2.918155008360706e-05, 2.927608996151751e-05, 2.922624129206684e-05, 2.922624129206684e-05, -2.201548815436799e-03, -2.200904321407334e-03, -2.183645215151626e-03, -2.190321406602197e-03, -2.190005193752145e-03, 1.986813259175962e-03, -4.168049565746164e-02, 1.030948338109144e-03, 9.371650365895113e-05, 5.328199713642241e-04, 4.351974805354984e-04, 4.351974805354984e-04, -3.702697698150784e-02, -3.477036062781444e-02, -2.751505664250703e-02, -6.424925073459480e-02, -6.074049990103340e-02, -6.074049990103334e-02, -1.103532207006554e-04, -1.329728246685481e-04, -6.788423781679161e-03, -1.685235420488172e-05, -4.517530702194855e-05, -4.517530702194855e-05, -1.840550100782330e-03, -2.015802090242005e-03, -1.850561583378079e-03, -1.525756588608096e-03, -1.927973357106738e-03, -1.927973357106738e-03, -6.888791849116347e-03, -6.679826037898784e-03, -7.032707445116511e-03, -6.862620795862032e-03, -6.695418628549727e-03, 2.845998398684030e-03, 8.965023217417908e-02, 6.992920241836052e-02, 4.319648996042291e-02, 9.691562423211328e-02, 1.019410733022417e-01, 7.169962965494532e-03, -1.285442389785684e-01, -4.646789448294263e-02, -1.148986159606574e-01, 1.927247437371072e-02, -7.082565776954923e-02, -7.082565776954895e-02, -1.358441584525879e-05, -1.395729392685120e-05, -5.199737546828578e-05, -6.203630153767582e-02, -8.408609755019978e-05, -3.417307273740249e-05, 2.433844416477402e-01, -3.595864946749358e-01, 3.961615921666775e-02, -1.712759401947570e-01, -2.592153163402039e-01, -2.592153163402039e-01, 5.090357296572431e-02, 7.270537943557792e-02, 1.339368771490932e-01, 7.558474233300247e-02, 1.394310290811408e-01, 2.879154296118909e-02, 9.735969979375061e-02, -2.129399201233109e-01, -1.090993500322557e-02, -1.206097656662756e-01, -3.524899168291275e-03, -3.524899168291384e-03, -6.392624972993682e-02, -6.162985893149710e-03, -1.175648609577896e-02, 6.076914783986733e-02, -1.339499778893495e-01, -4.756544865339119e-02, -1.398338358284161e-04, -3.683182306056657e-07, -9.206938513467873e-06, -4.558090586483558e-02, -3.892937933958852e-05, -3.892937933972756e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
