
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.646005790284948e-01, -1.646006638472372e-01, -1.646010671028778e-01, -9.892381225282795e-02, -8.053154113370001e-02, -4.841751205933342e-02, -4.973143353296003e-02, -2.885432167125329e-02, -2.893973219499744e-02, -2.890532714292542e-02, -2.890876128706567e-02, -4.986998874054557e-02, -6.701338314955790e-02, -3.927147696589812e-02, -1.708067566162544e-02, -2.975769275332048e-02, -6.623719739663438e-02, -1.729178749250882e-02, -1.726639640843016e-02, -2.269666712127971e-02, -2.615723544310122e-02, -5.988726279831015e-03, -2.319574902991712e-03, -2.602859359056027e-03, -8.492953136346512e-05, -8.220900580736950e-05, -1.630942152092615e-03, -2.494497211024311e-05, -6.181720093752788e-06, -6.181720093752787e-06, -6.115170038698671e-02, -4.767902784055235e-02, -4.760457199766662e-02, -4.767425603778323e-02, -8.537313289092417e-02, -7.493537620623086e-02, -3.812251406030141e-02, -3.863256854760890e-02, -2.519482234119496e-02, -2.559920745335955e-02, -5.612869148614413e-02, -3.860077608579383e-02, -4.000197005743900e-02, -2.930533086224280e-02, -2.337150088887775e-02, -2.561209140900012e-02, -3.886839606347411e-02, -2.632686871241448e-02, -3.358198880759350e-03, -1.474563627616601e-02, -5.279086380645477e-03, -3.427947022226105e-02, -8.133036025033782e-03, -8.133036025033784e-03, -1.127519149645332e-05, -1.022255338963086e-05, -3.647004000851792e-05, -3.484113809953536e-03, -2.564520687173583e-05, -2.564520687173580e-05, -3.193887247343725e-02, -3.091306116868038e-02, -6.383568959259737e-02, -4.683093270639320e-02, -6.385544782141395e-02, -4.665148926567536e-02, -3.410222673756805e-02, -4.252790908521278e-02, -3.972017465438953e-02, -2.794797807065769e-02, -2.680739964407401e-02, -4.104502057109004e-02, -4.916225826267245e-02, -1.703467713465004e-02, -2.283950402684633e-02, -2.980127255644177e-02, -2.314541916948020e-02, -2.680255067104315e-02, -2.185549647561943e-02, -1.432335981602766e-02, -1.200455574310195e-03, -2.624806651907765e-02, -2.947375617025495e-03, -2.947375617025484e-03, -5.037378779620498e-03, -8.132929341160260e-07, -1.375123481831801e-03, -2.267983071859012e-02, -1.124392382465255e-05, -8.305259689670892e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747380229574624e-01, -1.747385518320867e-01, -1.747379267949456e-01, -1.747388186159121e-01, -1.747392712956082e-01, -1.747382853179331e-01, -1.778433580111080e-01, -1.441918064032892e-01, -1.704383904735684e-01, -1.367855632027005e-01, -1.172158851190468e-01, -1.172177010312348e-01, -9.400257024008904e-02, -1.148221500339006e-01, -7.469290159823026e-02, -7.469837637020764e-02, -7.486617096028124e-02, -7.485311685276667e-02, -7.479508757996231e-02, -7.479320617229078e-02, -7.487386821645135e-02, -7.472671750800036e-02, -1.150299523525008e-01, -9.405812391965712e-02, -7.539767300588383e-02, -7.475392600386850e-02, -7.794615886486986e-02, -6.421669672909468e-02, -4.372290087502270e-02, -4.438539111140278e-02, -5.710899721097827e-02, -6.936916725010364e-02, -6.948153132256576e-02, -8.003125490130764e-02, -4.142386818679094e-02, -4.820597035652818e-02, -4.369492511552862e-02, -3.323120158557564e-02, -4.821356139951046e-02, -3.664121020982501e-02, -5.671333248704738e-02, -6.326196868810932e-02, -1.815302658072696e-02, -1.741084876444638e-02, -7.002461645564865e-03, -2.781299486826496e-02, -7.310211918336081e-03, -3.071698525120022e-02, -3.272623886366881e-04, -3.034174342174771e-04, -3.292865550213577e-04, -2.803738847112819e-04, -5.916784753617550e-03, -5.040587881150535e-03, -9.215454400534628e-05, -9.404632909257379e-05, -2.155044759001616e-05, -6.301753683617405e-05, -2.155044759001615e-05, -6.301753683617405e-05, -1.064372570169430e-01, -1.064964437453741e-01, -1.030884567593238e-01, -1.031427936297155e-01, -1.030237110932663e-01, -1.030774606999571e-01, -1.030850623985714e-01, -1.031378248531495e-01, -1.390265913772369e-01, -1.066149136591334e-01, -1.064364947932848e-01, -1.389725423690200e-01, -8.129755262832943e-02, -8.127103680463948e-02, -8.180965387205177e-02, -8.182626912813265e-02, -6.456049616001532e-02, -6.424743368900367e-02, -6.536747007844119e-02, -6.504008300205091e-02, -8.920324838384018e-02, -1.088163759298733e-01, -8.137221983027237e-02, -8.219522595346475e-02, -5.830348379064925e-02, -7.645306855079664e-02, -6.031418220552937e-02, -6.033843663318225e-02, -5.486351823978616e-02, -5.042680408730659e-02, -5.738681532209689e-02, -5.336989854578876e-02, -5.530077452314630e-02, -8.002478660207892e-02, -5.362143473494213e-02, -5.996069576878909e-02, -1.012679925870759e-02, -9.956408911820414e-03, -3.853298661899416e-02, -3.222668716357022e-02, -1.502751222909765e-02, -1.375441148261142e-02, -7.788813743561095e-02, -7.795469539812845e-02, -2.276540811019307e-02, -2.029402591063282e-02, -2.276540811019308e-02, -2.029402591063283e-02, -4.436742697407514e-05, -3.949705320066268e-05, -3.970942208787153e-05, -3.920085846204246e-05, -1.406639814358809e-04, -1.305930574033773e-04, -9.562691962028923e-03, -1.059539827866720e-02, -1.314542429005633e-04, -8.360741941386718e-05, -1.314542429005632e-04, -8.360741941386707e-05, -6.473823198176949e-02, -6.426122498947404e-02, -6.253793051910446e-02, -6.205759256434806e-02, -7.204032729039576e-02, -7.143747091044085e-02, -7.559748030309400e-02, -6.251765920632185e-02, -7.205977711058216e-02, -7.145954059047982e-02, -7.571789094379847e-02, -6.223325211075377e-02, -6.284756064085129e-02, -6.245318840157939e-02, -5.575088301631644e-02, -7.175141263500917e-02, -5.625496592125665e-02, -7.290123896838710e-02, -5.748824658130027e-02, -5.705110348971415e-02, -5.601418315648240e-02, -5.556668518325395e-02, -5.682744694193679e-02, -7.355442894929773e-02, -6.121702435890385e-02, -7.965724539974378e-02, -3.841572025792690e-02, -3.799044121003053e-02, -5.285941103579630e-02, -4.181085356398595e-02, -6.210822142252739e-02, -4.786247332156646e-02, -4.550403365181171e-02, -4.550752386444758e-02, -4.547826937869642e-02, -5.766320064226045e-02, -4.963582530778832e-02, -4.882135045340623e-02, -1.773901260182250e-02, -1.752696290361578e-02, -3.893063984305647e-03, -3.657783900005398e-03, -4.853842162775428e-02, -4.660925816285132e-02, -9.477443601426988e-03, -8.419140065254134e-03, -9.477443601426961e-03, -8.419140065254099e-03, -6.596405392601157e-03, -6.254697210531100e-03, -3.150849319013799e-06, -3.141421481152318e-06, -1.866351724749047e-03, -1.727730053188652e-03, -2.769811217871049e-02, -2.685974619732670e-02, -6.039793226716997e-05, -3.779002334083003e-05, -3.594411233978833e-04, -2.691187693840846e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.015031199646390e-08, 1.825319810437199e-08, 1.015056902506681e-08, 1.015022990564693e-08, 1.825299218097690e-08, 1.015048118192511e-08, 1.014979023827376e-08, 1.825201317285359e-08, 1.015006784386337e-08, 1.630627205863291e-09, 1.214152706489099e-09, 7.451352852683779e-10, 1.385713967597177e-09, 7.239735397978916e-10, 5.000796402708296e-10, 3.228795040281432e-10, 3.696281577631618e-10, 3.229069492534648e-10, 9.816282069624087e-07, 1.616047005052497e-06, 2.842779667431705e-06, 5.522817153411566e-07, 7.571461025073887e-07, 5.521712208889570e-07, 5.573876321946377e-07, 7.632810785428938e-07, 5.577457824802514e-07, 5.551588146218247e-07, 7.604620562703304e-07, 5.551491279361177e-07, 5.540894388141519e-07, 7.611491335213282e-07, 5.573261010504432e-07, 2.849777655270658e-06, 1.628905514699845e-06, 9.912042916397017e-07, 1.377930896081780e-02, 2.326548288357911e-02, 1.380216189350480e-02, 3.703083077719188e-03, 3.118016491794328e-03, 1.722044515310198e-03, 5.202887325452172e-04, 7.738511773248914e-04, 5.182962351028527e-04, 1.009140226828922e-03, 1.728653294207948e-03, 3.045061113711487e-03, 1.480715161304095e-02, 2.534783694716880e-02, 1.484279745921418e-02, 5.614361860747673e-04, 7.946270039869112e-04, 5.202542286105737e-04, 9.436915229200007e-01, 5.356877752098084e-01, 3.224831546226222e-01, 1.126466230609844e+00, 9.173705824366913e-01, 5.158568957347470e-01, 2.612178401648635e-04, 4.849940151278515e-04, 8.683649120178913e-04, 1.680863151551012e-01, 2.865623203877963e-01, 1.743562385414455e-01, 1.028532455896520e-01, 1.295162113851324e-01, 8.426608182744015e-02, 1.066160352679520e-01, 1.370417907417327e-01, 1.675761215276889e+00, 7.046833084053729e+01, 1.408648043640663e+02, 7.046883643377238e+01, 1.603386560443706e+03, 9.672378983792134e+01, 4.840115914627302e+01, 2.578891416433256e+01, 7.450002609065539e+00, 3.744055041899831e+00, 9.365761792976016e+01, 1.872728268388463e+02, 9.365790569693883e+01, 7.886481532927839e+00, 1.570739123573291e+01, 7.922560367259349e+00, 7.886481532927836e+00, 1.570739123573291e+01, 7.922560367259332e+00, 7.027671663483743e-07, 7.406163965005897e-07, 7.032010586039394e-07, 5.703317606259583e-07, 4.667569006548299e-07, 5.706197242124522e-07, 5.650051048644628e-07, 4.644651333927464e-07, 5.653213345102545e-07, 5.699320414516799e-07, 4.666124921572787e-07, 5.703422306931563e-07, 1.844580369227806e-06, 1.109369460429406e-06, 8.897438464631847e-07, 7.055527317259976e-07, 7.417036762561486e-07, 1.662122496497822e-06, 1.206209711224295e-05, 1.982815503278142e-05, 1.208103799442538e-05, 1.221713719361264e-05, 1.993361004977396e-05, 1.223359558023305e-05, 6.692842165950131e-06, 9.276743163272719e-06, 6.737046912689283e-06, 6.846524680861195e-06, 9.407856301063217e-06, 6.893094822779543e-06, 1.983435333305635e-05, 3.510816478410754e-05, 4.269116599095325e-05, 1.225654238825251e-05, 1.995254289449986e-05, 1.220756315713058e-05, 7.571801407675478e-03, 8.210163329218470e-03, 1.824520482554507e-02, 9.611169688730787e-03, 5.576133340335013e-03, 1.005727729972361e-02, 5.200399400279770e-03, 5.454389197825840e-03, 5.706197303539580e-03, 7.302031165984765e-03, 6.199806938241156e-03, 7.721890895928552e-03, 7.771382303950314e-03, 7.627894787121652e-03, 1.884058390050106e-02, 6.537095097147864e-03, 5.159320373516752e-03, 6.512445642796073e-03, 2.491636013545940e-01, 4.473204793290813e-01, 2.490020585144776e-01, 5.821185712195885e-01, 3.367947088993164e-01, 1.859589332735591e-01, 7.496908974386388e-01, 1.447219470372827e+00, 7.515851444977949e-01, 2.549216566174734e-05, 2.559984198517193e-05, 2.553954592468912e-05, 6.969638768352386e-01, 1.321952419830507e+00, 7.147103913005863e-01, 6.969638768352389e-01, 1.321952419830508e+00, 7.147103913005867e-01, 6.994890330300041e+03, 1.304543798536627e+02, 6.523851873028106e+01, 2.143426230479656e+01, 4.282950125950092e+01, 2.143092738902518e+01, 8.652667050260515e+02, 1.729804248087280e+03, 8.653234050160447e+02, 1.744362215828255e+00, 3.420508879608914e+00, 8.960874537275057e+00, 2.121454472050805e+02, 4.242308733134032e+02, 2.122901112756388e+02, 2.121454472050800e+02, 4.242308733134022e+02, 2.122901112756383e+02, 1.069276728128606e-01, 1.870926682004660e-02, 1.085939394029028e-01, 4.867257494242273e-02, 1.380918447773287e-02, 4.909032140035267e-02, 1.024780755097920e-01, 3.987362879293782e-02, 1.030134661698962e-01, 1.105951356148964e-01, 2.213228705645074e-02, 7.972215223276226e-02, 1.100798104319632e-01, 3.973904711945472e-02, 1.106166133628650e-01, 1.008822120997736e-01, 2.134385045507546e-02, 7.127236753993459e-02, 1.080115687085907e-01, 2.638950310111752e-02, 1.100063655466437e-01, 1.773305158900398e-02, 2.403199373134608e-02, 3.715008759103539e-02, 1.725600769340155e-02, 1.648848183352640e-02, 3.823783339858736e-02, 2.287942658718028e-02, 1.208045604086899e-02, 2.282256134486441e-02, 1.749257268767148e-02, 1.114544906669407e-02, 1.751086596985313e-02, 2.043854436225279e-02, 1.703739241585671e-02, 4.251387647343199e-02, 8.173070282078327e-03, 8.636935990687903e-03, 1.661445773938805e-02, 1.051886178515627e-01, 1.824238410543680e-01, 1.051562357080514e-01, 1.940041572690761e-01, 1.097366643483841e-01, 6.762555637446065e-02, 1.022490700890686e-01, 5.282328456537712e-02, 3.843997131551014e-02, 5.414053196942525e-02, 8.116175333270492e-02, 5.435580446586007e-02, 5.398440907985234e-02, 8.084950755355912e-02, 1.474502916579227e-01, 1.119401309417192e-02, 1.150187247377807e-02, 1.147958739985243e-02, 1.885700555027521e+03, 3.724081992666042e+03, 1.885092257692013e+03, 7.646155198250629e-01, 1.494473695590585e+00, 7.663648554264384e-01, 6.151267523201047e-02, 7.777802897390242e-02, 6.845454394236795e-02, 5.716318785301313e-01, 1.045767700390934e+00, 5.866265157415157e-01, 5.716318785301295e-01, 1.045767700390929e+00, 5.866265157415136e-01, 3.344427813964660e+06, 6.687788564792499e+06, 3.344383661284325e+06, 9.912871360909517e+01, 1.982141054762614e+02, 9.912857383051343e+01, 1.244514317388902e+13, 2.489028628770615e+13, 1.244514317097408e+13, 1.211470421335031e+02, 2.312041581182508e+02, 1.212531492955144e+02, 7.653312981255301e+01, 1.528191375542113e+02, 7.659230057436575e+01, 2.441033203336342e+03, 4.881819284601788e+03, 1.311208134555911e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.069529783687291e-16, -4.805366430552800e-54, -4.803146101293755e-54, -4.805506217654424e-54, -4.803603884082357e-54, -4.806207132442172e-54, -4.801452374594524e-54, -2.295332188270571e-05, -4.803085208243515e-54, -2.295934619614465e-05, -2.295601628015576e-05, -2.295934619614465e-05, -1.559156526747869e-04, -2.836587623311544e-47, -1.559952502327473e-04, -1.559063018884913e-04, -1.575528717119648e-04, -1.578301213379949e-04, -1.569579907408665e-04, -1.569556952313687e-04, -1.557885498267274e-04, -1.583625770125719e-04, -3.726075225040724e-22, -1.583625770125719e-04, -8.854079329725909e-16, -5.375523680036081e-41, -5.261295905664271e-41, -1.167527474127017e-03, -9.471278220670789e-04, -9.231738837923462e-04, -1.017418944713016e-03, -5.473156917419993e-41, -5.183139323587893e-41, -5.488790742893821e-41, -1.193725535367221e-03, -8.352031350023560e-04, -9.377417327957383e-36, -7.145578276713630e-03, -9.100079247243409e-36, -7.688739254991686e-03, -2.897574648161322e-04, -4.211321604057267e-42, -1.925662981139237e-03, -2.382583410448024e-03, -5.412229658844547e-03, -8.287818935185304e-04, -5.412229658844538e-03, -7.171926201054293e-35, -1.043056503979772e-05, -1.182242726448205e-05, -4.388182322165068e-28, -1.379795416650055e-05, -2.514366745636689e-32, -2.014844437335085e-04, -2.763138767754816e-06, -2.699234322509894e-06, -7.888016424905938e-06, -4.374767978748070e-06, -7.888016424905938e-06, -4.374767978748070e-06, -6.604719803837309e-04, -6.608288319051637e-04, -6.680536522851759e-04, -6.681588790821602e-04, -6.609988918800051e-04, -6.611575176518292e-04, -6.674992578564652e-04, -6.678114418132086e-04, -1.029773619496987e-47, -6.644826159774883e-04, -6.642578579529161e-04, -2.311667830134825e-38, -3.485282250581532e-04, -3.509998776864311e-04, -3.678972639713692e-04, -3.698773603530081e-04, -3.315698294418700e-04, -3.386560945624691e-04, -3.479510554206319e-04, -3.555158685619897e-04, -3.730164042021194e-04, -5.071266291628245e-45, -3.730164042021194e-04, -3.629465960072686e-04, -1.010264873717440e-02, -2.403380856545230e-39, -2.118704879107022e-02, -2.236439371347948e-02, -6.219019783575900e-03, -7.811628549830799e-03, -1.042251721913005e-02, -1.210507495776646e-02, -1.227759050907518e-02, -2.723667169448629e-39, -1.227759050907518e-02, -1.090622909184789e-02, -9.257278932168971e-04, -9.386430657131405e-04, -3.482029732516204e-36, -2.776569313996747e-03, -7.714337283044217e-04, -9.023015536465543e-04, -1.429434037963278e-03, -1.432363812539409e-03, -1.575201599812185e-03, -2.439933450526341e-03, -1.575201599812186e-03, -2.439933450526343e-03, -1.756250363576447e-26, -1.124795143323562e-06, -2.426721484691785e-06, -2.204493726078112e-06, -9.752875752963861e-06, -1.200278086848348e-05, -4.816880949836174e-04, -1.962608479966587e-33, -1.920859515723306e-06, -1.148105262175384e-05, -1.920859515723306e-06, -1.148105262175382e-05, -1.804657313074715e-01, -1.852329833356905e-01, -8.218757271877022e-02, -8.374667218903348e-02, -8.187991718803521e-38, -8.282360639775504e-38, -1.189755985723141e-37, -1.312486100928881e-01, -9.777078804229212e-38, -9.879306654022036e-38, -9.777078804229212e-38, -1.168950516309969e-01, -1.634043244060736e-01, -1.680434045054984e-01, -1.024873400775429e-02, -8.112588528076939e-39, -1.642409584742781e-02, -1.134686551465465e-38, -3.050342686368510e-02, -3.066622158929482e-02, -2.172698494884416e-02, -2.193847387449646e-02, -2.172698494884415e-02, -1.445699189618053e-38, -1.466009769354882e-02, -1.730002484129838e-39, -3.773553771338285e-03, -3.812699683302319e-03, -3.243070430410952e-37, -5.235103448120750e-03, -8.527133674678088e-38, -8.917222026014525e-03, -7.270132782562210e-03, -7.356404743546528e-03, -7.270132782562207e-03, -1.801085163507898e-37, -8.215575300613684e-03, -8.687591779943387e-03, -2.927242956799652e-32, -2.766238299896994e-32, -2.682017511922875e-04, -2.969298575335550e-04, -1.337730378987964e-02, -1.712491572466429e-02, -8.806261876648019e-04, -1.210744454043662e-03, -8.806261876648001e-04, -1.210744454043665e-03, -4.038511695722021e-29, -3.304934898402316e-29, -2.021803059702752e-07, -2.022125246254020e-07, -4.484147084231394e-25, -3.463979495438036e-25, -1.038892724751392e-33, -1.068824373767812e-33, -4.444059982438934e-06, -1.000133281188395e-05, -4.444059982438930e-06, -3.484435772505778e-26])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
