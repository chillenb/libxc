
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.108334012244305e-02, -5.108383345022707e-02, -5.108440044578513e-02, -5.107704843276609e-02, -5.108113276358339e-02, -5.108113276358339e-02, -4.991591216130824e-02, -4.991884807908830e-02, -4.997944471360982e-02, -4.979409214855364e-02, -4.988093604712879e-02, -4.988093604712879e-02, -3.433863299858294e-02, -3.417590544880539e-02, -3.018862335556652e-02, -3.011741520941736e-02, -3.024388467565580e-02, -3.024388467565580e-02, -1.118322606883918e-02, -1.162712175189496e-02, -3.908393379876816e-02, -7.299405915005754e-03, -4.801306364711547e-03, -4.801306364711552e-03, -3.970668705322936e-05, -4.513616671519149e-05, -9.907426206510501e-04, -1.304998812714845e-05, -1.340635640179830e-05, -1.340635640179832e-05, -4.784015638687353e-02, -4.791838127542896e-02, -4.783980152011719e-02, -4.790898773516142e-02, -4.788184365522796e-02, -4.788184365522796e-02, -2.846656581399886e-02, -2.855765230024055e-02, -2.765006991042184e-02, -2.771709290344629e-02, -2.892368203610033e-02, -2.892368203610033e-02, -3.453137708564483e-02, -4.893341285804498e-02, -3.488717245888336e-02, -4.748632601415227e-02, -3.528745396342797e-02, -3.528745396342794e-02, -3.935270943842407e-03, -9.000178502754298e-03, -3.607257910397929e-03, -7.041257919395449e-02, -5.392578946856026e-03, -5.392578946856026e-03, -9.348005538047149e-06, -1.384928781526958e-05, -1.963464497780554e-05, -2.142199711000431e-03, -1.626577765609079e-05, -1.626577765609076e-05, -4.455272936598621e-02, -3.654392340879738e-02, -3.834505925697107e-02, -4.045233932393687e-02, -3.930889701543328e-02, -3.930889701543328e-02, -5.452518231510526e-02, -2.452049452295838e-02, -2.750035238886118e-02, -3.161062685046226e-02, -2.942838840138735e-02, -2.942838840138736e-02, -4.999068163203197e-02, -1.173897339560045e-02, -1.529367922052798e-02, -2.446134449648880e-02, -1.916628356535251e-02, -1.916628356535250e-02, -2.601000886153598e-02, -8.706307587316813e-04, -1.382809024721712e-03, -2.634206264587466e-02, -3.362427134752951e-03, -3.362427134752937e-03, -7.444514136061937e-05, -2.367366708723678e-06, -6.461225865344894e-06, -3.024489037295035e-03, -1.636043179349423e-05, -1.636043179349422e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.210939499228346e-01, -1.210864017681094e-01, -1.210945221676284e-01, -1.210872860249049e-01, -1.210962785385952e-01, -1.210873619081061e-01, -1.210836610078361e-01, -1.210782733622544e-01, -1.210891929477152e-01, -1.210847780756717e-01, -1.210891929477152e-01, -1.210847780756717e-01, -1.051529850290090e-01, -1.051707917640654e-01, -1.051543002192439e-01, -1.051745810952388e-01, -1.052160148718983e-01, -1.052108574066981e-01, -1.050134291218468e-01, -1.050244533883538e-01, -1.051954260255777e-01, -1.050281666401438e-01, -1.051954260255777e-01, -1.050281666401438e-01, -6.903211647666588e-02, -6.868813870384516e-02, -6.890034703100023e-02, -6.849157372190062e-02, -6.401388694870867e-02, -6.447843024212338e-02, -6.426241643242372e-02, -6.402576263730894e-02, -6.223435641143009e-02, -6.676507886121862e-02, -6.223435641143009e-02, -6.676507886121862e-02, -3.077517499061378e-02, -2.804403312804500e-02, -3.181535968916430e-02, -2.865387055624298e-02, -7.815568033559787e-02, -7.412925232814377e-02, -2.124973275219305e-02, -2.033164093296375e-02, -1.195358193666278e-02, -3.751765164863222e-02, -1.195358193666279e-02, -3.751765164863219e-02, -1.598898166031973e-04, -1.463045507410099e-04, -1.828493034205966e-04, -1.652699786209469e-04, -3.701853218941569e-03, -3.400467458524524e-03, -4.941656167555396e-05, -5.056118957678380e-05, -4.467037158519849e-05, -1.062308899210779e-04, -4.467037158519851e-05, -1.062308899210781e-04, -1.032880500091296e-01, -1.033288086376664e-01, -1.033546996818759e-01, -1.033972767394045e-01, -1.032853192893424e-01, -1.033287209711853e-01, -1.033456689615630e-01, -1.033879782341242e-01, -1.033255065598102e-01, -1.033645141291273e-01, -1.033255065598102e-01, -1.033645141291273e-01, -7.018257928098962e-02, -7.011528939347725e-02, -7.037674251176956e-02, -7.035190178752256e-02, -6.885640811206030e-02, -6.857821822830425e-02, -6.904175528983940e-02, -6.874365905137222e-02, -7.071989857408868e-02, -7.121640247166050e-02, -7.071989857408868e-02, -7.121640247166050e-02, -6.475913417555991e-02, -6.491167780150627e-02, -7.413559021385893e-02, -7.405738917850038e-02, -6.756120569527917e-02, -6.231888038502931e-02, -7.472893096281147e-02, -6.960664806192166e-02, -6.186593648613652e-02, -6.958018071675483e-02, -6.186593648613648e-02, -6.958018071675480e-02, -1.155218990476395e-02, -1.137901989532943e-02, -2.524153572461783e-02, -2.503908257552943e-02, -1.109594425874020e-02, -1.008440997063341e-02, -1.057577827271154e-01, -1.058540586042818e-01, -1.671335700868599e-02, -1.470155058240159e-02, -1.671335700868599e-02, -1.470155058240159e-02, -3.616699507439374e-05, -3.454101896635658e-05, -5.300800218591793e-05, -5.229610137450029e-05, -7.836499200392591e-05, -7.190610443978557e-05, -6.904677180827452e-03, -6.767369506891854e-03, -8.879818059222330e-05, -5.320741953751979e-05, -8.879818059222322e-05, -5.320741953751975e-05, -7.005696080052291e-02, -6.952584140337548e-02, -6.619329046327245e-02, -6.566846714901554e-02, -6.736377423309325e-02, -6.684109944585656e-02, -6.848757602873821e-02, -6.794682649053142e-02, -6.790918800628953e-02, -6.737714352868188e-02, -6.790918800628953e-02, -6.737714352868188e-02, -7.180486283895308e-02, -7.127388745010743e-02, -5.324583572442536e-02, -5.274943241629335e-02, -5.666303326486347e-02, -5.613704218579268e-02, -6.084406130985583e-02, -6.040508334244606e-02, -5.868813455276241e-02, -5.817619150516109e-02, -5.868813455276241e-02, -5.817619150516110e-02, -7.583067629256858e-02, -7.554269915843813e-02, -3.113345932795337e-02, -3.079439127918379e-02, -3.788850042699374e-02, -3.711679205588463e-02, -5.087760046005576e-02, -5.043342278563265e-02, -4.353931059913673e-02, -4.355919983304960e-02, -4.353931059913673e-02, -4.355919983304959e-02, -5.484269910259069e-02, -5.384436648126202e-02, -3.172962263942504e-03, -3.145240829999458e-03, -4.353134494988604e-03, -4.099288747579174e-03, -5.312454095229929e-02, -5.029839820956944e-02, -1.050666352713420e-02, -9.401208401848488e-03, -1.050666352713418e-02, -9.401208401848453e-03, -2.879606882944729e-04, -2.746626318476768e-04, -8.837334347347055e-06, -8.815040859571055e-06, -2.609566314724505e-05, -2.380989718367214e-05, -9.287611914828129e-03, -8.919967994679963e-03, -8.307519630573009e-05, -5.455726773771692e-05, -8.307519630573005e-05, -5.455726773771690e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.436519857371029e-10, 3.972783528724853e-10, 3.436887158455417e-10, 3.436621713990137e-10, 3.972855672000201e-10, 3.436970944166466e-10, 3.436809061504197e-10, 3.972956338705542e-10, 3.437238225466888e-10, 3.435537300356525e-10, 3.971887705403350e-10, 3.435762129661805e-10, 3.436411819588300e-10, 3.972478871599759e-10, 3.436379753774593e-10, 3.436411819588300e-10, 3.972478871599759e-10, 3.436379753774593e-10, 1.273023023521011e-06, 1.822334436197774e-06, 1.273353760584388e-06, 1.273342954866375e-06, 1.822656242812998e-06, 1.273662757228838e-06, 1.280586775846024e-06, 1.829906101491355e-06, 1.281343401240199e-06, 1.269988965684385e-06, 1.815701487388886e-06, 1.270404923031869e-06, 1.273007995499875e-06, 1.822512894576209e-06, 1.277011095792674e-06, 1.273007995499875e-06, 1.822512894576209e-06, 1.277011095792674e-06, 1.632904382058552e-03, 2.387647235934390e-03, 1.657693680079707e-03, 1.619316324121280e-03, 2.374549033828667e-03, 1.648220967555452e-03, 1.371051626424408e-03, 2.046970890108928e-03, 1.350044018010062e-03, 1.342869914226662e-03, 1.996240321002670e-03, 1.355139809050764e-03, 1.497808138193020e-03, 2.020601757546980e-03, 1.249292690420068e-03, 1.497808138193020e-03, 2.020601757546980e-03, 1.249292690420068e-03, 1.998393996088081e-01, 2.963821861632172e-01, 2.050880610937436e-01, 2.038975529273028e-01, 2.991477570461392e-01, 2.098678489496244e-01, 7.701907478226387e-04, 1.301574174583510e-03, 7.991014169862378e-04, 2.331603908622595e-01, 3.966898042501257e-01, 2.362619642040017e-01, 1.826457887221431e-01, 2.784247617127029e-01, 1.751808888370251e-01, 1.826457887221430e-01, 2.784247617127029e-01, 1.751808888370252e-01, 1.868624004113706e+01, 3.729886272720442e+01, 1.868624387411881e+01, 1.869543254830747e+01, 3.731140113325480e+01, 1.869586069117974e+01, 1.741030905685334e+00, 3.437924347696589e+00, 1.742248108515361e+00, 2.982771434881736e+01, 5.960111301255585e+01, 2.982706672178831e+01, 2.070188595038549e+01, 4.133319257031602e+01, 2.077630726182862e+01, 2.070188595038553e+01, 4.133319257031611e+01, 2.077630726182864e+01, 5.674233498351828e-07, 4.665936244808322e-07, 5.677633272782819e-07, 5.731429416153814e-07, 4.690225280808046e-07, 5.733350021664683e-07, 5.677477995484444e-07, 4.666900961074775e-07, 5.679803911885048e-07, 5.726832705321832e-07, 4.688342101117538e-07, 5.730086750287344e-07, 5.703180727673458e-07, 4.678302406456950e-07, 5.705571508648708e-07, 5.703180727673458e-07, 4.678302406456950e-07, 5.705571508648708e-07, 7.968224251826319e-06, 1.101918543980785e-05, 7.979218543115929e-06, 7.993973500442455e-06, 1.093370756655216e-05, 8.003626575941567e-06, 7.616568663478369e-06, 1.063323352259435e-05, 7.672295000878511e-06, 7.637576087536800e-06, 1.055966538118364e-05, 7.693901521644519e-06, 8.205768794306740e-06, 1.116538381880432e-05, 8.106237121494000e-06, 8.205768794306740e-06, 1.116538381880432e-05, 8.106237121494000e-06, 8.513178398114430e-03, 7.243521014930513e-03, 8.685799170749764e-03, 1.659934072266959e-02, 1.051978664794307e-02, 1.715544249177208e-02, 9.177678193510272e-03, 9.384554361541285e-03, 9.548413502956704e-03, 1.771263176891306e-02, 1.532284164088927e-02, 1.749854844675789e-02, 8.913440621218372e-03, 7.240599477451246e-03, 9.320129329252826e-03, 8.913440621218372e-03, 7.240599477451246e-03, 9.320129329252823e-03, 3.237347351128917e-01, 5.826010374287748e-01, 3.242290864993107e-01, 1.000431652428905e-01, 1.613601439882683e-01, 9.987525050515415e-02, 3.825469759162913e-01, 6.948993744104164e-01, 3.832373613418169e-01, 7.549856318319808e-05, 7.910104944682452e-05, 7.562865442844878e-05, 3.440315389602334e-01, 6.024715839063024e-01, 3.626318385443317e-01, 3.440315389602335e-01, 6.024715839063024e-01, 3.626318385443318e-01, 5.091725186656812e+01, 1.017713684837507e+02, 5.091199962128996e+01, 3.588574372542681e+01, 7.170783289874230e+01, 3.588155386384425e+01, 2.903547599196926e+02, 5.797687543375405e+02, 2.904350979707509e+02, 8.507635961488991e-01, 1.604068979576885e+00, 8.526548678069126e-01, 9.901256784711187e+01, 1.978211657015150e+02, 9.909471938589772e+01, 9.901256784711165e+01, 1.978211657015146e+02, 9.909471938589755e+01, 1.200364097326856e-01, 2.355036505556557e-02, 1.216991059630970e-01, 5.285916708064790e-02, 1.558199810046993e-02, 5.324561817967515e-02, 6.666487567428009e-02, 1.744659168895767e-02, 6.734524687711123e-02, 8.411396684196051e-02, 1.958326478509264e-02, 8.480908459648481e-02, 7.448229422434685e-02, 1.842839543354407e-02, 7.517149527417484e-02, 7.448229422434685e-02, 1.842839543354407e-02, 7.517149527417483e-02, 1.347539261773832e-01, 3.301504969059918e-02, 1.365402199089448e-01, 1.098457634715596e-02, 1.003375234291979e-02, 1.100477896710144e-02, 1.523091466522498e-02, 1.121646965192402e-02, 1.532333944980820e-02, 2.528207940498148e-02, 1.345399771534375e-02, 2.521414852054003e-02, 1.906282915668996e-02, 1.216229544500835e-02, 1.904707989193851e-02, 1.906282915668996e-02, 1.216229544500835e-02, 1.904707989193851e-02, 1.120379676911530e-02, 8.148157487541663e-03, 1.172617432496959e-02, 5.982038299022583e-02, 9.004046932476630e-02, 5.981373560531889e-02, 4.611602265284359e-02, 6.387132405231849e-02, 4.643040902981232e-02, 3.898905973282207e-02, 4.299180398810154e-02, 3.873672757593710e-02, 4.311162159513249e-02, 5.319379495126957e-02, 4.339184109000229e-02, 4.311162159513248e-02, 5.319379495126958e-02, 4.339184109000232e-02, 1.398723915575975e-02, 1.429777110348806e-02, 1.421082055722628e-02, 1.692715972723988e+00, 3.344300945733585e+00, 1.692586876184374e+00, 9.631416712644634e-01, 1.880882556782996e+00, 9.651361166897295e-01, 6.688553302239011e-02, 6.552783605750760e-02, 7.208887260942909e-02, 7.094100035082158e-01, 1.298163467852013e+00, 7.268417174438342e-01, 7.094100035082141e-01, 1.298163467852009e+00, 7.268417174438319e-01, 1.063654294192662e+01, 2.123039371297008e+01, 1.063694786849241e+01, 6.623988174926513e+02, 1.324578091104037e+03, 6.624829102219138e+02, 1.514511982773995e+02, 3.026655580868376e+02, 1.514631549453851e+02, 7.827761495340648e-01, 1.423316117185628e+00, 7.857193197276425e-01, 1.386576576066554e+02, 2.766448223722097e+02, 1.385153021864514e+02, 1.386576576066560e+02, 2.766448223722106e+02, 1.385153021864518e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225191805500715e-05, -2.226284533654193e-05, -2.225301390296579e-05, -2.226363998118133e-05, -2.225637495081317e-05, -2.226849887422286e-05, -2.224411047238976e-05, -2.225282620895293e-05, -2.225262028252174e-05, -2.225897405666001e-05, -2.225262028252174e-05, -2.225897405666001e-05, -1.101021264408664e-04, -1.099790424550345e-04, -1.101626810741548e-04, -1.100111661560528e-04, -1.112607778304332e-04, -1.114346860824171e-04, -1.111929768713719e-04, -1.111152204894369e-04, -1.100099284015015e-04, -1.121158189756959e-04, -1.100099284015015e-04, -1.121158189756959e-04, -7.312371202617689e-04, -7.481324292156716e-04, -7.278219101398984e-04, -7.451243561640662e-04, -6.628532669630460e-04, -6.651702924431914e-04, -7.360490602863083e-04, -7.557845552704207e-04, -7.327856584314521e-04, -6.800078393383547e-04, -7.327856584314521e-04, -6.800078393383547e-04, -5.584193042385055e-03, -7.056695139274169e-03, -5.835319910572141e-03, -7.559106468375575e-03, -1.564723436267956e-04, -1.955777558442603e-04, -1.795945478590729e-03, -2.283269154925175e-03, -5.209716428051883e-03, -7.646542115264811e-04, -5.209716428051876e-03, -7.646542115264801e-04, -1.042986973983349e-05, -1.182206727636588e-05, -1.187229197964107e-05, -1.379695156418235e-05, -1.716576143510170e-04, -2.007169885843838e-04, -2.762177037483518e-06, -2.698455878285271e-06, -7.886630510811950e-06, -4.371020603917094e-06, -7.886630510811952e-06, -4.371020603917092e-06, -6.579953384591098e-04, -6.584929439861533e-04, -6.655530664490985e-04, -6.658027128967696e-04, -6.585770849816536e-04, -6.588614336435714e-04, -6.650557396086355e-04, -6.654955581731080e-04, -6.617260767650715e-04, -6.621294055648084e-04, -6.617260767650715e-04, -6.621294055648084e-04, -3.310150999303731e-04, -3.338928073554934e-04, -3.516867961182620e-04, -3.540465472399012e-04, -3.179575966972309e-04, -3.243048974941537e-04, -3.356136471997147e-04, -3.425222921731394e-04, -3.530253477400778e-04, -3.460737448871685e-04, -3.530253477400778e-04, -3.460737448871685e-04, -7.560845619778289e-03, -7.890772153165563e-03, -8.973992535223584e-03, -9.500948499645645e-03, -4.119333127096477e-03, -5.393531028113165e-03, -3.632438012241622e-03, -4.693451241501002e-03, -9.349488060441882e-03, -7.853583156790522e-03, -9.349488060441889e-03, -7.853583156790521e-03, -8.993155335202447e-04, -9.089810420423039e-04, -2.722763150020310e-03, -2.719055256997688e-03, -7.472209404372939e-04, -8.768377278873001e-04, -4.860890485895652e-04, -4.866377162294608e-04, -1.531550109216372e-03, -2.376730238648248e-03, -1.531550109216373e-03, -2.376730238648251e-03, -1.130517325294834e-06, -1.123827207781464e-06, -2.425062792874645e-06, -2.202900134684611e-06, -9.746508567084568e-06, -1.199355566900169e-05, -4.703731668105114e-04, -5.386557570494587e-04, -1.917402292371580e-06, -1.147939568129366e-05, -1.917402292371580e-06, -1.147939568129365e-05, -1.077167535380217e-01, -1.103627773192822e-01, -6.729817655888398e-02, -6.862801565720754e-02, -7.942606172195052e-02, -8.121941643556474e-02, -9.185249366405823e-02, -9.380441289830767e-02, -8.536551226203457e-02, -8.724080816700741e-02, -8.536551226203457e-02, -8.724080816700738e-02, -4.296086198269129e-02, -4.495139254698940e-02, -9.967363333207545e-03, -1.009185477623245e-02, -1.552776661161501e-02, -1.580892829602872e-02, -2.692642567388926e-02, -2.706034464708099e-02, -1.990743361790330e-02, -2.014668689750108e-02, -1.990743361790329e-02, -2.014668689750107e-02, -5.910095875559689e-03, -6.487423099211809e-03, -3.713827022051636e-03, -3.750006866667573e-03, -4.824545855417213e-03, -5.007075629098037e-03, -7.374065592527686e-03, -7.301332244841800e-03, -6.670097334561030e-03, -6.743155616537138e-03, -6.670097334561027e-03, -6.743155616537141e-03, -7.165503911627504e-03, -7.641703477487070e-03, -1.744048403538399e-04, -1.732155144485119e-04, -2.663213488410607e-04, -2.947378740103004e-04, -1.015460625552222e-02, -1.392557852108719e-02, -8.603769288116058e-04, -1.180827824027549e-03, -8.603769288116037e-04, -1.180827824027552e-03, -1.028503146016138e-05, -1.088124244209437e-05, -2.020187433773596e-07, -2.019539938367903e-07, -2.317161104168313e-06, -2.776348196726555e-06, -9.131697564348401e-04, -1.057617504904451e-03, -4.434767772068773e-06, -9.999963935431535e-06, -4.434767772068774e-06, -9.999963935431531e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
