
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_ccalda_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504600728e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429824e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -1.107865950034999e-01, -6.701411225019484e-02, -6.698743865823149e-02, -6.633788542729085e-02, -6.653707962660949e-02, -6.649483594456226e-02, -6.649483594456226e-02, -3.788462491832124e-02, -3.816448150655340e-02, -7.077000961998538e-02, -3.294739425006600e-02, -3.497993480493992e-02, -3.497993480493992e-02, -3.783212638790422e-03, -3.950262148245965e-03, -1.476390352278684e-02, -2.356425943296052e-03, -2.875605164365591e-03, -2.875605164365591e-03, -1.224262515798652e-01, -1.224316013235271e-01, -1.224265180478010e-01, -1.224312405851439e-01, -1.224289526107322e-01, -1.224289526107322e-01, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457944e-02, -9.489275971457946e-02, -6.380984132713652e-02, -6.578530696998787e-02, -6.198096642968796e-02, -6.289103478448343e-02, -6.418936514394001e-02, -6.418936514394002e-02, -2.699430518029856e-02, -3.791282911279730e-02, -2.581454244194446e-02, -9.418619982596557e-02, -2.952055260796775e-02, -2.952055260796775e-02, -1.873262677774475e-03, -2.309956089562038e-03, -1.821073593879012e-03, -2.031142249656109e-02, -2.148658723728447e-03, -2.148658723728447e-03, -6.392468271156901e-02, -6.378829839072296e-02, -6.383636564200691e-02, -6.387589511933792e-02, -6.385611582342507e-02, -6.385611582342506e-02, -6.327427402069155e-02, -5.971249478403084e-02, -6.077845548439292e-02, -6.179674412753491e-02, -6.128134397443009e-02, -6.128134397443009e-02, -6.692294514921258e-02, -4.238697070491521e-02, -4.606336752325607e-02, -5.192846777352228e-02, -4.894364023608572e-02, -4.894364023608572e-02, -5.782021926348150e-02, -1.432389825823212e-02, -1.765669780593141e-02, -5.113742505898904e-02, -2.356177787973960e-02, -2.356177787973960e-02, -5.041936522020963e-03, -6.963085944531267e-04, -1.378316159192511e-03, -2.268491426043807e-02, -2.005917695883235e-03, -2.005917695883237e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_ccalda_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672956857e-01, -1.747372526063872e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -1.202915523735735e-01, -7.507468276142482e-02, -7.504671083132784e-02, -7.436535042375979e-02, -7.457433763706463e-02, -7.453002000496485e-02, -7.453002000496485e-02, -4.407883909019164e-02, -4.438233039468449e-02, -7.900736698061858e-02, -3.869582609029611e-02, -4.091886916655008e-02, -4.091886916665616e-02, -4.849423611272609e-03, -5.059080995114944e-03, -1.814957241692904e-02, -3.046165086168338e-03, -3.705072951189805e-03, -3.705072951189805e-03, -1.321404666299122e-01, -1.321459006030400e-01, -1.321407372934713e-01, -1.321455341852712e-01, -1.321432101885175e-01, -1.321432101885175e-01, -1.038276322678099e-01, -1.040309546218597e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -1.040118482079572e-01, -7.170998474814368e-02, -7.378542427341907e-02, -6.978541633467648e-02, -7.074348540370844e-02, -7.210898567672457e-02, -7.210898567657269e-02, -3.211636191061110e-02, -4.410943247458309e-02, -3.079828628005500e-02, -1.032849703535726e-01, -3.492210023890847e-02, -3.492210023999799e-02, -2.429818831173948e-03, -2.987022933693446e-03, -2.363048067936012e-03, -2.457414087463874e-02, -2.781518125836639e-03, -2.781518140801389e-03, -7.183073346116874e-02, -7.168733233876134e-02, -7.173787450420191e-02, -7.177943773581789e-02, -7.175864098996813e-02, -7.175864098997133e-02, -7.114671086120723e-02, -6.739392548100434e-02, -6.851829936273443e-02, -6.959138420926188e-02, -6.904837093535035e-02, -6.904837093538647e-02, -7.497907555914235e-02, -4.894336676652948e-02, -5.289030830410114e-02, -5.914859868946303e-02, -5.596910016360084e-02, -5.596910016372212e-02, -6.539524416530183e-02, -1.763257882221763e-02, -2.152053011108008e-02, -5.830699949971996e-02, -2.826624935272212e-02, -2.826624935171305e-02, -6.422398815349246e-03, -9.130109647151094e-04, -1.794908201783703e-03, -2.727493372927956e-02, -2.599361130373990e-03, -2.599361117147880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.634603547878835e-25, 8.010316711015864e-26, -3.592539167208230e-27, -3.281454370801451e-25, 8.165635632575884e-26, 8.165635632575884e-26, -2.318329339177225e-22, 2.420185732740032e-22, 3.937884646393540e-22, 1.315374800635250e-22, -2.077629617241247e-22, -8.219807843774186e-18, -1.338829323118267e-19, 7.431110675292072e-15, 1.583115716878949e-16, 1.139711606075883e-14, 9.593121759646497e-15, 9.593121759646497e-15, 3.546060820201114e-12, 9.927891192451984e-13, -7.867047928156346e-20, 4.307528301790755e-11, -6.750261979683822e-12, 2.528138743088157e-13, -7.321143107106621e-07, -1.114774420023382e-05, 5.437357367924950e-09, -6.257581247519598e-05, 4.765069453461039e-05, 4.765069453461039e-05, 2.938211551178674e-19, -5.091132556360335e-20, 9.193560313547094e-19, -8.501160996619968e-23, 8.739740783648808e-19, 8.739740783648808e-19, 3.258311088991406e-21, 3.922653064773372e-21, -1.300473669680874e-22, 2.923091100416209e-21, -3.451142055825194e-21, 8.940265968220754e-18, -8.463613902137286e-15, 2.229544940241975e-15, 5.218319567751803e-14, 1.281203330947095e-14, 2.775707330063240e-14, -1.002102212327021e-18, -6.930836680362268e-17, 1.363826199057819e-12, -3.790230140267741e-16, 7.308429378497624e-17, 1.011103182384259e-11, -5.493108484975865e-12, -1.909454343474336e-14, -1.664686705507527e-04, 4.802444317121865e-04, -1.548261928180032e-15, 4.999989639133940e-13, -4.940750586650776e-05, 4.765556705611939e-14, 2.390938193655733e-14, 3.946420291007151e-18, -1.699803934613510e-15, 1.318204054859548e-14, 1.474271254976782e-15, -5.645267041523467e-15, -1.784459356493528e-15, -4.796725905615523e-14, -6.014389835734820e-15, -2.697079826016081e-14, 7.155965414375432e-18, 6.048224258904454e-15, -1.441517167249117e-17, 2.856145014851229e-13, 8.226985689420869e-18, -3.215985615512396e-13, 3.796830750713185e-13, 1.008223218375595e-18, 6.053902160556617e-09, -7.430227699707339e-10, -3.105937840677765e-13, -3.521375050045945e-16, -1.296163920596430e-11, -8.778955675915625e-07, -1.586650289887047e-02, -1.156577703759580e-03, -3.359430882540575e-10, -4.689416440014643e-05, 6.905829886185394e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.123710563532570e-21, -6.395620068412184e-21, 1.259192081608999e-20, 3.672297666252676e-20, 1.448034813399861e-21, 1.448034813399861e-21, 1.984450546767806e-19, -6.563912112842130e-21, -1.475719825624234e-19, -4.470506702089820e-19, -9.091379141350628e-20, 1.564415470835921e-15, 2.901790039174566e-19, -6.694603631523370e-14, 6.453249191587937e-14, 3.746630024370395e-14, 1.847236135778324e-14, 1.847236135778324e-14, 2.329137483866466e-13, -2.189578640113109e-13, 5.598207559624456e-19, 1.683193998571477e-13, -1.802160059186128e-14, -3.747692955390606e-13, -1.761087789393766e-11, 4.700125403420593e-13, -2.194615989455828e-12, -1.992345570956632e-11, -7.711373360944948e-12, -7.711373360944948e-12, 6.171698308250429e-16, 6.708371665689412e-16, -9.234895502419989e-16, -3.358081381835917e-19, -2.439553895829832e-16, -2.439553895829832e-16, 2.356549314075164e-19, -3.469780837644691e-19, -3.126539007743508e-20, 1.805159175037612e-19, -1.841656273332070e-19, -1.068049541673208e-15, -3.202085081709063e-14, -5.087339357991863e-14, -4.440136461445722e-14, 9.825946463262921e-14, 4.864099478749966e-14, 5.053330490288124e-18, -1.912721516881481e-19, -6.008007981251132e-16, 5.065465406999975e-18, 6.076382096687373e-15, 4.974082958752057e-13, 7.887802231088536e-13, -2.096247298967845e-19, -4.621436466904055e-11, -8.690286991542211e-11, 4.561976985019499e-18, -1.157551043207051e-18, -3.309620619404040e-12, -1.792561139088687e-14, -3.369504136670105e-14, -5.437929577894552e-18, -8.644815245527561e-16, 4.265952385537794e-14, -4.890764981153856e-15, -5.672470873405577e-14, -5.254472148309091e-14, 9.535185783633383e-16, -3.789080779106035e-14, -1.598746303901463e-14, 6.337020942756480e-18, 4.275409365859990e-14, 2.023370208314433e-18, -1.379833813159826e-13, -1.833086242249618e-18, -7.933132198564486e-14, 6.334507944906986e-14, 1.815528629958703e-18, 5.185558666824196e-13, 1.244033333156344e-12, 1.725263305410616e-14, 1.182396004801351e-18, 7.097984210622185e-13, 1.719844029550604e-11, -1.314511262317500e-10, 2.066063730061098e-10, -1.801553560376258e-12, 2.256724761870621e-11, -4.420959517147752e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
