
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_ccalda_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504600728e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -1.107865950035000e-01, -6.701411225019484e-02, -6.698743865823149e-02, -6.633788542729087e-02, -6.653707962660949e-02, -6.649483594456226e-02, -6.649483594456226e-02, -3.788462491832124e-02, -3.816448150655340e-02, -7.077000961998538e-02, -3.294739425006599e-02, -3.497993480493992e-02, -3.497993480493992e-02, -3.783212638790422e-03, -3.950262148245965e-03, -1.476390352278684e-02, -2.356425943296052e-03, -2.875605164365591e-03, -2.875605164365591e-03, -1.224262515798652e-01, -1.224316013235271e-01, -1.224265180478010e-01, -1.224312405851439e-01, -1.224289526107322e-01, -1.224289526107322e-01, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457944e-02, -9.489275971457944e-02, -6.380984132713652e-02, -6.578530696998787e-02, -6.198096642968796e-02, -6.289103478448343e-02, -6.418936514394002e-02, -6.418936514394002e-02, -2.699430518029856e-02, -3.791282911279729e-02, -2.581454244194446e-02, -9.418619982596557e-02, -2.952055260796775e-02, -2.952055260796774e-02, -1.873262677774476e-03, -2.309956089562038e-03, -1.821073593879012e-03, -2.031142249656109e-02, -2.148658723728447e-03, -2.148658723728447e-03, -6.392468271156901e-02, -6.378829839072296e-02, -6.383636564200691e-02, -6.387589511933793e-02, -6.385611582342506e-02, -6.385611582342506e-02, -6.327427402069155e-02, -5.971249478403083e-02, -6.077845548439292e-02, -6.179674412753492e-02, -6.128134397443009e-02, -6.128134397443009e-02, -6.692294514921258e-02, -4.238697070491521e-02, -4.606336752325606e-02, -5.192846777352228e-02, -4.894364023608572e-02, -4.894364023608572e-02, -5.782021926348150e-02, -1.432389825823212e-02, -1.765669780593141e-02, -5.113742505898904e-02, -2.356177787973960e-02, -2.356177787973960e-02, -5.041936522020963e-03, -6.963085944531268e-04, -1.378316159192511e-03, -2.268491426043807e-02, -2.005917695883235e-03, -2.005917695883237e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_ccalda_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672956856e-01, -1.747372526063868e-01, -1.747376582038776e-01, -1.747363883973041e-01, -1.747370500132485e-01, -1.747370500132485e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -1.202915523734385e-01, -7.507468276142482e-02, -7.504671083119945e-02, -7.436535042362934e-02, -7.457433763699302e-02, -7.453002000518651e-02, -7.453002000518651e-02, -4.407883909029361e-02, -4.438233039524280e-02, -7.900736698061860e-02, -3.869582608968664e-02, -4.091886916693978e-02, -4.091886916693978e-02, -4.849423593406164e-03, -5.059080974329330e-03, -1.814957241592364e-02, -3.046165059145502e-03, -3.705072949501219e-03, -3.705072949501229e-03, -1.321404666298630e-01, -1.321459006030123e-01, -1.321407372934667e-01, -1.321455341852672e-01, -1.321432101886051e-01, -1.321432101886051e-01, -1.038276322678099e-01, -1.040309546218598e-01, -1.036783308870874e-01, -1.038589693339977e-01, -1.040118482080471e-01, -1.040118482080471e-01, -7.170998474808106e-02, -7.378542427346357e-02, -6.978541633456724e-02, -7.074348540376992e-02, -7.210898567657267e-02, -7.210898567657267e-02, -3.211636191061112e-02, -4.410943247452886e-02, -3.079828628005500e-02, -1.032849703534696e-01, -3.492210023901037e-02, -3.492210023901037e-02, -2.429818831173949e-03, -2.987022878196810e-03, -2.363048029266213e-03, -2.457414087463874e-02, -2.781518125836641e-03, -2.781518125836641e-03, -7.183073346116532e-02, -7.168733233876977e-02, -7.173787450420188e-02, -7.177943773582969e-02, -7.175864098997956e-02, -7.175864098997954e-02, -7.114671086119044e-02, -6.739392548094907e-02, -6.851829936286137e-02, -6.959138420930606e-02, -6.904837093538650e-02, -6.904837093538652e-02, -7.497907555920832e-02, -4.894336676652954e-02, -5.289030830420814e-02, -5.914859868946303e-02, -5.596910016369781e-02, -5.596910016369781e-02, -6.539524416530182e-02, -1.763257882150191e-02, -2.152053010629287e-02, -5.830699949972622e-02, -2.826624935272213e-02, -2.826624935272213e-02, -6.422398805763800e-03, -9.130110394558607e-04, -1.794908259946950e-03, -2.727493372977130e-02, -2.599361099800860e-03, -2.599361099800861e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.021919849491256e-25, 3.205911497123219e-24, -3.470020379702731e-25, 1.150492999543880e-24, -2.398883479440656e-24, -2.398883479440656e-24, -1.072057796493057e-21, 6.599988836649355e-22, 6.272076754047564e-22, 1.100943398793378e-21, 1.926535884800594e-22, 1.926535884800594e-22, -8.303943534331561e-19, -1.576997135331331e-19, -8.443069750893442e-19, -1.494925994108916e-19, 2.298110466733086e-19, 2.298110466733086e-19, -1.500947771133439e-16, -1.339456341887636e-15, -2.418352689666393e-19, 4.746266198164963e-16, -4.415181744890491e-16, -1.424464533570899e-15, -3.692030432309122e-11, 2.192452617567554e-12, 3.541116009833423e-15, -1.076694200616808e-11, -2.991908556874640e-12, 7.076717629960551e-12, 2.028546202551977e-20, -3.389884657734608e-20, 1.661538647342142e-20, -6.285268891493296e-21, 2.384093671680702e-20, 2.384093671680702e-20, -1.030156473881698e-20, 3.983729633543355e-20, 1.034538352386066e-20, -4.982431498839328e-20, -5.695277311973163e-20, -5.695277311973163e-20, 4.294091012380276e-18, -3.796583463423093e-18, -1.879950071013912e-18, -5.024022002640963e-18, -1.895490374473985e-18, -1.895490374473985e-18, 9.884960555161770e-16, -1.762687094885234e-16, -2.226987530818697e-15, -1.285547535250673e-20, -1.742368124471301e-15, -3.200552672704532e-15, 2.580823530696452e-12, -9.886019365640675e-13, -3.394318110077377e-11, 1.285328344187933e-14, 4.663584442746991e-12, -1.373464636733910e-12, 3.271177129888561e-17, -1.943500614371774e-17, -4.520622947602367e-17, -7.029420094159140e-17, -4.848775575238078e-17, -9.391995233381600e-17, -1.763569922718955e-17, -2.832100038169921e-17, -3.478788755368291e-17, -1.500763571725511e-17, 4.763015201762136e-18, -2.573119894242979e-17, 4.661924562384418e-18, -2.351880254361969e-16, -2.177598002411305e-16, 6.989253223352361e-17, 9.469472876648776e-17, 9.274536900518386e-17, -3.943756789016785e-18, -1.821193787669421e-14, -9.933967004634718e-15, -2.320135554456889e-19, -1.510302780650634e-15, 5.303797085325638e-16, -3.062704617828188e-13, -1.603170786155214e-11, 6.972537365775772e-11, -1.042461707711928e-14, -1.015904782036188e-11, -2.963047197352837e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_ccalda_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_ccalda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.060711272076122e-19, 1.049716158502277e-19, -1.403054115042754e-19, 1.784869159062158e-19, 1.037153875825840e-19, 1.037153875825840e-19, 8.128091809083552e-19, 1.875111217006180e-19, -1.817538441477813e-19, -1.620995508447694e-19, 3.424622620906365e-19, 3.424622620906365e-19, 8.696062904477459e-19, -7.853554123093664e-19, -2.419128949793761e-18, 8.422805063973536e-19, 5.101637399356446e-19, 5.101637399356446e-19, 3.727291119334725e-18, 3.434299876718627e-17, -2.380196176419866e-19, -9.389723661220587e-18, 4.816744326675193e-17, -2.618627537566879e-18, 8.306513386600228e-17, 9.029218274634045e-18, 2.800308455166539e-17, 1.810042281264941e-18, 9.831322712140098e-19, -4.280298864748866e-18, -5.978088040222486e-17, 1.760359866332726e-17, -3.521281638976684e-17, 4.804501760102430e-18, -3.183388706165567e-17, -3.183388706165567e-17, 2.894733101698868e-18, 2.419040025510810e-18, 1.212230271550412e-19, 2.584720593570726e-18, 4.411567716092522e-20, 4.411567716092522e-20, 2.422351434625948e-17, -1.038545567872689e-17, -5.400225116280525e-18, -1.196063064738889e-18, 1.154279173223400e-17, 1.154279173223400e-17, -2.162499390340409e-17, -2.043997330352544e-17, 7.370119129263172e-18, 7.694969901596489e-19, 4.792815364824925e-17, 1.066114365256087e-16, -2.703405623548196e-19, -9.423172718276838e-19, 6.938893707924255e-18, -1.181478619108702e-17, -5.166898904798906e-18, -1.666440949040545e-18, -1.141087260064684e-16, -5.766880907041059e-17, 1.007704494024454e-16, -1.908149894067568e-16, 1.199652878302105e-16, 1.215582817992918e-16, 5.261177673203969e-17, 9.863849651506643e-17, -1.754245630745251e-16, -4.373187909434217e-17, -2.278095634994305e-17, -2.729868140130551e-17, -1.638141183811108e-17, 7.999065712745013e-18, -3.562884355947925e-17, 5.316141546050393e-18, 1.467605836982913e-17, 4.332442454734568e-18, -3.993338666207453e-17, 1.350028135087974e-17, 8.338145264899973e-18, 1.690033691925939e-17, -9.161171728075928e-19, 1.481858795979039e-17, 7.327241985345871e-19, 1.562853215080448e-20, -4.873946758205121e-18, 8.667233458326221e-17, 2.576958324893155e-18, 2.454912265944942e-19]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
