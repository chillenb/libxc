
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_hf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.455443123535473e-01, -1.455438663226342e-01, -1.455419710966112e-01, -1.455492208759358e-01, -1.455440770157865e-01, -1.455440770157865e-01, -1.214315497202154e-01, -1.214238623467141e-01, -1.211943625608633e-01, -1.212856183085744e-01, -1.214295661360224e-01, -3.453601039708132e-02, -9.401391456414451e-02, 2.822012898466042e-02, 3.665016301937585e-02, 3.299741526142197e-02, 2.799432358880549e-02, 2.799432358880549e-02, 2.211139507737286e-02, 2.064623692991979e-02, -1.186476922675181e-01, 7.655562221274503e-03, 2.170345283113140e-02, 2.170345283113140e-02, -3.504557978907086e-02, -3.635533132130399e-02, -7.910129754870932e-02, -1.882670512179320e-02, -3.603021018802292e-02, -3.603021018802312e-02, -1.358844060419767e-01, -1.361782927827919e-01, -1.359169109740982e-01, -1.044531069982169e-01, -1.360319130950045e-01, -1.360319130950045e-01, -1.102612565709847e-01, -1.091388559195484e-01, -1.107798294085138e-01, -1.098631939964433e-01, -1.088436410919528e-01, -1.616778266590468e-02, -4.122852883677869e-02, -6.424542877199632e-02, -2.924605708128691e-02, -4.723790445347414e-02, -4.951034626967704e-02, -6.147831585065683e-02, -7.709584785038957e-02, 3.242764497256490e-02, -7.614339484645118e-02, -7.295105316104566e-02, 3.686517553959101e-04, 3.686517553959101e-04, -2.659309243715090e-03, -2.052885515348671e-02, -1.578842185749118e-02, -5.521506085314129e-02, -2.769552789637026e-03, -1.888323242134014e-02, -8.776042529984544e-02, -8.254944155249300e-02, -5.312266651504986e-02, -8.585588972439528e-02, -8.513165808504400e-02, -8.513165808504400e-02, -8.492419058153058e-02, -3.617897944331316e-02, -5.082680257084565e-02, -6.438688202101367e-02, -5.746580171257112e-02, -5.631861483970334e-02, -5.921209785382736e-02, -6.746018354907961e-02, 1.697281213681756e-02, -5.954329362170723e-02, 2.790025117712758e-03, 2.790025117712980e-03, -6.189379124574401e-02, -7.977308408778408e-02, -7.857106575371764e-02, -1.752109738235913e-02, -6.970636240145481e-02, -4.050023329617972e-02, -4.028062882062596e-02, -6.182596496432844e-03, -1.130912562005994e-02, -3.956601531345666e-02, -1.629748856385003e-02, -1.629748856385000e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_hf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.228403923193920e-01, -1.228407252635469e-01, -1.228422201740600e-01, -1.228367970222842e-01, -1.228405674468389e-01, -1.228405674468389e-01, -7.592868177182116e-02, -7.593190955886214e-02, -7.602950892530559e-02, -7.599300265812559e-02, -7.592965350502420e-02, -2.586054982543385e-01, -4.495091248214880e-02, -9.814606543774240e-02, -7.363458909318610e-02, -8.495459334482069e-02, -9.870447795215553e-02, -9.870447795215553e-02, -4.206794615449505e-02, -4.739689391253921e-02, -4.859410901297986e-02, 1.160322293724932e-01, -4.362524574411802e-02, -4.362524574411802e-02, -8.698375430094658e-02, -8.975969789065198e-02, -1.252224250226356e-01, -4.979148718089293e-02, -8.900734367978268e-02, -8.900734367977976e-02, -2.107139316931785e-01, -2.099499895468685e-01, -2.106295475613135e-01, -9.709973509648036e-02, -2.103312312709353e-01, -2.103312312709353e-01, -6.429152463476581e-02, -6.487648025497336e-02, -6.403697409510091e-02, -6.450125480772460e-02, -6.502111102256865e-02, -2.144641220958032e-01, -1.533928368277361e-01, -1.370274012777368e-01, -1.514063937813642e-01, -1.497919959420312e-01, -1.513739731387866e-01, -5.263203707699653e-02, -7.840942013047751e-02, 3.661525814468686e-02, -7.475262872936193e-02, -2.171025433535312e-01, 1.105809342407311e-01, 1.105809342407311e-01, -3.662110076960601e-03, -5.394818453630149e-02, -4.208525322183103e-02, -8.789395213771341e-02, -3.829178209975548e-03, -4.988387011445942e-02, -6.608154992474685e-02, -8.228721909976494e-02, -5.656641053641910e-02, -7.154744294533742e-02, -7.382252677862219e-02, -7.382252677862219e-02, -7.075607601643061e-02, -1.463253217203353e-01, -1.408069985824911e-01, -1.238070837799568e-01, -1.341660337276354e-01, -5.190661926997007e-02, -1.483993243648406e-01, -3.170581802613918e-02, -7.612960972196747e-02, -3.977240322736777e-02, -1.036099848373184e-01, -1.036099848373186e-01, -4.499691708350390e-02, -1.379912877143658e-01, -9.418087271906161e-02, -1.225671479478977e-01, -7.828161400745945e-02, 4.777943919374562e-02, -9.944618974808400e-02, -1.731321039684806e-02, -3.078069413568887e-02, 4.589101134738466e-02, -4.343874096476558e-02, -4.343874096476454e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.707091885881028e-09, 2.707034003146430e-09, 2.706754926056404e-09, 2.707700499682012e-09, 2.707061569526065e-09, 2.707061569526065e-09, 2.113961409337470e-05, 2.113833126978894e-05, 2.109615999669746e-05, 2.110450273477357e-05, 2.113878172385052e-05, 1.276536447845067e-06, 5.630131677899074e-02, 8.722572687413462e-04, 7.033383827995712e-04, 7.947025488389796e-04, 8.765279515738125e-04, 8.765279515738125e-04, 2.475987631841826e-01, 2.609537499529601e-01, 2.522919843969620e-02, -2.268704534519653e-01, 2.513003737301296e-01, 2.513003737301296e-01, 5.105410316416665e+03, 4.567107050441437e+03, 6.925398499279233e+01, 1.593018086811223e+04, 4.781431815140906e+03, 4.781431815140870e+03, 2.726907122849634e-08, 2.027340453370131e-08, 2.650165147716904e-08, 1.972218326917391e-06, 2.377615765138717e-08, 2.377615765138717e-08, 3.355881430054423e-04, 3.219922903872911e-04, 3.413647130590118e-04, 3.304611645188977e-04, 3.191871886103343e-04, 1.522701902410393e-05, 8.490553077620875e-03, 5.257621839173936e-03, 9.022363799522445e-03, 9.480083877067228e-03, 7.654325833015680e-03, 6.656622191270808e-02, 1.643199832202995e+02, 6.949538579225894e-03, 1.885489980379037e+02, 3.428032098880961e-05, -3.469050581391547e-01, -3.469050581391547e-01, -5.616090084486337e+07, 1.443226960076198e+04, 5.357961183247637e+04, -3.438576346737148e+02, -4.774355487309607e+07, 1.964305776271140e+04, -9.030048554487881e-02, -3.071957189081883e-02, 1.422703572415133e-02, -5.953775717794353e-02, -5.134537222936735e-02, -5.134537222936735e-02, -6.897925351049884e-02, 1.580688825762935e-02, 1.457760483718711e-02, 8.024121555587852e-03, 1.243959342954310e-02, 1.047970874530120e-01, 4.910272259930420e-03, 7.469349205251024e+00, 6.242858866057769e-02, 9.740690174905362e-01, 6.061713030574344e-02, 6.061713030574473e-02, 2.839617497513095e-01, 8.775620706873329e+01, 2.905208142179588e+01, 8.025459237811210e-02, 3.237474190495132e+02, 3.341267717012758e+00, 2.247565527650411e+03, 2.468006327776318e+05, 8.810470261427421e+04, 4.141583195872395e+00, 3.321551282618049e+04, 3.321551282618129e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.848622579332926e-05, -1.848615750725689e-05, -1.848579250766430e-05, -1.848691318127974e-05, -1.848619027011028e-05, -1.848619027011028e-05, -4.219622930017459e-04, -4.219699596971157e-04, -4.221736195423747e-04, -4.220374451278084e-04, -4.219609940227732e-04, 3.019313809323615e-04, -5.687403075907344e-03, 5.540455531093956e-03, 4.860513853331330e-03, 5.236156879014634e-03, 5.553544025588694e-03, 5.553544025588694e-03, 3.339756119729198e-02, 3.517689959356730e-02, -3.676823859342116e-03, -5.048320070915338e-02, 3.392233857939837e-02, 3.392233857939837e-02, -8.773120119642518e-02, -9.041113832267171e-02, -1.234421058034906e-01, -2.958073756773539e-02, -9.172684830000949e-02, -9.172684830000942e-02, 8.274500552140651e-04, 8.436982123210192e-04, 8.292339651423034e-04, -2.238409533826321e-04, 8.355603830599661e-04, 8.355603830599661e-04, -1.090813361183205e-03, -1.083329213370335e-03, -1.093573210909028e-03, -1.087904590145790e-03, -1.082096829669229e-03, 9.456828005911219e-04, 3.093800477114896e-03, 9.799359071897841e-03, 4.908786548764495e-03, 3.111663612101212e-03, 3.008411793511528e-03, -7.769962835683662e-03, -7.246529397471412e-03, -4.552322711298668e-04, -9.504341681483877e-03, 4.349648409801301e-04, -6.868691102701673e-02, -6.868691102701673e-02, 1.804193653288306e-04, -3.595413778187672e-02, -5.622113699336867e-02, 1.369452116989101e-02, 2.053712341735568e-04, -3.700315589563030e-02, 3.465181311370695e-01, 1.412701388727522e-01, -7.998110669836730e-03, 2.403263366576847e-01, 2.121113777697290e-01, 2.121113777697290e-01, 2.537606179769549e-01, 4.252887180037726e-03, 4.770014684225251e-03, 1.914330489101116e-02, 8.822621094947325e-03, -9.406008504090724e-03, 4.618683221497980e-03, -2.709006070569641e-02, 2.328889923912593e-02, -1.722469325870161e-02, 2.112806930064688e-02, 2.112806930064689e-02, -1.181611112830127e-02, -1.171082613290585e-01, -1.196481915758704e-01, 1.386076115976806e-02, -3.020413760731911e-03, -1.171124222715835e-01, -6.197571771039293e-02, -1.256714640589084e-02, -3.079459478255170e-02, -1.249835630097091e-01, -3.838465408739317e-02, -3.838465408739324e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
