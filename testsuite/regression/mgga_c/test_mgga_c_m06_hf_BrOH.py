
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_hf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.625846991721198e-01, -1.625863695021905e-01, -1.625924772359464e-01, -1.625652195476744e-01, -1.625855903912756e-01, -1.625855903912756e-01, -8.677950794434697e-02, -8.678819640545926e-02, -8.703307066874066e-02, -8.670079538527825e-02, -8.678356853362718e-02, -8.678356853362718e-02, -2.988803364542975e-02, -2.932284331496371e-02, -1.289854545263625e-02, -1.272086531424843e-02, -2.968367867633709e-02, -2.968367867633709e-02, 1.967079692089196e-02, 1.763909869936586e-02, -6.201830197847480e-02, 7.322870339328047e-03, 1.906068633908908e-02, 1.906068633908908e-02, -3.592074193333122e-02, -3.749452652623310e-02, -8.848178414205882e-02, -2.659279156881629e-02, -3.701113092512710e-02, -3.701113092512711e-02, -1.358987723963873e-01, -1.361882676154043e-01, -1.359306439310933e-01, -1.361556219374424e-01, -1.360442426609545e-01, -1.360442426609545e-01, -1.985119874340824e-02, -2.222669881791051e-02, -1.736533875431123e-02, -1.926453675616469e-02, -2.470322055612351e-02, -2.470322055612351e-02, -5.613999805051281e-02, -5.730206608107914e-02, -5.219885743675981e-02, -5.674022482136136e-02, -6.028812657075427e-02, -6.028812657075427e-02, -3.507039628394415e-02, 3.199368084867593e-02, -3.022202713118899e-02, -7.822913358873725e-02, 1.422663749576891e-03, 1.422663749576891e-03, -2.234992968597061e-02, -2.721651707024089e-02, -1.825338036559462e-02, -9.166766182730203e-02, -2.675001522826361e-02, -2.675001522826367e-02, -6.645056819294952e-02, -7.455582819873560e-02, -7.311887327611584e-02, -7.108971953840874e-02, -7.222249646521270e-02, -7.222249646521268e-02, -5.602701583962413e-02, -3.836034381904319e-02, -5.366825667349365e-02, -6.571369752020489e-02, -6.017214227114426e-02, -6.017214227114429e-02, -5.765671137382368e-02, 2.767541859083722e-02, 1.294335168001615e-02, -2.373369744156950e-02, -5.118274558710834e-03, -5.118274558710612e-03, -3.254161963121288e-02, -8.576197075348355e-02, -8.834056665852814e-02, -3.513490231534871e-02, -4.248912793688053e-02, -4.248912793688048e-02, -5.474585249926592e-02, -9.789369875198132e-03, -1.264734071186099e-02, -4.158390301587458e-02, -2.347593536745819e-02, -2.347593536745823e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_hf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.094572802669453e-01, -3.094540029851117e-01, -3.094500301941354e-01, -3.095039025362520e-01, -3.094554574607418e-01, -3.094554574607418e-01, -2.152648222280514e-01, -2.152423193858824e-01, -2.146371688577470e-01, -2.158846030374621e-01, -2.152523274143435e-01, -2.152523274143435e-01, -1.550383427975119e-01, -1.553217845075925e-01, -1.574220654738547e-01, -1.625418892136700e-01, -1.551479446950940e-01, -1.551479446950940e-01, -5.914263335236841e-02, -6.619228386688125e-02, -8.902955144381441e-02, 7.752202063017527e-02, -6.143062217480683e-02, -6.143062217480683e-02, -8.708023268283313e-02, -8.986761728481296e-02, -1.092462586451535e-01, -5.172620832596473e-02, -8.910069362346884e-02, -8.910069362346884e-02, -2.090903517279775e-01, -2.083323467302007e-01, -2.090271328820758e-01, -2.084370794799159e-01, -2.086829011754480e-01, -2.086829011754480e-01, -2.327497105871867e-01, -2.323032804318330e-01, -2.300952539023332e-01, -2.297213637078767e-01, -2.354114875314451e-01, -2.354114875314451e-01, -1.170217675291989e-01, -4.670240625945606e-02, -1.167198010693876e-01, -4.892756478622477e-02, -1.095414393881196e-01, -1.095414393881196e-01, 1.022063714530717e-01, 2.314955858103929e-02, 1.046842961463857e-01, -6.141175257625227e-02, 1.108943531839238e-01, 1.108943531839238e-01, -4.925833394387644e-02, -5.555030692365357e-02, -4.269105186043731e-02, -2.371978247456501e-02, -5.179395361702993e-02, -5.179395361702939e-02, -6.025121680223722e-02, -6.328649738172047e-02, -5.972637754373807e-02, -5.873169205120194e-02, -5.900160283876735e-02, -5.900160283876732e-02, -6.108827929651031e-02, -1.462527818237140e-01, -1.329296295411807e-01, -1.011865322883365e-01, -1.192214353084780e-01, -1.192214353084778e-01, -4.639824986263545e-02, -4.215222942634211e-02, -9.619579524346911e-02, -1.350335040153260e-01, -1.253280369005851e-01, -1.253280369005859e-01, -1.448345987861323e-01, -1.303472890407060e-01, -6.704322288070415e-02, -1.179279542535928e-01, 7.483179785993545e-02, 7.483179785993901e-02, -1.008912566071451e-01, -1.837130909473605e-02, -3.114704499766627e-02, 7.371539569802352e-02, -4.523743767049591e-02, -4.523743767049471e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.412011734674277e-10, 2.411859735887518e-10, 2.411441450177435e-10, 2.413932310494049e-10, 2.411929305476875e-10, 2.411929305476875e-10, 1.692877655636836e-06, 1.692563541347704e-06, 1.683452460814251e-06, 1.695802470713087e-06, 1.692691444405113e-06, 1.692691444405113e-06, 4.932442826632869e-03, 4.948230838711079e-03, 5.134412569782663e-03, 4.907433028949208e-03, 4.938252131361438e-03, 4.938252131361438e-03, 5.077198484163707e-01, 5.484333863991616e-01, 2.098106810944250e-03, 7.012823942170323e-01, 5.229596084898294e-01, 5.229596084898294e-01, 5.098283697663783e+03, 4.558251711834779e+03, 6.084747686618074e+01, 1.586644931404836e+04, 4.773402031675161e+03, 4.773402031675158e+03, 1.979171276588794e-08, 1.276328433811662e-08, 1.911552312807373e-08, 1.365018073676343e-08, 1.615373476691103e-08, 1.615373476691103e-08, 2.028179021129099e-05, 1.973242184706096e-05, 1.966150260955028e-05, 1.922373376967085e-05, 2.065639299211212e-05, 2.065639299211212e-05, 6.073045092632508e-03, -1.237671744170363e-02, 8.346059025509184e-03, -1.004400887683258e-02, 3.823560527566658e-03, 3.823560527566658e-03, -5.784050873629318e-02, 1.064441345252270e-01, -1.690123786468715e-01, -4.644209955125800e-05, -2.926941984464246e-01, -2.926941984464246e-01, 2.121221025799815e+04, 1.437388356160829e+04, 5.348277343439466e+04, 9.847146086768658e+00, 1.954264573396217e+04, 1.954264573396181e+04, -8.749038861794560e-02, -4.118033162836788e-02, -5.480681978236345e-02, -6.769502166163191e-02, -6.097606821895462e-02, -6.097606821895462e-02, -5.438397526614820e-02, 1.638537961146316e-02, 1.337873579427916e-02, 1.260554112524914e-03, 9.078352697163785e-03, 9.078352697163752e-03, -8.288701344432188e-03, 1.009699329145512e-01, 1.148891987450789e-01, 8.517847644788702e-02, 1.084870357098783e-01, 1.084870357098787e-01, 2.624462279239108e-02, 8.280792652307765e+01, 2.262283717714845e+01, 1.121437987688613e-01, 9.402938646231156e-01, 9.402938646231069e-01, 2.194038528503201e+03, 2.466488482174851e+05, 8.806438850270202e+04, 1.026123505093154e+00, 3.306165573484984e+04, 3.306165573484993e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_hf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.446834013950639e-05, 2.447020832711563e-05, 2.447687363869995e-05, 2.444641994865157e-05, 2.446933806605515e-05, 2.446933806605515e-05, 1.154806336941943e-04, 1.155367195359482e-04, 1.172398904129660e-04, 1.168639689311313e-04, 1.154932393953720e-04, 1.154932393953720e-04, -2.182439274204960e-03, -2.220433654904955e-03, -3.174120674249561e-03, -2.512295187261338e-03, -2.195499840028676e-03, -2.195499840028676e-03, 1.770347449893249e-02, 1.747296093269151e-02, -3.862846212638624e-03, -6.895919255730681e-02, 1.744689199487679e-02, 1.744689199487679e-02, -8.597771310269689e-02, -8.813142677200435e-02, -1.088651266384399e-01, -2.054068231484754e-02, -8.971922432427305e-02, -8.971922432427297e-02, 8.310703061129041e-04, 8.472624142081507e-04, 8.328029385672131e-04, 8.453860214816434e-04, 8.392134095483393e-04, 8.392134095483393e-04, 6.803132483370270e-04, 6.899807168207536e-04, 7.181628049034865e-04, 7.284105329981869e-04, 6.397815619436619e-04, 6.397815619436619e-04, 5.207578788201836e-03, 1.018948087167013e-02, 3.971494035614150e-03, 5.639239168433874e-03, 6.827882649887662e-03, 6.827882649887662e-03, -8.516882909363516e-02, -6.824653913187742e-03, -8.828678240958406e-02, 3.831642109668776e-04, -7.160041754713739e-02, -7.160041754713739e-02, -2.950071176976075e-02, -2.719552311759989e-02, -4.981635113112162e-02, -9.257791474782170e-02, -2.557300275291370e-02, -2.557300275291367e-02, 1.692190778220433e-01, 1.188339893762672e-01, 1.425532763910820e-01, 1.601281443504840e-01, 1.516607749020313e-01, 1.516607749020313e-01, 5.857104352193264e-02, 4.158361792950102e-03, 6.484766468231675e-03, 2.351646099799684e-02, 1.205359107104892e-02, 1.205359107104889e-02, 6.082376002054547e-03, 1.368391662351895e-02, 1.306617283249171e-02, 5.406989632548207e-03, 9.811497179667584e-03, 9.811497179667610e-03, 4.796038485469100e-03, -1.085533455761522e-01, -1.039670224041994e-01, 7.004963470314568e-03, -1.083943608794500e-01, -1.083943608794499e-01, -4.395292868153592e-02, -7.623479617374499e-03, -2.821846534038474e-02, -1.153501381941509e-01, -2.602688090512177e-02, -2.602688090512178e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
