
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.248677008660636e-01, -2.248743556965300e-01, -2.249013490845249e-01, -2.248028426624702e-01, -2.248548108335531e-01, -2.248548108335531e-01, -1.259926292000496e-01, -1.259564543623911e-01, -1.250110567951815e-01, -1.253942743426799e-01, -1.253497130817137e-01, 2.681176634197753e-02, -1.951441775741633e-01, 9.118394957370725e-02, 1.118923131207397e-01, 1.021010399568996e-01, 1.043538269476446e-01, 1.043538269476446e-01, 6.802455669564582e-02, 6.474007901701102e-02, -3.671782166101217e-01, 4.854543017351361e-02, 7.574066551583113e-02, 7.574066551583107e-02, -2.665710515900446e-02, -2.780841839366305e-02, -8.788344430716397e-02, -1.668766585637387e-02, -2.032899656365637e-02, -2.032899656365637e-02, -2.658431770131489e-01, -2.671116160206776e-01, -2.659153984124386e-01, -2.411022731912996e-01, -2.664754694196684e-01, -2.664754694196684e-01, -1.386616463763996e-01, -1.317971887716984e-01, -1.444035860945717e-01, -1.378604424639401e-01, -1.321653545268848e-01, 4.570956994121887e-02, -5.013594003126307e-02, -1.105412051518606e-01, -1.332777368552655e-02, -5.100452428380233e-02, -6.142003828164731e-02, -5.951872680019809e-02, -3.386128615755992e-01, 8.478253820557791e-02, -3.337375706465731e-01, -1.022569458385956e-01, 1.814494922937842e-02, 1.814494922937880e-02, -2.980370118376300e-02, -1.636191978502687e-02, -1.288360017430644e-02, -2.905024377041697e-01, -3.417205700864117e-02, -1.520579507533597e-02, -4.195369196551827e-01, -2.336758914874703e-01, -2.707728187868675e-01, -3.346215397453964e-01, -3.065519698059800e-01, -3.065519698059800e-01, -3.797068065259729e-01, -2.674846751096333e-02, -6.430680979612736e-02, -1.053105845406920e-01, -8.416324929619998e-02, -7.058359951197390e-02, -9.724819059596783e-02, -2.130473454570785e-01, 6.062395894377121e-02, -7.806613255773527e-02, 3.007107417908981e-02, 3.007107417908979e-02, -6.261469781909183e-02, -8.647197629062640e-02, -9.369181121044473e-02, -1.023136367970288e-02, -3.070425956784467e-01, -5.299531759263763e-02, -3.543170193335160e-02, -4.940326041293966e-03, -9.770158004334013e-03, -5.780683686080100e-02, -1.419478336465369e-02, -1.419478336465373e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.902906237629423e-01, -5.903093338169115e-01, -5.903852019995739e-01, -5.901082379511041e-01, -5.902543663282133e-01, -5.902543663282133e-01, 9.392012665961483e-02, 9.381089587958025e-02, 9.091872969299583e-02, 9.209295367897387e-02, 9.196455820801933e-02, -3.422440540695022e-01, 1.673117236879162e-01, -1.988187822799106e-01, -1.797926125428254e-01, -1.910725736729750e-01, -1.889206428919444e-01, -1.889206428919444e-01, -9.221295294794232e-02, -1.053828737092679e-01, 1.481222300233128e-01, 1.764533452211335e-01, 8.201721482064135e-02, 8.201721482064286e-02, -3.385609768593712e-02, -3.524388756656458e-02, -8.153527609257270e-02, -2.151624622658232e-02, -2.606572908345776e-02, -2.606572908345776e-02, -5.351473572579153e-01, -5.406761022220912e-01, -5.354599830020550e-01, -6.441936028009441e-01, -5.378920429347589e-01, -5.378920429347589e-01, 1.448691170683986e-01, 1.334582999913862e-01, 1.533810127915619e-01, 1.436055518145525e-01, 1.341157303658691e-01, -2.582192897521324e-01, -2.345336522478212e-01, -2.387732125009070e-01, -1.937454963263549e-01, -2.305260325453513e-01, -2.384579466862982e-01, -1.171916530470985e-01, -2.726304841541695e-01, 8.363881101564645e-02, -2.856133767408298e-01, -3.931041972642576e-01, 1.739822046452666e-01, 1.739822046452678e-01, -3.864732512102494e-02, -2.110840471280210e-02, -1.665331922855831e-02, -3.004462165834683e-01, -4.420212728884997e-02, -1.961592094667478e-02, -9.109336372638009e-01, -6.419941265017771e-01, -6.898581914321221e-01, -8.263731873789886e-01, -7.859972893460542e-01, -7.859972893460542e-01, -8.721281696894656e-01, -1.992927314763741e-01, -2.212953096465442e-01, -2.281688969679409e-01, -2.171265584369588e-01, -1.837631462591393e-01, -2.388329390976040e-01, 8.434049194515465e-02, -1.552724517857457e-01, 7.913927887624410e-02, -1.524188522157043e-01, -1.524188522157042e-01, 3.590859818895072e-02, -8.251916741646988e-02, -6.641090293443862e-02, -1.462767337547839e-01, -2.686449638898618e-01, 7.050303775233897e-02, -4.455803345125334e-02, -6.476658220107107e-03, -1.270579136084300e-02, 5.555728922274621e-02, -1.832885384478836e-02, -1.832885384478874e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.313352982177932e-09, -5.313305744082550e-09, -5.313072226385106e-09, -5.313774762976208e-09, -5.313410930639339e-09, -5.313410930639339e-09, 2.010919218421576e-05, 2.009856575721888e-05, 1.981730270874684e-05, 1.992368668296472e-05, 1.992055683848700e-05, 6.772254401562443e-07, 4.206295268755410e-02, 2.061564874127654e-03, 2.087959402339035e-03, 2.127513275167919e-03, 2.118239130305822e-03, 2.118239130305822e-03, 1.047229243396008e+00, 1.034258661850929e+00, 3.730963119179639e-02, 7.190680495333224e-01, 9.962474062046381e-01, 9.962474062046390e-01, 3.673319862183763e-02, 4.239878152538262e-02, 1.729092992618584e-01, 9.409002827769330e-03, 2.256216267107458e-02, 2.256216267107458e-02, -1.166540734123045e-07, -1.151688457982632e-07, -1.165702249240896e-07, -9.395021068197467e-07, -1.159134036303392e-07, -1.159134036303392e-07, 2.877452440420487e-04, 2.619329131799060e-04, 3.088476276915971e-04, 2.843671329305810e-04, 2.636386212228770e-04, 1.200159141493746e-05, 8.203377743084666e-04, -2.913890142769526e-03, 5.227176583406117e-03, 8.042039510848555e-04, -2.482756868540726e-04, -8.070924445705389e-04, 2.707488434588227e+02, 4.835586550495720e-01, 3.645517549033233e+02, -3.368189854471265e-06, 9.984232187703214e-01, 9.984232187703183e-01, 2.876486623354698e+08, 7.528908390817304e-03, 1.100803055172203e-01, 1.656321843356784e+03, 1.551231976431782e+08, 3.587248860712990e-02, -5.089554794642109e-02, -5.598915952715899e-03, -1.728582076162414e-02, -2.441491407450711e-02, -1.776082289940553e-02, -1.776082289940553e-02, -4.316113929226552e-02, 6.205219375506556e-03, -1.768325531622399e-03, -6.259676001519532e-03, -5.084483215080106e-03, -1.225139321239542e-02, -1.908483033333730e-03, 5.909570396558877e+00, 1.847915498953131e-01, 2.982251896240972e-01, 1.122247025064653e-01, 1.122247025064655e-01, 6.332849363621840e-02, 1.667058353247058e-01, 2.081328768002983e-01, 5.538610033149204e-02, 6.748677293113484e+02, 7.948947004882062e-01, 2.082109948082395e-02, 1.017135649221908e-03, 1.845775018012275e-02, 8.384967274742114e-01, 5.354372748923224e-02, 5.354372752938024e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.061385942332828e-04, 2.061506664034829e-04, 2.061987430894156e-04, 2.060201555672657e-04, 2.061144940128982e-04, 2.061144940128982e-04, -1.734625603949255e-03, -1.733955631699186e-03, -1.716048331801232e-03, -1.723058163454274e-03, -1.722621421541436e-03, 2.107475800216922e-03, -3.683418119158841e-02, 1.348329946012113e-02, 1.222867353117994e-02, 1.304784496368299e-02, 1.288300258898828e-02, 1.288300258898828e-02, 2.391790258297388e-02, 3.203996545486091e-02, -2.264120023421192e-02, -1.143652941835091e-01, -7.354657562844430e-02, -7.354657562844522e-02, -2.560245159682775e-04, -3.084941788822721e-04, -1.565519667839255e-02, -3.910428736791235e-05, -1.048194407176696e-04, -1.048194407176696e-04, 3.970069294438042e-03, 4.053238551283971e-03, 3.974767139446044e-03, 5.571238828718180e-03, 4.011268087030016e-03, 4.011268087030016e-03, -5.720775286672882e-03, -5.502013353193926e-03, -5.875572540245514e-03, -5.693868075885703e-03, -5.517530335665122e-03, 3.856333637454171e-03, 7.315905162737614e-02, 9.840563936754473e-02, 4.311254212861727e-02, 7.876738616177323e-02, 8.022205111458157e-02, 2.345099552750478e-02, -7.109726001917234e-02, -5.333374883575544e-02, -6.244274512664379e-02, 1.405218541785717e-02, -1.391737489357659e-01, -1.391737489357671e-01, -6.511893436402766e-06, -3.238677644343914e-05, -1.206513023974015e-04, -3.174773612929602e-02, -4.031764069784193e-05, -7.929369699314256e-05, 2.099639953874808e+00, 8.370669835820921e-01, 9.964127666138287e-01, 1.525793893298059e+00, 1.334390656358693e+00, 1.334390656358693e+00, 1.937501773439943e+00, 6.604055196902431e-02, 1.049323110700869e-01, 1.343343928387275e-01, 1.156374250476235e-01, 8.341048278827508e-02, 8.153241408527925e-02, -1.766940038432351e-01, 3.955191129102361e-02, -1.005449378984787e-01, 3.562531913177135e-02, 3.562531913177128e-02, -4.944871470373521e-02, -1.422059664543944e-02, -2.698599156917442e-02, 6.703732609967145e-02, -7.245827983785735e-02, -1.048389877120879e-01, -3.243941003867778e-04, -8.546959690882284e-07, -2.136444086936509e-05, -1.010389761311240e-01, -9.032985570674698e-05, -9.032985570628328e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
