
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_l_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.988486234024342e-01, -2.988549489890210e-01, -2.988813079209984e-01, -2.987876712545699e-01, -2.988369835002515e-01, -2.988369835002515e-01, -5.839585623581943e-03, -5.874700503495399e-03, -6.775149605019808e-03, -6.135565297000867e-03, -6.320418326598925e-03, -6.320418326598925e-03, 3.505442116672004e-03, 4.559388258824705e-03, 3.351645832060890e-02, 3.185824451147300e-02, 3.113012338403175e-02, 3.113012338403175e-02, 6.405939082808346e-02, 5.982416443878816e-02, -3.165491905024776e-02, 4.169450789676588e-02, 6.754795046379186e-02, 6.754795046379182e-02, -2.665710595211399e-02, -2.780842032460772e-02, -8.789871174311978e-02, -1.668766655621411e-02, -2.032899818881867e-02, -2.032899818881867e-02, -2.657728460268692e-01, -2.670429929037506e-01, -2.658465848883874e-01, -2.669669521631399e-01, -2.664052702614621e-01, -2.664052702614621e-01, 4.539914234544096e-02, 4.005400322836159e-02, 5.130565256014082e-02, 4.648758259325907e-02, 3.956411671438018e-02, 3.956411671438018e-02, -5.180335394277674e-02, -1.016185570263662e-01, -2.884651304428686e-02, -5.436658223774264e-02, -6.092689691096047e-02, -6.092689691096047e-02, -4.405971803018387e-02, 8.134799574211307e-02, -5.518598180246809e-02, -9.519481296799392e-02, 1.588096600662733e-02, 1.588096600662767e-02, -1.327950286121077e-02, -1.636192123982621e-02, -1.288360166708430e-02, -8.512654519019723e-02, -1.520579770848923e-02, -1.520579770848927e-02, -4.087891163287919e-01, -2.325551525099505e-01, -2.792405312395707e-01, -3.295623919023035e-01, -3.028985285320308e-01, -3.028985285320308e-01, -3.633073161283976e-01, -2.749365069250794e-02, -6.398720879778727e-02, -1.037271421732243e-01, -8.300723621175239e-02, -8.300723621175236e-02, -8.724785132749954e-02, 8.246068180794905e-02, 5.313383172279437e-02, -4.771170794545576e-03, 1.956460213514516e-02, 1.956460213514514e-02, -1.308396356740846e-02, -8.647792786268040e-02, -9.374595155656884e-02, -2.008738613793561e-02, -5.364727113633259e-02, -5.364727113633238e-02, -3.543177964849514e-02, -4.940326069988349e-03, -9.770158070623198e-03, -5.812809488639403e-02, -1.419478516284443e-02, -1.419478516284448e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_l_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.302908464638337e-01, -6.302809461177424e-01, -6.302420702867083e-01, -6.303886843722468e-01, -6.303111076859589e-01, -6.303111076859589e-01, -2.842223651074742e-01, -2.842799828406417e-01, -2.858802525677746e-01, -2.858225248531623e-01, -2.855735985859024e-01, -2.855735985859024e-01, -2.163808131877352e-01, -2.179854565002420e-01, -2.433080337300244e-01, -2.373734561886774e-01, -2.388279349125133e-01, -2.388279349125133e-01, -1.008393052754696e-01, -1.150660961191755e-01, -2.647884776499157e-01, 1.441518823514960e-01, 5.127401153937079e-02, 5.127401153937261e-02, -3.385610286501119e-02, -3.524390017068258e-02, -8.163313904447390e-02, -2.151625081478659e-02, -2.606573972125224e-02, -2.606573972125223e-02, -5.353666199267633e-01, -5.408953149856957e-01, -5.356748200949708e-01, -5.405519381274778e-01, -5.381136139500639e-01, -5.381136139500639e-01, -2.515902569207252e-01, -2.563536553894312e-01, -2.493543763398467e-01, -2.526917038496353e-01, -2.556089986695544e-01, -2.556089986695544e-01, -1.990894743431150e-01, -2.464869706509017e-01, -1.400358472121368e-01, -1.414018496814891e-01, -2.066444472807051e-01, -2.066444472807051e-01, 1.038826665180657e-01, 7.059302261707866e-02, 7.913265556641322e-02, -2.695986877882081e-01, 1.620862826511254e-01, 1.620862826511265e-01, -1.720285724645391e-02, -2.110841425186576e-02, -1.665332903321049e-02, -2.110680555987969e-02, -1.961593822107192e-02, -1.961593822107212e-02, -8.886695611372960e-01, -6.345160080716412e-01, -7.307389721673638e-01, -8.078250762838544e-01, -7.699598819361599e-01, -7.699598819361599e-01, -8.301094926312219e-01, -1.953795657516625e-01, -2.158433030478500e-01, -2.298062141757734e-01, -2.134477857583233e-01, -2.134477857583233e-01, -2.195746614134803e-01, -7.855295106805499e-02, -1.643109972529002e-01, -1.230031682120970e-01, -1.519655448906879e-01, -1.519655448906879e-01, -1.522033551511727e-01, -8.255736368558725e-02, -6.675562030947356e-02, -1.171038042516789e-01, 6.657524169147286e-02, 6.657524169147311e-02, -4.455853944793810e-02, -6.476658409596800e-03, -1.270579179703404e-02, 5.360136850027401e-02, -1.832886564748379e-02, -1.832886564748415e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.255038580538788e-10, -1.255064204068887e-10, -1.255107029789688e-10, -1.254727158830416e-10, -1.254936508423925e-10, -1.254936508423925e-10, 1.868670618767722e-06, 1.868083705742535e-06, 1.851063354460161e-06, 1.844780321511617e-06, 1.851577206285045e-06, 1.851577206285045e-06, 8.987969433223714e-03, 8.982508450523544e-03, 8.492028098417077e-03, 7.734645140931808e-03, 8.008819340247889e-03, 8.008819340247889e-03, 1.191050686116858e+00, 1.205483280440250e+00, 7.980016687080855e-03, 1.265808500994382e+00, 1.483548853202205e+00, 1.483548853202201e+00, 3.766628374991162e-02, 4.439457812541259e-02, 2.414126272491471e-01, 1.328078401081322e-02, 2.777933790382258e-02, 2.777933791315332e-02, -1.173592717033554e-07, -1.158606047956225e-07, -1.172603892598146e-07, -1.159389884382549e-07, -1.166191791176275e-07, -1.166191791176275e-07, 1.517940171734329e-05, 1.418861102819978e-05, 1.516679376108927e-05, 1.430124801453869e-05, 1.460915105996068e-05, 1.460915105996068e-05, 1.191098400558877e-03, -4.805321765885999e-03, 9.752517902082149e-03, 1.855051241698800e-03, -3.544014123033498e-04, -3.544014123033498e-04, 6.982544604321237e-01, 5.746102791772855e-01, 7.016330847336000e-01, -1.222568318861471e-05, 1.381044163422744e+00, 1.381044163422745e+00, 1.296629462231482e-02, 1.632588794034298e-02, 1.634351353295503e-01, 6.348160888271742e-01, 7.111828030829945e-02, 7.111828034175524e-02, -5.516865686190819e-02, -5.997193363832677e-03, -1.375066411277056e-02, -2.634103615863169e-02, -1.912887134673611e-02, -1.912887134673611e-02, -5.057542167615330e-02, 6.527047485010182e-03, -1.897353611304920e-03, -6.891152018612016e-03, -5.545164565975234e-03, -5.545164565975227e-03, -3.542597109014749e-03, 3.409886163720164e-01, 2.267054633150901e-01, 8.928101887888268e-02, 1.481097750201984e-01, 1.481097750201986e-01, 1.799310445165046e-02, 1.964884151945793e-01, 3.126318943621967e-01, 8.140616971100639e-02, 1.192394883735809e+00, 1.192394883735816e+00, 4.684157697069055e-02, 1.768717142483931e-02, 2.226393902795672e-02, 1.079134760318364e+00, 8.856096911102553e-02, 8.856096902092848e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_l_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_l", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.114292763846701e-04, 2.114250300890959e-04, 2.114071519829123e-04, 2.114701189553208e-04, 2.114369751874831e-04, 2.114369751874831e-04, 1.253649406352918e-03, 1.254546052283303e-03, 1.279125282380110e-03, 1.275845381602522e-03, 1.273496734486693e-03, 1.273496734486693e-03, -1.800640898967277e-03, -1.673360063761661e-03, 9.581410805861087e-04, 1.867963530975915e-03, 1.494537232460992e-03, 1.494537232460992e-03, 1.930898079200566e-02, 2.584399129104358e-02, -7.226748270099630e-03, -1.152063316738007e-01, -7.709808259534512e-02, -7.709808259534603e-02, -2.560245129888371e-04, -3.084941705169621e-04, -1.565439551901173e-02, -3.910428672087181e-05, -1.048194374213802e-04, -1.048194374213802e-04, 3.974101094383244e-03, 4.057275282078389e-03, 3.978717900253075e-03, 4.052087946064958e-03, 4.015345050254637e-03, 4.015345050254637e-03, 3.381475445475934e-03, 3.585231014291613e-03, 3.325651219392165e-03, 3.485827569736731e-03, 3.532473246374242e-03, 3.532473246374242e-03, 5.742155834932360e-02, 1.022162244783182e-01, 1.957964010302008e-02, 3.627840890559886e-02, 6.549739582232462e-02, 6.549739582232462e-02, -9.627372719420725e-02, -5.452870880978646e-02, -8.906637461007300e-02, 8.305037980480242e-03, -1.392170150679811e-01, -1.392170150679823e-01, -1.281406125307621e-05, -3.238677530687666e-05, -1.206512968912367e-04, -5.336055618549499e-02, -7.929369158202133e-05, -7.929369158195867e-05, 1.960365758289200e+00, 8.194967796612466e-01, 1.125768653184074e+00, 1.453986453247205e+00, 1.280508246064328e+00, 1.280508246064328e+00, 1.705619217635817e+00, 6.372761432588246e-02, 1.014025892223434e-01, 1.358970960251281e-01, 1.128939988536123e-01, 1.128939988536123e-01, 7.089192520137083e-02, 9.869649832068492e-03, 3.272055909412298e-02, 9.948966307607025e-03, 2.254681508489665e-02, 2.254681508489658e-02, 3.252029667626460e-02, -1.422030155989875e-02, -2.698218174923259e-02, 3.475124671102289e-02, -1.047558901193690e-01, -1.047558901193681e-01, -3.243938233557704e-04, -8.546959671232544e-07, -2.136444081207958e-05, -1.009951988963631e-01, -9.032985119774877e-05, -9.032985119728508e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
