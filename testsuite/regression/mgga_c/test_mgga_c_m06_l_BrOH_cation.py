
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.486771530742264e-02, -7.486718034050233e-02, -7.486580249961050e-02, -7.487374327696084e-02, -7.486943904299870e-02, -7.486943904299870e-02, -6.994942235278701e-02, -6.994131775255674e-02, -6.972895337574725e-02, -6.982936555336949e-02, -6.981089357445014e-02, -6.981089357445014e-02, -5.432985950390568e-02, -5.417913909573902e-02, -4.868759632145725e-02, -4.822500602012769e-02, -4.748388565931183e-02, -4.748388565931183e-02, -4.683444406677673e-03, -7.095391482399349e-03, -1.018143003466250e-01, 4.490118396421411e-02, 2.962897981997967e-02, 2.962897981997978e-02, 1.625802407428043e-02, 1.709469851578509e-02, 6.855359028495148e-02, 1.102457387059630e-02, 7.738322756332939e-03, 7.738322756332944e-03, -5.294002469517822e-02, -5.287629245101844e-02, -5.293961488544685e-02, -5.288328877123283e-02, -5.290637686016531e-02, -5.290637686016531e-02, -6.029489816482525e-02, -5.988053079776146e-02, -5.957536222427939e-02, -5.921805110177547e-02, -6.035864724333528e-02, -6.035864724333528e-02, -3.341527662660182e-02, -2.797600351716356e-02, -3.709113017219179e-02, -3.704458905969002e-02, -3.174561835682471e-02, -3.174561835682477e-02, 8.238190512943125e-02, 2.109001376921960e-02, 8.478223952050705e-02, -5.730902505579194e-02, 5.688196941090129e-02, 5.688196941090135e-02, 1.075463214405008e-02, 1.202842509511847e-02, 8.508814947520602e-03, 8.448280786904525e-02, 8.670301342413171e-03, 8.670301342413204e-03, -1.933039706462042e-02, -2.320319163827053e-02, -2.241795013975159e-02, -2.150350067472885e-02, -2.200890618542865e-02, -2.200890618542865e-02, -1.423191411361851e-02, -3.443892484226529e-02, -3.158451754381197e-02, -2.676450169925393e-02, -2.940663302133650e-02, -2.940663302133650e-02, -3.119407820205403e-02, -2.173753332955997e-03, -1.997769636817748e-02, -3.551018451356225e-02, -3.079291670013740e-02, -3.079291670013751e-02, -3.697994413452499e-02, 6.449470551416053e-02, 7.970837159477367e-02, -3.237732965247908e-02, 7.772337751131672e-02, 7.772337751131676e-02, 2.705914892044116e-02, 4.771376335412567e-03, 5.978590192105957e-03, 7.568835756993816e-02, 8.264325831033734e-03, 8.264325831033693e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.585347562294515e-02, -2.589207519494341e-02, -2.585241303806685e-02, -2.589132229326818e-02, -2.585502654460159e-02, -2.589329529539786e-02, -2.586688159506512e-02, -2.590874643263197e-02, -2.585214306989259e-02, -2.590737404975241e-02, -2.585214306989259e-02, -2.590737404975241e-02, -2.156510167852899e-02, -2.158352561654020e-02, -2.154293294070508e-02, -2.156855459669282e-02, -2.109743284247023e-02, -2.102751056077823e-02, -2.119521171397221e-02, -2.119074790073294e-02, -2.156074995843049e-02, -2.085533272495255e-02, -2.156074995843049e-02, -2.085533272495255e-02, -8.117591654737044e-02, -7.657282136307675e-02, -8.269818177374144e-02, -7.726744382233364e-02, -1.071055018068781e-01, -1.120395013637967e-01, -1.032459097625826e-01, -1.004956067755187e-01, -7.758869514190136e-02, -1.283441338350302e-01, -7.758869514190136e-02, -1.283441338350302e-01, -1.014823599632360e-01, -8.495029358186523e-02, -1.014546223955598e-01, -8.398053293301311e-02, -1.147185377998879e-01, -1.048268207963282e-01, -7.237524815302598e-02, -6.739220345455565e-02, -1.709566660813008e-02, -3.704272665556341e-01, -1.709566660813025e-02, -3.704272665556226e-01, 3.973570980127070e-02, 3.556744346176782e-02, 4.179629723888029e-02, 3.686003972292404e-02, 1.272031673370946e-01, 1.161619136419811e-01, 2.348668990811038e-02, 2.413534828549234e-02, 1.907978615452884e-02, 4.583460873749059e-02, 1.907978615452873e-02, 4.583460873748975e-02, -1.805396736262177e-02, -1.811602785383570e-02, -1.793074011891393e-02, -1.799671796616331e-02, -1.805494652310091e-02, -1.811726628793919e-02, -1.794893023075927e-02, -1.800822173313632e-02, -1.798395205411263e-02, -1.805539714467352e-02, -1.798395205411263e-02, -1.805539714467352e-02, -9.366823248563083e-02, -9.384497169650685e-02, -9.134432501411083e-02, -9.157285783162750e-02, -1.008920133497968e-01, -1.001652567175331e-01, -9.882704241104268e-02, -9.817523098944902e-02, -8.780662996870037e-02, -9.036135723769911e-02, -8.780662996870037e-02, -9.036135723769911e-02, -2.600220246929741e-03, -3.092686903174990e-03, -2.723356444438688e-02, -2.683968934716660e-02, -1.345928689977016e-02, -5.322684449147297e-03, -3.939485760095088e-02, -3.263666090710052e-02, -8.174549073311499e-04, -4.536893124402697e-03, -8.174549073310944e-04, -4.536893124402641e-03, 4.457327912282721e-02, 4.806693989411179e-02, -9.231638647389273e-02, -9.025489079140880e-02, 5.682036311376010e-02, 6.417115539250254e-02, -4.688431050443248e-02, -4.690180552865064e-02, -3.769224634542262e-02, -2.628352138471457e-03, -3.769224634542195e-02, -2.628352138471457e-03, 2.019218903532261e-02, 1.889938665719422e-02, 2.396175610553809e-02, 2.340560351930403e-02, 1.934181324125077e-02, 1.754002465487356e-02, 1.104125779581122e-01, 1.073018622923005e-01, 2.921285204811995e-02, 1.657092791878890e-02, 2.921285204811942e-02, 1.657092791878886e-02, -8.674426679245617e-03, -7.960341082990735e-03, -1.496500938539708e-02, -1.459617667680549e-02, -1.538067117832370e-02, -1.488843435243853e-02, -1.401841491408037e-02, -1.343593983642695e-02, -1.496429151021116e-02, -1.442054379211095e-02, -1.496429151021116e-02, -1.442054379211095e-02, 2.093046850589961e-03, 2.355103908604723e-03, -3.803233711261056e-02, -3.764070355576532e-02, -1.851718352000586e-02, -1.794510666543192e-02, -7.229854151301451e-03, -6.967600297598686e-03, -1.022039114684170e-02, -1.010460445707428e-02, -1.022039114684170e-02, -1.010460445707428e-02, -3.076187502712388e-02, -3.002655366836007e-02, -1.057243735551162e-01, -1.035930401325094e-01, -9.694909028662912e-02, -9.439696225014926e-02, -3.735650731374240e-02, -3.647237036356021e-02, -6.854694987484178e-02, -6.843154429494780e-02, -6.854694987484289e-02, -6.843154429494736e-02, -3.039361315919986e-02, -2.964362583508062e-02, 1.210310417361659e-01, 1.197754433064403e-01, 1.294158612346107e-01, 1.239576307442913e-01, -1.704719213999772e-02, -1.514086177001095e-02, 5.944941565125891e-02, 7.189173372144286e-02, 5.944941565126273e-02, 7.189173372144644e-02, 5.267199249429488e-02, 4.953427246955974e-02, 7.491906280788215e-03, 7.576790560820928e-03, 1.460630248557783e-02, 1.313474434463810e-02, 7.809895721546867e-02, 7.763707729536562e-02, 2.644876551947320e-02, 1.584924120206049e-02, 2.644876551947285e-02, 1.584924120206058e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.867659891262741e-10, 0.000000000000000e+00, -2.866523460062162e-10, -2.867928118653540e-10, 0.000000000000000e+00, -2.866716655957877e-10, -2.868270550870763e-10, 0.000000000000000e+00, -2.867340960256994e-10, -2.865270792593019e-10, 0.000000000000000e+00, -2.863486348540032e-10, -2.867982970030555e-10, 0.000000000000000e+00, -2.864519245955097e-10, -2.867982970030555e-10, 0.000000000000000e+00, -2.864519245955097e-10, -1.575643991432681e-07, 0.000000000000000e+00, -1.557756985203428e-07, -1.582102668598547e-07, 0.000000000000000e+00, -1.561284236376812e-07, -1.717808999408176e-07, 0.000000000000000e+00, -1.725780791852225e-07, -1.843666584136615e-07, 0.000000000000000e+00, -1.830703490989786e-07, -1.669962785717052e-07, 0.000000000000000e+00, -1.833837659267862e-07, -1.669962785717052e-07, 0.000000000000000e+00, -1.833837659267862e-07, 4.696938215175716e-03, 0.000000000000000e+00, 4.695466971343086e-03, 4.700471927963741e-03, 0.000000000000000e+00, 4.714240620631570e-03, 5.013099475871703e-03, 0.000000000000000e+00, 4.915186178650621e-03, 4.037928102434043e-03, 0.000000000000000e+00, 4.010648930940619e-03, 4.727769950115444e-03, 0.000000000000000e+00, 3.915897158769611e-03, 4.727769950115444e-03, 0.000000000000000e+00, 3.915897158769611e-03, 6.050443620287027e-01, 0.000000000000000e+00, 7.841220885110246e-01, 6.071046383613043e-01, 0.000000000000000e+00, 8.093982904358008e-01, 8.055255924524034e-03, 0.000000000000000e+00, 6.961927426503005e-03, 7.201828395146155e-01, 0.000000000000000e+00, 6.043646343020840e-01, 1.686770635490417e-01, 0.000000000000000e+00, 3.725699990329967e+01, 1.686770635490392e-01, 0.000000000000000e+00, 3.725699990329885e+01, -1.386523409618285e+04, 0.000000000000000e+00, -1.216900337178069e+04, -1.273133507225176e+04, 0.000000000000000e+00, -1.102585816623825e+04, -1.532062868798636e+02, 0.000000000000000e+00, -1.427419752989069e+02, -3.602567426659662e+04, 0.000000000000000e+00, -3.754318830345936e+04, -1.741155288431395e+04, 0.000000000000000e+00, -7.680142082419532e+04, -1.741155288431395e+04, 0.000000000000000e+00, -7.680142082419102e+04, -5.420764621868488e-07, 0.000000000000000e+00, -5.426008527518405e-07, -5.498681567000962e-07, 0.000000000000000e+00, -5.501163253359182e-07, -5.425474496013654e-07, 0.000000000000000e+00, -5.428775610557263e-07, -5.492115381051073e-07, 0.000000000000000e+00, -5.497272018491033e-07, -5.460499225759648e-07, 0.000000000000000e+00, -5.463534743935731e-07, -5.460499225759648e-07, 0.000000000000000e+00, -5.463534743935731e-07, 1.679017688251938e-05, 0.000000000000000e+00, 1.717871570866608e-05, 1.722028885089055e-05, 0.000000000000000e+00, 1.753872246336244e-05, 1.851145401705781e-05, 0.000000000000000e+00, 1.864136216139763e-05, 1.895709741061831e-05, 0.000000000000000e+00, 1.911114384618953e-05, 1.588154051159702e-05, 0.000000000000000e+00, 1.685687672178451e-05, 1.588154051159702e-05, 0.000000000000000e+00, 1.685687672178451e-05, -5.342189077258390e-03, 0.000000000000000e+00, -5.413947610252431e-03, 1.524763661460936e-02, 0.000000000000000e+00, 1.488129058821482e-02, -3.464413135879291e-03, 0.000000000000000e+00, -3.665833341617668e-03, 4.769069666576933e-02, 0.000000000000000e+00, 3.308667563093662e-02, -4.877990074066985e-03, 0.000000000000000e+00, -6.513280791791023e-03, -4.877990074066993e-03, 0.000000000000000e+00, -6.513280791791040e-03, -4.555523947522918e+00, 0.000000000000000e+00, -4.806035512864862e+00, 2.394994681292264e-01, 0.000000000000000e+00, 2.211698522558977e-01, -5.849310665328733e+00, 0.000000000000000e+00, -7.393987014804299e+00, 1.770471105269968e-04, 0.000000000000000e+00, 1.775330032255158e-04, -5.633437703882213e-01, 0.000000000000000e+00, -2.130319049765060e+00, -5.633437703882470e-01, 0.000000000000000e+00, -2.130319049765068e+00, -5.699274176209708e+04, 0.000000000000000e+00, -5.035834717346718e+04, -3.811759904715512e+04, 0.000000000000000e+00, -3.464806556421832e+04, -1.908872871704550e+05, 0.000000000000000e+00, -1.769910664043525e+05, -3.422922510494097e+01, 0.000000000000000e+00, -3.624826581055550e+01, -7.875753847578343e+04, 0.000000000000000e+00, -7.141953682779071e+04, -7.875753847579267e+04, 0.000000000000000e+00, -7.141953682779113e+04, -5.866925794887881e-02, 0.000000000000000e+00, -6.074691220205766e-02, -2.387259711342362e-02, 0.000000000000000e+00, -2.401218031934892e-02, -2.664172642811662e-02, 0.000000000000000e+00, -2.710219406259410e-02, -3.326296349284505e-02, 0.000000000000000e+00, -3.404229423897378e-02, -2.912581543981445e-02, 0.000000000000000e+00, -2.973694405717394e-02, -2.912581543981445e-02, 0.000000000000000e+00, -2.973694405717385e-02, -1.016197905839646e-01, 0.000000000000000e+00, -1.029883325384123e-01, 1.162107544609058e-02, 0.000000000000000e+00, 1.154712337265800e-02, -4.011510857538374e-04, 0.000000000000000e+00, -7.141949069971827e-04, -1.655736716867427e-02, 0.000000000000000e+00, -1.645124799561446e-02, -8.870391531449960e-03, 0.000000000000000e+00, -8.753614698510517e-03, -8.870391531449960e-03, 0.000000000000000e+00, -8.753614698510388e-03, 1.469386170371523e-02, 0.000000000000000e+00, 1.422693567097625e-02, 2.107028564986881e-01, 0.000000000000000e+00, 2.084338925069302e-01, 1.429868633641441e-01, 0.000000000000000e+00, 1.487288950611715e-01, 1.588438226317321e-02, 0.000000000000000e+00, 1.480018352579240e-02, 8.218260364628863e-02, 0.000000000000000e+00, 8.314983626868727e-02, 8.218260364629068e-02, 0.000000000000000e+00, 8.314983626868706e-02, 4.394630449341921e-03, 0.000000000000000e+00, 5.756237802581511e-03, -1.711720981627271e+02, 0.000000000000000e+00, -1.672787440546567e+02, -6.768727572100438e+01, 0.000000000000000e+00, -6.632715367592107e+01, -2.689612112048032e-02, 0.000000000000000e+00, -5.398284850452851e-03, -1.278098379819964e+01, 0.000000000000000e+00, -1.693722812157601e+01, -1.278098379820072e+01, 0.000000000000000e+00, -1.693722812157657e+01, -4.343872029929393e+03, 0.000000000000000e+00, -3.992033545896561e+03, -6.627591314611682e+05, 0.000000000000000e+00, -6.581888392813175e+05, -2.472249921599452e+05, 0.000000000000000e+00, -2.232648652107914e+05, -2.095596845287944e+01, 0.000000000000000e+00, -2.228985695652404e+01, -1.424775902092757e+05, 0.000000000000000e+00, -8.774247224289787e+04, -1.424775902092792e+05, 0.000000000000000e+00, -8.774247224289783e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.799046763205314e-06, 1.809058663178080e-06, 1.801400723622310e-06, 1.810698074098129e-06, 1.807144839394041e-06, 1.819724833521303e-06, 1.781621604044155e-06, 1.786083158735440e-06, 1.801787892048151e-06, 1.797329498183909e-06, 1.801787892048151e-06, 1.797329498183909e-06, -3.715479661006862e-04, -3.718825508951481e-04, -3.716030500145760e-04, -3.719453303993634e-04, -3.726582413741207e-04, -3.731620428377724e-04, -3.683951642015108e-04, -3.687735781646183e-04, -3.696348836113636e-04, -3.717797212088895e-04, -3.696348836113636e-04, -3.717797212088895e-04, -4.395879591311476e-03, -4.731243601751340e-03, -4.281838162542768e-03, -4.681892947951400e-03, -2.550948863058825e-03, -2.239556788705364e-03, -1.838145722330549e-03, -2.005678861094693e-03, -3.897456375250435e-03, -5.126475932925307e-04, -3.897456375250435e-03, -5.126475932925307e-04, 4.961358838354414e-02, 2.333825345149151e-02, 4.770095594533674e-02, 1.807503858548751e-02, -8.410035506068668e-03, -8.303906401274493e-03, 6.163827526675355e-02, 6.064693745307820e-02, 1.379040180760316e-02, 6.753510805630337e-03, 1.379040180760334e-02, 6.753510805630259e-03, 2.174716107634703e-02, 2.303314109372612e-02, 2.280893334392670e-02, 2.446074494928881e-02, 4.898274323695246e-02, 5.255914309140151e-02, 1.094228908838680e-02, 1.105018453208580e-02, 1.884356430093212e-02, 1.266831284293756e-02, 1.884356430093208e-02, 1.266831284293752e-02, 4.038216741060544e-04, 4.042201514908374e-04, 4.130807594040535e-04, 4.131481535892351e-04, 4.045564800558750e-04, 4.046702081191576e-04, 4.124705398421616e-04, 4.128007234261017e-04, 4.084033151778379e-04, 4.086619198349815e-04, 4.084033151778379e-04, 4.086619198349815e-04, -8.641686817913879e-04, -8.918465618161704e-04, -9.802339136480052e-04, -1.002304852461815e-03, -8.775008109930891e-04, -8.941939633034571e-04, -9.883889997676009e-04, -1.006876231575807e-03, -9.121556358863304e-04, -9.559410411876623e-04, -9.121556358863304e-04, -9.559410411876623e-04, -6.448317959271229e-03, -6.446376910053479e-03, -1.888337641240627e-02, -1.879575825677314e-02, -7.586667976166736e-03, -8.254099325002687e-03, -2.509661672701030e-02, -2.247527916823541e-02, -5.672095767968204e-03, -6.660744678025080e-03, -5.672095767968199e-03, -6.660744678025108e-03, 6.652693613945174e-02, 6.606772025370229e-02, 5.077652352916130e-02, 5.012852989592295e-02, 6.406169922376596e-02, 6.714123907405854e-02, -3.740753761893077e-03, -3.746497077164563e-03, 8.088506932403537e-02, 8.136812795774127e-02, 8.088506932403541e-02, 8.136812795774130e-02, 5.260834449826409e-03, 5.379080131373994e-03, 9.138456189604122e-03, 8.490157805090286e-03, 2.153055779845196e-02, 2.353869785728287e-02, 6.157917979450340e-02, 6.896912391266879e-02, 5.845902444748084e-03, 2.456713827613874e-02, 5.845902444748098e-03, 2.456713827613882e-02, 2.996004846527834e-02, 3.189618309581706e-02, 2.368089637487934e-02, 2.438649651601231e-02, 2.461675524793931e-02, 2.555076220706790e-02, 2.596316580572259e-02, 2.715609193664165e-02, 2.513353760250800e-02, 2.618613010863937e-02, 2.513353760250800e-02, 2.618613010863934e-02, -1.476747819574702e-02, -1.309807914642099e-02, -1.714984499845157e-02, -1.714002960553651e-02, -1.087820547851138e-02, -1.042731719696638e-02, 3.949396175070371e-03, 4.209156736975860e-03, -4.155582554537306e-03, -3.887487928390688e-03, -4.155582554537322e-03, -3.887487928390688e-03, -1.817693320724835e-02, -1.810171309525706e-02, 2.867060732283793e-02, 2.744902606400641e-02, 1.067921650614233e-02, 8.097137286390763e-03, -7.631620380772869e-03, -7.500686881041203e-03, -3.814348227526731e-03, -4.006620587424421e-03, -3.814348227526850e-03, -4.006620587424191e-03, -9.485264058485102e-03, -1.071419257258089e-02, 5.321197939989310e-02, 5.236955229283900e-02, 5.363189511079891e-02, 5.579229050914065e-02, -1.025728705742019e-02, -1.669963859530750e-02, 7.893632848771809e-02, 8.660614349561629e-02, 7.893632848771812e-02, 8.660614349561643e-02, 1.563698171651203e-02, 1.568429947018026e-02, 1.753651686667531e-03, 1.314383601183033e-03, 1.168014257409199e-02, 1.265730866149554e-02, 8.577068746862625e-02, 9.246030351106595e-02, 1.004354797695948e-02, 2.322994192739509e-02, 1.004354797695949e-02, 2.322994192739514e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
