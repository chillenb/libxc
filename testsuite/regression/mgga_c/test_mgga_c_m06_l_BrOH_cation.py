
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m06_l_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.324063779508180e-02, -8.323808606019230e-02, -8.322779908507535e-02, -7.390185451112175e-02, -7.389067584439790e-02, -7.610174279517889e-02, -9.682732605269573e-02, -6.441296147165954e-02, -6.437552465141994e-02, -6.439234937434191e-02, -6.438887886340505e-02, -9.677892705459334e-02, -1.728569855552577e-01, -9.575648736815801e-02, -2.387914029361538e-02, -9.870936721433465e-02, -1.843287250266356e-01, -2.534140095501547e-02, -7.005959661067140e-02, -6.875463068400378e-02, -1.274071606670104e-01, 4.455477927734447e-02, 3.804891168833041e-02, -1.003063161651786e-01, 1.612130364917806e-02, 1.606978362106099e-02, 4.264939562348988e-02, 9.875368320960367e-03, 6.987221761429726e-03, 6.987221761429701e-03, -5.310249042835435e-02, -5.303915891082389e-02, -5.309882181994097e-02, -5.304295351861721e-02, -4.521882724275811e-02, -4.522445938048464e-02, -5.535950195204942e-02, -5.559550568358707e-02, -5.511714026630132e-02, -5.539507949529998e-02, -9.290588540883404e-02, -5.557830175984702e-02, -4.050431920863318e-02, -3.048706184658900e-02, -3.576009217355525e-02, -3.364863254478545e-02, -3.888057202414663e-02, -3.353182966757384e-02, 7.604383916173818e-02, -8.061401333652018e-02, 7.760951770488156e-02, -4.825034603933043e-02, 5.496732079341066e-02, 5.496732079341132e-02, 7.474704597161107e-03, 9.672816050599419e-03, 7.487635377530034e-03, 2.006401836094920e-02, 7.422520781095693e-03, 7.422520781095685e-03, -2.509154018740158e-02, -2.602557133961694e-02, -9.423333649978095e-03, -1.640218449356680e-02, -8.514697570689888e-03, -1.688622612668794e-02, -2.496638343130819e-02, -4.359095261570056e-02, -3.489235616324959e-02, -2.848632374753063e-02, -2.997410918818033e-02, -3.085818928530337e-02, -3.231064674561906e-02, -1.206011561971976e-03, -7.064087712707978e-02, -5.245421792574356e-02, -2.670144565463750e-02, -5.962516797888140e-02, -3.383538154895194e-02, -3.331501014687886e-02, 7.239352702279475e-02, -2.987577592435275e-02, 7.208121747892847e-02, 7.208121747892843e-02, -3.547550631553800e-03, 2.773978793209061e-03, -7.994806576244836e-04, -1.192917763479381e-01, 7.156313625047792e-03, 6.622167361516990e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m06_l_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.117431898636608e-02, 5.116160794123535e-02, 5.117305851669759e-02, 5.116063542075652e-02, 5.116922324972652e-02, 5.115548459618158e-02, 4.112697151388967e-02, -6.340941914031373e-02, 4.112014276259879e-02, -6.339186649876238e-02, -3.912053565085416e-02, -3.911852806119098e-02, -1.112804691271301e-01, 3.915188313587326e-02, -1.081625946908038e-01, -1.081626783573628e-01, -1.074076794237764e-01, -1.074091813963542e-01, -1.077160106992958e-01, -1.077147798209088e-01, -1.076772598978382e-01, -1.076776725947615e-01, 3.939706633748208e-02, -1.113301926573023e-01, 1.860205992419835e-02, 1.970337834191224e-02, 2.834183927511624e-02, -1.058948386346836e-01, -1.380961158555560e-01, -1.405750073705898e-01, -1.148801168990572e-01, 2.817356457669784e-02, 2.029065923143895e-02, 1.420735101866390e-03, -1.269098516098583e-01, -1.491168594299517e-01, 1.890508160709403e-02, -1.100253484424937e-01, 1.912319806289509e-02, -1.016726687413723e-01, -2.548304895642681e-01, 3.077328804199064e-02, -4.360604197822465e-02, -2.842205308100670e-02, 8.987643371764636e-03, -2.331570620083525e-01, -1.800425442287189e-01, 6.321763153222735e-01, 3.968518571484145e-02, 3.554621249479913e-02, 2.270885151446270e-02, 3.557328393551826e-02, 3.008068969251063e-02, 2.872147574685485e-02, 2.314292785358129e-02, 2.384662839760923e-02, 1.893978254875405e-02, 4.531804632365342e-02, 1.893978254875388e-02, 4.531804632365256e-02, -1.848656605531773e-02, -1.851958820413158e-02, -1.834749008545866e-02, -1.838557912494654e-02, -1.847666979718621e-02, -1.851356327010112e-02, -1.835764328419709e-02, -1.839167438355593e-02, 2.347854973871405e-02, -3.027041392305274e-02, -3.022664113436330e-02, 2.343200078405860e-02, -1.139211873675232e-01, -1.139972151943647e-01, -1.097258191034771e-01, -1.097992111855413e-01, -1.173286925923329e-01, -1.173598936922373e-01, -1.134692951897514e-01, -1.134890670201252e-01, -1.026988300809986e-01, 3.410579013579929e-02, -1.098910983741925e-01, -1.100882378827315e-01, -4.847433416233182e-02, 1.574436945241009e-02, -1.656025585457088e-02, -1.583284832438392e-02, -5.450413654561215e-02, -5.210195741313706e-02, -3.777380633108551e-02, -3.383078264599859e-02, -4.198318658517874e-02, 1.422491432388356e-02, -3.005996684666767e-02, -3.533885366839384e-02, 6.960918444519752e-02, 7.065795297884456e-02, 9.868076112047541e-03, -2.341530845771027e-01, 8.080184035784230e-02, 8.637243713542152e-02, -4.305575177944743e-02, -4.305936437049218e-02, -1.927563631017554e-02, 1.557208919179870e-02, -1.927563631017654e-02, 1.557208919179254e-02, 1.021455823036349e-02, 1.799607306952789e-02, 2.334307443106372e-02, 2.272571447233008e-02, 1.907234264988890e-02, 1.724118298583130e-02, -9.189248964874461e-02, -4.424592411950279e-02, 2.817241810274057e-02, 1.650803613006255e-02, 2.817241810274040e-02, 1.650803613006246e-02, -1.286298445253879e-02, -1.247810527842606e-02, -1.071852773509041e-02, -1.041089355554653e-02, 6.530093391088616e-03, 6.812361600931400e-03, 5.347768009353188e-03, -1.321947655641244e-02, 6.074869877512904e-03, 6.371807163597377e-03, 5.739737405925399e-03, -1.311631228117635e-02, -1.255743428114589e-02, -1.227011866982813e-02, -5.295062525363625e-02, 1.582969205886314e-02, -4.008755951405679e-02, 1.446459795191041e-02, -1.492305486665779e-02, -1.453873921833165e-02, -2.154379639687243e-02, -2.109107346160588e-02, -3.194237610258049e-02, 1.346332524731292e-02, -3.306540100053423e-02, 1.401269201945232e-02, -1.030111520348000e-01, -1.007575446244307e-01, 1.748487491185025e-02, -8.545530676779201e-02, 1.444066052654880e-02, -5.784626722735864e-02, -7.873160566274906e-02, -7.886096229030870e-02, -6.285217426201994e-02, 1.505911788910641e-02, -5.514677092200726e-02, -5.482033977168055e-02, -7.495103925508573e-02, -7.503789996400040e-02, 1.340782311375662e-01, 1.278908876965340e-01, -4.766394004734542e-02, -4.688965804688472e-02, 7.678105110767863e-02, 8.581073141238874e-02, 7.678105110767236e-02, 8.581073141238797e-02, -5.686187925859872e-03, -5.608806399642577e-03, 6.945032631692168e-03, 6.917658057527065e-03, -1.122121752698398e-03, -1.041462162044553e-03, -1.974548873205282e-01, -1.934779027460805e-01, 2.557939736918337e-02, 1.578826529140272e-02, 2.547800472305924e-02, 4.667148680150755e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.878087562644521e-09, 0.000000000000000e+00, -3.878501953945242e-09, -3.878091546841103e-09, 0.000000000000000e+00, -3.878505762982510e-09, -3.878072577000415e-09, 0.000000000000000e+00, -3.878482231806288e-09, -4.249465112443228e-09, 0.000000000000000e+00, 2.804872342934069e-11, -4.249431240459099e-09, 0.000000000000000e+00, 2.782402359888381e-11, -1.956613506373937e-10, 0.000000000000000e+00, -1.957735624392201e-10, 2.749207956778077e-06, 0.000000000000000e+00, -1.406033738254969e-05, 1.781326009101781e-06, 0.000000000000000e+00, 1.780803409840905e-06, 1.780932830510654e-06, 0.000000000000000e+00, 1.782553303515623e-06, 1.780745233407216e-06, 0.000000000000000e+00, 1.780705413948563e-06, 1.774196436662913e-06, 0.000000000000000e+00, 1.789102553136211e-06, -1.405839439903356e-05, 0.000000000000000e+00, 2.769075791104897e-06, -6.609660542278985e-03, 0.000000000000000e+00, -7.460462246273397e-03, -5.793878602541333e-03, 0.000000000000000e+00, 3.895083740335865e-03, 2.368223258443910e-03, 0.000000000000000e+00, 2.291395073594163e-03, 3.904213090118636e-03, 0.000000000000000e+00, -3.923739059220432e-03, -1.008180912816624e-02, 0.000000000000000e+00, -1.645149004455626e-03, 2.986253978217817e-03, 0.000000000000000e+00, 1.767646356495720e-03, 7.692654526516435e+00, 0.000000000000000e+00, 1.825529067547619e+00, 6.450313412466525e+00, 0.000000000000000e+00, 1.708610734273983e+00, 1.606603802688571e-03, 0.000000000000000e+00, 4.957669142521352e-03, -6.677072994721899e-01, 0.000000000000000e+00, -7.313236064903856e-01, 3.885410504153580e-03, 0.000000000000000e+00, 1.020852302419982e+01, 1.891165719818299e+00, 0.000000000000000e+00, 4.454901677874913e+02, -1.386615795296621e+04, 0.000000000000000e+00, -1.216963298823406e+04, -7.810987208573785e+06, 0.000000000000000e+00, -1.072472026451375e+04, -3.342478622831205e+03, 0.000000000000000e+00, -5.185672467155399e+01, -3.603327376120225e+04, 0.000000000000000e+00, -3.755296226770934e+04, -1.741307744854967e+04, 0.000000000000000e+00, -7.700988762830431e+04, -1.741307744854960e+04, 0.000000000000000e+00, -7.700988762830156e+04, -5.383594490276161e-07, 0.000000000000000e+00, -5.391920165624493e-07, -5.463180033163443e-07, 0.000000000000000e+00, -5.468618078057495e-07, -5.389284454214326e-07, 0.000000000000000e+00, -5.395277935474769e-07, -5.457298462721628e-07, 0.000000000000000e+00, -5.465130661291388e-07, -4.182209328359811e-06, 0.000000000000000e+00, -3.739076892704938e-07, -3.735364226930643e-07, 0.000000000000000e+00, -4.186930622152936e-06, 2.513386444086623e-05, 0.000000000000000e+00, 2.529755293115097e-05, 2.474359314321099e-05, 0.000000000000000e+00, 2.486135830115413e-05, 2.521057738006029e-05, 0.000000000000000e+00, 2.569968266402599e-05, 2.490674471546568e-05, 0.000000000000000e+00, 2.536458403146299e-05, 3.720643457469601e-05, 0.000000000000000e+00, -1.733884585239923e-04, 2.510241273355850e-05, 0.000000000000000e+00, 2.460373013253177e-05, 1.088079285595074e-02, 0.000000000000000e+00, -8.230218321287192e-02, -4.090707685367264e-03, 0.000000000000000e+00, -4.887489174271076e-03, 1.001994220246603e-02, 0.000000000000000e+00, 1.037409991780824e-02, 6.918118096833207e-03, 0.000000000000000e+00, 5.455513535498278e-03, 8.046827247083445e-03, 0.000000000000000e+00, -8.597008960474721e-02, 3.216355915826294e-03, 0.000000000000000e+00, 4.547814342577956e-03, -6.909120235560372e+00, 0.000000000000000e+00, -6.913708412933386e+00, 1.341546278112714e+01, 0.000000000000000e+00, 1.941672927210319e+00, -9.358753420756436e+00, 0.000000000000000e+00, -9.647017369076911e+00, 1.354225635443346e-05, 0.000000000000000e+00, 1.347902577966980e-05, -2.224596549454863e+00, 0.000000000000000e+00, -3.176583072435524e+00, -2.224596549454748e+00, 0.000000000000000e+00, -3.176583072435444e+00, -2.628401914268547e+08, 0.000000000000000e+00, -5.024654381767847e+04, -3.814202211394683e+04, 0.000000000000000e+00, -3.466873502114999e+04, -1.909877842367586e+05, 0.000000000000000e+00, -1.770412858279900e+05, 2.067456342338464e+01, 0.000000000000000e+00, 4.846153847684830e+02, -7.919449548051735e+04, 0.000000000000000e+00, -7.145581289217068e+04, -7.919449548051725e+04, 0.000000000000000e+00, -7.145581289217067e+04, -5.992619141395962e-02, 0.000000000000000e+00, -6.065454570055148e-02, -3.369983257045835e-02, 0.000000000000000e+00, -3.374125591267655e-02, -1.598096927366090e-01, 0.000000000000000e+00, -1.587892620863061e-01, -1.773187149146905e-01, 0.000000000000000e+00, -4.351145858136304e-02, -1.664770165783472e-01, 0.000000000000000e+00, -1.654387566684934e-01, -1.695958900919514e-01, 0.000000000000000e+00, -3.966346843828576e-02, -6.001755344904962e-02, 0.000000000000000e+00, -6.082908385901016e-02, 2.689712748051824e-02, 0.000000000000000e+00, -1.611336263087859e-01, 1.669071219868063e-02, 0.000000000000000e+00, -1.592203043709750e-01, -1.100104359914771e-02, 0.000000000000000e+00, -1.108333653744646e-02, -1.099495910920591e-03, 0.000000000000000e+00, -1.362706166302707e-03, 8.517127696905090e-03, 0.000000000000000e+00, -1.580976732460364e-01, 2.459452752775186e-03, 0.000000000000000e+00, -5.464745402865564e-02, 1.965789679938843e-01, 0.000000000000000e+00, 1.954276720276461e-01, -4.204135762243438e-02, 0.000000000000000e+00, 2.667353281066646e-01, -5.183675673617877e-01, 0.000000000000000e+00, 1.111641840762254e-01, 1.181155472337805e-01, 0.000000000000000e+00, 1.201470185883152e-01, 1.710967155430980e-01, 0.000000000000000e+00, -6.001462786471571e-01, 2.372691515421646e-02, 0.000000000000000e+00, 2.427110306696427e-02, -1.955157689319960e+05, 0.000000000000000e+00, -1.852170944710243e+05, -7.218834661956774e+01, 0.000000000000000e+00, -6.959846819850242e+01, 8.972254719477515e-02, 0.000000000000000e+00, 9.902191651624616e-02, -1.761629172195320e+01, 0.000000000000000e+00, -1.980438011396470e+01, -1.761629172195373e+01, 0.000000000000000e+00, -1.980438011396553e+01, -7.110109942609666e+07, 0.000000000000000e+00, -5.370208720000839e+07, -6.633157025353786e+05, 0.000000000000000e+00, -6.587046665105621e+05, -3.555192989529733e+10, 0.000000000000000e+00, -2.189875683567545e+10, -6.544658480677339e+03, 0.000000000000000e+00, -5.664052369572130e+03, -1.428707830993455e+05, 0.000000000000000e+00, -8.779012210030474e+04, -1.421204248835812e+05, 0.000000000000000e+00, -1.102066663602799e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m06_l_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m06_l", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.178241649376275e-05, -8.178430004207031e-05, -8.178220290487903e-05, -8.178418086823226e-05, -8.178149197313086e-05, -8.178295808236384e-05, -7.322716854117367e-05, -9.089252467660094e-06, -7.322684738037289e-05, -9.072751034975966e-06, -1.807343571163158e-07, -1.736113089455568e-07, -1.040585956116685e-03, -1.465776409022651e-03, -6.630118867232643e-04, -6.628150328025694e-04, -6.666505166180060e-04, -6.672207460603569e-04, -6.652100343155574e-04, -6.652168110433835e-04, -6.627417112132630e-04, -6.682515627848233e-04, -1.467697838039977e-03, -1.047028790445663e-03, -2.026449585650589e-02, -2.039013533630960e-02, -1.954582243315276e-02, -8.266291806725569e-03, 1.268377894639157e-03, 1.773776437271901e-03, -6.940255951972052e-03, -1.956004008094473e-02, -1.989535630881956e-02, -1.941297947631442e-02, -1.930867498638428e-03, 3.951489333860654e-03, -1.460661276921774e-01, -4.279659682218937e-02, -1.469466013786889e-01, -4.695684509829184e-02, -8.364227806972117e-04, -1.182222261528232e-02, 7.635445116931844e-02, 7.374489955541236e-02, 7.747833367901501e-03, 1.084585054793913e-01, -2.221625172862445e-02, -6.157081018406437e-01, 2.201281848092395e-02, 2.315300137610709e-02, 3.024342681590383e-04, 2.458797201332396e-02, 7.779024650812530e-03, 4.984253618709367e-02, 1.238685982153322e-02, 1.227570128756454e-02, 1.955203573265646e-02, 1.601267900342445e-02, 1.955203573265646e-02, 1.601267900342446e-02, 4.072605376439686e-04, 4.075244940672874e-04, 4.166739263590067e-04, 4.165906232473664e-04, 4.079288549217702e-04, 4.079187906783387e-04, 4.159743901425120e-04, 4.161753356595540e-04, -9.666448644519982e-04, 3.253730455010410e-04, 3.253906046352489e-04, -9.671043815215369e-04, -1.366781827930996e-03, -1.376258746085626e-03, -1.440929013623444e-03, -1.446769704218012e-03, -1.290787576449963e-03, -1.328707005577820e-03, -1.361079171704062e-03, -1.397593753508466e-03, -2.533000800059279e-03, -3.755818955863873e-03, -1.465939554788665e-03, -1.414352569249461e-03, -2.075808542920616e-02, -3.303124731556874e-02, 1.350867508945956e-03, 3.016773887049446e-03, -1.546944336175324e-02, -1.675305906959295e-02, -1.614677673402667e-02, -1.390560292978081e-02, -1.688210636679665e-02, -3.436991988076620e-02, -1.129397163391419e-02, -1.412723134702788e-02, 7.831436503247183e-02, 7.780610232345822e-02, -1.026736849190407e-01, -7.663789102348172e-03, 7.829289750448490e-02, 7.825500126075685e-02, -1.683554075371468e-03, -1.681057928635858e-03, 9.161011192476050e-02, 8.747139863322625e-02, 9.161011192476069e-02, 8.747139863322613e-02, 1.764176111417578e-05, 8.199906050665354e-03, 1.167902923944896e-02, 1.110461697676915e-02, 2.447116451491869e-02, 2.692972062975468e-02, 5.032731185481550e-02, 1.582323637836648e-02, 1.081922204015895e-02, 2.522971988279991e-02, 1.081922204015894e-02, 2.522971988279991e-02, 9.036770466906061e-02, 9.281184616412759e-02, 4.601897375131941e-02, 4.686075129717527e-02, -4.455337654869776e-02, -4.422061592548965e-02, -4.309304013624847e-02, 6.634644366435974e-02, -4.461007748895186e-02, -4.427553844901960e-02, -4.288783527531711e-02, 5.997776015990107e-02, 8.245696108504881e-02, 8.468250201270659e-02, -2.938585478504679e-02, -4.151016334296841e-02, -2.227887951609354e-02, -4.202376735225436e-02, 4.183020060234443e-03, 4.592621983404012e-03, -7.878296567994499e-03, -7.388871871977030e-03, -1.407638759007089e-02, -4.249953304610028e-02, -8.852298001246043e-03, -2.919361337092797e-02, 2.828511413285343e-02, 2.682972883100788e-02, -8.372887368425895e-02, -3.002237146562823e-02, -6.441362888762195e-02, -4.157391944678518e-02, -1.292635479303664e-02, -1.332122378683531e-02, -3.867691958318314e-02, -7.438464454372637e-02, -2.027944273697375e-02, -2.094845450745913e-02, 2.018413377002145e-02, 2.004500573217657e-02, 6.166257283587030e-02, 6.351975504530888e-02, -3.170133471100824e-02, -3.534758254942683e-02, 9.161603580953091e-02, 9.708649511991124e-02, 9.161603580953083e-02, 9.708649511991123e-02, 6.188248000565827e-04, 6.556772497461928e-04, 3.952016502140390e-03, 3.951512400771424e-03, 4.050300563716299e-05, 4.889549018462799e-05, 4.096522951758234e-02, 3.849841092825748e-02, 1.658826988076785e-02, 2.387302832189922e-02, 1.656340472480341e-02, 2.476456771679727e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
