
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.803505379160378e-02, -9.803822549725176e-02, -9.805212065818611e-02, -9.800052147923871e-02, -9.803672442707614e-02, -9.803672442707614e-02, -1.532588899261739e-01, -1.531961174421805e-01, -1.513200368407690e-01, -1.520471923424836e-01, -1.532416500973904e-01, 6.536534000862339e-02, -3.418268344085234e-01, 1.186481224999858e-01, 1.183923382939593e-01, 1.192650778921728e-01, 1.185436685917069e-01, 1.185436685917069e-01, 4.060679222971909e-02, 4.135743746435341e-02, -5.933933363286327e-01, -1.415912940506063e-01, 4.087719896265238e-02, 4.087719896265238e-02, -1.187058681684870e-01, -1.230347688315123e-01, -2.934995393249296e-01, -6.523803434750079e-02, -1.219991311195037e-01, -1.219991311195038e-01, -2.681815767926205e-01, -2.694169259511509e-01, -2.683182309722260e-01, -1.092282692880338e-01, -2.688015322948430e-01, -2.688015322948430e-01, -1.919079478831536e-01, -1.791247478154369e-01, -1.978505233488303e-01, -1.872842408570647e-01, -1.759469687536288e-01, 9.097653990928396e-02, -3.550658787152244e-02, -8.070867929133765e-02, -1.029105140580477e-02, -4.711787386264592e-02, -5.081202205386150e-02, -3.250131953118998e-02, -5.000772697212865e-01, 5.467620712928257e-04, -4.918406338546652e-01, -8.436661292751338e-02, -1.581622482465398e-01, -1.581622482465398e-01, -6.363517776650454e-02, -7.086042552201696e-02, -5.525472940689825e-02, -4.152030028025906e-01, -6.588557555191293e-02, -6.545369051529287e-02, -7.176353202227015e-02, -1.057101903758648e-01, -3.759691979390112e-02, -8.833363413678734e-02, -9.330486980589614e-02, -9.330486980589614e-02, -8.615529307386890e-02, -2.811163328411809e-02, -5.429035075421659e-02, -8.324122399319038e-02, -6.702229183663368e-02, -3.212706151637822e-02, -6.882657570298034e-02, -3.181135999210488e-01, 5.811645255318269e-02, -1.009980271320814e-01, 4.286591801779834e-02, 4.286591801779834e-02, -7.158818854583471e-02, -2.879792316152874e-01, -3.131503063381147e-01, 1.113679401315946e-03, -4.537982410231485e-01, -2.584513153725219e-01, -1.351176672483899e-01, -2.250401420763732e-02, -4.015053107810915e-02, -2.519648632936564e-01, -5.690043030137534e-02, -5.690043030137543e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.973177079433851e-01, -2.973315603821844e-01, -2.973921722265609e-01, -2.971667083894576e-01, -2.973250050585429e-01, -2.973250050585429e-01, 2.879976020673750e-01, 2.878812559050887e-01, 2.844014626129805e-01, 2.857511038771229e-01, 2.879656664441274e-01, -5.048404024716622e-01, 4.211326386438659e-01, -2.051214386372157e-02, 7.663834883836294e-02, 3.228970463291907e-02, -2.285708365855304e-02, -2.285708365855304e-02, -1.636917165493249e-02, -3.120844446914138e-02, 3.355226364974028e-01, 2.422356398281121e-01, -2.067199275894901e-02, -2.067199275894901e-02, -1.474019540758308e-01, -1.523096635393639e-01, -2.676737744253282e-01, -8.366882329041321e-02, -1.510562408406806e-01, -1.510562408406813e-01, -4.945383790668633e-01, -4.938378306757810e-01, -4.944620833192972e-01, -2.483302899205372e-01, -4.941907655779802e-01, -4.941907655779802e-01, 3.525534348054790e-01, 3.309980926709848e-01, 3.623252361246848e-01, 3.448413619478297e-01, 3.255294419410233e-01, -3.936166355682737e-01, -1.822412164694325e-01, -1.804710919302894e-01, -2.239232095087783e-01, -1.611578231111004e-01, -1.636790127132914e-01, 7.240780129813993e-03, -4.547177759942769e-01, 1.962263233789708e-01, -4.384873414212102e-01, -3.168239516712179e-01, 2.012519760925089e-01, 2.012519760925089e-01, -8.185150065574869e-02, -9.063989928213664e-02, -7.096349143140100e-02, -4.611980100669685e-01, -8.468784424642350e-02, -8.387605576019437e-02, 5.709428980895766e-02, -2.165768769917076e-02, 6.733156829247770e-02, 3.455221711374344e-02, 2.351961872275048e-02, 2.351961872275048e-02, 3.561421738568327e-02, -1.778660442151013e-01, -1.464111366310814e-01, -1.719020641354234e-01, -1.572792918416594e-01, -8.486560450500349e-02, -1.732317569523653e-01, 2.307889794397782e-01, -8.004977930319856e-02, 1.819652834224622e-01, -1.648766750308009e-01, -1.648766750308007e-01, 1.313977067061398e-01, -2.792125160157403e-01, -2.390181516664372e-01, -1.853591882223065e-01, -4.368456924034603e-01, -5.791036153375414e-03, -1.677282805674112e-01, -2.937433323438971e-02, -5.197034286783894e-02, -7.480736288569018e-03, -7.313630654126339e-02, -7.313630654126357e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.419838595714265e-08, -1.419869744966246e-08, -1.419994384940456e-08, -1.419489169526966e-08, -1.419855083123887e-08, -1.419855083123887e-08, 2.861024768803068e-05, 2.859375422336390e-05, 2.809450209462402e-05, 2.827856909900026e-05, 2.860512477391833e-05, 9.678364433481179e-07, 6.923720070775337e-02, 3.209901346284560e-03, 3.146613901660276e-03, 3.255412567249588e-03, 3.210379582638503e-03, 3.210379582638503e-03, 1.552691180624235e+00, 1.523577792707640e+00, 4.478474660089130e-02, 6.656727512014439e-01, 1.543469213682539e+00, 1.543469213682539e+00, 1.020743063843044e-02, 1.158595558541343e-02, 1.251646507045916e-01, 2.326443322151888e-04, 1.221416991087056e-02, 1.221416991078096e-02, -7.032158771240439e-07, -7.127061370742159e-07, -7.042598536593682e-07, -5.806472410781921e-06, -7.079490460504513e-07, -7.079490460504513e-07, 4.479603623392017e-04, 4.049046462556563e-04, 4.674031026783309e-04, 4.321056622915257e-04, 3.948913808968601e-04, 1.812061248737511e-05, 6.188205287436064e-04, -7.757192690789001e-03, 5.570072680973160e-03, -2.247434983930868e-03, -2.393180926771479e-03, -7.570829131574339e-03, 1.669113948976518e+02, 6.823365721916167e-01, 1.813866781021379e+02, -1.092626958417188e-05, 1.068429529744863e+00, 1.068429529744863e+00, 4.537801493870695e+05, 4.293800200672307e-04, 2.181224343773280e-03, 5.714077816095028e+02, 3.982742856089000e+05, 4.904092218720226e-04, -1.308471655509503e-01, -5.413388265516121e-02, -9.493369576645798e-02, -9.185291788460785e-02, -8.102337705810615e-02, -8.102337705810615e-02, -1.049820625988921e-01, 3.505492206181459e-03, -7.868630951580097e-03, -1.872993437353763e-02, -1.302372758363127e-02, -3.039891790657101e-02, -3.969408623283510e-03, 5.984252215208523e+00, 2.606719051968250e-01, 4.129688692982135e-01, 1.588092607315247e-01, 1.588092607315248e-01, 8.398176330555085e-02, 8.705655489388542e-02, 1.674676278181657e-01, 8.551356904305567e-02, 3.507683307835155e+02, 7.647164880489058e-01, 2.817095771399164e-03, 3.640690229188413e-05, 3.613002204123329e-04, 9.515304583178391e-01, 5.945102572301973e-04, 5.945102575746293e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.133013744976121e-04, 1.133100300438726e-04, 1.133474241818037e-04, 1.132066305218383e-04, 1.133059372432120e-04, 1.133059372432120e-04, -3.420936929284545e-03, -3.420322108234068e-03, -3.401636802561765e-03, -3.408392822833691e-03, -3.420737900586330e-03, 3.338654828259797e-03, -7.516805008572021e-02, -8.831396187367543e-03, -1.616634494185910e-02, -1.311628773088968e-02, -8.636865982495173e-03, -8.636865982495173e-03, -1.622843501834109e-01, -1.486261111146651e-01, -4.339928485538506e-02, -2.811731380364746e-01, -1.583596805280527e-01, -1.583596805280527e-01, -3.826478279454654e-03, -4.322171441372730e-03, -6.512214418280546e-02, -1.699829971445722e-04, -4.389727303439827e-03, -4.389727303439253e-03, 5.329493607369357e-03, 5.355090922727910e-03, 5.332328196224222e-03, 1.891454557751243e-03, 5.342309491598000e-03, 5.342309491598000e-03, -1.080998779930640e-02, -1.039529739208249e-02, -1.098908431610431e-02, -1.065973620537791e-02, -1.029625693384920e-02, 6.407047128648766e-03, 5.718619244388077e-02, 1.060946041752365e-01, 5.488796295155025e-02, 6.468644874479997e-02, 6.321058015368015e-02, -2.078173541246387e-02, -8.321296261838590e-02, -2.224024255640059e-01, -9.451953408167034e-02, 1.259957484647416e-02, -3.230782278857412e-01, -3.230782278857412e-01, -3.942342908641235e-05, -2.833730564085263e-04, -4.879837416386611e-04, -2.458706056183953e-02, -4.514933467408952e-05, -2.677089472387199e-04, 3.868967871534534e-02, 4.725735301043551e-02, -3.047896212883877e-01, 1.538861660808359e-02, 1.716749335934461e-02, 1.716749335934461e-02, 9.834291247757974e-03, 6.579763487251081e-02, 8.680799653038748e-02, 1.520679226756469e-01, 1.151102015020825e-01, 4.010375669299976e-02, 7.492205841167547e-02, -3.503988578785307e-01, -4.487521311415854e-02, -1.817393909093572e-01, 1.936833952788049e-02, 1.936833952788032e-02, -1.000577820768619e-01, -5.063315758960062e-02, -9.265644323701806e-02, 8.498135200020553e-02, -8.294056571854888e-02, -2.467807958188006e-01, -2.333583606217501e-03, -7.447451521654476e-06, -9.430736855332403e-05, -2.625035016027967e-01, -2.362345630073816e-04, -2.362345630073481e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
