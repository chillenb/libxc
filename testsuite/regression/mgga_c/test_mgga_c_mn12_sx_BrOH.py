
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.957087729233030e-01, -2.957170450868242e-01, -2.957550642415551e-01, -2.956205514281434e-01, -2.957131136535277e-01, -2.957131136535277e-01, 1.766556075492500e-02, 1.762114090862080e-02, 1.631085822136476e-02, 1.719259223403478e-02, 1.765094278829006e-02, 1.765094278829006e-02, -1.211272360563655e-02, -1.142434987810982e-02, 7.632990191768040e-03, 1.775247274791275e-02, -1.185138264813713e-02, -1.185138264813713e-02, 2.932619945884884e-02, 2.847836637852480e-02, -1.806783241700294e-01, -1.546060286576223e-01, 2.897071827870750e-02, 2.897071827870750e-02, -1.187058699733173e-01, -1.230347718373505e-01, -2.935217804257990e-01, -6.523803454732258e-02, -1.219991337120803e-01, -1.219991337120804e-01, -2.677510301153633e-01, -2.689853981345979e-01, -2.678930296750143e-01, -2.688518221660141e-01, -2.683631126181248e-01, -2.683631126181248e-01, 9.391619480447470e-02, 8.567061881294892e-02, 9.915170457799312e-02, 9.266883482751176e-02, 8.145945884600032e-02, 8.145945884600032e-02, -3.691009732935128e-02, -5.413368957324104e-02, -2.740500081428139e-02, -3.863907015009756e-02, -4.601958414577425e-02, -4.601958414577425e-02, -2.609349913364428e-01, -5.468904381423940e-03, -2.474156716185241e-01, -6.140227064772522e-02, -1.618443865578141e-01, -1.618443865578141e-01, -6.323096072732551e-02, -7.086042582817625e-02, -5.525472952753080e-02, -3.209944151988469e-01, -6.545369086422648e-02, -6.545369086422652e-02, -4.010437550743000e-02, -9.328535384392571e-02, -8.075404843298047e-02, -6.653050583397285e-02, -7.420148754027309e-02, -7.420148754027309e-02, -4.091255903394397e-02, -2.859941781974374e-02, -5.263586274869845e-02, -7.785608961749084e-02, -6.363187927225190e-02, -6.363187927225190e-02, -4.546544236910007e-02, 4.431171401103794e-02, 4.475616049299697e-02, 9.430489984922907e-04, 2.564447438074187e-02, 2.564447438074190e-02, -7.781895355110812e-03, -2.879861269013116e-01, -3.132320871165102e-01, -1.745618043575531e-02, -2.593954621572393e-01, -2.593954621572387e-01, -1.351176986078844e-01, -2.250401420879934e-02, -4.015053108437249e-02, -2.529798280638503e-01, -5.690043053661557e-02, -5.690043053661566e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.666243789411517e-01, -7.666292308044624e-01, -7.666563564166876e-01, -7.665776589372333e-01, -7.666268807055120e-01, -7.666268807055120e-01, -3.863911949742754e-01, -3.863963861855931e-01, -3.866064270460712e-01, -3.876397040024397e-01, -3.863862837738885e-01, -3.863862837738885e-01, -1.019916367770762e-01, -1.014654824245641e-01, -6.894888270673118e-02, -8.258379598036023e-02, -1.018198074912216e-01, -1.018198074912216e-01, -3.428339809205794e-02, -4.894711180897870e-02, -8.675096990580980e-02, 1.730773464449849e-01, -3.884013506352953e-02, -3.884013506352953e-02, -1.474019680474047e-01, -1.523096868692985e-01, -2.678443281813718e-01, -8.366882469844823e-02, -1.510562609656403e-01, -1.510562609656410e-01, -4.935267108955202e-01, -4.928238181199209e-01, -4.934629696363810e-01, -4.929162448477196e-01, -4.931606109705798e-01, -4.931606109705798e-01, -3.692733451610956e-01, -3.835549303928940e-01, -3.634579686474091e-01, -3.758579548915478e-01, -3.848269871619959e-01, -3.848269871619959e-01, -1.172831979564408e-01, -1.336033325935373e-01, -1.251615056713769e-01, -4.995848381708097e-02, -1.155302057000155e-01, -1.155302057000155e-01, 3.995100317367934e-02, 1.740510812846738e-01, 5.621355795958206e-02, -1.109654562020214e-01, 1.801811491805368e-01, 1.801811491805368e-01, -8.110516662104729e-02, -9.063990147317205e-02, -7.096349230145102e-02, -2.220589123525340e-01, -8.387605824798236e-02, -8.387605824798230e-02, 7.138957262278300e-02, -5.176275734696187e-03, 3.072593500661512e-02, 5.407236465051059e-02, 4.312614627218950e-02, 4.312614627218950e-02, 7.120456738233966e-02, -1.703487656452569e-01, -1.370604261038543e-01, -1.636655700861322e-01, -1.479061571464091e-01, -1.479061571464092e-01, -9.589863224056365e-02, 3.257045993859751e-02, -9.149192169424936e-02, -1.567671282245552e-01, -1.558627580774347e-01, -1.558627580774347e-01, -1.820649450402505e-01, -2.792658252381478e-01, -2.396323285082443e-01, -1.182140745902156e-01, -1.217197831363511e-02, -1.217197831363295e-02, -1.677285215944289e-01, -2.937433324213370e-02, -5.197034291096982e-02, -1.433588769330646e-02, -7.313630820681861e-02, -7.313630820681878e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.353595018205684e-10, -3.353754149309399e-10, -3.354289220142146e-10, -3.351698207106463e-10, -3.353680259310991e-10, -3.353680259310991e-10, 2.658207389020555e-06, 2.657132819264237e-06, 2.623042438769510e-06, 2.618433415035447e-06, 2.657956767752811e-06, 2.657956767752811e-06, 1.367305141935262e-02, 1.363962971568675e-02, 1.220191958070564e-02, 1.138224783579906e-02, 1.366047174905402e-02, 1.366047174905402e-02, 1.918185214684752e+00, 1.924952744614883e+00, 1.085823723209602e-02, 1.726737903178111e+00, 1.924790179869968e+00, 1.924790179869968e+00, 1.084411514962277e-02, 1.250776006859112e-02, 1.898416952376666e-01, 6.961003596383311e-04, 1.305179088449460e-02, 1.305179088449468e-02, -7.075394171420385e-07, -7.170620073839115e-07, -7.085320342801634e-07, -7.159327427881013e-07, -7.123632347828023e-07, -7.123632347828023e-07, 2.335399369886959e-05, 2.166517153453798e-05, 2.332903967239763e-05, 2.201740782733475e-05, 2.216082404094062e-05, 2.216082404094062e-05, 9.451880603118143e-04, -1.363696928283221e-02, 1.035743527905212e-02, -4.720323622798847e-03, -3.389773302606822e-03, -3.389773302606822e-03, 8.190455184117673e-01, 8.208434974230563e-01, 1.042042163525462e+00, -3.988153922678916e-05, 1.623774025314746e+00, 1.623774025314746e+00, 7.500773307795379e-04, 9.933686200362057e-04, 3.135223841826165e-03, 4.722632858052505e-01, 1.489273338242266e-03, 1.489273337973835e-03, -1.428454890696764e-01, -5.836608254200625e-02, -7.782686731330528e-02, -9.977796030708201e-02, -8.786373494323295e-02, -8.786373494323295e-02, -1.244082279689430e-01, 3.703512475937865e-03, -8.502134289179676e-03, -2.077591899351094e-02, -1.430957825716002e-02, -1.430957825716002e-02, -7.953442505891370e-03, 4.876831455520302e-01, 3.269405145312285e-01, 1.308448906876992e-01, 2.132111458160464e-01, 2.132111458160465e-01, 2.514261534774179e-02, 1.106935110287264e-01, 2.788221182874860e-01, 1.373980090584705e-01, 1.241928215469381e+00, 1.241928215469391e+00, 8.003404496877767e-03, 1.631566070610539e-04, 4.695366846688465e-04, 1.602792409816715e+00, 1.911410180701631e-03, 1.911410181262200e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.399316057140158e-04, 3.399393074285668e-04, 3.399737431364719e-04, 3.398487284077755e-04, 3.399356526409527e-04, 3.399356526409527e-04, 1.863185875606098e-03, 1.863951436126909e-03, 1.887585148423159e-03, 1.889897383065724e-03, 1.863311567387899e-03, 1.863311567387899e-03, -2.743865739036126e-02, -2.746498589038900e-02, -2.814523306701456e-02, -2.569299368379882e-02, -2.744532488906092e-02, -2.744532488906092e-02, -1.771592351707867e-01, -1.671492901996589e-01, -2.813783497946501e-02, -2.773562858921463e-01, -1.744538211360961e-01, -1.744538211360961e-01, -3.826475613873591e-03, -4.322166930362547e-03, -6.509901223389009e-02, -1.699829263155179e-04, -4.389723323019470e-03, -4.389723323018895e-03, 5.320267895235712e-03, 5.345749135751249e-03, 5.323206821422552e-03, 5.342998673365310e-03, 5.332867119477024e-03, 5.332867119477024e-03, 5.336391334987628e-03, 5.814672538627370e-03, 5.208236236109856e-03, 5.602110855720880e-03, 5.811495618091407e-03, 5.811495618091407e-03, 2.942702871861392e-02, 7.067318254340677e-02, 1.430606431192577e-02, 9.002254561394160e-03, 4.122737352308679e-02, 4.122737352308679e-02, -2.242915443817262e-01, -2.237623761994525e-01, -2.453094763365585e-01, 3.316803292431882e-03, -3.214420730788549e-01, -3.214420730788549e-01, -2.338283542380831e-04, -2.833729067363406e-04, -4.879836167832329e-04, -1.033637004066474e-01, -2.677087674257993e-04, -2.677087674257382e-04, -1.740325861161161e-01, -1.107711029629452e-02, -6.915288775979357e-02, -1.161155582004015e-01, -9.266006204796638e-02, -9.266006204796638e-02, -2.807937891161131e-01, 6.163983238711782e-02, 8.072246089566780e-02, 1.432242111843062e-01, 1.078225925493281e-01, 1.078225925493281e-01, 3.559803058238289e-02, -1.269469707827681e-01, -5.787801288889229e-02, 8.123791019956965e-03, -5.889340193624430e-03, -5.889340193624519e-03, 3.976754087503274e-02, -5.062615682103679e-02, -9.258169746397103e-02, 1.507956083794118e-02, -2.459889265536916e-01, -2.459889265536908e-01, -2.333555725569253e-03, -7.447451449522081e-06, -9.430736622523622e-05, -2.615696381781170e-01, -2.362344332504153e-04, -2.362344332503818e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
