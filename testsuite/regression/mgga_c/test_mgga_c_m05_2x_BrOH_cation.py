
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.375829410832685e-02, -9.375818542715268e-02, -9.375566288809717e-02, -9.375719502102083e-02, -9.375668484374648e-02, -9.375668484374648e-02, -8.309243388509290e-02, -8.309445712935172e-02, -8.312651257027855e-02, -8.291516919328167e-02, -8.301954129320019e-02, -8.301954129320019e-02, -4.186984923584602e-02, -4.144646346838012e-02, -3.019779007082692e-02, -3.101680238138376e-02, -3.259748208559970e-02, -3.259748208559970e-02, -2.067082940279895e-03, -3.557920778872980e-03, -4.965635583856386e-02, 3.722287201674110e-02, 2.817034591956045e-02, 2.817034591956047e-02, 1.655894180125651e-02, 1.735887152829289e-02, 6.626971803792883e-02, 1.077990184140762e-02, 7.589042796482085e-03, 7.589042796482093e-03, -6.643074317699298e-02, -6.641248626003793e-02, -6.642375237503700e-02, -6.640788050169261e-02, -6.642466865593998e-02, -6.642466865593998e-02, -4.752852357871229e-02, -4.836767856476226e-02, -4.671564434132040e-02, -4.754723276554440e-02, -4.842102860730842e-02, -4.842102860730842e-02, -4.462000770056272e-02, -4.989462151645001e-02, -4.546908074785610e-02, -5.045582678509167e-02, -4.499429817353064e-02, -4.499429817353062e-02, 7.197853374078296e-02, 1.814128373984034e-02, 7.465668631641384e-02, -7.529932149487951e-02, 4.843686065571438e-02, 4.843686065571437e-02, 9.705309328388135e-03, 1.128725632974398e-02, 8.261143610291441e-03, 7.768739979446604e-02, 8.328277669841785e-03, 8.328277669841776e-03, -4.382761947755325e-02, -3.845306106258657e-02, -3.931899204445090e-02, -4.061800977243291e-02, -3.987825707980709e-02, -3.987825707980710e-02, -5.317794908347382e-02, -3.355924250528221e-02, -3.572646508585881e-02, -3.789938871605431e-02, -3.695236449968807e-02, -3.695236449968808e-02, -5.167827781369758e-02, -1.847163811610579e-04, -1.190640343890393e-02, -2.887710601498569e-02, -2.055468270063979e-02, -2.055468270063979e-02, -3.354412024350521e-02, 6.360454887607718e-02, 7.561978820789041e-02, -3.279610111135406e-02, 6.956782669496439e-02, 6.956782669496439e-02, 2.542585218822526e-02, 4.021254748174074e-03, 5.949688111899877e-03, 6.927662516179259e-02, 7.973126906673586e-03, 7.973126906673593e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.545854016227452e-01, -1.545806602708159e-01, -1.545848478593432e-01, -1.545803765871967e-01, -1.545837631573639e-01, -1.545778005758040e-01, -1.545884332507257e-01, -1.545854860986721e-01, -1.545850414275182e-01, -1.545823915105646e-01, -1.545850414275182e-01, -1.545823915105646e-01, -1.462790785330166e-01, -1.462109849611531e-01, -1.462548108528466e-01, -1.461858233857199e-01, -1.456812732987671e-01, -1.455618775908484e-01, -1.463936480693222e-01, -1.463045659578947e-01, -1.463728905123784e-01, -1.457590416615025e-01, -1.463728905123784e-01, -1.457590416615025e-01, -1.345883609203873e-01, -1.326145783730973e-01, -1.351157138670407e-01, -1.329229184728871e-01, -1.387903255458480e-01, -1.368632006071646e-01, -1.344921982067807e-01, -1.343209033925030e-01, -1.297647317557375e-01, -1.166738103153995e-01, -1.297647317557375e-01, -1.166738103153995e-01, -5.487379197745865e-02, -3.491458330180581e-02, -5.488980911701211e-02, -3.370141632141214e-02, -1.629140183113437e-01, -1.401771011435207e-01, -6.084533069370063e-02, -5.103076145562029e-02, 2.924151098419222e-02, -3.448069058897060e-01, 2.924151098419226e-02, -3.448069058897061e-01, 3.359747326516278e-02, 2.901760347269889e-02, 3.541150034857751e-02, 2.999560003303659e-02, 1.003921012561363e-01, 8.994185043058452e-02, 1.927660407367039e-02, 2.002679661302068e-02, 1.309997048138484e-02, 4.262487628750624e-02, 1.309997048138483e-02, 4.262487628750627e-02, -1.128551067095151e-01, -1.129171180604844e-01, -1.127717433237911e-01, -1.128361294746114e-01, -1.128538368351850e-01, -1.129164807462365e-01, -1.127817516776517e-01, -1.128434329044377e-01, -1.128103964701312e-01, -1.128758810791416e-01, -1.128103964701312e-01, -1.128758810791416e-01, -9.232707633077003e-02, -9.147036734413563e-02, -8.911606454965358e-02, -8.845054620437239e-02, -8.639133173847094e-02, -8.740363090238901e-02, -8.335847634216262e-02, -8.425367037609904e-02, -9.469728931220854e-02, -9.042639066652329e-02, -9.469728931220854e-02, -9.042639066652329e-02, -7.177460250197841e-02, -7.174436703672057e-02, -5.760358076952563e-02, -5.812635286293933e-02, -8.577997067056629e-02, -7.490378556407142e-02, -5.247813916179139e-02, -4.816348613756722e-02, -6.374014570868940e-02, -7.275010741004646e-02, -6.374014570868942e-02, -7.275010741004639e-02, 7.883559561532645e-03, 1.238399150464617e-02, -6.008043837380913e-02, -5.757763714589664e-02, 1.522459644839009e-02, 2.900417764228641e-02, -8.238246637168969e-02, -8.251875705596233e-02, -5.874719097152459e-02, -9.754192708289327e-03, -5.874719097152458e-02, -9.754192708289307e-03, 1.667959099164667e-02, 1.524674193700214e-02, 1.978728068779882e-02, 1.913597591649716e-02, 1.618495519317970e-02, 1.415974232102602e-02, 7.169271912262060e-02, 7.031017062988534e-02, 2.587012309853777e-02, 1.229802102434643e-02, 2.587012309853786e-02, 1.229802102434643e-02, -6.677958923391021e-02, -6.646399140810062e-02, -5.716604033410045e-02, -5.679813934816942e-02, -5.905684646418195e-02, -5.875210957293288e-02, -6.182618860734650e-02, -6.150287622566258e-02, -6.029442704518179e-02, -5.998535093905734e-02, -6.029442704518179e-02, -5.998535093905735e-02, -7.251228832782730e-02, -7.203973752196792e-02, -5.492361976678201e-02, -5.463703400638824e-02, -6.190830082057607e-02, -6.146597882638941e-02, -5.888855048481954e-02, -5.837951176751824e-02, -6.207600611890268e-02, -6.150770219987991e-02, -6.207600611890268e-02, -6.150770219987992e-02, -5.671236175969017e-02, -5.734349419047849e-02, -5.275120707102200e-02, -5.016028376116805e-02, -4.893114492309351e-02, -4.624462938252349e-02, -7.577370195941079e-02, -7.568789197379083e-02, -5.478348321107614e-02, -5.516830082725886e-02, -5.478348321107622e-02, -5.516830082725876e-02, -7.242766821786387e-02, -7.008964129887299e-02, 9.580875008352510e-02, 9.452170387553803e-02, 9.599244063797102e-02, 9.163781076166384e-02, -7.490726572350631e-02, -6.619429844393085e-02, 1.774519123234805e-02, 3.891226656821371e-02, 1.774519123234823e-02, 3.891226656821371e-02, 4.396998078330649e-02, 4.046989107043539e-02, 6.024971276002599e-03, 6.060345598263171e-03, 1.224527903870735e-02, 1.059030503516235e-02, 3.843001324353318e-02, 4.036711186137717e-02, 2.328205073503013e-02, 1.188330604287322e-02, 2.328205073503007e-02, 1.188330604287322e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.010738194338881e-10, 0.000000000000000e+00, 8.012619611545994e-10, 8.010900430551525e-10, 0.000000000000000e+00, 8.012730812766479e-10, 8.011246529913943e-10, 0.000000000000000e+00, 8.013307656026401e-10, 8.009519485107398e-10, 0.000000000000000e+00, 8.011002383300388e-10, 8.010928859456749e-10, 0.000000000000000e+00, 8.011746416598264e-10, 8.010928859456749e-10, 0.000000000000000e+00, 8.011746416598264e-10, 2.714745277003142e-06, 0.000000000000000e+00, 2.713950493370149e-06, 2.714636128409981e-06, 0.000000000000000e+00, 2.713762342326069e-06, 2.711145349264153e-06, 0.000000000000000e+00, 2.710507301501827e-06, 2.718488427108708e-06, 0.000000000000000e+00, 2.717459297846203e-06, 2.716762053201103e-06, 0.000000000000000e+00, 2.714687475298353e-06, 2.716762053201103e-06, 0.000000000000000e+00, 2.714687475298353e-06, 6.448343618184795e-03, 0.000000000000000e+00, 6.536997923000466e-03, 6.427669232337903e-03, 0.000000000000000e+00, 6.551930016562104e-03, 6.116005053973451e-03, 0.000000000000000e+00, 5.629906272798827e-03, 5.419415337548165e-03, 0.000000000000000e+00, 5.525286151918198e-03, 7.020113168802668e-03, 0.000000000000000e+00, 2.708932872756836e-03, 7.020113168802668e-03, 0.000000000000000e+00, 2.708932872756836e-03, -2.609458707060765e-01, 0.000000000000000e+00, -5.637968646298338e-01, -2.305187508170512e-01, 0.000000000000000e+00, -5.354269349733217e-01, 4.022827572390217e-03, 0.000000000000000e+00, 3.370371049029253e-03, 1.028873723425475e+00, 0.000000000000000e+00, 2.720202043033418e-01, -1.052797328618296e+00, 0.000000000000000e+00, 2.973301865118252e+01, -1.052797328618296e+00, 0.000000000000000e+00, 2.973301865118255e+01, -8.186136563113014e+03, 0.000000000000000e+00, -7.196892420456716e+03, -7.510832581173457e+03, 0.000000000000000e+00, -6.519225467966432e+03, -7.777365037375469e+01, 0.000000000000000e+00, -7.715055913903851e+01, -2.133100413732017e+04, 0.000000000000000e+00, -2.222720205424511e+04, -1.032497981306377e+04, 0.000000000000000e+00, -4.516497819018652e+04, -1.032497981306377e+04, 0.000000000000000e+00, -4.516497819018658e+04, 9.777449314347729e-07, 0.000000000000000e+00, 9.790009325527661e-07, 9.834650194566315e-07, 0.000000000000000e+00, 9.845262983510098e-07, 9.782162010424931e-07, 0.000000000000000e+00, 9.792945661255113e-07, 9.831091276181703e-07, 0.000000000000000e+00, 9.843195011175118e-07, 9.805580359158486e-07, 0.000000000000000e+00, 9.817497161065006e-07, 9.805580359158486e-07, 0.000000000000000e+00, 9.817497161065006e-07, 3.187807285213770e-06, 0.000000000000000e+00, 2.941537867073865e-06, 2.765390852886577e-06, 0.000000000000000e+00, 2.555689956807711e-06, -2.074979660867861e-08, 0.000000000000000e+00, 8.185267130198108e-07, -4.334562644504102e-07, 0.000000000000000e+00, 3.649897542615667e-07, 5.373403180402379e-06, 0.000000000000000e+00, 2.890368423509225e-06, 5.373403180402379e-06, 0.000000000000000e+00, 2.890368423509225e-06, 1.256942783550119e-02, 0.000000000000000e+00, 1.285167665345507e-02, 8.689610840114763e-03, 0.000000000000000e+00, 9.488127047552293e-03, 1.771164316483262e-02, 0.000000000000000e+00, 1.554403110543999e-02, 6.029379759159632e-04, 0.000000000000000e+00, 2.690878383427444e-03, 1.142908519377750e-02, 0.000000000000000e+00, 1.298452743011704e-02, 1.142908519377751e-02, 0.000000000000000e+00, 1.298452743011705e-02, -5.394915419247012e-02, 0.000000000000000e+00, -4.043494056073847e-01, -9.919057898775108e-02, 0.000000000000000e+00, -1.156902073945948e-01, 8.888041879322524e-01, 0.000000000000000e+00, -2.098154635456838e+00, 2.769664360805764e-05, 0.000000000000000e+00, 2.790640548151829e-05, 2.045018223566670e+00, 0.000000000000000e+00, -1.145651225341827e+00, 2.045018223566669e+00, 0.000000000000000e+00, -1.145651225341829e+00, -3.374451609820531e+04, 0.000000000000000e+00, -2.982170840460687e+04, -2.256243606352128e+04, 0.000000000000000e+00, -2.050856335856704e+04, -1.129089520109666e+05, 0.000000000000000e+00, -1.047724287516680e+05, -1.167362666125508e+01, 0.000000000000000e+00, -1.434784000221094e+01, -4.646246432480042e+04, 0.000000000000000e+00, -4.234755588491213e+04, -4.646246432480136e+04, 0.000000000000000e+00, -4.234755588491216e+04, 1.138547837593411e-01, 0.000000000000000e+00, 1.158564298970449e-01, 4.406364805938441e-02, 0.000000000000000e+00, 4.437947198183866e-02, 5.541368478959638e-02, 0.000000000000000e+00, 5.612804100865295e-02, 7.249169067450222e-02, 0.000000000000000e+00, 7.332495714652196e-02, 6.273958670873241e-02, 0.000000000000000e+00, 6.352044628073052e-02, 6.273958670873241e-02, 0.000000000000000e+00, 6.352044628073049e-02, 1.595549694056775e-01, 0.000000000000000e+00, 1.605891354357850e-01, 9.904673718806715e-03, 0.000000000000000e+00, 1.022248979713631e-02, 2.181828402843912e-02, 0.000000000000000e+00, 2.204520035232535e-02, 3.065123647160533e-02, 0.000000000000000e+00, 3.038956964482477e-02, 2.701674318812486e-02, 0.000000000000000e+00, 2.688729652483757e-02, 2.701674318812486e-02, 0.000000000000000e+00, 2.688729652483756e-02, 4.387645756930587e-03, 0.000000000000000e+00, 5.184461746153059e-03, -1.400058941397388e-01, 0.000000000000000e+00, -1.452230117069036e-01, -6.647117463620844e-02, 0.000000000000000e+00, -6.549509876744786e-02, 7.348602992298944e-02, 0.000000000000000e+00, 7.384740538491433e-02, 6.551642359624087e-03, 0.000000000000000e+00, 8.472022308052782e-03, 6.551642359624307e-03, 0.000000000000000e+00, 8.472022308053155e-03, 2.124682127503847e-02, 0.000000000000000e+00, 2.102557822299979e-02, -9.210238739025819e+01, 0.000000000000000e+00, -9.027907993350793e+01, -3.087784343134064e+01, 0.000000000000000e+00, -3.266296464263603e+01, 1.369238445038106e-01, 0.000000000000000e+00, 1.242676898177021e-01, 4.130393264095861e-01, 0.000000000000000e+00, -6.231361094160047e+00, 4.130393264095885e-01, 0.000000000000000e+00, -6.231361094160041e+00, -2.551828680295381e+03, 0.000000000000000e+00, -2.348455061452754e+03, -3.928456097221274e+05, 0.000000000000000e+00, -3.900977287182265e+05, -1.464470627807411e+05, 0.000000000000000e+00, -1.322896089011354e+05, -4.956364022478681e+00, 0.000000000000000e+00, -7.917585474542582e+00, -8.405311318977087e+04, 0.000000000000000e+00, -5.200338735932122e+04, -8.405311318977003e+04, 0.000000000000000e+00, -5.200338735932150e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.043434919698631e-05, -6.046394330682261e-05, -6.043647832471558e-05, -6.046548632363550e-05, -6.044407977173718e-05, -6.047616178184956e-05, -6.042030096439245e-05, -6.044575780088929e-05, -6.043569140161746e-05, -6.045846817323238e-05, -6.043569140161746e-05, -6.045846817323238e-05, -2.160494480020990e-04, -2.158631309193537e-04, -2.161754834063876e-04, -2.159367004903035e-04, -2.185364375425042e-04, -2.189304831111459e-04, -2.180466738323250e-04, -2.179594387710256e-04, -2.158380105000937e-04, -2.201114201370999e-04, -2.158380105000937e-04, -2.201114201370999e-04, -3.389812523300586e-04, -4.745248816109296e-04, -2.922442689894452e-04, -4.584465326846423e-04, 3.880533500311254e-04, 6.876934042288423e-04, 5.893831752719816e-04, 4.949660288049218e-04, -6.301414971155967e-04, 2.559587996565076e-03, -6.301414971155967e-04, 2.559587996565076e-03, 6.152232016619704e-02, 6.786434780834920e-02, 5.927892169540481e-02, 6.553678819689208e-02, -8.952880541534327e-05, -2.202202010444172e-04, 4.224428925648823e-02, 5.298710025942422e-02, 5.592420764754173e-02, 2.968072421089361e-02, 5.592420764754173e-02, 2.968072421089361e-02, 1.289756663069402e-02, 1.366510675625252e-02, 1.352761165971230e-02, 1.451392925520210e-02, 2.931792690280640e-02, 3.167119995868058e-02, 6.486723792938477e-03, 6.550833223381577e-03, 1.117813888269657e-02, 7.510052779961928e-03, 1.117813888269656e-02, 7.510052779961939e-03, -1.147091903341646e-03, -1.148137976030811e-03, -1.154549183919696e-03, -1.155356592511812e-03, -1.147817845466487e-03, -1.148611131955699e-03, -1.154206609119436e-03, -1.155158355081757e-03, -1.150667267090272e-03, -1.151717853820572e-03, -1.150667267090272e-03, -1.151717853820572e-03, 5.114104613209210e-04, 5.160246096271892e-04, 4.772097810812117e-04, 4.819564624768494e-04, 6.605118921336827e-04, 6.214268358270328e-04, 6.366197108422170e-04, 5.968808633131649e-04, 3.824831905662794e-04, 4.829588280577403e-04, 3.824831905662794e-04, 4.829588280577403e-04, -1.061592058237650e-02, -1.107508030079133e-02, -7.987165803544161e-03, -8.396831371569930e-03, -5.493201536672266e-03, -7.432985581664740e-03, -3.502816643322382e-03, -4.592090684761154e-03, -1.305006599236309e-02, -1.095392328412294e-02, -1.305006599236309e-02, -1.095392328412293e-02, 4.356828577669258e-02, 4.287164399862901e-02, 5.145946368225648e-02, 5.090829407002781e-02, 4.047580076537180e-02, 4.399317178550358e-02, -4.712921319096103e-04, -4.716026987626751e-04, 5.416428534132499e-02, 6.545989281541086e-02, 5.416428534132501e-02, 6.545989281541090e-02, 3.118755130105480e-03, 3.188687870092285e-03, 5.417306613229746e-03, 5.032778171068183e-03, 1.276429876578270e-02, 1.395531467650985e-02, 3.726268873921865e-02, 4.318010431492547e-02, 3.471706090140940e-03, 1.457344966942937e-02, 3.471706090140947e-03, 1.457344966942938e-02, -9.302290425870804e-02, -9.558748160882247e-02, -5.874205666216686e-02, -5.967460100815822e-02, -6.682355811292542e-02, -6.823188228948682e-02, -7.676450711075965e-02, -7.845604850379553e-02, -7.134368646477447e-02, -7.289373067653730e-02, -7.134368646477447e-02, -7.289373067653729e-02, -3.963178232275938e-02, -4.149895576478258e-02, -5.833086609211125e-03, -6.288303048909697e-03, -2.018387233694658e-02, -2.075818871146462e-02, -3.436088220596995e-02, -3.442703257560913e-02, -2.745006105574936e-02, -2.778108670388391e-02, -2.745006105574935e-02, -2.778108670388390e-02, -5.430071521122450e-03, -5.888393478158574e-03, 4.567009643499485e-02, 4.532929712000985e-02, 3.221450895084203e-02, 3.152987072119215e-02, -4.471203023478022e-04, -7.398253759886851e-04, 1.666846087029143e-02, 1.643977969504436e-02, 1.666846087029145e-02, 1.643977969504430e-02, -3.442104527252126e-03, -4.241119930668876e-03, 3.199298757798259e-02, 3.145637462964998e-02, 3.238805730505678e-02, 3.384332471981204e-02, -9.201693424400758e-03, -1.362664284306052e-02, 4.965856546822104e-02, 5.678138539019041e-02, 4.965856546822104e-02, 5.678138539019034e-02, 9.276547994480331e-03, 9.300669395736609e-03, 1.039727867383749e-03, 7.793672033003667e-04, 6.923706835132170e-03, 7.503236768277310e-03, 5.348437671045146e-02, 6.094451089776719e-02, 5.955905385208471e-03, 1.377866865823440e-02, 5.955905385208469e-03, 1.377866865823443e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
