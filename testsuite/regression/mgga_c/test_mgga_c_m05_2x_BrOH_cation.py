
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504594447e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.280655740385618e-01, -1.280658332179229e-01, -8.970845684980316e-02, -8.835351020043758e-02, -5.892599228292030e-02, -5.899252565398509e-02, -5.896713019946289e-02, -5.896825422755977e-02, -8.833305924469088e-02, -6.701332647003581e-02, -5.174969712098278e-02, -1.890003274368137e-02, -5.077820894559193e-02, -6.628241523783371e-02, -2.009447516151269e-02, -2.642750501914157e-02, -2.706474389014700e-02, -4.502403169700502e-02, 3.797602790912717e-02, 3.367501980362581e-02, -9.994297543711941e-03, 1.647816936317295e-02, 1.619294542519237e-02, 5.319708589481503e-02, 1.009937128619662e-02, 7.144920815671177e-03, 7.144920815671179e-03, -6.613630790687212e-02, -6.611981137943801e-02, -6.613533872925287e-02, -6.612078803556268e-02, -9.463904585708080e-02, -9.461514736484475e-02, -4.823096744418947e-02, -4.888305317416213e-02, -4.768389435766460e-02, -4.831185582096877e-02, -7.557553115148702e-02, -4.884095851640931e-02, -5.058727074515108e-02, -3.631897618542188e-02, -3.381154975614911e-02, -3.503187234554545e-02, -4.924587311519734e-02, -3.568499770124054e-02, 7.057277424950414e-02, -1.788373355048314e-02, 7.283443423161570e-02, -5.222886064983985e-02, 4.833908121274698e-02, 4.833908121274698e-02, 7.440773698396959e-03, 9.892438436103048e-03, 7.656680875432249e-03, 5.262232415984693e-02, 7.590954524460721e-03, 7.590954524460711e-03, -3.363102894631315e-02, -3.411224581499241e-02, -6.383563580100113e-02, -4.876689408045007e-02, -6.385539257642651e-02, -4.879751101518321e-02, -3.337598343103735e-02, -4.774393696899139e-02, -4.816977123280027e-02, -3.411377160735161e-02, -3.411421960758635e-02, -4.827003876249429e-02, -5.259895038008432e-02, -9.526620910528534e-04, -3.483365978045597e-02, -4.144870990933935e-02, -2.196839663759804e-02, -3.875378269963254e-02, -3.130636020991476e-02, -1.432337785401933e-02, 7.199857359355477e-02, -2.781814527762491e-02, 6.787155482049281e-02, 6.787155482049280e-02, -5.037446550363285e-03, 2.837468474117899e-03, -1.374982125405463e-03, -2.268013163367492e-02, 7.318335560826844e-03, 6.462124753111912e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753467401e-01, -1.747373592460488e-01, -1.747369289286906e-01, -1.747375762850792e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.789547294800330e-01, -1.424699044153789e-01, -1.789539877325786e-01, -1.424742686716928e-01, -1.530857181580828e-01, -1.530911520907012e-01, -4.968158452462468e-02, -1.253540081370639e-01, -7.529352028014123e-02, -7.527171174594095e-02, -7.550198564393540e-02, -7.557551745780255e-02, -7.543846306271250e-02, -7.543468485622981e-02, -7.512400959690127e-02, -7.576822138695832e-02, -1.253902693182547e-01, -5.027621457749633e-02, -7.534022876491570e-02, -7.481054072998010e-02, -7.665211395664814e-02, -1.792876011659947e-02, -5.259647471149411e-02, -5.625832475447463e-02, -2.215485999487360e-02, -7.477433672785305e-02, -7.037457509512338e-02, -7.906556863981586e-02, -3.817309484579453e-02, -7.292178369428003e-02, -4.353902478480350e-02, -1.964367959801911e-02, -4.472215522225013e-02, -1.619907491952836e-02, -9.317868782326348e-02, -6.681370083133349e-02, -5.374945102427775e-02, -3.158593240825573e-02, 5.190089184911819e-02, -3.233833723731659e-01, 2.721019979115091e-02, -6.187792206979057e-02, 3.356860949729667e-02, 2.900648075605101e-02, 2.290582692161700e-02, 2.919998902116653e-02, 6.954168419588151e-02, 4.009727377542949e-02, 1.907573061392530e-02, 1.985901112297411e-02, 1.302001227147241e-02, 4.233240895806819e-02, 1.302001227147240e-02, 4.233240895806809e-02, -1.130435918516049e-01, -1.130978341414112e-01, -1.129634256415601e-01, -1.130196145500115e-01, -1.130383393944260e-01, -1.130939697196729e-01, -1.129690459622223e-01, -1.130235476936661e-01, -1.344816444599184e-01, -1.081249052429265e-01, -1.080730358804400e-01, -1.345392756149463e-01, -5.961795970273352e-02, -5.986510386647802e-02, -6.057646575254579e-02, -6.082772423163424e-02, -5.898201230153697e-02, -5.920505839491328e-02, -5.971636412327025e-02, -5.998724183225655e-02, -3.436159756980840e-02, -1.088263083628781e-01, -6.059687132288775e-02, -6.069487742716608e-02, -4.697084517335842e-02, -7.447417148014755e-02, -6.335377304709292e-02, -6.354208317793793e-02, -4.628077992747276e-02, -4.765857698201712e-02, -5.559113680327531e-02, -5.514150795903815e-02, -4.912724326063816e-02, -7.808351636583409e-02, -5.632002702151286e-02, -5.977526881989642e-02, 2.689031092880957e-02, 2.917315812064257e-02, -3.160235002361644e-02, -7.877854172542116e-02, 3.385539438505756e-02, 4.707281119964768e-02, -8.499199490530235e-02, -8.511072087800542e-02, -5.021843460463892e-02, 1.495629350452880e-03, -5.021843460463885e-02, 1.495629350452638e-03, 9.919338229219136e-03, 1.471158774046787e-02, 1.942716870201734e-02, 1.873920340273862e-02, 1.602983835141927e-02, 1.398620082311170e-02, -4.338094633502203e-02, 5.740757463903979e-02, 2.526661737623018e-02, 1.226558995555208e-02, 2.526661737623010e-02, 1.226558995555206e-02, -5.800358208252327e-02, -5.762553315630960e-02, -5.757955702518321e-02, -5.706064220657486e-02, -7.198832468635549e-02, -7.148872356177728e-02, -7.255040590540777e-02, -5.610075544882509e-02, -7.200798844943504e-02, -7.151058106231506e-02, -7.258262261990039e-02, -5.591177837114076e-02, -5.703841032830639e-02, -5.671954005966177e-02, -3.820452405626670e-02, -6.978385091496021e-02, -4.951073575292799e-02, -7.046733820583156e-02, -5.994424441867241e-02, -5.953772600107765e-02, -5.883063539820598e-02, -5.851216821931800e-02, -5.371458789210269e-02, -7.074897093802612e-02, -5.859408750488686e-02, -7.693602670149767e-02, -5.066164092184981e-02, -4.784355481788042e-02, -5.345631574635321e-02, -1.583208137096698e-02, -6.194655043082811e-02, -1.864204845326811e-02, -3.230402953925952e-02, -3.246173260479250e-02, -1.360579476923126e-02, -5.784543470724719e-02, -4.190816836174643e-02, -4.239990500516890e-02, -1.773472996354030e-02, -1.753120798266076e-02, 1.015576919111115e-01, 9.649848817113862e-02, -3.628553736266935e-02, -3.998673493931753e-02, 3.197823347979487e-02, 5.063557450182418e-02, 3.197823347979509e-02, 5.063557450182442e-02, -6.593851617928386e-03, -6.257235187311729e-03, 5.700998589620990e-03, 5.670083947519843e-03, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635372e-02, -2.688551334493897e-02, 2.277622910568493e-02, 1.185307580414569e-02, 2.268468729154556e-02, 4.383398435336056e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.279545190077858e-09, 0.000000000000000e+00, 4.279821869815151e-09, 4.279515622819452e-09, 0.000000000000000e+00, 4.279800032973312e-09, 4.279392594777082e-09, 0.000000000000000e+00, 4.279633578747000e-09, 4.333760457402746e-09, 0.000000000000000e+00, 7.518399699758958e-10, 4.333543166253870e-09, 0.000000000000000e+00, 7.519550407178690e-10, 7.913087544524098e-10, 0.000000000000000e+00, 7.914330718695738e-10, -5.671826398838130e-07, 0.000000000000000e+00, 2.179301030428796e-05, -1.702989980585174e-07, 0.000000000000000e+00, -1.714534439074545e-07, -1.552223658414848e-07, 0.000000000000000e+00, -1.517256286118084e-07, -1.604786511081870e-07, 0.000000000000000e+00, -1.604580122157327e-07, -1.762760493621019e-07, 0.000000000000000e+00, -1.431592998725843e-07, 2.180309891815463e-05, 0.000000000000000e+00, -5.404102196406042e-07, 4.522735439571026e-02, 0.000000000000000e+00, 4.449090732129529e-02, 4.823702170450201e-02, 0.000000000000000e+00, -2.901213401300176e-03, -1.909275363295304e-03, 0.000000000000000e+00, -1.906690816032536e-03, -3.058738375500248e-03, 0.000000000000000e+00, 5.178638167707626e-02, 4.314775127149682e-02, 0.000000000000000e+00, 5.720440785331245e-02, -1.816713664224203e-03, 0.000000000000000e+00, -1.851995479148608e-03, 2.530733785161991e+01, 0.000000000000000e+00, -1.034518035171321e+00, 2.392896360844116e+01, 0.000000000000000e+00, -1.023637059542958e+00, -6.960369513623443e-04, 0.000000000000000e+00, 2.166212866636443e-02, -7.176408022155971e-02, 0.000000000000000e+00, -5.664289150765954e-01, -1.361623899228659e+00, 0.000000000000000e+00, 1.864406174366215e+01, -1.317834563975202e+00, 0.000000000000000e+00, 3.525228137760583e+02, -8.187503898362801e+03, 0.000000000000000e+00, -7.197709381123996e+03, 4.425850658138754e+07, 0.000000000000000e+00, -6.366153460526330e+03, 2.936690914036732e+04, 0.000000000000000e+00, -3.663729230633286e+01, -2.134231946543180e+04, 0.000000000000000e+00, -2.223980258141634e+04, -1.032756421797860e+04, 0.000000000000000e+00, -4.537130401314137e+04, -1.032756421797860e+04, 0.000000000000000e+00, -4.537130401314123e+04, 9.804141543669983e-07, 0.000000000000000e+00, 9.815363346505176e-07, 9.861909601386261e-07, 0.000000000000000e+00, 9.871117234116103e-07, 9.808284938910097e-07, 0.000000000000000e+00, 9.817865652005163e-07, 9.857707233573293e-07, 0.000000000000000e+00, 9.868581060869919e-07, 4.121031283048413e-06, 0.000000000000000e+00, 9.575409207384469e-07, 9.565709332510299e-07, 0.000000000000000e+00, 4.125629683822207e-06, -8.906605781885516e-06, 0.000000000000000e+00, -8.766612818883574e-06, -7.623141746501305e-06, 0.000000000000000e+00, -7.523994667246604e-06, -1.003679107036290e-05, 0.000000000000000e+00, -9.528535169276275e-06, -8.950342986290830e-06, 0.000000000000000e+00, -8.411653016330025e-06, -1.342129094953907e-05, 0.000000000000000e+00, 3.187020075293833e-04, -7.244668041746963e-06, 0.000000000000000e+00, -8.068337382504393e-06, 5.153692914896181e-03, 0.000000000000000e+00, 9.613656601520935e-02, 1.376974009712585e-02, 0.000000000000000e+00, 1.441552769260195e-02, -7.039795000575726e-04, 0.000000000000000e+00, 3.248915368587508e-03, 7.079077308203327e-03, 0.000000000000000e+00, 9.523405854961796e-03, 7.578012947998554e-03, 0.000000000000000e+00, 1.001645435534302e-01, 8.650343198206912e-03, 0.000000000000000e+00, 7.482174353466563e-03, -2.126082350114726e+00, 0.000000000000000e+00, -2.385973932759179e+00, 2.340274330261263e+01, 0.000000000000000e+00, -2.791225167214509e-01, -2.261565069123557e+00, 0.000000000000000e+00, -4.257748144481253e+00, 4.023453922048010e-05, 0.000000000000000e+00, 4.039117472807313e-05, 7.631252367042302e-01, 0.000000000000000e+00, -2.108418658724390e+00, 7.631252367042298e-01, 0.000000000000000e+00, -2.108418658724390e+00, 1.487638422719672e+09, 0.000000000000000e+00, -2.978067961184054e+04, -2.259168382349360e+04, 0.000000000000000e+00, -2.053474373559465e+04, -1.130324529861066e+05, 0.000000000000000e+00, -1.048548933139090e+05, 9.724991548401629e+00, 0.000000000000000e+00, 3.124421819634824e+03, -4.681223385139603e+04, 0.000000000000000e+00, -4.237506194991900e+04, -4.681223385139598e+04, 0.000000000000000e+00, -4.237506194991895e+04, 9.053444176498818e-02, 0.000000000000000e+00, 9.199970739010133e-02, 4.610000429416002e-02, 0.000000000000000e+00, 4.617361033060055e-02, 1.621395296145391e-01, 0.000000000000000e+00, 1.612966151847129e-01, 1.788894913944994e-01, 0.000000000000000e+00, 6.576824020195213e-02, 1.694994654029734e-01, 0.000000000000000e+00, 1.686696437071047e-01, 1.699190957763545e-01, 0.000000000000000e+00, 5.938100216835651e-02, 8.878389612482608e-02, 0.000000000000000e+00, 9.042866570546113e-02, 3.082275743566101e-03, 0.000000000000000e+00, 2.071712280131411e-01, 1.604000221725687e-02, 0.000000000000000e+00, 1.760103758321720e-01, 3.183926539539251e-02, 0.000000000000000e+00, 3.165432599001274e-02, 2.482523815521643e-02, 0.000000000000000e+00, 2.488343910327872e-02, 2.298978431503665e-02, 0.000000000000000e+00, 1.658484373702290e-01, 7.932483591968770e-03, 0.000000000000000e+00, 5.643739438076237e-02, -1.748323425367113e-01, 0.000000000000000e+00, -1.812700701162005e-01, 3.566339106024380e+00, 0.000000000000000e+00, -1.979105982319612e-01, 1.008754245762533e+00, 0.000000000000000e+00, -4.775140781259743e-02, -7.352552100868796e-02, 0.000000000000000e+00, -7.297937383053489e-02, -1.146083326466453e-01, 0.000000000000000e+00, 1.867998750893291e+00, -1.595237293906530e-03, 0.000000000000000e+00, 3.905505647497898e-04, 3.057388653070783e+04, 0.000000000000000e+00, 2.971056797806572e+04, -3.588335756777422e+01, 0.000000000000000e+00, -3.659788419298799e+01, -1.430403799648523e-02, 0.000000000000000e+00, 1.963616367888943e-02, -3.970218662069176e+00, 0.000000000000000e+00, -9.342081284424742e+00, -3.970218662069164e+00, 0.000000000000000e+00, -9.342081284424728e+00, 1.151853652570247e+07, 0.000000000000000e+00, 9.956464899307568e+06, -3.931465985134101e+05, 0.000000000000000e+00, -3.904139944311727e+05, 6.203506175914533e+09, 0.000000000000000e+00, 4.845704086601493e+09, 1.418095662088554e+03, 0.000000000000000e+00, 1.323705763675124e+03, -8.445653312421097e+04, 0.000000000000000e+00, -5.204332544892265e+04, -8.391942287403057e+04, 0.000000000000000e+00, 6.239138149586146e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_2x_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.069559741371143e-16, -1.035299799956451e-56, -1.034821437599831e-56, -1.035329916613480e-56, -1.034920065353472e-56, -1.035480926332508e-56, -1.034456529929615e-56, -6.394395674257113e-05, -1.034808318398247e-56, -6.395671287124043e-05, -6.394926357855486e-05, -6.395671287124043e-05, 1.769888612215400e-04, -6.111313770439478e-50, 1.766554172041416e-04, 1.770473627599002e-04, 1.701399383531618e-04, 1.689636861825087e-04, 1.724913974013692e-04, 1.724784183385058e-04, 1.777808088893708e-04, 1.665653280599303e-04, -3.726118509200105e-22, 1.665653280599303e-04, -8.854145924526865e-16, -1.158130193591934e-43, -1.133520361690705e-43, 9.086144908290647e-03, 9.548915099488641e-03, 9.642563291854792e-03, 9.501369771954380e-03, -1.179164723058977e-43, -1.116681953517117e-43, -1.182532822669449e-43, 8.927852399460231e-03, 9.923768442802915e-03, -2.020310098625965e-38, 7.241297669503452e-02, -1.960559286474365e-38, 7.162733626504891e-02, 6.340318891742300e-03, -9.073090154422682e-45, 6.079911947366017e-02, 6.601617383466321e-02, 6.807642513929116e-02, 4.859479045921231e-02, 6.807642513929112e-02, -1.545147666508291e-37, 1.305553234380815e-02, 1.373632657921615e-02, -9.454052540822911e-31, 1.467977743864015e-02, -5.417041858002263e-35, 3.521279414422007e-02, 7.343801491302459e-03, 7.277731965397538e-03, 1.159935063280099e-02, 9.487781081569878e-03, 1.159935063280099e-02, 9.487781081569915e-03, -1.156062514691794e-03, -1.156598709752135e-03, -1.163570465003912e-03, -1.163857986142533e-03, -1.156587769187828e-03, -1.156926501200396e-03, -1.163024944405844e-03, -1.163516169934890e-03, -2.218607472576559e-50, -1.160225057893713e-03, -1.159819208099268e-03, -2.311696445317106e-38, 9.790798684657907e-04, 9.707864528488206e-04, 8.821226048501348e-04, 8.762898027660297e-04, 1.061720768432613e-03, 1.030842633801986e-03, 9.803034674314278e-04, 9.469406864602305e-04, 8.585836697577042e-04, -1.092582549568346e-47, 8.585836697577042e-04, 9.116692513114214e-04, -9.986695148406799e-03, -5.177963968334691e-42, -2.968259306116067e-02, -3.104591661758633e-02, 3.186447534572145e-03, -2.394521935520987e-03, -9.127326378070262e-03, -1.384567745505851e-02, -1.558123864465293e-02, -5.868004662295546e-42, -1.558123864465293e-02, -1.151765594257608e-02, 5.247074405782950e-02, 5.258211601557675e-02, -7.501831208085723e-39, 5.680188806469973e-02, 5.036719298405351e-02, 5.304781784691982e-02, -2.281318729340494e-03, -2.287108518444913e-03, 6.328075940697875e-02, 7.488188612512155e-02, 6.328075940697882e-02, 7.488188612512153e-02, -3.783726735757703e-29, 4.864297288916908e-03, 6.923941220048625e-03, 6.583348050159669e-03, 1.450856385848077e-02, 1.596879610956112e-02, 4.662621367418566e-02, -4.228316336911445e-36, 6.412081098627582e-03, 1.496527378572742e-02, 6.412081098627574e-03, 1.496527378572739e-02, -1.507160410047151e-01, -1.547342846597412e-01, -7.684811407126180e-02, -7.775872473623621e-02, -1.764061906412740e-40, -1.784393239974966e-40, -2.563269840910659e-40, -1.114551244949221e-01, -2.106422784831079e-40, -2.128447289333898e-40, -2.106422784831079e-40, -1.007780057661847e-01, -1.367118936634387e-01, -1.404316546770683e-01, -4.396842741633786e-03, -1.747815744959901e-41, -2.000427276309177e-02, -2.444624542510080e-41, -4.124361593144340e-02, -4.139467171947937e-02, -2.972958620006217e-02, -3.009828144388802e-02, -2.972958620006218e-02, -3.114685677739919e-41, -2.093090742313851e-02, -3.727205388356403e-42, 4.965772720582098e-02, 4.945197760065048e-02, -6.987015760598067e-40, 4.046789367590287e-02, -1.837125357568214e-40, 1.732401100060667e-02, 3.008429627835706e-02, 2.997217571224109e-02, 3.008429627835713e-02, -3.880340025661193e-40, 4.644583818626755e-03, 3.068488758099196e-03, -6.306557078975310e-35, -5.959682909553658e-35, 3.743494609142933e-02, 3.891791954690611e-02, 9.650778946849833e-03, -9.172827737496299e-04, 5.811170710856424e-02, 6.626501425811511e-02, 5.811170710856423e-02, 6.626501425811501e-02, -8.700710198417887e-32, -7.120266832717187e-32, 2.342511687717258e-03, 2.342213261418289e-03, -9.660802072655339e-28, -7.462917623473833e-28, -2.238229478102899e-36, -2.302715405311212e-36, 9.832075808473794e-03, 1.415857686512065e-02, 9.832075808473811e-03, -7.506989385187999e-29]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
