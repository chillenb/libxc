
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rmggac_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.715416560482252e-02, -2.715416706688049e-02, -2.715337302327231e-02, -2.715330398250371e-02, -2.715417385245966e-02, -2.715417385245966e-02, -5.094502759329794e-02, -5.094698920292146e-02, -5.099659409868582e-02, -5.084454337914320e-02, -5.094643891601090e-02, -5.094643891601090e-02, -3.680038190905888e-02, -3.666428669828959e-02, -3.313861529987081e-02, -3.324609511222634e-02, -3.675120342906650e-02, -3.675120342906650e-02, -1.628714060870237e-02, -1.684173092735172e-02, -4.194964737214119e-02, -1.363709858158036e-02, -1.647836251518412e-02, -1.647836251518412e-02, -8.297545423286154e-04, -8.820169905338538e-04, -4.313578386485195e-03, -3.658517844076887e-04, -8.739507984583005e-04, -8.739507984583006e-04, -2.639359858940280e-02, -2.640159949596516e-02, -2.639437846639351e-02, -2.640060136332894e-02, -2.639775632805814e-02, -2.639775632805814e-02, -2.552428960095309e-02, -2.493501980389383e-02, -2.486851209479735e-02, -2.441655279448689e-02, -2.601055708379725e-02, -2.601055708379725e-02, -3.930202456441546e-02, -5.424821932444725e-02, -4.098694619983601e-02, -5.152855720074542e-02, -3.880075829461220e-02, -3.880075829461220e-02, -9.420711019163431e-03, -1.403548804146184e-02, -9.516691066345066e-03, -7.275570851854252e-02, -1.084097632158799e-02, -1.084097632158799e-02, -3.219620248589311e-04, -4.069681636721994e-04, -2.817025617387150e-04, -6.524071663261549e-03, -3.900284594297214e-04, -3.900284594297214e-04, -2.864183966815633e-02, -2.664646742525524e-02, -2.725629888455965e-02, -2.780152740746260e-02, -2.752338839792319e-02, -2.752338839792319e-02, -3.891945928698028e-02, -2.182614252063887e-02, -2.361675536646869e-02, -2.671849336016977e-02, -2.516511423320855e-02, -2.516511423320856e-02, -5.566860725800812e-02, -1.574951051540389e-02, -1.917805464400552e-02, -2.968991979166715e-02, -2.317097261742007e-02, -2.317097261742007e-02, -2.909172748203900e-02, -3.773426755991046e-03, -5.429424748646060e-03, -3.266051156618237e-02, -8.128726224106535e-03, -8.128726224106536e-03, -1.139550611523073e-03, -8.007549315318189e-05, -1.508887164836127e-04, -8.048805096244126e-03, -3.316500004522768e-04, -3.316500004522806e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rmggac_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.181553544205207e-02, -5.181462330463784e-02, -5.179501864300100e-02, -5.180898392739568e-02, -5.181520073755365e-02, -5.181520073755365e-02, -9.840881944618154e-02, -9.841230267454298e-02, -9.850649803802805e-02, -9.831987201850725e-02, -9.841079954167717e-02, -9.841079954167717e-02, -6.824383706209514e-02, -6.805201254328776e-02, -6.291658921395205e-02, -6.336311848845537e-02, -6.817471911393196e-02, -6.817471911393196e-02, -4.189755742210233e-02, -4.364389922884591e-02, -7.600701295650372e-02, -2.771831482439268e-02, -4.255238503976443e-02, -4.255238503976443e-02, -1.703624038525160e-03, -1.852438320546230e-03, -1.009998973454317e-02, -8.043013981483112e-04, -1.807608804668938e-03, -1.807608804668941e-03, -2.956942129432835e-02, -2.955532932410202e-02, -2.956186652262045e-02, -2.955130317983009e-02, -2.957051257060086e-02, -2.957051257060086e-02, -7.533353460756097e-02, -7.180196626253536e-02, -7.198502715725197e-02, -6.846179599361374e-02, -7.735085525345922e-02, -7.735085525345922e-02, -7.420074554979114e-02, -7.098128168870196e-02, -7.239558948077707e-02, -7.504184104553911e-02, -7.524081416722204e-02, -7.524081416722204e-02, -2.125227342266679e-02, -3.358477346044463e-02, -2.148499998098761e-02, -1.089612016771826e-01, -2.584540133831329e-02, -2.584540133831329e-02, -8.776820274769804e-04, -9.662077596559092e-04, -8.267407773716413e-04, -1.327982706393767e-02, -8.542060693515900e-04, -8.542060693515897e-04, -2.705594521992872e-02, -4.138373162135613e-02, -3.769402354463219e-02, -3.383471041560999e-02, -3.588968518003857e-02, -3.588968518003857e-02, -2.196866802705932e-02, -4.407642199164228e-02, -5.612738217746312e-02, -6.263929634090318e-02, -6.197165551942075e-02, -6.197165551942078e-02, -7.596378362763163e-02, -3.469347703013442e-02, -5.130121652649213e-02, -6.126735615387589e-02, -5.920581068977158e-02, -5.920581068977151e-02, -7.046127334675982e-02, -8.650726204834147e-03, -1.244380762347961e-02, -6.106013615086811e-02, -1.882806319236693e-02, -1.882806319236691e-02, -2.428043597869393e-03, -1.688076959535422e-04, -4.495867195776794e-04, -1.846264639145425e-02, -7.215283981154208e-04, -7.215283981154243e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.547161879990134e-10, 1.547123703290530e-10, 1.545832585235235e-10, 1.546394060092752e-10, 1.547152224132185e-10, 1.547152224132185e-10, 9.370612596657989e-07, 9.373264046635407e-07, 9.450167967853349e-07, 9.392346342662154e-07, 9.371291341091638e-07, 9.371291341091638e-07, 1.059771224490445e-03, 1.052301724151167e-03, 8.750718771639820e-04, 8.875239275736517e-04, 1.057122996509290e-03, 1.057122996509290e-03, 3.976671879810398e-01, 4.173852651195660e-01, 6.104188740815716e-04, 2.560097849741509e-01, 4.056503139250247e-01, 4.056503139250247e-01, 3.644266651203597e+01, 3.827150965419354e+01, 3.372458103022702e+00, 1.685792587308057e+02, 3.678807691466723e+01, 3.678807691466756e+01, 1.370502604504747e-08, 1.367989229357163e-08, 1.363579694291537e-08, 1.362019802023147e-08, 1.378316389953143e-08, 1.378316389953143e-08, 1.331818474687513e-05, 1.242426749863298e-05, 1.235057555786613e-05, 1.142876937811958e-05, 1.401091007541439e-05, 1.401091007541439e-05, 9.568944160182122e-03, 1.039441011985671e-02, 7.618234466893869e-03, 9.961885573992881e-03, 1.106307744694328e-02, 1.106307744694328e-02, 5.564299699165001e-01, 1.503109106904214e-01, 6.353394697967583e-01, 5.604287352095808e-05, 5.934790831231490e-01, 5.934790831231490e-01, 3.430831333112204e+02, 1.940398756499097e+02, 9.654932920362589e+02, 1.183852996239685e+00, 2.186206173263021e+02, 2.186206173263020e+02, 4.388261562962998e-02, 3.016245761001355e-02, 3.441059367657034e-02, 3.817474389157762e-02, 3.624829522987436e-02, 3.624829522987435e-02, 6.115486234629468e-02, 8.477940671113572e-03, 1.704906768490427e-02, 2.983608032118210e-02, 2.362972212899136e-02, 2.362972212899137e-02, 6.915199075573477e-03, 6.852722171115283e-02, 8.673496531818478e-02, 4.559304368675574e-02, 7.748406452654695e-02, 7.748406452654681e-02, 2.372993079874004e-02, 3.126003114437736e+00, 1.933609693613618e+00, 7.022881185479433e-02, 1.217117695625350e+00, 1.217117695625345e+00, 3.442979251783540e+01, 1.401850247596998e+03, 1.142772489933875e+03, 1.487055460911658e+00, 3.522800146009192e+02, 3.522800146009208e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.141564477352112e-05, -2.141527929850117e-05, -2.139786056695192e-05, -2.140294296276302e-05, -2.141559970915982e-05, -2.141559970915982e-05, -8.994776441474319e-05, -9.001431869899892e-05, -9.214768572421811e-05, -9.293339171129026e-05, -8.995514126883151e-05, -8.995514126883151e-05, -1.575012742962867e-04, -1.592663111803785e-04, -2.246847571149531e-04, -3.103099807897384e-04, -1.582129006264831e-04, -1.582129006264831e-04, -2.843037676596023e-02, -3.058206658249553e-02, 1.130218750968717e-05, -2.634872943146772e-03, -2.917873440136183e-02, -2.917873440136183e-02, -1.882781859074338e-04, -2.836751012701512e-04, -2.440120804414325e-03, -1.097904738106496e-04, -2.309795913574668e-04, -2.309795913574725e-04, -6.040326272225554e-06, -5.980247708819933e-06, -5.886069546508845e-06, -5.848062376938715e-06, -6.211805505270799e-06, -6.211805505270799e-06, -1.266252419059320e-03, -1.231418830846095e-03, -1.178686072473140e-03, -1.124833901269101e-03, -1.362639033119432e-03, -1.362639033119432e-03, -1.413525547674865e-02, -1.060211062464932e-02, -5.314113370195832e-03, -3.530563711991070e-03, -2.183582839582560e-02, -2.183582839582560e-02, -4.016171413460811e-03, -1.049600076348488e-02, -4.427235101072749e-03, -3.250341636082977e-04, -7.944598579565018e-03, -7.944598579565018e-03, -3.584197980250307e-04, -2.303740509940086e-04, -7.105958595011849e-04, -1.131119154198911e-03, -1.412577440529970e-04, -1.412577440529966e-04, -1.318756086918908e-01, -9.048078427991560e-02, -1.033815482267386e-01, -1.147518686638934e-01, -1.089346083274816e-01, -1.089346083274815e-01, -1.452526097016597e-01, -1.463178803925591e-02, -3.437868624775293e-02, -6.617757528489256e-02, -4.992151008724995e-02, -4.992151008725003e-02, -5.055620376104852e-03, -9.749916348803031e-03, -2.124841403612619e-02, -1.460199777929233e-02, -2.503297869272428e-02, -2.503297869272419e-02, -2.310311000881617e-02, -1.834702787438887e-03, -2.572101044416326e-03, -1.558228697455058e-02, -5.157450161819846e-03, -5.157450161819802e-03, -3.015563470770645e-04, -1.581716401598434e-05, -2.927569693439356e-04, -5.290272712466891e-03, -1.318881276937419e-04, -1.318881276937428e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
