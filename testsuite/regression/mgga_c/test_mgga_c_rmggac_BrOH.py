
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_rmggac_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.624482894406946e-01, -1.624481432417312e-01, -1.624475645557732e-01, -1.624499335928701e-01, -1.624482120158723e-01, -1.624482120158723e-01, -1.106473926876169e-01, -1.106475932115344e-01, -1.106546250529332e-01, -1.106541809393025e-01, -1.106475837761271e-01, -2.343437174083064e-02, -6.651875339772102e-02, -1.891818958679538e-02, -1.836795476876870e-02, -1.860532470558261e-02, -1.893187964525997e-02, -1.893187964525997e-02, -1.479135704355116e-02, -1.496592380378954e-02, -7.079228763747486e-02, -1.046730060528617e-02, -1.484210654047586e-02, -1.484210654047586e-02, -8.248107780317365e-04, -8.749289444310631e-04, -3.971779670309544e-03, -2.705936573363057e-04, -8.681144847785058e-04, -8.681144847785058e-04, -2.638633312158744e-02, -2.639441810671566e-02, -2.638722752804926e-02, -1.173538284615942e-01, -2.639039073068604e-02, -2.639039073068604e-02, -9.445345039062192e-02, -9.466807934871099e-02, -9.436538853508022e-02, -9.453387026659461e-02, -9.471220469475279e-02, -2.246893159693126e-02, -2.182829388537656e-02, -2.296402739657464e-02, -2.119449019001544e-02, -2.206978729462794e-02, -2.225745357423934e-02, -6.438488159889233e-02, -2.775884764899408e-02, -1.335351490502833e-02, -2.755978697075830e-02, -2.439087911411654e-02, -9.679402054113087e-03, -9.679402054113087e-03, -3.045821850559434e-03, -3.185456043826790e-04, -2.540181244366427e-04, -2.097159948964458e-02, -3.153723567531249e-03, -2.878122657884577e-04, -2.389740447200197e-02, -2.365956925096100e-02, -5.054008055835332e-02, -2.381014423742728e-02, -2.377707538125549e-02, -2.377707538125549e-02, -2.372210732818876e-02, -2.130843028733496e-02, -2.205129934369708e-02, -2.272006254117529e-02, -2.238067837445333e-02, -6.129550519330115e-02, -2.282833382343176e-02, -4.319630014928567e-02, -1.684992687133086e-02, -5.202651202398690e-02, -1.808844494365366e-02, -1.808844494365365e-02, -5.778769894789729e-02, -3.631507741046514e-03, -4.877709609922076e-03, -1.933757417157387e-02, -2.462690702586966e-02, -7.256116481917243e-03, -8.974691554280579e-04, -5.157757619575439e-05, -1.410265895458316e-04, -7.116021843593068e-03, -2.398333326944931e-04, -2.398333326944966e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_rmggac_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.589050834525939e-01, -1.589039369239021e-01, -1.588989817141190e-01, -1.589176240566849e-01, -1.589044790819990e-01, -1.589044790819990e-01, -1.211548681795973e-01, -1.211547878789097e-01, -1.211532566578957e-01, -1.211562357756188e-01, -1.211549857030116e-01, -3.114698704987314e-02, -7.504948848632643e-02, -2.842653666808952e-02, -2.814816836432496e-02, -2.826913562060532e-02, -2.843256035900880e-02, -2.843256035900880e-02, -2.298235825012007e-02, -2.311176239475596e-02, -7.942711834331058e-02, -1.821065058781934e-02, -2.302107696703869e-02, -2.302107696703869e-02, -1.597865371332098e-03, -1.693345520932000e-03, -7.402036045836644e-03, -5.306372230536663e-04, -1.680547587385789e-03, -1.680547587385789e-03, -2.932740004487486e-02, -2.931757485208483e-02, -2.932631298944112e-02, -1.037192486444928e-01, -2.932247349833486e-02, -2.932247349833486e-02, -1.045035953908999e-01, -1.047154702296147e-01, -1.044155970015750e-01, -1.045837519141595e-01, -1.047576393957254e-01, -3.066989075949370e-02, -2.755182555563855e-02, -2.697259196949239e-02, -2.769803272315313e-02, -2.732083007474040e-02, -2.740599535621639e-02, -7.146291289758802e-02, -3.296992186705197e-02, -2.199200946660668e-02, -3.275021127314423e-02, -2.960632125019840e-02, -1.698492438874569e-02, -1.698492438874569e-02, -3.920399869649406e-03, -6.238329785259882e-04, -4.995245515162500e-04, -2.531857827397696e-02, -4.056708174849149e-03, -5.644231312840591e-04, -2.547127525183301e-02, -2.578205024159929e-02, -2.418549286363329e-02, -2.558789819008452e-02, -2.563132125455973e-02, -2.563132125455973e-02, -2.551098080081205e-02, -2.720683614814457e-02, -2.686625883827342e-02, -2.642077367699257e-02, -2.666398626416299e-02, -6.638630819502227e-02, -2.735273979412868e-02, -5.002559999126218e-02, -2.528538767922330e-02, -5.965971152619870e-02, -2.595020007603351e-02, -2.595020007603349e-02, -6.573834780692366e-02, -6.785916382057863e-03, -9.019056620611816e-03, -2.603237156180851e-02, -2.946513572718265e-02, -1.312364607349692e-02, -1.732106758694679e-03, -1.023172704344380e-04, -2.783978104807451e-04, -1.288408555964778e-02, -4.713731603380698e-04, -4.713731603380724e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.141959174833532e-09, 8.141876060530607e-09, 8.141447266450357e-09, 8.142809080620251e-09, 8.141915833231816e-09, 8.141915833231816e-09, 1.155007871597325e-05, 1.155001295037852e-05, 1.154639139985621e-05, 1.154410469931452e-05, 1.154984085453849e-05, 5.269916217681425e-08, 8.450937218409076e-03, 1.102179332636917e-04, 1.123121163995441e-04, 1.137230251271322e-04, 1.101717958226264e-04, 1.101717958226264e-04, 4.752716094553443e-02, 4.632714357881820e-02, 4.098359816888672e-03, 6.815062486532465e-02, 4.713959126650344e-02, 4.713959126650344e-02, 2.433698682257237e+01, 2.239958992603330e+01, 9.503370820889454e-01, 4.258925919930746e+01, 2.345259260933261e+01, 2.345259260933260e+01, 1.098343522714846e-08, 1.098689740568062e-08, 1.098386889752262e-08, 2.451581419837954e-06, 1.098510981837302e-08, 1.098510981837302e-08, 1.151447007383289e-04, 1.120019125364839e-04, 1.164458579520095e-04, 1.139481960454527e-04, 1.113883689219481e-04, 8.020521570038591e-07, 4.132587736591151e-04, 3.276246148999247e-04, 4.841361135636848e-04, 4.566871667134804e-04, 3.662756961502009e-04, 1.317789476648018e-02, 1.875272742164577e+01, 2.919309151128302e-02, 1.974340986996985e+01, 1.289087020729325e-06, 1.280325644533240e-01, 1.280325644533240e-01, 3.397665619512945e+06, 4.207023284471550e+01, 1.577909623967952e+02, 1.252664332796602e+02, 2.889805743491572e+06, 5.574706081454763e+01, 5.054512924921088e-04, 4.994441975275977e-04, 4.323251495592627e-02, 5.032295645698215e-04, 5.023862492497744e-04, 5.023862492497744e-04, 5.835080245228302e-04, 8.045517071482636e-04, 7.333637893921586e-04, 6.734676364952050e-04, 7.031585328652995e-04, 2.250145608685846e-02, 2.489353112911292e-04, 5.834135570875790e-01, 8.206231671635925e-03, 1.100707264859639e-01, 5.607542963235230e-03, 5.607542963235228e-03, 3.962247599145944e-02, 1.052954251848901e+00, 5.433998196602401e-01, 5.158201693629775e-03, 4.322479385594927e+01, 3.095739597428629e-01, 1.029264986137498e+01, 3.473800623930282e+02, 1.945777431054017e+02, 3.821262582164129e-01, 8.964879009651827e+01, 8.964879009651821e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_rmggac_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_rmggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.928376981858664e-06, -7.929129675475214e-06, -7.932390366083672e-06, -7.920151440789656e-06, -7.928773697316381e-06, -7.928773697316381e-06, 7.661341725154274e-06, 7.660835831804378e-06, 7.643791905870243e-06, 7.649688180923837e-06, 7.661140739488194e-06, -4.708081798124935e-38, 5.005309909975162e-05, -1.040811903336417e-33, -1.419993712896475e-34, -7.426780246331000e-32, -1.599492802574316e-33, -1.599492802574316e-33, -2.020550828708323e-31, -2.912532132319303e-32, 1.976426413408572e-05, -1.932582686623571e-31, -9.495755301668536e-32, -9.495755301668536e-32, -2.605821182857287e-34, -7.933646785408941e-33, -4.000997003815768e-32, -4.159313398567708e-33, -8.670709997023355e-33, -3.241425661147354e-33, -3.082303544311365e-33, -1.832768510710990e-33, -4.692845462695624e-34, -3.312422683031353e-04, -1.872868989805711e-34, -1.872868989805711e-34, 1.855530507414684e-05, 1.882759635685207e-05, 1.840042806125523e-05, 1.865733340046055e-05, 1.889499547857455e-05, -6.010911471886909e-33, -4.233591461231406e-34, -1.121239534184405e-31, -7.617883191493119e-35, -8.359464881410079e-32, -1.279208017295242e-31, -4.011193585867771e-04, 1.817185528316287e-05, -2.005468834028641e-32, 2.053031941092816e-05, -1.460531616571867e-32, -3.733470215925816e-32, -3.733470215925816e-32, 8.693231689270091e-09, -4.347724584327158e-33, -9.854923772200927e-34, 5.252872612603411e-06, 9.927213018237035e-09, -6.211941328492466e-33, -4.541627276224154e-32, -1.261913473104280e-31, -8.876151493043014e-02, -5.489335171694135e-32, -3.375350354321398e-32, -3.375350354321398e-32, -1.333298268339980e-34, -2.872784748007316e-32, -1.315249927764146e-32, -1.503431301304453e-33, -3.403427415287709e-34, -2.168483126988777e-03, -3.809205220900322e-31, 1.435260104987441e-04, -1.649949386678397e-33, 2.567280960688316e-04, -4.567124163763557e-32, -2.294344277463465e-32, 1.803771206629118e-04, -2.777480239054442e-34, -1.569042245876809e-33, -4.071236858344771e-31, 1.754699334802594e-05, -1.430453877480197e-33, -1.628262509077967e-32, -6.324365430256740e-36, -3.539157782926749e-34, -1.272905195203597e-34, -4.458794781010594e-35, -2.305084658276947e-35]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
