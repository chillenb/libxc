
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scanl_rvv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.862820616617498e-02, -3.862902916071938e-02, -3.863137091082974e-02, -3.861914979750575e-02, -3.862574003193598e-02, -3.862574003193598e-02, -2.984025160761688e-02, -2.984405791814950e-02, -2.993251381029051e-02, -2.718159088727412e-02, -2.984484166006971e-02, -2.718149221419527e-02, -2.190410217136065e-02, -2.444898150670135e-02, -2.437478208419473e-02, -2.439770129896703e-02, -2.439285301902801e-02, -2.439285301902801e-02, -1.412812336747610e-02, -1.903199446230929e-02, -2.262079794238162e-02, -1.738603582341406e-02, -1.805958013837064e-02, -1.805958013837064e-02, -2.364707330232545e-03, -2.473925114417484e-03, -9.205924852952787e-03, -1.438993571137558e-03, -1.773848626627635e-03, -1.773848626627635e-03, -2.749636667103524e-02, -2.749649095497406e-02, -2.749637286194770e-02, -4.710000760137912e-02, -2.749642942280822e-02, -2.749642942280822e-02, -2.272114796796031e-02, -2.279402728615332e-02, -2.256527373581288e-02, -2.263074783993416e-02, -2.283647667815250e-02, -2.655878133118041e-02, -2.407074065984552e-02, -2.431042777413595e-02, -2.383472879713560e-02, -2.395392487866398e-02, -2.411798567154316e-02, -3.006568243542338e-02, -7.882224560082151e-03, -1.895868099500740e-02, -7.406917673241164e-03, -7.382095577706019e-02, -1.615045578894735e-02, -1.615045578894735e-02, -2.333765294302364e-04, -1.409180374383215e-03, -1.097540503015724e-03, -5.255962619890100e-03, -3.222207579913923e-04, -1.305936599175581e-03, -2.408509806094272e-02, -2.406804141438211e-02, -5.436360078542804e-02, -2.407900519624186e-02, -2.407653230127249e-02, -2.407653230127249e-02, -2.400307340846287e-02, -2.352174592178512e-02, -2.367170868466579e-02, -2.381016737511136e-02, -2.374066262341022e-02, -2.851971603772357e-02, -2.444168339042134e-02, -1.472436835921187e-02, -2.105462980489145e-02, -1.978053492042296e-02, -2.167148398495312e-02, -2.167148398495312e-02, -2.087667814812611e-02, -8.955805786680513e-03, -1.078799098108116e-02, -2.210352810415680e-02, -6.828820886569168e-03, -1.367814733244875e-02, -3.188885889055186e-03, -4.014228474600731e-04, -1.333730026136838e-04, -1.327746276521931e-02, -1.214904272883642e-03, -1.214904272883642e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scanl_rvv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.126322693639656e-01, -1.126348286210625e-01, -1.126421119337498e-01, -1.126041015643060e-01, -1.126246007518847e-01, -1.126246007518847e-01, -7.987309831901675e-02, -7.989026796867653e-02, -8.028760528490569e-02, "nan", -7.989379104576259e-02, "nan", -2.823854494374659e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.674815567194281e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.312578165623279e-01, "nan", "nan", -3.059312531929340e-02, -3.058252018286555e-02, -3.062745244410966e-02, -3.062058837255975e-02, -3.056763120015644e-02, "nan", "nan", "nan", "nan", "nan", "nan", -7.703934053475235e-02, -1.417286506646017e-02, "nan", -1.338479061359653e-02, -8.256217034604657e-02, "nan", "nan", -4.526590227535498e-04, "nan", "nan", -9.691231458652003e-03, -6.232445762328370e-04, "nan", "nan", "nan", -8.711595031792461e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.214995558528786e-02, "nan", -2.352472433255289e-02, "nan", -2.610437125203406e-02, "nan", "nan", -2.708223243063786e-02, "nan", "nan", "nan", -1.240368993791514e-02, "nan", "nan", "nan", -2.617034444864309e-04, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.870688344858142e-10, 1.870761630941879e-10, 1.870920248844836e-10, 1.869832939455042e-10, 1.870426396125581e-10, 1.870426396125581e-10, 7.949194440640411e-07, 7.952856392391413e-07, 8.036896996437955e-07, "nan", 7.952640540777668e-07, "nan", 1.982798631034608e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.489008446424169e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 3.399676384285489e-07, "nan", "nan", 8.713335011626696e-07, 8.506793762889043e-07, 8.706143870380813e-07, 8.524337745498118e-07, 8.601236312208922e-07, "nan", "nan", "nan", "nan", "nan", "nan", 6.370235345659344e-03, 1.798566985884407e-01, "nan", 2.200336748352006e-01, 5.499673369371311e-05, "nan", "nan", 2.843605905717269e+02, "nan", "nan", 5.778253263539697e-01, 3.985547550364396e+02, "nan", "nan", "nan", 1.859444226046657e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.034056236186176e-02, "nan", 1.625767341411205e-02, "nan", 4.359523115635311e-03, "nan", "nan", 1.323694750447776e-03, "nan", "nan", "nan", 4.057234960491503e-01, "nan", "nan", "nan", 6.383033351739475e+02, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-3.810135543305672e-06, -3.810284450738827e-06, -3.810667326591173e-06, -3.808456829094290e-06, -3.809654717115487e-06, -3.809654717115487e-06, -7.640139617289736e-05, -7.643482809053261e-05, -7.720632928329682e-05, "nan", -7.643791203497293e-05, "nan", -3.303787644702580e-06, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", -2.110878414776949e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -9.276864710846553e-05, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", "nan", -3.071581536928862e-03, 0.000000000000000e+00, "nan", 0.000000000000000e+00, -3.595231213607208e-70, "nan", "nan", -1.918496988660165e-05, "nan", "nan", 0.000000000000000e+00, -4.338408737756965e-05, "nan", "nan", "nan", -6.080822049360462e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.478601171122205e-03, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", -9.282360527947083e-06, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 1.636714338131685e-58, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scanl_rvv10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scanl_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
