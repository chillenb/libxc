
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan01_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.299488887116247e-02, -9.299273356341090e-02, -9.298334743588364e-02, -9.301841285705068e-02, -9.299375321534736e-02, -9.299375321534736e-02, -1.246114816952615e-01, -1.246090848027861e-01, -1.245349183077630e-01, -1.245670310664434e-01, -1.246109743922851e-01, -2.343437174083064e-02, -8.181978215832444e-02, -1.891818958679538e-02, -1.836795476876870e-02, -1.860532470558260e-02, -1.893187964525997e-02, -1.893187964525997e-02, -1.479135704355117e-02, -1.496592380378953e-02, -9.310229683069865e-02, -1.046730060528616e-02, -1.484210654047586e-02, -1.484210654047586e-02, -8.248107780317355e-04, -8.749289444310605e-04, -3.971779670309540e-03, -2.705936573363039e-04, -8.681144847784988e-04, -8.681144847784996e-04, -2.638633312158744e-02, -2.639441810671565e-02, -2.638722752804925e-02, -5.519878999111456e-02, -2.639039073068604e-02, -2.639039073068604e-02, -1.063826357819219e-01, -1.065945116872671e-01, -1.063219597134789e-01, -1.064556476164132e-01, -1.066432249631798e-01, -2.246893159693126e-02, -2.182829388537657e-02, -2.296402739657464e-02, -2.119449019001544e-02, -2.206978729462794e-02, -2.225745357423935e-02, -5.605481243149788e-02, -3.608585790739129e-02, -1.335351490502833e-02, -3.577290957913078e-02, -2.439087911411654e-02, -9.679402054113091e-03, -9.679402054113091e-03, -3.884280442416109e-03, -3.185456043826775e-04, -2.540181244366432e-04, -2.696991586304225e-02, -4.019442599929010e-03, -2.878122657884592e-04, -2.389740447200197e-02, -2.365956925096099e-02, -2.797104273563956e-02, -2.381014423742728e-02, -2.377707538125549e-02, -2.377707538125549e-02, -2.372210732818876e-02, -2.130843028733496e-02, -2.205129934369708e-02, -2.272006254117529e-02, -2.238067837445333e-02, -4.478797281065876e-02, -2.282833382343176e-02, -5.354322181455747e-02, -1.684992687133087e-02, -5.723732859749446e-02, -1.808844494365365e-02, -1.808844494365366e-02, -6.316410982950892e-02, -3.631507741046516e-03, -4.877709609922075e-03, -1.933757417157387e-02, -3.178681229751994e-02, -7.256116481917242e-03, -8.974691554280619e-04, -5.157757619575420e-05, -1.410265895458317e-04, -7.116021843593067e-03, -2.398333326944932e-04, -2.398333326944965e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan01_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.749797949068220e-02, 3.749639971949991e-02, 3.748952784474207e-02, 3.751522253349913e-02, 3.749714704388099e-02, 3.749714704388099e-02, -1.178372345341762e-01, -1.177855242045263e-01, -1.162077190843602e-01, -1.168262078693245e-01, -1.178230180047666e-01, -4.607718871574050e-02, -6.746973711956067e-02, -4.518001722024229e-02, -4.563001191916068e-02, -4.541694158226262e-02, -4.516781179416497e-02, -4.516781179416497e-02, -3.639445997195069e-02, -3.631103356315405e-02, -8.655129960767939e-02, -3.863799019531884e-02, -3.637287226489538e-02, -3.637287226489538e-02, -1.998457141401478e-02, -2.077134160040991e-02, -3.963995839029820e-02, -8.576333050516695e-03, -2.067042033967536e-02, -2.067042033967546e-02, -3.783184909823547e-02, -3.778821096265728e-02, -3.782702703301150e-02, 3.393815857755805e-04, -3.780997824187593e-02, -3.780997824187593e-02, -1.150734024518502e-01, -1.177430062833888e-01, -1.131337512881977e-01, -1.163055854849168e-01, -1.180181293965866e-01, -4.597240441371218e-02, -3.773402965019493e-02, -3.444652212847277e-02, -3.899033614813404e-02, -3.672260394219791e-02, -3.674568590761441e-02, -8.048969701090735e-03, -4.243315850953478e-02, -3.871850044423836e-02, -4.202839632516762e-02, -4.096392231730345e-02, -3.757250378922781e-02, -3.757250378922781e-02, -4.979917665639668e-03, -9.806676500430916e-03, -8.396199585233870e-03, -3.263455246157913e-02, -5.150091534201453e-03, -9.087095815068559e-03, -2.734705509726909e-02, -2.913981506124273e-02, -2.236623494482946e-02, -2.803896620302886e-02, -2.829060654073866e-02, -2.829060654073866e-02, -2.792207431819057e-02, -3.735828530542844e-02, -3.533979854989559e-02, -3.298356650778216e-02, -3.425567832769518e-02, -6.990205778800732e-03, -3.584860223431884e-02, -5.212906936276361e-02, -3.905222637961354e-02, -6.545378413669310e-02, -3.850526094384069e-02, -3.850526094384068e-02, -5.838048571006219e-02, -3.948445287444337e-02, -4.035874052774745e-02, -3.658735570667715e-02, -3.776684213729770e-02, -3.794665519730114e-02, -2.096880970406149e-02, -2.125984746658327e-03, -5.119751825792978e-03, -3.743171250980005e-02, -7.901927242343980e-03, -7.901927242343572e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.379283252790145e-09, 4.379108449971318e-09, 4.378308828708103e-09, 4.381158384430441e-09, 4.379191406779115e-09, 4.379191406779115e-09, 1.328471341026032e-05, 1.328488135656771e-05, 1.328796173833296e-05, 1.328256537504852e-05, 1.328450865107823e-05, 3.334143843642487e-07, 1.043660276226796e-02, 6.651695259473559e-04, 6.841156800863353e-04, 6.894061709194044e-04, 6.647853358035805e-04, 6.647853358035805e-04, 2.927158059807056e-01, 2.833042155898862e-01, 5.443387911772867e-03, 6.214936481020564e-01, 2.897201240482701e-01, 2.897201240482701e-01, 2.169656191999098e+03, 1.952650797295837e+03, 3.066162733706232e+01, 5.086015847779825e+03, 2.051153441566011e+03, 2.051153441566021e+03, 1.022505364663786e-07, 1.025228998261166e-07, 1.022810444725878e-07, 1.049876586676722e-06, 1.023863436783283e-07, 1.023863436783283e-07, 1.288029912155568e-04, 1.248697659744488e-04, 1.306134296906786e-04, 1.272594593201993e-04, 1.241499356629393e-04, 4.967875103137233e-06, 2.723222106018161e-03, 2.409541974527025e-03, 3.070011988119366e-03, 3.080284335894716e-03, 2.495444737313106e-03, 1.629478623825301e-02, 1.521432622800390e+01, 2.019147213908281e-01, 1.590801263897849e+01, 9.391451616667761e-06, 1.252437048235120e+00, 1.252437048235120e+00, -2.660404055677473e+05, 4.868877781793723e+03, 1.970388151752210e+04, 8.047599746304461e+01, -1.925213381257034e+05, 6.629038885710850e+03, 4.645785143880803e-03, 4.324006887236811e-03, 7.563593987717792e-03, 4.523130429218695e-03, 4.478015468583827e-03, 4.478015468583827e-03, 5.209728459703028e-03, 5.195055978226336e-03, 5.022262140936850e-03, 4.978479382123588e-03, 4.982695664970518e-03, 2.447603884986957e-02, 1.776612584039204e-03, 6.167377245391854e-01, 4.924623595224966e-02, 1.010294525123445e-01, 3.334886583885852e-02, 3.334886583885852e-02, 4.176926316169075e-02, 3.758998625366563e+01, 1.396075401558088e+01, 3.128677171595658e-02, 3.173879997554614e+01, 4.476115784262020e+00, 8.812056960278409e+02, 5.481898967065460e+04, 2.685355785353932e+04, 5.579776184068114e+00, 1.115801636849382e+04, 1.115801636849326e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.936220860604488e-05, -7.936167968086213e-05, -7.935908413167265e-05, -7.936772763968778e-05, -7.936193188890697e-05, -7.936193188890697e-05, -1.340193286333297e-04, -1.344189729305077e-04, -1.466633819205906e-04, -1.418502130410919e-04, -1.341291512993201e-04, -1.873436678235428e-04, -2.329454703791765e-03, -2.600546196602724e-03, -2.471086221879859e-03, -2.547076315447018e-03, -2.604055009916958e-03, -2.604055009916958e-03, -2.359637641748841e-02, -2.372929288332980e-02, -7.966188100225430e-04, -2.029328280667575e-02, -2.362622117116594e-02, -2.362622117116594e-02, -3.596841021731608e-02, -3.719181526803689e-02, -3.844130350522473e-02, -9.335828495024571e-03, -3.786071648164338e-02, -3.786071648164357e-02, -2.041845732931134e-04, -2.048954482327387e-04, -2.042633546244048e-04, -8.487979771820196e-04, -2.045401161521175e-04, -2.045401161521175e-04, -3.669426414424342e-05, 1.067483768562260e-05, -7.192032293764366e-05, -1.458721284262497e-05, 1.521546085329815e-05, -5.065716390329916e-04, -7.165229216781705e-03, -8.277090905243778e-03, -6.853216622875317e-03, -7.889884787720128e-03, -7.395316787892235e-03, -2.588740011936461e-02, -5.670297229341916e-04, -1.698215869264369e-02, -6.430162939107844e-04, -9.064781093581280e-04, -2.528610075755817e-02, -2.528610075755817e-02, -2.537877814253211e-07, -1.197288686267897e-02, -2.041373904233100e-02, -1.574355014978571e-04, -2.898185109503221e-07, -1.233385013612259e-02, -1.411043615257094e-02, -1.282663145448227e-02, -2.016981473553989e-02, -1.362007351339656e-02, -1.344017567803999e-02, -1.344017567803999e-02, -1.429654498413246e-02, -8.857700552019227e-03, -9.861290607461645e-03, -1.111977293504499e-02, -1.042351106159830e-02, -3.507944041613592e-02, -7.000835954277094e-03, -6.013305386370077e-03, -1.344968507563092e-02, -1.728381874054939e-05, -1.314337954325627e-02, -1.314337954325626e-02, -6.289894039069126e-03, -3.755703857058752e-02, -3.421817731559344e-02, -1.509166819829684e-02, -5.424902503094878e-04, -3.240407872902291e-02, -2.350597034764877e-02, -2.772855187205085e-03, -9.302753390071731e-03, -3.509984233304948e-02, -1.274832836170899e-02, -1.274832836170828e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
