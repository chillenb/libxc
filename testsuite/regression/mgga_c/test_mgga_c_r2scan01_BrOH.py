
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan01_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.731103355232701e-02, -2.731104798870922e-02, -2.731067295695352e-02, -2.731041340350172e-02, -2.731104524904148e-02, -2.731104524904148e-02, -4.808858007070375e-02, -4.808473510985019e-02, -4.795471180411596e-02, -4.780958503692347e-02, -4.808878443508138e-02, -4.808878443508138e-02, -4.036364275922184e-02, -4.021657402700134e-02, -3.640408062016577e-02, -3.643868237244140e-02, -4.031025655585480e-02, -4.031025655585480e-02, -1.761875131323730e-02, -1.819929026969506e-02, -5.073897157732701e-02, -1.627167261010382e-02, -1.783520247777760e-02, -1.783520247777760e-02, -1.198911272676968e-03, -1.287017810774214e-03, -5.759393004705834e-03, -5.305286189095986e-04, -1.261578511060719e-03, -1.261578511060720e-03, -2.644901236842283e-02, -2.645656770898588e-02, -2.644905420273627e-02, -2.645497061019595e-02, -2.645387438835317e-02, -2.645387438835317e-02, -2.526017788318908e-02, -2.488300760793050e-02, -2.486010759677001e-02, -2.456268871225085e-02, -2.551684634694327e-02, -2.551684634694327e-02, -3.029903915145327e-02, -3.478029679554067e-02, -3.549311500955793e-02, -4.067887311097797e-02, -2.869595688089047e-02, -2.869595688089047e-02, -1.171883909552745e-02, -1.580152022638475e-02, -1.182757774826454e-02, -5.573368203470987e-02, -1.333539290468418e-02, -1.333539290468418e-02, -5.068590664235156e-04, -6.027902712335851e-04, -4.712266134317395e-04, -8.168772949329937e-03, -5.648349994056312e-04, -5.648349994056312e-04, -2.506322136499525e-02, -2.468944867044133e-02, -2.482054902221913e-02, -2.492390803686935e-02, -2.487246300731671e-02, -2.487246300731671e-02, -2.615314577713344e-02, -2.206013761821165e-02, -2.316400451525301e-02, -2.424962777711244e-02, -2.376085406841806e-02, -2.376085406841806e-02, -3.880919305811110e-02, -1.663214136566886e-02, -2.014854414816708e-02, -2.815344611965781e-02, -2.297046344442824e-02, -2.297046344442824e-02, -2.569458008735458e-02, -5.108192127695367e-03, -7.076128986032755e-03, -2.941941189839548e-02, -1.028649314983959e-02, -1.028649314983959e-02, -1.573745421726632e-03, -1.188772056128565e-04, -2.672473713008406e-04, -1.018260634652344e-02, -4.822265505457755e-04, -4.822265505457687e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan01_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.167321977286512e-02, -4.167301397297893e-02, -4.167174383376564e-02, -4.167507113286895e-02, -4.167311482056118e-02, -4.167311482056118e-02, -6.891803502381091e-02, -6.890558809605724e-02, -6.852278521096256e-02, -6.852245274943215e-02, -6.891558749289500e-02, -6.891558749289500e-02, -7.327977961714259e-02, -7.302794142016315e-02, -6.709127988090188e-02, -6.911332153807290e-02, -7.319204451704935e-02, -7.319204451704935e-02, -4.791494121556231e-02, -4.800828766080707e-02, -8.862058784441849e-02, -3.160343328239995e-02, -4.802947988834711e-02, -4.802947988834711e-02, -3.117598631614168e-03, -7.989447690194525e-03, -1.179717683463028e-02, -1.031348981049081e-03, -5.327999355695454e-03, -5.327999355695917e-03, -3.785743643319808e-02, -3.781313885479182e-02, -3.785221902000837e-02, -3.781782464609259e-02, -3.783566498944221e-02, -3.783566498944221e-02, -5.478753007929475e-02, -5.310125765890755e-02, -5.418119176990039e-02, -5.278227794291459e-02, -5.436780372529386e-02, -5.436780372529386e-02, -4.120075434500357e-02, -2.562369905162157e-02, -4.480934294579825e-02, -3.003782845988014e-02, -3.880592355765414e-02, -3.880592355765414e-02, -2.396080602912077e-02, -5.400439008911057e-02, -2.426695485891251e-02, -3.055153422986819e-02, -2.622438144163456e-02, -2.622438144163456e-02, -1.018796291118227e-03, -1.179002783225427e-03, -1.007346844313882e-03, -1.552807448539175e-02, -1.097848784201813e-03, -1.097848784201813e-03, -2.589129923690800e-02, -2.829257628872696e-02, -2.748863933345867e-02, -2.682470976962166e-02, -2.716129443296761e-02, -2.716129443296761e-02, -2.473235580841775e-02, -3.841887404067564e-02, -3.615451174376594e-02, -3.311038894544398e-02, -3.481755992511103e-02, -3.481755992511103e-02, -2.550364597774135e-02, -4.728950932928188e-02, -5.049812523370224e-02, -4.821615789582503e-02, -4.910514225306101e-02, -4.910514225306102e-02, -4.575855789666974e-02, -1.235750845469626e-02, -1.415526284333293e-02, -4.302247759756174e-02, -2.177910975913634e-02, -2.177910975913632e-02, -3.015026588494846e-03, -2.338281656521806e-04, -6.314749590014619e-04, -2.117954579823518e-02, -9.389592250777090e-04, -9.389592250777023e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.468578897030562e-11, 8.468569122792155e-11, 8.467933961207888e-11, 8.468076867992199e-11, 8.468579060481318e-11, 8.468579060481318e-11, 1.382790721180970e-06, 1.383039158472911e-06, 1.389762458235933e-06, 1.380696291328637e-06, 1.382865314853701e-06, 1.382865314853701e-06, 1.280268461446299e-03, 1.274001515418512e-03, 1.086750401449801e-03, 9.242887125731537e-04, 1.277840119617251e-03, 1.277840119617251e-03, 5.689281732949072e-01, 5.669784781312029e-01, 9.027925064005893e-04, 2.850000770848357e-01, 5.704835305298863e-01, 5.704835305298863e-01, 1.353272200055564e+02, 6.109316814256302e+02, 2.900564803144136e+00, 1.307451259254268e+02, 3.551121951835106e+02, 3.551121951833888e+02, 1.031295365347009e-07, 1.033969388083832e-07, 1.031483108139598e-07, 1.033566487941888e-07, 1.032779515081584e-07, 1.032779515081584e-07, 8.194503464621015e-06, 7.567953851410827e-06, 7.869790660463336e-06, 7.366896773299926e-06, 8.178899563737578e-06, 8.178899563737578e-06, 7.032170268552911e-03, 7.694841521017562e-03, 1.007457893934347e-02, 1.300351358713245e-02, 5.560608641897980e-03, 5.560608641897980e-03, 5.281474680049506e-01, 3.890056505174413e-01, 6.135297650214102e-01, 6.308391289191536e-05, 3.546246579538313e-01, 3.546246579538313e-01, 1.772700680984309e+02, 1.206536485201903e+02, 6.052837886977794e+02, 1.087973395832466e+00, 1.718657156933384e+02, 1.718657156933382e+02, 5.457667748298399e-03, 5.022108169547437e-03, 5.168776131531024e-03, 5.288686475927462e-03, 5.228220561549972e-03, 5.228220561549972e-03, 7.226028083252269e-03, 5.950886072543430e-03, 6.043007533096303e-03, 6.325691892010087e-03, 6.217325622238603e-03, 6.217325622238605e-03, 6.915618280350873e-03, 1.374072242359031e-01, 9.603128731591111e-02, 5.530321174639467e-02, 7.185371115210361e-02, 7.185371115210369e-02, 1.535926963732076e-02, 5.299967661345154e+00, 1.568983474555768e+00, 8.722158655915696e-02, 1.241700781975703e+00, 1.241700781975699e+00, 2.792618438958147e+01, 1.387181689556483e+03, 1.082294257963026e+03, 1.455937866327320e+00, 2.868227387428834e+02, 2.868227387428848e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan01_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.123817228138133e-05, -1.123825873867712e-05, -1.123806210637193e-05, -1.123663238321045e-05, -1.123822307479467e-05, -1.123822307479467e-05, -4.992666602380896e-04, -4.994610183523881e-04, -5.052836446566880e-04, -5.036967281919460e-04, -4.993109250784017e-04, -4.993109250784017e-04, -6.349906231871197e-04, -6.466582057199394e-04, -7.836987587069137e-04, -2.050131013950199e-04, -6.384069396511672e-04, -6.384069396511672e-04, -4.681694315138203e-02, -4.818080603531128e-02, -5.014799836017774e-04, -3.116486892764528e-03, -4.738071534689734e-02, -4.738071534689734e-02, -1.629858658103399e-03, -1.086088178591497e-02, -1.504959967596829e-03, -1.296562890421021e-05, -5.857029456747979e-03, -5.857029456746848e-03, -2.054657542303368e-04, -2.061690584140148e-04, -2.055273910603059e-04, -2.060747066112817e-04, -2.058395064417176e-04, -2.058395064417176e-04, -8.033695731663366e-04, -7.594980967012560e-04, -7.669571309558135e-04, -7.309934016546168e-04, -8.207630815602724e-04, -8.207630815602724e-04, -1.648402116636597e-02, -2.122102612860231e-02, -1.815527947929342e-02, -2.391143788969130e-02, -1.495515365594759e-02, -1.495515365594759e-02, -3.328020662698720e-03, -3.365156391690639e-02, -3.826468600702514e-03, -3.431780919015123e-03, -2.351907762859736e-03, -2.351907762859736e-03, -6.241226284015651e-05, -2.827383981286749e-05, -2.542103541516651e-04, -4.481613559175333e-04, -1.681868607627893e-05, -1.681868607627887e-05, -1.594829411889030e-02, -1.440448224402598e-02, -1.492864468996230e-02, -1.535488464992960e-02, -1.513986495883289e-02, -1.513986495883289e-02, -1.845317861893334e-02, -1.004566806337623e-02, -1.162465312152645e-02, -1.360577568972167e-02, -1.263568482600104e-02, -1.263568482600104e-02, -2.051655111798615e-02, -2.321025872884415e-02, -2.652257190984277e-02, -2.838387297177042e-02, -2.779629093386739e-02, -2.779629093386741e-02, -1.822880228630119e-02, -3.580822126709629e-03, -1.367923885168338e-03, -3.687315968058433e-02, -4.919219841468040e-03, -4.919219841468004e-03, -4.170854119028448e-05, -2.042711319965217e-06, -2.173510603954631e-04, -4.651187376535290e-03, -1.569235916682613e-05, -1.569235916682541e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
