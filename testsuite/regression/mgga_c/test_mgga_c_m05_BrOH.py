
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.005690882976707e-01, -1.005691151129662e-01, -1.005703340849284e-01, -1.005699522449892e-01, -1.005690922322438e-01, -1.005690922322438e-01, -5.097351251272802e-02, -5.097769722546915e-02, -5.110244298418594e-02, -5.103198436559180e-02, -5.097488953964861e-02, -5.097488953964861e-02, -2.270876537691944e-02, -2.260448797116929e-02, -1.885469048896259e-02, -1.977535759887012e-02, -2.267210196178109e-02, -2.267210196178109e-02, 2.502084586900435e-04, -1.729004052072257e-03, -2.328546081008301e-02, 2.467742160657566e-02, -3.647473246341605e-04, -3.647473246341605e-04, -2.829114842634969e-03, -2.917862806781083e-03, -6.340827552457235e-04, -1.697024494799257e-03, -2.890466517349127e-03, -2.890466517349127e-03, -7.457434821849479e-02, -7.452664982698687e-02, -7.456982404370013e-02, -7.453269464722355e-02, -7.454951033756001e-02, -7.454951033756001e-02, -4.251058516419165e-02, -4.392793530997280e-02, -4.175259062909711e-02, -4.291721781500379e-02, -4.432844511839168e-02, -4.432844511839168e-02, -3.392246516187808e-02, -5.621452727099224e-02, -3.101092639787764e-02, -4.737024311887610e-02, -3.607193448115755e-02, -3.607193448115755e-02, 2.098281951362141e-02, 1.934972985788126e-02, 2.133982176878233e-02, -8.391690375904441e-02, 2.494614474509715e-02, 2.494614474509715e-02, -1.598263482280908e-03, -1.821326635190376e-03, -1.367013220337674e-03, 6.912988721153268e-03, -1.697385498683272e-03, -1.697385498683270e-03, -5.255538892512163e-02, -4.321274577109185e-02, -4.544231203735091e-02, -4.788161332723952e-02, -4.657123573365648e-02, -4.657123573365647e-02, -5.999211698152685e-02, -3.609077381237858e-02, -3.735722782947692e-02, -3.790719066459210e-02, -3.739316800797686e-02, -3.739316800797685e-02, -5.668652156652642e-02, 6.596513843713399e-03, -8.557291654976425e-03, -2.383536197915017e-02, -1.914757437498240e-02, -1.914757437498241e-02, -2.966811646799113e-02, -2.174911999294882e-03, 3.071737955735317e-03, -2.454775411727250e-02, 1.663437529699871e-02, 1.663437529699874e-02, -3.362551787730376e-03, -5.776356456648472e-04, -9.828793150974922e-04, 1.627310216237578e-02, -1.473081826996372e-03, -1.473081826996373e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.298442967904142e-02, -7.298543159176954e-02, -7.298153168191075e-02, -7.296477333760922e-02, -7.298503482112521e-02, -7.298503482112521e-02, -9.115172941704439e-02, -9.116114212363058e-02, -9.139831827676863e-02, -9.063665220614041e-02, -9.115878593677569e-02, -9.115878593677569e-02, -5.055115179137360e-02, -5.087669546518903e-02, -6.766029363188264e-02, -6.726723665870414e-02, -5.066573119258357e-02, -5.066573119258357e-02, -7.896025307988122e-02, -7.825288824409231e-02, -5.854012114101162e-02, -7.017835318316586e-03, -7.877908236276562e-02, -7.877908236276562e-02, -3.484144937654866e-03, -3.507216691526603e-03, 1.793440736118938e-02, -2.365749650638674e-03, -3.479380759362601e-03, -3.479380759362601e-03, -6.049290667268546e-02, -6.091010027934753e-02, -6.051957696130816e-02, -6.084473037789433e-02, -6.072747930340197e-02, -6.072747930340197e-02, -1.098233340590566e-01, -1.075866236690980e-01, -1.144563703184315e-01, -1.127246734793654e-01, -1.024219275000967e-01, -1.024219275000967e-01, -5.201983586084642e-02, -1.044283886410010e-01, -5.438471094788645e-02, -1.082791288528053e-01, -5.575591680997810e-02, -5.575591680997810e-02, 5.105272500550707e-02, -5.510911458727705e-02, 4.836494912450449e-02, -1.567037958895889e-01, 2.474053944261656e-02, 2.474053944261656e-02, -2.284537392881506e-03, -2.538711545498497e-03, -1.964704057824141e-03, 4.038524755874897e-02, -2.344722369415462e-03, -2.344722369415457e-03, -7.324337581349288e-02, -7.466650094310771e-02, -7.678249471625960e-02, -7.656310255043057e-02, -7.691364908266309e-02, -7.691364908266307e-02, -7.008502608874818e-02, -3.750979868616645e-02, -3.012325210604568e-02, -4.636016070871639e-02, -3.525045354909214e-02, -3.525045354909220e-02, -1.104762625303126e-01, -8.832748426935606e-02, -8.720762948448205e-02, -4.095241109715514e-02, -6.422130548083134e-02, -6.422130548083120e-02, -4.053175739422674e-02, 1.209223147531857e-02, 3.075398635198226e-02, -3.500035338305299e-02, 5.017179114317538e-02, 5.017179114317593e-02, -3.763053955516751e-03, -8.316912716125966e-04, -1.465661675669524e-03, 4.865340272811714e-02, -2.048098445976749e-03, -2.048098445976803e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.056630428097245e-10, -2.056556868122610e-10, -2.056531428690375e-10, -2.057748154086397e-10, -2.056588862359482e-10, -2.056588862359482e-10, 1.697042450925432e-07, 1.698472393712334e-07, 1.730088404552803e-07, 1.554996365213460e-07, 1.698448495103584e-07, 1.698448495103584e-07, 3.164660447835501e-04, 3.266946997665339e-04, 8.319672459131779e-04, 7.446161781759866e-04, 3.199985031765898e-04, 3.199985031765898e-04, 5.174259006266482e-01, 4.889304509063601e-01, 4.842187681169469e-04, 5.098405960058839e-01, 5.093660107677669e-01, 5.093660107677669e-01, 3.725786794729534e+01, 3.019692370040518e+01, -6.658837304477545e+00, 1.878413499688803e+02, 3.183641633172693e+01, 3.183641633172689e+01, -9.760234403323815e-08, -9.284488338490713e-08, -9.719382842487734e-08, -9.349213455381313e-08, -9.507810586017983e-08, -9.507810586017983e-08, 1.417761329609986e-06, 8.063494213736844e-07, 2.005104182826623e-06, 1.516277555439062e-06, 2.494612659431039e-07, 2.494612659431039e-07, -2.215405860141467e-04, 2.020973014452748e-02, 1.005716638967527e-03, 2.368359610174764e-02, 3.666411640309913e-04, 3.666411640309913e-04, -8.075255860517790e-01, 2.990421972194137e-01, -8.029106129723876e-01, 1.100213642285102e-04, 9.814198085604817e-02, 9.814198085604817e-02, 2.581767048735343e+02, 1.666776266535503e+02, 6.412351218943600e+02, -4.722852806429708e+00, 2.230103542201310e+02, 2.230103542201855e+02, 7.355281653169549e-02, 3.505673592953396e-02, 4.694778026048054e-02, 5.787431377444863e-02, 5.222877461663173e-02, 5.222877461663173e-02, 4.979395599908650e-02, -6.775382034704331e-03, -8.249782423494873e-03, -2.386604542601591e-04, -6.019614084005120e-03, -6.019614084005117e-03, 1.559064866429670e-02, 1.656302928352335e-01, 7.602628435948972e-02, -6.996367224804354e-03, 2.023574934564761e-02, 2.023574934564770e-02, -5.548779510130809e-03, -5.752960174816964e+00, -4.788772008441147e+00, -1.724936802874220e-02, -2.179067817298218e+00, -2.179067817298225e+00, 6.271597453192250e+00, 3.256117632352164e+03, 1.140094947102533e+03, -2.684958329100349e+00, 3.853684246826600e+02, 3.853684246826695e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.786938818964578e-05, 2.786822090494153e-05, 2.786646798730779e-05, 2.788565957551776e-05, 2.786874174744193e-05, 2.786874174744193e-05, 1.906823965787087e-04, 1.907072210817103e-04, 1.916000758516212e-04, 1.935399152474389e-04, 1.906729362594366e-04, 1.906729362594366e-04, 1.487906842842060e-03, 1.489705499349624e-03, 1.471906170761026e-03, 1.639054582886234e-03, 1.488823680730176e-03, 1.488823680730176e-03, 1.349598198601443e-02, 1.447483380326610e-02, 3.316733182598443e-04, 1.267764679888531e-03, 1.376719153216797e-02, 1.376719153216797e-02, -1.157682322255413e-03, -1.186988612964306e-03, -1.431017465733954e-03, -2.750699056602730e-04, -1.208478630180855e-03, -1.208478630180854e-03, 6.032491079382582e-05, 4.824907027944346e-05, 5.913988599355058e-05, 4.975021552513182e-05, 5.411437684330500e-05, 5.411437684330500e-05, 9.799242244332618e-04, 1.033990763296776e-03, 9.693839009948797e-04, 1.012777440016100e-03, 1.028776252329428e-03, 1.028776252329428e-03, 6.545493665438893e-03, -8.047350086129250e-03, 5.061242818440343e-03, -3.113577854431799e-03, 6.030091901369650e-03, 6.030091901369650e-03, -4.821491903429409e-04, 4.120167456348153e-03, -4.217603775143984e-04, -5.600960129315085e-04, 5.382843913151023e-04, 5.382843913151023e-04, -3.955120198175374e-04, -3.643670660944923e-04, -6.682145625546012e-04, -9.487461986283669e-04, -3.423675697239455e-04, -3.423675697239540e-04, -1.317569937676324e-01, -8.074607725093860e-02, -1.033291933559135e-01, -1.204487420654769e-01, -1.121319706622686e-01, -1.121319706622687e-01, -4.959601694674865e-02, 1.895308534091665e-02, 1.893892991348435e-02, 4.635308295742199e-03, 1.458507845940819e-02, 1.458507845940823e-02, -5.026165993364414e-03, 7.469630309586699e-03, 1.094388293428116e-02, 1.347651304632218e-02, 1.444625693662533e-02, 1.444625693662526e-02, 1.307843154192074e-02, -1.462609048691266e-03, -1.303668786397446e-03, 1.526227110993852e-02, -9.212001065563487e-04, -9.212001065562384e-04, -5.853352006144132e-04, -1.021549622938255e-04, -3.783446859731116e-04, -9.508437871628804e-04, -3.484580122080808e-04, -3.484580122080766e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
