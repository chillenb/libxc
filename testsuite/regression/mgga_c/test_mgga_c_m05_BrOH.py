
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645987698526808e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -5.798180982922402e-02, -6.686302819127440e-02, -3.368577181446715e-03, 5.176560631725628e-03, 1.361494943361374e-03, -3.580716928394623e-03, -3.580716928394623e-03, 3.574635059517767e-03, 1.916995869555838e-03, -7.129454252820250e-02, 2.724385921313775e-02, 3.101264840318489e-03, 3.101264840318489e-03, -2.822607931124611e-03, -2.910112300255996e-03, -1.463315432135744e-03, -1.601269397718167e-03, -2.883772997106872e-03, -2.883772997106890e-03, -7.463661328685288e-02, -7.458536876483608e-02, -7.463094925787700e-02, -1.224181159734425e-01, -7.461098297613085e-02, -7.461098297613085e-02, -9.468307849320165e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119327e-02, -4.373109957579410e-02, -3.957292132219352e-02, -4.162972114716135e-02, -3.627493962425600e-02, -4.019801165501999e-02, -4.102648680169682e-02, -6.444458984389427e-02, -2.795790560897061e-02, 2.158265590863067e-02, -2.775589238622643e-02, -5.962326303495913e-02, 2.482047512786341e-02, 2.482047512786341e-02, -3.066310498112501e-03, -1.740749202876673e-03, -1.337051392070553e-03, -2.111687625325582e-02, -3.174878197427740e-03, -1.602636538706654e-03, -3.526998689774727e-02, -3.692882121853968e-02, -6.421258200260355e-02, -3.591300387794418e-02, -3.614639803766214e-02, -3.614639803766214e-02, -3.550440453475193e-02, -3.699526727468565e-02, -3.918806571143130e-02, -3.914356950908575e-02, -3.941099824151718e-02, -6.165502636499921e-02, -4.264437768191285e-02, -4.342835275928391e-02, -4.965621134326153e-03, -5.212060951466563e-02, -1.655473418985972e-02, -1.655473418985971e-02, -5.782933926396749e-02, -2.543078925177545e-03, 1.518374192163160e-03, -2.754382894965084e-02, -2.479856847389609e-02, 1.459588794634436e-02, -3.274448825526162e-03, -5.297289250221841e-04, -9.655021774573968e-04, 1.414496239571166e-02, -1.385260277760696e-03, -1.385260277760696e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747363821476019e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -1.190987563658967e-01, -7.491623656166164e-02, -1.389147342098285e-01, -1.382193041492270e-01, -1.390857620944962e-01, -1.388526864453766e-01, -1.388526864453766e-01, -8.130612697359686e-02, -8.231249785185295e-02, -7.955565354779474e-02, 3.033845217922582e-02, -8.164311919930513e-02, -8.164311919930513e-02, -3.503305218373431e-03, -3.535142163302980e-03, 1.492189981246997e-02, -2.373246334298531e-03, -3.503344772084307e-03, -3.503344772084253e-03, -5.897528025703086e-02, -5.939411933049999e-02, -5.902132828386072e-02, -1.321322029122264e-01, -5.918468496119329e-02, -5.918468496119329e-02, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -1.262495594928878e-01, -3.809685632770536e-02, -2.619589916093294e-02, -5.344921965096147e-02, -3.126140088955601e-02, -3.047568297405255e-02, -7.237723572555273e-02, -3.318915835573125e-02, -4.788196431675502e-02, -3.296452513148780e-02, -4.133755342845024e-02, 3.719918820790080e-02, 3.719918820790080e-02, -3.946287688264066e-03, -2.553496318238231e-03, -1.968902054994684e-03, -2.549362941948338e-02, -4.083422991717209e-03, -2.361963120969196e-03, -6.789251484899590e-02, -5.506390019546184e-02, -7.213338981778679e-02, -6.357942045720989e-02, -6.176544848374600e-02, -6.176544848374600e-02, -6.295121699623493e-02, -4.006912849200783e-02, -2.645071516353042e-02, -2.661494485318575e-02, -2.455498443492627e-02, -6.944209849581727e-02, -2.670970431337567e-02, -5.006348929577377e-02, -9.667754661863819e-02, -5.935291128433449e-02, -8.573730461492721e-02, -8.573730461492725e-02, -6.540488546969517e-02, 1.058126106072684e-02, 2.632162047752352e-02, -5.492107226540494e-02, -2.965891225314009e-02, 5.142577941745565e-02, -4.157998804098736e-03, -8.192640723644418e-04, -1.462997983135325e-03, 5.001648878058340e-02, -2.057669512353105e-03, -2.057669512353025e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.802898952591008e-09, -1.802864079034234e-09, -1.802694268126078e-09, -1.803264195261371e-09, -1.802880698714189e-09, -1.802880698714189e-09, -1.253498389932910e-05, -1.253462423673332e-05, -1.252165891462627e-05, -1.252194247781936e-05, -1.253460149932132e-05, -9.828922313543349e-08, -3.030114196818868e-02, 1.356391785076881e-03, 1.492971182797829e-03, 1.469860150468235e-03, 1.352151543017285e-03, 1.352151543017285e-03, 4.980023889556385e-01, 4.780059494454466e-01, -1.323194189881251e-02, 1.066707509910906e-02, 4.920658240501999e-01, 4.920658240501999e-01, 3.859460314269667e+01, 3.186691305034112e+01, -4.959696336419575e+00, 2.017813640485391e+02, 3.334696925839325e+01, 3.334696925839167e+01, -1.063998967458101e-07, -1.016878413654841e-07, -1.058846677194316e-07, -1.347994969379099e-06, -1.040499949032643e-07, -1.040499949032643e-07, -1.933815252063966e-04, -1.865993200319623e-04, -1.962184514292384e-04, -1.908096074338867e-04, -1.852433521505553e-04, 2.232036581254524e-06, -3.984259098065581e-03, -4.616844194439106e-03, -2.385218792837925e-03, -5.440199381952748e-03, -4.579393512025095e-03, -4.292827647338868e-02, -1.984500094143104e+02, 2.575123287434990e-01, -2.101152223401870e+02, -2.120328763688769e-05, -1.612009529486156e-01, -1.612009529486156e-01, -8.885759215620193e+07, 1.787833505249023e+02, 6.590922562307442e+02, -1.622005802217987e+03, -7.504850477269839e+07, 2.450583960188065e+02, 6.966194412555519e-02, 2.147496777841356e-02, -9.601409965520644e-03, 4.489573410006069e-02, 3.824729990286104e-02, 3.824729990286104e-02, 5.203439022611878e-02, -6.564331141000466e-03, -9.700914000247040e-03, -8.207140699108845e-03, -9.879944357832435e-03, -6.962549912209774e-02, -3.621762871722792e-03, -3.954774338377109e+00, 8.023645769251420e-02, -5.670019466258136e-01, 3.416322447941410e-02, 3.416322447941416e-02, -1.709685206482413e-01, -4.772140842185649e+00, -3.525402736604739e+00, -7.936568519804578e-03, -5.012792902718416e+02, -2.019113639157568e+00, 1.870046949528315e+01, 3.290065261267909e+03, 1.147220470752953e+03, -2.478824990960141e+00, 4.192000919409596e+02, 4.192000919409700e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m05_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.175597516817109e-17, -2.587876733339336e-57, -2.588166329025969e-57, -2.586905263055629e-57, -2.587840182021747e-57, -2.587840182021747e-57, -1.532653304938058e-50, -1.533328950126966e-50, -1.553265067327200e-50, -1.544309361994475e-50, -1.532769823524282e-50, 5.282502972739721e-04, -2.848528787829981e-44, 2.417013475249011e-03, 1.890699848104949e-03, 2.126070566447787e-03, 2.431711715679233e-03, 2.431711715679233e-03, 1.352798690779920e-02, 1.460569671498507e-02, -2.222008655621928e-45, 3.895468437857381e-04, 1.382604399639787e-02, 1.382604399639787e-02, -1.181677415770882e-03, -1.218253663170843e-03, -1.697575484648058e-03, -3.967773843983812e-04, -1.236009365985557e-03, -1.236009365985568e-03, 7.127496864158474e-05, 5.916763119678778e-05, 6.994871720921609e-05, -3.409626118506600e-23, 6.523501908421997e-05, 6.523501908421997e-05, -2.099537646195674e-20, -2.725986234288325e-48, -2.671274612169622e-48, -2.700301497350878e-48, -2.745474687700150e-48, 1.122713537765710e-03, 1.711043230294339e-02, 1.579645138984051e-02, 1.473611544677881e-02, 1.919938688358149e-02, 1.807643429139424e-02, -1.298014893456710e-42, -5.098186819519628e-38, 3.928140221145214e-03, -6.420583570033312e-38, 2.648714523521267e-03, 4.160042902188428e-05, 4.160042902188428e-05, -9.844747062768174e-31, -4.823977464510206e-04, -7.544600881725266e-04, -7.022489663536089e-37, -8.142297594961194e-31, -4.964392120482912e-04, -2.519203698268768e-01, -8.394499053959596e-02, -4.701162828437413e-41, -1.656661303312558e-01, -1.424920785168775e-01, -1.424920785168775e-01, -1.750664186992034e-01, 2.035614027716430e-02, 2.337695680017558e-02, 1.625550678720402e-02, 2.222758432734157e-02, -7.587461213507463e-42, 1.617567722309581e-02, -4.181193925129255e-40, 1.126321128249736e-02, -4.466809033364565e-41, 1.608789876662661e-02, 1.608789876662663e-02, -6.296235696830039e-42, -1.607291455072350e-03, -1.644618623941777e-03, 2.753575719137371e-02, -2.713023882309868e-37, -1.418654048116734e-03, -8.340508793832305e-04, -1.684499906203873e-04, -4.129255585898766e-04, -1.518004755327431e-03, -5.149120225984571e-04, -5.149120225984725e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
