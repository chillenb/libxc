
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.673793308398169e-01, -2.673935353508184e-01, -2.674524923167730e-01, -2.672422751842007e-01, -2.673529921188879e-01, -2.673529921188879e-01, -3.210936552999721e-02, -3.211334366424921e-02, -3.220292317170234e-02, -3.198482247253488e-02, -3.208427893830800e-02, -3.208427893830800e-02, -3.530736764443514e-02, -3.514370191743285e-02, -3.060073996741426e-02, -2.964445250208561e-02, -3.014182276979478e-02, -3.014182276979478e-02, -1.020148656603820e-02, -1.077051918709079e-02, -5.870063632808290e-02, -1.718712095979379e-02, -1.181536986876678e-02, -1.181536986876672e-02, -7.941126044665551e-03, -8.286960819585751e-03, -2.799016826029848e-02, -4.961924562439567e-03, -6.048547390958448e-03, -6.048547390958448e-03, -2.805363629221887e-01, -2.824696329257990e-01, -2.806617289848174e-01, -2.823668515080556e-01, -2.814972667367047e-01, -2.814972667367047e-01, -1.425845105173681e-02, -1.378909293930466e-02, -1.393090882325851e-02, -1.342974982824716e-02, -1.419448653202806e-02, -1.419448653202806e-02, -4.333300431273883e-02, -5.696777819042684e-02, -3.285242530743585e-02, -5.351964693938292e-02, -4.906879995710228e-02, -4.906879995710228e-02, -2.950440189416093e-02, -1.038937688118109e-02, -3.069180556084531e-02, -8.145948206716437e-02, -1.971984111986639e-02, -1.971984111986634e-02, -3.947049736265769e-03, -4.864698470632661e-03, -3.832237089651898e-03, -3.190212308709273e-02, -4.522465730368741e-03, -4.522465730368756e-03, 3.889293756853554e-03, -3.862076163043723e-02, -2.471834566139233e-02, -1.204242762614687e-02, -1.846808231104738e-02, -1.846808231104738e-02, 3.984181254110594e-02, -2.515302238400300e-02, -4.761304037141610e-02, -7.018632754466886e-02, -6.119016861050737e-02, -6.119016861050736e-02, -6.148324813153348e-02, -9.614909769921760e-03, -1.361490467518367e-02, -2.158773231045421e-02, -1.719885071165969e-02, -1.719885071165969e-02, -2.206293804622305e-02, -2.737544981822203e-02, -3.136895210445565e-02, -2.520710296551427e-02, -2.862071110711384e-02, -2.862071110711378e-02, -1.056562198858721e-02, -1.467941990696078e-03, -2.904046808702203e-03, -2.870878399518859e-02, -4.221867015332819e-03, -4.221867015332841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.000627503404095e+00, -1.000649352957683e+00, -1.000750136186382e+00, -1.000427010841147e+00, -1.000595782252937e+00, -1.000595782252937e+00, -9.573978338710208e-02, -9.580698455170064e-02, -9.757635403179815e-02, -9.664247379838369e-02, -9.683219874725038e-02, -9.683219874725038e-02, -6.413392683216772e-02, -6.431153541508394e-02, -6.754109561012182e-02, -6.531394083965984e-02, -6.598379357155341e-02, -6.598379357155341e-02, -3.488133447058327e-02, -3.688933964983040e-02, -7.516142711157575e-02, -2.308387594347516e-03, -1.439863594814767e-02, -1.439863594814711e-02, -1.012058442154106e-02, -1.054396942858839e-02, -2.957937209333546e-02, -6.403845065627383e-03, -7.769498368608035e-03, -7.769498368608029e-03, -6.048423775833744e-01, -6.038145066774702e-01, -6.048458200664969e-01, -6.039371174010012e-01, -6.043002971876047e-01, -6.043002971876047e-01, -3.204914401679598e-02, -3.555084641124059e-02, -2.848489442543575e-02, -3.060620776569287e-02, -3.617269703800732e-02, -3.617269703800732e-02, -1.445647619065165e-01, 6.636977024296221e-03, -9.350068500903290e-02, -1.039234710582147e-01, -1.498992019639542e-01, -1.498992019639542e-01, -7.673713278997975e-03, -1.061568042075312e-02, -1.122733353310854e-02, -1.651046433837706e-01, 2.642298850341536e-03, 2.642298850341127e-03, -5.115617642198074e-03, -6.281366518723213e-03, -4.960694107816793e-03, -2.405650376532472e-02, -5.841700338562301e-03, -5.841700338562393e-03, 4.782676603399174e-02, 1.057506568058065e-01, 1.032443428621086e-01, 8.762951669177010e-02, 9.717096344683364e-02, 9.717096344683364e-02, 5.993310846995082e-02, -1.136753038359298e-01, -1.640891823013586e-01, -7.729404043159167e-02, -1.465274593314027e-01, -1.465274593314026e-01, -5.058113410416652e-02, -3.297002618856325e-02, -4.353594326612611e-02, -4.681998085419855e-02, -3.871035751605715e-02, -3.871035751605722e-02, -7.275169001214983e-02, -2.931122765586928e-02, -2.963600155139970e-02, -7.213257125922630e-02, -1.136994147008360e-02, -1.136994147008342e-02, -1.335145753692753e-02, -1.924569216488370e-03, -3.778539906933434e-03, -1.258091935238775e-02, -5.458676112396324e-03, -5.458676112396558e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.639548211037766e-10, -2.639953018045330e-10, -2.641462400059752e-10, -2.635471330333051e-10, -2.638650462265502e-10, -2.638650462265502e-10, 1.224945704475410e-06, 1.225197829408637e-06, 1.230867916766739e-06, 1.219864241109487e-06, 1.225090298693260e-06, 1.225090298693260e-06, 2.320135024778996e-03, 2.312063759395016e-03, 2.084107364211832e-03, 1.931394950195432e-03, 1.990619666713037e-03, 1.990619666713037e-03, 2.904633233197007e-01, 2.924318609651687e-01, 1.976107719506210e-03, 4.069189181109122e-01, 4.125102141145557e-01, 4.125102141145545e-01, 2.543806662696902e-02, 2.996555809263341e-02, 1.488860914446971e-01, 8.996246970891244e-03, 1.879784785103502e-02, 1.879784785734899e-02, -1.181302643236609e-06, -1.209228672916109e-06, -1.182759148795002e-06, -1.207396085347857e-06, -1.195293256993042e-06, -1.195293256993042e-06, 6.859515271324603e-06, 6.859628404520701e-06, 6.513426722413091e-06, 6.512000712567029e-06, 7.035264243566933e-06, 7.035264243566933e-06, 4.776910379780783e-03, -1.307854056596344e-02, 8.606648945201347e-03, 8.929512564773917e-03, 3.522794197941536e-03, 3.522794197941536e-03, 3.031764113785888e-01, 1.579411226162170e-01, 3.177227710584477e-01, 2.595789115020500e-05, 4.903726623808123e-01, 4.903726623808121e-01, 8.788561626992757e-03, 1.106031705144560e-02, 1.106431847346891e-01, 3.394556593026802e-01, 4.815477711540368e-02, 4.815477713805694e-02, -2.216071355107002e-01, -1.135429779136131e-01, -1.432753704978270e-01, -1.740099122609180e-01, -1.578405337603080e-01, -1.578405337603080e-01, -2.443447260240735e-01, 8.415676315380670e-03, 3.902441208675177e-03, -2.135496402446216e-02, -3.964080104628793e-03, -3.964080104628784e-03, -3.738373389729046e-03, 8.393340552832540e-02, 5.585745810384778e-02, 3.906145614951437e-02, 4.507566663682179e-02, 4.507566663682183e-02, 1.295557545408457e-02, 1.220195020784214e-01, 1.829518412879115e-01, 6.219135661039923e-02, 5.462423891014589e-01, 5.462423891014619e-01, 3.158460642067591e-02, 1.199451128116160e-02, 1.508987780446129e-02, 5.064415171303963e-01, 5.996321687239399e-02, 5.996321681139074e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.789202113341692e-04, 4.789444021333247e-04, 4.790465539369277e-04, 4.786888922308053e-04, 4.788770038616410e-04, 4.788770038616410e-04, -9.002837845282755e-05, -8.958347775165570e-05, -7.762827436188558e-05, -8.248909783597915e-05, -8.199005638049305e-05, -8.199005638049305e-05, -3.546678431139488e-03, -3.518393512198701e-03, -2.849193968336520e-03, -2.820448849042691e-03, -2.851387271686528e-03, -2.851387271686528e-03, -1.335214845393612e-02, -1.285257944509339e-02, -3.704233044417152e-03, -2.911940855799927e-02, -2.674029199891433e-02, -2.674029199891438e-02, -4.789814311501980e-05, -5.771769259541764e-05, -2.960607480942856e-03, -7.313519553180977e-06, -1.960606430362209e-05, -1.960606430362209e-05, 8.320135280293616e-03, 8.404146702287264e-03, 8.325675867020434e-03, 8.399765385982610e-03, 8.361699841949795e-03, 8.361699841949795e-03, -7.797821121453613e-04, -7.358871214269845e-04, -7.966972725190762e-04, -7.770402812715966e-04, -7.386585965128067e-04, -7.386585965128067e-04, 2.721051547995441e-02, -2.390917083839547e-02, 3.677182337215082e-03, 1.193178899008309e-02, 3.319621359055410e-02, 3.319621359055410e-02, -1.972612032637744e-02, -1.949541955841991e-02, -1.799776533536485e-02, 2.827059654741729e-03, -3.161855752247222e-02, -3.161855752247230e-02, -2.396413240902004e-06, -6.057094197674382e-06, -2.256631858906473e-05, -1.033634766134065e-02, -1.483061793162741e-05, -1.483061793166658e-05, 4.148789421121848e-01, 1.042625070089340e-01, 1.646742933150641e-01, 2.484879917690059e-01, 2.017882558267272e-01, 2.017882558267272e-01, 1.930153096815352e-01, 1.936047948200658e-02, 6.188629617532829e-02, 6.453869344118031e-02, 7.418645236653074e-02, 7.418645236653067e-02, -2.000844079274684e-03, -8.752206028137791e-03, -6.864119100777281e-03, -1.312080488940003e-02, -1.333074645021445e-02, -1.333074645021436e-02, -2.775997875146701e-04, -2.686713949661548e-03, -5.142151380833165e-03, 1.640446921230694e-03, -2.108811755299870e-02, -2.108811755299844e-02, -6.069910619913842e-05, -1.598320085385850e-07, -3.995473816650257e-06, -2.015960991254358e-02, -1.689481685057330e-05, -1.689481685038210e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
