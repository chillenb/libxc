
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.117855389358510e-01, -1.117797508877442e-01, -1.117563843463974e-01, -1.118420407492998e-01, -1.117968402371021e-01, -1.117968402371021e-01, -1.108717504738446e-01, -1.108699345639176e-01, -1.108241029489999e-01, -1.108448541572279e-01, -1.108396415393439e-01, -1.016247201920841e-02, -8.658635159380819e-02, -1.284686690828148e-02, -1.136579464312863e-02, -1.210433554274911e-02, -1.194181872540568e-02, -1.194181872540568e-02, -9.234495598457328e-03, -9.577993275051178e-03, -1.417869511042976e-01, -1.498475790193302e-02, -9.537333231819154e-03, -9.537333231819094e-03, -7.941125509036039e-03, -8.286959516232121e-03, -2.798075239464247e-02, -4.961924088376017e-03, -6.048546291236277e-03, -6.048546291236277e-03, -2.812442931844322e-01, -2.831858473867839e-01, -2.813558237737406e-01, -1.301042050891537e-02, -2.822167760068387e-01, -2.822167760068387e-01, -9.743483801348142e-02, -9.687230070724077e-02, -9.797884967065713e-02, -9.737168757468720e-02, -9.689348824894088e-02, -1.123504780969291e-02, -3.664582647960328e-02, -8.125235706993932e-02, -1.915705524260231e-02, -3.733597606907573e-02, -4.416691328534834e-02, -6.306618632096443e-02, -1.573969827236710e-01, -9.445336177402903e-03, -1.568292192831264e-01, -6.646497636018853e-02, -1.891595989004788e-02, -1.891595989004782e-02, -1.514716044827074e-02, -4.864697485048172e-03, -3.832236079063227e-03, -1.417229203624226e-01, -1.736467711895297e-02, -4.522463947438831e-03, -3.928358815969644e-02, -5.983936060689726e-02, 6.351118485294618e-02, -4.546335560293591e-02, -4.861419549720149e-02, -4.861419549720149e-02, -3.938894531176176e-02, -2.419221729319475e-02, -4.695569105138170e-02, -7.509325090098949e-02, -6.201656941687250e-02, -5.230886482181332e-02, -7.203624105143727e-02, -8.235339398445367e-02, -1.176942878183604e-02, -5.365510755823315e-02, -1.400131542867549e-02, -1.400131542867549e-02, -5.772655388406884e-02, -2.737175388603237e-02, -3.133726923335391e-02, -1.767745982377116e-02, -1.447024465732748e-01, -2.832204774806344e-02, -1.056556958637575e-02, -1.467941971237053e-03, -2.904046763773241e-03, -2.855801653976564e-02, -4.221865797806601e-03, -4.221865797806623e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.956225895854995e-01, 1.956473036936314e-01, 1.957473082060326e-01, 1.953814732280742e-01, 1.955745304924572e-01, 1.955745304924572e-01, -1.084223578669891e-01, -1.084483690436512e-01, -1.091302812992214e-01, -1.088580560241395e-01, -1.088845941925004e-01, -6.144142786425269e-02, -4.625726031319599e-03, -4.263201146536642e-02, -4.559105266544781e-02, -4.477795342510677e-02, -4.505730791810011e-02, -4.505730791810011e-02, -3.296988071149080e-02, -3.469207875053000e-02, 5.267052265104861e-02, 6.725757530217584e-03, -7.105993561348298e-03, -7.105993561347826e-03, -1.012058092758413e-02, -1.054396093134339e-02, -2.952040673303885e-02, -6.403841958583754e-03, -7.769491174286000e-03, -7.769491174286000e-03, -6.079194506597625e-01, -6.068970369352021e-01, -6.078610648233018e-01, 3.359186511140522e-01, -6.074122606819318e-01, -6.074122606819318e-01, -7.346601491081813e-02, -7.794514398039140e-02, -6.987492174698370e-02, -7.399174016501460e-02, -7.768758447959838e-02, -2.922790312576448e-02, -1.643305843170595e-01, -1.361617633821054e-01, -8.720218365063320e-02, -1.638047298366985e-01, -1.799043932679572e-01, -5.039265183335053e-02, -1.050451692077797e-01, -7.539805908794182e-03, -1.150022782662348e-01, -3.190713383025252e-01, 6.378631952500107e-03, 6.378631952499703e-03, -1.963954132516285e-02, -6.281360058062085e-03, -4.960687473240821e-03, -1.371683275066388e-01, -2.245459371181658e-02, -5.841688646731044e-03, 5.334790492527837e-02, 8.362129823216116e-02, 1.320825624197635e-01, 7.772065861908392e-02, 8.310133096322649e-02, 8.310133096322649e-02, 6.445637414026864e-02, -1.137382057943312e-01, -1.709909334736087e-01, -1.048929956504635e-01, -1.622783873844491e-01, 1.570506435606939e-02, -1.854971678621070e-01, 2.701061006103199e-02, -4.061277041261030e-02, -4.137296464863270e-02, -3.374648838879424e-02, -3.374648838879433e-02, -6.146717320414515e-02, -2.928801617456879e-02, -2.944124531582358e-02, -6.732326074983608e-02, -1.094782991606773e-01, -9.713283112621603e-03, -1.335111685470814e-02, -1.924569087989186e-03, -3.778539611343157e-03, -1.173206472515099e-02, -5.458668124334548e-03, -5.458668124334794e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.117483683465656e-08, -1.117622308835956e-08, -1.118174002829836e-08, -1.116123210142761e-08, -1.117206656609750e-08, -1.117206656609750e-08, 1.318192106149203e-05, 1.318180714508367e-05, 1.317755118552646e-05, 1.317457295712210e-05, 1.318037446375925e-05, 4.480841057815246e-07, 1.085803979431346e-02, 5.306390146323195e-04, 5.124254790679800e-04, 5.312549342939908e-04, 5.264956409239439e-04, 5.264956409239439e-04, 2.553893716363099e-01, 2.508953795642489e-01, 9.239059653772311e-03, 2.311584987258052e-01, 2.770129409338248e-01, 2.770129409338251e-01, 2.480790407060491e-02, 2.861843054948318e-02, 1.066381242559072e-01, 6.373547910989924e-03, 1.526746614874507e-02, 1.526746614874507e-02, -1.174204332271200e-06, -1.202008834768102e-06, -1.175797734225227e-06, -9.784035389909783e-06, -1.188059380993489e-06, -1.188059380993489e-06, 1.300310073158082e-04, 1.266341326685666e-04, 1.326355736781550e-04, 1.294851309754256e-04, 1.269592844580789e-04, 5.779553281423635e-06, 3.289971699384105e-03, -7.930671928676906e-03, 4.613011150520263e-03, 3.871132572745950e-03, 2.467891263341926e-03, 8.022599465551485e-03, 1.175569472108349e+02, 1.329140803722964e-01, 1.650811460894572e+02, 7.151429025824179e-06, 3.545139720643054e-01, 3.545139720643040e-01, 1.949684215494087e+08, 5.100617752493226e-03, 7.452274906759689e-02, 8.856861589517415e+02, 1.050352029823228e+08, 2.428955939264479e-02, -2.044424720885576e-01, -1.060025168094837e-01, -1.801100189539662e-01, -1.612858746473671e-01, -1.465521784139554e-01, -1.465521784139554e-01, -2.085241488006832e-01, 8.000725879522278e-03, 3.637058682071190e-03, -1.939808546614575e-02, -3.634752136823798e-03, -8.758171828702007e-03, -2.013952466795875e-03, 1.454624420808872e+00, 4.553038160300697e-02, 1.304768954640325e-01, 3.415441876073382e-02, 3.415441876073386e-02, 4.559841687698776e-02, 1.035244902339112e-01, 1.217991309583065e-01, 4.231296877378398e-02, 3.091604684108868e+02, 3.641454573491529e-01, 1.403937003997645e-02, 6.897680090288741e-04, 1.251014900883365e-02, 3.935092913193093e-01, 3.625360218865854e-02, 3.625360221584212e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.842798814473362e-04, -1.842954522777983e-04, -1.843577535499461e-04, -1.841273659998645e-04, -1.842490324623695e-04, -1.842490324623695e-04, -8.993094439929415e-05, -8.974364612603895e-05, -8.481174553694271e-05, -8.678920202430149e-05, -8.659273165544736e-05, -8.070888700539916e-05, -8.816592457818169e-03, -1.208894688192424e-03, -6.329126473708493e-04, -8.458336396702224e-04, -7.871813645170135e-04, -7.871813645170135e-04, -1.205239564741653e-02, -1.120747739301403e-02, -8.559280359360771e-03, -2.800909961187797e-02, -2.481976569170322e-02, -2.481976569170326e-02, -4.789814206880977e-05, -5.771768965606965e-05, -2.960290367416696e-03, -7.313519326787356e-06, -1.960606314885863e-05, -1.960606314885863e-05, 8.355671281768028e-03, 8.439976245336904e-03, 8.360510556957424e-03, -5.077906230499031e-03, 8.397755050098368e-03, 8.397755050098368e-03, -6.425533432721034e-04, -5.589767265179549e-04, -7.076859628624649e-04, -6.326505062007416e-04, -5.639963563090088e-04, -7.449090008255254e-04, 3.734500265774154e-02, 8.048123008269970e-02, 5.428490417075001e-03, 4.113902646941154e-02, 4.815921427041735e-02, -9.530784339783133e-03, -4.488440781294240e-02, -1.888257172220921e-02, -4.000155387238575e-02, 1.058852631350385e-02, -3.125452263206286e-02, -3.125452263206293e-02, -4.599897713009717e-06, -6.057093800059041e-06, -2.256631666114909e-05, -2.134068894075150e-02, -2.847466322030135e-05, -1.483061603741520e-05, 5.736921843187162e-01, 1.817383480498728e-01, -1.568907654363473e-01, 3.705689436747399e-01, 3.117384169844705e-01, 3.117384169844705e-01, 4.994494573028509e-01, 1.987114580927902e-02, 6.669397616668299e-02, 9.280389717344814e-02, 8.664749171835996e-02, -5.973195036742013e-02, 6.916226272643390e-02, -6.531039452789635e-02, -5.557279499255057e-03, -1.181123534229256e-02, -1.237905390598747e-02, -1.237905390598738e-02, -1.770879157207863e-03, -2.686598311710674e-03, -5.140514877830526e-03, 2.685738890255313e-03, -4.659570625381974e-02, -2.102248981154481e-02, -6.069900873768370e-05, -1.598320078519686e-07, -3.995473796620008e-06, -2.012792556303947e-02, -1.689481527207606e-05, -1.689481527188485e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
