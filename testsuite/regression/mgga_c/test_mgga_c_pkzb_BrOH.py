
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_pkzb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.453744482911543e-02, -5.453810541985667e-02, -5.454036028565291e-02, -5.452957723932138e-02, -5.453779873235921e-02, -5.453779873235921e-02, -4.222714270010943e-02, -4.223132511618932e-02, -4.234748042995794e-02, -4.216366145040330e-02, -4.222920506353407e-02, -4.222920506353407e-02, -2.642177506700329e-02, -2.620964835339830e-02, -2.076842520864815e-02, -2.113747758661947e-02, -2.634536046865217e-02, -2.634536046865217e-02, -1.064037919267485e-02, -1.134503503547227e-02, -3.296846120501933e-02, -2.720743966949263e-03, -1.085355742324600e-02, -1.085355742324600e-02, -1.611342023382747e-07, -1.989022810107806e-07, -3.963443307571141e-05, -3.483051834671105e-09, -1.973751643717223e-07, -1.973751643717222e-07, -6.049690353264182e-02, -6.065841022072707e-02, -6.051333428665399e-02, -6.063889302095907e-02, -6.057975781538155e-02, -6.057975781538155e-02, -2.389211425387262e-02, -2.449547875267472e-02, -2.332120446275174e-02, -2.379497043533787e-02, -2.506093236216352e-02, -2.506093236216352e-02, -3.945292461193363e-02, -5.586891268960068e-02, -3.792180424668765e-02, -5.073322181081847e-02, -4.173560617610405e-02, -4.173560617610405e-02, -7.494748321186883e-04, -5.326647952392274e-03, -8.248908863888274e-04, -7.164834699298969e-02, -1.668565134794431e-03, -1.668565134794431e-03, -3.294280120877858e-09, -5.951166165674986e-09, -4.698273565620872e-09, -1.568885996248419e-04, -5.579601726826871e-09, -5.579601726826871e-09, -5.888038046353294e-02, -5.245579833266596e-02, -5.418154119693344e-02, -5.587318553291914e-02, -5.497941025004839e-02, -5.497941025004838e-02, -6.102354251081282e-02, -3.188848555744011e-02, -3.776927714340510e-02, -4.387902312370168e-02, -4.071466507516009e-02, -4.071466507516008e-02, -5.600406264664976e-02, -9.095481115437757e-03, -1.420769338764297e-02, -2.576244863672096e-02, -1.981410360549556e-02, -1.981410360549556e-02, -2.914790016649428e-02, -2.443470986049277e-05, -8.866356778607091e-05, -2.999602162475744e-02, -5.295514045103817e-04, -5.295514045103853e-04, -2.203476698491304e-07, -2.195662838482006e-11, -4.428950782094971e-10, -5.334952600528701e-04, -3.809633000849593e-09, -3.809633006387118e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_pkzb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.147528674619720e-01, -1.147535400365355e-01, -1.147546736453242e-01, -1.147436297310809e-01, -1.147532386427256e-01, -1.147532386427256e-01, -1.068426150515479e-01, -1.068468841393854e-01, -1.069616880413501e-01, -1.067229947196068e-01, -1.068450904721923e-01, -1.068450904721923e-01, -7.566399879731671e-02, -7.537920161401787e-02, -6.683790312233898e-02, -6.734216357014304e-02, -7.556150751609063e-02, -7.556150751609063e-02, -3.747436732059527e-02, -3.902111369095662e-02, -8.589273687865988e-02, -1.335016649153829e-02, -3.795705079255549e-02, -3.795705079255549e-02, -9.726270500724993e-07, -1.200255164103198e-06, -2.321544781613292e-04, -2.193451682254565e-08, -1.190761244840862e-06, -1.190761244840862e-06, -1.128608408452616e-01, -1.130092914310760e-01, -1.128728984218949e-01, -1.129884737952161e-01, -1.129410682395669e-01, -1.129410682395669e-01, -7.323158119211752e-02, -7.402970053541118e-02, -7.214275739330928e-02, -7.278557315036580e-02, -7.517660557524661e-02, -7.517660557524661e-02, -7.936052462452392e-02, -8.218719857058721e-02, -7.939522864462989e-02, -8.149081633420746e-02, -7.998252147660384e-02, -7.998252147660384e-02, -4.053951771630511e-03, -2.302476367113366e-02, -4.435323834610524e-03, -1.173990372469563e-01, -8.461461510591546e-03, -8.461461510591546e-03, -2.046594836515566e-08, -3.720156327346256e-08, -2.907194269341033e-08, -9.121871902544613e-04, -3.514351340857573e-08, -3.514351340467566e-08, -7.654855849337369e-02, -7.694148899739194e-02, -7.736528258853527e-02, -7.740274030154912e-02, -7.743118065655617e-02, -7.743118065655617e-02, -7.406854872351849e-02, -6.788277278301463e-02, -7.039830619572442e-02, -7.326381007811276e-02, -7.183037978036992e-02, -7.183037978036991e-02, -8.419912316240594e-02, -3.463007123576836e-02, -4.672490479371902e-02, -6.389229515451658e-02, -5.596628043373721e-02, -5.596628043373721e-02, -6.858801357907798e-02, -1.430268496031095e-04, -5.139271628779410e-04, -6.543716394799752e-02, -2.902208737428293e-03, -2.902208737428284e-03, -1.368401254413324e-06, -1.409198232423821e-10, -2.744321178239450e-09, -2.925688277623144e-03, -2.406826002641035e-08, -2.406826002865564e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.219834322049977e-10, 1.219857694821633e-10, 1.219844323467230e-10, 1.219460137006605e-10, 1.219847681770658e-10, 1.219847681770658e-10, 9.831694796505845e-07, 9.833186068686642e-07, 9.871138232131003e-07, 9.777815847136023e-07, 9.832361748559133e-07, 9.832361748559133e-07, 1.591008013642808e-03, 1.577919182742847e-03, 1.230523546455952e-03, 1.198103924583295e-03, 1.586307630516570e-03, 1.586307630516570e-03, 1.596148374125271e-01, 1.651424736395778e-01, 9.956606701564191e-04, 1.414294450034680e-01, 1.616169305151542e-01, 1.616169305151542e-01, 2.945856650142507e-02, 3.173967469653265e-02, 6.464590482204620e-02, 5.520618794795509e-03, 3.308168436718806e-02, 3.308168436718806e-02, 1.827988971303510e-07, 1.845606270649296e-07, 1.829558731536786e-07, 1.843264370563794e-07, 1.837283410669472e-07, 1.837283410669472e-07, 4.380246478138468e-06, 4.287838515712375e-06, 4.228135495707471e-06, 4.156397403756276e-06, 4.522664826845676e-06, 4.522664826845676e-06, 5.220404054208433e-03, 8.535025452708633e-03, 6.703765654763013e-03, 1.051765595969642e-02, 4.786271502053446e-03, 4.786271502053446e-03, 9.049274464154981e-02, 5.903458590811360e-02, 1.113044953430591e-01, 6.129561254757277e-05, 1.371819360605588e-01, 1.371819360605588e-01, 5.689169680809221e-03, 7.086414606571651e-03, 2.144974105989410e-02, 1.039435351948345e-01, 1.094662192873136e-02, 1.094662192518332e-02, 3.319222187310977e-02, 1.827328342446267e-02, 2.269434295211717e-02, 2.701961653020462e-02, 2.475511298703930e-02, 2.475511298703930e-02, 2.416988442709448e-02, 4.227510726821970e-03, 5.299927683606312e-03, 8.354514866553496e-03, 6.487152327775237e-03, 6.487152327775240e-03, 6.618243392687540e-03, 3.848421313967288e-02, 3.222722652971716e-02, 2.760779505879155e-02, 2.945407260150487e-02, 2.945407260150486e-02, 8.535209645976555e-03, 4.462185664711731e-02, 6.927431436832285e-02, 4.956585178708473e-02, 1.509021297484467e-01, 1.509021297484473e-01, 2.436576882097070e-02, 1.779822631890287e-03, 4.326298712733423e-03, 1.951805680686545e-01, 1.480774970270515e-02, 1.480774969966648e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.990588495210673e-06, 6.990591649879354e-06, 6.991294829006653e-06, 6.991286751609513e-06, 6.990583652099134e-06, 6.990583652099134e-06, 2.140001061100368e-05, 2.140542393149600e-05, 2.159139118900502e-05, 2.186237394888356e-05, 2.139912186687278e-05, 2.139912186687278e-05, 1.676098645935662e-04, 1.693522485111577e-04, 2.107140077340425e-04, 2.454384617384751e-04, 1.682801428034919e-04, 1.682801428034919e-04, 6.196158642755358e-03, 6.405124464418573e-03, 1.592987559398256e-05, 6.884575285854109e-04, 6.241220019306757e-03, 6.241220019306757e-03, 1.447597042178308e-07, 1.771785701927262e-07, 1.940113499374155e-05, 9.881699307130402e-10, 1.806243909432888e-07, 1.806243909432885e-07, 9.021585912018587e-05, 8.879316635591688e-05, 9.009809675614821e-05, 8.899072807954315e-05, 8.945712990642947e-05, 8.945712990642947e-05, 2.195982018217159e-04, 2.356580284307910e-04, 2.201001291419835e-04, 2.331710589015996e-04, 2.291420163979144e-04, 2.291420163979144e-04, 6.854427608361893e-04, -1.077677484102651e-03, 4.754328792932374e-04, -4.844408498607632e-04, 4.622052880103789e-04, 4.622052880103789e-04, 2.704503136472114e-04, 2.206081668959726e-03, 3.211175495836190e-04, -2.996881203701133e-05, 7.869021785886358e-04, 7.869021785886358e-04, 1.570375388597002e-09, 2.219886446594629e-09, 4.426438515321857e-09, 4.696430492155713e-05, 1.957668936304921e-09, 1.957668936304918e-09, -3.939291140299345e-02, -2.996452816698297e-02, -3.655290691964479e-02, -4.075208100072972e-02, -3.886447220563413e-02, -3.886447220563418e-02, -7.950080877465413e-03, 5.115872014015865e-03, 3.485212342190923e-03, -2.249069228323510e-03, 1.340348625160253e-03, 1.340348625160234e-03, -5.913947629561633e-04, 3.524423228143130e-03, 4.200024626216617e-03, 2.761146793725026e-03, 4.434233235900289e-03, 4.434233235900305e-03, 2.881092343617211e-03, 1.265679459083975e-05, 3.783301203609624e-05, 2.055270727517509e-03, 2.670436813477613e-04, 2.670436813477707e-04, 7.296059266824755e-08, 5.214451170168874e-12, 3.182771502464087e-10, 2.876222267424425e-04, 1.510835825035990e-09, 1.510835830644138e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
