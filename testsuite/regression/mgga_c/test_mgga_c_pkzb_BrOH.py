
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_pkzb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698516499e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -2.671557495883905e-02, -6.686302819127440e-02, -1.224729261894850e-02, -1.023167591821682e-02, -1.109567987563182e-02, -1.230136819556730e-02, -1.230136819556730e-02, -9.720921059675577e-03, -1.026738313294283e-02, -7.129454252820250e-02, -1.665478394278560e-03, -9.875692825442520e-03, -9.875692825442520e-03, -1.562313409273623e-07, -1.912747723537942e-07, -3.206531407365991e-05, -1.898337053829163e-09, -1.908039741913157e-07, -1.908039741913156e-07, -6.038622583977958e-02, -6.054789378071827e-02, -6.040408273582166e-02, -1.224181159734425e-01, -6.046725731628762e-02, -6.046725731628762e-02, -9.468307849320164e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572411e-02, -9.491339721119327e-02, -2.319660998110139e-02, -3.315271195227691e-02, -4.200534464662534e-02, -2.881237514645204e-02, -3.543524341507039e-02, -3.626483775967519e-02, -6.444458984389427e-02, -2.795790560897061e-02, -4.896819843239314e-03, -2.775589238622643e-02, -4.116358553330455e-02, -1.358939762430948e-03, -1.358939762430948e-03, -3.066310498112501e-03, -3.767154874819545e-09, -3.872971337022266e-09, -2.111687625325582e-02, -3.174878197427740e-03, -3.014888114576685e-09, -5.007199869974205e-02, -4.864239507842055e-02, -6.421258200260355e-02, -4.960217496845125e-02, -4.940562246093728e-02, -4.940562246093728e-02, -4.909542155615720e-02, -3.135925105741127e-02, -3.683562127344080e-02, -4.198328259941985e-02, -3.935877279847321e-02, -6.165502636499921e-02, -3.996340388709153e-02, -4.342835275928391e-02, -1.292928619393018e-02, -5.212060951466563e-02, -1.758979791725875e-02, -1.758979791725877e-02, -5.782933926396749e-02, -2.165598371496535e-05, -6.836541294150804e-05, -2.443268150871949e-02, -2.479856847389609e-02, -4.151225600571079e-04, -1.248857573678323e-07, -9.280559506775904e-12, -3.851849877715452e-10, -4.102317686982005e-04, -1.987256189445027e-09, -1.987256196909760e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_pkzb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821491154e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -7.780252732361288e-02, -7.491623656166164e-02, -4.543533226384560e-02, -4.000330191010523e-02, -4.239969136813204e-02, -4.557253650599074e-02, -4.557253650599074e-02, -3.500846600014798e-02, -3.625630210611569e-02, -7.955565354779474e-02, -8.326296427861970e-03, -3.536881367695655e-02, -3.536881367695655e-02, -9.408454520906530e-07, -1.150845785930331e-06, -1.851673985369431e-04, -1.157484068164133e-08, -1.148190634372411e-06, -1.148190634371193e-06, -1.125183485680177e-01, -1.126679254924156e-01, -1.125348520859110e-01, -1.321322029122264e-01, -1.125933016463837e-01, -1.125933016463837e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -7.072211384021815e-02, -6.953941149094735e-02, -7.190419403170456e-02, -6.726343651301059e-02, -6.968677727294011e-02, -7.070537093376396e-02, -7.237723572555273e-02, -3.318915835573125e-02, -2.133831103204108e-02, -3.296452513148780e-02, -8.915834814137423e-02, -6.895516474512337e-03, -6.895516474512337e-03, -3.946287688264066e-03, -2.293669573501590e-08, -2.367035814984119e-08, -2.549362941948338e-02, -4.083422991717209e-03, -1.838024745553309e-08, -7.632665860678822e-02, -7.298319179163738e-02, -7.213338981778679e-02, -7.480753314127123e-02, -7.433200412557082e-02, -7.433200412557082e-02, -7.406802294732970e-02, -6.665622864504731e-02, -6.785187487951488e-02, -6.853643624956661e-02, -6.815694056997879e-02, -6.944209849581727e-02, -7.286570972550709e-02, -5.006348929577377e-02, -4.363321167628690e-02, -5.935291128433449e-02, -5.173021437163289e-02, -5.173021437163289e-02, -6.540488546969517e-02, -1.256537382964367e-04, -3.900126277917692e-04, -5.782520623371557e-02, -2.965891225314009e-02, -2.254787794968573e-03, -7.504928653347552e-07, -5.740047730998552e-11, -2.365524252537309e-09, -2.229034381228832e-03, -1.214206181742499e-08, -1.214206181897635e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.162336672663971e-09, 8.162257422712558e-09, 8.161845521011715e-09, 8.163144477527226e-09, 8.162295366782864e-09, 8.162295366782864e-09, 1.161824147373395e-05, 1.161814394152891e-05, 1.161355123566127e-05, 1.161161751276436e-05, 1.161799334343939e-05, 2.497189145320389e-07, 8.605282031097209e-03, 3.029766947460983e-04, 2.725552759511162e-04, 2.921817785055238e-04, 3.037547550575142e-04, 3.037547550575142e-04, 1.237517105255797e-01, 1.240461284231326e-01, 4.170780912619088e-03, 5.323243968957313e-02, 1.237483437734656e-01, 1.237483437734656e-01, 2.772843508837246e-02, 2.939970697210614e-02, 4.256684485646351e-02, 1.844971972178297e-03, 3.095787993784135e-02, 3.095787993749017e-02, 1.798557480098692e-07, 1.816115672357679e-07, 1.800493510484676e-07, 2.314253033950547e-06, 1.807317579030046e-07, 1.807317579030046e-07, 1.163245234073887e-04, 1.131030829737328e-04, 1.176592973766211e-04, 1.150992589790646e-04, 1.124713164004324e-04, 3.391359688376340e-06, 1.971695342187605e-03, 2.410742286462794e-03, 2.104494070359102e-03, 2.323794102252343e-03, 1.927162727235947e-03, 1.288149721810157e-02, 1.908490249508757e+01, 4.841625722350418e-02, 2.009554016434895e+01, 8.763471074731956e-06, 8.935972022853710e-02, 8.935972022853710e-02, 3.442283364651598e+06, 3.062935066754767e-03, 1.492255581708657e-02, 1.272688397450553e+02, 2.927796305813880e+06, 3.604463708130975e-03, 4.108698006202752e-02, 1.603059377545609e-02, 1.339414080474125e-02, 2.732841076781221e-02, 2.394811130355445e-02, 2.394811130355445e-02, 3.179573476822666e-02, 3.600491260334703e-03, 3.953472092327626e-03, 5.555754237617644e-03, 4.462215831174037e-03, 2.067627119743510e-02, 1.555602472077857e-03, 5.966635762621976e-01, 2.414147603116419e-02, 1.122617999707570e-01, 1.895522018590278e-02, 1.895522018590272e-02, 4.016498744686525e-02, 3.507130170977903e-02, 4.151592231415647e-02, 1.926770783963366e-02, 4.397406555476939e+01, 9.240574686235523e-02, 8.574325673345694e-03, 3.971489087572593e-04, 3.328989097323953e-03, 1.151876735800957e-01, 4.605462483052886e-03, 4.605462474197764e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.067284878536265e-29, -3.559403006344413e-99, -3.559861822110605e-99, -3.557697348023161e-99, -3.559340368667720e-99, -3.559340368667720e-99, -1.432237262131433e-86, -1.433175049088366e-86, -1.460766003198325e-86, -1.447962565408452e-86, -1.432376728750020e-86, 1.184101821172958e-04, -6.513744808529947e-75, 8.270112465273772e-04, 6.498668253877552e-04, 7.304309074518678e-04, 8.319437247803481e-04, 8.319437247803481e-04, 7.244917340021397e-03, 7.717944028910063e-03, -8.001604309676154e-77, 8.296548393257622e-04, 7.375954701652607e-03, 7.375954701652607e-03, 1.447785341659583e-07, 1.772103254889682e-07, 1.957131774911513e-05, 9.885920683565579e-10, 1.806524802654638e-07, 1.806524802654637e-07, 9.319248844895369e-05, 9.176064789955165e-05, 9.303639032518116e-05, -7.191744775989435e-43, 9.247964185184372e-05, 9.247964185184372e-05, -2.645571946976890e-37, -2.012571751086647e-82, -2.013644063807265e-82, -2.011580830891837e-82, -2.025284625903774e-82, 2.851730740404213e-04, 4.908008425018935e-03, 2.577352810173066e-03, 4.671114551507123e-03, 5.080722539250010e-03, 4.711715200931809e-03, -2.758399377053644e-72, -7.766453153097981e-63, 2.352819353383686e-03, -1.145476265480126e-62, 6.943436672773583e-04, 8.389856498231235e-04, 8.389856498231235e-04, -2.079338611897275e-47, 2.220820894318220e-09, 4.427300446897175e-09, -1.928379251520812e-60, -1.358440734733360e-47, 1.958738285308870e-09, -1.316708104900881e-01, -4.209483132088399e-02, -6.201342680029527e-70, -8.269881131544954e-02, -7.059375550118550e-02, -7.059375550118550e-02, -8.820563274144520e-02, 6.017785233888243e-03, 5.418003267551087e-03, 5.187049321346206e-04, 3.949480974750884e-03, -5.674974821496702e-71, 3.680039424336181e-03, -3.415449758915605e-67, 5.140808399939511e-03, -3.120203759048634e-69, 6.680762289866640e-03, 6.680762289866683e-03, -7.273307346870327e-71, 1.270808863537279e-05, 3.841962670603085e-05, 9.679146722963036e-03, -1.905084912439692e-61, 2.773148696256030e-04, 7.312302806486537e-08, 5.214848183254213e-12, 3.182936667811336e-10, 2.997160456949767e-04, 1.511603764502551e-09, 1.511603776723577e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
