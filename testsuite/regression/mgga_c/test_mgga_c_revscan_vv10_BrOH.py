
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revscan_vv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.200698998515953e-01, -1.200673156122300e-01, -1.200560672065890e-01, -1.200981089950312e-01, -1.200685381496092e-01, -1.200685381496092e-01, -1.134382060315353e-01, -1.134309320719148e-01, -1.132182737015558e-01, -1.133017961500866e-01, -1.134363256204295e-01, -2.370329866057015e-02, -9.285581673795654e-02, -1.787021977516760e-02, -1.714660774769597e-02, -1.745755049705179e-02, -1.788858734575587e-02, -1.788858734575587e-02, -1.340954886550597e-02, -1.362144783409735e-02, -1.106880894649401e-01, -8.795675645379718e-03, -1.347078460806429e-02, -1.347078460806429e-02, -5.883607600761692e-04, -6.254114959984761e-04, -3.072298049111485e-03, -1.878169396402548e-04, -6.202379746828151e-04, -6.202379746828328e-04, -2.787274129506803e-02, -2.788273784540957e-02, -2.787384785915163e-02, -6.990749680344029e-02, -2.787775965215733e-02, -2.787775965215733e-02, -1.056836685999615e-01, -1.038567685957798e-01, -1.065329244293064e-01, -1.050275524194948e-01, -1.033936539669447e-01, -2.244862257047535e-02, -2.232128144309513e-02, -2.386301083170942e-02, -2.141465610882894e-02, -2.268088946020087e-02, -2.291751355928727e-02, -6.349993259833210e-02, -4.425733835799230e-02, -1.169822763081367e-02, -4.384170885412643e-02, -2.540133102804243e-02, -8.049431196055057e-03, -8.049431196055057e-03, -5.105346058983913e-03, -2.217776547802730e-04, -1.752898886079973e-04, -3.346296287560264e-02, -5.279787840793303e-03, -1.997814047257439e-04, -2.496805576855819e-02, -2.470587868607923e-02, -3.144570691255634e-02, -2.487291617645346e-02, -2.483655104748173e-02, -2.483655104748173e-02, -2.476687136734504e-02, -2.167243675303281e-02, -2.271186452851255e-02, -2.358569371995954e-02, -2.315064820676885e-02, -5.294486385209411e-02, -2.366401854792317e-02, -6.175781783625155e-02, -1.573987024155987e-02, -5.635874971671534e-02, -1.736395040942774e-02, -1.736395040942774e-02, -5.827223980703804e-02, -2.795402978516801e-03, -3.827728369444224e-03, -1.915729530540521e-02, -3.909252380761568e-02, -5.854112937702576e-03, -6.450944933807389e-04, -3.486354603711457e-05, -9.644746174680913e-05, -5.726566175588439e-03, -1.656706032642192e-04, -1.656706032641915e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revscan_vv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.585072464483351e-02, 3.585023004275074e-02, 3.584809756241240e-02, 3.585612413349884e-02, 3.585046390330052e-02, 3.585046390330052e-02, -7.017804768512008e-02, -7.025057013899516e-02, -7.244845634027963e-02, -7.159482758931569e-02, -7.019823380911588e-02, -4.848966500321060e-02, -5.620654520218896e-02, -4.500053596991664e-02, -4.477388463409818e-02, -4.485997388243887e-02, -4.500618216422338e-02, -4.500618216422338e-02, -3.830882658262977e-02, -3.828411110200789e-02, -8.781609294882835e-02, -4.473113700251103e-02, -3.830249155479989e-02, -3.830249155479989e-02, -4.354660929330296e-01, -4.165784949559143e-01, -1.190572482751614e-01, -1.277738026021339e+00, -4.140883205635481e-01, -4.140883205635633e-01, -4.299516265232416e-02, -4.295637918836766e-02, -4.299088367338133e-02, 1.537256282389597e-03, -4.297574217666017e-02, -4.297574217666017e-02, -2.915805795368278e-02, -3.194810303399660e-02, -2.839864730866867e-02, -2.997179001501520e-02, -3.292365818095948e-02, -4.797241814855421e-02, -4.194604524472718e-02, -3.905350053609476e-02, -4.282175869519533e-02, -4.109131072482736e-02, -4.115314829274316e-02, -4.607953625678848e-02, -5.102413431585853e-02, -4.029879179797657e-02, -5.043808263979386e-02, -4.528533070761565e-02, -4.566469694677967e-02, -4.566469694677967e-02, -6.519884560570322e-03, -1.075223706919437e+00, -8.254810585582512e-01, -4.005251491456594e-02, -6.737966321249849e-03, -1.079005558320154e+00, -2.993451831324549e-02, -3.261252643494927e-02, -2.271037497267788e-02, -3.099034563180359e-02, -3.136785047277762e-02, -3.136785047277762e-02, -3.083363706538783e-02, -4.148645906373877e-02, -3.977942153163425e-02, -3.746171130349096e-02, -3.875890142920492e-02, -1.154831477525091e-02, -4.042434719750497e-02, -5.114242013519472e-02, -4.070386958745482e-02, -2.767996454934896e-02, -4.105426395811822e-02, -4.105426395811825e-02, -5.312581533383440e-02, -1.340864685333297e-01, -9.612790404453808e-02, -4.025326803311232e-02, -4.560503470981808e-02, -5.824575387019114e-02, -5.243807645516287e-01, -2.859495109804967e+00, -1.382794073275260e+00, -5.809820368834164e-02, -1.091458869949388e+00, -1.091458869949278e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.077575223189526e-09, 6.077360016728027e-09, 6.076370030087046e-09, 6.079878916059207e-09, 6.077462185625791e-09, 6.077462185625791e-09, 1.246036706361152e-05, 1.245847065340303e-05, 1.240007408025051e-05, 1.241859466391702e-05, 1.245960219984160e-05, 3.242589638041955e-07, 1.407982475472222e-02, 6.249014742594147e-04, 6.362111201155344e-04, 6.439363548297065e-04, 6.247374430004858e-04, 6.247374430004858e-04, 3.302774269931048e-01, 3.193092821177900e-01, 7.553855389048713e-03, 8.386646029694430e-01, 3.267644079918158e-01, 3.267644079918158e-01, 5.069259497805286e+04, 4.204072237537546e+04, 1.051204347120051e+02, 8.007447583016222e+05, 4.410312262934992e+04, 4.410312262935155e+04, 1.371562346402278e-07, 1.377596120649929e-07, 1.372233872597907e-07, 1.503071504979420e-06, 1.374575281206509e-07, 1.374575281206509e-07, 1.468025888645930e-04, 1.390713911679812e-04, 1.501514608054884e-04, 1.439390439816585e-04, 1.373486404009683e-04, 4.777209999408113e-06, 3.204993204070708e-03, 3.228688012502841e-03, 3.442979044975695e-03, 3.753491624135324e-03, 3.054425644513052e-03, 1.533007553098405e-02, 3.133346164044519e+01, 2.301859037162724e-01, 3.284754284537942e+01, 1.076910124475808e-05, 1.801876605104738e+00, 1.801876605104738e+00, 3.751531165353724e+06, 5.649730626707802e+05, 2.042507656891251e+06, 1.943288192048044e+02, 3.198456067236032e+06, 8.319408752556208e+05, 7.498534552794582e-03, 6.771146199951163e-03, 1.155524201954927e-02, 7.225999254480282e-03, 7.124200046725879e-03, 7.124200046725879e-03, 8.323758098036024e-03, 6.099456340261745e-03, 6.369804950145426e-03, 6.924526789541691e-03, 6.595508200241738e-03, 3.114992793204575e-02, 2.270587144444087e-03, 9.733306513764884e-01, 5.218424037388605e-02, 1.491492225222157e-01, 3.595787169144017e-02, 3.595787169144025e-02, 4.185367228466925e-02, 1.447333816087148e+02, 3.851046757784369e+01, 3.595040164908798e-02, 6.966379893116071e+01, 8.209870183253070e+00, 2.369114891537521e+04, 7.696817869393200e+07, 7.613454734866338e+06, 1.036492591440224e+01, 1.625384500010900e+06, 1.625384500010743e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-9.541533715140352e-05, -9.541552759942794e-05, -9.541601653733947e-05, -9.541295792715517e-05, -9.541543981128023e-05, -9.541543981128023e-05, -3.994708697947658e-04, -3.989542712281087e-04, -3.831965576521501e-04, -3.892906099591713e-04, -3.993243479690367e-04, -1.614972139016495e-04, -4.588042755480693e-03, -2.220541053961288e-03, -2.110654875785822e-03, -2.174768119038989e-03, -2.223714370844494e-03, -2.223714370844494e-03, -2.594660829148367e-02, -2.597266574601900e-02, -1.630881324187896e-03, -2.838160629355243e-02, -2.594229075971348e-02, -2.594229075971348e-02, -8.496214322419580e-01, -8.097271403504418e-01, -1.350517332585405e-01, -1.482194692403244e+00, -8.231702466575180e-01, -8.231702466575482e-01, -2.763915755388904e-04, -2.779173550615410e-04, -2.765603015559377e-04, -1.099587812743911e-03, -2.771548368710285e-04, -2.771548368710285e-04, -1.671802243781037e-03, -1.620095950946525e-03, -1.684452475774083e-03, -1.656613228906857e-03, -1.602540860208820e-03, -4.297576916732981e-04, -8.047777195791934e-03, -1.113483625913705e-02, -7.167780567009447e-03, -9.316384621964735e-03, -8.794625511103207e-03, -1.196756886003057e-02, -1.288708910006667e-03, -1.945634040236352e-02, -1.462210622680947e-03, -9.969248862919326e-04, -3.784907394382912e-02, -3.784907394382912e-02, -7.169945018444233e-07, -1.401342051729718e+00, -2.133060716148637e+00, -3.763640998485499e-04, -8.186239915877802e-07, -1.560946588185201e+00, -2.370276723749130e-02, -2.083887035197046e-02, -3.057913955716135e-02, -2.262478170409369e-02, -2.222394125081842e-02, -2.222394125081842e-02, -2.376001363088385e-02, -9.888280479435416e-03, -1.230290411084977e-02, -1.568222641846345e-02, -1.378422892570481e-02, -3.924698058401452e-02, -8.849761417280130e-03, -1.234981489833186e-02, -1.341323714503804e-02, -2.247786650118230e-02, -1.313254547903057e-02, -1.313254547903060e-02, -6.032428405373772e-03, -1.479386964492820e-01, -9.711236507251880e-02, -1.624005863659124e-02, -1.257575219606252e-03, -6.180457592758297e-02, -6.392257939835437e-01, -3.918021959951155e+00, -2.656697836852404e+00, -6.780761440314687e-02, -1.872014693741284e+00, -1.872014693741095e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
