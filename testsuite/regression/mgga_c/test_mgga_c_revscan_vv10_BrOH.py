
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revscan_vv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.885619267578063e-02, -2.885622100630248e-02, -2.885580949121510e-02, -2.885531846158306e-02, -2.885621259924021e-02, -2.885621259924021e-02, -4.372658497342127e-02, -4.372861520482516e-02, -4.377866906121564e-02, -4.363300106054332e-02, -4.372796016436264e-02, -4.372796016436264e-02, -3.354113104056889e-02, -3.340058953435904e-02, -2.975950895624039e-02, -2.935166695849241e-02, -3.348947711703428e-02, -3.348947711703428e-02, -1.607522501177320e-02, -1.663456893412969e-02, -4.561253255043415e-02, -1.394851959833819e-02, -1.627702190393735e-02, -1.627702190393735e-02, -1.394622113339627e-03, -1.475924274533536e-03, -5.508627414317120e-03, -5.742554722378373e-04, -1.460310862094019e-03, -1.460310862094020e-03, -2.795690416302211e-02, -2.796633352068767e-02, -2.795688068279805e-02, -2.796426768641141e-02, -2.796307783734988e-02, -2.796307783734988e-02, -2.480626533432767e-02, -2.460551008891639e-02, -2.442602667179419e-02, -2.426487601008078e-02, -2.516623329240142e-02, -2.516623329240142e-02, -3.189074126422706e-02, -3.995523209851418e-02, -3.621246497272633e-02, -4.560372783262006e-02, -3.067443429161967e-02, -3.067443429161967e-02, -1.026932125490147e-02, -1.396423445607028e-02, -1.035053143859853e-02, -6.418508874195837e-02, -1.110152638800716e-02, -1.110152638800716e-02, -5.532716804416551e-04, -6.521310765132543e-04, -5.206257065843573e-04, -7.602147345706751e-03, -6.112164961048947e-04, -6.112164961048947e-04, -2.685365136223512e-02, -2.632814460460342e-02, -2.651352327222154e-02, -2.665892495171465e-02, -2.658675353774678e-02, -2.658675353774678e-02, -2.864991657506183e-02, -2.255071533825902e-02, -2.412714437386157e-02, -2.573900997016123e-02, -2.499233174784911e-02, -2.499233174784911e-02, -4.459041794885452e-02, -1.515582148792519e-02, -1.870938482327281e-02, -2.707161140837519e-02, -2.184590932748805e-02, -2.184590932748805e-02, -2.576156586612816e-02, -4.926939603610458e-03, -6.621483074055044e-03, -2.940431868498521e-02, -9.124647431043900e-03, -9.124647431043902e-03, -1.648302852595773e-03, -1.312505519330156e-04, -3.008794146453521e-04, -9.079653105941381e-03, -5.238138957693581e-04, -5.238138957693703e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revscan_vv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.704692148619646e-02, -4.704674753516187e-02, -4.704520698755886e-02, -4.704799319419402e-02, -4.704683713510084e-02, -4.704683713510084e-02, -8.941663518236036e-02, -8.940605042493845e-02, -8.903809647730450e-02, -8.869336096144566e-02, -8.941683856845127e-02, -8.941683856845127e-02, -6.182631057133587e-02, -6.164848970873242e-02, -5.642795844930281e-02, -5.542260415991317e-02, -6.176002600177372e-02, -6.176002600177372e-02, -4.391364899082820e-02, -4.397068275263818e-02, -9.356639987049033e-02, -2.719962179300041e-02, -4.394849395022496e-02, -4.394849395022496e-02, -4.452261266927287e-03, -4.069830585998496e-03, -1.111661752166244e-02, -1.099242926713467e-03, -4.474931784755583e-03, -4.474931784755526e-03, -4.308628942745443e-02, -4.304617103116754e-02, -4.308071516519071e-02, -4.304961706040180e-02, -4.306774164696622e-02, -4.306774164696622e-02, -5.391023825554687e-02, -5.300243810908092e-02, -5.333246874551331e-02, -5.259600451716427e-02, -5.402959789610854e-02, -5.402959789610854e-02, -5.113897678105023e-02, -3.227428912823669e-02, -5.896551149805680e-02, -4.415377600125229e-02, -4.765554944207871e-02, -4.765554944207871e-02, -2.143527216146256e-02, -4.572725166792587e-02, -2.175454466368741e-02, -5.530773283608644e-02, -2.772952826368514e-02, -2.772952826368514e-02, -1.060728489418524e-03, -1.246321136828559e-03, -1.003857779119997e-03, -1.421990150934753e-02, -1.170136598374895e-03, -1.170136598374895e-03, -2.766570680138547e-02, -3.148165492107206e-02, -3.022393026164263e-02, -2.916799374750292e-02, -2.970500412167914e-02, -2.970500412167914e-02, -2.599862761933797e-02, -4.285542546894305e-02, -4.137234923486665e-02, -3.847655576573616e-02, -4.030630364632420e-02, -4.030630364632419e-02, -3.460374256505647e-02, -4.412365559938678e-02, -4.687669091061933e-02, -5.240893559810181e-02, -4.862217944469605e-02, -4.862217944469606e-02, -5.022847164049895e-02, -1.161780460509461e-02, -1.316107960710973e-02, -5.157236905250095e-02, -2.010421316910220e-02, -2.010421316910218e-02, -3.100412048036176e-03, -2.560047956548889e-04, -5.831117720356797e-04, -1.951079431083472e-02, -1.005920504112619e-03, -1.005920504112629e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.034391650277831e-10, 1.034397627025345e-10, 1.034345149939225e-10, 1.034245611211227e-10, 1.034395505838290e-10, 1.034395505838290e-10, 8.823735607997090e-07, 8.830870596438790e-07, 9.049340756579121e-07, 8.977820712557948e-07, 8.825415193957338e-07, 8.825415193957338e-07, 1.614782485969133e-03, 1.599184571570985e-03, 1.223698978827118e-03, 1.185000968628599e-03, 1.609141672648503e-03, 1.609141672648503e-03, 4.751491224687336e-01, 4.662674234968172e-01, 1.182884942873074e-03, 2.851578774839345e-01, 4.729251129354007e-01, 4.729251129354007e-01, 2.665322757046980e+02, 1.785961135571816e+02, 2.921048795720658e+00, 1.309013248556507e+02, 2.356829583042021e+02, 2.356829583041956e+02, 1.386186212774436e-07, 1.392171094815903e-07, 1.386666632046136e-07, 1.391326057541408e-07, 1.389425565148952e-07, 1.389425565148952e-07, 6.717297695438473e-06, 6.408173550868509e-06, 6.493144512340247e-06, 6.248199366696463e-06, 6.802965293940772e-06, 6.802965293940772e-06, 8.048443699473969e-03, 1.051471536937709e-02, 1.050967278243958e-02, 1.645554766905632e-02, 6.721342937042063e-03, 6.721342937042063e-03, 5.736703967139820e-01, 3.064432372155660e-01, 6.730754496279244e-01, 8.293212686729435e-05, 8.412202861348027e-01, 8.412202861348027e-01, 1.458548080264292e+02, 1.148707062378722e+02, 3.780416045904252e+02, 1.059520340534861e+00, 1.724468046871530e+02, 1.724468046871529e+02, 8.810387103588649e-03, 7.929291460758924e-03, 8.236505190042471e-03, 8.480128041069934e-03, 8.358010655303177e-03, 8.358010655303177e-03, 1.140297635539839e-02, 6.896425804747905e-03, 7.673288269602472e-03, 8.946944672471292e-03, 8.314249301521486e-03, 8.314249301521486e-03, 9.277080706838350e-03, 1.208205993127380e-01, 7.752066900409443e-02, 4.704032091662649e-02, 6.042953036908812e-02, 6.042953036908821e-02, 1.484921776763785e-02, 5.158585822774747e+00, 1.622961785969735e+00, 8.599227738703531e-02, 1.431520442081846e+00, 1.431520442081840e+00, 2.738852217989865e+01, 1.458598470753180e+03, 4.643085901903950e+02, 1.669745875231331e+00, 2.904002959841663e+02, 2.904002959841673e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revscan_vv10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revscan_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.333312278712896e-05, -1.333334667178119e-05, -1.333367350064737e-05, -1.333000554798274e-05, -1.333324667487124e-05, -1.333324667487124e-05, -7.449880957091435e-05, -7.488294727824332e-05, -8.719560221987897e-05, -8.845642098294183e-05, -7.456687244174369e-05, -7.456687244174369e-05, -1.913886818683486e-03, -1.895269905662351e-03, -1.477051949133965e-03, -1.570508574398569e-03, -1.907331788382247e-03, -1.907331788382247e-03, -3.652181909601347e-02, -3.668776343858463e-02, -6.535882795760937e-04, -4.069013119326213e-03, -3.657718068895205e-02, -3.657718068895205e-02, -3.760201134690040e-03, -2.689166742374847e-03, -1.730795430958384e-03, -5.631426525622350e-07, -3.642400582738211e-03, -3.642400582738090e-03, -2.782924534649809e-04, -2.798119306504560e-04, -2.784363883917717e-04, -2.796182104711459e-04, -2.790851111044603e-04, -2.790851111044603e-04, -5.653320708417762e-04, -5.551829171587483e-04, -5.442339654110404e-04, -5.356488468435910e-04, -5.868680516963689e-04, -5.868680516963689e-04, -1.590700320314013e-02, -2.564351590195953e-02, -1.407374651283782e-02, -2.401038262356608e-02, -1.571574785498676e-02, -1.571574785498676e-02, -4.613554916347314e-03, -2.554500153639822e-02, -5.338420827578168e-03, -3.332014151420634e-03, -1.417116596424022e-02, -1.417116596424022e-02, -2.565728661288969e-06, -1.529962678528947e-06, -1.272590397217331e-05, -6.317322935312929e-04, -9.197489387963395e-07, -9.197489387963363e-07, -2.635886992453184e-02, -2.314438186982892e-02, -2.426005651770550e-02, -2.515049488972929e-02, -2.470275552202535e-02, -2.470275552202535e-02, -2.934653821005361e-02, -1.092665265035592e-02, -1.415443568408571e-02, -1.878131882063058e-02, -1.631144332906806e-02, -1.631144332906806e-02, -2.348953522603733e-02, -1.928486860035728e-02, -1.934473782018621e-02, -1.908338750091008e-02, -2.042686886936725e-02, -2.042686886936727e-02, -1.523687972050872e-02, -3.655224464039993e-03, -1.764752592469807e-03, -2.867971628473851e-02, -7.052545085674124e-03, -7.052545085674073e-03, -1.034563618700137e-05, -1.077938982965771e-08, -3.735482814396452e-06, -6.773502945447408e-03, -7.483499639420703e-07, -7.483499639421000e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
