
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_pkzb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504590431e-01, -1.645996352769430e-01, -1.646000385289871e-01, -8.999767176969861e-02, -6.742798565669593e-02, -5.339802942838271e-02, -3.974678908064840e-02, -2.669154104848865e-02, -2.684858797430298e-02, -2.678504656714485e-02, -2.679170988180056e-02, -3.989392444000700e-02, -6.701332647008379e-02, -3.656032669345494e-02, -1.063498043602830e-02, -2.063631928198370e-02, -6.628241523783372e-02, -1.116882012420891e-02, -1.220083404364440e-02, -2.201260938294197e-02, -1.367205884272329e-02, -1.756070872720287e-03, -2.827344903261004e-04, -2.028971348947166e-04, -3.053959317911593e-08, -2.088951034348247e-08, -2.125592570558045e-05, -1.797973970736132e-09, -4.395593336991912e-11, -4.395592977211948e-11, -8.720820292013984e-02, -6.057203466612072e-02, -6.041474280701518e-02, -6.056195606691692e-02, -8.879342637309459e-02, -7.158006040392656e-02, -4.473463258054677e-02, -4.589206842890254e-02, -2.158583695631137e-02, -2.235754082799510e-02, -5.335877648536177e-02, -4.582415363767718e-02, -4.124847115646906e-02, -4.290666161408927e-02, -2.770688026280172e-02, -3.386309359066046e-02, -3.996452032540936e-02, -3.531824258059161e-02, -3.720531556639859e-04, -7.735329826731452e-03, -1.091376908525432e-03, -4.125027915210289e-02, -3.745412269518942e-03, -3.745412269518943e-03, -2.142353276938389e-10, -3.111602515551715e-10, -3.230577672587790e-09, -2.241606853546821e-04, -2.109834827631582e-09, -2.109834827631582e-09, -4.968526059468847e-02, -4.806488963589306e-02, -6.383563580100114e-02, -4.910245430264606e-02, -6.385539257642651e-02, -4.905998505132306e-02, -5.372424134813528e-02, -4.769300330527839e-02, -4.196213310305780e-02, -4.157464966990329e-02, -3.854904257801983e-02, -4.385223927369675e-02, -5.567457091571784e-02, -1.696156149734644e-02, -1.788581429492203e-02, -2.835580325456391e-02, -3.117507982560385e-02, -2.394614538644354e-02, -2.571358487282637e-02, -1.432337785401933e-02, -2.401284278246196e-05, -4.060208734572313e-02, -2.556086862556345e-04, -2.556086862556442e-04, -5.037446550363285e-03, -7.105990080387339e-13, -1.374982125405463e-03, -2.268013163367492e-02, -3.587490681902916e-10, -1.279592340845086e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_pkzb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753468126e-01, -1.747373592471604e-01, -1.747369289286905e-01, -1.747375762850792e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.868068503807570e-01, -1.119567141279017e-01, -1.664191065280941e-01, -1.021270359087164e-01, -1.112836101237775e-01, -1.112911836809618e-01, -8.114614983743472e-02, -1.190234551012534e-01, -7.776805209481909e-02, -7.776712473182860e-02, -7.799282244613286e-02, -7.799948283488807e-02, -7.790508013624584e-02, -7.790314567891228e-02, -7.789501901002129e-02, -7.793237372658141e-02, -1.192359414979105e-01, -8.124487726313587e-02, -7.534022876475922e-02, -7.481054072999213e-02, -9.551779161819195e-02, -6.924906781969625e-02, -4.091618307676595e-02, -4.137162176410247e-02, -5.695442738716878e-02, -7.432742823831742e-02, -7.037457509512339e-02, -7.906556863981586e-02, -4.056670287299990e-02, -4.508787313817984e-02, -4.821912337419425e-02, -3.545705375832358e-02, -6.169578443671744e-02, -4.284702104696037e-02, -4.768525928337395e-02, -5.633476033883785e-02, -8.849427954817484e-03, -8.627698692091859e-03, -1.816248556089530e-03, -9.908779584715553e-03, -1.464220653177459e-03, -1.068061049321750e-02, -1.849485980213033e-07, -1.754696158108727e-07, -1.465319845234133e-07, -1.207421882709536e-07, -1.421341175461534e-04, -1.194262714857389e-04, -1.056717594342127e-08, -1.072092272597998e-08, -3.768080355437980e-10, -4.195199274541585e-09, -3.768080362428035e-10, -4.195199267815414e-09, -1.125440911156471e-01, -1.126495084065167e-01, -1.126605957753927e-01, -1.127265368955267e-01, -1.125131797078488e-01, -1.125827758931049e-01, -1.126438718733344e-01, -1.127245793190353e-01, -1.661841313068600e-01, -9.473578407411619e-02, -9.668256249511969e-02, -1.602352463751253e-01, -9.511778563420022e-02, -9.521536353809705e-02, -9.556906878651787e-02, -9.569010804173179e-02, -6.807042678438048e-02, -6.792796947515131e-02, -6.940567965906205e-02, -6.925859208636807e-02, -8.459804374118349e-02, -1.267740497078574e-01, -9.537413054910876e-02, -9.582806409956426e-02, -5.358718775574178e-02, -9.672751302091816e-02, -7.105822816133413e-02, -7.333811675641198e-02, -6.784509616122184e-02, -6.532926545661157e-02, -7.017787243619436e-02, -6.823993850496322e-02, -5.194768022231463e-02, -1.010332274077991e-01, -6.777588632566514e-02, -7.325419684812451e-02, -2.044004546085379e-03, -2.016670717522699e-03, -3.459273566297105e-02, -2.847119935307260e-02, -5.686599610292859e-03, -5.386826151585688e-03, -8.916066412520648e-02, -8.929244107715480e-02, -1.706170795492410e-02, -1.623483175391235e-02, -1.706170795492414e-02, -1.623483175391233e-02, -1.483319756679219e-09, -1.260374326207222e-09, -1.918285007219732e-09, -1.896043670221088e-09, -1.964299794211679e-08, -1.877175815036515e-08, -1.235116877217573e-03, -1.380383601311149e-03, -1.510463541383815e-08, -1.177916570205227e-08, -1.510463541421746e-08, -1.177916570427984e-08, -7.492023739358958e-02, -7.601173630038206e-02, -7.192210839346930e-02, -7.241874622958323e-02, -7.198832468635551e-02, -7.148872356177728e-02, -8.705061204837217e-02, -6.651166700197321e-02, -7.200798844943504e-02, -7.151058106231506e-02, -8.749230639570042e-02, -6.511719964015916e-02, -6.564195379999056e-02, -6.701864754202230e-02, -4.616131489603512e-02, -8.892499549269513e-02, -4.997874681273710e-02, -9.173823988881474e-02, -6.840274645645071e-02, -6.802595185466608e-02, -6.797579976252789e-02, -6.769016895555180e-02, -4.963036868034446e-02, -9.162988071629505e-02, -4.570643498221262e-02, -9.662463362466796e-02, -5.077481111869318e-02, -5.033535456753940e-02, -6.216731380010369e-02, -4.550840596553738e-02, -7.886825483120560e-02, -4.978895771589822e-02, -6.228369762665438e-02, -6.243510326466807e-02, -4.917518257083486e-02, -7.199895518147970e-02, -6.317315392834534e-02, -6.279680231011048e-02, -1.773472996354030e-02, -1.753120798266076e-02, -1.424970865268441e-04, -1.359050847266456e-04, -5.614220599703233e-02, -5.819887645104740e-02, -1.479688763240001e-03, -1.359837312259367e-03, -1.479688763240041e-03, -1.359837312259393e-03, -6.593851617928385e-03, -6.257235187311729e-03, -4.421274304571174e-12, -4.407999514024723e-12, -1.869567052566783e-03, -1.724808884064576e-03, -2.767194528635373e-02, -2.688551334493897e-02, -3.324506705188505e-09, -1.930664878577507e-09, -8.921334535560029e-08, -7.969987527890920e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161498703699585e-09, 1.632299740738856e-08, 8.161498703691396e-09, 8.161407659079791e-09, 1.632281531815958e-08, 8.161407659079791e-09, 8.160974813433974e-09, 1.632194962686795e-08, 8.160974813433974e-09, 2.111871932644839e-10, 1.614713576093527e-09, 5.249665511057233e-10, -4.645418980544257e-11, 8.327186004992069e-10, 2.674280524881915e-10, -6.899453030180486e-11, 5.488880415143443e-10, -6.894493231874737e-11, 4.778051813572090e-07, 2.128586811964077e-06, 3.050476016614987e-07, -1.015227256631026e-07, 1.200756937936440e-06, -1.017453397284886e-07, -1.040738861622711e-07, 1.212325023105472e-06, -1.034415974269549e-07, -1.028630225682954e-07, 1.207094757948918e-06, -1.028339776522040e-07, -1.061249400382191e-07, 1.208282585162077e-06, -9.983054632337702e-08, 3.089156442414496e-07, 2.145959348237327e-06, 4.875769109355698e-07, 8.392759910613045e-03, 1.678551982122464e-02, 8.392759910611912e-03, 1.594378266174716e-03, 5.551000871677615e-03, 1.684802589663511e-03, 2.282465890899600e-05, 1.081784051409692e-03, 8.770463925891959e-06, 6.868632665971988e-04, 2.638362462424216e-03, 6.348052154427288e-04, 9.137046179770458e-03, 1.827409235954091e-02, 9.137046179770458e-03, 8.465280539435150e-05, 1.148458806365038e-03, -7.515283030574532e-05, 1.948909170064813e-01, 8.712321841421532e-01, 2.419141698510350e-01, 4.646344275535498e-01, 1.768294238390414e+00, 5.398153299878170e-01, 1.761879173814961e-04, 5.958414891684068e-04, 1.846943671391846e-04, 1.800024716596675e-02, 1.966744087017915e-01, 2.228898166239271e-02, 2.439733192012720e-02, 7.671503232719434e-02, -1.259340587008881e-01, 2.679051046512635e-02, 7.402100696385069e-02, -1.034252202834276e-01, 3.031125202534574e-02, 9.850689818657189e-02, 3.346671593637093e-02, 1.632126149582725e-02, 4.945250261450816e-02, 1.789023683330981e-02, 7.280968542142109e-02, 2.130237751075247e-01, 7.794077728063810e-02, 8.609814937918266e-03, 2.602123115115603e-02, 8.382279057243919e-03, 2.955819446498100e-04, 1.566763557458979e-03, -1.865424216799616e-03, 2.955819474282737e-04, 1.566763556159057e-03, -1.865424208499845e-03, -1.165220689480855e-07, 1.567798686959285e-06, -1.166874616375187e-07, -7.063475259826419e-08, 8.675640690374223e-07, -7.095545222403304e-08, -7.139827661471621e-08, 8.621671737755385e-07, -7.162264230395156e-08, -7.086297337798403e-08, 8.672224511807966e-07, -7.082089239398386e-08, -8.229674308497632e-08, 1.914721640161833e-06, 7.495038620893603e-07, 5.458212412812343e-07, 1.162983007298206e-06, -2.865109632828863e-07, 2.004281791963756e-06, 3.809980852078190e-05, 2.025067402494656e-06, 1.739652309517037e-06, 3.852564095684307e-05, 1.743980080286076e-06, -9.400001506526167e-07, 1.493724994576083e-05, -8.264456335385329e-07, -1.052587579389897e-06, 1.532600704479272e-05, -9.282643565944342e-07, 1.557981758674602e-05, 5.575986650084641e-05, 1.348243201905666e-05, 1.930905166571256e-06, 3.855183502985827e-05, 1.587105874288111e-06, 3.310744410952981e-03, 1.518413830102677e-02, -2.606495691431520e-03, -2.539579872842635e-03, 1.382337163293169e-02, -1.200683860573795e-03, -3.242043591649564e-03, 1.259481198433165e-02, -7.102045220707105e-04, -4.511460515186245e-03, 1.510485248529894e-02, -1.302824692408302e-03, 4.548625939319306e-03, 1.422960241935199e-02, -4.590447334537866e-03, -9.402579157853455e-04, 1.259096386104268e-02, -4.044490502674861e-03, 1.503049539713930e-02, 1.186247668587710e-01, 1.629728176778257e-02, 1.313805122544912e-01, 4.339194795553337e-01, 1.354104448453803e-01, 2.184045832896566e-01, 7.648178912509636e-01, 2.424068312129625e-01, -7.969062154515612e-06, 5.091440804095991e-05, -7.950251676732919e-06, 3.692751601337396e-01, 1.460131815310219e+00, 4.287969783815495e-01, 3.692751601337386e-01, 1.460131815310219e+00, 4.287969783815503e-01, 1.724077487898254e-03, 4.924061214340654e-03, 1.804567337676068e-03, 3.774353166288664e-04, 2.600538098923449e-03, 4.180936526959606e-04, 9.242553344019325e-02, 2.987110482738735e-01, 1.014257780200461e-01, 2.232704128274568e-01, 6.028151686407051e-01, 2.245043936348390e-01, 1.124274143518516e-02, 6.874889166195883e-02, 2.544454458753578e-02, 1.124274142327367e-02, 6.874889164572930e-02, 2.544454458028170e-02, 5.551171693592716e-02, 3.548998362992956e-02, 6.418408025270507e-02, 1.279008764004587e-02, 3.081139259219372e-02, 1.579291068488373e-02, 1.427086981357564e-02, 2.854173962715128e-02, 1.427086981357564e-02, -8.850453809891790e-02, 2.807156039069767e-02, 1.238112281561304e-01, 1.422339161095589e-02, 2.844678322191177e-02, 1.422339161095589e-02, -7.841347910931887e-02, 2.778991662335936e-02, 1.074918450508153e-01, 3.807812778797902e-02, 4.300710868420596e-02, 4.749721910497687e-02, 7.813635210443358e-03, 4.200852698238736e-02, -3.392713065047353e-04, 8.651339292330265e-03, 3.005114316410458e-02, -8.329384768575823e-03, -4.021238017453695e-03, 3.015443754732975e-02, -3.421861488230605e-03, -5.357272435061653e-03, 2.799428903896054e-02, -4.685163720042487e-03, 1.249755023849317e-02, 3.026784189380488e-02, -1.296365536699755e-02, 3.737249729599264e-03, 1.397004725013013e-02, -4.402144741176024e-03, 6.243301668412658e-02, 3.878661618423503e-01, 6.481525483092737e-02, 3.913964069474003e-02, 1.915731177106277e-01, 4.686816124701037e-02, 5.578282268128719e-03, 1.000540184391837e-01, 1.812037373774734e-02, 2.517530869403608e-03, 2.040523226823728e-01, 2.647095136109113e-03, 3.035036129170430e-02, 1.505123607574284e-01, 2.046355034007627e-02, -4.658556546959899e-03, 2.681390161104794e-02, -3.521894520484885e-03, 1.347260653707347e+03, 2.694521307414693e+03, 1.347260653707347e+03, 8.431473912776693e-03, 6.540815019098377e-02, 1.073406493816449e-02, -4.025862752561579e-02, 1.998107875775293e-01, -1.781632125864926e-02, 2.237122462394666e-02, 2.214181064169992e-01, 3.625976480242023e-02, 2.237122462394335e-02, 2.214181064169942e-01, 3.625976480241759e-02, 3.239757630393143e+05, 6.479515260786286e+05, 3.239757630393143e+05, 5.378767708380672e-05, 3.529408724148477e-04, 5.462491971919034e-05, 1.275483186190791e+08, 2.550966372381582e+08, 1.275483186190791e+08, 7.983167480935052e+01, 1.596633496187010e+02, 7.983167480935052e+01, -1.810796658289329e-03, 1.121557521829926e-02, 2.447315663951339e-03, 6.990749633823247e-01, 1.564196678622406e+00, 7.467209590895981e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.364133687149441e-27, 2.913620867451846e-28, -5.686824199619214e-98, -5.701114835013481e-98, -5.687027612514906e-98, -5.702505571321126e-98, 2.304783514244088e-05, -1.931557362241539e-05, 1.789420875332415e-05, -2.448294658512160e-05, 8.458521960907609e-06, 8.451305574289631e-06, -4.699445432398598e-05, 1.266771825930647e-04, 1.181546837687829e-04, 1.182990964270617e-04, 1.195671061816738e-04, 1.191192491986792e-04, 1.188693489450485e-04, 1.188709742090192e-04, 1.210202082074320e-04, 1.168413940630827e-04, 1.268828596037391e-04, -5.074026726000023e-05, -3.838647237920582e-28, 8.558617815066312e-29, 1.393187062111174e-03, 5.566377700810620e-04, 6.704226144706146e-04, 6.970431683373560e-04, 1.162866101686535e-04, 7.788837138969360e-04, -5.478950760968412e-74, -1.700797989476668e-73, 5.220477089089024e-04, 9.221414108167393e-04, 4.729740393248036e-03, -1.713706969071220e-04, 8.578831025570371e-03, 3.000940774181692e-03, 1.225809051742841e-04, 2.294656291978429e-04, 1.000936499667785e-03, 8.068605806017981e-04, -2.046150005080022e-03, 1.045163712906168e-03, -2.405231280403750e-03, 7.660146952289419e-04, 2.701747840639113e-08, 2.607909439472935e-08, 8.407541871888898e-09, 3.115292851327942e-09, 5.634481509788033e-06, 2.865464061759799e-06, 1.327234201908997e-09, 1.338197757668430e-09, -1.079395140770307e-09, 2.661952600222845e-10, -1.079395144804420e-09, 2.661952568659684e-10, 5.391980373928728e-04, 5.384129135743047e-04, 9.157667695309854e-05, 9.141350473647843e-05, 9.304062229603078e-05, 9.274506328582484e-05, 9.192333120758551e-05, 9.124811173096216e-05, 5.822945503704459e-04, -8.221415828785255e-04, -9.176334147724810e-04, 4.863443325190371e-04, 7.721909328940501e-04, 7.686143541328262e-04, 8.056464687516877e-04, 8.027782275347793e-04, 2.649101204474358e-04, 2.543440407723748e-04, 2.774356402566389e-04, 2.658654886883741e-04, 5.248613352436410e-05, 4.337811307997929e-04, 7.944131596134505e-04, 8.108250196357927e-04, -9.807797528473956e-03, 8.275899881668585e-03, 3.461527669389128e-03, 9.753442616308200e-05, 6.270745824066463e-03, 2.679107644611504e-03, 7.361874838295784e-03, 2.904333901162568e-03, -1.431527978614956e-02, 9.579013754296539e-03, 2.736722787046365e-03, 6.692158803675785e-03, 1.758710726604514e-04, 1.728524128946909e-04, 1.776306196584801e-03, 7.022374542456608e-04, 6.634347386501411e-04, 6.416992892178319e-04, 6.971145510560369e-04, 6.911458292177419e-04, 2.980119853516287e-03, 2.687913665916853e-03, 2.980119853516293e-03, 2.687913665916853e-03, 5.769471262477366e-11, 2.541803027513433e-11, 1.395685847708469e-10, 1.558096897534386e-10, 6.554797687609991e-09, 6.192274275184800e-09, 3.890631596979687e-05, 5.766813815368627e-05, 3.087087764623353e-09, 1.563328525662549e-09, 3.087087764623354e-09, 1.563328525662550e-09, -1.097647846052142e-01, -1.248621198172435e-01, -3.276843208047073e-02, -3.774758964379562e-02, -9.481540560024178e-69, -9.641555899155482e-69, 8.222832395688860e-02, -3.050473480700449e-01, -1.236242412431697e-68, -1.250376557143332e-68, 7.381497392133073e-02, -2.682323491935411e-01, -7.306536720450976e-02, -8.776568916973977e-02, -6.686198483735259e-03, 1.013535050421461e-02, -1.983031072082726e-02, 1.276423854666737e-02, 1.277120559429832e-03, 7.330712843166220e-04, 4.866485426577797e-03, 4.219418522793185e-03, -3.088171979441294e-02, 1.634271068130245e-02, -1.724576238372310e-02, 1.389797476472566e-02, 9.102537146952546e-03, 9.057920780090663e-03, 4.068580232854126e-03, -2.668210518446251e-05, 7.438979223234163e-03, -3.773082701644665e-03, 1.649550764455570e-02, 1.636151917153852e-02, -1.461618793740626e-03, 6.030522705811839e-03, 6.279125568461091e-03, 5.247006633743740e-03, -2.742239223503757e-56, -1.918446449731662e-56, 1.196775443894377e-05, 1.077545422371666e-05, 2.938471982037783e-02, 2.084681679695623e-02, 1.812377158102141e-04, 1.327780730733963e-04, 1.812377158102229e-04, 1.327780730734008e-04, -2.036624854278086e-49, -5.392530338222952e-50, 3.420121484519065e-13, 3.403720029933618e-13, -4.733916311664557e-41, -7.708023419383154e-42, -1.543192972763871e-59, -1.486311434814831e-59, 6.474902221238844e-10, -2.678049511118799e-10, 2.913390366628369e-09, 3.125194631292943e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
