
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_pkzb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.453914410871642e-02, -5.453990309354178e-02, -5.454232785974958e-02, -5.453107184951320e-02, -5.453710476542056e-02, -5.453710476542056e-02, -4.222950595359044e-02, -4.223465855654862e-02, -4.235545276167648e-02, -4.216168643509340e-02, -4.224293818591410e-02, -4.224293818591410e-02, -2.785911383018273e-02, -2.763247938399384e-02, -2.221456605355399e-02, -2.255219598318130e-02, -2.274033480460765e-02, -2.274033480460765e-02, -7.578690335770459e-03, -8.192438703710368e-03, -3.003555574779284e-02, -2.321489048902624e-03, -1.882747446108244e-03, -1.882747446108236e-03, -6.913577485836967e-09, -9.195896186695935e-09, -1.031438865863161e-05, -4.719371215504948e-10, -9.345794153510119e-10, -9.345794112638246e-10, -6.051403320405810e-02, -6.068072029024463e-02, -6.052140118414820e-02, -6.066852241601629e-02, -6.059861722678853e-02, -6.059861722678853e-02, -2.405827729119229e-02, -2.467900752022224e-02, -2.309174424547201e-02, -2.363955798518889e-02, -2.488489851193387e-02, -2.488489851193387e-02, -3.939667021901585e-02, -5.535035088792650e-02, -3.654251378840134e-02, -5.103111047696210e-02, -4.091094104865885e-02, -4.091094104865885e-02, -4.751653864960664e-04, -3.922042506697187e-03, -3.667814053508147e-04, -7.160604220567728e-02, -1.265451478410342e-03, -1.265451478410342e-03, -1.677682691569750e-10, -4.770184667547630e-10, -8.746547599427620e-10, -9.540425667901596e-05, -7.018335009708537e-10, -7.018335009708542e-10, -5.722254423195108e-02, -5.117993980721648e-02, -5.277274339491595e-02, -5.443439450916868e-02, -5.355472653778540e-02, -5.355472653778539e-02, -6.099489851720732e-02, -3.024692829654043e-02, -3.642994369714693e-02, -4.326445720088803e-02, -3.972472457281923e-02, -3.972472457281922e-02, -5.540338824977797e-02, -7.035413519208484e-03, -1.177223687839096e-02, -2.481061708880275e-02, -1.786447213218687e-02, -1.786447213218689e-02, -2.840327793286031e-02, -8.019723323355702e-06, -2.966608167534161e-05, -2.922785538967502e-02, -3.150921188169929e-04, -3.150921188170040e-04, -2.469892990283923e-08, -3.967885667836135e-12, -7.804559316801799e-11, -2.474746486711798e-04, -7.087579386672814e-10, -7.087579307804403e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_pkzb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.147594085230181e-01, -1.147482006503124e-01, -1.147602912167246e-01, -1.147488628072069e-01, -1.147613218921316e-01, -1.147503961915789e-01, -1.147510760578136e-01, -1.147376474223058e-01, -1.147617568961562e-01, -1.147396280305413e-01, -1.147617568961562e-01, -1.147396280305413e-01, -1.068409348517959e-01, -1.068688583514006e-01, -1.068449127633019e-01, -1.068757035348960e-01, -1.069771453271436e-01, -1.069862970006162e-01, -1.067179096562614e-01, -1.067421406092151e-01, -1.068934843770577e-01, -1.067893182052941e-01, -1.068934843770577e-01, -1.067893182052941e-01, -7.756300711256602e-02, -7.747062774217724e-02, -7.728837147429685e-02, -7.718461647347898e-02, -6.933563626600565e-02, -6.941102246412990e-02, -6.982041593824410e-02, -6.973514409162283e-02, -6.994928987162914e-02, -7.026938383073289e-02, -6.994928987162914e-02, -7.026938383073289e-02, -3.099824430188171e-02, -2.860830891495224e-02, -3.298170647669484e-02, -3.012354985655400e-02, -8.409331362506971e-02, -8.138332905113307e-02, -1.169377625484861e-02, -1.126611126684748e-02, -8.172623739567066e-03, -2.127235974571788e-02, -8.172623739567125e-03, -2.127235974571790e-02, -4.407631138773135e-08, -4.045986811150099e-08, -5.902685478341906e-08, -5.357228546448359e-08, -6.357580738762797e-05, -5.905776572787398e-05, -2.898150273254210e-09, -2.952993211189929e-09, -5.292693959710925e-09, -1.143149465009491e-08, -5.292693970271437e-09, -1.143149464190850e-08, -1.128569595334684e-01, -1.128950429838311e-01, -1.130192429816200e-01, -1.130391668329547e-01, -1.128635411462477e-01, -1.128924611007651e-01, -1.129936359718720e-01, -1.130331829981710e-01, -1.129474947502422e-01, -1.129648391450475e-01, -1.129474947502422e-01, -1.129648391450475e-01, -7.358907376837337e-02, -7.348485743656691e-02, -7.438078382834680e-02, -7.431655850850412e-02, -7.174479328888474e-02, -7.171154083827161e-02, -7.250195081725579e-02, -7.244930331050611e-02, -7.496041609828484e-02, -7.476560731731421e-02, -7.496041609828484e-02, -7.476560731731421e-02, -7.883934473837145e-02, -7.907272057723126e-02, -8.254622434423631e-02, -8.274195307042194e-02, -8.088738539922306e-02, -7.635514394780112e-02, -8.305671621260344e-02, -7.883803371518369e-02, -7.558561768837213e-02, -8.401467797713889e-02, -7.558561768837214e-02, -8.401467797713891e-02, -2.632876388651151e-03, -2.606120721693397e-03, -1.795391563528641e-02, -1.784114623548234e-02, -2.124621820359949e-03, -1.978245788578418e-03, -1.173915921777320e-01, -1.174718906793595e-01, -6.872079807900576e-03, -6.281813981707116e-03, -6.872079807900576e-03, -6.281813981707115e-03, -1.088663951389351e-09, -1.049588382273754e-09, -3.006663777128795e-09, -2.980557297374984e-09, -5.684664026179233e-09, -5.256843831186935e-09, -5.573831860386046e-04, -5.466888848945911e-04, -6.519019133757779e-09, -3.903594615681136e-09, -6.519019133757780e-09, -3.903594614892304e-09, -7.665086820145171e-02, -7.664290650619543e-02, -7.603260433884895e-02, -7.610019372326110e-02, -7.660350031606093e-02, -7.675204814630388e-02, -7.698724769274054e-02, -7.698032900121231e-02, -7.683261777956663e-02, -7.690416194808453e-02, -7.683261777956661e-02, -7.690416194808453e-02, -7.375811629329271e-02, -7.341809980919063e-02, -6.717024136336970e-02, -6.672779531927228e-02, -6.973113114523660e-02, -6.950244685422315e-02, -7.274895224195677e-02, -7.239206424710296e-02, -7.133855001710140e-02, -7.080108600876682e-02, -7.133855001710136e-02, -7.080108600876679e-02, -8.465826421683803e-02, -8.472903125533023e-02, -2.883513500338545e-02, -2.858683585720681e-02, -4.199685366323681e-02, -4.135513342704913e-02, -6.314331672935433e-02, -6.276532474911913e-02, -5.322207607720147e-02, -5.331800841670273e-02, -5.322207607720150e-02, -5.331800841670278e-02, -6.824877865651537e-02, -6.724653337504040e-02, -4.745932592125379e-05, -4.712637874043658e-05, -1.781967078771304e-04, -1.705975665806982e-04, -6.615302598310618e-02, -6.286726585375232e-02, -1.833408209254725e-03, -1.698077145940489e-03, -1.833408209254785e-03, -1.698077145940539e-03, -1.564338354413602e-07, -1.506440819256132e-07, -2.585050649193539e-11, -2.598496247820177e-11, -5.087404741731719e-10, -4.654882849859713e-10, -1.408272238501543e-03, -1.362277871052511e-03, -5.917835967765364e-09, -3.925505989145103e-09, -5.917835960010976e-09, -3.925505990040639e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.838910197539182e-11, 5.645142571445422e-10, -3.823351097821313e-11, -3.838553927572499e-11, 5.645249751965046e-10, -3.823705988166905e-11, -3.841882966498577e-11, 5.645537830363740e-10, -3.823611394189841e-11, -3.837929795375332e-11, 5.643954731949098e-10, -3.827710849867138e-11, -3.834185641502884e-11, 5.644810801295509e-10, -3.830917667141544e-11, -3.834185641502884e-11, 5.644810801295509e-10, -3.830917667141544e-11, 7.767250281406987e-07, 2.380281072569970e-06, 7.767059359449149e-07, 7.768819632136179e-07, 2.380796580311755e-06, 7.768022771181029e-07, 7.787413191235544e-07, 2.392847966529198e-06, 7.795983896033349e-07, 7.687331160617141e-07, 2.373830737633111e-06, 7.689139420503975e-07, 7.705605804115266e-07, 2.382558722967004e-06, 7.777253013497011e-07, 7.705605804115266e-07, 2.382558722967004e-06, 7.777253013497011e-07, 1.450533832608323e-03, 3.818533467546515e-03, 1.475206272407513e-03, 1.434195511206475e-03, 3.792485041548249e-03, 1.463132903169521e-03, 1.116813965391764e-03, 3.131018774355029e-03, 1.091411347706001e-03, 1.033048231920861e-03, 3.089058152650890e-03, 1.046741799635170e-03, 1.204632171608500e-03, 3.137983219698402e-03, 9.169579352773869e-04, 1.204632171608500e-03, 3.137983219698402e-03, 9.169579352773869e-04, 7.236765638338135e-03, 4.547886049367136e-01, 3.869751438175167e-02, 4.977514916400047e-03, 4.754070309911821e-01, 4.300534027673819e-02, 9.106355248462744e-04, 1.973798760321905e-03, 9.340535481629905e-04, 5.832639143906113e-02, 3.014916761134653e-01, 6.293781426715188e-02, 9.107691179523678e-02, 2.583713978008476e-01, -2.068409975127264e-01, 9.107691179523741e-02, 2.583713978008484e-01, -2.068409975127254e-01, 1.584377650811292e-03, 1.288668323061081e-02, 2.393968959602876e-03, 1.830907499604628e-03, 1.508612784203399e-02, 2.896915106806471e-03, 1.258619140549679e-02, 7.295856059105178e-02, 1.620901248268542e-02, 9.017050028314499e-04, 4.276009354891530e-03, 8.377768853870051e-04, 2.028133177348856e-03, 6.492717250454113e-03, -3.366151924401729e-03, 2.028133183570383e-03, 6.492717250871959e-03, -3.366151907084969e-03, -6.651878471866168e-08, 8.631857310073213e-07, -6.637717708334932e-08, -6.552845633321611e-08, 8.689101687402983e-07, -6.582528474027573e-08, -6.640584082052965e-08, 8.634920057344202e-07, -6.661047755456185e-08, -6.585559770830246e-08, 8.685424563892008e-07, -6.579290494642291e-08, -6.596930127672989e-08, 8.660572592457501e-07, -6.605495195237707e-08, -6.596930127672989e-08, 8.660572592457501e-07, -6.605495195237707e-08, 2.396914442981483e-07, 1.716149882400862e-05, 2.554517999331306e-07, -1.975509342562829e-08, 1.730251908209600e-05, -1.422592738397156e-08, 5.259704518423923e-08, 1.651027929244307e-05, 1.790897589599865e-07, -1.906466326086939e-07, 1.664823252026160e-05, -5.510061137643322e-08, 3.107492776253326e-07, 1.756409743718477e-05, 2.928866180118128e-08, 3.107492776253326e-07, 1.756409743718477e-05, 2.928866180118128e-08, 2.330039213629347e-03, 1.421261493508009e-02, 2.603768886606646e-03, 7.884786871415505e-03, 1.570645556597786e-02, 8.597208602415238e-03, 3.691758701805368e-03, 1.735813619321895e-02, 5.743294765985168e-03, 1.058237259876405e-02, 2.344494383491808e-02, 1.225014641409151e-02, 3.680034151320590e-03, 1.416465191667544e-02, 1.478855213876810e-03, 3.680034151320583e-03, 1.416465191667545e-02, 1.478855213876807e-03, 3.527504405452624e-02, 1.731959726596148e-01, 3.677025242675003e-02, 1.757859600913939e-02, 1.658678733947153e-01, 1.859743920925063e-02, 3.306083284456055e-02, 1.748223286799209e-01, 4.116978215172556e-02, 6.019553273675617e-05, 1.230314444484975e-04, 6.022487161846342e-05, 4.572670237655034e-02, 3.410957198082141e-01, 6.821473404926301e-02, 4.572670237655029e-02, 3.410957198082141e-01, 6.821473404926298e-02, 1.102418765418497e-03, 3.583237591499281e-03, 1.177581881310645e-03, 1.237330967550569e-03, 4.870597354814491e-03, 1.290111940900919e-03, 9.509198180989999e-03, 5.186255640404198e-02, 1.210595584470994e-02, 3.708226986798274e-02, 1.719480625740195e-01, 3.801071978661728e-02, 9.086720980634166e-04, 1.885825190354189e-02, 6.140451882566020e-03, 9.086720963338011e-04, 1.885825189099128e-02, 6.140451875445614e-03, 5.147265405987506e-02, 2.934379978022577e-02, 5.612370468459987e-02, 1.892785546892839e-02, 2.860831126627541e-02, 2.138316352341232e-02, 2.708405886108319e-02, 2.923284591049034e-02, 3.035784712361981e-02, 3.669657881393182e-02, 2.952610583825776e-02, 4.014925696332675e-02, 3.154364714173135e-02, 2.941245752541236e-02, 3.491568962569795e-02, 3.154364714173139e-02, 2.941245752541236e-02, 3.491568962569797e-02, 3.508003504094127e-02, 3.063351703956569e-02, 3.887798240262840e-02, -3.461705225405355e-03, 2.352159911163584e-02, -3.035656815429283e-03, -3.314015204901496e-03, 2.647475959427558e-02, -2.521821884808167e-03, 1.599300507757351e-03, 2.973115731791351e-02, 2.090510982896868e-03, -1.655877687792550e-03, 2.805089484386446e-02, -1.051165938037651e-03, -1.655877687792557e-03, 2.805089484386446e-02, -1.051165938037654e-03, 5.887492057443208e-03, 1.235309556525884e-02, 6.542146171453974e-03, 6.861458389660318e-03, 1.255525720936446e-01, 7.968122103054190e-03, 4.048629161706526e-03, 1.107756364452004e-01, 6.216397267212777e-03, 1.022341710063580e-02, 8.610797726150823e-02, 1.079529589294004e-02, 3.994448737415953e-03, 1.055084756240617e-01, 4.246768872042503e-03, 3.994448737415856e-03, 1.055084756240618e-01, 4.246768872042557e-03, 2.283747934537225e-04, 3.007971057159727e-02, 1.275404719822990e-03, 1.066544685660800e-02, 6.211603438923581e-02, 1.107932275761678e-02, 1.745009636160929e-02, 9.053371594999862e-02, 2.009125075464578e-02, 9.020889421297423e-03, 1.341307686090304e-01, 2.697718486203137e-02, 5.191211463276212e-02, 3.051114628485955e-01, 6.783135921228362e-02, 5.191211463275883e-02, 3.051114628485930e-01, 6.783135921227876e-02, 3.465124600317417e-03, 1.382289139848768e-02, 3.814505679172551e-03, 1.846293337148703e-03, 4.331698079690820e-03, 1.848477038446957e-03, 1.097478880323593e-03, 7.369413723967147e-03, 1.534321486524837e-03, 4.857479160097045e-02, 2.890464596064790e-01, 5.331329540875458e-02, 9.494650329695025e-04, 2.495692692801331e-02, 7.566407814494184e-03, 9.494652428289437e-04, 2.495692691248284e-02, 7.566407876323965e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_pkzb_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_pkzb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.005259117376379e-06, 6.976460873263364e-06, 7.004934463250840e-06, 6.976793425904182e-06, 7.007349791608234e-06, 6.975815448378194e-06, 7.003600753717061e-06, 6.979511230420574e-06, 7.001652140908315e-06, 6.981291436416039e-06, 7.001652140908315e-06, 6.981291436416039e-06, 2.121563293962849e-05, 2.139802463384638e-05, 2.120294483906492e-05, 2.142096670304303e-05, 2.156737022551064e-05, 2.140136632262318e-05, 2.170460159408448e-05, 2.183717269519527e-05, 2.278115391720002e-05, 2.038326049448457e-05, 2.278115391720002e-05, 2.038326049448457e-05, 1.591443529656760e-04, 1.474259217025837e-04, 1.610324090428668e-04, 1.493816713311059e-04, 1.970865169476281e-04, 1.949961380987285e-04, 2.390214297305567e-04, 2.223895457941045e-04, 2.552627313613336e-04, 2.919819741045650e-04, 2.552627313613336e-04, 2.919819741045650e-04, 5.322423148424424e-03, 3.759378697062294e-03, 5.773298808397484e-03, 3.855834908599356e-03, 2.528488104296547e-05, 8.670388765229049e-06, 9.096992428324697e-04, 7.140867701991686e-04, -1.115171833087505e-03, 1.853053576631469e-03, -1.115171833087510e-03, 1.853053576631466e-03, 4.685815236741220e-09, 3.747423014980865e-09, 6.416678471235859e-09, 4.943162477193906e-09, 4.641943109123823e-06, 3.924571438987792e-06, 1.942932617798696e-10, 2.052556629459853e-10, -3.381224214381169e-10, 1.007454569460128e-09, -3.381224256174942e-10, 1.007454566095978e-09, 9.079071027042874e-05, 8.931025593641802e-05, 8.901854847628900e-05, 8.814017100866584e-05, 9.048476653628479e-05, 8.956751132389038e-05, 8.937914056236585e-05, 8.807228730448898e-05, 8.995972835151458e-05, 8.861820212068098e-05, 8.995972835151458e-05, 8.861820212068098e-05, 2.217992686408917e-04, 2.177020082851193e-04, 2.380216540098709e-04, 2.346032377122515e-04, 2.232575411975382e-04, 2.142097524526033e-04, 2.391566999753618e-04, 2.290022280246496e-04, 2.239373432185975e-04, 2.343418859349339e-04, 2.239373432185975e-04, 2.343418859349339e-04, 1.158873770163154e-03, 5.117508748176764e-04, -1.132261407346126e-03, -1.742681164285929e-03, 1.507723566750676e-03, -5.106785133887102e-04, 1.675324567575998e-04, -9.760353949018394e-04, -1.187529996046614e-03, 2.252056277543899e-03, -1.187529996046605e-03, 2.252056277543911e-03, 1.700822630725967e-04, 1.672312432667896e-04, 1.558580717136999e-03, 1.555384488308469e-03, 1.411672922955613e-04, 1.196393126588729e-04, -3.025092356182947e-05, -3.038733870754893e-05, 7.541501135668114e-04, 4.667337471376042e-04, 7.541501135668120e-04, 4.667337471376044e-04, 3.398200472058129e-11, 3.233039102283108e-11, 1.405533448906513e-10, 1.567940690536477e-10, 1.113924490477441e-09, 7.514252908838891e-10, 4.096508508291898e-05, 3.658092393045372e-05, 8.606106051891918e-10, -6.631378734612247e-10, 8.606106051891937e-10, -6.631378734612232e-10, -4.347571017208486e-02, -4.797468239860436e-02, -2.566066327998999e-02, -2.919449563908752e-02, -3.289257611575640e-02, -3.727420776988023e-02, -3.936279474702326e-02, -4.386718383144828e-02, -3.616586086184957e-02, -4.064291530130279e-02, -3.616586086184966e-02, -4.064291530130275e-02, -7.371022941944181e-03, -9.462184006450906e-03, 5.379467611485503e-03, 5.065237506085625e-03, 4.528520519923242e-03, 3.788002846694047e-03, -1.522260648319807e-03, -1.895085057551668e-03, 2.489472981871600e-03, 1.770546997570486e-03, 2.489472981871605e-03, 1.770546997570498e-03, -4.935122616496386e-04, -1.109532683177466e-03, 2.652651410732449e-03, 2.610345450749592e-03, 3.706941725015608e-03, 3.463247362700207e-03, 2.878547549984817e-03, 2.980427839664148e-03, 4.363519205160715e-03, 4.257000943788058e-03, 4.363519205160740e-03, 4.257000943788053e-03, 3.632575073307245e-03, 2.690928898943269e-03, 3.667599022674694e-06, 3.671747825867657e-06, 1.195371810003468e-05, 1.076533978246839e-05, 6.083765696746454e-03, -1.208027200965309e-03, 1.789798983644527e-04, 1.310750583049622e-04, 1.789798983644594e-04, 1.310750583049757e-04, 7.350914754482039e-09, 6.653361051389011e-09, 3.499047080329923e-13, 3.482678849367772e-13, 7.147052933051091e-11, 4.861797897512616e-11, 1.481939597039221e-04, 1.302465338493493e-04, 9.284005986655571e-10, 1.309078272909986e-11, 9.284005809081960e-10, 1.309076707555907e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
