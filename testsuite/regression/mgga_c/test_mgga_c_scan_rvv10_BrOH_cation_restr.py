
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.731288071123783e-02, -2.731289713212927e-02, -2.731251685782721e-02, -2.731225811275631e-02, -2.731245854198101e-02, -2.731245854198101e-02, -5.100786378701620e-02, -5.100358462140452e-02, -5.086139495384253e-02, -5.068898811270132e-02, -5.080470267390259e-02, -5.080470267390259e-02, -4.103114850325210e-02, -4.089336695949811e-02, -3.741749231196621e-02, -3.692373784319774e-02, -3.722867411693229e-02, -3.722867411693229e-02, -1.544937104535253e-02, -1.601383304509746e-02, -4.879536630339325e-02, -1.515063846764145e-02, -1.641623062695171e-02, -1.641623062695171e-02, -6.551941246199841e-04, -7.047084880292130e-04, -4.450137731341570e-03, -3.257193585161135e-04, -4.495423642799552e-04, -4.495423642799552e-04, -2.644924415213250e-02, -2.645702574985548e-02, -2.644844301182317e-02, -2.645536018952178e-02, -2.645378661202448e-02, -2.645378661202448e-02, -2.529595821407266e-02, -2.492490725391919e-02, -2.473115223871556e-02, -2.440222522891789e-02, -2.535631212996409e-02, -2.535631212996409e-02, -2.878439327008081e-02, -3.244195147393540e-02, -3.607964034742749e-02, -4.509746311918948e-02, -2.855552836154134e-02, -2.855552836154134e-02, -1.075907672418518e-02, -1.512321911954308e-02, -1.016468518770097e-02, -5.623141844799726e-02, -1.241407080699681e-02, -1.241407080699681e-02, -2.405330722132229e-04, -3.228872229721265e-04, -2.863969649786366e-04, -7.339086901754522e-03, -3.320947979205246e-04, -3.320947979205246e-04, -2.489869461826050e-02, -2.450153606381758e-02, -2.463679771505325e-02, -2.475237457368287e-02, -2.469464288253352e-02, -2.469464288253352e-02, -2.594458899988912e-02, -2.175059476573700e-02, -2.287577768728759e-02, -2.405376267535259e-02, -2.351681860476409e-02, -2.351681860476409e-02, -3.570907690378791e-02, -1.579705315196071e-02, -1.908815887000142e-02, -2.794676357943700e-02, -2.212037505803809e-02, -2.212037505803809e-02, -2.473837054875688e-02, -4.165095905988782e-03, -5.737344483270609e-03, -2.699548779297972e-02, -9.334201891836296e-03, -9.334201891836298e-03, -9.757567044353496e-04, -6.673815502852991e-05, -1.679382487079914e-04, -8.588347767245253e-03, -3.090134092952225e-04, -3.090134092952269e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.166566622064649e-02, -4.166543293844003e-02, -4.166416344752409e-02, -4.166760499856087e-02, -4.166583532968018e-02, -4.166583532968018e-02, -7.366833457123904e-02, -7.361674563274202e-02, -7.222318336373527e-02, -7.207290386775564e-02, -7.237924494542625e-02, -7.237924494542625e-02, -6.786549581285038e-02, -6.779046045731885e-02, -6.524242100674825e-02, -6.412716535252208e-02, -6.456984393334800e-02, -6.456984393334800e-02, -4.669147264261601e-02, -4.805887276343340e-02, -8.774665818814512e-02, -3.158732321706867e-02, -3.233710136017118e-02, -3.233710136017118e-02, -1.816033152263251e-03, -1.546444588295724e-03, -8.617729347131189e-03, -6.298506849040253e-04, -8.685974792153052e-04, -8.685974792153053e-04, -3.787427817949704e-02, -3.782803465465491e-02, -3.787114536141179e-02, -3.783037889300381e-02, -3.785136867958368e-02, -3.785136867958368e-02, -5.373388433269517e-02, -5.217482419897988e-02, -5.308647701012865e-02, -5.164833607994700e-02, -5.312935205318351e-02, -5.312935205318351e-02, -4.011910365086280e-02, -2.702708735173774e-02, -4.383772054253655e-02, -1.983172233246105e-02, -3.864079130938262e-02, -3.864079130938262e-02, -2.191380024150381e-02, -6.483087588302502e-02, -2.030820368170983e-02, -1.704918024392901e-02, -3.014073961753207e-02, -3.014073961753208e-02, -4.665980133237252e-04, -6.242889703116641e-04, -5.563543172102353e-04, -1.423131598283839e-02, -6.430697268684791e-04, -6.430697268684789e-04, -2.622129558624169e-02, -2.868089476015768e-02, -2.788230802816375e-02, -2.716959047444756e-02, -2.753211334440126e-02, -2.753211334440126e-02, -2.476856490563928e-02, -3.887019067075878e-02, -3.651167613040582e-02, -3.310369913183464e-02, -3.502228175277926e-02, -3.502228175277926e-02, -2.590000530823450e-02, -4.824796504872520e-02, -5.203959189575933e-02, -5.033272932389303e-02, -5.076962765554201e-02, -5.076962765554200e-02, -4.477121084527643e-02, -9.039166714457446e-03, -1.109542375431812e-02, -4.243931689720692e-02, -1.948513675412487e-02, -1.948513675412488e-02, -1.859149451037363e-03, -1.310535598919495e-04, -3.276381463385759e-04, -2.108627167926301e-02, -5.991612410780787e-04, -5.991612410780828e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.463980725358679e-11, 8.463971682305333e-11, 8.463371007552560e-11, 8.463497786449057e-11, 8.463511323589384e-11, 8.463511323589384e-11, 1.531662832134238e-06, 1.533378887343139e-06, 1.578170382106908e-06, 1.573233714487271e-06, 1.569062981354133e-06, 1.569062981354133e-06, 1.587794386797345e-03, 1.577089545081974e-03, 1.320297939798197e-03, 1.295675802226798e-03, 1.316699481443587e-03, 1.316699481443587e-03, 5.345354239862460e-01, 5.567584188496468e-01, 8.545769964893370e-04, 3.529118099922354e-01, 2.163332131316781e-01, 2.163332131316781e-01, 2.890843934898086e+02, 1.320904969460789e+02, 2.494968585007480e+00, 1.602453236391562e+02, 1.286446127479671e+02, 1.286446127479673e+02, 1.031719235313121e-07, 1.034432253124894e-07, 1.031708959241768e-07, 1.034108581837512e-07, 1.033161904765195e-07, 1.033161904765195e-07, 7.876260823141424e-06, 7.286539874531273e-06, 7.483831962771124e-06, 6.965385137096196e-06, 7.725202772855557e-06, 7.725202772855557e-06, 6.005598303939021e-03, 6.281962789163608e-03, 1.291794635282825e-02, 1.805370596244298e-02, 5.561740714813804e-03, 5.561740714813804e-03, 5.003381984417841e-01, 5.743974262411148e-01, 5.495208162093885e-01, 7.175056870072246e-05, 8.618092871561975e-01, 8.618092871561983e-01, 2.937615210779948e+02, 1.836154354411763e+02, 9.175710048088165e+02, 1.165519344736462e+00, 4.135175263680297e+02, 4.135175263680288e+02, 5.684033721252449e-03, 5.159587720717986e-03, 5.326205907445168e-03, 5.478171860835725e-03, 5.400793568099520e-03, 5.400793568099520e-03, 7.369732917641071e-03, 6.188425507063000e-03, 6.200796266442966e-03, 6.433012579856828e-03, 6.346092443524074e-03, 6.346092443524076e-03, 5.889441055151992e-03, 1.552104584491674e-01, 1.060637891542525e-01, 6.842252502976126e-02, 7.858513418751041e-02, 7.858513418751040e-02, 1.374343995836478e-02, 4.319796465086939e+00, 1.445487652108817e+00, 8.218784250476299e-02, 1.231165983098138e+00, 1.231165983098139e+00, 3.128043533435678e+01, 4.380189895501630e+03, 8.392403102868814e+02, 2.307208745957713e+00, 5.465887603134494e+02, 5.465887603134519e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.123480704185998e-05, -1.123490967284945e-05, -1.123479563511001e-05, -1.123326476398816e-05, -1.123414817258653e-05, -1.123414817258653e-05, -5.552518312828824e-04, -5.564175597697449e-04, -5.875975710927602e-04, -5.896672497666730e-04, -5.835639037258594e-04, -5.835639037258594e-04, -1.892359841802354e-03, -1.877420533982106e-03, -1.554303098421967e-03, -1.726101211536878e-03, -1.691734579151821e-03, -1.691734579151821e-03, -3.858244433959892e-02, -4.204792756065887e-02, -3.874550665177850e-04, -6.879188347058088e-03, -4.129410128958839e-03, -4.129410128958842e-03, -7.789629243443024e-04, -2.850586633220721e-04, -4.097437415266165e-04, -5.923031186024004e-07, -4.576486055705077e-06, -4.576486055704932e-06, -2.058994212235460e-04, -2.066161062233244e-04, -2.059158455538284e-04, -2.065490373438013e-04, -2.062706343318993e-04, -2.062706343318993e-04, -7.697223798397240e-04, -7.294791499844974e-04, -7.226029139525554e-04, -6.871621755601494e-04, -7.693943823032570e-04, -7.693943823032570e-04, -1.486130498821858e-02, -1.845234281835811e-02, -2.411497710384681e-02, -3.304371705007240e-02, -1.443512943392837e-02, -1.443512943392837e-02, -2.669436361531246e-03, -4.355890683066632e-02, -2.010260390488407e-03, -4.423511374333639e-03, -1.201577511642110e-02, -1.201577511642111e-02, -1.749473158291518e-08, -1.132869449380492e-07, -1.667006078009821e-06, -8.855533825025273e-04, -3.854467651650817e-07, -3.854467651650842e-07, -1.579841742540442e-02, -1.409386657629830e-02, -1.464096462467114e-02, -1.513480741106054e-02, -1.488341203791633e-02, -1.488341203791633e-02, -1.810252485384741e-02, -9.804594616756930e-03, -1.127917478703221e-02, -1.330916512025741e-02, -1.228899244677215e-02, -1.228899244677215e-02, -1.924378391426683e-02, -2.264502593654061e-02, -2.642144793139228e-02, -3.656008185419779e-02, -2.890512899821482e-02, -2.890512899821482e-02, -1.643844498024750e-02, -1.436435133265247e-03, -5.375184130038886e-04, -3.886660638387196e-02, -3.697888438599878e-03, -3.697888438599881e-03, -1.262077034772204e-06, -3.185587827466999e-10, -9.795861322371593e-07, -8.163603901458040e-03, -7.709897642978482e-07, -7.709897642978704e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
