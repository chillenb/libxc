
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.167227156015752e-02, -9.166950719885754e-02, -9.165835936335100e-02, -9.169928091505911e-02, -9.167767702716390e-02, -9.167767702716390e-02, -1.129626776778144e-01, -1.129567502532416e-01, -1.128038052016176e-01, -1.128676090235273e-01, -1.128576904767964e-01, -2.344382324508710e-02, -8.151081688967630e-02, -1.903848934337702e-02, -1.848623083923402e-02, -1.873511186006935e-02, -1.867872079644435e-02, -1.867872079644435e-02, -1.394704026957987e-02, -1.414608825422232e-02, -9.350674579371480e-02, -1.053113682889921e-02, -1.197087882545875e-02, -1.197087882545875e-02, -3.752969608555088e-04, -4.043342295309273e-04, -3.006770894735078e-03, -1.690554397653975e-04, -2.423674805307658e-04, -2.423674805307658e-04, -2.638748628300915e-02, -2.639582654344771e-02, -2.638796582272889e-02, -5.379616807890679e-02, -2.639166675215896e-02, -2.639166675215896e-02, -1.019152170369535e-01, -1.008768426772894e-01, -1.027690267291377e-01, -1.018022660304729e-01, -1.009267487606668e-01, -2.245106115096360e-02, -2.194107103768986e-02, -2.307883720109014e-02, -2.103684193380526e-02, -2.186504758504401e-02, -2.216299935947394e-02, -6.104955431274350e-02, -3.485127931031878e-02, -1.259698489983484e-02, -3.326776006969985e-02, -2.439951112505812e-02, -9.243807626673818e-03, -9.243807626673817e-03, -2.393092053162897e-03, -1.612449521114239e-04, -1.433344975083610e-04, -2.589845160387997e-02, -2.738488192827941e-03, -1.655366233432034e-04, -2.382863708468445e-02, -2.356680477191464e-02, -2.827153184046454e-02, -2.373437886717115e-02, -2.369617165436425e-02, -2.369617165436425e-02, -2.371386260334273e-02, -2.106617976452838e-02, -2.187346278504974e-02, -2.264947272640659e-02, -2.225670021742472e-02, -4.666598157249312e-02, -2.296077862260221e-02, -5.321972045930101e-02, -1.625478537067641e-02, -5.534161924831899e-02, -1.772508998369475e-02, -1.772508998369475e-02, -5.833786404498958e-02, -2.872884982296588e-03, -3.922013656692808e-03, -1.945525937830211e-02, -3.018011994892934e-02, -6.580397726471758e-03, -5.420728841373759e-04, -2.472863204548816e-05, -8.288757437550937e-05, -6.270602045790450e-03, -1.550602435843970e-04, -1.550602435844855e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.433938381994323e-02, 5.433441754326424e-02, 5.431437694583269e-02, 5.438789679196809e-02, 5.434908424570277e-02, 5.434908424570277e-02, -8.456037375858610e-02, -8.460499217206273e-02, -8.580084322716346e-02, -8.531469101337892e-02, -8.536471795137229e-02, -4.627506164625031e-02, -6.624314911185131e-02, -4.558913730007712e-02, -4.616575417993356e-02, -4.588277801762737e-02, -4.594874959228459e-02, -4.594874959228459e-02, -3.765486743604249e-02, -3.752627323449374e-02, -8.926688246923124e-02, -4.088649407262011e-02, -3.902800307572341e-02, -3.902800307572339e-02, -4.768346719319115e-01, -4.477620272560962e-01, -9.998827946552499e-02, -8.682648389917658e-01, -6.310660773660944e-01, -6.310660773660944e-01, -3.785052610508786e-02, -3.780495067375821e-02, -3.784790475928009e-02, -7.354655113235355e-04, -3.782771136594455e-02, -3.782771136594455e-02, -6.063765007183873e-02, -6.132161941071255e-02, -6.068933574593697e-02, -6.067468962107615e-02, -6.125470893354538e-02, -4.626551395748282e-02, -3.759273035011763e-02, -3.410810473630911e-02, -3.939424997605474e-02, -3.728623842170344e-02, -3.701596671184711e-02, -2.077103909602073e-03, -4.125751458239686e-02, -4.044436046827789e-02, -3.958020844736300e-02, -4.102616702780491e-02, -4.126705372927430e-02, -4.126705372927426e-02, -3.092106456939254e-03, -9.266678109118206e-01, -5.274623554654282e-01, -3.142048694472795e-02, -3.531175961823871e-03, -6.493520007969544e-01, -2.748128315863842e-02, -2.938978302897108e-02, -2.222457162172531e-02, -2.820466155648668e-02, -2.848574203332614e-02, -2.848574203332614e-02, -2.767425342923121e-02, -3.793138991903269e-02, -3.580388729638761e-02, -3.310188958466711e-02, -3.456698455976077e-02, 5.029517804309923e-03, -3.548251457798725e-02, -5.407095439556282e-02, -3.995689902642090e-02, -4.059457019699753e-02, -3.916624261767992e-02, -3.916624261767992e-02, -5.418854690418944e-02, -1.041170401480094e-01, -7.943328644596952e-02, -3.659131048985589e-02, -3.610903527058663e-02, -4.815204197498048e-02, -4.518450642439725e-01, -2.309164756143743e+00, -9.161201865456110e-01, -4.908807970863286e-02, -6.059152549802246e-01, -6.059152549816363e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.371536621626799e-09, 4.371306742476725e-09, 4.370341831121518e-09, 4.373749230209730e-09, 4.371955618795368e-09, 4.371955618795368e-09, 1.221735188228187e-05, 1.221596486843298e-05, 1.217865700783348e-05, 1.218927473051435e-05, 1.219321779290501e-05, 3.381262130220394e-07, 1.109149961453358e-02, 6.773760753034679e-04, 6.987221541572246e-04, 7.029514367911390e-04, 7.015179674030518e-04, 7.015179674030518e-04, 3.330000947276518e-01, 3.202183139894647e-01, 6.502745451279447e-03, 7.219210733477032e-01, 5.212110775281183e-01, 5.212110775281179e-01, 1.860784137239769e+05, 1.529512965881916e+05, 1.358895535110313e+02, 1.507434028549546e+06, 6.514194664088256e+05, 6.514194664088256e+05, 1.023164860407988e-07, 1.025930913013612e-07, 1.023330823560365e-07, 1.006622468680008e-06, 1.024544917954355e-07, 1.024544917954355e-07, 1.337736754654370e-04, 1.279548285805401e-04, 1.382562943853142e-04, 1.329451684788239e-04, 1.284199347072426e-04, 5.038853341608235e-06, 2.664549187471164e-03, 2.360814009977030e-03, 3.221009757786134e-03, 3.228313640242198e-03, 2.594429198321635e-03, 2.093100392219590e-02, 2.976398594428133e+01, 2.481071777234964e-01, 4.014141740131123e+01, 9.418337720592228e-06, 1.661723969931708e+00, 1.661723969931706e+00, 2.574062733349601e+07, 1.619092150217396e+06, 5.861305860869866e+06, 1.831655177211366e+02, 1.395852645145970e+07, 2.556754283483295e+06, 4.893074486716148e-03, 4.524160858353154e-03, 8.175877021403473e-03, 4.750033051590131e-03, 4.695427739835904e-03, 4.695427739835904e-03, 5.465153590645110e-03, 5.518421186944047e-03, 5.317169541358174e-03, 5.266014436649214e-03, 5.272215973270124e-03, 3.259676598887679e-02, 1.750792387313125e-03, 9.542802211815687e-01, 5.565301717011119e-02, 1.377520804789648e-01, 3.603097666828069e-02, 3.603097666828069e-02, 4.160763934971546e-02, 1.631710227395146e+02, 4.467353544273390e+01, 3.061828077332301e-02, 7.250774625555880e+01, 7.635760340481458e+00, 4.334154798780144e+04, 2.337728448046336e+08, 1.697975144583202e+07, 9.947794103279955e+00, 3.594982179657136e+06, 3.594982179665529e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_scan_rvv10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_scan_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.840711736437616e-05, -8.840471092223239e-05, -8.839466955501580e-05, -8.843032970148305e-05, -8.841155192537050e-05, -8.841155192537050e-05, -2.867979987898056e-04, -2.864868193724981e-04, -2.780893198962250e-04, -2.814834568270362e-04, -2.811711064915017e-04, -1.904814632992452e-04, -2.458956879711425e-03, -2.710630802152982e-03, -2.585153267619143e-03, -2.662848497313843e-03, -2.644164619088735e-03, -2.644164619088735e-03, -2.336723585243249e-02, -2.344998733837975e-02, -6.551432575630723e-04, -2.343512910844078e-02, -2.333445917921142e-02, -2.333445917921140e-02, -6.471116262858109e-01, -6.202134885956625e-01, -9.179844307636210e-02, -1.009980248661076e+00, -8.659273513099269e-01, -8.659273513099269e-01, -2.046496582507400e-04, -2.053743981537698e-04, -2.046918175873116e-04, -8.113212337318843e-04, -2.050118954610943e-04, -2.050118954610943e-04, -9.886993652234806e-04, -9.786175693710069e-04, -9.846305510675106e-04, -9.879722638207276e-04, -9.801135879527732e-04, -5.139777602168573e-04, -7.265423096075965e-03, -8.406995709576851e-03, -6.894090496111579e-03, -7.832431716655272e-03, -7.444103665864229e-03, -3.091490467768357e-02, -3.953147479753030e-04, -1.794699161867287e-02, -3.283827318341963e-04, -9.133445426815258e-04, -2.972140485160712e-02, -2.972140485160708e-02, -2.390897089001701e-08, -1.013483317207411e+00, -1.640263315302042e+00, -1.359175593007804e-04, -1.465206422832930e-07, -1.250938243985906e+00, -1.415035292570292e-02, -1.275305171710597e-02, -2.006813208057732e-02, -1.360975867092557e-02, -1.340326934271167e-02, -1.340326934271167e-02, -1.452468798476442e-02, -8.828901022941649e-03, -9.864785695858318e-03, -1.128896718333948e-02, -1.050068741728242e-02, -4.549281871161467e-02, -7.152037210929414e-03, -4.329032978220236e-03, -1.353597972903179e-02, -1.354718126418930e-02, -1.319886859731837e-02, -1.319886859731837e-02, -5.476684086886345e-03, -9.671933445307820e-02, -6.666247447767312e-02, -1.531935877250282e-02, -3.661217099299452e-04, -4.380355223481722e-02, -4.236494051708719e-01, -2.795020428440123e+00, -1.877493130888739e+00, -4.742986048932429e-02, -1.393507241946045e+00, -1.393507241949295e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
