
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.917059189119401e-02, -3.917142256895564e-02, -3.917378613324793e-02, -3.916145054367204e-02, -3.492004693649180e-02, -3.492004693649180e-02, -2.920240169737336e-02, -2.718147027664118e-02, -2.718153675959017e-02, -2.614424959611445e-02, -2.920264019991960e-02, -2.718148771973304e-02, -2.445154336937431e-02, -2.444829958140505e-02, -2.437340598295245e-02, -2.439756630967844e-02, -2.338798789147608e-02, -2.427008570872782e-02, -1.410546825926894e-02, -1.433531222395138e-02, -2.394556738536908e-02, -1.738217785637194e-02, -1.235590838547158e-02, -1.956082766912748e-02, -8.201826628473790e-04, -5.530773924444482e-04, -9.173739163610087e-03, -1.161846419502574e-04, -9.252322792193983e-04, -7.112331637646350e-05, -2.749636480652998e-02, -3.860241469181094e-02, -2.749637092739776e-02, -2.749648069812044e-02, -2.749642748932815e-02, -3.853431520571422e-02, -2.434063596121715e-02, -2.439706250539021e-02, -2.654290081144486e-02, -2.430879540284147e-02, -2.655817688416516e-02, -2.434785868565496e-02, -2.407054079257307e-02, -3.990304206425030e-02, -2.379808290069850e-02, -3.419977373514171e-02, -2.404376917054870e-02, -2.404376917054868e-02, -1.099220762140162e-02, -1.895812590306762e-02, -1.461605404991302e-02, -6.331633823738249e-02, -1.608732534686956e-02, -9.983909915724232e-03, -7.480010994802272e-05, -1.408804788577254e-03, -3.519596604717389e-04, -1.214287247450274e-02, -1.168727589306467e-03, -1.168727589306467e-03, -3.927363723781333e-02, -3.572759759752617e-02, -3.678574247292812e-02, -2.407858130094375e-02, -3.724379312210636e-02, -2.407610462217323e-02, -2.400276452966144e-02, -2.352122657804275e-02, -2.367116028392360e-02, -2.380982076770610e-02, -2.649767637235022e-02, -2.374027700536388e-02, -2.444160683509042e-02, -1.643871683579496e-02, -2.105215271653865e-02, -2.078955068080747e-02, -2.167148079745935e-02, -2.167148079745935e-02, -2.184065895482153e-02, -3.251612441712039e-03, -6.560128545093187e-03, -2.148200692257403e-02, -1.363052275451068e-02, -1.363052275451069e-02, -4.417730634713397e-04, -4.014203202069063e-04, -4.611042399760569e-05, -7.105835290577936e-03, -1.109937370003485e-03, -4.847905256684220e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.138655081021466e-01, -1.138655743495247e-01, -1.138674391680374e-01, -1.138674550264822e-01, -1.138727678389106e-01, -1.138729765170610e-01, -1.138447465023728e-01, -1.138443803139053e-01, -1.098025191556724e-01, "nan", -1.098025191556724e-01, "nan", -7.993104476735978e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.992094428292355e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.416228810455069e-02, "nan", "nan", -2.306170573910535e-02, -2.180710975601581e-02, -2.337740177643343e-02, -2.187885286255999e-02, -1.943981052856346e-02, "nan", "nan", "nan", "nan", "nan", "nan", 3.038083398646297e-02, -1.573925775147475e-03, "nan", -1.826057584661951e-03, "nan", "nan", "nan", -2.348017696162872e-05, "nan", "nan", -2.397169711317246e-03, -5.949109897575000e-05, "nan", "nan", "nan", -1.193485566724132e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -1.191749447195254e-01, "nan", -1.803186597177616e-02, "nan", -1.810651057967786e-02, "nan", "nan", -1.785134560384991e-02, "nan", "nan", "nan", -1.831386129196254e-02, "nan", "nan", "nan", -7.820152923924141e-02, "nan", "nan", "nan", "nan", -8.054771926210083e-02, "nan", "nan", "nan", "nan", 1.736908073159458e-02, "nan", "nan", "nan", "nan", "nan", -1.159705035522658e-01, -1.160208078646975e-01, "nan", "nan", "nan", -1.079813151307681e-02, "nan", -1.166792952589862e-04, "nan", "nan", -6.811811450651954e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -8.173041715752014e-02, -8.195763702595014e-02, "nan", -8.209766389448361e-02, "nan", "nan", "nan", -8.209624318170346e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.645505976896400e-02, "nan", "nan", "nan", "nan", "nan", "nan", -1.259844147114392e-02, "nan", "nan", "nan", -1.844127712519863e-02, "nan", "nan", "nan", "nan", "nan", -1.962957201624000e-02, "nan", 2.225310018405946e-02, -1.028335957025572e-04, "nan", -3.486515922775967e-02, "nan", "nan", "nan", "nan", "nan", "nan", -6.598489651500555e-04, "nan", "nan", "nan", -7.853967532043515e-05, "nan", -4.212430544659195e-04, "nan", "nan", -1.091976024950326e-03, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.944758415983993e-10, 3.663049202044302e-10, 1.944760135962016e-10, 1.944825055769292e-10, 3.663147363635910e-10, 1.944822622059882e-10, 1.944948030406707e-10, 3.663329017447908e-10, 1.944963303361966e-10, 1.944013808758224e-10, 3.661873267122040e-10, 1.943981828541557e-10, 2.131116625654932e-10, 4.005787056677800e-10, "nan", 2.131116625654932e-10, 4.005787056677800e-10, "nan", 9.108253124631512e-07, 2.064236062466040e-06, "nan", "nan", 3.115097476778729e-06, "nan", "nan", 3.114011613875532e-06, "nan", "nan", 1.527425104131431e-06, "nan", 9.103860514757581e-07, 2.064643038968474e-06, "nan", "nan", 3.114738527059585e-06, "nan", "nan", 6.184949511033547e-03, "nan", "nan", 6.215844766606363e-03, "nan", "nan", 7.021205259581796e-03, "nan", "nan", 6.763844517423096e-03, "nan", "nan", 3.810599807205770e-03, -1.620197308323347e-03, "nan", 6.768834578287713e-03, "nan", -2.752473333129648e-01, 6.892301934339180e-01, -2.081947117481450e-01, -2.701532069652810e-01, 6.682062050814906e-01, -1.963702406056220e-01, -7.473067202842472e-04, 1.874649770937561e-03, "nan", "nan", 8.342024523058560e+00, "nan", "nan", 3.507412252999406e+00, "nan", "nan", 7.043385275032583e+00, -1.360455248098053e+01, 1.625531159500624e+02, 4.633134353214010e+02, "nan", -6.004064927311936e+04, 9.796356861311047e+04, "nan", "nan", 2.311424576509836e+03, "nan", -7.104510975512952e+02, 1.866502295010637e+03, "nan", "nan", 1.586595621163789e+04, 7.850692168447524e+03, 1.210285086539165e+01, 9.820217959440454e+01, "nan", "nan", 4.671705024344597e-07, "nan", 3.340340224775826e-07, 6.023745429138219e-07, "nan", "nan", 4.671503622439363e-07, "nan", "nan", 4.667936014162938e-07, "nan", "nan", 4.669664098539013e-07, "nan", "nan", 6.003908938592693e-07, 3.328752407712095e-07, "nan", 1.671877903464484e-05, -6.057928235721349e-06, "nan", 1.635281269735131e-05, -5.941257669105837e-06, "nan", 4.662975943011522e-05, "nan", -5.943853108960314e-06, 1.638592333456259e-05, "nan", "nan", 4.413209893985145e-05, "nan", -5.904425375299573e-06, 1.640197852481132e-05, "nan", "nan", 1.132723396668320e-02, "nan", -2.608331222491142e-03, 1.815937308214289e-02, "nan", "nan", 1.603914302816248e-02, "nan", "nan", 2.588819464679097e-02, 1.476107440185070e-02, "nan", 1.049223589146553e-02, "nan", "nan", 1.049223589146553e-02, "nan", -6.437694698633488e+00, 1.461554328020581e+01, "nan", "nan", 2.513154334862539e+00, "nan", "nan", 5.547264869296495e+01, "nan", 7.363590218301076e-05, 1.348740283514136e-04, 7.364541063274100e-05, "nan", 2.003990128725883e+01, "nan", "nan", 2.540331182046716e+00, -6.250733991163836e-01, "nan", 8.484071914769407e+02, -1.071003575581168e+02, "nan", 4.180404680747686e+07, "nan", 2.121542195135471e+03, 6.151359700297426e+03, "nan", "nan", 3.003672382265465e+02, "nan", "nan", 5.362177687281644e+07, "nan", "nan", 5.362177687281641e+07, "nan", "nan", 2.709846882054154e-02, 1.562422286534436e-02, 1.373676556514880e-02, 2.378706706909651e-02, "nan", 1.433480045933052e-02, 2.479559802465659e-02, "nan", "nan", 1.118552908743266e-02, "nan", 1.459054734269285e-02, 2.523314963860443e-02, "nan", "nan", 1.122772212860753e-02, "nan", "nan", 1.254514334166721e-02, "nan", "nan", 2.493738414961819e-02, "nan", "nan", 2.027269172727151e-02, "nan", "nan", 1.665400594851027e-02, "nan", 1.055045634821113e-02, 2.056850281987949e-02, "nan", "nan", 1.839412122348193e-02, "nan", "nan", 6.291630711426325e-03, "nan", "nan", 3.144724983022348e-01, -1.025659584169712e-01, "nan", 4.048613100586214e-01, "nan", "nan", 7.163441399860426e-02, -2.467066446896955e-02, "nan", 2.195302939578999e-01, "nan", "nan", 2.195302939579000e-01, "nan", "nan", 2.184655158064823e-02, -7.390126263118357e-03, "nan", 2.112166228671167e+02, -9.798550748348148e+01, -1.364475467797050e+01, 3.526188352866712e+01, "nan", 4.745045792175690e-03, 1.025832567728747e-01, "nan", "nan", 1.072993548718384e+02, "nan", "nan", 1.072993548718383e+02, "nan", "nan", 1.541946053979480e+02, -2.417201969023454e+01, "nan", 9.795356684268999e+09, "nan", "nan", 1.387091872196787e+03, 8.299423151036558e+01, "nan", 1.629219945661578e+01, -6.053618170887865e+00, "nan", 7.526258682327123e+07, "nan", 6.089178154658459e+03, 1.238039888325044e+04, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-3.798363361380758e-06, -3.798365234189293e-06, -3.798466212402630e-06, -3.798461580901129e-06, -3.798694907218964e-06, -3.798718403976714e-06, -3.797253458652128e-06, -3.797202987180192e-06, -4.300801764720299e-06, "nan", -4.300801764720299e-06, "nan", -9.621469642089678e-05, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", -9.620772323306061e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.551653137695086e-06, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, -4.036713343046258e-07, "nan", -8.221983199898493e-04, 0.000000000000000e+00, "nan", "nan", -7.379626171831139e-07, "nan", "nan", -2.633226501221942e-08, -1.228990627798765e-07, "nan", "nan", "nan", -8.908953645567822e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -8.886963206356488e-05, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 2.172970743667230e-62, "nan", "nan", "nan", "nan", -5.360238030370707e-03, "nan", "nan", "nan", "nan", 2.041936583013960e-64, "nan", "nan", "nan", "nan", "nan", -6.473350797238406e-04, -6.473476211082333e-04, "nan", "nan", "nan", 0.000000000000000e+00, "nan", -7.602891065396346e-08, "nan", "nan", -2.158060167891985e-07, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.011961015346221e-03, -5.455855011399154e-03, "nan", -5.644924783927993e-03, "nan", "nan", "nan", -5.723015145505480e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.604938866089746e-03, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", -3.721039829779316e-05, "nan", -5.481226169568090e-66, 0.000000000000000e+00, "nan", -2.307154115614010e-03, "nan", "nan", "nan", "nan", "nan", "nan", -3.673830644387437e-06, "nan", "nan", "nan", -2.562110730916291e-08, "nan", 0.000000000000000e+00, "nan", "nan", -1.962240885906778e-08, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
