
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scanl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.659091432130319e-02, -2.659095556558741e-02, -2.659107406727373e-02, -2.659046175998243e-02, -2.659079184698119e-02, -2.659079184698119e-02, -4.660801157321084e-02, -4.660575630124444e-02, -4.652196562067001e-02, -4.633329792388274e-02, -4.644891699795126e-02, -4.644891699795126e-02, -4.127095124292177e-02, -4.110898467038328e-02, -3.727238889601643e-02, -3.743786462444700e-02, -3.738782816078173e-02, -3.738782816078173e-02, -1.736498308132422e-02, -1.778581934644104e-02, -4.770670723238796e-02, -1.538333972111571e-02, -1.293756915304314e-02, -1.293756915304314e-02, -6.561633287374460e-04, -7.034581057574171e-04, -4.471519555475187e-03, -3.214673217378993e-04, -3.885818498579877e-04, -3.885818498579876e-04, -8.750320436638556e-02, -8.127991865077715e-02, -2.639441875881827e-02, -8.488911395775434e-02, -2.639828739395500e-02, -7.185453700978205e-02, -2.414367203353146e-02, -4.171126809553188e-02, -3.160290245338907e-02, -3.119224481396879e-02, -3.335085497130652e-02, -2.283761114261028e-02, -5.517820943278154e-02, -7.551071944157203e-02, -5.261932252810222e-02, -5.748918147851840e-02, -4.603979863992484e-02, -4.988275453400279e-02, -7.881784428110342e-03, -1.928192006676359e-02, -7.383075017434206e-03, -8.166507256271507e-02, -9.576827801656231e-03, -9.576827801656231e-03, -1.864026973350841e-04, -2.238172725733913e-04, -1.638954646927365e-04, -5.259313632138579e-03, -2.970443943278072e-04, -2.655049383806869e-04, -5.832358792547385e-02, -5.411729538321011e-02, -5.553326456589716e-02, -5.839419777761004e-02, -5.600974341334223e-02, -5.613177802870990e-02, -5.909814326271334e-02, -2.595508684135468e-02, -5.192979807256082e-02, -2.282421370512291e-02, -4.791121489421461e-02, -5.200717616135650e-02, -7.131896784367948e-02, -1.472381161545968e-02, -1.755415865885898e-02, -1.977999760152003e-02, -3.206555345428432e-02, -2.971129458187019e-02, -3.223600803387949e-02, -2.914366659971390e-03, -5.787907950904581e-03, -3.305814240908567e-02, -6.868918158136978e-03, -6.868918158136994e-03, -6.049317848435937e-04, -6.246644708208943e-05, -8.605614822641071e-05, -6.417200469221990e-03, -2.849129774885681e-04, -2.849169905139390e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scanl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.031665871137033e-02, -3.031682136088877e-02, -3.031661641621200e-02, -3.031677422546584e-02, -3.031652023266696e-02, -3.031661889959994e-02, -3.031721050231479e-02, -3.031725612411737e-02, -3.031734682754910e-02, -3.031640342698599e-02, -3.031734682754910e-02, -3.031640342698599e-02, -1.125630098510758e-01, -1.125638933150706e-01, -1.125664064129905e-01, -1.125676773503021e-01, -1.126539408966847e-01, -1.126483477904318e-01, -1.125279451605340e-01, -1.125256321900473e-01, -1.126090718414630e-01, -1.125459525126885e-01, -1.126090718414630e-01, -1.125459525126885e-01, -7.728542264221859e-02, -7.690602352912466e-02, -7.708662135687341e-02, -7.662207474587311e-02, -7.063548799216315e-02, -7.124518635699745e-02, -7.143220257107340e-02, -7.124337676297977e-02, -6.863379786352330e-02, -7.435343295632660e-02, -6.863379786352330e-02, -7.435343295632660e-02, -6.509448020667565e-02, -6.165483901246043e-02, -6.501322285808779e-02, -6.132777438737921e-02, -8.815687713924154e-02, -8.429485678686927e-02, -3.160153469746448e-02, -3.103066063438480e-02, -2.687387380241963e-02, -4.964494897318265e-02, -2.687387380241951e-02, -4.964494897318249e-02, -1.290975499306095e-03, -1.221409751754499e-03, -1.389317357548782e-03, -1.304491152346026e-03, -8.641658660761803e-03, -8.124512566525032e-03, -6.124315836231992e-04, -6.185135505021716e-04, -6.914067586383786e-04, -1.023200844851299e-03, -6.914067586383784e-04, -1.023200844851299e-03, -1.706082652177768e-01, -1.668621055178476e-01, -1.416181115344586e-01, -1.416691029902397e-01, -2.930786023238209e-02, -2.932802661004162e-02, -1.714524355960174e-01, -1.707475411116337e-01, -2.930345287135002e-02, -2.932301114002652e-02, -1.320000928929402e-01, -1.317319957135074e-01, -3.518212457170738e-02, -3.341056056560708e-02, -8.108123318564159e-02, -8.111109106381185e-02, -9.576702652290206e-02, -9.565242993969005e-02, -9.545738709941161e-02, -9.554341713911424e-02, -9.681528760026979e-02, -9.708633389434954e-02, -3.064474597242832e-02, -3.093673911568857e-02, -1.020636922902097e-01, -1.002272401977353e-01, -1.055759298011705e-01, -1.057408020744798e-01, -9.808191245768122e-02, -9.605164900337233e-02, -8.518522467138129e-02, -8.064690917360864e-02, -8.041384445892330e-02, -8.602628169785209e-02, -8.221546240079673e-02, -8.798413785584956e-02, -1.406916185411370e-02, -1.427029437125729e-02, -3.724410967190354e-02, -3.702497355799133e-02, -1.393467665170652e-02, -1.283470699195607e-02, -1.225944526637506e-01, -1.226765650795050e-01, -1.527279753209937e-02, -1.776856208510842e-02, -1.527279753209937e-02, -1.776856208510842e-02, -2.620765670041740e-03, 1.581887273895879e-03, -2.467061861533104e-03, 1.491350361363951e-03, 1.754912339148054e-03, -2.097077971285591e-03, -1.016782115927643e-02, -9.218278414296415e-03, -7.185981761820700e-04, -5.283009361858647e-04, -6.381378889377627e-04, -4.676389158030501e-04, -7.167524533384127e-02, -7.123439976428024e-02, -7.481671628281997e-02, -7.439859546909110e-02, -7.396754786555233e-02, -7.354561855281748e-02, -7.739535126277716e-02, -7.753126428321233e-02, -7.313510414229688e-02, -7.276163304986175e-02, -7.351944560200217e-02, -7.308943501862256e-02, -6.947270130263773e-02, -6.906863696841548e-02, -7.286108042672282e-02, -7.237022761842217e-02, -9.574106605979700e-02, -9.525307550440010e-02, -2.633911536229335e-02, -2.609798514138772e-02, -8.123846554230853e-02, -8.083150620378662e-02, -9.436451350436278e-02, -9.416734020006459e-02, -1.154917538679242e-01, -1.159253940301889e-01, -2.363935641777373e-02, -2.341022065467396e-02, -2.899006502650986e-02, -2.882011271151779e-02, -2.627491110986696e-02, -2.593469688591572e-02, -5.926880230747224e-02, -5.929153078804958e-02, -5.528735773917458e-02, -5.531266221719421e-02, -7.942786753699917e-02, -7.890273308830552e-02, -5.466447756441797e-03, -5.486050032009543e-03, -1.102753045138272e-02, -1.059797904603132e-02, -7.207552863907217e-02, -7.073803380131197e-02, -1.079923106220372e-02, -1.360765021862067e-02, -1.079923106220369e-02, -1.360765021862072e-02, -4.162320602390283e-04, -1.810836332429613e-03, -5.587999478474811e-06, -2.388583736975432e-04, 4.038186244569987e-04, -6.472979752075607e-04, -1.199048114495464e-02, -1.142167052091454e-02, -9.029881793977908e-04, -3.986177145888964e-04, -9.028787325195175e-04, -3.987129993472439e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.028663541171130e-11, 1.574794396498471e-10, -6.028717248997014e-11, -6.028673170703335e-11, 1.574797105741827e-10, -6.028763736372806e-11, -6.028687708371680e-11, 1.574762881101954e-10, -6.028587583022467e-11, -6.028065688672767e-11, 1.574723546911058e-10, -6.028383370790906e-11, -6.028204406039250e-11, 1.574750731942941e-10, -6.028735968785701e-11, -6.028204406039250e-11, 1.574750731942941e-10, -6.028735968785701e-11, 1.576543467857677e-06, 2.786594033251125e-06, 1.576711954036617e-06, 1.576801665593735e-06, 2.787078920902884e-06, 1.576997249222492e-06, 1.583176331586789e-06, 2.798146763888137e-06, 1.583093866374905e-06, 1.572785224759198e-06, 2.779082126797502e-06, 1.572909111455754e-06, 1.578585837131335e-06, 2.788142362061100e-06, 1.576832528787438e-06, 1.578585837131335e-06, 2.788142362061100e-06, 1.576832528787438e-06, 1.230470321522090e-03, 2.471117395560821e-03, 1.230486473299963e-03, 1.222091875423699e-03, 2.455077515045938e-03, 1.222122774632760e-03, 1.025809760368032e-03, 2.076227155513426e-03, 1.025474894938261e-03, 9.342732363653813e-04, 1.867440908319418e-03, 9.342744253646437e-04, 9.576571908541681e-04, 1.917858448089328e-03, 9.573598184637776e-04, 9.576571908541681e-04, 1.917858448089328e-03, 9.573598184637776e-04, 7.810382476492249e-01, 1.252400669629944e+00, 6.996417766657093e-01, 7.577678855604835e-01, 1.215068624774341e+00, 6.764973874365688e-01, 8.416273407471659e-04, 1.702078136339429e-03, 8.425009594698667e-04, 2.979452671638456e-01, 6.040493707123444e-01, 2.896317409687424e-01, 3.033086966651495e-01, 5.571106187696526e-01, 4.106093875715460e-01, 3.033086966651430e-01, 5.571106187696409e-01, 4.106093875715371e-01, 4.789387572448225e+01, 1.498799154590744e+02, 5.163065016541982e+01, 4.713920494534820e+01, 1.390604095986161e+02, 5.054811277327044e+01, 1.952317235957127e+00, 3.892711381711113e+00, 1.964047396664305e+00, -2.308510671276222e+02, 1.030728282912198e+03, -2.703734018020598e+02, 9.319843062647487e+01, 2.919682248366403e+02, -9.362609424312356e+01, 9.319843062647477e+01, 2.919682248366423e+02, -9.362609424312758e+01, 3.078815300635001e-07, 6.671294960199179e-07, 3.179635538530420e-07, 3.101990817576612e-07, 6.246455941599266e-07, 3.102358288858244e-07, -8.064152067826055e-08, 2.053053995519258e-07, -8.077575526419770e-08, 2.688776203244006e-07, 6.494823579356444e-07, 2.706405807416260e-07, -8.076898587367780e-08, 2.055674394753003e-07, -8.090337243234829e-08, 2.748715592528851e-07, 5.542903778312852e-07, 2.815179425123730e-07, -1.993620987387358e-06, 1.412317087296906e-05, -2.237211103767018e-06, 5.839731576192425e-06, 1.203454734788678e-05, 5.839218386643727e-06, 1.302534120984940e-05, 2.254817897282333e-05, 1.303471513201971e-05, 1.267337886454237e-05, 2.215313167376928e-05, 1.277579633781151e-05, 1.325008304040795e-05, 2.282725965639753e-05, 1.320876637536966e-05, -3.712769957051974e-06, 1.098856101423827e-05, -3.707434057215846e-06, 3.868013378901149e-03, 1.107304420679361e-02, 4.132840154698174e-03, 8.787422142197141e-03, 1.840782240268833e-02, 8.762940690250912e-03, 5.285009580225184e-03, 1.401438320729897e-02, 5.099443045275203e-03, 1.232261572392287e-02, 2.443896801735423e-02, 1.251680486750067e-02, 7.515029388897263e-03, 1.368681005796590e-02, 7.586186046662783e-03, 4.505868336086113e-03, 9.035668204952827e-03, 4.501109955205171e-03, -2.586158766027822e+00, 5.736435173151610e+00, -2.433047275896581e+00, 6.638514815303080e-02, 1.534270481454337e-01, 6.648266541961244e-02, -4.082025316531122e+00, 7.791342652704993e+00, -2.922829152101118e+00, 6.297292858529566e-05, 1.257225658070396e-04, 6.297411048233333e-05, -1.870325533546215e+00, 3.740536216614013e+00, -1.276316733072361e+00, -1.870325533546215e+00, 3.740536216614013e+00, -1.276316733072361e+00, -3.174661287943027e+05, 5.670092442600863e+05, -2.519696004579372e+05, -2.339567672329396e+05, 4.483039855743817e+05, -2.137704110786919e+05, -1.091024515434556e+06, 1.839868673754714e+06, -7.731220266900297e+05, -1.846118367320504e+01, 3.854197524995697e+01, -1.777364478614866e+01, -3.509474116824678e+04, 2.828579641997457e+04, -5.037670591096798e+03, -1.021246243362706e+04, 8.820819486928953e+03, -1.234982599740282e+03, 3.295897789429159e-03, 3.173284953547297e-02, 3.440592609594095e-03, 2.374485900538364e-03, 2.774155925851861e-02, 2.508150661203717e-03, 2.648070529376415e-03, 2.898901490216625e-02, 2.785713732835098e-03, 3.432256165352129e-03, 2.969048509353425e-02, 3.497636419891633e-03, 2.740752449363459e-03, 2.956449932998363e-02, 2.873437780985296e-03, 2.768027324462792e-03, 2.953979133033417e-02, 2.906828131500571e-03, 4.094093759313299e-03, 3.769294028397012e-02, 4.239391874715435e-03, 1.083489312561173e-02, 2.065783075231252e-02, 1.067476347431514e-02, 6.843036215282944e-03, 1.670543353699280e-02, 6.862981024194912e-03, -4.164311090818663e-03, 1.117565312638212e-02, -4.062155833851426e-03, 7.621330290813172e-03, 1.533901490657036e-02, 7.623679592388791e-03, 5.079620493579780e-03, 1.838191502741709e-02, 5.083741583298404e-03, 4.919296319402374e-03, 1.382975189520608e-02, 4.885607131447127e-03, -7.745851070374080e-02, 2.167270519691084e-01, -7.426774497645160e-02, -3.956954887199948e-02, 1.613805587921958e-01, -3.550663524390169e-02, -1.872816284272195e-02, 5.413702453274128e-02, -1.797682440301659e-02, 3.101886144922188e-02, 6.256422273924889e-02, 3.101531995742996e-02, 3.076301855193623e-02, 6.373849889772147e-02, 3.079300177563857e-02, 1.990132490714197e-02, 3.428653854609613e-02, 1.983234680226178e-02, -1.398482055601429e+02, 2.792106446340760e+02, -1.341895424072221e+02, 1.129022179808653e+00, 2.244048551376217e+00, 1.102245237082270e+00, 8.816414283312815e-02, 1.518155493667077e-01, 8.643958713136241e-02, -9.167738440095819e+00, 1.709198285916965e+01, -6.500909832984680e+00, -9.167738440096086e+00, 1.709198285917010e+01, -6.500909832984886e+00, -1.942298726720878e+04, 3.499271982200675e+04, -1.568199453064155e+04, -2.106547192008795e+05, 4.393236827615958e+05, -2.077176015186319e+05, -8.077234675413641e+05, 1.344445691680352e+06, -5.578673409546275e+05, -9.562628588374412e+00, 1.999714307249012e+01, -8.633499580502741e+00, -1.790039630216518e+04, 1.688404390084491e+04, -2.782814478256717e+03, -1.788512265168322e+04, 1.687223160747856e+04, -2.780325213471933e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scanl_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scanl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.116957280414356e-04, -1.117062953870790e-04, -1.117264007920218e-04, -1.117386944931010e-04, -1.125705840957723e-04, -1.125656603616686e-04, -1.122984943276590e-04, -1.123070624964107e-04, -1.123604156052453e-04, -1.122568189397354e-04, -1.123604156052453e-04, -1.122568189397354e-04, -2.511029067576957e-05, -2.508441476884742e-05, -2.681293981453572e-05, -2.678425807370940e-05, -5.935369908993210e-05, -5.932596637640569e-05, 2.527272066851648e-06, 2.524712639825355e-06, -6.464397398070851e-06, -6.463630953470681e-06, -6.464397398070851e-06, -6.463630953470681e-06, -9.550585706632706e-03, -8.990258732158432e-03, -9.618141445559352e-03, -9.042476076408739e-03, -1.047923710302428e-04, -1.036161660440391e-04, -9.314714229113091e-04, -8.961558652050319e-04, -1.838142521718237e-03, -1.935695645460030e-03, -1.838142521718185e-03, -1.935695645459989e-03, 1.767845753290037e-06, 1.995135403839185e-06, 1.744365984591217e-06, 2.010179015504440e-06, -7.304376884124168e-06, -8.044205227904852e-06, 3.110241341795372e-06, 3.192647065152565e-06, 1.768228604413919e-06, 2.594923573982450e-07, 1.768228604413939e-06, 2.594923573982515e-07, 1.955576583574926e-07, -2.987858138673730e-07, -5.233186530828697e-06, -5.234115669156400e-06, 0.000000000000000e+00, 0.000000000000000e+00, 5.530189797186060e-07, 5.093650364912081e-07, 0.000000000000000e+00, 0.000000000000000e+00, -1.130252898525810e-05, -1.268821424846810e-05, 3.368624416417512e-07, 3.578723569777563e-07, -2.784039376285495e-05, -2.783522735119162e-05, -2.074528950750460e-04, -2.076509324831340e-04, -2.084107894102770e-04, -2.096871607916054e-04, -2.117356701550883e-04, -2.109847750757892e-04, 0.000000000000000e+00, -1.435548305224839e-06, 2.518547239633169e-05, 1.575425038015810e-05, -4.463537406237352e-05, -4.212252989304736e-05, 1.564955634037288e-05, 2.610764684819402e-05, -1.088206801286158e-03, -1.144849266547056e-03, -2.107121590122408e-03, -2.096528616082529e-03, -4.996045553180729e-05, -4.917573827984861e-05, 0.000000000000000e+00, 0.000000000000000e+00, 8.356995068073611e-06, 8.427618702398265e-06, 0.000000000000000e+00, 0.000000000000000e+00, -9.285180486464837e-05, -9.286253227893015e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 8.182211137406790e-07, 1.080749152136354e-06, 1.955731747585197e-12, 2.321879748755447e-12, 3.484425571045457e-12, 1.801432337871908e-11, 0.000000000000000e+00, 0.000000000000000e+00, 3.428272009112896e-07, 4.617968171756314e-06, 2.660180820100262e-11, 2.228113053201517e-10, 1.259071259584764e-11, 1.242626722912813e-11, 7.328567162533505e-11, 7.359247217246525e-11, 2.482483778415384e-13, 2.479170334604028e-13, 1.225130468170374e-07, 1.545586906518938e-07, 8.649130199613511e-10, 6.379180673612068e-10, 7.608829615898126e-14, 7.638550149178882e-14, 8.660810477249520e-13, 8.262533841712511e-13, -3.042845652270050e-03, -3.014999287050222e-03, 1.920386264555120e-05, 1.909677904196162e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.369887684382627e-04, -1.373815436801367e-04, 1.988631633413975e-05, 2.047064140784167e-05, 2.735575000493614e-05, 2.882456518386501e-05, 0.000000000000000e+00, 0.000000000000000e+00, 5.892186269427286e-06, 5.948468667863866e-06, 0.000000000000000e+00, 0.000000000000000e+00, -2.653028078354889e-04, -2.655180486813125e-04, -5.760287566020550e-04, -5.775589832049652e-04, -3.687894300628656e-03, -3.685791522131694e-03, 0.000000000000000e+00, 0.000000000000000e+00, -8.178088512654222e-06, -4.802121616863957e-06, -6.130721475733619e-03, -6.054835355620553e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.429525971802417e-09, 2.563647872440599e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.627120040693038e-10, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
