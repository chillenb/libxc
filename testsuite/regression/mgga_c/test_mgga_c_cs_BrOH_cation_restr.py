
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.963150813349331e-02, -2.963163037088355e-02, -2.963161053130527e-02, -2.962977805494599e-02, -2.963081895367632e-02, -2.963081895367632e-02, -5.388908772940549e-02, -5.388403396745503e-02, -5.373725444379662e-02, -5.366428977280245e-02, -5.372805769188710e-02, -5.372805769188710e-02, -5.684039733880844e-02, -5.686121399862930e-02, -5.666294875745424e-02, -5.355569968812902e-02, -5.451007239200448e-02, -5.451007239200448e-02, -1.583524785656451e-02, -1.628103538441345e-02, -9.899023384547335e-02, -1.661171294890066e-02, -1.593018799792485e-02, -1.593018799792485e-02, -1.044872107887999e-03, -1.098544874184918e-03, -5.422674978432738e-03, -6.089117233510075e-04, -7.627212140817514e-04, -7.627212140817514e-04, -1.486064481784547e-01, -7.564922890705164e-02, 6.630575100869350e-01, -2.706073040603565e-01, -1.292011644353450e-02, -4.938512669487541e-02, 2.100696520594818e+00, -5.309176219366323e-02, -3.534610362073900e-02, -3.471563563650977e-02, -3.677659476681908e-02, -2.830172849856426e-02, -1.777804565575226e-01, -7.710768554509762e-02, -1.655242417038298e-01, -4.021258882644409e-02, -3.539083564080193e-02, -3.868381064924556e-02, 2.076122272799173e-02, -6.921072651579721e-02, 1.593819073854248e-01, -5.532122903203041e-02, -1.030589341152795e-02, -7.776873865611570e-03, -4.711484662502144e-04, -5.954303028162167e-04, -4.565956743404023e-04, 6.692212158641656e-03, -5.490128921827559e-04, -5.490128921827559e-04, -9.036896327573711e+02, 3.673726451126738e+02, 6.350466061263837e+03, -8.144270923448236e+00, 1.171270855362576e+02, -1.148181943584480e+04, 3.503953097437524e+03, -2.644965072058337e-02, -1.167196444215480e-01, -1.282686599427891e-02, -3.457409968908792e-02, -2.515954500323906e-01, -2.011153132691282e-01, 6.390265660865403e-01, 1.047250902492338e+00, 7.781996920597201e-02, -3.602731022650495e-02, -2.870774639073409e-02, -2.943476432041647e-02, -3.376108679105143e-03, -7.171423022121534e-03, -2.769085763707213e-02, 5.445961534908916e-02, -8.172081947987188e-03, -1.461859265619328e-03, -1.605868752035934e-04, -3.358736077294447e-04, -2.637863256047830e-03, -5.084325674373076e-04, -5.084325674373072e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.810647534455145e-02, -7.810589753118909e-02, -7.810450493637233e-02, -7.811309451466004e-02, -7.810842591124748e-02, -7.810842591124748e-02, -6.232874798790753e-02, -6.232765051727245e-02, -6.232116945434965e-02, -6.253816982749949e-02, -6.242409767523677e-02, -6.242409767523677e-02, -4.883738367154546e-02, -4.906310337467740e-02, -5.589514955159448e-02, -5.717663847748498e-02, -5.645771098321224e-02, -5.645771098321224e-02, -4.315384513105112e-02, -4.250625803057644e-02, -2.891737505762768e-02, -4.470674517259903e-02, -4.337101527872605e-02, -4.337101527872605e-02, -1.385763069961000e-03, -1.456547016475084e-03, -9.184617475198687e-03, -8.093692607481083e-04, -1.013018663303184e-03, -1.013018663303184e-03, 5.966457532482937e-03, -4.040733019148160e-02, -5.109622110813669e-01, 8.375154794957157e-02, -8.040309365772491e-02, -5.717917384407570e-02, -1.357754233737128e+00, -8.413091657107621e-02, -9.795075276362235e-02, -9.746158619968498e-02, -9.307167761914951e-02, -9.808341944215919e-02, 1.742508943749939e-02, -2.081569071562704e-02, 1.029105216763315e-02, -3.696996276993482e-02, -4.520733312959130e-02, -4.373201259957293e-02, -2.940239782636757e-02, -5.183648544579929e-02, 2.908030881097023e-02, -4.159789868323859e-02, -3.879615197379037e-02, -3.828753019470745e-02, -6.266934079130558e-04, -7.915040797376599e-04, -6.073811945670162e-04, -8.819517656629061e-03, -7.299742510126669e-04, -7.299742510126669e-04, 4.029470448192191e+02, -1.634888698398969e+02, -2.827622094477756e+03, 3.575448933366494e+00, -5.222308725335857e+01, 5.114057416089273e+03, -1.544489610524533e+03, -5.379894438464436e-02, -1.128097269608105e-02, -5.090160600679640e-02, -4.358302418995078e-02, 4.844913841327015e-02, 3.658453525388604e-02, -1.725606848765811e-01, -3.117385381591060e-01, -7.978477203221364e-02, -4.662516718795084e-02, -4.870974565413923e-02, -5.067155858304473e-02, -5.588360696129922e-03, -1.553741670824269e-02, -4.042450926090507e-02, 6.906808097925019e-03, -2.609071137670186e-02, -1.934651793063358e-03, -2.139410461269027e-04, -4.470668634415559e-04, -2.116585074297005e-02, -6.761579977676308e-04, -6.761579977676303e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.139601068932671e-10, 1.139585248855127e-10, 1.139510037575377e-10, 1.139745518580706e-10, 1.139622818230883e-10, 1.139622818230883e-10, 8.902846778166768e-07, 8.902753234337427e-07, 8.899529848253858e-07, 8.896907123704592e-07, 8.901689966109850e-07, 8.901689966109850e-07, 1.998179640184968e-03, 2.007916052723721e-03, 2.260345891794418e-03, 2.179711236810529e-03, 2.196566146430079e-03, 2.196566146430079e-03, 3.987341155953147e-01, 3.798338439950793e-01, 1.009563035014796e-03, 9.143386719608807e-01, 6.542972018646394e-01, 6.542972018646395e-01, 4.164477415636917e-09, 1.798795210629131e-08, 3.481929050810353e+00, 9.016354746804872e-19, 4.906548147164937e-14, 4.906548147164937e-14, 1.236721565381294e-07, 1.235607227163915e-07, 1.236666036859538e-07, 1.235682336296393e-07, 1.236158821102485e-07, 1.236158821102485e-07, 1.425737057098278e-05, 1.377388728454118e-05, 1.462323001367872e-05, 1.418175611563530e-05, 1.381861016359248e-05, 1.381861016359248e-05, 3.586870218985182e-03, 2.500107084515583e-03, 5.013388384401574e-03, 4.243640502580464e-03, 3.346362397174132e-03, 3.346362397174132e-03, 2.221630864090271e+00, 3.967898151344223e-01, 2.584464451214834e+00, 1.563299550687888e-05, 1.556858266757152e+00, 1.556858266757152e+00, 9.179309428495147e-26, 2.618878008007065e-19, 9.317329098023973e-27, 4.277948442136239e+00, 2.291028317742281e-21, 2.291028317742281e-21, 3.512314526067317e-03, 3.601032317418634e-03, 3.569510333095477e-03, 3.543795384825065e-03, 3.556638954477972e-03, 3.556638954477972e-03, 3.956143930357352e-03, 7.600129167560093e-03, 6.249934198137157e-03, 5.185526868169438e-03, 5.699331056534016e-03, 5.699331056534016e-03, 2.031655383204406e-03, 1.801723299069411e-01, 9.280166819727180e-02, 3.176368774107276e-02, 5.488972967081825e-02, 5.488972967081825e-02, 1.075841419899206e-02, 3.221223535846995e+00, 4.458789355873584e+00, 3.672573590936341e-02, 3.331383516881539e+00, 3.331383516881538e+00, 1.775082281619253e-05, 1.645567532683157e-87, 2.019434833190355e-38, 3.620864228544241e+00, 1.744257150179911e-23, 1.744257150179819e-23])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.101607352434790e-06, -1.101601276410329e-06, -1.101572389282588e-06, -1.101662828921255e-06, -1.101615705614589e-06, -1.101615705614589e-06, -3.713942365370034e-05, -3.713927390635549e-05, -3.713411322706759e-05, -3.712991335219881e-05, -3.713757173039135e-05, -3.713757173039135e-05, -5.981444404322217e-04, -5.990731203619930e-04, -6.220670914935917e-04, -6.149380066490341e-04, -6.164441282323897e-04, -6.164441282323897e-04, -2.054849803234151e-03, -2.047738659858171e-03, -4.791339777083473e-04, -2.061764139564306e-03, -2.089071935229181e-03, -2.089071935229181e-03, -9.053360513526004e-16, -4.559829522358273e-15, -1.482245647089336e-04, -3.775780851250532e-26, -4.076793339509493e-21, -4.076793339509493e-21, -1.731525689772651e-05, -1.730918484796628e-05, -1.731495440165333e-05, -1.730959422512545e-05, -1.731219091545823e-05, -1.731219091545823e-05, -1.060095530023941e-04, -1.046594487595763e-04, -1.070117136407132e-04, -1.058003697174956e-04, -1.047856042418687e-04, -1.047856042418687e-04, -7.186542765758328e-04, -6.422067873557970e-04, -7.957678733977845e-04, -7.566250744885258e-04, -7.034207503956929e-04, -7.034207503956929e-04, -1.676548331987528e-03, -2.054160156308852e-03, -1.544248050506260e-03, -1.096963700302103e-04, -1.898801702787896e-03, -1.898801702787896e-03, -1.765655496343965e-33, -1.024611607034044e-26, -1.629747126536966e-34, -7.777095816236781e-04, -7.006241713425256e-29, -7.006241713425256e-29, -7.140170212736317e-04, -7.195268542390208e-04, -7.175810965338949e-04, -7.159841074504645e-04, -7.167828336661963e-04, -7.167828336661963e-04, -7.405988484743524e-04, -9.000020486792563e-04, -8.498392765883635e-04, -8.038778661321453e-04, -8.269011056550055e-04, -8.269011056550055e-04, -6.013236018881479e-04, -1.881151835192775e-03, -1.678278840281371e-03, -1.323764243153466e-03, -1.504492290718504e-03, -1.504492290718504e-03, -9.941252282733501e-04, -1.202346856883491e-04, -4.217329797874643e-04, -1.371202681780045e-03, -1.250308230374181e-03, -1.250308230374181e-03, -1.084756700808937e-11, -1.229667840886376e-96, -1.395618529142987e-46, -1.125280525280113e-03, -4.226013531533222e-31, -4.226013531532986e-31])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cs_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.812858819478317e-06, -8.812810211282633e-06, -8.812579114260706e-06, -8.813302631370039e-06, -8.812925644916713e-06, -8.812925644916713e-06, -2.971153892296027e-04, -2.971141912508440e-04, -2.970729058165407e-04, -2.970393068175904e-04, -2.971005738431309e-04, -2.971005738431309e-04, -4.785155523457775e-03, -4.792584962895944e-03, -4.976536731948733e-03, -4.919504053192273e-03, -4.931553025859119e-03, -4.931553025859119e-03, -1.643879842587321e-02, -1.638190927886537e-02, -3.833071821666778e-03, -1.649411311651444e-02, -1.671257548183345e-02, -1.671257548183345e-02, -7.242688410820802e-15, -3.647863617886618e-14, -1.185796517671469e-03, -3.020624681000426e-25, -3.261434671607595e-20, -3.261434671607595e-20, -1.385220551818122e-04, -1.384734787837302e-04, -1.385196352132267e-04, -1.384767538010036e-04, -1.384975273236658e-04, -1.384975273236658e-04, -8.480764240191528e-04, -8.372755900766104e-04, -8.560937091257055e-04, -8.464029577399645e-04, -8.382848339349500e-04, -8.382848339349500e-04, -5.749234212606661e-03, -5.137654298846377e-03, -6.366142987182276e-03, -6.053000595908208e-03, -5.627366003165543e-03, -5.627366003165543e-03, -1.341238665590022e-02, -1.643328125047081e-02, -1.235398440405008e-02, -8.775709602416827e-04, -1.519041362230317e-02, -1.519041362230317e-02, -1.412524397075172e-32, -8.196892856272350e-26, -1.303797701229573e-33, -6.221676652989424e-03, -5.604993370740204e-28, -5.604993370740204e-28, -5.712136170189055e-03, -5.756214833912168e-03, -5.740648772271159e-03, -5.727872859603715e-03, -5.734262669329570e-03, -5.734262669329570e-03, -5.924790787794820e-03, -7.200016389434051e-03, -6.798714212706908e-03, -6.431022929057163e-03, -6.615208845240044e-03, -6.615208845240044e-03, -4.810588815105184e-03, -1.504921468154220e-02, -1.342623072225097e-02, -1.059011394522772e-02, -1.203593832574803e-02, -1.203593832574803e-02, -7.953001826186801e-03, -9.618774855067925e-04, -3.373863838299715e-03, -1.096962145424036e-02, -1.000246584299345e-02, -1.000246584299345e-02, -8.678053606471500e-11, -9.837342727091008e-96, -1.116494823314390e-45, -9.002244202240904e-03, -3.380810825226577e-30, -3.380810825226388e-30])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
