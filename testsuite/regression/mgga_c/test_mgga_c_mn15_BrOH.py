
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.803336275006417e-01, -2.803411778572055e-01, -2.803742707937517e-01, -2.802514237116258e-01, -2.803376044167981e-01, -2.803376044167981e-01, -1.507528898788699e-01, -1.507207547628003e-01, -1.497622440082682e-01, -1.501349511350890e-01, -1.507441525483449e-01, 5.522201146883456e-02, -1.959415572990177e-01, 8.019761262648295e-02, 8.803364356312110e-02, 8.462884415334723e-02, 7.997120066049382e-02, 7.997120066049382e-02, 3.566402481306551e-02, 3.418168774017154e-02, -2.829169013128683e-01, 3.469386450474069e-02, 3.525796578655786e-02, 3.525796578655786e-02, -1.485321301661525e-03, -1.525390039961101e-03, 2.150320729513767e-04, -8.851440002490170e-04, -1.512308971369209e-03, -1.512308971369237e-03, -1.482276928466807e-01, -1.487447841530254e-01, -1.482850728228263e-01, -2.992361658276232e-01, -1.484875364068502e-01, -1.484875364068502e-01, -1.599743320050351e-01, -1.537127781941963e-01, -1.628488428470537e-01, -1.577260489334902e-01, -1.521312512265245e-01, 6.213764832200611e-02, -2.503141457402611e-02, -7.909542292016847e-02, -5.343366748382460e-03, -3.768091944826834e-02, -4.113067300532385e-02, -7.522490204676216e-02, -2.279955277378445e-01, 4.892273246231494e-02, -2.231165606743659e-01, -4.923899768558949e-02, 2.936772026684594e-02, 2.936772026684594e-02, -3.335618853498989e-02, -9.571156930663817e-04, -7.449019089851006e-04, -2.034855942930992e-01, -3.453365075866822e-02, -8.852550331757797e-04, -3.271365511697706e-01, -2.013277478673634e-01, -3.073115915644667e-01, -2.667422394648418e-01, -2.489711629691441e-01, -2.489711629691441e-01, -2.655694188552971e-01, -1.972556579032126e-02, -4.907581081041251e-02, -8.846989836576298e-02, -6.634407448744807e-02, -9.299145117768090e-02, -6.173125449114035e-02, -1.585769297719914e-01, 3.909416951678079e-02, -8.574852881729232e-02, 2.450081677106102e-02, 2.450081677106108e-02, -7.444396354464641e-02, -5.622939167855457e-04, 2.494559517224984e-03, -7.987348141676660e-04, -2.097311056353516e-01, 1.405721909448700e-02, -1.714121615473138e-03, -3.086730795546008e-04, -5.478019196122472e-04, 1.356832792686313e-02, -7.712858402059667e-04, -7.712858402060147e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.563299504952039e-01, -7.563501918386900e-01, -7.564388947793622e-01, -7.561095154134142e-01, -7.563406121288223e-01, -7.563406121288223e-01, 6.922845649764686e-02, 6.915026388423477e-02, 6.677723686077247e-02, 6.770273541207901e-02, 6.920685231379939e-02, -2.575522363106781e-01, 5.503530088036108e-02, -7.631924395614181e-02, -4.241548777636917e-02, -5.790950012621847e-02, -7.713237134124029e-02, -7.713237134124029e-02, -6.678817295948258e-02, -7.240462355420849e-02, 2.047644410792071e-03, 5.234813084833413e-02, -6.842644224035797e-02, -6.842644224035797e-02, -1.604421849654885e-03, -1.616402944303188e-03, 7.363236047928523e-03, -1.117153639840453e-03, -1.602475506021698e-03, -1.602475506021894e-03, -3.227320890149427e-01, -3.225975997193399e-01, -3.227156656667748e-01, -7.594316909198175e-01, -3.226605005457531e-01, -3.226605005457531e-01, 1.033553023475335e-01, 9.762647373036913e-02, 1.055215513313695e-01, 1.014636352101504e-01, 9.594555164022732e-02, -2.048554817585171e-01, -1.832096484871835e-01, -2.567156401341961e-01, -1.635720799354467e-01, -1.965164597951529e-01, -2.038258746944275e-01, -1.574224705388619e-01, -1.722468632339637e-01, 1.040488885705675e-02, -1.645191180690934e-01, -2.898744047940590e-01, 4.797285241077304e-02, 4.797285241077304e-02, -4.286842919220660e-02, -1.197500397204946e-03, -9.334348062506040e-04, -2.059305075666908e-01, -4.434756336426234e-02, -1.111623081107331e-03, -7.581601972805185e-01, -5.278860379091378e-01, -6.528595128214992e-01, -6.664650761103679e-01, -6.329689395262572e-01, -6.329689395262572e-01, -6.613483901072625e-01, -1.676816484447606e-01, -2.058862356278712e-01, -2.663745353415364e-01, -2.316394985994466e-01, -2.534679012395987e-01, -2.352350916153884e-01, 6.834138799524135e-03, -9.333996993002365e-02, 5.124878492663576e-02, -1.185061795532887e-01, -1.185061795532887e-01, 2.090301503898616e-02, 5.145782242069685e-03, 1.366774284638240e-02, -1.275082497740013e-01, -1.704791771375927e-01, 3.549834998300157e-02, -1.893057588961005e-03, -4.022378956327652e-04, -7.030152314266777e-04, 3.416488900067039e-02, -9.743957309412704e-04, -9.743957309414357e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.044907895585108e-08, 1.044933456955798e-08, 1.045036754997030e-08, 1.044622255725279e-08, 1.044921418235038e-08, 1.044921418235038e-08, 2.695376447860501e-05, 2.694583187559640e-05, 2.670391657209634e-05, 2.678890422632136e-05, 2.695104954356476e-05, 9.118718460730425e-07, 4.148280937487598e-02, 1.919983297875377e-03, 1.812926552893609e-03, 1.904437296161809e-03, 1.922354905801456e-03, 1.922354905801456e-03, 8.917408205639168e-01, 8.844004846046947e-01, 2.486087182424605e-02, 4.625712676070134e-01, 8.890437164194430e-01, 8.890437164194430e-01, 2.931254580589877e-01, 3.106971086790657e-01, 4.357236542567940e-01, 1.955933349071134e-02, 3.271624243859463e-01, 3.271624243835443e-01, 6.577148182581377e-07, 6.708845763169616e-07, 6.591590186158718e-07, 5.461803712226019e-06, 6.642769931913962e-07, 6.642769931913962e-07, 3.465371484344805e-04, 3.224663850716477e-04, 3.572391968361850e-04, 3.376373186832712e-04, 3.169932167077281e-04, 1.454605372252362e-05, 5.367101616004778e-03, 5.704434960590473e-03, 7.396209165231097e-03, 5.543459305727319e-03, 4.456063799514119e-03, 1.409676019398459e-02, 1.708849455002654e+02, 3.807975433587404e-01, 1.785039669661474e+02, 1.802113664199310e-05, 7.892565569935479e-01, 7.892565569935479e-01, 3.648480756233734e+07, 3.246615321963534e-02, 1.581638793001902e-01, 1.253612828724340e+03, 3.102976401853098e+07, 3.820804650728601e-02, 1.472917888572439e-01, 6.782975606550792e-02, 1.168816622289300e-01, 1.097200796679561e-01, 9.843206651867281e-02, 9.843206651867281e-02, 1.253205315619567e-01, 1.073055963394020e-02, 8.790734952546699e-03, 1.442575869042272e-02, 9.945432990323293e-03, 2.321381486803529e-02, 3.365663893500826e-03, 3.367002093437512e+00, 1.590902690468412e-01, 3.253070406578837e-01, 1.098352489040716e-01, 1.098352489040717e-01, 8.613447854899317e-02, 3.611250724992032e-01, 4.188095563693903e-01, 8.422344411556673e-02, 4.018382006928359e+02, 8.760548505371436e-01, 9.068303864630484e-02, 4.212023334875191e-03, 3.529926812988866e-02, 1.092655010132993e+00, 4.882282862984847e-02, 4.882282865813785e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.689585389910651e-04, 2.689716609665064e-04, 2.690280080260880e-04, 2.688146669938405e-04, 2.689654584788491e-04, 2.689654584788491e-04, -1.753475278862918e-03, -1.753020714382169e-03, -1.738998809788900e-03, -1.744240822373215e-03, -1.753334613096128e-03, 1.451581049322718e-03, -2.566673326439859e-02, 1.645904893464033e-03, -8.731437253030781e-05, 6.557360350349209e-04, 1.691915768491716e-03, 1.691915768491716e-03, -1.749174064931378e-02, -1.497219734017654e-02, -1.382213842185533e-02, -3.310462191144432e-02, -1.676658446055087e-02, -1.676658446055087e-02, -3.372423127893010e-04, -3.810570984294635e-04, -5.957059268543989e-03, -1.493534307475756e-05, -3.870154077154703e-04, -3.870154077154834e-04, 1.227868294168861e-04, 8.493254586786379e-05, 1.186253298107309e-04, 6.329046947375731e-03, 1.038609904443084e-04, 1.038609904443084e-04, -5.352392971232294e-03, -5.245815246258913e-03, -5.389032076070737e-03, -5.316140846397271e-03, -5.217708953566149e-03, 2.699038564984765e-03, 4.025564983628647e-02, 7.753901451460933e-02, 2.758522752789614e-02, 5.241627373693478e-02, 5.150272550528801e-02, 3.465206181679622e-02, -5.894292182838518e-02, -2.935410925836656e-02, -6.519751935487139e-02, 8.230840538389518e-03, -3.721335421918764e-02, -3.721335421918764e-02, -5.192844195342446e-05, -2.490260335597370e-05, -4.288685073172107e-05, -2.438382092838597e-02, -5.945515588311819e-05, -2.352483917877955e-05, 1.020228480672427e+00, 3.534608472760125e-01, 8.557889537108594e-01, 6.718677994069248e-01, 5.777034136425627e-01, 5.777034136425627e-01, 7.164662355906772e-01, 4.332529319577314e-02, 7.465932287693573e-02, 1.136522665473483e-01, 9.282109176133024e-02, 1.225264494557581e-01, 5.886098197019839e-02, -1.112112567415133e-01, 1.125276810820689e-03, -9.111871061243434e-02, 1.251253017686726e-02, 1.251253017686725e-02, -4.951866908058262e-02, -4.598177971744088e-03, -8.632458628666179e-03, 3.461384984449242e-02, -6.293963423539004e-02, -2.518836584974527e-02, -2.055627898793301e-04, -6.540805026064412e-07, -8.284384238629291e-06, -2.679684898894487e-02, -2.075723049108773e-05, -2.075723049095158e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
