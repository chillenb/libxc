
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn15_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.348587612067881e-01, -1.348621907508326e-01, -1.348759189644320e-01, -1.348200348053504e-01, -1.348605797280309e-01, -1.348605797280309e-01, 1.027533460660613e-02, 1.025192091369619e-02, 9.571472658724507e-03, 1.018958170925111e-02, 1.026667239619949e-02, 1.026667239619949e-02, 1.603511924314544e-03, 2.395540993232019e-03, 2.421947079483210e-02, 2.524331704315038e-02, 1.891472082998711e-03, 1.891472082998711e-03, 2.918536042733813e-02, 2.670569487385203e-02, -5.381088205467330e-02, 2.565001784905204e-02, 2.839979087584800e-02, 2.839979087584800e-02, -1.485373130737886e-03, -1.525470646625616e-03, 1.376062686933881e-04, -8.851608000603319e-04, -1.512378414782573e-03, -1.512378414782600e-03, -1.486303813222908e-01, -1.491509899387165e-01, -1.486830442084276e-01, -1.490877707282561e-01, -1.488989107935113e-01, -1.488989107935113e-01, 6.113604223316538e-02, 5.717046419384886e-02, 6.415186971808097e-02, 6.102277590256212e-02, 5.449795222869876e-02, 5.449795222869876e-02, -3.720421351863283e-02, -9.863796962076146e-02, -2.806808807933666e-02, -5.859449589333775e-02, -5.005411411867764e-02, -5.005411411867764e-02, 1.683985473356650e-02, 4.556551682970946e-02, 1.742384637875655e-02, -8.711501263556545e-02, 2.664769828596301e-02, 2.664769828596301e-02, -8.563515373051060e-04, -9.571388422905897e-04, -7.449106562339344e-04, 3.198839830977314e-03, -8.852822187836880e-04, -8.852822187836881e-04, -3.627745703591622e-01, -2.168960682940322e-01, -2.541768548238626e-01, -2.927864961905866e-01, -2.721790995200104e-01, -2.721790995200104e-01, -3.195771544516395e-01, -2.121870876146096e-02, -5.092418387914271e-02, -9.261751829170878e-02, -6.893312748721969e-02, -6.893312748721969e-02, -8.153917310952132e-02, 4.533940711347898e-02, 3.094027024330737e-02, -5.446713685629525e-03, 1.259016660084675e-02, 1.259016660084683e-02, -9.002115507574801e-03, -5.908967103191312e-04, 2.290038966205131e-03, -1.908843514738616e-02, 1.297560991867245e-02, 1.297560991867260e-02, -1.715131085679730e-03, -3.086732139920923e-04, -5.478025315448614e-04, 1.240283045742687e-02, -7.713051587854113e-04, -7.713051587854594e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn15_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.882804212544019e-01, -3.882714763548417e-01, -3.882281699262687e-01, -3.883734388556458e-01, -3.882757484940481e-01, -3.882757484940481e-01, -2.376589990268636e-01, -2.376818459876641e-01, -2.383984034499483e-01, -2.384342708839076e-01, -2.376636328349254e-01, -2.376636328349254e-01, -1.622950901839715e-01, -1.622412541329932e-01, -1.493972506636236e-01, -1.498471532111849e-01, -1.622757754939720e-01, -1.622757754939720e-01, -7.933877265136099e-02, -8.561729938367153e-02, -2.029653080965864e-01, 1.198587474610320e-02, -8.136713573950580e-02, -8.136713573950580e-02, -1.604757483932080e-03, -1.616924527683407e-03, 6.887697607767924e-03, -1.117263449243189e-03, -1.602924895063631e-03, -1.602924895063780e-03, -3.242307763356869e-01, -3.241071498428472e-01, -3.241965728771688e-01, -3.241013578328653e-01, -3.241903926787784e-01, -3.241903926787784e-01, -2.005393349746021e-01, -2.058680217634441e-01, -1.975559719698372e-01, -2.019336439299390e-01, -2.076576379732500e-01, -2.076576379732500e-01, -1.665658731365628e-01, -2.919563441622953e-01, -1.302900038647447e-01, -1.714633423267876e-01, -1.980379107882013e-01, -1.980379107882013e-01, 3.428813954223151e-02, -1.329907258721350e-03, 3.366023853955000e-02, -2.752999952379815e-01, 3.495709471840792e-02, 3.495709471840792e-02, -1.078364255740520e-03, -1.197651567936119e-03, -9.334920449606409e-04, 1.333761462701711e-02, -1.111800738532112e-03, -1.111800738532113e-03, -7.627668560107744e-01, -5.478122601765377e-01, -6.199698441226884e-01, -6.818006832807781e-01, -6.504055408488296e-01, -6.504055408488296e-01, -6.872366971317225e-01, -1.658615422645014e-01, -2.061361744690330e-01, -2.767491249946662e-01, -2.355453007933233e-01, -2.355453007933233e-01, -2.467085164774374e-01, -5.466612925971558e-02, -1.046678922443364e-01, -1.178102079471614e-01, -1.219625975127938e-01, -1.219625975127939e-01, -1.355659431427285e-01, 4.968532520590957e-03, 1.243781627154756e-02, -1.031712570000758e-01, 2.957954321976036e-02, 2.957954321976059e-02, -1.899586010856970e-03, -4.022387813939862e-04, -7.030192477282434e-04, 2.779343973211110e-02, -9.745221389181523e-04, -9.745221389183202e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.468025537335939e-10, 2.468148877347219e-10, 2.468569988103055e-10, 2.466562349880200e-10, 2.468091549988365e-10, 2.468091549988365e-10, 2.504301838984861e-06, 2.503996280436673e-06, 2.493210458546357e-06, 2.480498986098417e-06, 2.504261914552968e-06, 2.504261914552968e-06, 8.192078532983874e-03, 8.158462961372787e-03, 7.030155174888697e-03, 6.658688213815829e-03, 8.179803729244301e-03, 8.179803729244301e-03, 1.101651171000318e+00, 1.117389048545432e+00, 6.027615752078921e-03, 1.199897906676464e+00, 1.108685939226779e+00, 1.108685939226779e+00, 3.114090443593119e-01, 3.354168640397099e-01, 6.608776257003225e-01, 5.852392339640806e-02, 3.495985056298681e-01, 3.495985056298681e-01, 6.617586068437947e-07, 6.749848443730336e-07, 6.631576085833686e-07, 6.734354071851405e-07, 6.684188788749268e-07, 6.684188788749268e-07, 1.806638948745858e-05, 1.725415998879028e-05, 1.783053503019289e-05, 1.720389060340986e-05, 1.778927380404513e-05, 1.778927380404513e-05, 8.197724752647637e-03, 1.002826762649029e-02, 1.375309841124537e-02, 1.164301619399089e-02, 6.311702526679897e-03, 6.311702526679897e-03, 8.385440003173834e-01, 4.580953154785872e-01, 1.025481374274583e+00, 6.577822946453024e-05, 1.199493519110714e+00, 1.199493519110714e+00, 6.030767786410998e-02, 7.511028998653325e-02, 2.273398271540722e-01, 1.036099494398495e+00, 1.160300875917627e-01, 1.160300875708545e-01, 1.607980388926943e-01, 7.313270260961285e-02, 9.581986189632248e-02, 1.191866954923784e-01, 1.067421442617600e-01, 1.067421442617600e-01, 1.485101823472228e-01, 1.133671368831325e-02, 9.498476866821292e-03, 1.600157202876261e-02, 1.092735937253779e-02, 1.092735937253780e-02, 6.743728552937494e-03, 2.743918726946003e-01, 1.995345619613761e-01, 1.030701521089300e-01, 1.474605395299791e-01, 1.474605395299792e-01, 2.578709921172269e-02, 4.591750988097949e-01, 6.972891966484815e-01, 1.353251146809193e-01, 1.422745885807698e+00, 1.422745885807706e+00, 2.576316526618858e-01, 1.887607549443769e-02, 4.587404156584575e-02, 1.840507722564548e+00, 1.569702970786748e-01, 1.569702971247220e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn15_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.888153764298558e-05, 8.887416141659126e-05, 8.883999029745973e-05, 8.895992930217387e-05, 8.887766898572574e-05, 8.887766898572574e-05, 7.519694786532651e-04, 7.524330143044144e-04, 7.668261648907818e-04, 7.666679168955431e-04, 7.520580427612103e-04, 7.520580427612103e-04, -6.052795014760850e-03, -6.007096369226549e-03, -5.029713716433889e-03, -4.497204946059838e-03, -6.035696817757905e-03, -6.035696817757905e-03, -2.364679176976750e-02, -2.257928832514044e-02, -6.629094633959531e-03, -3.503922798808661e-02, -2.340830688787667e-02, -2.340830688787667e-02, -3.372427454826432e-04, -3.810578311385903e-04, -5.961094682923131e-03, -1.493535450684796e-05, -3.870160542496436e-04, -3.870160542496567e-04, 1.393743197945539e-04, 1.017816412864375e-04, 1.350312423191993e-04, 1.058318204519443e-04, 1.208656451384189e-04, 1.208656451384189e-04, 2.251053903919251e-03, 2.428582541645067e-03, 2.216534080454257e-03, 2.357668437423641e-03, 2.416769205238157e-03, 2.416769205238157e-03, 3.034412397864975e-02, 1.041022225430852e-01, 9.332384856581522e-03, 3.904614588170850e-02, 4.709242178607412e-02, 4.709242178607412e-02, -2.374692198035968e-02, -3.050338627712070e-02, -2.626737421823609e-02, 6.584088688724278e-03, -3.788346093676845e-02, -3.788346093676845e-02, -2.054652498230805e-05, -2.490262752156842e-05, -4.288687089328715e-05, -9.789720904397540e-03, -2.352486820816261e-05, -2.352486820802391e-05, 1.207847131393758e+00, 4.248922640932905e-01, 5.995538875817389e-01, 8.023408675847086e-01, 6.917737588929285e-01, 6.917737588929285e-01, 1.004351283918510e+00, 4.169206031549615e-02, 7.433810987782717e-02, 1.245615250940330e-01, 9.570725749321773e-02, 9.570725749321775e-02, 6.545716788906814e-02, -1.482461069642091e-02, -4.263684726663429e-03, -1.389763139778657e-03, 1.130694734656507e-03, 1.130694734656536e-03, 1.613553893325526e-02, -4.599381555143408e-03, -8.646014969894724e-03, 1.622207748116621e-03, -2.537082451166970e-02, -2.537082451166983e-02, -2.055673113742072e-04, -6.540805142396120e-07, -8.284384614238843e-06, -2.701171484323063e-02, -2.075725143583187e-05, -2.075725143569571e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
