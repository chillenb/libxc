
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731384740367701e-02, -2.731386368364264e-02, -2.731348102297532e-02, -2.731322429873519e-02, -2.731342392080283e-02, -2.731342392080283e-02, -4.827268928273158e-02, -4.826888917370443e-02, -4.814673006621743e-02, -4.799256629009792e-02, -4.809445946808744e-02, -4.809445946808744e-02, -4.140832747003402e-02, -4.125295141781298e-02, -3.753417006796979e-02, -3.747601834844749e-02, -3.761587933650752e-02, -3.761587933650752e-02, -1.550963494833042e-02, -1.608693236130409e-02, -4.879085908919344e-02, -1.513733962550147e-02, -1.696142047319377e-02, -1.696142047319377e-02, -6.335178349395732e-04, -6.923667906797052e-04, -4.442707351336742e-03, -3.249476903979092e-04, -4.477879272278903e-04, -4.477879272278903e-04, -2.644926240749902e-02, -2.645704526361670e-02, -2.644846092633883e-02, -2.645537920712231e-02, -2.645380571717291e-02, -2.645380571717291e-02, -2.540011903735599e-02, -2.499577424546951e-02, -2.480816430175820e-02, -2.445174276923906e-02, -2.545429845158901e-02, -2.545429845158901e-02, -2.909563798064644e-02, -3.298536033793647e-02, -3.546224393576779e-02, -4.400098014136012e-02, -2.884674553477914e-02, -2.884674553477914e-02, -1.074753523541032e-02, -1.507233205465086e-02, -1.015450774761616e-02, -5.554888033006863e-02, -1.252038719391027e-02, -1.252038719391028e-02, -2.404025473027335e-04, -3.225703513553270e-04, -2.857891260120530e-04, -7.331541081368805e-03, -3.317163864894341e-04, -3.317163864894341e-04, -2.490819161710264e-02, -2.451362604398812e-02, -2.464915885627370e-02, -2.476405481691564e-02, -2.470678714396463e-02, -2.470678714396463e-02, -2.597094531712028e-02, -2.175296368741557e-02, -2.288118089417700e-02, -2.406592358265765e-02, -2.352568012459867e-02, -2.352568012459867e-02, -3.636891494532211e-02, -1.584159662590709e-02, -1.919029572894321e-02, -2.770262009235180e-02, -2.224712819124293e-02, -2.224712819124293e-02, -2.493206042021189e-02, -4.150048843679241e-03, -5.729844955265292e-03, -2.715811316992908e-02, -9.321804355251092e-03, -9.321804355251099e-03, -9.749687450309942e-04, -6.672442337866609e-05, -1.671326905440535e-04, -8.569153736337256e-03, -3.085143898362715e-04, -3.085143898362750e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.171364529809900e-02, -4.171340682307170e-02, -4.171206715229694e-02, -4.171558382780794e-02, -4.171378153381371e-02, -4.171378153381371e-02, -6.900864532070722e-02, -6.899473429222305e-02, -6.861308857271138e-02, -6.860908038788004e-02, -6.867517770298746e-02, -6.867517770298746e-02, -7.443334675969866e-02, -7.414268308587650e-02, -6.795759407286554e-02, -7.041705683986525e-02, -6.991346379795174e-02, -6.991346379795174e-02, -4.789637356933890e-02, -4.870768326290070e-02, -8.774071523815390e-02, -3.161102551431315e-02, -3.577923781643919e-02, -3.577923781643916e-02, -4.459303691687588e-03, -2.351069520656353e-03, -8.674924233725441e-03, -6.355167015659138e-04, -8.915879865067750e-04, -8.915879865067741e-04, -3.787772857781986e-02, -3.783169225441643e-02, -3.787458507289454e-02, -3.783400231459478e-02, -3.785493424971211e-02, -3.785493424971211e-02, -5.521809034214051e-02, -5.346399532944359e-02, -5.448131972807190e-02, -5.279839989634005e-02, -5.455760014880265e-02, -5.455760014880265e-02, -4.081985528117860e-02, -2.708021263538638e-02, -4.611687863443435e-02, -3.046207576683280e-02, -3.928793943250773e-02, -3.928793943250773e-02, -2.196205984104960e-02, -5.716799888323293e-02, -2.034886736362483e-02, -3.044677730875583e-02, -2.427489070422746e-02, -2.427489070422728e-02, -4.667187404784084e-04, -6.250840325667688e-04, -5.601298667201239e-04, -1.426504437181643e-02, -6.442089418774829e-04, -6.442089418774830e-04, -2.621302616006932e-02, -2.873355567363630e-02, -2.791073179686018e-02, -2.717876388305773e-02, -2.755058097248230e-02, -2.755058097248230e-02, -2.470032635415173e-02, -3.901052921827328e-02, -3.666496300171180e-02, -3.326772451861390e-02, -3.518321335890844e-02, -3.518321335890844e-02, -2.704755458825919e-02, -4.984522261764469e-02, -5.214301926931850e-02, -4.879902928027056e-02, -5.033896847772827e-02, -5.033896847772826e-02, -4.571079510356924e-02, -9.299457466002753e-03, -1.114044163945745e-02, -4.271498057823647e-02, -1.955317884784874e-02, -1.955317884784875e-02, -1.861020982914261e-03, -1.310492668086869e-04, -3.394434600381947e-04, -2.125723835038263e-02, -6.014490012692951e-04, -6.014490012692982e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.498401883448491e-11, 8.498389555296054e-11, 8.497737313762671e-11, 8.497911416709296e-11, 8.497905445958523e-11, 8.497905445958523e-11, 1.379429273532080e-06, 1.379736908472804e-06, 1.387012711850498e-06, 1.377404804404176e-06, 1.381684910574019e-06, 1.381684910574019e-06, 1.354712204598546e-03, 1.349160896212927e-03, 1.190610052324875e-03, 1.005969058417117e-03, 1.069204691207111e-03, 1.069204691207111e-03, 5.584190740280836e-01, 5.677755423902938e-01, 8.547287815323808e-04, 3.544202310197249e-01, 3.137689688357811e-01, 3.137689688357780e-01, 1.344557120286557e+03, 4.185710985825166e+02, 2.605491975757131e+00, 1.737482556027757e+02, 1.572621978237799e+02, 1.572621978237790e+02, 1.032060246687676e-07, 1.034798024506766e-07, 1.032049535738316e-07, 1.034471069483296e-07, 1.033516199666052e-07, 1.033516199666052e-07, 8.378772153977773e-06, 7.717247289684441e-06, 7.941116846135426e-06, 7.335956419979090e-06, 8.213896260054058e-06, 8.213896260054058e-06, 6.258443404913518e-03, 6.694376407120634e-03, 1.034368264109964e-02, 1.484443184796891e-02, 5.867854762613025e-03, 5.867854762613025e-03, 5.065024643509414e-01, 4.685423712383820e-01, 5.563375381248039e-01, 6.236414169419060e-05, 3.215535723964078e-01, 3.215535723963930e-01, 2.953983038257868e+02, 1.865898319187656e+02, 9.782076750924841e+02, 1.185205749982602e+00, 4.222353835455917e+02, 4.222353835455913e+02, 5.737623390352408e-03, 5.249048950820319e-03, 5.410388837007966e-03, 5.551978478718097e-03, 5.480520808370306e-03, 5.480520808370306e-03, 7.483918917919293e-03, 6.256364813873099e-03, 6.295655328246259e-03, 6.574282288439667e-03, 6.466755729720988e-03, 6.466755729720990e-03, 6.028145886635479e-03, 1.644318963737581e-01, 1.054457025167465e-01, 5.556257417822617e-02, 7.533801339373856e-02, 7.533801339373858e-02, 1.441323928767429e-02, 4.813465993753750e+00, 1.485650444256050e+00, 7.674575694456492e-02, 1.252015578595732e+00, 1.252015578595732e+00, 3.167444395312436e+01, 4.385155017881460e+03, 1.098678180848747e+03, 2.362740588483946e+00, 5.684241049040069e+02, 5.684241049040094e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.128695423905511e-05, -1.128705229463808e-05, -1.128686229094772e-05, -1.128539714874172e-05, -1.128625407804971e-05, -1.128625407804971e-05, -4.977718082160560e-04, -4.979951587974175e-04, -5.039194958907117e-04, -5.022920690369751e-04, -5.022153213085926e-04, -5.022153213085926e-04, -6.803775113936223e-04, -6.986763932894263e-04, -9.568348386088529e-04, -3.029823125993920e-04, -4.981604013065037e-04, -4.981604013065037e-04, -4.048584886273907e-02, -4.291545104871382e-02, -3.878327633948160e-04, -6.924607120755044e-03, -8.681864926890801e-03, -8.681864926891028e-03, -4.427417061737414e-03, -1.433773014721559e-03, -4.792011644294793e-04, -8.883819849187680e-06, -4.068170824006950e-05, -4.068170824006817e-05, -2.059712758739641e-04, -2.066934775076677e-04, -2.059876945261176e-04, -2.066257661478855e-04, -2.063454000904227e-04, -2.063454000904227e-04, -8.267434731128269e-04, -7.799332190452022e-04, -7.741504432281454e-04, -7.300856891055834e-04, -8.260365704127077e-04, -8.260365704127077e-04, -1.551073371397995e-02, -1.970366605643642e-02, -1.787879509200162e-02, -2.397713150936567e-02, -1.529795890940275e-02, -1.529795890940275e-02, -2.736158530404690e-03, -3.479762940213686e-02, -2.068317320838823e-03, -3.428148775957602e-03, -1.408071053638215e-03, -1.408071053638330e-03, -3.747140835344005e-07, -1.639002963915519e-06, -1.701810037768435e-05, -9.364831839080206e-04, -3.964473850740261e-06, -3.964473850740290e-06, -1.603312627792067e-02, -1.436687498478778e-02, -1.491981399161388e-02, -1.540355310506636e-02, -1.515919230480179e-02, -1.515919230480179e-02, -1.861573028890430e-02, -9.931700256181413e-03, -1.148182816965880e-02, -1.362492579392094e-02, -1.256016489444166e-02, -1.256016489444166e-02, -1.932549917535871e-02, -2.415561783746079e-02, -2.617214762984548e-02, -2.815198364327155e-02, -2.738323147287267e-02, -2.738323147287265e-02, -1.732425213563683e-02, -1.719988908927819e-03, -5.926933757716194e-04, -3.543653817578492e-02, -3.811958583112926e-03, -3.811958583112928e-03, -4.390897532772342e-06, -2.739231717933233e-08, -2.834340630266551e-05, -8.422531194074880e-03, -8.217188867546790e-06, -8.217188867546969e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
