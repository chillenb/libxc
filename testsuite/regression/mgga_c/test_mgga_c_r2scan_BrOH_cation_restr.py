
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.298816375263882e-02, -9.298568721419950e-02, -9.297570311104295e-02, -9.301236146594666e-02, -9.299300910762222e-02, -9.299300910762222e-02, -1.246263199060775e-01, -1.246236313152654e-01, -1.245501011197378e-01, -1.245835690144320e-01, -1.245765931336972e-01, -2.344382324508712e-02, -8.151081688967630e-02, -1.903848934337702e-02, -1.848623083923402e-02, -1.873511186006935e-02, -1.867872079644435e-02, -1.867872079644435e-02, -1.394704026957986e-02, -1.414608825422232e-02, -9.350674579371476e-02, -1.053113682889921e-02, -1.197087882545875e-02, -1.197087882545875e-02, -3.752969608554651e-04, -4.043342295309827e-04, -3.006770894735078e-03, -1.690554397653773e-04, -2.423674805307684e-04, -2.423674805307684e-04, -2.638748628300914e-02, -2.639582654344771e-02, -2.638796582272888e-02, -5.515011405435179e-02, -2.639166675215895e-02, -2.639166675215895e-02, -1.064125319947992e-01, -1.066393028356633e-01, -1.063031527266575e-01, -1.064444918412377e-01, -1.066167229772850e-01, -2.245106115096360e-02, -2.194107103768985e-02, -2.307883720109014e-02, -2.103684193380526e-02, -2.186504758504401e-02, -2.216299935947394e-02, -5.717835537260256e-02, -3.485127931031878e-02, -1.259698489983484e-02, -3.326776006969985e-02, -2.439951112505812e-02, -9.243807626673815e-03, -9.243807626673813e-03, -2.393092053162897e-03, -1.612449521114007e-04, -1.433344975083365e-04, -2.589845160387997e-02, -2.738488192827941e-03, -1.655366233430445e-04, -2.382863708468445e-02, -2.356680477191464e-02, -2.837873736475650e-02, -2.373437886717115e-02, -2.369617165436425e-02, -2.369617165436425e-02, -2.371386260334273e-02, -2.106617976452838e-02, -2.187346278504973e-02, -2.264947272640658e-02, -2.225670021742472e-02, -4.614807106784603e-02, -2.296077862260221e-02, -5.321972045930101e-02, -1.625478537067641e-02, -5.703462481488839e-02, -1.772508998369475e-02, -1.772508998369475e-02, -6.328523590075506e-02, -2.872884982296587e-03, -3.922013656692809e-03, -1.945525937830211e-02, -3.018011994892934e-02, -6.580397726471758e-03, -5.420728841374397e-04, -2.472863204531403e-05, -8.288757437547228e-05, -6.270602045790453e-03, -1.550602435844315e-04, -1.550602435844379e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.749313070473327e-02, 3.749131506139326e-02, 3.748400286739284e-02, 3.751087133628729e-02, 3.749668985494031e-02, 3.749668985494031e-02, -1.181195626032949e-01, -1.180611206687779e-01, -1.164972459168370e-01, -1.171372303129283e-01, -1.170660795231001e-01, -4.625316914444354e-02, -6.624314911185129e-02, -4.553622979958521e-02, -4.610134521060001e-02, -4.582398974142717e-02, -4.588871911961071e-02, -4.588871911961071e-02, -3.758120176190022e-02, -3.745784650808285e-02, -8.926688246923120e-02, -4.061188213588068e-02, -3.887528355241444e-02, -3.887528355241440e-02, -8.785571066883463e-02, -9.113003253874814e-02, -8.526239247036757e-02, -5.250770464993612e-02, -6.762414275534942e-02, -6.762414275534942e-02, -3.785309399231310e-02, -3.780772811615567e-02, -3.785048464399796e-02, 2.842351351358287e-04, -3.783038390629799e-02, -3.783038390629799e-02, -1.156054996893979e-01, -1.179578963748332e-01, -1.119746112790852e-01, -1.160173540485926e-01, -1.178853881450329e-01, -4.623866990407990e-02, -3.758379541371457e-02, -3.410766406158578e-02, -3.937945842812061e-02, -3.727758874638186e-02, -3.700831305783003e-02, -9.543893751035348e-03, -4.125751458239686e-02, -4.029323500226473e-02, -3.958020844736300e-02, -4.101762091229497e-02, -4.087125889085216e-02, -4.087125889085216e-02, -3.092106456939255e-03, -5.066003172284159e-02, -4.626501333586160e-02, -3.142048694472796e-02, -3.531175961823871e-03, -5.167178790177515e-02, -2.750262980613130e-02, -2.942903666018127e-02, -2.190096133609304e-02, -2.823549254980014e-02, -2.851962396738813e-02, -2.851962396738813e-02, -2.769948209224426e-02, -3.791964994705532e-02, -3.579725576996570e-02, -3.310275984872619e-02, -3.456251217223631e-02, -6.687581559930517e-03, -3.547825567247756e-02, -5.407095439556281e-02, -3.990397785371020e-02, -6.376498204437288e-02, -3.913377948101476e-02, -3.913377948101476e-02, -6.029536820466266e-02, -8.762941686062245e-02, -7.203078993486797e-02, -3.657707499982492e-02, -3.610903527058664e-02, -4.693536146759186e-02, -1.073234190896696e-01, -1.049204353715538e-02, -3.019364348863117e-02, -4.771248763205964e-02, -4.919274402453731e-02, -4.919274402454791e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.377411809883663e-09, 4.377211023385511e-09, 4.376363762067754e-09, 4.379340287810426e-09, 4.377774205785472e-09, 4.377774205785472e-09, 1.329521531833075e-05, 1.329541013233280e-05, 1.329953948914329e-05, 1.329309628045025e-05, 1.329928659033399e-05, 3.377133487258187e-07, 1.015815882964615e-02, 6.756202633766002e-04, 6.966156850595853e-04, 7.009751537761641e-04, 6.995139889883573e-04, 6.995139889883573e-04, 3.316388667760780e-01, 3.189805974408022e-01, 6.001698057345268e-03, 7.140270556409095e-01, 5.175090158335982e-01, 5.175090158335971e-01, 3.408072300792545e+04, 3.094164956464828e+04, 1.148529109391060e+02, 9.068691573515622e+04, 6.942226860772439e+04, 6.942226860772439e+04, 1.023440073231548e-07, 1.026230720981416e-07, 1.023607437695336e-07, 1.045929454526308e-06, 1.024832372321543e-07, 1.024832372321543e-07, 1.283891911421141e-04, 1.244354140207154e-04, 1.317666041444427e-04, 1.277596691805506e-04, 1.247760994372930e-04, 5.031560309821501e-06, 2.662538185201593e-03, 2.360688802129656e-03, 3.217572075045864e-03, 3.225913500625936e-03, 2.592661966591179e-03, 1.709267022534033e-02, 1.926514783134177e+01, 2.464114251247894e-01, 2.538848788211980e+01, 9.412252232582288e-06, 1.637551330109926e+00, 1.637551330109926e+00, -6.946857937855007e+06, 8.805619671418691e+04, 5.116016407253332e+05, 1.018251430440500e+02, -2.984936049472563e+06, 2.024191131841744e+05, 4.939225671226928e-03, 4.567876376409600e-03, 8.430991087985411e-03, 4.799755621896606e-03, 4.744984609458515e-03, 4.744984609458515e-03, 5.520207054950148e-03, 5.513298627175015e-03, 5.313785361210108e-03, 5.266606989314191e-03, 5.269646454769355e-03, 2.677868065208661e-02, 1.750008441239076e-03, 7.637913905143808e-01, 5.548824470020855e-02, 1.064567364934895e-01, 3.595773833949113e-02, 3.595773833949113e-02, 4.145655518290044e-02, 1.361224511656341e+02, 4.015297957276898e+01, 3.058365968830462e-02, 4.372535999653208e+01, 7.390351125211636e+00, 1.022742805917914e+04, 1.057850113668568e+06, 5.570507941328060e+05, 9.599118135703494e+00, 2.904106062728291e+05, 2.904106062728930e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.935798095753831e-05, -7.935737300128208e-05, -7.935463401939113e-05, -7.936366209351393e-05, -7.935893909784828e-05, -7.935893909784828e-05, -1.318390184405670e-04, -1.322899837456370e-04, -1.444081443940536e-04, -1.394356243696986e-04, -1.399895507387233e-04, -1.902058701932316e-04, -2.458956879711426e-03, -2.702249099315391e-03, -2.575877766133134e-03, -2.653927744749711e-03, -2.635166277899870e-03, -2.635166277899870e-03, -2.325499588583632e-02, -2.334322402313710e-02, -6.551432575630721e-04, -2.315032255919926e-02, -2.314533721649554e-02, -2.314533721649549e-02, -1.184153202921318e-01, -1.253549857728690e-01, -7.747007673616749e-02, -6.071385090321121e-02, -9.220791240714252e-02, -9.220791240714252e-02, -2.047113100355863e-04, -2.054415966151516e-04, -2.047537849866401e-04, -8.477261787154983e-04, -2.050763074418110e-04, -2.050763074418110e-04, -2.715196129223263e-05, 1.405604601385954e-05, -9.298790737263912e-05, -1.989407893151759e-05, 1.306997030728334e-05, -5.130929189965250e-04, -7.258976404479122e-03, -8.406481111910780e-03, -6.885359961714035e-03, -7.825584743393206e-03, -7.438159982198594e-03, -2.531959421707116e-02, -3.953147479753032e-04, -1.780653045599747e-02, -3.283827318341962e-04, -9.126613150104026e-04, -2.924969537737134e-02, -2.924969537737134e-02, -2.390897089001701e-08, -5.507764641278121e-02, -1.430677153394232e-01, -1.359175593007806e-04, -1.465206422832930e-07, -9.896356782552991e-02, -1.430046582042494e-02, -1.289280937064964e-02, -2.122963701422830e-02, -1.377049287256020e-02, -1.356306746173525e-02, -1.356306746173525e-02, -1.468958605919884e-02, -8.819195263084219e-03, -9.857423034767304e-03, -1.129043693554480e-02, -1.049472254128357e-02, -3.562794622160752e-02, -7.148324728737167e-03, -4.329032978220237e-03, -1.348830228442195e-02, -8.987511677050786e-04, -1.316674994730211e-02, -1.316674994730211e-02, -5.365155784787000e-03, -8.056558931710546e-02, -5.982127218647410e-02, -1.529867680724967e-02, -3.661217099299455e-04, -4.232987183695655e-02, -9.987161656090240e-02, -1.264034978676527e-02, -6.155334802418654e-02, -4.569609417860133e-02, -1.124884028509794e-01, -1.124884028510039e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
