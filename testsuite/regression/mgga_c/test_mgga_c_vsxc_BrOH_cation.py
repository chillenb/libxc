
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_vsxc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.631461595451637e-02, -9.631622471706422e-02, -9.632276591182347e-02, -9.015191534136688e-02, -9.015755876816545e-02, -7.829147969570842e-02, -6.687576702150762e-02, -5.329723326869711e-02, -5.349106602562864e-02, -5.341429551687270e-02, -5.342100128407219e-02, -6.688289476484534e-02, -2.567097740897809e-01, -9.867312532038852e-02, -3.686086456211544e-03, -1.060080512256064e-01, -3.188652849644887e-01, -5.045251218911449e-03, -1.257389061882362e-01, -1.178076375292943e-01, -2.123264262997060e-01, 1.280615700470567e-02, 7.286787985784074e-03, -2.057447105971887e-01, 1.094431254765757e-05, -2.652579146377220e-03, -1.532740385851508e-01, 1.922665180550939e-06, 2.061120246753106e-06, 2.061120246753109e-06, -5.007042831113742e-02, -4.988669773934187e-02, -5.005986285477756e-02, -4.989778236177610e-02, -6.964427508756214e-02, -6.961296174247891e-02, -3.943920854837088e-02, -4.095288095035125e-02, -3.819024724214718e-02, -3.961950818178680e-02, -6.514963224511706e-02, -4.086146529414442e-02, -3.424306291985903e-02, -3.105504795484441e-02, -3.181199747939370e-02, -3.412986745948414e-02, -3.231387363258639e-02, -3.456257166083367e-02, 8.375835292362467e-03, -2.378027222631495e-01, 7.338362962597547e-03, -5.018062894925426e-02, 1.127291326280962e-02, 1.127291326280962e-02, -1.856857046045813e-04, 1.694042442320514e-06, 2.162461532501726e-06, -4.132768909867542e-01, 1.384338443756813e-06, 1.384338443756812e-06, -1.368575065015729e-02, -1.923971691440115e-02, -5.860457229827769e-02, -3.824338307654943e-02, -5.977831535350365e-02, -3.807108014010582e-02, -1.438272145157395e-02, -3.282101274478440e-02, -3.272135710416609e-02, -2.884640332918164e-02, -3.137804074533032e-02, -3.337013362567017e-02, -3.718893413330013e-02, 6.165957349117541e-03, -8.314716905373755e-02, -3.730295829886890e-02, -1.368291979555573e-02, -4.857242381822834e-02, -2.876105418040954e-02, -4.094706336404993e-01, 1.947140130237481e-03, -2.575463023278048e-02, 6.494969060433691e-03, 6.494969060433702e-03, -1.214120844318317e-02, 3.836776052538159e-08, -3.866678539437027e-04, -1.238188617513970e+00, 1.662819927887152e-06, -1.209447053178031e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_vsxc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.860840127348296e-01, -1.861087544442029e-01, -1.860879830733116e-01, -1.861116923620195e-01, -1.860995238412790e-01, -1.861282122804165e-01, -2.475463014156514e-01, -1.604563014352249e-02, -2.475630286759108e-01, -1.604646392584721e-02, -8.954867202898173e-02, -8.955785635313886e-02, -1.490604189822349e-01, 3.830052021095422e-02, -1.835619890047808e-01, -1.836119207851767e-01, -1.823176040698800e-01, -1.821787917657561e-01, -1.827959983999194e-01, -1.827904827321297e-01, -1.834251495612464e-01, -1.820385342455728e-01, 3.891723800247501e-02, -1.468488103356064e-01, 5.856529454941599e-01, 5.553713768374673e-01, 4.324176401262116e-01, -3.034130975856497e-01, -1.934649096749346e-01, -1.986190658972138e-01, -3.292183965508627e-01, 4.717059627458833e-01, 5.117661696058209e-01, 8.455828543712766e-01, -1.649241788458518e-01, -2.256676329734675e-01, 4.993805764567458e-01, -2.476263276276581e-01, 4.808095957742953e-01, -2.406048548768780e-01, -4.636747827625188e-01, 8.660445517357929e-01, -5.784794960724911e-02, -6.191739935296724e-02, -7.801994834825370e-02, 4.388678788218047e-02, -3.227181060136406e-01, -2.530997501751577e-01, -1.216816277099001e-05, -3.710927090865618e-05, -1.717116376250292e-02, -1.833631156347957e-04, -7.984158207016269e-01, -1.409202181024420e-02, -5.425249488849916e-06, -4.284050276014840e-06, -4.217430306614564e-05, 2.489741755668584e-05, -4.217430306614563e-05, 2.489741755668582e-05, -6.538931978139215e-02, -6.538884332432769e-02, -6.551541291482842e-02, -6.548839130156904e-02, -6.540596262533113e-02, -6.538484310854975e-02, -6.549769971967956e-02, -6.549216074559913e-02, -1.896866173882576e-01, -2.621583086697584e-02, -2.625968003984142e-02, -1.897059016951306e-01, -1.931905051672651e-01, -1.925526409617281e-01, -1.863582128672868e-01, -1.860175935023499e-01, -1.996050693477960e-01, -1.966212586424261e-01, -1.935928488808584e-01, -1.906650615938955e-01, -1.797922259458804e-01, 1.190243104342547e-01, -1.842752152859461e-01, -1.888837025059731e-01, -2.263491673916002e-02, -6.954818754442932e-02, -3.527239120603412e-02, -3.723230500184037e-02, -9.810754223978005e-02, -8.299164503832469e-02, -6.036204965440825e-02, -5.765257986161014e-02, -1.721466878640013e-02, -7.012736339571067e-02, -5.313388303330810e-02, -5.546379140331471e-02, -2.015542687377289e-02, -2.193331742537384e-02, 6.557812455481068e-01, -2.799325453937633e-01, -1.176718595262527e-02, -2.252579346876237e-02, -7.232251473565611e-02, -7.238805379448721e-02, -3.267784564251648e-02, -4.991363701591982e-02, -3.267784564251648e-02, -4.991363701591982e-02, -1.161871173717626e-03, -8.640656674319754e-06, -4.320052068173265e-06, -4.278430105383034e-06, -2.967780966224349e-06, -8.796019447602630e-06, -3.433365003030729e-02, -1.302521712794389e+00, 8.383836508748276e-06, -2.480958192161602e-05, 8.383836508748284e-06, -2.480958192161602e-05, -5.505006410259178e-02, -5.584073020073053e-02, -4.303572558740053e-02, -4.397752040225308e-02, -8.752508778775357e-02, -8.749568481008407e-02, -9.315307358846249e-02, -4.386177158579041e-02, -8.740495696841974e-02, -8.736501732678353e-02, -9.397328616597238e-02, -4.126374663251760e-02, -5.247925963483041e-02, -5.335173271998642e-02, -4.088472884485965e-02, -3.893555436688937e-02, -1.189316017009400e-02, -7.923600537819893e-02, -3.365466021938671e-02, -3.401742390828207e-02, -3.860519242013123e-02, -3.888157610288967e-02, -6.294661951112518e-03, -9.008659787151028e-02, -5.808089707961679e-03, -1.015882334402103e-01, -1.249158876880224e-01, -1.236218691769753e-01, 3.673415678144871e-01, -2.374015461142658e-01, 7.713230530106317e-02, -1.117923416892207e-01, -1.259251091007209e-01, -1.252198580357970e-01, -1.672913162957717e-01, 1.775267763557111e-01, -9.448263154002219e-02, -9.077451266380646e-02, -9.948701744154600e-01, -9.947661536707260e-01, -2.046368238390387e-03, -4.303866777428340e-03, -8.549897763852506e-02, -7.477944494934791e-02, -8.495761255793249e-03, -2.160156827554853e-02, -8.495761255793143e-03, -2.160156827554846e-02, -3.432845422973707e-02, -3.599618940716658e-02, -1.198442041946263e-07, -1.225600630538414e-07, -1.064192021528901e-03, -1.210178710205809e-03, -1.422223973943969e+00, -1.287926547530552e+00, 6.118201293767168e-06, -1.797963320558881e-05, 6.637145105970488e-06, -5.070641951066593e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.630976631310871e-10, 0.000000000000000e+00, 3.634675168611742e-10, 3.631299433952986e-10, 0.000000000000000e+00, 3.634841876376698e-10, 3.631875994852337e-10, 0.000000000000000e+00, 3.636176390462196e-10, 5.262414708730944e-10, 0.000000000000000e+00, 5.312672839170236e-10, 5.264944776531131e-10, 0.000000000000000e+00, 5.313836273082089e-10, 6.585632665292098e-10, 0.000000000000000e+00, 6.587024663258642e-10, 3.396931739018923e-06, 0.000000000000000e+00, 7.384162799486302e-06, 2.963267643125585e-06, 0.000000000000000e+00, 2.963422795159878e-06, 2.952681345039090e-06, 0.000000000000000e+00, 2.952594850699153e-06, 2.955795066956208e-06, 0.000000000000000e+00, 2.955604215612038e-06, 2.958535258354446e-06, 0.000000000000000e+00, 2.955204131759987e-06, 7.381370026889017e-06, 0.000000000000000e+00, 3.382220418418592e-06, 7.587801598444546e-02, 0.000000000000000e+00, 7.224424128832237e-02, 5.599016739772849e-02, 0.000000000000000e+00, 1.187689094661493e-02, 8.158554073050710e-03, 0.000000000000000e+00, 8.397643150386149e-03, 1.301591784525001e-02, 0.000000000000000e+00, 6.398401897601148e-02, 7.004799617819706e-02, 0.000000000000000e+00, 1.311093942460380e-01, 7.131997777254564e-03, 0.000000000000000e+00, 9.318266173900120e-03, 5.368397179692239e+01, 0.000000000000000e+00, 5.426020681090070e+00, 4.874857169514310e+01, 0.000000000000000e+00, 5.120654844469626e+00, 5.071684290057104e-03, 0.000000000000000e+00, 4.051436114318219e-02, 3.929853486505246e+00, 0.000000000000000e+00, 4.421766734812699e+00, 2.493449862100396e+00, 0.000000000000000e+00, 1.698440082814294e+00, 5.176433979089799e+00, 0.000000000000000e+00, 1.666941020609422e+03, 4.246343120084601e+01, 0.000000000000000e+00, 4.690969613494081e+01, 6.514672431354186e+04, 0.000000000000000e+00, 9.695604957098861e+01, 1.379996631452951e+04, 0.000000000000000e+00, 3.075560400148608e+01, 3.696255723292463e+01, 0.000000000000000e+00, 3.649285183991034e+01, 5.257594621525435e+01, 0.000000000000000e+00, 1.057998747879997e+01, 5.257594621525435e+01, 0.000000000000000e+00, 1.057998747880025e+01, 1.067183683730223e-06, 0.000000000000000e+00, 1.068054808489986e-06, 1.081778383175205e-06, 0.000000000000000e+00, 1.082048389874613e-06, 1.068245431523271e-06, 0.000000000000000e+00, 1.068638415911949e-06, 1.080666874949085e-06, 0.000000000000000e+00, 1.081435745176077e-06, 9.809467981306336e-07, 0.000000000000000e+00, 9.653275132938843e-07, 9.649746154844836e-07, 0.000000000000000e+00, 9.812863302971957e-07, 4.878466402514954e-05, 0.000000000000000e+00, 4.878818714907322e-05, 4.643671243932045e-05, 0.000000000000000e+00, 4.649352025448626e-05, 5.078721734126135e-05, 0.000000000000000e+00, 5.032402445926488e-05, 4.868189326722269e-05, 0.000000000000000e+00, 4.822621461665534e-05, 5.768190164218646e-05, 0.000000000000000e+00, 1.503321792690929e-04, 4.614803884073412e-05, 0.000000000000000e+00, 4.717483193975699e-05, 8.383914188328597e-03, 0.000000000000000e+00, 1.187012348435883e-02, 1.124136998529315e-02, 0.000000000000000e+00, 1.238254973230347e-02, 1.767084011585590e-02, 0.000000000000000e+00, 1.579357794472502e-02, 1.175915950168828e-02, 0.000000000000000e+00, 1.250824761295258e-02, 8.082434576954640e-03, 0.000000000000000e+00, 9.660852914108098e-03, 9.769243301804008e-03, 0.000000000000000e+00, 9.086871433409400e-03, 5.804284463902766e+00, 0.000000000000000e+00, 5.790981631046764e+00, 6.926408879794907e+01, 0.000000000000000e+00, 3.981575594452009e+00, 6.175008273026385e+00, 0.000000000000000e+00, 6.696695990424943e+00, 4.116503088555803e-05, 0.000000000000000e+00, 4.126282623469427e-05, 6.261878821176992e+00, 0.000000000000000e+00, 7.951339585814060e+00, 6.261878821176989e+00, 0.000000000000000e+00, 7.951339585814060e+00, 3.909828004809832e+04, 0.000000000000000e+00, 4.836350123574503e+01, 3.488728526099375e+01, 0.000000000000000e+00, 3.062505476384015e+01, 2.469506456107020e+02, 0.000000000000000e+00, 3.009888995465228e+02, 2.239225595817398e+01, 0.000000000000000e+00, 6.999080988090866e+03, 1.668283465549374e+01, 0.000000000000000e+00, 1.770330105515128e+02, 1.668283465549374e+01, 0.000000000000000e+00, 1.770330105515127e+02, 2.161364136275373e-01, 0.000000000000000e+00, 2.208146790748626e-01, 8.490377509644290e-02, 0.000000000000000e+00, 8.665523128189682e-02, 1.107530190241037e-01, 0.000000000000000e+00, 1.133819079391267e-01, 1.482659671086297e-01, 0.000000000000000e+00, 1.472651914377369e-01, 1.267534655922734e-01, 0.000000000000000e+00, 1.294032298678909e-01, 1.288808192954476e-01, 0.000000000000000e+00, 1.281281621535319e-01, 2.074552404223545e-01, 0.000000000000000e+00, 2.129379212915966e-01, 2.354574069194893e-02, 0.000000000000000e+00, 3.945649622605213e-02, 1.423370143618744e-02, 0.000000000000000e+00, 1.717710768580207e-02, 2.685623279211607e-02, 0.000000000000000e+00, 2.721940387826442e-02, 1.988170230757160e-02, 0.000000000000000e+00, 2.026924690159311e-02, 1.497796436646446e-02, 0.000000000000000e+00, 1.575964125213751e-02, 5.009221053418830e-03, 0.000000000000000e+00, 6.042956850872001e-03, 1.029521565513297e+00, 0.000000000000000e+00, 1.008280104506078e+00, 4.890134676406458e+00, 0.000000000000000e+00, 8.662598672519056e-01, 5.206362324028815e-01, 0.000000000000000e+00, 1.912237191275734e-01, 3.015778759344739e-01, 0.000000000000000e+00, 3.021099588287959e-01, 4.343448971010102e-01, 0.000000000000000e+00, 1.507553121711442e+00, 4.022089897198932e-02, 0.000000000000000e+00, 3.919128246251863e-02, 1.841140912603134e+04, 0.000000000000000e+00, 1.786795829677915e+04, 9.826610226283428e+00, 0.000000000000000e+00, 1.075115098441852e+01, 1.607303651299924e-01, 0.000000000000000e+00, 1.542920724718118e-01, 1.042450544473997e+01, 0.000000000000000e+00, 1.345109874630697e+01, 1.042450544473996e+01, 0.000000000000000e+00, 1.345109874630694e+01, 3.499035696135918e+04, 0.000000000000000e+00, 3.264971421738365e+04, 4.780655585225285e+01, 0.000000000000000e+00, 4.770923360290644e+01, 2.111081648716031e+05, 0.000000000000000e+00, 2.038617809887207e+05, 6.752019861815740e+03, 0.000000000000000e+00, 6.474643538211701e+03, 7.647597496504424e+01, 0.000000000000000e+00, 1.815694095371557e+02, 1.381940163721139e+02, 0.000000000000000e+00, 2.194777669165438e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.913568480448089e-05, 4.915135566979959e-05, 4.913826376542326e-05, 4.915332331266752e-05, 4.914580758854108e-05, 4.916380866636363e-05, 6.790771774422010e-05, -9.131173526176293e-05, 6.792428693112854e-05, -9.133056110929476e-05, -7.767414886190979e-05, -7.768467040320223e-05, -1.137008729796479e-03, -9.349579056311701e-04, -6.363792555586277e-04, -6.363573423383347e-04, -6.362784185046181e-04, -6.363463740633598e-04, -6.362275287271012e-04, -6.362299583527489e-04, -6.360376862416150e-04, -6.366890965210915e-04, -9.399817866917455e-04, -1.140366806000524e-03, -8.308697883510666e-02, -8.069207743371037e-02, -5.858602193654211e-02, -1.951767705676717e-02, -1.259877927512693e-02, -1.255203994975993e-02, -1.970032826932422e-02, -6.248693614951575e-02, -7.673627122160427e-02, -1.073388177300561e-01, -1.265181802406133e-02, -1.203862777386826e-02, -6.924018704132734e-01, -1.546549614673710e-01, -6.723085298466549e-01, -1.543063756895269e-01, -1.206474712079981e-02, -5.674670801034695e-02, -6.785205884429052e-02, -7.992768662627318e-02, -1.107168638783653e-01, -2.004392629639412e-02, -1.298775656493592e-01, -6.786661070834186e-01, -8.443840061342162e-05, -1.017625539363776e-04, 8.013256782010932e-03, -1.824366923613755e-04, 2.249438448144341e-01, -9.199639857110207e-03, -1.483907373690574e-05, -1.424949539236743e-05, -5.997878990011140e-05, -1.826499274690379e-05, -5.997878990011140e-05, -1.826499274690386e-05, -1.748575482894172e-03, -1.749354359856054e-03, -1.769817628912990e-03, -1.769911069193353e-03, -1.750043803169601e-03, -1.750283075105297e-03, -1.768271001874594e-03, -1.768928613101839e-03, 1.112716140947584e-03, -1.894365810925616e-03, -1.893797617605704e-03, 1.113107792789909e-03, -1.758647805928847e-03, -1.758128495251439e-03, -1.720663404644597e-03, -1.720307886442566e-03, -1.789933606536152e-03, -1.788274756939161e-03, -1.753721053135899e-03, -1.752392650575802e-03, -3.074688031215409e-03, -4.142237360465721e-03, -1.723046646737619e-03, -1.723772404335091e-03, -2.545183444001087e-02, 1.065119556104368e-02, -3.661102014024289e-02, -3.895850477108496e-02, -1.408976114618900e-02, -1.518349876935468e-02, -1.661775660636973e-02, -1.928150481275019e-02, -2.820969250032771e-02, 1.064661691826974e-02, -1.979348058482359e-02, -1.683315421976535e-02, -3.868905936775968e-02, -3.941309900920368e-02, -6.773885776567536e-01, -1.108203303718431e-01, -3.179253812879795e-02, -3.805026808878471e-02, -2.864766117063826e-03, -2.868379490595555e-03, -5.847206601154447e-02, -8.625518610418652e-02, -5.847206601154444e-02, -8.625518610418652e-02, 3.883923473886425e-04, -7.116702096170429e-06, -1.259876162146538e-05, -1.158735360622762e-05, -3.933591430736788e-05, -5.154713636864587e-05, -2.822133306585863e-02, 2.017821740338912e-01, -7.313419971335285e-06, -6.352571962227576e-05, -7.313419971335290e-06, -6.352571962227575e-05, -3.938974005036574e-01, -4.047694894389144e-01, -1.707057453883535e-01, -1.744180116758798e-01, 5.572287912127560e-02, 5.569415223362198e-02, 6.086330869916481e-02, -2.852207182064000e-01, 5.694379356515658e-02, 5.687564960527830e-02, 5.991880875947438e-02, -2.528130426691525e-01, -3.541665353298293e-01, -3.647574428701011e-01, -3.112557723670907e-02, -1.426897830500593e-03, -3.583582739858498e-02, 2.306904269385433e-02, -5.198934172378357e-02, -5.246476114883575e-02, -3.427369343270652e-02, -3.477468003563156e-02, -4.366389456007665e-02, 3.320289158419686e-02, -3.024708740325474e-02, 2.508400401707412e-02, -6.575342332324166e-02, -6.600790516289433e-02, -2.902559123299068e-01, -8.515566711153505e-02, -7.998826210567422e-02, -5.360058232838682e-02, -4.063135983890957e-02, -4.063289254234342e-02, -6.897763979213303e-02, -1.564643847718857e-01, -1.899929935625054e-02, -1.919415862724743e-02, 2.918163897235030e-01, 2.887767349282647e-01, -8.784809219262519e-03, -9.992294347027506e-03, -3.038989867123184e-02, -3.177156823483799e-02, -3.422909475897470e-02, -4.784774223224832e-02, -3.422909475897470e-02, -4.784774223224827e-02, 1.097207393293378e-02, 1.139611228943140e-02, -3.315177114539993e-07, -3.323611699895416e-07, 7.266092919099324e-04, 8.459297216137746e-04, -5.387972326753054e-02, -1.439437142342228e-01, -1.669228878451573e-05, -5.124511958871813e-05, -2.706309312074137e-05, 4.098412650442393e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
