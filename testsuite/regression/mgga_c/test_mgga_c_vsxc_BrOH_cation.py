
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_vsxc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.136376878883705e-02, -8.136297435531933e-02, -8.135832916465491e-02, -8.137003625303131e-02, -8.136406374583054e-02, -8.136406374583054e-02, -6.186835031340734e-02, -6.186384455101210e-02, -6.175139782543731e-02, -6.183831595150713e-02, -6.181147677891889e-02, -6.181147677891889e-02, -7.211694486430285e-02, -7.218252315933218e-02, -7.098643366406208e-02, -6.313104553549991e-02, -6.084089785615709e-02, -6.084089785615709e-02, -9.150543024963675e-04, -2.951493431276233e-03, -2.937813929275971e-01, -3.126717958522508e-03, -2.749409502996498e-03, -2.749409502996480e-03, 1.048381777956112e-05, 1.189149161953681e-05, 4.988363642278250e-04, 6.388165281302965e-07, 5.274230556754961e-07, 5.274230556754484e-07, -5.039017295995035e-02, -5.020696855286699e-02, -5.037322016778191e-02, -5.021181044082502e-02, -5.030183451744370e-02, -5.030183451744370e-02, -4.863764437918287e-02, -4.872266517102846e-02, -4.676003087142300e-02, -4.678473194887066e-02, -4.949878666815064e-02, -4.949878666815064e-02, -3.624647873082284e-02, -3.734812834724538e-02, -3.458174014997158e-02, -3.041730504565111e-02, -3.601204149788809e-02, -3.601204149788807e-02, 1.404085778077132e-03, 5.459793945741886e-03, 9.408039712272523e-04, -4.589141399484496e-02, 4.370311199994182e-03, 4.370311199994209e-03, -1.825107674470437e-06, -1.095995664626809e-06, 3.988012747874288e-07, 7.183632935764370e-04, -2.716343891796246e-07, -2.716343891796153e-07, -3.573630877336877e-02, -2.736004318037317e-02, -2.840631569769559e-02, -3.039913651951923e-02, -2.923459080930785e-02, -2.923459080930785e-02, -5.097216186338153e-02, -3.319596701486612e-02, -3.391229206558861e-02, -3.155958209136207e-02, -3.307662439990961e-02, -3.307662439990961e-02, -3.600644544676150e-02, 1.399727876884125e-03, -1.210481096075564e-02, -3.057544695342182e-02, -2.349595023385989e-02, -2.349595023385989e-02, -3.377136076234058e-02, 7.099078830611189e-04, 7.096397246158144e-04, -2.995376127363111e-02, 2.106318016747341e-03, 2.106318016747344e-03, -1.252309005103108e-05, -6.481391996613095e-07, 3.534333441898039e-07, 3.588858731604534e-03, 3.407045550688478e-08, 3.407045550687945e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_vsxc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.522400262238569e-02, -8.523712463885855e-02, -8.522427037590570e-02, -8.523616650237303e-02, -8.522175012443942e-02, -8.523917793759138e-02, -8.523383757993384e-02, -8.523743816596710e-02, -8.523893308131841e-02, -8.522641099441559e-02, -8.523893308131841e-02, -8.522641099441559e-02, -2.980543778310047e-02, -2.977552401529053e-02, -2.982452630311290e-02, -2.977916934188833e-02, -3.005799652548108e-02, -3.022240332873713e-02, -3.036622138218441e-02, -3.037224396113641e-02, -2.945086335230968e-02, -3.092798389686213e-02, -2.945086335230968e-02, -3.092798389686213e-02, -1.687403689568133e-02, -1.057492785412167e-02, -1.935366588647769e-02, -1.107020730793177e-02, -4.507611171868689e-02, -6.306961199616089e-02, -5.286301365757539e-02, -4.896156052616454e-02, 1.431804240595278e-02, -1.479548155389552e-01, 1.431804240595278e-02, -1.479548155389552e-01, -1.084973734418966e-01, -1.016313568396408e-01, -1.086217760739027e-01, -9.962439149642735e-02, 5.072022556919414e-03, 7.157767726254073e-02, -8.647429598570582e-02, -7.835318696086130e-02, -6.161279166010872e-02, -8.648184950256782e-02, -6.161279166010863e-02, -8.648184950256821e-02, -1.466837615401554e-05, -3.811590608760382e-05, -1.662818661486602e-05, -4.856328325747732e-05, -2.679137667966810e-03, -4.632283865608304e-03, -1.113814293522762e-05, -8.619806242634050e-06, -4.750765251610289e-05, 1.437850227195437e-05, -4.750765251610308e-05, 1.437850227195431e-05, -6.549352501090019e-02, -6.546035294308472e-02, -6.562643184149211e-02, -6.556626399807011e-02, -6.550686512268054e-02, -6.545664911409105e-02, -6.560453412813456e-02, -6.556955932132583e-02, -6.556501819457888e-02, -6.550921125334409e-02, -6.556501819457888e-02, -6.550921125334409e-02, -1.370965703219451e-01, -1.381056294451449e-01, -1.380097905270894e-01, -1.389613789219695e-01, -1.507941713778590e-01, -1.473767022801195e-01, -1.519320298101946e-01, -1.487235652828408e-01, -1.282358632878252e-01, -1.372639025379533e-01, -1.282358632878252e-01, -1.372639025379533e-01, -3.011367507360830e-02, -3.100129891355650e-02, -5.839894511632657e-02, -5.991631058172321e-02, -1.852980334507097e-02, -2.825134730355149e-02, -2.998656682040914e-02, -3.976117895397246e-02, -3.312574259968538e-02, -2.977806449955705e-02, -3.312574259968534e-02, -2.977806449955706e-02, -3.811253083107754e-02, -4.173661580353195e-02, -9.491769618844788e-02, -9.449464541162475e-02, -3.217015175255453e-02, -3.947900259457664e-02, -6.739108911464498e-02, -6.749684728652126e-02, -4.859883450815217e-02, -5.798082491401555e-02, -4.859883450815209e-02, -5.798082491401549e-02, -1.413624131239493e-05, -1.441334978447602e-05, -1.571297551589866e-05, -1.699828598424564e-05, -8.753927212814693e-06, -1.678978073549269e-05, -1.831515965439441e-02, -1.481809633098698e-02, -1.918752044656512e-05, -2.727193372180214e-05, -1.918752044656503e-05, -2.727193372180210e-05, -6.840620714300531e-02, -6.887142800527490e-02, -5.066744175107910e-02, -5.142070105773808e-02, -5.590100579961655e-02, -5.662718979939683e-02, -6.106008549786450e-02, -6.158264039583748e-02, -5.839287822585702e-02, -5.901617620183785e-02, -5.839287822585702e-02, -5.901617620183785e-02, -7.811792110503629e-02, -7.806761918794279e-02, -6.429887246359443e-02, -6.360960793506661e-02, -3.940225422576937e-02, -3.976710394625724e-02, -3.305331322983267e-02, -3.352246277209132e-02, -3.318901095065340e-02, -3.356138091791560e-02, -3.318901095065338e-02, -3.356138091791559e-02, -5.469944362685602e-02, -5.769308476325623e-02, -1.193907359423582e-01, -1.174791061805864e-01, -1.152073525751638e-01, -1.090894783009504e-01, -4.273663970007208e-02, -4.100230528348466e-02, -8.231891098113990e-02, -8.150407964108115e-02, -8.231891098113987e-02, -8.150407964108113e-02, -4.821859113039112e-02, -4.885153625748057e-02, -2.138354300581154e-03, -2.506259156645703e-03, -6.419519475486208e-03, -8.896039175441503e-03, -2.555378218422969e-02, -3.269895547727430e-02, -2.095801122576174e-02, -3.381847285713901e-02, -2.095801122576176e-02, -3.381847285713900e-02, -1.590989994151791e-04, -2.124748653849721e-04, -2.650160261917421e-06, -4.683136206588346e-06, -1.552636982907030e-06, -3.376996683307838e-06, -2.097944030633469e-02, -1.954354762952713e-02, -1.932068784727442e-05, -1.933467215398957e-05, -1.932068784727435e-05, -1.933467215398961e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.527381451204074e-10, 0.000000000000000e+00, 5.534336609796535e-10, 5.527730337703268e-10, 0.000000000000000e+00, 5.534532566945065e-10, 5.528908849533489e-10, 0.000000000000000e+00, 5.536509650424992e-10, 5.525763448218646e-10, 0.000000000000000e+00, 5.531640179660113e-10, 5.528173171818624e-10, 0.000000000000000e+00, 5.533322826343130e-10, 5.528173171818624e-10, 0.000000000000000e+00, 5.533322826343130e-10, -5.250693605582441e-07, 0.000000000000000e+00, -5.240900663817315e-07, -5.263379294258685e-07, 0.000000000000000e+00, -5.252133877524247e-07, -5.578293870886052e-07, 0.000000000000000e+00, -5.580273218609894e-07, -5.531099708291381e-07, 0.000000000000000e+00, -5.523793355622056e-07, -5.466672647395242e-07, 0.000000000000000e+00, -5.534138846925008e-07, -5.466672647395242e-07, 0.000000000000000e+00, -5.534138846925008e-07, 1.279670560966512e-02, 0.000000000000000e+00, 1.244307388431571e-02, 1.285273893112932e-02, 0.000000000000000e+00, 1.247388862764567e-02, 1.302564622852483e-02, 0.000000000000000e+00, 1.315319422273818e-02, 1.059460406409976e-02, 0.000000000000000e+00, 1.027260903892406e-02, 1.015559742096528e-02, 0.000000000000000e+00, 1.252989669060658e-02, 1.015559742096528e-02, 0.000000000000000e+00, 1.252989669060658e-02, 2.984195077815149e+00, 0.000000000000000e+00, 2.855387922962342e+00, 2.862325094538405e+00, 0.000000000000000e+00, 2.677683651479230e+00, 2.938686557172401e-02, 0.000000000000000e+00, 2.201134383696167e-02, 5.235710058343710e+00, 0.000000000000000e+00, 5.081519416826237e+00, 2.162484694315670e+00, 0.000000000000000e+00, 1.653700994879870e+01, 2.162484694315668e+00, 0.000000000000000e+00, 1.653700994879874e+01, 4.342182466500194e+01, 0.000000000000000e+00, 4.729930305443297e+01, 4.477011340326703e+01, 0.000000000000000e+00, 4.970070683199716e+01, 1.560583664857753e+01, 0.000000000000000e+00, 1.680496272451667e+01, 4.725211613939953e+01, 0.000000000000000e+00, 4.495795780828328e+01, 5.573987035261591e+01, 0.000000000000000e+00, 6.973355499482800e+01, 5.573987035261599e+01, 0.000000000000000e+00, 6.973355499482859e+01, 1.059558903068018e-06, 0.000000000000000e+00, 1.060781911840129e-06, 1.074239069594579e-06, 0.000000000000000e+00, 1.074858050890178e-06, 1.060795712141552e-06, 0.000000000000000e+00, 1.061498747789167e-06, 1.073283975472675e-06, 0.000000000000000e+00, 1.074364382572471e-06, 1.066762482535244e-06, 0.000000000000000e+00, 1.067758382245195e-06, 1.066762482535244e-06, 0.000000000000000e+00, 1.067758382245195e-06, 2.998256708705158e-05, 0.000000000000000e+00, 3.054101170794208e-05, 3.006428716519863e-05, 0.000000000000000e+00, 3.056975988363815e-05, 3.482963906108536e-05, 0.000000000000000e+00, 3.395509721500643e-05, 3.494552219089515e-05, 0.000000000000000e+00, 3.416968129778555e-05, 2.673615063924809e-05, 0.000000000000000e+00, 2.994469312015668e-05, 2.673615063924809e-05, 0.000000000000000e+00, 2.994469312015668e-05, -4.952465095664296e-03, 0.000000000000000e+00, -4.531022008173495e-03, 1.475210490693521e-03, 0.000000000000000e+00, 2.852776441869235e-03, -7.333095137393691e-03, 0.000000000000000e+00, -4.807387099755102e-03, -6.262311788432120e-03, 0.000000000000000e+00, -3.921550196492500e-03, -1.447946784154656e-03, 0.000000000000000e+00, -7.581112136031078e-03, -1.447946784154647e-03, 0.000000000000000e+00, -7.581112136031077e-03, 7.492207353674350e+00, 0.000000000000000e+00, 7.593329848254820e+00, 2.036534528777605e+00, 0.000000000000000e+00, 1.993135521202076e+00, 8.835935392252690e+00, 0.000000000000000e+00, 8.582073808031971e+00, -1.315371095284124e-05, 0.000000000000000e+00, -1.316063005268860e-05, 7.350980570279675e+00, 0.000000000000000e+00, 8.466879875983913e+00, 7.350980570279672e+00, 0.000000000000000e+00, 8.466879875983912e+00, 9.540872148279811e+01, 0.000000000000000e+00, 7.968004846499252e+01, 6.176516993144307e+01, 0.000000000000000e+00, 5.775820111300320e+01, 3.241136342837443e+02, 0.000000000000000e+00, 3.908285816611535e+02, 1.583436569767387e+01, 0.000000000000000e+00, 1.522156732750550e+01, 2.821246553377674e+02, 0.000000000000000e+00, 1.880371775953147e+02, 2.821246553377657e+02, 0.000000000000000e+00, 1.880371775953144e+02, 2.144663266346065e-01, 0.000000000000000e+00, 2.192804444229211e-01, 8.142622929867262e-02, 0.000000000000000e+00, 8.333148447349210e-02, 1.089680394969476e-01, 0.000000000000000e+00, 1.115970181355220e-01, 1.438057568153114e-01, 0.000000000000000e+00, 1.464926497990329e-01, 1.245881474699150e-01, 0.000000000000000e+00, 1.272518066630892e-01, 1.245881474699150e-01, 0.000000000000000e+00, 1.272518066630892e-01, 2.059568267294686e-01, 0.000000000000000e+00, 2.115635153973200e-01, 1.854815121620994e-02, 0.000000000000000e+00, 1.845127636448989e-02, 1.084345703684865e-02, 0.000000000000000e+00, 1.143892800332927e-02, 1.800510988455502e-02, 0.000000000000000e+00, 1.856835022217578e-02, 1.095679051751859e-02, 0.000000000000000e+00, 1.174426656846609e-02, 1.095679051751859e-02, 0.000000000000000e+00, 1.174426656846606e-02, -1.916889689384488e-03, 0.000000000000000e+00, -5.978859904593284e-04, 9.900931444456532e-01, 0.000000000000000e+00, 9.653422765291059e-01, 4.658296704660023e-01, 0.000000000000000e+00, 4.401690131159284e-01, 2.956773276943629e-02, 0.000000000000000e+00, 2.636151442346965e-02, 1.865413037055127e-01, 0.000000000000000e+00, 1.853528589516546e-01, 1.865413037055128e-01, 0.000000000000000e+00, 1.853528589516545e-01, 6.889346038080836e-03, 0.000000000000000e+00, 8.685268414512304e-03, 1.489647450180452e+01, 0.000000000000000e+00, 1.498564158957845e+01, 1.306166356775525e+01, 0.000000000000000e+00, 1.382123440593142e+01, -3.749766823808674e-02, 0.000000000000000e+00, -1.866872795604610e-04, 1.346531049736377e+01, 0.000000000000000e+00, 1.618076741290302e+01, 1.346531049736377e+01, 0.000000000000000e+00, 1.618076741290302e+01, 3.699270116641753e+01, 0.000000000000000e+00, 3.892862126983104e+01, 6.102975969718528e+02, 0.000000000000000e+00, 1.306350853652000e+03, 1.288361279383404e+02, 0.000000000000000e+00, 1.503852260727910e+02, 1.541121033363313e+01, 0.000000000000000e+00, 1.572096446178556e+01, 4.594312454571369e+02, 0.000000000000000e+00, 1.924321020978064e+02, 4.594312454571383e+02, 0.000000000000000e+00, 1.924321020978073e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_vsxc_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_vsxc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.464097607771860e-05, -6.471791333507198e-05, -6.464502369508917e-05, -6.472086086008872e-05, -6.466232453579997e-05, -6.474449126332543e-05, -6.461701457993854e-05, -6.468676057739106e-05, -6.464252127920183e-05, -6.471381173736587e-05, -6.464252127920183e-05, -6.471381173736587e-05, -1.571134995539599e-04, -1.575936196743210e-04, -1.567060858416511e-04, -1.573232989373449e-04, -1.481087141815676e-04, -1.470181953327501e-04, -1.461524965020343e-04, -1.462983855338184e-04, -1.544085350817730e-04, -1.427555463796949e-04, -1.544085350817730e-04, -1.427555463796949e-04, -2.338741524468273e-02, -2.318939882381443e-02, -2.330896329909567e-02, -2.315955925692322e-02, -2.137907267589174e-02, -2.075267968293349e-02, -1.821069396720607e-02, -1.796056511190161e-02, -2.030950343681889e-02, -1.638242559512193e-02, -2.030950343681889e-02, -1.638242559512193e-02, -7.645099118152299e-02, -9.362184525564020e-02, -7.302982665818571e-02, -9.041716958003058e-02, -4.507533244042295e-02, -4.072478660805227e-02, -6.454797647924812e-02, -7.440443541199084e-02, -9.121523471385316e-02, -6.562762889137369e-02, -9.121523471385309e-02, -6.562762889137376e-02, -8.417398594213354e-05, -1.016839906026684e-04, -9.926374775234208e-05, -1.238868040866886e-04, -4.905748737225397e-03, -5.895490664543335e-03, -1.477358761067414e-05, -1.428028978770589e-05, -5.932705757221331e-05, -2.418719797776875e-05, -5.932705757221328e-05, -2.418719797776884e-05, -1.726020293091886e-03, -1.728168612029692e-03, -1.747222421567998e-03, -1.748702466482813e-03, -1.728002095164728e-03, -1.729459470947874e-03, -1.746180617650022e-03, -1.748069603833316e-03, -1.736207991801349e-03, -1.738351379835095e-03, -1.736207991801349e-03, -1.738351379835095e-03, -8.783366222622618e-04, -9.042421024164603e-04, -9.264953385233552e-04, -9.495873409081424e-04, -1.040960433497798e-03, -1.012421922430168e-03, -1.089612913254844e-03, -1.065414806883976e-03, -7.867265605144440e-04, -9.162776913188933e-04, -7.867265605144440e-04, -9.162776913188933e-04, 3.410292793673041e-03, 2.906561954199657e-03, 1.005866460235802e-02, 9.594870771947400e-03, -8.211292652627858e-04, 2.065630405171269e-03, 8.331060053467230e-04, 5.272593613637048e-03, 4.766362780389780e-04, 4.772205322620147e-03, 4.766362780389725e-04, 4.772205322620147e-03, -3.815673758000444e-02, -3.857403659724092e-02, -6.761633404191535e-02, -6.715483348951755e-02, -3.233565703055514e-02, -3.719462198284875e-02, 1.042436472666752e-03, 1.044460218229776e-03, -5.605495400894337e-02, -7.997264605619622e-02, -5.605495400894337e-02, -7.997264605619626e-02, -7.026632106260664e-06, -6.738526908539134e-06, -1.373471352329201e-05, -1.280183231328342e-05, -3.996091618955524e-05, -5.115747721941651e-05, -1.836837197589180e-02, -2.066513708698769e-02, -2.003860989767477e-05, -6.429611912013113e-05, -2.003860989767469e-05, -6.429611912013107e-05, -1.937795824307560e-01, -1.997896324915581e-01, -1.202974894915147e-01, -1.235683040572077e-01, -1.439787995904985e-01, -1.482559021700816e-01, -1.673449203995103e-01, -1.719948037809672e-01, -1.552764510767565e-01, -1.597503288382497e-01, -1.552764510767565e-01, -1.597503288382495e-01, -3.335695707823602e-02, -3.796962882704341e-02, -1.334910353618777e-02, -1.353441848307877e-02, -1.646067900228769e-02, -1.699559772940739e-02, -3.236559186151924e-02, -3.278135484067397e-02, -2.110387905260426e-02, -2.194276858669959e-02, -2.110387905260425e-02, -2.194276858669955e-02, 9.682617970764938e-03, 9.678521104826907e-03, -5.981265553919696e-02, -5.974565965062763e-02, -3.990009712144298e-02, -3.969185405951164e-02, -5.906472903521608e-03, -5.559640197312359e-03, -2.071166901795577e-02, -2.045591685934330e-02, -2.071166901795577e-02, -2.045591685934328e-02, -1.853529814928525e-03, -2.773546974573376e-03, -4.880848314939219e-03, -4.850574430159824e-03, -8.906575662306668e-03, -9.963902754442498e-03, 2.797543449263280e-03, -3.783464427094674e-04, -3.429108695673422e-02, -4.600598556289379e-02, -3.429108695673421e-02, -4.600598556289380e-02, -1.256233550510405e-04, -1.351264931266989e-04, -1.060653592782498e-06, -1.593960121080050e-06, -7.096251928665281e-06, -8.998437686468338e-06, -3.498796382940641e-02, -4.119722489816744e-02, -2.959400894609254e-05, -5.229293056127153e-05, -2.959400894609258e-05, -5.229293056127157e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
