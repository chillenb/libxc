
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.455401839840328e-02, -3.455441182903204e-02, -3.455435547180254e-02, -3.454847493020018e-02, -3.455181385356659e-02, -3.455181385356659e-02, -3.879588244881196e-02, -3.880022652229052e-02, -3.889616552099805e-02, -3.867932858257186e-02, -3.877720913393481e-02, -3.877720913393481e-02, -2.645110136277653e-02, -2.621728846080636e-02, -2.064741222480291e-02, -2.078126111137538e-02, -2.075536742161856e-02, -2.075536742161856e-02, -5.167818658839436e-03, -5.647888005507838e-03, -2.964116440235666e-02, -1.761136873077859e-03, -1.633180556882760e-03, -1.633180556882757e-03, -4.553899034172204e-09, -6.093278354805368e-09, -7.315252041622794e-06, -3.358770767652174e-10, -6.675241488518697e-10, -6.675241488425883e-10, -3.545964685282172e-02, -3.554414457189112e-02, -3.545756498713567e-02, -3.553235118587987e-02, -3.550553596243659e-02, -3.550553596243659e-02, -1.684946240583017e-02, -1.703828705912813e-02, -1.594927086426390e-02, -1.610323095904698e-02, -1.740775516096321e-02, -1.740775516096321e-02, -3.324825910915248e-02, -5.332013816477631e-02, -3.297377522990784e-02, -5.008433183894541e-02, -3.468657411273141e-02, -3.468657411273141e-02, -3.496168767540939e-04, -2.697460419023840e-03, -2.714689807004366e-04, -7.070841243969862e-02, -9.030043842892846e-04, -9.030043842892846e-04, -1.400479769039842e-10, -3.688678793064881e-10, -6.298409753321018e-10, -7.015769536587995e-05, -5.962705170711689e-10, -5.962705150111832e-10, -5.041961478731329e-02, -3.853087532662734e-02, -4.138406749292647e-02, -4.461842232206028e-02, -4.288016671571891e-02, -4.288016671571891e-02, -5.992549783053858e-02, -1.967816851058707e-02, -2.443326942275447e-02, -3.108314886342338e-02, -2.753568530112356e-02, -2.753568530112356e-02, -5.376381306808057e-02, -4.734825288440555e-03, -8.283842428435674e-03, -2.033711211567296e-02, -1.321078143392980e-02, -1.321078143392981e-02, -2.161934044944065e-02, -5.465036724578305e-06, -2.136476610292252e-05, -2.444734387567612e-02, -2.277014601246006e-04, -2.277014601246033e-04, -1.917792517179843e-08, -3.712920426152205e-12, -5.359571126954091e-11, -1.726791287765274e-04, -5.406671852316780e-10, -5.406671800671438e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.051928401207863e-01, -1.051928924401320e-01, -1.051936566568353e-01, -1.051939324452904e-01, -1.051949688399460e-01, -1.051942240051097e-01, -1.051798608786510e-01, -1.051816463949793e-01, -1.051861660667943e-01, -1.051907960812381e-01, -1.051861660667943e-01, -1.051907960812381e-01, -1.053620744250116e-01, -1.053579122756618e-01, -1.053678169460567e-01, -1.053634954841859e-01, -1.054936456101138e-01, -1.054862272962068e-01, -1.052044927080683e-01, -1.051969358920337e-01, -1.053563981280219e-01, -1.053070568618937e-01, -1.053563981280219e-01, -1.053070568618937e-01, -7.688853114696041e-02, -7.645554145127464e-02, -7.663118595232236e-02, -7.610075413846132e-02, -6.742101952738030e-02, -6.812264666923042e-02, -6.810444127582468e-02, -6.786943355315170e-02, -6.494872470104543e-02, -7.192171960678159e-02, -6.494872470104543e-02, -7.192171960678159e-02, -2.480981088928104e-02, -2.329867222915009e-02, -2.664631545015576e-02, -2.482996032776415e-02, -8.402351367815541e-02, -8.108929410788659e-02, -9.707433819679864e-03, -9.565598604839656e-03, -7.744802001549205e-03, -1.861943210230375e-02, -7.744802001549229e-03, -1.861943210230376e-02, -3.270629578182364e-08, -3.031988796241248e-08, -4.402610259299002e-08, -4.027995079345780e-08, -4.981759205629550e-05, -4.660773191849518e-05, -2.274756205256892e-09, -2.335063190855163e-09, -4.368135972786026e-09, -8.625522421942849e-09, -4.368135974520030e-09, -8.625522424413771e-09, -1.068253494310992e-01, -1.068513894299460e-01, -1.070409144827004e-01, -1.070712982781901e-01, -1.068256933379651e-01, -1.068544750163895e-01, -1.070194276416855e-01, -1.070457132388826e-01, -1.069380201400801e-01, -1.069677731747369e-01, -1.069380201400801e-01, -1.069677731747369e-01, -6.302155809893062e-02, -6.302506203424681e-02, -6.341277301199505e-02, -6.343531286725734e-02, -6.095947935601532e-02, -6.060565163897930e-02, -6.130046992221594e-02, -6.093542145248754e-02, -6.393206398799667e-02, -6.476553339616285e-02, -6.393206398799667e-02, -6.476553339616285e-02, -7.928537607782080e-02, -7.951786995372116e-02, -8.420200034272857e-02, -8.415093079191246e-02, -8.044241903694557e-02, -7.690162600542788e-02, -8.349315569346655e-02, -7.971892336283257e-02, -7.815313484095962e-02, -8.315314609141825e-02, -7.815313484095965e-02, -8.315314609141827e-02, -2.144151522608595e-03, -2.114955100084830e-03, -1.423719690390852e-02, -1.414456505918158e-02, -1.723706813904268e-03, -1.621028775896762e-03, -1.179354502518155e-01, -1.180055273294312e-01, -5.557536279356162e-03, -4.992161749380660e-03, -5.557536279356162e-03, -4.992161749380660e-03, -9.542658428468500e-10, -9.296077120669153e-10, -2.510628348343507e-09, -2.489447991921298e-09, -4.550470437668159e-09, -4.149580225403162e-09, -4.473544450143349e-04, -4.457176579072979e-04, -5.320072853099236e-09, -3.692743311680682e-09, -5.320072848671541e-09, -3.692743308024962e-09, -8.268271581584555e-02, -8.225037017014718e-02, -8.386112074061054e-02, -8.347138197829944e-02, -8.453661832144357e-02, -8.414169444060302e-02, -8.449767081576454e-02, -8.408944247244188e-02, -8.461577716576756e-02, -8.421517407389642e-02, -8.461577716576757e-02, -8.421517407389639e-02, -7.481063780435321e-02, -7.439808377484597e-02, -6.129007100021804e-02, -6.082995644241229e-02, -6.833956037393707e-02, -6.783022663994542e-02, -7.616839041908460e-02, -7.582090047763931e-02, -7.223763047869007e-02, -7.187855733889843e-02, -7.223763047869008e-02, -7.187855733889842e-02, -8.598296527179072e-02, -8.578596341463327e-02, -2.291157331554894e-02, -2.271122493794580e-02, -3.521026832554511e-02, -3.459151142428459e-02, -6.055417713619581e-02, -6.012270215058145e-02, -4.743610248008871e-02, -4.736964738058733e-02, -4.743610248008871e-02, -4.736964738058734e-02, -6.447415081922331e-02, -6.377176871273581e-02, -3.630202216910652e-05, -3.598556945941406e-05, -1.416731355726899e-04, -1.358789767187438e-04, -6.446928500076113e-02, -6.316078812880051e-02, -1.478358875354611e-03, -1.354656644769932e-03, -1.478358875354632e-03, -1.354656644769940e-03, -1.312227343890541e-07, -1.259925896548835e-07, -2.496590111455609e-11, -2.452161375745306e-11, -3.941996784177978e-10, -3.553745185521960e-10, -1.092590727313772e-03, -1.072517401964198e-03, -4.492950892734249e-09, -3.435296658500873e-09, -4.492950892967124e-09, -3.435296659659234e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.513107867272076e-10, 7.445462463371366e-10, 2.513095717047753e-10, 2.513184863861006e-10, 7.445684877068732e-10, 2.513182410405868e-10, 2.513394718281340e-10, 7.446306462519793e-10, 2.513355127372962e-10, 2.512127477794552e-10, 7.443016033277374e-10, 2.512197517405355e-10, 2.512684609323904e-10, 7.444791895023616e-10, 2.512959732323439e-10, 2.512684609323904e-10, 7.444791895023616e-10, 2.512959732323439e-10, 1.119949811897770e-06, 2.583726776174759e-06, 1.119622570457339e-06, 1.120225736721678e-06, 2.584390062327901e-06, 1.119876605876090e-06, 1.126300095241527e-06, 2.600225162210226e-06, 1.126009635278039e-06, 1.115606667340820e-06, 2.578355145477042e-06, 1.115268482238287e-06, 1.120585980566031e-06, 2.588011948868181e-06, 1.120219510899774e-06, 1.120585980566031e-06, 2.588011948868181e-06, 1.120219510899774e-06, 1.799723975443902e-03, 3.930276311163413e-03, 1.788476531805536e-03, 1.786317814880441e-03, 3.900314911229681e-03, 1.772560641977599e-03, 1.406895790509214e-03, 3.147952229785620e-03, 1.424482093624576e-03, 1.385520656890549e-03, 3.111654742219685e-03, 1.379049326077583e-03, 1.308817402761989e-03, 3.178327188317601e-03, 1.501838392720941e-03, 1.308817402761989e-03, 3.178327188317601e-03, 1.501838392720941e-03, 1.369682958688527e-01, 3.768302499220072e-01, 1.332631839728959e-01, 1.452349428909396e-01, 3.992828462556679e-01, 1.412344211928009e-01, 9.731306184566151e-04, 1.992922277769122e-03, 9.687594432840764e-04, 1.031140102741792e-01, 2.491237009779630e-01, 1.034978487402494e-01, 1.003815967860818e-01, 8.964244059648882e-02, 6.555507234108315e-01, 1.003815967860823e-01, 8.964244059648836e-02, 6.555507234108360e-01, 2.139925675566437e-02, -1.980728922731065e-02, 1.588340120206202e-02, 2.951493234754653e-02, -2.950222949269044e-02, 2.085455560991656e-02, 2.621891018656327e-02, 5.158353567644244e-02, 2.500169142059723e-02, 1.480179296436481e-03, 3.013203140924938e-03, 1.526113137747454e-03, 2.015946555751830e-03, 5.874448077045471e-03, 1.375176165566733e-03, 2.015946555038333e-03, 5.874448077143365e-03, 1.375176174260589e-03, 4.666644372459147e-07, 1.359183884879075e-06, 4.664924248007419e-07, 4.718799449393406e-07, 1.372868059923313e-06, 4.717669533683902e-07, 4.668805985639289e-07, 1.359860466489001e-06, 4.667453803223362e-07, 4.715275015121816e-07, 1.371934927386743e-06, 4.713559889670546e-07, 4.692886415756390e-07, 1.366069264539451e-06, 4.691701928331271e-07, 4.692886415756390e-07, 1.366069264539451e-06, 4.691701928331271e-07, 5.589651392620338e-06, 1.619564391772400e-05, 5.589332329936149e-06, 5.573981027522897e-06, 1.637542746104137e-05, 5.573299587406639e-06, 5.294996297968687e-06, 1.534545524490563e-05, 5.227590244058868e-06, 5.278735607190153e-06, 1.550198261813250e-05, 5.211478683135851e-06, 5.673434070523583e-06, 1.672864675386159e-05, 5.822913792236343e-06, 5.673434070523583e-06, 1.672864675386159e-05, 5.822913792236343e-06, 7.446377503069783e-03, 1.959014914537938e-02, 7.409490746398665e-03, 1.111249841286080e-02, 2.453481316502162e-02, 1.109857355289113e-02, 8.558180946020743e-03, 2.112827693937816e-02, 8.692698640020303e-03, 1.333573934034979e-02, 2.864570679910657e-02, 1.348351984078233e-02, 7.998989114336932e-03, 2.041081044619474e-02, 7.521348689566307e-03, 7.998989114336936e-03, 2.041081044619474e-02, 7.521348689566310e-03, 5.795614654378917e-02, 1.377916239919300e-01, 5.739715024404964e-02, 5.007951877947093e-02, 1.315046606837177e-01, 5.007684986792574e-02, 5.993824892438507e-02, 1.378144874569304e-01, 5.906047007772854e-02, 6.611278001396675e-05, 1.376810261375944e-04, 6.610382813459536e-05, 1.164051132685140e-01, 2.675071527793101e-01, 1.028759610482700e-01, 1.164051132685140e-01, 2.675071527793101e-01, 1.028759610482700e-01, 1.346317307173931e-03, 3.139922596285729e-03, 1.378461754854726e-03, 1.650743573098308e-03, 4.060853139896135e-03, 1.685609229746068e-03, 2.040351512703282e-02, 3.550033372917388e-02, 1.811810315745419e-02, 5.695279466916045e-02, 1.360886501990168e-01, 5.750272786241544e-02, 6.957642761805124e-03, 1.640190462568150e-02, 6.186972218268584e-03, 6.957642767026772e-03, 1.640190462324643e-02, 6.186972218562374e-03, 8.420173017757343e-02, 1.820415664349831e-01, 8.427156521323145e-02, 4.581977260863306e-02, 1.103375510126373e-01, 4.589852004674391e-02, 5.640635917969675e-02, 1.311810616242932e-01, 5.648347279325073e-02, 6.783056388441934e-02, 1.529104699396877e-01, 6.791825573725586e-02, 6.178294891647327e-02, 1.415054639844286e-01, 6.186636495633928e-02, 6.178294891647325e-02, 1.415054639844286e-01, 6.186636495633926e-02, 4.636041350210931e-02, 9.581390938444286e-02, 4.637983789443829e-02, 8.458786193445965e-03, 2.775552537414603e-02, 8.463714073385354e-03, 1.229738690215125e-02, 3.851059952719945e-02, 1.229449383476921e-02, 2.128427375559337e-02, 5.975965520659923e-02, 2.136120747308140e-02, 1.571867389239930e-02, 4.697279002070742e-02, 1.579136641152866e-02, 1.571867389239930e-02, 4.697279002070741e-02, 1.579136641152866e-02, 7.931743713390437e-03, 1.731591851314539e-02, 7.921309933589605e-03, 3.679645734931596e-02, 1.018059507192094e-01, 3.671600690674624e-02, 3.466147380901283e-02, 9.706087370458234e-02, 3.425663655128856e-02, 3.517311597465580e-02, 9.492000874282561e-02, 3.528501482488376e-02, 3.607656518009490e-02, 1.026537157187526e-01, 3.579801791917833e-02, 3.607656518009489e-02, 1.026537157187526e-01, 3.579801791917833e-02, 1.193236394570328e-02, 3.459323476940015e-02, 1.190656758557477e-02, 1.879462286968905e-02, 4.678000957569887e-02, 1.874253544639708e-02, 3.027180691088052e-02, 6.941815537149407e-02, 2.967255811983769e-02, 6.114182207314654e-02, 1.659692354417750e-01, 6.152868371748858e-02, 1.050258953178452e-01, 2.369902676133092e-01, 9.678093368860242e-02, 1.050258953178475e-01, 2.369902676133104e-01, 9.678093368860252e-02, 5.509160382273511e-03, 1.032364074332425e-02, 5.312475554467765e-03, 1.991188861723742e-03, 4.127744542771465e-03, 1.891830039854396e-03, 3.555557282540579e-03, 3.572477631382118e-03, 2.988456195807339e-03, 9.008180998083738e-02, 2.214414048333476e-01, 9.019042663273966e-02, 6.571720978079290e-03, 2.082699602387394e-02, 8.311687705945186e-03, 6.571721004818688e-03, 2.082699604290080e-02, 8.311687711640762e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.082570446343514e-05, -3.082570446343512e-05, -3.082727617726358e-05, -3.082727617726358e-05, -3.083433786046158e-05, -3.083433786046158e-05, -3.081111812976630e-05, -3.081111812976629e-05, -3.082326913764470e-05, -3.082326913764470e-05, -3.082326913764470e-05, -3.082326913764470e-05, -6.828483804053619e-05, -6.828483804053615e-05, -6.832428146610282e-05, -6.832428146610279e-05, -6.942247736653855e-05, -6.942247736653856e-05, -6.946161663155637e-05, -6.946161663155641e-05, -6.926285611045681e-05, -6.926285611045683e-05, -6.926285611045681e-05, -6.926285611045683e-05, -3.062957326547694e-04, -3.062957326547694e-04, -3.047621410136761e-04, -3.047621410136761e-04, -2.653288681227020e-04, -2.653288681227019e-04, -3.190338774403230e-04, -3.190338774403230e-04, -3.329401036662240e-04, -3.329401036662240e-04, -3.329401036662240e-04, -3.329401036662240e-04, -2.846774949879983e-03, -2.846774949879984e-03, -3.177982978002486e-03, -3.177982978002487e-03, -3.715426617560585e-05, -3.715426617560585e-05, -3.500029630964929e-04, -3.500029630964931e-04, -1.133937141744751e-03, -1.133937141744751e-03, -1.133937141744751e-03, -1.133937141744752e-03, -2.240023859781029e-09, -2.240023859781031e-09, -3.003809286891734e-09, -3.003809286891735e-09, -1.577912562816357e-06, -1.577912562816357e-06, -1.170336714709242e-10, -1.170336714709243e-10, -9.053717716059000e-10, -9.053717716059009e-10, -9.053717716313905e-10, -9.053717716313909e-10, -1.019832559025803e-03, -1.019832559025803e-03, -1.032794191778976e-03, -1.032794191778976e-03, -1.020671637717666e-03, -1.020671637717666e-03, -1.032102861086951e-03, -1.032102861086952e-03, -1.026248933796316e-03, -1.026248933796315e-03, -1.026248933796316e-03, -1.026248933796315e-03, -2.480258665040104e-04, -2.480258665040104e-04, -2.723476438282760e-04, -2.723476438282759e-04, -2.341555479606367e-04, -2.341555479606367e-04, -2.550334827680829e-04, -2.550334827680830e-04, -2.687095732905834e-04, -2.687095732905834e-04, -2.687095732905834e-04, -2.687095732905834e-04, -8.275395006798685e-03, -8.275395006798683e-03, -6.425230257563445e-03, -6.425230257563450e-03, -3.856977145714518e-03, -3.856977145714519e-03, -1.972696199920563e-03, -1.972696199920564e-03, -9.499609314684691e-03, -9.499609314684691e-03, -9.499609314684691e-03, -9.499609314684691e-03, -5.994650064329474e-05, -5.994650064329478e-05, -7.262973228462506e-04, -7.262973228462511e-04, -4.658038401145441e-05, -4.658038401145444e-05, -1.807868115993696e-04, -1.807868115993696e-04, -2.529875548063246e-04, -2.529875548063245e-04, -2.529875548063247e-04, -2.529875548063247e-04, -2.057567126730683e-11, -2.057567126730682e-11, -8.753416720191544e-11, -8.753416720191545e-11, -6.020971373249858e-10, -6.020971373249856e-10, -1.354748085223809e-05, -1.354748085223809e-05, -4.487783199975541e-10, -4.487783199975539e-10, -4.487783199975597e-10, -4.487783199975597e-10, -1.444286750425244e-01, -1.444286750425244e-01, -1.143106359110330e-01, -1.143106359110330e-01, -1.311126223562744e-01, -1.311126223562745e-01, -1.437137046418060e-01, -1.437137046418061e-01, -1.378156747615804e-01, -1.378156747615804e-01, -1.378156747615804e-01, -1.378156747615803e-01, -2.314111395553012e-02, -2.314111395553013e-02, -1.205516261520203e-02, -1.205516261520203e-02, -2.193477329010185e-02, -2.193477329010186e-02, -4.187073733131948e-02, -4.187073733131946e-02, -2.965067420824814e-02, -2.965067420824814e-02, -2.965067420824813e-02, -2.965067420824813e-02, -3.797008593681902e-03, -3.797008593681902e-03, -1.487967324189224e-03, -1.487967324189224e-03, -2.745389558432336e-03, -2.745389558432336e-03, -6.165092100679995e-03, -6.165092100679999e-03, -4.993588223010424e-03, -4.993588223010423e-03, -4.993588223010430e-03, -4.993588223010425e-03, -7.442706611224037e-03, -7.442706611224040e-03, -1.336236892389196e-06, -1.336236892389197e-06, -4.007938952646237e-06, -4.007938952646236e-06, -1.155952846698255e-02, -1.155952846698255e-02, -5.727014767580161e-05, -5.727014767580164e-05, -5.727014767579974e-05, -5.727014767579974e-05, -3.394898138038652e-09, -3.394898138038653e-09, -2.681519989850045e-13, -2.681519989850045e-13, -4.107838466108158e-11, -4.107838466108156e-11, -4.932284468554887e-05, -4.932284468554884e-05, -4.630000502100793e-10, -4.630000502100792e-10, -4.630000534579544e-10, -4.630000534579547e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
