
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504590432e-01, -1.645996352769430e-01, -1.646000385289871e-01, -8.574341556374354e-02, -5.749823806482533e-02, -3.149011333106565e-02, -3.244489702200197e-02, -1.659328910840419e-02, -1.668587692911410e-02, -1.664842275811790e-02, -1.665237757137296e-02, -3.266211524953040e-02, -6.701332647008379e-02, -3.236491669898538e-02, -6.815754827268023e-03, -1.647722000871607e-02, -6.628241523783371e-02, -7.157699728511771e-03, -9.727010821249531e-03, -1.948542700857369e-02, -1.076168418350371e-02, -1.144358929599909e-03, -1.860335989992703e-04, -1.253352940481992e-04, -2.057839515719771e-08, -1.553774388992519e-08, -1.602016004189543e-05, -1.212819792108890e-09, -5.029752860646864e-11, -5.029752859580535e-11, -6.946378470239341e-02, -3.520103128981097e-02, -3.512098861280918e-02, -3.519590424896624e-02, -8.846327278954350e-02, -6.462964488216325e-02, -3.150979083034883e-02, -3.240159970073526e-02, -1.355113289167687e-02, -1.401495990368889e-02, -4.799257393265420e-02, -3.234979697788491e-02, -3.628886377233866e-02, -2.584193503591949e-02, -1.720086132261766e-02, -2.076583167419203e-02, -3.498005967596664e-02, -2.160389136878577e-02, -2.430114238703502e-04, -6.100205393756080e-03, -7.322177543209104e-04, -2.492566536500663e-02, -2.526666044977436e-03, -2.526666044977443e-03, -1.618766453259361e-10, -2.033727137911975e-10, -2.183744306702603e-09, -1.742057432609950e-04, -1.495095922767476e-09, -1.495095920680387e-09, -2.952275832909159e-02, -2.865197239380552e-02, -6.383563580100113e-02, -5.183957572934658e-02, -6.385539257642651e-02, -5.150524242169199e-02, -5.267446199100707e-02, -4.544868292155222e-02, -3.820915800568920e-02, -2.510560012361059e-02, -2.341804927476862e-02, -4.088077660602771e-02, -5.527839996142370e-02, -1.162538810392935e-02, -1.433791074430578e-02, -2.354231240111612e-02, -2.207514597869189e-02, -1.947302228931283e-02, -1.601622089998246e-02, -1.432337785401933e-02, -1.570078873232218e-05, -3.022125226657170e-02, -1.671181115038019e-04, -1.671181115038116e-04, -5.037446550363285e-03, -4.644442743800442e-13, -1.374982125405463e-03, -2.268013163367492e-02, -2.344765153457697e-10, -1.181056748333026e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747369753468127e-01, -1.747373592471604e-01, -1.747369289286905e-01, -1.747375762850791e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.655739180880844e-01, -1.680348398864773e-01, -1.398056920487946e-01, -1.452446109392015e-01, -6.648168056149156e-02, -6.648109390377596e-02, -1.014125072694648e-01, -9.712550618960619e-02, -6.300473625546810e-02, -6.301271920880600e-02, -6.324739290977636e-02, -6.322466290050950e-02, -5.235405659293270e-02, -5.235323528826054e-02, -6.326645062087423e-02, -6.304185990582033e-02, -9.748012899006227e-02, -1.017053073296363e-01, -7.534022876475922e-02, -7.481054072999213e-02, -8.421591148240207e-02, -8.550182294385923e-02, -2.876201008810033e-02, -2.916377870774048e-02, -6.275459083086649e-02, -5.977310162546600e-02, -7.037457509512338e-02, -7.906556863981584e-02, -2.776427582408525e-02, -3.247530583802630e-02, -3.822083470090816e-02, -3.867855694704113e-02, -5.404491312953014e-02, -5.257680163424135e-02, -4.846716124922451e-02, -4.509901579945647e-02, -6.758957011126080e-03, -6.441456670875125e-03, -2.142323334136542e-04, -7.373911615602972e-03, 3.198569336791099e-05, -6.132132956858717e-03, -1.377274689779463e-07, -1.321353081880699e-07, -1.083727795978401e-07, -1.078435073255261e-07, -1.072412504469450e-04, -1.073547369919203e-04, -7.932647629603106e-09, -8.019226648220486e-09, -3.031186779185023e-10, -4.668257140633607e-10, -3.031186756548943e-10, -4.668257122170556e-10, -1.378398819343881e-01, -1.378766050284069e-01, -6.362600399261160e-02, -6.365105600247403e-02, -6.361711239916892e-02, -6.364113635873858e-02, -6.362718213242882e-02, -6.364866690900457e-02, -1.478795311648098e-01, -1.486448007823985e-01, -1.471682437677255e-01, -1.444328696803764e-01, -9.146684864665955e-02, -9.145119453951298e-02, -9.270961039344106e-02, -9.271944315478679e-02, -5.446521353080807e-02, -5.413300906886848e-02, -5.571198478069884e-02, -5.536301410838872e-02, -1.133699223563382e-01, -1.118096608105594e-01, -9.239463469013681e-02, -9.288927392397658e-02, -8.689226301174285e-02, -8.585078273742555e-02, -7.337073721800810e-02, -7.301236529532587e-02, -6.040748247821660e-02, -5.515229501627490e-02, -4.690993204029011e-02, -4.265858908752621e-02, -8.435194143646577e-02, -8.867711398805535e-02, -4.234598166827561e-02, -4.788526046817264e-02, -1.459688489709458e-03, -1.441259148826054e-03, -2.748353812450108e-02, -2.862762541455293e-02, -4.307153848931907e-03, -4.111112462134082e-03, -5.635772228986134e-02, -5.637512944099975e-02, -1.334164149004732e-02, -1.260044292568426e-02, -1.334164149004733e-02, -1.260044292568426e-02, -1.118192322843194e-09, -1.133123603381705e-09, -1.334472693257274e-09, -1.335192868755492e-09, -1.468223144099153e-08, -1.413810120339434e-08, -1.130687549659285e-03, -1.083757764557591e-03, -1.157596066964620e-08, -9.250064115005456e-09, -1.157596066563956e-08, -9.250064112173970e-09, -8.521397415101109e-02, -8.490056317355914e-02, -8.037175315122094e-02, -8.001896525235645e-02, -7.198832468635549e-02, -7.148872356177727e-02, -8.285531397481620e-02, -8.096870302110068e-02, -7.200798844943504e-02, -7.151058106231506e-02, -8.306016161495634e-02, -8.112172102431457e-02, -7.895699307341619e-02, -7.858194702179440e-02, -7.973195635777489e-02, -7.882773341286634e-02, -8.316690306397208e-02, -8.237868703404275e-02, -4.036711197088115e-02, -4.002777471447563e-02, -4.196635323318100e-02, -4.157321425287093e-02, -8.297697158299422e-02, -8.291374945571027e-02, -8.560575652293224e-02, -8.541693123390079e-02, -4.328107425710095e-02, -4.301962577368226e-02, -4.998009443033379e-02, -5.189172433813879e-02, -6.904204498463576e-02, -7.174889856834976e-02, -6.155451710717207e-02, -6.155412106006973e-02, -6.141442058729958e-02, -5.872222551347584e-02, -5.480198998857148e-02, -5.371144377264751e-02, -1.773472996354030e-02, -1.753120798266077e-02, -1.014457186150718e-04, -9.664001838799193e-05, -6.828231703682967e-02, -6.633400041544019e-02, -1.068254954809580e-03, -9.587943134040685e-04, -1.068254954809586e-03, -9.587943134040792e-04, -6.593851617928384e-03, -6.257235187311728e-03, -3.074193908130925e-12, -3.065062821354688e-12, -1.869567052566781e-03, -1.724808884064574e-03, -2.767194528635373e-02, -2.688551334493897e-02, -2.372921351656320e-09, -1.188644512007797e-09, -8.760525810996796e-08, -7.398467511371302e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161498703694948e-09, 1.632299740738990e-08, 8.161498703694948e-09, 8.161407659079791e-09, 1.632281531815958e-08, 8.161407659079791e-09, 8.160974813433972e-09, 1.632194962686794e-08, 8.160974813433972e-09, -1.310613358677532e-10, 1.762596892692287e-09, 8.718113008384933e-10, 6.064699608381237e-10, 1.212939921669025e-09, 5.697962501363976e-10, 2.123543211941420e-11, 2.886348330364558e-10, 2.121464059672443e-11, 1.181854496907662e-06, 2.474696166102359e-06, 1.237348083073744e-06, 3.504177804707903e-07, 1.111142558802082e-06, 3.505514533746065e-07, 3.545013257086548e-07, 1.123956050404369e-06, 3.540702306961594e-07, 1.492550939053040e-07, 7.116046304490789e-07, 1.492662491327305e-07, 3.548986789719173e-07, 1.119456637426617e-06, 3.509926293528598e-07, 1.248828876716323e-06, 2.497657719531690e-06, 1.192719649310570e-06, 8.392759910612413e-03, 1.678551982122483e-02, 8.392759910612413e-03, 1.678995585069887e-03, 5.492295169356214e-03, 2.734897532811934e-03, 2.036731130989199e-04, 6.794926184769716e-04, 2.064874510777595e-04, 1.329894174672615e-03, 2.736969970518762e-03, 1.368486213492040e-03, 9.137046179770458e-03, 1.827409235954092e-02, 9.137046179770458e-03, 1.876115759104425e-04, 7.167531111182963e-04, 2.408851031218785e-04, 4.498634621370002e-01, 8.989980408006227e-01, 4.328871944400412e-01, 5.863129365074111e-01, 1.738652417974584e+00, 8.647002595043455e-01, 2.841617840806763e-04, 5.762031620533838e-04, 2.881491843282818e-04, 5.861807693440303e-02, 1.477959766826370e-01, 5.307945274032794e-02, -1.443049346023360e-02, 5.132300428674073e-02, 1.494870956981764e-02, -1.539658312251774e-02, 4.804546451690248e-02, 2.372947198218003e-02, 3.221005985336420e-02, 6.503625725762692e-02, 3.217926827755460e-02, 2.159998610785355e-02, 4.319997221720374e-02, 2.103153312682778e-02, 9.362894596595570e-02, 1.872651568942081e-01, 9.199771761632801e-02, 8.503227431781757e-03, 1.718201979602088e-02, 8.504181291278510e-03, 7.967245098247790e-05, 1.593449015832973e-04, -8.105265731961396e-04, 7.967245124296153e-05, 1.593449030231180e-04, -8.105265698696914e-04, 7.293053828933074e-07, 1.588772568673733e-06, 7.292245561011399e-07, 5.620815220443046e-09, 4.413227142305882e-07, 5.414248063776147e-09, 5.923262261467820e-09, 4.389017744365937e-07, 5.705625440970705e-09, 5.664175790467213e-09, 4.411698452902710e-07, 5.409047371759187e-09, 8.081448480301585e-07, 2.188173993440415e-06, 1.077036982774142e-06, 9.285015472089260e-07, 1.988427177727826e-06, -1.101150936808349e-07, 1.302389772137225e-05, 2.734658898610364e-05, 1.301792638158081e-05, 1.321493454493150e-05, 2.779488046659292e-05, 1.320981704864630e-05, 4.267178662666525e-06, 1.319561166168233e-05, 4.213050924991764e-06, 4.396023115710146e-06, 1.365819958863442e-05, 4.339540715731756e-06, 2.805444578896705e-05, 5.646613425068023e-05, 1.388381106385946e-05, 1.321077692733097e-05, 2.780582946571092e-05, 1.322689658963291e-05, 1.063463310038826e-02, 2.305750902644350e-02, 4.228338469444643e-03, 8.154485462640346e-03, 2.486578622187127e-02, 7.989597717510019e-03, 4.226540932683075e-03, 1.350944738395658e-02, 3.822284351932487e-03, 5.274388580226869e-04, 8.645146708013716e-03, 3.680139019908166e-04, 1.053263944226902e-02, 2.337955289370491e-02, 2.414464883213977e-03, 3.300062386539838e-04, 7.158487052413154e-03, 1.570824609985056e-04, 2.912697119924324e-02, 7.737574341823182e-02, 2.908906514639144e-02, 2.087976727316880e-01, 4.175908078927771e-01, 2.049281875998010e-01, 2.501887101340677e-01, 5.048013467302069e-01, 2.498431585264337e-01, 2.464335530359819e-06, 2.825312174505517e-05, 2.425021845713364e-06, 4.793918176103839e-01, 9.674219223975490e-01, 4.759516364749076e-01, 4.793918176103841e-01, 9.674219223975493e-01, 4.759516364749076e-01, 2.154476100803246e-03, 4.308952200887253e-03, 2.112327757918135e-03, 5.448522281312436e-04, 1.699704950413524e-03, 5.914556964224536e-04, 9.775898765881433e-02, 1.973973873299129e-01, 9.751356759647799e-02, 2.660825135204932e-01, 5.364407642408969e-01, 2.682303556581214e-01, 2.307436092005585e-02, 4.633268670546072e-02, 2.230569604247377e-02, 2.307436092060912e-02, 4.633268670866478e-02, 2.230569604268489e-02, 1.029203969149950e-01, 2.380506111565691e-01, 1.030400946321160e-01, 4.466339797683138e-02, 1.143565739044551e-01, 4.474186157111072e-02, 1.427086981357564e-02, 2.854173962715128e-02, 1.427086981357564e-02, 5.736027636022245e-02, 1.285780132931867e-01, 5.999535750721472e-02, 1.422339161095589e-02, 2.844678322191177e-02, 1.422339161095589e-02, 5.181485417279008e-02, 1.175306505715685e-01, 5.463150922965499e-02, 7.362352341917126e-02, 1.574543313290472e-01, 7.364470182933393e-02, 2.242286403942769e-02, 4.559813099781893e-02, 1.930518945122603e-02, 2.214799318047063e-02, 4.832221330671792e-02, 1.275835312709969e-02, -1.654616468002141e-03, 1.670966783895140e-02, -1.570306985445611e-03, -6.405348584616437e-04, 1.571525602018663e-02, -6.006371582033282e-04, 2.412155097518513e-02, 5.296556289012654e-02, 1.603864208894602e-02, 8.285043322095908e-03, 1.699689142632618e-02, 7.387052596406755e-03, 1.278923561589137e-01, 2.627772824569618e-01, 1.278866924130142e-01, 1.025596271624808e-01, 2.051140154662288e-01, 9.886622161238186e-02, 6.340896272367790e-03, 1.330435190560481e-01, 6.291997245779024e-02, 6.962320118487964e-02, 1.470706592903748e-01, 6.955850790842363e-02, 8.333235484472183e-02, 1.745793761554067e-01, 8.728968995442629e-02, 8.459023836580547e-03, 2.814543965808987e-02, 8.210244472110929e-03, 1.347260653707346e+03, 2.694521307414693e+03, 1.347260653707346e+03, 1.784525617214951e-02, 4.012928208428249e-02, 1.708501225943351e-02, 7.505266328291683e-02, 1.627147296678508e-01, 7.346795648627472e-02, 6.028873390102370e-02, 1.400637508267096e-01, 5.238722069412916e-02, 6.028873390102538e-02, 1.400637508267132e-01, 5.238722069413018e-02, 3.239757630393143e+05, 6.479515260786286e+05, 3.239757630393143e+05, 4.936341657879249e-05, 2.769889719838810e-04, 4.979296739194829e-05, 1.275483186190791e+08, 2.550966372381582e+08, 1.275483186190791e+08, 7.983167480935052e+01, 1.596633496187010e+02, 7.983167480935052e+01, 2.470155802675056e-03, 7.330441306053678e-03, 9.556197905785512e-04, 7.406425968408846e-01, 1.481375340897850e+00, 7.406876704488626e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.765207729407123e-29, -6.765207729407120e-29, -6.765500784019903e-109, -6.765500784019903e-109, -6.766446925126410e-109, -6.766446925126407e-109, -6.717005116221786e-06, -6.717005116221783e-06, -2.304152924045409e-05, -2.304152924045409e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.447940514013358e-04, -1.447940514013357e-04, -1.344962370736466e-04, -1.344962370736466e-04, -1.366782321112880e-04, -1.366782321112880e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.358959091173172e-04, -1.358959091173173e-04, -1.453078982274461e-04, -1.453078982274462e-04, -1.933964863406183e-29, -1.933964863406183e-29, -3.589255018992292e-04, -3.589255018992292e-04, 0.000000000000000e+00, 0.000000000000000e+00, -8.218825836292425e-04, -8.218825836292425e-04, -5.466573568119792e-84, -5.466573568119792e-84, 0.000000000000000e+00, 0.000000000000000e+00, -5.305109026988066e-03, -5.305109026988069e-03, -2.164223183972727e-03, -2.164223183972728e-03, -2.195351209370230e-04, -2.195351209370230e-04, -3.632399059279847e-04, -3.632399059279849e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.721748354255981e-10, -5.721748354255985e-10, -9.354359898736817e-09, -9.354359898736820e-09, -6.034486494723170e-06, -6.034486494723170e-06, -2.928062823171258e-11, -2.928062823171258e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.445169317496505e-04, -3.445169317496504e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.428149616470742e-04, -1.428149616470742e-04, -5.659474543696096e-04, -5.659474543696093e-04, -8.923115351298042e-05, -8.923115351298042e-05, -9.703058831097014e-05, -9.703058831097010e-05, -2.461168162200390e-04, -2.461168162200390e-04, -2.662358590714360e-04, -2.662358590714361e-04, -1.135668141096264e-04, -1.135668141096264e-04, -9.662938202527011e-05, -9.662938202527011e-05, -8.235039075458214e-03, -8.235039075458210e-03, -3.544729321441285e-02, -3.544729321441289e-02, -7.763737308809285e-03, -7.763737308809286e-03, 0.000000000000000e+00, 0.000000000000000e+00, -1.090314644634128e-02, -1.090314644634128e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.810300203203045e-03, -1.810300203203047e-03, -1.244063221660776e-05, -1.244063221660777e-05, 0.000000000000000e+00, 0.000000000000000e+00, -7.200216881121657e-05, -7.200216881121654e-05, -7.200216881121607e-05, -7.200216881121606e-05, -6.107541109001074e-11, -6.107541109001072e-11, 0.000000000000000e+00, 0.000000000000000e+00, -1.520382233400927e-10, -1.520382233400927e-10, -5.553162280639875e-05, -5.553162280639877e-05, -1.850888127138656e-10, -1.850888127138655e-10, -1.850888127138657e-10, -1.850888127138657e-10, -3.562716788870298e-01, -3.562716788870299e-01, -1.562694548024139e-01, -1.562694548024139e-01, -4.727159533452378e-79, -4.727159533452382e-79, -8.494389433976560e-02, -8.494389433976565e-02, -6.146817287141912e-79, -6.146817287141909e-79, -7.595884916253713e-02, -7.595884916253709e-02, -9.764247995290071e-02, -9.764247995290073e-02, -2.018821565614884e-03, -2.018821565614885e-03, -1.212248441470310e-02, -1.212248441470310e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.551575891866516e-02, -1.551575891866516e-02, -2.919784398344760e-03, -2.919784398344762e-03, -4.737104710033572e-04, -4.737104710033570e-04, -4.412355007208347e-03, -4.412355007208347e-03, -7.913613330363542e-03, -7.913613330363549e-03, -1.730103808968445e-03, -1.730103808968444e-03, -6.630510714640389e-03, -6.630510714640384e-03, -9.069626283733343e-03, -9.069626283733347e-03, -1.077582105048084e-66, -1.077582105048085e-66, 0.000000000000000e+00, 0.000000000000000e+00, -5.206125268728969e-03, -5.206125268728969e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.938632194102833e-60, -4.938632194102836e-60, 0.000000000000000e+00, 0.000000000000000e+00, -9.074614822244733e-52, -9.074614822244728e-52, -7.406866338411841e-70, -7.406866338411837e-70, 0.000000000000000e+00, 0.000000000000000e+00, -1.478248004792839e-09, -1.478248004792840e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
