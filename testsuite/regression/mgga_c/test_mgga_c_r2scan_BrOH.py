
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.299488887116204e-02, -9.299273356341090e-02, -9.298334743588364e-02, -9.301841285705068e-02, -9.299375321534736e-02, -9.299375321534736e-02, -1.246114816952615e-01, -1.246090848027861e-01, -1.245349183077630e-01, -1.245670310664434e-01, -1.246109743922851e-01, -2.343437174083064e-02, -8.181978215832444e-02, -1.891818958679538e-02, -1.836795476876870e-02, -1.860532470558260e-02, -1.893187964525997e-02, -1.893187964525997e-02, -1.479135704355117e-02, -1.496592380378953e-02, -9.310229683069865e-02, -1.046730060528616e-02, -1.484210654047586e-02, -1.484210654047586e-02, -8.248107780317338e-04, -8.749289444310513e-04, -3.971779670309535e-03, -2.705936573362940e-04, -8.681144847784894e-04, -8.681144847784938e-04, -2.638633312158743e-02, -2.639441810671565e-02, -2.638722752804926e-02, -5.519878999111456e-02, -2.639039073068604e-02, -2.639039073068604e-02, -1.063826357819219e-01, -1.065945116872671e-01, -1.063219597134789e-01, -1.064556476164132e-01, -1.066432249631798e-01, -2.246893159693126e-02, -2.182829388537657e-02, -2.296402739657464e-02, -2.119449019001544e-02, -2.206978729462794e-02, -2.225745357423935e-02, -5.605481243149788e-02, -3.608585790739129e-02, -1.335351490502833e-02, -3.577290957913078e-02, -2.439087911411654e-02, -9.679402054113091e-03, -9.679402054113091e-03, -3.884280442416109e-03, -3.185456043826677e-04, -2.540181244366462e-04, -2.696991586304225e-02, -4.019442599929010e-03, -2.878122657884700e-04, -2.389740447200197e-02, -2.365956925096099e-02, -2.797104273563956e-02, -2.381014423742728e-02, -2.377707538125549e-02, -2.377707538125549e-02, -2.372210732818876e-02, -2.130843028733496e-02, -2.205129934369708e-02, -2.272006254117529e-02, -2.238067837445333e-02, -4.478797281065876e-02, -2.282833382343176e-02, -5.354322181455747e-02, -1.684992687133087e-02, -5.723732859749446e-02, -1.808844494365365e-02, -1.808844494365366e-02, -6.316410982950892e-02, -3.631507741046516e-03, -4.877709609922076e-03, -1.933757417157387e-02, -3.178681229751994e-02, -7.256116481917241e-03, -8.974691554280807e-04, -5.157757619575401e-05, -1.410265895458335e-04, -7.116021843593067e-03, -2.398333326944940e-04, -2.398333326944959e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.749797949068209e-02, 3.749639971949991e-02, 3.748952784474207e-02, 3.751522253349913e-02, 3.749714704388099e-02, 3.749714704388099e-02, -1.178372345341762e-01, -1.177855242045263e-01, -1.162077190843602e-01, -1.168262078693245e-01, -1.178230180047666e-01, -4.627225398690346e-02, -6.746973711956067e-02, -4.566172475244228e-02, -4.621231551229506e-02, -4.595215628782535e-02, -4.564720361468572e-02, -4.564720361468572e-02, -3.684789787387988e-02, -3.673640872635228e-02, -8.655129960767939e-02, -4.094429862764766e-02, -3.681813315651164e-02, -3.681813315651164e-02, -1.061794550581869e-01, -1.063773098500737e-01, -6.563118000205959e-02, -7.290935830863594e-02, -1.058167132859546e-01, -1.058167132859576e-01, -3.785743903725258e-02, -3.781348518632397e-02, -3.785258196600318e-02, 3.393815857755805e-04, -3.783540962347978e-02, -3.783540962347978e-02, -1.150734024518502e-01, -1.177430062833888e-01, -1.131337512881977e-01, -1.163055854849168e-01, -1.180181293965866e-01, -4.620813425426520e-02, -3.781924804852770e-02, -3.448016229052377e-02, -3.911200883279742e-02, -3.678997206081393e-02, -3.681011927168515e-02, -8.048969701090735e-03, -4.243315850953478e-02, -3.968195553717278e-02, -4.202839632516762e-02, -4.104071018197972e-02, -4.017336462103695e-02, -4.017336462103695e-02, -4.979917665639668e-03, -8.035367765121684e-02, -6.806817615989244e-02, -3.263455246157913e-02, -5.150091534201453e-03, -7.532371827184933e-02, -2.734769971525632e-02, -2.914321430486285e-02, -2.236623494482946e-02, -2.804031242828015e-02, -2.829230798630759e-02, -2.829230798630759e-02, -2.792338653677772e-02, -3.744955582881503e-02, -3.539216658942931e-02, -3.300917011921651e-02, -3.429393481784204e-02, -6.990205778800732e-03, -3.589542291834201e-02, -5.212906936276361e-02, -3.942280998259467e-02, -6.545378413669310e-02, -3.875214591581875e-02, -3.875214591581874e-02, -5.838048571006219e-02, -7.080029942789862e-02, -5.840514794578640e-02, -3.672062223142212e-02, -3.776684213729770e-02, -4.385969622157192e-02, -1.177324513106411e-01, -2.009622566494268e-02, -4.590375200343481e-02, -4.329665956848720e-02, -6.680614627344397e-02, -6.680614627343869e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.378296737154362e-09, 4.378121968931388e-09, 4.377322508300263e-09, 4.380171499812557e-09, 4.378204909304843e-09, 4.378204909304843e-09, 1.329913732595952e-05, 1.329929746201283e-05, 1.330213714305889e-05, 1.329682942731203e-05, 1.329893007912347e-05, 3.370819698504345e-07, 1.046119590861678e-02, 6.811258737265490e-04, 7.031619133201159e-04, 7.073743055053445e-04, 6.806725900612842e-04, 6.806725900612842e-04, 3.010051723371094e-01, 2.909413161081553e-01, 5.457814646977924e-03, 6.839677492323216e-01, 2.978097945311972e-01, 2.978097945311972e-01, 1.222667993733650e+04, 1.061399147917821e+04, 5.461579910834112e+01, 4.541303007607299e+04, 1.114290527923265e+04, 1.114290527923297e+04, 1.025251597300758e-07, 1.027960199753626e-07, 1.025555029700965e-07, 1.049372032655936e-06, 1.026602121152353e-07, 1.026602121152353e-07, 1.290468100271939e-04, 1.251120081142114e-04, 1.308555574713423e-04, 1.275032901697863e-04, 1.243911935532501e-04, 5.032048140394639e-06, 2.742554990486299e-03, 2.418912685232756e-03, 3.097874369072345e-03, 3.099083639918167e-03, 2.510133609845062e-03, 1.627905286014892e-02, 1.541753846881217e+01, 2.118635824035725e-01, 1.612180426112334e+01, 9.446231078675160e-06, 1.394484810339205e+00, 1.394484810339205e+00, -1.900437896413678e+05, 4.195072469533991e+04, 1.674057753844263e+05, 8.204405419937166e+01, -1.284287860945683e+05, 5.771543690405683e+04, 4.647207983389507e-03, 4.327878695127183e-03, 7.560930989044016e-03, 4.525338320645240e-03, 4.480559128248371e-03, 4.480559128248371e-03, 5.212246243604624e-03, 5.234530502163135e-03, 5.048768324429644e-03, 4.995274647614564e-03, 5.004261353983901e-03, 2.444586227299688e-02, 1.785031610992648e-03, 6.200469985312383e-01, 5.035097415567176e-02, 1.016150365491749e-01, 3.389437619463418e-02, 3.389437619463418e-02, 4.190223228797164e-02, 7.258201373948361e+01, 2.168690214806372e+01, 3.161666929568187e-02, 3.223479060999709e+01, 5.468619658987508e+00, 5.262035306438997e+03, 5.385288675868304e+05, 2.514311958698673e+05, 6.821604638876059e+00, 9.890026828662232e+04, 9.890026828661488e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.936220860604429e-05, -7.936167968086213e-05, -7.935908413167265e-05, -7.936772763968778e-05, -7.936193188890697e-05, -7.936193188890697e-05, -1.340193286333297e-04, -1.344189729305077e-04, -1.466633819205906e-04, -1.418502130410919e-04, -1.341291512993201e-04, -1.897913402785109e-04, -2.329454703791765e-03, -2.675318879618527e-03, -2.553395755278440e-03, -2.626575273113439e-03, -2.678649806223262e-03, -2.678649806223262e-03, -2.439412546814330e-02, -2.449402085232493e-02, -7.966188100225430e-04, -2.258445582068325e-02, -2.441411763523808e-02, -2.441411763523808e-02, -2.045844160614531e-01, -2.040773384497804e-01, -6.943388509201320e-02, -8.398469706470144e-02, -2.076196031657762e-01, -2.076196031657822e-01, -2.047989659181996e-04, -2.055068041355684e-04, -2.048774131979935e-04, -8.487979771820196e-04, -2.051529862363572e-04, -2.051529862363572e-04, -3.669426414424342e-05, 1.067483768562260e-05, -7.192032293764366e-05, -1.458721284262497e-05, 1.521546085329815e-05, -5.143751969579347e-04, -7.225197505756361e-03, -8.314346094072200e-03, -6.927058888151354e-03, -7.946419512096525e-03, -7.446336159079151e-03, -2.588740011936461e-02, -5.670297229341916e-04, -1.796034038677954e-02, -6.430162939107844e-04, -9.126067379287329e-04, -2.848053307862902e-02, -2.848053307862902e-02, -2.537877814253211e-07, -1.039543369728541e-01, -1.746721012940311e-01, -1.574355014978571e-04, -2.898185109503221e-07, -1.081902328949285e-01, -1.411528525091990e-02, -1.283961653458201e-02, -2.016981473553989e-02, -1.362755420621752e-02, -1.344877487853644e-02, -1.344877487853644e-02, -1.430432576572596e-02, -8.937339129020269e-03, -9.922235203694148e-03, -1.116315482333672e-02, -1.047603781648859e-02, -3.507944041613592e-02, -7.039417549779704e-03, -6.013305386370077e-03, -1.381173135675336e-02, -1.728381874054939e-05, -1.340183331933904e-02, -1.340183331933903e-02, -6.289894039069126e-03, -7.352594063911294e-02, -5.392211468680915e-02, -1.528221459285196e-02, -5.424902503094878e-04, -4.012299169089545e-02, -1.417446985119570e-01, -2.739591027458003e-02, -8.766998179627097e-02, -4.348593673922688e-02, -1.138081306067353e-01, -1.138081306067262e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
