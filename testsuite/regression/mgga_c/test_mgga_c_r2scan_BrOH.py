
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.731410809960042e-02, -2.731412236081616e-02, -2.731374496005906e-02, -2.731348816635189e-02, -2.731411971900845e-02, -2.731411971900845e-02, -4.821642555414154e-02, -4.821257424074710e-02, -4.808236419189469e-02, -4.793766638580885e-02, -4.821662580323104e-02, -4.821662580323104e-02, -4.039223122845346e-02, -4.024602063599471e-02, -3.645183564860488e-02, -3.645107936336658e-02, -4.033911489765590e-02, -4.033911489765590e-02, -1.771365810602882e-02, -1.830030346432358e-02, -5.078126328075833e-02, -1.634407900065607e-02, -1.793341107352138e-02, -1.793341107352138e-02, -1.333009936417530e-03, -1.414336053170347e-03, -5.828105774220145e-03, -5.335377242059300e-04, -1.399504991243616e-03, -1.399504991243616e-03, -2.644917985796595e-02, -2.645673243415352e-02, -2.644921927615745e-02, -2.645513367091974e-02, -2.645404332138128e-02, -2.645404332138128e-02, -2.530431780658350e-02, -2.491774623740347e-02, -2.489973835202341e-02, -2.459481175157709e-02, -2.555993656996756e-02, -2.555993656996756e-02, -3.034670243241700e-02, -3.479256105270371e-02, -3.557360377488885e-02, -4.071286094115117e-02, -2.872672108576946e-02, -2.872672108576946e-02, -1.181165438055647e-02, -1.594700198508115e-02, -1.192190539968849e-02, -5.576737886525268e-02, -1.339222490932510e-02, -1.339222490932510e-02, -5.132679534533235e-04, -6.074162966532615e-04, -4.809521748171269e-04, -8.202782400179562e-03, -5.679853722966186e-04, -5.679853722966186e-04, -2.506337080542424e-02, -2.469006571444752e-02, -2.482097276291787e-02, -2.492420104795285e-02, -2.487281930180771e-02, -2.487281930180771e-02, -2.615336116937296e-02, -2.206584621773240e-02, -2.316967974700158e-02, -2.425414457086078e-02, -2.376642799272945e-02, -2.376642799272945e-02, -3.882802426867027e-02, -1.668240709053748e-02, -2.023486766343285e-02, -2.825330750516177e-02, -2.305617152443587e-02, -2.305617152443588e-02, -2.574920176523185e-02, -5.222234710147718e-03, -7.141957594487978e-03, -2.949886901469908e-02, -1.038859685517303e-02, -1.038859685517303e-02, -1.581841125450614e-03, -1.194021842768787e-04, -2.755349259798533e-04, -1.027593140019232e-02, -4.848181333979019e-04, -4.848181333978951e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.171457202842158e-02, -4.171436456334789e-02, -4.171309010488343e-02, -4.171644466502571e-02, -4.171446617127887e-02, -4.171446617127887e-02, -6.891167829004365e-02, -6.889908697169302e-02, -6.851187362553991e-02, -6.851128623383897e-02, -6.890920377062777e-02, -6.890920377062777e-02, -7.293464208153501e-02, -7.268108998822642e-02, -6.676119922526058e-02, -6.890357807276359e-02, -7.284639809664900e-02, -7.284639809664900e-02, -4.856054669698865e-02, -4.854619102387809e-02, -8.867289813194663e-02, -3.155399519097043e-02, -4.863462955756479e-02, -4.863462955756479e-02, -4.131249031591793e-03, -3.765072849507915e-03, -1.139407611203387e-02, -1.027101991291562e-03, -4.099976262947155e-03, -4.099976262947108e-03, -3.788254447617174e-02, -3.783793583926447e-02, -3.787729865521110e-02, -3.784266224141099e-02, -3.786060861280251e-02, -3.786060861280251e-02, -5.511961683678768e-02, -5.341058242076435e-02, -5.452461064977527e-02, -5.310417139557227e-02, -5.467018784549993e-02, -5.467018784549993e-02, -4.116202790803716e-02, -2.557641367784257e-02, -4.472938381243405e-02, -2.993542026809634e-02, -3.878550699394361e-02, -3.878550699394361e-02, -2.368487110628590e-02, -5.541901011160085e-02, -2.399119978268787e-02, -3.045926117742458e-02, -2.842273932009992e-02, -2.842273932009992e-02, -9.921951864678496e-04, -1.168541293553039e-03, -9.387028832565198e-04, -1.547887395589798e-02, -1.093519851234631e-03, -1.093519851234631e-03, -2.589089137655006e-02, -2.829187188801688e-02, -2.748786605150619e-02, -2.682404908044560e-02, -2.716056378267799e-02, -2.716056378267800e-02, -2.473160934756947e-02, -3.850869449752189e-02, -3.619772151416894e-02, -3.312071912270956e-02, -3.484286588533019e-02, -3.484286588533019e-02, -2.543511842382211e-02, -4.826861616307847e-02, -5.100763067218814e-02, -4.821029830187465e-02, -4.932070918217844e-02, -4.932070918217845e-02, -4.583502644714751e-02, -1.107191845100056e-02, -1.386418689873079e-02, -4.297222206533217e-02, -2.136657776589981e-02, -2.136657776589979e-02, -3.002241185376403e-03, -2.334995428972384e-04, -5.456903276751333e-04, -2.083447458032445e-02, -9.357608282266425e-04, -9.357608282266363e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.499550757399523e-11, 8.499540117320720e-11, 8.498900052594465e-11, 8.499057046123311e-11, 8.499550474376194e-11, 8.499550474376194e-11, 1.380163150284930e-06, 1.380416340847138e-06, 1.387289628840137e-06, 1.378266327743252e-06, 1.380238488094177e-06, 1.380238488094177e-06, 1.295996351473319e-03, 1.289932451812452e-03, 1.107139052935497e-03, 9.399044165172259e-04, 1.293640395063325e-03, 1.293640395063325e-03, 5.854435022031999e-01, 5.812332046581362e-01, 9.012882743266032e-04, 2.774948296544614e-01, 5.861804319750389e-01, 5.861804319750389e-01, 2.335433942936669e+02, 1.516985859328681e+02, 2.352693685517299e+00, 1.224973693099090e+02, 1.990819091515228e+02, 1.990819091515174e+02, 1.034037189555018e-07, 1.036695967906067e-07, 1.034223315953285e-07, 1.036294849324863e-07, 1.035513607692413e-07, 1.035513607692413e-07, 8.320379256118050e-06, 7.679953276125406e-06, 7.994224489631332e-06, 7.479403745013256e-06, 8.296963544537798e-06, 8.296963544537798e-06, 7.054462910975569e-03, 7.685719761729445e-03, 1.007944569302665e-02, 1.297290169067379e-02, 5.578192291010710e-03, 5.578192291010710e-03, 4.905784680241023e-01, 4.070533814294979e-01, 5.710276133473969e-01, 6.296063513783394e-05, 5.503215281630498e-01, 5.503215281630498e-01, 1.389077099635887e+02, 1.081758340519088e+02, 3.691245958624846e+02, 1.043868217809474e+00, 1.613183920235365e+02, 1.613183920235363e+02, 5.457611218177393e-03, 5.023849287709159e-03, 5.169712380783578e-03, 5.289130012912282e-03, 5.228896464422577e-03, 5.228896464422577e-03, 7.224854930647815e-03, 5.996267895129574e-03, 6.072922423637370e-03, 6.341753613863604e-03, 6.240755024355549e-03, 6.240755024355550e-03, 6.903745603204134e-03, 1.430876267859498e-01, 9.828533565300500e-02, 5.551809305098830e-02, 7.283504421343154e-02, 7.283504421343161e-02, 1.548864089308528e-02, 3.517060903800342e+00, 1.364234220858426e+00, 8.741540584092418e-02, 1.123952733280137e+00, 1.123952733280133e+00, 2.628391658989906e+01, 1.333561576103274e+03, 4.846232767594004e+02, 1.326021738246832e+00, 2.704941158611011e+02, 2.704941158611032e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.128745328006754e-05, -1.128753871352375e-05, -1.128733536780465e-05, -1.128592221583050e-05, -1.128750355452017e-05, -1.128750355452017e-05, -4.990613388843758e-04, -4.992591175541340e-04, -5.051881766191373e-04, -5.036176361713101e-04, -4.991061869751312e-04, -4.991061869751312e-04, -7.133372111865142e-04, -7.258020613463803e-04, -8.768103695790407e-04, -2.749755484868339e-04, -7.170302051351412e-04, -7.170302051351412e-04, -4.848594000759911e-02, -4.969734764929382e-02, -4.977855463814267e-04, -2.895584115380045e-03, -4.899327095973321e-02, -4.899327095973321e-02, -3.204303119876635e-03, -2.174171848870500e-03, -8.634338200511012e-04, -1.489130823736116e-06, -2.957537504205939e-03, -2.957537504205840e-03, -2.060815540295014e-04, -2.067817656750549e-04, -2.061428323948150e-04, -2.066877465359898e-04, -2.064537798604649e-04, -2.064537798604649e-04, -8.187887558951483e-04, -7.734562748403328e-04, -7.820125353518082e-04, -7.447906105455859e-04, -8.356336066402115e-04, -8.356336066402115e-04, -1.658712979728984e-02, -2.124584840962896e-02, -1.822672651081461e-02, -2.394270682116006e-02, -1.504121561958019e-02, -1.504121561958019e-02, -2.849920273929001e-03, -3.548993295270429e-02, -3.306516182415161e-03, -3.433892761058146e-03, -6.746740232601246e-03, -6.746740232601246e-03, -7.049936473095277e-06, -3.346629946120929e-06, -2.931378306915879e-05, -3.266719138824134e-04, -2.000944352918571e-06, -2.000944352918564e-06, -1.595078914464954e-02, -1.441475134143028e-02, -1.493568598479404e-02, -1.535975861623381e-02, -1.514578474015611e-02, -1.514578474015611e-02, -1.845535363804216e-02, -1.013982157627296e-02, -1.169763929061471e-02, -1.365491484128687e-02, -1.269846207216077e-02, -1.269846207216077e-02, -2.053965297904459e-02, -2.434133826785015e-02, -2.730009220639460e-02, -2.860834098322585e-02, -2.831044585094592e-02, -2.831044585094594e-02, -1.844839913659786e-02, -1.850503882233061e-03, -9.050162306654568e-04, -3.709627752277198e-02, -4.101818207915857e-03, -4.101818207915825e-03, -7.865293999543269e-06, -2.069416753180530e-07, -2.223050424997273e-05, -3.874322422813020e-03, -1.828895780781982e-06, -1.828895780781898e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
