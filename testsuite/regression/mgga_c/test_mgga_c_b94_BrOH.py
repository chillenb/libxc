
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_b94_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.177139798747341e-02, -7.177154357399337e-02, -7.177128025664489e-02, -7.176887799886153e-02, -7.177148307982684e-02, -7.177148307982684e-02, -5.013168595081978e-02, -5.013171060370769e-02, -5.012549152556496e-02, -5.000888776807109e-02, -5.013261277817847e-02, -5.013261277817847e-02, -3.254566232216398e-02, -3.239557412191784e-02, -2.832036751455207e-02, -2.802281592868085e-02, -3.249258366728812e-02, -3.249258366728812e-02, -8.946546811370259e-03, -9.360310421300391e-03, -5.105138453030417e-02, -6.079544995514217e-03, -9.083520299680372e-03, -9.083520299680372e-03, -2.223846308206106e-05, -2.566481520064152e-05, -6.440208350815737e-04, -1.276769981108248e-05, -2.492385251932200e-05, -2.492385251932205e-05, -8.646925603645307e-03, -2.263495743709575e-02, -1.136685854984597e-01, -6.741505448475500e-03, -8.081982084140540e-02, -3.016098894656712e-02, -1.091852604845529e-01, -1.841609609855172e-02, -2.546629165934573e-02, -2.519364594640027e-02, -2.626549562751651e-02, -3.735509788016145e-02, -3.911879511585368e-03, -9.691360177331182e-03, -5.216800936480687e-03, -3.059060960580103e-02, -2.544535829079956e-02, -2.126336652086074e-02, -7.745640822368902e-02, -2.189522875541404e-03, -7.483004851141475e-02, -3.996618016072958e-02, -4.591696709510455e-03, -6.590987074426144e-03, -7.336786467990775e-07, -5.433096059921467e-10, -4.425155309805780e-01, -1.645683151386639e-01, -3.614374808608191e-06, -1.752661642956690e+00, -4.028375020328213e-07, -6.856623017567536e-02, -6.863701839308972e-02, -9.510674895269962e-05, -6.866335154305676e-02, -1.546202994686006e-08, -6.921959792483789e-02, -2.173132298233514e-02, -5.682133488205702e-03, -5.045288863578515e-02, -1.916460502107850e-02, -3.209532704964815e-03, -4.227863512332218e-03, -4.524375347005922e-02, -5.429997979180296e-02, -6.706450733418803e-02, -9.204827794766165e-03, -1.201537274515588e-02, -2.121608260089492e-02, -9.392363432740869e-05, -7.746058624648147e-04, -2.118950456276106e-02, -6.508858211258248e-02, -2.795528421482893e-03, -7.817925168218574e-01, -6.606488236129169e-09, -6.344748450949372e-01, -5.851170691560610e-02, -1.821103736982979e+00, -1.821325597394862e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_b94_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.722369347786600e-02, -4.722329156280739e-02, -4.722253238821827e-02, -4.722913543771751e-02, -4.722347243399104e-02, -4.722347243399104e-02, -5.342633453498062e-02, -5.342276097548406e-02, -5.332726711756255e-02, -5.353972688078758e-02, -5.342416979517921e-02, -5.342416979517921e-02, -4.775706749177305e-02, -4.781539729218598e-02, -4.835458632112260e-02, -4.823908801620014e-02, -4.777957434811782e-02, -4.777957434811782e-02, -2.295782215531085e-02, -2.349500950342655e-02, -4.807637148758016e-02, -1.757172725267143e-02, -2.314052990419408e-02, -2.314052990419409e-02, -1.837621258969726e-04, -2.060815972159679e-04, -3.101578824587805e-03, -6.583797359134413e-05, -2.020555888922982e-04, -2.020555888922983e-04, -1.899674493904475e-02, -3.992985107626051e-02, -1.325883969617820e-01, -1.533046983617401e-02, -5.701695719609249e-02, -4.713601038588618e-02, -1.731856229076109e-01, -3.916070188911740e-02, -5.270693125845133e-02, -5.209285656183620e-02, -5.276961577238469e-02, -7.020944652482546e-02, -9.142117038473532e-03, -1.928847805637946e-02, -1.173706134375580e-02, -3.173493859553357e-02, -3.688134007071256e-02, -3.422452746696314e-02, -2.338735009417763e-01, -5.932402059309195e-03, -2.250541257004656e-01, -4.045503491867970e-02, -1.630212839424644e-02, -2.616243177126978e-02, -3.137740183668601e-06, -1.715248803292972e-09, -3.281407244532404e+00, -3.160795488215253e-01, -1.538920927278404e-05, -3.304644777461590e+00, -1.245331555565162e-06, -8.068949205825880e-02, -7.971597417983395e-02, -2.703457801522853e-04, -7.933647915418846e-02, -4.890529743666401e-08, -7.574616828032278e-02, -3.885335386658668e-02, -1.276287760566793e-02, -4.379314964819328e-02, -3.234929404273556e-02, -7.645941613681166e-03, -9.699239885206899e-03, -1.336904493648447e-01, -1.116761511289666e-01, -8.037435638200983e-02, -2.027975488386321e-02, -2.575230771471060e-02, -3.737648280698031e-02, -3.328006710993016e-04, -3.195322413559956e-03, -3.276213128723005e-02, -2.468091055806904e-01, -1.130826263668693e-02, -1.592851393329556e+00, -2.185239174347849e-08, -6.726358004450727e+00, -2.112189905441965e-01, -3.199096615383237e+00, -3.199740533340817e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b94_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.351680715613386e-10, 1.351663807620944e-10, 1.351571265910922e-10, 1.351848028749415e-10, 1.351671947741485e-10, 1.351671947741485e-10, 8.643460992004411e-07, 8.643713889969461e-07, 8.647830089287363e-07, 8.609539444760458e-07, 8.643586425943566e-07, 8.643586425943566e-07, 1.475638585313384e-03, 1.467574352812708e-03, 1.249653125114852e-03, 1.214524337057943e-03, 1.472933630198572e-03, 1.472933630198572e-03, 1.592133214356859e-01, 1.613094867517532e-01, 1.100330779735115e-03, 2.769772298463785e-01, 1.601672626126162e-01, 1.601672626126162e-01, 1.500681635957987e+01, 1.451743433739786e+01, 1.750338304859292e+00, 3.121927690942271e+01, 1.502089314552541e+01, 1.502089314552542e+01, 3.764331301256598e-09, 2.395055647587472e-08, 1.895618049874111e-07, 2.387443058453358e-09, 1.449972476028435e-07, 4.422263644757425e-08, 2.298748950723577e-05, 2.160229229858879e-06, 4.439132163381900e-06, 4.242664576384158e-06, 4.460571081445908e-06, 9.809433543776668e-06, 6.317517611162439e-05, 2.230965333843018e-04, 1.382348774583240e-04, 3.943473610321760e-03, 2.169719522159478e-03, 1.437167237091124e-03, 1.985848015129185e+01, 9.757992708516215e-03, 2.126758083027353e+01, 1.194866300855205e-05, 4.949466960621003e-01, 9.799653019608235e-01, 1.172640104633822e+00, 2.367059633286908e-06, 9.585173893165493e+06, 1.488654646344193e+02, 6.818335859180512e+00, 4.362883847829197e+06, 7.617026545994797e-12, 6.470202266123058e-03, 6.413041995111629e-03, 7.978786064489994e-08, 6.390952224196991e-03, 3.279575638629064e-14, 7.339830012156257e-03, 4.355289068023108e-03, 2.190981535998300e-04, 7.244535236448922e-03, 2.291353251450843e-03, 6.852870265240835e-05, 3.675084305876561e-05, 4.682209767668613e-01, 2.184471432456148e-01, 7.073474197291713e-02, 8.880195352817867e-03, 1.526310804790944e-02, 6.681039831178771e-03, 1.049715295135486e-01, 7.350605426733745e-01, 3.579574944568029e-02, 4.879952901895341e+01, 1.163384772839877e+00, 1.196632566329607e+05, 1.223984596094462e-01, 4.170952347249043e+07, 5.628396159693314e+01, 8.403924231119251e+06, 8.404693236485086e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b94_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.558438757666068e-06, 2.558413640931435e-06, 2.558307583777618e-06, 2.558717356603015e-06, 2.558425465987849e-06, 2.558425465987849e-06, 9.863631529975368e-05, 9.863841754684187e-05, 9.866829509184190e-05, 9.819809338480564e-05, 9.863939697807247e-05, 9.863939697807247e-05, 1.136709793278963e-03, 1.125153820739115e-03, 8.401963101785398e-04, 8.283414419151915e-04, 1.132687242525874e-03, 1.132687242525874e-03, 1.543707138607027e-03, 1.665990464156169e-03, 1.697584237282872e-03, 1.084235971550910e-03, 1.584792529011911e-03, 1.584792529011912e-03, 6.264741992031182e-06, 7.388598990863462e-06, 1.400012593641574e-04, 4.939700753171527e-06, 7.198809484623956e-06, 7.198809484623980e-06, 7.342513080670626e-07, 6.481370063896418e-06, 3.130418835625753e-08, 4.336596755911176e-07, 2.167960925035421e-05, 1.350817891433279e-05, 3.268616969462605e-08, 2.977922674741573e-05, 6.809732614989683e-05, 6.572380578085999e-05, 7.181117727013468e-05, 1.835043917798262e-04, 1.359016124930426e-05, 8.196951064824644e-05, 2.801554741060124e-05, 1.842816263719970e-03, 1.064725016850412e-03, 6.446683581080767e-04, 8.701075549073560e-05, 5.635111808220405e-05, 1.741032155222924e-06, 2.150850955495602e-04, 1.001629976413057e-03, 2.355162967742479e-03, 4.057004688047137e-08, 4.848213244770320e-14, 1.495409127258155e-12, 1.261678911863663e-04, 6.085939697896985e-07, 1.021972951364879e-07, 4.212129767902801e-13, 2.001373187238504e-12, 5.546603792521235e-15, 8.793631932483428e-09, 3.298829182486869e-12, 1.308012892345506e-15, 1.102529650900268e-14, 1.155642140773348e-03, 3.818915706327124e-05, 9.080415669422570e-04, 6.825358881889423e-04, 1.077547881939102e-05, 1.201051599344281e-05, 3.327860343767765e-07, 1.281894201325604e-07, 1.203027716987995e-05, 3.979990601398057e-04, 7.714934820157805e-04, 1.327046358525536e-03, 3.294669156624116e-06, 1.158056902155974e-04, 2.954094017327194e-03, 4.037856821526671e-06, 7.682090485683082e-04, 3.145055463210366e-06, 7.844222338866036e-11, 3.364253011622712e-08, 7.551197430185831e-03, 7.358142736655570e-05, 1.185053340003247e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_b94_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_b94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.090425224287136e-05, -2.090414297724697e-05, -2.090350293809662e-05, -2.090528811747840e-05, -2.090419598488563e-05, -2.090419598488563e-05, -5.768378838846746e-04, -5.768583934528537e-04, -5.773042643454313e-04, -5.748198756452884e-04, -5.768554948918408e-04, -5.768554948918408e-04, -6.936295216182661e-03, -6.877167219185332e-03, -5.400457107489956e-03, -5.373591698949132e-03, -6.915806994408176e-03, -6.915806994408176e-03, -1.532231422354864e-02, -1.615244894161400e-02, -8.903927729289841e-03, -1.015785330300893e-02, -1.559955008537404e-02, -1.559955008537404e-02, -2.516042021042198e-04, -2.797199317792813e-04, -2.264636959098528e-03, -5.778964159505742e-05, -2.804663108842779e-04, -2.804663108842780e-04, -8.421636822520299e-06, -5.361125540536250e-05, -4.241153130038453e-04, -5.343751925170898e-06, -3.244787035573775e-04, -9.896259397765780e-05, -2.725583429311021e-03, -2.615865459752416e-04, -5.218549230159783e-04, -5.070557358237629e-04, -5.424135478077689e-04, -1.192844941446308e-03, -1.959618195272639e-04, -8.869661799627670e-04, -3.663569351414820e-04, -1.185911953799036e-02, -7.536162182068765e-03, -4.991762884953350e-03, -2.888350846402352e-01, -9.594153367661518e-04, -2.975875283483912e-01, -1.336795120128159e-03, -1.113057819206948e-02, -2.203788914194784e-02, -1.948727783897498e-06, -5.871486878056574e-12, -1.001065854978026e+01, -5.217636159119692e-01, -1.279364052366712e-05, -8.186332962827819e+00, -2.595915464972666e-11, -2.169944818183290e-02, -2.163213259815942e-02, -2.703341609781462e-07, -2.160551598359469e-02, -1.108706831065554e-13, -2.268249241793644e-02, -8.786655017319673e-03, -5.037635278597901e-04, -1.871251267340871e-02, -5.580964769145008e-03, -1.669128384879724e-04, -1.684168692075774e-04, -9.159570697359029e-02, -7.158978986053888e-02, -4.843732717261803e-02, -4.207289553697010e-03, -7.231407924662487e-03, -9.889622899376956e-03, -1.079020261568559e-04, -1.874619363819217e-03, -2.067535931288855e-02, -3.795242786148910e-01, -9.047889919021852e-03, -3.229715038141504e+00, -6.230643927630329e-09, -1.455469823956710e+01, -3.800868096379241e-01, -9.679474851768900e+00, -9.680360577043711e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
