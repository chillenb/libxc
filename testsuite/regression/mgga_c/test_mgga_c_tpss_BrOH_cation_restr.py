
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504592285e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -2.478202171867556e-02, -6.701411225019485e-02, -1.227172810288748e-02, -1.032044845867640e-02, -1.119778340092827e-02, -1.099329781420593e-02, -1.099329781420593e-02, -7.056535609267152e-03, -7.547125364105051e-03, -7.077000961998538e-02, -1.748467892175411e-03, -3.372679611908772e-03, -3.372679611908770e-03, -6.889956197755105e-09, -9.091171240021587e-09, -8.773051067182337e-06, -3.929297728362011e-10, -1.591228924884347e-09, -1.591228924884347e-09, -5.018857250425891e-02, -5.029892356886125e-02, -5.019491657262913e-02, -1.224312405851439e-01, -5.024383407201712e-02, -5.024383407201712e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214133e-02, -9.474413043394064e-02, -9.489275971457944e-02, -2.158391325534434e-02, -3.071100050088065e-02, -3.775376841201449e-02, -2.564625472001503e-02, -3.073226522755811e-02, -3.205774332722758e-02, -6.418936514394004e-02, -2.699430518029856e-02, -3.584926759202348e-03, -2.581454244194446e-02, -3.648588260368457e-02, -1.088819905359365e-03, -1.088819905359365e-03, -1.873262677774475e-03, -3.123015412702060e-10, -7.135129377263173e-10, -2.031142249656109e-02, -2.148658723728447e-03, -6.588648177296409e-10, -4.277382570233494e-02, -4.159709977505817e-02, -6.383636564200691e-02, -4.239485054812163e-02, -4.222529038686263e-02, -4.222529038686262e-02, -4.230760826303728e-02, -2.729817230416021e-02, -3.207910679144779e-02, -3.673605928457317e-02, -3.438928928275332e-02, -6.128134397443009e-02, -3.632819857022607e-02, -4.238697070491520e-02, -1.046795559442078e-02, -5.192846777352227e-02, -1.523679603088288e-02, -1.523679603088287e-02, -5.782021926348150e-02, -7.385411449931378e-06, -2.418905522999466e-05, -2.328140240036890e-02, -2.356177787973960e-02, -2.591644382629155e-04, -1.598722204750765e-08, -7.106382367246503e-13, -7.135060531028338e-11, -2.185332825063603e-04, -6.515480679939774e-10, -6.515480740011768e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672968115e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -7.426339968650675e-02, -7.507468276142483e-02, -4.512464551458552e-02, -4.348030726515825e-02, -4.234743462380367e-02, -4.180314677234465e-02, -4.180314677234465e-02, -2.792203937090127e-02, -2.931517163860582e-02, -7.900736698061860e-02, -8.687152199366520e-03, -1.548579320083219e-02, -1.548579320083221e-02, -4.187940077747495e-08, -5.521541975942316e-08, -5.579097366857971e-05, -2.406749427892660e-09, -9.716678251403037e-09, -9.716678251403037e-09, -1.153370134601280e-01, -1.155600115602773e-01, -1.153498044416479e-01, -1.321455341852712e-01, -1.154485894539564e-01, -1.154485894539564e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -6.737456541528257e-02, -6.950456604807731e-02, -7.546638836457362e-02, -6.485902483323183e-02, -6.894248191390424e-02, -7.058548299582802e-02, -7.210898567657270e-02, -3.211636191061110e-02, -1.802228789236814e-02, -3.079828628005500e-02, -8.767285396532568e-02, -5.612618287496940e-03, -5.612618287496964e-03, -2.429818831173949e-03, -1.913461613679459e-09, -4.385334410262444e-09, -2.457414087463874e-02, -2.781518125836640e-03, -4.040620440221286e-09, -8.212032544228792e-02, -7.862126770357540e-02, -7.173787450420190e-02, -8.067481409867064e-02, -8.015629624351689e-02, -8.015629624351688e-02, -8.074261492138290e-02, -6.486262390855937e-02, -6.823869096055368e-02, -7.169153128256886e-02, -6.983330395957475e-02, -6.904837093538647e-02, -7.521667106453270e-02, -4.894336676652947e-02, -3.792425976501079e-02, -5.914859868946302e-02, -4.776404215441275e-02, -4.776404215441276e-02, -6.539524416530183e-02, -4.327498529097689e-05, -1.399932887468712e-04, -5.706927344913897e-02, -2.826624935272212e-02, -1.431815636431700e-03, -9.667494494519781e-08, -4.414820835890620e-12, -4.401126157431292e-10, -1.213846712669390e-03, -3.999464313280624e-09, -3.999464310682648e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.161498703697965e-09, 8.161407659089411e-09, 8.160974813445730e-09, 8.162330002804068e-09, 8.161623871117007e-09, 8.161623871117007e-09, 1.161609634514708e-05, 1.161599605689965e-05, 1.161254015647292e-05, 1.160972808567592e-05, 1.161485611526679e-05, 3.266849261412982e-07, 8.392792746785303e-03, 3.321229198270902e-04, 4.079173294701588e-04, 3.174122553260738e-04, 3.115109739189786e-04, 3.115109739189786e-04, 1.123621301065227e-01, 1.146935479631323e-01, 4.539804811746709e-03, 5.928671987941619e-02, 8.646409450537419e-02, 8.646409450537446e-02, 4.153314077686801e-03, 4.792018385573301e-03, 2.473973417200698e-02, 1.066144679718084e-03, 2.554636520924835e-03, 2.554636520924835e-03, 4.473895942870246e-07, 4.526065919268493e-07, 4.476907425214481e-07, 2.310087810373452e-06, 4.499911300757308e-07, 4.499911300757308e-07, 1.158051301966153e-04, 1.125052171409306e-04, 1.182908656289507e-04, 1.152901814792594e-04, 1.128111978435359e-04, 4.159427965167365e-06, 3.749292614898502e-03, 6.303091332047992e-03, 3.334726137564251e-03, 4.585067935138557e-03, 4.026146620705662e-03, 1.344659365761198e-02, 2.446111877048235e+01, 6.056540516977779e-02, 3.339436744249478e+01, 1.690573169091928e-05, 8.237360164942520e-02, 8.237360164942439e-02, 3.260923462136543e+07, 8.531840844866211e-04, 1.246797193523530e-02, 1.631896766601931e+02, 1.757366491096296e+07, 4.063541965207162e-03, 7.283472426763826e-02, 3.246632646717809e-02, 1.427092395701781e-02, 5.141139972344638e-02, 4.564396461239115e-02, 4.564396461239113e-02, 7.103593607221491e-02, 6.348392632580462e-03, 8.636853620591124e-03, 1.424290503810339e-02, 1.069190479292678e-02, 2.204426564041591e-02, 3.841594279348060e-03, 7.364685609764811e-01, 2.530059336955520e-02, 1.163131763555006e-01, 2.236743128577904e-02, 2.236743128577909e-02, 4.022951286696635e-02, 1.778515926378648e-02, 2.135700172912412e-02, 2.890450531968903e-02, 6.207908064983523e+01, 7.108225190632984e-02, 2.351526538258634e-03, 1.153456953651598e-04, 2.092319611878695e-03, 7.584410766429028e-02, 6.065135798851537e-03, 6.065135757437555e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.066687518177077e-29, -7.667051032736423e-110, -7.668123877140025e-110, -7.663238134203185e-110, -7.665854126160741e-110, -7.665854126160741e-110, -3.071545839961665e-97, -3.073842536580365e-97, -3.134090077072344e-97, -3.104597942228053e-97, -3.113476147924984e-97, 2.519639231293176e-05, -1.389128462085312e-85, 5.925458265604360e-04, 0.000000000000000e+00, 5.515687524197742e-04, 5.411112515156740e-04, 5.411112515156740e-04, 4.060436950444632e-03, 4.330624489895747e-03, -1.789709103558104e-87, 8.757342429388857e-04, 1.880810787747899e-03, 1.880810787747894e-03, 4.270545833385372e-09, 5.774854307773017e-09, 0.000000000000000e+00, 1.999411156630225e-10, 9.723735423131375e-10, 9.723735423131375e-10, -6.743376331492370e-04, -6.851953962764362e-04, -6.749593269487141e-04, -7.166719815098205e-43, -6.797524258671450e-04, -6.797524258671450e-04, -2.638641363384180e-37, -4.324369019719209e-93, -4.322560756618566e-93, -4.316321385566273e-93, -4.345780958797566e-93, 9.912385468389463e-05, -3.024714551970679e-03, -1.667899013285963e-02, 3.068516251620028e-05, -3.457125812432282e-03, -4.421993367628136e-03, -6.350210183660655e-83, -2.583135105827203e-73, 0.000000000000000e+00, -6.622765836626987e-73, -6.089052897871830e-04, 6.421082030953108e-04, 6.421082030953109e-04, -7.598913657956394e-56, 1.491499331349405e-10, 9.493278998396209e-10, -8.824911476827753e-71, -1.060984784715645e-55, 5.508264703463475e-10, -2.304686092692474e-01, -9.485890004479504e-02, -1.287545130609362e-80, -1.586151865792611e-01, -1.392282745745367e-01, -1.392282745745367e-01, -2.057236660078813e-01, -1.198086706826007e-03, -7.176826779346583e-03, -2.375047953528110e-02, -1.308676466600275e-02, -1.349376204989104e-81, -9.800660978073441e-03, -1.024407630267591e-77, 3.015429020908443e-03, -6.959014784375746e-80, 3.342855925765201e-03, 3.342855925765193e-03, -1.497002040605026e-81, 3.675816927760422e-06, 1.147811226050096e-05, 7.597126006911230e-04, -8.813043191755451e-72, 1.604908878631221e-04, 7.030467133747722e-09, 3.412279907871142e-13, 6.111277709323824e-11, 1.409088315747209e-04, 6.464334167453520e-10, 6.464334364072913e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
