
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpss_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.771334984576962e-02, -4.771389185672293e-02, -4.771487016259028e-02, -4.770680521700221e-02, -4.771123499592049e-02, -4.771123499592049e-02, -4.180448952634604e-02, -4.180946517115045e-02, -4.192501618529677e-02, -4.172819038314057e-02, -4.181217642885141e-02, -4.181217642885141e-02, -2.776635338640255e-02, -2.753943101563777e-02, -2.211973021934864e-02, -2.243745270720336e-02, -2.255447428691792e-02, -2.255447428691792e-02, -7.484247992678010e-03, -8.096015718645126e-03, -3.005650628760932e-02, -2.317672538137334e-03, -4.090023000957093e-03, -4.090023000957092e-03, -6.979630837029310e-09, -9.309411996502553e-09, -1.039483735895241e-05, -4.722297834475166e-10, -1.775241343021552e-09, -1.775241343021091e-09, -5.045747281996825e-02, -5.056777750868047e-02, -5.045839793628549e-02, -5.055589122729066e-02, -5.051550782135194e-02, -5.051550782135194e-02, -2.297739407959607e-02, -2.347786952293317e-02, -2.203450204709689e-02, -2.247362478432921e-02, -2.372687104302284e-02, -2.372687104302284e-02, -3.836112777760834e-02, -5.507139178173727e-02, -3.619469803058899e-02, -5.101164945858225e-02, -3.999012724552176e-02, -3.999012724552176e-02, -4.748881118649812e-04, -3.887940810057126e-03, -3.691282467317359e-04, -7.151191412108029e-02, -1.276220052568556e-03, -1.276220052568556e-03, -1.681973851047833e-10, -4.771623595656250e-10, -8.825899208156259e-10, -9.542983655398067e-05, -9.571448593963654e-10, -9.571448593959505e-10, -5.560111485360240e-02, -4.763892175396607e-02, -4.965810719306622e-02, -5.184734847643824e-02, -5.068103025342326e-02, -5.068103025342326e-02, -6.086385137459446e-02, -2.805911918949310e-02, -3.362193048599882e-02, -4.020468622442255e-02, -3.676644339843892e-02, -3.676644339843892e-02, -5.520127135452949e-02, -6.917453252935291e-03, -1.150467027860991e-02, -2.429797867502988e-02, -1.737763574077535e-02, -1.737763574077538e-02, -2.736908234209634e-02, -8.020445425404519e-06, -2.974768015723312e-05, -2.868766476798127e-02, -3.175722784451504e-04, -3.175722784451439e-04, -2.476473289698751e-08, -3.964660662195042e-12, -7.886497175562478e-11, -2.476226005237949e-04, -8.552388215833247e-10, -8.552388263712484e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpss_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.133331780751853e-01, -1.133341117076684e-01, -1.133360491837255e-01, -1.133221654099576e-01, -1.133297550125273e-01, -1.133297550125273e-01, -1.064040952773276e-01, -1.064094734627630e-01, -1.065290670298904e-01, -1.062692685923932e-01, -1.063854908623059e-01, -1.063854908623059e-01, -7.737155011274746e-02, -7.708846353391866e-02, -6.916101659876771e-02, -6.952637179735016e-02, -6.977382074770931e-02, -6.977382074770931e-02, -2.934202592646164e-02, -3.106801161079821e-02, -8.272362767208979e-02, -1.144582884942243e-02, -1.852694167369142e-02, -1.852694167369137e-02, -4.246455641373052e-08, -5.663879714558976e-08, -6.157037272273768e-05, -2.926537611906579e-09, -1.092069638389270e-08, -1.092069639163789e-08, -1.155855213339837e-01, -1.158064848918196e-01, -1.155931610671622e-01, -1.157882942687871e-01, -1.156986689858440e-01, -1.156986689858440e-01, -7.125284704141772e-02, -7.191610543902298e-02, -6.938867830847835e-02, -6.998975205256601e-02, -7.252690937539877e-02, -7.252690937539877e-02, -7.895050315934793e-02, -8.292799394833882e-02, -7.847781449468338e-02, -8.098593638689941e-02, -7.979713788485278e-02, -7.979713788485278e-02, -2.617175484410900e-03, -1.772205695076658e-02, -2.057125730592972e-03, -1.174995178507175e-01, -6.592221597796398e-03, -6.592221597796399e-03, -1.070611571824172e-09, -2.994245361332181e-09, -5.495496489972070e-09, -5.520560765088880e-04, -5.996893786731316e-09, -5.996893791538925e-09, -7.879097989313702e-02, -7.970701488040985e-02, -8.008778437542884e-02, -8.001672865215617e-02, -8.011616348215733e-02, -8.011616348215732e-02, -7.379766116128025e-02, -6.601471148775867e-02, -7.011714652871005e-02, -7.454527240982144e-02, -7.231813879485766e-02, -7.231813879485766e-02, -8.488723762659268e-02, -2.821858844334894e-02, -4.084584416558563e-02, -6.240288968237653e-02, -5.231466817291427e-02, -5.231466817291429e-02, -6.695127802408576e-02, -4.729483083213620e-05, -1.746477157129059e-04, -6.434170100674137e-02, -1.772136143252595e-03, -1.772136143252554e-03, -1.537674193513487e-07, -2.590316201698281e-11, -4.895526211175589e-10, -1.385096118717479e-03, -5.336036983748607e-09, -5.336036976863436e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.296967379166430e-10, 2.297047739105189e-10, 2.297307947229042e-10, 2.296119731515872e-10, 2.296755918810109e-10, 2.296755918810109e-10, 1.018048773026190e-06, 1.018264492619701e-06, 1.023081172179760e-06, 1.013043160813467e-06, 1.017834960868460e-06, 1.017834960868460e-06, 1.701276206179278e-03, 1.687520544990076e-03, 1.346211792056508e-03, 1.305841452111447e-03, 1.334104845405460e-03, 1.334104845405460e-03, 1.291550699921521e-01, 1.355152789592116e-01, 9.566445537950908e-04, 1.058582160996400e-01, 1.309436855400511e-01, 1.309436855400515e-01, 4.258824023538850e-03, 5.017609704149733e-03, 2.565085944361560e-02, 1.504872378164003e-03, 3.145387573940890e-03, 3.145387574949987e-03, 4.473302701905722e-07, 4.525320907992601e-07, 4.476312422017533e-07, 4.522200145039559e-07, 4.499238030258894e-07, 4.499238030258894e-07, 5.019472574428117e-06, 4.996073126439015e-06, 4.756976275591174e-06, 4.736796922613858e-06, 5.139040838306611e-06, 5.139040838306611e-06, 5.662225727527128e-03, 8.708678389617294e-03, 7.182648115743849e-03, 1.187167432150084e-02, 5.851902900308122e-03, 5.851902900308122e-03, 6.132918861765082e-02, 5.087669407260966e-02, 6.272572284943163e-02, 6.177735930500124e-05, 1.146561545852696e-01, 1.146561545852697e-01, 1.469887143863205e-03, 1.850094726472390e-03, 1.851132327025945e-02, 6.176413929755318e-02, 8.056253495300494e-03, 8.056253505694225e-03, 5.103631113722860e-02, 2.993092558928425e-02, 3.610581269286159e-02, 4.253034706417046e-02, 3.916267832737157e-02, 3.916267832737154e-02, 2.974398820308712e-02, 6.660122329561208e-03, 9.086062185409373e-03, 1.465325115387072e-02, 1.122265335523313e-02, 1.122265335523313e-02, 6.537876977644719e-03, 3.591559974286935e-02, 3.172706078626956e-02, 2.912387136018084e-02, 3.092029422113821e-02, 3.092029422113821e-02, 9.427926437089288e-03, 2.096802020416431e-02, 3.211406533515627e-02, 4.769200626652255e-02, 1.069989351220959e-01, 1.069989351220936e-01, 5.290687474064571e-03, 2.005775727699986e-03, 2.523784712006836e-03, 9.780893150963137e-02, 1.003184900190953e-02, 1.003184894943236e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpss_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.476990237060928e-05, -1.477107547041293e-05, -1.477704856091105e-05, -1.475973688892813e-05, -1.476869538465941e-05, -1.476869538465941e-05, 4.901083270704698e-06, 4.895212779167536e-06, 4.753155832945492e-06, 4.960575525521230e-06, 4.875960686427101e-06, 4.875960686427101e-06, 1.079168450336856e-04, 1.098065927683673e-04, 1.531221010821557e-04, 1.761145237197357e-04, 1.667527925817698e-04, 1.667527925817698e-04, 3.841446213214074e-03, 4.033672078818810e-03, 1.422764731337158e-05, 7.927229341351796e-04, 1.690651491098187e-03, 1.690651491098185e-03, 4.270485738592320e-09, 5.774686443058633e-09, 4.327995145880860e-06, 1.999285297576166e-10, 9.723083581606746e-10, 9.723083581594109e-10, -6.642164282164492e-04, -6.749745693270018e-04, -6.650349478027547e-04, -6.745197834648174e-04, -6.694764335118649e-04, -6.694764335118649e-04, 9.586199735340959e-05, 9.441484449724001e-05, 9.905998634662241e-05, 9.836612703646240e-05, 9.330837970736586e-05, 9.330837970736586e-05, -1.447094329095367e-03, -2.395805378630797e-03, -2.449670118710769e-04, -5.857785190636125e-04, -2.035984279560493e-03, -2.035984279560493e-03, 1.674106078357280e-04, 1.434220271317748e-03, 1.309389735759606e-04, -5.281761112960796e-05, 6.165497337421236e-04, 6.165497337421239e-04, 3.329617976319890e-11, 1.491294830389923e-10, 9.492206045037252e-10, 3.883461783143710e-05, 5.507270734314732e-10, 5.507270734298740e-10, -7.734495551323206e-02, -6.146203851649761e-02, -7.119317764622556e-02, -7.813035114880842e-02, -7.495005562382979e-02, -7.495005562382973e-02, -1.096018253728245e-02, -9.621267442839311e-04, -5.839608682227069e-03, -1.697317661787577e-02, -1.002792217469045e-02, -1.002792217469045e-02, -1.318454911980869e-03, 2.226260963233922e-03, 2.691639807986751e-03, 1.272708117254096e-03, 2.631528952193463e-03, 2.631528952193482e-03, 5.307561396122377e-04, 3.669800329852322e-06, 1.139606342784614e-05, -1.433897677065233e-05, 1.567626060471117e-04, 1.567626060471043e-04, 7.025686157539488e-09, 3.412052144438844e-13, 6.111160412636120e-11, 1.390843829878560e-04, 6.463475634191609e-10, 6.463475774699919e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
