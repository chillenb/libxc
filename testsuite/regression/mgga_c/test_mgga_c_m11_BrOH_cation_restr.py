
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.002541228237722e-02, -9.002001845528863e-02, -8.999824177086861e-02, -9.007807947131813e-02, -9.003594068305665e-02, -9.003594068305665e-02, -9.912744634699720e-02, -9.913986269045763e-02, -9.946832373726749e-02, -9.933774205281883e-02, -9.934907805646991e-02, -5.460480297375665e-02, -7.465758238902008e-02, 4.180252087136043e-02, 4.602830417602887e-02, 4.494709257695146e-02, 4.533937953571806e-02, 4.533937953571806e-02, 1.498238295184499e-02, 1.650196083530093e-02, -1.457213070879270e-01, -1.381244730111919e-02, -8.330923937431435e-04, -8.330923937431498e-04, -3.198751561144875e-02, -3.336547019038687e-02, -1.039281482804563e-01, -2.003637094606963e-02, -2.440342137229345e-02, -2.440342137229345e-02, -2.776517570642881e-01, -2.765063710250263e-01, -2.775880606653210e-01, -3.323240014033338e-02, -2.770890433657854e-01, -2.770890433657854e-01, -7.802180013313965e-02, -7.908847676232805e-02, -7.742175151742885e-02, -7.813485136433532e-02, -7.901363102084033e-02, -3.113239374174886e-02, -4.034281485603276e-02, -9.533430447229220e-02, -3.780908290198506e-02, -4.046344924824050e-02, -4.550299179159971e-02, -6.095376148526223e-02, -2.859434219716367e-01, 7.954749456695059e-04, -2.955144166716744e-01, -7.001873376243212e-02, -2.593156412690140e-02, -2.593156412690114e-02, -3.715471116938415e-02, -1.964573037316821e-02, -1.546713599237637e-02, -3.029877064816575e-01, -4.257266023504742e-02, -1.825564990990658e-02, -2.452183681494547e-01, -8.170168785202413e-02, -1.485967465239790e-01, -1.653609313830366e-01, -1.387527788696262e-01, -1.387527788696262e-01, -2.110290438609929e-01, -3.666639710653233e-02, -4.792143645792989e-02, -8.718434382907507e-02, -6.815915411006211e-02, -4.525890563135804e-02, -8.179186882647746e-02, -8.409525520579633e-02, 2.585014175012019e-02, -4.259661239124781e-02, 8.748486196794679e-03, 8.748486196794601e-03, -5.287392123012232e-02, -1.023439919034976e-01, -1.103469894761651e-01, -3.207506957863525e-02, -2.753270847496337e-01, -7.126234236345759e-02, -4.250360361543317e-02, -5.933008339306709e-03, -1.173203933368551e-02, -7.486560861124462e-02, -1.704173764206665e-02, -1.704173764206661e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.969339586234911e-01, 1.969382621904321e-01, 1.969557090859939e-01, 1.968918801882181e-01, 1.969256311252023e-01, 1.969256311252023e-01, -1.862901455724924e-01, -1.863123604007521e-01, -1.868581403758495e-01, -1.866512068332445e-01, -1.866691911852140e-01, -1.693673537868578e-01, 5.647147412395956e-02, -7.422611731669915e-02, 1.701074770355059e-02, -2.289483816713899e-02, -1.334085491480892e-02, -1.334085491480892e-02, 4.304978344783741e-02, 3.888627734040157e-02, 9.914421050802488e-02, 4.446579954531204e-02, 2.886547038747832e-02, 2.886547038747087e-02, -4.058235067031278e-02, -4.223538628146296e-02, -9.463741978769494e-02, -2.582598331777105e-02, -3.127204885362997e-02, -3.127204885362997e-02, 1.795051323703277e-02, 3.595422103809311e-02, 1.899062244858630e-02, -3.307114942384694e-02, 2.698748963837408e-02, 2.698748963837408e-02, -1.155277780344959e-01, -1.289696135685983e-01, -1.038006460582635e-01, -1.171704943919791e-01, -1.282437704620134e-01, -2.862056289730726e-01, -1.095590015451615e-01, -1.463147010592376e-01, -6.007849048242882e-02, -1.146342279986688e-01, -1.626051714494086e-01, -2.027680080885059e-02, -5.892925988130936e-02, 3.425756588025927e-02, -9.501030011634902e-02, -3.518779374839267e-01, 5.909497759661507e-02, 5.909497759663346e-02, -4.815594002143019e-02, -2.533784881235880e-02, -1.998368625103104e-02, -2.254435742092786e-01, -5.499494969330648e-02, -2.354065195046364e-02, -6.842563471310488e-01, -3.232503907800907e-01, -6.146216864462374e-01, -6.575648438934184e-01, -5.983002406188402e-01, -5.983002406188402e-01, -6.913532881299392e-01, -4.608079736798840e-02, -1.774727513503295e-01, -1.022347881809757e-01, -2.167050944205663e-01, 4.625388459048646e-02, -2.517467334488346e-01, 5.407640568480880e-02, -9.793674140395017e-03, -6.122320066499930e-02, -1.528782650678575e-01, -1.528782650678571e-01, -1.007386266888979e-01, -9.591066333756737e-02, -7.738709143847676e-02, -7.125168143342510e-02, -9.867602804298345e-02, 3.658735484840948e-02, -5.337210066010947e-02, -7.777875451085755e-03, -1.525469529648940e-02, 2.763946144983212e-02, -2.199572484796965e-02, -2.199572484796691e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.847959011143804e-08, -1.848117997161160e-08, -1.848746112227229e-08, -1.846394139731496e-08, -1.847637647466468e-08, -1.847637647466468e-08, 5.860871373807059e-06, 5.860634112600951e-06, 5.856082412908125e-06, 5.855310464043855e-06, 5.857795799291553e-06, 1.991434461739638e-07, 1.710845816494746e-02, 8.380796882774001e-04, 8.183350592594774e-04, 8.524422014680190e-04, 8.450247025594715e-04, 8.450247025594715e-04, 3.604566162458852e-01, 3.642510173661520e-01, 1.240830799300528e-02, 3.194158190157435e-01, 3.448228476480039e-01, 3.448228476480038e-01, 4.696938232971073e-02, 5.418270955611041e-02, 2.006309187840113e-01, 1.206864904195897e-02, 2.890855861573806e-02, 2.890855861573806e-02, -1.076199059499366e-06, -1.081917484633219e-06, -1.076549596221735e-06, -8.816246924280041e-06, -1.079124627559465e-06, -1.079124627559465e-06, 7.994583228936971e-05, 7.040114074751937e-05, 8.872109806157903e-05, 7.865872652497135e-05, 7.096752629102984e-05, 3.230646747897134e-06, 2.758927996502293e-03, -1.215730631913217e-02, 2.290960964557089e-03, 3.268735797290569e-03, 2.017581282996420e-03, 6.558735695978333e-03, 2.012676885477983e+02, 1.649129529865131e-01, 2.880711425476222e+02, 4.725116401812875e-06, 5.331938554400256e-01, 5.331938554400234e-01, 3.691918038355070e+08, 9.658335187912166e-03, 1.411094304273920e-01, 1.629232832322572e+03, 1.988864443622426e+08, 4.599280970154041e-02, 3.234409360926205e-02, 1.500236562027805e-02, 4.966741036365403e-02, 4.860914024143301e-02, 4.410042351878966e-02, 4.410042351878966e-02, 5.048861647273823e-02, 5.085767015774824e-03, 2.373092245549484e-03, -2.855748619850648e-02, -8.574295424495049e-03, -2.066032285310174e-02, -4.092330817877133e-03, 1.985961586657667e+00, 7.290936552192476e-02, 8.457293985245333e-02, 4.278256887301579e-02, 4.278256887301581e-02, 2.048567985621022e-02, 1.949040032295853e-01, 2.277194921417319e-01, 1.940755271356747e-02, 5.420908673548046e+02, 6.385031302105619e-01, 2.657931564233248e-02, 1.306169311052487e-03, 2.368915374882911e-02, 6.965274082249650e-01, 6.864688768029845e-02, 6.864688773177133e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.715043293949535e-04, -1.715078535684537e-04, -1.715214703960437e-04, -1.714693108346474e-04, -1.714969665700183e-04, -1.714969665700183e-04, 5.913694954789787e-04, 5.915875476715002e-04, 5.970337424566229e-04, 5.948049496965132e-04, 5.951559788570764e-04, 6.263478905690052e-04, -1.337243698455940e-02, 5.358172756447541e-03, -2.555111048324519e-03, 7.541393516397707e-04, -6.502463642299935e-05, -6.502463642299935e-05, -6.910723128797190e-02, -6.672138759850285e-02, -1.062305704659359e-02, -5.555168207980980e-02, -4.932061705415029e-02, -4.932061705414781e-02, -3.428596905020707e-04, -4.129630267550847e-04, -1.955051848138148e-02, -5.247954196535280e-05, -1.405679595095110e-04, -1.405679595095110e-04, -9.357531759957158e-04, -1.193720055363031e-03, -9.505343939035372e-04, -4.059975643200650e-05, -1.064670625936682e-03, -1.064670625936682e-03, 5.780674873721464e-04, 8.370609554544421e-04, 3.566652987763328e-04, 6.089098894768995e-04, 8.234706326548731e-04, 4.382142084253084e-03, 1.441252002323271e-02, 1.026067829355325e-01, -2.646892090769351e-03, 1.871534839072320e-02, 4.168898822235436e-02, -2.245750489173804e-02, -1.535526028519555e-01, -3.962987121604725e-02, -1.428852001791969e-01, 1.238930149102167e-02, -8.027450917919168e-02, -8.027450917920148e-02, -2.185604900548789e-05, -4.346814777222183e-05, -1.618504448060433e-04, -8.781476691412918e-02, -1.352259184184946e-04, -1.063840865134307e-04, 1.568628502789100e+00, 4.230547510631591e-01, 1.156797719112194e+00, 1.242513049596994e+00, 1.040740538601195e+00, 1.040740538601195e+00, 1.556526872964272e+00, -1.229211305208546e-02, 7.443911974878463e-02, 1.104067476286475e-01, 1.419288534883505e-01, -7.782134179143702e-02, 1.129101517758267e-01, -8.086321110599658e-02, -1.101779386023201e-02, 7.600385449274884e-03, 6.799817271154214e-02, 6.799817271154227e-02, 1.896733642763822e-02, -1.786023049916323e-02, -3.220209626189801e-02, 1.260372249815568e-02, -1.683302668099242e-01, -9.466158658744338e-02, -4.339266107237583e-04, -1.147949762796568e-06, -2.868349319804380e-05, -9.434271348510229e-02, -1.211876171421935e-04, -1.211876171398296e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
