
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_hltapw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.624618588487074e-01, -1.624618494056602e-01, -1.624618714287923e-01, -1.624620042751188e-01, -1.624619257513696e-01, -1.624619257513696e-01, -1.118583438185374e-01, -1.118576569446617e-01, -1.118400345540269e-01, -1.118497501629454e-01, -1.118456800811695e-01, -1.118456800811695e-01, -6.975839033042754e-02, -6.974667707491446e-02, -6.945121468664599e-02, -6.948622335557808e-02, -6.940414285185587e-02, -6.940414285185587e-02, -4.085110201896227e-02, -4.103225156308359e-02, -7.493971935766862e-02, -3.742848567267705e-02, -3.362641489852181e-02, -3.362641489852179e-02, -7.489799615103169e-03, -7.716498202956602e-03, -2.077251202684265e-02, -5.348207517205412e-03, -5.281321230479984e-03, -5.281321230479984e-03, -1.192819498710645e-01, -1.192638834764862e-01, -1.192808726393469e-01, -1.192649370996384e-01, -1.192729347894133e-01, -1.192729347894133e-01, -9.631491818879163e-02, -9.639964448077794e-02, -9.625870282051295e-02, -9.633242584037030e-02, -9.638711232643586e-02, -9.638711232643586e-02, -6.352785623281204e-02, -6.395716630365124e-02, -6.252174728730286e-02, -6.255933426732443e-02, -6.359119058901722e-02, -6.359119058901722e-02, -3.246781004253799e-02, -4.185106642759937e-02, -3.134774339725352e-02, -9.339784844521672e-02, -3.419723514128640e-02, -3.419723514128640e-02, -4.573888580110978e-03, -5.295497938772935e-03, -4.060757880835068e-03, -2.614766672574058e-02, -4.646013236976935e-03, -4.646013236976933e-03, -5.832786025037213e-02, -5.978322695213358e-02, -5.938225905278641e-02, -5.897450336693098e-02, -5.918905277971205e-02, -5.918905277971205e-02, -5.799365213829259e-02, -5.993316880509923e-02, -6.010366375277248e-02, -5.994230076915326e-02, -6.007961425623327e-02, -6.007961425623326e-02, -6.555448456046459e-02, -4.567083625983687e-02, -4.868213952761265e-02, -5.324454221479671e-02, -5.083993561658459e-02, -5.083993561658458e-02, -5.857060104746061e-02, -2.034078467195814e-02, -2.375514419973202e-02, -5.178344783939533e-02, -2.888459138799417e-02, -2.888459138799417e-02, -9.529797124894825e-03, -2.135305931382852e-03, -3.410100969740035e-03, -2.804789869361187e-02, -4.332640228901116e-03, -4.332640228901117e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_hltapw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.675226151581207e-01, -1.675260397394790e-01, -1.675226058382656e-01, -1.675260301199297e-01, -1.675226495423362e-01, -1.675260305737221e-01, -1.675227815947453e-01, -1.675261650793586e-01, -1.675229402828294e-01, -1.675258488804908e-01, -1.675229402828294e-01, -1.675258488804908e-01, -1.166221122598411e-01, -1.166211932369255e-01, -1.166218209852241e-01, -1.166200970632573e-01, -1.165992102975182e-01, -1.166071117478534e-01, -1.166136751449799e-01, -1.166122719488391e-01, -1.165806059993717e-01, -1.166370861092377e-01, -1.165806059993717e-01, -1.166370861092377e-01, -7.390887029417297e-02, -7.379950715780755e-02, -7.391664416753997e-02, -7.376819305912348e-02, -7.336776540539620e-02, -7.371487741536256e-02, -7.358955479071726e-02, -7.356129235586077e-02, -7.217609267837938e-02, -7.508754194080500e-02, -7.217609267837938e-02, -7.508754194080500e-02, -4.463862912541350e-02, -4.356122196298103e-02, -4.491915305060278e-02, -4.367618470604264e-02, -7.979129754337665e-02, -7.856831105384605e-02, -4.057306870944462e-02, -4.044196312273320e-02, -3.276287854922116e-02, -5.976055810868704e-02, -3.276287854922114e-02, -5.976055810868704e-02, -8.678349341478117e-03, -8.286922889356634e-03, -8.968477549855209e-03, -8.511709880855780e-03, -2.347661262647229e-02, -2.247631096339011e-02, -6.038172597998482e-03, -6.114788149077248e-03, -5.470773572896345e-03, -8.733590398668147e-03, -5.470773572896345e-03, -8.733590398668145e-03, -1.240998309354680e-01, -1.241270636698202e-01, -1.240825967533164e-01, -1.241078593001911e-01, -1.240995401597525e-01, -1.241251814161594e-01, -1.240828822495497e-01, -1.241096991755185e-01, -1.240912069027798e-01, -1.241175050508744e-01, -1.240912069027798e-01, -1.241175050508744e-01, -1.008754143083986e-01, -1.009135847390638e-01, -1.009561796044898e-01, -1.010046354929963e-01, -1.008583372876464e-01, -1.008167770915949e-01, -1.009350465413395e-01, -1.008895736296469e-01, -1.008528516265788e-01, -1.010840372447626e-01, -1.008528516265788e-01, -1.010840372447626e-01, -6.733476746277703e-02, -6.760759873999309e-02, -6.781789933504871e-02, -6.800403006317216e-02, -6.711056792537591e-02, -6.583431923933079e-02, -6.716811022587060e-02, -6.584933237921833e-02, -6.637662096271436e-02, -6.888276104203295e-02, -6.637662096271438e-02, -6.888276104203295e-02, -3.546182695589743e-02, -3.517963052705727e-02, -4.520978658219284e-02, -4.500901172347903e-02, -3.489926792604209e-02, -3.349445850355575e-02, -9.791259643814618e-02, -9.795894042543039e-02, -3.780827623951380e-02, -3.655938443477649e-02, -3.780827623951379e-02, -3.655938443477649e-02, -5.288666977880893e-03, -5.133264670212997e-03, -6.059529352133051e-03, -5.975241983972913e-03, -4.727905547945749e-03, -4.545835899477820e-03, -2.866923421990551e-02, -2.864961593153110e-02, -6.173885373459119e-03, -4.940853011913477e-03, -6.173885373459118e-03, -4.940853011913475e-03, -6.217508278778428e-02, -6.208510968668205e-02, -6.369182981526504e-02, -6.356076111805961e-02, -6.327178082215788e-02, -6.315655642532009e-02, -6.285436840407432e-02, -6.273570662374470e-02, -6.307399723180988e-02, -6.295716732395736e-02, -6.307399723180988e-02, -6.295716732395736e-02, -6.181314241660595e-02, -6.175938933541707e-02, -6.387797699354753e-02, -6.368325127350657e-02, -6.404467843759029e-02, -6.386684375873475e-02, -6.387484420731672e-02, -6.370478849072188e-02, -6.401427662730445e-02, -6.384757188823974e-02, -6.401427662730444e-02, -6.384757188823972e-02, -6.942767710084442e-02, -6.966929123915740e-02, -4.918572643485232e-02, -4.895692015538176e-02, -5.237229852907640e-02, -5.200528640336579e-02, -5.704106978227153e-02, -5.675302007689755e-02, -5.439131235272810e-02, -5.443898546624946e-02, -5.439131235272811e-02, -5.443898546624944e-02, -6.247588392953992e-02, -6.228494763676891e-02, -2.254610726337295e-02, -2.240380278857260e-02, -2.647584696489009e-02, -2.579641349134958e-02, -5.539818861016255e-02, -5.538003585296882e-02, -3.217929964890783e-02, -3.101613959163416e-02, -3.217929964890784e-02, -3.101613959163416e-02, -1.088377705971911e-02, -1.058162394378402e-02, -2.451928181735919e-03, -2.447881403349341e-03, -3.985731566673520e-03, -3.819539995398340e-03, -3.081507549069472e-02, -3.052889539556386e-02, -5.685740862757398e-03, -4.610344539776125e-03, -5.685740862757398e-03, -4.610344539776125e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_hltapw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_hltapw_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_hltapw_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_hltapw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.966914171120289e-06, -2.969656528576742e-06, -2.967001691512509e-06, -2.969719875040237e-06, -2.967250420029079e-06, -2.970057977588490e-06, -2.966270674170461e-06, -2.968807162896455e-06, -2.967122678989714e-06, -2.969135299466268e-06, -2.967122678989714e-06, -2.969135299466268e-06, -3.581928724678495e-05, -3.580408981345904e-05, -3.583340545704789e-05, -3.580832270027197e-05, -3.601345681298288e-05, -3.611166692342822e-05, -3.596395508891228e-05, -3.595265209800612e-05, -3.558915731082855e-05, -3.636761922199513e-05, -3.558915731082855e-05, -3.636761922199513e-05, -3.919932047208551e-04, -3.897660753153826e-04, -3.917667126997362e-04, -3.867342696048027e-04, -3.399515867003228e-04, -3.667093721272070e-04, -3.704320553383281e-04, -3.741919797528568e-04, -2.682376133400256e-04, -4.707159999322915e-04, -2.682376133400256e-04, -4.707159999322915e-04, -3.300658239495384e-03, -2.590841043326018e-03, -3.451288788290157e-03, -2.599056987155639e-03, -1.839348003025001e-04, -1.572126351421698e-04, -1.854432167602875e-03, -1.980103958957816e-03, 6.962509266820030e-04, -1.287545441059291e-02, 6.962509266820126e-04, -1.287545441059293e-02, -9.681728550212778e-04, -6.506847191309193e-04, -1.038599129478332e-03, -6.640011361642486e-04, -1.557396418602551e-03, -1.006352146038393e-03, -4.805409589137221e-04, -5.366238451081846e-04, -1.503778102324795e-04, -3.583557968657454e-03, -1.503778102324795e-04, -3.583557968657454e-03, -6.938441533489207e-05, -6.981361912281631e-05, -6.994207029391057e-05, -7.032757748330590e-05, -6.943378362475150e-05, -6.982588534685857e-05, -6.989114329480923e-05, -7.031392940758770e-05, -6.966261134962157e-05, -7.007033234740284e-05, -6.966261134962157e-05, -7.007033234740284e-05, -8.768960610501703e-05, -8.881052957008287e-05, -9.004847121777616e-05, -9.132611068562981e-05, -8.620557718399401e-05, -8.641945060842736e-05, -8.839680160522171e-05, -8.855896640080579e-05, -8.891125933435131e-05, -9.227167594819424e-05, -8.891125933435131e-05, -9.227167594819424e-05, -1.627611454924017e-03, -1.788795452269277e-03, -2.651689909017146e-03, -2.893550343140798e-03, -1.525998288582135e-03, -1.245717160699968e-03, -2.101234239429816e-03, -1.624055364130989e-03, -1.325688024060870e-03, -2.406722666986799e-03, -1.325688024060872e-03, -2.406722666986797e-03, -1.635645592484370e-03, -1.479448808026641e-03, -1.877594414472554e-03, -1.756849464577805e-03, -1.934226118748077e-03, -1.210226970408636e-03, -2.163794675653137e-04, -2.189691717878903e-04, -2.334883677619475e-03, -1.854348937717049e-03, -2.334883677619471e-03, -1.854348937717049e-03, -4.244510034964417e-04, -3.186676009487762e-04, -5.182391901685366e-04, -4.328733562896517e-04, -1.214600842767205e-03, -9.253533637926845e-04, -1.521344579883145e-03, -1.606121485056404e-03, -1.207058576091656e-03, -4.153413015231637e-04, -1.207058576091658e-03, -4.153413015231626e-04, -1.606096653652804e-02, -1.602213575512743e-02, -8.293004155718011e-03, -8.124518619129181e-03, -9.967912739653256e-03, -9.835321722292142e-03, -1.204265752699814e-02, -1.185638335193487e-02, -1.090528366982024e-02, -1.074901973250200e-02, -1.090528366982024e-02, -1.074901973250201e-02, -1.480777102263489e-02, -1.493890909770083e-02, -1.951782645033494e-03, -1.864881421382865e-03, -2.612564021462993e-03, -2.518972673085321e-03, -3.981515081553247e-03, -3.815797680439320e-03, -3.141533732310194e-03, -3.021966090642527e-03, -3.141533732310187e-03, -3.021966090642533e-03, -1.965018043672357e-03, -2.220418510767626e-03, -1.879469487183378e-03, -1.758203588168953e-03, -1.980640724725733e-03, -1.808792362453945e-03, -2.280675175974379e-03, -2.090601712584318e-03, -2.100103667361923e-03, -2.144807117218804e-03, -2.100103667361930e-03, -2.144807117218797e-03, -1.781108699529889e-03, -1.748144014834001e-03, -1.303025401486478e-03, -1.206732087534528e-03, -1.492641772133198e-03, -1.142994743430104e-03, -2.921568029974000e-03, -3.389671287483417e-03, -2.249274102188722e-03, -1.638895331485042e-03, -2.249274102188724e-03, -1.638895331485040e-03, -7.663955034586759e-04, -5.910722709945474e-04, -2.302037115602842e-04, -2.267613007399470e-04, -6.969383701387412e-04, -5.102489868627894e-04, -2.032106064056830e-03, -1.930961486355323e-03, -1.717527817481118e-03, -3.982759753982965e-04, -1.717527817481116e-03, -3.982759753982951e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
