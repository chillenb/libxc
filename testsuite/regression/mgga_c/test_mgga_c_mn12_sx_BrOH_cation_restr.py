
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.804565608867903e-02, -9.804930148810077e-02, -9.806407986463644e-02, -9.801012528576210e-02, -9.803858804285488e-02, -9.803858804285488e-02, -1.536034238412870e-01, -1.535319597057866e-01, -1.516590971789619e-01, -1.524171519829456e-01, -1.523316348415549e-01, 6.430162523011473e-02, -3.266903032548466e-01, 1.175973256106243e-01, 1.192094943603815e-01, 1.192176582986021e-01, 1.193910133387898e-01, 1.193910133387898e-01, 2.973094678595161e-02, 3.345544212607803e-02, -6.556121064090097e-01, -1.330009308486050e-01, -4.283179090110295e-02, -4.283179090110300e-02, -7.790325364527845e-02, -8.130043160453497e-02, -2.769560545839170e-01, -4.866216625025028e-02, -5.932504856408343e-02, -5.932504856408343e-02, -2.683562497310644e-01, -2.696308534625351e-01, -2.684295348767353e-01, -1.093573546083632e-01, -2.689951044385568e-01, -2.689951044385568e-01, -1.900452058308204e-01, -1.770146764653759e-01, -2.009597592336884e-01, -1.885174518374456e-01, -1.777191251202591e-01, 9.244691306852458e-02, -3.948983809147991e-02, -8.631294256420119e-02, -3.769961287162970e-03, -4.004739473825398e-02, -4.769988293178315e-02, -3.360447954614140e-02, -4.985021730034352e-01, -3.651725929921331e-02, -4.847318917075437e-01, -8.497377560367156e-02, -1.842410600499612e-01, -1.842410600499607e-01, -3.888895636327178e-02, -4.770806133331297e-02, -3.758545053453895e-02, -4.017794510097645e-01, -4.459894027209344e-02, -4.435418860785918e-02, -7.615348752484720e-02, -1.078173996532072e-01, -4.409900493331227e-02, -9.226257820912001e-02, -9.718975713865292e-02, -9.718975713865292e-02, -8.139233342976217e-02, -1.949568943678560e-02, -4.882126628103509e-02, -8.077607166382819e-02, -6.279335436822213e-02, -3.042934813178429e-02, -7.464196517083437e-02, -3.804275296014596e-01, 5.976613091781873e-02, -1.080367516524499e-01, 5.075888132286949e-02, 5.075888132286947e-02, -7.385224825194645e-02, -2.707467420008280e-01, -3.117522385840386e-01, -2.306686957968647e-03, -4.443392484041653e-01, -2.867612510748949e-01, -1.036658962309744e-01, -1.439463801433917e-02, -2.847868468286880e-02, -2.888065602891572e-01, -4.140621400892471e-02, -4.140621400892475e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.973635575302646e-01, -2.973794708352496e-01, -2.974439048954455e-01, -2.972082648603322e-01, -2.973326552322275e-01, -2.973326552322275e-01, 2.886362867172725e-01, 2.885038655253441e-01, 2.850308823425824e-01, 2.864375409577244e-01, 2.862785312432188e-01, -5.052604554607734e-01, 4.198168406814489e-01, -4.077581508859041e-02, 5.551478138981619e-02, 9.606196559330730e-03, 1.993976043089189e-02, 1.993976043089189e-02, 7.037935541361569e-02, 5.077980006765562e-02, 2.554450694891256e-01, 2.440450520136857e-01, 2.314023550588539e-01, 2.314023550588538e-01, -9.933833206286324e-02, -1.035070772203807e-01, -2.953532583293186e-01, -6.281310606386058e-02, -7.622663251469523e-02, -7.622663251469523e-02, -4.945490626279808e-01, -4.938228844269593e-01, -4.945077813444511e-01, -2.479825820390071e-01, -4.941891520857740e-01, -4.941891520857740e-01, 3.494589968389284e-01, 3.273750882504207e-01, 3.673719035899745e-01, 3.469114737872027e-01, 3.285842935024074e-01, -3.917385956968225e-01, -1.761392999899785e-01, -1.851886356712297e-01, -2.317358499388178e-01, -1.695225408548619e-01, -1.655394010415256e-01, 1.907704017074573e-02, -4.855795674560702e-01, 2.536049605625925e-01, -4.893649159747168e-01, -3.166600117023119e-01, 1.706629706758770e-01, 1.706629706758793e-01, -5.043692491187411e-02, -6.160997740073853e-02, -4.866431691076096e-02, -4.517991721060947e-01, -5.771585552355219e-02, -5.730458057550654e-02, 5.186887028434498e-02, -4.126949627160147e-02, 5.336705293699830e-02, 2.411807242399750e-02, 1.026952643619291e-02, 1.026952643619291e-02, 4.289182779694644e-02, -1.935732188185544e-01, -1.458662391721002e-01, -1.700144021393430e-01, -1.518763199984945e-01, -6.760556811395278e-02, -1.787611567711057e-01, 1.537346877244684e-01, -2.126061118248298e-02, 1.933394219428664e-01, -1.409045928422495e-01, -1.409045928422500e-01, 1.355429112755574e-01, -2.926376245282608e-01, -2.973094251993560e-01, -1.820589315908144e-01, -4.551912554979547e-01, -8.504134147096273e-02, -1.310957914706636e-01, -1.887253257852192e-02, -3.705752042559898e-02, -1.090348023944145e-01, -5.354773259738532e-02, -5.354773259738509e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.419838443595086e-08, -1.419874232379275e-08, -1.420007660870307e-08, -1.419479123166501e-08, -1.419759693500182e-08, -1.419759693500182e-08, 2.869349178784546e-05, 2.867477287618980e-05, 2.818012150498087e-05, 2.836955591219399e-05, 2.836102268924523e-05, 9.641701399078021e-07, 6.542948252314786e-02, 3.203880337886622e-03, 3.161395185874712e-03, 3.263579569159159e-03, 3.240128285709882e-03, 3.240128285709882e-03, 1.479459257846070e+00, 1.481782107219844e+00, 5.129567403651934e-02, 7.484425653013889e-01, 1.202174564239459e+00, 1.202174564239459e+00, 6.490412867305830e-04, 7.919117478917002e-04, 3.068869144124217e-02, 1.142670388877641e-04, 3.171172229423373e-04, 3.171172229423373e-04, -7.028200168479636e-07, -7.126154797645598e-07, -7.033834772942811e-07, -5.803820568143503e-06, -7.077005394299596e-07, -7.077005394299596e-07, 4.414606178565122e-04, 3.975775877236612e-04, 4.773037188545915e-04, 4.357774404846268e-04, 4.004285709316509e-04, 1.822866496910642e-05, -1.763664713344039e-04, -8.419876329784767e-03, 6.867843630582868e-03, -5.094786440976931e-04, -1.840595815677706e-03, -5.983392877349145e-03, 1.866783354892798e+02, 5.903280473934541e-01, 2.316521898157327e+02, -1.113122144195646e-05, 9.279148887290403e-01, 9.279148887290376e-01, 3.171319554202701e+06, 8.974086203542741e-05, 1.457300647024750e-03, 6.687877933191644e+02, 2.001799875907188e+06, 4.629194365075183e-04, -1.253157539742507e-01, -4.956492929742230e-02, -8.916694849203646e-02, -8.643452491831401e-02, -7.521498858253561e-02, -7.521498858253561e-02, -1.207993857741183e-01, 6.982533398785030e-03, -5.786567778982711e-03, -1.898838149779599e-02, -1.211770915278390e-02, -2.919840884200063e-02, -4.604405397562078e-03, 8.202807832255086e+00, 2.808227051239813e-01, 4.597002062925590e-01, 1.779380244160698e-01, 1.779380244160700e-01, 8.826744837622863e-02, 2.763856949755724e-02, 5.495482007868378e-02, 7.597519298666724e-02, 4.186004512558268e+02, 4.930496242052766e-01, 4.282871926307307e-04, 1.025575107696177e-05, 2.049195312125459e-04, 4.931914618872513e-01, 6.944879648669423e-04, 6.944879653876873e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.133257624462764e-04, 1.133357065038195e-04, 1.133754995169993e-04, 1.132283212637255e-04, 1.133060709402597e-04, 1.133060709402597e-04, -3.423942294691085e-03, -3.423244973835106e-03, -3.404775380797752e-03, -3.411696918988768e-03, -3.411572258998458e-03, 3.350714136833402e-03, -7.499937944576893e-02, -7.107289937328776e-03, -1.466625850213499e-02, -1.136216515486226e-02, -1.213282968501639e-02, -1.213282968501639e-02, -2.202377468282627e-01, -2.075324593766009e-01, -4.006030274095863e-02, -2.907437446284077e-01, -3.038148242410582e-01, -3.038148242410567e-01, -4.241941897143271e-04, -5.111751227322416e-04, -2.637057993724108e-02, -6.475776552403135e-05, -1.736135871955345e-04, -1.736135871955345e-04, 5.328650293814201e-03, 5.355059037736878e-03, 5.330179943795012e-03, 1.885537130792540e-03, 5.341860518403124e-03, 5.341860518403124e-03, -1.074868015526986e-02, -1.032220691573416e-02, -1.107818824363825e-02, -1.069432967452894e-02, -1.035111916741694e-02, 6.347176534722865e-03, 5.789617171749942e-02, 1.138733881254698e-01, 5.404151579605732e-02, 6.131931701348718e-02, 6.152380579427310e-02, -2.647875016409733e-02, -5.869306641463627e-02, -2.404403625757286e-01, -4.934658637213993e-02, 1.261923619720441e-02, -3.058770410778493e-01, -3.058770410778515e-01, -3.568528714159067e-06, -5.363230466245549e-05, -1.998214282505075e-04, -2.134270478931400e-02, -2.211228730586706e-05, -1.313214632178334e-04, 2.388489479175574e-02, 6.499405459688526e-02, -2.659837893648898e-01, 1.476731061749603e-02, 2.190267218548679e-02, 2.190267218548679e-02, 9.272937782107058e-03, 6.502902058031512e-02, 7.951574497453666e-02, 1.507825127626645e-01, 1.072751433217447e-01, 2.666315849785239e-02, 8.257706504924975e-02, -3.171886604202654e-01, -7.603743951730257e-02, -1.892909045240794e-01, -1.240059313390071e-03, -1.240059313389903e-03, -1.015002101253339e-01, -2.392120882293710e-02, -4.596683750922227e-02, 8.740556341783703e-02, -5.658904235213704e-02, -1.927967649495662e-01, -5.376134332834939e-04, -1.415139051992845e-06, -3.537679776597030e-05, -1.839419964924659e-01, -1.495997704236048e-04, -1.495997704236334e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
