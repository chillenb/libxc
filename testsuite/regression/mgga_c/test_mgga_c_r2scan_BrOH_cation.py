
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_r2scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.298816375235344e-02, -9.298568721338819e-02, -9.297570311005131e-02, -4.906503973507324e-02, -3.682580831665506e-02, -2.649775654561644e-02, -4.405780271340158e-02, -2.343143711475510e-02, -2.345083374081598e-02, -2.344306413249203e-02, -2.344386286793691e-02, -4.414765620115341e-02, -8.150961507449384e-02, -4.647971321482122e-02, -1.848390790401512e-02, -3.568314273687066e-02, -8.200992690867871e-02, -1.854343415161391e-02, -2.389241180914085e-02, -3.057000974234918e-02, -3.276746098356810e-02, -1.054600010011522e-02, -5.687640899925303e-03, -5.811986467608658e-03, -7.807278492844306e-04, -7.971538029232525e-04, -5.022545674345904e-03, -3.764525995864948e-04, -6.120741167539253e-05, -6.120741167539256e-05, -3.359527930224315e-02, -2.639582289510034e-02, -2.638796212071840e-02, -2.639531952608724e-02, -4.067211757304318e-02, -3.356626773601596e-02, -4.379756077928432e-02, -4.366702473857421e-02, -2.222365143881064e-02, -2.234337394275367e-02, -6.138694618735699e-02, -4.367370692012997e-02, -3.249858602030816e-02, -2.307894142284926e-02, -2.100997467923626e-02, -2.183220488955209e-02, -3.003472865067202e-02, -2.204882203805689e-02, -7.527644816277856e-03, -2.220282857369511e-02, -1.201477644619376e-02, -2.439949179364129e-02, -1.598420115736330e-02, -1.598420115736330e-02, -2.478720254078897e-04, -1.272116292785276e-04, -3.286072043356872e-04, -8.555943578434450e-03, -3.463872459992632e-04, -3.463872459992607e-04, -2.382828192143561e-02, -2.356640459387389e-02, -2.837817993153868e-02, -2.539686001023311e-02, -2.795245481874260e-02, -2.553111030352088e-02, -2.510610813086436e-02, -4.536769086404108e-02, -3.093984092764856e-02, -2.264896307577675e-02, -2.225616947673967e-02, -2.965183799578672e-02, -3.742663423003648e-02, -2.601251323867359e-02, -2.931095748225820e-02, -3.380799182048450e-02, -3.313856970954904e-02, -3.306906407380371e-02, -2.034196138092380e-02, -1.805287463006499e-02, -3.805104132329280e-03, -3.217369783018591e-02, -6.494218543234304e-03, -6.494218543234329e-03, -6.334177164217780e-03, -2.456821447335689e-05, -1.766529314903255e-03, -2.900278300208124e-02, -6.559528918478083e-05, -4.277141043280958e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_r2scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.749342615255950e-02, 3.749283525550285e-02, 3.749181324880709e-02, 3.749081686998672e-02, 3.748345214075677e-02, 3.748455358914882e-02, -3.582290745114610e-02, -3.582452292347294e-02, -4.342313901351687e-02, -4.342491305588880e-02, -4.100962571379450e-02, -4.101068976019946e-02, -6.610498410679584e-02, -6.610735304577084e-02, -4.627777272492653e-02, -4.627892292771425e-02, -4.623973810542464e-02, -4.623821701310967e-02, -4.625554785660780e-02, -4.625451126518560e-02, -4.626708611700633e-02, -4.623945379702088e-02, -6.603953437621948e-02, -6.597438579931619e-02, -6.664901070844523e-02, -6.583887899320834e-02, -7.450130547480016e-02, -7.385680410403295e-02, -4.589306762395191e-02, -4.629565303099095e-02, -6.861491569693978e-02, -6.843493553036875e-02, -6.352513008803401e-02, -7.660916381034617e-02, -4.371263749698178e-02, -4.754822372583299e-02, -4.401212427484235e-02, -4.150049883485511e-02, -5.147914333956699e-02, -4.797810434938111e-02, -6.363193979552877e-02, -6.071993568330677e-02, -4.110420331423627e-02, -4.064862984420131e-02, -8.505082105389330e-03, -3.513026865326820e-02, -9.081712923330735e-03, -3.577092849533667e-02, -1.541790828687644e-03, -1.460290138364732e-03, -1.580065099770758e-03, -1.485194680392148e-03, -9.728892075651004e-03, -9.143167443911046e-03, -7.229540907344960e-04, -7.332533972921538e-04, -5.370480083629242e-05, -5.381490393616911e-04, -5.370480083629242e-05, -5.381490393616911e-04, -3.691233043881009e-02, -3.694150616787464e-02, -3.779750361495829e-02, -3.781795269525767e-02, -3.784034051636086e-02, -3.786062872677743e-02, -3.780047038080445e-02, -3.782045896334392e-02, -2.957006514458040e-02, -2.960990955865111e-02, -3.688054784052067e-02, -3.691021403096655e-02, -7.036980631370386e-02, -7.037788741821667e-02, -6.889447004319729e-02, -6.893876007948260e-02, -4.666589726766580e-02, -4.654489650283622e-02, -4.647967822803366e-02, -4.635295006311786e-02, -9.777219562162855e-02, -9.852597763171614e-02, -6.864131522188555e-02, -6.935484252534416e-02, -3.921691942843170e-02, -3.955352563931858e-02, -3.412419926931942e-02, -3.409119595278795e-02, -4.058125937645191e-02, -3.818844857144549e-02, -3.839872513952843e-02, -3.614854379594082e-02, -3.592865450617175e-02, -4.170510495506930e-02, -3.519243703615236e-02, -3.874841217278957e-02, -4.666506843659279e-02, -4.643995851721466e-02, -4.153682621487616e-02, -4.125265173118653e-02, -2.348855119538551e-02, -2.204065839992114e-02, -4.100033329328346e-02, -4.103487832638384e-02, -3.143099919243819e-02, -2.923002214734809e-02, -3.143099919243820e-02, -2.923002214734810e-02, -4.891264761369771e-04, -4.739124727693750e-04, -1.557739966945706e-02, -1.556976235175600e-02, -6.545441902338521e-04, -6.245558144291278e-04, -1.614251732283727e-02, -1.602515811755475e-02, -7.979436302043482e-04, -6.212985544415333e-04, -7.979436302043447e-04, -6.212985544415318e-04, -2.764773017368512e-02, -2.735807072657203e-02, -2.957398488369807e-02, -2.928462773460272e-02, -2.209252835083574e-02, -2.171094823494180e-02, -2.651812412077861e-02, -2.619902735262496e-02, -2.248941273761802e-02, -2.211877260156602e-02, -2.667676246936403e-02, -2.635333019135198e-02, -2.617845994366578e-02, -2.591029561779943e-02, -3.969320451012738e-02, -3.893109949740776e-02, -3.573187902318647e-02, -3.520704002262664e-02, -3.322809104295123e-02, -3.297760816100476e-02, -3.469251877712328e-02, -3.443251735093068e-02, -3.324129196186629e-02, -3.283262506679325e-02, -2.553823357066953e-02, -2.528973912596710e-02, -4.690789891567465e-02, -4.649209619084703e-02, -5.419908496326090e-02, -5.350580098421948e-02, -5.057718159099220e-02, -4.991134204409524e-02, -5.541723773869018e-02, -5.545125936220227e-02, -5.529593390999599e-02, -5.533002254798653e-02, -3.906063807153130e-02, -3.862079043263143e-02, -2.240705324819514e-02, -2.219516762979129e-02, -5.755684050881432e-02, -5.715930777405776e-02, -4.278389468051520e-02, -4.092870066345013e-02, -4.466816598986584e-02, -4.355224123242362e-02, -4.466816598986694e-02, -4.355224123242472e-02, -8.215110100419315e-03, -7.893141641564339e-03, -1.027566016390668e-02, -1.027548231234185e-02, -2.365589654226850e-03, -2.230732018889826e-03, -3.525737188418913e-02, -3.438415330190028e-02, -2.350268702268509e-04, -1.006739368308595e-04, -9.655663342321457e-04, -7.709758260106191e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.377411809870444e-09, 8.754823619740888e-09, 4.377411809870444e-09, 4.377211023347932e-09, 8.754422046695865e-09, 4.377211023347932e-09, 4.376363762021827e-09, 8.752727524043654e-09, 4.376363762021827e-09, 4.451178944988418e-10, 8.902357889976835e-10, 4.451178944988418e-10, 2.161662616941737e-10, 4.323325233883475e-10, 2.161662616941737e-10, 7.601086163972615e-11, 1.520217232794523e-10, 7.601086163972615e-11, 1.256880233144839e-06, 2.513760466289678e-06, 1.256880233144839e-06, 3.367757339455157e-07, 6.735514678910315e-07, 3.367757339455157e-07, 3.381833128655846e-07, 6.763666257311692e-07, 3.381833128655846e-07, 3.374618094443185e-07, 6.749236188886372e-07, 3.374618094443185e-07, 3.377156520622651e-07, 6.754313041245301e-07, 3.377156520622651e-07, 1.265463011222241e-06, 2.530926022444482e-06, 1.265463011222241e-06, 1.015810143694348e-02, 2.031620287388696e-02, 1.015810143694348e-02, 2.140888135499360e-03, 4.281776270998719e-03, 2.140888135499360e-03, 6.963440603675600e-04, 1.392688120735120e-03, 6.963440603675600e-04, 7.792824936918251e-04, 1.558564987383650e-03, 7.792824936918251e-04, 1.119781153602876e-02, 2.239562307205753e-02, 1.119781153602876e-02, 6.881418132218638e-04, 1.376283626443728e-03, 6.881418132218638e-04, 3.335260191124002e-01, 6.670520382248003e-01, 3.335260191124002e-01, 5.815467086817228e-01, 1.163093417363446e+00, 5.815467086817228e-01, 2.834895238435860e-04, 5.669790476871719e-04, 2.834895238435860e-04, 7.219448612197510e-01, 1.443889722439502e+00, 7.219448612197510e-01, 5.193220647524853e-02, 1.038644129504970e-01, 5.193220647524853e-02, 6.013737687013717e-02, 1.202747537402744e-01, 6.013737687013717e-02, 1.533118411163157e+02, 3.066236822326313e+02, 1.533118411163157e+02, 1.142486881762319e+02, 2.284973763524638e+02, 1.142486881762319e+02, 3.372969558685918e+00, 6.745939117371837e+00, 3.372969558685918e+00, 3.291529233455357e+02, 6.583058466910715e+02, 3.291529233455357e+02, 1.096757843766734e+01, 2.193515687533467e+01, 1.096757843766734e+01, 1.096757843766739e+01, 2.193515687533478e+01, 1.096757843766739e+01, 2.317571583115470e-07, 4.635143166230940e-07, 2.317571583115470e-07, 1.026230365597061e-07, 2.052460731194121e-07, 1.026230365597061e-07, 1.023607073483823e-07, 2.047214146967644e-07, 1.023607073483823e-07, 1.026068296508953e-07, 2.052136593017906e-07, 1.026068296508953e-07, 4.024902074694556e-07, 8.049804149389111e-07, 4.024902074694556e-07, 2.314432321798041e-07, 4.628864643596083e-07, 2.314432321798041e-07, 1.662475485363828e-05, 3.324950970727656e-05, 1.662475485363828e-05, 1.696209879683235e-05, 3.392419759366471e-05, 1.696209879683235e-05, 5.086925228323827e-06, 1.017385045664765e-05, 5.086925228323827e-06, 5.052428053178041e-06, 1.010485610635608e-05, 5.052428053178041e-06, 2.363367731984217e-05, 4.726735463968434e-05, 2.363367731984217e-05, 1.696694283928357e-05, 3.393388567856715e-05, 1.696694283928357e-05, 7.689854072415166e-03, 1.537970814483033e-02, 7.689854072415166e-03, 2.360727006161543e-03, 4.721454012323087e-03, 2.360727006161543e-03, 3.213796698606913e-03, 6.427593397213827e-03, 3.213796698606913e-03, 3.217327683893604e-03, 6.434655367787209e-03, 3.217327683893604e-03, 6.408542081288063e-03, 1.281708416257613e-02, 6.408542081288063e-03, 2.562203366676958e-03, 5.124406733353916e-03, 2.562203366676958e-03, 2.628007100681230e+00, 5.256014201362460e+00, 2.628007100681230e+00, 1.867114958198944e-01, 3.734229916397888e-01, 1.867114958198944e-01, 7.053067753355088e-01, 1.410613550671018e+00, 7.053067753355088e-01, 9.412230705157681e-06, 1.882446141031536e-05, 9.412230705157681e-06, 6.414365580583726e-01, 1.282873116116745e+00, 6.414365580583726e-01, 6.414365580583727e-01, 1.282873116116745e+00, 6.414365580583727e-01, 3.442580883974655e+02, 6.885161767949311e+02, 3.442580883974655e+02, 2.679594514637255e+04, 5.359189029274509e+04, 2.679594514637255e+04, 1.829487705389805e+03, 3.658975410779611e+03, 1.829487705389805e+03, 1.725198721810490e+00, 3.450397443620979e+00, 1.725198721810490e+00, 6.359696234478412e+02, 1.271939246895683e+03, 6.359696234478412e+02, 6.359696234478417e+02, 1.271939246895683e+03, 6.359696234478417e+02, 4.939143478037893e-03, 9.878286956075786e-03, 4.939143478037893e-03, 4.567771392175055e-03, 9.135542784350111e-03, 4.567771392175055e-03, 8.430743924715524e-03, 1.686148784943105e-02, 8.430743924715524e-03, 6.043506156314476e-03, 1.208701231262895e-02, 6.043506156314476e-03, 8.116015451744629e-03, 1.623203090348926e-02, 8.116015451744629e-03, 6.120236509598666e-03, 1.224047301919733e-02, 6.120236509598666e-03, 6.696193920728445e-03, 1.339238784145689e-02, 6.696193920728445e-03, 2.469686948440080e-02, 4.939373896880159e-02, 2.469686948440080e-02, 1.435037825347808e-02, 2.870075650695616e-02, 1.435037825347808e-02, 5.266349665118228e-03, 1.053269933023646e-02, 5.266349665118228e-03, 5.269382482223428e-03, 1.053876496444686e-02, 5.269382482223428e-03, 1.274420040503510e-02, 2.548840081007020e-02, 1.274420040503510e-02, 6.338035808313386e-03, 1.267607161662677e-02, 6.338035808313386e-03, 1.159626317036328e-01, 2.319252634072655e-01, 1.159626317036328e-01, 4.991756586730972e-02, 9.983513173461944e-02, 4.991756586730972e-02, 5.863364914032126e-02, 1.172672982806425e-01, 5.863364914032126e-02, 6.356186757933817e-02, 1.271237351586763e-01, 6.356186757933817e-02, 6.385626625433585e-02, 1.277125325086717e-01, 6.385626625433585e-02, 7.231753157117427e-03, 1.446350631423485e-02, 7.231753157117427e-03, 6.234388298292655e+02, 1.246877659658531e+03, 6.234388298292655e+02, 3.115102401794585e+01, 6.230204803589169e+01, 3.115102401794585e+01, 9.163754028723969e-02, 1.832750805744794e-01, 9.163754028723969e-02, 6.808724113315514e+00, 1.361744822663103e+01, 6.808724113315514e+00, 6.808724113315731e+00, 1.361744822663146e+01, 6.808724113315731e+00, 3.499252500327313e+04, 6.998505000654623e+04, 3.499252500327313e+04, 1.035945961773827e+06, 2.071891923547654e+06, 1.035945961773827e+06, -3.855188812758759e+07, -7.710377625517517e+07, -3.855188812758759e+07, 5.451771426152620e+01, 1.090354285230524e+02, 5.451771426152620e+01, 1.166018413300346e+02, 2.332036826600692e+02, 1.166018413300346e+02, 3.287161882459885e+03, 6.574323764919770e+03, 3.287161882459885e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_r2scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_r2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.935798095728372e-05, -7.935798095728372e-05, -7.935737300055822e-05, -7.935737300055826e-05, -7.935463401850623e-05, -7.935463401850622e-05, -3.547814115215402e-05, -3.547814115215401e-05, -2.295888900203136e-05, -2.295888900203136e-05, -1.034881741139255e-05, -1.034881741139255e-05, -5.100472042019231e-04, -5.100472042019227e-04, -1.896369096575843e-04, -1.896369096575841e-04, -1.905143551210254e-04, -1.905143551210255e-04, -1.901252799601861e-04, -1.901252799601861e-04, -1.902070537853696e-04, -1.902070537853696e-04, -5.128984289139666e-04, -5.128984289139670e-04, -2.458980613572502e-03, -2.458980613572502e-03, -1.729809725285418e-03, -1.729809725285676e-03, -2.574834218435981e-03, -2.574834218435980e-03, 2.257807718958216e-05, 2.257807718958216e-05, -2.091155293835394e-03, -2.091155293835395e-03, -2.590809032771115e-03, -2.590809032771116e-03, -8.534243082634316e-03, -8.534243082634316e-03, -7.195811697492138e-03, -7.195811697492141e-03, -5.207237671034263e-04, -5.207237671034263e-04, -2.342702026370850e-02, -2.342702026370851e-02, -1.763808604669934e-03, -1.763808604669934e-03, -2.128103637492890e-03, -2.128103637492891e-03, -8.395576962123352e-07, -8.395576962123361e-07, -1.629110143116797e-06, -1.629110143116798e-06, -3.234409971442941e-05, -3.234409971442941e-05, -2.853467126599153e-07, -2.853467126599153e-07, -1.125914964019848e-06, -1.125914964019893e-06, -1.125914964019890e-06, -1.125914964019881e-06, -3.736084236453908e-04, -3.736084236453908e-04, -2.054415378762064e-04, -2.054415378762064e-04, -2.047537250871309e-04, -2.047537250871309e-04, -2.053979062012585e-04, -2.053979062012586e-04, -5.329894219525705e-04, -5.329894219525704e-04, -3.734126331160791e-04, -3.734126331160790e-04, -1.089172338930964e-03, -1.089172338930966e-03, -1.169525046515679e-03, -1.169525046515679e-03, -4.998208857151004e-04, -4.998208857151004e-04, -5.064940829080562e-04, -5.064940829080563e-04, -4.682309876235775e-04, -4.682309876235822e-04, -1.165682920827192e-03, -1.165682920827193e-03, -1.799047102992769e-02, -1.799047102992769e-02, -8.406591664420563e-03, -8.406591664420572e-03, -6.876015733941774e-03, -6.876015733941775e-03, -7.804798094645553e-03, -7.804798094645558e-03, -1.635202943539147e-02, -1.635202943539147e-02, -7.356012399676520e-03, -7.356012399676520e-03, -2.997060942223248e-02, -2.997060942223250e-02, -3.045529898872338e-03, -3.045529898872340e-03, -2.739879516700085e-04, -2.739879516700086e-04, -9.126595054753550e-04, -9.126595054753550e-04, -1.091519398950435e-03, -1.091519398950435e-03, -1.091519398950436e-03, -1.091519398950435e-03, -2.328230630159994e-07, -2.328230630159993e-07, -1.675831718647775e-02, -1.675831718647776e-02, -7.404650493012293e-07, -7.404650493012289e-07, -1.096032635895615e-04, -1.096032635895615e-04, -6.245543326425085e-07, -6.245543326425083e-07, -6.245543326425000e-07, -6.245543326425000e-07, -1.430018053922488e-02, -1.430018053922488e-02, -1.289248818617730e-02, -1.289248818617730e-02, -2.122896439241432e-02, -2.122896439241435e-02, -1.647096644798361e-02, -1.647096644798362e-02, -2.069005114576421e-02, -2.069005114576420e-02, -1.654859300248657e-02, -1.654859300248656e-02, -1.705260412674965e-02, -1.705260412674966e-02, -2.354483599681233e-02, -2.354483599681233e-02, -2.308805321950479e-02, -2.308805321950479e-02, -1.128992916393110e-02, -1.128992916393110e-02, -1.049422648816380e-02, -1.049422648816380e-02, -2.223523558135179e-02, -2.223523558135180e-02, -1.998692375721471e-02, -1.998692375721473e-02, -5.657125558458101e-03, -5.657125558458099e-03, 1.060899734159702e-04, 1.060899734159702e-04, -2.373017004124621e-02, -2.373017004124624e-02, -1.073263863828477e-02, -1.073263863828479e-02, -1.097088012116601e-02, -1.097088012116608e-02, -8.978236190948452e-03, -8.978236190948452e-03, -2.761222357999062e-05, -2.761222357999064e-05, -4.624059079618650e-02, -4.624059079618649e-02, -3.770085430578732e-02, -3.770085430578732e-02, -3.887664906142527e-02, -3.887664906142529e-02, -3.887664906142659e-02, -3.887664906142660e-02, -5.650953055119701e-07, -5.650953055119703e-07, -1.237869971352735e-02, -1.237869971352735e-02, -4.100206599857105e-08, -4.100206599857103e-08, -3.324531959209556e-04, -3.324531959209555e-04, -1.372177204740018e-05, -1.372177204740027e-05, -1.359322790851334e-07, -1.359322790851334e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
