
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.673372006262774e-01, -2.673495605337244e-01, -2.674050537274953e-01, -2.672040254450032e-01, -2.673436983917158e-01, -2.673436983917158e-01, -3.209503780699861e-02, -3.209813875347640e-02, -3.218280452277874e-02, -3.197573091327587e-02, -3.209700144071657e-02, -3.209700144071657e-02, -3.408479884438746e-02, -3.391706252225071e-02, -2.898433795663458e-02, -2.821266116242907e-02, -3.402280250181600e-02, -3.402280250181600e-02, -1.285603059599050e-02, -1.348508126460052e-02, -5.842550750389751e-02, -1.975692003015872e-02, -1.306350134028646e-02, -1.306350134028646e-02, -1.208478750739909e-02, -1.252354718850541e-02, -2.949350525544500e-02, -6.651339111652025e-03, -1.241809390985875e-02, -1.241809390985876e-02, -2.802707983534087e-01, -2.821433876430589e-01, -2.804868429862289e-01, -2.819413857021913e-01, -2.811975434085755e-01, -2.811975434085755e-01, -1.420370897805551e-02, -1.373610768649336e-02, -1.395634197977511e-02, -1.354010266864513e-02, -1.427779735551657e-02, -1.427779735551657e-02, -4.176253961259609e-02, -5.730356913549234e-02, -3.481154149617533e-02, -5.491844957369931e-02, -5.134847543387718e-02, -5.134847543387718e-02, -2.650291691378263e-02, -9.664206054648241e-03, -2.529532391156227e-02, -8.131864440688981e-02, -1.807156861231912e-02, -1.807156861231912e-02, -6.446474205370268e-03, -7.223941427822597e-03, -5.632789617116689e-03, -3.226485314436011e-02, -6.672920256932785e-03, -6.672920256932785e-03, 1.020913155271368e-02, -3.077484269351584e-02, -1.672693174096160e-02, -5.111952415272843e-03, -1.096197274847141e-02, -1.096197274847141e-02, 3.904781976390832e-02, -2.979197646196736e-02, -5.319700320844517e-02, -7.052742593581245e-02, -6.432820698983945e-02, -6.432820698983945e-02, -6.103293406355379e-02, -1.110388147035230e-02, -1.525840214398565e-02, -2.225845463141695e-02, -1.795949952721673e-02, -1.795949952721672e-02, -2.315184703136871e-02, -2.898203183044557e-02, -3.135815148509609e-02, -2.632021492321258e-02, -2.609797955796747e-02, -2.609797955796742e-02, -1.375936114122312e-02, -2.294883632408059e-03, -4.093986050582156e-03, -2.552546636803237e-02, -5.801174627719609e-03, -5.801174627719640e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.000552281127758e+00, -1.000571293878036e+00, -1.000666567925021e+00, -1.000357751508717e+00, -1.000562184960475e+00, -1.000562184960475e+00, -9.602232599511805e-02, -9.608119814387574e-02, -9.785784603580047e-02, -9.696049041748145e-02, -9.603999882146688e-02, -9.603999882146688e-02, -6.500272752574647e-02, -6.515260811115375e-02, -6.752858354343949e-02, -6.561959904768963e-02, -6.505405424444363e-02, -6.505405424444363e-02, -4.043070533001369e-02, -4.070853112378101e-02, -7.214561455223617e-02, -9.208130169109947e-03, -4.057630759396502e-02, -4.057630759396502e-02, -1.497407498172771e-02, -1.546738250764973e-02, -2.673271469295383e-02, -8.527865462692788e-03, -1.533999141759657e-02, -1.533999141759636e-02, -6.047350115640712e-01, -6.037413298392434e-01, -6.046660544932345e-01, -6.038920698418572e-01, -6.041879066052068e-01, -6.041879066052068e-01, -3.138389431927201e-02, -3.458755891505511e-02, -2.926091894131354e-02, -3.124982669264850e-02, -3.707703475792899e-02, -3.707703475792899e-02, -1.376206588768916e-01, -6.648895104136430e-03, -1.014529094664843e-01, -1.042814330553200e-01, -1.505810521004895e-01, -1.505810521004895e-01, -3.944101669204996e-03, -2.237667886759487e-02, -3.238180809787257e-03, -1.649904057725346e-01, 9.766784236431051e-04, 9.766784236431051e-04, -8.265872648206629e-03, -9.236564569612882e-03, -7.230842303022525e-03, -2.372095214922140e-02, -8.547826646776091e-03, -8.547826646776098e-03, 3.237130708424735e-02, 1.072577348967026e-01, 9.689772893778738e-02, 7.704891988507855e-02, 8.840891288379835e-02, 8.840891288379835e-02, 7.423547133607253e-02, -1.325050863133276e-01, -1.633810929487601e-01, -6.714310788634409e-02, -1.355308075707516e-01, -1.355308075707516e-01, -6.141152424657476e-02, -4.002803623088585e-02, -4.166738164381262e-02, -4.948573033097234e-02, -3.852311457922362e-02, -3.852311457922362e-02, -7.589090519128340e-02, -2.779686070679291e-02, -2.420532081007689e-02, -6.840810315593614e-02, -6.553610354817968e-03, -6.553610354818678e-03, -1.705102262750652e-02, -2.995396934668851e-03, -5.298318073263060e-03, -6.976725452521806e-03, -7.454059618740403e-03, -7.454059618740386e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.638710779163478e-10, -2.639063034023529e-10, -2.640476148855572e-10, -2.634744720970815e-10, -2.638897458206589e-10, -2.638897458206589e-10, 1.224971134241957e-06, 1.225171602602476e-06, 1.230416635012364e-06, 1.220080116863358e-06, 1.225048744646286e-06, 1.225048744646286e-06, 2.247882474367590e-03, 2.239344593687230e-03, 1.979599114596294e-03, 1.846754376457745e-03, 2.244738185184122e-03, 2.244738185184122e-03, 3.115174641457514e-01, 3.120122445439591e-01, 1.865652747966030e-03, 5.465698368440720e-01, 3.122926700110483e-01, 3.122926700110483e-01, 1.753002533525040e-01, 1.887860773187678e-01, 3.654339378941065e-01, 3.299073582819606e-02, 1.967675450983618e-01, 1.967675450983617e-01, -1.180875758337512e-06, -1.207934493742806e-06, -1.183756453904720e-06, -1.204782645988914e-06, -1.194499641275721e-06, -1.194499641275721e-06, 6.807498137093491e-06, 6.808791099023436e-06, 6.586955059512287e-06, 6.588182130911633e-06, 7.105994793349981e-06, 7.105994793349981e-06, 5.530583781864431e-03, -1.028701172190892e-02, 8.383417327548172e-03, 6.110639440777290e-03, 2.856138160948612e-03, 2.856138160948612e-03, 4.271971026029021e-01, 1.631746976140241e-01, 5.188386561000551e-01, 2.681749296244916e-05, 5.615993943451174e-01, 5.615993943451174e-01, 3.399515007699315e-02, 4.233730062352983e-02, 1.281399161587175e-01, 5.644731139104318e-01, 6.540403846929162e-02, 6.540403845750599e-02, -2.234647173135305e-01, -1.216101234267777e-01, -1.508362840028143e-01, -1.785143618844269e-01, -1.640380577480020e-01, -1.640380577480020e-01, -2.222257625718627e-01, 7.729906745056095e-03, 1.493640301841125e-03, -2.276373670643416e-02, -6.680702040392443e-03, -6.680702040392447e-03, -1.739066450105903e-03, 8.072483974169521e-02, 5.477567615291738e-02, 3.998215950671318e-02, 4.610221317838242e-02, 4.610221317838241e-02, 1.361347999536017e-02, 2.548264581549262e-01, 3.818740927329150e-01, 6.904938771219747e-02, 7.370105416541805e-01, 7.370105416541842e-01, 1.450611422523701e-01, 1.064278158074486e-02, 2.586240595715707e-02, 9.537165748109675e-01, 8.848479649020427e-02, 8.848479651616128e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.788623844366695e-04, 4.788834326963324e-04, 4.789795836275396e-04, 4.786377178446839e-04, 4.788734296204355e-04, 4.788734296204355e-04, -8.789830957527144e-05, -8.750398021343733e-05, -7.541312795449107e-05, -8.012292150943270e-05, -8.778818319838233e-05, -8.778818319838233e-05, -3.363435265184506e-03, -3.336372953345851e-03, -2.661528950930109e-03, -2.620936853390187e-03, -3.353746929134468e-03, -3.353746929134468e-03, -1.357197960931427e-02, -1.440888250335650e-02, -3.673771574280062e-03, -2.922416753200463e-02, -1.381869664447875e-02, -1.381869664447875e-02, -4.317260214336684e-04, -4.876058751821540e-04, -7.275030255718746e-03, -1.919592917081931e-05, -4.952263403420699e-04, -4.952263403419914e-04, 8.315749443299606e-03, 8.397070954704910e-03, 8.325161515672051e-03, 8.388321973822131e-03, 8.355769302834038e-03, 8.355769302834038e-03, -7.841357643963965e-04, -7.455425802901605e-04, -7.938150618063543e-04, -7.739507173178034e-04, -7.305221427638928e-04, -7.305221427638928e-04, 2.322304640119685e-02, -2.151451632242889e-02, 6.456403430087968e-03, 1.400737105492796e-02, 3.496180544577302e-02, 3.496180544577302e-02, -2.421719893646309e-02, -1.584071209879707e-02, -2.642683172284861e-02, 2.805164306790696e-03, -3.298169374858470e-02, -3.298169374858470e-02, -2.640531822645558e-05, -3.199920126369253e-05, -5.510310283041372e-05, -1.151305515543974e-02, -3.023084757432131e-05, -3.023084757437680e-05, 4.555354412701542e-01, 1.275895307709372e-01, 1.988914149049189e-01, 2.845632175393864e-01, 2.376249360790722e-01, 2.376249360790722e-01, 1.352631354430917e-01, 2.954093549462776e-02, 6.758264456885059e-02, 5.979435897245213e-02, 7.298140772695991e-02, 7.298140772695992e-02, -5.293083492922937e-04, -6.842800919144760e-03, -9.555341465896572e-03, -1.226143892308858e-02, -1.511543818019708e-02, -1.511543818019706e-02, 7.503874607914097e-04, -5.666060275431484e-03, -1.030292358947103e-02, -1.870989285448660e-03, -2.675191578756740e-02, -2.675191578756744e-02, -2.633305953402632e-04, -8.411390254450963e-07, -1.065069568555877e-05, -2.849595166631435e-02, -2.667732401649448e-05, -2.667732401658913e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
