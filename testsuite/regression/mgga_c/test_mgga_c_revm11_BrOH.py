
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.118014932440459e-01, -1.117964573059067e-01, -1.117744945152213e-01, -1.118564080604789e-01, -1.117988399846382e-01, -1.117988399846382e-01, -1.108614723167065e-01, -1.108598975366758e-01, -1.108150976103498e-01, -1.108343701891013e-01, -1.108611705663678e-01, -1.010549912379114e-02, -8.829059011176166e-02, -1.256185758788021e-02, -1.101510729697138e-02, -1.174237774212183e-02, -1.259581549476865e-02, -1.259581549476865e-02, -1.102403771691916e-02, -1.139753501788237e-02, -1.293378370194591e-01, -1.563732471830908e-02, -1.113170291253507e-02, -1.113170291253507e-02, -1.208475833146351e-02, -1.252350181983844e-02, -2.945069246311506e-02, -6.651329641368680e-03, -1.241805482442288e-02, -1.241805482442290e-02, -2.809893761763370e-01, -2.828703224537953e-01, -2.811972339854084e-01, -1.332441247988414e-02, -2.819326910425319e-01, -2.819326910425319e-01, -9.751910864678774e-02, -9.695429649648331e-02, -9.781493004860620e-02, -9.730935766827625e-02, -9.681663846172235e-02, -1.122609095873978e-02, -3.355017746891775e-02, -7.735034236419117e-02, -2.095933038905115e-02, -4.394231392777374e-02, -4.731048717586051e-02, -6.273862692448669e-02, -1.512345540930748e-01, -8.468357445929865e-03, -1.469958878262272e-01, -6.587676078315502e-02, -1.679806219254141e-02, -1.679806219254141e-02, -2.476647715265029e-02, -7.223928379335303e-03, -5.632784686736710e-03, -1.448677515702146e-01, -2.563989025659817e-02, -6.672904932902765e-03, -3.931783991169646e-02, -5.666292423675096e-02, 6.691591727600345e-02, -4.412028175055351e-02, -4.662721877170320e-02, -4.662721877170320e-02, -4.176758318008483e-02, -2.877388107372058e-02, -5.290634560649460e-02, -7.642780421007697e-02, -6.591108635424726e-02, -4.961957641517220e-02, -6.614098170296383e-02, -7.109513942613895e-02, -1.302001626438178e-02, -5.340850064939081e-02, -1.423574173417867e-02, -1.423574173417868e-02, -5.769979218012278e-02, -2.896615825936475e-02, -3.124614473059403e-02, -1.698792939420296e-02, -1.414644681894306e-01, -2.553768458718102e-02, -1.375879275259647e-02, -2.294883556608995e-03, -4.093985705592939e-03, -2.492152744353127e-02, -5.801163737757607e-03, -5.801163737757638e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.955522247364914e-01, 1.955737314223185e-01, 1.956677652260150e-01, 1.953178423625243e-01, 1.955635542966769e-01, 1.955635542966769e-01, -1.085454647740127e-01, -1.085683156574890e-01, -1.092521920053268e-01, -1.089904862891183e-01, -1.085519329541992e-01, -6.036219951401661e-02, -9.917909144463576e-04, -4.365136579225561e-02, -4.558497613268718e-02, -4.531185876511529e-02, -4.354378446243171e-02, -4.354378446243171e-02, -3.776719193186906e-02, -3.782848029621023e-02, 4.450821608070990e-02, 7.412275963386239e-03, -3.781511191247060e-02, -3.781511191247060e-02, -1.497388612384179e-02, -1.546708907478101e-02, -2.647127752386141e-02, -8.527803565091575e-03, -1.533973860073538e-02, -1.533973860073520e-02, -6.078615519930581e-01, -6.068741293856483e-01, -6.077537166145495e-01, 3.353827548538778e-01, -6.073712033763529e-01, -6.073712033763529e-01, -7.283706970763741e-02, -7.720177355040025e-02, -7.087985843862314e-02, -7.440003485388344e-02, -7.830084139218067e-02, -2.994962076099132e-02, -1.553566847360781e-01, -1.535330060393351e-01, -9.941646634135165e-02, -1.768438792025944e-01, -1.845625468547611e-01, -4.373663289776484e-02, -8.365448601178686e-02, -1.911030641913573e-02, -7.685865302277928e-02, -3.177289104117726e-01, 6.591644348261871e-03, 6.591644348261871e-03, -3.181503635243185e-02, -9.236479365959635e-03, -7.230810043212590e-03, -1.359009957687589e-01, -3.291030699374578e-02, -8.547726511586600e-03, 4.446416249541538e-02, 8.597767415025021e-02, 1.101329881614439e-01, 7.113449463783723e-02, 7.772434265693901e-02, 7.772434265693901e-02, 7.078071550229907e-02, -1.335085102304319e-01, -1.732605964224097e-01, -9.803970849843127e-02, -1.549024290981352e-01, 3.324482351479385e-02, -1.935699190301977e-01, 1.719066476653001e-02, -3.831476933576191e-02, -4.384550601817345e-02, -3.264695744627438e-02, -3.264695744627438e-02, -6.227292372671779e-02, -2.769894416740203e-02, -2.353781454485776e-02, -6.183017133179310e-02, -9.063707299857728e-02, -3.582503258345406e-03, -1.704734808132044e-02, -2.995396435258521e-03, -5.298315809061494e-03, -3.777112293999854e-03, -7.453988366337541e-03, -7.453988366337523e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.117172284323146e-08, -1.117292917204572e-08, -1.117810975400988e-08, -1.115849746840773e-08, -1.117235896139698e-08, -1.117235896139698e-08, 1.318434660369506e-05, 1.318423205354128e-05, 1.317856784117881e-05, 1.317662679253950e-05, 1.318406402236787e-05, 4.460745315090101e-07, 1.138276199451307e-02, 5.269992936688587e-04, 5.104962422103461e-04, 5.281863031338281e-04, 5.275411984643324e-04, 5.275411984643324e-04, 2.521604355442952e-01, 2.469540762337768e-01, 7.694875676130959e-03, 2.107075117457408e-01, 2.504242420092441e-01, 2.504242420092441e-01, 1.650079469192295e-01, 1.748728065588841e-01, 2.409344856242312e-01, 1.102586372750344e-02, 1.841396517953284e-01, 1.841396517939763e-01, -1.173659816053936e-06, -1.200596765703709e-06, -1.176618849481159e-06, -9.771221201142881e-06, -1.187097874031340e-06, -1.187097874031340e-06, 1.305767814891312e-04, 1.272508342241260e-04, 1.319712802263993e-04, 1.292972735618976e-04, 1.266241765833165e-04, 5.810477884293273e-06, 3.620907757790667e-03, -5.851617796023932e-03, 4.508475560915750e-03, 2.909390531416085e-03, 2.016434363250752e-03, 6.378991177988808e-03, 8.705751107698296e+01, 1.356410377713853e-01, 9.031344756969327e+01, 7.347137632103428e-06, 3.695276358967782e-01, 3.695276358967782e-01, 2.056631182859716e+07, 1.830014621426339e-02, 8.914894713599174e-02, 6.829756610188350e+02, 1.749091051884304e+07, 2.153717708454461e-02, -2.046947723134431e-01, -1.127920166053099e-01, -1.839910353634159e-01, -1.643355403631117e-01, -1.512673848133449e-01, -1.512673848133449e-01, -1.875255302505378e-01, 7.316602286439347e-03, 1.382347527085283e-03, -2.052199446586068e-02, -6.080377903377072e-03, -1.419231994363874e-02, -8.679342760572029e-04, 9.905566871698536e-01, 4.367302070744562e-02, 1.261905384062536e-01, 3.433900401840553e-02, 3.433900401840554e-02, 4.547196220133379e-02, 2.004120506849007e-01, 2.293632543500612e-01, 4.297485548713416e-02, 2.081601450436370e+02, 4.538137599650183e-01, 5.105966224659824e-02, 2.374839217997768e-03, 1.990066650341550e-02, 5.661933285789482e-01, 2.752162756768564e-02, 2.752162758363247e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.842419230693480e-04, -1.842554722821420e-04, -1.843139972975745e-04, -1.840936697758203e-04, -1.842490655197340e-04, -1.842490655197340e-04, -8.904208266448648e-05, -8.887726899295249e-05, -8.392390854604297e-05, -8.582773432943975e-05, -8.899559211152319e-05, -8.745106625541737e-05, -9.154510453447617e-03, -1.041793706634671e-03, -5.759719318541812e-04, -7.291874535714787e-04, -1.059899758528577e-03, -1.059899758528577e-03, -1.089680330203127e-02, -1.141169291560886e-02, -8.214313699938915e-03, -2.729078781675012e-02, -1.100940616192250e-02, -1.100940616192250e-02, -4.317256846870496e-04, -4.876053046459898e-04, -7.271716378353414e-03, -1.919592031712013e-05, -4.952258369028017e-04, -4.952258369027233e-04, 8.351863260756844e-03, 8.433483965077234e-03, 8.360850735384054e-03, -5.071996029106992e-03, 8.392654102138573e-03, 8.392654102138573e-03, -6.542096052374078e-04, -5.730682143943868e-04, -6.897241715229137e-04, -6.252778180682179e-04, -5.525360912123146e-04, -7.371028163568027e-04, 3.265737144522500e-02, 7.931435178388258e-02, 9.453726588063985e-03, 5.094014553954555e-02, 5.185746262924170e-02, -1.269660328561730e-02, -5.742667663119960e-02, -1.487480332073565e-02, -6.341622880402036e-02, 1.050625578264430e-02, -3.231498000240961e-02, -3.231498000240961e-02, -5.071218074007418e-05, -3.199918254308587e-05, -5.510308720976464e-05, -2.393109426411017e-02, -5.806301155920074e-05, -3.023082508786912e-05, 6.327976378525942e-01, 2.191998631561301e-01, -9.725901290975575e-02, 4.231199987529528e-01, 3.640678059749826e-01, 3.640678059749826e-01, 4.405165048759317e-01, 3.053015385877541e-02, 7.455910872822485e-02, 9.171977941980659e-02, 8.873727758160196e-02, -7.342726641806271e-02, 6.505024954189129e-02, -5.814399857328491e-02, -8.218362568569844e-03, -1.038745823431966e-02, -1.456916177151474e-02, -1.456916177151472e-02, -1.406628094202557e-03, -5.665081529669940e-03, -1.029152321314177e-02, -1.333378040516091e-03, -6.152642055002782e-02, -2.658302809443295e-02, -2.633270792741163e-04, -8.411390164419135e-07, -1.065069539476704e-05, -2.829714524890761e-02, -2.667730779464559e-05, -2.667730779474025e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
