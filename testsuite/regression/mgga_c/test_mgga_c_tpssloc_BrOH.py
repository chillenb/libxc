
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpssloc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698520197e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -2.773770720640798e-02, -6.686302819127442e-02, -3.154801090437328e-03, -2.000300913307435e-03, -2.450314438130553e-03, -3.190098246354970e-03, -3.190098246354970e-03, -3.520163419260405e-03, -3.929525425189933e-03, -7.129454252820250e-02, -1.129712198507041e-04, -3.632881092810398e-03, -3.632881092810398e-03, -2.516484399695068e-10, -3.348953353440497e-10, -3.289869949816098e-07, -2.581788700235634e-13, -3.420396139172093e-10, -3.420396180155222e-10, -4.562522960196611e-02, -4.567373067960451e-02, -4.563059466615123e-02, -1.224181159734425e-01, -4.564956223837758e-02, -4.564956223837758e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572412e-02, -9.491339721119328e-02, -2.092202246743147e-02, -2.730421600324313e-02, -3.533667672533236e-02, -2.155757019506536e-02, -2.993971343724700e-02, -3.081006605859208e-02, -6.444458984389427e-02, -2.795790560897061e-02, -7.035235166724199e-04, -2.775589238622643e-02, -3.705529081192181e-02, -9.812166421214825e-05, -9.812166421214825e-05, -3.066310498112501e-03, -7.826379081683615e-13, -1.771745023187731e-12, -2.111687625325582e-02, -3.174878197427740e-03, -6.415002196301403e-13, -3.593519831113311e-02, -3.619172182631313e-02, -6.421258200260356e-02, -3.603283176983282e-02, -3.607033381907123e-02, -3.607033381907123e-02, -3.573318677528803e-02, -2.514224774630194e-02, -3.135596867476870e-02, -3.485155191707332e-02, -3.338745173524131e-02, -6.165502636499921e-02, -3.412812302323882e-02, -4.342835275928391e-02, -4.259702587354928e-03, -5.212060951466563e-02, -8.297063245154054e-03, -8.297063245154059e-03, -5.782933926396749e-02, -1.780092805417398e-07, -9.215760281117552e-07, -1.715055291353152e-02, -2.479856847389609e-02, -1.640174604222499e-05, -1.087719475841983e-10, -1.585213233469657e-16, -4.769011085884964e-14, -1.752501985303892e-05, -4.303379347966144e-13, -4.303443100334452e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpssloc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821486222e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -9.197441836053843e-02, -7.491623656166166e-02, -2.660956284404782e-02, -1.792144705360257e-02, -2.250008776144413e-02, -2.686121410413982e-02, -2.686121410413982e-02, -2.541222961971360e-02, -2.774038405606815e-02, -7.955565354779474e-02, -1.081445042086981e-03, -2.606394865562180e-02, -2.606394865562180e-02, -2.667405697705248e-09, -3.547221601622858e-09, -3.393267901565029e-06, -2.767774291844550e-12, -3.622679075673877e-09, -3.622679083754985e-09, -1.245650359436923e-01, -1.247846228339482e-01, -1.245892778661857e-01, -1.321322029122264e-01, -1.246750986181447e-01, -1.246750986181447e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -8.974106254127170e-02, -8.688486165460477e-02, -7.810157209583740e-02, -8.665247440303078e-02, -8.387372866258841e-02, -8.413670548892137e-02, -7.237723572555273e-02, -3.318915835573125e-02, -6.226318017395569e-03, -3.296452513148780e-02, -9.680631162118646e-02, -9.391948448534975e-04, -9.391948448534975e-04, -3.946287688264066e-03, -8.738724636802429e-12, -1.896679311886283e-11, -2.549362941948338e-02, -4.083422991717209e-03, -6.871999783911878e-12, -8.447331903451052e-02, -7.964542762993576e-02, -7.213338981778680e-02, -3.807374964903446e-02, -8.190619732296214e-02, -8.190619732296214e-02, -8.172991916320428e-02, -8.461951758270594e-02, -7.858818800069568e-02, -7.314504556704790e-02, -7.530903971156599e-02, -6.944209849581726e-02, -8.188093504543870e-02, -5.006348929577377e-02, -3.111752590907699e-02, -5.935291128433449e-02, -5.369292590059004e-02, -5.127682933919654e-02, -6.540488546969517e-02, -1.842894232042107e-06, -9.443715939196149e-06, -7.383065525542001e-02, -2.965891225314009e-02, -1.627355208141625e-04, -1.154889706908410e-09, -1.781813862537368e-15, -5.127355809135474e-13, -1.734909122772405e-04, -4.613648633588157e-12, -4.613659768721644e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.587331386449529e-09, 4.587286846968656e-09, 4.587055353258440e-09, 4.587785382443970e-09, 4.587308171992558e-09, 4.587308171992558e-09, 6.529591452122270e-06, 6.529536637849926e-06, 6.526955481911374e-06, 6.525868706384546e-06, 6.529451999912221e-06, 5.262396562899222e-07, 4.836272005568439e-03, 2.561349292421443e-04, 1.722238731304310e-04, 2.467232068154702e-04, 2.586042450824824e-04, 2.586042450824824e-04, 1.431543850676126e-01, 1.527681763369650e-01, 2.344029038928198e-03, 9.583324576936709e-03, 1.457344292973924e-01, 1.457344292973924e-01, 1.025137351345430e-04, 1.182228238333982e-04, 1.032731400939998e-03, 5.711498577177058e-07, 1.274120095067099e-04, 1.274120087877840e-04, 7.306220284603908e-07, 7.381300480723054e-07, 7.314506255611748e-07, 1.300638040851031e-06, 7.343704753048884e-07, 7.343704753048884e-07, 6.537578130306950e-05, 6.356529303195935e-05, 6.612594032840207e-05, 6.468716795690503e-05, 6.321023261889385e-05, 6.780783679459611e-06, 5.820099404263116e-03, 8.525210745222734e-03, 5.552911559636052e-03, 7.301010696157511e-03, 6.115008932172298e-03, 7.239556374861668e-03, 1.072594475491313e+01, 2.070137081676621e-02, 1.129393528095967e+01, 2.697474434903605e-05, 1.675616186081356e-02, 1.675616186081356e-02, 1.934604654622318e+06, 1.638723575596854e-06, 1.543612601205899e-05, 7.152661872276923e+01, 1.645456739319554e+06, 1.744491761830350e-06, 1.011428197380954e-01, 4.686972236797211e-02, 7.527668236615899e-03, -7.298157658256525e-04, 6.491059762477822e-02, 6.491059762477822e-02, 8.345377868369247e-02, 1.051688247269445e-02, 1.308285264235744e-02, 1.946973191934255e-02, 1.538990563422061e-02, 1.162031310657072e-02, 5.293531118479858e-03, 3.353321065121774e-01, 2.834544428980526e-02, 6.309248186535850e-02, 3.865506290605170e-02, 3.331652130007963e-02, 2.257320604848493e-02, 6.802778775515874e-04, 1.335331136767369e-03, 5.308572292818430e-02, 2.471395376061210e+01, 8.974747563821960e-03, 1.724611716956211e-05, 1.586939865582197e-08, 9.281091429554318e-07, 1.205763146682745e-02, 2.260871605035613e-06, 2.260861565299562e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.323631120142455e-29, -2.328833000780231e-104, -2.329133097296746e-104, -2.327717235066287e-104, -2.328792027253359e-104, -2.328792027253359e-104, -9.444985707535203e-92, -9.451169893912268e-92, -9.633114871009796e-92, -9.548679511245170e-92, -9.445905141577110e-92, -8.754947132287098e-05, -4.348017823986351e-80, 2.101546197568483e-04, 1.276695732018728e-04, 0.000000000000000e+00, 2.126829835198218e-04, 2.126829835198218e-04, 2.377735632539902e-03, 2.646596317901198e-03, -5.332844546811379e-82, 5.233008497193180e-05, 2.451673364792099e-03, 2.451673364792099e-03, 2.275229816339752e-10, 3.019412023720329e-10, 1.844576787732901e-07, 1.370522328615553e-13, 3.153186846326889e-10, 3.153187009745638e-10, -1.486042763279761e-03, -1.503451016909919e-03, -1.487958626650920e-03, -1.019567964704034e-42, -1.494739536422182e-03, -1.494739536422182e-03, -3.772327262677323e-37, -1.331946860143115e-87, -1.332746874377410e-87, -1.331331001260193e-87, -1.340347545913062e-87, 3.579262059050278e-06, -4.527091502106713e-03, -2.743155481898376e-02, -3.816793473647964e-04, -9.007306030826971e-03, -9.647734993731944e-03, -1.842884597036480e-77, -5.197023411662163e-68, 3.218622609798577e-04, -7.663395169173464e-68, -2.018823306970777e-03, 5.614933484970017e-05, 5.614933484970017e-05, -1.235366793586242e-52, 0.000000000000000e+00, 2.087119999303553e-12, -1.275646611217090e-65, -8.082107867983158e-53, 4.246469397803485e-13, -3.470674737325810e-01, -1.591987839818362e-01, -4.143463229771189e-75, 0.000000000000000e+00, -2.218736520706922e-01, -2.218736520706922e-01, -2.605627395515782e-01, -3.623426373871282e-03, -1.671600396083929e-02, -4.435983231370552e-02, -2.751628030530147e-02, -3.795324415945329e-76, -1.630515000227981e-02, -2.297080925387018e-72, 1.570254246329998e-03, -2.093839026818271e-74, 0.000000000000000e+00, 2.529312637661251e-03, -4.871084901974939e-76, 9.612067429658680e-08, 4.737781144727882e-07, 0.000000000000000e+00, -1.269436392821498e-66, 1.004632235057918e-05, 6.163926226451191e-11, 9.504696711633774e-17, 4.154168490097705e-14, 1.174595252652752e-05, 3.368013902058290e-13, 3.368098728188493e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
