
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tpssloc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.775650532883294e-02, -4.775675232008567e-02, -4.775574692019032e-02, -4.775161223951146e-02, -4.775665490671732e-02, -4.775665490671732e-02, -5.101815774851532e-02, -5.102223552398657e-02, -5.113276090119111e-02, -5.091660390222645e-02, -5.102043391876490e-02, -5.102043391876490e-02, -2.187756451684626e-02, -2.154921457095163e-02, -1.340422882010579e-02, -1.388872360107582e-02, -2.175918552786055e-02, -2.175918552786055e-02, -4.638746948389695e-03, -5.326602642925332e-03, -3.253234664275818e-02, -3.879216622853625e-04, -4.845381242067689e-03, -4.845381242067689e-03, -2.700902503870770e-10, -3.662458755002099e-10, -5.372224991460540e-07, -9.760209668514634e-13, -3.696008863795328e-10, -3.696008863795328e-10, -4.607120169870526e-02, -4.611930813448347e-02, -4.607089355647304e-02, -4.610856616000809e-02, -4.610294868140224e-02, -4.610294868140224e-02, -2.287809323238587e-02, -2.354201192539837e-02, -2.203070124513129e-02, -2.255238495850116e-02, -2.445014548251793e-02, -2.445014548251793e-02, -3.946760437357293e-02, -5.794354123545190e-02, -3.814735839237791e-02, -5.324512439561403e-02, -4.174403826611871e-02, -4.174403826611871e-02, -4.123125440554956e-05, -8.998549524901242e-04, -5.146552015173873e-05, -7.822550667798242e-02, -1.649082556456097e-04, -1.649082556456097e-04, -9.127692189639360e-13, -2.149582515870362e-12, -2.725481995241306e-12, -4.529980017358346e-06, -2.467054205461957e-12, -2.467054205462740e-12, -5.658389244043662e-02, -4.632898777846742e-02, -4.886005807758851e-02, -5.156224918907173e-02, -5.011537103526906e-02, -5.011537103526906e-02, -6.116909699437746e-02, -2.659131612177517e-02, -3.398990986535136e-02, -4.005238005137747e-02, -3.714713185711890e-02, -3.714713185711891e-02, -5.853257493373863e-02, -2.261232080592234e-03, -5.851057787084484e-03, -2.113342375617172e-02, -1.225071287452916e-02, -1.225071287452916e-02, -2.465022829006778e-02, -2.358324132495163e-07, -1.685987171974262e-06, -2.828589190787052e-02, -2.936025866896410e-05, -2.936025866896413e-05, -3.825578723299638e-10, -1.036491577068081e-15, -6.510931857747008e-14, -3.274235091948146e-05, -1.777193132140424e-12, -1.777198169702370e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tpssloc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.268880362404514e-01, -1.268889340068774e-01, -1.268903620615205e-01, -1.268756152013687e-01, -1.268885324985045e-01, -1.268885324985045e-01, -1.246541603555523e-01, -1.246556592650576e-01, -1.246890743548135e-01, -1.245081461044497e-01, -1.246556948341953e-01, -1.246556948341953e-01, -9.820157087488712e-02, -9.769061995643233e-02, -7.836446068447386e-02, -7.988961823918707e-02, -9.801918940143696e-02, -9.801918940143696e-02, -3.163797149439515e-02, -3.508765654154181e-02, -1.108470868894711e-01, -3.580791484614212e-03, -3.270189304023963e-02, -3.270189304023963e-02, -2.866143626497425e-09, -3.884820279753690e-09, -5.568284710385592e-06, -1.065243995277635e-11, -3.919430311209374e-09, -3.919430311209374e-09, -1.249024477151909e-01, -1.251204548764230e-01, -1.249222399476013e-01, -1.250918603218186e-01, -1.250174883881531e-01, -1.250174883881531e-01, -9.507507648166018e-02, -9.547503454994094e-02, -9.373274746873822e-02, -9.411124324481665e-02, -9.693498715414606e-02, -9.693498715414606e-02, -9.080325213914930e-02, -8.243928832572942e-02, -9.374640448925728e-02, -8.375352681580853e-02, -8.819646174797140e-02, -8.819646174797140e-02, -4.079265146080947e-04, -7.847918569234672e-03, -5.061137418922214e-04, -1.180840835503366e-01, -1.562971477613111e-03, -1.562971477613111e-03, -9.881430208814602e-12, -2.335091009288383e-11, -2.937373750125013e-11, -4.653293808773376e-05, -2.690261493846510e-11, -2.690262825121526e-11, -7.956306568456080e-02, -8.241709472406991e-02, -8.284702257135643e-02, -8.234975263630781e-02, -8.272172365028591e-02, -8.272172365028591e-02, -7.399926181415607e-02, -8.569415894654971e-02, -7.937646932138456e-02, -7.601268438314733e-02, -7.678665189049894e-02, -7.678665189049894e-02, -8.464910024849441e-02, -1.812300100660520e-02, -3.989683278829750e-02, -8.194207646025806e-02, -6.509138866710816e-02, -6.509138866710812e-02, -8.861764438166979e-02, -2.449693732438723e-06, -1.735910021128688e-05, -7.972356860545844e-02, -2.907655938812631e-04, -2.907655938812151e-04, -4.126899483579184e-09, -1.149846126033702e-14, -7.035845810199986e-13, -3.232412753365634e-04, -1.940663327659368e-11, -1.940663342050843e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.025193240651477e-10, 4.025310225517667e-10, 4.025739836355773e-10, 4.023840223036579e-10, 4.025255527257260e-10, 4.025255527257260e-10, 1.228576321218360e-06, 1.228771108612948e-06, 1.233950442752536e-06, 1.224518858310656e-06, 1.228646416831616e-06, 1.228646416831616e-06, 2.468319408742313e-03, 2.446302535316841e-03, 1.751668072478060e-03, 1.733159721505043e-03, 2.460467574974453e-03, 2.460467574974453e-03, 2.032884507002308e-01, 2.241340928289696e-01, 1.449476606293654e-03, 4.857926603609181e-02, 2.099497847114689e-01, 2.099497847114689e-01, 1.127021915385018e-04, 1.332784503158264e-04, 1.987872950519640e-03, 3.290009979559643e-06, 1.413520678567873e-04, 1.413520678567873e-04, 7.306727765483271e-07, 7.381838534095079e-07, 7.315009103592671e-07, 7.373363094102816e-07, 7.344238371929019e-07, 7.344238371929019e-07, 7.863299686054482e-06, 7.836305654942949e-06, 7.633457936583062e-06, 7.617079064292904e-06, 8.140271535129608e-06, 8.140271535129608e-06, 7.812811644037713e-03, 8.800263860346099e-03, 9.667506505949783e-03, 1.105887644272654e-02, 7.289109959083264e-03, 7.289109959083264e-03, 1.172542511760195e-02, 2.869960004750835e-02, 1.637053140448916e-02, 5.368091648650880e-05, 3.348931352097320e-02, 3.348931352097320e-02, 3.444191174368827e-06, 5.512337913950036e-06, 2.738318745302459e-05, 6.593570501821379e-03, 1.027585360016166e-05, 1.027585622926037e-05, 6.556610760868940e-02, 4.381762371127243e-02, 5.227042039189337e-02, 5.949719975324667e-02, 5.586609602342794e-02, 5.586609602342794e-02, 3.030533715200575e-02, 1.089762699791258e-02, 1.303346405500430e-02, 1.894418870007456e-02, 1.507797353997943e-02, 1.507797353997944e-02, 6.497120749584034e-03, 3.048247409870931e-02, 4.228266363986771e-02, 5.022183673582833e-02, 5.270783752720822e-02, 5.270783752720828e-02, 1.642465909312278e-02, 9.914447049959722e-04, 2.988424085455158e-03, 8.176640019786241e-02, 1.952521577599687e-02, 1.952521577599461e-02, 9.062185588213173e-05, 1.756901504359181e-07, 1.405052629044869e-06, 2.776149752703385e-02, 1.460303996806555e-05, 1.460302428939991e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tpssloc_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tpssloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.688026285499848e-05, -4.688235294175857e-05, -4.689383240886596e-05, -4.685999782815844e-05, -4.688134155066151e-05, -4.688134155066151e-05, -3.617674039196741e-05, -3.620703127379168e-05, -3.713639599045472e-05, -3.691650690867301e-05, -3.618399215559340e-05, -3.618399215559340e-05, 1.583173740206991e-04, 1.592030436138233e-04, 1.578459133393297e-04, 1.841345957409776e-04, 1.586788734962725e-04, 1.586788734962725e-04, 2.465707201310802e-03, 2.715935412341139e-03, 1.803693507519318e-05, 9.226227609178929e-05, 2.536486937029625e-03, 2.536486937029625e-03, 2.366731852615330e-10, 3.173712383081046e-10, 2.403540312924132e-07, 2.828800657873278e-13, 3.292291452054009e-10, 3.292291452054004e-10, -1.470949129714668e-03, -1.488287076694009e-03, -1.473047562189002e-03, -1.486508758264781e-03, -1.479352811313709e-03, -1.479352811313709e-03, 3.419213177361371e-05, 1.873989137897889e-05, 3.976322309119477e-05, 2.853928968931730e-05, 1.543486690778917e-05, 1.543486690778917e-05, -2.314114349533594e-03, -3.246059287831347e-03, -7.384763271536047e-04, -1.739446341009964e-03, -4.546467974948801e-03, -4.546467974948801e-03, 1.361018401091893e-05, 3.566349353360550e-04, 1.835537602691597e-05, -1.291592451390704e-04, 7.216016412142680e-05, 7.216016412142680e-05, 4.450554184726770e-13, 8.133397611842706e-13, 2.649668174033235e-12, 1.226950248333315e-06, 8.837608727489253e-13, 8.837608727511903e-13, -1.003635806252381e-01, -1.040387888011803e-01, -1.147109296553442e-01, -1.181408505033998e-01, -1.172999041246678e-01, -1.172999041246679e-01, -1.647149182008430e-02, -3.071241032671935e-03, -1.318757104771490e-02, -3.140069061159213e-02, -2.045017042068237e-02, -2.045017042068237e-02, -1.818489669347750e-03, 8.440961252052763e-04, 1.631109421732752e-03, 1.407455147856067e-03, 2.271051807814538e-03, 2.271051807814545e-03, 6.746053856626934e-04, 1.120679674628184e-07, 6.542320568416506e-07, -5.435461895190685e-04, 1.352970673843014e-05, 1.352970673843021e-05, 1.219988708943785e-10, 2.722135257699495e-16, 4.941919950955655e-14, 1.613597588752856e-05, 7.276867675694630e-13, 7.276906601832745e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
