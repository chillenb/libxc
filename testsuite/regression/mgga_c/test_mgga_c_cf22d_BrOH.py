
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_cf22d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.556187517596006e-01, -2.556256494463443e-01, -2.556558799392036e-01, -2.555436446525540e-01, -2.556223849207999e-01, -2.556223849207999e-01, -1.205410886865366e-01, -1.205116072758236e-01, -1.196332645639542e-01, -1.199741643198826e-01, -1.205330508823332e-01, 2.336242996564200e-02, -1.704247395869128e-01, 5.268834788027552e-02, 5.396760998370026e-02, 5.369205207061207e-02, 5.260993229885588e-02, 5.260993229885588e-02, 1.868661019244622e-02, 1.846478429353691e-02, -2.361555741001941e-01, -1.339802090108170e-02, 1.864524478670483e-02, 1.864524478670483e-02, -1.135030090578372e-02, -1.176920548537967e-02, -2.929125926249824e-02, -6.213364945789039e-03, -1.167022742409926e-02, -1.167022742409926e-02, -1.121317908045224e-01, -1.122909214242429e-01, -1.121495720772019e-01, -2.590668618628905e-01, -1.122120587328776e-01, -1.122120587328776e-01, -1.323999318939698e-01, -1.263658742538186e-01, -1.351750514281411e-01, -1.302297258845767e-01, -1.248484473135392e-01, 3.603887929851430e-02, -3.078128261052691e-02, -7.048421451590062e-02, -1.489801948217464e-02, -4.001886288372324e-02, -4.278916462232047e-02, -6.410289810452129e-02, -1.258258447541935e-01, 1.252789177853573e-02, -1.245543369916562e-01, -5.581081381243120e-02, -1.626902918822688e-02, -1.626902918822688e-02, -1.449027941389244e-02, -6.750389770583105e-03, -5.264252371015445e-03, -9.790443190602388e-02, -1.500309037690372e-02, -6.234909970628554e-03, -1.617025436281034e-01, -1.287351394543389e-01, -1.811252823303643e-01, -1.457456113272806e-01, -1.411859827383548e-01, -1.411859827383548e-01, -1.449091623627693e-01, -2.586498929934012e-02, -4.783261978810666e-02, -7.697984460124378e-02, -6.065884729484936e-02, -8.427789596124059e-02, -5.805240322588567e-02, -1.348815979465376e-01, 2.422409500516265e-02, -7.066743486760521e-02, 1.440789028308122e-02, 1.440789028308126e-02, -5.907450112346433e-02, -2.851934680584294e-02, -3.182954604631207e-02, -7.904394031619915e-03, -1.123980920593749e-01, -2.799598108454589e-02, -1.291119250213125e-02, -2.142121537475483e-03, -3.822907899817861e-03, -2.730507906194468e-02, -5.419542127791822e-03, -5.419542127791831e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_cf22d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.904568498831022e-01, -6.904667224002264e-01, -6.905100925313182e-01, -6.903493745209943e-01, -6.904620493154529e-01, -6.904620493154529e-01, 8.273797613817814e-02, 8.264809942060597e-02, 7.992171458403716e-02, 8.098473355073187e-02, 8.271314309428597e-02, -2.656391075527204e-01, 4.213727841835530e-02, -2.714510490710626e-02, 1.614094879303753e-02, -2.942186214305111e-03, -2.825578834752545e-02, -2.825578834752545e-02, -2.720736940017541e-02, -3.414972998279751e-02, -6.845608814237368e-02, 3.585126025669497e-02, -2.919080462090046e-02, -2.919080462090046e-02, -1.418076179441774e-02, -1.466776381908853e-02, -2.898379079141305e-02, -7.975209510784396e-03, -1.454730175687768e-02, -1.454730175687777e-02, -2.063494264607406e-01, -2.060878707949345e-01, -2.063200013573060e-01, -5.447961983818370e-01, -2.062167681100834e-01, -2.062167681100834e-01, 1.220861215572234e-01, 1.155986066043682e-01, 1.244889796289313e-01, 1.199607153993387e-01, 1.136734249420135e-01, -2.109597148353188e-01, -1.472672652668139e-01, -2.052006900142452e-01, -1.427950986733609e-01, -1.548416764362433e-01, -1.600943782099667e-01, -1.627072856014499e-01, -1.385282381370596e-01, 4.241265199287478e-02, -1.364615627086644e-01, -2.149345046688845e-01, 2.680434907583720e-02, 2.680434907583720e-02, -1.864465682071083e-02, -8.644246656961403e-03, -6.769207640912438e-03, -1.150967367486521e-01, -1.929185359372418e-02, -7.997937644541797e-03, -2.990553915358125e-01, -2.457520948689641e-01, -2.523834918147350e-01, -2.734119790992033e-01, -2.654686461150148e-01, -2.654686461150148e-01, -2.708033397073108e-01, -1.372209450274295e-01, -1.637855642447809e-01, -2.116047659231076e-01, -1.870239262250540e-01, -2.431673350071109e-01, -1.858571799113911e-01, -2.463087987070194e-02, -5.854692789586443e-02, 6.194362822030363e-02, -1.013235877649291e-01, -1.013235877649291e-01, 2.693641091819986e-02, -2.951325917480890e-02, -2.762626185694569e-02, -1.139578067293876e-01, -1.263076179456500e-01, -5.072233685580246e-03, -1.611176428091254e-02, -2.796336158274819e-03, -4.950490807382299e-03, -5.246301602311669e-03, -6.972027703401216e-03, -6.972027703401147e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.014674002187905e-08, 1.014713160579170e-08, 1.014876085399993e-08, 1.014240244699430e-08, 1.014694686519270e-08, 1.014694686519270e-08, 1.883148721567369e-05, 1.882377171851855e-05, 1.858975472521095e-05, 1.867422987682204e-05, 1.882898704228613e-05, 6.370669589761683e-07, 3.354098025636063e-02, 1.551523284158179e-03, 1.434578984146357e-03, 1.523280329271209e-03, 1.554019736866124e-03, 1.554019736866124e-03, 7.036877072345574e-01, 7.038594168398726e-01, 1.852729504822752e-02, 2.324913173790187e-01, 7.033535633110863e-01, 7.033535633110863e-01, 7.707442886905652e-02, 8.177742645207577e-02, 1.272210021814446e-01, 5.094856290644167e-03, 8.611273575527362e-02, 8.611273575464141e-02, 6.428761385750265e-07, 6.539426703369700e-07, 6.440940163951977e-07, 5.325550714302049e-06, 6.483998176760611e-07, 6.483998176760611e-07, 2.648038945734194e-04, 2.430434800092234e-04, 2.745259247124141e-04, 2.567878941337147e-04, 2.380195693249009e-04, 1.092214362935147e-05, 3.081602037852707e-03, 5.500476301473049e-03, 4.653871697285599e-03, 3.360663572632698e-03, 2.785672498624137e-03, 8.812476427371648e-03, 6.764045424762327e+01, 2.558301873246410e-01, 7.198880552741457e+01, 1.147951525364301e-05, 3.779059427963376e-01, 3.779059427963376e-01, 9.505752178718871e+06, 8.461459983265394e-03, 4.123084941604936e-02, 3.931521638753383e+02, 8.085811017507088e+06, 9.956345243925656e-03, 7.085017648791418e-02, 4.480032162946389e-02, 6.951048613123413e-02, 5.974815468434794e-02, 5.606024112146506e-02, 5.606024112146506e-02, 6.813349187760054e-02, 6.225937053230861e-03, 6.180431260351922e-03, 1.459005938193836e-02, 8.815189147413456e-03, 2.057569228950361e-02, 2.715512713678754e-03, 2.591482415654212e+00, 1.292509061919121e-01, 2.464633680397248e-01, 8.796037092463614e-02, 8.796037092463625e-02, 5.825664567807901e-02, 1.034183277655216e-01, 1.282451134043580e-01, 5.781947646978877e-02, 1.515538956276935e+02, 3.304054347086076e-01, 2.380750220221815e-02, 1.095698426741413e-03, 9.188588266532512e-03, 4.117053520746108e-01, 1.271894378123976e-02, 1.271894378860950e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_cf22d_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.457195162376283e-04, 2.457264505510823e-04, 2.457558424383821e-04, 2.456431280298963e-04, 2.457231754713648e-04, 2.457231754713648e-04, -1.608220143500115e-03, -1.607666413861786e-03, -1.590642592405047e-03, -1.597073968813367e-03, -1.608053160630537e-03, 1.534971576062231e-03, -2.178852451515930e-02, -3.150335817947970e-03, -5.776880022509328e-03, -4.739909706054118e-03, -3.074968462464251e-03, -3.074968462464251e-03, -5.231158232589374e-02, -4.818098507209092e-02, -8.485352965655661e-03, -4.390797760976802e-02, -5.115150391226581e-02, -5.115150391226581e-02, -2.662027501555693e-04, -3.010331046977302e-04, -5.106025592158391e-03, -1.170008674980184e-05, -3.057444643309268e-04, -3.057444643306655e-04, -9.423995049980593e-04, -9.777161528879770e-04, -9.462864430477674e-04, 3.845304723110539e-03, -9.600606442251776e-04, -9.600606442251776e-04, -5.131605096682200e-03, -5.009200704811319e-03, -5.173293884009409e-03, -5.090516894336237e-03, -4.975858208703300e-03, 2.930394867518760e-03, 3.309010462941857e-02, 5.094644016684183e-02, 2.714806380641829e-02, 4.003151609839607e-02, 3.860813793068030e-02, 4.309718575829435e-02, -6.493350982352955e-03, -5.568752600386034e-02, -7.441090269342061e-03, 5.409533518068671e-03, -4.704103106862381e-02, -4.704103106862381e-02, -3.506065546111829e-06, -1.951688933480955e-05, -3.361796652884622e-05, -1.902389392181190e-03, -4.014564649064901e-06, -1.843470672751101e-05, 1.724908392195477e-01, 8.504702172822972e-03, 1.360734990405906e-01, 6.558751839923727e-02, 4.293765548162663e-02, 4.293765548162663e-02, 7.165918896094393e-02, 3.752671686418109e-02, 5.529360413716900e-02, 7.048564335502124e-02, 6.548354588285780e-02, 1.221256802173994e-01, 4.097527556754309e-02, -7.674015744513134e-02, -1.428528626105918e-02, -8.715385529728614e-02, 1.031068113507264e-02, 1.031068113507263e-02, -4.417124322762257e-02, -3.882703232124415e-03, -7.675750243297202e-03, 3.923294708358010e-02, -6.359701082563772e-03, -2.623248683459848e-02, -1.620604588599561e-04, -5.118420011168387e-07, -6.486265823973139e-06, -2.787021515411551e-02, -1.626237700280239e-05, -1.626237700281416e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
