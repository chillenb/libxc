
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504592285e-01, -1.645996352774701e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -1.665244784445841e-02, -6.701411225019485e-02, -8.123391216556877e-03, -6.817122934609499e-03, -7.403716427174066e-03, -7.266889741976747e-03, -7.266889741976747e-03, -4.644994500264515e-03, -4.970482389284442e-03, -7.077000961998538e-02, -1.144746740001773e-03, -2.211716353279359e-03, -2.211716353279359e-03, -4.503239375036118e-09, -5.941942039341441e-09, -5.734069100164885e-06, -2.568168450892892e-10, -1.040018906760966e-09, -1.040018906760966e-09, -3.511611432675866e-02, -3.520103762717237e-02, -3.512099511054354e-02, -1.224312405851439e-01, -3.515863551310099e-02, -3.515863551310099e-02, -9.471366600561090e-02, -9.491133591069727e-02, -9.456852948214133e-02, -9.474413043394064e-02, -9.489275971457944e-02, -1.444467291794057e-02, -2.080261267655800e-02, -2.584287811732485e-02, -1.725262163308038e-02, -2.081764134800797e-02, -2.175656706166460e-02, -6.418936514394004e-02, -2.699430518029856e-02, -2.351404430306123e-03, -2.581454244194446e-02, -2.492569530783138e-02, -7.124031738541795e-04, -7.124031738541795e-04, -1.873262677774475e-03, -2.041186544879922e-10, -4.663483256351903e-10, -2.031142249656109e-02, -2.148658723728447e-03, -4.306306000998784e-10, -2.952178187032128e-02, -2.865227820297742e-02, -6.383636564200691e-02, -2.924124903790647e-02, -2.911588897872945e-02, -2.911588897872945e-02, -2.917673670953197e-02, -1.840421616866867e-02, -2.177173539459409e-02, -2.510631186220002e-02, -2.341878919179831e-02, -6.128134397443009e-02, -2.481194410875962e-02, -4.238697070491520e-02, -6.915664850407110e-03, -5.192846777352227e-02, -1.011994773443738e-02, -1.011994773443738e-02, -5.782021926348150e-02, -4.827100886619580e-06, -1.581021099720430e-05, -1.561397639528661e-02, -2.356177787973960e-02, -1.694311632769123e-04, -1.044916489896903e-08, -4.644694357995267e-13, -4.663438255940772e-11, -1.428625230395664e-04, -4.258484107234879e-10, -4.258484146496211e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747371672968115e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -6.315400860042054e-02, -7.507468276142483e-02, -3.642669894400272e-02, -2.896578409706493e-02, -3.396904011688820e-02, -3.349145816428978e-02, -3.349145816428978e-02, -2.214654977974369e-02, -2.334310970952211e-02, -7.900736698061860e-02, -6.596511222004609e-03, -1.192570882436628e-02, -1.192570882436630e-02, -3.105719332341131e-08, -4.094530199778190e-08, -3.646526049773676e-05, -1.785745191035315e-09, -7.207898228771222e-09, -7.207898228771222e-09, -1.063021248480780e-01, -1.065221151957181e-01, -1.063147522633886e-01, -1.321455341852712e-01, -1.064122226226090e-01, -1.064122226226090e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -5.666084381635864e-02, -6.405210934209324e-02, -7.318746138528395e-02, -5.767052717386461e-02, -6.372566419732673e-02, -6.568807475741692e-02, -7.210898567657270e-02, -3.211636191061110e-02, -1.185525475715358e-02, -3.079828628005500e-02, -7.936450887465180e-02, -4.236280496494635e-03, -4.236280496494648e-03, -2.429818831173949e-03, -1.419769918531607e-09, -3.254868076547661e-09, -2.457414087463874e-02, -2.781518125836640e-03, -2.998399109967260e-09, -8.505684797550785e-02, -8.019480641661816e-02, -7.173787450420190e-02, -8.310976162536371e-02, -8.239096277792808e-02, -8.239096277792810e-02, -8.358110738133369e-02, -5.879498459011717e-02, -6.431598766718394e-02, -7.031587310344814e-02, -6.711571397929800e-02, -6.904837093538647e-02, -7.174962794960445e-02, -4.894336676652947e-02, -3.067605329065688e-02, -5.914859868946302e-02, -3.999977532695145e-02, -3.999977532695145e-02, -6.539524416530183e-02, -3.210141125693245e-05, -1.039555687149185e-04, -5.119620019599409e-02, -2.826624935272212e-02, -1.069521197703098e-03, -7.167093184314722e-08, -3.280187475710651e-12, -3.267598331692496e-10, -9.060697180526265e-04, -2.968110653277105e-09, -2.968110652781811e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.161498703698331e-09, 8.161407659089411e-09, 8.160974813445730e-09, 8.162330002804068e-09, 8.161623871117007e-09, 8.161623871117007e-09, 1.161609634514708e-05, 1.161599605689965e-05, 1.161254015647292e-05, 1.160972808567592e-05, 1.161485611526679e-05, 4.563360383795500e-07, 8.392792746785303e-03, 4.305936562896766e-04, 2.724626412149313e-04, 4.046387808821027e-04, 3.957932775272918e-04, 3.957932775272918e-04, 1.422400901575153e-01, 1.470889720598497e-01, 4.539804811746709e-03, 6.478497063611202e-02, 9.915978223068959e-02, 9.915978223068969e-02, 4.154551493433443e-03, 4.793626233474828e-03, 1.617003610326239e-02, 1.066239361042592e-03, 2.555052122401675e-03, 2.555052122401675e-03, 5.699572973272980e-07, 5.759916402433470e-07, 5.703061884056566e-07, 2.310087810373452e-06, 5.729669571644816e-07, 5.729669571644816e-07, 1.158051301966153e-04, 1.125052171409306e-04, 1.182908656289507e-04, 1.152901814792594e-04, 1.128111978435359e-04, 5.778680735313835e-06, 6.213349054398072e-03, 1.025221620214371e-02, 5.375205128237235e-03, 7.653195438517956e-03, 6.686222896916915e-03, 1.344659365761198e-02, 2.446111877048235e+01, 3.986909660354416e-02, 3.339436744249478e+01, 2.466202369721098e-05, 8.820649101702910e-02, 8.820649101702858e-02, 3.260923462136543e+07, 8.532522774049092e-04, 1.246966097113930e-02, 1.631896766601931e+02, 1.757366491096296e+07, 4.064030477686538e-03, 1.110037714924293e-01, 5.094065243869555e-02, 1.427092395701781e-02, 7.924019533248250e-02, 7.065328338830015e-02, 7.065328338830015e-02, 1.092301176310676e-01, 1.060522123184404e-02, 1.474131131006628e-02, 2.387895392039523e-02, 1.818089763536267e-02, 2.204426564041591e-02, 6.248030962291131e-03, 7.364685609764811e-01, 3.376519944389507e-02, 1.163131763555006e-01, 3.293398982568528e-02, 3.293398982568532e-02, 4.022951286696635e-02, 1.788595465720039e-02, 2.156413246000925e-02, 4.975423542888902e-02, 6.207908064983523e+01, 7.336250373698475e-02, 2.352462015784670e-03, 1.153466655473133e-04, 2.092422180613932e-03, 7.808258448575980e-02, 6.065885196369174e-03, 6.065885176435022e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.765207729479417e-29, -1.691375196006262e-109, -1.691611731283175e-109, -1.690534351614866e-109, -1.691111223380144e-109, -1.691111223380144e-109, -6.876863132737313e-97, -6.882005032705117e-97, -7.016887269279453e-97, -6.950853092079409e-97, -6.970738629119032e-97, -1.358933164382848e-04, -3.180796302956475e-85, -5.941567082867692e-04, 0.000000000000000e+00, -4.984143716073488e-04, -4.794949548340645e-04, -4.794949548340645e-04, -2.892297998168143e-03, -3.245588421914095e-03, -4.087987989041434e-87, -3.601700997389907e-04, -9.216553215906040e-04, -9.216553215906039e-04, -2.217457016318169e-09, -2.964814412717160e-09, 0.000000000000000e+00, -1.168380403030916e-10, -5.414715403541271e-10, -5.414715403541271e-10, -1.024539419459909e-03, -1.037541169452825e-03, -1.025285047501450e-03, -1.598079415992762e-42, -1.031025481463055e-03, -1.031025481463055e-03, -5.947533387942985e-37, -9.746286208375535e-93, -9.743772844139226e-93, -9.728908248239786e-93, -9.794629451986469e-93, -2.862003639397788e-04, -1.356168615862468e-02, -3.544503732602506e-02, -7.740771060622588e-03, -1.503143837756867e-02, -1.601320277466243e-02, -1.456810369823118e-82, -5.930161641660208e-73, 0.000000000000000e+00, -1.516003800934194e-72, -1.838602047981045e-03, -2.478418193338359e-04, -2.478418193338359e-04, -1.336454348159306e-55, -8.756735272739052e-11, -5.887261806662865e-10, -1.979940031001811e-70, -1.883559559238481e-55, -3.289752430940627e-10, -3.562862675136296e-01, -1.562710982791703e-01, -2.954478746557440e-80, -2.505484753348188e-01, -2.219470914316178e-01, -2.219470914316178e-01, -3.219609122180948e-01, -1.252439682151332e-02, -2.382524678360436e-02, -5.086641283393840e-02, -3.380481511121488e-02, -3.101725486529355e-81, -2.353654971186330e-02, -2.379265696830272e-77, -2.863797495514576e-03, -1.609452138746742e-79, -5.555017665810744e-03, -5.555017665810754e-03, -3.449121300575001e-81, -1.336917544511885e-06, -4.006146937869250e-06, -1.727451358148056e-02, -2.003702797604553e-71, -5.646597725510622e-05, -3.378746412756876e-09, -2.547117129560207e-13, -4.021203929097596e-11, -4.952918682882886e-05, -3.922366779538780e-10, -3.922366678690079e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
