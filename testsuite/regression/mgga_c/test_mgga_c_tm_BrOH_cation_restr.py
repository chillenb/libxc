
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.455401839765667e-02, -3.455441182819729e-02, -3.455435547289017e-02, -3.454847493597158e-02, -3.455181389715191e-02, -3.455181389715191e-02, -3.879588285249284e-02, -3.880022698129267e-02, -3.889616588975225e-02, -3.867932905528482e-02, -3.877721595347314e-02, -3.877721595347314e-02, -2.645187678348343e-02, -2.621846001295590e-02, -2.064953401612601e-02, -2.078149365330681e-02, -2.096587512551878e-02, -2.096587512551878e-02, -5.183701562772924e-03, -5.669864797893457e-03, -2.967718263585127e-02, -1.761756974283320e-03, -3.027066014019941e-03, -3.027066014019941e-03, -4.592940620460242e-09, -6.160255461067987e-09, -7.365238397604484e-06, -3.361234943114091e-10, -1.224060225937864e-09, -1.224060225937865e-09, -3.545964921877780e-02, -3.554414711209047e-02, -3.545756744855152e-02, -3.553235356524436e-02, -3.550553844284621e-02, -3.550553844284621e-02, -1.684946140579707e-02, -1.703828758268628e-02, -1.594955367330902e-02, -1.610352167468365e-02, -1.740927688765909e-02, -1.740927688765909e-02, -3.324826483980935e-02, -5.332009522220833e-02, -3.302010512235221e-02, -5.013064976661254e-02, -3.478408387655892e-02, -3.478408387655892e-02, -3.496973135016183e-04, -2.697594735702605e-03, -2.730943779737118e-04, -7.070842440551463e-02, -9.123724812781061e-04, -9.123724812781061e-04, -1.404032450505329e-10, -3.689909592510581e-10, -6.354467077746893e-10, -7.016274779586067e-05, -7.289424286651596e-10, -7.289424286651595e-10, -5.042023769004805e-02, -3.853144807881509e-02, -4.138465340811703e-02, -4.461900857423171e-02, -4.288075078945839e-02, -4.288075078945840e-02, -5.992599431811625e-02, -1.967876089022687e-02, -2.443399766344079e-02, -3.108356779110713e-02, -2.753611664175493e-02, -2.753611664175493e-02, -5.376376632764351e-02, -4.735146939813370e-03, -8.285546826519717e-03, -2.033787688459027e-02, -1.321062370413149e-02, -1.321062370413150e-02, -2.162024712495734e-02, -5.465636431966852e-06, -2.141915771638041e-05, -2.445233890974321e-02, -2.295900544678098e-04, -2.295900544678052e-04, -1.922969911907538e-08, -3.718505040573249e-12, -5.414910762757422e-11, -1.727754439900457e-04, -6.295622280608128e-10, -6.295622313622647e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.051928662804824e-01, -1.051937945508893e-01, -1.051945964202197e-01, -1.051807536248724e-01, -1.051884809816720e-01, -1.051884809816720e-01, -1.053599927937100e-01, -1.053656555901600e-01, -1.054899357958981e-01, -1.052007134882366e-01, -1.053317232253883e-01, -1.053317232253883e-01, -7.667134606221711e-02, -7.636495615487569e-02, -6.777089962628917e-02, -6.798680506877181e-02, -6.831695872220506e-02, -6.831695872220506e-02, -2.406826051700332e-02, -2.575596944119400e-02, -8.255962794634160e-02, -9.638165936843178e-03, -1.549445007325284e-02, -1.549445007325280e-02, -3.164253965464540e-08, -4.236919998080000e-08, -4.838804009067333e-05, -2.305581161414488e-09, -8.412124024373065e-09, -8.412124029682464e-09, -1.068383696658594e-01, -1.070561056826961e-01, -1.068400838625842e-01, -1.070325706474669e-01, -1.069528960806110e-01, -1.069528960806110e-01, -6.302330835932576e-02, -6.342404131365309e-02, -6.078238846216933e-02, -6.111773967240644e-02, -6.434750066373951e-02, -6.434750066373951e-02, -7.940177292675435e-02, -8.417652066951758e-02, -7.865600069231887e-02, -8.157548417486354e-02, -8.062704637507059e-02, -8.062704637507059e-02, -2.129778844571185e-03, -1.419114840615549e-02, -1.677645097119276e-03, -1.179704818233081e-01, -5.294469388962289e-03, -5.294469388962288e-03, -9.435008315554044e-10, -2.500636361259616e-09, -4.365184502055607e-09, -4.465601966150506e-04, -4.954901446175748e-09, -4.954901449828446e-09, -8.246621621073016e-02, -8.366598773894346e-02, -8.433889436709457e-02, -8.429331063497633e-02, -8.441522972372215e-02, -8.441522972372216e-02, -7.460397340523856e-02, -6.105946864811362e-02, -6.808394905198505e-02, -7.599444292333710e-02, -7.205789211597899e-02, -7.205789211597899e-02, -8.588464161438061e-02, -2.281178539206932e-02, -3.490129747491685e-02, -6.033833326244351e-02, -4.740260203995346e-02, -4.740260203995347e-02, -6.412148237146897e-02, -3.614584370620648e-05, -1.389604274967514e-04, -6.381201991825210e-02, -1.421588521027328e-03, -1.421588521027300e-03, -1.287850112746614e-07, -2.476861730546003e-11, -3.762024153283286e-10, -1.082880185386464e-03, -4.304849548420467e-09, -4.304849544781512e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.117916511953979e-10, 3.118013037859312e-10, 3.118264077003100e-10, 3.116835256825438e-10, 3.117609058015896e-10, 3.117609058015896e-10, 1.205824799732926e-06, 1.206123113041038e-06, 1.213133723182154e-06, 1.202307576449381e-06, 1.207204330155638e-06, 1.207204330155638e-06, 1.879603926745770e-03, 1.864775538634674e-03, 1.494809094061047e-03, 1.469052584823784e-03, 1.494110341344282e-03, 1.494110341344282e-03, 1.618534507266246e-01, 1.715586389793163e-01, 9.843280741331200e-04, 1.139658183227727e-01, 1.476266385178134e-01, 1.476266385178135e-01, 4.260082317580374e-03, 5.019267652457794e-03, 2.579155363884393e-02, 1.504991519863002e-03, 3.145865013460529e-03, 3.145865014147738e-03, 5.730852226091401e-07, 5.791287643025657e-07, 5.733716402926743e-07, 5.787046404169372e-07, 5.761320503515893e-07, 5.761320503515893e-07, 6.843656892706903e-06, 6.880677273760647e-06, 6.466971044484368e-06, 6.498004149327474e-06, 7.055966916096886e-06, 7.055966916096886e-06, 8.611672863596393e-03, 1.168654497537076e-02, 9.601446198766664e-03, 1.387449467725536e-02, 9.005236794856776e-03, 9.005236794856776e-03, 6.329257778627116e-02, 5.791683798632907e-02, 6.445626266384336e-02, 6.747441768212031e-05, 1.219582604268923e-01, 1.219582604268924e-01, 1.469929684962725e-03, 1.850208979785134e-03, 1.851352160265814e-02, 6.264287536614661e-02, 8.057024546402999e-03, 8.057024554009492e-03, 8.762948621424287e-02, 5.051436959836116e-02, 6.101821977040445e-02, 7.216547111100735e-02, 6.628926735723703e-02, 6.628926735723702e-02, 4.713896116690619e-02, 1.116948811209665e-02, 1.577553007978061e-02, 2.560150568495255e-02, 1.962091531898926e-02, 1.962091531898926e-02, 8.292403279119401e-03, 4.383053627077488e-02, 4.149445125730791e-02, 4.134533035459762e-02, 4.363224709519739e-02, 4.363224709519743e-02, 1.460806163783470e-02, 2.108059251129262e-02, 3.238668287574115e-02, 7.216965328263049e-02, 1.100099687714148e-01, 1.100099687714128e-01, 5.292294334806384e-03, 2.005781012244361e-03, 2.523900856308493e-03, 1.004699912343574e-01, 1.003289718177315e-02, 1.003289715310177e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.082570446465165e-05, -3.082727617881564e-05, -3.083433785923740e-05, -3.081111812510932e-05, -3.082326908399519e-05, -3.082326908399519e-05, -6.828482838186287e-05, -6.832427051113887e-05, -6.942246873198779e-05, -6.946160526043563e-05, -6.926282522053827e-05, -6.926282522053827e-05, -3.061993543589365e-04, -3.046154430009757e-04, -2.650682314642455e-04, -3.189999956212748e-04, -3.028877517285832e-04, -3.028877517285832e-04, -2.839814934096686e-03, -3.168563725448678e-03, -3.699823277276551e-05, -3.500060731733656e-04, -8.932934062006291e-04, -8.932934062006290e-04, -2.217444788759293e-09, -2.964780629143148e-09, -1.567306319184788e-06, -1.168351761087573e-10, -5.414573519595457e-10, -5.414573519595443e-10, -1.019832588162555e-03, -1.032794221393834e-03, -1.020671667747627e-03, -1.032102890990436e-03, -1.026248963368302e-03, -1.026248963368302e-03, -2.480259284406471e-04, -2.723477206475464e-04, -2.341433340977887e-04, -2.550210011229686e-04, -2.686472140504636e-04, -2.686472140504636e-04, -8.275749837149789e-03, -6.425351123366108e-03, -3.857628557144690e-03, -1.973095892475273e-03, -9.507051366045991e-03, -9.507051366045991e-03, -5.991586083321500e-05, -7.262826647596336e-04, -4.636169378283419e-05, -1.807868061143618e-04, -2.449317136461502e-04, -2.449317136461504e-04, -2.051397876232299e-11, -8.756266917364761e-11, -5.887003152533554e-10, -1.354820400489231e-05, -3.289521082064313e-10, -3.289521082064319e-10, -1.444299186944831e-01, -1.143114968183810e-01, -1.311136493452887e-01, -1.437149053603876e-01, -1.378167970154417e-01, -1.378167970154417e-01, -2.314136846095134e-02, -1.205513132856458e-02, -2.193472728813599e-02, -4.187100171615445e-02, -2.965090287746029e-02, -2.965090287746027e-02, -3.797302480893863e-03, -1.487907108614436e-03, -2.744830691067987e-03, -6.165175680589042e-03, -4.993887106533302e-03, -4.993887106533304e-03, -7.443393562780517e-03, -1.336092457494160e-06, -3.995663243652571e-06, -1.156428992883689e-02, -5.603686032109354e-05, -5.603686032109613e-05, -3.377845059109851e-09, -2.547025840796307e-13, -4.021174207751705e-11, -4.931742876352884e-05, -3.922163927319893e-10, -3.922163855219038e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
