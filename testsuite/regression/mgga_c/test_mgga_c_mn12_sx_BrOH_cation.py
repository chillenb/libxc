
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.804565608856869e-02, -9.804930148778683e-02, -9.806407986425265e-02, -2.294088846124334e-01, -2.641427230972432e-01, -2.990053168483367e-01, 2.580145069007666e-02, 6.570261058543497e-02, 6.351197633979362e-02, 6.440010419279250e-02, 6.430149740651114e-02, 2.450289971782230e-02, -3.266864726177423e-01, -6.671193084716072e-02, 1.192133382703640e-01, 3.362283982470775e-02, -3.727123755116492e-01, 1.194075984218274e-01, -3.385443350197433e-02, -1.155054550000361e-01, 4.055478933109734e-03, -1.329961842106037e-01, -1.929301078390255e-02, -2.001560789219558e-02, -7.770730728046590e-02, -8.103718478196600e-02, -2.763350093460979e-01, -4.865309394370967e-02, -5.051346042291612e-02, -5.051346042291612e-02, -2.246407863879070e-01, -2.696308558302827e-01, -2.684295378734768e-01, -2.695539622468252e-01, -1.871052544361715e-01, -2.252005911018420e-01, 4.620150712733076e-02, 3.927904050292207e-02, 1.101984060079183e-01, 1.010371477677901e-01, -1.720253349254973e-02, 3.966506053753489e-02, -3.899799696215289e-02, -8.631254051161204e-02, -3.758381000785953e-03, -4.001697861079054e-02, -4.339892947991120e-02, -4.764959439368457e-02, -2.945785819207893e-01, -8.978742639028757e-02, -3.101157627184472e-01, -8.497378060404127e-02, -2.022073060788638e-01, -2.022073060788639e-01, -3.866952452434041e-02, -4.770096212743634e-02, -3.750544938334676e-02, -3.193527899880668e-01, -4.176819425391921e-02, -4.176819425391922e-02, -7.615144641630486e-02, -1.078162606126129e-01, -4.409850074950120e-02, -6.393275511731282e-02, -3.823106659638967e-02, -6.985472884870206e-02, -5.228617704493326e-02, -3.836089247908516e-02, -4.170878511497591e-02, -8.077614253059227e-02, -6.279323792036740e-02, -4.994280548127072e-02, -4.902686206479304e-02, -4.051797893661054e-02, -1.318440061940864e-02, -1.137801049068572e-02, -9.192684312786846e-03, -8.755402038387240e-03, 4.782328755693019e-03, -2.928769586408675e-01, -3.114842468467296e-01, -2.304637539896109e-02, -2.860750475285122e-01, -2.860750475285122e-01, -1.044907479146190e-01, -1.439459140484541e-02, -2.854445607881368e-02, -4.314120400263367e-01, -3.942882225955938e-02, -3.942882360823322e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.973634431927753e-01, -2.973636718675278e-01, -2.973792780251387e-01, -2.973796636447158e-01, -2.974441180928640e-01, -2.974436916972387e-01, -5.712635844386063e-01, -5.712664382612611e-01, -6.704510977147520e-01, -6.704567225526149e-01, -7.771203133374128e-01, -7.771268167063110e-01, -4.088394439875798e-01, -4.088396694404807e-01, -5.047140805967993e-01, -5.047129678610488e-01, -5.055594175429343e-01, -5.055608175733867e-01, -5.052403640518087e-01, -5.052413379014883e-01, -5.052472110517776e-01, -5.052731117078044e-01, -4.081199596849620e-01, -4.081131096410806e-01, 4.185131037667322e-01, 4.210953053194806e-01, -7.248394771691655e-02, -7.089657170052217e-02, 5.515537380852805e-02, 5.591258871590127e-02, -8.594114119601808e-02, -8.566451697553620e-02, 4.389062844299242e-01, 3.900359945049754e-01, 1.737417936410309e-02, 2.462192024777854e-02, -5.696334882011587e-02, -4.745781732380647e-02, -9.530796682312428e-02, -7.693497377234208e-02, 1.369090430998095e-01, 1.435778065453374e-01, 2.416707279621731e-01, 2.460870667626282e-01, 2.607897096275439e-01, 2.084790155008710e-01, 2.573742258685550e-01, 2.025902294330557e-01, -1.037928031390008e-01, -9.515906441606055e-02, -1.088152657599937e-01, -9.856969321033732e-02, -3.118585531986017e-01, -2.803508818333112e-01, -6.209927572588620e-02, -6.353944446951111e-02, -5.625879260606870e-02, -1.104201726680698e-01, -5.625879260606827e-02, -1.104201726680693e-01, -3.990810367455435e-01, -3.991660585913047e-01, -4.937693790531502e-01, -4.938764529329243e-01, -4.944548988830862e-01, -4.945607286534204e-01, -4.938149465182397e-01, -4.939195838863653e-01, -3.284147560520566e-01, -3.284864727023157e-01, -3.985305030780504e-01, -3.986172878768781e-01, -3.151965389178524e-01, -3.151972114436354e-01, -3.218953944620010e-01, -3.219007645257944e-01, -3.639680352201521e-01, -3.641891617956881e-01, -3.793692606037643e-01, -3.795745348267551e-01, -1.999749943635295e-01, -2.005410361269335e-01, -3.214879490442852e-01, -3.215729976909558e-01, -9.960809188588256e-02, -9.981345622557744e-02, -1.852181176577908e-01, -1.851576553660165e-01, -2.324492289470492e-01, -2.307277354041216e-01, -1.708438638479123e-01, -1.682915952115804e-01, -1.053557445306669e-01, -1.093490199797501e-01, -1.638181299013413e-01, -1.681665342689397e-01, -3.064175454171728e-02, -2.460410012921340e-02, 5.698728673528971e-02, 5.871956651226955e-02, -1.201761292963607e-01, -8.468722139888546e-02, -3.166275804846173e-01, -3.166927216210721e-01, 5.239731773964511e-02, 8.093194013033699e-02, 5.239731773964303e-02, 8.093194013033272e-02, -5.148805202499170e-02, -4.890355281715909e-02, -6.224513495355908e-02, -6.098460014453919e-02, -5.058496372341849e-02, -4.685388212200960e-02, -2.438107522894401e-01, -2.396263146551714e-01, -7.108003605332078e-02, -4.728420439620926e-02, -7.108003605332089e-02, -4.728420439620948e-02, 5.172331705690025e-02, 5.201318934158264e-02, -4.157648357234506e-02, -4.096542550971197e-02, 5.319286190583493e-02, 5.353799296453300e-02, 5.168811825847214e-02, 5.202673292705814e-02, 6.537491773155478e-02, 6.567272210132297e-02, 3.994734791820986e-02, 4.033841276094537e-02, 6.454015166288157e-02, 6.475125311966511e-02, -2.947295954036440e-02, -2.908014643954189e-02, -8.694952165954173e-02, -8.662884443149986e-02, -1.702348983064965e-01, -1.697958510040669e-01, -1.520593966750542e-01, -1.516957630369415e-01, -1.124308516364046e-01, -1.121339424813536e-01, -1.134976674531225e-01, -1.133648819266806e-01, -3.753243597834171e-02, -3.592511927708195e-02, -8.664151305866115e-02, -8.460917092881916e-02, -1.256905137048757e-01, -1.251006883182451e-01, -1.091905697492315e-01, -1.092420129459290e-01, -1.096990508296379e-01, -1.097501946539479e-01, -2.214978706692029e-01, -2.212156250506649e-01, -3.550167140855845e-01, -3.508552027867783e-01, -3.084408454985137e-01, -2.867282926343225e-01, -9.701652367399526e-02, -9.573334512771385e-02, -1.029046893285465e-01, -6.938170535362570e-02, -1.029046893285475e-01, -6.938170535362681e-02, -1.366137610273057e-01, -1.296313936227430e-01, -1.889978597914384e-02, -1.884534237250589e-02, -3.880715072599104e-02, -3.580198934497139e-02, -4.578633973261818e-01, -4.429042157099758e-01, -6.494590717632166e-02, -4.499034057169854e-02, -6.494591759969026e-02, -4.499034949110644e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.419838443594499e-08, -2.839676887188998e-08, -1.419838443594499e-08, -1.419874232377601e-08, -2.839748464755203e-08, -1.419874232377601e-08, -1.420007660868261e-08, -2.840015321736521e-08, -1.420007660868261e-08, -1.239803284399819e-09, -2.479606568799638e-09, -1.239803284399819e-09, -6.395515102805278e-10, -1.279103020561056e-09, -6.395515102805278e-10, -3.120330589740656e-10, -6.240661179481311e-10, -3.120330589740656e-10, 2.321432372707527e-06, 4.642864745415053e-06, 2.321432372707527e-06, 9.686730316403785e-07, 1.937346063280757e-06, 9.686730316403785e-07, 9.614202724544549e-07, 1.922840544908910e-06, 9.614202724544549e-07, 9.639409423237356e-07, 1.927881884647471e-06, 9.639409423237356e-07, 9.641733932650150e-07, 1.928346786530030e-06, 9.641733932650150e-07, 2.315797140152393e-06, 4.631594280304786e-06, 2.315797140152393e-06, 6.542922653519831e-02, 1.308584530703966e-01, 6.542922653519831e-02, 1.924186810447381e-02, 3.848373620894762e-02, 1.924186810447381e-02, 3.160847836498845e-03, 6.321695672997690e-03, 3.160847836498845e-03, 9.821216991609398e-03, 1.964243398321880e-02, 9.821216991609398e-03, 7.818862617682532e-02, 1.563772523536506e-01, 7.818862617682532e-02, 3.211676235892014e-03, 6.423352471784029e-03, 3.211676235892014e-03, 4.145330631002111e+00, 8.290661262004225e+00, 4.145330631002111e+00, 8.173011252385878e+00, 1.634602250477176e+01, 8.173011252385878e+00, 2.960416571687701e-03, 5.920833143375401e-03, 2.960416571687701e-03, 7.495094535593192e-01, 1.499018907118636e+00, 7.495094535593192e-01, 3.089579897780297e-01, 6.179159795560606e-01, 3.089579897780297e-01, 3.409517446559471e-01, 6.819034893118959e-01, 3.409517446559471e-01, 5.029389484328756e-03, 1.005877896874852e-02, 5.029389484328756e-03, 3.520904406311620e-03, 7.041808812604042e-03, 3.520904406311620e-03, 1.537766361468985e-01, 3.075532722938232e-01, 1.537766361468985e-01, 9.113387460803562e-04, 1.822677491994829e-03, 9.113387460803562e-04, 6.354987983885226e-05, 1.270997597052974e-04, 6.354987983885226e-05, 6.354987979058499e-05, 1.270997595998540e-04, 6.354987979058499e-05, -1.278530930788044e-06, -2.557061861576087e-06, -1.278530930788044e-06, -7.126153263624499e-07, -1.425230652724900e-06, -7.126153263624499e-07, -7.033833209221836e-07, -1.406766641844367e-06, -7.033833209221836e-07, -7.120239055369762e-07, -1.424047811073952e-06, -7.120239055369762e-07, -2.117401322318042e-06, -4.234802644636083e-06, -2.117401322318042e-06, -1.285750299016561e-06, -2.571500598033122e-06, -1.285750299016561e-06, 4.746413102037207e-05, 9.492826204074413e-05, 4.746413102037207e-05, 4.449156460048095e-05, 8.898312920096190e-05, 4.449156460048095e-05, 1.969667095861624e-05, 3.939334191723248e-05, 1.969667095861624e-05, 1.893128158711490e-05, 3.786256317422980e-05, 1.893128158711490e-05, 8.738500734999360e-05, 1.747700146999872e-04, 8.738500734999360e-05, 4.471945220248356e-05, 8.943890440496713e-05, 4.471945220248356e-05, -2.897189495459690e-04, -5.794378990919381e-04, -2.897189495459690e-04, -8.419944903654924e-03, -1.683988980730985e-02, -8.419944903654924e-03, 6.863651367133892e-03, 1.372730273426778e-02, 6.863651367133892e-03, -5.088971591338471e-04, -1.017794318267694e-03, -5.088971591338471e-04, -2.759730534105015e-03, -5.519461068210030e-03, -2.759730534105015e-03, -1.830934423332690e-03, -3.661868846665380e-03, -1.830934423332690e-03, 2.958499831794242e-01, 5.916999663588518e-01, 2.958499831794242e-01, 2.352750295114318e+00, 4.705500590228637e+00, 2.352750295114318e+00, 1.733803202438582e+00, 3.467606404877157e+00, 1.733803202438582e+00, -1.113120783777233e-05, -2.226241567554467e-05, -1.113120783777233e-05, 5.055337308853106e+00, 1.011067461770621e+01, 5.055337308853106e+00, 5.055337308853099e+00, 1.011067461770620e+01, 5.055337308853099e+00, 2.074727161610777e-04, 4.149454321737190e-04, 2.074727161610777e-04, 8.938425871146640e-05, 1.787685175008141e-04, 8.938425871146640e-05, 1.140869050205410e-02, 2.281738100209676e-02, 1.140869050205410e-02, 1.085114802931225e+00, 2.170229605862460e+00, 1.085114802931225e+00, 2.559190361318396e-03, 5.118380722484410e-03, 2.559190361318396e-03, 2.559190361321711e-03, 5.118380722380356e-03, 2.559190361321711e-03, -1.253157452767812e-01, -2.506314905535624e-01, -1.253157452767812e-01, -4.956470920468256e-02, -9.912941840936512e-02, -4.956470920468256e-02, -8.916661019540380e-02, -1.783332203908076e-01, -8.916661019540380e-02, -9.741653861307030e-02, -1.948330772261406e-01, -9.741653861307030e-02, -9.928481809972353e-02, -1.985696361994471e-01, -9.928481809972353e-02, -8.568909934153060e-02, -1.713781986830612e-01, -8.568909934153060e-02, -1.336412876431896e-01, -2.672825752863792e-01, -1.336412876431896e-01, 1.712567456394668e-02, 3.425134912789336e-02, 1.712567456394668e-02, -8.963638587320286e-03, -1.792727717464057e-02, -8.963638587320286e-03, -1.898800483018499e-02, -3.797600966036997e-02, -1.898800483018499e-02, -1.211745918155967e-02, -2.423491836311934e-02, -1.211745918155967e-02, -1.771387208420908e-02, -3.542774416841817e-02, -1.771387208420908e-02, -8.850503734658288e-03, -1.770100746931658e-02, -8.850503734658288e-03, 1.411785741975380e+00, 2.823571483950761e+00, 1.411785741975380e+00, 7.435859010607810e-01, 1.487171802121562e+00, 7.435859010607810e-01, 1.740818192917136e-01, 3.481636385834272e-01, 1.740818192917136e-01, 4.017193345994226e-01, 8.034386691988451e-01, 4.017193345994226e-01, 3.999073245396226e-01, 7.998146490792453e-01, 3.999073245396226e-01, 1.922624106952087e-02, 3.845248213904174e-02, 1.922624106952087e-02, 2.083300467055476e+03, 4.166600934110953e+03, 2.083300467055476e+03, 5.453332709563903e-02, 1.090666541912783e-01, 5.453332709563903e-02, 1.326173425737306e-01, 2.652346851474612e-01, 1.326173425737306e-01, 4.879171924305237e-01, 9.758343848610415e-01, 4.879171924305237e-01, 4.879171924305144e-01, 9.758343848610355e-01, 4.879171924305144e-01, 5.898646742421967e+04, 1.179729348484393e+05, 5.898646742421967e+04, 1.025520125972646e-05, 2.051040439386455e-05, 1.025520125972646e-05, 1.249145668166389e+07, 2.498291336332778e+07, 1.249145668166389e+07, 5.057937283516790e+02, 1.011587456703358e+03, 5.057937283516790e+02, 4.196439026358657e-04, 8.392878054981405e-04, 4.196439026358657e-04, 8.479844908516687e-02, 1.695968981722999e-01, 8.479844908516687e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.133257624461490e-04, 1.133257624461490e-04, 1.133357065034566e-04, 1.133357065034567e-04, 1.133754995165557e-04, 1.133754995165555e-04, 2.639053944108172e-04, 2.639053944108171e-04, 3.037290806065100e-04, 3.037290806065100e-04, 3.436958160805235e-04, 3.436958160805234e-04, 2.101963788472429e-03, 2.101963788472430e-03, 3.334494940257400e-03, 3.334494940257396e-03, 3.359620495250733e-03, 3.359620495250735e-03, 3.349015519767959e-03, 3.349015519767960e-03, 3.350710013764788e-03, 3.350710013764789e-03, 2.108382239930020e-03, 2.108382239930021e-03, -7.499850003367517e-02, -7.499850003367517e-02, -3.510609359586220e-02, -3.510609359586221e-02, -1.466480017930368e-02, -1.466480017930369e-02, -2.267819568158725e-02, -2.267819568158726e-02, -7.506466543514718e-02, -7.506466543514721e-02, -1.204310431775777e-02, -1.204310431775778e-02, -2.681833695580552e-01, -2.681833695580553e-01, -3.353722136431181e-01, -3.353722136431182e-01, -2.220163460486323e-02, -2.220163460486323e-02, -2.906958508764769e-01, -2.906958508764773e-01, -2.403559788672229e-01, -2.403559788672227e-01, -2.403722191009943e-01, -2.403722191009948e-01, -4.231257781279860e-04, -4.231257781282825e-04, -5.095186684012872e-04, -5.095186684014247e-04, -2.629119377585888e-02, -2.629119377585888e-02, -6.474567131931980e-05, -6.474567131931980e-05, -1.478266821287541e-04, -1.478266821286904e-04, -1.478266821290059e-04, -1.478266821290059e-04, 4.391661265646055e-03, 4.391661265646056e-03, 5.355059109574027e-03, 5.355059109574027e-03, 5.330180025848020e-03, 5.330180025848019e-03, 5.353475747378271e-03, 5.353475747378272e-03, 3.577382282466626e-03, 3.577382282466627e-03, 4.398221411562887e-03, 4.398221411562889e-03, 2.744899651963475e-03, 2.744899651963479e-03, 3.103785937394226e-03, 3.103785937394223e-03, 5.587676647637183e-03, 5.587676647637183e-03, 5.990989377779470e-03, 5.990989377779470e-03, -4.299937819141562e-04, -4.299937819141562e-04, 3.084851782501486e-03, 3.084851782501486e-03, 2.490402543002415e-02, 2.490402543002415e-02, 1.138728924670230e-01, 1.138728924670231e-01, 5.400381638996698e-02, 5.400381638996695e-02, 6.132565620568690e-02, 6.132565620568697e-02, 3.513478496830887e-02, 3.513478496830884e-02, 6.167317955697769e-02, 6.167317955697770e-02, -1.818057142664110e-01, -1.818057142664114e-01, -2.427605992563895e-01, -2.427605992563897e-01, -1.620895121810554e-01, -1.620895121810552e-01, 1.261924121763188e-02, 1.261924121763188e-02, -2.956470803887896e-01, -2.956470803887886e-01, -2.956470803887888e-01, -2.956470803887886e-01, -2.119788793268112e-05, -2.119788793266933e-05, -5.362432391075556e-05, -5.362432391073402e-05, -1.993959541403184e-04, -1.993959541402995e-04, -9.249956811050643e-02, -9.249956811050619e-02, -1.236649380446094e-04, -1.236649380445577e-04, -1.236649380443439e-04, -1.236649380442885e-04, 2.387663901792928e-02, 2.387663901792975e-02, 6.499372438185870e-02, 6.499372438185849e-02, -2.659807483729033e-01, -2.659807483729035e-01, -1.531445214439798e-01, -1.531445214439799e-01, -3.069959349054845e-01, -3.069959349054842e-01, -1.305814874243399e-01, -1.305814874243397e-01, -1.881306343875362e-01, -1.881306343875365e-01, -1.894318464112262e-02, -1.894318464112262e-02, 4.097094041337013e-02, 4.097094041337016e-02, 1.507825065627049e-01, 1.507825065627049e-01, 1.072753644370906e-01, 1.072753644370906e-01, 7.526761925273139e-02, 7.526761925273139e-02, 4.655079998052237e-02, 4.655079998052238e-02, -1.858399363410729e-01, -1.858399363410728e-01, -1.297573033343269e-01, -1.297573033343269e-01, -2.242720149138263e-02, -2.242720149138267e-02, -7.518581437618589e-02, -7.518581437618591e-02, -7.464645947684434e-02, -7.464645947684427e-02, 6.181745766306866e-02, 6.181745766306869e-02, -4.475767153692597e-03, -4.475767153692348e-03, -4.592754118504001e-02, -4.592754118504001e-02, 1.402023425833707e-03, 1.402023425833674e-03, -1.923483665115188e-01, -1.923483665115192e-01, -1.923483665115187e-01, -1.923483665115189e-01, -9.088877301168445e-05, -9.088877301168445e-05, -1.415134469758824e-06, -1.415134469739968e-06, -5.935624440452729e-06, -5.935624440452729e-06, -5.180218652857619e-02, -5.180218652857599e-02, -1.424555044847673e-04, -1.424555044847673e-04, -1.424547739117285e-04, -1.424547739117202e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
