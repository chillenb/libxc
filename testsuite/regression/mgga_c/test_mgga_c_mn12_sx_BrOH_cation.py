
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_mn12_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.957380703926631e-01, -2.957475766695219e-01, -2.957879274276102e-01, -2.956472557555048e-01, -2.957212219377044e-01, -2.957212219377044e-01, 1.784107465517912e-02, 1.778956940887452e-02, 1.647186796531929e-02, 1.739663138820944e-02, 1.713112623498688e-02, 1.713112623498688e-02, -1.768682216876466e-02, -1.702396331364637e-02, 5.438401498708780e-04, 1.146637833921836e-02, 7.690778415025184e-03, 7.690778415025184e-03, 2.417035297958241e-02, 2.646504106376220e-02, -1.940365030966568e-01, -1.401068612081515e-01, -3.450224180208803e-02, -3.450224180208797e-02, -7.770730487278189e-02, -8.103718284358603e-02, -2.763167315375230e-01, -4.865309385376858e-02, -5.051346049995795e-02, -5.051346049995796e-02, -2.679325087499600e-01, -2.692062331579731e-01, -2.680143051493180e-01, -2.691376742805792e-01, -2.685664990953250e-01, -2.685664990953250e-01, 9.234204876203539e-02, 8.383143465977591e-02, 1.014958933550984e-01, 9.398593172145880e-02, 8.311230366324185e-02, 8.311230366324185e-02, -3.913115191338235e-02, -6.053035892051607e-02, -2.411776603906701e-02, -3.788746942286852e-02, -4.396679466038125e-02, -4.396679466038125e-02, -2.953894171108871e-01, -4.070854502756251e-02, -3.070480527424890e-01, -6.163477301778381e-02, -1.858167136966433e-01, -1.858167136966434e-01, -3.866952452018311e-02, -4.770096214483342e-02, -3.750544921019346e-02, -3.188434178792028e-01, -4.176819415932680e-02, -4.176819415932682e-02, -4.968979796518132e-02, -9.789511870729287e-02, -8.777803520030460e-02, -7.435146739868366e-02, -8.171723682834009e-02, -8.171723682834009e-02, -3.549323550245338e-02, -2.033377837665573e-02, -4.777482353511731e-02, -7.597223950058879e-02, -6.003777638340795e-02, -6.003777638340794e-02, -5.051506802338263e-02, 2.975458822475958e-02, 4.838513934192310e-02, 4.944882382478649e-03, 3.410033316323596e-02, 3.410033316323591e-02, -4.815083710285459e-03, -2.707378916724675e-01, -3.114986861852939e-01, -1.582032920612367e-02, -2.864816409497064e-01, -2.864816409497065e-01, -1.035735807281690e-01, -1.439459140513473e-02, -2.840979708017802e-02, -2.889342515110594e-01, -3.942882229264457e-02, -3.942882229264458e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_mn12_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.666473593037552e-01, -7.666480079326263e-01, -7.666527130971378e-01, -7.666538068888267e-01, -7.666824453455231e-01, -7.666812359140842e-01, -7.665975211656092e-01, -7.666013568916280e-01, -7.666388584170958e-01, -7.666452779478397e-01, -7.666388584170958e-01, -7.666452779478397e-01, -3.861726514685335e-01, -3.861730977098702e-01, -3.861756658293664e-01, -3.861761762627591e-01, -3.863502260624691e-01, -3.863495228494410e-01, -3.874437962980299e-01, -3.874433359036630e-01, -3.868379725415371e-01, -3.868255207995647e-01, -3.868379725415371e-01, -3.868255207995647e-01, -1.039603597819309e-01, -1.030471303996865e-01, -1.037787260944951e-01, -1.026583931793189e-01, -7.960940341635671e-02, -8.108406578028628e-02, -9.351464196499029e-02, -9.312450443989682e-02, -8.464101305438904e-02, -9.709068458627844e-02, -8.464101305438904e-02, -9.709068458627844e-02, 5.430772286808130e-02, 5.718153130534866e-02, 3.233688982538872e-02, 3.556807322995149e-02, -1.089939080231112e-01, -8.666406953029869e-02, 2.032652010730364e-01, 2.081022603163415e-01, 1.943037149032610e-01, 9.248648152879770e-02, 1.943037149032615e-01, 9.248648152879750e-02, -1.037927853435383e-01, -9.515904722552938e-02, -1.088152513002010e-01, -9.856967930534707e-02, -3.117137964400880e-01, -2.802109941734336e-01, -6.209927511184614e-02, -6.353944384951518e-02, -5.625879311949944e-02, -1.104201733586043e-01, -5.625879311949902e-02, -1.104201733586038e-01, -4.935015155942985e-01, -4.936051952314280e-01, -4.927716133418734e-01, -4.928784913932764e-01, -4.934792425268804e-01, -4.935848820765690e-01, -4.928367579442269e-01, -4.929412076353343e-01, -4.931291090699323e-01, -4.932349174578836e-01, -4.931291090699323e-01, -4.932349174578836e-01, -3.711044649583079e-01, -3.710998589252354e-01, -3.854607895719996e-01, -3.854389393037095e-01, -3.599674438825680e-01, -3.601505132067074e-01, -3.747837683150859e-01, -3.749571933512809e-01, -3.836404590001636e-01, -3.832982132813747e-01, -3.836404590001636e-01, -3.832982132813747e-01, -1.202716591034662e-01, -1.204775573019014e-01, -1.465293652513936e-01, -1.464838296678962e-01, -1.370281143096075e-01, -1.339346509667653e-01, -3.390680589983337e-02, -3.145702971269026e-02, -1.130173187239205e-01, -1.170538469970806e-01, -1.130173187239205e-01, -1.170538469970807e-01, -3.621248808284039e-02, -3.013781521645808e-02, 2.349576085634770e-01, 2.358153208414994e-01, -9.913338175335154e-02, -6.439916606253705e-02, -1.122988078828066e-01, -1.123461807455750e-01, 1.445156660723836e-01, 1.690360517757943e-01, 1.445156660723813e-01, 1.690360517757898e-01, -5.148805199667452e-02, -4.890355278946051e-02, -6.224513507300181e-02, -6.098460026295381e-02, -5.058496249348843e-02, -4.685388093038943e-02, -2.400584751940005e-01, -2.358892433468118e-01, -7.108003531126529e-02, -4.728420377277490e-02, -7.108003531126540e-02, -4.728420377277512e-02, 6.750960549309924e-02, 6.771199853628874e-02, -2.787063829982323e-02, -2.730001029149685e-02, 1.214604754996709e-02, 1.262885781945957e-02, 4.226273453122725e-02, 4.263598853412532e-02, 2.783219337074611e-02, 2.826392327187882e-02, 2.783219337074611e-02, 2.826392327187875e-02, 7.429985816457597e-02, 7.446819918427629e-02, -1.870281642190904e-01, -1.867557044534933e-01, -1.370360522908529e-01, -1.366755412134643e-01, -1.624596318174851e-01, -1.620439333435885e-01, -1.428777855492294e-01, -1.425298592522940e-01, -1.428777855492294e-01, -1.425298592522940e-01, -1.165698084903850e-01, -1.164344334394084e-01, 1.152741246906472e-01, 1.156289732779434e-01, -3.889262392335002e-02, -3.847808093415343e-02, -1.597828458130702e-01, -1.593609015812145e-01, -1.404961622434853e-01, -1.405141894684283e-01, -1.404961622434853e-01, -1.405141894684283e-01, -1.897392382776542e-01, -1.893213238554255e-01, -2.945777558613439e-01, -2.907306372525720e-01, -3.085534127629174e-01, -2.868384991562621e-01, -1.291052656863760e-01, -1.279944042173655e-01, -1.058251809367395e-01, -7.219478109746312e-02, -1.058251809367405e-01, -7.219478109746438e-02, -1.346218474791378e-01, -1.277007674536606e-01, -1.889978598106321e-02, -1.884534237442286e-02, -3.860018544491504e-02, -3.560920096740603e-02, -1.155164647002222e-01, -1.054418614210905e-01, -6.494590743219943e-02, -4.499034079066301e-02, -6.494590743219938e-02, -4.499034079066307e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.353724156514341e-10, -6.707448313028683e-10, -3.353724156514341e-10, -3.353906982140775e-10, -6.707813964281551e-10, -3.353906982140775e-10, -3.354484037794531e-10, -6.708968075589062e-10, -3.354484037794531e-10, -3.351777383493625e-10, -6.703554766987250e-10, -3.351777383493625e-10, -3.353228830977473e-10, -6.706457661954946e-10, -3.353228830977473e-10, -3.353228830977473e-10, -6.706457661954946e-10, -3.353228830977473e-10, 2.666376876559089e-06, 5.332753753118177e-06, 2.666376876559089e-06, 2.665208881725172e-06, 5.330417763450343e-06, 2.665208881725172e-06, 2.632204341432936e-06, 5.264408682865872e-06, 2.632204341432936e-06, 2.626802925676040e-06, 5.253605851352080e-06, 2.626802925676040e-06, 2.636101894375344e-06, 5.272203788750686e-06, 2.636101894375344e-06, 2.636101894375344e-06, 5.272203788750686e-06, 2.636101894375344e-06, 1.398073782332630e-02, 2.796147564665260e-02, 1.398073782332630e-02, 1.395947217855331e-02, 2.791894435710662e-02, 1.395947217855331e-02, 1.285731192954839e-02, 2.571462385909678e-02, 1.285731192954839e-02, 1.186480396040033e-02, 2.372960792080066e-02, 1.186480396040033e-02, 1.220569926906132e-02, 2.441139853812265e-02, 1.220569926906132e-02, 1.220569926906132e-02, 2.441139853812265e-02, 1.220569926906132e-02, 1.679531278439781e+00, 3.359062556879562e+00, 1.679531278439781e+00, 1.723074763310549e+00, 3.446149526621097e+00, 1.723074763310549e+00, 1.096245950103170e-02, 2.192491900206341e-02, 1.096245950103170e-02, 1.317125766424671e+00, 2.634251532849344e+00, 1.317125766424671e+00, 1.159810066777226e+00, 2.319620133554449e+00, 1.159810066777226e+00, 1.159810066777229e+00, 2.319620133554457e+00, 1.159810066777229e+00, 6.617467175127198e-04, 1.323493435077389e-03, 6.617467175127198e-04, 8.231201048672217e-04, 1.646240209660043e-03, 8.231201048672217e-04, 4.261436679911417e-02, 8.522873359824609e-02, 4.261436679911417e-02, 1.612203730437723e-04, 3.224407460817685e-04, 1.612203730437723e-04, 2.739622619905829e-04, 5.479245240649305e-04, 2.739622619905829e-04, 2.739622620923844e-04, 5.479245241002336e-04, 2.739622620923844e-04, -7.070686824013969e-07, -1.414137364802794e-06, -7.070686824013969e-07, -7.168957576185733e-07, -1.433791515237147e-06, -7.168957576185733e-07, -7.075478917868027e-07, -1.415095783573605e-06, -7.075478917868027e-07, -7.162187860258478e-07, -1.432437572051696e-06, -7.162187860258478e-07, -7.120095686051379e-07, -1.424019137210276e-06, -7.120095686051379e-07, -7.120095686051379e-07, -1.424019137210276e-06, -7.120095686051379e-07, 2.328833641513763e-05, 4.657667283027526e-05, 2.328833641513763e-05, 2.153632888611069e-05, 4.307265777222139e-05, 2.153632888611069e-05, 2.343921805743434e-05, 4.687843611486867e-05, 2.343921805743434e-05, 2.191583274046978e-05, 4.383166548093956e-05, 2.191583274046978e-05, 2.218877898601091e-05, 4.437755797202183e-05, 2.218877898601091e-05, 2.218877898601091e-05, 4.437755797202183e-05, 2.218877898601091e-05, -2.560761700973595e-04, -5.121523401947191e-04, -2.560761700973595e-04, -1.388529070927085e-02, -2.777058141854170e-02, -1.388529070927085e-02, 1.280344474827847e-02, 2.560688949655693e-02, 1.280344474827847e-02, -1.174688039128801e-03, -2.349376078257602e-03, -1.174688039128801e-03, -2.623486822728588e-03, -5.246973645457177e-03, -2.623486822728588e-03, -2.623486822728595e-03, -5.246973645457190e-03, -2.623486822728595e-03, 4.813610442740145e-01, 9.627220885480332e-01, 4.813610442740145e-01, 7.014579602371994e-01, 1.402915920474399e+00, 7.014579602371994e-01, 4.436514705819343e-01, 8.873029411638685e-01, 4.436514705819343e-01, -4.040353384599679e-05, -8.080706769199359e-05, -4.040353384599679e-05, 1.276355117392485e+00, 2.552710234784966e+00, 1.276355117392485e+00, 1.276355117392485e+00, 2.552710234784965e+00, 1.276355117392485e+00, 1.426469285687026e-04, 2.852938568135527e-04, 1.426469285687026e-04, 1.945317539615459e-04, 3.890635077415142e-04, 1.945317539615459e-04, 2.153407471044930e-03, 4.306814941456631e-03, 2.153407471044930e-03, 2.563075074739514e-01, 5.126150149479015e-01, 2.563075074739514e-01, 8.032643673515430e-04, 1.606528734577614e-03, 8.032643673515430e-04, 8.032643680399586e-04, 1.606528735896556e-03, 8.032643680399586e-04, -1.358364510968751e-01, -2.716729021937502e-01, -1.358364510968751e-01, -5.309041223031399e-02, -1.061808244606280e-01, -5.309041223031399e-02, -7.093086191878070e-02, -1.418617238375614e-01, -7.093086191878070e-02, -9.325298698300867e-02, -1.865059739660173e-01, -9.325298698300867e-02, -8.100809373627368e-02, -1.620161874725474e-01, -8.100809373627368e-02, -8.100809373627368e-02, -1.620161874725474e-01, -8.100809373627368e-02, -1.415500522127667e-01, -2.831001044255334e-01, -1.415500522127667e-01, 7.344575970366580e-03, 1.468915194073316e-02, 7.344575970366580e-03, -6.208716537602230e-03, -1.241743307520446e-02, -6.208716537602230e-03, -2.090379961355330e-02, -4.180759922710659e-02, -2.090379961355330e-02, -1.321553621277082e-02, -2.643107242554164e-02, -1.321553621277082e-02, -1.321553621277082e-02, -2.643107242554164e-02, -1.321553621277082e-02, -8.546859128382926e-03, -1.709371825676585e-02, -8.546859128382926e-03, 4.732900257641349e-01, 9.465800515282694e-01, 4.732900257641349e-01, 3.444796418302638e-01, 6.889592836605274e-01, 3.444796418302638e-01, 1.376194095943811e-01, 2.752388191887622e-01, 1.376194095943811e-01, 2.348356212875304e-01, 4.696712425750607e-01, 2.348356212875304e-01, 2.348356212875307e-01, 4.696712425750612e-01, 2.348356212875307e-01, 2.507798208314107e-02, 5.015596416628215e-02, 2.507798208314107e-02, 3.257351913947582e-02, 6.514703827895288e-02, 3.257351913947582e-02, 8.238042967311272e-02, 1.647608593462347e-01, 8.238042967311272e-02, 1.116521069997854e-01, 2.233042139995708e-01, 1.116521069997854e-01, 7.356668661956272e-01, 1.471333732391253e+00, 7.356668661956272e-01, 7.356668661956138e-01, 1.471333732391226e+00, 7.356668661956138e-01, 9.615687513555713e-04, 1.923137502716205e-03, 9.615687513555713e-04, 1.783380006051020e-04, 3.566759988777030e-04, 1.783380006051020e-04, 2.458544935228917e-04, 4.917089867562190e-04, 2.458544935228917e-04, 6.344268081807494e-01, 1.268853616361499e+00, 6.344268081807494e-01, 1.030549453578212e-03, 2.061098907638308e-03, 1.030549453578212e-03, 1.030549453161500e-03, 2.061098906356148e-03, 1.030549453161500e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_mn12_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.399473195525483e-04, 3.399473195525482e-04, 3.399561707360727e-04, 3.399561707360728e-04, 3.399928058942148e-04, 3.399928058942148e-04, 3.398620011932155e-04, 3.398620011932154e-04, 3.399309053713001e-04, 3.399309053713001e-04, 3.399309053713001e-04, 3.399309053713001e-04, 1.856773737356010e-03, 1.856773737356011e-03, 1.857611662473827e-03, 1.857611662473825e-03, 1.880806870757409e-03, 1.880806870757410e-03, 1.883371276922637e-03, 1.883371276922637e-03, 1.878269636169914e-03, 1.878269636169915e-03, 1.878269636169914e-03, 1.878269636169915e-03, -2.752074638725242e-02, -2.752074638725240e-02, -2.755777170434789e-02, -2.755777170434790e-02, -2.830026542881474e-02, -2.830026542881475e-02, -2.560740692713968e-02, -2.560740692713969e-02, -2.634971403250754e-02, -2.634971403250756e-02, -2.634971403250754e-02, -2.634971403250756e-02, -2.241757671835560e-01, -2.241757671835561e-01, -2.131967801818573e-01, -2.131967801818573e-01, -2.755897421651679e-02, -2.755897421651679e-02, -2.886649349711262e-01, -2.886649349711265e-01, -2.406978034668270e-01, -2.406978034668268e-01, -2.406978034668271e-01, -2.406978034668276e-01, -4.231272142434973e-04, -4.231272142437938e-04, -5.095199300683895e-04, -5.095199300685271e-04, -2.630713256745140e-02, -2.630713256745140e-02, -6.474569050109566e-05, -6.474569050109566e-05, -1.478266509680377e-04, -1.478266509679741e-04, -1.478266509682895e-04, -1.478266509682895e-04, 5.319567926069081e-03, 5.319567926069082e-03, 5.345860949607603e-03, 5.345860949607602e-03, 5.321274626818822e-03, 5.321274626818822e-03, 5.344463939157500e-03, 5.344463939157502e-03, 5.332625390250303e-03, 5.332625390250304e-03, 5.332625390250303e-03, 5.332625390250304e-03, 5.380284809750379e-03, 5.380284809750383e-03, 5.869285257047301e-03, 5.869285257047297e-03, 5.121563556613242e-03, 5.121563556613242e-03, 5.584669490692223e-03, 5.584669490692223e-03, 5.770218596256450e-03, 5.770218596256450e-03, 5.770218596256450e-03, 5.770218596256450e-03, 3.383962453365975e-02, 3.383962453365975e-02, 8.216469176049890e-02, 8.216469176049897e-02, 1.403122562702565e-02, 1.403122562702563e-02, -3.585768638840311e-03, -3.585768638840300e-03, 3.868016681754564e-02, 3.868016681754562e-02, 3.868016681754564e-02, 3.868016681754564e-02, -1.813160939102419e-01, -1.813160939102423e-01, -2.406186028248313e-01, -2.406186028248315e-01, -1.640842418009599e-01, -1.640842418009596e-01, 3.402986838040196e-03, 3.402986838040196e-03, -3.040131553585053e-01, -3.040131553585043e-01, -3.040131553585045e-01, -3.040131553585043e-01, -2.119788833544754e-05, -2.119788833543573e-05, -5.362432071658189e-05, -5.362432071656034e-05, -1.993960893302130e-04, -1.993960893301941e-04, -9.293936454661497e-02, -9.293936454661474e-02, -1.236649802521189e-04, -1.236649802520673e-04, -1.236649802518534e-04, -1.236649802517981e-04, -1.541635199755710e-01, -1.541635199755706e-01, 2.163668999178408e-02, 2.163668999178388e-02, -3.778304526614716e-02, -3.778304526614711e-02, -9.139026033298736e-02, -9.139026033298737e-02, -6.440579359509378e-02, -6.440579359509357e-02, -6.440579359509378e-02, -6.440579359509357e-02, -3.020261781835525e-01, -3.020261781835528e-01, 6.129648773010622e-02, 6.129648773010624e-02, 7.384708242055998e-02, 7.384708242056003e-02, 1.426231810143634e-01, 1.426231810143634e-01, 1.004120848425480e-01, 1.004120848425480e-01, 1.004120848425480e-01, 1.004120848425479e-01, 4.864388421885428e-02, 4.864388421885429e-02, -1.586859502825902e-01, -1.586859502825902e-01, -8.441039847191996e-02, -8.441039847191996e-02, 5.751287610217072e-03, 5.751287610217052e-03, -2.178712330177760e-02, -2.178712330177763e-02, -2.178712330177774e-02, -2.178712330177771e-02, 4.188417969998205e-02, 4.188417969998207e-02, -2.391947358450932e-02, -2.391947358450885e-02, -4.591577385447832e-02, -4.591577385447832e-02, 3.136122492086310e-02, 3.136122492086307e-02, -1.919969141205594e-01, -1.919969141205599e-01, -1.919969141205593e-01, -1.919969141205596e-01, -5.371338999867107e-04, -5.371338999867222e-04, -1.415134464257093e-06, -1.415134464238236e-06, -3.529122403635987e-05, -3.529122403637799e-05, -1.837286019167582e-01, -1.837286019167576e-01, -1.424554865625986e-04, -1.424554865625986e-04, -1.424554865628496e-04, -1.424554865628413e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
