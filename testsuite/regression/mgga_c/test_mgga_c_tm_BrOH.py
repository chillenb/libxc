
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_tm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645987698516499e-01, -1.645988436743185e-01, -1.645992273738454e-01, -1.645980174205966e-01, -1.645988083291892e-01, -1.645988083291892e-01, -1.107845175179429e-01, -1.107845773617200e-01, -1.107873959302812e-01, -1.107885830051033e-01, -1.107846697666463e-01, -1.660746218973727e-02, -6.686302819127442e-02, -7.825352818491860e-03, -6.562151316589585e-03, -7.104818956977929e-03, -7.859108502142680e-03, -7.859108502142680e-03, -6.240514145759320e-03, -6.584613847446008e-03, -7.129454252820250e-02, -1.085230147403620e-03, -6.338044324121527e-03, -6.338044324121527e-03, -1.021119583398359e-07, -1.250161473235800e-07, -2.095649178370361e-05, -1.240743168309904e-09, -1.247084363165699e-07, -1.247084363165699e-07, -3.510647015061676e-02, -3.518874990341823e-02, -3.511556136296741e-02, -1.224181159734425e-01, -3.514771836188152e-02, -3.514771836188152e-02, -9.468307849320162e-02, -9.487508716530833e-02, -9.460510801354542e-02, -9.475546076572412e-02, -9.491339721119328e-02, -1.451757087879117e-02, -2.035377966575670e-02, -2.534397888353531e-02, -1.783865422771069e-02, -2.165837254584943e-02, -2.212944341520076e-02, -6.444458984389427e-02, -2.795790560897061e-02, -3.171854242103526e-03, -2.775589238622643e-02, -2.487754782300589e-02, -8.859870255633278e-04, -8.859870255633278e-04, -3.066310498112501e-03, -2.462192712496281e-09, -2.531353797091984e-09, -2.111687625325582e-02, -3.174878197427740e-03, -1.970515096645025e-09, -2.972787554359512e-02, -2.896229364470118e-02, -6.421258200260356e-02, -2.947681471624077e-02, -2.937162581875628e-02, -2.937162581875628e-02, -2.920542774622818e-02, -1.931997384021971e-02, -2.245259693429167e-02, -2.533177561075171e-02, -2.387176128510354e-02, -6.165502636499921e-02, -2.420957825048922e-02, -4.342835275928391e-02, -8.250562536014540e-03, -5.212060951466563e-02, -1.112651887703443e-02, -1.112651887703444e-02, -5.782933926396749e-02, -1.415367676334508e-05, -4.467768596581981e-05, -1.525504127316954e-02, -2.479856847389609e-02, -2.711158110195928e-04, -8.162465935990080e-08, -6.065725203891899e-12, -2.517548939752889e-10, -2.679240436656490e-04, -1.298860249825303e-09, -1.298860254764541e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_tm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747363821491154e-01, -1.747364563991749e-01, -1.747368423303563e-01, -1.747356253397650e-01, -1.747364208484719e-01, -1.747364208484719e-01, -1.202894325397279e-01, -1.202894936034073e-01, -1.202923696260642e-01, -1.202935808973291e-01, -1.202895878919845e-01, -6.304348865416240e-02, -7.491623656166166e-02, -3.542459610620603e-02, -3.095786187854924e-02, -2.981757157230958e-02, -3.553897506592461e-02, -3.553897506592461e-02, -2.763874802814005e-02, -2.872555576383289e-02, -7.955565354779474e-02, -6.281416499404389e-03, -2.795083641484789e-02, -2.795083641484789e-02, -6.975328506611044e-07, -8.532145304724384e-07, -1.375428413405448e-04, -8.585313779363372e-09, -8.512541115478458e-07, -8.512541115462538e-07, -1.062758838224381e-01, -1.064889692757489e-01, -1.062994052833332e-01, -1.321322029122264e-01, -1.063826602574978e-01, -1.063826602574978e-01, -1.037961680429288e-01, -1.039936710459792e-01, -1.037159602498012e-01, -1.038706240781529e-01, -1.040330747452932e-01, -5.684919184850934e-02, -6.325272097530829e-02, -7.215801332622325e-02, -5.877007260789689e-02, -6.518786169086065e-02, -6.637300120807174e-02, -7.237723572555273e-02, -3.318915835573125e-02, -1.635476209320568e-02, -3.296452513148780e-02, -7.926300668888406e-02, -5.194648183586621e-03, -5.194648183586621e-03, -3.946287688264066e-03, -1.610457394404486e-08, -1.756079708266559e-08, -2.549362941948338e-02, -4.083422991717209e-03, -1.363312514666991e-08, -8.602449200609866e-02, -8.136701406147863e-02, -7.213338981778680e-02, -3.499887922055134e-02, -8.347887963066809e-02, -8.347887963066809e-02, -8.337240139668434e-02, -6.038823434759448e-02, -6.554455904341766e-02, -7.087192466200780e-02, -6.802843549802313e-02, -6.944209849581726e-02, -7.061621376173054e-02, -5.006348929577377e-02, -3.476578192303600e-02, -5.935291128433449e-02, -3.590644245076808e-02, -4.244765034483249e-02, -6.540488546969517e-02, -9.329229509835518e-05, -2.900350588897004e-04, -3.915731228617231e-02, -2.965891225314009e-02, -1.685990011334735e-03, -5.563105850377540e-07, -4.262795060879478e-11, -1.755573509983688e-09, -1.666787627741713e-03, -9.007575842107623e-09, -9.007575848627398e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.162336672664338e-09, 8.162257422712558e-09, 8.161845521011715e-09, 8.163144477527225e-09, 8.162295366782862e-09, 8.162295366782862e-09, 1.161824147373395e-05, 1.161814394152891e-05, 1.161355123566127e-05, 1.161161751276436e-05, 1.161799334343939e-05, 4.539290783179347e-07, 8.605282031097209e-03, 4.170466018249429e-04, 3.567902004110189e-04, 2.867328086516044e-04, 4.186969539070498e-04, 4.186969539070498e-04, 1.777930060507549e-01, 1.820365462134578e-01, 4.170780912619087e-03, 5.812687209011980e-02, 1.788448855104141e-01, 1.788448855104141e-01, 2.776090629881902e-02, 2.943719707603606e-02, 4.305393531109803e-02, 1.845285421890295e-03, 3.099745925052885e-02, 3.099745925038182e-02, 5.704947920658375e-07, 5.763448264123677e-07, 5.711402803719744e-07, 2.314253033950547e-06, 5.734149559762388e-07, 5.734149559762388e-07, 1.163245234073887e-04, 1.131030829737328e-04, 1.176592973766211e-04, 1.150992589790646e-04, 1.124713164004324e-04, 5.814161167457697e-06, 6.123884932278629e-03, 9.767207577811993e-03, 5.455447461980475e-03, 8.032050731728935e-03, 6.728100999714727e-03, 1.288149721810157e-02, 1.908490249508757e+01, 5.822962367762981e-02, 2.009554016434895e+01, 2.465595360364534e-05, 9.678148513543473e-02, 9.678148513543473e-02, 3.442283364651597e+06, 2.587089864224380e-03, 1.492647401508084e-02, 1.272688397450553e+02, 2.927796305813879e+06, 3.605234340391480e-03, 1.152591551920105e-01, 5.340763658382252e-02, 1.339414080474125e-02, 1.562138928126890e-03, 7.376041843866957e-02, 7.376041843866957e-02, 9.528885536081043e-02, 1.101267929713518e-02, 1.516931238018362e-02, 2.331128252897815e-02, 1.830615661392519e-02, 2.067627119743510e-02, 5.911335832945011e-03, 5.966635762621976e-01, 3.708297177563027e-02, 1.122617999707570e-01, 2.021432307980692e-02, 3.466759910104146e-02, 4.016498744686525e-02, 3.540366102996933e-02, 4.219059711847266e-02, 2.144039718680356e-02, 4.397406555476940e+01, 9.627533080292006e-02, 8.582792743577188e-03, 3.971566223266157e-04, 3.329310044440213e-03, 1.200377602512068e-01, 4.606316536472298e-03, 4.606316535930756e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_tm_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_tm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.766526589818135e-29, -1.691695402223932e-109, -1.691913335028477e-109, -1.690885027057310e-109, -1.691665644153881e-109, -1.691665644153881e-109, -6.908470308918222e-97, -6.912993617861452e-97, -7.046072573364358e-97, -6.984311494824049e-97, -6.909142639701778e-97, -1.348431451061411e-04, -3.213668665198850e-85, -5.516541150847223e-04, -3.920325970824516e-04, 0.000000000000000e+00, -5.564278369260257e-04, -5.564278369260257e-04, -5.036538610873051e-03, -5.559771002402652e-03, -3.936330630942333e-87, -3.245916526127412e-04, -5.179315875237158e-03, -5.179315875237158e-03, -6.696013421112196e-08, -8.112695521243170e-08, -6.922210859541894e-06, -5.374869362029975e-10, -8.290112300713620e-08, -8.290112300713617e-08, -1.024009954613893e-03, -1.036597213341919e-03, -1.025394575103804e-03, -1.603666411852823e-42, -1.030296541487614e-03, -1.030296541487614e-03, -5.963240376539271e-37, -9.772562710229838e-93, -9.779004315669075e-93, -9.768296969821589e-93, -9.834117543727367e-93, -2.897948027788851e-04, -1.266465049847024e-02, -3.210478214369034e-02, -8.466292901566431e-03, -1.728944640194877e-02, -1.690390636998252e-02, -1.363109279570919e-82, -3.849214256014377e-73, -1.159399903072379e-03, -5.674881275215448e-73, -1.828754873795480e-03, -3.239299249883006e-04, -3.239299249883006e-04, -8.172914252615318e-58, 0.000000000000000e+00, -2.509145659977552e-09, -9.355810227019408e-71, -5.354985563104453e-58, -1.064055334561069e-09, -3.883479738020614e-01, -1.728476301158811e-01, -3.064976767538037e-80, 0.000000000000000e+00, -2.438073862156246e-01, -2.438073862156246e-01, -2.890837140322272e-01, -1.453327708784200e-02, -2.667423991364447e-02, -5.198763697458781e-02, -3.629789987049217e-02, -2.809683811218382e-81, -2.105842553352536e-02, -1.708604742695559e-77, -4.025558187693650e-03, -1.554519884476248e-79, 0.000000000000000e+00, -6.847722916539603e-03, -3.610344923430286e-81, -4.526266915982056e-06, -1.330995438196589e-05, 0.000000000000000e+00, -9.368519936346016e-72, -9.877936264487641e-05, -3.260134328831783e-08, -3.595166384366161e-12, -1.944832363966902e-10, -1.073738608866511e-04, -8.505074297400030e-10, -8.505074261847705e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
