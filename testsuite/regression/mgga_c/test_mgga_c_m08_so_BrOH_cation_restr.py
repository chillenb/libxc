
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_so_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.139997934596254e-02, -6.138905975189305e-02, -6.134307110582086e-02, -6.150461606569074e-02, -6.141964340573647e-02, -6.141964340573647e-02, 5.380053806103379e-03, 5.352698666034288e-03, 4.648960313068592e-03, 5.178235406642681e-03, 5.018614155026576e-03, 5.018614155026576e-03, -1.520767951596387e-02, -1.469135422794438e-02, -2.812867904925484e-04, 1.797792096836478e-03, 5.392568282067664e-04, 5.392568282067664e-04, 1.637816830993511e-02, 1.671378139048436e-02, -6.115423380049076e-02, -3.212979726403821e-02, -1.011458172669073e-02, -1.011458172669151e-02, -2.189995366584606e-02, -2.284724088643629e-02, -7.353569063388037e-02, -1.370503501222281e-02, -1.669745028765550e-02, -1.669745028765550e-02, -5.731604624382475e-03, -5.229385880516069e-03, -5.686129661182388e-03, -5.243504619385316e-03, -5.481681445427948e-03, -5.481681445427948e-03, 3.817533011571110e-02, 3.597427460239458e-02, 4.103861360059105e-02, 3.916829511848825e-02, 3.551515231822842e-02, 3.551515231822842e-02, -4.496147919987178e-02, -9.382574261950531e-02, -2.256472452783325e-02, -5.410286570404205e-02, -5.083170045382793e-02, -5.083170045382793e-02, -6.462787093990024e-02, -5.467572072872712e-03, -6.834692999692776e-02, -8.342669159570659e-02, -4.063463736140410e-02, -4.063463736140326e-02, -1.090529895934985e-02, -1.343733060661643e-02, -1.058156986648696e-02, -7.731350671932961e-02, -1.248858743942988e-02, -1.248858743942983e-02, -1.904855471301633e-02, -7.051297427566597e-02, -5.112283095572553e-02, -3.121749488215042e-02, -4.121605098252365e-02, -4.121605098252365e-02, -3.311971269830666e-02, -2.021909473535296e-02, -4.870390506396351e-02, -6.884967987233688e-02, -5.707909592944452e-02, -5.707909592944450e-02, -7.603783959663531e-02, 1.999951299760542e-02, 2.152966552699949e-02, -9.128689055978963e-04, 9.089781936729767e-03, 9.089781936729803e-03, -6.210067958261979e-03, -7.220631052337918e-02, -8.003375945947157e-02, -1.389662267085173e-02, -6.407930365697047e-02, -6.407930365697077e-02, -2.911392994635541e-02, -4.056835433835311e-03, -8.023416846232399e-03, -6.515005677546944e-02, -1.165828513415114e-02, -1.165828513415092e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_so_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([4.721173393658257e-01, 4.721614676705416e-01, 4.723546456191655e-01, 4.717015536531854e-01, 4.720443082946751e-01, 4.720443082946751e-01, -2.160092886784817e-01, -2.161644758660212e-01, -2.202576238583712e-01, -2.185589413227435e-01, -2.187566043356248e-01, -2.187566043356248e-01, -1.086043166055955e-01, -1.099611834734947e-01, -1.149182849944068e-01, -1.157425594766140e-01, -1.164170975518317e-01, -1.164170975518317e-01, 1.306207413659728e-02, -2.373750589835679e-03, -1.033943401553938e-01, 3.228461629573592e-02, 5.894725207249757e-02, 5.894725207250220e-02, -2.783154637581358e-02, -2.897672169771809e-02, -7.144132268268413e-02, -1.767358925439444e-02, -2.141625870176561e-02, -2.141625870176562e-02, 7.541213700136440e-04, -1.016607982737147e-02, 1.695159889392769e-04, -9.466190963666170e-03, -4.708572716040727e-03, -4.708572716040727e-03, -1.070921150308444e-01, -1.157907696481879e-01, -1.022032970472206e-01, -1.074958178692892e-01, -1.154803201600447e-01, -1.154803201600447e-01, -1.603922342874537e-01, -3.046011699900508e-01, -1.689403600839680e-01, -1.066797803305041e-01, -1.418147678727077e-01, -1.418147678727077e-01, 9.149082348350517e-04, 7.802314109805721e-02, -6.023343917171548e-03, -1.796511896130447e-01, 2.202102483984301e-02, 2.202102483986119e-02, -1.412837831524555e-02, -1.733804822329620e-02, -1.368119397049908e-02, -4.206849854838915e-02, -1.611432325716712e-02, -1.611432325716805e-02, -4.605273959345826e-02, 5.925030843343902e-02, 1.216238497204330e-01, 1.141021157830145e-01, 1.278200107151155e-01, 1.278200107151155e-01, -5.699970751136976e-02, -1.925571817174621e-01, -1.334702960917475e-01, -1.822791416781087e-01, -1.243270952427995e-01, -1.243270952427995e-01, -2.383195482787514e-01, 4.524593610214456e-02, -6.185751940571192e-02, -5.865131047863328e-02, -6.644664460148114e-02, -6.644664460148030e-02, -1.413287632413581e-01, -7.167249846711084e-02, -6.497208049950140e-02, -1.311873188578481e-01, -7.779796877662021e-03, -7.779796877719153e-03, -3.664504362441902e-02, -5.318483912854189e-03, -1.043513344387698e-02, -1.146952693530817e-02, -1.505714279913612e-02, -1.505714279913878e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.437836279592052e-10, 3.438325932446090e-10, 3.440139881672363e-10, 3.432893298544426e-10, 3.436740197975555e-10, 3.436740197975555e-10, 1.640599710432355e-06, 1.640678814287921e-06, 1.641500149629560e-06, 1.629520420968053e-06, 1.636210178681892e-06, 1.636210178681892e-06, 6.640556046745343e-03, 6.628276442700020e-03, 5.946176522148779e-03, 5.578163986422435e-03, 5.741425439096136e-03, 5.741425439096136e-03, 6.859645371789861e-01, 7.231503078731191e-01, 4.263533481262133e-03, 5.521416310840337e-01, 6.438700003410092e-01, 6.438700003410047e-01, -1.740185182170210e-02, -2.043021201480173e-02, -4.632432839816970e-02, -6.267286134769916e-03, -1.301396036674534e-02, -1.301396037111657e-02, 1.263644182084330e-06, 1.281870773151797e-06, 1.264554452123469e-06, 1.280637430648093e-06, 1.272879700437136e-06, 1.272879700437136e-06, 1.101815388835368e-05, 1.051827115688756e-05, 1.088867259294713e-05, 1.040158785902899e-05, 1.081463365599233e-05, 1.081463365599233e-05, 4.297467956415046e-03, 1.675044136429333e-02, 1.068827678135910e-02, 7.920569914352906e-03, 3.067162560523244e-03, 3.067162560523244e-03, 2.660219819683275e-01, 2.511972279128554e-01, 2.436448991475951e-01, 2.668415199515155e-05, 6.132588257505501e-01, 6.132588257505542e-01, -6.144957827671690e-03, -7.710886362719631e-03, -7.680501151081050e-02, 7.967113392247055e-02, -3.346408951669474e-02, -3.346408953243486e-02, 1.175601672542422e-01, 2.005625242986823e-02, 1.060756834623651e-02, 2.294083596613007e-02, 1.279134698557873e-02, 1.279134698557873e-02, 7.827686544267778e-02, 9.491976844728772e-03, 4.048910174116990e-03, 2.714594439767059e-02, 7.451665566529854e-03, 7.451665566529848e-03, 5.679795322342873e-03, 1.869050190040124e-01, 1.601436794388484e-01, 6.432296701872910e-02, 1.087653515830559e-01, 1.087653515830561e-01, 1.690194867957199e-02, -4.135995034397701e-02, -1.890521774934728e-02, 7.993209986257913e-02, 4.012258342756918e-01, 4.012258342756782e-01, -2.139787986770753e-02, -8.412222501546076e-03, -1.054819125480746e-02, 3.365693348921693e-01, -4.166111772503038e-02, -4.166111768264674e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.914220553692441e-04, -3.914607213443148e-04, -3.916228778233887e-04, -3.910508101956034e-04, -3.913519488236506e-04, -3.913519488236506e-04, 9.343727329683024e-04, 9.356663143354462e-04, 9.701232295477865e-04, 9.578332162928393e-04, 9.585464141809268e-04, 9.585464141809268e-04, -8.126104722323320e-03, -7.994999513766581e-03, -6.420533355262337e-03, -5.862388366207107e-03, -6.052092333677093e-03, -6.052092333677093e-03, -7.573481056648505e-02, -6.776773278342366e-02, -7.409870850251350e-03, -6.798854491568172e-02, -9.499731918141688e-02, -9.499731918143126e-02, -1.959571363896184e-04, -2.360048014861873e-04, -1.102361477318107e-02, -3.000718481827839e-05, -8.036293061667450e-05, -8.036293061667450e-05, -4.345724175743463e-03, -4.243194251228997e-03, -4.340346884137466e-03, -4.249877800179800e-03, -4.294881476187041e-03, -4.294881476187041e-03, 1.109368063895522e-03, 1.324186043398057e-03, 1.026479232509106e-03, 1.174874693211300e-03, 1.291616193079795e-03, 1.291616193079795e-03, 3.470445696731155e-02, 1.070138185442684e-01, 3.054460508777273e-02, 1.392744875564293e-02, 2.992466855011992e-02, 2.992466855011992e-02, -4.664560303109188e-02, -7.675891937844674e-02, -4.489575192098407e-02, 3.398745513325191e-03, -6.643796621397614e-02, -6.643796621395692e-02, -9.838159698861822e-06, -2.485501514552928e-05, -9.253613978058550e-05, -3.232849293700436e-02, -6.082548840958495e-05, -6.082548840757968e-05, -2.133584285093257e-01, -3.705557540942168e-01, -5.000354800714997e-01, -5.411255886745130e-01, -5.361670219486504e-01, -5.361670219486504e-01, -3.357078254683777e-03, 5.831655982857336e-02, 4.023245076231035e-02, 2.185182510993045e-02, 2.527259700876913e-02, 2.527259700876919e-02, 6.858445067486321e-02, -5.738543197056694e-02, -1.612299797543687e-02, -9.040159805162925e-03, -1.382793609329961e-02, -1.382793609330003e-02, 3.297250999358891e-02, -1.008211168396501e-02, -1.802457020193541e-02, 5.403872842835433e-02, -5.344385809354617e-02, -5.344385809353822e-02, -2.479467093578472e-04, -6.564910999958872e-07, -1.640223665414071e-05, -5.293633783769384e-02, -6.928910563516051e-05, -6.928910562922758e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
