
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_m08_so_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.640505619153355e-01, -2.640634660417544e-01, -2.641157437124571e-01, -2.639247362331099e-01, -2.640255163168155e-01, -2.640255163168155e-01, -1.001083327074653e-01, -1.001113064709927e-01, -1.002011837279707e-01, -1.001646607106485e-01, -1.001657351546094e-01, 3.429701400391048e-02, -1.619754164361041e-01, 4.922971440062941e-02, 5.459802617395103e-02, 5.245633230390699e-02, 5.303244171904596e-02, 5.303244171904596e-02, 1.866183532837925e-02, 1.966276060770049e-02, -2.404163668240862e-01, -2.914144681660333e-02, -6.558889285579502e-03, -6.558889285580296e-03, -2.189995403226327e-02, -2.284724177504950e-02, -7.353862028062284e-02, -1.370503534248185e-02, -1.669745104900546e-02, -1.669745104900546e-02, -4.974328779511405e-03, -4.470146205334372e-03, -4.944033811471320e-03, -2.909392526090750e-01, -4.715468853771666e-03, -4.715468853771666e-03, -9.542743847245269e-02, -9.142208805061128e-02, -9.946661490678659e-02, -9.491176400093870e-02, -9.161005241057726e-02, 4.006441223247803e-02, -3.894547090748513e-02, -6.272308154457946e-02, -5.556954510944711e-03, -3.974778241485805e-02, -4.656381467034479e-02, -6.301869094719909e-02, -1.768471484114112e-01, -3.966123913597490e-03, -1.650750849941978e-01, -6.801266327338078e-02, -3.962930550491786e-02, -3.962930550491699e-02, -3.074187235772555e-03, -1.343733129373326e-02, -1.058157056800577e-02, -1.030887359942484e-01, -3.564178746394306e-03, -1.248858867843726e-02, 3.854188049579426e-03, -6.676491706332291e-02, -5.765501280830291e-02, -2.681140090399971e-02, -3.877301949470441e-02, -3.877301949470441e-02, -7.737804636336540e-03, -1.913541003403173e-02, -4.802188368106106e-02, -6.261211054458118e-02, -5.552563023995130e-02, -7.377414342629623e-02, -6.000443854903923e-02, -1.419763735860995e-01, 2.682065637958943e-02, -5.371859925381837e-02, 1.680527624222950e-02, 1.680527624222954e-02, -5.273711006114265e-02, -7.220756330321548e-02, -8.003703338977414e-02, -4.219069063108818e-03, -1.493436333498639e-01, -6.385992951502681e-02, -2.911396544770726e-02, -4.056835447482691e-03, -8.023416877638835e-03, -6.504986020690490e-02, -1.165828598006145e-02, -1.165828598006122e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_m08_so_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.668036669526349e-01, -9.668338239859985e-01, -9.669560240974303e-01, -9.665092265988385e-01, -9.667452070382417e-01, -9.667452070382417e-01, -1.271688849467499e-01, -1.273686105456964e-01, -1.325206877135858e-01, -1.304678824338069e-01, -1.306864148111875e-01, -2.004845449316411e-01, 1.281970443681610e-01, -7.411157332338864e-02, -2.559770102578073e-02, -5.154463722217828e-02, -4.608783200805018e-02, -4.608783200805018e-02, 2.092789161770291e-02, 7.121396980132859e-03, -1.020906255269828e-01, 4.585906185017907e-02, 7.335986877712297e-02, 7.335986877712770e-02, -2.783154875032073e-02, -2.897672744798789e-02, -7.145407944851181e-02, -1.767359141495421e-02, -2.141626366530447e-02, -2.141626366530447e-02, 2.651742570720520e-03, -8.337785291312837e-03, 2.024950932388203e-03, -4.656507130746122e-01, -2.826085830619260e-03, -2.826085830619260e-03, 8.936286817304115e-02, 4.390489981933376e-02, 1.247403730226891e-01, 8.414637981408096e-02, 4.647532426059766e-02, -1.128841760137543e-01, -1.881653420530598e-01, -1.335806112568492e-01, -1.768728443391005e-01, -1.811453617250306e-01, -1.614960387106395e-01, -7.357656002714619e-02, -2.498499581648956e-01, 8.430428510859468e-02, -2.549698083797183e-01, -2.160729712048096e-01, 2.730250910372227e-02, 2.730250910374038e-02, -4.019870011112282e-03, -1.733805272001920e-02, -1.368119856335074e-02, -1.986966363113157e-01, -4.714263628029599e-03, -1.611433136205647e-02, 8.420600464586971e-02, 3.111344920065329e-02, 1.378860316412743e-01, 1.553814170866294e-01, 1.429024935246799e-01, 1.429024935246799e-01, 1.286575487567045e-01, -1.941537037302846e-01, -1.350454378030659e-01, -1.497139192908140e-01, -1.110878180152580e-01, -2.533712702755826e-01, -1.066444089804865e-01, -6.803206454726975e-02, -5.143279580008463e-02, 5.904865193350145e-02, -6.925452900286079e-02, -6.925452900285986e-02, -8.440974972241695e-02, -7.167831341028782e-02, -6.496507290494004e-02, -1.335521058819488e-01, -2.366110926798853e-01, -6.159602707654027e-03, -3.664527232461937e-02, -5.318484002964094e-03, -1.043513365030168e-02, -1.070065691514784e-02, -1.505714833504317e-02, -1.505714833504582e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.455448297100805e-08, 1.455612937383327e-08, 1.456267172948261e-08, 1.453831747038878e-08, 1.455118471023262e-08, 1.455118471023262e-08, 1.765486894432399e-05, 1.765193440426402e-05, 1.757373959312658e-05, 1.759887284804594e-05, 1.760348839546355e-05, 5.984536613891463e-07, 3.107725241930608e-02, 1.521247874749477e-03, 1.462003544206643e-03, 1.534345495616055e-03, 1.518539938553576e-03, 1.518539938553576e-03, 6.031331257685547e-01, 6.204353738235118e-01, 1.993365026633235e-02, 3.136551898789194e-01, 4.323779539771453e-01, 4.323779539771441e-01, -1.697076578083895e-02, -1.951175418957257e-02, -3.317932145213433e-02, -4.440168059090272e-03, -1.056983761837685e-02, -1.056983761837685e-02, 1.256051090334794e-06, 1.274217217032839e-06, 1.257111611544933e-06, 1.037754063903079e-05, 1.265176273799831e-06, 1.265176273799831e-06, 2.088633951807730e-04, 1.941755539188460e-04, 2.217304957142575e-04, 2.068259857035299e-04, 1.951622715374956e-04, 8.884350220539130e-06, 2.959768308708437e-03, 1.015726903554270e-02, 5.728726742101702e-03, 3.433734592761552e-03, 2.148698805847865e-03, 6.984971399462281e-03, 1.031502812140645e+02, 2.113930051088492e-01, 1.265920571451147e+02, 7.351514728349719e-06, 4.433542872573196e-01, 4.433542872573209e-01, -1.363218213625688e+08, -3.555981594940367e-03, -5.173134354076042e-02, 2.078728654224726e+02, -7.299187423463970e+07, -1.687948815313856e-02, 1.084545006062816e-01, 1.872430399834932e-02, 1.333466686743013e-02, 2.126334497767619e-02, 1.187654223491196e-02, 1.187654223491196e-02, 6.680159217192129e-02, 9.023957427004790e-03, 3.773567137657887e-03, 2.465840489743073e-02, 6.832595867377663e-03, 1.646358441785374e-02, 3.059843575752923e-03, 3.239194255298401e+00, 1.305358869464580e-01, 2.148578642720022e-01, 8.241292124544074e-02, 8.241292124544089e-02, 5.948806401197663e-02, -3.509084779503711e-02, -1.258603945299672e-02, 5.438319132827455e-02, 2.270844763022995e+02, 2.674720377577179e-01, -9.511366060178361e-03, -4.837614330741948e-04, -8.744898141740008e-03, 2.615171860389320e-01, -2.518820149279663e-02, -2.518820151168322e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_m08_so_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.025109625623999e-04, 4.025308492645184e-04, 4.026097659378589e-04, 4.023153763496666e-04, 4.024710642376584e-04, 4.024710642376584e-04, 1.388745781370861e-04, 1.403880720789837e-04, 1.796098918427099e-04, 1.638903171994861e-04, 1.656159857670930e-04, 1.179261133507714e-03, -2.955444627203858e-02, 1.125985258349864e-03, -2.403834224503046e-03, -6.043269833719044e-04, -9.953082978525981e-04, -9.953082978525981e-04, -7.572934403053545e-02, -6.750184618880116e-02, -6.747637007931212e-03, -6.730099831637618e-02, -9.425086825303404e-02, -9.425086825304885e-02, -1.959571498791426e-04, -2.360048393442813e-04, -1.102697671311217e-02, -3.000718775459821e-05, -8.036294556349289e-05, -8.036294556349289e-05, -4.363657172096356e-03, -4.260280775947423e-03, -4.357870652536061e-03, 2.200092081686939e-03, -4.312576704079440e-03, -4.312576704079440e-03, -3.737871463701016e-03, -2.852995421121750e-03, -4.407006615801358e-03, -3.635626583477443e-03, -2.905077872649039e-03, 1.441797678539880e-03, 4.814702377183476e-02, -1.836826026500679e-02, 3.829878246794308e-02, 4.997493958761777e-02, 3.995022618544457e-02, 1.296588561360075e-03, 2.153497801583830e-02, -7.655887590203697e-02, 3.219094638525765e-02, 5.532386859887590e-03, -6.641807222113780e-02, -6.641807222111823e-02, 1.877498034379690e-05, -2.485502030382369e-05, -9.253616475651615e-05, 4.602733755549520e-02, 1.159944330481902e-04, -6.082551295611885e-05, -8.595646855277168e-01, -3.157840732071072e-01, -5.237713157218123e-01, -6.822572189231968e-01, -5.845311313763883e-01, -5.845311313763883e-01, -8.352963534542263e-01, 5.964927770640870e-02, 4.149969017415872e-02, -1.152679171055779e-02, 1.494750576287927e-02, 1.362360318147824e-01, -1.194904708771468e-03, -5.129795614831122e-02, -1.348114526709056e-02, -7.193365178062390e-02, -2.754414848876212e-03, -2.754414848876703e-03, 1.147349983480733e-02, -1.008335765566885e-02, -1.803978447830824e-02, 6.283181448164935e-02, 4.175017030684385e-02, -5.368878007174102e-02, -2.479479620861837e-04, -6.564911089207902e-07, -1.640223691422034e-05, -5.307011169053156e-02, -6.928912609025116e-05, -6.928912608431823e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
