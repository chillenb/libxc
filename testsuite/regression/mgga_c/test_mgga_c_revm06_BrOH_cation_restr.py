
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.267573191715159e-01, -1.267572409545661e-01, -1.267569708863872e-01, -1.267581238156266e-01, -1.267575085911742e-01, -1.267575085911742e-01, -9.918093881103439e-02, -9.917291582188648e-02, -9.896309236315452e-02, -9.904992458993682e-02, -9.903793650465252e-02, -6.073462743293459e-02, -8.761553458560398e-02, -2.566903131228012e-02, -2.157270061478152e-02, -2.351558551241407e-02, -2.308629287206711e-02, -2.308629287206711e-02, -6.597129344553287e-03, -7.875116397582350e-03, -1.446904204574339e-01, 2.225003464674225e-02, 8.538391221898079e-03, 8.538391221898090e-03, 1.026246333086610e-02, 1.073624709205046e-02, 3.943674992996011e-02, 6.248903148216749e-03, 7.697884167235694e-03, 7.697884167235694e-03, -8.620129697831672e-02, -8.628503365948414e-02, -8.620608590051852e-02, -9.376670487766689e-02, -8.624325130974125e-02, -8.624325130974125e-02, -9.137319285293551e-02, -9.004130224769247e-02, -9.250709885771580e-02, -9.122225201565975e-02, -9.010734511087143e-02, -4.961159382440045e-02, -3.928443467314748e-02, -4.497036417340915e-02, -3.546102644735834e-02, -3.883594699673268e-02, -4.028542122340741e-02, -5.125325840179934e-02, -1.531420954075519e-01, 7.986479437159287e-03, -1.484697395347042e-01, -5.939847110463307e-02, 2.901666511652451e-02, 2.901666511652451e-02, -1.992512630385247e-03, 6.120182171801629e-03, 4.765404785831946e-03, -1.074486117688557e-01, -2.353634154664216e-03, 5.669160313193164e-03, -5.017248562343148e-02, -4.817377115739251e-02, -4.935741289301869e-02, -4.943024521783122e-02, -4.913676430278195e-02, -4.913676430278195e-02, -4.939673439947813e-02, -3.526782014749793e-02, -3.863114736085060e-02, -4.247456226671025e-02, -4.043070495995417e-02, -4.794251879008606e-02, -4.443313845032044e-02, -8.376564824730889e-02, -1.541368503283911e-02, -5.033366663871587e-02, -2.236391749344253e-02, -2.236391749344254e-02, -5.094439722960376e-02, 3.849445041341682e-02, 4.477691014150668e-02, -2.888952282055456e-02, -1.357701978841960e-01, 4.221043579179538e-02, 1.388534972590358e-02, 1.754663012705878e-03, 3.565212824188313e-03, 4.234608072829760e-02, 5.274412573709647e-03, 5.274412573709657e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.268145632887292e-01, -1.268150899230736e-01, -1.268172620928314e-01, -1.268094606199431e-01, -1.268135724691964e-01, -1.268135724691964e-01, -5.630251666164078e-02, -5.631850642522385e-02, -5.673850661216472e-02, -5.657029025862483e-02, -5.658706831321998e-02, -5.378191157439771e-02, 5.994155416235332e-03, -5.353263905450625e-02, -6.205041296108638e-02, -5.789605025981308e-02, -5.882909936291592e-02, -5.882909936291592e-02, -4.759084613255070e-02, -4.585075373322336e-02, 4.928718205100788e-02, -4.810691218365742e-02, -5.663172522300351e-02, -5.663172522300346e-02, 1.833317887918799e-02, 1.912945960247368e-02, 5.636216037883010e-02, 1.141997336423411e-02, 1.394405194904723e-02, 1.394405194904723e-02, -1.007972075071106e-01, -1.009580474519086e-01, -1.008064637830573e-01, -9.955474579980508e-02, -1.008779393275429e-01, -1.008779393275429e-01, -3.683893075178453e-02, -3.965077531665476e-02, -3.453740068620451e-02, -3.717110656701521e-02, -3.949171560634856e-02, -4.735842362129267e-02, -3.925435994333185e-02, -5.255354608060685e-02, -3.302015063428975e-02, -3.902088458859100e-02, -4.149027452551526e-02, -4.921482931418655e-02, -1.465037894799455e-01, -6.117469200474398e-02, -1.631639474335342e-01, -6.054534917575040e-02, -3.205206233975025e-02, -3.205206233975023e-02, -2.644600672554277e-03, 1.119454301939210e-02, 8.780349023901441e-03, -1.803074901375130e-01, -3.225529669379337e-03, 1.038926074730514e-02, -5.927683950065880e-02, -5.895555733464540e-02, -5.579432060315924e-02, -5.943103737862914e-02, -5.939931778363971e-02, -5.939931778363971e-02, -5.883682963045352e-02, -3.357770725079590e-02, -4.073803988688316e-02, -5.009073040640045e-02, -4.520789742828935e-02, -5.016989269859095e-02, -4.994147327735497e-02, 2.526971952845536e-02, -4.311523628960038e-02, -2.208182670676951e-02, -3.177502131231304e-02, -3.177502131231302e-02, -3.381833934470387e-02, 5.585134933982999e-02, 5.658782112982240e-02, -2.739553100506596e-02, -1.554368954227730e-01, 1.624521815675127e-02, 2.443010493189031e-02, 3.326126578246330e-03, 6.635958365217962e-03, 2.068441233677978e-02, 9.688474895158112e-03, 9.688474895158138e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.992542106815460e-11, -7.992535076569570e-11, -7.992430314524036e-11, -7.992543303464891e-11, -7.992494336015201e-11, -7.992494336015201e-11, -2.666406983281806e-07, -2.667289789468538e-07, -2.690190995569147e-07, -2.679812573074178e-07, -2.682255296453304e-07, -7.259808697576471e-07, 5.730664559894076e-04, -4.761777305559622e-04, -3.125192388249402e-04, -3.979475825866269e-04, -3.782045120569277e-04, -3.782045120569277e-04, 1.804000267001245e-02, -4.182413180071037e-03, 1.281950911281381e-03, 3.610858228700584e-01, 2.563909133860600e-01, 2.563909133860600e-01, -1.986807042970001e+03, -1.809880352753706e+03, -1.982274988072048e+01, -5.662924011328813e+03, -4.064140275957096e+03, -4.064140275957096e+03, -9.326404884721487e-08, -9.242959771537538e-08, -9.321678805536952e-08, -8.288437528604292e-08, -9.284632958734588e-08, -9.284632958734588e-08, -2.764205538142234e-06, -2.968030574813007e-06, -2.569334407102712e-06, -2.785955651211960e-06, -2.961251767764598e-06, -9.033305985034695e-06, -3.848961256711530e-03, -2.325894987243064e-03, -4.776572385770805e-03, -4.619329293659721e-03, -3.622579922741152e-03, -1.597893814567381e-03, 5.285843316156849e+01, 1.229707126033981e-01, 6.739763914529469e+01, -1.544352151701645e-05, 6.128627816539055e-01, 6.128627816539061e-01, -5.914122886245512e+07, -5.592780630824824e+03, -2.827244144624522e+04, 1.462774600256725e+02, -3.122507296681663e+07, -1.174604659624890e+04, -8.697050509030793e-04, -1.078193195863535e-03, -4.085229503384991e-03, -6.294049504269407e-04, -6.752899583733804e-04, -6.752899583733804e-04, -7.854540733108514e-04, -8.083349175343197e-03, -7.099173974272262e-03, -4.972254936753204e-03, -6.224273735585187e-03, -3.124292380002852e-03, -2.041938634519950e-03, 4.133801756561919e-01, -2.141303958498644e-02, -8.834051956317091e-03, -3.259602998287509e-02, -3.259602998287516e-02, -4.134025927858505e-03, -2.267257548414301e+01, -8.167293309651633e+00, -4.203061993599857e-02, 1.289594451073019e+02, -3.009342774332270e-01, -6.390463460346508e+02, -1.019268717716510e+05, -3.614282818570098e+04, -6.986184600333776e-01, -1.656909023122706e+04, -1.656909023122718e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.509798526270173e-06, -4.509552600282173e-06, -4.508542360141663e-06, -4.512184756224757e-06, -4.510264548312692e-06, -4.510264548312692e-06, -3.865841276529036e-04, -3.864976951236009e-04, -3.842074886526674e-04, -3.850726622353496e-04, -3.850491388237401e-04, 6.841377215253018e-04, -9.951280783757555e-03, 5.996881690865836e-03, 5.477496245563370e-03, 5.749972230043766e-03, 5.685064835392582e-03, 5.685064835392582e-03, 3.410706003079823e-02, 3.492440437325645e-02, -8.560719599617328e-03, 2.537930367248103e-02, 2.855089774333873e-02, 2.855089774333875e-02, 6.967916000964203e-03, 7.409740282775857e-03, 1.726811314812557e-02, 3.802855174244037e-03, 5.426011074049160e-03, 5.426011074049160e-03, 4.475558374929525e-04, 4.466509126741305e-04, 4.475051871660274e-04, -2.274399544051137e-05, 4.471033715935872e-04, 4.471033715935872e-04, -1.221451200734738e-03, -1.169930034814989e-03, -1.261929233420581e-03, -1.214888855631771e-03, -1.173367528635054e-03, 1.616345484278870e-03, 1.765724147626519e-02, 1.683959892817086e-02, 1.698846077220282e-02, 1.890584900222499e-02, 1.777695955496558e-02, -3.884161828649792e-03, -1.946151801422851e-02, 2.300104300650481e-02, -7.730350738789542e-03, 2.558711499641932e-03, 2.839736757766763e-02, 2.839736757766761e-02, 3.265532203831169e-05, 3.508040663649418e-03, 7.938402465170930e-03, 3.128715814235525e-02, 2.012019394721570e-04, 5.764514278620093e-03, 1.718133152982478e-02, 1.600935869387318e-02, 1.084807003362618e-03, 1.571554079193155e-02, 1.559481051064664e-02, 1.559481051064664e-02, 1.706907160165829e-02, 2.144996695593756e-02, 2.288878357011961e-02, 2.210657182985028e-02, 2.290419724993449e-02, -3.046221690629332e-03, 1.560196000289699e-02, -6.526544088618093e-02, 2.366135706683664e-02, -2.110885728748153e-02, 2.657104661473917e-02, 2.657104661473920e-02, -1.103577940597467e-02, 1.695724396533313e-02, 1.890145705712821e-02, 3.537896094530772e-02, -5.383203790319828e-03, 2.807466091727225e-02, 6.322008281175835e-03, 1.218831654704704e-03, 4.001026748956435e-03, 2.863133764664761e-02, 6.442522359096061e-03, 6.442522359096076e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
