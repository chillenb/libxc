
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_c_revm06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.086546971586661e-01, -1.086553219504848e-01, -1.086584136689151e-01, -1.086491790642214e-01, -1.086539719883700e-01, -1.086539719883700e-01, -6.081830918902895e-02, -6.082107782109006e-02, -6.087896923981434e-02, -6.070607699181087e-02, -6.078614489099841e-02, -6.078614489099841e-02, -3.792286874038066e-02, -3.774297910200272e-02, -3.300389126524250e-02, -3.178079132325129e-02, -3.233970713842592e-02, -3.233970713842592e-02, -6.749616113000262e-03, -7.983529074658722e-03, -7.564622811537386e-02, 1.794799891992298e-02, 5.965310280967691e-03, 5.965310280967716e-03, 1.030482145683376e-02, 1.081678053129640e-02, 4.085011497087798e-02, 6.602712065868259e-03, 7.961434142936543e-03, 7.961434142936548e-03, -8.614638614027173e-02, -8.623125283443706e-02, -8.615232261287704e-02, -8.622713492352028e-02, -8.618835491871268e-02, -8.618835491871268e-02, -4.540031699774568e-02, -4.650772051817641e-02, -4.520648091674000e-02, -4.626111341046191e-02, -4.610335143363725e-02, -4.610335143363725e-02, -3.724890183868087e-02, -4.820822087307451e-02, -3.417896208556304e-02, -4.553545757518888e-02, -3.863483272908570e-02, -3.863483272908570e-02, 4.269029896858521e-02, 7.015856687807217e-03, 4.460671418589681e-02, -7.046387711829043e-02, 2.731764166170887e-02, 2.731764166170886e-02, 5.840766952237321e-03, 6.847369383866686e-03, 5.079165337247647e-03, 4.720646290366187e-02, 6.276862667096813e-03, 6.276862667096810e-03, -5.013800132720547e-02, -4.821565830609700e-02, -4.894764158231192e-02, -4.953174147615683e-02, -4.924434228894618e-02, -4.924434228894619e-02, -4.942530750810994e-02, -3.438947777503715e-02, -3.758874453063859e-02, -4.177002703653589e-02, -3.942671265048828e-02, -3.942671265048828e-02, -4.869448497012345e-02, -5.815264202983932e-03, -1.490364810154353e-02, -2.392142917577414e-02, -2.045288660079327e-02, -2.045288660079327e-02, -2.935508609186207e-02, 3.922544309998425e-02, 4.632936543058581e-02, -2.615446350012066e-02, 4.188809141923800e-02, 4.188809141923804e-02, 1.545292613347859e-02, 2.372628319035746e-03, 3.683330954663785e-03, 4.239461151161304e-02, 5.705219713453271e-03, 5.705219713453284e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_c_revm06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.300824797512941e-01, -1.300833904669353e-01, -1.300821718028415e-01, -1.300685117464550e-01, -1.300764224302858e-01, -1.300764224302858e-01, -1.163398559266646e-01, -1.163424432673861e-01, -1.163909657393910e-01, -1.161822926591437e-01, -1.162827823818551e-01, -1.162827823818551e-01, -6.930351026759510e-02, -6.924666445680334e-02, -6.891367392989706e-02, -6.706142733360988e-02, -6.762207245365931e-02, -6.762207245365931e-02, -4.769549674809347e-02, -4.585663355425160e-02, -8.159584584228756e-02, -6.366860131514834e-02, -6.235531478488987e-02, -6.235531478488990e-02, 1.834279038562560e-02, 1.914715476816318e-02, 5.456847537452623e-02, 1.151464534347362e-02, 1.401060373375730e-02, 1.401060373375732e-02, -1.013331364077341e-01, -1.014865720556631e-01, -1.013312438587651e-01, -1.014670971221384e-01, -1.014156564646099e-01, -1.014156564646099e-01, -5.707681964198075e-02, -5.585354383747258e-02, -5.576567598314892e-02, -5.448467338682422e-02, -5.716033492646465e-02, -5.716033492646465e-02, -6.476714831570661e-02, -6.568760632251316e-02, -6.557244710544612e-02, -6.383011603708258e-02, -6.616125641967377e-02, -6.616125641967377e-02, -1.061717124937785e-02, -6.378148365008905e-02, -1.575139964514230e-03, -8.701084217973233e-02, -4.242696320597671e-02, -4.242696320597669e-02, 9.316203936418766e-03, 1.138893505782642e-02, 8.864159061996309e-03, 3.553682339703662e-02, 1.054916573567766e-02, 1.054916573567765e-02, -5.834944015415988e-02, -6.115110697945334e-02, -6.060430250892926e-02, -5.979559398880233e-02, -6.024248928745152e-02, -6.024248928745153e-02, -5.615460114659548e-02, -3.696590264355387e-02, -4.682990952070009e-02, -5.801325797299135e-02, -5.290965973897253e-02, -5.290965973897253e-02, -6.728258295214452e-02, -5.616196038941179e-02, -4.312502686796076e-02, -4.256123326077968e-02, -3.532773064352386e-02, -3.532773064352382e-02, -4.397537305989436e-02, 5.510516742081183e-02, 5.233040475360550e-02, -4.672761268736766e-02, 4.730452149529532e-03, 4.730452149529843e-03, 2.471333456227350e-02, 3.512089033304477e-03, 6.669699673154422e-03, 1.408524257533127e-02, 9.802930084812688e-03, 9.802930084812709e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.960129573281206e-11, -9.959829926374480e-11, -9.960811935339962e-11, -9.965337763583961e-11, -9.962635491918110e-11, -9.962635491918110e-11, 1.029063089142168e-06, 1.029049690755754e-06, 1.027202033500397e-06, 1.014013471310268e-06, 1.021595691586789e-06, 1.021595691586789e-06, 2.692000795980960e-03, 2.677413608582869e-03, 2.302419695477346e-03, 2.007154303594871e-03, 2.117163116958688e-03, 2.117163116958688e-03, 6.889011076388012e-02, 5.490760345828870e-02, 2.556730448471839e-03, 8.825116651452990e-01, 5.231315882883784e-01, 5.231315882883786e-01, -1.986415793467149e+03, -1.809132059131886e+03, -1.795309487217317e+01, -5.658164009177633e+03, -4.060441153105786e+03, -4.060441153105778e+03, -8.944109735160091e-08, -8.863072674386150e-08, -8.947214303802454e-08, -8.875416507906326e-08, -8.899581405413971e-08, -8.899581405413971e-08, -5.876662872678371e-06, -6.385198108827382e-06, -6.260197759419195e-06, -6.749503472821310e-06, -5.960039639555146e-06, -5.960039639555146e-06, 1.815685845563048e-03, 4.027589316928742e-03, 4.893741004015918e-03, 9.172655609238571e-03, 1.945724999394866e-03, 1.945724999394866e-03, 1.054193424319130e+00, 1.762887679416711e-01, 1.091765055922495e+00, 2.769912677550415e-05, 1.178244934318293e+00, 1.178244934318292e+00, -8.222339821818048e+03, -5.581510374916988e+03, -2.823160124318627e+04, -1.118582628140199e+00, -1.171602819454065e+04, -1.171602819454063e+04, -8.351175630809075e-05, 1.375442954351489e-03, 1.541611993771158e-03, 1.303864365600837e-03, 1.484914587373030e-03, 1.484914587373030e-03, -1.781566221925463e-03, -6.904517160299025e-03, -4.816713866161246e-03, -8.568767155971410e-04, -2.957363526416834e-03, -2.957363526416834e-03, 3.547363105340516e-03, 2.791207466547259e-02, -5.869385711291514e-03, 3.695502296210055e-03, -1.300636446754092e-02, -1.300636446754097e-02, -3.097178916371998e-03, -2.177652699597527e+01, -6.368479881902577e+00, 1.018965586910407e-02, 1.373594682708943e+00, 1.373594682708926e+00, -6.311840744681691e+02, -1.017867351355356e+05, -3.613488332644657e+04, 4.578975453840589e-01, -1.653966302735292e+04, -1.653966302735305e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_c_revm06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_c_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.175990888336967e-05, 3.175980642809618e-05, 3.176217344621284e-05, 3.176380295679100e-05, 3.176254547549982e-05, 3.176254547549982e-05, -1.047280277885855e-04, -1.046582778853971e-04, -1.024883324196504e-04, -1.002236218538175e-04, -1.017999756802693e-04, -1.017999756802693e-04, -4.640178088246741e-03, -4.617296052971957e-03, -3.870422614106801e-03, -3.395197704037124e-03, -3.589696898026645e-03, -3.589696898026645e-03, 2.792692454996590e-02, 2.725875291401113e-02, -5.703637591534634e-03, 1.226832332258537e-02, 1.572333337641436e-02, 1.572333337641437e-02, 6.909581671424397e-03, 7.296300392486204e-03, 1.519049346418519e-02, 3.389450151780041e-03, 5.061434655496782e-03, 5.061434655496776e-03, 4.403622849338824e-04, 4.395042330102435e-04, 4.404586048442726e-04, 4.396958417088357e-04, 4.398590065179886e-04, 4.398590065179886e-04, 1.119846632369807e-03, 1.203380573569918e-03, 1.163934209097899e-03, 1.243248175876611e-03, 1.143947222889459e-03, 1.143947222889459e-03, 4.171441236178690e-03, -2.757378010356515e-04, -2.481523832555995e-04, -3.742734910241015e-03, 4.190210150763665e-03, 4.190210150763665e-03, 1.652223003285564e-02, 1.846497628209690e-02, 1.660530892171655e-02, -4.615229280979352e-04, 2.103442463819194e-02, 2.103442463819195e-02, 1.639805339455570e-03, 2.709001479470961e-03, 6.956156856002073e-03, 1.800271775550343e-02, 4.585906334776148e-03, 4.585906334776148e-03, 9.145794115617849e-03, 9.561428487169467e-03, 8.872167786782362e-03, 8.666072663510195e-03, 8.711422356871864e-03, 8.711422356871853e-03, 4.645552609675209e-03, 1.897988190497265e-02, 1.829213713666975e-02, 1.404758304834737e-02, 1.646484676271579e-02, 1.646484676271578e-02, -1.049424550256770e-03, 1.937054820950153e-02, 1.647996680923992e-02, 6.555867522511815e-03, 1.455915203610676e-02, 1.455915203610679e-02, 1.067671116012011e-02, 1.593843996747132e-02, 1.594122164467124e-02, 8.506157872610741e-03, 2.182168143731397e-02, 2.182168143731400e-02, 4.811505962253038e-03, 4.703194729917394e-04, 3.758432871249067e-03, 2.475646128969630e-02, 5.445354130076594e-03, 5.445354130076604e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
