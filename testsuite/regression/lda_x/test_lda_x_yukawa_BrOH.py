
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_yukawa_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_yukawa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.967350966230120e+01, -1.967355777251433e+01, -1.967380783410079e+01, -1.967301930357390e+01, -1.967353473782534e+01, -1.967353473782534e+01, -3.085034683435618e+00, -3.085041442763466e+00, -3.085359813962746e+00, -3.085493908784545e+00, -3.085051879884800e+00, -3.085051879884800e+00, -4.963979101482682e-01, -4.957830341841339e-01, -4.798586037416165e-01, -4.844385322846880e-01, -4.961736447108827e-01, -4.961736447108827e-01, -8.253811357709649e-02, -8.433291232335127e-02, -6.158263321114688e-01, -4.754325883118797e-02, -8.307568454939565e-02, -8.307568454939565e-02, -7.167068130702654e-05, -8.220498705024147e-05, -4.220963760450619e-03, -8.038314767787527e-06, -7.969805869130283e-05, -7.969805869130283e-05, -4.685489355155246e+00, -4.686347500417614e+00, -4.685579896488475e+00, -4.686247112909737e+00, -4.685925521550242e+00, -4.685925521550242e+00, -1.676682308654271e+00, -1.689396666326349e+00, -1.671542775207158e+00, -1.681465614346044e+00, -1.691943343368081e+00, -1.691943343368081e+00, -4.191842560269127e-01, -4.639218722942109e-01, -3.927921698457444e-01, -4.138720143573636e-01, -4.390861156003811e-01, -4.390861156003811e-01, -2.645056156302211e-02, -8.350290280741064e-02, -2.577488499761739e-02, -1.642088611946990e+00, -3.513123395539066e-02, -3.513123395539066e-02, -7.218849087556474e-06, -1.076046624940305e-05, -4.542115148812208e-06, -9.477752650281696e-03, -8.147695736526091e-06, -8.147695736526091e-06, -4.356911424652895e-01, -4.328359647527580e-01, -4.338593804326153e-01, -4.346490199536623e-01, -4.342537958285663e-01, -4.342537958285663e-01, -4.185413012770254e-01, -3.504048137072764e-01, -3.702026557469853e-01, -3.886189252873379e-01, -3.792285013200125e-01, -3.792285013200125e-01, -4.913495544998012e-01, -1.197363470620487e-01, -1.545616258881458e-01, -2.183445706307761e-01, -1.841973221139020e-01, -1.841973221139019e-01, -3.070791047679046e-01, -3.468415264946684e-03, -7.378677167695121e-03, -2.019662650934748e-01, -1.716453084740001e-02, -1.716453084740001e-02, -1.145178273592839e-04, -2.220159264104192e-07, -1.520196138675217e-06, -1.550521033249424e-02, -5.008060793915521e-06, -5.008060793915499e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_yukawa_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_yukawa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.628025654210779e+01, -2.628032069128487e+01, -2.628065411830465e+01, -2.627960270778000e+01, -2.628028997730031e+01, -2.628028997730031e+01, -4.158609520338217e+00, -4.158618540564027e+00, -4.159043402319244e+00, -4.159222349898507e+00, -4.158632468752298e+00, -4.158632468752298e+00, -6.960709127895420e-01, -6.952404587351240e-01, -6.737268884933760e-01, -6.799154726284189e-01, -6.957680208898236e-01, -6.957680208898236e-01, -1.273741272873496e-01, -1.299586331148159e-01, -8.570987457920258e-01, -7.616639665903586e-02, -1.281485641102340e-01, -1.281485641102340e-01, -1.423798726143132e-04, -1.632043261271322e-04, -7.792488012854143e-03, -1.605108316037848e-05, -1.582505165046613e-04, -1.582505165046613e-04, -6.293846605424553e+00, -6.294991290748825e+00, -6.293967379081546e+00, -6.294857383233068e+00, -6.294428410521611e+00, -6.294428410521611e+00, -2.278175534701096e+00, -2.295166677188792e+00, -2.271307064231868e+00, -2.284567875355355e+00, -2.298569937004296e+00, -2.298569937004296e+00, -5.916391227799102e-01, -6.521846516581828e-01, -5.558644242752391e-01, -5.844420091924386e-01, -6.185872000478175e-01, -6.185872000478175e-01, -4.409868404127392e-02, -1.287638184779300e-01, -4.304624234042349e-02, -2.231943061850732e+00, -5.746027866368355e-02, -5.746027866368355e-02, -1.441633474231677e-05, -2.147944549839183e-05, -9.074346347791159e-06, -1.682787448261261e-02, -1.626926444460817e-05, -1.626926444460817e-05, -6.139918931720461e-01, -6.101267184716567e-01, -6.115122139946407e-01, -6.125811827388179e-01, -6.120461554884757e-01, -6.120461554884757e-01, -5.907681314503030e-01, -4.983013525412499e-01, -5.252050714249512e-01, -5.502031912117442e-01, -5.374599142835282e-01, -5.374599142835282e-01, -6.892520834852249e-01, -1.803969950579660e-01, -2.292855943106332e-01, -3.177014700252918e-01, -2.705105874857729e-01, -2.705105874857729e-01, -4.392978940727638e-01, -6.453788896594390e-03, -1.327492188758691e-02, -2.951026478818571e-01, -2.942986116670265e-02, -2.942986116670266e-02, -2.269540132581105e-04, -4.439670485372121e-07, -3.038794411454993e-06, -2.675299930861299e-02, -1.000449364324589e-05, -1.000449364324585e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
