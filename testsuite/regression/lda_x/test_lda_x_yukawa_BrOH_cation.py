
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_yukawa_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_yukawa", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.967401839569331e+01, -1.967407367323478e+01, -1.967433648432327e+01, -1.967351371204405e+01, -1.967394240377217e+01, -1.967394240377217e+01, -3.085183365146621e+00, -3.085190317175755e+00, -3.085429924870384e+00, -3.085624959196168e+00, -3.085269567902843e+00, -3.085269567902843e+00, -5.001593210161051e-01, -4.994969705617774e-01, -4.835190172588770e-01, -4.883668662995299e-01, -4.886037407582715e-01, -4.886037407582715e-01, -7.593905480160229e-02, -7.787731885616084e-02, -6.010430581114616e-01, -4.708576150694215e-02, -7.169803215562569e-02, -7.169803215562565e-02, -1.519029195115752e-05, -1.773923163878994e-05, -2.434563466983801e-03, -2.918297260175058e-06, -8.507320162712802e-06, -8.507320162712802e-06, -4.687594651803452e+00, -4.688480867090235e+00, -4.687638794886393e+00, -4.688421097857637e+00, -4.688042074817005e+00, -4.688042074817005e+00, -1.678702228113954e+00, -1.691806301230177e+00, -1.669138998898748e+00, -1.680719026621652e+00, -1.690588601793422e+00, -1.690588601793422e+00, -4.248975447644603e-01, -4.702104356199973e-01, -3.862128384969190e-01, -4.052296836710743e-01, -4.340428449874313e-01, -4.340428449874315e-01, -2.333373505219666e-02, -7.603239055672084e-02, -1.992775680282114e-02, -1.644160571773395e+00, -3.219750242783521e-02, -3.219750242783521e-02, -1.345371521116821e-06, -2.726398996711916e-06, -1.228446206520370e-06, -8.191538778956729e-03, -2.547744733625473e-06, -2.547744733625474e-06, -4.274415832696382e-01, -4.244241175125254e-01, -4.254858187652340e-01, -4.263603346080622e-01, -4.259225881682112e-01, -4.259225881682112e-01, -4.131909293513383e-01, -3.412284632722196e-01, -3.617233808909696e-01, -3.821191434065165e-01, -3.716937984391562e-01, -3.716937984391562e-01, -4.978859794975724e-01, -1.104685768030491e-01, -1.454949319002244e-01, -2.157205932298242e-01, -1.776260582375776e-01, -1.776260582375776e-01, -3.069295106332011e-01, -2.154857522730296e-03, -4.824222927890635e-03, -2.051566964094062e-01, -1.428831404862650e-02, -1.428831404862650e-02, -4.217099684789574e-05, -5.216054525621541e-08, -4.862148256622144e-07, -1.237778202800990e-02, -1.961464832681731e-06, -1.961464832681727e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_yukawa_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_yukawa", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.628095189299104e+01, -2.628091786061893e+01, -2.628103727649739e+01, -2.628097988888422e+01, -2.628132728603187e+01, -2.628139073319857e+01, -2.628036259502121e+01, -2.628016128658326e+01, -2.628100196659420e+01, -2.628066512848616e+01, -2.628100196659420e+01, -2.628066512848616e+01, -4.158837256063679e+00, -4.158778610609607e+00, -4.158850694089799e+00, -4.158783726983141e+00, -4.159092715744314e+00, -4.159181210125977e+00, -4.159367068786442e+00, -4.159427399435636e+00, -4.158118521746724e+00, -4.159726516239839e+00, -4.158118521746724e+00, -4.159726516239839e+00, -6.995305323242569e-01, -7.027517463090966e-01, -6.982659124286011e-01, -7.022177191898025e-01, -6.813787188751471e-01, -6.759105229657695e-01, -6.843567544410776e-01, -6.860832583768295e-01, -7.090101206570967e-01, -6.569657264995603e-01, -7.090101206570967e-01, -6.569657264995603e-01, -1.141736408018211e-01, -1.211088453103237e-01, -1.163634766221173e-01, -1.243998760937174e-01, -8.206498675945898e-01, -8.521679335818619e-01, -7.459375446658902e-02, -7.633677204458783e-02, -1.220550510498918e-01, -4.241377845963720e-02, -1.220550510498917e-01, -4.241377845963720e-02, -2.734646564291782e-05, -3.277382877851854e-05, -3.143781462175616e-05, -3.859170959534405e-05, -4.242618658390371e-03, -4.879817947947281e-03, -5.974717522234079e-06, -5.681615928218572e-06, -1.945077593974008e-05, -3.601989432447956e-06, -1.945077593974009e-05, -3.601989432447957e-06, -6.297425883338869e+00, -6.295883309263470e+00, -6.298628489346766e+00, -6.297044928943032e+00, -6.297499116817163e+00, -6.295927820389782e+00, -6.298530950712458e+00, -6.296983040532970e+00, -6.298036902007343e+00, -6.296465910385233e+00, -6.298036902007343e+00, -6.296465910385233e+00, -2.280935927252429e+00, -2.280813931039143e+00, -2.298717608415903e+00, -2.298055722734500e+00, -2.266014366332790e+00, -2.270164135392992e+00, -2.281388817293069e+00, -2.285739727640401e+00, -2.302057305225090e+00, -2.291391485734699e+00, -2.302057305225090e+00, -2.291391485734699e+00, -6.003135045421704e-01, -5.984342312027221e-01, -6.605111932488132e-01, -6.608617977370389e-01, -5.345004668230431e-01, -5.580947326360388e-01, -5.610602510273855e-01, -5.833042333015906e-01, -6.287529184716512e-01, -5.919402143726294e-01, -6.287529184716513e-01, -5.919402143726298e-01, -3.886579578876297e-02, -3.957646298405377e-02, -1.175209905966110e-01, -1.184279449759515e-01, -3.197707552908909e-02, -3.543617812540463e-02, -2.235243861355943e+00, -2.234179850460567e+00, -4.998945555033540e-02, -5.547623180612396e-02, -4.998945555033540e-02, -5.547623180612396e-02, -2.526134563587834e-06, -2.834930000898609e-06, -5.323378473109488e-06, -5.568245849640799e-06, -2.228853917751062e-06, -2.646809546342894e-06, -1.455636708800339e-02, -1.475800157527063e-02, -2.374492041624651e-06, -6.140462885031301e-06, -2.374492041624651e-06, -6.140462885031304e-06, -6.014404025287214e-01, -6.041892477540363e-01, -5.973483819063786e-01, -6.001083227092840e-01, -5.987838011717541e-01, -6.015485937201600e-01, -5.999784787131214e-01, -6.027227853779334e-01, -5.993806205598946e-01, -6.021349008085903e-01, -5.993806205598946e-01, -6.021349008085903e-01, -5.823709218895763e-01, -5.846559892323951e-01, -4.845358514773603e-01, -4.870871967535491e-01, -5.123057623722822e-01, -5.150487804070412e-01, -5.402392754426435e-01, -5.425154080941159e-01, -5.260488329033751e-01, -5.283982615787484e-01, -5.260488329033751e-01, -5.283982615787484e-01, -6.974187030622926e-01, -6.987393337708364e-01, -1.665760140073449e-01, -1.679715013356104e-01, -2.150978156697116e-01, -2.180779241443839e-01, -3.129540816310523e-01, -3.151971107594369e-01, -2.614554300653233e-01, -2.613323307740205e-01, -2.614554300653233e-01, -2.613323307740204e-01, -4.372188170392939e-01, -4.409304204298947e-01, -4.040236296623539e-03, -4.112279237536551e-03, -8.489129597894633e-03, -9.186499525749001e-03, -2.965189347408047e-01, -3.023680431978869e-01, -2.327285442254426e-02, -2.604791585765854e-02, -2.327285442254426e-02, -2.604791585765856e-02, -7.929460881929347e-05, -8.811717135168883e-05, -1.039569055564534e-07, -1.046712315706991e-07, -8.751773227850399e-07, -1.052822513427519e-06, -2.126691279751670e-02, -2.200936003062043e-02, -2.018331124204679e-06, -4.730818490199728e-06, -2.018331124204673e-06, -4.730818490199718e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
