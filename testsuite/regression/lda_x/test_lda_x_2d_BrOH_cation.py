
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_2d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_2d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.479213238232353e+02, -1.479219426242595e+02, -1.479248846583726e+02, -1.479156742143508e+02, -1.479204731400625e+02, -1.479204731400625e+02, -9.717329436439377e+00, -9.717360897764600e+00, -9.718445258546712e+00, -9.719327928772861e+00, -9.717719674185613e+00, -9.717719674185613e+00, -8.231619757917825e-01, -8.218065290589026e-01, -7.893006622778352e-01, -7.991194445306058e-01, -7.998825067986477e-01, -7.998825067986477e-01, -1.081370183871942e-01, -1.106426145557469e-01, -1.037421837941704e+00, -7.145433097709282e-02, -1.028114655348724e-01, -1.028114655348724e-01, -7.036575404647154e-04, -7.604989715009733e-04, -9.840715725988849e-03, -3.079534701546175e-04, -5.135265011133121e-04, -5.135265011133121e-04, -1.780214440993343e+01, -1.780704704512262e+01, -1.780238860678121e+01, -1.780671637727448e+01, -1.780461954550884e+01, -1.780461954550884e+01, -4.102481012006539e+00, -4.147198112601329e+00, -4.069948313999631e+00, -4.109354139072981e+00, -4.143043401306648e+00, -4.143043401306648e+00, -6.734394391340885e-01, -7.625213562368915e-01, -6.000644046894286e-01, -6.358513938451803e-01, -6.913024056126225e-01, -6.913024056126226e-01, -4.133318646837443e-02, -1.082529572132517e-01, -3.686089593110791e-02, -3.985372288178672e+00, -5.268893577458123e-02, -5.268893577458123e-02, -2.089215635305721e-04, -2.976449032506797e-04, -1.995293248153687e-04, -2.028609783695826e-02, -2.827070626679357e-04, -2.827070626679357e-04, -6.783546916668262e-01, -6.725264274448094e-01, -6.745754469780461e-01, -6.762645589414348e-01, -6.754189052759491e-01, -6.754189052759491e-01, -6.509584388060836e-01, -5.177402224496831e-01, -5.547938751549433e-01, -5.923752456411099e-01, -5.730779221927987e-01, -5.730779221927987e-01, -8.185097759590150e-01, -1.537354018075125e-01, -2.023412603335685e-01, -3.071459552574723e-01, -2.490825360838926e-01, -2.490825360838925e-01, -4.573592518001187e-01, -9.192111580467805e-03, -1.464537898003616e-02, -2.907645256838960e-01, -2.921920066811659e-02, -2.921920066811660e-02, -1.177373920429099e-03, -4.112744765737275e-05, -1.254715317938460e-04, -2.652860733534121e-02, -2.485545456531279e-04, -2.485545456531276e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_2d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_2d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.218822000243127e+02, -2.218817714445653e+02, -2.218832752853258e+02, -2.218825525850989e+02, -2.218869274784288e+02, -2.218877264938118e+02, -2.218747788593161e+02, -2.218722437547705e+02, -2.218828306165381e+02, -2.218785887225533e+02, -2.218828306165381e+02, -2.218785887225533e+02, -1.457614330949836e+01, -1.457584499371437e+01, -1.457621166589703e+01, -1.457587101943576e+01, -1.457744279712079e+01, -1.457789296461790e+01, -1.457883843546203e+01, -1.457914534439568e+01, -1.457248741502174e+01, -1.458066701757604e+01, -1.457248741502174e+01, -1.458066701757604e+01, -1.231057819640554e+00, -1.238384630964079e+00, -1.228185090269102e+00, -1.237169021567238e+00, -1.190025241272249e+00, -1.177749460871670e+00, -1.196727396784591e+00, -1.200618306887788e+00, -1.252658351340243e+00, -1.135527065625273e+00, -1.252658351340243e+00, -1.135527065625273e+00, -1.573069623550585e-01, -1.665741983906360e-01, -1.602234462594351e-01, -1.710034542657724e-01, -1.515689171134343e+00, -1.592757181122216e+00, -1.060573425283644e-01, -1.082603644317576e-01, -1.678455646641160e-01, -6.595419377738344e-02, -1.678455646641159e-01, -6.595419377738343e-02, -1.003290868558748e-03, -1.098987468797743e-03, -1.076203666263739e-03, -1.193251686908047e-03, -1.411100291038323e-02, -1.531308843660287e-02, -4.676028774414148e-04, -4.559642434726319e-04, -8.453644023902644e-04, -3.628978880116650e-04, -8.453644023902644e-04, -3.628978880116650e-04, -2.670801280093843e+01, -2.669841698059672e+01, -2.671549459316609e+01, -2.670564290859568e+01, -2.670846838962736e+01, -2.669869385286034e+01, -2.671488774850188e+01, -2.670525791145687e+01, -2.671181405414831e+01, -2.670204100606020e+01, -2.671181405414831e+01, -2.670204100606020e+01, -6.153954723138178e+00, -6.153488277525354e+00, -6.222066523683254e+00, -6.219526777225918e+00, -6.096989567490994e+00, -6.112814354445156e+00, -6.155686424540634e+00, -6.172331047419854e+00, -6.234886614812047e+00, -6.193974247666624e+00, -6.234886614812047e+00, -6.193974247666624e+00, -1.012159609506654e+00, -1.008142734822584e+00, -1.143392417076976e+00, -1.144171121479701e+00, -8.744489401425892e-01, -9.231114744415365e-01, -9.292841827336776e-01, -9.759822358968009e-01, -1.073542849613752e+00, -9.942998373680102e-01, -1.073542849613752e+00, -9.942998373680105e-01, -6.155222263807494e-02, -6.243477325389261e-02, -1.617686660614038e-01, -1.629811518319295e-01, -5.295935481582079e-02, -5.728448419457573e-02, -5.980071836031060e+00, -5.976042312395243e+00, -7.533804992560381e-02, -8.214193272527337e-02, -7.533804992560381e-02, -8.214193272527337e-02, -3.038321202589840e-04, -3.218910447730280e-04, -4.413255518709350e-04, -4.513825863878018e-04, -2.853736685916923e-04, -3.110137242106664e-04, -3.028797238315738e-02, -3.056774871093196e-02, -2.945604747575972e-04, -4.740588250375751e-04, -2.945604747575972e-04, -4.740588250375750e-04, -1.014570661915469e+00, -1.020459333816907e+00, -1.005824010105979e+00, -1.011720802742431e+00, -1.008889555885577e+00, -1.014802234852436e+00, -1.011443145464100e+00, -1.017316524091729e+00, -1.010164992759065e+00, -1.016057451631289e+00, -1.010164992759065e+00, -1.016057451631289e+00, -9.740088624745441e-01, -9.788425256948622e-01, -7.740761280284865e-01, -7.791118857219571e-01, -8.294087241217550e-01, -8.349361871851813e-01, -8.862113558109993e-01, -8.908897486278831e-01, -8.572131497199297e-01, -8.619940271460498e-01, -8.572131497199297e-01, -8.619940271460498e-01, -1.226261728577059e+00, -1.229260275990995e+00, -2.295959757569196e-01, -2.315929362044857e-01, -3.012065205876726e-01, -3.057492641482687e-01, -4.587979446595938e-01, -4.626084054559894e-01, -3.737226205969712e-01, -3.735248830035625e-01, -3.737226205969709e-01, -3.735248830035623e-01, -6.824717888908102e-01, -6.895332797056962e-01, -1.371693485116244e-02, -1.385795750074363e-02, -2.139960089022513e-02, -2.248306694353450e-02, -4.311425844985353e-01, -4.409312718746081e-01, -4.190286205083955e-02, -4.546478695497422e-02, -4.190286205083957e-02, -4.546478695497423e-02, -1.716455351575870e-03, -1.810639941528218e-03, -6.158518161124395e-05, -6.179643792895471e-05, -1.787511133863626e-04, -1.960669720960744e-04, -3.929718777205974e-02, -4.026508809002493e-02, -2.715473190896421e-04, -4.159904202266020e-04, -2.715473190896417e-04, -4.159904202266014e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
