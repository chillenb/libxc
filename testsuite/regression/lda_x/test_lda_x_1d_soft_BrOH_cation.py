
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_1d_soft_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_soft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.999052318111625e-28, -1.997958124139008e-28, -1.992763872091794e-28, -2.009070575474844e-28, -2.000559085782901e-28, -2.000559085782901e-28, -4.987855937375852e-01, -4.987856016010803e-01, -4.987858725849036e-01, -4.987860930996815e-01, -4.987856909838759e-01, -4.987856909838759e-01, -3.473337520382545e-01, -3.469467288044890e-01, -3.373651483445578e-01, -3.403281394817396e-01, -3.401128150654561e-01, -3.401128150654561e-01, -2.606590981666172e-02, -2.704253782256753e-02, -3.963374247502822e-01, -1.324675613538910e-02, -2.462341391244595e-02, -2.462341391244594e-02, -3.311364987594795e-06, -3.829909695299129e-06, -4.213518370997898e-04, -7.025405169402665e-07, -1.912720083338090e-06, -1.912720083338089e-06, -4.996381627671453e-01, -4.996383619798599e-01, -4.996381726924647e-01, -4.996383485502572e-01, -4.996382633615358e-01, -4.996382633615358e-01, -4.931865873359230e-01, -4.933327254272482e-01, -4.930771925649451e-01, -4.932093228048261e-01, -4.933191302937217e-01, -4.933191302937217e-01, -2.980164204569121e-01, -3.290091418292890e-01, -2.686428727185739e-01, -2.833603885329836e-01, -3.044116157578138e-01, -3.044116157578139e-01, -5.258707794762954e-03, -2.610226163343636e-02, -4.323469367638536e-03, -4.927802824824740e-01, -7.957370758950560e-03, -7.957370758950560e-03, -3.384994817275131e-07, -6.589418174170978e-07, -3.106238821877107e-07, -1.525490521453985e-03, -6.159299554491696e-07, -6.159299554491697e-07, -2.998559494482345e-01, -2.976722566956808e-01, -2.984424208694110e-01, -2.990753226078992e-01, -2.987586872741154e-01, -2.987586872741154e-01, -2.894039190067135e-01, -2.319070124688998e-01, -2.489751909517554e-01, -2.654579562803927e-01, -2.571014972342847e-01, -2.571014972342847e-01, -3.460053845335285e-01, -4.532466471219532e-02, -6.860114177457829e-02, -1.235550708375950e-01, -9.262178371219437e-02, -9.262178371219430e-02, -2.025065352524114e-01, -3.723159546537053e-04, -8.571679349459366e-04, -1.147673764923846e-01, -2.892406035143947e-03, -2.892406035143947e-03, -8.629926256583389e-06, -1.553770599527174e-08, -1.293265081411001e-07, -2.442162241933897e-03, -4.815807065815236e-07, -4.815807065815226e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_1d_soft_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_soft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.000972105314755e-28, -2.001478028992316e-28, -1.999703355086076e-28, -2.000556014540335e-28, -1.995399920557461e-28, -1.994459654429368e-28, -2.009750487863319e-28, -2.012757972029430e-28, -2.000227943540316e-28, -2.005239096314103e-28, -2.000227943540316e-28, -2.005239096314103e-28, -4.999999999999998e-01, -4.999999999999993e-01, -5.000000000000006e-01, -5.000000000000004e-01, -5.000000000000000e-01, -4.999999999999996e-01, -5.000000000000009e-01, -5.000000000000002e-01, -4.999999999999998e-01, -5.000000000000002e-01, -4.999999999999998e-01, -5.000000000000002e-01, -4.639601738571437e-01, -4.648976951664324e-01, -4.635869893139919e-01, -4.647435588767594e-01, -4.583206174337521e-01, -4.564997925070617e-01, -4.592881678780702e-01, -4.598413958596072e-01, -4.666662309632862e-01, -4.497377789801881e-01, -4.666662309632862e-01, -4.497377789801881e-01, -4.475319080100532e-02, -4.893501021430850e-02, -4.605790416450737e-02, -5.096982026537755e-02, -4.881592966139346e-01, -4.915131783424881e-01, -2.382410270684895e-02, -2.463491358650406e-02, -4.951675458759126e-02, -1.083614874680710e-02, -4.951675458759124e-02, -1.083614874680711e-02, -5.816604434959154e-06, -6.892710533876494e-06, -6.628935717140309e-06, -8.033820469870296e-06, -7.371788120482666e-04, -8.530694555251509e-04, -1.394586970521045e-06, -1.330144050000579e-06, -4.225691151812784e-06, -8.661829844543717e-07, -4.225691151812782e-06, -8.661829844543712e-07, -4.999999999999984e-01, -4.999999999999993e-01, -5.000000000000002e-01, -5.000000000000004e-01, -4.999999999999996e-01, -5.000000000000002e-01, -5.000000000000002e-01, -4.999999999999996e-01, -4.999999999999994e-01, -4.999999999999998e-01, -4.999999999999994e-01, -4.999999999999998e-01, -5.000000000000000e-01, -5.000000000000010e-01, -4.999999999999999e-01, -4.999999999999999e-01, -5.000000000000029e-01, -4.999999999999999e-01, -4.999999999999997e-01, -5.000000000000003e-01, -5.000000000000006e-01, -5.000000000000004e-01, -5.000000000000006e-01, -5.000000000000004e-01, -4.250701761826145e-01, -4.241330473765273e-01, -4.510577550399286e-01, -4.511869057977683e-01, -3.875953724847865e-01, -4.021306266887220e-01, -4.038710022666505e-01, -4.163037466888735e-01, -4.383094134835689e-01, -4.208346780481762e-01, -4.383094134835688e-01, -4.208346780481766e-01, -9.643482600283691e-03, -9.878421670782636e-03, -4.675344664370533e-02, -4.730126007335689e-02, -7.470118145973734e-03, -8.537766664483472e-03, -5.000000000000003e-01, -5.000000000000002e-01, -1.354603303645111e-02, -1.564506783311854e-02, -1.354603303645111e-02, -1.564506783311854e-02, -6.200468853199966e-07, -6.912464563772264e-07, -1.251098422206827e-06, -1.305163106557273e-06, -5.510058513432110e-07, -6.479302712929637e-07, -2.845923126674190e-03, -2.891994985698725e-03, -5.848938696237042e-07, -1.430941238416219e-06, -5.848938696237044e-07, -1.430941238416219e-06, -4.256283889330482e-01, -4.269783164741179e-01, -4.235880212695256e-01, -4.249682376423401e-01, -4.243079553703972e-01, -4.256818346870145e-01, -4.249036805573599e-01, -4.262602209453369e-01, -4.246059522802210e-01, -4.259710185059069e-01, -4.246059522802210e-01, -4.259710185059069e-01, -4.158041725287144e-01, -4.170238739390805e-01, -3.529166997864014e-01, -3.548095738786655e-01, -3.728262488076897e-01, -3.747078247151053e-01, -3.912426432566156e-01, -3.926694190989211e-01, -3.820947035021424e-01, -3.836391724354681e-01, -3.820947035021424e-01, -3.836391724354681e-01, -4.633353563251350e-01, -4.637270338226310e-01, -7.970361383643154e-02, -8.073227611767841e-02, -1.179148307507342e-01, -1.204067333292257e-01, -2.049978839284303e-01, -2.070635789731296e-01, -1.580899453244026e-01, -1.579799135707065e-01, -1.580899453244024e-01, -1.579799135707065e-01, -3.156815501535162e-01, -3.187381522763815e-01, -7.007659293871293e-04, -7.137062735988915e-04, -1.545613567032902e-03, -1.686476701861363e-03, -1.898914791804500e-01, -1.952597112479929e-01, -4.999519968960349e-03, -5.753159870721813e-03, -4.999519968960349e-03, -5.753159870721814e-03, -1.578221557003342e-05, -1.742417713083681e-05, -3.022906802780940e-08, -3.042654308443091e-08, -2.279247556981768e-07, -2.714307107486848e-07, -4.474942074489032e-03, -4.667112098670492e-03, -5.017830013674723e-07, -1.119613292734767e-06, -5.017830013674712e-07, -1.119613292734764e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
