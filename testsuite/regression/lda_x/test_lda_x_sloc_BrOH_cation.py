
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_sloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_sloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.481214502514393e+01, -2.481220730325064e+01, -2.481250339753472e+01, -2.481157642554480e+01, -2.481205940923256e+01, -2.481205940923256e+01, -4.843663853584640e+00, -4.843673262817075e+00, -4.843997558963485e+00, -4.844261525627622e+00, -4.843780516823490e+00, -4.843780516823490e+00, -1.101378417359879e+00, -1.100289327307818e+00, -1.073964484546891e+00, -1.081963777889819e+00, -1.082275748757172e+00, -1.082275748757172e+00, -3.258277046831328e-01, -3.303272742223047e-01, -1.265281476498223e+00, -2.541308980000203e-01, -3.135237906636871e-01, -3.135237906636870e-01, -1.588385617030538e-02, -1.664058183356450e-02, -7.733493159685062e-02, -9.676730204714381e-03, -1.304538623342985e-02, -1.304538623342985e-02, -6.965130055017738e+00, -6.966280890586979e+00, -6.965187379394701e+00, -6.966203275378174e+00, -6.965711079364623e+00, -6.965711079364623e+00, -2.887179515110167e+00, -2.906020724237994e+00, -2.873419858062982e+00, -2.890080148431597e+00, -2.904269841346888e+00, -2.904269841346888e+00, -9.763932356160832e-01, -1.051954706303130e+00, -9.110170975368798e-01, -9.432526143075121e-01, -9.916782655678907e-01, -9.916782655678910e-01, -1.829879671931935e-01, -3.260685971572147e-01, -1.708070800973892e-01, -2.837443170532672e+00, -2.116319628680418e-01, -2.116319628680418e-01, -7.666419852301692e-03, -9.481090687650165e-03, -7.456835763238933e-03, -1.193888717481441e-01, -9.148617322553190e-03, -9.148617322553190e-03, -9.806623532699963e-01, -9.755982391310940e-01, -9.773805966856741e-01, -9.788482753165637e-01, -9.781136659621958e-01, -9.781136659621958e-01, -9.567037528381529e-01, -8.338970467205522e-01, -8.692090910023330e-01, -9.040732510302038e-01, -8.862854988188341e-01, -8.862854988188341e-01, -1.097640403454591e+00, -4.024474642629367e-01, -4.745626910249791e-01, -6.096096442981859e-01, -5.375907700851231e-01, -5.375907700851230e-01, -7.741033393025759e-01, -7.424951986392953e-02, -9.818260509629999e-02, -5.898806235062115e-01, -1.485802363142841e-01, -1.485802363142841e-01, -2.163502885829341e-02, -2.891510290168711e-03, -5.644988966270500e-03, -1.402383536722675e-01, -8.474344128630832e-03, -8.474344128630823e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_sloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_sloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.225580722390841e+01, -3.225576984139360e+01, -3.225590101253591e+01, -3.225583797571044e+01, -3.225621957027645e+01, -3.225628926306285e+01, -3.225515991483518e+01, -3.225493878905476e+01, -3.225586222674244e+01, -3.225549223018866e+01, -3.225586222674244e+01, -3.225549223018866e+01, -6.296801670186302e+00, -6.296724347551258e+00, -6.296819387888680e+00, -6.296731093372244e+00, -6.297138486438645e+00, -6.297255163263364e+00, -6.297500210772315e+00, -6.297579754184998e+00, -6.295854028679464e+00, -6.297974125375806e+00, -6.295854028679464e+00, -6.297974125375806e+00, -1.429227972522780e+00, -1.434325663283071e+00, -1.427225936514457e+00, -1.433480729243809e+00, -1.400451718304145e+00, -1.391765880097326e+00, -1.405178761177872e+00, -1.407918169199446e+00, -1.444222210761393e+00, -1.361610622876330e+00, -1.444222210761393e+00, -1.361610622876330e+00, -4.158945255255593e-01, -4.304265737616270e-01, -4.205039484800146e-01, -4.372576000760451e-01, -1.619200113258952e+00, -1.668108056747139e+00, -3.282909278238257e-01, -3.323656458645561e-01, -4.323946965221026e-01, -2.468765765624938e-01, -4.323946965221025e-01, -2.468765765624936e-01, -2.003505562695663e-02, -2.116070248293744e-02, -2.089638288141419e-02, -2.223175107411816e-02, -9.787441194491783e-02, -1.027950284962324e-01, -1.267245453684522e-02, -1.248225093032591e-02, -1.807843410146583e-02, -1.088441522851076e-02, -1.807843410146583e-02, -1.088441522851077e-02, -9.055644861356075e+00, -9.053692580136342e+00, -9.057166846351443e+00, -9.055162729994578e+00, -9.055737544446925e+00, -9.053748914064187e+00, -9.057043405215264e+00, -9.055084404485481e+00, -9.056418153316756e+00, -9.054429925465517e+00, -9.056418153316756e+00, -9.054429925465517e+00, -3.753418712789375e+00, -3.753248013558236e+00, -3.778289461289086e+00, -3.777364043912268e+00, -3.732533446147417e+00, -3.738343125314766e+00, -3.754052396492146e+00, -3.760139552362260e+00, -3.782958463810282e+00, -3.768044942392589e+00, -3.782958463810282e+00, -3.768044942392589e+00, -1.270819407127379e+00, -1.267790962887898e+00, -1.367261615092039e+00, -1.367820240974962e+00, -1.164059314459573e+00, -1.202505098664110e+00, -1.207323249454008e+00, -1.243367710105088e+00, -1.316515774043002e+00, -1.257317203409443e+00, -1.316515774043002e+00, -1.257317203409443e+00, -2.368539766853023e-01, -2.388858138817833e-01, -4.229325194018246e-01, -4.248316522019179e-01, -2.164213233199728e-01, -2.268593278616240e-01, -3.689421527110277e+00, -3.687929710712382e+00, -2.673887072867473e-01, -2.816264152423017e-01, -2.673887072867473e-01, -2.816264152423017e-01, -9.783959525874998e-03, -1.012884146200053e-02, -1.224023851556048e-02, -1.240684387708317e-02, -9.422860807113695e-03, -9.922067314096953e-03, -1.547734834387397e-01, -1.556297104860238e-01, -9.603711817722261e-03, -1.277714367489840e-02, -9.603711817722261e-03, -1.277714367489840e-02, -1.272634864315477e+00, -1.277061635317212e+00, -1.266040608399195e+00, -1.270488811532672e+00, -1.268354378800704e+00, -1.272809141585143e+00, -1.270279595810639e+00, -1.274700323692240e+00, -1.269316206874773e+00, -1.273753516558562e+00, -1.269316206874773e+00, -1.273753516558562e+00, -1.241858693738022e+00, -1.245552776695596e+00, -1.081943647762512e+00, -1.086161324830692e+00, -1.127705234620354e+00, -1.132208490748922e+00, -1.173429016687414e+00, -1.177141887135952e+00, -1.150238054159296e+00, -1.154082859192763e+00, -1.150238054159296e+00, -1.154082859192763e+00, -1.425884478076327e+00, -1.427975464120629e+00, -5.218107235333735e-01, -5.245291423379186e-01, -6.141197415261619e-01, -6.196603231289561e-01, -7.905099033506129e-01, -7.944426448058287e-01, -6.989789035860292e-01, -6.987569811845177e-01, -6.989789035860291e-01, -6.987569811845176e-01, -1.003194769470789e+00, -1.009409937457961e+00, -9.622516898047943e-02, -9.681752401710138e-02, -1.256544405999060e-01, -1.294338200758398e-01, -7.615650224444328e-01, -7.718927778625394e-01, -1.880531658737459e-01, -1.974874640623882e-01, -1.880531658737459e-01, -1.974874640623882e-01, -2.765119745509856e-02, -2.855181327258829e-02, -3.755088463855433e-03, -3.762811842434108e-03, -7.116782449016824e-03, -7.522758187925354e-03, -1.809469720575814e-01, -1.836080122744950e-01, -9.146222211479227e-03, -1.181365910031013e-02, -9.146222211479220e-03, -1.181365910031012e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
