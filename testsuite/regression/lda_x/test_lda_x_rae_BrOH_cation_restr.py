
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_rae_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rae", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.215284236334615e+00, -1.215287625605446e+00, -1.215303739534984e+00, -1.215253292259318e+00, -1.215279576888177e+00, -1.215279576888177e+00, -1.978587642277754e-01, -1.978591912863842e-01, -1.978739104037653e-01, -1.978858914102587e-01, -1.978640458370275e-01, -1.978640458370275e-01, -3.816310646918697e-02, -3.812103054720993e-02, -3.710854959755930e-02, -3.741657200401147e-02, -3.735106734436412e-02, -3.735106734436412e-02, -9.854140903122012e-03, -1.000338143285769e-02, -4.450010630143305e-02, -7.481072030609673e-03, -8.400645325729627e-03, -8.400645325729627e-03, -3.430333199183764e-04, -3.610567759585215e-04, -1.991987584946515e-03, -1.981124649860622e-04, -2.489434759896273e-04, -2.489434759896273e-04, -2.962367086394581e-01, -2.962910938554860e-01, -2.962394173135577e-01, -2.962874263087486e-01, -2.962641659899935e-01, -2.962641659899935e-01, -1.113495314340361e-01, -1.121572050262948e-01, -1.107598964773912e-01, -1.114736606235864e-01, -1.120810758345143e-01, -1.120810758345143e-01, -3.338268945103078e-02, -3.626535770276788e-02, -3.088907400128338e-02, -3.210952787623742e-02, -3.392089271808795e-02, -3.392089271808795e-02, -5.193991858476018e-03, -9.869105699143134e-03, -4.805095662493287e-03, -1.092202643012390e-01, -6.095322897173549e-03, -6.095322897173549e-03, -1.528569508881998e-04, -1.936724617568124e-04, -1.480912736113063e-04, -3.231820066314330e-03, -1.784040701892734e-04, -1.784040701892734e-04, -3.354477838372971e-02, -3.335235730709913e-02, -3.342006733892913e-02, -3.347583768398536e-02, -3.344792214362594e-02, -3.344792214362594e-02, -3.263549380127814e-02, -2.801522061894636e-02, -2.933641157553453e-02, -3.064683282895253e-02, -2.997757061572996e-02, -2.997757061572996e-02, -3.801945971898476e-02, -1.246900475692407e-02, -1.497462598308788e-02, -1.977940006110119e-02, -1.720096571606739e-02, -1.720096571606739e-02, -2.579194833544923e-02, -1.906585013263737e-03, -2.599321954143392e-03, -1.906763899954501e-02, -4.115134406160785e-03, -4.115134406160786e-03, -4.841253487347583e-04, -5.176988978182587e-05, -1.086672891665241e-04, -3.864287167834628e-03, -1.650795700586589e-04, -1.650795700586587e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_rae_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rae", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.620378981779486e+00, -1.620383500807262e+00, -1.620404986046645e+00, -1.620337723012423e+00, -1.620372769184235e+00, -1.620372769184235e+00, -2.638116856370339e-01, -2.638122550485122e-01, -2.638318805383537e-01, -2.638478552136783e-01, -2.638187277827033e-01, -2.638187277827033e-01, -5.088414195891596e-02, -5.082804072961324e-02, -4.947806613007907e-02, -4.988876267201529e-02, -4.980142312581882e-02, -4.980142312581882e-02, -1.313885453749601e-02, -1.333784191047691e-02, -5.933347506857740e-02, -9.974762707479564e-03, -1.120086043430617e-02, -1.120086043430617e-02, -4.573777598911686e-04, -4.814090346113620e-04, -2.655983446595353e-03, -2.641499533147496e-04, -3.319246346528364e-04, -3.319246346528364e-04, -3.949822781859441e-01, -3.950547918073147e-01, -3.949858897514102e-01, -3.950499017449980e-01, -3.950188879866580e-01, -3.950188879866580e-01, -1.484660419120482e-01, -1.495429400350597e-01, -1.476798619698549e-01, -1.486315474981152e-01, -1.494414344460190e-01, -1.494414344460190e-01, -4.451025260137437e-02, -4.835381027035717e-02, -4.118543200171117e-02, -4.281270383498324e-02, -4.522785695745062e-02, -4.522785695745062e-02, -6.925322477968023e-03, -1.315880759885751e-02, -6.406794216657716e-03, -1.456270190683186e-01, -8.127097196231401e-03, -8.127097196231401e-03, -2.038092678509331e-04, -2.582299490090832e-04, -1.974550314817417e-04, -4.309093421752440e-03, -2.378720935856978e-04, -2.378720935856978e-04, -4.472637117830628e-02, -4.446980974279884e-02, -4.456008978523884e-02, -4.463445024531382e-02, -4.459722952483460e-02, -4.459722952483460e-02, -4.351399173503753e-02, -3.735362749192848e-02, -3.911521543404604e-02, -4.086244377193670e-02, -3.997009415430661e-02, -3.997009415430661e-02, -5.069261295864635e-02, -1.662533967589876e-02, -1.996616797745050e-02, -2.637253341480158e-02, -2.293462095475652e-02, -2.293462095475652e-02, -3.438926444726564e-02, -2.542113351018316e-03, -3.465762605524522e-03, -2.542351866606002e-02, -5.486845874881048e-03, -5.486845874881048e-03, -6.455004649796777e-04, -6.902651970910118e-05, -1.448897188886988e-04, -5.152382890446171e-03, -2.201060934115452e-04, -2.201060934115449e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
