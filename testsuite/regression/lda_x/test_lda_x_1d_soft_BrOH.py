
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_1d_soft_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_soft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.009150605692860e-28, -2.008193465658235e-28, -2.003225820031571e-28, -2.018931952674714e-28, -2.008651678414759e-28, -2.008651678414759e-28, -4.987854255444129e-01, -4.987854331914563e-01, -4.987857933021467e-01, -4.987859449345872e-01, -4.987854449991767e-01, -4.987854449991767e-01, -3.451298617599851e-01, -3.447667285985813e-01, -3.351041972638920e-01, -3.379340032822387e-01, -3.449975010198161e-01, -3.449975010198161e-01, -2.942390027422739e-02, -3.036675987740525e-02, -4.021306795687027e-01, -1.342354841548643e-02, -2.970511522999656e-02, -2.970511522999656e-02, -1.419534879538493e-05, -1.614612507223419e-05, -7.440152631336264e-04, -1.822209023573658e-06, -1.568326530692516e-05, -1.568326530692516e-05, -4.996376889565732e-01, -4.996378822002641e-01, -4.996377093518525e-01, -4.996378596013458e-01, -4.996377871930335e-01, -4.996377871930335e-01, -4.931636812264374e-01, -4.933061700343320e-01, -4.931049323434312e-01, -4.932177586595559e-01, -4.933342322511003e-01, -4.933342322511003e-01, -2.938432249961413e-01, -3.249394077787163e-01, -2.738527811764622e-01, -2.899120129744213e-01, -3.081309653003820e-01, -3.081309653003820e-01, -6.164380271314315e-03, -2.992932688184514e-02, -5.964218585634520e-03, -4.927548946836146e-01, -8.918658818436854e-03, -8.918658818436854e-03, -1.647104950285610e-06, -2.396423710889060e-06, -1.065455226547806e-06, -1.797204677798093e-03, -1.845494497207371e-06, -1.845494497207371e-06, -3.057439970370293e-01, -3.037203177477942e-01, -3.044473869488642e-01, -3.050070785170392e-01, -3.047270873235569e-01, -3.047270873235569e-01, -2.933699913175093e-01, -2.396057898695798e-01, -2.558947519841139e-01, -2.705906174739696e-01, -2.631565130320067e-01, -2.631565130320068e-01, -3.421264758650975e-01, -5.114673327226772e-02, -7.514698495954035e-02, -1.257589739245257e-01, -9.779272922068195e-02, -9.779272922068201e-02, -2.026368059236951e-01, -6.058840810179648e-04, -1.358379902320646e-03, -1.121382344247398e-01, -3.600461929816777e-03, -3.600461929816781e-03, -2.204863800907535e-05, -6.154351164918300e-08, -3.799009961284554e-07, -3.185911259321306e-03, -1.167966047300878e-06, -1.167966047300875e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_1d_soft_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_soft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.011334329966770e-28, -2.010376149626893e-28, -2.005403104719405e-28, -2.021126308189894e-28, -2.010834860409954e-28, -2.010834860409954e-28, -4.999999999999996e-01, -5.000000000000004e-01, -5.000000000000000e-01, -4.999999999999994e-01, -4.999999999999998e-01, -4.999999999999998e-01, -4.629323474675469e-01, -4.626823756820908e-01, -4.557565186895556e-01, -4.578390143353498e-01, -4.628413214981787e-01, -4.628413214981787e-01, -5.283615193586877e-02, -5.447876629852427e-02, -4.919577956776198e-01, -2.455518951360854e-02, -5.332633173327082e-02, -5.332633173327082e-02, -2.734282444797121e-05, -3.108801047157657e-05, -1.407166399881987e-03, -3.528725189450171e-06, -3.019954814254637e-05, -3.019954814254637e-05, -4.999999999999992e-01, -4.999999999999954e-01, -5.000000000000004e-01, -4.999999999999998e-01, -4.999999999999989e-01, -4.999999999999989e-01, -5.000000000000006e-01, -4.999999999999998e-01, -5.000000000000006e-01, -5.000000000000001e-01, -4.999999999999996e-01, -4.999999999999996e-01, -4.206794887975804e-01, -4.479173360945736e-01, -4.008089230949343e-01, -4.169101495045757e-01, -4.337787400054299e-01, -4.337787400054299e-01, -1.141973426267551e-02, -5.371699307640679e-02, -1.105391736069156e-02, -5.000000000000006e-01, -1.643184440636520e-02, -1.643184440636520e-02, -3.190345714659108e-06, -4.637816516578165e-06, -2.065636180678715e-06, -3.375351275021465e-03, -3.573716775876063e-06, -3.573716775876063e-06, -4.316574084430826e-01, -4.298375406508103e-01, -4.304936313912224e-01, -4.309969696291039e-01, -4.307453564887058e-01, -4.307453564887058e-01, -4.202294305246524e-01, -3.629787853743293e-01, -3.815371578330087e-01, -3.974047807015616e-01, -3.894851470882824e-01, -3.894851470882826e-01, -4.608421850928001e-01, -9.008955670893583e-02, -1.299033417003225e-01, -2.093704295796455e-01, -1.662205909488388e-01, -1.662205909488389e-01, -3.173963406890078e-01, -1.147523446740536e-03, -2.557366691318931e-03, -1.885934380318091e-01, -6.714850767054360e-03, -6.714850767054364e-03, -4.241040151083203e-05, -1.199054907701507e-07, -7.379924091014676e-07, -5.949760440871940e-03, -2.263945926696685e-06, -2.263945926696678e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
