
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_rae_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rae", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.215253043989702e+00, -1.215255993806710e+00, -1.215271326017317e+00, -1.215222978263061e+00, -1.215254581463822e+00, -1.215254581463822e+00, -1.978496307052396e-01, -1.978500459318476e-01, -1.978696035229352e-01, -1.978778409861888e-01, -1.978506870859010e-01, -1.978506870859010e-01, -3.792530363503277e-02, -3.788637335484066e-02, -3.687739413403497e-02, -3.716772894878465e-02, -3.791110472456323e-02, -3.791110472456323e-02, -1.037516148570878e-02, -1.051330749554123e-02, -4.545336069723066e-02, -7.521985654446225e-03, -1.041659992427748e-02, -1.041659992427748e-02, -5.794593636083929e-04, -6.069567219429605e-04, -2.467016622066947e-03, -2.779855778009000e-04, -6.006316216222424e-04, -6.006316216222424e-04, -2.961075182503295e-01, -2.961601813480459e-01, -2.961130746379717e-01, -2.961540207169089e-01, -2.961342851349280e-01, -2.961342851349280e-01, -1.112250278494523e-01, -1.120086938391383e-01, -1.109082316851026e-01, -1.115198590185186e-01, -1.121656555866929e-01, -1.121656555866929e-01, -3.301831287008539e-02, -3.586613872459528e-02, -3.133108774422357e-02, -3.267917221563892e-02, -3.428694238149844e-02, -3.428694238149844e-02, -5.526470514437943e-03, -1.044949414303331e-02, -5.455636452592613e-03, -1.090925409567986e-01, -6.390472587224054e-03, -6.390472587224054e-03, -2.681690719934481e-04, -3.064734398636310e-04, -2.297034026274826e-04, -3.439060550768081e-03, -2.792448221370034e-04, -2.792448221370034e-04, -3.407074028407635e-02, -3.388884924864113e-02, -3.395405349859335e-02, -3.400435806565508e-02, -3.397918059176511e-02, -3.397918059176511e-02, -3.297727773629561e-02, -2.860764280277908e-02, -2.988196910799853e-02, -3.106373961857448e-02, -3.046157037787250e-02, -3.046157037787250e-02, -3.760561010425683e-02, -1.314280190126011e-02, -1.560922894025647e-02, -1.995548756971382e-02, -1.764980203183000e-02, -1.764980203183000e-02, -2.580230085104652e-02, -2.284893186593285e-03, -3.093213334632805e-03, -1.885473414621107e-02, -4.485606668701545e-03, -4.485606668701545e-03, -6.791218031243758e-04, -8.390713091140542e-05, -1.593929849148709e-04, -4.279364285605109e-03, -2.373211442556402e-04, -2.373211442556399e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_rae_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rae", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.620337391986270e+00, -1.620341325075614e+00, -1.620361768023089e+00, -1.620297304350748e+00, -1.620339441951763e+00, -1.620339441951763e+00, -2.637995076069861e-01, -2.638000612424635e-01, -2.638261380305802e-01, -2.638371213149184e-01, -2.638009161145346e-01, -2.638009161145346e-01, -5.056707151337703e-02, -5.051516447312087e-02, -4.916985884537996e-02, -4.955697193171286e-02, -5.054813963275098e-02, -5.054813963275098e-02, -1.383354864761171e-02, -1.401774332738831e-02, -6.060448092964088e-02, -1.002931420592830e-02, -1.388879989903664e-02, -1.388879989903664e-02, -7.726124848111906e-04, -8.092756292572806e-04, -3.289355496089263e-03, -3.706474370678666e-04, -8.008421621629898e-04, -8.008421621629898e-04, -3.948100243337728e-01, -3.948802417973946e-01, -3.948174328506290e-01, -3.948720276225453e-01, -3.948457135132373e-01, -3.948457135132373e-01, -1.483000371326030e-01, -1.493449251188510e-01, -1.478776422468034e-01, -1.486931453580248e-01, -1.495542074489239e-01, -1.495542074489239e-01, -4.402441716011386e-02, -4.782151829946037e-02, -4.177478365896476e-02, -4.357222962085189e-02, -4.571592317533126e-02, -4.571592317533126e-02, -7.368627352583924e-03, -1.393265885737775e-02, -7.274181936790150e-03, -1.454567212757314e-01, -8.520630116298738e-03, -8.520630116298738e-03, -3.575587626579308e-04, -4.086312531515080e-04, -3.062712035033101e-04, -4.585414067690775e-03, -3.723264295160046e-04, -3.723264295160046e-04, -4.542765371210181e-02, -4.518513233152151e-02, -4.527207133145779e-02, -4.533914408754010e-02, -4.530557412235348e-02, -4.530557412235348e-02, -4.396970364839414e-02, -3.814352373703878e-02, -3.984262547733138e-02, -4.141831949143264e-02, -4.061542717049667e-02, -4.061542717049667e-02, -5.014081347234244e-02, -1.752373586834682e-02, -2.081230525367529e-02, -2.660731675961842e-02, -2.353306937577334e-02, -2.353306937577333e-02, -3.440306780139536e-02, -3.046524248791046e-03, -4.124284446177075e-03, -2.513964552828142e-02, -5.980808891602060e-03, -5.980808891602061e-03, -9.054957374991677e-04, -1.118761745485405e-04, -2.125239798864946e-04, -5.705819047473478e-03, -3.164281923408536e-04, -3.164281923408532e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
