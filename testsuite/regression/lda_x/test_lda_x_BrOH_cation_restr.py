
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.982225453692052e+01, -1.982230981862921e+01, -1.982257264966357e+01, -1.982174981438845e+01, -1.982217853763531e+01, -1.982217853763531e+01, -3.227234147883434e+00, -3.227241113549730e+00, -3.227481194086088e+00, -3.227676613851457e+00, -3.227320295140042e+00, -3.227320295140042e+00, -6.224706844165258e-01, -6.217843925924665e-01, -6.052700213057218e-01, -6.102941122642164e-01, -6.092256790548790e-01, -6.092256790548790e-01, -1.607288923729462e-01, -1.631631243650996e-01, -7.258322025861881e-01, -1.220222476077205e-01, -1.370212209970236e-01, -1.370212209970236e-01, -5.595146862577035e-03, -5.889123796187473e-03, -3.249090522418615e-02, -3.231372209463281e-03, -4.060466513788848e-03, -4.060466513788848e-03, -4.831856833378764e+00, -4.832743899599917e+00, -4.831901014012279e+00, -4.832684078989412e+00, -4.832304684650879e+00, -4.832304684650879e+00, -1.816199608833378e+00, -1.829373408879355e+00, -1.806582192721955e+00, -1.818224254852113e+00, -1.828131681082642e+00, -1.828131681082642e+00, -5.444982726190046e-01, -5.915168894355725e-01, -5.038254170974253e-01, -5.237319925606893e-01, -5.532767968796222e-01, -5.532767968796222e-01, -8.471814708296486e-02, -1.609729801237414e-01, -7.837494015677275e-02, -1.781469564765084e+00, -9.941957473002777e-02, -9.941957473002777e-02, -2.493218703619545e-03, -3.158952217889634e-03, -2.415486708750329e-03, -5.271356120377693e-02, -2.909912581751544e-03, -2.909912581751544e-03, -5.471420723043083e-01, -5.440035311752440e-01, -5.451079357626722e-01, -5.460175945422931e-01, -5.455622698289495e-01, -5.455622698289495e-01, -5.323109160192449e-01, -4.569505778266646e-01, -4.785002553838721e-01, -4.998742704983823e-01, -4.889580703652738e-01, -4.889580703652738e-01, -6.201276914270852e-01, -2.033794060056976e-01, -2.442480853098326e-01, -3.226177801674179e-01, -2.805614608588169e-01, -2.805614608588169e-01, -4.206872348236484e-01, -3.109792120992012e-02, -4.239701286164738e-02, -3.110083899442813e-01, -6.712112213236893e-02, -6.712112213236894e-02, -7.896470309974068e-03, -8.444081655323325e-04, -1.772450099569052e-03, -6.302960373747750e-02, -2.692579364328366e-03, -2.692579364328364e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.642967271589404e+01, -2.642974642483894e+01, -2.643009686621810e+01, -2.642899975251794e+01, -2.642957138351375e+01, -2.642957138351375e+01, -4.302978863844579e+00, -4.302988151399640e+00, -4.303308258781450e+00, -4.303568818468610e+00, -4.303093726853389e+00, -4.303093726853389e+00, -8.299609125553676e-01, -8.290458567899555e-01, -8.070266950742958e-01, -8.137254830189552e-01, -8.123009054065053e-01, -8.123009054065053e-01, -2.143051898305950e-01, -2.175508324867994e-01, -9.677762701149174e-01, -1.626963301436273e-01, -1.826949613293648e-01, -1.826949613293648e-01, -7.460195816769381e-03, -7.852165061583297e-03, -4.332120696558153e-02, -4.308496279284374e-03, -5.413955351718464e-03, -5.413955351718464e-03, -6.442475777838352e+00, -6.443658532799890e+00, -6.442534685349704e+00, -6.443578771985881e+00, -6.443072912867839e+00, -6.443072912867839e+00, -2.421599478444504e+00, -2.439164545172473e+00, -2.408776256962606e+00, -2.424299006469484e+00, -2.437508908110189e+00, -2.437508908110189e+00, -7.259976968253394e-01, -7.886891859140964e-01, -6.717672227965672e-01, -6.983093234142524e-01, -7.377023958394964e-01, -7.377023958394964e-01, -1.129575294439531e-01, -2.146306401649886e-01, -1.044999202090303e-01, -2.375292753020112e+00, -1.325594329733704e-01, -1.325594329733704e-01, -3.324291604826060e-03, -4.211936290519512e-03, -3.220648945000439e-03, -7.028474827170259e-02, -3.879883442335392e-03, -3.879883442335392e-03, -7.295227630724112e-01, -7.253380415669921e-01, -7.268105810168964e-01, -7.280234593897242e-01, -7.274163597719329e-01, -7.274163597719329e-01, -7.097478880256600e-01, -6.092674371022195e-01, -6.380003405118296e-01, -6.664990273311764e-01, -6.519440938203651e-01, -6.519440938203651e-01, -8.268369219027804e-01, -2.711725413409302e-01, -3.256641137464434e-01, -4.301570402232239e-01, -3.740819478117560e-01, -3.740819478117559e-01, -5.609163130981980e-01, -4.146389494656016e-02, -5.652935048219650e-02, -4.146778532590417e-01, -8.949482950982525e-02, -8.949482950982525e-02, -1.052862707996543e-02, -1.125877554043110e-03, -2.363266799425403e-03, -8.403947164997001e-02, -3.590105819104487e-03, -3.590105819104484e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
