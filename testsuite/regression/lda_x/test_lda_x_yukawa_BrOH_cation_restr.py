
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_yukawa_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_yukawa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.967401839567688e+01, -1.967407367318806e+01, -1.967433648426615e+01, -1.967351371146902e+01, -1.967394240216226e+01, -1.967394240216226e+01, -3.085183364846558e+00, -3.085190316784494e+00, -3.085429924187193e+00, -3.085624958878656e+00, -3.085269342322547e+00, -3.085269342322547e+00, -5.001545424183116e-01, -4.994897703549191e-01, -4.835048427855441e-01, -4.883654652401139e-01, -4.873316169959900e-01, -4.873316169959900e-01, -7.583994125188474e-02, -7.774672334471219e-02, -6.006526699033530e-01, -4.707680426190118e-02, -5.783568133905215e-02, -5.783568133905215e-02, -1.506701977363529e-05, -1.755523932817191e-05, -2.421570443109804e-03, -2.916450745601200e-06, -5.778442720929918e-06, -5.778442720929918e-06, -4.687594513222169e+00, -4.688480721073718e+00, -4.687638651097684e+00, -4.688420958339841e+00, -4.688041931096092e+00, -4.688041931096092e+00, -1.678702225802158e+00, -1.691806233673648e+00, -1.669136309704853e+00, -1.680716089446985e+00, -1.690571047592096e+00, -1.690571047592096e+00, -4.248956765379045e-01, -4.702103759457607e-01, -3.858937904077739e-01, -4.049573059239244e-01, -4.333388891036062e-01, -4.333388891036062e-01, -2.333120591099574e-02, -7.603069748509390e-02, -1.986002745425407e-02, -1.644160392473652e+00, -3.207924827447413e-02, -3.207924827447413e-02, -1.340919175744631e-06, -2.725019863421723e-06, -1.219478352540402e-06, -8.191075295760976e-03, -2.130753819542738e-06, -2.130753819542738e-06, -4.274376062118996e-01, -4.244200842415612e-01, -4.254817798247856e-01, -4.263563621886308e-01, -4.259185833520677e-01, -4.259185833520677e-01, -4.131881013957184e-01, -3.412243273357997e-01, -3.617188260345344e-01, -3.821161473635396e-01, -3.716905317552679e-01, -3.716905317552679e-01, -4.978851731586846e-01, -1.104655556287043e-01, -1.454837804610345e-01, -2.157159553312906e-01, -1.776260419502329e-01, -1.776260419502329e-01, -3.069199594604707e-01, -2.154673307937626e-03, -4.815619616710568e-03, -2.051238749794846e-01, -1.423185537229569e-02, -1.423185537229569e-02, -4.205328585405282e-05, -5.215993371682422e-08, -4.821201365579952e-07, -1.237326675146440e-02, -1.688582476660468e-06, -1.688582476660463e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_yukawa_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_yukawa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.628093487681594e+01, -2.628100858272197e+01, -2.628135900965330e+01, -2.628026194118558e+01, -2.628083354861342e+01, -2.628083354861342e+01, -4.158807933536487e+00, -4.158817210797053e+00, -4.159136963390157e+00, -4.159397234322505e+00, -4.158922669231824e+00, -4.158922669231824e+00, -7.011442743813068e-01, -7.002465394908787e-01, -6.786539135256230e-01, -6.852209251068004e-01, -6.838242213106196e-01, -6.838242213106196e-01, -1.176992518767394e-01, -1.204583487305846e-01, -8.366661029915917e-01, -7.547017343814098e-02, -9.141969575409524e-02, -9.141969575409524e-02, -3.006145852098918e-05, -3.501692596636267e-05, -4.564081189163332e-03, -5.828173362866471e-06, -1.154213205358617e-05, -1.154213205358617e-05, -6.296654688643965e+00, -6.297836806442134e+00, -6.296713564416211e+00, -6.297757088589568e+00, -6.297251501963853e+00, -6.297251501963853e+00, -2.280874930682865e+00, -2.298386710494011e+00, -2.268091038827220e+00, -2.283566225364157e+00, -2.296736067494872e+00, -2.296736067494872e+00, -5.993750888007203e-01, -6.606865345885574e-01, -5.465057181547135e-01, -5.723601335384065e-01, -6.108075828200389e-01, -6.108075828200389e-01, -3.922234373887597e-02, -1.179754582274968e-01, -3.373799180844054e-02, -2.234711975111244e+00, -5.279358420570118e-02, -5.279358420570118e-02, -2.680541837129144e-06, -5.445816900595327e-06, -2.437849803232092e-06, -1.465735057470016e-02, -4.258703986550766e-06, -4.258703986550766e-06, -6.028174246531943e-01, -5.987309880777916e-01, -6.001688370925865e-01, -6.013532283553584e-01, -6.007603780984934e-01, -6.007603780984934e-01, -5.835153023334148e-01, -4.858142096785087e-01, -5.136802344981242e-01, -5.413792940258018e-01, -5.272256741050135e-01, -5.272256741050135e-01, -6.980795473699236e-01, -1.672755942886902e-01, -2.165948023236615e-01, -3.140785503791401e-01, -2.613938906805908e-01, -2.613938906805908e-01, -4.390807977536431e-01, -4.076296179216132e-03, -8.840358000577206e-03, -2.994643417886098e-01, -2.468438220660374e-02, -2.468438220660374e-02, -8.370833544531883e-05, -1.043140687146331e-07, -9.640043688563232e-07, -2.163997923755281e-02, -3.375261601828816e-06, -3.375261601828807e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
