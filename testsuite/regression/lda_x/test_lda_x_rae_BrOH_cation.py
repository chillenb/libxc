
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_rae_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rae", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.215284236335623e+00, -1.215287625608311e+00, -1.215303739538486e+00, -1.215253292294573e+00, -1.215279576986882e+00, -1.215279576986882e+00, -1.978587642461924e-01, -1.978591913103986e-01, -1.978739104456975e-01, -1.978858914297467e-01, -1.978640596824943e-01, -1.978640596824943e-01, -3.816340508799874e-02, -3.812148051035125e-02, -3.710943618158843e-02, -3.741665961340483e-02, -3.743062087105480e-02, -3.743062087105480e-02, -9.861302602463195e-03, -1.001278368615725e-02, -4.452439672724322e-02, -7.481774549582675e-03, -9.463979973127066e-03, -9.463979973127062e-03, -3.436630161776313e-04, -3.619067923572920e-04, -1.994934843897766e-03, -1.981404234937045e-04, -2.765760365564306e-04, -2.765760365564306e-04, -2.962367171403296e-01, -2.962911028124491e-01, -2.962394261338638e-01, -2.962874348670665e-01, -2.962641748061401e-01, -2.962641748061401e-01, -1.113495315762043e-01, -1.121572091806474e-01, -1.107600618589931e-01, -1.114738412494295e-01, -1.120821553246135e-01, -1.120821553246135e-01, -3.338280675422350e-02, -3.626536143817799e-02, -3.090917216144343e-02, -3.212665728846611e-02, -3.396506633842397e-02, -3.396506633842397e-02, -5.194225763663349e-03, -9.869227983493538e-03, -4.811653345503902e-03, -1.092202753287609e-01, -6.105405833920815e-03, -6.105405833920815e-03, -1.529699728026306e-04, -1.936943064738834e-04, -1.483338512817967e-04, -3.231880781705517e-03, -1.863325639029179e-04, -1.863325639029180e-04, -3.354502804982178e-02, -3.335261055934095e-02, -3.342032092688055e-02, -3.347608707901317e-02, -3.344817358081469e-02, -3.344817358081469e-02, -3.263567152594821e-02, -2.801548238641536e-02, -2.933669919064217e-02, -3.064702162689916e-02, -2.997777667740543e-02, -2.997777667740543e-02, -3.801951011387960e-02, -1.246921255772184e-02, -1.497537154918247e-02, -1.977970073870598e-02, -1.720096678672301e-02, -1.720096678672301e-02, -2.579255562281427e-02, -1.906629336884538e-03, -2.600729040642930e-03, -1.906977399825389e-02, -4.121197917098450e-03, -4.121197917098450e-03, -4.844318456482621e-04, -5.177002469088734e-05, -1.088727287538170e-04, -3.864795396322381e-03, -1.711142897979955e-04, -1.711142897979954e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_rae_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rae", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.620380025068580e+00, -1.620377938489050e+00, -1.620385260068834e+00, -1.620381741541869e+00, -1.620403041020338e+00, -1.620406931068283e+00, -1.620343894261164e+00, -1.620331551716673e+00, -1.620383095161815e+00, -1.620362443075046e+00, -1.620383095161815e+00, -1.620362443075046e+00, -2.638134853691165e-01, -2.638098858803952e-01, -2.638143101563644e-01, -2.638101999086410e-01, -2.638291647459322e-01, -2.638345962748655e-01, -2.638460037406196e-01, -2.638497066607529e-01, -2.637693715243113e-01, -2.638680655804711e-01, -2.637693715243113e-01, -2.638680655804711e-01, -5.078329461023088e-02, -5.098459114529084e-02, -5.070426043465562e-02, -5.095122106486358e-02, -4.964848728470902e-02, -4.930646282810527e-02, -4.983472441115270e-02, -4.994268412001147e-02, -5.137561070158671e-02, -4.812088051120979e-02, -5.137561070158671e-02, -4.812088051120979e-02, -1.288350019771021e-02, -1.338465125670918e-02, -1.304225291538075e-02, -1.362087980995169e-02, -5.833671955337444e-02, -6.029782122574689e-02, -9.905940897547282e-03, -1.004264771547469e-02, -1.345266987692141e-02, -7.217113177404241e-03, -1.345266987692141e-02, -7.217113177404239e-03, -4.430844189002241e-04, -4.708295718833284e-04, -4.642995008206102e-04, -4.973818613695143e-04, -2.581708232113847e-03, -2.726321692079910e-03, -2.663504011771375e-04, -2.619122208641750e-04, -3.952736608540699e-04, -2.249356018084087e-04, -3.952736608540699e-04, -2.249356018084086e-04, -3.950295849111479e-01, -3.949349601262444e-01, -3.951033553142386e-01, -3.950062163577729e-01, -3.950340772084062e-01, -3.949376905340056e-01, -3.950973720880406e-01, -3.950024199908644e-01, -3.950670660938270e-01, -3.949706981246263e-01, -3.950670660938270e-01, -3.949706981246263e-01, -1.484697930071726e-01, -1.484622906273662e-01, -1.495632884182139e-01, -1.495225861127685e-01, -1.475521492655955e-01, -1.478073541649000e-01, -1.484976442891265e-01, -1.487652098721585e-01, -1.497686603938242e-01, -1.491127691607529e-01, -1.497686603938242e-01, -1.491127691607529e-01, -4.456917280380812e-02, -4.445117599399668e-02, -4.834283443859873e-02, -4.836478112156816e-02, -4.042886437569727e-02, -4.191518025603599e-02, -4.210182632077052e-02, -4.350072688581133e-02, -4.635338926511719e-02, -4.404333035081160e-02, -4.635338926511719e-02, -4.404333035081161e-02, -6.892303584198589e-03, -6.958029480596623e-03, -1.312597304773615e-02, -1.319147910165298e-02, -6.234912490370194e-03, -6.569917406866865e-03, -1.456597317955731e-01, -1.455942916376997e-01, -7.886388272727883e-03, -8.354334308291647e-03, -7.886388272727883e-03, -8.354334308291647e-03, -1.998132857678023e-04, -2.076544145514468e-04, -2.562760100819459e-04, -2.601547575393016e-04, -1.916363266128570e-04, -2.029496349206758e-04, -4.295846015466854e-03, -4.322259872281962e-03, -1.957273664827176e-04, -2.687963677490879e-04, -1.957273664827176e-04, -2.687963677490879e-04, -4.463992316960241e-02, -4.481248629579029e-02, -4.438299147510432e-02, -4.455629033763251e-02, -4.447312591308260e-02, -4.464671553691946e-02, -4.454813792759257e-02, -4.472043003323460e-02, -4.451059993231160e-02, -4.468352386462236e-02, -4.451059993231160e-02, -4.468352386462236e-02, -4.344206998996071e-02, -4.358567651227448e-02, -3.727271439295177e-02, -3.743419156353663e-02, -3.902842012881365e-02, -3.920162724776850e-02, -4.079060177597608e-02, -4.093403403536329e-02, -3.989585605739954e-02, -4.004405749995227e-02, -3.989585605739954e-02, -4.004405749995227e-02, -5.065131070453706e-02, -5.073384801945115e-02, -1.657720925914708e-02, -1.667319301914809e-02, -1.986604819944548e-02, -2.006529360545507e-02, -2.629962449637022e-02, -2.644504142214171e-02, -2.293866623346659e-02, -2.293057424850551e-02, -2.293866623346659e-02, -2.293057424850551e-02, -3.427086302210932e-02, -3.450685613210247e-02, -2.533416662271019e-03, -2.550750939887092e-03, -3.407786313858268e-03, -3.521861510920054e-03, -2.523185532355667e-02, -2.561233494509904e-02, -5.333730032810979e-03, -5.631862098822714e-03, -5.333730032810978e-03, -5.631862098822714e-03, -6.338068266913394e-04, -6.567851168836984e-04, -6.894763749686814e-05, -6.910522204199965e-05, -1.402924853363495e-04, -1.492123830902441e-04, -5.110258704274143e-03, -5.193829327200622e-03, -1.853953846162304e-04, -2.463716837515638e-04, -1.853953846162303e-04, -2.463716837515636e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
