
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.982225453693697e+01, -1.982230981867594e+01, -1.982257264972070e+01, -1.982174981496350e+01, -1.982217853924528e+01, -1.982217853924528e+01, -3.227234148183829e+00, -3.227241113941425e+00, -3.227481194770036e+00, -3.227676614169322e+00, -3.227320520970641e+00, -3.227320520970641e+00, -6.224755551273600e-01, -6.217917318499445e-01, -6.052844821978889e-01, -6.102955412432514e-01, -6.105232604833426e-01, -6.105232604833426e-01, -1.608457053974334e-01, -1.633164826104815e-01, -7.262283987918359e-01, -1.220337062521129e-01, -1.543650566269586e-01, -1.543650566269586e-01, -5.605417710464887e-03, -5.902988241156992e-03, -3.253897736679382e-02, -3.231828235007256e-03, -4.511175601165865e-03, -4.511175601165865e-03, -4.831856972034755e+00, -4.832744045695124e+00, -4.831901157878502e+00, -4.832684218582399e+00, -4.832304828449256e+00, -4.832304828449256e+00, -1.816199611152253e+00, -1.829373476640157e+00, -1.806584890227701e+00, -1.818227201003582e+00, -1.828149288426568e+00, -1.828149288426568e+00, -5.445001859275744e-01, -5.915169503630886e-01, -5.041532341088745e-01, -5.240113869271371e-01, -5.539973038358869e-01, -5.539973038358869e-01, -8.472196226300437e-02, -1.609749746789633e-01, -7.848190119347714e-02, -1.781469744632756e+00, -9.958403546498042e-02, -9.958403546498042e-02, -2.495062181128029e-03, -3.159308522636395e-03, -2.419443343902559e-03, -5.271455152020040e-02, -3.039232633627017e-03, -3.039232633627017e-03, -5.471461445572663e-01, -5.440076619211629e-01, -5.451120719842824e-01, -5.460216623739770e-01, -5.455663709699059e-01, -5.455663709699059e-01, -5.323138148502693e-01, -4.569548474627257e-01, -4.785049466155215e-01, -4.998773499433732e-01, -4.889614313954422e-01, -4.889614313954422e-01, -6.201285134079874e-01, -2.033827954023368e-01, -2.442602460870889e-01, -3.226226844588072e-01, -2.805614783220635e-01, -2.805614783220635e-01, -4.206971401646106e-01, -3.109864416350354e-02, -4.241996356397315e-02, -3.110432134749239e-01, -6.722002282868364e-02, -6.722002282868365e-02, -7.901469518926682e-03, -8.444103660066541e-04, -1.775800982983423e-03, -6.303789334919628e-02, -2.791010453250327e-03, -2.791010453250325e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.642968973277071e+01, -2.642965569899546e+01, -2.642977511979741e+01, -2.642971772981817e+01, -2.643006514128875e+01, -2.643012859107130e+01, -2.642910041050370e+01, -2.642889909376542e+01, -2.642973980843839e+01, -2.642940295644244e+01, -2.642973980843839e+01, -2.642940295644244e+01, -4.303008218909323e+00, -4.302949508379305e+00, -4.303021671846730e+00, -4.302954630430289e+00, -4.303263962042433e+00, -4.303352554608535e+00, -4.303538619467306e+00, -4.303599017046092e+00, -4.302288686939609e+00, -4.303898465659673e+00, -4.302288686939609e+00, -4.303898465659673e+00, -8.283160119179346e-01, -8.315993188481663e-01, -8.270269015201124e-01, -8.310550262387748e-01, -8.098063999404921e-01, -8.042277084426911e-01, -8.128440759130905e-01, -8.146049848138633e-01, -8.379771594734901e-01, -7.848899158857378e-01, -8.379771594734901e-01, -7.848899158857378e-01, -2.101401570185115e-01, -2.183143302332373e-01, -2.127295403775718e-01, -2.221674062225913e-01, -9.515183931979718e-01, -9.835055245704584e-01, -1.615737915692080e-01, -1.638035887317735e-01, -2.194237681431400e-01, -1.177168683235354e-01, -2.194237681431400e-01, -1.177168683235354e-01, -7.227060032699612e-03, -7.679605592128282e-03, -7.573094928302194e-03, -8.112694597150361e-03, -4.210971901632833e-02, -4.446847981253337e-02, -4.344387337786896e-03, -4.271997079430850e-03, -6.447228461402042e-03, -3.668878950417009e-03, -6.447228461402042e-03, -3.668878950417009e-03, -6.443247388232253e+00, -6.441703982569792e+00, -6.444450642305362e+00, -6.442866228500801e+00, -6.443320661181121e+00, -6.441748517696647e+00, -6.444353051117142e+00, -6.442804306730630e+00, -6.443858736196126e+00, -6.442286897808373e+00, -6.443858736196126e+00, -6.442286897808373e+00, -2.421660661795793e+00, -2.421538292001380e+00, -2.439496443520397e+00, -2.438832556476809e+00, -2.406693160962725e+00, -2.410855756281447e+00, -2.422114938403326e+00, -2.426479146325725e+00, -2.442846224134334e+00, -2.432148115344833e+00, -2.442846224134334e+00, -2.432148115344833e+00, -7.269587322893815e-01, -7.250341102719994e-01, -7.885101613498295e-01, -7.888681292416647e-01, -6.594270017940527e-01, -6.836699984704526e-01, -6.867143445525188e-01, -7.095315277620327e-01, -7.560607248830663e-01, -7.183818227582800e-01, -7.560607248830663e-01, -7.183818227582801e-01, -1.124189649688643e-01, -1.134910067259421e-01, -2.140950824654201e-01, -2.151635384164040e-01, -1.016963922549506e-01, -1.071605894586806e-01, -2.375826323675312e+00, -2.374758942541319e+00, -1.286332785739800e-01, -1.362658513904136e-01, -1.286332785739800e-01, -1.362658513904136e-01, -3.259113952052670e-03, -3.387009012285624e-03, -4.180065989230878e-03, -4.243331451816018e-03, -3.125741230790202e-03, -3.310270306563134e-03, -7.006867251633947e-02, -7.049950357415852e-02, -3.192469351830964e-03, -4.384283002133067e-03, -3.192469351830964e-03, -4.384283002133067e-03, -7.281127271470655e-01, -7.309273692766299e-01, -7.239219664223940e-01, -7.267486089980875e-01, -7.253921309474738e-01, -7.282235160718629e-01, -7.266156366924575e-01, -7.294258582609023e-01, -7.260033620697657e-01, -7.288238892347747e-01, -7.260033620697657e-01, -7.288238892347747e-01, -7.085747870382301e-01, -7.109171238787466e-01, -6.079476799661236e-01, -6.105815013237418e-01, -6.365846399032911e-01, -6.394097860681792e-01, -6.653272271153956e-01, -6.676667215886837e-01, -6.507332112883355e-01, -6.531504949403307e-01, -6.507332112883355e-01, -6.531504949403307e-01, -8.261632492182961e-01, -8.275094986109118e-01, -2.703874958813616e-01, -2.719530675108339e-01, -3.240310803667122e-01, -3.272809317472798e-01, -4.289678376515548e-01, -4.313397036154488e-01, -3.741479295318066e-01, -3.740159428073748e-01, -3.741479295318065e-01, -3.740159428073748e-01, -5.589850914820422e-01, -5.628343272043392e-01, -4.132204502139597e-02, -4.160478090560012e-02, -5.558371095511651e-02, -5.744436834283029e-02, -4.115516713775445e-01, -4.177575972661838e-01, -8.699738808468019e-02, -9.186015970749541e-02, -8.699738808468019e-02, -9.186015970749542e-02, -1.033789451906821e-02, -1.071268874695182e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282255961574e-03, -2.433772897932117e-03, -8.335239259842157e-02, -8.471549606831762e-02, -3.023946492482390e-03, -4.018518532539024e-03, -3.023946492482390e-03, -4.018518532539021e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
