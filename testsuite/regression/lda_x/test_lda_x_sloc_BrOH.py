
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_sloc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_sloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.481157186293043e+01, -2.481162606615119e+01, -2.481190779704119e+01, -2.481101940105651e+01, -2.481160011419271e+01, -2.481160011419271e+01, -4.843462619578168e+00, -4.843471768045631e+00, -4.843902667894549e+00, -4.844084157359423e+00, -4.843485894248811e+00, -4.843485894248811e+00, -1.095192327399615e+00, -1.094180483161484e+00, -1.067919299530114e+00, -1.075483261462724e+00, -1.094823292884204e+00, -1.094823292884204e+00, -3.410747828629855e-01, -3.451593663235850e-01, -1.289031802149301e+00, -2.553603609202257e-01, -3.423005670869105e-01, -3.423005670869105e-01, -2.541996330870891e-02, -2.650307012769138e-02, -9.362872316126931e-02, -1.312424324750230e-02, -2.625437029844025e-02, -2.625437029844025e-02, -6.962396043161309e+00, -6.963510477122604e+00, -6.962513625996556e+00, -6.963380109503624e+00, -6.962962475007437e+00, -6.962962475007437e+00, -2.884273923780415e+00, -2.902557235304359e+00, -2.876879262020279e+00, -2.891153986159781e+00, -2.906217689520449e+00, -2.906217689520449e+00, -9.667932806691586e-01, -1.041526667705690e+00, -9.222149501103796e-01, -9.578514810501466e-01, -1.000161457874191e+00, -1.000161457874191e+00, -1.934894563103920e-01, -3.432732588130780e-01, -1.912560195891026e-01, -2.834456421986237e+00, -2.205128546011455e-01, -2.205128546011455e-01, -1.270638625075582e-02, -1.432873303970149e-02, -1.105362987604031e-02, -1.262554322018560e-01, -1.317773739962816e-02, -1.317773739962816e-02, -9.944836461002768e-01, -9.897041069945420e-01, -9.914177691683713e-01, -9.927396211908598e-01, -9.920780577148010e-01, -9.920780577148010e-01, -9.657118364920438e-01, -8.497439864640401e-01, -8.837359534210151e-01, -9.151295860049994e-01, -8.991482276089214e-01, -8.991482276089214e-01, -1.086880026449378e+00, -4.219620547614685e-01, -4.926035509690998e-01, -6.144836640536849e-01, -5.501993682763938e-01, -5.501993682763937e-01, -7.743669767785386e-01, -8.738432685953031e-02, -1.147686092899065e-01, -5.838921071094360e-01, -1.603589864509801e-01, -1.603589864509801e-01, -2.932291483699441e-02, -4.465532113151932e-03, -7.955665524191710e-03, -1.537076790328922e-01, -1.138300752710010e-02, -1.138300752710008e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_sloc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_sloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.225504342180956e+01, -3.225511388599654e+01, -3.225548013615355e+01, -3.225432522137346e+01, -3.225508014845052e+01, -3.225508014845052e+01, -6.296501405451618e+00, -6.296513298459320e+00, -6.297073468262914e+00, -6.297309404567249e+00, -6.296531662523455e+00, -6.296531662523455e+00, -1.423750025619500e+00, -1.422434628109929e+00, -1.388295089389148e+00, -1.398128239901541e+00, -1.423270280749465e+00, -1.423270280749465e+00, -4.433972177218812e-01, -4.487071762206605e-01, -1.675741342794091e+00, -3.319684691962934e-01, -4.449907372129837e-01, -4.449907372129837e-01, -3.304595230132158e-02, -3.445399116599879e-02, -1.217173401096501e-01, -1.706151622175299e-02, -3.413068138797232e-02, -3.413068138797232e-02, -9.051114856109702e+00, -9.052563620259384e+00, -9.051267713795523e+00, -9.052394142354711e+00, -9.051851217509668e+00, -9.051851217509668e+00, -3.749556100914540e+00, -3.773324405895667e+00, -3.739943040626363e+00, -3.758500182007715e+00, -3.778082996376584e+00, -3.778082996376584e+00, -1.256831264869906e+00, -1.353984668017396e+00, -1.198879435143493e+00, -1.245206925365191e+00, -1.300209895236448e+00, -1.300209895236448e+00, -2.515362932035097e-01, -4.462552364570014e-01, -2.486328254658333e-01, -3.684793348582108e+00, -2.866667109814892e-01, -2.866667109814892e-01, -1.651830212598257e-02, -1.862735295161194e-02, -1.436971883885240e-02, -1.641320618624128e-01, -1.713105861951661e-02, -1.713105861951661e-02, -1.292828739930360e+00, -1.286615339092905e+00, -1.288843099918883e+00, -1.290561507548118e+00, -1.289701475029241e+00, -1.289701475029241e+00, -1.255425387439657e+00, -1.104667182403252e+00, -1.148856739447320e+00, -1.189668461806499e+00, -1.168892695891598e+00, -1.168892695891598e+00, -1.412944034384191e+00, -5.485506711899091e-01, -6.403846162598297e-01, -7.988287632697904e-01, -7.152591787593120e-01, -7.152591787593118e-01, -1.006677069812100e+00, -1.135996249173894e-01, -1.491991920768784e-01, -7.590597392422668e-01, -2.084666823862742e-01, -2.084666823862742e-01, -3.811978928809274e-02, -5.805191747097511e-03, -1.034236518144922e-02, -1.998199827427599e-01, -1.479790978523013e-02, -1.479790978523011e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
