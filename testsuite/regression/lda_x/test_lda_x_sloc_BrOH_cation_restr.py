
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_sloc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_sloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.481214502512588e+01, -2.481220730319932e+01, -2.481250339747198e+01, -2.481157642491317e+01, -2.481205940746417e+01, -2.481205940746417e+01, -4.843663853189014e+00, -4.843673262301206e+00, -4.843997558062723e+00, -4.844261525208996e+00, -4.843780219402049e+00, -4.843780219402049e+00, -1.101370855053827e+00, -1.100277931057332e+00, -1.073941969431840e+00, -1.081961554858089e+00, -1.080256648323094e+00, -1.080256648323094e+00, -3.256200389159913e-01, -3.300550475274617e-01, -1.264675707004993e+00, -2.541099585997574e-01, -2.820561782300475e-01, -2.820561782300475e-01, -1.585831019589528e-02, -1.660627335669781e-02, -7.723465258848124e-02, -9.675532013923743e-03, -1.188351468301338e-02, -1.188351468301338e-02, -6.965129879629315e+00, -6.966280705791950e+00, -6.965187197415927e+00, -6.966203098807550e+00, -6.965710897473188e+00, -6.965710897473188e+00, -2.887179511875461e+00, -2.906020629783638e+00, -2.873416093190098e+00, -2.890076039167632e+00, -2.904245296127626e+00, -2.904245296127626e+00, -9.763902249741695e-01, -1.051954611222850e+00, -9.104972385725387e-01, -9.428112600860529e-01, -9.905462969680786e-01, -9.905462969680786e-01, -1.829807363047174e-01, -3.260650519255640e-01, -1.706027656233427e-01, -2.837442919142112e+00, -2.113251948921783e-01, -2.113251948921783e-01, -7.661448838082256e-03, -9.480152386077806e-03, -7.446132398740460e-03, -1.193869036095420e-01, -8.804780127450474e-03, -8.804780127450474e-03, -9.806559485739436e-01, -9.755917387008763e-01, -9.773740889584838e-01, -9.788418762577916e-01, -9.781072139667463e-01, -9.781072139667463e-01, -9.566991811128681e-01, -8.338902095290036e-01, -8.692016132258519e-01, -9.040683638298482e-01, -8.862801529410052e-01, -8.862801529410052e-01, -1.097639126759101e+00, -4.024415790036207e-01, -4.745419584832103e-01, -6.096015125986401e-01, -5.375907407224306e-01, -5.375907407224305e-01, -7.740873456561465e-01, -7.424800521748466e-02, -9.813598822680107e-02, -5.898226712002831e-01, -1.483883667530584e-01, -1.483883667530584e-01, -2.162301618071784e-02, -2.891503678139124e-03, -5.635639217347796e-03, -1.402221708183593e-01, -8.210663032504797e-03, -8.210663032504791e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_sloc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_sloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.225578853266364e+01, -3.225586949415911e+01, -3.225625441671357e+01, -3.225504935238712e+01, -3.225567722970342e+01, -3.225567722970342e+01, -6.296763009145718e+00, -6.296775240991568e+00, -6.297196825481540e+00, -6.297539982771695e+00, -6.296914285222664e+00, -6.296914285222664e+00, -1.431782111569975e+00, -1.430361310374532e+00, -1.396124560261392e+00, -1.406550021315516e+00, -1.404333642820023e+00, -1.404333642820023e+00, -4.233060505907887e-01, -4.290715617857002e-01, -1.644078419106490e+00, -3.303429461796846e-01, -3.666730316990617e-01, -3.666730316990617e-01, -2.061580325466387e-02, -2.158815536370715e-02, -1.004050483650256e-01, -1.257819161810087e-02, -1.544856908791740e-02, -1.544856908791740e-02, -9.054668843518110e+00, -9.056164917529534e+00, -9.054743356640705e+00, -9.056064028449814e+00, -9.055424166715145e+00, -9.055424166715145e+00, -3.753333365438100e+00, -3.777826818718730e+00, -3.735440921147128e+00, -3.757098850917922e+00, -3.775518884965914e+00, -3.775518884965914e+00, -1.269307292466420e+00, -1.367540994589705e+00, -1.183646410144300e+00, -1.225654638111869e+00, -1.287710186058502e+00, -1.287710186058502e+00, -2.378749571961327e-01, -4.238845675032331e-01, -2.217835953103456e-01, -3.688675794884745e+00, -2.747227533598318e-01, -2.747227533598318e-01, -9.959883489506932e-03, -1.232419810190115e-02, -9.679972118362598e-03, -1.552029746924046e-01, -1.144621416568562e-02, -1.144621416568562e-02, -1.274852733146127e+00, -1.268269260311139e+00, -1.270586315646029e+00, -1.272494439135129e+00, -1.271539378156770e+00, -1.271539378156770e+00, -1.243708935446729e+00, -1.084057272387705e+00, -1.129962097193607e+00, -1.175288872978803e+00, -1.152164198823307e+00, -1.152164198823307e+00, -1.426930864786831e+00, -5.231740527047070e-01, -6.169045460281734e-01, -7.924819663782322e-01, -6.988679629391599e-01, -6.988679629391596e-01, -1.006313549352990e+00, -9.652240678273005e-02, -1.275767846948414e-01, -7.667694725603680e-01, -1.929048767789760e-01, -1.929048767789760e-01, -2.810992103493319e-02, -3.758954781580860e-03, -7.326330982552134e-03, -1.822888220638671e-01, -1.067386194225624e-02, -1.067386194225623e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
