
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.982174576491315e+01, -1.982179387877970e+01, -1.982204395935523e+01, -1.982125536894775e+01, -1.982177084234149e+01, -1.982177084234149e+01, -3.227085172851000e+00, -3.227091945527933e+00, -3.227410945426950e+00, -3.227545305018287e+00, -3.227102403261576e+00, -3.227102403261576e+00, -6.185919306507214e-01, -6.179569467514081e-01, -6.014996914531774e-01, -6.062352836931093e-01, -6.183603351037216e-01, -6.183603351037216e-01, -1.692271533543928e-01, -1.714804248840375e-01, -7.413805415730652e-01, -1.226895814226986e-01, -1.699030473159558e-01, -1.699030473159558e-01, -9.451444078539793e-03, -9.899947909746104e-03, -4.023900744151538e-02, -4.534166342338011e-03, -9.796780482093969e-03, -9.796780482093969e-03, -4.829749635160879e+00, -4.830608612259756e+00, -4.829840264272041e+00, -4.830508127455579e+00, -4.830186224383225e+00, -4.830186224383225e+00, -1.814168856133233e+00, -1.826951073045990e+00, -1.809001658190305e+00, -1.818977787495888e+00, -1.829511244254968e+00, -1.829511244254968e+00, -5.385550001574309e-01, -5.850053097040899e-01, -5.110350135518346e-01, -5.330233457713495e-01, -5.592473586497322e-01, -5.592473586497322e-01, -9.014113896381726e-02, -1.704395782422006e-01, -8.898577895683078e-02, -1.779386295215369e+00, -1.042337014238125e-01, -1.042337014238125e-01, -4.374051308372499e-03, -4.998826078831668e-03, -3.746645581951757e-03, -5.609381868624615e-02, -4.554705621140559e-03, -4.554705621140559e-03, -5.557209301168958e-01, -5.527541423526972e-01, -5.538176756404652e-01, -5.546381832244974e-01, -5.542275185576465e-01, -5.542275185576465e-01, -5.378856844182659e-01, -4.666134558350790e-01, -4.873987335749924e-01, -5.066743525326738e-01, -4.968524922578301e-01, -4.968524922578301e-01, -6.133774743520365e-01, -2.143695744798337e-01, -2.545989653515405e-01, -3.254899077834390e-01, -2.878823389138915e-01, -2.878823389138915e-01, -4.208560926045128e-01, -3.726842904745534e-02, -5.045277493355551e-02, -3.075357420905909e-01, -7.316382001932631e-02, -7.316382001932631e-02, -1.107701790299308e-02, -1.368592183343880e-03, -2.599826628140485e-03, -6.979984236553158e-02, -3.870897019627988e-03, -3.870897019627982e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.642899435321753e+01, -2.642905850503960e+01, -2.642939194580697e+01, -2.642834049193032e+01, -2.642902778978864e+01, -2.642902778978864e+01, -4.302780230468001e+00, -4.302789260703912e+00, -4.303214593902601e+00, -4.303393740024382e+00, -4.302803204348767e+00, -4.302803204348767e+00, -8.247892408676286e-01, -8.239425956685440e-01, -8.019995886042366e-01, -8.083137115908124e-01, -8.244804468049621e-01, -8.244804468049621e-01, -2.256362044725238e-01, -2.286405665120500e-01, -9.885073887640869e-01, -1.635861085635981e-01, -2.265373964212744e-01, -2.265373964212744e-01, -1.260192543805306e-02, -1.319993054632814e-02, -5.365200992202050e-02, -6.045555123117349e-03, -1.306237397612529e-02, -1.306237397612529e-02, -6.439666180214506e+00, -6.440811483013007e+00, -6.439787019029389e+00, -6.440677503274106e+00, -6.440248299177633e+00, -6.440248299177633e+00, -2.418891808177643e+00, -2.435934764061320e+00, -2.412002210920408e+00, -2.425303716661184e+00, -2.439348325673290e+00, -2.439348325673290e+00, -7.180733335432412e-01, -7.800070796054533e-01, -6.813800180691127e-01, -7.106977943617994e-01, -7.456631448663096e-01, -7.456631448663096e-01, -1.201881852850897e-01, -2.272527709896008e-01, -1.186477052757744e-01, -2.372515060287158e+00, -1.389782685650834e-01, -1.389782685650834e-01, -5.832068411163332e-03, -6.665101438442224e-03, -4.995527442602342e-03, -7.479175824832822e-02, -6.072940828187413e-03, -6.072940828187413e-03, -7.409612401558612e-01, -7.370055231369295e-01, -7.384235675206203e-01, -7.395175776326633e-01, -7.389700247435287e-01, -7.389700247435287e-01, -7.171809125576879e-01, -6.221512744467721e-01, -6.498649780999898e-01, -6.755658033768985e-01, -6.624699896771068e-01, -6.624699896771068e-01, -8.178366324693820e-01, -2.858260993064450e-01, -3.394652871353873e-01, -4.339865437112519e-01, -3.838431185518554e-01, -3.838431185518553e-01, -5.611414568060171e-01, -4.969123872994046e-02, -6.727036657807403e-02, -4.100476561207878e-01, -9.755176002576842e-02, -9.755176002576843e-02, -1.476935720399078e-02, -1.824789577791840e-03, -3.466435504187313e-03, -9.306645648737544e-02, -5.161196026170651e-03, -5.161196026170643e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
