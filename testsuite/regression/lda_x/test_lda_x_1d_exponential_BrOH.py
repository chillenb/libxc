
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_1d_exponential_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_exponential", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.420741972716962e-01, -4.420741901542301e-01, -4.420741531593001e-01, -4.420742698136448e-01, -4.420741935620064e-01, -4.420741935620064e-01, -4.389491473153563e-01, -4.389491697106763e-01, -4.389502243670800e-01, -4.389506684690916e-01, -4.389492042911098e-01, -4.389492042911098e-01, -2.754877077249886e-01, -2.752167634942391e-01, -2.680352199045423e-01, -2.701332795247880e-01, -2.753889397569693e-01, -2.753889397569693e-01, -2.699470458944939e-02, -2.783953178640349e-02, -3.198851639673592e-01, -1.249657586089382e-02, -2.724678238883188e-02, -2.724678238883188e-02, -1.377144226249264e-05, -1.565896203346700e-05, -7.113025535928444e-04, -1.775406642455619e-06, -1.521117429405522e-05, -1.521117429405522e-05, -4.416521018493729e-01, -4.416527846907317e-01, -4.416521739152132e-01, -4.416527048330508e-01, -4.416524489689694e-01, -4.416524489689694e-01, -4.255801485369028e-01, -4.258751077935853e-01, -4.254589692200588e-01, -4.256919151852167e-01, -4.259333757059227e-01, -4.259333757059227e-01, -2.376971970755639e-01, -2.605267658297221e-01, -2.230182420094291e-01, -2.348141206733776e-01, -2.481737231742906e-01, -2.481737231742906e-01, -5.796657983631773e-03, -2.744770101737104e-02, -5.610454014125524e-03, -4.247420729692191e-01, -8.350139248344690e-03, -8.350139248344690e-03, -1.605087739281089e-06, -2.333707518596316e-06, -1.039049176635341e-06, -1.708587315048587e-03, -1.798053201557362e-06, -1.798053201557362e-06, -2.464229416744156e-01, -2.449389401672104e-01, -2.454720861670673e-01, -2.458825172751254e-01, -2.456771927846738e-01, -2.456771927846738e-01, -2.373501855713190e-01, -1.976541260695492e-01, -2.097640535917668e-01, -2.206166107128167e-01, -2.151341287119023e-01, -2.151341287119024e-01, -2.732492549987247e-01, -4.622825001614403e-02, -6.696935057171584e-02, -1.091596574093882e-01, -8.609525099823284e-02, -8.609525099823266e-02, -1.697447280716474e-01, -5.798945357667867e-04, -1.293899196967984e-03, -9.800056188445978e-02, -3.403828726543983e-03, -3.403828726543984e-03, -2.136622990594829e-05, -6.025645468747024e-08, -3.710781487790585e-07, -3.015172208126353e-03, -1.138844767624768e-06, -1.138844767624758e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_1d_exponential_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_exponential", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.421038174262231e-01, -4.421038101121474e-01, -4.421037720953327e-01, -4.421038919721954e-01, -4.421038136140583e-01, -4.421038136140583e-01, -4.425061784458107e-01, -4.425061822692768e-01, -4.425063623219935e-01, -4.425064381371190e-01, -4.425061881730512e-01, -4.425061881730512e-01, -3.633972667538448e-01, -3.631834082510055e-01, -3.574072356729335e-01, -3.591162140989814e-01, -3.633193425545003e-01, -3.633193425545003e-01, -4.798478716265071e-02, -4.943212950615720e-02, -3.945183160787369e-01, -2.270174764660930e-02, -4.841692280970269e-02, -4.841692280970269e-02, -2.649501138232211e-05, -3.011368439424539e-05, -1.341740932381819e-03, -3.435120427214386e-06, -2.925536611699191e-05, -2.925536611699191e-05, -4.429323072828995e-01, -4.429324039046216e-01, -4.429323174805255e-01, -4.429323926051756e-01, -4.429323564010657e-01, -4.429323564010657e-01, -4.396958286006450e-01, -4.397670408517294e-01, -4.396664678124240e-01, -4.397228549550725e-01, -4.397810657865354e-01, -4.397810657865354e-01, -3.307018959143322e-01, -3.511454499373281e-01, -3.164401942841555e-01, -3.279696551677324e-01, -3.403462262021218e-01, -3.403462262021218e-01, -1.068432793272030e-02, -4.876118542014262e-02, -1.034642252626141e-02, -4.394915352593404e-01, -1.529493469337856e-02, -1.529493469337856e-02, -3.106311292650308e-06, -4.512384131993270e-06, -2.012824080853909e-06, -3.198117232340751e-03, -3.478834184576346e-06, -3.478834184576346e-06, -3.387655390043487e-01, -3.374159639100585e-01, -3.379018451110608e-01, -3.382751039025660e-01, -3.380884609656415e-01, -3.380884609656415e-01, -3.303748244043327e-01, -2.897531492684111e-01, -3.028157535326175e-01, -3.140239015826694e-01, -3.084209025285763e-01, -3.084209025285763e-01, -3.616215840333664e-01, -8.029893186243656e-02, -1.137232760050031e-01, -1.772375213004360e-01, -1.432651428983663e-01, -1.432651428983661e-01, -2.574514353946182e-01, -1.095544376672581e-03, -2.428405556370142e-03, -1.610291616206601e-01, -6.321590917103148e-03, -6.321590917103149e-03, -4.104558530512035e-05, -1.173313768466783e-07, -7.203467144027687e-07, -5.608286735667830e-03, -2.205703367344594e-06, -2.205703367344580e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
