
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_2d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.479213238230283e+02, -1.479219426236711e+02, -1.479248846576533e+02, -1.479156742071094e+02, -1.479204731197885e+02, -1.479204731197885e+02, -9.717329434913026e+00, -9.717360895774348e+00, -9.718445255071348e+00, -9.719327927157641e+00, -9.717718526695871e+00, -9.717718526695871e+00, -8.231511066230245e-01, -8.217901602781522e-01, -7.892688413192701e-01, -7.991162870528254e-01, -7.970187035237422e-01, -7.970187035237422e-01, -1.080045718938259e-01, -1.104674251654469e-01, -1.036467194261385e+00, -7.144300978336320e-02, -8.501253404873188e-02, -8.501253404873188e-02, -7.014850950357373e-04, -7.574905822059828e-04, -9.816211994044054e-03, -3.078801506780991e-04, -4.336757236953222e-04, -4.336757236953222e-04, -1.780214354786715e+01, -1.780704613672111e+01, -1.780238771231723e+01, -1.780671550930831e+01, -1.780461865142934e+01, -1.780461865142934e+01, -4.102481003167519e+00, -4.147197853377628e+00, -4.069938058988253e+00, -4.109342902763488e+00, -4.142976066128731e+00, -4.142976066128731e+00, -6.734354458697782e-01, -7.625212236983963e-01, -5.994063253961514e-01, -6.352795390071503e-01, -6.897868296392358e-01, -6.897868296392358e-01, -4.133004562987004e-02, -1.082506937845342e-01, -3.677621632385860e-02, -3.985371609151263e+00, -5.254229804735337e-02, -5.254229804735337e-02, -2.086612363543365e-04, -2.975882621745565e-04, -1.989794335396218e-04, -2.028545473616002e-02, -2.631001680329829e-04, -2.631001680329829e-04, -6.783461718676349e-01, -6.725178100917085e-01, -6.745668094474483e-01, -6.762560571421301e-01, -6.754103374346904e-01, -6.754103374346904e-01, -6.509524567530349e-01, -5.177320590714849e-01, -5.547846966407790e-01, -5.923690875306681e-01, -5.730712747775460e-01, -5.730712747775460e-01, -8.185079451324500e-01, -1.537310784624942e-01, -2.023242615054357e-01, -3.071380763769506e-01, -2.490825099211070e-01, -2.490825099211070e-01, -4.573410802194978e-01, -9.191750985451292e-03, -1.463201374041316e-02, -2.907095972444117e-01, -2.914674253159113e-02, -2.914674253159114e-02, -1.176117527367128e-03, -4.112726679952541e-05, -1.250726172036665e-04, -2.652272101714549e-02, -2.341822539177917e-04, -2.341822539177914e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_2d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.218819857345425e+02, -2.218829139355067e+02, -2.218873269864800e+02, -2.218735113106641e+02, -2.218807096796828e+02, -2.218807096796828e+02, -1.457599415236954e+01, -1.457604134366152e+01, -1.457766788260702e+01, -1.457899189073646e+01, -1.457657779004381e+01, -1.457657779004381e+01, -1.234726659934537e+00, -1.232685240417228e+00, -1.183903261978905e+00, -1.198674430579238e+00, -1.195528055285613e+00, -1.195528055285613e+00, -1.620068578407389e-01, -1.657011377481703e-01, -1.554700791392077e+00, -1.071645146750448e-01, -1.275188010730978e-01, -1.275188010730978e-01, -1.052227642553606e-03, -1.136235873308974e-03, -1.472431799106608e-02, -4.618202260171487e-04, -6.505135855429833e-04, -6.505135855429833e-04, -2.670321532180073e+01, -2.671056920508166e+01, -2.670358156847585e+01, -2.671007326396247e+01, -2.670692797714402e+01, -2.670692797714402e+01, -6.153721504751278e+00, -6.220796780066443e+00, -6.104907088482380e+00, -6.164014354145232e+00, -6.214464099193097e+00, -6.214464099193097e+00, -1.010153168804667e+00, -1.143781835547594e+00, -8.991094880942271e-01, -9.529193085107255e-01, -1.034680244458854e+00, -1.034680244458854e+00, -6.199506844480507e-02, -1.623760406768013e-01, -5.516432448578790e-02, -5.978057413726894e+00, -7.881344707103005e-02, -7.881344707103005e-02, -3.129918545315047e-04, -4.463823932618348e-04, -2.984691503094328e-04, -3.042818210424003e-02, -3.946502520494744e-04, -3.946502520494744e-04, -1.017519257801452e+00, -1.008776715137563e+00, -1.011850214171172e+00, -1.014384085713195e+00, -1.013115506152036e+00, -1.013115506152036e+00, -9.764286851295524e-01, -7.765980886072273e-01, -8.321770449611686e-01, -8.885536312960022e-01, -8.596069121663191e-01, -8.596069121663191e-01, -1.227761917698675e+00, -2.305966176937414e-01, -3.034863922581536e-01, -4.607071145654258e-01, -3.736237648816605e-01, -3.736237648816605e-01, -6.860116203292467e-01, -1.378762647817694e-02, -2.194802061061975e-02, -4.360643958666175e-01, -4.372011379738670e-02, -4.372011379738670e-02, -1.764176291050693e-03, -6.169090019928812e-05, -1.876089258054998e-04, -3.978408152571823e-02, -3.512733808766875e-04, -3.512733808766871e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
