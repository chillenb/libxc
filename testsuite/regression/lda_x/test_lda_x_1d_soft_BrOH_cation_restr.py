
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_1d_soft_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_soft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.999052302633146e-28, -1.997958080144465e-28, -1.992763818454670e-28, -2.009070031169147e-28, -2.000557568183221e-28, -2.000557568183221e-28, -4.987855937375880e-01, -4.987856016010797e-01, -4.987858725849040e-01, -4.987860930996802e-01, -4.987856909838759e-01, -4.987856909838759e-01, -3.473323612662370e-01, -3.469446215747901e-01, -3.373604286364771e-01, -3.403276905384511e-01, -3.397004280865058e-01, -3.397004280865058e-01, -2.600613600486008e-02, -2.696269960643070e-02, -3.962959784130058e-01, -1.324258935177510e-02, -1.764045767966917e-02, -1.764045767966917e-02, -3.286924470583963e-06, -3.793779455050488e-06, -4.189886535142796e-04, -7.021345335411469e-07, -1.336185448587943e-06, -1.336185448587943e-06, -4.996381627671463e-01, -4.996383619798599e-01, -4.996381726924664e-01, -4.996383485502580e-01, -4.996382633615354e-01, -4.996382633615354e-01, -4.931865873359235e-01, -4.933327254272491e-01, -4.930771925649439e-01, -4.932093228048264e-01, -4.933191302937210e-01, -4.933191302937210e-01, -2.980154888394685e-01, -3.290091198473357e-01, -2.684463878612713e-01, -2.832082023797192e-01, -3.040778487735177e-01, -3.040778487735177e-01, -5.257871680966636e-03, -2.610123899105084e-02, -4.302560232049460e-03, -4.927802824824775e-01, -7.912116748932680e-03, -7.912116748932680e-03, -3.374729133002007e-07, -6.586373170726932e-07, -3.085443044610216e-07, -1.525384619086833e-03, -5.223556165325929e-07, -5.223556165325929e-07, -2.998539963714882e-01, -2.976702397133649e-01, -2.984404138538664e-01, -2.990733590104483e-01, -2.987567024344070e-01, -2.987567024344070e-01, -2.894024095335171e-01, -2.319039439743734e-01, -2.489720665543387e-01, -2.654560782399941e-01, -2.570993497856264e-01, -2.570993497856264e-01, -3.460051453871426e-01, -4.532243769113505e-02, -6.859181708595707e-02, -1.235507996035316e-01, -9.262176915382365e-02, -9.262176915382356e-02, -2.024986696312357e-01, -3.722828660047578e-04, -8.554300810180510e-04, -1.147372529511901e-01, -2.877070188985361e-03, -2.877070188985359e-03, -8.608019511381302e-06, -1.553753693553874e-08, -1.283237453880271e-07, -2.440993519337058e-03, -4.194815566233649e-07, -4.194815566233642e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_1d_soft_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_soft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.001225051169621e-28, -2.000129639382236e-28, -1.994929732105045e-28, -2.011253667867470e-28, -2.002731952776700e-28, -2.002731952776700e-28, -5.000000000000023e-01, -4.999999999999999e-01, -5.000000000000002e-01, -4.999999999999993e-01, -4.999999999999999e-01, -4.999999999999999e-01, -4.644321818305430e-01, -4.641701809549872e-01, -4.574204958451288e-01, -4.595657806148107e-01, -4.591163883466458e-01, -4.591163883466458e-01, -4.686092298981578e-02, -4.853661933518629e-02, -4.899792440718397e-01, -2.423046059141320e-02, -3.208861372090178e-02, -3.208861372090178e-02, -6.356454380493973e-06, -7.334065745253132e-06, -7.954077028738738e-04, -1.362392105929895e-06, -2.589282189920604e-06, -2.589282189920604e-06, -4.999999999999999e-01, -5.000000000000003e-01, -5.000000000000016e-01, -5.000000000000007e-01, -4.999999999999992e-01, -4.999999999999992e-01, -5.000000000000009e-01, -5.000000000000008e-01, -5.000000000000001e-01, -5.000000000000003e-01, -4.999999999999998e-01, -4.999999999999998e-01, -4.246031938324795e-01, -4.511223757616243e-01, -3.951434368062882e-01, -4.103240483320103e-01, -4.301604826576160e-01, -4.301604826576160e-01, -9.761105058483092e-03, -4.702764139764982e-02, -8.007613421681378e-03, -5.000000000000038e-01, -1.460463289376695e-02, -1.460463289376695e-02, -6.557106875182180e-07, -1.278150623108718e-06, -5.995970644511982e-07, -2.868974425223857e-03, -1.014130067843491e-06, -1.014130067843491e-06, -4.263067065074789e-01, -4.242815475228342e-01, -4.249983120729448e-01, -4.255853067048848e-01, -4.252918711545017e-01, -4.252918711545017e-01, -4.164164576555655e-01, -3.538666965207096e-01, -3.737710263236637e-01, -3.919586651519400e-01, -3.828698093643440e-01, -3.828698093643440e-01, -4.635317483055479e-01, -8.021872235363323e-02, -1.191647607885350e-01, -2.060333889127732e-01, -1.580349368531442e-01, -1.580349368531441e-01, -3.172175933854271e-01, -7.072400063374460e-04, -1.616275581757718e-03, -1.925933289552292e-01, -5.378829641296419e-03, -5.378829641296418e-03, -1.660493770163422e-05, -3.032781431904077e-08, -2.497365646003969e-07, -4.571211021443971e-03, -8.147349918284487e-07, -8.147349918284469e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
