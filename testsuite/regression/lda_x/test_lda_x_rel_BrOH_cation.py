
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_rel_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.582738704937914e+01, -1.582741275106998e+01, -1.582753494529609e+01, -1.582715238782798e+01, -1.582735171673836e+01, -1.582735171673836e+01, -3.206418891436476e+00, -3.206425722930899e+00, -3.206661175876422e+00, -3.206852827790996e+00, -3.206503602247742e+00, -3.206503602247742e+00, -6.223253508159822e-01, -6.216420231374351e-01, -6.051463848621881e-01, -6.101539799561594e-01, -6.103821416820719e-01, -6.103821416820719e-01, -1.608431171386383e-01, -1.633137743890171e-01, -7.259901481579280e-01, -1.220325744491392e-01, -1.543632513796585e-01, -1.543632513796585e-01, -5.605417601158969e-03, -5.902988113622586e-03, -3.253895597024578e-02, -3.231828213980643e-03, -4.511175554827249e-03, -4.511175554827249e-03, -4.762494937746927e+00, -4.763344130414230e+00, -4.762537237167555e+00, -4.763286858375914e+00, -4.762923670944703e+00, -4.762923670944703e+00, -1.812474791924822e+00, -1.825567116263624e+00, -1.802918853992554e+00, -1.814489920256382e+00, -1.824350627651405e+00, -1.824350627651405e+00, -5.443996467137989e-01, -5.913880562949066e-01, -5.040735305850930e-01, -5.239218692567138e-01, -5.538916866334708e-01, -5.538916866334708e-01, -8.472158350329616e-02, -1.609723764666329e-01, -7.848160090471569e-02, -1.777954301462261e+00, -9.958342234179537e-02, -9.958342234179537e-02, -2.495062171463307e-03, -3.159308502996621e-03, -2.419443335103068e-03, -5.271446027896846e-02, -3.039232617590100e-03, -3.039232617590100e-03, -5.470441334873849e-01, -5.439073960746713e-01, -5.450111943039413e-01, -5.459202788963888e-01, -5.454652408773084e-01, -5.454652408773084e-01, -5.322198758106215e-01, -4.568954213212847e-01, -4.784367109150524e-01, -4.997995568914807e-01, -4.888886238729647e-01, -4.888886238729647e-01, -6.199799995600327e-01, -2.033775553610887e-01, -2.442511696120675e-01, -3.226017692226205e-01, -2.805477226592673e-01, -2.805477226592673e-01, -4.206507675313919e-01, -3.109862542993223e-02, -4.241991606798695e-02, -3.110244739746072e-01, -6.721983418920444e-02, -6.721983418920442e-02, -7.901469212040610e-03, -8.444103656336748e-04, -1.775800979513270e-03, -6.303773735570797e-02, -2.791010440630085e-03, -2.791010440630088e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_rel_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rel", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.889933996242681e+01, -1.889931278763029e+01, -1.889936925444349e+01, -1.889932343057647e+01, -1.889941594214743e+01, -1.889946660427228e+01, -1.889922443528106e+01, -1.889906368909444e+01, -1.889943340565989e+01, -1.889916444052037e+01, -1.889943340565989e+01, -1.889916444052037e+01, -4.261457936205406e+00, -4.261399604350967e+00, -4.261471094613441e+00, -4.261404485607609e+00, -4.261704660760388e+00, -4.261792681828537e+00, -4.261971716523503e+00, -4.262031724439249e+00, -4.260740474926077e+00, -4.262339870223559e+00, -4.260740474926077e+00, -4.262339870223559e+00, -8.280160235246877e-01, -8.312985381878939e-01, -8.267279941806520e-01, -8.307551490482622e-01, -8.095295943740310e-01, -8.039521756701893e-01, -8.125611779282618e-01, -8.143216783768773e-01, -8.376894064326983e-01, -7.846144336438864e-01, -8.376894064326983e-01, -7.846144336438864e-01, -2.101350500540674e-01, -2.183090917335703e-01, -2.127242073022036e-01, -2.221619166423165e-01, -9.510474457797384e-01, -9.830240832713206e-01, -1.615715385222495e-01, -1.638013150045363e-01, -2.194199985705949e-01, -1.177142881788978e-01, -2.194199985705948e-01, -1.177142881788977e-01, -7.227059818899998e-03, -7.679605369504008e-03, -7.573094679673105e-03, -8.112694336863190e-03, -4.210967706201410e-02, -4.446843630717658e-02, -4.344387295510431e-03, -4.271997037625364e-03, -6.447228364293013e-03, -3.668878881847077e-03, -6.447228364293013e-03, -3.668878881847076e-03, -6.305107470854513e+00, -6.303586221012702e+00, -6.306235204849267e+00, -6.304673543787821e+00, -6.305176791529177e+00, -6.303627216808517e+00, -6.306142943568491e+00, -6.304616439156121e+00, -6.305680639048738e+00, -6.304131368766811e+00, -6.305680639048738e+00, -6.304131368766811e+00, -2.414215478960198e+00, -2.414093360132342e+00, -2.431887781751752e+00, -2.431225276051761e+00, -2.399369784224707e+00, -2.403523932541934e+00, -2.414649480881146e+00, -2.419004718378817e+00, -2.435242594454213e+00, -2.424566714968678e+00, -2.435242594454213e+00, -2.424566714968678e+00, -7.267574880204217e-01, -7.248332213747906e-01, -7.882524290923936e-01, -7.886103189814972e-01, -6.592696223207070e-01, -6.835087863285224e-01, -6.865373628139471e-01, -7.093506481289924e-01, -7.558461857712248e-01, -7.181744669670159e-01, -7.558461857712248e-01, -7.181744669670159e-01, -1.124182098809249e-01, -1.134902468453112e-01, -2.140898947529939e-01, -2.151583334585927e-01, -1.016958029506970e-01, -1.071599792472244e-01, -2.368798545077078e+00, -2.367733270247573e+00, -1.286320778526759e-01, -1.362646036765636e-01, -1.286320778526759e-01, -1.362646036765636e-01, -3.259113932989013e-03, -3.387008992726560e-03, -4.180065950154290e-03, -4.243331412346143e-03, -3.125741213561989e-03, -3.310270288663791e-03, -7.006849041024560e-02, -7.049932072235865e-02, -3.192469324300858e-03, -4.384282968314198e-03, -3.192469324300858e-03, -4.384282968314198e-03, -7.279089803206023e-01, -7.307230976824097e-01, -7.237217078282467e-01, -7.265478294265157e-01, -7.251906503042225e-01, -7.280215114564266e-01, -7.264131434383619e-01, -7.292228432142571e-01, -7.258013760687598e-01, -7.286213804006390e-01, -7.258013760687598e-01, -7.286213804006390e-01, -7.083871266078934e-01, -7.107290500890958e-01, -6.078290046923920e-01, -6.104624835263638e-01, -6.364483771139924e-01, -6.392731204077526e-01, -6.651718312747635e-01, -6.675109616659123e-01, -6.505877837184476e-01, -6.530047074311458e-01, -6.505877837184476e-01, -6.530047074311458e-01, -8.258664044610742e-01, -8.272123314420071e-01, -2.703770362225442e-01, -2.719425675159601e-01, -3.240129889034816e-01, -3.272627195227082e-01, -4.289260855111925e-01, -4.312977977099012e-01, -3.741204153769928e-01, -3.739884351237447e-01, -3.741204153769927e-01, -3.739884351237447e-01, -5.588925636130903e-01, -5.627413750415682e-01, -4.132200764029112e-02, -4.160474335417746e-02, -5.558361705622617e-02, -5.744427236063411e-02, -4.115143841955537e-01, -4.177199361941831e-01, -8.699701818466567e-02, -9.185977616108999e-02, -8.699701818466564e-02, -9.185977616108998e-02, -1.033789391295344e-02, -1.071268812628038e-02, -1.124590921541077e-03, -1.127161251073799e-03, -2.288282249171651e-03, -2.433772890857885e-03, -8.335208233926457e-02, -8.471518243602655e-02, -3.023946470411428e-03, -4.018518505970859e-03, -3.023946470411432e-03, -4.018518505970863e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
