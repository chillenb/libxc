
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_rel_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.582738704936601e+01, -1.582741275103267e+01, -1.582753494525048e+01, -1.582715238736882e+01, -1.582735171545286e+01, -1.582735171545286e+01, -3.206418891138018e+00, -3.206425722541730e+00, -3.206661175196886e+00, -3.206852827475182e+00, -3.206503377873799e+00, -3.206503377873799e+00, -6.223204812804579e-01, -6.216346856470292e-01, -6.051319272693138e-01, -6.101525513085836e-01, -6.090848601817971e-01, -6.090848601817971e-01, -1.607263059938553e-01, -1.631604186867226e-01, -7.255940819306688e-01, -1.220211159110201e-01, -1.370196185800345e-01, -1.370196185800345e-01, -5.595146753471399e-03, -5.889123668952610e-03, -3.249088385924875e-02, -3.231372188439635e-03, -4.060466472079898e-03, -4.060466472079898e-03, -4.762494801081363e+00, -4.763343986417002e+00, -4.762537095366589e+00, -4.763286720787483e+00, -4.762923529210950e+00, -4.762923529210950e+00, -1.812474789610702e+00, -1.825567048643811e+00, -1.802916161960757e+00, -1.814486980160589e+00, -1.824333056893291e+00, -1.824333056893291e+00, -5.443977337585119e-01, -5.913879953806668e-01, -5.037457653994960e-01, -5.236425226196348e-01, -5.531713170387573e-01, -5.531713170387573e-01, -8.471776834031289e-02, -1.609703819436041e-01, -7.837464027726741e-02, -1.777954121949529e+00, -9.941896261940152e-02, -9.941896261940152e-02, -2.493218693961964e-03, -3.158952198252076e-03, -2.415486699965228e-03, -5.271346996425910e-02, -2.909912566397001e-03, -2.909912566397001e-03, -5.470400619936663e-01, -5.439032660900887e-01, -5.450070588477746e-01, -5.459162118200064e-01, -5.454611404965689e-01, -5.454611404965689e-01, -5.322169774911626e-01, -4.568911522404819e-01, -4.784320203523815e-01, -4.997964779257262e-01, -4.888852633432617e-01, -4.888852633432617e-01, -6.199791777759859e-01, -2.033741660517753e-01, -2.442390092866940e-01, -3.225968652491704e-01, -2.805477051968769e-01, -2.805477051968769e-01, -4.206408632822762e-01, -3.109790247678431e-02, -4.239696539135819e-02, -3.109896525419868e-01, -6.712093377043464e-02, -6.712093377043463e-02, -7.896470003282162e-03, -8.444081651593540e-04, -1.772450096105448e-03, -6.302944776450266e-02, -2.692579352153203e-03, -2.692579352153207e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_rel_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.889932637503912e+01, -1.889934634254006e+01, -1.889944127324661e+01, -1.889914406255780e+01, -1.889929892412614e+01, -1.889929892412614e+01, -4.261428770478443e+00, -4.261437790371644e+00, -4.261748671750411e+00, -4.262001720693279e+00, -4.261540323122937e+00, -4.261540323122937e+00, -8.296605280284302e-01, -8.287464645246962e-01, -8.067505259042971e-01, -8.134423808080009e-01, -8.120192871888520e-01, -8.120192871888520e-01, -2.143000170973812e-01, -2.175454211569568e-01, -9.673000756714571e-01, -1.626940667565206e-01, -1.826917565066194e-01, -1.826917565066194e-01, -7.460195598557131e-03, -7.852164807124551e-03, -4.332116423570692e-02, -4.308496237243399e-03, -5.413955268308716e-03, -5.413955268308716e-03, -6.304346938353856e+00, -6.305454471697343e+00, -6.304402100061943e+00, -6.305379784407093e+00, -6.304906099755643e+00, -6.304906099755643e+00, -2.414154421092181e+00, -2.431556574075450e+00, -2.401448656717172e+00, -2.416829063727468e+00, -2.429916393036170e+00, -2.429916393036170e+00, -7.257966302422150e-01, -7.884314146552929e-01, -6.716079269558745e-01, -6.981303927023123e-01, -7.374914482227565e-01, -7.374914482227565e-01, -1.129567719596673e-01, -2.146254438298692e-01, -1.044993204507077e-01, -2.368266027573701e+00, -1.325582087543888e-01, -1.325582087543888e-01, -3.324291585514692e-03, -4.211936251246282e-03, -3.220648927436631e-03, -7.028456579275570e-02, -3.879883411632686e-03, -3.879883411632686e-03, -7.293187538619796e-01, -7.251375224840435e-01, -7.266088383874628e-01, -7.278207052392649e-01, -7.272141123542728e-01, -7.272141123542728e-01, -7.095600209156098e-01, -6.091485905666170e-01, -6.378638762869042e-01, -6.663434494494276e-01, -6.517984862807812e-01, -6.517984862807812e-01, -8.265399159396887e-01, -2.711620615140820e-01, -3.256459619025135e-01, -4.301152112002526e-01, -3.740544368925340e-01, -3.740544368925340e-01, -5.608235730822430e-01, -4.146385748029640e-02, -5.652925554164163e-02, -4.146403791317743e-01, -8.949445278627295e-02, -8.949445278627294e-02, -1.052862646657222e-02, -1.125877553295097e-03, -2.363266792493324e-03, -8.403915970424369e-02, -3.590105794769651e-03, -3.590105794769653e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
