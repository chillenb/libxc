
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_2d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.479156288795642e+02, -1.479161674393787e+02, -1.479189667125310e+02, -1.479101396976451e+02, -1.479159095822430e+02, -1.479159095822430e+02, -9.716656588121541e+00, -9.716687176628014e+00, -9.718127962424816e+00, -9.718734828414213e+00, -9.716734408598974e+00, -9.716734408598974e+00, -8.154692472346874e-01, -8.142139521576293e-01, -7.819056032189136e-01, -7.911576392815520e-01, -8.150113329964543e-01, -8.150113329964543e-01, -1.166826504462135e-01, -1.190208474942106e-01, -1.069948777554670e+00, -7.202988794877421e-02, -1.173823944751780e-01, -1.173823944751780e-01, -1.540098385613145e-03, -1.651013316811105e-03, -1.352919951694218e-02, -5.117376673803843e-04, -1.625272837654689e-03, -1.625272837654689e-03, -1.779049940474914e+01, -1.779524571009566e+01, -1.779100015887733e+01, -1.779469045630941e+01, -1.779291173967754e+01, -1.779291173967754e+01, -4.095602247875251e+00, -4.138963411201875e+00, -4.078116793523742e+00, -4.111897740113936e+00, -4.147666572343169e+00, -4.147666572343169e+00, -6.624396295077154e-01, -7.499648756718673e-01, -6.123182409282727e-01, -6.522597182207044e-01, -7.009824167254159e-01, -7.009824167254159e-01, -4.536132939344978e-02, -1.179388498747240e-01, -4.449201978999805e-02, -3.978382849095868e+00, -5.640446084547632e-02, -5.640446084547632e-02, -4.848719062885904e-04, -5.923839077461768e-04, -3.843838485252918e-04, -2.226761590661485e-02, -5.152187759122110e-04, -5.152187759122110e-04, -6.943626355006900e-01, -6.888096468182692e-01, -6.907985715437885e-01, -6.923343170901828e-01, -6.915655331821198e-01, -6.915655331821198e-01, -6.612050940848051e-01, -5.342408586441948e-01, -5.703320880974075e-01, -6.044976178659089e-01, -5.870058385829715e-01, -5.870058385829715e-01, -8.051799398311847e-01, -1.663588581564870e-01, -2.153208886995591e-01, -3.112486689879407e-01, -2.588950492729334e-01, -2.588950492729333e-01, -4.576164630061710e-01, -1.205904294796172e-02, -1.899454078875092e-02, -2.858542198270414e-01, -3.317002287895024e-02, -3.317002287895025e-02, -1.954049218188272e-03, -8.486181084133059e-05, -2.221865642700739e-04, -3.090885197844285e-02, -4.036627163968528e-04, -4.036627163968518e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_2d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.218734433193464e+02, -2.218742511590681e+02, -2.218784500687965e+02, -2.218652095464676e+02, -2.218738643733646e+02, -2.218738643733646e+02, -1.457498488218231e+01, -1.457503076494202e+01, -1.457719194363722e+01, -1.457810224262132e+01, -1.457510161289846e+01, -1.457510161289846e+01, -1.223203870852031e+00, -1.221320928236444e+00, -1.172858404828370e+00, -1.186736458922328e+00, -1.222516999494682e+00, -1.222516999494682e+00, -1.750239756693202e-01, -1.785312712413160e-01, -1.604923166332004e+00, -1.080448319231613e-01, -1.760735917127670e-01, -1.760735917127670e-01, -2.310147578419718e-03, -2.476519975216658e-03, -2.029379927541326e-02, -7.676065010705765e-04, -2.437909256482033e-03, -2.437909256482033e-03, -2.668574910712372e+01, -2.669286856514350e+01, -2.668650023831599e+01, -2.669203568446412e+01, -2.668936760951631e+01, -2.668936760951631e+01, -6.143403371812876e+00, -6.208445116802813e+00, -6.117175190285614e+00, -6.167846610170905e+00, -6.221499858514754e+00, -6.221499858514754e+00, -9.936594442615732e-01, -1.124947313507801e+00, -9.184773613924091e-01, -9.783895773310566e-01, -1.051473625088124e+00, -1.051473625088124e+00, -6.804199409017467e-02, -1.769082748120860e-01, -6.673802968499708e-02, -5.967574273643803e+00, -8.460669126821449e-02, -8.460669126821449e-02, -7.273078594328856e-04, -8.885758616192651e-04, -5.765757727879378e-04, -3.340142385992228e-02, -7.728281638683165e-04, -7.728281638683165e-04, -1.041543953251035e+00, -1.033214470227404e+00, -1.036197857315683e+00, -1.038501475635274e+00, -1.037348299773180e+00, -1.037348299773180e+00, -9.918076411272077e-01, -8.013612879662922e-01, -8.554981321461114e-01, -9.067464267988635e-01, -8.805087578744573e-01, -8.805087578744573e-01, -1.207769909746777e+00, -2.495382872347305e-01, -3.229813330493386e-01, -4.668730034819111e-01, -3.883425739094001e-01, -3.883425739094000e-01, -6.864246945092565e-01, -1.808856442194258e-02, -2.849181118312639e-02, -4.287813297405621e-01, -4.975503431842537e-02, -4.975503431842537e-02, -2.931073827282409e-03, -1.272927162619959e-04, -3.332798464051109e-04, -4.636327796766428e-02, -6.054940745952792e-04, -6.054940745952778e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
