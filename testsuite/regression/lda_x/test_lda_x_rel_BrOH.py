
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_rel_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.582715050459511e+01, -1.582717287474152e+01, -1.582728914618776e+01, -1.582692249385577e+01, -1.582716216415040e+01, -1.582716216415040e+01, -3.206272787448291e+00, -3.206279429594443e+00, -3.206592280747458e+00, -3.206724050187703e+00, -3.206289685773611e+00, -3.206289685773611e+00, -6.184445175047563e-01, -6.178099870332175e-01, -6.013641616630216e-01, -6.060965280115810e-01, -6.182130874428120e-01, -6.182130874428120e-01, -1.692241346555319e-01, -1.714772839912673e-01, -7.411267913866196e-01, -1.226884310567910e-01, -1.698999923027482e-01, -1.698999923027482e-01, -9.451443552645232e-03, -9.899947305368308e-03, -4.023896685722191e-02, -4.534166284277134e-03, -9.796779896401202e-03, -9.796779896401202e-03, -4.760477533172392e+00, -4.761299860400299e+00, -4.760564296024286e+00, -4.761203663627877e+00, -4.760895496089862e+00, -4.760895496089862e+00, -1.810456502168169e+00, -1.823159794413514e+00, -1.805320896505872e+00, -1.815235870061108e+00, -1.825704024650078e+00, -1.825704024650078e+00, -5.384577173279160e-01, -5.848806251298688e-01, -5.109518936525896e-01, -5.329290296044181e-01, -5.591384274462443e-01, -5.591384274462443e-01, -9.014068273390238e-02, -1.704364941958542e-01, -8.898534004578458e-02, -1.775883156437005e+00, -1.042329960189385e-01, -1.042329960189385e-01, -4.374051256248470e-03, -4.998826001027461e-03, -3.746645549195156e-03, -5.609370874494583e-02, -4.554705562285721e-03, -4.554705562285721e-03, -5.556140463635976e-01, -5.526489611210019e-01, -5.537118861839718e-01, -5.545319229286764e-01, -5.541214940914732e-01, -5.541214940914732e-01, -5.377887638081063e-01, -4.665501803643327e-01, -4.873266208392761e-01, -5.065933421130906e-01, -4.967761018312696e-01, -4.967761018312696e-01, -6.132337572353401e-01, -2.143634383454180e-01, -2.545886858812192e-01, -3.254684293103534e-01, -2.878674781372893e-01, -2.878674781372893e-01, -4.208096652058279e-01, -3.726839680415724e-02, -5.045269493702302e-02, -3.075176253368720e-01, -7.316357606729207e-02, -7.316357606729207e-02, -1.107701705638060e-02, -1.368592181738749e-03, -2.599826617187466e-03, -6.979963053977700e-02, -3.870896983490586e-03, -3.870896983490592e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_rel_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_rel", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.889914259976791e+01, -1.889915997984785e+01, -1.889925031359956e+01, -1.889896544655769e+01, -1.889915165845775e+01, -1.889915165845775e+01, -4.261235861325541e+00, -4.261244631339117e+00, -4.261657706582340e+00, -4.261831689058964e+00, -4.261258173170892e+00, -4.261258173170892e+00, -8.244944356519248e-01, -8.236486972004549e-01, -8.017285473453891e-01, -8.080362192817414e-01, -8.241859725199522e-01, -8.241859725199522e-01, -2.256301671071167e-01, -2.286342847610358e-01, -9.879999404968164e-01, -1.635838078382484e-01, -2.265312864278200e-01, -2.265312864278200e-01, -1.260192438624891e-02, -1.319992933756308e-02, -5.365192875345719e-02, -6.045555006992204e-03, -1.306237280474401e-02, -1.306237280474401e-02, -6.301715919787921e+00, -6.302788444994428e+00, -6.301829081158196e+00, -6.302662980218124e+00, -6.302261051487121e+00, -6.302261051487121e+00, -2.411471655829307e+00, -2.428356924862960e+00, -2.404645178732238e+00, -2.417824497970132e+00, -2.431738637623991e+00, -2.431738637623991e+00, -7.178787784274390e-01, -7.797577264008632e-01, -6.812137863819537e-01, -7.105091720407826e-01, -7.454452951893868e-01, -7.454452951893868e-01, -1.201872728266431e-01, -2.272466029303961e-01, -1.186468274549851e-01, -2.365512918686341e+00, -1.389768577582086e-01, -1.389768577582086e-01, -5.832068306911644e-03, -6.665101282830655e-03, -4.995527377085700e-03, -7.479153836585709e-02, -6.072940710475652e-03, -6.072940710475652e-03, -7.407474849830630e-01, -7.367951726816294e-01, -7.382120007316951e-01, -7.393050692551402e-01, -7.387579879801662e-01, -7.387579879801662e-01, -7.169870818152477e-01, -6.220247286534144e-01, -6.497207590299514e-01, -6.754037903089050e-01, -6.623172158706631e-01, -6.623172158706629e-01, -8.175492184389127e-01, -2.858138271429964e-01, -3.394447284437621e-01, -4.339435876154555e-01, -3.838133974589266e-01, -3.838133974589265e-01, -5.610486050815896e-01, -4.969117424335517e-02, -6.727020658508405e-02, -4.100114232536853e-01, -9.755127212219575e-02, -9.755127212219575e-02, -1.476935551076489e-02, -1.824789574589963e-03, -3.466435482288439e-03, -9.306603283625575e-02, -5.161195953904621e-03, -5.161195953904626e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
