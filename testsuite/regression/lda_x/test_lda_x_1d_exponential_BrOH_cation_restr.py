
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_1d_exponential_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_exponential", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.420741220073436e-01, -4.420741138290819e-01, -4.420740749457232e-01, -4.420741966726607e-01, -4.420741332504404e-01, -4.420741332504404e-01, -4.389496398956343e-01, -4.389496629254040e-01, -4.389504565697217e-01, -4.389511024250523e-01, -4.389499247020727e-01, -4.389499247020727e-01, -2.771329067663295e-01, -2.768430417153743e-01, -2.697077061470352e-01, -2.719111619160671e-01, -2.714449746917225e-01, -2.714449746917225e-01, -2.392401996870919e-02, -2.478476986128798e-02, -3.150819256865544e-01, -1.233065267028895e-02, -1.634953193421207e-02, -1.634953193421207e-02, -3.198979689167668e-06, -3.691231346652983e-06, -4.017675509737464e-04, -6.851936304038029e-07, -1.302572748366177e-06, -1.302572748366177e-06, -4.416537761870140e-01, -4.416544802515573e-01, -4.416538112641232e-01, -4.416544327864628e-01, -4.416541317043710e-01, -4.416541317043710e-01, -4.256274644363736e-01, -4.259302454644919e-01, -4.254018384046177e-01, -4.256744659102301e-01, -4.259020109353505e-01, -4.259020109353505e-01, -2.407562777456782e-01, -2.635282993517274e-01, -2.190367035733667e-01, -2.298944964893993e-01, -2.452011074151776e-01, -2.452011074151776e-01, -4.952599440501263e-03, -2.400964389308250e-02, -4.060849589546271e-03, -4.247937792738040e-01, -7.418773683865532e-03, -7.418773683865532e-03, -3.296915313885438e-07, -6.428100921958802e-07, -3.014682761998653e-07, -1.451841609028225e-03, -5.099843139453868e-07, -5.099843139453868e-07, -2.421041755346556e-01, -2.405031578017611e-01, -2.410678108884858e-01, -2.415318525198181e-01, -2.412996968627813e-01, -2.412996968627813e-01, -2.344403061416525e-01, -1.918923203181514e-01, -2.046291133812400e-01, -2.168315143436754e-01, -2.106559579744511e-01, -2.106559579744511e-01, -2.761411324257920e-01, -4.111679678079313e-02, -6.135405661901899e-02, -1.073599321848091e-01, -8.176446401817392e-02, -8.176446401817392e-02, -1.696391500906763e-01, -3.571831209822663e-04, -8.171669060578718e-04, -1.001405970439591e-01, -2.725243421741259e-03, -2.725243421741270e-03, -8.360804622741769e-06, -1.523524060531172e-08, -1.255279997629440e-07, -2.315273080517387e-03, -4.096803139626297e-07, -4.096803139626534e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_1d_exponential_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_exponential", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.421037400829466e-01, -4.421037316788068e-01, -4.421036917215671e-01, -4.421038168106399e-01, -4.421037516365761e-01, -4.421037516365761e-01, -4.425062625411730e-01, -4.425062664728627e-01, -4.425064019628031e-01, -4.425065122185878e-01, -4.425063111636106e-01, -4.425063111636106e-01, -3.646895047862139e-01, -3.644626160404358e-01, -3.587709984821479e-01, -3.605504953306874e-01, -3.601756377026755e-01, -3.601756377026755e-01, -4.270131817659797e-02, -4.418598794655400e-02, -3.915209224090134e-01, -2.240706821460128e-02, -2.950801607741246e-02, -2.950801607741245e-02, -6.180564817662828e-06, -7.128969528460338e-06, -7.609655040511128e-04, -1.328510299655307e-06, -2.522056789477240e-06, -2.522056789477240e-06, -4.429325441878793e-01, -4.429326437941072e-01, -4.429325491505320e-01, -4.429326370793149e-01, -4.429325944850090e-01, -4.429325944850090e-01, -4.397072763950852e-01, -4.397803127047888e-01, -4.396526044512843e-01, -4.397186389432432e-01, -4.397735181237770e-01, -4.397735181237770e-01, -3.335640504594925e-01, -3.536759893423160e-01, -3.124216714212966e-01, -3.232295998275219e-01, -3.376550336184155e-01, -3.376550336184155e-01, -9.150583247610986e-03, -4.284913587977476e-02, -7.524203880966339e-03, -4.395042226122045e-01, -1.361803386953085e-02, -1.361803386953085e-02, -6.401479236949883e-07, -1.246496173355183e-06, -5.854450079289840e-07, -2.721888806438797e-03, -9.893874626691739e-07, -9.893874626691739e-07, -3.348131202542096e-01, -3.333286665532568e-01, -3.338533974556619e-01, -3.342836612243802e-01, -3.340685136099810e-01, -3.340685136099810e-01, -3.276129286504620e-01, -2.833339336451574e-01, -2.973481387558338e-01, -3.101685225031586e-01, -3.037547022838031e-01, -3.037547022838031e-01, -3.639118068870254e-01, -7.183804713617280e-02, -1.048168595895636e-01, -1.746526758195593e-01, -1.366836605020961e-01, -1.366836605020961e-01, -2.573235137654530e-01, -6.770405205786727e-04, -1.539749293816367e-03, -1.641708867694085e-01, -5.075179259905794e-03, -5.075179259905805e-03, -1.611050792438329e-05, -2.972322165829981e-08, -2.441450733503033e-07, -4.319771989915790e-03, -7.951325065070766e-07, -7.951325065070990e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
