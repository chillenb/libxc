
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_erf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_erf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.965351519761428e+01, -1.965357047790993e+01, -1.965383330209267e+01, -1.965301048881876e+01, -1.965343920190682e+01, -1.965343920190682e+01, -3.061155563021196e+00, -3.061162521920988e+00, -3.061402366406219e+00, -3.061597593453934e+00, -3.061241850886318e+00, -3.061241850886318e+00, -4.696266184585680e-01, -4.689607117437303e-01, -4.528973815849584e-01, -4.577710319825364e-01, -4.580098826919098e-01, -4.580098826919098e-01, -5.117366893947936e-02, -5.287100800458958e-02, -5.710555981357398e-01, -2.735001813627918e-02, -4.815377510230598e-02, -4.815377510230594e-02, -3.822040740255083e-06, -4.466534031909504e-06, -7.253225254274276e-04, -7.311326170432151e-07, -2.136749602958893e-06, -2.136749602958893e-06, -4.664723094144001e+00, -4.665609778176612e+00, -4.664767260577759e+00, -4.665549977335827e+00, -4.665170753829771e+00, -4.665170753829771e+00, -1.652588289710011e+00, -1.665721541692137e+00, -1.643003587468794e+00, -1.654609595013901e+00, -1.664501129724190e+00, -1.664501129724190e+00, -3.939753984763820e-01, -4.395184810229809e-01, -3.551143357942444e-01, -3.742150095802720e-01, -4.031666191132273e-01, -4.031666191132274e-01, -1.087505265956766e-02, -5.124788216343418e-02, -8.876751345580856e-03, -1.617968366388143e+00, -1.657493541700588e-02, -1.657493541700588e-02, -3.367722106908431e-07, -6.829909350658893e-07, -3.074813132969107e-07, -2.933954722921311e-03, -6.382579394897339e-07, -6.382579394897344e-07, -3.965318489582975e-01, -3.934996739131156e-01, -3.945665383721302e-01, -3.954453171076214e-01, -3.950054357061068e-01, -3.950054357061068e-01, -3.822127358592426e-01, -3.099645330208926e-01, -3.305272898801082e-01, -3.510026829149102e-01, -3.405353166603016e-01, -3.405353166603016e-01, -4.673410710113437e-01, -8.248207299199288e-02, -1.157999841984212e-01, -1.846417281860083e-01, -1.470754983578929e-01, -1.470754983578929e-01, -2.755901263293308e-01, -6.335825795233164e-04, -1.571782219794685e-03, -1.741869268147991e-01, -5.817601146668315e-03, -5.817601146668306e-03, -1.067658609954579e-05, -1.304203946229681e-08, -1.216326451239069e-07, -4.859758983355554e-03, -4.912161203935293e-07, -4.912161203935280e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_erf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_erf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.626077788281337e+01, -2.626074384948242e+01, -2.626086326872539e+01, -2.626080587949535e+01, -2.626115328643074e+01, -2.626121673538500e+01, -2.626018856823983e+01, -2.625998725412976e+01, -2.626082795782736e+01, -2.626049111022887e+01, -2.626082795782736e+01, -2.626049111022887e+01, -4.135870537224118e+00, -4.135811855608909e+00, -4.135883983536092e+00, -4.135816975137263e+00, -4.136126154413489e+00, -4.136214703354621e+00, -4.136400676596725e+00, -4.136461044437987e+00, -4.135151359676783e+00, -4.136760345626531e+00, -4.135151359676783e+00, -4.136760345626531e+00, -6.700681073390341e-01, -6.733079488307183e-01, -6.687961569372124e-01, -6.727708379880778e-01, -6.518101255931770e-01, -6.463095455765155e-01, -6.548057196250333e-01, -6.565423777663156e-01, -6.796023310433938e-01, -6.272511115129167e-01, -6.796023310433938e-01, -6.272511115129167e-01, -8.424986186613036e-02, -9.080993179031391e-02, -8.631496742207527e-02, -9.394214575035259e-02, -7.918450496691342e-01, -8.235204901821597e-01, -4.836170832559564e-02, -4.986541970962893e-02, -9.170928137832411e-02, -2.273201039748889e-02, -9.170928137832404e-02, -2.273201039748888e-02, -6.891181589082972e-06, -8.267253626398718e-06, -7.928301800031857e-06, -9.744842349056828e-06, -1.313461653692763e-03, -1.540080990971951e-03, -1.498000153100505e-06, -1.424377224412590e-06, -4.893610258581378e-06, -9.023560505188913e-07, -4.893610258581378e-06, -9.023560505188914e-07, -6.275405778790735e+00, -6.273862712220072e+00, -6.276608768617250e+00, -6.275024702786345e+00, -6.275479035645311e+00, -6.273907237560121e+00, -6.276511198857352e+00, -6.274962794619093e+00, -6.276016992484169e+00, -6.274445499370977e+00, -6.276016992484169e+00, -6.274445499370977e+00, -2.256169345908139e+00, -2.256047166402148e+00, -2.273977596667602e+00, -2.273314727171731e+00, -2.241225263519527e+00, -2.245381316770991e+00, -2.256622916271133e+00, -2.260980352818218e+00, -2.277322251467923e+00, -2.266640562318206e+00, -2.277322251467923e+00, -2.266640562318206e+00, -5.702457694483698e-01, -5.683544455742159e-01, -6.308180155366770e-01, -6.311707356543961e-01, -5.039986574131848e-01, -5.277512932076555e-01, -5.307365084366977e-01, -5.531266630327121e-01, -5.988649266974796e-01, -5.618186242861557e-01, -5.988649266974796e-01, -5.618186242861559e-01, -2.022882625359722e-02, -2.072376549419162e-02, -8.740895286044975e-02, -8.826725570090795e-02, -1.561116186165163e-02, -1.788794607546043e-02, -2.210407652791544e+00, -2.209341996812327e+00, -2.832822058234995e-02, -3.257208794871001e-02, -2.832822058234995e-02, -3.257208794871001e-02, -6.325625212483101e-07, -7.099794561647054e-07, -1.334409090526102e-06, -1.395903424999752e-06, -5.580485636162625e-07, -6.628144915226221e-07, -5.670474008783085e-03, -5.768666803796186e-03, -5.945510153904025e-07, -1.539638148941825e-06, -5.945510153904025e-07, -1.539638148941827e-06, -5.713798833045812e-01, -5.741462981171909e-01, -5.672616237894230e-01, -5.700392729519392e-01, -5.687062587087494e-01, -5.714887668748784e-01, -5.699085968743409e-01, -5.726704683366169e-01, -5.693069061497984e-01, -5.720788248595635e-01, -5.693069061497984e-01, -5.720788248595635e-01, -5.521872755112746e-01, -5.544872102442668e-01, -4.536902971744191e-01, -4.562594163047091e-01, -4.816525002413073e-01, -4.844143544889201e-01, -5.097762491738225e-01, -5.120677183831077e-01, -4.954896159669572e-01, -4.978550370355262e-01, -4.954896159669572e-01, -4.978550370355262e-01, -6.679440311018411e-01, -6.692723236746417e-01, -1.348553545822317e-01, -1.362268383477362e-01, -1.829162680654800e-01, -1.858866752978097e-01, -2.809687486659460e-01, -2.832237215667406e-01, -2.292635172008401e-01, -2.291401312885092e-01, -2.292635172008401e-01, -2.291401312885092e-01, -4.060415433145623e-01, -4.097792118533993e-01, -1.242863242043382e-03, -1.267916930884032e-03, -2.938228656831198e-03, -3.229152210487876e-03, -2.644521757142841e-01, -2.703289464792932e-01, -1.029851274295175e-02, -1.192330504726528e-02, -1.029851274295172e-02, -1.192330504726528e-02, -2.014583349746465e-05, -2.241348580096910e-05, -2.599427205140653e-08, -2.617291147233301e-08, -2.189701373507505e-07, -2.634448543845215e-07, -9.167334163190030e-03, -9.581653224804596e-03, -5.052905764227256e-07, -1.185632558453567e-06, -5.052905764227243e-07, -1.185632558453564e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
