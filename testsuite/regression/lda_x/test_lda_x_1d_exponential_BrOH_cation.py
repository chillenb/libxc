
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_x_1d_exponential_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_exponential", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.420741220073399e-01, -4.420741138290711e-01, -4.420740749457098e-01, -4.420741966725291e-01, -4.420741332500725e-01, -4.420741332500725e-01, -4.389496398957615e-01, -4.389496629255699e-01, -4.389504565700112e-01, -4.389511024251869e-01, -4.389499247976634e-01, -4.389499247976634e-01, -2.771341124761986e-01, -2.768448645248039e-01, -2.697115940290099e-01, -2.719115369712977e-01, -2.717880490480978e-01, -2.717880490480978e-01, -2.397702198608449e-02, -2.485545198001213e-02, -3.151414138151019e-01, -1.233443458898963e-02, -2.264155277703187e-02, -2.264155277703187e-02, -3.222694292961082e-06, -3.726276248648959e-06, -4.040161472081041e-04, -6.855888559471583e-07, -1.863160539951884e-06, -1.863160539951885e-06, -4.416537761986948e-01, -4.416544802638560e-01, -4.416538112762429e-01, -4.416544327982150e-01, -4.416541317164810e-01, -4.416541317164810e-01, -4.256274644461551e-01, -4.259302457421991e-01, -4.254018500280755e-01, -4.256744782832905e-01, -4.259020832936524e-01, -4.259020832936524e-01, -2.407569597182246e-01, -2.635283168385962e-01, -2.191758354876408e-01, -2.300035927774304e-01, -2.454482504035749e-01, -2.454482504035750e-01, -4.953373702454401e-03, -2.401055052832576e-02, -4.080275327268390e-03, -4.247937800934458e-01, -7.460359366756390e-03, -7.460359366756390e-03, -3.306922169220502e-07, -6.431065595835924e-07, -3.034957312624923e-07, -1.451941294173168e-03, -6.011317667666847e-07, -6.011317667666788e-07, -2.421056099884511e-01, -2.405046334044179e-01, -2.410692811877052e-01, -2.415332926443416e-01, -2.413011517371428e-01, -2.413011517371428e-01, -2.344413964617587e-01, -1.918944839166801e-01, -2.046313121409716e-01, -2.168328419667166e-01, -2.106574712406852e-01, -2.106574712406852e-01, -2.761413382102265e-01, -4.111871372745667e-02, -6.136182486737612e-02, -1.073632451262468e-01, -8.176447576300092e-02, -8.176447576300087e-02, -1.696447794638890e-01, -3.572146299964769e-04, -8.188115731585268e-04, -1.001642192010826e-01, -2.739573234936401e-03, -2.739573234936401e-03, -8.382007257484382e-06, -1.523540612041315e-08, -1.265069966951530e-07, -2.316367403826286e-03, -4.701922813736804e-07, -4.701922813736630e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_x_1d_exponential_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_x_1d_exponential", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.421037381427221e-01, -4.421037420231710e-01, -4.421037284070549e-01, -4.421037349505587e-01, -4.421036953388794e-01, -4.421036881042541e-01, -4.421038053344038e-01, -4.421038282868748e-01, -4.421037324331969e-01, -4.421037708399527e-01, -4.421037324331969e-01, -4.421037708399527e-01, -4.425062749679021e-01, -4.425062501139354e-01, -4.425062806627521e-01, -4.425062522823102e-01, -4.425063832159901e-01, -4.425064207084582e-01, -4.425064994412541e-01, -4.425065249953840e-01, -4.425059702743794e-01, -4.425066516704837e-01, -4.425059702743794e-01, -4.425066516704837e-01, -3.642811116617066e-01, -3.650938779139817e-01, -3.639593522501491e-01, -3.649598074244819e-01, -3.595146071188279e-01, -3.580147117951323e-01, -3.603187917389876e-01, -3.607809676641497e-01, -3.666453452721140e-01, -3.525781849577844e-01, -3.666453452721140e-01, -3.525781849577844e-01, -4.083052249143326e-02, -4.453861965794282e-02, -4.198901040734702e-02, -4.633767092950176e-02, -3.890088437567013e-01, -3.938153773380933e-01, -2.203815634609236e-02, -2.277407729822307e-02, -4.505330924104602e-02, -1.014517237196087e-02, -4.505330924104600e-02, -1.014517237196089e-02, -5.656694894559863e-06, -6.700840948613615e-06, -6.444939205063675e-06, -7.807624548361595e-06, -7.055461107571831e-04, -8.158177596349211e-04, -1.359851354449235e-06, -1.297116053523212e-06, -4.112161692853592e-06, -8.452616425272863e-07, -4.112161692853593e-06, -8.452616425272865e-07, -4.429326091776794e-01, -4.429324791513535e-01, -4.429327104610772e-01, -4.429325770779408e-01, -4.429326153475622e-01, -4.429324829050225e-01, -4.429327022492004e-01, -4.429325718624210e-01, -4.429326606470878e-01, -4.429325282744903e-01, -4.429326606470878e-01, -4.429325282744903e-01, -4.397075344820819e-01, -4.397070182689766e-01, -4.397816725675416e-01, -4.397789517316955e-01, -4.396436129521446e-01, -4.396615494783985e-01, -4.397094499218542e-01, -4.397277784947273e-01, -4.397953560745513e-01, -4.397513908608681e-01, -4.397953560745513e-01, -4.397513908608681e-01, -3.339060473004650e-01, -3.332200403999445e-01, -3.536245910111087e-01, -3.537273317551293e-01, -3.070868934382614e-01, -3.173799328711985e-01, -3.186188408898469e-01, -3.275315218608911e-01, -3.437525343500572e-01, -3.308147324929847e-01, -3.437525343500573e-01, -3.308147324929849e-01, -9.041650641615958e-03, -9.259210056818583e-03, -4.260601398529786e-02, -4.309168429853567e-02, -7.024577800667189e-03, -8.016488702842318e-03, -4.395066529580169e-01, -4.395017889895061e-01, -1.264450153502144e-02, -1.457340812862070e-02, -1.264450153502144e-02, -1.457340812862070e-02, -6.053816841555205e-07, -6.747861298952227e-07, -1.220157104732820e-06, -1.272795524524215e-06, -5.380684082471595e-07, -6.325636013445372e-07, -2.700189879594576e-03, -2.743556995580269e-03, -5.711100494604435e-07, -1.395239848230910e-06, -5.711100494604226e-07, -1.395239848230910e-06, -3.343152595609019e-01, -3.353067248051686e-01, -3.328216150452440e-01, -3.338313661563239e-01, -3.333479867349516e-01, -3.343544626480828e-01, -3.337840785451711e-01, -3.347789801102325e-01, -3.335660697334952e-01, -3.345666537861637e-01, -3.335660697334952e-01, -3.345666537861637e-01, -3.271708516904023e-01, -3.280518643203543e-01, -2.826640154573328e-01, -2.839986845971068e-01, -2.966832798001240e-01, -2.980074194014150e-01, -3.096624361172781e-01, -3.106710520880610e-01, -3.032085501567734e-01, -3.042969088666050e-01, -3.032085501567734e-01, -3.042969088666050e-01, -3.637429465723560e-01, -3.640799830743979e-01, -7.139456108962028e-02, -7.228000016594767e-02, -1.037750244364233e-01, -1.058509921431980e-01, -1.738491600829553e-01, -1.754513983853627e-01, -1.367280370565659e-01, -1.366392699863938e-01, -1.367280370565658e-01, -1.366392699863938e-01, -2.562237194810833e-01, -2.584113166902807e-01, -6.708753259077332e-04, -6.831979055657468e-04, -1.472863844400662e-03, -1.606173850279825e-03, -1.620498376605827e-01, -1.662595093396916e-01, -4.720586904665374e-03, -5.424792398740048e-03, -4.720586904665377e-03, -5.424792398740049e-03, -1.531417265229877e-05, -1.690336049407048e-05, -2.962654575058052e-08, -2.981988004079012e-08, -2.228487959778729e-07, -2.653236879687008e-07, -4.229619642295311e-03, -4.409556479691020e-03, -4.900688267121605e-07, -1.092122496747357e-06, -4.900688267121677e-07, -1.092122496747328e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
