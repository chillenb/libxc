
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_cam_s12h_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.564187131904215e+01, -1.564188747217924e+01, -1.564201698992004e+01, -1.564177550916397e+01, -1.564189382499840e+01, -1.564189382499840e+01, -2.580900628864536e+00, -2.580860489132488e+00, -2.579997310303593e+00, -2.581995159860117e+00, -2.580915716941143e+00, -2.580915716941143e+00, -5.025956281132085e-01, -5.027684866945746e-01, -5.080621774538201e-01, -5.115435118997540e-01, -5.101875130747148e-01, -5.101875130747148e-01, -1.471169109946367e-01, -1.480492959939648e-01, -5.825677647208740e-01, -1.215334329250093e-01, -1.433797718338523e-01, -1.433797718338522e-01, -6.310887962289829e-03, -6.645554855865115e-03, -3.629747684985296e-02, -3.639499446450156e-03, -5.079478279066303e-03, -5.079478279066303e-03, -3.733089017470769e+00, -3.732727400884491e+00, -3.733079791321101e+00, -3.732760298617421e+00, -3.732900502610586e+00, -3.732900502610586e+00, -1.597583373510318e+00, -1.604267758684200e+00, -1.600596885974862e+00, -1.606562852570554e+00, -1.599743470610050e+00, -1.599743470610050e+00, -4.087375648222977e-01, -4.285218792299116e-01, -3.808131971532015e-01, -3.783533187898013e-01, -4.130162195448154e-01, -4.130162195448154e-01, -9.007405437893527e-02, -1.565298422601059e-01, -8.393943073998550e-02, -1.338635103425215e+00, -1.021607658602582e-01, -1.021607658602582e-01, -2.809898113091143e-03, -3.557814529491856e-03, -2.724446132241662e-03, -5.775286367779055e-02, -3.422299068286166e-03, -3.422299068286168e-03, -3.939500395675199e-01, -3.923566919210538e-01, -3.927971388480987e-01, -3.932622186759720e-01, -3.930182241421770e-01, -3.930182241421770e-01, -3.826730827756586e-01, -3.616644222436518e-01, -3.629253136001325e-01, -3.655655128041576e-01, -3.635505595887596e-01, -3.635505595887596e-01, -4.505480190608752e-01, -1.898687578068652e-01, -2.164384265152521e-01, -2.550581783175559e-01, -2.349391526291662e-01, -2.349391526291662e-01, -3.324765779517626e-01, -3.473578489853908e-02, -4.703530249771013e-02, -2.357273701757920e-01, -7.206464462833737e-02, -7.206464462833739e-02, -8.893361663783095e-03, -9.510187868278625e-04, -1.999917564600589e-03, -6.800992793913882e-02, -3.142849218762727e-03, -3.142849218762725e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_cam_s12h_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.839044167423986e+01, -1.839042455467020e+01, -1.839058382212425e+01, -1.839052777196633e+01, -1.839093979018998e+01, -1.839106551233011e+01, -1.838933706161506e+01, -1.838902190832688e+01, -1.839053144288394e+01, -1.838976609260383e+01, -1.839053144288394e+01, -1.838976609260383e+01, -2.853525299286047e+00, -2.853919257074360e+00, -2.853588480243866e+00, -2.854004606149951e+00, -2.855350060386975e+00, -2.855830984380245e+00, -2.852769035928899e+00, -2.853283261836180e+00, -2.852874108022232e+00, -2.854887307216294e+00, -2.852874108022232e+00, -2.854887307216294e+00, -5.144435104510537e-01, -5.169509721335614e-01, -5.135556944278342e-01, -5.165371660556417e-01, -5.047176658403619e-01, -5.031320108706373e-01, -5.076029747598750e-01, -5.081000463473981e-01, -5.223308508622918e-01, -5.063853414404209e-01, -5.223308508622918e-01, -5.063853414404209e-01, -1.435528456413171e-01, -1.460605201025651e-01, -1.434605201852003e-01, -1.464985221662981e-01, -5.938273917736144e-01, -6.196815431463101e-01, -1.294252882097524e-01, -1.307132387454355e-01, -1.493368496489409e-01, -1.072486061239444e-01, -1.493368496489408e-01, -1.072486061239444e-01, -8.130860031494307e-03, -8.638847680223768e-03, -8.518989022787036e-03, -9.124376026485572e-03, -4.611631896871879e-02, -4.853659902465169e-02, -4.891148126894707e-03, -4.809731108715784e-03, -7.255111723836099e-03, -4.130312157667441e-03, -7.255111723836100e-03, -4.130312157667442e-03, -4.636472878852238e+00, -4.635198770985356e+00, -4.641210629736294e+00, -4.639776895351313e+00, -4.636723883941587e+00, -4.635347327703641e+00, -4.640789497484701e+00, -4.639506605262886e+00, -4.638910696544566e+00, -4.637501136929415e+00, -4.638910696544566e+00, -4.637501136929415e+00, -1.552915777170833e+00, -1.552842442705747e+00, -1.562317509212687e+00, -1.561937100549898e+00, -1.549596394605173e+00, -1.550316147441508e+00, -1.557374220670441e+00, -1.558344043173757e+00, -1.561543206645649e+00, -1.558000356356958e+00, -1.561543206645649e+00, -1.558000356356958e+00, -4.735565383310069e-01, -4.724170387114660e-01, -5.712081420789303e-01, -5.718530638688539e-01, -4.190209031029130e-01, -4.395830040735477e-01, -4.900307396384312e-01, -5.064317187932432e-01, -5.018251720210032e-01, -4.730910165743799e-01, -5.018251720210032e-01, -4.730910165743800e-01, -1.067735853955261e-01, -1.072608233397934e-01, -1.619780467996338e-01, -1.624606521900094e-01, -9.880014117871599e-02, -1.026332793093207e-01, -1.775742761717639e+00, -1.774989447578306e+00, -1.143452965428502e-01, -1.144185335777915e-01, -1.143452965428502e-01, -1.144185335777915e-01, -3.669739752770368e-03, -3.813746193560413e-03, -4.706109291148079e-03, -4.777356600695613e-03, -3.518621324625932e-03, -3.725989656250870e-03, -7.250081453454628e-02, -7.299108994827599e-02, -3.594236024397247e-03, -4.934412310535510e-03, -3.594236024397248e-03, -4.934412310535511e-03, -5.303783286606644e-01, -5.325445896944070e-01, -5.231257204922076e-01, -5.254646118576396e-01, -5.262861027710926e-01, -5.285636517108563e-01, -5.283954985088851e-01, -5.305913624705757e-01, -5.273992925557162e-01, -5.296317686558528e-01, -5.273992925557162e-01, -5.296317686558528e-01, -5.158236072467153e-01, -5.176065294452572e-01, -3.731302291247642e-01, -3.749252187682952e-01, -4.021179051973343e-01, -4.047503135210437e-01, -4.519920392494481e-01, -4.540982085513557e-01, -4.246393846773595e-01, -4.267181890039141e-01, -4.246393846773595e-01, -4.267181890039141e-01, -5.980763917153565e-01, -5.997744815863927e-01, -1.890105151286643e-01, -1.895924835126093e-01, -2.102538859564852e-01, -2.112451581867814e-01, -2.582461137179093e-01, -2.597256307336960e-01, -2.298221370171649e-01, -2.295367556703996e-01, -2.298221370171649e-01, -2.295367556703997e-01, -3.415120180591977e-01, -3.441091149702640e-01, -4.535714971925156e-02, -4.565048648148784e-02, -5.975850869455841e-02, -6.152624109886526e-02, -2.487667440249029e-01, -2.533908533390858e-01, -8.588308037705857e-02, -8.813153242332317e-02, -8.588308037705858e-02, -8.813153242332318e-02, -1.162048725502957e-02, -1.203976252459475e-02, -1.266531484714532e-03, -1.269403236257711e-03, -2.576793299848962e-03, -2.740548849166849e-03, -8.260047580649529e-02, -8.371196550273655e-02, -3.404123817119550e-03, -4.523213054634933e-03, -3.404123817119546e-03, -4.523213054634929e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_cam_s12h_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.253790869968737e-08, 0.000000000000000e+00, -1.253795703144715e-08, -1.253754372017102e-08, 0.000000000000000e+00, -1.253769200319107e-08, -1.253661570771635e-08, 0.000000000000000e+00, -1.253629510775781e-08, -1.254073086766066e-08, 0.000000000000000e+00, -1.254154210439324e-08, -1.253767891866391e-08, 0.000000000000000e+00, -1.253962117609760e-08, -1.253767891866391e-08, 0.000000000000000e+00, -1.253962117609760e-08, -1.913889785635982e-05, 0.000000000000000e+00, -1.913845795662091e-05, -1.913847649004269e-05, 0.000000000000000e+00, -1.913808323884021e-05, -1.912852406558960e-05, 0.000000000000000e+00, -1.912538078503877e-05, -1.913312935239415e-05, 0.000000000000000e+00, -1.913054418879062e-05, -1.915221978917577e-05, 0.000000000000000e+00, -1.912049532684156e-05, -1.915221978917577e-05, 0.000000000000000e+00, -1.912049532684156e-05, -1.154717903580582e-02, 0.000000000000000e+00, -1.164810959568102e-02, -1.151841945663126e-02, 0.000000000000000e+00, -1.164622007244183e-02, -1.104408289883547e-02, 0.000000000000000e+00, -1.078965961697896e-02, -1.061904819252207e-02, 0.000000000000000e+00, -1.070509168903911e-02, -1.168441588828584e-02, 0.000000000000000e+00, -9.176929877150422e-03, -1.168441588828584e-02, 0.000000000000000e+00, -9.176929877150422e-03, -7.995318545256143e-01, 0.000000000000000e+00, -7.711963826821931e-01, -8.152789507527056e-01, 0.000000000000000e+00, -7.782394142612381e-01, -6.775753141298765e-03, 0.000000000000000e+00, -6.439180286850810e-03, -9.040973164872422e-01, 0.000000000000000e+00, -8.787601756339830e-01, -6.943682661605606e-01, 0.000000000000000e+00, -1.152207125508799e+00, -6.943682661605605e-01, 0.000000000000000e+00, -1.152207125508800e+00, -1.973135672144550e+00, 0.000000000000000e+00, -1.953562242252687e+00, -2.079213099739546e+00, 0.000000000000000e+00, -2.068862709451272e+00, -1.176598549835314e+00, 0.000000000000000e+00, -1.185998466248312e+00, -1.806305000095634e+00, 0.000000000000000e+00, -1.757247077373079e+00, -1.969493834753436e+00, 0.000000000000000e+00, -4.995550192274617e+00, -1.969493834753441e+00, 0.000000000000000e+00, -4.995550192274631e+00, -2.843627749154332e-06, 0.000000000000000e+00, -2.847148316360137e-06, -2.821683135939142e-06, 0.000000000000000e+00, -2.825928531114315e-06, -2.842488518084256e-06, 0.000000000000000e+00, -2.846475840829847e-06, -2.823660381532035e-06, 0.000000000000000e+00, -2.827199776869850e-06, -2.832345567580917e-06, 0.000000000000000e+00, -2.836496790879242e-06, -2.832345567580917e-06, 0.000000000000000e+00, -2.836496790879242e-06, -1.364270808998946e-04, 0.000000000000000e+00, -1.364487496547793e-04, -1.345584321651882e-04, 0.000000000000000e+00, -1.346551317827432e-04, -1.341539633221647e-04, 0.000000000000000e+00, -1.348862112190631e-04, -1.326353432056568e-04, 0.000000000000000e+00, -1.332773134808742e-04, -1.368834222378953e-04, 0.000000000000000e+00, -1.357418120358307e-04, -1.368834222378953e-04, 0.000000000000000e+00, -1.357418120358307e-04, -2.139251395805703e-02, 0.000000000000000e+00, -2.160169807519411e-02, -4.608144870223022e-03, 0.000000000000000e+00, -4.415748694443900e-03, -3.213670642706964e-02, 0.000000000000000e+00, -2.768598508590239e-02, -1.160078767951747e-02, 0.000000000000000e+00, -1.057266010471073e-02, -1.751532363980673e-02, 0.000000000000000e+00, -2.180463309132273e-02, -1.751532363980673e-02, 0.000000000000000e+00, -2.180463309132273e-02, -8.944007733517838e-01, 0.000000000000000e+00, -9.121115983379110e-01, -4.395910575686325e-01, 0.000000000000000e+00, -4.363216270672374e-01, -9.926486420816315e-01, 0.000000000000000e+00, -9.729793357401966e-01, -5.318848417863199e-05, 0.000000000000000e+00, -5.316312461726318e-05, -1.022167303258280e+00, 0.000000000000000e+00, -1.268014606312083e+00, -1.022167303258280e+00, 0.000000000000000e+00, -1.268014606312083e+00, -2.535467063537181e+00, 0.000000000000000e+00, -2.194537644965564e+00, -2.183470343986441e+00, 0.000000000000000e+00, -2.015941509361198e+00, -1.243852651544838e+01, 0.000000000000000e+00, -1.383806678026437e+01, -1.406807335374740e+00, 0.000000000000000e+00, -1.355008602045678e+00, -6.184791250300903e+00, 0.000000000000000e+00, -6.076606034022066e+00, -6.184791250300886e+00, 0.000000000000000e+00, -6.076606034022059e+00, -1.372740442003881e-03, 0.000000000000000e+00, -1.297740804494311e-03, -5.982873524854409e-03, 0.000000000000000e+00, -5.730924734524066e-03, -4.130586551078789e-03, 0.000000000000000e+00, -3.934214926687660e-03, -2.754429839175383e-03, 0.000000000000000e+00, -2.631021634618330e-03, -3.418705268835749e-03, 0.000000000000000e+00, -3.260613883087119e-03, -3.418705268835749e-03, 0.000000000000000e+00, -3.260613883087119e-03, -5.633547048284446e-04, 0.000000000000000e+00, -5.499398295533161e-04, -3.988322865057358e-02, 0.000000000000000e+00, -3.943718403699725e-02, -3.691358160526721e-02, 0.000000000000000e+00, -3.628658224943204e-02, -2.523086752752468e-02, 0.000000000000000e+00, -2.472443163722922e-02, -3.259528038930547e-02, 0.000000000000000e+00, -3.204126428824055e-02, -3.259528038930547e-02, 0.000000000000000e+00, -3.204126428824055e-02, -4.395209595259157e-03, 0.000000000000000e+00, -4.127305503358191e-03, -2.823739658262715e-01, 0.000000000000000e+00, -2.803253189117661e-01, -2.159842883722220e-01, 0.000000000000000e+00, -2.145174072420521e-01, -1.458622127278669e-01, 0.000000000000000e+00, -1.435889405999132e-01, -1.819036903871557e-01, 0.000000000000000e+00, -1.833369523723022e-01, -1.819036903871558e-01, 0.000000000000000e+00, -1.833369523723023e-01, -5.467830941483906e-02, 0.000000000000000e+00, -5.383135324968984e-02, -1.074564940012045e+00, 0.000000000000000e+00, -1.076113760848148e+00, -1.073769075975360e+00, 0.000000000000000e+00, -1.099735930091435e+00, -1.968743988799928e-01, 0.000000000000000e+00, -1.877702469545173e-01, -1.442988301701957e+00, 0.000000000000000e+00, -1.718285906505924e+00, -1.442988301701958e+00, 0.000000000000000e+00, -1.718285906505925e+00, -1.564748948769570e+00, 0.000000000000000e+00, -1.597598892041087e+00, -7.799959665519645e+00, 0.000000000000000e+00, -1.381663023084108e+01, -4.814446351259527e+00, 0.000000000000000e+00, -5.125413451116618e+00, -1.605961159772678e+00, 0.000000000000000e+00, -1.575203262130313e+00, -1.275227829181475e+01, 0.000000000000000e+00, -6.307797556840773e+00, -1.275227829181477e+01, 0.000000000000000e+00, -6.307797556840792e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
