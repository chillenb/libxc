
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_sogga11_x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.215459525766465e+01, -1.215461933145500e+01, -1.215475630888734e+01, -1.215436149782413e+01, -1.215460770611791e+01, -1.215460770611791e+01, -1.990782338437348e+00, -1.990780031930729e+00, -1.990798524899771e+00, -1.991188548349771e+00, -1.990789632677369e+00, -1.990789632677369e+00, -3.866276079972247e-01, -3.863353549198616e-01, -3.786104055138138e-01, -3.814721184310562e-01, -3.865205859369861e-01, -3.865205859369861e-01, -1.043874068890175e-01, -1.066003615674005e-01, -4.598172693689641e-01, -3.771700215144776e-02, -1.050832810155054e-01, -1.050832810155054e-01, 1.421489881451540e-05, 1.609613902890640e-05, -5.304306100306161e-05, 1.647834988751200e-06, 1.590350511347005e-05, 1.590350511347005e-05, -2.946544734824748e+00, -2.946731367062341e+00, -2.946566328345096e+00, -2.946711413065287e+00, -2.946637024381299e+00, -2.946637024381299e+00, -1.141615110838208e+00, -1.149136404029902e+00, -1.139057395225727e+00, -1.144954530457508e+00, -1.149923143908258e+00, -1.149923143908258e+00, -3.311868017807427e-01, -3.533392347251745e-01, -3.146624152069729e-01, -3.233135584731893e-01, -3.430514452615790e-01, -3.430514452615790e-01, -9.699180848386553e-04, -8.358065322748437e-02, -1.444327747127400e-03, -1.074803208044477e+00, -1.331020706275517e-02, -1.331020706275517e-02, 1.534131947730792e-06, 2.201019050296067e-06, 1.579280709273592e-06, -7.798666777037773e-04, 2.020927437066254e-06, 2.020927437066254e-06, -3.335513826344292e-01, -3.335259799488933e-01, -3.335604840795094e-01, -3.335668979370889e-01, -3.335655481191196e-01, -3.335655481191196e-01, -3.225439814038333e-01, -2.902161022163660e-01, -3.004527946528959e-01, -3.094001887675682e-01, -3.048810654870971e-01, -3.048810654870971e-01, -3.707519021700330e-01, -1.276860179247321e-01, -1.602136964782550e-01, -2.033508728373055e-01, -1.814655089482895e-01, -1.814655089482895e-01, -2.621976997074695e-01, 5.450006619195539e-05, -4.294731512932036e-04, -1.906472393259994e-01, -3.505407609449617e-04, -3.505407609449535e-04, 1.923084036693890e-05, 1.224341285817115e-07, 4.710683262560021e-07, -3.310839578282735e-04, 1.529105108856241e-06, 1.529105108856239e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_sogga11_x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.564574920889657e+01, -1.564578684712534e+01, -1.564598321937716e+01, -1.564536631781175e+01, -1.564576882011939e+01, -1.564576882011939e+01, -2.549184672480202e+00, -2.549188366170522e+00, -2.549395040673084e+00, -2.549579506537012e+00, -2.549197431433104e+00, -2.549197431433104e+00, -4.914988755930000e-01, -4.911283430284850e-01, -4.853720491793271e-01, -4.885276271123086e-01, -4.913624413624116e-01, -4.913624413624116e-01, -1.766835959242923e-01, -1.710833282591956e-01, -5.864637620004405e-01, -2.324344129411624e-01, -1.747985359290470e-01, -1.747985359290470e-01, 5.039969775392423e-05, 5.653180860812809e-05, -1.565334406302884e-03, 5.888331790275941e-06, 5.586679801875281e-05, 5.586679801875281e-05, -3.812951652649995e+00, -3.813687981233571e+00, -3.813028923412508e+00, -3.813601412502178e+00, -3.813326097066912e+00, -3.813326097066912e+00, -1.462215190441624e+00, -1.469865267183837e+00, -1.462172293288643e+00, -1.467856851361961e+00, -1.468346418544398e+00, -1.468346418544398e+00, -4.252023421127516e-01, -4.634665099881148e-01, -4.035477975017968e-01, -4.214233834772608e-01, -4.414350986948508e-01, -4.414350986948508e-01, -2.075512852015225e-02, -2.885298145729096e-01, -3.018194575826919e-02, -1.409656744732187e+00, -1.427097701374391e-01, -1.427097701374391e-01, 5.466017647095470e-06, 7.967624186097799e-06, 5.702437151513390e-06, -2.325526245931705e-03, 7.318800523273030e-06, 7.318800523273103e-06, -4.422794283769982e-01, -4.381801111412573e-01, -4.395582645631923e-01, -4.406898977901837e-01, -4.401160583136560e-01, -4.401160583136560e-01, -4.284435430743829e-01, -3.695183046389536e-01, -3.849583070141968e-01, -3.999632962309171e-01, -3.921930510776597e-01, -3.921930510776597e-01, -4.857406766965619e-01, -2.591031194715564e-01, -2.298565564061118e-01, -2.585145346516851e-01, -2.342639137275640e-01, -2.342639137275639e-01, -3.335739444500642e-01, -7.578569463597727e-04, -3.355681735133349e-03, -2.432357330470405e-01, 7.098848682474052e-04, 7.098848682473627e-04, 6.691283354666541e-05, 3.068017490611729e-07, 1.527955035709794e-06, 1.290116476349366e-04, 5.498047909013504e-06, 5.498047909013558e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_sogga11_x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.418886046216281e-09, -1.418891458334727e-09, -1.418877709847268e-09, -1.418789850519100e-09, -1.418889217123708e-09, -1.418889217123708e-09, -1.683562955487642e-06, -1.683713720330637e-06, -1.687586875066312e-06, -1.679497213684152e-06, -1.683611807112574e-06, -1.683611807112574e-06, -8.164528578914910e-04, -8.105185128757960e-04, -5.527896257381869e-04, -5.584402870505472e-04, -8.143482246724935e-04, -8.143482246724935e-04, 2.919366528613787e-01, 2.252951851296383e-01, -5.143161503236456e-04, 2.738393219373621e+00, 2.702123491354596e-01, 2.702123491354596e-01, -1.404015679378807e+00, -1.365096930550979e+00, 5.955552577111022e-01, -1.250518289630850e+00, -1.419043384797643e+00, -1.419043384797643e+00, -4.689937186297992e-07, -4.702517184793415e-07, -4.691173957956422e-07, -4.700955950450520e-07, -4.696450258045271e-07, -4.696450258045271e-07, -6.921935584442093e-06, -7.107845852641812e-06, -6.419584047947575e-06, -6.601949533217219e-06, -7.606930672880501e-06, -7.606930672880501e-06, -2.387271112021451e-03, -2.890400070118515e-03, -2.833688466800740e-03, -3.735534465103562e-03, -2.214898587345655e-03, -2.214898587345655e-03, 6.222726493886270e-01, 7.477817881787786e-01, 1.018075560267164e+00, -3.371404803115938e-05, 3.019104893249080e+00, 3.019104893249080e+00, -1.329409383303320e+00, -1.312273860116492e+00, -3.767972808809741e+00, 1.995111210063064e-01, -1.937175573835462e+00, -1.937175573835508e+00, -4.158906377369079e-03, -3.722848628652151e-03, -3.871233155672981e-03, -3.992041628344439e-03, -3.930991894651224e-03, -3.930991894651224e-03, -4.845677737483293e-03, -3.003857988529414e-03, -3.308328410514253e-03, -3.766760893347859e-03, -3.518734344133370e-03, -3.518734344133378e-03, -2.344683419037315e-03, 1.769077938869193e-01, 2.101759161492586e-02, -1.083340305610143e-02, -8.029901661217533e-03, -8.029901661217517e-03, -4.294598525507007e-03, 3.776216659758068e-01, 5.328343615532595e-01, -1.762602174517481e-02, -8.843469503760010e-02, -8.843469503757605e-02, -9.932306521430324e-01, -2.389111517433324e+00, -2.027806530529852e+00, -5.479336652338056e-02, -2.852453702837230e+00, -2.852453702837324e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
