
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_n12_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.564295199614913e+01, -1.564288467982417e+01, -1.564277677399774e+01, -1.564377414382545e+01, -1.564322442854078e+01, -1.564322442854078e+01, -2.699895807728444e+00, -2.699817960310116e+00, -2.698076449222481e+00, -2.701611561836531e+00, -2.699868211504587e+00, -2.699868211504587e+00, -5.439918200282060e-01, -5.442988647051539e-01, -5.526236416659871e-01, -5.559505917992892e-01, -5.543767837450957e-01, -5.543767837450957e-01, -2.093730367804897e-01, -2.087018648871277e-01, -6.250673331011235e-01, -1.851631246429585e-01, -1.970263564600442e-01, -1.970263564600443e-01, -2.640143866567794e-02, -2.763233688483700e-02, -9.210334691902411e-02, -1.594070475490657e-02, -1.972028141755577e-02, -1.972028141755577e-02, -3.562439064982097e+00, -3.556736552902327e+00, -3.562209636445323e+00, -3.557175421601830e+00, -3.559534603654306e+00, -3.559534603654306e+00, -1.573160088415248e+00, -1.586910260846916e+00, -1.557819664912378e+00, -1.570277729291163e+00, -1.587737802337574e+00, -1.587737802337574e+00, -4.352728088749723e-01, -4.214459317720695e-01, -4.089941675468171e-01, -3.815316505539155e-01, -4.365531289593889e-01, -4.365531289593889e-01, -1.390505086475190e-01, -2.308967054726179e-01, -1.321706465895099e-01, -1.180754808547971e+00, -1.584797956486301e-01, -1.584797956486301e-01, -1.246819586626996e-02, -1.560354656980583e-02, -1.208912837523504e-02, -1.096328960770693e-01, -1.443368052184399e-02, -1.443368052184399e-02, -3.763271955738088e-01, -3.875964538257087e-01, -3.837750014423774e-01, -3.804938688856642e-01, -3.821470769222388e-01, -3.821470769222388e-01, -3.626471504142784e-01, -3.982377762464448e-01, -3.922005702541759e-01, -3.829455320604853e-01, -3.878258227562146e-01, -3.878258227562146e-01, -4.435804320342403e-01, -2.659213145638185e-01, -2.803662983848637e-01, -2.906420544886856e-01, -2.830409380288283e-01, -2.830409380288283e-01, -3.685042909634651e-01, -9.049077361745266e-02, -1.018120099413413e-01, -2.639558919985799e-01, -1.221793201835116e-01, -1.221793201835116e-01, -3.567615682536904e-02, -4.352755651508142e-03, -8.981713738553167e-03, -1.183250379961659e-01, -1.340902498721013e-02, -1.340902498721012e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_n12_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.088911074603486e+01, -1.088889637757244e+01, -1.088834286519175e+01, -1.089152471159924e+01, -1.088980035652871e+01, -1.088980035652871e+01, -2.515645378186240e+00, -2.515293803110836e+00, -2.507244459966146e+00, -2.521721068348111e+00, -2.515281948058401e+00, -2.515281948058401e+00, -5.288268448903903e-01, -5.287068245132566e-01, -5.199671532577489e-01, -5.257111737797548e-01, -5.243715041437775e-01, -5.243715041437775e-01, -1.381948177504785e-01, -1.325848310587795e-01, -6.265353420317363e-01, -2.054144997375731e-01, -1.730169353011433e-01, -1.730169353011436e-01, -3.415433408733169e-02, -3.567642712861502e-02, -1.008739221351791e-01, -2.091165987271759e-02, -2.574224165822590e-02, -2.574224165822588e-02, -2.626190249255014e+00, -2.621575764279533e+00, -2.626000792610224e+00, -2.621924997045393e+00, -2.623823229541413e+00, -2.623823229541413e+00, -2.418611425630997e+00, -2.416451749517456e+00, -2.454370875036755e+00, -2.455862646027286e+00, -2.396541342092961e+00, -2.396541342092961e+00, -4.424787158707841e-01, -4.943385397397355e-01, -4.087570852855493e-01, -4.392336898633604e-01, -4.497160264801096e-01, -4.497160264801096e-01, -1.923185200329681e-01, -2.115813809202307e-01, -1.779809897322676e-01, -1.192996419060013e+00, -2.017738240927983e-01, -2.017738240927983e-01, -1.641944733153446e-02, -2.047507897307283e-02, -1.590629423124122e-02, -1.239081859757102e-01, -1.894866726757407e-02, -1.894866726757406e-02, -4.740533115314916e-01, -4.601525987719117e-01, -4.646105283904500e-01, -4.686424450840965e-01, -4.665858510370843e-01, -4.665858510370843e-01, -4.666200095872852e-01, -3.636808015724428e-01, -3.868532787715786e-01, -4.111563746204814e-01, -3.981694559777004e-01, -3.981694559777004e-01, -5.133177334879914e-01, -1.764753157639504e-01, -1.613132149266997e-01, -2.361983737653475e-01, -1.858387797192863e-01, -1.858387797192862e-01, -3.290873459189897e-01, -9.983784365732018e-02, -1.104373536553925e-01, -2.369904870556000e-01, -1.511969623285357e-01, -1.511969623285359e-01, -4.550990556878800e-02, -5.780005053483825e-03, -1.187035065982081e-02, -1.429746267544602e-01, -1.762248204415169e-02, -1.762248204415169e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_n12_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.522938470199104e-08, -2.523009289579512e-08, -2.523157302366890e-08, -2.522107045508231e-08, -2.522681113227181e-08, -2.522681113227181e-08, -1.749842372515253e-05, -1.750571937005373e-05, -1.767293221677510e-05, -1.736970447362566e-05, -1.750553527021782e-05, -1.750553527021782e-05, -6.983034470347311e-03, -6.947842612913448e-03, -6.288423059533057e-03, -6.088121646808815e-03, -6.176288701509388e-03, -6.176288701509388e-03, -1.004007395299293e+00, -1.032861386278293e+00, -3.865783995876718e-03, -4.458485287586121e-01, -9.031332522452256e-01, -9.031332522452226e-01, -2.268299486611395e+01, -2.370314927255976e+01, -3.283741129620403e+00, -2.244672826820482e+01, -2.768821525625102e+01, -2.768821525625497e+01, -8.523505083748180e-06, -8.570566538874190e-06, -8.525397548256112e-06, -8.566946901967720e-06, -8.547506101328589e-06, -8.547506101328589e-06, 4.076954774246352e-05, 3.761070841506109e-05, 4.679293205240114e-05, 4.428919126248818e-05, 3.567212159184051e-05, 3.567212159184051e-05, -1.900977922180888e-02, -2.096712503474628e-02, -2.428486087398061e-02, -3.013973065328252e-02, -1.883040244642793e-02, -1.883040244642793e-02, 9.157390857979326e-01, -4.177443556963210e-01, 1.027898702957901e+00, -5.004613288411625e-04, 1.061554331847739e-01, 1.061554331847739e-01, -3.034701072841606e+01, -2.648403256205656e+01, -1.705955799635197e+02, 1.710495754937779e-01, -7.804809626387086e+01, -7.804809626389476e+01, -3.025261359621198e-02, -2.809628029420413e-02, -2.883096072041575e-02, -2.945921376847682e-02, -2.914302386771526e-02, -2.914302386771526e-02, -3.405929489578862e-02, -2.868228328906569e-02, -2.887031477803137e-02, -3.057063659680939e-02, -2.963847373136864e-02, -2.963847373136864e-02, -1.757144610035883e-02, -3.655920227224861e-01, -2.711770434693032e-01, -1.249625921601365e-01, -1.926366927931129e-01, -1.926366927931130e-01, -4.083160223319818e-02, -3.322143484911397e+00, -1.017187877672378e+00, -1.617887406684358e-01, 8.795598767182999e-01, 8.795598767183356e-01, -1.676237401879300e+01, -1.407144785828006e+02, -6.599061374756285e+01, 7.980378501572625e-01, -9.932784563069984e+01, -9.932784563066998e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
