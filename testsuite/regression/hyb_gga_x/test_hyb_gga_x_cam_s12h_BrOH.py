
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_cam_s12h_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.564152380374403e+01, -1.564153785730626e+01, -1.564166326708170e+01, -1.564143191628594e+01, -1.564153069086075e+01, -1.564153069086075e+01, -2.580823364082275e+00, -2.580791982936274e+00, -2.580038172539584e+00, -2.581892128918265e+00, -2.580818351122449e+00, -2.580818351122449e+00, -5.041810918860776e-01, -5.043739932390033e-01, -5.105699234335394e-01, -5.136689597970895e-01, -5.042479673366055e-01, -5.042479673366055e-01, -1.486566675876682e-01, -1.493080892839612e-01, -5.857694286065842e-01, -1.205503356212075e-01, -1.488376414216818e-01, -1.488376414216818e-01, -1.062823916546178e-02, -1.113085733313268e-02, -4.449030034572745e-02, -5.105182988459772e-03, -1.101488248302274e-02, -1.101488248302274e-02, -3.731546269899345e+00, -3.731194460114760e+00, -3.731514445524555e+00, -3.731240748025858e+00, -3.731358402754835e+00, -3.731358402754835e+00, -1.597727460918618e+00, -1.604191434488845e+00, -1.600125160762323e+00, -1.605179599665873e+00, -1.598899965566352e+00, -1.598899965566352e+00, -4.036398840962186e-01, -4.234143428204878e-01, -3.838767490947395e-01, -3.854872142714820e-01, -4.161526509686552e-01, -4.161526509686552e-01, -9.439509668109126e-02, -1.618541270336968e-01, -9.281821523352793e-02, -1.337013883464539e+00, -1.056065540389096e-01, -1.056065540389096e-01, -4.924962812006459e-03, -5.627928251110972e-03, -4.218207047537558e-03, -6.091167714498896e-02, -5.127879497320267e-03, -5.127879497320267e-03, -4.004064366256425e-01, -3.987235066678393e-01, -3.992339349741700e-01, -3.997026806451804e-01, -3.994603392792774e-01, -3.994603392792774e-01, -3.868889141416534e-01, -3.653113717081214e-01, -3.669164845545460e-01, -3.700823423156571e-01, -3.678777688990709e-01, -3.678777688990709e-01, -4.451846890913614e-01, -1.951289279004052e-01, -2.200941342758810e-01, -2.553249922936803e-01, -2.368794664857724e-01, -2.368794664857723e-01, -3.303663924945242e-01, -4.137458239226650e-02, -5.531617613648149e-02, -2.311695770031216e-01, -7.736989952015841e-02, -7.736989952015839e-02, -1.245264086356068e-02, -1.541353114227463e-03, -2.927752441215294e-03, -7.373852247485238e-02, -4.358221114405937e-03, -4.358221114405931e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_cam_s12h_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.838981869499760e+01, -1.838992547885989e+01, -1.839034500863659e+01, -1.838859759103021e+01, -1.838987548437376e+01, -1.838987548437376e+01, -2.853525042902015e+00, -2.853585839841520e+00, -2.855381105941397e+00, -2.852904186531064e+00, -2.853568557180339e+00, -2.853568557180339e+00, -5.121040619036499e-01, -5.115837222376630e-01, -5.030713978628540e-01, -5.066511427702628e-01, -5.119124920871908e-01, -5.119124920871908e-01, -1.438528074233003e-01, -1.442076978741509e-01, -6.245182049564995e-01, -1.268652566642149e-01, -1.439312481622014e-01, -1.439312481622014e-01, -1.412514824355645e-02, -1.478840472443650e-02, -5.709920763848472e-02, -6.802653365215365e-03, -1.463440928303100e-02, -1.463440928303100e-02, -4.633447793211207e+00, -4.637961615760117e+00, -4.633903898824729e+00, -4.637413830611491e+00, -4.635771854149286e+00, -4.635771854149286e+00, -1.551980711830447e+00, -1.560888403071927e+00, -1.550751674449456e+00, -1.557545671830468e+00, -1.560127223229709e+00, -1.560127223229709e+00, -4.684184981048955e-01, -5.657924490811540e-01, -4.398577929481752e-01, -5.062568539374271e-01, -4.957145607794171e-01, -4.957145607794171e-01, -1.092462247621039e-01, -1.638054393128890e-01, -1.067487431344817e-01, -1.773376283331478e+00, -1.159525376600608e-01, -1.159525376600608e-01, -6.562678931210450e-03, -7.498020673773294e-03, -5.620063042508959e-03, -7.543840986124323e-02, -6.831751387106100e-03, -6.831751387106100e-03, -5.403214006613413e-01, -5.344418394925168e-01, -5.370306035989547e-01, -5.386429274907183e-01, -5.378764505322490e-01, -5.378764505322490e-01, -5.223545740560563e-01, -3.835571614231464e-01, -4.157303681577759e-01, -4.618824625813616e-01, -4.371179127108752e-01, -4.371179127108752e-01, -5.932761121376490e-01, -1.916798304924019e-01, -2.138274265246210e-01, -2.613375470715510e-01, -2.331906872321194e-01, -2.331906872321194e-01, -3.433551664856274e-01, -5.353558086123871e-02, -6.979410215406165e-02, -2.492829402768448e-01, -9.122508853587954e-02, -9.122508853587953e-02, -1.653969692135826e-02, -2.054978579450187e-03, -3.902660009763993e-03, -8.682986597408028e-02, -5.806932401523774e-03, -5.806932401523766e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_cam_s12h_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.269783763977259e-09, -6.269646664716776e-09, -6.269100524645773e-09, -6.271343958219400e-09, -6.269710915416554e-09, -6.269710915416554e-09, -9.571210512686585e-06, -9.571037168581286e-06, -9.564580441392469e-06, -9.567479013930033e-06, -9.570959041794931e-06, -9.570959041794931e-06, -5.726705004517655e-03, -5.716285298716814e-03, -5.296055057597457e-03, -5.190120783268221e-03, -5.723101280251209e-03, -5.723101280251209e-03, -4.378804473647686e-01, -4.421134659648177e-01, -3.185822498818837e-03, -5.226977553453298e-01, -4.395441777398452e-01, -4.395441777398452e-01, -2.069189885583049e+00, -2.075518003301599e+00, -9.003739620739146e-01, -1.461289316913923e+00, -2.156100719139205e+00, -2.156100719139205e+00, -1.426077583096225e-06, -1.415607619764741e-06, -1.425028663390674e-06, -1.416887994840845e-06, -1.420690680777639e-06, -1.420690680777639e-06, -6.812087148528666e-05, -6.724308665704705e-05, -6.744786112697038e-05, -6.678218560425126e-05, -6.836970131568338e-05, -6.836970131568338e-05, -1.118286234174049e-02, -2.137932839890948e-03, -1.395128910608644e-02, -5.547798159871048e-03, -9.179471154281664e-03, -9.179471154281664e-03, -5.438433536234268e-01, -2.279405277998164e-01, -6.265595741165690e-01, -2.658543394342305e-05, -6.146956371372454e-01, -6.146956371372454e-01, -1.550162176837808e+00, -1.553682235561021e+00, -4.446753599086506e+00, -9.122938379116520e-01, -2.294884489480971e+00, -2.294884489480969e+00, -4.550228889186252e-04, -2.225628915098140e-03, -1.484956533328345e-03, -9.865244667213123e-04, -1.226545374079292e-03, -1.226545374079292e-03, -3.040105279212724e-04, -1.900776741677804e-02, -1.694796826677871e-02, -1.141828777206853e-02, -1.474229368596342e-02, -1.474229368596342e-02, -2.007044687635392e-03, -1.425800302531856e-01, -1.083139644343928e-01, -7.228681104679247e-02, -9.113852162233629e-02, -9.113852162233636e-02, -2.774635930773582e-02, -7.552782707719921e-01, -7.726359087402698e-01, -1.022128883426581e-01, -9.129967024298901e-01, -9.129967024298915e-01, -1.555622677223063e+00, -2.670240347605279e+00, -2.299620605256525e+00, -1.121867545122634e+00, -3.351113620415810e+00, -3.351113620415804e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
