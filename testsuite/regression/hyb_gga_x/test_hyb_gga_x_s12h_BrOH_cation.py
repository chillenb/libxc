
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_s12h_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.567004036499756e+01, -1.567005931431913e+01, -1.567019675732016e+01, -1.566991376761714e+01, -1.567005447395277e+01, -1.567005447395277e+01, -2.606980490258788e+00, -2.606943308111555e+00, -2.606148495440281e+00, -2.608026634986798e+00, -2.606999005628466e+00, -2.606999005628466e+00, -5.298390463287174e-01, -5.300325193712143e-01, -5.360261708529385e-01, -5.394822686169254e-01, -5.383575147247941e-01, -5.383575147247941e-01, -1.669115297730154e-01, -1.678394695390906e-01, -6.100283435098154e-01, -1.394183794535422e-01, -1.628415906197193e-01, -1.628415906197192e-01, -7.383372337530573e-03, -7.774857901541726e-03, -4.239856727671658e-02, -4.258164428308103e-03, -5.942793511520074e-03, -5.942793511520074e-03, -3.769517791461785e+00, -3.769277592082711e+00, -3.769513599429481e+00, -3.769301311140276e+00, -3.769391194443383e+00, -3.769391194443383e+00, -1.621916112188637e+00, -1.628552425435667e+00, -1.624945497021303e+00, -1.630856577421484e+00, -1.624056948585255e+00, -1.624056948585255e+00, -4.349834963275853e-01, -4.558880845715877e-01, -4.066548970493302e-01, -4.048284263478447e-01, -4.393907782381544e-01, -4.393907782381544e-01, -1.043318994053299e-01, -1.779549250727583e-01, -9.734357324359433e-02, -1.372610183887999e+00, -1.178278722382877e-01, -1.178278722382877e-01, -3.287563470798821e-03, -4.162594290665051e-03, -3.187559824984609e-03, -6.727378773710438e-02, -4.004017484628832e-03, -4.004017484628833e-03, -4.208680562498227e-01, -4.191718886677743e-01, -4.196575576767417e-01, -4.201524279096297e-01, -4.198943847091564e-01, -4.198943847091564e-01, -4.094042910793811e-01, -3.875704487935420e-01, -3.885099461624650e-01, -3.914656301576064e-01, -3.892049709297350e-01, -3.892049709297350e-01, -4.781970003608342e-01, -2.134716997454139e-01, -2.407342164050639e-01, -2.789167476838629e-01, -2.590411636551992e-01, -2.590411636551992e-01, -3.579615792685164e-01, -4.058158694388195e-02, -5.488202773612228e-02, -2.585442490930179e-01, -8.370020882534569e-02, -8.370020882534571e-02, -1.040420806836495e-02, -1.112696641934233e-03, -2.339901010347032e-03, -7.905952937661936e-02, -3.677077341869459e-03, -3.677077341869456e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_s12h_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.866951687056157e+01, -1.866949922322524e+01, -1.866965733414262e+01, -1.866960121842108e+01, -1.867001142695452e+01, -1.867013528661502e+01, -1.866842760867463e+01, -1.866811580920254e+01, -1.866960545723515e+01, -1.866885294573200e+01, -1.866960545723515e+01, -1.866885294573200e+01, -2.916602135004755e+00, -2.917023397812462e+00, -2.916668943103261e+00, -2.917114049054004e+00, -2.918534876340635e+00, -2.919043162278955e+00, -2.915778762891556e+00, -2.916324543301055e+00, -2.915932946587753e+00, -2.918022027090140e+00, -2.915932946587753e+00, -2.918022027090140e+00, -5.374147909770536e-01, -5.405020163392783e-01, -5.363351183181427e-01, -5.400181890631164e-01, -5.253074845662894e-01, -5.230504478176736e-01, -5.278728373271370e-01, -5.285969615620204e-01, -5.468194154643145e-01, -5.238792746634758e-01, -5.468194154643145e-01, -5.238792746634758e-01, -1.595643625883520e-01, -1.620724077482148e-01, -1.593931657539653e-01, -1.624603669108360e-01, -6.178755207028331e-01, -6.466326994397358e-01, -1.457945576534455e-01, -1.471538116515943e-01, -1.655966465466302e-01, -1.225179584844090e-01, -1.655966465466301e-01, -1.225179584844090e-01, -9.512009656018158e-03, -1.010613288622652e-02, -9.965924382230281e-03, -1.067392404471574e-02, -5.377218070771868e-02, -5.657174824221125e-02, -5.722435881654286e-03, -5.627191570828079e-03, -8.487713510635117e-03, -4.832280913708512e-03, -8.487713510635117e-03, -4.832280913708512e-03, -4.715066746846452e+00, -4.713791174108740e+00, -4.719540917255037e+00, -4.718114809862652e+00, -4.715304451782819e+00, -4.713931934658302e+00, -4.719143938659117e+00, -4.717860050028424e+00, -4.717368991652554e+00, -4.715965943294893e+00, -4.717368991652554e+00, -4.715965943294893e+00, -1.576461859305529e+00, -1.576386658649927e+00, -1.586493185636818e+00, -1.586097034410129e+00, -1.571597430640781e+00, -1.572766104551295e+00, -1.579907005716654e+00, -1.581324909052162e+00, -1.586614513103013e+00, -1.582032779086576e+00, -1.586614513103013e+00, -1.582032779086576e+00, -5.021188278904083e-01, -5.009739077135503e-01, -6.013185430566577e-01, -6.019413051189509e-01, -4.454453011843814e-01, -4.670052799085374e-01, -5.194535994345372e-01, -5.361147899041451e-01, -5.315137675897847e-01, -5.020809938767539e-01, -5.315137675897847e-01, -5.020809938767539e-01, -1.223545637712239e-01, -1.228568999872700e-01, -1.798719059298132e-01, -1.803520622670252e-01, -1.135593279531596e-01, -1.177669203030498e-01, -1.814280076864789e+00, -1.813515329223407e+00, -1.302097970713852e-01, -1.297988210465758e-01, -1.302097970713852e-01, -1.297988210465758e-01, -4.293506563592537e-03, -4.461987618236509e-03, -5.505950571396890e-03, -5.589306590574691e-03, -4.116619030693210e-03, -4.359194244722691e-03, -8.400343042265547e-02, -8.457111598016462e-02, -4.205128510990816e-03, -5.772902221732680e-03, -4.205128510990816e-03, -5.772902221732682e-03, -5.596337729910384e-01, -5.618208421178096e-01, -5.526373210872676e-01, -5.549883319112764e-01, -5.556725868607766e-01, -5.579648132300076e-01, -5.577048794074256e-01, -5.599193221890691e-01, -5.567436286403878e-01, -5.589929108404847e-01, -5.567436286403878e-01, -5.589929108404847e-01, -5.448936142318775e-01, -5.466960078886783e-01, -3.950821450907804e-01, -3.970037226378643e-01, -4.279327797227218e-01, -4.307485235124280e-01, -4.812517596368839e-01, -4.834031750349150e-01, -4.525427052036900e-01, -4.546982902752212e-01, -4.525427052036900e-01, -4.546982902752212e-01, -6.285953466441649e-01, -6.302594969292530e-01, -2.067892502395842e-01, -2.073497564185887e-01, -2.276270990739064e-01, -2.286058163528000e-01, -2.778603663564898e-01, -2.794137753391858e-01, -2.475891367825958e-01, -2.473162232145863e-01, -2.475891367825957e-01, -2.473162232145863e-01, -3.628510379168686e-01, -3.656603583530184e-01, -5.289850478071854e-02, -5.323822182864692e-02, -6.951781399207960e-02, -7.154375447518098e-02, -2.699304891907670e-01, -2.748959242367886e-01, -9.901320603572150e-02, -1.013698767734549e-01, -9.901320603572149e-02, -1.013698767734549e-01, -1.359293692297836e-02, -1.408311640776872e-02, -1.481843862820264e-03, -1.485201728875473e-03, -3.014815936933273e-03, -3.206399141539486e-03, -9.529565190945645e-02, -9.654450210309212e-02, -3.982672549690697e-03, -5.291882603535588e-03, -3.982672549690693e-03, -5.291882603535583e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_s12h_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.126099743791981e-08, 0.000000000000000e+00, -1.126103851568499e-08, -1.126063973416049e-08, 0.000000000000000e+00, -1.126077877827346e-08, -1.125975040890667e-08, 0.000000000000000e+00, -1.125943301073694e-08, -1.126378310757539e-08, 0.000000000000000e+00, -1.126457504926940e-08, -1.126077121815051e-08, 0.000000000000000e+00, -1.126270735680781e-08, -1.126077121815051e-08, 0.000000000000000e+00, -1.126270735680781e-08, -1.789881523480084e-05, 0.000000000000000e+00, -1.789666912753589e-05, -1.789820251020371e-05, 0.000000000000000e+00, -1.789598963151874e-05, -1.788246774257879e-05, 0.000000000000000e+00, -1.787783719030491e-05, -1.789784574186216e-05, 0.000000000000000e+00, -1.789351681355258e-05, -1.791201313121390e-05, 0.000000000000000e+00, -1.787846336088635e-05, -1.791201313121390e-05, 0.000000000000000e+00, -1.787846336088635e-05, -1.191394664300428e-02, 0.000000000000000e+00, -1.198106514571321e-02, -1.189641652344133e-02, 0.000000000000000e+00, -1.198369096779219e-02, -1.154150072017592e-02, 0.000000000000000e+00, -1.131782859434315e-02, -1.111286476776639e-02, 0.000000000000000e+00, -1.118903819663903e-02, -1.195669563261265e-02, 0.000000000000000e+00, -9.773530541648543e-03, -1.195669563261265e-02, 0.000000000000000e+00, -9.773530541648543e-03, -9.325701925367902e-01, 0.000000000000000e+00, -8.954938343001988e-01, -9.485735630729868e-01, 0.000000000000000e+00, -9.009172196680956e-01, -6.921291780903664e-03, 0.000000000000000e+00, -6.481657002991837e-03, -1.084793312032377e+00, 0.000000000000000e+00, -1.053680198435867e+00, -8.086113481839564e-01, 0.000000000000000e+00, -1.410020134754291e+00, -8.086113481839559e-01, 0.000000000000000e+00, -1.410020134754293e+00, -2.486871920680491e+00, 0.000000000000000e+00, -2.462157558998356e+00, -2.620519276797188e+00, 0.000000000000000e+00, -2.607411760077105e+00, -1.477463217181876e+00, 0.000000000000000e+00, -1.488581664211591e+00, -2.276823153202858e+00, 0.000000000000000e+00, -2.214991507423131e+00, -2.482356598432560e+00, 0.000000000000000e+00, -6.296764307041208e+00, -2.482356598432567e+00, 0.000000000000000e+00, -6.296764307041223e+00, -2.519281592445519e-06, 0.000000000000000e+00, -2.522462508830830e-06, -2.498501591618929e-06, 0.000000000000000e+00, -2.502367009784362e-06, -2.518203257817513e-06, 0.000000000000000e+00, -2.521826081162991e-06, -2.500373786137827e-06, 0.000000000000000e+00, -2.503570912362326e-06, -2.508593263266999e-06, 0.000000000000000e+00, -2.512371463994682e-06, -2.508593263266999e-06, 0.000000000000000e+00, -2.512371463994682e-06, -1.358171704909924e-04, 0.000000000000000e+00, -1.358392810953695e-04, -1.338074394378763e-04, 0.000000000000000e+00, -1.339075761309533e-04, -1.338855900860246e-04, 0.000000000000000e+00, -1.345198495837652e-04, -1.322437061890295e-04, 0.000000000000000e+00, -1.327887751194161e-04, -1.359293606153582e-04, 0.000000000000000e+00, -1.350223179766670e-04, -1.359293606153582e-04, 0.000000000000000e+00, -1.350223179766670e-04, -2.123693047258216e-02, 0.000000000000000e+00, -2.144342971802656e-02, -4.235056097826711e-03, 0.000000000000000e+00, -4.055585670478854e-03, -3.255896772438841e-02, 0.000000000000000e+00, -2.778649753049635e-02, -1.084485406425016e-02, 0.000000000000000e+00, -9.872737480340635e-03, -1.715486012338199e-02, 0.000000000000000e+00, -2.150526976804458e-02, -1.715486012338199e-02, 0.000000000000000e+00, -2.150526976804457e-02, -1.100817801135004e+00, 0.000000000000000e+00, -1.121841229148262e+00, -5.209976051448809e-01, 0.000000000000000e+00, -5.169145513310850e-01, -1.225785202762705e+00, 0.000000000000000e+00, -1.199046306055459e+00, -4.637472826258406e-05, 0.000000000000000e+00, -4.635183456285522e-05, -1.246252078832836e+00, 0.000000000000000e+00, -1.533516873460065e+00, -1.246252078832836e+00, 0.000000000000000e+00, -1.533516873460065e+00, -3.195976222632408e+00, 0.000000000000000e+00, -2.766231553675497e+00, -2.752232498999550e+00, 0.000000000000000e+00, -2.541066138590158e+00, -1.567830990266195e+01, 0.000000000000000e+00, -1.744215925422585e+01, -1.752842280851343e+00, 0.000000000000000e+00, -1.688426901079363e+00, -7.795846479747144e+00, 0.000000000000000e+00, -7.659142472103752e+00, -7.795846479747117e+00, 0.000000000000000e+00, -7.659142472103742e+00, -1.258480631080750e-03, 0.000000000000000e+00, -1.189482862236791e-03, -5.522536384457327e-03, 0.000000000000000e+00, -5.286620746628432e-03, -3.797626037347129e-03, 0.000000000000000e+00, -3.615271481737070e-03, -2.526829140501400e-03, 0.000000000000000e+00, -2.412788518345799e-03, -3.139192747412380e-03, 0.000000000000000e+00, -2.992779429119048e-03, -3.139192747412380e-03, 0.000000000000000e+00, -2.992779429119048e-03, -5.186007281354930e-04, 0.000000000000000e+00, -5.061593277023408e-04, -4.188664284262638e-02, 0.000000000000000e+00, -4.137601968768476e-02, -3.760431210845842e-02, 0.000000000000000e+00, -3.690366774900258e-02, -2.446496276769827e-02, 0.000000000000000e+00, -2.395293634040733e-02, -3.245903420146203e-02, 0.000000000000000e+00, -3.187880490812030e-02, -3.245903420146203e-02, 0.000000000000000e+00, -3.187880490812030e-02, -4.037208087219264e-03, 0.000000000000000e+00, -3.786759292048417e-03, -3.283872980590603e-01, 0.000000000000000e+00, -3.257865512325386e-01, -2.457179469880839e-01, 0.000000000000000e+00, -2.436396968018444e-01, -1.578720401420435e-01, 0.000000000000000e+00, -1.552799270633309e-01, -2.021975897166342e-01, 0.000000000000000e+00, -2.037311064550029e-01, -2.021975897166343e-01, 0.000000000000000e+00, -2.037311064550031e-01, -5.784968661998276e-02, 0.000000000000000e+00, -5.685123347113956e-02, -1.349752497958123e+00, 0.000000000000000e+00, -1.351628737252868e+00, -1.344896478259203e+00, 0.000000000000000e+00, -1.376707397733893e+00, -2.099332238354663e-01, 0.000000000000000e+00, -1.995198241413027e-01, -1.786278100273152e+00, 0.000000000000000e+00, -2.118829154653271e+00, -1.786278100273154e+00, 0.000000000000000e+00, -2.118829154653271e+00, -1.971917238392834e+00, 0.000000000000000e+00, -2.013269342449463e+00, -9.832174114493004e+00, 0.000000000000000e+00, -1.741639650639928e+01, -6.068713498654188e+00, 0.000000000000000e+00, -6.460669389068153e+00, -1.989173748669319e+00, 0.000000000000000e+00, -1.950288813418366e+00, -1.607384064869853e+01, 0.000000000000000e+00, -7.950652103456928e+00, -1.607384064869857e+01, 0.000000000000000e+00, -7.950652103456953e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
