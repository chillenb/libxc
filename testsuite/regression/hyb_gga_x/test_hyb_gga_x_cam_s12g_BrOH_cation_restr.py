
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_cam_s12g_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.060047227038046e+01, -2.060050281817066e+01, -2.060070118314793e+01, -2.060024545781683e+01, -2.060047532789305e+01, -2.060047532789305e+01, -3.175000885127309e+00, -3.174960100125317e+00, -3.174103558445381e+00, -3.176248723470740e+00, -3.175034937991754e+00, -3.175034937991754e+00, -5.138440804720724e-01, -5.139697108411814e-01, -5.187097817527486e-01, -5.225951243549219e-01, -5.209637604732339e-01, -5.209637604732339e-01, -1.496816798935213e-01, -1.505231907248309e-01, -6.047959735664172e-01, -1.242501651395687e-01, -1.343657380613799e-01, -1.343657380613799e-01, -6.438286424112308e-03, -6.776229223432248e-03, -3.705598807669037e-02, -3.719208193588586e-03, -4.673058537656781e-03, -4.673058537656781e-03, -4.747972628011124e+00, -4.748011313175255e+00, -4.747981874904387e+00, -4.748015772520997e+00, -4.747986862794912e+00, -4.747986862794912e+00, -1.860378563746904e+00, -1.869493928698975e+00, -1.863194390726389e+00, -1.871329096476091e+00, -1.863953561170102e+00, -1.863953561170102e+00, -4.153940185175971e-01, -4.441610550694147e-01, -3.839290115605467e-01, -3.875186768844132e-01, -4.204702504826655e-01, -4.204702504826655e-01, -9.214091598021817e-02, -1.594078451056047e-01, -8.577679997343100e-02, -1.584925667482279e+00, -1.044989553776095e-01, -1.044989553776095e-01, -2.869717872993256e-03, -3.635839280171064e-03, -2.779980648911507e-03, -5.907913596602161e-02, -3.349022817591242e-03, -3.349022817591242e-03, -4.060241248035147e-01, -4.038112069485130e-01, -4.045220465147617e-01, -4.051660364939214e-01, -4.048374356072740e-01, -4.048374356072740e-01, -3.935775990364338e-01, -3.618220620635810e-01, -3.646249747117846e-01, -3.712866461675329e-01, -3.669892977009391e-01, -3.669892977009391e-01, -4.689478555183594e-01, -1.923745341170533e-01, -2.179245835943550e-01, -2.532942365125782e-01, -2.348647725269335e-01, -2.348647725269335e-01, -3.314978795424097e-01, -3.550934288262670e-02, -4.806919460362918e-02, -2.336698958240064e-01, -7.369526349957348e-02, -7.369526349957348e-02, -9.083881645082389e-03, -9.719782052040040e-04, -2.040147162005648e-03, -6.960241503832151e-02, -3.098912929265805e-03, -3.098912929265802e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_cam_s12g_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.507583091038691e+01, -2.507600444642090e+01, -2.507663270228009e+01, -2.507405372572488e+01, -2.507542545271136e+01, -2.507542545271136e+01, -3.692353656202251e+00, -3.692484845218060e+00, -3.695618391737555e+00, -3.690917917741981e+00, -3.692605055684202e+00, -3.692605055684202e+00, -5.426167595617799e-01, -5.414163356493321e-01, -5.210979577695927e-01, -5.260563431531102e-01, -5.248472740662938e-01, -5.248472740662938e-01, -1.449697498214132e-01, -1.446705648665579e-01, -6.583130481230915e-01, -1.333565899827718e-01, -1.372163327486230e-01, -1.372163327486230e-01, -8.578220402975579e-03, -9.027586838823390e-03, -4.849094996749886e-02, -4.957812874189919e-03, -6.228213052844510e-03, -6.228213052844510e-03, -6.126745346360562e+00, -6.131898263747124e+00, -6.126968726289127e+00, -6.131518422986918e+00, -6.129368925120462e+00, -6.129368925120462e+00, -1.856941017679675e+00, -1.869168590781584e+00, -1.852924917272816e+00, -1.863130059298653e+00, -1.866338752389472e+00, -1.866338752389472e+00, -5.076620772332989e-01, -6.092105933159683e-01, -4.543417765424507e-01, -5.257967108880495e-01, -5.255043108946086e-01, -5.255043108946086e-01, -1.100953714619514e-01, -1.646386723047120e-01, -1.036730103606870e-01, -2.170074438277972e+00, -1.177864370618695e-01, -1.177864370618695e-01, -3.825693512688317e-03, -4.846638489738645e-03, -3.705351506866342e-03, -7.469610387078289e-02, -4.463827489762893e-03, -4.463827489762893e-03, -5.589429712976917e-01, -5.530046004170762e-01, -5.554596056265720e-01, -5.571677073501625e-01, -5.563466233976628e-01, -5.563466233976628e-01, -5.415838032043693e-01, -3.777005375284194e-01, -4.224955546260235e-01, -4.815825782810418e-01, -4.515449566447883e-01, -4.515449566447883e-01, -6.429209466277577e-01, -1.889956780453029e-01, -2.058780494226072e-01, -2.513004272942591e-01, -2.204656673172160e-01, -2.204656673172160e-01, -3.423803795864008e-01, -4.657712411350660e-02, -6.216337146736083e-02, -2.493915765640597e-01, -8.963123238813851e-02, -8.963123238813850e-02, -1.209630737610789e-02, -1.295922254521244e-03, -2.719883315263653e-03, -8.556261108718345e-02, -4.130515545996608e-03, -4.130515545996603e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_cam_s12g_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.317440979208833e-09, -6.317203644718621e-09, -6.316395226784857e-09, -6.319921110473564e-09, -6.318038544726086e-09, -6.318038544726086e-09, -1.007786435199580e-05, -1.007681290179639e-05, -1.005137787904928e-05, -1.008795379229206e-05, -1.007566140213034e-05, -1.007566140213034e-05, -5.941873167007081e-03, -5.949091550106970e-03, -5.815651507225087e-03, -5.674357133941614e-03, -5.739608328721653e-03, -5.739608328721653e-03, -4.106468074966472e-01, -4.188205737664105e-01, -3.329495790976186e-03, -4.429999128455471e-01, -4.606812394103598e-01, -4.606812394103597e-01, -9.154553185650410e-01, -9.672905634281523e-01, -5.538309271582537e-01, -8.313183766707335e-01, -1.056436004366696e+00, -1.056436004366699e+00, -1.195864210272675e-06, -1.183535016100950e-06, -1.195347751329188e-06, -1.184462826205461e-06, -1.189586986291950e-06, -1.189586986291950e-06, -8.189101544378531e-05, -8.082949120319248e-05, -8.072855825932739e-05, -7.985530098417245e-05, -8.181159566267686e-05, -8.181159566267686e-05, -8.722100687329625e-03, -1.252906401873848e-03, -1.280150996852994e-02, -3.225393381336008e-03, -7.528761748426747e-03, -7.528761748426747e-03, -4.337367916793577e-01, -2.209814313701895e-01, -4.703616137531981e-01, -1.661501150182103e-05, -5.640448969115612e-01, -5.640448969115612e-01, -1.095257707975027e+00, -9.784078458686738e-01, -6.145475387440224e+00, -6.526743561888398e-01, -2.859829560660951e+00, -2.859829560660944e+00, -3.500755256990944e-04, -1.615630914657362e-03, -1.087467259870861e-03, -7.153260120724254e-04, -8.934890675716011e-04, -8.934890675716011e-04, -1.452547189960032e-04, -2.022387416207442e-02, -1.625326424009925e-02, -8.655204683635667e-03, -1.281278733555938e-02, -1.281278733555938e-02, -1.198194410517217e-03, -1.455520613555558e-01, -1.149393160919190e-01, -7.703213253349304e-02, -9.989208744896666e-02, -9.989208744896670e-02, -2.790527738512922e-02, -5.036082101110890e-01, -5.111880902165620e-01, -9.487370914824492e-02, -7.594226155239956e-01, -7.594226155239965e-01, -7.383582902436829e-01, -4.800115686633322e+00, -2.323363390591136e+00, -7.576016135793808e-01, -3.612156164776332e+00, -3.612156164776342e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
