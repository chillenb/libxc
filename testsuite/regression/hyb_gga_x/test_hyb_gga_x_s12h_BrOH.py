
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_s12h_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.566968736817262e+01, -1.566970385578482e+01, -1.566983658446160e+01, -1.566956544568940e+01, -1.566969556851504e+01, -1.566969556851504e+01, -2.606900657095071e+00, -2.606871654742246e+00, -2.606183100294586e+00, -2.607923604828610e+00, -2.606896845097705e+00, -2.606896845097705e+00, -5.315648391598873e-01, -5.317807761992168e-01, -5.388026014010183e-01, -5.418646303356960e-01, -5.316399349153745e-01, -5.316399349153745e-01, -1.681988526095600e-01, -1.688258348612767e-01, -6.131554166865332e-01, -1.381923209789786e-01, -1.683701445836761e-01, -1.683701445836761e-01, -1.243265555190214e-02, -1.302035303505098e-02, -5.190979298510164e-02, -5.972857354226742e-03, -1.288471550825640e-02, -1.288471550825640e-02, -3.767961117789241e+00, -3.767727011116076e+00, -3.767941086384654e+00, -3.767758918770740e+00, -3.767834051538505e+00, -3.767834051538505e+00, -1.622063261136671e+00, -1.628478377797997e+00, -1.624466187403819e+00, -1.629475795939180e+00, -1.623217039713084e+00, -1.623217039713084e+00, -4.298311631447662e-01, -4.507209972449620e-01, -4.097787964721341e-01, -4.120603511513474e-01, -4.425985663950816e-01, -4.425985663950816e-01, -1.091528587160719e-01, -1.834533941360584e-01, -1.073234170262554e-01, -1.370984368701617e+00, -1.216314064024204e-01, -1.216314064024204e-01, -5.762019492932629e-03, -6.584383896375459e-03, -4.935134107959657e-03, -7.088814769837681e-02, -5.999371559146979e-03, -5.999371559146979e-03, -4.274345115784720e-01, -4.256682162172793e-01, -4.262159299147050e-01, -4.267075954915774e-01, -4.264544101126664e-01, -4.264544101126664e-01, -4.136928454128994e-01, -3.911293923591805e-01, -3.925633440854335e-01, -3.960920557496990e-01, -3.936429433608998e-01, -3.936429433608998e-01, -4.727824172755783e-01, -2.186610391348535e-01, -2.441238559702969e-01, -2.790887393105028e-01, -2.607599642615314e-01, -2.607599642615314e-01, -3.557291982604571e-01, -4.829834773317960e-02, -6.445155090487269e-02, -2.537781458444333e-01, -8.972347565891259e-02, -8.972347565891257e-02, -1.456605553934112e-02, -1.803386498134820e-03, -3.425439013988985e-03, -8.554193417208514e-02, -5.098952033992725e-03, -5.098952033992718e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_s12h_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.866889139179852e+01, -1.866899691133340e+01, -1.866941397562357e+01, -1.866768717368173e+01, -1.866894748789587e+01, -1.866894748789587e+01, -2.916609471838041e+00, -2.916673882237221e+00, -2.918569477650835e+00, -2.915927691370623e+00, -2.916655022671092e+00, -2.916655022671092e+00, -5.345397606785931e-01, -5.339010322938832e-01, -5.226392211170066e-01, -5.263552618062229e-01, -5.343053864856248e-01, -5.343053864856248e-01, -1.595985858454395e-01, -1.599573938344536e-01, -6.519834050324036e-01, -1.427390239596576e-01, -1.596756148670264e-01, -1.596756148670264e-01, -1.651849192112717e-02, -1.729330401666256e-02, -6.638663798440346e-02, -7.958373274884216e-03, -1.711327986960444e-02, -1.711327986960444e-02, -4.712043064013009e+00, -4.716306255930689e+00, -4.712474314984367e+00, -4.715789383790912e+00, -4.714238100853481e+00, -4.714238100853481e+00, -1.575299411372895e+00, -1.584811262183524e+00, -1.573274742298768e+00, -1.580532395299242e+00, -1.584920659841660e+00, -1.584920659841660e+00, -4.969682268519410e-01, -5.957645647424398e-01, -4.675006074401656e-01, -5.359938443617700e-01, -5.253507321224737e-01, -5.253507321224737e-01, -1.247305296131967e-01, -1.811905746885558e-01, -1.218534974146276e-01, -1.811881602062884e+00, -1.314361880849583e-01, -1.314361880849583e-01, -7.677665560449171e-03, -8.771668337725117e-03, -6.574828997118250e-03, -8.721748486144387e-02, -7.992257727364203e-03, -7.992257727364203e-03, -5.696665014954918e-01, -5.639727392918262e-01, -5.664628638550070e-01, -5.680232570620268e-01, -5.672799558202029e-01, -5.672799558202029e-01, -5.514972895345854e-01, -4.065263379011775e-01, -4.425510023688353e-01, -4.913501139406448e-01, -4.655946156055890e-01, -4.655946156055891e-01, -6.236296482374143e-01, -2.090592230506016e-01, -2.311932364347872e-01, -2.813518448350742e-01, -2.512836959518693e-01, -2.512836959518693e-01, -3.652172866270696e-01, -6.231653582684706e-02, -8.090520784470416e-02, -2.709821898450268e-01, -1.046969066136415e-01, -1.046969066136415e-01, -1.933998714443729e-02, -2.404313080346880e-03, -4.565965712389382e-03, -9.970713408700241e-02, -6.793480569176661e-03, -6.793480569176652e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_s12h_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.631269069002025e-09, -5.631134701957803e-09, -5.630610233084312e-09, -5.632808794516911e-09, -5.631197581999482e-09, -5.631197581999482e-09, -8.950758146986631e-06, -8.950485740070464e-06, -8.941405304028742e-06, -8.949316907159730e-06, -8.950465566674738e-06, -8.950465566674738e-06, -5.925405292987012e-03, -5.918343595824920e-03, -5.566167062947172e-03, -5.448619196668739e-03, -5.923023869017735e-03, -5.923023869017735e-03, -5.034224466246489e-01, -5.069710977869514e-01, -3.197962090240892e-03, -6.241781533084260e-01, -5.049254862022896e-01, -5.049254862022896e-01, -2.606631994931272e+00, -2.614436658696603e+00, -1.126239303853365e+00, -1.841798633295517e+00, -2.715946760339489e+00, -2.715946760339489e+00, -1.263502124522953e-06, -1.253585643388493e-06, -1.262508335506119e-06, -1.254797881606902e-06, -1.258397730896248e-06, -1.258397730896248e-06, -6.784147683189040e-05, -6.689554997683368e-05, -6.725648997692815e-05, -6.653755682143497e-05, -6.792410840081841e-05, -6.792410840081841e-05, -1.109683342454121e-02, -1.962860406886771e-03, -1.396668774438817e-02, -5.188783624170577e-03, -8.986296796474929e-03, -8.986296796474929e-03, -6.652682791272284e-01, -2.677739026475504e-01, -7.654396220513591e-01, -2.317883159398866e-05, -7.426554680267818e-01, -7.426554680267818e-01, -1.953823496380847e+00, -1.958187952087361e+00, -5.604522542089070e+00, -1.132795909146571e+00, -2.892360310743375e+00, -2.892360310743372e+00, -4.169165198672760e-04, -2.046553328770769e-03, -1.361553492130291e-03, -9.034731076612090e-04, -1.123801471628884e-03, -1.123801471628884e-03, -2.795350466992979e-04, -1.980799924008076e-02, -1.709982294098294e-02, -1.101913375561406e-02, -1.456716497191277e-02, -1.456716497191276e-02, -1.840489663640378e-03, -1.642327509484454e-01, -1.220614019159909e-01, -7.791701458958500e-02, -1.006557314216046e-01, -1.006557314216047e-01, -2.923864671054131e-02, -9.463056886326425e-01, -9.630653540866070e-01, -1.083695871271572e-01, -1.121846086482765e+00, -1.121846086482766e+00, -1.959431131488705e+00, -3.365921143151230e+00, -2.898638495112728e+00, -1.378224763037226e+00, -4.223664909343848e+00, -4.223664909343841e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
