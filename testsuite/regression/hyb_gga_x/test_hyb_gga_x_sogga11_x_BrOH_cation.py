
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_sogga11_x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.215489483631970e+01, -1.215492249751770e+01, -1.215506594022230e+01, -1.215465397108337e+01, -1.215486692651201e+01, -1.215486692651201e+01, -1.990866614441024e+00, -1.990862857007967e+00, -1.990824611142864e+00, -1.991268974158718e+00, -1.990910231769726e+00, -1.990910231769726e+00, -3.883422771511688e-01, -3.880255540987098e-01, -3.803238974570176e-01, -3.833672136621326e-01, -3.823374037619929e-01, -3.823374037619929e-01, -9.199260229751904e-02, -9.566335815910236e-02, -4.518533070839146e-01, -2.868674775193577e-02, -8.082008022253598e-02, -8.082008022253591e-02, 2.471620629344635e-06, 2.916069442827767e-06, 1.127770367131908e-04, 5.697662958036825e-07, 1.487795977281047e-06, 1.487795977281047e-06, -2.947797932666667e+00, -2.947990839714608e+00, -2.947810519391985e+00, -2.947980773357284e+00, -2.947893809004235e+00, -2.947893809004235e+00, -1.142691065187980e+00, -1.150436778931133e+00, -1.137782914580327e+00, -1.144681936133916e+00, -1.149287813788227e+00, -1.149287813788227e+00, -3.349299012580502e-01, -3.574802752709577e-01, -3.108909346965781e-01, -3.176470800268650e-01, -3.400582404054785e-01, -3.400582404054786e-01, -4.891162519367715e-04, -6.337199008253211e-02, -7.140521232378427e-04, -1.076091485920422e+00, -7.511421667688408e-03, -7.511421667688408e-03, 3.409057206612618e-07, 5.711480897145231e-07, 5.863310443694335e-07, -4.852294452917516e-04, 8.053488682183348e-07, 8.053488682183351e-07, -3.286451834283121e-01, -3.286314345164572e-01, -3.286658492768476e-01, -3.286680846212571e-01, -3.286693713668047e-01, -3.286693713668047e-01, -3.191440032332234e-01, -2.848814476560116e-01, -2.955501158097980e-01, -3.054771477328003e-01, -3.004599531928782e-01, -3.004599531928782e-01, -3.750837522469112e-01, -1.123747070866570e-01, -1.517183140596722e-01, -2.018719163984095e-01, -1.771284812077777e-01, -1.771284812077777e-01, -2.624417920734871e-01, 1.151387143661369e-04, 2.205898550281138e-05, -1.931201988862734e-01, -7.247052672242172e-04, -7.247052672242173e-04, 5.762814281595936e-06, 6.012867148884809e-08, 2.030043469821970e-07, -8.730429450766433e-04, 6.856677805171881e-07, 6.856677805171875e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_sogga11_x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.564616011167689e+01, -1.564613992796366e+01, -1.564621020893573e+01, -1.564617632220578e+01, -1.564638105972168e+01, -1.564641817702531e+01, -1.564581503268300e+01, -1.564569681305769e+01, -1.564618945649394e+01, -1.564599294274852e+01, -1.564618945649394e+01, -1.564599294274852e+01, -2.549324348848300e+00, -2.549276469725538e+00, -2.549330677316800e+00, -2.549277034417490e+00, -2.549426193961898e+00, -2.549466157195051e+00, -2.549672446064960e+00, -2.549693731073433e+00, -2.548903231540452e+00, -2.549828624322901e+00, -2.548903231540452e+00, -2.549828624322901e+00, -4.930746685388269e-01, -4.945789171644873e-01, -4.924806290084432e-01, -4.943032900867156e-01, -4.859168883627634e-01, -4.849803232482373e-01, -4.888367663675762e-01, -4.891351448274072e-01, -4.978278558871155e-01, -5.003621000351918e-01, -4.978278558871155e-01, -5.003621000351918e-01, -2.238301432961475e-01, -2.112960340797644e-01, -2.142821305845499e-01, -2.011900758123806e-01, -5.661295660688381e-01, -5.836676379354172e-01, -2.144099457899387e-01, -2.203519072176162e-01, -2.278631678652505e-01, -1.789694041530048e-02, -2.278631678652505e-01, -1.789694041530064e-02, 8.143666879594024e-06, 9.616982958131524e-06, 9.511405653093311e-06, 1.151191322610653e-05, 1.762856277205511e-05, -1.010298766791327e-04, 1.888808536017451e-06, 1.782531001823787e-06, 5.900014261178353e-06, 1.852405201721485e-06, 5.900014261178344e-06, 1.852405201721486e-06, -3.815078832080728e+00, -3.814162530567642e+00, -3.815852679436825e+00, -3.814909897719407e+00, -3.815125301138767e+00, -3.814190708251677e+00, -3.815789228866256e+00, -3.814869596763479e+00, -3.815472187840747e+00, -3.814537179194844e+00, -3.815472187840747e+00, -3.814537179194844e+00, -1.462819465755830e+00, -1.462752994443076e+00, -1.470947308822768e+00, -1.470606950876588e+00, -1.461977352224767e+00, -1.461880112289616e+00, -1.468363366511938e+00, -1.468612572571715e+00, -1.469446363371378e+00, -1.467052092064129e+00, -1.469446363371378e+00, -1.467052092064129e+00, -4.304799291473393e-01, -4.293371731695831e-01, -4.683319530383285e-01, -4.686100067019597e-01, -3.907239277581049e-01, -4.049488332814539e-01, -4.073308755873585e-01, -4.208122563767358e-01, -4.475991526232904e-01, -4.253203188018914e-01, -4.475991526232904e-01, -4.253203188018915e-01, 4.473443667539182e-03, 3.430370690221811e-03, -3.030318366514039e-01, -3.037767539908180e-01, 4.221047793339743e-03, 5.172515632461737e-03, -1.411596261701385e+00, -1.410972828470414e+00, -4.916365398262650e-02, -1.315968825453074e-01, -4.916365398262650e-02, -1.315968825453074e-01, 1.003897568509118e-06, 1.047432488963177e-06, 1.845585305936214e-06, 1.857482822906967e-06, 1.779981005102110e-06, 2.190952176488814e-06, -3.527608095082286e-03, -3.545870970676776e-03, 1.387053996985461e-06, 3.323407924476950e-06, 1.387053996985467e-06, 3.323407924476929e-06, -4.343193057490000e-01, -4.360356796611730e-01, -4.300804324928141e-01, -4.318001241905709e-01, -4.314636123182134e-01, -4.331926528927730e-01, -4.326992725514768e-01, -4.344093829236895e-01, -4.320713685360206e-01, -4.337909751876489e-01, -4.320713685360206e-01, -4.337909751876489e-01, -4.233709110770590e-01, -4.247763932989166e-01, -3.615866726697321e-01, -3.630799335716232e-01, -3.772592847478744e-01, -3.789015529404348e-01, -3.938761550858320e-01, -3.952648165152796e-01, -3.852958643285985e-01, -3.867209682107930e-01, -3.852958643285985e-01, -3.867209682107930e-01, -4.904643597914449e-01, -4.913600763038711e-01, -2.964689110010765e-01, -2.945450244593302e-01, -2.465625466537844e-01, -2.433439619793299e-01, -2.559836549348184e-01, -2.573169484551840e-01, -2.335365261074013e-01, -2.330564514068734e-01, -2.335365261074010e-01, -2.330564514068735e-01, -3.326459758686008e-01, -3.347950203596806e-01, 8.229140444097369e-05, 7.249090432313872e-05, -1.001108339012254e-03, -1.285609523405389e-03, -2.443037830358381e-01, -2.479003264697683e-01, 1.022807548433438e-03, 4.479249858209316e-03, 1.022807548433649e-03, 4.479249858209369e-03, 1.996067102816817e-05, 2.222133034047510e-05, 1.173790342154112e-07, 1.382373137601960e-07, 5.169769214921992e-07, 6.207713321401881e-07, 2.672674080578802e-04, 7.847027207537553e-04, 1.641624628558356e-06, 2.647671386432307e-06, 1.641624628558349e-06, 2.647671386432309e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_sogga11_x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.837559035750612e-09, 0.000000000000000e+00, -2.837577726794797e-09, -2.837573450663309e-09, 0.000000000000000e+00, -2.837588168948311e-09, -2.837544013236128e-09, 0.000000000000000e+00, -2.837567141598476e-09, -2.837383168997222e-09, 0.000000000000000e+00, -2.837361521587679e-09, -2.837571448318456e-09, 0.000000000000000e+00, -2.837388133988084e-09, -2.837571448318456e-09, 0.000000000000000e+00, -2.837388133988084e-09, -3.365496544518728e-06, 0.000000000000000e+00, -3.368288199152921e-06, -3.365780856339742e-06, 0.000000000000000e+00, -3.368765072167694e-06, -3.374634830220712e-06, 0.000000000000000e+00, -3.376884094270380e-06, -3.357142468669305e-06, 0.000000000000000e+00, -3.359812937073161e-06, -3.366720655425363e-06, 0.000000000000000e+00, -3.367324868857059e-06, -3.366720655425363e-06, 0.000000000000000e+00, -3.367324868857059e-06, -1.683613895809313e-03, 0.000000000000000e+00, -1.735010836363867e-03, -1.666658738649922e-03, 0.000000000000000e+00, -1.730541789620612e-03, -1.379979745772251e-03, 0.000000000000000e+00, -1.218887313191013e-03, -1.268747527284697e-03, 0.000000000000000e+00, -1.319084969641583e-03, -1.795361161022973e-03, 0.000000000000000e+00, 2.222957908872706e-04, -1.795361161022973e-03, 0.000000000000000e+00, 2.222957908872706e-04, 1.646146080068704e+00, 0.000000000000000e+00, 1.196023336663629e+00, 1.429084790687250e+00, 0.000000000000000e+00, 9.669851033754443e-01, -9.909213063625084e-04, 0.000000000000000e+00, -1.023118240891463e-03, 4.933112575753364e+00, 0.000000000000000e+00, 4.792000626530120e+00, 1.329860823691482e+00, 0.000000000000000e+00, 1.171468009990989e+00, 1.329860823691482e+00, 0.000000000000000e+00, 1.171468009991014e+00, -1.673406969483873e+00, 0.000000000000000e+00, -1.644367355453125e+00, -1.749741554249666e+00, 0.000000000000000e+00, -1.723689337053135e+00, 1.746084362632272e-01, 0.000000000000000e+00, 2.782266395894287e-01, -1.593320401563652e+00, 0.000000000000000e+00, -1.551517625622879e+00, -1.691188490158698e+00, 0.000000000000000e+00, -4.389718292266333e+00, -1.691188490158650e+00, 0.000000000000000e+00, -4.389718292266383e+00, -9.362765762588880e-07, 0.000000000000000e+00, -9.370389203892344e-07, -9.389112955912900e-07, 0.000000000000000e+00, -9.395874349471245e-07, -9.364042629716453e-07, 0.000000000000000e+00, -9.371131456684868e-07, -9.386650717328575e-07, 0.000000000000000e+00, -9.394284162320084e-07, -9.376395026510746e-07, 0.000000000000000e+00, -9.383204708978681e-07, -9.376395026510746e-07, 0.000000000000000e+00, -9.383204708978681e-07, -1.408971092001758e-05, 0.000000000000000e+00, -1.409038599239412e-05, -1.444545920576446e-05, 0.000000000000000e+00, -1.444342758888491e-05, -1.213485902165325e-05, 0.000000000000000e+00, -1.275356692770897e-05, -1.260985224087864e-05, 0.000000000000000e+00, -1.316614321092576e-05, -1.544371401886769e-05, 0.000000000000000e+00, -1.446068135777427e-05, -1.544371401886769e-05, 0.000000000000000e+00, -1.446068135777427e-05, -4.506116821665933e-03, 0.000000000000000e+00, -4.561498378126319e-03, -5.432147689575248e-03, 0.000000000000000e+00, -5.458976862224892e-03, -5.999502043625516e-03, 0.000000000000000e+00, -5.480118842984247e-03, -8.762054053625385e-03, 0.000000000000000e+00, -7.623208230467690e-03, -4.152816016202488e-03, 0.000000000000000e+00, -4.970918968921650e-03, -4.152816016202463e-03, 0.000000000000000e+00, -4.970918968921639e-03, -3.502122711864570e-01, 0.000000000000000e+00, -2.707946970823842e-01, 2.006212307503280e+00, 0.000000000000000e+00, 1.969141188104835e+00, -5.020089947682641e-01, 0.000000000000000e+00, -4.861762735219116e-01, -6.699207656993481e-05, 0.000000000000000e+00, -6.713613112150757e-05, 2.365533678905308e+00, 0.000000000000000e+00, 5.996994516569781e+00, 2.365533678905308e+00, 0.000000000000000e+00, 5.996994516569781e+00, -2.251803333364024e+00, 0.000000000000000e+00, -1.948889412380408e+00, -1.925308390492773e+00, 0.000000000000000e+00, -1.777951750217903e+00, -1.089135287080341e+01, 0.000000000000000e+00, -1.205482138048353e+01, 9.326731649243419e-01, 0.000000000000000e+00, 9.058411674644420e-01, -5.455618303318349e+00, 0.000000000000000e+00, -5.265010023392020e+00, -5.455618303318275e+00, 0.000000000000000e+00, -5.265010023391997e+00, -8.753200948352129e-03, 0.000000000000000e+00, -8.640631948027383e-03, -7.740311876070933e-03, 0.000000000000000e+00, -7.653703246027403e-03, -8.074925038029236e-03, 0.000000000000000e+00, -7.982218642894952e-03, -8.371898071324404e-03, 0.000000000000000e+00, -8.267256578930468e-03, -8.221597740580228e-03, 0.000000000000000e+00, -8.122900088703601e-03, -8.221597740580228e-03, 0.000000000000000e+00, -8.122900088703601e-03, -1.021338108245703e-02, 0.000000000000000e+00, -1.008304860122544e-02, -6.055750914421564e-03, 0.000000000000000e+00, -6.017392367619495e-03, -6.736231928683246e-03, 0.000000000000000e+00, -6.692621546643323e-03, -7.815366937125378e-03, 0.000000000000000e+00, -7.738607304275234e-03, -7.228363470266610e-03, 0.000000000000000e+00, -7.153830014081215e-03, -7.228363470266610e-03, 0.000000000000000e+00, -7.153830014081215e-03, -4.399981076116482e-03, 0.000000000000000e+00, -4.416786527292959e-03, 6.271038670854935e-01, 0.000000000000000e+00, 6.018779590542556e-01, 1.212638831039495e-01, 0.000000000000000e+00, 1.038143865653085e-01, -2.110308656834506e-02, 0.000000000000000e+00, -2.089673480579391e-02, -5.530872970928956e-03, 0.000000000000000e+00, -6.388924112761996e-03, -5.530872970928761e-03, 0.000000000000000e+00, -6.388924112762065e-03, -8.240175366288474e-03, 0.000000000000000e+00, -8.191247922168710e-03, 9.321742907624847e-02, 0.000000000000000e+00, 1.046769485730684e-01, 5.790411699869424e-01, 0.000000000000000e+00, 6.527912147281635e-01, -3.264647938457524e-02, 0.000000000000000e+00, -3.165186367258703e-02, -3.947108144994238e-01, 0.000000000000000e+00, -8.959569059989448e-01, -3.947108144994520e-01, 0.000000000000000e+00, -8.959569059989559e-01, -1.261226422039879e+00, 0.000000000000000e+00, -1.275164824205357e+00, -7.002040942401838e+00, 0.000000000000000e+00, -1.239142358883589e+01, -4.294490084534525e+00, 0.000000000000000e+00, -4.564829473628678e+00, -3.063245925428686e-01, 0.000000000000000e+00, -3.938625390099356e-01, -1.118243867606286e+01, 0.000000000000000e+00, -5.495861609674106e+00, -1.118243867606327e+01, 0.000000000000000e+00, -5.495861609674447e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
