
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_s12h_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.567004036490848e+01, -1.567005931418632e+01, -1.567019675715403e+01, -1.566991376663069e+01, -1.567005446740474e+01, -1.567005446740474e+01, -2.606980461940135e+00, -2.606943276042836e+00, -2.606148468530583e+00, -2.608026600988484e+00, -2.606998720761732e+00, -2.606998720761732e+00, -5.298330673552607e-01, -5.300243420662188e-01, -5.360219082369865e-01, -5.394818379022945e-01, -5.379554834636048e-01, -5.379554834636048e-01, -1.668406775112809e-01, -1.677476286432775e-01, -6.096717428337949e-01, -1.394077794079221e-01, -1.502467960742687e-01, -1.502467960742687e-01, -7.369863140201213e-03, -7.756627374830259e-03, -4.233841661346784e-02, -4.257563966122166e-03, -5.349389765367460e-03, -5.349389765367460e-03, -3.769517687703318e+00, -3.769277477473569e+00, -3.769513488782463e+00, -3.769301206427362e+00, -3.769391082234733e+00, -3.769391082234733e+00, -1.621916053348581e+00, -1.628552315634893e+00, -1.624944971849820e+00, -1.630855798846162e+00, -1.624049986913341e+00, -1.624049986913341e+00, -4.349798036921910e-01, -4.558873775069292e-01, -4.064096205745967e-01, -4.046148537622142e-01, -4.388769448715368e-01, -4.388769448715368e-01, -1.043287989534193e-01, -1.779534032072290e-01, -9.723445400448739e-02, -1.372610042716394e+00, -1.177543859302920e-01, -1.177543859302920e-01, -3.285134858702410e-03, -4.162124709163184e-03, -3.182352623921643e-03, -6.727249829195592e-02, -3.833756124944632e-03, -3.833756124944632e-03, -4.208648924860620e-01, -4.191685499497532e-01, -4.196542535816416e-01, -4.201492432748942e-01, -4.198911457476527e-01, -4.198911457476527e-01, -4.094020564757628e-01, -3.875675070900413e-01, -3.885059984883737e-01, -3.914631222691233e-01, -3.892022614427063e-01, -3.892022614427063e-01, -4.781942353185648e-01, -2.134694946751587e-01, -2.407272174254721e-01, -2.789129649121189e-01, -2.590386153141051e-01, -2.590386153141051e-01, -3.579481956924681e-01, -4.058067626129044e-02, -5.485442380769438e-02, -2.585028270076153e-01, -8.361686996260589e-02, -8.361686996260591e-02, -1.039764365671759e-02, -1.112694128365736e-03, -2.335486991378684e-03, -7.905014312953790e-02, -3.547450902894131e-03, -3.547450902894129e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_s12h_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.866950804710490e+01, -1.866962927658142e+01, -1.867007335688849e+01, -1.866827170980483e+01, -1.866922920479171e+01, -1.866922920479171e+01, -2.916812662965298e+00, -2.916891378660645e+00, -2.918788934845475e+00, -2.916051538453718e+00, -2.916977357147120e+00, -2.916977357147120e+00, -5.389170312276895e-01, -5.381153386905081e-01, -5.241028441610939e-01, -5.282263453168664e-01, -5.271768826536355e-01, -5.271768826536355e-01, -1.608099185199933e-01, -1.609195355008060e-01, -6.316690672467650e-01, -1.464796125276698e-01, -1.508530798534763e-01, -1.508530798534763e-01, -9.818114910393720e-03, -1.033213997817599e-02, -5.521396667944977e-02, -5.675214412101399e-03, -7.129081689289597e-03, -7.129081689289597e-03, -4.714429033327882e+00, -4.718827972007105e+00, -4.714618287943447e+00, -4.718502069090400e+00, -4.716667570959065e+00, -4.716667570959065e+00, -1.576424241526884e+00, -1.586295106690402e+00, -1.572170748878689e+00, -1.580605172979551e+00, -1.584267565343028e+00, -1.584267565343028e+00, -5.015515395053313e-01, -6.016332820693763e-01, -4.563680744601945e-01, -5.278992238668767e-01, -5.170781750003145e-01, -5.170781750003145e-01, -1.226082787176210e-01, -1.801126588507954e-01, -1.157423294585624e-01, -1.813897789922966e+00, -1.300099953212565e-01, -1.300099953212565e-01, -4.379369087424928e-03, -5.547941259644973e-03, -4.241391049381832e-03, -8.428820268032627e-02, -5.109592689076694e-03, -5.109592689076694e-03, -5.607296272160280e-01, -5.538162433855786e-01, -5.568217864796994e-01, -5.588146358115840e-01, -5.578710475245547e-01, -5.578710475245547e-01, -5.457963238654943e-01, -3.960430530150239e-01, -4.293414732970632e-01, -4.823300482297607e-01, -4.536227668133109e-01, -4.536227668133109e-01, -6.294388062822639e-01, -2.070697800011212e-01, -2.281120607692864e-01, -2.786382769175086e-01, -2.474508777767195e-01, -2.474508777767195e-01, -3.642559708548536e-01, -5.306899253967695e-02, -7.055029540979955e-02, -2.724320182059071e-01, -1.002568451647979e-01, -1.002568451647979e-01, -1.384241599097810e-02, -1.483526223241922e-03, -3.113558383859982e-03, -9.592593092042848e-02, -4.728080583459963e-03, -4.728080583459958e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_s12h_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.630508988118521e-09, -5.630354627628346e-09, -5.629795855312773e-09, -5.632089539430830e-09, -5.630869665780551e-09, -5.630869665780551e-09, -8.948873562415711e-06, -8.948550835679703e-06, -8.940078442569556e-06, -8.947843514227807e-06, -8.947623774418954e-06, -8.947623774418954e-06, -5.975309069384198e-03, -5.972277916696176e-03, -5.716822300738000e-03, -5.575686505161721e-03, -5.641520246503208e-03, -5.641520246503208e-03, -4.571417350773785e-01, -4.624053414473837e-01, -3.364796723035978e-03, -5.344961691658680e-01, -5.373042270324713e-01, -5.373042270324712e-01, -1.236697947986502e+00, -1.306662017162820e+00, -7.418785524783260e-01, -1.123292920026055e+00, -1.427357628317130e+00, -1.427357628317133e+00, -1.260435665993723e-06, -1.250216645512061e-06, -1.260006881466648e-06, -1.250985808782468e-06, -1.255240696420244e-06, -1.255240696420244e-06, -6.791412342786619e-05, -6.692875781094347e-05, -6.710245762715830e-05, -6.625925171467755e-05, -6.774465671438820e-05, -6.774465671438820e-05, -1.066964248759886e-02, -2.072122098446600e-03, -1.502561678232425e-02, -5.176938368710628e-03, -9.570713423055190e-03, -9.570713423055190e-03, -5.557337258222218e-01, -2.594737406807613e-01, -6.061943009183509e-01, -2.318167018542012e-05, -7.006511319943011e-01, -7.006511319943011e-01, -1.479982530934026e+00, -1.322037785432612e+00, -8.303422484354694e+00, -8.600790435126195e-01, -3.864047919477832e+00, -3.864047919477825e+00, -6.116818538207867e-04, -2.701453504350593e-03, -1.852512106604022e-03, -1.234457166463442e-03, -1.532419640834582e-03, -1.532419640834582e-03, -2.561049513508610e-04, -2.081529123650978e-02, -1.862652945546845e-02, -1.210351783736630e-02, -1.608351633535583e-02, -1.608351633535583e-02, -1.954432320600799e-03, -1.635421263059939e-01, -1.223484456296881e-01, -7.828411099580317e-02, -1.014864524918251e-01, -1.014864524918251e-01, -2.867663479262435e-02, -6.753538382028940e-01, -6.809340401049300e-01, -1.023383154617328e-01, -9.819237240188108e-01, -9.819237240188115e-01, -9.971924584670693e-01, -6.486582745415912e+00, -3.139538000318151e+00, -9.847783820182712e-01, -4.880580646195045e+00, -4.880580646195058e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
