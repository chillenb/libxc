
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_cam_s12g_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.059999074162027e+01, -2.060001732281504e+01, -2.060020825471053e+01, -2.059977158700033e+01, -2.060000415483878e+01, -2.060000415483878e+01, -3.174887687986545e+00, -3.174856085873685e+00, -3.174131401135508e+00, -3.176112173704734e+00, -3.174886091977676e+00, -3.174886091977676e+00, -5.152246791926373e-01, -5.153874313564771e-01, -5.212680800625172e-01, -5.247247095047106e-01, -5.152802432140575e-01, -5.152802432140575e-01, -1.508976149845290e-01, -1.514338239716823e-01, -6.104435969507229e-01, -1.232865283450007e-01, -1.510438833021003e-01, -1.510438833021003e-01, -1.086350028132571e-02, -1.137734986960596e-02, -4.550575441458691e-02, -5.217785568457823e-03, -1.125881599082785e-02, -1.125881599082785e-02, -4.745864850065051e+00, -4.745900708228278e+00, -4.745872976215688e+00, -4.745900700993479e+00, -4.745875189466302e+00, -4.745875189466302e+00, -1.860383023645802e+00, -1.869202612756622e+00, -1.862830947912370e+00, -1.869730555468923e+00, -1.863061509696604e+00, -1.863061509696604e+00, -4.099533832495644e-01, -4.385043005502864e-01, -3.880310408204022e-01, -3.954457422636394e-01, -4.248180491835781e-01, -4.248180491835781e-01, -9.660667051154977e-02, -1.646547664947769e-01, -9.502219687566607e-02, -1.582817332463271e+00, -1.081102738236318e-01, -1.081102738236318e-01, -5.033588534845000e-03, -5.752087039456780e-03, -4.311284263304177e-03, -6.234165817764763e-02, -5.241020476715760e-03, -5.241020476715760e-03, -4.132249177951825e-01, -4.110263893595412e-01, -4.117631022439752e-01, -4.123733648729985e-01, -4.120636793473931e-01, -4.120636793473931e-01, -3.982364850526480e-01, -3.658252446561458e-01, -3.694634389886820e-01, -3.764582239452798e-01, -3.721672609178260e-01, -3.721672609178260e-01, -4.629847266479478e-01, -1.973199595075754e-01, -2.210380714724426e-01, -2.534305550902315e-01, -2.363142293868402e-01, -2.363142293868401e-01, -3.293548588345784e-01, -4.230966278716897e-02, -5.659068182242110e-02, -2.292136551146721e-01, -7.924168979735464e-02, -7.924168979735464e-02, -1.272839824973695e-02, -1.575327982933477e-03, -2.992302560377238e-03, -7.554461543581611e-02, -4.454374743439320e-03, -4.454374743439313e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_cam_s12g_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.507497616755889e+01, -2.507512721970224e+01, -2.507571686961981e+01, -2.507324496010036e+01, -2.507505653143672e+01, -2.507505653143672e+01, -3.692057239166142e+00, -3.692164257217011e+00, -3.695270010971172e+00, -3.690750308651703e+00, -3.692128908515059e+00, -3.692128908515059e+00, -5.359466451409983e-01, -5.349948779970934e-01, -5.192306455214344e-01, -5.236403763811772e-01, -5.355978635994848e-01, -5.355978635994848e-01, -1.418037735981002e-01, -1.416256955593445e-01, -6.871143210234202e-01, -1.299177150058386e-01, -1.417175204300210e-01, -1.417175204300210e-01, -1.444156749258523e-02, -1.512020821125819e-02, -5.856014962996194e-02, -6.953041328861938e-03, -1.496276947727422e-02, -1.496276947727422e-02, -6.123585942213422e+00, -6.128581348990314e+00, -6.124092825436784e+00, -6.127977387841261e+00, -6.126158736541879e+00, -6.126158736541879e+00, -1.855699295667290e+00, -1.867430756419550e+00, -1.853963690060771e+00, -1.862777546565261e+00, -1.867067130238383e+00, -1.867067130238383e+00, -5.022179947532386e-01, -6.018740319400187e-01, -4.676558681295928e-01, -5.357434529450044e-01, -5.349593912483290e-01, -5.349593912483290e-01, -1.124914405470831e-01, -1.652214751330963e-01, -1.099737807108701e-01, -2.167337606503283e+00, -1.193185744075486e-01, -1.193185744075486e-01, -6.707746546773336e-03, -7.663914119539201e-03, -5.744429069529731e-03, -7.757360079792201e-02, -6.982934619525526e-03, -6.982934619525526e-03, -5.692065245093125e-01, -5.641075448246065e-01, -5.662135103727606e-01, -5.676114375599394e-01, -5.669348386876474e-01, -5.669348386876474e-01, -5.481456150184203e-01, -3.912627014241301e-01, -4.385170736481280e-01, -4.912994608403751e-01, -4.649861023086700e-01, -4.649861023086700e-01, -6.354174297353480e-01, -1.896118701380725e-01, -2.070066825683343e-01, -2.546879055588721e-01, -2.234534321683478e-01, -2.234534321683478e-01, -3.443325479086919e-01, -5.486243410726357e-02, -7.166474455362333e-02, -2.489576720676126e-01, -9.403606628752707e-02, -9.403606628752706e-02, -1.691110970727902e-02, -2.100288136037859e-03, -3.988788173164749e-03, -8.954954553010426e-02, -5.935386037286468e-03, -5.935386037286459e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_cam_s12g_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.318418437181892e-09, -6.318211830275691e-09, -6.317455764269424e-09, -6.320835632445049e-09, -6.318308095200202e-09, -6.318308095200202e-09, -1.008058445865065e-05, -1.007972412471569e-05, -1.005432456087235e-05, -1.008961519834101e-05, -1.007997544094046e-05, -1.007997544094046e-05, -5.950708000800811e-03, -5.950795675503822e-03, -5.659153559494078e-03, -5.544043889573732e-03, -5.950945300657908e-03, -5.950945300657908e-03, -4.693089096476625e-01, -4.763732827036060e-01, -3.066666792473560e-03, -5.233800373952439e-01, -4.718818921991341e-01, -4.718818921991341e-01, -1.931569828448759e+00, -1.937619076598083e+00, -8.474361613959822e-01, -1.363285420261197e+00, -2.012844698022300e+00, -2.012844698022300e+00, -1.198979497984700e-06, -1.187008546666624e-06, -1.197778381677766e-06, -1.188469923655205e-06, -1.192807778233350e-06, -1.192807778233350e-06, -8.177410965128223e-05, -8.076294082640914e-05, -8.096404097058992e-05, -8.021567114118208e-05, -8.203974493492155e-05, -8.203974493492155e-05, -9.020479965728327e-03, -1.178267988855792e-03, -1.158860688123584e-02, -3.265880240879971e-03, -6.975631696390381e-03, -6.975631696390381e-03, -5.261998400497764e-01, -2.332235289758079e-01, -6.073586559916742e-01, -1.660469016012156e-05, -6.050531773425337e-01, -6.050531773425337e-01, -1.446189278970156e+00, -1.449534400125450e+00, -4.148637847892758e+00, -8.662759857621581e-01, -2.141055165531567e+00, -2.141055165531566e+00, -2.380988268838124e-04, -1.210913749171008e-03, -7.932384035619638e-04, -5.211613180011564e-04, -6.513283578339643e-04, -6.513283578339643e-04, -1.587416851215495e-04, -1.888362089272939e-02, -1.444721961929404e-02, -7.771909534302217e-03, -1.130027736032805e-02, -1.130027736032805e-02, -1.118440427287198e-03, -1.498134055931298e-01, -1.172160618153553e-01, -7.611262149931461e-02, -9.982181918505839e-02, -9.982181918505842e-02, -2.818200982227461e-02, -7.094892132497744e-01, -7.302533071657958e-01, -9.860238379417501e-02, -8.784726633237151e-01, -8.784726633237164e-01, -1.452365199568553e+00, -2.490843507696514e+00, -2.145212185946621e+00, -1.079792107403195e+00, -3.126411798227668e+00, -3.126411798227662e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
