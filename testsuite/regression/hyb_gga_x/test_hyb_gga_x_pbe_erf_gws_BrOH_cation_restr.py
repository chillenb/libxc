
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_pbe_erf_gws_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.066378730493527e+01, -2.066381478818960e+01, -2.066400461680615e+01, -2.066359432969795e+01, -2.066379969072786e+01, -2.066379969072786e+01, -3.195974973592265e+00, -3.195938077702455e+00, -3.195170214988124e+00, -3.197163803675966e+00, -3.196014311150534e+00, -3.196014311150534e+00, -4.407495017848211e-01, -4.405772269141768e-01, -4.374322708956676e-01, -4.422421212744385e-01, -4.406396531577141e-01, -4.406396531577141e-01, -2.643113391589354e-02, -2.750040324325651e-02, -5.455173440149280e-01, -1.234175323959030e-02, -1.703601813775448e-02, -1.703601813775447e-02, -1.365482257741104e-06, -1.592165505216531e-06, -2.645317064647072e-04, -2.630921677099963e-07, -5.219719012480818e-07, -5.219719012480818e-07, -4.757261948571820e+00, -4.756659166414151e+00, -4.757244889290907e+00, -4.756712587220486e+00, -4.756950476973450e+00, -4.756950476973450e+00, -1.830941053506363e+00, -1.841142347414795e+00, -1.831343174996916e+00, -1.840373133875284e+00, -1.836356514350447e+00, -1.836356514350447e+00, -3.387476167392948e-01, -3.652401136529070e-01, -3.015955293908438e-01, -3.042548449476152e-01, -3.449488061284309e-01, -3.449488061284309e-01, -4.407875579611191e-03, -2.713431406173251e-02, -3.525713904143291e-03, -1.546355313282430e+00, -6.944158567367325e-03, -6.944158567367325e-03, -1.208502099905904e-07, -2.457979455529667e-07, -1.098960243590491e-07, -1.109745017451370e-03, -1.921302795110436e-07, -1.921302795110436e-07, -3.188339429504723e-01, -3.203239111185582e-01, -3.198182348045684e-01, -3.193808555127364e-01, -3.196006643466829e-01, -3.196006643466829e-01, -3.039987084139396e-01, -2.670902967505358e-01, -2.784360370145470e-01, -2.887272012218948e-01, -2.834399383235369e-01, -2.834399383235369e-01, -3.932102800972076e-01, -5.180844068001991e-02, -8.087353455925565e-02, -1.398274669855534e-01, -1.078541952845221e-01, -1.078541952845221e-01, -2.314133878874720e-01, -2.321600499889458e-04, -5.832461885285793e-04, -1.259442994103657e-01, -2.251162220889992e-03, -2.251162220890052e-03, -3.837149477573225e-06, -4.695141804353687e-09, -4.342125670507163e-08, -1.874140337741513e-03, -1.522183792426224e-07, -1.522183792426219e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_pbe_erf_gws_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.486658902166447e+01, -2.486668856865390e+01, -2.486710555872218e+01, -2.486562503729111e+01, -2.486640443077312e+01, -2.486640443077312e+01, -3.772041928117695e+00, -3.772085171207157e+00, -3.773184629354836e+00, -3.772039276606167e+00, -3.772190866821672e+00, -3.772190866821672e+00, -5.410849510621365e-01, -5.401750712559649e-01, -5.201420600419047e-01, -5.258836765402637e-01, -5.246312404966662e-01, -5.246312404966662e-01, -4.864053518032860e-02, -5.044162045324585e-02, -6.637693706775107e-01, -2.365535875385831e-02, -3.226552040726596e-02, -3.226552040726598e-02, -2.730664587654615e-06, -3.183943589275878e-06, -5.271230517081605e-04, -5.261650568015596e-07, -1.043883412082904e-06, -1.043883412082904e-06, -5.925886249209233e+00, -5.928604751231486e+00, -5.926008147239683e+00, -5.928408073171844e+00, -5.927265709680360e+00, -5.927265709680360e+00, -1.952295829265344e+00, -1.968578472723197e+00, -1.940016660887064e+00, -1.954158000655323e+00, -1.967508115432051e+00, -1.967508115432051e+00, -4.581715860262445e-01, -5.299982546210157e-01, -4.088486645606519e-01, -4.436517612603570e-01, -4.700643387739091e-01, -4.700643387739091e-01, -8.609676844755406e-03, -4.970050741513048e-02, -6.908251484576647e-03, -2.065330445930290e+00, -1.346378770128392e-02, -1.346378770128392e-02, -2.416951479295081e-07, -4.915786779582920e-07, -2.197875488025786e-07, -2.198409273225326e-03, -3.842491418674714e-07, -3.842491418674714e-07, -4.794583300337438e-01, -4.711864497338502e-01, -4.740301634030030e-01, -4.764324080841078e-01, -4.752245745941951e-01, -4.752245745941951e-01, -4.621240564063614e-01, -3.513405026419477e-01, -3.787109911064908e-01, -4.094591512163921e-01, -3.933690173151127e-01, -3.933690173151127e-01, -5.649806369329048e-01, -8.672620813946304e-02, -1.256287167766051e-01, -2.035428223365433e-01, -1.608041496589888e-01, -1.608041496589888e-01, -3.105998516486697e-01, -4.627587649636844e-04, -1.159258757875800e-03, -1.910530650649845e-01, -4.434106569423053e-03, -4.434106569423178e-03, -7.672620715245527e-06, -9.390260113037985e-09, -8.684155605155513e-08, -3.697948588213745e-03, -3.044290136650505e-07, -3.044290136650496e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_pbe_erf_gws_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.035396561588865e-09, -7.035347957179474e-09, -7.035059821148952e-09, -7.035784441413682e-09, -7.035414995070785e-09, -7.035414995070785e-09, -9.275934262083202e-06, -9.276240855350237e-06, -9.282425358495585e-06, -9.264692072458899e-06, -9.275415100258376e-06, -9.275415100258376e-06, -4.312694141390988e-03, -4.310178735377337e-03, -4.185315763652587e-03, -4.093244113734995e-03, -4.133192617821834e-03, -4.133192617821834e-03, -1.911911338879758e-02, -2.029659857059339e-02, -2.608571527367804e-03, -3.684857748376136e-03, -8.599524122983589e-03, -8.599524122983569e-03, 0.000000000000000e+00, 0.000000000000000e+00, -6.282744346937371e-29, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.054992545577189e-06, -2.055300660656706e-06, -2.054992527290679e-06, -2.055264761120436e-06, -2.055156734791362e-06, -2.055156734791362e-06, -6.727232728416917e-05, -6.608992395660016e-05, -6.703175639087812e-05, -6.600249180549997e-05, -6.671987745546931e-05, -6.671987745546931e-05, -8.127303986094238e-03, -7.161264477189738e-03, -1.016795946125239e-02, -1.048005912644175e-02, -7.873437217998387e-03, -7.873437217998387e-03, -3.228114103235588e-05, -1.807676598219996e-02, -6.699196780045018e-06, -1.149664277681807e-04, -4.086517736995974e-04, -4.086517736995974e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.131912045036665e-11, 0.000000000000000e+00, 0.000000000000000e+00, -9.647500847058857e-03, -9.489426676623450e-03, -9.544605038356632e-03, -9.590856720766152e-03, -9.567729319500706e-03, -9.567729319500706e-03, -1.066002932297844e-02, -1.201346716730396e-02, -1.174539894651424e-02, -1.140317073310469e-02, -1.160401918269239e-02, -1.160401918269239e-02, -6.060431958354102e-03, -2.908781118001028e-02, -3.169230414844040e-02, -2.857100324020685e-02, -3.141228436445716e-02, -3.141228436445714e-02, -1.522517918031179e-02, -1.771664178068990e-31, -1.928416857666874e-17, -3.343894440057248e-02, -1.250937340491089e-07, -1.250937340491058e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.682514771076362e-08, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
