
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_cam_s12h_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.564187131894451e+01, -1.564188747203597e+01, -1.564201698975051e+01, -1.564177550816480e+01, -1.564189381828918e+01, -1.564189381828918e+01, -2.580900602121755e+00, -2.580860458845840e+00, -2.579997284889391e+00, -2.581995127827492e+00, -2.580915442196552e+00, -2.580915442196552e+00, -5.025910828231585e-01, -5.027624114819443e-01, -5.080603748328315e-01, -5.115433569963199e-01, -5.100468236036618e-01, -5.100468236036618e-01, -1.470487793636744e-01, -1.479608281873864e-01, -5.822418714670964e-01, -1.215237056808208e-01, -1.315558522212603e-01, -1.315558522212603e-01, -6.299338864685223e-03, -6.629968949054762e-03, -3.624567889122563e-02, -3.638986186292590e-03, -4.572238392488190e-03, -4.572238392488190e-03, -3.733088914597286e+00, -3.732727286818379e+00, -3.733079681373646e+00, -3.732760194770884e+00, -3.732900390979472e+00, -3.732900390979472e+00, -1.597583314410609e+00, -1.604267648776747e+00, -1.600596737273675e+00, -1.606562445372260e+00, -1.599738463093039e+00, -1.599738463093039e+00, -4.087338636215175e-01, -4.285211205908025e-01, -3.805736193127620e-01, -3.781420732609280e-01, -4.125084165685658e-01, -4.125084165685658e-01, -9.007123506829476e-02, -1.565283858638652e-01, -8.384237353203745e-02, -1.338634962449612e+00, -1.020899054386588e-01, -1.020899054386588e-01, -2.807822304292242e-03, -3.557413169640115e-03, -2.719995059703761e-03, -5.775174995858336e-02, -3.276763897699053e-03, -3.276763897699053e-03, -3.939469059506068e-01, -3.923533771721288e-01, -3.927938595610432e-01, -3.932590625806097e-01, -3.930150120684268e-01, -3.930150120684268e-01, -3.826708719123821e-01, -3.616615618959091e-01, -3.629215413283977e-01, -3.655630426341582e-01, -3.635478988442111e-01, -3.635478988442111e-01, -4.505450908165191e-01, -1.898665773286698e-01, -2.164314929585481e-01, -2.550544794023518e-01, -2.349368681378883e-01, -2.349368681378883e-01, -3.324638080839931e-01, -3.473500129874316e-02, -4.701140085915319e-02, -2.356878175445445e-01, -7.198990451119051e-02, -7.198990451119053e-02, -8.887748402586477e-03, -9.510166147867189e-04, -1.996144781513732e-03, -6.800170676371466e-02, -3.032050268315115e-03, -3.032050268315113e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_cam_s12h_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.839043311467238e+01, -1.839055579735067e+01, -1.839100265130010e+01, -1.838917948554916e+01, -1.839014876833781e+01, -1.839014876833781e+01, -2.853722160786285e+00, -2.853796410013827e+00, -2.855590423958969e+00, -2.853026016788667e+00, -2.853880493672399e+00, -2.853880493672399e+00, -5.156578812076222e-01, -5.149882701167281e-01, -5.038539734784777e-01, -5.078435517541782e-01, -5.067305295493534e-01, -5.067305295493534e-01, -1.448024318649089e-01, -1.449769483726068e-01, -6.061538679533233e-01, -1.300741641160309e-01, -1.347964623038811e-01, -1.347964623038812e-01, -8.392583423876835e-03, -8.832123303775877e-03, -4.736239709862416e-02, -4.850782082417168e-03, -6.093630512688295e-03, -6.093630512688295e-03, -4.635835896373131e+00, -4.640493869794718e+00, -4.636035699319565e+00, -4.640148124785030e+00, -4.638206019036463e+00, -4.638206019036463e+00, -1.552879086050544e+00, -1.562127293461589e+00, -1.549945357949525e+00, -1.557848435136999e+00, -1.559716109226047e+00, -1.559716109226047e+00, -4.729915044667429e-01, -5.715341345464646e-01, -4.294237573752039e-01, -4.983424266756626e-01, -4.877296255997838e-01, -4.877296255997838e-01, -1.070195044458849e-01, -1.622200041033399e-01, -1.007859445799027e-01, -1.775366190055991e+00, -1.144019764152930e-01, -1.144019764152930e-01, -3.743129224642289e-03, -4.742000214195265e-03, -3.625283518365099e-03, -7.274674549954474e-02, -4.367381458234391e-03, -4.367381458234391e-03, -5.314637614505789e-01, -5.242986000585144e-01, -5.274279833173526e-01, -5.294959607329233e-01, -5.285183154447217e-01, -5.285183154447217e-01, -5.167165567760402e-01, -3.740278036837758e-01, -4.034343798647821e-01, -4.530475248382924e-01, -4.256808203042852e-01, -4.256808203042852e-01, -5.989373788409857e-01, -1.893018926482815e-01, -2.107460271520070e-01, -2.589870101054065e-01, -2.296775840289053e-01, -2.296775840289053e-01, -3.428097614948182e-01, -4.550435649814191e-02, -6.065911949794042e-02, -2.510929773021326e-01, -8.706625816557179e-02, -8.706625816557179e-02, -1.183387680218815e-02, -1.267970198156500e-03, -2.661193141206783e-03, -8.316131642104942e-02, -4.041274581549799e-03, -4.041274581549795e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_cam_s12h_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_cam_s12h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.268966432509370e-09, -6.268808930374668e-09, -6.268227704442823e-09, -6.270568244001526e-09, -6.269325053072640e-09, -6.269325053072640e-09, -9.569341460311599e-06, -9.569142770548635e-06, -9.563478512268983e-06, -9.565921352176037e-06, -9.568184681767179e-06, -9.568184681767179e-06, -5.800208752733244e-03, -5.793158250877758e-03, -5.460159367782625e-03, -5.331215744842891e-03, -5.395378735390683e-03, -5.395378735390683e-03, -3.928360230908240e-01, -3.984695427306277e-01, -3.318009616086764e-03, -4.456158968495481e-01, -4.538931431384114e-01, -4.538931431384112e-01, -9.812307919120028e-01, -1.036764702928854e+00, -5.909434608567691e-01, -8.911571563385440e-01, -1.132428752131506e+00, -1.132428752131509e+00, -1.422693624639772e-06, -1.411902379548820e-06, -1.422240603568386e-06, -1.412714640933174e-06, -1.417210072090082e-06, -1.417210072090082e-06, -6.821896889863460e-05, -6.730339624638518e-05, -6.726106885716887e-05, -6.647923243084985e-05, -6.816274948841530e-05, -6.816274948841530e-05, -1.074815806119150e-02, -2.255415082186108e-03, -1.490264838191508e-02, -5.540721476380796e-03, -9.738286874578589e-03, -9.738286874578589e-03, -4.516831996697412e-01, -2.189748361847146e-01, -4.914114592730650e-01, -2.658793592999664e-05, -5.770750788335387e-01, -5.770750788335387e-01, -1.174116094354926e+00, -1.048832021435389e+00, -6.587636139539053e+00, -6.902620741605335e-01, -3.065594050625663e+00, -3.065594050625656e+00, -6.672858473554952e-04, -2.927573016776076e-03, -2.015443340987897e-03, -1.345882791991892e-03, -1.669217084029601e-03, -1.669217084029601e-03, -2.782314063503031e-04, -1.982982395517711e-02, -1.829975776559017e-02, -1.248792160724944e-02, -1.615828363425719e-02, -1.615828363425719e-02, -2.129003565838774e-03, -1.406740438216234e-01, -1.076346053632820e-01, -7.235957265124698e-02, -9.131416851506377e-02, -9.131416851506378e-02, -2.712921570064130e-02, -5.376764859708720e-01, -5.438020629768924e-01, -9.614656147630955e-02, -7.947924334415429e-01, -7.947924334415436e-01, -7.912978489083834e-01, -5.145874894113894e+00, -2.490670685497759e+00, -7.952238026496834e-01, -3.872062964446422e+00, -3.872062964446432e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
