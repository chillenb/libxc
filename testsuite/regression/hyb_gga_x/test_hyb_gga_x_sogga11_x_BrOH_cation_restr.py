
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_sogga11_x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.215489483629067e+01, -1.215492249746615e+01, -1.215506594018916e+01, -1.215465397074579e+01, -1.215486692556764e+01, -1.215486692556764e+01, -1.990866615058157e+00, -1.990862857678632e+00, -1.990824611476414e+00, -1.991268974939330e+00, -1.990910101673926e+00, -1.990910101673926e+00, -3.883404662111625e-01, -3.880229515123932e-01, -3.803242604530030e-01, -3.833672987431549e-01, -3.826282701114941e-01, -3.826282701114941e-01, -9.197965521100754e-02, -9.564051039621471e-02, -4.516303733881403e-01, -2.867271288921832e-02, -5.845986652490257e-02, -5.845986652490256e-02, 2.454310023662822e-06, 2.889437772148167e-06, 1.134514915711009e-04, 5.694192925738514e-07, 1.108180330456848e-06, 1.108180330456848e-06, -2.947797850520045e+00, -2.947990753059202e+00, -2.947810434071466e+00, -2.947980690627033e+00, -2.947893723688958e+00, -2.947893723688958e+00, -1.142691057860884e+00, -1.150436732451075e+00, -1.137783492151039e+00, -1.144682146529542e+00, -1.149284860714116e+00, -1.149284860714116e+00, -3.349282702236817e-01, -3.574799160115844e-01, -3.106971439849314e-01, -3.174800554079407e-01, -3.396311955921724e-01, -3.396311955921724e-01, -4.875504649887094e-04, -6.336964170409422e-02, -7.227072609824091e-04, -1.076091378236806e+00, -6.405827423488123e-03, -6.405827423488123e-03, 3.403683298758783e-07, 5.711725205777068e-07, 5.815593077585169e-07, -4.852418127550624e-04, 6.951406679479479e-07, 6.951406679479479e-07, -3.286426972003286e-01, -3.286289348201016e-01, -3.286633380631992e-01, -3.286656095809428e-01, -3.286668783324794e-01, -3.286668783324794e-01, -3.191421710921263e-01, -2.848789499514269e-01, -2.955473633216943e-01, -3.054752949488037e-01, -3.004579227375345e-01, -3.004579227375345e-01, -3.750820698596217e-01, -1.123734382489618e-01, -1.517187052385302e-01, -2.018689538221177e-01, -1.771285520489043e-01, -1.771285520489043e-01, -2.624351250082123e-01, 1.151444207923652e-04, 2.342145781186553e-05, -1.930970690075567e-01, -7.622746523396911e-04, -7.622746523397509e-04, 5.748045430041868e-06, 5.985432876725982e-08, 2.017023101682043e-07, -8.736501289428889e-04, 6.243034588245712e-07, 6.243034588245706e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_sogga11_x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.564615001982548e+01, -1.564619326558683e+01, -1.564639961837496e+01, -1.564575592299896e+01, -1.564609119936771e+01, -1.564609119936771e+01, -2.549300405233295e+00, -2.549303851312894e+00, -2.549446171627257e+00, -2.549683083346420e+00, -2.549365990415275e+00, -2.549365990415275e+00, -4.938172083156001e-01, -4.933767443296965e-01, -4.853521692960749e-01, -4.889758566824577e-01, -4.878915148983091e-01, -4.878915148983091e-01, -2.172273342857963e-01, -2.072354630872367e-01, -5.749125294610609e-01, -2.174327787023431e-01, -2.523295211875338e-01, -2.523295211875339e-01, 8.882657200501550e-06, 1.051573138186502e-05, -3.903457236034648e-05, 1.835704158469694e-06, 3.847217030293362e-06, 3.847217030293317e-06, -3.814620735627706e+00, -3.815381345148324e+00, -3.814658060703166e+00, -3.815329467479229e+00, -3.815004739292478e+00, -3.815004739292478e+00, -1.462786200223499e+00, -1.470777104602459e+00, -1.461905471114400e+00, -1.468466926708793e+00, -1.468168437205602e+00, -1.468168437205602e+00, -4.299092308420966e-01, -4.684710802086843e-01, -3.979608896637677e-01, -4.141793663447689e-01, -4.367440378415302e-01, -4.367440378415302e-01, 4.003438045819631e-03, -3.034143887157993e-01, 4.994483169533601e-03, -1.411284610494576e+00, -9.153626234653707e-02, -9.153626234653707e-02, 1.025030358570281e-06, 1.851809853886801e-06, 1.985031536034668e-06, -3.536928897618106e-03, 2.369971909142023e-06, 2.369971909142021e-06, -4.351792379717362e-01, -4.309419663727310e-01, -4.323298552878625e-01, -4.335560407607411e-01, -4.329328915266922e-01, -4.329328915266922e-01, -4.240749364961694e-01, -3.623344563234424e-01, -3.780820658486038e-01, -3.945716728451876e-01, -3.860097032874232e-01, -3.860097032874232e-01, -4.909130281769953e-01, -2.955029909436289e-01, -2.448842611568835e-01, -2.566515745419916e-01, -2.332919372624916e-01, -2.332919372624918e-01, -3.337215919792213e-01, 7.742700435628432e-05, -1.142703940928423e-03, -2.461130090062565e-01, 3.372537450948028e-03, 3.372537450947748e-03, 2.109858383863143e-05, 1.267509631499177e-07, 5.689350809909727e-07, 5.270881760477301e-04, 2.118832332922767e-06, 2.118832332922728e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_sogga11_x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.418784190689514e-09, -1.418790404979833e-09, -1.418777788739107e-09, -1.418686172874204e-09, -1.418739896459211e-09, -1.418739896459211e-09, -1.683445989118263e-06, -1.683636256160337e-06, -1.687879630390332e-06, -1.679238697424908e-06, -1.683511778885842e-06, -1.683511778885842e-06, -8.549582224449103e-04, -8.497743244303635e-04, -6.522948092094801e-04, -6.472155782978414e-04, -6.611901005911171e-04, -6.611901005911171e-04, 7.014438565919991e-01, 5.874754438614961e-01, -5.061549675023975e-04, 2.431200590162139e+00, 1.893782346267899e+00, 1.893782346267899e+00, -8.290055902719365e-01, -8.680566225019822e-01, 1.141089179857298e-01, -7.864500820006928e-01, -9.838075848715302e-01, -9.838075848714812e-01, -4.683288000156344e-07, -4.696246293245156e-07, -4.683792909321380e-07, -4.695232981380047e-07, -4.689899386347169e-07, -4.689899386347169e-07, -7.045028710083144e-06, -7.222229231854281e-06, -6.224486015983589e-06, -6.446183903558612e-06, -7.485346830819481e-06, -7.485346830819481e-06, -2.266920871179401e-03, -2.722853452710800e-03, -2.864496224788697e-03, -4.077918626338061e-03, -2.262632448414124e-03, -2.262632448414124e-03, -1.567644612570124e-01, 9.938039655983829e-01, -2.597715366499358e-01, -3.353201660688381e-05, 2.154058739182561e+00, 2.154058739182561e+00, -1.042740310376865e+00, -9.249171751451366e-01, -5.753281732969389e+00, 4.595718347925475e-01, -2.678141088942466e+00, -2.678141088942432e+00, -4.348326815250179e-03, -3.848426097301846e-03, -4.014200623824547e-03, -4.159670258421335e-03, -4.086022622061047e-03, -4.086022622061047e-03, -5.073961292823063e-03, -3.018332461185050e-03, -3.357210132377851e-03, -3.888421403174587e-03, -3.595472331534555e-03, -3.595472331534555e-03, -2.204417930421043e-03, 3.071767586730717e-01, 5.611976983771198e-02, -1.050023772677973e-02, -2.983916787953209e-03, -2.983916787953163e-03, -4.108808592187727e-03, 4.948476272614918e-02, 3.087641146533530e-01, -1.607889953151209e-02, -3.836759121089718e-01, -3.836759121089641e-01, -6.346524465065768e-01, -4.617490650656989e+00, -2.219940850833938e+00, -1.758660556091888e-01, -3.386553898037682e+00, -3.386553898037653e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
