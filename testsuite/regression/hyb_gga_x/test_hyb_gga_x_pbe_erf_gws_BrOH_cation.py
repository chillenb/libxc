
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_pbe_erf_gws_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_pbe_erf_gws", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.066378730504702e+01, -2.066381478835473e+01, -2.066400461691410e+01, -2.066359433049330e+01, -2.066379969463205e+01, -2.066379969463205e+01, -3.195974987527539e+00, -3.195938093504163e+00, -3.195170228324539e+00, -3.197163820349378e+00, -3.196014585508344e+00, -3.196014585508344e+00, -4.407555080049105e-01, -4.405858103038722e-01, -4.374439530247324e-01, -4.422433192552991e-01, -4.416968116780777e-01, -4.416968116780777e-01, -2.650288883796566e-02, -2.759601900470537e-02, -5.459210247303723e-01, -1.234649805034558e-02, -2.516102174990467e-02, -2.516102174990463e-02, -1.376748675187020e-06, -1.609008991088127e-06, -2.662682992652163e-04, -2.632592147301817e-07, -7.695589250885210e-07, -7.695589250885212e-07, -4.757262083055742e+00, -4.756659310480511e+00, -4.757245030264962e+00, -4.756712722805537e+00, -4.756950618619062e+00, -4.756950618619062e+00, -1.830941112433320e+00, -1.841142475338263e+00, -1.831345818291063e+00, -1.840376036494117e+00, -1.836374470460148e+00, -1.836374470460148e+00, -3.387512501748557e-01, -3.652411545129539e-01, -3.018976157254057e-01, -3.045239652665049e-01, -3.456256171219575e-01, -3.456256171219575e-01, -4.408695286990561e-03, -2.713567300487203e-02, -3.545787029998938e-03, -1.546355494359815e+00, -6.990477615371714e-03, -6.990477615371714e-03, -1.212521569777024e-07, -2.459226819348398e-07, -1.107054676593996e-07, -1.109835600127202e-03, -2.298165172176992e-07, -2.298165172176992e-07, -3.188379071926345e-01, -3.203279004154461e-01, -3.198222414424055e-01, -3.193848035509090e-01, -3.196046411158974e-01, -3.196046411158974e-01, -3.040016638610505e-01, -2.670941301227971e-01, -2.784403222827803e-01, -2.887301412558323e-01, -2.834431728828297e-01, -2.834431728828297e-01, -3.932146386487584e-01, -5.181125603819970e-02, -8.088363744187907e-02, -1.398320076570634e-01, -1.078550542300091e-01, -1.078550542300090e-01, -2.314255597125900e-01, -2.321840386428416e-04, -5.846345565042828e-04, -1.259794445426995e-01, -2.265264394602706e-03, -2.265264394602706e-03, -3.848069577935869e-06, -4.695196862381641e-09, -4.379035326981881e-08, -1.875195625656565e-03, -1.768658604630724e-07, -1.768658604630720e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_pbe_erf_gws_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_pbe_erf_gws", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.486660384860685e+01, -2.486657419452760e+01, -2.486671917885966e+01, -2.486665795815114e+01, -2.486705856338746e+01, -2.486715255387922e+01, -2.486575687367976e+01, -2.486549319948216e+01, -2.486667412767557e+01, -2.486613472796051e+01, -2.486667412767557e+01, -2.486613472796051e+01, -3.771959427879501e+00, -3.772124456412095e+00, -3.771999560110864e+00, -3.772170814371363e+00, -3.773036755218840e+00, -3.773332518586533e+00, -3.771890195022570e+00, -3.772188382234239e+00, -3.771199289191791e+00, -3.773182064534371e+00, -3.771199289191791e+00, -3.773182064534371e+00, -5.394102018758304e-01, -5.427781692734617e-01, -5.381392407417607e-01, -5.422391473803750e-01, -5.224394259244167e-01, -5.179124984409010e-01, -5.251644968285285e-01, -5.266104195333912e-01, -5.493067488932778e-01, -5.071167415582915e-01, -5.493067488932778e-01, -5.071167415582915e-01, -4.631869099726507e-02, -5.091919298451041e-02, -4.771905418154379e-02, -5.310480169439317e-02, -6.476452403008620e-01, -6.797856606896642e-01, -2.321185505925021e-02, -2.409780769789434e-02, -5.170495883449226e-02, -9.668528200400374e-03, -5.170495883449219e-02, -9.668528200400395e-03, -2.482643732880872e-06, -2.978674441288796e-06, -2.856485746177164e-06, -3.511383210931917e-06, -4.845162074386258e-04, -5.696733998137879e-04, -5.394229116512585e-07, -5.129071475486448e-07, -1.762727378823003e-06, -3.249095525400944e-07, -1.762727378823003e-06, -3.249095525400950e-07, -5.926660791055830e+00, -5.925111528478896e+00, -5.929426184266718e+00, -5.927783108872353e+00, -5.926813451917091e+00, -5.925202643949312e+00, -5.929186316158994e+00, -5.927629649071951e+00, -5.928077857719884e+00, -5.926453357514002e+00, -5.928077857719884e+00, -5.926453357514002e+00, -1.952351316659714e+00, -1.952240328716511e+00, -1.968883261719287e+00, -1.968273603990228e+00, -1.938074627206985e+00, -1.941973239843988e+00, -1.952084842394044e+00, -1.956244470282438e+00, -1.972902542030443e+00, -1.962169151287968e+00, -1.972902542030443e+00, -1.962169151287968e+00, -4.590054704673432e-01, -4.573337828503468e-01, -5.297138515775267e-01, -5.302807974190873e-01, -3.976101569691237e-01, -4.197477587762141e-01, -4.331288894998955e-01, -4.538678006672220e-01, -4.868170804057163e-01, -4.525389250839912e-01, -4.868170804057169e-01, -4.525389250839909e-01, -8.494487299698939e-03, -8.724709999154088e-03, -4.938614999884112e-02, -5.001411122362982e-02, -6.394147917828247e-03, -7.418894613836165e-03, -2.065823373364266e+00, -2.064837328968849e+00, -1.238699116249951e-02, -1.452961266044887e-02, -1.238699116249951e-02, -1.452961266044887e-02, -2.277564584931181e-07, -2.556337594248573e-07, -4.805050845283938e-07, -5.026522325649830e-07, -2.009250332949519e-07, -2.386499169638119e-07, -2.178701907890451e-03, -2.218109039016687e-03, -2.140689845756106e-07, -5.544192698010859e-07, -2.140689845756106e-07, -5.544192698010860e-07, -4.780880481334545e-01, -4.808232838130975e-01, -4.698062494625547e-01, -4.725613330753460e-01, -4.726438432508616e-01, -4.754110864007223e-01, -4.750668177440977e-01, -4.777927367816130e-01, -4.738489124988399e-01, -4.765949074505512e-01, -4.738489124988399e-01, -4.765949074505512e-01, -4.610090770141611e-01, -4.632351287463159e-01, -3.502005025022288e-01, -3.524769679661242e-01, -3.774055659903563e-01, -3.800120388030744e-01, -4.083687622657842e-01, -4.105460239291146e-01, -3.922653888228513e-01, -3.944689549332014e-01, -3.922653888228513e-01, -3.944689549332014e-01, -5.641517249566511e-01, -5.658014696772294e-01, -8.618339131742009e-02, -8.726663969485338e-02, -1.244723352844071e-01, -1.267757911689390e-01, -2.026003109671496e-01, -2.044810231724107e-01, -1.608780188665600e-01, -1.607311115993393e-01, -1.608780188665599e-01, -1.607311115993394e-01, -3.089612474468719e-01, -3.122305732824528e-01, -4.580676580182824e-04, -4.674491564137540e-04, -1.102954405849983e-03, -1.215486880530905e-03, -1.885522736921363e-01, -1.935241929491684e-01, -4.086686809564311e-03, -4.779648953620791e-03, -4.086686809564357e-03, -4.779648953620839e-03, -7.263374345691342e-06, -8.081845858391636e-06, -9.358104063100105e-09, -9.422416161751323e-09, -7.883504324087230e-08, -9.484803268263422e-08, -3.611127685015413e-03, -3.784644726992373e-03, -1.819279550153813e-07, -4.269244638779227e-07, -1.819279550153807e-07, -4.269244638779218e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_pbe_erf_gws_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_pbe_erf_gws", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.407075414991796e-08, 0.000000000000000e+00, -1.407083209626526e-08, -1.407064156361642e-08, 0.000000000000000e+00, -1.407075026500350e-08, -1.407015307008912e-08, 0.000000000000000e+00, -1.407008621427573e-08, -1.407142781107155e-08, 0.000000000000000e+00, -1.407170995529249e-08, -1.407069348070800e-08, 0.000000000000000e+00, -1.407096648614283e-08, -1.407069348070800e-08, 0.000000000000000e+00, -1.407096648614283e-08, -1.854890877886026e-05, 0.000000000000000e+00, -1.855482825288356e-05, -1.854929436190092e-05, 0.000000000000000e+00, -1.855566906800139e-05, -1.856323759300666e-05, 0.000000000000000e+00, -1.856646321463935e-05, -1.852719660200000e-05, 0.000000000000000e+00, -1.853157103669815e-05, -1.855927527971319e-05, 0.000000000000000e+00, -1.854238664734314e-05, -1.855927527971319e-05, 0.000000000000000e+00, -1.854238664734314e-05, -8.600341760436633e-03, 0.000000000000000e+00, -8.648849107188593e-03, -8.589150723539541e-03, 0.000000000000000e+00, -8.649231098029926e-03, -8.421900118826601e-03, 0.000000000000000e+00, -8.315175907184010e-03, -8.167687705392638e-03, 0.000000000000000e+00, -8.204854703481005e-03, -8.663841167412697e-03, 0.000000000000000e+00, -7.468894898999281e-03, -8.663841167412697e-03, 0.000000000000000e+00, -7.468894898999281e-03, -3.534109371500754e-02, 0.000000000000000e+00, -4.100163496848462e-02, -3.724229514194657e-02, 0.000000000000000e+00, -4.375115854531819e-02, -5.333007015984405e-03, 0.000000000000000e+00, -5.089533680446348e-03, -6.950944620822791e-03, 0.000000000000000e+00, -7.796853612321632e-03, -4.132704853624120e-02, 0.000000000000000e+00, -1.349788452158609e-04, -4.132704853624124e-02, 0.000000000000000e+00, -1.349788452158651e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.981030586888771e-30, 0.000000000000000e+00, -3.288723217195993e-27, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.108098629151124e-06, 0.000000000000000e+00, -4.111873097097303e-06, -4.108724321175157e-06, 0.000000000000000e+00, -4.112479820360958e-06, -4.108100944124027e-06, 0.000000000000000e+00, -4.111870687399003e-06, -4.108638330656578e-06, 0.000000000000000e+00, -4.112422263699790e-06, -4.108445397098449e-06, 0.000000000000000e+00, -4.112183029757059e-06, -4.108445397098449e-06, 0.000000000000000e+00, -4.112183029757059e-06, -1.345333357085220e-04, 0.000000000000000e+00, -1.345559435810755e-04, -1.321261858789237e-04, 0.000000000000000e+00, -1.322335136134539e-04, -1.339427509073763e-04, 0.000000000000000e+00, -1.341804934355624e-04, -1.319213498535924e-04, 0.000000000000000e+00, -1.320849738381075e-04, -1.334684214395634e-04, 0.000000000000000e+00, -1.333930026928721e-04, -1.334684214395634e-04, 0.000000000000000e+00, -1.333930026928721e-04, -1.617916594491930e-02, 0.000000000000000e+00, -1.633022224250459e-02, -1.432120066273542e-02, 0.000000000000000e+00, -1.432363192875261e-02, -2.134225909696571e-02, 0.000000000000000e+00, -1.940827581440233e-02, -2.214059375120026e-02, 0.000000000000000e+00, -1.988982521407445e-02, -1.456949165949702e-02, 0.000000000000000e+00, -1.711596056627717e-02, -1.456949165949702e-02, 0.000000000000000e+00, -1.711596056627716e-02, -5.903406451004918e-05, 0.000000000000000e+00, -7.045855998610529e-05, -3.583711097615003e-02, 0.000000000000000e+00, -3.646720127070094e-02, -7.272405003381447e-06, 0.000000000000000e+00, -2.289085599332407e-05, -2.297205946428709e-04, 0.000000000000000e+00, -2.301454664604368e-04, -5.399421789168884e-04, 0.000000000000000e+00, -1.168736420465323e-03, -5.399421789168884e-04, 0.000000000000000e+00, -1.168736420465323e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.948055184400729e-11, 0.000000000000000e+00, -2.624766418813621e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.941166395650951e-02, 0.000000000000000e+00, -1.917951482379084e-02, -1.909001484809405e-02, 0.000000000000000e+00, -1.886875824004823e-02, -1.920190604228432e-02, 0.000000000000000e+00, -1.897760317920872e-02, -1.929674720926479e-02, 0.000000000000000e+00, -1.906782978331034e-02, -1.924935808571382e-02, 0.000000000000000e+00, -1.902267990905738e-02, -1.924935808571382e-02, 0.000000000000000e+00, -1.902267990905738e-02, -2.143318562892994e-02, 0.000000000000000e+00, -2.120791317658840e-02, -2.413212084537593e-02, 0.000000000000000e+00, -2.392233763895978e-02, -2.360219119438400e-02, 0.000000000000000e+00, -2.338000431857538e-02, -2.291898592563455e-02, 0.000000000000000e+00, -2.269462100347761e-02, -2.332572447456335e-02, 0.000000000000000e+00, -2.309133453259911e-02, -2.332572447456335e-02, 0.000000000000000e+00, -2.309133453259911e-02, -1.213849049232520e-02, 0.000000000000000e+00, -1.210263342672670e-02, -5.799496825394233e-02, 0.000000000000000e+00, -5.835137751967789e-02, -6.326015123488339e-02, 0.000000000000000e+00, -6.349639792706345e-02, -5.737260902411240e-02, 0.000000000000000e+00, -5.691189219182067e-02, -6.270655446058467e-02, 0.000000000000000e+00, -6.293945359998671e-02, -6.270655446058464e-02, 0.000000000000000e+00, -6.293945359998669e-02, -3.062352198761264e-02, 0.000000000000000e+00, -3.027469121156334e-02, -2.189882163889108e-31, 0.000000000000000e+00, -5.686814080074581e-31, -1.060325638042774e-17, 0.000000000000000e+00, -1.266747873395225e-16, -6.746702393888394e-02, 0.000000000000000e+00, -6.627000072358560e-02, -1.046703674454984e-07, 0.000000000000000e+00, -5.351056909158261e-07, -1.046703674455040e-07, 0.000000000000000e+00, -5.351056909158106e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.540388530908161e-08, 0.000000000000000e+00, -4.407705045584411e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
