
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_x_n12_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.564277120078626e+01, -1.564271260277988e+01, -1.564261872183129e+01, -1.564357473613750e+01, -1.564273889794162e+01, -1.564273889794162e+01, -2.699849157617205e+00, -2.699787489823132e+00, -2.698197639278783e+00, -2.701506555680983e+00, -2.699829060547001e+00, -2.699829060547001e+00, -5.464271124693573e-01, -5.467375974411779e-01, -5.560847284365421e-01, -5.589409167857691e-01, -5.465364563536933e-01, -5.465364563536933e-01, -2.027384783801787e-01, -2.015519442649553e-01, -6.270045004598795e-01, -1.840159416009171e-01, -2.023429166469358e-01, -2.023429166469358e-01, -4.131630014454274e-02, -4.289280526038333e-02, -9.947462030251031e-02, -2.182077346946007e-02, -4.252559290441123e-02, -4.252559290441123e-02, -3.561497382744017e+00, -3.555974844332817e+00, -3.560950112166462e+00, -3.556655995509070e+00, -3.558645723376085e+00, -3.558645723376085e+00, -1.570312569489053e+00, -1.583733648922458e+00, -1.561583342204333e+00, -1.572241739015575e+00, -1.589940631049855e+00, -1.589940631049855e+00, -4.297449322841869e-01, -4.153910228461053e-01, -4.108627585998835e-01, -3.896940059990209e-01, -4.392789173042422e-01, -4.392789173042422e-01, -1.467304392795494e-01, -2.347260239589859e-01, -1.458415654031742e-01, -1.179036938123374e+00, -1.641268051432914e-01, -1.641268051432914e-01, -2.111306730123172e-02, -2.384414551858979e-02, -1.828413117801994e-02, -1.124232608178085e-01, -2.190112029820624e-02, -2.190112029820624e-02, -3.801907638549365e-01, -3.907874547188667e-01, -3.871141120239978e-01, -3.841770666893961e-01, -3.856556029517069e-01, -3.856556029517069e-01, -3.666186700621305e-01, -4.002209406039801e-01, -3.945362524175696e-01, -3.863669496006693e-01, -3.906459104599068e-01, -3.906459104599069e-01, -4.369530548178280e-01, -2.650545732336276e-01, -2.766948376660226e-01, -2.895097716270925e-01, -2.806841482326162e-01, -2.806841482326162e-01, -3.652825182815164e-01, -9.693596588577051e-02, -1.078900614818714e-01, -2.581125210965109e-01, -1.286655412019744e-01, -1.286655412019743e-01, -4.694968754522218e-02, -6.987241569687616e-03, -1.297279697399536e-02, -1.254176576746679e-01, -1.885092168738553e-02, -1.885092168738550e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_x_n12_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.088932727789553e+01, -1.088914064801581e+01, -1.088863316240068e+01, -1.089168348241364e+01, -1.088922613738036e+01, -1.088922613738036e+01, -2.515871970996860e+00, -2.515589720385190e+00, -2.507951648836095e+00, -2.521648577628854e+00, -2.515737063607677e+00, -2.515737063607677e+00, -5.283819940086031e-01, -5.281994462137829e-01, -5.151138579824773e-01, -5.209686087143046e-01, -5.283150142746561e-01, -5.283150142746561e-01, -1.173992593223284e-01, -1.152032350031336e-01, -6.269288992908786e-01, -1.874091271443787e-01, -1.166199509463146e-01, -1.166199509463146e-01, -5.181972654086294e-02, -5.359970819113808e-02, -1.067494624058061e-01, -2.839190526425393e-02, -5.316687143049156e-02, -5.316687143049156e-02, -2.625720352021982e+00, -2.621237252595878e+00, -2.625269556795643e+00, -2.621782538791360e+00, -2.623390144928653e+00, -2.623390144928653e+00, -2.424429447817156e+00, -2.422781486268007e+00, -2.447339971740465e+00, -2.447805714671762e+00, -2.387975362342473e+00, -2.387975362342473e+00, -4.377347342930077e-01, -4.907245716416895e-01, -4.151404462635086e-01, -4.452314018607125e-01, -4.545282106550511e-01, -4.545282106550511e-01, -1.976648229810238e-01, -1.832985520946960e-01, -1.917682924172707e-01, -1.192161175037281e+00, -1.965462815740402e-01, -1.965462815740402e-01, -2.749542915189489e-02, -3.093021870795046e-02, -2.385968494358557e-02, -1.292982101813541e-01, -2.846656008666591e-02, -2.846656008666588e-02, -4.823111235739216e-01, -4.688677757181984e-01, -4.733012542789053e-01, -4.770171102582285e-01, -4.751265915433266e-01, -4.751265915433266e-01, -4.705839118740865e-01, -3.737690090035556e-01, -3.951909697721692e-01, -4.171157641695489e-01, -4.054051835652027e-01, -4.054051835652028e-01, -5.097802671382291e-01, -1.595062290213086e-01, -1.642286667119492e-01, -2.408839207794786e-01, -1.952262808253454e-01, -1.952262808253453e-01, -3.303638498946779e-01, -1.044444314717866e-01, -1.201865371852691e-01, -2.361937377616709e-01, -1.607355649909018e-01, -1.607355649909018e-01, -5.827619964866430e-02, -9.254141465517188e-03, -1.706664902930071e-02, -1.518435015586735e-01, -2.459318456935830e-02, -2.459318456935823e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_x_n12_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_x_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.522998419228554e-08, -2.523060079000144e-08, -2.523193137997489e-08, -2.522186226999755e-08, -2.523032123657558e-08, -2.523032123657558e-08, -1.749450838763169e-05, -1.750035842789753e-05, -1.765846832834747e-05, -1.737190772825857e-05, -1.749722824190634e-05, -1.749722824190634e-05, -6.740384136914802e-03, -6.709756166167703e-03, -6.163023696005627e-03, -5.975409456379992e-03, -6.729421269837050e-03, -6.729421269837050e-03, -1.149765381503393e+00, -1.155114051694864e+00, -4.092981692810878e-03, -7.491615269340955e-01, -1.152753315504044e+00, -1.152753315504044e+00, -4.105039524257761e+01, -4.041950121002162e+01, -2.512255417374266e+00, -3.511160389076733e+01, -4.216016274962573e+01, -4.216016274962573e+01, -8.532719147482586e-06, -8.578414180700169e-06, -8.537253561930821e-06, -8.572786028319954e-06, -8.556346034461973e-06, -8.556346034461973e-06, 4.186566129066058e-05, 3.883080378247180e-05, 4.550049913626031e-05, 4.327887024843264e-05, 3.440553671110983e-05, 3.440553671110983e-05, -1.997186851451241e-02, -2.200876578998373e-02, -2.379232363209565e-02, -2.801616476977473e-02, -1.840569359129009e-02, -1.840569359129009e-02, 6.142147390072694e-01, -5.276186378463805e-01, 5.049903674238240e-01, -5.029566440824044e-04, -2.534554915838557e-01, -2.534554915838557e-01, -3.746292178236867e+01, -3.669681162260933e+01, -1.098140324321273e+02, 2.664477886214422e-01, -5.506905049401193e+01, -5.506905049401007e+01, -2.905893508416850e-02, -2.715254893274228e-02, -2.781697261160277e-02, -2.834561857438252e-02, -2.807981930959070e-02, -2.807981930959070e-02, -3.282012136384633e-02, -2.752370756647906e-02, -2.799104698694351e-02, -2.951465107082218e-02, -2.870663524965273e-02, -2.870663524965274e-02, -1.848147308020062e-02, -3.745697043148359e-01, -2.565370100374152e-01, -1.228315541180762e-01, -1.819232993084603e-01, -1.819232993084604e-01, -4.175360418101504e-02, -2.794734073825196e+00, -1.946040653707827e-01, -1.727591811060888e-01, 6.433689982727659e-01, 6.433689982727521e-01, -2.888192050019425e+01, -7.173428830904346e+01, -5.920117266898904e+01, 3.430888898458285e-01, -8.241244163564852e+01, -8.241244163565813e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
