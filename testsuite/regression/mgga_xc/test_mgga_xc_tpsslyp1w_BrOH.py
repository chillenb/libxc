
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_tpsslyp1w_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.999566154502017e+01, -1.999571416510516e+01, -1.999598411436573e+01, -1.999512218243792e+01, -1.999568899516557e+01, -1.999568899516557e+01, -3.309433153213789e+00, -3.309430236887069e+00, -3.309461088670268e+00, -3.309707941052923e+00, -3.309447784461113e+00, 4.465282012989448e+152, -6.800964060228398e-01, 1.142649114845556e+245, 2.634325183872160e+158, 1.421861505285926e+211, 5.278434295277965e+157, 1.216015986335238e+211, 3.019961908992989e+98, 2.062368738859302e+215, -8.131744132957430e-01, 9.273532182894760e+230, 2.385822326193676e+215, 1.979733221066283e+244, 1.539929326493267e+172, 2.036738773883660e+203, 4.176050346823453e+228, 9.930986057495427e+224, 7.926968677435401e+273, 6.624575768647651e+183, 1.999404824246768e+164, 4.018766451683957e+237, 2.630289686857387e+199, -4.943363765995048e+00, 2.392721550807741e+218, 3.325296441178429e+170, -1.892429899815551e+00, -1.903990962858621e+00, -1.887824462803132e+00, -1.896803514615208e+00, -1.906236113577734e+00, 5.365034416767638e+154, 1.211573874480690e+178, 1.111185374311536e+216, 2.574996135518848e+178, 2.305545233836968e+216, 9.011123489098819e+177, -6.082287264608403e-01, -1.102717678419753e-01, 1.445177291936114e+201, -1.089108922590272e-01, 1.695602773153260e+62, 2.349473549938542e+163, 5.360641701403275e+250, -5.929390746913715e-03, 1.253370829346667e+159, 7.816529038905192e+269, -7.008954811673487e-02, -6.169418701035146e-03, 4.882370209143987e+157, 4.189666371641057e+235, 4.794512585435369e+224, -6.084164390907059e-01, 9.703290747092421e+206, 1.161224724126278e+162, 2.806099316898823e+240, 2.364908697788434e+226, 2.439932759412074e+159, 3.985456976330971e+226, 5.477074737645893e+197, 2.066475392692864e+244, -5.446963279394745e-01, 6.601541838533074e+244, -2.497103008837271e-01, 6.758444470199038e+223, -3.654865908973619e-01, 1.586889201698720e+175, 9.057823748443736e+197, -4.646864054241814e-01, 2.691220426389321e+257, 9.066858130687776e+256, 1.720088109164801e+252, -9.033200638065236e-02, 7.623013599872350e+254, 1.492672708904243e+255, 5.225213402338460e+216, 1.465165960748067e+29, 1.784227224956830e+184, 5.604423811461980e+217, 1.453501724564389e+245])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_tpsslyp1w_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.689788318237363e+01, -2.689795286862378e+01, -2.689831125229986e+01, -2.689716961969323e+01, -2.689791952942186e+01, -2.689791952942186e+01, -4.321161946405807e+00, -4.321201401252050e+00, -4.322549095599459e+00, -4.322365102499004e+00, -4.321193127762790e+00, -7.581587509459244e+152, -8.759891877315712e-01, -1.866555939906752e+245, -4.294112059084198e+158, -2.319172619239186e+211, -8.622936521969246e+157, -1.986503586726260e+211, -3.945985532733743e+98, -2.706035010562719e+215, -1.056268712790222e+00, -1.069644614541562e+231, -3.121342052645825e+215, -2.590060662980199e+244, 7.608407489148252e+172, 9.454953350322598e+203, -4.007241088108861e+227, 1.200814400744210e+226, 3.732376125779111e+274, 3.119150516224149e+184, -3.384485905157832e+164, -6.802743308709738e+237, -4.452413458010908e+199, -6.622236328989663e+00, -4.050268372190644e+218, -5.628880217723799e+170, -2.446613533837107e+00, -2.464445252734846e+00, -2.439524012393315e+00, -2.453243970365143e+00, -2.468154027527827e+00, -9.113329030274056e+154, -1.956255485022856e+178, -1.807193972190213e+216, -4.137051029987978e+178, -3.719071071671861e+216, -1.459910870965833e+178, -8.063423097709778e-01, -1.451669603193353e-01, -1.892592329424188e+201, -1.433600401805796e-01, -2.879681037757762e+62, -2.486084269257874e+163, -5.672337535928028e+250, -7.867685375568275e-03, 1.355351994772651e+160, 1.171040813009127e+271, -9.240370011747417e-02, -8.185470622931575e-03, 5.873293383414409e+158, -6.783980690703208e+235, -7.759668513889673e+224, -8.040532284155326e-01, -1.570902183842050e+207, -1.879826716268899e+162, -4.542600889228636e+240, -3.818038956709126e+226, -3.883441926145877e+159, -6.372698476705290e+226, -8.792187430295590e+197, -3.310766516704871e+244, -7.237373258439734e-01, -1.077759931380055e+245, -3.234946496766555e-01, -9.806672182679683e+223, -4.707372292879765e-01, -2.357861181222565e+175, -1.345846388011790e+198, -6.039647608459604e-01, 7.349177436036863e+255, -3.714110186880729e+256, -2.585503011660879e+252, -1.189702973342696e-01, -6.070762178082541e+254, 5.931528774082264e+255, 2.293833138987287e+218, 3.270576593387742e+30, -1.346459291921270e+184, 8.096977202691852e+218, 2.099942960024126e+246])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.841976868031311e-09, -6.842009687050277e-09, -6.842098051039922e-09, -6.841572139594236e-09, -6.841994529639870e-09, -6.841994529639870e-09, -4.688307530000772e-06, -4.689261644020167e-06, -4.717365450556074e-06, -4.704975566218901e-06, -4.688483908042013e-06, -4.830532617582119e-06, -1.198037059299603e-03, -2.730823126529497e-03, -2.910462573020150e-03, -2.882005408789863e-03, -2.725974924666272e-03, -2.725974924666272e-03, -3.656401812887847e-01, -3.536390262155759e-01, -3.889733804487114e-04, -3.733993949548908e-02, -3.619880775899847e-01, -3.619880775899847e-01, -4.946666890202678e+00, -4.907370080693471e+00, 5.740959911688896e+00, -1.750247141256031e+00, -5.133653982156468e+00, -5.133653982156463e+00, -5.913383829769813e-06, -5.973989729480840e-06, -5.920068017306533e-06, -2.411120723041830e-06, -5.943648483748306e-06, -5.943648483748306e-06, -3.708029648927795e-05, -3.751870414831448e-05, -3.685064038873084e-05, -3.721279403549479e-05, -3.769205364635962e-05, -4.312304933584054e-05, -8.052237569002578e-03, -1.492876929526124e-02, -7.353478801339784e-03, -1.046575117406607e-02, -9.186355347132085e-03, -7.569318439175443e-03, 6.006987387277006e-01, -2.124112794179730e-01, 5.817115195799188e-01, -9.911367889742086e-05, -3.047692363367616e-03, -3.047692363367616e-03, -1.532919798201385e+05, -2.209207034201990e+00, -8.683509435273935e+00, -1.212635615562012e+00, -1.303979960079591e+05, -2.721925469542616e+00, -1.937451401762134e-01, -8.867162779187066e-02, -2.737983985143494e-02, -1.377989590615235e-01, -1.235336501078228e-01, -1.235336501078228e-01, -1.564002522076408e-01, -1.275795541661879e-02, -1.865149732732726e-02, -3.257977916698773e-02, -2.388146075633260e-02, -1.450460640264165e-02, -9.051400584365358e-03, -2.044761572875776e-02, -7.882604770165495e-02, -2.654647066825068e-02, -5.053588236475294e-02, -5.053588236475295e-02, -1.377692743555372e-02, 5.907175751746816e+00, 4.861679873449178e+00, -4.478815148886108e-02, 4.743814699479443e-01, 1.445022966216474e+00, -1.911259256987761e+00, -2.442354501706089e+00, -4.801416456963414e+00, 1.466515339441454e+00, -3.826113235374401e+00, -3.826113235374395e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.553028533403943e-04, 1.553060152525317e-04, 1.553195144523438e-04, 1.552681061196581e-04, 1.553045212217794e-04, 1.553045212217794e-04, -5.295704463602061e-04, -5.293638943106338e-04, -5.230365792572778e-04, -5.254666120393311e-04, -5.295106109493756e-04, 1.712990668530149e-03, -1.877921041005190e-03, 1.600416011003178e-03, 1.158276881443703e-03, 1.343144460769205e-03, 1.613463449094925e-03, 1.613463449094925e-03, 3.971855686280651e-03, 4.398493793218711e-03, -6.935918520053238e-04, 2.393736978836057e-04, 4.088942383451272e-03, 4.088942383451272e-03, 7.090639155253080e-09, 8.843788877662198e-09, 2.133874407289706e-06, 3.777192289985913e-11, 8.977251976771543e-09, 8.977251976772599e-09, 1.327192387832862e-02, 1.341497078003986e-02, 1.328766154017351e-02, 7.827353745426298e-04, 1.334340720652826e-02, 1.334340720652826e-02, -1.126088257071842e-03, -1.107518146544142e-03, -1.130859339293568e-03, -1.120469525483508e-03, -1.101549483788544e-03, 2.158279371955326e-03, 2.397095816221146e-02, 6.187748648522881e-02, 1.578765777440824e-02, 3.187412178724292e-02, 3.243282066546947e-02, 2.548910470401492e-03, -1.560885192826283e-04, 1.037643516286591e-03, -1.779999729764478e-04, 1.055206746953575e-02, 2.067017632274855e-04, 2.067017632274855e-04, -3.023074456143677e-08, 8.725796251109461e-11, 1.608419229388890e-10, -3.526653629042714e-05, -3.481798560312385e-08, 7.493823808817282e-11, 6.616430112271323e-01, 3.001271065336189e-01, 7.667341384037245e-03, 4.688422623865627e-01, 4.197796550448066e-01, 4.197796550448066e-01, 4.854341676852832e-01, 2.428563763779950e-02, 4.482764636240087e-02, 8.795103553384276e-02, 6.121645588556197e-02, 5.465042652873639e-03, 4.299575382452667e-02, -3.107291676449878e-03, 4.531988004393960e-03, -6.245058499013256e-03, 8.144948671787547e-03, 8.144948671787545e-03, -3.580298350339336e-03, 1.312211120588164e-06, 4.956694723540987e-06, 1.924590970552838e-02, -1.392407300421027e-04, 4.869158786407904e-05, 3.824046606164436e-09, 1.559291534511404e-13, 1.063438430219482e-11, 5.059669407427746e-05, 5.536611480978758e-11, 5.536611480983249e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
