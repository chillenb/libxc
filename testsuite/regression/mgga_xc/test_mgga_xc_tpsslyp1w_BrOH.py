
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_tpsslyp1w_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.244271030748709e+01, -2.244276491613124e+01, -2.244311748856714e+01, -2.244222632987920e+01, -2.244273812774509e+01, -2.244273812774509e+01, -3.522876856921279e+00, -3.522887459191569e+00, -3.523453101769088e+00, -3.525234724073361e+00, -3.522885188868226e+00, -3.522885188868226e+00, -7.121939613985840e-01, -7.119504942588876e-01, -7.075835598054107e-01, -7.137914538372163e-01, -7.121047643679511e-01, -7.121047643679511e-01, -2.228574343431305e-01, -2.245606385426855e-01, -8.256217544527237e-01, -1.782833448413912e-01, -2.233453316446776e-01, -2.233453316446776e-01, -1.981489509331288e-02, -2.073431957180227e-02, -7.269708211595791e-02, -9.625301121959607e-03, -2.052202604710156e-02, -2.052202604710156e-02, -5.551174202795329e+00, -5.552167504894038e+00, -5.551324936581768e+00, -5.552094817683374e+00, -5.551616942225768e+00, -5.551616942225768e+00, -2.137975327540550e+00, -2.152311806685539e+00, -2.135989698370939e+00, -2.147119407581000e+00, -2.150367629745434e+00, -2.150367629745434e+00, -6.306406964717136e-01, -6.510994451881339e-01, -5.926548470283195e-01, -5.954482201917966e-01, -6.556213127046622e-01, -6.556213127046622e-01, -1.387983856422882e-01, -2.357294858796563e-01, -1.376139116827128e-01, -1.877592216712298e+00, -1.569145961882284e-01, -1.569145961882284e-01, -9.289707739364963e-03, -1.059736370183967e-02, -7.971125948881769e-03, -9.412606887935394e-02, -9.667285820997736e-03, -9.667285820997736e-03, -6.348915575465085e-01, -6.538421511053505e-01, -6.498175139195854e-01, -6.449978935453907e-01, -6.476334817624247e-01, -6.476334817624247e-01, -6.000852011138198e-01, -5.689409812621830e-01, -5.911197243734632e-01, -6.088184578731055e-01, -6.000933104617768e-01, -6.000933104617768e-01, -6.786615078095019e-01, -2.839074017728097e-01, -3.245420977944417e-01, -3.952719707194071e-01, -3.580888652884875e-01, -3.580888652884875e-01, -5.088423848733545e-01, -6.822341392694971e-02, -8.580173753271977e-02, -3.700107718204432e-01, -1.173399535629009e-01, -1.173399535629009e-01, -2.314902688939285e-02, -2.940294683046671e-03, -5.554560452894446e-03, -1.132876244405985e-01, -8.232659448355431e-03, -8.232659448355420e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_tpsslyp1w_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.780517547325555e+01, -2.780522922800721e+01, -2.780568064170566e+01, -2.780480692248040e+01, -2.780520191383481e+01, -2.780520191383481e+01, -4.280276984338020e+00, -4.280313685777320e+00, -4.281603880064424e+00, -4.281990743474626e+00, -4.280303761182450e+00, -4.280303761182450e+00, -8.450199364370866e-01, -8.437144090676627e-01, -8.077493330118788e-01, -8.173573812402656e-01, -8.445478099115189e-01, -8.445478099115189e-01, -2.462950971659471e-01, -2.503168216911321e-01, -1.031442862562161e+00, -1.990076863031663e-01, -2.474556427071595e-01, -2.474556427071595e-01, -2.619316724426337e-02, -2.739436532227081e-02, -1.005744702006531e-01, -1.278288428686133e-02, -2.711463781089291e-02, -2.711463781089291e-02, -6.828999761885261e+00, -6.828560400594725e+00, -6.829034159368023e+00, -6.828688380050013e+00, -6.828668775253465e+00, -6.828668775253465e+00, -2.519768567225816e+00, -2.550089399827394e+00, -2.509625717785597e+00, -2.533745172142350e+00, -2.552510008712545e+00, -2.552510008712545e+00, -7.730131137044067e-01, -8.368136019805075e-01, -7.271595522616432e-01, -7.612841463544274e-01, -8.039790900360992e-01, -8.039790900360992e-01, -1.896942864256153e-01, -2.543915115876030e-01, -1.832562289391851e-01, -2.447845315662995e+00, -1.896652685094002e-01, -1.896652685094002e-01, -1.233822439678714e-02, -1.406895466331778e-02, -1.058700705093044e-02, -1.338931298923211e-01, -1.283570898701715e-02, -1.283570898701715e-02, -7.988437593926682e-01, -7.961839697348051e-01, -7.952058263372062e-01, -7.954866741853830e-01, -7.951830135541668e-01, -7.951830135541668e-01, -7.797997970869688e-01, -7.155669769111537e-01, -7.386122019501191e-01, -7.485713325618656e-01, -7.438851817727855e-01, -7.438851817727855e-01, -8.751477209428594e-01, -3.083173252579062e-01, -3.711174537515416e-01, -4.817489147641292e-01, -4.294431768114474e-01, -4.294431768114473e-01, -6.262929965259194e-01, -9.425239966850761e-02, -1.246785034851174e-01, -4.544378377251554e-01, -1.579899429585607e-01, -1.579899429585606e-01, -3.056562482569997e-02, -3.912882572436677e-03, -7.385428100150443e-03, -1.489976091556717e-01, -1.093471233734667e-02, -1.093471233734666e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.332174655351054e-08, -1.332209417188365e-08, -1.332287392083775e-08, -1.331719911302751e-08, -1.332193630655846e-08, -1.332193630655846e-08, -1.215687587004875e-05, -1.215900643677771e-05, -1.222045148919943e-05, -1.217662252265112e-05, -1.215733597052800e-05, -1.215733597052800e-05, -4.753938293593212e-03, -4.763737192855352e-03, -4.954237245553987e-03, -4.877728379043554e-03, -4.757780367620398e-03, -4.757780367620398e-03, -4.209538159927469e-01, -4.139960734521393e-01, -1.384624270216888e-03, -5.211828612412804e-01, -4.194713579368496e-01, -4.194713579368496e-01, -5.149825038336296e+00, -5.163931576785965e+00, 5.197410560424899e+00, -3.634057499170316e+00, -5.365288584746069e+00, -5.365288584746069e+00, -5.950624504515818e-06, -6.011106521229571e-06, -5.956823154991856e-06, -6.003837961381443e-06, -5.981464745529045e-06, -5.981464745529045e-06, -5.297458732304024e-05, -5.103342589585868e-05, -5.218391724680017e-05, -5.060112901425875e-05, -5.285663269322459e-05, -5.285663269322459e-05, -1.936595645297274e-02, -2.202600400246930e-02, -2.090462889198333e-02, -2.247056974439400e-02, -1.943711235111027e-02, -1.943711235111027e-02, 4.500232050491900e-01, -2.497716538452120e-01, 3.146315903145910e-01, -1.559225798219261e-04, -3.158586653123004e-01, -3.158586653123004e-01, -3.855024161730792e+00, -3.864131396931960e+00, -1.105921622150500e+01, 3.070310699316774e+00, -5.707580585727842e+00, -5.707580585727841e+00, -1.646029873882742e-01, -9.481772416596064e-02, -1.154555173941014e-01, -1.356698492074483e-01, -1.250709303882757e-01, -1.250709303882757e-01, -9.406958873952037e-02, -1.471485433132199e-02, -2.298046950553999e-02, -4.129508975137981e-02, -3.035047535648238e-02, -3.035047535648239e-02, -1.475911076288724e-02, -1.447933720532275e-01, -9.248538847740755e-02, -6.662212040230413e-02, -7.045694989224059e-02, -7.045694989224068e-02, -2.533226500404120e-02, 5.629519029050681e+00, 4.308637549872321e+00, -1.172349773429830e-01, 8.452725016337985e-01, 8.452725016337937e-01, -3.853316013104278e+00, -6.638767342950680e+00, -5.717845759841814e+00, 6.818224160839235e-01, -8.334100216261151e+00, -8.334100216261147e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.858610408149217e-03, 1.858678595766910e-03, 1.858974694294128e-03, 1.857866028492587e-03, 1.858646337720633e-03, 1.858646337720633e-03, 2.729299418615781e-03, 2.730210960504756e-03, 2.758616316398820e-03, 2.761241071938429e-03, 2.729449503610123e-03, 2.729449503610123e-03, 4.104501155361061e-03, 4.107177497513386e-03, 3.930338101294547e-03, 4.375849230014768e-03, 4.106328586925482e-03, 4.106328586925482e-03, 7.058298343797701e-03, 8.136935689414473e-03, 5.555003818298374e-04, 7.456435750004587e-04, 7.395069134320330e-03, 7.395069134320330e-03, 2.966815041086214e-11, 3.566577723415116e-11, 3.405099499645024e-07, 3.074110691952456e-13, 4.029487740575307e-11, 4.029487740575231e-11, 1.323386730990697e-02, 1.337607367977382e-02, 1.324999344438387e-02, 1.336046192412326e-02, 1.330427397018016e-02, 1.330427397018016e-02, 2.738862455089774e-03, 2.812141615971278e-03, 2.583040747331795e-03, 2.634272825569564e-03, 3.003314611978739e-03, 3.003314611978739e-03, 3.120276596151814e-02, 2.463902526968487e-02, 2.311227084561483e-02, 1.751394762392648e-02, 3.760907975158466e-02, 3.760907975158466e-02, 6.395366422452174e-05, 1.755605063867317e-03, 7.932803512722746e-05, 3.364700027220200e-03, 2.873025190214121e-04, 2.873025190214121e-04, 1.847818101672697e-13, 6.162563539516345e-13, 3.703168419785303e-13, 6.249821660120884e-06, 7.859062509077030e-13, 7.859062509077016e-13, 2.681042695659875e-01, 2.296541977278459e-01, 2.595859032751737e-01, 2.783771790810473e-01, 2.699982580921451e-01, 2.699982580921451e-01, 7.370024376412083e-02, 2.606255492174051e-02, 4.695573463810535e-02, 8.475904398654843e-02, 6.233910188442458e-02, 6.233910188442460e-02, 1.718882108465906e-02, 3.351630417756782e-03, 7.936814374574944e-03, 2.305715414794499e-02, 1.501690108364519e-02, 1.501690108364519e-02, 2.312035498138564e-02, 1.085765812756576e-07, 1.476918826441810e-06, 3.377863573152424e-02, 3.734608815266720e-05, 3.734608815266736e-05, 1.796758243841726e-10, 2.420300452458872e-16, 5.773656533963882e-15, 4.119145154913323e-05, 5.433801534457243e-13, 5.433801534457173e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
