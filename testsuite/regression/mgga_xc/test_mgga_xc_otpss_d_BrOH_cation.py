
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_otpss_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.193348593195943e+01, -2.193353183655141e+01, -2.193380932010699e+01, -2.193312648314706e+01, -2.193347380025866e+01, -2.193347380025866e+01, -3.470959618183209e+00, -3.470971983581002e+00, -3.471558678523517e+00, -3.473449300530200e+00, -3.472139485346647e+00, -3.472139485346647e+00, -6.918854443631623e-01, -6.914671478238512e-01, -6.834532663921995e-01, -6.904600121430889e-01, -6.909717931616839e-01, -6.909717931616839e-01, -2.130595072189061e-01, -2.143726465385127e-01, -7.891648716910964e-01, -1.822799145115972e-01, -2.056250293979796e-01, -2.056250293979795e-01, -9.963340959615020e-03, -1.049179784781154e-02, -5.736323611624558e-02, -5.745627457692183e-03, -8.019104217044663e-03, -8.019104217044663e-03, -5.364630236171099e+00, -5.364972705799922e+00, -5.364686360779701e+00, -5.364987416145821e+00, -5.364782716789003e+00, -5.364782716789003e+00, -2.124626627675218e+00, -2.137202688826549e+00, -2.119082279028129e+00, -2.130170964859146e+00, -2.134266725352607e+00, -2.134266725352607e+00, -6.339063257115789e-01, -6.738410491705721e-01, -5.765410567139677e-01, -5.870375139887639e-01, -6.432978533445729e-01, -6.432978533445730e-01, -1.410255206157328e-01, -2.291657980648308e-01, -1.317739341784309e-01, -1.895704827622618e+00, -1.569367881398049e-01, -1.569367881398049e-01, -4.435923311963800e-03, -5.616680279361613e-03, -4.301124631958468e-03, -9.125769910725723e-02, -5.402846487290723e-03, -5.402846487290722e-03, -6.301623258294987e-01, -6.331435584691215e-01, -6.327722509069373e-01, -6.320241823083449e-01, -6.324573272024717e-01, -6.324573272024717e-01, -6.073818662040807e-01, -5.451012062424155e-01, -5.670003305710356e-01, -5.874332914756113e-01, -5.770941314633636e-01, -5.770941314633636e-01, -7.045971924442596e-01, -2.711213954542080e-01, -3.089923114334840e-01, -3.843572253269608e-01, -3.446754335362257e-01, -3.446754335362257e-01, -5.020268380920602e-01, -5.488823906669761e-02, -7.434615874731065e-02, -3.722793628718937e-01, -1.133819198637985e-01, -1.133819198637985e-01, -1.404103578989226e-02, -1.501337133741870e-03, -3.157217363801429e-03, -1.072138241268451e-01, -4.961658553830896e-03, -4.961658553830886e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_otpss_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.696024424464595e+01, -2.696064501553722e+01, -2.696032741403616e+01, -2.696070597817144e+01, -2.696067913426386e+01, -2.696118326588789e+01, -2.695973429234791e+01, -2.695998718452186e+01, -2.696028265295712e+01, -2.696053374630905e+01, -2.696028265295712e+01, -2.696053374630905e+01, -4.256827394874637e+00, -4.256497915615994e+00, -4.257007538890909e+00, -4.256600140405109e+00, -4.260413426500961e+00, -4.260994872760346e+00, -4.259940794314603e+00, -4.259838387607982e+00, -4.255806159423368e+00, -4.263065879558292e+00, -4.255806159423368e+00, -4.263065879558292e+00, -8.530522478762963e-01, -8.576729060302944e-01, -8.507780477734956e-01, -8.565076002749886e-01, -8.133097675424233e-01, -8.046407243805123e-01, -8.153589414779756e-01, -8.180125559316165e-01, -8.537319149417791e-01, -7.723103023656128e-01, -8.537319149417791e-01, -7.723103023656128e-01, -1.943376557026312e-01, -2.192997445394424e-01, -1.940139220204045e-01, -2.278127768186839e-01, -9.927005647918544e-01, -1.028658318286853e+00, -1.618919909631363e-01, -1.635753331064703e-01, -1.794337697751906e-01, -1.732775423379854e-01, -1.794337697751905e-01, -1.732775423379853e-01, -1.283849195626517e-02, -1.364101185255290e-02, -1.345173188816343e-02, -1.440817668685625e-02, -7.307114229858236e-02, -7.690359176713049e-02, -7.721994087806444e-03, -7.593436058097772e-03, -1.145523086628127e-02, -6.520942876071171e-03, -1.145523086628127e-02, -6.520942876071175e-03, -6.665671418189152e+00, -6.664274211452552e+00, -6.666725712940978e+00, -6.665310262663688e+00, -6.665789709450992e+00, -6.664360848299184e+00, -6.666704990352355e+00, -6.665286567502543e+00, -6.666157876571824e+00, -6.664790739726683e+00, -6.666157876571824e+00, -6.664790739726683e+00, -2.546729053743327e+00, -2.546523911367415e+00, -2.566090134331128e+00, -2.565322149784786e+00, -2.526607415012883e+00, -2.531165494569232e+00, -2.543446473643851e+00, -2.548139861692815e+00, -2.570020781375513e+00, -2.559965020412985e+00, -2.570020781375513e+00, -2.559965020412985e+00, -8.029421096778004e-01, -8.014026458458907e-01, -8.740222670963996e-01, -8.740618204728020e-01, -7.202200461535341e-01, -7.635598219789338e-01, -7.845848331526096e-01, -8.367113047398491e-01, -8.317721969706020e-01, -7.962880125192214e-01, -8.317721969706022e-01, -7.962880125192215e-01, -1.605547215402757e-01, -1.604674902577287e-01, -1.884133243322069e-01, -1.882680564574096e-01, -1.512654843592764e-01, -1.551985348855985e-01, -2.678723736776543e+00, -2.678014530091890e+00, -1.633359511466297e-01, -1.504439846105990e-01, -1.633359511466297e-01, -1.504439846105990e-01, -5.793542799601335e-03, -6.020888801371890e-03, -7.429882144254370e-03, -7.542356409687378e-03, -5.555301020135676e-03, -5.882812259265105e-03, -1.142779787421330e-01, -1.151035375033644e-01, -5.674506663436973e-03, -7.790871284424804e-03, -5.674506663436974e-03, -7.790871284424807e-03, -8.125787771908484e-01, -8.151641534624642e-01, -8.057827477123496e-01, -8.084217266079503e-01, -8.079541472516675e-01, -8.106039969816080e-01, -8.099634345285492e-01, -8.125786294957452e-01, -8.089345533913019e-01, -8.115716410634334e-01, -8.089345533913019e-01, -8.115716410634334e-01, -7.922322968048325e-01, -7.942342359321279e-01, -6.892522341479737e-01, -6.913478903968044e-01, -7.177137488028590e-01, -7.197781537775539e-01, -7.435370018297978e-01, -7.456102319786178e-01, -7.299468631463316e-01, -7.322379953718660e-01, -7.299468631463317e-01, -7.322379953718660e-01, -9.287911307304456e-01, -9.220723071459594e-01, -2.622107719644523e-01, -2.639050805707778e-01, -3.380949923433016e-01, -3.439545677242000e-01, -4.710991757663974e-01, -4.731074529458715e-01, -4.115992986898152e-01, -4.114917416262677e-01, -4.115992986898153e-01, -4.114917416262676e-01, -6.328693628956384e-01, -6.370595192785430e-01, -7.184711445085992e-02, -7.231187524453699e-02, -9.470593628909212e-02, -9.745205277794693e-02, -4.668186226382202e-01, -4.819921738077706e-01, -1.334200575468558e-01, -1.337551014220662e-01, -1.334200575468558e-01, -1.337551014220662e-01, -1.835160918952916e-02, -1.901427728795186e-02, -1.999438958962241e-03, -2.003980529792310e-03, -4.068012197420776e-03, -4.326560008673293e-03, -1.282328551294251e-01, -1.297335666074478e-01, -5.374495882336751e-03, -7.141487898566251e-03, -5.374495882336741e-03, -7.141487898566242e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.844934356573683e-08, 2.088466894162895e-10, -1.845026151565719e-08, -1.844981849835404e-08, 2.088576850506855e-10, -1.845060397521299e-08, -1.845044165252602e-08, 2.088746581397902e-10, -1.845175758344031e-08, -1.844513756388945e-08, 2.087112767417440e-10, -1.844495373863526e-08, -1.844971013534028e-08, 2.088014174313863e-10, -1.844698795762310e-08, -1.844971013534028e-08, 2.088014174313863e-10, -1.844698795762310e-08, -2.527899251461188e-05, 1.743696639740447e-06, -2.523941426275075e-05, -2.529365954612361e-05, 1.744111421644275e-06, -2.524611127257638e-05, -2.555031161406230e-05, 1.752950980459332e-06, -2.558869460231292e-05, -2.559331478325132e-05, 1.729729241866125e-06, -2.556233904817148e-05, -2.526569683645542e-05, 1.741012646732578e-06, -2.580214980197187e-05, -2.526569683645542e-05, 1.741012646732578e-06, -2.580214980197187e-05, -8.870953953932713e-03, 2.872146203937318e-03, -8.789076963072929e-03, -8.935155597875265e-03, 2.833523321348213e-03, -8.819600050531937e-03, -9.870075814573213e-03, 1.892647257246687e-03, -1.008283533143797e-02, -9.915548586814961e-03, 1.777171775611689e-03, -9.929678588974821e-03, -8.909170899092893e-03, 2.018831939212961e-03, -1.015274493353429e-02, -8.909170899092893e-03, 2.018831939212961e-03, -1.015274493353429e-02, -1.514665668851966e+00, -5.208477274328971e-01, -6.522204471085485e-01, -1.743911541055947e+00, -4.973127186960331e-01, -5.552961974622999e-01, -2.973152761733780e-03, 1.814082751325766e-03, -2.619379799282202e-03, -2.018413336987274e+00, -5.003339088859765e-01, -1.947932226846170e+00, -1.821010133835010e+00, -9.923525274601400e-01, 1.233068382553443e+00, -1.821010133835010e+00, -9.923525274601467e-01, 1.233068382553458e+00, 4.668082141129257e+00, -1.183235135919572e+01, 2.521912488437378e+00, 5.267521264187767e+00, -1.273731184317010e+01, 2.628166255845850e+00, -1.538467920196780e-01, -2.420354168998577e+00, -5.905413040237333e-01, -1.253723548126837e+00, -2.037061569965003e+00, -1.090330986084011e+00, -2.428228522611564e+00, 3.331678171369823e-03, -6.151173012954763e+00, -2.428228522611971e+00, 3.331678173111370e-03, -6.151173012957130e+00, -7.483907112342046e-06, 4.289602165116945e-07, -7.489720786707284e-06, -7.548713201309725e-06, 4.356162791195106e-07, -7.552257693368153e-06, -7.487715937763434e-06, 4.292192611581687e-07, -7.491956552432467e-06, -7.543197565631770e-06, 4.350951134407463e-07, -7.548860192449445e-06, -7.516881157151084e-06, 4.323439358190485e-07, -7.520969383736001e-06, -7.516881157151084e-06, 4.323439358190485e-07, -7.520969383736001e-06, -5.864013273271826e-05, -1.936166163928300e-06, -5.906387242912936e-05, -5.993439052638017e-05, -2.183253283540091e-06, -6.031960447903812e-05, -5.934158566621157e-05, -2.702804754232814e-06, -5.964861015315355e-05, -6.045827869322902e-05, -2.948910840864953e-06, -6.081021376940724e-05, -5.956256028511254e-05, -1.675319742437058e-06, -5.951151363914214e-05, -5.956256028511254e-05, -1.675319742437058e-06, -5.951151363914214e-05, -1.859404500342490e-02, 8.401124151365829e-03, -1.839490916914134e-02, -1.588894111951367e-02, 1.914121511442287e-02, -1.662478975330683e-02, -4.593303219470868e-02, 1.223580904618078e-02, -5.981138215308456e-02, -2.982102903114465e-02, 2.733151546362025e-02, -4.640067059439364e-02, -1.727528266953219e-02, 8.971057179595447e-03, -2.236307263082569e-02, -1.727528266953217e-02, 8.971057179595449e-03, -2.236307263082566e-02, -1.431322415764356e+00, -7.838123156540971e-01, -1.517695413705547e+00, -1.167244139734252e+00, -2.809248464493554e-01, -1.167153107490966e+00, -1.393264232011069e+00, -8.991864351245491e-01, -1.581765190070952e+00, -3.839417776414221e-04, 1.381075948746869e-04, -3.851552402840656e-04, -1.815913985663392e+00, -8.412180100268145e-01, -2.816963547585292e+00, -1.815913985663391e+00, -8.412180100268153e-01, -2.816963547585292e+00, -3.118930714813114e+00, 1.211189547582373e-03, -2.699461062067853e+00, -2.686298773828624e+00, 3.613274505372406e-04, -2.480071523571052e+00, -1.364300691590891e+01, -2.787066854253919e+00, -1.585995520531282e+01, -1.395104596252717e+00, -1.730010685074170e+00, -1.336362002838388e+00, -7.610340240478880e+00, 9.215423798575770e-03, -7.487226151258604e+00, -7.610340240477297e+00, 9.215423788701800e-03, -7.487226151264549e+00, -1.456023142508998e-01, 7.721470234985173e-02, -1.474014167712184e-01, -8.710550030908362e-02, 4.120038720386841e-02, -8.757474297217396e-02, -1.024839078437458e-01, 5.125223047005568e-02, -1.033516603281470e-01, -1.192815729605563e-01, 6.186315764951504e-02, -1.200884259644559e-01, -1.103490838916181e-01, 5.627124612134302e-02, -1.111859450045606e-01, -1.103490838916181e-01, 5.627124612134301e-02, -1.111859450045606e-01, -9.586768161021564e-02, 5.983452739914242e-02, -9.851960944552166e-02, -1.589805115283243e-02, -3.390472775283899e-03, -1.608836502560378e-02, -2.622269201841106e-02, 3.159317110092042e-03, -2.662031144552163e-02, -4.743874900796753e-02, 1.606678996410478e-02, -4.720731650327029e-02, -3.521717882700932e-02, 8.571701681490726e-03, -3.506507199992806e-02, -3.521717882700934e-02, 8.571701681490752e-03, -3.506507199992804e-02, -1.581056996610014e-02, 1.467780339442096e-02, -1.354034439673546e-02, -3.006368032087685e-01, -1.536542380259903e-01, -2.945616732974333e-01, -1.752207957562262e-01, -7.446377871791465e-02, -1.555849079799152e-01, -2.506253967991342e-01, 1.949003035731431e-02, -2.436288975023579e-01, -1.617464498757487e-01, -2.742694374943999e-02, -1.630352033266263e-01, -1.617464498757480e-01, -2.742694374944010e-02, -1.630352033266264e-01, -2.128573932661655e-02, 3.433742060467413e-03, -1.964712604041697e-02, -1.430222977054172e-01, -2.531874064284068e+00, -1.995968100957752e-01, -6.012424705680778e-01, -1.691400757907239e+00, -8.330345515892720e-01, -3.632481238324234e-01, 5.113209728534975e-02, -1.127471687074782e-01, -1.748842437966235e+00, -1.497295135079220e+00, -2.808399579073578e+00, -1.748842437966216e+00, -1.497295135079248e+00, -2.808399579073564e+00, -1.187497810633128e+00, -1.338380951436979e+00, -1.373513655437943e+00, -9.589660087889945e+00, 2.340617086848437e-03, -1.698895420583415e+01, -5.398208995367513e+00, -8.662427410127307e-01, -5.943256389337456e+00, -1.830781792858120e+00, -2.098928601837418e+00, -1.906647732277339e+00, -1.570286815307952e+01, 1.181184474713008e-02, -7.767962327094139e+00, -1.570286815308320e+01, 1.181184477874452e-02, -7.767962327086525e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.940206845051340e-04, 7.944077353489949e-04, 7.940670041479567e-04, 7.944413294020152e-04, 7.942043515908345e-04, 7.946412257025411e-04, 7.936854276722782e-04, 7.939781901853488e-04, 7.940507602898568e-04, 7.942344692826753e-04, 7.940507602898568e-04, 7.942344692826753e-04, 3.032656674844777e-03, 3.016838480186311e-03, 3.037122770585915e-03, 3.018538150313832e-03, 3.111680110641823e-03, 3.121674139557830e-03, 3.142642821518055e-03, 3.129921128082224e-03, 3.024889532859261e-03, 3.200631855234080e-03, 3.024889532859261e-03, 3.200631855234080e-03, 4.217955864068862e-03, 4.122636715931835e-03, 4.261058609021913e-03, 4.128744144920917e-03, 4.568962441781724e-03, 4.759829393597223e-03, 5.131453014162109e-03, 5.183835395168544e-03, 3.705367717525436e-03, 4.858367431537895e-03, 3.705367717525436e-03, 4.858367431537895e-03, 2.748793285950123e-02, -3.383937909950977e-03, 3.960886429719592e-02, -4.371783825788979e-03, 7.261172719421137e-04, 7.297682812790999e-04, 1.542926837329706e-03, 1.533420732831238e-03, 3.392642720214553e-02, 1.404951115990616e-03, 3.392642720214552e-02, 1.404951115990629e-03, 2.604975246914690e-09, 2.605296835328259e-09, 3.733981347599500e-09, 3.734092924209231e-09, 2.877942758179581e-06, 2.887247626828986e-06, -1.519007508470667e-11, -1.519190113442972e-11, -5.133918064097483e-10, -5.134102326310074e-10, -5.133918064352394e-10, -5.134102326564984e-10, 6.171443948661526e-03, 6.174809125418968e-03, 6.244574589348785e-03, 6.245480955494820e-03, 6.177134684962502e-03, 6.178385156128464e-03, 6.239783770909689e-03, 6.242572333935006e-03, 6.207536244732651e-03, 6.209966909896566e-03, 6.207536244732651e-03, 6.209966909896566e-03, -4.340910649361145e-04, -4.018055206788365e-04, -2.062861353604710e-04, -1.793083152819567e-04, -4.040756570730344e-04, -3.856106516621172e-04, -2.018248455028088e-04, -1.780235878968692e-04, -3.133613844156229e-04, -2.834016922193831e-04, -3.133613844156229e-04, -2.834016922193831e-04, 8.761592403777298e-03, 8.124052807672439e-03, -1.044678787844156e-03, -8.188689044954711e-04, 2.852619847365102e-02, 5.595008918346571e-02, 1.934466270774386e-02, 4.717512892796229e-02, 9.940390971687160e-03, 1.025521818061600e-02, 9.940390971687172e-03, 1.025521818061596e-02, 1.506734680606023e-04, 1.569481572822348e-04, 1.525948546162959e-02, 1.560395704389902e-02, 1.111898473193590e-04, 1.186428465218025e-04, 1.344477429086059e-02, 1.347146180660459e-02, 5.282155805576559e-04, 9.537493868326788e-04, 5.282155805576565e-04, 9.537493868326827e-04, -1.164805073832066e-11, -1.164814301002183e-11, -4.946414913043334e-11, -4.946418589567787e-11, -2.794267094695177e-10, -2.793960099482034e-10, 2.818104625475166e-05, 2.748590381871692e-05, -2.544608958175634e-10, -2.544575070895845e-10, -2.544608958176929e-10, -2.544575070897142e-10, 9.788087784181132e-02, 1.013991742493791e-01, 7.880789198409456e-02, 8.110384519609547e-02, 8.713981139133621e-02, 9.005192289104183e-02, 9.407005155308110e-02, 9.713982934881081e-02, 9.068207349908036e-02, 9.368369025684847e-02, 9.068207349908035e-02, 9.368369025684850e-02, 2.266580708326264e-02, 2.496334956579309e-02, 1.108312478409293e-02, 1.131757153096468e-02, 2.047982045095211e-02, 2.101708356179993e-02, 3.657204573177901e-02, 3.691772981669410e-02, 2.718877373198929e-02, 2.762799931404531e-02, 2.718877373198932e-02, 2.762799931404527e-02, 1.094418808937266e-02, 4.084434810627098e-03, -4.247848098201727e-03, -4.359663924321249e-03, 5.651171524159618e-03, 3.762467622208571e-03, 6.472053003044026e-02, 6.342277577242657e-02, 2.445188665924259e-02, 2.458297644433397e-02, 2.445188665924242e-02, 2.458297644433399e-02, 4.992280076147841e-03, 4.037342900694373e-03, 2.430101885218918e-06, 2.431149462569934e-06, 7.504732725180241e-06, 7.563121300159429e-06, 8.202912875185106e-02, 1.664130505289653e-02, 1.006883257470851e-04, 1.165482287074561e-04, 1.006883257470874e-04, 1.165482287074585e-04, 2.924092872241999e-10, 2.938778496139301e-10, -1.520365486299944e-13, -1.520235903229878e-13, -2.037290189568805e-11, -2.037266755242847e-11, 1.039254907265346e-04, 1.111936906336614e-04, -2.625031675243700e-10, -2.625456733403108e-10, -2.625031707722461e-10, -2.625456765881871e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
