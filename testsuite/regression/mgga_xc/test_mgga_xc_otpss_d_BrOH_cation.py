
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_otpss_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.048808024910555e+01, -2.048816458414871e+01, -2.048854586066481e+01, -2.122871189714688e+01, -2.120554465189474e+01, -2.202367701625852e+01, -3.506864976671058e+00, -3.746634440805840e+00, -3.745689336595704e+00, -3.746408020416207e+00, -3.745943689745641e+00, -3.506370978218387e+00, -6.911948366986642e-01, -7.199488017399593e-01, -7.629617849136705e-01, -6.972281496587779e-01, -6.785546373207058e-01, -7.648460415911530e-01, -1.942271302960742e-01, -2.041932899332681e-01, -8.549918294076265e-01, -1.889484817491978e-01, -2.085303073556878e-01, -2.004619482982433e-01, -9.963373492366820e-03, -8.521944560864601e-03, -4.638065247072859e-02, -5.745689224115570e-03, -8.019183632687945e-03, -8.019183632687945e-03, -5.382662159802104e+00, -5.367146372152207e+00, -5.366823094340827e+00, -5.367119145855844e+00, -5.220997488568444e+00, -5.200657303568542e+00, -2.148697994085402e+00, -2.159473420525234e+00, -2.132125880845970e+00, -2.141292603717296e+00, -2.023503014204448e+00, -2.158302067777499e+00, -6.154064824856572e-01, -6.947797753949682e-01, -6.012473322516291e-01, -6.212438407222922e-01, -6.266582371968192e-01, -6.546783709559665e-01, -1.427015235416010e-01, -2.005889955202775e-01, -1.334412265028106e-01, -2.035003888814800e+00, -1.602106433566086e-01, -1.602106433566086e-01, -3.544983225352915e-03, -5.616809586599423e-03, -4.301205457024358e-03, -7.219096849147218e-02, -5.402922201983080e-03, -5.402922201983080e-03, -6.419856087502462e-01, -6.396651499492418e-01, -6.188976086058925e-01, -6.304727129716226e-01, -6.191421854034913e-01, -6.298802102985654e-01, -6.344224045184010e-01, -5.313887272804967e-01, -5.462751819948581e-01, -5.920184310041742e-01, -5.803221693124845e-01, -5.616332370366472e-01, -7.150037245520597e-01, -2.769887762177884e-01, -2.869615553797805e-01, -3.719910594750853e-01, -3.540184238874208e-01, -3.257151664883106e-01, -5.059687140429550e-01, -4.555302092142400e-02, -7.449448180101136e-02, -3.854814064482571e-01, -1.142762397828170e-01, -1.142762397828171e-01, -1.297235585239995e-02, -1.501352320718218e-03, -3.158300525548683e-03, -8.597782497170602e-02, -4.961735904406145e-03, -3.327080886159116e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_otpss_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.875618064648240e+01, -2.875398702535286e+01, -2.875595643254194e+01, -2.875382462276134e+01, -2.875537705916009e+01, -2.875295323575436e+01, -2.873877592789599e+01, -2.715422743877075e+01, -2.870879503108737e+01, -2.713448312710275e+01, -2.710696214172083e+01, -2.710659207930248e+01, -4.523149156088745e+00, -4.374219416962110e+00, -4.492871314911255e+00, -4.492788702206382e+00, -4.493977205373016e+00, -4.494103440845287e+00, -4.502431994965788e+00, -4.502495095340717e+00, -4.492490717923784e+00, -4.494505026061966e+00, -4.373963024210641e+00, -4.525188139945738e+00, -9.043093979966522e-01, -9.069732797840533e-01, -9.056964675126740e-01, -8.753056266654776e-01, -7.868087830598792e-01, -7.785966946206092e-01, -8.211153621338055e-01, -8.628571394638890e-01, -9.088581459433083e-01, -8.651968180032964e-01, -8.392451606039757e-01, -7.537871566191539e-01, -2.360713016934782e-01, -2.332367513757406e-01, -2.633756702635416e-01, -2.488684903352951e-01, -8.649248180714568e-01, -1.019012125695662e+00, -1.875243550401776e-01, -1.773571205712626e-01, -1.908889790776024e-01, -1.792053713630446e-01, -1.906317575587027e-01, -1.221044611467206e-01, -1.283872070861699e-02, -1.364109961355874e-02, -7.605199507245292e-03, -1.440837117516622e-02, -4.234807801905548e-02, -7.716122709980118e-02, -7.722272072391994e-03, -7.593653254824503e-03, -1.145551747791526e-02, -6.521423928941262e-03, -1.145551747791526e-02, -6.521423928941257e-03, -6.697185822131955e+00, -6.695639783997834e+00, -6.672716652613540e+00, -6.671115243065811e+00, -6.671838561305538e+00, -6.670244334575641e+00, -6.672644343083160e+00, -6.671059567340281e+00, -6.637826886857417e+00, -6.707957141011199e+00, -6.710833910660455e+00, -6.629883389514951e+00, -2.556790903449560e+00, -2.557223577850471e+00, -2.582038070951235e+00, -2.581706812683811e+00, -2.508353913913506e+00, -2.514197278122349e+00, -2.531058175555560e+00, -2.536866845113309e+00, -2.607028499768462e+00, -2.531723557805598e+00, -2.586312758640608e+00, -2.573215802506516e+00, -8.409889647293793e-01, -8.139069771797290e-01, -8.783392877531099e-01, -8.769334084333993e-01, -7.464960049160871e-01, -7.632090040744945e-01, -7.857385368577336e-01, -8.016510429925425e-01, -8.670405400520250e-01, -8.096209657297342e-01, -8.500140813893022e-01, -8.185780300384780e-01, -1.672801887522347e-01, -1.682003994408813e-01, -2.323369924763630e-01, -2.210605669188448e-01, -1.588599675806090e-01, -1.628660959383674e-01, -2.532052497113347e+00, -2.530870651345119e+00, -1.764204681743281e-01, -1.649681342028370e-01, -1.764204681743280e-01, -1.649681342028370e-01, -3.272910752233021e-03, -6.021307112735709e-03, -7.430377079386155e-03, -7.542894934839091e-03, -5.555576875639852e-03, -5.883179929429733e-03, -1.172100802930140e-01, -7.115718116017698e-02, -5.675293142433055e-03, -7.790989435563407e-03, -5.675293142433053e-03, -7.790989435563411e-03, -8.126986061244241e-01, -8.153911900823558e-01, -8.069324708988276e-01, -8.094900572234003e-01, -8.059995115400088e-01, -8.084463639937136e-01, -8.150852580360687e-01, -8.173602624918843e-01, -8.069240795577468e-01, -8.093470336852397e-01, -8.145413931959995e-01, -8.173548854303121e-01, -7.935313379354760e-01, -7.955233618733841e-01, -7.087475104589617e-01, -6.890443815224141e-01, -7.418132382495454e-01, -7.428765061765726e-01, -7.506929200179411e-01, -7.527762938861073e-01, -7.397941415231848e-01, -7.417577435791962e-01, -7.531063743950471e-01, -7.998956651281267e-01, -9.335048310335188e-01, -1.000699332772645e+00, -2.710620441551160e-01, -2.724908977396414e-01, -3.641369494967278e-01, -3.566125743774730e-01, -4.854840747237057e-01, -5.085284398837273e-01, -4.299763184408791e-01, -4.301798856511314e-01, -4.332511939346372e-01, -4.245281562263629e-01, -6.356723184654325e-01, -6.379198475475948e-01, -5.922975423466902e-02, -5.931014465788571e-02, -9.532279760215022e-02, -9.808326533526082e-02, -4.936127035880751e-01, -4.986447334174120e-01, -1.369345850304041e-01, -1.379943954387143e-01, -1.369345850304042e-01, -1.379943954387143e-01, -1.697548132145249e-02, -1.701524270948498e-02, -1.999485581669189e-03, -2.004055310798775e-03, -4.167535840273016e-03, -4.168884071889814e-03, -1.113570896224820e-01, -1.119372409902115e-01, -5.375316416680308e-03, -7.141579039484866e-03, -5.375364789432508e-03, -4.035568159546966e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.553817870526012e-08, 2.167689084724366e-08, -1.552557274285086e-08, -1.553608977129640e-08, 2.167664903349467e-08, -1.552408898924741e-08, -1.553022674784899e-08, 2.167549939809573e-08, -1.551525164380747e-08, -2.557279352622330e-08, 1.612939138619703e-09, -1.659909032405881e-08, -2.586041137565113e-08, 9.202014193698551e-10, -1.694810900079897e-08, -1.722683812344588e-08, 2.638083922818756e-10, -1.722933348862293e-08, -6.874368499633073e-06, 1.769262697186860e-06, -1.071145684005638e-05, -7.359714841470174e-06, -2.849269677868432e-07, -7.358015630931213e-06, -7.387147057759470e-06, -2.834915107728775e-07, -7.393134766010895e-06, -7.214663264279929e-06, 3.667992128770266e-08, -7.214288656181096e-06, -7.354072905546214e-06, -2.840117258774977e-07, -7.405307511387179e-06, -1.070800345704160e-05, 1.790142327075580e-06, -6.911241109996893e-06, 2.500491415944555e-03, 2.229111920445588e-02, 2.637042237636857e-03, -6.036385360058264e-03, 5.249963799037013e-03, -2.523933104429115e-03, -4.870285754922461e-03, -7.454434345362316e-04, -5.020964217005426e-03, -4.447870270332085e-03, 1.668456516434536e-03, -7.875907422193552e-03, 3.882127446396001e-03, 2.426793900208742e-02, 1.408160178232629e-03, -4.038756951289653e-03, -7.781524533036949e-04, -5.444493234066366e-03, -1.476069390684897e+00, 2.277400192047627e-01, -5.995380248662152e-01, -1.125178054070661e+00, 1.697511090163646e+00, -2.030339701793844e-01, -2.662686112303904e-03, 3.533857257121725e-04, -4.090940597398532e-03, -1.050030671481299e+00, -5.938756206392805e-01, -1.332341158643764e+00, -1.094608452212354e+00, 3.952859923593512e-02, -1.081402287051076e+00, -1.094258193255997e+00, 3.121252782252763e-02, -2.104098970117332e+01, -2.358867964165134e+00, 3.691041682233482e-02, -2.369609041598792e+00, -1.226304745334994e+06, 2.451494799025593e-02, -2.487592569388908e+00, -1.283217920905544e+03, 1.094507024993983e-01, -1.271704902147681e+00, -1.730089045974262e+00, 9.745350572648821e-03, -1.747789795590740e+00, -2.255860900296207e+00, 9.036674863147893e-05, -3.854449412321398e+00, -2.255860900296154e+00, 9.036674868508082e-05, -3.854449412310339e+00, -7.115910867323338e-06, 1.015779881268828e-06, -7.123709915581505e-06, -7.478932158525131e-06, 5.017454598002610e-07, -7.484648289237924e-06, -7.417743066785857e-06, 4.970056847159671e-07, -7.423901647393540e-06, -7.474106744341643e-06, 5.014437221099371e-07, -7.481703248951377e-06, -3.576648835523191e-06, 2.062169151903128e-06, -6.626478073432612e-06, -6.872499980438327e-06, 1.601896197871574e-06, -5.605526640912247e-06, -5.938655243839022e-05, 2.316331042938745e-05, -5.950856542436945e-05, -5.819902662009402e-05, 2.350687247571935e-05, -5.836399163988340e-05, -6.352276181138612e-05, -5.770169624384930e-06, -6.347766996972506e-05, -6.243922500457297e-05, -5.602486307419471e-06, -6.245830259293285e-05, -4.302732180903442e-05, 5.382190231001167e-05, -8.843319333396403e-05, -5.811772358142054e-05, 2.351860077881175e-05, -5.870229492901365e-05, -4.920391359482582e-03, 1.777545067656676e-02, -2.263267825574530e-02, -1.954575529276885e-02, 3.689826664550757e-03, -2.098458003131984e-02, -7.346961981344216e-03, -3.725817645129054e-03, -9.659238703164257e-03, -9.288360735022309e-03, 2.517445371655758e-03, -1.150748551829171e-02, -6.456749471842677e-03, 1.631032929363944e-02, -2.859753251141915e-02, -1.045282665323138e-02, 2.542944136417705e-03, -9.593761426532458e-03, -8.306216099708266e-01, -8.303415649255756e-01, -8.543775017550208e-01, -1.694892636863947e+00, 1.409632163685865e-01, -6.781067934920577e-01, -1.137508660410659e+00, 3.141574192853633e-01, -1.247473074921090e+00, -1.414860153381961e-04, 1.576935759289502e-05, -1.419493939506414e-04, -1.534676825323684e+00, 6.603804839972700e-01, -2.273308517663930e+00, -1.534676825323688e+00, 6.603804839972662e-01, -2.273308517663933e+00, -3.575091484326395e+07, 2.443582416577727e-03, -1.159122231951246e+00, -1.645137044287064e+00, 1.009051093934803e-03, -1.449996145754726e+00, -1.180242521485874e+01, 1.119762607540318e-01, -1.296590440010895e+01, -1.117075766097072e+00, -9.300250707570355e-02, -1.631087067043981e+02, -2.218579127637553e+00, 2.628049425028930e-02, -7.090446882305573e+00, -2.218579127637820e+00, 2.628049425653510e-02, -7.090446882302292e+00, -1.662405080078967e-01, 9.154548534617406e-02, -1.691438517092951e-01, -8.584218578904262e-02, 3.685107463794267e-02, -8.665228523275648e-02, -3.562204051849659e-02, 3.790334330468324e-02, -3.603936404507598e-02, -4.469983096049051e-02, 6.200016123772417e-02, -1.164163774511931e-01, -4.048118454503670e-02, 3.777724148770262e-02, -4.089251026407989e-02, -4.104813475325333e-02, 5.791759729406409e-02, -1.038139950979273e-01, -1.617817415563632e-01, 6.330896903362949e-02, -1.652278388341004e-01, -7.872146146127405e-04, 4.740192115085090e-02, -1.215247385644233e-02, -1.116485752238695e-02, 3.576977406313699e-02, -4.531980390578547e-02, -3.893144265867485e-02, 1.216879024700299e-02, -3.883344960031496e-02, -2.655862684444375e-02, 8.642688666423768e-03, -2.672141197898671e-02, -1.729991601917509e-02, 3.730763845881937e-02, -7.192236330071046e-02, -6.706716902377534e-03, 1.629331347354155e-02, -2.404555541956837e-02, -3.616553198123699e-01, 2.202280261977746e-01, -3.523945450042578e-01, -2.574901759686493e-01, 1.140345542056450e-01, -1.146830103431096e-01, -5.554096513634911e-02, 8.533645049555307e-02, -1.108482690071187e-02, -5.358295325221210e-02, 1.333483099768231e-01, -5.372506487081520e-02, -3.510279762777262e-02, 1.151570153963557e-01, -1.167177338287200e-01, -1.327694861052914e-02, -9.889591869363454e-03, -1.441130238304154e-02, 4.052140705324098e+02, 3.578316090430844e+03, 4.424503288149488e+02, 8.605488096093330e-01, -3.592768804641671e+00, 4.428915256112966e-01, -1.956100247531008e-02, 1.401203729581208e-01, -2.972216507964659e-02, -5.501463057722729e-01, -2.243982059934428e+00, -1.544226407009605e+00, -5.501463057722127e-01, -2.243982059934511e+00, -1.544226407009560e+00, 7.708353572080319e+04, 8.604776533799156e+05, 1.239714051349396e+05, -8.540148998186305e+00, 1.321110614461637e+01, -8.441361426240764e+00, 2.227215976129797e+07, 3.387675573884846e+08, 5.441886623160632e+07, 2.230366684674605e+01, 2.120324420595702e+02, 2.755042402652776e+01, -5.760698471570652e+00, 4.157250973144229e-03, -7.360130706097796e+00, -5.341736089757309e+00, 8.407777651467486e-01, -1.546764349676595e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.697722454654654e-04, 8.685510912782001e-04, 8.695901291439311e-04, 8.684188837412241e-04, 8.690740335245732e-04, 8.676598876044673e-04, 8.672077360050510e-04, 7.963317970289592e-04, 8.586271579605972e-04, 7.894770377304363e-04, 8.003834303580488e-04, 8.005055109441438e-04, 1.146161672746825e-04, -1.874465634358081e-04, 2.791622401310011e-04, 2.786405369120311e-04, 2.890983186364943e-04, 2.906888622134595e-04, 1.783418428153579e-04, 1.783512626830975e-04, 2.784523972073963e-04, 2.934813826237707e-04, -1.876122307980497e-04, 1.284535583070490e-04, -1.545417964053028e-04, -1.636276549442937e-04, -4.096540291050119e-04, -1.564480745418819e-03, -1.306233814114787e-03, -1.302483391299082e-03, -1.616104660711462e-03, -4.323992188923876e-04, -1.688777877521320e-04, -9.842810756139134e-05, -1.292653480170014e-03, -1.271003697428997e-03, -9.607455133067180e-04, -4.931432699262116e-03, -1.952035359636097e-03, -6.060965831393364e-03, -7.737264825747626e-04, -1.479809364285417e-04, -7.770075032802388e-05, -3.638657713830066e-04, -3.483884344044959e-03, -9.282854909677982e-05, -3.483884344044955e-03, -1.048884587154961e-05, -6.463022675489351e-10, -7.633240954559925e-10, -1.307095666627130e-08, -5.925118987114038e-09, -4.091318536669141e-06, -4.567592188787514e-06, -3.237608394844122e-11, -3.132785950184203e-11, -1.681731828835402e-10, -2.243108794636411e-11, -1.681731828835402e-10, -2.243108794636115e-11, 6.154764848755470e-03, 6.156705143816083e-03, 6.190217955169150e-03, 6.189641437932226e-03, 6.120073575248466e-03, 6.120044283931054e-03, 6.184699274655970e-03, 6.186182781844286e-03, -1.827785963106528e-03, 6.103449443597550e-03, 5.896747870790035e-03, -2.034042402022024e-03, -1.110259575329209e-04, -1.047021851152340e-04, -4.395867049379623e-05, -3.907237000923660e-05, 6.503256410554133e-05, 8.568114196611383e-05, 1.300696434030630e-04, 1.533216492779022e-04, -1.019694754734104e-04, -2.489951227210535e-04, -2.704578649010970e-05, -6.360763495352596e-05, 5.009733707474132e-03, -5.639259381396869e-04, 3.300380415008281e-02, 3.512760161788794e-02, 6.155756311104012e-03, 8.462027405202422e-03, 7.358967444796975e-03, 1.049120408416158e-02, 8.897629627143784e-03, -3.002551363891527e-04, 1.223433418930055e-02, 8.953619206826182e-03, -1.005709951184033e-04, -1.050760245137555e-04, -5.959094566539731e-04, -2.316077382956535e-03, -6.674633824581315e-05, -9.368733021753394e-05, 3.842754106252461e-03, 3.851503639263390e-03, -3.614434777764374e-04, -7.668564110275228e-04, -3.614434777764369e-04, -7.668564110275246e-04, -3.516772915933629e-10, -3.711982123653812e-11, -1.201420200496263e-11, -1.071759737045665e-11, -1.405434213043555e-10, -1.694821952343089e-10, -3.564163170879400e-05, -2.728616853716749e-05, -1.098935464900022e-10, -2.416403902143013e-10, -1.098935464900015e-10, -2.416403902138307e-10, 1.830860253724757e-01, 1.915460145702453e-01, 1.005336371505814e-01, 1.035295649588642e-01, -1.195957236490681e-02, -1.176141921854638e-02, -3.559494766636706e-02, 1.848185979194484e-01, -1.139928277229606e-02, -1.122523887665148e-02, -3.315160247198244e-02, 1.642110648777651e-01, 2.357124522627425e-01, 2.436988399432239e-01, 4.041499934547163e-03, -1.625943759082148e-03, 1.038582456397789e-02, 1.051120718069500e-02, 3.723427928954694e-02, 3.766077432700150e-02, 2.264159490367716e-02, 2.309729623397727e-02, 1.834779190756506e-02, 4.114066369583509e-02, 1.780533024351222e-02, 3.730886179465753e-02, -3.031491731872014e-03, -3.057994856196556e-03, -1.750298926648420e-03, -4.716519705721215e-03, -4.372972379584834e-03, -4.228418445520061e-03, -2.909657543773666e-03, -2.888661771317616e-03, -5.179119783889925e-03, -3.196373329212792e-03, 7.491675227049679e-03, 8.024824250176778e-03, -6.416359397665257e-07, -6.418472518208020e-07, -2.782758394908195e-06, -3.502082323039814e-06, 1.137766384803889e-03, 4.303960149163608e-03, -5.375476601155994e-05, -1.019232497273862e-04, -5.375476601156073e-05, -1.019232497273854e-04, -9.195047855198327e-09, -1.008485142182403e-08, -2.084696656073429e-14, -2.094738184783119e-14, -4.561809280714147e-10, -5.814798173563859e-10, -8.232265193547386e-06, -9.721549581201778e-06, -1.559947564494505e-11, -9.328818995679657e-11, -8.543417035209969e-10, -4.305549105302320e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
