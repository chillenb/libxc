
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244333414597167e+01, -2.244339690881358e+01, -2.244376541756130e+01, -2.244283369200261e+01, -2.244330910731160e+01, -2.244330910731160e+01, -3.522708771464986e+00, -3.522715025013702e+00, -3.523129927360193e+00, -3.525073636253614e+00, -3.523749834363443e+00, -3.523749834363443e+00, -7.133420324145918e-01, -7.130336520803591e-01, -7.073397673070947e-01, -7.141201456566870e-01, -7.119473862481142e-01, -7.119473862481142e-01, -2.177139645284579e-01, -2.194992112345578e-01, -8.122394315302909e-01, -1.788927654880333e-01, -1.941760530170428e-01, -1.941760530170428e-01, -1.184374594874891e-02, -1.245631716807370e-02, -6.115181382143031e-02, -6.888494636984488e-03, -8.632398596161413e-03, -8.632398596161413e-03, -5.553627362720511e+00, -5.554654084863076e+00, -5.553750639687927e+00, -5.554654427971494e+00, -5.554108474237900e+00, -5.554108474237900e+00, -2.139278132838544e+00, -2.154111210151039e+00, -2.134511774515617e+00, -2.147501580783670e+00, -2.149856436131243e+00, -2.149856436131243e+00, -6.401311870141888e-01, -6.615687740496909e-01, -5.859958124283796e-01, -5.827343000280308e-01, -6.491012225913618e-01, -6.491012225913618e-01, -1.302483590251998e-01, -2.271990879743550e-01, -1.216966171091733e-01, -1.880037293399938e+00, -1.511257843621431e-01, -1.511257843621431e-01, -5.329266253390476e-03, -6.735710599955291e-03, -5.163961561201975e-03, -8.825821312605028e-02, -6.209559529940105e-03, -6.209559529940105e-03, -6.311657438849712e-01, -6.471235026935370e-01, -6.440464359428608e-01, -6.398543984730174e-01, -6.421786534029635e-01, -6.421786534029635e-01, -5.939142822248032e-01, -5.581113784849314e-01, -5.813746230693944e-01, -6.019567544340785e-01, -5.917738557448169e-01, -5.917738557448169e-01, -6.893126586041693e-01, -2.747526424913826e-01, -3.158068968892631e-01, -3.929534394813224e-01, -3.513453280624652e-01, -3.513453280624652e-01, -5.101221088397936e-01, -5.903461391847151e-02, -7.378437867877620e-02, -3.768710108043961e-01, -1.086217119135718e-01, -1.086217119135718e-01, -1.662403685148850e-02, -1.819860044290850e-03, -3.800233708626627e-03, -1.029939253950966e-01, -5.750353039401891e-03, -5.750353039401886e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.780595677743375e+01, -2.780601857654775e+01, -2.780648744206391e+01, -2.780557198451288e+01, -2.780602395653998e+01, -2.780602395653998e+01, -4.280224358751635e+00, -4.280263554743709e+00, -4.281426001328787e+00, -4.281904971552096e+00, -4.281175186079707e+00, -4.281175186079707e+00, -8.531024706241636e-01, -8.517407162000984e-01, -8.166652486690152e-01, -8.261839713071916e-01, -8.243871709232989e-01, -8.243871709232989e-01, -2.337018327309248e-01, -2.365569685476029e-01, -1.003062222111192e+00, -2.079120356631679e-01, -2.101402306219616e-01, -2.101402306219616e-01, -1.572121134551594e-02, -1.653069197551465e-02, -8.321742736367349e-02, -9.156855972670429e-03, -1.146876677713100e-02, -1.146876677713100e-02, -6.831879301898108e+00, -6.831426430754679e+00, -6.831983164494891e+00, -6.831578704835500e+00, -6.831586648203497e+00, -6.831586648203497e+00, -2.523602994689230e+00, -2.554794323154991e+00, -2.504097541249663e+00, -2.532322505078576e+00, -2.549792085830777e+00, -2.549792085830777e+00, -7.849389351463699e-01, -8.439859972719452e-01, -7.178209398016103e-01, -7.493506103862255e-01, -7.959982262528029e-01, -7.959982262528029e-01, -1.924144407254370e-01, -2.525823868543282e-01, -1.823659596812287e-01, -2.450581862632902e+00, -1.914936686024661e-01, -1.914936686024661e-01, -7.087037697325800e-03, -8.953895045523477e-03, -6.865550342326254e-03, -1.308047107112925e-01, -8.253995151002105e-03, -8.253995151002105e-03, -7.858038534112423e-01, -7.865771092662377e-01, -7.848701279952112e-01, -7.842244803575242e-01, -7.844130835892423e-01, -7.844130835892423e-01, -7.723176775401773e-01, -7.010959553288956e-01, -7.285516545127672e-01, -7.412607286503344e-01, -7.356324938146609e-01, -7.356324938146609e-01, -8.826623500957708e-01, -2.952419594573960e-01, -3.512316954486572e-01, -4.779793166218619e-01, -4.153479364832831e-01, -4.153479364832831e-01, -6.285396448988656e-01, -7.994404276962308e-02, -1.081528664292077e-01, -4.639024976033522e-01, -1.543562862710787e-01, -1.543562862710787e-01, -2.203672183499766e-02, -2.422861383630443e-03, -5.055756529745130e-03, -1.481865607977148e-01, -7.644424719459875e-03, -7.644424719459868e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.332147796585829e-08, -1.332187729916299e-08, -1.332274203832146e-08, -1.331682151151012e-08, -1.332005262991557e-08, -1.332005262991557e-08, -1.214524262933958e-05, -1.214771705079141e-05, -1.221064918926735e-05, -1.216420350349620e-05, -1.218129001736040e-05, -1.218129001736040e-05, -4.678816748052548e-03, -4.690217009123400e-03, -4.926947706676956e-03, -4.872022828844165e-03, -4.890012861877045e-03, -4.890012861877045e-03, -4.203758159201911e-01, -4.191923084984105e-01, -1.580581071956349e-03, -3.480912026958710e-01, -5.015715497253119e-01, -5.015715497253117e-01, -2.440394638027391e+00, -2.578649687876815e+00, 5.606106557788081e+00, -2.215789026647985e+00, -2.815961985488974e+00, -2.815961985488981e+00, -5.946712054033980e-06, -6.009110173821017e-06, -5.949573717658175e-06, -6.004643300220117e-06, -5.978224227400030e-06, -5.978224227400030e-06, -5.310264422816927e-05, -5.110808055833036e-05, -5.209392126243798e-05, -5.022067945998176e-05, -5.258592148092323e-05, -5.258592148092323e-05, -1.843148362836332e-02, -2.419033415862908e-02, -2.075478286313862e-02, -2.051315490137281e-02, -1.944186031250150e-02, -1.944186031250150e-02, 1.020505402709492e+00, -2.190189105155503e-01, 1.414521120483454e+00, -1.563456856155568e-04, -6.484698303719373e-02, -6.484698303719373e-02, -2.919228969861457e+00, -2.607846485454253e+00, -1.638066562933856e+01, 4.167359380742838e+00, -7.622821995694154e+00, -7.622821995694140e+00, -1.692646567108697e-01, -8.987838186081999e-02, -1.105181432973576e-01, -1.333412318350986e-01, -1.211616866831738e-01, -1.211616866831738e-01, -1.032981130855061e-01, -1.396285022784285e-02, -2.131869345010263e-02, -4.110706806457944e-02, -2.896774283878130e-02, -2.896774283878130e-02, -1.638257776887776e-02, -1.517636165957928e-01, -1.009178579999753e-01, -6.451959392751234e-02, -7.184292416279354e-02, -7.184292416279359e-02, -2.331047164474720e-02, 5.453452299278510e+00, 5.942875539840709e+00, -1.031431530536924e-01, 1.821223539573130e+00, 1.821223539573130e+00, -1.968487665184780e+00, -1.279347279940350e+01, -6.192467592060870e+00, 2.352613435249424e+00, -9.628097961787676e+00, -9.628097961787692e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.858799666919752e-03, 1.858878034447711e-03, 1.859193214306405e-03, 1.858033782792840e-03, 1.858645821257499e-03, 1.858645821257499e-03, 2.721665026093275e-03, 2.722659033301942e-03, 2.750446522073958e-03, 2.753445761586240e-03, 2.747351976877091e-03, 2.747351976877091e-03, 4.014204176136595e-03, 4.020210537961573e-03, 3.962350000021783e-03, 4.472792825324408e-03, 4.320900494185076e-03, 4.320900494185076e-03, 3.419260648520367e-03, 4.072372631654433e-03, 6.207487868624922e-04, 4.809325719313104e-04, 1.406969233375017e-03, 1.406969233375014e-03, 1.697366661190049e-13, 1.433404791618900e-13, 2.578239598988231e-08, 5.041246636591582e-15, 2.587108213304372e-14, 2.587108213304421e-14, 1.324447771737446e-02, 1.339142157883391e-02, 1.325365330148095e-02, 1.338326633461256e-02, 1.331742449622494e-02, 1.331742449622494e-02, 2.781508421530712e-03, 2.858190933929418e-03, 2.528943743653390e-03, 2.585251273386997e-03, 2.954447420381004e-03, 2.954447420381004e-03, 3.282560628306072e-02, 3.125802180647486e-02, 2.228108912133776e-02, 1.305973996193862e-02, 3.633129029819997e-02, 3.633129029819997e-02, 2.472116821832306e-05, 1.067462822429917e-03, 1.625737179956966e-05, 3.407933742699812e-03, 1.870889113317913e-04, 1.870889113317915e-04, 3.120251199097636e-15, 1.080304827139052e-14, 4.030197521239843e-14, 1.601293831564810e-06, 4.824689628267513e-14, 4.824689628267484e-14, 3.004783794674210e-01, 2.182583904746939e-01, 2.529583483642627e-01, 2.824909870884436e-01, 2.679551957033204e-01, 2.679551957033204e-01, 7.653658508173396e-02, 2.234528561686280e-02, 4.181904377848327e-02, 8.294114163353093e-02, 5.802721764480308e-02, 5.802721764480307e-02, 2.216368453935141e-02, 2.149624405302595e-03, 5.492811322940182e-03, 2.161782636840083e-02, 1.212071210595529e-02, 1.212071210595530e-02, 2.172105853728013e-02, 1.269026003987181e-08, 1.716303182547518e-07, 3.451912210080800e-02, 1.342039211823067e-05, 1.342039211823065e-05, 3.860838266145701e-12, 1.790928168641776e-17, 3.417772252811639e-16, 9.796480873405410e-06, 3.603823646489613e-14, 3.603823646489614e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
