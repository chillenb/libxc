
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.999618652846027e+01, -1.999624698852084e+01, -1.999653093728369e+01, -1.999563143030515e+01, -1.999610059100323e+01, -1.999610059100323e+01, -3.309636096574852e+00, -3.309632015822274e+00, -3.309583783842681e+00, -3.309896849924829e+00, -3.309525903380518e+00, 4.462842571621551e+152, -6.837496963852936e-01, 1.088237071031626e+245, 2.507575613437235e+158, 1.348898131829465e+211, 5.936811976143891e+157, 1.367689331155593e+211, 4.306387462381481e+98, 2.907151736751478e+215, -7.978528160062657e-01, 9.605875228954520e+230, 1.026263147566003e+216, 8.515836340729824e+244, 1.199459159643683e+168, 3.302474194396512e+199, 7.526994945034138e+228, 8.863907576006856e+218, 1.718599609084055e+265, 1.436235437482380e+175, 1.992371865178699e+164, 4.004444833036095e+237, 2.621241291372968e+199, -4.945608274260273e+00, 2.384260964413772e+218, 3.313538299987008e+170, -1.894286887433959e+00, -1.906211149661202e+00, -1.885698248574553e+00, -1.896171934241473e+00, -1.905032909823332e+00, 5.397899685225650e+154, 1.111605519708476e+178, 1.018352809337094e+216, 2.877457902920071e+178, 2.646140447396410e+216, 9.804132535249906e+177, -6.019307986573089e-01, -1.039457166561872e-01, 2.142807492386323e+201, -9.650069055457121e-02, 1.679618001806796e+62, 3.139377702599130e+163, 7.162914870630790e+250, -3.412366108987096e-03, 1.673447418232046e+151, 2.921193543597257e+259, -6.604293007141004e-02, -3.973121737820578e-03, 1.445889863074243e+149, 4.734215884539271e+235, 5.434507397383811e+224, -5.991331212216662e-01, 1.097354231246974e+207, 1.314198047714794e+162, 3.175759323189558e+240, 2.566208999533038e+226, 2.870689876226873e+159, 4.600810781941428e+226, 6.086869170761923e+197, 2.341548535305145e+244, -5.362382821214469e-01, 6.054733026990317e+244, -2.380605801547233e-01, 9.163283221612214e+223, -3.626804501617216e-01, 1.922457451050700e+175, 1.097321775008564e+198, -4.645921201048949e-01, 4.182886866696775e+257, 1.782733425630908e+257, 1.580921747305095e+252, -8.319953760503422e-02, 1.201066553243174e+255, 2.462676168984884e+253, 3.491208011657018e+181, 8.086856631994301e+15, 3.008468069099716e+184, 6.648565261148805e+209, 1.724298767911679e+237]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.689858628322934e+01, -2.689866635030981e+01, -2.689904325272131e+01, -2.689785191259086e+01, -2.689847317983778e+01, -2.689847317983778e+01, -4.321192358669765e+00, -4.321236105806632e+00, -4.322472859125761e+00, -4.322356398638015e+00, -4.321926716647408e+00, -7.577442558902811e+152, -8.801876582555885e-01, -1.778519201228317e+245, -4.089543289609912e+158, -2.201324455383149e+211, -9.687199035369490e+157, -2.231682394978123e+211, -5.532704101968460e+98, -3.753837984768177e+215, -1.038334667328348e+00, -1.105121092076436e+231, -1.242595120654748e+216, -1.031093897348070e+245, 1.137651823761906e+169, 2.948659222729510e+200, 2.052212753183486e+228, 1.563157513911210e+220, 2.353719335084731e+266, 1.967005637070885e+176, -3.372568344099275e+164, -6.778474930495766e+237, -4.437080680978661e+199, -6.625195982167392e+00, -4.035931664421363e+218, -5.608955708201454e+170, -2.449399464938034e+00, -2.467856605685637e+00, -2.436229275623353e+00, -2.452165916950618e+00, -2.466144626233357e+00, -9.169110627510614e+154, -1.796642823398371e+178, -1.657727324642992e+216, -4.616516604455338e+178, -4.261428937791236e+216, -1.586881250712381e+178, -7.973859653015448e-01, -1.369017156945015e-01, -2.754416805185994e+201, -1.271296917193710e-01, -2.852558605556953e+62, -3.226796366029547e+163, -7.362372375772024e+250, -4.532765575005224e-03, 3.025160809505699e+152, 7.055418131691415e+260, -8.707854750283366e-02, -5.276171734984011e-03, 2.858031612577862e+150, -7.655074687161005e+235, -8.782848555228617e+224, -7.920345331112930e-01, -1.774056784135159e+207, -2.124460741680751e+162, -5.133758963403233e+240, -4.139031552314077e+226, -4.558543957280851e+159, -7.342492552421813e+226, -9.757928386842693e+197, -3.745342716480158e+244, -7.123460349544559e-01, -9.893292187058085e+244, -3.095143736022769e-01, -1.318086676334547e+224, -4.666563483924857e-01, -2.842990728965455e+175, -1.622754059569037e+198, -6.033948340824924e-01, 1.498905353169649e+257, -3.114890452635692e+256, -2.380814038135568e+252, -1.096222778187055e-01, -8.629820179815580e+254, 1.536388855449550e+254, 2.520083196448041e+183, 2.710538589429195e+17, -1.978218485753207e+184, 1.429180678693397e+211, 3.706565832773959e+238]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.841596357770481e-09, -6.841634085362586e-09, -6.841732423875801e-09, -6.841180304539928e-09, -6.841479256831878e-09, -6.841479256831878e-09, -4.682044585032423e-06, -4.683131509220611e-06, -4.711536130417964e-06, -4.698350067572946e-06, -4.701699904210675e-06, -4.836596030441373e-06, -1.220096580504969e-03, -2.682823686088398e-03, -2.871127304567731e-03, -2.834628611733747e-03, -2.842672805569906e-03, -2.842672805569906e-03, -3.833929573005827e-01, -3.769977695692939e-01, -3.620880827139113e-04, -7.335457532967653e-02, -3.325504035905892e-01, -3.325504035905892e-01, -2.399977822239755e+00, -2.500844204571794e+00, 5.899660516414160e+00, -1.760948901363124e+00, -2.451361410940049e+00, -2.451361410940049e+00, -5.910147013837441e-06, -5.972681131514593e-06, -5.913755839659489e-06, -2.409097670976307e-06, -5.941345892456390e-06, -5.941345892456390e-06, -3.712495554820245e-05, -3.757708606785453e-05, -3.671675470493738e-05, -3.713552605100085e-05, -3.759076718178956e-05, -4.319746134763380e-05, -8.230476689229852e-03, -1.604179128302565e-02, -7.389003826287086e-03, -9.775625446868259e-03, -9.009272908067672e-03, -7.683318788240282e-03, 7.011944676322698e-01, -1.799173174295743e-01, 7.332196435532845e-01, -9.921888889239209e-05, 1.792239993485761e-01, 1.792239993485768e-01, -1.450585644593285e+06, -1.556657899616241e+00, -1.258679122491727e+01, -2.421453807175856e+00, -7.821525800339279e+05, -4.830358240923446e+00, -1.845868306492585e-01, -8.324422636547688e-02, -2.654812776752331e-02, -1.313022056935467e-01, -1.167941008462677e-01, -1.167941008462677e-01, -1.780765757895216e-01, -1.232670721369114e-02, -1.758129926453216e-02, -3.281682551229307e-02, -2.309019693085093e-02, -1.489465320237086e-02, -9.795679977440214e-03, -7.215221824169529e-03, -8.867852423161836e-02, -2.597119186285441e-02, -5.546173466976310e-02, -5.546173466976297e-02, -1.352837994586823e-02, 5.592067549104527e+00, 6.264548641736571e+00, -4.411133081719618e-02, 2.873740948353032e-01, 2.277410914391867e+00, -1.146632170359913e+00, -1.906058351601374e+00, -5.464914654733215e+00, 2.651421580470660e+00, -6.884293929670023e+00, -6.884293929670029e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.553103355137504e-04, 1.553139682816644e-04, 1.553283468305688e-04, 1.552745988728305e-04, 1.553030139351567e-04, 1.553030139351567e-04, -5.306611526724353e-04, -5.304278808121622e-04, -5.241729159643874e-04, -5.266753939383726e-04, -5.264632254956952e-04, 1.724426424324357e-03, -1.977316349178808e-03, 1.717115995825356e-03, 1.240165887964789e-03, 1.448607997579437e-03, 1.398041393959516e-03, 1.398041393959516e-03, 2.284352566862802e-03, 2.571704880115836e-03, -5.518747293747750e-04, 2.625507707288232e-04, 6.958171215598146e-04, 6.958171215598122e-04, 1.736070259311725e-10, 2.385789031056672e-10, 4.084359062675674e-07, 7.006223451663008e-12, 3.605891734821512e-11, 3.605891734821512e-11, 1.328199792601392e-02, 1.342978507380730e-02, 1.329046594490738e-02, 7.827549275532276e-04, 1.335576027632582e-02, 1.335576027632582e-02, -1.123920813889822e-03, -1.103175360280430e-03, -1.132433002676997e-03, -1.121759323032141e-03, -1.104940080954716e-03, 2.134066299811007e-03, 2.578932940522459e-02, 6.860722663550715e-02, 1.436768456084270e-02, 2.753223247346645e-02, 3.055071634363972e-02, 2.203736535011386e-03, -1.039482586459168e-04, 6.495681957323802e-04, -8.335690186733466e-05, 1.061208742301096e-02, 1.539919146846854e-04, 1.539919146846853e-04, -2.553531180824801e-09, 5.199038655478584e-12, 3.125201161000098e-11, -2.983222779093524e-05, -1.609925139437391e-08, 1.885101034501739e-11, 6.020013353977364e-01, 2.691624170099807e-01, 7.759518702218329e-03, 4.266824267289567e-01, 3.790549494914552e-01, 3.790549494914551e-01, 5.353819152355764e-01, 2.076029224352229e-02, 3.963831252046130e-02, 8.521780206978810e-02, 5.643642512960411e-02, 5.127887292443394e-03, 4.819624606376646e-02, -2.128043682102258e-03, 3.212343319570403e-03, -6.340319611859287e-03, 6.584466008817247e-03, 6.584466008817254e-03, -3.727785199889203e-03, 3.357262574067963e-07, 1.299946849071997e-06, 2.053467095606914e-02, -8.938608469360378e-05, 2.625990963736404e-05, 3.211559819785784e-10, 9.611591815298219e-15, 1.901618809009868e-12, 2.185571177981095e-05, 2.175708906632829e-11, 2.175708906636461e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
