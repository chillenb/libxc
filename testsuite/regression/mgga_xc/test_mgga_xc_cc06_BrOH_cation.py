
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_cc06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.897435136534759e+01, -1.897439345756673e+01, -1.897461021588116e+01, -1.897398266024855e+01, -1.897430730300255e+01, -1.897430730300255e+01, -3.409763776703511e+00, -3.409732006629308e+00, -3.408948972870292e+00, -3.409551991975229e+00, -3.409156624604486e+00, -3.409156624604486e+00, -7.388100028384791e-01, -7.383896219923820e-01, -7.281999898634502e-01, -7.301566737594259e-01, -7.308135820443714e-01, -7.308135820443714e-01, -2.226819517114596e-01, -2.247033426886105e-01, -8.857023303462266e-01, -1.856519292252720e-01, -2.114553875790382e-01, -2.114553875790382e-01, -1.226145840295704e-02, -1.286410413068043e-02, -6.135103770105896e-02, -7.306518065451313e-03, -9.099720362180824e-03, -9.099720362180824e-03, -5.855787867510527e+00, -5.438346678548130e+00, -6.658375406552925e+00, -6.106997129105548e+00, -4.017375945334614e+00, -5.106357856052963e+00, -2.517216241524446e+00, -2.110970267082001e+00, -2.002803249817731e+00, -2.011252081279371e+00, -2.019647265688601e+00, -1.958290196207628e+00, -7.559717260248665e-01, -7.583139339014550e-01, -7.022241794735884e-01, -6.003623549636854e-01, -6.332511334589298e-01, -6.457047711356848e-01, -1.497516294781007e-01, -2.521237386898918e-01, -1.366624145892179e-01, -1.920180455210907e+00, -1.547703888811733e-01, -1.499188234311210e-01, -5.710016823274357e-03, -7.151665679950182e-03, -5.540222654880192e-03, -9.633930764042352e-02, -6.620038998639975e-03, -6.620352805983344e-03, -7.990837843045061e-01, -7.948293211724701e-01, -7.963176561561660e-01, -7.966551025627912e-01, -7.969991458376108e-01, -7.969357802564410e-01, -7.788475610449221e-01, -5.283882357204259e-01, -6.579486153522537e-01, -4.115494134339786e-01, -5.742791547145397e-01, -6.958460392882559e-01, -8.549582753473235e-01, -3.231015355935586e-01, -3.812266716291901e-01, -5.279902301762338e-01, -3.754803473335003e-01, -3.629902662926899e-01, -4.963945566032039e-01, -5.969021248525525e-02, -7.770397972554956e-02, -3.740808237911295e-01, -1.191435822632668e-01, -1.129526676975629e-01, -1.692045290492403e-02, -2.014789593856256e-03, -4.120258565806936e-03, -1.879528948085410e-01, -6.147669565802752e-03, -6.147653950334310e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_cc06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.719046885523171e+01, -2.719043691000985e+01, -2.719056439620859e+01, -2.719051052811307e+01, -2.719089524375945e+01, -2.719095479968633e+01, -2.718976149989208e+01, -2.718957253631252e+01, -2.719048261022170e+01, -2.719016642939067e+01, -2.719048261022170e+01, -2.719016642939067e+01, -4.403785605635815e+00, -4.403728545994083e+00, -4.403802926089156e+00, -4.403737770556891e+00, -4.404154812030700e+00, -4.404240886709772e+00, -4.404387732474563e+00, -4.404446420549547e+00, -4.403161533513279e+00, -4.404725728912701e+00, -4.403161533513279e+00, -4.404725728912701e+00, -9.047333334223088e-01, -9.076839242257012e-01, -9.035983252401856e-01, -9.072194087340824e-01, -8.892695436747815e-01, -8.842154468518046e-01, -8.909358378204238e-01, -8.925248732642524e-01, -9.137358007839000e-01, -8.657968465742378e-01, -9.137358007839000e-01, -8.657968465742378e-01, -2.622906529418781e-01, -2.680341004367799e-01, -2.645119842638669e-01, -2.711445487175497e-01, -1.053177841489829e+00, -1.083565661115197e+00, -2.222312746364858e-01, -2.237517680421758e-01, -2.621623417077973e-01, -1.964117848287718e-01, -2.621623417077973e-01, -1.964117848287718e-01, -1.606459845715178e-02, -1.610808719552953e-02, -1.684368801253440e-02, -1.689830979374095e-02, -7.858975318286945e-02, -7.947174863320458e-02, -9.617502434966198e-03, -9.614035702537833e-03, -1.200429080093194e-02, -1.180419493337167e-02, -1.200429080093194e-02, -1.180419493337167e-02, -7.156933829823998e+00, -7.155174265280683e+00, -6.665059140209403e+00, -6.663381884153308e+00, -9.171661210707281e+00, -9.169623246964825e+00, -7.635530709668680e+00, -7.633689613634331e+00, -7.839684254083854e+00, -7.838454971258435e+00, -6.544961047229846e+00, -6.543398545214025e+00, -3.358278792995937e+00, -3.358129702410220e+00, -2.576172762537606e+00, -2.575498866980698e+00, -2.503272880697254e+00, -2.507327426153627e+00, -2.517924822829456e+00, -2.522168957957363e+00, -2.538094621621629e+00, -2.527698724915341e+00, -2.535907908000233e+00, -2.525827839590976e+00, -9.403462098936158e-01, -9.383767576441445e-01, -9.103831957188029e-01, -9.107272044469685e-01, -8.578934983015836e-01, -8.823744698698925e-01, -7.556401975687891e-01, -7.747521743549219e-01, -8.213629591881396e-01, -7.895024354617072e-01, -8.219887198013791e-01, -7.895016209332437e-01, -2.008726454255594e-01, -2.015750328635419e-01, -3.160279044516825e-01, -3.168774569014031e-01, -1.762462882488243e-01, -1.796231667133812e-01, -2.467577697089607e+00, -2.466568224695213e+00, -1.833411762764325e-01, -1.881421588167048e-01, -1.756927764740850e-01, -1.803432632949431e-01, -7.522622587259344e-03, -7.526303719441648e-03, -9.412561949770552e-03, -9.415480944055369e-03, -7.299325030516123e-03, -7.304231978696145e-03, -1.264943284908039e-01, -1.267127928564962e-01, -8.683462247792316e-03, -8.734548163114801e-03, -8.684396802776100e-03, -8.735485139705975e-03, -1.046380696759050e+00, -1.049413508514651e+00, -1.040799151052122e+00, -1.043842487170820e+00, -1.042732062955803e+00, -1.045781321827759e+00, -1.041701164975565e+00, -1.044724925916731e+00, -1.043740355646520e+00, -1.046778519075414e+00, -1.043551736979398e+00, -1.046589658858483e+00, -1.019917310116750e+00, -1.022431228893590e+00, -6.723196537329270e-01, -6.744789406450616e-01, -8.042005671572563e-01, -8.069840987785044e-01, -1.003919484858517e+00, -1.005313217735100e+00, -7.166194387921307e-01, -7.186637267197967e-01, -8.765541731065973e-01, -8.790312082661588e-01, -1.063896749467242e+00, -1.065301045678719e+00, -4.230656867720398e-01, -4.244505952143423e-01, -4.982513469832942e-01, -5.012646381185597e-01, -7.732024131935501e-01, -7.757169096404529e-01, -4.481172285249251e-01, -4.480074813051806e-01, -4.362585009972205e-01, -4.361524044390309e-01, -6.215196463714259e-01, -6.246767267643454e-01, -7.810510547430718e-02, -7.820920235765007e-02, -9.922981158731464e-02, -1.000463794573084e-01, -4.680663567305116e-01, -4.728502461879058e-01, -1.540743536843839e-01, -1.568644304618558e-01, -1.377074485366402e-01, -1.403525479126192e-01, -2.214250147123527e-02, -2.219242726246110e-02, -2.666298937107027e-03, -2.666216213893944e-03, -5.437198693826053e-03, -5.438156551462454e-03, -7.327021292227969e-01, -7.339665886379934e-01, -8.075412323350867e-03, -8.111802588872945e-03, -8.075365784743615e-03, -8.111755957832119e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.156030484353623e-04, -1.156030484353623e-04, -1.156030618354875e-04, -1.156030618354875e-04, -1.156025885296240e-04, -1.156025885296240e-04, -1.156024225414292e-04, -1.156024225414292e-04, -1.156025844449617e-04, -1.156025844449617e-04, -1.156025844449617e-04, -1.156025844449617e-04, -4.646010229430045e-04, -4.646010229430041e-04, -4.646378788423594e-04, -4.646378788423591e-04, -4.656051380834075e-04, -4.656051380834077e-04, -4.651852965621091e-04, -4.651852965621094e-04, -4.652656571478882e-04, -4.652656571478881e-04, -4.652656571478882e-04, -4.652656571478881e-04, -1.756368659587226e-03, -1.756368659587226e-03, -1.751060195080670e-03, -1.751060195080670e-03, -1.619924895917090e-03, -1.619924895917089e-03, -1.685145866489167e-03, -1.685145866489167e-03, -1.676058925454074e-03, -1.676058925454074e-03, -1.676058925454074e-03, -1.676058925454074e-03, -4.755802419981131e-03, -4.755802419981131e-03, -4.942278389085656e-03, -4.942278389085660e-03, -1.031750532023511e-03, -1.031750532023511e-03, -2.218922748185005e-03, -2.218922748185006e-03, -3.675407183326201e-03, -3.675407183326198e-03, -3.675407183326198e-03, -3.675407183326201e-03, -7.542856471841807e-07, -7.542856471842801e-07, -9.100387850428998e-07, -9.100387850427237e-07, -7.564469500883294e-05, -7.564469500883264e-05, -1.182768768824880e-07, -1.182768768824940e-07, -2.938883072206777e-07, -2.938883072206915e-07, -2.938883072206777e-07, -2.938883072206948e-07, -5.936484828161116e-05, -5.936484828161112e-05, -1.658767195079961e-04, -1.658767195079961e-04, -4.937322696400047e-06, -4.937322696400051e-06, -2.125032946505648e-05, -2.125032946505647e-05, -9.270928601651264e-04, -9.270928601651261e-04, -2.883164888466188e-04, -2.883164888466187e-04, -9.432515929652996e-07, -9.432515929653041e-07, -4.516618094293779e-04, -4.516618094293775e-04, -6.662732822478179e-04, -6.662732822478179e-04, -6.727919474490009e-04, -6.727919474490011e-04, -6.749856345563788e-04, -6.749856345563788e-04, -8.526528028544960e-04, -8.526528028544957e-04, -1.531863572438831e-04, -1.531863572438832e-04, -7.886418194567406e-04, -7.886418194567413e-04, -1.780883227170809e-04, -1.780883227170809e-04, -3.068383232894998e-03, -3.068383232895001e-03, -2.864092840063517e-03, -2.864092840063517e-03, -2.470920899094032e-03, -2.470920899094032e-03, -2.962640667706298e-04, -2.962640667706294e-04, -2.175526810132266e-04, -2.175526810132270e-04, -3.360073329628094e-06, -3.360073329628085e-06, -8.433501914483538e-04, -8.433501914483538e-04, -2.702970154660539e-03, -2.702970154660538e-03, -4.908823218268207e-03, -4.908823218268206e-03, -1.653499044388893e-09, -1.653499044382668e-09, -3.345707519696008e-15, -3.345707528366138e-15, -1.206858944078989e-14, -1.206858943020479e-14, -6.221337424340327e-05, -6.221337424340354e-05, -3.891008282454152e-08, -3.891008282450985e-08, -1.911850334214173e-11, -1.911850334234865e-11, -6.452828843823201e-12, -6.452828843820527e-12, -3.898904463227087e-11, -3.898904463229363e-11, -1.305457120910548e-13, -1.305457120910374e-13, -7.928815179269148e-08, -7.928815179269355e-08, -3.838831706527932e-10, -3.838831706530213e-10, -3.994347742049611e-14, -3.994347741944206e-14, -4.260033590687437e-13, -4.260033590631500e-13, -3.557069828449622e-03, -3.557069828449624e-03, -3.202234698887328e-04, -3.202234698887328e-04, -1.315136915465872e-02, -1.315136915465872e-02, -2.838963909904779e-03, -2.838963909904780e-03, -7.557408973341012e-05, -7.557408973341012e-05, -1.267115998304147e-04, -1.267115998304148e-04, -5.100372160356227e-06, -5.100372160356189e-06, -2.542030805786797e-06, -2.542030805786809e-06, -6.622435424367991e-04, -6.622435424367998e-04, -2.095026259963341e-03, -2.095026259963340e-03, -3.145940971006898e-03, -3.145940971006895e-03, -3.496838054938499e-03, -3.496838054938500e-03, -3.439396718928632e-05, -3.439396718928626e-05, -1.151120587231072e-04, -1.151120587231078e-04, -5.004390510266603e-03, -5.004390510266603e-03, -1.089910619467218e-05, -1.089910619467220e-05, -1.401407880567415e-03, -1.401407880567415e-03, -2.413453382332941e-09, -2.413453382331214e-09, -6.210328333940799e-10, -6.210328333881136e-10, -2.485079202330357e-11, -2.485079202210897e-11, -2.990744540325969e-01, -2.990744540325967e-01, -5.710146711520501e-10, -5.710146711573631e-10, -1.598603064343713e-10, -1.598603064372117e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
