
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_cc06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.997286432624239e+01, -1.997291964518561e+01, -1.997318269522204e+01, -1.997235917485171e+01, "nan", -2.613655715600595e+01, -4.365103786328458e+00, -4.365112975874669e+00, -4.365429701605770e+00, -4.365687507816357e+00, -4.365217716405768e+00, -4.365217716405768e+00, -9.016396020877562e-01, -9.007099686158124e-01, -8.782725838418465e-01, -8.850887975307302e-01, -8.850538660543241e-01, -8.850538660543241e-01, -1.985477304168882e-01, -2.012832804183521e-01, -1.042153786942938e+00, -2.026611936180374e-01, -2.381000634135621e-01, -2.381000634135621e-01, -1.226499595827150e-02, -1.286829333201331e-02, -6.181286607547683e-02, -7.307142519982174e-03, -9.101100759701100e-03, -9.101100759701100e-03, -6.478678915720268e+00, -6.479845930656329e+00, -6.478737045427723e+00, -6.479767223763813e+00, -6.479268106017765e+00, -6.479268106017765e+00, -2.498887156064982e+00, -2.516373005686224e+00, -2.486123998337905e+00, -2.501578169276379e+00, -2.514746137973563e+00, -2.514746137973563e+00, -7.954821688834673e-01, -8.595493769851269e-01, -7.402498679961016e-01, -7.674218251288011e-01, -8.082336189073052e-01, -8.082336189073052e-01, -1.460879851056263e-01, -2.600831590599368e-01, -1.363137470230802e-01, -1.874343397750753e+00, -1.687268311550637e-01, -1.687268311550637e-01, -5.710067181808684e-03, -7.151665781523766e-03, -5.540222525046731e-03, -9.549472132475578e-02, -6.620346000838803e-03, -6.620346000838803e-03, -7.990919513257333e-01, -7.948094146848023e-01, -7.963165008508011e-01, -7.975576747699014e-01, -7.969364200932527e-01, -7.969364200932527e-01, -7.788455455223026e-01, -6.756410343512553e-01, -7.052158177096048e-01, -7.344963896050384e-01, -7.195476567798686e-01, -7.195476567798686e-01, -8.984520280656553e-01, -3.213898888631533e-01, -3.796494124598003e-01, -4.897962418341557e-01, -4.308914524099360e-01, -4.308914524099360e-01, -6.257509754629402e-01, -5.939803371844944e-02, -7.854196555457182e-02, -4.736094482756177e-01, -1.186418595695641e-01, -1.186418595695641e-01, -1.692012120580262e-02, -2.014783384965656e-03, -4.120254837631885e-03, -1.120928214047257e-01, -6.147636404135627e-03, -6.147636404135627e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_cc06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.658580472576133e+01, -2.658577109944285e+01, -2.658589000960500e+01, -2.658583330670455e+01, -2.658618091445391e+01, -2.658624360461696e+01, -2.658521409779602e+01, -2.658501519129603e+01, "nan", "nan", -3.479046871831253e+01, -3.479003318840201e+01, -4.072507634748208e+00, -4.072434588263324e+00, -4.072521440885611e+00, -4.072438029268866e+00, -4.072721848342268e+00, -4.072832073799899e+00, -4.072981323612796e+00, -4.073056469496017e+00, -4.071576042255504e+00, -4.073578899331710e+00, -4.071576042255504e+00, -4.073578899331711e+00, -8.281205247588040e-01, -8.317214092997192e-01, -8.268420994564529e-01, -8.312592064999434e-01, -8.112073458345010e-01, -8.051116650634328e-01, -8.135654788409951e-01, -8.154916921055679e-01, -8.407649768220612e-01, -7.827083700480416e-01, -8.407649768220613e-01, -7.827083700480416e-01, -2.556018028023986e-01, -2.607227767121250e-01, -2.587251185739589e-01, -2.646663934782379e-01, -9.420276493251448e-01, -9.777832076142784e-01, -1.830495670914691e-01, -1.847093667486630e-01, -2.280997276279486e-01, -1.540641972893262e-01, -2.280997276279486e-01, -1.540641972893264e-01, -1.126532133400304e-02, -1.130882261932361e-02, -1.685614780181544e-02, -1.691078737062977e-02, -5.569194765883680e-02, -5.658058245123257e-02, -6.753818781772305e-03, -6.750351753058248e-03, -8.439352222382950e-03, -8.239226000940529e-03, -8.439352222382953e-03, -8.239226000940519e-03, -6.057890910365771e+00, -6.055944177668898e+00, -6.059012904436726e+00, -6.057014436616971e+00, -6.057963621028480e+00, -6.055980640137599e+00, -6.058916497710593e+00, -6.056963021478824e+00, -6.058462241813118e+00, -6.056479640953155e+00, -6.058462241813118e+00, -6.056479640953155e+00, -2.322600516475971e+00, -2.322452511491897e+00, -2.339306511879572e+00, -2.338503197586376e+00, -2.308048998829712e+00, -2.313081995836462e+00, -2.322400634590356e+00, -2.327679453631617e+00, -2.343811249752123e+00, -2.330866889844802e+00, -2.343811249752122e+00, -2.330866889844801e+00, -7.322376602311232e-01, -7.301652756524568e-01, -7.905785726954967e-01, -7.909685068306258e-01, -6.663104407737658e-01, -6.921170656402609e-01, -6.923351164294416e-01, -7.167652759585488e-01, -7.618798645480500e-01, -7.212155135013469e-01, -7.618798645480500e-01, -7.212155135013470e-01, -1.320787988823640e-01, -1.327640025488349e-01, -2.359200197987244e-01, -2.367963921945114e-01, -1.217543420034103e-01, -1.251226050194627e-01, -2.477335796812178e+00, -2.476350421759271e+00, -1.501705742436154e-01, -1.554044860810591e-01, -1.501705742436154e-01, -1.554044860810591e-01, -5.283530828175915e-03, -5.287211992823345e-03, -6.607987436460630e-03, -6.610906430786906e-03, -5.126688358737455e-03, -5.131595306802483e-03, -8.648883767850554e-02, -8.670538681335127e-02, -6.088162416053230e-03, -6.139250700468760e-03, -6.088162416053233e-03, -6.139250700468759e-03, -7.330356098483510e-01, -7.360684526007489e-01, -7.290499375389781e-01, -7.320931974373718e-01, -7.304476439062325e-01, -7.334968983542939e-01, -7.316124116046326e-01, -7.346395983226225e-01, -7.310295548978993e-01, -7.340674792160443e-01, -7.310295548978993e-01, -7.340674792160442e-01, -7.144816858198091e-01, -7.169955980910621e-01, -6.185246232782987e-01, -6.212856666629734e-01, -6.458592805788856e-01, -6.488427818472152e-01, -6.732965643154548e-01, -6.757839734393853e-01, -6.593781656919478e-01, -6.619395725897249e-01, -6.593781656919476e-01, -6.619395725897248e-01, -8.262256507833012e-01, -8.277013868695964e-01, -2.918875097808776e-01, -2.932650816006450e-01, -3.446437884449077e-01, -3.476446126112362e-01, -4.466153028170733e-01, -4.489479045195466e-01, -3.934605683816040e-01, -3.933346253349186e-01, -3.934605683816039e-01, -3.933346253349186e-01, -5.716344089839337e-01, -5.756141990706801e-01, -5.393475225100246e-02, -5.403833958851299e-02, -7.084700569134017e-02, -7.167237970364365e-02, -4.297410591072177e-01, -4.357977588962267e-01, -1.060517006019077e-01, -1.088300281536988e-01, -1.060517006019077e-01, -1.088300281536988e-01, -1.550617288566595e-02, -1.555609769817442e-02, -1.876169240874637e-03, -1.876086517916479e-03, -3.821401349551468e-03, -3.822359206321162e-03, -1.012277347832466e-01, -1.019818430056580e-01, -5.664475687127976e-03, -5.700865756354228e-03, -5.664475687127977e-03, -5.700865756354226e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-8.561692502628215e-05, -8.561692502628212e-05, -8.561668489550526e-05, -8.561668489550530e-05, -8.561554206718949e-05, -8.561554206718947e-05, -8.561911998100473e-05, -8.561911998100469e-05, "nan", "nan", -3.344638627521100e-173, 3.579037307836634e-173, -7.796875832730526e-247, -7.796875832730519e-247, -7.288847122691027e-213, -7.288847122691023e-213, -7.291002922167368e-213, -7.291002922167371e-213, -6.540322556530635e-213, -6.540322556530638e-213, -1.374437982941962e-227, -1.374437982941962e-227, -7.260781118347284e-242, -7.260781118347284e-242, -1.302655889045149e-201, -1.302655889045149e-201, -2.621431103556033e-230, -2.621431103556033e-230, -2.670439525245302e-272, -2.670439525245300e-272, -1.928809518392762e-249, -1.928809518392762e-249, -2.935192042014237e-211, -2.935192042014238e-211, -3.224754446023236e-230, -3.224754446023237e-230, -1.294501016805140e-02, -1.294501016805139e-02, -1.273470967948714e-02, -1.273470967948715e-02, -7.399789721633645e-163, -7.399789721633645e-163, -3.100397013803823e-223, -3.100397013803824e-223, -5.165328306188093e-223, -5.165328306188090e-223, -9.064862338925521e-185, -9.064862338925527e-185, -1.424799903992953e-209, -1.424799903992954e-209, -1.503927038325574e-94, -3.682979570787581e-94, -9.627047447733956e-255, -9.627047447733956e-255, -5.025662711114500e-172, -5.025662711114500e-172, -7.363925530019463e-287, -7.363925530019470e-287, -1.743238251448536e-171, -1.743238251448537e-171, -2.444874131123766e-236, -2.444874131123765e-236, -1.072727186651602e-207, -1.072727186651602e-207, -3.728473238637370e-241, -3.728473238637370e-241, -5.599309998068965e-227, -5.599309998068965e-227, -7.179585092715690e-227, -7.179585092715689e-227, -1.191947392964565e-244, -1.191947392964565e-244, -1.460350135449797e-247, -1.460350135449797e-247, -1.238335650829996e-223, -1.238335650829995e-223, -3.539102413742988e-198, -3.539102413742988e-198, -1.912816017896946e-252, -1.912816017896946e-252, -7.390927296876397e-253, -7.390927296876395e-253, -3.825728043751675e-251, -3.825728043751675e-251, -1.517831845072643e-259, -1.517831845072643e-259, -2.431869710383184e-182, -2.431869710383186e-182, -2.355086353864403e-253, -2.355086353864404e-253, -2.741849323217335e-253, -2.741849323217337e-253, -1.148033304766556e-254, -1.148033304766556e-254, -9.102049405793052e-250, -9.102049405793052e-250, -1.214260506735103e-185, -1.214260506735104e-185, -8.799009728518398e-257, -8.799009728518406e-257, -3.357584298414911e-248, -3.357584298414913e-248, -9.947586382873326e-04, -9.947586382873326e-04, -7.583356115320298e-237, -7.583356115320295e-237, -2.284105727359414e-180, -2.284105727359414e-180, -2.698029496114355e-238, -2.698029496114355e-238, -2.684592268935206e-263, -2.684592268935207e-263, -3.223258451265256e-172, -3.223258451265255e-172, -1.070907707542309e-234, -1.070907707542310e-234, -1.744664292489145e-252, -1.744664292489144e-252, -1.460224410722839e-190, -1.460224410722839e-190, -8.702614816198234e-250, -8.702614816198238e-250, -1.933207991018169e-235, -1.933207991018169e-235, -5.059694426933872e-197, -5.059694426933877e-197, -2.118816878190528e-248, -2.118816878190529e-248, -1.898015852787558e-211, -1.898015852787557e-211, -5.561920254140145e-250, -5.561920254140141e-250, -1.276222641819241e-244, -1.276222641819241e-244, -9.455116595089959e-212, -9.455116595089961e-212, -1.567365607897463e-216, -1.567365607897464e-216, -9.735131816979697e-260, -9.735131816979697e-260, -4.185924827734232e-216, -4.185924827734234e-216, -6.714442353885675e-226, -6.714442353885677e-226, -1.377631044197013e-225, -1.377631044197014e-225, -6.044131498941971e-261, -6.044131498941970e-261, -2.797647511309285e-174, -2.797647511309285e-174, -2.484796130362845e-236, -2.484796130362847e-236, -7.285546777811222e-232, -7.285546777811221e-232, -9.122981476530934e-251, -9.122981476530928e-251, -6.385367376253300e-260, -6.385367376253303e-260, -1.120767980836944e-249, -1.120767980836945e-249, -1.214253288888842e-220, -1.214253288888842e-220, -4.103966818426653e-177, -4.103966818426653e-177, -4.904326417358893e-186, -4.904326417358894e-186, -6.099938759825636e-234, -6.099938759825637e-234, -4.976195669339704e-209, -4.976195669339704e-209, -6.204094274349671e-256, -6.204094274349670e-256, -2.199412891750904e-259, -2.199412891750904e-259, -4.116649123516942e-215, -4.116649123516941e-215, -4.714058852741394e-172, -4.714058852741393e-172, -3.659026277457992e-238, -3.659026277457993e-238]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
