
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_otpss_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.193293328079294e+01, -2.193297322461845e+01, -2.193323928080328e+01, -2.193258567302820e+01, -2.193295358246217e+01, -2.193295358246217e+01, -3.471160320221319e+00, -3.471176467752263e+00, -3.471921344340523e+00, -3.473653846679803e+00, -3.471169987611930e+00, -3.471169987611930e+00, -6.900157267625805e-01, -6.896729005066169e-01, -6.832466801410513e-01, -6.897600689628725e-01, -6.898907837648787e-01, -6.898907837648787e-01, -2.173235795826425e-01, -2.189215490152649e-01, -8.038053904593527e-01, -1.790486882107291e-01, -2.177640066090369e-01, -2.177640066090369e-01, -1.678311373985452e-02, -1.757728431767337e-02, -7.035085720071908e-02, -8.059756215853550e-03, -1.739415913445638e-02, -1.739415913445638e-02, -5.362345183268934e+00, -5.362675910629704e+00, -5.362404904959066e+00, -5.362660867609249e+00, -5.362479340622462e+00, -5.362479340622462e+00, -2.123211358492843e+00, -2.135392926788148e+00, -2.120578346983657e+00, -2.130059538970944e+00, -2.134877815817925e+00, -2.134877815817925e+00, -6.263414543745808e-01, -6.667426082924275e-01, -5.832981877681330e-01, -6.017049303377543e-01, -6.489126437967094e-01, -6.489126437967094e-01, -1.468184690963901e-01, -2.342058313687083e-01, -1.441638138164381e-01, -1.892746267550652e+00, -1.609890822033689e-01, -1.609890822033689e-01, -7.775221933629151e-03, -8.885160396113208e-03, -6.659575832273374e-03, -9.616586610492485e-02, -8.095736228490276e-03, -8.095736228490276e-03, -6.376718169122746e-01, -6.415525596091760e-01, -6.409154452966375e-01, -6.399679785355447e-01, -6.405010284581667e-01, -6.405010284581667e-01, -6.134213240700523e-01, -5.554433617162806e-01, -5.763877231455070e-01, -5.944747911673610e-01, -5.853278441558342e-01, -5.853278441558342e-01, -6.955153364587349e-01, -2.781675675870465e-01, -3.176585499045542e-01, -3.867122761115617e-01, -3.518276913557101e-01, -3.518276913557100e-01, -5.015044897938546e-01, -6.541180010161096e-02, -8.742624453640153e-02, -3.645044830094094e-01, -1.212001686951854e-01, -1.212001686951854e-01, -1.966479429350252e-02, -2.433282923969374e-03, -4.622021061708819e-03, -1.155440027830923e-01, -6.880578310750454e-03, -6.880578310750449e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_otpss_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.695971490898753e+01, -2.695977761631576e+01, -2.696017408736563e+01, -2.695914985188603e+01, -2.695974693946015e+01, -2.695974693946015e+01, -4.257170225908075e+00, -4.257297184124470e+00, -4.261366960983165e+00, -4.260511021201030e+00, -4.257223047829935e+00, -4.257223047829935e+00, -8.447956569764301e-01, -8.431379254334392e-01, -7.964849230005263e-01, -8.046120331225951e-01, -8.441944327100207e-01, -8.441944327100207e-01, -2.346000066033558e-01, -2.358797888070881e-01, -1.040402978337351e+00, -1.540638483043320e-01, -2.340652395567767e-01, -2.340652395567767e-01, -2.231988217080093e-02, -2.337001924188222e-02, -9.048055632268159e-02, -1.074102975318605e-02, -2.312667337696084e-02, -2.312667337696084e-02, -6.662085044112461e+00, -6.663096582785681e+00, -6.662223822028776e+00, -6.663008440333326e+00, -6.662555615816522e+00, -6.662555615816522e+00, -2.543223020964378e+00, -2.561739089660451e+00, -2.533350675141405e+00, -2.547823455878322e+00, -2.567511628137110e+00, -2.567511628137110e+00, -7.942286098401657e-01, -8.686687589452005e-01, -7.609956415469671e-01, -8.432577861750865e-01, -8.225596786529645e-01, -8.225596786529645e-01, -1.579660368466726e-01, -1.963791310320924e-01, -1.530367093772907e-01, -2.672727532443532e+00, -1.530227402469274e-01, -1.530227402469274e-01, -1.036205161730505e-02, -1.183953872432879e-02, -8.874206994923710e-03, -1.180258935103466e-01, -1.078756555933635e-02, -1.078756555933633e-02, -8.261677037413786e-01, -8.196190237486709e-01, -8.218484170591182e-01, -8.237118383059160e-01, -8.227670443941608e-01, -8.227670443941608e-01, -8.011156245142692e-01, -7.039286052501356e-01, -7.303023656815785e-01, -7.537227980543884e-01, -7.414330715736084e-01, -7.414330715736084e-01, -9.392296698895346e-01, -2.904634554758645e-01, -3.683289845159679e-01, -4.785670529963070e-01, -4.270837019945307e-01, -4.270837019945306e-01, -6.335003200273411e-01, -8.486702669795168e-02, -1.101330995314977e-01, -4.678070150022255e-01, -1.363012344674608e-01, -1.363012344674608e-01, -2.613909899398326e-02, -3.244179961575529e-03, -6.161439598793627e-03, -1.297155986538493e-01, -9.169099326835472e-03, -9.169099326835468e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.172981847174277e-09, -9.173157338038843e-09, -9.173553615780565e-09, -9.170692730428158e-09, -9.173077567026732e-09, -9.173077567026732e-09, -1.223506456960489e-05, -1.223988694883337e-05, -1.239127790221675e-05, -1.240046554994438e-05, -1.223572322206226e-05, -1.223572322206226e-05, -3.922989104821534e-03, -3.954134016535416e-03, -4.714596909591599e-03, -4.677653294744747e-03, -3.934565166217809e-03, -3.934565166217809e-03, -5.833934007755172e-01, -7.044758522821679e-01, -7.462691337212089e-04, -1.316622707219022e+00, -6.439958153787756e-01, -6.439958153787756e-01, -2.574815293036106e+00, -2.586202768080630e+00, -1.328192058587075e+00, -1.799802466991962e+00, -2.686445993993807e+00, -2.686445993993807e+00, -3.639210831052247e-06, -3.668459175105631e-06, -3.642249754710661e-06, -3.664983744767628e-06, -3.654075543459469e-06, -3.654075543459469e-06, -2.998489487038999e-05, -3.066567350045695e-05, -3.035677338149186e-05, -3.090907506362707e-05, -3.014434295328942e-05, -3.014434295328942e-05, -9.144739452226646e-03, -2.321426893158479e-03, -2.573329223705621e-02, -1.965814957143430e-02, -7.015229939737778e-03, -7.015229939737778e-03, -1.219700528421522e+00, -6.282015348111996e-01, -1.426174801223961e+00, -1.557893635795591e-04, -1.515527782904087e+00, -1.515527782904087e+00, -1.909070965614648e+00, -1.914662404288504e+00, -5.478008675270034e+00, -1.588404549175678e+00, -2.827917905176864e+00, -2.827917905179137e+00, -5.286291495925828e-02, -3.405502605795463e-02, -3.925432081858998e-02, -4.438719331187727e-02, -4.167302345256893e-02, -4.167302345256892e-02, -2.969572095689259e-02, -9.228367838443770e-03, -1.298142964891147e-02, -1.933467642304564e-02, -1.569529866189427e-02, -1.569529866189426e-02, -6.455013128697644e-03, -1.407635647057117e-01, -8.568602154967415e-02, -1.171392255927363e-01, -8.770853535307369e-02, -8.770853535307410e-02, -1.137373291136709e-02, -1.071881241360792e+00, -1.237317883698813e+00, -1.746520396355556e-01, -1.916558794732081e+00, -1.916558794732084e+00, -1.941402773441613e+00, -3.283095924129292e+00, -2.828790989290801e+00, -2.358744532704957e+00, -4.127742502615782e+00, -4.127742502626259e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.941097846090344e-04, 7.941445515416877e-04, 7.943032836368264e-04, 7.937383789006067e-04, 7.941280323899864e-04, 7.941280323899864e-04, 3.049878527527335e-03, 3.052755268970078e-03, 3.145100667052065e-03, 3.163195958131802e-03, 3.050323354510369e-03, 3.050323354510369e-03, 4.384758331037623e-03, 4.407472959086501e-03, 4.799483351105490e-03, 5.231684014531956e-03, 4.393725556597631e-03, 4.393725556597631e-03, 2.340802702784545e-02, 3.999059028934526e-02, 6.902783758643445e-04, 2.064257685650652e-03, 3.061417453792099e-02, 3.061417453792099e-02, 9.584839539117582e-08, 1.172793164391562e-07, 1.332522660098837e-05, 6.588281567576403e-10, 1.195741047762770e-07, 1.195741047762768e-07, 6.167710765835930e-03, 6.237297150184831e-03, 6.175695205884997e-03, 6.229746624643535e-03, 6.202044549124428e-03, 6.202044549124428e-03, -4.176312281184123e-04, -1.988269911220816e-04, -3.871753261573034e-04, -2.111285799382254e-04, -3.018829237093918e-04, -3.018829237093918e-04, 1.344431240357072e-02, -7.187400470679647e-04, 5.029884047532722e-02, 5.231439732273066e-02, 8.770740563292318e-03, 8.770740563292318e-03, 2.971828572849612e-04, 2.074417917058964e-02, 3.610399680010469e-04, 1.324087149449698e-02, 1.052563456656588e-03, 1.052563456656588e-03, 1.047057134591507e-09, 1.478435201162671e-09, 2.956755485284222e-09, 4.098782083821564e-05, 1.305477269219919e-09, 1.305477269224231e-09, 9.044835768752135e-02, 8.228655964850461e-02, 8.946438159784004e-02, 9.370080344513779e-02, 9.184572153579651e-02, 9.184572153579651e-02, 2.221852499900003e-02, 1.314304628346115e-02, 2.286587851621451e-02, 3.696929706539048e-02, 2.885159703624985e-02, 2.885159703624990e-02, 2.414472930175083e-02, -4.464516593046648e-03, 8.437419490545521e-03, 6.470101865122369e-02, 2.940567886302470e-02, 2.940567886302487e-02, 6.897133428074845e-03, 8.503152922025240e-06, 2.730620316528172e-05, 8.371714336838322e-02, 2.426692548179991e-04, 2.426692548180080e-04, 4.844409033983626e-08, 3.522692268901288e-12, 2.134257275723366e-10, 2.646567279134321e-04, 1.009268994786829e-09, 1.009269000463715e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
