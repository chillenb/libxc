
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_otpss_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.048748009272782e+01, -2.048755350034777e+01, -2.048791510533495e+01, -2.048671460963380e+01, -2.048751848859611e+01, -2.048751848859611e+01, -3.340840439145063e+00, -3.340844889164947e+00, -3.341095039874072e+00, -3.341258596837271e+00, -3.340857174592403e+00, -3.746286709349278e+00, -6.871829692671838e-01, -7.688261108408853e-01, -7.610936035621597e-01, -7.611294113521088e-01, -7.690291158012497e-01, -7.690291158012497e-01, -2.196663830814879e-01, -2.215475689750481e-01, -8.151186370099190e-01, -1.908990614734503e-01, -2.202384322089965e-01, -2.202384322089965e-01, -1.678354657367521e-02, -1.757791369742602e-02, -7.051594114243853e-02, -8.060366071779268e-03, -1.739469862309296e-02, -1.739469862309296e-02, -5.364561865423765e+00, -5.364885785994853e+00, -5.364592800433994e+00, -5.081063668317254e+00, -5.364730482101642e+00, -5.364730482101642e+00, -1.911710420791151e+00, -1.924494554114507e+00, -1.906546998310388e+00, -1.916525833753528e+00, -1.927041457575937e+00, -2.149879498786652e+00, -6.381923541941839e-01, -6.877414926673951e-01, -6.087075780797920e-01, -6.310557568574099e-01, -6.605335635043305e-01, -6.248322986511761e-01, -1.184642381099025e-01, -2.375574198693798e-01, -1.171012672482081e-01, -2.032848256171537e+00, -1.647113014162830e-01, -1.647113014162830e-01, -7.458876249599017e-03, -8.885832311109112e-03, -6.659799317345642e-03, -7.744414105050737e-02, -7.748862670373233e-03, -8.096519871292894e-03, -6.513685606001909e-01, -6.492215697214290e-01, -6.278664277503678e-01, -6.506554963282624e-01, -6.503613351842761e-01, -6.503613351842761e-01, -6.320089509352540e-01, -5.566639974876807e-01, -5.789148171025793e-01, -5.995858911441999e-01, -5.890716717220020e-01, -5.673382152920815e-01, -7.203969075516972e-01, -2.584773327359698e-01, -3.204563231264634e-01, -3.780997826350906e-01, -3.550526124122081e-01, -3.550526124122080e-01, -4.789882224095952e-01, -6.548100920698852e-02, -8.781479076014884e-02, -3.750194622538000e-01, -9.826066571807900e-02, -1.227525743544189e-01, -1.967369673305329e-02, -2.433312032653840e-03, -4.622060442291964e-03, -1.171414751481698e-01, -6.881183827191964e-03, -6.881183827191962e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_otpss_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.875511987322525e+01, -2.875495172042139e+01, -2.875427439872947e+01, -2.875700073902388e+01, -2.875503090103204e+01, -2.875503090103204e+01, -4.409765551628304e+00, -4.409770502878529e+00, -4.410075853384393e+00, -4.410302215736565e+00, -4.409787467875678e+00, -4.492776476469072e+00, -9.004139525424349e-01, -8.170115641054168e-01, -7.683397776347975e-01, -7.905864435420892e-01, -8.182322218911650e-01, -8.182322218911650e-01, -2.352123190902503e-01, -2.414044902202923e-01, -1.070097918596679e+00, -1.857516602277795e-01, -2.370128516786381e-01, -2.370128516786381e-01, -2.232162703125958e-02, -2.337255581809426e-02, -9.117740329993390e-02, -1.074346989763449e-02, -2.312884898558466e-02, -2.312884898558466e-02, -6.664706619909195e+00, -6.665692393040247e+00, -6.664809604975844e+00, -6.620599352545120e+00, -6.665208635261335e+00, -6.665208635261335e+00, -2.517998927349227e+00, -2.534634387621634e+00, -2.511293694861688e+00, -2.524270363681057e+00, -2.537933466968560e+00, -2.555959435441513e+00, -8.069293121034162e-01, -8.690215453142494e-01, -7.662945595399817e-01, -7.990302103959308e-01, -8.356133690918653e-01, -8.389311883502608e-01, -1.538365764886455e-01, -2.129348130746717e-01, -1.520627878355648e-01, -2.519777738763704e+00, -1.657357676038161e-01, -1.657357676038161e-01, -9.803037593812925e-03, -1.184222871911046e-02, -8.875101302542666e-03, -1.005899133267306e-01, -1.018206390425005e-02, -1.079070130283770e-02, -8.263642517764856e-01, -8.205381642886374e-01, -8.196909914109058e-01, -8.108274970063334e-01, -8.230921982570836e-01, -8.230921982570836e-01, -8.004878104763204e-01, -7.058508524197148e-01, -7.342624009923279e-01, -7.583182342054565e-01, -7.461902044403056e-01, -8.019419476847957e-01, -9.100242378833110e-01, -3.363918557982825e-01, -3.623043282341989e-01, -4.924335011771721e-01, -4.376120749126588e-01, -4.316207282375593e-01, -6.246928796430513e-01, -8.515810953003784e-02, -1.117950321970321e-01, -4.846922451223123e-01, -1.275890784476569e-01, -1.428166301880832e-01, -2.617484282533184e-02, -3.244296394326393e-03, -6.161597137679006e-03, -1.363990430158724e-01, -9.171522012616467e-03, -9.171522012616456e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.349231818337457e-09, -2.348507340869310e-09, -2.345322281357677e-09, -2.357107217802216e-09, -2.348850291209721e-09, -2.348850291209721e-09, 9.494157317736460e-06, 9.494017113991232e-06, 9.488379633740288e-06, 9.487544513734245e-06, 9.493937770332083e-06, -3.753785011753212e-06, 7.030604640957497e-03, -2.461876928737337e-03, -2.880214607028924e-03, -2.601878309076228e-03, -2.451938659610572e-03, -2.451938659610572e-03, -3.909654104942647e-01, -3.607176568945729e-01, 3.407805953689986e-03, -6.921793447965922e-01, -3.819094378500261e-01, -3.819094378500261e-01, -2.471625594532992e+00, -2.455865483501206e+00, -9.849333318410464e-01, -8.663569460472027e-01, -2.568598427056845e+00, -2.568598427056227e+00, -3.624071885029393e-06, -3.653422231321834e-06, -3.627313318547635e-06, 1.035732253385450e-06, -3.638729623429625e-06, -3.638729623429625e-06, 9.524920973881792e-05, 9.261225538421689e-05, 9.633906981574837e-05, 9.424727509245497e-05, 9.209356457155364e-05, -3.220222946649624e-05, -5.587912597379100e-03, -8.787487513858138e-03, -5.165619200504085e-03, -7.044460805607201e-03, -6.156020261728355e-03, 6.233906580114582e-03, 1.565136953207771e+01, -3.936120761777581e-01, 1.647870750674791e+01, -7.322490291111243e-05, -1.095946257462581e+00, -1.095946257462581e+00, 2.828055926624076e+06, -1.093418100294672e+00, -4.299986320019237e+00, 1.044808661540198e+02, 2.405370369737666e+06, -1.347689271434716e+00, -6.267619544388256e-02, -3.507950221253052e-02, -1.060618249600331e-02, -6.999404516806799e-02, -4.476351823168531e-02, -4.476351823168531e-02, -5.444476370874207e-02, -8.788698755871314e-03, -1.197473018914627e-02, -1.798964806067447e-02, -1.439184219289270e-02, -9.452901363790893e-03, -5.730238498639701e-03, 4.874389614298727e-01, -7.166455349663416e-02, 9.192414434668056e-02, -2.335184130175543e-02, -3.659015884746362e-02, 3.274550234533063e-02, -9.027126787233345e-01, -8.509040228196276e-01, -1.116289900955648e-02, 3.607096140089659e+01, -1.311404760206387e+00, -9.642406646531089e-01, -1.207771583180993e+00, -2.375225641699228e+00, -1.570480654528443e+00, -1.893895851393009e+00, -1.893895851409341e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.696205268989100e-04, 8.694837981152965e-04, 8.688845216201339e-04, 8.711084946502912e-04, 8.695485098046683e-04, 8.695485098046683e-04, -1.299782776160494e-04, -1.300149610268904e-04, -1.311015403241720e-04, -1.306732065053490e-04, -1.299878448387949e-04, 2.805943567353389e-04, -1.491469070790356e-04, -6.348484404847338e-04, -7.705261657427070e-04, -1.319539861151913e-03, -6.298832174603903e-04, -6.298832174603903e-04, 1.637385881818999e-03, 2.064705250557818e-03, -5.320950940142458e-05, -1.784244793002607e-04, 1.752996416506233e-03, 1.752996416506233e-03, 8.023616593587701e-08, 9.778829659872099e-08, 7.753486890419409e-06, 5.764269116971364e-10, 9.978512484289379e-08, 9.978512484294011e-08, 6.193543063359491e-03, 6.263556953286942e-03, 6.201247613935362e-03, -1.784518293626061e-03, 6.228535807366157e-03, 6.228535807366157e-03, -1.632324953184246e-04, -1.744954070909744e-04, -1.583164273164342e-04, -1.671679550976919e-04, -1.775097260668402e-04, 2.191513960402775e-04, 1.281166799235119e-02, 3.117526956247784e-02, 8.136782516143555e-03, 1.719014620821663e-02, 1.727430015191460e-02, 9.202647967042182e-03, -1.658623225035562e-05, -6.563793381765091e-04, -1.875691604630678e-05, 4.524793554280852e-03, -7.376154312946370e-05, -7.376154312946370e-05, -3.808529728212312e-09, -1.901162231232757e-10, 2.606217033461051e-09, -4.134013211363185e-06, -4.386169328020553e-09, 1.141835805102980e-09, 2.021439298839449e-01, 1.108005755748438e-01, -1.107389765663844e-02, 2.278713709375135e-01, 1.427034709402919e-01, 1.427034709402919e-01, 1.585348198230933e-01, 1.356388950250233e-02, 2.434844082900879e-02, 4.315186129422093e-02, 3.195588391110107e-02, 4.799150368305782e-02, 2.219289876981832e-02, -2.366898006025861e-04, 1.314321264281014e-03, -9.536261374649954e-04, -2.063998496494289e-03, 4.208097206998055e-03, -1.063499197259307e-03, 5.256962149222675e-06, 1.290782830051453e-05, 2.357833731649387e-03, -1.511408104426462e-05, 4.368178451341661e-05, 3.991414203440826e-08, 3.183568016182868e-12, 1.902874709144719e-10, 5.348199024279962e-05, 8.884348688976220e-10, 8.884348824559250e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
