
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_b97m_v_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.268950584735678e+01, -2.268965631771265e+01, -2.269035921018313e+01, -2.268790446051286e+01, -2.268958480971216e+01, -2.268958480971216e+01, -3.119846619467037e+00, -3.119984200125855e+00, -3.124235817054346e+00, -3.122829388876570e+00, -3.119899153466285e+00, -3.663000363087228e+00, -6.013912343011859e-01, -6.597755616684207e-01, -6.302717083123470e-01, -6.408642597770521e-01, -6.605201543169186e-01, -6.605201543169186e-01, -2.162358351532086e-01, -2.186627137062028e-01, -6.785593409246502e-01, -1.611915859011912e-01, -2.169654063835680e-01, -2.169654063835680e-01, -2.236807129427426e-02, -2.325059039040400e-02, -7.092458656679913e-02, -1.195273687655504e-02, -2.304810298405937e-02, -2.304810298405938e-02, -6.355312498395540e+00, -6.357310092454701e+00, -6.355528497614326e+00, -5.859533292450353e+00, -6.356324386081650e+00, -6.356324386081650e+00, -1.732353838223593e+00, -1.755418674155429e+00, -1.722686042658709e+00, -1.740750157768612e+00, -1.760740680174434e+00, -2.035241960202480e+00, -6.770947592106342e-01, -7.470554299842902e-01, -6.260816988400331e-01, -6.787610405656096e-01, -7.132768023014810e-01, -6.421297507830886e-01, -1.204871593700231e-01, -2.132593156089315e-01, -1.193092578993299e-01, -2.245067129664486e+00, -1.425517567371989e-01, -1.425517567371989e-01, -1.142369104493153e-02, -1.300879528681068e-02, -1.011684783270210e-02, -8.463083085197212e-02, -1.182031617383369e-02, -1.199978236750654e-02, -6.558868453494360e-01, -6.262092947892092e-01, -7.235080007162714e-01, -6.352310548053289e-01, -6.308170501078664e-01, -6.308170501078664e-01, -6.136771214789210e-01, -5.847205093697537e-01, -6.255935668278337e-01, -6.380715981462605e-01, -6.368769714690884e-01, -5.917859256652844e-01, -7.873791783340897e-01, -2.408021838545417e-01, -3.061383168545169e-01, -3.608230511990597e-01, -3.457892927729481e-01, -3.457892927729481e-01, -4.644154714222251e-01, -6.698712998727457e-02, -8.391224258359804e-02, -3.788417253688809e-01, -1.030160362680259e-01, -1.094282025408782e-01, -2.553294206548834e-02, -4.095070684818648e-03, -7.319589338136639e-03, -1.056823148648247e-01, -1.041064114020630e-02, -1.041064114020630e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_b97m_v_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.613456434985130e+01, -3.613472662613498e+01, -3.613550841221932e+01, -3.613285751877167e+01, -3.613464934709628e+01, -3.613464934709628e+01, -5.073654111201829e+00, -5.073884611890030e+00, -5.080996357797379e+00, -5.078647231525205e+00, -5.073742138130616e+00, -5.425717715148523e+00, -8.747379808304447e-01, -9.026442053913146e-01, -8.621998724709601e-01, -8.764926812755973e-01, -9.036466172505142e-01, -9.036466172505142e-01, -2.501536582581264e-01, -2.518455462646254e-01, -9.730792205611051e-01, -1.864603135071957e-01, -2.506784063891774e-01, -2.506784063891774e-01, -2.852154176130130e-02, -2.961986341880032e-02, -8.472616085851992e-02, -1.541467547609429e-02, -2.936590451316102e-02, -2.936590451316106e-02, -8.129580499749025e+00, -8.132153537329312e+00, -8.129851845081237e+00, -8.952552159135653e+00, -8.130867035022614e+00, -8.130867035022614e+00, -2.749112782131164e+00, -2.789553294590933e+00, -2.732016787707051e+00, -2.763848821649127e+00, -2.798892038413452e+00, -2.993051183279093e+00, -9.047986448167173e-01, -8.551677713275156e-01, -8.514160608963598e-01, -8.804520205885684e-01, -9.192738110060604e-01, -9.596927919713067e-01, -1.504127386884767e-01, -2.594429204270372e-01, -1.489178233693761e-01, -3.019148284436178e+00, -1.638907525534715e-01, -1.638907525534715e-01, -1.463784510780934e-02, -1.675602773699681e-02, -1.307301402604075e-02, -1.053326196728409e-01, -1.513785861589676e-02, -1.547334824186973e-02, -1.133042993157782e+00, -9.151924061662472e-01, -1.013430088078652e+00, -1.061469121100424e+00, -1.029070879369401e+00, -1.029070879369401e+00, -1.031222620816902e+00, -7.833562973470036e-01, -7.757498309863016e-01, -6.930090502133617e-01, -7.403784062781001e-01, -8.719545619514433e-01, -9.596271452955050e-01, -3.206170549108607e-01, -3.691672782277604e-01, -5.141278654533857e-01, -4.260391065750715e-01, -4.260391065750717e-01, -6.800539725454600e-01, -8.074983739259162e-02, -9.797535936292873e-02, -4.941984188631806e-01, -1.282185893682190e-01, -1.229809530872947e-01, -3.250376119934161e-02, -5.345987263620145e-03, -9.497451755340221e-03, -1.191326948037322e-01, -1.344942109309055e-02, -1.344942109309055e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.129044093330923e-08, -2.129056554842065e-08, -2.129093840840255e-08, -2.128893547901370e-08, -2.129050774313328e-08, -2.129050774313328e-08, -1.005481255183034e-05, -1.005912536510328e-05, -1.018751930493637e-05, -1.013450285736096e-05, -1.005581650202128e-05, -1.214720346777306e-05, 1.563136612341954e-03, -3.763446858516537e-03, -3.606750987123829e-03, -3.730830804130104e-03, -3.768405255886252e-03, -3.768405255886252e-03, -5.107688295144428e-01, -5.115348097704264e-01, 2.681563043827584e-03, -6.264419904878595e-01, -5.105319988467906e-01, -5.105319988467906e-01, -7.722298189662761e+00, -7.692448017381986e+00, -2.762791109186574e+00, -2.576003785325491e+00, -8.035493362736890e+00, -8.035493362734798e+00, -6.010374514874961e-06, -6.006252057442878e-06, -6.009963814248514e-06, -7.332720148588540e-06, -6.008340627032184e-06, -6.008340627032184e-06, -6.326620424130453e-05, -6.861564684108253e-05, -6.074759997683628e-05, -6.515427895775798e-05, -7.006504995418336e-05, -9.853740755623957e-05, -2.262710909802133e-02, -2.119985879174998e-02, -2.247988772358996e-02, -2.633156246755421e-02, -2.230828340059678e-02, -2.642831998981584e-02, 2.394213734851203e+01, -3.015311018530361e-01, 2.486462675495843e+01, -2.305661060386751e-04, -1.055313819599168e+00, -1.055313819599168e+00, 3.811432853985071e+06, -3.277317166098911e+00, -1.255223669477990e+01, 1.698209156997987e+02, 3.250801287287904e+06, -4.004810021773192e+00, 2.416653733864094e-01, 8.970392678823728e-02, -5.629457991594830e-02, 1.773842250861090e-01, 1.549916015236648e-01, 1.549916015236648e-01, 2.065643266429532e-01, -3.772054610016790e-02, -4.070045640992045e-02, -3.403661066914940e-02, -4.000661674637648e-02, -5.320390173140357e-02, -1.727677647661315e-02, 2.248932359891173e-01, -1.333228847554883e-01, -8.198778705933867e-02, -1.174974386310262e-01, -1.174974386310261e-01, -4.450604961733494e-02, -2.646147485240137e+00, -2.156520090971412e+00, -1.449166977912084e-01, 5.515308894569465e+01, -2.024868567978665e+00, -3.081885698139867e+00, -3.313078324236118e+00, -6.766621166333427e+00, -2.414246815229727e+00, -5.552929536067250e+00, -5.552929536061662e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.461631401662152e-03, 3.461685028499257e-03, 3.461912522257176e-03, 3.461040998369675e-03, 3.461659699071899e-03, 3.461659699071899e-03, 7.141861880386184e-03, 7.143800011698427e-03, 7.202064139229846e-03, 7.178942188448201e-03, 7.142369322347525e-03, 1.719580202069950e-02, 9.117567962094808e-03, 3.264752567280768e-02, 2.908463122615483e-02, 3.068594347099788e-02, 3.274565661703548e-02, 3.274565661703548e-02, 5.215258603420885e-02, 5.289347064686818e-02, 4.266950196910191e-03, 2.829654672932519e-02, 5.234661790643186e-02, 5.234661790643186e-02, 1.064324240748715e-04, 1.207009806899611e-04, 2.556619412032696e-03, 4.586887952708998e-06, 1.224874268019170e-04, 1.224874268019168e-04, 1.609272189241595e-02, 1.603998628472714e-02, 1.608692051582425e-02, 1.665242696058002e-02, 1.606631872965434e-02, 1.606631872965434e-02, 9.044711698676759e-03, 9.465580439426555e-03, 8.860411867005230e-03, 9.191471442427917e-03, 9.579163529419635e-03, 2.511595651364260e-02, 1.153719557074443e-01, 3.908295706103666e-02, 1.040070461371980e-01, 1.162879315181105e-01, 1.105902128587974e-01, 5.443169278598393e-02, -2.039438642430551e-04, 4.234035146898286e-02, -2.508935062483381e-04, 4.275646623642320e-02, 2.801959008173241e-02, 2.801959008173241e-02, -1.647376851687354e-06, 7.655414655523758e-06, 1.316776277131004e-05, -2.572497572550991e-04, -1.871095209585954e-06, 7.225168638485279e-06, -2.633095577723234e-01, -3.621469229796497e-01, 1.330393290882304e-01, -3.404109303396668e-01, -3.553465163190737e-01, -3.553465163190737e-01, -3.622013257354587e-01, 1.265648466109906e-01, 1.104820059339809e-01, -2.587961942486787e-02, 6.561426488608946e-02, 7.468138213979844e-02, 8.240691649805489e-02, 8.319844817558483e-03, 5.543167534594342e-02, 2.879240458626636e-02, 7.412218602945775e-02, 7.412218602945776e-02, 3.536259917500088e-02, 1.914540911232289e-03, 4.075704910838582e-03, 1.302816973059190e-01, -4.859646198956189e-04, 1.466916698993843e-02, 6.572833946149933e-05, 2.047040972237622e-07, 2.553719841398476e-06, 1.523237460118410e-02, 6.372610846304127e-06, 6.372610846218246e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
