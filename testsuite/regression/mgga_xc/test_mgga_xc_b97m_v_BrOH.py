
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_b97m_v_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.565261510780655e+01, -2.565273606612739e+01, -2.565342050786606e+01, -2.565145079591188e+01, -2.565267750725038e+01, -2.565267750725038e+01, -3.314678292037419e+00, -3.314862324234889e+00, -3.320624546618250e+00, -3.320194278999522e+00, -3.314734962017761e+00, -3.314734962017761e+00, -5.984565556063028e-01, -5.975790624722331e-01, -5.752477768379620e-01, -5.865869212534559e-01, -5.981462857915656e-01, -5.981462857915656e-01, -2.128858584811357e-01, -2.148038491700826e-01, -6.525898989900951e-01, -1.527662177073299e-01, -2.134269989756506e-01, -2.134269989756506e-01, -2.236671983720442e-02, -2.324862053445267e-02, -7.047359455775318e-02, -1.195092473673737e-02, -2.304641651961005e-02, -2.304641651961005e-02, -6.351645685028868e+00, -6.353686317050816e+00, -6.351912657993655e+00, -6.353495988789315e+00, -6.352616949303066e+00, -6.352616949303066e+00, -1.954781729141266e+00, -1.989556423275000e+00, -1.946734575810123e+00, -1.974366467226373e+00, -1.988743303447077e+00, -1.988743303447077e+00, -6.372614196214695e-01, -7.061003467449740e-01, -5.783728440378613e-01, -6.196223124798502e-01, -6.772604910107481e-01, -6.772604910107481e-01, -1.240082573419285e-01, -2.108167347251770e-01, -1.228139064719550e-01, -2.001898357273532e+00, -1.394115638697820e-01, -1.394115638697820e-01, -1.158340824473387e-02, -1.300678382747117e-02, -1.011619566862467e-02, -8.828885510564699e-02, -1.199745563842272e-02, -1.199745563842272e-02, -7.112086770134682e-01, -6.485581781205582e-01, -6.611753553932185e-01, -6.783579571648083e-01, -6.688861383410902e-01, -6.688861383410902e-01, -6.987515547188059e-01, -5.796304673742617e-01, -6.174424015430967e-01, -6.293917393313566e-01, -6.271663354595206e-01, -6.271663354595207e-01, -7.279756297923249e-01, -2.592545633340979e-01, -3.000533759900082e-01, -3.713268481977339e-01, -3.348863333140891e-01, -3.348863333140891e-01, -4.914290326572129e-01, -6.678714368601281e-02, -8.297053149753815e-02, -3.551873118434679e-01, -1.072438652418006e-01, -1.072438652418006e-01, -2.550461892844949e-02, -4.094990842061432e-03, -7.319477159318392e-03, -1.034549810027637e-01, -1.040886706160346e-02, -1.040886706160346e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_b97m_v_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.464398836318471e+01, -3.464407814195970e+01, -3.464449312604586e+01, -3.464301963202626e+01, -3.464403562866452e+01, -3.464403562866452e+01, -5.303743174063277e+00, -5.303924970386596e+00, -5.309624496122484e+00, -5.308552397594631e+00, -5.303814435742429e+00, -5.303814435742429e+00, -8.890390535210373e-01, -8.879586656873585e-01, -8.609979437289997e-01, -8.702744154749942e-01, -8.886493663283955e-01, -8.886493663283955e-01, -2.482583616505350e-01, -2.495771535104777e-01, -1.036841017504844e+00, -1.827315652194327e-01, -2.486555160984570e-01, -2.486555160984570e-01, -2.851616761963438e-02, -2.961204072104091e-02, -8.320298784238142e-02, -1.540739072414660e-02, -2.935920743632948e-02, -2.935920743632944e-02, -8.134843099377759e+00, -8.137428040944222e+00, -8.135049232785123e+00, -8.137061694913061e+00, -8.136225783560953e+00, -8.136225783560953e+00, -2.931708098744554e+00, -2.971083547382539e+00, -2.917478721438963e+00, -2.948622689920058e+00, -2.976841717971496e+00, -2.976841717971496e+00, -9.156052294415942e-01, -1.001142053094297e+00, -8.539435030546952e-01, -9.237418313473460e-01, -9.404867779798701e-01, -9.404867779798701e-01, -1.360574018938376e-01, -2.590112392727001e-01, -1.355741189659410e-01, -3.107692759339109e+00, -1.610563091389253e-01, -1.610563091389253e-01, -1.494128064954779e-02, -1.674794565407570e-02, -1.307039614725540e-02, -9.779958201114104e-02, -1.546400078355348e-02, -1.546400078355342e-02, -1.087540967534101e+00, -9.782847241120864e-01, -1.044504525690864e+00, -1.082251490861584e+00, -1.065806926052165e+00, -1.065806926052165e+00, -1.011942681820538e+00, -7.837691054417830e-01, -7.820312688905628e-01, -7.271533121361765e-01, -7.559367864891895e-01, -7.559367864891899e-01, -1.060982816415111e+00, -3.156919363814427e-01, -3.659452853379305e-01, -4.963868531168378e-01, -4.210114535127562e-01, -4.210114535127562e-01, -6.834319244409420e-01, -8.004947955006710e-02, -9.505818870922290e-02, -4.938836254331151e-01, -1.186344323048246e-01, -1.186344323048254e-01, -3.239107841253708e-02, -5.345666586623630e-03, -9.497000922387196e-03, -1.147108987042666e-01, -1.344229418792697e-02, -1.344229418792697e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.014177864317330e-08, -2.014186326816714e-08, -2.014206210985448e-08, -2.014070780186814e-08, -2.014182440486517e-08, -2.014182440486517e-08, -1.083007465061093e-05, -1.083315790674457e-05, -1.092560144464632e-05, -1.090104562870686e-05, -1.083063121546955e-05, -1.083063121546955e-05, -2.152749977336591e-03, -2.153149281400853e-03, -2.231734683691079e-03, -2.517504834564644e-03, -2.153424018804732e-03, -2.153424018804732e-03, -5.141777718703232e-01, -5.145817515678951e-01, 5.874361386617472e-04, -7.788689147817852e-01, -5.138475997724278e-01, -5.138475997724278e-01, -8.037850636162597e+00, -8.091988899662528e+00, -3.553357793803491e+00, -5.344738388089223e+00, -8.395871405303614e+00, -8.395871405303343e+00, -6.004445505992556e-06, -6.000212303839701e-06, -6.004098099358442e-06, -6.000804374863517e-06, -6.002253350607339e-06, -6.002253350607339e-06, -9.525808241766044e-05, -9.695857771448708e-05, -9.466624448989155e-05, -9.606147462656139e-05, -9.722514051246616e-05, -9.722514051246616e-05, -2.010748543890117e-02, -6.060531355888837e-03, -1.855372652922921e-02, -1.366013164984925e-02, -1.995245199377606e-02, -1.995245199377606e-02, -1.398515463735327e+00, -3.062533368623007e-01, -1.554582954009202e+00, -1.659506283469071e-04, -1.199896256092236e+00, -1.199896256092236e+00, -5.651131195206516e+00, -5.728237505129859e+00, -1.598157343641899e+01, -3.173162993410082e+00, -8.389925837030690e+00, -8.389925837054300e+00, 2.180906219500655e-01, 1.125692054228489e-01, 1.596126784223319e-01, 1.967308687262872e-01, 1.786974533452268e-01, 1.786974533452267e-01, 1.603144167260702e-01, -3.746645217671179e-02, -3.984349917476428e-02, -2.923660460521011e-02, -3.806655308628223e-02, -3.806655308628223e-02, -7.697438147667779e-03, -1.809103922476852e-01, -1.325088678383939e-01, -8.540262826029224e-02, -1.151605169861802e-01, -1.151605169861802e-01, -4.108216725943609e-02, -3.068322042859424e+00, -2.891676619455218e+00, -1.259588532424316e-01, -2.525934476311137e+00, -2.525934476311154e+00, -6.150239609676843e+00, -9.004611230495577e+00, -8.057558635001348e+00, -3.063909266819227e+00, -1.208549489871144e+01, -1.208549489868196e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.914827006442039e-03, 4.914848319003969e-03, 4.914983193612352e-03, 4.914640596060728e-03, 4.914837820272316e-03, 4.914837820272316e-03, 1.191286736295920e-02, 1.191571113657890e-02, 1.200301468119425e-02, 1.199595674311818e-02, 1.191342732354794e-02, 1.191342732354794e-02, 1.671730989704670e-02, 1.671332208446697e-02, 1.692913487158180e-02, 1.825678448956602e-02, 1.671773086986736e-02, 1.671773086986736e-02, 4.604946013530648e-02, 4.548308896199367e-02, 7.351265986742162e-03, 2.715320331353780e-02, 4.579816191329265e-02, 4.579816191329265e-02, 1.064506750072121e-04, 1.207294937235647e-04, 2.574792856228527e-03, 4.589337333046705e-06, 1.225125262950749e-04, 1.225125262949131e-04, 1.607913143920884e-02, 1.602707629435950e-02, 1.607357477399590e-02, 1.603311397866322e-02, 1.605284446139012e-02, 1.605284446139012e-02, 2.249721862493405e-02, 2.343289127153332e-02, 2.234623946698385e-02, 2.309496116771547e-02, 2.332955636610453e-02, 2.332955636610453e-02, 8.870053095270293e-02, 5.227274874760989e-02, 7.129499642264633e-02, 7.052032178980062e-02, 8.832459798309472e-02, 8.832459798309472e-02, 1.551082729719692e-02, 4.088449761816690e-02, 1.708162024799589e-02, 2.714021805814485e-02, 2.778381827331341e-02, 2.778381827331341e-02, 6.310701104365625e-06, 7.659489868711141e-06, 1.317088258137964e-05, 4.929506617008392e-03, 7.230100875790849e-06, 7.230100875794535e-06, -8.226388696908616e-04, -2.403589687784213e-01, -1.961581088155483e-01, -1.307556603098153e-01, -1.671587840871806e-01, -1.671587840871807e-01, 7.771232943831174e-02, 1.224696402004414e-01, 1.044465097639744e-01, -1.976112416604540e-02, 6.115040154465076e-02, 6.115040154465078e-02, 6.141058909873853e-02, 4.532799624029269e-02, 4.846806362207440e-02, 6.745919098500140e-02, 6.037754676919745e-02, 6.037754676919747e-02, 8.924848201328139e-02, 1.921395707482416e-03, 4.115097993807147e-03, 9.072027118239311e-02, 1.478606011070395e-02, 1.478606011070473e-02, 6.592152165933119e-05, 2.047209352741686e-07, 2.553872892047049e-06, 1.537892738107884e-02, 6.376571954780663e-06, 6.376571954692807e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
