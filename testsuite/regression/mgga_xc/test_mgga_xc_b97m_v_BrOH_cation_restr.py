
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.269039621370734e+01, -2.269056911704519e+01, -2.269131310046357e+01, -2.268874853846249e+01, -2.269009567404292e+01, -2.269009567404292e+01, -3.119271192493333e+00, -3.119426751943545e+00, -3.123586342170829e+00, -3.122177325165358e+00, -3.122014745016839e+00, -3.665674516193091e+00, -6.066809617263661e-01, -6.665904428869049e-01, -6.367058724554583e-01, -6.479689184211134e-01, -6.454606594155533e-01, -6.454606594155533e-01, -2.064776812326724e-01, -2.092740949026200e-01, -6.600107824917405e-01, -1.607231237451014e-01, -1.783950300253676e-01, -1.783950300253676e-01, -1.433782061209250e-02, -1.498294317756069e-02, -6.043674821885264e-02, -8.880123585804846e-03, -1.085580293792682e-02, -1.085580293792682e-02, -6.358221777900905e+00, -6.360282588162968e+00, -6.358331732073185e+00, -5.863196638470409e+00, -6.359261215388754e+00, -6.359261215388754e+00, -1.735807521873316e+00, -1.759621556295749e+00, -1.717966938269683e+00, -1.738989920940549e+00, -1.757809494247057e+00, -2.031454367511599e+00, -6.873379548817399e-01, -7.518812407553433e-01, -6.134947035830000e-01, -6.625171016437180e-01, -7.039657018370276e-01, -6.328512128441919e-01, -1.150386140003306e-01, -2.017373486210015e-01, -1.085453689310279e-01, -2.248527873310648e+00, -1.373417179554547e-01, -1.373417179554547e-01, -7.051467187785002e-03, -8.703802075440721e-03, -6.853615524636879e-03, -8.080845401675274e-02, -8.063826585661514e-03, -8.092460235501324e-03, -6.376096907714660e-01, -6.175759168524930e-01, -7.090087692830370e-01, -6.202415200974762e-01, -6.170833959356077e-01, -6.170833959356077e-01, -6.103563936757984e-01, -5.673268230131941e-01, -6.125570635381594e-01, -6.312310015747769e-01, -6.278034929480610e-01, -5.794782535036295e-01, -7.957021301922269e-01, -2.292691799290590e-01, -2.935109766283554e-01, -3.568933810273051e-01, -3.361475425874415e-01, -3.361475425874415e-01, -4.634560552189612e-01, -5.843111749105331e-02, -7.397045170924288e-02, -3.841862902729385e-01, -9.664371751796511e-02, -1.029210874058595e-01, -1.923570357276764e-02, -2.620846593917611e-03, -5.184251112186181e-03, -9.832157067315060e-02, -7.552203453954670e-03, -7.552203453954684e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.613573484378713e+01, -3.613592130095093e+01, -3.613674700456146e+01, -3.613397860022113e+01, -3.613542959338511e+01, -3.613542959338511e+01, -5.072689740800948e+00, -5.072950511036987e+00, -5.079912007243141e+00, -5.077557183571653e+00, -5.077284137380524e+00, -5.427834955211068e+00, -8.845052214581528e-01, -9.118682425561553e-01, -8.712141544715432e-01, -8.862194070271944e-01, -8.829265734735364e-01, -8.829265734735364e-01, -2.451962490195297e-01, -2.473102227657394e-01, -9.383784954606542e-01, -1.866244803795041e-01, -2.142853475891051e-01, -2.142853475891052e-01, -1.844116720225102e-02, -1.925774974242096e-02, -7.405301445427268e-02, -1.149636876763713e-02, -1.401758800903864e-02, -1.401758800903864e-02, -8.133399585208609e+00, -8.136071207052266e+00, -8.133537991530751e+00, -8.957160927128168e+00, -8.134728978518851e+00, -8.134728978518851e+00, -2.755170115931881e+00, -2.796869822993264e+00, -2.723625854267357e+00, -2.760718153047845e+00, -2.793746894761242e+00, -2.988470912892674e+00, -9.121105737786541e-01, -8.459018648233485e-01, -8.338545789288722e-01, -8.753194022773779e-01, -9.154891214099788e-01, -9.458443551317354e-01, -1.434603523854681e-01, -2.437537567142346e-01, -1.352443607345121e-01, -3.021838510556103e+00, -1.563170997802588e-01, -1.563170997802587e-01, -9.100624148521270e-03, -1.127095268337031e-02, -8.899022535746674e-03, -1.005908691109028e-01, -1.038704532757681e-02, -1.048776895664891e-02, -1.099813985339847e+00, -8.584464236308543e-01, -9.964620279627214e-01, -1.014330861306921e+00, -9.762919654550615e-01, -9.762919654550615e-01, -1.042282932646904e+00, -7.649005062229258e-01, -7.772691807073588e-01, -6.887010678739913e-01, -7.436269603200645e-01, -8.544754045035337e-01, -9.487223485393835e-01, -3.020173290391001e-01, -3.558003053430028e-01, -5.074689530593697e-01, -4.104617030188532e-01, -4.104617030188529e-01, -6.783828548167462e-01, -7.180492556340452e-02, -8.868581864951904e-02, -5.034493851425821e-01, -1.202409388940357e-01, -1.160820626599673e-01, -2.463281081475457e-02, -3.434599652823289e-03, -6.752169826268318e-03, -1.114272193442211e-01, -9.795432002593214e-03, -9.795432002593351e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.128932758353824e-08, -2.128947078620040e-08, -2.128988074934208e-08, -2.128778019448630e-08, -2.128891272340836e-08, -2.128891272340836e-08, -1.002899691930966e-05, -1.003390280881717e-05, -1.016267275112030e-05, -1.010689674840104e-05, -1.011711886068113e-05, -1.218514483784411e-05, 1.180864761797780e-03, -3.800671640419892e-03, -3.628423561603344e-03, -3.764085678339215e-03, -3.729874134889842e-03, -3.729874134889842e-03, -4.843751014905255e-01, -4.814412070929824e-01, 3.388370130494999e-03, -6.571639557817383e-01, -5.797459470878488e-01, -5.797459470878478e-01, -3.594598509639353e+00, -3.762133805430231e+00, -2.005706543226328e+00, -2.522564309552508e+00, -3.573557610163067e+00, -3.573557610163067e+00, -6.000246742115167e-06, -5.995941742790599e-06, -6.000046234298074e-06, -7.323942312769744e-06, -5.998139003105087e-06, -5.998139003105087e-06, -6.401223066326474e-05, -6.947545937757268e-05, -5.941274535773843e-05, -6.458020890999554e-05, -6.924785481026459e-05, -9.823311191618645e-05, -2.244789391564570e-02, -1.987536210337803e-02, -2.257425811099196e-02, -2.647024157757184e-02, -2.268041840299563e-02, -2.668116836380019e-02, 3.169830088782354e+01, -3.217022984453334e-01, 4.376199981371300e+01, -2.301209915974368e-04, -1.124762216909875e+00, -1.124762216909886e+00, 3.489346287400654e+07, -2.226317439489524e+00, -1.763638986057887e+01, 2.178460992410449e+02, 1.896254153152333e+07, -6.860809859742948e+00, 2.393102576918522e-01, 7.372019560355084e-02, -5.889587402580364e-02, 1.669037900216241e-01, 1.413229693248640e-01, 1.413229693248640e-01, 2.387349203266911e-01, -3.780639975098934e-02, -4.190946683742752e-02, -3.669912748988772e-02, -4.220876684802275e-02, -5.463652241813508e-02, -1.688512890996516e-02, 4.153233588116388e-01, -1.308460276404093e-01, -7.774369339198227e-02, -1.150913574504805e-01, -1.150913574504806e-01, -4.340744043356189e-02, -2.042088384809459e+00, -1.733089087179349e+00, -1.438737630970734e-01, 8.008472168537868e+01, -2.028680901804076e+00, -1.776696416127321e+00, -2.528552178357911e+00, -7.517673472050275e+00, -2.286320121787679e+00, -9.722060509059482e+00, -9.722060508935698e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([3.461745120022676e-03, 3.461806744388227e-03, 3.462049226278475e-03, 3.461137810172266e-03, 3.461619749960853e-03, 3.461619749960853e-03, 7.130945358382488e-03, 7.133145967066927e-03, 7.191250762779332e-03, 7.167137100470976e-03, 7.170388929206920e-03, 1.724099652745888e-02, 9.552255905390203e-03, 3.350922279164847e-02, 2.978366093395442e-02, 3.152377347590032e-02, 3.111213328765174e-02, 3.111213328765174e-02, 4.954464338508883e-02, 5.003736522249943e-02, 3.590370315740077e-03, 2.954889727169228e-02, 4.094961306747723e-02, 4.094961306747725e-02, 1.148418046386260e-05, 1.385711799673851e-05, 9.364689808693132e-04, 1.748315405382754e-06, 4.682904690474299e-06, 4.682904690474299e-06, 1.608293611826602e-02, 1.602851815143362e-02, 1.607983117576735e-02, 1.665809113764946e-02, 1.605572972062896e-02, 1.605572972062896e-02, 9.102909710398361e-03, 9.538265911714722e-03, 8.766316823491830e-03, 9.150126322529588e-03, 9.515294738958213e-03, 2.500030583671804e-02, 1.153849344285511e-01, 1.746061565933933e-02, 1.000659091190490e-01, 1.192322086569467e-01, 1.131276265607382e-01, 5.284591820400471e-02, -2.083056088741428e-04, 3.781573542746270e-02, -2.410329734861642e-04, 4.272837800452646e-02, 2.469452299724469e-02, 2.469452299724475e-02, -1.646467963942056e-07, 1.448256431258480e-06, 5.418613509009522e-06, -2.449236161560737e-04, -9.952171095291658e-07, 3.550060990453638e-06, -3.015286039207027e-01, -3.600571575134366e-01, 1.308346759659119e-01, -3.663214599082560e-01, -3.758815643062935e-01, -3.758815643062935e-01, -3.537526854369542e-01, 1.218423059266502e-01, 1.216375080293103e-01, -1.471485895337278e-02, 8.215860341053695e-02, 7.203922244585513e-02, 6.886346749466818e-02, 5.932585932207067e-03, 4.993753296584468e-02, 2.741190520189431e-02, 6.574661138606636e-02, 6.574661138606637e-02, 3.465584922150154e-02, 8.363203994944743e-04, 1.821349623376183e-03, 1.354249949772966e-01, -4.151114313889956e-04, 1.048327442736462e-02, 1.474051917632471e-05, 3.944084178087880e-08, 9.657833700022497e-07, 9.575671562695147e-03, 4.048885175138423e-06, 4.048885175196183e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
