
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.565353822735069e+01, -2.565367723669850e+01, -2.565439664939717e+01, -2.565233673139356e+01, -2.565340151796399e+01, -2.565340151796399e+01, -3.313587433201648e+00, -3.313791287616995e+00, -3.319392114175255e+00, -3.319028275457910e+00, -3.318054143634978e+00, -3.318054143634978e+00, -6.034751747904031e-01, -6.025047323387329e-01, -5.796289296337556e-01, -5.914909138326492e-01, -5.884781722090904e-01, -5.884781722090904e-01, -2.047514127873401e-01, -2.071462394324202e-01, -6.277047652001222e-01, -1.556738797824097e-01, -1.743802048784164e-01, -1.743802048784165e-01, -1.433774332634133e-02, -1.498277315908319e-02, -6.027041293590321e-02, -8.879946733064312e-03, -1.085555446842637e-02, -1.085555446842637e-02, -6.354616847094619e+00, -6.356722358196200e+00, -6.354801910942821e+00, -6.356656785446348e+00, -6.355641436090858e+00, -6.355641436090858e+00, -1.958165863685557e+00, -1.994029456173718e+00, -1.941517288847408e+00, -1.973829876763234e+00, -1.986148891558186e+00, -1.986148891558186e+00, -6.508207260027138e-01, -7.174870301838072e-01, -5.671522763969787e-01, -6.007274479768320e-01, -6.677348690100839e-01, -6.677348690100839e-01, -1.195005247768756e-01, -1.996166581366582e-01, -1.130885626081727e-01, -2.005709142971011e+00, -1.350512417314390e-01, -1.350512417314391e-01, -7.050349445185573e-03, -8.703427119120626e-03, -6.853392111114924e-03, -8.570683967635309e-02, -8.092013890957027e-03, -8.092013890957027e-03, -6.871388486754412e-01, -6.337722821308150e-01, -6.415000090230514e-01, -6.562301665652482e-01, -6.477734245316799e-01, -6.477734245316799e-01, -6.943098734722526e-01, -5.629113118218222e-01, -6.052984789051267e-01, -6.228619001633771e-01, -6.187720167886577e-01, -6.187720167886577e-01, -7.422391625077915e-01, -2.462057857231189e-01, -2.887301954977384e-01, -3.681723680643147e-01, -3.268276003270559e-01, -3.268276003270559e-01, -4.925632448807272e-01, -5.836038233314820e-02, -7.355480831921271e-02, -3.638101559941753e-01, -1.014213248693585e-01, -1.014213248693586e-01, -1.922996690530738e-02, -2.620806864179654e-03, -5.184224956927531e-03, -9.749826208918645e-02, -7.551904302325579e-03, -7.551904302325593e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.464486879759504e+01, -3.464497194088736e+01, -3.464540976950204e+01, -3.464387338514648e+01, -3.464468137752360e+01, -3.464468137752360e+01, -5.302931604061770e+00, -5.303135053763797e+00, -5.308661096490897e+00, -5.307651787525541e+00, -5.306895234557159e+00, -5.306895234557159e+00, -8.955680523410091e-01, -8.943427129175380e-01, -8.669914048763446e-01, -8.770190413412617e-01, -8.746497827629213e-01, -8.746497827629213e-01, -2.445136818525751e-01, -2.463958898212907e-01, -1.016535160011175e+00, -1.836928353624693e-01, -2.135460963008582e-01, -2.135460963008586e-01, -1.844085672628462e-02, -1.925706697686742e-02, -7.344029137889228e-02, -1.149565755291218e-02, -1.401658907448492e-02, -1.401658907448490e-02, -8.138580066959221e+00, -8.141262242263933e+00, -8.138614571698152e+00, -8.140984855447449e+00, -8.139968852953160e+00, -8.139968852953160e+00, -2.937037332294206e+00, -2.977595851449263e+00, -2.910088789441671e+00, -2.946461756015213e+00, -2.972622642747098e+00, -2.972622642747098e+00, -9.238473730624049e-01, -1.001074083241194e+00, -8.340208036025807e-01, -9.088796399137363e-01, -9.337893227285099e-01, -9.337893227285099e-01, -1.303191901037125e-01, -2.432615055151925e-01, -1.235088000003318e-01, -3.111976948183617e+00, -1.536663783319560e-01, -1.536663783319560e-01, -9.151742327598529e-03, -1.126944481162304e-02, -8.898125291343182e-03, -9.782883731177348e-02, -1.048597532370214e-02, -1.048597532370208e-02, -1.080022257641307e+00, -9.201052978505663e-01, -9.944695185680129e-01, -1.049743161702255e+00, -1.023894725598894e+00, -1.023894725598894e+00, -1.000429588804771e+00, -7.648069035024068e-01, -7.813078073143279e-01, -7.180041418782651e-01, -7.553600031395680e-01, -7.553600031395680e-01, -1.063451882105995e+00, -3.029291495381564e-01, -3.535992289113619e-01, -4.876370524227261e-01, -4.057391582713826e-01, -4.057391582713822e-01, -6.810421300929007e-01, -7.154183260518940e-02, -8.724511137932325e-02, -5.029483808636843e-01, -1.125214801446397e-01, -1.125214801446398e-01, -2.460978884719249e-02, -3.434440208497888e-03, -6.752064748284478e-03, -1.093497083895569e-01, -9.794230107325625e-03, -9.794230107325677e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.014061754073104e-08, -2.014071478769901e-08, -2.014093929315507e-08, -2.013951747536082e-08, -2.014029179319400e-08, -2.014029179319400e-08, -1.080815702137373e-05, -1.081162333498319e-05, -1.090408549897060e-05, -1.087816059490866e-05, -1.087896108189860e-05, -1.087896108189860e-05, -2.122547718232461e-03, -2.121129678907200e-03, -2.151051825069542e-03, -2.470328088803655e-03, -2.368744663624372e-03, -2.368744663624372e-03, -4.880800538782988e-01, -4.852022243816356e-01, 7.357562628250986e-04, -7.562225877940271e-01, -6.129170116170418e-01, -6.129170116170417e-01, -3.655116683257052e+00, -3.879066055011605e+00, -2.477937871943949e+00, -3.173825564260765e+00, -4.104652757829499e+00, -4.104652757820192e+00, -5.994413896114861e-06, -5.989998231169433e-06, -5.994325414307364e-06, -5.990426066411295e-06, -5.992189208891317e-06, -5.992189208891317e-06, -9.538764532328277e-05, -9.713987903156670e-05, -9.426737952207025e-05, -9.588758022378681e-05, -9.695322115519265e-05, -9.695322115519265e-05, -2.033296591830373e-02, -5.154593189554001e-03, -1.885463446635674e-02, -1.139153643003338e-02, -2.035339921134867e-02, -2.035339921134867e-02, -1.327027191158874e+00, -3.293603352321782e-01, -1.520957971016392e+00, -1.660588813759316e-04, -1.257708406426964e+00, -1.257708406426968e+00, -4.104541033934222e+00, -3.728928756320018e+00, -2.294862946650503e+01, -2.577655593443042e+00, -1.082414524277116e+01, -1.082414524281869e+01, 2.377655381856685e-01, 9.407945369934875e-02, 1.437216564362781e-01, 1.915110640863315e-01, 1.672687562190260e-01, 1.672687562190260e-01, 1.671643112125360e-01, -3.760566219914257e-02, -4.125655718007679e-02, -3.246439296465746e-02, -4.066312853604068e-02, -4.066312853604068e-02, -7.879252989602103e-03, -1.846844949518895e-01, -1.303838186817023e-01, -8.553692004078178e-02, -1.134282789353786e-01, -1.134282789353788e-01, -4.081274004215659e-02, -2.267495255599338e+00, -2.223029795680301e+00, -1.306310346219461e-01, -2.483379997552263e+00, -2.483379997552253e+00, -3.046048296659718e+00, -1.697021602596266e+01, -8.518311491712961e+00, -2.603790200061672e+00, -1.359423757917210e+01, -1.359423757912751e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.914849386024505e-03, 4.914873886416792e-03, 4.915015871485088e-03, 4.914656022278298e-03, 4.914839815688160e-03, 4.914839815688160e-03, 1.189180444691266e-02, 1.189495417281463e-02, 1.198102202948990e-02, 1.197402220176804e-02, 1.196379870382428e-02, 1.196379870382428e-02, 1.663521298376770e-02, 1.661912006538920e-02, 1.662800703758269e-02, 1.807071122866555e-02, 1.758608674014545e-02, 1.758608674014545e-02, 4.736131149437849e-02, 4.710936261413640e-02, 7.055621287917498e-03, 2.884379108460002e-02, 3.909433918031648e-02, 3.909433918031650e-02, 1.148438753782971e-05, 1.385763679838644e-05, 9.399397788090908e-04, 1.748446728274190e-06, 4.683291559954455e-06, 4.683291559989066e-06, 1.606963363594568e-02, 1.601590990141749e-02, 1.606683414267558e-02, 1.601941921668546e-02, 1.604264081624060e-02, 1.604264081624060e-02, 2.255762171698474e-02, 2.352407057610699e-02, 2.221527473802992e-02, 2.308921121842666e-02, 2.326492346480855e-02, 2.326492346480855e-02, 9.146326967868745e-02, 4.290532520919107e-02, 6.860384514383865e-02, 6.723961638535095e-02, 9.003394302674486e-02, 9.003394302674486e-02, 1.154469221433465e-02, 3.700951768697792e-02, 9.805481591545675e-03, 2.719843362856011e-02, 2.461642173905049e-02, 2.461642173905058e-02, 5.750128242250093e-07, 1.448492674621590e-06, 5.419312206952727e-06, 4.218556604747437e-03, 3.550813359319260e-06, 3.550813359237381e-06, -5.897186264352278e-02, -2.631786907111118e-01, -2.392341745056284e-01, -1.834052432086740e-01, -2.160244558925700e-01, -2.160244558925701e-01, 8.689753487726133e-02, 1.183108605173327e-01, 1.158196845291353e-01, -1.073557512815642e-02, 7.683545814472853e-02, 7.683545814472850e-02, 5.802064981136721e-02, 4.258646084145826e-02, 4.517113693377297e-02, 6.490969944693127e-02, 5.461120068455114e-02, 5.461120068455114e-02, 8.951767930690492e-02, 8.377348015808701e-04, 1.831998227965678e-03, 1.018480611427626e-01, 1.056414969692679e-02, 1.056414969692653e-02, 1.475375024065257e-05, 3.944345889193416e-08, 9.658033974247295e-07, 9.624253346390339e-03, 4.049509214400326e-06, 4.049509214424627e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
