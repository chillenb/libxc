
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_zlp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.926828095313565e+01, -1.926830493307068e+01, -1.926846585031655e+01, -1.926807224216438e+01, -1.926829315225608e+01, -1.926829315225608e+01, -3.632620259596479e+00, -3.632600356131560e+00, -3.632198396427809e+00, "nan", -3.632624957300633e+00, 1.835636567373069e+156, -7.459810458800437e-01, 5.975009036652480e+245, 1.240331157459273e+159, 6.901585720843175e+211, 2.767156021226981e+158, 6.374818308349562e+211, 1.705639147093424e+97, 1.210749928313963e+214, -8.718707401254960e-01, 2.199716074583554e+229, 1.363255763959039e+214, 1.131216979189553e+243, 1.254110106418152e+174, 8.133448182194031e+204, 2.761005791449728e+226, 9.146985576924106e+234, 3.705169722717232e+275, 3.096414097574127e+185, 4.200093738108991e+168, 8.448163767437123e+241, 5.525793839012291e+203, -5.232049570450633e+00, 5.028154842685314e+222, 6.987902707873030e+174, -2.214598395192648e+00, -2.224568351544838e+00, -2.215962144801690e+00, -2.223657136283756e+00, -2.219802613018892e+00, 2.190003140995846e+157, 3.723685411232383e+178, 4.697358218117288e+216, 6.475806899629051e+178, 6.810965421009445e+216, 3.201395456402466e+178, -6.429373671905391e-01, -2.429889438168649e-01, 8.334195809201386e+199, -2.323818562774820e-01, 6.180905630258910e+64, 3.818916198223362e+161, 8.713373864922255e+248, -2.117342519042889e+00, 3.677454604985415e+167, 1.965448550290219e+283, -2.582086092307381e-01, -1.672026550546308e+00, 3.801311207784785e+167, 1.452652985868806e+236, 1.628475719022771e+225, -6.192704146134019e-01, 3.339194098687472e+207, 3.984749511330386e+162, 9.629146408478603e+240, 7.233793122434673e+226, 4.347231780276977e+159, 8.371994391878332e+226, 1.333172842467871e+198, 4.669115050772877e+244, -5.721390516809887e-01, 3.353552529644949e+245, -3.105661119209169e-01, 1.378983017543467e+223, -3.937864181687359e-01, 4.917650371724945e+174, 2.806951504608584e+197, -5.038140102295092e-01, 1.905805098683490e+255, 5.696885403320295e+254, 6.707034989362176e+251, -2.213265081014286e-01, 6.549964933240574e+252, 1.249854378204012e+256, 1.128888030196890e+266, 3.154302584287568e+51, 1.440345648424791e+182, 3.231460862509098e+230, 8.380761510065662e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_zlp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.312784840396480e+01, -2.312791866552258e+01, -2.312823385510037e+01, -2.312708319404524e+01, -2.312788544158627e+01, -2.312788544158627e+01, -4.359008834788459e+00, -4.359054260936282e+00, -4.360473631928096e+00, "nan", -4.359049981438766e+00, -6.332200113509412e+155, -8.331443186418367e-01, -2.010201403842607e+245, -4.172060177220514e+158, -2.321598951412632e+211, -9.309723984886333e+157, -2.144721817247558e+211, -5.703304161424587e+96, -4.048640794804165e+213, -1.023751829254768e+00, -7.349856541125981e+228, -4.558493594924811e+213, -3.782595673118836e+242, -4.181413155928101e+173, -2.711856611682222e+204, -9.211676995957835e+225, -3.049389332521416e+234, -1.235375738451745e+275, -1.032404758381147e+185, -1.466478304538526e+168, -2.949725677022362e+241, -1.929352651090143e+203, -6.552993748404400e+00, -1.755604345562533e+222, -2.439859698862875e+174, -2.312718255453293e+00, -2.335642059072101e+00, -2.296216214836710e+00, -2.314227417015132e+00, -2.349299478786485e+00, -7.463359610512546e+156, -1.251537992217263e+178, -1.579711491382653e+216, -2.175769423445365e+178, -2.289018460304704e+216, -1.076275985882628e+178, -7.969362143039680e-01, 5.506486645857366e-02, -2.786835779580343e+199, 4.435654322108033e-02, -2.105400687276441e+64, -1.275607854454005e+161, -2.910471862687103e+248, 2.810129961026896e+00, -1.225991245818147e+167, -6.552207942070431e+282, 1.768250852570002e-01, 2.215819134364891e+00, -1.267268202788775e+167, -4.883452486412241e+235, -5.474319817307593e+224, -8.126323382026076e-01, -1.122537445145596e+207, -1.339546998355999e+162, -3.237015057416120e+240, -2.431271503274343e+226, -1.459763975743521e+159, -2.812003966384652e+226, -4.479001268165938e+197, -1.568463868293099e+244, -7.083487260753399e-01, -1.128188468737981e+245, -2.238992311852857e-01, -4.617013234374160e+222, -4.416706126827918e-01, -1.647287392208020e+174, -9.402571298412906e+196, -5.760425844494700e-01, -6.358055433930544e+254, -1.901055728355494e+254, -2.247314557262814e+251, 7.674671325719946e-02, -2.186649745507008e+252, -4.167382907861768e+255, -3.763124011182440e+265, -1.051516338085776e+51, -4.808177486916296e+181, -1.077274320260523e+230, -2.793900202774356e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.349213779679161e-09, -4.349170162345952e-09, -4.348943462034085e-09, -4.349658376019621e-09, -4.349191045821460e-09, -4.349191045821460e-09, -7.078112369090224e-06, -7.078052432022354e-06, -7.075230052159874e-06, -7.074041713540423e-06, -7.077959884055959e-06, -7.077959884055959e-06, -5.414134057942165e-03, -5.436473606457938e-03, -6.057820426087073e-03, -5.870324392052871e-03, -5.422268580594798e-03, -5.422268580594798e-03, -9.738031254718026e-01, -9.235810828789291e-01, -2.619338637376125e-03, -3.527798432102662e+00, -9.583877320959777e-01, -9.583877320959777e-01, -1.004160034531121e+05, -8.341781810011783e+04, -3.054116097993784e+02, -1.896113210347931e+06, -8.698775805760517e+04, -8.698775805760517e+04, -1.387726814292157e-06, -1.386728311993626e-06, -1.387621421905850e-06, -1.386845072522167e-06, -1.387219197288317e-06, -1.387219197288317e-06, -7.202425607523685e-05, -7.001868923513420e-05, -7.285531720469607e-05, -7.126141556501109e-05, -6.962540116044579e-05, -6.962540116044579e-05, -9.435290760899035e-03, -6.772163514445918e-03, -1.164281683340093e-02, -9.833943240053640e-03, -8.111882083077672e-03, -8.111882083077672e-03, -1.211497410000436e+01, -9.463674587278401e-01, -1.275681932985340e+01, -7.785636048355973e-05, -6.774219244657011e+00, -6.774219244657011e+00, -2.189377007028152e+06, -1.283441937495492e+06, -4.067180508617371e+06, -8.084684950637205e+01, -1.862140959850750e+06, -1.862140959850750e+06, -8.320201775566806e-03, -8.500659562544676e-03, -8.435412146337053e-03, -8.385501287919088e-03, -8.410435466364091e-03, -8.410435466364091e-03, -9.482439438172978e-03, -1.676232250672496e-02, -1.407613744428773e-02, -1.204965191440554e-02, -1.303307475845899e-02, -1.303307475845899e-02, -5.601042044666875e-03, -3.778694646453403e-01, -1.897838673907598e-01, -7.095934424008776e-02, -1.160315732660310e-01, -1.160315732660311e-01, -2.534810671886739e-02, -4.150872252497855e+02, -1.235481012492979e+02, -8.906532900682722e-02, -2.792419081129919e+01, -2.792419081129918e+01, -5.322132038442673e+04, -2.284540539188206e+08, -1.754288621071605e+07, -3.371156019294162e+01, -3.569569667570363e+06, -3.569569667570384e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [8.407779002318558e-05, 8.407755907335807e-05, 8.407635868813781e-05, 8.408014402274658e-05, 8.407766964968268e-05, 8.407766964968268e-05, 5.904641908867343e-04, 5.904629084625314e-04, 5.904025111161490e-04, 5.903770759424208e-04, 5.904609282737609e-04, 5.904609282737609e-04, 3.181167846554755e-03, 3.184467110869290e-03, 3.272408030523775e-03, 3.246613248163442e-03, 3.182370390492559e-03, 3.182370390492559e-03, 1.171456426023687e-02, 1.156015106817666e-02, 2.649476225157039e-03, 1.617229463941814e-02, 1.166781618179259e-02, 1.166781618179259e-02, 2.104467715031580e-01, 2.009103833866886e-01, 4.939376700559118e-02, 4.387341480056353e-01, 2.030266722336874e-01, 2.030266722336874e-01, 3.880812521383387e-04, 3.880089685339052e-04, 3.880736244054571e-04, 3.880174230733848e-04, 3.880445095748766e-04, 3.880445095748766e-04, 1.067472585497686e-03, 1.059838165411335e-03, 1.070589491139309e-03, 1.064587738867242e-03, 1.058321910227655e-03, 1.058321910227655e-03, 3.658392542522619e-03, 3.365516213638522e-03, 3.857046399871469e-03, 3.696674554520884e-03, 3.521910225926764e-03, 3.521910225926764e-03, 2.202604090878388e-02, 1.163097115925649e-02, 2.231254205787605e-02, 1.088803854988519e-03, 1.904270136379903e-02, 1.904270136379903e-02, 4.547963806374332e-01, 3.979469078842011e-01, 5.309652671132185e-01, 3.542035810415084e-02, 4.367554366775919e-01, 4.367554366775919e-01, 3.544450766067616e-03, 3.563637080069381e-03, 3.556735520537306e-03, 3.551429122062303e-03, 3.554083013043348e-03, 3.554083013043348e-03, 3.662982662808178e-03, 4.227180528527429e-03, 4.045586727378964e-03, 3.890506029704277e-03, 3.968022554713948e-03, 3.968022554713948e-03, 3.208463694133574e-03, 9.240087073019957e-03, 7.774527846622237e-03, 6.073891126632558e-03, 6.871729825547877e-03, 6.871729825547877e-03, 4.690198363525779e-03, 5.333440510469349e-02, 3.938547397107830e-02, 6.430434157871113e-03, 2.714654369268280e-02, 2.714654369268280e-02, 1.795556376617780e-01, 1.453670115961552e+00, 7.652071810903057e-01, 2.845686186193715e-02, 5.139200282908006e-01, 5.139200282908013e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
