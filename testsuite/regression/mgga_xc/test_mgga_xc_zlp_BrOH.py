
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_xc_zlp_BrOH_1_zk() not generated due to NaN in reference data

# test_mgga_xc_zlp_BrOH_1_vrho() not generated due to NaN in reference data


def test_mgga_xc_zlp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.349213779679161e-09, -4.349170162345952e-09, -4.348943462034085e-09, -4.349658376019621e-09, -4.349191045821460e-09, -4.349191045821460e-09, -7.078112369090224e-06, -7.078052432022354e-06, -7.075230052159874e-06, -7.074041713540423e-06, -7.077959884055959e-06, -7.077959884055959e-06, -5.414134057942165e-03, -5.436473606457938e-03, -6.057820426087073e-03, -5.870324392052871e-03, -5.422268580594798e-03, -5.422268580594798e-03, -9.738031254718026e-01, -9.235810828789291e-01, -2.619338637376125e-03, -3.527798432102662e+00, -9.583877320959777e-01, -9.583877320959777e-01, -1.004160034531121e+05, -8.341781810011783e+04, -3.054116097993784e+02, -1.896113210347931e+06, -8.698775805760517e+04, -8.698775805760517e+04, -1.387726814292157e-06, -1.386728311993626e-06, -1.387621421905850e-06, -1.386845072522167e-06, -1.387219197288317e-06, -1.387219197288317e-06, -7.202425607523685e-05, -7.001868923513420e-05, -7.285531720469607e-05, -7.126141556501109e-05, -6.962540116044579e-05, -6.962540116044579e-05, -9.435290760899035e-03, -6.772163514445918e-03, -1.164281683340093e-02, -9.833943240053640e-03, -8.111882083077672e-03, -8.111882083077672e-03, -1.211497410000436e+01, -9.463674587278401e-01, -1.275681932985340e+01, -7.785636048355973e-05, -6.774219244657011e+00, -6.774219244657011e+00, -2.189377007028152e+06, -1.283441937495492e+06, -4.067180508617371e+06, -8.084684950637205e+01, -1.862140959850750e+06, -1.862140959850750e+06, -8.320201775566806e-03, -8.500659562544676e-03, -8.435412146337053e-03, -8.385501287919088e-03, -8.410435466364091e-03, -8.410435466364091e-03, -9.482439438172978e-03, -1.676232250672496e-02, -1.407613744428773e-02, -1.204965191440554e-02, -1.303307475845899e-02, -1.303307475845899e-02, -5.601042044666875e-03, -3.778694646453403e-01, -1.897838673907598e-01, -7.095934424008776e-02, -1.160315732660310e-01, -1.160315732660311e-01, -2.534810671886739e-02, -4.150872252497855e+02, -1.235481012492979e+02, -8.906532900682722e-02, -2.792419081129919e+01, -2.792419081129918e+01, -5.322132038442673e+04, -2.284540539188206e+08, -1.754288621071605e+07, -3.371156019294162e+01, -3.569569667570363e+06, -3.569569667570384e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([8.407779002318558e-05, 8.407755907335807e-05, 8.407635868813781e-05, 8.408014402274658e-05, 8.407766964968268e-05, 8.407766964968268e-05, 5.904641908867343e-04, 5.904629084625314e-04, 5.904025111161490e-04, 5.903770759424208e-04, 5.904609282737609e-04, 5.904609282737609e-04, 3.181167846554755e-03, 3.184467110869290e-03, 3.272408030523775e-03, 3.246613248163442e-03, 3.182370390492559e-03, 3.182370390492559e-03, 1.171456426023687e-02, 1.156015106817666e-02, 2.649476225157039e-03, 1.617229463941814e-02, 1.166781618179259e-02, 1.166781618179259e-02, 2.104467715031580e-01, 2.009103833866886e-01, 4.939376700559118e-02, 4.387341480056353e-01, 2.030266722336874e-01, 2.030266722336874e-01, 3.880812521383387e-04, 3.880089685339052e-04, 3.880736244054571e-04, 3.880174230733848e-04, 3.880445095748766e-04, 3.880445095748766e-04, 1.067472585497686e-03, 1.059838165411335e-03, 1.070589491139309e-03, 1.064587738867242e-03, 1.058321910227655e-03, 1.058321910227655e-03, 3.658392542522619e-03, 3.365516213638522e-03, 3.857046399871469e-03, 3.696674554520884e-03, 3.521910225926764e-03, 3.521910225926764e-03, 2.202604090878388e-02, 1.163097115925649e-02, 2.231254205787605e-02, 1.088803854988519e-03, 1.904270136379903e-02, 1.904270136379903e-02, 4.547963806374332e-01, 3.979469078842011e-01, 5.309652671132185e-01, 3.542035810415084e-02, 4.367554366775919e-01, 4.367554366775919e-01, 3.544450766067616e-03, 3.563637080069381e-03, 3.556735520537306e-03, 3.551429122062303e-03, 3.554083013043348e-03, 3.554083013043348e-03, 3.662982662808178e-03, 4.227180528527429e-03, 4.045586727378964e-03, 3.890506029704277e-03, 3.968022554713948e-03, 3.968022554713948e-03, 3.208463694133574e-03, 9.240087073019957e-03, 7.774527846622237e-03, 6.073891126632558e-03, 6.871729825547877e-03, 6.871729825547877e-03, 4.690198363525779e-03, 5.333440510469349e-02, 3.938547397107830e-02, 6.430434157871113e-03, 2.714654369268280e-02, 2.714654369268280e-02, 1.795556376617780e-01, 1.453670115961552e+00, 7.652071810903057e-01, 2.845686186193715e-02, 5.139200282908006e-01, 5.139200282908013e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
