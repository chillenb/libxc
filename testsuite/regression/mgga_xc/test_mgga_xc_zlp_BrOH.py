
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_zlp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.011211458166820e+01, -2.011214695812953e+01, -2.011233941719546e+01, -2.011180904868612e+01, -2.011213125192596e+01, -2.011213125192596e+01, -3.545484955279771e+00, -3.545508484612647e+00, -3.546414381978649e+00, -3.547354916306288e+00, -3.545501958942918e+00, -3.545501958942918e+00, -6.744109115482941e-01, -6.738469308708156e-01, -6.613512709247954e-01, -6.722824300223147e-01, -6.742168400494387e-01, -6.742168400494387e-01, -2.070445315649591e-01, -2.086765181270940e-01, -7.407137317439442e-01, -1.452225883466041e-01, -2.074987955265492e-01, -2.074987955265492e-01, -1.675049534579639e-01, -1.616836212834789e-01, -1.026162867311589e-01, 6.711903047608485e-02, -1.599235500875071e-01, -1.599235500875071e-01, -2.098822292917496e+00, -4.704960348690162e+00, -2.081830325390718e+01, -7.859230869294604e-01, -5.654995254978650e+00, -5.020164063359489e+00, -1.788309504489483e+01, -1.920014416761291e+00, -2.080229881823684e+00, -2.086684874329499e+00, -2.091665307725053e+00, -2.194731319848117e+00, 1.770004904431331e-01, -4.235575624414389e-01, -7.330819930869936e-02, -5.887922603758201e-01, -6.258146668603543e-01, -6.079715725573867e-01, -5.176570916700792e-01, 5.671801764541157e-02, -2.245868785200546e+00, -1.909267315531078e+00, -1.603815993353096e-01, -1.853530861281301e-01, 7.912582708522254e+00, 5.629032198478771e+03, -7.294903016572772e+03, -5.863516119964787e-01, 2.366217747022976e+00, -4.380894272723992e+01, 4.243636432244170e+03, -1.509578782953240e+03, -2.869355931775306e+04, 4.122370282689648e+01, -1.176991450151632e+03, 5.448195265500496e+04, -2.058162270245621e+04, -5.427497354103975e-01, -1.710006937728843e-01, -6.292775860138411e-01, -5.432839595677100e-01, 3.337363152366093e-01, 1.722043776817890e-01, -3.335080959523032e+00, -5.838836745359380e+00, -1.032779168823175e+00, -2.806693370379362e-01, -3.157574247355909e-01, -4.840488042941780e-01, 1.040948186058209e+00, -3.759369616635955e-02, -3.505744606138159e-01, -1.447983325140558e+00, -1.371378734829267e-01, -5.800934272822808e+00, 1.529808706353384e+02, -4.730356356077809e+01, -2.222238995983774e-01, -2.855355830373715e+00, -4.146718352882791e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_zlp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.280954253043200e+01, -2.280960956322938e+01, -2.280991253526021e+01, -2.280881446961500e+01, -2.280957784943761e+01, -2.280957784943761e+01, -4.389066969228517e+00, -4.389097414468515e+00, -4.390065704054088e+00, -4.388674773017627e+00, -4.389103874997853e+00, -4.389103874997853e+00, -8.572231955550225e-01, -8.556144890531944e-01, -8.101432481285215e-01, -8.157859307675441e-01, -8.566363306315756e-01, -8.566363306315756e-01, -1.990894187485121e-01, -2.051298377617189e-01, -1.067943252735714e+00, -9.222502927820250e-02, -2.009640954601382e-01, -2.009640954601382e-01, 8.815864143936617e-01, 8.390543592163641e-01, 2.465105538743578e-01, 2.067968966393753e+00, 8.318112193746499e-01, 8.318112193746499e-01, -7.644853541726652e+00, -6.737316711656307e+00, -1.109122108360373e+00, -8.105383648452879e+00, -6.404432410280504e+00, -6.626086761344609e+00, 3.026206103005697e+00, -2.439429143088324e+00, -2.342463709844302e+00, -2.360901832576404e+00, -2.392967671357894e+00, -2.357843579629600e+00, -1.032248146982421e+00, -9.330943241911419e-01, -8.972045770076200e-01, -7.794605676399741e-01, -8.026926887632500e-01, -8.086913522128768e-01, 1.467881406164588e-01, -2.524019438136758e-01, 7.167311126220668e-01, -2.568662930063150e+00, -3.568656662882314e-02, -2.734550255804419e-02, -5.335968276462679e-01, -1.874772403708201e+03, 2.433347763926691e+03, 2.863383946251692e-01, 8.695629838759927e-01, 1.626328094831566e+01, -1.427630100838581e+03, 5.064458111460631e+02, 9.644798326026963e+03, -1.488153262373021e+01, 3.946452897446728e+02, -1.831613472182857e+04, 6.916470658882832e+03, -6.460809182166815e-01, -8.206481696680903e-01, -7.119828737455257e-01, -7.180418197138133e-01, -1.012653239186837e+00, -1.184493247855193e+00, 7.881409734270426e-01, 1.536373571218593e+00, -2.275102995137232e-01, -3.994385743142684e-01, -3.876849602685504e-01, -5.826755757421210e-01, -7.453622177463747e-02, 1.603310727820400e-01, -4.332319805686940e-01, 4.862555952346799e-01, 4.864105798431659e-02, 2.742815400210974e+00, -4.585067270030720e+01, 1.868355279735120e+01, 7.552443821247722e-02, 2.567995762528926e+00, 1.544004719921924e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.349213779679161e-09, -4.349170162345952e-09, -4.348943462034085e-09, -4.349658376019621e-09, -4.349191045821460e-09, -4.349191045821460e-09, -7.078112369090224e-06, -7.078052432022354e-06, -7.075230052159874e-06, -7.074041713540423e-06, -7.077959884055959e-06, -7.077959884055959e-06, -5.414134057942165e-03, -5.436473606457938e-03, -6.057820426087073e-03, -5.870324392052871e-03, -5.422268580594798e-03, -5.422268580594798e-03, -9.738031254718026e-01, -9.235810828789291e-01, -2.619338637376125e-03, -3.527798432102662e+00, -9.583877320959777e-01, -9.583877320959777e-01, -1.004160034531121e+05, -8.341781810011783e+04, -3.054116097993784e+02, -1.896113210347931e+06, -8.698775805760517e+04, -8.698775805760517e+04, -1.387726814292157e-06, -1.386728311993626e-06, -1.387621421905850e-06, -1.386845072522167e-06, -1.387219197288317e-06, -1.387219197288317e-06, -7.202425607523685e-05, -7.001868923513420e-05, -7.285531720469607e-05, -7.126141556501109e-05, -6.962540116044579e-05, -6.962540116044579e-05, -9.435290760899035e-03, -6.772163514445918e-03, -1.164281683340093e-02, -9.833943240053640e-03, -8.111882083077672e-03, -8.111882083077672e-03, -1.211497410000436e+01, -9.463674587278401e-01, -1.275681932985340e+01, -7.785636048355973e-05, -6.774219244657011e+00, -6.774219244657011e+00, -2.189377007028152e+06, -1.283441937495492e+06, -4.067180508617371e+06, -8.084684950637205e+01, -1.862140959850750e+06, -1.862140959850750e+06, -8.320201775566806e-03, -8.500659562544676e-03, -8.435412146337053e-03, -8.385501287919088e-03, -8.410435466364091e-03, -8.410435466364091e-03, -9.482439438172978e-03, -1.676232250672496e-02, -1.407613744428773e-02, -1.204965191440554e-02, -1.303307475845899e-02, -1.303307475845899e-02, -5.601042044666875e-03, -3.778694646453403e-01, -1.897838673907598e-01, -7.095934424008776e-02, -1.160315732660310e-01, -1.160315732660311e-01, -2.534810671886739e-02, -4.150872252497855e+02, -1.235481012492979e+02, -8.906532900682722e-02, -2.792419081129919e+01, -2.792419081129918e+01, -5.322132038442673e+04, -2.284540539188206e+08, -1.754288621071605e+07, -3.371156019294162e+01, -3.569569667570363e+06, -3.569569667570384e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([8.407779002318558e-05, 8.407755907335807e-05, 8.407635868813781e-05, 8.408014402274658e-05, 8.407766964968268e-05, 8.407766964968268e-05, 5.904641908867343e-04, 5.904629084625314e-04, 5.904025111161490e-04, 5.903770759424208e-04, 5.904609282737609e-04, 5.904609282737609e-04, 3.181167846554755e-03, 3.184467110869290e-03, 3.272408030523775e-03, 3.246613248163442e-03, 3.182370390492559e-03, 3.182370390492559e-03, 1.171456426023687e-02, 1.156015106817666e-02, 2.649476225157039e-03, 1.617229463941814e-02, 1.166781618179259e-02, 1.166781618179259e-02, 2.104467715031580e-01, 2.009103833866886e-01, 4.939376700559118e-02, 4.387341480056353e-01, 2.030266722336874e-01, 2.030266722336874e-01, 3.880812521383387e-04, 3.880089685339052e-04, 3.880736244054571e-04, 3.880174230733848e-04, 3.880445095748766e-04, 3.880445095748766e-04, 1.067472585497686e-03, 1.059838165411335e-03, 1.070589491139309e-03, 1.064587738867242e-03, 1.058321910227655e-03, 1.058321910227655e-03, 3.658392542522619e-03, 3.365516213638522e-03, 3.857046399871469e-03, 3.696674554520884e-03, 3.521910225926764e-03, 3.521910225926764e-03, 2.202604090878388e-02, 1.163097115925649e-02, 2.231254205787605e-02, 1.088803854988519e-03, 1.904270136379903e-02, 1.904270136379903e-02, 4.547963806374332e-01, 3.979469078842011e-01, 5.309652671132185e-01, 3.542035810415084e-02, 4.367554366775919e-01, 4.367554366775919e-01, 3.544450766067616e-03, 3.563637080069381e-03, 3.556735520537306e-03, 3.551429122062303e-03, 3.554083013043348e-03, 3.554083013043348e-03, 3.662982662808178e-03, 4.227180528527429e-03, 4.045586727378964e-03, 3.890506029704277e-03, 3.968022554713948e-03, 3.968022554713948e-03, 3.208463694133574e-03, 9.240087073019957e-03, 7.774527846622237e-03, 6.073891126632558e-03, 6.871729825547877e-03, 6.871729825547877e-03, 4.690198363525779e-03, 5.333440510469349e-02, 3.938547397107830e-02, 6.430434157871113e-03, 2.714654369268280e-02, 2.714654369268280e-02, 1.795556376617780e-01, 1.453670115961552e+00, 7.652071810903057e-01, 2.845686186193715e-02, 5.139200282908006e-01, 5.139200282908013e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
