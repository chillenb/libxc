
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_hle17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.496219199418043e+01, -2.496226758152473e+01, -2.496262257652472e+01, -2.653423961563163e+01, -2.652193095878640e+01, -2.812589180794133e+01, -4.355057355188411e+00, -4.644128935950090e+00, -4.643440128621375e+00, -4.644136301032908e+00, -4.643583355867626e+00, -4.354724347091214e+00, -8.251081360644362e-01, -8.829971241847875e-01, -9.401747414107161e-01, -8.649097321152940e-01, -8.107711456787943e-01, -9.419879477965954e-01, -2.385366236724607e-01, -2.453188422605196e-01, -1.066820724016231e+00, -2.299299716686078e-01, -2.573958040500268e-01, -2.481682042625597e-01, -1.263248044091056e-02, -1.085634924466861e-02, -5.881189109761881e-02, -7.286504854749861e-03, -1.016844362074829e-02, -1.016844362074829e-02, -6.886928303095422e+00, -6.876172872757135e+00, -6.874925465144766e+00, -6.876084694285528e+00, -6.511199087270114e+00, -6.501267981967140e+00, -2.646441697922616e+00, -2.660415120223335e+00, -2.631227689484926e+00, -2.643106992487060e+00, -2.494783318580907e+00, -2.658931364362532e+00, -7.471955299548826e-01, -8.574735535629053e-01, -7.335284585208000e-01, -7.599206729902890e-01, -7.637335284493725e-01, -8.026097274747992e-01, -1.753229720540150e-01, -2.480844946642718e-01, -1.642562764344553e-01, -2.546644379231991e+00, -1.947629905749863e-01, -1.947629905749863e-01, -4.518922438314847e-03, -7.123126401967644e-03, -5.454416198067902e-03, -9.106975999498408e-02, -6.851363835779084e-03, -6.851363835779085e-03, -7.967791701041494e-01, -7.919538998238697e-01, -7.208021933437371e-01, -7.604694544730221e-01, -7.215855323989743e-01, -7.595999989114079e-01, -7.827332594316222e-01, -6.338942977924661e-01, -6.592190531533552e-01, -7.270358501330203e-01, -7.106056838228612e-01, -6.748977855722849e-01, -8.564541222843826e-01, -3.373168408751652e-01, -3.519174406192054e-01, -4.497839351336271e-01, -4.262914937872641e-01, -3.955547406870692e-01, -6.148169601906460e-01, -4.738569512403182e-02, -9.345583316823959e-02, -4.609924511445343e-01, -1.408435185375406e-01, -1.408435185375407e-01, -1.274030721936621e-02, -1.904121840951584e-03, -2.984742220143865e-03, -9.281445358959194e-02, -6.292009341496441e-03, -4.261794571581541e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_hle17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.359165958095145e+01, -3.359166888451536e+01, -3.359177547323434e+01, -3.359175318715064e+01, -3.359216533368110e+01, -3.359230570471175e+01, -3.358632706070566e+01, -3.511196545332616e+01, -3.357234339824903e+01, -3.510152571993314e+01, -3.507387534015850e+01, -3.507335442301710e+01, -5.631108827274268e+00, -5.349971544777531e+00, -5.614608698536956e+00, -5.614321527822546e+00, -5.618542483816231e+00, -5.619247827892400e+00, -5.618576502645462e+00, -5.618659646712564e+00, -5.613293083084553e+00, -5.621035428120376e+00, -5.349268165230539e+00, -5.637909134066529e+00, -1.065762302170196e+00, -1.068443440609852e+00, -1.069032490881366e+00, -9.991432861748379e-01, -9.294564875260977e-01, -9.205583942948679e-01, -9.527171433765892e-01, -1.041424165557335e+00, -1.073412614289205e+00, -1.022671081993464e+00, -9.881449081921340e-01, -8.928378571809539e-01, -2.808935297141946e-01, -2.623740836043439e-01, -2.956928428006493e-01, -2.709020693835710e-01, -1.074197589743463e+00, -1.261827940260792e+00, -2.255267902362728e-01, -2.171450170249154e-01, -2.398104307739737e-01, -2.093500078105058e-01, -2.395955245328095e-01, -1.549915970775315e-01, -1.626919359738154e-02, -1.728404054768613e-02, -9.796773287971152e-03, -1.825374558594431e-02, -5.450857421681719e-02, -9.575897227918372e-02, -9.791412462754293e-03, -9.628402181191294e-03, -1.451919713643659e-02, -8.268667948636439e-03, -1.451919713643658e-02, -8.268667948636439e-03, -8.513169058768833e+00, -8.511147721227454e+00, -8.485674137893504e+00, -8.483659377279903e+00, -8.486239394698725e+00, -8.484223308556560e+00, -8.485708333677465e+00, -8.483677316129066e+00, -8.252359451550456e+00, -8.515167905944176e+00, -8.518061372147248e+00, -8.248332892491209e+00, -3.105436141379895e+00, -3.107148216018786e+00, -3.146912174581407e+00, -3.147319234073099e+00, -3.054932221462110e+00, -3.066625613572863e+00, -3.091743711729217e+00, -3.103622972497086e+00, -3.165125767000948e+00, -3.041581282479675e+00, -3.155264469379147e+00, -3.132581349413234e+00, -1.014476354237989e+00, -9.519488013202884e-01, -1.081814444384425e+00, -1.080595522488687e+00, -8.925079577618179e-01, -9.330838047629161e-01, -9.476426131733051e-01, -9.776036583182306e-01, -1.053360306479825e+00, -9.446351576516356e-01, -1.040130773499999e+00, -9.914099005242465e-01, -1.966691433901959e-01, -1.977081915757588e-01, -2.848723826407340e-01, -2.667513142991076e-01, -1.870779459605193e-01, -1.912431247295214e-01, -3.210142262066899e+00, -3.208689081851262e+00, -2.050486050591458e-01, -1.959190664779138e-01, -2.050486050591457e-01, -1.959190664779138e-01, -4.216123144847848e-03, -7.635695801031309e-03, -9.421551270101738e-03, -9.564295236880857e-03, -7.043506358735894e-03, -7.458385268921401e-03, -1.414457520797706e-01, -9.142250383474544e-02, -7.196689987046289e-03, -9.875787989538283e-03, -7.196689987046289e-03, -9.875787989538285e-03, -9.653922305239571e-01, -9.685266575807672e-01, -9.709254089421718e-01, -9.739824307260290e-01, -9.564603258419245e-01, -9.597888161392429e-01, -9.617636795748500e-01, -9.694477949854305e-01, -9.571915317994363e-01, -9.605079555045839e-01, -9.611543310873560e-01, -9.706468244072268e-01, -9.396579291376688e-01, -9.420356457387842e-01, -8.448368893244940e-01, -8.000711875390580e-01, -8.925532894631715e-01, -8.463079617769804e-01, -9.084204736282552e-01, -9.112025861454901e-01, -8.962990362849543e-01, -8.991732874074211e-01, -9.086391651753457e-01, -8.668475309996853e-01, -1.142427733070710e+00, -1.090735438504184e+00, -3.169771539857336e-01, -3.184778415779015e-01, -4.270330318556095e-01, -3.974450363176180e-01, -5.597669903873060e-01, -5.830490524180265e-01, -4.799672405656372e-01, -4.803923342053568e-01, -4.818472909654071e-01, -4.877271399747872e-01, -7.573701454670884e-01, -7.644638539954716e-01, -6.230366095199394e-02, -6.256745230411195e-02, -1.172791195639175e-01, -1.204290802228040e-01, -5.680407721555437e-01, -5.836091000646846e-01, -1.619821174665182e-01, -1.626145471868050e-01, -1.619821174665182e-01, -1.626145471868050e-01, -1.667018732823242e-02, -1.698669887158497e-02, -2.535858672656975e-03, -2.541654214554086e-03, -3.894998643758358e-03, -4.010831003342073e-03, -1.214474929001441e-01, -1.227911542797833e-01, -6.815813619641767e-03, -9.053312168301646e-03, -6.815856235810140e-03, -5.198524871965498e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.305903581571750e-08, 8.161498703694582e-09, -1.306137536898164e-08, -1.305919022303191e-08, 8.161407659079791e-09, -1.306149959646813e-08, -1.305958742458769e-08, 8.160974813433972e-09, -1.306202206040433e-08, -1.741902109529219e-08, 8.405640482625738e-10, -2.997194428115092e-08, -1.685373625148500e-08, 5.200387474667950e-10, -3.014100392060212e-08, -3.033132807493384e-08, 9.509569276477095e-11, -3.033637261716550e-08, -1.182824022834591e-05, 9.964176957698947e-07, -1.142232081654528e-05, -1.208202347674982e-05, -4.342102210326612e-08, -1.208067628871269e-05, -1.211092659213467e-05, -4.049949263430463e-08, -1.211640348467930e-05, -1.207755279960696e-05, -3.905115918026003e-09, -1.207691381681791e-05, -1.208191773479560e-05, -4.154912499721281e-08, -1.212476037531303e-05, -1.141963606749036e-05, 1.007166622199659e-06, -1.186754256332541e-05, -3.055843898500518e-04, 8.392759910612361e-03, -3.406470985840701e-04, -3.718702842917012e-03, 2.711780721717872e-03, -6.752321741174245e-03, -8.133815882465759e-03, -4.712921844918318e-04, -8.305961190592159e-03, -7.952373066658514e-03, 9.819874290296201e-04, -3.779289674374681e-03, 1.006113396431743e-04, 9.137046179770458e-03, -4.471450693953240e-05, -7.312554110861659e-03, -4.896247394902247e-04, -8.817848117895759e-03, -3.626243104281801e-01, 1.351221107940613e-01, -1.224039656877088e+00, -4.265508036195512e-01, 8.587270080242467e-01, -1.039269708928573e+00, -3.438109511000157e-03, 2.270743625579282e-04, -1.443153893698715e-03, -1.513466650385844e+00, -4.250469150778486e-01, -1.787172102146242e+00, -1.393168075817408e+00, 3.135133680198804e-02, -1.739994400214049e+00, -1.392995337277887e+00, 2.470158621231220e-02, -3.079310883429666e+00, -5.970692192536669e+00, 3.251812862881083e-02, -5.994772857295644e+00, -1.349067144003338e+05, 2.159998625580819e-02, -6.277665335304284e+00, -1.476356468410044e+02, 9.494726441183295e-02, -2.990279770098447e+00, -4.376351181684296e+00, 8.591009898010435e-03, -4.421189376642404e+00, -5.686161765174660e+00, 7.967245079165205e-05, -9.730912613239438e+00, -5.686161765174530e+00, 7.967245151156240e-05, -9.730912613237773e+00, -1.451650661297973e-05, 6.060247819982425e-07, -1.453179273107161e-05, -1.490872401728617e-05, 1.658787862106808e-07, -1.491883672070246e-05, -1.476076484438105e-05, 1.645231767112605e-07, -1.477190960956108e-05, -1.489713415990403e-05, 1.657926952522790e-07, -1.491159654620329e-05, -5.754618416037906e-06, 9.865890293930442e-07, -1.441308932972547e-05, -1.448684148082285e-05, 8.324672870604462e-07, -6.445279545052423e-06, -1.101474154317183e-04, 1.273838645518867e-05, -1.102529364410594e-04, -1.075368081117495e-04, 1.288673236142687e-05, -1.077319552650128e-04, -1.139007926947078e-04, -2.176272916539760e-06, -1.133890478425992e-04, -1.114863857715007e-04, -1.982592212304845e-06, -1.110233753799709e-04, -9.979755542000844e-05, 2.755262634700871e-05, -9.497244940648918e-05, -1.071551821131239e-04, 1.289528200881664e-05, -1.086441610597335e-04, -1.802963813690148e-02, 8.425279330859929e-03, -2.198908250882611e-02, -3.729703658051269e-02, 5.729640736912154e-03, -3.986290126218008e-02, -1.888953303702522e-02, -4.382251904974564e-04, -1.949472358536033e-02, -2.378024585453268e-02, 5.555527257758009e-04, -2.581102282551858e-02, -2.035639260871933e-02, 7.880814896973251e-03, -2.454557348680605e-02, -2.293426356067646e-02, 6.336111294643516e-04, -2.258652182357779e-02, -1.750242335232445e+00, -6.301576925694420e-01, -1.754605101954087e+00, -3.519978419815888e-01, 9.420470669136045e-02, -9.215019381273327e-01, -2.088644493176836e+00, 2.523958372367761e-01, -2.176297358707459e+00, -2.463737770713980e-04, 5.515309441215357e-06, -2.471185920491891e-04, -2.347994739758323e+00, 4.835853582350198e-01, -3.050494208492111e+00, -2.347994739758323e+00, 4.835853582350200e-01, -3.050494208492111e+00, -3.925358863189799e+06, 2.154476100499896e-03, -2.930417750736424e+00, -4.154861800169388e+00, 8.856139272610437e-04, -3.662251496943802e+00, -2.987974443922467e+01, 9.869869366495616e-02, -3.280709832917098e+01, -2.689835462287079e+00, -4.756930603942802e-02, -2.041293085150819e+01, -5.625875978214599e+00, 2.316634335273031e-02, -1.790208334849852e+01, -5.625875978214331e+00, 2.316634335433233e-02, -1.790208334849843e+01, -4.263734555765389e-01, 7.784383336862240e-02, -4.342785140164301e-01, -1.948621591836587e-01, 3.506516589364984e-02, -1.971572288238651e-01, -6.186548874614525e-02, 1.427086981357564e-02, -6.221962409018901e-02, -6.498297087120904e-02, 3.877528254514732e-02, -3.148898966468910e-01, -6.731110377981012e-02, 1.422339161095589e-02, -6.768814810986082e-02, -5.992929084757491e-02, 3.565242665732968e-02, -2.800237863156325e-01, -4.226228436247279e-01, 4.563919083216288e-02, -4.318073966774430e-01, -2.677038241649497e-02, 2.085837793723846e-02, -2.908524519772470e-02, -3.923410460217813e-02, 1.709384044250592e-02, -3.778536247584163e-02, -8.340247746717537e-02, 3.438444357410093e-03, -8.331319401413632e-02, -5.848240577732693e-02, 2.372845187613157e-03, -5.871435490073330e-02, -5.237896192543928e-02, 1.824584275496940e-02, -3.798299426112858e-02, -2.120357732637985e-02, 7.230513230783024e-03, -1.384357524300548e-02, -5.390964730887081e-01, 1.301510384384566e-01, -5.296430405136848e-01, -1.085224723154293e-01, 6.466831089931199e-02, -2.709136510772019e-01, -1.081802278562529e-01, 5.013096228605183e-02, -8.141670153597129e-02, -1.656582150892364e-01, 6.963180971739515e-02, -1.660181920175279e-01, -1.549232001305316e-01, 6.207682909702136e-02, -8.480899005465294e-02, -3.585905149150597e-02, -2.246704251730183e-03, -3.612293507721250e-02, 5.144528164746653e+02, 1.347260653707346e+03, 5.187101517394210e+02, -9.812412630219074e-01, -2.815671129075761e+00, -1.358166736594041e+00, -1.108528487871850e-01, 7.027097015181605e-02, -1.185551115165497e-01, -2.411214074952380e+00, -1.715478551082861e+00, -3.458836106363041e+00, -2.411214074952380e+00, -1.715478551082854e+00, -3.458836106363047e+00, 1.231134099291948e+05, 3.239757630393143e+05, 1.282683805891187e+05, -1.004389718867787e+01, 1.046475240265696e+01, -9.951227978528532e+00, 4.762165590529570e+07, 1.275483186190791e+08, 5.115066828382652e+07, 2.843832904391195e+01, 7.983167480935052e+01, 2.894674504617365e+01, -1.454986258697062e+01, 3.665220653049995e-03, -1.856870298166186e+01, -1.418077636645151e+01, 7.406876704489077e-01, -1.699654464869875e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.941177205413651e-04, 1.941581163337670e-04, 1.941229866136621e-04, 1.941619324413905e-04, 1.941374980423470e-04, 1.941833659500558e-04, 1.917080912160541e-04, 2.325616609995695e-03, 1.858012102466992e-04, 2.320319755113148e-03, 2.328331824637963e-03, 2.328639676338103e-03, 2.089979754884019e-03, -7.095329349597791e-04, 2.150163710880700e-03, 2.148615852470977e-03, 2.176332415792941e-03, 2.181077431016055e-03, 2.154000991384151e-03, 2.154006632866640e-03, 2.145968466299107e-03, 2.190572438824041e-03, -7.102974718129007e-04, 2.131750650907384e-03, -2.415689015764155e-03, -2.527765963692426e-03, -2.544855442900934e-03, 2.064584735065739e-03, 1.587570098273024e-03, 1.513176936198218e-03, 1.527585736751101e-03, -2.440763658901409e-03, -2.587046020883080e-03, -1.613511973003281e-03, 2.326684003510909e-03, 1.259000311378392e-03, -4.141722796372785e-03, 2.559095091326726e-03, -4.549168963113553e-03, 2.942990895431939e-03, 3.114443571326130e-04, -9.203366596552512e-04, 6.983804689936113e-04, 8.148121900620013e-04, 2.292221922052088e-03, 3.932103971883534e-05, 2.292221922052086e-03, -1.194162286768732e-04, -1.015511472800098e-10, -3.453524708827172e-11, -8.174258601884570e-08, -4.323020846165702e-09, -9.551615285475443e-06, -2.408149649889376e-06, -5.579227457700257e-12, -6.181230100004516e-12, 9.649407482572516e-11, 1.288587151333677e-11, 9.649407482572516e-11, 1.288587151333625e-11, 1.653504295639438e-02, 1.654020613358354e-02, 1.678778706429093e-02, 1.678667694044796e-02, 1.661295649333929e-02, 1.661321036447604e-02, 1.677403292569146e-02, 1.677805715832632e-02, 9.390985611704845e-04, 1.665741025415989e-02, 1.651429757399223e-02, 7.980481923036036e-04, 2.440019924776740e-03, 2.462275443069677e-03, 2.645147533500489e-03, 2.662386607135768e-03, 2.340908598172350e-03, 2.410495691340315e-03, 2.510345168750439e-03, 2.586177029972585e-03, 2.677567101271277e-03, -1.435517360789381e-03, 2.698420888630981e-03, 2.587279825348284e-03, 2.959763724344162e-02, -3.983405371690138e-04, 7.483910855791376e-02, 8.011379325305293e-02, 1.504048866785621e-02, 2.119043553533726e-02, 3.063224323313676e-02, 3.833813620658297e-02, 3.953449645152003e-02, -6.312976489880715e-04, 4.204896772768145e-02, 3.425519283756143e-02, 4.251017816534828e-05, 4.426707924289090e-05, -1.711220692100215e-03, 3.670034820171334e-04, 2.007906391861293e-05, 3.092261304033036e-05, 1.325326744691752e-02, 1.327699769778877e-02, 9.150887628538623e-05, 2.455240217475419e-04, 9.150887628538648e-05, 2.455240217475427e-04, -3.174656806310402e-09, -2.910916470215549e-11, 6.902658236465177e-12, 6.157854408493771e-12, -4.481796110884302e-11, -2.820701875681531e-11, -1.495628385497272e-05, -6.105709283025449e-05, -8.971009257832651e-11, -1.409192757889208e-11, -8.971009257832668e-11, -1.409192757897567e-11, 6.265563551864125e-01, 6.481121739583536e-01, 2.852628725971211e-01, 2.928029058631852e-01, 9.713251718994802e-03, 9.685498278676563e-03, -1.234121355521527e-02, 5.174258223083754e-01, 9.740070062499604e-03, 9.710093514833658e-03, -9.881633313061884e-03, 4.599542093877099e-01, 6.347015985929250e-01, 6.550278671948266e-01, 2.507697957825214e-02, -1.919847584974018e-03, 4.602718768175424e-02, 1.315645776707129e-03, 1.060148188449936e-01, 1.070280741588212e-01, 7.000158397271619e-02, 7.108875421428508e-02, 6.639666004229858e-02, 2.846955239652795e-03, 5.657545445529781e-02, 4.890590558426205e-03, 1.686923427173736e-03, 1.734351473085741e-03, -5.970593325134200e-03, 2.959864501666603e-03, -1.013594412585174e-02, 1.115892266584315e-02, 7.585417100709500e-03, 7.717313691655542e-03, 6.151228408891048e-03, -9.727943237512207e-03, 1.755074081392962e-02, 1.903569502217054e-02, -6.504198165922181e-06, -6.506846712000216e-06, 1.449476018081837e-06, 1.809395280975346e-06, 2.022202893977751e-02, 2.916477786511015e-02, 2.399650347590794e-05, 4.359260947508335e-05, 2.399650347590802e-05, 4.359260947508328e-05, -9.129690309843782e-08, -1.001405519825274e-07, 1.198569945056293e-14, 1.204343029782934e-14, -4.523954216706450e-09, -5.766678676860097e-09, -9.072754571265643e-05, -1.081388868954306e-04, 8.962685035329827e-12, 5.355981512794825e-11, -7.301613173608402e-10, -3.513232688984302e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
