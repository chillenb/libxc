
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_hle17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.796542086972356e+01, -2.796549948090192e+01, -2.796596024049361e+01, -2.796479318714659e+01, -2.796538876561344e+01, -2.796538876561344e+01, -4.335129514432968e+00, -4.335138946376212e+00, -4.335694376516544e+00, -4.338059213913950e+00, -4.336439403591391e+00, -4.336439403591391e+00, -8.502084942275152e-01, -8.498361606037976e-01, -8.433571366713335e-01, -8.516344278012795e-01, -8.523905881157788e-01, -8.523905881157788e-01, -2.602031003466903e-01, -2.616693409091838e-01, -9.714248700641571e-01, -2.223010550629922e-01, -2.530056395613833e-01, -2.530056395613832e-01, -1.263241095403717e-02, -1.330186002543613e-02, -7.218992191926897e-02, -7.286349689498717e-03, -1.016824282453941e-02, -1.016824282453941e-02, -6.870525869657804e+00, -6.871844887621253e+00, -6.870679591022458e+00, -6.871840844488133e+00, -6.871146326703137e+00, -6.871146326703137e+00, -2.612060676937823e+00, -2.630472271547628e+00, -2.606324495506829e+00, -2.622434106390579e+00, -2.625151864917973e+00, -2.625151864917973e+00, -7.632338322245179e-01, -7.936412672355624e-01, -6.973839844685320e-01, -6.967439908876626e-01, -7.755052106416436e-01, -7.755052106416437e-01, -1.727351259829720e-01, -2.800922652010179e-01, -1.617675935720446e-01, -2.302694468094561e+00, -1.911264769375583e-01, -1.911264769375583e-01, -5.625614021052843e-03, -7.122799767434661e-03, -5.454213699273684e-03, -1.134232742936292e-01, -6.851173548768735e-03, -6.851173548768735e-03, -7.569986204214512e-01, -7.737390628993603e-01, -7.706287727379261e-01, -7.662583756669875e-01, -7.686929250447865e-01, -7.686929250447865e-01, -7.135172008180515e-01, -6.629104715930869e-01, -6.912481064451228e-01, -7.171581974597082e-01, -7.042241309838386e-01, -7.042241309838386e-01, -8.274338183542898e-01, -3.320190804481333e-01, -3.757387385729503e-01, -4.631884797567355e-01, -4.148656985448211e-01, -4.148656985448211e-01, -6.046086101925828e-01, -6.914277218159313e-02, -9.313778251960868e-02, -4.441017101657002e-01, -1.393856437999378e-01, -1.393856437999379e-01, -1.779820720097749e-02, -1.904083453148317e-03, -4.004034966189804e-03, -1.321517421749743e-01, -6.291813823792776e-03, -6.291813823792768e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_hle17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.469002153295647e+01, -3.469115570167963e+01, -3.469011159824511e+01, -3.469122128060409e+01, -3.469062030339180e+01, -3.469188718429676e+01, -3.468960556201496e+01, -3.469059620007894e+01, -3.469006472320135e+01, -3.469127630841738e+01, -3.469006472320135e+01, -3.469127630841738e+01, -5.298330270700918e+00, -5.298061128215182e+00, -5.298405613370573e+00, -5.298092155381540e+00, -5.299682583237308e+00, -5.299905753572264e+00, -5.300247602501315e+00, -5.300160130671014e+00, -5.297345731978045e+00, -5.301418566222887e+00, -5.297345731978045e+00, -5.301418566222887e+00, -1.018309103573275e+00, -1.025171303762955e+00, -1.015537828486930e+00, -1.023968274182984e+00, -9.740681340604486e-01, -9.622221712876491e-01, -9.781125757160462e-01, -9.824187538031603e-01, -1.031226952799155e+00, -9.190140862423883e-01, -1.031226952799155e+00, -9.190140862423883e-01, -2.425405453061374e-01, -2.527971068431166e-01, -2.462846110129652e-01, -2.591076193641423e-01, -1.179642489868349e+00, -1.236369135290210e+00, -2.043940270741705e-01, -2.064500108531204e-01, -2.421295546679315e-01, -1.965080902945294e-01, -2.421295546679315e-01, -1.965080902945293e-01, -1.626877392044507e-02, -1.728384696966861e-02, -1.704398894049916e-02, -1.825327341187808e-02, -9.071152899893598e-02, -9.524997795974917e-02, -9.790722331922640e-03, -9.627852882747040e-03, -1.451847288903717e-02, -8.267447238612835e-03, -1.451847288903717e-02, -8.267447238612839e-03, -8.491573744538492e+00, -8.490050989888021e+00, -8.491133077511041e+00, -8.489634001013638e+00, -8.491726353199876e+00, -8.490167814965366e+00, -8.491347991426382e+00, -8.489777471537538e+00, -8.491211779925422e+00, -8.489821856303402e+00, -8.491211779925422e+00, -8.489821856303402e+00, -3.080586655027390e+00, -3.082574689746593e+00, -3.120844975456644e+00, -3.121611377366385e+00, -3.050239747260537e+00, -3.060391325796914e+00, -3.085956935241366e+00, -3.096451870493125e+00, -3.123792198931231e+00, -3.107056800630009e+00, -3.123792198931231e+00, -3.107056800630009e+00, -9.470828176763229e-01, -9.461647969543956e-01, -1.024796435342547e+00, -1.025491574698842e+00, -8.459220929014996e-01, -8.805538735336859e-01, -8.943880807000048e-01, -9.209100119715675e-01, -9.870971712033152e-01, -9.339119633695447e-01, -9.870971712033153e-01, -9.339119633695449e-01, -1.888107998693710e-01, -1.888155278117373e-01, -2.521325997841429e-01, -2.527386528086101e-01, -1.780657887170420e-01, -1.826185987062698e-01, -3.031164873135662e+00, -3.029944707411549e+00, -1.938312399254407e-01, -1.849225163546307e-01, -1.938312399254407e-01, -1.849225163546307e-01, -7.346366350991613e-03, -7.634639863360297e-03, -9.420301619584006e-03, -9.562935552294042e-03, -7.042814760538362e-03, -7.457472837504689e-03, -1.371712068783943e-01, -1.381787485419841e-01, -7.194711119617773e-03, -9.875495882812172e-03, -7.194711119617772e-03, -9.875495882812172e-03, -9.514704701740714e-01, -9.549320005833005e-01, -9.520361740073102e-01, -9.554024131458320e-01, -9.504015736852186e-01, -9.537919855846322e-01, -9.498102582794371e-01, -9.532260546633742e-01, -9.499670248548204e-01, -9.533766635381891e-01, -9.499670248548204e-01, -9.533766635381891e-01, -9.334249224523534e-01, -9.361004361243009e-01, -8.324075480814184e-01, -8.361021033127661e-01, -8.717178604697428e-01, -8.750731784838751e-01, -8.924430553930875e-01, -8.951621431032256e-01, -8.828910432373515e-01, -8.862570567053650e-01, -8.828910432373515e-01, -8.862570567053650e-01, -1.072229240562839e+00, -1.074282033838745e+00, -3.078526668748752e-01, -3.093923376765559e-01, -3.847713077122895e-01, -3.900310134985777e-01, -5.606423386245086e-01, -5.631822156856779e-01, -4.765001627917979e-01, -4.766840475251063e-01, -4.765001627917979e-01, -4.766840475251063e-01, -7.422462625355368e-01, -7.497652861336674e-01, -8.933787631454161e-02, -8.989237352555890e-02, -1.160946395386943e-01, -1.191931774160338e-01, -5.415897171662910e-01, -5.582634414460153e-01, -1.573551883832202e-01, -1.574755672541671e-01, -1.573551883832201e-01, -1.574755672541670e-01, -2.323846663136208e-02, -2.407443237824799e-02, -2.535740953271695e-03, -2.541465091160917e-03, -5.158676589094750e-03, -5.486419412660024e-03, -1.515380587104495e-01, -1.532115647239899e-01, -6.813742243245321e-03, -9.053080620104785e-03, -6.813742243245315e-03, -9.053080620104776e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.322056028671717e-08, 2.197224600787279e-10, -3.322108693956159e-08, -3.322171410889524e-08, 2.197326997560984e-10, -3.322192286337880e-08, -3.322322652760899e-08, 2.197648946285641e-10, -3.322470962546944e-08, -3.321027687363226e-08, 2.196133451688152e-10, -3.320815762774612e-08, -3.322137942825142e-08, 2.196946272959006e-10, -3.321315649698374e-08, -3.322137942825142e-08, 2.196946272959006e-10, -3.321315649698374e-08, -3.017770840062420e-05, 9.523098290447450e-07, -3.018269497610292e-05, -3.018448545252123e-05, 9.525371978322201e-07, -3.018806857671520e-05, -3.032737598696527e-05, 9.575271987307035e-07, -3.035498133606737e-05, -3.022505945155372e-05, 9.460712013998083e-07, -3.023342543235571e-05, -3.018081789506754e-05, 9.515600541185171e-07, -3.035929831078516e-05, -3.018081789506754e-05, 9.515600541185171e-07, -3.035929831078516e-05, -1.226520089559599e-02, 1.509433996480978e-03, -1.217313786714668e-02, -1.232494502182297e-02, 1.492163624696748e-03, -1.219496430048648e-02, -1.307632126965616e-02, 1.052574361796755e-03, -1.327386715988324e-02, -1.298213931369002e-02, 9.896763223323155e-04, -1.299383333962015e-02, -1.192817647830415e-02, 1.119043541937464e-03, -1.303297010615283e-02, -1.192817647830415e-02, 1.119043541937464e-03, -1.303297010615283e-02, -1.464547159251967e+00, -3.207603892627416e-01, -1.323629072241632e+00, -1.444281455259446e+00, -3.020255559398789e-01, -1.274010199051228e+00, -4.623806233942216e-03, 9.326233756853878e-04, -3.772994055857456e-03, -2.368483309562626e+00, -3.487216566032797e-01, -2.289032117459370e+00, -1.436540198824991e+00, -7.119095033038366e-01, -8.097679842690688e-01, -1.436540198824989e+00, -7.119095033038433e-01, -8.097679842690457e-01, -5.052820183980957e-01, -9.374304747693019e+00, -2.163270257991941e+00, -2.548335052969986e-01, -1.009234411419334e+01, -2.323172961186261e+00, -2.540325735819170e+00, -1.901553899568668e+00, -2.890626074928547e+00, -4.845599887547585e+00, -1.613306459940459e+00, -4.611631104585683e+00, -6.121244519980034e+00, 2.937210190177353e-03, -1.552600396998503e+01, -6.121244519980415e+00, 2.937210190226300e-03, -1.552600396998069e+01, -1.469359612830327e-05, 4.660834142158537e-07, -1.470355823763988e-05, -1.485002614322586e-05, 4.721854185315666e-07, -1.485472681261205e-05, -1.470240855966691e-05, 4.664223801646269e-07, -1.470878367110655e-05, -1.483651101660388e-05, 4.718057278165751e-07, -1.484616188953890e-05, -1.477333795356947e-05, 4.691337141650798e-07, -1.477919358854057e-05, -1.477333795356947e-05, 4.691337141650798e-07, -1.477919358854057e-05, -1.346821463631893e-04, -1.367298933922273e-07, -1.341088150711691e-04, -1.293604572021566e-04, -1.710672830947574e-07, -1.289839156694642e-04, -1.319228916138036e-04, -6.063197905651780e-07, -1.322611850519044e-04, -1.270625713823940e-04, -6.489262251309826e-07, -1.273074554167896e-04, -1.342349438447829e-04, 8.341679905933910e-08, -1.315793252039513e-04, -1.342349438447829e-04, 8.341679905933910e-08, -1.315793252039513e-04, -4.538084061191293e-02, 5.016164450159183e-03, -4.610523536941390e-02, -5.714122484954800e-02, 9.042072937872033e-03, -5.925781724845620e-02, -5.244145628333342e-02, 6.403100533391242e-03, -5.141774511910473e-02, -4.670806187593785e-02, 1.204416081152473e-02, -5.071715010986906e-02, -4.465392584558549e-02, 5.360939401493714e-03, -5.200660178736179e-02, -4.465392584558549e-02, 5.360939401493717e-03, -5.200660178736179e-02, -2.473383267082244e+00, -5.880575718939928e-01, -2.547288242953584e+00, -1.035977813601979e+00, -1.893748166771763e-01, -1.027667290085078e+00, -2.691720562702294e+00, -6.791548354070929e-01, -2.743715157544295e+00, -3.675640636437879e-04, 6.283926768658653e-05, -3.682955304612738e-04, -2.696468987856520e+00, -6.078523670219228e-01, -3.496206215499663e+00, -2.696468987856520e+00, -6.078523670219232e-01, -3.496206215499662e+00, -7.879052684472383e+00, 1.118872935214389e-03, -6.819516907172741e+00, -6.784679799455402e+00, 4.925606923351630e-04, -6.264037735494458e+00, -3.733003118860404e+01, -2.206301610115625e+00, -4.206716632024044e+01, -3.719840357110777e+00, -1.336221017676042e+00, -3.579775628995361e+00, -1.921895492320628e+01, 8.131735651983054e-03, -1.888524478289572e+01, -1.921895492320396e+01, 8.131735651035503e-03, -1.888524478289562e+01, -3.993456728944462e-01, 5.377574595559084e-02, -4.042289312882065e-01, -2.130508536714329e-01, 3.250804395938973e-02, -2.146554267574725e-01, -2.611907222584393e-01, 3.903918773151199e-02, -2.638464980491935e-01, -3.151284073565078e-01, 4.560053287477966e-02, -3.176943026080009e-01, -2.863281248806989e-01, 4.219106803942424e-02, -2.889436124090565e-01, -2.863281248806989e-01, 4.219106803942425e-02, -2.889436124090563e-01, -2.435517715876676e-01, 3.041504984725626e-02, -2.502849224239727e-01, -3.543052483669529e-02, 1.186351548525444e-03, -3.535979948317415e-02, -5.220835505472868e-02, 5.949127922775353e-03, -5.267949865308695e-02, -9.971801097766078e-02, 1.436955477219573e-02, -9.940838815160725e-02, -7.084519060150930e-02, 9.462823482665916e-03, -7.049558056511536e-02, -7.084519060150930e-02, 9.462823482665920e-03, -7.049558056511537e-02, -3.822650319129334e-02, 6.737479126561644e-03, -4.042542726788106e-02, -5.457914525448093e-01, -9.659027041156863e-02, -5.391086603636130e-01, -3.179130099044716e-01, -4.208999041244797e-02, -3.092461532909301e-01, -1.725165048091303e-01, 1.248968223716606e-02, -1.707091796178776e-01, -2.041617520729819e-01, -1.209661236463326e-02, -2.054081726198548e-01, -2.041617520729818e-01, -1.209661236463325e-02, -2.054081726198550e-01, -6.092460322148835e-02, 3.544843862058401e-03, -5.968731720961784e-02, -2.329224625126904e+00, -1.990625039355404e+00, -2.375693726165228e+00, -2.618620919656512e+00, -1.321134900954005e+00, -2.838043939720711e+00, -2.710276661593406e-01, 3.087425773227430e-02, -2.552612419723049e-01, -3.803305227427133e+00, -1.132851082045485e+00, -4.883847722461226e+00, -3.803305227427159e+00, -1.132851082045444e+00, -4.883847722461242e+00, -4.270964993724848e+00, -1.059177678818193e+00, -4.487439108216685e+00, -2.423888283020353e+01, 2.063872263181228e-03, -4.293715153090027e+01, -1.454674937622809e+01, -6.862298373657456e-01, -1.564157473236309e+01, -4.168829308341182e+00, -1.599465490652011e+00, -4.157685950981582e+00, -3.963263457737442e+01, 1.041345500570372e-02, -1.960215934977071e+01, -3.963263457736107e+01, 1.041345501521763e-02, -1.960215934976793e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.315692880406488e-03, 2.316536586353593e-03, 2.315805833049782e-03, 2.316618368872971e-03, 2.316121496329164e-03, 2.317084736421879e-03, 2.314857378363711e-03, 2.315467470630161e-03, 2.315766641227029e-03, 2.316079271681311e-03, 2.315766641227029e-03, 2.316079271681311e-03, 3.407297291507782e-03, 3.401762300086529e-03, 3.409043027098144e-03, 3.402495059834482e-03, 3.438392157734351e-03, 3.442479178410297e-03, 3.446318815412248e-03, 3.442252054175215e-03, 3.404367316478669e-03, 3.469123680631210e-03, 3.404367316478669e-03, 3.469123680631210e-03, 5.077516354939548e-03, 5.061249829076596e-03, 5.097743207155577e-03, 5.054799963957756e-03, 4.988961123966475e-03, 5.051898682350644e-03, 5.608431239234804e-03, 5.750112281836676e-03, 4.641019047510494e-03, 4.531279681679825e-03, 4.641019047510494e-03, 4.531279681679825e-03, 5.984147290740471e-03, 6.254289125744198e-03, 6.763830225964601e-03, 7.261692128462706e-03, 7.875576399923223e-04, 7.606682294702994e-04, 9.885853603213263e-04, 1.045518009790923e-03, 5.075445324438773e-03, 9.132107750866234e-04, 5.075445324438778e-03, 9.132107750866339e-04, 1.949982367078897e-09, 1.950574990298763e-09, 2.805912736523478e-09, 2.806103751372851e-09, 2.187596708248230e-06, 2.197703593091741e-06, -1.798145317383195e-11, -1.798341809706039e-11, -4.526378987500566e-10, -4.526583686069433e-10, -4.526378987628018e-10, -4.526583686196884e-10, 1.621954034668710e-02, 1.622744513829516e-02, 1.640091016163347e-02, 1.640267144580326e-02, 1.623318973369690e-02, 1.623591164844579e-02, 1.638855307158712e-02, 1.639509930480439e-02, 1.630936284647003e-02, 1.631472697864987e-02, 1.630936284647003e-02, 1.631472697864987e-02, 3.527378488521322e-03, 3.522198528609609e-03, 3.623333579476730e-03, 3.616519506253548e-03, 3.160408963584048e-03, 3.261410048477436e-03, 3.229905083338297e-03, 3.331999874356985e-03, 3.868846955015708e-03, 3.610835788371763e-03, 3.868846955015708e-03, 3.610835788371763e-03, 3.976885615293825e-02, 4.086464477995651e-02, 3.697018983643648e-02, 3.883507431308942e-02, 2.433440624559591e-02, 3.110865029808184e-02, 1.294145254636214e-02, 1.922915771042593e-02, 4.728742297405331e-02, 4.133091135859834e-02, 4.728742297405333e-02, 4.133091135859834e-02, 1.125202033666781e-04, 1.166248645771956e-04, 2.035037744271764e-03, 2.067547829585226e-03, 8.277816678384499e-05, 8.935855845208874e-05, 4.232884772391626e-03, 4.234137290568870e-03, 3.845928627807263e-04, 6.534582444751133e-04, 3.845928627807266e-04, 6.534582444751145e-04, -1.027139821457866e-11, -1.027149755469945e-11, -4.362633587119531e-11, -4.362637545417408e-11, -2.519100343149482e-10, -2.518770103343955e-10, 2.140762462268655e-05, 2.089747579314909e-05, -2.243555901108426e-10, -2.243512664312985e-10, -2.243555901109014e-10, -2.243512664313574e-10, 3.326232574778071e-01, 3.413068020965623e-01, 2.392147706661042e-01, 2.449935413458654e-01, 2.769369233788714e-01, 2.843080571498882e-01, 3.102013250558338e-01, 3.179453575740332e-01, 2.936980639577108e-01, 3.012856797104265e-01, 2.936980639577108e-01, 3.012856797104265e-01, 8.777535537842691e-02, 9.273327184052672e-02, 2.717962107596607e-02, 2.772158014968273e-02, 4.872477669962882e-02, 4.998468170263541e-02, 9.478767237892805e-02, 9.559141772610794e-02, 6.706797294247495e-02, 6.797342218522218e-02, 6.706797294247493e-02, 6.797342218522215e-02, 2.595175897322342e-02, 2.824391533737684e-02, 3.757132590520307e-03, 3.843213046265933e-03, 7.991268574720203e-03, 8.431266211825805e-03, 2.759970397842526e-02, 2.771537555278360e-02, 1.634400860585556e-02, 1.658376222491744e-02, 1.634400860585555e-02, 1.658376222491746e-02, 2.689296767424210e-02, 2.793361893925107e-02, 1.849292133472531e-06, 1.848951618781375e-06, 5.699698274540198e-06, 5.757507962072148e-06, 3.929982958311889e-02, 4.683516565204020e-02, 7.486075393331568e-05, 8.904158065049404e-05, 7.486075393331450e-05, 8.904158065049291e-05, 5.974346270828336e-11, 6.131567477401954e-11, -1.340598122819979e-13, -1.340458565403042e-13, -1.822492357089867e-11, -1.822467108618840e-11, 7.865170342768233e-05, 9.140843872738534e-05, -2.314407718359081e-10, -2.314861820459140e-10, -2.314407734598461e-10, -2.314861836698521e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
