
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_xc_vcml_rvv10_BrOH_1_zk() not generated due to NaN in reference data

# test_mgga_xc_vcml_rvv10_BrOH_1_vrho() not generated due to NaN in reference data

# test_mgga_xc_vcml_rvv10_BrOH_1_vsigma() not generated due to NaN in reference data


def test_mgga_xc_vcml_rvv10_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.749038068382692e-03, 1.748970345313321e-03, 1.748670749590404e-03, 1.749772163778741e-03, 1.749002416801925e-03, 1.749002416801925e-03, 8.536402375176477e-04, 8.534840379691846e-04, 8.484263886524689e-04, 8.503928144441669e-04, 8.535928874013084e-04, -7.670300749381837e-18, 1.139834253081574e-03, 3.559343812855363e-17, -4.191275959317408e-17, 2.477660873180517e-16, 1.881539085208906e-16, 1.881539085208906e-16, -2.461365578687366e-16, -3.055729043159607e-16, 3.079532362437495e-04, -1.417312915757022e-15, -1.392818140709922e-16, -1.392818140709922e-16, 2.989071367073272e-13, -1.763228399047338e-12, -1.656854070601661e-13, -2.533146171060595e-12, -1.208743615505090e-12, 3.043873943973546e-13, 3.008411478836214e-18, -3.668709736408180e-19, 2.045560334886980e-19, 8.543030244601448e-04, -1.098357147159734e-19, -1.098357147159734e-19, 1.379062978032665e-03, 1.437439057628622e-03, 1.349433790574472e-03, 1.400918014547348e-03, 1.450931556511985e-03, -3.150299994065818e-17, -4.880917416019309e-17, 1.104319802184436e-17, 9.543387908263307e-17, -3.399615293240122e-17, -1.865308929902955e-17, 1.800526771562308e-02, 2.241685053523785e-05, 1.551636383560118e-16, 2.672881254096318e-05, -6.530107590148697e-18, 1.349318131722607e-15, 1.349318131722607e-15, 1.779426626481919e-11, -4.644183754663125e-12, -5.751585523427761e-12, 2.248863247577269e-06, 2.244170293075551e-11, 6.618909947145669e-12, -7.632501186637066e-18, 2.188082099020811e-18, -2.994112150003723e-02, 5.744645264869862e-18, 7.574142078237296e-20, 7.574142078237296e-20, -6.378011871944931e-18, 5.098551881221160e-17, -4.507472405428540e-17, -2.796402845058233e-17, 2.800156154964172e-17, 7.258311696045568e-02, 1.657590331120308e-17, 1.499894234507159e-03, 3.162271595305208e-16, 7.935765742426099e-03, 9.889272868337439e-17, 2.139184907991897e-16, 6.019905989396437e-03, -2.750720979112652e-14, -8.752566346695945e-15, -4.271379337630490e-17, 1.765839498121635e-05, -4.076524985271003e-15, 1.221298084892951e-12, 1.420454495549335e-10, -1.727206947261515e-12, -3.851662131822656e-15, -5.760115362773641e-13, 1.062161774805676e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
