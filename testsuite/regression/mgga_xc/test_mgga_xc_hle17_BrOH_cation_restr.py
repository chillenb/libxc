
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_hle17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.496219199288560e+01, -2.496226758028198e+01, -2.496262257481049e+01, -2.496149800770691e+01, -2.496208455412725e+01, -2.496208455412725e+01, -4.099073260113312e+00, -4.099068158988763e+00, -4.099007862691922e+00, -4.099399190167727e+00, -4.098935516348478e+00, -4.643580285939670e+00, -8.251049636254763e-01, -9.488828381274708e-01, -9.401552925215130e-01, -9.399780416214074e-01, -9.401034981291493e-01, -9.401034981291493e-01, -2.627595114640116e-01, -2.647148522337888e-01, -9.661722000960451e-01, -2.300099471027783e-01, -2.429897398794874e-01, -2.429897398794875e-01, -1.260937692475521e-02, -1.327083398738482e-02, -7.221254281552859e-02, -7.285476839053201e-03, -9.153385159166647e-03, -9.153385159166647e-03, -6.874859432827962e+00, -6.876172667434254e+00, -6.874925263064270e+00, -6.144350401240573e+00, -6.875522197226031e+00, -6.875522197226031e+00, -2.330803431206225e+00, -2.345685276195106e+00, -2.320085096605645e+00, -2.333156097901837e+00, -2.344214668405789e+00, -2.653149545444850e+00, -7.891042990220932e-01, -8.574738153372025e-01, -7.329621138029411e-01, -7.595030949461956e-01, -8.015887278759365e-01, -7.241256053411026e-01, -1.229600404648383e-01, -2.836121861238381e-01, -1.141912532831705e-01, -2.546644133108802e+00, -1.941466996719359e-01, -1.941466996719359e-01, -4.161964621878134e-03, -7.122323870792061e-03, -5.445507255859794e-03, -7.831360610968502e-02, -4.838708898744861e-03, -6.560319969871886e-03, -7.967730274791729e-01, -7.919481125148055e-01, -7.207973349504510e-01, -7.950942729364378e-01, -7.943965124162893e-01, -7.943965124162893e-01, -7.755655448590627e-01, -6.648283838508373e-01, -6.951577058643146e-01, -7.270316148566406e-01, -7.106009935165846e-01, -6.434463331346113e-01, -8.975029106411114e-01, -2.819009819836072e-01, -3.816122748961161e-01, -4.317424608007170e-01, -4.227244954227247e-01, -4.227244954227247e-01, -5.557271459817446e-01, -6.919337268332433e-02, -9.340738867271174e-02, -4.569543087068606e-01, -9.852533006474296e-02, -1.407475260189789e-01, -1.779162027984971e-02, -1.904116879118418e-03, -3.996506463111754e-03, -1.329111559306991e-01, -6.070316640707713e-03, -6.070316640707710e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_hle17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.359166423695655e+01, -3.359176433406001e+01, -3.359223552508590e+01, -3.359074615265261e+01, -3.359152283949618e+01, -3.359152283949618e+01, -5.363490196591256e+00, -5.363544883677315e+00, -5.365090934417299e+00, -5.364945447613925e+00, -5.364408183206579e+00, -5.617173617379068e+00, -1.067104684586123e+00, -9.733244314743031e-01, -9.250027817218445e-01, -9.416385041090419e-01, -9.374292052382851e-01, -9.374292052382851e-01, -2.478531157685675e-01, -2.524753557809706e-01, -1.263550678638978e+00, -2.213161518156193e-01, -2.215707972535589e-01, -2.215707972535590e-01, -1.679204647971930e-02, -1.767010081182628e-02, -9.353170774923274e-02, -9.710590249028754e-03, -1.219660670782741e-02, -1.219660670782741e-02, -8.499321985123512e+00, -8.498827120261373e+00, -8.499281759047888e+00, -8.244351953514471e+00, -8.499081404615200e+00, -8.499081404615200e+00, -3.023603401505728e+00, -3.046666725709436e+00, -3.007146799860547e+00, -3.027060198853190e+00, -3.044527500340342e+00, -3.129777422368840e+00, -1.002272748325533e+00, -1.081213572430551e+00, -9.137954186139543e-01, -9.653161916406114e-01, -1.019527133823344e+00, -9.646743510357251e-01, -1.617706884562678e-01, -2.579388051272634e-01, -1.502566350826820e-01, -3.213224118648820e+00, -1.968545105730463e-01, -1.968545105730462e-01, -5.515348297260353e-03, -9.493463693474719e-03, -7.256904206569364e-03, -1.031043324771513e-01, -6.409914377110724e-03, -8.743007386055053e-03, -9.669620433150963e-01, -9.724564668978960e-01, -9.581277321077423e-01, -9.690212771047163e-01, -9.698416426030968e-01, -9.698416426030968e-01, -9.429613019129806e-01, -8.387901142385624e-01, -8.854094927230725e-01, -9.168457280752487e-01, -9.026457330643879e-01, -8.596084505950026e-01, -1.137019072949264e+00, -3.671085192733288e-01, -3.844568741074902e-01, -5.573647199638815e-01, -4.725366016981880e-01, -4.725366016981880e-01, -7.250631176831077e-01, -8.981878432549033e-02, -1.188734427583898e-01, -5.697869870375641e-01, -1.296386341838818e-01, -1.623700531082209e-01, -2.368242884560531e-02, -2.538759749441514e-03, -5.327692771445656e-03, -1.550251619898738e-01, -8.089891106723623e-03, -8.089891106723616e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.489728054148707e-09, -4.489820476846702e-09, -4.490158591023201e-09, -4.488794703811754e-09, -4.489519450469382e-09, -4.489519450469382e-09, -2.240111168918986e-07, -2.254179427614399e-07, -2.625836665293885e-07, -2.474517933917668e-07, -2.491759756768097e-07, -6.061881728027925e-06, 1.936715276559860e-03, -3.926012402861651e-03, -4.227576964441667e-03, -4.193796173170025e-03, -4.213773353074630e-03, -4.213773353074630e-03, -7.398226649966592e-01, -7.127889042924919e-01, 1.472879999058075e-03, -9.305021745521321e-01, -9.483478671518542e-01, -9.483478671518542e-01, -2.997895672957430e+00, -3.123659461171735e+00, -1.474001176585874e+00, -2.200653054364046e+00, -3.062924445415438e+00, -3.062924445415438e+00, -7.187030558389705e-06, -7.262568237093776e-06, -7.191389946682982e-06, -1.879349749275523e-06, -7.224717546472469e-06, -7.224717546472469e-06, 8.132672315458571e-06, 6.039181492706945e-06, 9.793544709032145e-06, 7.881027801717764e-06, 6.163832944049707e-06, -5.517041970243986e-05, -9.824288238201015e-03, -1.784351240323185e-02, -9.621793694652821e-03, -1.162999555762983e-02, -1.055400825025288e-02, -4.186342082015488e-03, 1.039832280226984e+01, -5.095287275122777e-01, 1.428323339828362e+01, -1.192821863298391e-04, -1.432765791681542e+00, -1.432765791681542e+00, 1.449138525494111e+07, -1.945395782478059e+00, -1.572725504517897e+01, 7.116955130889349e+01, 7.809141730439071e+06, -6.035916030171704e+00, -1.956942586517769e-01, -8.923919042027181e-02, -2.745290149760192e-02, -1.398139602244126e-01, -1.245681897084225e-01, -1.245681897084225e-01, -1.886520860629349e-01, -1.551114066135537e-02, -2.028780098708068e-02, -3.603173647298970e-02, -2.588754056122842e-02, -9.966930476883767e-03, -1.107207041948601e-02, 2.355945509133073e-01, -1.552142634149455e-01, 9.095441095588241e-03, -8.922582457481160e-02, -8.922582457481142e-02, -1.645609754281570e-03, -1.502334279726537e+00, -1.300728314399374e+00, -6.028255906002616e-02, 2.659433578570528e+01, -1.922117388813470e+00, -1.432274658860933e+00, -2.382515266654035e+00, -6.830097158610579e+00, -2.118541346490802e+00, -8.602334844188103e+00, -8.602334844208816e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.941379193921880e-04, 1.941424603520805e-04, 1.941604335382109e-04, 1.940932485910381e-04, 1.941287674189459e-04, 1.941287674189459e-04, -6.633264408405442e-04, -6.630348510152028e-04, -6.552161449554843e-04, -6.583442424229658e-04, -6.580790318696189e-04, 2.168131226561912e-03, -2.471645436473511e-03, 2.442667908061913e-03, 1.550207359955986e-03, 2.086544373184183e-03, 2.018107368207232e-03, 2.018107368207232e-03, 4.885659183800819e-03, 5.379943345092668e-03, -6.898434117184688e-04, 7.660555848804718e-04, 1.810176795823718e-03, 1.810176795823712e-03, 2.352281699106651e-09, 3.185650782768593e-09, 5.105448828344593e-07, 1.087283371460900e-10, 5.312604178418376e-10, 5.312604178418376e-10, 1.626532859094278e-02, 1.644463364412090e-02, 1.627560276765987e-02, 9.784436594415344e-04, 1.635482413247370e-02, 1.635482413247370e-02, -1.404901017362278e-03, -1.378969200350537e-03, -1.415541253346247e-03, -1.402199153790176e-03, -1.381175101193395e-03, 2.717144802105706e-03, 3.072430448054539e-02, 7.741953822795412e-02, 1.797494828231147e-02, 3.268672768561692e-02, 3.597739874573558e-02, 2.754670668764232e-03, -1.299353233073960e-04, 8.119602446654752e-04, -1.041961273341683e-04, 1.296065663387010e-02, 5.135439949035122e-04, 5.135439949035121e-04, -3.191913976031001e-09, 8.107376488681849e-11, 5.137289644323116e-10, -3.729028473866905e-05, -2.012406424296739e-08, 2.989769981044455e-10, 6.372673646125467e-01, 2.890235712400783e-01, 9.699398377772912e-03, 4.540454401215653e-01, 4.042045495770507e-01, 4.042045495770505e-01, 5.663655610405299e-01, 2.535132195098986e-02, 4.595947726090333e-02, 9.464701281959459e-02, 6.400214907900376e-02, 6.409859115554242e-03, 5.534497709067136e-02, -2.660054602627823e-03, 5.523143659917226e-03, -7.925399514824108e-03, 9.902010473904158e-03, 9.902010473904163e-03, -4.659731499861504e-03, 2.257566285638706e-06, 7.363989691590474e-06, 2.604819499543199e-02, -1.117326058670047e-04, 1.130703309782661e-04, 3.916678544347084e-09, 1.826284851626799e-13, 3.293341205788145e-11, 9.777405551212412e-05, 3.504130697055864e-10, 3.504130795366014e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
