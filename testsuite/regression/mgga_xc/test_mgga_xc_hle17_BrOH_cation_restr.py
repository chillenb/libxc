
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_hle17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.796542084296267e+01, -2.796549945597824e+01, -2.796596020617581e+01, -2.796479317384818e+01, -2.796538877235331e+01, -2.796538877235331e+01, -4.335129468217791e+00, -4.335138882385766e+00, -4.335694351337111e+00, -4.338059189009821e+00, -4.336433217286952e+00, -4.336433217286952e+00, -8.501944565227582e-01, -8.498154314095492e-01, -8.433186629748117e-01, -8.516292962216205e-01, -8.489255544730140e-01, -8.489255544730140e-01, -2.600668159968019e-01, -2.614854325006382e-01, -9.707549330680649e-01, -2.222854928354557e-01, -2.359883373017959e-01, -2.359883373017959e-01, -1.260931246902445e-02, -1.327069282310740e-02, -7.208953978131163e-02, -7.285322550445490e-03, -9.153172187609068e-03, -9.153172187609068e-03, -6.870525664065518e+00, -6.871844696500525e+00, -6.870679395306417e+00, -6.871840641127418e+00, -6.871146131742730e+00, -6.871146131742730e+00, -2.612060707897423e+00, -2.630472237741975e+00, -2.606315334352860e+00, -2.622424472423358e+00, -2.625126544945407e+00, -2.625126544945407e+00, -7.632219159452547e-01, -7.936330952368260e-01, -6.967763632320958e-01, -6.962482330194781e-01, -7.744719956618409e-01, -7.744719956618409e-01, -1.727315658820686e-01, -2.800902373398451e-01, -1.616087384420060e-01, -2.302694230082763e+00, -1.911184075367078e-01, -1.911184075367078e-01, -5.621458547593813e-03, -7.121996204090653e-03, -5.445308017305501e-03, -1.134212236232824e-01, -6.559927255602476e-03, -6.559927255602476e-03, -7.569917929983021e-01, -7.737320636772844e-01, -7.706216681618956e-01, -7.662510203093691e-01, -7.686856747547833e-01, -7.686856747547833e-01, -7.135090718292630e-01, -6.629042179098836e-01, -6.912412592696893e-01, -7.171537082542732e-01, -7.042186136712766e-01, -7.042186136712766e-01, -8.274086182779884e-01, -3.320154385131070e-01, -3.757209821141086e-01, -4.631818976587595e-01, -4.148629315954959e-01, -4.148629315954959e-01, -6.045811951711013e-01, -6.914124802023705e-02, -9.309281363466600e-02, -4.439212568026179e-01, -1.392902784096615e-01, -1.392902784096615e-01, -1.778699334251242e-02, -1.904079443119729e-03, -3.996482699920343e-03, -1.321372053673650e-01, -6.070051927305315e-03, -6.070051927305313e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_hle17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.469058855619443e+01, -3.469066637904492e+01, -3.469125367864549e+01, -3.469010082535910e+01, -3.469067045041517e+01, -3.469067045041517e+01, -5.298195442542510e+00, -5.298248558049321e+00, -5.299794176138336e+00, -5.300203651989396e+00, -5.299376092501419e+00, -5.299376092501419e+00, -1.021773848644135e+00, -1.019799731281205e+00, -9.681642185752519e-01, -9.802767979902903e-01, -9.783352541380691e-01, -9.783352541380691e-01, -2.475398268815958e-01, -2.525647724838196e-01, -1.209826850976293e+00, -2.054393589946124e-01, -2.127936228692435e-01, -2.127936228692435e-01, -1.679178918056472e-02, -1.766953726945100e-02, -9.305246448405738e-02, -9.709973384872617e-03, -1.219575554429718e-02, -1.219575554429718e-02, -8.490812376650739e+00, -8.490383556076052e+00, -8.490947113734231e+00, -8.490562755975674e+00, -8.490516797195040e+00, -8.490516797195040e+00, -3.081579180758315e+00, -3.121227126535906e+00, -3.055337843524865e+00, -3.091226587065646e+00, -3.115567343051486e+00, -3.115567343051486e+00, -9.466042954015237e-01, -1.025148291954317e+00, -8.634601067139920e-01, -9.079838474723257e-01, -9.611462585163778e-01, -9.611462585163778e-01, -1.888162785574246e-01, -2.524353694773316e-01, -1.804641377564020e-01, -3.030554899867732e+00, -1.890510178765882e-01, -1.890510178765882e-01, -7.493279569879883e-03, -9.492153617702330e-03, -7.256107835185260e-03, -1.376770654386556e-01, -8.741437582661913e-03, -8.741437582661915e-03, -9.532049982769706e-01, -9.537219430526097e-01, -9.520995943209265e-01, -9.515214298816664e-01, -9.516748954582217e-01, -9.516748954582217e-01, -9.347666309844789e-01, -8.342611476819478e-01, -8.734005817867937e-01, -8.938043778062410e-01, -8.845767359089300e-01, -8.845767359089300e-01, -1.073272052804886e+00, -3.086209907391049e-01, -3.874024659863067e-01, -5.619137823755651e-01, -4.765906962729588e-01, -4.765906962729588e-01, -7.460001176514871e-01, -8.961619870684996e-02, -1.176768471604312e-01, -5.495997409162188e-01, -1.575010128070292e-01, -1.575010128070292e-01, -2.366396115432130e-02, -2.538610014982654e-03, -5.327597743938372e-03, -1.523864764776604e-01, -8.088832965655565e-03, -8.088832965655556e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.655548104714913e-08, -1.655597593668665e-08, -1.655704261844169e-08, -1.654970522735074e-08, -1.655371030644200e-08, -1.655371030644200e-08, -1.485203245833629e-05, -1.485501565186491e-05, -1.493120448223770e-05, -1.487811105072706e-05, -1.489717419431314e-05, -1.489717419431314e-05, -5.732443203177627e-03, -5.757555244073911e-03, -6.328205235785023e-03, -6.246324346165361e-03, -6.261651487715313e-03, -6.261651487715313e-03, -7.776547683283550e-01, -7.551212124558480e-01, -1.841816366470782e-03, -1.250637210649763e+00, -1.137384504302919e+00, -1.137384504302919e+00, -3.048363937719049e+00, -3.220803519643723e+00, -1.840488062232670e+00, -2.768983847120899e+00, -3.518379788075086e+00, -3.518379788074590e+00, -7.232766520683605e-06, -7.308141790540602e-06, -7.236192044341187e-06, -7.302715683765034e-06, -7.270849128676938e-06, -7.270849128676938e-06, -6.723226734559355e-05, -6.462913362763365e-05, -6.619485816452337e-05, -6.375210623783114e-05, -6.641618843248203e-05, -6.641618843248203e-05, -2.161908035580354e-02, -2.682639746895149e-02, -2.440505650162744e-02, -2.140860418257939e-02, -2.268186436599394e-02, -2.268186436599394e-02, -1.402433319815978e+00, -5.632500744183316e-01, -1.530960615376344e+00, -1.682548684267541e-04, -1.721713243195832e+00, -1.721713243195832e+00, -3.648301268754889e+00, -3.258883059454580e+00, -2.046657637503806e+01, -2.158388466655914e+00, -9.524499367870042e+00, -9.524499367864829e+00, -1.874407477939957e-01, -9.879958522839763e-02, -1.214979765419729e-01, -1.468032692309905e-01, -1.332683151470649e-01, -1.332683151470650e-01, -1.158249816174794e-01, -1.740045458055465e-02, -2.473493943663464e-02, -4.618936660546399e-02, -3.296909866498820e-02, -3.296909866498820e-02, -1.795755130963461e-02, -2.953674231680276e-01, -1.673001969170345e-01, -8.268471398289404e-02, -1.054258799734201e-01, -1.054258799734201e-01, -2.927401759281882e-02, -1.674011911538870e+00, -1.697441159966186e+00, -1.246785863822297e-01, -2.474393265729008e+00, -2.474393265729008e+00, -2.458124446924113e+00, -1.599083811139052e+01, -7.739322597720085e+00, -2.481069116094675e+00, -1.203010652773364e+01, -1.203010652775990e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.316114632464386e-03, 2.316212005324432e-03, 2.316602993602551e-03, 2.315162360046586e-03, 2.315922928879543e-03, 2.315922928879543e-03, 3.404531824251946e-03, 3.405771398017011e-03, 3.440434730508921e-03, 3.444287489745560e-03, 3.436627951439577e-03, 3.436627951439577e-03, 5.071713642687587e-03, 5.080166468836150e-03, 5.029498550568307e-03, 5.679048293515378e-03, 5.484502014022231e-03, 5.484502014022231e-03, 6.194798917257495e-03, 7.107301828977447e-03, 7.830498072348011e-04, 9.975271819817277e-04, 2.604037287267864e-03, 2.604037287267860e-03, 2.135455040128809e-09, 2.887522397128269e-09, 2.196225567927783e-06, 9.997056643710404e-11, 4.861865179330036e-10, 4.861865179323718e-10, 1.622348893260985e-02, 1.640178968887889e-02, 1.623454915294981e-02, 1.639182302653329e-02, 1.631204240352524e-02, 1.631204240352524e-02, 3.524816525590095e-03, 3.619946089660393e-03, 3.210709672740049e-03, 3.280747155251978e-03, 3.739713465329938e-03, 3.739713465329938e-03, 4.030846068927822e-02, 3.787462456877818e-02, 2.772887789573666e-02, 1.603178569289147e-02, 4.439612073296972e-02, 4.439612073296972e-02, 1.146067641907678e-04, 2.051438663696270e-03, 8.579120153744238e-05, 4.233508372809961e-03, 5.421360060358009e-04, 5.421360060358013e-04, 1.665199019559832e-11, 7.457824532983538e-11, 4.746606797208781e-10, 2.141892620517456e-05, 2.754238453360899e-10, 2.754238453352904e-10, 3.369254965776602e-01, 2.420919688351186e-01, 2.806013466322156e-01, 3.140485582861502e-01, 2.974689668172356e-01, 2.974689668172356e-01, 9.019064008352622e-02, 2.745054364893653e-02, 4.935400038199056e-02, 9.518983873297579e-02, 6.752006096865862e-02, 6.752006096865862e-02, 2.704537821819883e-02, 3.800160988245206e-03, 8.211834057668602e-03, 2.765863701912809e-02, 1.646665460854084e-02, 1.646665460854086e-02, 2.741670124140628e-02, 1.850762989976001e-06, 5.912569611741512e-06, 4.314173313762467e-02, 9.515679317134416e-05, 9.515679317134048e-05, 3.517669126602426e-09, 1.706249938240502e-13, 3.055622928471220e-11, 8.178779258568474e-05, 3.232188295051616e-10, 3.232188365305771e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
