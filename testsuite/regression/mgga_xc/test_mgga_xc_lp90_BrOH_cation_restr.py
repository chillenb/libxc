
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_lp90_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.971630543115396e+01, -1.971635326687002e+01, -1.971658437744367e+01, -1.971587237171152e+01, -1.971624282304614e+01, -1.971624282304614e+01, -3.470241740178623e+00, -3.470251341843057e+00, -3.470580388066671e+00, -3.470908885630250e+00, -3.470453703363446e+00, -3.470453703363446e+00, -6.748771228543058e-01, -6.741456304129064e-01, -6.568048327311227e-01, -6.631151095909102e-01, -6.616889745264946e-01, -6.616889745264946e-01, -1.783471624916916e-01, -1.808430239751214e-01, -7.757384475726966e-01, -1.357378692050897e-01, -1.526038834968085e-01, -1.526038834968085e-01, -6.339193284875698e-02, -5.745428172995175e-02, -4.770811452886049e-02, -7.675465598104286e-02, -5.520773812081211e-02, -5.520773812081172e-02, -4.804335690297203e+00, -5.041453957932434e+00, -7.432343107688717e+00, -4.410074308741482e+00, -5.244124548130746e+00, -5.126051153547550e+00, -5.032217089358944e+00, -1.965379669613107e+00, -1.966518523017071e+00, -1.979270193612962e+00, -1.988087366723873e+00, -2.000268103245760e+00, -4.920351226224393e-01, -6.140971926326794e-01, -4.598650683647682e-01, -5.687194534545383e-01, -6.024009808830362e-01, -6.000550512332578e-01, -1.614657876379842e-01, -1.342636934429642e-01, -4.830304851749703e-01, -1.919642166619572e+00, -1.155846906643837e-01, -1.193083526963560e-01, 2.798658385150741e+00, 2.672197031102084e+03, -1.238851734089561e+03, -1.659814515885907e-01, 4.349829025620957e-01, -3.433671313070711e+01, 6.407521496251361e+02, -2.608497895922461e+02, -4.502101711247191e+03, 5.158415303315564e+00, -8.366507613920436e+01, 8.140451006923736e+03, -2.465189726821222e+03, -5.009002007637390e-01, -4.631788680678247e-01, -5.577844000434843e-01, -5.307664793440410e-01, -3.818937651927433e-01, -5.534499520634926e-01, -7.019812688258801e-01, -9.929946153665586e-01, -4.219657849604483e-01, -3.002207355712065e-01, -3.050358130426952e-01, -4.601255328471423e-01, -1.805319975258410e-01, -5.008665817053318e-02, -3.399275131958194e-01, -2.909437838693735e-01, -8.346924292519008e-02, -5.077925967385317e+00, -4.133838986022150e+00, -2.411615827618077e+01, -9.866600648795976e-02, -6.304914250599662e+00, -1.164310155918694e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_lp90_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.517065683485455e+01, -2.517072199387457e+01, -2.517102493594943e+01, -2.517005519314310e+01, -2.517056143649556e+01, -2.517056143649556e+01, -4.564227942238410e+00, -4.564241672859093e+00, -4.564660383886607e+00, -4.564694233462137e+00, -4.564311916406626e+00, -4.564311916406626e+00, -8.943292203900198e-01, -8.932473061445202e-01, -8.667491909458662e-01, -8.737636765154566e-01, -8.724142169123150e-01, -8.724142169123150e-01, -2.239883921044990e-01, -2.280179174175005e-01, -1.046683603019251e+00, -1.624706404281280e-01, -1.870646787130088e-01, -1.870646787130088e-01, 3.010663180207268e-01, 2.765523698910086e-01, 1.970561292282779e-02, 5.471497833689186e-01, 3.832866875821836e-01, 3.832866875821831e-01, -6.895407711265161e+00, -6.815983838848307e+00, -5.996743069615272e+00, -7.031795134906092e+00, -6.745847829207984e+00, -6.786227572095455e+00, -1.542341804521312e+00, -2.598719930814783e+00, -2.555670467112994e+00, -2.572568979865385e+00, -2.589388849871002e+00, -2.585288065665443e+00, -8.190137409088862e-01, -8.655821971298264e-01, -7.560816342124921e-01, -7.581188055072451e-01, -7.982922688184879e-01, -7.990766248404565e-01, -7.591181944598274e-02, -2.338487980083305e-01, 4.417108157593538e-02, -2.558468371644409e+00, -1.255519535121053e-01, -1.243100524560572e-01, -3.418202807886652e-01, -8.902562888577966e+02, 4.132111682363872e+02, -6.263585908686128e-03, 1.654572101465407e-01, 1.175620861136522e+01, -2.152182526363894e+02, 8.622486152126729e+01, 1.504212398932535e+03, -2.713872063515463e+00, 2.698371029805293e+01, -2.722614060661613e+03, 8.231710292259844e+02, -6.557584460168115e-01, -7.090943409903091e-01, -7.177150431339916e-01, -7.062366313878269e-01, -7.559943639906349e-01, -9.373528381874662e-01, -1.234732163310777e-01, -1.030929695882983e-01, -4.400116199502246e-01, -4.025552587677208e-01, -4.009477526317857e-01, -6.041007661930212e-01, 7.272825569097432e-02, -1.093958211871771e-02, -4.478263097339471e-01, -1.305045332444479e-03, -7.048882387693990e-02, 1.907092670564982e+00, 2.216588161401238e+00, 8.610845502738579e+00, -5.605598922303941e-02, 2.400401296244028e+00, 4.179823496101710e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.541568324533171e-10, -6.541493552403181e-10, -6.541138070704677e-10, -6.542251043759161e-10, -6.541671120269878e-10, -6.541671120269878e-10, -1.014792288868781e-06, -1.014783489287707e-06, -1.014480258735946e-06, -1.014233519850619e-06, -1.014683467527390e-06, -1.014683467527390e-06, -7.437012362704908e-04, -7.469929228319390e-04, -8.319908100943070e-04, -8.049084159413682e-04, -8.105745005745812e-04, -8.105745005745812e-04, -1.677266870605841e-01, -1.579370776848260e-01, -4.020522238038700e-04, -5.050269529076052e-01, -3.176021224324803e-01, -3.176021224324804e-01, -1.143150774642284e+05, -9.314210257448621e+04, -1.005166025800998e+02, -1.027560017220101e+06, -4.121444163556091e+05, -4.121444163556091e+05, -2.002082814375229e-07, -2.000603727330063e-07, -2.002009115688695e-07, -2.000703428882819e-07, -2.001335900435752e-07, -2.001335900435752e-07, -1.019480576397535e-05, -9.903588141853116e-06, -1.041418240404464e-05, -1.014936045886736e-05, -9.930590299217430e-06, -9.930590299217430e-06, -1.270791488875978e-03, -9.121776546241434e-04, -1.733952490514081e-03, -1.484818989030349e-03, -1.191981528299620e-03, -1.191981528299620e-03, -2.173973102041336e+00, -1.667114599844230e-01, -2.968016163746320e+00, -1.101544452235496e-05, -1.146138634327008e+00, -1.146138634327008e+00, -2.899448528064258e+06, -1.125079174813354e+06, -3.291080354281168e+06, -1.450598352191887e+01, -1.562557978552480e+06, -1.562557978552480e+06, -1.246388874650872e-03, -1.275424130895437e-03, -1.265111629913918e-03, -1.256695743773509e-03, -1.260899495193452e-03, -1.260899495193452e-03, -1.391322940014323e-03, -2.563259462166191e-03, -2.131519454979804e-03, -1.789467408109263e-03, -1.954818919638120e-03, -1.954818919638120e-03, -7.550143561468679e-04, -6.541057969293687e-02, -3.143789303033171e-02, -1.032374914917327e-02, -1.805423838661189e-02, -1.805423838661189e-02, -3.568772192337155e-03, -1.197741086830259e+02, -3.466732107667493e+01, -1.195446055411286e-02, -5.517791275842375e+00, -5.517791275842374e+00, -2.881455628697400e+04, -2.203693350204365e+08, -1.135174342166843e+07, -7.096326578323077e+00, -2.131485479290419e+06, -2.131485479290428e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.264695156790174e-05, 1.264691282060177e-05, 1.264672860364657e-05, 1.264730534120612e-05, 1.264700483663832e-05, 1.264700483663832e-05, 8.466685247068036e-05, 8.466666652949912e-05, 8.466025832121208e-05, 8.465504289825267e-05, 8.466455291614381e-05, 8.466455291614381e-05, 4.452460137934207e-04, 4.457391339266607e-04, 4.579423930325041e-04, 4.541599533691275e-04, 4.549591116900226e-04, 4.549591116900226e-04, 1.728736701593672e-03, 1.702922816980106e-03, 3.816242761598568e-04, 2.277594709595485e-03, 2.028111013319541e-03, 2.028111013319541e-03, 4.970302417918278e-02, 4.722184121728022e-02, 8.557916859327561e-03, 8.606230667455105e-02, 6.848919285487624e-02, 6.848919285487624e-02, 5.606205831907257e-05, 5.605150077240937e-05, 5.606153240510047e-05, 5.605221261408726e-05, 5.605672766773350e-05, 5.605672766773350e-05, 1.516053463862180e-04, 1.505027671936188e-04, 1.524204302580649e-04, 1.514348547794349e-04, 1.506060150279852e-04, 1.506060150279852e-04, 5.092237423495495e-04, 4.686252718550430e-04, 5.504555323271195e-04, 5.294752359413667e-04, 5.011199873644127e-04, 5.011199873644127e-04, 3.281167035375734e-03, 1.726113048461514e-03, 3.546849462434591e-03, 1.545902418816406e-04, 2.795745813167958e-03, 2.795745813167958e-03, 1.115427531846991e-01, 8.803534779562261e-02, 1.151323237413502e-01, 5.274230172927461e-03, 9.556982604011045e-02, 9.556982604011045e-02, 5.067557959413530e-04, 5.096882403885656e-04, 5.086525074402299e-04, 5.078025578425939e-04, 5.082276411526812e-04, 5.082276411526812e-04, 5.209174314026955e-04, 6.070788315264039e-04, 5.796697674653842e-04, 5.548185471273855e-04, 5.672391759558902e-04, 5.672391759558902e-04, 4.469340183071958e-04, 1.365883785750512e-03, 1.137081944339143e-03, 8.604926537727030e-04, 9.897101927937679e-04, 9.897101927937679e-04, 6.595407844950138e-04, 8.941324407229716e-03, 6.557992070047187e-03, 8.926703830516899e-04, 4.141786624513636e-03, 4.141786624513635e-03, 3.521727791076647e-02, 3.293466588397041e-01, 1.569023490827754e-01, 4.410747045782003e-03, 1.032839277949216e-01, 1.032839277949217e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
