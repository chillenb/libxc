
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_lp90_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.958937226713815e+01, -1.958941863969179e+01, -1.958964460753549e+01, -1.958895428613271e+01, -1.958931318369885e+01, -1.958931318369885e+01, -3.482770231137090e+00, -3.482772761871842e+00, -3.482915158185206e+00, "nan", -3.482855752376246e+00, 2.631535227400641e+155, -6.845453526014236e-01, 8.209898157022934e+244, 1.703490780340469e+158, 9.463096175005065e+210, 4.136619344060526e+157, 9.529710839180372e+210, 2.937772491993341e+96, 2.070444155146115e+213, -7.967692216556680e-01, 3.149034526178060e+228, 4.517721894298445e+213, 3.748763694382111e+242, 1.427697668039582e+174, 9.081590505771268e+204, 9.086980093612377e+225, 4.957022927555812e+234, 1.755494160289212e+276, 1.467068251368039e+186, 6.059503502583973e+167, 1.218798792528523e+241, 7.972411972369826e+202, -5.153477125034064e+00, 7.254100014825936e+221, 1.008142086366461e+174, -1.994623746258805e+00, -2.008182908782914e+00, -1.985939009021721e+00, -1.997906631092813e+00, -2.006333125774921e+00, 3.123576106529367e+156, 5.015243141690814e+177, 6.327114212749847e+215, 9.644351244526181e+177, 1.028382058333779e+216, 4.704215630518961e+177, -6.049103957752000e-01, -1.165755724523097e-01, 1.468146372040032e+199, -1.109896639839377e-01, 8.745004601442355e+63, 6.461272122973086e+160, 1.474226632065299e+248, -5.983314841500041e-01, 3.223696741953386e+167, 1.590401285978201e+283, -9.169514793795028e-02, -3.189187928348073e-01, 3.189752701192476e+167, 2.176113715934379e+235, 2.443336559165991e+224, -5.935684981337306e-01, 5.004293562627923e+206, 5.973969680170340e+161, 1.443609655427669e+240, 1.061387460493012e+226, 6.647696338352867e+158, 1.267753245085868e+226, 1.979865781948884e+197, 7.003162805687083e+243, -5.349438352155298e-01, 4.520552218288467e+244, -2.332492319401930e-01, 2.284299566248922e+222, -3.559281469071032e-01, 7.651747676433939e+173, 4.367550157031127e+196, -4.631368847798479e-01, 5.499232284997888e+254, 1.598533311454269e+254, 9.002266775350802e+250, -9.686443172696081e-02, 1.294266308733435e+252, 6.766836874986391e+255, 1.088938017337257e+266, 2.041102768441010e+51, 3.031946029311600e+181, 1.929591672606754e+230, 5.004376753419633e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_lp90_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.521713856156882e+01, -2.521720426687015e+01, -2.521750914201662e+01, -2.521653130255963e+01, -2.521704185809556e+01, -2.521704185809556e+01, -4.559978729949111e+00, -4.559994858619303e+00, -4.560476869310479e+00, "nan", -4.560105586768627e+00, -8.925222444315515e+154, -8.910954484545147e-01, -2.745987575947376e+244, -5.697199387241862e+157, -3.164949625681801e+210, -1.383491746149207e+157, -3.187210422956858e+210, -9.801250061501444e+95, -6.907686941899354e+212, -1.039645387210574e+00, -1.050384283000431e+228, -1.507044731206573e+213, -1.250531729561978e+242, -4.759139113009463e+173, -3.027295178648727e+204, -3.029536177543206e+225, -1.652370430026974e+234, -5.851778273676272e+275, -4.890337042158766e+185, -2.072275768085840e+167, -4.168161025362529e+240, -2.726467582704550e+202, -6.777559430175685e+00, -2.480818769653263e+221, -3.447729980595434e+173, -2.564917001763318e+00, -2.584309635210685e+00, -2.549133092836764e+00, -2.566295142923956e+00, -2.583246206493032e+00, -1.051587606340647e+156, -1.676754195585868e+177, -2.115897763619791e+215, -3.223694090480746e+177, -3.437815654439707e+215, -1.572843353928128e+177, -7.974532518929494e-01, -9.088221442306507e-02, -4.898163177385798e+198, -7.989612079653953e-02, -2.943370134597932e+63, -2.154937962692653e+160, -4.916782445603375e+247, 7.905252494719301e-01, -1.074584306277805e+167, -5.301408260185071e+282, -3.103288578329471e-02, 4.167618092648033e-01, -1.063267968163351e+167, -7.275540666413150e+234, -8.168823783058465e+223, -7.889758371584977e-01, -1.673107302750764e+206, -1.997298378388088e+161, -4.826471137578415e+239, -3.548317076104684e+225, -2.221470556199852e+158, -4.236969629114651e+225, -6.617701379541063e+196, -2.340667356310653e+243, -7.048404335847219e-01, -1.511988053708203e+244, -2.798923307119249e-01, -7.624577693746986e+221, -4.620632729479228e-01, -2.554524078444794e+173, -1.458099837023250e+196, -6.030946580832877e-01, -1.833391845041080e+254, -5.329690325713841e+253, -3.005895154822305e+250, -6.602210824327216e-02, -4.315817896187304e+251, -2.255710544813284e+255, -3.629810299436199e+265, -6.803742419259738e+50, -1.010999963175083e+181, -6.432067779587999e+229, -1.668150362045508e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.541568324533171e-10, -6.541493552403181e-10, -6.541138070704677e-10, -6.542251043759161e-10, -6.541671120269878e-10, -6.541671120269878e-10, -1.014792288868781e-06, -1.014783489287707e-06, -1.014480258735946e-06, -1.014233519850619e-06, -1.014683467527390e-06, -1.014683467527390e-06, -7.437012362704908e-04, -7.469929228319390e-04, -8.319908100943070e-04, -8.049084159413682e-04, -8.105745005745812e-04, -8.105745005745812e-04, -1.677266870605841e-01, -1.579370776848260e-01, -4.020522238038700e-04, -5.050269529076052e-01, -3.176021224324803e-01, -3.176021224324804e-01, -1.143150774642284e+05, -9.314210257448621e+04, -1.005166025800998e+02, -1.027560017220101e+06, -4.121444163556091e+05, -4.121444163556091e+05, -2.002082814375229e-07, -2.000603727330063e-07, -2.002009115688695e-07, -2.000703428882819e-07, -2.001335900435752e-07, -2.001335900435752e-07, -1.019480576397535e-05, -9.903588141853116e-06, -1.041418240404464e-05, -1.014936045886736e-05, -9.930590299217430e-06, -9.930590299217430e-06, -1.270791488875978e-03, -9.121776546241434e-04, -1.733952490514081e-03, -1.484818989030349e-03, -1.191981528299620e-03, -1.191981528299620e-03, -2.173973102041336e+00, -1.667114599844230e-01, -2.968016163746320e+00, -1.101544452235496e-05, -1.146138634327008e+00, -1.146138634327008e+00, -2.899448528064258e+06, -1.125079174813354e+06, -3.291080354281168e+06, -1.450598352191887e+01, -1.562557978552480e+06, -1.562557978552480e+06, -1.246388874650872e-03, -1.275424130895437e-03, -1.265111629913918e-03, -1.256695743773509e-03, -1.260899495193452e-03, -1.260899495193452e-03, -1.391322940014323e-03, -2.563259462166191e-03, -2.131519454979804e-03, -1.789467408109263e-03, -1.954818919638120e-03, -1.954818919638120e-03, -7.550143561468679e-04, -6.541057969293687e-02, -3.143789303033171e-02, -1.032374914917327e-02, -1.805423838661189e-02, -1.805423838661189e-02, -3.568772192337155e-03, -1.197741086830259e+02, -3.466732107667493e+01, -1.195446055411286e-02, -5.517791275842375e+00, -5.517791275842374e+00, -2.881455628697400e+04, -2.203693350204365e+08, -1.135174342166843e+07, -7.096326578323077e+00, -2.131485479290419e+06, -2.131485479290428e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.264695156790174e-05, 1.264691282060177e-05, 1.264672860364657e-05, 1.264730534120612e-05, 1.264700483663832e-05, 1.264700483663832e-05, 8.466685247068036e-05, 8.466666652949912e-05, 8.466025832121208e-05, 8.465504289825267e-05, 8.466455291614381e-05, 8.466455291614381e-05, 4.452460137934207e-04, 4.457391339266607e-04, 4.579423930325041e-04, 4.541599533691275e-04, 4.549591116900226e-04, 4.549591116900226e-04, 1.728736701593672e-03, 1.702922816980106e-03, 3.816242761598568e-04, 2.277594709595485e-03, 2.028111013319541e-03, 2.028111013319541e-03, 4.970302417918278e-02, 4.722184121728022e-02, 8.557916859327561e-03, 8.606230667455105e-02, 6.848919285487624e-02, 6.848919285487624e-02, 5.606205831907257e-05, 5.605150077240937e-05, 5.606153240510047e-05, 5.605221261408726e-05, 5.605672766773350e-05, 5.605672766773350e-05, 1.516053463862180e-04, 1.505027671936188e-04, 1.524204302580649e-04, 1.514348547794349e-04, 1.506060150279852e-04, 1.506060150279852e-04, 5.092237423495495e-04, 4.686252718550430e-04, 5.504555323271195e-04, 5.294752359413667e-04, 5.011199873644127e-04, 5.011199873644127e-04, 3.281167035375734e-03, 1.726113048461514e-03, 3.546849462434591e-03, 1.545902418816406e-04, 2.795745813167958e-03, 2.795745813167958e-03, 1.115427531846991e-01, 8.803534779562261e-02, 1.151323237413502e-01, 5.274230172927461e-03, 9.556982604011045e-02, 9.556982604011045e-02, 5.067557959413530e-04, 5.096882403885656e-04, 5.086525074402299e-04, 5.078025578425939e-04, 5.082276411526812e-04, 5.082276411526812e-04, 5.209174314026955e-04, 6.070788315264039e-04, 5.796697674653842e-04, 5.548185471273855e-04, 5.672391759558902e-04, 5.672391759558902e-04, 4.469340183071958e-04, 1.365883785750512e-03, 1.137081944339143e-03, 8.604926537727030e-04, 9.897101927937679e-04, 9.897101927937679e-04, 6.595407844950138e-04, 8.941324407229716e-03, 6.557992070047187e-03, 8.926703830516899e-04, 4.141786624513636e-03, 4.141786624513635e-03, 3.521727791076647e-02, 3.293466588397041e-01, 1.569023490827754e-01, 4.410747045782003e-03, 1.032839277949216e-01, 1.032839277949217e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
