
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.178160686304987e+01, -2.178163902083812e+01, -2.178183536935935e+01, -2.178135521103824e+01, -2.178159922109187e+01, -2.178159922109187e+01, -3.424850544520945e+00, -3.424850350828443e+00, -3.425039494467965e+00, -3.426351109160354e+00, -3.425399914681026e+00, -3.425399914681026e+00, -6.935742674597327e-01, -6.931185071800245e-01, -6.837488657016219e-01, -6.900804735581980e-01, -6.882083034786702e-01, -6.882083034786702e-01, -2.205311111398585e-01, -2.212490314513433e-01, -7.940690486863041e-01, -1.503801026650043e-01, -1.744801416911884e-01, -1.744801416911884e-01, -3.780145094017476e-03, -3.980415695079314e-03, -2.452473647290824e-02, -2.176591024621488e-03, -2.737798132996213e-03, -2.737798132996213e-03, -5.288245500910309e+00, -5.287976979799555e+00, -5.288242132343015e+00, -5.288004953503189e+00, -5.288104322890705e+00, -5.288104322890705e+00, -2.202427901345671e+00, -2.216260603661582e+00, -2.203619821123009e+00, -2.212789886326251e+00, -2.210232280571823e+00, -2.210232280571823e+00, -6.365700632192324e-01, -6.882848407663132e-01, -5.700731304430728e-01, -5.887466559956368e-01, -6.479865198058263e-01, -6.479865198058263e-01, -9.123512232501728e-02, -2.105653109075819e-01, -8.214100085938794e-02, -1.904623482816388e+00, -1.194703649534068e-01, -1.194703649534068e-01, -1.678703410445917e-03, -2.127910479347401e-03, -1.628111625964067e-03, -4.768880024081722e-02, -1.961331027641864e-03, -1.961331027641865e-03, -6.344436731395185e-01, -6.322007579021170e-01, -6.329330348973602e-01, -6.335789772479601e-01, -6.332504134325450e-01, -6.332504134325450e-01, -6.191161006187985e-01, -5.544773332965226e-01, -5.713597009529530e-01, -5.889126577923559e-01, -5.798399248899307e-01, -5.798399248899307e-01, -7.143361509374634e-01, -2.802246348347445e-01, -3.185642172973986e-01, -3.805929195219356e-01, -3.494457834484352e-01, -3.494457834484352e-01, -5.094074102133126e-01, -2.317369046937353e-02, -3.431892645578130e-02, -3.703935109846598e-01, -6.948317600696341e-02, -6.948317600696344e-02, -5.350926207477739e-03, -5.681692953367280e-04, -1.193129138755938e-03, -6.396533766129586e-02, -1.814712396960039e-03, -1.814712396960040e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.679850855770452e+01, -2.679858516426739e+01, -2.679882590079740e+01, -2.679768161559630e+01, -2.679829547438256e+01, -2.679829547438256e+01, -4.274429374261549e+00, -4.274656704488356e+00, -4.280938487494198e+00, -4.279914677957738e+00, -4.279100037125638e+00, -4.279100037125638e+00, -8.612044251916229e-01, -8.596130059137035e-01, -8.220939527245991e-01, -8.297259559361254e-01, -8.286819372526278e-01, -8.286819372526278e-01, -1.257625662468491e-01, -1.151350586083204e-01, -9.837617315097509e-01, -2.223197092335372e-01, -2.292553575596897e-01, -2.292553575596898e-01, -4.865467939157768e-03, -5.309892908379754e-03, -3.978758151436587e-02, -2.909558854055417e-03, -3.667049306420175e-03, -3.667049306420164e-03, -6.626140326130126e+00, -6.628698076311964e+00, -6.626191446747902e+00, -6.628452802292179e+00, -6.627470301714488e+00, -6.627470301714488e+00, -2.231529372867127e+00, -2.427003995286205e+00, -2.344078269385987e+00, -2.524527496030239e+00, -2.294591159998843e+00, -2.294591159998843e+00, -8.152796755964433e-01, -9.234716516482158e-01, -7.546082559108775e-01, -8.257908942373015e-01, -8.325011387278530e-01, -8.325011387278530e-01, -1.620798683795228e-01, -5.778941638803435e-03, -1.495587424635353e-01, -2.747182681999322e+00, -1.700202025099353e-01, -1.700202025099352e-01, -2.242186408484111e-03, -2.844757296322907e-03, -2.179291391683292e-03, -8.934358834703128e-02, -2.625218797162240e-03, -2.625218797162242e-03, -8.308830751835312e-01, -8.252513456209158e-01, -8.273785649987148e-01, -8.290258687339428e-01, -8.282156457243962e-01, -8.282156457243962e-01, -8.082607291067764e-01, -6.987072502903527e-01, -7.281577883198710e-01, -7.601180502919014e-01, -7.435595363294417e-01, -7.435595363294417e-01, -9.880326238250347e-01, -1.795999589826768e-01, -1.994877244676897e-01, -4.603552272569721e-01, -3.154709657603276e-01, -3.154709657603276e-01, -5.612763047132281e-01, -3.523086970651509e-02, -6.027185019694884e-02, -4.660487555307428e-01, -1.246068335525032e-01, -1.246068335525032e-01, -7.239641372611301e-03, -7.578764051118815e-04, -1.592881811160456e-03, -1.018027079290251e-01, -2.428615036680763e-03, -2.428615036680754e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.395867976015928e-09, -4.395953717629290e-09, -4.397081806044807e-09, -4.395844996091649e-09, -4.396386060572358e-09, -4.396386060572358e-09, -7.194086970218441e-06, -7.200305589059490e-06, -7.379437681425597e-06, -7.415635113985256e-06, -7.367203218054134e-06, -7.367203218054134e-06, -3.014846182166093e-03, -3.033698281530368e-03, -3.450481149156069e-03, -3.496474231774713e-03, -3.469962247245227e-03, -3.469962247245227e-03, -3.358705556189459e+00, -3.677936472950489e+00, -1.376534972864573e-03, -1.169677348518312e-01, -3.937643520225632e-01, -3.937643520225621e-01, -8.016610594684370e+01, -1.021191604598268e+01, 3.920593618648338e+00, 5.428032951894247e+00, 6.853265102528389e+00, 6.853265102524987e+00, -1.619962418006606e-06, -1.619885714219456e-06, -1.620657093779508e-06, -1.620556831896500e-06, -1.619569051664583e-06, -1.619569051664583e-06, -1.297698890744899e-04, -6.001597116634764e-05, -7.964939100667898e-05, -1.992310300930254e-05, -1.117813931923436e-04, -1.117813931923436e-04, -2.154321640861260e-02, -2.602667040222490e-03, -1.773143887369437e-02, -1.043756204825078e-02, -1.787842717399955e-02, -1.787842717399955e-02, 8.826652932254075e-01, -3.884445314437994e+00, 1.344846721765447e+00, -1.340424336387355e-04, -1.466275686211985e+00, -1.466275686211995e+00, 7.147231125012107e+00, 6.398985278558493e+00, 4.027256819399213e+01, 3.774326360022894e+00, 1.876056823047730e+01, 1.876056823047675e+01, 1.643598800399446e-03, 4.048655795753503e-04, 7.803932906770110e-04, 1.138622697189404e-03, 9.555810022612021e-04, 9.555810022612021e-04, 5.909316488046917e-03, 4.200804048293190e-03, 2.793678222684735e-03, 2.260531672594776e-03, 2.537414332695428e-03, 2.537414332695396e-03, -4.973671006597119e-03, -1.035254070626207e+00, -8.101849408754888e-01, -1.340089725600254e-01, -4.393149651601881e-01, -4.393149651601877e-01, -8.128448413299434e-02, 5.574404320015510e-01, 3.546359147081842e+00, -1.882010575003479e-01, 1.568891578281024e+00, 1.568891578281019e+00, 4.962217914042813e+00, 3.121383558998583e+01, 1.506623894880176e+01, -2.433337979893426e+00, 2.367821950629931e+01, 2.367821950626611e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.875552139206332e-04, -2.875387489480559e-04, -2.873361601015352e-04, -2.875752327655594e-04, -2.874684930346862e-04, -2.874684930346862e-04, 1.286694721277302e-03, 1.291017163251995e-03, 1.415252226412748e-03, 1.436499483568454e-03, 1.403732097656767e-03, 1.403732097656767e-03, 2.853549568766118e-03, 2.848095292299702e-03, 2.838206486508522e-03, 3.359812748363775e-03, 3.192000547791958e-03, 3.192000547791958e-03, 2.625572137558150e-01, 3.013993501430188e-01, 3.586232569057592e-04, 1.954814238576066e-02, 2.560279569893836e-02, 2.560279569893832e-02, 2.999429405076600e-04, 6.748801203483544e-05, 3.240273122083332e-04, 5.476931879674265e-09, 1.197248659909166e-07, 1.197248660047388e-07, -7.792955359512675e-05, -7.683311846009662e-05, -7.629825780631080e-05, -7.540352129356208e-05, -7.818322900299790e-05, -7.818322900299790e-05, 8.134472531721108e-03, 7.935173006863600e-05, 2.231017023259929e-03, -4.642334599500692e-03, 6.209101869245715e-03, 6.209101869245715e-03, 5.889396357542448e-02, 1.905666290258602e-02, 3.752604590350032e-02, 3.650207327605724e-02, 4.997758680341301e-02, 4.997758680341301e-02, 7.893723284237687e-03, 3.246561013374739e-01, 5.200053672249527e-03, 1.544273566945929e-02, 4.846712187016685e-02, 4.846712187016701e-02, 2.489242169783030e-11, 4.417663413018140e-10, 1.659499429032412e-08, 1.290888669188068e-03, 2.217908940663755e-09, 2.217908938806226e-09, -1.172543615454901e-02, -1.130856081028409e-02, -1.141164666117360e-02, -1.153377502578746e-02, -1.147413940424790e-02, -1.147413940424790e-02, -2.227710389071424e-02, -2.797021637145942e-02, -2.451863699654841e-02, -2.107241527228329e-02, -2.314623655223490e-02, -2.314623655223482e-02, 3.670840573034793e-02, 1.600944833641663e-01, 2.126673711761847e-01, 7.171162447972500e-02, 1.655979022055585e-01, 1.655979022055583e-01, 9.762311844855592e-02, 2.045474824508820e-03, 5.799495029051873e-04, 9.871327334879196e-02, 1.029955065107610e-02, 1.029955065107605e-02, 2.399082412501581e-08, 4.154868228004543e-14, 8.553696296636969e-09, 3.028464001537422e-02, 5.900394535057976e-09, 5.900394531884115e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
