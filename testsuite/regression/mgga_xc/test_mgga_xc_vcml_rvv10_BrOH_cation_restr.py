
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_zk() not generated due to NaN in reference data

# test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_vrho() not generated due to NaN in reference data

# test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_vsigma() not generated due to NaN in reference data


def test_mgga_xc_vcml_rvv10_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.748787391157768e-03, 1.748709502948805e-03, 1.748390859944188e-03, 1.749543194683490e-03, 1.748936181990894e-03, 1.748936181990894e-03, 8.544294527144407e-04, 8.542564551402953e-04, 8.493541740590896e-04, 8.513344880537927e-04, 8.512155788433342e-04, 3.730377395403897e-17, 1.238211907772410e-03, 1.694351672384755e-16, 6.079658576991510e-17, -3.568647910106051e-18, 8.235376852122534e-17, 8.235376852122534e-17, -7.712432167856244e-17, 1.153108227475868e-16, 2.274304662788962e-04, 2.024065958298920e-15, 1.319091299920307e-15, 7.647934756142476e-17, 3.758759873967634e-12, -5.205231321294231e-13, 1.650108878985718e-13, 1.979535380380167e-11, -3.834362422573967e-12, -3.834362422573967e-12, 2.162371755735352e-18, -2.473095954544158e-19, 1.240914587939425e-19, 8.321142521273117e-04, 1.975783529925263e-18, 1.975783529925263e-18, 1.387904688974081e-03, 1.446001916755792e-03, 1.333485589121057e-03, 1.394845509749925e-03, 1.443462341316735e-03, -2.102522076707696e-18, -4.539655835067232e-17, -2.745167450141265e-17, 1.142537472469489e-16, -7.238268700162736e-17, -4.897208624677952e-17, 1.255106804355840e-02, 1.244654246814343e-05, 6.759012364059141e-16, 8.850315947027828e-06, 4.175343295349370e-18, 1.171379065273697e-15, 5.001936758860800e-16, 3.300834947353297e-13, -1.023883475747608e-11, 9.811482279816984e-12, 1.717234005546474e-06, 5.642916680157184e-12, 3.838105904094345e-11, 1.916017822788187e-18, -8.863813910811253e-18, -3.108936188208167e-02, 1.808072726684040e-20, -2.010530760202513e-18, -2.010530760202513e-18, 4.405919621199819e-18, 1.160491253223475e-17, -1.734137679308591e-17, 1.914319280955349e-17, -2.008579492926640e-17, 6.802885157107308e-02, -2.059991642003355e-19, 8.970638973734841e-04, -3.464563767923179e-16, 7.598489183078884e-03, 6.013907393560561e-17, -1.095341697776016e-16, 6.213549443758105e-03, 4.121703869698239e-13, -2.558877224068600e-13, -8.629630018484365e-17, 9.165162299786633e-06, 2.053720154904377e-14, -4.738165668181287e-12, 9.807442566042819e-11, -2.635871242118722e-12, 1.415759187936925e-14, -7.637567548182568e-12, 2.260917457771641e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
