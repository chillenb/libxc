
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_vcml_rvv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.178160689421223e+01, -2.178163905171483e+01, -2.178183540300465e+01, -2.178135524159891e+01, -2.178159926519042e+01, -2.178159926519042e+01, -3.424850733690692e+00, -3.424850608833126e+00, -3.425039592537958e+00, -3.426351233910698e+00, -3.425422605186805e+00, -3.425422605186805e+00, -6.935837989863163e-01, -6.931321848189169e-01, -6.837706315785523e-01, -6.900827860882561e-01, -6.902441998801800e-01, -6.902441998801800e-01, -2.184377164354903e-01, -2.195912911407162e-01, -7.945328620165666e-01, -1.507611032763804e-01, -1.947245454076990e-01, -1.947245454076988e-01, -3.787928699869555e-03, -3.990084995873305e-03, -2.457662172546966e-02, -2.176900059830734e-03, -3.043530992315996e-03, -3.043530992315996e-03, -5.288245647567328e+00, -5.287977135563956e+00, -5.288242283359477e+00, -5.288005099317456e+00, -5.288104481393095e+00, -5.288104481393095e+00, -2.202398604750685e+00, -2.216244366617297e+00, -2.203620148369008e+00, -2.212789475097452e+00, -2.209993264200610e+00, -2.209993264200610e+00, -6.365744446075047e-01, -6.882712879187111e-01, -5.713774646623290e-01, -5.896784419526505e-01, -6.482006211118606e-01, -6.482006211118606e-01, -9.124371990344793e-02, -2.105864338467265e-01, -8.232611217653546e-02, -1.904623740475055e+00, -1.198014106890726e-01, -1.198014106890726e-01, -1.679946594154887e-03, -2.128149877556077e-03, -1.630805685963075e-03, -4.771002458836447e-02, -2.049069708852579e-03, -2.049069708852577e-03, -6.344474264611250e-01, -6.322045568781740e-01, -6.329368516760656e-01, -6.335827120936405e-01, -6.332541895391001e-01, -6.332541895391001e-01, -6.191191210437564e-01, -5.544811376985399e-01, -5.713639748369145e-01, -5.889153804783847e-01, -5.798431767319649e-01, -5.798431767319649e-01, -7.142989418235360e-01, -2.802280600348751e-01, -3.185780207452274e-01, -3.806012616230735e-01, -3.494588131374941e-01, -3.494588131374942e-01, -5.093869419182048e-01, -2.317603083027363e-02, -3.434912548111394e-02, -3.711344607175934e-01, -6.967781512658802e-02, -6.967781512658804e-02, -5.354405407878051e-03, -5.681726345324902e-04, -1.195391102164732e-03, -6.442368117578108e-02, -1.881330321565674e-03, -1.881330321565668e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_vcml_rvv10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.679891268420786e+01, -2.679810405292411e+01, -2.679900115034471e+01, -2.679816879660849e+01, -2.679918888351797e+01, -2.679846253638771e+01, -2.679817987758799e+01, -2.679718293327013e+01, -2.679896296733680e+01, -2.679762728474208e+01, -2.679896296733680e+01, -2.679762728474208e+01, -4.274715371359703e+00, -4.274144236335570e+00, -4.275009469305544e+00, -4.274305178498090e+00, -4.280477617503943e+00, -4.281400336042047e+00, -4.280036669042618e+00, -4.279793013563459e+00, -4.273466149568276e+00, -4.284900091895408e+00, -4.273466149568276e+00, -4.284900091895408e+00, -8.588064990209344e-01, -8.636166364510840e-01, -8.567152360896099e-01, -8.625328887527266e-01, -8.252300880767359e-01, -8.190308895514292e-01, -8.286449753839241e-01, -8.308165985947331e-01, -8.627646882969201e-01, -8.027847574050425e-01, -8.627646882969201e-01, -8.027847574050425e-01, -8.225919496721880e-02, -2.490555090026783e-01, -1.181565398864646e-01, -2.356110765078979e-01, -9.654266165804722e-01, -1.001935690411370e+00, -2.263438944773250e-01, -2.131882967538990e-01, -1.064957803614943e-01, -1.921580594734678e-01, -1.064957803614939e-01, -1.921580594734678e-01, -4.858749481291466e-03, -4.189769843229480e-03, -5.144256004175037e-03, -5.402892544190312e-03, -3.814676378681726e-02, -4.134419861464594e-02, -2.934062747317338e-03, -2.884645606052151e-03, -4.375623214166561e-03, -2.479683418934838e-03, -4.375623214166573e-03, -2.479683418934831e-03, -6.627020847575329e+00, -6.625259448422307e+00, -6.629618201950180e+00, -6.627777541502816e+00, -6.627088335787779e+00, -6.625294191528657e+00, -6.629325600551984e+00, -6.627579668389830e+00, -6.628405751038322e+00, -6.626534388102706e+00, -6.628405751038322e+00, -6.626534388102706e+00, -2.213041663975231e+00, -2.250245187553898e+00, -2.413268511848434e+00, -2.440624724603446e+00, -2.348366214439787e+00, -2.340214852153895e+00, -2.527761176926292e+00, -2.521568924899411e+00, -2.251130101535148e+00, -2.344172594065724e+00, -2.251130101535148e+00, -2.344172594065724e+00, -8.172860754707370e-01, -8.132190181514896e-01, -9.251408485037272e-01, -9.217905818850486e-01, -7.293379322409405e-01, -7.738671711211371e-01, -7.942129566845321e-01, -8.524571298998477e-01, -8.435531830887487e-01, -8.226307422258932e-01, -8.435531830887487e-01, -8.226307422258931e-01, -1.604981274167374e-01, -1.635219733402703e-01, 9.453277633900366e-03, -2.157886266625186e-02, -1.458519447427555e-01, -1.524899773743898e-01, -2.747516959240514e+00, -2.746848660776571e+00, -1.726703574204697e-01, -1.721648060646586e-01, -1.726703574204696e-01, -1.721648060646587e-01, -2.198217938363499e-03, -2.284509530588876e-03, -2.823286861463621e-03, -2.865904405974320e-03, -2.114021148075556e-03, -2.241020069475100e-03, -8.950168125176909e-02, -8.847832493447293e-02, -2.156099111636144e-03, -2.969820167628366e-03, -2.156099111636141e-03, -2.969820167628372e-03, -8.296072741436678e-01, -8.321536906309879e-01, -8.239674112237846e-01, -8.265301747609504e-01, -8.260866053948357e-01, -8.286653319165204e-01, -8.277564269520091e-01, -8.302902043078764e-01, -8.269352035113150e-01, -8.294909339401978e-01, -8.269352035113150e-01, -8.294909339401978e-01, -8.071872518590094e-01, -8.093300779530150e-01, -6.978756724625426e-01, -6.995388762077912e-01, -7.270637812820598e-01, -7.292496702125602e-01, -7.590938885725760e-01, -7.611383702997769e-01, -7.425652774846041e-01, -7.445435090327172e-01, -7.425652774846041e-01, -7.445435090327173e-01, -9.905106119669345e-01, -9.852805107520479e-01, -1.802927898809224e-01, -1.789807840573182e-01, -1.958040222839247e-01, -2.031697390026910e-01, -4.586703123224654e-01, -4.619897382025452e-01, -3.148232857600836e-01, -3.160229080118337e-01, -3.148232857600834e-01, -3.160229080118339e-01, -5.576786712441519e-01, -5.662279508445450e-01, -3.438221452925141e-02, -3.585017184031643e-02, -5.856295678594303e-02, -6.192829881353398e-02, -4.661508039031843e-01, -4.604399791682847e-01, -1.204468946593859e-01, -1.273696395341053e-01, -1.204468946593859e-01, -1.273696395341053e-01, -7.102001193586616e-03, -7.372747356740365e-03, -7.569478086673087e-04, -7.588174328539796e-04, -1.542108293569872e-03, -1.640643697078018e-03, -1.117439692711580e-01, -6.678927128207938e-02, -2.044603655106082e-03, -2.719563474071722e-03, -2.044603655106069e-03, -2.719563474071707e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_vcml_rvv10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.978158545314711e-09, 3.856112941585163e-10, -8.990928155081255e-09, -8.978362911243460e-09, 3.856182895116018e-10, -8.991073787196721e-09, -8.980376762191177e-09, 3.856279318961423e-10, -8.993581869881026e-09, -8.978171189656865e-09, 3.855243181079531e-10, -8.990737012676721e-09, -8.978277669626233e-09, 3.855816526201237e-10, -8.992854412963318e-09, -8.978277669626233e-09, 3.855816526201237e-10, -8.992854412963318e-09, -1.549814385480052e-05, 2.160233976884817e-06, -1.543858807833861e-05, -1.551626384951924e-05, 2.160677015644511e-06, -1.544584193048646e-05, -1.582280012954984e-05, 2.170694093058170e-06, -1.586571181048034e-05, -1.593136500762009e-05, 2.151318417126814e-06, -1.588258729504934e-05, -1.547264746508744e-05, 2.160509657897877e-06, -1.617381414629214e-05, -1.547264746508744e-05, 2.160509657897877e-06, -1.617381414629214e-05, -7.831501378207562e-03, 3.591083552021092e-03, -7.817354066334093e-03, -7.861171560451042e-03, 3.565229456371108e-03, -7.836673982280084e-03, -8.313598636829532e-03, 2.909096126952945e-03, -8.396075964913624e-03, -8.396426279173860e-03, 2.841903041663776e-03, -8.430242783841193e-03, -7.994150503943660e-03, 2.883457828844585e-03, -8.540792533197929e-03, -7.994150503943660e-03, 2.883457828844585e-03, -8.540792533197929e-03, -9.399220859231166e+00, 3.530170984623534e-01, -1.238782765481400e+00, -7.859862828071750e+00, 3.686881815010307e-01, -1.977502251316969e+00, -3.875348866944969e-03, 1.939956097792031e-03, -3.574190342133915e-03, 1.775839564777408e-01, 2.922153880476267e-01, -1.298095220747619e+00, -6.507284382740840e+00, 2.343187689373990e-01, 2.853590514616391e+00, -6.507284382740853e+00, 2.343187689373998e-01, 2.853590514616388e+00, -4.059065348252386e+01, 2.425926921596538e-02, -7.492404699230624e+02, -5.919563541286075e-01, 2.839797629439142e-02, -7.509880132181988e+01, 8.011821054545100e+00, 1.065487629165165e-01, 7.473034765133119e+00, 1.100241320458432e+01, 8.966786182941500e-03, 1.069281499998301e+01, 1.066963409270679e+01, 1.297003296830742e-02, 3.048820830398807e+01, 1.066963409272559e+01, 1.297003296941601e-02, 3.048820830394085e+01, -3.519371778433289e-06, 5.664105607861941e-07, -3.526894469121383e-06, -3.521153209641593e-06, 5.701483482484122e-07, -3.528544052328325e-06, -3.521099003991322e-06, 5.665597628321588e-07, -3.528094672322781e-06, -3.522514701149887e-06, 5.698591223572488e-07, -3.529577268152283e-06, -3.519084474017432e-06, 5.683117859616974e-07, -3.527510736010380e-06, -3.519084474017432e-06, 5.683117859616974e-07, -3.527510736010380e-06, -2.805167928942318e-04, 1.231901826026095e-05, -2.507998603158701e-04, -1.365780381547428e-04, 1.228524327553522e-05, -1.159040886048090e-04, -1.603440736289590e-04, 1.172193969582633e-05, -1.697423108202074e-04, -4.244467085936134e-05, 1.169652560135223e-05, -4.880254642952300e-05, -2.714575168139885e-04, 1.259919211288212e-05, -1.856520655475010e-04, -2.714575168139885e-04, 1.259919211288212e-05, -1.856520655475010e-04, -4.866544763010623e-02, 1.157134361689888e-02, -4.893046908626424e-02, -1.296904749884908e-02, 1.432515213263913e-02, -1.176234838801481e-02, -3.107546436356661e-02, 1.506508841924712e-02, -4.832965498305586e-02, -2.429668379683806e-02, 2.187402841000388e-02, -3.638392078021509e-02, -3.139039730246677e-02, 1.153490606978080e-02, -4.891074368416059e-02, -3.139039730246675e-02, 1.153490606978081e-02, -4.891074368416060e-02, 1.524374581797981e+00, 1.906023233752834e-01, 1.786917799545070e+00, -8.293702706641328e+00, 1.377434372791274e-01, -7.369642237786228e+00, 3.119752105056150e+00, 1.985106765442936e-01, 2.006591916722828e+00, -3.274218850969760e-04, 1.196820342584087e-04, -3.284311004625810e-04, -1.873854446815147e+00, 3.361012441377502e-01, -3.161500923664126e+00, -1.873854446815160e+00, 3.361012441377502e-01, -3.161500923664109e+00, 1.542901110935141e+01, 8.856826682658378e-03, 1.335517952969006e+01, 1.331562132539963e+01, 1.103809312109128e-02, 1.229408323531129e+01, 7.593325455986697e+01, 1.113675562724691e-01, 8.459647916877452e+01, 8.011015291544290e+00, 2.222051976267969e-01, 6.144764152062073e+00, 3.772319134793074e+01, 4.225773354604795e-02, 2.734595248953927e+01, 3.772319134794267e+01, 4.225773354044583e-02, 2.734595248947584e+01, -8.695321475686107e-03, 2.386202578733044e-02, -8.592155226576151e-03, -9.556455862113197e-03, 2.064322899501290e-02, -9.467065962916894e-03, -9.319437438284938e-03, 2.166970956545025e-02, -9.228449001234646e-03, -9.076491160465269e-03, 2.260186931189536e-02, -8.970818130347426e-03, -9.200295941378629e-03, 2.212597260804177e-02, -9.103179570009941e-03, -9.200295941378629e-03, 2.212597260804177e-02, -9.103179570009938e-03, -2.130266862816812e-03, 2.812794725449062e-02, -2.359813707547865e-03, 7.709168007078342e-04, 1.584476459191203e-02, 1.945376173791615e-04, -3.256811067128008e-03, 1.804898903125069e-02, -3.612957228055831e-03, -6.033737794036254e-03, 2.101236673594106e-02, -5.937344433516473e-03, -4.550761261276445e-03, 1.945655183253552e-02, -4.763692009353957e-03, -4.550761261276419e-03, 1.945655183253552e-02, -4.763692009353938e-03, -1.670269557532913e-02, 1.141370702593257e-02, -1.462027091419828e-02, -2.117159221275788e+00, 9.619802598247709e-02, -2.118978617882901e+00, -1.699024281140324e+00, 8.373125082392979e-02, -1.625897340174777e+00, -3.108093301481823e-01, 6.918021294056678e-02, -2.947761318971938e-01, -9.185806344216820e-01, 7.994212330093525e-02, -9.191003416109715e-01, -9.185806344216831e-01, 7.994212330093528e-02, -9.191003416109718e-01, -1.816800345364480e-01, 2.272856508898219e-02, -1.630899566751724e-01, -1.504303999820490e+00, 8.873214668160269e-02, 2.756858220369468e+00, 7.063477887379404e+00, 1.239254316885646e-01, 6.974568498421051e+00, -3.512756662958186e-01, 1.070366262240456e-01, -5.193339760077472e-01, 3.687380765461873e+00, 3.528867268950891e-01, 1.793515676317794e+00, 3.687380765461928e+00, 3.528867268950863e-01, 1.793515676317792e+00, 9.785700330333206e+00, 2.917147328227121e-02, 1.001584174114078e+01, 4.730355649833639e+01, 1.248047931823216e-02, 8.381183950129201e+01, 2.911056092644426e+01, 1.535517838624227e-02, 3.099950873322624e+01, 2.329926872394935e+00, 3.318526369945554e-01, -2.666208899632234e+01, 7.789932567635262e+01, 5.414302239316610e-02, 3.045369067483518e+01, 7.789932567632795e+01, 5.414302235910130e-02, 3.045369067470302e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_vcml_rvv10_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_vcml_rvv10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.880566663777654e-04, -2.870535089331073e-04, -2.880375118443006e-04, -2.870397317242628e-04, -2.878572715973314e-04, -2.868147941875494e-04, -2.880667921747109e-04, -2.870833977745556e-04, -2.880474063756641e-04, -2.868891411381649e-04, -2.880474063756641e-04, -2.868891411381649e-04, 1.297047233677268e-03, 1.276393004050653e-03, 1.303237514188972e-03, 1.278866692166318e-03, 1.407984248473963e-03, 1.422544022216426e-03, 1.444755921819339e-03, 1.428274057786571e-03, 1.285148962764081e-03, 1.528272949266269e-03, 1.285148962764081e-03, 1.528272949266269e-03, 2.836342111699332e-03, 2.871590523918426e-03, 2.836013021065426e-03, 2.861685190396413e-03, 2.756298988073113e-03, 2.928517005818432e-03, 3.334125783189508e-03, 3.384886180572312e-03, 2.753182328308403e-03, 4.370042381493379e-03, 2.753182328308403e-03, 4.370042381493379e-03, 3.484306075262741e-01, 2.454288275793777e-02, 2.983947261267729e-01, 6.120323522054209e-02, 2.799049755586007e-04, 4.563777298649323e-04, 1.028034688820172e-02, 3.550848012177146e-02, 2.702306763211501e-01, 6.684879683887291e-04, 2.702306763211506e-01, 6.684879683887555e-04, 8.343036759849755e-05, 1.444334238750426e-03, 2.447138569235797e-05, 1.966536126586354e-04, 2.133262326163896e-04, 4.772260118347736e-04, 4.561931092827519e-09, 6.794840991363997e-09, 1.612570223227596e-06, 1.138319683707499e-09, 1.612570223216137e-06, 1.138319684670626e-09, -8.021640985747057e-05, -7.563929172219208e-05, -7.909474335842671e-05, -7.456794802912155e-05, -7.831602890752199e-05, -7.427736876256570e-05, -7.742822707443959e-05, -7.337576880843358e-05, -8.103023328494978e-05, -7.533182999013601e-05, -8.103023328494978e-05, -7.533182999013601e-05, 9.006561209636206e-03, 7.257900978825233e-03, 7.058330913232243e-04, -5.384903428007203e-04, 1.959341860951526e-03, 2.490885334063946e-03, -4.812976226806535e-03, -4.478820328583991e-03, 8.749929555895925e-03, 3.549539163627296e-03, 8.749929555895925e-03, 3.549539163627296e-03, 5.939863841054037e-02, 5.812571688561158e-02, 2.101507139928728e-02, 1.705331926397836e-02, 1.886959983640187e-02, 4.920578857349902e-02, 2.145050070896367e-02, 4.874244552107020e-02, 3.577927475715129e-02, 5.781799673695301e-02, 3.577927475715121e-02, 5.781799673695302e-02, 8.765283091431956e-03, 7.165950461829064e-03, 3.409014248849970e-01, 3.076032059299151e-01, 3.484339230862283e-03, 7.508471686561537e-03, 1.542747466802021e-02, 1.545804200712479e-02, 3.576615605610490e-02, 4.984737474530118e-02, 3.576615605610499e-02, 4.984737474530099e-02, 2.209380164067142e-11, 2.796990681367892e-11, 5.361071741903985e-10, 3.771272798081833e-10, 1.436772861265948e-08, 1.908227500504385e-08, 6.580571945523192e-04, 2.996222943470447e-03, 2.351367615037414e-11, 3.498910739819881e-06, 2.351367615037431e-11, 3.498910739843075e-06, -1.189879978285383e-02, -1.155373430210219e-02, -1.147112452339944e-02, -1.114756971948195e-02, -1.157866311656326e-02, -1.124622115974233e-02, -1.169893573443265e-02, -1.137016900472808e-02, -1.164127635936300e-02, -1.130858688820131e-02, -1.164127635936300e-02, -1.130858688820133e-02, -2.261192689356881e-02, -2.194055586790456e-02, -2.829519678441810e-02, -2.764834843342874e-02, -2.480584681400529e-02, -2.423368600943499e-02, -2.116325760984729e-02, -2.098153317281713e-02, -2.341496646220873e-02, -2.286817179332092e-02, -2.341496646220878e-02, -2.286817179332097e-02, 3.940788757899823e-02, 3.381636078859739e-02, 1.585250174580996e-01, 1.615703798009872e-01, 2.148667700316964e-01, 2.103975819555661e-01, 7.333209305548302e-02, 7.016121051380686e-02, 1.658280653113713e-01, 1.654681205476199e-01, 1.658280653113715e-01, 1.654681205476199e-01, 1.022645456288222e-01, 9.060567870382802e-02, 2.782812377038661e-03, 1.560262367439507e-03, 4.902772387035892e-04, 6.819820532213007e-04, 7.428580292689467e-02, 1.248573603810366e-01, 7.546942069549973e-03, 1.450352696752442e-02, 7.546942069549908e-03, 1.450352696752449e-02, 2.434365602213121e-08, 2.394730830872969e-08, 5.578594186075841e-14, 3.245506846605279e-14, 7.413211379971345e-09, 9.818594187167102e-09, 1.209242254194280e-02, 8.558015983938096e-02, 1.169960492727126e-10, 2.219347368159626e-06, 1.169960491860982e-10, 2.219347368217624e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
