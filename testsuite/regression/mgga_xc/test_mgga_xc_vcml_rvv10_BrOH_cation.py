
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_xc_vcml_rvv10_BrOH_cation_2_zk() not generated due to NaN in reference data

# test_mgga_xc_vcml_rvv10_BrOH_cation_2_vrho() not generated due to NaN in reference data

# test_mgga_xc_vcml_rvv10_BrOH_cation_2_vsigma() not generated due to NaN in reference data


def test_mgga_xc_vcml_rvv10_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_vcml_rvv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.749074365016221e-03, 1.748500011481422e-03, 1.748984179846628e-03, 1.748434450791222e-03, 1.748726073481441e-03, 1.748055113606276e-03, 1.749737339174404e-03, 8.119469995006485e-20, 1.749016852024783e-03, -2.965222944583483e-19, 8.813696065325484e-19, -2.965222944583483e-19, 1.419114665620562e-17, 8.545194880132861e-04, -2.856740432799315e-17, -1.041112179855217e-17, 1.324752078125830e-17, 1.318725488159621e-17, 2.861936028526772e-18, -3.680547502431016e-18, -9.445631090187106e-18, -1.463735200605069e-17, 8.549409041039176e-04, -1.463735200605069e-17, 1.193713197197322e-03, 1.284022926218752e-03, 1.169084246068927e-03, 1.930473767435773e-16, -1.354261997357384e-16, -7.940378544370072e-17, 1.305501690827262e-16, 1.028339530053529e-03, 1.338239944380884e-03, 6.526786394969429e-04, 4.899889782925355e-17, 7.635156542414709e-18, 1.086503767530673e-03, 1.357976469493704e-16, 1.216563045980734e-03, 5.828530098907631e-18, -4.925638214364417e-17, 2.971424833765056e-04, 3.973663401578144e-16, -1.078169185213459e-16, 3.724216132829712e-18, -4.553329824299728e-15, 2.814421108665664e-18, 1.124414888621190e-05, 1.758388510183164e-12, -1.628275226212081e-12, 5.901491034492884e-11, -4.425901321945102e-13, 1.050331568097785e-07, 3.148619477869793e-14, 3.160278577967165e-11, 1.001147488229055e-11, 7.712277791683896e-12, -2.119550502168448e-11, 7.712277791683896e-12, -2.190238148179048e-11, -1.841709803358172e-19, -1.147202261573692e-18, 4.619323592165604e-19, 2.835680183751873e-19, 3.391554463185921e-19, 2.466210768953666e-18, -8.079825655720126e-19, 1.272318064207392e-18, 8.829197675070469e-04, 6.668468355232499e-20, 1.239825172433534e-18, 8.845272965726727e-04, 3.020433166420674e-17, -3.812131148060084e-17, -7.583814868722529e-18, -4.610956980296985e-17, 1.054959741753409e-17, -1.664263445756631e-17, 3.374864722832135e-17, -2.276891241439903e-17, 7.331613830906894e-18, 1.429383896202644e-03, 7.331613830906894e-18, -2.984252642972730e-18, -7.429783209163880e-17, 3.643615912075395e-03, 1.579117434304144e-18, -2.264546245847796e-18, -1.556083510064293e-16, -8.658622933486763e-17, -1.178209986214206e-17, 6.198817300539264e-18, -2.390840274427595e-17, 4.956445168445068e-03, 3.229621867872056e-17, 4.996626166026617e-17, 8.218127193024079e-15, 7.029077949955575e-15, 3.228175047472450e-04, 5.900739374889038e-16, 6.006309702400641e-15, 5.993875754665473e-15, 3.108942101167905e-18, -4.058443593545666e-18, 2.326371950132669e-16, -6.337450478227662e-16, -3.126278806918412e-16, -4.472963322774574e-16, 3.195196162219801e-13, 2.872107601586360e-11, 6.269875669998001e-12, -1.545600600006294e-11, -1.483644047902791e-11, -7.784511026172957e-12, -1.207392437056531e-13, 1.914885459295334e-06, -5.484783577544276e-12, 1.279466396599361e-11, -6.281037923450443e-12, -4.287745850344979e-12, -2.211670807595616e-18, -4.565469371436640e-19, -1.231878007979690e-17, -7.416677078377323e-18, -3.118709294194519e-02, -3.098310303857492e-02, -2.960774965366143e-02, 4.710092916090690e-18, -3.066360229444726e-02, -3.034467429047269e-02, -3.066360229444726e-02, 4.858328853701142e-18, -5.255191214582780e-19, 1.251902991267900e-19, -3.608737087803134e-17, 1.117433237503130e-03, 2.648335815987298e-17, 2.749242206472791e-02, 2.703895832257754e-17, 2.340163928764610e-17, -5.229417457206528e-18, -6.572570215318902e-17, 3.313133737238267e-18, 6.864976029074114e-02, -3.919478243699640e-18, 5.882567775616900e-02, -7.570050453098201e-18, 1.514751725573041e-17, 2.086653982499887e-03, 9.948976217555361e-17, 7.604052480244779e-03, 1.582609763754535e-16, 8.314584219708084e-17, -2.701501894153729e-16, -1.619275710626790e-16, 5.004540015135042e-03, -1.027429020962521e-16, 3.601076796693502e-17, 1.031891714671406e-07, 1.035913096249665e-07, -6.797129885968690e-14, 5.165578362813255e-14, 3.121308031649272e-16, 1.364393520506402e-16, 1.875644773614856e-15, 9.040300951364011e-15, 2.295517236006872e-14, -2.003957542055856e-16, 8.886453156341039e-11, 1.039030628752115e-10, -6.135451355472673e-11, -7.319495281791918e-10, 4.620945530692617e-13, 6.858207943184097e-13, 6.626368604118545e-06, 8.555697780755479e-06, -2.280858087947472e-11, 1.636772587640284e-11, 3.440496680458535e-11, 1.282833241260388e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
