
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.244333416738031e+01, -2.244339692875210e+01, -2.244376544501512e+01, -2.244283370263590e+01, -2.244330910191354e+01, -2.244330910191354e+01, -3.522708808936927e+00, -3.522715076792277e+00, -3.523129947372996e+00, -3.525073656201621e+00, -3.523754768524249e+00, -3.523754768524249e+00, -7.133505460227586e-01, -7.130461395413298e-01, -7.073617988238297e-01, -7.141233604125078e-01, -7.138899732607328e-01, -7.138899732607328e-01, -2.178097353306634e-01, -2.196275189820734e-01, -8.126807197096070e-01, -1.789103419862065e-01, -2.078769660591024e-01, -2.078769660591022e-01, -1.185335421243135e-02, -1.246930531763556e-02, -6.122348089911701e-02, -6.888914696555865e-03, -9.064786405046958e-03, -9.064786405046960e-03, -5.553627524374543e+00, -5.554654234308950e+00, -5.553750793029331e+00, -5.554654587796478e+00, -5.554108626855363e+00, -5.554108626855363e+00, -2.139278108822652e+00, -2.154111236307778e+00, -2.134518435138391e+00, -2.147508615603105e+00, -2.149873138735894e+00, -2.149873138735894e+00, -6.401406600011014e-01, -6.615752517701540e-01, -5.864427952866913e-01, -5.831067205269097e-01, -6.498664149315795e-01, -6.498664149315796e-01, -1.302518221343121e-01, -2.272012071750019e-01, -1.218976120457436e-01, -1.880037480049190e+00, -1.510691201928387e-01, -1.510691201928387e-01, -5.330956316015849e-03, -6.736039440036702e-03, -5.167576865726477e-03, -8.826107137879402e-02, -6.329912018333620e-03, -6.329912018333621e-03, -6.311706228892193e-01, -6.471284434864466e-01, -6.440514664037233e-01, -6.398596721657577e-01, -6.421838210913919e-01, -6.421838210913919e-01, -5.939204353559795e-01, -5.581157274646319e-01, -5.813792731549833e-01, -6.019598936901435e-01, -5.917778115404495e-01, -5.917778115404495e-01, -6.893324903923747e-01, -2.747555977207758e-01, -3.158186993325960e-01, -3.929581272020483e-01, -3.513479643687414e-01, -3.513479643687414e-01, -5.101426085193083e-01, -5.903566721527126e-02, -7.382633189139338e-02, -3.770097649832124e-01, -1.086927223802030e-01, -1.086927223802030e-01, -1.662876238930446e-02, -1.819861267648077e-03, -3.803285180427545e-03, -1.030103981115972e-01, -5.841631771444831e-03, -5.841631771444825e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.780550300791813e+01, -2.780641064474537e+01, -2.780557448877166e+01, -2.780646276093024e+01, -2.780598105301806e+01, -2.780699393542989e+01, -2.780517481295082e+01, -2.780596924519752e+01, -2.780553769151648e+01, -2.780651032624008e+01, -2.780553769151648e+01, -2.780651032624008e+01, -4.280341211146709e+00, -4.280107915143927e+00, -4.280398666769977e+00, -4.280128962163532e+00, -4.281348296164968e+00, -4.281503694914763e+00, -4.281952519755377e+00, -4.281857766792151e+00, -4.279605395552446e+00, -4.282754743913264e+00, -4.279605395552446e+00, -4.282754743913264e+00, -8.510641591907210e-01, -8.551004981038925e-01, -8.492370427967356e-01, -8.541902309556864e-01, -8.199991871257531e-01, -8.133476383469632e-01, -8.249062059554921e-01, -8.274486801036286e-01, -8.550496402138749e-01, -7.930318342410976e-01, -8.550496402138749e-01, -7.930318342410976e-01, -2.316858156828784e-01, -2.359900415898604e-01, -2.337699167906646e-01, -2.396402637709381e-01, -9.833820698111964e-01, -1.020334113562617e+00, -2.075624469478937e-01, -2.082213191038286e-01, -2.075018113217982e-01, -2.323837814914713e-01, -2.075018113217981e-01, -2.323837814914712e-01, -1.550418462075168e-02, -1.592556487491730e-02, -1.627071097094882e-02, -1.677352148307940e-02, -8.181635152951902e-02, -8.450529131826216e-02, -9.189847771960819e-03, -9.123310249713152e-03, -1.247603259837465e-02, -9.715027180458182e-03, -1.247603259837465e-02, -9.715027180458184e-03, -6.832464320557801e+00, -6.831294278901991e+00, -6.832001443415403e+00, -6.830851403850692e+00, -6.832582077263973e+00, -6.831384216282363e+00, -6.832182768985536e+00, -6.830974612375058e+00, -6.832118198941752e+00, -6.831055143258750e+00, -6.832118198941752e+00, -6.831055143258750e+00, -2.522802067907439e+00, -2.524406303337680e+00, -2.554449007548107e+00, -2.555141331351396e+00, -2.500488787905262e+00, -2.507675000058584e+00, -2.528568833075573e+00, -2.536045065048812e+00, -2.555361908033349e+00, -2.544016070565619e+00, -2.555361908033349e+00, -2.544016070565619e+00, -7.851695008683879e-01, -7.847389568266019e-01, -8.437626179431156e-01, -8.442025973131182e-01, -7.061927347409994e-01, -7.292435607353406e-01, -7.399289502433974e-01, -7.582828422657115e-01, -8.137492774475740e-01, -7.774351580680530e-01, -8.137492774475741e-01, -7.774351580680531e-01, -1.927472261778837e-01, -1.920755824310456e-01, -2.526250854674866e-01, -2.525396277328193e-01, -1.812610019156264e-01, -1.830466599443402e-01, -2.451049547475157e+00, -2.450114006783211e+00, -1.985663220646812e-01, -1.852633715317741e-01, -1.985663220646812e-01, -1.852633715317741e-01, -7.027289575679978e-03, -7.144548404236435e-03, -8.924506682828744e-03, -8.982852296369918e-03, -6.779075598149566e-03, -6.947217674904218e-03, -1.303718800639683e-01, -1.312311961229816e-01, -7.605124192599594e-03, -8.727174532217302e-03, -7.605124192599595e-03, -8.727174532217304e-03, -7.846185613797863e-01, -7.869847789987575e-01, -7.854660843185899e-01, -7.876858773041369e-01, -7.837432058974715e-01, -7.859945071485726e-01, -7.830726928445580e-01, -7.853728399064279e-01, -7.832714687930851e-01, -7.855517095494605e-01, -7.832714687930851e-01, -7.855517095494605e-01, -7.713849143271537e-01, -7.732448773489436e-01, -6.999275775704259e-01, -7.022565749075875e-01, -7.275025306215491e-01, -7.295950745251959e-01, -7.403922512907178e-01, -7.421277316286405e-01, -7.345258475241178e-01, -7.367362424234849e-01, -7.345258475241178e-01, -7.367362424234849e-01, -8.819633967253537e-01, -8.833359268007047e-01, -2.950378112304434e-01, -2.954503618501342e-01, -3.498899559379451e-01, -3.525851776908441e-01, -4.772984616240075e-01, -4.786599446934311e-01, -4.152745012915590e-01, -4.154216857412616e-01, -4.152745012915590e-01, -4.154216857412616e-01, -6.260317558193188e-01, -6.310596421618253e-01, -7.978131045304072e-02, -8.010518243962289e-02, -1.070792540880707e-01, -1.091459444645433e-01, -4.583317231627689e-01, -4.700069581566876e-01, -1.555885781082562e-01, -1.529791143702467e-01, -1.555885781082562e-01, -1.529791143702466e-01, -2.185839299259931e-02, -2.220886095859620e-02, -2.421726646386060e-03, -2.423987593238052e-03, -4.987514061124469e-03, -5.119944790875036e-03, -1.476644116475201e-01, -1.486738947790090e-01, -7.113069439637321e-03, -8.044788594354412e-03, -7.113069439637313e-03, -8.044788594354403e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.664816163271038e-08, 1.083102759008488e-11, -2.664858172040165e-08, -2.664908728366113e-08, 1.083087319123062e-11, -2.664925320680532e-08, -2.665030679812599e-08, 1.083013914100214e-11, -2.665149212204626e-08, -2.663990675082156e-08, 1.083243745840908e-11, -2.663821193009367e-08, -2.664880521453799e-08, 1.083124001927297e-11, -2.664223660285337e-08, -2.664880521453799e-08, 1.083124001927297e-11, -2.664223660285337e-08, -2.435900965460494e-05, 1.408033252516688e-07, -2.436273518306870e-05, -2.436452648388156e-05, 1.408017063742734e-07, -2.436710683035898e-05, -2.448067478654457e-05, 1.407459098333420e-07, -2.450267767441281e-05, -2.439546928492817e-05, 1.407005093922587e-07, -2.440202086990208e-05, -2.436076186638201e-05, 1.407843606921919e-07, -2.450506863249863e-05, -2.436076186638201e-05, 1.407843606921919e-07, -2.450506863249863e-05, -9.799824095118813e-03, 8.469549224104451e-04, -9.761471100191065e-03, -9.835374214602932e-03, 8.518558606904152e-04, -9.775008459113900e-03, -1.029285506985210e-02, 9.773551784428020e-04, -1.037913040306461e-02, -1.019756744607290e-02, 9.363858307744637e-04, -1.022762540053293e-02, -9.648179759117189e-03, 1.018656322350667e-03, -9.887375365337450e-03, -9.648179759117189e-03, 1.018656322350667e-03, -9.887375365337450e-03, -1.098631824700661e+00, 4.449528647290051e-01, -1.023364518577069e+00, -1.095081561608223e+00, 4.203401676480766e-01, -9.980560988852163e-01, -3.637195978173538e-03, 3.938818700962041e-04, -3.141541253330856e-03, -1.321940794318490e+00, 1.240167016588545e+00, -1.312333378293736e+00, -1.259277523229954e+00, 1.762690441916702e+00, -1.367894151287076e+00, -1.259277523229952e+00, 1.762690441916702e+00, -1.367894151287078e+00, -4.907224669677239e+00, 8.228167361479431e-08, -4.858763698102605e+00, -5.171280209613561e+00, 3.376294363721389e-07, -5.145842360942975e+00, 4.880463093272748e+00, 1.360584294730653e+01, 3.912469310525333e+00, -4.491241990281092e+00, 3.061302701451817e-17, -4.369237582781103e+00, -4.897801995625378e+00, 7.924185573457057e-13, -1.242135327658797e+01, -4.897801995625397e+00, 7.924185573457057e-13, -1.242135327658798e+01, -1.189780187211436e-05, 1.652940299748593e-08, -1.190557946770226e-05, -1.202467868778744e-05, 1.651337955216721e-08, -1.202827552961507e-05, -1.190494964536816e-05, 1.652860663066508e-08, -1.190987500657790e-05, -1.201378113222546e-05, 1.651445690079939e-08, -1.202130990490873e-05, -1.196245022495043e-05, 1.652131156390644e-08, -1.196696888953574e-05, -1.196245022495043e-05, 1.652131156390644e-08, -1.196696888953574e-05, -1.079545042089960e-04, 3.037372279211582e-06, -1.074923448839708e-04, -1.038361698716992e-04, 2.922280520257467e-06, -1.035175477100201e-04, -1.055813399065239e-04, 3.125169411797524e-06, -1.059279689145512e-04, -1.018192572402692e-04, 3.019723690208395e-06, -1.020912674934962e-04, -1.078206701439073e-04, 2.935134113062647e-06, -1.055090305390709e-04, -1.078206701439073e-04, 2.935134113062647e-06, -1.055090305390709e-04, -3.743500673364746e-02, 1.667698491311414e-03, -3.795332461567071e-02, -4.810460658964048e-02, 1.097385689037765e-03, -4.979524765596908e-02, -4.260466981745295e-02, 2.510935099777962e-03, -4.270430922389754e-02, -3.989434313655368e-02, 2.062285393532958e-03, -4.394295589577625e-02, -3.738811127194179e-02, 1.606835823983316e-03, -4.228949929512486e-02, -3.738811127194179e-02, 1.606835823983316e-03, -4.228949929512486e-02, 1.363349424601546e-01, 3.969605205820069e+00, -2.197103730978118e-02, -6.566691263778727e-01, 4.386766326718147e-01, -6.580227134320681e-01, 7.210413878601928e-01, 4.936266440953091e+00, 4.527827926299314e-02, -3.141053264972060e-04, 3.367572936902015e-06, -3.146456095015518e-04, -8.153603323069700e-01, 2.488157366286731e+00, -1.833628553475534e+00, -8.153603323069700e-01, 2.488157366286731e+00, -1.833628553475534e+00, -6.303983195944771e+00, 4.011907556842686e-24, -5.456325668262545e+00, -5.429047636694833e+00, 9.092815757238681e-18, -5.012492474189894e+00, -3.092886456240693e+01, 4.185766058848473e-25, -3.440995398282080e+01, 2.769397680100712e+00, 1.113455283158668e+01, 2.763964538197013e+00, -1.537801873238879e+01, 7.111638862918034e-20, -1.511068130087581e+01, -1.537801873238874e+01, 7.111638862918031e-20, -1.511068130087581e+01, -3.373538110971159e-01, 1.627761112601844e-03, -3.413579565613520e-01, -1.799084281389962e-01, 1.675571736307525e-03, -1.812785571947504e-01, -2.207599803279628e-01, 1.658564294482091e-03, -2.229737009479832e-01, -2.664308872440703e-01, 1.644701048142339e-03, -2.685831949907657e-01, -2.420572927640736e-01, 1.651622991519585e-03, -2.442444159802123e-01, -2.420572927640736e-01, 1.651622991519585e-03, -2.442444159802122e-01, -2.048439291234102e-01, 1.868705926211398e-03, -2.103129366377185e-01, -2.990515862747353e-02, 3.994419011545935e-03, -2.994116107600068e-02, -4.400373478566338e-02, 3.180546943893084e-03, -4.444978628611047e-02, -8.356984156460985e-02, 2.559216689009512e-03, -8.341590511090143e-02, -5.945504656106630e-02, 2.856578970684286e-03, -5.927251652629067e-02, -5.945504656106630e-02, 2.856578970684286e-03, -5.927251652629067e-02, -3.234528065139726e-02, 8.631763776228307e-04, -3.411556196067148e-02, -3.883843345666081e-01, 1.682055002189839e-01, -3.868447623927985e-01, -2.418265466805327e-01, 7.603056709726494e-02, -2.378475251305447e-01, -1.400667272445362e-01, 2.133920585984772e-02, -1.393388846380247e-01, -1.636443084811184e-01, 4.070553318382730e-02, -1.644100986014916e-01, -1.636443084811183e-01, 4.070553318382731e-02, -1.644100986014918e-01, -4.998011930596539e-02, 5.994528630142272e-03, -4.923165930298290e-02, 4.426889634695129e+00, 1.307234817182508e+01, 4.314120501637621e+00, 5.349462492248493e+00, 1.390314399880895e+01, 4.526967514767025e+00, -2.228592687866908e-01, 2.537396857419306e-02, -2.123994052139597e-01, 9.335794870916089e-01, 7.179064146863144e+00, -7.287911850266127e-01, 9.335794870916035e-01, 7.179064146863144e+00, -7.287911850266159e-01, -3.892590983829036e+00, 2.528934259174567e-04, -3.974538414969705e+00, -1.939190273971082e+01, 2.109084753651742e-85, -3.435047795673942e+01, -1.196993163230625e+01, 1.230111359923434e-36, -1.274319663157248e+01, 7.440230741953952e-01, 8.161382890185564e+00, 5.065327625775679e-01, -3.170873639067648e+01, 6.052322831284908e-22, -1.568505216222761e+01, -3.170873639067650e+01, 6.052322831284592e-22, -1.568505216222766e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.858462265273468e-03, 1.859137230031152e-03, 1.858553096627966e-03, 1.859203125286517e-03, 1.858808016488308e-03, 1.859578608562480e-03, 1.857789797448334e-03, 1.858277871261494e-03, 1.858520791164578e-03, 1.858770895528004e-03, 1.858520791164578e-03, 1.858770895528004e-03, 2.723877410713530e-03, 2.719449417576528e-03, 2.725276348834209e-03, 2.720037975023280e-03, 2.748812473282739e-03, 2.752082089823496e-03, 2.755070834632810e-03, 2.751817425643183e-03, 2.721543493289038e-03, 2.773348584611071e-03, 2.721543493289038e-03, 2.773348584611071e-03, 4.018961521210723e-03, 4.005948300520361e-03, 4.034442766205526e-03, 4.000088171647269e-03, 3.930229683055831e-03, 3.980579729763166e-03, 4.416340101044118e-03, 4.529684935125616e-03, 3.681100707220785e-03, 3.593309214556249e-03, 3.681100707220785e-03, 3.593309214556249e-03, 3.253030848728923e-03, 3.469144316731903e-03, 3.798334230933173e-03, 4.196623752931655e-03, 6.244980749482071e-04, 6.029865465305887e-04, 4.743509282939944e-04, 5.198970478696716e-04, 3.402102715780074e-03, 7.231507629835471e-05, 3.402102715780070e-03, 7.231507629835495e-05, 7.768294687620357e-14, 5.517815227677485e-13, 1.005632164303626e-13, 2.533750959284432e-13, 2.194546269237651e-08, 3.003097056718559e-08, 5.853434425295482e-15, 4.281495842542627e-15, 3.835417149205043e-14, 2.197828598302326e-14, 3.835417149205149e-14, 2.197828598302331e-14, 1.324131881413044e-02, 1.324764264741689e-02, 1.339071792054444e-02, 1.339212694788027e-02, 1.325256573026862e-02, 1.325474326206773e-02, 1.338065033556643e-02, 1.338588732214025e-02, 1.331528081476251e-02, 1.331957212050639e-02, 1.331528081476251e-02, 1.331957212050639e-02, 2.783558084980958e-03, 2.779414117051588e-03, 2.860901019613346e-03, 2.855449761034801e-03, 2.488715996241003e-03, 2.569516864155713e-03, 2.544590164822508e-03, 2.626265997637459e-03, 3.057814421273454e-03, 2.851405487958298e-03, 3.057814421273454e-03, 2.851405487958298e-03, 3.239398155786236e-02, 3.327061245947696e-02, 3.053447265069949e-02, 3.202638023202183e-02, 1.956246061117173e-02, 2.498185585316047e-02, 1.058659385787801e-02, 1.561675798912904e-02, 3.862933292132874e-02, 3.386412362896477e-02, 3.862933292132876e-02, 3.386412362896477e-02, 2.313378872649257e-05, 2.641751769490654e-05, 1.054350301980465e-03, 1.080358370231235e-03, 1.380988754983377e-05, 1.907420088442872e-05, 3.407434856627575e-03, 3.408436871169371e-03, 1.037090442786595e-04, 3.188013496341692e-04, 1.037090442786597e-04, 3.188013496341700e-04, 3.174099426127164e-15, 3.094627329495182e-15, 1.077684091112363e-14, 1.074517452811352e-14, 2.845137383578532e-14, 5.487055827787887e-14, 1.816870175009139e-06, 1.408751111379172e-06, 1.533769279483028e-14, 1.879663643001609e-14, 1.533769279483020e-14, 1.879663643001597e-14, 2.970354023044234e-01, 3.039822379994275e-01, 2.159557131163817e-01, 2.205787296601906e-01, 2.500257580817729e-01, 2.559226650985863e-01, 2.794120313568618e-01, 2.856072573714213e-01, 2.649373572826000e-01, 2.710074498847725e-01, 2.649373572826000e-01, 2.710074498847725e-01, 7.460417606932424e-02, 7.857050923900408e-02, 2.212843707946465e-02, 2.256200433843798e-02, 4.131551013003312e-02, 4.232343413243839e-02, 8.261910737597380e-02, 8.326210365371772e-02, 5.766530793574759e-02, 5.838966732994538e-02, 5.766530793574758e-02, 5.838966732994535e-02, 2.128875454821414e-02, 2.312247963953688e-02, 2.115198928528824e-03, 2.184063293125326e-03, 5.316885854269172e-03, 5.668883963953653e-03, 2.157064376520176e-02, 2.166318102468843e-02, 1.202350513960046e-02, 1.221530803484996e-02, 1.202350513960045e-02, 1.221530803484998e-02, 2.130274772765795e-02, 2.213526873966512e-02, 1.301744134247283e-08, 1.274502958954738e-08, 1.493098998024488e-07, 1.955576498280085e-07, 3.144721062401101e-02, 3.747547947914805e-02, 8.582433741524107e-06, 1.992709511526680e-05, 8.582433741524119e-06, 1.992709511526684e-05, 3.255410771593830e-12, 4.513180424182724e-12, 1.294972746605293e-17, 2.411432082104271e-17, 2.495037173673689e-16, 4.514914855773776e-16, 7.802177200876542e-06, 1.800756544063898e-05, 4.737461878753145e-14, 1.104645078282219e-14, 4.737461878753130e-14, 1.104645078282223e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
