
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.999618652949609e+01, -1.999624698951491e+01, -1.999653093865491e+01, 3.241354912390531e+146, 3.132278890612507e+146, 2.937949564498284e+199, 6.028644705287875e+88, 3.067669368679687e+234, 2.347146576023190e+215, 1.658987949395819e+220, 1.365934736223304e+201, 1.727857915314551e+172, -6.837517508575182e-01, 3.838149336585799e+158, 2.343374774957068e+178, 1.031234059454707e+216, -6.719657703158073e-01, 2.900799541143128e+245, 1.147913306389492e+278, 4.272694972983412e+162, 8.403698479795434e+234, 1.867405786683676e+245, 1.403276013664363e+231, 1.469319940928203e+202, 5.783957710727228e+246, 8.137705633214771e+197, 7.415635392514970e+257, 1.433777662045438e+243, 1.076127646408130e+246, 5.830168288853828e+245, 7.373807659421799e+242, 8.986346811599144e+237, 7.377220883674041e+242, 6.496509195482140e+213, 3.164271188140749e+159, 1.299427306729027e+222, 1.274860477671779e+246, 7.582221389075389e+162, 1.453050706805424e+235, 8.260108075926757e+173, 2.064670813222444e+241, 9.086425462468617e+226, 2.616564404255277e+178, 2.530234018152956e+245, 4.379601918048025e+240, 1.071155737802562e+212, 1.117447132624793e+255, 1.183806961739794e+217, 3.968499689451710e+260, 3.112728493447988e+172, 1.050481807782032e+237, 1.855696428114564e+241, 3.034885683226936e+260, 1.472712916872579e+217, 2.251340706887618e+164, 2.016179213301106e+218, 6.913773301743349e+225, 4.440720603501054e+170, 2.299703556303399e+197, 1.126187051973915e+215, 5.572440487493992e+240, 3.612769497132921e+250, -5.991365459403433e-01, 1.709286004024762e+178, -5.997708108533439e-01, 1.354707566419271e+207, 3.631341165439068e+221, 1.723372566235867e+222, 7.940940044555214e+178, 5.118556260898328e+226, 3.934293837775052e+221, 3.797990964948406e+215, 2.168190027906701e+240, 1.070108834918705e+228, 2.746009782860850e+243, 4.594188079044822e+194, 1.262068675895397e+180, 3.293442642874255e+228, 2.595993048676627e+174, -3.982554799310469e-02, 2.515484844640778e+185, 1.940874505112504e+252, 4.279144969210046e+256, 5.857813581316864e+251, -1.056747321610078e-02, 3.868562972385564e+165, -2.437858155318450e-03, -7.834712601892874e-02, 1.054069340623221e+229, 5.983639453273193e+185]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.689858250994737e+01, -2.689859004975436e+01, -2.689867517990295e+01, -2.689865751452892e+01, -2.689898718997439e+01, -2.689909930604539e+01, 2.411971936788365e+147, -3.494163583915548e+147, 1.806221391439472e+147, -2.855991215040185e+147, -4.903493426097979e+199, -4.904837460014803e+199, -4.624474454766797e+89, 2.577407960206901e+89, 1.913706695333089e+235, -2.939952104619045e+235, 1.465006861706023e+216, -2.250020398485742e+216, -1.272539206889014e+221, 7.091432314235691e+220, 5.855897290017800e+201, -1.048585588605851e+202, 7.407497748978959e+172, -1.326422750011384e+173, -8.792771803985640e-01, -8.810961695344595e-01, 1.401417140783063e+159, -2.602909623888279e+159, -2.338232750354757e+178, -5.331348792530253e+178, -6.782618894227315e+216, 3.462411831506749e+216, -8.824738645142777e-01, -8.473618601078532e-01, 5.090469350597537e+245, -1.615684965277862e+246, 2.010061756870771e+278, -4.601093774363561e+278, 7.867143833203036e+162, -1.737673544249017e+163, -5.269970624725543e+235, 2.229138948491526e+235, 2.172215442805061e+245, -6.251950220346163e+245, -1.174153288647806e+231, -3.569007713345935e+231, -1.101246604022169e+202, -5.048826543699613e+202, 5.555110555267702e+247, 5.437349027161857e+247, 7.479910307639718e+198, 7.086622043174113e+198, 5.533363027854241e+257, -1.090697256669443e+257, 2.525854970990797e+244, 2.531444727133230e+244, 1.399296866351108e+247, 1.884675041905288e+247, 7.709016772800807e+246, 9.759849564305008e+246, 4.499017809024309e+243, -6.970088389599933e+243, 5.968383749479372e+238, -8.980312230743541e+238, 4.899684090416642e+243, -7.372253640535996e+243, -5.305903892118658e+214, 3.109388951053650e+214, 2.101621055677923e+160, -3.162166297429362e+160, -1.303385170396355e+223, 8.693938194841931e+222, 6.918545144967485e+246, -1.116739051027929e+247, -6.663699034604754e+163, 4.141290376056015e+163, 8.061662882523048e+235, -1.285254862793152e+236, -4.817040156510349e+174, 2.047772611217220e+174, -1.861004491911074e+242, 1.191598711337714e+242, -8.190108802224540e+227, 5.244115818562342e+227, -1.212430592337028e+179, 3.718116053657424e+178, 8.578948888944901e+245, -1.661997779974652e+246, -2.477750717683461e+241, 9.440617629492753e+240, 4.721991724076740e+212, -7.581015483300892e+212, -8.858291675049317e+255, 6.314531441481798e+255, 1.367565575506162e+217, -5.649891937950892e+217, 3.431660035116634e+260, -1.039948611316559e+261, 4.300792519877683e+172, -1.205430059140989e+173, -2.520294538849224e+237, 5.800137714651126e+236, 9.960409961176481e+241, -1.615784470749649e+242, -8.594439997832141e+260, 1.784877814835648e+260, 1.901574164948112e+217, -4.444958245229228e+217, 5.269329681926268e+165, 5.244657981232241e+165, 3.647032528932569e+219, 3.642817295008526e+219, 1.677784042671727e+227, 1.663034211098004e+227, -4.889180894304255e+170, 7.421073274169165e+169, 4.873242845225937e+198, 4.427235305326032e+198, 2.391415764556317e+216, 2.160744306400074e+216, 1.870567664807823e+241, -3.605834857028274e+241, -2.276625942244813e+251, 1.117441064408629e+251, -7.908591828798772e-01, -7.932057123149246e-01, 2.443750612053426e+178, -7.921016120155433e+178, -7.914498490618121e-01, -7.937881688623469e-01, 4.540631686718842e+207, -8.757871792453468e+207, 1.192488017027598e+222, -2.323277483989935e+222, -1.022446358330183e+223, 4.786316225649307e+222, -3.523840696495708e+179, 9.647649391962802e+178, 1.621621093601903e+227, -3.205253259417445e+227, 1.232022512276548e+222, -2.445782230841047e+222, -2.310497070285055e+216, 1.105663305193636e+216, -1.435943637773989e+241, 7.384658914542635e+240, -4.585256081362129e+228, 1.649822687483377e+228, 5.561502541108072e+243, -1.307607235561431e+244, 3.447594835616598e+194, -1.723123723863659e+195, 2.608411875766969e+180, -6.269843574281735e+180, -1.171775525469052e+229, 1.982656386083100e+228, -1.098642057428089e+175, 2.705745913325810e+174, -5.253017774858373e-02, -5.261199312512525e-02, -1.776282680307303e+185, 8.110094150033492e+184, 4.943852249700462e+252, -1.038347766484404e+253, -8.971352296472549e+256, 2.285371563838831e+256, 3.499834032381657e+250, -8.247561997223382e+251, -1.396631189454637e-02, -1.403582507959134e-02, 2.788388203896049e+167, 2.796557901850401e+167, -3.228745285206997e-03, -3.249550457926414e-03, -1.029782500020787e-01, -1.034955818566644e-01, 2.395039810730043e+230, 2.209539478515194e+230, 1.359511275038855e+187, 1.256089585935531e+187]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.368767293891225e-08, 1.083102759008488e-11, -1.368954373127942e-08, -1.368776067600483e-08, 1.083087319123062e-11, -1.368960674104039e-08, -1.368790539348068e-08, 1.083013914100214e-11, -1.368985468710747e-08, -1.368694110100043e-08, 1.083243745840908e-11, -2.429003092285088e-08, -1.368774180897367e-08, 1.083124001927297e-11, -2.429516371172048e-08, -2.429114460394036e-08, 1.083124001927297e-11, -2.429516371172048e-08, -9.724498690764097e-06, 1.408033252516688e-07, -9.433605916101777e-06, -9.725756632754385e-06, 1.408017063742734e-07, -9.724695104137153e-06, -9.750609786694961e-06, 1.407459098333420e-07, -9.754823016554950e-06, -9.738211014124204e-06, 1.407005093922587e-07, -9.737761025576507e-06, -9.727122780737570e-06, 1.407843606921919e-07, -9.760604617045489e-06, -9.434778586584702e-06, 1.407843606921919e-07, -9.760604617045489e-06, -2.826929711669082e-03, 8.469549224104451e-04, -2.900221964545094e-03, -2.815513170113030e-03, 8.518558606904152e-04, -5.769649727180293e-03, -6.197506995534463e-03, 9.773551784428020e-04, -6.263772232127367e-03, -6.139611906272161e-03, 9.363858307744637e-04, -2.850020379188696e-03, -3.126733053543021e-03, 1.018656322350667e-03, -2.424775632023101e-03, -5.854526118661951e-03, 1.018656322350667e-03, -6.435651638337178e-03, -2.494838591065610e-01, 4.449528647290051e-01, -9.860408161068770e-01, -2.518962701016091e-01, 4.203401676480766e-01, -9.524620142259732e-01, -2.427418285066940e-03, 3.938818700962041e-04, -1.020497492175641e-03, -6.336209592222721e-01, 1.240167016588545e+00, -9.020474242322655e-01, -1.141446116479345e+00, 1.762690441916702e+00, 1.613272834327436e-01, -1.141446116479345e+00, 1.762690441916702e+00, -9.227754430236117e-01, -4.789437735968860e+00, 8.228167361479431e-08, -4.808689951543257e+00, -1.079253801600887e+05, 3.376294363721389e-07, -5.030544710900774e+00, -1.103142235874308e+02, 1.360584294730653e+01, 4.460828662850775e+00, -3.504482236320149e+00, 3.061302701451817e-17, -3.540353173830435e+00, -4.548961281119756e+00, 7.924185573457057e-13, -7.784405879961859e+00, -4.548961281119756e+00, 7.924185573457057e-13, -7.784405879961859e+00, -1.182254483147658e-05, 1.652940299748593e-08, -1.183458059277616e-05, -1.194968170217606e-05, 1.651337955216721e-08, -1.195756001780948e-05, -1.183142888822556e-05, 1.652860663066508e-08, -1.184012764825610e-05, -1.194042859172370e-05, 1.651445690079939e-08, -1.195176375581434e-05, -4.814959517874464e-06, 1.652131156390644e-08, -1.189589328393367e-05, -1.188601727335327e-05, 1.652131156390644e-08, -4.819221560520219e-06, -8.947681621817894e-05, 3.037372279211582e-06, -8.955452543520005e-05, -8.760269437755828e-05, 2.922280520257467e-06, -8.773528860431189e-05, -9.113907089643074e-05, 3.125169411797524e-06, -9.081129893081540e-05, -8.934100027719528e-05, 3.019723690208395e-06, -8.905111097034965e-05, -8.744385972218562e-05, 2.935134113062647e-06, -7.636541370616815e-05, -8.744385972218562e-05, 2.935134113062647e-06, -8.829797172255847e-05, -1.700027108131241e-02, 1.667698491311414e-03, -1.620542093358198e-02, -3.167258279484970e-02, 1.097385689037765e-03, -3.363691796996770e-02, -1.576055152530182e-02, 2.510935099777962e-03, -1.654404516249549e-02, -1.966220570587165e-02, 2.062285393532958e-03, -2.155016365662668e-02, -1.920161172018248e-02, 1.606835823983316e-03, -1.670061755311024e-02, -1.920161172018248e-02, 1.606835823983316e-03, -1.839686455624625e-02, 7.051826012164539e-01, 3.969605205820069e+00, 6.029129932249062e-01, -1.154222229011834e-01, 4.386766326718147e-01, -5.783354467449080e-01, 1.476285482868526e+00, 4.936266440953091e+00, 6.771442810913602e-01, -1.998476927224906e-04, 3.367572936902015e-06, -2.003963962972257e-04, -3.329855244367455e-01, 2.488157366286731e+00, -1.383065753899526e+00, -3.329855244367459e-01, 2.488157366286731e+00, -1.383065753899526e+00, -3.140287091413630e+06, 4.011907556842686e-24, -2.345179131692287e+00, -3.324092433232669e+00, 9.092815757238681e-18, -2.930024121407659e+00, -2.394289914644326e+01, 4.185766058848473e-25, -2.628468409037538e+01, 3.952978408703109e+00, 1.113455283158668e+01, -1.035978498245701e+01, -4.509930526939701e+00, 7.111638862918034e-20, -1.433058895721581e+01, -4.509930526939709e+00, 7.111638862918031e-20, -1.433058895721582e+01, -3.667915018865542e-01, 1.627761112601844e-03, -3.732037552760847e-01, -1.663723160346250e-01, 1.675571736307525e-03, -1.682763019281232e-01, -5.374481819539918e-02, 1.658564294482091e-03, -5.410759168581600e-02, -6.339961808912521e-02, 1.644701048142339e-03, -2.649932453718156e-01, -5.808823271935333e-02, 1.651622991519585e-03, -5.846867833369022e-02, -5.808823271935333e-02, 1.651622991519585e-03, -2.359433617190783e-01, -3.533978941655204e-01, 1.868705926211398e-03, -3.608162136682064e-01, -2.662663542341898e-02, 3.994419011545935e-03, -2.705546396349722e-02, -3.651764533219718e-02, 3.180546943893084e-03, -2.976497039096204e-02, -6.690735448912193e-02, 2.559216689009512e-03, -6.691804282097816e-02, -4.748195939709342e-02, 2.856578970684286e-03, -4.773385147488550e-02, -4.748195939709342e-02, 2.856578970684286e-03, -3.113362363793770e-02, -1.912061058111375e-02, 8.631763776228307e-04, -1.275557037081298e-02, -3.660053558454726e-01, 1.682055002189839e-01, -3.642676316850644e-01, -8.156810244439047e-02, 7.603056709726494e-02, -2.136617310435182e-01, -6.288022411038459e-02, 2.133920585984772e-02, -7.710525627410791e-02, -1.311997313963568e-01, 4.070553318382730e-02, -1.313526988897618e-01, -1.311997313963570e-01, 4.070553318382731e-02, -7.743466857139082e-02, -3.030464278943644e-02, 5.994528630142272e-03, -3.057349585751945e-02, -1.202220402909259e+02, 1.307234817182508e+01, -1.169247786223863e+02, 5.995784349994008e+00, 1.390314399880895e+01, 5.166066379245137e+00, -9.769100974214089e-02, 2.537396857419306e-02, -1.060701709223172e-01, 1.776933863887546e+00, 7.179064146863144e+00, 2.167399198675850e-01, 1.776933863887548e+00, 7.179064146863144e+00, 2.167399198675786e-01, -3.109957714216586e+04, 2.528934259174567e-04, -2.697560061596976e+04, -3.820558486646071e+00, 2.109084753651742e-85, -3.803760200510699e+00, -1.292200272339509e+07, 1.230111359923434e-36, -1.009879282057043e+07, -4.350767624991226e+00, 8.161382890185564e+00, -4.257087077679616e+00, -1.164087813189754e+01, 6.052322831284908e-22, -1.485534463324572e+01, -1.164087813189758e+01, 6.052322831284592e-22, -1.359723868170968e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_tpsslyp1w_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_tpsslyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.552941764330921e-04, 1.553264930670136e-04, 1.552983892909297e-04, 1.553295459531124e-04, 1.553099984338776e-04, 1.553466927600447e-04, 1.552627749804251e-04, 1.862389590004138e-03, 1.552969051773238e-04, 1.862911741070482e-03, 1.862665459710370e-03, 1.862911741070482e-03, 1.708830823658133e-03, -5.307793282169055e-04, 1.709911783128298e-03, 1.708673496400520e-03, 1.731068960794232e-03, 1.734864972972723e-03, 1.723200793107321e-03, 1.723205306293312e-03, 1.706697923455939e-03, 1.742381101475886e-03, -5.312573967003417e-04, 1.742381101475886e-03, -1.932551212611324e-03, -2.022212770953941e-03, -1.907558899976996e-03, 1.779993242396342e-03, 1.270056078618420e-03, 1.210541548958574e-03, 1.414053304835945e-03, -1.760626211686063e-03, -2.069636816706464e-03, -1.290809578402624e-03, 1.861347202808727e-03, 1.007200249102713e-03, -2.614767971174270e-03, 2.745886338985339e-03, -2.845396353190218e-03, 3.148331533646177e-03, 3.097396643746394e-04, -6.756851490556520e-04, 2.201338536105949e-04, 3.132792304653067e-04, 1.833777537641670e-03, 3.145683177506827e-05, 1.833777537641669e-03, -9.553298294149855e-05, 1.476290163453019e-10, 2.012417364986925e-10, -6.165232486226470e-08, 2.833272758793000e-10, -5.233692915122582e-06, 4.810795933462701e-07, 7.248869326524528e-12, 6.767267212681120e-12, 7.719525986058012e-11, 1.030869721066942e-11, 7.719525986058012e-11, 1.030869721066900e-11, 1.327993472003692e-02, 1.328406526178825e-02, 1.343022965143274e-02, 1.342934155235837e-02, 1.329036519467143e-02, 1.329056829158083e-02, 1.341922634055317e-02, 1.342244572666106e-02, 7.818535198944901e-04, 1.335650287428602e-02, 1.335502003604495e-02, 7.820205306940467e-04, 1.970914042508842e-03, 1.988718457143191e-03, 2.136220450099913e-03, 2.150011709008136e-03, 1.830613098268640e-03, 1.886282772803012e-03, 1.967294783423097e-03, 2.027960272400814e-03, 2.178782560527735e-03, -1.111685009120792e-03, 2.178782560527735e-03, 2.089869709901577e-03, 2.530775580239402e-02, 1.310973577905514e-03, 6.654371822328986e-02, 7.076346597940121e-02, 1.202721505793257e-02, 1.694717255191741e-02, 2.450579458650941e-02, 3.067050896526638e-02, 3.363917418214516e-02, 1.506538901738678e-03, 3.363917418214516e-02, 2.740415427004915e-02, 3.400814253227862e-05, 3.541366339431272e-05, -1.010256942926096e-03, 6.523223963677824e-04, 2.103468283444408e-05, 2.970952213181802e-05, 1.060261395753401e-02, 1.062159815823102e-02, 1.017449809747010e-04, 2.249570973444255e-04, 1.017449809747011e-04, 2.249570973444261e-04, -2.515295280612425e-09, 1.142832674172545e-12, 5.522126589172142e-12, 4.926283526795017e-12, 2.496092044895533e-11, 3.824967433057749e-11, 4.747342511834773e-06, -3.213330466839065e-05, 2.267451022882437e-12, 6.276198302242993e-11, 2.267451022882339e-12, 6.276198302236315e-11, 5.934259051127647e-01, 6.106705601303176e-01, 2.661523961123038e-01, 2.721844227251551e-01, 7.770601375195842e-03, 7.748398622941251e-03, 7.809532204781529e-03, 4.316231608956541e-01, 7.792056049999684e-03, 7.768074811866926e-03, 7.792056049999684e-03, 3.836607302106171e-01, 5.273084075390940e-01, 5.435694224206153e-01, 2.053783343479984e-02, -1.059628295781080e-03, 3.910057640610105e-02, 3.331342882063361e-03, 8.481185507599485e-02, 8.562245932705692e-02, 5.600126717817296e-02, 5.687100337142807e-02, 5.600126717817297e-02, 5.161503336056346e-03, 4.583471574364405e-02, 4.486824626146768e-03, 1.514575484463399e-03, 1.552517921193003e-03, -3.817342428739732e-03, 3.327023832700910e-03, -6.358275600470665e-03, 1.067761783288525e-02, 6.532039946689135e-03, 6.637557219445968e-03, 6.532039946689138e-03, -6.171297370433469e-03, 1.378173128160610e-02, 1.496969464819884e-02, -5.203358532737745e-06, -5.205477369600173e-06, 1.159580814465470e-06, 1.447516224780277e-06, 1.727233899792543e-02, 2.442653813819155e-02, 1.919720278072635e-05, 3.487408758006668e-05, 1.919720278072642e-05, 3.487408758006662e-05, -7.303752247875026e-08, -8.011244158602191e-08, 9.588559560450344e-15, 9.634744238263474e-15, -3.619163373365160e-09, -4.613342941488077e-09, -7.258203657012515e-05, -8.651110951634446e-05, 7.170148028263861e-12, 4.284785210235860e-11, 7.170148028284047e-12, -2.751456230995746e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
