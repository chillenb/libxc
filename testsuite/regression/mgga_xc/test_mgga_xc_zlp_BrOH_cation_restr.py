
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_zlp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.926867241070171e+01, -1.926869996511574e+01, -1.926886749811038e+01, -1.926845674994650e+01, -1.926866556151641e+01, -1.926866556151641e+01, -3.632750047865917e+00, -3.632723758363779e+00, -3.632202404928362e+00, "nan", -3.632803043803577e+00, 1.835136565427231e+156, -7.460647305459945e-01, 5.828907453616227e+245, 1.209644831331327e+159, 6.719398335779654e+211, 2.937292145888719e+158, 6.766768337218686e+211, 2.096332830963279e+97, 1.477378228053210e+214, -8.615815514135114e-01, 2.248261982255553e+229, 3.224774522969096e+214, 2.675887966793986e+243, 1.021240041316386e+175, 6.496069273796939e+205, 6.496593663176193e+226, 3.545979562147701e+235, 1.255758685903003e+277, 1.049438808252392e+187, 4.192684983010361e+168, 8.433065862274870e+241, 5.516261417362130e+203, -5.234123141336995e+00, 5.019238876412290e+222, 6.975511700274449e+174, -2.214944103151215e+00, -2.225275662815197e+00, -2.215947287319083e+00, -2.224963867431066e+00, -2.220280661969720e+00, 2.196658264077135e+157, 3.563423483349302e+178, 4.493465008472573e+216, 6.855277051969212e+178, 7.308354781037015e+216, 3.342143003550970e+178, -6.370283099823930e-01, -2.677111983277355e-01, 1.047635089440880e+200, -2.701227028093894e-01, 6.151886595886748e+64, 4.614523172072082e+161, 1.052865879207212e+249, -4.263548706876794e+00, 2.306058044508872e+168, 1.137707534709935e+284, -3.035255346089499e-01, -2.261941934512401e+00, 2.281790014769155e+168, 1.546128833384270e+236, 1.736044544161102e+225, -6.103831463931626e-01, 3.555590178838999e+207, 4.244571842349401e+162, 1.025700702015831e+241, 7.542267298132514e+226, 4.727497957298216e+159, 9.013605436077986e+226, 1.407359630843574e+198, 4.978650926508453e+244, -5.647114430743928e-01, 3.209576630642329e+245, -3.101263077039481e-01, 1.628318687725730e+223, -3.924452816967093e-01, 5.452054231346293e+174, 3.111984519248582e+197, -5.056820658550124e-01, 3.931686183751870e+255, 1.142651922421410e+255, 6.412081582954547e+251, -2.442932863027990e-01, 9.247889122400524e+252, 4.840111830023818e+256, 7.790131294131636e+266, 1.460144408565441e+52, 2.166547568475380e+182, 1.380340955183866e+231, 3.579900497074216e+258]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_zlp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.312840137958615e+01, -2.312848210361485e+01, -2.312881554746112e+01, -2.312761499519497e+01, -2.312824768643899e+01, -2.312824768643899e+01, -4.359244658039301e+00, -4.359299204731658e+00, -4.360661754465674e+00, "nan", -4.359410690902699e+00, -6.330486428469519e+155, -8.443883283311537e-01, -1.961139923788050e+245, -4.069031128863710e+158, -2.260426747932079e+211, -9.881013100626405e+157, -2.276332188561781e+211, -7.008759331353639e+96, -4.939572978757727e+213, -9.921318435624084e-01, -7.511978277631877e+228, -1.077740626210316e+214, -8.942991680379367e+242, -3.404665404117164e+174, -2.165710755836129e+205, -2.167154231999554e+226, -1.182105662262907e+235, -4.186352049632624e+276, -3.498538656519209e+186, -1.463913384584350e+168, -2.944498736986715e+241, -1.926052513894408e+203, -6.556008415399702e+00, -1.752517619188940e+222, -2.435569905835537e+174, -2.318021153282188e+00, -2.341569993943071e+00, -2.289364861887381e+00, -2.310335904971460e+00, -2.344742381694242e+00, -7.485941907488277e+156, -1.197763621486889e+178, -1.511264864718441e+216, -2.303052671819914e+178, -2.455890344969790e+216, -1.123509537319348e+178, -7.873181267322803e-01, 1.041939515000434e-01, -3.502616862816433e+199, 1.263063882209794e-01, -2.095557595592292e+64, -1.541231989259342e+161, -3.516529255405524e+248, 5.677381478083661e+00, -7.687576737691358e+167, -3.792635585528104e+283, 2.473450642334110e-01, 3.007284616359263e+00, -7.606624898679725e+167, -5.197133221005343e+235, -5.835281773322329e+224, -7.989527310103175e-01, -1.195153553852310e+207, -1.426735286727650e+162, -3.447705539075772e+240, -2.534770329973847e+226, -1.587253777618428e+159, -3.027160976786930e+226, -4.727830641902048e+197, -1.672273949709812e+244, -6.950706571558917e-01, -1.079842302083276e+245, -1.918948514381269e-01, -5.450990646406516e+222, -4.349760857252717e-01, -1.826106966102530e+174, -1.042325767108116e+197, -5.730502992044882e-01, -1.311507105963754e+255, -3.812446337032622e+254, -2.148590529326473e+251, 1.253899641265014e-01, -3.086989509659484e+252, -1.613714264586602e+256, -2.596783152879904e+266, -4.867416417875432e+51, -7.231495148035620e+181, -4.601507602799428e+230, -1.193396406350793e+258]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.348752582893520e-09, -4.348702474215320e-09, -4.348464247574895e-09, -4.349210108631091e-09, -4.348821471649981e-09, -4.348821471649981e-09, -7.076794110800460e-06, -7.076732480125143e-06, -7.074608709368010e-06, -7.072880597552880e-06, -7.076031945934933e-06, -7.076031945934933e-06, -5.280135283020079e-03, -5.303540351434223e-03, -5.907947344127068e-03, -5.715360142716262e-03, -5.755651937406188e-03, -5.755651937406188e-03, -1.196862458451406e+00, -1.126969782758732e+00, -2.851740880497651e-03, -3.605654014897684e+00, -2.267061268542784e+00, -2.267061268542784e+00, -8.177020740879842e+05, -6.662462376457667e+05, -7.186276591767912e+02, -7.350595051088942e+06, -2.948195114472577e+06, -2.948195114472577e+06, -1.385278933660921e-06, -1.384250058361637e-06, -1.385227667656275e-06, -1.384319412155947e-06, -1.384759368591055e-06, -1.384759368591055e-06, -7.170088132460641e-05, -6.964650483811619e-05, -7.324856086402937e-05, -7.138028011526864e-05, -6.983698332927143e-05, -6.983698332927143e-05, -9.029209763047321e-03, -6.478211447968723e-03, -1.232506408782298e-02, -1.055209381524666e-02, -8.468516407546317e-03, -8.468516407546317e-03, -1.552947523459047e+01, -1.189614187098494e+00, -2.120363224260269e+01, -7.749082887118513e-05, -8.185513914054752e+00, -8.185513914054752e+00, -2.074142000655703e+07, -8.048207041384462e+06, -2.354303250011862e+07, -1.036729552540080e+02, -1.117776055687955e+07, -1.117776055687955e+07, -8.855593173262262e-03, -9.062169907072615e-03, -8.988799100448270e-03, -8.928922710927871e-03, -8.958831028379266e-03, -8.958831028379266e-03, -9.886803737757840e-03, -1.822857611817221e-02, -1.515490133508640e-02, -1.272017635662274e-02, -1.389709377812720e-02, -1.389709377812720e-02, -5.360576133784672e-03, -4.665006548792752e-01, -2.240989294065001e-01, -7.352371492766531e-02, -1.286407902505955e-01, -1.286407902505955e-01, -2.538889762832258e-02, -8.563271814593451e+02, -2.478064159790648e+02, -8.514852788307489e-02, -3.942613786298352e+01, -3.942613786298350e+01, -2.061017242443139e+05, -1.576495655103937e+09, -8.120700702041957e+07, -5.070845240890996e+01, -1.524766479982568e+07, -1.524766479982573e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [8.407534794122451e-05, 8.407508259934250e-05, 8.407382108021365e-05, 8.407777058538473e-05, 8.407571272608529e-05, 8.407571272608529e-05, 5.904359833207197e-04, 5.904346644758607e-04, 5.903892123074686e-04, 5.903522203528094e-04, 5.904196730265150e-04, 5.904196730265150e-04, 3.161160789303327e-03, 3.164682570259435e-03, 3.251838255728937e-03, 3.224823650114332e-03, 3.230531296978963e-03, 3.230531296978963e-03, 1.233590250272586e-02, 1.215131104892757e-02, 2.706846237583012e-03, 1.626095094862216e-02, 1.447676700453806e-02, 1.447676700453806e-02, 3.555284819929445e-01, 3.377782246278896e-01, 6.118348215308386e-02, 6.156420597588806e-01, 4.899241522046845e-01, 4.899241522046845e-01, 3.879039758468550e-04, 3.878293944749019e-04, 3.879002606441156e-04, 3.878344231123830e-04, 3.878663186602008e-04, 3.878663186602008e-04, 1.066252482006615e-03, 1.058403434529226e-03, 1.072055081188450e-03, 1.065038767435539e-03, 1.059138424190780e-03, 1.059138424190780e-03, 3.618129351861574e-03, 3.328138532608210e-03, 3.912679125030133e-03, 3.762796949513530e-03, 3.560242113146415e-03, 3.560242113146415e-03, 2.343856148384546e-02, 1.231714107223050e-02, 2.533884166129632e-02, 1.087502728963343e-03, 1.996670871083939e-02, 1.996670871083939e-02, 7.979293545301025e-01, 6.297571956542538e-01, 8.236091945098750e-01, 3.769444711494589e-02, 6.836588764076428e-01, 6.836588764076428e-01, 3.600500019150416e-03, 3.621447424548314e-03, 3.614048826371631e-03, 3.607977359558220e-03, 3.611013866208334e-03, 3.611013866208334e-03, 3.701662827324881e-03, 4.317230796783306e-03, 4.121397115258144e-03, 3.943849289125827e-03, 4.032586314616759e-03, 4.032586314616759e-03, 3.173216260603119e-03, 9.741324469723386e-03, 8.105468331736188e-03, 6.128259768729544e-03, 7.051923132602008e-03, 7.051923132602008e-03, 4.692093682864447e-03, 6.392616244316718e-02, 4.687736059279582e-02, 6.358260053442675e-03, 2.959420577796436e-02, 2.959420577796435e-02, 2.518984373145245e-01, 2.356106291447680e+00, 1.122432888957295e+00, 3.151801910329079e-02, 7.388456198869504e-01, 7.388456198869511e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
