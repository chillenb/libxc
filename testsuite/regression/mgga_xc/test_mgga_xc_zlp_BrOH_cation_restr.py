
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_xc_zlp_BrOH_cation_restr_1_zk() not generated due to NaN

# test_mgga_xc_zlp_BrOH_cation_restr_1_vrho() not generated due to NaN


def test_mgga_xc_zlp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.348752582893520e-09, -4.348702474215320e-09, -4.348464247574895e-09, -4.349210108631091e-09, -4.348821471649981e-09, -4.348821471649981e-09, -7.076794110800460e-06, -7.076732480125143e-06, -7.074608709368010e-06, -7.072880597552880e-06, -7.076031945934933e-06, -7.076031945934933e-06, -5.280135283020079e-03, -5.303540351434223e-03, -5.907947344127068e-03, -5.715360142716262e-03, -5.755651937406188e-03, -5.755651937406188e-03, -1.196862458451406e+00, -1.126969782758732e+00, -2.851740880497651e-03, -3.605654014897684e+00, -2.267061268542784e+00, -2.267061268542784e+00, -8.177020740879842e+05, -6.662462376457667e+05, -7.186276591767912e+02, -7.350595051088942e+06, -2.948195114472577e+06, -2.948195114472577e+06, -1.385278933660921e-06, -1.384250058361637e-06, -1.385227667656275e-06, -1.384319412155947e-06, -1.384759368591055e-06, -1.384759368591055e-06, -7.170088132460641e-05, -6.964650483811619e-05, -7.324856086402937e-05, -7.138028011526864e-05, -6.983698332927143e-05, -6.983698332927143e-05, -9.029209763047321e-03, -6.478211447968723e-03, -1.232506408782298e-02, -1.055209381524666e-02, -8.468516407546317e-03, -8.468516407546317e-03, -1.552947523459047e+01, -1.189614187098494e+00, -2.120363224260269e+01, -7.749082887118513e-05, -8.185513914054752e+00, -8.185513914054752e+00, -2.074142000655703e+07, -8.048207041384462e+06, -2.354303250011862e+07, -1.036729552540080e+02, -1.117776055687955e+07, -1.117776055687955e+07, -8.855593173262262e-03, -9.062169907072615e-03, -8.988799100448270e-03, -8.928922710927871e-03, -8.958831028379266e-03, -8.958831028379266e-03, -9.886803737757840e-03, -1.822857611817221e-02, -1.515490133508640e-02, -1.272017635662274e-02, -1.389709377812720e-02, -1.389709377812720e-02, -5.360576133784672e-03, -4.665006548792752e-01, -2.240989294065001e-01, -7.352371492766531e-02, -1.286407902505955e-01, -1.286407902505955e-01, -2.538889762832258e-02, -8.563271814593451e+02, -2.478064159790648e+02, -8.514852788307489e-02, -3.942613786298352e+01, -3.942613786298350e+01, -2.061017242443139e+05, -1.576495655103937e+09, -8.120700702041957e+07, -5.070845240890996e+01, -1.524766479982568e+07, -1.524766479982573e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [8.407534794122451e-05, 8.407508259934250e-05, 8.407382108021365e-05, 8.407777058538473e-05, 8.407571272608529e-05, 8.407571272608529e-05, 5.904359833207197e-04, 5.904346644758607e-04, 5.903892123074686e-04, 5.903522203528094e-04, 5.904196730265150e-04, 5.904196730265150e-04, 3.161160789303327e-03, 3.164682570259435e-03, 3.251838255728937e-03, 3.224823650114332e-03, 3.230531296978963e-03, 3.230531296978963e-03, 1.233590250272586e-02, 1.215131104892757e-02, 2.706846237583012e-03, 1.626095094862216e-02, 1.447676700453806e-02, 1.447676700453806e-02, 3.555284819929445e-01, 3.377782246278896e-01, 6.118348215308386e-02, 6.156420597588806e-01, 4.899241522046845e-01, 4.899241522046845e-01, 3.879039758468550e-04, 3.878293944749019e-04, 3.879002606441156e-04, 3.878344231123830e-04, 3.878663186602008e-04, 3.878663186602008e-04, 1.066252482006615e-03, 1.058403434529226e-03, 1.072055081188450e-03, 1.065038767435539e-03, 1.059138424190780e-03, 1.059138424190780e-03, 3.618129351861574e-03, 3.328138532608210e-03, 3.912679125030133e-03, 3.762796949513530e-03, 3.560242113146415e-03, 3.560242113146415e-03, 2.343856148384546e-02, 1.231714107223050e-02, 2.533884166129632e-02, 1.087502728963343e-03, 1.996670871083939e-02, 1.996670871083939e-02, 7.979293545301025e-01, 6.297571956542538e-01, 8.236091945098750e-01, 3.769444711494589e-02, 6.836588764076428e-01, 6.836588764076428e-01, 3.600500019150416e-03, 3.621447424548314e-03, 3.614048826371631e-03, 3.607977359558220e-03, 3.611013866208334e-03, 3.611013866208334e-03, 3.701662827324881e-03, 4.317230796783306e-03, 4.121397115258144e-03, 3.943849289125827e-03, 4.032586314616759e-03, 4.032586314616759e-03, 3.173216260603119e-03, 9.741324469723386e-03, 8.105468331736188e-03, 6.128259768729544e-03, 7.051923132602008e-03, 7.051923132602008e-03, 4.692093682864447e-03, 6.392616244316718e-02, 4.687736059279582e-02, 6.358260053442675e-03, 2.959420577796436e-02, 2.959420577796435e-02, 2.518984373145245e-01, 2.356106291447680e+00, 1.122432888957295e+00, 3.151801910329079e-02, 7.388456198869504e-01, 7.388456198869511e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
