
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_lp90_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.971585748515994e+01, -1.971589911818143e+01, -1.971611914983546e+01, -1.971543682311658e+01, -1.971587915392077e+01, -1.971587915392077e+01, -3.470121922545569e+00, -3.470131422149255e+00, -3.470549845217285e+00, -3.470806236879844e+00, -3.470139944912713e+00, -3.470139944912713e+00, -6.708509900029752e-01, -6.701818649654425e-01, -6.531373314808000e-01, -6.590751901843419e-01, -6.706085802819782e-01, -6.706085802819782e-01, -1.869466107783896e-01, -1.892770392195197e-01, -7.941504138627774e-01, -1.348682276963776e-01, -1.876407100395026e-01, -1.876407100395026e-01, -3.224739005128734e-02, -3.185261428117244e-02, -5.193426826197072e-02, 5.147761426878192e-03, -3.151012600297944e-02, -3.151012600297944e-02, -4.697739619061049e+00, -5.075153640192982e+00, -7.403240152594587e+00, -4.508666436850314e+00, -5.212081374558080e+00, -5.120332692533654e+00, -4.220508709593210e+00, -1.962553159499741e+00, -1.968863747626490e+00, -1.978936613244974e+00, -1.989310264376872e+00, -2.003966050626073e+00, -4.766665870706899e-01, -6.043344480994772e-01, -4.863323418919827e-01, -5.792983635336265e-01, -6.088802569692774e-01, -6.063686142016300e-01, -1.566321164614593e-01, -1.511094553882181e-01, -3.975006143785984e-01, -1.917377526106624e+00, -1.197674814790474e-01, -1.232642407985159e-01, 1.102065795186661e+00, 7.869256977997286e+02, -1.019790638174295e+03, -1.344284405339880e-01, 3.265359158060026e-01, -6.128617643393737e+00, 5.968076499657914e+02, -2.129936261145090e+02, -4.039283963678299e+03, 5.285988429024172e+00, -1.661844860270361e+02, 7.668133980032557e+03, -2.897015472048058e+03, -5.110745348101797e-01, -4.781138076916222e-01, -5.605001879604191e-01, -5.392701668226982e-01, -4.158952131539442e-01, -5.467738730910827e-01, -6.677008767620886e-01, -1.056695879212557e+00, -4.485179025044423e-01, -3.078800608256635e-01, -3.128049577624192e-01, -4.602531435393423e-01, 1.108071572585092e-01, -5.237499866775799e-02, -3.360011205433757e-01, -2.709830562498060e-01, -8.750968796813227e-02, -8.214143614626483e-01, 2.138334670619489e+01, -6.615023334406207e+00, -9.627737093865478e-02, -4.027798797880677e-01, -5.800515812541354e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_lp90_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.517008072746822e+01, -2.517013743894984e+01, -2.517042541112330e+01, -2.516949599586889e+01, -2.517011034301102e+01, -2.517011034301102e+01, -4.564004511634107e+00, -4.564016994956750e+00, -4.564538021550311e+00, -4.564499998781342e+00, -4.564030420141798e+00, -4.564030420141798e+00, -8.880881266622933e-01, -8.870763694919933e-01, -8.603212621562146e-01, -8.669743508199220e-01, -8.877190977079059e-01, -8.877190977079059e-01, -2.384467125274333e-01, -2.420943472847894e-01, -1.069491377621572e+00, -1.656065866579124e-01, -2.395496612660585e-01, -2.395496612660585e-01, 1.114841144077901e-01, 1.049801873108617e-01, -1.562117935630102e-02, 2.834492507536224e-01, 1.040957550078950e-01, 1.040957550078950e-01, -6.928238642257806e+00, -6.800784034597152e+00, -6.003169872402100e+00, -6.994324670321630e+00, -6.753163858019851e+00, -6.784540512900270e+00, -1.811732697464092e+00, -2.595096914755536e+00, -2.559549549080013e+00, -2.574321545010928e+00, -2.591707641802020e+00, -2.586773567369924e+00, -8.135015335745434e-01, -8.571711641588352e-01, -7.604950375748778e-01, -7.712716632739949e-01, -8.070017678844570e-01, -8.078415571016936e-01, -9.168017605597983e-02, -2.473985526241438e-01, -1.055765342175345e-02, -2.555536541770802e+00, -1.347353948273008e-01, -1.335691385476900e-01, -8.000533281125816e-02, -2.620668359769380e+02, 3.401339501848840e+02, -2.979410933513086e-02, 1.159013413005398e-01, 2.267673257681982e+00, -2.005509313463020e+02, 7.021255764017846e+01, 1.349525754707607e+03, -2.772263960098416e+00, 5.455960002299829e+01, -2.564839836127451e+03, 9.675538602798362e+02, -6.702719905860232e-01, -7.204817515091313e-01, -7.291707558146046e-01, -7.178420401313109e-01, -7.590794366246185e-01, -9.274994228619839e-01, -1.564868081362759e-01, -1.018113392551432e-01, -4.366048026517607e-01, -4.139474938858890e-01, -4.123032586004372e-01, -6.046523865678002e-01, -5.680029543999866e-02, -4.038435810460947e-02, -4.430957700609734e-01, -2.309423298618457e-02, -8.427669648652497e-02, 3.696350624402084e-01, -6.410742307225139e+00, 2.608407033467839e+00, -7.633288562618853e-02, 3.541596302423786e-01, 2.153443361452902e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.542256521689323e-10, -6.542191435994643e-10, -6.541853154172847e-10, -6.542919947134796e-10, -6.542222598274385e-10, -6.542222598274385e-10, -1.014980508719272e-06, -1.014971950956112e-06, -1.014568973674369e-06, -1.014399303398108e-06, -1.014958737036293e-06, -1.014958737036293e-06, -7.625465742206985e-04, -7.656883114201667e-04, -8.530658428860023e-04, -8.267002016195993e-04, -7.636905800103473e-04, -7.636905800103473e-04, -1.364826475346059e-01, -1.294476103744667e-01, -3.693393362783759e-04, -4.941266766168825e-01, -1.343232971934769e-01, -1.343232971934769e-01, -1.403936812996360e+04, -1.166292615459289e+04, -4.272454523680985e+01, -2.650710042765863e+05, -1.216202532822171e+04, -1.216202532822171e+04, -2.005601809624117e-07, -2.004166398022549e-07, -2.005450301483805e-07, -2.004334249079671e-07, -2.004872077970270e-07, -2.004872077970270e-07, -1.024064368726488e-05, -9.956348680098581e-06, -1.035844302039806e-05, -1.013251124383417e-05, -9.900596480864343e-06, -9.900596480864343e-06, -1.327866057348812e-03, -9.535080094121424e-04, -1.638089529317303e-03, -1.383893944564978e-03, -1.141850713784623e-03, -1.141850713784623e-03, -1.696113103377721e+00, -1.326395162306611e-01, -1.785941852958241e+00, -1.106724778040690e-05, -9.485944698610392e-01, -9.485944698610392e-01, -3.060672841926539e+05, -1.794232826195068e+05, -5.685693645511514e+05, -1.131275773439557e+01, -2.603219073036491e+05, -2.603219073036491e+05, -1.171133761664550e-03, -1.196499659814519e-03, -1.187328281084358e-03, -1.180312603133413e-03, -1.183817460806524e-03, -1.183817460806524e-03, -1.334492614417807e-03, -2.357313628726099e-03, -1.979972455095916e-03, -1.695254847636073e-03, -1.833429671674413e-03, -1.833429671674413e-03, -7.888320272103933e-04, -5.299037742630732e-02, -2.662727976003127e-02, -9.963998648009547e-03, -1.628596989008922e-02, -1.628596989008923e-02, -3.563044811564343e-03, -5.806430822828227e+01, -1.728628991145099e+01, -1.250386626972485e-02, -3.908428211892175e+00, -3.908428211892174e+00, -7.441233171575288e+03, -3.193473979103908e+07, -2.452331081162513e+06, -4.718217089728865e+00, -4.990075737824275e+05, -4.990075737824304e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.264730817966342e-05, 1.264727445459062e-05, 1.264709916504891e-05, 1.264765192865145e-05, 1.264729060179765e-05, 1.264729060179765e-05, 8.467082939568565e-05, 8.467064858944562e-05, 8.466213329346402e-05, 8.465854723925235e-05, 8.467036940686843e-05, 8.467036940686843e-05, 4.480473917805746e-04, 4.485093502519939e-04, 4.608224276183853e-04, 4.572108196390462e-04, 4.482157704287714e-04, 4.482157704287714e-04, 1.641845978032543e-03, 1.620251820964888e-03, 3.735888809951995e-04, 2.265198071047887e-03, 1.635308433214410e-03, 1.635308433214410e-03, 2.942299628838296e-02, 2.808995749945880e-02, 6.909777379560248e-03, 6.133373291616185e-02, 2.838578192089405e-02, 2.838578192089405e-02, 5.608715300113691e-05, 5.607692077398180e-05, 5.608607324560618e-05, 5.607811757165045e-05, 5.608195184849676e-05, 5.608195184849676e-05, 1.517767345293507e-04, 1.507043110143851e-04, 1.522145626110687e-04, 1.513714981465600e-04, 1.504913150284887e-04, 1.504913150284887e-04, 5.148601569127402e-04, 4.738584144735191e-04, 5.426682745360065e-04, 5.202191436485233e-04, 4.957537183324134e-04, 4.957537183324134e-04, 3.083676142643063e-03, 1.630155785291235e-03, 3.123733406947120e-03, 1.547729944294619e-04, 2.666551015331012e-03, 2.666551015331012e-03, 6.357895083190566e-02, 5.563238852876944e-02, 7.422601084010456e-02, 4.956308533286896e-03, 6.105714376760266e-02, 6.105714376760266e-02, 4.989092897830328e-04, 5.015952612421784e-04, 5.006290858834936e-04, 4.998862212261835e-04, 5.002577506031883e-04, 5.002577506031883e-04, 5.155027186970172e-04, 5.944755129836859e-04, 5.690588285753485e-04, 5.473518449714426e-04, 5.582021452738183e-04, 5.582021452738183e-04, 4.518692950152392e-04, 1.295780017342316e-03, 1.090790965640544e-03, 8.528861649165819e-04, 9.645028666043604e-04, 9.645028666043604e-04, 6.592755478628820e-04, 7.460661636376376e-03, 5.510636865152434e-03, 9.027675489766364e-04, 3.799584308130168e-03, 3.799584308130168e-03, 2.510488949656237e-02, 2.032031215858296e-01, 1.069687924311010e-01, 3.982777753049752e-03, 7.184339018942366e-02, 7.184339018942378e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
