
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_lp90_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.958892474882765e+01, -1.958896510862098e+01, -1.958918034266532e+01, -1.958851875497683e+01, -1.958894573971150e+01, -1.958894573971150e+01, -3.482616869063936e+00, -3.482620140987795e+00, -3.482851042331121e+00, "nan", -3.482633127952526e+00, 2.632249126299055e+155, -6.809311912257603e-01, 8.415371638262127e+244, 1.746641646456353e+158, 9.719296457688183e+210, 3.897355793832965e+157, 8.978508937729562e+210, 2.390525768965794e+96, 1.696967249402235e+213, -8.126441823784913e-01, 3.081067170798819e+228, 1.910677724687863e+213, 1.585462641030224e+242, 1.753397153246949e+173, 1.137164789149559e+204, 3.862417571924535e+225, 1.278721460167358e+234, 5.180311462126190e+274, 4.329191546288724e+184, 6.070154093000665e+167, 1.220969226722392e+241, 7.986115481817955e+202, -5.151241715317059e+00, 7.266917346239410e+221, 1.009923381248861e+174, -1.992710741960042e+00, -2.005859385304943e+00, -1.988161926071546e+00, -1.998412411941097e+00, -2.007531139699890e+00, 3.114141826035622e+156, 5.240490824417684e+177, 6.613792880958281e+215, 9.111155511551970e+177, 9.584816154302934e+215, 4.506371825381726e+177, -6.112904951105256e-01, -1.181781964770857e-01, 1.168091411120660e+199, -1.156144730320016e-01, 8.786130470590400e+63, 5.347631447498040e+160, 1.220134448499896e+248, -3.000828366852075e-01, 5.141027090000495e+166, 2.747588485263421e+282, -8.851196617300089e-02, -2.379989289597650e-01, 5.314122857512281e+166, 2.044723194970687e+235, 2.292140544496377e+224, -6.029135228112524e-01, 4.700127927554817e+206, 5.608765523876579e+161, 1.355358078259812e+240, 1.018033762204061e+226, 6.113585225893832e+158, 1.177618388264847e+226, 1.875629055498670e+197, 6.568284332898856e+243, -5.433293610680967e-01, 4.723031213156522e+244, -2.435592133007862e-01, 1.934757000017260e+222, -3.587915532576604e-01, 6.902320086643609e+173, 3.939783491704069e+196, -4.630314305032742e-01, 2.665927736186028e+254, 7.970823645067362e+253, 9.415994922886498e+250, -9.929320702826169e-02, 9.167702622066002e+251, 1.747506035466894e+255, 1.578030456415832e+265, 4.409419393095355e+50, 2.015885178443133e+181, 4.517416929618587e+229, 1.171587574149674e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_lp90_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.521656220107332e+01, -2.521661938792366e+01, -2.521690916436668e+01, -2.521597200513152e+01, -2.521659206960408e+01, -2.521659206960408e+01, -4.559766679713306e+00, -4.559781275088557e+00, -4.560365895275202e+00, "nan", -4.559793185946748e+00, -8.927633552076798e+154, -8.847166323667175e-01, -2.814654040063243e+244, -5.841393985385727e+157, -3.250564217057536e+210, -1.303535109977994e+157, -3.003010824441886e+210, -7.975851216582375e+95, -5.661903437799370e+212, -1.063301678463494e+00, -1.027717033327196e+228, -6.374889622636321e+212, -5.289824237121046e+241, -5.844961898580953e+172, -3.790756301427296e+203, -1.287758254593410e+225, -4.262511479995568e+233, -1.726863804741063e+274, -1.443141834180101e+184, -2.075895823640939e+167, -4.175538193223436e+240, -2.731125303705230e+202, -6.774573329900858e+00, -2.485175291747449e+221, -3.453784478416468e+173, -2.561690284677901e+00, -2.580517470891459e+00, -2.553053262120016e+00, -2.567765116055896e+00, -2.585573330511378e+00, -1.048419190925443e+156, -1.752004679079534e+177, -2.211689448316510e+215, -3.045589680649352e+177, -3.204305740558662e+215, -1.506743919382904e+177, -8.061958841703933e-01, -1.045045201910375e-01, -3.897295549613824e+198, -1.045658033988375e-01, -2.957179162491226e+63, -1.783568208988631e+160, -4.069452119880940e+247, 3.873888220131847e-01, -1.713722952196454e+166, -9.158817576104998e+281, -4.510433552582058e-02, 3.040843509912235e-01, -1.771418792772021e+166, -6.836574910599375e+234, -7.663695724594894e+223, -8.016810578900796e-01, -1.571488334780062e+206, -1.875287214119569e+161, -4.531631183179813e+239, -3.403485374278677e+225, -2.043093931171438e+158, -3.935920776695424e+225, -6.269523359380538e+196, -2.195412741906684e+243, -7.164852768859098e-01, -1.579652927815469e+244, -2.980343591690438e-01, -6.458235242465583e+221, -4.665671931784787e-01, -2.304421469866850e+173, -1.315343471607190e+196, -6.037241457995906e-01, -8.888252401668001e+253, -2.657680503762401e+253, -3.143980819572975e+250, -8.034727211527166e-02, -3.057133775379399e+251, -5.825376045847578e+254, -5.260141234400126e+264, -1.469827544154076e+50, -6.722203685530344e+180, -1.505837797517395e+229, -3.905375305717569e+256]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.542256521689323e-10, -6.542191435994643e-10, -6.541853154172847e-10, -6.542919947134796e-10, -6.542222598274385e-10, -6.542222598274385e-10, -1.014980508719272e-06, -1.014971950956112e-06, -1.014568973674369e-06, -1.014399303398108e-06, -1.014958737036293e-06, -1.014958737036293e-06, -7.625465742206985e-04, -7.656883114201667e-04, -8.530658428860023e-04, -8.267002016195993e-04, -7.636905800103473e-04, -7.636905800103473e-04, -1.364826475346059e-01, -1.294476103744667e-01, -3.693393362783759e-04, -4.941266766168825e-01, -1.343232971934769e-01, -1.343232971934769e-01, -1.403936812996360e+04, -1.166292615459289e+04, -4.272454523680985e+01, -2.650710042765863e+05, -1.216202532822171e+04, -1.216202532822171e+04, -2.005601809624117e-07, -2.004166398022549e-07, -2.005450301483805e-07, -2.004334249079671e-07, -2.004872077970270e-07, -2.004872077970270e-07, -1.024064368726488e-05, -9.956348680098581e-06, -1.035844302039806e-05, -1.013251124383417e-05, -9.900596480864343e-06, -9.900596480864343e-06, -1.327866057348812e-03, -9.535080094121424e-04, -1.638089529317303e-03, -1.383893944564978e-03, -1.141850713784623e-03, -1.141850713784623e-03, -1.696113103377721e+00, -1.326395162306611e-01, -1.785941852958241e+00, -1.106724778040690e-05, -9.485944698610392e-01, -9.485944698610392e-01, -3.060672841926539e+05, -1.794232826195068e+05, -5.685693645511514e+05, -1.131275773439557e+01, -2.603219073036491e+05, -2.603219073036491e+05, -1.171133761664550e-03, -1.196499659814519e-03, -1.187328281084358e-03, -1.180312603133413e-03, -1.183817460806524e-03, -1.183817460806524e-03, -1.334492614417807e-03, -2.357313628726099e-03, -1.979972455095916e-03, -1.695254847636073e-03, -1.833429671674413e-03, -1.833429671674413e-03, -7.888320272103933e-04, -5.299037742630732e-02, -2.662727976003127e-02, -9.963998648009547e-03, -1.628596989008922e-02, -1.628596989008923e-02, -3.563044811564343e-03, -5.806430822828227e+01, -1.728628991145099e+01, -1.250386626972485e-02, -3.908428211892175e+00, -3.908428211892174e+00, -7.441233171575288e+03, -3.193473979103908e+07, -2.452331081162513e+06, -4.718217089728865e+00, -4.990075737824275e+05, -4.990075737824304e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.264730817966342e-05, 1.264727445459062e-05, 1.264709916504891e-05, 1.264765192865145e-05, 1.264729060179765e-05, 1.264729060179765e-05, 8.467082939568565e-05, 8.467064858944562e-05, 8.466213329346402e-05, 8.465854723925235e-05, 8.467036940686843e-05, 8.467036940686843e-05, 4.480473917805746e-04, 4.485093502519939e-04, 4.608224276183853e-04, 4.572108196390462e-04, 4.482157704287714e-04, 4.482157704287714e-04, 1.641845978032543e-03, 1.620251820964888e-03, 3.735888809951995e-04, 2.265198071047887e-03, 1.635308433214410e-03, 1.635308433214410e-03, 2.942299628838296e-02, 2.808995749945880e-02, 6.909777379560248e-03, 6.133373291616185e-02, 2.838578192089405e-02, 2.838578192089405e-02, 5.608715300113691e-05, 5.607692077398180e-05, 5.608607324560618e-05, 5.607811757165045e-05, 5.608195184849676e-05, 5.608195184849676e-05, 1.517767345293507e-04, 1.507043110143851e-04, 1.522145626110687e-04, 1.513714981465600e-04, 1.504913150284887e-04, 1.504913150284887e-04, 5.148601569127402e-04, 4.738584144735191e-04, 5.426682745360065e-04, 5.202191436485233e-04, 4.957537183324134e-04, 4.957537183324134e-04, 3.083676142643063e-03, 1.630155785291235e-03, 3.123733406947120e-03, 1.547729944294619e-04, 2.666551015331012e-03, 2.666551015331012e-03, 6.357895083190566e-02, 5.563238852876944e-02, 7.422601084010456e-02, 4.956308533286896e-03, 6.105714376760266e-02, 6.105714376760266e-02, 4.989092897830328e-04, 5.015952612421784e-04, 5.006290858834936e-04, 4.998862212261835e-04, 5.002577506031883e-04, 5.002577506031883e-04, 5.155027186970172e-04, 5.944755129836859e-04, 5.690588285753485e-04, 5.473518449714426e-04, 5.582021452738183e-04, 5.582021452738183e-04, 4.518692950152392e-04, 1.295780017342316e-03, 1.090790965640544e-03, 8.528861649165819e-04, 9.645028666043604e-04, 9.645028666043604e-04, 6.592755478628820e-04, 7.460661636376376e-03, 5.510636865152434e-03, 9.027675489766364e-04, 3.799584308130168e-03, 3.799584308130168e-03, 2.510488949656237e-02, 2.032031215858296e-01, 1.069687924311010e-01, 3.982777753049752e-03, 7.184339018942366e-02, 7.184339018942378e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
