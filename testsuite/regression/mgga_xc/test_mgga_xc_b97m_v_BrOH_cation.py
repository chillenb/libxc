
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_b97m_v_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.269039623254533e+01, -2.269056913464740e+01, -2.269131312458997e+01, -2.427321424709538e+01, -2.427442431602967e+01, -2.585780059369260e+01, -3.393788371585497e+00, -3.662388983774453e+00, -3.667658182535835e+00, -3.665856108892012e+00, -3.665681119856031e+00, -3.397447950319715e+00, -6.066934596408416e-01, -6.425701139138825e-01, -6.367237342984724e-01, -6.258331998563663e-01, -5.913534583633713e-01, -6.471900171194960e-01, -2.042218020153272e-01, -2.066246876716258e-01, -6.866587454740452e-01, -1.607117072318044e-01, -1.948571376875752e-01, -2.015575084653385e-01, -1.435692815296429e-02, -1.624157967579708e-02, -6.480609121416053e-02, -8.881067737026429e-03, -1.175685667910626e-02, -1.175685667910626e-02, -6.358221958371986e+00, -6.360282775680809e+00, -6.358331917639748e+00, -6.360150607875678e+00, -6.109884205166797e+00, -6.110112426640510e+00, -2.003135196066179e+00, -2.033730467112011e+00, -1.979957006822745e+00, -2.007202057152457e+00, -1.899906022919824e+00, -2.031491898308332e+00, -6.527320850998908e-01, -7.518420090276303e-01, -6.141506422430423e-01, -6.626419774249444e-01, -6.723068298465370e-01, -7.043896155968311e-01, -1.220415671722584e-01, -2.039983638981640e-01, -1.155298473620721e-01, -2.248528148795504e+00, -1.374438824937742e-01, -1.374438824937742e-01, -7.718555314664053e-03, -8.704542029051970e-03, -6.862236997878489e-03, -9.317381871855361e-02, -8.365930749569300e-03, -8.365930749569296e-03, -6.376270731000604e-01, -6.175886695446592e-01, -7.090133361921429e-01, -6.677522171322038e-01, -7.123212679113257e-01, -6.643806068337739e-01, -6.103765536167356e-01, -5.402230311561330e-01, -5.843422907442772e-01, -6.312311864842391e-01, -6.278028851591976e-01, -6.039487784268447e-01, -7.653008808839716e-01, -2.479704399326587e-01, -2.867356376859481e-01, -3.747386918958182e-01, -3.361477508948245e-01, -3.261420748603345e-01, -5.108044348229221e-01, -5.446505628537560e-02, -7.399556677079644e-02, -3.845116806737602e-01, -1.029984911885980e-01, -1.029984911885981e-01, -1.866581345909031e-02, -2.620852145600120e-03, -5.240050187706926e-03, -9.223403031520566e-02, -7.763178192541761e-03, -8.933294713348607e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_b97m_v_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.613540646468534e+01, -3.613606321481776e+01, -3.613562260186023e+01, -3.613621999383525e+01, -3.613629972873822e+01, -3.613719426328995e+01, -3.614053643303039e+01, -3.454050862566898e+01, -3.614220955830029e+01, -3.454119106686193e+01, -3.455264559988558e+01, -3.455223031335739e+01, -5.390496002526482e+00, -5.084266322718708e+00, -5.425547573478818e+00, -5.425254878734807e+00, -5.429029564429868e+00, -5.429770522082957e+00, -5.428248004766471e+00, -5.428322498892491e+00, -5.423850733120247e+00, -5.431809645530538e+00, -5.083000493880023e+00, -5.397087240908985e+00, -8.812591830321088e-01, -8.877579459984817e-01, -8.858305605071426e-01, -8.794579235502251e-01, -8.743586382782220e-01, -8.680553181938833e-01, -8.485998848842665e-01, -8.645403960737691e-01, -8.918186450853576e-01, -8.125350577767529e-01, -9.150439548942275e-01, -8.504391385408767e-01, -2.468871490694925e-01, -2.223989126055077e-01, -2.505207948968453e-01, -2.241668770544675e-01, -8.890304426987501e-01, -9.622466320217394e-01, -1.873270597459832e-01, -1.859825885705747e-01, -2.202356870378193e-01, -2.182836249335217e-01, -2.267904062022437e-01, -1.527118437466443e-01, -1.800946935288888e-02, -1.884486802860636e-02, -2.213946176144713e-02, -1.981897687267827e-02, -8.235770965265717e-02, -8.066718538815236e-02, -1.157048927499583e-02, -1.142087738803352e-02, -1.602784387140697e-02, -1.044008978636424e-02, -1.602784387140697e-02, -1.044008978636428e-02, -8.134306919531083e+00, -8.132492066232432e+00, -8.137035072201392e+00, -8.135107144295352e+00, -8.134486288771853e+00, -8.132589493807913e+00, -8.136811894832181e+00, -8.134979038640971e+00, -8.959612451063519e+00, -8.128814759849810e+00, -8.130700505940355e+00, -8.957593839983133e+00, -2.952204089874292e+00, -2.953924723178064e+00, -2.991190694168687e+00, -2.991750757236400e+00, -2.918407567135059e+00, -2.929427997288674e+00, -2.952649434650579e+00, -2.964017323330287e+00, -2.963683767990970e+00, -2.793414883477463e+00, -2.998982786258445e+00, -2.977895084180511e+00, -9.023781866692659e-01, -9.268927383339000e-01, -8.500128704311452e-01, -8.418817037783467e-01, -8.091488649795970e-01, -8.550806843499617e-01, -8.681554987272504e-01, -8.789531799817824e-01, -9.113534132990961e-01, -9.277377665783690e-01, -9.201671113618461e-01, -9.070449386198629e-01, -1.353777243495573e-01, -1.358632396902358e-01, -2.426869618491392e-01, -2.271912210446596e-01, -1.282371412546712e-01, -1.295602900225235e-01, -3.022461303917040e+00, -3.021215072313703e+00, -1.569842250275151e-01, -1.562694084729535e-01, -1.569842250275151e-01, -1.562694084729543e-01, -1.080503810582840e-02, -9.293417894584950e-03, -1.120455703447775e-02, -1.133626098229749e-02, -8.692439956824033e-03, -9.093157648236153e-03, -1.136094818165059e-01, -1.139777996828949e-01, -9.016254483640011e-03, -1.153652609765253e-02, -9.016254483640017e-03, -1.153652609765253e-02, -1.095576434812387e+00, -1.103929936030231e+00, -8.530061212027740e-01, -8.638890191017083e-01, -9.950391824662485e-01, -9.978759692394759e-01, -9.986797345018175e-01, -1.018666306438162e+00, -9.965372019181096e-01, -9.992689325592343e-01, -9.973317718367662e-01, -9.810766628270163e-01, -1.037181383800028e+00, -1.047272115536213e+00, -7.496528485475435e-01, -7.631680466157538e-01, -7.695789980481678e-01, -8.277073712951069e-01, -6.889036023444597e-01, -6.885082903627747e-01, -7.442191997954926e-01, -7.430319168682556e-01, -7.385230855559015e-01, -8.590309037918505e-01, -9.502281034045590e-01, -1.098849129241072e+00, -3.031052289492138e-01, -3.036290606951852e-01, -3.685072185144093e-01, -3.310889677127510e-01, -5.129975950345966e-01, -4.739018684779335e-01, -4.104267302765702e-01, -4.105007895586271e-01, -3.867562268444243e-01, -4.366940502659110e-01, -6.792560494395878e-01, -6.885091969645928e-01, -6.768445700404993e-02, -6.845157410420574e-02, -8.809420700282038e-02, -8.925368431179125e-02, -4.907065871666593e-01, -5.154905660201827e-01, -1.165000367402720e-01, -1.158351252596965e-01, -1.165000367402723e-01, -1.158351252596967e-01, -2.295280397445675e-02, -2.442462818412844e-02, -3.431353560868878e-03, -3.437837918867620e-03, -6.385800566533684e-03, -7.124925255691093e-03, -1.134339768936460e-01, -1.159401173090879e-01, -8.569862947777524e-03, -1.070051825859080e-02, -8.580330287516825e-03, -1.281561561790264e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.257553650755205e-08, 0.000000000000000e+00, -4.258177410580232e-08, -4.257586875546713e-08, 0.000000000000000e+00, -4.258201467201834e-08, -4.257649383204934e-08, 0.000000000000000e+00, -4.258302941729026e-08, -4.254706345990362e-08, 0.000000000000000e+00, -4.026818372706934e-08, -4.255004075136813e-08, 0.000000000000000e+00, -4.026920271511316e-08, -4.023655977174565e-08, 0.000000000000000e+00, -4.024023552066155e-08, -2.468785528322235e-05, 0.000000000000000e+00, -1.960752860149183e-05, -2.426795647827884e-05, 0.000000000000000e+00, -2.426067146257787e-05, -2.441456756480087e-05, 0.000000000000000e+00, -2.443901382236608e-05, -2.435278641731836e-05, 0.000000000000000e+00, -2.435161259251527e-05, -2.426315500665521e-05, 0.000000000000000e+00, -2.447816085127566e-05, -1.960735206015007e-05, 0.000000000000000e+00, -2.490609485217264e-05, 2.667968590091416e-03, 0.000000000000000e+00, 2.058676148838199e-03, 4.616332266344739e-03, 0.000000000000000e+00, -8.800852618954223e-03, -7.242616695156290e-03, 0.000000000000000e+00, -7.270822890944502e-03, -8.695847744491680e-03, 0.000000000000000e+00, 6.201443798452032e-03, 1.855730260848327e-03, 0.000000000000000e+00, 8.732750994325581e-03, -7.551876623332186e-03, 0.000000000000000e+00, -7.317425756315120e-03, 3.238233828046556e+00, 0.000000000000000e+00, -1.453107086465067e+00, 2.900655971103793e+00, 0.000000000000000e+00, -1.427343030944090e+00, -2.849120593976195e-03, 0.000000000000000e+00, 6.623763674579682e-03, -1.220772906336009e+00, 0.000000000000000e+00, -1.402974631911834e+00, -1.027664346520248e+00, 0.000000000000000e+00, 3.928952829852863e+00, -1.187920445565017e+00, 0.000000000000000e+00, 5.477193576842753e+01, -5.480659352172241e+00, 0.000000000000000e+00, -8.590874786384413e+00, 4.720819541612358e+06, 0.000000000000000e+00, 8.410338077186896e+00, 4.865817466231019e+03, 0.000000000000000e+00, 1.101971551342326e-01, -5.312107973900771e+00, 0.000000000000000e+00, -4.761012240443604e+00, -1.214498048236103e+01, 0.000000000000000e+00, 3.458280251948064e+01, -1.214498048236335e+01, 0.000000000000000e+00, 3.458280251917262e+01, -1.199487689867879e-05, 0.000000000000000e+00, -1.200611468140017e-05, -1.198611779761861e-05, 0.000000000000000e+00, -1.199765397654770e-05, -1.199437533248599e-05, 0.000000000000000e+00, -1.200581439673965e-05, -1.198686702379407e-05, 0.000000000000000e+00, -1.199812428717313e-05, -1.460633610323435e-05, 0.000000000000000e+00, -1.202140637663337e-05, -1.200993428547444e-05, 0.000000000000000e+00, -1.462016712821208e-05, -1.930613961048198e-04, 0.000000000000000e+00, -1.939361724413664e-04, -1.960233425778777e-04, 0.000000000000000e+00, -1.968232506183380e-04, -1.900947574942584e-04, 0.000000000000000e+00, -1.916911870259298e-04, -1.928106532792073e-04, 0.000000000000000e+00, -1.944252158908980e-04, -2.037360148436386e-04, 0.000000000000000e+00, -1.281596144372942e-04, -1.969244713108822e-04, 0.000000000000000e+00, -1.960010298610636e-04, -4.556653519673935e-02, 0.000000000000000e+00, -5.147615948741782e-02, -4.012051958626966e-02, 0.000000000000000e+00, -3.930924672405006e-02, -4.467020615297444e-02, 0.000000000000000e+00, -4.547716605940232e-02, -5.386488555962535e-02, 0.000000000000000e+00, -5.188780102572703e-02, -4.362170759651369e-02, 0.000000000000000e+00, -5.489196572985117e-02, -4.269878452367833e-02, 0.000000000000000e+00, -4.817220377021162e-02, -2.107226048729747e+00, 0.000000000000000e+00, -2.131188940073989e+00, 4.436570979978898e+00, 0.000000000000000e+00, -9.270871430731245e-01, -2.156027775137112e+00, 0.000000000000000e+00, -2.534507316200487e+00, -4.597053627310369e-04, 0.000000000000000e+00, -4.607799345358371e-04, -1.824881685893217e+00, 0.000000000000000e+00, -2.574288519460767e+00, -1.824881685893219e+00, 0.000000000000000e+00, -2.574288519460767e+00, 1.377265129932262e+08, 0.000000000000000e+00, 5.569874771443343e+00, -4.769220142956537e+00, 0.000000000000000e+00, -4.180091282216799e+00, -2.321587416456259e+01, 0.000000000000000e+00, -4.594982640477642e+01, -1.154048693984553e+00, 0.000000000000000e+00, 5.991390368536737e+02, 1.418224151624991e+01, 0.000000000000000e+00, -3.807852441629529e+01, 1.418224151623241e+01, 0.000000000000000e+00, -3.807852441627168e+01, 4.764573722193579e-01, 0.000000000000000e+00, 4.806356857080058e-01, 1.441743001470502e-01, 0.000000000000000e+00, 1.506668804828421e-01, -1.184801435791865e-01, 0.000000000000000e+00, -1.171089758461849e-01, -1.213273296145642e-01, 0.000000000000000e+00, 3.363054065067074e-01, -1.200627796665451e-01, 0.000000000000000e+00, -1.186266803710539e-01, -1.196909624018013e-01, 0.000000000000000e+00, 2.857046631675026e-01, 4.729460397987405e-01, 0.000000000000000e+00, 4.818568744696474e-01, -7.927898011268106e-02, 0.000000000000000e+00, -8.119025971074538e-02, -8.611389570536333e-02, 0.000000000000000e+00, -9.957848874238562e-02, -7.415567846251694e-02, 0.000000000000000e+00, -7.264606783696664e-02, -8.496688946384737e-02, 0.000000000000000e+00, -8.386893102392050e-02, -8.638694600475275e-02, 0.000000000000000e+00, -1.076037637427030e-01, -3.411355421929425e-02, 0.000000000000000e+00, -4.349869816160578e-02, -3.689589005100180e-01, 0.000000000000000e+00, -3.668086598649880e-01, 2.932754108977185e-01, 0.000000000000000e+00, -3.419551273573446e-01, -1.307154355584153e-01, 0.000000000000000e+00, -2.028376237807210e-01, -2.292499335625358e-01, 0.000000000000000e+00, -2.311233582770394e-01, -2.744710756704422e-01, 0.000000000000000e+00, -4.777369540338034e-02, -8.408098829874257e-02, 0.000000000000000e+00, -8.501129391650250e-02, 3.561253206610314e+03, 0.000000000000000e+00, 3.509016280122888e+03, -3.166866407040956e+00, 0.000000000000000e+00, -3.736968580366497e+00, -2.750517097975503e-01, 0.000000000000000e+00, -3.010135469097800e-01, -3.280773772240131e+00, 0.000000000000000e+00, -4.728835145677482e+00, -3.280773772240116e+00, 0.000000000000000e+00, -4.728835145677486e+00, 7.680305029497023e+05, 0.000000000000000e+00, 7.340463456104441e+05, -5.029053270728190e+00, 0.000000000000000e+00, -5.084872391040046e+00, 2.718507067263304e+08, 0.000000000000000e+00, 2.627944500078130e+08, 2.121455419955549e+02, 0.000000000000000e+00, 2.012786351567606e+02, 1.642679493252627e+01, 0.000000000000000e+00, -3.663000997654615e+01, 7.782719185960495e+01, 0.000000000000000e+00, 5.956977950202180e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [3.461447205176321e-03, 3.462043074943625e-03, 3.461519130449366e-03, 3.462094396855371e-03, 3.461712415873736e-03, 3.462386082156102e-03, 3.460707357051042e-03, 5.015428251780099e-03, 3.461292200917772e-03, 5.015547912509731e-03, 5.014838273759295e-03, 5.014997851323197e-03, 1.718766975948623e-02, 7.125536539903344e-03, 1.718304564622868e-02, 1.717802595405958e-02, 1.726682151584506e-02, 1.728236671870033e-02, 1.723515370987632e-02, 1.723500725494881e-02, 1.716890412107680e-02, 1.731344622679745e-02, 7.119794516464114e-03, 1.732231333425612e-02, 9.354660710820922e-03, 9.752579545733765e-03, 8.622597595504693e-03, 3.494881420732738e-02, 2.995188574132611e-02, 2.961386606364151e-02, 3.237320752278845e-02, 7.838656447082350e-03, 9.729802375905108e-03, 6.834273781548221e-03, 3.367485528601701e-02, 2.852390884807801e-02, -1.474891815804330e-03, 5.909457381794452e-02, -4.049629041226003e-04, 5.910373118772035e-02, 1.721711023129052e-02, 3.120344569926405e-03, 2.815258028489879e-02, 3.079280835868147e-02, 3.551408402192392e-02, 9.602787212406051e-03, 4.999553141648776e-02, -5.074266927719683e-04, 8.451976936009985e-06, 1.469774163188596e-05, -2.797578000193655e-05, 1.839512057029579e-05, -1.382050257947689e-03, 1.225660698901697e-03, 1.869868178304511e-06, 1.628007744370626e-06, 1.505551399111922e-05, -3.582780109362196e-06, 1.505551399112526e-05, -3.582780109334852e-06, 1.608134125357717e-02, 1.608453062845867e-02, 1.602628694183170e-02, 1.603075011611181e-02, 1.607773376235502e-02, 1.608192912289103e-02, 1.603012432061926e-02, 1.603352524641064e-02, 1.662422276036257e-02, 1.606697047568531e-02, 1.606307962904154e-02, 1.662810398645410e-02, 2.420903114482509e-02, 2.430951520233669e-02, 2.499997768589702e-02, 2.507829510871020e-02, 2.349880471033189e-02, 2.379469496314440e-02, 2.418803747398674e-02, 2.449682498393331e-02, 2.525325289710541e-02, 9.372973301128656e-03, 2.520161539314758e-02, 2.479841893747258e-02, 1.146746774988259e-01, 4.938577617520797e-02, 2.256958838036505e-02, 1.208035853745771e-02, 9.143125415164363e-02, 1.075526584397284e-01, 1.185289112449926e-01, 1.178515736878611e-01, 1.077117174424032e-01, 5.007026156730886e-02, 1.076603686074302e-01, 1.166193002547291e-01, 1.126764337548972e-02, 1.170030945691321e-02, -6.597280416309962e-03, 4.567185835907770e-02, 8.380583945044769e-03, 1.110382988163428e-02, 4.271274163487822e-02, 4.274402738104376e-02, 2.070507994439766e-02, 2.819444634294730e-02, 2.070507994439783e-02, 2.819444634294788e-02, -1.208767657734875e-06, 6.483833641834238e-07, 1.444356736700475e-06, 1.454134304055535e-06, 3.898096849348031e-06, 7.113178096600352e-06, 4.428857861418931e-03, -5.018790196161429e-03, -1.597104490942504e-07, 1.302638833490624e-05, -1.597104490524402e-07, 1.302638833482197e-05, -3.085831958713230e-01, -2.944456655448307e-01, -3.604050195741746e-01, -3.596104825059445e-01, 1.293730203364027e-01, 1.322898141339239e-01, 1.354263695944777e-01, -3.620177411643544e-01, 1.323775533039965e-01, 1.352302926486390e-01, 1.323028197450981e-01, -3.723265452022030e-01, -3.603239131210397e-01, -3.470883894699982e-01, 1.215131560957820e-01, 4.331501957200685e-02, 1.225851529865833e-01, 6.129015114909350e-02, -1.307876873239188e-02, -1.634301513108439e-02, 8.360815969799187e-02, 8.069965372900449e-02, 8.383973452454413e-02, 7.225280633852552e-02, 7.351971284064034e-02, 6.784498507070785e-02, 4.390303190325415e-02, 4.378208220418258e-02, 7.731661335356864e-03, 5.508281469851043e-02, 2.707484329290043e-02, 8.971322510411846e-02, 6.547382430874368e-02, 6.602373136917770e-02, 6.812147525758244e-02, 1.779686749758119e-02, 1.024791568360635e-01, 1.074683870646344e-01, -8.639300565039494e-05, -9.032072037871731e-05, 1.591110901743295e-03, 2.060330999201733e-03, 1.196824826093028e-01, 1.516163912325459e-01, 8.398034684814088e-03, 1.270577041875028e-02, 8.398034684814317e-03, 1.270577041875020e-02, -2.945335386154525e-06, -3.680546278490937e-06, 3.914692517088585e-08, 3.973481460896897e-08, -2.310642012346811e-07, -3.487481508966568e-07, -3.588295708326094e-04, -5.138692927393643e-04, -4.431835058540811e-08, 1.014585138208647e-05, -4.220411727925316e-08, -8.117859025583450e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
