
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_b97m_v_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.565353824875844e+01, -2.565367725765556e+01, -2.565439667317765e+01, -2.565233674984884e+01, -2.565340153955856e+01, -2.565340153955856e+01, -3.313587514102092e+00, -3.313791400491215e+00, -3.319392219141680e+00, -3.319028323377470e+00, -3.318068975839355e+00, -3.318068975839355e+00, -6.034836724243360e-01, -6.025170105868144e-01, -5.796613653618459e-01, -5.914941083106602e-01, -5.911748824613484e-01, -5.911748824613484e-01, -2.047927063644327e-01, -2.071962015915325e-01, -6.281477568518309e-01, -1.557493980478215e-01, -1.932478275385478e-01, -1.932478275385477e-01, -1.435685851174317e-02, -1.500830277793336e-02, -6.032842415858360e-02, -8.880889120666140e-03, -1.175668391563655e-02, -1.175668391563655e-02, -6.354617041718504e+00, -6.356722560021623e+00, -6.354802108919954e+00, -6.356656979518569e+00, -6.355641640508518e+00, -6.355641640508518e+00, -1.958168442071158e+00, -1.994031173398090e+00, -1.941529678709886e+00, -1.973843259520499e+00, -1.986182269196409e+00, -1.986182269196409e+00, -6.508360708506172e-01, -7.174863161433759e-01, -5.680349681049145e-01, -6.011152335886264e-01, -6.683202961506564e-01, -6.683202961506566e-01, -1.195016683864199e-01, -1.996188542618277e-01, -1.132098786708712e-01, -2.005709459716008e+00, -1.352918374838473e-01, -1.352918374838473e-01, -7.054342408177157e-03, -8.704167977299960e-03, -6.862003942283584e-03, -8.571436601269718e-02, -8.366067626187407e-03, -8.366067626187407e-03, -6.871456404995153e-01, -6.337822843455116e-01, -6.415126374403171e-01, -6.562389753073057e-01, -6.477842725283031e-01, -6.477842725283031e-01, -6.943110763629808e-01, -5.629162781807211e-01, -6.052984363900298e-01, -6.228627403879718e-01, -6.187720977601290e-01, -6.187720977601290e-01, -7.422433635445972e-01, -2.462087367736454e-01, -2.887383280822402e-01, -3.681786155915287e-01, -3.268308491140404e-01, -3.268308491140404e-01, -4.926137292853630e-01, -5.836115550195894e-02, -7.357922832480519e-02, -3.643825902236389e-01, -1.015171748529086e-01, -1.015171748529086e-01, -1.923851923696492e-02, -2.620809836448861e-03, -5.191890429527015e-03, -9.752271057196629e-02, -7.763188228514874e-03, -7.763188228514880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_b97m_v_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.464501351428109e+01, -3.464472399853919e+01, -3.464513314488187e+01, -3.464481065690956e+01, -3.464548965942954e+01, -3.464532978607988e+01, -3.464414011156295e+01, -3.464360659339471e+01, -3.464509004323451e+01, -3.464427266271169e+01, -3.464509004323451e+01, -3.464427266271169e+01, -5.303136422072226e+00, -5.302726746056065e+00, -5.303395042758985e+00, -5.302875008519494e+00, -5.308209156622171e+00, -5.309113168273750e+00, -5.307682954413282e+00, -5.307620615273273e+00, -5.301716448442115e+00, -5.312074900859800e+00, -5.301716448442115e+00, -5.312074900859800e+00, -8.932931686745950e-01, -8.978849339985838e-01, -8.916222333775028e-01, -8.971086826120411e-01, -8.704270408274740e-01, -8.634412144105839e-01, -8.758067713391611e-01, -8.782452645499486e-01, -9.056244824306530e-01, -8.356743412014458e-01, -9.056244824306530e-01, -8.356743412014458e-01, -2.466965546331664e-01, -2.422536198408911e-01, -2.489567251518784e-01, -2.438744777580248e-01, -1.000018672700953e+00, -1.031790149030164e+00, -1.817281345070310e-01, -1.855510384645668e-01, -2.277505907307718e-01, -1.957602582728526e-01, -2.277505907307718e-01, -1.957602582728527e-01, -1.800894754149990e-02, -1.884478929112083e-02, -1.874599869734277e-02, -1.973075238580425e-02, -7.238998612132283e-02, -7.442788356550473e-02, -1.156956042192280e-02, -1.142038065993268e-02, -1.602688317740077e-02, -1.044083395947810e-02, -1.602688317740079e-02, -1.044083395947810e-02, -8.139642207884769e+00, -8.137517575592222e+00, -8.142383145914621e+00, -8.140141045274978e+00, -8.139700776837008e+00, -8.137528067728276e+00, -8.142040642029155e+00, -8.139928739524882e+00, -8.141104593380533e+00, -8.138832753476141e+00, -8.141104593380533e+00, -8.138832753476141e+00, -2.936033892053336e+00, -2.938043581808861e+00, -2.977195965469874e+00, -2.977997821175904e+00, -2.904655822179116e+00, -2.915520683369182e+00, -2.940826366882253e+00, -2.952093509933636e+00, -2.982660259285990e+00, -2.962540533122994e+00, -2.982660259285990e+00, -2.962540533122994e+00, -9.247144422346800e-01, -9.229069356647618e-01, -1.000682172799761e+00, -1.001541665374597e+00, -8.079268257368667e-01, -8.566434421170043e-01, -8.965404704365887e-01, -9.188445781849632e-01, -9.405383155148739e-01, -9.232406234834392e-01, -9.405383155148737e-01, -9.232406234834396e-01, -1.305235450510626e-01, -1.301285649741999e-01, -2.429042683008437e-01, -2.436200856307757e-01, -1.222912570298571e-01, -1.248243661767158e-01, -3.112446997002010e+00, -3.111506950374339e+00, -1.526875089496871e-01, -1.553725488799091e-01, -1.526875089496869e-01, -1.553725488799100e-01, -9.010429431379318e-03, -9.287279103359598e-03, -1.120324957009524e-02, -1.133456867871439e-02, -8.691926375945354e-03, -9.091866787690556e-03, -9.701571247381968e-02, -9.866153497185334e-02, -9.015695884515904e-03, -1.153748256647900e-02, -9.015695884515914e-03, -1.153748256647900e-02, -1.078185495256548e+00, -1.081795422897425e+00, -9.154403573544321e-01, -9.247527047542422e-01, -9.896781486934210e-01, -9.992060106833709e-01, -1.046238529715368e+00, -1.053187776355742e+00, -1.019692588921018e+00, -1.028036009686380e+00, -1.019692588921018e+00, -1.028036009686380e+00, -9.989010359345454e-01, -1.001961049762417e+00, -7.632561491926646e-01, -7.663270492392260e-01, -7.814755750011482e-01, -7.810969044642992e-01, -7.179426670759288e-01, -7.180726871049068e-01, -7.559511259486889e-01, -7.547617829450919e-01, -7.559511259486889e-01, -7.547617829450920e-01, -1.063324035462782e+00, -1.063560452204858e+00, -3.026328110111604e-01, -3.032243749850446e-01, -3.531547198237228e-01, -3.540696395174989e-01, -4.865672248530800e-01, -4.887062472170438e-01, -4.056799120538495e-01, -4.058053211578356e-01, -4.056799120538495e-01, -4.058053211578357e-01, -6.762868571607333e-01, -6.857072679653315e-01, -7.143326503296320e-02, -7.164923056490269e-02, -8.674687850653728e-02, -8.772644500776290e-02, -4.905685397518080e-01, -5.144928043706742e-01, -1.130385555377955e-01, -1.123802033193502e-01, -1.130385555377958e-01, -1.123802033193503e-01, -2.428895292570322e-02, -2.491794145969315e-02, -3.431292517420454e-03, -3.437560195260997e-03, -6.580335790477861e-03, -6.912786436779215e-03, -1.083319835047861e-01, -1.103939259771911e-01, -8.567340100037752e-03, -1.070163629226931e-02, -8.567340100037738e-03, -1.070163629226941e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.027865492419672e-08, 0.000000000000000e+00, -4.028381540738499e-08, -4.027888048631117e-08, 0.000000000000000e+00, -4.028397883959673e-08, -4.027920566047296e-08, 0.000000000000000e+00, -4.028455164207458e-08, -4.027670821941352e-08, 0.000000000000000e+00, -4.028136187682003e-08, -4.027882150025433e-08, 0.000000000000000e+00, -4.028234578358891e-08, -4.027882150025433e-08, 0.000000000000000e+00, -4.028234578358891e-08, -2.162319414634676e-05, 0.000000000000000e+00, -2.160943053953379e-05, -2.163198154325892e-05, 0.000000000000000e+00, -2.161450801912984e-05, -2.179522797158302e-05, 0.000000000000000e+00, -2.182112439268266e-05, -2.176059123867017e-05, 0.000000000000000e+00, -2.175204855729813e-05, -2.161862363956061e-05, 0.000000000000000e+00, -2.189789558994657e-05, -2.161862363956061e-05, 0.000000000000000e+00, -2.189789558994657e-05, -4.257529227996174e-03, 0.000000000000000e+00, -4.233022921482332e-03, -4.273514769803289e-03, 0.000000000000000e+00, -4.211417240977226e-03, -4.109883793210544e-03, 0.000000000000000e+00, -4.497310179435231e-03, -4.907685929596567e-03, 0.000000000000000e+00, -4.974459027890583e-03, -3.320801641630601e-03, 0.000000000000000e+00, -6.282172515039096e-03, -3.320801641630601e-03, 0.000000000000000e+00, -6.282172515039096e-03, -9.404102670027850e-01, 0.000000000000000e+00, -1.004417312705658e+00, -9.323775413240132e-01, 0.000000000000000e+00, -9.992204387863544e-01, 1.685118036694950e-03, 0.000000000000000e+00, 1.229642544671232e-03, -1.472532098689826e+00, 0.000000000000000e+00, -1.550854671114843e+00, -9.805419330367102e-01, 0.000000000000000e+00, 4.047324809093150e+00, -9.805419330367093e-01, 0.000000000000000e+00, 4.047324809093158e+00, -5.668482820812830e+00, 0.000000000000000e+00, -8.643823694815998e+00, -5.731558616964572e+00, 0.000000000000000e+00, -9.366388221663424e+00, -4.334484830079964e+00, 0.000000000000000e+00, -5.467731231778785e+00, -6.917446893191049e+00, 0.000000000000000e+00, -5.755955189125856e+00, -1.286984190121054e+01, 0.000000000000000e+00, 4.454577839561342e+01, -1.286984190121570e+01, 0.000000000000000e+00, 4.454577839537295e+01, -1.198286577949647e-05, 0.000000000000000e+00, -1.199479517707452e-05, -1.197387105122112e-05, 0.000000000000000e+00, -1.198612709807619e-05, -1.198262386287117e-05, 0.000000000000000e+00, -1.199468302863125e-05, -1.197490997167503e-05, 0.000000000000000e+00, -1.198679959423197e-05, -1.197822033491896e-05, 0.000000000000000e+00, -1.199054201135874e-05, -1.197822033491896e-05, 0.000000000000000e+00, -1.199054201135874e-05, -1.902558411487239e-04, 0.000000000000000e+00, -1.912963795044720e-04, -1.938198950608761e-04, 0.000000000000000e+00, -1.947412302802844e-04, -1.877740360281384e-04, 0.000000000000000e+00, -1.892994544079105e-04, -1.909939711365450e-04, 0.000000000000000e+00, -1.925598740203753e-04, -1.940933157647214e-04, 0.000000000000000e+00, -1.937146791154217e-04, -1.940933157647214e-04, 0.000000000000000e+00, -1.937146791154217e-04, -4.006470582653551e-02, 0.000000000000000e+00, -4.128394896579064e-02, -1.163686235377814e-02, 0.000000000000000e+00, -8.863640749445323e-03, -3.634094612254291e-02, 0.000000000000000e+00, -3.891196970348091e-02, -1.961643967479017e-02, 0.000000000000000e+00, -2.500033084710196e-02, -3.873210822915958e-02, 0.000000000000000e+00, -4.257613962317101e-02, -3.873210822915962e-02, 0.000000000000000e+00, -4.257613962317105e-02, -2.612179776373127e+00, 0.000000000000000e+00, -2.693651611366461e+00, -6.617087979649288e-01, 0.000000000000000e+00, -6.557305968793302e-01, -2.905139526931178e+00, 0.000000000000000e+00, -3.135576450390581e+00, -3.317715571370998e-04, 0.000000000000000e+00, -3.324647706099569e-04, -2.143157223416373e+00, 0.000000000000000e+00, -2.761984023506149e+00, -2.143157223416378e+00, 0.000000000000000e+00, -2.761984023506143e+00, -8.116633001936396e+00, 0.000000000000000e+00, -8.277430244262421e+00, -7.611129154076919e+00, 0.000000000000000e+00, -7.306320339450118e+00, -2.964140396974059e+01, 0.000000000000000e+00, -6.040056160188937e+01, -5.215909276518666e+00, 0.000000000000000e+00, -5.095786361690921e+00, 2.219467423722815e+01, 0.000000000000000e+00, -3.722148099069062e+01, 2.219467423745898e+01, 0.000000000000000e+00, -3.722148099068035e+01, 4.767272085179433e-01, 0.000000000000000e+00, 4.742174765728515e-01, 1.851491353236778e-01, 0.000000000000000e+00, 1.911128103936717e-01, 2.842767979416584e-01, 0.000000000000000e+00, 2.905201614762586e-01, 3.815413625850060e-01, 0.000000000000000e+00, 3.844078470810608e-01, 3.320940898751263e-01, 0.000000000000000e+00, 3.368848725643228e-01, 3.320940898751263e-01, 0.000000000000000e+00, 3.368848725643228e-01, 3.338802569698168e-01, 0.000000000000000e+00, 3.348247665373491e-01, -7.547852909315456e-02, 0.000000000000000e+00, -7.494485459363712e-02, -8.288170751603223e-02, 0.000000000000000e+00, -8.214053242052115e-02, -6.572639688060013e-02, 0.000000000000000e+00, -6.413733034257678e-02, -8.184497413676198e-02, 0.000000000000000e+00, -8.080851946516747e-02, -8.184497413676195e-02, 0.000000000000000e+00, -8.080851946516746e-02, -1.632864961315657e-02, 0.000000000000000e+00, -1.504266991982106e-02, -3.707474482619349e-01, 0.000000000000000e+00, -3.679781777494209e-01, -2.613576492692915e-01, 0.000000000000000e+00, -2.601218443135983e-01, -1.732452655291203e-01, 0.000000000000000e+00, -1.689563116094003e-01, -2.260186987164465e-01, 0.000000000000000e+00, -2.277056356298550e-01, -2.260186987164467e-01, 0.000000000000000e+00, -2.277056356298550e-01, -8.097272650092752e-02, 0.000000000000000e+00, -8.227537211377527e-02, -4.466964703313378e+00, 0.000000000000000e+00, -4.601375972855170e+00, -4.105533468285732e+00, 0.000000000000000e+00, -4.749144088005264e+00, -2.425910079489449e-01, 0.000000000000000e+00, -2.811252406409118e-01, -4.120597160172678e+00, 0.000000000000000e+00, -5.648485665069555e+00, -4.120597160172590e+00, 0.000000000000000e+00, -5.648485665069543e+00, -5.234361793115615e+00, 0.000000000000000e+00, -6.860597737435598e+00, -1.669292009329256e+01, 0.000000000000000e+00, -5.931407228297441e+01, -1.115437015401787e+01, 0.000000000000000e+00, -2.205963702608655e+01, -5.134808506536255e+00, 0.000000000000000e+00, -5.272543244836911e+00, 3.502628916539670e+00, 0.000000000000000e+00, -3.450011154973317e+01, 3.502628916716152e+00, 0.000000000000000e+00, -3.450011154972517e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_b97m_v_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_b97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [4.914513623593382e-03, 4.915185166192797e-03, 4.914542544572296e-03, 4.915205247249890e-03, 4.914660401021283e-03, 4.915371354151318e-03, 4.914349958519277e-03, 4.914962111357531e-03, 4.914540047813715e-03, 4.915139618706388e-03, 4.914540047813715e-03, 4.915139618706388e-03, 1.189678910056302e-02, 1.188682164218391e-02, 1.190102130172908e-02, 1.188888988837480e-02, 1.197497063889248e-02, 1.198707851702062e-02, 1.197733076978033e-02, 1.197071468032781e-02, 1.188671045530327e-02, 1.204147678051440e-02, 1.188671045530327e-02, 1.204147678051440e-02, 1.660536715149310e-02, 1.667089471095612e-02, 1.661678414277671e-02, 1.662852659694299e-02, 1.634261035158745e-02, 1.691728546177809e-02, 1.798374164545443e-02, 1.816050740940836e-02, 1.552519624056058e-02, 1.990666507987981e-02, 1.552519624056058e-02, 1.990666507987981e-02, 4.803411555312324e-02, 4.642783136531044e-02, 4.804275575408367e-02, 4.596488959891752e-02, 6.807142989438488e-03, 7.308889654169379e-03, 2.692549500433155e-02, 3.082359632827184e-02, 3.341493505026433e-02, 1.065062681288435e-02, 3.341493505026447e-02, 1.065062681288465e-02, 8.452177703243953e-06, 1.469799805858029e-05, 9.687210100984366e-06, 1.833204573518315e-05, 7.369824607160351e-04, 1.156014478454401e-03, 1.869984948828965e-06, 1.628151423883927e-06, 1.505583336167994e-05, -3.581213597196179e-06, 1.505583336171500e-05, -3.581213597155029e-06, 1.606764214183810e-02, 1.607162526544856e-02, 1.601331034650322e-02, 1.601851121247474e-02, 1.606439385948680e-02, 1.606927574275195e-02, 1.601738121835809e-02, 1.602145756644549e-02, 1.604022139426991e-02, 1.604506149432709e-02, 1.604022139426991e-02, 1.604506149432709e-02, 2.248373737012608e-02, 2.263188973857016e-02, 2.346456595783718e-02, 2.358386797256740e-02, 2.209268373871061e-02, 2.233865091621805e-02, 2.295611547755171e-02, 2.322309846254512e-02, 2.334431846419492e-02, 2.318511307824811e-02, 2.334431846419492e-02, 2.318511307824811e-02, 9.041334869357537e-02, 9.251965876283391e-02, 4.366536600799246e-02, 4.208107570984478e-02, 5.951685794641429e-02, 7.695757410339595e-02, 6.333914208295452e-02, 6.996582837462446e-02, 8.784353822957225e-02, 9.011933588503949e-02, 8.784353822957224e-02, 9.011933588503951e-02, 1.135993271361169e-02, 1.172735900256784e-02, 3.704546646934539e-02, 3.697385879353856e-02, 8.471996626183600e-03, 1.115638138878629e-02, 2.718331170916373e-02, 2.721359517263993e-02, 2.070403018511402e-02, 2.806138428703099e-02, 2.070403018511395e-02, 2.806138428703145e-02, 5.015584227741147e-07, 6.481901420078923e-07, 1.444620572142105e-06, 1.454344647129324e-06, 3.898852392643573e-06, 7.113759125548712e-06, 3.926942061639579e-03, 4.533359130678593e-03, -1.589942738519565e-07, 1.302832962273862e-05, -1.589942738215929e-07, 1.302832962265312e-05, -6.421115249455948e-02, -5.377062365558226e-02, -2.639411376980221e-01, -2.623541654633024e-01, -2.418617015950521e-01, -2.365536940046683e-01, -1.868754194442531e-01, -1.799308584078179e-01, -2.191424050557335e-01, -2.128779393160112e-01, -2.191424050557335e-01, -2.128779393160111e-01, 8.471830198344703e-02, 8.905015228454366e-02, 1.179628384674060e-01, 1.186430124200384e-01, 1.166187068350585e-01, 1.149795545227152e-01, -9.313581924487986e-03, -1.215010955403383e-02, 7.809870432016541e-02, 7.556068703477561e-02, 7.809870432016550e-02, 7.556068703477560e-02, 5.816915837506668e-02, 5.770620643753149e-02, 4.269026082974520e-02, 4.248088294073577e-02, 4.525768421230461e-02, 4.509006242920512e-02, 6.532645289693220e-02, 6.450711465044681e-02, 5.441397545459483e-02, 5.481979844764141e-02, 5.441397545459486e-02, 5.481979844764150e-02, 8.665620305951102e-02, 9.239762063675906e-02, 8.243269145623576e-04, 8.511078446673781e-04, 1.603025926244953e-03, 2.069510619876986e-03, 8.372805197480573e-02, 1.214387533072897e-01, 8.507471912270494e-03, 1.273820639727370e-02, 8.507471912270673e-03, 1.273820639727387e-02, 1.255351051678284e-05, 1.700768476521942e-05, 3.914985360167112e-08, 3.973695798980211e-08, 6.939791939768643e-07, 1.263678466139837e-06, 8.835634744038303e-03, 1.045749184124030e-02, -4.322351482664865e-08, 1.014724163031475e-05, -4.322351483109643e-08, 1.014724163029389e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
