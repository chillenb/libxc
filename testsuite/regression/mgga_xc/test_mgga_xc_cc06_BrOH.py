
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_cc06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.997235513029188e+01, -1.997240327539165e+01, -1.997265356434518e+01, -1.997186431683378e+01, -1.997238021975824e+01, -1.997238021975824e+01, -3.335533741656726e+00, -3.335540569395166e+00, -3.335862162613100e+00, "nan", -3.335551112149401e+00, -4.364929982259875e+00, -6.849753650731389e-01, -8.955016624539767e-01, -8.731296562271621e-01, -8.795692381301794e-01, -8.960497850254545e-01, -8.960497850254545e-01, -2.720987617508782e-01, -2.753714983483976e-01, -8.121064667574083e-01, -2.036484260224786e-01, -2.730807968809627e-01, -2.730807968809627e-01, -1.999253191999359e-02, -2.086957321149670e-02, -7.492764299457007e-02, -1.006497754005958e-02, -2.066817952672306e-02, -2.066817952672306e-02, -6.475906550532199e+00, -6.477036605463558e+00, -6.476025780626546e+00, -4.949459852558249e+00, -6.476480919659846e+00, -6.476480919659846e+00, -1.907516168325424e+00, -1.920481313463983e+00, -1.902274670907204e+00, -1.912394065610771e+00, -1.923077976083690e+00, -2.516555865522999e+00, -7.873682722017126e-01, -8.506870415102579e-01, -7.497643579347679e-01, -7.798153847009786e-01, -8.155974362687074e-01, -6.232555726366559e-01, -1.180164023125658e-01, -2.738601366350562e-01, -1.166599787006769e-01, -2.450015132376357e+00, -1.759190287506599e-01, -1.759190287506599e-01, -7.435153584373346e-03, -1.103272504348806e-02, -8.406365669063645e-03, -7.715665954265215e-02, -7.724173144609361e-03, -1.010791734663181e-02, -8.107891905513429e-01, -8.067431880558733e-01, -6.175978434341930e-01, -8.093126651364151e-01, -8.087526217824779e-01, -8.087526217824779e-01, -7.864545401835915e-01, -6.889043271430372e-01, -7.174076578621907e-01, -7.437991588681168e-01, -7.303562348764081e-01, -5.581167536268195e-01, -8.892782838006391e-01, -2.576175547826783e-01, -3.942904642481913e-01, -3.773463220282818e-01, -4.411766872304697e-01, -4.411766872304696e-01, -4.783505181613554e-01, -6.993001974536800e-02, -9.181167643638927e-02, -4.687188243498687e-01, -9.789383410166205e-02, -1.281046871062247e-01, -2.315327951144732e-02, -3.213455506844382e-03, -5.942463407006638e-03, -1.228159811331177e-01, -8.669702302956514e-03, -8.669702302956512e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_cc06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.658510924018467e+01, -2.658517342427280e+01, -2.658550701729618e+01, -2.658445508328746e+01, -2.658514269499638e+01, -2.658514269499638e+01, -4.419974152830812e+00, -4.419983237767008e+00, -4.420411147266218e+00, "nan", -4.419997265874686e+00, -4.072308008339709e+00, -8.990759627869525e-01, -8.242199949655601e-01, -8.034058674721453e-01, -8.093965268300103e-01, -8.247300096447692e-01, -8.247300096447692e-01, -3.540701649611510e-01, -2.503632020326653e-01, -1.067315711221607e+00, -1.847954228756945e-01, -2.482644341637877e-01, -2.482644341637877e-01, -1.832699577898672e-02, -1.912405572636681e-02, -6.801281325636599e-02, -9.278233520060471e-03, -1.894105404849997e-02, -1.894105404849997e-02, -6.054313886574718e+00, -6.055375315360267e+00, -6.054425876029447e+00, -6.568209479285773e+00, -6.054853375283868e+00, -6.054853375283867e+00, -2.520922596409381e+00, -2.538150988578974e+00, -2.513957669571379e+00, -2.527404421077595e+00, -2.541601537134678e+00, -2.339076298850087e+00, -7.236646292892402e-01, -7.825310524221237e-01, -6.887269437991936e-01, -7.166458788578919e-01, -7.499033228413555e-01, -8.174680133888708e-01, -1.532700207234917e-01, -2.489784429477206e-01, -1.515061423051067e-01, -3.237542331574934e+00, -1.595361527853151e-01, -1.595361527853151e-01, -9.771511309118040e-03, -1.016304878234961e-02, -7.759875959516185e-03, -1.002152073548809e-01, -1.014925443085374e-02, -9.317509771746731e-03, -7.454334699367461e-01, -7.416724169385975e-01, -8.099898268063754e-01, -7.440609109551484e-01, -7.435403083119068e-01, -7.435403083119067e-01, -7.228154799597918e-01, -6.322211801281938e-01, -6.586788862557417e-01, -6.831863226096818e-01, -6.707019125613390e-01, -7.313999902003077e-01, -8.184294945911207e-01, -3.356545840210401e-01, -3.596518421043896e-01, -4.929942908141179e-01, -4.028880632968556e-01, -4.028880632968556e-01, -6.261079727618011e-01, -6.349892186935384e-02, -8.326844883934487e-02, -4.283168587254712e-01, -1.271216549125173e-01, -1.161153247915885e-01, -2.119818994753974e-02, -2.985079246301960e-03, -7.829437446002539e-03, -1.113231783635167e-01, -8.001116112629207e-03, -8.001116112629198e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-8.561913734143805e-05, -8.561892836703610e-05, -8.561784092191784e-05, -8.562127010558528e-05, -8.561902853958822e-05, -8.561902853958822e-05, -5.394731756032955e-04, -5.394720155088859e-04, -5.394173795213258e-04, "nan", -5.394702242094666e-04, -3.303640760966578e-160, -3.015031294156854e-03, -1.122989428062319e-249, -5.420253589806597e-163, -9.735601120210524e-216, -2.424712705580802e-162, -1.052509740427502e-215, 3.146398656050780e-117, -6.186415924512485e-218, -2.488605031585118e-03, -3.522874275664427e-233, -5.499389338240036e-218, -6.627441376438501e-247, -7.893788169849977e-178, -1.212976301466596e-208, -3.153973008304373e-230, -1.135918895606476e-238, -2.664761130730532e-279, -3.188653697059372e-189, -1.407911391320470e-172, -6.999497479744088e-246, -1.070136279866603e-207, -3.572708178399459e-04, -1.176042617371782e-226, -8.462230556072135e-179, -9.761986126954694e-04, -9.691290787132358e-04, -9.790856107860478e-04, -9.735269277135204e-04, -9.677253121325903e-04, -2.861479872080520e-161, -1.820146312766453e-182, -1.434098210347816e-220, -1.050743795954790e-182, -9.958763333767387e-221, -2.111182995520270e-182, -3.356476877837892e-03, -2.446367290780879e-02, -8.992742738454777e-204, -2.481452992003496e-02, 3.017938713773742e-84, -2.064012470200696e-165, -9.046198152378698e-253, -6.545571488265075e-01, -2.809128972069703e-171, -5.343474983496548e-287, -4.130178072760845e-02, -6.271288020358982e-01, -2.732609951310702e-171, -4.654854249067418e-240, -4.153924116552544e-229, -3.391544488741678e-03, -2.025297815174719e-211, -1.697279293382565e-166, -7.023709629071827e-245, -9.370299507980577e-231, -1.576187874142260e-163, -8.156985028372723e-231, -5.107241418253056e-202, -1.460445543031230e-248, -3.807987260542433e-03, -2.001892593413534e-249, -9.442229120342290e-03, -5.230490884704883e-227, -5.999159923690835e-03, -1.450547826617798e-178, -2.541293302381627e-201, -4.548878991422002e-03, -4.604724925044684e-259, -1.493508092692996e-258, -1.057385107644735e-255, -3.080264180269489e-02, -1.249256615681581e-256, -7.826421154030616e-260, -9.736398826451499e-270, -6.744072433757841e-71, -5.709344286851617e-186, -3.244231956039476e-234, -1.250913605195856e-261]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
