
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_cc06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.897384469036689e+01, -1.897388132530795e+01, -1.897408844238515e+01, -1.897348661283488e+01, -1.897386364881397e+01, -1.897386364881397e+01, -3.409429266775371e+00, -3.409401916367584e+00, -3.408693376891708e+00, -3.409220304708684e+00, -3.409436981582203e+00, -3.409436981582203e+00, -7.363289582334945e-01, -7.359324194093523e-01, -7.256969170011450e-01, -7.275389958873185e-01, -7.361761114552140e-01, -7.361761114552140e-01, -2.285001565183949e-01, -2.303090210637577e-01, -8.947007369241051e-01, -1.864592040834621e-01, -2.290392704534706e-01, -2.290392704534706e-01, -1.996899360711022e-02, -2.084253286298099e-02, -7.386882947365477e-02, -1.006317205370286e-02, -2.064146586666661e-02, -2.064146586666661e-02, -5.947292274813656e+00, -5.317853727739324e+00, -6.657910246458211e+00, -6.061857359323849e+00, -4.426476390188356e+00, -5.122153931078306e+00, -2.521412546142288e+00, -2.109944089385470e+00, -2.004739930781167e+00, -2.015720829106539e+00, -2.020928025573289e+00, -1.945150442416793e+00, -7.510471520333996e-01, -7.552377630927302e-01, -7.033971724488930e-01, -6.074425546425519e-01, -6.382977843699650e-01, -6.516581639107205e-01, -1.593749095518613e-01, -2.636906383118305e-01, -1.532505116663465e-01, -1.918188478843213e+00, -1.600837670471206e-01, -1.547647737820790e-01, -9.729339273354745e-03, -1.103272420161322e-02, -8.406366040263119e-03, -1.025479563930363e-01, -1.010693778947623e-02, -1.010801126601566e-02, -8.107801555417345e-01, -8.067683447121855e-01, -8.081950124127825e-01, -8.084039548606610e-01, -8.087850578926251e-01, -8.087519215528380e-01, -7.864562900537340e-01, -5.377599790167696e-01, -6.653131382272587e-01, -5.004107937267795e-01, -5.819727082335456e-01, -7.018740774124271e-01, -8.463948045622007e-01, -3.392195627548611e-01, -3.958782631654448e-01, -5.201472576016637e-01, -3.829411358948393e-01, -3.694388519023015e-01, -4.953169916072219e-01, -6.977442891328085e-02, -9.038759781039843e-02, -3.697892672386640e-01, -1.287749725542131e-01, -1.208459784482088e-01, -2.315772766387763e-02, -3.213453116004492e-03, -5.942493331280350e-03, -6.603479533725438e-02, -8.672054746596219e-03, -8.669774713979159e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_cc06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.718977892038342e+01, -2.718985253306201e+01, -2.719022052631286e+01, -2.718901521931516e+01, -2.718981740716439e+01, -2.718981740716439e+01, -4.403576415069369e+00, -4.403588979684562e+00, -4.404123273195243e+00, -4.404262026056870e+00, -4.403600471726334e+00, -4.403600471726334e+00, -9.016842184149890e-01, -9.009521952004532e-01, -8.825502729206613e-01, -8.871333715298126e-01, -9.014132946450321e-01, -9.014132946450321e-01, -2.740435873027643e-01, -2.767211803578291e-01, -1.083574337796095e+00, -2.239238042607403e-01, -2.748397435030908e-01, -2.748397435030908e-01, -2.609736161207245e-02, -2.722799967299121e-02, -9.436093546484402e-02, -1.321990428905878e-02, -2.696698644561095e-02, -2.696698644561095e-02, -7.316310538416627e+00, -6.591267525441133e+00, -9.174657516062791e+00, -7.540643394973142e+00, -7.043371460904840e+00, -6.541685625822944e+00, -3.376067627560386e+00, -2.573721534846275e+00, -2.508402753944889e+00, -2.521899099879951e+00, -2.534728368608537e+00, -2.535353961229158e+00, -9.361163190410160e-01, -9.075064592787766e-01, -8.649628807846320e-01, -7.784363051643783e-01, -8.140878124280250e-01, -8.143736938296130e-01, -2.163281779534095e-01, -3.288606595094294e-01, -2.000227206273234e-01, -2.464261138857767e+00, -1.916351193546107e-01, -1.837645855836200e-01, -1.278599418816221e-02, -1.448960511414949e-02, -1.105649105427107e-02, -1.360030598322140e-01, -1.327847990400957e-02, -1.328167887207461e-02, -1.063363107752443e+00, -1.058117220823269e+00, -1.059963391660424e+00, -1.058739318952724e+00, -1.060794809310246e+00, -1.060696113794140e+00, -1.031234236103689e+00, -6.868478229374778e-01, -8.116661689148977e-01, -8.130768014888003e-01, -7.284097118519086e-01, -8.801704638143271e-01, -1.054024415640288e+00, -4.455661616700330e-01, -5.190380495512490e-01, -7.334111454312771e-01, -4.571472330569394e-01, -4.451304865649367e-01, -6.232877160365843e-01, -9.046328955652715e-02, -1.152056419181631e-01, -4.656149267995517e-01, -1.683647955782671e-01, -1.477354218880618e-01, -3.029114394866868e-02, -4.245250733206269e-03, -7.829526747305795e-03, -1.766421327771257e-01, -1.140801817508715e-02, -1.140121528134408e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.156067760021752e-04, -1.156067876486161e-04, -1.156063090465647e-04, -1.156061626259841e-04, -1.156067864646273e-04, -1.156067864646273e-04, -4.647990685819940e-04, -4.648314690982276e-04, -4.657939317572854e-04, -4.653958287404285e-04, -4.648062942257766e-04, -4.648062942257766e-04, -1.728062125761404e-03, -1.723198434402652e-03, -1.592421627796452e-03, -1.654730530619252e-03, -1.726466979235904e-03, -1.726466979235904e-03, -5.645446340916320e-03, -5.803657733444944e-03, -1.118615710079259e-03, -2.230672257983582e-03, -5.694439495429525e-03, -5.694439495429528e-03, -7.179699739493774e-06, -8.273036462488351e-06, -2.138563362011523e-04, -3.645864046119453e-07, -8.325638823247413e-06, -8.325638823247413e-06, -4.281024572671930e-05, -2.057517873046248e-04, -5.068003066724873e-06, -2.637918033861121e-05, -6.436689451586842e-04, -2.809312044732808e-04, -1.791887576332828e-06, -4.485561825135267e-04, -6.671329575631119e-04, -6.624839304816794e-04, -6.749232668752909e-04, -8.970811464272151e-04, -1.336903893867134e-04, -7.242285171031340e-04, -2.541061172362525e-04, -3.103652707203892e-03, -2.852014874704755e-03, -2.438383588642680e-03, -4.496393737554180e-04, -3.008493596141361e-04, -6.625701910309460e-06, -8.438217283052822e-04, -3.036275022256070e-03, -5.418587434619480e-03, -1.653286696380020e-08, -5.949712328143650e-14, -2.702346013039594e-14, -1.818781753114446e-04, -1.059002561222730e-07, -9.735268122522785e-10, -7.544935564076048e-12, -5.941912741381783e-11, -1.645843040643087e-13, -7.675996493484707e-08, -9.801339120756909e-11, -4.567818747596404e-14, -3.114424461536476e-13, -3.524764855694730e-03, -3.685267608852757e-04, -7.179692716190123e-03, -2.826190594502326e-03, -1.041299920905685e-04, -1.272056640962506e-04, -6.582151017771992e-06, -2.282870182375379e-06, -3.071240385289565e-04, -2.146611927515040e-03, -3.257419492630200e-03, -3.563350262798987e-03, -5.768221622738667e-06, -2.008258708875237e-04, -5.109381076366762e-03, -1.516287559572611e-05, -1.778200471543644e-03, -1.611835988112825e-07, -2.197861596705788e-11, -5.159548524164920e-10, -1.246995555835085e-01, -9.858952854609612e-07, -9.341179061558196e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
