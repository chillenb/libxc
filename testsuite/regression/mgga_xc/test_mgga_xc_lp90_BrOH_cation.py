
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_lp90_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.958937226713815e+01, -1.958941863969179e+01, -1.958964460753549e+01, -1.958895428613271e+01, "nan", 1.696552525982187e+152, 1.115317305893579e+242, 1.193054211603163e+208, 1.192697711432748e+208, 1.329588905854333e+208, 6.326936124873324e+222, 1.197664711817249e+237, 7.251275094464660e+196, 3.603614751951174e+225, 3.543794239528512e+267, 4.903626800468994e+244, 3.227874339950477e+206, 2.938031789343978e+225, -1.836645589648633e-01, -1.858702091580535e-01, 1.264618398313877e+158, 3.503005357964054e+218, 2.199704656333802e+218, 1.253432904085504e+180, 1.006717032315978e+205, 7.394418935603355e+73, 1.292899899280665e+250, 2.944274459816164e+167, 1.991671242326331e+282, 8.413375909222602e+166, 3.495506066729473e+231, 7.966612764984125e+202, 2.292109482698298e+236, 1.526260705195973e+222, 1.190324618598573e+222, 7.169810461120633e+239, 6.104010001419628e+242, 7.196017263280429e+218, 2.519323331183274e+193, 4.659912841029068e+247, 1.205725947134506e+248, 2.329342993886629e+246, 6.279520795731438e+254, 3.897331087344060e+177, 4.071034787415697e+248, 3.486962557251905e+248, 8.301091844485863e+249, 1.047009247975564e+245, 9.288424147077585e+180, 1.200490532162596e+252, 3.388180642637176e+243, -1.927378514193522e+00, 1.463630504357013e+232, 4.859333437518486e+175, 5.554525367458513e+233, 5.518194823714967e+258, 4.656294265730975e+167, 1.106617338058359e+230, 8.532979072914305e+247, 1.019513424631853e+186, 1.094855461468823e+245, 4.930603783934283e+230, 1.883621702842615e+192, 4.497535798163641e+243, 5.021034327695518e+206, 1.713437502859328e+245, 7.480056106724595e+239, 1.020716861208436e+207, 6.136820947948079e+211, 9.849402142604866e+254, 2.294274751640694e+211, 1.430299217473942e+221, 6.858299625391661e+220, 1.708925477564220e+256, 3.630718437896947e+169, 3.991010987308780e+231, 1.377288245581493e+227, 1.099892394336979e+246, 1.520786934313298e+255, 1.114985643686770e+245, 9.981008701078705e+215, 2.423922404915464e+172, 2.357530763202298e+181, 1.895445324444504e+229, 2.817558067548805e+204, 2.516600648391488e+251, 6.916045269533039e+254, 2.825902478560901e+210, 3.169253574611704e+167, 4.083066569382445e+233]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_lp90_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.521713856156882e+01, -2.521713856156882e+01, -2.521720426687015e+01, -2.521720426687015e+01, -2.521750914201662e+01, -2.521750914201662e+01, -2.521653130255963e+01, -2.521653130255963e+01, "nan", "nan", -6.212613309208926e+151, -6.212613309208931e+151, -3.782754059033333e+241, -3.782754059033340e+241, -4.046409754667153e+207, -4.046409754667142e+207, -4.045205717450374e+207, -4.045205717450383e+207, -4.509496491159344e+207, -4.509496491159344e+207, -2.145869518199414e+222, -2.145869518199412e+222, -4.062048592537633e+236, -4.062048592537619e+236, -2.425363330251641e+196, -2.425363330251642e+196, -1.205311094985238e+225, -1.205311094985240e+225, -1.185195869737429e+267, -1.185195869737427e+267, -1.640026849523094e+244, -1.640026849523096e+244, -1.079562109900283e+206, -1.079562109900282e+206, -9.826243104330226e+224, -9.826243104330239e+224, -2.222143564141335e-01, -2.222143564141335e-01, -2.263406820592641e-01, -2.263406820592641e-01, -4.232206179307510e+157, -4.232206179307520e+157, -1.168453931096622e+218, -1.168453931096622e+218, -7.337887081367643e+217, -7.337887081367643e+217, -4.181265465691874e+179, -4.181265465691864e+179, -3.355827015397884e+204, -3.355827015397884e+204, -2.464886385092496e+73, -2.464886385092498e+73, -4.310438647891491e+249, -4.310438647891491e+249, -9.814423145471930e+166, -9.814423145471903e+166, -6.639052847792423e+281, -6.639052847792408e+281, -2.804521454275242e+166, -2.804521454275296e+166, -1.195420138991850e+231, -1.195420138991849e+231, -2.724496039438380e+202, -2.724496039438383e+202, -7.838734654261679e+235, -7.838734654261697e+235, -5.219646166031062e+221, -5.219646166031062e+221, -4.070773286506103e+221, -4.070773286506103e+221, -2.451992711770069e+239, -2.451992711770071e+239, -2.054853473177068e+242, -2.054853473177068e+242, -2.422637584148246e+218, -2.422637584148246e+218, -8.480611419734702e+192, -8.480611419734682e+192, -1.568729718729619e+247, -1.568729718729618e+247, -4.059214244850875e+247, -4.059214244850870e+247, -7.841999489518662e+245, -7.841999489518662e+245, -2.099442149271682e+254, -2.099442149271679e+254, -1.303335747469177e+177, -1.303335747469174e+177, -1.360772793689172e+248, -1.360772793689169e+248, -1.165669351056973e+248, -1.165669351056975e+248, -2.775450396712831e+249, -2.775450396712836e+249, -3.500650621744528e+244, -3.500650621744530e+244, -3.097587695253351e+180, -3.097587695253347e+180, -4.005185471574207e+251, -4.005185471574203e+251, -1.129881640726527e+243, -1.129881640726527e+243, -2.555864492579980e+00, -2.555864492579980e+00, -4.881442658915023e+231, -4.881442658915023e+231, -1.620665698424724e+175, -1.620665698424724e+175, -1.851533921075675e+233, -1.851533921075671e+233, -1.839430328348566e+258, -1.839430328348561e+258, -1.552118770264683e+167, -1.552118770264687e+167, -3.689796819305377e+229, -3.689796819305377e+229, -2.844372016001793e+247, -2.844372016001790e+247, -3.398432634349099e+185, -3.398432634349101e+185, -3.660500540680917e+244, -3.660500540680920e+244, -1.648452126005461e+230, -1.648452126005458e+230, -6.297563310843929e+191, -6.297563310843949e+191, -1.503680768148025e+243, -1.503680768148025e+243, -1.678700137000230e+206, -1.678700137000233e+206, -5.728596108028275e+244, -5.728596108028290e+244, -2.500652382060693e+239, -2.500652382060697e+239, -3.410944691184707e+206, -3.410944691184713e+206, -2.050992500043606e+211, -2.050992500043602e+211, -3.292162667845628e+254, -3.292162667845619e+254, -7.668155327207523e+210, -7.668155327207514e+210, -4.780489588760133e+220, -4.780489588760125e+220, -2.293893887652005e+220, -2.293893887652010e+220, -5.702802213381705e+255, -5.702802213381712e+255, -1.211867971385340e+169, -1.211867971385342e+169, -1.332700441694191e+231, -1.332700441694190e+231, -4.598055418284006e+226, -4.598055418283998e+226, -3.671973676922867e+245, -3.671973676922861e+245, -5.081027066851478e+254, -5.081027066851482e+254, -3.717256301483872e+244, -3.717256301483891e+244, -3.327780855977910e+215, -3.327780855977907e+215, -8.093579977601479e+171, -8.093579977601500e+171, -7.861344601172139e+180, -7.861344601172165e+180, -6.320489683832897e+228, -6.320489683832892e+228, -9.392269329096757e+203, -9.392269329096779e+203, -8.388707904088274e+250, -8.388707904088274e+250, -2.305370964235333e+254, -2.305370964235333e+254, -9.422949070139400e+209, -9.422949070139365e+209, -1.056433549750212e+167, -1.056433549750211e+167, -1.361042405793482e+233, -1.361042405793481e+233]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.541568324533171e-10, -1.308313664906634e-09, -6.541568324533171e-10, -6.541493552403181e-10, -1.308298710480636e-09, -6.541493552403181e-10, -6.541138070704677e-10, -1.308227614140935e-09, -6.541138070704677e-10, -6.542251043759161e-10, -1.308450208751832e-09, -6.542251043759161e-10, -6.541671120269878e-10, -1.308334224053976e-09, -6.541671120269878e-10, -6.541671120269878e-10, -1.308334224053976e-09, -6.541671120269878e-10, -1.014792288868781e-06, -2.029584577737561e-06, -1.014792288868781e-06, -1.014783489287707e-06, -2.029566978575414e-06, -1.014783489287707e-06, -1.014480258735946e-06, -2.028960517471893e-06, -1.014480258735946e-06, -1.014233519850619e-06, -2.028467039701238e-06, -1.014233519850619e-06, -1.014683467527390e-06, -2.029366935054781e-06, -1.014683467527390e-06, -1.014683467527390e-06, -2.029366935054781e-06, -1.014683467527390e-06, -7.437012362704908e-04, -1.487402472540982e-03, -7.437012362704908e-04, -7.469929228319390e-04, -1.493985845663878e-03, -7.469929228319390e-04, -8.319908100943070e-04, -1.663981620188614e-03, -8.319908100943070e-04, -8.049084159413682e-04, -1.609816831882736e-03, -8.049084159413682e-04, -8.105745005745812e-04, -1.621149001149162e-03, -8.105745005745812e-04, -8.105745005745812e-04, -1.621149001149162e-03, -8.105745005745812e-04, -1.677266870605841e-01, -3.354533741211682e-01, -1.677266870605841e-01, -1.579370776848260e-01, -3.158741553696519e-01, -1.579370776848260e-01, -4.020522238038700e-04, -8.041044476077401e-04, -4.020522238038700e-04, -5.050269529076052e-01, -1.010053905815210e+00, -5.050269529076052e-01, -3.176021224324803e-01, -6.352042448649605e-01, -3.176021224324803e-01, -3.176021224324804e-01, -6.352042448649607e-01, -3.176021224324804e-01, -1.143150774642284e+05, -2.286301549284568e+05, -1.143150774642284e+05, -9.314210257448621e+04, -1.862842051489724e+05, -9.314210257448621e+04, -1.005166025800998e+02, -2.010332051601997e+02, -1.005166025800998e+02, -1.027560017220101e+06, -2.055120034440202e+06, -1.027560017220101e+06, -4.121444163556091e+05, -8.242888327112182e+05, -4.121444163556091e+05, -4.121444163556091e+05, -8.242888327112182e+05, -4.121444163556091e+05, -2.002082814375229e-07, -4.004165628750458e-07, -2.002082814375229e-07, -2.000603727330063e-07, -4.001207454660126e-07, -2.000603727330063e-07, -2.002009115688695e-07, -4.004018231377390e-07, -2.002009115688695e-07, -2.000703428882819e-07, -4.001406857765637e-07, -2.000703428882819e-07, -2.001335900435752e-07, -4.002671800871505e-07, -2.001335900435752e-07, -2.001335900435752e-07, -4.002671800871505e-07, -2.001335900435752e-07, -1.019480576397535e-05, -2.038961152795070e-05, -1.019480576397535e-05, -9.903588141853116e-06, -1.980717628370623e-05, -9.903588141853116e-06, -1.041418240404464e-05, -2.082836480808929e-05, -1.041418240404464e-05, -1.014936045886736e-05, -2.029872091773472e-05, -1.014936045886736e-05, -9.930590299217430e-06, -1.986118059843486e-05, -9.930590299217430e-06, -9.930590299217430e-06, -1.986118059843486e-05, -9.930590299217430e-06, -1.270791488875978e-03, -2.541582977751955e-03, -1.270791488875978e-03, -9.121776546241434e-04, -1.824355309248287e-03, -9.121776546241434e-04, -1.733952490514081e-03, -3.467904981028163e-03, -1.733952490514081e-03, -1.484818989030349e-03, -2.969637978060699e-03, -1.484818989030349e-03, -1.191981528299620e-03, -2.383963056599240e-03, -1.191981528299620e-03, -1.191981528299620e-03, -2.383963056599240e-03, -1.191981528299620e-03, -2.173973102041336e+00, -4.347946204082671e+00, -2.173973102041336e+00, -1.667114599844230e-01, -3.334229199688460e-01, -1.667114599844230e-01, -2.968016163746320e+00, -5.936032327492639e+00, -2.968016163746320e+00, -1.101544452235496e-05, -2.203088904470993e-05, -1.101544452235496e-05, -1.146138634327008e+00, -2.292277268654017e+00, -1.146138634327008e+00, -1.146138634327008e+00, -2.292277268654017e+00, -1.146138634327008e+00, -2.899448528064258e+06, -5.798897056128517e+06, -2.899448528064258e+06, -1.125079174813354e+06, -2.250158349626709e+06, -1.125079174813354e+06, -3.291080354281168e+06, -6.582160708562336e+06, -3.291080354281168e+06, -1.450598352191887e+01, -2.901196704383774e+01, -1.450598352191887e+01, -1.562557978552480e+06, -3.125115957104961e+06, -1.562557978552480e+06, -1.562557978552480e+06, -3.125115957104961e+06, -1.562557978552480e+06, -1.246388874650872e-03, -2.492777749301744e-03, -1.246388874650872e-03, -1.275424130895437e-03, -2.550848261790874e-03, -1.275424130895437e-03, -1.265111629913918e-03, -2.530223259827835e-03, -1.265111629913918e-03, -1.256695743773509e-03, -2.513391487547019e-03, -1.256695743773509e-03, -1.260899495193452e-03, -2.521798990386904e-03, -1.260899495193452e-03, -1.260899495193452e-03, -2.521798990386904e-03, -1.260899495193452e-03, -1.391322940014323e-03, -2.782645880028646e-03, -1.391322940014323e-03, -2.563259462166191e-03, -5.126518924332382e-03, -2.563259462166191e-03, -2.131519454979804e-03, -4.263038909959607e-03, -2.131519454979804e-03, -1.789467408109263e-03, -3.578934816218525e-03, -1.789467408109263e-03, -1.954818919638120e-03, -3.909637839276239e-03, -1.954818919638120e-03, -1.954818919638120e-03, -3.909637839276239e-03, -1.954818919638120e-03, -7.550143561468679e-04, -1.510028712293736e-03, -7.550143561468679e-04, -6.541057969293687e-02, -1.308211593858737e-01, -6.541057969293687e-02, -3.143789303033171e-02, -6.287578606066342e-02, -3.143789303033171e-02, -1.032374914917327e-02, -2.064749829834655e-02, -1.032374914917327e-02, -1.805423838661189e-02, -3.610847677322377e-02, -1.805423838661189e-02, -1.805423838661189e-02, -3.610847677322378e-02, -1.805423838661189e-02, -3.568772192337155e-03, -7.137544384674311e-03, -3.568772192337155e-03, -1.197741086830259e+02, -2.395482173660517e+02, -1.197741086830259e+02, -3.466732107667493e+01, -6.933464215334986e+01, -3.466732107667493e+01, -1.195446055411286e-02, -2.390892110822572e-02, -1.195446055411286e-02, -5.517791275842375e+00, -1.103558255168475e+01, -5.517791275842375e+00, -5.517791275842374e+00, -1.103558255168475e+01, -5.517791275842374e+00, -2.881455628697400e+04, -5.762911257394799e+04, -2.881455628697400e+04, -2.203693350204365e+08, -4.407386700408731e+08, -2.203693350204365e+08, -1.135174342166843e+07, -2.270348684333685e+07, -1.135174342166843e+07, -7.096326578323077e+00, -1.419265315664615e+01, -7.096326578323077e+00, -2.131485479290419e+06, -4.262970958580839e+06, -2.131485479290419e+06, -2.131485479290428e+06, -4.262970958580855e+06, -2.131485479290428e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.264695156790173e-05, 1.264695156790173e-05, 1.264691282060177e-05, 1.264691282060177e-05, 1.264672860364657e-05, 1.264672860364657e-05, 1.264730534120612e-05, 1.264730534120612e-05, 1.264700483663831e-05, 1.264700483663831e-05, 1.264700483663831e-05, 1.264700483663831e-05, 8.466685247068040e-05, 8.466685247068036e-05, 8.466666652949916e-05, 8.466666652949912e-05, 8.466025832121208e-05, 8.466025832121211e-05, 8.465504289825265e-05, 8.465504289825267e-05, 8.466455291614381e-05, 8.466455291614382e-05, 8.466455291614381e-05, 8.466455291614382e-05, 4.452460137934206e-04, 4.452460137934207e-04, 4.457391339266607e-04, 4.457391339266607e-04, 4.579423930325045e-04, 4.579423930325044e-04, 4.541599533691277e-04, 4.541599533691277e-04, 4.549591116900226e-04, 4.549591116900226e-04, 4.549591116900226e-04, 4.549591116900226e-04, 1.728736701593672e-03, 1.728736701593672e-03, 1.702922816980106e-03, 1.702922816980107e-03, 3.816242761598570e-04, 3.816242761598570e-04, 2.277594709595485e-03, 2.277594709595486e-03, 2.028111013319541e-03, 2.028111013319540e-03, 2.028111013319541e-03, 2.028111013319541e-03, 4.970302417918276e-02, 4.970302417918281e-02, 4.722184121728021e-02, 4.722184121728022e-02, 8.557916859327563e-03, 8.557916859327563e-03, 8.606230667455103e-02, 8.606230667455100e-02, 6.848919285487622e-02, 6.848919285487627e-02, 6.848919285487622e-02, 6.848919285487623e-02, 5.606205831907258e-05, 5.606205831907256e-05, 5.605150077240934e-05, 5.605150077240933e-05, 5.606153240510042e-05, 5.606153240510043e-05, 5.605221261408724e-05, 5.605221261408726e-05, 5.605672766773348e-05, 5.605672766773346e-05, 5.605672766773348e-05, 5.605672766773346e-05, 1.516053463862180e-04, 1.516053463862180e-04, 1.505027671936189e-04, 1.505027671936188e-04, 1.524204302580649e-04, 1.524204302580650e-04, 1.514348547794348e-04, 1.514348547794349e-04, 1.506060150279851e-04, 1.506060150279851e-04, 1.506060150279851e-04, 1.506060150279851e-04, 5.092237423495499e-04, 5.092237423495498e-04, 4.686252718550431e-04, 4.686252718550436e-04, 5.504555323271195e-04, 5.504555323271197e-04, 5.294752359413666e-04, 5.294752359413670e-04, 5.011199873644126e-04, 5.011199873644124e-04, 5.011199873644126e-04, 5.011199873644125e-04, 3.281167035375734e-03, 3.281167035375736e-03, 1.726113048461515e-03, 1.726113048461516e-03, 3.546849462434591e-03, 3.546849462434593e-03, 1.545902418816406e-04, 1.545902418816406e-04, 2.795745813167957e-03, 2.795745813167955e-03, 2.795745813167957e-03, 2.795745813167955e-03, 1.115427531846991e-01, 1.115427531846990e-01, 8.803534779562257e-02, 8.803534779562258e-02, 1.151323237413502e-01, 1.151323237413502e-01, 5.274230172927459e-03, 5.274230172927461e-03, 9.556982604011048e-02, 9.556982604011043e-02, 9.556982604011045e-02, 9.556982604011045e-02, 5.067557959413531e-04, 5.067557959413532e-04, 5.096882403885655e-04, 5.096882403885655e-04, 5.086525074402297e-04, 5.086525074402302e-04, 5.078025578425937e-04, 5.078025578425940e-04, 5.082276411526811e-04, 5.082276411526808e-04, 5.082276411526811e-04, 5.082276411526808e-04, 5.209174314026952e-04, 5.209174314026954e-04, 6.070788315264038e-04, 6.070788315264040e-04, 5.796697674653841e-04, 5.796697674653843e-04, 5.548185471273859e-04, 5.548185471273857e-04, 5.672391759558902e-04, 5.672391759558905e-04, 5.672391759558902e-04, 5.672391759558905e-04, 4.469340183071958e-04, 4.469340183071960e-04, 1.365883785750512e-03, 1.365883785750512e-03, 1.137081944339143e-03, 1.137081944339143e-03, 8.604926537727030e-04, 8.604926537727036e-04, 9.897101927937675e-04, 9.897101927937675e-04, 9.897101927937679e-04, 9.897101927937675e-04, 6.595407844950128e-04, 6.595407844950132e-04, 8.941324407229712e-03, 8.941324407229719e-03, 6.557992070047188e-03, 6.557992070047185e-03, 8.926703830516895e-04, 8.926703830516896e-04, 4.141786624513635e-03, 4.141786624513637e-03, 4.141786624513637e-03, 4.141786624513638e-03, 3.521727791076647e-02, 3.521727791076647e-02, 3.293466588397039e-01, 3.293466588397038e-01, 1.569023490827755e-01, 1.569023490827754e-01, 4.410747045782005e-03, 4.410747045782004e-03, 1.032839277949217e-01, 1.032839277949216e-01, 1.032839277949217e-01, 1.032839277949218e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_lp90_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_lp90", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
