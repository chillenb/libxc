
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_cc06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.897435136533215e+01, -1.897439345752286e+01, -1.897461021582754e+01, -1.897398265970879e+01, -1.897430730149138e+01, -1.897430730149138e+01, -3.409763776411563e+00, -3.409732006248632e+00, -3.408948972205783e+00, -3.409551991666361e+00, -3.409156405168622e+00, -3.409156405168622e+00, -7.388056257044187e-01, -7.383830243654529e-01, -7.281868888075380e-01, -7.301553842558439e-01, -7.296418283460055e-01, -7.296418283460055e-01, -2.225998748458180e-01, -2.245955682088925e-01, -8.853259432221051e-01, -1.856441156025722e-01, -1.997543767543628e-01, -1.997543767543628e-01, -1.226047138657566e-02, -1.286270065738037e-02, -6.133306224156973e-02, -7.306496226628776e-03, -9.068871894603689e-03, -9.068871894603689e-03, -5.855787709435322e+00, -5.438346523892149e+00, -6.658375220059677e+00, -6.106996963162028e+00, -4.017375832874657e+00, -5.106357713108715e+00, -2.517216238699218e+00, -2.110970198299663e+00, -2.002800622332034e+00, -2.011249216185599e+00, -2.019630155736520e+00, -1.958273606057464e+00, -7.559697681495886e-01, -7.583138753498423e-01, -7.018931442731121e-01, -6.001283303965671e-01, -6.326418853951385e-01, -6.450835414831670e-01, -1.497491298230879e-01, -2.521221527758689e-01, -1.365963121485461e-01, -1.920180285101614e+00, -1.546669401062395e-01, -1.498186174502769e-01, -5.709963764902844e-03, -7.151649240470739e-03, -5.540117456753031e-03, -9.633880547409716e-02, -6.614748040772206e-03, -6.615061597310188e-03, -7.990793964015062e-01, -7.948248737590047e-01, -7.963132016542569e-01, -7.966507256301323e-01, -7.969947282462378e-01, -7.969313630162895e-01, -7.788444498673933e-01, -5.283847353428315e-01, -6.579439932226793e-01, -4.115475788822092e-01, -5.742763123036405e-01, -6.958425951786275e-01, -8.549574179247144e-01, -3.230985373251082e-01, -3.812153960481726e-01, -5.279850309687462e-01, -3.754803328127767e-01, -3.629902522549877e-01, -4.963864324040048e-01, -5.968994631028697e-02, -7.769390757145173e-02, -3.740539797828469e-01, -1.190868362935671e-01, -1.128988703503881e-01, -1.691978696616663e-02, -2.014789664676088e-03, -4.120236531501170e-03, -1.879452050927721e-01, -6.144221617345070e-03, -6.144206010634633e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_cc06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.719045288262943e+01, -2.719053746218546e+01, -2.719092502175299e+01, -2.718966701840544e+01, -2.719032452065486e+01, -2.719032452065486e+01, -4.403757076015562e+00, -4.403770348584599e+00, -4.404197849826564e+00, -4.404417076724210e+00, -4.403943781935892e+00, -4.403943781935892e+00, -9.062117326620160e-01, -9.054135476125678e-01, -8.867518863502115e-01, -8.917312757332105e-01, -8.906052738412150e-01, -8.906052738412150e-01, -2.652172986063729e-01, -2.679003711242684e-01, -1.068648395178278e+00, -2.229965131198873e-01, -2.376508155545334e-01, -2.376508155545334e-01, -1.608666365529505e-02, -1.687146921680914e-02, -7.903917733311924e-02, -9.615771810218577e-03, -1.192078314690746e-02, -1.192078314690746e-02, -7.156054168009704e+00, -6.664220629513110e+00, -9.170642341993545e+00, -7.634610283443144e+00, -7.839069616358009e+00, -6.544179896640262e+00, -3.358204249494295e+00, -2.575835866211487e+00, -2.505302037564781e+00, -2.520048939368722e+00, -2.532908891626873e+00, -2.530879086248366e+00, -9.393628298592611e-01, -9.105552429922349e-01, -8.703614796688733e-01, -7.653491347564194e-01, -8.058336586776333e-01, -8.061689558673076e-01, -2.012250122332262e-01, -3.164536400906960e-01, -1.779681521494528e-01, -2.467073077054175e+00, -1.858063032750501e-01, -1.780819002710916e-01, -7.524455683346792e-03, -9.414023257615721e-03, -7.301757984786477e-03, -1.266037951260060e-01, -8.710148500076512e-03, -8.711083902111193e-03, -1.047899818516703e+00, -1.042323570707239e+00, -1.044259448851300e+00, -1.043215762385230e+00, -1.045262170534225e+00, -1.045073431460414e+00, -1.021176192203628e+00, -6.734015646265683e-01, -8.055955682501321e-01, -1.004615407029670e+00, -7.176435033936734e-01, -8.777949771300114e-01, -1.064599489476076e+00, -4.237598339542588e-01, -4.997644989626806e-01, -7.744619363514351e-01, -4.480623651241196e-01, -4.362054624697385e-01, -6.231035727511320e-01, -7.815727237713635e-02, -9.964299772309257e-02, -4.704756060347238e-01, -1.554973134511692e-01, -1.390604509176019e-01, -2.216771392332131e-02, -2.666257495526944e-03, -5.437624679590245e-03, -7.333181389649315e-01, -8.094017199535952e-03, -8.093970628268244e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.156030484352684e-04, -1.156030618352203e-04, -1.156025885292974e-04, -1.156024225381406e-04, -1.156025844357548e-04, -1.156025844357548e-04, -4.646010229032245e-04, -4.646378787904851e-04, -4.656051379926468e-04, -4.651852965199689e-04, -4.652656272003136e-04, -4.652656272003136e-04, -1.756358253852256e-03, -1.751044549083552e-03, -1.619895751826275e-03, -1.685142890413333e-03, -1.673371607794916e-03, -1.673371607794916e-03, -4.754049510267332e-03, -4.939907923761770e-03, -1.031312080410307e-03, -2.218829359308162e-03, -3.472026320206244e-03, -3.472026320206245e-03, -7.542249290978652e-07, -9.099394998440694e-07, -7.562253159967719e-05, -1.182765233587023e-07, -2.928920124384140e-07, -2.928920124384140e-07, -5.936484667907521e-05, -1.658767147907855e-04, -4.937322558111437e-06, -2.125032888762792e-05, -9.270928342126593e-04, -2.883164807756642e-04, -9.432515919066291e-07, -4.516617947127539e-04, -6.662724081611994e-04, -6.727909890350678e-04, -6.749799162450386e-04, -8.526455793908512e-04, -1.531859605097576e-04, -7.886417585634247e-04, -1.780043701769431e-04, -3.067187160136782e-03, -2.861337309239917e-03, -2.468543637224272e-03, -2.962591215292177e-04, -2.175513125587955e-04, -3.358448090906902e-06, -8.433501167357377e-04, -2.701163485095361e-03, -4.905542152994883e-03, -1.653483679814709e-09, -3.345699835672732e-15, -1.206836025890967e-14, -6.221304995768505e-05, -3.887898457741366e-08, -1.910322319078867e-11, -6.452793410290500e-12, -3.898882647169993e-11, -1.305449818265813e-13, -7.928771617268792e-08, -3.838810428722499e-10, -3.994325601993785e-14, -4.260016573516359e-13, -3.557046264171148e-03, -3.202212202991205e-04, -1.315131053018550e-02, -2.838949858372710e-03, -7.557371567731793e-05, -1.267114727535813e-04, -5.100324830698958e-06, -2.541955619876582e-06, -6.622370212146495e-04, -2.095026178943660e-03, -3.145940849345831e-03, -3.496780824236539e-03, -3.439381381718795e-05, -1.150971376547397e-04, -5.004031395626766e-03, -1.089391514419242e-05, -1.400740414912810e-03, -2.413358395973673e-09, -6.210328551967371e-10, -2.485065912405109e-11, -2.990622180010762e-01, -5.706944149774608e-10, -1.597706480528662e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
