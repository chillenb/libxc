
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_cc06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.997286432622614e+01, -1.997291964513944e+01, -1.997318269516560e+01, -1.997235917428355e+01, -1.997278825475976e+01, -1.997278825475976e+01, -3.335683927821122e+00, -3.335690950115251e+00, -3.335932982325629e+00, "nan", -3.335770775408643e+00, -4.365217435431489e+00, -6.890023830342896e-01, -9.007019206311615e-01, -8.782567828278569e-01, -8.850872344070668e-01, -8.836348104069167e-01, -8.836348104069167e-01, -2.597254488443214e-01, -2.632746431255813e-01, -7.960448422079565e-01, -2.026526641181856e-01, -2.249246534547279e-01, -2.249246534547279e-01, -1.226400865712586e-02, -1.286688940167154e-02, -6.179475530324399e-02, -7.307120679293172e-03, -9.070247612513333e-03, -9.070247612513333e-03, -6.478678740830309e+00, -6.479845746382140e+00, -6.478736863965932e+00, -4.951647396461803e+00, -6.479267924641112e+00, -6.479267924641112e+00, -1.909576065840563e+00, -1.922938177319019e+00, -1.899820345850480e+00, -1.911629737950106e+00, -1.921678755392676e+00, -2.514724833666297e+00, -7.954801086809243e-01, -8.595493106168328e-01, -7.399009071220424e-01, -7.671226798560536e-01, -8.074560209822598e-01, -6.170341425281434e-01, -1.116342780811947e-01, -2.600815230794012e-01, -1.041165715816858e-01, -2.452781172893104e+00, -1.686140538718403e-01, -1.686140538718403e-01, -4.363424851181234e-03, -7.151649342044089e-03, -5.540117326922035e-03, -7.297387699154091e-02, -5.055030315894171e-03, -6.615054797604548e-03, -7.990875633778870e-01, -7.948049673827223e-01, -6.085182448822221e-01, -7.975532928783867e-01, -7.969320028495548e-01, -7.969320028495548e-01, -7.788424343528250e-01, -6.756365584780647e-01, -7.052108635250207e-01, -7.344931154619894e-01, -7.195440953584149e-01, -5.498544346112724e-01, -8.984511270239269e-01, -2.455944213745535e-01, -3.796381835295417e-01, -3.742841965629031e-01, -4.308914357463323e-01, -4.308914357463323e-01, -4.781726649080770e-01, -5.939776884638612e-02, -7.853178477897954e-02, -4.735754621016583e-01, -9.061943862298220e-02, -1.185853525614621e-01, -1.691945528009992e-02, -2.014783455785270e-03, -4.120232803346056e-03, -1.120882353517297e-01, -6.144188474276818e-03, -6.144188474276817e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_cc06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.658578791261285e+01, -2.658586165818541e+01, -2.658621225957287e+01, -2.658511464492302e+01, -2.658568653693597e+01, -2.658568653693597e+01, -4.420173989392840e+00, -4.420183333204130e+00, -4.420505379449558e+00, "nan", -4.420289548136481e+00, -4.072577764609269e+00, -9.044023507328821e-01, -8.290588232389369e-01, -8.081755334935170e-01, -8.145301714314273e-01, -8.131788860425113e-01, -8.131788860425114e-01, -3.378869206724227e-01, -2.392831397161150e-01, -1.046051197542991e+00, -1.838874220303819e-01, -2.042124337472038e-01, -2.042124337472038e-01, -1.128777960093660e-02, -1.183809831107188e-02, -5.615163715453219e-02, -6.752096570982305e-03, -8.367923378412887e-03, -8.367923378412887e-03, -6.056917727507262e+00, -6.058013863862718e+00, -6.056972320967978e+00, -6.571122039165884e+00, -6.057471131678862e+00, -6.057471131678862e+00, -2.523659813762464e+00, -2.541415766623639e+00, -2.510696370453743e+00, -2.526388767502546e+00, -2.539742195312741e+00, -2.337361200355537e+00, -7.312035506447299e-01, -7.907736070355078e-01, -6.795657812876286e-01, -7.048523454021411e-01, -7.423350334434532e-01, -8.092447727145988e-01, -1.449723772735115e-01, -2.363597623518369e-01, -1.352035312285275e-01, -3.241217674068770e+00, -1.528912162717340e-01, -1.528912162717340e-01, -5.750082571657253e-03, -6.609455191180939e-03, -5.129162567121448e-03, -9.479250539223684e-02, -6.656738606827465e-03, -6.116924478681674e-03, -7.345564678212798e-01, -7.305760632407187e-01, -7.979897281479369e-01, -7.331304351352833e-01, -7.325529828471599e-01, -7.325529828471599e-01, -7.157417847287990e-01, -6.199096418944658e-01, -6.473560171419100e-01, -6.745435691319001e-01, -6.606624561603293e-01, -7.204880077926492e-01, -8.269644334761709e-01, -3.198919389553893e-01, -3.461551623163681e-01, -4.889632971121330e-01, -3.933976132450451e-01, -3.933976132450451e-01, -6.258733520343676e-01, -5.398676987840618e-02, -7.126846551675331e-02, -4.328030044755808e-01, -1.176786723532502e-01, -1.074912314916881e-01, -1.553164601259474e-02, -1.876127771649502e-03, -5.437613545799474e-03, -1.016088519156436e-01, -5.684432623309975e-03, -5.684432623309971e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-8.561692502621256e-05, -8.561668489530735e-05, -8.561554206694758e-05, -8.561911997856905e-05, -8.561725573597676e-05, -8.561725573597676e-05, -5.394476587603367e-04, -5.394464657211502e-04, -5.394053493211160e-04, "nan", -5.394329043239086e-04, -3.304527591117338e-160, -2.995079059867541e-03, -1.150628571539388e-249, -5.555250464541551e-163, -9.994768275367051e-216, -2.286707915548254e-162, -9.926051647635090e-216, -7.218676180954393e-118, -5.095086320391704e-218, -2.545015552416826e-03, -3.448755534763484e-233, -2.375857345864950e-218, -2.863200677393730e-247, -1.004592848973721e-178, -1.574220773461928e-209, -1.369339616953434e-230, -2.985034839042997e-239, -8.326315672948726e-281, -9.963270984124893e-191, -1.410358476299276e-172, -7.011823368944239e-246, -1.071955219639997e-207, -3.571069257123280e-04, -1.178097438756552e-226, -8.477016051132109e-179, -9.750686192390137e-04, -9.678007857608905e-04, -9.804432406136090e-04, -9.739446061892271e-04, -9.684812379273096e-04, -2.852934270161088e-161, -1.900452616449341e-182, -1.497965798015701e-220, -9.936509492882264e-183, -9.293237884093566e-221, -2.023878569465454e-182, -3.395077196639144e-03, -2.619811497709564e-02, -7.194828545880614e-204, -2.854899253869480e-02, 1.304513726510104e-85, -1.716660803127213e-165, -7.523817811042741e-253, -1.182312063734829e+00, -4.595366839680091e-172, -9.436709461084723e-288, -4.423317144329594e-02, -1.005516617949517e+00, -4.663460447366303e-172, -4.378472030382555e-240, -3.901152816989769e-229, -3.449323819053661e-03, -1.904245281381225e-211, -1.595245781088544e-166, -6.601472837766085e-245, -8.994056541625987e-231, -1.451771035827509e-163, -7.587103059186795e-231, -4.842994996233647e-202, -1.371325267940812e-248, -3.873734641162382e-03, -2.090053724118132e-249, -1.000068898287023e-02, -4.446513987727600e-227, -6.056898077272739e-03, -1.311373293524446e-178, -2.297465899849925e-201, -4.550838777694974e-03, -2.272380163789204e-259, -7.580637577722722e-259, -1.104942068762701e-255, -3.387882372733036e-02, -8.929069312008002e-257, -2.071893958576125e-260, -1.433803207687944e-270, -1.506891328387095e-72, -3.836734855435879e-186, -7.738253065717245e-235, -2.983721932192348e-262]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_cc06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_cc06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
