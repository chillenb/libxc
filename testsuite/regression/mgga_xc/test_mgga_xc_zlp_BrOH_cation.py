
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_zlp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.011250816610977e+01, -2.011254536961179e+01, -2.011274672076932e+01, -2.011219297632384e+01, -2.011247799236743e+01, -2.011247799236743e+01, -3.545380886703953e+00, -3.545403910583059e+00, -3.546184297274527e+00, -3.547242547683066e+00, -3.546315683145700e+00, -3.546315683145700e+00, -6.774221647918974e-01, -6.767535219289146e-01, -6.625269735992639e-01, -6.742008498797492e-01, -6.711204648735613e-01, -6.711204648735613e-01, -2.022465525669914e-01, -2.038533674976238e-01, -7.124110838720198e-01, -1.558772581021311e-01, -1.763698760144300e-01, -1.763698760144300e-01, -4.160620509481272e-01, -3.716231213998892e-01, -1.241386677796732e-01, -5.274684219957891e-01, -3.677866710983960e-01, -3.677866710983931e-01, -2.823439493329190e+00, -4.458648531211447e+00, -2.100684439494025e+01, -9.039751569606928e-02, -5.863663804389900e+00, -5.046693303361914e+00, -2.357858013981363e+01, -1.924263952591834e+00, -2.079352536437044e+00, -2.093894118449970e+00, -2.091967164757139e+00, -2.177628325653517e+00, 1.070045663804661e-01, -4.499466660551903e-01, 6.721525598756285e-02, -5.749875014014022e-01, -6.191999957987452e-01, -6.025331739911646e-01, -5.883782223800482e-01, 1.139475715089838e-01, -2.927997969166873e+00, -1.911746734608405e+00, -1.625999770314224e-01, -1.891936948078448e-01, 2.003707017123302e+01, 1.911547132975903e+04, -8.862218596611279e+03, -8.344430434232525e-01, 3.131094836115877e+00, -2.456082785191926e+02, 4.556164488221261e+03, -1.849795559423636e+03, -3.198446966278683e+04, 4.026392357563132e+01, -5.908396760386621e+02, 5.784241898319585e+04, -1.751422667043762e+04, -5.343127578345928e-01, -1.236148939787535e-01, -6.549185566075112e-01, -5.350140088478825e-01, 5.233439028649362e-01, 1.692584316716554e-01, -3.653068736842537e+00, -5.454211700428222e+00, -8.627523769751053e-01, -2.746919776894470e-01, -3.090005626203666e-01, -4.842587578314630e-01, -1.083068134655987e+00, -7.500294575405962e-02, -3.555010306545276e-01, -1.631043692652145e+00, -1.485809742565841e-01, -3.626809728427541e+01, -2.956734302436623e+01, -1.725080027194109e+02, -2.844732166263284e-01, -4.508445889473519e+01, -8.327139073680389e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_zlp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.281009405373828e+01, -2.281009405373828e+01, -2.281017106735776e+01, -2.281017106735775e+01, -2.281049141867217e+01, -2.281049141867217e+01, -2.280934585794732e+01, -2.280934585794731e+01, -2.280994925605563e+01, -2.280994925605563e+01, -2.280994925605563e+01, -2.280994925605563e+01, -4.389383499766990e+00, -4.389383499766990e+00, -4.389421037020219e+00, -4.389421037020219e+00, -4.390334596235785e+00, -4.390334596235785e+00, -4.388935062066633e+00, -4.388935062066633e+00, -4.389245367688805e+00, -4.389245367688805e+00, -4.389245367688805e+00, -4.389245367688805e+00, -8.674833613270992e-01, -8.674833613270992e-01, -8.658269175301574e-01, -8.658269175301574e-01, -8.226810484314545e-01, -8.226810484314545e-01, -8.283569868688750e-01, -8.283569868688750e-01, -8.281610106673872e-01, -8.281610106673871e-01, -8.281610106673872e-01, -8.281610106673871e-01, -1.713056979909999e-01, -1.713056979909999e-01, -1.784651349581639e-01, -1.784651349581639e-01, -1.042383387510971e+00, -1.042383387510971e+00, -7.575502923274383e-02, -7.575502923274383e-02, -1.181648413722886e-01, -1.181648413722886e-01, -1.181648413722886e-01, -1.181648413722886e-01, 2.203406306382363e+00, 2.203406306382361e+00, 2.030661012531861e+00, 2.030661012531860e+00, 4.301501584629123e-01, 4.301501584629125e-01, 3.942809022904985e+00, 3.942809022904985e+00, 2.777953242025575e+00, 2.777953242025573e+00, 2.777953242025569e+00, 2.777953242025567e+00, -7.395413620732207e+00, -7.395413620732207e+00, -6.826949982707118e+00, -6.826949982707117e+00, -1.046628700047044e+00, -1.046628700047034e+00, -8.351996663509185e+00, -8.351996663509187e+00, -6.335149731922694e+00, -6.335149731922695e+00, -6.620403180236869e+00, -6.620403180236869e+00, 4.961620168973973e+00, 4.961620168973973e+00, -2.444152299186762e+00, -2.444152299186762e+00, -2.335905158729917e+00, -2.335905158729917e+00, -2.354998671762152e+00, -2.354998671762152e+00, -2.388470047566914e+00, -2.388470047566914e+00, -2.359277774709319e+00, -2.359277774709319e+00, -1.019026292534672e+00, -1.019026292534672e+00, -9.355810860133658e-01, -9.355810860133658e-01, -9.295201485548731e-01, -9.295201485548731e-01, -7.677404962016903e-01, -7.677404962016903e-01, -7.933113714852345e-01, -7.933113714852345e-01, -7.989141638366460e-01, -7.989141638366460e-01, 2.112679838047713e-01, 2.112679838047716e-01, -2.397254277388466e-01, -2.397254277388465e-01, 1.013698387597549e+00, 1.013698387597549e+00, -2.571422729321587e+00, -2.571422729321587e+00, -1.286582024737009e-02, -1.286582024737009e-02, -3.983626568417946e-03, -3.983626568417946e-03, -2.423434035795801e+00, -2.423434035795794e+00, -6.368866119520734e+03, -6.368866119520734e+03, 2.956140434925269e+03, 2.956140434925274e+03, 4.245203291133471e-01, 4.245203291133466e-01, 1.209450130563835e+00, 1.209450130563839e+00, 8.412974947449342e+01, 8.412974947449365e+01, -1.532512487228919e+03, -1.532512487228917e+03, 6.207620974679746e+02, 6.207620974679746e+02, 1.074992942641106e+04, 1.074992942641106e+04, -1.454103987156325e+01, -1.454103987156322e+01, 1.975944141767632e+02, 1.975944141767633e+02, -1.944367804958924e+04, -1.944367804958925e+04, 5.885115828725106e+03, 5.885115828725106e+03, -6.280024751401230e-01, -6.280024751401230e-01, -8.181159756374121e-01, -8.181159756374121e-01, -6.903551014843630e-01, -6.903551014843630e-01, -7.050456978573377e-01, -7.050456978573377e-01, -1.060536450543595e+00, -1.060536450543595e+00, -1.195186290786797e+00, -1.195186290786798e+00, 9.265083200303902e-01, 9.265083200303902e-01, 1.435282627270085e+00, 1.435282627270081e+00, -2.773576138685155e-01, -2.773576138685155e-01, -3.830265145378061e-01, -3.830265145378061e-01, -3.715352227639160e-01, -3.715352227639159e-01, -5.802397156263970e-01, -5.802397156263970e-01, 7.970234444531695e-01, 7.970234444531691e-01, 2.991620459780948e-01, 2.991620459780951e-01, -4.362243765352378e-01, -4.362243765352378e-01, 5.882938657906298e-01, 5.882938657906311e-01, 9.344073773317858e-02, 9.344073773317858e-02, 1.371324190546754e+01, 1.371324190546754e+01, 1.586495818067339e+01, 1.586495818067339e+01, 6.161783640427337e+01, 6.161783640427337e+01, 1.602410840435695e-01, 1.602410840435695e-01, 1.719634262890645e+01, 1.719634262890644e+01, 2.992634651229164e+01, 2.992634651229169e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.348752582893520e-09, -8.697505165787040e-09, -4.348752582893520e-09, -4.348702474215320e-09, -8.697404948430641e-09, -4.348702474215320e-09, -4.348464247574895e-09, -8.696928495149791e-09, -4.348464247574895e-09, -4.349210108631091e-09, -8.698420217262182e-09, -4.349210108631091e-09, -4.348821471649981e-09, -8.697642943299962e-09, -4.348821471649981e-09, -4.348821471649981e-09, -8.697642943299962e-09, -4.348821471649981e-09, -7.076794110800460e-06, -1.415358822160092e-05, -7.076794110800460e-06, -7.076732480125143e-06, -1.415346496025029e-05, -7.076732480125143e-06, -7.074608709368010e-06, -1.414921741873602e-05, -7.074608709368010e-06, -7.072880597552880e-06, -1.414576119510576e-05, -7.072880597552880e-06, -7.076031945934933e-06, -1.415206389186987e-05, -7.076031945934933e-06, -7.076031945934933e-06, -1.415206389186987e-05, -7.076031945934933e-06, -5.280135283020079e-03, -1.056027056604016e-02, -5.280135283020079e-03, -5.303540351434223e-03, -1.060708070286845e-02, -5.303540351434223e-03, -5.907947344127068e-03, -1.181589468825414e-02, -5.907947344127068e-03, -5.715360142716262e-03, -1.143072028543252e-02, -5.715360142716262e-03, -5.755651937406188e-03, -1.151130387481238e-02, -5.755651937406188e-03, -5.755651937406188e-03, -1.151130387481238e-02, -5.755651937406188e-03, -1.196862458451406e+00, -2.393724916902812e+00, -1.196862458451406e+00, -1.126969782758732e+00, -2.253939565517463e+00, -1.126969782758732e+00, -2.851740880497651e-03, -5.703481760995302e-03, -2.851740880497651e-03, -3.605654014897684e+00, -7.211308029795368e+00, -3.605654014897684e+00, -2.267061268542784e+00, -4.534122537085567e+00, -2.267061268542784e+00, -2.267061268542784e+00, -4.534122537085568e+00, -2.267061268542784e+00, -8.177020740879842e+05, -1.635404148175968e+06, -8.177020740879842e+05, -6.662462376457667e+05, -1.332492475291533e+06, -6.662462376457667e+05, -7.186276591767912e+02, -1.437255318353582e+03, -7.186276591767912e+02, -7.350595051088942e+06, -1.470119010217788e+07, -7.350595051088942e+06, -2.948195114472577e+06, -5.896390228945155e+06, -2.948195114472577e+06, -2.948195114472577e+06, -5.896390228945155e+06, -2.948195114472577e+06, -1.385278933660921e-06, -2.770557867321843e-06, -1.385278933660921e-06, -1.384250058361637e-06, -2.768500116723274e-06, -1.384250058361637e-06, -1.385227667656275e-06, -2.770455335312551e-06, -1.385227667656275e-06, -1.384319412155947e-06, -2.768638824311895e-06, -1.384319412155947e-06, -1.384759368591055e-06, -2.769518737182110e-06, -1.384759368591055e-06, -1.384759368591055e-06, -2.769518737182110e-06, -1.384759368591055e-06, -7.170088132460641e-05, -1.434017626492128e-04, -7.170088132460641e-05, -6.964650483811619e-05, -1.392930096762324e-04, -6.964650483811619e-05, -7.324856086402937e-05, -1.464971217280587e-04, -7.324856086402937e-05, -7.138028011526864e-05, -1.427605602305373e-04, -7.138028011526864e-05, -6.983698332927143e-05, -1.396739666585429e-04, -6.983698332927143e-05, -6.983698332927143e-05, -1.396739666585429e-04, -6.983698332927143e-05, -9.029209763047321e-03, -1.805841952609464e-02, -9.029209763047321e-03, -6.478211447968723e-03, -1.295642289593745e-02, -6.478211447968723e-03, -1.232506408782298e-02, -2.465012817564595e-02, -1.232506408782298e-02, -1.055209381524666e-02, -2.110418763049333e-02, -1.055209381524666e-02, -8.468516407546317e-03, -1.693703281509263e-02, -8.468516407546317e-03, -8.468516407546317e-03, -1.693703281509263e-02, -8.468516407546317e-03, -1.552947523459047e+01, -3.105895046918093e+01, -1.552947523459047e+01, -1.189614187098494e+00, -2.379228374196989e+00, -1.189614187098494e+00, -2.120363224260269e+01, -4.240726448520538e+01, -2.120363224260269e+01, -7.749082887118513e-05, -1.549816577423703e-04, -7.749082887118513e-05, -8.185513914054752e+00, -1.637102782810950e+01, -8.185513914054752e+00, -8.185513914054752e+00, -1.637102782810950e+01, -8.185513914054752e+00, -2.074142000655703e+07, -4.148284001311406e+07, -2.074142000655703e+07, -8.048207041384462e+06, -1.609641408276892e+07, -8.048207041384462e+06, -2.354303250011862e+07, -4.708606500023725e+07, -2.354303250011862e+07, -1.036729552540080e+02, -2.073459105080159e+02, -1.036729552540080e+02, -1.117776055687955e+07, -2.235552111375909e+07, -1.117776055687955e+07, -1.117776055687955e+07, -2.235552111375909e+07, -1.117776055687955e+07, -8.855593173262262e-03, -1.771118634652452e-02, -8.855593173262262e-03, -9.062169907072615e-03, -1.812433981414523e-02, -9.062169907072615e-03, -8.988799100448270e-03, -1.797759820089654e-02, -8.988799100448270e-03, -8.928922710927871e-03, -1.785784542185574e-02, -8.928922710927871e-03, -8.958831028379266e-03, -1.791766205675853e-02, -8.958831028379266e-03, -8.958831028379266e-03, -1.791766205675853e-02, -8.958831028379266e-03, -9.886803737757840e-03, -1.977360747551568e-02, -9.886803737757840e-03, -1.822857611817221e-02, -3.645715223634442e-02, -1.822857611817221e-02, -1.515490133508640e-02, -3.030980267017280e-02, -1.515490133508640e-02, -1.272017635662274e-02, -2.544035271324548e-02, -1.272017635662274e-02, -1.389709377812720e-02, -2.779418755625439e-02, -1.389709377812720e-02, -1.389709377812720e-02, -2.779418755625439e-02, -1.389709377812720e-02, -5.360576133784672e-03, -1.072115226756934e-02, -5.360576133784672e-03, -4.665006548792752e-01, -9.330013097585504e-01, -4.665006548792752e-01, -2.240989294065001e-01, -4.481978588130003e-01, -2.240989294065001e-01, -7.352371492766531e-02, -1.470474298553306e-01, -7.352371492766531e-02, -1.286407902505955e-01, -2.572815805011910e-01, -1.286407902505955e-01, -1.286407902505955e-01, -2.572815805011910e-01, -1.286407902505955e-01, -2.538889762832258e-02, -5.077779525664516e-02, -2.538889762832258e-02, -8.563271814593451e+02, -1.712654362918690e+03, -8.563271814593451e+02, -2.478064159790648e+02, -4.956128319581295e+02, -2.478064159790648e+02, -8.514852788307489e-02, -1.702970557661498e-01, -8.514852788307489e-02, -3.942613786298352e+01, -7.885227572596703e+01, -3.942613786298352e+01, -3.942613786298350e+01, -7.885227572596700e+01, -3.942613786298350e+01, -2.061017242443139e+05, -4.122034484886277e+05, -2.061017242443139e+05, -1.576495655103937e+09, -3.152991310207874e+09, -1.576495655103937e+09, -8.120700702041957e+07, -1.624140140408391e+08, -8.120700702041957e+07, -5.070845240890996e+01, -1.014169048178199e+02, -5.070845240890996e+01, -1.524766479982568e+07, -3.049532959965135e+07, -1.524766479982568e+07, -1.524766479982573e+07, -3.049532959965147e+07, -1.524766479982573e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([8.407534794122445e-05, 8.407534794122443e-05, 8.407508259934248e-05, 8.407508259934251e-05, 8.407382108021363e-05, 8.407382108021362e-05, 8.407777058538474e-05, 8.407777058538472e-05, 8.407571272608525e-05, 8.407571272608526e-05, 8.407571272608525e-05, 8.407571272608526e-05, 5.904359833207200e-04, 5.904359833207197e-04, 5.904346644758610e-04, 5.904346644758607e-04, 5.903892123074687e-04, 5.903892123074688e-04, 5.903522203528093e-04, 5.903522203528094e-04, 5.904196730265151e-04, 5.904196730265152e-04, 5.904196730265151e-04, 5.904196730265152e-04, 3.161160789303327e-03, 3.161160789303327e-03, 3.164682570259435e-03, 3.164682570259435e-03, 3.251838255728939e-03, 3.251838255728938e-03, 3.224823650114334e-03, 3.224823650114333e-03, 3.230531296978962e-03, 3.230531296978963e-03, 3.230531296978962e-03, 3.230531296978963e-03, 1.233590250272586e-02, 1.233590250272586e-02, 1.215131104892758e-02, 1.215131104892758e-02, 2.706846237583015e-03, 2.706846237583014e-03, 1.626095094862216e-02, 1.626095094862217e-02, 1.447676700453806e-02, 1.447676700453806e-02, 1.447676700453806e-02, 1.447676700453807e-02, 3.555284819929443e-01, 3.555284819929447e-01, 3.377782246278896e-01, 3.377782246278898e-01, 6.118348215308389e-02, 6.118348215308388e-02, 6.156420597588805e-01, 6.156420597588805e-01, 4.899241522046842e-01, 4.899241522046848e-01, 4.899241522046842e-01, 4.899241522046845e-01, 3.879039758468550e-04, 3.879039758468549e-04, 3.878293944749018e-04, 3.878293944749018e-04, 3.879002606441153e-04, 3.879002606441155e-04, 3.878344231123828e-04, 3.878344231123830e-04, 3.878663186602007e-04, 3.878663186602006e-04, 3.878663186602007e-04, 3.878663186602006e-04, 1.066252482006615e-03, 1.066252482006616e-03, 1.058403434529226e-03, 1.058403434529226e-03, 1.072055081188450e-03, 1.072055081188450e-03, 1.065038767435538e-03, 1.065038767435539e-03, 1.059138424190780e-03, 1.059138424190780e-03, 1.059138424190780e-03, 1.059138424190780e-03, 3.618129351861578e-03, 3.618129351861578e-03, 3.328138532608210e-03, 3.328138532608213e-03, 3.912679125030135e-03, 3.912679125030135e-03, 3.762796949513530e-03, 3.762796949513532e-03, 3.560242113146414e-03, 3.560242113146413e-03, 3.560242113146414e-03, 3.560242113146414e-03, 2.343856148384546e-02, 2.343856148384548e-02, 1.231714107223051e-02, 1.231714107223052e-02, 2.533884166129632e-02, 2.533884166129633e-02, 1.087502728963343e-03, 1.087502728963343e-03, 1.996670871083938e-02, 1.996670871083938e-02, 1.996670871083938e-02, 1.996670871083938e-02, 7.979293545301028e-01, 7.979293545301027e-01, 6.297571956542534e-01, 6.297571956542534e-01, 8.236091945098752e-01, 8.236091945098752e-01, 3.769444711494587e-02, 3.769444711494589e-02, 6.836588764076429e-01, 6.836588764076424e-01, 6.836588764076427e-01, 6.836588764076428e-01, 3.600500019150416e-03, 3.600500019150417e-03, 3.621447424548312e-03, 3.621447424548312e-03, 3.614048826371629e-03, 3.614048826371633e-03, 3.607977359558220e-03, 3.607977359558221e-03, 3.611013866208333e-03, 3.611013866208331e-03, 3.611013866208333e-03, 3.611013866208331e-03, 3.701662827324878e-03, 3.701662827324880e-03, 4.317230796783306e-03, 4.317230796783308e-03, 4.121397115258143e-03, 4.121397115258145e-03, 3.943849289125829e-03, 3.943849289125829e-03, 4.032586314616760e-03, 4.032586314616761e-03, 4.032586314616760e-03, 4.032586314616761e-03, 3.173216260603119e-03, 3.173216260603120e-03, 9.741324469723388e-03, 9.741324469723384e-03, 8.105468331736188e-03, 8.105468331736188e-03, 6.128259768729543e-03, 6.128259768729548e-03, 7.051923132602007e-03, 7.051923132602005e-03, 7.051923132602011e-03, 7.051923132602005e-03, 4.692093682864440e-03, 4.692093682864442e-03, 6.392616244316716e-02, 6.392616244316721e-02, 4.687736059279582e-02, 4.687736059279581e-02, 6.358260053442671e-03, 6.358260053442673e-03, 2.959420577796435e-02, 2.959420577796436e-02, 2.959420577796436e-02, 2.959420577796436e-02, 2.518984373145245e-01, 2.518984373145245e-01, 2.356106291447679e+00, 2.356106291447678e+00, 1.122432888957296e+00, 1.122432888957296e+00, 3.151801910329080e-02, 3.151801910329079e-02, 7.388456198869505e-01, 7.388456198869506e-01, 7.388456198869511e-01, 7.388456198869513e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
