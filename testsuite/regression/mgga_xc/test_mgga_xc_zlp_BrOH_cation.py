
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_xc_zlp_BrOH_cation_2_zk() not generated due to NaN in reference data

# test_mgga_xc_zlp_BrOH_cation_2_vrho() not generated due to NaN in reference data


def test_mgga_xc_zlp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.348752582893520e-09, -8.697505165787040e-09, -4.348752582893520e-09, -4.348702474215320e-09, -8.697404948430641e-09, -4.348702474215320e-09, -4.348464247574895e-09, -8.696928495149791e-09, -4.348464247574895e-09, -4.349210108631091e-09, -8.698420217262182e-09, -4.349210108631091e-09, -4.348821471649981e-09, -8.697642943299962e-09, -4.348821471649981e-09, -4.348821471649981e-09, -8.697642943299962e-09, -4.348821471649981e-09, -7.076794110800460e-06, -1.415358822160092e-05, -7.076794110800460e-06, -7.076732480125143e-06, -1.415346496025029e-05, -7.076732480125143e-06, -7.074608709368010e-06, -1.414921741873602e-05, -7.074608709368010e-06, -7.072880597552880e-06, -1.414576119510576e-05, -7.072880597552880e-06, -7.076031945934933e-06, -1.415206389186987e-05, -7.076031945934933e-06, -7.076031945934933e-06, -1.415206389186987e-05, -7.076031945934933e-06, -5.280135283020079e-03, -1.056027056604016e-02, -5.280135283020079e-03, -5.303540351434223e-03, -1.060708070286845e-02, -5.303540351434223e-03, -5.907947344127068e-03, -1.181589468825414e-02, -5.907947344127068e-03, -5.715360142716262e-03, -1.143072028543252e-02, -5.715360142716262e-03, -5.755651937406188e-03, -1.151130387481238e-02, -5.755651937406188e-03, -5.755651937406188e-03, -1.151130387481238e-02, -5.755651937406188e-03, -1.196862458451406e+00, -2.393724916902812e+00, -1.196862458451406e+00, -1.126969782758732e+00, -2.253939565517463e+00, -1.126969782758732e+00, -2.851740880497651e-03, -5.703481760995302e-03, -2.851740880497651e-03, -3.605654014897684e+00, -7.211308029795368e+00, -3.605654014897684e+00, -2.267061268542784e+00, -4.534122537085567e+00, -2.267061268542784e+00, -2.267061268542784e+00, -4.534122537085568e+00, -2.267061268542784e+00, -8.177020740879842e+05, -1.635404148175968e+06, -8.177020740879842e+05, -6.662462376457667e+05, -1.332492475291533e+06, -6.662462376457667e+05, -7.186276591767912e+02, -1.437255318353582e+03, -7.186276591767912e+02, -7.350595051088942e+06, -1.470119010217788e+07, -7.350595051088942e+06, -2.948195114472577e+06, -5.896390228945155e+06, -2.948195114472577e+06, -2.948195114472577e+06, -5.896390228945155e+06, -2.948195114472577e+06, -1.385278933660921e-06, -2.770557867321843e-06, -1.385278933660921e-06, -1.384250058361637e-06, -2.768500116723274e-06, -1.384250058361637e-06, -1.385227667656275e-06, -2.770455335312551e-06, -1.385227667656275e-06, -1.384319412155947e-06, -2.768638824311895e-06, -1.384319412155947e-06, -1.384759368591055e-06, -2.769518737182110e-06, -1.384759368591055e-06, -1.384759368591055e-06, -2.769518737182110e-06, -1.384759368591055e-06, -7.170088132460641e-05, -1.434017626492128e-04, -7.170088132460641e-05, -6.964650483811619e-05, -1.392930096762324e-04, -6.964650483811619e-05, -7.324856086402937e-05, -1.464971217280587e-04, -7.324856086402937e-05, -7.138028011526864e-05, -1.427605602305373e-04, -7.138028011526864e-05, -6.983698332927143e-05, -1.396739666585429e-04, -6.983698332927143e-05, -6.983698332927143e-05, -1.396739666585429e-04, -6.983698332927143e-05, -9.029209763047321e-03, -1.805841952609464e-02, -9.029209763047321e-03, -6.478211447968723e-03, -1.295642289593745e-02, -6.478211447968723e-03, -1.232506408782298e-02, -2.465012817564595e-02, -1.232506408782298e-02, -1.055209381524666e-02, -2.110418763049333e-02, -1.055209381524666e-02, -8.468516407546317e-03, -1.693703281509263e-02, -8.468516407546317e-03, -8.468516407546317e-03, -1.693703281509263e-02, -8.468516407546317e-03, -1.552947523459047e+01, -3.105895046918093e+01, -1.552947523459047e+01, -1.189614187098494e+00, -2.379228374196989e+00, -1.189614187098494e+00, -2.120363224260269e+01, -4.240726448520538e+01, -2.120363224260269e+01, -7.749082887118513e-05, -1.549816577423703e-04, -7.749082887118513e-05, -8.185513914054752e+00, -1.637102782810950e+01, -8.185513914054752e+00, -8.185513914054752e+00, -1.637102782810950e+01, -8.185513914054752e+00, -2.074142000655703e+07, -4.148284001311406e+07, -2.074142000655703e+07, -8.048207041384462e+06, -1.609641408276892e+07, -8.048207041384462e+06, -2.354303250011862e+07, -4.708606500023725e+07, -2.354303250011862e+07, -1.036729552540080e+02, -2.073459105080159e+02, -1.036729552540080e+02, -1.117776055687955e+07, -2.235552111375909e+07, -1.117776055687955e+07, -1.117776055687955e+07, -2.235552111375909e+07, -1.117776055687955e+07, -8.855593173262262e-03, -1.771118634652452e-02, -8.855593173262262e-03, -9.062169907072615e-03, -1.812433981414523e-02, -9.062169907072615e-03, -8.988799100448270e-03, -1.797759820089654e-02, -8.988799100448270e-03, -8.928922710927871e-03, -1.785784542185574e-02, -8.928922710927871e-03, -8.958831028379266e-03, -1.791766205675853e-02, -8.958831028379266e-03, -8.958831028379266e-03, -1.791766205675853e-02, -8.958831028379266e-03, -9.886803737757840e-03, -1.977360747551568e-02, -9.886803737757840e-03, -1.822857611817221e-02, -3.645715223634442e-02, -1.822857611817221e-02, -1.515490133508640e-02, -3.030980267017280e-02, -1.515490133508640e-02, -1.272017635662274e-02, -2.544035271324548e-02, -1.272017635662274e-02, -1.389709377812720e-02, -2.779418755625439e-02, -1.389709377812720e-02, -1.389709377812720e-02, -2.779418755625439e-02, -1.389709377812720e-02, -5.360576133784672e-03, -1.072115226756934e-02, -5.360576133784672e-03, -4.665006548792752e-01, -9.330013097585504e-01, -4.665006548792752e-01, -2.240989294065001e-01, -4.481978588130003e-01, -2.240989294065001e-01, -7.352371492766531e-02, -1.470474298553306e-01, -7.352371492766531e-02, -1.286407902505955e-01, -2.572815805011910e-01, -1.286407902505955e-01, -1.286407902505955e-01, -2.572815805011910e-01, -1.286407902505955e-01, -2.538889762832258e-02, -5.077779525664516e-02, -2.538889762832258e-02, -8.563271814593451e+02, -1.712654362918690e+03, -8.563271814593451e+02, -2.478064159790648e+02, -4.956128319581295e+02, -2.478064159790648e+02, -8.514852788307489e-02, -1.702970557661498e-01, -8.514852788307489e-02, -3.942613786298352e+01, -7.885227572596703e+01, -3.942613786298352e+01, -3.942613786298350e+01, -7.885227572596700e+01, -3.942613786298350e+01, -2.061017242443139e+05, -4.122034484886277e+05, -2.061017242443139e+05, -1.576495655103937e+09, -3.152991310207874e+09, -1.576495655103937e+09, -8.120700702041957e+07, -1.624140140408391e+08, -8.120700702041957e+07, -5.070845240890996e+01, -1.014169048178199e+02, -5.070845240890996e+01, -1.524766479982568e+07, -3.049532959965135e+07, -1.524766479982568e+07, -1.524766479982573e+07, -3.049532959965147e+07, -1.524766479982573e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_zlp_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [8.407534794122445e-05, 8.407534794122443e-05, 8.407508259934248e-05, 8.407508259934251e-05, 8.407382108021363e-05, 8.407382108021362e-05, 8.407777058538474e-05, 8.407777058538472e-05, 8.407571272608525e-05, 8.407571272608526e-05, 8.407571272608525e-05, 8.407571272608526e-05, 5.904359833207200e-04, 5.904359833207197e-04, 5.904346644758610e-04, 5.904346644758607e-04, 5.903892123074687e-04, 5.903892123074688e-04, 5.903522203528093e-04, 5.903522203528094e-04, 5.904196730265151e-04, 5.904196730265152e-04, 5.904196730265151e-04, 5.904196730265152e-04, 3.161160789303327e-03, 3.161160789303327e-03, 3.164682570259435e-03, 3.164682570259435e-03, 3.251838255728939e-03, 3.251838255728938e-03, 3.224823650114334e-03, 3.224823650114333e-03, 3.230531296978962e-03, 3.230531296978963e-03, 3.230531296978962e-03, 3.230531296978963e-03, 1.233590250272586e-02, 1.233590250272586e-02, 1.215131104892758e-02, 1.215131104892758e-02, 2.706846237583015e-03, 2.706846237583014e-03, 1.626095094862216e-02, 1.626095094862217e-02, 1.447676700453806e-02, 1.447676700453806e-02, 1.447676700453806e-02, 1.447676700453807e-02, 3.555284819929443e-01, 3.555284819929447e-01, 3.377782246278896e-01, 3.377782246278898e-01, 6.118348215308389e-02, 6.118348215308388e-02, 6.156420597588805e-01, 6.156420597588805e-01, 4.899241522046842e-01, 4.899241522046848e-01, 4.899241522046842e-01, 4.899241522046845e-01, 3.879039758468550e-04, 3.879039758468549e-04, 3.878293944749018e-04, 3.878293944749018e-04, 3.879002606441153e-04, 3.879002606441155e-04, 3.878344231123828e-04, 3.878344231123830e-04, 3.878663186602007e-04, 3.878663186602006e-04, 3.878663186602007e-04, 3.878663186602006e-04, 1.066252482006615e-03, 1.066252482006616e-03, 1.058403434529226e-03, 1.058403434529226e-03, 1.072055081188450e-03, 1.072055081188450e-03, 1.065038767435538e-03, 1.065038767435539e-03, 1.059138424190780e-03, 1.059138424190780e-03, 1.059138424190780e-03, 1.059138424190780e-03, 3.618129351861578e-03, 3.618129351861578e-03, 3.328138532608210e-03, 3.328138532608213e-03, 3.912679125030135e-03, 3.912679125030135e-03, 3.762796949513530e-03, 3.762796949513532e-03, 3.560242113146414e-03, 3.560242113146413e-03, 3.560242113146414e-03, 3.560242113146414e-03, 2.343856148384546e-02, 2.343856148384548e-02, 1.231714107223051e-02, 1.231714107223052e-02, 2.533884166129632e-02, 2.533884166129633e-02, 1.087502728963343e-03, 1.087502728963343e-03, 1.996670871083938e-02, 1.996670871083938e-02, 1.996670871083938e-02, 1.996670871083938e-02, 7.979293545301028e-01, 7.979293545301027e-01, 6.297571956542534e-01, 6.297571956542534e-01, 8.236091945098752e-01, 8.236091945098752e-01, 3.769444711494587e-02, 3.769444711494589e-02, 6.836588764076429e-01, 6.836588764076424e-01, 6.836588764076427e-01, 6.836588764076428e-01, 3.600500019150416e-03, 3.600500019150417e-03, 3.621447424548312e-03, 3.621447424548312e-03, 3.614048826371629e-03, 3.614048826371633e-03, 3.607977359558220e-03, 3.607977359558221e-03, 3.611013866208333e-03, 3.611013866208331e-03, 3.611013866208333e-03, 3.611013866208331e-03, 3.701662827324878e-03, 3.701662827324880e-03, 4.317230796783306e-03, 4.317230796783308e-03, 4.121397115258143e-03, 4.121397115258145e-03, 3.943849289125829e-03, 3.943849289125829e-03, 4.032586314616760e-03, 4.032586314616761e-03, 4.032586314616760e-03, 4.032586314616761e-03, 3.173216260603119e-03, 3.173216260603120e-03, 9.741324469723388e-03, 9.741324469723384e-03, 8.105468331736188e-03, 8.105468331736188e-03, 6.128259768729543e-03, 6.128259768729548e-03, 7.051923132602007e-03, 7.051923132602005e-03, 7.051923132602011e-03, 7.051923132602005e-03, 4.692093682864440e-03, 4.692093682864442e-03, 6.392616244316716e-02, 6.392616244316721e-02, 4.687736059279582e-02, 4.687736059279581e-02, 6.358260053442671e-03, 6.358260053442673e-03, 2.959420577796435e-02, 2.959420577796436e-02, 2.959420577796436e-02, 2.959420577796436e-02, 2.518984373145245e-01, 2.518984373145245e-01, 2.356106291447679e+00, 2.356106291447678e+00, 1.122432888957296e+00, 1.122432888957296e+00, 3.151801910329080e-02, 3.151801910329079e-02, 7.388456198869505e-01, 7.388456198869506e-01, 7.388456198869511e-01, 7.388456198869513e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
