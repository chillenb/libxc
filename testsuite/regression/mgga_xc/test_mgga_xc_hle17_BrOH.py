
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_hle17_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.496153565019777e+01, -2.496160143602745e+01, -2.496193892833766e+01, -2.496086133767593e+01, -2.496156996846888e+01, -2.496156996846888e+01, -4.098819584848794e+00, -4.098815939261201e+00, -4.098854495573639e+00, -4.099163057520845e+00, -4.098837873452102e+00, -4.643770585963924e+00, -8.206049949492652e-01, -9.464953144242235e-01, -9.380544620961105e-01, -9.376650071963802e-01, -9.467116719469356e-01, -9.467116719469356e-01, -2.677834869471784e-01, -2.698105830946133e-01, -9.851207011994971e-01, -2.322803409414011e-01, -2.684085981513986e-01, -2.684085981513986e-01, -2.125990706404397e-02, -2.226359356411511e-02, -8.832868248433827e-02, -1.022105449150503e-02, -2.203149488415878e-02, -2.203149488415878e-02, -6.871865898241542e+00, -6.873137566155759e+00, -6.872000333317752e+00, -6.141544067866816e+00, -6.872511856398587e+00, -6.872511856398587e+00, -2.328485861548417e+00, -2.342914322924222e+00, -2.322738445207285e+00, -2.333944221018439e+00, -2.345716238044467e+00, -2.654448332717041e+00, -7.807057562041156e-01, -8.479413164273991e-01, -7.427216941843529e-01, -7.727482158267605e-01, -8.101258139533989e-01, -7.318769205939877e-01, -1.304113553029313e-01, -2.907567449203692e-01, -1.288071766282780e-01, -2.543708347241310e+00, -2.004230673976974e-01, -2.004230673976974e-01, -7.191592650514366e-03, -1.126709816526787e-02, -8.444299875192105e-03, -8.308246573858863e-02, -7.479575107204661e-03, -1.026644905386797e-02, -8.090345343421751e-01, -8.045388132143568e-01, -7.322216066406803e-01, -8.074394256922184e-01, -8.068190917588404e-01, -8.068190917588404e-01, -7.835117281714230e-01, -6.782691953213856e-01, -7.080018028742635e-01, -7.368196219804656e-01, -7.220329510431307e-01, -6.538285903296301e-01, -8.876503332953879e-01, -2.958093229134754e-01, -3.907809441503737e-01, -4.351345663336426e-01, -4.306024773832075e-01, -4.306024773832074e-01, -5.558399856730604e-01, -8.218340738658630e-02, -1.094911188947478e-01, -4.522412427648463e-01, -1.069243374222853e-01, -1.506119842775294e-01, -2.492524240098208e-02, -3.086061953764476e-03, -5.861519063570958e-03, -1.437313527848749e-01, -8.725661658515852e-03, -8.725661658515843e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_hle17_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.359078523891078e+01, -3.359087235825813e+01, -3.359132039780931e+01, -3.358989316798663e+01, -3.359083067873279e+01, -3.359083067873279e+01, -5.363452113574213e+00, -5.363501435209095e+00, -5.365186198087642e+00, -5.364956267767472e+00, -5.363491098098877e+00, -5.614843270988575e+00, -1.061910808400983e+00, -9.615018673143136e-01, -9.131898970806709e-01, -9.316875937643969e-01, -9.627878863508159e-01, -9.627878863508159e-01, -2.680349814936982e-01, -2.736561193444669e-01, -1.285811809095036e+00, -2.247520123288107e-01, -2.696656059726781e-01, -2.696656059726781e-01, -2.820552281446478e-02, -2.952340667975598e-02, -1.115898057170523e-01, -1.361877010969872e-02, -2.921538778947518e-02, -2.921538778947518e-02, -8.495855532268248e+00, -8.495376628806632e+00, -8.495795367816616e+00, -8.240651167048506e+00, -8.495626598636749e+00, -8.495626598636749e+00, -3.020122267420098e+00, -3.042403998368132e+00, -3.011263659701959e+00, -3.028407295923928e+00, -3.047038420064115e+00, -3.134647473393793e+00, -9.905246699716687e-01, -1.071486330131260e+00, -9.303216743565240e-01, -9.831788960509276e-01, -1.030501320173623e+00, -9.757678458477093e-01, -1.715120317103391e-01, -2.634246752501890e-01, -1.693783714934676e-01, -3.209492965175597e+00, -1.984223368740111e-01, -1.984223368740111e-01, -9.517683093701856e-03, -1.500879768786993e-02, -1.124738200973828e-02, -1.093736905536517e-01, -9.897842717225670e-03, -1.367684222010995e-02, -9.806240848277886e-01, -9.856233454601796e-01, -9.729991149792077e-01, -9.668052636162779e-01, -9.832210935393793e-01, -9.832210935393793e-01, -9.535701055007623e-01, -8.596430459111349e-01, -9.012373704465418e-01, -9.282745282554763e-01, -9.158918544763128e-01, -8.736814877197844e-01, -1.126298863891361e+00, -3.838686928152380e-01, -4.128250547413763e-01, -5.623525971484223e-01, -4.961337455191546e-01, -4.945566782309785e-01, -7.257709459997860e-01, -1.047832212258067e-01, -1.351946277413646e-01, -5.620550286083439e-01, -1.406406420830801e-01, -1.676975209306978e-01, -3.309165673145063e-02, -4.114446842485833e-03, -7.812453181535889e-03, -1.601475457625131e-01, -1.162565837848353e-02, -1.162565837848352e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.489787092228353e-09, -4.489867515440708e-09, -4.490182749061485e-09, -4.488879578203523e-09, -4.489829704627024e-09, -4.489829704627024e-09, -2.308094471403352e-07, -2.320489364140705e-07, -2.693846718853624e-07, -2.548261288978697e-07, -2.311491018491568e-07, -6.055166087212944e-06, 2.047677442483101e-03, -4.012801552757912e-03, -4.364006244090478e-03, -4.224159563440987e-03, -4.003799582787100e-03, -4.003799582787100e-03, -6.505561342328730e-01, -6.217844562165222e-01, 1.289124852879630e-03, -8.722280273029912e-01, -6.418374416807044e-01, -6.418374416807044e-01, -6.172699506049595e+00, -6.125801623446921e+00, -2.141090649855856e+00, -2.186886440645711e+00, -6.407018066786399e+00, -6.407018066786504e+00, -7.190945999072084e-06, -7.264154078988229e-06, -7.199020275177259e-06, -1.879848663657939e-06, -7.227504248598094e-06, -7.227504248598094e-06, 8.428962046260663e-06, 6.389126730728975e-06, 9.333891627831728e-06, 7.696036071164876e-06, 5.879766182873754e-06, -5.505399893571574e-05, -9.703138181148119e-03, -1.666999340757380e-02, -9.428071057271326e-03, -1.224337381836767e-02, -1.069500064913849e-02, -4.260060939784010e-03, 8.018647358964545e+00, -4.930359826804418e-01, 8.414480781450697e+00, -1.191771306761881e-04, -1.423477456910605e+00, -1.423477456910605e+00, 1.529526707550625e+06, -2.759529670716202e+00, -1.084692551618647e+01, 5.537738763766768e+01, 1.300900657896991e+06, -3.400604605143851e+00, -2.054332109476917e-01, -9.500001019434687e-02, -2.882704017955302e-02, -1.724841605085811e-01, -1.317240382862406e-01, -1.317240382862406e-01, -1.660460011533326e-01, -1.564268193780359e-02, -2.126828297682063e-02, -3.574176338398582e-02, -2.664003050404262e-02, -9.987851285700145e-03, -1.029386714674488e-02, 1.734613387886631e-01, -1.328718245497397e-01, 7.006434372394600e-03, -7.598806572956955e-02, -7.947271094941502e-02, -1.979382289841621e-03, -2.012799368060359e+00, -1.737618487884898e+00, -6.105140760714374e-02, 1.863078099550571e+01, -2.096732960126401e+00, -2.411591811139778e+00, -3.052744552668218e+00, -6.000106076654102e+00, -2.515609504363844e+00, -4.780338812977840e+00, -4.780338812981329e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.941285666754929e-04, 1.941325190656647e-04, 1.941493930654298e-04, 1.940851326495726e-04, 1.941306515272242e-04, 1.941306515272242e-04, -6.619630579502577e-04, -6.617048678882923e-04, -6.537957240715973e-04, -6.568332650491639e-04, -6.618882636867195e-04, 2.153971730101374e-03, -2.347401301256487e-03, 2.287876645425885e-03, 1.692011339215978e-03, 1.678930575961506e-03, 2.305250912241564e-03, 2.305250912241564e-03, 7.691829261029239e-03, 8.339225828637168e-03, -8.669898150066548e-04, 6.986019977732891e-04, 7.870361073231117e-03, 7.870361073231117e-03, 8.125230215547721e-08, 9.965950437969633e-08, 1.244609537702449e-05, 5.415109153075203e-10, 1.015474037356140e-07, 1.015474037356579e-07, 1.625303704918832e-02, 1.642659094656226e-02, 1.627213163929525e-02, 9.784192181782872e-04, 1.633976749070726e-02, 1.633976749070726e-02, -1.407610321339803e-03, -1.384397683180177e-03, -1.413574174116961e-03, -1.400586906854385e-03, -1.376936854735680e-03, 2.747100726703397e-03, 2.871365693483146e-02, 7.012534914514748e-02, 1.957727108340975e-02, 3.745322090037562e-02, 3.804478813962994e-02, 3.186138088001865e-03, -1.951106491032854e-04, 2.338953804076566e-03, -2.224999662205598e-04, 1.288923001960499e-02, 6.651513178228888e-04, 6.651513178228888e-04, -3.778843070179596e-08, 1.090724531388683e-10, 2.414702416180381e-09, -4.408317036303392e-05, -4.352248200390482e-08, 1.073041868365333e-09, 7.004655874813344e-01, 3.218833891037199e-01, 9.584176730046556e-03, 5.860528279832035e-01, 4.473799349315054e-01, 4.473799349315054e-01, 5.147880409228359e-01, 2.923363535320716e-02, 5.155260063332218e-02, 9.759394396867094e-02, 6.912684350458928e-02, 6.831303316092049e-03, 4.964557850524327e-02, -3.884114595562348e-03, 7.363357209578367e-03, -7.806323123766569e-03, 1.018118583973443e-02, 1.183215305940756e-02, -4.475372937924170e-03, 7.991275247649199e-06, 2.537689427869721e-05, 2.405738713191047e-02, -1.740509125526284e-04, 1.982547686533848e-04, 4.134146667187624e-08, 2.802335608473946e-12, 1.724398123506011e-10, 2.117489655422713e-04, 8.250094889126154e-10, 8.250094951847020e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
