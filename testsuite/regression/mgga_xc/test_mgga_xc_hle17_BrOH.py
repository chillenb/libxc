
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_hle17_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.796464113886803e+01, -2.796470953855628e+01, -2.796515034006114e+01, -2.796403410758007e+01, -2.796467599216192e+01, -2.796467599216192e+01, -4.335338985074995e+00, -4.335353522004581e+00, -4.336095473185407e+00, -4.338261282301523e+00, -4.335349989139238e+00, -4.335349989139238e+00, -8.488094529881304e-01, -8.485192053345693e-01, -8.439657503950391e-01, -8.515489026487352e-01, -8.487030066448243e-01, -8.487030066448243e-01, -2.633690731779276e-01, -2.649361152050539e-01, -9.875279919419033e-01, -2.188753368482506e-01, -2.637983250309482e-01, -2.637983250309482e-01, -2.125882675904726e-02, -2.226202477876022e-02, -8.797574669895147e-02, -1.021951568240581e-02, -2.203015012952254e-02, -2.203015012952254e-02, -6.867462485311969e+00, -6.868738661381738e+00, -6.867653181530684e+00, -6.868642452934409e+00, -6.868035300720098e+00, -6.868035300720098e+00, -2.610469027037034e+00, -2.628260605019790e+00, -2.608111201856703e+00, -2.621915382590683e+00, -2.625740033024772e+00, -2.625740033024772e+00, -7.516664367969915e-01, -7.810342734154497e-01, -7.050793077775335e-01, -7.116071402155539e-01, -7.825422289510963e-01, -7.825422289510963e-01, -1.791431504935513e-01, -2.866301065777223e-01, -1.757871461763144e-01, -2.299676766458884e+00, -1.959635270391694e-01, -1.959635270391694e-01, -9.858835289162241e-03, -1.126540377892787e-02, -8.443736257369987e-03, -1.189390003128620e-01, -1.026447269824494e-02, -1.026447269824494e-02, -7.622861498078793e-01, -7.824179574917801e-01, -7.782551856333606e-01, -7.731628394470698e-01, -7.759572788900092e-01, -7.759572788900092e-01, -7.210064990171882e-01, -6.760010840198998e-01, -7.031922703782381e-01, -7.256423694381545e-01, -7.144775512885778e-01, -7.144775512885778e-01, -8.145936914759350e-01, -3.399980008076741e-01, -3.844190559710343e-01, -4.658951248461420e-01, -4.223340593361238e-01, -4.223340593361237e-01, -6.029805905758929e-01, -8.203062063749468e-02, -1.087188641300443e-01, -4.356451867682682e-01, -1.482645816932323e-01, -1.482645816932323e-01, -2.490303723109711e-02, -3.085988382605967e-03, -5.861419590212822e-03, -1.413167560081175e-01, -8.724133965204840e-03, -8.724133965204829e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_hle17_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.468961122774156e+01, -3.468967892087852e+01, -3.469024428898770e+01, -3.468914395332978e+01, -3.468964455176672e+01, -3.468964455176672e+01, -5.298253379861004e+00, -5.298302513419530e+00, -5.300002596679574e+00, -5.300306898612729e+00, -5.298288646036160e+00, -5.298288646036160e+00, -1.009848285388925e+00, -1.007937497653515e+00, -9.543771192684222e-01, -9.667198990488036e-01, -1.009157982267110e+00, -1.009157982267110e+00, -2.700798596803284e-01, -2.763202062917606e-01, -1.247981984293669e+00, -1.982243131828504e-01, -2.719207759335840e-01, -2.719207759335840e-01, -2.820122964643914e-02, -2.951717445952490e-02, -1.102594038161594e-01, -1.361262101508698e-02, -2.921004634963578e-02, -2.921004634963578e-02, -8.487203804488383e+00, -8.486787593504516e+00, -8.487259590771568e+00, -8.486930804429038e+00, -8.486859276785767e+00, -8.486859276785767e+00, -3.076478692834256e+00, -3.115029678489053e+00, -3.062668756059268e+00, -3.093342191413423e+00, -3.119285886489681e+00, -3.119285886489681e+00, -9.322385357892371e-01, -1.016269790122866e+00, -8.757358040256475e-01, -9.226723714804748e-01, -9.712847414764010e-01, -9.712847414764010e-01, -1.869677403242889e-01, -2.599938798057288e-01, -1.816037499207209e-01, -3.027140623683324e+00, -1.879231390550691e-01, -1.879231390550691e-01, -1.313272325906771e-02, -1.500202799439556e-02, -1.124513065465487e-02, -1.402395139043349e-01, -1.366894674823137e-02, -1.366894674823137e-02, -9.689544716238593e-01, -9.659352884071417e-01, -9.650494293393422e-01, -9.654159910046767e-01, -9.650658215547447e-01, -9.650658215547447e-01, -9.441060466415604e-01, -8.535386176255915e-01, -8.867553507613062e-01, -9.031646331883605e-01, -8.953909001249605e-01, -8.953909001249605e-01, -1.063975518046800e+00, -3.307188996822651e-01, -4.170310510174768e-01, -5.675754909173841e-01, -4.967944213836478e-01, -4.967944213836475e-01, -7.442771267618632e-01, -1.042008199767915e-01, -1.323641778123422e-01, -5.390884787316701e-01, -1.603347062611431e-01, -1.603347062611430e-01, -3.300332737645124e-02, -4.114152597207081e-03, -7.812055492254954e-03, -1.525864653046249e-01, -1.161955440369482e-02, -1.161955440369480e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.655581885379179e-08, -1.655624965457426e-08, -1.655721110485421e-08, -1.655017812365686e-08, -1.655605405843081e-08, -1.655605405843081e-08, -1.486666896079597e-05, -1.486924510409272e-05, -1.494373965847898e-05, -1.489363498958438e-05, -1.486720383680481e-05, -1.486720383680481e-05, -5.897102552537866e-03, -5.919789001575105e-03, -6.441031218651843e-03, -6.327852242852775e-03, -5.905670410088848e-03, -5.905670410088848e-03, -7.021600599416632e-01, -6.771984111193377e-01, -1.542245135860992e-03, -1.432948379448263e+00, -6.951874496143692e-01, -6.951874496143692e-01, -6.425782125631223e+00, -6.445333509898819e+00, -2.809488073807990e+00, -4.539811564629582e+00, -6.695499417988707e+00, -6.695499417988707e+00, -7.237526058820016e-06, -7.310586772742910e-06, -7.244994028459128e-06, -7.301787720775671e-06, -7.274807864175648e-06, -7.274807864175648e-06, -6.711117407448489e-05, -6.457656995875296e-05, -6.625675467693970e-05, -6.419138132630034e-05, -6.671533484991140e-05, -6.671533484991140e-05, -2.269451168108651e-02, -2.400909065891615e-02, -2.445194031102167e-02, -2.420221383384951e-02, -2.263991504277762e-02, -2.263991504277762e-02, -1.666896064558836e+00, -5.344475883081258e-01, -1.911477849528826e+00, -1.675369848490895e-04, -1.790595157725922e+00, -1.790595157725922e+00, -4.815935617341586e+00, -4.826621040565115e+00, -1.381329540636201e+01, -2.851378584867706e+00, -7.129002421274556e+00, -7.129002421274439e+00, -1.833968080526333e-01, -1.044523222301677e-01, -1.273177859021975e-01, -1.499685854768468e-01, -1.380545248021330e-01, -1.380545248021330e-01, -1.053299408129119e-01, -1.792328573293901e-02, -2.644497072604229e-02, -4.643267691128083e-02, -3.445744086432528e-02, -3.445744086432528e-02, -1.580020039194937e-02, -2.603399716608043e-01, -1.460628299283994e-01, -8.420596980526261e-02, -9.958467447484762e-02, -9.958467447484774e-02, -3.148043162396011e-02, -2.355095078050808e+00, -2.415042854414712e+00, -1.400587038245261e-01, -2.817179762114234e+00, -2.817179762114239e+00, -4.831267035362364e+00, -8.297569267368544e+00, -7.145144050441751e+00, -3.456488298143918e+00, -1.041022139548148e+01, -1.041022139548413e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_hle17_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_hle17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.315879895767765e-03, 2.315964620105064e-03, 2.316331912786818e-03, 2.314954340934706e-03, 2.315924544649107e-03, 2.315924544649107e-03, 3.414074816605048e-03, 3.415211824838707e-03, 3.450649268517634e-03, 3.454029065203243e-03, 3.414261272158156e-03, 3.414261272158156e-03, 5.191534888643620e-03, 5.195785764215461e-03, 4.996738868840840e-03, 5.565237863432493e-03, 5.194158869140367e-03, 5.194158869140367e-03, 1.122359907874123e-02, 1.261273520894714e-02, 7.005910323285780e-04, 1.265138074929648e-03, 1.165182585937502e-02, 1.165182585937502e-02, 7.241667506010877e-08, 8.863347593989003e-08, 1.011966672845710e-05, 4.944692063306316e-10, 9.036216543031430e-08, 9.036216543031417e-08, 1.621060759175931e-02, 1.638316126045406e-02, 1.623012882702588e-02, 1.636417391764513e-02, 1.629610497624451e-02, 1.629610497624451e-02, 3.471813051157393e-03, 3.562764368799987e-03, 3.278037481513975e-03, 3.341733570589525e-03, 3.800445116085131e-03, 3.800445116085131e-03, 3.841611892752797e-02, 2.995640411857771e-02, 2.870429254864148e-02, 2.147172956100877e-02, 4.587397083147034e-02, 4.587397083147034e-02, 2.136428204756171e-04, 3.178865300153603e-03, 2.577232222784808e-04, 4.179893307216202e-03, 7.415904639144098e-04, 7.415904639144098e-04, 7.854186256358471e-10, 1.110713448047754e-09, 2.213681946460294e-09, 3.125009605056719e-05, 9.798167786274184e-10, 9.798167786308328e-10, 3.034036957424241e-01, 2.554385747085206e-01, 2.891832178297903e-01, 3.112539774431559e-01, 3.012278423828212e-01, 3.012278423828212e-01, 8.688983914099174e-02, 3.164538671971325e-02, 5.512795890337623e-02, 9.739741956603308e-02, 7.241673399253799e-02, 7.241673399253802e-02, 2.102777970150703e-02, 5.593935014987311e-03, 1.137972467218123e-02, 2.936399396719802e-02, 2.000279748562481e-02, 2.000279748562480e-02, 2.909909452024101e-02, 6.461185904225738e-06, 2.073585944301343e-05, 4.217837348857007e-02, 1.790669495007146e-04, 1.790669495007156e-04, 3.670478782205215e-08, 2.607528149676234e-12, 1.591457907753724e-10, 1.940921659687020e-04, 7.560971001991170e-10, 7.560971030755795e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
