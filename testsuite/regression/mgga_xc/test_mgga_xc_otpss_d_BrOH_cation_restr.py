
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_xc_otpss_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.048808028729622e+01, -2.048816461924143e+01, -2.048854591180200e+01, -2.048729270917596e+01, -2.048794855941824e+01, -2.048794855941824e+01, -3.341003873109456e+00, -3.341008194255541e+00, -3.341178991371558e+00, -3.341405288907276e+00, -3.341042392704403e+00, -3.745943879048268e+00, -6.911909501225290e-01, -7.710076681284450e-01, -7.629448837376743e-01, -7.632211557867848e-01, -7.632180425015789e-01, -7.632180425015789e-01, -2.148032459908081e-01, -2.164923843907601e-01, -7.990702843364178e-01, -1.890369455300918e-01, -1.991577889158122e-01, -1.991577889158123e-01, -9.945129779838616e-03, -1.046724155256040e-02, -5.733455471278912e-02, -5.744878244298441e-03, -7.218335164267787e-03, -7.218335164267787e-03, -5.366811275133757e+00, -5.367146223071656e+00, -5.366822948158377e+00, -5.083199432252875e+00, -5.366982685133115e+00, -5.366982685133115e+00, -1.913745663328559e+00, -1.926919757718790e+00, -1.904132348863774e+00, -1.915779405169828e+00, -1.925670255656547e+00, -2.148920946285637e+00, -6.446497472872110e-01, -6.947834746992780e-01, -6.009651139225514e-01, -6.209924434126811e-01, -6.539960565958294e-01, -6.181899425175488e-01, -1.120587116614276e-01, -2.322143200967715e-01, -1.045113219463862e-01, -2.035003730292895e+00, -1.594230244112510e-01, -1.594230244112510e-01, -4.377035836428747e-03, -5.616176494613367e-03, -4.294175293963698e-03, -7.324475953895125e-02, -5.070889071564982e-03, -5.173217954800509e-03, -6.419808879796300e-01, -6.396609362479585e-01, -6.188940054181127e-01, -6.412243392156119e-01, -6.408915005809828e-01, -6.408915005809828e-01, -6.256788612900505e-01, -5.461148551650578e-01, -5.690876024835866e-01, -5.920155815511909e-01, -5.803190496236649e-01, -5.568274243742578e-01, -7.276021898183935e-01, -2.464516823523105e-01, -3.119781666906827e-01, -3.750679652754844e-01, -3.478597486657450e-01, -3.478597486657450e-01, -4.788339545202868e-01, -5.490933943559874e-02, -7.445271753106657e-02, -3.789432134408010e-01, -9.095886369543860e-02, -1.141821019469208e-01, -1.403401154553632e-02, -1.501348408386332e-03, -3.151270481216713e-03, -1.076524356444021e-01, -4.786832371077700e-03, -4.786832371077703e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_xc_otpss_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.875508410872360e+01, -2.875489078071502e+01, -2.875416550020762e+01, -2.875701945433947e+01, -2.875550610021066e+01, -2.875550610021066e+01, -4.409987388256394e+00, -4.409992010628914e+00, -4.410191509288079e+00, -4.410501744165806e+00, -4.410019658511109e+00, -4.493504878365950e+00, -9.056442811224940e-01, -8.280494462339362e-01, -7.827152572941606e-01, -7.982834046651451e-01, -7.939332056109978e-01, -7.939332056109978e-01, -2.096705914949947e-01, -2.154329341984973e-01, -1.049015298787011e+00, -1.824295897976551e-01, -1.780117504030716e-01, -1.780117504030716e-01, -1.325206059847317e-02, -1.394666405437976e-02, -7.526757029932432e-02, -7.658500195599925e-03, -9.621315206735436e-03, -9.621315206735436e-03, -6.667550841358452e+00, -6.668569143465565e+00, -6.667600049766426e+00, -6.623291801415249e+00, -6.668065426549227e+00, -6.668065426549227e+00, -2.520651753816083e+00, -2.537796479598800e+00, -2.508164081024387e+00, -2.523309760561619e+00, -2.536158716486822e+00, -2.553171156853096e+00, -8.152890174711866e-01, -8.776289597566005e-01, -7.551554662420678e-01, -7.862031387132431e-01, -8.274029405491548e-01, -8.247540157494022e-01, -1.455147182493852e-01, -2.071095200891724e-01, -1.357105913507313e-01, -2.522591812149086e+00, -1.658168466077801e-01, -1.658168466077802e-01, -5.768182488550573e-03, -7.487060522486592e-03, -5.724073586230382e-03, -9.514626222656994e-02, -6.677823501989784e-03, -6.896006306141469e-03, -8.140473929214754e-01, -8.082133031405823e-01, -8.072256153503434e-01, -8.116125018208358e-01, -8.107538981447023e-01, -8.107538981447023e-01, -7.929045395076240e-01, -6.916601065026419e-01, -7.222087795485267e-01, -7.489479141960586e-01, -7.355138942075437e-01, -7.858668962347860e-01, -9.189229627914840e-01, -3.207214892458620e-01, -3.340261856983709e-01, -4.885091411236364e-01, -4.140129639951129e-01, -4.140129639951129e-01, -6.244860396404501e-01, -7.217283069944236e-02, -9.671143282892454e-02, -4.831404214723873e-01, -1.181152704526571e-01, -1.375340150599597e-01, -1.869623922490540e-02, -2.001773051621399e-03, -4.201305199109734e-03, -1.309690663534908e-01, -6.380913219183572e-03, -6.380913219183558e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.346716432918251e-09, -2.345883625296066e-09, -2.342496389293454e-09, -2.354820794398537e-09, -2.348322577939473e-09, -2.348322577939473e-09, 9.492731401749432e-06, 9.492581558120484e-06, 9.487903584995817e-06, 9.486370207671817e-06, 9.490479363833840e-06, -3.760728697567834e-06, 6.857435252826857e-03, -2.371475147075866e-03, -2.658784495514327e-03, -2.632840492139011e-03, -2.666237613074816e-03, -2.666237613074816e-03, -5.213544976832445e-01, -4.872877881378748e-01, 3.710104800583050e-03, -7.433221523653296e-01, -7.837921674374151e-01, -7.837921674374151e-01, -1.189124204509311e+00, -1.239482798191516e+00, -6.297961795032183e-01, -8.711480955629581e-01, -1.213281153301285e+00, -1.213281153301285e+00, -3.621306020447880e-06, -3.651585899121099e-06, -3.623058607616122e-06, 1.032872261456792e-06, -3.636415718170784e-06, -3.636415718170784e-06, 9.482458341407643e-05, 9.212186363246849e-05, 9.685409109471148e-05, 9.440335461740514e-05, 9.237273171907737e-05, -3.223936246886798e-05, -5.675538496171098e-03, -9.205095903010465e-03, -5.182530392728436e-03, -6.696138978346046e-03, -6.090699972159469e-03, 7.559422713485201e-03, 2.006681636396212e+01, -4.144359863895694e-01, 2.740015996273435e+01, -7.323241467130115e-05, -1.064664639693112e+00, -1.064664639693112e+00, 2.679071208118236e+07, -7.700463225313445e-01, -6.227482239671732e+00, 1.339802133529997e+02, 1.443792883002766e+07, -2.389883038635587e+00, -6.095541133482982e-02, -3.391082942335438e-02, -8.439509207233489e-03, -4.733036509062500e-02, -4.342732569451022e-02, -4.342732569451024e-02, -6.036319265274349e-02, -8.523511012210603e-03, -1.152952427292138e-02, -1.829767488205070e-02, -1.418377412984957e-02, -7.417806152728346e-03, -6.049148895603279e-03, 6.018283317314126e-01, -9.324097703834325e-02, 9.523747157594317e-02, -4.300942789945097e-02, -4.300942789945093e-02, 3.282410248487981e-02, -6.406679364600228e-01, -5.869840905174276e-01, -2.862355417892048e-02, 5.093845779409923e+01, -1.112670813844209e+00, -5.688326121486275e-01, -9.425271648492201e-01, -2.702758741641099e+00, -1.195274380212366e+00, -3.406054673877001e+00, -3.406054673921180e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_xc_otpss_d_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_xc_otpss_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.691618739400551e-04, 8.690046973355659e-04, 8.683672256870821e-04, 8.706931163308639e-04, 8.694664509661149e-04, 8.694664509661149e-04, -1.297705915148529e-04, -1.298124450768310e-04, -1.309017898889667e-04, -1.304525010847997e-04, -1.305144197813391e-04, 2.859154957151683e-04, -1.590259065421098e-04, -5.886785590209430e-04, -1.304601323784912e-03, -6.912885515567492e-04, -7.072082171890099e-04, -7.072082171890099e-04, 9.517101477017186e-05, 3.151670069420787e-04, -4.297072280095467e-05, -1.898089060085734e-04, -4.369458437418767e-04, -4.369458437418730e-04, 2.460638430422199e-09, 3.316906255940297e-09, -9.482354200050842e-07, 1.184796036403349e-10, 5.701739103351429e-10, 5.701739103351429e-10, 6.198576428292508e-03, 6.270905918127758e-03, 6.202721659565757e-03, -1.787784510064851e-03, 6.234682613649744e-03, 6.234682613649744e-03, -1.647951839262464e-04, -1.764396404232554e-04, -1.558174906047772e-04, -1.660708478794935e-04, -1.758167102791366e-04, 2.074810728719434e-04, 1.379168220993537e-02, 3.404925661709979e-02, 7.284814392724581e-03, 1.491018656064682e-02, 1.632224770875542e-02, 6.512841664609791e-03, -1.138378432572671e-05, -1.800909187916821e-03, -9.283726089083773e-06, 4.556240230220552e-03, -3.405966588751247e-05, -3.405966588750613e-05, -3.218617316959396e-10, 8.846777116345166e-11, 5.691241628120229e-10, -3.522613725823612e-06, -2.028747841470883e-09, 3.278456674669961e-10, 1.872822949339301e-01, 1.020264388244708e-01, -1.185946162444099e-02, 1.441869898477294e-01, 1.319048178259966e-01, 1.319048178259965e-01, 1.703604092956764e-01, 1.154672112951692e-02, 2.184365138894328e-02, 4.215744663810892e-02, 2.988977054003701e-02, 4.488507136614112e-02, 2.462629567779875e-02, -1.648291502807606e-04, 2.587659068238948e-04, -8.926898244973974e-04, 2.930096393810506e-03, 2.930096393810511e-03, -1.047502351390422e-03, 1.647488613929064e-06, 4.461150548418486e-06, 1.349295824338724e-02, -9.999909082933503e-06, 3.415854627734768e-05, 3.956170621483709e-09, 2.108541697266352e-13, 3.702394581386277e-11, 3.409211168144396e-05, 3.859428923112417e-10, 3.859429114699832e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
