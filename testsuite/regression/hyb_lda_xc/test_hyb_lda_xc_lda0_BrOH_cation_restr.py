
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_lda0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.499014056553545e+01, -1.499018209043001e+01, -1.499037951614491e+01, -1.498976144284059e+01, -1.499008347861835e+01, -1.499008347861835e+01, -2.503514986294813e+00, -2.503520256704314e+00, -2.503701908004866e+00, -2.503849767699698e+00, -2.503580167607656e+00, -2.503580167607656e+00, -5.171135975000405e-01, -5.165788734380236e-01, -5.037059300497595e-01, -5.076233939181194e-01, -5.067903862495809e-01, -5.067903862495809e-01, -1.489601379684506e-01, -1.509957044037397e-01, -5.974516591546301e-01, -1.162272313933398e-01, -1.290008668514726e-01, -1.290008668514726e-01, -7.033769626025593e-03, -7.379539458325079e-03, -3.544110656022974e-02, -4.190848614569500e-03, -5.202053758615830e-03, -5.202053758615830e-03, -3.715712313718972e+00, -3.716381625692583e+00, -3.715745649045060e+00, -3.716336489680917e+00, -3.716050227946208e+00, -3.716050227946208e+00, -1.433184956129242e+00, -1.443213558592539e+00, -1.425863041653072e+00, -1.434726288964540e+00, -1.442268330597916e+00, -1.442268330597916e+00, -4.562310854596059e-01, -4.929766473041702e-01, -4.243547876453350e-01, -4.399672705088795e-01, -4.630996215176716e-01, -4.630996215176716e-01, -8.378433919744756e-02, -1.491643569274040e-01, -7.814211194903790e-02, -1.406741823443287e+00, -9.670509550349664e-02, -9.670509550349664e-02, -3.274861036045515e-03, -4.101681230588754e-03, -3.177420226972006e-03, -5.476873777525352e-02, -3.793928479109993e-03, -3.793928479109993e-03, -4.583000662619080e-01, -4.558438721744753e-01, -4.567082260535094e-01, -4.574201172462233e-01, -4.570637892392809e-01, -4.570637892392809e-01, -4.466888925299523e-01, -3.874973044580216e-01, -4.044590331511988e-01, -4.212532609694379e-01, -4.126795607547779e-01, -4.126795607547779e-01, -5.152879774322233e-01, -1.843247825329596e-01, -2.177335896248165e-01, -2.809096859557051e-01, -2.471288258211770e-01, -2.471288258211770e-01, -3.588805905653474e-01, -3.406636460111418e-02, -4.504028300068407e-02, -2.716093612524527e-01, -6.801217500908140e-02, -6.801217500908141e-02, -9.703805123996273e-03, -1.155537569989094e-03, -2.363074694071173e-03, -6.428588849843668e-02, -3.523872795158700e-03, -3.523872795158701e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_lda0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.995330741239229e+01, -1.995336275808400e+01, -1.995362589331648e+01, -1.995280210568643e+01, -1.995323132514525e+01, -1.995323132514525e+01, -3.317452229656480e+00, -3.317459242423487e+00, -3.317700946286536e+00, -3.317897687315873e+00, -3.317538959420121e+00, -3.317538959420121e+00, -6.787766964875944e-01, -6.780694257158663e-01, -6.610440341234438e-01, -6.662248654919611e-01, -6.651231940587689e-01, -6.651231940587689e-01, -1.937880216906664e-01, -1.964498721615317e-01, -7.850877278216520e-01, -1.510441171749854e-01, -1.677103728722285e-01, -1.677103728722285e-01, -9.232214557631707e-03, -9.683434526934499e-03, -4.610308453612888e-02, -5.515996003822409e-03, -6.839271225914764e-03, -6.839271225914764e-03, -4.930962183351159e+00, -4.931853325052175e+00, -4.931006566982376e+00, -4.931793229628364e+00, -4.931412092292332e+00, -4.931412092292332e+00, -1.894070333034235e+00, -1.907396624845749e+00, -1.884340940887270e+00, -1.896118481852612e+00, -1.906140567238677e+00, -1.906140567238677e+00, -5.982807611800655e-01, -6.468559576406701e-01, -5.561644793483509e-01, -5.767896066135167e-01, -6.073585361370518e-01, -6.073585361370518e-01, -1.088054185159232e-01, -1.940550544796381e-01, -1.014736548668140e-01, -1.858933292530186e+00, -1.256111499092856e-01, -1.256111499092856e-01, -4.315582827000007e-03, -5.399219376537243e-03, -4.187772730699989e-03, -7.114416685975600e-02, -4.996051176129024e-03, -4.996051176129024e-03, -6.010151224001823e-01, -5.977690304293214e-01, -5.989113416408238e-01, -5.998521728441655e-01, -5.993812505714343e-01, -5.993812505714343e-01, -5.856709491651378e-01, -5.074960219373765e-01, -5.298889799060182e-01, -5.520678086553619e-01, -5.407443485668136e-01, -5.407443485668136e-01, -6.763619980964914e-01, -2.400869310805947e-01, -2.839158165379886e-01, -3.669792291845152e-01, -3.225382859815903e-01, -3.225382859815903e-01, -4.697336679476249e-01, -4.432235532604654e-02, -5.853741044136700e-02, -3.547386395690759e-01, -8.832080914691054e-02, -8.832080914691053e-02, -1.271326941429692e-02, -1.529166445124228e-03, -3.118631294529267e-03, -8.348580403480602e-02, -4.642100189179011e-03, -4.642100189179008e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
