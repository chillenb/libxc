
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_cam_lda0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_cam_lda0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.498443438762419e+01, -1.498447593330000e+01, -1.498467345771771e+01, -1.498405507581064e+01, -1.498437727334560e+01, -1.498437727334560e+01, -2.485176562229820e+00, -2.485181845973595e+00, -2.485363954841515e+00, -2.485512186542256e+00, -2.485242065819784e+00, -2.485242065819784e+00, -4.919131076090908e-01, -4.913786797758495e-01, -4.784840643537625e-01, -4.824014271432767e-01, -4.823211920278114e-01, -4.823211920278114e-01, -1.295489241708636e-01, -1.314426921459398e-01, -5.727115969436926e-01, -9.983932360082452e-02, -1.155180178383503e-01, -1.155180178383503e-01, -6.577179740081087e-03, -6.889870066963938e-03, -3.114689637492186e-02, -3.972048799894664e-03, -4.704510205890192e-03, -4.704510205890192e-03, -3.699958411844634e+00, -3.700628946321252e+00, -3.699991811520238e+00, -3.700583723587011e+00, -3.700296944288791e+00, -3.700296944288791e+00, -1.411589818419407e+00, -1.421655352067087e+00, -1.404242699625103e+00, -1.413138815381719e+00, -1.420718489046219e+00, -1.420718489046219e+00, -4.309424864556571e-01, -4.677277437091925e-01, -3.992493158338482e-01, -4.148306270485986e-01, -4.382252693989211e-01, -4.382252693989211e-01, -7.163133704147848e-02, -1.297011552820557e-01, -6.685086032301689e-02, -1.385048859266864e+00, -8.274259271659007e-02, -8.274259271659007e-02, -3.119059063912489e-03, -3.889404930825329e-03, -3.026981343171998e-03, -4.727086963026196e-02, -3.543130453714608e-03, -3.543130453714608e-03, -4.330139054187850e-01, -4.305563220388158e-01, -4.314211565590185e-01, -4.321334210467807e-01, -4.317769035481528e-01, -4.317769035481528e-01, -4.213971804463772e-01, -3.622710707987375e-01, -3.791965331806043e-01, -3.959690205056715e-01, -3.874043653619940e-01, -3.874043653619940e-01, -4.900812318594583e-01, -1.626811134880262e-01, -1.947435808125367e-01, -2.564937098616252e-01, -2.233318440113536e-01, -2.233318440113535e-01, -3.337618065744730e-01, -3.000167597225308e-02, -3.917286952226225e-02, -2.473531710255723e-01, -5.832119919612984e-02, -5.832119919612984e-02, -8.990344069150641e-03, -1.118514163849325e-03, -2.262907247942146e-03, -5.520318913129084e-02, -3.305727958762351e-03, -3.305727958762352e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_cam_lda0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_cam_lda0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.995009496552530e+01, -1.995006982423133e+01, -1.995015895903429e+01, -1.995011656413748e+01, -1.995037756111147e+01, -1.995042443248994e+01, -1.994965125380871e+01, -1.994950253796336e+01, -1.995013069691084e+01, -1.994988185896745e+01, -1.995013069691084e+01, -1.994988185896745e+01, -3.301183787572582e+00, -3.301142615043183e+00, -3.301193735731913e+00, -3.301146720911755e+00, -3.301381360274453e+00, -3.301443488738679e+00, -3.301588388557816e+00, -3.301630744493629e+00, -3.300685551435652e+00, -3.301814458923014e+00, -3.300685551435652e+00, -3.301814458923014e+00, -6.529592694709524e-01, -6.548786463750481e-01, -6.520304412516210e-01, -6.543847044540978e-01, -6.377233252623989e-01, -6.344807014326317e-01, -6.407982711487364e-01, -6.418235464410904e-01, -6.552003024398509e-01, -6.243030312126413e-01, -6.552003024398509e-01, -6.243030312126413e-01, -1.695977809443895e-01, -1.721858820009570e-01, -1.719159863249077e-01, -1.749484175615877e-01, -7.509621864682609e-01, -7.702117004040011e-01, -1.305205960404521e-01, -1.310178833711662e-01, -1.567706978891169e-01, -1.351819820233321e-01, -1.567706978891169e-01, -1.351819820233321e-01, -8.680607273370326e-03, -8.487878936843440e-03, -9.105053654018917e-03, -8.877405017816212e-03, -4.033771839028521e-02, -3.988435646998403e-02, -5.184094571749511e-03, -5.217623535292280e-03, -5.960279662219070e-03, -7.195608220006670e-03, -5.960279662219070e-03, -7.195608220006670e-03, -4.917969660358047e+00, -4.916866938294636e+00, -4.918876730580743e+00, -4.917744701136294e+00, -4.918024371631929e+00, -4.916901116760014e+00, -4.918803809212172e+00, -4.917697265334396e+00, -4.918430371554059e+00, -4.917307330981397e+00, -4.918430371554059e+00, -4.917307330981397e+00, -1.874214945025333e+00, -1.874132415894659e+00, -1.887766411812137e+00, -1.887318398312520e+00, -1.863008942509893e+00, -1.865815037907342e+00, -1.874755299849995e+00, -1.877698902921279e+00, -1.889884312805648e+00, -1.882665277161112e+00, -1.889884312805648e+00, -1.882665277161112e+00, -5.736151856284734e-01, -5.725218528527923e-01, -6.217515080242131e-01, -6.219585814400447e-01, -5.239163608849572e-01, -5.374387540683192e-01, -5.449745983657313e-01, -5.578204000162961e-01, -5.926822008794795e-01, -5.712008890765128e-01, -5.926822008794796e-01, -5.712008890765129e-01, -9.288011689716011e-02, -9.297574207059987e-02, -1.709897193046187e-01, -1.713285839951816e-01, -8.641634583864767e-02, -8.675109299741776e-02, -1.839282900138727e+00, -1.838564212328863e+00, -1.071725295819514e-01, -1.082999074946549e-01, -1.071725295819514e-01, -1.082999074946549e-01, -4.123279770603961e-03, -4.062162922617604e-03, -5.108078941864313e-03, -5.078690834912846e-03, -4.019078877108322e-03, -3.930587921694815e-03, -6.091183244598385e-02, -6.088253589320168e-02, -5.044879541692004e-03, -4.488231600644181e-03, -5.044879541692003e-03, -4.488231600644179e-03, -5.750132641027927e-01, -5.766139524669338e-01, -5.717511981050424e-01, -5.733566159686473e-01, -5.728965634116856e-01, -5.745054156494548e-01, -5.738470672124187e-01, -5.754444976152282e-01, -5.733713839481992e-01, -5.749743693251927e-01, -5.733713839481992e-01, -5.749743693251927e-01, -5.597444567291679e-01, -5.610681899408868e-01, -4.812303266593665e-01, -4.826632887908264e-01, -5.036348177075269e-01, -5.051904988357931e-01, -5.260204107334825e-01, -5.273228519042659e-01, -5.146374126565112e-01, -5.159758087497105e-01, -5.146374126565112e-01, -5.159758087497105e-01, -6.511013892408852e-01, -6.518877892664461e-01, -2.153832550328918e-01, -2.159854650069266e-01, -2.580642524537174e-01, -2.594602972359557e-01, -3.407148427148663e-01, -3.418695535361261e-01, -2.970687781655894e-01, -2.970081199524123e-01, -2.970687781655894e-01, -2.970081199524123e-01, -4.430580055088545e-01, -4.451046329189262e-01, -3.864918230074933e-02, -3.859216085342576e-02, -5.054112414460576e-02, -5.030212921809735e-02, -3.275885363097492e-01, -3.305670608237202e-01, -7.532338223877803e-02, -7.536202307504178e-02, -7.532338223877803e-02, -7.536202307504178e-02, -1.176688022295835e-02, -1.161812045886156e-02, -1.476630086795260e-03, -1.475281699370468e-03, -3.013752522967855e-03, -2.941748681930327e-03, -7.125348482254622e-02, -7.123624330613290e-02, -4.663368807931223e-03, -4.194048242514807e-03, -4.663368807931224e-03, -4.194048242514807e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
