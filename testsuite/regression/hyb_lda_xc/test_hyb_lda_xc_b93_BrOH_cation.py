
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_b93_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_b93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.993427043698427e+00, -9.993454726976442e+00, -9.993586344124843e+00, -9.993174295511345e+00, -9.993388986541467e+00, -9.993388986541467e+00, -1.669009991006111e+00, -1.669013504655878e+00, -1.669134605661944e+00, -1.669233178617679e+00, -1.669053552503131e+00, -1.669053552503131e+00, -3.447444407987273e-01, -3.443889927974104e-01, -3.358099949335866e-01, -3.384161936106295e-01, -3.384028378605882e-01, -3.384028378605882e-01, -9.934337500462417e-02, -1.007121075467374e-01, -3.984704398063199e-01, -7.748808221120319e-02, -9.103824617106371e-02, -9.103824617106371e-02, -4.689557248092282e-03, -4.920229769005847e-03, -2.363432908563208e-02, -2.793907427224473e-03, -3.479832629871357e-03, -3.479832629871357e-03, -2.477141609349013e+00, -2.477587820919509e+00, -2.477163835412498e+00, -2.477557727109196e+00, -2.477366887980712e+00, -2.477366887980712e+00, -9.554566384918630e-01, -9.621424037447976e-01, -9.505766081679466e-01, -9.564855551883467e-01, -9.615203661651840e-01, -9.615203661651840e-01, -3.041548446979734e-01, -3.286511235789050e-01, -2.830366180508522e-01, -2.934258928068986e-01, -3.090303980156270e-01, -3.090303980156270e-01, -5.585715850070798e-02, -9.944353014077038e-02, -5.211995130285228e-02, -9.378279653779912e-01, -6.451318443516323e-02, -6.451318443516323e-02, -2.183260977869613e-03, -2.734460439403814e-03, -2.118320374060519e-03, -3.651268217184644e-02, -2.531308758002806e-03, -2.531308758002806e-03, -3.055350552535555e-01, -3.038976152228803e-01, -3.044738538926418e-01, -3.049484202607760e-01, -3.047108817731662e-01, -3.047108817731662e-01, -2.977937845853815e-01, -2.583332476695800e-01, -2.696412496822106e-01, -2.808367591918496e-01, -2.751210688905527e-01, -2.751210688905527e-01, -3.435256628042675e-01, -1.228843286798727e-01, -1.451600198342254e-01, -1.872749681000421e-01, -1.647525569188337e-01, -1.647525569188337e-01, -2.392576428370154e-01, -2.271101100876143e-02, -3.003074798654589e-02, -1.810859022238890e-01, -4.536305564698789e-02, -4.536305564698789e-02, -6.469458034644984e-03, -7.703583529145991e-04, -1.575391554194443e-03, -4.285901249143560e-02, -2.350566854719164e-03, -2.350566854719164e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_b93_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_b93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.330221335405820e+01, -1.330219652912075e+01, -1.330225602436305e+01, -1.330222765305162e+01, -1.330240157867232e+01, -1.330243294571219e+01, -1.330191783172927e+01, -1.330181830880872e+01, -1.330223747931031e+01, -1.330207095316050e+01, -1.330223747931031e+01, -1.330207095316050e+01, -2.211648784449150e+00, -2.211620854906036e+00, -2.211655441168434e+00, -2.211623548485990e+00, -2.211779558127486e+00, -2.211821703162610e+00, -2.211917425317900e+00, -2.211946157572279e+00, -2.211309670189659e+00, -2.212075468614446e+00, -2.211309670189659e+00, -2.212075468614446e+00, -4.518281203413396e-01, -4.532049297890719e-01, -4.511999192844152e-01, -4.528888139550847e-01, -4.418576149140206e-01, -4.395269123209953e-01, -4.437812914804219e-01, -4.445177851403515e-01, -4.541758672843067e-01, -4.319777422627768e-01, -4.541758672843067e-01, -4.319777422627768e-01, -1.278903801454420e-01, -1.304526628750907e-01, -1.294531310350737e-01, -1.324258519071121e-01, -5.164498516465937e-01, -5.301211004772995e-01, -1.003770004602879e-01, -1.010116303159803e-01, -1.229158795237731e-01, -9.460803313371823e-02, -1.229158795237730e-01, -9.460803313371821e-02, -6.146370760967988e-03, -6.163003601468721e-03, -6.444997626825906e-03, -6.465889222540201e-03, -3.056234150452387e-02, -3.090211388213463e-02, -3.677992435879999e-03, -3.676666808344702e-03, -4.591451382645037e-03, -4.514932478933561e-03, -4.591451382645037e-03, -4.514932478933560e-03, -3.287680247833840e+00, -3.286935908765346e+00, -3.288284230483122e+00, -3.287520110335689e+00, -3.287716765073077e+00, -3.286958566399201e+00, -3.288235567593469e+00, -3.287488650114253e+00, -3.287987042648077e+00, -3.287228989280166e+00, -3.287987042648077e+00, -3.287228989280166e+00, -1.262741849740415e+00, -1.262685259585280e+00, -1.271751304455125e+00, -1.271444154795899e+00, -1.255264296921084e+00, -1.257188678612930e+00, -1.263068920717043e+00, -1.265087293208311e+00, -1.273229768549242e+00, -1.268280453233258e+00, -1.273229768549242e+00, -1.268280453233258e+00, -3.992495447415481e-01, -3.984571619991848e-01, -4.311627430553290e-01, -4.313118355914088e-01, -3.657604224683456e-01, -3.756276666201829e-01, -3.797852571607867e-01, -3.891262053646503e-01, -4.124953130685111e-01, -3.969471709888580e-01, -4.124953130685111e-01, -3.969471709888581e-01, -7.240547111446130e-02, -7.266746099840818e-02, -1.292021446212463e-01, -1.295372284690535e-01, -6.699231421556479e-02, -6.828018070057713e-02, -1.239535324383304e+00, -1.239042291609035e+00, -8.271743025690463e-02, -8.471863370976877e-02, -8.271743025690463e-02, -8.471863370976877e-02, -2.876354323525374e-03, -2.877761825524320e-03, -3.598920849484138e-03, -3.600036934586361e-03, -2.790918241534493e-03, -2.792794424456913e-03, -4.738795369384500e-02, -4.747075196676013e-02, -3.320496907957094e-03, -3.340030650009204e-03, -3.320496907957094e-03, -3.340030650009203e-03, -4.000959013917011e-01, -4.012555183271516e-01, -3.979298348439838e-01, -3.990934348096580e-01, -3.986902278169147e-01, -3.998561198168201e-01, -3.993216845371623e-01, -4.004791388707597e-01, -3.990056752596003e-01, -4.001672351485449e-01, -3.990056752596003e-01, -4.001672351485449e-01, -3.899659631672829e-01, -3.909271654133187e-01, -3.378017861781141e-01, -3.388574798251711e-01, -3.526877808409883e-01, -3.538285319469169e-01, -3.675689004899836e-01, -3.685199691907097e-01, -3.600057138835793e-01, -3.609850758717749e-01, -3.600057138835793e-01, -3.609850758717749e-01, -4.506256579656344e-01, -4.511899102666607e-01, -1.597939403515497e-01, -1.603206594045325e-01, -1.887010160464240e-01, -1.898483908396407e-01, -2.442057778425799e-01, -2.450976555503569e-01, -2.150495975847400e-01, -2.150014428567965e-01, -2.150495975847400e-01, -2.150014428567964e-01, -3.123925497855232e-01, -3.139142351137875e-01, -2.952838749246813e-02, -2.956799444413044e-02, -3.886532028613346e-02, -3.918090473205127e-02, -2.353267777481916e-01, -2.376425762734174e-01, -5.833860284812934e-02, -5.940090555216653e-02, -5.833860284812934e-02, -5.940090555216654e-02, -8.465873068498296e-03, -8.484961967131777e-03, -1.019460142035845e-03, -1.019428512619512e-03, -2.078924654264177e-03, -2.079290890998346e-03, -5.551216894238765e-02, -5.580050470662829e-02, -3.087619864466078e-03, -3.101533701019117e-03, -3.087619864466078e-03, -3.101533701019116e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
