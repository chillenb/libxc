
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_bn05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_bn05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.951700026768019e+01, -1.951704842698964e+01, -1.951729874376222e+01, -1.951650940854003e+01, -1.951702536879382e+01, -1.951702536879382e+01, -2.918140944094478e+00, -2.918147672507130e+00, -2.918464587789964e+00, -2.918598069523390e+00, -2.918158061892493e+00, -2.918158061892493e+00, -3.941508109936100e-01, -3.935931625671760e-01, -3.791718430507793e-01, -3.833152990049975e-01, -3.939474114013807e-01, -3.939474114013807e-01, -4.157450946181117e-02, -4.281830743357354e-02, -5.035161663043297e-01, -1.948895391474668e-02, -4.194611314645250e-02, -4.194611314645250e-02, -1.531698219323179e-05, -1.751874563834806e-05, -9.730302765267602e-04, -1.807645748995453e-06, -1.699518407154831e-05, -1.699518407154831e-05, -4.514930440315758e+00, -4.515787917153635e+00, -4.515020911082059e+00, -4.515687607792649e+00, -4.515366266860025e+00, -4.515366266860025e+00, -1.523420670746738e+00, -1.535904707907827e+00, -1.518375163437217e+00, -1.528116946816288e+00, -1.538405639411674e+00, -1.538405639411674e+00, -3.246125563500802e-01, -3.647806588960101e-01, -3.010840826114528e-01, -3.198664002427227e-01, -3.424385949254783e-01, -3.424385949254783e-01, -8.875116478259460e-03, -4.224200591435048e-02, -8.579253293832155e-03, -1.489470336811103e+00, -1.293512905881064e-02, -1.293512905881064e-02, -1.627461886331876e-06, -2.403171260913300e-06, -1.035002725041223e-06, -2.460881354729394e-03, -1.831661150813991e-06, -1.831661150813991e-06, -3.393927678074382e-01, -3.368327892933700e-01, -3.377502280803637e-01, -3.384582248893246e-01, -3.381038502034154e-01, -3.381038502034154e-01, -3.240378442137505e-01, -2.635745725949742e-01, -2.810500849560221e-01, -2.973755609076349e-01, -2.890430125185241e-01, -2.890430125185241e-01, -3.895740863057594e-01, -6.885788822087749e-02, -9.639146437805730e-02, -1.493289257160860e-01, -1.206983966146375e-01, -1.206983966146375e-01, -2.256168813295702e-01, -7.837638362628191e-04, -1.833734386637700e-03, -1.355290682625478e-01, -5.089501594057418e-03, -5.089501594057418e-03, -2.425016052066764e-05, -5.369423780656761e-08, -3.547412639076231e-07, -4.480629712726242e-03, -1.138639212970747e-06, -1.138639212970744e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_bn05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_bn05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.613048931589476e+01, -2.613055352256162e+01, -2.613088724839347e+01, -2.612983489560266e+01, -2.613052278105154e+01, -2.613052278105154e+01, -3.986805546946755e+00, -3.986814556860944e+00, -3.987238933082887e+00, -3.987417676250878e+00, -3.986828469127242e+00, -3.986828469127242e+00, -5.752496030327061e-01, -5.744770660153613e-01, -5.544922748099043e-01, -5.602354327666617e-01, -5.749678259327670e-01, -5.749678259327670e-01, -7.253442874906497e-02, -7.454936687998620e-02, -7.264191728041746e-01, -3.551551520280492e-02, -7.313709265267500e-02, -7.313709265267500e-02, -3.011190073013981e-05, -3.443131014830326e-05, -1.886466375306661e-03, -3.567201743463536e-06, -3.340430247380519e-05, -3.340430247380519e-05, -6.122034065077748e+00, -6.123179554089782e+00, -6.122154923506080e+00, -6.123045552530490e+00, -6.122616278597986e+00, -6.122616278597986e+00, -2.113941064129257e+00, -2.130778080633256e+00, -2.107135675007266e+00, -2.120275100232447e+00, -2.134150795551168e+00, -2.134150795551168e+00, -4.787732491880490e-01, -5.345371488171478e-01, -4.460615406694351e-01, -4.721776504291302e-01, -5.035327329609975e-01, -5.035327329609975e-01, -1.664257213715110e-02, -7.361655927224819e-02, -1.610294173299704e-02, -2.068142050861442e+00, -2.396760646733033e-02, -2.396760646733033e-02, -3.212175751273720e-06, -4.740181963319898e-06, -2.044290525518321e-06, -4.729469298393848e-03, -3.614515756315741e-06, -3.614515756315741e-06, -4.993036413293037e-01, -4.957486991948661e-01, -4.970227574991515e-01, -4.980059253526847e-01, -4.975138227981560e-01, -4.975138227981560e-01, -4.779746661213883e-01, -3.938262537272902e-01, -4.181768528339047e-01, -4.409020551297988e-01, -4.293056617975244e-01, -4.293056617975245e-01, -5.689087169546684e-01, -1.154764897038090e-01, -1.568416405551714e-01, -2.333766067355484e-01, -1.923321023180166e-01, -1.923321023180165e-01, -3.408239553416806e-01, -1.521713925425037e-03, -3.535919734668786e-03, -2.136726409370705e-01, -9.670122240485701e-03, -9.670122240485701e-03, -4.763002739076463e-05, -1.064860655518951e-07, -7.017910145897572e-07, -8.533775231906435e-03, -2.248652091237753e-06, -2.248652091237746e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
