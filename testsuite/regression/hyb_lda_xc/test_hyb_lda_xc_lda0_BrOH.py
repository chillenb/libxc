
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_lda0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.498975840107423e+01, -1.498979454184052e+01, -1.498998239004681e+01, -1.498939003977626e+01, -1.498977723800301e+01, -1.498977723800301e+01, -2.503402267776707e+00, -2.503407392167240e+00, -2.503648756017924e+00, -2.503750416017542e+00, -2.503415304771166e+00, -2.503415304771166e+00, -5.140912191314969e-01, -5.135963731827253e-01, -5.007653729064065e-01, -5.044586615731932e-01, -5.139107375186780e-01, -5.139107375186780e-01, -1.560565938023074e-01, -1.579336036965628e-01, -6.095063130759508e-01, -1.167983298883996e-01, -1.566198195922131e-01, -1.566198195922131e-01, -1.146630489770629e-02, -1.196931385217466e-02, -4.297320220814559e-02, -5.772560622234495e-03, -1.185380865569372e-02, -1.185380865569372e-02, -3.714122381128920e+00, -3.714770500835973e+00, -3.714190763091314e+00, -3.714694682571766e+00, -3.714451798700066e+00, -3.714451798700066e+00, -1.431638950969826e+00, -1.441369620158474e+00, -1.427705074652888e+00, -1.435299936196209e+00, -1.443318481099621e+00, -1.443318481099621e+00, -4.515787099385590e-01, -4.878938766507816e-01, -4.300117651678238e-01, -4.472469080154028e-01, -4.677689613702198e-01, -4.677689613702198e-01, -8.857428342959091e-02, -1.570667936720876e-01, -8.755625350729292e-02, -1.405155418041093e+00, -1.008947117107671e-01, -1.008947117107671e-01, -5.580271354863750e-03, -6.327592270973288e-03, -4.821297941841165e-03, -5.790802120462647e-02, -5.797187863926225e-03, -5.797187863926225e-03, -4.650112917799867e-01, -4.626907909800888e-01, -4.635226932323016e-01, -4.641644612574682e-01, -4.638432600094912e-01, -4.638432600094912e-01, -4.510546578967577e-01, -3.951067577193512e-01, -4.114542513729496e-01, -4.265905490343040e-01, -4.188806389671220e-01, -4.188806389671220e-01, -5.100270833955642e-01, -1.933484454293382e-01, -2.261371002547028e-01, -2.832078879735785e-01, -2.530277178301027e-01, -2.530277178301027e-01, -3.590140739013603e-01, -4.010691897415124e-02, -5.265668932685964e-02, -2.688239376764757e-01, -7.347179136991677e-02, -7.347179136991677e-02, -1.327908651970735e-02, -1.843011245621731e-03, -3.408177536564889e-03, -7.043856405514841e-02, -4.972329245154187e-03, -4.972329245154186e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_lda0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.995279805152414e+01, -1.995284622107908e+01, -1.995309659110299e+01, -1.995230708795257e+01, -1.995282315797784e+01, -1.995282315797784e+01, -3.317302247255796e+00, -3.317309065730489e+00, -3.317630222646498e+00, -3.317765490691283e+00, -3.317319594180564e+00, -3.317319594180564e+00, -6.747791080719677e-01, -6.741246079876934e-01, -6.571553312630471e-01, -6.620394984055051e-01, -6.745403964804856e-01, -6.745403964804856e-01, -2.030695843811430e-01, -2.055253559811562e-01, -8.010472817339113e-01, -1.517888423288816e-01, -2.038064419210220e-01, -2.038064419210220e-01, -1.500766101235350e-02, -1.566205671818048e-02, -5.585957882014600e-02, -7.585089038024730e-03, -1.551180372521168e-02, -1.551180372521168e-02, -4.928845301068364e+00, -4.929708226265145e+00, -4.928936346768059e+00, -4.929607279639749e+00, -4.929283897060820e+00, -4.929283897060820e+00, -1.892015982165429e+00, -1.904946326330474e+00, -1.886788628377657e+00, -1.896880755554503e+00, -1.907536050313937e+00, -1.907536050313937e+00, -5.921325080024722e-01, -6.401353677185547e-01, -5.636370968552742e-01, -5.864083032270980e-01, -6.135302854438968e-01, -6.135302854438968e-01, -1.150330077306157e-01, -2.043912307435907e-01, -1.137091728054466e-01, -1.856825375711621e+00, -1.310652014746329e-01, -1.310652014746329e-01, -7.333767074570548e-03, -8.310216073757697e-03, -6.341222146404459e-03, -7.521404075085869e-02, -7.617272864928467e-03, -7.617272864928467e-03, -6.098852548286373e-01, -6.068181804633050e-01, -6.079177180038053e-01, -6.087659616507193e-01, -6.083414195131946e-01, -6.083414195131946e-01, -5.914399853889196e-01, -5.175411488205300e-01, -5.391261996694054e-01, -5.591177349806303e-01, -5.489340661296931e-01, -5.489340661296931e-01, -6.694038648884095e-01, -2.519171914516641e-01, -2.949520510105831e-01, -3.700045912466898e-01, -3.302946274195920e-01, -3.302946274195919e-01, -4.699097567067842e-01, -5.214669753372115e-02, -6.840657735908520e-02, -3.510733808683730e-01, -9.540800420918136e-02, -9.540800420918137e-02, -1.736526994921347e-02, -2.434780250817752e-03, -4.490412641946139e-03, -9.147006756293073e-02, -6.538808429483429e-03, -6.538808429483424e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
