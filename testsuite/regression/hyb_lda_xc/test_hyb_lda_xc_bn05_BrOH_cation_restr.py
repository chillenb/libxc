
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_bn05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_bn05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.951750952021374e+01, -1.951756485413474e+01, -1.951782793340627e+01, -1.951700432098017e+01, -1.951743344914884e+01, -1.951743344914884e+01, -2.918288945524943e+00, -2.918295865671150e+00, -2.918534377457323e+00, -2.918728520523834e+00, -2.918374529834028e+00, -2.918374529834028e+00, -3.975591004864039e-01, -3.969558095095544e-01, -3.824703158364001e-01, -3.868706849281127e-01, -3.859344141470789e-01, -3.859344141470789e-01, -3.701440330257028e-02, -3.829894265255895e-02, -4.895123837127457e-01, -1.922830454601072e-02, -2.549466820230372e-02, -2.549466820230372e-02, -3.338049411742478e-06, -3.875107125240158e-06, -5.314974094054370e-04, -6.711763514368057e-07, -1.309481600677336e-06, -1.309481600677336e-06, -4.517033960249389e+00, -4.517919480122924e+00, -4.517078063837137e+00, -4.517859763753574e+00, -4.517481030664928e+00, -4.517481030664928e+00, -1.525403780413574e+00, -1.538270989324798e+00, -1.516012907934163e+00, -1.527381028700289e+00, -1.537057977991307e+00, -1.537057977991307e+00, -3.297210421820227e-01, -3.704542950406370e-01, -2.949556812358143e-01, -3.119132563105363e-01, -3.372836116627040e-01, -3.372836116627040e-01, -7.535059960096739e-03, -3.714240561889876e-02, -6.123955477185150e-03, -1.491502885000122e+00, -1.145468010825400e-02, -1.145468010825400e-02, -3.137133860992488e-07, -6.280538426120437e-07, -2.858518860036504e-07, -2.071477775931432e-03, -4.937034582107968e-07, -4.937034582107968e-07, -3.319965099383045e-01, -3.292954328859680e-01, -3.302456038476424e-01, -3.310284680823089e-01, -3.306365823702941e-01, -3.306365823702941e-01, -3.192557397379481e-01, -2.554980677497121e-01, -2.735517877052219e-01, -2.916035444545519e-01, -2.823665897897248e-01, -2.823665897897248e-01, -3.954998984936966e-01, -6.180193750906453e-02, -8.908530339135144e-02, -1.471066823034501e-01, -1.152574089967433e-01, -1.152574089967433e-01, -2.254782150936624e-01, -4.693196249464965e-04, -1.127070831784914e-03, -1.381806388576418e-01, -4.028340618383733e-03, -4.028340618383735e-03, -9.093482686776915e-06, -1.289257348476082e-08, -1.150420064091180e-07, -3.392263880383887e-03, -3.931761510453851e-07, -3.931761510453845e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_bn05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_bn05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.613116825851420e+01, -2.613124203047351e+01, -2.613159277144646e+01, -2.613049471981115e+01, -2.613106683950384e+01, -2.613106683950384e+01, -3.987003733357175e+00, -3.987013000015374e+00, -3.987332387272580e+00, -3.987592360956779e+00, -3.987118337938822e+00, -3.987118337938822e+00, -5.799708801507699e-01, -5.791352299095180e-01, -5.590643002977597e-01, -5.651626837018758e-01, -5.638652188656506e-01, -5.638652188656506e-01, -6.509064892711083e-02, -6.719672576307187e-02, -7.070995955957962e-01, -3.506208601642590e-02, -4.584334637868875e-02, -4.584334637868875e-02, -6.580547396595635e-06, -7.637329648198483e-06, -1.034195880771208e-03, -1.326558767572986e-06, -2.585469558154993e-06, -2.585469558154993e-06, -6.124844120779534e+00, -6.126027069858223e+00, -6.124903037941017e+00, -6.125947295929803e+00, -6.125441353717787e+00, -6.125441353717787e+00, -2.116615791588665e+00, -2.133969210784209e+00, -2.103949341727141e+00, -2.119282560684777e+00, -2.132333371946953e+00, -2.132333371946953e+00, -4.858707375519768e-01, -5.424057887662254e-01, -4.375348506947270e-01, -4.611220494878324e-01, -4.963747682141961e-01, -4.963747682141961e-01, -1.419155440391492e-02, -6.530085024034894e-02, -1.159070283000197e-02, -2.070884409988432e+00, -2.131321722573366e-02, -2.131321722573366e-02, -6.207330216902640e-07, -1.241452428994398e-06, -5.656783858599831e-07, -3.989143343029332e-03, -9.762352492892070e-07, -9.762352492892070e-07, -4.890316279678715e-01, -4.852794799948432e-01, -4.865994441287335e-01, -4.876869449600581e-01, -4.871425693086303e-01, -4.871425693086303e-01, -4.713289256059760e-01, -3.825626441862803e-01, -4.077319473468972e-01, -4.328697094663770e-01, -4.200102183575041e-01, -4.200102183575041e-01, -5.771184843216095e-01, -1.045962079456382e-01, -1.460089390929213e-01, -2.302120401501500e-01, -1.844501370350920e-01, -1.844501370350920e-01, -3.406299779513713e-01, -9.137717916072024e-04, -2.182746337386862e-03, -2.174689013122432e-01, -7.686669316501316e-03, -7.686669316501330e-03, -1.789473070269286e-05, -2.560827510092705e-08, -2.279367511067321e-07, -6.490803255294698e-03, -7.777128070176322e-07, -7.777128070176307e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
