
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_cam_lda0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_cam_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.498443438761204e+01, -1.498447593326548e+01, -1.498467345767551e+01, -1.498405507538584e+01, -1.498437727215629e+01, -1.498437727215629e+01, -2.485176562019158e+00, -2.485181845698907e+00, -2.485363954361873e+00, -2.485512186319343e+00, -2.485241907449039e+00, -2.485241907449039e+00, -4.919102602571784e-01, -4.913743902997041e-01, -4.784756589347011e-01, -4.824005951315150e-01, -4.815659702933429e-01, -4.815659702933429e-01, -1.295119354691321e-01, -1.313934115952436e-01, -5.724731696552589e-01, -9.983676805582806e-02, -1.112795347511091e-01, -1.112795347511091e-01, -6.581553837642828e-03, -6.895719231005627e-03, -3.115613529732984e-02, -3.972260017041773e-03, -4.906131966774610e-03, -4.906131966774610e-03, -3.699958312778638e+00, -3.700628841939382e+00, -3.699991708731633e+00, -3.700583623850885e+00, -3.700296841548322e+00, -3.700296841548322e+00, -1.411589816855501e+00, -1.421655306339799e+00, -1.404240881178225e+00, -1.413136828239797e+00, -1.420706607689750e+00, -1.420706607689750e+00, -4.309413995497596e-01, -4.677277084644982e-01, -3.990664630321629e-01, -4.146733305916120e-01, -4.378144920412307e-01, -4.378144920412307e-01, -7.163099672450160e-02, -1.297005227006471e-01, -6.684430243936088e-02, -1.385048738158575e+00, -8.271828864318197e-02, -8.271828864318197e-02, -3.119940002267434e-03, -3.889570441699007e-03, -3.028878760022221e-03, -4.727093697151710e-02, -3.603723075846192e-03, -3.603723075846192e-03, -4.330115895264034e-01, -4.305539759432387e-01, -4.314188062712769e-01, -4.321311087457086e-01, -4.317745727536079e-01, -4.317745727536079e-01, -4.213955422195470e-01, -3.622687478517495e-01, -3.791939499297581e-01, -3.959673061198517e-01, -3.874025044343693e-01, -3.874025044343693e-01, -4.900807517063674e-01, -1.626798097272132e-01, -1.947383568724548e-01, -2.564913222729309e-01, -2.233318359856272e-01, -2.233318359856272e-01, -3.337565399319913e-01, -3.000182177554975e-02, -3.917581728682992e-02, -2.473364574773627e-01, -5.832040894359394e-02, -5.832040894359393e-02, -8.992328304952110e-03, -1.118515318211778e-03, -2.264565632424260e-03, -5.520329395659264e-02, -3.352292992718119e-03, -3.352292992718120e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_cam_lda0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_cam_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.995008239488635e+01, -1.995013776160875e+01, -1.995040099682865e+01, -1.994957689616744e+01, -1.995000627872698e+01, -1.995000627872698e+01, -3.301163201444544e+00, -3.301170228500030e+00, -3.301412424817720e+00, -3.301609566670333e+00, -3.301250107917850e+00, -3.301250107917850e+00, -6.539206647811209e-01, -6.532101439345812e-01, -6.361070380635215e-01, -6.413114065676353e-01, -6.402047215394531e-01, -6.402047215394531e-01, -1.709042626149990e-01, -1.734491718540034e-01, -7.607319609919850e-01, -1.307695671096770e-01, -1.462351630163253e-01, -1.462351630163253e-01, -8.581056657620181e-03, -8.986953384548859e-03, -4.010134180276764e-02, -5.200709112422733e-03, -6.412637639989601e-03, -6.412637639989601e-03, -4.917418364073500e+00, -4.918310784080203e+00, -4.917462811376150e+00, -4.918250602458599e+00, -4.917868918416533e+00, -4.917868918416533e+00, -1.874173681458651e+00, -1.887542434269430e+00, -1.864413151194520e+00, -1.876228370356386e+00, -1.886282383805349e+00, -1.886282383805349e+00, -5.730691615647204e-01, -6.218550657507952e-01, -5.307846963820367e-01, -5.514900956982992e-01, -5.821851773429767e-01, -5.821851773429767e-01, -9.292769667734888e-02, -1.711593645528111e-01, -8.657547812581465e-02, -1.838923633517453e+00, -1.077321710669038e-01, -1.077321710669038e-01, -4.092100572281950e-03, -5.093267488060929e-03, -3.973496119608148e-03, -6.089704181580355e-02, -4.721675955041511e-03, -4.721675955041511e-03, -5.758149776699220e-01, -5.725552933607364e-01, -5.737023786574562e-01, -5.746471493515817e-01, -5.741742543745997e-01, -5.741742543745997e-01, -5.604072889042905e-01, -4.819481495266706e-01, -5.044141602263166e-01, -5.266726339193128e-01, -5.153076958516636e-01, -5.153076958516636e-01, -6.514948769744103e-01, -2.156849315590714e-01, -2.587648329460561e-01, -3.412934867817595e-01, -2.970384532140862e-01, -2.970384532140861e-01, -4.440843224888875e-01, -3.862052285119215e-02, -5.041767148913846e-02, -3.290867324038046e-01, -7.533223177006386e-02, -7.533223177006385e-02, -1.169102348092708e-02, -1.475955098432649e-03, -2.976590505342538e-03, -7.124389901433377e-02, -4.394585228894249e-03, -4.394585228894248e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
