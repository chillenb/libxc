
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_cam_lda0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_cam_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.498405203209881e+01, -1.498408819093282e+01, -1.498427613304873e+01, -1.498368348664486e+01, -1.498407087844467e+01, -1.498407087844467e+01, -2.485063559684396e+00, -2.485068696977971e+00, -2.485310668551314e+00, -2.485412584503846e+00, -2.485076629505526e+00, -2.485076629505526e+00, -4.888814810892861e-01, -4.883856049090027e-01, -4.755297184578522e-01, -4.792297998767432e-01, -4.887006231435298e-01, -4.887006231435298e-01, -1.360873817152238e-01, -1.378339930541453e-01, -5.845685471100897e-01, -1.003443475537666e-01, -1.366111627732462e-01, -1.366111627732462e-01, -1.056638016508399e-02, -1.101335746284441e-02, -3.745332324671859e-02, -5.430073019019569e-03, -1.091080307269897e-02, -1.091080307269897e-02, -3.698365488037325e+00, -3.699014786828659e+00, -3.698433994411160e+00, -3.698938830642088e+00, -3.698695504919681e+00, -3.698695504919681e+00, -1.410038112555999e+00, -1.419804596226751e+00, -1.406089719269837e+00, -1.413712588033426e+00, -1.421760614019953e+00, -1.421760614019953e+00, -4.262868369976786e-01, -4.626370667321196e-01, -4.047202208155370e-01, -4.219536826192019e-01, -4.424877916425833e-01, -4.424877916425833e-01, -7.571991244514702e-02, -1.370270274694281e-01, -7.484884064604304e-02, -1.383456425066365e+00, -8.635401805952653e-02, -8.635401805952653e-02, -5.253703072877336e-03, -5.937924256323663e-03, -4.555305086784664e-03, -4.988414482283876e-02, -5.452645279255958e-03, -5.452645279255958e-03, -4.397277012303613e-01, -4.374053474054071e-01, -4.382378943906999e-01, -4.388801747819802e-01, -4.385587154712379e-01, -4.385587154712379e-01, -4.257625857403552e-01, -3.698597355078607e-01, -3.861787596354312e-01, -4.013007844261202e-01, -3.935967958270835e-01, -3.935967958270835e-01, -4.848090350890249e-01, -1.712815827997097e-01, -2.028819802306695e-01, -2.587561803606606e-01, -2.291023196189048e-01, -2.291023196189048e-01, -3.338893914770371e-01, -3.506149471820501e-02, -4.551376071583295e-02, -2.445980688640681e-01, -6.290426888466238e-02, -6.290426888466238e-02, -1.217288437680448e-02, -1.773063479805269e-03, -3.244400470551796e-03, -6.035490392278035e-02, -4.694578147276376e-03, -4.694578147276377e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_cam_lda0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_cam_lda0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.994957284046458e+01, -1.994962102832382e+01, -1.994987149348701e+01, -1.994908169032566e+01, -1.994959795645867e+01, -1.994959795645867e+01, -3.301012913449204e+00, -3.301019745817047e+00, -3.301341557086424e+00, -3.301477100721945e+00, -3.301030295719576e+00, -3.301030295719576e+00, -6.499047279886226e-01, -6.492472288916302e-01, -6.322007377167256e-01, -6.371070168182843e-01, -6.496649224190792e-01, -6.496649224190792e-01, -1.797964753888666e-01, -1.821575212277675e-01, -7.767675955673643e-01, -1.314548448917037e-01, -1.805045624847131e-01, -1.805045624847131e-01, -1.371663810897119e-02, -1.429126302254362e-02, -4.819708226931797e-02, -7.091491744269008e-03, -1.415944196712187e-02, -1.415944196712187e-02, -4.915298444370311e+00, -4.916162607883066e+00, -4.915389620731803e+00, -4.916061516407282e+00, -4.915737669781914e+00, -4.915737669781914e+00, -1.872112765526061e+00, -1.885084344763875e+00, -1.866868683303481e+00, -1.876993076809469e+00, -1.887682302835957e+00, -1.887682302835957e+00, -5.668953631868023e-01, -6.151045266049858e-01, -5.382858805286741e-01, -5.611476509036569e-01, -5.883832579049559e-01, -5.883832579049559e-01, -9.837373557988344e-02, -1.810667317191786e-01, -9.721211065363111e-02, -1.836808888196123e+00, -1.126100084772587e-01, -1.126100084772587e-01, -6.863055624192257e-03, -7.748832365372297e-03, -5.957660333409720e-03, -6.429672984960148e-02, -7.120721812672951e-03, -7.120721812672951e-03, -5.847226448003611e-01, -5.816425287282343e-01, -5.827467341864809e-01, -5.835985846687994e-01, -5.831722367038008e-01, -5.831722367038008e-01, -5.661999821421819e-01, -4.920250307965124e-01, -5.136837544846943e-01, -5.337491677272616e-01, -5.235272522319249e-01, -5.235272522319249e-01, -6.445048983917152e-01, -2.272636789948971e-01, -2.696781816233108e-01, -3.443121922948756e-01, -3.047486214020078e-01, -3.047486214020077e-01, -4.442608083731249e-01, -4.511826430282062e-02, -5.861580969059851e-02, -3.254339094599631e-01, -8.136714536329516e-02, -8.136714536329516e-02, -1.578089244620725e-02, -2.334001366491658e-03, -4.254153234014079e-03, -7.800743988217887e-02, -6.138321826503034e-03, -6.138321826503030e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
