
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_bn05_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_bn05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.951750952022996e+01, -1.951756485418087e+01, -1.951782793346267e+01, -1.951700432154795e+01, -1.951743345073845e+01, -1.951743345073845e+01, -2.918288945806303e+00, -2.918295866038024e+00, -2.918534378097935e+00, -2.918728520821559e+00, -2.918374741354565e+00, -2.918374741354565e+00, -3.975624901570306e-01, -3.969609149003940e-01, -3.824802679574966e-01, -3.868716716399048e-01, -3.868295925597031e-01, -3.868295925597031e-01, -3.704735583670713e-02, -3.834284616541552e-02, -4.898039093679045e-01, -1.923069149764016e-02, -2.927731388868418e-02, -2.927731388868416e-02, -3.344344899158457e-06, -3.884542989616857e-06, -5.325684969877895e-04, -6.712672704933647e-07, -1.439991341023994e-06, -1.439991341023994e-06, -4.517034092832689e+00, -4.517919619820687e+00, -4.517078201402530e+00, -4.517859897233778e+00, -4.517481168165922e+00, -4.517481168165922e+00, -1.525403782479440e+00, -1.538271049743540e+00, -1.516015309611380e+00, -1.527383653745811e+00, -1.537073676285080e+00, -1.537073676285080e+00, -3.297223010288680e-01, -3.704543365800169e-01, -2.951637355584975e-01, -3.120938481133438e-01, -3.377609731496148e-01, -3.377609731496148e-01, -7.535540672180250e-03, -3.714296929818723e-02, -6.135881007451402e-03, -1.491503044874535e+00, -1.148085858419075e-02, -1.148085858419075e-02, -3.139296477918178e-07, -6.281216644008620e-07, -2.862866791222068e-07, -2.071533631001328e-03, -5.137985599124834e-07, -5.137985599124834e-07, -3.319991950367368e-01, -3.292981495736411e-01, -3.302483266023621e-01, -3.310311478099285e-01, -3.306392830361227e-01, -3.306392830361227e-01, -3.192576276077255e-01, -2.555006487127375e-01, -2.735546910022677e-01, -2.916054916392860e-01, -2.823686922916832e-01, -2.823686922916832e-01, -3.955004696870141e-01, -6.180312291111124e-02, -8.909022462460342e-02, -1.471090970954962e-01, -1.152574168165184e-01, -1.152574168165184e-01, -2.254839427369060e-01, -4.693344038438394e-04, -1.127930989574598e-03, -1.381973743068283e-01, -4.036883461905576e-03, -4.036883461905532e-03, -9.099703787032323e-06, -1.289260199866847e-08, -1.152378276614895e-07, -3.392907116389379e-03, -4.063117524121281e-07, -4.063117524121274e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_bn05_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_bn05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.613118506020051e+01, -2.613115145680637e+01, -2.613127036256500e+01, -2.613121369832082e+01, -2.613156144769587e+01, -2.613162409512227e+01, -2.613059410487962e+01, -2.613039533398984e+01, -2.613123313457521e+01, -2.613090054232474e+01, -2.613123313457521e+01, -2.613090054232474e+01, -3.987031228258145e+00, -3.986976238092825e+00, -3.987044396353077e+00, -3.986981603203850e+00, -3.987290897340347e+00, -3.987373876377453e+00, -3.987564075366632e+00, -3.987620646162411e+00, -3.986364314898020e+00, -3.987872087797959e+00, -3.986364314898020e+00, -3.987872087797959e+00, -5.788265897443305e-01, -5.811115378668842e-01, -5.777314587757914e-01, -5.805335310839862e-01, -5.609786540376185e-01, -5.571393546622005e-01, -5.645542027957455e-01, -5.657701123189607e-01, -5.816952420155180e-01, -5.450786473644270e-01, -5.816952420155180e-01, -5.450786473644270e-01, -6.392698484677188e-02, -6.623215457700493e-02, -6.583141710568867e-02, -6.853219109100790e-02, -6.951698322910665e-01, -7.187054414307428e-01, -3.482923063589627e-02, -3.529369794973398e-02, -5.493101125449601e-02, -3.544136040024234e-02, -5.493101125449597e-02, -3.544136040024239e-02, -6.442159607845881e-06, -6.719165522608055e-06, -7.454209449826016e-06, -7.820804917476216e-06, -1.007938465317554e-03, -1.060442646863995e-03, -1.333775676484617e-06, -1.319344592173377e-06, -2.960185994615497e-06, -2.241958815335748e-06, -2.960185994615497e-06, -2.241958815335748e-06, -6.125581938921346e+00, -6.124106129519932e+00, -6.126784495170264e+00, -6.125269462138121e+00, -6.125654592713142e+00, -6.124151303545800e+00, -6.126687671186566e+00, -6.125206746383500e+00, -6.126192765263926e+00, -6.124689762632329e+00, -6.126192765263926e+00, -6.124689762632329e+00, -2.116670299395226e+00, -2.116561281189903e+00, -2.134265149435891e+00, -2.133673196281809e+00, -2.102094788461644e+00, -2.105800882555792e+00, -2.117336640854812e+00, -2.121225186401466e+00, -2.137092608749425e+00, -2.127554427939832e+00, -2.137092608749425e+00, -2.127554427939832e+00, -4.865032307852723e-01, -4.852369408124609e-01, -5.422837384761625e-01, -5.425277951037016e-01, -4.297368060214016e-01, -4.451218059532361e-01, -4.536557595164369e-01, -4.684031825695697e-01, -5.086062888816412e-01, -4.836461391802154e-01, -5.086062888816412e-01, -4.836461391802155e-01, -1.412394253627327e-02, -1.425901617595291e-02, -6.514968362844997e-02, -6.545163728334594e-02, -1.128471265029048e-02, -1.189345537207042e-02, -2.071358677811529e+00, -2.070409941836439e+00, -2.070106830794421e-02, -2.191490151477811e-02, -2.070106830794421e-02, -2.191490151477811e-02, -6.132386367979542e-07, -6.282336460705600e-07, -1.235432743702231e-06, -1.247474138293442e-06, -5.555588618853197e-07, -5.758109135106367e-07, -3.976990620675087e-03, -4.001289742918411e-03, -8.879513099124093e-07, -1.066432817482504e-06, -8.879513099124093e-07, -1.066432817482504e-06, -4.881022993698883e-01, -4.899581726064897e-01, -4.843485686866006e-01, -4.862075789067995e-01, -4.856661254191647e-01, -4.875299426357082e-01, -4.867599254960196e-01, -4.886111875550778e-01, -4.862124903191882e-01, -4.880698503537452e-01, -4.862124903191882e-01, -4.880698503537452e-01, -4.705652286646808e-01, -4.720906795317956e-01, -3.817653092278238e-01, -3.833574324741644e-01, -4.068562880021890e-01, -4.086047047980524e-01, -4.321290742236084e-01, -4.336083747364851e-01, -4.192530926016565e-01, -4.207652299590233e-01, -4.192530926016565e-01, -4.207652299590233e-01, -5.766504252295895e-01, -5.775859318414065e-01, -1.043219814617866e-01, -1.048695185900430e-01, -1.453493333094180e-01, -1.466644656837693e-01, -2.296270256726505e-01, -2.307948893380110e-01, -1.844796844777392e-01, -1.844205828390739e-01, -1.844796844777392e-01, -1.844205828390739e-01, -3.395143341128681e-01, -3.417400998630065e-01, -9.108818931935646e-04, -9.166616016781699e-04, -2.147866867516209e-03, -2.217577528043546e-03, -2.159702913412816e-01, -2.189526496664400e-01, -7.475981690487818e-03, -7.895647505202382e-03, -7.475981690487800e-03, -7.895647505202297e-03, -1.766175357614387e-05, -1.812793802197370e-05, -2.559162215579338e-08, -2.562492860457619e-08, -2.236946484370112e-07, -2.321843148499560e-07, -6.437865684695169e-03, -6.543627919426926e-03, -7.138414277307466e-07, -8.426623834094898e-07, -7.138414277307454e-07, -8.426623834094880e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
