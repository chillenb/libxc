
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_b93_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_b93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.993427043690298e+00, -9.993454726953338e+00, -9.993586344096602e+00, -9.993174295227062e+00, -9.993388985745563e+00, -9.993388985745563e+00, -1.669009990863208e+00, -1.669013504469543e+00, -1.669134605336577e+00, -1.669233178466465e+00, -1.669053445071771e+00, -1.669053445071771e+00, -3.447423983333603e-01, -3.443859156253490e-01, -3.358039533665064e-01, -3.384155959454129e-01, -3.378602574997207e-01, -3.378602574997207e-01, -9.930675864563374e-02, -1.006638029358265e-01, -3.983011061030867e-01, -7.748482092889324e-02, -8.600057790098177e-02, -8.600057790098177e-02, -4.689179750683729e-03, -4.919692972216720e-03, -2.362740437348650e-02, -2.793899076379667e-03, -3.468035839077220e-03, -3.468035839077220e-03, -2.477141542479315e+00, -2.477587750461722e+00, -2.477163766030040e+00, -2.477557659787278e+00, -2.477366818630805e+00, -2.477366818630805e+00, -9.554566374194944e-01, -9.621423723950261e-01, -9.505753611020481e-01, -9.564841926430269e-01, -9.615122203986106e-01, -9.615122203986106e-01, -3.041540569730706e-01, -3.286510982027802e-01, -2.829031917635567e-01, -2.933115136725863e-01, -3.087330810117811e-01, -3.087330810117811e-01, -5.585622613163171e-02, -9.944290461826935e-02, -5.209474129935861e-02, -9.378278822955246e-01, -6.447006366899775e-02, -6.447006366899775e-02, -2.183240690697010e-03, -2.734454153725836e-03, -2.118280151314671e-03, -3.651249185016901e-02, -2.529285652739996e-03, -2.529285652739996e-03, -3.055333775079387e-01, -3.038959147829835e-01, -3.044721507023396e-01, -3.049467448308155e-01, -3.047091928261873e-01, -3.047091928261873e-01, -2.977925950199682e-01, -2.583315363053477e-01, -2.696393554341325e-01, -2.808355073129586e-01, -2.751197071698519e-01, -2.751197071698519e-01, -3.435253182881489e-01, -1.228831883553064e-01, -1.451557264165443e-01, -1.872731239704701e-01, -1.647525505474513e-01, -1.647525505474513e-01, -2.392537270435650e-01, -2.271090973407612e-02, -3.002685533378938e-02, -1.810729075016352e-01, -4.534145000605427e-02, -4.534145000605427e-02, -6.469203415997516e-03, -7.703583799927296e-04, -1.575383129380782e-03, -4.285725899895779e-02, -2.349248530105800e-03, -2.349248530105800e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_b93_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_b93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.330220494159486e+01, -1.330224183872267e+01, -1.330241726221099e+01, -1.330186807045762e+01, -1.330215421676350e+01, -1.330215421676350e+01, -2.211634819770987e+00, -2.211639494948991e+00, -2.211800630857690e+00, -2.211931791543915e+00, -2.211692639613414e+00, -2.211692639613414e+00, -4.525177976583962e-01, -4.520462838105774e-01, -4.406960227489626e-01, -4.441499103279741e-01, -4.434154627058459e-01, -4.434154627058459e-01, -1.291920144604443e-01, -1.309665814410211e-01, -5.233918185477680e-01, -1.006960781166570e-01, -1.118069152481523e-01, -1.118069152481523e-01, -6.154809705087805e-03, -6.455623017956333e-03, -3.073538969075259e-02, -3.677330669214939e-03, -4.559514150609843e-03, -4.559514150609843e-03, -3.287308122234106e+00, -3.287902216701450e+00, -3.287337711321584e+00, -3.287862153085576e+00, -3.287608061528222e+00, -3.287608061528222e+00, -1.262713555356157e+00, -1.271597749897166e+00, -1.256227293924847e+00, -1.264078987901741e+00, -1.270760378159118e+00, -1.270760378159118e+00, -3.988538407867103e-01, -4.312373050937800e-01, -3.707763195655672e-01, -3.845264044090112e-01, -4.049056907580345e-01, -4.049056907580345e-01, -7.253694567728212e-02, -1.293700363197587e-01, -6.764910324454267e-02, -1.239288861686791e+00, -8.374076660619038e-02, -8.374076660619038e-02, -2.877055218000004e-03, -3.599479584358162e-03, -2.791848487133326e-03, -4.742944457317066e-02, -3.330700784086016e-03, -3.330700784086016e-03, -4.006767482667882e-01, -3.985126869528809e-01, -3.992742277605492e-01, -3.999014485627770e-01, -3.995875003809562e-01, -3.995875003809562e-01, -3.904472994434252e-01, -3.383306812915843e-01, -3.532593199373455e-01, -3.680452057702412e-01, -3.604962323778758e-01, -3.604962323778758e-01, -4.509079987309944e-01, -1.600579540537298e-01, -1.892772110253257e-01, -2.446528194563435e-01, -2.150255239877269e-01, -2.150255239877268e-01, -3.131557786317499e-01, -2.954823688403103e-02, -3.902494029424466e-02, -2.364924263793840e-01, -5.888053943127369e-02, -5.888053943127369e-02, -8.475512942864614e-03, -1.019444296749486e-03, -2.079087529686178e-03, -5.565720268987067e-02, -3.094733459452674e-03, -3.094733459452673e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
