
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_b93_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_b93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.993172267382821e+00, -9.993196361227010e+00, -9.993321593364538e+00, -9.992926693184172e+00, -9.993184825335337e+00, -9.993184825335337e+00, -1.668934845184472e+00, -1.668938261444827e+00, -1.669099170678616e+00, -1.669166944011695e+00, -1.668943536514111e+00, -1.668943536514111e+00, -3.427274794209979e-01, -3.423975821218169e-01, -3.338435819376043e-01, -3.363057743821288e-01, -3.426071583457853e-01, -3.426071583457853e-01, -1.040377292015383e-01, -1.052890691310419e-01, -4.063375420506339e-01, -7.786555325893307e-02, -1.044132130614754e-01, -1.044132130614754e-01, -7.644203265137527e-03, -7.979542568116439e-03, -2.864880147209706e-02, -3.848373748156330e-03, -7.902539103795814e-03, -7.902539103795814e-03, -2.476081587419280e+00, -2.476513667223982e+00, -2.476127175394209e+00, -2.476463121714511e+00, -2.476301199133377e+00, -2.476301199133377e+00, -9.544259673132170e-01, -9.609130801056492e-01, -9.518033831019255e-01, -9.568666241308063e-01, -9.622123207330805e-01, -9.622123207330805e-01, -3.010524732923727e-01, -3.252625844338544e-01, -2.866745101118825e-01, -2.981646053436019e-01, -3.118459742468132e-01, -3.118459742468132e-01, -5.904952228639394e-02, -1.047111957813917e-01, -5.837083567152861e-02, -9.367702786940619e-01, -6.726314114051141e-02, -6.726314114051141e-02, -3.720180903242500e-03, -4.218394847315525e-03, -3.214198627894110e-03, -3.860534746975099e-02, -3.864791909284150e-03, -3.864791909284150e-03, -3.100075278533245e-01, -3.084605273200592e-01, -3.090151288215344e-01, -3.094429741716455e-01, -3.092288400063275e-01, -3.092288400063275e-01, -3.007031052645052e-01, -2.634045051462341e-01, -2.743028342486331e-01, -2.843936993562027e-01, -2.792537593114147e-01, -2.792537593114147e-01, -3.400180555970428e-01, -1.288989636195588e-01, -1.507580668364685e-01, -1.888052586490523e-01, -1.686851452200685e-01, -1.686851452200684e-01, -2.393427159342402e-01, -2.673794598276749e-02, -3.510445955123977e-02, -1.792159584509838e-01, -4.898119424661118e-02, -4.898119424661118e-02, -8.852724346471564e-03, -1.228674163747820e-03, -2.272118357709926e-03, -4.695904270343228e-02, -3.314886163436125e-03, -3.314886163436124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_b93_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_b93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.330186536768276e+01, -1.330189748071939e+01, -1.330206439406866e+01, -1.330153805863504e+01, -1.330188210531856e+01, -1.330188210531856e+01, -2.211534831503864e+00, -2.211539377153660e+00, -2.211753481764332e+00, -2.211843660460856e+00, -2.211546396120376e+00, -2.211546396120376e+00, -4.498527387146452e-01, -4.494164053251289e-01, -4.381035541753648e-01, -4.413596656036701e-01, -4.496935976536570e-01, -4.496935976536570e-01, -1.353797229207620e-01, -1.370169039874375e-01, -5.340315211559409e-01, -1.011925615525878e-01, -1.358709612806813e-01, -1.358709612806813e-01, -1.000510734156900e-02, -1.044137114545366e-02, -3.723971921343067e-02, -5.056726025349820e-03, -1.034120248347446e-02, -1.034120248347446e-02, -3.285896867378909e+00, -3.286472150843430e+00, -3.285957564512039e+00, -3.286404853093166e+00, -3.286189264707213e+00, -3.286189264707213e+00, -1.261343988110286e+00, -1.269964217553650e+00, -1.257859085585104e+00, -1.264587170369669e+00, -1.271690700209291e+00, -1.271690700209291e+00, -3.947550053349815e-01, -4.267569118123698e-01, -3.757580645701828e-01, -3.909388688180653e-01, -4.090201902959312e-01, -4.090201902959312e-01, -7.668867182041046e-02, -1.362608204957271e-01, -7.580611520363109e-02, -1.237883583807747e+00, -8.737680098308859e-02, -8.737680098308859e-02, -4.889178049713699e-03, -5.540144049171797e-03, -4.227481430936307e-03, -5.014269383390579e-02, -5.078181909952312e-03, -5.078181909952312e-03, -4.065901698857582e-01, -4.045454536422033e-01, -4.052784786692036e-01, -4.058439744338129e-01, -4.055609463421297e-01, -4.055609463421297e-01, -3.942933235926131e-01, -3.450274325470200e-01, -3.594174664462703e-01, -3.727451566537536e-01, -3.659560440864620e-01, -3.659560440864620e-01, -4.462692432589397e-01, -1.679447943011094e-01, -1.966347006737221e-01, -2.466697274977932e-01, -2.201964182797280e-01, -2.201964182797279e-01, -3.132731711378561e-01, -3.476446502248077e-02, -4.560438490605680e-02, -2.340489205789153e-01, -6.360533613945424e-02, -6.360533613945425e-02, -1.157684663280898e-02, -1.623186833878501e-03, -2.993608427964092e-03, -6.098004504195382e-02, -4.359205619655620e-03, -4.359205619655616e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
