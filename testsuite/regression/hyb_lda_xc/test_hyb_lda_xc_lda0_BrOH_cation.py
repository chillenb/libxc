
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_xc_lda0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_lda0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.499014056554764e+01, -1.499018209046466e+01, -1.499037951618726e+01, -1.498976144326702e+01, -1.499008347981220e+01, -1.499008347981220e+01, -2.503514986509166e+00, -2.503520256983818e+00, -2.503701908492915e+00, -2.503849767926519e+00, -2.503580328754697e+00, -2.503580328754697e+00, -5.171166611980911e-01, -5.165834891961156e-01, -5.037149924003799e-01, -5.076242904159441e-01, -5.076042567908823e-01, -5.076042567908823e-01, -1.490150625069362e-01, -1.510681613201061e-01, -5.977056597094798e-01, -1.162321233168048e-01, -1.365573692565956e-01, -1.365573692565956e-01, -7.034335872138421e-03, -7.380344653508771e-03, -3.545149362844812e-02, -4.190861140836709e-03, -5.219748944807036e-03, -5.219748944807036e-03, -3.715712414023519e+00, -3.716381731379264e+00, -3.715745753118747e+00, -3.716336590663793e+00, -3.716050331971067e+00, -3.716050331971067e+00, -1.433184957737794e+00, -1.443213605617196e+00, -1.425864912251920e+00, -1.434728332782520e+00, -1.442280549247776e+00, -1.442280549247776e+00, -4.562322670469601e-01, -4.929766853683574e-01, -4.245549270762783e-01, -4.401388392103478e-01, -4.635455970234405e-01, -4.635455970234405e-01, -8.378573775106198e-02, -1.491652952111556e-01, -7.817992695427842e-02, -1.406741948066987e+00, -9.676977665274485e-02, -9.676977665274485e-02, -3.274891466804420e-03, -4.101690659105720e-03, -3.177480561090778e-03, -5.476902325776967e-02, -3.796963137004209e-03, -3.796963137004208e-03, -4.583025828803333e-01, -4.558464228343205e-01, -4.567107808389626e-01, -4.574226303911640e-01, -4.570663226597493e-01, -4.570663226597493e-01, -4.466906768780722e-01, -3.874998715043700e-01, -4.044618745233159e-01, -4.212551387877744e-01, -4.126816033358290e-01, -4.126816033358290e-01, -5.152884942064012e-01, -1.843264930198091e-01, -2.177400297513380e-01, -2.809124521500632e-01, -2.471288353782505e-01, -2.471288353782505e-01, -3.588864642555231e-01, -3.406651651314215e-02, -4.504612197981884e-02, -2.716288533358335e-01, -6.804458347048183e-02, -6.804458347048183e-02, -9.704187051967475e-03, -1.155537529371899e-03, -2.363087331291665e-03, -6.428851873715340e-02, -3.525850282078745e-03, -3.525850282078745e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_xc_lda0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_xc_lda0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.995332003108730e+01, -1.995329479368112e+01, -1.995338403654457e+01, -1.995334147957744e+01, -1.995360236800848e+01, -1.995364941856829e+01, -1.995287674759390e+01, -1.995272746321308e+01, -1.995335621896547e+01, -1.995310642974076e+01, -1.995335621896547e+01, -1.995310642974076e+01, -3.317473176673725e+00, -3.317431282359054e+00, -3.317483161752651e+00, -3.317435322728985e+00, -3.317669337191229e+00, -3.317732554743916e+00, -3.317876137976850e+00, -3.317919236358418e+00, -3.316964505284489e+00, -3.318113202921669e+00, -3.316964505284489e+00, -3.318113202921669e+00, -6.777421805120094e-01, -6.798073946836078e-01, -6.767998789266229e-01, -6.793332209326270e-01, -6.627864223710309e-01, -6.592903684814928e-01, -6.656719372206328e-01, -6.667766777105272e-01, -6.812638009264601e-01, -6.479666133941653e-01, -6.812638009264601e-01, -6.479666133941653e-01, -1.918355702181630e-01, -1.956789943126360e-01, -1.941796965526106e-01, -1.986387778606681e-01, -7.746747774698906e-01, -7.951816507159494e-01, -1.505655006904318e-01, -1.515174454739705e-01, -1.843738192856596e-01, -1.419120497005773e-01, -1.843738192856595e-01, -1.419120497005773e-01, -9.219556141451982e-03, -9.244505402203080e-03, -9.667496440238859e-03, -9.698833833810303e-03, -4.584351225678581e-02, -4.635317082320195e-02, -5.516988653819999e-03, -5.515000212517053e-03, -6.887177073967556e-03, -6.772398718400342e-03, -6.887177073967556e-03, -6.772398718400342e-03, -4.931520371750760e+00, -4.930403863148019e+00, -4.932426345724683e+00, -4.931280165503533e+00, -4.931575147609615e+00, -4.930437849598802e+00, -4.932353351390204e+00, -4.931232975171379e+00, -4.931980563972115e+00, -4.930843483920248e+00, -4.931980563972115e+00, -4.930843483920248e+00, -1.894112774610623e+00, -1.894027889377919e+00, -1.907626956682687e+00, -1.907166232193848e+00, -1.882896445381626e+00, -1.885783017919394e+00, -1.894603381075564e+00, -1.897630939812467e+00, -1.909844652823863e+00, -1.902420679849887e+00, -1.909844652823863e+00, -1.902420679849887e+00, -5.988743171123221e-01, -5.976857429987772e-01, -6.467441145829935e-01, -6.469677533871132e-01, -5.486406337025184e-01, -5.634414999302744e-01, -5.696778857411801e-01, -5.836893080469755e-01, -6.187429696027665e-01, -5.954207564832870e-01, -6.187429696027665e-01, -5.954207564832871e-01, -1.086082066716920e-01, -1.090011914976123e-01, -1.938032169318695e-01, -1.943058427035803e-01, -1.004884713233472e-01, -1.024202710508657e-01, -1.859302986574957e+00, -1.858563437413552e+00, -1.240761453853569e-01, -1.270779505646532e-01, -1.240761453853569e-01, -1.270779505646532e-01, -4.314531485288061e-03, -4.316642738286480e-03, -5.398381274226207e-03, -5.400055401879541e-03, -4.186377362301740e-03, -4.189191636685369e-03, -7.108193054076750e-02, -7.120612795014020e-02, -4.980745361935641e-03, -5.010045975013806e-03, -4.980745361935641e-03, -5.010045975013805e-03, -6.001438520875517e-01, -6.018832774907273e-01, -5.968947522659758e-01, -5.986401522144871e-01, -5.980353417253720e-01, -5.997841797252301e-01, -5.989825268057434e-01, -6.007187083061396e-01, -5.985085128894005e-01, -6.002508527228173e-01, -5.985085128894005e-01, -6.002508527228173e-01, -5.849489447509244e-01, -5.863907481199780e-01, -5.067026792671712e-01, -5.082862197377566e-01, -5.290316712614824e-01, -5.307427979203754e-01, -5.513533507349755e-01, -5.527799537860645e-01, -5.400085708253690e-01, -5.414776138076625e-01, -5.400085708253690e-01, -5.414776138076625e-01, -6.759384869484515e-01, -6.767848653999911e-01, -2.396909105273246e-01, -2.404809891067988e-01, -2.830515240696360e-01, -2.847725862594611e-01, -3.663086667638698e-01, -3.676464833255353e-01, -3.225743963771100e-01, -3.225021642851947e-01, -3.225743963771099e-01, -3.225021642851946e-01, -4.685888246782848e-01, -4.708713526706813e-01, -4.429258123870219e-02, -4.435199166619565e-02, -5.829798042920020e-02, -5.877135709807690e-02, -3.529901666222873e-01, -3.564638644101261e-01, -8.750790427219401e-02, -8.910135832824979e-02, -8.750790427219401e-02, -8.910135832824981e-02, -1.269880960274744e-02, -1.272744295069766e-02, -1.529190213053767e-03, -1.529142768929269e-03, -3.118386981396266e-03, -3.118936336497518e-03, -8.326825341358146e-02, -8.370075705994244e-02, -4.631429796699117e-03, -4.652300551528675e-03, -4.631429796699118e-03, -4.652300551528673e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
