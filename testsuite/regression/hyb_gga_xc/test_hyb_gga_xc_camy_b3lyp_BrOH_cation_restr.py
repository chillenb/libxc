
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.705774060032656e+01, -1.705776258747983e+01, -1.705791610074851e+01, -1.705758782575050e+01, -1.705775190541328e+01, -1.705775190541328e+01, -2.814497400271405e+00, -2.814468682932660e+00, -2.813874288923134e+00, -2.815446235104297e+00, -2.814531325669849e+00, -2.814531325669849e+00, -5.362264604873422e-01, -5.360282655665755e-01, -5.320423553772773e-01, -5.362272255449254e-01, -5.348892213332401e-01, -5.348892213332401e-01, -1.256309239519039e-01, -1.275928991522833e-01, -6.263466353167584e-01, -9.174299057293224e-02, -1.051000819080983e-01, -1.051000819080983e-01, -2.429064693157199e-02, -2.436247265851029e-02, -4.325347581956505e-02, -2.180389017031533e-02, -2.188083570353909e-02, -2.188083570353908e-02, -4.091507126410300e+00, -4.090996022289828e+00, -4.091492426466715e+00, -4.091041098187298e+00, -4.091243259198944e+00, -4.091243259198944e+00, -1.687071258613705e+00, -1.695691618449296e+00, -1.686839664976901e+00, -1.694458281468656e+00, -1.691939521812091e+00, -1.691939521812091e+00, -4.489184346484654e-01, -4.730534548809608e-01, -4.155795178146101e-01, -4.184484362244523e-01, -4.545652304649691e-01, -4.545652304649691e-01, -5.998753874755126e-02, -1.267290130404477e-01, -5.600118521373071e-02, -1.464262509470038e+00, -7.282311386378343e-02, -7.282311386378343e-02, -1.958343343702673e-02, -2.101528004606635e-02, -1.385530152997893e-02, -4.528838364541142e-02, -1.674770570935005e-02, -1.674770570935006e-02, -4.313291790347994e-01, -4.329027527470250e-01, -4.323925020022002e-01, -4.319329993798201e-01, -4.321662696251092e-01, -4.321662696251092e-01, -4.177761472832734e-01, -3.837896788337397e-01, -3.946101725110998e-01, -4.043273395864148e-01, -3.993734035523683e-01, -3.993734035523683e-01, -4.977832449916437e-01, -1.663493236525828e-01, -2.023904508043027e-01, -2.637905150426607e-01, -2.315141275116246e-01, -2.315141275116245e-01, -3.512447680507477e-01, -4.349504187080461e-02, -4.395047190586586e-02, -2.490980240703839e-01, -5.116300089758904e-02, -5.116300089758907e-02, -2.768814172832114e-02, -1.193320576261889e-02, -1.576081111606814e-02, -4.916013820165579e-02, -1.573244092878819e-02, -1.573244092878818e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.044562051528869e+01, -2.044569700486054e+01, -2.044602332846513e+01, -2.044488560922907e+01, -2.044548369853349e+01, -2.044548369853349e+01, -3.304742970202579e+00, -3.304772146991555e+00, -3.305527935597997e+00, -3.304840054754490e+00, -3.304857344810054e+00, -3.304857344810054e+00, -6.333820059545373e-01, -6.325985951452250e-01, -6.146331549547044e-01, -6.197187214168378e-01, -6.186526575751461e-01, -6.186526575751461e-01, -1.649987604152254e-01, -1.665339453253947e-01, -7.397166760921021e-01, -1.341004449430016e-01, -1.449857771426600e-01, -1.449857771426600e-01, -8.342367893469666e-03, -8.564373100371324e-03, -2.835974422608206e-02, -6.138083999993002e-03, -6.801906160267545e-03, -6.801906160267560e-03, -5.038845300801507e+00, -5.040821995983440e+00, -5.038934744039964e+00, -5.040679769953569e+00, -5.039847792043371e+00, -5.039847792043371e+00, -1.815593742187638e+00, -1.829676977882877e+00, -1.803761784795876e+00, -1.816125428781263e+00, -1.829190357205507e+00, -1.829190357205507e+00, -5.585594990105934e-01, -6.190282188462795e-01, -5.150855107631026e-01, -5.443613637612071e-01, -5.687275590481345e-01, -5.687275590481345e-01, -9.952476332360415e-02, -1.782398312063491e-01, -9.071040520210677e-02, -1.889193616315681e+00, -1.102087592008264e-01, -1.102087592008264e-01, -5.180517311133616e-03, -5.954570709153577e-03, -4.210822437047811e-03, -5.275981127774954e-02, -5.070921409106015e-03, -5.070921409106030e-03, -5.757088948020898e-01, -5.682749401519134e-01, -5.707684031669610e-01, -5.729209742544255e-01, -5.718327857706752e-01, -5.718327857706752e-01, -5.609915372599119e-01, -4.640211352129475e-01, -4.881788066918371e-01, -5.147173226599865e-01, -5.008639029411982e-01, -5.008639029411982e-01, -6.490668978856620e-01, -2.172819159903704e-01, -2.519813981943762e-01, -3.248163421329043e-01, -2.838702089717980e-01, -2.838702089717980e-01, -4.265503129085030e-01, -2.723499556631629e-02, -3.960560579586155e-02, -3.122881707069068e-01, -7.085862990202199e-02, -7.085862990202192e-02, -1.053998039989082e-02, -2.548923583419583e-03, -3.974995233076557e-03, -6.564959228535337e-02, -4.734816607046795e-03, -4.734816607046772e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.824293248086188e-09, -5.824265234651276e-09, -5.824061674557768e-09, -5.824480103179825e-09, -5.824272080757116e-09, -5.824272080757116e-09, -7.281643834114423e-06, -7.281959877704853e-06, -7.288572781386370e-06, -7.271653658212115e-06, -7.281332343216469e-06, -7.281332343216469e-06, -3.328454954419179e-03, -3.326216798467962e-03, -3.240427788947975e-03, -3.164886946912502e-03, -3.196104073400046e-03, -3.196104073400046e-03, -7.127000138139269e-02, -7.965314659227236e-02, -1.981026518067933e-03, 1.218466839089390e-01, -1.743893891836176e-03, -1.743893891836086e-03, -3.547483661244434e+03, -3.110838994987500e+03, -1.301501827770992e+01, -1.674166903643504e+04, -9.278157344428226e+03, -9.278157344428231e+03, -1.702280350899277e-06, -1.703542601091765e-06, -1.702321842413233e-06, -1.703436294270340e-06, -1.702928393115058e-06, -1.702928393115058e-06, -5.180196324446773e-05, -5.082133262754865e-05, -5.181814689576072e-05, -5.094895570382885e-05, -5.125265382577142e-05, -5.125265382577142e-05, -6.729562624059666e-03, -6.435057885644025e-03, -8.567334010173120e-03, -9.611889409123929e-03, -6.546608894522604e-03, -6.546608894522604e-03, 8.875151543844005e-01, 7.247009455374129e-03, 1.063884873397499e+00, -9.767161935128932e-05, 3.760201870603484e-01, 3.760201870603484e-01, -3.818628439407281e+04, -1.870479532557457e+04, -6.778130759420274e+04, 6.818109638708834e-01, -3.200097160464949e+04, -3.200097160464947e+04, -9.494743178468823e-03, -8.814487186737541e-03, -9.018721669202119e-03, -9.212786221107157e-03, -9.112517062536794e-03, -9.112517062536794e-03, -1.090333904314929e-02, -1.014056685804792e-02, -1.005218648491921e-02, -1.010798115515851e-02, -1.007618225941425e-02, -1.007618225941425e-02, -5.337025036393625e-03, -3.205595213908142e-02, -3.865841123309604e-02, -3.127256933978489e-02, -3.717956673147137e-02, -3.717956673147139e-02, -1.338728167397695e-02, -1.536908486181236e+01, -1.696294210266825e+00, -4.131484528442600e-02, 9.779489287725199e-01, 9.779489287725144e-01, -1.243378574141088e+03, -1.314022953170261e+06, -1.260320773746832e+05, 9.953121947720793e-01, -4.272004173406465e+04, -4.272004173406478e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
