
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_blyp35_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.375331584812222e+01, -1.375333335968933e+01, -1.375345615449606e+01, -1.375319469142216e+01, -1.375332530372295e+01, -1.375332530372295e+01, -2.328032798386799e+00, -2.328008795138500e+00, -2.327509654998849e+00, -2.328809827861738e+00, -2.328059045748011e+00, -2.328059045748011e+00, -4.919853269124948e-01, -4.918699095191189e-01, -4.898265681138887e-01, -4.932182679502186e-01, -4.922103809169563e-01, -4.922103809169563e-01, -1.461839041314363e-01, -1.477343234794938e-01, -5.657595268490475e-01, -1.172483921763374e-01, -1.402441298819134e-01, -1.402441298819133e-01, -4.324569160033182e-02, -4.329222594812034e-02, -7.351798533901177e-02, -3.935745441281886e-02, -3.970930554650973e-02, -3.970930554650971e-02, -3.350410865403926e+00, -3.349976428174783e+00, -3.350398068204680e+00, -3.350014436823515e+00, -3.350186745114581e+00, -3.350186745114581e+00, -1.427071776675834e+00, -1.433852350470210e+00, -1.427260651345647e+00, -1.433251351632753e+00, -1.430731608621959e+00, -1.430731608621959e+00, -4.177649154531884e-01, -4.356624984406678e-01, -3.905525268274572e-01, -3.909258533038220e-01, -4.225465420999233e-01, -4.225465420999234e-01, -8.943465081041563e-02, -1.493712496720467e-01, -8.584079708233167e-02, -1.239060001611538e+00, -1.000264090069696e-01, -1.000264090069696e-01, -3.547959644659058e-02, -3.792291742362737e-02, -2.486456487520360e-02, -7.511296615938054e-02, -3.020140656450320e-02, -3.020140656450322e-02, -4.005457407324178e-01, -4.024190722273904e-01, -4.018017305067366e-01, -4.012554869141854e-01, -4.015320534297546e-01, -4.015320534297546e-01, -3.891314096459396e-01, -3.653501941324088e-01, -3.731248828969143e-01, -3.799255629417667e-01, -3.764503072369610e-01, -3.764503072369610e-01, -4.561421880663272e-01, -1.839160507428322e-01, -2.142051359615670e-01, -2.641935567450639e-01, -2.379577503285211e-01, -2.379577503285211e-01, -3.381197387795154e-01, -7.406654204891554e-02, -7.504289646421440e-02, -2.505783331824989e-01, -7.986058219501314e-02, -7.986058219501314e-02, -4.887914550628071e-02, -2.183688245988002e-02, -2.862314704326335e-02, -7.800696905305456e-02, -2.839978642387075e-02, -2.839978642387074e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_blyp35_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.645980718070994e+01, -1.645978774855630e+01, -1.645987825733638e+01, -1.645983966450408e+01, -1.646009296791426e+01, -1.646014929767842e+01, -1.645928682133171e+01, -1.645912603747231e+01, -1.645984732466948e+01, -1.645952728843706e+01, -1.645984732466948e+01, -1.645952728843706e+01, -2.709223971264945e+00, -2.709283430251865e+00, -2.709247603823221e+00, -2.709308257512388e+00, -2.709833299632582e+00, -2.709973222607347e+00, -2.709250194383566e+00, -2.709386190166382e+00, -2.708790257566252e+00, -2.709902401241120e+00, -2.708790257566252e+00, -2.709902401241120e+00, -5.613515230952850e-01, -5.623372913280423e-01, -5.605997807272061e-01, -5.617866246318231e-01, -5.466688751310750e-01, -5.458692216973599e-01, -5.502558929927254e-01, -5.505045143008924e-01, -5.562204306787918e-01, -5.490717909562861e-01, -5.562204306787918e-01, -5.490717909562861e-01, -1.715022805561145e-01, -1.708683449956655e-01, -1.726773341025149e-01, -1.721487078132639e-01, -6.417462585141326e-01, -6.549357284335989e-01, -1.451112235729627e-01, -1.453178344642972e-01, -1.402755679845864e-01, -1.628473784652572e-01, -1.402755679845863e-01, -1.628473784652571e-01, -1.306326059466564e-02, -1.305642050988309e-02, -1.337142501835803e-02, -1.334625502168772e-02, -3.961184936302302e-02, -4.009577852546648e-02, -9.901592116331246e-03, -9.929613535678648e-03, -1.105655004333297e-02, -9.658484719744835e-03, -1.105655004333294e-02, -9.658484719744826e-03, -4.102835054914065e+00, -4.101880188938408e+00, -4.104473154030043e+00, -4.103466697210464e+00, -4.102924881524818e+00, -4.101936048440157e+00, -4.104333467022200e+00, -4.103374167381202e+00, -4.103673187581304e+00, -4.102677540363318e+00, -4.103673187581304e+00, -4.102677540363318e+00, -1.511895609446189e+00, -1.511835762975586e+00, -1.523381139795559e+00, -1.523054088883959e+00, -1.501285574274348e+00, -1.503221097873402e+00, -1.511176238631596e+00, -1.513251982585293e+00, -1.525565439103641e+00, -1.520197704752938e+00, -1.525565439103641e+00, -1.520197704752938e+00, -5.026006925355414e-01, -5.018098234980328e-01, -5.535642426837484e-01, -5.538662430027325e-01, -4.614602649481837e-01, -4.712455423020087e-01, -4.873494813356467e-01, -4.971681126843349e-01, -5.185350962337066e-01, -5.025352979611467e-01, -5.185350962337066e-01, -5.025352979611467e-01, -1.152424392998271e-01, -1.148759609815579e-01, -1.853687655189187e-01, -1.852837055661699e-01, -1.055880350532758e-01, -1.066436974306133e-01, -1.578098847201938e+00, -1.577519186561230e+00, -1.263234207377228e-01, -1.209970605601649e-01, -1.263234207377228e-01, -1.209970605601649e-01, -8.354711934232231e-03, -8.536167553798522e-03, -9.553277334240761e-03, -9.656047584448347e-03, -6.725659649368320e-03, -6.645455668379173e-03, -6.651827218889889e-02, -6.704552297480386e-02, -7.993714880147874e-03, -8.100518123814304e-03, -7.993714880147891e-03, -8.100518123814304e-03, -5.185566269977513e-01, -5.199116057457446e-01, -5.116717889220795e-01, -5.130204438104718e-01, -5.139672918028702e-01, -5.153302778819985e-01, -5.159716356743567e-01, -5.173149014513999e-01, -5.149578272037046e-01, -5.163108646806160e-01, -5.149578272037046e-01, -5.163108646806160e-01, -5.069381164874647e-01, -5.080208691551482e-01, -4.232458789343729e-01, -4.241183149518588e-01, -4.436682602987814e-01, -4.447737416980189e-01, -4.665781496719051e-01, -4.675859195255906e-01, -4.546290892918130e-01, -4.556212507623671e-01, -4.546290892918130e-01, -4.556212507623671e-01, -5.776440180274623e-01, -5.784859082590226e-01, -2.184503102509583e-01, -2.182920057190766e-01, -2.470906746739800e-01, -2.468880847364940e-01, -3.078834046149415e-01, -3.085166570626892e-01, -2.736406079620978e-01, -2.734628917191854e-01, -2.736406079620978e-01, -2.734628917191855e-01, -3.922274024221243e-01, -3.934071641494142e-01, -3.862636362374764e-02, -3.867657339211530e-02, -5.241950306488628e-02, -5.309457317635160e-02, -2.972120370693311e-01, -2.990274721919434e-01, -8.590012766212383e-02, -8.447176898542144e-02, -8.590012766212382e-02, -8.447176898542143e-02, -1.630827599500316e-02, -1.623520407785618e-02, -4.495914477428386e-03, -4.120433163928030e-03, -6.542722148424657e-03, -6.516100124124182e-03, -7.965158704831757e-02, -8.019114847474632e-02, -7.066748451097465e-03, -7.754402511640069e-03, -7.066748451097475e-03, -7.754402511640055e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_blyp35_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.410825218768140e-09, 1.463652377038497e-11, -9.410878206444999e-09, -9.410772911003154e-09, 1.463631512328463e-11, -9.410839610061247e-09, -9.410486785168102e-09, 1.463532316351641e-11, -9.410466169791090e-09, -9.411087783405449e-09, 1.463842899785011e-11, -9.411222960244814e-09, -9.410803866720905e-09, 1.463681083685537e-11, -9.410831703592321e-09, -9.410803866720905e-09, 1.463681083685537e-11, -9.410831703592321e-09, -1.218158192155267e-05, 1.902747638536065e-07, -1.218618134597999e-05, -1.218193826214987e-05, 1.902725761814505e-07, -1.218687664900412e-05, -1.219389150176890e-05, 1.901971754504621e-07, -1.219688657334984e-05, -1.216522391540036e-05, 1.901358235030523e-07, -1.216902849368563e-05, -1.218703734857928e-05, 1.902491360705296e-07, -1.217965175107604e-05, -1.218703734857928e-05, 1.902491360705296e-07, -1.217965175107604e-05, -6.753347448240380e-03, 1.144533678933034e-03, -6.821861568065929e-03, -6.744727282393436e-03, 1.151156568500561e-03, -6.828804347795293e-03, -6.775043258394417e-03, 1.320750241138922e-03, -6.652755255907644e-03, -6.519721272712775e-03, 1.265386257803329e-03, -6.560310407989912e-03, -7.161055547374799e-03, 1.376562597771172e-03, -5.889939614070937e-03, -7.161055547374799e-03, 1.376562597771172e-03, -5.889939614070937e-03, -6.038955788072569e-01, 6.012876550391961e-01, -6.167290344087621e-01, -6.002259450776641e-01, 5.680272535784819e-01, -6.100858414057672e-01, -3.901856852057269e-03, 5.322727974273029e-04, -3.867129621735419e-03, -9.764424493395580e-01, 1.675901373768304e+00, -9.795890249608820e-01, -9.397267826085098e-01, 2.382014110698246e+00, -2.956382585413532e+00, -9.397267826085089e-01, 2.382014110698246e+00, -2.956382585413536e+00, -1.445557611564145e+04, 1.111914508308031e-07, -1.210920744088626e+04, -1.282839079096914e+04, 4.562559950974850e-07, -1.051532811402721e+04, -7.271896490434887e+01, 1.838627425311693e+01, -6.241154396893739e+01, -6.094235217926711e+04, 4.136895542502456e-17, -6.347437554839007e+04, -2.005455076280508e+04, 1.070835888305008e-12, -1.318244067751795e+05, -2.005455076280510e+04, 1.070835888305008e-12, -1.318244067751794e+05, -2.807156585517925e-06, 2.233703107768369e-08, -2.809483242853813e-06, -2.809255880151004e-06, 2.231537777319893e-08, -2.811509689183907e-06, -2.807244946113853e-06, 2.233595490630417e-08, -2.809529888622432e-06, -2.809042967264943e-06, 2.231683364972891e-08, -2.811374639237020e-06, -2.808254528755535e-06, 2.232609670798167e-08, -2.810503712656242e-06, -2.808254528755535e-06, 2.232609670798167e-08, -2.810503712656242e-06, -8.983568730472344e-05, 4.104557134069705e-06, -8.984714291999387e-05, -8.805410461748909e-05, 3.949027730077658e-06, -8.810790111907777e-05, -8.984650170807895e-05, 4.223201907834492e-06, -9.000747152493780e-05, -8.830256701664941e-05, 4.080707689470805e-06, -8.842666623930465e-05, -8.890168137394516e-05, 3.966397450084659e-06, -8.875014290573857e-05, -8.890168137394516e-05, 3.966397450084659e-06, -8.875014290573857e-05, -1.398380511227114e-02, 2.253646609880290e-03, -1.409013146321514e-02, -1.296028432452509e-02, 1.482953633834817e-03, -1.299095032137728e-02, -1.896403315776835e-02, 3.393155540240489e-03, -1.777702553063135e-02, -2.106304632325045e-02, 2.786872153422916e-03, -1.911882106603294e-02, -1.283375318467413e-02, 2.171399762139616e-03, -1.451938438932197e-02, -1.283375318467413e-02, 2.171399762139616e-03, -1.451938438932196e-02, -1.969913378673708e+00, 5.364331359216309e+00, -2.029587220740981e+00, -3.913736748821925e-01, 5.928062603673171e-01, -3.946332574047259e-01, -2.668462393887336e+00, 6.670630325612285e+00, -2.696979888303515e+00, -1.687322897821047e-04, 4.550774239056777e-06, -1.690223371405307e-04, -1.499465196402428e+00, 3.362374819306393e+00, -1.902681093316799e+00, -1.499465196402428e+00, 3.362374819306393e+00, -1.902681093316799e+00, -1.534190567039250e+05, 5.421496698436063e-24, -1.318774390155228e+05, -7.181296353739360e+04, 1.228758886113335e-17, -6.725248739744208e+04, -2.699953611982744e+05, 5.656440620065503e-25, -2.358721743407698e+05, -1.300882061071633e+01, 1.504669301565768e+01, -1.258533861256065e+01, -2.088998131987903e+05, 9.610322787727072e-20, -8.342107947112565e+04, -2.088998131987901e+05, 9.610322787727070e-20, -8.342107947112562e+04, -1.951773187183789e-02, 2.199677179191681e-03, -1.932932013379474e-02, -1.821063350924249e-02, 2.264286130145305e-03, -1.805008817185999e-02, -1.859919896491534e-02, 2.241303100651475e-03, -1.843295645981302e-02, -1.897493186394439e-02, 2.222568983976134e-03, -1.879462690531071e-02, -1.878064440527824e-02, 2.231922961512953e-03, -1.860745594239551e-02, -1.878064440527824e-02, 2.231922961512953e-03, -1.860745594239551e-02, -2.253057096705162e-02, 2.525278278664052e-03, -2.231417043021881e-02, -2.278870149134724e-02, 5.397863529116129e-03, -2.268475652913611e-02, -2.194497666005290e-02, 4.298036410666330e-03, -2.182728675956576e-02, -2.154652082837552e-02, 3.458400931093935e-03, -2.138654614128462e-02, -2.174016028124360e-02, 3.860241852276062e-03, -2.157966257591047e-02, -2.174016028124360e-02, 3.860241852276062e-03, -2.157966257591047e-02, -1.064809082658023e-02, 1.166454564355177e-03, -1.065596838143782e-02, -2.191567663148095e-01, 2.273047300256539e-01, -2.209400755759806e-01, -1.479516605927386e-01, 1.027440095908986e-01, -1.495717119583465e-01, -8.268936801499245e-02, 2.883676467546989e-02, -8.212337604543356e-02, -1.127729931242083e-01, 5.500747727544229e-02, -1.133399329078987e-01, -1.127729931242083e-01, 5.500747727544231e-02, -1.133399329078988e-01, -3.108668724766215e-02, 8.100714365057125e-03, -3.092225030493739e-02, -7.582694367521530e+01, 1.766533536733120e+01, -7.439606225425804e+01, -2.655558114988758e+01, 1.878803243082290e+01, -2.457208090233877e+01, -1.091950443827781e-01, 3.428914672188251e-02, -1.070265759568869e-01, -5.899301497318086e+00, 9.701438036301546e+00, -6.199345837442497e+00, -5.899301497318086e+00, 9.701438036301546e+00, -6.199345837442507e+00, -4.850710970014256e+03, 3.417478728614279e-04, -4.406593685844172e+03, -4.535520268493639e+06, 2.850114531961813e-85, -5.277646472751872e+06, -5.089312268768470e+05, 1.662312648545182e-36, -4.334681395941018e+05, -7.557708681498656e+00, 1.102889579754806e+01, -7.295679854300789e+00, -2.990734682243934e+05, 8.178814636871498e-22, -1.083014734727761e+05, -2.990734682243941e+05, 8.178814636871070e-22, -1.083014734727764e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
