
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.555291733223264e+01, -1.555294491546170e+01, -1.555310591060064e+01, -1.555269473861192e+01, -1.555290472967010e+01, -1.555290472967010e+01, -2.611692474024371e+00, -2.611679208888351e+00, -2.611435437020055e+00, -2.612344974412860e+00, -2.611738359708425e+00, -2.611738359708425e+00, -5.500391420559130e-01, -5.496674731791817e-01, -5.418306548017524e-01, -5.456905898117206e-01, -5.461517008527500e-01, -5.461517008527500e-01, -1.734604814688884e-01, -1.748043095435277e-01, -6.328093812633380e-01, -1.488977911250659e-01, -1.674431696702845e-01, -1.674431696702842e-01, -7.797936822984651e-02, -7.588850487890007e-02, -8.739838178131096e-02, -3.861638309468618e-10, -5.309881663413270e-02, -5.309881663413302e-02, -3.811300485844455e+00, -3.811368357976451e+00, -3.811309103307523e+00, -3.811368914522772e+00, -3.811331724152902e+00, -3.811331724152902e+00, -1.558967481975032e+00, -1.567446791792166e+00, -1.556826001581429e+00, -1.564284740173415e+00, -1.564743857064867e+00, -1.564743857064867e+00, -4.823191651706584e-01, -5.211526321912263e-01, -4.501253773450463e-01, -4.670723194782399e-01, -4.896296830168712e-01, -4.896296830168712e-01, -1.272531403160942e-01, -1.832340081119120e-01, -1.221729306954068e-01, -1.441704193623314e+00, -1.321442999415920e-01, -1.321442999415920e-01, -1.506757676527498e-10, -4.088721353677494e-10, -7.265977190577810e-10, -1.007162571584848e-01, -7.126905710551357e-10, -7.126905753919444e-10, -4.878915804910464e-01, -4.837427087014138e-01, -4.851253800434281e-01, -4.863270692608532e-01, -4.857186196039513e-01, -4.857186196039513e-01, -4.767548997026269e-01, -4.140236305185881e-01, -4.296920208664328e-01, -4.467914661787557e-01, -4.378361248315816e-01, -4.378361248315816e-01, -5.434861718279708e-01, -2.158497343688965e-01, -2.452354559126590e-01, -3.037521490733253e-01, -2.713748907727900e-01, -2.713748907727900e-01, -3.843858381963460e-01, -8.733056523796472e-02, -9.639666244913878e-02, -2.935144083867212e-01, -1.083290359347675e-01, -1.083290359347675e-01, -8.160843632450208e-03, -3.823687785668717e-12, -6.361598595995555e-11, -1.056673900494780e-01, -6.412756003298936e-10, -6.412755962099254e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.931294050421891e+01, -1.931291726573286e+01, -1.931301978342722e+01, -1.931297521829776e+01, -1.931326381128685e+01, -1.931332569725104e+01, -1.931236394572220e+01, -1.931218415567093e+01, -1.931298394828019e+01, -1.931263601858657e+01, -1.931298394828019e+01, -1.931263601858657e+01, -3.218252234381974e+00, -3.218331061183574e+00, -3.218282953033442e+00, -3.218363608680259e+00, -3.219042218296353e+00, -3.219219261963608e+00, -3.218229229150526e+00, -3.218402729977873e+00, -3.217715695549550e+00, -3.219092604192388e+00, -3.217715695549550e+00, -3.219092604192388e+00, -6.780598090373354e-01, -6.813136265989250e-01, -6.764677236205635e-01, -6.804569116213083e-01, -6.502045376861979e-01, -6.448299027454596e-01, -6.521557789365776e-01, -6.538901863213664e-01, -6.777365997418320e-01, -6.260537272991525e-01, -6.777365997418320e-01, -6.260537272991525e-01, -1.822931471336698e-01, -1.872244414433970e-01, -1.862440016624049e-01, -1.919015398380802e-01, -7.716651858918925e-01, -7.971772326358579e-01, -1.313462414675792e-01, -1.327050182303575e-01, -1.707697802780696e-01, -1.098818547185340e-01, -1.707697802780691e-01, -1.098818547185347e-01, 6.366967722829366e-02, 2.136222120886125e-02, 1.996072636077261e-02, -3.529251144853418e-02, -4.820363526911059e-02, -4.965339096528681e-02, -2.518914538729078e-09, -2.544489510123210e-09, 2.188640399568409e-01, -8.448808257246179e-09, 2.188640399568372e-01, -8.448808253351920e-09, -4.852190821527792e+00, -4.851063860155951e+00, -4.854042101317283e+00, -4.852859437726306e+00, -4.852291974644015e+00, -4.851127981919994e+00, -4.853885615958633e+00, -4.852753834294385e+00, -4.853137448804212e+00, -4.851966847310439e+00, -4.853137448804212e+00, -4.851966847310439e+00, -1.771920100305185e+00, -1.771833535399352e+00, -1.787071212032388e+00, -1.786585099721673e+00, -1.754790817890943e+00, -1.758878715009063e+00, -1.767883085626436e+00, -1.772103986310607e+00, -1.792560277969416e+00, -1.782405268002274e+00, -1.792560277969416e+00, -1.782405268002274e+00, -6.241081791735071e-01, -6.230216945683102e-01, -6.819748181970964e-01, -6.823864898499620e-01, -5.722229629932039e-01, -5.875339844005151e-01, -6.045387205742558e-01, -6.173630867090895e-01, -6.454264181716655e-01, -6.227366985187832e-01, -6.454264181716655e-01, -6.227366985187832e-01, -9.278473778545056e-02, -9.333516572207270e-02, -1.717970953327737e-01, -1.724545522612115e-01, -8.570194753327555e-02, -8.888363722818628e-02, -1.892763104004553e+00, -1.892074761221689e+00, -1.057113362157501e-01, -1.098286227845715e-01, -1.057113362157501e-01, -1.098286227845715e-01, -1.001253116546084e-09, -9.788319019215763e-10, -2.692978783407150e-09, -2.668814881624869e-09, -4.858621289027420e-09, -4.697831278814873e-09, -6.476082302424259e-02, -6.514634044176917e-02, -5.316996546332869e-09, -4.423137016536498e-09, -5.316996552214666e-09, -4.423137024153019e-09, -6.345919046481486e-01, -6.362867760755925e-01, -6.318267642246098e-01, -6.335722438239724e-01, -6.330091714151238e-01, -6.347524228048650e-01, -6.338379493085072e-01, -6.355376904619863e-01, -6.334438225998748e-01, -6.351648703886585e-01, -6.334438225998748e-01, -6.351648703886585e-01, -6.186159194407378e-01, -6.199652209295270e-01, -5.191908499641938e-01, -5.209404322794930e-01, -5.520106110693510e-01, -5.538893820270115e-01, -5.824375019958631e-01, -5.838668278776136e-01, -5.674827168689562e-01, -5.689658235254110e-01, -5.674827168689562e-01, -5.689658235254110e-01, -7.111697051651957e-01, -7.122842647441778e-01, -2.207284501575046e-01, -2.217068223129746e-01, -2.735202907604602e-01, -2.756577954788922e-01, -3.820922795892776e-01, -3.835193423937873e-01, -3.259388571015442e-01, -3.259490378364389e-01, -3.259388571015454e-01, -3.259490378364382e-01, -4.822648764870280e-01, -4.848548949450953e-01, -4.802986808227441e-02, -4.820429835096052e-02, -5.690498795524429e-02, -5.791927895139240e-02, -3.768033161967438e-01, -3.804940973921617e-01, -7.559798338961896e-02, -7.781990604326473e-02, -7.559798338961866e-02, -7.781990604326461e-02, -1.066390708939590e-02, -1.104736800572345e-02, -2.526619021841708e-11, -2.523447860591449e-11, -4.266609206703573e-10, -4.118374596353167e-10, -7.273796016813953e-02, -7.358289188404966e-02, -4.708291792616839e-09, -3.992781456307079e-09, -4.708291790163832e-09, -3.992781453637231e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.292988074508442e-09, 3.855567579455844e-10, -7.293030295592932e-09, -7.292933754693361e-09, 3.855637563905792e-10, -7.292989849746207e-09, -7.292685851990736e-09, 3.855734091993355e-10, -7.292659250412480e-09, -7.293313684692035e-09, 3.854697494807899e-10, -7.293444603367656e-09, -7.292976653541846e-09, 3.855271085313426e-10, -7.293063481206547e-09, -7.292976653541846e-09, 3.855271085313426e-10, -7.293063481206547e-09, -8.929662296806045e-06, 2.158879157656427e-06, -8.932888274866292e-06, -8.929650391012763e-06, 2.159323527660124e-06, -8.933124710629143e-06, -8.932240324371447e-06, 2.169371669283230e-06, -8.934006614431650e-06, -8.922310439229033e-06, 2.149943255801801e-06, -8.924690834333022e-06, -8.935164880377074e-06, 2.159156568071321e-06, -8.925982187808519e-06, -8.935164880377074e-06, 2.159156568071321e-06, -8.925982187808519e-06, -4.671588803580326e-03, 3.586683876242116e-03, -4.655798764301472e-03, -4.696021744072091e-03, 3.559577090514688e-03, -4.676202674380188e-03, -5.199191473884658e-03, 2.876045381924161e-03, -5.233301704157091e-03, -5.061425849781703e-03, 2.810968523930000e-03, -5.053410172391477e-03, -4.956648992351854e-03, 2.852692094259074e-03, -5.134900179480270e-03, -4.956648992351854e-03, 2.852692094259074e-03, -5.134900179480270e-03, -7.974948429482982e-01, 3.108902575321890e-01, -7.015795150285431e-01, -7.687166939065729e-01, 3.280826843588528e-01, -6.614498947790175e-01, -2.765157611627197e-03, 1.940414170439823e-03, -2.478313265631705e-03, -1.822132711033661e+00, 2.258949661124237e-01, -1.735739953807798e+00, -7.167670288551404e-01, 1.882246441728870e-01, -4.757148064972568e+00, -7.167670288551146e-01, 1.882246441728873e-01, -4.757148064972576e+00, -5.407798325208276e+04, 8.471332723898200e-03, -3.268427684527915e+04, -3.434852093158497e+04, 9.964515393423459e-03, -1.480292260907380e+04, -8.303626753420403e+01, 5.126941006152715e-02, -7.140011144996005e+01, 1.504341724364139e-03, 3.008683449168684e-03, 1.504341724364139e-03, -1.542913664448860e+05, 4.414566270491809e-03, 2.207283134900671e-03, -1.542913664448848e+05, 4.414566270088269e-03, 2.207283135350878e-03, -1.949645262624633e-06, 5.666948009101149e-07, -1.951675585790422e-06, -1.948827485542066e-06, 5.704413223836728e-07, -1.950823769988624e-06, -1.949608101740682e-06, 5.668443577206054e-07, -1.951620865150016e-06, -1.948860432404140e-06, 5.701514261968389e-07, -1.950895428111484e-06, -1.949249049789429e-06, 5.686004611431787e-07, -1.951238284850193e-06, -1.949249049789429e-06, 5.686004611431787e-07, -1.951238284850193e-06, -7.437813774665458e-05, 1.221811741084532e-05, -7.439293284086217e-05, -7.259360637061625e-05, 1.218856108878283e-05, -7.266677188598415e-05, -7.521332309908176e-05, 1.161795009824474e-05, -7.509059758344573e-05, -7.366555190983797e-05, 1.159619612758267e-05, -7.351097309546944e-05, -7.279007061062366e-05, 1.250231835492394e-05, -7.327932424405447e-05, -7.279007061062366e-05, 1.250231835492394e-05, -7.327932424405447e-05, -6.878822180119222e-03, 1.180452397706796e-02, -7.023280388721474e-03, -3.695536622833522e-03, 1.489938286408802e-02, -3.705875020644981e-03, -1.054308684421099e-02, 1.535577972946644e-02, -8.390740777078527e-03, -7.489799166291507e-03, 2.278859644535717e-02, -5.103243332682923e-03, -5.318504726626459e-03, 1.179162458306085e-02, -7.756806327607119e-03, -5.318504726626436e-03, 1.179162458306085e-02, -7.756806327607144e-03, -4.972001928537582e+00, 1.261488607621168e-01, -4.877776489920866e+00, -6.659395045311115e-01, 1.139695105238702e-01, -6.548962356953750e-01, -6.770626033183017e+00, 1.279112469154852e-01, -5.829848028386442e+00, -7.340794052402365e-05, 1.207887057881010e-04, -7.366738915399459e-05, -3.554811763063969e+00, 2.409472748596690e-01, -3.283039962912995e+00, -3.554811763063969e+00, 2.409472748596690e-01, -3.283039962912995e+00, 1.466773397935566e-03, 2.933546798259037e-03, 1.466773397935566e-03, 1.849572050554419e-03, 3.699144102256803e-03, 1.849572050554419e-03, 1.842554218706263e-02, 3.685108437354808e-02, 1.842554218706263e-02, -2.117839234506849e+01, 1.250822448857004e-01, -2.056616607228840e+01, 7.051803231269947e-03, 1.410360645889085e-02, 7.051803231269947e-03, 7.051803234557417e-03, 1.410360646869916e-02, 7.051803234557417e-03, -3.911602485740930e-03, 2.514346072918196e-02, -3.677056851305479e-03, -5.022531787991384e-03, 2.157065992117518e-02, -4.804008334711578e-03, -4.663962937955910e-03, 2.270457728491302e-02, -4.441841576927700e-03, -4.342618620808064e-03, 2.373865089872573e-02, -4.112922626944009e-03, -4.506445660296569e-03, 2.321019190891285e-02, -4.280549265601216e-03, -4.506445660296569e-03, 2.321019190891285e-02, -4.280549265601216e-03, -3.952416396386854e-03, 2.977269840520045e-02, -3.706927234910052e-03, -1.468525589751233e-02, 1.592277215307748e-02, -1.437043356791891e-02, -1.161224700386602e-02, 1.838749842245184e-02, -1.132833821682183e-02, -8.749988201646153e-03, 2.169730037966074e-02, -8.504185247796061e-03, -1.019434076674888e-02, 1.995497716545398e-02, -9.927623586812271e-03, -1.019434076674888e-02, 1.995497716545398e-02, -9.927623586812271e-03, -3.230127715312618e-03, 1.183264719377924e-02, -3.208091530541169e-03, -2.982323898030216e-01, 8.498631964250428e-02, -2.924985708172306e-01, -1.588306772896075e-01, 7.821972418059023e-02, -1.536446754368996e-01, -5.365230515238555e-02, 6.964082434152352e-02, -5.197241917213410e-02, -9.323353428297057e-02, 7.796350422599263e-02, -9.381678424597789e-02, -9.323353428296915e-02, 7.796350422599266e-02, -9.381678424597878e-02, -2.004225380324421e-02, 2.285950305464996e-02, -1.938405972340519e-02, -8.507454024142352e+01, 4.213028450134424e-02, -8.349160374797518e+01, -3.698185354359006e+01, 6.458066222247318e-02, -3.399355743199904e+01, -5.870500265056543e-02, 1.099497136873529e-01, -5.315431673118694e-02, -1.172682277487159e+01, 2.182010199987041e-01, -1.072344076985204e+01, -1.172682277487168e+01, 2.182010199987039e-01, -1.072344076985199e+01, -1.813486888951229e-01, 1.056259116938041e-02, -1.852026973408563e-01, 2.005765736367150e-03, 4.011531506685853e-03, 2.005765736367150e-03, 2.510381951246900e-03, 5.020763908060611e-03, 2.510381951246900e-03, -1.368549204266774e+01, 2.002688123716920e-01, -1.300410050862761e+01, 9.000943715250370e-03, 1.800188742308661e-02, 9.000943715250370e-03, 9.000943718924263e-03, 1.800188743452388e-02, 9.000943718924263e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
