
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.586722193959107e+01, -1.586723944560050e+01, -1.586737595658136e+01, -1.586708812367152e+01, -1.586723068339428e+01, -1.586723068339428e+01, -2.678744055139766e+00, -2.678722561100899e+00, -2.678240246094921e+00, -2.679628568961092e+00, -2.678744192528197e+00, -2.678744192528197e+00, -5.620601569246916e-01, -5.619733226255200e-01, -5.606943212604302e-01, -5.642296988702670e-01, -5.620262277871968e-01, -5.620262277871968e-01, -1.722701639041801e-01, -1.737125077695989e-01, -6.540049800442731e-01, -1.341412150322462e-01, -1.726954806620643e-01, -1.726954806620643e-01, -5.437963292003094e-03, -6.005290101609067e-03, -5.690675839046217e-02, -1.277424724378793e-03, -5.936959338248501e-03, -5.936959338248501e-03, -3.856577359837004e+00, -3.856081114564124e+00, -3.856531508401402e+00, -3.856145570857008e+00, -3.856315931142368e+00, -3.856315931142368e+00, -1.639292483782277e+00, -1.646863996003280e+00, -1.639969349306601e+00, -1.645862718915510e+00, -1.643549897692284e+00, -1.643549897692284e+00, -4.711526483198929e-01, -4.905341056700716e-01, -4.495214483552794e-01, -4.528870122348640e-01, -4.855273180990362e-01, -4.855273180990362e-01, -1.037057809001196e-01, -1.793688340705167e-01, -1.031620763949619e-01, -1.419627828213898e+00, -1.173372939473885e-01, -1.173372939473885e-01, -1.217691028881586e-03, -1.510428141792097e-03, -1.116529523088990e-03, -7.432570101744546e-02, -1.381820696813769e-03, -1.381820696813769e-03, -4.617341410390682e-01, -4.640277823068831e-01, -4.632878112885337e-01, -4.626633287040253e-01, -4.629821718797501e-01, -4.629821718797501e-01, -4.469107775873015e-01, -4.226363596100184e-01, -4.308410641808069e-01, -4.375964594311106e-01, -4.341399766834700e-01, -4.341399766834700e-01, -5.137682128965136e-01, -2.191484697374320e-01, -2.517403508732124e-01, -3.024245231410607e-01, -2.758835360375365e-01, -2.758835360375365e-01, -3.844552100535101e-01, -5.121415589790665e-02, -6.755889137752323e-02, -2.810439349609845e-01, -8.983728012567774e-02, -8.983728012567774e-02, -7.027126744895425e-03, -2.802146068268406e-04, -6.033053704871966e-04, -8.735020643068753e-02, -1.125565312608905e-03, -1.125565312608902e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.898272327579985e+01, -1.898278467309700e+01, -1.898306998239745e+01, -1.898206436215296e+01, -1.898275555932684e+01, -1.898275555932684e+01, -3.116410239858253e+00, -3.116433272036446e+00, -3.117192225736587e+00, -3.116531102127999e+00, -3.116435070892551e+00, -3.116435070892551e+00, -6.353003231926354e-01, -6.346212885160176e-01, -6.182699223507387e-01, -6.227065318326361e-01, -6.350526403260210e-01, -6.350526403260210e-01, -1.970755107689061e-01, -1.985398734527100e-01, -7.559001560001999e-01, -1.645412388011027e-01, -1.974922373500249e-01, -1.974922373500249e-01, -1.535845755881018e-02, -1.707739012423803e-02, -1.049431699946113e-01, -2.702566545874770e-03, -1.688026899491821e-02, -1.688026899491821e-02, -4.720486343228727e+00, -4.722279415441205e+00, -4.720670055375467e+00, -4.722064248836049e+00, -4.721404971821566e+00, -4.721404971821566e+00, -1.736533254210731e+00, -1.749058098666159e+00, -1.730714191270664e+00, -1.740441229415589e+00, -1.752713422094592e+00, -1.752713422094592e+00, -5.655282847780844e-01, -6.249085108757775e-01, -5.378526873825582e-01, -5.692056997795498e-01, -5.873673429582046e-01, -5.873673429582046e-01, -1.470755992735807e-01, -2.149728160103634e-01, -1.413260520101785e-01, -1.808645579800500e+00, -1.498595624344627e-01, -1.498595624344627e-01, -2.552356740684478e-03, -3.357293381656657e-03, -2.452659283454653e-03, -1.118914793278434e-01, -3.076562271896867e-03, -3.076562271896866e-03, -6.003378754057314e-01, -5.932117017708747e-01, -5.957397278862328e-01, -5.976739477634769e-01, -5.967095433023989e-01, -5.967095433023989e-01, -5.831132964346720e-01, -4.906437445587615e-01, -5.140998812656703e-01, -5.382876428738544e-01, -5.257080961971561e-01, -5.257080961971561e-01, -6.527636342124293e-01, -2.529047426142331e-01, -2.858563177230613e-01, -3.512813282966804e-01, -3.150053264946280e-01, -3.150053264946280e-01, -4.456911193940145e-01, -1.058326319584841e-01, -1.147972461006175e-01, -3.337895134193620e-01, -1.203778457838090e-01, -1.203778457838088e-01, -2.008065274245779e-02, -4.208472286392289e-04, -1.066058832010597e-03, -1.124383642494785e-01, -2.432064202930863e-03, -2.432064202930855e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.450596746588399e-09, -5.450574991488222e-09, -5.450394008121283e-09, -5.450751942769656e-09, -5.450585975257867e-09, -5.450585975257867e-09, -7.012226235761810e-06, -7.012473582458403e-06, -7.018129277658622e-06, -7.002494951483644e-06, -7.012234869087253e-06, -7.012234869087253e-06, -3.651185927232977e-03, -3.647846880105559e-03, -3.517880733277915e-03, -3.442087085277472e-03, -3.650054394777580e-03, -3.650054394777580e-03, -2.355757917520654e-01, -2.394213051903664e-01, -2.074841480748974e-03, -1.352920716773711e-01, -2.370149674456569e-01, -2.370149674456569e-01, 3.629208034049459e+02, 3.539474120854916e+02, 1.637173805674629e+01, 3.402158500602341e+02, 3.679062981276945e+02, 3.679062981276945e+02, -1.630519733395862e-06, -1.631765511406286e-06, -1.630637601637948e-06, -1.631606362865267e-06, -1.631171110702429e-06, -1.631171110702429e-06, -5.048612369912335e-05, -4.957108244075779e-05, -5.038961414189807e-05, -4.967747840908789e-05, -4.998791487720503e-05, -4.998791487720503e-05, -8.068985471019318e-03, -7.697012892019442e-03, -9.670442465785757e-03, -1.032417157963296e-02, -7.254234743982744e-03, -7.254234743982744e-03, 6.483786004790608e-01, -9.117073489575134e-02, 5.273590130610777e-01, -9.836553741619928e-05, 2.617387874427313e-02, 2.617387874427313e-02, 3.627478272738619e+02, 3.518189069248010e+02, 1.013373171725995e+03, 4.230233424417151e+00, 5.190723327740994e+02, 5.190723327740988e+02, -1.133700916479665e-02, -9.759447331118441e-03, -1.007359436664173e-02, -1.048175586552823e-02, -1.025158078826972e-02, -1.025158078826971e-02, -1.307705743152635e-02, -1.158020856096062e-02, -1.138041267583964e-02, -1.134846704436988e-02, -1.136123457717889e-02, -1.136123457717888e-02, -6.327991963006938e-03, -7.500821015644453e-02, -6.194304774467994e-02, -4.143041193676629e-02, -5.234136822409242e-02, -5.234136822409244e-02, -1.659900326219024e-02, 2.237231566823421e+01, 7.733913278773410e+00, -5.963654477686747e-02, 9.458799022274968e-01, 9.458799022274897e-01, 2.584982721787345e+02, 7.935906467644088e+02, 5.933048880951608e+02, 6.967885977516577e-01, 7.709078745290877e+02, 7.709078745290859e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
