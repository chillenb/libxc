
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_blyp35_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.375331584804772e+01, -1.375333335958014e+01, -1.375345615443302e+01, -1.375319469094054e+01, -1.375332530147616e+01, -1.375332530147616e+01, -2.328032790315210e+00, -2.328008785959196e+00, -2.327509647972169e+00, -2.328809818909463e+00, -2.328058891246248e+00, -2.328058891246248e+00, -4.919834066880682e-01, -4.918673886861676e-01, -4.898250910333278e-01, -4.932181044429195e-01, -4.920782831786011e-01, -4.920782831786011e-01, -1.461267263219796e-01, -1.476620677297993e-01, -5.655830374823834e-01, -1.172323786292351e-01, -1.285091329066443e-01, -1.285091329066443e-01, -4.323999987131182e-02, -4.328527468986590e-02, -7.348371307963898e-02, -3.935655770074002e-02, -3.923567183231060e-02, -3.923567183231057e-02, -3.350410780430956e+00, -3.349976337943260e+00, -3.350397979599935e+00, -3.350014351184120e+00, -3.350186656302067e+00, -3.350186656302067e+00, -1.427071736456519e+00, -1.433852265921853e+00, -1.427259314871336e+00, -1.433249894254878e+00, -1.430722682302205e+00, -1.430722682302205e+00, -4.177621465913690e-01, -4.356615941419974e-01, -3.903984321606815e-01, -3.907845979016284e-01, -4.221785431215400e-01, -4.221785431215400e-01, -8.943127561486011e-02, -1.493692186461784e-01, -8.566033109074273e-02, -1.239059890584492e+00, -9.998746536500711e-02, -9.998746536500711e-02, -3.547463679332188e-02, -3.791540715420847e-02, -2.486257465755333e-02, -7.510915231379049e-02, -3.007091549884659e-02, -3.007091549884660e-02, -4.005437719906869e-01, -4.024171067617102e-01, -4.017997588541874e-01, -4.012535256333133e-01, -4.015300864223320e-01, -4.015300864223320e-01, -3.891298429171463e-01, -3.653482902382489e-01, -3.731228832533438e-01, -3.799240607176869e-01, -3.764485945961079e-01, -3.764485945961079e-01, -4.561386824988424e-01, -1.839137901116236e-01, -2.142005106119018e-01, -2.641909464301633e-01, -2.379558602439830e-01, -2.379558602439829e-01, -3.381117330458643e-01, -7.406602601198423e-02, -7.501288304001404e-02, -2.505544830141679e-01, -7.978052997175923e-02, -7.978052997175923e-02, -4.887381043115597e-02, -2.183940277542026e-02, -2.861927198794888e-02, -7.799207246997865e-02, -2.825677276654470e-02, -2.825677276654467e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_blyp35_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.645979746468674e+01, -1.645985896100271e+01, -1.646012113284024e+01, -1.645920642978131e+01, -1.645968730794516e+01, -1.645968730794516e+01, -2.709253695976013e+00, -2.709277925232054e+00, -2.709903257849354e+00, -2.709318187449852e+00, -2.709346412059365e+00, -2.709346412059365e+00, -5.618357679012500e-01, -5.611799535494792e-01, -5.462373833647035e-01, -5.503768448956049e-01, -5.495173030600302e-01, -5.495173030600302e-01, -1.711813403680502e-01, -1.724103015529586e-01, -6.482286280018822e-01, -1.452300159104952e-01, -1.540361871117920e-01, -1.540361871117920e-01, -1.306081307221851e-02, -1.335954979212131e-02, -3.987846961786311e-02, -9.915188856556841e-03, -1.080725282776603e-02, -1.080725282776606e-02, -4.102357676201791e+00, -4.103969986650569e+00, -4.102430523728055e+00, -4.103853872063085e+00, -4.103175423722173e+00, -4.103175423722173e+00, -1.511865700301589e+00, -1.523217646474848e+00, -1.502250309376147e+00, -1.512211273820776e+00, -1.522869070337023e+00, -1.522869070337023e+00, -5.022070511403861e-01, -5.537160159776319e-01, -4.664140454195782e-01, -4.923341050841171e-01, -5.107301233758405e-01, -5.107301233758405e-01, -1.150606107114676e-01, -1.853275489360687e-01, -1.063205141160192e-01, -1.577809075242060e+00, -1.234383706146073e-01, -1.234383706146073e-01, -8.449958820294473e-03, -9.604658355608866e-03, -6.682689595553949e-03, -6.678499877782341e-02, -8.068423025089481e-03, -8.068423025089510e-03, -5.192353404691695e-01, -5.123472575102270e-01, -5.146499628054012e-01, -5.166444569038726e-01, -5.156355312524095e-01, -5.156355312524095e-01, -5.074805220114571e-01, -4.236822381528175e-01, -4.442212791629510e-01, -4.670827882914266e-01, -4.551259857577555e-01, -4.551259857577555e-01, -5.780680589124533e-01, -2.183713154739210e-01, -2.469832478288803e-01, -3.082008945538867e-01, -2.735521811501144e-01, -2.735521811501144e-01, -3.928184331742131e-01, -3.865176181675468e-02, -5.278518146652873e-02, -2.981281064320062e-01, -8.519863871175473e-02, -8.519863871175469e-02, -1.627019249823997e-02, -4.308652479413868e-03, -6.527890527205677e-03, -7.993705858318557e-02, -7.536642432111638e-03, -7.536642432111598e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_blyp35_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.701766725417282e-09, -4.701744051547052e-09, -4.701579407982757e-09, -4.701918078645393e-09, -4.701749691513457e-09, -4.701749691513457e-09, -6.044371973155742e-06, -6.044635405597616e-06, -6.050145208512743e-06, -6.036029090244565e-06, -6.044110119300815e-06, -6.044110119300815e-06, -3.107914079637182e-03, -3.105954094299193e-03, -3.027483500356069e-03, -2.953732519874430e-03, -2.983986162813573e-03, -2.983986162813573e-03, -1.555550499067527e-01, -1.613812477325310e-01, -1.813041075100289e-03, -7.005873183276434e-02, -1.440098390960053e-01, -1.440098390960052e-01, -6.588183168849872e+03, -5.777271496981412e+03, -2.895273141824375e+01, -3.109167090685938e+04, -1.723086328389819e+04, -1.723086328389819e+04, -1.398575472911666e-06, -1.399612341548866e-06, -1.398609505338385e-06, -1.399524966365200e-06, -1.399107830075547e-06, -1.399107830075547e-06, -4.389457248299492e-05, -4.305324564508097e-05, -4.390806364085508e-05, -4.316249947822899e-05, -4.342328088991165e-05, -4.342328088991165e-05, -6.455089987943866e-03, -6.117149490402131e-03, -8.329490731457924e-03, -9.322372220414373e-03, -6.266002301562961e-03, -6.266002301562961e-03, 3.409611335266769e-01, -4.831159008417774e-02, 3.292060930812997e-01, -8.330090038356216e-05, -2.408961127921461e-02, -2.408961127921461e-02, -7.091738520844033e+04, -3.473747686416435e+04, -1.258795709600511e+05, -2.635184789709022e+00, -5.943037555482821e+04, -5.943037555482818e+04, -9.161654517796628e-03, -8.498967592320631e-03, -8.697565986492706e-03, -8.886566087484074e-03, -8.788880266026968e-03, -8.788880266026968e-03, -1.057967334355081e-02, -1.001897948578320e-02, -9.868625235475000e-03, -9.868539629425310e-03, -9.864774676321870e-03, -9.864774676321870e-03, -5.034664523854377e-03, -5.320765041716397e-02, -4.871576908906564e-02, -3.399407718317121e-02, -4.277811353420819e-02, -4.277811353420821e-02, -1.347853034864983e-02, -3.313548151875265e+01, -8.054646543911918e+00, -4.549332056050398e-02, -6.102994795378258e-01, -6.102994795378276e-01, -2.309130031859243e+03, -2.440328341589070e+06, -2.340595722053770e+05, -9.535601548912069e-01, -7.933722009542954e+04, -7.933722009542980e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
