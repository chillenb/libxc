
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_02_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_02", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.507871620450548e+01, -1.507873336730544e+01, -1.507886545017714e+01, -1.507858329545261e+01, -1.507872479152723e+01, -1.507872479152723e+01, -2.422565825911315e+00, -2.422547600889409e+00, -2.422150589765892e+00, -2.423368666119128e+00, -2.422567177777928e+00, -2.422567177777928e+00, -3.953609563876710e-01, -3.950665284141888e-01, -3.875971090171540e-01, -3.912200603149090e-01, -3.952525912215299e-01, -3.952525912215299e-01, -4.821918152132447e-02, -5.019625122657390e-02, -4.866905908891033e-01, -1.296599070960645e-02, -4.882429462312865e-02, -4.882429462312865e-02, -1.750075909233085e-03, -1.831108938718975e-03, 2.032010666209590e-03, -8.513290611247662e-04, -1.812483272212818e-03, -1.812483272212818e-03, -3.559379260017431e+00, -3.558976985284446e+00, -3.559342647274768e+00, -3.559029783153866e+00, -3.559166546839547e+00, -3.559166546839547e+00, -1.410007318124811e+00, -1.417803925437181e+00, -1.409859716943844e+00, -1.415938039626292e+00, -1.415472063391515e+00, -1.415472063391515e+00, -3.221070902567224e-01, -3.484263348918410e-01, -3.015969307941866e-01, -3.119164320151581e-01, -3.366724121720880e-01, -3.366724121720880e-01, 7.186705346822806e-03, -3.968833681416153e-02, 5.354101310889790e-03, -1.229757295479469e+00, -2.757831803665338e-03, -2.757831803665338e-03, -8.216890060713238e-04, -9.371923748564477e-04, -7.052752152816151e-04, 6.564467162994836e-03, -8.551292483103337e-04, -8.551292483103337e-04, -3.243388046455583e-01, -3.243182289532588e-01, -3.243527309756294e-01, -3.243581532052621e-01, -3.243573881474988e-01, -3.243573881474988e-01, -3.110647024444218e-01, -2.711549350295540e-01, -2.839383987050807e-01, -2.949163430929954e-01, -2.893814633930976e-01, -2.893814633930976e-01, -3.696799628758714e-01, -7.358246777951941e-02, -1.069951231767217e-01, -1.626612807028845e-01, -1.338874155025151e-01, -1.338874155025151e-01, -2.358291337910146e-01, 1.525321455702976e-03, 6.896889541414540e-03, -1.490228279415039e-01, 5.519184420213051e-03, 5.519184420213008e-03, -2.042949785751395e-03, -2.597800888678829e-04, -4.913129963933500e-04, 3.828895480420170e-03, -7.283646176795671e-04, -7.283646176795660e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_02_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_02", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.810575675952222e+01, -1.810581571875350e+01, -1.810608965688560e+01, -1.810512396929404e+01, -1.810578776143030e+01, -1.810578776143030e+01, -2.880461842876849e+00, -2.880482087412629e+00, -2.881159230223477e+00, -2.880612623326942e+00, -2.880484710606695e+00, -2.880484710606695e+00, -5.120583716169177e-01, -5.115855460786760e-01, -5.007168284575071e-01, -5.047013327212651e-01, -5.118851016397461e-01, -5.118851016397461e-01, -1.096119938949493e-01, -1.105984751306885e-01, -6.221454080829298e-01, -8.140923146933704e-02, -1.098874794187939e-01, -1.098874794187939e-01, -2.319851354750159e-03, -2.426915353928607e-03, -1.112823835551528e-02, -1.130983733032626e-03, -2.402314643537735e-03, -2.402314643537735e-03, -4.413214268957992e+00, -4.414864684379602e+00, -4.413383552566754e+00, -4.414666822486894e+00, -4.414059572776804e+00, -4.414059572776804e+00, -1.569052605169426e+00, -1.580767368625432e+00, -1.563845430155524e+00, -1.572945870696260e+00, -1.583861242227673e+00, -1.583861242227673e+00, -4.357719196255377e-01, -4.817343052157177e-01, -4.103135756373895e-01, -4.314636013283834e-01, -4.549934028405085e-01, -4.549934028405085e-01, -6.034496304638728e-02, -1.267301117199272e-01, -5.716988031078668e-02, -1.612618422777449e+00, -6.760760295879316e-02, -6.760760295879316e-02, -1.091718514370254e-03, -1.244697887802381e-03, -9.374403626895220e-04, -2.507286017262953e-02, -1.136017538592766e-03, -1.136017538592766e-03, -4.556323272407132e-01, -4.512675342580269e-01, -4.527594372988387e-01, -4.539634582960105e-01, -4.533549419027244e-01, -4.533549419027244e-01, -4.387670241242649e-01, -3.715085736748053e-01, -3.885151921786192e-01, -4.060019736886873e-01, -3.968609582938467e-01, -3.968609582938467e-01, -5.084986503869621e-01, -1.619966762573894e-01, -1.902868089644426e-01, -2.425780375159131e-01, -2.135226141344787e-01, -2.135226141344787e-01, -3.299457053681369e-01, -9.109865589616122e-03, -2.036492471755132e-02, -2.224351536713952e-01, -4.016713799895058e-02, -4.016713799895057e-02, -2.706224260726716e-03, -3.459375336361878e-04, -6.535958933815263e-04, -3.557976353447290e-02, -9.680478344579577e-04, -9.680478344579563e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_02_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_02", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.133977984216776e-09, -5.133956661360479e-09, -5.133784095203230e-09, -5.134134822182714e-09, -5.133967386595599e-09, -5.133967386595599e-09, -6.103763176644120e-06, -6.103972941421250e-06, -6.108769436383180e-06, -6.095510309064757e-06, -6.103770495317192e-06, -6.103770495317192e-06, -1.718834966136730e-03, -1.713389340970310e-03, -1.542442001893352e-03, -1.527760723305014e-03, -1.716900635616734e-03, -1.716900635616734e-03, 2.355350216633468e-01, 2.202834621030583e-01, -1.170657826679060e-03, 8.910426710116081e-01, 2.308413350854543e-01, 2.308413350854543e-01, 3.346736283413785e-03, 6.634299635642269e-03, 1.009229417271105e+01, -1.601361665634502e-05, 5.705685901610873e-03, 5.705685901610873e-03, -1.461302271968487e-06, -1.462381533080074e-06, -1.461404281468295e-06, -1.462243553819069e-06, -1.461866708552504e-06, -1.461866708552504e-06, -4.062540823945081e-05, -3.994014443412247e-05, -4.053588535937867e-05, -4.000312559984659e-05, -4.027485397514201e-05, -4.027485397514201e-05, -3.473379458229638e-03, -3.803149093136148e-03, -3.874238438527700e-03, -4.616771902355938e-03, -3.289343222688900e-03, -3.289343222688900e-03, 2.442354615288485e+00, 2.430422589010853e-01, 2.533998603181161e+00, -7.832055580469575e-05, 1.558640211741690e+00, 1.558640211741690e+00, -1.511414103750967e-05, -2.177177445659342e-05, -2.031908256148967e-05, 7.279999139286200e+00, -2.203995579406172e-05, -2.203995579391264e-05, -5.024095952001251e-03, -4.583881031958176e-03, -4.720500916121683e-03, -4.840073410394421e-03, -4.778527197047512e-03, -4.778527197047512e-03, -5.658951634007757e-03, -3.741914975421565e-03, -4.235966614633559e-03, -4.671923468356176e-03, -4.458448424293682e-03, -4.458448424293684e-03, -3.250018096707349e-03, 8.026803246021302e-02, 2.696250814539653e-02, -1.890619992658882e-03, 7.689110241424317e-03, 7.689110241424331e-03, -4.151456662809822e-03, 1.017506318359380e+01, 8.465320692939757e+00, -2.890428764045504e-03, 4.254838888884526e+00, 4.254838888884523e+00, 2.879543781317763e-02, -8.806612353631862e-07, -4.744640769639113e-06, 4.748718309949172e+00, -1.831844903815353e-05, -1.831844903792679e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
