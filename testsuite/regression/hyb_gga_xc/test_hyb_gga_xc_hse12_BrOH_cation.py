
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse12_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.444626202640930e+01, -1.444627934588780e+01, -1.444640526346070e+01, -1.444614658426817e+01, -1.444627516978372e+01, -1.444627516978372e+01, -2.448305951656234e+00, -2.448281141445546e+00, -2.447766460261169e+00, -2.449115694363131e+00, -2.448334006376847e+00, -2.448334006376847e+00, -5.262069165394418e-01, -5.260097335301186e-01, -5.219770984657562e-01, -5.255489143828113e-01, -5.245191054305965e-01, -5.245191054305965e-01, -1.709365491279120e-01, -1.721833077510948e-01, -6.029728134186472e-01, -1.441080806052546e-01, -1.636569904699526e-01, -1.636569904699524e-01, -1.009835638551328e-02, -1.063251441215831e-02, -5.346494870163556e-02, -5.827905884987091e-03, -8.130832794702062e-03, -8.130832794702062e-03, -3.527583893786392e+00, -3.527296046216077e+00, -3.527577340091697e+00, -3.527323074011402e+00, -3.527433926227081e+00, -3.527433926227081e+00, -1.497315284034369e+00, -1.504772514048266e+00, -1.496676674534745e+00, -1.503294160375698e+00, -1.501712896450341e+00, -1.501712896450341e+00, -4.550115866150480e-01, -4.859742240338500e-01, -4.260335002506996e-01, -4.365375763545902e-01, -4.609230846519199e-01, -4.609230846519200e-01, -1.119267212034413e-01, -1.793021268284891e-01, -1.055356914729225e-01, -1.331903889201913e+00, -1.241589045557767e-01, -1.241589045557767e-01, -4.500057543642688e-03, -5.697239452053988e-03, -4.363734076173287e-03, -7.777064203358466e-02, -5.480761577013590e-03, -5.480761577013596e-03, -4.551198562424967e-01, -4.514920114448116e-01, -4.526325834490240e-01, -4.536803376577095e-01, -4.531433347549804e-01, -4.531433347549804e-01, -4.449355963252986e-01, -3.967870518194455e-01, -4.075896801796293e-01, -4.195945891039916e-01, -4.131270937548508e-01, -4.131270937548508e-01, -5.066320845775959e-01, -2.121043573321139e-01, -2.398680237802994e-01, -2.931549325779644e-01, -2.641314079934947e-01, -2.641314079934947e-01, -3.689015117433018e-01, -5.149471919674248e-02, -6.622848118717541e-02, -2.813363285746077e-01, -9.279577885542031e-02, -9.279577885542034e-02, -1.420892589801970e-02, -1.523277766734307e-03, -3.203179290342625e-03, -8.854149956534270e-02, -5.033450562232561e-03, -5.033450562253968e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse12_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.719239900371639e+01, -1.719237977431699e+01, -1.719248742394877e+01, -1.719244435815390e+01, -1.719273794980377e+01, -1.719281051822611e+01, -1.719173545464493e+01, -1.719153798670958e+01, -1.719244904828464e+01, -1.719202546648225e+01, -1.719244904828464e+01, -1.719202546648225e+01, -2.853648475987633e+00, -2.853788511830851e+00, -2.853685067387740e+00, -2.853831282388672e+00, -2.854632637987323e+00, -2.854857781423688e+00, -2.853437357114670e+00, -2.853666501714089e+00, -2.853151154169590e+00, -2.854512768940565e+00, -2.853151154169590e+00, -2.854512768940565e+00, -6.143153468891179e-01, -6.157171126755878e-01, -6.134186341766784e-01, -6.150770968097200e-01, -5.979125368908967e-01, -5.967859122184184e-01, -6.015758802893387e-01, -6.018984786252801e-01, -6.096881277435962e-01, -5.924858160347689e-01, -6.096881277435962e-01, -5.924858160347689e-01, -1.791646977800442e-01, -1.817531411255607e-01, -1.817263866261073e-01, -1.853283170583429e-01, -6.971333026415231e-01, -7.151067431647609e-01, -1.528083656457498e-01, -1.537514745436222e-01, -1.667295197590189e-01, -1.409415077205960e-01, -1.667295197590187e-01, -1.409415077205959e-01, -1.301162256287157e-02, -1.382194195169476e-02, -1.363132724786122e-02, -1.459647636047976e-02, -6.582936661245851e-02, -6.810037361204269e-02, -7.832419504535233e-03, -7.702080605720864e-03, -1.161314970817605e-02, -6.615818766314629e-03, -1.161314970817533e-02, -6.615818766314627e-03, -4.372050254080234e+00, -4.371004398595509e+00, -4.374657620859706e+00, -4.373530565445496e+00, -4.372189185053604e+00, -4.371090603236341e+00, -4.374431644228234e+00, -4.373380202813572e+00, -4.373387439306109e+00, -4.372274889354262e+00, -4.373387439306109e+00, -4.372274889354262e+00, -1.626512119697660e+00, -1.626442288290397e+00, -1.637102791151644e+00, -1.636740780947029e+00, -1.619138665197034e+00, -1.620429575957199e+00, -1.628426199899971e+00, -1.629814481294966e+00, -1.637148638979793e+00, -1.633626881356856e+00, -1.637148638979793e+00, -1.633626881356856e+00, -5.654380905854681e-01, -5.645424266638294e-01, -6.315681841505211e-01, -6.320929945574230e-01, -5.177674040860716e-01, -5.316533066959227e-01, -5.593762256339616e-01, -5.704591725037691e-01, -5.860130070805746e-01, -5.658155834693698e-01, -5.860130070805749e-01, -5.658155834693702e-01, -1.262943633558841e-01, -1.267063128978624e-01, -1.851720548502561e-01, -1.854308687848739e-01, -1.180703039701824e-01, -1.217019139481233e-01, -1.738468123474473e+00, -1.737870211700579e+00, -1.364606744707119e-01, -1.351239851881031e-01, -1.364606744707119e-01, -1.351239851881031e-01, -5.877475535015221e-03, -6.107947733393508e-03, -7.536544666404969e-03, -7.650465491180331e-03, -5.637114379101922e-03, -5.969667634630868e-03, -9.038621075649185e-02, -9.090442706555198e-02, -5.757375314696625e-03, -7.904249498339103e-03, -5.757375314696634e-03, -7.904249498319400e-03, -5.903091317590730e-01, -5.918430187077228e-01, -5.859103782150143e-01, -5.875486111190968e-01, -5.878340899379664e-01, -5.894543283161082e-01, -5.891560917033609e-01, -5.907095738431336e-01, -5.885319459382458e-01, -5.901175045883916e-01, -5.885319459382458e-01, -5.901175045883916e-01, -5.757700064934274e-01, -5.769725240508210e-01, -4.718913118017088e-01, -4.731617694885307e-01, -4.993164493448526e-01, -5.010297715577182e-01, -5.331256710421534e-01, -5.344768642231178e-01, -5.156729005792453e-01, -5.170415051440298e-01, -5.156729005792453e-01, -5.170415051440298e-01, -6.577419004431216e-01, -6.590004723847736e-01, -2.170605019907190e-01, -2.175403506855828e-01, -2.614391445301381e-01, -2.634572930224872e-01, -3.521941726637967e-01, -3.532004448388146e-01, -3.101874573254078e-01, -3.100807266445412e-01, -3.101874573254076e-01, -3.100807266445411e-01, -4.396007412103752e-01, -4.413750044528607e-01, -6.521616854234284e-02, -6.552266836093040e-02, -7.814406399439439e-02, -7.965190010037239e-02, -3.438142834869866e-01, -3.467371430778005e-01, -1.048297837582879e-01, -1.067988986043785e-01, -1.048297837582879e-01, -1.067988986043784e-01, -1.855717788643493e-02, -1.922044854502011e-02, -2.028685109574824e-03, -2.033321452840549e-03, -4.127399678495293e-03, -4.389727455225032e-03, -1.011228991547693e-01, -1.022234767956145e-01, -5.453644927072510e-03, -7.245618813017631e-03, -5.453644930583984e-03, -7.245618813163600e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse12_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.055606006308848e-08, 3.855567579455844e-10, -1.055611710635935e-08, -1.055593868531680e-08, 3.855637563905792e-10, -1.055602795945507e-08, -1.055550121184171e-08, 3.855734091993355e-10, -1.055541872243363e-08, -1.055688557543631e-08, 3.854697494807899e-10, -1.055716852015123e-08, -1.055600738706172e-08, 3.855271085313426e-10, -1.055642029727912e-08, -1.055600738706172e-08, 3.855271085313426e-10, -1.055642029727912e-08, -1.360628081143596e-05, 2.158879157656427e-06, -1.361100338929939e-05, -1.360636647725486e-05, 2.159323527660124e-06, -1.361145075483683e-05, -1.361241031144298e-05, 2.169371669283230e-06, -1.361494788073920e-05, -1.359337917451597e-05, 2.149943255801801e-06, -1.359689311597411e-05, -1.361441989257357e-05, 2.159156568071321e-06, -1.360091935110156e-05, -1.361441989257357e-05, 2.159156568071321e-06, -1.360091935110156e-05, -6.903823643174429e-03, 3.586683876242116e-03, -7.027277405074124e-03, -6.880485801278228e-03, 3.559577090514688e-03, -7.033845489120177e-03, -6.710815202750473e-03, 2.876045381924161e-03, -6.494656396953692e-03, -6.409577159496095e-03, 2.810968523930000e-03, -6.483625424718841e-03, -7.498917335212305e-03, 2.852692094259074e-03, -5.613699615713173e-03, -7.498917335212305e-03, 2.852692094259074e-03, -5.613699615713173e-03, -7.847967761947616e-01, 3.108902575321890e-01, -7.196403233879181e-01, -7.764008844469429e-01, 3.280826843588528e-01, -6.922143431331398e-01, -4.102476770079731e-03, 1.940414170439823e-03, -3.964345466417641e-03, -1.025789497119701e+00, 2.258949661124237e-01, -9.928525627207352e-01, -7.146718200000698e-01, 1.882246441728870e-01, -1.488867916566165e+00, -7.146718200000691e-01, 1.882246441728873e-01, -1.488867916566170e+00, 4.235666361990832e-03, 8.471332723898200e-03, 4.235666361990832e-03, 4.982257697020214e-03, 9.964515393423459e-03, 4.982257697020214e-03, -1.737660028875103e+00, 5.126941006152715e-02, -2.338584442667837e+00, 1.504341724364139e-03, 3.008683449168684e-03, 1.504341724364139e-03, 2.207283134900671e-03, 4.414566270491809e-03, 2.207283134900671e-03, 2.207283135350878e-03, 4.414566270088269e-03, 2.207283135350878e-03, -2.768060541386238e-06, 5.666948009101149e-07, -2.771017849723421e-06, -2.763104293094788e-06, 5.704413223836728e-07, -2.766165278217823e-06, -2.767806886812795e-06, 5.668443577206054e-07, -2.770835102456932e-06, -2.763508797224583e-06, 5.701514261968389e-07, -2.766475614969289e-06, -2.765540433165474e-06, 5.686004611431787e-07, -2.768574625523561e-06, -2.765540433165474e-06, 5.686004611431787e-07, -2.768574625523561e-06, -8.888501742728957e-05, 1.221811741084532e-05, -8.890013021477391e-05, -8.763778199267876e-05, 1.218856108878283e-05, -8.770416882649417e-05, -8.761383990138405e-05, 1.161795009824474e-05, -8.809536997163353e-05, -8.652423465736495e-05, 1.159619612758267e-05, -8.696691108427990e-05, -8.923974644792881e-05, 1.250231835492394e-05, -8.829885353015110e-05, -8.923974644792881e-05, 1.250231835492394e-05, -8.829885353015110e-05, -1.269874899198655e-02, 1.180452397706796e-02, -1.290532134712705e-02, -5.614615596439091e-03, 1.489938286408802e-02, -5.558608695844859e-03, -1.895270532377839e-02, 1.535577972946644e-02, -1.579526015116359e-02, -1.195986664604240e-02, 2.278859644535717e-02, -9.116263373777585e-03, -1.023298443262778e-02, 1.179162458306085e-02, -1.382836208943183e-02, -1.023298443262772e-02, 1.179162458306085e-02, -1.382836208943183e-02, -1.251854343894599e+00, 1.261488607621168e-01, -1.264286830271443e+00, -4.891218157211462e-01, 1.139695105238702e-01, -4.848298202949961e-01, -1.487336447080955e+00, 1.279112469154852e-01, -1.397795729725292e+00, -9.408825252425949e-05, 1.207887057881010e-04, -9.434366098772017e-05, -1.240566806923527e+00, 2.409472748596690e-01, -1.506083139371222e+00, -1.240566806923527e+00, 2.409472748596690e-01, -1.506083139371222e+00, 1.466773397935566e-03, 2.933546798259037e-03, 1.466773397935566e-03, 1.849572050554419e-03, 3.699144102256803e-03, 1.849572050554419e-03, 1.842554218706263e-02, 3.685108437354808e-02, 1.842554218706263e-02, -2.997402682124442e+00, 1.250822448857004e-01, -2.894448697455851e+00, 7.051803231269947e-03, 1.410360645889085e-02, 7.051803231269947e-03, 7.051803234557417e-03, 1.410360646869916e-02, 7.051803234557417e-03, -4.126418368516054e-03, 2.514346072918196e-02, -3.842857554431388e-03, -7.577652739797922e-03, 2.157065992117518e-02, -7.261244564159205e-03, -6.484994749285619e-03, 2.270457728491302e-02, -6.174202396804518e-03, -5.480787756316940e-03, 2.373865089872573e-02, -5.186579909795635e-03, -5.994097381925668e-03, 2.321019190891285e-02, -5.691409006086844e-03, -5.994097381925668e-03, 2.321019190891285e-02, -5.691409006086844e-03, -3.210946344787361e-03, 2.977269840520045e-02, -2.966695651279973e-03, -2.291930551351890e-02, 1.592277215307748e-02, -2.260910714573607e-02, -2.117760351227042e-02, 1.838749842245184e-02, -2.078074020996426e-02, -1.641497435738348e-02, 2.169730037966074e-02, -1.603441336947587e-02, -1.925397090285111e-02, 1.995497716545398e-02, -1.884857153514871e-02, -1.925397090285111e-02, 1.995497716545398e-02, -1.884857153514871e-02, -4.998071961316395e-03, 1.183264719377924e-02, -4.889106851724547e-03, -2.898174023477395e-01, 8.498631964250428e-02, -2.861611476864371e-01, -1.703509957348044e-01, 7.821972418059023e-02, -1.648471096833009e-01, -7.927888041437879e-02, 6.964082434152352e-02, -7.758785978000311e-02, -1.043706199376727e-01, 7.796350422599263e-02, -1.052710422296196e-01, -1.043706199376729e-01, 7.796350422599266e-02, -1.052710422296197e-01, -3.102783386184464e-02, 2.285950305464996e-02, -3.046451679833064e-02, -1.219285847386459e+00, 4.213028450134424e-02, -1.280750048415058e+00, -3.146242861060560e+00, 6.458066222247318e-02, -3.195580614403305e+00, -1.057380926333082e-01, 1.099497136873529e-01, -9.906969334874294e-02, -2.298249986809165e+00, 2.182010199987041e-01, -2.523474480825449e+00, -2.298249986809179e+00, 2.182010199987039e-01, -2.523474480825445e+00, 5.281295584737279e-03, 1.056259116938041e-02, 5.281295584737279e-03, 2.005765736367150e-03, 4.011531506685853e-03, 2.005765736367150e-03, 2.510381951246900e-03, 5.020763908060611e-03, 2.510381951246900e-03, -2.629675124031504e+00, 2.002688123716920e-01, -2.545375691068254e+00, 9.000943715250370e-03, 1.800188742308661e-02, 9.000943715250370e-03, 9.000943718924263e-03, 1.800188743452388e-02, 9.000943718924263e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
