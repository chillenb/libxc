
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_qtp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.083255450386722e+01, -2.083258205479703e+01, -2.083277269236629e+01, -2.083236138524021e+01, -2.083256721334349e+01, -2.083256721334349e+01, -3.258251682418310e+00, -3.258219932647807e+00, -3.257571415636682e+00, -3.259361720160683e+00, -3.258297971219700e+00, -3.258297971219700e+00, -4.687676423061887e-01, -4.682895592453840e-01, -4.569099905877114e-01, -4.621051116164538e-01, -4.606780671594796e-01, -4.606780671594796e-01, -3.320804615058275e-02, -3.545039715689384e-02, -5.772037844330861e-01, -5.302436288807636e-03, -2.692118869723098e-02, -2.692118869723093e-02, -1.037773473842610e-03, -1.088701633895303e-03, 1.820184415852540e-04, -6.088167807894239e-04, -4.017169584861206e-04, -4.017169584861207e-04, -4.840057245832178e+00, -4.839512175513549e+00, -4.840042638500648e+00, -4.839561290889827e+00, -4.839775274688675e+00, -4.839775274688675e+00, -1.850971777648614e+00, -1.862289599140456e+00, -1.848931539971774e+00, -1.858953335266387e+00, -1.858206074176925e+00, -1.858206074176925e+00, -3.779761284386315e-01, -4.151664228082884e-01, -3.386032282445774e-01, -3.509424017853324e-01, -3.863107895546372e-01, -3.863107895546373e-01, 1.488213196557234e-02, -2.297021561081164e-02, 1.494049822242378e-02, -1.614267298803614e+00, 4.117783449792904e-03, 4.117783449792904e-03, -4.697156640870058e-04, -5.954006152621159e-04, -4.533550217090108e-04, 9.168791979865672e-03, -4.415673623517517e-04, -4.415673623517517e-04, -3.694328540271751e-01, -3.688519222927921e-01, -3.690901608722409e-01, -3.692567977853444e-01, -3.691760880108951e-01, -3.691760880108951e-01, -3.545647381606121e-01, -2.953037030664555e-01, -3.136920400360013e-01, -3.307157553866835e-01, -3.221197155622839e-01, -3.221197155622839e-01, -4.436458224992442e-01, -5.496167751122444e-02, -9.196840007903143e-02, -1.654584381025812e-01, -1.263758549096697e-01, -1.263758549096697e-01, -2.590758563841084e-01, -2.585421875924754e-04, 6.444215257181383e-03, -1.553839289238883e-01, 9.312991295811288e-03, 9.312991295811217e-03, -1.461962063124217e-03, -1.605901945211644e-04, -3.330669665456450e-04, 9.358444648357691e-03, -4.262945789237162e-04, -4.262945789237158e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_qtp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.505102686487023e+01, -2.505099679236851e+01, -2.505113549713895e+01, -2.505107598593981e+01, -2.505146388015001e+01, -2.505155031666778e+01, -2.505023377665293e+01, -2.504998663477506e+01, -2.505108973479647e+01, -2.505059914275666e+01, -2.505108973479647e+01, -2.505059914275666e+01, -3.908520276044412e+00, -3.908590281426406e+00, -3.908552080853829e+00, -3.908622443154448e+00, -3.909327727235520e+00, -3.909525778243156e+00, -3.908644377059435e+00, -3.908833080438226e+00, -3.907837790961166e+00, -3.909544853892924e+00, -3.907837790961166e+00, -3.909544853892924e+00, -6.348437628134166e-01, -6.358994796950762e-01, -6.340183073726505e-01, -6.352897261881020e-01, -6.191258844838009e-01, -6.182720573468226e-01, -6.244718616711381e-01, -6.247140584151188e-01, -6.303562980722131e-01, -6.237832350234546e-01, -6.303562980722131e-01, -6.237832350234546e-01, -1.015441134366677e-01, -1.007878173087272e-01, -1.025823578115512e-01, -1.019351800227142e-01, -7.531380054992791e-01, -7.728245642873673e-01, -7.802472430622275e-02, -7.796563994868255e-02, -7.051163442710486e-02, -1.033983607246003e-01, -7.051163442710477e-02, -1.033983607246004e-01, -1.584184379002387e-03, -1.205016987252189e-03, -1.693581239652006e-03, -1.242246922928772e-03, -6.414647030988133e-03, -5.793721178423345e-03, -7.795376887658888e-04, -8.408857611267886e-04, -2.073744824051323e-04, -2.307194107396983e-03, -2.073744824051323e-04, -2.307194107396983e-03, -6.036495032591112e+00, -6.035007283215251e+00, -6.038864228866501e+00, -6.037299997791533e+00, -6.036626177757805e+00, -6.035087915717640e+00, -6.038662067576171e+00, -6.037167575579306e+00, -6.037706993740754e+00, -6.036159155747908e+00, -6.037706993740754e+00, -6.036159155747908e+00, -2.095974649864258e+00, -2.095876658704295e+00, -2.112868610411384e+00, -2.112336482412820e+00, -2.081367976094793e+00, -2.084392369544550e+00, -2.095887919687952e+00, -2.099132373812085e+00, -2.115756592638521e+00, -2.107402801672466e+00, -2.115756592638521e+00, -2.107402801672466e+00, -5.349970511723160e-01, -5.335896123451878e-01, -5.952980217474045e-01, -5.955877346570518e-01, -4.756850272213575e-01, -4.915941951164406e-01, -4.993535230260110e-01, -5.162046812974754e-01, -5.583120631073467e-01, -5.313230135898139e-01, -5.583120631073468e-01, -5.313230135898140e-01, -5.613075423927582e-02, -5.558594490138846e-02, -1.162347590601274e-01, -1.161946944261683e-01, -4.957066361299832e-02, -4.912215385978549e-02, -2.147690125622483e+00, -2.146751818448272e+00, -6.424736248412287e-02, -5.812159073580529e-02, -6.424736248412287e-02, -5.812159073580529e-02, -6.823413484953308e-04, -5.736806814833494e-04, -8.190677436190172e-04, -7.654353055218164e-04, -6.882319646026578e-04, -5.315227747093323e-04, -2.196681796683414e-02, -2.220577180780894e-02, -1.288740636972936e-03, -3.164612708098162e-04, -1.288740636972936e-03, -3.164612708098162e-04, -5.386266780176265e-01, -5.407931662041725e-01, -5.332982750606843e-01, -5.354268748913725e-01, -5.350849721433325e-01, -5.372348784994962e-01, -5.366334557229302e-01, -5.387796887902974e-01, -5.358506622427289e-01, -5.379987961660695e-01, -5.358506622427289e-01, -5.379987961660695e-01, -5.201030766150422e-01, -5.218908560125251e-01, -4.289153945443925e-01, -4.303493971141226e-01, -4.516507207852861e-01, -4.533551392938353e-01, -4.766539977915776e-01, -4.782795354945920e-01, -4.635683946501463e-01, -4.651884290977534e-01, -4.635683946501463e-01, -4.651884290977534e-01, -6.315652063645268e-01, -6.326442789257003e-01, -1.546958799606291e-01, -1.547351997854352e-01, -1.909470024102376e-01, -1.911311924401139e-01, -2.656128208349022e-01, -2.667069786549786e-01, -2.240225039633250e-01, -2.236998595777486e-01, -2.240225039633250e-01, -2.236998595777485e-01, -3.841117630299380e-01, -3.860068999474505e-01, -5.545270908918353e-03, -5.461432773478197e-03, -1.278363699998388e-02, -1.274368961527957e-02, -2.465032348514849e-01, -2.493404640211702e-01, -3.555661836924396e-02, -3.318146155584230e-02, -3.555661836924332e-02, -3.318146155584225e-02, -2.101559296669779e-03, -1.790399595581563e-03, -2.150525089891839e-04, -2.128529078773362e-04, -5.109987781473886e-04, -3.871472880482700e-04, -3.085593243716425e-02, -3.088176873458202e-02, -1.140733206181608e-03, -3.226035792773083e-04, -1.140733206181607e-03, -3.226035792773081e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_qtp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.419409647777221e-08, 1.463652377038497e-11, -1.419417652168790e-08, -1.419401847601534e-08, 1.463631512328463e-11, -1.419411923876832e-08, -1.419359113616539e-08, 1.463532316351641e-11, -1.419355997278486e-08, -1.419448382082402e-08, 1.463842899785011e-11, -1.419468806992097e-08, -1.419406278143332e-08, 1.463681083685537e-11, -1.419410496892306e-08, -1.419406278143332e-08, 1.463681083685537e-11, -1.419410496892306e-08, -1.651397398396980e-05, 1.902747638536065e-07, -1.652026813013417e-05, -1.651446973774387e-05, 1.902725761814505e-07, -1.652122691388841e-05, -1.653106044080567e-05, 1.901971754504621e-07, -1.653518538325622e-05, -1.649193369208648e-05, 1.901358235030523e-07, -1.649716270352665e-05, -1.652135922267840e-05, 1.902491360705296e-07, -1.651156561452995e-05, -1.652135922267840e-05, 1.902491360705296e-07, -1.651156561452995e-05, -4.473841633237706e-03, 1.144533678933034e-03, -4.570757860184695e-03, -4.452600000153307e-03, 1.151156568500561e-03, -4.571718420567483e-03, -4.304751194642228e-03, 1.320750241138922e-03, -4.128110801847376e-03, -4.126846813324645e-03, 1.265386257803329e-03, -4.183127372610632e-03, -4.975283631159478e-03, 1.376562597771172e-03, -3.236080922682026e-03, -4.975283631159478e-03, 1.376562597771172e-03, -3.236080922682026e-03, 4.088290704577677e-01, 6.012876550391961e-01, 2.923282980320059e-01, 3.910480769475935e-01, 5.680272535784819e-01, 2.647809743555495e-01, -2.958518103132942e-03, 5.322727974273029e-04, -3.087701779252410e-03, 1.065234263925071e+00, 1.675901373768304e+00, 9.714342060519927e-01, -8.117961496512985e-02, 2.382014110698246e+00, 2.081240920877102e+00, -8.117961496512928e-02, 2.382014110698246e+00, 2.081240920877109e+00, -1.363878083071703e-05, 1.111914508308031e-07, -1.598717880569469e-05, -1.588055850692978e-05, 4.562559950974850e-07, -1.912253411122923e-05, 1.058160323690286e+01, 1.838627425311693e+01, 9.308851064071147e+00, -3.190253705363593e-06, 4.136895542502456e-17, -2.987866171930686e-06, -1.002079971448499e-05, 1.070835888305008e-12, -4.038247610245476e-06, -1.002079971455155e-05, 1.070835888305008e-12, -4.038247610163167e-06, -3.976867978973632e-06, 2.233703107768369e-08, -3.980159341828062e-06, -3.979937860717098e-06, 2.231537777319893e-08, -3.983124767235132e-06, -3.976998003999535e-06, 2.233595490630417e-08, -3.980229489038361e-06, -3.979628932834635e-06, 2.231683364972891e-08, -3.982927332327507e-06, -3.978472176096709e-06, 2.232609670798167e-08, -3.981652700902928e-06, -3.978472176096709e-06, 2.232609670798167e-08, -3.981652700902928e-06, -1.086727304186325e-04, 4.104557134069705e-06, -1.086859632970479e-04, -1.067493739570722e-04, 3.949027730077658e-06, -1.068110906932857e-04, -1.084438675391641e-04, 4.223201907834492e-06, -1.086806034205816e-04, -1.067880068789022e-04, 4.080707689470805e-06, -1.069794519993366e-04, -1.078220664264666e-04, 3.966397450084659e-06, -1.075431604626747e-04, -1.078220664264666e-04, 3.966397450084659e-06, -1.075431604626747e-04, -8.311474396857274e-03, 2.253646609880290e-03, -8.327569123681870e-03, -8.795315669303905e-03, 1.482953633834817e-03, -8.826189973654400e-03, -9.466011898871959e-03, 3.393155540240489e-03, -9.866071968437914e-03, -1.196082535125640e-02, 2.786872153422916e-03, -1.159060736047710e-02, -8.212171406655994e-03, 2.171399762139616e-03, -8.347474232656136e-03, -8.212171406655994e-03, 2.171399762139616e-03, -8.347474232656135e-03, 3.243321870446587e+00, 5.364331359216309e+00, 3.088234431092550e+00, 3.667651484950686e-01, 5.928062603673171e-01, 3.517546515701024e-01, 4.380224215407295e+00, 6.670630325612285e+00, 3.393917681885638e+00, -2.059132675973189e-04, 4.550774239056777e-06, -2.062540529021701e-04, 2.333322478223376e+00, 3.362374819306393e+00, 1.667335670602273e+00, 2.333322478223376e+00, 3.362374819306393e+00, 1.667335670602273e+00, -1.818485925569812e-06, 5.421496698436063e-24, -1.830613147847963e-06, -3.269309772711683e-06, 1.228758886113335e-17, -3.224986267677501e-06, -4.868761171410716e-06, 5.656440620065503e-25, -6.134298421834213e-06, 8.562810364931300e+00, 1.504669301565768e+01, 8.376575541427206e+00, -3.186854509643374e-06, 9.610322787727072e-20, -7.540813118922078e-06, -3.186854509869298e-06, 9.610322787727070e-20, -7.540813118702900e-06, -1.229045816063715e-02, 2.199677179191681e-03, -1.225332728052627e-02, -1.124892527746208e-02, 2.264286130145305e-03, -1.123218286121930e-02, -1.156542822067606e-02, 2.241303100651475e-03, -1.154458516514402e-02, -1.186559564808854e-02, 2.222568983976134e-03, -1.183396745967860e-02, -1.171101889132890e-02, 2.231922961512953e-03, -1.168481792098438e-02, -1.171101889132890e-02, 2.231922961512953e-03, -1.168481792098438e-02, -1.381180091628085e-02, 2.525278278664052e-03, -1.375817647712772e-02, -9.502926989757573e-03, 5.397863529116129e-03, -9.657851352623436e-03, -1.052167135096766e-02, 4.298036410666330e-03, -1.063361162207690e-02, -1.156198311226135e-02, 3.458400931093935e-03, -1.158169745687526e-02, -1.105915170298698e-02, 3.860241852276062e-03, -1.109898685711918e-02, -1.105915170298698e-02, 3.860241852276062e-03, -1.109898685711918e-02, -7.556245630575853e-03, 1.166454564355177e-03, -7.583495132348027e-03, 1.289797807362177e-01, 2.273047300256539e-01, 1.209618199976178e-01, 4.449552013546212e-02, 1.027440095908986e-01, 3.719956014609647e-02, -8.859450416131745e-03, 2.883676467546989e-02, -9.984828098818479e-03, 7.380055735474018e-03, 5.500747727544229e-02, 7.363729837169375e-03, 7.380055735474088e-03, 5.500747727544231e-02, 7.363729837169319e-03, -1.062285560050228e-02, 8.100714365057125e-03, -1.104362522766838e-02, 9.620677643156384e+00, 1.766533536733120e+01, 9.473895500095709e+00, 1.088325023103274e+01, 1.878803243082290e+01, 9.863168768326917e+00, -1.096852800433703e-02, 3.428914672188251e-02, -1.457068317815350e-02, 6.217887308958932e+00, 9.701438036301546e+00, 4.909148803071288e+00, 6.217887308958844e+00, 9.701438036301546e+00, 4.909148803071285e+00, 1.451244030858548e-04, 3.417478728614279e-04, 1.391973263022232e-04, -2.021324037961745e-07, 2.850114531961813e-85, -3.045646116598562e-07, -1.060811640868346e-06, 1.662312648545182e-36, -1.316251756019064e-06, 6.522025330508654e+00, 1.102889579754806e+01, 6.098795252769683e+00, -4.521243447954059e-06, 8.178814636871498e-22, -6.091863167622108e-06, -4.521243448093563e-06, 8.178814636871070e-22, -6.091863167912633e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
