
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.019759937590809e+01, -2.019763878126490e+01, -2.019785997714076e+01, -2.019727275990455e+01, -2.019757390490668e+01, -2.019757390490668e+01, -3.089295343835783e+00, -3.089280637121920e+00, -3.089023556682729e+00, -3.090110133845114e+00, -3.089358828848384e+00, -3.089358828848384e+00, -4.106188828398874e-01, -4.100527587104071e-01, -3.973924316231041e-01, -4.021861191461629e-01, -4.009916268792729e-01, -4.009916268792729e-01, -3.167254916500671e-02, -3.311595037209238e-02, -5.117383689462532e-01, -1.491317621102956e-02, -2.075896882375330e-02, -2.075896882375323e-02, -9.600993894056262e-07, -1.121490189408027e-06, -2.113224336945276e-04, -1.835437007034709e-07, -3.655599809157877e-07, -3.655599809157868e-07, -4.682557433237458e+00, -4.682780084921720e+00, -4.682574310507470e+00, -4.682770746780886e+00, -4.682666428107551e+00, -4.682666428107551e+00, -1.697554209808880e+00, -1.708892062801909e+00, -1.694143433175383e+00, -1.704118484439334e+00, -1.705517626771121e+00, -1.705517626771121e+00, -3.355864290520194e-01, -3.836755330651505e-01, -2.978811364483668e-01, -3.205009223730040e-01, -3.440616508038387e-01, -3.440616508038387e-01, -4.975598689888429e-03, -3.024819355443099e-02, -3.892869714719182e-03, -1.558539216501455e+00, -8.351882963982636e-03, -8.351882963982636e-03, -8.424899401958453e-08, -1.715784769955457e-07, -7.785875042022475e-08, -1.067520832925698e-03, -1.351531169710898e-07, -1.351531169710896e-07, -3.450891269772214e-01, -3.401014302399005e-01, -3.418021087999146e-01, -3.432488450095304e-01, -3.425199963840791e-01, -3.425199963840791e-01, -3.323150603578175e-01, -2.541371632192521e-01, -2.747322465647993e-01, -2.964900758922120e-01, -2.852293205244409e-01, -2.852293205244409e-01, -4.100680855707653e-01, -5.256589890089076e-02, -7.887542717966359e-02, -1.404943023782466e-01, -1.061241109743039e-01, -1.061241109743039e-01, -2.219299310422923e-01, -1.823258022823366e-04, -5.017658458626981e-04, -1.343805346799453e-01, -2.455607225359982e-03, -2.455607225359851e-03, -2.711843750217045e-06, -3.268593214882925e-09, -3.028957237297070e-08, -1.988429337296514e-03, -1.072219007476982e-07, -1.072219007501896e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.543258153481156e+01, -2.543267473124908e+01, -2.543307629571531e+01, -2.543168998071540e+01, -2.543241819668070e+01, -2.543241819668070e+01, -3.924044687412338e+00, -3.924088006328211e+00, -3.925190650023454e+00, -3.924057331711770e+00, -3.924196099256480e+00, -3.924196099256480e+00, -5.911623730337633e-01, -5.898403413962323e-01, -5.560753251531007e-01, -5.626742330568613e-01, -5.618657797420791e-01, -5.618657797420791e-01, -7.004456907055223e-02, -7.362750075175828e-02, -7.214095366734450e-01, -3.254781711357221e-02, -4.637998460952461e-02, -4.637998460952443e-02, -1.971814519002201e-06, -2.311912529709274e-06, -5.008254018935138e-04, -3.707950788561468e-07, -7.447229991043599e-07, -7.447229991036659e-07, -6.102751456210959e+00, -6.105123396966130e+00, -6.102859260090232e+00, -6.104953255073884e+00, -6.103954602688631e+00, -6.103954602688631e+00, -2.006237467144409e+00, -2.025881555869691e+00, -1.986464509916436e+00, -2.003770282488784e+00, -2.026738408990346e+00, -2.026738408990346e+00, -5.114724873027879e-01, -5.745006351340090e-01, -4.598298951829360e-01, -4.880144407792787e-01, -5.234932780995949e-01, -5.234932780995949e-01, -1.110058728620421e-02, -5.515046615294845e-02, -8.964692496910981e-03, -2.149316429521955e+00, -1.954133991548522e-02, -1.954133991548522e-02, -1.699499776342551e-07, -3.470820251841558e-07, -1.627303915096902e-07, -2.718527162993732e-03, -2.781172599875523e-07, -2.781172599815294e-07, -5.151629498618534e-01, -5.132236899221926e-01, -5.140769373564825e-01, -5.146438665354939e-01, -5.143757911452959e-01, -5.143757911452959e-01, -4.951636227392208e-01, -3.955090679923355e-01, -4.280789041761209e-01, -4.579722354279631e-01, -4.431344202510412e-01, -4.431344202510412e-01, -6.116644309545815e-01, -9.213939114579325e-02, -1.416784487814917e-01, -2.412903395464388e-01, -1.892174096041788e-01, -1.892174096041788e-01, -3.528702511187014e-01, -4.243963397372058e-04, -1.216444813899625e-03, -2.315202628738544e-01, -6.397198470679350e-03, -6.397198470679354e-03, -5.623931200507680e-06, -6.574230775555009e-09, -6.119558446918325e-08, -5.195271949034743e-03, -2.213047870207767e-07, -2.213047870231981e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.024980274236438e-09, -4.024939961160320e-09, -4.024740562828822e-09, -4.025340754309105e-09, -4.025029130618114e-09, -4.025029130618114e-09, -4.592207320741628e-06, -4.592056140276634e-06, -4.588123729847685e-06, -4.591688607791841e-06, -4.591613835362085e-06, -4.591613835362085e-06, -8.102344800793571e-04, -8.278021535457155e-04, -1.277748107553907e-03, -1.242080551788778e-03, -1.234805122826766e-03, -1.234805122826766e-03, 1.233214101412358e-01, 1.341322422222366e-01, -5.908854083336529e-04, 7.177659513999674e-02, 1.090831850193813e-01, 1.090831850193808e-01, 8.955086968543578e-03, 1.054965759070230e-02, 5.023287640694551e-02, 3.165617774557370e-03, 6.615552447279592e-03, 6.615552447962493e-03, -9.238764887543792e-07, -9.217465092589779e-07, -9.237835777191623e-07, -9.219034691065830e-07, -9.227966955198866e-07, -9.227966955198866e-07, -4.100738115626007e-05, -3.994393888833919e-05, -4.173183925884453e-05, -4.078090176816314e-05, -4.006148731078558e-05, -4.006148731078558e-05, 1.119100947583444e-03, 2.617569668707365e-03, 1.654799383089509e-03, 4.321086014080364e-03, 1.246604234445070e-03, 1.246604234445070e-03, 4.012985486725215e-02, 6.907854351617670e-06, 5.233006297757216e-02, -8.965638939939090e-06, 1.019580445609953e-01, 1.019580445609953e-01, 3.092171663358183e-03, 3.891727075803833e-03, 3.893545390700767e-02, 9.736332754763045e-02, 1.694482038723415e-02, 1.694482037846576e-02, 5.144993536069899e-03, 4.152569358824879e-03, 4.477409782374609e-03, 4.765287151001751e-03, 4.619113435969416e-03, 4.619113435969416e-03, 6.288079976238258e-03, 7.567195466742175e-04, 2.179031984998080e-03, 3.676924181567931e-03, 2.923446602257917e-03, 2.923446602257917e-03, 1.930022593839335e-03, -3.538439975936183e-04, 1.153483530308558e-02, 1.569385571175649e-02, 1.694149241513106e-02, 1.694149241513107e-02, 2.185304493237587e-03, 4.139303696788819e-02, 5.643576845966563e-02, 2.967177550227202e-02, 1.468510716714770e-01, 1.468510716714790e-01, 1.111671506238135e-02, 4.220044378076214e-03, 5.309571812821997e-03, 1.407234839988185e-01, 2.110056188967754e-02, 2.110056188801797e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
