
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_v_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.733161105367166e+01, -1.733163396133452e+01, -1.733179179229472e+01, -1.733144983027909e+01, -1.733162104373941e+01, -1.733162104373941e+01, -2.809057498308842e+00, -2.809027070103366e+00, -2.808395407851848e+00, -2.810045058074599e+00, -2.809090895741763e+00, -2.809090895741763e+00, -4.805107600843008e-01, -4.803682679150676e-01, -4.790073002333321e-01, -4.831254654959459e-01, -4.816430917763233e-01, -4.816430917763233e-01, -7.586255307018462e-02, -7.736555073041143e-02, -5.719443638976928e-01, -4.784590636337329e-02, -5.847251783613512e-02, -5.847251783613511e-02, 4.937364393571008e-04, 5.180446159248611e-04, 3.217125837467409e-04, 2.874814236512819e-04, 3.614506081231358e-04, 3.614506081231364e-04, -4.120182720057750e+00, -4.119846074091933e+00, -4.120175315094766e+00, -4.119877971523944e+00, -4.120007348875591e+00, -4.120007348875591e+00, -1.681233776693435e+00, -1.688635220656532e+00, -1.684808715356942e+00, -1.691244217726646e+00, -1.683705383632329e+00, -1.683705383632329e+00, -3.928370784292879e-01, -4.247970240411075e-01, -3.586833981548465e-01, -3.676064031290953e-01, -3.990903705072795e-01, -3.990903705072795e-01, -2.129416009198863e-02, -8.206604622066643e-02, -1.725608290481812e-02, -1.443813756574201e+00, -3.093884244504968e-02, -3.093884244504968e-02, 2.204058359461970e-04, 2.808882109203988e-04, 2.128797728734689e-04, -4.678674167530040e-03, 2.579702662834236e-04, 2.579702662834234e-04, -3.866672059921531e-01, -3.841856058292515e-01, -3.848899792629227e-01, -3.855893331356953e-01, -3.852232661661563e-01, -3.852232661661563e-01, -3.745180224655096e-01, -3.258355698110924e-01, -3.373205874174388e-01, -3.499036693996498e-01, -3.432140606050504e-01, -3.432140606050504e-01, -4.494883865447529e-01, -1.184960573224983e-01, -1.499547119783005e-01, -2.060993431873298e-01, -1.754791536695509e-01, -1.754791536695509e-01, -2.931410186504385e-01, 5.036774139542655e-04, -1.495379014164457e-03, -1.921978003527966e-01, -1.099269788181126e-02, -1.099269788181126e-02, 6.763797753468605e-04, 7.072198251011144e-05, 1.545348617056647e-04, -9.009082501377131e-03, 2.382070412060809e-04, 2.382070412060812e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_v_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.082857325729635e+01, -2.082867009096432e+01, -2.082905630313009e+01, -2.082761649999578e+01, -2.082837723577997e+01, -2.082837723577997e+01, -3.296221605420877e+00, -3.296285993342372e+00, -3.297855039993263e+00, -3.295757826966470e+00, -3.296379032514935e+00, -3.296379032514935e+00, -5.670206737315985e-01, -5.655405240490948e-01, -5.276832268589412e-01, -5.335122905687977e-01, -5.331553656504926e-01, -5.331553656504926e-01, -9.774556930132867e-02, -1.002234888607604e-01, -6.780469271706918e-01, -6.634640658204284e-02, -7.760412079469968e-02, -7.760412079469969e-02, 6.429395643602119e-04, 6.719161742209954e-04, -1.640584162427409e-03, 3.834060941895809e-04, 4.781586760340664e-04, 4.781586760340703e-04, -5.149404752671410e+00, -5.152089856572696e+00, -5.149523813234111e+00, -5.151894369369004e+00, -5.150768833190392e+00, -5.150768833190392e+00, -1.630558362845421e+00, -1.650007936493699e+00, -1.604757752033822e+00, -1.621926042695728e+00, -1.653820074339373e+00, -1.653820074339373e+00, -5.158594235822206e-01, -5.878669092624402e-01, -4.691177649854239e-01, -5.096615269850583e-01, -5.281562979548378e-01, -5.281562979548378e-01, -3.753907679923969e-02, -9.725330670420608e-02, -3.210112792335727e-02, -1.911179790958763e+00, -4.873812322057318e-02, -4.873812322057318e-02, 2.954815647077074e-04, 3.746958062609371e-04, 2.844037862524170e-04, -1.215004370855937e-02, 3.438430012320919e-04, 3.438430012320916e-04, -5.421336946072323e-01, -5.351123810047870e-01, -5.377836581891245e-01, -5.398746397520894e-01, -5.388472045918007e-01, -5.388472045918007e-01, -5.256012018091625e-01, -4.038291748438161e-01, -4.402904809551029e-01, -4.758288744477830e-01, -4.579428327126210e-01, -4.579428327126210e-01, -6.190085982930749e-01, -1.309216084341341e-01, -1.699642123242604e-01, -2.656803644688363e-01, -2.128199103074311e-01, -2.128199103074310e-01, -3.666052841185256e-01, -1.160830765137260e-03, -5.763205084998465e-03, -2.612303884809508e-01, -2.290785126500883e-02, -2.290785126500881e-02, 8.556152065028538e-04, 9.562192132233788e-05, 2.080169037950428e-04, -1.974629229866102e-02, 3.179264695173605e-04, 3.179264695173616e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_v_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.817190575875858e-09, -5.817113708459338e-09, -5.816771928010692e-09, -5.817915596397690e-09, -5.817316317836429e-09, -5.817316317836429e-09, -7.668020205846346e-06, -7.667801167527751e-06, -7.661999785531472e-06, -7.666414872742286e-06, -7.667039044575420e-06, -7.667039044575420e-06, -3.838920831001857e-03, -3.861574021026154e-03, -4.420534492381426e-03, -4.288396130959453e-03, -4.310869405679523e-03, -4.310869405679523e-03, -1.927456039970543e-01, -1.870677500449360e-01, -2.199552621921911e-03, -2.311818135985398e-01, -2.307746524287304e-01, -2.307746524287304e-01, 1.322436578489499e+00, 1.388673940519495e+00, 4.512956371675862e-01, 1.267541419632345e+00, 1.578839128013349e+00, 1.578839128013006e+00, -1.491129431270629e-06, -1.488868168147788e-06, -1.491027046708146e-06, -1.489030848825801e-06, -1.489982888463703e-06, -1.489982888463703e-06, -7.541963464497449e-05, -7.332533392479499e-05, -7.700635389118586e-05, -7.512122189301097e-05, -7.349402055211892e-05, -7.349402055211892e-05, -5.101852999953160e-03, -1.785048989848620e-03, -6.804078597106666e-03, -3.227760481370839e-03, -4.669092028351725e-03, -4.669092028351725e-03, -1.035573239037619e-01, -1.792309553163327e-01, -6.179320172995528e-02, -5.761085282251825e-05, -1.926208452182718e-01, -1.926208452182718e-01, 1.702559223282821e+00, 1.494523258777137e+00, 9.572558771658361e+00, 2.434739992895301e-01, 4.396063649203971e+00, 4.396063649205223e+00, 1.683874546650336e-03, -1.872830938014641e-03, -1.006413426235969e-03, -3.452358131322927e-05, -5.565715018846698e-04, -5.565715018846698e-04, 4.666759812330399e-03, -1.069926147315476e-02, -8.197031616981435e-03, -5.652742520922492e-03, -6.976439280948557e-03, -6.976439280948557e-03, -1.787678526150439e-03, -1.221664450962925e-01, -8.017311751438021e-02, -3.137328507606382e-02, -5.247033340280044e-02, -5.247033340280049e-02, -1.396356201930781e-02, 4.259548947474291e-01, 3.026972398719161e-01, -2.968302935565768e-02, 8.138417273907675e-02, 8.138417273907597e-02, 1.017984893624860e+00, 7.872718802776954e+00, 3.688115593414387e+00, 1.354022444035437e-01, 5.584371603552700e+00, 5.584371603546645e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
