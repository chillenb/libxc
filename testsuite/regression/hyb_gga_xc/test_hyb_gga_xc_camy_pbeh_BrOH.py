
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_pbeh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.581260017770665e-01, -2.581265958804747e-01, -2.581279346376912e-01, -2.581182363709911e-01, -2.581263260471651e-01, -2.581263260471651e-01, -3.074403907798895e-01, -3.074404817277573e-01, -3.074437380788430e-01, -3.074407056162098e-01, -3.074404812356167e-01, -3.074404812356167e-01, -2.471038389288959e-01, -2.471547044729607e-01, -2.495727096515195e-01, -2.498568411701246e-01, -2.471215565328000e-01, -2.471215565328000e-01, -1.477232986088256e-01, -1.481765313764523e-01, -2.562805985844873e-01, -1.294758944251224e-01, -1.478472585058842e-01, -1.478472585058842e-01, -1.359507151986752e-02, -1.423555781242278e-02, -5.556685966973571e-02, -6.539306987312084e-03, -1.408753725882086e-02, -1.408753725882086e-02, -3.156490122991679e-01, -3.157925597853765e-01, -3.156632760405268e-01, -3.157748813779390e-01, -3.157228646965231e-01, -3.157228646965231e-01, -3.079549605823649e-01, -3.075631722090393e-01, -3.087634299745447e-01, -3.084418366782141e-01, -3.066851502743000e-01, -3.066851502743000e-01, -2.349808832300197e-01, -2.460208302218083e-01, -2.311758287936264e-01, -2.373539398435979e-01, -2.378889915625195e-01, -2.378889915625195e-01, -1.085940574411174e-01, -1.576885446561029e-01, -1.068699234068342e-01, -3.098006191737432e-01, -1.177735044210581e-01, -1.177735044210581e-01, -6.308592417713473e-03, -7.208274389062960e-03, -5.403325995296109e-03, -7.434945486863573e-02, -6.568065487826258e-03, -6.568065487826258e-03, -2.454514825751465e-01, -2.422622243164507e-01, -2.433035401693749e-01, -2.441833832728716e-01, -2.437348416083521e-01, -2.437348416083521e-01, -2.433739259441413e-01, -2.253124788411117e-01, -2.277092351760140e-01, -2.316782007893089e-01, -2.294209977145867e-01, -2.294209977145867e-01, -2.491028678716034e-01, -1.743113816176918e-01, -1.839134814321436e-01, -1.974414001110469e-01, -1.900669947528792e-01, -1.900669947528791e-01, -2.177477477440054e-01, -5.189505936826447e-02, -6.819319261399177e-02, -1.915732832838244e-01, -9.159138968762033e-02, -9.159138968762033e-02, -1.592092824067303e-02, -1.974999951265781e-03, -3.751085210310954e-03, -8.767738283367345e-02, -5.582711269561496e-03, -5.582711269561487e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_pbeh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.123632216259572e-01, -3.123682693989313e-01, -3.123832222144741e-01, -3.123007141014904e-01, -3.123659468974064e-01, -3.123659468974064e-01, -3.119850936103942e-01, -3.119989185845637e-01, -3.123790660751867e-01, -3.117245243568881e-01, -3.119922106925735e-01, -3.119922106925735e-01, -2.424394282439537e-01, -2.418633406711107e-01, -2.265766293379135e-01, -2.275588702007593e-01, -2.422317690782906e-01, -2.422317690782906e-01, -1.458799445123692e-01, -1.477584399848949e-01, -2.650364206925772e-01, -1.245017912511664e-01, -1.464467267123201e-01, -1.464467267123201e-01, -1.802842025796882e-02, -1.886770233925243e-02, -6.943334125321747e-02, -8.709728468006021e-03, -1.867188639370007e-02, -1.867188639370007e-02, -3.646207360717826e-01, -3.651375908507237e-01, -3.646724376470757e-01, -3.650743465664234e-01, -3.648875368237413e-01, -3.648875368237413e-01, -2.445474642762812e-01, -2.457663978394013e-01, -2.429291801932759e-01, -2.438246892293843e-01, -2.476968524523307e-01, -2.476968524523307e-01, -2.622134513545398e-01, -2.812090775820538e-01, -2.573107131033401e-01, -2.728110439436233e-01, -2.676223611396970e-01, -2.676223611396970e-01, -1.151809273181244e-01, -1.434187149657236e-01, -1.128366416532645e-01, -3.558633911370053e-01, -1.179033921910614e-01, -1.179033921910614e-01, -8.402833694702933e-03, -9.598158736237719e-03, -7.195573648455420e-03, -8.778647431060532e-02, -8.745759190356686e-03, -8.745759190356682e-03, -2.762027274799356e-01, -2.768087652497501e-01, -2.768767501083675e-01, -2.767259310996816e-01, -2.768254884500688e-01, -2.768254884500688e-01, -2.731998380501781e-01, -2.380569089331562e-01, -2.528858424613799e-01, -2.650368216046286e-01, -2.592971658768244e-01, -2.592971658768244e-01, -2.847643326731327e-01, -1.575109666411897e-01, -1.740408316786022e-01, -2.112714330332775e-01, -1.917458410435239e-01, -1.917458410435239e-01, -2.299408839877816e-01, -6.568398330528290e-02, -8.278976290503284e-02, -2.157114617702075e-01, -1.007604392309387e-01, -1.007604392309388e-01, -2.108939003804667e-02, -2.632992537088153e-03, -4.999270705987355e-03, -9.666454672944562e-02, -7.435064189307534e-03, -7.435064189307519e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_pbeh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.094819305355524e-10, 2.094957246450743e-10, 2.095326726138353e-10, 2.093073048376464e-10, 2.094894106039446e-10, 2.094894106039446e-10, 1.790170797445107e-08, 1.812379266580093e-08, 2.424686718174552e-08, 1.371666527474336e-08, 1.801572720499411e-08, 1.801572720499411e-08, -9.319363905953089e-04, -9.484335848248568e-04, -1.337124450374378e-03, -1.283084487300426e-03, -9.379111183440117e-04, -9.379111183440117e-04, -2.650651048975928e-01, -2.519198888860906e-01, -2.205578461564545e-04, -5.827373665349883e-01, -2.611589502170593e-01, -2.611589502170593e-01, -4.070235850937612e+00, -4.078940408511003e+00, -1.641854528172508e+00, -2.898630201599769e+00, -4.237242604444345e+00, -4.237242604444345e+00, 1.984129490491310e-07, 2.012071683016204e-07, 1.986901571505031e-07, 2.008626923027153e-07, 1.998529434237247e-07, 1.998529434237247e-07, -8.628511483653296e-06, -8.322343577229973e-06, -8.767314154489726e-06, -8.532937263454723e-06, -8.212317795060370e-06, -8.212317795060370e-06, 5.503231725277847e-04, 4.006168122400068e-03, 3.874544401726073e-04, 4.168565978074431e-03, 9.112090194982915e-04, 9.112090194982915e-04, -7.956102834371616e-01, -2.107438557761434e-01, -9.032410904191549e-01, 4.694803452848657e-05, -7.852397733108385e-01, -7.852397733108385e-01, -3.075182068914244e+00, -3.080112173315229e+00, -8.814814526541278e+00, -1.546698044340340e+00, -4.549018156655109e+00, -4.549018156654830e+00, 7.215714087446289e-03, 5.294983429740141e-03, 5.911778818325441e-03, 6.439449343786222e-03, 6.169597618154098e-03, 6.169597618154098e-03, 8.564923914250329e-03, -2.128305056377207e-03, 1.665794313042927e-04, 2.685755782825630e-03, 1.371872489458458e-03, 1.371872489458461e-03, 3.179645186561223e-03, -1.020834451273315e-01, -5.434470585348511e-02, -1.227550872262593e-02, -2.953811321793737e-02, -2.953811321793738e-02, -3.731108836176023e-03, -1.401174536134008e+00, -1.361558576244319e+00, -6.039788122472037e-03, -1.392674143689133e+00, -1.392674143689139e+00, -3.055475771940090e+00, -5.308436493190459e+00, -4.567889843407475e+00, -1.703282933351173e+00, -6.644696007038909e+00, -6.644696007039726e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
