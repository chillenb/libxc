
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_vv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074321428876340e+01, -2.074324255117432e+01, -2.074343460148836e+01, -2.074301274880178e+01, -2.074322434612686e+01, -2.074322434612686e+01, -3.262480965755692e+00, -3.262448396350654e+00, -3.261780954999591e+00, -3.263601230014959e+00, -3.262525607531177e+00, -3.262525607531177e+00, -4.887877895092810e-01, -4.884788035866880e-01, -4.830136994601032e-01, -4.879292194179481e-01, -4.863459829914861e-01, -4.863459829914861e-01, -4.952109171128892e-02, -5.088976555763777e-02, -5.959174469112574e-01, -2.745490387061475e-02, -3.533965239317947e-02, -3.533965239317944e-02, -1.692394405735458e-06, -1.974465021951602e-06, -3.819809353907322e-04, -3.252554656498651e-07, -6.460436623496247e-07, -6.460436623496229e-07, -4.840919356598953e+00, -4.840520673452955e+00, -4.840910707285683e+00, -4.840558577617194e+00, -4.840711693036809e+00, -4.840711693036809e+00, -1.883108659014566e+00, -1.893383755690233e+00, -1.883458562773288e+00, -1.892519092777251e+00, -1.888630231067042e+00, -1.888630231067042e+00, -3.950989552871866e-01, -4.396110039746247e-01, -3.552173893005928e-01, -3.730625003312143e-01, -4.031736104497645e-01, -4.031736104497645e-01, -1.032262244721503e-02, -5.421726590325090e-02, -8.052980419072797e-03, -1.641007951826630e+00, -1.596968906750486e-02, -1.596968906750486e-02, -1.493655532284042e-07, -3.039201312745978e-07, -1.364183989097601e-07, -2.067583147502221e-03, -2.380492858761091e-07, -2.380492858761085e-07, -3.978187286408774e-01, -3.932957514692542e-01, -3.947806027697187e-01, -3.960891940363623e-01, -3.954244334112181e-01, -3.954244334112181e-01, -3.841265047423284e-01, -3.133211260403174e-01, -3.304432226176043e-01, -3.494995992001817e-01, -3.394376025534841e-01, -3.394376025534841e-01, -4.676576653255178e-01, -8.644413731444203e-02, -1.174419856474467e-01, -1.814718098414719e-01, -1.454488819742102e-01, -1.454488819742103e-01, -2.767265231766812e-01, -3.294531092110524e-04, -9.557179856716419e-04, -1.703156995818753e-01, -4.742422534963577e-03, -4.742422534963617e-03, -4.766700502631184e-06, -5.800364967351531e-09, -5.367340159251119e-08, -3.838521635466590e-03, -1.886635925972203e-07, -1.886635925960710e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_vv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501613557373199e+01, -2.501623627763383e+01, -2.501665657074347e+01, -2.501515887556482e+01, -2.501594752907941e+01, -2.501594752907941e+01, -3.896524179517193e+00, -3.896577111241641e+00, -3.897900707907429e+00, -3.896367404245188e+00, -3.896684963443641e+00, -3.896684963443641e+00, -6.196574681985645e-01, -6.180030785029356e-01, -5.769809204031942e-01, -5.837773917270079e-01, -5.831511132760145e-01, -5.831511132760145e-01, -7.232643702513736e-02, -7.545791311285595e-02, -7.505015180200219e-01, -3.960539415558272e-02, -5.075511995758025e-02, -5.075511995758013e-02, -3.409908651296969e-06, -3.982506659824322e-06, -8.312042258008461e-04, -6.522939756760257e-07, -1.298634355135764e-06, -1.298634355133419e-06, -6.078580656781154e+00, -6.081545974064663e+00, -6.078712761914647e+00, -6.081330592686442e+00, -6.080085842454041e+00, -6.080085842454041e+00, -2.009592589780330e+00, -2.027885546981817e+00, -1.992897291641909e+00, -2.008781514330711e+00, -2.028115768990273e+00, -2.028115768990273e+00, -5.582468495299260e-01, -6.360353530007534e-01, -5.041871683898113e-01, -5.461750308232128e-01, -5.723187843465172e-01, -5.723187843465172e-01, -1.806982078572717e-02, -6.739600466374421e-02, -1.473314561959308e-02, -2.211083769242850e+00, -2.570893135380444e-02, -2.570893135380444e-02, -2.994259912155912e-07, -6.097241629755292e-07, -2.761752456525754e-07, -4.440494345543258e-03, -4.798236917914943e-07, -4.798236917941927e-07, -5.774409178604598e-01, -5.736568935112781e-01, -5.752954489672840e-01, -5.764104389649206e-01, -5.758813203127808e-01, -5.758813203127808e-01, -5.570425787066641e-01, -4.283825521355592e-01, -4.709223435787667e-01, -5.103789629269572e-01, -4.908726180561032e-01, -4.908726180561032e-01, -6.733351884364884e-01, -1.033654447144281e-01, -1.478732230968720e-01, -2.703562776323984e-01, -2.040861670290849e-01, -2.040861670290851e-01, -3.854487031890528e-01, -7.121525602177023e-04, -2.096213310610380e-03, -2.671692303709166e-01, -9.440261335254819e-03, -9.440261335254850e-03, -9.633862717110498e-06, -1.161835301093122e-08, -1.076405490479142e-07, -7.837813151693448e-03, -3.805965716720121e-07, -3.805965716711595e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_vv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.859067767112428e-09, -6.859015446142509e-09, -6.858721427503776e-09, -6.859501112033295e-09, -6.859101304578572e-09, -6.859101304578572e-09, -8.373928951695604e-06, -8.373977520659311e-06, -8.374286048269188e-06, -8.367579351129055e-06, -8.373206983164264e-06, -8.373206983164264e-06, -3.301602625992613e-03, -3.327368608919550e-03, -3.916777548191834e-03, -3.803845128535113e-03, -3.820655078157163e-03, -3.820655078157163e-03, -1.206863983515652e-01, -1.104250263176480e-01, -1.975034100673219e-03, -1.866329361319409e-01, -1.677379651600945e-01, -1.677379651600958e-01, 4.258601913086977e-03, 5.017255686987688e-03, 1.714996717853100e-02, 1.504885752604932e-03, 3.145473418240385e-03, 3.145473416842718e-03, -1.782406884462952e-06, -1.780617462424586e-06, -1.782322805193296e-06, -1.780743537786486e-06, -1.781504316722099e-06, -1.781504316722099e-06, -6.686183121500207e-05, -6.546388086722776e-05, -6.712148654735314e-05, -6.590079031964560e-05, -6.593514613712836e-05, -6.593514613712836e-05, -2.642590432371304e-03, 1.021190605735898e-03, -3.403170574599120e-03, 1.648675839473653e-03, -2.204243058857755e-03, -2.204243058857755e-03, -1.298810512588423e-01, -1.464009308608887e-01, -1.118641416475124e-01, -4.876409956507175e-05, -1.751091638191107e-01, -1.751091638191107e-01, 1.469886702407456e-03, 1.850098863875176e-03, 1.851292478443915e-02, -1.323580052434065e-02, 8.056699559238444e-03, 8.056699568157593e-03, 4.307920110577901e-03, 2.244023822410186e-03, 2.900089816331683e-03, 3.496652551310568e-03, 3.191842371836468e-03, 3.191842371836468e-03, 5.890698975067584e-03, -7.130310389429436e-03, -3.957773062105950e-03, -5.989498006400140e-04, -2.322574426558293e-03, -2.322574426558293e-03, 4.488050458454360e-04, -9.949188689069327e-02, -6.338840481452383e-02, -1.064880782391193e-02, -3.147325023291449e-02, -3.147325023291439e-02, -8.404830902325718e-03, 1.468517144447021e-02, 5.904051144697688e-03, 5.091970087851908e-03, -6.819767997006027e-02, -6.819767997006231e-02, 5.285964166148657e-03, 2.005778185934882e-03, 2.523860220126971e-03, -4.993502568792034e-02, 1.003253630216219e-02, 1.003253630033106e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
