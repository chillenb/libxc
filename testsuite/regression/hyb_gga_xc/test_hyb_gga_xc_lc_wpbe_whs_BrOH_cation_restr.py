
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.077140768356370e+01, -2.077143594556368e+01, -2.077162799488081e+01, -2.077120614828992e+01, -2.077141774230349e+01, -2.077141774230349e+01, -3.290286220525508e+00, -3.290253577593109e+00, -3.289584449340019e+00, -3.291407793697654e+00, -3.290330792434881e+00, -3.290330792434881e+00, -5.121887579843505e-01, -5.118980932461332e-01, -5.068963926280461e-01, -5.118409983961451e-01, -5.102275100374565e-01, -5.102275100374565e-01, -5.860860137928232e-02, -6.003559325419109e-02, -6.201240614194221e-01, -3.407923976926149e-02, -4.293819302497118e-02, -4.293819302497117e-02, -2.140851896810886e-06, -2.497499205900610e-06, -5.055303785605011e-04, -4.115612295231914e-07, -8.173197280758640e-07, -8.173197280758619e-07, -4.868790608659095e+00, -4.868389756717047e+00, -4.868781871136950e+00, -4.868427827007545e+00, -4.868581842233235e+00, -4.868581842233235e+00, -1.910768025456055e+00, -1.921040762606215e+00, -1.911134337107391e+00, -1.920193227491077e+00, -1.916279613885048e+00, -1.916279613885048e+00, -4.161483830166895e-01, -4.601738231597151e-01, -3.757673523662222e-01, -3.927659579538812e-01, -4.242000694464123e-01, -4.242000694464123e-01, -1.362630879555696e-02, -6.466216161250601e-02, -1.073533489440043e-02, -1.666967643706329e+00, -2.046354104929397e-02, -2.046354104929397e-02, -1.890034810257087e-07, -3.845511358174264e-07, -1.724629712564512e-07, -2.818374034491962e-03, -3.010715842687910e-07, -3.010715842687902e-07, -4.174386727991810e-01, -4.131436373909614e-01, -4.145480148145772e-01, -4.157901383078215e-01, -4.151585684824797e-01, -4.151585684824797e-01, -4.034309751975806e-01, -3.339105044081753e-01, -3.506276005469149e-01, -3.692791102293245e-01, -3.594106261092716e-01, -3.594106261092716e-01, -4.886350992274900e-01, -9.980615272344825e-02, -1.325557637454226e-01, -1.981909359867213e-01, -1.614282532996463e-01, -1.614282532996464e-01, -2.964818686068735e-01, -4.345138738411440e-04, -1.296235722631879e-03, -1.858083375094685e-01, -6.375146185096593e-03, -6.375146185096562e-03, -6.030506109440999e-06, -7.340081748619601e-09, -6.791384531164959e-08, -5.185823442718438e-03, -2.385918263334219e-07, -2.385918263330948e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.504429470019512e+01, -2.504439540283432e+01, -2.504481569288724e+01, -2.504331801643788e+01, -2.504410665977665e+01, -2.504410665977665e+01, -3.923600816141254e+00, -3.923653581231331e+00, -3.924973367639421e+00, -3.923447043181552e+00, -3.923761446161797e+00, -3.923761446161797e+00, -6.397953109015722e-01, -6.381397793423081e-01, -5.974368254097117e-01, -6.042628392397660e-01, -6.035971751244972e-01, -6.035971751244972e-01, -7.959821136204592e-02, -8.276030911807496e-02, -7.716597944172964e-01, -4.578961412835839e-02, -5.714384072680368e-02, -5.714384072680363e-02, -4.307379125325473e-06, -5.029348009392329e-06, -1.100731160319993e-03, -8.249233805944146e-07, -1.641258973036408e-06, -1.641258973034062e-06, -6.105899495123056e+00, -6.108861260592342e+00, -6.106031455655491e+00, -6.108646150569428e+00, -6.107402869885952e+00, -6.107402869885952e+00, -2.036459234847527e+00, -2.054731295251196e+00, -2.019838707804066e+00, -2.035704444058619e+00, -2.054933814081680e+00, -2.054933814081680e+00, -5.782027164878335e-01, -6.580258645531363e-01, -5.234594872886393e-01, -5.672295418236193e-01, -5.925494182445348e-01, -5.925494182445348e-01, -2.259355351660831e-02, -7.640541430774579e-02, -1.864329094615068e-02, -2.236778851910439e+00, -3.065374388221160e-02, -3.065374388221160e-02, -3.787057061562886e-07, -7.710017612564689e-07, -3.482675851172868e-07, -5.873232427618524e-03, -6.058778002808494e-07, -6.058778002835474e-07, -5.994639027683670e-01, -5.952169415378705e-01, -5.970178177747384e-01, -5.982677142190178e-01, -5.976711033506719e-01, -5.976711033506719e-01, -5.790262369923060e-01, -4.462424255712362e-01, -4.897357381157155e-01, -5.304397979203412e-01, -5.102850502121744e-01, -5.102850502121744e-01, -6.955013029942274e-01, -1.145044573287228e-01, -1.603706607548609e-01, -2.852699160989743e-01, -2.174492653437847e-01, -2.174492653437850e-01, -4.026583486755737e-01, -9.416233357690010e-04, -2.817983369229561e-03, -2.824095154158888e-01, -1.200370442704450e-02, -1.200370442704444e-02, -1.216673334453341e-05, -1.469779804423625e-08, -1.361220000772472e-07, -1.007203694254261e-02, -4.804590553584484e-07, -4.804590550802258e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.859181566149943e-09, -6.859129249811439e-09, -6.858835240099940e-09, -6.859614855984708e-09, -6.859215086148470e-09, -6.859215086148470e-09, -8.389637360554488e-06, -8.389691093400648e-06, -8.390116973837974e-06, -8.383187259057545e-06, -8.388919075244926e-06, -8.388919075244926e-06, -3.505631753545813e-03, -3.530658264495108e-03, -4.091302409731590e-03, -3.973059145527754e-03, -3.993341585503267e-03, -3.993341585503267e-03, -1.748695296524439e-01, -1.644372840392933e-01, -2.069981645358744e-03, -2.596036607512864e-01, -2.374474716525898e-01, -2.374474716525907e-01, 4.257561651408427e-03, 5.015815579025230e-03, 1.041900066653561e-02, 1.504825766138204e-03, 3.145241344347031e-03, 3.145241342951223e-03, -1.785462753627975e-06, -1.783704977607807e-06, -1.785379943167409e-06, -1.783828609541757e-06, -1.784576278189431e-06, -1.784576278189431e-06, -6.699509534955317e-05, -6.559769645667930e-05, -6.724362863384322e-05, -6.602347987803668e-05, -6.607439609961772e-05, -6.607439609961772e-05, -3.190541461513851e-03, 6.107894104033619e-04, -4.183151060683228e-03, 9.244056635662468e-04, -2.721704407370735e-03, -2.721704407370735e-03, -1.990860116068508e-01, -1.791283091084660e-01, -1.810254912874123e-01, -5.041911133850231e-05, -2.669498011104128e-01, -2.669498011104128e-01, 1.469863081584143e-03, 1.850035491983025e-03, 1.851281010567324e-02, -5.718585877050372e-02, 8.056573874517593e-03, 8.056573883439163e-03, 3.712319089283938e-03, 1.633662126822765e-03, 2.294072490295456e-03, 2.894829711383985e-03, 2.587840561711952e-03, 2.587840561711952e-03, 5.216137279924527e-03, -8.200592431781633e-03, -4.943076698424417e-03, -1.472488288250145e-03, -3.256726553165360e-03, -3.256726553165360e-03, 1.221225057706941e-04, -1.163433533487940e-01, -7.408454794144044e-02, -1.605628152600272e-02, -3.952912582538632e-02, -3.952912582538617e-02, -1.000496300865269e-02, 9.614007958644290e-03, -1.199137918049492e-02, -1.768738337519976e-03, -1.520966313445156e-01, -1.520966313445210e-01, 5.280616167754841e-03, 2.005777156887262e-03, 2.523849166187141e-03, -1.249597615949743e-01, 1.003242559925982e-02, 1.003242559742033e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
