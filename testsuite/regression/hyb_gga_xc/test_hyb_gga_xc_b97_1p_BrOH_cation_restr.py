
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_1p_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.789874519926182e+01, -1.789878091378045e+01, -1.789897736701327e+01, -1.789844524206367e+01, -1.789871870126804e+01, -1.789871870126804e+01, -3.004206427082216e+00, -3.004189868753862e+00, -3.003880063103703e+00, -3.004979168479808e+00, -3.004257594422927e+00, -3.004257594422927e+00, -6.258818420555839e-01, -6.256870581104139e-01, -6.232200870557131e-01, -6.274463204607066e-01, -6.259672690386746e-01, -6.259672690386746e-01, -1.979488361368839e-01, -1.989868654048950e-01, -7.201409886439065e-01, -1.694386454220647e-01, -1.797977351452708e-01, -1.797977351452708e-01, -7.047601725031091e-03, -7.460164739602356e-03, -5.120207635273011e-02, -3.853500727639445e-03, -4.946413035503728e-03, -4.946413035503722e-03, -4.394023531990987e+00, -4.394245358797252e+00, -4.394039400113534e+00, -4.394235117235302e+00, -4.394132594637036e+00, -4.394132594637036e+00, -1.817807530046733e+00, -1.826215174797890e+00, -1.818865673099154e+00, -1.826166300215105e+00, -1.822078419353429e+00, -1.822078419353429e+00, -5.366724931889122e-01, -5.721172935248708e-01, -5.004070275231469e-01, -5.110564924478440e-01, -5.435095152190306e-01, -5.435095152190306e-01, -1.323814298946837e-01, -2.143975370816741e-01, -1.235412168002126e-01, -1.643185784671339e+00, -1.452505877110875e-01, -1.452505877110875e-01, -2.909149371511154e-03, -3.759534324747903e-03, -2.811047638380858e-03, -8.465132535748632e-02, -3.438274604383750e-03, -3.438274604383754e-03, -5.270461190892738e-01, -5.285132581920808e-01, -5.286322137808062e-01, -5.283499673309004e-01, -5.285496367366846e-01, -5.285496367366846e-01, -5.099755609627553e-01, -4.656646724491703e-01, -4.777392773105707e-01, -4.916874795721820e-01, -4.841981233468413e-01, -4.841981233468413e-01, -5.985663498630360e-01, -2.530573695691249e-01, -2.833603059115076e-01, -3.381913021117544e-01, -3.075401868916078e-01, -3.075401868916078e-01, -4.312413650787648e-01, -4.884975933379261e-02, -6.834575543589151e-02, -3.213654563442664e-01, -1.048870030317088e-01, -1.048870030317089e-01, -1.035641020131116e-02, -9.221388123256269e-04, -2.017247273247089e-03, -9.929585631081221e-02, -3.160925107896701e-03, -3.160925107896691e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_1p_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.258093733133047e+01, -2.258103075250369e+01, -2.258141601454280e+01, -2.258002667580130e+01, -2.258075895316396e+01, -2.258075895316396e+01, -3.686941769799553e+00, -3.687001774019010e+00, -3.688475774356878e+00, -3.686596296851035e+00, -3.687100690136178e+00, -3.687100690136178e+00, -7.251913222961658e-01, -7.235304729378241e-01, -6.809124375975529e-01, -6.873991493183861e-01, -6.870333412591437e-01, -6.870333412591437e-01, -1.883707749367389e-01, -1.918142387317115e-01, -8.472187580926654e-01, -1.504371812789335e-01, -1.624829135426318e-01, -1.624829135426317e-01, -9.646165372106592e-03, -1.021387439238206e-02, -6.699623647845221e-02, -5.250798277818940e-03, -6.752922437599816e-03, -6.752922437599813e-03, -5.644912292736466e+00, -5.647188017843687e+00, -5.645015111085635e+00, -5.647024289156792e+00, -5.646067975582023e+00, -5.646067975582023e+00, -1.893105005781786e+00, -1.914423591936859e+00, -1.864693105640239e+00, -1.883597085286196e+00, -1.918569646628146e+00, -1.918569646628146e+00, -6.718304532343695e-01, -7.429583716296273e-01, -6.201580709460676e-01, -6.631074851834089e-01, -6.856296504189162e-01, -6.856296504189162e-01, -1.325131117715852e-01, -1.845493778458017e-01, -1.272719607476165e-01, -2.147076388873856e+00, -1.340926511519631e-01, -1.340926511519631e-01, -3.954860167331407e-03, -5.121576252243643e-03, -3.819322209650547e-03, -9.928219796621794e-02, -4.679492266245485e-03, -4.679492266245488e-03, -6.797035323262005e-01, -6.858351955126891e-01, -6.847791827071358e-01, -6.828847936296359e-01, -6.839449654982305e-01, -6.839449654982305e-01, -6.595342359722940e-01, -5.455103369355975e-01, -5.881331284227402e-01, -6.292836039578590e-01, -6.088728032347102e-01, -6.088728032347102e-01, -7.776248432118339e-01, -2.253632974072483e-01, -2.751544100702937e-01, -3.907201259266465e-01, -3.278929158185044e-01, -3.278929158185043e-01, -5.041431248426812e-01, -6.440116945289349e-02, -8.592121328325579e-02, -3.881096994918232e-01, -1.111632885817698e-01, -1.111632885817697e-01, -1.420407421587573e-02, -1.243463624314653e-03, -2.734415730291190e-03, -1.080031302637022e-01, -4.299019217510122e-03, -4.299019217510108e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_1p_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.169304015143744e-09, -3.169237694309852e-09, -3.168981886354940e-09, -3.169967846929360e-09, -3.169445643005938e-09, -3.169445643005938e-09, -4.790368951581863e-06, -4.789975464694185e-06, -4.780405845580732e-06, -4.793433189228887e-06, -4.789440961471616e-06, -4.789440961471616e-06, -3.561144268515477e-03, -3.587624205965930e-03, -4.241376357423937e-03, -4.099078595383164e-03, -4.120863948811483e-03, -4.120863948811483e-03, -5.543450270912345e-01, -5.333927345392552e-01, -1.904660998563033e-03, -1.060382617162872e+00, -8.513070381127008e-01, -8.513070381127023e-01, -1.982478884917769e+00, -2.145366206926573e+00, -2.392038005594673e+00, -1.386064430515185e+00, -1.963421363922787e+00, -1.963421363923251e+00, -7.718006309251830e-07, -7.691996498294132e-07, -7.716883379988012e-07, -7.693919844827853e-07, -7.704772895741990e-07, -7.704772895741990e-07, -5.993018022544988e-05, -5.799062693633468e-05, -6.178777538131883e-05, -6.002973298104003e-05, -5.796467371063799e-05, -5.796467371063799e-05, -4.640958191320916e-03, -3.076941386840823e-03, -6.659624230754172e-03, -3.721784972879653e-03, -4.113708518065508e-03, -4.113708518065508e-03, -1.644248830740062e+00, -4.674943209125694e-01, -1.841345409741652e+00, -3.832651627243176e-05, -1.642310602696529e+00, -1.642310602696529e+00, -1.613473055448644e+00, -1.613281127218072e+00, -8.887770516011800e+00, -2.803363482827386e+00, -4.524208004832797e+00, -4.524208004820535e+00, -1.923937100355129e-02, -4.602546896719442e-03, -6.749341544464812e-03, -1.028382490030145e-02, -8.240979206960817e-03, -8.240979206960817e-03, -4.031312933620567e-02, -1.158932130739331e-02, -8.404099804909299e-03, -5.142104892414456e-03, -6.789390576753936e-03, -6.789390576753936e-03, -2.298212151377966e-03, -2.351972351745246e-01, -1.313223517681609e-01, -4.506025292565032e-02, -7.995962406671016e-02, -7.995962406671013e-02, -1.600353650203545e-02, -2.167813615806759e+00, -2.296910556713316e+00, -4.758322948698083e-02, -2.879630083429606e+00, -2.879630083429604e+00, -1.880189908811482e+00, -4.322113042402149e+00, -2.914446333255797e+00, -2.974977415576606e+00, -5.505386392400705e+00, -5.505386392400923e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
