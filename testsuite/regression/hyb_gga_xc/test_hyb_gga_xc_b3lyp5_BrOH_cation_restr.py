
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp5_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.683254453323683e+01, -1.683256834213258e+01, -1.683272538510476e+01, -1.683237010035374e+01, -1.683254898236442e+01, -1.683254898236442e+01, -2.841015793125439e+00, -2.840989492395817e+00, -2.840449693177781e+00, -2.841916841291449e+00, -2.841051362290189e+00, -2.841051362290189e+00, -5.967886943498664e-01, -5.966359140259498e-01, -5.939305972959524e-01, -5.980461877934286e-01, -5.966706380835858e-01, -5.966706380835858e-01, -1.807767349658152e-01, -1.823952123905623e-01, -6.863490623189634e-01, -1.485008294557654e-01, -1.607697734624913e-01, -1.607697734624913e-01, -4.875159101389747e-02, -4.884125293673609e-02, -8.694454222452304e-02, -4.411770535895478e-02, -4.410358331613411e-02, -4.410358331613409e-02, -4.102842456088691e+00, -4.102427478438008e+00, -4.102831622965937e+00, -4.102465163502896e+00, -4.102627616851826e+00, -4.102627616851826e+00, -1.730447294683632e+00, -1.738947923104340e+00, -1.730063012361057e+00, -1.737569992958327e+00, -1.735327660930717e+00, -1.735327660930717e+00, -5.071369003171937e-01, -5.297893666769605e-01, -4.737686768914545e-01, -4.748186378899104e-01, -5.125944571607848e-01, -5.125944571607848e-01, -1.168852361613659e-01, -1.876034082784202e-01, -1.117320484351517e-01, -1.516170044269473e+00, -1.278870322066705e-01, -1.278870322066705e-01, -3.970747262139374e-02, -4.251069726063182e-02, -2.794073735763819e-02, -9.436818501278958e-02, -3.378450952097100e-02, -3.378450952097101e-02, -4.871375079341371e-01, -4.891699306209618e-01, -4.885007338304238e-01, -4.879077682946591e-01, -4.882079848876262e-01, -4.882079848876262e-01, -4.732585731538235e-01, -4.432185499310802e-01, -4.527390390718876e-01, -4.612870528219001e-01, -4.568968288122660e-01, -4.568968288122660e-01, -5.547880010753072e-01, -2.276852959763087e-01, -2.624119654460876e-01, -3.208624120309412e-01, -2.898465463288754e-01, -2.898465463288753e-01, -4.102284397810224e-01, -8.725260438661721e-02, -9.195121611344396e-02, -3.041568299888206e-01, -1.017438736804227e-01, -1.017438736804227e-01, -5.529294048711393e-02, -2.434098878358501e-02, -3.200221495523155e-02, -9.915195844861530e-02, -3.174245060529104e-02, -3.174245060529102e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp5_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.035854448233026e+01, -2.035861855754834e+01, -2.035893719768902e+01, -2.035783533503158e+01, -2.035841420308570e+01, -2.035841420308570e+01, -3.346951818590529e+00, -3.346979879241879e+00, -3.347709342653388e+00, -3.347063529309364e+00, -3.347064392584805e+00, -3.347064392584805e+00, -6.841803179865982e-01, -6.833303933710797e-01, -6.635826235070738e-01, -6.687760862215657e-01, -6.677549932841965e-01, -6.677549932841965e-01, -2.006747401745215e-01, -2.025771593988255e-01, -7.914037009705526e-01, -1.659019043419712e-01, -1.782486562768609e-01, -1.782486562768608e-01, -1.557412044746446e-02, -1.595543938485162e-02, -4.943898867222792e-02, -1.166398275837692e-02, -1.280604881541121e-02, -1.280604881541124e-02, -5.064218090364411e+00, -5.066108867146475e+00, -5.064303925359221e+00, -5.065973100799472e+00, -5.065176874910945e+00, -5.065176874910945e+00, -1.864220701936501e+00, -1.878365445448574e+00, -1.852201569770724e+00, -1.864628994035076e+00, -1.877933823108726e+00, -1.877933823108726e+00, -6.117869312829257e-01, -6.753601562543943e-01, -5.675457975455259e-01, -5.999076891321794e-01, -6.223778834276487e-01, -6.223778834276487e-01, -1.288613630852124e-01, -2.122295099107062e-01, -1.195594005127070e-01, -1.938914102774590e+00, -1.403449020610456e-01, -1.403449020610456e-01, -9.898742276679938e-03, -1.130628818537194e-02, -7.925852280428842e-03, -7.841633421237720e-02, -9.557054007674239e-03, -9.557054007674270e-03, -6.327690354109835e-01, -6.244695588338612e-01, -6.272564117686734e-01, -6.296602077435814e-01, -6.284453823172431e-01, -6.284453823172431e-01, -6.182573414136903e-01, -5.138353721812228e-01, -5.401114597703275e-01, -5.687762163236649e-01, -5.538582464637781e-01, -5.538582464637781e-01, -7.053550524997687e-01, -2.540317739013555e-01, -2.920641396147686e-01, -3.718127661074182e-01, -3.273544570853945e-01, -3.273544570853945e-01, -4.758156470148331e-01, -4.799384408438313e-02, -6.365221585071716e-02, -3.605528982445783e-01, -9.814129391870012e-02, -9.814129391870009e-02, -1.951201114110458e-02, -4.969792160464179e-03, -7.625102945430637e-03, -9.248392219015290e-02, -8.926012574725856e-03, -8.926012574725811e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp5_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp5", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.214058874266490e-09, -5.214033675209977e-09, -5.213850904374920e-09, -5.214227288442585e-09, -5.214040120579040e-09, -5.214040120579040e-09, -6.753073883789720e-06, -6.753365050752026e-06, -6.759446331703672e-06, -6.743792209262579e-06, -6.752775975998187e-06, -6.752775975998187e-06, -3.679015732001444e-03, -3.678126802790239e-03, -3.624702268092344e-03, -3.532256562136329e-03, -3.568011858849430e-03, -3.568011858849430e-03, -2.742506668698186e-01, -2.749518989128032e-01, -2.119133699341574e-03, -3.570971117121439e-01, -3.448576089925063e-01, -3.448576089925062e-01, -7.297679817819733e+03, -6.399439196725414e+03, -3.492243211460877e+01, -3.444000469682885e+04, -1.908649471447184e+04, -1.908649471447185e+04, -1.556606756395702e-06, -1.557748378266979e-06, -1.556644109538183e-06, -1.557652059160539e-06, -1.557192954959958e-06, -1.557192954959958e-06, -4.970421771964149e-05, -4.873314269689456e-05, -4.974884937872102e-05, -4.888717749255822e-05, -4.914664445284704e-05, -4.914664445284704e-05, -7.604303064193713e-03, -7.079346412352591e-03, -9.887197273001995e-03, -1.087439493881204e-02, -7.360947908822068e-03, -7.360947908822068e-03, -4.940691488311700e-01, -1.548632508383963e-01, -7.071860803090140e-01, -9.346621788029168e-05, -5.731448026683642e-01, -5.731448026683642e-01, -7.855464207704159e+04, -3.847843591107436e+04, -1.394358324480566e+05, -5.300019906758153e+00, -6.583056984534817e+04, -6.583056984534813e+04, -1.059180185875422e-02, -9.870296210158662e-03, -1.008581933615283e-02, -1.029153636391696e-02, -1.018514661091321e-02, -1.018514661091321e-02, -1.222569005551601e-02, -1.215256671167483e-02, -1.177768436758409e-02, -1.161749653616862e-02, -1.169011133321274e-02, -1.169011133321274e-02, -5.817673764725374e-03, -9.872249658521376e-02, -7.231164497977786e-02, -4.299643298555089e-02, -5.738821217905840e-02, -5.738821217905844e-02, -1.649090256985677e-02, -3.943989093923455e+01, -1.186426531346186e+01, -5.669905932587326e-02, -2.222228924570592e+00, -2.222228924570593e+00, -2.557805625311820e+03, -2.703132932221740e+06, -2.592659876736484e+05, -2.816897007727858e+00, -8.788122841339887e+04, -8.788122841339916e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
