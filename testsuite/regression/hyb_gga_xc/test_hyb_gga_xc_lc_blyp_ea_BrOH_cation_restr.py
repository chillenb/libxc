
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blyp_ea_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.093980377731084e+01, -2.093983108737497e+01, -2.094002104544193e+01, -2.093961331251029e+01, -2.093981720913471e+01, -2.093981720913471e+01, -3.363840966029968e+00, -3.363807181887454e+00, -3.363111818850800e+00, -3.364984643093779e+00, -3.363884725902323e+00, -3.363884725902323e+00, -5.558493524654107e-01, -5.554666760379312e-01, -5.467421193077920e-01, -5.520293827799855e-01, -5.505163570632209e-01, -5.505163570632209e-01, -6.148260358286103e-02, -6.433920826231870e-02, -6.670742433427133e-01, -2.198447833101121e-02, -3.772809283585507e-02, -3.772809283585505e-02, -1.048666064740754e-03, -1.102968763177294e-03, -2.574211056605116e-04, -6.096426031663093e-04, -7.641713397336987e-04, -7.641713397336987e-04, -4.942357481417495e+00, -4.941764284322264e+00, -4.942340886132232e+00, -4.941817059933256e+00, -4.942050982840456e+00, -4.942050982840456e+00, -1.964275683932996e+00, -1.975254309768984e+00, -1.963151020746092e+00, -1.972863744420926e+00, -1.970871017901819e+00, -1.970871017901819e+00, -4.556947308660725e-01, -4.903928549075373e-01, -4.143980561579382e-01, -4.233077386673724e-01, -4.632671564218651e-01, -4.632671564218651e-01, 8.018026502276359e-03, -5.279384505938656e-02, 9.513233523184290e-03, -1.707122831153040e+00, -6.186120177080071e-03, -6.186120177080071e-03, -4.714841804208234e-04, -5.961131356525076e-04, -4.569009564745994e-04, 7.347266623438418e-03, -5.495466265115375e-04, -5.495466265115375e-04, -4.412239199239357e-01, -4.417322255249596e-01, -4.415969246766603e-01, -4.414467449725648e-01, -4.415252902070284e-01, -4.415252902070284e-01, -4.252233757202737e-01, -3.715502190752994e-01, -3.884833830811138e-01, -4.038934454723930e-01, -3.961009123050609e-01, -3.961009123050609e-01, -5.202709019225237e-01, -9.812934312126974e-02, -1.445613300465336e-01, -2.274472861337737e-01, -1.842332365341668e-01, -1.842332365341668e-01, -3.322387872508373e-01, -6.459692721880319e-04, 5.490496936647996e-03, -2.135927594274265e-01, 5.719440479290126e-03, 5.719440479290067e-03, -1.472523070875937e-03, -1.605999173551752e-04, -3.359942258691428e-04, 6.336559865997822e-03, -5.088554228863908e-04, -5.088554228863904e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blyp_ea_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.513669837025741e+01, -2.513679256757029e+01, -2.513719473421940e+01, -2.513579362085874e+01, -2.513653013188389e+01, -2.513653013188389e+01, -3.989304478535977e+00, -3.989338637731602e+00, -3.990228521033794e+00, -3.989453261418866e+00, -3.989443311405061e+00, -3.989443311405061e+00, -7.046309654657794e-01, -7.038050670118046e-01, -6.852944501542843e-01, -6.913755580157119e-01, -6.899624630257050e-01, -6.899624630257050e-01, -1.404306025610060e-01, -1.420713103103584e-01, -8.340561770060754e-01, -1.047467230197811e-01, -1.172356954560903e-01, -1.172356954560903e-01, -1.393350466728199e-03, -1.465394090508950e-03, -6.985831899933483e-03, -8.108309990267220e-04, -1.015918830891628e-03, -1.015918830891628e-03, -6.122989600034404e+00, -6.125380464270815e+00, -6.123097970801076e+00, -6.125208622108496e+00, -6.124202034145888e+00, -6.124202034145888e+00, -2.164324658328689e+00, -2.181347829805009e+00, -2.150494119612534e+00, -2.165432307604057e+00, -2.180534395424861e+00, -2.180534395424861e+00, -6.065413223794515e-01, -6.738565992881975e-01, -5.542930372603353e-01, -5.835223899500127e-01, -6.181737558985675e-01, -6.181737558985675e-01, -6.830315121236369e-02, -1.575059823892391e-01, -5.977295457956622e-02, -2.236099865724438e+00, -7.874412601762221e-02, -7.874412601762221e-02, -6.273648312350009e-04, -7.928697260729078e-04, -6.079917529678393e-04, -2.561805205537611e-02, -7.310417048401018e-04, -7.310417048401018e-04, -6.185581242057085e-01, -6.115369024323158e-01, -6.138919774784277e-01, -6.159239444874149e-01, -6.148965433497561e-01, -6.148965433497561e-01, -5.998620305127322e-01, -4.963276861523629e-01, -5.219747122432509e-01, -5.502426290015261e-01, -5.354295457545430e-01, -5.354295457545430e-01, -7.109859530835365e-01, -2.056396135961587e-01, -2.462801267849796e-01, -3.272355820265411e-01, -2.816621063076563e-01, -2.816621063076563e-01, -4.506362492367008e-01, -6.271776671745988e-03, -1.468753048592650e-02, -3.089811248388104e-01, -4.119452715972571e-02, -4.119452715972569e-02, -1.955978412695357e-03, -2.139671304175967e-04, -4.473080989152397e-04, -3.663866054745255e-02, -6.770036987548055e-04, -6.770036987548049e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blyp_ea_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.148745512528281e-09, -7.148711280395942e-09, -7.148462088221170e-09, -7.148973412902212e-09, -7.148719269933075e-09, -7.148719269933075e-09, -8.638423779522734e-06, -8.638802366171479e-06, -8.646741347815262e-06, -8.626578846925970e-06, -8.638067814500100e-06, -8.638067814500100e-06, -2.965685998223471e-03, -2.960495594377932e-03, -2.799669579258689e-03, -2.749417152817632e-03, -2.775126967070556e-03, -2.775126967070556e-03, 2.702319437657986e-01, 2.490533604783915e-01, -1.893063619572748e-03, 8.852800839371198e-01, 5.578496348523527e-01, 5.578496348523531e-01, -4.668223034689691e-05, -5.551610859576608e-05, 9.576046542503773e+00, -9.707181771138935e-06, -2.148106411329577e-05, -2.148106411324600e-05, -2.049327105544538e-06, -2.050866552261976e-06, -2.049377962255672e-06, -2.050737151107340e-06, -2.050117333936179e-06, -2.050117333936179e-06, -5.896366630731168e-05, -5.789696093318826e-05, -5.892978541947657e-05, -5.798612978659659e-05, -5.839053052689501e-05, -5.839053052689501e-05, -5.726281870897299e-03, -5.848328491416714e-03, -6.908719217512967e-03, -8.194467208028685e-03, -5.640610224241388e-03, -5.640610224241388e-03, 2.901234034924719e+00, 2.902035163956002e-01, 3.576310038026808e+00, -1.118563778852251e-04, 1.792016089163549e+00, 1.792016089163549e+00, -5.724227433632270e-06, -1.020450923921186e-05, -1.728276184845672e-05, 7.986267971663807e+00, -1.704581784104770e-05, -1.704581784113742e-05, -8.385085764346257e-03, -7.704609225304450e-03, -7.911027432423522e-03, -8.105371204027805e-03, -8.005150870270265e-03, -8.005150870270265e-03, -9.524554505952508e-03, -7.305783762420774e-03, -7.777290990426238e-03, -8.267159111914585e-03, -8.025446569855765e-03, -8.025446569855765e-03, -4.943919302673062e-03, 8.783931091029720e-02, 2.095770364327843e-02, -1.227417796405295e-02, -2.666101355540199e-03, -2.666101355540192e-03, -8.811985195712680e-03, 9.187775308798903e+00, 9.877192209257242e+00, -1.668083626387523e-02, 5.170829319691725e+00, 5.170829319691720e+00, 7.069553009986940e-05, -7.750376191465263e-07, -3.735388328126588e-06, 5.894265576163949e+00, -1.616718840770462e-05, -1.616718840759673e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
