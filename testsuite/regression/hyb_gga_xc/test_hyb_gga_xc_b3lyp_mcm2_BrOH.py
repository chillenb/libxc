
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.698215603627582e+01, -1.698217691420663e+01, -1.698232950387720e+01, -1.698198643408093e+01, -1.698216654965738e+01, -1.698216654965738e+01, -2.857795486519775e+00, -2.857775131516482e+00, -2.857331555458662e+00, -2.858691352741634e+00, -2.857796977696900e+00, -2.857796977696900e+00, -5.953988304290575e-01, -5.952719025514813e-01, -5.930095467767893e-01, -5.968008800859262e-01, -5.953502882146582e-01, -5.953502882146582e-01, -1.819066846113860e-01, -1.834037486168831e-01, -6.942689884180095e-01, -1.432574877416110e-01, -1.823466656207983e-01, -1.823466656207983e-01, -4.885352931338791e-02, -4.950023964460837e-02, -8.434419024783719e-02, -4.316896735991439e-02, -4.901851148694541e-02, -4.901851148694541e-02, -4.129089652740952e+00, -4.128681659607104e+00, -4.129052890567674e+00, -4.128735572880731e+00, -4.128873383138357e+00, -4.128873383138357e+00, -1.737238001188865e+00, -1.745546057222576e+00, -1.737579038000386e+00, -1.744044444047666e+00, -1.742438535611158e+00, -1.742438535611158e+00, -5.005431091938536e-01, -5.230759274344925e-01, -4.773626347123607e-01, -4.823682285414720e-01, -5.161341658357260e-01, -5.161341658357260e-01, -1.153370075712413e-01, -1.903032858069219e-01, -1.140387731616704e-01, -1.520382499886668e+00, -1.267390932309699e-01, -1.267390932309699e-01, -4.233739097683362e-02, -4.361698304273258e-02, -3.334825825115102e-02, -9.079593331034516e-02, -3.961030930323135e-02, -3.961030930323135e-02, -4.929537317947813e-01, -4.947806508986383e-01, -4.941674768285839e-01, -4.936612682916934e-01, -4.939174643263236e-01, -4.939174643263236e-01, -4.772070477550995e-01, -4.478369738685379e-01, -4.573563649720010e-01, -4.654171885736666e-01, -4.612883538973816e-01, -4.612883538973816e-01, -5.478879078301010e-01, -2.316086809541338e-01, -2.657763204457257e-01, -3.199822649691494e-01, -2.914644307464533e-01, -2.914644307464532e-01, -4.071586927225824e-01, -8.483961081971449e-02, -8.927713353024118e-02, -2.976934672540351e-01, -1.009274546031663e-01, -1.009274546031663e-01, -5.383366553750857e-02, -3.042130403183014e-02, -3.515641629950798e-02, -9.773735579050817e-02, -3.547939338844356e-02, -3.547939338844356e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.053808243442707e+01, -2.053814755648017e+01, -2.053845234323634e+01, -2.053738567021574e+01, -2.053811665835441e+01, -2.053811665835441e+01, -3.367893325739572e+00, -3.367917212556743e+00, -3.368710015299091e+00, -3.368044211583694e+00, -3.367919676350525e+00, -3.367919676350525e+00, -6.811274156016702e-01, -6.803667063813040e-01, -6.615958191896291e-01, -6.664656036029606e-01, -6.808501636006836e-01, -6.808501636006836e-01, -2.068134773435453e-01, -2.087097212417301e-01, -8.119569342291377e-01, -1.646063334675470e-01, -2.073660153315361e-01, -2.073660153315361e-01, -1.938765829689988e-02, -1.996914284255982e-02, -5.673531130571539e-02, -1.291108556949280e-02, -1.976966505275277e-02, -1.976966505275277e-02, -5.097865665305993e+00, -5.099713002621145e+00, -5.098055187345095e+00, -5.099491573532705e+00, -5.098811803306134e+00, -5.098811803306134e+00, -1.872128712766925e+00, -1.885898624961811e+00, -1.865520864998127e+00, -1.876230965238821e+00, -1.890138865056960e+00, -1.890138865056960e+00, -6.062064921751951e-01, -6.692116568799240e-01, -5.763654529460477e-01, -6.095295909380559e-01, -6.297023651950601e-01, -6.297023651950601e-01, -1.330585458131240e-01, -2.202682364499298e-01, -1.291065487519206e-01, -1.946016228072183e+00, -1.449904509623630e-01, -1.449904509623630e-01, -1.257434487112740e-02, -1.354855687460487e-02, -1.028207529607026e-02, -8.053364857442691e-02, -1.232795958078656e-02, -1.232795958078655e-02, -6.428891455592715e-01, -6.350296008073872e-01, -6.377228318316014e-01, -6.398922465963608e-01, -6.387966891465314e-01, -6.387966891465314e-01, -6.241516343803399e-01, -5.252655396588881e-01, -5.507508482222169e-01, -5.765922220935579e-01, -5.632003285707916e-01, -5.632003285707917e-01, -6.992660507339976e-01, -2.638500079401404e-01, -3.019531538793263e-01, -3.749180323000116e-01, -3.349488098214594e-01, -3.349488098214593e-01, -4.767064436724614e-01, -5.320090987005310e-02, -7.309638821370175e-02, -3.564925233056415e-01, -1.044092189143030e-01, -1.044092189143030e-01, -2.201007982475841e-02, -6.622603889812170e-03, -9.121252166589162e-03, -9.763500411105520e-02, -1.079687976897319e-02, -1.079687976897319e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.277272520500810e-09, -5.277250346406811e-09, -5.277071766335584e-09, -5.277436477336078e-09, -5.277261492492575e-09, -5.277261492492575e-09, -6.814731458479506e-06, -6.814959292890352e-06, -6.820110630695814e-06, -6.805509647159807e-06, -6.814733369200242e-06, -6.814733369200242e-06, -3.606150634162652e-03, -3.603987583014401e-03, -3.510733577338546e-03, -3.432682353418686e-03, -3.605440707620488e-03, -3.605440707620488e-03, -2.593801645392514e-01, -2.603940426727120e-01, -2.031715397453321e-03, -3.192864288545190e-01, -2.599192100021833e-01, -2.599192100021833e-01, -2.040719989492243e+03, -1.789941991814870e+03, -1.766089872330021e+01, -1.512032649268440e+04, -1.864488820180263e+03, -1.864488820180263e+03, -1.575546451921931e-06, -1.576671833076600e-06, -1.575652513481969e-06, -1.576527653970917e-06, -1.576135418256557e-06, -1.576135418256557e-06, -4.993192850505415e-05, -4.899448965753504e-05, -4.988277127463524e-05, -4.915141076223551e-05, -4.935997462435811e-05, -4.935997462435811e-05, -7.866438961601614e-03, -7.417588453549146e-03, -9.438981688489436e-03, -9.985255988540951e-03, -7.059112550297469e-03, -7.059112550297469e-03, -3.126523752212940e-01, -1.302044023157929e-01, -4.533271883659352e-01, -9.461841129083146e-05, -4.015569988258592e-01, -4.015569988258592e-01, -1.704661603699247e+04, -1.162605377890679e+04, -3.579656100757865e+04, -4.158199928932643e+00, -1.695345849508392e+04, -1.695345849508393e+04, -1.006243569746811e-02, -9.386439662137775e-03, -9.592199561046033e-03, -9.775357986987140e-03, -9.680751326369667e-03, -9.680751326369667e-03, -1.164181076715241e-02, -1.140835240628945e-02, -1.112071181324493e-02, -1.101832821444936e-02, -1.106498420780894e-02, -1.106498420780894e-02, -6.103262010903574e-03, -8.605503787163706e-02, -6.517616591326436e-02, -4.119612978215059e-02, -5.311633377589745e-02, -5.311633377589749e-02, -1.639896733677447e-02, -2.221642212021881e+01, -5.950345578217945e+00, -5.877754674397059e-02, -1.407804577424614e+00, -1.407804577424618e+00, -1.196354947894446e+03, -5.647696839597899e+05, -8.505938432795150e+04, -2.107200162047810e+00, -3.009411590601932e+04, -3.009411590601943e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
