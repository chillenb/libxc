
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_x3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645810948758098e+01, -1.645813266329900e+01, -1.645828591689643e+01, -1.645794007365052e+01, -1.645811414933655e+01, -1.645811414933655e+01, -2.779303504056163e+00, -2.779277735896463e+00, -2.778748678894227e+00, -2.780185265363709e+00, -2.779338381509224e+00, -2.779338381509224e+00, -5.852477056956188e-01, -5.850917679081200e-01, -5.822063845664018e-01, -5.862408811015947e-01, -5.853365855412258e-01, -5.853365855412258e-01, -1.768761548147834e-01, -1.785987113206676e-01, -6.731379805529228e-01, -1.434811425430168e-01, -1.691418944217492e-01, -1.691418944217491e-01, -3.767710910817571e-02, -3.778577167363506e-02, -7.117292742822552e-02, -3.385311660968345e-02, -3.435536100163975e-02, -3.435536100163973e-02, -4.012411026963862e+00, -4.012000171393865e+00, -4.012400226504620e+00, -4.012037399275976e+00, -4.012198368561698e+00, -4.012198368561698e+00, -1.693321787461056e+00, -1.701660617592076e+00, -1.692877382149563e+00, -1.700244698131598e+00, -1.698151286252778e+00, -1.698151286252778e+00, -4.978202145071781e-01, -5.201124526125347e-01, -4.653343280774071e-01, -4.665085985143508e-01, -5.036328454984818e-01, -5.036328454984818e-01, -1.086089486846311e-01, -1.820260216880533e-01, -1.032211592451945e-01, -1.484133022655686e+00, -1.223488776744277e-01, -1.223488776744277e-01, -3.042145459933560e-02, -3.263766170648521e-02, -2.154573501350615e-02, -8.314285414253182e-02, -2.613328435080475e-02, -2.613328435080477e-02, -4.784052422437932e-01, -4.803904345269980e-01, -4.797432121163366e-01, -4.791662877543297e-01, -4.794589601804283e-01, -4.794589601804283e-01, -4.648108380781849e-01, -4.350405051505900e-01, -4.445437887757148e-01, -4.530379422734719e-01, -4.486837657557736e-01, -4.486837657557736e-01, -5.445579017018857e-01, -2.221472919308695e-01, -2.569985203434069e-01, -3.152167632275830e-01, -2.844533646137921e-01, -2.844533646137921e-01, -4.027534818548831e-01, -7.084388708034497e-02, -7.703755256788139e-02, -2.990682181618844e-01, -9.413327057181216e-02, -9.413327057181216e-02, -4.290310495221440e-02, -1.854357087952413e-02, -2.449670024139736e-02, -9.082882905537000e-02, -2.457176348705978e-02, -2.457176348705977e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_x3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.989635474179267e+01, -1.989633106436446e+01, -1.989643835695266e+01, -1.989639209402177e+01, -1.989669342243682e+01, -1.989675943171467e+01, -1.989574559484535e+01, -1.989555567480874e+01, -1.989640242402540e+01, -1.989602915750925e+01, -1.989640242402540e+01, -1.989602915750925e+01, -3.273067709641974e+00, -3.273133428620048e+00, -3.273094278199244e+00, -3.273161009081184e+00, -3.273750262652865e+00, -3.273914666085048e+00, -3.273135878851012e+00, -3.273294587352524e+00, -3.272537106817061e+00, -3.273882959765435e+00, -3.272537106817061e+00, -3.273882959765435e+00, -6.715496528861349e-01, -6.731994180149343e-01, -6.705703585407218e-01, -6.725713188801073e-01, -6.539518235381325e-01, -6.520359471151924e-01, -6.577060674129935e-01, -6.583134001872399e-01, -6.688270919271876e-01, -6.509525364814422e-01, -6.688270919271876e-01, -6.509525364814422e-01, -2.012577637458474e-01, -2.016751582349537e-01, -2.027105554447697e-01, -2.034233228175722e-01, -7.678753858526608e-01, -7.862044327386570e-01, -1.710645955351594e-01, -1.714636655111970e-01, -1.733328820513014e-01, -1.873467816470278e-01, -1.733328820513013e-01, -1.873467816470278e-01, -1.298187043919419e-02, -1.298242590088486e-02, -1.333921317565431e-02, -1.332852847090111e-02, -5.389523796700001e-02, -5.598138490770531e-02, -9.562921245177353e-03, -9.585404577337441e-03, -1.081072108602678e-02, -9.630974487362821e-03, -1.081072108602676e-02, -9.630974487362814e-03, -4.950960632419875e+00, -4.949805235600569e+00, -4.952836364001553e+00, -4.951621039112564e+00, -4.951064210572981e+00, -4.949869241147120e+00, -4.952676494795789e+00, -4.951515860389996e+00, -4.951920150004790e+00, -4.950717607092060e+00, -4.951920150004790e+00, -4.950717607092060e+00, -1.827495091046240e+00, -1.827419011989294e+00, -1.841344908089116e+00, -1.840928199036586e+00, -1.814770420434637e+00, -1.817375944968486e+00, -1.826695407380815e+00, -1.829466422265465e+00, -1.844153382495688e+00, -1.837099921728587e+00, -1.844153382495688e+00, -1.837099921728587e+00, -6.013286256231239e-01, -6.002990883347957e-01, -6.623674808455753e-01, -6.627499155972422e-01, -5.509795875685006e-01, -5.641440590205047e-01, -5.824039889510495e-01, -5.951180326710294e-01, -6.213295678530273e-01, -6.003696871154321e-01, -6.213295678530273e-01, -6.003696871154323e-01, -1.434738218487316e-01, -1.428506623803193e-01, -2.162152491280392e-01, -2.162484704947651e-01, -1.342959955563833e-01, -1.348887031163761e-01, -1.897316406373555e+00, -1.896605439388283e+00, -1.521430546689868e-01, -1.454592760745652e-01, -1.521430546689868e-01, -1.454592760745652e-01, -8.018960813691332e-03, -8.172094728652643e-03, -9.249023035468609e-03, -9.334649470988547e-03, -6.642167969636647e-03, -6.582483465508500e-03, -9.445837939323605e-02, -9.512686548836714e-02, -7.858036467362276e-03, -7.973087915507738e-03, -7.858036467362292e-03, -7.973087915507738e-03, -6.198797493104539e-01, -6.216065374815873e-01, -6.119468334216376e-01, -6.136792968276705e-01, -6.146285677309363e-01, -6.163737186782816e-01, -6.169422897694866e-01, -6.186582802555878e-01, -6.157763172242239e-01, -6.175066698867903e-01, -6.157763172242239e-01, -6.175066698867903e-01, -6.058700683575307e-01, -6.072576988734689e-01, -5.050447285931919e-01, -5.063046008434889e-01, -5.301282951096671e-01, -5.316504676575635e-01, -5.579134563669031e-01, -5.592401939780448e-01, -5.434823892137794e-01, -5.448054892602123e-01, -5.434823892137794e-01, -5.448054892602123e-01, -6.913465867138125e-01, -6.924160045945484e-01, -2.553510313347853e-01, -2.554070886465519e-01, -2.906895069631654e-01, -2.909897477078147e-01, -3.663020673255274e-01, -3.672741210093824e-01, -3.241956693161554e-01, -3.240237704069436e-01, -3.241956693161555e-01, -3.240237704069437e-01, -4.676150636579223e-01, -4.693767945297531e-01, -5.185759713963703e-02, -5.209965916995413e-02, -7.523965088865725e-02, -7.693747777170958e-02, -3.539752586955209e-01, -3.566909237425496e-01, -1.135753058391092e-01, -1.104297298973460e-01, -1.135753058391092e-01, -1.104297298973460e-01, -1.645421434850873e-02, -1.641202849961230e-02, -4.168551491512895e-03, -3.855692826510491e-03, -6.245157454096175e-03, -6.228750244664772e-03, -1.069660000690220e-01, -1.075004674253058e-01, -7.014436251587001e-03, -7.606381378995201e-03, -7.014436251587009e-03, -7.606381378995189e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_x3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.024924916639694e-08, 1.274841220400531e-11, -1.024930715495389e-08, -1.024919293511299e-08, 1.274823047238091e-11, -1.024926577588416e-08, -1.024888314785237e-08, 1.274736647542279e-11, -1.024886111552811e-08, -1.024952780904368e-08, 1.275007165712744e-11, -1.024967453728970e-08, -1.024922553902841e-08, 1.274866223890103e-11, -1.024925264344485e-08, -1.024922553902841e-08, 1.274866223890103e-11, -1.024925264344485e-08, -1.330791501146762e-05, 1.657293193164913e-07, -1.331300109179490e-05, -1.330830841733762e-05, 1.657274138540434e-07, -1.331377007228184e-05, -1.332154658552863e-05, 1.656617398173525e-07, -1.332483451871732e-05, -1.328994013445939e-05, 1.656083022711586e-07, -1.329412686396781e-05, -1.331410408373520e-05, 1.657069975174313e-07, -1.330565152011636e-05, -1.331410408373520e-05, 1.657069975174313e-07, -1.330565152011636e-05, -7.544870614393340e-03, 9.968888343506726e-04, -7.609317336889175e-03, -7.537086366070619e-03, 1.002657371163989e-03, -7.616116368927963e-03, -7.562438907938178e-03, 1.150373460032001e-03, -7.448553245398384e-03, -7.289917092127989e-03, 1.102151430546700e-03, -7.328374541152538e-03, -7.900380442467592e-03, 1.198986022658691e-03, -6.686195267551632e-03, -7.900380442467592e-03, 1.198986022658691e-03, -6.686195267551632e-03, -7.148286068698538e-01, 5.237215475391398e-01, -7.124303743950069e-01, -7.111084169092876e-01, 4.947517378668578e-01, -7.034902237787121e-01, -4.362843380145840e-03, 4.636096065591808e-04, -4.276234046523466e-03, -1.101882194120032e+00, 1.459710096552193e+00, -1.097870071372385e+00, -9.807717770517673e-01, 2.074734290418172e+00, -2.647229787301299e+00, -9.807717770517663e-01, 2.074734290418172e+00, -2.647229787301303e+00, -1.204082609032239e+04, 9.684775367362953e-08, -1.008302654400064e+04, -1.068176345275575e+04, 3.973989717299094e-07, -8.751625798509607e+03, -4.931356666013509e+01, 1.601444487446484e+01, -4.132134275633184e+01, -5.083378178610003e+04, 3.603236017519639e-17, -5.294713948199564e+04, -1.671307749302859e+04, 9.326980587136617e-13, -1.099468968405941e+05, -1.671307749302861e+04, 9.326980587136617e-13, -1.099468968405940e+05, -3.065565593858603e-06, 1.945555406866249e-08, -3.068148207534535e-06, -3.067886919919412e-06, 1.943669404045627e-08, -3.070390070384027e-06, -3.065663193687919e-06, 1.945461672339093e-08, -3.068200398927900e-06, -3.067652207596584e-06, 1.943796210891388e-08, -3.070240396119182e-06, -3.066779379534603e-06, 1.944603023265204e-08, -3.069277255125039e-06, -3.066779379534603e-06, 1.944603023265204e-08, -3.069277255125039e-06, -9.818465478190363e-05, 3.575069263774713e-06, -9.819814049396742e-05, -9.624397246160390e-05, 3.439603152897640e-06, -9.630765423128626e-05, -9.817305847621318e-05, 3.678408861723842e-06, -9.832800805931150e-05, -9.649528352749891e-05, 3.554296397529071e-06, -9.660870858775421e-05, -9.715552619036273e-05, 3.454732179023738e-06, -9.704743085190666e-05, -9.715552619036273e-05, 3.454732179023738e-06, -9.704743085190666e-05, -1.562085149497402e-02, 1.962926197205732e-03, -1.575258762469001e-02, -1.441449789254334e-02, 1.291652615070126e-03, -1.444685244592589e-02, -2.137205241419940e-02, 2.955438475549466e-03, -1.978733274337509e-02, -2.358083792844777e-02, 2.427365645631359e-03, -2.122736743167537e-02, -1.421665326814982e-02, 1.891289192823606e-03, -1.633483845775729e-02, -1.421665326814982e-02, 1.891289192823606e-03, -1.633483845775729e-02, -1.492884513375001e+00, 4.672332613877405e+00, -1.588301121211722e+00, -4.594999017522574e-01, 5.163342527799332e-01, -4.611959909015673e-01, -1.743257068350032e+00, 5.810119013608300e+00, -2.001036018910590e+00, -1.852329528878003e-04, 3.963724362218452e-06, -1.855619304215455e-04, -1.470609157585613e+00, 2.928628467615868e+00, -1.983362117953131e+00, -1.470609157585613e+00, 2.928628467615868e+00, -1.983362117953131e+00, -1.279926069268213e+05, 4.722123624337811e-24, -1.100209664655716e+05, -5.990068672036570e+04, 1.070248989804715e-17, -5.609700703724728e+04, -2.251632744942929e+05, 4.926759780077053e-25, -1.966739019226556e+05, -6.911055132885427e+00, 1.310566961663784e+01, -6.648993325700683e+00, -1.742494609143526e+05, 8.370591148110280e-20, -6.954486740858020e+04, -1.742494609143524e+05, 8.370591148110278e-20, -6.954486740858018e+04, -2.201134612224296e-02, 1.915918823075954e-03, -2.179288767746410e-02, -2.029085483988544e-02, 1.972193219356560e-03, -2.009300367670129e-02, -2.073206755681282e-02, 1.952175000667434e-03, -2.053022428132290e-02, -2.120057401407461e-02, 1.935857585043213e-03, -2.098654232673377e-02, -2.095073586883760e-02, 1.944004899477782e-03, -2.074279802240897e-02, -2.095073586883760e-02, 1.944004899477782e-03, -2.074279802240897e-02, -2.544113030673491e-02, 2.199517380716389e-03, -2.517207409278708e-02, -2.567934855362120e-02, 4.701539133860148e-03, -2.551520596379294e-02, -2.464060462992828e-02, 3.743589713690373e-03, -2.446860013000524e-02, -2.410340523960299e-02, 3.012267210982818e-03, -2.389909459369418e-02, -2.436410072007767e-02, 3.362270653332450e-03, -2.415474561897700e-02, -2.436410072007767e-02, 3.362270653332450e-03, -2.415474561897700e-02, -1.183619704259616e-02, 1.015981925553359e-03, -1.183990102755569e-02, -2.580687447267221e-01, 1.979824198523446e-01, -2.587991509854233e-01, -1.726061830285510e-01, 8.949003235367266e-02, -1.731766980613963e-01, -9.427666924751665e-02, 2.511682203233427e-02, -9.338901081224622e-02, -1.296635087946651e-01, 4.791151270691024e-02, -1.303261806989305e-01, -1.296635087946651e-01, 4.791151270691025e-02, -1.303261806989306e-01, -3.514141245076378e-02, 7.055722211964756e-03, -3.484905321678625e-02, -5.250507196970143e+01, 1.538650710494547e+01, -5.136605668912339e+01, -1.486108720251573e+01, 1.636437624724675e+01, -1.364415694467789e+01, -1.244275206171956e-01, 2.986584679475967e-02, -1.212022827467988e-01, -3.745864679086283e+00, 8.449952529618647e+00, -4.694686597039233e+00, -3.745864679086288e+00, 8.449952529618647e+00, -4.694686597039242e+00, -4.030111107352931e+03, 2.976623972623037e-04, -3.659083526741786e+03, -3.784534670189778e+06, 2.482449757338739e-85, -4.403732604710858e+06, -4.246226201518592e+05, 1.447874316882853e-36, -3.616499415775748e+05, -4.851721423739410e+00, 9.606168239664360e+00, -4.783922268695234e+00, -2.494241115739514e+05, 7.123747548715075e-22, -9.030396072752452e+04, -2.494241115739521e+05, 7.123747548714702e-22, -9.030396072752481e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
