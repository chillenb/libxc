
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.267139643306107e+00, -9.267152554629311e+00, -9.267238409097207e+00, -9.267045731046110e+00, -9.267142644438247e+00, -9.267142644438247e+00, -1.569752545017987e+00, -1.569740981219951e+00, -1.569511405462049e+00, -1.570201350867852e+00, -1.569775655015862e+00, -1.569775655015862e+00, -3.342744313763954e-01, -3.340497860963129e-01, -3.294699983924818e-01, -3.318127201671731e-01, -3.318605562451900e-01, -3.318605562451900e-01, -1.010138504572755e-01, -1.020597099205508e-01, -3.843507596901334e-01, -8.219681917567853e-02, -9.493823959258595e-02, -9.493823959258590e-02, -4.446614683304325e-03, -4.682262811545047e-03, -2.542406282941356e-02, -2.564795525687327e-03, -3.579223126821054e-03, -3.579223126821054e-03, -2.274018982112537e+00, -2.273958710060944e+00, -2.274019925471541e+00, -2.273966634292463e+00, -2.273986195645225e+00, -2.273986195645225e+00, -9.509924890499601e-01, -9.557712312267651e-01, -9.505913386674972e-01, -9.547982705246102e-01, -9.538536551760315e-01, -9.538536551760315e-01, -2.943408053048508e-01, -3.212051230637428e-01, -2.745854528950351e-01, -2.878393476777031e-01, -2.989799639661339e-01, -2.989799639661339e-01, -6.163319051856646e-02, -1.049487064629489e-01, -5.757926778787463e-02, -8.697864262023725e-01, -6.940053182361078e-02, -6.940053182361078e-02, -1.980216304486483e-03, -2.507225981244358e-03, -1.919884029486225e-03, -4.006936236206975e-02, -2.411614012380254e-03, -2.411614012380259e-03, -3.028104989271079e-01, -2.987536815319614e-01, -3.000872889720916e-01, -3.012626710658019e-01, -3.006659946659276e-01, -3.006659946659276e-01, -2.965924951379539e-01, -2.517634260362111e-01, -2.620840366458843e-01, -2.739839559020306e-01, -2.676783804116269e-01, -2.676783804116269e-01, -3.344290707589551e-01, -1.270457181317965e-01, -1.465581919788978e-01, -1.843403710037166e-01, -1.635494143221882e-01, -1.635494143221881e-01, -2.337119047067330e-01, -2.434798445512750e-02, -3.282622139347288e-02, -1.789152390044271e-01, -4.957107951327155e-02, -4.957107951327157e-02, -6.264994346088253e-03, -6.702373799318142e-04, -1.409420379815330e-03, -4.689194443499595e-02, -2.214719244199143e-03, -2.214719244199137e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.118998511355205e+01, -1.118997221739573e+01, -1.119003697507428e+01, -1.119001025264290e+01, -1.119018975703865e+01, -1.119023097170271e+01, -1.118959961809668e+01, -1.118948417533497e+01, -1.119001238344957e+01, -1.118977564883511e+01, -1.119001238344957e+01, -1.118977564883511e+01, -1.885316830545833e+00, -1.885399503425373e+00, -1.885341658793141e+00, -1.885427817913942e+00, -1.885974924343569e+00, -1.886111333141030e+00, -1.885167967203060e+00, -1.885307330104685e+00, -1.885006175820782e+00, -1.885859646334633e+00, -1.885006175820782e+00, -1.885859646334633e+00, -4.118523027487066e-01, -4.136726831492481e-01, -4.108103830797510e-01, -4.130298610062150e-01, -3.922936654602989e-01, -3.897406595727860e-01, -3.938864719153489e-01, -3.947159767572971e-01, -4.075810421458638e-01, -3.834415880451729e-01, -4.075810421458638e-01, -3.834415880451729e-01, -1.161614320346650e-01, -1.172568801786297e-01, -1.184274782395892e-01, -1.197775604579212e-01, -4.677821785444631e-01, -4.819573756957808e-01, -8.976510936369850e-02, -9.036870419541038e-02, -1.018001222720079e-01, -8.505870807075935e-02, -1.018001222720078e-01, -8.505870807075930e-02, -5.726657996295969e-03, -6.083945885355230e-03, -5.999542009016439e-03, -6.425202238236144e-03, -3.200947429352864e-02, -3.361884517548958e-02, -3.446338081491471e-03, -3.389005959581403e-03, -5.110513662728342e-03, -2.910149262786824e-03, -5.110513662728341e-03, -2.910149262786822e-03, -2.857702161398006e+00, -2.857051728121069e+00, -2.859122698470113e+00, -2.858431244007401e+00, -2.857777690447989e+00, -2.857100339513109e+00, -2.859001754680509e+00, -2.858348238829010e+00, -2.858429520093237e+00, -2.857746007296725e+00, -2.858429520093237e+00, -2.857746007296725e+00, -1.035315138391031e+00, -1.035268052425339e+00, -1.044039589319545e+00, -1.043777591366258e+00, -1.025700490362884e+00, -1.027631375740060e+00, -1.033168283121980e+00, -1.035201120427080e+00, -1.046918720794572e+00, -1.041797142481062e+00, -1.046918720794572e+00, -1.041797142481062e+00, -3.863546089222815e-01, -3.858568264389194e-01, -4.240778833877258e-01, -4.243494359358878e-01, -3.554661670898626e-01, -3.631952828918696e-01, -3.783371515340437e-01, -3.841459170713432e-01, -3.985842956093165e-01, -3.875289715246913e-01, -3.985842956093166e-01, -3.875289715246914e-01, -7.105717927913396e-02, -7.122066052149094e-02, -1.137273273199663e-01, -1.139372114797573e-01, -6.612400552014433e-02, -6.812035226448648e-02, -1.145207850423833e+00, -1.144844129283552e+00, -7.778087936081170e-02, -7.658086748128742e-02, -7.778087936081170e-02, -7.658086748128742e-02, -2.585922053595406e-03, -2.687394323578428e-03, -3.315949188567758e-03, -3.366156304526297e-03, -2.479074932095045e-03, -2.625036611174044e-03, -4.918360488725958e-02, -4.952123338290084e-02, -2.532543258622201e-03, -3.476180951777019e-03, -2.532543258622208e-03, -3.476180951777028e-03, -3.944934730034433e-01, -3.952989954198016e-01, -3.938235324666290e-01, -3.946773515817131e-01, -3.943192562060014e-01, -3.951667785545332e-01, -3.945385292387000e-01, -3.953520780459037e-01, -3.944538752760570e-01, -3.952839780846797e-01, -3.944538752760570e-01, -3.952839780846797e-01, -3.842330561005085e-01, -3.848529001506754e-01, -3.196865329635556e-01, -3.205607012133384e-01, -3.423423590281719e-01, -3.433220999695215e-01, -3.633423123595662e-01, -3.640444018593259e-01, -3.531290437455615e-01, -3.538608620151604e-01, -3.531290437455615e-01, -3.538608620151604e-01, -4.417529441498859e-01, -4.424083473417305e-01, -1.402391003986061e-01, -1.405127414911344e-01, -1.700770678104812e-01, -1.706964069087865e-01, -2.379822485098229e-01, -2.386272460352644e-01, -2.019000339237002e-01, -2.018696823434691e-01, -2.019000339237002e-01, -2.018696823434690e-01, -2.978700591640620e-01, -2.991529950459916e-01, -3.150950120953110e-02, -3.170587340387414e-02, -4.111552170579608e-02, -4.223511224062758e-02, -2.368602415272984e-01, -2.385475445177315e-01, -5.794880524352899e-02, -5.868646125372896e-02, -5.794880524352900e-02, -5.868646125372898e-02, -8.180092921696341e-03, -8.474376818842871e-03, -8.925808417353044e-04, -8.945957417617467e-04, -1.815854498592180e-03, -1.931220194799016e-03, -5.553550391706282e-02, -5.617603775306292e-02, -2.398442061375937e-03, -3.186689541370792e-03, -2.398442061375932e-03, -3.186689541370786e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.012309470330810e-09, 3.855567579455844e-10, -6.012343832564278e-09, -6.012255877615699e-09, 3.855637563905792e-10, -6.012303924205711e-09, -6.012034726439920e-09, 3.855734091993355e-10, -6.012004818079150e-09, -6.012653706373562e-09, 3.854697494807899e-10, -6.012779081366424e-09, -6.012297249590819e-09, 3.855271085313426e-10, -6.012420368782629e-09, -6.012297249590819e-09, 3.855271085313426e-10, -6.012420368782629e-09, -7.292610379521741e-06, 2.158879157656427e-06, -7.295134502630124e-06, -7.292542358649171e-06, 2.159323527660124e-06, -7.295262852486498e-06, -7.293237648835231e-06, 2.169371669283230e-06, -7.294541333354910e-06, -7.287632862588445e-06, 2.149943255801801e-06, -7.289436748973873e-06, -7.297258312656870e-06, 2.159156568071321e-06, -7.289200821958612e-06, -7.297258312656870e-06, 2.159156568071321e-06, -7.289200821958612e-06, -3.542590933984526e-03, 3.586683876242116e-03, -3.545018543990281e-03, -3.559269722099092e-03, 3.559577090514688e-03, -3.562560885047803e-03, -3.932948681509394e-03, 2.876045381924161e-03, -3.914215338739025e-03, -3.806351488034542e-03, 2.810968523930000e-03, -3.814509231655616e-03, -3.875640528235974e-03, 2.852692094259074e-03, -3.579844392431350e-03, -3.875640528235974e-03, 2.852692094259074e-03, -3.579844392431350e-03, -4.113466731330919e-01, 3.108902575321890e-01, -3.771664159942879e-01, -4.052875314613286e-01, 3.280826843588528e-01, -3.635005434861176e-01, -2.120677095948315e-03, 1.940414170439823e-03, -1.905954098742751e-03, -6.381934431871090e-01, 2.258949661124237e-01, -6.145320262596409e-01, -3.945501076417799e-01, 1.882246441728870e-01, -9.724534762627060e-01, -3.945501076417797e-01, 1.882246441728873e-01, -9.724534762627067e-01, -2.152279973911747e+00, 8.471332723898200e-03, -2.130664214724316e+00, -2.267224908768795e+00, 9.964515393423459e-03, -2.255601721198124e+00, -1.233266527956232e+00, 5.126941006152715e-02, -1.239988036812608e+00, -1.973769111175826e+00, 3.008683449168684e-03, -1.920148148749748e+00, -2.150701340089881e+00, 4.414566270491809e-03, -5.460347726651534e+00, -2.150701340089435e+00, 4.414566270088269e-03, -5.460347726651097e+00, -1.542935434163765e-06, 5.666948009101149e-07, -1.544623085361336e-06, -1.541253239668422e-06, 5.704413223836728e-07, -1.542935274992472e-06, -1.542857180048750e-06, 5.668443577206054e-07, -1.544544579055411e-06, -1.541367810851183e-06, 5.701514261968389e-07, -1.543059689389962e-06, -1.542091871210268e-06, 5.686004611431787e-07, -1.543765647380604e-06, -1.542091871210268e-06, 5.686004611431787e-07, -1.543765647380604e-06, -5.841627554234838e-05, 1.221811741084532e-05, -5.842764601466257e-05, -5.716371710956133e-05, 1.218856108878283e-05, -5.721841722630329e-05, -5.865014365040341e-05, 1.161795009824474e-05, -5.870058389452946e-05, -5.758609485916616e-05, 1.159619612758267e-05, -5.760303936036520e-05, -5.754641006372532e-05, 1.250231835492394e-05, -5.764719468468179e-05, -5.754641006372532e-05, 1.250231835492394e-05, -5.764719468468179e-05, -4.651784199582498e-03, 1.180452397706796e-02, -4.769338199202518e-03, -1.183837931652365e-03, 1.489938286408802e-02, -1.180273820842934e-03, -7.419069451728980e-03, 1.535577972946644e-02, -5.613156323502943e-03, -3.377554743523446e-03, 2.278859644535717e-02, -1.543415377789830e-03, -3.319571713541087e-03, 1.179162458306085e-02, -5.333428775500919e-03, -3.319571713541088e-03, 1.179162458306085e-02, -5.333428775500918e-03, -7.918556049560435e-01, 1.261488607621168e-01, -8.054321761594511e-01, -2.865394764496843e-01, 1.139695105238702e-01, -2.832781120572687e-01, -9.023966343810170e-01, 1.279112469154852e-01, -8.725565892774257e-01, -4.471203588934881e-05, 1.207887057881010e-04, -4.490877024402702e-05, -8.066843751948789e-01, 2.409472748596690e-01, -9.787317458507989e-01, -8.066843751948789e-01, 2.409472748596690e-01, -9.787317458507989e-01, -2.771447660560112e+00, 2.933546798259037e-03, -2.398587839348599e+00, -2.385858188298919e+00, 3.699144102256803e-03, -2.202665494107138e+00, -1.358222012118984e+01, 3.685108437354808e-02, -1.511141755479795e+01, -1.377453706242009e+00, 1.250822448857004e-01, -1.325020927403080e+00, -6.756289239831925e+00, 1.410360645889085e-02, -6.636294825871579e+00, -6.756289239828616e+00, 1.410360646869916e-02, -6.636294825868281e+00, 3.103738125434258e-04, 2.514346072918196e-02, 4.922245311951567e-04, -1.397747362357213e-03, 2.157065992117518e-02, -1.220084725748121e-03, -8.580977957213121e-04, 2.270457728491302e-02, -6.791659650437400e-04, -3.644101467916282e-04, 2.373865089872573e-02, -1.838768202152598e-04, -6.170259503141366e-04, 2.321019190891285e-02, -4.372605398208027e-04, -6.170259503141366e-04, 2.321019190891285e-02, -4.372605398208027e-04, 1.093328935328063e-03, 2.977269840520045e-02, 1.273265518975577e-03, -1.070764407701055e-02, 1.592277215307748e-02, -1.046024405537434e-02, -8.046590131330113e-03, 1.838749842245184e-02, -7.806700248633967e-03, -5.011139247929701e-03, 2.169730037966074e-02, -4.806216565543734e-03, -6.601405156632592e-03, 1.995497716545398e-02, -6.378143179937538e-03, -6.601405156632592e-03, 1.995497716545398e-02, -6.378143179937538e-03, -1.211527234914039e-03, 1.183264719377924e-02, -1.180624787778705e-03, -1.583979603055465e-01, 8.498631964250428e-02, -1.562556631100872e-01, -9.807299452024994e-02, 7.821972418059023e-02, -9.586213331758513e-02, -3.687854737531811e-02, 6.964082434152352e-02, -3.558102843964976e-02, -6.247397842201863e-02, 7.796350422599263e-02, -6.304296164262788e-02, -6.247397842201866e-02, 7.796350422599266e-02, -6.304296164262796e-02, -1.443297401089003e-02, 2.285950305464996e-02, -1.392577034541525e-02, -1.130686281650026e+00, 4.213028450134424e-02, -1.132008238930942e+00, -1.099943762080549e+00, 6.458066222247318e-02, -1.123910554313286e+00, -3.807736851173284e-02, 1.099497136873529e-01, -3.360703401617168e-02, -1.314803963106872e+00, 2.182010199987041e-01, -1.549803841656557e+00, -1.314803963106872e+00, 2.182010199987039e-01, -1.549803841656556e+00, -1.703703548912932e+00, 1.056259116938041e-02, -1.739352826952555e+00, -8.529739910104739e+00, 4.011531506685853e-03, -1.511068215301781e+01, -5.263140049354116e+00, 5.020763908060611e-03, -5.603126393447059e+00, -1.489683545444464e+00, 2.002688123716920e-01, -1.455710504380613e+00, -1.393500014265995e+01, 1.800188742308661e-02, -6.887642564483484e+00, -1.393500014265630e+01, 1.800188743452388e-02, -6.887642564479827e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
