
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.559129631988827e+01, -1.559131772841075e+01, -1.559146236794093e+01, -1.559114283690564e+01, -1.559130323171714e+01, -1.559130323171714e+01, -2.478059501669729e+00, -2.478036312670581e+00, -2.477564387057151e+00, -2.478879989093456e+00, -2.478094678397227e+00, -2.478094678397227e+00, -3.909938181995952e-01, -3.907207566610360e-01, -3.855734378994507e-01, -3.893306080783142e-01, -3.898187188117955e-01, -3.898187188117955e-01, -4.552507705394816e-02, -4.674976077502965e-02, -4.729076850492710e-01, -2.604783087396989e-02, -4.004392019965437e-02, -4.004392019965439e-02, -1.620195459234784e-06, -1.894673166755927e-06, -3.842996203002297e-04, -3.089632100796563e-07, -9.033530364749447e-07, -9.033530364749448e-07, -3.666252719248067e+00, -3.666004957760795e+00, -3.666248349354965e+00, -3.666029485486640e+00, -3.666123048048127e+00, -3.666123048048127e+00, -1.438235338395515e+00, -1.446055157375617e+00, -1.438255720154406e+00, -1.445148556197822e+00, -1.442577417265767e+00, -1.442577417265767e+00, -3.218174993736400e-01, -3.591219790550793e-01, -2.910526755989523e-01, -3.075667295195177e-01, -3.287442893127467e-01, -3.287442893127467e-01, -1.031667855480271e-02, -4.926879738307913e-02, -8.169019023246019e-03, -1.268174776423916e+00, -1.563495617222402e-02, -1.563495617222402e-02, -1.422612107766683e-07, -2.886617207230907e-07, -1.304751195945121e-07, -2.133203210412354e-03, -2.700883779753398e-07, -2.700883779789107e-07, -3.281997413240157e-01, -3.236181553442418e-01, -3.251247806235204e-01, -3.264513915500536e-01, -3.257778642761111e-01, -3.257778642761111e-01, -3.179846436680175e-01, -2.572077327940998e-01, -2.716130523999943e-01, -2.879038764311122e-01, -2.792917461651029e-01, -2.792917461651029e-01, -3.804440393059659e-01, -7.624620299665776e-02, -1.018690375090149e-01, -1.544815114148053e-01, -1.249943427275108e-01, -1.249943427275108e-01, -2.289598079260657e-01, -3.274639792074450e-04, -9.810755674981731e-04, -1.464618473963226e-01, -4.868296775983146e-03, -4.868296775983112e-03, -4.540980325040806e-06, -5.506084047121741e-09, -5.138362705915570e-08, -3.939928187044457e-03, -2.079432414996030e-07, -2.079432414938136e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.881502097329868e+01, -1.881499888208031e+01, -1.881510856238109e+01, -1.881506286603582e+01, -1.881536650838321e+01, -1.881543683549106e+01, -1.881437312539341e+01, -1.881417599619459e+01, -1.881507001317695e+01, -1.881466622582925e+01, -1.881507001317695e+01, -1.881466622582925e+01, -2.969911595143665e+00, -2.970052712579189e+00, -2.969949772981650e+00, -2.970096770591030e+00, -2.970931274662856e+00, -2.971166359678526e+00, -2.969722428970875e+00, -2.969962231012251e+00, -2.969362565283993e+00, -2.970846124453426e+00, -2.969362565283993e+00, -2.970846124453426e+00, -4.975902239402057e-01, -5.012927916208807e-01, -4.958615040624822e-01, -5.003905009417433e-01, -4.683351733619374e-01, -4.627704456081870e-01, -4.698726508720996e-01, -4.716848365861683e-01, -4.983734734427013e-01, -4.460259514333453e-01, -4.983734734427013e-01, -4.460259514333453e-01, -6.562804630603022e-02, -6.736831790790852e-02, -6.827751097529650e-02, -7.040772172929570e-02, -5.856973056439289e-01, -6.127197226831506e-01, -3.662994551781922e-02, -3.719470951283448e-02, -5.140815059680340e-02, -3.237489922147453e-02, -5.140815059680331e-02, -3.237489922147454e-02, -2.948569244780658e-06, -3.529920031433428e-06, -3.399815986673514e-06, -4.167391953642803e-06, -7.656339543265477e-04, -9.122023487171345e-04, -6.348574594894432e-07, -6.037924713282578e-07, -2.073619877605173e-06, -3.892845724872633e-07, -2.073619877602942e-06, -3.892845724850928e-07, -4.612335282488367e+00, -4.611203929259490e+00, -4.614637820002967e+00, -4.613435534625519e+00, -4.612459396594753e+00, -4.611281526638532e+00, -4.614440267630441e+00, -4.613303509532209e+00, -4.613514678413550e+00, -4.612326187637555e+00, -4.613514678413550e+00, -4.612326187637555e+00, -1.545706584585263e+00, -1.545624324701016e+00, -1.559853991851254e+00, -1.559395779009411e+00, -1.530963087330939e+00, -1.534295242626385e+00, -1.542993030809223e+00, -1.546517010836038e+00, -1.564464026128788e+00, -1.555466720705245e+00, -1.564464026128788e+00, -1.555466720705245e+00, -4.552431146611465e-01, -4.542610451118543e-01, -5.141930328815424e-01, -5.145975978417211e-01, -4.056233908880826e-01, -4.202096520857508e-01, -4.396656263100475e-01, -4.517497286951659e-01, -4.761172332183793e-01, -4.547701288229440e-01, -4.761172332183792e-01, -4.547701288229440e-01, -1.741151170907921e-02, -1.760979430119164e-02, -6.108649102062936e-02, -6.135623226871761e-02, -1.367498581902804e-02, -1.513500220662245e-02, -1.707395600672708e+00, -1.706727283233263e+00, -2.442915532718387e-02, -2.438343250968803e-02, -2.442915532718387e-02, -2.438343250968803e-02, -2.679476585021647e-07, -3.006038214569459e-07, -5.659494751805783e-07, -5.918927601064269e-07, -2.403532449924719e-07, -2.844136937535088e-07, -4.476786599535535e-03, -4.570336957201890e-03, -2.562188484155859e-07, -6.543454068946165e-07, -2.562188484214468e-07, -6.543454067126587e-07, -4.677916394510974e-01, -4.693993179315135e-01, -4.657442924438807e-01, -4.674032330639533e-01, -4.667627012492526e-01, -4.684167389508458e-01, -4.673860561114883e-01, -4.689993662149329e-01, -4.671030060162932e-01, -4.687359678210991e-01, -4.671030060162932e-01, -4.687359678210991e-01, -4.519325041641370e-01, -4.532188168213231e-01, -3.524240891657770e-01, -3.541016962945192e-01, -3.864407961773761e-01, -3.882648500989282e-01, -4.177871141861201e-01, -4.191372564064378e-01, -4.024968349484098e-01, -4.038928284008930e-01, -4.024968349484098e-01, -4.038928284008930e-01, -5.424440849828656e-01, -5.435476183482123e-01, -9.209930499674937e-02, -9.254391569145398e-02, -1.294997545159287e-01, -1.308981105222405e-01, -2.298219937474621e-01, -2.310556063389208e-01, -1.764847049240688e-01, -1.765998617973549e-01, -1.764847049240684e-01, -1.765998617973549e-01, -3.188687325916648e-01, -3.213531948466272e-01, -7.081060700964323e-04, -7.238986337791907e-04, -2.039627071813863e-03, -2.261503807610384e-03, -2.274727958472958e-01, -2.305957105628779e-01, -9.004236534833255e-03, -9.722100130645693e-03, -9.004236534833242e-03, -9.722100130645625e-03, -8.677824350271758e-06, -9.640456399841906e-06, -1.099199714616039e-08, -1.106733034461437e-08, -9.281863034997584e-08, -1.115716766506374e-07, -7.695238774962247e-03, -7.993920718253864e-03, -2.179350917208048e-07, -5.044281864629661e-07, -2.179350924568653e-07, -5.044281870398511e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.038513222729465e-08, 3.855567579455844e-10, -1.038519084999964e-08, -1.038504391874903e-08, 3.855637563905792e-10, -1.038512570880984e-08, -1.038467141667956e-08, 3.855734091993355e-10, -1.038462100804152e-08, -1.038568347818910e-08, 3.854697494807899e-10, -1.038589596503605e-08, -1.038510133587677e-08, 3.855271085313426e-10, -1.038530746648096e-08, -1.038510133587677e-08, 3.855271085313426e-10, -1.038530746648096e-08, -1.312208240056387e-05, 2.158879157656427e-06, -1.312626915005787e-05, -1.312211067863450e-05, 2.159323527660124e-06, -1.312662426005518e-05, -1.312645580039337e-05, 2.169371669283230e-06, -1.312858043814824e-05, -1.311078575050363e-05, 2.149943255801801e-06, -1.311374709243440e-05, -1.313007122456327e-05, 2.159156568071321e-06, -1.311626682686178e-05, -1.313007122456327e-05, 2.159156568071321e-06, -1.311626682686178e-05, -6.179543764177044e-03, 3.586683876242116e-03, -6.129880288731909e-03, -6.215444411965424e-03, 3.559577090514688e-03, -6.155087839556863e-03, -6.829486693640622e-03, 2.876045381924161e-03, -6.878136148685815e-03, -6.668413731403105e-03, 2.810968523930000e-03, -6.655787712343542e-03, -6.367669423089736e-03, 2.852692094259074e-03, -6.629090518520238e-03, -6.367669423089736e-03, 2.852692094259074e-03, -6.629090518520238e-03, -3.515369781843066e-01, 3.108902575321890e-01, -3.291643304890498e-01, -3.433372477074813e-01, 3.280826843588528e-01, -3.150239992394668e-01, -3.799478642892921e-03, 1.940414170439823e-03, -3.391041421199054e-03, -4.498469560892830e-01, 2.258949661124237e-01, -4.420386722816354e-01, -3.649472303214112e-01, 1.882246441728870e-01, -4.110450732579510e-01, -3.649472303214126e-01, 1.882246441728873e-01, -4.110450732579533e-01, 4.232707678188586e-03, 8.471332723898200e-03, 4.231666150956916e-03, 4.978296246132154e-03, 9.964515393423459e-03, 4.976630497500483e-03, 5.516363929643230e-03, 5.126941006152715e-02, -4.013861627799251e-04, 1.504114811625657e-03, 3.008683449168684e-03, 1.504137516130619e-03, 2.205624521350249e-03, 4.414566270491809e-03, 2.206993633191756e-03, 2.205624521802151e-03, 4.414566270088269e-03, 2.206993633644066e-03, -2.818436172943387e-06, 5.666948009101149e-07, -2.821300698527809e-06, -2.816738419927604e-06, 5.704413223836728e-07, -2.819598361247741e-06, -2.818348010695182e-06, 5.668443577206054e-07, -2.821215198686170e-06, -2.816845491442207e-06, 5.701514261968389e-07, -2.819717265604083e-06, -2.817592435778068e-06, 5.686004611431787e-07, -2.820437806372355e-06, -2.817592435778068e-06, 5.686004611431787e-07, -2.820437806372355e-06, -1.035375240028995e-04, 1.221811741084532e-05, -1.035567992392763e-04, -1.013972406935293e-04, 1.218856108878283e-05, -1.014901401964513e-04, -1.037232814003147e-04, 1.161795009824474e-05, -1.038131166108744e-04, -1.019177381226560e-04, 1.159619612758267e-05, -1.019474939008539e-04, -1.021315329979092e-04, 1.250231835492394e-05, -1.023270838391196e-04, -1.021315329979092e-04, 1.250231835492394e-05, -1.023270838391196e-04, -7.672940458648018e-03, 1.180452397706796e-02, -7.801487074293280e-03, -2.818445499100597e-03, 1.489938286408802e-02, -2.798886622526649e-03, -1.126830925933523e-02, 1.535577972946644e-02, -9.096971645813641e-03, -5.244489160459082e-03, 2.278859644535717e-02, -3.480644696624964e-03, -5.977066692684872e-03, 1.179162458306085e-02, -8.297756531939687e-03, -5.977066692684888e-03, 1.179162458306085e-02, -8.297756531939694e-03, -3.240871681968718e-01, 1.261488607621168e-01, -3.361758606772601e-01, -2.982609102948807e-01, 1.139695105238702e-01, -2.961186176306698e-01, -2.883174310078416e-01, 1.279112469154852e-01, -3.179788743833017e-01, -1.056795517141263e-04, 1.207887057881010e-04, -1.059723785511893e-04, -3.955735880032374e-01, 2.409472748596690e-01, -5.175334516362180e-01, -3.955735880032374e-01, 2.409472748596690e-01, -5.175334516362180e-01, 1.466686784067704e-03, 2.933546798259037e-03, 1.466684459278814e-03, 1.849342606969422e-03, 3.699144102256803e-03, 1.849344984745339e-03, 1.842518906769828e-02, 3.685108437354808e-02, 1.842503616161532e-02, -1.182364317665438e-01, 1.250822448857004e-01, -1.158927102608504e-01, 7.051610459235450e-03, 1.410360645889085e-02, 7.051007574350347e-03, 7.051610462522341e-03, 1.410360646869916e-02, 7.051007577647717e-03, -8.086816917859362e-04, 2.514346072918196e-02, -6.273880134828810e-04, -3.036994181448290e-03, 2.157065992117518e-02, -2.848701384619835e-03, -2.329183837157491e-03, 2.270457728491302e-02, -2.142233378798446e-03, -1.684607936482898e-03, 2.373865089872573e-02, -1.501536411572021e-03, -2.013966213996960e-03, 2.321019190891285e-02, -1.828935485558715e-03, -2.013966213996960e-03, 2.321019190891285e-02, -1.828935485558715e-03, 2.979128701172257e-04, 2.977269840520045e-02, 4.631217024850705e-04, -1.645168165590250e-02, 1.592277215307748e-02, -1.611395182750058e-02, -1.216614682114821e-02, 1.838749842245184e-02, -1.185913985320038e-02, -7.744437788619779e-03, 2.169730037966074e-02, -7.523077377219972e-03, -9.999112084572897e-03, 1.995497716545398e-02, -9.750199515308708e-03, -9.999112084572897e-03, 1.995497716545398e-02, -9.750199515308708e-03, -2.801732672814280e-03, 1.183264719377924e-02, -2.748385607352606e-03, -1.968016579911733e-01, 8.498631964250428e-02, -1.947322575364953e-01, -1.323004122257457e-01, 7.821972418059023e-02, -1.290526878020272e-01, -4.215976118669137e-02, 6.964082434152352e-02, -4.084283259475634e-02, -7.869505639422422e-02, 7.796350422599263e-02, -7.887235078215388e-02, -7.869505639422469e-02, 7.796350422599266e-02, -7.887235078215393e-02, -2.107515708210180e-02, 2.285950305464996e-02, -2.037696969785523e-02, 4.171616614971299e-03, 4.213028450134424e-02, 3.598737814565597e-03, -2.920370373367775e-02, 6.458066222247318e-02, -3.926416038015397e-02, -3.212601743358284e-02, 1.099497136873529e-01, -2.826532209257570e-02, -2.306828090972440e-01, 2.182010199987041e-01, -3.334501207448145e-01, -2.306828090972427e-01, 2.182010199987039e-01, -3.334501207448174e-01, 5.265939152880260e-03, 1.056259116938041e-02, 5.262306659016783e-03, 2.005762670880830e-03, 4.011531506685853e-03, 2.005760255773547e-03, 2.510346310903857e-03, 5.020763908060611e-03, 2.510332647460093e-03, -2.332533199123142e-01, 2.002688123716920e-01, -2.417395981018119e-01, 9.000630630240501e-03, 1.800188742308661e-02, 9.000391103586990e-03, 9.000630633937041e-03, 1.800188743452388e-02, 9.000391107267809e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
