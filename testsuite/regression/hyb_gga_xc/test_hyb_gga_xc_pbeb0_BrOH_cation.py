
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbeb0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.576864292972455e+01, -1.576866435415537e+01, -1.576880903954036e+01, -1.576848927234504e+01, -1.576864979443728e+01, -1.576864979443728e+01, -2.653867230861576e+00, -2.653843902364331e+00, -2.653368773838208e+00, -2.654690326343409e+00, -2.653902293466445e+00, -2.653902293466445e+00, -5.559092726804448e-01, -5.556925938236744e-01, -5.517242893637025e-01, -5.555550302284454e-01, -5.555956453377487e-01, -5.555956453377487e-01, -1.704268222925492e-01, -1.719469281726348e-01, -6.396732645601463e-01, -1.398443774011825e-01, -1.614735226722905e-01, -1.614735226722905e-01, -7.579457236228203e-03, -7.981130311663014e-03, -4.333693529140098e-02, -4.371810583317964e-03, -6.100948584224669e-03, -6.100948584224669e-03, -3.842316857356585e+00, -3.842059428861522e+00, -3.842312095176000e+00, -3.842084699266732e+00, -3.842182281198129e+00, -3.842182281198129e+00, -1.612479766682744e+00, -1.620351784116186e+00, -1.612402936856052e+00, -1.619343954950537e+00, -1.616894901792269e+00, -1.616894901792269e+00, -4.788124665217777e-01, -5.102528726399922e-01, -4.470953664281825e-01, -4.569946048075558e-01, -4.852714278615088e-01, -4.852714278615088e-01, -1.050482406204291e-01, -1.783283534317375e-01, -9.814315199899534e-02, -1.436261088806839e+00, -1.182138929580611e-01, -1.182138929580611e-01, -3.375368711831557e-03, -4.273680679670043e-03, -3.272529648618787e-03, -6.830220065301069e-02, -4.110705754827918e-03, -4.110705754827922e-03, -4.743755043186002e-01, -4.724300095880887e-01, -4.730656568656577e-01, -4.736269859967712e-01, -4.733413034580147e-01, -4.733413034580147e-01, -4.625292954825992e-01, -4.149621288500745e-01, -4.269032712048974e-01, -4.397341597229294e-01, -4.329636391993092e-01, -4.329636391993092e-01, -5.331043660947841e-01, -2.151196001979211e-01, -2.463934232270776e-01, -3.021803212889388e-01, -2.719070325502846e-01, -2.719070325502846e-01, -3.845863399472743e-01, -4.150260979928490e-02, -5.595490260567339e-02, -2.890230310348603e-01, -8.449442935878813e-02, -8.449442935878816e-02, -1.067896914473105e-02, -1.142450079708920e-03, -2.402421106605839e-03, -7.992999764659282e-02, -3.775089667505395e-03, -3.775089667505388e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbeb0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.899380690074690e+01, -1.899378483947739e+01, -1.899389450790385e+01, -1.899384882477600e+01, -1.899415245748524e+01, -1.899422285738765e+01, -1.899315902435402e+01, -1.899296177861084e+01, -1.899385619194367e+01, -1.899345188333602e+01, -1.899385619194367e+01, -1.899345188333602e+01, -3.144580880671644e+00, -3.144720987373985e+00, -3.144617773356533e+00, -3.144763707037145e+00, -3.145569210294913e+00, -3.145802955808118e+00, -3.144414091697045e+00, -3.144652476566604e+00, -3.144033173941260e+00, -3.145510247050562e+00, -3.144033173941260e+00, -3.145510247050562e+00, -6.520039731934321e-01, -6.552876493890083e-01, -6.505034467174414e-01, -6.545067609866094e-01, -6.272212982973304e-01, -6.226229858771899e-01, -6.293585768877823e-01, -6.308506293772772e-01, -6.537742981395045e-01, -6.102569476231356e-01, -6.537742981395045e-01, -6.102569476231356e-01, -1.863256115378200e-01, -1.885439490798823e-01, -1.888065841027875e-01, -1.915569298241172e-01, -7.431621702100917e-01, -7.689536869324799e-01, -1.506787558196598e-01, -1.517314516154977e-01, -1.708470101545405e-01, -1.406315521951263e-01, -1.708470101545404e-01, -1.406315521951262e-01, -9.761351443699903e-03, -1.037036479328185e-02, -1.022649551443981e-02, -1.095205257513061e-02, -5.456427103139231e-02, -5.730740251353234e-02, -5.874440095129606e-03, -5.776714889192221e-03, -8.711103281419658e-03, -4.960482311815737e-03, -8.711103281419656e-03, -4.960482311815742e-03, -4.785817754887639e+00, -4.784689346968745e+00, -4.788076545679855e+00, -4.786877620743676e+00, -4.785939954851094e+00, -4.784765294617466e+00, -4.787882514132563e+00, -4.786748719788818e+00, -4.786974827728217e+00, -4.785789635360779e+00, -4.786974827728217e+00, -4.785789635360779e+00, -1.724855393035040e+00, -1.724773631396778e+00, -1.738903108807493e+00, -1.738448231780802e+00, -1.710323705501339e+00, -1.713663387331214e+00, -1.722324763571496e+00, -1.725841395025409e+00, -1.743319964225141e+00, -1.734454029609377e+00, -1.743319964225141e+00, -1.734454029609377e+00, -5.997523925642589e-01, -5.987348821188578e-01, -6.624073577685418e-01, -6.629086502030762e-01, -5.480930453940092e-01, -5.634357767150433e-01, -5.845960952600473e-01, -5.970852706453521e-01, -6.212201645778823e-01, -5.989872055377257e-01, -6.212201645778825e-01, -5.989872055377258e-01, -1.209769186350187e-01, -1.212564908037380e-01, -1.893628857015251e-01, -1.897376216325654e-01, -1.126250081788081e-01, -1.160307322462514e-01, -1.868200673588417e+00, -1.867533388293450e+00, -1.317184762300364e-01, -1.297084802764031e-01, -1.317184762300364e-01, -1.297084802764031e-01, -4.407821755307790e-03, -4.580785850233614e-03, -5.652186313018298e-03, -5.737766622550531e-03, -4.225696259997335e-03, -4.474494564918921e-03, -8.383984473388154e-02, -8.441531436247260e-02, -4.316835486438110e-03, -5.925308762027863e-03, -4.316835486438116e-03, -5.925308762027868e-03, -6.177984700295938e-01, -6.195110979264099e-01, -6.127474981018410e-01, -6.145270346408191e-01, -6.146513689521864e-01, -6.164267633522479e-01, -6.161440322709120e-01, -6.178639475097747e-01, -6.154105356097174e-01, -6.171574403783242e-01, -6.154105356097174e-01, -6.171574403783242e-01, -6.027117045965039e-01, -6.040604893823502e-01, -4.961880854371978e-01, -4.978783932920462e-01, -5.281000036960927e-01, -5.300262152320457e-01, -5.601697873546513e-01, -5.616134357817484e-01, -5.441355700302202e-01, -5.456203450669312e-01, -5.441355700302202e-01, -5.456203450669312e-01, -6.910742575935394e-01, -6.923295060434081e-01, -2.291253382978867e-01, -2.296364237414210e-01, -2.703030644147765e-01, -2.715179618387474e-01, -3.624999150715501e-01, -3.638256361711337e-01, -3.126993777422984e-01, -3.126379574298904e-01, -3.126993777422983e-01, -3.126379574298902e-01, -4.600809407262530e-01, -4.625790652016537e-01, -5.371146747093852e-02, -5.404618149100904e-02, -7.008876641933420e-02, -7.199700591848124e-02, -3.558961266298596e-01, -3.595080861883008e-01, -9.871235430842110e-02, -9.997185766336542e-02, -9.871235430842108e-02, -9.997185766336544e-02, -1.394335007869072e-02, -1.444497012893054e-02, -1.521444618441956e-03, -1.524879107121071e-03, -3.095206562841825e-03, -3.291852634839156e-03, -9.463048698353130e-02, -9.572259735303934e-02, -4.088253856028744e-03, -5.431857463060102e-03, -4.088253856028735e-03, -5.431857463060094e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbeb0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.038106263882815e-08, 3.915832995150773e-10, -1.038112121081701e-08, -1.038097397153996e-08, 3.915898608211754e-10, -1.038105586913657e-08, -1.038060110182537e-08, 3.915981294387721e-10, -1.038055012166496e-08, -1.038161641892784e-08, 3.915009613964477e-10, -1.038183012630204e-08, -1.038103076859753e-08, 3.915548395884370e-10, -1.038124063085630e-08, -1.038103076859753e-08, 3.915548395884370e-10, -1.038124063085630e-08, -1.318671118807089e-05, 2.167657027323967e-06, -1.319101367064200e-05, -1.318677039887324e-05, 2.168064165250919e-06, -1.319140760427777e-05, -1.319192734770949e-05, 2.177248089161181e-06, -1.319414953723167e-05, -1.317477880829790e-05, 2.159321328254246e-06, -1.317785361463670e-05, -1.319475352663256e-05, 2.167890435459414e-06, -1.318101916748780e-05, -1.319475352663256e-05, 2.167890435459414e-06, -1.318101916748780e-05, -7.323424426094352e-03, 3.543831393625787e-03, -7.327562397695071e-03, -7.338854279222728e-03, 3.523626443906030e-03, -7.344464216067122e-03, -7.658795048180700e-03, 2.992539582518630e-03, -7.626863213913024e-03, -7.424367535596369e-03, 2.918886803805705e-03, -7.438272780405016e-03, -7.558161408711337e-03, 2.958631416777933e-03, -7.053963449953455e-03, -7.558161408711337e-03, 2.958631416777933e-03, -7.053963449953455e-03, -7.737816611812134e-01, 3.846814568393450e-01, -7.155198592400702e-01, -7.708595420936399e-01, 3.991748032243851e-01, -6.996317216813486e-01, -4.317014873305551e-03, 1.903075416462399e-03, -3.951009764432432e-03, -1.115938912851699e+00, 3.288298773988315e-01, -1.075606952179879e+00, -7.004299373913490e-01, 2.650347720180639e-01, -1.685492497540655e+00, -7.004299373913486e-01, 2.650347720180644e-01, -1.685492497540656e+00, -3.668353677512529e+00, 1.505050954486634e-02, -3.631508633443045e+00, -3.864229442786697e+00, 1.770190919619593e-02, -3.844417191245781e+00, -2.100903965787154e+00, 8.990081724501478e-02, -2.112361083155978e+00, -3.364269615132336e+00, 5.347540985068908e-03, -3.272870247360612e+00, -3.665807924427325e+00, 7.845366682609746e-03, -9.307250628793781e+00, -3.665807924426705e+00, 7.845366684511362e-03, -9.307250628793176e+00, -2.837477705396073e-06, 5.510087981356590e-07, -2.840354383573749e-06, -2.836109989346672e-06, 5.543955924211752e-07, -2.838977095012666e-06, -2.837404300382555e-06, 5.511437591521142e-07, -2.840280548689364e-06, -2.836189346125515e-06, 5.541333212135228e-07, -2.839073229998434e-06, -2.836802453184433e-06, 5.527318042511033e-07, -2.839655480747505e-06, -2.836802453184433e-06, 5.527318042511033e-07, -2.839655480747505e-06, -1.032283631464834e-04, 1.351600409716191e-05, -1.032477446333825e-04, -1.011099000871503e-04, 1.343246455508386e-05, -1.012031389225059e-04, -1.033888184163232e-04, 1.296935873391877e-05, -1.034747961051745e-04, -1.015907825631304e-04, 1.290091074745800e-05, -1.016196652356288e-04, -1.018750799994198e-04, 1.374155332338986e-05, -1.020468719669592e-04, -1.018750799994198e-04, 1.374155332338986e-05, -1.020468719669592e-04, -1.270761243347691e-02, 1.056447804707964e-02, -1.290798856919285e-02, -8.705671422537260e-03, 1.202114362207221e-02, -8.699596233657549e-03, -1.879486435788862e-02, 1.387717804488937e-02, -1.571660334386697e-02, -1.586720000153747e-02, 1.862418965443197e-02, -1.274082608267335e-02, -1.048944607190954e-02, 1.043718969165199e-02, -1.392215697297743e-02, -1.048944607190954e-02, 1.043718969165199e-02, -1.392215697297743e-02, -1.354346523953647e+00, 2.058411634691909e-01, -1.377488406686728e+00, -5.063829921649812e-01, 1.583393510505582e-01, -5.008238483142727e-01, -1.541786859401585e+00, 2.108089783744207e-01, -1.490923146156827e+00, -1.270410757894452e-04, 1.042350829099708e-04, -1.273764184394649e-04, -1.394960031568451e+00, 3.708458889928022e-01, -1.688222595186496e+00, -1.394960031568451e+00, 3.708458889928022e-01, -1.688222595186496e+00, -4.723951533982534e+00, 5.214320528376338e-03, -4.088395020553818e+00, -4.066669063891003e+00, 6.574691592995977e-03, -3.754408789700467e+00, -2.315017351416418e+01, 6.549046046634431e-02, -2.575676004872346e+01, -2.347665581477214e+00, 2.137421166530477e-01, -2.258291526638130e+00, -1.151588977683104e+01, 2.506491132933211e-02, -1.131135384394409e+01, -1.151588977682438e+01, 2.506491133916477e-02, -1.131135384393744e+01, -1.121324361808380e-02, 1.937359191853998e-02, -1.090327080220017e-02, -1.212623423198836e-02, 1.728074968242602e-02, -1.182340019231377e-02, -1.183307999708378e-02, 1.796015740871139e-02, -1.152808255842883e-02, -1.156921732849760e-02, 1.856748214807695e-02, -1.126149006728788e-02, -1.170386320380965e-02, 1.825859826773488e-02, -1.139744489046874e-02, -1.170386320380965e-02, 1.825859826773488e-02, -1.139744489046874e-02, -1.220009553746436e-02, 2.262146892713546e-02, -1.189338545170155e-02, -2.415963277329540e-02, 1.532515543141814e-02, -2.373792819096096e-02, -2.102986543433390e-02, 1.671415325368234e-02, -2.062096222519274e-02, -1.775535715286668e-02, 1.855674968663051e-02, -1.740605712607242e-02, -1.945555974002301e-02, 1.760783644958892e-02, -1.907499955247462e-02, -1.945555974002301e-02, 1.760783644958892e-02, -1.907499955247462e-02, -7.336724298069019e-03, 9.626042875919888e-03, -7.284049672270153e-03, -2.879907414495391e-01, 1.088746084422811e-01, -2.843390985027333e-01, -1.885134616761614e-01, 9.064190600180819e-02, -1.847449482625282e-01, -8.869214824883473e-02, 6.704397468214830e-02, -8.648046824485459e-02, -1.320006268663603e-01, 8.187055490937584e-02, -1.329704846287624e-01, -1.320006268663603e-01, 8.187055490937589e-02, -1.329704846287625e-01, -3.310245244897411e-02, 2.196347761869389e-02, -3.223790074646028e-02, -1.926211562988889e+00, 7.400218277459372e-02, -1.928464899263179e+00, -1.873803745143032e+00, 1.122814637768409e-01, -1.914656231903379e+00, -1.086247394826510e-01, 9.997401656450225e-02, -1.010048511379445e-01, -2.246580449207181e+00, 3.610588962659489e-01, -2.647148424007779e+00, -2.246580449207182e+00, 3.610588962659483e-01, -2.647148424007780e+00, -2.903663607926959e+00, 1.875748129742844e-02, -2.964429422767226e+00, -1.453918272186129e+01, 7.131178440668938e-03, -2.575669790864494e+01, -8.971078196862596e+00, 8.924622088597100e-03, -9.550600374293749e+00, -2.542713551567677e+00, 3.344068228770665e-01, -2.484804958845202e+00, -2.375218708399882e+01, 3.199317191658073e-02, -1.173964575756166e+01, -2.375218708400713e+01, 3.199317190466417e-02, -1.173964575756996e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
