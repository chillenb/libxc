
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2b_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.571063873791220e+01, -1.571066748473499e+01, -1.571083681353559e+01, -1.571036526155510e+01, -1.571065355459197e+01, -1.571065355459197e+01, -2.648665615671506e+00, -2.648657283991020e+00, -2.648535149656786e+00, -2.649293574487912e+00, -2.648672329524566e+00, -2.648672329524566e+00, -5.572230891206023e-01, -5.570196711051937e-01, -5.533280161582742e-01, -5.568115578223805e-01, -5.571470494469271e-01, -5.571470494469271e-01, -1.784792291772196e-01, -1.797465050013225e-01, -6.510440197007074e-01, -1.444735835311564e-01, -1.788455881847701e-01, -1.788455881847701e-01, -1.189026674230495e-02, -1.248668861682579e-02, -5.472501831330551e-02, -5.511487025026048e-03, -1.234874248964012e-02, -1.234874248964012e-02, -3.872348218836601e+00, -3.872562910939537e+00, -3.872373380882872e+00, -3.872540257178491e+00, -3.872453594525191e+00, -3.872453594525191e+00, -1.589898801912998e+00, -1.597733243534853e+00, -1.589822998628045e+00, -1.595880666084269e+00, -1.595456929499264e+00, -1.595456929499264e+00, -4.766635096385327e-01, -5.047263041872739e-01, -4.546555346605745e-01, -4.652245045620775e-01, -4.922664020199682e-01, -4.922664020199682e-01, -1.159697293272190e-01, -1.906562315789159e-01, -1.137234206811322e-01, -1.452355149827917e+00, -1.278141614973707e-01, -1.278141614973707e-01, -5.309654590327083e-03, -6.099494726086644e-03, -4.522780037238047e-03, -7.541243191167483e-02, -5.536984776086684e-03, -5.536984776086685e-03, -4.737290473260206e-01, -4.779290324755921e-01, -4.771372095674369e-01, -4.760923010374859e-01, -4.766743682784494e-01, -4.766743682784494e-01, -4.573882692363039e-01, -4.239939429011498e-01, -4.357047220618118e-01, -4.468802926357077e-01, -4.411116410360485e-01, -4.411116410360485e-01, -5.281434312662555e-01, -2.270949618245383e-01, -2.563682458944503e-01, -3.061344823801644e-01, -2.792696656628511e-01, -2.792696656628511e-01, -3.863481693331958e-01, -5.079047187078857e-02, -6.862878195843114e-02, -2.869789947152735e-01, -9.508812193245088e-02, -9.508812193245086e-02, -1.406729268814804e-02, -1.614430641215376e-03, -3.105463547640653e-03, -9.040947778385920e-02, -4.678066957013375e-03, -4.678066957013358e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2b_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.996951254122985e+01, -1.996957841875375e+01, -1.996988220590158e+01, -1.996880321730199e+01, -1.996954720012561e+01, -1.996954720012561e+01, -3.286272668602858e+00, -3.286305287336867e+00, -3.287332579013762e+00, -3.286240610888197e+00, -3.286303104487970e+00, -3.286303104487970e+00, -6.556202275606599e-01, -6.544722592780173e-01, -6.227549962931753e-01, -6.281545878915427e-01, -6.552043369063311e-01, -6.552043369063311e-01, -1.949417396150335e-01, -1.978800062596370e-01, -7.917576546328063e-01, -1.456725734523582e-01, -1.958312816793077e-01, -1.958312816793077e-01, -1.602131687836664e-02, -1.682197365194718e-02, -6.892614151313094e-02, -7.415093363146131e-03, -1.663531695698276e-02, -1.663531695698276e-02, -4.979473572215253e+00, -4.981079866893081e+00, -4.979639188385804e+00, -4.980888205622417e+00, -4.980296383375920e+00, -4.980296383375920e+00, -1.746929465080884e+00, -1.763638651182934e+00, -1.735125619377190e+00, -1.748211192076650e+00, -1.773423877715835e+00, -1.773423877715835e+00, -5.961220109601828e-01, -6.459836604951898e-01, -5.667149601178415e-01, -5.942743332891062e-01, -6.193431233220353e-01, -6.193431233220353e-01, -1.217084369609051e-01, -1.901289793899840e-01, -1.191899528034436e-01, -1.885075283469163e+00, -1.300175183561548e-01, -1.300175183561548e-01, -7.142119636623184e-03, -8.209987612232524e-03, -6.077193481171086e-03, -8.849840532863572e-02, -7.448385839670275e-03, -7.448385839670270e-03, -6.075833917040656e-01, -6.110382589203592e-01, -6.098214817157305e-01, -6.086396155667619e-01, -6.092383700742784e-01, -6.092383700742784e-01, -5.887610519235845e-01, -5.118223841706441e-01, -5.414283719583677e-01, -5.667184211375891e-01, -5.543489392366984e-01, -5.543489392366985e-01, -6.764413257888492e-01, -2.339770886825518e-01, -2.793298246348973e-01, -3.652565671980771e-01, -3.197802131537724e-01, -3.197802131537724e-01, -4.639362994301202e-01, -6.503551256371269e-02, -8.327409071646069e-02, -3.517119823108297e-01, -1.036072079221727e-01, -1.036072079221726e-01, -1.895493470286545e-02, -2.160299798121942e-03, -4.166184764775484e-03, -9.895745181230449e-02, -6.287356491736003e-03, -6.287356491735986e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2b_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.384192971235350e-09, -2.384155810706090e-09, -2.383993285899854e-09, -2.384601768686206e-09, -2.384173346802379e-09, -2.384173346802379e-09, -3.570261593998639e-06, -3.570108891172517e-06, -3.565330125651637e-06, -3.570558763217079e-06, -3.570122636745691e-06, -3.570122636745691e-06, -2.594451874428725e-03, -2.608019690717696e-03, -2.976490321619194e-03, -2.885096994770254e-03, -2.599379994828288e-03, -2.599379994828288e-03, -3.070524284252586e-01, -2.956705668946726e-01, -1.233698910828341e-03, -7.022114220322673e-01, -3.036337788069527e-01, -3.036337788069527e-01, -3.076795750705930e+00, -3.156294148964173e+00, -2.222431706074962e+00, -1.473867866876825e+00, -3.260190568518458e+00, -3.260190568518458e+00, -6.414071627001634e-07, -6.404662406699715e-07, -6.413100196798916e-07, -6.405782932464149e-07, -6.409235943176805e-07, -6.409235943176805e-07, -4.115866380874738e-05, -3.992258926205427e-05, -4.178711895167835e-05, -4.080674882558574e-05, -3.951705787279385e-05, -3.951705787279385e-05, -4.165088371501161e-03, -6.059992409354818e-03, -5.124830983877905e-03, -5.926594474733562e-03, -3.597375893828531e-03, -3.597375893828531e-03, -1.104024939723431e+00, -2.631728413225172e-01, -1.221950681015887e+00, -4.871051155377396e-05, -9.930266233238710e-01, -9.930266233238710e-01, -1.531548892488769e+00, -1.655010980182879e+00, -4.001419497614386e+00, -2.151088672358247e+00, -2.315467648245934e+00, -2.315467648248017e+00, -2.470212992109948e-02, -8.939773319645013e-03, -1.197635662935897e-02, -1.582083483252800e-02, -1.368172578444504e-02, -1.368172578444504e-02, -3.646747550778413e-02, -7.524608840715473e-03, -6.180515598934972e-03, -5.565876161588755e-03, -5.742630298155391e-03, -5.742630298155402e-03, -4.498414046498075e-03, -1.298112104320154e-01, -7.381909408335560e-02, -3.006050917180393e-02, -4.779235975080269e-02, -4.779235975080270e-02, -1.124450433540010e-02, -1.887000890652864e+00, -1.923618784740925e+00, -3.705165458673226e-02, -1.861689221146346e+00, -1.861689221146347e+00, -2.508489445418049e+00, -1.311490391978875e+00, -1.674962229085959e+00, -2.218596671999909e+00, -3.076977994534353e+00, -3.076977994536321e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
