
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2a_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.563108912114272e+01, -1.563111219287344e+01, -1.563126358822492e+01, -1.563088481957702e+01, -1.563110088324664e+01, -1.563110088324664e+01, -2.693839404851916e+00, -2.693824896281519e+00, -2.693532996185449e+00, -2.694583980580953e+00, -2.693842942564731e+00, -2.693842942564731e+00, -5.947070234155385e-01, -5.945807476277915e-01, -5.929684325633892e-01, -5.964590034353121e-01, -5.946586977302729e-01, -5.946586977302729e-01, -2.018771153004585e-01, -2.031417204846582e-01, -6.882843186298455e-01, -1.654694882220162e-01, -2.022413339153488e-01, -2.022413339153488e-01, -1.635751324200569e-02, -1.710965080110632e-02, -6.615165308578366e-02, -8.031030033214991e-03, -1.693612367962472e-02, -1.693612367962472e-02, -3.885724357126036e+00, -3.885639922398873e+00, -3.885719587029125e+00, -3.885653865145815e+00, -3.885675421600996e+00, -3.885675421600996e+00, -1.654828594449982e+00, -1.662280887203845e+00, -1.655484053927945e+00, -1.661253439090121e+00, -1.659140320735907e+00, -1.659140320735907e+00, -5.078879506647662e-01, -5.326975300054674e-01, -4.856436472242669e-01, -4.936795366742210e-01, -5.232810059583802e-01, -5.232810059583802e-01, -1.337439159383436e-01, -2.152679720074762e-01, -1.314295644652510e-01, -1.476904062426948e+00, -1.471446955220658e-01, -1.471446955220658e-01, -7.756380639367879e-03, -8.826197863056188e-03, -6.676493622572562e-03, -8.916527827894728e-02, -8.065724220948367e-03, -8.065724220948367e-03, -4.988989615807798e-01, -5.053859783375894e-01, -5.040235411619666e-01, -5.023891157579760e-01, -5.032868253862222e-01, -5.032868253862222e-01, -4.817530420074340e-01, -4.561721960548907e-01, -4.664511924117243e-01, -4.761910710378032e-01, -4.711433392346230e-01, -4.711433392346229e-01, -5.565068134499835e-01, -2.541209374375364e-01, -2.845751469089978e-01, -3.345759455240022e-01, -3.077039507886519e-01, -3.077039507886519e-01, -4.175691353945370e-01, -6.172060055076590e-02, -8.156347299494794e-02, -3.136404604334558e-01, -1.110614348531486e-01, -1.110614348531485e-01, -1.908542145631350e-02, -2.517214330323933e-03, -4.688312449304746e-03, -1.060227124546016e-01, -6.890818248311400e-03, -6.890818248311385e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2a_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.929137582858984e+01, -1.929144206087814e+01, -1.929174283203066e+01, -1.929065813572331e+01, -1.929141071300698e+01, -1.929141071300698e+01, -3.231300936090114e+00, -3.231334297977699e+00, -3.232377866902706e+00, -3.231234567182502e+00, -3.231331274219528e+00, -3.231331274219528e+00, -6.769393990573437e-01, -6.758325401445997e-01, -6.462066112813561e-01, -6.514244959450516e-01, -6.765380826972435e-01, -6.765380826972435e-01, -2.157781430080000e-01, -2.185011482950784e-01, -8.110106933614543e-01, -1.694329932164328e-01, -2.165950570537221e-01, -2.165950570537221e-01, -2.159026927743183e-02, -2.257691420729277e-02, -8.284225549034958e-02, -1.061767279093285e-02, -2.234773658066577e-02, -2.234773658066577e-02, -4.879323636572849e+00, -4.881086932093917e+00, -4.879504740221409e+00, -4.880875835400314e+00, -4.880227593285749e+00, -4.880227593285749e+00, -1.752874732376210e+00, -1.768245648054844e+00, -1.742770478960024e+00, -1.754763236662008e+00, -1.776418782886071e+00, -1.776418782886071e+00, -6.195663178923612e-01, -6.694694682377781e-01, -5.902281373331881e-01, -6.189864025871283e-01, -6.429807519978783e-01, -6.429807519978783e-01, -1.443374942945141e-01, -2.161420945031477e-01, -1.415017733113778e-01, -1.886242161679419e+00, -1.533160673010552e-01, -1.533160673010552e-01, -1.025459903345488e-02, -1.166812854756939e-02, -8.825553288275853e-03, -1.056235451714901e-01, -1.066210685560528e-02, -1.066210685560527e-02, -6.284464926412012e-01, -6.343948234182026e-01, -6.323501525566863e-01, -6.304028471783872e-01, -6.313924976280172e-01, -6.313924976280172e-01, -6.096143131798933e-01, -5.345263070950017e-01, -5.649737399765966e-01, -5.914563345516736e-01, -5.785184926942377e-01, -5.785184926942377e-01, -6.999100670027015e-01, -2.593475616443546e-01, -3.028468142055215e-01, -3.879116544309965e-01, -3.422882728673149e-01, -3.422882728673149e-01, -4.867880492820054e-01, -7.828535788186652e-02, -9.923885846627259e-02, -3.748897404987993e-01, -1.236186354764253e-01, -1.236186354764253e-01, -2.518038573055549e-02, -3.331683790766826e-03, -6.200279961171160e-03, -1.183564655325026e-01, -9.109272761964151e-03, -9.109272761964141e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2a_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.768860299728003e-09, -3.768821919527193e-09, -3.768626534453722e-09, -3.769255528925882e-09, -3.768840261288421e-09, -3.768840261288421e-09, -5.174070521073956e-06, -5.174018236008388e-06, -5.171738392110645e-06, -5.171327475701041e-06, -5.173956407126283e-06, -5.173956407126283e-06, -3.317553342010072e-03, -3.328782060377609e-03, -3.607009384444269e-03, -3.505629476874531e-03, -3.321659026140487e-03, -3.321659026140487e-03, -3.598352103137284e-01, -3.500358288555261e-01, -1.662034202669914e-03, -7.146953335646358e-01, -3.569843851441137e-01, -3.569843851441137e-01, -3.240904061806565e+00, -3.300871759614885e+00, -2.033660681768730e+00, -1.788244890350367e+00, -3.415638910039394e+00, -3.415638910039394e+00, -1.047645888693786e-06, -1.047218331948019e-06, -1.047598391980924e-06, -1.047265860525019e-06, -1.047429256592209e-06, -1.047429256592209e-06, -4.912052994252768e-05, -4.787674829564367e-05, -4.953044107491710e-05, -4.855137232654608e-05, -4.774508024930535e-05, -4.774508024930535e-05, -5.762226702801610e-03, -8.273716713426398e-03, -7.036753412984320e-03, -8.130420360829957e-03, -5.023610858363199e-03, -5.023610858363199e-03, -1.037372646305711e+00, -2.751739151074199e-01, -1.157305897163071e+00, -7.556905606068441e-05, -9.744974455491779e-01, -9.744974455491779e-01, -1.874049248803991e+00, -1.964413842337920e+00, -5.093729123277645e+00, -1.977203307674441e+00, -2.808762714480832e+00, -2.808762714481375e+00, -3.340611920119668e-02, -1.209434984174970e-02, -1.615689377319473e-02, -2.133949957211182e-02, -1.845156474048330e-02, -1.845156474048330e-02, -4.937153188405884e-02, -9.888063433400296e-03, -8.430147034409538e-03, -7.711774180241335e-03, -7.926293613886319e-03, -7.926293613886326e-03, -6.194513211709498e-03, -1.425099866586879e-01, -8.616789863857155e-02, -3.865142864679413e-02, -5.882344869276290e-02, -5.882344869276288e-02, -1.463989052833462e-02, -1.724367119504237e+00, -1.752737221972066e+00, -4.860164829297893e-02, -1.752904704984436e+00, -1.752904704984441e+00, -2.576427597218584e+00, -2.274388926192927e+00, -2.351129107424009e+00, -2.103075985419254e+00, -3.882972997949068e+00, -3.882972997957274e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
