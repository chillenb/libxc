
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wp04_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.119931530388027e+01, -2.119934328430345e+01, -2.119953504238123e+01, -2.119911736173471e+01, -2.119932664150310e+01, -2.119932664150310e+01, -3.616374907853012e+00, -3.616338344827860e+00, -3.615579140559131e+00, -3.617566143724339e+00, -3.616415976789471e+00, -3.616415976789471e+00, -7.853691954298810e-01, -7.853234068509354e-01, -7.859494064043723e-01, -7.909486137851215e-01, -7.909426736145818e-01, -7.909426736145818e-01, -2.712842884707764e-01, -2.723493639475839e-01, -8.979248983266694e-01, -2.399451417214442e-01, -2.584534669758790e-01, -2.584534669758789e-01, -7.130929994324917e-02, -7.163062434470621e-02, -1.366015837219395e-01, -6.324140828591886e-02, -6.499055843971606e-02, -6.499055843971602e-02, -5.196212999272078e+00, -5.195581622815578e+00, -5.196194860740221e+00, -5.195637312594119e+00, -5.195887025451540e+00, -5.195887025451540e+00, -2.229396491982099e+00, -2.239634985717057e+00, -2.230173248054785e+00, -2.239201655622856e+00, -2.234707663182105e+00, -2.234707663182105e+00, -6.661865102875554e-01, -6.900897653330137e-01, -6.251090669760383e-01, -6.217251856988111e-01, -6.729697494015102e-01, -6.729697494015102e-01, -2.066129749403265e-01, -2.920113676650178e-01, -1.981695702122852e-01, -1.933826396971094e+00, -2.143009846078123e-01, -2.143009846078123e-01, -5.663860352524230e-02, -6.103820088170911e-02, -4.084334465464776e-02, -1.618101992925928e-01, -4.945456626632134e-02, -4.945456626632137e-02, -6.351814485654614e-01, -6.388479585942051e-01, -6.376178479346538e-01, -6.365489196358926e-01, -6.370882498159828e-01, -6.370882498159828e-01, -6.173917990292328e-01, -5.903886895558464e-01, -5.988226182600662e-01, -6.063946200383028e-01, -6.024137929865334e-01, -6.024137929865334e-01, -7.217726796387615e-01, -3.378154411196095e-01, -3.744886586754296e-01, -4.365861502905923e-01, -4.026614557148739e-01, -4.026614557148740e-01, -5.488378764084947e-01, -1.360743810567078e-01, -1.529380581249529e-01, -4.125377413488284e-01, -1.755996496073377e-01, -1.755996496073377e-01, -8.143719140980391e-02, -3.406456086565804e-02, -4.554935238401920e-02, -1.710599091103733e-01, -4.650662538550839e-02, -4.650662538550837e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wp04_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.545482370998430e+01, -2.545479389470934e+01, -2.545493252956673e+01, -2.545487326891080e+01, -2.545526188541953e+01, -2.545534847454963e+01, -2.545402907867568e+01, -2.545378201583240e+01, -2.545488723287087e+01, -2.545439516948251e+01, -2.545488723287087e+01, -2.545439516948251e+01, -4.210532760949844e+00, -4.210670313522495e+00, -4.210568984229036e+00, -4.210711252782409e+00, -4.211502472775362e+00, -4.211763678064392e+00, -4.210554908981612e+00, -4.210816268744571e+00, -4.209831563700577e+00, -4.211661147542082e+00, -4.209831563700577e+00, -4.211661147542082e+00, -8.629953533116163e-01, -8.670870690555295e-01, -8.612806529181923e-01, -8.662837063653951e-01, -8.368180777507285e-01, -8.304299257106024e-01, -8.393579282542147e-01, -8.414238338548375e-01, -8.703992825401424e-01, -8.081344630975857e-01, -8.703992825401424e-01, -8.081344630975857e-01, -2.492048686888489e-01, -2.534261816526000e-01, -2.522169359736023e-01, -2.571915067924064e-01, -9.847890863829831e-01, -1.016862022514074e+00, -2.000293957800638e-01, -2.009303341016267e-01, -2.375766235906226e-01, -1.956204636135630e-01, -2.375766235906225e-01, -1.956204636135629e-01, -2.809807247948203e-02, -2.841587938325764e-02, -2.881431148935782e-02, -2.915946988557149e-02, -8.291893686579643e-02, -8.321049071220772e-02, -2.091064410743328e-02, -2.088474797401898e-02, -2.434176625682941e-02, -2.031321596054965e-02, -2.434176625682937e-02, -2.031321596054963e-02, -6.369990600228977e+00, -6.368519192753480e+00, -6.372513835258474e+00, -6.370958819328704e+00, -6.370130262732670e+00, -6.368603857370422e+00, -6.372296821042628e+00, -6.370818558033528e+00, -6.371282430443179e+00, -6.369744466929020e+00, -6.371282430443179e+00, -6.369744466929020e+00, -2.336465544710560e+00, -2.336359932967122e+00, -2.355015643247170e+00, -2.354422296179456e+00, -2.317504444560054e+00, -2.322458149631555e+00, -2.333524057299638e+00, -2.338643503582731e+00, -2.360742899147936e+00, -2.348382642178275e+00, -2.360742899147936e+00, -2.348382642178275e+00, -7.829128062169044e-01, -7.815510495009941e-01, -8.682320437549575e-01, -8.688735426142592e-01, -7.156735028783815e-01, -7.353776321989726e-01, -7.641363113170571e-01, -7.811646985942383e-01, -8.106980136109571e-01, -7.814834065397485e-01, -8.106980136109571e-01, -7.814834065397485e-01, -1.541882207427658e-01, -1.543261875902193e-01, -2.514567342261753e-01, -2.519524989172100e-01, -1.452866274221179e-01, -1.465565681851839e-01, -2.459151455450808e+00, -2.458263187856742e+00, -1.706640778864273e-01, -1.719236970880573e-01, -1.706640778864273e-01, -1.719236970880573e-01, -1.747997187635069e-02, -1.788248002536770e-02, -2.023517199698047e-02, -2.044665647533075e-02, -1.492052788953061e-02, -1.499808527400844e-02, -1.110897508117154e-01, -1.113409208935667e-01, -1.696355334244608e-02, -1.822781143345448e-02, -1.696355334244611e-02, -1.822781143345448e-02, -8.155230736336203e-01, -8.178776249608523e-01, -8.034681449114685e-01, -8.058711335817038e-01, -8.075207575682352e-01, -8.099324067432736e-01, -8.110378824031971e-01, -8.133880405115704e-01, -8.092626471135935e-01, -8.116429089426727e-01, -8.092626471135935e-01, -8.116429089426727e-01, -7.979882421592854e-01, -7.998497671262296e-01, -6.518574551176839e-01, -6.539999893680727e-01, -6.894368821368783e-01, -6.918724550775668e-01, -7.300292210639778e-01, -7.319292710567848e-01, -7.091681951663948e-01, -7.110998010528962e-01, -7.091681951663948e-01, -7.110998010528962e-01, -9.052106740407283e-01, -9.068410169693617e-01, -3.065503555056047e-01, -3.074042963816561e-01, -3.608274125983138e-01, -3.629352832727301e-01, -4.743393401330400e-01, -4.760431859571626e-01, -4.133848350341631e-01, -4.134122098041116e-01, -4.133848350341632e-01, -4.134122098041116e-01, -6.037367462725611e-01, -6.069070494409995e-01, -8.127782789090734e-02, -8.131241739832026e-02, -9.811857675467245e-02, -9.825742856261988e-02, -4.628602909155502e-01, -4.675266899599315e-01, -1.292874936526915e-01, -1.293165082993448e-01, -1.292874936526915e-01, -1.293165082993447e-01, -3.501236185481326e-02, -3.514190482243611e-02, -8.904417054600633e-03, -8.353302630157534e-03, -1.362391656115727e-02, -1.376242197788337e-02, -1.238467537044356e-01, -1.241748273732368e-01, -1.537321341583480e-02, -1.735807134381260e-02, -1.537321341583482e-02, -1.735807134381258e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wp04_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.396761140303336e-08, 1.463652377038497e-15, -1.396769147519619e-08, -1.396753277852107e-08, 1.463631512328463e-15, -1.396763429700335e-08, -1.396710938755287e-08, 1.463532316351641e-15, -1.396707572806880e-08, -1.396800173570844e-08, 1.463842899785011e-15, -1.396821172596458e-08, -1.396757318867894e-08, 1.463681083685537e-15, -1.396763118102188e-08, -1.396757318867894e-08, 1.463681083685537e-15, -1.396763118102188e-08, -1.845073486352134e-05, 1.902747638536066e-11, -1.845767810005058e-05, -1.845124727082398e-05, 1.902725761814505e-11, -1.845871176989315e-05, -1.846895128800306e-05, 1.901971754504621e-11, -1.847316956419219e-05, -1.842638444793251e-05, 1.901358235030523e-11, -1.843186746141542e-05, -1.846074028849955e-05, 1.902491360705296e-11, -1.844596921931311e-05, -1.846074028849955e-05, 1.902491360705296e-11, -1.844596921931311e-05, -1.153693292270179e-02, 1.144533678933034e-07, -1.154784895329285e-02, -1.154281963120479e-02, 1.151156568500561e-07, -1.155558090651442e-02, -1.165072311440839e-02, 1.320750241138922e-07, -1.164852148862967e-02, -1.132223740180011e-02, 1.265386257803329e-07, -1.132832679524915e-02, -1.148632588006136e-02, 1.376562597771172e-07, -1.124155261783798e-02, -1.148632588006136e-02, 1.376562597771172e-07, -1.124155261783798e-02, -1.551843243346357e+00, 6.012876550391962e-05, -1.401514473638871e+00, -1.522283935955954e+00, 5.680272535784820e-05, -1.353410642375735e+00, -6.684261773947799e-03, 5.322727974273029e-08, -6.250976413499225e-03, -3.052705327018531e+00, 1.675901373768304e-04, -2.919035189485848e+00, -1.323349775186055e+00, 2.382014110698246e-04, -7.469285368778917e+00, -1.323349775186054e+00, 2.382014110698246e-04, -7.469285368778923e+00, -2.138090904251117e+04, 1.111914508308031e-11, -1.791044928264938e+04, -1.897417677948024e+04, 4.562559950974850e-11, -1.555297915238049e+04, -1.232083703381665e+02, 1.838627425311693e-03, -1.060807580847926e+02, -9.013842674638062e+04, 4.136895542502456e-21, -9.388348408034188e+04, -2.966222323593969e+04, 1.070835888305008e-16, -1.949784379594732e+05, -2.966222323593973e+04, 1.070835888305008e-16, -1.949784379594731e+05, -4.208993464713814e-06, 2.233703107768369e-12, -4.212777364634660e-06, -4.212041484759306e-06, 2.231537777319893e-12, -4.215726357873279e-06, -4.209118355132678e-06, 2.233595490630417e-12, -4.212846915788055e-06, -4.211734058333943e-06, 2.231683364972891e-12, -4.215526212770626e-06, -4.210587765232765e-06, 2.232609670798167e-12, -4.214263196262775e-06, -4.210587765232765e-06, 2.232609670798167e-12, -4.214263196262775e-06, -1.405908606284875e-04, 4.104557134069705e-10, -1.406161107879517e-04, -1.376643864547160e-04, 3.949027730077658e-10, -1.377871797691422e-04, -1.409645311326671e-04, 4.223201907834492e-10, -1.409112765658934e-04, -1.384319584188461e-04, 4.080707689470805e-10, -1.383211683045874e-04, -1.386167634774009e-04, 3.966397450084659e-10, -1.390918770959025e-04, -1.386167634774009e-04, 3.966397450084659e-10, -1.390918770959025e-04, -2.347415909844894e-02, 2.253646609880290e-07, -2.374002740139518e-02, -2.109405856971292e-02, 1.482953633834817e-07, -2.112644295737467e-02, -3.321785821130484e-02, 3.393155540240489e-07, -2.940022363514778e-02, -3.538675442884436e-02, 2.786872153422915e-07, -3.092970132046615e-02, -2.068796581747333e-02, 2.171399762139616e-07, -2.512898725767205e-02, -2.068796581747334e-02, 2.171399762139616e-07, -2.512898725767205e-02, -7.724521309180341e+00, 5.364331359216309e-04, -7.583915521720206e+00, -1.158634641664483e+00, 5.928062603673171e-05, -1.141437783882008e+00, -1.043692886078979e+01, 6.670630325612285e-04, -9.021801082610164e+00, -2.580307431492998e-04, 4.550774239056777e-10, -2.585407313089005e-04, -5.689850614935601e+00, 3.362374819306394e-04, -5.307968820077028e+00, -5.689850614935601e+00, 3.362374819306394e-04, -5.307968820077028e+00, -2.269185863310053e+05, 5.421496698436063e-28, -1.950568767223440e+05, -1.062168971459234e+05, 1.228758886113335e-21, -9.947160212907816e+04, -3.993439080861862e+05, 5.656440620065503e-29, -3.488730898634093e+05, -3.191116743545374e+01, 1.504669301565768e-03, -3.100931790826075e+01, -3.089788929374107e+05, 9.610322787727073e-24, -1.233861935439080e+05, -3.089788929374104e+05, 9.610322787727070e-24, -1.233861935439079e+05, -3.172646127032298e-02, 2.199677179191681e-07, -3.129300475973160e-02, -2.987283806164473e-02, 2.264286130145305e-07, -2.947510364572109e-02, -3.041947456724193e-02, 2.241303100651475e-07, -3.001476854749808e-02, -3.095162116708694e-02, 2.222568983976134e-07, -3.052869595280638e-02, -3.067602695075326e-02, 2.231922961512953e-07, -3.026235654926769e-02, -3.067602695075326e-02, 2.231922961512953e-07, -3.026235654926769e-02, -3.656650559063304e-02, 2.525278278664052e-07, -3.609735462499421e-02, -4.038254584555181e-02, 5.397863529116129e-07, -3.985441218936157e-02, -3.784819158819636e-02, 4.298036410666330e-07, -3.735855076397820e-02, -3.623433669965603e-02, 3.458400931093936e-07, -3.579005556855235e-02, -3.700340643366336e-02, 3.860241852276062e-07, -3.652499078286353e-02, -3.700340643366336e-02, 3.860241852276062e-07, -3.652499078286353e-02, -1.729855510416423e-02, 1.166454564355177e-07, -1.727236872587153e-02, -5.572726376807674e-01, 2.273047300256539e-05, -5.482387991081361e-01, -3.305008875727229e-01, 1.027440095908986e-05, -3.224610967079870e-01, -1.550574520752712e-01, 2.883676467546989e-06, -1.522354757017491e-01, -2.254079992538677e-01, 5.500747727544229e-06, -2.264654467113625e-01, -2.254079992538679e-01, 5.500747727544231e-06, -2.264654467113626e-01, -5.592450749649351e-02, 8.100714365057126e-07, -5.484100746322372e-02, -1.263839749472060e+02, 1.766533536733120e-03, -1.240505283237760e+02, -5.537663210387291e+01, 1.878803243082290e-03, -5.093449286233362e+01, -2.020220225563223e-01, 3.428914672188251e-06, -1.925912646201270e-01, -1.793187994409666e+01, 9.701438036301546e-04, -1.644290545709585e+01, -1.793187994409666e+01, 9.701438036301546e-04, -1.644290545709585e+01, -7.174574916492128e+03, 3.417478728614279e-08, -6.517691286852942e+03, -6.708383363276592e+06, 2.850114531961813e-89, -7.806045106005616e+06, -7.527484331067703e+05, 1.662312648545182e-40, -6.411327221627223e+05, -2.083423126560344e+01, 1.102889579754806e-03, -1.982099877125014e+01, -4.423526651552797e+05, 8.178814636871498e-26, -1.601862101488107e+05, -4.423526651552808e+05, 8.178814636871071e-26, -1.601862101488112e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
