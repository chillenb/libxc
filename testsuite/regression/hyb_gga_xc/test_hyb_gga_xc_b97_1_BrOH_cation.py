
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.654204262596615e+01, -1.654206633765442e+01, -1.654222143992382e+01, -1.654186764265385e+01, -1.654204595896404e+01, -1.654204595896404e+01, -2.796744742203808e+00, -2.796719240902809e+00, -2.796197369069443e+00, -2.797625912362244e+00, -2.796780458068083e+00, -2.796780458068083e+00, -5.863833069965892e-01, -5.862687190112748e-01, -5.852105733661729e-01, -5.891366107659414e-01, -5.901542954548958e-01, -5.901542954548958e-01, -1.804040760510828e-01, -1.818919189165672e-01, -6.745497737176074e-01, -1.469602703768759e-01, -1.662803366013611e-01, -1.662803366013610e-01, -4.670199788860130e-03, -4.974749231874652e-03, -3.727721514647444e-02, -2.458040166675970e-03, -6.178712960698235e-03, -6.178712960698230e-03, -4.046831696722914e+00, -4.046597479888304e+00, -4.046828197934336e+00, -4.046621290821539e+00, -4.046708783975582e+00, -4.046708783975582e+00, -1.715165567305416e+00, -1.722769272827258e+00, -1.716867605434784e+00, -1.723527052974695e+00, -1.718630466374219e+00, -1.718630466374219e+00, -5.001506465847028e-01, -5.303532058022766e-01, -4.669884911847863e-01, -4.751103366827470e-01, -5.066302050666689e-01, -5.066302050666690e-01, -1.066851349900407e-01, -1.903371868165840e-01, -9.875318907512157e-02, -1.507612072566276e+00, -1.218182938171165e-01, -1.218182938171165e-01, -1.846391624544725e-03, -2.395280634214701e-03, -1.797592668920685e-03, -6.442872387067490e-02, -3.062801356222191e-03, -3.062801356222194e-03, -4.848302716211986e-01, -4.902955372652578e-01, -4.896694789084076e-01, -4.883668482678292e-01, -4.891383446575659e-01, -4.891383446575659e-01, -4.656019610396585e-01, -4.357839688043698e-01, -4.458818057626176e-01, -4.577333232660300e-01, -4.512889036550702e-01, -4.512889036550702e-01, -5.548150256375045e-01, -2.304114650636040e-01, -2.626016158038967e-01, -3.163024684062274e-01, -2.872428368377091e-01, -2.872428368377091e-01, -4.035409459233593e-01, -3.521304315493802e-02, -5.065467123754418e-02, -3.002585425843219e-01, -8.302522255712670e-02, -8.302522255712673e-02, -6.913327877981003e-03, -5.604967943939092e-04, -1.278892061803326e-03, -7.780364091718822e-02, -2.674361421468444e-03, -2.674361421468438e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.003347454028748e+01, -2.003345221850851e+01, -2.003357369665573e+01, -2.003352436863071e+01, -2.003385745666178e+01, -2.003393940302095e+01, -2.003273672553296e+01, -2.003251270035275e+01, -2.003353516804262e+01, -2.003305799115207e+01, -2.003353516804262e+01, -2.003305799115207e+01, -3.299873576117764e+00, -3.300144708100117e+00, -3.299919594753921e+00, -3.300204833521945e+00, -3.301186996408369e+00, -3.301547722212757e+00, -3.299513727267418e+00, -3.299897595521355e+00, -3.299263042073480e+00, -3.301036186261024e+00, -3.299263042073480e+00, -3.301036186261024e+00, -6.634212425679328e-01, -6.685489048927833e-01, -6.615004549988454e-01, -6.677515314978956e-01, -6.355689333945608e-01, -6.284496927978245e-01, -6.363427402057402e-01, -6.387017068452249e-01, -6.737400100604483e-01, -6.062044682129418e-01, -6.737400100604483e-01, -6.062044682129418e-01, -1.969899884408788e-01, -1.889802776652988e-01, -1.992637030308197e-01, -1.910521145076924e-01, -7.579307440175269e-01, -7.910941935443769e-01, -1.609672365096850e-01, -1.589248560838362e-01, -1.368246019773928e-01, -2.674878185021265e-01, -1.368246019773929e-01, -2.674878185021268e-01, -4.892413918804519e-03, -7.789526242137407e-03, -5.004212886482107e-03, -8.436746636016191e-03, -4.640293409330924e-02, -5.512291102667752e-02, -3.624347487358382e-03, -3.135781644860729e-03, -1.116453660716816e-02, 7.258482232840317e-03, -1.116453660716817e-02, 7.258482232840324e-03, -5.051125971333030e+00, -5.049943826593438e+00, -5.053458712960150e+00, -5.052197381860994e+00, -5.051254499782937e+00, -5.050020334413130e+00, -5.053255899609199e+00, -5.052068070786509e+00, -5.052322992180291e+00, -5.051076460719588e+00, -5.052322992180291e+00, -5.051076460719588e+00, -1.747668656726910e+00, -1.747588834452621e+00, -1.764443315584576e+00, -1.763963410177087e+00, -1.725769209129013e+00, -1.731579538892041e+00, -1.740251185554726e+00, -1.746174432208172e+00, -1.773118587978621e+00, -1.759051460965252e+00, -1.773118587978621e+00, -1.759051460965252e+00, -6.187037668231811e-01, -6.177467952317987e-01, -6.801898339630205e-01, -6.799204430083342e-01, -5.624257906887115e-01, -5.794706052838988e-01, -6.041118746505060e-01, -6.179978506040003e-01, -6.427027073935947e-01, -6.193775929921372e-01, -6.427027073935948e-01, -6.193775929921375e-01, -1.277832810933032e-01, -1.258940823810409e-01, -1.982399610654622e-01, -1.970900678105295e-01, -1.196937496044482e-01, -1.185115898531139e-01, -1.939523022182026e+00, -1.938751784450494e+00, -1.528792950807966e-01, -1.249401494473179e-01, -1.528792950807966e-01, -1.249401494473179e-01, -2.068440740641014e-03, -2.950570379897027e-03, -3.079773370504435e-03, -3.508563540279023e-03, -1.777722368117371e-03, -3.047201409137546e-03, -8.307549310880320e-02, -8.462415171294824e-02, 1.694323791907443e-03, -6.407190391563707e-03, 1.694323791907452e-03, -6.407190391563697e-03, -6.093521679264612e-01, -6.106327178124551e-01, -6.273074303835988e-01, -6.286714770600881e-01, -6.230225320213764e-01, -6.242265501733999e-01, -6.175439755942305e-01, -6.187750006408974e-01, -6.204930064923679e-01, -6.216985356222887e-01, -6.204930064923679e-01, -6.216985356222887e-01, -5.883678515397509e-01, -5.897635620403386e-01, -5.024715855266778e-01, -5.042944607435652e-01, -5.407927931957962e-01, -5.430842074865950e-01, -5.810220942263774e-01, -5.825869215462630e-01, -5.611291897241274e-01, -5.627633336402356e-01, -5.611291897241274e-01, -5.627633336402356e-01, -7.122136353427869e-01, -7.124898709617810e-01, -2.354810146644067e-01, -2.342385175972788e-01, -2.731227152123510e-01, -2.721636377441715e-01, -3.630286831045720e-01, -3.642163684971295e-01, -3.116997659906613e-01, -3.117741989741780e-01, -3.116997659906611e-01, -3.117741989741780e-01, -4.646705263086708e-01, -4.674393243436816e-01, -4.798548890181518e-02, -4.908479891947688e-02, -6.561111669383667e-02, -7.041792349790858e-02, -3.586946461528323e-01, -3.626672769231565e-01, -1.066572439347437e-01, -9.820984489987945e-02, -1.066572439347436e-01, -9.820984489987948e-02, -8.415287140670576e-03, -1.071159585315197e-02, -7.516852593948698e-04, -7.703248765559914e-04, -1.187812381173835e-03, -2.213897678001899e-03, -9.700449876265616e-02, -9.796489330138917e-02, 1.141932589757235e-03, -5.664114317196134e-03, 1.141932589757237e-03, -5.664114317196127e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.007634166340825e-08, 0.000000000000000e+00, -1.007639246037924e-08, -1.007620666705948e-08, 0.000000000000000e+00, -1.007629501326765e-08, -1.007575910724402e-08, 0.000000000000000e+00, -1.007565512890740e-08, -1.007727602677598e-08, 0.000000000000000e+00, -1.007759770612138e-08, -1.007625344983186e-08, 0.000000000000000e+00, -1.007681520091339e-08, -1.007625344983186e-08, 0.000000000000000e+00, -1.007681520091339e-08, -1.313540829329934e-05, 0.000000000000000e+00, -1.313432092758331e-05, -1.313513770747778e-05, 0.000000000000000e+00, -1.313403415745234e-05, -1.312824396799036e-05, 0.000000000000000e+00, -1.312547825778454e-05, -1.313183350040460e-05, 0.000000000000000e+00, -1.312918843642796e-05, -1.314464260182134e-05, 0.000000000000000e+00, -1.312195702373846e-05, -1.314464260182134e-05, 0.000000000000000e+00, -1.312195702373846e-05, -7.759183015961253e-03, 0.000000000000000e+00, -7.577158024648552e-03, -7.813817783188022e-03, 0.000000000000000e+00, -7.593501678046688e-03, -8.359400999115845e-03, 0.000000000000000e+00, -8.566021040996739e-03, -8.247304522402125e-03, 0.000000000000000e+00, -8.182380391196977e-03, -6.987631920176039e-03, 0.000000000000000e+00, -8.853728940565651e-03, -6.987631920176039e-03, 0.000000000000000e+00, -8.853728940565651e-03, -6.461982642433076e-01, 0.000000000000000e+00, -7.561330274840322e-01, -6.343972720944852e-01, 0.000000000000000e+00, -7.439501964218227e-01, -4.607805132356118e-03, 0.000000000000000e+00, -3.926472473446855e-03, -1.008591312284721e+00, 0.000000000000000e+00, -1.097781715720290e+00, -1.340219892642293e+00, 0.000000000000000e+00, 1.101327527052433e+01, -1.340219892642292e+00, 0.000000000000000e+00, 1.101327527052433e+01, 5.629431836825177e+00, 0.000000000000000e+00, -1.338868070625666e+00, 6.477493682762910e+00, 0.000000000000000e+00, -1.910545832038916e+00, 3.583463985918353e-01, 0.000000000000000e+00, -2.342637554613127e+00, 1.233721428532650e+00, 0.000000000000000e+00, 3.417981061939316e+00, -1.080221687815760e+01, 0.000000000000000e+00, 1.483887467371158e+02, -1.080221687815859e+01, 0.000000000000000e+00, 1.483887467371957e+02, -2.595948740646666e-06, 0.000000000000000e+00, -2.598440552938745e-06, -2.592935932120350e-06, 0.000000000000000e+00, -2.595542057988153e-06, -2.595770906676072e-06, 0.000000000000000e+00, -2.598341916404522e-06, -2.593197515205880e-06, 0.000000000000000e+00, -2.595696009469870e-06, -2.594403594963217e-06, 0.000000000000000e+00, -2.596985960555904e-06, -2.594403594963217e-06, 0.000000000000000e+00, -2.596985960555904e-06, -1.224236833900316e-04, 0.000000000000000e+00, -1.224453692151184e-04, -1.192992529033318e-04, 0.000000000000000e+00, -1.194119848826104e-04, -1.244407514591085e-04, 0.000000000000000e+00, -1.238722264474900e-04, -1.217146608372930e-04, 0.000000000000000e+00, -1.211086424731003e-04, -1.190705965884559e-04, 0.000000000000000e+00, -1.206826247780152e-04, -1.190705965884559e-04, 0.000000000000000e+00, -1.206826247780152e-04, -1.062169108029548e-02, 0.000000000000000e+00, -1.069340392910220e-02, -9.915478656168202e-03, 0.000000000000000e+00, -1.037644885466163e-02, -1.630274817716010e-02, 0.000000000000000e+00, -1.370191487678166e-02, -1.072302007623508e-02, 0.000000000000000e+00, -9.276009084946149e-03, -8.635351211872885e-03, 0.000000000000000e+00, -1.056301452712788e-02, -8.635351211872918e-03, 0.000000000000000e+00, -1.056301452712788e-02, -1.213045367908327e+00, 0.000000000000000e+00, -1.465773637946690e+00, -5.233600440879168e-01, 0.000000000000000e+00, -5.347483709473491e-01, -8.258881939186862e-01, 0.000000000000000e+00, -1.954119585454780e+00, -1.481926317855207e-04, 0.000000000000000e+00, -1.486384913671153e-04, -5.185804712104106e-01, 0.000000000000000e+00, -2.267189362178464e+00, -5.185804712104106e-01, 0.000000000000000e+00, -2.267189362178464e+00, 5.356564371575903e+00, 0.000000000000000e+00, 1.786136913133394e+00, 3.200624972820894e+00, 0.000000000000000e+00, 2.319987783111928e+00, 4.935549369987682e+01, 0.000000000000000e+00, -7.586705300019932e+00, -1.814408173164658e+00, 0.000000000000000e+00, -1.821455153651766e+00, 1.086736016381995e+02, 0.000000000000000e+00, -2.768218752868095e+01, 1.086736016381185e+02, 0.000000000000000e+00, -2.768218752867774e+01, -7.401996471766506e-02, 0.000000000000000e+00, -7.517306988137093e-02, -1.511497619465958e-02, 0.000000000000000e+00, -1.540290382827379e-02, -2.406623601622122e-02, 0.000000000000000e+00, -2.466491897354810e-02, -3.849930148075362e-02, 0.000000000000000e+00, -3.913292478978778e-02, -3.019266963778913e-02, 0.000000000000000e+00, -3.082696928566799e-02, -3.019266963778913e-02, 0.000000000000000e+00, -3.082696928566799e-02, -1.581030282303487e-01, 0.000000000000000e+00, -1.565466622457978e-01, -2.449914781638531e-02, 0.000000000000000e+00, -2.408683278071467e-02, -1.878069926025270e-02, 0.000000000000000e+00, -1.831255589565950e-02, -1.152386431290668e-02, 0.000000000000000e+00, -1.130684225820009e-02, -1.525132781765095e-02, 0.000000000000000e+00, -1.497398651197037e-02, -1.525132781765095e-02, 0.000000000000000e+00, -1.497398651197037e-02, -7.151001700611985e-03, 0.000000000000000e+00, -7.524250115898529e-03, -3.045549183028899e-01, 0.000000000000000e+00, -3.087587296077483e-01, -1.986850694979174e-01, 0.000000000000000e+00, -1.999506356532899e-01, -8.892138671701146e-02, 0.000000000000000e+00, -8.741625493299267e-02, -1.396430455310792e-01, 0.000000000000000e+00, -1.397927674555884e-01, -1.396430455310796e-01, 0.000000000000000e+00, -1.397927674555886e-01, -3.352022775619882e-02, 0.000000000000000e+00, -3.260160124702311e-02, -8.112745307475114e-01, 0.000000000000000e+00, -1.126399048457848e+00, -5.593582345956688e-01, 0.000000000000000e+00, -2.012676927708338e+00, -9.790578714022828e-02, 0.000000000000000e+00, -9.153245076379608e-02, -3.436645053765220e-01, 0.000000000000000e+00, -3.673561330019720e+00, -3.436645053765526e-01, 0.000000000000000e+00, -3.673561330019738e+00, 2.767777005070324e+00, 0.000000000000000e+00, -6.451476682162028e-01, 3.521938095447739e+01, 0.000000000000000e+00, -5.346611300720978e+00, 1.983772874113361e+01, 0.000000000000000e+00, -2.068881323734976e+00, -1.807605266716335e+00, 0.000000000000000e+00, -2.372569170895162e+00, 1.278038496855555e+02, 0.000000000000000e+00, -1.929747284308645e+01, 1.278038496854222e+02, 0.000000000000000e+00, -1.929747284308434e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
