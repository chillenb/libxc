
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.092138995103636e+01, -2.092141730260020e+01, -2.092160737771317e+01, -2.092119903015379e+01, -2.092140326142669e+01, -2.092140326142669e+01, -3.345560210790001e+00, -3.345526781798993e+00, -3.344839569562711e+00, -3.346698070915807e+00, -3.345604605318061e+00, -3.345604605318061e+00, -5.399579765807599e-01, -5.395565210270110e-01, -5.302931157016615e-01, -5.355736029869422e-01, -5.342144739297312e-01, -5.342144739297312e-01, -5.471918164099229e-02, -5.748610669644845e-02, -6.510836325231333e-01, -1.764613232801042e-02, -4.721196587662897e-02, -4.721196587662894e-02, -1.039408954419443e-03, -1.090613061838859e-03, -1.342946995125457e-04, -6.091294688717935e-04, -4.026310884435220e-04, -4.026310884435221e-04, -4.924707947810516e+00, -4.924123100722519e+00, -4.924691702046028e+00, -4.924175236021401e+00, -4.924405706157891e+00, -4.924405706157891e+00, -1.944480642643099e+00, -1.955522009550277e+00, -1.943194433405661e+00, -1.952964435822620e+00, -1.951203310396289e+00, -1.951203310396289e+00, -4.413858922357348e-01, -4.766614333411592e-01, -4.005489652816510e-01, -4.101545184542958e-01, -4.496271534961671e-01, -4.496271534961671e-01, 9.914341910471299e-03, -4.550622172163937e-02, 1.090267416094115e-02, -1.690916092732297e+00, -3.411124373518464e-03, -3.411124373518464e-03, -4.698596772870183e-04, -5.956927105031774e-04, -4.534865075068552e-04, 7.864637184025681e-03, -4.418403264168194e-04, -4.418403264168194e-04, -4.280472193406488e-01, -4.283416376348483e-01, -4.282798314091775e-01, -4.281918432496512e-01, -4.282391382339571e-01, -4.282391382339571e-01, -4.122258245722387e-01, -3.572276406110959e-01, -3.745315925378411e-01, -3.903250579652999e-01, -3.823424750725324e-01, -3.823424750725324e-01, -5.063340200218458e-01, -8.832146558591340e-02, -1.333164230904833e-01, -2.151684308216032e-01, -1.723652607618900e-01, -1.723652607618901e-01, -3.183585381276384e-01, -5.344883968386972e-04, 5.751796681416049e-03, -2.020356486989668e-01, 6.700994391125587e-03, 6.700994391125612e-03, -1.466534125051875e-03, -1.605957708140520e-04, -3.331189756921874e-04, 7.182311545366258e-03, -4.265046483673291e-04, -4.265046483673288e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.512201314243993e+01, -2.512198309124698e+01, -2.512212204761173e+01, -2.512206248291459e+01, -2.512245094020511e+01, -2.512253764560674e+01, -2.512121776402461e+01, -2.512097004435963e+01, -2.512207619348609e+01, -2.512158385166601e+01, -2.512207619348609e+01, -2.512158385166601e+01, -3.975362699093368e+00, -3.975444102103453e+00, -3.975395938689226e+00, -3.975478422577121e+00, -3.976213707262663e+00, -3.976422816204274e+00, -3.975457606881019e+00, -3.975658890790246e+00, -3.974675450988804e+00, -3.976407804859067e+00, -3.974675450988804e+00, -3.976407804859067e+00, -6.918395216602443e-01, -6.932516719376264e-01, -6.908922749732774e-01, -6.925990373935442e-01, -6.744584527746774e-01, -6.730640899675022e-01, -6.795683237349213e-01, -6.799906742432009e-01, -6.882637561826808e-01, -6.762391745079476e-01, -6.882637561826808e-01, -6.762391745079476e-01, -1.315894024644056e-01, -1.322572605180320e-01, -1.330190486664447e-01, -1.339812087248891e-01, -8.110900518614278e-01, -8.324450056810149e-01, -9.799323578628463e-02, -9.847441724569028e-02, -1.024080845271660e-01, -1.133993700561129e-01, -1.024080845271659e-01, -1.133993700561129e-01, -1.587133622329058e-03, -1.208555570321404e-03, -1.696974639825247e-03, -1.246418430819824e-03, -6.987927076002523e-03, -6.466987841052220e-03, -7.801784052214118e-04, -8.414949808792804e-04, -2.094684226777704e-04, -2.307580015971703e-03, -2.094684226777705e-04, -2.307580015971703e-03, -6.108728453971360e+00, -6.107238342967024e+00, -6.111148017117113e+00, -6.109579734421212e+00, -6.108862176754076e+00, -6.107320490449362e+00, -6.110941286819997e+00, -6.109444373037515e+00, -6.109966384720807e+00, -6.108414692986391e+00, -6.109966384720807e+00, -6.108414692986391e+00, -2.152619526307061e+00, -2.152520732582067e+00, -2.169801127062091e+00, -2.169262088346289e+00, -2.137259644625021e+00, -2.140506020383612e+00, -2.152034627082997e+00, -2.155496985777809e+00, -2.173109940593334e+00, -2.164273454617834e+00, -2.173109940593334e+00, -2.164273454617834e+00, -5.944646218584252e-01, -5.930400410238109e-01, -6.597413690652190e-01, -6.600957902290394e-01, -5.333312299505507e-01, -5.500196930583284e-01, -5.612525088113507e-01, -5.785153610237771e-01, -6.187750928499300e-01, -5.910290915293724e-01, -6.187750928499299e-01, -5.910290915293724e-01, -6.513260504540767e-02, -6.479682459847023e-02, -1.484181916560504e-01, -1.485839968034784e-01, -5.653380534477432e-02, -5.708748452130134e-02, -2.221167508464057e+00, -2.220231933286264e+00, -7.661186397309333e-02, -7.206157305765479e-02, -7.661186397309333e-02, -7.206157305765479e-02, -6.826118612772359e-04, -5.739843064944268e-04, -8.196384737803757e-04, -7.660323433663910e-04, -6.884706063287034e-04, -5.318062242187278e-04, -2.447859961824252e-02, -2.476237089768177e-02, -1.288994891270047e-03, -3.171197935585295e-04, -1.288994891270047e-03, -3.171197935585295e-04, -6.033357970602784e-01, -6.055855751737498e-01, -5.966522974106319e-01, -5.988733731272028e-01, -5.988887676627761e-01, -6.011311809396870e-01, -6.008330553246661e-01, -6.030632675801025e-01, -5.998500420571973e-01, -6.020863351216431e-01, -5.998500420571973e-01, -6.020863351216431e-01, -5.848099982835374e-01, -5.866551696999953e-01, -4.837790412802391e-01, -4.853106996433080e-01, -5.087239338801680e-01, -5.105524204657192e-01, -5.364138318685152e-01, -5.381151426540546e-01, -5.219355047696529e-01, -5.236317510699384e-01, -5.219355047696529e-01, -5.236317510699384e-01, -6.963993168641930e-01, -6.975906027321265e-01, -1.955433852916774e-01, -1.957411138837237e-01, -2.358901498068197e-01, -2.362294067528625e-01, -3.156005303488111e-01, -3.168033258472461e-01, -2.713292591068691e-01, -2.709963647701078e-01, -2.713292591068691e-01, -2.709963647701077e-01, -4.379773481062694e-01, -4.400376238562347e-01, -6.087571465159570e-03, -6.014773298057597e-03, -1.407819785293232e-02, -1.416788884632166e-02, -2.962100543526998e-01, -2.994111688791233e-01, -4.012955968748874e-02, -3.845597945643363e-02, -4.012955968748858e-02, -3.845597945643368e-02, -2.110189266431051e-03, -1.800002192446739e-03, -2.150636232477506e-04, -2.128640985156434e-04, -5.110924097896849e-04, -3.872599385968915e-04, -3.492026445791913e-02, -3.513094952660205e-02, -1.140949284136187e-03, -3.231106606281049e-04, -1.140949284136186e-03, -3.231106606281047e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.428575751272255e-08, 1.463652377038497e-11, -1.428583819244091e-08, -1.428567862263632e-08, 1.463631512328463e-11, -1.428578026382878e-08, -1.428524736181911e-08, 1.463532316351641e-11, -1.428521568152523e-08, -1.428615010649634e-08, 1.463842899785011e-11, -1.428635659248128e-08, -1.428572334105771e-08, 1.463681083685537e-11, -1.428576757521484e-08, -1.428572334105771e-08, 1.463681083685537e-11, -1.428576757521484e-08, -1.722019282799697e-05, 1.902747638536065e-07, -1.722673430116309e-05, -1.722070272834693e-05, 1.902725761814505e-07, -1.722772670512851e-05, -1.723783354842147e-05, 1.901971754504621e-07, -1.724208004789550e-05, -1.719721037059325e-05, 1.901358235030523e-07, -1.720261003846214e-05, -1.722808114073293e-05, 1.902491360705296e-07, -1.721741860093665e-05, -1.722808114073293e-05, 1.902491360705296e-07, -1.721741860093665e-05, -6.084470569761415e-03, 1.144533678933034e-03, -6.178060886606665e-03, -6.065858086313233e-03, 1.151156568500561e-03, -6.180810374403349e-03, -5.957198033119017e-03, 1.320750241138922e-03, -5.788402225418389e-03, -5.731536908140799e-03, 1.265386257803329e-03, -5.786118041002009e-03, -6.565453507535572e-03, 1.376562597771172e-03, -4.869195605840913e-03, -6.565453507535572e-03, 1.376562597771172e-03, -4.869195605840913e-03, 3.345146285898655e-01, 6.012876550391961e-01, 2.169878563592954e-01, 3.148822836450591e-01, 5.680272535784819e-01, 1.878316333123021e-01, -3.826776430740987e-03, 5.322727974273029e-04, -3.880290824353354e-03, 1.008807059209459e+00, 1.675901373768304e+00, 9.147590728112909e-01, -1.520118949829482e-01, 2.382014110698246e+00, 2.044976302165852e+00, -1.520118949829475e-01, 2.382014110698246e+00, 2.044976302165848e+00, -5.872901951607250e-05, 1.111914508308031e-07, -6.880661012637248e-05, -6.893256181344865e-05, 4.562559950974850e-07, -8.283707600709999e-05, 1.057833568803575e+01, 1.838627425311693e+01, 9.305087020884367e+00, -1.369423862526312e-05, 4.136895542502456e-17, -1.282549458725328e-05, -4.301327502639942e-05, 1.070835888305008e-12, -1.733433049970159e-05, -4.301327502691718e-05, 1.070835888305008e-12, -1.733433049920751e-05, -4.085411329857088e-06, 2.233703107768369e-08, -4.088825739249811e-06, -4.088523607468863e-06, 2.231537777319893e-08, -4.091832205470797e-06, -4.085542536437195e-06, 2.233595490630417e-08, -4.088896456969516e-06, -4.088209852618278e-06, 2.231683364972891e-08, -4.091631591609888e-06, -4.087038119628397e-06, 2.232609670798167e-08, -4.090339837933273e-06, -4.087038119628397e-06, 2.232609670798167e-08, -4.090339837933273e-06, -1.179837375449026e-04, 4.104557134069705e-06, -1.179990723666333e-04, -1.157995461711413e-04, 3.949027730077658e-06, -1.158716813776192e-04, -1.178570810183879e-04, 4.223201907834492e-06, -1.180681386726196e-04, -1.159727129267392e-04, 4.080707689470805e-06, -1.161348320537268e-04, -1.169091784904037e-04, 3.966397450084659e-06, -1.167129218191957e-04, -1.169091784904037e-04, 3.966397450084659e-06, -1.167129218191957e-04, -1.173919689746997e-02, 2.253646609880290e-03, -1.179754854766411e-02, -1.173972037749367e-02, 1.482953633834817e-03, -1.177407081939918e-02, -1.448956260058589e-02, 3.393155540240489e-03, -1.425873928198647e-02, -1.719831282958095e-02, 2.786872153422916e-03, -1.611415427285750e-02, -1.118091308030710e-02, 2.171399762139616e-03, -1.202992587767160e-02, -1.118091308030710e-02, 2.171399762139616e-03, -1.202992587767160e-02, 3.215185396977444e+00, 5.364331359216309e+00, 3.059177846799436e+00, 3.144175356179880e-01, 5.928062603673171e-01, 2.994002764629210e-01, 4.356046345637219e+00, 6.670630325612285e+00, 3.367156608028845e+00, -2.223013480242243e-04, 4.550774239056777e-06, -2.226806572591850e-04, 2.293043154318520e+00, 3.362374819306393e+00, 1.615780693145381e+00, 2.293043154318520e+00, 3.362374819306393e+00, 1.615780693145381e+00, -7.805949971609744e-06, 5.421496698436063e-24, -7.858002482222254e-06, -1.403360173860118e-05, 1.228758886113335e-17, -1.384333717752138e-05, -2.089939062725414e-05, 5.656440620065503e-25, -2.633172695087173e-05, 8.550067586333352e+00, 1.504669301565768e+01, 8.363944873412533e+00, -1.367973460312821e-05, 9.610322787727072e-20, -3.236897596013360e-05, -1.367973460243683e-05, 9.610322787727070e-20, -3.236897595990068e-05, -1.686311981690360e-02, 2.199677179191681e-03, -1.675608184269428e-02, -1.557627311026881e-02, 2.264286130145305e-03, -1.549484328523501e-02, -1.596430495002578e-02, 2.241303100651475e-03, -1.587771163834470e-02, -1.633480611939492e-02, 2.222568983976134e-03, -1.623487658262010e-02, -1.614372926731120e-02, 2.231922961512953e-03, -1.605052577776446e-02, -1.614372926731120e-02, 2.231922961512953e-03, -1.605052577776446e-02, -1.913562627521721e-02, 2.525278278664052e-03, -1.900682595993626e-02, -1.575636011920048e-02, 5.397863529116129e-03, -1.582385527422837e-02, -1.630291825235188e-02, 4.298036410666330e-03, -1.633269259512963e-02, -1.700198004015058e-02, 3.458400931093935e-03, -1.694868775108848e-02, -1.666531518286927e-02, 3.860241852276062e-03, -1.662642273467915e-02, -1.666531518286927e-02, 3.860241852276062e-03, -1.662642273467915e-02, -9.918121082707142e-03, 1.166454564355177e-03, -9.939328753529059e-03, 8.309718912757014e-02, 2.273047300256539e-01, 7.523590417413530e-02, 6.440986960797077e-03, 1.027440095908986e-01, -5.061198394331334e-04, -3.222952043788659e-02, 2.883676467546989e-02, -3.298279860922296e-02, -2.356094626294736e-02, 5.500747727544229e-02, -2.372675359307191e-02, -2.356094626294730e-02, 5.500747727544231e-02, -2.372675359307196e-02, -1.937964428708833e-02, 8.100714365057125e-03, -1.962528290005699e-02, 9.617735770237228e+00, 1.766533536733120e+01, 9.470900045336519e+00, 1.087710710073967e+01, 1.878803243082290e+01, 9.856409056943393e+00, -4.107464647540858e-02, 3.428914672188251e-02, -4.347654077999120e-02, 6.196399894427390e+00, 9.701438036301546e+00, 4.882020517311218e+00, 6.196399894427390e+00, 9.701438036301546e+00, 4.882020517311206e+00, 4.364434771241720e-05, 3.417478728614279e-04, 2.596208484069307e-05, -8.676697243571266e-07, 2.850114531961813e-85, -1.307368205053318e-06, -4.553609209006896e-06, 1.662312648545182e-36, -5.650100793092444e-06, 6.501209780556807e+00, 1.102889579754806e+01, 6.077444412416202e+00, -1.940766745072110e-05, 8.178814636871498e-22, -2.614945184867036e-05, -1.940766744957473e-05, 8.178814636871070e-22, -2.614945184955487e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
