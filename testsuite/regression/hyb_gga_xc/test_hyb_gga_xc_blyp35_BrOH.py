
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_blyp35_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.375300554018860e+01, -1.375302077808504e+01, -1.375313924988146e+01, -1.375288871648115e+01, -1.375301315407420e+01, -1.375301315407420e+01, -2.327955073790399e+00, -2.327936568228655e+00, -2.327521925582505e+00, -2.328719259819717e+00, -2.327955253920070e+00, -2.327955253920070e+00, -4.916647516996915e-01, -4.915773287535079e-01, -4.901397819481645e-01, -4.932336515456523e-01, -4.916309570619019e-01, -4.916309570619019e-01, -1.507895040675796e-01, -1.521038202362668e-01, -5.719507711347619e-01, -1.174289007985883e-01, -1.511779485338543e-01, -1.511779485338543e-01, -4.298624850180918e-02, -4.353826832384102e-02, -7.148086426584581e-02, -3.819576192390502e-02, -4.311439724256552e-02, -4.311439724256552e-02, -3.349071520684602e+00, -3.348650139700870e+00, -3.349032649270891e+00, -3.348704933419903e+00, -3.348849434199151e+00, -3.348849434199151e+00, -1.426785017443178e+00, -1.433343011001289e+00, -1.427388422665841e+00, -1.432491266405615e+00, -1.430456400748434e+00, -1.430456400748434e+00, -4.131992464399580e-01, -4.306961884504175e-01, -3.943080349037646e-01, -3.977596807979413e-01, -4.258117234659730e-01, -4.258117234659730e-01, -9.336919610074765e-02, -1.564943640511482e-01, -9.263891829716142e-02, -1.237592671386216e+00, -1.034564163039698e-01, -1.034564163039698e-01, -3.746373744490874e-02, -3.856803247302292e-02, -2.948607215970239e-02, -7.509899023751856e-02, -3.502153928042239e-02, -3.502153928042239e-02, -4.059078579775178e-01, -4.076335776355087e-01, -4.070523399468187e-01, -4.065742902777834e-01, -4.068161160706085e-01, -4.068161160706085e-01, -3.930661833484002e-01, -3.704816419043656e-01, -3.779872573031530e-01, -3.842139857595545e-01, -3.810317174013566e-01, -3.810317174013566e-01, -4.509080833890924e-01, -1.914000319148268e-01, -2.203025038625390e-01, -2.654422601523835e-01, -2.418361239357128e-01, -2.418361239357127e-01, -3.371294953783656e-01, -7.225612038337086e-02, -7.420618750679783e-02, -2.470630414209958e-01, -8.263433801366701e-02, -8.263433801366699e-02, -4.733784519581311e-02, -2.702557276671956e-02, -3.116837110488658e-02, -8.040349040334166e-02, -3.137881822326182e-02, -3.137881822326182e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_blyp35_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.645934544394713e+01, -1.645939896868067e+01, -1.645964717265943e+01, -1.645877050580802e+01, -1.645937359233850e+01, -1.645937359233850e+01, -2.709114238533405e+00, -2.709134697764737e+00, -2.709806057211384e+00, -2.709209402549765e+00, -2.709136011227591e+00, -2.709136011227591e+00, -5.581052710744783e-01, -5.575119111923585e-01, -5.431141522620504e-01, -5.469796172476258e-01, -5.578888799225622e-01, -5.578888799225622e-01, -1.747479621892929e-01, -1.761299058731507e-01, -6.629016715603183e-01, -1.421260235082063e-01, -1.751452094196897e-01, -1.751452094196897e-01, -1.654037722795299e-02, -1.702664827054011e-02, -4.782344046330850e-02, -1.112794948403101e-02, -1.685618815283852e-02, -1.685618815283852e-02, -4.100516499695481e+00, -4.102078104007434e+00, -4.100676484907921e+00, -4.101890703518964e+00, -4.101316589859380e+00, -4.101316589859380e+00, -1.509910456570795e+00, -1.520917566516405e+00, -1.504607287845100e+00, -1.513163047195652e+00, -1.524351457522189e+00, -1.524351457522189e+00, -4.972618081038930e-01, -5.484482984883372e-01, -4.731907193335566e-01, -5.000774961086234e-01, -5.162128437107315e-01, -5.162128437107315e-01, -1.166014643712882e-01, -1.888977644465563e-01, -1.127715973991591e-01, -1.576103933890545e+00, -1.259329013746394e-01, -1.259329013746394e-01, -1.083995701978050e-02, -1.166100514240630e-02, -8.844575755223833e-03, -6.928309731245974e-02, -1.060644636780665e-02, -1.060644636780664e-02, -5.274298334888606e-01, -5.208519417095970e-01, -5.230989424246455e-01, -5.249142489947736e-01, -5.239969347993442e-01, -5.239969347993442e-01, -5.123056780593144e-01, -4.322556173140460e-01, -4.525245995821695e-01, -4.733506367852016e-01, -4.625251675639301e-01, -4.625251675639303e-01, -5.726990943094213e-01, -2.236699389878767e-01, -2.532630249786306e-01, -3.106571337436463e-01, -2.789705276815810e-01, -2.789705276815810e-01, -3.930907022568156e-01, -4.469852192031566e-02, -6.263265656813409e-02, -2.951939086704280e-01, -9.056521474646298e-02, -9.056521474646295e-02, -1.876214078188008e-02, -5.775454959382685e-03, -7.900511805880148e-03, -8.429575635892907e-02, -9.293929351434719e-03, -9.293929351434718e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_blyp35_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_blyp35", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.702189866228477e-09, -4.702170134098565e-09, -4.702011109078982e-09, -4.702335657810882e-09, -4.702180053631870e-09, -4.702180053631870e-09, -6.045179947875522e-06, -6.045383424393909e-06, -6.049992155817807e-06, -6.036980027386828e-06, -6.045182496125078e-06, -6.045182496125078e-06, -3.084353550528397e-03, -3.081763851002423e-03, -2.980014908375541e-03, -2.916077287860864e-03, -3.083479911246127e-03, -3.083479911246127e-03, -1.864271578326279e-01, -1.896017028862177e-01, -1.757915444108635e-03, -1.372785263139231e-01, -1.876034726203664e-01, -1.876034726203664e-01, -1.819571448393954e+03, -1.595969138139108e+03, -1.413177735497393e+01, -1.348177259292846e+04, -1.662437652260092e+03, -1.662437652260092e+03, -1.400813982756826e-06, -1.401821014557320e-06, -1.400908931274500e-06, -1.401692038218721e-06, -1.401340957265478e-06, -1.401340957265478e-06, -4.393579369651534e-05, -4.312050752149806e-05, -4.388339696185077e-05, -4.324769902177027e-05, -4.345040021318581e-05, -4.345040021318581e-05, -6.756614117797483e-03, -6.441632946842050e-03, -8.084507232780659e-03, -8.632628553857180e-03, -6.079801014836380e-03, -6.079801014836380e-03, 1.146698516027409e-01, -7.248878121895536e-02, 4.071670845147146e-03, -8.371904862165767e-05, -1.047450433526944e-01, -1.047450433526944e-01, -1.519931471062428e+04, -1.036616592083566e+04, -3.191737264050222e+04, -2.541583726443780e+00, -1.511625243045890e+04, -1.511625243045891e+04, -8.750971089847914e-03, -8.142409996724673e-03, -8.327979645862764e-03, -8.492899641064075e-03, -8.407741185350311e-03, -8.407741185350311e-03, -1.012130298993815e-02, -9.659093964092605e-03, -9.499196600568138e-03, -9.478726610368674e-03, -9.486199138985213e-03, -9.486199138985213e-03, -5.305311168176017e-03, -5.955208725306253e-02, -4.987499522893560e-02, -3.397449374224142e-02, -4.256594856679505e-02, -4.256594856679508e-02, -1.378457289398238e-02, -1.818053069576769e+01, -3.950253139675066e+00, -4.884238449053224e-02, -5.721636038451345e-01, -5.721636038451381e-01, -1.066704164952668e+03, -5.035669335718292e+05, -7.584170070393481e+04, -1.116698522799419e+00, -2.683288798204740e+04, -2.683288798204750e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
