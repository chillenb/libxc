
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.704876372203098e+01, -1.704878573191406e+01, -1.704893931324675e+01, -1.704861070074596e+01, -1.704877496194873e+01, -1.704877496194873e+01, -2.802864044595606e+00, -2.802835575394397e+00, -2.802246969062871e+00, -2.803809260199459e+00, -2.802898319338697e+00, -2.802898319338697e+00, -5.192716363566255e-01, -5.190416883327088e-01, -5.141912337298676e-01, -5.184337987065947e-01, -5.171163022295291e-01, -5.171163022295291e-01, -1.102861789345016e-01, -1.122183127419167e-01, -6.100076123280235e-01, -7.914902920239499e-02, -9.124285389796906e-02, -9.124285389796906e-02, -2.428665658075526e-02, -2.435782020450279e-02, -4.252379273127849e-02, -2.180312111254163e-02, -2.187931001064169e-02, -2.187931001064168e-02, -4.081209745870430e+00, -4.080704168530853e+00, -4.081195276803173e+00, -4.080748827986735e+00, -4.080948693483372e+00, -4.080948693483372e+00, -1.672306483338120e+00, -1.681009804017630e+00, -1.671916972808499e+00, -1.679610984830104e+00, -1.677295673933598e+00, -1.677295673933598e+00, -4.329768500273215e-01, -4.583897930588948e-01, -3.993333978110118e-01, -4.034213072397032e-01, -4.388023343464034e-01, -4.388023343464034e-01, -5.246225354766274e-02, -1.098696957551380e-01, -4.952541058442972e-02, -1.452341876959731e+00, -6.327013889010283e-02, -6.327013889010283e-02, -1.958308016598611e-02, -2.101456154247420e-02, -1.385498028838582e-02, -4.263986237476411e-02, -1.674714409230794e-02, -1.674714409230795e-02, -4.168571416646663e-01, -4.181236029144573e-01, -4.177194795479020e-01, -4.173492656808566e-01, -4.175377179316445e-01, -4.175377179316445e-01, -4.033565102666642e-01, -3.664756755566232e-01, -3.781809713436644e-01, -3.887402412855595e-01, -3.833709628320854e-01, -3.833709628320854e-01, -4.831617836667160e-01, -1.474829529063127e-01, -1.834225408453438e-01, -2.463874666548412e-01, -2.132537798536789e-01, -2.132537798536789e-01, -3.338443210639335e-01, -4.284991815334127e-02, -4.242961997347839e-02, -2.325109822980569e-01, -4.656412588419609e-02, -4.656412588419608e-02, -2.767693560824348e-02, -1.193319203762364e-02, -1.576068418569316e-02, -4.515092133534076e-02, -1.573199597506699e-02, -1.573199597506698e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.043873973277005e+01, -2.043881619805846e+01, -2.043914245440164e+01, -2.043800509561685e+01, -2.043860299026366e+01, -2.043860299026366e+01, -3.297006571752721e+00, -3.297035464272220e+00, -3.297784707920433e+00, -3.297108422568644e+00, -3.297120633372121e+00, -3.297120633372121e+00, -6.234721475975151e-01, -6.227145172032494e-01, -6.054295613674111e-01, -6.105034961282674e-01, -6.094102545858009e-01, -6.094102545858009e-01, -1.520817411070985e-01, -1.536701824451155e-01, -7.299737207958296e-01, -1.210339607977552e-01, -1.318787780812173e-01, -1.318787780812173e-01, -8.334391626693811e-03, -8.555074202970345e-03, -2.697466672702074e-02, -6.136546068195974e-03, -6.798855494712710e-03, -6.798855494712725e-03, -5.030832063432729e+00, -5.032802096935876e+00, -5.030921233190631e+00, -5.032660377729952e+00, -5.031831160360653e+00, -5.031831160360653e+00, -1.808887632752473e+00, -1.822921166211833e+00, -1.797185194263143e+00, -1.809503834405803e+00, -1.822394513099551e+00, -1.822394513099551e+00, -5.469381798742325e-01, -6.062066841127162e-01, -5.034603615269641e-01, -5.314421735361600e-01, -5.569755079561718e-01, -5.569755079561718e-01, -8.924405661278965e-02, -1.647037147746263e-01, -8.144529835913999e-02, -1.879086319114033e+00, -9.858226233188402e-02, -9.858226233188402e-02, -5.179810812252899e-03, -5.953133868383335e-03, -4.210180004361220e-03, -4.824646695273784e-02, -5.069798302647951e-03, -5.069798302647966e-03, -5.622052794211208e-01, -5.551931574971786e-01, -5.575452738970178e-01, -5.595754659748746e-01, -5.585491162642637e-01, -5.585491162642637e-01, -5.472700623312908e-01, -4.530819640337175e-01, -4.765402755838071e-01, -5.023063716057943e-01, -4.888463060533138e-01, -4.888463060533138e-01, -6.364393541467416e-01, -2.049513341233089e-01, -2.404800124689541e-01, -3.130208642094588e-01, -2.724118602024209e-01, -2.724118602024209e-01, -4.153969379129616e-01, -2.600320122048526e-02, -3.684452069452052e-02, -2.997980828763216e-01, -6.377795834089257e-02, -6.377795834089250e-02, -1.051759881613724e-02, -2.548896133536414e-03, -3.974741379261845e-03, -5.929317751042639e-02, -4.733926784900616e-03, -4.733926784900594e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.819536405367391e-09, -5.819508433419032e-09, -5.819305120321921e-09, -5.819722930395549e-09, -5.819515223200977e-09, -5.819515223200977e-09, -7.230749204761432e-06, -7.231063650982098e-06, -7.237646067408091e-06, -7.220830120701219e-06, -7.230442181296613e-06, -7.230442181296613e-06, -3.101848386763593e-03, -3.099078294445024e-03, -3.001092307732180e-03, -2.934390160734205e-03, -2.963013510285267e-03, -2.963013510285267e-03, -1.664734353189664e-02, -2.579820233618381e-02, -1.874040857829785e-03, 1.990407857253118e-01, 6.907863689185899e-02, 6.907863689185907e-02, -3.547483259435018e+03, -3.110838515827430e+03, -1.298981351092487e+01, -1.674166895289723e+04, -9.278157159617380e+03, -9.278157159617385e+03, -1.695241996023977e-06, -1.696502094583522e-06, -1.695283456032969e-06, -1.696396007845539e-06, -1.695888913933587e-06, -1.695888913933587e-06, -5.098686799129195e-05, -5.003111689204121e-05, -5.099287023827671e-05, -5.014609125902065e-05, -5.045611764463773e-05, -5.045611764463773e-05, -6.210859910294663e-03, -6.019523422965984e-03, -7.823914788105691e-03, -8.872591485039539e-03, -6.057170820530814e-03, -6.057170820530814e-03, 9.699510824180663e-01, 4.857115593041550e-02, 1.147127554417423e+00, -9.626006256003279e-05, 4.710703941903678e-01, 4.710703941903678e-01, -3.818628434480481e+04, -1.870479523775617e+04, -6.778130744545754e+04, 7.490779535537604e-01, -3.200097145795539e+04, -3.200097145795537e+04, -8.827208794362204e-03, -8.177880357821668e-03, -8.373287053034830e-03, -8.558575586727606e-03, -8.462882554954107e-03, -8.462882554954107e-03, -1.011346458604203e-02, -9.073655335897291e-03, -9.108628175455791e-03, -9.254881154483925e-03, -9.179495952949049e-03, -9.179495952949049e-03, -5.013014998820367e-03, -9.498908798711103e-03, -2.536758937522528e-02, -2.587073757143716e-02, -2.847981640892847e-02, -2.847981640892849e-02, -1.180093415470194e-02, -1.534747100257460e+01, -1.655353303127648e+00, -3.428509595925814e-02, 1.074322985705506e+00, 1.074322985705506e+00, -1.243377694639760e+03, -1.314022953163589e+06, -1.260320773425305e+05, 1.086101274870322e+00, -4.272004159492620e+04, -4.272004159492634e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
