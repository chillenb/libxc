
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.678533878373057e+01, -1.678536414993163e+01, -1.678552554244341e+01, -1.678514714105572e+01, -1.678533850176475e+01, -1.678533850176475e+01, -2.811207448073013e+00, -2.811183679948875e+00, -2.810702116906104e+00, -2.812065649861635e+00, -2.811245754770400e+00, -2.811245754770400e+00, -5.782873944008216e-01, -5.780694741448172e-01, -5.735499804753712e-01, -5.777062351327912e-01, -5.764038373806696e-01, -5.764038373806696e-01, -1.627419865897660e-01, -1.647079921513493e-01, -6.675123851849831e-01, -1.274952152660238e-01, -1.413335170319920e-01, -1.413335170319920e-01, -4.393744227147476e-02, -4.397206128781019e-02, -7.546998976946784e-02, -4.008038072978459e-02, -3.988997845511993e-02, -3.988997845511991e-02, -4.076575183597513e+00, -4.076244930724570e+00, -4.076567839478801e+00, -4.076276181696872e+00, -4.076403516993615e+00, -4.076403516993615e+00, -1.696799705098152e+00, -1.705536569041371e+00, -1.695677810333586e+00, -1.703398353282724e+00, -1.702164017250694e+00, -1.702164017250694e+00, -4.922181682457230e-01, -5.169844610207820e-01, -4.587674680731217e-01, -4.620242921733769e-01, -4.979361638494084e-01, -4.979361638494084e-01, -9.397156798927828e-02, -1.649705313157974e-01, -8.958607713851421e-02, -1.499375917754213e+00, -1.071008676390419e-01, -1.071008676390419e-01, -3.614734551395001e-02, -3.859942397506134e-02, -2.520283183804558e-02, -7.745554300318740e-02, -3.052626935764506e-02, -3.052626935764507e-02, -4.751864844329046e-01, -4.766486776339900e-01, -4.761774732906792e-01, -4.757503942548846e-01, -4.759674399322360e-01, -4.759674399322360e-01, -4.615476454791088e-01, -4.266754146224338e-01, -4.376992628235609e-01, -4.476589496788252e-01, -4.425776447643887e-01, -4.425776447643887e-01, -5.417440258402272e-01, -2.061716441357797e-01, -2.430772514959708e-01, -3.053825778056011e-01, -2.726428781249671e-01, -2.726428781249671e-01, -3.939900421883144e-01, -7.604589494610406e-02, -7.695934036449249e-02, -2.901184615865519e-01, -8.329337092878711e-02, -8.329337092878712e-02, -4.968620828270860e-02, -2.231939822315619e-02, -2.916179028390987e-02, -8.114444046485879e-02, -2.867584897976857e-02, -2.867584897976855e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.045007974372162e+01, -2.045015291621212e+01, -2.045046965983580e+01, -2.044938118362738e+01, -2.044995273675752e+01, -2.044995273675752e+01, -3.346434623747557e+00, -3.346460679971266e+00, -3.347144138562452e+00, -3.346581071994352e+00, -3.346545149615940e+00, -3.346545149615940e+00, -6.791116456510263e-01, -6.783353217134565e-01, -6.606010219442064e-01, -6.657063287852213e-01, -6.646205178058489e-01, -6.646205178058489e-01, -1.991445320987331e-01, -2.007002490153786e-01, -7.858140326538526e-01, -1.669561061844615e-01, -1.780266377368088e-01, -1.780266377368088e-01, -1.270713572509765e-02, -1.300726400798551e-02, -4.202322069592249e-02, -9.596239635891140e-03, -1.045292192099967e-02, -1.045292192099970e-02, -5.064327368832322e+00, -5.066143383856923e+00, -5.064410150380474e+00, -5.066013322310774e+00, -5.065248064521888e+00, -5.065248064521888e+00, -1.866212212450870e+00, -1.880165088931931e+00, -1.854734550546541e+00, -1.866989476233466e+00, -1.879557996669895e+00, -1.879557996669895e+00, -6.035536147417122e-01, -6.642022439510148e-01, -5.597810521407602e-01, -5.893745854850095e-01, -6.137702087913915e-01, -6.137702087913915e-01, -1.300466442093428e-01, -2.152609347854809e-01, -1.197219237784360e-01, -1.926318331396193e+00, -1.406569563703957e-01, -1.406569563703957e-01, -8.161108677551697e-03, -9.282373034282079e-03, -6.346484367883501e-03, -7.339913825935213e-02, -7.721066150414122e-03, -7.721066150414151e-03, -6.209244300097476e-01, -6.133996219536565e-01, -6.159222830380965e-01, -6.181011049948861e-01, -6.169995325384339e-01, -6.169995325384339e-01, -6.062336380422167e-01, -5.082144726367530e-01, -5.326288713329995e-01, -5.594751631473838e-01, -5.454617935904411e-01, -5.454617935904411e-01, -6.942371481553085e-01, -2.559448469854859e-01, -2.914455633586395e-01, -3.663403419218204e-01, -3.241520114752279e-01, -3.241520114752279e-01, -4.702137819945535e-01, -4.057597087960962e-02, -5.694941055569497e-02, -3.536031567232687e-01, -9.517563819537365e-02, -9.517563819537361e-02, -1.599196455964267e-02, -4.168373889461002e-03, -6.277048658048292e-03, -8.895472000634512e-02, -7.195386789028099e-03, -7.195386789028057e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.850825756557053e-09, -4.850802383366675e-09, -4.850632587229286e-09, -4.850981704897122e-09, -4.850808134072433e-09, -4.850808134072433e-09, -6.218123279891302e-06, -6.218395409162422e-06, -6.224090176947152e-06, -6.209526520442864e-06, -6.217855806979676e-06, -6.217855806979676e-06, -3.123552759277153e-03, -3.121072591834246e-03, -3.028135158582925e-03, -2.955846680419474e-03, -2.986273119902653e-03, -2.986273119902653e-03, -1.242074191520254e-01, -1.322720472977075e-01, -1.831815112039522e-03, 2.734577055895101e-02, -8.255521604344483e-02, -8.255521604344471e-02, -6.800018596888441e+03, -5.963032995859721e+03, -2.886685643000685e+01, -3.209138770986456e+04, -1.778490181102660e+04, -1.778490181102662e+04, -1.440900971372695e-06, -1.441973643013770e-06, -1.440936220842853e-06, -1.441883292325941e-06, -1.441451690048630e-06, -1.441451690048630e-06, -4.491995868679553e-05, -4.406553718232524e-05, -4.492329812582094e-05, -4.416653194995062e-05, -4.444618095029586e-05, -4.444618095029586e-05, -6.500748552902788e-03, -6.205648447575246e-03, -8.361740057721646e-03, -9.426698928927293e-03, -6.317669956591878e-03, -6.317669956591878e-03, 6.627581140237615e-01, -1.372770374873523e-02, 7.219719824136545e-01, -8.555344721224196e-05, 1.699837300991344e-01, 1.699837300991344e-01, -7.319765190206557e+04, -3.585442035102749e+04, -1.299270833186128e+05, -1.870922484015496e+00, -6.134129070728346e+04, -6.134129070728342e+04, -9.298098402487022e-03, -8.609629543652032e-03, -8.816204906326291e-03, -9.012578883369583e-03, -8.911104539548279e-03, -8.911104539548279e-03, -1.073919157323617e-02, -9.965089342576578e-03, -9.884185632864343e-03, -9.941180566066965e-03, -9.909915767996082e-03, -9.909915767996082e-03, -5.110682702178747e-03, -4.073268417494447e-02, -4.373938781012111e-02, -3.318255058430541e-02, -4.058681146685713e-02, -4.058681146685715e-02, -1.335537931463222e-02, -3.322536712974935e+01, -7.264555523820895e+00, -4.470745423582877e-02, -7.860302700353380e-02, -7.860302700353659e-02, -2.383377425268451e+03, -2.518794283649396e+06, -2.415854876809038e+05, -3.564391061734293e-01, -8.188821686465183e+04, -8.188821686465209e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
