
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_b97x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.533628361652936e+01, -1.533631490799174e+01, -1.533648528499269e+01, -1.533601909225590e+01, -1.533625892168404e+01, -1.533625892168404e+01, -2.568546861249391e+00, -2.568538502674969e+00, -2.568407319636728e+00, -2.569113195047532e+00, -2.568597600845766e+00, -2.568597600845766e+00, -5.394291312344007e-01, -5.390276163254274e-01, -5.307507795342615e-01, -5.345298923809209e-01, -5.358883073003765e-01, -5.358883073003765e-01, -1.733462079998893e-01, -1.742437053241456e-01, -6.209939499409294e-01, -1.543851245966513e-01, -1.684801437111674e-01, -1.684801437111673e-01, -1.425447241949656e-02, -1.500405405292130e-02, -7.145462801459325e-02, -8.236798411434640e-03, -1.148339946254842e-02, -1.148339946254842e-02, -3.769197273114862e+00, -3.769510492771269e+00, -3.769215943611116e+00, -3.769492355758494e+00, -3.769353456109441e+00, -3.769353456109441e+00, -1.525608422806595e+00, -1.533897346046779e+00, -1.523599767051040e+00, -1.530849976467060e+00, -1.531267963352280e+00, -1.531267963352280e+00, -4.755772211297820e-01, -5.184559934655086e-01, -4.433741212962864e-01, -4.639383211780803e-01, -4.832497294473352e-01, -4.832497294473354e-01, -1.342841849786681e-01, -1.873432420971674e-01, -1.283350830562522e-01, -1.434137200530664e+00, -1.390083910846864e-01, -1.390083910846864e-01, -6.361046879939478e-03, -8.051825975864835e-03, -6.164363249128370e-03, -9.989856841860589e-02, -7.741870964998799e-03, -7.741870964998806e-03, -4.869563587569192e-01, -4.813607644481427e-01, -4.832262576925534e-01, -4.848483315446003e-01, -4.840272844631842e-01, -4.840272844631842e-01, -4.763114191109094e-01, -4.062734737020131e-01, -4.229837423269405e-01, -4.419717303555061e-01, -4.319673941486344e-01, -4.319673941486344e-01, -5.404250680287647e-01, -2.164344803732517e-01, -2.423048239797400e-01, -2.979632633307189e-01, -2.662738367737805e-01, -2.662738367737805e-01, -3.771718370229485e-01, -6.913628451006298e-02, -8.736266300526875e-02, -2.885282368807252e-01, -1.132714848194218e-01, -1.132714848194217e-01, -2.002211365707680e-02, -2.153820840976546e-03, -4.528159762107835e-03, -1.096306950018509e-01, -7.110625918772707e-03, -7.110625918772697e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_b97x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.941153493966353e+01, -1.941151183576396e+01, -1.941161781594186e+01, -1.941157239957594e+01, -1.941186902908283e+01, -1.941193438398288e+01, -1.941092864012289e+01, -1.941074115432571e+01, -1.941158074735564e+01, -1.941121050532490e+01, -1.941158074735564e+01, -1.941121050532490e+01, -3.225990728519528e+00, -3.226117374797803e+00, -3.226027478275325e+00, -3.226158973006623e+00, -3.226963078483036e+00, -3.227186203351614e+00, -3.225844879815866e+00, -3.226071477621096e+00, -3.225433972165197e+00, -3.226917454966642e+00, -3.225433972165197e+00, -3.226917454966642e+00, -6.728037916187368e-01, -6.769841438165234e-01, -6.708851048672406e-01, -6.760230721658295e-01, -6.397426077260800e-01, -6.321998595559993e-01, -6.405802834170528e-01, -6.430242012736210e-01, -6.747037233996378e-01, -5.996265157271538e-01, -6.747037233996378e-01, -5.996265157271538e-01, -1.634250606850562e-01, -1.698559092827881e-01, -1.683938102021791e-01, -1.757164018696290e-01, -7.662558196157879e-01, -7.954449934024564e-01, -1.162708332792675e-01, -1.172717096782416e-01, -1.516630310118047e-01, -1.144532548656789e-01, -1.516630310118045e-01, -1.144532548656791e-01, -1.829124471792544e-02, -1.941519011825601e-02, -1.914681438650167e-02, -2.048092237218671e-02, -8.141479664282859e-02, -8.387683436525999e-02, -1.105388092421828e-02, -1.087097716396863e-02, -1.634600730538743e-02, -9.331985076753591e-03, -1.634600730538742e-02, -9.331985076753591e-03, -4.880156048826006e+00, -4.879021297674962e+00, -4.882037678946094e+00, -4.880846362923136e+00, -4.880258876435231e+00, -4.879086414193916e+00, -4.881878611363208e+00, -4.880739092337682e+00, -4.881118655577350e+00, -4.879939451338942e+00, -4.881118655577350e+00, -4.879939451338942e+00, -1.732261561553111e+00, -1.732171036200456e+00, -1.749300599749336e+00, -1.748773936220570e+00, -1.709295410919464e+00, -1.715157665682547e+00, -1.724206851486595e+00, -1.730124014430539e+00, -1.757856854100337e+00, -1.744296715153630e+00, -1.757856854100337e+00, -1.744296715153630e+00, -6.260933959961303e-01, -6.250143831403142e-01, -6.846778813451685e-01, -6.850456051877931e-01, -5.730995679177652e-01, -5.889787393331389e-01, -6.072577101167799e-01, -6.202003776271591e-01, -6.480414200309188e-01, -6.250662297771443e-01, -6.480414200309189e-01, -6.250662297771447e-01, -1.075604496799335e-01, -1.068100722941871e-01, -1.505514465684013e-01, -1.510856703872112e-01, -1.059144279703505e-01, -1.055629597634370e-01, -1.900442245324287e+00, -1.899742881458470e+00, -1.050026289472067e-01, -1.003754285274535e-01, -1.050026289472067e-01, -1.003754285274535e-01, -8.300039347502002e-03, -8.625575708097117e-03, -1.063561354656162e-02, -1.079672968924454e-02, -7.947776664312393e-03, -8.411999363883293e-03, -9.690141398248719e-02, -9.765744174420082e-02, -8.124128410899129e-03, -1.113300130165752e-02, -8.124128410899146e-03, -1.113300130165754e-02, -6.357307644013225e-01, -6.374013173827167e-01, -6.342398558481699e-01, -6.359661613405956e-01, -6.350634455147246e-01, -6.367817113841886e-01, -6.355219845575381e-01, -6.372007062597157e-01, -6.353212526153438e-01, -6.370190996275109e-01, -6.353212526153438e-01, -6.370190996275109e-01, -6.191811157115968e-01, -6.205275583708437e-01, -5.158826704189160e-01, -5.177858542412263e-01, -5.525926459284942e-01, -5.545926937091993e-01, -5.852095993183879e-01, -5.866583867391378e-01, -5.694558141691974e-01, -5.709755058329297e-01, -5.694558141691974e-01, -5.709755058329297e-01, -7.141541181187907e-01, -7.152086513023018e-01, -1.958279992945084e-01, -1.969764195519084e-01, -2.546590849229053e-01, -2.572300006523008e-01, -3.780841516755905e-01, -3.796186723068329e-01, -3.150745773046345e-01, -3.152703573859458e-01, -3.150745773046344e-01, -3.152703573859458e-01, -4.788034572433322e-01, -4.816750517754211e-01, -8.103600501671207e-02, -8.135691064039256e-02, -9.434866126894086e-02, -9.529027713457171e-02, -3.757201421244948e-01, -3.796783816364699e-01, -9.802745321780769e-02, -9.324860005324979e-02, -9.802745321780738e-02, -9.324860005324960e-02, -2.594152926243637e-02, -2.683868279285360e-02, -2.867890336763562e-03, -2.874132215177969e-03, -5.830942036219713e-03, -6.200532172544607e-03, -9.551114401988534e-02, -9.582454277508423e-02, -7.690277902143287e-03, -1.021111487637731e-02, -7.690277902143260e-03, -1.021111487637727e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_b97x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.331125632790276e-09, 3.855567579455844e-10, -5.331153732684622e-09, -5.331046324637442e-09, 3.855637563905792e-10, -5.331095162918370e-09, -5.330790808700878e-09, 3.855734091993355e-10, -5.330733404645546e-09, -5.331699002358874e-09, 3.854697494807899e-10, -5.331876692880591e-09, -5.331095655912291e-09, 3.855271085313426e-10, -5.331405683741388e-09, -5.331095655912291e-09, 3.855271085313426e-10, -5.331405683741388e-09, -6.841491581412052e-06, 2.158879157656427e-06, -6.841711292443432e-06, -6.841143725617936e-06, 2.159323527660124e-06, -6.841411181232068e-06, -6.833551227948070e-06, 2.169371669283230e-06, -6.832692548212566e-06, -6.842600134680352e-06, 2.149943255801801e-06, -6.841922934712279e-06, -6.846737436914444e-06, 2.159156568071321e-06, -6.834424412246100e-06, -6.846737436914444e-06, 2.159156568071321e-06, -6.834424412246100e-06, -4.043880713060737e-03, 3.586683876242116e-03, -3.953273868933722e-03, -4.093413571830525e-03, 3.559577090514688e-03, -3.981825639688897e-03, -4.937261992429829e-03, 2.876045381924161e-03, -5.108361919173231e-03, -4.871167816479035e-03, 2.810968523930000e-03, -4.819412651301584e-03, -4.147410137783818e-03, 2.852692094259074e-03, -5.729551055351067e-03, -4.147410137783818e-03, 2.852692094259074e-03, -5.729551055351067e-03, -1.095117608915248e+00, 3.108902575321890e-01, -9.401674941661804e-01, -1.042024856498306e+00, 3.280826843588528e-01, -8.719488398991171e-01, -2.377329025731225e-03, 1.940414170439823e-03, -1.960282619976664e-03, -2.445272179901105e+00, 2.258949661124237e-01, -2.335068101422799e+00, -9.631375221702181e-01, 1.882246441728870e-01, -5.110364511375514e+00, -9.631375221702220e-01, 1.882246441728873e-01, -5.110364511375473e+00, -2.656925587924084e+01, 8.471332723898200e-03, -2.627254978056732e+01, -2.796524247780717e+01, 9.964515393423459e-03, -2.777952253984244e+01, -1.160980122999008e+01, 5.126941006152715e-02, -1.146615451932610e+01, -2.447699761304474e+01, 3.008683449168684e-03, -2.381613892186833e+01, -2.657422957405685e+01, 4.414566270491809e-03, -6.765977030165371e+01, -2.657422957406378e+01, 4.414566270088269e-03, -6.765977030162044e+01, -1.269564684606907e-06, 5.666948009101149e-07, -1.271064441969277e-06, -1.266266656877660e-06, 5.704413223836728e-07, -1.267813223861342e-06, -1.269405700188394e-06, 5.668443577206054e-07, -1.270938697282400e-06, -1.266529678604592e-06, 5.701514261968389e-07, -1.268033389770467e-06, -1.267885799679470e-06, 5.686004611431787e-07, -1.269420026242929e-06, -1.267885799679470e-06, 5.686004611431787e-07, -1.269420026242929e-06, -7.326176516687415e-05, 1.221811741084532e-05, -7.327775222283401e-05, -7.100115339608542e-05, 1.218856108878283e-05, -7.108466404169191e-05, -7.549118958879784e-05, 1.161795009824474e-05, -7.495063887374430e-05, -7.347273077252519e-05, 1.159619612758267e-05, -7.292180322679060e-05, -7.045074407193744e-05, 1.250231835492394e-05, -7.177600520777763e-05, -7.045074407193744e-05, 1.250231835492394e-05, -7.177600520777763e-05, -3.926698366144322e-03, 1.180452397706796e-02, -4.031835333908555e-03, 4.573661574649411e-04, 1.489938286408802e-02, 4.712023962442843e-04, -6.903633753165567e-03, 1.535577972946644e-02, -4.919732266350728e-03, -8.356803792732379e-04, 2.278859644535717e-02, 6.726050204942918e-04, -2.482128580734567e-03, 1.179162458306085e-02, -4.402957026898150e-03, -2.482128580734572e-03, 1.179162458306085e-02, -4.402957026898149e-03, -4.593680161336430e+00, 1.261488607621168e-01, -4.602766564668948e+00, -9.106872815695576e-01, 1.139695105238702e-01, -8.961195748542665e-01, -5.580297229232240e+00, 1.279112469154852e-01, -5.173157995993141e+00, -2.283487415693920e-05, 1.207887057881010e-04, -2.298392144282119e-05, -4.104951392234608e+00, 2.409472748596690e-01, -4.202804447556443e+00, -4.104951392234608e+00, 2.409472748596690e-01, -4.202804447556443e+00, -3.440351595684889e+01, 2.933546798259037e-03, -2.977674219548068e+01, -2.958670963927577e+01, 3.699144102256803e-03, -2.731721102621604e+01, -1.683718584823759e+02, 3.685108437354808e-02, -1.871882040416669e+02, -1.043397139620298e+01, 1.250822448857004e-01, -1.006517677265833e+01, -8.381470594683195e+01, 1.410360645889085e-02, -8.213731210648963e+01, -8.381470594665983e+01, 1.410360646869916e-02, -8.213731210651990e+01, 2.954383218850521e-03, 2.514346072918196e-02, 3.103020282585352e-03, 9.197345120490908e-04, 2.157065992117518e-02, 1.074455708562011e-03, 1.576794861684406e-03, 2.270457728491302e-02, 1.729858513354016e-03, 2.166624618409918e-03, 2.373865089872573e-02, 2.316872125417011e-03, 1.866262604300544e-03, 2.321019190891285e-02, 2.017887286977736e-03, 1.866262604300544e-03, 2.321019190891285e-02, 2.017887286977736e-03, 4.154676412684095e-03, 2.977269840520045e-02, 4.296599931532358e-03, -1.227169184481064e-02, 1.592277215307748e-02, -1.192497896981506e-02, -7.618093320281686e-03, 1.838749842245184e-02, -7.318696640150921e-03, -3.132552936216020e-03, 2.169730037966074e-02, -2.934594510581616e-03, -5.370321892166942e-03, 1.995497716545398e-02, -5.141267996800831e-03, -5.370321892166942e-03, 1.995497716545398e-02, -5.141267996800831e-03, 1.187189747952431e-04, 1.183264719377924e-02, 1.580493131939842e-04, -4.077094297261034e-01, 8.498631964250428e-02, -3.989145429596999e-01, -1.989842779745327e-01, 7.821972418059023e-02, -1.913000824549851e-01, -4.751366131892015e-02, 6.964082434152352e-02, -4.572030683822124e-02, -1.017372019511709e-01, 7.796350422599263e-02, -1.019922821600782e-01, -1.017372019511715e-01, 7.796350422599266e-02, -1.019922821600782e-01, -1.693140689648030e-02, 2.285950305464996e-02, -1.616604480612804e-02, -1.072170723792260e+01, 4.213028450134424e-02, -1.071144003042760e+01, -9.511184056240699e+00, 6.458066222247318e-02, -9.564092508437371e+00, -4.288834998687844e-02, 1.099497136873529e-01, -3.716203163946934e-02, -8.710546201687700e+00, 2.182010199987041e-01, -9.334209403614537e+00, -8.710546201687757e+00, 2.182010199987039e-01, -9.334209403614549e+00, -2.083815516616316e+01, 1.056259116938041e-02, -2.123207424507129e+01, -1.061545582737585e+02, 4.011531506685853e-03, -1.879684347521451e+02, -6.539092227995140e+01, 5.020763908060611e-03, -6.958947910298440e+01, -9.895362460472063e+00, 2.002688123716920e-01, -9.586834398247223e+00, -1.726652235213378e+02, 1.800188742308661e-02, -8.532336346187215e+01, -1.726652235213541e+02, 1.800188743452388e-02, -8.532336346195063e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
