
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cap0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.563834617211342e+01, -1.563837147710070e+01, -1.563852649415492e+01, -1.563814913386667e+01, -1.563834081769539e+01, -1.563834081769539e+01, -2.624043807307856e+00, -2.624026500377429e+00, -2.623689875915721e+00, -2.624764991633749e+00, -2.624085369419985e+00, -2.624085369419985e+00, -5.467654931712229e-01, -5.464734905923697e-01, -5.407873203175830e-01, -5.446039322909717e-01, -5.454810163084197e-01, -5.454810163084197e-01, -1.695425091729285e-01, -1.704894426216871e-01, -6.299629780443320e-01, -1.507744439331599e-01, -1.645407386909945e-01, -1.645407386909945e-01, -1.599125904552278e-01, -1.559320987180206e-01, -1.376737756947959e-01, -1.804237266146467e-01, -1.597292603412006e-01, -1.597292603412005e-01, -3.820196465508994e+00, -3.820142476337877e+00, -3.820200076691767e+00, -3.820152297817439e+00, -3.820165593299514e+00, -3.820165593299514e+00, -1.578566310106188e+00, -1.586586879641157e+00, -1.577838772750628e+00, -1.584872805115646e+00, -1.583428957021122e+00, -1.583428957021122e+00, -4.744988504298713e-01, -5.092712395524358e-01, -4.425249967518846e-01, -4.556939865661164e-01, -4.813886603476289e-01, -4.813886603476288e-01, -1.417943192685686e-01, -1.846276534233637e-01, -1.383454281853120e-01, -1.433522803148094e+00, -1.374426062685320e-01, -1.374426062685320e-01, -1.735636210935407e-01, -1.727603149788662e-01, -1.057220556161179e-01, -1.266493235482878e-01, -1.275518173055717e-01, -1.275518173055718e-01, -4.741628220555857e-01, -4.715835681402925e-01, -4.724616298891242e-01, -4.732097897827129e-01, -4.728325491968758e-01, -4.728325491968758e-01, -4.624572345505100e-01, -4.084040658464905e-01, -4.222054897867156e-01, -4.371314121110741e-01, -4.293103413659980e-01, -4.293103413659980e-01, -5.319425550013538e-01, -2.149671005280719e-01, -2.419796194733605e-01, -2.969800283436278e-01, -2.661969027148624e-01, -2.661969027148624e-01, -3.784200361666067e-01, -1.422233859342027e-01, -1.368268072489486e-01, -2.851855145517235e-01, -1.225910151211585e-01, -1.225910151211585e-01, -1.603312408370586e-01, -1.332676851647475e-01, -1.472317406642074e-01, -1.221532614379422e-01, -1.208099635967239e-01, -1.208099635967238e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cap0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.920137041936284e+01, -1.920134771654382e+01, -1.920145400533263e+01, -1.920140878333583e+01, -1.920170549660164e+01, -1.920177176746591e+01, -1.920075730420288e+01, -1.920056840208763e+01, -1.920141698874772e+01, -1.920104015393034e+01, -1.920141698874772e+01, -1.920104015393034e+01, -3.184308158861129e+00, -3.184431930699348e+00, -3.184343203687853e+00, -3.184471703088465e+00, -3.185238188094020e+00, -3.185457127649932e+00, -3.184186444114636e+00, -3.184408299982190e+00, -3.183760005369871e+00, -3.185217726541052e+00, -3.183760005369871e+00, -3.185217726541052e+00, -6.582196133582708e-01, -6.620289813191370e-01, -6.565162049175354e-01, -6.611906013714360e-01, -6.294574233554503e-01, -6.228875190332324e-01, -6.306801411984074e-01, -6.328084954609361e-01, -6.611426175416399e-01, -5.961931913265257e-01, -6.611426175416399e-01, -5.961931913265257e-01, -1.599447863145608e-01, -1.658683418682361e-01, -1.648542489021102e-01, -1.715507948701467e-01, -7.506195277455243e-01, -7.781173637075375e-01, -9.602745207657586e-02, -9.742154554590270e-02, -1.446179728359394e-01, -6.914456621108245e-02, -1.446179728359394e-01, -6.914456621108241e-02, 3.702025353567234e-02, 3.694878373699998e-02, 3.637264303881276e-02, 3.620301472036314e-02, 1.937600057105270e-02, 1.741874878150942e-02, 3.855587110669275e-02, 3.882654350151959e-02, 3.730105191684745e-02, 2.987337627984858e-02, 3.730105191684744e-02, 2.987337627984853e-02, -4.825421955633908e+00, -4.824295410328545e+00, -4.827407929925982e+00, -4.826220132811072e+00, -4.825530304254975e+00, -4.824363231123739e+00, -4.827238773075478e+00, -4.826107232655892e+00, -4.826438422902649e+00, -4.825263278119183e+00, -4.826438422902649e+00, -4.825263278119183e+00, -1.723812109354250e+00, -1.723724946605466e+00, -1.739829431446553e+00, -1.739328596393967e+00, -1.703608163322033e+00, -1.708689335426591e+00, -1.717561389042497e+00, -1.722728026201997e+00, -1.747013717560542e+00, -1.734970733311785e+00, -1.747013717560542e+00, -1.734970733311785e+00, -6.060712670720205e-01, -6.050281476843171e-01, -6.645320635141247e-01, -6.649632073157050e-01, -5.542302410654265e-01, -5.696114260849685e-01, -5.871374096948443e-01, -5.997919485505109e-01, -6.273047433044885e-01, -6.049310021591391e-01, -6.273047433044885e-01, -6.049310021591391e-01, -3.967164368636354e-02, -4.090295539453944e-02, -1.381762339724575e-01, -1.389243887807687e-01, -3.112040692888921e-02, -3.549081715551817e-02, -1.874085547910938e+00, -1.873404539246799e+00, -6.163191607902282e-02, -7.153621349443251e-02, -6.163191607902282e-02, -7.153621349443251e-02, 3.540385693502696e-02, 3.670623520018884e-02, 3.676865892979217e-02, 3.751100561984167e-02, 2.375388362130080e-02, 2.308024289557067e-02, -6.616503193470180e-03, -6.472765111391933e-03, 2.834378875074445e-02, 2.827936974350815e-02, 2.834378875074448e-02, 2.827936974350820e-02, -6.183115842157385e-01, -6.200063045457938e-01, -6.145795980043920e-01, -6.163243168686156e-01, -6.160055698956166e-01, -6.177482642446775e-01, -6.171059567852341e-01, -6.188038857629695e-01, -6.165669466092824e-01, -6.182866718555348e-01, -6.165669466092824e-01, -6.182866718555348e-01, -6.028903200501641e-01, -6.042375001779993e-01, -5.010936605238544e-01, -5.028857781953597e-01, -5.340814469505960e-01, -5.360108761695349e-01, -5.646733062759735e-01, -5.661005446128514e-01, -5.496386861313690e-01, -5.511193271785804e-01, -5.496386861313690e-01, -5.511193271785804e-01, -6.935681346995040e-01, -6.947126290566690e-01, -1.932475055756644e-01, -1.943867176530788e-01, -2.521676644331602e-01, -2.546815615585181e-01, -3.650328931366194e-01, -3.664591672588708e-01, -3.082033083100502e-01, -3.083350879227681e-01, -3.082033083100502e-01, -3.083350879227681e-01, -4.643906526659299e-01, -4.670760878460785e-01, 2.121513468671374e-02, 2.097619923785511e-02, 9.657363268869306e-03, 7.814649193126433e-03, -3.596848170344317e-01, -3.634129794680368e-01, -2.326648380473383e-02, -2.978257099042100e-02, -2.326648380473386e-02, -2.978257099042098e-02, 3.807501864005396e-02, 3.766604718361703e-02, 2.608648367627473e-02, 2.275945822557213e-02, 3.006341931573960e-02, 2.964288779034356e-02, -2.094126864231220e-02, -2.184104453461112e-02, 2.361857303285862e-02, 2.809134025727530e-02, 2.361857303285853e-02, 2.809134025727535e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cap0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.450324778283007e-09, 3.915834430683599e-10, -8.450372651685893e-09, -8.450251614957744e-09, 3.915900043579215e-10, -8.450318578696028e-09, -8.449945903695306e-09, 3.915982729255413e-10, -8.449904150421188e-09, -8.450785714533532e-09, 3.915011051287444e-10, -8.450960604743627e-09, -8.450301268231106e-09, 3.915549831887424e-10, -8.450473370423499e-09, -8.450301268231106e-09, 3.915549831887424e-10, -8.450473370423499e-09, -1.064322201850932e-05, 2.167656295658505e-06, -1.064623728712268e-05, -1.064316913584430e-05, 2.168063431995100e-06, -1.064642664931358e-05, -1.064468368149987e-05, 2.177247319132109e-06, -1.064601455532793e-05, -1.063550617316548e-05, 2.159320623177218e-06, -1.063745576259646e-05, -1.065001589871044e-05, 2.167889702047513e-06, -1.063760511128704e-05, -1.065001589871044e-05, 2.167889702047513e-06, -1.063760511128704e-05, -6.016595521454413e-03, 3.543826473688997e-03, -5.969990614050946e-03, -6.049275178959925e-03, 3.523621799586460e-03, -5.991509571273350e-03, -6.642854903698606e-03, 2.992541259960454e-03, -6.740405891450175e-03, -6.497058396043072e-03, 2.918888221381867e-03, -6.469642058030341e-03, -6.142275241561025e-03, 2.958632716471048e-03, -6.955444387930026e-03, -6.142275241561025e-03, 2.958632716471048e-03, -6.955444387930026e-03, -1.174521569252314e+00, 3.846842093990551e-01, -1.012775624606879e+00, -1.122455829815493e+00, 3.991773816910156e-01, -9.450471164804254e-01, -3.544397798981330e-03, 1.903072326573816e-03, -3.143071605471906e-03, -3.048533635403168e+00, 3.288345366970549e-01, -2.893263913819299e+00, -1.025549473304308e+00, 2.650381353117051e-01, -9.219240824336074e+00, -1.025549473304307e+00, 2.650381353117056e-01, -9.219240824336072e+00, -8.185084620117582e+04, 1.505086222075054e-02, -6.742334508117665e+04, -7.139420310564915e+04, 1.770232393143195e-02, -5.737664279942383e+04, -2.652619683725125e+02, 8.990286833726596e-02, -2.227114609693571e+02, -3.986843110572639e+05, 5.347666398583289e-03, -4.177930481253960e+05, -1.173011681861946e+05, 7.845550630782312e-03, -8.434403516507887e+05, -1.173011681861947e+05, 7.845550630675539e-03, -8.434403516507886e+05, -2.278717358918515e-06, 5.510079808169632e-07, -2.281059015760919e-06, -2.277757233311075e-06, 5.543947598844430e-07, -2.280075145811716e-06, -2.278668548858465e-06, 5.511429412171850e-07, -2.281000143659416e-06, -2.277803076462691e-06, 5.541324898466874e-07, -2.280150039233287e-06, -2.278247468232560e-06, 5.527309792048865e-07, -2.280555868588285e-06, -2.278247468232560e-06, 5.527309792048865e-07, -2.280555868588285e-06, -9.299232255591158e-05, 1.351604635865556e-05, -9.301122375291823e-05, -9.060288647031217e-05, 1.343250466888746e-05, -9.069808445190482e-05, -9.450995157189506e-05, 1.296940370544871e-05, -9.418120048987353e-05, -9.240563809587871e-05, 1.290095383512002e-05, -9.204872837745977e-05, -9.059404888622467e-05, 1.374159298626269e-05, -9.153277498095029e-05, -9.059404888622467e-05, 1.374159298626269e-05, -9.153277498095029e-05, -9.445265738039329e-03, 1.056442340776452e-02, -9.608587875795750e-03, -6.431386252787082e-03, 1.202103442648167e-02, -6.443400419504112e-03, -1.422986653694869e-02, 1.387711117217685e-02, -1.164331985287708e-02, -1.170793061150921e-02, 1.862402931735387e-02, -9.076342575200444e-03, -7.623020909488952e-03, 1.043713136704807e-02, -1.043341899598811e-02, -7.623020909488957e-03, 1.043713136704807e-02, -1.043341899598811e-02, -1.025350007223939e+01, 2.058451605791410e-01, -9.975590675853267e+00, -1.052667530460200e+00, 1.583412686309331e-01, -1.033239736910172e+00, -1.452737145547069e+01, 2.108131706563569e-01, -1.218942666548161e+01, -9.987084688503711e-05, 1.042344099373890e-04, -1.001669655226176e-04, -6.672459900642960e+00, 3.708520823685833e-01, -5.749308270136125e+00, -6.672459900642960e+00, 3.708520823685833e-01, -5.749308270136125e+00, -1.056633786847072e+06, 5.214442847510947e-03, -9.077304695563274e+05, -4.687255605908690e+05, 6.574845782717695e-03, -4.395201111528588e+05, -1.696795495124401e+06, 6.549199599877921e-02, -1.449338243257703e+06, -5.242604624396112e+01, 2.137467321882370e-01, -5.102992692341930e+01, -1.366757545434674e+06, 2.506549906072758e-02, -5.021958828624056e+05, -1.366757545434674e+06, 2.506549905100214e-02, -5.021958828624056e+05, -8.908808151719723e-03, 1.937338326279949e-02, -8.657387698052346e-03, -8.961568262864317e-03, 1.728058813051386e-02, -8.721116597615090e-03, -8.879059536886525e-03, 1.795998112604095e-02, -8.637243381448638e-03, -8.851893571677252e-03, 1.856729225069989e-02, -8.602669456679689e-03, -8.859708111265005e-03, 1.825841534964540e-02, -8.614336484601092e-03, -8.859708111265005e-03, 1.825841534964540e-02, -8.614336484601092e-03, -1.026459312541899e-02, 2.262121395235529e-02, -9.990026255801348e-03, -1.942356634904417e-02, 1.532511762143918e-02, -1.902389427843508e-02, -1.585748349014924e-02, 1.671407620150649e-02, -1.550206141540356e-02, -1.285522580779686e-02, 1.855662155309755e-02, -1.257222858699637e-02, -1.431345894066846e-02, 1.760773558544389e-02, -1.400007884601492e-02, -1.431345894066846e-02, 1.760773558544389e-02, -1.400007884601492e-02, -5.412080549826776e-03, 9.625958417760677e-03, -5.387073094527966e-03, -4.401070938680101e-01, 1.088755491456172e-01, -4.305333221580351e-01, -2.213901803334401e-01, 9.064231782570399e-02, -2.130517703309246e-01, -7.265343764167584e-02, 6.704380348046364e-02, -7.055847849899535e-02, -1.255561671843013e-01, 8.187061288451497e-02, -1.260911458029544e-01, -1.255561671843015e-01, 8.187061288451501e-02, -1.260911458029544e-01, -2.668859512154074e-02, 2.196342149185608e-02, -2.583832278252101e-02, -2.771050936374301e+02, 7.400387713122759e-02, -2.711392460241690e+02, -1.060039067245240e+02, 1.122839802818916e-01, -9.567933033237007e+01, -8.282675698994568e-02, 9.997354690526644e-02, -7.602044546246203e-02, -2.590039730031692e+01, 3.610661441070386e-01, -2.238853809475689e+01, -2.590039730031692e+01, 3.610661441070378e-01, -2.238853809475689e+01, -2.513236589685648e+04, 1.875792043909459e-02, -2.254689424309363e+04, -3.750884674924315e+07, 7.131345609531744e-03, -4.226248780089171e+07, -3.675241923722452e+06, 8.924831457670685e-03, -3.072121140788247e+06, -3.041725998179831e+01, 3.344136787836892e-01, -2.873915330450099e+01, -1.892986245275302e+06, 3.199392210283992e-02, -6.659225586287075e+05, -1.892986245275307e+06, 3.199392208053949e-02, -6.659225586287099e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
