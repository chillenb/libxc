
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hapbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.695914281728596e+01, -1.695916219456240e+01, -1.695930746091550e+01, -1.695901795027889e+01, -1.695916123928695e+01, -1.695916123928695e+01, -2.851279057229831e+00, -2.851248717792812e+00, -2.850616577830566e+00, -2.852250191298142e+00, -2.851310485175693e+00, -2.851310485175693e+00, -5.912234355583769e-01, -5.910491305884410e-01, -5.885481576952086e-01, -5.926254569625938e-01, -5.912246212240719e-01, -5.912246212240719e-01, -1.810844113912954e-01, -1.824251426493648e-01, -6.808270288150855e-01, -1.502195952148502e-01, -1.620929234048450e-01, -1.620929234048450e-01, -8.070734774727589e-03, -8.494172517938664e-03, -4.626346400999467e-02, -4.662748335736921e-03, -5.858347872315157e-03, -5.858347872315157e-03, -4.113800556401880e+00, -4.113324484948073e+00, -4.113787193541764e+00, -4.113366766128541e+00, -4.113554336877092e+00, -4.113554336877092e+00, -1.743457044217712e+00, -1.751590120651630e+00, -1.744348943180086e+00, -1.751528776030853e+00, -1.747519939376679e+00, -1.747519939376679e+00, -5.062347359739102e-01, -5.392426312109232e-01, -4.722464032899494e-01, -4.823754614746185e-01, -5.125683687808913e-01, -5.125683687808913e-01, -1.129904819518815e-01, -1.914811148165718e-01, -1.054084923803390e-01, -1.526495611740934e+00, -1.271010036365793e-01, -1.271010036365793e-01, -3.597808262760654e-03, -4.558221411144299e-03, -3.485158404714666e-03, -7.323630593676470e-02, -4.198545784991427e-03, -4.198545784991427e-03, -5.014063045509016e-01, -4.990369139843017e-01, -4.997873188194786e-01, -5.004696606075859e-01, -5.001202023567282e-01, -5.001202023567282e-01, -4.889735114606569e-01, -4.389719488998451e-01, -4.509210526666854e-01, -4.641859755272941e-01, -4.571271040237005e-01, -4.571271040237005e-01, -5.635353523217670e-01, -2.301022740010279e-01, -2.618129553508483e-01, -3.181408590024046e-01, -2.871225685443187e-01, -2.871225685443187e-01, -4.063429321792149e-01, -4.435496773067394e-02, -5.985893437495539e-02, -3.036652942771960e-01, -9.071099330126879e-02, -9.071099330126881e-02, -1.138563737952800e-02, -1.218616922199726e-03, -2.557788054793797e-03, -8.583420093308528e-02, -3.885004477491981e-03, -3.885004477491980e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hapbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.009964321168357e+01, -2.009972554428136e+01, -2.010006605915506e+01, -2.009884165611905e+01, -2.009948683927437e+01, -2.009948683927437e+01, -3.313336898323789e+00, -3.313380932349542e+00, -3.314478685098218e+00, -3.313181093475934e+00, -3.313467073750708e+00, -3.313467073750708e+00, -6.833216521317805e-01, -6.819946625892456e-01, -6.497524496050413e-01, -6.553776441814582e-01, -6.547614003291132e-01, -6.547614003291132e-01, -1.884531159594855e-01, -1.909339421914934e-01, -7.920677188028798e-01, -1.582008000349664e-01, -1.675156544924016e-01, -1.675156544924015e-01, -1.074985066630165e-02, -1.131222895676237e-02, -6.007362554886844e-02, -6.214951002735346e-03, -7.806555839143786e-03, -7.806555839143786e-03, -5.059947871236694e+00, -5.062478568794359e+00, -5.060060045543592e+00, -5.062294183006283e+00, -5.061232651326161e+00, -5.061232651326161e+00, -1.816001425019953e+00, -1.830287181629571e+00, -1.803449174576817e+00, -1.815866256151197e+00, -1.830219343264630e+00, -1.830219343264630e+00, -6.315151018485298e-01, -7.018137454535609e-01, -5.853731996880435e-01, -6.254362505222668e-01, -6.437301683894051e-01, -6.437301683894051e-01, -1.308039980271650e-01, -1.964208877251026e-01, -1.236563118801735e-01, -1.980033911496779e+00, -1.389852543131935e-01, -1.389852543131935e-01, -4.795998256730957e-03, -6.075554127711903e-03, -4.644554879603108e-03, -9.082981927365609e-02, -5.595290303424124e-03, -5.595290303424122e-03, -6.554001767606434e-01, -6.498562142590284e-01, -6.520131192110907e-01, -6.536394953258373e-01, -6.528454084438492e-01, -6.528454084438492e-01, -6.390613731322839e-01, -5.196539808662564e-01, -5.567646652136763e-01, -5.925886419539728e-01, -5.746806515869605e-01, -5.746806515869605e-01, -7.324977138646690e-01, -2.335831453924259e-01, -2.737294380855101e-01, -3.782616810070053e-01, -3.196229168828826e-01, -3.196229168828826e-01, -4.820589175735230e-01, -5.778419293400321e-02, -7.647706541066533e-02, -3.757517444780795e-01, -1.073003415041703e-01, -1.073003415041703e-01, -1.515280895784456e-02, -1.624734727815321e-03, -3.409819128508661e-03, -1.028175748824380e-01, -5.177538840315619e-03, -5.177538840315616e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hapbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hapbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.319133116361164e-09, -6.319088821326036e-09, -6.318829121332609e-09, -6.319489421419319e-09, -6.319152365109777e-09, -6.319152365109777e-09, -7.610461845784184e-06, -7.610555402501846e-06, -7.611978688450680e-06, -7.603897145919977e-06, -7.609864836230927e-06, -7.609864836230927e-06, -3.487548528263571e-03, -3.505152146371926e-03, -3.884410362174072e-03, -3.771107396976442e-03, -3.797012171190111e-03, -3.797012171190111e-03, -3.819763972675308e-01, -3.733204438809254e-01, -1.999451392920195e-03, -5.655133933411665e-01, -5.196105438107024e-01, -5.196105438107025e-01, -1.644435135709714e+00, -1.737094493258749e+00, -9.652890928337009e-01, -1.495310766806488e+00, -1.899225230329073e+00, -1.899225230328077e+00, -1.645038805437860e-06, -1.643641564279486e-06, -1.644971693599103e-06, -1.643738620419147e-06, -1.644335292504938e-06, -1.644335292504938e-06, -5.827885419692443e-05, -5.712218332815135e-05, -5.836843839291612e-05, -5.735663641511085e-05, -5.757749394027075e-05, -5.757749394027075e-05, -4.529193545438958e-03, -1.270682849298103e-03, -6.118824730175164e-03, -2.405896590990262e-03, -4.085259576671862e-03, -4.085259576671862e-03, -6.663001511476239e-01, -2.642087740735590e-01, -7.339630118206700e-01, -5.046595661488224e-05, -7.859132514570906e-01, -7.859132514570906e-01, -1.970485640368544e+00, -1.759825453289961e+00, -1.104860159686494e+01, -1.082337012716330e+00, -5.141860327128659e+00, -5.141860327128834e+00, 2.682205735221250e-04, -1.392215491435115e-03, -8.775208318862531e-04, -3.987499904345422e-04, -6.446695418794756e-04, -6.446695418794756e-04, 1.045948084820943e-03, -1.009577510769911e-02, -7.441897163816074e-03, -4.666483693679264e-03, -6.099054706238786e-03, -6.099054706238786e-03, -1.279350399761104e-03, -1.516317077191362e-01, -9.604928005716641e-02, -3.337521967929520e-02, -6.122898710325091e-02, -6.122898710325088e-02, -1.340553723089062e-02, -8.810574397947308e-01, -8.761776476244741e-01, -3.086036836478669e-02, -1.189174195140801e+00, -1.189174195140802e+00, -1.324575218858847e+00, -8.639376882932948e+00, -4.180473524470742e+00, -1.205190693218593e+00, -6.494671828777865e+00, -6.494671828778490e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
