
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_edf2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.762355336435326e+01, -1.762358400680464e+01, -1.762376467877345e+01, -1.762330786312826e+01, -1.762354090547166e+01, -1.762354090547166e+01, -2.959765890037201e+00, -2.959746357528960e+00, -2.959365966831737e+00, -2.960578833956250e+00, -2.959812478992926e+00, -2.959812478992926e+00, -6.154253633130824e-01, -6.151602446358404e-01, -6.095708944135113e-01, -6.139291938318460e-01, -6.125982023842074e-01, -6.125982023842074e-01, -1.834832020991763e-01, -1.852793735504996e-01, -7.090466333187396e-01, -1.494030107731500e-01, -1.623872155603955e-01, -1.623872155603955e-01, -4.019421441229269e-02, -4.035303290158589e-02, -7.799822715387254e-02, -3.582055860367266e-02, -3.606497494122615e-02, -3.606497494122614e-02, -4.305799570170754e+00, -4.305654430441055e+00, -4.305800201499586e+00, -4.305671970912223e+00, -4.305722035743904e+00, -4.305722035743904e+00, -1.774663410727117e+00, -1.784240153992905e+00, -1.772320847648410e+00, -1.780779915242379e+00, -1.781086191006489e+00, -1.781086191006489e+00, -5.269190727760925e-01, -5.549454631333689e-01, -4.915507946729298e-01, -4.965093357788919e-01, -5.331426857815845e-01, -5.331426857815845e-01, -1.158842243905362e-01, -1.894647552165935e-01, -1.102062749245787e-01, -1.595948984038979e+00, -1.278093433953721e-01, -1.278093433953721e-01, -3.211346812840317e-02, -3.453127491239440e-02, -2.281329662923160e-02, -8.962072122268999e-02, -2.757492788525513e-02, -2.757492788525514e-02, -5.113070513141378e-01, -5.123001573549985e-01, -5.119879100381347e-01, -5.116969328908260e-01, -5.118453415364737e-01, -5.118453415364737e-01, -4.970220257656932e-01, -4.571911082325795e-01, -4.693207307420230e-01, -4.806403110882564e-01, -4.748379317458306e-01, -4.748379317458306e-01, -5.810538349834650e-01, -2.306671011633679e-01, -2.670992914319893e-01, -3.304426956097170e-01, -2.967058058099554e-01, -2.967058058099553e-01, -4.230259518376245e-01, -7.784373311242782e-02, -8.488050943658364e-02, -3.144705964577412e-01, -9.917441764140691e-02, -9.917441764140690e-02, -4.603318008723411e-02, -1.947142318835870e-02, -2.581101037773405e-02, -9.607761296138979e-02, -2.589722303798822e-02, -2.589722303798820e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_edf2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.182884398923476e+01, -2.182891850395571e+01, -2.182924623195301e+01, -2.182813768113784e+01, -2.182871904015518e+01, -2.182871904015518e+01, -3.590865829660817e+00, -3.590890056661095e+00, -3.591536868055897e+00, -3.591081775565569e+00, -3.590979792950180e+00, -3.590979792950180e+00, -7.288328603404504e-01, -7.279538980498916e-01, -7.073382097698557e-01, -7.129260494044806e-01, -7.118101931660011e-01, -7.118101931660011e-01, -2.095777093125950e-01, -2.118558763647344e-01, -8.439332684268362e-01, -1.700367454699867e-01, -1.845226223473314e-01, -1.845226223473314e-01, -1.460165373935218e-02, -1.501802630197090e-02, -5.107525546146520e-02, -1.057147352912193e-02, -1.180820473281947e-02, -1.180820473281950e-02, -5.412715878539481e+00, -5.414470945149106e+00, -5.412796666075464e+00, -5.414346025896796e+00, -5.413605281449321e+00, -5.413605281449321e+00, -2.009626328495339e+00, -2.024637149122726e+00, -1.997328332261385e+00, -2.010536748511206e+00, -2.023935527957913e+00, -2.023935527957913e+00, -6.489754007272900e-01, -7.133259910977578e-01, -6.020054560878831e-01, -6.337121020558075e-01, -6.599601140896479e-01, -6.599601140896479e-01, -1.292574154681954e-01, -2.182202507449617e-01, -1.200716189333210e-01, -2.059166636422765e+00, -1.430101764830261e-01, -1.430101764830261e-01, -8.876351591352605e-03, -1.025997674347657e-02, -7.289497252670395e-03, -8.018945552181171e-02, -8.779421872599044e-03, -8.779421872599070e-03, -6.667231287293683e-01, -6.591437138959063e-01, -6.617028050942677e-01, -6.638982028283367e-01, -6.627899187534334e-01, -6.627899187534334e-01, -6.509224094350115e-01, -5.455591233126376e-01, -5.728420194211660e-01, -6.019609710668598e-01, -5.868703024839584e-01, -5.868703024839584e-01, -7.454214646363837e-01, -2.641683523395752e-01, -3.067526733929647e-01, -3.935922348108625e-01, -3.457404954456130e-01, -3.457404954456129e-01, -5.048116130160200e-01, -4.947166456330910e-02, -6.543326706005312e-02, -3.813923867255353e-01, -1.000631932204864e-01, -1.000631932204864e-01, -1.860128331293828e-02, -4.293009098509491e-03, -6.782962305038022e-03, -9.438030790935908e-02, -8.192505830239389e-03, -8.192505830239349e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_edf2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.160402426379722e-09, -4.160382611728189e-09, -4.160237599553141e-09, -4.160533586709283e-09, -4.160386581856041e-09, -4.160386581856041e-09, -5.392775491513221e-06, -5.393010529980013e-06, -5.397924985936624e-06, -5.385321037827812e-06, -5.392540339600099e-06, -5.392540339600099e-06, -2.969077025454291e-03, -2.968459644915181e-03, -2.928394576776558e-03, -2.853201274513601e-03, -2.882107149897728e-03, -2.882107149897728e-03, -2.339494688159767e-01, -2.336548707967990e-01, -1.706478195714591e-03, -3.267751487800982e-01, -3.027186603631970e-01, -3.027186603631969e-01, -5.752514222431924e+03, -5.044428531931915e+03, -2.796381713987846e+01, -2.714902530573800e+04, -1.504559948913606e+04, -1.504559948913607e+04, -1.243977200785834e-06, -1.244908914232068e-06, -1.244007848137405e-06, -1.244830465367233e-06, -1.244455528918663e-06, -1.244455528918663e-06, -3.969343357531061e-05, -3.891803873426520e-05, -3.972659682767292e-05, -3.903850477486935e-05, -3.924950121753529e-05, -3.924950121753529e-05, -6.144493370185726e-03, -5.715509311405907e-03, -7.998415687139436e-03, -8.789715671642915e-03, -5.946340491149878e-03, -5.946340491149878e-03, -5.257086282594802e-01, -1.387971684467425e-01, -7.246201197714989e-01, -7.494824617236673e-05, -5.387718024670844e-01, -5.387718024670844e-01, -6.192510653718944e+04, -3.033248820944830e+04, -1.099157908143693e+05, -4.546452630738471e+00, -5.189355855243104e+04, -5.189355855243100e+04, -8.560019153381322e-03, -7.975479882813117e-03, -8.149966271823699e-03, -8.316616884702033e-03, -8.230419123750979e-03, -8.230419123750979e-03, -9.884121392030010e-03, -9.856364783491526e-03, -9.535847282418308e-03, -9.395869593707116e-03, -9.459111529051411e-03, -9.459111529051411e-03, -4.694619181737964e-03, -8.467785691784260e-02, -6.040043341573668e-02, -3.513065600825461e-02, -4.727895186164719e-02, -4.727895186164720e-02, -1.339623674496098e-02, -3.150621901598240e+01, -9.805397171084650e+00, -4.626087073687412e-02, -1.993175699652672e+00, -1.993175699652674e+00, -2.016165747230900e+03, -2.130939011944869e+06, -2.043821659549042e+05, -2.494767900891305e+00, -6.927595166096358e+04, -6.927595166096381e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
