
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cap0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.563798236299918e+01, -1.563800438410439e+01, -1.563815331502494e+01, -1.563779170328552e+01, -1.563799355246284e+01, -1.563799355246284e+01, -2.623946489088381e+00, -2.623933482216413e+00, -2.623682611559552e+00, -2.624661763359039e+00, -2.623950776816642e+00, -2.623950776816642e+00, -5.453617409544652e-01, -5.451177995367266e-01, -5.404321627368173e-01, -5.439280840906343e-01, -5.452711057387652e-01, -5.452711057387652e-01, -1.719817437077791e-01, -1.731396671759780e-01, -6.391567649702105e-01, -1.468109821491693e-01, -1.723097221726394e-01, -1.723097221726394e-01, -1.168847398329543e-01, -1.158110605575614e-01, -1.198681423231648e-01, -1.475982264386651e-01, -1.147330772370406e-01, -1.147330772370406e-01, -3.818627224889924e+00, -3.818574346191586e+00, -3.818625582485184e+00, -3.818584393144727e+00, -3.818594506199838e+00, -3.818594506199838e+00, -1.578078850765263e+00, -1.585830769258336e+00, -1.578181764062676e+00, -1.584187869506303e+00, -1.583306394636617e+00, -1.583306394636617e+00, -4.696147766249748e-01, -5.041004463169330e-01, -4.477179084379450e-01, -4.629638790348735e-01, -4.855837872211952e-01, -4.855837872211952e-01, -1.368871405383167e-01, -1.870922112741543e-01, -1.325456902732821e-01, -1.431898155558010e+00, -1.367717187790292e-01, -1.367717187790292e-01, -1.459668768718281e-01, -1.425349670039294e-01, -1.100723735047869e-01, -1.178852066956349e-01, -1.291911260794822e-01, -1.291911260794822e-01, -4.809895565998211e-01, -4.785245626958428e-01, -4.793841687061666e-01, -4.800667292319141e-01, -4.797230970816248e-01, -4.797230970816248e-01, -4.668754953887932e-01, -4.152180931113769e-01, -4.288555414439847e-01, -4.424917132170122e-01, -4.353906429666433e-01, -4.353906429666433e-01, -5.265726853672082e-01, -2.195813619062973e-01, -2.473974626742952e-01, -2.988772754973337e-01, -2.707319850258884e-01, -2.707319850258883e-01, -3.779401758614409e-01, -1.265931631970149e-01, -1.231957187158012e-01, -2.820031976616921e-01, -1.193120961113623e-01, -1.193120961113623e-01, -1.235733130941350e-01, -1.500088397795863e-01, -1.419039901674741e-01, -1.134011132009750e-01, -1.189228766252171e-01, -1.189228766252172e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cap0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.920083160687371e+01, -1.920089455823445e+01, -1.920118537722437e+01, -1.920015432663619e+01, -1.920086472186862e+01, -1.920086472186862e+01, -3.184198866881336e+00, -3.184230096699735e+00, -3.185214887241791e+00, -3.184169965007377e+00, -3.184228037376528e+00, -3.184228037376528e+00, -6.524119210667195e-01, -6.511907144354893e-01, -6.171091955240964e-01, -6.225612775196251e-01, -6.519698298797302e-01, -6.519698298797302e-01, -1.842404887152239e-01, -1.889913927657527e-01, -7.867904252389347e-01, -1.029633625939825e-01, -1.857081708945291e-01, -1.857081708945291e-01, 2.732633464822414e-02, 2.692450466313635e-02, 4.430361290142302e-03, 3.373161500895740e-02, 2.667720011336076e-02, 2.667720011336076e-02, -4.822706040409762e+00, -4.824600201525695e+00, -4.822899999088301e+00, -4.824372816918181e+00, -4.823677044276293e+00, -4.823677044276293e+00, -1.720435907754891e+00, -1.735805571787297e+00, -1.710379480310743e+00, -1.722405242603190e+00, -1.743820813462118e+00, -1.743820813462118e+00, -5.998303599675947e-01, -6.581256075481937e-01, -5.708719292988833e-01, -6.030094833372132e-01, -6.230960209140048e-01, -6.230960209140048e-01, -5.164382681847675e-02, -1.571181328781382e-01, -5.292797683718262e-02, -1.871713566915080e+00, -7.620508766678262e-02, -7.620508766678262e-02, 3.327732694939475e-02, 3.296755386756872e-02, 2.539443244682217e-02, -1.462494533983715e-02, 2.989424721975836e-02, 2.989424721975840e-02, -6.281052417700455e-01, -6.247565292197242e-01, -6.260620170358164e-01, -6.269899562119976e-01, -6.265344820820899e-01, -6.265344820820899e-01, -6.094106626766731e-01, -5.148343875604789e-01, -5.459648408954667e-01, -5.728033948355791e-01, -5.595158303569353e-01, -5.595158303569353e-01, -6.873611832710224e-01, -2.145750572976807e-01, -2.723937728536570e-01, -3.703768236810175e-01, -3.206093749374794e-01, -3.206093749374794e-01, -4.676842508903163e-01, 9.993978777465650e-03, -5.432233130274558e-03, -3.591237834050658e-01, -3.727237544144417e-02, -3.727237544144425e-02, 2.856543399448050e-02, 2.913174987201773e-02, 3.052078978679837e-02, -3.601659019298649e-02, 2.732714227236581e-02, 2.732714227236582e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cap0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.127673414627343e-09, -4.127644300472377e-09, -4.127470057276583e-09, -4.127947705177749e-09, -4.127658431615471e-09, -4.127658431615471e-09, -4.781316803510556e-06, -4.781255765119027e-06, -4.778820842369491e-06, -4.779151699351371e-06, -4.781207961316327e-06, -4.781207961316327e-06, -2.224216558419951e-03, -2.241908378741463e-03, -2.719793492021015e-03, -2.632968434891195e-03, -2.230621328049590e-03, -2.230621328049590e-03, -3.245213446612101e-01, -2.979641832570927e-01, -1.046233963878294e-03, -1.378279964929576e+00, -3.162397090404852e-01, -3.162397090404852e-01, -8.178246653886679e+03, -7.058555687335423e+03, -6.544464826894445e+01, -7.809915481344624e+04, -7.354934615682999e+03, -7.354934615682999e+03, -1.003900109069795e-06, -1.002607524045167e-06, -1.003767770222214e-06, -1.002762844278942e-06, -1.003239927785730e-06, -1.003239927785730e-06, -4.329561675616939e-05, -4.216995779666884e-05, -4.372450096043086e-05, -4.283443539308782e-05, -4.198335835108107e-05, -4.198335835108107e-05, -2.160673340640702e-03, -1.541106920078909e-04, -2.650739694247855e-03, -5.805608760480960e-04, -1.716617837746934e-03, -1.716617837746934e-03, -4.174696112067216e+00, -3.817294626237618e-01, -4.448481623826682e+00, -2.398016063181748e-05, -2.549052950945729e+00, -2.549052950945729e+00, -8.857518735446908e+04, -5.814814621634664e+04, -1.803541619432060e+05, -2.211135408592040e+01, -8.468398206013214e+04, -8.468398206013211e+04, 4.549931759584933e-04, 6.557766613733348e-06, 1.900440796254975e-04, 3.215097808135902e-04, 2.575877767014411e-04, 2.575877767014411e-04, 5.647595618461908e-04, -5.057648432614423e-03, -3.185189573906975e-03, -1.563794895128033e-03, -2.363483727685602e-03, -2.363483727685601e-03, -2.395271402576621e-04, -1.494905575331219e-01, -6.834869092389485e-02, -1.748453357582157e-02, -3.568424752337436e-02, -3.568424752337439e-02, -7.331554147161771e-03, -8.128591603397530e+01, -3.040243283203067e+01, -1.368548725932785e-02, -9.134629992225065e+00, -9.134629992225062e+00, -4.652607364325708e+03, -3.813484145574969e+06, -4.951437921032681e+05, -1.104381649959138e+01, -1.532837379497238e+05, -1.532837379497244e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
