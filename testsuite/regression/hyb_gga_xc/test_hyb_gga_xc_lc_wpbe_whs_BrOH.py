
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.077093000154517e+01, -2.077095459444906e+01, -2.077113971033182e+01, -2.077073549310406e+01, -2.077094234072256e+01, -2.077094234072256e+01, -3.290163922897568e+00, -3.290138892387861e+00, -3.289594616023304e+00, -3.291269379984676e+00, -3.290165841159783e+00, -3.290165841159783e+00, -5.109875573492453e-01, -5.107622248717050e-01, -5.071478695728351e-01, -5.116398772624675e-01, -5.109027423516548e-01, -5.109027423516548e-01, -6.329492323221760e-02, -6.474886083708117e-02, -6.312702792840211e-01, -3.367978832093784e-02, -6.372218261901408e-02, -6.372218261901408e-02, -1.044293372015334e-05, -1.201826979174149e-05, -1.074237465064210e-03, -1.139205023871338e-06, -1.164834442573910e-05, -1.164834442573910e-05, -4.866718272589171e+00, -4.866329060342864e+00, -4.866684240709905e+00, -4.866381493246196e+00, -4.866510090509152e+00, -4.866510090509152e+00, -1.910343549165454e+00, -1.920275425715426e+00, -1.911308312429038e+00, -1.919026836695021e+00, -1.915871718784503e+00, -1.915871718784503e+00, -4.099613699305542e-01, -4.537586353626127e-01, -3.824565916165192e-01, -4.019168552069788e-01, -4.299879025030459e-01, -4.299879025030459e-01, -1.592697048764614e-02, -7.047622212120479e-02, -1.514640262191124e-02, -1.664799967270738e+00, -2.281405576503074e-02, -2.281405576503074e-02, -1.022702749979229e-06, -1.527709634425462e-06, -6.447823613260816e-07, -3.473960979633936e-03, -1.156565013895087e-06, -1.156565013895089e-06, -4.260952850048531e-01, -4.219589386473981e-01, -4.233461194104685e-01, -4.244873219950719e-01, -4.239082628468549e-01, -4.239082628468549e-01, -4.088435850083971e-01, -3.422819962241157e-01, -3.588769084028624e-01, -3.759699475728586e-01, -3.669902409147888e-01, -3.669902409147888e-01, -4.819255032555352e-01, -1.068743447399099e-01, -1.394396820434614e-01, -2.005800719969930e-01, -1.670027296087270e-01, -1.670027296087269e-01, -2.958627507941721e-01, -8.179589492239161e-04, -2.407303465396352e-03, -1.825487746447489e-01, -8.292894274180731e-03, -8.292894274180791e-03, -1.683890195265054e-05, -3.125523707847013e-08, -2.144900867705611e-07, -7.077321275551459e-03, -7.102262589276542e-07, -7.102262589185079e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504358854828567e+01, -2.504367619787917e+01, -2.504407367998528e+01, -2.504263827003556e+01, -2.504363471771059e+01, -2.504363471771059e+01, -3.923372665683988e+00, -3.923416603344454e+00, -3.924791079360100e+00, -3.923279543847786e+00, -3.923412468826139e+00, -3.923412468826139e+00, -6.297512996469248e-01, -6.281842494010668e-01, -5.871763267082317e-01, -5.937660273798215e-01, -6.291835289010657e-01, -6.291835289010657e-01, -9.333923856439894e-02, -9.717911797062903e-02, -8.007895854153800e-01, -4.611127391835880e-02, -9.449363330632637e-02, -9.449363330632637e-02, -2.147756667879085e-05, -2.477132638180076e-05, -2.361128622869637e-03, -2.292601429999994e-06, -2.402226151480943e-05, -2.402226151480943e-05, -6.103023285387403e+00, -6.105892282016621e+00, -6.103316078418396e+00, -6.105546884690997e+00, -6.104495073207903e+00, -6.104495073207903e+00, -2.033116339991252e+00, -2.050809103960898e+00, -2.023835948674378e+00, -2.037500059964629e+00, -2.057647579061241e+00, -2.057647579061241e+00, -5.712029948682321e-01, -6.496167736555067e-01, -5.348603536146244e-01, -5.791017324647408e-01, -6.011937046566309e-01, -6.011937046566309e-01, -2.526911660450346e-02, -8.432464169504000e-02, -2.423160368304479e-02, -2.234143259020395e+00, -3.349445584434754e-02, -3.349445584434754e-02, -2.058127636226768e-06, -3.079117543969299e-06, -1.307131052216863e-06, -7.096668110498602e-03, -2.335701858599079e-06, -2.335701858596021e-06, -6.107327959857265e-01, -6.070726344846714e-01, -6.086679267266143e-01, -6.096959378811077e-01, -6.092054195597608e-01, -6.092054195597608e-01, -5.865539274805419e-01, -4.626055551418671e-01, -5.037936934369631e-01, -5.398659457248128e-01, -5.220057395935164e-01, -5.220057395935164e-01, -6.869245717304122e-01, -1.267967328155256e-01, -1.780673106919040e-01, -2.910095651612403e-01, -2.320090065467174e-01, -2.320090065467173e-01, -4.054285841600428e-01, -1.796575847758830e-03, -5.081743678594311e-03, -2.798246664401160e-01, -1.495381321641846e-02, -1.495381321641861e-02, -3.462794879731225e-05, -6.260284956449169e-08, -4.306353456708522e-07, -1.318779779778661e-02, -1.435886684960877e-06, -1.435886684747453e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.859833908587682e-09, -6.859788374323566e-09, -6.859506724168595e-09, -6.860253917454953e-09, -6.859810551687147e-09, -6.859810551687147e-09, -8.391019134694468e-06, -8.391050744653162e-06, -8.390562620604589e-06, -8.384498460040648e-06, -8.390897053849421e-06, -8.390897053849421e-06, -3.654337460405038e-03, -3.677000170550987e-03, -4.201533978388364e-03, -4.087448257294859e-03, -3.662571298500037e-03, -3.662571298500037e-03, -1.191845736205907e-01, -1.036828760875617e-01, -1.856133946352456e-03, -2.647762080734711e-01, -1.144486962520653e-01, -1.144486962520653e-01, 2.940855189775364e-02, 3.167155580339712e-02, 8.089201097461300e-03, 5.519964602729076e-03, 3.301713743958736e-02, 3.301713743958736e-02, -1.788507817244689e-06, -1.786803882043687e-06, -1.788331802281781e-06, -1.787007160918711e-06, -1.787641049905074e-06, -1.787641049905074e-06, -6.710078055521530e-05, -6.574882427229993e-05, -6.715958429084199e-05, -6.611478621703983e-05, -6.606117603111777e-05, -6.606117603111777e-05, -3.191343203854850e-03, 8.564952530776774e-04, -3.723594915146330e-03, 4.981583717190794e-04, -2.547794418966429e-03, -2.547794418966429e-03, -2.379955111502390e-01, -1.688699201654708e-01, -2.470557281854264e-01, -5.049959067363661e-05, -2.772593047065608e-01, -2.772593047065608e-01, 5.688874819015531e-03, 7.085376448338162e-03, 2.145239350612133e-02, -7.847780322206248e-02, 1.094604405586554e-02, 1.094604405614462e-02, 3.693928049756998e-03, 1.811315759717590e-03, 2.424119115643334e-03, 2.942275298999184e-03, 2.677995179688619e-03, 2.677995179688619e-03, 4.852579111904717e-03, -7.205337768951759e-03, -4.252516860226076e-03, -1.300967617959147e-03, -2.812950178493544e-03, -2.812950178493543e-03, 3.246223844142271e-04, -1.045563592187774e-01, -6.123779034939940e-02, -1.391843868811616e-02, -3.181426997057080e-02, -3.181426997057095e-02, -9.454904869588046e-03, 9.519182207835049e-03, -4.436779120488941e-02, 2.260275702627948e-03, -1.938948984613626e-01, -1.938948984613618e-01, 2.423896376246115e-02, 1.779829370212300e-03, 4.326469776607579e-03, -1.704035313808193e-01, 1.480801185614562e-02, 1.480801185532398e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
