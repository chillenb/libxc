
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1pw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.587139263676693e+01, -1.587141070021408e+01, -1.587154891863607e+01, -1.587125197383538e+01, -1.587140168105814e+01, -1.587140168105814e+01, -2.671087844379321e+00, -2.671069227423366e+00, -2.670666121006069e+00, -2.671918100916781e+00, -2.671089460729271e+00, -2.671089460729271e+00, -5.556557524674787e-01, -5.554823990841153e-01, -5.524598199547658e-01, -5.559834404207465e-01, -5.555905398910090e-01, -5.555905398910090e-01, -1.737294604302300e-01, -1.749936697360759e-01, -6.492283858391109e-01, -1.427047023381153e-01, -1.740929194214125e-01, -1.740929194214125e-01, -3.698571754746090e-03, -4.186470635599433e-03, -5.977734198346173e-02, -4.272646416505889e-04, -4.136388831782059e-03, -4.136388831782059e-03, -3.861554324351443e+00, -3.861212037579024e+00, -3.861523822649240e+00, -3.861257594253367e+00, -3.861372235416811e+00, -3.861372235416811e+00, -1.620984018403176e+00, -1.628699969682582e+00, -1.621431394719299e+00, -1.627427063179024e+00, -1.625675896964501e+00, -1.625675896964501e+00, -4.736612525699183e-01, -5.047151308274060e-01, -4.517335732141910e-01, -4.640502552581119e-01, -4.892249235313904e-01, -4.892249235313904e-01, -1.199076448647786e-01, -1.864997667244790e-01, -1.172947696981514e-01, -1.436378440187011e+00, -1.284168621369457e-01, -1.284168621369457e-01, -3.970514863249887e-04, -5.748032269539548e-04, -4.119159937689612e-04, -8.317854432668781e-02, -5.278782096432190e-04, -5.278782096432191e-04, -4.808348256402512e-01, -4.789512091280776e-01, -4.796161910083200e-01, -4.801487905277386e-01, -4.798813718460692e-01, -4.798813718460692e-01, -4.666104588492085e-01, -4.209632808058516e-01, -4.328306617034482e-01, -4.446190872832890e-01, -4.384404982825161e-01, -4.384404982825161e-01, -5.273655042239256e-01, -2.219856641355477e-01, -2.514220364099837e-01, -3.026770130689284e-01, -2.749779939791122e-01, -2.749779939791122e-01, -3.831644098179539e-01, -5.340069617410286e-02, -7.610403681980649e-02, -2.843978296085297e-01, -1.004429553595648e-01, -1.004429553595648e-01, -5.001365466743532e-03, -2.046660073243270e-05, -1.122125266672681e-04, -9.568494473207891e-02, -3.979295419608373e-04, -3.979295419608348e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1pw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.904484407286105e+01, -1.904490623196449e+01, -1.904519387593614e+01, -1.904417580256350e+01, -1.904487676703151e+01, -1.904487676703151e+01, -3.155370660587541e+00, -3.155398395405209e+00, -3.156286904149622e+00, -3.155404221446247e+00, -3.155397944255178e+00, -3.155397944255178e+00, -6.478533075435613e-01, -6.467938935372554e-01, -6.186821292349137e-01, -6.237779966085685e-01, -6.474690477829408e-01, -6.474690477829408e-01, -1.900236546036428e-01, -1.937776152854995e-01, -7.781908291032863e-01, -1.303278466151677e-01, -1.911684343199770e-01, -1.911684343199770e-01, -1.306054267406302e-02, -1.467575541326500e-02, -9.562371306024821e-02, -1.573934771717151e-03, -1.450247546933790e-02, -1.450247546933790e-02, -4.778962665087830e+00, -4.780924243377360e+00, -4.779163217592177e+00, -4.780688437996903e+00, -4.779968211696116e+00, -4.779968211696116e+00, -1.737607275488009e+00, -1.751300419996294e+00, -1.730152958423942e+00, -1.740814087562642e+00, -1.756654008589475e+00, -1.756654008589475e+00, -5.933701876638156e-01, -6.561752273057807e-01, -5.646606962102158e-01, -6.001170317838993e-01, -6.167569965255014e-01, -6.167569965255014e-01, -1.063872904074049e-01, -1.790772024072358e-01, -1.036288094370929e-01, -1.861483695228687e+00, -1.131630035491608e-01, -1.131630035491608e-01, -1.462749736383730e-03, -2.115753766847347e-03, -1.516559945680867e-03, -9.191632194646802e-02, -1.942940746269106e-03, -1.942940746269099e-03, -6.269544426776212e-01, -6.232519123647683e-01, -6.248809778518353e-01, -6.258746753597368e-01, -6.254100430340424e-01, -6.254100430340424e-01, -6.085418248703719e-01, -5.094447598568742e-01, -5.399930438597068e-01, -5.682701782292604e-01, -5.540331029865719e-01, -5.540331029865719e-01, -6.849909760838446e-01, -2.280715898692909e-01, -2.775094145270470e-01, -3.671276701200835e-01, -3.203790570178278e-01, -3.203790570178278e-01, -4.630480614616603e-01, -9.812398717556875e-02, -9.800872491981409e-02, -3.556543078665394e-01, -9.187947965544399e-02, -9.187947965544389e-02, -1.740967374524359e-02, -7.497395293659240e-05, -4.129048984567018e-04, -8.745489881876596e-02, -1.465489536283076e-03, -1.465489536283066e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1pw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.308108424390341e-09, -5.308084215974690e-09, -5.307899586542882e-09, -5.308297541514005e-09, -5.308096298262937e-09, -5.308096298262937e-09, -6.265200017754542e-06, -6.265305389552724e-06, -6.267197475068968e-06, -6.258800802343127e-06, -6.265151096265791e-06, -6.265151096265791e-06, -2.888146822571265e-03, -2.899266012705459e-03, -3.165389026727064e-03, -3.079370102743020e-03, -2.892206223676138e-03, -2.892206223676138e-03, -3.035648401204979e-01, -2.859958511252877e-01, -1.495705381235302e-03, -8.899742984069650e-01, -2.981929762737964e-01, -2.981929762737964e-01, 3.629475884327441e+02, 3.539732731174572e+02, 6.347053060038391e+00, 3.402214476207581e+02, 3.679344606549869e+02, 3.679344606549869e+02, -1.417682900972209e-06, -1.417423477575983e-06, -1.417652131041481e-06, -1.417450601190114e-06, -1.417558161766952e-06, -1.417558161766952e-06, -4.801633407946893e-05, -4.701942636981120e-05, -4.811777706788635e-05, -4.733771266474788e-05, -4.720457672297068e-05, -4.720457672297068e-05, -4.015842815689829e-03, -1.283116787345062e-03, -4.854500680017576e-03, -2.394100987774400e-03, -3.382352775166033e-03, -3.382352775166033e-03, -1.704191862235247e+00, -2.880181302102244e-01, -1.893611139175987e+00, -4.845500321843916e-05, -1.392548505780937e+00, -1.392548505780937e+00, 3.627535934022795e+02, 3.518261015479730e+02, 1.013394874692037e+03, -2.940772507224076e+00, 5.190834328015967e+02, 5.190834328015959e+02, -1.185206461205469e-03, -1.272370899522752e-03, -1.002891080858876e-03, -9.476941159507115e-04, -9.486463119271708e-04, -9.486463119271673e-04, -1.007257406793895e-03, -7.489772178740365e-03, -5.755487543757003e-03, -3.947243438241250e-03, -4.894801998936660e-03, -4.894801998936653e-03, -1.246742667927361e-03, -1.305289004499578e-01, -6.988598931573459e-02, -2.543169529176855e-02, -4.287225098059054e-02, -4.287225098059055e-02, -1.072001336888725e-02, 1.224349573666298e+01, -6.593712341760780e-01, -2.559186252532600e-02, -3.148851783372302e+00, -3.148851783372306e+00, 2.584944261978021e+02, 7.935924346910253e+02, 5.933092505840552e+02, -3.841998528976883e+00, 7.709228610425747e+02, 7.709228610425689e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
