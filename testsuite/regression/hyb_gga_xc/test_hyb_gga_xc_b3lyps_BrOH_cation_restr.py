
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyps_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.782812734960866e+01, -1.782815392281956e+01, -1.782832410843558e+01, -1.782792767850165e+01, -1.782812799845620e+01, -1.782812799845620e+01, -3.006603138069341e+00, -3.006577186047326e+00, -3.006049405479120e+00, -3.007526336482712e+00, -3.006643019844236e+00, -3.006643019844236e+00, -6.316926271998189e-01, -6.315051399740395e-01, -6.279644863539744e-01, -6.323342442870495e-01, -6.309046455564816e-01, -6.309046455564816e-01, -1.919884084273334e-01, -1.937368099327776e-01, -7.264743052153591e-01, -1.576203463894177e-01, -1.707066799247556e-01, -1.707066799247556e-01, -4.996019703965451e-02, -5.009305093535302e-02, -9.069208691189277e-02, -4.493683048871468e-02, -4.506933464778075e-02, -4.506933464778072e-02, -4.348734058172013e+00, -4.348363464347766e+00, -4.348725435600953e+00, -4.348398156324533e+00, -4.348541626905992e+00, -4.348541626905992e+00, -1.825356321949223e+00, -1.834517407896897e+00, -1.824489867354321e+00, -1.832580525308507e+00, -1.830834893474699e+00, -1.830834893474699e+00, -5.380935431348725e-01, -5.631273175519514e-01, -5.026624307174763e-01, -5.047224128263754e-01, -5.439959577565832e-01, -5.439959577565832e-01, -1.239139139250731e-01, -1.988281168234886e-01, -1.183929374904211e-01, -1.609337824434024e+00, -1.357521780866149e-01, -1.357521780866149e-01, -4.038350913064802e-02, -4.331636324200244e-02, -2.860086496130426e-02, -9.947606208442314e-02, -3.454298127208348e-02, -3.454298127208350e-02, -5.182281404753251e-01, -5.201014982814991e-01, -5.194882758596755e-01, -5.189414128917518e-01, -5.192185532694747e-01, -5.192185532694747e-01, -5.035973984446482e-01, -4.697306858687041e-01, -4.803466847771710e-01, -4.899802409377339e-01, -4.850357280179244e-01, -4.850357280179244e-01, -5.895734425431272e-01, -2.411540123967242e-01, -2.780150490005603e-01, -3.405125433248344e-01, -3.073307574240612e-01, -3.073307574240611e-01, -4.348943675807483e-01, -9.089827024970049e-02, -9.638806555018518e-02, -3.232102073045516e-01, -1.077388271621244e-01, -1.077388271621244e-01, -5.681816743891570e-02, -2.462789430706018e-02, -3.252312314241797e-02, -1.048995826427962e-01, -3.245850277478785e-02, -3.245850277478782e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyps_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.168452566348749e+01, -2.168460342433899e+01, -2.168493958743379e+01, -2.168378286632016e+01, -2.168439031736796e+01, -2.168439031736796e+01, -3.566391925241595e+00, -3.566420450638384e+00, -3.567165932091068e+00, -3.566533157045180e+00, -3.566510246933560e+00, -3.566510246933560e+00, -7.295772842375629e-01, -7.286812584463969e-01, -7.078239883201125e-01, -7.133550219634062e-01, -7.122621429572344e-01, -7.122621429572344e-01, -2.147477412566660e-01, -2.168198659415740e-01, -8.437386866446541e-01, -1.772520451365566e-01, -1.906601354872172e-01, -1.906601354872172e-01, -1.705973069746907e-02, -1.749257942801771e-02, -5.397301340029290e-02, -1.268243666712641e-02, -1.400100864991523e-02, -1.400100864991526e-02, -5.390696052789226e+00, -5.392645993447393e+00, -5.390784834461084e+00, -5.392506237297928e+00, -5.391684707279314e+00, -5.391684707279314e+00, -1.989481351248369e+00, -2.004505899642631e+00, -1.976819915443221e+00, -1.990024859212781e+00, -2.003991349866267e+00, -2.003991349866267e+00, -6.519424990242420e-01, -7.186772895059582e-01, -6.049638429080498e-01, -6.386659019422936e-01, -6.631239575379427e-01, -6.631239575379427e-01, -1.375170542097858e-01, -2.263195345272486e-01, -1.277451631679495e-01, -2.061855249722137e+00, -1.500743593319058e-01, -1.500743593319058e-01, -1.074392326433778e-02, -1.230849094479466e-02, -8.751694116023737e-03, -8.463705522678801e-02, -1.050219866684044e-02, -1.050219866684047e-02, -6.731024559573777e-01, -6.645918433388645e-01, -6.674529934861383e-01, -6.699179840675961e-01, -6.686725281703307e-01, -6.686725281703307e-01, -6.575929085453066e-01, -5.480947396682677e-01, -5.758235081182409e-01, -6.059281768887224e-01, -5.902749202834213e-01, -5.902749202834213e-01, -7.505946276968388e-01, -2.710603757837812e-01, -3.118989039719577e-01, -3.969871009063024e-01, -3.496686812249640e-01, -3.496686812249640e-01, -5.076280524335871e-01, -5.240316861694588e-02, -6.903612537706424e-02, -3.849387395629133e-01, -1.054802501265854e-01, -1.054802501265854e-01, -2.137466945168300e-02, -5.336096703656849e-03, -8.280957463532803e-03, -9.950987935996029e-02, -9.819767785686427e-03, -9.819767785686386e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyps_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.214058874266490e-09, -5.214033675209977e-09, -5.213850904374920e-09, -5.214227288442585e-09, -5.214040120579040e-09, -5.214040120579040e-09, -6.753073883789720e-06, -6.753365050752026e-06, -6.759446331703672e-06, -6.743792209262579e-06, -6.752775975998187e-06, -6.752775975998187e-06, -3.679015732001444e-03, -3.678126802790239e-03, -3.624702268092344e-03, -3.532256562136329e-03, -3.568011858849430e-03, -3.568011858849430e-03, -2.742506668698186e-01, -2.749518989128032e-01, -2.119133699341574e-03, -3.570971117121439e-01, -3.448576089925063e-01, -3.448576089925062e-01, -7.297679817819733e+03, -6.399439196725414e+03, -3.492243211460877e+01, -3.444000469682885e+04, -1.908649471447184e+04, -1.908649471447185e+04, -1.556606756395702e-06, -1.557748378266979e-06, -1.556644109538183e-06, -1.557652059160539e-06, -1.557192954959958e-06, -1.557192954959958e-06, -4.970421771964149e-05, -4.873314269689456e-05, -4.974884937872102e-05, -4.888717749255822e-05, -4.914664445284704e-05, -4.914664445284704e-05, -7.604303064193713e-03, -7.079346412352591e-03, -9.887197273001995e-03, -1.087439493881204e-02, -7.360947908822068e-03, -7.360947908822068e-03, -4.940691488311700e-01, -1.548632508383963e-01, -7.071860803090140e-01, -9.346621788029168e-05, -5.731448026683642e-01, -5.731448026683642e-01, -7.855464207704159e+04, -3.847843591107436e+04, -1.394358324480566e+05, -5.300019906758153e+00, -6.583056984534817e+04, -6.583056984534813e+04, -1.059180185875422e-02, -9.870296210158662e-03, -1.008581933615283e-02, -1.029153636391696e-02, -1.018514661091321e-02, -1.018514661091321e-02, -1.222569005551601e-02, -1.215256671167483e-02, -1.177768436758409e-02, -1.161749653616862e-02, -1.169011133321274e-02, -1.169011133321274e-02, -5.817673764725374e-03, -9.872249658521376e-02, -7.231164497977786e-02, -4.299643298555089e-02, -5.738821217905840e-02, -5.738821217905844e-02, -1.649090256985677e-02, -3.943989093923455e+01, -1.186426531346186e+01, -5.669905932587326e-02, -2.222228924570592e+00, -2.222228924570593e+00, -2.557805625311820e+03, -2.703132932221740e+06, -2.592659876736484e+05, -2.816897007727858e+00, -8.788122841339887e+04, -8.788122841339916e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
