
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3pw91_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683587831620632e+01, -1.683590264389626e+01, -1.683606118296586e+01, -1.683569819698231e+01, -1.683588122921637e+01, -1.683588122921637e+01, -2.834720324856625e+00, -2.834696919133218e+00, -2.834224194982754e+00, -2.835574895541102e+00, -2.834759362054627e+00, -2.834759362054627e+00, -5.920419444453915e-01, -5.918083746153089e-01, -5.875008497207066e-01, -5.916080506068957e-01, -5.902883510772730e-01, -5.902883510772730e-01, -1.833355877493638e-01, -1.845508111395899e-01, -6.812836440920341e-01, -1.575126654061175e-01, -1.662022248357688e-01, -1.662022248357688e-01, -4.790564506205554e-02, -4.795160178716289e-02, -8.733955168604213e-02, -4.362670041503444e-02, -4.348739492681291e-02, -4.348739492681289e-02, -4.106798854760218e+00, -4.106512618324540e+00, -4.106793326226509e+00, -4.106540516354198e+00, -4.106649502063481e+00, -4.106649502063481e+00, -1.715570202349301e+00, -1.724193508517531e+00, -1.714882208340577e+00, -1.722481001717981e+00, -1.720685333507824e+00, -1.720685333507824e+00, -5.089273245522816e-01, -5.408459994451829e-01, -4.749510052672399e-01, -4.841817754590274e-01, -5.152466641038669e-01, -5.152466641038669e-01, -1.333976557806786e-01, -1.962251670628448e-01, -1.274954937790495e-01, -1.529606282521700e+00, -1.386096566478122e-01, -1.386096566478122e-01, -3.932847229193094e-02, -4.203065945303628e-02, -2.757355869803968e-02, -1.028854053891228e-01, -3.334222325749307e-02, -3.334222325749308e-02, -5.020209975728062e-01, -5.004885057018790e-01, -5.009865965920448e-01, -5.014299300897590e-01, -5.012038689091541e-01, -5.012038689091541e-01, -4.892356326248554e-01, -4.412623524621871e-01, -4.536328661373122e-01, -4.666182882979042e-01, -4.597945248328493e-01, -4.597945248328493e-01, -5.653018776992310e-01, -2.320282252563667e-01, -2.629355070771411e-01, -3.207427471416922e-01, -2.889840163229809e-01, -2.889840163229808e-01, -4.087742205008619e-01, -8.725764906330380e-02, -9.773733455250849e-02, -3.063256454925150e-01, -1.116121866517125e-01, -1.116121866517125e-01, -5.410755642989435e-02, -2.421330890190343e-02, -3.173297895198262e-02, -1.086422154676404e-01, -3.133315428667197e-02, -3.133315428667194e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3pw91_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.040882751383839e+01, -2.040890229799796e+01, -2.040922298352351e+01, -2.040811059646604e+01, -2.040869513624844e+01, -2.040869513624844e+01, -3.378423380662645e+00, -3.378456169410605e+00, -3.379295118044218e+00, -3.378460222852967e+00, -3.378541779681004e+00, -3.378541779681004e+00, -6.962582967802216e-01, -6.951073764395359e-01, -6.667373419549706e-01, -6.723540805963546e-01, -6.716067620655011e-01, -6.716067620655011e-01, -1.853865000179478e-01, -1.894089354197159e-01, -8.062497977364977e-01, -1.337523464562385e-01, -1.533971178796111e-01, -1.533971178796111e-01, -1.445059834731970e-02, -1.477430213517072e-02, -4.501512115091314e-02, -1.100989946314329e-02, -1.198608577355319e-02, -1.198608577355322e-02, -5.111521400038645e+00, -5.113553023847691e+00, -5.111613060231283e+00, -5.113406581599590e+00, -5.112551903066812e+00, -5.112551903066812e+00, -1.865355910198583e+00, -1.880464897661003e+00, -1.851139337184724e+00, -1.864444323311335e+00, -1.880648299156481e+00, -1.880648299156481e+00, -6.342009601908140e-01, -7.008960814238150e-01, -5.883764742575576e-01, -6.246181194516791e-01, -6.457617376620145e-01, -6.457617376620145e-01, -9.368526211864965e-02, -1.761867696600825e-01, -8.747933405625269e-02, -1.981626328121269e+00, -1.086256191912083e-01, -1.086256191912083e-01, -9.393380636951458e-03, -1.066675464730208e-02, -7.436207340746108e-03, -6.297203248254687e-02, -8.967626748376128e-03, -8.967626748376159e-03, -6.545903225798776e-01, -6.489105755924881e-01, -6.510661446469024e-01, -6.527282425100038e-01, -6.519126100505309e-01, -6.519126100505309e-01, -6.385590124731992e-01, -5.270620197188395e-01, -5.599381884995708e-01, -5.927527319159029e-01, -5.761445144065714e-01, -5.761445144065714e-01, -7.316567336555204e-01, -2.261598347024896e-01, -2.786142954832956e-01, -3.833990904293043e-01, -3.279616353091362e-01, -3.279616353091361e-01, -4.887282273003250e-01, -4.399221895259292e-02, -5.449085482567241e-02, -3.774680733003557e-01, -7.575245115586417e-02, -7.575245115586414e-02, -1.794202440058132e-02, -4.799222679325334e-03, -7.265775854028351e-03, -7.193087631519571e-02, -8.380396746106394e-03, -8.380396746106347e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3pw91_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.098650338293220e-09, -5.098622856747357e-09, -5.098436659428714e-09, -5.098846857013050e-09, -5.098641018527608e-09, -5.098641018527608e-09, -6.147975887346187e-06, -6.148122897140776e-06, -6.150931995094154e-06, -6.141508177436426e-06, -6.147576021965991e-06, -6.147576021965991e-06, -2.980293742932458e-03, -2.991532982392257e-03, -3.246953531257861e-03, -3.152484817195660e-03, -3.175432128001014e-03, -3.175432128001014e-03, -4.176299694877527e-01, -3.962894039885789e-01, -1.702070699049281e-03, -1.014407017634921e+00, -7.195235043199739e-01, -7.195235043199739e-01, -7.297676309539030e+03, -6.399435060161915e+03, -4.265925653634309e+01, -3.444000346543720e+04, -1.908649213450650e+04, -1.908649213450651e+04, -1.384444113157913e-06, -1.384329034667007e-06, -1.384431175572268e-06, -1.384329843563069e-06, -1.384391247671336e-06, -1.384391247671336e-06, -4.766169710948188e-05, -4.662420106274938e-05, -4.796657601921419e-05, -4.704122600092758e-05, -4.694012171267294e-05, -4.694012171267294e-05, -4.520337265767555e-03, -2.245768778112132e-03, -6.042661536195038e-03, -3.766000250131367e-03, -4.182675341031943e-03, -4.182675341031943e-03, -2.807721448891503e+00, -3.785823677108566e-01, -3.564433794988211e+00, -5.333602262751492e-05, -1.948816174800523e+00, -1.948816174800523e+00, -7.855464087690599e+04, -3.847843439753461e+04, -1.394358173363483e+05, -1.172250086114811e+01, -6.583056325920658e+04, -6.583056325920654e+04, -2.062478210790667e-03, -2.871856315241306e-03, -2.570385890963697e-03, -2.319576475310840e-03, -2.443121211317945e-03, -2.443121211317945e-03, -1.919137046300968e-03, -9.060192217805905e-03, -7.311351773028378e-03, -5.461921462688399e-03, -6.427949447222954e-03, -6.427949447222954e-03, -2.005427963301597e-03, -1.693038243177833e-01, -8.937390706360239e-02, -3.107062581122075e-02, -5.365295543799943e-02, -5.365295543799946e-02, -1.215354325804439e-02, -4.686594239232441e+01, -1.984107773271532e+01, -3.262263835650504e-02, -6.329692108241895e+00, -6.329692108241894e+00, -2.557801381005185e+03, -2.703132930592405e+06, -2.592659856174523e+05, -7.516723342291763e+00, -8.788122021730689e+04, -8.788122021730719e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
