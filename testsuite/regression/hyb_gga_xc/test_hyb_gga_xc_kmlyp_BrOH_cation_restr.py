
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_kmlyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.913827357765621e+00, -8.913851935560546e+00, -8.913968712807986e+00, -8.913602888504700e+00, -8.913793505273498e+00, -8.913793505273498e+00, -1.529039545217220e+00, -1.529043087786305e+00, -1.529160459485804e+00, -1.529231463903933e+00, -1.529078712325026e+00, -1.529078712325026e+00, -3.401318942123704e-01, -3.397579947417211e-01, -3.305416368021623e-01, -3.330122899348996e-01, -3.325426973771950e-01, -3.325426973771950e-01, -1.030176661053826e-01, -1.047731054249840e-01, -3.896123614528265e-01, -7.700033372215838e-02, -8.769143186470836e-02, -8.769143186470835e-02, -7.732485544054653e-03, -8.062427415053306e-03, -2.849689171091909e-02, -4.908982166157760e-03, -5.939054488865611e-03, -5.939054488865611e-03, -2.248345340973703e+00, -2.248749956287312e+00, -2.248365422854278e+00, -2.248722601530563e+00, -2.248549658458487e+00, -2.248549658458487e+00, -8.896773294740430e-01, -8.957806133550902e-01, -8.850244086476160e-01, -8.904241776145307e-01, -8.952961927366619e-01, -8.952961927366619e-01, -3.045341855321788e-01, -3.285376706421490e-01, -2.845822017539624e-01, -2.956769865769581e-01, -3.089683891371056e-01, -3.089683891371056e-01, -5.157427083072007e-02, -9.831305558980780e-02, -4.833746041055517e-02, -8.787108731819581e-01, -6.330483378774361e-02, -6.330483378774361e-02, -3.943862266633352e-03, -4.816489629361076e-03, -3.839073865519523e-03, -3.705540482248069e-02, -4.494953722600638e-03, -4.494953722600638e-03, -3.075210925113299e-01, -3.056950128559223e-01, -3.063382172699673e-01, -3.068678862470927e-01, -3.066028822026683e-01, -3.066028822026683e-01, -3.004429032195451e-01, -2.603521680137388e-01, -2.720842699445171e-01, -2.835140462806755e-01, -2.777146524886363e-01, -2.777146524886363e-01, -3.421855495689686e-01, -1.236157209877341e-01, -1.482515169062252e-01, -1.931344244723943e-01, -1.696611507848041e-01, -1.696611507848041e-01, -2.424609299183319e-01, -2.775926116236935e-02, -3.206205866410498e-02, -1.882823072261374e-01, -4.504892590728223e-02, -4.504892590728224e-02, -1.022408117500422e-02, -1.534293220428670e-03, -2.944203563518937e-03, -4.280870740159812e-02, -4.209684009595126e-03, -4.209684009595126e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_kmlyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.185026349923478e+01, -1.185029613446659e+01, -1.185045142135269e+01, -1.184996566282368e+01, -1.185021874045959e+01, -1.185021874045959e+01, -2.017335299709042e+00, -2.017338746552518e+00, -2.017465572954557e+00, -2.017610461366617e+00, -2.017385815457224e+00, -2.017385815457224e+00, -4.491388213508953e-01, -4.487844430885289e-01, -4.405873884632800e-01, -4.436306186848528e-01, -4.428927200235788e-01, -4.428927200235788e-01, -1.507856618467934e-01, -1.520791840163207e-01, -5.128973375271755e-01, -1.258045447616635e-01, -1.352300674688494e-01, -1.352300674688494e-01, -9.838114334644842e-03, -1.025281013072656e-02, -3.855163769310006e-02, -6.281386511656292e-03, -7.580970499067751e-03, -7.580970499067751e-03, -2.970713600236864e+00, -2.971226795329288e+00, -2.970739278830611e+00, -2.971192303999859e+00, -2.970972628142025e+00, -2.970972628142025e+00, -1.178670659770338e+00, -1.186378123054448e+00, -1.173377026421042e+00, -1.180180080472792e+00, -1.185497430689672e+00, -1.185497430689672e+00, -3.971382768806344e-01, -4.244865644924969e-01, -3.717910814223351e-01, -3.821013843247714e-01, -4.023553121637641e-01, -4.023553121637641e-01, -9.708832309006042e-02, -1.571896928093521e-01, -9.051059873507750e-02, -1.149635028989101e+00, -1.074461040739874e-01, -1.074461040739874e-01, -5.060692316566097e-03, -6.164544046277557e-03, -4.927933988455846e-03, -6.131006498907632e-02, -5.758137161275946e-03, -5.758137161275946e-03, -3.960408206542663e-01, -3.945638463100888e-01, -3.950828301932325e-01, -3.955102522088211e-01, -3.952961426287512e-01, -3.952961426287512e-01, -3.865374829064524e-01, -3.440485160022614e-01, -3.559322723725733e-01, -3.679138011241821e-01, -3.617496384319521e-01, -3.617496384319521e-01, -4.424872373932873e-01, -1.856530505130279e-01, -2.104109031146254e-01, -2.569788511369303e-01, -2.316626149426069e-01, -2.316626149426069e-01, -3.207919660819104e-01, -3.711320254809089e-02, -4.946919831678028e-02, -2.476532561120972e-01, -7.668068157862086e-02, -7.668068157862086e-02, -1.296696499510203e-02, -1.991343711437530e-03, -3.792011657157279e-03, -7.240547532090699e-02, -5.397257972742444e-03, -5.397257972742444e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_kmlyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [8.951262200535382e-12, 8.951136713840647e-12, 8.950540129502360e-12, 8.952407992883303e-12, 8.951434718531198e-12, 8.951434718531198e-12, 8.693793952687565e-08, 8.693698371794968e-08, 8.690404823896099e-08, 8.687725058385638e-08, 8.692611952972198e-08, 8.692611952972198e-08, 3.557654554576303e-04, 3.576949473662542e-04, 4.081045095278408e-04, 3.919232521106091e-04, 3.952996207742031e-04, 3.952996207742031e-04, 1.534157999719331e-01, 1.447589544951064e-01, 1.668072561442754e-04, 4.206125808299736e-01, 2.789184601540590e-01, 2.789184601540590e-01, 2.528007299163744e-08, 1.039601094667734e-07, 4.291572018115602e+00, 9.316731242364575e-18, 4.059230021858420e-13, 4.059230021858420e-13, 1.115960165396143e-08, 1.114920341778874e-08, 1.115908349131480e-08, 1.114990427281695e-08, 1.115435046600099e-08, 1.115435046600099e-08, 1.629120929430290e-06, 1.570213116580770e-06, 1.673798093485002e-06, 1.619897954188179e-06, 1.575655714827702e-06, 1.575655714827702e-06, 6.833034924136243e-04, 4.566301584132480e-04, 9.942703646465822e-04, 8.248032184248398e-04, 6.322807682523932e-04, 6.322807682523932e-04, 1.311903665994841e+00, 1.525208896464530e-01, 1.613029994678496e+00, 1.797541183561381e-06, 8.223742714356808e-01, 8.223742714356808e-01, 1.222671475766443e-24, 2.766694897317783e-18, 1.280257056815548e-25, 3.583258868627558e+00, 2.622679905845447e-20, 2.622679905845447e-20, 6.674388630943011e-04, 6.863218078514729e-04, 6.796057161995646e-04, 6.741324650840045e-04, 6.768655012313668e-04, 6.768655012313668e-04, 7.624884262041945e-04, 1.587108028452103e-03, 1.273581043336806e-03, 1.032655547622083e-03, 1.148210339210175e-03, 1.148210339210175e-03, 3.624041936618153e-04, 5.987251311138937e-02, 2.761443173510236e-02, 8.038406972551489e-03, 1.505394875941921e-02, 1.505394875941921e-02, 2.348920305332325e-03, 4.117391849179580e+00, 4.427737829849431e+00, 9.490649073375351e-03, 2.326898515324214e+00, 2.326898515324214e+00, 7.759320293684258e-05, 6.392520382863291e-86, 3.763488662080372e-37, 2.649612636117026e+00, 2.154475498667888e-22, 2.154475498667775e-22]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
