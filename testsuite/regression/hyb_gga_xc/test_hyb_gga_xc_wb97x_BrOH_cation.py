
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.761383570063035e+01, -1.761385761742807e+01, -1.761401423037701e+01, -1.761368694175794e+01, -1.761385001897939e+01, -1.761385001897939e+01, -2.847789100804402e+00, -2.847756366272063e+00, -2.847072204296623e+00, -2.848821983833936e+00, -2.847821137534826e+00, -2.847821137534826e+00, -4.850324630332244e-01, -4.849117548446487e-01, -4.827083905643979e-01, -4.869557333989693e-01, -4.864292991091198e-01, -4.864292991091198e-01, -6.879935078807785e-02, -7.096097013865701e-02, -5.776752706338770e-01, -3.795581856619588e-02, -5.306693083225530e-02, -5.306693083225538e-02, 8.186851588117218e-03, 8.545851026756380e-03, 2.609929948250530e-02, 5.008535804762395e-03, 3.184142888804670e-03, 3.184142888804660e-03, -4.173819186679749e+00, -4.173420435310259e+00, -4.173809300415285e+00, -4.173457091632560e+00, -4.173611965877375e+00, -4.173611965877375e+00, -1.692034594202238e+00, -1.700463123646363e+00, -1.693250751364316e+00, -1.700674850222140e+00, -1.696143383386517e+00, -1.696143383386517e+00, -3.926527330071080e-01, -4.283373355823016e-01, -3.589768098107193e-01, -3.689339956339112e-01, -3.989604757173694e-01, -3.989604757173693e-01, -9.095683364297669e-03, -7.390086778064324e-02, -3.088155551785821e-03, -1.460822403220139e+00, -1.907545990146126e-02, -1.907545990146126e-02, 3.920537076591082e-03, 4.904498259688012e-03, 3.786604062368174e-03, 1.893844283817017e-02, 3.651201917716142e-03, 3.651201917716126e-03, -3.892448121016840e-01, -3.874406874521522e-01, -3.888273940600054e-01, -3.894609345838527e-01, -3.892258381077161e-01, -3.892258381077161e-01, -3.762167443737363e-01, -3.283047997900299e-01, -3.376109357650729e-01, -3.484126359218014e-01, -3.422122811286399e-01, -3.422122811286399e-01, -4.528704118633274e-01, -1.103449575574749e-01, -1.454038514306837e-01, -2.076026814737553e-01, -1.755348217161520e-01, -1.755348217161519e-01, -2.953058610214626e-01, 2.630157405826367e-02, 2.463709079852970e-02, -1.921864396499783e-01, 7.869696831329338e-03, 7.869696831329457e-03, 1.110422237945757e-02, 1.393409478957235e-03, 2.822805906084540e-03, 1.112799334324324e-02, 3.539878616852334e-03, 3.539878616852338e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.104658164624660e+01, -2.104655818107618e+01, -2.104668874265856e+01, -2.104663593816223e+01, -2.104699261752735e+01, -2.104708204063932e+01, -2.104578443959089e+01, -2.104554147902234e+01, -2.104664941212648e+01, -2.104612698426985e+01, -2.104664941212648e+01, -2.104612698426985e+01, -3.319508549717836e+00, -3.319790285584175e+00, -3.319553102334040e+00, -3.319849513851407e+00, -3.320797282192042e+00, -3.321175356975705e+00, -3.319198210015279e+00, -3.319597367805418e+00, -3.318861602377458e+00, -3.320724481634382e+00, -3.318861602377458e+00, -3.320724481634382e+00, -5.662919330256520e-01, -5.691557362488160e-01, -5.653053748940853e-01, -5.687294238914634e-01, -5.536300763734592e-01, -5.509693560428490e-01, -5.567674090936530e-01, -5.576387378039049e-01, -5.733325772240507e-01, -5.413973616231779e-01, -5.733325772240507e-01, -5.413973616231779e-01, -1.196592166996858e-01, -1.124449956885534e-01, -1.252221114304370e-01, -1.170541377583367e-01, -6.626344951402487e-01, -6.884832278540230e-01, -4.418215843351139e-02, -4.067440182012173e-02, -4.169054284425160e-02, -2.008544036741901e-01, -4.169054284425173e-02, -2.008544036741926e-01, 1.211379614216187e-02, 9.249022974733926e-03, 1.285944328129038e-02, 9.471362990847937e-03, 2.732561857903917e-02, 1.870243289626105e-02, 6.305262720476084e-03, 6.797869279963370e-03, 1.298504569253810e-03, 1.973742097465637e-02, 1.298504569253966e-03, 1.973742097465592e-02, -5.200680683266174e+00, -5.199391970109723e+00, -5.203895553992415e+00, -5.202494593927317e+00, -5.200855579512470e+00, -5.199494250043591e+00, -5.203611609102397e+00, -5.202315582168453e+00, -5.202331941064916e+00, -5.200950179555918e+00, -5.202331941064916e+00, -5.200950179555918e+00, -1.755574042525654e+00, -1.755495185366605e+00, -1.771302690332747e+00, -1.770846216280813e+00, -1.737214113227091e+00, -1.742207882339973e+00, -1.751246669946158e+00, -1.756235135343524e+00, -1.776983943681110e+00, -1.765819444698565e+00, -1.776983943681110e+00, -1.765819444698565e+00, -5.050620787300463e-01, -5.041587899167438e-01, -6.054286578439795e-01, -6.054473029480194e-01, -4.463487347789024e-01, -4.644352458383225e-01, -5.210579009093464e-01, -5.350265064024183e-01, -5.324466460071171e-01, -5.072111100686348e-01, -5.324466460071156e-01, -5.072111100686346e-01, -1.642264189036366e-02, -1.307939217345690e-02, -6.889537215148454e-02, -6.784638994262386e-02, -1.713521003793913e-02, -9.658269902602323e-03, -1.944869321154910e+00, -1.944067742549047e+00, -4.032875035634179e-02, -1.116216650621047e-02, -4.032875035634179e-02, -1.116216650621047e-02, 5.617082823973996e-03, 4.720630486193599e-03, 6.631776825036185e-03, 6.199454717371956e-03, 5.661633968852680e-03, 4.369544847536545e-03, 3.496553181868838e-03, 2.062484403856964e-03, 1.069934887219769e-02, 2.502543373012917e-03, 1.069934887219778e-02, 2.502543373013168e-03, -5.376904303174005e-01, -5.396591498473301e-01, -5.500228456771017e-01, -5.516326091985005e-01, -5.461009917822136e-01, -5.474373535252899e-01, -5.407201464364302e-01, -5.421532203345270e-01, -5.434967341936270e-01, -5.448443206103714e-01, -5.434967341936270e-01, -5.448443206103714e-01, -5.311818280500380e-01, -5.328422643029389e-01, -3.971222795992329e-01, -3.984406094531773e-01, -4.247617400420171e-01, -4.271215491304777e-01, -4.761796410846948e-01, -4.781594094836401e-01, -4.469890312595996e-01, -4.488470777964073e-01, -4.469890312595996e-01, -4.488470777964073e-01, -6.381283403210174e-01, -6.390664557587502e-01, -1.332003969185972e-01, -1.326604625867831e-01, -1.981830731582400e-01, -1.973721021376233e-01, -2.622512007007919e-01, -2.628801467599988e-01, -2.328665166431768e-01, -2.326566349461963e-01, -2.328665166431777e-01, -2.326566349461995e-01, -3.598627295890475e-01, -3.616618066048402e-01, 2.450622107097094e-02, 2.341715962739924e-02, 1.707223663539337e-02, 1.241546285161738e-02, -2.461844870236279e-01, -2.492320518573134e-01, -1.638734841235094e-02, -2.900201755751192e-03, -1.638734841235109e-02, -2.900201755751097e-03, 1.528796039427286e-02, 1.304358479269890e-02, 1.854357460451381e-03, 1.834792876138906e-03, 4.291983582215522e-03, 3.238447772224601e-03, -6.974633145909631e-03, -6.839146075211058e-03, 9.478686304626886e-03, 2.579060726449240e-03, 9.478686304626865e-03, 2.579060726449366e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.246523075647178e-08, 0.000000000000000e+00, -1.246529560449046e-08, -1.246508525671128e-08, 0.000000000000000e+00, -1.246519130500108e-08, -1.246457349099044e-08, 0.000000000000000e+00, -1.246446398570202e-08, -1.246619944211231e-08, 0.000000000000000e+00, -1.246655702009052e-08, -1.246512834384663e-08, 0.000000000000000e+00, -1.246569774520956e-08, -1.246512834384663e-08, 0.000000000000000e+00, -1.246569774520956e-08, -1.634449933221840e-05, 0.000000000000000e+00, -1.634540490837461e-05, -1.634451260134553e-05, 0.000000000000000e+00, -1.634554169768955e-05, -1.634576800073824e-05, 0.000000000000000e+00, -1.634442569746038e-05, -1.633306338995300e-05, 0.000000000000000e+00, -1.633224227822487e-05, -1.635543621834945e-05, 0.000000000000000e+00, -1.633154842167776e-05, -1.635543621834945e-05, 0.000000000000000e+00, -1.633154842167776e-05, -8.137086062369181e-03, 0.000000000000000e+00, -8.116852284505628e-03, -8.124506038653235e-03, 0.000000000000000e+00, -8.103867801738667e-03, -7.697451812115300e-03, 0.000000000000000e+00, -7.659994737516014e-03, -7.505166538820320e-03, 0.000000000000000e+00, -7.519295512738908e-03, -7.514727812588115e-03, 0.000000000000000e+00, -7.459318169308031e-03, -7.514727812588115e-03, 0.000000000000000e+00, -7.459318169308031e-03, 8.865611087281823e-02, 0.000000000000000e+00, -7.070279010103613e-02, 1.426188228745246e-01, 0.000000000000000e+00, -4.226657439690563e-02, -5.011454546663897e-03, 0.000000000000000e+00, -4.596063684355538e-03, -9.383686899203175e-01, 0.000000000000000e+00, -1.068507880291566e+00, -9.401210284920348e-01, 0.000000000000000e+00, 1.485788631272483e+01, -9.401210284920608e-01, 0.000000000000000e+00, 1.485788631272496e+01, 2.816487568724020e+01, 0.000000000000000e+00, 1.713149274299716e+01, 3.050469416000351e+01, 0.000000000000000e+00, 1.735121601696921e+01, 8.644451088327882e+00, 0.000000000000000e+00, 4.258246881237417e+00, 1.978615895485442e+01, 0.000000000000000e+00, 2.269527270735550e+01, 2.647040427645548e+00, 0.000000000000000e+00, 2.799096852126931e+02, 2.647040427858676e+00, 0.000000000000000e+00, 2.799096852146421e+02, -3.181951862737406e-06, 0.000000000000000e+00, -3.185229039810489e-06, -3.174061204244795e-06, 0.000000000000000e+00, -3.177635401241724e-06, -3.181517848027069e-06, 0.000000000000000e+00, -3.184988604131596e-06, -3.174773928579656e-06, 0.000000000000000e+00, -3.178064785085339e-06, -3.177904638913222e-06, 0.000000000000000e+00, -3.181429754836001e-06, -3.177904638913222e-06, 0.000000000000000e+00, -3.181429754836001e-06, -1.252592728632861e-04, 0.000000000000000e+00, -1.252797948870563e-04, -1.225771558428639e-04, 0.000000000000000e+00, -1.226800424596353e-04, -1.262914588178624e-04, 0.000000000000000e+00, -1.259280510014226e-04, -1.238554675300188e-04, 0.000000000000000e+00, -1.234822329660025e-04, -1.230778900855738e-04, 0.000000000000000e+00, -1.239395127360030e-04, -1.230778900855738e-04, 0.000000000000000e+00, -1.239395127360030e-04, -1.369251220651670e-02, 0.000000000000000e+00, -1.378913510933371e-02, 4.440592455701187e-03, 0.000000000000000e+00, 4.365545419779109e-03, -2.088019075162023e-02, 0.000000000000000e+00, -1.744240992871200e-02, 8.584892578775651e-03, 0.000000000000000e+00, 6.658326112157983e-03, -1.066832727617064e-02, 0.000000000000000e+00, -1.356404216875587e-02, -1.066832727617036e-02, 0.000000000000000e+00, -1.356404216875587e-02, -1.718205939086223e+00, 0.000000000000000e+00, -2.053015162895314e+00, -5.792416001512256e-01, 0.000000000000000e+00, -5.875541950398195e-01, -6.235854014315603e-01, 0.000000000000000e+00, -2.445197391245230e+00, -8.789484986199992e-05, 0.000000000000000e+00, -8.809526380920109e-05, -6.587477049419739e-01, 0.000000000000000e+00, -2.188511226805784e+00, -6.587477049419739e-01, 0.000000000000000e+00, -2.188511226805784e+00, 3.341484720451250e+01, 0.000000000000000e+00, 2.449411750784196e+01, 2.657360565395662e+01, 0.000000000000000e+00, 2.354793259689320e+01, 1.996687422170558e+02, 0.000000000000000e+00, 1.250365277836126e+02, 2.087807002854766e+00, 0.000000000000000e+00, 1.823448759063854e+00, 2.299996962219407e+02, 0.000000000000000e+00, 1.706519754276243e+01, 2.299996962208093e+02, 0.000000000000000e+00, 1.706519754231123e+01, -1.900590920262585e-02, 0.000000000000000e+00, -1.854750293758589e-02, 7.654185773852978e-03, 0.000000000000000e+00, 7.366874370649402e-03, 2.602667950646087e-03, 0.000000000000000e+00, 1.915110419991913e-03, -7.181654820924057e-03, 0.000000000000000e+00, -7.817901269280045e-03, -1.643776458549161e-03, 0.000000000000000e+00, -2.368181484332058e-03, -1.643776458549161e-03, 0.000000000000000e+00, -2.368181484332058e-03, 3.195528711641225e-02, 0.000000000000000e+00, 3.267803066865916e-02, -2.506566994256672e-02, 0.000000000000000e+00, -2.481384011950487e-02, -2.356037719414758e-02, 0.000000000000000e+00, -2.301167279483570e-02, -1.070252879446242e-02, 0.000000000000000e+00, -1.025877231506470e-02, -1.940730181449070e-02, 0.000000000000000e+00, -1.897095835451676e-02, -1.940730181449070e-02, 0.000000000000000e+00, -1.897095835451676e-02, 3.119991648932705e-03, 0.000000000000000e+00, 3.198989095111560e-03, -1.987522705534592e-01, 0.000000000000000e+00, -2.012126700416926e-01, -6.961360849052481e-02, 0.000000000000000e+00, -7.312261969488676e-02, -7.242521924357868e-02, 0.000000000000000e+00, -7.204612430332709e-02, -6.347779189588100e-02, 0.000000000000000e+00, -6.362108884819838e-02, -6.347779189587874e-02, 0.000000000000000e+00, -6.362108884820004e-02, -3.300518590579149e-02, 0.000000000000000e+00, -3.255570168772193e-02, 6.288068710352490e+00, 0.000000000000000e+00, 5.781490561060720e+00, 4.673741247843426e+00, 0.000000000000000e+00, 2.371201432020625e+00, -1.028810096588190e-01, 0.000000000000000e+00, -9.811426272635740e-02, 2.120934531069659e+00, 0.000000000000000e+00, -2.216145651587282e+00, 2.120934531069497e+00, 0.000000000000000e+00, -2.216145651587221e+00, 1.955262110763945e+01, 0.000000000000000e+00, 1.455406838168060e+01, 1.317667894049141e+02, 0.000000000000000e+00, 1.281540408221366e+02, 7.845060445098341e+01, 0.000000000000000e+00, 4.749321351156507e+01, 9.241580269545787e-01, 0.000000000000000e+00, -1.179955631518677e-01, 3.246370984235031e+02, 0.000000000000000e+00, 3.239380283810629e+01, 3.246370984236726e+02, 0.000000000000000e+00, 3.239380283809087e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
