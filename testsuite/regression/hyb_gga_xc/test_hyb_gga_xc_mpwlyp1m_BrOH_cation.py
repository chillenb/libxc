
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpwlyp1m_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.008191688015533e+01, -2.008194233887819e+01, -2.008212147685758e+01, -2.008174134266909e+01, -2.008193114930670e+01, -2.008193114930670e+01, -3.377913456303111e+00, -3.377877900610442e+00, -3.377137390961908e+00, -3.379056568345973e+00, -3.377951235792739e+00, -3.377951235792739e+00, -7.026451981939132e-01, -7.025278314300345e-01, -7.009093730797352e-01, -7.057464155238835e-01, -7.046864049621199e-01, -7.046864049621199e-01, -2.108563543314807e-01, -2.127469326262088e-01, -8.091261059883841e-01, -1.718653517497731e-01, -2.033172395517668e-01, -2.033172395517667e-01, -1.853795785996440e-03, -2.053779297915278e-03, -5.248402923992233e-02, -7.793367420653779e-04, -8.863860371802046e-04, -8.863860371802052e-04, -4.870580593384484e+00, -4.869927392658391e+00, -4.870561137757182e+00, -4.869984330179210e+00, -4.870243740490278e+00, -4.870243740490278e+00, -2.064588643038877e+00, -2.074412810774233e+00, -2.065008632729700e+00, -2.073689236231292e+00, -2.069819665466873e+00, -2.069819665466873e+00, -5.932750797582714e-01, -6.172403520391724e-01, -5.543629991692678e-01, -5.530087824724903e-01, -5.999700403305893e-01, -5.999700403305894e-01, -1.283418042197041e-01, -2.187580527473228e-01, -1.210832937452134e-01, -1.785255150409076e+00, -1.460849873000218e-01, -1.460849873000218e-01, -5.639990048256259e-04, -7.673711931343561e-04, -6.392788882255534e-04, -9.011845974719399e-02, -6.990940789848775e-04, -6.990940789848778e-04, -5.659510006649359e-01, -5.692421869495987e-01, -5.681806074545407e-01, -5.672345957249088e-01, -5.677157208975110e-01, -5.677157208975110e-01, -5.492080771104931e-01, -5.195859914686731e-01, -5.294198349317425e-01, -5.379398017050459e-01, -5.335595211884054e-01, -5.335595211884054e-01, -6.468953042473974e-01, -2.666747928719497e-01, -3.075198918192368e-01, -3.746538193453822e-01, -3.391277567469834e-01, -3.391277567469834e-01, -4.804553747916741e-01, -4.802729738252558e-02, -7.114322084423161e-02, -3.540039072399047e-01, -1.093763492129835e-01, -1.093763492129835e-01, -3.371258199245122e-03, -1.698692708447310e-04, -3.846734363523634e-04, -1.044744847938670e-01, -6.440307299796516e-04, -6.440307299796506e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpwlyp1m_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.402623601525583e+01, -2.402620746772354e+01, -2.402633940913672e+01, -2.402628285646951e+01, -2.402665180584338e+01, -2.402673406379169e+01, -2.402548084176993e+01, -2.402524576662561e+01, -2.402629572189723e+01, -2.402582870893506e+01, -2.402629572189723e+01, -2.402582870893506e+01, -3.928571380943572e+00, -3.928665553353013e+00, -3.928605254083581e+00, -3.928701535074332e+00, -3.929448818934061e+00, -3.929663554457158e+00, -3.928615889674180e+00, -3.928825390950673e+00, -3.927913543639130e+00, -3.929592976265395e+00, -3.927913543639130e+00, -3.929592976265395e+00, -7.920676501039149e-01, -7.943338987590044e-01, -7.908375862117920e-01, -7.935877839501200e-01, -7.708254976650941e-01, -7.681289449130272e-01, -7.750700010808921e-01, -7.759278062566407e-01, -7.905900167046677e-01, -7.653908353248965e-01, -7.905900167046677e-01, -7.653908353248965e-01, -2.320005958739413e-01, -2.329570059539263e-01, -2.334670356260781e-01, -2.348851121812228e-01, -9.069969302866425e-01, -9.309700243313136e-01, -2.004970667762004e-01, -2.010826778008058e-01, -2.032255731394498e-01, -2.200017716997820e-01, -2.032255731394498e-01, -2.200017716997819e-01, -4.325902774521108e-03, -4.431383574727318e-03, -4.884314686412638e-03, -5.088255739098482e-03, -1.226490330746830e-01, -1.268299838273821e-01, -1.425335582355438e-03, -1.449894118774191e-03, -2.206734026962869e-03, -2.941545072393146e-03, -2.206734026962868e-03, -2.941545072393149e-03, -5.964302911879512e+00, -5.962885692837434e+00, -5.966694731174444e+00, -5.965200312334354e+00, -5.964434647798523e+00, -5.962966602174242e+00, -5.966489954076209e+00, -5.965066165517713e+00, -5.965526953260094e+00, -5.964048634649203e+00, -5.965526953260094e+00, -5.964048634649203e+00, -2.180897540230733e+00, -2.180803165002445e+00, -2.197589082472403e+00, -2.197071719233955e+00, -2.165517283738770e+00, -2.168774551530142e+00, -2.179862484366387e+00, -2.183327423409525e+00, -2.201151059783572e+00, -2.192314633444462e+00, -2.201151059783572e+00, -2.192314633444462e+00, -7.095900539116214e-01, -7.082698374549756e-01, -7.853426430012840e-01, -7.858586969295652e-01, -6.481513527150545e-01, -6.653698854530740e-01, -6.881650156053923e-01, -7.045368060666286e-01, -7.347332105706216e-01, -7.076694417128980e-01, -7.347332105706217e-01, -7.076694417128981e-01, -1.810764367191995e-01, -1.796596091567947e-01, -2.522441015634358e-01, -2.523289862883508e-01, -1.737411509675492e-01, -1.725021265932622e-01, -2.277251917021733e+00, -2.276375097100877e+00, -1.832560118098733e-01, -1.726004792593865e-01, -1.832560118098733e-01, -1.726004792593865e-01, -1.021172919784177e-03, -9.272763573818599e-04, -1.450282847477176e-03, -1.400619568392725e-03, -1.297647744830480e-03, -1.280219146691430e-03, -1.455868015879156e-01, -1.470426611066798e-01, -1.763181628106606e-03, -1.448802782101065e-03, -1.763181628106606e-03, -1.448802782101067e-03, -7.345026247160125e-01, -7.367184934920026e-01, -7.246463030927990e-01, -7.268907655589820e-01, -7.280982618024591e-01, -7.303515788345640e-01, -7.309872240996383e-01, -7.331920524995850e-01, -7.295464028568155e-01, -7.317750124634623e-01, -7.295464028568155e-01, -7.317750124634623e-01, -7.180120147709956e-01, -7.198058616489816e-01, -5.928301677094310e-01, -5.945055317833463e-01, -6.236490220794174e-01, -6.256617129480090e-01, -6.581840751382598e-01, -6.599136862934812e-01, -6.402226297295835e-01, -6.419513430212448e-01, -6.402226297295835e-01, -6.419513430212448e-01, -8.200822614574143e-01, -8.214938070301380e-01, -2.966282532869231e-01, -2.967765352594136e-01, -3.372416411274727e-01, -3.377957621037160e-01, -4.270203981830557e-01, -4.283480364207913e-01, -3.767454237121453e-01, -3.765335394569193e-01, -3.767454237121453e-01, -3.765335394569193e-01, -5.480022117341441e-01, -5.503714968089277e-01, -1.201257758630778e-01, -1.207705020892347e-01, -1.475816147273060e-01, -1.474891693501898e-01, -4.126019609662634e-01, -4.163161464917702e-01, -1.513907512428910e-01, -1.421559127308035e-01, -1.513907512428909e-01, -1.421559127308035e-01, -8.703912225167133e-03, -9.125577103961658e-03, -2.446470516193861e-04, -2.510887853031449e-04, -6.802695350262991e-04, -5.934196240044848e-04, -1.443060665721401e-01, -1.445210682830108e-01, -1.702951779741385e-03, -1.227287000089511e-03, -1.702951779741382e-03, -1.227287000089512e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpwlyp1m_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.382487737829719e-08, 1.463652377038497e-11, -1.382495597791570e-08, -1.382480407769327e-08, 1.463631512328463e-11, -1.382490210972856e-08, -1.382439132702010e-08, 1.463532316351641e-11, -1.382436387495131e-08, -1.382523092959234e-08, 1.463842899785011e-11, -1.382542430972482e-08, -1.382484650856921e-08, 1.463681083685537e-11, -1.382486792639012e-08, -1.382484650856921e-08, 1.463681083685537e-11, -1.382486792639012e-08, -1.795708433830131e-05, 1.902747638536065e-07, -1.796411067143120e-05, -1.795763281369961e-05, 1.902725761814505e-07, -1.796517742700356e-05, -1.797606104132383e-05, 1.901971754504621e-07, -1.798062134297907e-05, -1.793245231769067e-05, 1.901358235030523e-07, -1.793825172205972e-05, -1.796557175163177e-05, 1.902491360705296e-07, -1.795411056118882e-05, -1.796557175163177e-05, 1.902491360705296e-07, -1.795411056118882e-05, -1.027882447289490e-02, 1.144533678933034e-03, -1.036128747967964e-02, -1.026831087072349e-02, 1.151156568500561e-03, -1.036938139137509e-02, -1.027904717581174e-02, 1.320750241138922e-03, -1.013466073356773e-02, -9.914870212432463e-03, 1.265386257803329e-03, -9.964107075858930e-03, -1.069690760797706e-02, 1.376562597771172e-03, -9.135126357882805e-03, -1.069690760797706e-02, 1.376562597771172e-03, -9.135126357882805e-03, -9.862335089674847e-01, 6.012876550391961e-01, -9.734214698336111e-01, -9.826820573632309e-01, 5.680272535784819e-01, -9.615350654371120e-01, -5.947715268245008e-03, 5.322727974273029e-04, -5.801455437068524e-03, -1.449759259628488e+00, 1.675901373768304e+00, -1.441979113203578e+00, -1.268747211427742e+00, 2.382014110698246e+00, -2.805492147428136e+00, -1.268747211427740e+00, 2.382014110698246e+00, -2.805492147428138e+00, 5.705794484258560e+02, 1.111914508308031e-07, 5.566995734491072e+02, 5.922611310321709e+02, 4.562559950974850e-07, 5.790293778757271e+02, 7.532357402654881e+01, 1.838627425311693e+01, 6.269057934243136e+01, 5.913714181030069e+02, 4.136895542502456e-17, 5.784411853206058e+02, 5.856107133154046e+02, 1.070835888305008e-12, 1.603880800843137e+03, 5.856107133154057e+02, 1.070835888305008e-12, 1.603880800843158e+03, -4.146755695505689e-06, 2.233703107768369e-08, -4.150278030218012e-06, -4.150037623282160e-06, 2.231537777319893e-08, -4.153448650953308e-06, -4.146894669661609e-06, 2.233595490630417e-08, -4.150353202408596e-06, -4.149707570550761e-06, 2.231683364972891e-08, -4.153237476120230e-06, -4.148470643905508e-06, 2.232609670798167e-08, -4.151874775161241e-06, -4.148470643905508e-06, 2.232609670798167e-08, -4.151874775161241e-06, -1.317852183978984e-04, 4.104557134069705e-06, -1.318039901424987e-04, -1.292086228221766e-04, 3.949027730077658e-06, -1.292972880568113e-04, -1.316882124446244e-04, 4.223201907834492e-06, -1.318990052421494e-04, -1.294657090399863e-04, 4.080707689470805e-06, -1.296191034980150e-04, -1.304558970838866e-04, 3.966397450084659e-06, -1.303148823245832e-04, -1.304558970838866e-04, 3.966397450084659e-06, -1.303148823245832e-04, -2.136661389928602e-02, 2.253646609880290e-03, -2.155718875915926e-02, -1.976378973537167e-02, 1.482953633834817e-03, -1.981003591403167e-02, -2.935202060717605e-02, 3.393155540240489e-03, -2.699896798889054e-02, -3.242029511786967e-02, 2.786872153422916e-03, -2.904157418399781e-02, -1.936518265636340e-02, 2.171399762139616e-03, -2.244321327092864e-02, -1.936518265636341e-02, 2.171399762139616e-03, -2.244321327092864e-02, -9.982547490281370e-01, 5.364331359216309e+00, -1.189628157606399e+00, -6.244058675754081e-01, 5.928062603673171e-01, -6.256329643119598e-01, -4.898669248291183e-01, 6.670630325612285e+00, -1.300815643114380e+00, -2.521232939709433e-04, 4.550774239056777e-06, -2.525824717555026e-04, -1.661342724162930e+00, 3.362374819306393e+00, -2.468141949715843e+00, -1.661342724162930e+00, 3.362374819306393e+00, -2.468141949715843e+00, 8.697375466249588e+02, 5.421496698436063e-24, 7.523721448276164e+02, 7.134052072197525e+02, 1.228758886113335e-17, 6.594134269304184e+02, 3.931975372040798e+03, 5.656440620065503e-25, 4.290733374478918e+03, 6.120229853301938e+00, 1.504669301565768e+01, 6.153717492183263e+00, 2.025036446913583e+03, 9.610322787727072e-20, 1.851590374273394e+03, 2.025036446913577e+03, 9.610322787727070e-20, 1.851590374273394e+03, -3.157783675659201e-02, 2.199677179191681e-03, -3.130772304512996e-02, -2.785957851985951e-02, 2.264286130145305e-03, -2.757637076436311e-02, -2.855488125872175e-02, 2.241303100651475e-03, -2.827552563886242e-02, -2.947138715168183e-02, 2.222568983976134e-03, -2.918819204375142e-02, -2.895322848260720e-02, 2.231922961512953e-03, -2.867152969282377e-02, -2.895322848260720e-02, 2.231922961512953e-03, -2.867152969282377e-02, -3.668418967941756e-02, 2.525278278664052e-03, -3.625158816800000e-02, -3.516351749990858e-02, 5.397863529116129e-03, -3.490659229835104e-02, -3.376360362177321e-02, 4.298036410666330e-03, -3.350068933607497e-02, -3.305174546730448e-02, 3.458400931093935e-03, -3.275285853554808e-02, -3.339578634636570e-02, 3.860241852276062e-03, -3.308720763100984e-02, -3.339578634636570e-02, 3.860241852276062e-03, -3.308720763100984e-02, -1.621589947754470e-02, 1.166454564355177e-03, -1.621972947183092e-02, -3.549514436335772e-01, 2.273047300256539e-01, -3.551700995872729e-01, -2.380594287532166e-01, 1.027440095908986e-01, -2.380595828294015e-01, -1.297716310165170e-01, 2.883676467546989e-02, -1.283818323462704e-01, -1.785032239496316e-01, 5.500747727544229e-02, -1.794387006430155e-01, -1.785032239496316e-01, 5.500747727544231e-02, -1.794387006430156e-01, -4.819286404300659e-02, 8.100714365057125e-03, -4.772065612684273e-02, 7.721158185221958e+01, 1.766533536733120e+01, 7.566819763162403e+01, 2.965255546496858e+01, 1.878803243082290e+01, 2.477995023791098e+01, -1.716194608861358e-01, 3.428914672188251e-02, -1.666507941024318e-01, -7.772617165212576e-01, 9.701438036301546e+00, -3.438066019183326e+00, -7.772617165212674e-01, 9.701438036301546e+00, -3.438066019183338e+00, 4.169925939288019e+02, 3.417478728614279e-04, 4.203561817452270e+02, 3.230950130902745e+03, 2.850114531961813e-85, 5.520343350275110e+03, 1.727852221737244e+03, 1.662312648545182e-36, 1.806340104275281e+03, -1.175741302240221e+00, 1.102889579754806e+01, -1.515761708028044e+00, 4.056058116881878e+03, 8.178814636871498e-22, 1.956981825777120e+03, 4.056058116881872e+03, 8.178814636871070e-22, 1.956981825777134e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
