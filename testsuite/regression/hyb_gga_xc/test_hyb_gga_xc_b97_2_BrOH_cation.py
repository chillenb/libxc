
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.671780649949785e+01, -1.671784345814984e+01, -1.671803717368379e+01, -1.671748671065428e+01, -1.671777095736400e+01, -1.671777095736400e+01, -2.801041616054391e+00, -2.801030185866471e+00, -2.800833919263087e+00, -2.801697379034561e+00, -2.801094316224478e+00, -2.801094316224478e+00, -5.830543092531441e-01, -5.828311496216362e-01, -5.793255148984151e-01, -5.832650263967190e-01, -5.857624051817667e-01, -5.857624051817667e-01, -1.831716120287169e-01, -1.841331765203716e-01, -6.715407666354556e-01, -1.577334976098541e-01, -1.696071584561759e-01, -1.696071584561758e-01, -6.551277530191412e-03, -6.965567547661935e-03, -4.873476941509403e-02, -3.510971791425417e-03, -8.561639091978242e-03, -8.561639091978242e-03, -4.112398335774962e+00, -4.112775797291723e+00, -4.112420202220406e+00, -4.112753318311265e+00, -4.112586912674247e+00, -4.112586912674247e+00, -1.685500225872336e+00, -1.693481448758914e+00, -1.686083092937386e+00, -1.692992364362114e+00, -1.689826411998727e+00, -1.689826411998727e+00, -5.017479604212955e-01, -5.363967041602955e-01, -4.679309044667052e-01, -4.786122980228981e-01, -5.086925322529264e-01, -5.086925322529265e-01, -1.249121412419321e-01, -1.992641241261668e-01, -1.169170210003850e-01, -1.542805780145138e+00, -1.353773495701949e-01, -1.353773495701949e-01, -2.657166157600185e-03, -3.423628693259663e-03, -2.586866718101600e-03, -8.020670846514101e-02, -4.317103643744692e-03, -4.317103643744698e-03, -4.997698019193449e-01, -4.956086945639665e-01, -4.966901540732497e-01, -4.978336554474592e-01, -4.972255763278138e-01, -4.972255763278138e-01, -4.885900025618698e-01, -4.342632101404209e-01, -4.464706619092388e-01, -4.599634437115410e-01, -4.528103773471294e-01, -4.528103773471294e-01, -5.609614930967406e-01, -2.345725373663770e-01, -2.626030567600666e-01, -3.153828887771212e-01, -2.857513221517816e-01, -2.857513221517816e-01, -4.021956091723993e-01, -4.622201753639886e-02, -6.496283777110474e-02, -3.003983325421700e-01, -9.887779246011234e-02, -9.887779246011237e-02, -9.593129830419413e-03, -8.307237448202522e-04, -1.857079711887270e-03, -9.377020225871500e-02, -3.784091434608322e-03, -3.784091434608315e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.141445644608173e+01, -2.141443213572597e+01, -2.141455813982179e+01, -2.141450606772670e+01, -2.141485355296522e+01, -2.141493710258808e+01, -2.141370486598802e+01, -2.141347385794243e+01, -2.141451929444684e+01, -2.141403577791202e+01, -2.141451929444684e+01, -2.141403577791202e+01, -3.489142747806968e+00, -3.489436074608279e+00, -3.489190892927679e+00, -3.489499474455168e+00, -3.490522438556899e+00, -3.490910618148120e+00, -3.488772044457814e+00, -3.489187069962087e+00, -3.488486055594921e+00, -3.490390589616021e+00, -3.488486055594921e+00, -3.490390589616021e+00, -6.828025449683771e-01, -6.890038718644029e-01, -6.805363066334225e-01, -6.881540453500968e-01, -6.487623384624512e-01, -6.380160660358668e-01, -6.478596696500653e-01, -6.514025765914914e-01, -6.966787210194483e-01, -5.923935898378768e-01, -6.966787210194483e-01, -5.923935898378768e-01, -1.784030049121639e-01, -1.697381271197633e-01, -1.824598212527344e-01, -1.737914638916995e-01, -7.816002729671094e-01, -8.188051252214583e-01, -1.344057679344197e-01, -1.310546504066288e-01, -1.016076617299286e-01, -2.922924485215029e-01, -1.016076617299285e-01, -2.922924485215033e-01, -6.859706246285913e-03, -1.076487949594521e-02, -7.008293417720495e-03, -1.163319465770516e-02, -5.731254106639204e-02, -6.824903391012815e-02, -5.118855760069878e-03, -4.458469414718700e-03, -1.531508388263728e-02, 9.575255630189839e-03, -1.531508388263727e-02, 9.575255630189789e-03, -5.340337088985630e+00, -5.339086533145380e+00, -5.342466101294158e+00, -5.341142021019245e+00, -5.340456158303663e+00, -5.339156950946159e+00, -5.342281836318199e+00, -5.341025657611004e+00, -5.341428807819002e+00, -5.340119238456060e+00, -5.341428807819002e+00, -5.340119238456060e+00, -1.777128571840512e+00, -1.777036884454034e+00, -1.798521869770771e+00, -1.797936556698567e+00, -1.742744807937249e+00, -1.752400519598517e+00, -1.761594549828229e+00, -1.771218976998572e+00, -1.813606223466705e+00, -1.792013917694024e+00, -1.813606223466705e+00, -1.792013917694024e+00, -6.317173225268375e-01, -6.306832301549701e-01, -7.044986536930339e-01, -7.051380939955012e-01, -5.745938719687144e-01, -5.917367010885737e-01, -6.174215449248053e-01, -6.314400615122450e-01, -6.553955387534106e-01, -6.311808903652406e-01, -6.553955387534107e-01, -6.311808903652408e-01, -1.203702822231909e-01, -1.168994733575222e-01, -1.647522780165864e-01, -1.631425265524112e-01, -1.172049838557493e-01, -1.117901096166228e-01, -2.036251866861837e+00, -2.035494482864650e+00, -1.397114963949177e-01, -9.862258184376813e-02, -1.397114963949177e-01, -9.862258184376813e-02, -2.988483401197201e-03, -4.182373988567870e-03, -4.379910328069807e-03, -4.959864505267470e-03, -2.587867457413629e-03, -4.304806549312928e-03, -9.060011270056927e-02, -9.264844160420492e-02, 2.088896069433592e-03, -8.865709327308464e-03, 2.088896069433604e-03, -8.865709327308477e-03, -6.613738608246732e-01, -6.633175040695962e-01, -6.505286666938715e-01, -6.525983492508672e-01, -6.542725781333113e-01, -6.563448141525317e-01, -6.575409946722629e-01, -6.595317726373747e-01, -6.558983381413641e-01, -6.579305219522742e-01, -6.558983381413641e-01, -6.579305219522742e-01, -6.456946408129691e-01, -6.472039175558584e-01, -5.151067869395951e-01, -5.170636316198012e-01, -5.524963327620654e-01, -5.547607693510793e-01, -5.885206240161541e-01, -5.901475205265211e-01, -5.705266894082326e-01, -5.721773053079757e-01, -5.705266894082326e-01, -5.721773053079757e-01, -7.352791956281383e-01, -7.367890187119677e-01, -2.056889519131435e-01, -2.042823889509238e-01, -2.571623961148878e-01, -2.568840951866366e-01, -3.698142725962397e-01, -3.710641090551993e-01, -3.104807581680029e-01, -3.108223807101220e-01, -3.104807581680029e-01, -3.108223807101220e-01, -4.756051008569346e-01, -4.785992292443134e-01, -5.993617233237673e-02, -6.132856474735838e-02, -7.760437668716610e-02, -8.308956874667281e-02, -3.643119413158487e-01, -3.682137162192207e-01, -1.083540010484648e-01, -9.202175325784263e-02, -1.083540010484646e-01, -9.202175325784248e-02, -1.157493568244834e-02, -1.466103446383807e-02, -1.108624916396584e-03, -1.133844008052343e-03, -1.761363548363591e-03, -3.151209502230815e-03, -9.774622473470247e-02, -9.819162052098580e-02, 1.351894018014344e-03, -7.855590677862510e-03, 1.351894018014354e-03, -7.855590677862513e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.280683886829493e-09, 0.000000000000000e+00, -4.280698202828339e-09, -4.280535134933738e-09, 0.000000000000000e+00, -4.280591160239511e-09, -4.280176812779096e-09, 0.000000000000000e+00, -4.280040100528166e-09, -4.281841220708073e-09, 0.000000000000000e+00, -4.282176909760950e-09, -4.280576545898818e-09, 0.000000000000000e+00, -4.281417336728305e-09, -4.280576545898818e-09, 0.000000000000000e+00, -4.281417336728305e-09, -7.259462275978625e-06, 0.000000000000000e+00, -7.253654033247520e-06, -7.258756967125636e-06, 0.000000000000000e+00, -7.252608679131324e-06, -7.238012796841882e-06, 0.000000000000000e+00, -7.231451970396510e-06, -7.269255749131606e-06, 0.000000000000000e+00, -7.262059465962407e-06, -7.266782469306605e-06, 0.000000000000000e+00, -7.242867287891794e-06, -7.266782469306605e-06, 0.000000000000000e+00, -7.242867287891794e-06, -5.995515169154031e-03, 0.000000000000000e+00, -5.719743932309435e-03, -6.076608664751924e-03, 0.000000000000000e+00, -5.738603940226863e-03, -6.999800378610776e-03, 0.000000000000000e+00, -7.448810840654411e-03, -7.042450282029328e-03, 0.000000000000000e+00, -6.899876763313699e-03, -4.862213680868923e-03, 0.000000000000000e+00, -9.054464778782415e-03, -4.862213680868923e-03, 0.000000000000000e+00, -9.054464778782415e-03, -9.972330665711836e-01, 0.000000000000000e+00, -1.066655272176873e+00, -9.472311733782932e-01, 0.000000000000000e+00, -1.011458616903498e+00, -3.521705355507797e-03, 0.000000000000000e+00, -2.736748675086833e-03, -2.155237377395240e+00, 0.000000000000000e+00, -2.228229595294447e+00, -1.847720060913377e+00, 0.000000000000000e+00, 1.241054031501315e+01, -1.847720060913377e+00, 0.000000000000000e+00, 1.241054031501317e+01, 2.830925569708466e-02, 0.000000000000000e+00, -9.126019189569659e+00, 7.578715595672423e-01, 0.000000000000000e+00, -1.031069539428399e+01, -3.543478576702751e+00, 0.000000000000000e+00, -7.105488121070934e+00, -5.200777671826468e+00, 0.000000000000000e+00, -2.121643197803003e+00, -2.174102692786824e+01, 0.000000000000000e+00, 1.777147707079441e+02, -2.174102692786910e+01, 0.000000000000000e+00, 1.777147707082230e+02, -9.873893492852225e-07, 0.000000000000000e+00, -9.886035394671035e-07, -9.813816053846033e-07, 0.000000000000000e+00, -9.828169149872399e-07, -9.870681147018329e-07, 0.000000000000000e+00, -9.884258867566056e-07, -9.819306835774587e-07, 0.000000000000000e+00, -9.831506687464681e-07, -9.842934812811199e-07, 0.000000000000000e+00, -9.856999679959336e-07, -9.842934812811199e-07, 0.000000000000000e+00, -9.856999679959336e-07, -1.059034361421400e-04, 0.000000000000000e+00, -1.059250224418362e-04, -1.020599712988122e-04, 0.000000000000000e+00, -1.021825216757526e-04, -1.108336623720124e-04, 0.000000000000000e+00, -1.093521662341707e-04, -1.073661763676353e-04, 0.000000000000000e+00, -1.058970124407674e-04, -1.001208203932318e-04, 0.000000000000000e+00, -1.035411104142574e-04, -1.001208203932318e-04, 0.000000000000000e+00, -1.035411104142574e-04, -7.739766244419599e-03, 0.000000000000000e+00, -7.799563891124280e-03, -5.504181812015197e-04, 0.000000000000000e+00, -2.996343370608817e-04, -1.222650126216148e-02, 0.000000000000000e+00, -1.003378872927947e-02, -4.043768253148026e-03, 0.000000000000000e+00, -3.616609379167027e-03, -6.213737778113706e-03, 0.000000000000000e+00, -7.884192423355038e-03, -6.213737778113702e-03, 0.000000000000000e+00, -7.884192423355040e-03, -3.425589639994758e+00, 0.000000000000000e+00, -3.759049320694153e+00, -9.401371652555571e-01, 0.000000000000000e+00, -9.484007651434057e-01, -3.305567890248728e+00, 0.000000000000000e+00, -4.631474668125581e+00, -1.617268972200943e-05, 0.000000000000000e+00, -1.611461720487227e-05, -2.281695615690619e+00, 0.000000000000000e+00, -4.501516573452961e+00, -2.281695615690619e+00, 0.000000000000000e+00, -4.501516573452961e+00, -2.513407736099695e+00, 0.000000000000000e+00, -5.950770006339047e+00, -4.023069916605797e+00, 0.000000000000000e+00, -4.555474584702740e+00, 1.827839937968034e+01, 0.000000000000000e+00, -6.244922565663197e+01, -6.357519407094495e+00, 0.000000000000000e+00, -6.228171623634757e+00, 1.205655759481229e+02, 0.000000000000000e+00, -5.965291016903949e+01, 1.205655759480612e+02, 0.000000000000000e+00, -5.965291016905004e+01, 1.663278448087634e-02, 0.000000000000000e+00, 1.697401165385268e-02, -1.610912035147816e-05, 0.000000000000000e+00, 2.606443720153495e-04, 3.260390290560500e-03, 0.000000000000000e+00, 3.587520403043753e-03, 7.595420048661427e-03, 0.000000000000000e+00, 7.874063135092148e-03, 5.187871802373477e-03, 0.000000000000000e+00, 5.495522697053474e-03, 5.187871802373477e-03, 0.000000000000000e+00, 5.495522697053474e-03, 3.551319712927031e-02, 0.000000000000000e+00, 3.519530074977051e-02, -1.912862798312833e-02, 0.000000000000000e+00, -1.872483381371553e-02, -1.409510896139518e-02, 0.000000000000000e+00, -1.369059539461437e-02, -9.317462730068537e-03, 0.000000000000000e+00, -9.095620091696502e-03, -1.175941696347431e-02, 0.000000000000000e+00, -1.151755490551773e-02, -1.175941696347431e-02, 0.000000000000000e+00, -1.151755490551773e-02, -1.081045385135102e-03, 0.000000000000000e+00, -8.076540488539053e-04, -4.536562751217639e-01, 0.000000000000000e+00, -4.552478124507059e-01, -2.395327482322420e-01, 0.000000000000000e+00, -2.370811698184664e-01, -7.397012244803675e-02, 0.000000000000000e+00, -7.253210955299216e-02, -1.359728941652650e-01, 0.000000000000000e+00, -1.354951290667213e-01, -1.359728941652651e-01, 0.000000000000000e+00, -1.354951290667214e-01, -2.659478476230671e-02, 0.000000000000000e+00, -2.565436952964663e-02, -4.770970343509736e+00, 0.000000000000000e+00, -5.188840868199841e+00, -4.182245297187045e+00, 0.000000000000000e+00, -6.143326725826824e+00, -8.099387647066243e-02, 0.000000000000000e+00, -7.526759721691023e-02, -3.892330270512439e+00, 0.000000000000000e+00, -8.530727262566907e+00, -3.892330270512441e+00, 0.000000000000000e+00, -8.530727262566909e+00, -2.197564519591139e+00, 0.000000000000000e+00, -6.838574964471208e+00, 1.696329147595272e+01, 0.000000000000000e+00, -5.970308775254639e+01, 8.004707586307548e+00, 0.000000000000000e+00, -2.219835991047254e+01, -6.268744736000921e+00, 0.000000000000000e+00, -6.899253677754524e+00, 1.210310615925967e+02, 0.000000000000000e+00, -4.943379332155688e+01, 1.210310615924415e+02, 0.000000000000000e+00, -4.943379332156119e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
