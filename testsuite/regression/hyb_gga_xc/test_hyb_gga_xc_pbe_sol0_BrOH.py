
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_sol0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_sol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.541704773579129e+01, -1.541707364197698e+01, -1.541723310411719e+01, -1.541680800897638e+01, -1.541706103096327e+01, -1.541706103096327e+01, -2.579557951057289e+00, -2.579550592848118e+00, -2.579453012272035e+00, -2.580158160238754e+00, -2.579564947105011e+00, -2.579564947105011e+00, -5.329542767875887e-01, -5.326019441808763e-01, -5.245983172063687e-01, -5.281822298082917e-01, -5.328247587499884e-01, -5.328247587499884e-01, -1.637729452165718e-01, -1.653915584096365e-01, -6.277590739444348e-01, -1.288192242365449e-01, -1.642500387893057e-01, -1.642500387893057e-01, -1.273058724121762e-02, -1.332883753370820e-02, -5.177037896685952e-02, -6.129373526405699e-03, -1.319006180916882e-02, -1.319006180916882e-02, -3.778231375184293e+00, -3.778428295407930e+00, -3.778254652124440e+00, -3.778407704717353e+00, -3.778327619408770e+00, -3.778327619408770e+00, -1.528009219358946e+00, -1.536334012308014e+00, -1.526924502678237e+00, -1.533392482974788e+00, -1.535125727645896e+00, -1.535125727645896e+00, -4.639473605316059e-01, -5.021198839428859e-01, -4.420637778827244e-01, -4.603543285275603e-01, -4.803147858256639e-01, -4.803147858256639e-01, -1.032761507079372e-01, -1.710304483445350e-01, -1.013912615327364e-01, -1.425376484245636e+00, -1.137253882579987e-01, -1.137253882579987e-01, -5.913140827515015e-03, -6.756018643033064e-03, -5.063945434864203e-03, -6.916876114238317e-02, -6.155720530944650e-03, -6.155720530944650e-03, -4.803603406072300e-01, -4.768546529226490e-01, -4.780675536667224e-01, -4.790366458676301e-01, -4.785481037671616e-01, -4.785481037671616e-01, -4.664557525999773e-01, -4.076023243609335e-01, -4.232210707554033e-01, -4.387241113856917e-01, -4.306886737041963e-01, -4.306886737041963e-01, -5.243266062022431e-01, -2.066510767213141e-01, -2.375732628376527e-01, -2.928528638229481e-01, -2.631063395497907e-01, -2.631063395497906e-01, -3.707100858003796e-01, -4.844072163303270e-02, -6.356400500619812e-02, -2.777659565725141e-01, -8.558225035830028e-02, -8.558225035830028e-02, -1.490747368056765e-02, -1.851505803031750e-03, -3.516297734593295e-03, -8.159846881227746e-02, -5.232280931574118e-03, -5.232280931574108e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_sol0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_sol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.936239484603700e+01, -1.936245582672763e+01, -1.936274154728435e+01, -1.936174269339901e+01, -1.936242689089639e+01, -1.936242689089639e+01, -3.217606697845224e+00, -3.217634441649682e+00, -3.218524873159339e+00, -3.217649533352899e+00, -3.217634212923799e+00, -3.217634212923799e+00, -6.634062770491356e-01, -6.623132376000234e-01, -6.326398746403236e-01, -6.378995594291923e-01, -6.630100652650982e-01, -6.630100652650982e-01, -1.972184533604659e-01, -2.009143970603579e-01, -7.962624589075609e-01, -1.373211207052523e-01, -1.983458892662710e-01, -1.983458892662710e-01, -1.682373169154092e-02, -1.759908914118700e-02, -6.286595191765754e-02, -8.158266274389444e-03, -1.741617968051112e-02, -1.741617968051112e-02, -4.856590709848390e+00, -4.858339760701034e+00, -4.856770214962040e+00, -4.858130198662752e+00, -4.857486823481803e+00, -4.857486823481803e+00, -1.763712326173206e+00, -1.778200766680189e+00, -1.755243232378080e+00, -1.766535642751446e+00, -1.784581742932719e+00, -1.784581742932719e+00, -6.044939971946596e-01, -6.599757411362042e-01, -5.755122391686281e-01, -6.053026860360008e-01, -6.274569574656678e-01, -6.274569574656678e-01, -1.090460528897439e-01, -1.864577278840233e-01, -1.069079025775634e-01, -1.878373008725932e+00, -1.192353881979535e-01, -1.192353881979535e-01, -7.871025689676056e-03, -8.988385719101665e-03, -6.737937875098835e-03, -7.868221592366416e-02, -8.189575368745310e-03, -8.189575368745308e-03, -6.287768633139157e-01, -6.263317441273980e-01, -6.273455606385079e-01, -6.280272438986749e-01, -6.276975854267007e-01, -6.276975854267007e-01, -6.098752632544575e-01, -5.213947018288700e-01, -5.505852713250381e-01, -5.759393138420432e-01, -5.633672220070526e-01, -5.633672220070526e-01, -6.894481845651206e-01, -2.356626101508850e-01, -2.856685979732344e-01, -3.759015679893153e-01, -3.290253342038725e-01, -3.290253342038724e-01, -4.740349787169303e-01, -5.987208442973185e-02, -7.458410124928147e-02, -3.626211617140973e-01, -9.199338052049234e-02, -9.199338052049238e-02, -1.966756544137279e-02, -2.468142852401855e-03, -4.685021142927872e-03, -8.780678291902132e-02, -6.962974437738605e-03, -6.962974437738595e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_sol0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_sol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.970718263437708e-09, -2.970691404891647e-09, -2.970548477024946e-09, -2.970988752101641e-09, -2.970704292315929e-09, -2.970704292315929e-09, -3.289540540110615e-06, -3.289426553160687e-06, -3.285777281583155e-06, -3.289455843054987e-06, -3.289429824383014e-06, -3.289429824383014e-06, -1.275107490505604e-03, -1.289676466935697e-03, -1.666523095462816e-03, -1.612470207125101e-03, -1.280375825410822e-03, -1.280375825410822e-03, -1.365534690063657e-01, -1.230468067003880e-01, -5.630217731633429e-04, -4.991444812638214e-01, -1.323491018965386e-01, -1.323491018965386e-01, -6.712422647384605e+00, -6.719958189677776e+00, -2.448438091019116e+00, -4.821189865838083e+00, -6.980816881583058e+00, -6.980816881583058e+00, -6.460437099920349e-07, -6.442300584063000e-07, -6.458608805916682e-07, -6.444507912625850e-07, -6.451131181943281e-07, -6.451131181943281e-07, -3.052288048340549e-05, -2.974211839009417e-05, -3.081408458277155e-05, -3.020095415647930e-05, -2.960634184945174e-05, -2.960634184945174e-05, -3.521659576524250e-04, 1.555079370715961e-03, -4.601775777939203e-04, 1.674061108519347e-03, -1.135195871321557e-04, -1.135195871321557e-04, -9.049670551013289e-01, -1.665893584226917e-01, -1.005139780598370e+00, -1.637810085744983e-06, -7.649660956971117e-01, -7.649660956971117e-01, -5.115274633133708e+00, -5.120293483480239e+00, -1.465442724006773e+01, -2.089987406161689e+00, -7.561773932119395e+00, -7.561773932118818e+00, 3.019161754716978e-03, 2.191372305274047e-03, 2.469122790509996e-03, 2.697922899296913e-03, 2.581940604052381e-03, 2.581940604052381e-03, 3.642336925026697e-03, -2.132369073898847e-03, -5.787647726197640e-04, 9.140907147966101e-04, 1.616853930253050e-04, 1.616853930253102e-04, 1.158317426185852e-03, -7.268079583974288e-02, -3.385230972461439e-02, -5.653292523996746e-03, -1.600299647715591e-02, -1.600299647715591e-02, -2.976639488687705e-03, -2.139584297924420e+00, -1.939190319930249e+00, 1.274520241273641e-03, -1.643389745410696e+00, -1.643389745410694e+00, -5.029641353443770e+00, -8.846207592204410e+00, -7.607136742843717e+00, -1.993308170263747e+00, -1.104892019723934e+01, -1.104892019723920e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
