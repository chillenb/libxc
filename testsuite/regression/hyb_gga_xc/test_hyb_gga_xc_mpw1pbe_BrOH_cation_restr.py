
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.585472562432549e+01, -1.585474649942154e+01, -1.585489012589310e+01, -1.585457849884593e+01, -1.585473455784946e+01, -1.585473455784946e+01, -2.662928773773802e+00, -2.662905125952171e+00, -2.662422924760254e+00, -2.663759593640922e+00, -2.662963636926040e+00, -2.662963636926040e+00, -5.535238312451952e-01, -5.532902893354945e-01, -5.490637747005175e-01, -5.529238752438973e-01, -5.516843218733636e-01, -5.516843218733636e-01, -1.694954961565969e-01, -1.706599974121604e-01, -6.373756053398123e-01, -1.445889942296409e-01, -1.532265358076152e-01, -1.532265358076153e-01, -6.408858555220710e-04, -7.563451415624669e-04, -4.172360902565420e-02, -1.347575430671372e-04, -2.814401335243649e-04, -2.814401335243647e-04, -3.855357349968843e+00, -3.855037955053611e+00, -3.855350066979091e+00, -3.855067982031827e+00, -3.855191264719209e+00, -3.855191264719209e+00, -1.614240767079915e+00, -1.622188019553581e+00, -1.614087498700935e+00, -1.621086419719190e+00, -1.618727261943042e+00, -1.618727261943042e+00, -4.770698780725354e-01, -5.096498704852853e-01, -4.449564929494328e-01, -4.560448278764246e-01, -4.832620939960502e-01, -4.832620939960502e-01, -1.174332758276432e-01, -1.812934475355590e-01, -1.107967451917113e-01, -1.436547660347767e+00, -1.258534748521838e-01, -1.258534748521838e-01, -7.439834239504834e-05, -1.359926026336803e-04, -1.455986232793688e-04, -7.944641938665639e-02, -1.738566100295541e-04, -1.738566100295543e-04, -4.740810011644566e-01, -4.718602293370369e-01, -4.726154601657770e-01, -4.732678118053653e-01, -4.729385831892224e-01, -4.729385831892224e-01, -4.622299296316194e-01, -4.122974792678299e-01, -4.248224713405981e-01, -4.383973964362036e-01, -4.312411602930812e-01, -4.312411602930812e-01, -5.324457623574089e-01, -2.151424887329822e-01, -2.441875897133093e-01, -2.992822076555203e-01, -2.688436745607702e-01, -2.688436745607701e-01, -3.818451830338856e-01, -3.792132871689389e-02, -6.176467799110778e-02, -2.865603590160823e-01, -9.596488655757919e-02, -9.596488655757919e-02, -1.506913104602841e-03, -7.239649429091438e-06, -4.042527679381766e-05, -9.172535535245695e-02, -1.555069306375488e-04, -1.555069306375510e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.903832193365142e+01, -1.903839365909327e+01, -1.903869836678034e+01, -1.903763153811076e+01, -1.903819254385347e+01, -1.903819254385347e+01, -3.154305898373153e+00, -3.154340881833023e+00, -3.155225025059770e+00, -3.154268236407957e+00, -3.154421420687889e+00, -3.154421420687889e+00, -6.544573545792076e-01, -6.532625682227563e-01, -6.235660948922438e-01, -6.289210337736143e-01, -6.283300266541041e-01, -6.283300266541041e-01, -1.724505150722783e-01, -1.762919477221232e-01, -7.576893647734553e-01, -1.281850263778655e-01, -1.435711921871109e-01, -1.435711921871108e-01, -2.359044619651164e-03, -2.781808915529401e-03, -9.433444993722422e-02, -4.957997088587074e-04, -1.036890773640563e-03, -1.036890773640563e-03, -4.783072938964640e+00, -4.785138149690898e+00, -4.783165459611985e+00, -4.784988638812225e+00, -4.784120818408808e+00, -4.784120818408808e+00, -1.731310802807512e+00, -1.745678566003956e+00, -1.717347294991634e+00, -1.729974993748565e+00, -1.746099693161900e+00, -1.746099693161900e+00, -6.009010224120801e-01, -6.634541819021198e-01, -5.576059217250710e-01, -5.920131773633047e-01, -6.119948560386473e-01, -6.119948560386473e-01, -1.082934714483342e-01, -1.654990695203815e-01, -1.056574672500392e-01, -1.866165464038433e+00, -1.094835453324332e-01, -1.094835453324332e-01, -2.733523286855951e-04, -5.004028526201941e-04, -5.362936244662175e-04, -1.005054951640028e-01, -6.403656698283244e-04, -6.403656698283291e-04, -6.183645745937817e-01, -6.144345978948267e-01, -6.161126358357761e-01, -6.172732902962864e-01, -6.167239172836012e-01, -6.167239172836012e-01, -6.030008159565835e-01, -4.977023243283919e-01, -5.307261379068848e-01, -5.624660241916242e-01, -5.466081004502976e-01, -5.466081004502976e-01, -6.925330808029913e-01, -2.099908476831050e-01, -2.593287866290205e-01, -3.630945253589611e-01, -3.080711757878027e-01, -3.080711757878028e-01, -4.618775221380271e-01, -9.119568720407989e-02, -1.076027937932855e-01, -3.591507824722252e-01, -9.382808019279804e-02, -9.382808019279801e-02, -5.510491647993747e-03, -2.646374262354217e-05, -1.483554145456934e-04, -9.410049351103789e-02, -5.727332019622877e-04, -5.727332019622849e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.277310861170053e-09, -5.277282082896832e-09, -5.277088706433043e-09, -5.277518222211633e-09, -5.277302463934028e-09, -5.277302463934028e-09, -6.125919157041071e-06, -6.126014484746057e-06, -6.127632741728756e-06, -6.120342377183682e-06, -6.125466262995778e-06, -6.125466262995778e-06, -2.681644455518494e-03, -2.696922909768150e-03, -3.050187037806648e-03, -2.958974404311871e-03, -2.976786415506296e-03, -2.976786415506296e-03, -3.832131753584633e-01, -3.627766180337345e-01, -1.539994857473713e-03, -8.682069737917554e-01, -6.480958899220691e-01, -6.480958899220693e-01, 2.223191271336019e+02, 2.310271437001913e+02, 2.320812530135464e+01, 2.309521238248857e+02, 2.746927935409497e+02, 2.746927935409505e+02, -1.369481786314854e-06, -1.368868027933813e-06, -1.369448586576850e-06, -1.368907078515533e-06, -1.369175508119231e-06, -1.369175508119231e-06, -4.797588860580321e-05, -4.691426734675823e-05, -4.833129645885621e-05, -4.738667239110889e-05, -4.721259168336139e-05, -4.721259168336139e-05, -3.328833360614087e-03, -8.729910201962787e-04, -4.502235623938524e-03, -1.596595076040415e-03, -2.985069709784910e-03, -2.985069709784910e-03, -1.622649330354742e+00, -3.415131629022177e-01, -1.830409613040264e+00, -4.148801914164327e-05, -1.505555119864971e+00, -1.505555119864971e+00, 3.179203288545960e+02, 2.706929527342527e+02, 1.627417659115922e+03, -8.590378449639435e-01, 7.582009052141019e+02, 7.582009052141153e+02, -5.818063324020233e-04, -9.182003832930146e-04, -6.191261401506040e-04, -4.571608543949019e-04, -5.201097418391035e-04, -5.201097418391035e-04, -3.534676573538065e-04, -7.599498805938191e-03, -5.477930270611522e-03, -3.275975934461051e-03, -4.405330128701221e-03, -4.405330128701221e-03, -8.941375223765367e-04, -1.583125748239607e-01, -8.325672150493692e-02, -2.460295869952678e-02, -4.733842285561291e-02, -4.733842285561295e-02, -1.004174350202718e-02, 2.642394438436286e+01, 6.642771294694693e+00, -2.174000162936918e-02, -2.976800811248109e+00, -2.976800811248113e+00, 1.654017965142038e+02, 1.653504113410925e+03, 6.989518590418440e+02, -2.925455073427095e+00, 9.619003717063867e+02, 9.619003717063836e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
