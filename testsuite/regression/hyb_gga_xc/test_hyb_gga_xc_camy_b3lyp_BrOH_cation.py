
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_b3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.705774060041885e+01, -1.705776258761528e+01, -1.705791610082719e+01, -1.705758782635179e+01, -1.705775190821495e+01, -1.705775190821495e+01, -2.814497409858593e+00, -2.814468693829726e+00, -2.813874297493008e+00, -2.815446245942859e+00, -2.814531521890562e+00, -2.814531521890562e+00, -5.362293719485557e-01, -5.360322703532713e-01, -5.320467821854933e-01, -5.362276874575793e-01, -5.352919319223450e-01, -5.352919319223450e-01, -1.256960609849714e-01, -1.276764211727213e-01, -6.265893420281170e-01, -9.175777452988333e-02, -1.174238196089691e-01, -1.174238196089690e-01, -2.428959615777062e-02, -2.436068335245482e-02, -4.327182493122762e-02, -2.180418423977867e-02, -2.195682682601642e-02, -2.195682682601641e-02, -4.091507232539283e+00, -4.090996135152380e+00, -4.091492537232755e+00, -4.091041205154466e+00, -4.091243370266230e+00, -4.091243370266230e+00, -1.687071305499164e+00, -1.695691720028409e+00, -1.686841627699563e+00, -1.694460395517212e+00, -1.691952153111346e+00, -1.691952153111346e+00, -4.489214766637928e-01, -4.730543921939874e-01, -4.157800686489304e-01, -4.186300156374076e-01, -4.550351088028124e-01, -4.550351088028125e-01, -5.999067806700798e-02, -1.267310525343160e-01, -5.615821739271451e-02, -1.464262648268908e+00, -7.285993012274219e-02, -7.285993012274219e-02, -1.958533323107456e-02, -2.101917639564041e-02, -1.385471740229559e-02, -4.529106614458047e-02, -1.676479901323769e-02, -1.676479901323770e-02, -4.313317545096438e-01, -4.329053304640005e-01, -4.323950882199266e-01, -4.319355651541870e-01, -4.321688459902806e-01, -4.321688459902806e-01, -4.177781451251393e-01, -3.837921764217858e-01, -3.946128474920334e-01, -4.043292836676085e-01, -3.993755899177487e-01, -3.993755899177487e-01, -4.977869901464699e-01, -1.663518214040498e-01, -2.023963832870722e-01, -2.637936967770257e-01, -2.315157297497049e-01, -2.315157297497049e-01, -3.512539567945368e-01, -4.349529772673898e-02, -4.397184900472294e-02, -2.491251384555320e-01, -5.122580467457337e-02, -5.122580467457337e-02, -2.768907519814615e-02, -1.193184772645150e-02, -1.576148259460985e-02, -4.917195599191522e-02, -1.576877137715639e-02, -1.576877137715638e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_b3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.044563263927245e+01, -2.044560839117251e+01, -2.044572109048224e+01, -2.044567291903441e+01, -2.044598815916016e+01, -2.044605849765911e+01, -2.044498597971524e+01, -2.044478523778685e+01, -2.044568352638599e+01, -2.044528386715869e+01, -2.044568352638599e+01, -2.044528386715869e+01, -3.304703983950504e+00, -3.304781968686725e+00, -3.304732318690128e+00, -3.304811989233469e+00, -3.305438118399469e+00, -3.305617760105845e+00, -3.304752503567580e+00, -3.304927617222587e+00, -3.304150773774128e+00, -3.305563682045951e+00, -3.304150773774128e+00, -3.305563682045951e+00, -6.325914535587041e-01, -6.341879137129359e-01, -6.316420862877302e-01, -6.335786429023644e-01, -6.155954764167866e-01, -6.137268148326239e-01, -6.194267108224634e-01, -6.200167147008556e-01, -6.301393031613802e-01, -6.127595031397111e-01, -6.301393031613802e-01, -6.127595031397111e-01, -1.648185234488203e-01, -1.651780615423369e-01, -1.662326154605986e-01, -1.668296408677828e-01, -7.304656505542220e-01, -7.490765339025376e-01, -1.338755610676438e-01, -1.342991619360800e-01, -1.378573060438540e-01, -1.464893479902586e-01, -1.378573060438540e-01, -1.464893479902586e-01, -8.437167683471096e-03, -8.252225488268976e-03, -8.682210074428199e-03, -8.453459275025416e-03, -2.832093641751083e-02, -2.837567599270381e-02, -6.115908518008205e-03, -6.160962548061407e-03, -6.534613101599801e-03, -6.847113279469882e-03, -6.534613101599788e-03, -6.847113279469878e-03, -5.039444415086319e+00, -5.038246049953482e+00, -5.041453432364811e+00, -5.040190405358846e+00, -5.039555152038799e+00, -5.038314187810547e+00, -5.041281649145796e+00, -5.040077752708535e+00, -5.040472459466774e+00, -5.039222973686280e+00, -5.040472459466774e+00, -5.039222973686280e+00, -1.815633265646414e+00, -1.815554187876339e+00, -1.829894134115241e+00, -1.829459740287147e+00, -1.802355501791369e+00, -1.805173160894440e+00, -1.814635452589949e+00, -1.817620037868277e+00, -1.832968950214428e+00, -1.825430699952254e+00, -1.832968950214428e+00, -1.825430699952254e+00, -5.590932661663295e-01, -5.580221154403529e-01, -6.188451271872092e-01, -6.192098207803715e-01, -5.083096044977359e-01, -5.216815211585191e-01, -5.376793206424861e-01, -5.508456525025567e-01, -5.792619553935668e-01, -5.576842677849944e-01, -5.792619553935668e-01, -5.576842677849945e-01, -9.962598485972231e-02, -9.942073216659057e-02, -1.782053801805181e-01, -1.782718865396494e-01, -8.990762960056710e-02, -9.118054117355716e-02, -1.889562056848921e+00, -1.888825029470350e+00, -1.122789987543514e-01, -1.084718889577203e-01, -1.122789987543514e-01, -1.084718889577203e-01, -5.156486477122886e-03, -5.200727397999803e-03, -5.940111845332938e-03, -5.969235095836128e-03, -4.273680127876577e-03, -4.153300359293360e-03, -5.255884272085359e-02, -5.295610182112434e-02, -5.309708555806273e-03, -4.883172557520761e-03, -5.309708555806284e-03, -4.883172557520761e-03, -5.748201339301249e-01, -5.765944465032251e-01, -5.673888213636135e-01, -5.691580096626294e-01, -5.698745406727285e-01, -5.716591385083164e-01, -5.720386994164018e-01, -5.738001166882779e-01, -5.709447903938707e-01, -5.727176475406318e-01, -5.709447903938707e-01, -5.727176475406318e-01, -5.602752242839621e-01, -5.617052741462919e-01, -4.633881975651770e-01, -4.646529909095309e-01, -4.874165166967544e-01, -4.889396437051471e-01, -5.140409475694566e-01, -5.153916657080752e-01, -5.001898170726520e-01, -5.015358108745258e-01, -5.001898170726520e-01, -5.015358108745258e-01, -6.485333748719926e-01, -6.495942142287648e-01, -2.172419538954242e-01, -2.173212508863607e-01, -2.518468815482101e-01, -2.521254085836717e-01, -3.243361763149415e-01, -3.252942770751909e-01, -2.839670470881056e-01, -2.837730991263104e-01, -2.839670470881056e-01, -2.837730991263105e-01, -4.256761680185365e-01, -4.274211636185392e-01, -2.723622631286246e-02, -2.723354603812615e-02, -3.936757193708119e-02, -3.980329088766631e-02, -3.109633900825038e-01, -3.135951300315470e-01, -7.128585996019310e-02, -7.039920496175717e-02, -7.128585996019307e-02, -7.039920496175714e-02, -1.063453999354208e-02, -1.044982415527168e-02, -2.650308457004065e-03, -2.447024497832151e-03, -4.014645271226564e-03, -3.938895937255394e-03, -6.540221318748769e-02, -6.587257621316324e-02, -4.713425003649930e-03, -4.676733539716723e-03, -4.713425003649933e-03, -4.676733539716716e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_b3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.165448132406953e-08, 1.185558425401183e-11, -1.165454725224997e-08, -1.165441661259771e-08, 1.185541524986055e-11, -1.165449974095438e-08, -1.165406372187981e-08, 1.185461176244829e-11, -1.165403758795032e-08, -1.165480412351570e-08, 1.185712748825859e-11, -1.165497341681973e-08, -1.165445321093529e-08, 1.185581677785285e-11, -1.165449092084948e-08, -1.165445321093529e-08, 1.185581677785285e-11, -1.165449092084948e-08, -1.463758010458303e-05, 1.541225587214213e-07, -1.464311852268307e-05, -1.463800647022822e-05, 1.541207867069750e-07, -1.464395468107102e-05, -1.465239798899106e-05, 1.540597121148743e-07, -1.465595293078166e-05, -1.461804396924295e-05, 1.540100170374724e-07, -1.462258095201493e-05, -1.464447070973123e-05, 1.541018002171290e-07, -1.463496050132432e-05, -1.464447070973123e-05, 1.541018002171290e-07, -1.463496050132432e-05, -7.087077804876584e-03, 9.270722799357577e-04, -7.152879468624249e-03, -7.077626685660365e-03, 9.324368204854546e-04, -7.158308096078324e-03, -7.072038364459460e-03, 1.069807695322527e-03, -6.956785295767778e-03, -6.822811941104065e-03, 1.024962868820697e-03, -6.861432259951679e-03, -7.434240203613404e-03, 1.115015704194649e-03, -6.220598100758200e-03, -7.434240203613404e-03, 1.115015704194649e-03, -6.220598100758200e-03, -3.684032321828747e-01, 4.870430005817489e-01, -4.000782965013329e-01, -3.715924169620470e-01, 4.601020753985704e-01, -4.028427388526561e-01, -4.204292187286953e-03, 4.311409659161154e-04, -4.137203059765860e-03, -4.228690364033806e-01, 1.357480112752327e+00, -4.466487167212096e-01, -6.669095981034658e-01, 1.929431429665579e+00, -1.234748705910971e+00, -6.669095981034652e-01, 1.929431429665580e+00, -1.234748705910975e+00, -7.783772521588781e+03, 9.006507517295055e-08, -6.520343366474097e+03, -6.907595943535325e+03, 3.695673560289628e-07, -5.662100836997572e+03, -3.633201092682567e+01, 1.489288214502471e+01, -3.113388587306893e+01, -3.281511289075365e+04, 3.350885389426989e-17, -3.417851007816916e+04, -1.079860481830583e+04, 8.673770695270562e-13, -7.098237310533602e+04, -1.079860481830584e+04, 8.673770695270562e-13, -7.098237310533598e+04, -3.412165847555624e-06, 1.809299517292379e-08, -3.415049685019452e-06, -3.414724994203306e-06, 1.807545599629114e-08, -3.417521904816544e-06, -3.412273131988775e-06, 1.809212347410638e-08, -3.415107439292174e-06, -3.414466446229158e-06, 1.807663525628042e-08, -3.417356502231419e-06, -3.413503947914090e-06, 1.808413833346515e-08, -3.416294799762236e-06, -3.413503947914090e-06, 1.808413833346515e-08, -3.416294799762236e-06, -1.052589221682229e-04, 3.324691278596461e-06, -1.052736026296350e-04, -1.032071976969804e-04, 3.198712461362903e-06, -1.032768445789363e-04, -1.052757006405235e-04, 3.420793545345939e-06, -1.054161894205350e-04, -1.035012946475798e-04, 3.305373228471352e-06, -1.035984316809136e-04, -1.041402077620512e-04, 3.212781934568574e-06, -1.040756102417095e-04, -1.041402077620512e-04, 3.212781934568574e-06, -1.040756102417095e-04, -1.431566931580762e-02, 1.825453754003035e-03, -1.442797415029496e-02, -1.345491063638676e-02, 1.201192443406202e-03, -1.348618699201928e-02, -1.914897438840733e-02, 2.748455987594796e-03, -1.790231742045471e-02, -2.140301881834145e-02, 2.257366444272562e-03, -1.940823847447702e-02, -1.314010734520192e-02, 1.758833807333089e-03, -1.493073175332541e-02, -1.314010734520193e-02, 1.758833807333089e-03, -1.493073175332541e-02, -3.585275517726344e-01, 4.345108400965211e+00, -4.354541004006169e-01, -2.230690657586375e-01, 4.801730708975269e-01, -2.280587052966676e-01, -4.248693869747124e-01, 5.403210563745951e+00, -7.123605571065108e-01, -1.970124331027545e-04, 3.686127133635989e-06, -1.973604735934156e-04, -3.742162478510613e-01, 2.723523603638179e+00, -7.975299928753761e-01, -3.742162478510613e-01, 2.723523603638179e+00, -7.975299928753761e-01, -8.261026140407035e+04, 4.391412325733211e-24, -7.101092880330179e+04, -3.866851901110325e+04, 9.952946977518016e-18, -3.621287801018178e+04, -1.453821178412693e+05, 4.581716902253058e-25, -1.270080942197076e+05, -4.821617328266896e+00, 1.218782134268272e+01, -4.642415297326595e+00, -1.124845149780224e+05, 7.784361458058929e-20, -4.491904321483226e+04, -1.124845149780223e+05, 7.784361458058927e-20, -4.491904321483224e+04, -1.997784640586128e-02, 1.781738515145262e-03, -1.978363762947119e-02, -1.862965539914852e-02, 1.834071765417697e-03, -1.846295524932231e-02, -1.903159955066949e-02, 1.815455511527695e-03, -1.885935359595113e-02, -1.941923542549494e-02, 1.800280877020669e-03, -1.923293494749937e-02, -1.921889665084974e-02, 1.807857598825492e-03, -1.903970641059045e-02, -1.921889665084974e-02, 1.807857598825492e-03, -1.903970641059045e-02, -2.294003712101299e-02, 2.045475405717882e-03, -2.271956005162538e-02, -2.252228536457314e-02, 4.372269458584065e-03, -2.241200564225929e-02, -2.190670287561918e-02, 3.481409492639727e-03, -2.178324360767254e-02, -2.169904092506445e-02, 2.801304754186088e-03, -2.153471204953258e-02, -2.179858226898950e-02, 3.126795900343610e-03, -2.163344662833474e-02, -2.179858226898950e-02, 3.126795900343610e-03, -2.163344662833474e-02, -1.114254480388046e-02, 9.448281971276932e-04, -1.114929584311102e-02, -1.549432122279777e-01, 1.841168313207797e-01, -1.573558840668617e-01, -1.178790333593735e-01, 8.322264776862785e-02, -1.198949794524344e-01, -7.444906399394582e-02, 2.335777938713061e-02, -7.399777264422014e-02, -9.638933274497577e-02, 4.455605659310826e-02, -9.687879211796793e-02, -9.638933274497578e-02, 4.455605659310827e-02, -9.687879211796803e-02, -3.013581169238481e-02, 6.561578635696272e-03, -2.996929451020752e-02, -3.826191413267547e+01, 1.430892164753827e+01, -3.753201324105741e+01, -1.142588569172297e+01, 1.521830626896655e+01, -1.064126722740483e+01, -9.732891149606435e-02, 2.777420884472484e-02, -9.565718408707326e-02, -1.677519086105400e+00, 7.858164809404253e+00, -2.224750888212153e+00, -1.677519086105403e+00, 7.858164809404253e+00, -2.224750888212159e+00, -2.611922966881305e+03, 2.768157770177566e-04, -2.372783090409501e+03, -2.442203221507909e+06, 2.308592770889069e-85, -2.841809639191163e+06, -2.740398914547065e+05, 1.346473245321597e-36, -2.334059213937041e+05, -2.490389443543422e+00, 8.933405596013928e+00, -2.465602646434145e+00, -1.610395600666226e+05, 6.624839855865914e-22, -5.831617836529914e+04, -1.610395600666230e+05, 6.624839855865567e-22, -5.831617836529933e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
