
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.077140768367561e+01, -2.077143594572890e+01, -2.077162799498873e+01, -2.077120614908384e+01, -2.077141774620948e+01, -2.077141774620948e+01, -3.290286235602826e+00, -3.290253594683406e+00, -3.289584463780660e+00, -3.291407811802689e+00, -3.290331067583899e+00, -3.290331067583899e+00, -5.121993513886400e-01, -5.119134937860708e-01, -5.069199536213280e-01, -5.118435205675156e-01, -5.124819998456414e-01, -5.124819998456414e-01, -5.866965276210528e-02, -6.011503496087857e-02, -6.205739239482979e-01, -3.408761003022914e-02, -5.269480812597963e-02, -5.269480812597965e-02, -2.158467969644190e-06, -2.523839001343118e-06, -5.096908047076634e-04, -4.118222254958928e-07, -1.204138321504857e-06, -1.204138321504857e-06, -4.868790740245559e+00, -4.868389897819561e+00, -4.868782009159855e+00, -4.868427959672052e+00, -4.868581980954370e+00, -4.868581980954370e+00, -1.910768089226056e+00, -1.921040894350202e+00, -1.911137488614247e+00, -1.920196626277684e+00, -1.916300187986976e+00, -1.916300187986976e+00, -4.161519683849799e-01, -4.601748716701982e-01, -3.760322521375352e-01, -3.929923698898783e-01, -4.247830621963863e-01, -4.247830621963863e-01, -1.362807283139898e-02, -6.466357853887085e-02, -1.079315192172949e-02, -1.666967813849991e+00, -2.051036950060127e-02, -2.051036950060127e-02, -1.896313891130068e-07, -3.847460035856650e-07, -1.737246268863302e-07, -2.818708622122738e-03, -3.598802737767680e-07, -3.598802737800836e-07, -4.174420141337848e-01, -4.131470446825795e-01, -4.145514252009098e-01, -4.157934777482547e-01, -4.151619423166623e-01, -4.151619423166623e-01, -4.034334494705488e-01, -3.339140252572059e-01, -3.506315444273037e-01, -3.692816460838061e-01, -3.594134467027497e-01, -3.594134467027497e-01, -4.886393457994629e-01, -9.980841030824406e-02, -1.325643572914584e-01, -1.981949083645119e-01, -1.614304205939766e-01, -1.614304205939765e-01, -2.964949454450798e-01, -4.345696567351924e-04, -1.300256455711053e-03, -1.858422299472855e-01, -6.407290652062216e-03, -6.407290652062169e-03, -6.047645724527877e-06, -7.340170833567098e-09, -6.849029741688761e-08, -5.189161489550489e-03, -2.770438967993607e-07, -2.770438967930148e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504430945132688e+01, -2.504427994886812e+01, -2.504442590696556e+01, -2.504436489840501e+01, -2.504476876378002e+01, -2.504486262181769e+01, -2.504344957566347e+01, -2.504318645579357e+01, -2.504437608347189e+01, -2.504383723021695e+01, -2.504437608347189e+01, -2.504383723021695e+01, -3.923506988480483e+00, -3.923694667865256e+00, -3.923555869110520e+00, -3.923751320961414e+00, -3.924816288375539e+00, -3.925130456802366e+00, -3.923286938959350e+00, -3.923607165073572e+00, -3.922765644714060e+00, -3.924756808990192e+00, -3.922765644714060e+00, -3.924756808990192e+00, -6.372700963387493e-01, -6.423120549366956e-01, -6.350507193118708e-01, -6.412178083980317e-01, -6.012481389246693e-01, -5.936739870494967e-01, -6.030329927607927e-01, -6.054980375616572e-01, -6.417450044613329e-01, -5.704700031838709e-01, -6.417450044613329e-01, -5.704700031838709e-01, -7.826593682107379e-02, -8.089868644457501e-02, -8.113052183831851e-02, -8.435357980126870e-02, -7.527899880364859e-01, -7.897574801664108e-01, -4.538886683106669e-02, -4.618211940284445e-02, -6.526262426575830e-02, -3.751521958655124e-02, -6.526262426575818e-02, -3.751521958655125e-02, -3.919479471234458e-06, -4.695064457240254e-06, -4.517106112335968e-06, -5.541225608236965e-06, -1.003249680458281e-03, -1.199401386354879e-03, -8.456369744730146e-07, -8.042084652676361e-07, -2.762774371727473e-06, -5.162298272314745e-07, -2.762774371725221e-06, -5.162298272293033e-07, -6.106659084630117e+00, -6.105139726376795e+00, -6.109668282184734e+00, -6.108054028068199e+00, -6.106822148024698e+00, -6.105240563524618e+00, -6.109409374740251e+00, -6.107882744902281e+00, -6.108200645869022e+00, -6.106604888300896e+00, -6.108200645869022e+00, -6.106604888300896e+00, -2.036514582087473e+00, -2.036403854151393e+00, -2.055039587539805e+00, -2.054422892464474e+00, -2.017608281803400e+00, -2.022085549944901e+00, -2.033344449180926e+00, -2.038079489355860e+00, -2.061008874836940e+00, -2.048918723894754e+00, -2.061008874836940e+00, -2.048918723894754e+00, -5.788986730682489e-01, -5.775009867028088e-01, -6.577455269606530e-01, -6.583035931689082e-01, -5.129573487946040e-01, -5.335495400178586e-01, -5.584144284415814e-01, -5.757921248595260e-01, -6.072897408885179e-01, -5.770749936993136e-01, -6.072897408885178e-01, -5.770749936993135e-01, -2.245700404394143e-02, -2.272733215774538e-02, -7.621374594633039e-02, -7.659584755417431e-02, -1.762837939557734e-02, -1.960068171779678e-02, -2.237236093926318e+00, -2.236321432848855e+00, -3.063017333215840e-02, -3.066131130341249e-02, -3.063017333215840e-02, -3.066131130341249e-02, -3.569297936307043e-07, -4.004788179752873e-07, -7.537016406463019e-07, -7.883007418480275e-07, -3.188514528936200e-07, -3.776523145784067e-07, -5.810526859595225e-03, -5.936043832676751e-03, -3.398527990386702e-07, -8.709861635206431e-07, -3.398527990445241e-07, -8.709861632754939e-07, -5.983089414083639e-01, -6.006143700065644e-01, -5.940300688523069e-01, -5.963988814589281e-01, -5.958330913876470e-01, -5.981976636387579e-01, -5.971100749033622e-01, -5.994207973252416e-01, -5.965004023746251e-01, -5.988370919209532e-01, -5.965004023746251e-01, -5.988370919209532e-01, -5.780977533713842e-01, -5.799515525592787e-01, -4.450642160466267e-01, -4.474141930955662e-01, -4.884480424677684e-01, -4.910161362288642e-01, -5.294756727702411e-01, -5.314002264012277e-01, -5.092909968865126e-01, -5.112749181255731e-01, -5.092909968865126e-01, -5.112749181255731e-01, -6.947267878896765e-01, -6.962654348851139e-01, -1.141854275575659e-01, -1.148220124007445e-01, -1.593843939459967e-01, -1.613701478484992e-01, -2.843799593275009e-01, -2.861532048598666e-01, -2.173739260571314e-01, -2.175212842272068e-01, -2.173739260571308e-01, -2.175212842272069e-01, -4.009013297672642e-01, -4.043896828250073e-01, -9.310694711194289e-04, -9.521947896543972e-04, -2.669497485367110e-03, -2.966622666239920e-03, -2.801013441017125e-01, -2.846582796442511e-01, -1.149002767348041e-02, -1.246973397460507e-02, -1.149002767348038e-02, -1.246973397460498e-02, -1.152436055297125e-05, -1.280893638403469e-05, -1.464757413147438e-08, -1.474802896661719e-08, -1.236159534930777e-07, -1.486249563809714e-07, -9.869460588119910e-03, -1.027286224825706e-02, -2.890106916968675e-07, -6.712399881318526e-07, -2.890106926790991e-07, -6.712399889019223e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbe_whs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.391110242938380e-08, 3.855567579455844e-10, -1.391118059299045e-08, -1.391098585106380e-08, 3.855637563905792e-10, -1.391109490447821e-08, -1.391049079043931e-08, 3.855734091993355e-10, -1.391042357892191e-08, -1.391182292916560e-08, 3.854697494807899e-10, -1.391210624496154e-08, -1.391105629925759e-08, 3.855271085313426e-10, -1.391133114006317e-08, -1.391105629925759e-08, 3.855271085313426e-10, -1.391133114006317e-08, -1.785592306036124e-05, 2.158879157656427e-06, -1.786150539301990e-05, -1.785603482612268e-05, 2.159323527660124e-06, -1.786205293468359e-05, -1.786350301207170e-05, 2.169371669283230e-06, -1.786633586241153e-05, -1.783937154330514e-05, 2.149943255801801e-06, -1.784331999921283e-05, -1.786662106076291e-05, 2.159156568071321e-06, -1.784821519716092e-05, -1.786662106076291e-05, 2.159156568071321e-06, -1.784821519716092e-05, -8.837172331609744e-03, 3.586683876242116e-03, -8.770954364349564e-03, -8.880522064373014e-03, 3.559577090514688e-03, -8.800046634494933e-03, -9.585323155174855e-03, 2.876045381924161e-03, -9.650189095235113e-03, -9.359713062525806e-03, 2.810968523930000e-03, -9.342878370446388e-03, -8.965674579829495e-03, 2.852692094259074e-03, -9.314236040403497e-03, -8.965674579829495e-03, 2.852692094259074e-03, -9.314236040403497e-03, -5.205310138344403e-01, 3.108902575321890e-01, -4.907008169074311e-01, -5.124634443364505e-01, 3.280826843588528e-01, -4.747124463790979e-01, -5.389373885597198e-03, 1.940414170439823e-03, -4.844790923338709e-03, -6.374451024711146e-01, 2.258949661124237e-01, -6.270340573942511e-01, -5.179670811240296e-01, 1.882246441728870e-01, -5.794308717060825e-01, -5.179670811240313e-01, 1.882246441728873e-01, -5.794308717060855e-01, 4.231721450254504e-03, 8.471332723898200e-03, 4.230332747278944e-03, 4.976975762502800e-03, 9.964515393423459e-03, 4.974754764327239e-03, -1.189749770731472e-03, 5.126941006152715e-02, -9.080083227295678e-03, 1.504039174046162e-03, 3.008683449168684e-03, 1.504069446719445e-03, 2.205071650166774e-03, 4.414566270491809e-03, 2.206897132622118e-03, 2.205071650619242e-03, 4.414566270088269e-03, 2.206897133075128e-03, -3.852364030742868e-06, 5.666948009101149e-07, -3.856183398188764e-06, -3.850724780300751e-06, 5.704413223836728e-07, -3.854538035394267e-06, -3.852271407213676e-06, 5.668443577206054e-07, -3.856094324534994e-06, -3.850819226289083e-06, 5.701514261968389e-07, -3.854648258504917e-06, -3.851556657894620e-06, 5.686004611431787e-07, -3.855350485353670e-06, -3.851556657894620e-06, 5.686004611431787e-07, -3.855350485353670e-06, -1.400863849056735e-04, 1.221811741084532e-05, -1.401120852208426e-04, -1.372277477728362e-04, 1.218856108878283e-05, -1.373516137767323e-04, -1.402340335501271e-04, 1.161795009824474e-05, -1.403538138308733e-04, -1.378230168514718e-04, 1.159619612758267e-05, -1.378626912224024e-04, -1.382590970563663e-04, 1.250231835492394e-05, -1.385198315113135e-04, -1.382590970563663e-04, 1.250231835492394e-05, -1.385198315113135e-04, -1.219800794104202e-02, 1.180452397706796e-02, -1.236940342856903e-02, -6.241157809482133e-03, 1.489938286408802e-02, -6.215079307383535e-03, -1.758370896735804e-02, 1.535577972946644e-02, -1.468859214932926e-02, -1.079075162150497e-02, 2.278859644535717e-02, -8.438959003059479e-03, -9.934693020756637e-03, 1.179162458306085e-02, -1.302894613976305e-02, -9.934693020756658e-03, 1.179162458306085e-02, -1.302894613976307e-02, -4.531410343895152e-01, 1.261488607621168e-01, -4.692592910300329e-01, -4.166761321471525e-01, 1.139695105238702e-01, -4.138197419282048e-01, -4.057417824963696e-01, 1.279112469154852e-01, -4.452903736636499e-01, -1.610375199168519e-04, 1.207887057881010e-04, -1.614279556996025e-04, -5.675893298142614e-01, 2.409472748596690e-01, -7.302024813249022e-01, -5.675893298142614e-01, 2.409472748596690e-01, -7.302024813249022e-01, 1.466657912778417e-03, 2.933546798259037e-03, 1.466654813059896e-03, 1.849266125774422e-03, 3.699144102256803e-03, 1.849269296142312e-03, 1.842507136124350e-02, 3.685108437354808e-02, 1.842486748646622e-02, -1.784956165030085e-01, 1.250822448857004e-01, -1.753706544954173e-01, 7.051546201890618e-03, 1.410360645889085e-02, 7.050742355377147e-03, 7.051546205177316e-03, 1.410360646869916e-02, 7.050742358677816e-03, -5.268819043911573e-03, 2.514346072918196e-02, -5.027094139507502e-03, -7.644435562126916e-03, 2.157065992117518e-02, -7.393378499688977e-03, -6.889674663695491e-03, 2.270457728491302e-02, -6.640407385883432e-03, -6.202585731764819e-03, 2.373865089872573e-02, -5.958490365216982e-03, -6.553653603481421e-03, 2.321019190891285e-02, -6.306945965563762e-03, -6.553653603481421e-03, 2.321019190891285e-02, -6.306945965563762e-03, -4.564899240710438e-03, 2.977269840520045e-02, -4.344620797553312e-03, -2.458937090004958e-02, 1.592277215307748e-02, -2.413906446218036e-02, -1.928611216527292e-02, 1.838749842245184e-02, -1.887676954134248e-02, -1.394213378143649e-02, 2.169730037966074e-02, -1.364698656623675e-02, -1.665797897367285e-02, 1.995497716545398e-02, -1.632609554798727e-02, -1.665797897367285e-02, 1.995497716545398e-02, -1.632609554798727e-02, -5.707751429382246e-03, 1.183264719377924e-02, -5.636622008766680e-03, -2.765665972619819e-01, 8.498631964250428e-02, -2.738073966557445e-01, -1.894371703310927e-01, 7.821972418059023e-02, -1.851068710994680e-01, -6.781981897250908e-02, 6.964082434152352e-02, -6.606391418326236e-02, -1.179206592299644e-01, 7.796350422599263e-02, -1.181570517472039e-01, -1.179206592299650e-01, 7.796350422599266e-02, -1.181570517472040e-01, -3.191012661857739e-02, 2.285950305464996e-02, -3.097921010624863e-02, -1.459558596928964e-03, 4.213028450134424e-02, -2.223396997469897e-03, -4.970171534864874e-02, 6.458066222247318e-02, -6.311565754395036e-02, -6.115964219266926e-02, 1.099497136873529e-01, -5.601204840465974e-02, -3.439439154627758e-01, 2.182010199987041e-01, -4.809669976595364e-01, -3.439439154627744e-01, 2.182010199987039e-01, -4.809669976595407e-01, 5.260820342261254e-03, 1.056259116938041e-02, 5.255977017109951e-03, 2.005761649052057e-03, 4.011531506685853e-03, 2.005758428909012e-03, 2.510334430789510e-03, 5.020763908060611e-03, 2.510316212864492e-03, -3.443825619450341e-01, 2.002688123716920e-01, -3.556975995310311e-01, 9.000526268570544e-03, 1.800188742308661e-02, 9.000206899699196e-03, 9.000526272274635e-03, 1.800188743452388e-02, 9.000206903382324e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
