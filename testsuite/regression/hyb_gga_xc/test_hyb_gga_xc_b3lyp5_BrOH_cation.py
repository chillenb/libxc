
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp5_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683254453332068e+01, -1.683256834225732e+01, -1.683272538517946e+01, -1.683237010093487e+01, -1.683254898499333e+01, -1.683254898499333e+01, -2.841015802065330e+00, -2.840989502558311e+00, -2.840449701216566e+00, -2.841916851426637e+00, -2.841051555536244e+00, -2.841051555536244e+00, -5.967922972941219e-01, -5.966409279493736e-01, -5.939368482649450e-01, -5.980468476444664e-01, -5.972576674081560e-01, -5.972576674081560e-01, -1.808449983166172e-01, -1.824822727532640e-01, -6.866035400409269e-01, -1.485162519148093e-01, -1.732631176609785e-01, -1.732631176609784e-01, -4.875946638657008e-02, -4.885108094270920e-02, -8.698022280832955e-02, -4.411876578788485e-02, -4.469023323142526e-02, -4.469023323142524e-02, -4.102842561093058e+00, -4.102427590052532e+00, -4.102831732525395e+00, -4.102465269328476e+00, -4.102627726689791e+00, -4.102627726689791e+00, -1.730447339772263e+00, -1.738948022046959e+00, -1.730065027534813e+00, -1.737572156939400e+00, -1.735340520849932e+00, -1.735340520849932e+00, -5.071401079845184e-01, -5.297903956580692e-01, -4.739701025073168e-01, -4.749997289858317e-01, -5.130602612679769e-01, -5.130602612679770e-01, -1.168885182291523e-01, -1.876054303578195e-01, -1.118952839345249e-01, -1.516170181014195e+00, -1.279551240324539e-01, -1.279551240324539e-01, -3.971323355822117e-02, -4.251906871900862e-02, -2.794351394125785e-02, -9.437187379817541e-02, -3.394738427574875e-02, -3.394738427574878e-02, -4.871401199513231e-01, -4.891725470571916e-01, -4.885033606738898e-01, -4.879103688299078e-01, -4.882105988333307e-01, -4.882105988333307e-01, -4.732606075714766e-01, -4.432210849755571e-01, -4.527417897643551e-01, -4.612890201421477e-01, -4.568990401114629e-01, -4.568990401114629e-01, -5.547920550198412e-01, -2.276877860563213e-01, -2.624183636867896e-01, -3.208657025613406e-01, -2.898486743707686e-01, -2.898486743707686e-01, -4.102385080735055e-01, -8.725315467900834e-02, -9.197970083422169e-02, -3.041870879406067e-01, -1.018292267861778e-01, -1.018292267861778e-01, -5.529963748246520e-02, -2.433819735403259e-02, -3.200698408357771e-02, -9.916594243312073e-02, -3.191483227480753e-02, -3.191483227480752e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp5_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.035855659872373e+01, -2.035853236581621e+01, -2.035864225228375e+01, -2.035859486262478e+01, -2.035890334730538e+01, -2.035897104796737e+01, -2.035793268536766e+01, -2.035773798378140e+01, -2.035860566695208e+01, -2.035822273589440e+01, -2.035860566695208e+01, -2.035822273589440e+01, -3.346916122220105e+00, -3.346987525816009e+00, -3.346943540458099e+00, -3.347016230401385e+00, -3.347623037445724e+00, -3.347795654061607e+00, -3.346979867889336e+00, -3.347147200509875e+00, -3.346368812224808e+00, -3.347759737077567e+00, -3.346368812224808e+00, -3.347759737077567e+00, -6.832435195268182e-01, -6.851298635594364e-01, -6.821939358824207e-01, -6.844865554122872e-01, -6.647987280522167e-01, -6.624155874604195e-01, -6.683991731568719e-01, -6.691582522002737e-01, -6.815148484979650e-01, -6.589145140453840e-01, -6.815148484979650e-01, -6.589145140453840e-01, -2.001541614106910e-01, -2.011802046156934e-01, -2.018800941940441e-01, -2.032494824308783e-01, -7.815710097033914e-01, -8.012679776985114e-01, -1.656195667978275e-01, -1.661570165922739e-01, -1.736005512350457e-01, -1.758417567925321e-01, -1.736005512350457e-01, -1.758417567925321e-01, -1.554126747648023e-02, -1.560281032100157e-02, -1.592588720151954e-02, -1.598070077256761e-02, -4.909916550124505e-02, -4.973304611455176e-02, -1.165420745362444e-02, -1.167458847526196e-02, -1.322017571514222e-02, -1.132411652109195e-02, -1.322017571514219e-02, -1.132411652109194e-02, -5.064810621405104e+00, -5.063625423720911e+00, -5.066732233560749e+00, -5.065485348255678e+00, -5.064916818490795e+00, -5.063690885471662e+00, -5.066568316372072e+00, -5.065377748184487e+00, -5.065793678132076e+00, -5.064559922430946e+00, -5.065793678132076e+00, -5.064559922430946e+00, -1.864260269072066e+00, -1.864181102031382e+00, -1.878583157112825e+00, -1.878147648999220e+00, -1.850760856380911e+00, -1.853646685885722e+00, -1.863106853761270e+00, -1.866155090216255e+00, -1.881771756391392e+00, -1.874111455136409e+00, -1.881771756391392e+00, -1.874111455136409e+00, -6.123201351990218e-01, -6.112496328320280e-01, -6.751579457022321e-01, -6.755605611553084e-01, -5.605138302010105e-01, -5.743749700881415e-01, -5.931933725808028e-01, -6.064241013661854e-01, -6.330615387502169e-01, -6.111732727651813e-01, -6.330615387502169e-01, -6.111732727651814e-01, -1.289494829605447e-01, -1.287708837467500e-01, -2.121677261002628e-01, -2.122887860288827e-01, -1.186008940578688e-01, -1.201717625094450e-01, -1.939279359729947e+00, -1.938548700903949e+00, -1.422398803445607e-01, -1.388249181495813e-01, -1.422398803445607e-01, -1.388249181495813e-01, -9.783802379703097e-03, -1.000332467962399e-02, -1.124468912074893e-02, -1.136782867943321e-02, -7.959756271963367e-03, -7.897561648020445e-03, -7.815712129413174e-02, -7.867028188975884e-02, -9.381066970449979e-03, -9.662983674682320e-03, -9.381066970450000e-03, -9.662983674682320e-03, -6.318676818179433e-01, -6.336669426087700e-01, -6.235654311156535e-01, -6.253703466451476e-01, -6.263453876714883e-01, -6.281640185831968e-01, -6.287642458366609e-01, -6.305527971750040e-01, -6.275419992852191e-01, -6.293453671983966e-01, -6.275419992852191e-01, -6.293453671983966e-01, -6.175352128425106e-01, -6.189767301963689e-01, -5.131582246737575e-01, -5.145109483772217e-01, -5.393026054591944e-01, -5.409182361382158e-01, -5.680806870692002e-01, -5.694694989674954e-01, -5.531625228775799e-01, -5.545515472665038e-01, -5.531625228775799e-01, -5.545515472665038e-01, -7.047921365861692e-01, -7.059105985866487e-01, -2.539437580309707e-01, -2.541188508888050e-01, -2.918019876556818e-01, -2.923335479092055e-01, -3.712853247362151e-01, -3.723373506123177e-01, -3.274286566685976e-01, -3.272792495966287e-01, -3.274286566685977e-01, -3.272792495966288e-01, -4.748581279025566e-01, -4.767668532417570e-01, -4.795885900260293e-02, -4.802827374396179e-02, -6.326613689850537e-02, -6.399117482592832e-02, -3.590772567287028e-01, -3.620009085600280e-01, -9.850733671400562e-02, -9.776338685478575e-02, -9.850733671400561e-02, -9.776338685478574e-02, -1.952419142017836e-02, -1.950225562561136e-02, -5.177042746231608e-03, -4.761480761817529e-03, -7.630886406956926e-03, -7.622068709917068e-03, -9.216222465604788e-02, -9.277906991655227e-02, -8.328001783964074e-03, -9.227194247030559e-03, -8.328001783964084e-03, -9.227194247030541e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp5_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp5", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.043401602249309e-08, 1.185558425401183e-11, -1.043407505857723e-08, -1.043395782851073e-08, 1.185541524986055e-11, -1.043403228730844e-08, -1.043364085111230e-08, 1.185461176244829e-11, -1.043361737800369e-08, -1.043430726173668e-08, 1.185712748825859e-11, -1.043445901963862e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.358064788891638e-05, 1.541225587214213e-07, -1.358577088276538e-05, -1.358103965629732e-05, 1.541207867069750e-07, -1.358654212396425e-05, -1.359428505024676e-05, 1.540597121148743e-07, -1.359756006350432e-05, -1.356249691843990e-05, 1.540100170374724e-07, -1.356668218543393e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -7.792259255394369e-03, 9.270722799357577e-04, -7.849951520308237e-03, -7.786461986509554e-03, 9.324368204854546e-04, -7.857131339723945e-03, -7.832736409582442e-03, 1.069807695322527e-03, -7.733242440070735e-03, -7.559812284896936e-03, 1.024962868820697e-03, -7.593914356376238e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.015022929288295e-01, 4.870430005817489e-01, -7.816385693227824e-01, -7.925801894797767e-01, 4.601020753985704e-01, -7.665752528935305e-01, -4.505851044012250e-03, 4.311409659161154e-04, -4.390509886285057e-03, -1.405355168870086e+00, 1.357480112752327e+00, -1.380998360113386e+00, -1.027527050921904e+00, 1.929431429665579e+00, -3.898047502256749e+00, -1.027527050921904e+00, 1.929431429665580e+00, -3.898047502256753e+00, -1.601233046657358e+04, 9.006507517295055e-08, -1.341327593453690e+04, -1.420990979929685e+04, 3.695673560289628e-07, -1.164774806483721e+04, -8.370059792973863e+01, 1.489288214502471e+01, -7.190430426370420e+01, -6.750537472164971e+04, 3.350885389426989e-17, -7.031007753052439e+04, -2.221427161418409e+04, 8.673770695270562e-13, -1.460208813509680e+05, -2.221427161418411e+04, 8.673770695270562e-13, -1.460208813509680e+05, -3.120937442842174e-06, 1.809299517292379e-08, -3.123583621634334e-06, -3.123251342613206e-06, 1.807545599629114e-08, -3.125818583373952e-06, -3.121034151413480e-06, 1.809212347410638e-08, -3.123635403204407e-06, -3.123017007873502e-06, 1.807663525628042e-08, -3.125668909910377e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -1.010635912347755e-04, 3.324691278596461e-06, -1.010779524700931e-04, -9.903149681292247e-05, 3.198712461362903e-06, -9.909978705291323e-05, -1.011475640512280e-04, 3.420793545345939e-06, -1.012672271456375e-04, -9.938724522915006e-05, 3.305373228471352e-06, -9.946546298030040e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -1.605154024547233e-02, 1.825453754003035e-03, -1.619117711055979e-02, -1.474343620688189e-02, 1.201192443406202e-03, -1.477479346054838e-02, -2.204666172622624e-02, 2.748455987594796e-03, -2.031678606014923e-02, -2.418338119192188e-02, 2.257366444272562e-03, -2.171147066780003e-02, -1.455920912893613e-02, 1.758833807333089e-03, -1.681843677980908e-02, -1.455920912893614e-02, 1.758833807333089e-03, -1.681843677980908e-02, -3.150401852206798e+00, 4.345108400965211e+00, -3.170434965885433e+00, -5.502177821396236e-01, 4.801730708975269e-01, -5.493965502748231e-01, -4.262172914865188e+00, 5.403210563745951e+00, -4.000430924985834e+00, -1.886068550772652e-04, 3.686127133635989e-06, -1.889444393377877e-04, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -1.699411089643476e+05, 4.391412325733211e-24, -1.460796247556560e+05, -7.954666730295906e+04, 9.952946977518016e-18, -7.449506296332044e+04, -2.990717847119347e+05, 4.581716902253058e-25, -2.612737931159296e+05, -1.696004532565848e+01, 1.218782134268272e+01, -1.643550682122481e+01, -2.313967161586600e+05, 7.784361458058929e-20, -9.240488802955455e+04, -2.313967161586598e+05, 7.784361458058927e-20, -9.240488802955452e+04, -2.219495429854996e-02, 1.781738515145262e-03, -2.195509733342586e-02, -2.076312885154710e-02, 1.834071765417697e-03, -2.055303334584081e-02, -2.118788746189437e-02, 1.815455511527695e-03, -2.097177410252597e-02, -2.159933539387829e-02, 1.800280877020669e-03, -2.136816452351270e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.560950998573218e-02, 2.045475405717882e-03, -2.533979798454380e-02, -2.658669298607634e-02, 4.372269458584065e-03, -2.639619554799486e-02, -2.539317146300312e-02, 3.481409492639727e-03, -2.519928883854928e-02, -2.474558936546363e-02, 2.801304754186088e-03, -2.452658703155491e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -1.210663724077704e-02, 9.448281971276932e-04, -1.210774703956818e-02, -2.896818500974693e-01, 1.841168313207797e-01, -2.893079402659515e-01, -1.863619421801817e-01, 8.322264776862785e-02, -1.860558812379716e-01, -9.818708946814067e-02, 2.335777938713061e-02, -9.716063264790924e-02, -1.367145607178618e-01, 4.455605659310826e-02, -1.373866162956502e-01, -1.367145607178618e-01, 4.455605659310827e-02, -1.373866162956503e-01, -3.643622074116785e-02, 6.561578635696272e-03, -3.608494043291562e-02, -8.685719210089600e+01, 1.430892164753827e+01, -8.522852476782363e+01, -3.265583822645921e+01, 1.521830626896655e+01, -3.015511765247127e+01, -1.291093042631665e-01, 2.777420884472484e-02, -1.254546410894600e-01, -8.387690733914193e+00, 7.858164809404253e+00, -8.331015966778173e+00, -8.387690733914191e+00, 7.858164809404253e+00, -8.331015966778182e+00, -5.373095280702843e+03, 2.768157770177566e-04, -4.881149980613249e+03, -5.023960912792954e+06, 2.308592770889069e-85, -5.846008400586689e+06, -5.637392051558921e+05, 1.346473245321597e-36, -4.801493238580819e+05, -1.031515996738637e+01, 8.933405596013928e+00, -9.898975829389819e+00, -3.312813801870204e+05, 6.624839855865914e-22, -1.199647090775366e+05, -3.312813801870212e+05, 6.624839855865567e-22, -1.199647090775370e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
