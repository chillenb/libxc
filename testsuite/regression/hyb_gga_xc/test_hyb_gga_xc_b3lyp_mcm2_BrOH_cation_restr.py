
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.698254422826677e+01, -1.698256822050123e+01, -1.698272666271954e+01, -1.698236863820368e+01, -1.698254887272691e+01, -1.698254887272691e+01, -2.857894233489608e+00, -2.857867694142051e+00, -2.857322967169246e+00, -2.858803256313549e+00, -2.857930097329560e+00, -2.857930097329560e+00, -5.959256629552131e-01, -5.957623975842149e-01, -5.927599429877231e-01, -5.969158155753723e-01, -5.955406026178903e-01, -5.955406026178903e-01, -1.768175001456432e-01, -1.785379665275991e-01, -6.861281737034858e-01, -1.435287640475487e-01, -1.563102589480058e-01, -1.563102589480058e-01, -4.889550202799191e-02, -4.896521901423997e-02, -8.550332122770253e-02, -4.438344349586541e-02, -4.430383897078688e-02, -4.430383897078686e-02, -4.130757743588753e+00, -4.130337218568418e+00, -4.130746738015441e+00, -4.130375380206733e+00, -4.130540047938895e+00, -4.130540047938895e+00, -1.737699648509246e+00, -1.746287234334259e+00, -1.737271223348660e+00, -1.744856342092108e+00, -1.742648256988361e+00, -1.742648256988361e+00, -5.061136331466339e-01, -5.291458483890659e-01, -4.725078880005518e-01, -4.738398516651653e-01, -5.116408111325154e-01, -5.116408111325154e-01, -1.112678385343349e-01, -1.824088254867055e-01, -1.063653608334825e-01, -1.522191949342634e+00, -1.229053876191814e-01, -1.229053876191814e-01, -3.997858318610001e-02, -4.276218087148494e-02, -2.807127508961249e-02, -9.083105719504644e-02, -3.394714142612069e-02, -3.394714142612071e-02, -4.863141198289346e-01, -4.883061447256905e-01, -4.876518844017981e-01, -4.870706895424241e-01, -4.873650869428582e-01, -4.873650869428582e-01, -4.723750913379845e-01, -4.415028573877195e-01, -4.513292332621849e-01, -4.601268808214591e-01, -4.556175789634044e-01, -4.556175789634044e-01, -5.542774051057173e-01, -2.231217467243773e-01, -2.587017936637057e-01, -3.184643185573001e-01, -2.868580107034871e-01, -2.868580107034870e-01, -4.083245892754305e-01, -8.595029461241149e-02, -8.925664392842655e-02, -3.019254421178073e-01, -9.753975573594315e-02, -9.753975573594315e-02, -5.536013604093729e-02, -2.456474446152414e-02, -3.223849857079959e-02, -9.512117367705190e-02, -3.189742432492129e-02, -3.189742432492126e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.053864304702132e+01, -2.053871786809487e+01, -2.053903966938527e+01, -2.053792671320411e+01, -2.053851141598079e+01, -2.053851141598079e+01, -3.368065689147205e+00, -3.368093879607812e+00, -3.368827031411525e+00, -3.368180066794953e+00, -3.368179085172391e+00, -3.368179085172391e+00, -6.859047390495582e-01, -6.850693507230308e-01, -6.657730025454959e-01, -6.709679662310086e-01, -6.699228525964673e-01, -6.699228525964673e-01, -2.012375220928618e-01, -2.030125087945598e-01, -7.936038724589747e-01, -1.674302827926576e-01, -1.792708214717938e-01, -1.792708214717938e-01, -1.516884386777162e-02, -1.552852408251399e-02, -4.767054561059971e-02, -1.143745217678709e-02, -1.251059633058921e-02, -1.251059633058924e-02, -5.100153132115409e+00, -5.102060467943632e+00, -5.100239719962725e+00, -5.101923513447643e+00, -5.101120310685824e+00, -5.101120310685824e+00, -1.874567212038420e+00, -1.888766302199367e+00, -1.862578235260016e+00, -1.875050210965978e+00, -1.888298822742975e+00, -1.888298822742975e+00, -6.123339701964355e-01, -6.757585263294542e-01, -5.679407560092952e-01, -5.999348097172477e-01, -6.229074078783393e-01, -6.229074078783393e-01, -1.305079228263949e-01, -2.146297899817607e-01, -1.207986578900012e-01, -1.948146163975523e+00, -1.415687040201282e-01, -1.415687040201282e-01, -9.727776070412338e-03, -1.108274713134657e-02, -7.738613467099816e-03, -7.758597896449054e-02, -9.337555744254683e-03, -9.337555744254716e-03, -6.328064195984817e-01, -6.245627596540160e-01, -6.273280714154053e-01, -6.297154897553255e-01, -6.285086690685396e-01, -6.285086690685396e-01, -6.181823805448013e-01, -5.144817283890648e-01, -5.404163760935778e-01, -5.688427313723255e-01, -5.540290509922046e-01, -5.540290509922046e-01, -7.059484946994437e-01, -2.560948445519547e-01, -2.932977165693689e-01, -3.717564140847481e-01, -3.278176669749449e-01, -3.278176669749448e-01, -4.762640907095453e-01, -4.623281598006350e-02, -6.219233959483127e-02, -3.600035665152604e-01, -9.807886444452349e-02, -9.807886444452343e-02, -1.895857154432019e-02, -4.925383854459567e-03, -7.505207775388146e-03, -9.220584344904383e-02, -8.721565081148682e-03, -8.721565081148639e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.276797489197254e-09, -5.276772009318247e-09, -5.276587116277160e-09, -5.276967696590679e-09, -5.276778454117990e-09, -5.276778454117990e-09, -6.813817094895594e-06, -6.814112161678844e-06, -6.820278425841158e-06, -6.804435922949866e-06, -6.813518681435579e-06, -6.813518681435579e-06, -3.628140724567882e-03, -3.626715349421102e-03, -3.558898217091583e-03, -3.469702539975105e-03, -3.504985508772697e-03, -3.504985508772697e-03, -2.359089515414580e-01, -2.389759104292565e-01, -2.100206988734688e-03, -2.470424784060099e-01, -2.732284202270302e-01, -2.732284202270301e-01, -7.388900815535597e+03, -6.479432186656177e+03, -3.419051497829662e+01, -3.487050475553922e+04, -1.932507589840273e+04, -1.932507589840274e+04, -1.573025964931582e-06, -1.574184688158520e-06, -1.573063926066220e-06, -1.574086974244517e-06, -1.573620920695863e-06, -1.573620920695863e-06, -4.988196681308509e-05, -4.891479192503668e-05, -4.991499231190853e-05, -4.905722468228194e-05, -4.933198062052524e-05, -4.933198062052524e-05, -7.513316800069456e-03, -7.043513547032767e-03, -9.740081596665040e-03, -1.078575931178074e-02, -7.280811439138627e-03, -7.280811439138627e-03, -1.430587416296833e-01, -1.152728461287287e-01, -2.768532866679891e-01, -9.414513692998975e-05, -3.564048677053634e-01, -3.564048677053634e-01, -7.953657510300461e+04, -3.895941635996279e+04, -1.411787803536573e+05, -4.390671940188955e+00, -6.665345196841503e+04, -6.665345196841499e+04, -1.054247872277899e-02, -9.806813076819835e-03, -1.002685880278009e-02, -1.023663747152703e-02, -1.012817373481593e-02, -1.012817373481593e-02, -1.217091179329421e-02, -1.187235883626173e-02, -1.157815308342664e-02, -1.148155863478768e-02, -1.152361951924138e-02, -1.152361951924138e-02, -5.791724482494486e-03, -8.365530058993582e-02, -6.569708002664762e-02, -4.134530649948420e-02, -5.400689206359539e-02, -5.400689206359541e-02, -1.605750859697349e-02, -3.881186531078820e+01, -1.080704782230003e+01, -5.482382006582846e-02, -1.616472307541404e+00, -1.616472307541407e+00, -2.589778174502256e+03, -2.736922093874511e+06, -2.625068125195690e+05, -2.130709779944157e+00, -8.897974376856636e+04, -8.897974376856665e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
