
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_v_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.733121570285109e+01, -1.733123563611137e+01, -1.733138783073066e+01, -1.733106016648755e+01, -1.733122568610770e+01, -1.733122568610770e+01, -2.808958416411536e+00, -2.808934961083042e+00, -2.808410623433704e+00, -2.809929742115572e+00, -2.808958700863152e+00, -2.808958700863152e+00, -4.801799535708338e-01, -4.800929726365452e-01, -4.802051107949555e-01, -4.839002541042853e-01, -4.801454092666571e-01, -4.801454092666571e-01, -8.056688223675008e-02, -8.197546761834376e-02, -5.802462701955956e-01, -4.761655518444686e-02, -8.098181991995709e-02, -8.098181991995709e-02, 7.775779986335399e-04, 8.056467739081626e-04, -1.120567906896968e-03, 4.027199021595485e-04, 7.988234002069857e-04, 7.988234002069857e-04, -4.118457179075143e+00, -4.118130226871655e+00, -4.118428530135382e+00, -4.118174207365285e+00, -4.118282280416330e+00, -4.118282280416330e+00, -1.681403567249262e+00, -1.688530095845681e+00, -1.684192013795738e+00, -1.689671025726249e+00, -1.682838084407920e+00, -1.682838084407920e+00, -3.873919661899690e-01, -4.191108109027796e-01, -3.639731699012897e-01, -3.757244960595305e-01, -4.038443566141800e-01, -4.038443566141800e-01, -2.471801378349802e-02, -8.838688699178006e-02, -2.382208681208435e-02, -1.441981356563162e+00, -3.413640285601865e-02, -3.413640285601865e-02, 3.887172180864640e-04, 4.426357308966775e-04, 3.324966166248793e-04, -6.055750708806478e-03, 4.039301601010498e-04, 4.039301601010498e-04, -3.940349093696739e-01, -3.914686509565222e-01, -3.922200859549206e-01, -3.929115642689061e-01, -3.925511836981599e-01, -3.925511836981599e-01, -3.791718718128193e-01, -3.323752209523418e-01, -3.438445419618489e-01, -3.554669731095489e-01, -3.493326810000972e-01, -3.493326810000972e-01, -4.435216546229572e-01, -1.253332026998447e-01, -1.559684389316343e-01, -2.077798788372843e-01, -1.798534296261204e-01, -1.798534296261204e-01, -2.921655838310674e-01, -4.736443612286209e-04, -3.925402452411739e-03, -1.886765948372226e-01, -1.418431548742979e-02, -1.418431548742978e-02, 8.781770298824510e-04, 1.178069276583992e-04, 2.299631053909903e-04, -1.243415244479960e-02, 3.437647881350874e-04, 3.437647881350885e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_v_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.082796185831732e+01, -2.082804614288293e+01, -2.082841055586896e+01, -2.082703057420007e+01, -2.082800640411330e+01, -2.082800640411330e+01, -3.296013809799375e+00, -3.296066854745463e+00, -3.297660437558111e+00, -3.295618308166100e+00, -3.296055269222820e+00, -3.296055269222820e+00, -5.579418132171616e-01, -5.565173745156218e-01, -5.172346532234577e-01, -5.229557407012728e-01, -5.574263991235718e-01, -5.574263991235718e-01, -1.075094392597560e-01, -1.101244570078954e-01, -7.037103194221518e-01, -6.641987883699718e-02, -1.082979867144174e-01, -1.082979867144174e-01, 9.358011389537904e-04, 9.586231697500791e-04, -5.104763783496796e-03, 5.295029221355993e-04, 9.517687715098676e-04, 9.517687715098676e-04, -5.146983164186365e+00, -5.149584778384888e+00, -5.147248487473159e+00, -5.149271445890220e+00, -5.148319123370222e+00, -5.148319123370222e+00, -1.625843906116207e+00, -1.644759887607114e+00, -1.610843851838799e+00, -1.625629550956299e+00, -1.658071290801113e+00, -1.658071290801113e+00, -5.098996065070126e-01, -5.811032520730491e-01, -4.788637732666916e-01, -5.194275486936600e-01, -5.355553081944592e-01, -5.355553081944592e-01, -4.161970096689990e-02, -1.042695575726026e-01, -4.044857532407603e-02, -1.908970107818509e+00, -5.224428080267095e-02, -5.224428080267095e-02, 5.118267375735724e-04, 5.786514729367591e-04, 4.382431757467847e-04, -1.476910929891985e-02, 5.294578808419852e-04, 5.294578808419846e-04, -5.520117207005649e-01, -5.458077086367742e-01, -5.482790521214574e-01, -5.500520779606893e-01, -5.491856926912673e-01, -5.491856926912673e-01, -5.319225635619672e-01, -4.175481149646423e-01, -4.522973940035055e-01, -4.840021014194633e-01, -4.680574775476153e-01, -4.680574775476153e-01, -6.121300940427751e-01, -1.416076854365947e-01, -1.830792665281160e-01, -2.701676596492010e-01, -2.232608672089482e-01, -2.232608672089482e-01, -3.687495127308446e-01, -3.598381496324788e-03, -1.077026136546530e-02, -2.588183804320258e-01, -2.771900485771066e-02, -2.771900485771063e-02, 1.023378546357444e-03, 1.589625225676990e-04, 3.076339152832468e-04, -2.523830106984465e-02, 4.532287363854099e-04, 4.532287363854099e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_v_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.817808788886609e-09, -5.817741877774793e-09, -5.817417612820707e-09, -5.818513851954873e-09, -5.817773717570904e-09, -5.817773717570904e-09, -7.669542935224637e-06, -7.669355805803190e-06, -7.662980383190666e-06, -7.667638683831238e-06, -7.669319680180789e-06, -7.669319680180789e-06, -3.973339662725853e-03, -3.994667177614127e-03, -4.554960208256627e-03, -4.425502306527586e-03, -3.981083554454124e-03, -3.981083554454124e-03, -1.671944952582523e-01, -1.603018153478223e-01, -1.989863438028458e-03, -2.392090238943167e-01, -1.650866361187557e-01, -1.650866361187557e-01, 2.582915650750580e+00, 2.568863870801947e+00, 5.474892911765519e-01, 2.015372044837936e+00, 2.673781431027404e+00, 2.673781431027404e+00, -1.493781828785147e-06, -1.491587182498808e-06, -1.493556902773077e-06, -1.491850491266970e-06, -1.492657819661856e-06, -1.492657819661856e-06, -7.575326548643567e-05, -7.371206083965648e-05, -7.660827103949118e-05, -7.499656214168311e-05, -7.326542156177028e-05, -7.326542156177028e-05, -5.258021897987964e-03, -1.659605151145209e-03, -6.340877065567413e-03, -3.278169201970901e-03, -4.449842823674977e-03, -4.449842823674977e-03, -1.429116727589157e-01, -1.719014468312117e-01, -1.393700265009980e-01, -5.780533910921230e-05, -2.133583220162590e-01, -2.133583220162590e-01, 2.145683611384487e+00, 2.120848892949581e+00, 6.245105656203516e+00, 2.748023785580541e-01, 3.163461831429155e+00, 3.163461831428863e+00, 2.199075605560561e-03, -1.379550758630828e-03, -4.812207067525565e-04, 4.524559082249422e-04, -4.676171032773006e-05, -4.676171032773119e-05, 4.085758082251375e-03, -9.752285029049051e-03, -7.492688726401858e-03, -5.306096450324453e-03, -6.444784223630739e-03, -6.444784223630735e-03, -1.698539170597640e-03, -1.106420409632399e-01, -7.088976713090837e-02, -2.991738300638455e-02, -4.739299922995793e-02, -4.739299922995797e-02, -1.373368817684459e-02, 5.034721435917967e-01, 3.097560222879856e-01, -2.927247078631903e-02, 2.525010957686479e-02, 2.525010957686590e-02, 1.883408869880393e+00, 4.006274374823510e+00, 3.324904852139314e+00, 1.099007897234242e-01, 4.692603854718524e+00, 4.692603854720168e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
