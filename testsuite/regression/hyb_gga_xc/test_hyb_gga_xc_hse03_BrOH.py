
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse03_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.577378367915761e+01, -1.577380006361334e+01, -1.577393262043002e+01, -1.577366314080060e+01, -1.577379182271199e+01, -1.577379182271199e+01, -2.676702547012086e+00, -2.676681293515073e+00, -2.676205180072051e+00, -2.677579449198603e+00, -2.676702732343800e+00, -2.676702732343800e+00, -5.786900637498988e-01, -5.785335280568266e-01, -5.753050901479516e-01, -5.788586269384398e-01, -5.786310913702325e-01, -5.786310913702325e-01, -1.956726700706559e-01, -1.970185653026717e-01, -6.707891149236572e-01, -1.615061841128825e-01, -1.960600433757987e-01, -1.960600433757987e-01, -1.703700087768171e-02, -1.784388938343127e-02, -6.884138173834632e-02, -8.178316327111331e-03, -1.765831239690991e-02, -1.765831239690991e-02, -3.851912069983236e+00, -3.851587849854538e+00, -3.851883240312211e+00, -3.851631041121253e+00, -3.851739071705361e+00, -3.851739071705361e+00, -1.640027812436253e+00, -1.647870258073177e+00, -1.640226335692494e+00, -1.646348969398877e+00, -1.645031164841346e+00, -1.645031164841346e+00, -4.953160221793239e-01, -5.271186145437633e-01, -4.736508078632756e-01, -4.859242156228691e-01, -5.105926306862307e-01, -5.105926306862307e-01, -1.312940235344842e-01, -2.075236445267183e-01, -1.293289974966717e-01, -1.453383613039138e+00, -1.442548730912764e-01, -1.442548730912764e-01, -7.889606914431139e-03, -9.016100030608714e-03, -6.758215244382219e-03, -9.029488634034431e-02, -8.215352504944259e-03, -8.215352504944259e-03, -5.049796868608888e-01, -5.016257264686567e-01, -5.027024345924723e-01, -5.036261362624102e-01, -5.031533566338527e-01, -5.031533566338527e-01, -4.910710659537987e-01, -4.441655891498508e-01, -4.549788105154621e-01, -4.661895449160288e-01, -4.601791896104281e-01, -4.601791896104281e-01, -5.495376735241292e-01, -2.438548492896860e-01, -2.739563882158313e-01, -3.264635475790984e-01, -2.985410289327962e-01, -2.985410289327961e-01, -4.066547490287777e-01, -6.468730859207937e-02, -8.331668870840150e-02, -3.075695589312125e-01, -1.106212275206781e-01, -1.106212275206781e-01, -1.996015776297283e-02, -2.468905205319991e-03, -4.689844615996011e-03, -1.060364422660490e-01, -6.982287103253768e-03, -6.982287102729436e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse03_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.876456298211414e+01, -1.876463559145957e+01, -1.876495312710245e+01, -1.876376428215351e+01, -1.876460132720579e+01, -1.876460132720579e+01, -3.112948146793995e+00, -3.112983617506406e+00, -3.114083953046791e+00, -3.112823682139662e+00, -3.112979103184989e+00, -3.112979103184989e+00, -6.666387102212250e-01, -6.659346380016089e-01, -6.491218089019385e-01, -6.536452769289687e-01, -6.663815207999948e-01, -6.663815207999948e-01, -2.146897717989558e-01, -2.190362738503243e-01, -7.888892038168138e-01, -1.691161434269417e-01, -2.160067495018603e-01, -2.160067495018603e-01, -2.270628891522196e-02, -2.378045359715373e-02, -8.261606628286944e-02, -1.090352185831491e-02, -2.353345388101743e-02, -2.353345388101743e-02, -4.766065758228009e+00, -4.768763519158800e+00, -4.766339878637873e+00, -4.768437559331074e+00, -4.767451396582400e+00, -4.767451396582400e+00, -1.775082257378367e+00, -1.786063272926139e+00, -1.771404540925849e+00, -1.780033073582563e+00, -1.787125515491666e+00, -1.787125515491666e+00, -6.100159247396633e-01, -6.826170971473219e-01, -5.810264939760994e-01, -6.248681145116642e-01, -6.346795071102288e-01, -6.346795071102288e-01, -1.459435722186272e-01, -2.110904970209198e-01, -1.433003249715873e-01, -1.892143574232115e+00, -1.552908929481403e-01, -1.552908929481403e-01, -1.051867223044157e-02, -1.202024629364100e-02, -9.010469173056585e-03, -1.051436356059516e-01, -1.095289988125936e-02, -1.095289988125935e-02, -6.542040185847862e-01, -6.497389903464015e-01, -6.517117927967023e-01, -6.529707783122837e-01, -6.523726099688739e-01, -6.523726099688739e-01, -6.353545068282010e-01, -5.262656711328095e-01, -5.562154067903167e-01, -5.893883756164480e-01, -5.723000308910335e-01, -5.723000308910334e-01, -7.113775414278170e-01, -2.532953282561796e-01, -3.069856009993334e-01, -3.880824126243718e-01, -3.491934897298974e-01, -3.491934897298974e-01, -4.813985365857951e-01, -7.910438408797929e-02, -9.820751488204946e-02, -3.734256407994561e-01, -1.247273007439221e-01, -1.247273007439222e-01, -2.659630153210940e-02, -3.291850220917040e-03, -6.252963933972935e-03, -1.195866371006616e-01, -9.309175372706214e-03, -9.309175362331707e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse03_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.675083948386275e-09, -5.675032555199575e-09, -5.674758335581215e-09, -5.675600728574922e-09, -5.675057221159772e-09, -5.675057221159772e-09, -6.940203262478559e-06, -6.940230070683192e-06, -6.939814217615973e-06, -6.934794484466428e-06, -6.940102942487498e-06, -6.940102942487498e-06, -3.006466091572027e-03, -3.005608540757950e-03, -2.926904458954031e-03, -2.863295820207058e-03, -3.006235883219770e-03, -3.006235883219770e-03, -2.866414346103402e-01, -2.652567603503774e-01, -1.680007258975883e-03, -5.909382419692263e-01, -2.801522085934097e-01, -2.801522085934097e-01, 2.948719632297825e-02, 3.177314056001308e-02, -3.046283882569193e+00, 5.521155581012880e-03, 3.311676184149787e-02, 3.311676184149787e-02, -1.385859774830130e-06, -1.382442360642770e-06, -1.385514816389138e-06, -1.382857908484901e-06, -1.384108536894440e-06, -1.384108536894440e-06, -4.571656131430283e-05, -4.507673055720766e-05, -4.539221157383713e-05, -4.488625292217464e-05, -4.573883569559378e-05, -4.573883569559378e-05, -4.595176158127144e-03, 4.165382424894427e-04, -5.675755442000965e-03, -1.038333781961706e-03, -3.704614390133704e-03, -3.704614390133704e-03, -7.593166400445925e-01, -2.411741343137388e-01, -8.591834941886302e-01, -2.436889249863136e-05, -7.483415666205284e-01, -7.483415666205284e-01, 5.689933158712631e-03, 7.087435648747788e-03, 2.145382733561061e-02, -1.908336526352201e+00, 1.094795505527167e-02, 1.094795505555073e-02, 3.517250403121565e-03, 1.061468843846492e-03, 1.862770101064306e-03, 2.540897728548564e-03, 2.195187326407194e-03, 2.195187326407380e-03, 4.576230066053490e-03, -8.495350046153455e-03, -6.838277898354230e-03, -3.832700650145545e-03, -5.534621196922444e-03, -5.534621196922522e-03, 7.039096448352693e-05, -1.234049544328003e-01, -6.062654726037518e-02, -2.789900381955066e-02, -3.740946341522986e-02, -3.740946341523017e-02, -1.199987822931819e-02, -2.667189407746417e+00, -1.992461595562049e+00, -3.448632944884099e-02, -1.389191201679173e+00, -1.389191201679179e+00, 2.438024817906253e-02, 1.779839569319765e-03, 4.326607523398382e-03, -1.708577693044081e+00, 1.480927522127662e-02, 1.480927522044869e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
