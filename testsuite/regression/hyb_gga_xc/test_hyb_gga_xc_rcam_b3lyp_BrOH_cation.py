
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_rcam_b3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_rcam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.723483418983825e+01, -1.723485272927179e+01, -1.723499804348096e+01, -1.723472091806107e+01, -1.723485718531010e+01, -1.723485718531010e+01, -2.750922807258119e+00, -2.750890057957540e+00, -2.750203746565759e+00, -2.751945847976747e+00, -2.750953397092916e+00, -2.750953397092916e+00, -4.318852940798701e-01, -4.315908167387973e-01, -4.248716514291038e-01, -4.292329603989323e-01, -4.278516633543755e-01, -4.278516633543755e-01, -3.087073919779861e-02, -3.322022099935959e-02, -5.237680403351369e-01, -2.338683525192394e-04, -2.438025708657654e-02, -2.438025708657651e-02, -4.456623527347779e-04, -4.563833596900635e-04, 4.023710290611154e-03, -3.242932439700292e-04, 5.389737692257775e-05, 5.389737692257775e-05, -4.036977496361886e+00, -4.036300619164293e+00, -4.036956047472600e+00, -4.036358351665458e+00, -4.036629126545388e+00, -4.036629126545388e+00, -1.607840547999708e+00, -1.616579996101274e+00, -1.607894434147604e+00, -1.615630085105641e+00, -1.612639673739928e+00, -1.612639673739928e+00, -3.486543288533083e-01, -3.760448373292420e-01, -3.151549092588468e-01, -3.217594747723033e-01, -3.552390258083074e-01, -3.552390258083074e-01, 2.149488963717270e-02, -2.161762347683308e-02, 2.155641461820580e-02, -1.371465564837893e+00, 1.045577007811014e-02, 1.045577007811014e-02, -2.702681947152578e-04, -3.150512166971055e-04, -2.219411669292693e-04, 1.481595565130672e-02, -1.473646469158122e-04, -1.473646469158122e-04, -3.357373420114470e-01, -3.364145182231477e-01, -3.362161497908142e-01, -3.360173958099884e-01, -3.361199952063119e-01, -3.361199952063119e-01, -3.226687907942114e-01, -2.801099736725167e-01, -2.938059139308645e-01, -3.060674754949920e-01, -2.998882216239787e-01, -2.998882216239787e-01, -4.004505657169641e-01, -5.703545529160425e-02, -9.477106091982057e-02, -1.627345122688121e-01, -1.273839245556160e-01, -1.273839245556161e-01, -2.479421367956776e-01, 3.423552672187106e-03, 1.125704047399387e-02, -1.518607728105055e-01, 1.573059772459273e-02, 1.573059772459275e-02, -5.812368833328052e-04, -1.322115692437736e-04, -2.045078560500332e-04, 1.560829765298287e-02, -1.586503264620527e-04, -1.586503264620526e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_rcam_b3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_rcam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.033775984513290e+01, -2.033773585968012e+01, -2.033785194567429e+01, -2.033780304411850e+01, -2.033812578898811e+01, -2.033819968581554e+01, -2.033708242464953e+01, -2.033687400581067e+01, -2.033781293858165e+01, -2.033739016287616e+01, -2.033781293858165e+01, -2.033739016287616e+01, -3.205076954143169e+00, -3.205160980349592e+00, -3.205106761010053e+00, -3.205192865004962e+00, -3.205851290214258e+00, -3.206036653784011e+00, -3.205096523381445e+00, -3.205278106225934e+00, -3.204522941385534e+00, -3.205946964512889e+00, -3.204522941385534e+00, -3.205946964512889e+00, -5.497561389813965e-01, -5.505570619498358e-01, -5.490472520505959e-01, -5.500048012703443e-01, -5.357712197488630e-01, -5.353918293931186e-01, -5.403454036987592e-01, -5.404465884845915e-01, -5.443869851967721e-01, -5.420264383637252e-01, -5.443869851967721e-01, -5.420264383637252e-01, -9.948147092219753e-02, -9.874945855138420e-02, -1.004740557985982e-01, -9.981820338489288e-02, -6.468653183610128e-01, -6.623248914117018e-01, -7.409597121895456e-02, -7.420362956865112e-02, -6.868873167844092e-02, -9.662865453411144e-02, -6.868873167844086e-02, -9.662865453411142e-02, -6.504405812770757e-04, -2.117901560276989e-04, -7.140060081172734e-04, -1.917436700485016e-04, -1.343689860781441e-03, -4.971590199926599e-04, -2.260642414456379e-04, -2.970887991843573e-04, 6.236755818150651e-04, -1.838235412576958e-03, 6.236755818150651e-04, -1.838235412576958e-03, -4.945904684933263e+00, -4.944697585307708e+00, -4.948044221212678e+00, -4.946768480908409e+00, -4.946021956804375e+00, -4.944769797777868e+00, -4.947860799114341e+00, -4.946647956551161e+00, -4.946999888473834e+00, -4.945738203794450e+00, -4.946999888473834e+00, -4.945738203794450e+00, -1.725186379387654e+00, -1.725109688690427e+00, -1.739105609563917e+00, -1.738687146929066e+00, -1.712675213491939e+00, -1.715127834786270e+00, -1.724633164735589e+00, -1.727265084689424e+00, -1.741712329725616e+00, -1.734908988141369e+00, -1.741712329725616e+00, -1.734908988141369e+00, -4.703463817478795e-01, -4.692679288267514e-01, -5.240245365324114e-01, -5.243058457582748e-01, -4.214401312676742e-01, -4.337357043173286e-01, -4.440947520465646e-01, -4.572264565117528e-01, -4.893504247169076e-01, -4.684250524905430e-01, -4.893504247169075e-01, -4.684250524905430e-01, -4.919137696362389e-02, -4.868804586650622e-02, -1.155142568037347e-01, -1.154947906639074e-01, -4.225109808779703e-02, -4.196368585116940e-02, -1.795936988157130e+00, -1.795194034753915e+00, -5.810637104135669e-02, -5.233360510393691e-02, -5.810637104135669e-02, -5.233360510393691e-02, -2.702444721937005e-04, -1.453888899318525e-04, -2.863167011709224e-04, -2.247335434370141e-04, -2.877169261503472e-04, -1.062757042046168e-04, -1.489427390903471e-02, -1.511631563216794e-02, -8.818313185083766e-04, 2.477492589501260e-04, -8.818313185083769e-04, 2.477492589501260e-04, -4.784181266215031e-01, -4.801520246908337e-01, -4.726609815895055e-01, -4.743640296822075e-01, -4.745774439894869e-01, -4.763005598596571e-01, -4.762513491474807e-01, -4.779668146004435e-01, -4.754040785524136e-01, -4.771234051434317e-01, -4.754040785524136e-01, -4.771234051434317e-01, -4.633943273822632e-01, -4.648121023840470e-01, -3.812296286206731e-01, -3.822874775615673e-01, -4.009543093194250e-01, -4.022700152407345e-01, -4.232985211452213e-01, -4.245745065491282e-01, -4.115468864379302e-01, -4.128050657756923e-01, -4.115468864379302e-01, -4.128050657756923e-01, -5.538665845078583e-01, -5.547999483179932e-01, -1.528037460747817e-01, -1.527286268586801e-01, -1.837873783281473e-01, -1.835628290271437e-01, -2.450771420548989e-01, -2.458578220989587e-01, -2.104772004755052e-01, -2.101702659550428e-01, -2.104772004755052e-01, -2.101702659550428e-01, -3.442061684784551e-01, -3.455755779875128e-01, -5.528414771103834e-04, -4.411129038645618e-04, -6.560105138909552e-03, -6.387402734946397e-03, -2.288175563490610e-01, -2.309118651123829e-01, -2.806408540822100e-02, -2.566203658739355e-02, -2.806408540822085e-02, -2.566203658739360e-02, -7.610721052292149e-04, -4.008083775703533e-04, -7.928826800087920e-05, -7.525204430206803e-05, -2.241402096673058e-04, -8.092120708757270e-05, -2.339459796581478e-02, -2.340367706990726e-02, -7.535876792233205e-04, 1.934404773937507e-04, -7.535876792233195e-04, 1.934404773937506e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_rcam_b3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_rcam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.360445925076037e-08, 1.463652377038497e-11, -1.360453603757361e-08, -1.360438415261605e-08, 1.463631512328463e-11, -1.360448086661493e-08, -1.360397341120552e-08, 1.463532316351641e-11, -1.360394333844298e-08, -1.360483311675442e-08, 1.463842899785011e-11, -1.360502945948976e-08, -1.360442691709043e-08, 1.463681083685537e-11, -1.360446851547771e-08, -1.360442691709043e-08, 1.463681083685537e-11, -1.360446851547771e-08, -1.639056501770471e-05, 1.902747638536065e-07, -1.639679198430505e-05, -1.639105119365653e-05, 1.902725761814505e-07, -1.639773716568178e-05, -1.640736874618752e-05, 1.901971754504621e-07, -1.641142057871739e-05, -1.636867619446664e-05, 1.901358235030523e-07, -1.637382441333734e-05, -1.639801847300705e-05, 1.902491360705296e-07, -1.638798211477640e-05, -1.639801847300705e-05, 1.902491360705296e-07, -1.638798211477640e-05, -5.757489452024532e-03, 1.144533678933034e-03, -5.849479726910702e-03, -5.739194666982231e-03, 1.151156568500561e-03, -5.852198119601517e-03, -5.634140174452668e-03, 1.320750241138922e-03, -5.467747953196485e-03, -5.417255791910255e-03, 1.265386257803329e-03, -5.470944189602803e-03, -6.236376256220466e-03, 1.376562597771172e-03, -4.569111141726348e-03, -6.236376256220466e-03, 1.376562597771172e-03, -4.569111141726348e-03, 3.358979841306883e-01, 6.012876550391961e-01, 2.189293014957592e-01, 3.165117676338396e-01, 5.680272535784819e-01, 1.900671039180194e-01, -3.621641988976468e-03, 5.322727974273029e-04, -3.684267984592695e-03, 1.004536853776166e+00, 1.675901373768304e+00, 9.108751607651592e-01, -1.502047343801818e-01, 2.382014110698246e+00, 2.027301148911080e+00, -1.502047343801812e-01, 2.382014110698246e+00, 2.027301148911076e+00, -5.759996676147495e+01, 1.111914508308031e-07, -4.825059961368548e+01, -5.111626876622039e+01, 4.562559950974850e-07, -4.189961684460420e+01, 1.024662529871379e+01, 1.838627425311693e+01, 9.019551200128934e+00, -2.428318470748058e+02, 4.136895542502456e-17, -2.529209855204944e+02, -7.990971235460118e+01, 1.070835888305008e-12, -5.252695757681465e+02, -7.990971235460127e+01, 1.070835888305008e-12, -5.252695757681463e+02, -3.889686953482432e-06, 2.233703107768369e-08, -3.892928488424392e-06, -3.892653109994278e-06, 2.231537777319893e-08, -3.895793583474630e-06, -3.889812105595106e-06, 2.233595490630417e-08, -3.892995823817764e-06, -3.892354026358067e-06, 2.231683364972891e-08, -3.895602516685636e-06, -3.891237363480348e-06, 2.232609670798167e-08, -3.894371365562973e-06, -3.891237363480348e-06, 2.232609670798167e-08, -3.894371365562973e-06, -1.121765410928932e-04, 4.104557134069705e-06, -1.121908919824058e-04, -1.101040260058535e-04, 3.949027730077658e-06, -1.101714026923049e-04, -1.120451079538422e-04, 4.223201907834492e-06, -1.122553156709463e-04, -1.102569836908448e-04, 4.080707689470805e-06, -1.104206569683986e-04, -1.111707366457504e-04, 3.966397450084659e-06, -1.109618751383014e-04, -1.111707366457504e-04, 3.966397450084659e-06, -1.109618751383014e-04, -1.111825816049409e-02, 2.253646609880290e-03, -1.117070924595861e-02, -1.114175115789927e-02, 1.482953633834817e-03, -1.117490452648527e-02, -1.367606175943568e-02, 3.393155540240489e-03, -1.351654478442591e-02, -1.628641485701473e-02, 2.786872153422916e-03, -1.529837135161260e-02, -1.061734046933084e-02, 2.171399762139616e-03, -1.136956113770184e-02, -1.061734046933084e-02, 2.171399762139616e-03, -1.136956113770184e-02, 3.196265139716355e+00, 5.364331359216309e+00, 3.040699688343770e+00, 3.151916307835104e-01, 5.928062603673171e-01, 3.002272270491706e-01, 4.329543357065840e+00, 6.670630325612285e+00, 3.344644039376517e+00, -2.115474289293745e-04, 4.550774239056777e-06, -2.119063175656163e-04, 2.280452753941256e+00, 3.362374819306393e+00, 1.605013205110881e+00, 2.280452753941256e+00, 3.362374819306393e+00, 1.605013205110881e+00, -6.113159410496481e+02, 5.421496698436063e-24, -5.254808798483776e+02, -2.861470526548947e+02, 1.228758886113335e-17, -2.679753090857612e+02, -1.075827689855456e+03, 5.656440620065503e-25, -9.398599196905175e+02, 8.464937845146506e+00, 1.504669301565768e+01, 8.281237425240041e+00, -8.323854225080488e+02, 9.610322787727072e-20, -3.324009474055971e+02, -8.323854225080479e+02, 9.610322787727070e-20, -3.324009474055970e+02, -1.600485918288589e-02, 2.199677179191681e-03, -1.590728251488874e-02, -1.477492649963621e-02, 2.264286130145305e-03, -1.470195496159392e-02, -1.514590123718339e-02, 2.241303100651475e-03, -1.506795729585372e-02, -1.550003403814679e-02, 2.222568983976134e-03, -1.540928680428474e-02, -1.531740906420433e-02, 2.231922961512953e-03, -1.523311824530415e-02, -1.531740906420433e-02, 2.231922961512953e-03, -1.523311824530415e-02, -1.816327170229512e-02, 2.525278278664052e-03, -1.804473560455388e-02, -1.484736980314076e-02, 5.397863529116129e-03, -1.492276342845874e-02, -1.540333036687367e-02, 4.298036410666330e-03, -1.544100387316874e-02, -1.609772554148458e-02, 3.458400931093935e-03, -1.605296222421947e-02, -1.576365061463911e-02, 3.860241852276062e-03, -1.573360473336550e-02, -1.576365061463911e-02, 3.860241852276062e-03, -1.573360473336550e-02, -9.414140261851275e-03, 1.166454564355177e-03, -9.435497106732872e-03, 8.533787460310539e-02, 2.273047300256539e-01, 7.749940684978646e-02, 9.018266204741568e-03, 1.027440095908986e-01, 2.087342343573315e-03, -2.991705126641840e-02, 2.883676467546989e-02, -3.069228791189397e-02, -2.099551455236315e-02, 5.500747727544229e-02, -2.114841402263298e-02, -2.099551455236309e-02, 5.500747727544231e-02, -2.114841402263304e-02, -1.821963307276341e-02, 8.100714365057125e-03, -1.847854604301735e-02, 9.277449212791723e+00, 1.766533536733120e+01, 9.136903325499386e+00, 1.072832399610477e+01, 1.878803243082290e+01, 9.719634003431295e+00, -3.818111997115907e-02, 3.428914672188251e-02, -4.064828767537718e-02, 6.149516722694242e+00, 9.701438036301546e+00, 4.839528311786220e+00, 6.149516722694242e+00, 9.701438036301546e+00, 4.839528311786209e+00, -1.932816797105808e+01, 3.417478728614279e-04, -1.755854831129723e+01, -1.807230383989863e+04, 2.850114531961813e-85, -2.102939133112980e+04, -2.027895200649625e+03, 1.662312648545182e-36, -1.727203823133664e+03, 6.446461210169605e+00, 1.102889579754806e+01, 6.025461832733902e+00, -1.191692761050398e+03, 8.178814636871498e-22, -4.315397422126233e+02, -1.191692761050401e+03, 8.178814636871070e-22, -4.315397422126247e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
