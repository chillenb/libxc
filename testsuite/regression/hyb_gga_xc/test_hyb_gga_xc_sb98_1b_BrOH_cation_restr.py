
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1b_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.602920061772593e+01, -1.602924097790984e+01, -1.602944048883912e+01, -1.602883960545799e+01, -1.602915159617198e+01, -1.602915159617198e+01, -2.702669655639822e+00, -2.702665112662272e+00, -2.702624873219077e+00, -2.703193375373429e+00, -2.702727408191548e+00, -2.702727408191548e+00, -5.751196818477269e-01, -5.748181864912483e-01, -5.690501629663459e-01, -5.729615636213442e-01, -5.717623494877725e-01, -5.717623494877725e-01, -1.869751643305093e-01, -1.879607425654019e-01, -6.603484589949929e-01, -1.624938447649705e-01, -1.710020734303960e-01, -1.710020734303960e-01, -9.678094999799573e-03, -1.018834228952591e-02, -5.691948334473030e-02, -5.589006373387662e-03, -7.019841435063497e-03, -7.019841435063498e-03, -3.976795667574691e+00, -3.977342591160445e+00, -3.976824293363987e+00, -3.977307047659932e+00, -3.977070795258645e+00, -3.977070795258645e+00, -1.611105355580865e+00, -1.619555713118838e+00, -1.609424229533100e+00, -1.616772626286715e+00, -1.616716836954126e+00, -1.616716836954126e+00, -4.987894299659598e-01, -5.319088576431543e-01, -4.657160782104370e-01, -4.753540851477053e-01, -5.051222753181297e-01, -5.051222753181297e-01, -1.316568538965823e-01, -2.016930689410287e-01, -1.238747333469137e-01, -1.508313870571389e+00, -1.418487727652815e-01, -1.418487727652815e-01, -4.316872229402090e-03, -5.464004927075244e-03, -4.182025801480350e-03, -8.873079639215886e-02, -5.033878865791697e-03, -5.033878865791699e-03, -4.999064425307072e-01, -4.921984717607466e-01, -4.937249930584135e-01, -4.957220499717661e-01, -4.946124711162931e-01, -4.946124711162931e-01, -4.928724322155769e-01, -4.322446348316655e-01, -4.450260013901042e-01, -4.580068797437055e-01, -4.512873545219209e-01, -4.512873545219209e-01, -5.557567444437099e-01, -2.355067860442669e-01, -2.632873844515189e-01, -3.169479302747771e-01, -2.869508578285966e-01, -2.869508578285966e-01, -4.012104657012133e-01, -5.460463361731683e-02, -7.356636719068765e-02, -3.028590464801663e-01, -1.068067508757318e-01, -1.068067508757318e-01, -1.368921357381360e-02, -1.475077364524820e-03, -3.075667934712104e-03, -1.018587275430892e-01, -4.659413490656604e-03, -4.659413490656600e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1b_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.097140511818695e+01, -2.097148258626349e+01, -2.097181400829624e+01, -2.097066166850450e+01, -2.097126733356163e+01, -2.097126733356163e+01, -3.443330810497615e+00, -3.443371144891347e+00, -3.444384349118707e+00, -3.443260253891517e+00, -3.443460370365714e+00, -3.443460370365714e+00, -6.911332885874190e-01, -6.898411417333344e-01, -6.549767279311781e-01, -6.609542755641028e-01, -6.604885160166896e-01, -6.604885160166896e-01, -1.804970765745188e-01, -1.845111398027674e-01, -8.034320836719649e-01, -1.388431295231097e-01, -1.520841893592505e-01, -1.520841893592505e-01, -1.289717615239076e-02, -1.357634701500405e-02, -7.185935585743734e-02, -7.443372331719242e-03, -9.351268790325910e-03, -9.351268790325915e-03, -5.217440030007168e+00, -5.219137077389620e+00, -5.217518192123911e+00, -5.219016397363148e+00, -5.218300580814477e+00, -5.218300580814477e+00, -1.807445720707159e+00, -1.827056724648220e+00, -1.781697133573731e+00, -1.799198852920314e+00, -1.830553103561041e+00, -1.830553103561041e+00, -6.254813763403111e-01, -6.987726179710385e-01, -5.800099143923086e-01, -6.164628927154859e-01, -6.362688206683021e-01, -6.362688206683021e-01, -1.250531387047296e-01, -1.712598252746233e-01, -1.212126187844601e-01, -1.997385119277163e+00, -1.241552805868408e-01, -1.241552805868408e-01, -5.746504084492160e-03, -7.276289695543013e-03, -5.564087983995084e-03, -9.958328938602438e-02, -6.700304716887428e-03, -6.700304716887442e-03, -6.731469176626299e-01, -6.474098138308478e-01, -6.552288354737879e-01, -6.629505397931528e-01, -6.589582594884166e-01, -6.589582594884166e-01, -6.610722731535051e-01, -5.206228565907252e-01, -5.517570168339964e-01, -5.809333200415765e-01, -5.659424467821950e-01, -5.659424467821950e-01, -7.279563336684901e-01, -2.139311818674136e-01, -2.669063896791286e-01, -3.763759518296351e-01, -3.197911552217844e-01, -3.197911552217844e-01, -4.819826329999408e-01, -6.950279653795169e-02, -8.902112800461794e-02, -3.687483406686992e-01, -1.073643467060280e-01, -1.073643467060280e-01, -1.824151389489343e-02, -1.961830391131136e-03, -4.092186692283622e-03, -1.052956411230782e-01, -6.200928506004000e-03, -6.200928506003982e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1b_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.063738970744373e-10, -9.063284796514731e-10, -9.061796951113963e-10, -9.068543591546052e-10, -9.064932696588628e-10, -9.064932696588628e-10, -2.132521016683783e-06, -2.132196667640172e-06, -2.124485670851785e-06, -2.136225705842759e-06, -2.131920828458918e-06, -2.131920828458918e-06, -2.188793625091324e-03, -2.205800910212895e-03, -2.693199413865042e-03, -2.595671985890377e-03, -2.606418547011815e-03, -2.606418547011815e-03, -4.769738772573491e-01, -4.522589579646807e-01, -1.144464799428927e-03, -1.036326376641901e+00, -7.945700996291508e-01, -7.945700996291498e-01, -3.652984119097908e+00, -3.892284955914826e+00, -2.887067943159165e+00, -3.047474887433322e+00, -4.004255005489711e+00, -4.004255005490512e+00, -2.262529172602744e-07, -2.239972642803627e-07, -2.261584792007568e-07, -2.241672573910969e-07, -2.251061461610256e-07, -2.251061461610256e-07, -3.690703717673241e-05, -3.546857624360498e-05, -3.862905128185008e-05, -3.730845299305012e-05, -3.529499601950624e-05, -3.529499601950624e-05, -3.612831137357312e-03, 7.098680796204786e-04, -4.973707758354177e-03, -2.438390077040302e-03, -3.404897501963697e-03, -3.404897501963697e-03, -1.728146143298165e+00, -4.305292580569350e-01, -1.957296785718764e+00, 9.152568167369472e-06, -1.679414558009720e+00, -1.679414558009720e+00, -3.875318271725080e+00, -3.574636632141344e+00, -2.162008912386298e+01, -3.151285246413934e+00, -1.031791519199799e+01, -1.031791519199000e+01, 2.844280726020190e-02, 1.710085302271664e-03, 6.215458771397185e-03, 1.286116399713739e-02, 9.087276709718558e-03, 9.087276709718558e-03, 6.279539969049179e-02, -7.490388855063302e-03, -6.142159081942014e-03, -5.395976835107103e-03, -5.787212607790446e-03, -5.787212607790446e-03, -4.670800033033489e-05, -2.005661567933499e-01, -1.014146790221381e-01, -3.032343202578818e-02, -5.589597644491637e-02, -5.589597644491653e-02, -1.046148586089920e-02, -2.634146105414140e+00, -2.656586093362412e+00, -3.568121335046574e-02, -3.138579276873035e+00, -3.138579276873026e+00, -3.128268400842666e+00, -1.518120468636117e+01, -7.886402375969700e+00, -3.270206746615565e+00, -1.289453676279388e+01, -1.289453676280896e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
