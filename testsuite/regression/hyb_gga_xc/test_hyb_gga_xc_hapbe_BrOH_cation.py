
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hapbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hapbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.695914281738724e+01, -1.695916219470909e+01, -1.695930746100501e+01, -1.695901795092691e+01, -1.695916124256433e+01, -1.695916124256433e+01, -2.851279069487990e+00, -2.851248731683715e+00, -2.850616589590657e+00, -2.852250206031830e+00, -2.851310703100383e+00, -2.851310703100383e+00, -5.912297924230231e-01, -5.910581323560035e-01, -5.885597957928003e-01, -5.926266926942785e-01, -5.923135399378276e-01, -5.923135399378276e-01, -1.811416799284976e-01, -1.824966694758962e-01, -6.811427908473173e-01, -1.502300514248638e-01, -1.741596631109723e-01, -1.741596631109722e-01, -8.085524071081335e-03, -8.514129263377291e-03, -4.632859528667535e-02, -4.663405851736086e-03, -6.508120885307402e-03, -6.508120885307402e-03, -4.113800660088480e+00, -4.113324596382490e+00, -4.113787302460469e+00, -4.113366870687019e+00, -4.113554446422772e+00, -4.113554446422772e+00, -1.743457100304568e+00, -1.751590230741024e+00, -1.744351003426498e+00, -1.751531041092081e+00, -1.747534037418950e+00, -1.747534037418950e+00, -5.062380530930745e-01, -5.392439449958509e-01, -4.723999499578853e-01, -4.824861948757190e-01, -5.128997785496338e-01, -5.128997785496338e-01, -1.129935337236340e-01, -1.914825698424166e-01, -1.055213221093589e-01, -1.526495739927271e+00, -1.271632312506306e-01, -1.271632312506306e-01, -3.600467929630061e-03, -4.558735711216585e-03, -3.490859755360743e-03, -7.323771087655258e-02, -4.384980461916106e-03, -4.384980461916110e-03, -5.014080375199228e-01, -4.990387396156680e-01, -4.997891329759377e-01, -5.004714054887345e-01, -5.001219811191832e-01, -5.001219811191832e-01, -4.889748451226260e-01, -4.389741670390833e-01, -4.509234058585020e-01, -4.641873551373942e-01, -4.571287305551950e-01, -4.571287305551950e-01, -5.635403122530042e-01, -2.301043164791158e-01, -2.618193502101009e-01, -3.181432413069581e-01, -2.871251369027145e-01, -2.871251369027145e-01, -4.063538853231118e-01, -4.435595528966685e-02, -5.988856578372674e-02, -3.036896334122808e-01, -9.079358925764631e-02, -9.079358925764633e-02, -1.139282120116981e-02, -1.218619583612822e-03, -2.562621908147144e-03, -8.584411693361667e-02, -4.026952127498608e-03, -4.026952127498601e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hapbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hapbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.009965481532183e+01, -2.009963160787790e+01, -2.009974998542459e+01, -2.009970110288522e+01, -2.010002760500187e+01, -2.010010451318380e+01, -2.009894865115061e+01, -2.009873466001915e+01, -2.009970854749013e+01, -2.009926512712076e+01, -2.009970854749013e+01, -2.009926512712076e+01, -3.313259217718957e+00, -3.313414610010295e+00, -3.313299938672660e+00, -3.313461961500134e+00, -3.314351520508031e+00, -3.314605868452986e+00, -3.313051153437792e+00, -3.313311061926884e+00, -3.312678082868469e+00, -3.314255766828861e+00, -3.312678082868469e+00, -3.314255766828861e+00, -6.817631194997824e-01, -6.848958628617958e-01, -6.801006342648563e-01, -6.839131345982080e-01, -6.518525645431017e-01, -6.477227053009108e-01, -6.547120275853230e-01, -6.560511275228019e-01, -6.778429154386784e-01, -6.392679472704801e-01, -6.778429154386784e-01, -6.392679472704801e-01, -1.874573747890845e-01, -1.893182409876512e-01, -1.897117546956923e-01, -1.919523150357889e-01, -7.792076547139427e-01, -8.046166149008600e-01, -1.575690707096371e-01, -1.588163446941284e-01, -1.782061606964034e-01, -1.392063774899286e-01, -1.782061606964034e-01, -1.392063774899285e-01, -1.041486663028190e-02, -1.106502542432874e-02, -1.091151126048740e-02, -1.168618910322183e-02, -5.852946916126608e-02, -6.152578239240104e-02, -6.266650447111288e-03, -6.162373896931339e-03, -9.293826848562661e-03, -5.291755126179628e-03, -9.293826848562659e-03, -5.291755126179627e-03, -5.060549298681218e+00, -5.059346301594366e+00, -5.063119962975386e+00, -5.061837006112741e+00, -5.060687591118207e+00, -5.059432340723943e+00, -5.062898581011039e+00, -5.061689640946154e+00, -5.061866448140509e+00, -5.060598690341720e+00, -5.061866448140509e+00, -5.060598690341720e+00, -1.816044132263609e+00, -1.815958705719240e+00, -1.830522065513073e+00, -1.830052225213672e+00, -1.801945661652497e+00, -1.804966548407251e+00, -1.814256996587829e+00, -1.817488215502118e+00, -1.834449728667306e+00, -1.826042105365977e+00, -1.834449728667306e+00, -1.826042105365977e+00, -6.319142982122807e-01, -6.311106247173944e-01, -7.015546084130898e-01, -7.020698920800431e-01, -5.787784166821529e-01, -5.915645510904064e-01, -6.212606612533608e-01, -6.295237182268811e-01, -6.525383716216869e-01, -6.342783680827893e-01, -6.525383716216869e-01, -6.342783680827890e-01, -1.305981272210446e-01, -1.310046444820711e-01, -1.962039103228590e-01, -1.966356848915840e-01, -1.215308160312001e-01, -1.256077992543771e-01, -1.980372957761482e+00, -1.979694744442844e+00, -1.398052519493157e-01, -1.382077909986200e-01, -1.398052519493157e-01, -1.382077909986200e-01, -4.701967610894642e-03, -4.886475604671620e-03, -6.029567443128919e-03, -6.120856099647617e-03, -4.507973816446134e-03, -4.773503027790173e-03, -9.051941286171676e-02, -9.113813927830734e-02, -4.605046549529444e-03, -6.321424043365103e-03, -4.605046549529450e-03, -6.321424043365107e-03, -6.548030456999493e-01, -6.559953210888536e-01, -6.492002703881830e-01, -6.505092861241198e-01, -6.513672737825248e-01, -6.526562793605099e-01, -6.530303705662474e-01, -6.542464266271523e-01, -6.522183398787653e-01, -6.534700410343358e-01, -6.522183398787653e-01, -6.534700410343358e-01, -6.386303411419656e-01, -6.394911714934010e-01, -5.189023360230556e-01, -5.203992995535246e-01, -5.559531840215424e-01, -5.575696570097565e-01, -5.920486731860237e-01, -5.931256992933737e-01, -5.741023518090184e-01, -5.752550691892447e-01, -5.741023518090184e-01, -5.752550691892447e-01, -7.318997895808798e-01, -7.330839540358159e-01, -2.333187953210218e-01, -2.338449486141877e-01, -2.732061721228155e-01, -2.742487648221667e-01, -3.777712525449786e-01, -3.787422946272748e-01, -3.196783968278344e-01, -3.195688565783660e-01, -3.196783968278344e-01, -3.195688565783660e-01, -4.809759464246631e-01, -4.831222693684099e-01, -5.760121203574821e-02, -5.796579661531103e-02, -7.539270386682492e-02, -7.751887557896221e-02, -3.747176494474146e-01, -3.767115427550745e-01, -1.062881544480208e-01, -1.081803141048150e-01, -1.062881544480208e-01, -1.081803141048151e-01, -1.488001864002091e-02, -1.541598754737487e-02, -1.622895308810488e-03, -1.626565931709375e-03, -3.301692593752746e-03, -3.511482079265487e-03, -1.021810695908285e-01, -1.034412102148303e-01, -4.361321322260724e-03, -5.794839675890008e-03, -4.361321322260716e-03, -5.794839675890003e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hapbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hapbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.283004767699928e-08, 3.836358531915698e-10, -1.283012064143091e-08, -1.282994971601473e-08, 3.836428995089996e-10, -1.283004846863186e-08, -1.282951072192552e-08, 3.836527320901377e-10, -1.282945849519282e-08, -1.283063278019288e-08, 3.835483608220475e-10, -1.283087326639026e-08, -1.283001289379468e-08, 3.836060974095732e-10, -1.283020264843634e-08, -1.283001289379468e-08, 3.836060974095732e-10, -1.283020264843634e-08, -1.631584837215916e-05, 2.195804940185544e-06, -1.632180397459489e-05, -1.631603308072684e-05, 2.196253488718297e-06, -1.632244207205922e-05, -1.632545675782569e-05, 2.206392230198089e-06, -1.632884962714867e-05, -1.629891053344430e-05, 2.186760218851100e-06, -1.630343765733112e-05, -1.632538805958940e-05, 2.196081437783221e-06, -1.631015395608797e-05, -1.632538805958940e-05, 2.196081437783221e-06, -1.631015395608797e-05, -8.912858736084028e-03, 3.909158807176856e-03, -8.944838086750204e-03, -8.926812650448063e-03, 3.875380127261883e-03, -8.966744165972275e-03, -9.306507051505184e-03, 2.994311914423079e-03, -9.220840104730548e-03, -8.993427588256426e-03, 2.934701781075240e-03, -9.025219204192005e-03, -9.382033600790074e-03, 2.965649994234981e-03, -8.321273270029014e-03, -9.382033600790074e-03, 2.965649994234981e-03, -8.321273270029014e-03, -9.187612082978666e-01, 2.520851988714437e-01, -8.645173106938313e-01, -9.190618646568113e-01, 2.717763124263073e-01, -8.513318962333912e-01, -5.247284548961632e-03, 2.112131540642194e-03, -4.864533826481759e-03, -1.227327430106835e+00, 1.525441447238602e-01, -1.188098559415955e+00, -8.429308375814041e-01, 1.199849238400212e-01, -1.707848551895798e+00, -8.429308375814036e-01, 1.199849238400212e-01, -1.707848551895800e+00, -3.309321856931451e+00, 4.832377365731402e-03, -3.276290160611077e+00, -3.486741151645842e+00, 5.684325623584082e-03, -3.469119071748077e+00, -1.938130579861361e+00, 2.951406958632611e-02, -1.951000124031235e+00, -3.031747686465326e+00, 1.715972854128999e-03, -2.949405234800323e+00, -3.304666582334038e+00, 2.517827574172226e-03, -8.385531964405933e+00, -3.304666582334205e+00, 2.517827574285901e-03, -8.385531964406111e+00, -3.573237234271898e-06, 5.698599049941146e-07, -3.576779396793002e-06, -3.572333900718672e-06, 5.736118639488004e-07, -3.575845673032070e-06, -3.573184130539717e-06, 5.700096507148825e-07, -3.576713772769076e-06, -3.572363285190669e-06, 5.733215204569565e-07, -3.575914227117273e-06, -3.572807357340034e-06, 5.717683541142295e-07, -3.576303609247121e-06, -3.572807357340034e-06, 5.717683541142295e-07, -3.576303609247121e-06, -1.227985694501631e-04, 1.250401916026068e-05, -1.228208370427017e-04, -1.204391913696712e-04, 1.249514489038994e-05, -1.205446939555544e-04, -1.225336469123362e-04, 1.183580062684767e-05, -1.227723943519542e-04, -1.205460167467302e-04, 1.183533707645488e-05, -1.207124912680178e-04, -1.216071164803179e-04, 1.283113099648681e-05, -1.215173592795266e-04, -1.216071164803179e-04, 1.283113099648681e-05, -1.215173592795266e-04, -1.549204031733979e-02, 1.311370470638455e-02, -1.573938311665661e-02, -1.048540720292236e-02, 1.588537860351002e-02, -1.048243171050013e-02, -2.279742786413441e-02, 1.715212149796312e-02, -1.912183015314314e-02, -1.918048737965699e-02, 2.452160647505439e-02, -1.526765226298821e-02, -1.282084790590339e-02, 1.300098610474822e-02, -1.701610534205607e-02, -1.282084790590339e-02, 1.300098610474822e-02, -1.701610534205608e-02, -1.358525496256081e+00, 7.681160824893121e-02, -1.383162638004102e+00, -5.708360069200513e-01, 7.948282267778325e-02, -5.655178411737315e-01, -1.527484243859675e+00, 7.714432976846815e-02, -1.486918040633668e+00, -1.626021619690493e-04, 1.237632150126616e-04, -1.630252719067072e-04, -1.473386409099575e+00, 1.541949052849126e-01, -1.797307896599612e+00, -1.473386409099575e+00, 1.541949052849126e-01, -1.797307896599612e+00, -4.256176633920118e+00, 1.673005792248401e-03, -3.683759186675943e+00, -3.664763691311998e+00, 2.109795866063614e-03, -3.383505461554920e+00, -2.087138866082234e+01, 2.101788365934735e-02, -2.322006396042291e+01, -2.243831732066382e+00, 7.359512333794774e-02, -2.160356506966111e+00, -1.037962606223935e+01, 8.043833824643609e-03, -1.019663693314957e+01, -1.037962606223743e+01, 8.043833831416738e-03, -1.019663693314768e+01, -1.299148219697836e-02, 2.666454047666757e-02, -1.260339278108352e-02, -1.449502421201014e-02, 2.304278982414212e-02, -1.411976625369155e-02, -1.403475003258166e-02, 2.417725901093310e-02, -1.365574893066454e-02, -1.360276761536908e-02, 2.522317391945932e-02, -1.321861031202733e-02, -1.382536268263515e-02, 2.468719968861535e-02, -1.344369723701309e-02, -1.382536268263515e-02, 2.468719968861535e-02, -1.344369723701309e-02, -1.388157990573442e-02, 3.155764642595590e-02, -1.349502012993983e-02, -2.927258857827782e-02, 1.767569760605346e-02, -2.879034723670445e-02, -2.545183458256801e-02, 2.065531647452757e-02, -2.497525797804555e-02, -2.148950169500773e-02, 2.388362172921274e-02, -2.106341278038035e-02, -2.355750641593718e-02, 2.225517115357141e-02, -2.309771225659455e-02, -2.355750641593718e-02, 2.225517115357141e-02, -2.309771225659455e-02, -8.894460451851329e-03, 1.261208108830311e-02, -8.834425929865207e-03, -3.371649284340874e-01, 6.426882466965647e-02, -3.336547967874161e-01, -2.275885198697203e-01, 6.744307314259340e-02, -2.240761812724747e-01, -1.066610633771144e-01, 7.723852566739191e-02, -1.041126491475756e-01, -1.608557089302261e-01, 7.804183885850427e-02, -1.620884815014331e-01, -1.608557089302263e-01, 7.804183885850434e-02, -1.620884815014333e-01, -4.000846561122391e-02, 2.541397295154790e-02, -3.903497861162414e-02, -1.773066621979789e+00, 2.424029140178541e-02, -1.775363444656754e+00, -1.749795632931455e+00, 3.743137803940564e-02, -1.789732387502964e+00, -1.288072668046521e-01, 1.249970223459526e-01, -1.199224864207325e-01, -2.227651473615428e+00, 1.316232832484189e-01, -2.632810556123769e+00, -2.227651473615427e+00, 1.316232832484200e-01, -2.632810556123769e+00, -2.622326332687127e+00, 6.027602084154536e-03, -2.677258139515961e+00, -1.309593528132138e+01, 2.287703122638875e-03, -2.319848884174192e+01, -8.082219957804265e+00, 2.863277886537980e-03, -8.604246625120075e+00, -2.496852558465954e+00, 1.202128574623619e-01, -2.444796952151969e+00, -2.140372608596022e+01, 1.026713861296288e-02, -1.058405746091685e+01, -2.140372608595755e+01, 1.026713862640369e-02, -1.058405746091417e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
