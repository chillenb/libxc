
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_00_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.705657695635901e+00, -9.705668631624357e+00, -9.705752963782533e+00, -9.705573173837175e+00, -9.705663165790495e+00, -9.705663165790495e+00, -1.608127916327797e+00, -1.608115954597242e+00, -1.607853881399048e+00, -1.608648208602369e+00, -1.608128648392192e+00, -1.608128648392192e+00, -2.988305340789746e-01, -2.986551710135198e-01, -2.942687241357681e-01, -2.966411396138590e-01, -2.987658266397260e-01, -2.987658266397260e-01, -5.870109823815250e-02, -6.013099572779161e-02, -3.585922491808645e-01, -3.112278463147596e-02, -5.913739108987307e-02, -5.913739108987307e-02, -8.279673324026260e-03, -8.454429725779476e-03, -1.197868832556921e-02, -6.483066176096079e-03, -8.373186867822124e-03, -8.373186867822124e-03, -2.336282124910908e+00, -2.336016350666226e+00, -2.336257864099980e+00, -2.336051162634047e+00, -2.336141690845137e+00, -2.336141690845137e+00, -9.589707555220665e-01, -9.639390504324740e-01, -9.589572644091237e-01, -9.628298717931989e-01, -9.623496644367365e-01, -9.623496644367365e-01, -2.490515531286630e-01, -2.657273227098280e-01, -2.353888954974362e-01, -2.415494875139964e-01, -2.586411259930137e-01, -2.586411259930137e-01, -1.377685997947635e-02, -5.392463879571630e-02, -1.484849797319308e-02, -8.396039958219138e-01, -2.212742877862035e-02, -2.212742877862035e-02, -6.342710551596756e-03, -6.646890168040616e-03, -5.083671002330144e-03, -1.030619574056570e-02, -6.048549364395121e-03, -6.048549364395121e-03, -2.494036618978185e-01, -2.496104758253858e-01, -2.495565137888249e-01, -2.494990979217539e-01, -2.495292754097366e-01, -2.495292754097366e-01, -2.404928390278288e-01, -2.155109896426911e-01, -2.235905089321774e-01, -2.304708406213392e-01, -2.270008545789584e-01, -2.270008545789584e-01, -2.798896398232211e-01, -7.952239700440900e-02, -1.032976505927490e-01, -1.414345694923994e-01, -1.218367309100960e-01, -1.218367309100960e-01, -1.916823866185694e-01, -1.224922564700588e-02, -9.685661857196151e-03, -1.313655286755439e-01, -1.278460868619670e-02, -1.278460868619669e-02, -9.235198409278934e-03, -4.128696484403917e-03, -5.026814520407300e-03, -1.345687235500884e-02, -5.376541908060029e-03, -5.376541908060029e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_00_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.163712035537960e+01, -1.163715808465542e+01, -1.163733331725185e+01, -1.163671535439048e+01, -1.163714019471914e+01, -1.163714019471914e+01, -1.897756438712291e+00, -1.897769670750128e+00, -1.898210757462649e+00, -1.897848348328161e+00, -1.897771229969435e+00, -1.897771229969435e+00, -3.716620843375643e-01, -3.713439049162938e-01, -3.640578489919625e-01, -3.666714585545351e-01, -3.715455240196767e-01, -3.715455240196767e-01, -1.010140626065818e-01, -1.017086988189064e-01, -4.438385970386493e-01, -8.001913543187608e-02, -1.012067940109879e-01, -1.012067940109879e-01, -5.311156537118477e-03, -5.504492868837147e-03, -1.817014461215801e-02, -3.102572287356716e-03, -5.451998880263146e-03, -5.451998880263146e-03, -2.880679250381349e+00, -2.881745815986801e+00, -2.880788622099484e+00, -2.881617923693227e+00, -2.881225556227523e+00, -2.881225556227523e+00, -1.054699852637623e+00, -1.062255084707743e+00, -1.051320970763488e+00, -1.057189376689771e+00, -1.064280492366527e+00, -1.064280492366527e+00, -3.222975150451480e-01, -3.535214089415397e-01, -3.054641773048132e-01, -3.202072560751146e-01, -3.350680635519641e-01, -3.350680635519641e-01, -6.253178861448545e-02, -1.141983901840197e-01, -5.986774790338897e-02, -1.085450446997023e+00, -6.879824507067148e-02, -6.879824507067148e-02, -3.012205642042097e-03, -3.321617025570352e-03, -2.535727333803030e-03, -3.131342467241222e-02, -3.036824156365959e-03, -3.036824156365958e-03, -3.367710879135783e-01, -3.335590867285436e-01, -3.346545734574390e-01, -3.355405790861081e-01, -3.350926216633425e-01, -3.350926216633425e-01, -3.257318999506809e-01, -2.794074224086568e-01, -2.910219829709326e-01, -3.030450486186793e-01, -2.967573126782861e-01, -2.967573126782861e-01, -3.710331669393345e-01, -1.386490616236105e-01, -1.576910995963993e-01, -1.932524311354356e-01, -1.734299890051699e-01, -1.734299890051699e-01, -2.517941442970112e-01, -1.620123034752064e-02, -2.696488512929485e-02, -1.798578707844430e-01, -4.503844860361703e-02, -4.503844860361698e-02, -6.070493873259829e-03, -1.309772629452267e-03, -2.028190425476644e-03, -4.099526908576648e-02, -2.637900552812054e-03, -2.637900552812053e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_00_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.291692856141423e-09, -3.291679163953598e-09, -3.291568396882694e-09, -3.291793610651763e-09, -3.291686050652643e-09, -3.291686050652643e-09, -3.986263071783172e-06, -3.986400391534517e-06, -3.989538130963764e-06, -3.980850656669326e-06, -3.986267633585927e-06, -3.986267633585927e-06, -1.293617404320154e-03, -1.289992502298568e-03, -1.174025069385064e-03, -1.159582532893870e-03, -1.292333804345998e-03, -1.292333804345998e-03, 1.268472254942896e-01, 1.164195254383465e-01, -8.446099948571134e-04, 5.659428436025421e-01, 1.236078304962112e-01, 1.236078304962112e-01, -2.519384848966464e+02, -2.209759950284246e+02, 4.718882044502713e+00, -1.866706989058793e+03, -2.301799419634121e+02, -2.301799419634121e+02, -9.475351390870870e-07, -9.482348521570528e-07, -9.476012597352166e-07, -9.481453820367517e-07, -9.479010982958267e-07, -9.479010982958267e-07, -2.697410589221121e-05, -2.651308307021676e-05, -2.691524504371698e-05, -2.655680677292179e-05, -2.673640343753626e-05, -2.673640343753626e-05, -2.721059645958816e-03, -2.888452379165998e-03, -3.102024310006719e-03, -3.610528141352315e-03, -2.540645397918617e-03, -2.540645397918617e-03, 1.628236423997087e+00, 1.483973414517937e-01, 1.673326596861994e+00, -5.222119514854524e-05, 1.012232293254980e+00, 1.012232293254980e+00, -2.104520512224394e+03, -1.435315301269094e+03, -4.419328538047297e+03, 4.462245126118729e+00, -2.093019587461989e+03, -2.093019587461990e+03, -3.867726543453192e-03, -3.537920722319521e-03, -3.639898346235140e-03, -3.729432771806858e-03, -3.683316612049535e-03, -3.683316612049535e-03, -4.398847594692335e-03, -3.184393967586781e-03, -3.471485319397015e-03, -3.734860648398063e-03, -3.605947982154978e-03, -3.605947982154978e-03, -2.438662418489979e-03, 4.418722651839705e-02, 1.126597857418702e-02, -4.882215239006873e-03, 1.863740928932858e-05, 1.863740928933691e-05, -3.882713136419326e-03, 4.213257084155082e+00, 5.051865001503344e+00, -7.393290352696377e-03, 2.732326118596791e+00, 2.732326118596790e+00, -1.476784967797048e+02, -6.972465234152066e+04, -1.050115856334803e+04, 2.983536196866510e+00, -3.715322968122846e+03, -3.715322968122860e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
