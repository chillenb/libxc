
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_o3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.213383899102327e+01, -4.213394430475456e+01, -4.213447126115090e+01, -4.213290314600938e+01, -4.213371647062314e+01, -4.213371647062314e+01, -6.422311122586254e+00, -6.422316897173312e+00, -6.422619919781376e+00, -6.423413463930916e+00, -6.422486220319688e+00, -6.422486220319688e+00, -8.589583088075052e-01, -8.575219389958925e-01, -8.224463340299705e-01, -8.326825103916347e-01, -8.319097773110427e-01, -8.319097773110427e-01, -6.225537715275745e-02, -6.529464326182555e-02, -1.071470572517939e+00, -2.398936041778681e-02, -5.366225534168458e-02, -5.366225534168452e-02, -1.558751386027902e-03, -1.631613586218274e-03, -2.951439022735698e-03, -9.388629830717016e-04, -7.892432102144460e-04, -7.892432102144460e-04, -9.817978973728211e+00, -9.818736771837189e+00, -9.818026774531804e+00, -9.818695838179872e+00, -9.818358368362185e+00, -9.818358368362185e+00, -3.393308670634931e+00, -3.421703400431486e+00, -3.372571093211802e+00, -3.397690744604535e+00, -3.419033623044568e+00, -3.419033623044568e+00, -7.037583150322942e-01, -7.864783465373087e-01, -6.246269446635803e-01, -6.589464697771000e-01, -7.223165552763682e-01, -7.223165552763683e-01, 2.069566822099328e-03, -5.362502949858681e-02, 3.294352406525542e-03, -3.230349926239918e+00, -9.948877540094570e-03, -9.948877540094570e-03, -7.335502711352631e-04, -9.191181829260030e-04, -7.099379562960338e-04, 2.334290542773271e-03, -7.396851553560070e-04, -7.396851553560070e-04, -6.732351766754262e-01, -6.933039693121653e-01, -6.910464379023024e-01, -6.866562393270830e-01, -6.892595973193237e-01, -6.892595973193237e-01, -6.094639624156826e-01, -5.324118085169749e-01, -5.749620184577794e-01, -6.158049609714326e-01, -5.952492034489025e-01, -5.952492034489025e-01, -8.443788659017426e-01, -1.024954964667970e-01, -1.607423987162117e-01, -2.896157538734265e-01, -2.186208630554218e-01, -2.186208630554218e-01, -4.640591022314061e-01, -3.193080117647260e-03, 1.215671261963075e-03, -2.721837517886660e-01, 5.666191077026716e-04, 5.666191077026398e-04, -2.146956793198326e-03, -2.599860920545388e-04, -5.282510700525356e-04, 1.191505431165880e-03, -7.056716600936493e-04, -7.056716600936483e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_o3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.512868579194663e+01, -5.512860936696291e+01, -5.512880242443776e+01, -5.512869441779156e+01, -5.512929656277031e+01, -5.512936702722484e+01, -5.512797247895662e+01, -5.512768454879294e+01, -5.512874657326336e+01, -5.512844754919185e+01, -5.512874657326336e+01, -5.512844754919185e+01, -8.621687862322112e+00, -8.621283278178375e+00, -8.621684060042075e+00, -8.621244107899098e+00, -8.621233102230523e+00, -8.621142051847631e+00, -8.623491122294292e+00, -8.623306736521959e+00, -8.620315845566044e+00, -8.623043623509531e+00, -8.620315845566044e+00, -8.623043623509531e+00, -1.287536518598853e+00, -1.291817643885352e+00, -1.285426550411683e+00, -1.290686754979027e+00, -1.252809140302657e+00, -1.245486327691410e+00, -1.261675900871290e+00, -1.263942697464152e+00, -1.293514446952599e+00, -1.225903174010211e+00, -1.293514446952599e+00, -1.225903174010211e+00, -1.421945724027122e-01, -1.462834678749552e-01, -1.448092997398286e-01, -1.498375020263553e-01, -1.548355695827011e+00, -1.600771930193654e+00, -9.626015693014925e-02, -9.699220433318313e-02, -1.193215033024511e-01, -1.080505633284234e-01, -1.193215033024511e-01, -1.080505633284234e-01, -2.249810049805176e-03, -1.863122957042260e-03, -2.386873498796370e-03, -1.926985316499617e-03, -9.342191185263811e-03, -8.630550720451881e-03, -1.202659867358802e-03, -1.265726508980034e-03, -6.882634929382153e-04, -2.887898918153158e-03, -6.882634929382151e-04, -2.887898918153158e-03, -1.289364156413995e+01, -1.289067113399755e+01, -1.289148753403741e+01, -1.288859614870262e+01, -1.289355625660730e+01, -1.289062612854900e+01, -1.289171132083813e+01, -1.288873879524245e+01, -1.289251911956735e+01, -1.288963234526859e+01, -1.289251911956735e+01, -1.288963234526859e+01, -4.697594742759341e+00, -4.697349701356269e+00, -4.734532156844875e+00, -4.733221635721630e+00, -4.669436354369939e+00, -4.676333585069005e+00, -4.701446694311207e+00, -4.708780246356365e+00, -4.738538651403041e+00, -4.720239224216378e+00, -4.738538651403041e+00, -4.720239224216378e+00, -1.061572892781759e+00, -1.057997491509184e+00, -1.128712262857785e+00, -1.127082144394985e+00, -9.315624265788879e-01, -9.726791384457784e-01, -9.510824771044322e-01, -9.918284576310679e-01, -1.113414852696382e+00, -1.046449909988090e+00, -1.113414852696383e+00, -1.046449909988089e+00, -6.102464912020152e-02, -6.074110513414063e-02, -1.556246266180910e-01, -1.561917630502478e-01, -5.335941320727193e-02, -5.361178386816535e-02, -4.201267557247174e+00, -4.198624181498402e+00, -7.274523749629290e-02, -6.954759171443439e-02, -7.274523749629290e-02, -6.954759171443439e-02, -1.024630189046657e-03, -9.125836784944311e-04, -1.235852705606711e-03, -1.180702744890963e-03, -1.022246040110194e-03, -8.605751360466509e-04, -2.490882341677780e-02, -2.509841202452210e-02, -1.698792850024431e-03, -6.903460926256645e-04, -1.698792850024431e-03, -6.903460926256644e-04, -9.047501484787549e-01, -9.043045287784871e-01, -1.001845769217920e+00, -1.005270192389005e+00, -9.857856879390848e-01, -9.884736404627663e-01, -9.625273444205731e-01, -9.647155764735863e-01, -9.757335332797717e-01, -9.781989967780566e-01, -9.757335332797717e-01, -9.781989967780566e-01, -7.414707775429483e-01, -7.421575323982018e-01, -8.326979862662542e-01, -8.370007436478252e-01, -8.833405303293237e-01, -8.879188895484474e-01, -9.283233509058110e-01, -9.321933794102040e-01, -9.065673609563337e-01, -9.106515079576499e-01, -9.065673609563337e-01, -9.106515079576499e-01, -1.208848026270615e+00, -1.208007264385626e+00, -2.286121382409309e-01, -2.298541557905607e-01, -3.076062638382193e-01, -3.108275388058261e-01, -4.826565549301315e-01, -4.861309972351374e-01, -3.871615243110252e-01, -3.867904875131862e-01, -3.871615243110252e-01, -3.867904875131863e-01, -7.349671260436537e-01, -7.410129103016111e-01, -8.372633140310868e-03, -8.278335858456587e-03, -1.578369985101034e-02, -1.565570034353711e-02, -4.471908255981890e-01, -4.560238162898231e-01, -3.896569212740662e-02, -3.732557719236601e-02, -3.896569212740656e-02, -3.732557719236598e-02, -2.966313295596165e-03, -2.651321788867315e-03, -3.452051116312709e-04, -3.429188338939692e-04, -7.665935265570937e-04, -6.384490995803309e-04, -3.426150997226481e-02, -3.433412463446724e-02, -1.522030586850144e-03, -6.739088997167106e-04, -1.522030586850142e-03, -6.739088997167094e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_o3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.250747247428320e-09, 1.185558425401183e-11, -6.250812410374843e-09, -6.251092798496635e-09, 1.185541524986055e-11, -6.251062743390918e-09, -6.251611249836379e-09, 1.185461176244829e-11, -6.251972744335383e-09, -6.247730792703211e-09, 1.185712748825859e-11, -6.247015501669602e-09, -6.250986100457606e-09, 1.185581677785285e-11, -6.248563645458193e-09, -6.250986100457606e-09, 1.185581677785285e-11, -6.248563645458193e-09, -3.935738229497733e-06, 1.541225587214213e-07, -3.946634190883651e-06, -3.937040490376203e-06, 1.541207867069750e-07, -3.948647209697015e-06, -3.975884405546271e-06, 1.540597121148743e-07, -3.986174793181864e-06, -3.906344332605527e-06, 1.540100170374724e-07, -3.917921548301926e-06, -3.933136634122413e-06, 1.541018002171290e-07, -3.952492381024834e-06, -3.933136634122413e-06, 1.541018002171290e-07, -3.952492381024834e-06, 3.250029908190791e-04, 9.270722799357577e-04, 2.228930111579092e-04, 3.514414836998800e-04, 9.324368204854546e-04, 2.276041607508810e-04, 5.493612563175092e-04, 1.069807695322527e-03, 6.916246235029625e-04, 6.058720132927942e-04, 1.024962868820697e-03, 5.614458151648457e-04, -1.742447192769707e-04, 1.115015704194649e-03, 1.227030625604586e-03, -1.742447192769707e-04, 1.115015704194649e-03, 1.227030625604586e-03, 3.603058456121594e-01, 4.870430005817489e-01, 2.674958400934408e-01, 3.470393749429671e-01, 4.601020753985704e-01, 2.464600408510824e-01, 1.427575400622727e-04, 4.311409659161154e-04, -2.071842272667601e-04, 8.808082722943340e-01, 1.357480112752327e+00, 8.050479689084977e-01, -3.688564737527077e-02, 1.929431429665579e+00, 1.695882057817155e+00, -3.688564737527050e-02, 1.929431429665580e+00, 1.695882057817155e+00, 4.533770797384122e-08, 9.006507517295055e-08, 4.473525836540153e-08, 1.882809470331961e-07, 3.695673560289628e-07, 1.856167553307274e-07, 8.571908995805716e+00, 1.489288214502471e+01, 7.541104096016478e+00, -7.611429005994016e-11, 3.350885389426989e-17, -6.923220238619125e-11, -4.023637211532647e-10, 8.673770695270562e-13, -1.066386249024076e-10, -4.023637210482195e-10, 8.673770695270562e-13, -1.066386248063998e-10, -3.064557429671136e-06, 1.809299517292379e-08, -3.065257026262785e-06, -3.112320643630969e-06, 1.807545599629114e-08, -3.111401999313298e-06, -3.066954950542922e-06, 1.809212347410638e-08, -3.066660695390851e-06, -3.107920981039468e-06, 1.807663525628042e-08, -3.108573641680571e-06, -3.089079705584306e-06, 1.808413833346515e-08, -3.088348235872584e-06, -3.089079705584306e-06, 1.808413833346515e-08, -3.088348235872584e-06, -2.047186162309931e-06, 3.324691278596461e-06, -2.043026357892010e-06, -2.330003272434794e-06, 3.198712461362903e-06, -2.305700226095270e-06, -1.255596996810253e-06, 3.420793545345939e-06, -1.585449504135676e-06, -1.489712474056621e-06, 3.305373228471352e-06, -1.819573282592772e-06, -2.926804990137508e-06, 3.212781934568574e-06, -2.120779398213917e-06, -2.926804990137508e-06, 3.212781934568574e-06, -2.120779398213917e-06, -1.552120858031782e-03, 1.825453754003035e-03, -1.534262780645922e-03, -2.963596224830721e-02, 1.201192443406202e-03, -3.139353222431600e-02, -3.262250401215491e-05, 2.748455987594796e-03, -1.395491564755002e-03, -2.427184843213134e-02, 2.257366444272562e-03, -2.144062428564563e-02, -2.664870982465894e-03, 1.758833807333089e-03, -1.821248468867756e-03, -2.664870982465699e-03, 1.758833807333089e-03, -1.821248468867696e-03, 2.634776096133442e+00, 4.345108400965211e+00, 2.509429259954997e+00, 3.173508745755406e-01, 4.801730708975269e-01, 3.052895184128327e-01, 3.554438886378362e+00, 5.403210563745951e+00, 2.756303426024493e+00, -7.691370400011740e-04, 3.686127133635989e-06, -7.727869478840176e-04, 1.901501318820907e+00, 2.723523603638179e+00, 1.365694668349066e+00, 1.901501318820907e+00, 2.723523603638179e+00, 1.365694668349066e+00, -3.383496181994303e-11, 4.391412325733211e-24, -3.415978485271138e-11, -7.885906806956362e-11, 9.952946977518016e-18, -7.731657523213158e-11, -1.404997543041230e-10, 4.581716902253058e-25, -1.966454063316918e-10, 6.939115405548772e+00, 1.218782134268272e+01, 6.788237839964072e+00, -7.600296581420183e-11, 7.784361458058929e-20, -2.657311727552430e-10, -7.600296572036026e-11, 7.784361458058927e-20, -2.657311729060886e-10, -2.917920365241675e-01, 1.781738515145262e-03, -3.044690960218340e-01, -4.240087496759026e-02, 1.834071765417697e-03, -4.367872948953450e-02, -6.983466591973318e-02, 1.815455511527695e-03, -7.230701049453471e-02, -1.185820500430723e-01, 1.800280877020669e-03, -1.221595474072781e-01, -8.952943942681797e-02, 1.807857598825492e-03, -9.246210289699296e-02, -8.952943942681797e-02, 1.807857598825492e-03, -9.246210289699296e-02, -1.165612639240088e+00, 2.045475405717882e-03, -1.170732384746358e+00, 2.242697875045394e-03, 4.372269458584065e-03, 2.015784172733146e-03, 4.474163189612336e-05, 3.481409492639727e-03, -1.999848692860577e-04, -6.003486478405755e-03, 2.801304754186088e-03, -6.182101374037127e-03, -2.038163323400771e-03, 3.126795900343610e-03, -2.197023896777988e-03, -2.038163323400771e-03, 3.126795900343610e-03, -2.197023896777988e-03, -2.108461988064367e-02, 9.448281971276932e-04, -2.282265034978711e-02, 1.273702771910017e-01, 1.841168313207797e-01, 1.209715257517932e-01, 6.058234644029652e-02, 8.322264776862785e-02, 5.483424831200436e-02, 1.557637880704007e-02, 2.335777938713061e-02, 1.446224173472955e-02, 3.093852199053066e-02, 4.455605659310826e-02, 3.103783681461195e-02, 3.093852199053067e-02, 4.455605659310827e-02, 3.103783681461199e-02, 3.800163018064155e-03, 6.561578635696272e-03, 3.283941337364901e-03, 7.793478119898256e+00, 1.430892164753827e+01, 7.674597973479680e+00, 8.816969787406162e+00, 1.521830626896655e+01, 7.990860844498915e+00, 1.730198212458045e-02, 2.777420884472484e-02, 1.361572660451358e-02, 5.042089579202110e+00, 7.858164809404253e+00, 3.983555571858176e+00, 5.042089579202109e+00, 7.858164809404253e+00, 3.983555571858172e+00, 1.425184644552743e-04, 2.768157770177566e-04, 1.406101946940382e-04, -1.475307509800936e-12, 2.308592770889069e-85, -2.637366641063939e-12, -1.561210983860932e-11, 1.346473245321597e-36, -2.126879293820528e-11, 5.288237495659319e+00, 8.933405596013928e+00, 4.945571658060253e+00, -1.261719488621845e-10, 6.624839855865914e-22, -1.946576789487059e-10, -1.261719489211182e-10, 6.624839855865567e-22, -1.946576789319395e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
