
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wc04_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.428707990290539e+00, -1.428679603521982e+00, -1.428605721703231e+00, -1.429026983688822e+00, -1.428798812225582e+00, -1.428798812225582e+00, -4.000358832487196e-01, -3.999906101939463e-01, -3.989512690995404e-01, -4.008145668025171e-01, -3.999887518690511e-01, -3.999887518690511e-01, -1.660502335948987e-01, -1.667148627935915e-01, -1.845592893862593e-01, -1.845391816713980e-01, -1.843081492560976e-01, -1.843081492560976e-01, -1.127119622017785e-01, -1.112380047950224e-01, -1.750661374961109e-01, -1.207064058304547e-01, -1.065365614357510e-01, -1.065365614357510e-01, -6.798929257547405e-02, -6.800140449710718e-02, -1.071992797787977e-01, -6.218092992249986e-02, -6.263487403871656e-02, -6.263487403871654e-02, -3.741063439948285e-01, -3.725270476675775e-01, -3.740415218735585e-01, -3.726471931187780e-01, -3.733015055883005e-01, -3.733015055883005e-01, -4.254369625931300e-01, -4.223784325690971e-01, -4.362487178259180e-01, -4.335251430467081e-01, -4.185275990354722e-01, -4.185275990354722e-01, -1.233170216219537e-01, -9.920093040648238e-02, -1.226322980166025e-01, -9.842303405081325e-02, -1.204856752406623e-01, -1.204856752406624e-01, -1.251235588973011e-01, -1.341315558811250e-01, -1.228906312463655e-01, -1.541662049493036e-01, -1.175459965123437e-01, -1.175459965123437e-01, -5.612165059023629e-02, -5.996884451810517e-02, -3.977713863413024e-02, -1.121427640400359e-01, -4.806164427522214e-02, -4.806164427522217e-02, -8.831392285335597e-02, -9.539677522082893e-02, -9.296688147470485e-02, -9.090758082382684e-02, -9.194280863798659e-02, -9.194280863798659e-02, -8.526369663984537e-02, -1.356976839677711e-01, -1.220135531476168e-01, -1.076199346020018e-01, -1.148532449784615e-01, -1.148532449784615e-01, -1.023514177260522e-01, -1.374654620355750e-01, -1.329330509484498e-01, -1.157672460399294e-01, -1.243555731618952e-01, -1.243555731618953e-01, -1.302691284130034e-01, -1.081717095608113e-01, -1.137587780709829e-01, -1.028325373879597e-01, -1.112388566204190e-01, -1.112388566204190e-01, -7.604190455225968e-02, -3.447171335572793e-02, -4.538118430196927e-02, -1.109079447428372e-01, -4.526562228055244e-02, -4.526562228055243e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wc04_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.016465312534298e+00, 1.016460953194081e+00, 1.016440920366572e+00, 1.016442913329382e+00, 1.016400005569176e+00, 1.016375887211186e+00, 1.016678880170627e+00, 1.016726624400700e+00, 1.016451217764911e+00, 1.016612922793336e+00, 1.016451217764911e+00, 1.016612922793336e+00, 1.010407464517236e-01, 1.008367841981340e-01, 1.010170535507497e-01, 1.007995447230911e-01, 1.002984118124683e-01, 1.001186443716968e-01, 1.015695587532865e-01, 1.013603836351727e-01, 1.010239671344298e-01, 1.007909588724738e-01, 1.010239671344298e-01, 1.007909588724738e-01, -3.237897135318255e-02, -3.324565308504865e-02, -3.193439007773460e-02, -3.298015632808011e-02, -2.446535867511000e-02, -2.357873729910796e-02, -2.391065035557349e-02, -2.424191590805357e-02, -3.026727523011129e-02, -2.029800912819847e-02, -3.026727523011129e-02, -2.029800912819847e-02, -3.813283069417065e-02, -3.415345655404184e-02, -3.854908647047513e-02, -3.405818148791561e-02, -3.066872928124936e-02, -3.098803658818251e-02, -3.778375911564906e-02, -3.644216102568432e-02, -1.718200653292438e-02, -7.756682091608319e-02, -1.718200653292438e-02, -7.756682091608309e-02, -2.127429355535061e-02, -2.114430821208393e-02, -2.164304223877499e-02, -2.145321934925700e-02, -4.119477086879118e-02, -3.910832592325795e-02, -1.694020844228579e-02, -1.698749941022722e-02, -1.829032967999410e-02, -1.693926286990235e-02, -1.829032967999407e-02, -1.693926286990234e-02, 8.109964844306934e-02, 8.102797682244343e-02, 7.972674583869968e-02, 7.969946538167619e-02, 8.103056942717607e-02, 8.098626923080345e-02, 7.985098964280361e-02, 7.978090630283949e-02, 8.039187642434220e-02, 8.035991373390310e-02, 8.039187642434220e-02, 8.035991373390310e-02, 9.317243307883329e-02, 9.315549531533421e-02, 9.243329754135159e-02, 9.236258594862662e-02, 9.733101588588892e-02, 9.649144791884151e-02, 9.671395175272632e-02, 9.591095376776101e-02, 8.994015504556437e-02, 9.171164633156427e-02, 8.994015504556437e-02, 9.171164633156427e-02, -5.465089614436092e-02, -5.521987941437796e-02, -7.928398544184255e-02, -7.958178067724726e-02, -5.490849485705370e-02, -5.040425544786189e-02, -7.690485355411970e-02, -7.108338731677523e-02, -5.341231704489716e-02, -6.189704773413716e-02, -5.341231704489714e-02, -6.189704773413710e-02, -4.153766005498748e-02, -4.058856142966884e-02, -3.641897836380462e-02, -3.584056665185284e-02, -4.344343522049199e-02, -3.919841753154953e-02, -8.211145549203380e-02, -8.229340113577531e-02, -4.161480435697443e-02, -3.513690990841549e-02, -4.161480435697443e-02, -3.513690990841549e-02, -1.455048922029291e-02, -1.483738956891477e-02, -1.641237497239881e-02, -1.656743622630651e-02, -1.203268544310561e-02, -1.192318022674940e-02, -4.112156593372947e-02, -4.094514292579005e-02, -1.404596724684449e-02, -1.413670245874396e-02, -1.404596724684452e-02, -1.413670245874396e-02, -8.734217577571048e-02, -8.688760948059307e-02, -7.916833707657756e-02, -7.875184991338009e-02, -8.185230980342514e-02, -8.143990938044365e-02, -8.423633101913418e-02, -8.378178429933061e-02, -8.302752421394563e-02, -8.259366797600351e-02, -8.302752421394563e-02, -8.259366797600351e-02, -8.945294140069919e-02, -8.897312689465113e-02, -4.226727358976336e-02, -4.178117277929064e-02, -5.152418733502031e-02, -5.114498843723413e-02, -6.381015640661372e-02, -6.337409075360655e-02, -5.731231165607450e-02, -5.682913559949244e-02, -5.731231165607450e-02, -5.682913559949244e-02, -7.853499028526691e-02, -7.884110205458819e-02, -3.496113652608703e-02, -3.424363030344762e-02, -3.544310496410274e-02, -3.429831286456170e-02, -4.411213789045725e-02, -4.344448428905518e-02, -3.787607784596832e-02, -3.804019801994191e-02, -3.787607784596850e-02, -3.804019801994202e-02, -4.321366004599662e-02, -4.254560516506893e-02, -4.036287173162231e-02, -4.011245959361141e-02, -4.282696579470543e-02, -4.108376956255536e-02, -5.029825860212013e-02, -4.876942815781186e-02, -4.221358541325744e-02, -3.729600301052608e-02, -4.221358541325746e-02, -3.729600301052606e-02, -2.512047776312850e-02, -2.487502778562564e-02, -7.990313661524959e-03, -7.414420705183127e-03, -1.160526188391893e-02, -1.159846439413649e-02, -4.043362332299975e-02, -3.938850849585169e-02, -1.258446415477041e-02, -1.362586274112108e-02, -1.258446415477043e-02, -1.362586274112106e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wc04_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.452695523982250e-08, 1.463652377038497e-15, -1.452703851854108e-08, -1.452687346672794e-08, 1.463631512328463e-15, -1.452697905060343e-08, -1.452643312074334e-08, 1.463532316351641e-15, -1.452639811333085e-08, -1.452736120367414e-08, 1.463842899785011e-15, -1.452757960317828e-08, -1.452691549512700e-08, 1.463681083685537e-15, -1.452697580986332e-08, -1.452691549512700e-08, 1.463681083685537e-15, -1.452697580986332e-08, -1.918960985835163e-05, 1.902747638536066e-11, -1.919683114249027e-05, -1.919014278535785e-05, 1.902725761814505e-11, -1.919790620644834e-05, -1.920855577354227e-05, 1.901971754504621e-11, -1.921294297326196e-05, -1.916428431128225e-05, 1.901358235030523e-11, -1.916998689585273e-05, -1.920001596348636e-05, 1.902491360705296e-11, -1.918465336509404e-05, -1.920001596348636e-05, 1.902491360705296e-11, -1.918465336509404e-05, -1.199894243773697e-02, 1.144533678933034e-07, -1.201029536430955e-02, -1.200506493445636e-02, 1.151156568500561e-07, -1.201833694265590e-02, -1.211728966611844e-02, 1.320750241138922e-07, -1.211500035833119e-02, -1.177564962443052e-02, 1.265386257803329e-07, -1.178198272624305e-02, -1.194630702744339e-02, 1.376562597771172e-07, -1.169173606015439e-02, -1.194630702744339e-02, 1.376562597771172e-07, -1.169173606015439e-02, -1.613989779018996e+00, 6.012876550391962e-05, -1.457640520051738e+00, -1.583246681163832e+00, 5.680272535784820e-05, -1.407610230345565e+00, -6.951940633188449e-03, 5.322727974273029e-08, -6.501302994213208e-03, -3.174957607219277e+00, 1.675901373768304e-04, -3.035934172023110e+00, -1.376344151128416e+00, 2.382014110698246e-04, -7.768407011728601e+00, -1.376344151128416e+00, 2.382014110698246e-04, -7.768407011728607e+00, -2.223712393551791e+04, 1.111914508308031e-11, -1.862768695415136e+04, -1.973401223403608e+04, 4.562559950974850e-11, -1.617581012530190e+04, -1.281423863575609e+02, 1.838627425311693e-03, -1.103288806454194e+02, -9.374808914469104e+04, 4.136895542502456e-21, -9.764312017051574e+04, -3.085006970419815e+04, 1.070835888305008e-16, -2.027864989761569e+05, -3.085006970419818e+04, 1.070835888305008e-16, -2.027864989761568e+05, -4.377545988900104e-06, 2.233703107768369e-12, -4.381481418921615e-06, -4.380716069090568e-06, 2.231537777319893e-12, -4.384548506724427e-06, -4.377675880635822e-06, 2.233595490630417e-12, -4.381553755305777e-06, -4.380396331558607e-06, 2.231683364972891e-12, -4.384340346656637e-06, -4.379204134325252e-06, 2.232609670798167e-12, -4.383026751752612e-06, -4.379204134325252e-06, 2.232609670798167e-12, -4.383026751752612e-06, -1.462209503129374e-04, 4.104557134069705e-10, -1.462472116568849e-04, -1.431772824485202e-04, 3.949027730077658e-10, -1.433049932323914e-04, -1.466095857073742e-04, 4.223201907834492e-10, -1.465541977317945e-04, -1.439755935036423e-04, 4.080707689470805e-10, -1.438603659173463e-04, -1.441677973234657e-04, 3.966397450084659e-10, -1.446619391243754e-04, -1.441677973234657e-04, 3.966397450084659e-10, -1.446619391243754e-04, -2.441420735180558e-02, 2.253646609880290e-07, -2.469072284881734e-02, -2.193879152735962e-02, 1.482953633834817e-07, -2.197247273752434e-02, -3.454810680269865e-02, 3.393155540240489e-07, -3.057758654027960e-02, -3.680385559834527e-02, 2.786872153422915e-07, -3.216831209961894e-02, -2.151643588672387e-02, 2.171399762139616e-07, -2.613530670905005e-02, -2.151643588672388e-02, 2.171399762139616e-07, -2.613530670905006e-02, -8.033868712777354e+00, 5.364331359216309e-04, -7.887631639073082e+00, -1.205034623892774e+00, 5.928062603673171e-05, -1.187149045139963e+00, -1.085490125081012e+01, 6.670630325612285e-04, -9.383099650027267e+00, -2.683638049767921e-04, 4.550774239056777e-10, -2.688942162224787e-04, -5.917714445685562e+00, 3.362374819306394e-04, -5.520537252778174e+00, -5.917714445685562e+00, 3.362374819306394e-04, -5.520537252778174e+00, -2.360057150742378e+05, 5.421496698436063e-28, -2.028680788794173e+05, -1.104704342169844e+05, 1.228758886113335e-21, -1.034550186903113e+05, -4.153359410186994e+05, 5.656440620065503e-29, -3.628439801897472e+05, -3.318910890466647e+01, 1.504669301565768e-03, -3.225114337588065e+01, -3.213521895653391e+05, 9.610322787727073e-24, -1.283272882510439e+05, -3.213521895653387e+05, 9.610322787727070e-24, -1.283272882510438e+05, -3.299697947223983e-02, 2.199677179191681e-07, -3.254616444430270e-02, -3.106912671693587e-02, 2.264286130145305e-07, -3.065546428745451e-02, -3.163765362441014e-02, 2.241303100651475e-07, -3.121674041182873e-02, -3.219111037890714e-02, 2.222568983976134e-07, -3.175124837716362e-02, -3.190447981278684e-02, 2.231922961512953e-07, -3.147424323646979e-02, -3.190447981278684e-02, 2.231922961512953e-07, -3.147424323646979e-02, -3.803084811695441e-02, 2.525278278664052e-07, -3.754290923759661e-02, -4.199971392801318e-02, 5.397863529116129e-07, -4.145042974097238e-02, -3.936386602841274e-02, 4.298036410666330e-07, -3.885461630758073e-02, -3.768538030966874e-02, 3.458400931093936e-07, -3.722330703779732e-02, -3.848524933762396e-02, 3.860241852276062e-07, -3.798767451271767e-02, -3.848524933762396e-02, 3.860241852276062e-07, -3.798767451271767e-02, -1.799129319896016e-02, 1.166454564355177e-07, -1.796405806462211e-02, -5.795896788757298e-01, 2.273047300256539e-05, -5.701940417096978e-01, -3.437363513368182e-01, 1.027440095908986e-05, -3.353745726265445e-01, -1.612669352947848e-01, 2.883676467546989e-06, -1.583319453398249e-01, -2.344347940707114e-01, 5.500747727544229e-06, -2.355345884149786e-01, -2.344347940707115e-01, 5.500747727544231e-06, -2.355345884149787e-01, -5.816407419787138e-02, 8.100714365057126e-07, -5.703718229995643e-02, -1.314451566390557e+02, 1.766533536733120e-03, -1.290182647690586e+02, -5.759427537808188e+01, 1.878803243082290e-03, -5.297424318109697e+01, -2.101122590165547e-01, 3.428914672188251e-06, -2.003038222983115e-01, -1.865000075061776e+01, 9.701438036301546e-04, -1.710139390557293e+01, -1.865000075061776e+01, 9.701438036301546e-04, -1.710139390557293e+01, -7.461886268983936e+03, 3.417478728614279e-08, -6.778697230835161e+03, -6.977025717641215e+06, 2.850114531961813e-89, -8.118644166314764e+06, -7.828928211602451e+05, 1.662312648545182e-40, -6.668073735079113e+05, -2.166858017264137e+01, 1.102889579754806e-03, -2.061477031220693e+01, -4.600670167347246e+05, 8.178814636871498e-26, -1.666009897314289e+05, -4.600670167347257e+05, 8.178814636871071e-26, -1.666009897314295e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
