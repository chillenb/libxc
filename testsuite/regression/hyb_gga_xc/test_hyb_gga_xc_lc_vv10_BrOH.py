
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_vv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.074273660657275e+01, -2.074276119983435e+01, -2.074294631662606e+01, -2.074254209355535e+01, -2.074274894594453e+01, -2.074274894594453e+01, -3.262358631998996e+00, -3.262333660404868e+00, -3.261790976541841e+00, -3.263462841668087e+00, -3.262360577329511e+00, -3.262360577329511e+00, -4.874620449022828e-01, -4.872188438601233e-01, -4.831268601453158e-01, -4.875976213489868e-01, -4.873708275992651e-01, -4.873708275992651e-01, -5.419901566798220e-02, -5.561406987860955e-02, -6.072047070785115e-01, -2.724120225961667e-02, -5.461670407006526e-02, -5.461670407006526e-02, -8.269023180525401e-06, -9.516960557535512e-06, -8.004892724372619e-04, -9.006795350306526e-07, -9.225129903240780e-06, -9.225129903240780e-06, -4.838847074531256e+00, -4.838459963888228e+00, -4.838813251243939e+00, -4.838512137813044e+00, -4.838639975554110e+00, -4.838639975554110e+00, -1.882681552974628e+00, -1.892615699795694e+00, -1.883636008628146e+00, -1.891356101683033e+00, -1.888225770091974e+00, -1.888225770091974e+00, -3.890299136999454e-01, -4.333155564960666e-01, -3.619001513112219e-01, -3.820221986230118e-01, -4.089240293955558e-01, -4.089240293955558e-01, -1.221545282467343e-02, -5.963436650066598e-02, -1.162322948678527e-02, -1.638844892250784e+00, -1.797561912152762e-02, -1.797561912152762e-02, -8.085779063967578e-07, -1.208012789194314e-06, -5.102406140552102e-07, -2.565135024193290e-03, -9.147814687872410e-07, -9.147814687872423e-07, -4.063776016034272e-01, -4.020352809453148e-01, -4.034965863939143e-01, -4.046949577757134e-01, -4.040873497121729e-01, -4.040873497121729e-01, -3.894418713209942e-01, -3.217109004850172e-01, -3.386780939952575e-01, -3.561146937845043e-01, -3.469710332178167e-01, -3.469710332178167e-01, -4.610689456012056e-01, -9.322801204676545e-02, -1.242212030998210e-01, -1.838958039540459e-01, -1.510192632408605e-01, -1.510192632408605e-01, -2.762348151899706e-01, -6.117742112855006e-04, -1.770200245157555e-03, -1.673345722793188e-01, -6.246865178137746e-03, -6.246865178137781e-03, -1.332136628495189e-05, -2.469961579918041e-08, -1.695464109079200e-07, -5.335806654021864e-03, -5.618450672733245e-07, -5.618450672664808e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_vv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.501542942131732e+01, -2.501551707200992e+01, -2.501591455690256e+01, -2.501447912899997e+01, -2.501547559133956e+01, -2.501547559133956e+01, -3.896295955267675e+00, -3.896340026402606e+00, -3.897718095242693e+00, -3.896199969885294e+00, -3.896335818950381e+00, -3.896335818950381e+00, -6.095979243858292e-01, -6.080258170716881e-01, -5.664762698179205e-01, -5.730576172814220e-01, -6.090284746906820e-01, -6.090284746906820e-01, -8.598548641078645e-02, -8.971211427630821e-02, -7.795136586830654e-01, -4.034403224303697e-02, -8.710955235182413e-02, -8.710955235182413e-02, -1.711309846139544e-05, -1.974621775539755e-05, -1.787563939219633e-03, -1.815405843164163e-06, -1.915485047124884e-05, -1.915485047124884e-05, -6.075704684470975e+00, -6.078577124970192e+00, -6.075997820465770e+00, -6.078231304720310e+00, -6.077178251840377e+00, -6.077178251840377e+00, -2.006237532990251e+00, -2.023950845984990e+00, -1.996911099194675e+00, -2.010591423837210e+00, -2.030843470373549e+00, -2.030843470373549e+00, -5.512873539515889e-01, -6.276378460609069e-01, -5.153670360616726e-01, -5.579971844113584e-01, -5.808382273681096e-01, -5.808382273681096e-01, -2.065897214579503e-02, -7.530670167876778e-02, -1.991462957712568e-02, -2.208448645673218e+00, -2.852233863021578e-02, -2.852233863021578e-02, -1.629762698033053e-06, -2.439455384807276e-06, -1.038003921438221e-06, -5.474174097289380e-03, -1.851986530945827e-06, -1.851986530942764e-06, -5.885670397925460e-01, -5.853285760038514e-01, -5.867729319902750e-01, -5.876839113178316e-01, -5.872519222105078e-01, -5.872519222105078e-01, -5.645188100666754e-01, -4.444749807596428e-01, -4.846919269325697e-01, -5.196557669837845e-01, -5.023653533418143e-01, -5.023653533418144e-01, -6.647582181531040e-01, -1.155667495354571e-01, -1.654711916426724e-01, -2.759138077827702e-01, -2.184503416423844e-01, -2.184503416423844e-01, -3.881434330070010e-01, -1.354375597742760e-03, -3.847902529540261e-03, -2.645434039827593e-01, -1.206392503587877e-02, -1.206392503587889e-02, -2.754580480824125e-05, -4.949147104389151e-08, -3.407430810613740e-07, -1.069364620640392e-02, -1.139070813866919e-06, -1.139070813863996e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_vv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.859720102783299e-09, -6.859674564487156e-09, -6.859392906379248e-09, -6.860140165471343e-09, -6.859696743672553e-09, -6.859696743672553e-09, -8.375311024643625e-06, -8.375338514796764e-06, -8.374741031822581e-06, -8.368886732611490e-06, -8.375187268192857e-06, -8.375187268192857e-06, -3.456503333570008e-03, -3.480079052425689e-03, -4.040044362910084e-03, -3.929744425094846e-03, -3.465057979440488e-03, -3.465057979440488e-03, -6.352544541779856e-02, -4.874022332562306e-02, -1.762432322573786e-03, -1.817694368479634e-01, -5.895505773871784e-02, -5.895505773871784e-02, 2.944585065272382e-02, 3.171985937539599e-02, 3.165285407067951e-02, 5.520486192683701e-03, 3.306448195808464e-02, 3.306448195808464e-02, -1.785446640454712e-06, -1.783711989617136e-06, -1.785267590660522e-06, -1.783919067917462e-06, -1.784564036796008e-06, -1.784564036796008e-06, -6.696923829611175e-05, -6.561668918177280e-05, -6.703508064205423e-05, -6.598975902505252e-05, -6.591966327117220e-05, -6.591966327117220e-05, -2.611332344297250e-03, 1.289649725361017e-03, -2.983622493056910e-03, 1.163730576735557e-03, -2.053477942156050e-03, -2.053477942156050e-03, -1.536957351197958e-01, -1.367633737739728e-01, -1.529975766684457e-01, -4.883348986289264e-05, -1.799436132741105e-01, -1.799436132741105e-01, 5.689335954520731e-03, 7.086290646513893e-03, 2.145300451694292e-02, -1.288344846622666e-02, 1.094688143684159e-02, 1.094688143711860e-02, 4.247338900388404e-03, 2.378523676073822e-03, 2.987151265350350e-03, 3.501572204391767e-03, 3.239225766476631e-03, 3.239225766476629e-03, 5.495625310283161e-03, -6.197357407237168e-03, -3.331824097626090e-03, -4.782982884366412e-04, -1.938029805803893e-03, -1.938029805803890e-03, 6.695978349912160e-04, -8.836719033829980e-02, -5.082624630583019e-02, -8.616408278093658e-03, -2.399972078836266e-02, -2.399972078836284e-02, -7.820280683910904e-03, 2.449488332461291e-02, -1.359522219261791e-03, 9.524441548157583e-03, -8.729911916917305e-02, -8.729911916917207e-02, 2.430647622418719e-02, 1.779833307659041e-03, 4.326525763668135e-03, -5.250993975505372e-02, 1.480855274469035e-02, 1.480855274385418e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
