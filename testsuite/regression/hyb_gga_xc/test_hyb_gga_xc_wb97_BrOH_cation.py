
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.092779926224446e+01, -2.092782649274837e+01, -2.092801640964341e+01, -2.092760985882429e+01, -2.092781309358830e+01, -2.092781309358830e+01, -3.317038161095923e+00, -3.317001439171694e+00, -3.316238705700688e+00, -3.318231074303939e+00, -3.317078922430898e+00, -3.317078922430898e+00, -5.175504199318650e-01, -5.173811883065783e-01, -5.144589377756790e-01, -5.193664277341997e-01, -5.205789095171862e-01, -5.205789095171862e-01, -5.172697268143427e-02, -5.427526433575262e-02, -6.257315750287070e-01, -1.731417597387259e-02, -4.046720238618493e-02, -4.046720238618500e-02, 2.624108986646970e-03, 2.744414231738366e-03, 1.103373952827220e-02, 1.577609059708345e-03, 7.332415878221961e-04, 7.332415878221863e-04, -4.899279446338919e+00, -4.898783086123401e+00, -4.899266816368326e+00, -4.898828419888356e+00, -4.899021873527307e+00, -4.899021873527307e+00, -1.944502427639599e+00, -1.953821000233244e+00, -1.947838754950464e+00, -1.955895456497190e+00, -1.948281662581469e+00, -1.948281662581469e+00, -4.115603411099884e-01, -4.541851843898645e-01, -3.728643310675863e-01, -3.844377909014470e-01, -4.187915649655541e-01, -4.187915649655541e-01, 4.940472482750148e-03, -5.237850044402913e-02, 7.468380310539313e-03, -1.670805313454353e+00, -1.308545451196431e-03, -1.308545451196431e-03, 1.225331113446047e-03, 1.544259652607786e-03, 1.184161218186440e-03, 1.333365373688785e-02, 1.063350551559710e-03, 1.063350551559692e-03, -4.145450707463190e-01, -4.072066454560591e-01, -4.102602606649213e-01, -4.126240711600448e-01, -4.114914512510834e-01, -4.114914512510834e-01, -3.997632002629058e-01, -3.372207918502467e-01, -3.483753753291393e-01, -3.603824802967820e-01, -3.535564350260368e-01, -3.535564350260368e-01, -4.821718373390922e-01, -9.327290141473286e-02, -1.322667381872998e-01, -2.016184620904944e-01, -1.655693644065817e-01, -1.655693644065818e-01, -2.997155665828101e-01, 1.079756801903391e-02, 1.243367069106653e-02, -1.852205688863131e-01, 1.211090376846698e-02, 1.211090376846704e-02, 3.620650460002205e-03, 4.255308258111907e-04, 8.735450563067171e-04, 1.294571928981660e-02, 1.046136638308503e-03, 1.046136638308503e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.512042059607027e+01, -2.512039139441451e+01, -2.512053587885244e+01, -2.512047489722776e+01, -2.512087497217320e+01, -2.512096992625597e+01, -2.511957675856578e+01, -2.511931163363533e+01, -2.512049549886693e+01, -2.511994908862076e+01, -2.512049549886693e+01, -2.511994908862076e+01, -3.907106180375870e+00, -3.907410203701529e+00, -3.907151926226487e+00, -3.907471296089126e+00, -3.908436479629561e+00, -3.908857257036047e+00, -3.906875690712295e+00, -3.907319219216547e+00, -3.906331750553398e+00, -3.908507928333480e+00, -3.906331750553398e+00, -3.908507928333480e+00, -6.179397894611063e-01, -6.225014911293683e-01, -6.164726371164949e-01, -6.220357729529770e-01, -5.967461614328441e-01, -5.889260745876889e-01, -5.979371794862234e-01, -6.005028340012332e-01, -6.308892535146899e-01, -5.494082585642959e-01, -6.308892535146899e-01, -5.494082585642959e-01, -1.240753229409042e-01, -1.080446721616002e-01, -1.299511769855873e-01, -1.120599146727447e-01, -7.299885688925718e-01, -7.643580809940824e-01, -4.447144949842028e-02, -4.272534085374202e-02, -2.320208886385431e-02, -8.046084800485132e-02, -2.320208886385466e-02, -8.046084800485342e-02, 4.122169748726458e-03, 2.925767055676143e-03, 4.413645048252013e-03, 2.994080657825080e-03, 1.940370861803797e-02, 1.324983730812368e-02, 1.987919887493751e-03, 2.191074552853276e-03, -1.891704485563374e-04, 7.430261632356145e-03, -1.891704485562013e-04, 7.430261632355835e-03, -6.116315668692613e+00, -6.114780733911973e+00, -6.119741443688527e+00, -6.118083146827462e+00, -6.116504053332222e+00, -6.114889334448765e+00, -6.119438271039853e+00, -6.117894805140431e+00, -6.118074024228426e+00, -6.116437628095445e+00, -6.118074024228426e+00, -6.116437628095445e+00, -1.935197446243358e+00, -1.935088629657586e+00, -1.961423469259199e+00, -1.960722649466291e+00, -1.890340096625596e+00, -1.903306418879436e+00, -1.914335486131616e+00, -1.927001913389404e+00, -1.980068008355236e+00, -1.953402649792678e+00, -1.980068008355236e+00, -1.953402649792678e+00, -5.400422892922826e-01, -5.389209504489462e-01, -6.720230388923858e-01, -6.727192585012012e-01, -4.726352158250892e-01, -4.941750453323562e-01, -5.665371409614297e-01, -5.830773881454584e-01, -5.716905385018254e-01, -5.408553298890815e-01, -5.716905385018247e-01, -5.408553298890807e-01, 8.133763604172251e-03, 7.182298717318715e-03, -8.104899918193388e-02, -7.951650150603934e-02, 1.680823554256537e-02, 7.738948829329528e-03, -2.257413775096611e+00, -2.256488329194704e+00, -1.816888109298306e-02, -6.561913749935468e-03, -1.816888109298306e-02, -6.561913749935468e-03, 1.818526302281909e-03, 1.450140077878948e-03, 2.134517633206872e-03, 1.956880740309256e-03, 1.866130519369011e-03, 1.329935611243591e-03, 2.174708938781412e-02, 2.062460421399548e-02, 3.864670623322694e-03, 4.756131574245488e-04, 3.864670623322789e-03, 4.756131574246048e-04, -5.936868256363462e-01, -5.956319808547832e-01, -6.080585948561703e-01, -6.104673140139795e-01, -6.072551042435063e-01, -6.091963237312359e-01, -6.021283798079080e-01, -6.039013102576349e-01, -6.051635452248652e-01, -6.069806543616113e-01, -6.051635452248652e-01, -6.069806543616113e-01, -5.737937585092640e-01, -5.757032484089966e-01, -4.211410805052991e-01, -4.227483898781513e-01, -4.485885221161042e-01, -4.513558727837430e-01, -5.048667052992922e-01, -5.073571872488560e-01, -4.714857484959682e-01, -4.737371429964494e-01, -4.714857484959682e-01, -4.737371429964494e-01, -7.082029588948073e-01, -7.103843600324267e-01, -1.353768146721055e-01, -1.331596974880398e-01, -1.944577319790660e-01, -1.914167465713380e-01, -2.671120975777933e-01, -2.677461834516776e-01, -2.335925238763810e-01, -2.334452480753025e-01, -2.335925238763828e-01, -2.334452480753061e-01, -3.780528883938937e-01, -3.802441698582574e-01, 1.587496803550415e-02, 1.514649411034950e-02, 2.155003043469245e-02, 1.650542160539866e-02, -2.451671089167382e-01, -2.485119989350041e-01, 2.184423320602098e-02, 1.422933126251234e-02, 2.184423320602064e-02, 1.422933126251178e-02, 5.293306665579952e-03, 4.337612453694593e-03, 5.706567384383168e-04, 5.624223319407936e-04, 1.397114289296050e-03, 9.633627300264593e-04, 2.105226915165903e-02, 1.806780686419785e-02, 3.395630212355368e-03, 5.448353755478604e-04, 3.395630212355187e-03, 5.448353755479933e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.437763796378026e-08, 0.000000000000000e+00, -1.437771738449765e-08, -1.437752753704740e-08, 0.000000000000000e+00, -1.437763954079212e-08, -1.437704675271108e-08, 0.000000000000000e+00, -1.437697433498204e-08, -1.437826566379677e-08, 0.000000000000000e+00, -1.437856297473213e-08, -1.437754794608059e-08, 0.000000000000000e+00, -1.437785345840135e-08, -1.437754794608059e-08, 0.000000000000000e+00, -1.437785345840135e-08, -1.851509346207359e-05, 0.000000000000000e+00, -1.851654456625289e-05, -1.851528336443655e-05, 0.000000000000000e+00, -1.851690379453247e-05, -1.852117104021359e-05, 0.000000000000000e+00, -1.852009533093566e-05, -1.849912412758727e-05, 0.000000000000000e+00, -1.849862018466079e-05, -1.852751723309991e-05, 0.000000000000000e+00, -1.850127160889688e-05, -1.852751723309991e-05, 0.000000000000000e+00, -1.850127160889688e-05, -9.011263236771658e-03, 0.000000000000000e+00, -8.885145823709485e-03, -9.021469569661286e-03, 0.000000000000000e+00, -8.866962756259084e-03, -8.927077623976168e-03, 0.000000000000000e+00, -9.204195307620540e-03, -8.874145091053226e-03, 0.000000000000000e+00, -8.788107634992274e-03, -7.788963843389145e-03, 0.000000000000000e+00, -1.058877007969090e-02, -7.788963843389145e-03, 0.000000000000000e+00, -1.058877007969090e-02, 4.628826224698567e-01, 0.000000000000000e+00, 1.235459129678452e-01, 5.139570232070907e-01, 0.000000000000000e+00, 1.349546214085741e-01, -5.648239277272503e-03, 0.000000000000000e+00, -5.027728481955807e-03, -1.208037565880354e-01, 0.000000000000000e+00, -2.682848546666210e-01, -1.059766697899491e+00, 0.000000000000000e+00, 1.010069597599563e+01, -1.059766697899502e+00, 0.000000000000000e+00, 1.010069597599576e+01, -1.615206057092296e+01, 0.000000000000000e+00, -1.010606048934786e+01, -1.746145082671485e+01, 0.000000000000000e+00, -1.026761986467202e+01, -5.755047352970382e+00, 0.000000000000000e+00, -3.982108728722687e+00, -1.154073929035525e+01, 0.000000000000000e+00, -1.312600367475053e+01, -2.162655632542199e+00, 0.000000000000000e+00, -1.557458382974017e+02, -2.162655632386819e+00, 0.000000000000000e+00, -1.557458382965492e+02, -3.847523863801722e-06, 0.000000000000000e+00, -3.851400137982462e-06, -3.841609354813405e-06, 0.000000000000000e+00, -3.845743231538567e-06, -3.847180432216992e-06, 0.000000000000000e+00, -3.851224081556923e-06, -3.842149814065684e-06, 0.000000000000000e+00, -3.846042954808280e-06, -3.844500401732167e-06, 0.000000000000000e+00, -3.848584546387170e-06, -3.844500401732167e-06, 0.000000000000000e+00, -3.848584546387170e-06, -1.686629944314858e-04, 0.000000000000000e+00, -1.686949900512886e-04, -1.632571398848878e-04, 0.000000000000000e+00, -1.634340918712875e-04, -1.752370518292582e-04, 0.000000000000000e+00, -1.731740643457088e-04, -1.701706971770116e-04, 0.000000000000000e+00, -1.681725023406688e-04, -1.612010746661440e-04, 0.000000000000000e+00, -1.654764548914803e-04, -1.612010746661440e-04, 0.000000000000000e+00, -1.654764548914803e-04, -1.610255785279950e-02, 0.000000000000000e+00, -1.622575410610655e-02, 1.367860988261523e-02, 0.000000000000000e+00, 1.414923305866475e-02, -2.397972998875707e-02, 0.000000000000000e+00, -2.003745995204202e-02, 1.742740926234203e-02, 0.000000000000000e+00, 1.367877453788164e-02, -1.274794331034739e-02, 0.000000000000000e+00, -1.636759034846540e-02, -1.274794331034717e-02, 0.000000000000000e+00, -1.636759034846541e-02, -1.335828763687690e+00, 0.000000000000000e+00, -1.407951423995976e+00, -2.451574907253586e-01, 0.000000000000000e+00, -2.679837357568344e-01, -1.561393848026282e+00, 0.000000000000000e+00, -1.676650812529653e+00, -6.804095025526202e-05, 0.000000000000000e+00, -6.804562268240826e-05, -1.693350835195156e-02, 0.000000000000000e+00, -1.141671271844936e+00, -1.693350835195156e-02, 0.000000000000000e+00, -1.141671271844936e+00, -1.933494490094962e+01, 0.000000000000000e+00, -1.429233864318774e+01, -1.541319632195007e+01, 0.000000000000000e+00, -1.368671113481324e+01, -1.143525634252351e+02, 0.000000000000000e+00, -7.378054136493635e+01, -3.565496838654216e+00, 0.000000000000000e+00, -3.425922185409054e+00, -1.288225497924532e+02, 0.000000000000000e+00, -1.155260594250928e+01, -1.288225497927218e+02, 0.000000000000000e+00, -1.155260594285256e+01, 5.844268618815383e-04, 0.000000000000000e+00, -2.497980943257438e-04, 2.334800366089137e-02, 0.000000000000000e+00, 2.335581685567968e-02, 2.453643160016116e-02, 0.000000000000000e+00, 2.398615264932167e-02, 1.867306662453188e-02, 0.000000000000000e+00, 1.774198221307923e-02, 2.263263597445453e-02, 0.000000000000000e+00, 2.184919008262142e-02, 2.263263597445453e-02, 0.000000000000000e+00, 2.184919008262142e-02, 5.150330580096423e-03, 0.000000000000000e+00, 5.571056589498538e-03, -2.660347455171769e-02, 0.000000000000000e+00, -2.632426783327302e-02, -2.666211299954746e-02, 0.000000000000000e+00, -2.604848208550506e-02, -1.347258457365233e-02, 0.000000000000000e+00, -1.287070583966276e-02, -2.321642797043499e-02, 0.000000000000000e+00, -2.268494261465288e-02, -2.321642797043499e-02, 0.000000000000000e+00, -2.268494261465288e-02, 8.942876328495476e-03, 0.000000000000000e+00, 9.610031457136856e-03, -1.320732302109578e-01, 0.000000000000000e+00, -1.443844541304995e-01, -6.083047857983579e-02, 0.000000000000000e+00, -7.042525902468041e-02, -6.985100915345099e-02, 0.000000000000000e+00, -6.981673533294726e-02, -5.618794065242251e-02, 0.000000000000000e+00, -5.582170618520527e-02, -5.618794065242209e-02, 0.000000000000000e+00, -5.582170618520751e-02, -3.456693432886552e-02, 0.000000000000000e+00, -3.406158195687211e-02, -4.620920542362656e+00, 0.000000000000000e+00, -4.409380278791624e+00, -4.090081810901372e+00, 0.000000000000000e+00, -3.387711798669217e+00, -1.085255070827071e-01, 0.000000000000000e+00, -1.039216972323210e-01, -2.148412949472036e+00, 0.000000000000000e+00, -2.555598861810576e+00, -2.148412949472110e+00, 0.000000000000000e+00, -2.555598861810481e+00, -1.127895270717337e+01, 0.000000000000000e+00, -8.579316555981666e+00, -7.581361377710978e+01, 0.000000000000000e+00, -7.620282274882749e+01, -4.505369207548740e+01, 0.000000000000000e+00, -2.808706355875623e+01, -2.744349377707576e+00, 0.000000000000000e+00, -2.666572980692751e+00, -1.832487417086000e+02, 0.000000000000000e+00, -2.007291661435880e+01, -1.832487417089834e+02, 0.000000000000000e+00, -2.007291661462741e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
