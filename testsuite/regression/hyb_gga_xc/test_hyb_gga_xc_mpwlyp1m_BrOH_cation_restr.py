
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpwlyp1m_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.008191688004601e+01, -2.008194233871794e+01, -2.008212147676580e+01, -2.008174134196536e+01, -2.008193114604273e+01, -2.008193114604273e+01, -3.377913445011683e+00, -3.377877887778689e+00, -3.377137380808501e+00, -3.379056555528920e+00, -3.377951002579711e+00, -3.377951002579711e+00, -7.026408767637925e-01, -7.025218682936888e-01, -7.009025659094256e-01, -7.057456968750758e-01, -7.040565315727002e-01, -7.040565315727002e-01, -2.107689849029477e-01, -2.126351326238780e-01, -8.088150009595798e-01, -1.718453858558522e-01, -1.870240260087770e-01, -1.870240260087770e-01, -1.856654007099966e-03, -2.056572896636901e-03, -5.236049021759036e-02, -7.796041218910987e-04, -1.119210249677864e-03, -1.119210249677864e-03, -4.870580468084224e+00, -4.869927259326222e+00, -4.870561006929239e+00, -4.869984203883077e+00, -4.870243609283633e+00, -4.870243609283633e+00, -2.064588584465066e+00, -2.074412686814148e+00, -2.065006381714112e+00, -2.073686795931835e+00, -2.069804904084327e+00, -2.069804904084327e+00, -5.932709472862022e-01, -6.172389884383577e-01, -5.541132842744928e-01, -5.527840806236410e-01, -5.993946579860915e-01, -5.993946579860915e-01, -1.283388516727045e-01, -2.187554572069561e-01, -1.208636518448949e-01, -1.785254985165822e+00, -1.460859413393748e-01, -1.460859413393748e-01, -5.653861753516600e-04, -7.676870814084396e-04, -6.410196724301910e-04, -9.011497381692389e-02, -7.692302334684250e-04, -7.692302334684252e-04, -5.659477810082600e-01, -5.692389364601049e-01, -5.681773529079738e-01, -5.672313806827902e-01, -5.677124862524785e-01, -5.677124862524785e-01, -5.492055061793946e-01, -5.195828432850729e-01, -5.294164149426834e-01, -5.379373509933006e-01, -5.335567631418999e-01, -5.335567631418999e-01, -6.468899466720965e-01, -2.666716353822511e-01, -3.075119057350212e-01, -3.746496499051626e-01, -3.391250131188326e-01, -3.391250131188326e-01, -4.804425232516361e-01, -4.802539904726497e-02, -7.109271608248087e-02, -3.539649732565796e-01, -1.093530740331034e-01, -1.093530740331034e-01, -3.370589395509282e-03, -1.697570929704009e-04, -3.870788773215035e-04, -1.044557562106429e-01, -7.054071075113973e-04, -7.054071075113969e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpwlyp1m_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.402622174156645e+01, -2.402631113292171e+01, -2.402669293487784e+01, -2.402536330473606e+01, -2.402606221727967e+01, -2.402606221727967e+01, -3.928618458240736e+00, -3.928653384438097e+00, -3.929556180914721e+00, -3.928720631703669e+00, -3.928753393865398e+00, -3.928753393865398e+00, -7.931911531294767e-01, -7.921978690344126e-01, -7.694404839566991e-01, -7.754949649608675e-01, -7.742789533295068e-01, -7.742789533295068e-01, -2.324695726549411e-01, -2.341712140390298e-01, -9.189359258438115e-01, -2.008058209521932e-01, -2.101103136847869e-01, -2.101103136847869e-01, -4.373841536589263e-03, -4.980111901495407e-03, -1.249473245906627e-01, -1.437379017544810e-03, -2.326401862595126e-03, -2.326401862595130e-03, -5.963594383406873e+00, -5.965947613358661e+00, -5.963700713005938e+00, -5.965778141734102e+00, -5.964787883591347e+00, -5.964787883591347e+00, -2.180850370086102e+00, -2.197330448224603e+00, -2.167141946992627e+00, -2.181591311928655e+00, -2.196717645566082e+00, -2.196717645566082e+00, -7.089325387468477e-01, -7.856019429791962e-01, -6.568883796415055e-01, -6.964749764284750e-01, -7.215283474129669e-01, -7.215283474129669e-01, -1.803587877162617e-01, -2.522878346890093e-01, -1.732440828816061e-01, -2.276813594673016e+00, -1.771683285855039e-01, -1.771683285855039e-01, -9.729384349803512e-04, -1.425344296463950e-03, -1.286680379722508e-03, -1.463193069030677e-01, -1.541097334230449e-03, -1.541097334230452e-03, -7.356125352278007e-01, -7.257707142267013e-01, -7.292272071199547e-01, -7.320918310495288e-01, -7.306629629384185e-01, -7.306629629384185e-01, -7.189108208351815e-01, -5.936687887710430e-01, -6.246566520188500e-01, -6.590503113906701e-01, -6.410885238102791e-01, -6.410885238102791e-01, -8.207929917209850e-01, -2.967025307473651e-01, -3.375123368381089e-01, -4.276860157346174e-01, -3.766398635015555e-01, -3.766398635015555e-01, -5.491905038589026e-01, -1.204514923701041e-01, -1.475943817570635e-01, -4.144765021855051e-01, -1.463025816130700e-01, -1.463025816130699e-01, -8.914437499339643e-03, -2.474617547994718e-04, -6.349831888235254e-04, -1.444246496412424e-01, -1.401614111938675e-03, -1.401614111938670e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpwlyp1m_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.908799208197902e-09, -6.908767468171775e-09, -6.908529969758183e-09, -6.909004202594316e-09, -6.908769408681216e-09, -6.908769408681216e-09, -8.932729831563326e-06, -8.933134147885739e-06, -8.941621279974308e-06, -8.920141972303779e-06, -8.932358387015443e-06, -8.932358387015443e-06, -4.874224108637453e-03, -4.872116058163701e-03, -4.774193501183954e-03, -4.653492811239150e-03, -4.701575301671839e-03, -4.701575301671839e-03, -3.402191112191820e-01, -3.446649529441371e-01, -2.808258110570533e-03, -3.039708613419181e-01, -3.823382885723438e-01, -3.823382885723434e-01, 2.815988319242395e+02, 2.926280248651087e+02, 3.894371268799887e+01, 2.925374505502858e+02, 3.479402204976778e+02, 3.479402204976807e+02, -2.068673825950827e-06, -2.070292406811282e-06, -2.068727649423674e-06, -2.070156704864873e-06, -2.069504513698472e-06, -2.069504513698472e-06, -6.487116929965978e-05, -6.363922119167688e-05, -6.484154128935643e-05, -6.375155433804487e-05, -6.420380102364696e-05, -6.420380102364696e-05, -1.016752060338408e-02, -9.522801454835961e-03, -1.321649281989505e-02, -1.462047307890161e-02, -9.848803300464464e-03, -9.848803300464464e-03, 7.930934057677108e-01, -1.643182744877090e-01, 1.200582911635497e+00, -1.250386437727192e-04, -2.248356311106541e-01, -2.248356311106541e-01, 4.026972213152966e+02, 3.428753965589811e+02, 2.061372251627035e+03, 6.831006820136406e+00, 9.603776078911731e+02, 9.603776078911789e+02, -1.517139950449951e-02, -1.329258199676272e-02, -1.364689233590174e-02, -1.410886385041506e-02, -1.384780933732623e-02, -1.384780933732623e-02, -1.760184157362435e-02, -1.616793995411551e-02, -1.574145390605881e-02, -1.558624352455631e-02, -1.565536521115063e-02, -1.565536521115063e-02, -7.817654245131957e-03, -1.207123021756864e-01, -9.336385269734937e-02, -5.732772797777998e-02, -7.573632976954467e-02, -7.573632976954472e-02, -2.195459899751365e-02, 4.263425157115042e+01, 1.825653683135725e+01, -7.599751858788911e-02, 1.284421372578534e+00, 1.284421372578532e+00, 2.095024122005229e+02, 2.094436002999341e+03, 8.853358245416870e+02, 2.081839720129362e+00, 1.218394429412049e+03, 1.218394429412047e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
