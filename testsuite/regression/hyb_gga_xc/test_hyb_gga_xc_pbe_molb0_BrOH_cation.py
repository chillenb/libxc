
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_molb0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.595943139744238e+01, -1.595944842666011e+01, -1.595958167463908e+01, -1.595932713171866e+01, -1.595945232592019e+01, -1.595945232592019e+01, -2.689942245084643e+00, -2.689912256589897e+00, -2.689284122574526e+00, -2.690879457185990e+00, -2.689970315778024e+00, -2.689970315778024e+00, -5.634320594333848e-01, -5.632976819020109e-01, -5.614587025944954e-01, -5.652827951314096e-01, -5.649077579749440e-01, -5.649077579749440e-01, -1.738472515333276e-01, -1.753025187380604e-01, -6.479569064628148e-01, -1.428007382453582e-01, -1.657043382644220e-01, -1.657043382644219e-01, -7.580408679457694e-03, -7.982272729164464e-03, -4.347107382133028e-02, -4.371984568223606e-03, -6.101493391599115e-03, -6.101493391599115e-03, -3.872955095360764e+00, -3.872450546496472e+00, -3.872940183215914e+00, -3.872494610171545e+00, -3.872694589319269e+00, -3.872694589319269e+00, -1.651048820025505e+00, -1.658634750571398e+00, -1.652080831224880e+00, -1.658784397165243e+00, -1.654747141391455e+00, -1.654747141391455e+00, -4.815898172322766e-01, -5.106775777545755e-01, -4.500067013202540e-01, -4.575673002088346e-01, -4.877190954056365e-01, -4.877190954056365e-01, -1.065717169073322e-01, -1.824241726766950e-01, -9.945569979038209e-02, -1.438947632569092e+00, -1.204401384990369e-01, -1.204401384990369e-01, -3.375460606563960e-03, -4.273856846354975e-03, -3.272728841469506e-03, -6.884722375479621e-02, -4.110986304976205e-03, -4.110986304976210e-03, -4.744265406937113e-01, -4.727602450048397e-01, -4.732757205172224e-01, -4.737544478608731e-01, -4.735079797960053e-01, -4.735079797960053e-01, -4.625407307802371e-01, -4.195817062566247e-01, -4.298668860878663e-01, -4.411254376864434e-01, -4.351100672303639e-01, -4.351100672303639e-01, -5.336507195494558e-01, -2.200735253345977e-01, -2.513852366682930e-01, -3.053466240317199e-01, -2.761421146478352e-01, -2.761421146478352e-01, -3.887744865715135e-01, -4.161507382423834e-02, -5.622826526053624e-02, -2.909659285761894e-01, -8.555488829279950e-02, -8.555488829279952e-02, -1.068135102111266e-02, -1.142457661992196e-03, -2.402469594159470e-03, -8.083534718333779e-02, -3.775323629308268e-03, -3.775323629308260e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_molb0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.880603400014931e+01, -1.880601236148537e+01, -1.880612369864924e+01, -1.880607787341743e+01, -1.880638467185612e+01, -1.880645723390471e+01, -1.880536760493616e+01, -1.880516613596582e+01, -1.880608454072684e+01, -1.880566567922966e+01, -1.880608454072684e+01, -1.880566567922966e+01, -3.106245927531703e+00, -3.106391947837826e+00, -3.106284327897805e+00, -3.106436584787827e+00, -3.107275499079203e+00, -3.107514485923150e+00, -3.106046040788366e+00, -3.106290143493731e+00, -3.105700232687692e+00, -3.107181691762185e+00, -3.105700232687692e+00, -3.107181691762185e+00, -6.427985154007622e-01, -6.458147136979349e-01, -6.413360525019995e-01, -6.450007567979753e-01, -6.182368532844584e-01, -6.144692155611045e-01, -6.207942804102383e-01, -6.220149923440564e-01, -6.424494240958680e-01, -6.074534081517808e-01, -6.424494240958680e-01, -6.074534081517808e-01, -1.863295916154504e-01, -1.881976266107917e-01, -1.884052325341819e-01, -1.907405066796006e-01, -7.330443370180018e-01, -7.580021577976008e-01, -1.546572434813252e-01, -1.558254923168586e-01, -1.736823662106823e-01, -1.403630600761183e-01, -1.736823662106823e-01, -1.403630600761182e-01, -9.764777573543746e-03, -1.037445911171021e-02, -1.023053709150557e-02, -1.095701464726670e-02, -5.501902287486499e-02, -5.784700735157616e-02, -5.875156782232118e-03, -5.777386939762674e-03, -8.713547495931938e-03, -4.961196174724214e-03, -8.713547495931940e-03, -4.961196174724217e-03, -4.743939501710761e+00, -4.742810082970537e+00, -4.746399911403667e+00, -4.745193941949967e+00, -4.744071663725621e+00, -4.742892288146159e+00, -4.746187825560537e+00, -4.745052749244422e+00, -4.745200258622948e+00, -4.744008740134504e+00, -4.745200258622948e+00, -4.744008740134504e+00, -1.709648604729974e+00, -1.709568916214175e+00, -1.722888060181761e+00, -1.722451883646916e+00, -1.697316760587857e+00, -1.699943292591480e+00, -1.708539580339369e+00, -1.711372159610735e+00, -1.726172548944440e+00, -1.718681539868218e+00, -1.726172548944440e+00, -1.718681539868218e+00, -5.941330863514873e-01, -5.931202064566374e-01, -6.611296897250882e-01, -6.616921501059858e-01, -5.423871308643711e-01, -5.578120633785013e-01, -5.830332986263382e-01, -5.954340450328639e-01, -6.160681504763189e-01, -5.937660943596703e-01, -6.160681504763189e-01, -5.937660943596704e-01, -1.249713010093541e-01, -1.253759873027468e-01, -1.933722548289165e-01, -1.937641063240632e-01, -1.160154715584577e-01, -1.199239137288137e-01, -1.861686278091981e+00, -1.861030065167791e+00, -1.356724342868558e-01, -1.342432058226724e-01, -1.356724342868558e-01, -1.342432058226724e-01, -4.408180537438739e-03, -4.581160540733153e-03, -5.652888046668229e-03, -5.738472011850530e-03, -4.226394911865117e-03, -4.475370519056493e-03, -8.563960408549262e-02, -8.621913002723934e-02, -4.317359477724053e-03, -5.926658813126827e-03, -4.317359477724054e-03, -5.926658813126827e-03, -6.176162126685639e-01, -6.193522501671019e-01, -6.117420500569152e-01, -6.135555359816081e-01, -6.139817230448943e-01, -6.157909387929306e-01, -6.157226057072370e-01, -6.174674404059648e-01, -6.148696514300889e-01, -6.166458866442506e-01, -6.148696514300889e-01, -6.166458866442506e-01, -6.026707670838471e-01, -6.040225459801620e-01, -4.893995510131700e-01, -4.910567866861321e-01, -5.224598509162978e-01, -5.243944984302854e-01, -5.568122260682715e-01, -5.582736395519213e-01, -5.395317385301811e-01, -5.410286001916582e-01, -5.395317385301811e-01, -5.410286001916582e-01, -6.894618890775417e-01, -6.908119028081362e-01, -2.308449930102922e-01, -2.313078255152216e-01, -2.686216422276710e-01, -2.695814808375887e-01, -3.576181030091800e-01, -3.589225171491961e-01, -3.085093975317466e-01, -3.083749083091512e-01, -3.085093975317466e-01, -3.083749083091512e-01, -4.538367523171039e-01, -4.562691668871365e-01, -5.413019287061624e-02, -5.447404858435906e-02, -7.101215365448564e-02, -7.302941819338121e-02, -3.521028515739787e-01, -3.556985395348387e-01, -1.013537919101140e-01, -1.032597283870033e-01, -1.013537919101140e-01, -1.032597283870033e-01, -1.395222894727037e-02, -1.445496184974063e-02, -1.521470517510655e-03, -1.524913817758547e-03, -3.095377755809389e-03, -3.292065209343944e-03, -9.725391859439605e-02, -9.845440900325453e-02, -4.088894259206796e-03, -5.432916577630556e-03, -4.088894259206785e-03, -5.432916577630546e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_molb0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.262862715083717e-08, 3.872408563355068e-10, -1.262869931918782e-08, -1.262853475105784e-08, 3.872477589545126e-10, -1.262863120440554e-08, -1.262811018233834e-08, 3.872570981086547e-10, -1.262806274156168e-08, -1.262916926463229e-08, 3.871548616628084e-10, -1.262939750896039e-08, -1.262859563317972e-08, 3.872114590017537e-10, -1.262875652848881e-08, -1.262859563317972e-08, 3.872114590017537e-10, -1.262875652848881e-08, -1.600584665525255e-05, 2.165273896472602e-06, -1.601195527445604e-05, -1.600606257695687e-05, 2.165710908338547e-06, -1.601263295435818e-05, -1.601631942129807e-05, 2.175587653236993e-06, -1.601990417802639e-05, -1.598851863288061e-05, 2.156452609795177e-06, -1.599325146737410e-05, -1.601510553433114e-05, 2.165542051028631e-06, -1.600072738510599e-05, -1.601510553433114e-05, 2.165542051028631e-06, -1.600072738510599e-05, -8.784073560839720e-03, 3.591255025020176e-03, -8.825133092028266e-03, -8.790651936120811e-03, 3.565576167455437e-03, -8.841712855566865e-03, -9.012494478951069e-03, 2.912515015497869e-03, -8.912218978817490e-03, -8.705615886174399e-03, 2.845328071330696e-03, -8.741965321411223e-03, -9.158317688101790e-03, 2.886807070825853e-03, -7.963300669743063e-03, -9.158317688101790e-03, 2.886807070825853e-03, -7.963300669743063e-03, -8.175024700389474e-01, 3.268290604178416e-01, -7.694931996139331e-01, -8.203930783775452e-01, 3.437282132717634e-01, -7.599385936845579e-01, -5.169810878650555e-03, 1.939375636026871e-03, -4.817429585351951e-03, -1.076155429086509e+00, 2.451494478060623e-01, -1.040652817926871e+00, -7.469322996482940e-01, 2.029755720380435e-01, -1.499483350808633e+00, -7.469322996482936e-01, 2.029755720380439e-01, -1.499483350808634e+00, -2.922169913319122e+00, 9.537814524680749e-03, -2.893021204444474e+00, -3.078559644308435e+00, 1.121881017902465e-02, -3.063047719759185e+00, -1.702631265599532e+00, 5.758565968630341e-02, -1.714720770290630e+00, -2.678325483871590e+00, 3.387710583957594e-03, -2.605551350681465e+00, -2.919241174313883e+00, 4.970593310154809e-03, -7.409274017647098e+00, -2.919241174314034e+00, 4.970593310619590e-03, -7.409274017647261e+00, -3.526659870678851e-06, 5.642004423230138e-07, -3.530147861137668e-06, -3.525999604347852e-06, 5.678748818319214e-07, -3.529450532478185e-06, -3.526619136218633e-06, 5.643470691672224e-07, -3.530090200609340e-06, -3.526007817777660e-06, 5.675905157960097e-07, -3.529504415133089e-06, -3.526354778484938e-06, 5.660695040713642e-07, -3.529791121689042e-06, -3.526354778484938e-06, 5.660695040713642e-07, -3.529791121689042e-06, -1.185200477324740e-04, 1.252706416704950e-05, -1.185414090086153e-04, -1.163162095926405e-04, 1.248635993807307e-05, -1.164168196383417e-04, -1.180696316357273e-04, 1.193543531174879e-05, -1.183497001739521e-04, -1.162209805526459e-04, 1.190415273004890e-05, -1.164293986753219e-04, -1.175436791922427e-04, 1.280029969805039e-05, -1.173517528635008e-04, -1.175436791922427e-04, 1.280029969805039e-05, -1.173517528635008e-04, -1.588918782349773e-02, 1.156843062114812e-02, -1.613297928910317e-02, -1.112798060510560e-02, 1.427385064123747e-02, -1.112681601832103e-02, -2.323610731429551e-02, 1.508178289692392e-02, -1.965941430700337e-02, -2.018154383550412e-02, 2.189432680916751e-02, -1.630417624699189e-02, -1.325445642498606e-02, 1.152789637152547e-02, -1.737372019559651e-02, -1.325445642498606e-02, 1.152789637152548e-02, -1.737372019559651e-02, -1.189270855055777e+00, 1.398417191076824e-01, -1.212197037571144e+00, -5.047448513460450e-01, 1.225793561418976e-01, -4.999669288246086e-01, -1.336863504210210e+00, 1.420546346636809e-01, -1.302664900382529e+00, -1.638565310724276e-04, 1.173836740533441e-04, -1.642771221568021e-04, -1.276112781209234e+00, 2.642378321508523e-01, -1.581356476964447e+00, -1.276112781209234e+00, 2.642378321508523e-01, -1.581356476964447e+00, -3.760364882005459e+00, 3.303146179620811e-03, -3.254507403247688e+00, -3.237531603275635e+00, 4.165147773977295e-03, -2.988972410624958e+00, -1.843360169091079e+01, 4.149262711241986e-02, -2.050946179512222e+01, -1.965356914677721e+00, 1.398329044107660e-01, -1.890739326523000e+00, -9.168451314236982e+00, 1.588006770831633e-02, -9.007077514968687e+00, -9.168451314242992e+00, 1.588006770035255e-02, -9.007077514974712e+00, -1.422895697142395e-02, 2.384126976274812e-02, -1.384433588824339e-02, -1.547418594075776e-02, 2.063284624843451e-02, -1.510377785827967e-02, -1.508727785185095e-02, 2.165628894138459e-02, -1.471276624388379e-02, -1.472879935292619e-02, 2.258547839347165e-02, -1.434850751367130e-02, -1.491299256226739e-02, 2.211112533016068e-02, -1.453549953468270e-02, -1.491299256226739e-02, 2.211112533016068e-02, -1.453549953468270e-02, -1.541246487808929e-02, 2.814094102781184e-02, -1.502836340603086e-02, -2.920490193695726e-02, 1.585767322202282e-02, -2.874339361358334e-02, -2.603951884250164e-02, 1.808338690843190e-02, -2.558019836031891e-02, -2.244760949024848e-02, 2.105512092666066e-02, -2.202956652047259e-02, -2.436438450821937e-02, 1.949732033975871e-02, -2.391492474200991e-02, -2.436438450821937e-02, 1.949732033975871e-02, -2.391492474200991e-02, -9.382371596328695e-03, 1.135645617338814e-02, -9.325147877704696e-03, -3.014044299773710e-01, 8.995780234623489e-02, -2.982531363596165e-01, -2.076512558723319e-01, 8.111429532102511e-02, -2.045542840519228e-01, -1.064680738618538e-01, 6.938813813916958e-02, -1.040213068603700e-01, -1.526074715342558e-01, 7.917369157071029e-02, -1.538324256759421e-01, -1.526074715342559e-01, 7.917369157071033e-02, -1.538324256759422e-01, -3.995531246912574e-02, 2.275963571360117e-02, -3.902945867236289e-02, -1.558661625465013e+00, 4.733543105159828e-02, -1.560766249195294e+00, -1.535133696037177e+00, 7.242422923381764e-02, -1.571318532119369e+00, -1.328099349366041e-01, 1.081858145439875e-01, -1.242429494868763e-01, -1.936517114089386e+00, 2.425066902707164e-01, -2.307794388565577e+00, -1.936517114089389e+00, 2.425066902707143e-01, -2.307794388565580e+00, -2.314589043174736e+00, 1.189136690538374e-02, -2.363189273925152e+00, -1.157165419773903e+01, 4.517035134701394e-03, -2.049934098654012e+01, -7.140808290672762e+00, 5.653369638599142e-03, -7.602155498845781e+00, -2.181638839116162e+00, 2.229458865196184e-01, -2.135699196614053e+00, -1.890985687418134e+01, 2.026939607265584e-02, -9.348145876247079e+00, -1.890985687418336e+01, 2.026939607562306e-02, -9.348145876249090e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
