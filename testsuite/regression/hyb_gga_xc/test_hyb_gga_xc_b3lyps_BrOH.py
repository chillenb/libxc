
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyps_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.782771739434704e+01, -1.782774051864522e+01, -1.782790426021498e+01, -1.782752438271720e+01, -1.782772908293787e+01, -1.782772908293787e+01, -3.006497770287797e+00, -3.006477937751028e+00, -3.006054379719518e+00, -3.007408819006794e+00, -3.006500115744862e+00, -3.006500115744862e+00, -6.310359592096275e-01, -6.308874991006377e-01, -6.281190276988431e-01, -6.321077277415714e-01, -6.309795199776670e-01, -6.309795199776670e-01, -1.970930088567053e-01, -1.986315224797907e-01, -7.352609415511290e-01, -1.570396681613395e-01, -1.975438586044442e-01, -1.975438586044442e-01, -5.068182705160418e-02, -5.140060941868349e-02, -9.077152984732607e-02, -4.406263626138477e-02, -5.090654304645759e-02, -5.090654304645759e-02, -4.346975200276654e+00, -4.346615564334632e+00, -4.346943474412703e+00, -4.346663755921826e+00, -4.346783601444122e+00, -4.346783601444122e+00, -1.824803287726256e+00, -1.833667644528331e+00, -1.824906971340645e+00, -1.831805913339001e+00, -1.830689502342911e+00, -1.830689502342911e+00, -5.322477410976192e-01, -5.567558634841079e-01, -5.078244786201126e-01, -5.136831323181730e-01, -5.487538461979903e-01, -5.487538461979903e-01, -1.278836274795649e-01, -2.067515949513671e-01, -1.262412342952690e-01, -1.607437455033391e+00, -1.396453813696916e-01, -1.396453813696916e-01, -4.320321201534718e-02, -4.461319233417915e-02, -3.417091283096296e-02, -9.958856812768099e-02, -4.055276789468221e-02, -4.055276789468222e-02, -5.252609388603886e-01, -5.269729942086261e-01, -5.264003567880798e-01, -5.259258760604588e-01, -5.261661350470137e-01, -5.261661350470137e-01, -5.086876673912736e-01, -4.764501002293022e-01, -4.867502230944209e-01, -4.955759967341565e-01, -4.910510511647593e-01, -4.910510511647593e-01, -5.828720358729100e-01, -2.497790781001191e-01, -2.853035804516170e-01, -3.421205638338736e-01, -3.121430877972985e-01, -3.121430877972984e-01, -4.337011699114270e-01, -9.082833762832369e-02, -9.746467033416246e-02, -3.187778968795968e-01, -1.114525953515065e-01, -1.114525953515065e-01, -5.588405643447691e-02, -3.059727767761897e-02, -3.565118611704476e-02, -1.077069262451141e-01, -3.630690686707132e-02, -3.630690686707132e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyps_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.168393654321635e+01, -2.168400422385023e+01, -2.168432269161834e+01, -2.168321407546611e+01, -2.168397209750588e+01, -2.168397209750588e+01, -3.566210964751511e+00, -3.566235188989083e+00, -3.567044982626634e+00, -3.566389670604164e+00, -3.566238288352092e+00, -3.566238288352092e+00, -7.244384069921915e-01, -7.236195156003120e-01, -7.032234297459243e-01, -7.084198118244723e-01, -7.241400486656338e-01, -7.241400486656338e-01, -2.214940071974610e-01, -2.236460419211458e-01, -8.632114632843860e-01, -1.749226862024812e-01, -2.221256265642243e-01, -2.221256265642243e-01, -2.214729357152817e-02, -2.281775155897056e-02, -6.357920564639090e-02, -1.453588958443127e-02, -2.259877927712403e-02, -2.259877927712403e-02, -5.388288287163426e+00, -5.390176880627336e+00, -5.388482208588623e+00, -5.389950671434925e+00, -5.389255334991659e+00, -5.389255334991659e+00, -1.986905637138144e+00, -2.001477395587518e+00, -1.979929988792792e+00, -1.991267999098609e+00, -2.005929453487135e+00, -2.005929453487135e+00, -6.454609832733198e-01, -7.117428354635454e-01, -6.138894316422558e-01, -6.488167773306774e-01, -6.703071571881155e-01, -6.703071571881155e-01, -1.407864003429316e-01, -2.331866332013917e-01, -1.370723422898211e-01, -2.059602967033416e+00, -1.540279896694514e-01, -1.540279896694514e-01, -1.415682629612188e-02, -1.529708366442288e-02, -1.170447493405368e-02, -8.782500241644679e-02, -1.396588137706787e-02, -1.396588137706786e-02, -6.837156282056100e-01, -6.756101773769171e-01, -6.783932954174470e-01, -6.806308543263233e-01, -6.795013471231239e-01, -6.795013471231239e-01, -6.639003889820874e-01, -5.596061231713154e-01, -5.867834651086978e-01, -6.141142236822595e-01, -5.999770551803313e-01, -5.999770551803314e-01, -7.435121734213070e-01, -2.801260229129966e-01, -3.216811423860395e-01, -4.004153918869894e-01, -3.575139199798729e-01, -3.575139199798727e-01, -5.081583858422298e-01, -5.986731816267320e-02, -8.019094607786416e-02, -3.812819717872482e-01, -1.122045394567939e-01, -1.122045394567938e-01, -2.507773250199764e-02, -7.245470988858704e-03, -1.018233562138110e-02, -1.055424646399332e-01, -1.225107101541940e-02, -1.225107101541940e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyps_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.214528351566765e-09, -5.214506421853764e-09, -5.214329893808901e-09, -5.214690583652111e-09, -5.214517444397094e-09, -5.214517444397094e-09, -6.753982456667899e-06, -6.754207228337646e-06, -6.759283199137553e-06, -6.744857519271716e-06, -6.753983707853992e-06, -6.753983707853992e-06, -3.660273933175877e-03, -3.658635335795876e-03, -3.580538242651451e-03, -3.499192316302987e-03, -3.659753968869612e-03, -3.659753968869612e-03, -2.899443218859527e-01, -2.892360484099660e-01, -2.047012297121010e-03, -4.263372850808771e-01, -2.899528868946427e-01, -2.899528868946427e-01, -2.015526336227506e+03, -1.767844761576925e+03, -1.865908991374863e+01, -1.493365579524385e+04, -1.841471146809236e+03, -1.841471146809236e+03, -1.559102780925312e-06, -1.560211553649155e-06, -1.559207246507239e-06, -1.560069471967488e-06, -1.559683095843228e-06, -1.559683095843228e-06, -4.975606714719089e-05, -4.881471717048937e-05, -4.971396710814302e-05, -4.897928202514393e-05, -4.917266722931272e-05, -4.917266722931272e-05, -7.963103476801146e-03, -7.455620329268209e-03, -9.572129828314341e-03, -1.006569493656131e-02, -7.133347569405408e-03, -7.133347569405408e-03, -6.050393990892643e-01, -1.614304634448908e-01, -7.551454814229945e-01, -9.393653960410397e-05, -5.873225024690996e-01, -5.873225024690996e-01, -1.683616398715306e+04, -1.148252225077236e+04, -3.535462815563323e+04, -4.984822053626448e+00, -1.674415653835450e+04, -1.674415653835451e+04, -1.010463003735976e-02, -9.441362746099413e-03, -9.642995555394589e-03, -9.822680483598257e-03, -9.729847260879630e-03, -9.729847260879630e-03, -1.169303650072142e-02, -1.165375093670398e-02, -1.129694595968448e-02, -1.114250251742747e-02, -1.121427927660711e-02, -1.121427927660711e-02, -6.130734013789062e-03, -9.792657796907717e-02, -7.057458115678029e-02, -4.276369120259797e-02, -5.607050928626127e-02, -5.607050928626130e-02, -1.682695090642208e-02, -2.316823520811617e+01, -6.897352751340755e+00, -6.073665198465971e-02, -1.904759580870025e+00, -1.904759580870030e+00, -1.181588624710438e+03, -5.577972187257184e+05, -8.400926847205087e+04, -2.655056661267721e+00, -2.972258361088327e+04, -2.972258361088338e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
