
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mcam_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.710362630033667e+01, -1.710364818611343e+01, -1.710380141581689e+01, -1.710347464568987e+01, -1.710363791304557e+01, -1.710363791304557e+01, -2.858263567432054e+00, -2.858234016594648e+00, -2.857620440246520e+00, -2.859226378928624e+00, -2.858296574657501e+00, -2.858296574657501e+00, -5.725845362595265e-01, -5.724324436420051e-01, -5.697244023270444e-01, -5.739095976981887e-01, -5.725102723766280e-01, -5.725102723766280e-01, -1.556802232191611e-01, -1.573484864728867e-01, -6.634974255616644e-01, -1.243731885140685e-01, -1.362878424409746e-01, -1.362878424409746e-01, -4.181301690089081e-02, -4.188055157890293e-02, -7.308220322268570e-02, -3.789813404456570e-02, -3.786005822229148e-02, -3.786005822229146e-02, -4.134320610736214e+00, -4.133789687176321e+00, -4.134305095772618e+00, -4.133836269231807e+00, -4.134046642650983e+00, -4.134046642650983e+00, -1.733389198325656e+00, -1.741878270262772e+00, -1.733525550790020e+00, -1.741024445161030e+00, -1.738009337970103e+00, -1.738009337970103e+00, -4.817894727839190e-01, -5.044696247316007e-01, -4.481432870645901e-01, -4.492319273487064e-01, -4.872884344163999e-01, -4.872884344163999e-01, -9.518518873560708e-02, -1.606435728928282e-01, -9.087185728504504e-02, -1.502256712918101e+00, -1.056338816743021e-01, -1.056338816743021e-01, -3.412291579031074e-02, -3.651655340497027e-02, -2.399278036047616e-02, -7.747792578123577e-02, -2.900996915392837e-02, -2.900996915392838e-02, -4.615522827725895e-01, -4.636320242549493e-01, -4.629476306377069e-01, -4.623409199294282e-01, -4.626481412026717e-01, -4.626481412026717e-01, -4.476191354710224e-01, -4.171833451329967e-01, -4.269475168044077e-01, -4.356319014617263e-01, -4.311853933675705e-01, -4.311853933675705e-01, -5.296431097290878e-01, -1.998575410538676e-01, -2.348635540784033e-01, -2.943810745779831e-01, -2.628749403203682e-01, -2.628749403203681e-01, -3.839523161850583e-01, -7.347156743124852e-02, -7.618024570989802e-02, -2.781391649424717e-01, -8.324999097591380e-02, -8.324999097591380e-02, -4.736875106780823e-02, -2.093823573209658e-02, -2.750914582882149e-02, -8.115950199006654e-02, -2.725813523984111e-02, -2.725813523984108e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mcam_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.048246788700467e+01, -2.048254449801032e+01, -2.048287116881422e+01, -2.048173164685755e+01, -2.048233070815141e+01, -2.048233070815141e+01, -3.338650842958576e+00, -3.338680907780053e+00, -3.339457271592201e+00, -3.338733924433317e+00, -3.338766319616930e+00, -3.338766319616930e+00, -6.606325460598018e-01, -6.597981504807759e-01, -6.405312497304505e-01, -6.457060019969633e-01, -6.446667473365071e-01, -6.446667473365071e-01, -1.805049161152454e-01, -1.822860095239132e-01, -7.680388377954047e-01, -1.473491440220889e-01, -1.590066153282811e-01, -1.590066153282811e-01, -1.318233468310072e-02, -1.349742423490610e-02, -4.091815425419609e-02, -9.918637263994489e-03, -1.086658253431440e-02, -1.086658253431443e-02, -5.075713328029095e+00, -5.077714844920387e+00, -5.075803798081038e+00, -5.077570738048353e+00, -5.076728461447514e+00, -5.076728461447514e+00, -1.843969336507138e+00, -1.858200472978091e+00, -1.831815954524734e+00, -1.844311210473380e+00, -1.857803737754091e+00, -1.857803737754091e+00, -5.872798208821775e-01, -6.506186130194765e-01, -5.430228710895100e-01, -5.748024324288207e-01, -5.978225652795277e-01, -5.978225652795277e-01, -1.128015238927824e-01, -1.925027909164209e-01, -1.041639737655125e-01, -1.925829380758518e+00, -1.231868643010854e-01, -1.231868643010854e-01, -8.429325084480511e-03, -9.613677834992953e-03, -6.733633407057019e-03, -6.648822898229712e-02, -8.117838830781031e-03, -8.117838830781059e-03, -6.076152040017696e-01, -5.994002738239067e-01, -6.021552212060953e-01, -6.045342766871508e-01, -6.033316123581357e-01, -6.033316123581357e-01, -5.929625401247117e-01, -4.899003932520740e-01, -5.156084155954391e-01, -5.438290739807282e-01, -5.291145127210184e-01, -5.291145127210184e-01, -6.808284221832894e-01, -2.336237174617999e-01, -2.707210056817805e-01, -3.482082236623127e-01, -3.048899243719038e-01, -3.048899243719038e-01, -4.518958800937047e-01, -3.969975830349540e-02, -5.328152608714948e-02, -3.364003001795416e-01, -8.428205105601863e-02, -8.428205105601858e-02, -1.646760218475397e-02, -4.249770446900731e-03, -6.500568148586790e-03, -7.915458595190682e-02, -7.583477762053331e-03, -7.583477762053293e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mcam_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.847888080189554e-09, -5.847859870317917e-09, -5.847655125679015e-09, -5.848076483404705e-09, -5.847866970370151e-09, -5.847866970370151e-09, -7.457377389058687e-06, -7.457699407367631e-06, -7.464429490948879e-06, -7.447143393577133e-06, -7.457052290753323e-06, -7.457052290753323e-06, -3.757742302167345e-03, -3.756267106805518e-03, -3.687204090185301e-03, -3.596462370738455e-03, -3.632343105253432e-03, -3.632343105253432e-03, -2.083222877562727e-01, -2.114166600612393e-01, -2.195507399988921e-03, -2.093843153595177e-01, -2.361858659934337e-01, -2.361858659934336e-01, -6.284113182515087e+03, -5.510628204388914e+03, -2.899484830284900e+01, -2.965667071241791e+04, -1.643559267358288e+04, -1.643559267358288e+04, -1.729557073573871e-06, -1.730830012393021e-06, -1.729598794877844e-06, -1.730722684910892e-06, -1.730210664406261e-06, -1.730210664406261e-06, -5.409689559450643e-05, -5.305308826241502e-05, -5.413477287227832e-05, -5.320888180064916e-05, -5.350240003473938e-05, -5.350240003473938e-05, -7.677318350949242e-03, -7.221576186487904e-03, -9.892285994600125e-03, -1.095482680737479e-02, -7.446375908279260e-03, -7.446375908279260e-03, -9.964508980325029e-02, -1.024308724864223e-01, -2.071360241457831e-01, -1.017162254287931e-04, -2.929818004609852e-01, -2.929818004609852e-01, -6.764427512263977e+04, -3.313420870252720e+04, -1.200697446102916e+05, -3.665676110375871e+00, -5.668743514681746e+04, -5.668743514681742e+04, -1.072860306402963e-02, -9.986478099564785e-03, -1.020861418131118e-02, -1.042026066871267e-02, -1.031084590707820e-02, -1.031084590707820e-02, -1.235139040988875e-02, -1.198300847265187e-02, -1.170831832690150e-02, -1.163099104010392e-02, -1.166313201614311e-02, -1.166313201614311e-02, -5.960229557684629e-03, -7.705487810289591e-02, -6.189036968180179e-02, -4.014373900119674e-02, -5.165531449080397e-02, -5.165531449080400e-02, -1.607526759414481e-02, -3.292855342792671e+01, -9.105377425958968e+00, -5.286008336646102e-02, -1.332327871093698e+00, -1.332327871093699e+00, -2.202554837836632e+03, -2.327697802746599e+06, -2.232568227194598e+05, -1.762947349255116e+00, -7.567550224696932e+04, -7.567550224696957e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
