
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lb07_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lb07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.765125417869198e+01, -1.765130401957695e+01, -1.765154081464452e+01, -1.765079896705021e+01, -1.765118551819266e+01, -1.765118551819266e+01, -2.715852937662651e+00, -2.715860130993496e+00, -2.716097501462948e+00, -2.716235953794141e+00, -2.715931712141486e+00, -2.715931712141486e+00, -3.832242596982394e-01, -3.825302993782183e-01, -3.653800394328885e-01, -3.698459020322669e-01, -3.688773829817977e-01, -3.688773829817977e-01, -2.672447057787253e-02, -2.874688999483199e-02, -4.739998406535159e-01, -2.169589269957571e-03, -2.073970461848858e-02, -2.073970461848850e-02, -1.037486605298366e-03, -1.088366313971493e-03, 2.396606441211070e-04, -6.087619839598373e-04, -4.015566768364978e-04, -4.015566768364978e-04, -4.161496221431742e+00, -4.162312847924196e+00, -4.161536741118383e+00, -4.162257618916955e+00, -4.161908600442305e+00, -4.161908600442305e+00, -1.440819129258145e+00, -1.452915693431328e+00, -1.431551089610905e+00, -1.442252771522643e+00, -1.451987808620599e+00, -1.451987808620599e+00, -3.206592767445846e-01, -3.638185562990256e-01, -2.860392829860960e-01, -3.059472566144274e-01, -3.290883503219669e-01, -3.290883503219669e-01, 1.595650541472293e-02, -1.598762067101748e-02, 1.579227560713009e-02, -1.420381542725155e+00, 5.844425676407229e-03, 5.844425676407229e-03, -4.696904312332589e-04, -5.953494282714598e-04, -4.533319842352019e-04, 9.419463204780888e-03, -4.415195277524439e-04, -4.415195277524439e-04, -3.267210201978287e-01, -3.233654794240543e-01, -3.245472365212817e-01, -3.255206855268836e-01, -3.250336570782015e-01, -3.250336570782015e-01, -3.143592135941130e-01, -2.438752015533239e-01, -2.643362601760278e-01, -2.844124625798010e-01, -2.742151427681966e-01, -2.742151427681966e-01, -3.882890173875976e-01, -4.222041471554615e-02, -7.321828168296776e-02, -1.374684134419576e-01, -1.029801769910086e-01, -1.029801769910086e-01, -2.142229295645280e-01, -2.084172838241934e-04, 6.573510991481858e-03, -1.313251245167505e-01, 9.839430266347222e-03, 9.839430266347204e-03, -1.461159065724743e-03, -1.605892177261920e-04, -3.330578551489052e-04, 9.790606707514369e-03, -4.262577687292181e-04, -4.262577687292177e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lb07_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lb07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.360577564333031e+01, -2.360574521110756e+01, -2.360585215100503e+01, -2.360580108333750e+01, -2.360611365409948e+01, -2.360616952973711e+01, -2.360524541351982e+01, -2.360506736185459e+01, -2.360581754098851e+01, -2.360552179814414e+01, -2.360581754098851e+01, -2.360552179814414e+01, -3.695527101737557e+00, -3.695441771470744e+00, -3.695538550717469e+00, -3.695443877947658e+00, -3.695722008981234e+00, -3.695763476241189e+00, -3.696034176085417e+00, -3.696046740935332e+00, -3.694938221567128e+00, -3.696233353448148e+00, -3.694938221567128e+00, -3.696233353448148e+00, -5.837019671690848e-01, -5.844271565401307e-01, -5.829871263486477e-01, -5.838650355631795e-01, -5.691108791128673e-01, -5.683957097411944e-01, -5.743227280158723e-01, -5.745133954673266e-01, -5.782446056916575e-01, -5.728511585648455e-01, -5.782446056916575e-01, -5.728511585648455e-01, -9.180911549165457e-02, -9.029653446973107e-02, -9.265438966894794e-02, -9.113611644155173e-02, -6.968415530184813e-01, -7.134143363120243e-01, -7.262095999851444e-02, -7.236256274266448e-02, -5.974681634474972e-02, -1.011126534306329e-01, -5.974681634474963e-02, -1.011126534306329e-01, -1.583666919911406e-03, -1.204395996451539e-03, -1.692985757927747e-03, -1.241514707113311e-03, -6.309448560847743e-03, -5.669586656406524e-03, -7.794253894239499e-04, -8.407789843752544e-04, -2.070072118704755e-04, -2.307126480655202e-03, -2.070072118704755e-04, -2.307126480655202e-03, -5.617468102688131e+00, -5.616128534984359e+00, -5.618516935273231e+00, -5.617145643579621e+00, -5.617531048229945e+00, -5.616169010906191e+00, -5.618433964243185e+00, -5.617089819462434e+00, -5.618000064612491e+00, -5.616639297089420e+00, -5.618000064612491e+00, -5.616639297089420e+00, -2.015698354574701e+00, -2.015604944072306e+00, -2.031215210216801e+00, -2.030719592289730e+00, -2.004139886231542e+00, -2.006295633313332e+00, -2.017553114105669e+00, -2.019911386569301e+00, -2.032282628083458e+00, -2.026091344586886e+00, -2.032282628083458e+00, -2.026091344586886e+00, -4.862712122509667e-01, -4.849726439653758e-01, -5.357738610100681e-01, -5.359126172866189e-01, -4.318193816311434e-01, -4.459367377728287e-01, -4.493896107239279e-01, -4.644735879586224e-01, -5.070519294750107e-01, -4.827416602667888e-01, -5.070519294750107e-01, -4.827416602667890e-01, -5.410296186200541e-02, -5.350377946121894e-02, -1.051951888797925e-01, -1.050344588893636e-01, -4.806174414639058e-02, -4.736294907052106e-02, -1.956278535230956e+00, -1.955384923309877e+00, -6.130100398551565e-02, -5.472390320824043e-02, -6.130100398551565e-02, -5.472390320824043e-02, -6.822939479531701e-04, -5.736274773741380e-04, -8.189677154688494e-04, -7.653306647664222e-04, -6.881901500046745e-04, -5.314731070824207e-04, -2.147451774400482e-02, -2.170398252174961e-02, -1.288696086054118e-03, -3.163458501763466e-04, -1.288696086054119e-03, -3.163458501763466e-04, -4.816190707765534e-01, -4.834733748500223e-01, -4.790818515739803e-01, -4.809032311336118e-01, -4.799719841570164e-01, -4.818063380938067e-01, -4.807071471792188e-01, -4.825484423721351e-01, -4.803386880886084e-01, -4.821766545262824e-01, -4.803386880886084e-01, -4.821766545262824e-01, -4.640958482075874e-01, -4.656492503336772e-01, -3.886295726681902e-01, -3.899200410951449e-01, -4.093121587240927e-01, -4.108000853771526e-01, -4.305929435678127e-01, -4.320163783352811e-01, -4.196117661401236e-01, -4.210445176843289e-01, -4.196117661401236e-01, -4.210445176843289e-01, -5.693347944313514e-01, -5.701011643322702e-01, -1.371065596512021e-01, -1.369853873265268e-01, -1.684065616057236e-01, -1.683868765152385e-01, -2.370928213844554e-01, -2.380288247898327e-01, -1.984441041548505e-01, -1.981740205055290e-01, -1.984441041548505e-01, -1.981740205055289e-01, -3.467253005832682e-01, -3.484178028050475e-01, -5.445895394411944e-03, -5.359977990699771e-03, -1.253887680742931e-02, -1.247322246772518e-02, -2.200514864031881e-01, -2.224368113442406e-01, -3.461549758206726e-02, -3.208164955418133e-02, -3.461549758206727e-02, -3.208164955418133e-02, -2.100042594214490e-03, -1.788711558680884e-03, -2.150505620928336e-04, -2.128509476013059e-04, -5.109823744500886e-04, -3.871275519140284e-04, -3.002943904154182e-02, -3.001401755312575e-02, -1.140695345944043e-03, -3.225147107111849e-04, -1.140695345944042e-03, -3.225147107111847e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lb07_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lb07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.264215559403482e-11, 1.463652377038497e-11, 3.264330457260197e-11, 3.264130547651290e-11, 1.463631512328463e-11, 3.264324292707253e-11, 3.264117778792324e-11, 1.463532316351641e-11, 3.263903593187204e-11, 3.264349393758490e-11, 1.463842899785011e-11, 3.265029141517737e-11, 3.263767071398673e-11, 1.463681083685537e-11, 3.264904308130342e-11, 3.263767071398673e-11, 1.463681083685537e-11, 3.264904308130342e-11, 2.929309781794401e-07, 1.902747638536065e-07, 2.930258640408496e-07, 2.929210741361775e-07, 1.902725761814505e-07, 2.930294227069511e-07, 2.929374748670998e-07, 1.901971754504621e-07, 2.927943589970082e-07, 2.928257255693593e-07, 1.901358235030523e-07, 2.927281916196245e-07, 2.942402810680865e-07, 1.902491360705296e-07, 2.916390218488022e-07, 2.942402810680865e-07, 1.902491360705296e-07, 2.916390218488022e-07, 1.046813195210680e-03, 1.144533678933034e-03, 9.856752413069014e-04, 1.059414201074614e-03, 1.151156568500561e-03, 9.839598987491129e-04, 1.102054367879107e-03, 1.320750241138922e-03, 1.222862024767306e-03, 1.135290278190233e-03, 1.265386257803329e-03, 1.098815699699322e-03, 6.048599279062471e-04, 1.376562597771172e-03, 1.710560061400956e-03, 6.048599279062471e-04, 1.376562597771172e-03, 1.710560061400956e-03, 4.453316468346988e-01, 6.012876550391961e-01, 3.308535673669243e-01, 4.290152077826185e-01, 5.680272535784819e-01, 3.049721373056462e-01, 6.173966156420098e-04, 5.322727974273029e-04, 3.591632994097421e-04, 1.087557086517181e+00, 1.675901373768304e+00, 9.940301607331564e-01, -4.501653942578362e-02, 2.382014110698246e+00, 2.093723074775938e+00, -4.501653942578319e-02, 2.382014110698246e+00, 2.093723074775938e+00, 5.675921857173066e-08, 1.111914508308031e-07, 5.622200106389088e-08, 2.334453701932848e-07, 4.562559950974850e-07, 2.304668186220750e-07, 1.058260425425809e+01, 1.838627425311693e+01, 9.310005755931870e+00, 2.089929161854101e-17, 4.136895542502456e-17, 2.086937280168050e-17, 4.936189023492603e-13, 1.070835888305008e-12, 5.576405914305050e-13, 4.936189023492603e-13, 1.070835888305008e-12, 5.576405914305049e-13, 3.853538126360367e-08, 2.233703107768369e-08, 3.876702432853588e-08, 3.849684232486335e-08, 2.231537777319893e-08, 3.873438232897355e-08, 3.853145848469303e-08, 2.233595490630417e-08, 3.876740193650438e-08, 3.850190535926228e-08, 2.231683364972891e-08, 3.873411468264029e-08, 3.851533903969528e-08, 2.232609670798167e-08, 3.875112028906986e-08, 3.851533903969528e-08, 2.232609670798167e-08, 3.875112028906986e-08, 5.217774900274863e-06, 4.104557134069705e-06, 5.223391230826410e-06, 5.020762810374528e-06, 3.949027730077658e-06, 5.049988520194397e-06, 5.459614488275693e-06, 4.223201907834492e-06, 5.262626081184532e-06, 5.291272077312508e-06, 4.080707689470805e-06, 5.092254495586169e-06, 4.817071871303678e-06, 3.966397450084659e-06, 5.289865367181627e-06, 4.817071871303678e-06, 3.966397450084659e-06, 5.289865367181627e-06, 1.887139424918829e-03, 2.253646609880290e-03, 1.960570895860268e-03, 1.301440934445299e-03, 1.482953633834817e-03, 1.292669343487352e-03, 3.494709294335117e-03, 3.393155540240489e-03, 2.100530010555202e-03, 2.862038356635148e-03, 2.786872153422916e-03, 1.792789491092001e-03, 1.153403828646581e-03, 2.171399762139616e-03, 2.470424530046960e-03, 1.153403828646584e-03, 2.171399762139616e-03, 2.470424530046963e-03, 3.252834993743408e+00, 5.364331359216309e+00, 3.098087487814086e+00, 3.920026484525933e-01, 5.928062603673171e-01, 3.771153092880229e-01, 4.388214320741553e+00, 6.670630325612285e+00, 3.402866055102132e+00, 5.722000811922319e-06, 4.550774239056777e-06, 5.776758802997007e-06, 2.347586491583939e+00, 3.362374819306393e+00, 1.686136601637616e+00, 2.347586491583939e+00, 3.362374819306393e+00, 1.686136601637616e+00, 2.722402450437751e-24, 5.421496698436063e-24, 2.739348374112997e-24, 6.197552123746826e-18, 1.228758886113335e-17, 6.206195015698091e-18, 2.834568716226669e-25, 5.656440620065503e-25, 2.862062125809059e-25, 8.566814583784277e+00, 1.504669301565768e+01, 8.380545905697472e+00, 4.773107496180662e-20, 9.610322787727072e-20, 4.859139671020088e-20, 4.773107496180661e-20, 9.610322787727070e-20, 4.859139671020088e-20, 1.932575433251670e-03, 2.199677179191681e-03, 1.827921294028910e-03, 1.986447683984606e-03, 2.264286130145305e-03, 1.878078506756244e-03, 1.967460441820644e-03, 2.241303100651475e-03, 1.860075015899262e-03, 1.951509374578449e-03, 2.222568983976134e-03, 1.845868570850362e-03, 1.959468849833947e-03, 2.231922961512953e-03, 1.852968646730800e-03, 1.959468849833947e-03, 2.231922961512953e-03, 1.852968646730800e-03, 2.192095061750638e-03, 2.525278278664052e-03, 2.091297055276122e-03, 4.514136264494106e-03, 5.397863529116129e-03, 4.260994342215327e-03, 3.644332070873083e-03, 4.298036410666330e-03, 3.430962677879512e-03, 2.951618041968925e-03, 3.458400931093935e-03, 2.811205936877352e-03, 3.277966668740439e-03, 3.860241852276062e-03, 3.114997798250318e-03, 3.277966668740439e-03, 3.860241852276062e-03, 3.114997798250318e-03, 1.047487397247074e-03, 1.166454564355177e-03, 1.021903571493992e-03, 1.576244486650762e-01, 2.273047300256539e-01, 1.497328514633720e-01, 7.550422113874039e-02, 1.027440095908986e-01, 6.844801134197469e-02, 2.214606296380817e-02, 2.883676467546989e-02, 2.080403342857284e-02, 3.962743884847655e-02, 5.500747727544229e-02, 3.977544650380128e-02, 3.962743884847664e-02, 5.500747727544231e-02, 3.977544650380125e-02, 6.724179139236990e-03, 8.100714365057125e-03, 6.156026159381084e-03, 9.621578394973588e+00, 1.766533536733120e+01, 9.474812795966793e+00, 1.088514945364049e+01, 1.878803243082290e+01, 9.865262141717881e+00, 2.739336338737960e-02, 3.428914672188251e-02, 2.318543679168190e-02, 6.224816015375727e+00, 9.701438036301546e+00, 4.917991604378374e+00, 6.224816015375725e+00, 9.701438036301546e+00, 4.917991604378369e+00, 1.759513360408513e-04, 3.417478728614279e-04, 1.735959115977003e-04, 1.428164354090746e-85, 2.850114531961813e-85, 1.429263468290431e-85, 8.294165813489441e-37, 1.662312648545182e-36, 8.415661486156971e-37, 6.528701437323544e+00, 1.102889579754806e+01, 6.105657850164422e+00, 4.049098582250979e-22, 8.178814636871498e-22, 4.157023565057630e-22, 4.049098582250767e-22, 8.178814636871070e-22, 4.157023565057414e-22]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
