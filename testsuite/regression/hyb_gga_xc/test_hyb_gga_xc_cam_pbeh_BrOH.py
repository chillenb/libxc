
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_pbeh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.665640009828824e-01, -3.665647380352849e-01, -3.665669620071763e-01, -3.665549148062536e-01, -3.665643985736899e-01, -3.665643985736899e-01, -3.533454633896876e-01, -3.533490651925758e-01, -3.534485210013154e-01, -3.532790321850872e-01, -3.533473504343828e-01, -3.533473504343828e-01, -2.986517296582514e-01, -2.985723124454956e-01, -2.966789929789801e-01, -2.971791398320972e-01, -2.986227448986788e-01, -2.986227448986788e-01, -1.665086936062264e-01, -1.674576862899679e-01, -3.108028358564339e-01, -1.392491842897266e-01, -1.667830893816798e-01, -1.667830893816798e-01, -1.360312610281428e-02, -1.424481313638053e-02, -5.615788706071875e-02, -6.540196991536270e-03, -1.409650645765374e-02, -1.409650645765374e-02, -3.712817233488865e-01, -3.714684533148595e-01, -3.713003525286448e-01, -3.714455443849323e-01, -3.713779673777482e-01, -3.713779673777482e-01, -3.309085460481752e-01, -3.313421135447021e-01, -3.303787571979917e-01, -3.307128836635722e-01, -3.319114398927970e-01, -3.319114398927970e-01, -2.895822319401982e-01, -3.019234622404915e-01, -2.848964460321392e-01, -2.919950500185429e-01, -2.931856132179909e-01, -2.931856132179909e-01, -1.134960635867884e-01, -1.752024744942645e-01, -1.116458860109210e-01, -3.673419329347184e-01, -1.246499012564827e-01, -1.246499012564827e-01, -6.309391433899576e-03, -7.209466970031640e-03, -5.403828155049735e-03, -7.584010823825393e-02, -6.568967632534971e-03, -6.568967632534971e-03, -3.000754453846377e-01, -2.972395167426798e-01, -2.981799563979577e-01, -2.989630235593561e-01, -2.985650243314897e-01, -2.985650243314897e-01, -2.973632676612514e-01, -2.764238174797406e-01, -2.805577281392950e-01, -2.855414369895751e-01, -2.828481172238457e-01, -2.828481172238457e-01, -3.056789120705962e-01, -1.993239650036421e-01, -2.161403927997529e-01, -2.396612472577928e-01, -2.276520404740809e-01, -2.276520404740810e-01, -2.667792704055800e-01, -5.236947630806067e-02, -6.930987980310452e-02, -2.320673952452738e-01, -9.457471615512224e-02, -9.457471615512214e-02, -1.593388864450098e-02, -1.975024428913733e-03, -3.751253002193605e-03, -9.032955667540814e-02, -5.583265062455232e-03, -5.583265062453328e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_pbeh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.426607994032103e-01, -4.426617859582113e-01, -4.426647762333246e-01, -4.426486490813851e-01, -4.426613314730953e-01, -4.426613314730953e-01, -4.142014294172975e-01, -4.142055162031935e-01, -4.143187789741725e-01, -4.141285725525808e-01, -4.142036315553629e-01, -4.142036315553629e-01, -3.234210822936085e-01, -3.231816988696730e-01, -3.181997752515558e-01, -3.189095743723800e-01, -3.233341171574321e-01, -3.233341171574321e-01, -1.786993004108772e-01, -1.809558763132371e-01, -3.421731323571456e-01, -1.431535661733925e-01, -1.793817976355028e-01, -1.793817976355028e-01, -1.804451801698410e-02, -1.888619810196452e-02, -7.058154704510232e-02, -8.711508317304608e-03, -1.868981069614470e-02, -1.868981069614470e-02, -4.373552410257349e-01, -4.375078243240775e-01, -4.373705090168278e-01, -4.374891558158097e-01, -4.374339469471345e-01, -4.374339469471345e-01, -3.765877486926192e-01, -3.774676277779111e-01, -3.754932361557310e-01, -3.762092070520046e-01, -3.785137570221064e-01, -3.785137570221064e-01, -3.254225491386635e-01, -3.405613134135274e-01, -3.201294405656723e-01, -3.320925546041242e-01, -3.303340367460134e-01, -3.303340367460134e-01, -1.243410744183108e-01, -1.780190700389321e-01, -1.217820084218116e-01, -4.108851304455527e-01, -1.309173179258377e-01, -1.309173179258377e-01, -8.404431596318797e-03, -9.600543616553230e-03, -7.196577903595144e-03, -9.061727480059019e-02, -8.747563303535199e-03, -8.747563303535195e-03, -3.354032588365281e-01, -3.358829838528894e-01, -3.359287920108073e-01, -3.358087258615952e-01, -3.358872065894280e-01, -3.358872065894280e-01, -3.323517121845525e-01, -3.040772306339198e-01, -3.152469636515854e-01, -3.250082014543251e-01, -3.203223294343263e-01, -3.203223294343263e-01, -3.443220407973556e-01, -2.062726915914809e-01, -2.301054784246469e-01, -2.669719861664637e-01, -2.474121005108821e-01, -2.474121005108822e-01, -2.936460826669328e-01, -6.660982270437374e-02, -8.492428941571929e-02, -2.671337935844325e-01, -1.063637301455387e-01, -1.063637301455386e-01, -2.111528363043508e-02, -2.633041492200582e-03, -4.999606282680522e-03, -1.016635584172250e-01, -7.436171701149316e-03, -7.436171701147977e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_pbeh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.924273216569667e-10, 1.924305672223358e-10, 1.924352968324621e-10, 1.923823526270951e-10, 1.924291147454820e-10, 1.924291147454820e-10, 9.306699050102608e-07, 9.308145048427808e-07, 9.346207311268488e-07, 9.271595329301348e-07, 9.307258075200839e-07, 9.307258075200839e-07, 9.114187506148713e-05, 8.608163291191949e-05, 9.229347653012853e-06, 1.831359978611406e-05, 8.929662986415562e-05, 8.929662986415562e-05, -2.331229781939107e-01, -2.227300133862028e-01, 2.341710925294270e-04, -5.405402801730902e-01, -2.300384139497200e-01, -2.300384139497200e-01, -4.070503308278751e+00, -4.079242746135225e+00, -1.645098799687343e+00, -2.898659995542077e+00, -4.237544249367968e+00, -4.237544249367968e+00, 2.572127496023221e-07, 2.587855969601570e-07, 2.573679840795052e-07, 2.585908808139174e-07, 2.580240519706386e-07, 2.580240519706386e-07, 4.881848138370881e-06, 4.870627142041302e-06, 4.740660772525109e-06, 4.736156959548054e-06, 5.051725845188169e-06, 5.051725845188169e-06, 1.123206465172337e-03, 3.523285813312786e-03, 1.064913308974841e-03, 3.735926776929353e-03, 1.324249291386331e-03, 1.324249291386331e-03, -7.749263825282718e-01, -1.714528126918385e-01, -8.815387564420994e-01, 4.550794348459477e-05, -7.511507379307376e-01, -7.511507379307376e-01, -3.075210192314716e+00, -3.080152662194112e+00, -8.814852329031552e+00, -1.546718887802295e+00, -4.549059146731024e+00, -4.549059146730745e+00, 5.964502412314069e-03, 4.545827211078899e-03, 5.005531754385140e-03, 5.396772016328032e-03, 5.197041329457143e-03, 5.197041329457145e-03, 6.988276548960099e-03, -4.552270646225823e-04, 9.452527538620498e-04, 2.684889189746706e-03, 1.759807759745361e-03, 1.759807759745361e-03, 2.854515360988418e-03, -7.206459183199636e-02, -3.608665576300883e-02, -9.484839314894751e-03, -2.147449626767720e-02, -2.147449626767717e-02, -1.580988964927166e-03, -1.404076255721170e+00, -1.363665082105858e+00, -6.935256422517661e-03, -1.380846943739927e+00, -1.380846943739930e+00, -3.055810787909479e+00, -5.308438134851412e+00, -4.567898682336382e+00, -1.692709835236798e+00, -6.644730090318675e+00, -6.644730090319499e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
