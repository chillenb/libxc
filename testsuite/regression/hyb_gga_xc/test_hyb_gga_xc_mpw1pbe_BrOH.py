
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.585436610394177e+01, -1.585438426889356e+01, -1.585452276170940e+01, -1.585422415855848e+01, -1.585437520325440e+01, -1.585437520325440e+01, -2.662835466187194e+00, -2.662817371872211e+00, -2.662428471768276e+00, -2.663654993131536e+00, -2.662837330584387e+00, -2.662837330584387e+00, -5.525336826225684e-01, -5.523482756454821e-01, -5.491172510901910e-01, -5.526280186633170e-01, -5.524641074192035e-01, -5.524641074192035e-01, -1.727140898235527e-01, -1.739497411432288e-01, -6.461319185203113e-01, -1.423282323024410e-01, -1.730683691350930e-01, -1.730683691350930e-01, -3.698568421875315e-03, -4.186466342093353e-03, -5.977444268032381e-02, -4.272645993216992e-04, -4.136384616755764e-03, -4.136384616755764e-03, -3.853795522984811e+00, -3.853485504154598e+00, -3.853768232395328e+00, -3.853527093645104e+00, -3.853630068680355e+00, -3.853630068680355e+00, -1.613846393984521e+00, -1.621530295235895e+00, -1.614314332062511e+00, -1.620282056778085e+00, -1.618500215884031e+00, -1.618500215884031e+00, -4.720896845259526e-01, -5.044219830401698e-01, -4.501574714040663e-01, -4.635543348546108e-01, -4.877970300499603e-01, -4.877970300499603e-01, -1.198122503395539e-01, -1.857620061057761e-01, -1.171920055360096e-01, -1.434901661143636e+00, -1.282056925114009e-01, -1.282056925114009e-01, -3.970514495308251e-04, -5.748031497769093e-04, -4.119159491242359e-04, -8.316294322982724e-02, -5.278781414923360e-04, -5.278781414923361e-04, -4.808481275831561e-01, -4.787352067476984e-01, -4.794837277835632e-01, -4.800777564439294e-01, -4.797797273218242e-01, -4.797797273218242e-01, -4.666600789970951e-01, -4.188513777410893e-01, -4.312545647736016e-01, -4.437048490992442e-01, -4.371838611173017e-01, -4.371838611173017e-01, -5.270018961921836e-01, -2.207964752357178e-01, -2.498361400437602e-01, -3.010615516834231e-01, -2.732589602568788e-01, -2.732589602568788e-01, -3.811792272406845e-01, -5.339904840102752e-02, -7.609624421934776e-02, -2.832436308163191e-01, -1.003852861052997e-01, -1.003852861052997e-01, -5.001359574600275e-03, -2.046660064130516e-05, -1.122125236804464e-04, -9.562891257895229e-02, -3.979295016141180e-04, -3.979295016141139e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.903779877328617e+01, -1.903786120123889e+01, -1.903814962533999e+01, -1.903712715773126e+01, -1.903783161274333e+01, -1.903783161274333e+01, -3.154138117908925e+00, -3.154167383980315e+00, -3.155097755199190e+00, -3.154142009730874e+00, -3.154166171731632e+00, -3.154166171731632e+00, -6.472495533961009e-01, -6.461172947925784e-01, -6.158353151049832e-01, -6.210254590655911e-01, -6.468391474670677e-01, -6.468391474670677e-01, -1.879851243702997e-01, -1.918743176956506e-01, -7.791403121492358e-01, -1.286907391663205e-01, -1.891706694336193e-01, -1.891706694336193e-01, -1.306052008932822e-02, -1.467572634187969e-02, -9.560506699262555e-02, -1.573934482165276e-03, -1.450244692639206e-02, -1.450244692639206e-02, -4.780926414601770e+00, -4.782926796856461e+00, -4.781130852340856e+00, -4.782686248440422e+00, -4.781952018041113e+00, -4.781952018041113e+00, -1.728571270823093e+00, -1.742514016349259e+00, -1.720721406593364e+00, -1.731575204496559e+00, -1.748312889967734e+00, -1.748312889967734e+00, -5.952981056647466e-01, -6.569702585339530e-01, -5.665027093068535e-01, -6.012868221438842e-01, -6.187493555415033e-01, -6.187493555415033e-01, -1.058594233748305e-01, -1.764188823175882e-01, -1.030667771308621e-01, -1.864171959393846e+00, -1.121188782140806e-01, -1.121188782140806e-01, -1.462749484611021e-03, -2.115753239440210e-03, -1.516559639869194e-03, -9.182046945453953e-02, -1.942940280193270e-03, -1.942940280193267e-03, -6.272816253562541e-01, -6.238787537615654e-01, -6.253479412311891e-01, -6.262643116646281e-01, -6.258321516039093e-01, -6.258321516039093e-01, -6.087744800822263e-01, -5.103323666741871e-01, -5.417517244403141e-01, -5.699534332145524e-01, -5.558765076652019e-01, -5.558765076652019e-01, -6.859332173515085e-01, -2.249084989504938e-01, -2.750449513590341e-01, -3.676262745828969e-01, -3.193957445207744e-01, -3.193957445207743e-01, -4.637556330019504e-01, -9.811328545610487e-02, -9.795968494537952e-02, -3.568462811693282e-01, -9.155008711268831e-02, -9.155008711268821e-02, -1.740963390429261e-02, -7.497395230742387e-05, -4.129048779283216e-04, -8.713561754469985e-02, -1.465489259963817e-03, -1.465489259963806e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.277789093008104e-09, -5.277764047550432e-09, -5.277577692910634e-09, -5.277989312943991e-09, -5.277776508661694e-09, -5.277776508661694e-09, -6.126867068473929e-06, -6.126935367524070e-06, -6.127834134681571e-06, -6.121288348136138e-06, -6.126801949261687e-06, -6.126801949261687e-06, -2.770633225574609e-03, -2.784549908389328e-03, -3.125176379543139e-03, -3.036954451860813e-03, -2.775697441888514e-03, -2.775697441888514e-03, -3.088369190884562e-01, -2.898780537245852e-01, -1.398807287902923e-03, -9.071923999137813e-01, -3.030434304126274e-01, -3.030434304126274e-01, 3.629467985897314e+02, 3.539723864413303e+02, 6.341198513916653e+00, 3.402213712157508e+02, 3.679335451286200e+02, 3.679335451286200e+02, -1.371731979207790e-06, -1.371137762283557e-06, -1.371668084311046e-06, -1.371206242488563e-06, -1.371434480686400e-06, -1.371434480686400e-06, -4.807887427116824e-05, -4.704797894589654e-05, -4.822776312505484e-05, -4.742095565417854e-05, -4.717975593573175e-05, -4.717975593573175e-05, -3.414174862699920e-03, -8.119760841682061e-04, -4.137926546487043e-03, -1.652508776212340e-03, -2.826289764121192e-03, -2.826289764121192e-03, -1.717081098056676e+00, -2.952069220901121e-01, -1.909009612119049e+00, -4.157954676599240e-05, -1.411104262628112e+00, -1.411104262628112e+00, 3.627535172070036e+02, 3.518259943586169e+02, 1.013394625553331e+03, -2.952404605096982e+00, 5.190832807290789e+02, 5.190832807290785e+02, -6.494926912667121e-04, -7.221515334861310e-04, -4.977064873765251e-04, -4.509244777183233e-04, -4.526516124487168e-04, -4.526516124487134e-04, -5.046720516698935e-04, -6.844151457300628e-03, -4.917790341463909e-03, -3.043526554666403e-03, -4.001584836537937e-03, -4.001584836537930e-03, -8.379606131573855e-04, -1.337466270778144e-01, -7.036750088455947e-02, -2.309534970302009e-02, -4.148467535373416e-02, -4.148467535373419e-02, -9.807542430300591e-03, 1.223965563345071e+01, -6.667523041967834e-01, -2.103337801328718e-02, -3.167862134316151e+00, -3.167862134316157e+00, 2.584936741537143e+02, 7.935924266039781e+02, 5.933092147026841e+02, -3.865517968809641e+00, 7.709226838043089e+02, 7.709226838043063e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
