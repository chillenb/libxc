
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hflyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hflyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.381637565139177e-02, -6.381645480678833e-02, -6.381669933804511e-02, -6.381540524669749e-02, -6.381641830308397e-02, -6.381641830308397e-02, -5.728295793100596e-02, -5.728371799272647e-02, -5.730482996476011e-02, -5.726968771402332e-02, -5.728337417641849e-02, -5.728337417641849e-02, -3.541033401044132e-02, -3.528918693108574e-02, -3.160014111212746e-02, -3.191296913720786e-02, -3.536674523570098e-02, -3.536674523570098e-02, -8.435515311242047e-03, -9.326396394334540e-03, -4.073166267233305e-02, 5.812776032146724e-03, -8.717130644557775e-03, -8.717130644557775e-03, -1.739519004444487e-03, -1.818977218840479e-03, 2.836185016448727e-03, -8.501631823023338e-04, -1.800726798594643e-03, -1.800726798594643e-03, -6.139995942376959e-02, -6.141860991763419e-02, -6.140182918526393e-02, -6.141633196583492e-02, -6.140958384623352e-02, -6.140958384623352e-02, -4.590751840469450e-02, -4.624279964437829e-02, -4.549580885297835e-02, -4.576549267968907e-02, -4.664965370154988e-02, -4.664965370154988e-02, -3.802886155196506e-02, -4.246758828492815e-02, -3.689408685737222e-02, -4.035453479508194e-02, -3.917403016546144e-02, -3.917403016546144e-02, 1.549245528991990e-02, 2.152958552112740e-03, 1.335348766697706e-02, -5.656225925425926e-02, 9.520175644837411e-03, 9.520175644837411e-03, -8.206423256716865e-04, -9.356300918883398e-04, -7.046174160956395e-04, 8.703310231562657e-03, -8.539474585499520e-04, -8.539474585499520e-04, -4.238475484265861e-02, -4.167044177356059e-02, -4.192765092689028e-02, -4.212562941832448e-02, -4.202673457619124e-02, -4.202673457619124e-02, -4.194462644543517e-02, -3.274192134731298e-02, -3.585840230414788e-02, -3.843432395958332e-02, -3.718267668288958e-02, -3.718267668288958e-02, -4.312922282244079e-02, -5.644506697812013e-03, -1.396237204434734e-02, -2.577183428102857e-02, -2.032080445164504e-02, -2.032080445164503e-02, -3.058942357496867e-02, 2.165967528260220e-03, 8.466014490217142e-03, -2.707760635228086e-02, 1.012073842329602e-02, 1.012073842329601e-02, -2.025957663395563e-03, -2.597480262393752e-04, -4.910932068826732e-04, 7.845787452882062e-03, -7.276391803211458e-04, -7.276391803211447e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hflyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hflyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.207801091242066e-02, -7.207788409774787e-02, -7.207750459956244e-02, -7.207957761877251e-02, -7.207794247772094e-02, -7.207794247772094e-02, -7.139209774799547e-02, -7.139083513602169e-02, -7.135630293585923e-02, -7.141652406267333e-02, -7.139146197220142e-02, -7.139146197220142e-02, -6.452387181002998e-02, -6.467923540188125e-02, -6.956898109693128e-02, -6.938998548695124e-02, -6.457957256368384e-02, -6.457957256368384e-02, -4.489435251642351e-02, -4.431572246358571e-02, -6.296860946968866e-02, -4.821792422146605e-02, -4.470342559257721e-02, -4.470342559257721e-02, -2.298742994413312e-03, -2.402659006367652e-03, -9.535655949164694e-03, -1.128652052228951e-03, -2.378808422367990e-03, -2.378808422367990e-03, -6.891880162293287e-02, -6.888888095178421e-02, -6.891581068938710e-02, -6.889254396372713e-02, -6.890334855639256e-02, -6.890334855639256e-02, -8.085696625674013e-02, -8.043801326503230e-02, -8.149485946326331e-02, -8.115507773917723e-02, -7.977683614944704e-02, -7.977683614944704e-02, -5.443152313583890e-02, -5.071306042399476e-02, -5.399661135171047e-02, -5.023772068480143e-02, -5.418136855599916e-02, -5.418136855599916e-02, -4.477621360081051e-02, -5.907907541323872e-02, -4.215971965264415e-02, -6.234231038520713e-02, -4.516136695491944e-02, -4.516136695491944e-02, -1.089625216750868e-03, -1.241573458070593e-03, -9.361247959283509e-04, -2.089008111876341e-02, -1.133654044895455e-03, -1.133654044895455e-03, -4.871534767073568e-02, -4.964746639242881e-02, -4.931177150995621e-02, -4.905329444622525e-02, -4.918237405354989e-02, -4.918237405354989e-02, -4.805648578940486e-02, -5.661490092365585e-02, -5.358317231735689e-02, -5.115111112955502e-02, -5.230667897641714e-02, -5.230667897641713e-02, -5.157106996497240e-02, -5.983206974798477e-02, -5.645860557996864e-02, -5.074986907300327e-02, -5.307900245767810e-02, -5.307900245767809e-02, -5.532524193408948e-02, -7.838696953558951e-03, -1.727946828277115e-02, -4.611044395629341e-02, -3.134479438334868e-02, -3.134479438334866e-02, -2.672252790936405e-03, -3.458734084632956e-04, -6.531563177451075e-04, -2.785057478509941e-02, -9.665969959064475e-04, -9.665969959064461e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hflyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hflyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.998307407697127e-11, 1.998283025312687e-11, 1.998156299182701e-11, 1.998555943171841e-11, 1.998294699310019e-11, 1.998294699310019e-11, 1.941035367636133e-07, 1.941014617873712e-07, 1.940037584009783e-07, 1.939626243312698e-07, 1.940982578554964e-07, 1.940982578554964e-07, 8.188294583145949e-04, 8.229612172897952e-04, 9.392202774834822e-04, 9.038726529050120e-04, 8.203335590079417e-04, 8.203335590079417e-04, 2.802907265445851e-01, 2.660992526532358e-01, 3.351879760746208e-04, 9.213369320751712e-01, 2.759425126349042e-01, 2.759425126349042e-01, 3.492011537461019e-03, 6.798784721272808e-03, 1.009575580545413e+01, 6.437008703281114e-11, 5.869760915961791e-03, 5.869760915961791e-03, 2.496506468495039e-08, 2.494252915080496e-08, 2.496268585046673e-08, 2.494516414154044e-08, 2.495360758116016e-08, 2.495360758116016e-08, 3.657220590093240e-06, 3.528686022426295e-06, 3.710763864394874e-06, 3.608217161079906e-06, 3.503594550695078e-06, 3.503594550695078e-06, 1.608553463082988e-03, 1.075852673374985e-03, 2.072553905954766e-03, 1.691003359109473e-03, 1.339634053908640e-03, 1.339634053908640e-03, 2.459110607555532e+00, 2.725471770621767e-01, 2.551814811025595e+00, 4.036360387979658e-06, 1.583168968428811e+00, 1.583168968428811e+00, 1.700547574184682e-11, 1.832844738529670e-09, 2.853557702757779e-14, 7.287824557197264e+00, 7.580605232291588e-11, 7.580605232291588e-11, 1.381448783428155e-03, 1.417832492624572e-03, 1.404660289329691e-03, 1.394597275311293e-03, 1.399623080721118e-03, 1.399623080721118e-03, 1.618271693609610e-03, 3.206152220728214e-03, 2.602549464526362e-03, 2.159914609108061e-03, 2.373220412016903e-03, 2.373220412016904e-03, 8.535042267501736e-04, 1.073631672232308e-01, 5.149085884792539e-02, 1.723392138126548e-02, 2.996562309032247e-02, 2.996562309032250e-02, 5.233207263602260e-03, 1.017762679236578e+01, 8.470785673413147e+00, 2.228582406638550e-02, 4.269436345204238e+00, 4.269436345204237e+00, 2.897827319915950e-02, 9.092583681632396e-50, 4.803201276088799e-23, 4.763637692033264e+00, 1.204469737208259e-13, 1.204469737208182e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
