
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.586757997458584e+01, -1.586760009272033e+01, -1.586774157307920e+01, -1.586744118292624e+01, -1.586759118338171e+01, -1.586759118338171e+01, -2.678833594236052e+00, -2.678805722116259e+00, -2.678225717249441e+00, -2.679733079464147e+00, -2.678863683536117e+00, -2.678863683536117e+00, -5.623377771179014e-01, -5.622193845501160e-01, -5.602308629369830e-01, -5.641108058723178e-01, -5.630214317474678e-01, -5.630214317474678e-01, -1.672646135136877e-01, -1.689898333267720e-01, -6.470518259631349e-01, -1.338201689995130e-01, -1.603232217064768e-01, -1.603232217064768e-01, -1.681680363995231e-03, -1.850229594328802e-03, -4.133385421815767e-02, -7.433763859814206e-04, -7.841708869957232e-04, -7.841708869957238e-04, -3.858122248950116e+00, -3.857610613405736e+00, -3.858107057861885e+00, -3.857655258762174e+00, -3.857858375584631e+00, -3.857858375584631e+00, -1.639627648803757e+00, -1.647455431730683e+00, -1.639814034644962e+00, -1.646733270659947e+00, -1.643863889631650e+00, -1.643863889631650e+00, -4.764060343737468e-01, -4.962569651541754e-01, -4.452868526460401e-01, -4.450308785381888e-01, -4.818228531828090e-01, -4.818228531828090e-01, -9.712794940203406e-02, -1.712353197612574e-01, -9.159556442384705e-02, -1.421321251743513e+00, -1.127765492009606e-01, -1.127765492009606e-01, -5.441215941869635e-04, -7.311094888655903e-04, -6.001111958231861e-04, -6.895282290675926e-02, -6.448243134905766e-04, -6.448243134905768e-04, -4.556548528836117e-01, -4.580871809816222e-01, -4.573077687102841e-01, -4.566092216209834e-01, -4.569649328316423e-01, -4.569649328316423e-01, -4.423831025778557e-01, -4.168630039441155e-01, -4.253484239880312e-01, -4.327054790867356e-01, -4.289417561931308e-01, -4.289417561931308e-01, -5.198040791690985e-01, -2.107854866769602e-01, -2.450100251839435e-01, -3.010687531799249e-01, -2.716184717170794e-01, -2.716184717170794e-01, -3.856549252999796e-01, -3.791617196495085e-02, -5.467103075232271e-02, -2.851316634405648e-01, -8.384908252448520e-02, -8.384908252448522e-02, -2.968402957952381e-03, -1.679146858351068e-04, -3.737987010847001e-04, -8.006337584497479e-02, -5.981502793428409e-04, -5.981502793428402e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.898325530334212e+01, -1.898323280730383e+01, -1.898333685896122e+01, -1.898329233452727e+01, -1.898358359177537e+01, -1.898364827392488e+01, -1.898265914343139e+01, -1.898247421607086e+01, -1.898330177304670e+01, -1.898293463922569e+01, -1.898330177304670e+01, -1.898293463922569e+01, -3.116536781559212e+00, -3.116604272813650e+00, -3.116563388332865e+00, -3.116632153738397e+00, -3.117222138558697e+00, -3.117383633553328e+00, -3.116578313043188e+00, -3.116734925918907e+00, -3.116029607381255e+00, -3.117323541130149e+00, -3.116029607381255e+00, -3.117323541130149e+00, -6.389124485716948e-01, -6.402550399794403e-01, -6.380260736142509e-01, -6.396470099628737e-01, -6.224451676241035e-01, -6.211816521405770e-01, -6.263399114533168e-01, -6.267363842424837e-01, -6.348332464881967e-01, -6.234749479165863e-01, -6.348332464881967e-01, -6.234749479165863e-01, -1.939696910799358e-01, -1.935727706260198e-01, -1.950451382385410e-01, -1.948667294452385e-01, -7.308715729416809e-01, -7.473900350205176e-01, -1.692296152789716e-01, -1.694771713826332e-01, -1.635532389662555e-01, -1.931413357004397e-01, -1.635532389662555e-01, -1.931413357004397e-01, -3.748119567369678e-03, -3.751453388354068e-03, -4.211914735748122e-03, -4.277750207124796e-03, -9.806468589562405e-02, -1.012145936735278e-01, -1.289252282660285e-03, -1.321562171230669e-03, -1.785404917545325e-03, -2.807921701796255e-03, -1.785404917545324e-03, -2.807921701796258e-03, -4.723163899235105e+00, -4.722055284130926e+00, -4.725045138580741e+00, -4.723876662822009e+00, -4.723267278144546e+00, -4.722119248086233e+00, -4.724884484549198e+00, -4.723770730381222e+00, -4.724126475995137e+00, -4.722970545268541e+00, -4.724126475995137e+00, -4.722970545268541e+00, -1.738745463048115e+00, -1.738674376623997e+00, -1.751824781555288e+00, -1.751437249849748e+00, -1.726993415564031e+00, -1.729233525181026e+00, -1.738233087617428e+00, -1.740641705550802e+00, -1.754229590979506e+00, -1.747968404988529e+00, -1.754229590979506e+00, -1.747968404988529e+00, -5.716834920837721e-01, -5.707149730226432e-01, -6.307627613723377e-01, -6.311343207071257e-01, -5.238350818143922e-01, -5.360654100419449e-01, -5.542427840797709e-01, -5.662449521017655e-01, -5.906483025515414e-01, -5.709704310157308e-01, -5.906483025515415e-01, -5.709704310157308e-01, -1.527360850240438e-01, -1.514478446471923e-01, -2.123706371332366e-01, -2.122946262344299e-01, -1.460708478504060e-01, -1.447514902535992e-01, -1.810951438926267e+00, -1.810272416507186e+00, -1.552377834827664e-01, -1.450381458224155e-01, -1.552377834827664e-01, -1.450381458224155e-01, -9.497868244907769e-04, -8.527755257205537e-04, -1.317283355564670e-03, -1.266779296679965e-03, -1.169302812755581e-03, -1.122543183631583e-03, -1.190450930488248e-01, -1.202352975867665e-01, -1.663249374603742e-03, -1.210285748571057e-03, -1.663249374603741e-03, -1.210285748571058e-03, -5.901637249624623e-01, -5.917955570380665e-01, -5.826041473496126e-01, -5.842497513543535e-01, -5.852516533887724e-01, -5.869060194078832e-01, -5.874665029497348e-01, -5.890877824331957e-01, -5.863618816158142e-01, -5.879994182794138e-01, -5.863618816158142e-01, -5.879994182794138e-01, -5.769758945303877e-01, -5.782976271684168e-01, -4.802055520133086e-01, -4.813348993776557e-01, -5.038196399611485e-01, -5.052198748323987e-01, -5.304440612095492e-01, -5.316912179949576e-01, -5.165555475281498e-01, -5.177912375393092e-01, -5.165555475281498e-01, -5.177912375393092e-01, -6.583973728056844e-01, -6.594274640466984e-01, -2.476328875833020e-01, -2.475243852433275e-01, -2.789615687812553e-01, -2.789239685567085e-01, -3.480192138410753e-01, -3.488764777464758e-01, -3.089427708868884e-01, -3.087391334463890e-01, -3.089427708868884e-01, -3.087391334463890e-01, -4.445787398160652e-01, -4.461349347495486e-01, -9.589585136604994e-02, -9.638498033359109e-02, -1.189425838041183e-01, -1.188344567028335e-01, -3.358754739087093e-01, -3.383070834917605e-01, -1.260321681471280e-01, -1.180767680568175e-01, -1.260321681471280e-01, -1.180767680568175e-01, -7.312247663511604e-03, -7.579442534160958e-03, -2.384144386046052e-04, -2.430369289081166e-04, -6.446151956336407e-04, -5.499717428845119e-04, -1.195636156278033e-01, -1.196972303535776e-01, -1.584547533645204e-03, -1.036727732427234e-03, -1.584547533645202e-03, -1.036727732427235e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.090750484484641e-08, 1.463652377038497e-11, -1.090756665528659e-08, -1.090744715492069e-08, 1.463631512328463e-11, -1.090752414074842e-08, -1.090712132600788e-08, 1.463532316351641e-11, -1.090710010423906e-08, -1.090778368253341e-08, 1.463842899785011e-11, -1.090793492001114e-08, -1.090748141819380e-08, 1.463681083685537e-11, -1.090749593281719e-08, -1.090748141819380e-08, 1.463681083685537e-11, -1.090749593281719e-08, -1.411497585062115e-05, 1.902747638536065e-07, -1.412050297975288e-05, -1.411541094257628e-05, 1.902725761814505e-07, -1.412134440601188e-05, -1.412995609054680e-05, 1.901971754504621e-07, -1.413358645835253e-05, -1.409555167700435e-05, 1.901358235030523e-07, -1.410015068760091e-05, -1.412140079737917e-05, 1.902491360705296e-07, -1.411290012265459e-05, -1.412140079737917e-05, 1.902491360705296e-07, -1.411290012265459e-05, -7.894479700662144e-03, 1.144533678933034e-03, -7.972453222629846e-03, -7.883526645081783e-03, 1.151156568500561e-03, -7.979204277664728e-03, -7.883025798192615e-03, 1.320750241138922e-03, -7.743603310760351e-03, -7.588520635459264e-03, 1.265386257803329e-03, -7.635070702057194e-03, -8.317588126738471e-03, 1.376562597771172e-03, -6.851823953823065e-03, -8.317588126738471e-03, 1.376562597771172e-03, -6.851823953823065e-03, -6.848513709038671e-01, 6.012876550391961e-01, -6.988372514756037e-01, -6.854826331219994e-01, 5.680272535784819e-01, -6.949019701228472e-01, -4.565586450584583e-03, 5.322727974273029e-04, -4.504483071494153e-03, -9.155873972820316e-01, 1.675901373768304e+00, -9.291350555326866e-01, -1.011119701532593e+00, 2.382014110698246e+00, -1.774078416437805e+00, -1.011119701532591e+00, 2.382014110698246e+00, -1.774078416437807e+00, 4.504574592955199e+02, 1.111914508308031e-07, 4.394996632611314e+02, 4.675745771798076e+02, 4.562559950974850e-07, 4.571284562661986e+02, 6.169389617975077e+01, 1.838627425311693e+01, 5.145256385053673e+01, 4.668721721865845e+02, 4.136895542502456e-17, 4.566640936741625e+02, 4.623242473542670e+02, 1.070835888305008e-12, 1.266221684876161e+03, 4.623242473542679e+02, 1.070835888305008e-12, 1.266221684876177e+03, -3.265641784606891e-06, 2.233703107768369e-08, -3.268373808208212e-06, -3.268240893680682e-06, 2.231537777319893e-08, -3.270883801841249e-06, -3.265752326893966e-06, 2.233595490630417e-08, -3.268433075178049e-06, -3.267979259832861e-06, 2.231683364972891e-08, -3.270717141214363e-06, -3.266999910653885e-06, 2.232609670798167e-08, -3.269637744540123e-06, -3.266999910653885e-06, 2.232609670798167e-08, -3.269637744540123e-06, -1.029424829667040e-04, 4.104557134069705e-06, -1.029561203796934e-04, -1.009498047942711e-04, 3.949027730077658e-06, -1.010136508827049e-04, -1.028149857219086e-04, 4.223201907834492e-06, -1.030228723319739e-04, -1.010958182784498e-04, 4.080707689470805e-06, -1.012588176046253e-04, -1.019773773038465e-04, 3.966397450084659e-06, -1.017665143894749e-04, -1.019773773038465e-04, 3.966397450084659e-06, -1.017665143894749e-04, -1.647108688366395e-02, 2.253646609880290e-03, -1.660608146336568e-02, -1.532900433119968e-02, 1.482953633834817e-03, -1.536736112297504e-02, -2.243691957527896e-02, 3.393155540240489e-03, -2.087275788374407e-02, -2.499243543902655e-02, 2.786872153422916e-03, -2.255012919976838e-02, -1.504548023846656e-02, 2.171399762139616e-03, -1.719823689177588e-02, -1.504548023846657e-02, 2.171399762139616e-03, -1.719823689177588e-02, -1.032884873920228e-01, 5.364331359216309e+00, -2.869511796231392e-01, -4.104251273589868e-01, 5.928062603673171e-01, -4.145280646067002e-01, 5.370975479226017e-01, 6.670630325612285e+00, -3.105668645424835e-01, -1.978400740166558e-04, 4.550774239056777e-06, -1.981910547958185e-04, -8.173576261109581e-01, 3.362374819306393e+00, -1.593556991536168e+00, -8.173576261109581e-01, 3.362374819306393e+00, -1.593556991536168e+00, 6.866349052302306e+02, 5.421496698436063e-24, 5.939780090744340e+02, 5.632146372787520e+02, 1.228758886113335e-17, 5.205895475766462e+02, 3.104191083190104e+03, 5.656440620065503e-25, 3.387421085114936e+03, 6.635300322877167e+00, 1.504669301565768e+01, 6.622523473975729e+00, 1.598712984405460e+03, 9.610322787727072e-20, 1.461781874426364e+03, 1.598712984405456e+03, 9.610322787727070e-20, 1.461781874426364e+03, -2.452301313767755e-02, 2.199677179191681e-03, -2.433179792109652e-02, -2.157620458220812e-02, 2.264286130145305e-03, -2.137543407570640e-02, -2.212912511123914e-02, 2.241303100651475e-03, -2.193118865891260e-02, -2.285604051457440e-02, 2.222568983976134e-03, -2.265470559857210e-02, -2.244529220209327e-02, 2.231922961512953e-03, -2.224531951607544e-02, -2.244529220209327e-02, 2.231922961512953e-03, -2.224531951607544e-02, -2.849970868127689e-02, 2.525278278664052e-03, -2.817940180520502e-02, -2.681032723371854e-02, 5.397863529116129e-03, -2.666078458454760e-02, -2.588824873911083e-02, 4.298036410666330e-03, -2.572560470155823e-02, -2.547208999166798e-02, 3.458400931093935e-03, -2.526568706766905e-02, -2.567499623792230e-02, 3.860241852276062e-03, -2.546569069853402e-02, -2.567499623792230e-02, 3.860241852276062e-03, -2.546569069853402e-02, -1.258150224074644e-02, 1.166454564355177e-03, -1.258991198902568e-02, -2.470407294654396e-01, 2.273047300256539e-01, -2.488747414713476e-01, -1.720460287759625e-01, 1.027440095908986e-01, -1.735316682670066e-01, -9.778895859960640e-02, 2.883676467546989e-02, -9.697428165682974e-02, -1.325809791500298e-01, 5.500747727544229e-02, -1.332883538752646e-01, -1.325809791500299e-01, 5.500747727544231e-02, -1.332883538752647e-01, -3.663138126779741e-02, 8.100714365057125e-03, -3.637819669816404e-02, 6.298210744016780e+01, 1.766533536733120e+01, 6.173274819253829e+01, 2.570152262047846e+01, 1.878803243082290e+01, 2.164001590187033e+01, -1.297220241969747e-01, 3.428914672188251e-02, -1.266852718089342e-01, 6.968599112465288e-01, 9.701438036301546e+00, -1.678895993170336e+00, 6.968599112465199e-01, 9.701438036301546e+00, -1.678895993170348e+00, 3.292047164598617e+02, 3.417478728614279e-04, 3.318601800295817e+02, 2.550750103344272e+03, 2.850114531961813e-85, 4.358165802848772e+03, 1.364093859266246e+03, 1.662312648545182e-36, 1.426057977059433e+03, 4.462466429310981e-01, 1.102889579754806e+01, 8.874767264405481e-02, 3.202151144906746e+03, 8.178814636871498e-22, 1.544985651929305e+03, 3.202151144906741e+03, 8.178814636871070e-22, 1.544985651929316e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
