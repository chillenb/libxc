
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lcy_blyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.072413349337598e+01, -2.072415765815326e+01, -2.072434204867290e+01, -2.072394481351973e+01, -2.072414559687668e+01, -2.072414559687668e+01, -3.175374813703362e+00, -3.175351629089395e+00, -3.174857316236257e+00, -3.176443659086260e+00, -3.175377644498433e+00, -3.175377644498433e+00, -4.436243767623697e-01, -4.432200888404883e-01, -4.329061652987081e-01, -4.374313516311538e-01, -4.434758844376194e-01, -4.434758844376194e-01, -4.840434132390814e-02, -5.036719367111062e-02, -5.595843069786877e-01, -1.349786844047333e-02, -4.900490185721144e-02, -4.900490185721144e-02, -1.751218051555440e-03, -1.832421119049182e-03, 1.951623356348239e-03, -8.514554073263894e-04, -1.813754924342880e-03, -1.813754924342880e-03, -4.749974752505431e+00, -4.749480672615266e+00, -4.749930339605039e+00, -4.749546066630917e+00, -4.749712713368774e+00, -4.749712713368774e+00, -1.778335415170793e+00, -1.789239231647057e+00, -1.777647019961499e+00, -1.786151161601832e+00, -1.786597012083334e+00, -1.786597012083334e+00, -3.554098091814112e-01, -3.893098002346336e-01, -3.304186489582094e-01, -3.441173109249008e-01, -3.734428959928044e-01, -3.734428959928044e-01, 6.695669426075910e-03, -3.994067890814813e-02, 4.877806887804523e-03, -1.552007348537085e+00, -3.300022182669206e-03, -3.300022182669206e-03, -8.218024369855095e-04, -9.373616663969293e-04, -7.053465053600107e-04, 6.373353339149419e-03, -8.552573155734110e-04, -8.552573155734110e-04, -3.601102002987502e-01, -3.596848918110890e-01, -3.598660155920072e-01, -3.599833701471190e-01, -3.599266981520132e-01, -3.599266981520132e-01, -3.439048639844411e-01, -2.931934459302941e-01, -3.090861983459888e-01, -3.229879790527002e-01, -3.159592371062894e-01, -3.159592371062894e-01, -4.156255743357496e-01, -7.384035528824219e-02, -1.082071716523632e-01, -1.683128097841743e-01, -1.367748469104830e-01, -1.367748469104830e-01, -2.515602709592144e-01, 1.460204889858672e-03, 6.749455569739332e-03, -1.534520183123522e-01, 5.179280835939336e-03, 5.179280835939328e-03, -2.044786522762402e-03, -2.597835642675523e-04, -4.913368192229605e-04, 3.522230312766986e-03, -7.284432376825666e-04, -7.284432376825655e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lcy_blyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.496145269351796e+01, -2.496153418706764e+01, -2.496191344587105e+01, -2.496057865846258e+01, -2.496149553921665e+01, -2.496149553921665e+01, -3.835937549835982e+00, -3.835963656246577e+00, -3.836848179704532e+00, -3.836181982025597e+00, -3.835968207832327e+00, -3.835968207832327e+00, -5.972858582385485e-01, -5.966605113209783e-01, -5.819668833954607e-01, -5.872237564395657e-01, -5.970568170007280e-01, -5.970568170007280e-01, -1.093180430223490e-01, -1.103506968542818e-01, -7.420896779930229e-01, -8.145469968762437e-02, -1.096068883102770e-01, -1.096068883102770e-01, -2.322131456377450e-03, -2.429534271796380e-03, -1.127782350526631e-02, -1.131236366351273e-03, -2.404852785746123e-03, -2.404852785746123e-03, -5.951549175404491e+00, -5.953761630983316e+00, -5.951776307372286e+00, -5.953496584963712e+00, -5.952682060976865e+00, -5.952682060976865e+00, -2.034358485874024e+00, -2.050312920719516e+00, -2.027445452933628e+00, -2.039842719734781e+00, -2.054280642116131e+00, -2.054280642116131e+00, -4.983446435129469e-01, -5.560964322400668e-01, -4.658748419739137e-01, -4.921178425282089e-01, -5.228995238349091e-01, -5.228995238349091e-01, -6.087325446069795e-02, -1.262547018100406e-01, -5.768952650492316e-02, -2.077783377674447e+00, -6.797948121295161e-02, -6.797948121295161e-02, -1.091945327617492e-03, -1.245036366161292e-03, -9.375829185386920e-04, -2.539467867664653e-02, -1.136273607129351e-03, -1.136273607129351e-03, -5.220136084603590e-01, -5.169568869094369e-01, -5.186943480278755e-01, -5.200895371903966e-01, -5.193851165105826e-01, -5.193851165105826e-01, -5.004383624183693e-01, -4.165677395505826e-01, -4.382255873138224e-01, -4.601419905200110e-01, -4.487230293180929e-01, -4.487230293180930e-01, -5.906818345234854e-01, -1.631880843994979e-01, -1.953441031713255e-01, -2.580444795920658e-01, -2.230350975172008e-01, -2.230350975172007e-01, -3.644300225800017e-01, -9.232795138082509e-03, -2.062452187073713e-02, -2.348933857756843e-01, -4.064427897946880e-02, -4.064427897946876e-02, -2.709887936982229e-03, -3.459444843708283e-04, -6.536435364375425e-04, -3.602594681870093e-02, -9.682050466542066e-04, -9.682050466542052e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lcy_blyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.039471604296908e-09, -7.039442601136701e-09, -7.039207153383689e-09, -7.039684223609232e-09, -7.039457195564986e-09, -7.039457195564986e-09, -7.906901303261793e-06, -7.907174621775094e-06, -7.913451686588369e-06, -7.896268815387642e-06, -7.906913667143081e-06, -7.906913667143081e-06, -1.824112021875782e-03, -1.817878078289454e-03, -1.625221702930767e-03, -1.612735364787991e-03, -1.821893446899459e-03, -1.821893446899459e-03, 2.335329669821468e-01, 2.185356482164454e-01, -1.287613088189909e-03, 8.839774714718105e-01, 2.289154761813487e-01, 2.289154761813487e-01, 3.235218185566342e-03, 6.508068182211797e-03, 1.008983742318462e+01, -2.832682942151303e-05, 5.579763313778213e-03, 5.579763313778213e-03, -1.933726330298363e-06, -1.935172950229808e-06, -1.933863245471903e-06, -1.934988187098062e-06, -1.934482642707615e-06, -1.934482642707615e-06, -5.031578471647516e-05, -4.950016102490718e-05, -5.019103914745804e-05, -4.955736299887402e-05, -4.992198379061126e-05, -4.992198379061126e-05, -3.583080849773060e-03, -4.002866060508167e-03, -3.945775349245050e-03, -4.762780532554375e-03, -3.423666746081598e-03, -3.423666746081598e-03, 2.435062802182832e+00, 2.412384664939762e-01, 2.526196355330855e+00, -9.687253549639915e-05, 1.550356499826296e+00, 1.550356499826296e+00, -2.673592374785862e-05, -3.851261694709455e-05, -3.594377026748234e-05, 7.275018196045592e+00, -3.898651486730968e-05, -3.898651486730801e-05, -5.234695658248492e-03, -4.768835286909509e-03, -4.913727354610025e-03, -5.040309624350478e-03, -4.975181139954384e-03, -4.975181139954384e-03, -5.856703643789908e-03, -3.699773903362123e-03, -4.260788163234667e-03, -4.758481178226982e-03, -4.513731334199751e-03, -4.513731334199751e-03, -3.453088708689786e-03, 8.081106586629497e-02, 2.819894240097175e-02, -9.190262881146397e-04, 8.937597855158904e-03, 8.937597855158883e-03, -3.942704458434690e-03, 1.017321367371444e+01, 8.461669593557053e+00, -1.549056985616318e-03, 4.247069226330585e+00, 4.247069226330582e+00, 2.865521163331304e-02, -1.557969147213263e-06, -8.393535331097519e-06, 4.740531277600347e+00, -3.240463205235516e-05, -3.240463205244614e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
