
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe0_13_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.401486740243513e+01, -1.401488652823360e+01, -1.401501536906976e+01, -1.401472991654539e+01, -1.401487325823728e+01, -1.401487325823728e+01, -2.357096337972787e+00, -2.357076155401568e+00, -2.356666654728178e+00, -2.357818990514386e+00, -2.357128153532138e+00, -2.357128153532138e+00, -4.923729955172104e-01, -4.921535162107518e-01, -4.881037508227023e-01, -4.915204305447451e-01, -4.915738462177309e-01, -4.915738462177309e-01, -1.499133204261415e-01, -1.512081377675858e-01, -5.669419855308921e-01, -1.235471688150200e-01, -1.427685036508413e-01, -1.427685036508412e-01, -6.737292204255763e-03, -7.094333896696409e-03, -3.851712116152586e-02, -3.886053627866099e-03, -5.423064829968764e-03, -5.423064829968764e-03, -3.415275513614600e+00, -3.415075247397296e+00, -3.415272454078548e+00, -3.415095534691100e+00, -3.415170410413985e+00, -3.415170410413985e+00, -1.430266484610056e+00, -1.437269590050200e+00, -1.430187572187934e+00, -1.436358777119408e+00, -1.434203877941369e+00, -1.434203877941369e+00, -4.259757786505759e-01, -4.578448494733897e-01, -3.974344110011302e-01, -4.096982012406590e-01, -4.320703847592611e-01, -4.320703847592612e-01, -9.318657874554809e-02, -1.574242305024388e-01, -8.708851041882444e-02, -1.280872576352783e+00, -1.046326792727264e-01, -1.046326792727264e-01, -3.000327656449579e-03, -3.798827033678533e-03, -2.908914821883334e-03, -6.067164968253658e-02, -3.653960257674940e-03, -3.653960257674946e-03, -4.276510683983440e-01, -4.243075391515512e-01, -4.253940015591392e-01, -4.263607967590134e-01, -4.258686066869883e-01, -4.258686066869883e-01, -4.176295427415303e-01, -3.675048715130083e-01, -3.792946374208209e-01, -3.925787317593945e-01, -3.855201837331690e-01, -3.855201837331690e-01, -4.779353182095359e-01, -1.896294857132590e-01, -2.170180990968562e-01, -2.672792757748235e-01, -2.397214200282266e-01, -2.397214200282266e-01, -3.405324398200987e-01, -3.688771892920496e-02, -4.972457607045552e-02, -2.564942440782721e-01, -7.497823085308780e-02, -7.497823085308782e-02, -9.492404865886692e-03, -1.015511179745092e-03, -2.135485391190750e-03, -7.094937396963182e-02, -3.355634888129454e-03, -3.355634888129446e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe0_13_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.688901853063525e+01, -1.688899891759393e+01, -1.688909659900130e+01, -1.688905598667772e+01, -1.688932643135320e+01, -1.688938901468017e+01, -1.688844050717936e+01, -1.688826515972693e+01, -1.688906177374280e+01, -1.688870235837669e+01, -1.688906177374280e+01, -1.688870235837669e+01, -2.800324529394760e+00, -2.800449053848843e+00, -2.800359021258831e+00, -2.800488723167854e+00, -2.801243946886569e+00, -2.801451742297953e+00, -2.800148699304861e+00, -2.800360612580403e+00, -2.799839461580140e+00, -2.801152821587833e+00, -2.799839461580140e+00, -2.801152821587833e+00, -5.835531764478049e-01, -5.864739130004243e-01, -5.821067746255811e-01, -5.856680974112675e-01, -5.585317142291314e-01, -5.544247277820278e-01, -5.605353323413668e-01, -5.618675716863616e-01, -5.823833679005297e-01, -5.435237838535933e-01, -5.823833679005297e-01, -5.435237838535933e-01, -1.617250675999381e-01, -1.638676181777888e-01, -1.641260539216225e-01, -1.667631974293532e-01, -6.652721676756601e-01, -6.881987615400534e-01, -1.306742842835643e-01, -1.316510015891770e-01, -1.491710821385284e-01, -1.201429834967216e-01, -1.491710821385283e-01, -1.201429834967215e-01, -8.676736077551102e-03, -9.218082060392223e-03, -9.090190465922949e-03, -9.735131265605445e-03, -4.847201028744241e-02, -5.091157484138828e-02, -5.221723068273528e-03, -5.134856203719652e-03, -7.743199347809033e-03, -4.409312712412149e-03, -7.743199347809032e-03, -4.409312712412147e-03, -4.263209762934161e+00, -4.262207432170446e+00, -4.265268047112889e+00, -4.264203069009483e+00, -4.263320457673208e+00, -4.262277027393663e+00, -4.265091746876008e+00, -4.264084644947778e+00, -4.264263963995778e+00, -4.263211179055403e+00, -4.264263963995778e+00, -4.263211179055403e+00, -1.530907662248933e+00, -1.530834700100574e+00, -1.543603848018851e+00, -1.543198003374579e+00, -1.517501725806478e+00, -1.520480464715114e+00, -1.528347120281789e+00, -1.531483431565220e+00, -1.547691966050150e+00, -1.539787122264513e+00, -1.547691966050150e+00, -1.539787122264513e+00, -5.419706356253581e-01, -5.410800174600948e-01, -5.995087820737791e-01, -5.999490422779297e-01, -4.955073503826763e-01, -5.089858892022187e-01, -5.302645708527155e-01, -5.410215960645970e-01, -5.613642335433471e-01, -5.419061968163446e-01, -5.613642335433472e-01, -5.419061968163446e-01, -1.064904052721311e-01, -1.067473016254100e-01, -1.642238187835869e-01, -1.645765153023623e-01, -9.925298756023500e-02, -1.023173403267162e-01, -1.674440377748173e+00, -1.673852856957797e+00, -1.148484922949140e-01, -1.131726315115037e-01, -1.148484922949140e-01, -1.131726315115037e-01, -3.918063201771739e-03, -4.071809076932699e-03, -5.024164049931777e-03, -5.100235450195814e-03, -3.756171636611829e-03, -3.977325778653650e-03, -7.427562501314908e-02, -7.478839368247965e-02, -3.837184016429358e-03, -5.266938557440052e-03, -3.837184016429365e-03, -5.266938557440061e-03, -5.584423690704273e-01, -5.599130006661197e-01, -5.550332802610674e-01, -5.565694147012777e-01, -5.564723268521483e-01, -5.580024704438123e-01, -5.574935898916747e-01, -5.589729594929415e-01, -5.570063598727516e-01, -5.585104478899355e-01, -5.570063598727516e-01, -5.585104478899355e-01, -5.443402407213547e-01, -5.454937770971822e-01, -4.459928364631184e-01, -4.474922291064695e-01, -4.772725447637335e-01, -4.789672163460920e-01, -5.079045807455891e-01, -5.091605516300344e-01, -4.927426743029806e-01, -4.940409573909553e-01, -4.927426743029806e-01, -4.940409573909553e-01, -6.252277457888770e-01, -6.263247423802698e-01, -1.991714874420366e-01, -1.996537406053280e-01, -2.371658840814163e-01, -2.382917081878917e-01, -3.265028720110990e-01, -3.276786217748425e-01, -2.781852118261222e-01, -2.781296669860870e-01, -2.781852118261221e-01, -2.781296669860869e-01, -4.138302109121322e-01, -4.160456462667971e-01, -4.772146638597239e-02, -4.801910598088171e-02, -6.221896412606619e-02, -6.391730633612452e-02, -3.230312275132166e-01, -3.261951869535665e-01, -8.700435118652391e-02, -8.815686928810303e-02, -8.700435118652394e-02, -8.815686928810305e-02, -1.239400898233940e-02, -1.283989532310728e-02, -1.352395201734545e-03, -1.355448080578825e-03, -2.751294475041618e-03, -2.926090992082242e-03, -8.354064997423710e-02, -8.451912889312103e-02, -3.634000697813224e-03, -4.828315430038027e-03, -3.634000697813218e-03, -4.828315430038019e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe0_13_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.208869877547820e-09, 3.855567579455844e-10, -9.208921941537922e-09, -9.208790479094088e-09, 3.855637563905792e-10, -9.208863276957745e-09, -9.208457887884559e-09, 3.855734091993355e-10, -9.208412572186422e-09, -9.209369036038330e-09, 3.854697494807899e-10, -9.209558998148728e-09, -9.208843724304771e-09, 3.855271085313426e-10, -9.209030268534787e-09, -9.208843724304771e-09, 3.855271085313426e-10, -9.209030268534787e-09, -1.160548460048990e-05, 2.158879157656427e-06, -1.160930902944200e-05, -1.160549599750211e-05, 2.159323527660124e-06, -1.160961795786170e-05, -1.160913762517179e-05, 2.169371669283230e-06, -1.161111290474706e-05, -1.159564123647690e-05, 2.149943255801801e-06, -1.159837439766694e-05, -1.161259837761969e-05, 2.159156568071321e-06, -1.160039005837991e-05, -1.161259837761969e-05, 2.159156568071321e-06, -1.160039005837991e-05, -6.291404837796494e-03, 3.586683876242116e-03, -6.295083034774912e-03, -6.309693678009985e-03, 3.559577090514688e-03, -6.314680288538335e-03, -6.699812721873489e-03, 2.876045381924161e-03, -6.671428869191112e-03, -6.491236571367642e-03, 2.810968523930000e-03, -6.503596788975328e-03, -6.606966945848513e-03, 2.852692094259074e-03, -6.158790982508173e-03, -6.606966945848513e-03, 2.852692094259074e-03, -6.158790982508173e-03, -7.033303286569155e-01, 3.108902575321890e-01, -6.515420602647881e-01, -6.985781633368692e-01, 3.280826843588528e-01, -6.352645451926101e-01, -3.712950765034979e-03, 1.940414170439823e-03, -3.387612890481094e-03, -1.025144829433668e+00, 2.258949661124237e-01, -9.892941977253835e-01, -6.462852987138952e-01, 1.882246441728870e-01, -1.521896463291056e+00, -6.462852987138950e-01, 1.882246441728873e-01, -1.521896463291057e+00, -3.263212273446704e+00, 8.471332723898200e-03, -3.230461123162718e+00, -3.437755873311792e+00, 9.964515393423459e-03, -3.420144983053200e+00, -1.881791405555595e+00, 5.126941006152715e-02, -1.891975509883439e+00, -2.991334223275924e+00, 3.008683449168684e-03, -2.910090340812169e+00, -3.259775479326890e+00, 4.414566270491809e-03, -8.274391216541519e+00, -3.259775479326447e+00, 4.414566270088269e-03, -8.274391216541089e+00, -2.483747803512856e-06, 5.666948009101149e-07, -2.486304850781902e-06, -2.482164037081283e-06, 5.704413223836728e-07, -2.484712575451056e-06, -2.483667758880686e-06, 5.668443577206054e-07, -2.486224424042294e-06, -2.482262959552493e-06, 5.701514261968389e-07, -2.484826411883977e-06, -2.482960529703952e-06, 5.686004611431787e-07, -2.485496554204461e-06, -2.482960529703952e-06, 5.686004611431787e-07, -2.485496554204461e-06, -9.165659924574561e-05, 1.221811741084532e-05, -9.167382723410044e-05, -8.975117044644610e-05, 1.218856108878283e-05, -8.983404941120663e-05, -9.185635631379549e-05, 1.161795009824474e-05, -9.193278092610770e-05, -9.023855788008368e-05, 1.159619612758267e-05, -9.026423136674891e-05, -9.041182452130667e-05, 1.250231835492394e-05, -9.056452849245283e-05, -9.041182452130667e-05, 1.250231835492394e-05, -9.056452849245283e-05, -1.008871708436978e-02, 1.180452397706796e-02, -1.026682920500617e-02, -5.631413664465651e-03, 1.489938286408802e-02, -5.626013496572574e-03, -1.519629091778527e-02, 1.535577972946644e-02, -1.246005890532158e-02, -1.098729718065783e-02, 2.278859644535717e-02, -8.208298141667500e-03, -8.066890746456716e-03, 1.179162458306085e-02, -1.111818932518374e-02, -8.066890746456718e-03, 1.179162458306085e-02, -1.111818932518374e-02, -1.232274108008490e+00, 1.261488607621168e-01, -1.252844670437895e+00, -4.635065049071854e-01, 1.139695105238702e-01, -4.585650437065556e-01, -1.400214464176742e+00, 1.279112469154852e-01, -1.355002274625846e+00, -9.885775132322121e-05, 1.207887057881010e-04, -9.915583367879423e-05, -1.284311230183368e+00, 2.409472748596690e-01, -1.544989064510520e+00, -1.284311230183368e+00, 2.409472748596690e-01, -1.544989064510520e+00, -4.199918732599107e+00, 2.933546798259037e-03, -3.634979609551360e+00, -3.615889458781982e+00, 3.699144102256803e-03, -3.338324770612616e+00, -2.058861334171734e+01, 3.685108437354808e-02, -2.290557915021448e+01, -2.119269224049361e+00, 1.250822448857004e-01, -2.039825619747953e+00, -1.024043462565236e+01, 1.410360645889085e-02, -1.005862490753062e+01, -1.024043462564904e+01, 1.410360646869916e-02, -1.005862490752732e+01, -6.006082593056832e-03, 2.514346072918196e-02, -5.730551201160273e-03, -7.673878104480298e-03, 2.157065992117518e-02, -7.404692291436220e-03, -7.148296869934132e-03, 2.270457728491302e-02, -6.877188035574177e-03, -6.666637575113644e-03, 2.373865089872573e-02, -6.393102231816116e-03, -6.913270567923218e-03, 2.321019190891285e-02, -6.640898733842410e-03, -6.913270567923218e-03, 2.321019190891285e-02, -6.640898733842410e-03, -6.012166353872753e-03, 2.977269840520045e-02, -5.739535166528035e-03, -2.032502324702079e-02, 1.592277215307748e-02, -1.995017472939017e-02, -1.692797706537414e-02, 1.838749842245184e-02, -1.656450754613755e-02, -1.318133380677580e-02, 2.169730037966074e-02, -1.287084489406979e-02, -1.514204738599965e-02, 1.995497716545398e-02, -1.480377166373442e-02, -1.514204738599965e-02, 1.995497716545398e-02, -1.480377166373442e-02, -4.883450390691684e-03, 1.183264719377924e-02, -4.836628501092692e-03, -2.618873252193520e-01, 8.498631964250428e-02, -2.586414203777469e-01, -1.687429509559853e-01, 7.821972418059023e-02, -1.653931612549780e-01, -7.381437502026836e-02, 6.964082434152352e-02, -7.184843723895269e-02, -1.147390517279354e-01, 7.796350422599263e-02, -1.156011475167373e-01, -1.147390517279355e-01, 7.796350422599266e-02, -1.156011475167375e-01, -2.775619625784929e-02, 2.285950305464996e-02, -2.698770585561478e-02, -1.724012772750385e+00, 4.213028450134424e-02, -1.726015738327532e+00, -1.683215870694500e+00, 6.458066222247318e-02, -1.719529192259252e+00, -8.601336339179219e-02, 1.099497136873529e-01, -7.924012930760863e-02, -2.048330509858564e+00, 2.182010199987041e-01, -2.404390931903540e+00, -2.048330509858565e+00, 2.182010199987039e-01, -2.404390931903540e+00, -2.584089680926883e+00, 1.056259116938041e-02, -2.638103738562676e+00, -1.292488162190168e+01, 4.011531506685853e-03, -2.289600623237603e+01, -7.975747847299305e+00, 5.020763908060611e-03, -8.490878671682554e+00, -2.308680672041897e+00, 2.002688123716920e-01, -2.257206367399698e+00, -2.111827342958052e+01, 1.800188742308661e-02, -1.044045891719193e+01, -2.111827342957687e+01, 1.800188743452388e-02, -1.044045891718828e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
