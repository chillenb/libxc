
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.683701462276264e+01, -1.683703843188810e+01, -1.683719547595241e+01, -1.683684018778223e+01, -1.683701907157443e+01, -1.683701907157443e+01, -2.845241430675169e+00, -2.845215130369840e+00, -2.844675345774816e+00, -2.846142505790139e+00, -2.845277005087234e+00, -2.845277005087234e+00, -6.005690929789926e-01, -6.004159203444162e-01, -5.977009852886884e-01, -6.018195386738387e-01, -6.004433616037378e-01, -6.004433616037378e-01, -1.839519638086861e-01, -1.855786537145226e-01, -6.901826950860497e-01, -1.515192340090317e-01, -1.638556188749044e-01, -1.638556188749045e-01, -4.968043969652566e-02, -4.979859474554365e-02, -8.906754165068348e-02, -4.477526187824151e-02, -4.486631132209130e-02, -4.486631132209128e-02, -4.107141216503075e+00, -4.106726269367772e+00, -4.107130384900340e+00, -4.106763952375063e+00, -4.106926392673448e+00, -4.106926392673448e+00, -1.734546341507554e+00, -1.743048737452929e+00, -1.734160757718223e+00, -1.741669312565902e+00, -1.739428309420567e+00, -1.739428309420567e+00, -5.108686295039222e-01, -5.335514730801729e-01, -4.774711598626050e-01, -4.785358131983410e-01, -5.163321179126020e-01, -5.163321179126020e-01, -1.196780065709249e-01, -1.907794678173016e-01, -1.144741904825825e-01, -1.520264346195769e+00, -1.307811993501136e-01, -1.307811993501136e-01, -4.025884819546704e-02, -4.315841563110796e-02, -2.848009062586674e-02, -9.684038402423430e-02, -3.439748564299590e-02, -3.439748564299592e-02, -4.908710368601097e-01, -4.929013217227370e-01, -4.922328790715420e-01, -4.916405331646372e-01, -4.919404397780273e-01, -4.919404397780273e-01, -4.769818526436859e-01, -4.468831569773710e-01, -4.564216720079774e-01, -4.649865274128148e-01, -4.605878244996608e-01, -4.605878244996608e-01, -5.585670579717730e-01, -2.309850420964393e-01, -2.658026447350688e-01, -3.243816543164635e-01, -2.933026843811203e-01, -2.933026843811203e-01, -4.138600058395659e-01, -8.934337418920447e-02, -9.426821490710281e-02, -3.076597878073375e-01, -1.043827710555060e-01, -1.043827710555060e-01, -5.642334392341699e-02, -2.458567389878356e-02, -3.243450063743952e-02, -1.017481024559223e-01, -3.232387380657143e-02, -3.232387380657141e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.036304202769279e+01, -2.036311610309705e+01, -2.036343474412288e+01, -2.036233287869426e+01, -2.036291174819228e+01, -2.036291174819228e+01, -3.351242982049366e+00, -3.351271043068403e+00, -3.352000519151996e+00, -3.351354716121750e+00, -3.351355560590890e+00, -3.351355560590890e+00, -6.880792386097945e-01, -6.872289656068992e-01, -6.674726535663977e-01, -6.726687478124584e-01, -6.716470976869092e-01, -6.716470976869092e-01, -2.040324817651363e-01, -2.059423243172341e-01, -7.953498731389083e-01, -1.691172286293752e-01, -1.815253874207490e-01, -1.815253874207490e-01, -1.668672090663060e-02, -1.709997117493854e-02, -5.180695305201383e-02, -1.246701185316220e-02, -1.373031088232931e-02, -1.373031088232934e-02, -5.068572263897308e+00, -5.070463066807399e+00, -5.068658100193599e+00, -5.070327298698635e+00, -5.069531061635922e+00, -5.069531061635922e+00, -1.868401377326144e+00, -1.882547672384007e+00, -1.856381102595091e+00, -1.868809908889307e+00, -1.882115904460757e+00, -1.882115904460757e+00, -6.156426141829749e-01, -6.792428302102536e-01, -5.713754817682215e-01, -6.037504357715811e-01, -6.262388377459680e-01, -6.262388377459680e-01, -1.318691777375882e-01, -2.155880025189992e-01, -1.225201671574980e-01, -1.943090612071132e+00, -1.434463876832373e-01, -1.434463876832373e-01, -1.057770868409648e-02, -1.209789413026869e-02, -8.590661668773715e-03, -8.112281781320288e-02, -1.030820449472367e-02, -1.030820449472370e-02, -6.366263178037572e-01, -6.283249412605149e-01, -6.311124644352935e-01, -6.335168110981099e-01, -6.323017101817341e-01, -6.323017101817341e-01, -6.221055141440236e-01, -5.176313678131568e-01, -5.439234910926494e-01, -5.726032255221636e-01, -5.576777155924031e-01, -5.576777155924031e-01, -7.092527816016999e-01, -2.575017487167346e-01, -2.956156982846356e-01, -3.754792488951412e-01, -3.309645838343763e-01, -3.309645838343762e-01, -4.795822367786772e-01, -5.032997386961788e-02, -6.620965785295442e-02, -3.642048468999612e-01, -1.010055086510941e-01, -1.010055086510941e-01, -2.084823809768473e-02, -5.279802825954694e-03, -8.162794123561532e-03, -9.530790577746180e-02, -9.640262494731204e-03, -9.640262494731162e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.214058874266490e-09, -5.214033675209977e-09, -5.213850904374920e-09, -5.214227288442585e-09, -5.214040120579040e-09, -5.214040120579040e-09, -6.753073883789720e-06, -6.753365050752026e-06, -6.759446331703672e-06, -6.743792209262579e-06, -6.752775975998187e-06, -6.752775975998187e-06, -3.679015732001444e-03, -3.678126802790239e-03, -3.624702268092344e-03, -3.532256562136329e-03, -3.568011858849430e-03, -3.568011858849430e-03, -2.742506668698186e-01, -2.749518989128032e-01, -2.119133699341574e-03, -3.570971117121439e-01, -3.448576089925063e-01, -3.448576089925062e-01, -7.297679817819733e+03, -6.399439196725414e+03, -3.492243211460877e+01, -3.444000469682885e+04, -1.908649471447184e+04, -1.908649471447185e+04, -1.556606756395702e-06, -1.557748378266979e-06, -1.556644109538183e-06, -1.557652059160539e-06, -1.557192954959958e-06, -1.557192954959958e-06, -4.970421771964149e-05, -4.873314269689456e-05, -4.974884937872102e-05, -4.888717749255822e-05, -4.914664445284704e-05, -4.914664445284704e-05, -7.604303064193713e-03, -7.079346412352591e-03, -9.887197273001995e-03, -1.087439493881204e-02, -7.360947908822068e-03, -7.360947908822068e-03, -4.940691488311700e-01, -1.548632508383963e-01, -7.071860803090140e-01, -9.346621788029168e-05, -5.731448026683642e-01, -5.731448026683642e-01, -7.855464207704159e+04, -3.847843591107436e+04, -1.394358324480566e+05, -5.300019906758153e+00, -6.583056984534817e+04, -6.583056984534813e+04, -1.059180185875422e-02, -9.870296210158662e-03, -1.008581933615283e-02, -1.029153636391696e-02, -1.018514661091321e-02, -1.018514661091321e-02, -1.222569005551601e-02, -1.215256671167483e-02, -1.177768436758409e-02, -1.161749653616862e-02, -1.169011133321274e-02, -1.169011133321274e-02, -5.817673764725374e-03, -9.872249658521376e-02, -7.231164497977786e-02, -4.299643298555089e-02, -5.738821217905840e-02, -5.738821217905844e-02, -1.649090256985677e-02, -3.943989093923455e+01, -1.186426531346186e+01, -5.669905932587326e-02, -2.222228924570592e+00, -2.222228924570593e+00, -2.557805625311820e+03, -2.703132932221740e+06, -2.592659876736484e+05, -2.816897007727858e+00, -8.788122841339887e+04, -8.788122841339916e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
