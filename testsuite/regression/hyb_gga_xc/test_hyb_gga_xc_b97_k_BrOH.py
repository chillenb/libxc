
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.189909108982980e+01, -1.189908274122271e+01, -1.189912012775267e+01, -1.189925534878764e+01, -1.189908606321545e+01, -1.189908606321545e+01, -2.067553013710782e+00, -2.067515135282265e+00, -2.066557754873900e+00, -2.068636779386155e+00, -2.067542150643890e+00, -2.067542150643890e+00, -4.444886373177691e-01, -4.446229347968649e-01, -4.492440698603106e-01, -4.518257980994907e-01, -4.445348051642443e-01, -4.445348051642443e-01, -1.367971185831082e-01, -1.378590229327737e-01, -5.111161441537239e-01, -1.040756423628490e-01, -1.371090853452807e-01, -1.371090853452807e-01, -8.209817110224464e-03, -8.580457420991000e-03, -3.251620480220774e-02, -4.049624181278512e-03, -8.495641446031028e-03, -8.495641446031028e-03, -2.866816447176927e+00, -2.865438781212389e+00, -2.866681465842779e+00, -2.865610147439737e+00, -2.866101417648437e+00, -2.866101417648437e+00, -1.337534013736601e+00, -1.342068152561507e+00, -1.340468648270904e+00, -1.344037668104566e+00, -1.336647182248748e+00, -1.336647182248748e+00, -3.660438302356534e-01, -3.819141116767066e-01, -3.497525413118656e-01, -3.536896989237497e-01, -3.766546146509809e-01, -3.766546146509809e-01, -7.524325422426009e-02, -1.434855019645645e-01, -7.451944554955076e-02, -1.052352875243215e+00, -8.828984179873806e-02, -8.828984179873806e-02, -3.910644555622856e-03, -4.451580369732869e-03, -3.363650648324083e-03, -4.572923908030694e-02, -4.067643997686249e-03, -4.067643997686251e-03, -3.551580517739940e-01, -3.625138279184833e-01, -3.613570476099977e-01, -3.596285721507824e-01, -3.606160492937187e-01, -3.606160492937187e-01, -3.414471576898579e-01, -3.315156958455079e-01, -3.356474953185369e-01, -3.408404242073202e-01, -3.378461332162963e-01, -3.378461332162963e-01, -3.988727630282171e-01, -1.764638357151151e-01, -2.017563748531635e-01, -2.382142840430844e-01, -2.191601322723423e-01, -2.191601322723422e-01, -3.021033641016139e-01, -3.005432752994018e-02, -4.073811327912188e-02, -2.209029544075831e-01, -6.088821919546099e-02, -6.088821919546096e-02, -9.544002533925709e-03, -1.248153956767620e-03, -2.351802587190564e-03, -5.822866191873490e-02, -3.472302586494848e-03, -3.472302586494851e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.201521497733571e+01, -1.201526816551105e+01, -1.201549089819457e+01, -1.201462026188462e+01, -1.201524314856156e+01, -1.201524314856156e+01, -2.058623302387401e+00, -2.058650999127418e+00, -2.059493513421161e+00, -2.058450282084368e+00, -2.058645694874100e+00, -2.058645694874100e+00, -4.564357403401878e-01, -4.558698116179095e-01, -4.466068416859457e-01, -4.493319994899131e-01, -4.562285463629155e-01, -4.562285463629155e-01, -1.519257039836549e-01, -1.525817829711684e-01, -5.432727424295576e-01, -1.356360724579281e-01, -1.520879857398608e-01, -1.520879857398608e-01, -1.084724235654103e-02, -1.133807514908363e-02, -4.568232560016664e-02, -5.362085344402993e-03, -1.122660490602143e-02, -1.122660490602143e-02, -3.153710488198985e+00, -3.155978664374431e+00, -3.153939987995101e+00, -3.155703638799410e+00, -3.154876527803309e+00, -3.154876527803309e+00, -1.216662394445435e+00, -1.220939309153097e+00, -1.219030544516978e+00, -1.222094117958102e+00, -1.217405284188793e+00, -1.217405284188793e+00, -4.308049807241497e-01, -4.791416445132387e-01, -4.100432676561781e-01, -4.468740458948533e-01, -4.497194483515345e-01, -4.497194483515345e-01, -1.104588824865727e-01, -1.740149859913206e-01, -1.085305075518141e-01, -1.288623087648503e+00, -1.223682452383421e-01, -1.223682452383421e-01, -5.179069312918592e-03, -5.891502334670093e-03, -4.458888610056172e-03, -6.684637805866747e-02, -5.386428207457676e-03, -5.386428207457695e-03, -4.338769303200011e-01, -4.538579092528813e-01, -4.482545581223082e-01, -4.423035160736193e-01, -4.454319036067616e-01, -4.454319036067616e-01, -4.185989573876369e-01, -3.640415430024248e-01, -3.921932147064262e-01, -4.224612372232987e-01, -4.072307147289773e-01, -4.072307147289774e-01, -5.004927998805014e-01, -1.978755583439291e-01, -2.157344222292887e-01, -2.659555903168933e-01, -2.354026418980881e-01, -2.354026418980879e-01, -3.321391363616992e-01, -4.168535805085471e-02, -5.875113677287014e-02, -2.623952887042447e-01, -8.926374444840215e-02, -8.926374444840202e-02, -1.260765841306848e-02, -1.660637405986088e-03, -3.122255096144401e-03, -8.491227469719712e-02, -4.601973000348386e-03, -4.601973000348389e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.672601070911701e-09, -9.672569481990313e-09, -9.672271247757351e-09, -9.672791623385163e-09, -9.672585727007226e-09, -9.672585727007226e-09, -1.093697876344248e-05, -1.093737827094601e-05, -1.094659697807794e-05, -1.092174911227411e-05, -1.093700449020501e-05, -1.093700449020501e-05, -4.500035887049308e-03, -4.498596725053770e-03, -4.277005897680574e-03, -4.196069039373679e-03, -4.499643374484386e-03, -4.499643374484386e-03, -2.412158120237267e-01, -2.464760843745491e-01, -2.542028573051327e-03, -4.988269391633293e-02, -2.431788816514972e-01, -2.431788816514972e-01, 1.772204364267798e+00, 1.828581713627936e+00, 1.287118747738407e+00, 7.306507767020726e-01, 1.885250826450964e+00, 1.885250826450964e+00, -2.608141632209173e-06, -2.609085662819487e-06, -2.608226117422855e-06, -2.608960351098127e-06, -2.608643088041835e-06, -2.608643088041835e-06, -6.507726993044487e-05, -6.445213003829532e-05, -6.415473135430052e-05, -6.370306932773947e-05, -6.577754750916544e-05, -6.577754750916544e-05, -7.152085630260553e-03, -5.899933646991528e-03, -8.624508750726796e-03, -4.699041680540519e-03, -6.014390201826891e-03, -6.014390201826891e-03, 3.486561432712387e-01, -7.573929891329835e-02, 3.552554260981138e-01, -1.315470441315115e-04, 1.182016284318824e-01, 1.182016284318824e-01, 7.507349924468195e-01, 8.433212062016884e-01, 1.850269597508990e+00, 1.067975262718338e+00, 1.146415975733009e+00, 1.146415975743983e+00, -4.279626937499670e-02, -8.673957255416861e-03, -1.411655287672535e-02, -2.206810925913742e-02, -1.753258708354803e-02, -1.753258708354803e-02, -6.884237636043394e-02, -1.264516161479992e-02, -1.020393908057741e-02, -6.559082082657891e-03, -8.536501301434730e-03, -8.536501301434738e-03, -4.570579529540496e-03, -7.601293010995290e-02, -6.921007632838092e-02, -4.188248661475166e-02, -5.825147675329650e-02, -5.825147675329652e-02, -1.788260453255719e-02, 1.128966979609046e+00, 1.048568356309066e+00, -4.477418378711907e-02, 6.675135084167201e-01, 6.675135084167323e-01, 1.478619028534134e+00, 2.879039213260148e-01, 6.603095146184744e-01, 7.711053715300901e-01, 1.442253901699742e+00, 1.442253901701356e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
