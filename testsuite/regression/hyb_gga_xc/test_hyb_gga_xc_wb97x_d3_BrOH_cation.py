
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_d3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.683048278660705e+01, -1.683050506206522e+01, -1.683065831680291e+01, -1.683032579163961e+01, -1.683049231764133e+01, -1.683049231764133e+01, -2.743576859261756e+00, -2.743548181572288e+00, -2.742954343646958e+00, -2.744520863776483e+00, -2.743610428899919e+00, -2.743610428899919e+00, -4.852716055639930e-01, -4.851106162458392e-01, -4.818949437162188e-01, -4.860115720256958e-01, -4.852853484776425e-01, -4.852853484776425e-01, -8.100404277207000e-02, -8.266076772661042e-02, -5.745063599014065e-01, -5.712231976003190e-02, -7.058772343757769e-02, -7.058772343757780e-02, 4.436205686176344e-03, 4.628758004593899e-03, 1.029599344109237e-02, 2.708770894456479e-03, 1.441641030953750e-03, 1.441641030953748e-03, -4.015204524526915e+00, -4.014879402459780e+00, -4.015197391249290e+00, -4.014910203374023e+00, -4.015035062502397e+00, -4.015035062502397e+00, -1.631041107440311e+00, -1.639372164564580e+00, -1.631423975737053e+00, -1.638761041716542e+00, -1.635498031893376e+00, -1.635498031893376e+00, -3.981033368297911e-01, -4.328749651296250e-01, -3.652991349007840e-01, -3.757277806243326e-01, -4.043750002264723e-01, -4.043750002264723e-01, -3.418562490420479e-02, -9.180021580402326e-02, -2.780909991881500e-02, -1.423609254504749e+00, -4.067155457943432e-02, -4.067155457943432e-02, 2.113771050695966e-03, 2.651935053024546e-03, 2.038828724316038e-03, -2.264138825941147e-03, 1.886640316435986e-03, 1.886640316435961e-03, -3.925123971476790e-01, -3.932228607442974e-01, -3.940333024151517e-01, -3.939469717224502e-01, -3.941031628294430e-01, -3.941031628294430e-01, -3.789658207948204e-01, -3.344939843578218e-01, -3.444703868648260e-01, -3.557538200247530e-01, -3.493766402208696e-01, -3.493766402208696e-01, -4.567203583354598e-01, -1.244343939031783e-01, -1.561751403439593e-01, -2.167951188775254e-01, -1.848556779755242e-01, -1.848556779755242e-01, -3.024839156683898e-01, 1.088400847475226e-02, 5.543675424596423e-03, -2.022122667167743e-01, -1.437370686899930e-02, -1.437370686899925e-02, 6.012123359705658e-03, 7.429034749565981e-04, 1.514678178082540e-03, -1.092805545770649e-02, 1.844501312105133e-03, 1.844501312105119e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_d3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.022753975456364e+01, -2.022751690781590e+01, -2.022763771775649e+01, -2.022758805239103e+01, -2.022792041214128e+01, -2.022800144833214e+01, -2.022681492971345e+01, -2.022659212587439e+01, -2.022760150621723e+01, -2.022713115950949e+01, -2.022760150621723e+01, -2.022713115950949e+01, -3.226385980434271e+00, -3.226617125012281e+00, -3.226424251018435e+00, -3.226667002945294e+00, -3.227484465044988e+00, -3.227808891252379e+00, -3.226184195188888e+00, -3.226523561249803e+00, -3.225784841444546e+00, -3.227480783309623e+00, -3.225784841444546e+00, -3.227480783309623e+00, -5.731400951258417e-01, -5.753686118726498e-01, -5.722380647867868e-01, -5.748893652080894e-01, -5.588915163778859e-01, -5.570162640263429e-01, -5.625598455691254e-01, -5.631661963619481e-01, -5.746737366626641e-01, -5.505335263687292e-01, -5.746737366626641e-01, -5.505335263687292e-01, -1.066709281891372e-01, -1.044595169205852e-01, -1.135939240703826e-01, -1.106557578631797e-01, -6.679435894841225e-01, -6.902343865573560e-01, -2.763566747720015e-02, -2.574846973995450e-02, -5.138926479609723e-02, -1.229821082811653e-01, -5.138926479609728e-02, -1.229821082811677e-01, 6.704664453699299e-03, 4.881492300442206e-03, 7.131312837584140e-03, 4.974880657768338e-03, 8.343566856904162e-03, 2.458209188911550e-03, 3.393867777121277e-03, 3.707319904059837e-03, 7.083304606722469e-05, 1.180523723286685e-02, 7.083304606739543e-05, 1.180523723286653e-02, -5.014211644334301e+00, -5.012990249526682e+00, -5.017067676777753e+00, -5.015746028327190e+00, -5.014367835291373e+00, -5.013081434663340e+00, -5.016815867350794e+00, -5.015587757489743e+00, -5.015678255637363e+00, -5.014374116050526e+00, -5.015678255637363e+00, -5.014374116050526e+00, -1.730043781099140e+00, -1.729969201725337e+00, -1.745283186418766e+00, -1.744857265578427e+00, -1.712541147103776e+00, -1.716860486677663e+00, -1.726166633903529e+00, -1.730490778871004e+00, -1.750188645026699e+00, -1.740500759131309e+00, -1.750188645026699e+00, -1.740500759131309e+00, -5.112841784967769e-01, -5.104316876154456e-01, -5.998567225454435e-01, -5.995952533640779e-01, -4.552589296268217e-01, -4.718877449258072e-01, -5.214739882104081e-01, -5.349140522665152e-01, -5.369813128247539e-01, -5.133755515076296e-01, -5.369813128247527e-01, -5.133755515076285e-01, -1.935557078999965e-02, -1.659924422865576e-02, -5.217236231175431e-02, -5.190387174381328e-02, -2.293658162579207e-02, -1.638779511456909e-02, -1.881001863133144e+00, -1.880216651142794e+00, -2.530619714501985e-02, -6.781561856035272e-03, -2.530619714501985e-02, -6.781561856035272e-03, 3.081256949575905e-03, 2.510538326218089e-03, 3.613665183422243e-03, 3.338516147007287e-03, 3.122182383125524e-03, 2.299913030676959e-03, -1.260472831989727e-02, -1.371771578286401e-02, 6.243898671636832e-03, 1.027537607753022e-03, 6.243898671637125e-03, 1.027537607753255e-03, -5.302382035897495e-01, -5.321933194569219e-01, -5.461270430851457e-01, -5.474696003161403e-01, -5.401317848732754e-01, -5.412179301234471e-01, -5.333139038658586e-01, -5.345839321563893e-01, -5.367320540510639e-01, -5.378697586482075e-01, -5.367320540510639e-01, -5.378697586482075e-01, -5.275579790942481e-01, -5.291752768633998e-01, -4.078137185855837e-01, -4.089521297492345e-01, -4.340931511658772e-01, -4.362334271838779e-01, -4.818625969172193e-01, -4.837114810024267e-01, -4.547751691732841e-01, -4.565021513149674e-01, -4.547751691732841e-01, -4.565021513149674e-01, -6.322554141408754e-01, -6.327491318447630e-01, -1.207993723519131e-01, -1.210582372863133e-01, -1.953888441080374e-01, -1.954006505372841e-01, -2.749113597028646e-01, -2.754319405040175e-01, -2.403979032074439e-01, -2.401865983848928e-01, -2.403979032074460e-01, -2.401865983848963e-01, -3.713498903411886e-01, -3.728630718083916e-01, 6.924619472869099e-03, 6.181709698846930e-03, -2.660665591607978e-03, -5.799670548041799e-03, -2.598259346493580e-01, -2.624725350583249e-01, -2.270513621591309e-02, -1.119375581583021e-02, -2.270513621591350e-02, -1.119375581583019e-02, 8.345272803972058e-03, 6.914108212349754e-03, 9.921258405079850e-04, 9.796558850776553e-04, 2.365987260987356e-03, 1.694865865654078e-03, -1.675932297012293e-02, -1.648861020179233e-02, 5.504178981525984e-03, 1.112761890590701e-03, 5.504178981525850e-03, 1.112761890590895e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_d3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.126101368131806e-08, 0.000000000000000e+00, -1.126107304309628e-08, -1.126089519933166e-08, 0.000000000000000e+00, -1.126098837107571e-08, -1.126045760090615e-08, 0.000000000000000e+00, -1.126037083450862e-08, -1.126177867204956e-08, 0.000000000000000e+00, -1.126207526611441e-08, -1.126092732083971e-08, 0.000000000000000e+00, -1.126136294262823e-08, -1.126092732083971e-08, 0.000000000000000e+00, -1.126136294262823e-08, -1.452427781877609e-05, 0.000000000000000e+00, -1.452545191172033e-05, -1.452435935841816e-05, 0.000000000000000e+00, -1.452566573434780e-05, -1.452735519942442e-05, 0.000000000000000e+00, -1.452654770047370e-05, -1.451279535228307e-05, 0.000000000000000e+00, -1.451249846107821e-05, -1.453370005472996e-05, 0.000000000000000e+00, -1.451363068328380e-05, -1.453370005472996e-05, 0.000000000000000e+00, -1.451363068328380e-05, -7.108517379415110e-03, 0.000000000000000e+00, -7.111853864478352e-03, -7.095246408742351e-03, 0.000000000000000e+00, -7.103229087709529e-03, -6.816213616744663e-03, 0.000000000000000e+00, -6.749408059928242e-03, -6.617214031376166e-03, 0.000000000000000e+00, -6.640468527940281e-03, -6.814872627401007e-03, 0.000000000000000e+00, -6.475046210380692e-03, -6.814872627401007e-03, 0.000000000000000e+00, -6.475046210380692e-03, -3.411573942535011e-01, 0.000000000000000e+00, -3.911625790847943e-01, -2.563049971827346e-01, 0.000000000000000e+00, -3.281484308336647e-01, -4.355782916109108e-03, 0.000000000000000e+00, -4.049435623956336e-03, -2.066234044508215e+00, 0.000000000000000e+00, -2.083096554404588e+00, -1.025674616303743e+00, 0.000000000000000e+00, 5.835971015317846e+00, -1.025674616303764e+00, 0.000000000000000e+00, 5.835971015317966e+00, 1.948168008042309e+01, 0.000000000000000e+00, 1.177257064201589e+01, 2.109568071642488e+01, 0.000000000000000e+00, 1.190419498896193e+01, 4.559220608230208e+00, 0.000000000000000e+00, 1.453928223573449e+00, 1.369199471823463e+01, 0.000000000000000e+00, 1.572849894447770e+01, 1.681110153104802e+00, 0.000000000000000e+00, 1.951638072891216e+02, 1.681110153243201e+00, 0.000000000000000e+00, 1.951638072915030e+02, -2.887815350150842e-06, 0.000000000000000e+00, -2.890741120206610e-06, -2.881537802791884e-06, 0.000000000000000e+00, -2.884711012920342e-06, -2.887464273078413e-06, 0.000000000000000e+00, -2.890551696947222e-06, -2.882107144374914e-06, 0.000000000000000e+00, -2.885044980352890e-06, -2.884594876322723e-06, 0.000000000000000e+00, -2.887726187481477e-06, -2.884594876322723e-06, 0.000000000000000e+00, -2.887726187481477e-06, -1.097946492436155e-04, 0.000000000000000e+00, -1.098120397391533e-04, -1.074016308420036e-04, 0.000000000000000e+00, -1.074879615141947e-04, -1.107861122398683e-04, 0.000000000000000e+00, -1.105275600108767e-04, -1.085988623516232e-04, 0.000000000000000e+00, -1.083314777095300e-04, -1.078882669311785e-04, 0.000000000000000e+00, -1.084962624624577e-04, -1.078882669311785e-04, 0.000000000000000e+00, -1.084962624624577e-04, -1.200025164741497e-02, 0.000000000000000e+00, -1.207260394400224e-02, 1.503140265142260e-03, 0.000000000000000e+00, 1.204721633304503e-03, -1.822493203812820e-02, 0.000000000000000e+00, -1.533364564626622e-02, 6.490603845783687e-03, 0.000000000000000e+00, 5.055149424104699e-03, -9.362408518920153e-03, 0.000000000000000e+00, -1.177903788139931e-02, -9.362408518919639e-03, 0.000000000000000e+00, -1.177903788139931e-02, -3.724878111695582e+00, 0.000000000000000e+00, -3.941965969384671e+00, -9.187470166088118e-01, 0.000000000000000e+00, -9.133916335287433e-01, -3.286860860551072e+00, 0.000000000000000e+00, -4.335117048339258e+00, -1.008360589421192e-04, 0.000000000000000e+00, -1.011470237491116e-04, -2.963477817661428e+00, 0.000000000000000e+00, -3.741515184216774e+00, -2.963477817661428e+00, 0.000000000000000e+00, -3.741515184216774e+00, 2.317153413645149e+01, 0.000000000000000e+00, 1.696153879427353e+01, 1.840771297920628e+01, 0.000000000000000e+00, 1.630547139452644e+01, 1.386117079039868e+02, 0.000000000000000e+00, 8.637796563785305e+01, -1.699484209895774e+00, 0.000000000000000e+00, -1.797670097460192e+00, 1.602400032141899e+02, 0.000000000000000e+00, 1.147791603781222e+01, 1.602400032121413e+02, 0.000000000000000e+00, 1.147791603725454e+01, -3.505245424773584e-02, 0.000000000000000e+00, -3.433208062976994e-02, 2.537063226549636e-03, 0.000000000000000e+00, 2.104018710385103e-03, -5.913863502351463e-03, 0.000000000000000e+00, -6.766071968438900e-03, -1.946624550350810e-02, 0.000000000000000e+00, -2.014472983653681e-02, -1.196345876178031e-02, 0.000000000000000e+00, -1.280360882097481e-02, -1.196345876178031e-02, 0.000000000000000e+00, -1.280360882097481e-02, 2.258336701847280e-02, 0.000000000000000e+00, 2.365578503742397e-02, -2.188297290849514e-02, 0.000000000000000e+00, -2.171057856633303e-02, -2.062579336806180e-02, 0.000000000000000e+00, -2.016276305058474e-02, -9.035460072604405e-03, 0.000000000000000e+00, -8.647007100979612e-03, -1.691377473557318e-02, 0.000000000000000e+00, -1.653931701189820e-02, -1.691377473557318e-02, 0.000000000000000e+00, -1.653931701189820e-02, 1.392612311195906e-03, 0.000000000000000e+00, 1.251683375503815e-03, -3.138201611454947e-01, 0.000000000000000e+00, -3.109287571792937e-01, -1.038542646793902e-01, 0.000000000000000e+00, -1.047386410018594e-01, -6.328981095043731e-02, 0.000000000000000e+00, -6.322450308127818e-02, -6.432205728573351e-02, 0.000000000000000e+00, -6.450542929474462e-02, -6.432205728573169e-02, 0.000000000000000e+00, -6.450542929474470e-02, -2.878023810625219e-02, 0.000000000000000e+00, -2.850271074588750e-02, 3.118128415159356e+00, 0.000000000000000e+00, 2.758554946826854e+00, 1.286860568478902e+00, 0.000000000000000e+00, -3.699571809611638e-01, -8.875118122485236e-02, 0.000000000000000e+00, -8.544553699361536e-02, -2.321146129659847e+00, 0.000000000000000e+00, -5.412440361197947e+00, -2.321146129659890e+00, 0.000000000000000e+00, -5.412440361197944e+00, 1.344002690171245e+01, 0.000000000000000e+00, 9.940922067106481e+00, 9.153317782698582e+01, 0.000000000000000e+00, 8.858378402060386e+01, 5.448859791999300e+01, 0.000000000000000e+00, 3.283553531739425e+01, -3.246082155617320e+00, 0.000000000000000e+00, -3.863789976927509e+00, 2.258884710203114e+02, 0.000000000000000e+00, 2.217682332187777e+01, 2.258884710210965e+02, 0.000000000000000e+00, 2.217682332180320e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
