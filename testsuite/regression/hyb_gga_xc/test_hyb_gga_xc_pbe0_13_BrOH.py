
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe0_13_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.401454838329985e+01, -1.401456502615484e+01, -1.401468918302456e+01, -1.401441565810727e+01, -1.401455674298065e+01, -1.401455674298065e+01, -2.357013234011161e+00, -2.356997817962802e+00, -2.356670010624831e+00, -2.357726526288693e+00, -2.357015173122865e+00, -2.357015173122865e+00, -4.913965546733146e-01, -4.912194132494013e-01, -4.880607638073848e-01, -4.911818290353953e-01, -4.913302535857039e-01, -4.913302535857039e-01, -1.536539174796090e-01, -1.548993289177040e-01, -5.746365216684725e-01, -1.225985993351781e-01, -1.540165056591332e-01, -1.540165056591332e-01, -1.133819964891494e-02, -1.187327825896887e-02, -4.698587981337669e-02, -5.450411937804989e-03, -1.174960941697584e-02, -1.174960941697584e-02, -3.413886918074912e+00, -3.413692313478251e+00, -3.413870701166903e+00, -3.413719309414571e+00, -3.413781567109493e+00, -3.413781567109493e+00, -1.429927369951934e+00, -1.436698684802061e+00, -1.430374494054018e+00, -1.435635276145395e+00, -1.433978533794509e+00, -1.433978533794509e+00, -4.215956764482008e-01, -4.533216524790000e-01, -4.020346852444908e-01, -4.161194175173808e-01, -4.358217484739357e-01, -4.358217484739357e-01, -9.720628808553983e-02, -1.627935956882677e-01, -9.553976055098413e-02, -1.279428220257788e+00, -1.079400117991867e-01, -1.079400117991867e-01, -5.258048638807373e-03, -6.008221342938841e-03, -4.503330275909603e-03, -6.375108656957974e-02, -5.474391155347924e-03, -5.474391155347924e-03, -4.339169678130636e-01, -4.306758077910425e-01, -4.317569125757219e-01, -4.326510223653751e-01, -4.321968702981447e-01, -4.321968702981447e-01, -4.215332660753778e-01, -3.734507725832273e-01, -3.851793654272695e-01, -3.973915734876757e-01, -3.909515398488424e-01, -3.909515398488424e-01, -4.732416676922317e-01, -1.955561861607998e-01, -2.224542639168031e-01, -2.689361271696497e-01, -2.438078970950295e-01, -2.438078970950295e-01, -3.400119897702273e-01, -4.378785449856631e-02, -5.814642286600426e-02, -2.536318096381330e-01, -8.013141276864309e-02, -8.013141276864309e-02, -1.328188023711772e-02, -1.645860493524958e-03, -3.126090839569535e-03, -7.640684686955772e-02, -4.652875298685730e-03, -4.652875298685721e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe0_13_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.688853707716605e+01, -1.688859588774542e+01, -1.688886201854625e+01, -1.688789890708578e+01, -1.688856806039864e+01, -1.688856806039864e+01, -2.800232633309971e+00, -2.800263459097843e+00, -2.801222151360871e+00, -2.800142618683029e+00, -2.800259981731636e+00, -2.800259981731636e+00, -5.782011008415624e-01, -5.771411592355564e-01, -5.495883356793160e-01, -5.541583398279577e-01, -5.778168570025245e-01, -5.778168570025245e-01, -1.736422441449460e-01, -1.766323446667337e-01, -6.970043452272785e-01, -1.300747717867428e-01, -1.745434179848689e-01, -1.745434179848689e-01, -1.504171472852799e-02, -1.574381582097569e-02, -5.922039050451612e-02, -7.260088146353147e-03, -1.557999865552474e-02, -1.557999865552474e-02, -4.260783666027046e+00, -4.262747180493608e+00, -4.260983954061553e+00, -4.262510699684430e+00, -4.261791104228760e+00, -4.261791104228760e+00, -1.528512966594806e+00, -1.540655571077584e+00, -1.521844325429592e+00, -1.531248133287182e+00, -1.545653217301635e+00, -1.545653217301635e+00, -5.366015623617078e-01, -5.939082790505437e-01, -5.106684891842234e-01, -5.440062048219645e-01, -5.580735729792098e-01, -5.580735729792098e-01, -1.085442748429921e-01, -1.710423635505578e-01, -1.062292896611993e-01, -1.672371897639467e+00, -1.163087645423216e-01, -1.163087645423216e-01, -7.004139973499750e-03, -8.001121291999118e-03, -5.997431462259756e-03, -7.669982646446821e-02, -7.290142730701743e-03, -7.290142730701741e-03, -5.670833933503731e-01, -5.642269046133433e-01, -5.654825738647173e-01, -5.662866053171283e-01, -5.659039078939944e-01, -5.659039078939944e-01, -5.501875282457749e-01, -4.584207280783905e-01, -4.883789694467131e-01, -5.153349463395017e-01, -5.019387452523375e-01, -5.019387452523374e-01, -6.198651331092113e-01, -2.096508076259599e-01, -2.500508979840468e-01, -3.312950893360320e-01, -2.879798126228995e-01, -2.879798126228994e-01, -4.168490175090876e-01, -5.581897390070296e-02, -7.160261993878080e-02, -3.228031639709482e-01, -9.135957034133381e-02, -9.135957034133382e-02, -1.760349410767362e-02, -2.194214864386964e-03, -4.166432185601315e-03, -8.711756118382495e-02, -6.197121135369437e-03, -6.197121135369424e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe0_13_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.508489957275112e-09, -4.508458392796596e-09, -4.508268683917516e-09, -4.508786528011103e-09, -4.508473719967885e-09, -4.508473719967885e-09, -5.264894024059046e-06, -5.264861851788625e-06, -5.263133729549683e-06, -5.261833959026235e-06, -5.264791920789523e-06, -5.264791920789523e-06, -2.346576865861893e-03, -2.361168553738735e-03, -2.694084436701658e-03, -2.618548292280353e-03, -2.351884206157792e-03, -2.351884206157792e-03, -2.226527916236528e-01, -2.108204747639619e-01, -1.144000716616455e-03, -4.908941149514910e-01, -2.191053683731329e-01, -2.191053683731329e-01, -3.387174232240992e+00, -3.394076828826842e+00, -1.362497928992571e+00, -2.414629861078871e+00, -3.525770758395373e+00, -3.525770758395373e+00, -1.102742651388442e-06, -1.101064531823798e-06, -1.102571782547666e-06, -1.101267149104526e-06, -1.101885072726328e-06, -1.101885072726328e-06, -4.286278478509129e-05, -4.196275195223366e-05, -4.296507753485297e-05, -4.226646031744615e-05, -4.209522754076274e-05, -4.209522754076274e-05, -2.156591767535228e-03, 1.103682015937427e-03, -2.662919591057683e-03, 6.542025529537969e-04, -1.629896956108588e-03, -1.629896956108588e-03, -6.675021236250765e-01, -1.885937395676388e-01, -7.548841340520093e-01, -1.926421708958777e-05, -6.570507357483519e-01, -6.570507357483519e-01, -2.561726889948933e+00, -2.565612740491736e+00, -7.342134711681874e+00, -1.282420485505387e+00, -3.789058055016155e+00, -3.789058055015876e+00, 3.375453409591672e-03, 1.805353120554952e-03, 2.315149651819512e-03, 2.747781086801338e-03, 2.527003988735139e-03, 2.527003988735139e-03, 4.242097687278613e-03, -5.358717290033430e-03, -3.213270996808588e-03, -9.062168568518599e-04, -2.107561095189251e-03, -2.107561095189246e-03, 6.929974911987430e-04, -9.712069572177094e-02, -5.546322746393828e-02, -1.751319975184731e-02, -3.328555886999050e-02, -3.328555886999053e-02, -7.667871165558315e-03, -1.164001563861225e+00, -1.130838121996494e+00, -1.228627140960419e-02, -1.153591784689401e+00, -1.153591784689404e+00, -2.542450170432236e+00, -4.423401806467661e+00, -3.805861142267023e+00, -1.405502451405667e+00, -5.534806928213283e+00, -5.534806928214102e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
