
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.524333176468495e+01, -1.524335115189966e+01, -1.524348983381429e+01, -1.524317133470137e+01, -1.524334155256308e+01, -1.524334155256308e+01, -2.582280343850103e+00, -2.582262014154586e+00, -2.581863282165389e+00, -2.583087076351240e+00, -2.582281677407454e+00, -2.582281677407454e+00, -5.447695931664606e-01, -5.447661375810871e-01, -5.467725066967423e-01, -5.499684739875387e-01, -5.447654149938671e-01, -5.447654149938671e-01, -1.759770878621694e-01, -1.772323796158999e-01, -6.322480846367913e-01, -1.359350424016283e-01, -1.763503518530233e-01, -1.763503518530233e-01, -1.928429755972290e-02, -2.029483521395180e-02, -8.075550180133238e-02, -8.510743718077585e-03, -2.004982483179882e-02, -2.004982483179882e-02, -3.737157401256679e+00, -3.737054934819033e+00, -3.737150649377245e+00, -3.737070890768903e+00, -3.737099051672414e+00, -3.737099051672414e+00, -1.590963483830388e+00, -1.597690375739932e+00, -1.592487586808886e+00, -1.597721596527991e+00, -1.593549710068471e+00, -1.593549710068471e+00, -4.596783236661511e-01, -4.902638038572861e-01, -4.383208636835467e-01, -4.514251152264779e-01, -4.749257667044193e-01, -4.749257667044193e-01, -1.172627400633765e-01, -1.836309165659805e-01, -1.133040132509243e-01, -1.399632283291707e+00, -1.205724123254250e-01, -1.205724123254250e-01, -8.174406768155481e-03, -9.489866005007064e-03, -6.859235789678488e-03, -9.404322600518469e-02, -8.540844141318862e-03, -8.540844141318856e-03, -4.611797531727186e-01, -4.645466200407341e-01, -4.637848303124862e-01, -4.627760323265794e-01, -4.633241792448838e-01, -4.633241792448838e-01, -4.466752152038599e-01, -4.104546400647274e-01, -4.199467272553332e-01, -4.318336970062477e-01, -4.253397869462945e-01, -4.253397869462945e-01, -5.127159152259422e-01, -2.236191231081645e-01, -2.535173587458233e-01, -2.960100418209533e-01, -2.732968432393573e-01, -2.732968432393573e-01, -3.740500678601820e-01, -7.840271212314072e-02, -9.355950134488573e-02, -2.755418376861556e-01, -9.965840819445262e-02, -9.965840819445260e-02, -2.307759623038887e-02, -2.284957511770326e-03, -4.590512484471884e-03, -9.403569256011733e-02, -7.118494708276853e-03, -7.118494708276797e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.849824399519676e+01, -1.849832196936970e+01, -1.849865413573451e+01, -1.849737757794485e+01, -1.849828524732537e+01, -1.849828524732537e+01, -3.040975709537904e+00, -3.041029642365036e+00, -3.042632542686287e+00, -3.040492334894458e+00, -3.041015949219463e+00, -3.041015949219463e+00, -5.971791959479859e-01, -5.958090580178039e-01, -5.666543047831776e-01, -5.711624440768828e-01, -5.966814050634891e-01, -5.966814050634891e-01, -1.940605912845047e-01, -1.929550983522702e-01, -7.364147202369831e-01, -1.486518633752049e-01, -1.936702505939470e-01, -1.936702505939470e-01, -2.525022412658015e-02, -2.643620584778168e-02, -5.445889847673405e-02, -1.157938406715875e-02, -2.611663634621609e-02, -2.611663634621609e-02, -4.698553780868755e+00, -4.700925511444839e+00, -4.698795858401355e+00, -4.700640134954648e+00, -4.699772843776673e+00, -4.699772843776673e+00, -1.612718705568409e+00, -1.624435410776357e+00, -1.607676485324391e+00, -1.616484143891619e+00, -1.628348973569262e+00, -1.628348973569262e+00, -5.758578214630338e-01, -6.280055656448545e-01, -5.458586680339826e-01, -5.837527331736230e-01, -6.021769947027580e-01, -6.021769947027580e-01, -4.438895664976339e-02, -2.154932118136444e-01, -4.890844854265350e-02, -1.806984426556144e+00, -9.788408559402303e-02, -9.788408559402303e-02, -1.112234696997825e-02, -1.288895425699919e-02, -9.290469434061258e-03, -2.999793137691612e-02, -1.158546324656315e-02, -1.158546324656316e-02, -5.959162824024352e-01, -5.933634093431404e-01, -5.909470662661134e-01, -5.907903837129106e-01, -5.905715738962279e-01, -5.905715738962279e-01, -5.823299641520937e-01, -4.743026111703814e-01, -5.199642752159083e-01, -5.578074328305854e-01, -5.403848483812582e-01, -5.403848483812580e-01, -6.581248179515226e-01, -2.507489970092736e-01, -2.646921030364656e-01, -3.335026308547253e-01, -2.870199249134556e-01, -2.870199249134560e-01, -4.275788782260552e-01, -6.260162403737390e-02, -4.336440984637807e-02, -3.331805035475825e-01, -3.059222771771642e-02, -3.059222771771670e-02, -2.994366629986483e-02, -3.100786975671435e-03, -6.248465480457962e-03, -3.060288362150960e-02, -9.655222167517860e-03, -9.655222167517557e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.539622493359794e-09, -4.539552094523463e-09, -4.539244571205760e-09, -4.540397237409459e-09, -4.539585312769885e-09, -4.539585312769885e-09, -6.135785296545187e-06, -6.135460328606797e-06, -6.125514909739595e-06, -6.137555828927676e-06, -6.135516648717528e-06, -6.135516648717528e-06, -4.115627332899682e-03, -4.136118435919520e-03, -4.404822659084436e-03, -4.295351992435989e-03, -4.123155985293030e-03, -4.123155985293030e-03, -2.931683065687910e-01, -3.138402699050476e-01, -1.869172104530144e-03, -4.979428325696558e-01, -2.999993271339091e-01, -2.999993271339091e-01, -6.756358215447270e+01, -6.786430566195415e+01, -2.335481277622429e+01, -4.573197492468635e+01, -7.041439544869536e+01, -7.041439544869536e+01, -1.050726590055550e-06, -1.047608079066467e-06, -1.050410193244853e-06, -1.047985177164109e-06, -1.049120771334933e-06, -1.049120771334933e-06, -5.735759504467614e-05, -5.632630817305157e-05, -5.717517861872433e-05, -5.640574528717391e-05, -5.677752276019400e-05, -5.677752276019400e-05, -4.008483588464638e-03, -5.131803909729646e-03, -5.215125573856269e-03, -2.627940279320158e-03, -2.907923609224398e-03, -2.907923609224398e-03, -3.729705175223660e+00, -1.179003528069735e-01, -3.835691048943793e+00, -5.727146067596272e-05, -1.575436104867764e+00, -1.575436104867764e+00, -4.837236688814305e+01, -4.896077462488618e+01, -1.366073730064697e+02, -1.571277295220526e+01, -7.168260082777576e+01, -7.168260082772518e+01, -1.338848211279936e-02, -8.162562880437771e-03, -1.180933630541961e-02, -1.456646456982157e-02, -1.328830671999434e-02, -1.328830671999430e-02, -7.253192509736423e-03, -1.127124493653032e-02, -6.600534608384495e-03, -2.312797454537701e-03, -4.245268312235280e-03, -4.245268312235299e-03, -3.580214787141517e-03, -8.824064716000946e-02, -8.949646687860228e-02, -4.748600565217968e-02, -7.564943204920740e-02, -7.564943204920703e-02, -1.719705497359971e-02, -2.145098674027261e+01, -1.674781440666966e+01, -4.494022926729643e-02, -8.044969925018457e+00, -8.044969925018561e+00, -5.138406409023653e+01, -7.735896841676272e+01, -6.913521356331582e+01, -9.539761213412886e+00, -1.033162940737276e+02, -1.033162940735730e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
