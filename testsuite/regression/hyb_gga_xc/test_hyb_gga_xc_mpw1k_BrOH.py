
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.212071771625858e+01, -1.212073164373237e+01, -1.212083752158366e+01, -1.212060858199589e+01, -1.212072469547649e+01, -1.212072469547649e+01, -2.048927743975109e+00, -2.048914408659027e+00, -2.048630782244511e+00, -2.049544926434143e+00, -2.048929426507116e+00, -2.048929426507116e+00, -4.306641944958299e-01, -4.304826975459696e-01, -4.268881345329020e-01, -4.296469365641006e-01, -4.305966893654541e-01, -4.305966893654541e-01, -1.348460371641727e-01, -1.359793659696798e-01, -5.036781851828371e-01, -1.094889551254993e-01, -1.351753910172576e-01, -1.351753910172576e-01, -2.820807643832181e-03, -3.192919044755689e-03, -4.559835008155488e-02, -3.258612356644426e-04, -3.154722975704210e-03, -3.154722975704210e-03, -2.960832221320035e+00, -2.960612136476257e+00, -2.960813045448610e+00, -2.960641854889862e+00, -2.960714462325196e+00, -2.960714462325196e+00, -1.242820653286897e+00, -1.248819205746736e+00, -1.243009674451639e+00, -1.247670654819056e+00, -1.246678239057367e+00, -1.246678239057367e+00, -3.708665405103301e-01, -3.983740107013320e-01, -3.538033460853544e-01, -3.661425472790703e-01, -3.832904098618220e-01, -3.832904098618220e-01, -9.161793014234257e-02, -1.434185946087083e-01, -8.964174249411792e-02, -1.112877545153923e+00, -9.830935602039073e-02, -9.830935602039073e-02, -3.028185940965059e-04, -4.383844897767965e-04, -3.141555203758728e-04, -6.347299232358990e-02, -4.025962944286065e-04, -4.025962944286067e-04, -3.813092379829700e-01, -3.787117336415025e-01, -3.796133796158233e-01, -3.803411765639324e-01, -3.799746147260246e-01, -3.799746147260246e-01, -3.704984923115390e-01, -3.284283341248362e-01, -3.390881099513879e-01, -3.498846071313799e-01, -3.442292990823784e-01, -3.442292990823784e-01, -4.156671839130123e-01, -1.713140569074779e-01, -1.949893961012664e-01, -2.370181082461475e-01, -2.143244390160607e-01, -2.143244390160607e-01, -2.991802631603800e-01, -4.073181354762593e-02, -5.806079249386279e-02, -2.241231542853974e-01, -7.671958562394167e-02, -7.671958562394167e-02, -3.814421338067565e-03, -1.560919893967425e-05, -8.558083983846120e-05, -7.309176218371173e-02, -3.034884065645425e-04, -3.034884065645405e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.455671759666110e+01, -1.455676515404200e+01, -1.455698499453878e+01, -1.455620608036738e+01, -1.455674261263266e+01, -1.455674261263266e+01, -2.432686354860040e+00, -2.432708323714174e+00, -2.433408511804916e+00, -2.432697028252077e+00, -2.432707594404748e+00, -2.432707594404748e+00, -5.123890297487563e-01, -5.115276462648337e-01, -4.884571058440102e-01, -4.924575362758593e-01, -5.120767730340128e-01, -5.120767730340128e-01, -1.539059930450536e-01, -1.571750834507474e-01, -6.137350753933783e-01, -1.027204466216006e-01, -1.549065563295428e-01, -1.549065563295428e-01, -9.961037084112835e-03, -1.119295256129043e-02, -7.298032972679556e-02, -1.200392398558544e-03, -1.106079549345265e-02, -1.106079549345265e-02, -3.674990635213389e+00, -3.676519556525204e+00, -3.675146876853348e+00, -3.676335686707206e+00, -3.675774493107848e+00, -3.675774493107848e+00, -1.344660103146928e+00, -1.355281253061093e+00, -1.338738237008319e+00, -1.347010174231441e+00, -1.359610392191827e+00, -1.359610392191827e+00, -4.720698895673893e-01, -5.198995070652243e-01, -4.498255208322279e-01, -4.769486314120790e-01, -4.902141919340447e-01, -4.902141919340447e-01, -8.210823620773414e-02, -1.420784213055182e-01, -8.009333322423803e-02, -1.447027719287458e+00, -8.831463182201588e-02, -8.831463182201588e-02, -1.115594788036820e-03, -1.613622904982921e-03, -1.156635760641291e-03, -7.031865677151304e-02, -1.481823860394104e-03, -1.481823860394097e-03, -4.960360294285157e-01, -4.942460005016172e-01, -4.951954095385324e-01, -4.956687069724426e-01, -4.954635948656489e-01, -4.954635948656489e-01, -4.815550084772285e-01, -4.064352476341425e-01, -4.306970782693071e-01, -4.526564413619467e-01, -4.416791666328500e-01, -4.416791666328500e-01, -5.423079408357816e-01, -1.822490088423680e-01, -2.230656908450863e-01, -2.958015371309974e-01, -2.582152094463916e-01, -2.582152094463916e-01, -3.704012265445049e-01, -7.486675993439984e-02, -7.486450565104523e-02, -2.873784753806378e-01, -7.074896878973476e-02, -7.074896878973469e-02, -1.327808015674918e-02, -5.718016628150425e-05, -3.149093684043590e-04, -6.737939678588666e-02, -1.117685319149282e-03, -1.117685319149273e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.009757480285760e-09, -4.009738492948078e-09, -4.009597117665371e-09, -4.009909174324879e-09, -4.009747940715375e-09, -4.009747940715375e-09, -4.554897751741842e-06, -4.554944912385061e-06, -4.555517901177490e-06, -4.550841537683053e-06, -4.554848034138045e-06, -4.554848034138045e-06, -1.827263171067975e-03, -1.838194224256962e-03, -2.107570386839693e-03, -2.047928991547711e-03, -1.831234149311041e-03, -1.831234149311041e-03, -1.811325197780930e-01, -1.660189720637396e-01, -9.237250568158352e-04, -6.392010148496950e-01, -1.764510676680099e-01, -1.764510676680099e-01, 2.768152131953752e+02, 2.699713675607410e+02, 4.857553272398387e+00, 2.594768858731445e+02, 2.806194256559381e+02, 2.806194256559381e+02, -1.024781175561029e-06, -1.024231435950433e-06, -1.024722996144232e-06, -1.024295705447165e-06, -1.024504561960981e-06, -1.024504561960981e-06, -3.516631370149487e-05, -3.441708132121551e-05, -3.527795402105949e-05, -3.469124091609472e-05, -3.450925848541573e-05, -3.450925848541573e-05, -1.719040241996217e-03, 7.989766401752148e-04, -2.067496207791159e-03, 4.575005310204685e-04, -1.342741247133145e-03, -1.342741247133145e-03, -1.274444799222431e+00, -2.016957457722095e-01, -1.413140296459075e+00, -2.415161947291404e-05, -1.023021671162473e+00, -1.023021671162473e+00, 2.766614423959537e+02, 2.683277476382552e+02, 7.728876419357338e+02, -2.215104211710929e+00, 3.958902658232284e+02, 3.958902658232278e+02, 1.833307558506549e-03, 1.380370178645590e-03, 1.721281357491673e-03, 1.870960362808535e-03, 1.816572739646654e-03, 1.816572739646657e-03, 2.480434038905041e-03, -3.980475886552882e-03, -2.436864529110140e-03, -7.412541924824885e-04, -1.635158014834194e-03, -1.635158014834187e-03, 4.576657611083260e-04, -8.724609355184820e-02, -4.296434215108959e-02, -1.150869351762235e-02, -2.333805837530274e-02, -2.333805837530275e-02, -5.538502070765833e-03, 9.349289576790207e+00, -4.844868525149137e-01, -6.148953653193970e-03, -2.360061054239156e+00, -2.360061054239158e+00, 1.971510471108884e+02, 6.052469211922725e+02, 4.524982238094705e+02, -2.876799677267383e+00, 5.879607254876713e+02, 5.879607254876660e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
