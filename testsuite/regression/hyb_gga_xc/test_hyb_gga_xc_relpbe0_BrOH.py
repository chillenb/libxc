
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_relpbe0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.546671337953960e+01, -1.546674670328170e+01, -1.546692885805688e+01, -1.546638250270765e+01, -1.546673067340414e+01, -1.546673067340414e+01, -2.559777142550063e+00, -2.559777833227051e+00, -2.559901033952682e+00, -2.560224464116618e+00, -2.559788258679719e+00, -2.559788258679719e+00, -5.134562578261144e-01, -5.130140000453531e-01, -5.021862194260719e-01, -5.058480465085586e-01, -5.132945010982038e-01, -5.132945010982038e-01, -1.518460437023990e-01, -1.534381903350178e-01, -6.096933690959806e-01, -1.189405024678035e-01, -1.523164036503145e-01, -1.523164036503145e-01, -1.560472159027585e-02, -1.630613019542324e-02, -5.576965578758512e-02, -7.669849351393042e-03, -1.613946372249466e-02, -1.613946372249466e-02, -3.793238988839437e+00, -3.793750955852483e+00, -3.793293832828257e+00, -3.793691872017211e+00, -3.793497891713279e+00, -3.793497891713279e+00, -1.475599591673532e+00, -1.484872339913277e+00, -1.472838940613007e+00, -1.480057680883309e+00, -1.485502837496852e+00, -1.485502837496852e+00, -4.485336588032509e-01, -4.875888567521039e-01, -4.266223927164451e-01, -4.456762820166410e-01, -4.650907090283194e-01, -4.650907090283194e-01, -9.768407560232767e-02, -1.578383712278912e-01, -9.568303399014057e-02, -1.421263225986669e+00, -1.056708283707285e-01, -1.056708283707285e-01, -7.403408317881554e-03, -8.438012662659193e-03, -6.348639110932422e-03, -6.972436784687805e-02, -7.697323295462771e-03, -7.697323295462771e-03, -4.657415095989235e-01, -4.622540360420597e-01, -4.634678237085120e-01, -4.644318212451720e-01, -4.639464443031158e-01, -4.639464443031158e-01, -4.517928507144174e-01, -3.912343833232794e-01, -4.077791666307078e-01, -4.238504127146292e-01, -4.155729020020247e-01, -4.155729020020247e-01, -5.098705963004360e-01, -1.918220086536351e-01, -2.223765820757191e-01, -2.779330758426700e-01, -2.480545127973551e-01, -2.480545127973550e-01, -3.546516604522670e-01, -5.325672035855184e-02, -6.596017706765950e-02, -2.635451070959530e-01, -8.211453315843029e-02, -8.211453315843029e-02, -1.818370616994789e-02, -2.351292604146976e-03, -4.435175782515369e-03, -7.831923467911182e-02, -6.558510415315192e-03, -6.558510415315182e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_relpbe0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.018276692676127e+01, -2.018282166432461e+01, -2.018309320367698e+01, -2.018219630750600e+01, -2.018279556493654e+01, -2.018279556493654e+01, -3.327012169107173e+00, -3.327028783862332e+00, -3.327619766901071e+00, -3.327293795383964e+00, -3.327034633111739e+00, -3.327034633111739e+00, -6.635107673778731e-01, -6.625744197113020e-01, -6.371870419272067e-01, -6.424471550139721e-01, -6.631708216283781e-01, -6.631708216283781e-01, -1.859995585257048e-01, -1.895015399804194e-01, -7.963376405341959e-01, -1.246134506341869e-01, -1.870667241099697e-01, -1.870667241099697e-01, -2.002697827621569e-02, -2.085773999522024e-02, -5.575275708658617e-02, -1.012530928991616e-02, -2.064630715268500e-02, -2.064630715268500e-02, -4.990126806957658e+00, -4.991374713388437e+00, -4.990256414511097e+00, -4.991226708851808e+00, -4.990764036448058e+00, -4.990764036448058e+00, -1.846071994784860e+00, -1.860450060731627e+00, -1.838562361629388e+00, -1.849799481595130e+00, -1.865503085855090e+00, -1.865503085855090e+00, -5.934642911247039e-01, -6.461133825231549e-01, -5.642701280706302e-01, -5.913069237416051e-01, -6.160782037376682e-01, -6.160782037376682e-01, -9.015281572518055e-02, -1.758669208149299e-01, -8.893253555258619e-02, -1.886463649266548e+00, -1.041356392773930e-01, -1.041356392773930e-01, -9.776661425053089e-03, -1.111933836891590e-02, -8.372107697298632e-03, -6.361727233186010e-02, -1.014354427441929e-02, -1.014354427441929e-02, -6.144827464595219e-01, -6.121223289339189e-01, -6.130777200607402e-01, -6.137358721911864e-01, -6.134156167828495e-01, -6.134156167828495e-01, -5.954567178686199e-01, -5.125361626816616e-01, -5.391623611174235e-01, -5.625864344205982e-01, -5.508864666449044e-01, -5.508864666449045e-01, -6.759336476152086e-01, -2.267878892163188e-01, -2.765959998672138e-01, -3.641112873612832e-01, -3.186449493851575e-01, -3.186449493851574e-01, -4.642934223916792e-01, -5.539203842299707e-02, -6.217900861031538e-02, -3.490041674358793e-01, -7.472670585936757e-02, -7.472670585936757e-02, -2.318527594070726e-02, -3.125887734605275e-03, -5.881506103322944e-03, -7.140394614621387e-02, -8.653619271487695e-03, -8.653619271487681e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_relpbe0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.071484142209904e-09, -1.071472476064530e-09, -1.071414986057755e-09, -1.071606132879820e-09, -1.071478035399595e-09, -1.071478035399595e-09, -1.197195085026631e-06, -1.197120234546730e-06, -1.194876231409146e-06, -1.197800756437054e-06, -1.197137812001152e-06, -1.197137812001152e-06, -5.064122350459723e-04, -5.156638882841571e-04, -7.634645202386907e-04, -7.342074749481487e-04, -5.097512939917976e-04, -5.097512939917976e-04, -1.089201769045036e-01, -9.749695373398623e-02, -1.803844965904010e-04, -4.892436325097876e-01, -1.053610369549618e-01, -1.053610369549618e-01, -3.113490952562852e+01, -3.102443775957250e+01, -7.245708459642385e+00, -2.322605295328212e+01, -3.223341490491656e+01, -3.223341490491656e+01, -2.163634174083031e-07, -2.154582798905669e-07, -2.162725417526225e-07, -2.155687966289477e-07, -2.158983196916366e-07, -2.158983196916366e-07, -1.314523748475044e-05, -1.274560338067170e-05, -1.336067236933933e-05, -1.304368544164979e-05, -1.259664465888044e-05, -1.259664465888044e-05, 3.643161919306507e-04, 1.613984074573094e-03, 4.059732591971230e-04, 1.873939453875444e-03, 4.587115731264360e-04, 4.587115731264360e-04, -1.251024201022073e+00, -1.376547744616502e-01, -1.357676183244908e+00, 6.015197594016242e-06, -8.598710304835934e-01, -8.598710304835934e-01, -2.465223610857766e+01, -2.461142014238605e+01, -7.049727881121743e+01, -4.461560830836889e+00, -3.634699050319585e+01, -3.634699050319491e+01, 2.895173599222549e-03, 2.210853001488468e-03, 2.434509658497548e-03, 2.623147400692788e-03, 2.527012622643402e-03, 2.527012622643402e-03, 3.474681221258165e-03, -5.421675422016692e-04, 4.456291230917277e-04, 1.423902660238828e-03, 9.259746207979505e-04, 9.259746207979520e-04, 1.238641134506119e-03, -5.250915208444789e-02, -2.144183545423147e-02, -1.356023625281791e-03, -8.368357334921682e-03, -8.368357334921684e-03, -7.926268187070533e-04, -6.923423206768516e+00, -4.831291491657332e+00, 4.440508116426848e-03, -2.551479983969569e+00, -2.551479983969570e+00, -2.311114665860695e+01, -4.294203321147165e+01, -3.683859944358539e+01, -3.098581883952845e+00, -5.318939490652760e+01, -5.318939490652734e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
