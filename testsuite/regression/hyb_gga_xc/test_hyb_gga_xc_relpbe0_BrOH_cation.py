
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_relpbe0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.546709974870481e+01, -1.546713803780696e+01, -1.546732908870933e+01, -1.546675899559364e+01, -1.546705475197377e+01, -1.546705475197377e+01, -2.559888339574127e+00, -2.559888066621007e+00, -2.559943815582351e+00, -2.560326844614221e+00, -2.559949088767984e+00, -2.559949088767984e+00, -5.161578105128214e-01, -5.156707850341977e-01, -5.044455327681442e-01, -5.083562129416815e-01, -5.088643492095272e-01, -5.088643492095272e-01, -1.466267627741413e-01, -1.482294079673952e-01, -5.982663009509602e-01, -1.199915559263688e-01, -1.396846107754944e-01, -1.396846107754943e-01, -9.444034206073948e-03, -9.931479834351244e-03, -4.844982577917662e-02, -5.500248390925365e-03, -7.480912484711786e-03, -7.480912484711786e-03, -3.794860623516643e+00, -3.795389506006840e+00, -3.794888313867208e+00, -3.795355149538228e+00, -3.795126803316140e+00, -3.795126803316140e+00, -1.476846885668851e+00, -1.486414901034838e+00, -1.471431080782559e+00, -1.479861225303559e+00, -1.484799840447943e+00, -1.484799840447943e+00, -4.532379794728756e-01, -4.926251708403239e-01, -4.210526312599157e-01, -4.385994268555186e-01, -4.607930774017522e-01, -4.607930774017523e-01, -9.571286148296994e-02, -1.521346307398688e-01, -9.065890577016229e-02, -1.422877328319757e+00, -1.032714546856708e-01, -1.032714546856708e-01, -4.259650382015897e-03, -5.377991402204041e-03, -4.126437816491329e-03, -6.851100247779648e-02, -5.125458304519422e-03, -5.125458304519426e-03, -4.587673626601408e-01, -4.550969239709557e-01, -4.563475978225657e-01, -4.574113756569183e-01, -4.568752882017873e-01, -4.568752882017873e-01, -4.474056390369970e-01, -3.836527406387372e-01, -4.006348637728504e-01, -4.183714698236436e-01, -4.091974498928488e-01, -4.091974498928488e-01, -5.150744990716195e-01, -1.845756505602393e-01, -2.150700770627315e-01, -2.756630839428395e-01, -2.425290777804805e-01, -2.425290777804805e-01, -3.545981551581514e-01, -4.688479906027745e-02, -5.978293344564121e-02, -2.663072022317840e-01, -7.895792838190728e-02, -7.895792838190728e-02, -1.320711100265354e-02, -1.456381457911627e-03, -3.041838498813978e-03, -7.591654197976515e-02, -4.719226815218473e-03, -4.719226815218471e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_relpbe0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.018330904624503e+01, -2.018328390162088e+01, -2.018338178849704e+01, -2.018333694122700e+01, -2.018361765526219e+01, -2.018367297613078e+01, -2.018279348500116e+01, -2.018262549225173e+01, -2.018335019684579e+01, -2.018304768185935e+01, -2.018335019684579e+01, -2.018304768185935e+01, -3.327165274582720e+00, -3.327183672644802e+00, -3.327185555031468e+00, -3.327201733796200e+00, -3.327654403534953e+00, -3.327779167068152e+00, -3.327371386157519e+00, -3.327483829349098e+00, -3.326616006960618e+00, -3.327936127170647e+00, -3.326616006960618e+00, -3.327936127170647e+00, -6.678441279957198e-01, -6.708507240414374e-01, -6.665123100333094e-01, -6.702033370787168e-01, -6.461861451062243e-01, -6.409706407843052e-01, -6.482296530943525e-01, -6.498990345584361e-01, -6.718789575575288e-01, -6.212138506864305e-01, -6.718789575575288e-01, -6.212138506864305e-01, -1.687485901299552e-01, -1.744536411818365e-01, -1.720244164890711e-01, -1.785848344975672e-01, -7.642776450610861e-01, -7.895970706398461e-01, -1.218589219936116e-01, -1.231957451834061e-01, -1.644597370232001e-01, -1.020586887993265e-01, -1.644597370232000e-01, -1.020586887993264e-01, -1.212736025743977e-02, -1.270681629473153e-02, -1.269097069429130e-02, -1.337732901385919e-02, -5.301191839561799e-02, -5.397743144396609e-02, -7.339282622227236e-03, -7.244618721263713e-03, -1.045437196369080e-02, -6.810333710924337e-03, -1.045437196369079e-02, -6.810333710924336e-03, -4.992892360093791e+00, -4.991727091248822e+00, -4.994201398362800e+00, -4.992994834799902e+00, -4.992967346470921e+00, -4.991773904662095e+00, -4.994092840573915e+00, -4.992923201460302e+00, -4.993559967216191e+00, -4.992364026984548e+00, -4.993559967216191e+00, -4.992364026984548e+00, -1.848794882731936e+00, -1.848703658273247e+00, -1.863807302301987e+00, -1.863300147504667e+00, -1.833235997280268e+00, -1.837274574174351e+00, -1.846272235871819e+00, -1.850433291947242e+00, -1.868384083840628e+00, -1.858476955385794e+00, -1.868384083840628e+00, -1.858476955385794e+00, -6.001503364408011e-01, -5.988872095938059e-01, -6.528147450142271e-01, -6.531180881806394e-01, -5.475332643728960e-01, -5.642381433534465e-01, -5.739512324531775e-01, -5.889470665610942e-01, -6.219600416186519e-01, -5.965235008054834e-01, -6.219600416186519e-01, -5.965235008054837e-01, -8.630082959547758e-02, -8.658043276157114e-02, -1.627249459111154e-01, -1.634263408753462e-01, -8.053299989325866e-02, -8.243572154623505e-02, -1.888975036135961e+00, -1.888212546885655e+00, -9.697888512939037e-02, -1.009804598708620e-01, -9.697888512939037e-02, -1.009804598708620e-01, -5.564708616095293e-03, -5.734190614151059e-03, -7.087460051866348e-03, -7.171658295980979e-03, -5.336120144839698e-03, -5.574124171827696e-03, -6.407575313807756e-02, -6.449759327618666e-02, -5.663803609617952e-03, -7.217591450150824e-03, -5.663803609617954e-03, -7.217591450150827e-03, -6.046571556243623e-01, -6.065410590817547e-01, -6.020017582055104e-01, -6.039121708028576e-01, -6.030505423737228e-01, -6.049602905572397e-01, -6.038348779983800e-01, -6.057198078705546e-01, -6.034535738451650e-01, -6.053505484576125e-01, -6.034535738451650e-01, -6.053505484576125e-01, -5.887561163550936e-01, -5.903042978609125e-01, -4.999866498829600e-01, -5.018568204537749e-01, -5.279605990784432e-01, -5.299574822605633e-01, -5.544856525498807e-01, -5.560670903310051e-01, -5.413089763613488e-01, -5.429491988254402e-01, -5.413089763613488e-01, -5.429491988254402e-01, -6.824974150865247e-01, -6.835057288871395e-01, -2.108840425088583e-01, -2.119833041881234e-01, -2.606331310359136e-01, -2.630454587315902e-01, -3.594076439545010e-01, -3.609972141958112e-01, -3.084916472943241e-01, -3.084982237444144e-01, -3.084916472943240e-01, -3.084982237444144e-01, -4.618449056610625e-01, -4.645994602905175e-01, -5.273652354050034e-02, -5.286768455132450e-02, -6.105019491585650e-02, -6.129200787132110e-02, -3.499788767730114e-01, -3.541072024847065e-01, -7.107850741690394e-02, -7.131235732609527e-02, -7.107850741690390e-02, -7.131235732609528e-02, -1.703898211581454e-02, -1.749872734004206e-02, -1.936099057202806e-03, -1.939119987865935e-03, -3.936496681805658e-03, -4.127772663530701e-03, -6.829296598120617e-02, -6.877920566193568e-02, -5.333565384139017e-03, -6.640488574973723e-03, -5.333565384139013e-03, -6.640488574973718e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_relpbe0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.217915685620465e-09, 1.503523859423539e-10, -2.217927637549814e-09, -2.217886442005350e-09, 1.503551303289716e-10, -2.217906016496195e-09, -2.217787171210774e-09, 1.503589375446783e-10, -2.217766889886003e-09, -2.218122473144692e-09, 1.503182877066531e-10, -2.218188619016658e-09, -2.217905280852163e-09, 1.503407777566499e-10, -2.218010875122364e-09, -2.217905280852163e-09, 1.503407777566499e-10, -2.218010875122364e-09, -2.814750230477811e-06, 8.421485618286381e-07, -2.815056254923256e-06, -2.814638786296875e-06, 8.423229359271761e-07, -2.814978096890793e-06, -2.812414202744952e-06, 8.462665002325701e-07, -2.812272434850846e-06, -2.814573382308419e-06, 8.386460269725447e-07, -2.814534281559551e-06, -2.816809690996833e-06, 8.422579760537019e-07, -2.812247807723823e-06, -2.816809690996833e-06, 8.422579760537019e-07, -2.812247807723823e-06, -1.605040124314571e-03, 1.399579598341986e-03, -1.575168020895210e-03, -1.622575872456643e-03, 1.388829080493623e-03, -1.585782478937372e-03, -1.927076443600559e-03, 1.118429336121534e-03, -1.982618812407093e-03, -1.896127540824533e-03, 1.093272612194958e-03, -1.879484328958134e-03, -1.660570624470867e-03, 1.109587711750582e-03, -2.162793855553083e-03, -1.660570624470867e-03, 1.109587711750582e-03, -2.162793855553083e-03, -4.111927488012181e-01, 1.195456708775294e-01, -3.531485483342591e-01, -3.909804120263950e-01, 1.262834610071972e-01, -3.271826801271356e-01, -9.467468957024536e-04, 7.576093834926096e-04, -7.943858174937383e-04, -1.047729816607200e+00, 8.606158685664167e-02, -9.969349768980750e-01, -3.625684731979974e-01, 7.184168903938147e-02, -2.732905640292723e+00, -3.625684731979972e-01, 7.184168903938153e-02, -2.732905640292723e+00, -3.129038450165706e+01, 3.193589109602529e-03, -3.092056720307549e+01, -3.290730332182662e+01, 3.756516884484702e-03, -3.266069963173211e+01, -1.303584429913380e+01, 1.934119010231899e-02, -1.262005799961666e+01, -2.893916835676541e+01, 1.134212552984269e-03, -2.816022318684479e+01, -3.133309810159533e+01, 1.664212361725402e-03, -7.995506384838967e+01, -3.133309810159556e+01, 1.664212360982449e-03, -7.995506384839000e+01, -5.423808358324563e-07, 2.215636452706951e-07, -5.430035153607132e-07, -5.412440740887869e-07, 2.230350223030848e-07, -5.418799947569231e-07, -5.423261907558937e-07, 2.216223872153358e-07, -5.429586745185558e-07, -5.413326870063532e-07, 2.229211766174392e-07, -5.419569803247887e-07, -5.418034991214737e-07, 2.223120504481948e-07, -5.424348973289883e-07, -5.418034991214737e-07, 2.223120504481948e-07, -5.424348973289883e-07, -2.850139004997249e-05, 4.734025705738980e-06, -2.850748583777556e-05, -2.766498124059296e-05, 4.723766899739256e-06, -2.769647874090409e-05, -2.924637278311928e-05, 4.498775758081292e-06, -2.907321477794962e-05, -2.850434965089135e-05, 4.491372627545229e-06, -2.832506774671840e-05, -2.751423648537204e-05, 4.846223857770283e-06, -2.795739687810397e-05, -2.751423648537204e-05, 4.846223857770283e-06, -2.795739687810397e-05, -1.671097988853459e-03, 4.636343636177631e-03, -1.713930736089500e-03, 7.645038884480837e-06, 5.892291978604471e-03, 1.234973633743464e-05, -2.848162575073849e-03, 6.027067551648050e-03, -2.073910249665286e-03, -5.934676052698445e-04, 9.004406173789817e-03, 3.230834510589745e-05, -1.103922149598670e-03, 4.634677140744393e-03, -1.875610120924227e-03, -1.103922149598671e-03, 4.634677140744392e-03, -1.875610120924226e-03, -2.755749546668012e+00, 4.776796252164375e-02, -2.720117296670553e+00, -3.699147081955531e-01, 4.353316608714362e-02, -3.633002512054517e-01, -3.599891388638625e+00, 4.841003397062845e-02, -3.185233940054774e+00, -1.188923881776627e-05, 4.756423523261490e-05, -1.195380831533634e-05, -2.073420195351348e+00, 9.151991303489895e-02, -1.906367442101036e+00, -2.073420195351348e+00, 9.151991303489895e-02, -1.906367442101036e+00, -4.069466899114354e+01, 1.105883946149299e-03, -3.522201227244430e+01, -3.497842307324059e+01, 1.394502781788109e-03, -3.229636077268945e+01, -1.988918163713450e+02, 1.389219402529606e-02, -2.209747588298791e+02, -8.592309717364358e+00, 4.725019572109535e-02, -8.316442043741121e+00, -9.908745746683451e+01, 5.316799931868502e-03, -9.689894863493002e+01, -9.908745746683546e+01, 5.316799929855039e-03, -9.689894863493122e+01, 9.261501128454224e-04, 9.974838107766084e-03, 9.880517473878389e-04, 1.296454773250711e-04, 8.534636042112452e-03, 1.930882923821836e-04, 3.848314337455589e-04, 8.991013480503613e-03, 4.478881714921499e-04, 6.154918065337147e-04, 9.407769479030020e-03, 6.777855021837902e-04, 4.978296456768783e-04, 9.194719022989992e-03, 5.605006502059692e-04, 4.978296456768783e-04, 9.194719022989992e-03, 5.605006502059692e-04, 1.377340376850732e-03, 1.182291291835917e-02, 1.436755317846871e-03, -4.851522001258352e-03, 6.223213038000641e-03, -4.720269321169620e-03, -3.133319502433839e-03, 7.214056985982998e-03, -3.018972233484726e-03, -1.460048848606139e-03, 8.547233056776451e-03, -1.381024657176106e-03, -2.299484152318879e-03, 7.844566661473306e-03, -2.209133888112590e-03, -2.299484152318879e-03, 7.844566661473306e-03, -2.209133888112590e-03, -9.799583768581367e-05, 4.676907112610919e-03, -8.297862552381955e-05, -1.543328792381826e-01, 3.261416031406758e-02, -1.509323821176203e-01, -7.426109214720931e-02, 3.019992223282277e-02, -7.119076823568356e-02, -1.824811581965980e-02, 2.721330907438524e-02, -1.757373970807830e-02, -3.794260807187060e-02, 3.029031667202127e-02, -3.805946636661611e-02, -3.794260807187064e-02, 3.029031667202130e-02, -3.805946636661610e-02, -6.655244360121064e-03, 8.935021449083265e-03, -6.368199369477200e-03, -1.223679261141794e+01, 1.589206888732838e-02, -1.219826350145334e+01, -9.594810283407547e+00, 2.437362008132357e-02, -9.433705527726385e+00, -1.664736905163043e-02, 4.312849773764801e-02, -1.449070579132554e-02, -5.942453014941891e+00, 8.256419656225354e-02, -5.775531534634094e+00, -5.942453014941892e+00, 8.256419656225569e-02, -5.775531534634097e+00, -2.449930583975807e+01, 3.982061994329134e-03, -2.495392618017871e+01, -1.255493705024046e+02, 1.512252524978892e-03, -2.223387355134327e+02, -7.736216966399587e+01, 1.892716315210401e-03, -8.232536641945806e+01, -6.834011703134485e+00, 7.574307447306305e-02, -6.554329267209041e+00, -2.039906849446733e+02, 6.786377389416625e-03, -1.007309608654071e+02, -2.039906849446745e+02, 6.786377392463335e-03, -1.007309608654082e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
