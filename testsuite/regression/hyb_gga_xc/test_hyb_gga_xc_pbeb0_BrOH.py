
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbeb0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.576828421192598e+01, -1.576830285497605e+01, -1.576844229087828e+01, -1.576813588551036e+01, -1.576829357331409e+01, -1.576829357331409e+01, -2.653774297120485e+00, -2.653756452771697e+00, -2.653373878326176e+00, -2.654586320018673e+00, -2.653776223856353e+00, -2.653776223856353e+00, -5.549973193139119e-01, -5.548238319076688e-01, -5.517852034808811e-01, -5.552839841188302e-01, -5.549320724475471e-01, -5.549320724475471e-01, -1.748435406728228e-01, -1.762621915937514e-01, -6.479167393631055e-01, -1.389169181111654e-01, -1.752580404789236e-01, -1.752580404789236e-01, -1.275555527450455e-02, -1.335753772642156e-02, -5.287871847032061e-02, -6.131715423775668e-03, -1.321840938164298e-02, -1.321840938164298e-02, -3.840757331544270e+00, -3.840507282642338e+00, -3.840735989419216e+00, -3.840541478184285e+00, -3.840622781837908e+00, -3.840622781837908e+00, -1.612100937077559e+00, -1.619713103790767e+00, -1.612611501454984e+00, -1.618527779404685e+00, -1.616636684095494e+00, -1.616636684095494e+00, -4.738191051293801e-01, -5.049869004403991e-01, -4.519980577160188e-01, -4.643853344338435e-01, -4.893444971627330e-01, -4.893444971627330e-01, -1.096836329903631e-01, -1.846477471575665e-01, -1.078373530143955e-01, -1.434621174931936e+00, -1.220710749994083e-01, -1.220710749994083e-01, -5.915306509700689e-03, -6.759252335888065e-03, -5.066249065506923e-03, -7.179939844950929e-02, -6.158693246570780e-03, -6.158693246570780e-03, -4.811446970585075e-01, -4.792311392686497e-01, -4.798733699092306e-01, -4.804008421139685e-01, -4.801330790459928e-01, -4.801330790459928e-01, -4.669598078629899e-01, -4.213744426726530e-01, -4.331930883410001e-01, -4.449869655410800e-01, -4.388031048740627e-01, -4.388031048740627e-01, -5.276157342090803e-01, -2.220226365174988e-01, -2.525572971312967e-01, -3.038822893624354e-01, -2.763559448258323e-01, -2.763559448258321e-01, -3.838401731586151e-01, -4.927323870437026e-02, -6.545815651432894e-02, -2.855645807064007e-01, -9.038218760359000e-02, -9.038218760359000e-02, -1.494223896626498e-02, -1.851593068303815e-03, -3.516852429456956e-03, -8.619431068060147e-02, -5.234486908043254e-03, -5.234486908043246e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbeb0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.899326568943295e+01, -1.899333166105349e+01, -1.899363048772942e+01, -1.899255009766009e+01, -1.899330044289456e+01, -1.899330044289456e+01, -3.144479229657915e+00, -3.144512371968181e+00, -3.145548733185988e+00, -3.144407303057100e+00, -3.144509214395130e+00, -3.144509214395130e+00, -6.468029242156963e-01, -6.457337555665095e-01, -6.181144454864873e-01, -6.230991505899381e-01, -6.464150019836937e-01, -6.464150019836937e-01, -1.981242894403437e-01, -2.010382450503744e-01, -7.774856565887034e-01, -1.503055717502401e-01, -1.990013703661472e-01, -1.990013703661472e-01, -1.692245160202174e-02, -1.771243800713937e-02, -6.674334402461256e-02, -8.167612195092532e-03, -1.752813794858347e-02, -1.752813794858347e-02, -4.783092561071223e+00, -4.785246472966636e+00, -4.783312392950291e+00, -4.784987182972023e+00, -4.784197540338057e+00, -4.784197540338057e+00, -1.722254297752813e+00, -1.735686569108707e+00, -1.715081780468265e+00, -1.725485947876482e+00, -1.740938398586214e+00, -1.740938398586214e+00, -5.936366579076459e-01, -6.562198749515632e-01, -5.648046018511309e-01, -6.001688042719909e-01, -6.171603907678314e-01, -6.171603907678314e-01, -1.238188652314694e-01, -1.973019013524195e-01, -1.213394163059558e-01, -1.865865583394437e+00, -1.337934943578258e-01, -1.337934943578258e-01, -7.879669179266722e-03, -9.001283165214400e-03, -6.747126787267689e-03, -8.675194340714014e-02, -8.201431460279102e-03, -8.201431460279105e-03, -6.277320328089476e-01, -6.232116103307014e-01, -6.249586232791489e-01, -6.262166180615866e-01, -6.255979717601545e-01, -6.255979717601545e-01, -6.092035567026298e-01, -5.092764849041027e-01, -5.400403803555187e-01, -5.684233427581095e-01, -5.541774336227443e-01, -5.541774336227443e-01, -6.851468592830126e-01, -2.403729381931629e-01, -2.833349730167107e-01, -3.673135097221767e-01, -3.223722188982037e-01, -3.223722188982036e-01, -4.629667216023896e-01, -6.287021160944675e-02, -8.081367188446313e-02, -3.552485900388919e-01, -1.040458794082754e-01, -1.040458794082754e-01, -1.980473046227892e-02, -2.468491808667302e-03, -4.687237750790552e-03, -9.928194631939607e-02, -6.971775651293559e-03, -6.971775651293544e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbeb0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.093136069653083e-09, -5.093101130706971e-09, -5.092888865475451e-09, -5.093462117475993e-09, -5.093118115478741e-09, -5.093118115478741e-09, -6.053532627778121e-06, -6.053533537317211e-06, -6.052584693828926e-06, -6.049269440258101e-06, -6.053433970814875e-06, -6.053433970814875e-06, -2.851964999751175e-03, -2.863628019891535e-03, -3.121614326041525e-03, -3.038658054180228e-03, -2.856225496535607e-03, -2.856225496535607e-03, -2.461426858356534e-01, -2.366123905633973e-01, -1.451583677492276e-03, -5.082906401640437e-01, -2.433099994535055e-01, -2.433099994535055e-01, -3.791451288859473e+00, -3.797747408371681e+00, -1.493255226450282e+00, -2.712859693676575e+00, -3.945032301282627e+00, -3.945032301282627e+00, -1.283901105311297e-06, -1.282414876582778e-06, -1.283748575183050e-06, -1.282593143833455e-06, -1.283143295916736e-06, -1.283143295916736e-06, -4.832432233730369e-05, -4.733637575505030e-05, -4.840028205222266e-05, -4.763351991704334e-05, -4.753140447958617e-05, -4.753140447958617e-05, -3.880362214065661e-03, -1.320351248112077e-03, -4.735747032636095e-03, -2.411705320912982e-03, -3.235579193748069e-03, -3.235579193748069e-03, -7.072444076129899e-01, -1.982854586629403e-01, -7.966092273202990e-01, -3.762851688490118e-05, -6.841587390705176e-01, -6.841587390705176e-01, -2.878233640087495e+00, -2.881696011796081e+00, -8.245921235269920e+00, -1.383685716447896e+00, -4.255556618745232e+00, -4.255556618746683e+00, -5.273670080159082e-04, -1.413245823429088e-03, -1.119750480657185e-03, -8.751538862171795e-04, -9.994761055523872e-04, -9.994761055523889e-04, -3.938843883560424e-04, -7.429244521096191e-03, -5.660899944148371e-03, -3.873264085381363e-03, -4.794112616135288e-03, -4.794112616135287e-03, -1.222952344506418e-03, -1.046085012952621e-01, -6.309195252103404e-02, -2.584284490294632e-02, -4.167350315846032e-02, -4.167350315846036e-02, -1.070447127699197e-02, -1.281775205345222e+00, -1.231126326246260e+00, -2.755354085494934e-02, -1.221165706786634e+00, -1.221165706786635e+00, -2.844466154950701e+00, -4.975165483415599e+00, -4.278771334488682e+00, -1.482724119013668e+00, -6.217006147773089e+00, -6.217006147775706e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
