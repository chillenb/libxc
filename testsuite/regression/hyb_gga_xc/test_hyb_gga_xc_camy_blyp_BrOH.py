
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_blyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.672251720899583e+01, -1.672253631194307e+01, -1.672268315874499e+01, -1.672236911151891e+01, -1.672252676812447e+01, -1.672252676812447e+01, -2.668408152182945e+00, -2.668388029699709e+00, -2.667950064561243e+00, -2.669296255229719e+00, -2.668409683982139e+00, -2.668409683982139e+00, -4.377165966800430e-01, -4.374297338255245e-01, -4.303092956616716e-01, -4.341596829935012e-01, -4.376107442722414e-01, -4.376107442722414e-01, -6.602871369993865e-02, -6.807292276652256e-02, -5.357621181447316e-01, -2.644673489735417e-02, -6.665227248415952e-02, -6.665227248415952e-02, -1.766686290522351e-03, -1.850192347318358e-03, 8.563606977982380e-04, -8.531664570371327e-04, -1.830977244456663e-03, -1.830977244456663e-03, -3.929163861463903e+00, -3.928721743753663e+00, -3.929123659735285e+00, -3.928779807642419e+00, -3.928930027301388e+00, -3.928930027301388e+00, -1.548874170509525e+00, -1.557448326899147e+00, -1.548743878074447e+00, -1.555427042457487e+00, -1.554845032162976e+00, -1.554845032162976e+00, -3.572866746241326e-01, -3.844741408001116e-01, -3.353498193601334e-01, -3.453964119984126e-01, -3.727663819267538e-01, -3.727663819267538e-01, -1.186374513882038e-03, -5.946647204865472e-02, -2.743137425404137e-03, -1.349293391496302e+00, -1.338477820368629e-02, -1.338477820368629e-02, -8.233385799632913e-04, -9.396543101998844e-04, -7.063119531823834e-04, 3.718547902836955e-03, -8.569916740084360e-04, -8.569916740084360e-04, -3.582081188409407e-01, -3.584498315556212e-01, -3.583935419160569e-01, -3.583263025062542e-01, -3.583621103810027e-01, -3.583621103810027e-01, -3.438766294739211e-01, -3.036401795775796e-01, -3.164955839309347e-01, -3.275533613216918e-01, -3.219641213876018e-01, -3.219641213876018e-01, -4.074426861590749e-01, -9.647465436966622e-02, -1.311672146850628e-01, -1.881484463855678e-01, -1.586186292559605e-01, -1.586186292559605e-01, -2.660137872525811e-01, 5.746431480928879e-04, 4.721938446193635e-03, -1.727478613611458e-01, 1.915568752712642e-04, 1.915568752712572e-04, -2.069662432092971e-03, -2.598306297604166e-04, -4.916594395379252e-04, -9.278546496037272e-04, -7.295079513796491e-04, -7.295079513796480e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_blyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.008913226251171e+01, -2.008919773133236e+01, -2.008950197625583e+01, -2.008842966748518e+01, -2.008916668677211e+01, -2.008916668677211e+01, -3.176730156987574e+00, -3.176752595460039e+00, -3.177503272868790e+00, -3.176897969455137e+00, -3.176755519151496e+00, -3.176755519151496e+00, -5.565956742646518e-01, -5.560417874622126e-01, -5.430456937762942e-01, -5.474527370598328e-01, -5.563929706615715e-01, -5.563929706615715e-01, -1.263831993458987e-01, -1.274122483747762e-01, -6.778261155369703e-01, -9.679351285293221e-02, -1.266702099836208e-01, -1.266702099836208e-01, -2.353012691541628e-03, -2.465004868892319e-03, -1.333157757842673e-02, -1.134657684036759e-03, -2.439229269594627e-03, -2.439229269594627e-03, -4.877863640301044e+00, -4.879691570445701e+00, -4.878051144199212e+00, -4.879472439451725e+00, -4.878799847086775e+00, -4.878799847086775e+00, -1.721564189145466e+00, -1.734595399425989e+00, -1.715722785523945e+00, -1.725848192793794e+00, -1.738094721823090e+00, -1.738094721823090e+00, -4.756083289379560e-01, -5.270785134005450e-01, -4.478996188662746e-01, -4.722017296599292e-01, -4.967109906651193e-01, -4.967109906651193e-01, -7.220364859710530e-02, -1.441789113290624e-01, -6.869733436079756e-02, -1.771436570372176e+00, -8.124921273834262e-02, -8.124921273834262e-02, -1.095016970792192e-03, -1.249620268328778e-03, -9.395134925522663e-04, -3.002460568560775e-02, -1.139741450929350e-03, -1.139741450929350e-03, -4.992224480316479e-01, -4.940871913019582e-01, -4.958448789924291e-01, -4.972617026677291e-01, -4.965458826018726e-01, -4.965458826018726e-01, -4.810142217089192e-01, -4.048155159828049e-01, -4.242072883520557e-01, -4.440525013678857e-01, -4.337015816900049e-01, -4.337015816900050e-01, -5.561170957657351e-01, -1.799355079662125e-01, -2.095211869032343e-01, -2.663714853860982e-01, -2.346620478911877e-01, -2.346620478911877e-01, -3.598855529136753e-01, -1.091331348894966e-02, -2.426908425472184e-02, -2.458468355881203e-01, -4.853578302632958e-02, -4.853578302632956e-02, -2.759510487780113e-03, -3.460386145003364e-04, -6.542887426182038e-04, -4.318668383859713e-02, -9.703341060805389e-04, -9.703341060805375e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_blyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.694320170996088e-09, -5.694296537718840e-09, -5.694105234651358e-09, -5.694493965147191e-09, -5.694308425401193e-09, -5.694308425401193e-09, -6.744256864344992e-06, -6.744487947829879e-06, -6.749768814457399e-06, -6.735151482946595e-06, -6.744264604931884e-06, -6.744264604931884e-06, -2.093139379177558e-03, -2.088008363561650e-03, -1.923250213005709e-03, -1.897933854893778e-03, -2.091325923463802e-03, -2.091325923463802e-03, 1.787291791385904e-01, 1.641448984223013e-01, -1.362824514824024e-03, 8.107163406586188e-01, 1.742086568433571e-01, 1.742086568433571e-01, 1.762461088819572e-03, 4.841474862032989e-03, 1.005980805721573e+01, -1.912403778423645e-04, 3.917163234014732e-03, 3.917163234014732e-03, -1.615395889899985e-06, -1.616587121992784e-06, -1.615508476976244e-06, -1.616434822044567e-06, -1.616018892609793e-06, -1.616018892609793e-06, -4.509730096952143e-05, -4.432835187314411e-05, -4.500504064338680e-05, -4.440688268565586e-05, -4.469373948111449e-05, -4.469373948111449e-05, -4.303686098859369e-03, -4.524668454174681e-03, -4.902187809434902e-03, -5.638412126239018e-03, -4.015695731228244e-03, -4.015695731228244e-03, 2.363817626744022e+00, 2.023550553310778e-01, 2.449892144057630e+00, -8.662272853823018e-05, 1.470138123370722e+00, 1.470138123370722e+00, -1.805046595674596e-04, -2.599884739594505e-04, -2.426849621390360e-04, 7.218975906077934e+00, -2.631966936571154e-04, -2.631966936569354e-04, -6.009402290915664e-03, -5.516854391144279e-03, -5.669096127263670e-03, -5.802815201036786e-03, -5.733936571077474e-03, -5.733936571077474e-03, -6.812056733335556e-03, -5.100509749623051e-03, -5.483918146043910e-03, -5.848211295354776e-03, -5.669039839908390e-03, -5.669039839908390e-03, -3.833770586402299e-03, 5.788745537262186e-02, 1.329381693934396e-02, -8.233723544020913e-03, -1.771696774464919e-03, -1.771696774464891e-03, -6.253417814515444e-03, 1.015026944443884e+01, 8.419179091954776e+00, -1.184757945898898e-02, 4.167176567158013e+00, 4.167176567158013e+00, 2.680512277442515e-02, -1.052150045131965e-05, -5.668084385086992e-05, 4.655332087015140e+00, -2.187875455559671e-04, -2.187875455558647e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
