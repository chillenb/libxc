
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_mol0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.595092959827797e+01, -1.595094439442351e+01, -1.595107327494935e+01, -1.595082973158652e+01, -1.595093687571613e+01, -1.595093687571613e+01, -2.682632011247906e+00, -2.682608711390376e+00, -2.682077895757986e+00, -2.683554406477000e+00, -2.682631304825076e+00, -2.682631304825076e+00, -5.577377223658705e-01, -5.576549364992042e-01, -5.572571619902168e-01, -5.606920952520709e-01, -5.577050353360667e-01, -5.577050353360667e-01, -1.751184003653382e-01, -1.763113613514899e-01, -6.495793085818166e-01, -1.409038723995529e-01, -1.754617968848348e-01, -1.754617968848348e-01, -1.276201259915130e-02, -1.336495312966908e-02, -5.315671662041346e-02, -6.132327368714759e-03, -1.322573305827543e-02, -1.322573305827543e-02, -3.863814820853148e+00, -3.863328130333245e+00, -3.863769854372061e+00, -3.863391329797227e+00, -3.863558073433339e+00, -3.863558073433339e+00, -1.645414248503824e+00, -1.652685039196146e+00, -1.646698782114919e+00, -1.652353181102049e+00, -1.648691644323861e+00, -1.648691644323861e+00, -4.717382004736540e-01, -5.029353789619093e-01, -4.499356986474206e-01, -4.619829620068741e-01, -4.870787408280730e-01, -4.870787408280730e-01, -1.112305202907892e-01, -1.872433669993012e-01, -1.093644718665241e-01, -1.432551472285944e+00, -1.239008715380846e-01, -1.239008715380846e-01, -5.915872469007824e-03, -6.760096614212613e-03, -5.066850253766417e-03, -7.244676558931223e-02, -6.159469169101312e-03, -6.159469169101312e-03, -4.803459439042861e-01, -4.773833578722560e-01, -4.783299501947163e-01, -4.791444875034979e-01, -4.787271300752044e-01, -4.787271300752044e-01, -4.664200229975643e-01, -4.206159774319637e-01, -4.311452676143889e-01, -4.423857796466464e-01, -4.363695660359257e-01, -4.363695660359257e-01, -5.254237238036681e-01, -2.243895418804470e-01, -2.537294210228426e-01, -3.023728770905145e-01, -2.760829995211897e-01, -2.760829995211896e-01, -3.829101640417593e-01, -4.948364372722339e-02, -6.593146334841270e-02, -2.831183679811196e-01, -9.151689994928586e-02, -9.151689994928586e-02, -1.495122133727891e-02, -1.851615948517441e-03, -3.516997665227355e-03, -8.726179725810283e-02, -5.235062883888131e-03, -5.235062883888120e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_mol0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.879517698395421e+01, -1.879524462129408e+01, -1.879554750856193e+01, -1.879443991650842e+01, -1.879521264402672e+01, -1.879521264402672e+01, -3.096974824806560e+00, -3.097010293836358e+00, -3.098109523405078e+00, -3.096852469840726e+00, -3.097005848655625e+00, -3.097005848655625e+00, -6.298281625921315e-01, -6.286881795732575e-01, -6.003148290917290e-01, -6.052174400890504e-01, -6.294144848850876e-01, -6.294144848850876e-01, -1.884190497681219e-01, -1.911126946141083e-01, -7.612294536550781e-01, -1.490630579509027e-01, -1.892185010168577e-01, -1.892185010168577e-01, -1.694774941400802e-02, -1.774143855601186e-02, -6.767858183773251e-02, -8.170047854117698e-03, -1.755677861144900e-02, -1.755677861144900e-02, -4.734330768812721e+00, -4.736711408452065e+00, -4.734573151563624e+00, -4.736424231300288e+00, -4.735552631532205e+00, -4.735552631532205e+00, -1.694588253039605e+00, -1.707289484853725e+00, -1.688432269018114e+00, -1.698225132412258e+00, -1.711596222511320e+00, -1.711596222511320e+00, -5.865453069882086e-01, -6.567238964187154e-01, -5.575780867871474e-01, -5.997386590391164e-01, -6.110870284779741e-01, -6.110870284779741e-01, -1.265535102916795e-01, -1.931840988218607e-01, -1.237947346105219e-01, -1.859619538196053e+00, -1.348591863413736e-01, -1.348591863413736e-01, -7.881922161231613e-03, -9.004639891007291e-03, -6.749516549891446e-03, -8.857368097001278e-02, -8.204515714972462e-03, -8.204515714972459e-03, -6.285434775669094e-01, -6.239953679791319e-01, -6.259335117354712e-01, -6.272153931755240e-01, -6.266002894979503e-01, -6.266002894979503e-01, -6.098117928478296e-01, -4.978280976548218e-01, -5.327051543468797e-01, -5.655686033674396e-01, -5.490840870703262e-01, -5.490840870703262e-01, -6.853482765950319e-01, -2.319167135819672e-01, -2.715995647742840e-01, -3.578294024982275e-01, -3.106128365085639e-01, -3.106128365085639e-01, -4.519442878519278e-01, -6.360590836379415e-02, -8.229004998572703e-02, -3.497103409115776e-01, -1.062857416746829e-01, -1.062857416746828e-01, -1.983982484035827e-02, -2.468583255211080e-03, -4.687817320296665e-03, -1.013024844703985e-01, -6.974066373272381e-03, -6.974066373272368e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_mol0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.223440071209479e-09, -6.223403429084814e-09, -6.223162052200623e-09, -6.223763617460184e-09, -6.223421398676038e-09, -6.223421398676038e-09, -7.492057124822599e-06, -7.492125141812663e-06, -7.492781209034700e-06, -7.485484463080312e-06, -7.491968605164883e-06, -7.491968605164883e-06, -3.637341376100541e-03, -3.650557507465918e-03, -3.906431915127356e-03, -3.805605843041919e-03, -3.642187423175219e-03, -3.642187423175219e-03, -3.347627282872338e-01, -3.247959817783238e-01, -1.855556689768733e-03, -5.756452214391563e-01, -3.319253833855764e-01, -3.319253833855764e-01, -3.047407248892401e+00, -3.054906530248845e+00, -1.271846610535851e+00, -2.164272630439419e+00, -3.173453924785694e+00, -3.173453924785694e+00, -1.621825398046694e-06, -1.620441565334475e-06, -1.621682022796322e-06, -1.620606280648340e-06, -1.621122925583704e-06, -1.621122925583704e-06, -5.702139145243028e-05, -5.596055651347898e-05, -5.694416644064671e-05, -5.612612361718260e-05, -5.636720935320088e-05, -5.636720935320088e-05, -4.730897141092337e-03, -2.254864507463105e-04, -5.799573369259183e-03, -1.554322827391279e-03, -3.853073148740900e-03, -3.853073148740900e-03, -6.915548732371113e-01, -2.343115570601422e-01, -7.885936497283166e-01, -4.461419117396101e-05, -7.261862682504239e-01, -7.261862682504239e-01, -2.296031250456505e+00, -2.300183797362410e+00, -6.582666600408647e+00, -1.241063557233407e+00, -3.397199191374645e+00, -3.397199191375126e+00, 2.584702198424764e-03, 2.939541466914653e-04, 1.019162664421445e-03, 1.648476049101568e-03, 1.325714070215202e-03, 1.325714070215202e-03, 3.538926409123100e-03, -9.562570414881658e-03, -6.959990720536598e-03, -3.978496273194685e-03, -5.561078147898938e-03, -5.561078147898928e-03, -4.839378503233788e-04, -1.304354756526236e-01, -8.249174380388100e-02, -3.368527544411878e-02, -5.543432519850105e-02, -5.543432519850102e-02, -1.383066458680934e-02, -1.077236984819006e+00, -1.073311213980904e+00, -3.324447277214362e-02, -1.175889721224268e+00, -1.175889721224267e+00, -2.289027063469629e+00, -3.961017782097929e+00, -3.409206225718876e+00, -1.437264792963678e+00, -4.961735346710862e+00, -4.961735346711126e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
