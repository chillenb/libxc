
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camh_b3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.707924293229325e+01, -1.707926487327157e+01, -1.707941825919782e+01, -1.707909067076100e+01, -1.707925438203055e+01, -1.707925438203055e+01, -2.833641566966861e+00, -2.833612498178603e+00, -2.833010017284888e+00, -2.834596559352880e+00, -2.833675324804195e+00, -2.833675324804195e+00, -5.488929942682517e-01, -5.487074647931002e-01, -5.450478083845139e-01, -5.492541913325159e-01, -5.483324552859072e-01, -5.483324552859072e-01, -1.355706873040730e-01, -1.373747425851833e-01, -6.399711322147912e-01, -1.042879215046273e-01, -1.280566395364720e-01, -1.280566395364719e-01, -3.402573963369458e-02, -3.409511389908253e-02, -5.952208387786324e-02, -3.074538465307635e-02, -3.102549138249292e-02, -3.102549138249290e-02, -4.110715888030890e+00, -4.110196236219211e+00, -4.110700842564274e+00, -4.110241957864472e+00, -4.110447665219379e+00, -4.110447665219379e+00, -1.706241372651942e+00, -1.714825721049294e+00, -1.706145958522753e+00, -1.713731722174112e+00, -1.711038290326019e+00, -1.711038290326019e+00, -4.600980892613309e-01, -4.839906712467179e-01, -4.266527817957066e-01, -4.290550517381439e-01, -4.662126213349509e-01, -4.662126213349509e-01, -7.620005788305100e-02, -1.380794209430947e-01, -7.264279725232178e-02, -1.480072480317961e+00, -8.684551634421864e-02, -8.684551634421864e-02, -2.766417129273525e-02, -2.963247806454961e-02, -1.948774010017665e-02, -6.199730078475168e-02, -2.363176207490581e-02, -2.363176207490583e-02, -4.416903841744745e-01, -4.434086701073873e-01, -4.428488500701082e-01, -4.423472274787777e-01, -4.426016736709876e-01, -4.426016736709876e-01, -4.279488844122057e-01, -3.946491359284710e-01, -4.052762146022095e-01, -4.147931330147988e-01, -4.099367504890730e-01, -4.099367504890730e-01, -5.089886130004810e-01, -1.765824778678033e-01, -2.120070713986949e-01, -2.730538328742345e-01, -2.408228023343306e-01, -2.408228023343306e-01, -3.616915643000121e-01, -5.986226317163409e-02, -6.120184471504121e-02, -2.578880520514793e-01, -6.700651026368878e-02, -6.700651026368877e-02, -3.861992297814127e-02, -1.693405487705718e-02, -2.228983072077735e-02, -6.516734604478401e-02, -2.222365989593115e-02, -2.222365989593114e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camh_b3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.046304527343788e+01, -2.046302103000793e+01, -2.046313379031860e+01, -2.046308560553995e+01, -2.046340098309008e+01, -2.046347138606029e+01, -2.046239806420310e+01, -2.046219718300653e+01, -2.046309620406165e+01, -2.046269612613922e+01, -2.046309620406165e+01, -2.046269612613922e+01, -3.320102142115945e+00, -3.320182426111925e+00, -3.320130771406471e+00, -3.320212886137029e+00, -3.320845181569335e+00, -3.321027089999967e+00, -3.320144865923743e+00, -3.320322548031651e+00, -3.319547788605533e+00, -3.320966225754725e+00, -3.319547788605533e+00, -3.320966225754725e+00, -6.432906489208527e-01, -6.449580799208905e-01, -6.423164381031798e-01, -6.443398103974098e-01, -6.259489482257669e-01, -6.239674899904573e-01, -6.297498919579175e-01, -6.303769240614145e-01, -6.410235084289164e-01, -6.225160461598693e-01, -6.410235084289164e-01, -6.225160461598693e-01, -1.675503459863289e-01, -1.681883151601805e-01, -1.691034859328968e-01, -1.700195622893403e-01, -7.416847628792197e-01, -7.606531700079144e-01, -1.354363346414067e-01, -1.358456020409308e-01, -1.407359894962488e-01, -1.490909023527323e-01, -1.407359894962488e-01, -1.490909023527322e-01, -1.107871282166899e-02, -1.097820059093960e-02, -1.136850047174769e-02, -1.123612638416486e-02, -3.465672344066381e-02, -3.475622783017374e-02, -8.219373499481653e-03, -8.256816604453354e-03, -9.032962302299385e-03, -8.542586458939369e-03, -9.032962302299368e-03, -8.542586458939362e-03, -5.056365575773875e+00, -5.055166486182733e+00, -5.058385607007158e+00, -5.057121485632322e+00, -5.056476877990791e+00, -5.055234956468931e+00, -5.058212826228961e+00, -5.057008191403964e+00, -5.057399297619477e+00, -5.056148761980910e+00, -5.057399297619477e+00, -5.056148761980910e+00, -1.828417094873875e+00, -1.828337809493497e+00, -1.842738728447557e+00, -1.842302750721071e+00, -1.814997367942196e+00, -1.817856660903250e+00, -1.827330701119367e+00, -1.830356383651282e+00, -1.845890715324637e+00, -1.838260378144214e+00, -1.845890715324637e+00, -1.838260378144214e+00, -5.698885840364810e-01, -5.688080815143550e-01, -6.306908009074719e-01, -6.310675871285911e-01, -5.185465812363607e-01, -5.321454639781056e-01, -5.487764270551101e-01, -5.620852633003115e-01, -5.903252394383797e-01, -5.684935815574286e-01, -5.903252394383797e-01, -5.684935815574287e-01, -1.024642564473141e-01, -1.021968996760106e-01, -1.800982308824936e-01, -1.801946675524006e-01, -9.345730186475283e-02, -9.435924899880402e-02, -1.905423273102605e+00, -1.904685954351270e+00, -1.143711756471306e-01, -1.104961461358959e-01, -1.143711756471306e-01, -1.104961461358959e-01, -6.926347587244070e-03, -7.037454463183104e-03, -7.954251597395526e-03, -8.019401081362079e-03, -5.666327553019360e-03, -5.563489232874723e-03, -5.818150615901220e-02, -5.857523674626804e-02, -6.856365591998565e-03, -6.677823831912164e-03, -6.856365591998580e-03, -6.677823831912164e-03, -5.865328527377839e-01, -5.883298749468845e-01, -5.788542069351991e-01, -5.806479765198190e-01, -5.814224089132453e-01, -5.832315180653357e-01, -5.836588119387370e-01, -5.854431290329641e-01, -5.825283920711891e-01, -5.843249386579629e-01, -5.825283920711891e-01, -5.843249386579629e-01, -5.719300025471606e-01, -5.733768953875199e-01, -4.728883386622120e-01, -4.741837508929522e-01, -4.974656117530054e-01, -4.990223835841571e-01, -5.246875025303670e-01, -5.260594731540295e-01, -5.105322942336400e-01, -5.119005126705692e-01, -5.105322942336400e-01, -5.119005126705692e-01, -6.605548314622203e-01, -6.616385497345855e-01, -2.208128795999457e-01, -2.209471076556445e-01, -2.570941562436263e-01, -2.574752419227286e-01, -3.320706764046035e-01, -3.330656836457089e-01, -2.905484287368652e-01, -2.903616178254750e-01, -2.905484287368652e-01, -2.903616178254750e-01, -4.347733366344955e-01, -4.365710145948828e-01, -3.360996907980785e-02, -3.361451779100132e-02, -4.577031882697438e-02, -4.614107191669965e-02, -3.187538522869753e-01, -3.214912376185605e-01, -7.579434812848511e-02, -7.453614366429688e-02, -7.579434812848505e-02, -7.453614366429689e-02, -1.389117873726101e-02, -1.375895151931938e-02, -3.638171494966159e-03, -3.348745408493478e-03, -5.406343994546237e-03, -5.352984002406528e-03, -7.012250015970005e-02, -7.050810510855282e-02, -6.080419074275503e-03, -6.390478394291407e-03, -6.080419074275509e-03, -6.390478394291395e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camh_b3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.167646942373326e-08, 1.185558425401183e-11, -1.167653550353776e-08, -1.167640450218644e-08, 1.185541524986055e-11, -1.167648783954517e-08, -1.167605068015921e-08, 1.185461176244829e-11, -1.167602442463224e-08, -1.167679346092433e-08, 1.185712748825859e-11, -1.167696328385391e-08, -1.167644119839773e-08, 1.185581677785285e-11, -1.167647938575566e-08, -1.167644119839773e-08, 1.185581677785285e-11, -1.167647938575566e-08, -1.478757344122943e-05, 1.541225587214213e-07, -1.479316486289463e-05, -1.478800295201642e-05, 1.541207867069750e-07, -1.479400831470642e-05, -1.480251272152788e-05, 1.540597121148743e-07, -1.480609450638514e-05, -1.476783746053748e-05, 1.540100170374724e-07, -1.477241169711750e-05, -1.479456780512960e-05, 1.541018002171290e-07, -1.478488084992353e-05, -1.479456780512960e-05, 1.541018002171290e-07, -1.478488084992353e-05, -7.362902850906129e-03, 9.270722799357577e-04, -7.428158799866022e-03, -7.353894662733678e-03, 9.324368204854546e-04, -7.433889917878487e-03, -7.355010072691591e-03, 1.069807695322527e-03, -7.241140816476779e-03, -7.097601726200077e-03, 1.024962868820697e-03, -7.135924210314218e-03, -7.706641758214478e-03, 1.115015704194649e-03, -6.500708819011661e-03, -7.706641758214478e-03, 1.115015704194649e-03, -6.500708819011661e-03, -4.807325075982197e-01, 4.870430005817489e-01, -4.962166745187612e-01, -4.796028519174014e-01, 4.601020753985704e-01, -4.931768778752965e-01, -4.353951207015838e-03, 4.311409659161154e-04, -4.274303060571716e-03, -7.311832190455071e-01, 1.357480112752327e+00, -7.375782114419511e-01, -7.578706057597028e-01, 1.929431429665579e+00, -2.203892470624824e+00, -7.578706057597021e-01, 1.929431429665580e+00, -2.203892470624829e+00, -1.111967395333009e+04, 9.006507517295055e-08, -9.314774975873077e+03, -9.867992937562056e+03, 3.695673560289628e-07, -8.088713959608628e+03, -5.550754393158523e+01, 1.489288214502471e+01, -4.763084301084395e+01, -4.687873244983530e+04, 3.350885389426989e-17, -4.882644273350673e+04, -1.542657752318417e+04, 8.673770695270562e-13, -1.014033898324348e+05, -1.542657752318419e+04, 8.673770695270562e-13, -1.014033898324347e+05, -3.436203642225071e-06, 1.809299517292379e-08, -3.439114210989596e-06, -3.438772914442045e-06, 1.807545599629114e-08, -3.441596232156753e-06, -3.436311229821296e-06, 1.809212347410638e-08, -3.439172116506865e-06, -3.438513234419885e-06, 1.807663525628042e-08, -3.441430085226715e-06, -3.437547122792056e-06, 1.808413833346515e-08, -3.440364276495788e-06, -3.437547122792056e-06, 1.808413833346515e-08, -3.440364276495788e-06, -1.070841190387810e-04, 3.324691278596461e-06, -1.070991969342587e-04, -1.049835297754539e-04, 3.198712461362903e-06, -1.050551420740972e-04, -1.071182849456813e-04, 3.420793545345939e-06, -1.072545004141677e-04, -1.053011658101421e-04, 3.305373228471352e-06, -1.053933020233936e-04, -1.059246580465647e-04, 3.212781934568574e-06, -1.058745409826062e-04, -1.059246580465647e-04, 3.212781934568574e-06, -1.058745409826062e-04, -1.490400020051779e-02, 1.825453754003035e-03, -1.502364872421144e-02, -1.395915074131607e-02, 1.201192443406202e-03, -1.399102702447364e-02, -2.002036549140135e-02, 2.748455987594796e-03, -1.866037151151247e-02, -2.230436909107221e-02, 2.257366444272562e-03, -2.018484735375132e-02, -1.364873268928015e-02, 1.758833807333089e-03, -1.556314854118466e-02, -1.364873268928015e-02, 1.758833807333089e-03, -1.556314854118465e-02, -1.394373778078454e+00, 4.345108400965211e+00, -1.446976284012106e+00, -3.091264115281160e-01, 4.801730708975269e-01, -3.122810032622898e-01, -1.883731329888522e+00, 5.403210563745951e+00, -1.946937611195105e+00, -2.002480256308000e-04, 3.686127133635989e-06, -2.006034673823317e-04, -1.074633905589572e+00, 2.723523603638179e+00, -1.416668680424904e+00, -1.074633905589572e+00, 2.723523603638179e+00, -1.416668680424904e+00, -1.180146590054390e+05, 4.391412325733211e-24, -1.014441838605304e+05, -5.524074118696088e+04, 9.952946977518016e-18, -5.173268261770841e+04, -2.076887393897668e+05, 4.581716902253058e-25, -1.814401341164473e+05, -9.662714213652681e+00, 1.218782134268272e+01, -9.344507611976544e+00, -1.606921640033102e+05, 7.784361458058929e-20, -6.417006114166949e+04, -1.606921640033100e+05, 7.784361458058927e-20, -6.417006114166947e+04, -2.076151581514471e-02, 1.781738515145262e-03, -2.055522582254666e-02, -1.937163712467341e-02, 1.834071765417697e-03, -1.919372114859568e-02, -1.978571154954842e-02, 1.815455511527695e-03, -1.960207731202359e-02, -2.018529770089461e-02, 1.800280877020669e-03, -1.998718166761864e-02, -1.997875492111272e-02, 1.807857598825492e-03, -1.978796681322336e-02, -1.997875492111272e-02, 1.807857598825492e-03, -1.978796681322336e-02, -2.385343202121298e-02, 2.045475405717882e-03, -2.361990404724598e-02, -2.362958639381382e-02, 4.372269458584065e-03, -2.350239863417346e-02, -2.291582226196637e-02, 3.481409492639727e-03, -2.277707600973910e-02, -2.263952699941948e-02, 2.801304754186088e-03, -2.246214567913873e-02, -2.277197741076851e-02, 3.126795900343610e-03, -2.259258474413368e-02, -2.277197741076851e-02, 3.126795900343610e-03, -2.259258474413368e-02, -1.154747247072899e-02, 9.448281971276932e-04, -1.155321855317918e-02, -1.852593508685964e-01, 1.841168313207797e-01, -1.869434647738340e-01, -1.321403232662281e-01, 8.322264776862785e-02, -1.336403709410225e-01, -7.956075906830276e-02, 2.335777938713061e-02, -7.899758121919301e-02, -1.047212754347253e-01, 4.455605659310826e-02, -1.052486314478747e-01, -1.047212754347253e-01, 4.455605659310827e-02, -1.052486314478748e-01, -3.173088199545515e-02, 6.561578635696272e-03, -3.152757574572595e-02, -5.793734507542343e+01, 1.430892164753827e+01, -5.684267231890446e+01, -1.998608407466435e+01, 1.521830626896655e+01, -1.850214600153218e+01, -1.041044646907313e-01, 2.777420884472484e-02, -1.020480959756246e-01, -4.292952265573348e+00, 7.858164809404253e+00, -4.579375869614236e+00, -4.292952265573347e+00, 7.858164809404253e+00, -4.579375869614245e+00, -3.731316164621962e+03, 2.768157770177566e-04, -3.389687489338477e+03, -3.488861744995376e+06, 2.308592770889069e-85, -4.059728055963384e+06, -3.914855591374477e+05, 1.346473245321597e-36, -3.334370304587529e+05, -5.555974340767310e+00, 8.933405596013928e+00, -5.371884618195852e+00, -2.300565140247805e+05, 6.624839855865914e-22, -8.330882575639563e+04, -2.300565140247811e+05, 6.624839855865567e-22, -8.330882575639591e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
