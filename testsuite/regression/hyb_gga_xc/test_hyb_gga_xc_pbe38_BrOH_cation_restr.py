
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe38_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.314212332899591e+01, -1.314214131239432e+01, -1.314226225136025e+01, -1.314199385253851e+01, -1.314212865766746e+01, -1.314212865766746e+01, -2.212364013780952e+00, -2.212345414300962e+00, -2.211968989679824e+00, -2.213036324970159e+00, -2.212394068574579e+00, -2.212394068574579e+00, -4.633052556498623e-01, -4.630824402342297e-01, -4.589319090618273e-01, -4.621612028340672e-01, -4.611493311331512e-01, -4.611493311331512e-01, -1.408772758194111e-01, -1.421130291711788e-01, -5.331148090811368e-01, -1.159382647550158e-01, -1.254039578044767e-01, -1.254039578044767e-01, -6.304662479530183e-03, -6.635354820890616e-03, -3.606000730929135e-02, -3.642661705204018e-03, -4.576587686755848e-03, -4.576587686755848e-03, -3.205485628887082e+00, -3.205311091002325e+00, -3.205483301192172e+00, -3.205329110899383e+00, -3.205393814782671e+00, -3.205393814782671e+00, -1.342164607236827e+00, -1.348758780480980e+00, -1.342024534522068e+00, -1.347834517480187e+00, -1.345891634648335e+00, -1.345891634648335e+00, -4.017756426417185e-01, -4.327263616127679e-01, -3.746983987659696e-01, -3.871704442914984e-01, -4.072749327195540e-01, -4.072749327195540e-01, -8.738413859167651e-02, -1.477769267039325e-01, -8.158014486335227e-02, -1.205305167857325e+00, -9.811347776713548e-02, -9.811347776713548e-02, -2.810729443701762e-03, -3.560998561094815e-03, -2.722654787520065e-03, -5.688337208370293e-02, -3.279964521185642e-03, -3.279964521185642e-03, -4.047004781866479e-01, -4.012257837803044e-01, -4.023576737802897e-01, -4.033628641350577e-01, -4.028514417053889e-01, -4.028514417053889e-01, -3.953786020531381e-01, -3.462268169174862e-01, -3.577462295027931e-01, -3.707767337759578e-01, -3.638564212379960e-01, -3.638564212379960e-01, -4.515520405499983e-01, -1.781235772076665e-01, -2.040606079736808e-01, -2.520307137994421e-01, -2.257173449291752e-01, -2.257173449291752e-01, -3.208873850738810e-01, -3.458185685074613e-02, -4.659556602767349e-02, -2.422083541342848e-01, -7.024842558486248e-02, -7.024842558486251e-02, -8.893522978213008e-03, -9.520397261078263e-04, -1.998241418854805e-03, -6.651954535329832e-02, -3.035026738163163e-03, -3.035026738163163e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe38_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.584139290457279e+01, -1.584145631517922e+01, -1.584172034096946e+01, -1.584077729406276e+01, -1.584127397054644e+01, -1.584127397054644e+01, -2.632182992960088e+00, -2.632218140624263e+00, -2.633093298239108e+00, -2.632052994773049e+00, -2.632286125890972e+00, -2.632286125890972e+00, -5.533465666605165e-01, -5.522706531498699e-01, -5.260433790052740e-01, -5.305191151122036e-01, -5.300610450667290e-01, -5.300610450667290e-01, -1.543391011869363e-01, -1.569505514708708e-01, -6.397805681670279e-01, -1.236138767608166e-01, -1.337746081151455e-01, -1.337746081151455e-01, -8.395936231997313e-03, -8.834824711312667e-03, -4.662517483983031e-02, -4.854989528017753e-03, -6.097888347523043e-03, -6.097888347523040e-03, -4.004375629172931e+00, -4.006287354321297e+00, -4.004460619741677e+00, -4.006148326325921e+00, -4.005346126968933e+00, -4.005346126968933e+00, -1.439772002924564e+00, -1.451582517610031e+00, -1.428486401060414e+00, -1.438785005860811e+00, -1.451928859864114e+00, -1.451928859864114e+00, -5.129574701305790e-01, -5.674661275957866e-01, -4.761114537447388e-01, -5.073300959483978e-01, -5.227238198141881e-01, -5.227238198141881e-01, -1.000985521113078e-01, -1.551053205223983e-01, -9.466252793207444e-02, -1.576881847857801e+00, -1.071867102345603e-01, -1.071867102345603e-01, -3.746640892448013e-03, -4.746079826763856e-03, -3.628059084502394e-03, -6.990423318793765e-02, -4.370724696426140e-03, -4.370724696426143e-03, -5.289803484442647e-01, -5.261061398251137e-01, -5.273687399022031e-01, -5.282185901511320e-01, -5.278170431776443e-01, -5.278170431776443e-01, -5.154375136704893e-01, -4.234687807301802e-01, -4.532530458002854e-01, -4.819089621839989e-01, -4.676769012127333e-01, -4.676769012127333e-01, -5.920128139576735e-01, -1.885609543445153e-01, -2.253493566151021e-01, -3.107719284345987e-01, -2.641365576788440e-01, -2.641365576788440e-01, -3.935422476844114e-01, -4.488137486437174e-02, -5.915210944214780e-02, -3.086583289078692e-01, -8.224425849004938e-02, -8.224425849004939e-02, -1.183215467701723e-02, -1.269305035859973e-03, -2.663799322880822e-03, -7.885568572390203e-02, -4.044421610421577e-03, -4.044421610421575e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe38_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.214256443794966e-09, -4.214222226296830e-09, -4.214036077294303e-09, -4.214545855676461e-09, -4.214283580891945e-09, -4.214283580891945e-09, -4.867514987891232e-06, -4.867472025176251e-06, -4.866006965171792e-06, -4.865018839546050e-06, -4.867017634193417e-06, -4.867017634193417e-06, -1.997514439640793e-03, -2.013721517546232e-03, -2.370709025035080e-03, -2.299082223748412e-03, -2.310704722128989e-03, -2.310704722128989e-03, -2.345545321714782e-01, -2.248064521870764e-01, -1.148131564100239e-03, -4.119586072082560e-01, -3.516185853744068e-01, -3.516185853744071e-01, -1.518989966696211e+00, -1.604240145731219e+00, -8.711499732904218e-01, -1.382764711749498e+00, -1.755508423625480e+00, -1.755508423626881e+00, -1.014327526642506e-06, -1.012587977346636e-06, -1.014250192360401e-06, -1.012714840019840e-06, -1.013447381237096e-06, -1.013447381237096e-06, -3.972263580061771e-05, -3.885269685792506e-05, -3.999012204542276e-05, -3.922563089619748e-05, -3.909790796596640e-05, -3.909790796596640e-05, -1.635116948356654e-03, 1.319150637130045e-03, -2.361504552424921e-03, 1.597619739489015e-03, -1.292029353344596e-03, -1.292029353344596e-03, -5.490120165066342e-01, -1.858297438333707e-01, -6.113367569303295e-01, -1.432486988369472e-05, -6.052143376294068e-01, -6.052143376294068e-01, -1.822496217615644e+00, -1.627324968371310e+00, -1.021280391755518e+01, -9.412852498366358e-01, -4.753165489290174e+00, -4.753165489281241e+00, 3.928426596765709e-03, 2.196121556424966e-03, 2.744138744744206e-03, 3.245168299070246e-03, 2.988911100261641e-03, 2.988911100261641e-03, 5.154465990584360e-03, -5.209429358272068e-03, -2.965046994828309e-03, -3.421613801232858e-04, -1.717474126237595e-03, -1.717474126237595e-03, 8.648209246572983e-04, -9.941965687444643e-02, -5.753307966159719e-02, -1.563710668758798e-02, -3.327912566884596e-02, -3.327912566884594e-02, -6.757674955988049e-03, -7.974179614683898e-01, -7.809341082203664e-01, -9.494901655520485e-03, -9.919583944759629e-01, -9.919583944759667e-01, -1.222237601441578e+00, -7.993196031103483e+00, -3.866883300320016e+00, -1.016765065714722e+00, -6.003826836998925e+00, -6.003826837000774e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
