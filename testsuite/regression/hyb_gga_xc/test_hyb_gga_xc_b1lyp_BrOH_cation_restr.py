
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b1lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.585939265871654e+01, -1.585941285034187e+01, -1.585955449605168e+01, -1.585925301510059e+01, -1.585940360767052e+01, -1.585940360767052e+01, -2.677378740916006e+00, -2.677350898775682e+00, -2.676771602810491e+00, -2.678277483846789e+00, -2.677408661718562e+00, -2.677408661718562e+00, -5.621056086656666e-01, -5.619902256618816e-01, -5.601520945397558e-01, -5.640241756675910e-01, -5.626989838150438e-01, -5.626989838150438e-01, -1.680220115801867e-01, -1.696227282129187e-01, -6.465340587407483e-01, -1.366307644863815e-01, -1.487070128280322e-01, -1.487070128280322e-01, -4.973155798878352e-02, -4.977554081545734e-02, -8.486260203319333e-02, -4.531773400495371e-02, -4.515458731203811e-02, -4.515458731203809e-02, -3.856411906687383e+00, -3.855907667710099e+00, -3.856397013199373e+00, -3.855951752375647e+00, -3.856151794146006e+00, -3.856151794146006e+00, -1.639540631031741e+00, -1.647311804815465e+00, -1.639862979707153e+00, -1.646726863235996e+00, -1.643674506495436e+00, -1.643674506495436e+00, -4.761644329219857e-01, -4.961373246126778e-01, -4.448743692562818e-01, -4.447278777942064e-01, -4.811518422364175e-01, -4.811518422364175e-01, -1.062553779101135e-01, -1.734222946656192e-01, -1.017774996914604e-01, -1.420981544766160e+00, -1.172229521939249e-01, -1.172229521939249e-01, -4.085978884364059e-02, -4.365694205442266e-02, -2.861734065497070e-02, -8.826748555128706e-02, -3.461274666910256e-02, -3.461274666910257e-02, -4.556974130551340e-01, -4.579802409561767e-01, -4.572250356340357e-01, -4.565594733317898e-01, -4.568962084588043e-01, -4.568962084588043e-01, -4.425667416845844e-01, -4.166860861439459e-01, -4.251292130542217e-01, -4.325158665159988e-01, -4.287290413103643e-01, -4.287290413103643e-01, -5.196657994667291e-01, -2.120235559087404e-01, -2.455234739357658e-01, -3.009702404413340e-01, -2.717246438691865e-01, -2.717246438691864e-01, -3.854895518701202e-01, -8.546087573621100e-02, -8.764758410492721e-02, -2.849675133134316e-01, -9.388251464364458e-02, -9.388251464364458e-02, -5.616795673897574e-02, -2.517460522160744e-02, -3.297056404644418e-02, -9.175794292808256e-02, -3.252574818179199e-02, -3.252574818179196e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b1lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.898098511583891e+01, -1.898105609553813e+01, -1.898135866474355e+01, -1.898030290543207e+01, -1.898085794436619e+01, -1.898085794436619e+01, -3.115078764155141e+00, -3.115106962442042e+00, -3.115834065671555e+00, -3.115149210152227e+00, -3.115186021875087e+00, -3.115186021875087e+00, -6.385013357975273e-01, -6.377214154795658e-01, -6.198062166276418e-01, -6.245991650915679e-01, -6.236350264079253e-01, -6.236350264079253e-01, -1.900436566474091e-01, -1.915769462462102e-01, -7.380550749447282e-01, -1.596533914551765e-01, -1.701067598917916e-01, -1.701067598917915e-01, -1.485697461123628e-02, -1.519078098929293e-02, -4.516396512301243e-02, -1.131608417898895e-02, -1.231405808383724e-02, -1.231405808383727e-02, -4.722887022885258e+00, -4.724752128315141e+00, -4.722971273389049e+00, -4.724617789728060e+00, -4.723832997752307e+00, -4.723832997752307e+00, -1.732047608868912e+00, -1.745211390895770e+00, -1.720790620008564e+00, -1.732344847610581e+00, -1.744855992369086e+00, -1.744855992369086e+00, -5.710529039582248e-01, -6.310564943093241e-01, -5.298126408358961e-01, -5.604143983575597e-01, -5.809580112012649e-01, -5.809580112012649e-01, -1.256764330869077e-01, -2.042231545576642e-01, -1.162669395562798e-01, -1.810955701716739e+00, -1.353951110721539e-01, -1.353951110721539e-01, -9.653538114506999e-03, -1.096052824420444e-02, -7.617352426475016e-03, -7.404218781553294e-02, -9.197415144178222e-03, -9.197415144178253e-03, -5.916388090790445e-01, -5.835322239597647e-01, -5.862453417633996e-01, -5.885929316895280e-01, -5.874056947913001e-01, -5.874056947913001e-01, -5.781905171311279e-01, -4.800329948689718e-01, -5.042539212619046e-01, -5.310744097276321e-01, -5.170689634649104e-01, -5.170689634649104e-01, -6.590203644869173e-01, -2.422186590483958e-01, -2.758617968225158e-01, -3.477225567130858e-01, -3.072376891019383e-01, -3.072376891019383e-01, -4.446384097526395e-01, -4.383103266357748e-02, -5.913900351941628e-02, -3.367711576272622e-01, -9.378658258155793e-02, -9.378658258155788e-02, -1.847565985111966e-02, -4.938608084534939e-03, -7.463401860092465e-03, -8.812635655517811e-02, -8.592101575856869e-03, -8.592101575856824e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b1lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.428189374863531e-09, -5.428163169612615e-09, -5.427972991398203e-09, -5.428364406676306e-09, -5.428169779602935e-09, -5.428169779602935e-09, -7.004130415291953e-06, -7.004434047570720e-06, -7.010780202212149e-06, -6.994483170949723e-06, -7.003824217163619e-06, -7.003824217163619e-06, -3.708226910384121e-03, -3.706627989083633e-03, -3.633395972089365e-03, -3.542741936431557e-03, -3.578809453237571e-03, -3.578809453237571e-03, -2.321705932893621e-01, -2.359203114273388e-01, -2.149253182857571e-03, -2.252781317953507e-01, -2.619476371966472e-01, -2.619476371966470e-01, -7.601749810220073e+03, -6.666082496552714e+03, -3.488075191738139e+01, -3.587500489253006e+04, -1.988176532757483e+04, -1.988176532757484e+04, -1.617573211070453e-06, -1.618766027136669e-06, -1.617612301314660e-06, -1.618665450295292e-06, -1.618185666043901e-06, -1.618185666043901e-06, -5.120703450284795e-05, -5.021604343545770e-05, -5.123794365616692e-05, -5.035916765145522e-05, -5.064487620361635e-05, -5.064487620361635e-05, -7.682831679912435e-03, -7.215059219149866e-03, -9.952389842838326e-03, -1.103982619471742e-02, -7.447132040351629e-03, -7.447132040351629e-03, -5.709967628612844e-02, -1.081208215416518e-01, -1.740719512106210e-01, -9.673371101384968e-05, -3.102044523811269e-01, -3.102044523811269e-01, -8.182775216358498e+04, -4.008170407403579e+04, -1.452456588000590e+05, -4.271112555648994e+00, -6.857351025557102e+04, -6.857351025557097e+04, -1.080034273450926e-02, -1.004218850207719e-02, -1.026903414519748e-02, -1.048523163428245e-02, -1.037345576754189e-02, -1.037345576754189e-02, -1.246915894935952e-02, -1.210538430655345e-02, -1.182423139922143e-02, -1.174139721926206e-02, -1.177673531993532e-02, -1.177673531993532e-02, -5.933680286336718e-03, -8.195405855530918e-02, -6.569348072608616e-02, -4.198437716621112e-02, -5.452898703102978e-02, -5.452898703102980e-02, -1.635878512252601e-02, -3.964718741489988e+01, -1.081433729992908e+01, -5.575144442193294e-02, -1.503263999509377e+00, -1.503263999509380e+00, -2.664380832637451e+03, -2.815763471064312e+06, -2.700687371600504e+05, -2.010156166398174e+00, -9.154294626395716e+04, -9.154294626395746e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
