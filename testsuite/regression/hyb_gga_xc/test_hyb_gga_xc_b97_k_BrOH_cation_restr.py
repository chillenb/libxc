
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_k_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.189930967282327e+01, -1.189930008762974e+01, -1.189933584739133e+01, -1.189947683836464e+01, -1.189939181792787e+01, -1.189939181792787e+01, -2.067596878546956e+00, -2.067548925878677e+00, -2.066489911968565e+00, -2.068715354910154e+00, -2.067588158038549e+00, -2.067588158038549e+00, -4.433631326812364e-01, -4.434741764846791e-01, -4.472857506619933e-01, -4.501753921159825e-01, -4.489529896013505e-01, -4.489529896013505e-01, -1.330216150068368e-01, -1.343857761128890e-01, -5.082198905352281e-01, -1.035656928009125e-01, -1.157255604545073e-01, -1.157255604545073e-01, -4.963936957388945e-03, -5.215455577683582e-03, -2.623871152442215e-02, -2.910668098658620e-03, -3.637557093486128e-03, -3.637557093486128e-03, -2.867854227562921e+00, -2.866432820424564e+00, -2.867799870993110e+00, -2.866544876845318e+00, -2.867127607901488e+00, -2.867127607901488e+00, -1.337135950694380e+00, -1.341823171161992e+00, -1.341213623766268e+00, -1.345450583067448e+00, -1.337638166871721e+00, -1.337638166871721e+00, -3.700756742569664e-01, -3.860924497743027e-01, -3.466169119499676e-01, -3.479398269758523e-01, -3.735887214853603e-01, -3.735887214853603e-01, -6.978086555980034e-02, -1.364487318535477e-01, -6.423437495236768e-02, -1.053619924410905e+00, -8.386780260524743e-02, -8.386780260524743e-02, -2.256956023040269e-03, -2.846826859883160e-03, -2.187814738914891e-03, -4.249404246990030e-02, -2.626860393570356e-03, -2.626860393570354e-03, -3.525540408751585e-01, -3.582327620737032e-01, -3.574642046349105e-01, -3.561055710155860e-01, -3.568986010055116e-01, -3.568986010055116e-01, -3.374666317692001e-01, -3.278335083777955e-01, -3.317497828031031e-01, -3.370704770809123e-01, -3.339298984470671e-01, -3.339298984470671e-01, -4.032571384107868e-01, -1.698363508987166e-01, -1.971225065746996e-01, -2.374279887267229e-01, -2.165092912452164e-01, -2.165092912452163e-01, -3.034437040329173e-01, -2.514177851553301e-02, -3.391475359071693e-02, -2.240513597003206e-01, -5.517768282124662e-02, -5.517768282124660e-02, -6.911766767498211e-03, -7.724620623665501e-04, -1.612258730393692e-03, -5.155453582536484e-02, -2.434226647366803e-03, -2.434226647366802e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_k_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.201557331362588e+01, -1.201563442255130e+01, -1.201587086648803e+01, -1.201496246516226e+01, -1.201544343545885e+01, -1.201544343545885e+01, -2.058739453122485e+00, -2.058773006982907e+00, -2.059598599035599e+00, -2.058530213310136e+00, -2.058825796069130e+00, -2.058825796069130e+00, -4.603257647108969e-01, -4.596314432600635e-01, -4.474942338950855e-01, -4.505844466934804e-01, -4.498083780990974e-01, -4.498083780990974e-01, -1.528035796430585e-01, -1.528041159407119e-01, -5.283189421284079e-01, -1.390400982847645e-01, -1.439623082258012e-01, -1.439623082258011e-01, -6.564829943621555e-03, -6.895754791218141e-03, -3.571930063394328e-02, -3.860276669861951e-03, -4.818968126332797e-03, -4.818968126332772e-03, -3.155178165918824e+00, -3.157519698124648e+00, -3.155279451342335e+00, -3.157346608427789e+00, -3.156368112045635e+00, -3.156368112045635e+00, -1.216452286338645e+00, -1.220973820151215e+00, -1.219747991909227e+00, -1.223275305560784e+00, -1.217895122977380e+00, -1.217895122977380e+00, -4.342038456918526e-01, -4.848792426641184e-01, -4.023271035683844e-01, -4.402351878326028e-01, -4.442668648651815e-01, -4.442668648651815e-01, -1.042453147887220e-01, -1.739332430620043e-01, -9.594886217493996e-02, -1.289996865506386e+00, -1.193326849800430e-01, -1.193326849800430e-01, -2.996764719778735e-03, -3.776050472264468e-03, -2.905572180774104e-03, -6.151468572391154e-02, -3.485846484567964e-03, -3.485846484567969e-03, -4.309726880784394e-01, -4.505780167202034e-01, -4.460700104121124e-01, -4.401871721520789e-01, -4.433740471171029e-01, -4.433740471171029e-01, -4.144292849232838e-01, -3.549681720277248e-01, -3.827112800825477e-01, -4.166121782733112e-01, -3.992613311343761e-01, -3.992613311343761e-01, -5.061911229416014e-01, -1.980176306967243e-01, -2.134812081713541e-01, -2.627216793245665e-01, -2.307237484434156e-01, -2.307237484434155e-01, -3.306413148385375e-01, -3.404729606547135e-02, -4.744765047917169e-02, -2.628389564193844e-01, -8.153139199839182e-02, -8.153139199839179e-02, -9.124310245997719e-03, -1.028822154850187e-03, -2.143444487829289e-03, -7.601617874988095e-02, -3.231326651549659e-03, -3.231326651549669e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_k_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.671757865715575e-09, -9.671721561375874e-09, -9.671414013260952e-09, -9.671957118314857e-09, -9.671693339578844e-09, -9.671693339578844e-09, -1.093560482372156e-05, -1.093611975607527e-05, -1.094697023705642e-05, -1.092007871817769e-05, -1.093520512764598e-05, -1.093520512764598e-05, -4.508548349179613e-03, -4.510716486834979e-03, -4.392294545570862e-03, -4.292496144367111e-03, -4.339000091683573e-03, -4.339000091683573e-03, -1.871709170903827e-01, -1.993313865780246e-01, -2.669262851524915e-03, 1.267973168674965e-02, -1.171335486977120e-01, -1.171335486977123e-01, 5.866114202059066e-01, 6.450426560535756e-01, 9.085142025432966e-01, 3.253675946327255e-01, 5.144227122800569e-01, 5.144227122849582e-01, -2.604017885447526e-06, -2.604989152119830e-06, -2.604042334446738e-06, -2.604900064522177e-06, -2.604521375750381e-06, -2.604521375750381e-06, -6.524719525745585e-05, -6.458540339870846e-05, -6.386332525877411e-05, -6.333548528732980e-05, -6.551186494059789e-05, -6.551186494059789e-05, -6.950459811570365e-03, -5.178263295652320e-03, -9.266680029269331e-03, -4.932586879612519e-03, -6.324699335842073e-03, -6.324699335842073e-03, 4.121013589580940e-01, -3.822139208546976e-02, 4.965194065754837e-01, -1.307904369751938e-04, 2.066724130808339e-01, 2.066724130808339e-01, 3.222464302601198e-01, 3.738338547372739e-01, 1.720199115248588e+00, 9.445973625924724e-01, 9.952163655557353e-01, 9.952163655482424e-01, -3.553804950367592e-02, -7.004790215524506e-03, -1.104027271201489e-02, -1.786394016117325e-02, -1.390189785790018e-02, -1.390189785790018e-02, -7.708371053505780e-02, -1.348191922917283e-02, -1.116637158088084e-02, -7.030673376385482e-03, -9.348387048177881e-03, -9.348387048177881e-03, -4.081255685747884e-03, -6.162782657519091e-02, -6.575857692486549e-02, -4.305650387058830e-02, -5.949348514374929e-02, -5.949348514374918e-02, -1.783980004025096e-02, 8.290152166199669e-01, 8.499705083608795e-01, -4.516881253061748e-02, 7.818434502350369e-01, 7.818434502350287e-01, 6.139361959357711e-01, 4.805103164654847e-02, 4.300189472687088e-01, 8.627921631995628e-01, 1.152348528228481e+00, 1.152348528261719e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
