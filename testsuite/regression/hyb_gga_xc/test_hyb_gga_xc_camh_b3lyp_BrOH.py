
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camh_b3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.707885590299735e+01, -1.707887499523785e+01, -1.707902296806174e+01, -1.707870907285086e+01, -1.707886544666786e+01, -1.707886544666786e+01, -2.833543850028145e+00, -2.833521468526533e+00, -2.833023481548600e+00, -2.834483579581784e+00, -2.833544429885083e+00, -2.833544429885083e+00, -5.482105305274627e-01, -5.480599385845440e-01, -5.450800543981654e-01, -5.489341895466158e-01, -5.481534769809864e-01, -5.481534769809864e-01, -1.411780012151755e-01, -1.427457138947306e-01, -6.480747396090074e-01, -1.046404900601300e-01, -1.416434164449012e-01, -1.416434164449012e-01, -3.425319513306967e-02, -3.472420855508781e-02, -5.846444270503089e-02, -3.001617986023930e-02, -3.438753205809123e-02, -3.438753205809123e-02, -4.109043631900784e+00, -4.108539584696623e+00, -4.108997299960404e+00, -4.108605290440161e+00, -4.108777742843173e+00, -4.108777742843173e+00, -1.705828872885986e+00, -1.714133063084120e+00, -1.706380213849052e+00, -1.712843510180802e+00, -1.710751840647503e+00, -1.710751840647503e+00, -4.545622260293644e-01, -4.779742886259518e-01, -4.313949109113279e-01, -4.373061566520032e-01, -4.702626447132104e-01, -4.702626447132104e-01, -8.016203407831612e-02, -1.460744529310580e-01, -7.951375076922633e-02, -1.478249084820384e+00, -9.035897655844943e-02, -9.035897655844943e-02, -2.943340958065460e-02, -3.035889612435888e-02, -2.321829395889195e-02, -6.236493229869898e-02, -2.757698423194515e-02, -2.757698423194516e-02, -4.483079010829828e-01, -4.498903058786718e-01, -4.493631405331968e-01, -4.489246216825994e-01, -4.491468408764029e-01, -4.491468408764029e-01, -4.327283731802276e-01, -4.011777463405637e-01, -4.114190224777325e-01, -4.200899033708527e-01, -4.156665054750061e-01, -4.156665054750061e-01, -5.026450472091463e-01, -1.854548887124222e-01, -2.195707604984992e-01, -2.747149853754178e-01, -2.457614442560096e-01, -2.457614442560095e-01, -3.606693172782746e-01, -5.885513031062358e-02, -6.117888307092210e-02, -2.539174053592004e-01, -6.988850841035116e-02, -6.988850841035114e-02, -3.776624986094790e-02, -2.100360294633016e-02, -2.436264692891811e-02, -6.787797898736159e-02, -2.468996715899839e-02, -2.468996715899839e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camh_b3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.046246992859550e+01, -2.046253655236617e+01, -2.046284565166090e+01, -2.046175443621379e+01, -2.046250496442914e+01, -2.046250496442914e+01, -3.319968946306993e+00, -3.319993920020091e+00, -3.320816335404400e+00, -3.320098037410726e+00, -3.319995825712855e+00, -3.319995825712855e+00, -6.395649289724811e-01, -6.388384096157499e-01, -6.210207109469019e-01, -6.258190320620352e-01, -6.392999941898667e-01, -6.392999941898667e-01, -1.731194704370308e-01, -1.748879429557114e-01, -7.691070466570389e-01, -1.332493523564646e-01, -1.736346626055642e-01, -1.736346626055642e-01, -1.423793351843694e-02, -1.466997042766173e-02, -4.183080806597696e-02, -9.379866942149210e-03, -1.452557251557380e-02, -1.452557251557380e-02, -5.053471986905221e+00, -5.055396992089679e+00, -5.053669261023670e+00, -5.055166039722024e+00, -5.054458187508473e+00, -5.054458187508473e+00, -1.825946281638244e+00, -1.839660991329552e+00, -1.819356776876031e+00, -1.830020585035288e+00, -1.843904303857673e+00, -1.843904303857673e+00, -5.632220362803818e-01, -6.242914306883734e-01, -5.336555525165235e-01, -5.651543384827135e-01, -5.863645492961610e-01, -5.863645492961610e-01, -1.046825940305697e-01, -1.859003761301265e-01, -1.013407979625449e-01, -1.902923349952664e+00, -1.153886098795989e-01, -1.153886098795989e-01, -9.133353340608880e-03, -9.861357222333465e-03, -7.498632245801782e-03, -6.082793016191848e-02, -8.981901454170443e-03, -8.981901454170436e-03, -5.974274213044054e-01, -5.900839813388148e-01, -5.926000502010105e-01, -5.946268964335913e-01, -5.936032777051455e-01, -5.936032777051455e-01, -5.786306639765610e-01, -4.839746835229750e-01, -5.083022452440651e-01, -5.330115930025722e-01, -5.201905814890621e-01, -5.201905814890622e-01, -6.543677153067482e-01, -2.285163517020412e-01, -2.655158062174579e-01, -3.355182168176719e-01, -2.971595625290181e-01, -2.971595625290179e-01, -4.359612890761156e-01, -3.902898890823463e-02, -5.478586222032062e-02, -3.165097753235135e-01, -8.046299111903016e-02, -8.046299111903012e-02, -1.615392760875069e-02, -4.723966735026454e-03, -6.580930242761657e-03, -7.487008527857641e-02, -7.864309756471330e-03, -7.864309756471328e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camh_b3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.835811943344021e-09, -5.835787485490867e-09, -5.835590341505978e-09, -5.835992618336514e-09, -5.835799780970751e-09, -5.835799780970751e-09, -7.357631681715537e-06, -7.357877805642301e-06, -7.363451945743755e-06, -7.347710540085954e-06, -7.357634704734114e-06, -7.357634704734114e-06, -3.441260208027799e-03, -3.438546417544828e-03, -3.332262479584277e-03, -3.262687448609186e-03, -3.440346299969053e-03, -3.440346299969053e-03, -1.520103860702917e-01, -1.554944567373578e-01, -1.991411136234211e-03, -8.173232800947672e-02, -1.532438681014842e-01, -1.532438681014842e-01, -1.399670268977546e+03, -1.227668365827164e+03, -1.046058337656278e+01, -1.037059430957488e+04, -1.278798029762193e+03, -1.278798029762193e+03, -1.717038595436371e-06, -1.718269350004237e-06, -1.717154645008008e-06, -1.718111727303069e-06, -1.717682631724436e-06, -1.717682631724436e-06, -5.276497660457093e-05, -5.179130815285166e-05, -5.270720841977568e-05, -5.194776977038384e-05, -5.217958261403464e-05, -5.217958261403464e-05, -7.341406800343444e-03, -7.030169967646035e-03, -8.721649983110870e-03, -9.313847804353242e-03, -6.633871700537629e-03, -6.633871700537629e-03, 1.808444053485528e-01, -5.787151683984778e-02, 9.906576481443909e-02, -9.978429808662512e-05, -2.715497261289461e-02, -2.715497261289461e-02, -1.169178055354498e+04, -7.973973795214056e+03, -2.455182511736950e+04, -1.661517040310500e+00, -1.162788649504614e+04, -1.162788649504614e+04, -9.458359280103959e-03, -8.813606062175124e-03, -9.010417860993476e-03, -9.185183668396293e-03, -9.094958528785922e-03, -9.094958528785922e-03, -1.088262073265312e-02, -1.032658384293099e-02, -1.017808383337676e-02, -1.017549087661035e-02, -1.017344965564703e-02, -1.017344965564703e-02, -5.827549754974662e-03, -5.347885273437172e-02, -4.710462107066693e-02, -3.381910343844539e-02, -4.132501289860159e-02, -4.132501289860161e-02, -1.448555453295148e-02, -1.357126108677210e+01, -2.695804318956266e+00, -4.771464006596435e-02, -2.727150371673012e-01, -2.727150371673034e-01, -8.205405675253550e+02, -3.873591796710405e+05, -5.833976977442703e+04, -6.715885560983653e-01, -2.064068307148946e+04, -2.064068307148954e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
