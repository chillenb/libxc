
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_apf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.620239540645861e+01, -1.620241801595941e+01, -1.620256837119443e+01, -1.620223096286188e+01, -1.620240067199500e+01, -1.620240067199500e+01, -2.723894467159108e+00, -2.723871094017228e+00, -2.723396646205678e+00, -2.724730638683163e+00, -2.723931216556712e+00, -2.723931216556712e+00, -5.675749440356324e-01, -5.673519867508784e-01, -5.633136655244136e-01, -5.672408925152823e-01, -5.673539752828418e-01, -5.673539752828418e-01, -1.742656582499005e-01, -1.755892070926101e-01, -6.536104918572399e-01, -1.464646268536895e-01, -1.667592238858153e-01, -1.667592238858152e-01, -2.415963023669459e-02, -2.441690562710991e-02, -6.143296776173750e-02, -2.050613509030139e-02, -2.182861014850720e-02, -2.182861014850719e-02, -3.946624038375762e+00, -3.946358126412990e+00, -3.946619099279653e+00, -3.946384216284673e+00, -3.946485091043877e+00, -3.946485091043877e+00, -1.651310296019298e+00, -1.659460998689301e+00, -1.651052011853064e+00, -1.658235364057923e+00, -1.655971900299419e+00, -1.655971900299419e+00, -4.885749295884776e-01, -5.215472980510829e-01, -4.559808327231301e-01, -4.667708301842386e-01, -4.952603809440259e-01, -4.952603809440258e-01, -1.165468876657442e-01, -1.847351796230230e-01, -1.101128690545031e-01, -1.472120471688172e+00, -1.262808353642009e-01, -1.262808353642009e-01, -1.815498544691528e-02, -1.979534036050489e-02, -1.326251691868991e-02, -8.248375339772218e-02, -1.622776781904643e-02, -1.622776781904644e-02, -4.852517075522995e-01, -4.828069864155025e-01, -4.835981148114978e-01, -4.843045764425893e-01, -4.839444023254976e-01, -4.839444023254976e-01, -4.732703544937686e-01, -4.228834483531564e-01, -4.352301844242915e-01, -4.486908188474131e-01, -4.415658079903131e-01, -4.415658079903131e-01, -5.449201784531564e-01, -2.206083345275442e-01, -2.511510257059978e-01, -3.072140309487675e-01, -2.764638585104069e-01, -2.764638585104069e-01, -3.917157280281095e-01, -6.030540711621291e-02, -7.312436129371784e-02, -2.937874205350127e-01, -9.556947139100090e-02, -9.556947139100092e-02, -2.853224705340624e-02, -1.062342640476447e-02, -1.446019418411516e-02, -9.165371998657115e-02, -1.519980184547019e-02, -1.519980184547018e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_apf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.956975716878024e+01, -1.956973419553706e+01, -1.956984436482307e+01, -1.956979786460624e+01, -1.957010437471031e+01, -1.957017398765110e+01, -1.956911574376334e+01, -1.956891877581385e+01, -1.956980634257501e+01, -1.956940880928926e+01, -1.956980634257501e+01, -1.956940880928926e+01, -3.236042336929487e+00, -3.236165459575544e+00, -3.236077611205116e+00, -3.236205370724722e+00, -3.236977676457465e+00, -3.237198377096722e+00, -3.235927372177910e+00, -3.236150019693538e+00, -3.235483963490136e+00, -3.236964820592278e+00, -3.235483963490136e+00, -3.236964820592278e+00, -6.663697078209180e-01, -6.696988156009973e-01, -6.648036458672305e-01, -6.688687244747885e-01, -6.400906239119226e-01, -6.351551636679764e-01, -6.422280738185778e-01, -6.438245808221622e-01, -6.674082617156042e-01, -6.201492149288549e-01, -6.674082617156042e-01, -6.201492149288549e-01, -1.803475360533829e-01, -1.837238108570982e-01, -1.832883570515126e-01, -1.873029425212485e-01, -7.604181114673378e-01, -7.867336521795892e-01, -1.405403158445183e-01, -1.417069118082130e-01, -1.682533972416685e-01, -1.263200054816635e-01, -1.682533972416684e-01, -1.263200054816634e-01, -1.160987125886775e-02, -1.212047509385598e-02, -1.200551492699387e-02, -1.260608263762083e-02, -5.036314823635343e-02, -5.247197814955706e-02, -7.991256698220438e-03, -7.921576553716477e-03, -1.049655458519927e-02, -6.807918999681837e-03, -1.049655458519926e-02, -6.807918999681833e-03, -4.916466072485717e+00, -4.915307793927693e+00, -4.918664864700456e+00, -4.917438265461112e+00, -4.916585381176565e+00, -4.915382174135435e+00, -4.918476593352711e+00, -4.917312919417977e+00, -4.917591899607591e+00, -4.916378954079875e+00, -4.917591899607591e+00, -4.916378954079875e+00, -1.775701869056024e+00, -1.775616613776332e+00, -1.790333986601928e+00, -1.789858659143555e+00, -1.760289137193294e+00, -1.763938589287305e+00, -1.772848102919228e+00, -1.776659658737773e+00, -1.795056757151753e+00, -1.785631862960694e+00, -1.795056757151753e+00, -1.785631862960694e+00, -6.138077735495782e-01, -6.127309968477835e-01, -6.790653221361016e-01, -6.795646684136231e-01, -5.605901427085276e-01, -5.764637570747592e-01, -5.990880465546770e-01, -6.121245205015697e-01, -6.361234605823061e-01, -6.129487334956405e-01, -6.361234605823062e-01, -6.129487334956406e-01, -1.088072623620506e-01, -1.091645142575549e-01, -1.799506202638906e-01, -1.804378302549496e-01, -1.010004004298056e-01, -1.041797362299182e-01, -1.915444749277133e+00, -1.914752670395729e+00, -1.196683133613902e-01, -1.198801185959120e-01, -1.196683133613902e-01, -1.198801185959120e-01, -6.391141504817918e-03, -6.619547899217402e-03, -7.678828202284342e-03, -7.797764389211621e-03, -5.532215332959266e-03, -5.705556928980384e-03, -7.499100060770381e-02, -7.547524566612197e-02, -5.969504005736607e-03, -7.357500287928424e-03, -5.969504005736617e-03, -7.357500287928426e-03, -6.330789586242762e-01, -6.348523381984319e-01, -6.281327685935261e-01, -6.299697886062734e-01, -6.300703060719293e-01, -6.319044002549641e-01, -6.315392013697356e-01, -6.333186877312349e-01, -6.308246333819335e-01, -6.326307743149751e-01, -6.308246333819335e-01, -6.326307743149751e-01, -6.174324263828717e-01, -6.188302367754777e-01, -5.062901924117541e-01, -5.080527909097794e-01, -5.400534250205236e-01, -5.420303272465515e-01, -5.737642490244340e-01, -5.752567696446304e-01, -5.569271237204314e-01, -5.584655231863718e-01, -5.569271237204314e-01, -5.584655231863718e-01, -7.084358867081700e-01, -7.097032714098765e-01, -2.228358481641722e-01, -2.235422699010934e-01, -2.683095521611228e-01, -2.699159198781055e-01, -3.687543360588511e-01, -3.701626658483381e-01, -3.151608253085451e-01, -3.151253867714395e-01, -3.151608253085451e-01, -3.151253867714394e-01, -4.691710508721796e-01, -4.717769308291176e-01, -4.966967963575230e-02, -4.992606519983745e-02, -6.343679752988957e-02, -6.490953089127890e-02, -3.632586683594239e-01, -3.670341186338659e-01, -8.831955161902016e-02, -8.979603114343347e-02, -8.831955161902018e-02, -8.979603114343349e-02, -1.553887926386233e-02, -1.592917627401154e-02, -2.953423932943874e-03, -2.785384928087799e-03, -4.790361255513574e-03, -4.943938275488541e-03, -8.468144828667620e-02, -8.563231228856433e-02, -5.451471392705974e-03, -6.885711471914671e-03, -5.451471392705975e-03, -6.885711471914659e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_apf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.036138358082270e-08, 3.352621608354709e-10, -1.036144272606118e-08, -1.036130618145968e-08, 3.352679726265756e-10, -1.036138566670661e-08, -1.036095486837263e-08, 3.352755880535173e-10, -1.036091448056522e-08, -1.036184197712381e-08, 3.351895137929691e-10, -1.036203248621317e-08, -1.036135714615143e-08, 3.352371990310259e-10, -1.036149860548019e-08, -1.036135714615143e-08, 3.352371990310259e-10, -1.036149860548019e-08, -1.313542481445320e-05, 1.898178008315625e-06, -1.314009611561165e-05, -1.313554790568878e-05, 1.898556818885651e-06, -1.314057680420585e-05, -1.314245976058924e-05, 1.907115959758084e-06, -1.314506701596235e-05, -1.312227995155096e-05, 1.890511486970950e-06, -1.312577868719185e-05, -1.314319542512998e-05, 1.898407581876483e-06, -1.313055925583782e-05, -1.314319542512998e-05, 1.898407581876483e-06, -1.313055925583782e-05, -7.300451315734905e-03, 3.215634302884270e-03, -7.306246665653221e-03, -7.316938430314939e-03, 3.192560372025499e-03, -7.324168295500220e-03, -7.672976546907866e-03, 2.610992454942639e-03, -7.653494752109543e-03, -7.442443000952856e-03, 2.550307953678269e-03, -7.452506389597734e-03, -7.564912285856623e-03, 2.587368725908347e-03, -7.192632236641270e-03, -7.564912285856623e-03, 2.587368725908347e-03, -7.192632236641270e-03, -9.001832564807241e-01, 2.930712638713725e-01, -8.195921672996884e-01, -8.859726586516560e-01, 3.083890037803578e-01, -7.920362648993803e-01, -4.294029079077339e-03, 1.733181355700447e-03, -3.945078400818310e-03, -1.584870286810438e+00, 2.178354716624193e-01, -1.519968064712971e+00, -8.074480718216526e-01, 1.809701268996737e-01, -3.279441630212109e+00, -8.074480718216520e-01, 1.809701268996740e-01, -3.279441630212112e+00, -6.583228985928461e+03, 7.857086585849937e-03, -5.514995871530248e+03, -5.842549549621894e+03, 9.244641776447871e-03, -4.789489407341832e+03, -3.916361631199956e+01, 4.858489187072110e-02, -3.389842709131187e+01, -2.774669074830386e+04, 2.783896607973911e-03, -2.889936976852373e+04, -9.132225060357758e+03, 4.088799752941849e-03, -6.002006447192882e+04, -9.132225060357767e+03, 4.088799752253143e-03, -6.002006447192880e+04, -2.883137370377420e-06, 4.918863838728366e-07, -2.885996429600396e-06, -2.882655252073291e-06, 4.951106384246667e-07, -2.885478192705996e-06, -2.883107993332736e-06, 4.920150414759318e-07, -2.885949766006060e-06, -2.882654901379412e-06, 4.948610922701205e-07, -2.885520745523562e-06, -2.882917829035436e-06, 4.935263238011029e-07, -2.885729571327335e-06, -2.882917829035436e-06, 4.935263238011029e-07, -2.885729571327335e-06, -1.024078388690363e-04, 1.129663134079964e-05, -1.024270267651393e-04, -1.002598635965964e-04, 1.124627140704033e-05, -1.003525780903132e-04, -1.027068996159528e-04, 1.079559932549451e-05, -1.027411425958837e-04, -1.008684531812832e-04, 1.075502227993151e-05, -1.008513576279750e-04, -1.009581979884324e-04, 1.151931074018688e-05, -1.012056385154493e-04, -1.009581979884324e-04, 1.151931074018688e-05, -1.012056385154493e-04, -1.256975355979723e-02, 1.050339915044895e-02, -1.276961192627598e-02, -8.446890690225653e-03, 1.342758311372740e-02, -8.453280084886617e-03, -1.854219857476633e-02, 1.367881421381214e-02, -1.555398771338676e-02, -1.547871789719615e-02, 2.048811523225388e-02, -1.226536479374313e-02, -1.037374102327187e-02, 1.049221939572367e-02, -1.376259967021285e-02, -1.037374102327188e-02, 1.049221939572367e-02, -1.376259967021285e-02, -3.174931758689044e+00, 1.222300511708841e-01, -3.145278945141818e+00, -6.465782431328106e-01, 1.099067765849814e-01, -6.380102370270333e-01, -4.120960603777202e+00, 1.237371961385206e-01, -3.655393627721606e+00, -1.315452144547561e-04, 1.068030796585331e-04, -1.318997078895011e-04, -2.565844981447611e+00, 2.328305229366377e-01, -2.621012626467847e+00, -2.565844981447611e+00, 2.328305229366377e-01, -2.621012626467847e+00, -6.984857837128830e+04, 2.712258963850904e-03, -6.004113401872963e+04, -3.269607575458556e+04, 3.422511833285094e-03, -3.061968244969259e+04, -1.229321412215454e+05, 3.406840034231115e-02, -1.073987019550562e+05, -1.120835424657315e+01, 1.198494124090286e-01, -1.087811689732881e+01, -9.511083405894339e+04, 1.304592162200262e-02, -3.798507222621657e+04, -9.511083405894329e+04, 1.304592162289927e-02, -3.798507222621656e+04, -1.066936609457542e-02, 2.281251424134761e-02, -1.035337048386531e-02, -1.168758182942440e-02, 1.947781034230476e-02, -1.138678614441969e-02, -1.134182205648778e-02, 2.056067484237031e-02, -1.103760629227612e-02, -1.104095870847811e-02, 2.153687524678105e-02, -1.072952724393621e-02, -1.119257435335715e-02, 2.104066826384718e-02, -1.088476247443236e-02, -1.119257435335715e-02, 2.104066826384718e-02, -1.088476247443236e-02, -1.153251155777728e-02, 2.714129256794789e-02, -1.120745102043914e-02, -2.403363925092382e-02, 1.427914929637985e-02, -2.362268732753151e-02, -2.076158784637262e-02, 1.639429817733626e-02, -2.037002529291646e-02, -1.738878410638428e-02, 1.937428886184862e-02, -1.704629183745994e-02, -1.914191949057284e-02, 1.778540799076090e-02, -1.877050764915666e-02, -1.914191949057284e-02, 1.778540799076090e-02, -1.877050764915666e-02, -7.159898112808318e-03, 1.064169812217925e-02, -7.120811774084487e-03, -3.327137872815847e-01, 8.102065442719199e-02, -3.277821010207430e-01, -2.029172613094815e-01, 7.308415486132544e-02, -1.982227330581620e-01, -8.832780849826279e-02, 6.276771391376143e-02, -8.615648017022819e-02, -1.355592319642783e-01, 7.136414160581317e-02, -1.364559662573384e-01, -1.355592319642784e-01, 7.136414160581320e-02, -1.364559662573385e-01, -3.291927026737077e-02, 2.052030317128740e-02, -3.207652929937463e-02, -4.003781338010710e+01, 3.988898051878269e-02, -3.932089858571455e+01, -1.815127271400358e+01, 6.157839730827052e-02, -1.680800798778422e+01, -1.062799894323706e-01, 9.865155731722147e-02, -9.888894778997136e-02, -6.844212289059832e+00, 2.099996635819704e-01, -6.621798582259352e+00, -6.844212289059830e+00, 2.099996635819711e-01, -6.621798582259354e+00, -2.210053091791139e+03, 9.818193999068810e-03, -2.007899363735112e+03, -2.064856498985611e+06, 3.702095822654575e-03, -2.402724623585281e+06, -2.317020975932359e+05, 4.638389771661687e-03, -1.973469977183984e+05, -7.912874898415174e+00, 1.925338697813210e-01, -7.566879615983913e+00, -1.361706383931027e+05, 1.664788848132718e-02, -4.931241118026362e+04, -1.361706383931031e+05, 1.664788848568221e-02, -4.931241118026379e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
