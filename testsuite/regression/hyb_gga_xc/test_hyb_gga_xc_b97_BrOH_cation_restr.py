
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.686206174322665e+01, -1.686208815593111e+01, -1.686225263027137e+01, -1.686185870060368e+01, -1.686205841699666e+01, -1.686205841699666e+01, -2.847175280329177e+00, -2.847151894332759e+00, -2.846680194532780e+00, -2.848030747397054e+00, -2.847214482709467e+00, -2.847214482709467e+00, -5.968002268909794e-01, -5.966640346050549e-01, -5.953056467287542e-01, -5.993172788552794e-01, -5.978816090272924e-01, -5.978816090272924e-01, -1.869888560688802e-01, -1.882341914870152e-01, -6.861400630954416e-01, -1.562338674757783e-01, -1.679612012466419e-01, -1.679612012466419e-01, -6.508154370011235e-03, -6.878701295178999e-03, -4.487304335867964e-02, -3.612393597937677e-03, -4.609621585732700e-03, -4.609621585732696e-03, -4.129665514996692e+00, -4.129527058277075e+00, -4.129666094292841e+00, -4.129543740118510e+00, -4.129591315827741e+00, -4.129591315827741e+00, -1.739668333136898e+00, -1.747528195452481e+00, -1.741032717999170e+00, -1.747907793478024e+00, -1.743422481198927e+00, -1.743422481198927e+00, -5.097318903210574e-01, -5.410723720208306e-01, -4.756765117920617e-01, -4.843178691120965e-01, -5.159558270130915e-01, -5.159558270130915e-01, -1.179350141965781e-01, -1.994446328399273e-01, -1.096982597905624e-01, -1.540376655530727e+00, -1.321272229391340e-01, -1.321272229391340e-01, -2.743969112520436e-03, -3.526326721007651e-03, -2.653612046223548e-03, -7.436716551807196e-02, -3.231700425677401e-03, -3.231700425677402e-03, -4.957219220560357e-01, -5.001629832130535e-01, -4.997174732649295e-01, -4.986733334086729e-01, -4.992988468269184e-01, -4.992988468269184e-01, -4.771103354039584e-01, -4.438534056051353e-01, -4.543466396285843e-01, -4.666390441703351e-01, -4.599754781810865e-01, -4.599754781810865e-01, -5.660120671452664e-01, -2.383596964365049e-01, -2.693250479420971e-01, -3.224442235158365e-01, -2.933119843887650e-01, -2.933119843887650e-01, -4.110746930687857e-01, -4.282013818882371e-02, -5.973164046539437e-02, -3.060714099497777e-01, -9.327895550473837e-02, -9.327895550473835e-02, -9.461771729144183e-03, -8.866191069541441e-04, -1.916348585830863e-03, -8.801283482029788e-02, -2.976474817744684e-03, -2.976474817744676e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.062248281885988e+01, -2.062256919033546e+01, -2.062292380602686e+01, -2.062163936017006e+01, -2.062231656714867e+01, -2.062231656714867e+01, -3.392915009262768e+00, -3.392967943371970e+00, -3.394272035399047e+00, -3.392630353022223e+00, -3.393057958700187e+00, -3.393057958700187e+00, -6.807565882168788e-01, -6.793252048563415e-01, -6.443436458385139e-01, -6.501231245006163e-01, -6.495911207882249e-01, -6.495911207882249e-01, -1.888243059306034e-01, -1.912390657412941e-01, -7.928792925220317e-01, -1.565434418550526e-01, -1.672966326247700e-01, -1.672966326247699e-01, -8.849091689500427e-03, -9.355761954689085e-03, -5.950080891063027e-02, -4.893220975931447e-03, -6.253910284792907e-03, -6.253910284792893e-03, -5.187602260977778e+00, -5.189863573344621e+00, -5.187703695214473e+00, -5.189700128672292e+00, -5.188750756253199e+00, -5.188750756253199e+00, -1.790878120309680e+00, -1.808304339505294e+00, -1.770467838758164e+00, -1.785790604440182e+00, -1.810479315755914e+00, -1.810479315755914e+00, -6.316117549274762e-01, -6.957476609768913e-01, -5.833793579325128e-01, -6.241988471224020e-01, -6.448297940205797e-01, -6.448297940205797e-01, -1.306170728794075e-01, -1.927003497240218e-01, -1.239552113533328e-01, -1.988119642547450e+00, -1.377100614534624e-01, -1.377100614534624e-01, -3.710256930661393e-03, -4.775837015389215e-03, -3.587069361207864e-03, -9.178271910106253e-02, -4.374046601278412e-03, -4.374046601278413e-03, -6.277886380853466e-01, -6.425261675780848e-01, -6.390613313530367e-01, -6.345757201294832e-01, -6.369963910904936e-01, -6.369963910904936e-01, -6.071643097881124e-01, -5.137252932241558e-01, -5.535110563460257e-01, -5.937400311279464e-01, -5.737452394574974e-01, -5.737452394574974e-01, -7.285548826917280e-01, -2.302211222365256e-01, -2.710900406304521e-01, -3.698940886621596e-01, -3.143509980064356e-01, -3.143509980064356e-01, -4.753406128085148e-01, -5.704969193983710e-02, -7.715304099026447e-02, -3.674896195678408e-01, -1.075966595597949e-01, -1.075966595597948e-01, -1.289119316809789e-02, -1.191651059346102e-03, -2.585568681510199e-03, -1.033233985940182e-01, -4.026467222526781e-03, -4.026467222526776e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.625556498723877e-09, -4.625499275800243e-09, -4.625238624149888e-09, -4.626090138620260e-09, -4.625644833002116e-09, -4.625644833002116e-09, -6.146656559312277e-06, -6.146485851885039e-06, -6.141937280837636e-06, -6.145256805633823e-06, -6.145871497353005e-06, -6.145871497353005e-06, -3.783648836239974e-03, -3.803589977701755e-03, -4.244446552720263e-03, -4.114293786883542e-03, -4.142877112391394e-03, -4.142877112391394e-03, -4.415491098898302e-01, -4.314580137074525e-01, -2.081439321517787e-03, -7.245171828051143e-01, -6.208669291424126e-01, -6.208669291424140e-01, -7.139973689796820e-01, -7.890644075221732e-01, -1.283341729189331e+00, -3.666262376894476e-01, -6.033485811058984e-01, -6.033485811051409e-01, -1.190006036013508e-06, -1.188422878873156e-06, -1.189933219948125e-06, -1.188535457143774e-06, -1.189202233680757e-06, -1.189202233680757e-06, -5.984392559598995e-05, -5.826639528601714e-05, -6.084815769782887e-05, -5.943702659445725e-05, -5.847941017013870e-05, -5.847941017013870e-05, -5.212746304662861e-03, -4.621797927675247e-03, -7.335800017677863e-03, -4.741779315095508e-03, -4.654154454004628e-03, -4.654154454004628e-03, -1.003869999532882e+00, -3.362996522932009e-01, -1.110341288461310e+00, -6.676990775058714e-05, -1.060097427693894e+00, -1.060097427693894e+00, -3.388020261000110e-01, -4.193481064332840e-01, -1.794834465259606e+00, -1.599639389111605e+00, -1.097855578380649e+00, -1.097855578376007e+00, -3.249366579847386e-02, -6.923954434861460e-03, -1.082878203160019e-02, -1.705091049619594e-02, -1.347228920476585e-02, -1.347228920476585e-02, -6.827968420988580e-02, -1.213772743794914e-02, -9.150196567271538e-03, -5.653778580808162e-03, -7.450721014910907e-03, -7.450721014910907e-03, -3.373900986349000e-03, -1.830342320960731e-01, -1.123381649930604e-01, -4.531681314176511e-02, -7.486241477595580e-02, -7.486241477595568e-02, -1.660959523827679e-02, -1.156456456257744e+00, -1.272163770311216e+00, -4.829216059062918e-02, -1.712317126971038e+00, -1.712317126971046e+00, -7.675934948701811e-01, 3.819215873224975e-01, -3.741002950719162e-01, -1.749127025492945e+00, -1.245067503465632e+00, -1.245067503473641e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
