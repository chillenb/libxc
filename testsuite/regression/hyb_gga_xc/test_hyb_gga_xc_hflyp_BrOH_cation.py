
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hflyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hflyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.381657870024739e-02, -6.381666962836496e-02, -6.381693391030710e-02, -6.381558389053500e-02, -6.381631116299831e-02, -6.381631116299831e-02, -5.728411148457779e-02, -5.728505276307545e-02, -5.730694082768961e-02, -5.726999615729805e-02, -5.728536257378227e-02, -5.728536257378227e-02, -3.618494808285723e-02, -3.606270875042167e-02, -3.268644990166203e-02, -3.297726967894627e-02, -3.177778219252216e-02, -3.177778219252216e-02, -3.795585446964125e-03, -4.900710953884054e-03, -3.927327586845051e-02, 8.849266313962614e-03, 9.043452133605424e-04, 9.043452133605750e-04, -1.036247531490698e-03, -1.086918205879514e-03, 4.793021134598017e-04, -6.085250506665801e-04, -4.008640738039181e-04, -4.008640738039182e-04, -6.140345732123226e-02, -6.142269120827901e-02, -6.140425825452001e-02, -6.142124094829051e-02, -6.141325718845547e-02, -6.141325718845547e-02, -4.602392042205467e-02, -4.636526031737114e-02, -4.533429182719492e-02, -4.564839976740510e-02, -4.652973024956160e-02, -4.652973024956160e-02, -3.814711418177977e-02, -4.256926433543651e-02, -3.625130318393632e-02, -4.011373878455827e-02, -3.877090137863269e-02, -3.877090137863269e-02, 1.992400616422843e-02, 6.974928936487967e-03, 1.898342053127685e-02, -5.656913174765064e-02, 1.213009367051936e-02, 1.213009367051936e-02, -4.695813042919790e-04, -5.951280978577183e-04, -4.532323493143084e-04, 1.041831524487101e-02, -4.413126928869480e-04, -4.413126928869480e-04, -4.204429870364629e-02, -4.125590860171018e-02, -4.153462341932177e-02, -4.176406873126346e-02, -4.164947758463473e-02, -4.164947758463473e-02, -4.178944808046537e-02, -3.165180072702422e-02, -3.508063294911379e-02, -3.807676926807218e-02, -3.662513746085055e-02, -3.662513746085055e-02, -4.321198512547766e-02, -1.200588445749410e-03, -1.059802530159352e-02, -2.512475505945990e-02, -1.845865285493937e-02, -1.845865285493939e-02, -3.015323970612497e-02, 5.483509543640349e-07, 7.099682092335712e-03, -2.686074919303999e-02, 1.187816755738350e-02, 1.187816755738349e-02, -1.457695803104601e-03, -1.605849920490159e-04, -3.330184438309624e-04, 1.147828271337085e-02, -4.260985894548013e-04, -4.260985894548010e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hflyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hflyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.207763366568304e-02, -7.207783072991913e-02, -7.207729580306881e-02, -7.207787724386931e-02, -7.207778902032237e-02, -7.207656192434315e-02, -7.207777466186688e-02, -7.208090149053648e-02, -7.207446485723715e-02, -7.208187781557564e-02, -7.207446485723715e-02, -7.208187781557564e-02, -7.140703386785524e-02, -7.137447079103561e-02, -7.140639176767906e-02, -7.137197372863960e-02, -7.137208715108183e-02, -7.133393016396743e-02, -7.143740067696790e-02, -7.139568204978486e-02, -7.146484641422390e-02, -7.131315937297678e-02, -7.146484641422390e-02, -7.131315937297678e-02, -6.458044282586942e-02, -6.245931955607510e-02, -6.498290137347186e-02, -6.236910751069982e-02, -6.601892997038869e-02, -7.012930424388873e-02, -6.860207534990963e-02, -6.726855168939468e-02, -5.074535817643087e-02, -9.129037013542300e-02, -5.074535817643087e-02, -9.129037013542300e-02, -5.135379810241502e-02, -4.588188814637015e-02, -5.096302303527670e-02, -4.479779418529722e-02, -7.040148289807453e-02, -5.896507510503234e-02, -5.197667216436352e-02, -5.095652231448606e-02, -1.478198581677657e-02, -9.241470070290629e-02, -1.478198581677655e-02, -9.241470070290632e-02, -1.581432540551813e-03, -1.201715189454379e-03, -1.690414920756188e-03, -1.238354462223473e-03, -5.873383974152979e-03, -5.156880596574115e-03, -7.789399088034638e-04, -8.403173679424606e-04, -2.054207572295348e-04, -2.306834062057916e-03, -2.054207572295348e-04, -2.306834062057916e-03, -6.889260181857303e-02, -6.894125148152279e-02, -6.885916635435807e-02, -6.891297715071250e-02, -6.888964194213670e-02, -6.894167025619832e-02, -6.886397382290700e-02, -6.891284861938454e-02, -6.887468625154911e-02, -6.892771009105408e-02, -6.887468625154911e-02, -6.892771009105408e-02, -8.067517361329651e-02, -8.069142020481743e-02, -8.020865311610438e-02, -8.030798965897117e-02, -8.252890990875926e-02, -8.095467637184461e-02, -8.212284980883341e-02, -8.057026358059260e-02, -7.827408296425777e-02, -8.167004827877906e-02, -7.827408296425777e-02, -8.167004827877906e-02, -5.453388522933723e-02, -5.488423140139636e-02, -5.108820526378856e-02, -5.091790987297746e-02, -5.764906593690836e-02, -5.117362725021096e-02, -5.203441585869008e-02, -4.765049973352881e-02, -5.032989747999079e-02, -5.834914090135293e-02, -5.032989747999081e-02, -5.834914090135294e-02, -4.645976616720984e-02, -4.565372773618325e-02, -6.284514551998968e-02, -6.216577603222617e-02, -4.230721116111922e-02, -4.068660397986312e-02, -6.232464606826961e-02, -6.238736428084538e-02, -5.016942725611544e-02, -4.167939543377401e-02, -5.016942725611544e-02, -4.167939543377401e-02, -6.820889671405263e-04, -5.733974069906556e-04, -8.185352608927739e-04, -7.648782777571137e-04, -6.880093174747090e-04, -5.312583221571532e-04, -1.951368602723419e-02, -1.970768438709178e-02, -1.288503423968000e-03, -3.158468728335256e-04, -1.288503423968001e-03, -3.158468728335256e-04, -4.889285088664880e-02, -4.833454533580584e-02, -4.994606331266299e-02, -4.934594808699636e-02, -4.957687183744718e-02, -4.898517155783035e-02, -4.926379863759625e-02, -4.869676968423552e-02, -4.941992696205909e-02, -4.884094008923171e-02, -4.941992696205909e-02, -4.884094008923171e-02, -4.809044362810771e-02, -4.764174786629854e-02, -5.786324315284953e-02, -5.694502785631604e-02, -5.445945701763994e-02, -5.356298189886001e-02, -5.141900897688453e-02, -5.085696187549344e-02, -5.280398927277305e-02, -5.219084198205048e-02, -5.280398927277305e-02, -5.219084198205048e-02, -5.207904036169735e-02, -5.167867785879970e-02, -6.390026619472292e-02, -6.282882268300455e-02, -6.041129748294016e-02, -5.815474275543050e-02, -5.176477255864859e-02, -5.085813271779269e-02, -5.468282279217514e-02, -5.451011090690062e-02, -5.468282279217516e-02, -5.451011090690062e-02, -5.674072012326950e-02, -5.524782702687669e-02, -5.033634502195490e-03, -4.939273749927391e-03, -1.154621784216432e-02, -1.137928427524737e-02, -4.815114744288113e-02, -4.577309724172435e-02, -3.093748153801682e-02, -2.777997552937001e-02, -3.093748153801679e-02, -2.777997552936999e-02, -2.093505557303368e-03, -1.781437897408332e-03, -2.150421397991768e-04, -2.128424674267604e-04, -5.109114229111718e-04, -3.870421886846141e-04, -2.677942458654024e-02, -2.660783811820284e-02, -1.140531610784529e-03, -3.221304786936947e-04, -1.140531610784528e-03, -3.221304786936945e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hflyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hflyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.264215559403482e-11, 1.463652377038497e-11, 3.264330457260197e-11, 3.264130547651290e-11, 1.463631512328463e-11, 3.264324292707253e-11, 3.264117778792324e-11, 1.463532316351641e-11, 3.263903593187204e-11, 3.264349393758490e-11, 1.463842899785011e-11, 3.265029141517737e-11, 3.263767071398673e-11, 1.463681083685537e-11, 3.264904308130342e-11, 3.263767071398673e-11, 1.463681083685537e-11, 3.264904308130342e-11, 2.929309781794401e-07, 1.902747638536065e-07, 2.930258640408496e-07, 2.929210741361775e-07, 1.902725761814505e-07, 2.930294227069511e-07, 2.929374748670998e-07, 1.901971754504621e-07, 2.927943589970082e-07, 2.928257255693593e-07, 1.901358235030523e-07, 2.927281916196245e-07, 2.942402810680865e-07, 1.902491360705296e-07, 2.916390218488022e-07, 2.942402810680865e-07, 1.902491360705296e-07, 2.916390218488022e-07, 1.046813195210680e-03, 1.144533678933034e-03, 9.856752413069014e-04, 1.059414201074614e-03, 1.151156568500561e-03, 9.839598987491129e-04, 1.102054367879107e-03, 1.320750241138922e-03, 1.222862024767306e-03, 1.135290278190233e-03, 1.265386257803329e-03, 1.098815699699322e-03, 6.048599279062471e-04, 1.376562597771172e-03, 1.710560061400956e-03, 6.048599279062471e-04, 1.376562597771172e-03, 1.710560061400956e-03, 4.453316468346988e-01, 6.012876550391961e-01, 3.308535673669243e-01, 4.290152077826185e-01, 5.680272535784819e-01, 3.049721373056462e-01, 6.173966156420098e-04, 5.322727974273029e-04, 3.591632994097421e-04, 1.087557086517181e+00, 1.675901373768304e+00, 9.940301607331564e-01, -4.501653942578362e-02, 2.382014110698246e+00, 2.093723074775938e+00, -4.501653942578319e-02, 2.382014110698246e+00, 2.093723074775938e+00, 5.675921857173066e-08, 1.111914508308031e-07, 5.622200106389088e-08, 2.334453701932848e-07, 4.562559950974850e-07, 2.304668186220750e-07, 1.058260425425809e+01, 1.838627425311693e+01, 9.310005755931870e+00, 2.089929161854101e-17, 4.136895542502456e-17, 2.086937280168050e-17, 4.936189023492603e-13, 1.070835888305008e-12, 5.576405914305050e-13, 4.936189023492603e-13, 1.070835888305008e-12, 5.576405914305049e-13, 3.853538126360367e-08, 2.233703107768369e-08, 3.876702432853588e-08, 3.849684232486335e-08, 2.231537777319893e-08, 3.873438232897355e-08, 3.853145848469303e-08, 2.233595490630417e-08, 3.876740193650438e-08, 3.850190535926228e-08, 2.231683364972891e-08, 3.873411468264029e-08, 3.851533903969528e-08, 2.232609670798167e-08, 3.875112028906986e-08, 3.851533903969528e-08, 2.232609670798167e-08, 3.875112028906986e-08, 5.217774900274863e-06, 4.104557134069705e-06, 5.223391230826410e-06, 5.020762810374528e-06, 3.949027730077658e-06, 5.049988520194397e-06, 5.459614488275693e-06, 4.223201907834492e-06, 5.262626081184532e-06, 5.291272077312508e-06, 4.080707689470805e-06, 5.092254495586169e-06, 4.817071871303678e-06, 3.966397450084659e-06, 5.289865367181627e-06, 4.817071871303678e-06, 3.966397450084659e-06, 5.289865367181627e-06, 1.887139424918829e-03, 2.253646609880290e-03, 1.960570895860268e-03, 1.301440934445299e-03, 1.482953633834817e-03, 1.292669343487352e-03, 3.494709294335117e-03, 3.393155540240489e-03, 2.100530010555202e-03, 2.862038356635148e-03, 2.786872153422916e-03, 1.792789491092001e-03, 1.153403828646581e-03, 2.171399762139616e-03, 2.470424530046960e-03, 1.153403828646584e-03, 2.171399762139616e-03, 2.470424530046963e-03, 3.252834993743408e+00, 5.364331359216309e+00, 3.098087487814086e+00, 3.920026484525933e-01, 5.928062603673171e-01, 3.771153092880229e-01, 4.388214320741553e+00, 6.670630325612285e+00, 3.402866055102132e+00, 5.722000811922319e-06, 4.550774239056777e-06, 5.776758802997007e-06, 2.347586491583939e+00, 3.362374819306393e+00, 1.686136601637616e+00, 2.347586491583939e+00, 3.362374819306393e+00, 1.686136601637616e+00, 2.722402450437751e-24, 5.421496698436063e-24, 2.739348374112997e-24, 6.197552123746826e-18, 1.228758886113335e-17, 6.206195015698091e-18, 2.834568716226669e-25, 5.656440620065503e-25, 2.862062125809059e-25, 8.566814583784277e+00, 1.504669301565768e+01, 8.380545905697472e+00, 4.773107496180662e-20, 9.610322787727072e-20, 4.859139671020088e-20, 4.773107496180661e-20, 9.610322787727070e-20, 4.859139671020088e-20, 1.932575433251670e-03, 2.199677179191681e-03, 1.827921294028910e-03, 1.986447683984606e-03, 2.264286130145305e-03, 1.878078506756244e-03, 1.967460441820644e-03, 2.241303100651475e-03, 1.860075015899262e-03, 1.951509374578449e-03, 2.222568983976134e-03, 1.845868570850362e-03, 1.959468849833947e-03, 2.231922961512953e-03, 1.852968646730800e-03, 1.959468849833947e-03, 2.231922961512953e-03, 1.852968646730800e-03, 2.192095061750638e-03, 2.525278278664052e-03, 2.091297055276122e-03, 4.514136264494106e-03, 5.397863529116129e-03, 4.260994342215327e-03, 3.644332070873083e-03, 4.298036410666330e-03, 3.430962677879512e-03, 2.951618041968925e-03, 3.458400931093935e-03, 2.811205936877352e-03, 3.277966668740439e-03, 3.860241852276062e-03, 3.114997798250318e-03, 3.277966668740439e-03, 3.860241852276062e-03, 3.114997798250318e-03, 1.047487397247074e-03, 1.166454564355177e-03, 1.021903571493992e-03, 1.576244486650762e-01, 2.273047300256539e-01, 1.497328514633720e-01, 7.550422113874039e-02, 1.027440095908986e-01, 6.844801134197469e-02, 2.214606296380817e-02, 2.883676467546989e-02, 2.080403342857284e-02, 3.962743884847655e-02, 5.500747727544229e-02, 3.977544650380128e-02, 3.962743884847664e-02, 5.500747727544231e-02, 3.977544650380125e-02, 6.724179139236990e-03, 8.100714365057125e-03, 6.156026159381084e-03, 9.621578394973588e+00, 1.766533536733120e+01, 9.474812795966793e+00, 1.088514945364049e+01, 1.878803243082290e+01, 9.865262141717881e+00, 2.739336338737960e-02, 3.428914672188251e-02, 2.318543679168190e-02, 6.224816015375727e+00, 9.701438036301546e+00, 4.917991604378374e+00, 6.224816015375725e+00, 9.701438036301546e+00, 4.917991604378369e+00, 1.759513360408513e-04, 3.417478728614279e-04, 1.735959115977003e-04, 1.428164354090746e-85, 2.850114531961813e-85, 1.429263468290431e-85, 8.294165813489441e-37, 1.662312648545182e-36, 8.415661486156971e-37, 6.528701437323544e+00, 1.102889579754806e+01, 6.105657850164422e+00, 4.049098582250979e-22, 8.178814636871498e-22, 4.157023565057630e-22, 4.049098582250767e-22, 8.178814636871070e-22, 4.157023565057414e-22])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
