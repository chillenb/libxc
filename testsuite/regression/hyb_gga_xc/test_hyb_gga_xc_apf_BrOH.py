
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_apf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.620202564748815e+01, -1.620204532198620e+01, -1.620219015428623e+01, -1.620186684140891e+01, -1.620203554618377e+01, -1.620203554618377e+01, -2.723798394701925e+00, -2.723780540681965e+00, -2.723400619524057e+00, -2.724623713644514e+00, -2.723800623672752e+00, -2.723800623672752e+00, -5.666380491145757e-01, -5.664602510527136e-01, -5.634070892798839e-01, -5.669907450392042e-01, -5.665711618910959e-01, -5.665711618910959e-01, -1.778614139873658e-01, -1.791598994618969e-01, -6.621067440598511e-01, -1.446992775335959e-01, -1.782360507981119e-01, -1.782360507981119e-01, -2.705762926283272e-02, -2.765942921104290e-02, -6.763201008524862e-02, -2.100964410927699e-02, -2.738545707174634e-02, -2.738545707174634e-02, -3.945020507193778e+00, -3.944762254983995e+00, -3.944998464501737e+00, -3.944797575480475e+00, -3.944881613059818e+00, -3.944881613059818e+00, -1.650891273410722e+00, -1.658773094825001e+00, -1.651305938421517e+00, -1.657430479129623e+00, -1.655739569897869e+00, -1.655739569897869e+00, -4.834572647876288e-01, -5.161889657404960e-01, -4.610396989941534e-01, -4.743076231246148e-01, -4.994493053223311e-01, -4.994493053223311e-01, -1.193098775979976e-01, -1.900903885127826e-01, -1.168642141059218e-01, -1.470435263519859e+00, -1.291702762219774e-01, -1.291702762219774e-01, -2.054957405784638e-02, -2.154661640312276e-02, -1.641971729742930e-02, -8.392833086089964e-02, -1.958034511365862e-02, -1.958034511365862e-02, -4.922564394726853e-01, -4.898607083153212e-01, -4.906587212375031e-01, -4.913199610395455e-01, -4.909838710318459e-01, -4.909838710318459e-01, -4.777964266613516e-01, -4.294718320790794e-01, -4.417223792177974e-01, -4.541052643060323e-01, -4.475951641688133e-01, -4.475951641688133e-01, -5.393361380899223e-01, -2.268742943477889e-01, -2.570319273280502e-01, -3.089554002059576e-01, -2.808913577303535e-01, -2.808913577303535e-01, -3.909528564380508e-01, -6.539292400234058e-02, -7.938948383382109e-02, -2.902753623643684e-01, -9.979702704543277e-02, -9.979702704543277e-02, -3.031154341027772e-02, -1.340605914267904e-02, -1.627493205242503e-02, -9.511490570697516e-02, -1.738013097708947e-02, -1.738013097708947e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_apf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.956920449749143e+01, -1.956927015229797e+01, -1.956957111089610e+01, -1.956849583797916e+01, -1.956923905424105e+01, -1.956923905424105e+01, -3.235929952870164e+00, -3.235961348819289e+00, -3.236953733016727e+00, -3.235908889038552e+00, -3.235959458226588e+00, -3.235959458226588e+00, -6.608377566492646e-01, -6.597116980858693e-01, -6.302771762111085e-01, -6.354873243487458e-01, -6.604293350608192e-01, -6.604293350608192e-01, -1.950817241071437e-01, -1.985091529387388e-01, -7.957301488606475e-01, -1.411037697301342e-01, -1.961188836651702e-01, -1.961188836651702e-01, -1.744376556148677e-02, -1.812421805694636e-02, -6.011978972998112e-02, -9.879456648022155e-03, -1.793949513995569e-02, -1.793949513995569e-02, -4.913674333273129e+00, -4.915771111969401e+00, -4.913888567356265e+00, -4.915518924316214e+00, -4.914749574600622e+00, -4.914749574600622e+00, -1.772971391606492e+00, -1.786970944995418e+00, -1.765385574258350e+00, -1.776255911701525e+00, -1.792498269568207e+00, -1.792498269568207e+00, -6.075482905806641e-01, -6.727225713469536e-01, -5.779211929662355e-01, -6.151476709918313e-01, -6.318300494723679e-01, -6.318300494723679e-01, -1.122657530029331e-01, -1.896523693656300e-01, -1.102108276350601e-01, -1.913050798621707e+00, -1.234762448235942e-01, -1.234762448235942e-01, -9.579998067392924e-03, -1.060924877661622e-02, -8.008868453943776e-03, -7.754893670826767e-02, -9.661790100441693e-03, -9.661790100441684e-03, -6.432146889359335e-01, -6.388697046500328e-01, -6.406195619124027e-01, -6.418301167707806e-01, -6.412413616204319e-01, -6.412413616204319e-01, -6.241162471664234e-01, -5.200236144426296e-01, -5.524657839891737e-01, -5.822708599368979e-01, -5.673294927919490e-01, -5.673294927919491e-01, -7.023699365797411e-01, -2.361239528311979e-01, -2.833067407043561e-01, -3.739852384838799e-01, -3.259274012995959e-01, -3.259274012995959e-01, -4.723373237020134e-01, -5.698539065726340e-02, -7.230535492233614e-02, -3.628482873294699e-01, -9.378377133630959e-02, -9.378377133630959e-02, -2.013030496960228e-02, -4.096831892152770e-03, -6.371049172257415e-03, -8.950683083498466e-02, -8.344970406431866e-03, -8.344970406431855e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_apf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.097367740414171e-09, -5.097337219457338e-09, -5.097138048931293e-09, -5.097639093716430e-09, -5.097352171423053e-09, -5.097352171423053e-09, -6.095320135731623e-06, -6.095356963486614e-06, -6.095388182602228e-06, -6.090335282717914e-06, -6.095238874587923e-06, -6.095238874587923e-06, -2.930366745472100e-03, -2.943209138532635e-03, -3.237483854544782e-03, -3.148907007722685e-03, -2.935052507607752e-03, -2.935052507607752e-03, -3.045792106787877e-01, -2.899527444399235e-01, -1.481016562262401e-03, -7.627468671461500e-01, -3.001770240577228e-01, -3.001770240577228e-01, -8.306190045063686e+02, -7.288269270681396e+02, -1.191383057433914e+01, -6.139331068968127e+03, -7.591739678220071e+02, -7.591739678220071e+02, -1.321531883743937e-06, -1.320508339204990e-06, -1.321425321167786e-06, -1.320629649607404e-06, -1.321012780619833e-06, -1.321012780619833e-06, -4.847597530851622e-05, -4.746450845005142e-05, -4.857822897330064e-05, -4.779015824254838e-05, -4.764141812638017e-05, -4.764141812638017e-05, -3.813655607299561e-03, -7.838029953668276e-04, -4.655310539445992e-03, -1.826461147756334e-03, -3.147466101689634e-03, -3.147466101689634e-03, -1.481064068611556e+00, -2.618914351600160e-01, -1.625034791005177e+00, -3.923519928168499e-05, -1.159815873464369e+00, -1.159815873464369e+00, -6.921359362319876e+03, -4.721014810860055e+03, -1.453561160838220e+04, -5.293569681051829e+00, -6.884356172590441e+03, -6.884356172590443e+03, 5.747159411848195e-04, -6.284541826667756e-04, -2.179101632731021e-04, 1.164140756124061e-04, -5.196469955462116e-05, -5.196469955462116e-05, 9.784519774362292e-04, -7.563509664796870e-03, -5.567067931663145e-03, -3.486584085367869e-03, -4.569433948752115e-03, -4.569433948752111e-03, -8.359783210639504e-04, -1.266658147945172e-01, -7.157252275240347e-02, -2.647319473020462e-02, -4.495400195395174e-02, -4.495400195395177e-02, -1.092494161676865e-02, -1.366873732773566e+01, -6.383504530253854e+00, -2.625309133997966e-02, -2.921895062995560e+00, -2.921895062995561e+00, -4.873206911614572e+02, -2.292575874887143e+05, -3.453033006698259e+04, -3.548379976115785e+00, -1.221964546668652e+04, -1.221964546668656e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
