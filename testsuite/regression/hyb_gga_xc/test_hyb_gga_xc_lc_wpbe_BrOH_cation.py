
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.075402666142704e+01, -2.075405148657343e+01, -2.075423367747362e+01, -2.075386286015701e+01, -2.075404694653659e+01, -2.075404694653659e+01, -3.294994425454180e+00, -3.294956161781045e+00, -3.294157154288177e+00, -3.296207229342114e+00, -3.295032634680093e+00, -3.295032634680093e+00, -5.148340417231257e-01, -5.145825372873792e-01, -5.097301667029712e-01, -5.147297689440571e-01, -5.139193831360481e-01, -5.139193831360481e-01, -5.857113362889497e-02, -5.994874040909126e-02, -6.233336701034347e-01, -3.432055874485360e-02, -5.263454950131537e-02, -5.263454950131518e-02, -2.187051356102466e-06, -2.560864499477935e-06, -6.104755037997030e-04, -4.136537150690613e-07, -1.215754635400914e-06, -1.215754635400914e-06, -4.858075213661164e+00, -4.857566918911863e+00, -4.858061991022775e+00, -4.857613044384716e+00, -4.857811482588883e+00, -4.857811482588883e+00, -1.920482358269936e+00, -1.931128982430967e+00, -1.919991809926635e+00, -1.929445193926127e+00, -1.926548844460493e+00, -1.926548844460493e+00, -4.157136646959471e-01, -4.587494932417459e-01, -3.759278494321719e-01, -3.915909885056162e-01, -4.240396001442055e-01, -4.240396001442055e-01, -1.370852297114885e-02, -6.500818900561614e-02, -1.090660839616333e-02, -1.662750665046325e+00, -2.061738938383913e-02, -2.061738938383913e-02, -1.901365704061262e-07, -3.863812989987921e-07, -1.741597685607376e-07, -3.024967662426202e-03, -3.614338033505605e-07, -3.614338033550770e-07, -4.166297844740079e-01, -4.118415899857888e-01, -4.133769471325848e-01, -4.147615371609789e-01, -4.140547533516041e-01, -4.140547533516041e-01, -4.028434671010735e-01, -3.352397859175020e-01, -3.507105409880523e-01, -3.681207937693126e-01, -3.587895974086213e-01, -3.587895974086213e-01, -4.871048680547772e-01, -9.971924683401900e-02, -1.319521175719632e-01, -1.987864278281077e-01, -1.615519358941385e-01, -1.615519358941384e-01, -2.976174417150774e-01, -5.204604554195041e-04, -1.505920798333532e-03, -1.858561954486498e-01, -6.539078966012510e-03, -6.539078966012489e-03, -6.200468009152184e-06, -7.342409819030832e-09, -6.858325061494017e-08, -5.339668246387417e-03, -2.780433185851172e-07, -2.780433185809988e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.471669952121046e+01, -2.471667146666078e+01, -2.471682777988630e+01, -2.471676498316208e+01, -2.471719098952164e+01, -2.471729674620461e+01, -2.471573897657325e+01, -2.471545114791114e+01, -2.471677407196779e+01, -2.471615683036048e+01, -2.471677407196779e+01, -2.471615683036048e+01, -3.856266653857777e+00, -3.856474369462932e+00, -3.856317691312078e+00, -3.856534604062666e+00, -3.857647145014921e+00, -3.857980057561528e+00, -3.855991198522713e+00, -3.856330217169773e+00, -3.855529209938842e+00, -3.857536622325239e+00, -3.855529209938842e+00, -3.857536622325239e+00, -6.331216839731131e-01, -6.362529573343241e-01, -6.316097250344975e-01, -6.353686846600549e-01, -6.086944283198208e-01, -6.053006101735054e-01, -6.126774026852562e-01, -6.137299612190378e-01, -6.332999058250927e-01, -5.923045059114596e-01, -6.332999058250927e-01, -5.923045059114596e-01, -7.539123106214576e-02, -7.822268235157377e-02, -7.836988367875833e-02, -8.217729896538338e-02, -7.470803314513790e-01, -7.772000497464724e-01, -4.640318416889615e-02, -4.717383596125255e-02, -6.217150326365474e-02, -3.772726568061224e-02, -6.217150326365457e-02, -3.772726568061210e-02, -3.983140638002183e-06, -4.781049029353054e-06, -4.597351778847786e-06, -5.653998683698071e-06, -1.175666157309217e-03, -1.371432451925274e-03, -8.507113576005504e-07, -8.088752751276129e-07, -2.798920107833500e-06, -5.184151130252709e-07, -2.798920107832541e-06, -5.184151130231025e-07, -6.056953550203894e+00, -6.055416707851944e+00, -6.060682771068091e+00, -6.059026723997698e+00, -6.057153332458212e+00, -6.055539105226022e+00, -6.060358420200775e+00, -6.058813342017735e+00, -6.058866453772859e+00, -6.057231723886090e+00, -6.058866453772859e+00, -6.057231723886090e+00, -2.085937166296568e+00, -2.085834085123587e+00, -2.100949557836453e+00, -2.100413844427861e+00, -2.076024597966446e+00, -2.078009535655820e+00, -2.089174367736812e+00, -2.091304099314499e+00, -2.100917134093019e+00, -2.095514324988999e+00, -2.100917134093019e+00, -2.095514324988999e+00, -5.708035958990817e-01, -5.694597131228365e-01, -6.572890656861475e-01, -6.579070696661986e-01, -5.049399415966647e-01, -5.255646050907535e-01, -5.572872206910466e-01, -5.745375631090851e-01, -5.999589416464423e-01, -5.698729810363120e-01, -5.999589416464423e-01, -5.698729810363119e-01, -2.220305385658048e-02, -2.253391982227969e-02, -7.577543981955492e-02, -7.605837427678566e-02, -1.716838102881279e-02, -1.926276104356377e-02, -2.236752666972204e+00, -2.235850683683372e+00, -3.119324872949684e-02, -3.152466255027953e-02, -3.119324872949684e-02, -3.152466255027953e-02, -3.581400869391929e-07, -4.019453965454055e-07, -7.578890064380974e-07, -7.928136000785013e-07, -3.198339911537209e-07, -3.789605123314780e-07, -5.461478950305445e-03, -5.575773188058112e-03, -3.409445480151651e-07, -8.762973998806695e-07, -3.409445480189957e-07, -8.762973998908947e-07, -5.984198573509736e-01, -6.007259176377964e-01, -5.936625645027884e-01, -5.960636586148464e-01, -5.957685875577641e-01, -5.981543563395350e-01, -5.971928588091049e-01, -5.995132269045039e-01, -5.965226334311816e-01, -5.988741499910575e-01, -5.965226334311816e-01, -5.988741499910575e-01, -5.780636579452089e-01, -5.799185438133797e-01, -4.405555345200468e-01, -4.426380738128105e-01, -4.807041560789518e-01, -4.832757044981129e-01, -5.252322700877647e-01, -5.271985874493118e-01, -5.027929834817156e-01, -5.047992808120739e-01, -5.027929834817156e-01, -5.047992808120739e-01, -6.940169030011176e-01, -6.956675643318363e-01, -1.093815062411386e-01, -1.099769672224937e-01, -1.601007160152214e-01, -1.628399156865928e-01, -2.830348927507390e-01, -2.846507269737793e-01, -2.223950956701859e-01, -2.224518693706927e-01, -2.223950956701858e-01, -2.224518693706924e-01, -3.973056889244748e-01, -4.003325422867005e-01, -1.107945767256175e-03, -1.131209594041498e-03, -2.665169510403104e-03, -2.902686611994693e-03, -2.763062401328180e-01, -2.806763369256141e-01, -1.107655707144925e-02, -1.221186557818513e-02, -1.107655707144947e-02, -1.221186557818559e-02, -1.189153086862263e-05, -1.324543702656574e-05, -1.465351088821752e-08, -1.475403808844824e-08, -1.238229570374019e-07, -1.489066054641480e-07, -9.485905289162974e-03, -9.887342010522437e-03, -2.898435594943039e-07, -6.746806641745842e-07, -2.898435594919193e-07, -6.746806641694308e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.545265592849186e-08, 3.855567579455844e-10, -1.545273895171022e-08, -1.545248081262721e-08, 3.855637563905792e-10, -1.545261076004722e-08, -1.545184618481633e-08, 3.855734091993355e-10, -1.545172607782041e-08, -1.545383801749001e-08, 3.854697494807899e-10, -1.545424993759850e-08, -1.545257247643782e-08, 3.855271085313426e-10, -1.545317375089666e-08, -1.545257247643782e-08, 3.855271085313426e-10, -1.545317375089666e-08, -2.021035848679511e-05, 2.158879157656427e-06, -2.021698583111829e-05, -2.021055639773809e-05, 2.159323527660124e-06, -2.021769377002609e-05, -2.022079377324838e-05, 2.169371669283230e-06, -2.022426679241902e-05, -2.019022680922543e-05, 2.149943255801801e-06, -2.019508949629757e-05, -2.022226410137024e-05, 2.159156568071321e-06, -2.020231734793126e-05, -2.022226410137024e-05, 2.159156568071321e-06, -2.020231734793126e-05, -9.426589234849292e-03, 3.586683876242116e-03, -9.503087284291377e-03, -9.419101845719396e-03, 3.559577090514688e-03, -9.516789632928067e-03, -9.399448386736392e-03, 2.876045381924161e-03, -9.209274339287485e-03, -9.051849662096234e-03, 2.810968523930000e-03, -9.118639133149751e-03, -9.879961326151057e-03, 2.852692094259074e-03, -8.336691604915259e-03, -9.879961326151057e-03, 2.852692094259074e-03, -8.336691604915259e-03, -5.629085235643532e-01, 3.108902575321890e-01, -5.239178987320960e-01, -5.513460123925424e-01, 3.280826843588528e-01, -4.988792533342371e-01, -5.774098296063286e-03, 1.940414170439823e-03, -5.459788008137410e-03, -6.179236644789934e-01, 2.258949661124237e-01, -6.094422553052873e-01, -5.548858001158452e-01, 1.882246441728870e-01, -5.641687835756416e-01, -5.548858001158405e-01, 1.882246441728873e-01, -5.641687835756486e-01, 4.235666361990832e-03, 8.471332723898200e-03, 4.235666361990832e-03, 4.982257697020214e-03, 9.964515393423459e-03, 4.982257697020214e-03, -5.202314174077326e-02, 5.126941006152715e-02, -9.915452119497745e-02, 1.504341724364139e-03, 3.008683449168684e-03, 1.504341724364139e-03, 2.207283134900671e-03, 4.414566270491809e-03, 2.207283134900671e-03, 2.207283135350878e-03, 4.414566270088269e-03, 2.207283135350878e-03, -4.138643577485067e-06, 5.666948009101149e-07, -4.142928222964155e-06, -4.132026982371931e-06, 5.704413223836728e-07, -4.136470952801633e-06, -4.138295678783896e-06, 5.668443577206054e-07, -4.142688818698810e-06, -4.132573341366369e-06, 5.701514261968389e-07, -4.136871850932519e-06, -4.135277818083423e-06, 5.686004611431787e-07, -4.139682000779266e-06, -4.135277818083423e-06, 5.686004611431787e-07, -4.139682000779266e-06, -1.316575062622194e-04, 1.221811741084532e-05, -1.316794144152833e-04, -1.298286837417861e-04, 1.218856108878283e-05, -1.299251282993876e-04, -1.297295842024218e-04, 1.161795009824474e-05, -1.304136959659552e-04, -1.281335443361788e-04, 1.159619612758267e-05, -1.287614074813812e-04, -1.321857398908401e-04, 1.250231835492394e-05, -1.308585961095878e-04, -1.321857398908401e-04, 1.250231835492394e-05, -1.308585961095878e-04, -1.431573736885960e-02, 1.180452397706796e-02, -1.450274625869425e-02, -5.330418897318506e-03, 1.489938286408802e-02, -5.253222826460794e-03, -2.070533993450402e-02, 1.535577972946644e-02, -1.740432298307457e-02, -1.016701879144915e-02, 2.278859644535717e-02, -7.976856380453555e-03, -1.159506894781122e-02, 1.179162458306085e-02, -1.509023248040443e-02, -1.159506894781123e-02, 1.179162458306085e-02, -1.509023248040444e-02, -4.699196742560368e-01, 1.261488607621168e-01, -4.811657707536933e-01, -4.251362790440120e-01, 1.139695105238702e-01, -4.230227170685396e-01, -4.586876289806016e-01, 1.279112469154852e-01, -4.758922571656095e-01, -1.461390066938679e-04, 1.207887057881010e-04, -1.464555152606255e-04, -5.379506192717662e-01, 2.409472748596690e-01, -6.934096903462906e-01, -5.379506192717662e-01, 2.409472748596690e-01, -6.934096903462906e-01, 1.466773397935566e-03, 2.933546798259037e-03, 1.466773397935566e-03, 1.849572050554419e-03, 3.699144102256803e-03, 1.849572050554419e-03, 1.842554218706263e-02, 3.685108437354808e-02, 1.842554218706263e-02, -4.151645100374668e-01, 1.250822448857004e-01, -4.095375109356598e-01, 7.051803231269947e-03, 1.410360645889085e-02, 7.051803231269947e-03, 7.051803234557417e-03, 1.410360646869916e-02, 7.051803234557417e-03, -2.276590276916625e-03, 2.514346072918196e-02, -2.045521244498078e-03, -6.268376887283690e-03, 2.157065992117518e-02, -5.991198669315332e-03, -4.976543507695037e-03, 2.270457728491302e-02, -4.709068924388838e-03, -3.814126851097416e-03, 2.373865089872573e-02, -3.569501003676890e-03, -4.405515834796068e-03, 2.321019190891285e-02, -4.149450651808793e-03, -4.405515834796068e-03, 2.321019190891285e-02, -4.149450651808793e-03, -6.772614532492612e-04, 2.977269840520045e-02, -4.964777129206708e-04, -2.700344039399737e-02, 1.592277215307748e-02, -2.661465098470651e-02, -2.279867352929036e-02, 1.838749842245184e-02, -2.234152303203546e-02, -1.570019396099467e-02, 2.169730037966074e-02, -1.535323229733381e-02, -1.961646141195670e-02, 1.995497716545398e-02, -1.922968326081823e-02, -1.961646141195670e-02, 1.995497716545398e-02, -1.922968326081823e-02, -5.099181375393515e-03, 1.183264719377924e-02, -4.965494764049792e-03, -2.961577102826165e-01, 8.498631964250428e-02, -2.931087038876074e-01, -1.849313949280282e-01, 7.821972418059023e-02, -1.787903077949975e-01, -7.243358111926797e-02, 6.964082434152352e-02, -7.087280955161412e-02, -1.083826049831982e-01, 7.796350422599263e-02, -1.087664272485270e-01, -1.083826049831982e-01, 7.796350422599266e-02, -1.087664272485269e-01, -3.486383607017689e-02, 2.285950305464996e-02, -3.411382225200812e-02, -3.029757221132707e-02, 4.213028450134424e-02, -3.413466677635990e-02, -2.903731852489078e-01, 6.458066222247318e-02, -3.210605782132628e-01, -7.354286657519579e-02, 1.099497136873529e-01, -6.830301850549100e-02, -4.550182656155010e-01, 2.182010199987041e-01, -5.468260993643888e-01, -4.550182656154909e-01, 2.182010199987039e-01, -5.468260993643699e-01, 5.281295584737279e-03, 1.056259116938041e-02, 5.281295584737279e-03, 2.005765736367150e-03, 4.011531506685853e-03, 2.005765736367150e-03, 2.510381951246900e-03, 5.020763908060611e-03, 2.510381951246900e-03, -4.741289026667063e-01, 2.002688123716920e-01, -4.767679334186638e-01, 9.000943715250370e-03, 1.800188742308661e-02, 9.000943715250370e-03, 9.000943718924263e-03, 1.800188743452388e-02, 9.000943718924263e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
