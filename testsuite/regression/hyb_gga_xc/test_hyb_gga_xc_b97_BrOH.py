
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.686167193399554e+01, -1.686169491872246e+01, -1.686185302068266e+01, -1.686147553756150e+01, -1.686168359090938e+01, -1.686168359090938e+01, -2.847074359453861e+00, -2.847056535031138e+00, -2.846682254985229e+00, -2.847919363165474e+00, -2.847077073821259e+00, -2.847077073821259e+00, -5.964937770057569e-01, -5.964103994123793e-01, -5.963928380618153e-01, -5.999938359156519e-01, -5.964606327697225e-01, -5.964606327697225e-01, -1.899781200303438e-01, -1.911162014421243e-01, -6.944190280191672e-01, -1.545293810758661e-01, -1.903022376627012e-01, -1.903022376627012e-01, -1.151001633152954e-02, -1.210934533326052e-02, -5.607010449694498e-02, -5.188627094318825e-03, -1.197077902940330e-02, -1.197077902940330e-02, -4.127978939732468e+00, -4.127844114417755e+00, -4.127969388161101e+00, -4.127864470454325e+00, -4.127903472365464e+00, -4.127903472365464e+00, -1.739495872137362e+00, -1.747080739776430e+00, -1.740916789018313e+00, -1.746777667282819e+00, -1.742937411659183e+00, -1.742937411659183e+00, -5.042906454103444e-01, -5.351400835009579e-01, -4.809019962848279e-01, -4.925579077135599e-01, -5.207038056263192e-01, -5.207038056263192e-01, -1.228491118290665e-01, -2.051430523464428e-01, -1.204656694408401e-01, -1.538582323673569e+00, -1.361763243183281e-01, -1.361763243183281e-01, -4.992149052716484e-03, -5.762683526426706e-03, -4.229225054033477e-03, -7.838133320342612e-02, -5.213631473866378e-03, -5.213631473866379e-03, -5.009647627390532e-01, -5.068721657364840e-01, -5.060694956428081e-01, -5.046924357004470e-01, -5.054905529427213e-01, -5.054905529427213e-01, -4.825809600120305e-01, -4.501010019096200e-01, -4.607642373694442e-01, -4.722501639303163e-01, -4.660941293190152e-01, -4.660941293190152e-01, -5.598494053939890e-01, -2.442958421258132e-01, -2.743859607521579e-01, -3.238386449439198e-01, -2.970099349943069e-01, -2.970099349943069e-01, -4.098822264311363e-01, -5.185546807570437e-02, -7.095759359742726e-02, -3.020242690829754e-01, -1.000213896811779e-01, -1.000213896811779e-01, -1.370128209794081e-02, -1.462717356271323e-03, -2.868123808445623e-03, -9.497821632460593e-02, -4.379386813246040e-03, -4.379386813246023e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.062189926331547e+01, -2.062197444058922e+01, -2.062230953902959e+01, -2.062107847465892e+01, -2.062193891164468e+01, -2.062193891164468e+01, -3.392719422901940e+00, -3.392763233155296e+00, -3.394102355700257e+00, -3.392492907534100e+00, -3.392756000911020e+00, -3.392756000911020e+00, -6.720896358528607e-01, -6.707429028094154e-01, -6.353577423112564e-01, -6.409507646095445e-01, -6.716016116346442e-01, -6.716016116346442e-01, -1.980079589483936e-01, -2.006344726069701e-01, -8.183197606752546e-01, -1.550566147580252e-01, -1.987924673239294e-01, -1.987924673239294e-01, -1.567101209680105e-02, -1.648567485533337e-02, -7.192395141826796e-02, -7.044488386433294e-03, -1.629621998245845e-02, -1.629621998245845e-02, -5.185263336242349e+00, -5.187454523808834e+00, -5.185487612173000e+00, -5.187191442219893e+00, -5.186387831451992e+00, -5.186387831451992e+00, -1.787045142789196e+00, -1.803971391423770e+00, -1.775318486772233e+00, -1.788508704883517e+00, -1.813812473694984e+00, -1.813812473694984e+00, -6.257312389701443e-01, -6.874634007736655e-01, -5.939075685774144e-01, -6.347064910440436e-01, -6.525317632536705e-01, -6.525317632536705e-01, -1.320673174131870e-01, -1.995018302869328e-01, -1.291638180772866e-01, -1.985837081894075e+00, -1.401102648770863e-01, -1.401102648770863e-01, -6.776016581191751e-03, -7.828785554348808e-03, -5.733452659598956e-03, -9.421200342551918e-02, -7.077920902451769e-03, -7.077920902451763e-03, -6.348159122504912e-01, -6.495748455128916e-01, -6.452942961655010e-01, -6.408207189510121e-01, -6.431593346357581e-01, -6.431593346357583e-01, -6.133864180827907e-01, -5.281021974439013e-01, -5.665532642144883e-01, -6.020636909438577e-01, -5.845651093689245e-01, -5.845651093689247e-01, -7.201166952987038e-01, -2.407844293458253e-01, -2.837654759704199e-01, -3.748577417767006e-01, -3.249011765971836e-01, -3.249011765971836e-01, -4.777318225489541e-01, -6.750485607395508e-02, -8.797277896373430e-02, -3.656698545216547e-01, -1.117211199526139e-01, -1.117211199526139e-01, -1.865768400411700e-02, -1.970610564916053e-03, -3.879112402436477e-03, -1.065157159509347e-01, -5.938605416509251e-03, -5.938605416509247e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.626040174360398e-09, -4.625990363802576e-09, -4.625742795532907e-09, -4.626558988405719e-09, -4.626014117892347e-09, -4.626014117892347e-09, -6.147880608588125e-06, -6.147734482112261e-06, -6.142717134572631e-06, -6.146244845570383e-06, -6.147702864171010e-06, -6.147702864171010e-06, -3.896869988627773e-03, -3.914591248095054e-03, -4.328709974333729e-03, -4.205077737174916e-03, -3.903336106169335e-03, -3.903336106169335e-03, -4.150798789671337e-01, -4.046886051462909e-01, -1.878334122056039e-03, -7.847134828272545e-01, -4.120913039405261e-01, -4.120913039405261e-01, -2.265239788834937e+00, -2.346148149077655e+00, -1.990983606286919e+00, -8.704805707432114e-01, -2.418120026055971e+00, -2.418120026055971e+00, -1.192102302189609e-06, -1.190564486334803e-06, -1.191943609954174e-06, -1.190747805657626e-06, -1.191314020884483e-06, -1.191314020884483e-06, -6.006763227596419e-05, -5.853245668254814e-05, -6.059102062504069e-05, -5.938419014337012e-05, -5.834011066300925e-05, -5.834011066300925e-05, -5.387623218995362e-03, -5.396863611508367e-03, -6.725237273926810e-03, -4.270905606172163e-03, -4.385623194618487e-03, -4.385623194618487e-03, -1.104972458117933e+00, -3.126655260794438e-01, -1.229735561589882e+00, -6.724178350678425e-05, -1.050674585960109e+00, -1.050674585960109e+00, -8.904909521393379e-01, -1.016602051132610e+00, -2.154392630122128e+00, -2.008393339252278e+00, -1.369240020778283e+00, -1.369240020780401e+00, -3.846078626941967e-02, -8.453648283211745e-03, -1.351013284798737e-02, -2.059345578848796e-02, -1.658107169661906e-02, -1.658107169661906e-02, -6.111135226514858e-02, -1.103233892445578e-02, -8.206499633668006e-03, -5.250903058081360e-03, -6.731502032626229e-03, -6.731502032626238e-03, -3.908795741425972e-03, -1.658050914689124e-01, -1.017425774424013e-01, -4.353377260690828e-02, -6.912312063250631e-02, -6.912312063250634e-02, -1.644479877435630e-02, -1.674144389768334e+00, -1.764855254446326e+00, -4.896029759771794e-02, -1.823852887787659e+00, -1.823852887787661e+00, -1.906065706346753e+00, -1.639007157783112e-01, -7.048211539167027e-01, -2.172993682233159e+00, -1.686044384736237e+00, -1.686044384754887e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
