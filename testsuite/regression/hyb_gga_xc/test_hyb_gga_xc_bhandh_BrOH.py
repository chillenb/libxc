
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_bhandh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.974689258107967e+00, -9.974713394196639e+00, -9.974838679015660e+00, -9.974443089720570e+00, -9.974701839473827e+00, -9.974701839473827e+00, -1.670825544356506e+00, -1.670829690756693e+00, -1.671010302678235e+00, -1.671042340223167e+00, -1.670834575807206e+00, -1.670834575807206e+00, -3.447062993358020e-01, -3.442676603067898e-01, -3.323499868387161e-01, -3.350306109837625e-01, -3.445469127875618e-01, -3.445469127875618e-01, -9.304909198843847e-02, -9.506660883635330e-02, -4.114219334588656e-01, -5.553201467920257e-02, -9.366865430253568e-02, -9.366865430253568e-02, -6.465241043714383e-03, -6.768951173713531e-03, -1.728331870430896e-02, -3.117246353471340e-03, -6.699117039641628e-03, -6.699117039641628e-03, -2.476274777004209e+00, -2.476722916047512e+00, -2.476321961321285e+00, -2.476670395693624e+00, -2.476502696037846e+00, -2.476502696037846e+00, -9.529919464713108e-01, -9.597183361673733e-01, -9.499966379481311e-01, -9.552543864276333e-01, -9.614052758290337e-01, -9.614052758290337e-01, -3.073063616306805e-01, -3.349702431369731e-01, -2.924115936332895e-01, -3.068662076807567e-01, -3.187977094903275e-01, -3.187977094903275e-01, -2.957811419198873e-02, -8.306683056898755e-02, -3.113940181143833e-02, -9.462554068619436e-01, -4.259667506706885e-02, -4.259667506706885e-02, -3.007667979857936e-03, -3.435043131304174e-03, -2.577940207071518e-03, -1.934359911156042e-02, -3.131300269120231e-03, -3.131300269120231e-03, -3.202452199011065e-01, -3.180475129499092e-01, -3.188364887471229e-01, -3.194447210305732e-01, -3.191404938550145e-01, -3.191404938550145e-01, -3.108874686545681e-01, -2.660486492648525e-01, -2.795577690916440e-01, -2.917715002259202e-01, -2.856089228118046e-01, -2.856089228118046e-01, -3.498179599984590e-01, -1.128292939377289e-01, -1.412618547201176e-01, -1.885167881727481e-01, -1.642619739085908e-01, -1.642619739085908e-01, -2.410174698772251e-01, -1.646824699546745e-02, -1.676037297656061e-02, -1.808454773975763e-01, -2.646117158636713e-02, -2.646117158636714e-02, -7.564466614892105e-03, -9.440441179113154e-04, -1.791006520952916e-03, -2.705413372988373e-02, -2.663087690135140e-03, -2.663087690135136e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_bhandh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.328657518752119e+01, -1.328660713661755e+01, -1.328677347750305e+01, -1.328624982358394e+01, -1.328659183737204e+01, -1.328659183737204e+01, -2.222782212981996e+00, -2.222785465487978e+00, -2.222963599887160e+00, -2.223113394074864e+00, -2.222793064146585e+00, -2.222793064146585e+00, -4.769184922438443e-01, -4.766505332361533e-01, -4.705687753990496e-01, -4.735468412823575e-01, -4.768197959661649e-01, -4.768197959661649e-01, -1.577124547526854e-01, -1.586360057196107e-01, -5.572223038517321e-01, -1.300109785032651e-01, -1.579721238032144e-01, -1.579721238032144e-01, -8.599705713439841e-03, -9.002624279531721e-03, -3.636166091017495e-02, -4.151429613787626e-03, -8.909995410430634e-03, -8.909995410430634e-03, -3.288751891730186e+00, -3.289294622458288e+00, -3.288809320204082e+00, -3.289231295600780e+00, -3.289027498145209e+00, -3.289027498145209e+00, -1.290302870345562e+00, -1.298405395295692e+00, -1.287495964923467e+00, -1.293806936069769e+00, -1.299450998986092e+00, -1.299450998986092e+00, -4.134681899074595e-01, -4.407166002267214e-01, -3.946866203862668e-01, -4.055866178657011e-01, -4.270129409891539e-01, -4.270129409891539e-01, -1.048703062433553e-01, -1.727054609080391e-01, -1.014835722905313e-01, -1.248599840528786e+00, -1.146505012374611e-01, -1.146505012374611e-01, -4.005659422332533e-03, -4.574124177291704e-03, -3.433888517229522e-03, -5.828596024292752e-02, -4.170124458989162e-03, -4.170124458989162e-03, -4.191959677486663e-01, -4.181502279608935e-01, -4.185235552702664e-01, -4.188120832625569e-01, -4.186673864253142e-01, -4.186673864253143e-01, -4.066469420682488e-01, -3.676905381470419e-01, -3.785156613673518e-01, -3.889340128180043e-01, -3.835416738149705e-01, -3.835416738149705e-01, -4.604893861996634e-01, -2.027451194012073e-01, -2.261912491476623e-01, -2.677431409286293e-01, -2.450005617336058e-01, -2.450005617336057e-01, -3.358959703370981e-01, -3.268431631852918e-02, -5.091465157180816e-02, -2.511342720166873e-01, -8.012067439623288e-02, -8.012067439623288e-02, -1.005693139293179e-02, -1.258268197359216e-03, -2.386374069838764e-03, -7.438380302878714e-02, -3.547195008991773e-03, -3.547195008991767e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_bhandh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.998307407697127e-11, 1.998283025312687e-11, 1.998156299182701e-11, 1.998555943171841e-11, 1.998294699310019e-11, 1.998294699310019e-11, 1.941035367636133e-07, 1.941014617873712e-07, 1.940037584009783e-07, 1.939626243312698e-07, 1.940982578554964e-07, 1.940982578554964e-07, 8.188294583145949e-04, 8.229612172897952e-04, 9.392202774834822e-04, 9.038726529050120e-04, 8.203335590079417e-04, 8.203335590079417e-04, 2.802907265445851e-01, 2.660992526532358e-01, 3.351879760746208e-04, 9.213369320751712e-01, 2.759425126349042e-01, 2.759425126349042e-01, 3.492011537461019e-03, 6.798784721272808e-03, 1.009575580545413e+01, 6.437008703281114e-11, 5.869760915961791e-03, 5.869760915961791e-03, 2.496506468495039e-08, 2.494252915080496e-08, 2.496268585046673e-08, 2.494516414154044e-08, 2.495360758116016e-08, 2.495360758116016e-08, 3.657220590093240e-06, 3.528686022426295e-06, 3.710763864394874e-06, 3.608217161079906e-06, 3.503594550695078e-06, 3.503594550695078e-06, 1.608553463082988e-03, 1.075852673374985e-03, 2.072553905954766e-03, 1.691003359109473e-03, 1.339634053908640e-03, 1.339634053908640e-03, 2.459110607555532e+00, 2.725471770621767e-01, 2.551814811025595e+00, 4.036360387979658e-06, 1.583168968428811e+00, 1.583168968428811e+00, 1.700547574184682e-11, 1.832844738529670e-09, 2.853557702757779e-14, 7.287824557197264e+00, 7.580605232291588e-11, 7.580605232291588e-11, 1.381448783428155e-03, 1.417832492624572e-03, 1.404660289329691e-03, 1.394597275311293e-03, 1.399623080721118e-03, 1.399623080721118e-03, 1.618271693609610e-03, 3.206152220728214e-03, 2.602549464526362e-03, 2.159914609108061e-03, 2.373220412016903e-03, 2.373220412016904e-03, 8.535042267501736e-04, 1.073631672232308e-01, 5.149085884792539e-02, 1.723392138126548e-02, 2.996562309032247e-02, 2.996562309032250e-02, 5.233207263602260e-03, 1.017762679236578e+01, 8.470785673413147e+00, 2.228582406638550e-02, 4.269436345204238e+00, 4.269436345204237e+00, 2.897827319915950e-02, 9.092583681632396e-50, 4.803201276088799e-23, 4.763637692033264e+00, 1.204469737208259e-13, 1.204469737208182e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
