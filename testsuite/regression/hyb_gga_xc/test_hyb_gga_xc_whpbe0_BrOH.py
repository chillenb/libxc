
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_whpbe0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.259154068812228e+00, -5.259160770425826e+00, -5.259208718699177e+00, -5.259098619175886e+00, -5.259157452126505e+00, -5.259157452126505e+00, -8.815669481841572e-01, -8.815637773075249e-01, -8.815127080913060e-01, -8.817853174992180e-01, -8.815690199286899e-01, -8.815690199286899e-01, -1.726831078634555e-01, -1.724760025054670e-01, -1.676940389773219e-01, -1.690431312304501e-01, -1.726075130244168e-01, -1.726075130244168e-01, -3.763012272071578e-02, -3.852534788909451e-02, -2.082372515388768e-01, -2.271462927147433e-02, -3.789841728107643e-02, -3.789841728107643e-02, -1.077571034883087e-05, -1.246701053008919e-05, -1.702366996777019e-03, -1.141918752030449e-06, -1.206764115264244e-05, -1.206764115264244e-05, -1.288670045947571e+00, -1.288725160188910e+00, -1.288676737889971e+00, -1.288719562791714e+00, -1.288696560544569e+00, -1.288696560544569e+00, -5.208558663718981e-01, -5.236732902918639e-01, -5.206371392878203e-01, -5.228239025441022e-01, -5.230830801848771e-01, -5.230830801848771e-01, -1.552534445892862e-01, -1.785512366642925e-01, -1.470648925176846e-01, -1.612717783235492e-01, -1.621602440180507e-01, -1.621602440180507e-01, -1.349168139578706e-02, -3.765271209593430e-02, -1.305163208260205e-02, -4.968143932287998e-01, -1.730336298749986e-02, -1.730336298749986e-02, -1.024850620321777e-06, -1.532839353132650e-06, -6.455717021235651e-07, -4.553345128769588e-03, -1.159356845822953e-06, -1.159356845822955e-06, -1.748641608154959e-01, -1.702257975823223e-01, -1.717972878680709e-01, -1.730793598624137e-01, -1.724305704036364e-01, -1.724305704036364e-01, -1.704531438293111e-01, -1.308146710377178e-01, -1.400004519821346e-01, -1.500297470718894e-01, -1.447678601437144e-01, -1.447678601437144e-01, -1.859085446702625e-01, -5.131413152128705e-02, -6.414770302332623e-02, -8.934541812122059e-02, -7.566256395914532e-02, -7.566256395914527e-02, -1.173689362048496e-01, -1.322613908074823e-03, -3.426027195436320e-03, -8.715469506016681e-02, -8.602943930676040e-03, -8.602943930676043e-03, -1.776243154525436e-05, -3.125714018938886e-08, -2.145699929279849e-07, -7.670984264940807e-03, -7.111999904794119e-07, -7.111999903904961e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_whpbe0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.384445640813092e+00, -6.384468230516310e+00, -6.384569651058237e+00, -6.384199727217442e+00, -6.384457548478003e+00, -6.384457548478003e+00, -1.090264973022314e+00, -1.090279598991175e+00, -1.090723535524948e+00, -1.090174127398664e+00, -1.090276824176991e+00, -1.090276824176991e+00, -2.375443717708543e-01, -2.369469697813569e-01, -2.206497954622963e-01, -2.227215786862833e-01, -2.373284508329535e-01, -2.373284508329535e-01, -6.289787353111582e-02, -6.523835933853031e-02, -2.882071052146399e-01, -3.221493768100062e-02, -6.361518371638084e-02, -6.361518371638084e-02, -2.251362650967113e-05, -2.616215623778750e-05, -3.399462359157739e-03, -2.301180933676099e-06, -2.532273740227483e-05, -2.532273740227483e-05, -1.650471140639746e+00, -1.651318783052048e+00, -1.650557376601504e+00, -1.651216470536015e+00, -1.650906362346784e+00, -1.650906362346784e+00, -5.904499258148176e-01, -5.956104756731526e-01, -5.871111339762763e-01, -5.911081309358011e-01, -5.984010247619502e-01, -5.984010247619502e-01, -2.277674366716011e-01, -2.480604635074168e-01, -2.171782802667281e-01, -2.293537864291710e-01, -2.366218633887755e-01, -2.366218633887755e-01, -1.914796417579133e-02, -5.147859059963433e-02, -1.870559539330238e-02, -6.732471634984656e-01, -2.439884114987570e-02, -2.439884114987570e-02, -2.064907301842617e-06, -3.095385168937420e-06, -1.309597642827226e-06, -7.834752446700916e-03, -2.344522045824119e-06, -2.344522045821340e-06, -2.333060518940821e-01, -2.354377749033161e-01, -2.349477627961149e-01, -2.343709964423175e-01, -2.346824319546485e-01, -2.346824319546485e-01, -2.257401094199523e-01, -1.935071896322451e-01, -2.080384072678179e-01, -2.191238992266160e-01, -2.139238218664349e-01, -2.139238218664349e-01, -2.589782817219434e-01, -7.252450339681638e-02, -9.632137022896035e-02, -1.410709952432613e-01, -1.184576111073367e-01, -1.184576111073367e-01, -1.763236344252144e-01, -2.723002633659454e-03, -6.208843147523563e-03, -1.397994792652261e-01, -1.325788350112021e-02, -1.325788350112025e-02, -3.746184669649675e-05, -6.260827021802010e-08, -4.308779792540903e-07, -1.212500075876241e-02, -1.438937032832957e-06, -1.438937032742806e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_whpbe0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.570424481627478e-09, -1.570410815268991e-09, -1.570337328892145e-09, -1.570561359521824e-09, -1.570417379108641e-09, -1.570417379108641e-09, -1.296972084632765e-06, -1.296849786520581e-06, -1.293300690736225e-06, -1.298503659171865e-06, -1.296891255812882e-06, -1.296891255812882e-06, 2.152393126928229e-04, 2.009348215531760e-04, -1.587475466841948e-04, -1.451922499017481e-04, 2.100903694547806e-04, 2.100903694547806e-04, 6.542893035621972e-02, 7.574232678605347e-02, 2.223163245614425e-04, -5.436088995937330e-02, 6.871179309991304e-02, 6.871179309991304e-02, 2.858816311208683e-02, 3.061641477144076e-02, -8.675879405966661e-02, 5.509904923205205e-03, 3.198115967956618e-02, 3.198115967956618e-02, -2.361132670418017e-07, -2.343451280663719e-07, -2.359367923938487e-07, -2.345621007340846e-07, -2.352042964863986e-07, -2.352042964863986e-07, -1.229750016797450e-05, -1.196943879858768e-05, -1.245215265090406e-05, -1.219720869228345e-05, -1.185782321814660e-05, -1.185782321814660e-05, 3.347174203934882e-03, 5.731031048590820e-03, 4.063702589715769e-03, 7.199014130902699e-03, 3.212959070025570e-03, 3.212959070025570e-03, -1.234973178655036e-01, -2.002946915897102e-02, -1.295572961675902e-01, 3.148306844354888e-05, -9.592563303719412e-02, -9.592563303719412e-02, 5.680124915239026e-03, 7.067020331576202e-03, 2.144167251346250e-02, -1.557585649887883e-01, 1.092986683485223e-02, 1.092986683513182e-02, 9.377140045992514e-03, 7.691177254540416e-03, 8.239192919902584e-03, 8.703656899655850e-03, 8.466710040820813e-03, 8.466710040820811e-03, 1.115536642893789e-02, 3.257440132151815e-03, 4.847668165255034e-03, 6.681005478243916e-03, 5.724946788702119e-03, 5.724946788702122e-03, 4.481678147456657e-03, -2.862169062588626e-03, 8.324356940605140e-03, 1.780781452688649e-02, 1.534137846210342e-02, 1.534137846210340e-02, 5.158669499277177e-03, -6.344247922079525e-02, -1.259485083263374e-01, 3.794942739593603e-02, -1.645054283782884e-01, -1.645054283782869e-01, 2.280146037678741e-02, 1.779789143204499e-03, 4.325674477391973e-03, -1.724070312247874e-01, 1.479835414224255e-02, 1.479835414141626e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
