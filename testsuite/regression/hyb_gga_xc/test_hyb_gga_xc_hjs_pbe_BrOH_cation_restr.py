
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.577603969215946e+01, -1.577606109990494e+01, -1.577620573768935e+01, -1.577588621707288e+01, -1.577604660361221e+01, -1.577604660361221e+01, -2.662088583460043e+00, -2.662065248442846e+00, -2.661590006573719e+00, -2.662911630632181e+00, -2.662123427834367e+00, -2.662123427834367e+00, -5.659146990358761e-01, -5.656950096322263e-01, -5.618681087556694e-01, -5.656909854025188e-01, -5.644462388162816e-01, -5.644462388162816e-01, -1.828754896885084e-01, -1.842499105595108e-01, -6.491873372089065e-01, -1.536365902861825e-01, -1.647571373406843e-01, -1.647571373406843e-01, -1.008009606616907e-02, -1.060791005648167e-02, -5.454258740364740e-02, -5.826890637481654e-03, -7.319807756363312e-03, -7.319807756363312e-03, -3.850389716326146e+00, -3.850137422877930e+00, -3.850385157660189e+00, -3.850162303699666e+00, -3.850257740036353e+00, -3.850257740036353e+00, -1.622014983658972e+00, -1.629830016961072e+00, -1.622063852096092e+00, -1.628953201123256e+00, -1.626322821863891e+00, -1.626322821863891e+00, -4.896937208159374e-01, -5.232153644072809e-01, -4.577245547376229e-01, -4.694592103655019e-01, -4.958976177042932e-01, -4.958976177042932e-01, -1.192796941140795e-01, -1.918241309282156e-01, -1.122001370122899e-01, -1.447449003986614e+00, -1.322157067951622e-01, -1.322157067951622e-01, -4.496540274154304e-03, -5.696320346821614e-03, -4.355680329854067e-03, -8.162942278312553e-02, -5.246948203765808e-03, -5.246948203765804e-03, -4.885172546874630e-01, -4.855475140964959e-01, -4.865079836350562e-01, -4.873659141675989e-01, -4.869286144668300e-01, -4.869286144668300e-01, -4.770376654309963e-01, -4.254095228141307e-01, -4.376956266500889e-01, -4.513964401259645e-01, -4.441160964137816e-01, -4.441160964137816e-01, -5.458647929221494e-01, -2.278579757507232e-01, -2.581882257084569e-01, -3.130205964157096e-01, -2.830099750172735e-01, -2.830099750172734e-01, -3.951274096246983e-01, -5.252703210402612e-02, -6.849916356467285e-02, -3.001307964886470e-01, -9.826071746867343e-02, -9.826071746867347e-02, -1.420697903640516e-02, -1.523238613914474e-03, -3.196960818812225e-03, -9.365391527728564e-02, -4.855255366372047e-03, -4.855255366372046e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.899969182640238e+01, -1.899976761067125e+01, -1.900008356280741e+01, -1.899895648607894e+01, -1.899955002801180e+01, -1.899955002801180e+01, -3.152562032398762e+00, -3.152602759886773e+00, -3.153619391314347e+00, -3.152429136712603e+00, -3.152684026910643e+00, -3.152684026910643e+00, -6.636056545736204e-01, -6.623658830290869e-01, -6.323997397875335e-01, -6.376704907650352e-01, -6.370743257288620e-01, -6.370743257288620e-01, -1.947924033030938e-01, -1.974883906828015e-01, -7.665133457194750e-01, -1.610360056759094e-01, -1.719028258416023e-01, -1.719028258416024e-01, -1.341846719114604e-02, -1.411797646468598e-02, -6.887110199491035e-02, -7.765247232773898e-03, -9.751134850819448e-03, -9.751134850819444e-03, -4.794735408189001e+00, -4.796992355169018e+00, -4.794835859167452e+00, -4.796828331152408e+00, -4.795881086759447e+00, -4.795881086759447e+00, -1.727950345952613e+00, -1.741867348100978e+00, -1.715055636581623e+00, -1.727145070620256e+00, -1.742130314325830e+00, -1.742130314325830e+00, -6.136933666447475e-01, -6.791746313146756e-01, -5.699779133444997e-01, -6.073257131746904e-01, -6.252218703275191e-01, -6.252218703275191e-01, -1.343530226361480e-01, -1.978829196084275e-01, -1.278390691209154e-01, -1.884012396375600e+00, -1.422407791208621e-01, -1.422407791208621e-01, -5.993375401481559e-03, -7.591174856441591e-03, -5.803771102445810e-03, -9.790128745334899e-02, -6.991179489542348e-03, -6.991179489542344e-03, -6.345512801788921e-01, -6.300702422509210e-01, -6.318774344048398e-01, -6.331933624349274e-01, -6.325567784313625e-01, -6.325567784313625e-01, -6.188960887758014e-01, -5.083942916214177e-01, -5.428772757060770e-01, -5.766155882228888e-01, -5.597375303635508e-01, -5.597375303635508e-01, -7.082546418517142e-01, -2.364613202035061e-01, -2.773991229872011e-01, -3.745168845199440e-01, -3.213622582971569e-01, -3.213622582971571e-01, -4.727801490065491e-01, -6.661812333017955e-02, -8.472723937056224e-02, -3.712316706955398e-01, -1.127333123863307e-01, -1.127333123863308e-01, -1.888334869887703e-02, -2.030838846087976e-03, -4.261630753260599e-03, -1.086719896662022e-01, -6.469510119594863e-03, -6.469510119594873e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.096395586415818e-09, -5.096355482730306e-09, -5.096133785039212e-09, -5.096731330297840e-09, -5.096424401046628e-09, -5.096424401046628e-09, -6.053215020624482e-06, -6.053211033426743e-06, -6.052530968797369e-06, -6.049278415830477e-06, -6.052650052704560e-06, -6.052650052704560e-06, -2.763025966736149e-03, -2.779975689575659e-03, -3.144121178124442e-03, -3.051354169503827e-03, -3.070708913303268e-03, -3.070708913303268e-03, -3.149148157470014e-01, -3.053951193353683e-01, -1.573782806738349e-03, -5.242384451258304e-01, -4.571123106359292e-01, -4.571123106359288e-01, -2.417391483143597e+00, -2.552485366637580e+00, -1.199998353018042e+00, -2.204453829489641e+00, -2.796491148013810e+00, -2.796491148012999e+00, -1.274611329118267e-06, -1.272903128188571e-06, -1.274533675318660e-06, -1.273026030625148e-06, -1.273748109584296e-06, -1.273748109584296e-06, -4.896786952037980e-05, -4.792496385189681e-05, -4.920749571682758e-05, -4.829642543160475e-05, -4.825383917533398e-05, -4.825383917533398e-05, -3.199442905363403e-03, -3.803728307006163e-05, -4.443946997822812e-03, -5.787183634067359e-04, -2.793868139744681e-03, -2.793868139744681e-03, -6.858626876621891e-01, -2.365516341471837e-01, -7.664319129948982e-01, -2.947680440198618e-05, -7.620876151786556e-01, -7.620876151786556e-01, -2.906917140362737e+00, -2.594237861537778e+00, -1.627441074854255e+01, -1.215862982772562e+00, -7.574083837218300e+00, -7.574083837195496e+00, 1.905436073444849e-03, 2.638804532476228e-04, 7.846597213401717e-04, 1.259740644704549e-03, 1.016887619843638e-03, 1.016887619843638e-03, 2.824593075980153e-03, -7.904362460936122e-03, -5.485284897501492e-03, -2.749137572310451e-03, -4.181518137779137e-03, -4.181518137779137e-03, -2.406499763822154e-04, -1.279471949338586e-01, -7.754595379330700e-02, -2.626047674372905e-02, -4.801905024177213e-02, -4.801905024177201e-02, -1.049983784556715e-02, -1.106144640544032e+00, -1.030628863445123e+00, -2.341583114999819e-02, -1.260491629582083e+00, -1.260491629582089e+00, -1.941400015573741e+00, -1.276706957111408e+01, -6.170009971130110e+00, -1.297037787293029e+00, -9.567595045790348e+00, -9.567595045805744e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
