
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_00_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.705877765627584e+00, -9.705890333323286e+00, -9.705977762986771e+00, -9.705790130562454e+00, -9.705883960063364e+00, -9.705883960063364e+00, -1.608184471339430e+00, -1.608168891164323e+00, -1.607848288432191e+00, -1.608712604689672e+00, -1.608204845956759e+00, -1.608204845956759e+00, -2.998004301669780e-01, -2.996045536934734e-01, -2.950465140880190e-01, -2.975973472296998e-01, -2.965664410186007e-01, -2.965664410186007e-01, -5.262638299339255e-02, -5.429776109201580e-02, -3.529652058827324e-01, -2.898523728445999e-02, -4.547897012175459e-02, -4.547897012175454e-02, -7.429208761837672e-03, -7.502425450538722e-03, -1.310211763166758e-02, -6.321212575648585e-03, -6.251593580381938e-03, -6.251593580381934e-03, -2.337235340290982e+00, -2.336961347878472e+00, -2.337227674188397e+00, -2.336985718668152e+00, -2.337093774790559e+00, -2.337093774790559e+00, -9.592967029352931e-01, -9.644288743332372e-01, -9.586978014063031e-01, -9.632406153397696e-01, -9.624181926835764e-01, -9.624181926835764e-01, -2.521957601270415e-01, -2.691240026442390e-01, -2.322871332420957e-01, -2.368453908619906e-01, -2.561148569215436e-01, -2.561148569215436e-01, -9.269303659580853e-03, -4.675919436349264e-02, -8.259649413699600e-03, -8.406411371619649e-01, -1.888200021484389e-02, -1.888200021484389e-02, -5.594858195202745e-03, -6.104378418475327e-03, -4.103364633568361e-03, -8.776120703690658e-03, -4.875779040426468e-03, -4.875779040426470e-03, -2.454730392201447e-01, -2.456903382495090e-01, -2.456364049361213e-01, -2.455721556020742e-01, -2.456060908233831e-01, -2.456060908233831e-01, -2.377443224269667e-01, -2.110913725309311e-01, -2.195990212919118e-01, -2.272709098573803e-01, -2.234041911690790e-01, -2.234041911690790e-01, -2.834578682663663e-01, -7.191301725274044e-02, -9.693492296718374e-02, -1.400480675910399e-01, -1.178376976562239e-01, -1.178376976562239e-01, -1.919067671616197e-01, -1.337629912445080e-02, -9.861246991765037e-03, -1.333026654680371e-01, -1.033317463255724e-02, -1.033317463255724e-02, -8.745291795019707e-03, -3.266546355300925e-03, -4.455575788989211e-03, -9.764921476689744e-03, -4.593482480543869e-03, -4.593482480543865e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_00_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.163744686332996e+01, -1.163743319059064e+01, -1.163749691956505e+01, -1.163746983117146e+01, -1.163764875265354e+01, -1.163768815907994e+01, -1.163707998547768e+01, -1.163696737573606e+01, -1.163747447867824e+01, -1.163725074526197e+01, -1.163747447867824e+01, -1.163725074526197e+01, -1.897838604571122e+00, -1.897869228549015e+00, -1.897854109978786e+00, -1.897884915605818e+00, -1.898233372331748e+00, -1.898319283168958e+00, -1.897884521828168e+00, -1.897966390018334e+00, -1.897548932637693e+00, -1.898286587394587e+00, -1.897548932637693e+00, -1.898286587394587e+00, -3.736434024572511e-01, -3.736225725617286e-01, -3.732976793927245e-01, -3.732558610942760e-01, -3.651071060100404e-01, -3.657919954581607e-01, -3.683770523784953e-01, -3.681446982618995e-01, -3.667009929730213e-01, -3.741110135680852e-01, -3.667009929730213e-01, -3.741110135680852e-01, -1.007230763513421e-01, -9.880237933517265e-02, -1.014282965977085e-01, -9.935498498314027e-02, -4.318862264522144e-01, -4.375487140233105e-01, -8.258186603222675e-02, -8.237441967595989e-02, -7.130704302564944e-02, -1.075654786337769e-01, -7.130704302564939e-02, -1.075654786337769e-01, -3.872205483248588e-03, -3.536266545690583e-03, -4.037938409770790e-03, -3.636067318073803e-03, -1.369295046668527e-02, -1.305882344007330e-02, -2.487538034075033e-03, -2.546102544630857e-03, -2.214312710370672e-03, -3.936065218802333e-03, -2.214312710370668e-03, -3.936065218802332e-03, -2.882310197381226e+00, -2.881651596298537e+00, -2.883428647174417e+00, -2.882735599872314e+00, -2.882371467444027e+00, -2.881690160300404e+00, -2.883333798744573e+00, -2.882672162773133e+00, -2.882882188943412e+00, -2.882196479144359e+00, -2.882882188943412e+00, -2.882196479144359e+00, -1.056000706522982e+00, -1.055962360244316e+00, -1.063879559209387e+00, -1.063672997258593e+00, -1.049310355612793e+00, -1.050281571270452e+00, -1.056093031771070e+00, -1.057166689774101e+00, -1.064808808131094e+00, -1.061894555987768e+00, -1.064808808131094e+00, -1.061894555987768e+00, -3.261539380457005e-01, -3.256859414481567e-01, -3.573839961253564e-01, -3.575029802930769e-01, -2.986691748830558e-01, -3.035005400675838e-01, -3.116220068002278e-01, -3.173031163570779e-01, -3.357188234454762e-01, -3.268098077720200e-01, -3.357188234454762e-01, -3.268098077720200e-01, -6.175349666320375e-02, -6.127439863613481e-02, -1.122626498788747e-01, -1.120523809547646e-01, -5.563633243923949e-02, -5.514474013775844e-02, -1.086867458031892e+00, -1.086475967699023e+00, -7.001546945218388e-02, -6.465047101623086e-02, -7.001546945218388e-02, -6.465047101623086e-02, -2.104785675377792e-03, -2.032707906652287e-03, -2.466744352931535e-03, -2.433152006460393e-03, -1.875611442494197e-03, -1.724241294231071e-03, -2.939198509491179e-02, -2.958536301001077e-02, -2.648578937531562e-03, -1.787359237586379e-03, -2.648578937531564e-03, -1.787359237586379e-03, -3.307555978719051e-01, -3.315224785505095e-01, -3.274464819107719e-01, -3.281901593724600e-01, -3.285481120934621e-01, -3.293040295893060e-01, -3.295088787867128e-01, -3.302645219019372e-01, -3.290224724203679e-01, -3.297783424571462e-01, -3.290224724203679e-01, -3.297783424571462e-01, -3.219309689073141e-01, -3.225544987518154e-01, -2.738907661176015e-01, -2.742186448299330e-01, -2.854604636857000e-01, -2.859351502727203e-01, -2.985204164974722e-01, -2.990465616678811e-01, -2.916395034825717e-01, -2.921427056470123e-01, -2.916395034825717e-01, -2.921427056470123e-01, -3.748489216157680e-01, -3.752589193229555e-01, -1.360381135456872e-01, -1.356821581376984e-01, -1.548587643201517e-01, -1.541180975662727e-01, -1.918823059355349e-01, -1.920455234751943e-01, -1.706431989691389e-01, -1.704531142954464e-01, -1.706431989691389e-01, -1.704531142954464e-01, -2.518661664368199e-01, -2.522171519817940e-01, -1.272407672650352e-02, -1.264001757995016e-02, -2.051350944785993e-02, -2.038484678260386e-02, -1.821618768065179e-01, -1.826309497186129e-01, -4.256758124482093e-02, -4.044097868174928e-02, -4.256758124482091e-02, -4.044097868174926e-02, -4.972920780914152e-03, -4.690018930400787e-03, -9.447822594080053e-04, -8.908062064880744e-04, -1.615142518849504e-03, -1.500221474698158e-03, -3.807729052569471e-02, -3.806644300158279e-02, -2.362473922749219e-03, -1.721064672450338e-03, -2.362473922749218e-03, -1.721064672450335e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_00_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.588631440958814e-09, 1.170921901630798e-11, -6.588668359334415e-09, -6.588595165844857e-09, 1.170905209862770e-11, -6.588641533453387e-09, -6.588395617574715e-09, 1.170825853081313e-11, -6.588381612882489e-09, -6.588813203656407e-09, 1.171074319828009e-11, -6.588906567688081e-09, -6.588617099815917e-09, 1.170944866948430e-11, -6.588634215212275e-09, -6.588617099815917e-09, 1.170944866948430e-11, -6.588634215212275e-09, -8.046076413853666e-06, 1.522198110828852e-07, -8.049131581343910e-06, -8.046318761545937e-06, 1.522180609451604e-07, -8.049597484667724e-06, -8.054363246895775e-06, 1.521577403603697e-07, -8.056403417557234e-06, -8.035240791523504e-06, 1.521086588024419e-07, -8.037811530403412e-06, -8.049421221714020e-06, 1.521993088564237e-07, -8.045120991110353e-06, -8.049421221714020e-06, 1.521993088564237e-07, -8.045120991110353e-06, -3.065981600883081e-03, 9.156269431464273e-04, -3.127358892691176e-03, -3.054597669929169e-03, 9.209252548004489e-04, -3.130068982198559e-03, -3.011628482030529e-03, 1.056600192911137e-03, -2.898278254210383e-03, -2.877532390973527e-03, 1.012309006242664e-03, -2.913678494866035e-03, -3.426408586838768e-03, 1.101250078216937e-03, -2.308707028559143e-03, -3.426408586838768e-03, 1.101250078216937e-03, -2.308707028559143e-03, 1.533503285662553e-01, 4.810301240313569e-01, 7.494895478484849e-02, 1.415981231709605e-01, 4.544218028627856e-01, 5.742595235704621e-02, -1.873900789187461e-03, 4.258182379418423e-04, -1.955205956212034e-03, 5.402868753298846e-01, 1.340721099014644e+00, 4.778116879374815e-01, -2.149196710155635e-01, 1.905611288558597e+00, 9.470350880347435e-01, -2.149196710155630e-01, 1.905611288558597e+00, 9.470350880347422e-01, -2.001541344750982e+03, 8.895316066464251e-08, -1.676659534498013e+03, -1.776238767657297e+03, 3.650047960779880e-07, -1.455968559475559e+03, -3.070618232299855e+00, 1.470901940249354e+01, -2.485709765651342e+00, -8.438171848701928e+03, 3.309516434001965e-17, -8.788759699272308e+03, -2.776783978457408e+03, 8.566687106440061e-13, -1.825261017962500e+04, -2.776783978457411e+03, 8.566687106440061e-13, -1.825261017962499e+04, -1.900252190999473e-06, 1.786962486214695e-08, -1.901782871740173e-06, -1.901709971126116e-06, 1.785230221855915e-08, -1.903189557404313e-06, -1.900314235024668e-06, 1.786876392504334e-08, -1.901815443212319e-06, -1.901562431229129e-06, 1.785346691978313e-08, -1.903096383480189e-06, -1.901014277743324e-06, 1.786087736638534e-08, -1.902491139181273e-06, -1.901014277743324e-06, 1.786087736638534e-08, -1.902491139181273e-06, -5.555405925853723e-05, 3.283645707255764e-06, -5.555990568187281e-05, -5.452883872747264e-05, 3.159222184062127e-06, -5.455556664537381e-05, -5.544933043381715e-05, 3.378561526267594e-06, -5.560432699160487e-05, -5.456302412722908e-05, 3.264566151576644e-06, -5.469501746752654e-05, -5.511992440905845e-05, 3.173117960067727e-06, -5.489743976868069e-05, -5.511992440905845e-05, 3.173117960067727e-06, -5.489743976868069e-05, -6.129834663412067e-03, 1.802917287904232e-03, -6.149861661133668e-03, -6.096658742501427e-03, 1.186362907067854e-03, -6.116531485761376e-03, -7.566686962018719e-03, 2.714524432192392e-03, -7.644022506016356e-03, -9.061182778650376e-03, 2.229497722738333e-03, -8.615441222476273e-03, -5.921751059825299e-03, 1.737119809711693e-03, -6.171985964861301e-03, -5.921751059825295e-03, 1.737119809711693e-03, -6.171985964861302e-03, 1.856793296171398e+00, 4.291465087373047e+00, 1.745439559580964e+00, 1.645547540018349e-01, 4.742450082938537e-01, 1.542451402053435e-01, 2.514239614224644e+00, 5.336504260489829e+00, 1.856428523962377e+00, -1.056724450709794e-04, 3.640619391245422e-06, -1.058410697898270e-04, 1.313649772271755e+00, 2.689899855445115e+00, 8.115038618294276e-01, 1.313649772271755e+00, 2.689899855445115e+00, 8.115038618294276e-01, -2.124263862538617e+04, 4.337197358748850e-24, -1.825995309933201e+04, -9.943333421576135e+03, 9.830071088906683e-18, -9.311882879003269e+03, -3.738397310195756e+04, 4.525152496052403e-25, -3.265922415582706e+04, 3.855818156168670e+00, 1.203735441252615e+01, 3.791320963577052e+00, -2.892458952831924e+04, 7.688258230181658e-20, -1.155061102377553e+04, -2.892458952831921e+04, 7.688258230181657e-20, -1.155061102377553e+04, -8.909327294154341e-03, 1.759741743353345e-03, -8.865674288845247e-03, -8.209100054478339e-03, 1.811428904116244e-03, -8.180455017598993e-03, -8.419949431679773e-03, 1.793042480521180e-03, -8.388198306390751e-03, -8.621561948722115e-03, 1.778055187180908e-03, -8.582133382166643e-03, -8.517562111400079e-03, 1.785538369210363e-03, -8.482004572868856e-03, -8.517562111400079e-03, 1.785538369210363e-03, -8.482004572868856e-03, -1.018159201529766e-02, 2.020222622931241e-03, -1.012423120418597e-02, -8.431550439941170e-03, 4.318290823292903e-03, -8.504354642939853e-03, -8.702584473490742e-03, 3.438429128533064e-03, -8.748866368424427e-03, -9.058579748117726e-03, 2.766720744875148e-03, -9.048510459586644e-03, -8.889610289974230e-03, 3.088193481820850e-03, -8.890560765230373e-03, -8.889610289974230e-03, 3.088193481820850e-03, -8.890560765230373e-03, -5.107883896345287e-03, 9.331636514841414e-04, -5.123511377486635e-03, 3.757236606381366e-02, 1.818437840205231e-01, 3.218695404230312e-02, -2.397290557162010e-03, 8.219520767271887e-02, -7.141124678559278e-03, -2.013110765083264e-02, 2.306941174037591e-02, -2.066312064567255e-02, -1.739358743098389e-02, 4.400598182035384e-02, -1.751211406279343e-02, -1.739358743098385e-02, 4.400598182035385e-02, -1.751211406279349e-02, -1.060670629246943e-02, 6.480571492045700e-03, -1.081617623805157e-02, -4.136446633686046e+00, 1.413226829386496e+01, -4.035458872970805e+00, 3.519067411478681e+00, 1.503042594465832e+01, 3.118516092523220e+00, -2.652112414203102e-02, 2.743131737750601e-02, -2.813899048815489e-02, 3.283946252987557e+00, 7.761150429041237e+00, 2.373416892948657e+00, 3.283946252987557e+00, 7.761150429041237e+00, 2.373416892948654e+00, -6.716368692167918e+02, 2.733982982891423e-04, -6.101437178583901e+02, -6.279951140996573e+05, 2.280091625569450e-85, -7.307510500741469e+05, -7.046740064731149e+04, 1.329850118836145e-36, -6.001866548576549e+04, 3.255873959469510e+00, 8.823116638038448e+00, 3.011873378163059e+00, -4.141017253541783e+04, 6.543051709497199e-22, -1.499558865091482e+04, -4.141017253541793e+04, 6.543051709496857e-22, -1.499558865091487e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
