
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hpbeint_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.714105467051075e+01, -1.714108654375621e+01, -1.714126824747861e+01, -1.714079321842124e+01, -1.714103643254058e+01, -1.714103643254058e+01, -2.863739547740356e+00, -2.863725297222492e+00, -2.863465414861377e+00, -2.864452979599505e+00, -2.863790383310278e+00, -2.863790383310278e+00, -5.914060461305291e-01, -5.910409003816164e-01, -5.838013118947246e-01, -5.880092951785633e-01, -5.867681691779012e-01, -5.867681691779012e-01, -1.794247415085749e-01, -1.807880280817560e-01, -6.820115360365940e-01, -1.503775346666412e-01, -1.611712665962972e-01, -1.611712665962972e-01, -8.406214025002244e-03, -8.847136145783707e-03, -4.806619027896764e-02, -4.856882142964818e-03, -6.102116359319524e-03, -6.102116359319524e-03, -4.191892991740460e+00, -4.192057930698679e+00, -4.191906208509743e+00, -4.192051706951244e+00, -4.191973255674231e+00, -4.191973255674231e+00, -1.708872069886654e+00, -1.717889650193560e+00, -1.707351814835470e+00, -1.715261086851454e+00, -1.714653520400499e+00, -1.714653520400499e+00, -5.148604931464290e-01, -5.562282242774060e-01, -4.793677112145372e-01, -4.965547246935695e-01, -5.222709502824521e-01, -5.222709502824521e-01, -1.154784994910550e-01, -1.901749764837043e-01, -1.079842981568638e-01, -1.575482382930140e+00, -1.284335899635494e-01, -1.284335899635494e-01, -3.747639214893642e-03, -4.747997945135551e-03, -3.630206177912104e-03, -7.567281792923475e-02, -4.373285770728413e-03, -4.373285770728413e-03, -5.188653642534993e-01, -5.148429262203419e-01, -5.161907201395446e-01, -5.173561173713401e-01, -5.167666836905517e-01, -5.167666836905517e-01, -5.063718263169346e-01, -4.410964696846552e-01, -4.571987955006556e-01, -4.750261740690339e-01, -4.656504863406982e-01, -4.656504863406982e-01, -5.809917415057622e-01, -2.271155959985822e-01, -2.586646800352182e-01, -3.198201205689098e-01, -2.858130959456837e-01, -2.858130959456837e-01, -4.084468404203349e-01, -4.609902477065888e-02, -6.207957766452150e-02, -3.074987815426345e-01, -9.307070259308932e-02, -9.307070259308935e-02, -1.185801779363916e-02, -1.269386300903582e-03, -2.664321876910887e-03, -8.824510521875746e-02, -4.046702102263862e-03, -4.046702102263862e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hpbeint_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.141865486830242e+01, -2.141873643368935e+01, -2.141908175823802e+01, -2.141786857750293e+01, -2.141850672175269e+01, -2.141850672175269e+01, -3.537398173230916e+00, -3.537442234149415e+00, -3.538544686034085e+00, -3.537279225909435e+00, -3.537533705185073e+00, -3.537533705185073e+00, -7.241521504697004e-01, -7.227023037117180e-01, -6.858245306505329e-01, -6.919666870237468e-01, -6.914430950187055e-01, -6.914430950187055e-01, -1.881909040427054e-01, -1.919070493662574e-01, -8.406234106537248e-01, -1.501607765063357e-01, -1.614682046798200e-01, -1.614682046798200e-01, -1.119456401328640e-02, -1.177974191273086e-02, -6.207809307423799e-02, -6.473318486896672e-03, -8.130514037682829e-03, -8.130514037682833e-03, -5.370711044780068e+00, -5.372867265542899e+00, -5.370808314151565e+00, -5.372711890384245e+00, -5.371805279563399e+00, -5.371805279563399e+00, -1.902887803993535e+00, -1.920367495709115e+00, -1.883649020015016e+00, -1.899032682211130e+00, -1.921943618536485e+00, -1.921943618536485e+00, -6.659125487329971e-01, -7.321389936660728e-01, -6.173773062361839e-01, -6.533057749689946e-01, -6.781817986511903e-01, -6.781817986511903e-01, -1.282430280891849e-01, -1.869498106069189e-01, -1.220936819757145e-01, -2.076144187713328e+00, -1.329122757937327e-01, -1.329122757937327e-01, -4.995520896171393e-03, -6.328105513383859e-03, -4.837410721761646e-03, -9.219211839066277e-02, -5.827631186254953e-03, -5.827631186254954e-03, -6.808423954270768e-01, -6.774213907136740e-01, -6.788311136818200e-01, -6.798323025953568e-01, -6.793505544321395e-01, -6.793505544321395e-01, -6.632020837165908e-01, -5.492156183157562e-01, -5.871918232491520e-01, -6.219254023427798e-01, -6.048243623471240e-01, -6.048243623471240e-01, -7.648225822595459e-01, -2.292673605308661e-01, -2.805644030041930e-01, -3.983531047389051e-01, -3.353245488396217e-01, -3.353245488396217e-01, -5.090590725083807e-01, -5.977644690740990e-02, -7.857073046461886e-02, -3.946281665044846e-01, -1.064981251704846e-01, -1.064981251704846e-01, -1.577611985731243e-02, -1.692406710581616e-03, -3.551732329502331e-03, -1.026869104005615e-01, -5.392560690202293e-03, -5.392560690202286e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hpbeint_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.587171334575380e-09, -3.587128167104064e-09, -3.586929976518161e-09, -3.587572355066658e-09, -3.587236646855387e-09, -3.587236646855387e-09, -4.249909095079215e-06, -4.249697430908657e-06, -4.244393248316638e-06, -4.250542841332428e-06, -4.249268447747173e-06, -4.249268447747173e-06, -1.956548551672383e-03, -1.979412787116963e-03, -2.535628891123044e-03, -2.448903820058328e-03, -2.456018556972418e-03, -2.456018556972418e-03, -3.603816203045872e-01, -3.428017692075446e-01, -1.083016666268774e-03, -6.710916942548664e-01, -5.643488919954638e-01, -5.643488919954636e-01, -2.027375862857040e+00, -2.141492724195397e+00, -1.203379223086084e+00, -1.844194957044818e+00, -2.341908287248836e+00, -2.341908287247084e+00, -8.000105855285380e-07, -7.976015390442886e-07, -7.999068483110854e-07, -7.977803465651671e-07, -7.987881960370543e-07, -7.987881960370543e-07, -4.252834218984688e-05, -4.134243653675055e-05, -4.341632175975676e-05, -4.235572980767630e-05, -4.143387992296279e-05, -4.143387992296279e-05, -1.244921840625853e-03, 1.373283523845375e-03, -1.934885580699265e-03, 1.749655273640432e-03, -9.032220051137969e-04, -9.032220051137969e-04, -8.606144703514289e-01, -2.960512183814319e-01, -9.480869299250072e-01, -5.346725185206257e-06, -9.827153226099389e-01, -9.827153226099389e-01, -2.430417059250564e+00, -2.170382986990032e+00, -1.362227791405284e+01, -1.378910647093329e+00, -6.340100137647592e+00, -6.340100137639650e+00, 3.444930004259942e-03, 2.172349149329990e-03, 2.588253129638970e-03, 2.957386470516425e-03, 2.769868872780074e-03, 2.769868872780074e-03, 4.380069764966434e-03, -5.176817956826599e-03, -2.530297474289251e-03, 1.009778962813845e-04, -1.221002800040933e-03, -1.221002800040933e-03, 9.651627822931273e-04, -1.500461749476955e-01, -7.966397614812928e-02, -1.732814714968207e-02, -4.164981137003099e-02, -4.164981137003098e-02, -6.842380072509863e-03, -1.096681911748437e+00, -1.102574100641049e+00, -1.017442176973691e-02, -1.528193924969410e+00, -1.528193924969412e+00, -1.632873810851789e+00, -1.065789553274060e+01, -5.156432056501639e+00, -1.547313787440158e+00, -8.008122055060406e+00, -8.008122055067249e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
