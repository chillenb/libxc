
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_o3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.213383899094673e+01, -4.213394430460760e+01, -4.213447126113037e+01, -4.213290314526034e+01, -4.213371647140353e+01, -4.213371647140353e+01, -6.422311137156656e+00, -6.422316913535614e+00, -6.422619933356020e+00, -6.423413482212903e+00, -6.422485832419143e+00, -6.422485832419143e+00, -8.589534394491450e-01, -8.575145472375616e-01, -8.224301310157284e-01, -8.326810045612648e-01, -8.305779531384710e-01, -8.305779531384710e-01, -6.214304084258465e-02, -6.514544250931371e-02, -1.070801113998808e+00, -2.397498125120991e-02, -3.846598471249471e-02, -3.846598471249470e-02, -1.567532870570453e-03, -1.643439167653617e-03, -2.954304140539694e-03, -9.392602924948050e-04, -1.163614190682429e-03, -1.163614190682429e-03, -9.817978690877938e+00, -9.818736481392259e+00, -9.818026485056507e+00, -9.818695553667139e+00, -9.818358081305441e+00, -9.818358081305441e+00, -3.393308664095960e+00, -3.421703255613120e+00, -3.372566906542224e+00, -3.397686025536243e+00, -3.419004341184728e+00, -3.419004341184728e+00, -7.037542941103203e-01, -7.864797606371063e-01, -6.240293665369836e-01, -6.584340966161220e-01, -7.209499979136471e-01, -7.209499979136471e-01, 2.072001680258700e-03, -5.362225698977890e-02, 3.420465660129277e-03, -3.230349620878043e+00, -9.939916740343236e-03, -9.939916740343236e-03, -7.351656995407693e-04, -9.194287934747999e-04, -7.134063382877385e-04, 2.335740907920765e-03, -8.509221302382369e-04, -8.509221302382369e-04, -6.732354327290515e-01, -6.932981553854790e-01, -6.910417496839092e-01, -6.866518051823598e-01, -6.892550301907311e-01, -6.892550301907311e-01, -6.094500692978428e-01, -5.324041820879905e-01, -5.749539228965088e-01, -6.157994715220617e-01, -5.952430952151129e-01, -5.952430952151129e-01, -8.443782261802401e-01, -1.024907008869611e-01, -1.607260781597770e-01, -2.896076139696824e-01, -2.186209131937198e-01, -2.186209131937197e-01, -4.640421856070440e-01, -3.193167233935926e-03, 1.226284266901038e-03, -2.721296826268141e-01, 5.887008857767525e-04, 5.887008857768145e-04, -2.151159205286147e-03, -2.599880493520929e-04, -5.312042751317576e-04, 1.199112664792557e-03, -7.907302832855565e-04, -7.907302832855553e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_o3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.512864757932003e+01, -5.512874842097509e+01, -5.512933179535541e+01, -5.512782851576330e+01, -5.512859707581996e+01, -5.512859707581996e+01, -8.621485634111435e+00, -8.621464156614046e+00, -8.621187630110358e+00, -8.623398998640209e+00, -8.621680170518037e+00, -8.621680170518037e+00, -1.289680442389632e+00, -1.288061550777622e+00, -1.249146827549312e+00, -1.262809195531999e+00, -1.259641188093938e+00, -1.259641188093938e+00, -1.442356598977499e-01, -1.473219722457614e-01, -1.574925400041872e+00, -9.663640373559652e-02, -1.124143935562901e-01, -1.124143935562901e-01, -2.050485195623003e-03, -2.148865252000813e-03, -8.987868138643463e-03, -1.233924896677736e-03, -1.526053720409101e-03, -1.526053720409101e-03, -1.289215654772624e+01, -1.289004204768667e+01, -1.289209139474391e+01, -1.289022525737107e+01, -1.289107593462974e+01, -1.289107593462974e+01, -4.697472212740792e+00, -4.733876969023552e+00, -4.672887568808717e+00, -4.705116382947270e+00, -4.729407831189455e+00, -4.729407831189455e+00, -1.059786284557585e+00, -1.127902067215862e+00, -9.524657367532161e-01, -9.718193956238945e-01, -1.080791195835818e+00, -1.080791195835818e+00, -6.088358558513696e-02, -1.559092402722950e-01, -5.362016609214239e-02, -4.199946546398761e+00, -7.098140599014649e-02, -7.098140599014649e-02, -9.675186927291872e-04, -1.208068032949177e-03, -9.390741705759184e-04, -2.500563315913697e-02, -1.118700134983493e-03, -1.118700134983493e-03, -9.045422184753200e-01, -1.003564569165868e+00, -9.871382978343165e-01, -9.636289397635721e-01, -9.769744066690049e-01, -9.769744066690049e-01, -7.417798981463231e-01, -8.348531412980706e-01, -8.856341383735997e-01, -9.302615951199632e-01, -9.086128995906776e-01, -9.086128995906776e-01, -1.208426109668975e+00, -2.292340227392819e-01, -3.092170363354193e-01, -4.843974782250179e-01, -3.869758928294601e-01, -3.869758928294603e-01, -7.379964562752498e-01, -8.325451746435055e-03, -1.573595727890503e-02, -4.516279965240429e-01, -3.815434386245141e-02, -3.815434386245135e-02, -2.805932147838258e-03, -3.440606623360784e-04, -7.005363008129751e-04, -3.430778340649338e-02, -1.040116292359870e-03, -1.040116292359868e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_o3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.122426018870408e-09, -3.122575032379287e-09, -3.122932344326833e-09, -3.120722287551922e-09, -3.121923422337244e-09, -3.121923422337244e-09, -1.932060162917935e-06, -1.932889109154473e-06, -1.951998039679135e-06, -1.917561544117518e-06, -1.932879193594189e-06, -1.932879193594189e-06, 3.689384649455599e-04, 3.781518697856994e-04, 5.776759560890425e-04, 5.480750983471291e-04, 5.506743487258977e-04, 5.506743487258977e-04, 2.771542663459982e-01, 2.614719311426852e-01, 8.945901111113904e-05, 7.604252064728099e-01, 5.041844432995154e-01, 5.041844432995155e-01, 4.534742841079863e-08, 1.874968574517607e-07, 7.759315225477210e+00, -3.632564715669680e-11, -1.143935695481309e-10, -1.143935695175625e-10, -1.527930295086152e-06, -1.551411884471436e-06, -1.528880924339838e-06, -1.549604434955015e-06, -1.539836028546099e-06, -1.539836028546099e-06, -1.913820684202751e-07, -3.592536083334591e-07, 1.450497744697343e-07, -8.906104102645956e-10, -4.583065034512980e-07, -4.583065034512980e-07, -3.154736408421676e-04, -1.495218502167902e-02, 3.060339696997282e-04, -1.079253095752801e-02, -7.056303292911571e-04, -7.056303292911571e-04, 2.371958220546828e+00, 2.756769270110511e-01, 2.916407648527525e+00, -3.845574729537170e-04, 1.486852664885878e+00, 1.486852664885878e+00, -1.695959130130252e-11, -3.904832618698522e-11, -8.387413949267863e-11, 6.478657820435941e+00, -8.220345515653019e-11, -8.220345514203657e-11, -1.486013713469519e-01, -2.106109632535669e-02, -3.507951605714928e-02, -5.973436442557468e-02, -4.504425512863577e-02, -4.504425512863577e-02, -5.837507968118648e-01, 2.157194848326298e-03, 8.311358565735400e-04, -2.346380850490750e-03, -2.774229426874958e-04, -2.774229426874958e-04, -1.073814781974134e-02, 1.080972381664000e-01, 4.963170900568743e-02, 1.334592745546969e-02, 2.663303093575815e-02, 2.663303093575808e-02, 3.409457184035907e-03, 7.444391320209026e+00, 8.005507440250089e+00, 1.464327924335360e-02, 4.207108431741264e+00, 4.207108431741263e+00, 1.402901297878536e-04, -9.777802979904993e-13, -9.188672389305985e-12, 4.790588807392480e+00, -7.611442654835933e-11, -7.611442643848882e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
