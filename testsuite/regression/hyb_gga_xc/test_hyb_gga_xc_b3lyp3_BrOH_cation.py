
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.683254453332068e+01, -1.683256834225732e+01, -1.683272538517946e+01, -1.683237010093487e+01, -1.683254898499333e+01, -1.683254898499333e+01, -2.841015802065320e+00, -2.840989502558298e+00, -2.840449701216541e+00, -2.841916851426626e+00, -2.841051555528175e+00, -2.841051555528175e+00, -5.967922958721529e-01, -5.966409258047333e-01, -5.939368439429445e-01, -5.980468472203087e-01, -5.972572817247381e-01, -5.972572817247381e-01, -1.808449308000908e-01, -1.824821844710819e-01, -6.866034390637812e-01, -1.485162446809820e-01, -1.732556413146810e-01, -1.732556413146809e-01, -4.875849981408794e-02, -4.884988213630608e-02, -8.698002152775600e-02, -4.411865013993118e-02, -4.463315131016382e-02, -4.463315131016379e-02, -4.102842561090852e+00, -4.102427590050208e+00, -4.102831732523105e+00, -4.102465269326255e+00, -4.102627726687503e+00, -4.102627726687503e+00, -1.730447339772058e+00, -1.738948022041030e+00, -1.730065027294590e+00, -1.737572156679371e+00, -1.735340519307636e+00, -1.735340519307636e+00, -5.071401073619839e-01, -5.297903956395111e-01, -4.739699894099431e-01, -4.749996353351173e-01, -5.130600297480143e-01, -5.130600297480145e-01, -1.168885151582584e-01, -1.876054292054483e-01, -1.118951903564010e-01, -1.516170180997863e+00, -1.279550081825525e-01, -1.279550081825525e-01, -3.971237457955463e-02, -4.251897398965169e-02, -2.794149942686009e-02, -9.437187220844963e-02, -3.390784961155401e-02, -3.390784961155403e-02, -4.871401186313052e-01, -4.891725457122212e-01, -4.885033593292521e-01, -4.879103675092132e-01, -4.882105975009590e-01, -4.882105975009590e-01, -4.732606066117152e-01, -4.432210833970183e-01, -4.527417880845818e-01, -4.612890190735834e-01, -4.568990389263896e-01, -4.568990389263896e-01, -5.547920547791050e-01, -2.276877842191072e-01, -2.624183574742065e-01, -3.208657003356501e-01, -2.898486743623178e-01, -2.898486743623179e-01, -4.102385042059274e-01, -8.725315137172820e-02, -9.197964472983962e-02, -3.041870718526806e-01, -1.018291207260889e-01, -1.018291207260889e-01, -5.529936963236725e-02, -2.433819882114577e-02, -3.200032991378691e-02, -9.916593264731242e-02, -3.187823783113222e-02, -3.187823783113221e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.035855659876591e+01, -2.035853236577404e+01, -2.035864225235487e+01, -2.035859486255367e+01, -2.035890334722675e+01, -2.035897104804600e+01, -2.035793268561713e+01, -2.035773798353193e+01, -2.035860566736951e+01, -2.035822273547697e+01, -2.035860566736951e+01, -2.035822273547697e+01, -3.346916121171137e+00, -3.346987526865003e+00, -3.346943539260292e+00, -3.347016231599226e+00, -3.347623039028422e+00, -3.347795652478971e+00, -3.346979868968210e+00, -3.347147199431030e+00, -3.346368840995535e+00, -3.347759708327213e+00, -3.346368840995535e+00, -3.347759708327213e+00, -6.832440001441127e-01, -6.851293856388898e-01, -6.821945264546609e-01, -6.844859689065340e-01, -6.647978984637943e-01, -6.624164252038895e-01, -6.683994348991213e-01, -6.691579912595474e-01, -6.815073251542635e-01, -6.589227670661146e-01, -6.815073251542635e-01, -6.589227670661146e-01, -2.001565747475804e-01, -2.011778934795294e-01, -2.018828773803183e-01, -2.032468328110245e-01, -7.815751843136968e-01, -8.012639999584581e-01, -1.656202764443906e-01, -1.661563185712903e-01, -1.735899362940977e-01, -1.758419750465878e-01, -1.735899362940977e-01, -1.758419750465878e-01, -1.556373882936055e-02, -1.558269916004992e-02, -1.595066998377817e-02, -1.595883684470105e-02, -4.910437332336821e-02, -4.972837855597053e-02, -1.164518513273404e-02, -1.168392428935645e-02, -1.315374218793893e-02, -1.141698782741708e-02, -1.315374218793890e-02, -1.141698782741707e-02, -5.064810609127613e+00, -5.063625436004692e+00, -5.066732220962396e+00, -5.065485360860657e+00, -5.064916805985020e+00, -5.063690897983963e+00, -5.066568304056922e+00, -5.065377760505967e+00, -5.065793665631103e+00, -5.064559934938440e+00, -5.065793665631103e+00, -5.064559934938440e+00, -1.864260263663680e+00, -1.864181107440231e+00, -1.878583128070881e+00, -1.878147678054595e+00, -1.850761041999546e+00, -1.853646500810067e+00, -1.863107046649601e+00, -1.866154897916299e+00, -1.881771289593244e+00, -1.874111925427519e+00, -1.881771289593244e+00, -1.874111925427519e+00, -6.123198226671694e-01, -6.112499465156296e-01, -6.751580002366612e-01, -6.755605066557476e-01, -5.605181152008003e-01, -5.743708913600383e-01, -5.931972826363844e-01, -6.064203633760232e-01, -6.330557005318037e-01, -6.111795410500315e-01, -6.330557005318037e-01, -6.111795410500316e-01, -1.289499174727223e-01, -1.287704553569873e-01, -2.121680356264721e-01, -2.122884782456165e-01, -1.186033825839043e-01, -1.201694708759657e-01, -1.939279311289801e+00, -1.938548749380925e+00, -1.422426721611004e-01, -1.388223340019971e-01, -1.422426721611004e-01, -1.388223340019971e-01, -9.814953794133665e-03, -9.974883992957243e-03, -1.125322874034685e-02, -1.135954816527317e-02, -8.010001296005783e-03, -7.853864180335483e-03, -7.815746912816263e-02, -7.866993812339400e-02, -9.600406541585419e-03, -9.546551748581237e-03, -9.600406541585439e-03, -9.546551748581237e-03, -6.318681392222725e-01, -6.336664876488451e-01, -6.235658925368643e-01, -6.253698877118445e-01, -6.263458491408401e-01, -6.281635596020905e-01, -6.287647032534635e-01, -6.305523422029098e-01, -6.275424586822375e-01, -6.293449102673135e-01, -6.275424586822375e-01, -6.293449102673135e-01, -6.175356014836378e-01, -6.189763433232915e-01, -5.131587129637653e-01, -5.145104629099598e-01, -5.393031127700958e-01, -5.409177318586177e-01, -5.680810939427169e-01, -5.694690940388246e-01, -5.531629501091823e-01, -5.545511221825491e-01, -5.531629501091823e-01, -5.545511221825491e-01, -7.047923339544766e-01, -7.059104016745801e-01, -2.539441837420341e-01, -2.541184279856109e-01, -2.918028226683225e-01, -2.923327226686384e-01, -3.712858647940468e-01, -3.723368142578456e-01, -3.274286247400713e-01, -3.272792815388125e-01, -3.274286247400714e-01, -3.272792815388126e-01, -4.748588827777883e-01, -4.767661051683099e-01, -4.795951014253213e-02, -4.802763145818358e-02, -6.326848590895714e-02, -6.398897540063121e-02, -3.590787035311608e-01, -3.619994883233263e-01, -9.851006660257658e-02, -9.776090241482145e-02, -9.851006660257657e-02, -9.776090241482144e-02, -1.953455577768367e-02, -1.949253939770903e-02, -5.176185505397188e-03, -4.762337226211190e-03, -7.797038951791399e-03, -7.499348292370667e-03, -9.216304090831189e-02, -9.277827703917842e-02, -8.554785887269571e-03, -9.103810405754389e-03, -8.554785887269574e-03, -9.103810405754375e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.043401602249309e-08, 1.185558425401183e-11, -1.043407505857723e-08, -1.043395782851073e-08, 1.185541524986055e-11, -1.043403228730844e-08, -1.043364085111230e-08, 1.185461176244829e-11, -1.043361737800369e-08, -1.043430726173668e-08, 1.185712748825859e-11, -1.043445901963862e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.358064788891638e-05, 1.541225587214213e-07, -1.358577088276538e-05, -1.358103965629732e-05, 1.541207867069750e-07, -1.358654212396425e-05, -1.359428505024676e-05, 1.540597121148743e-07, -1.359756006350432e-05, -1.356249691843990e-05, 1.540100170374724e-07, -1.356668218543393e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -7.792259255394369e-03, 9.270722799357577e-04, -7.849951520308237e-03, -7.786461986509554e-03, 9.324368204854546e-04, -7.857131339723945e-03, -7.832736409582442e-03, 1.069807695322527e-03, -7.733242440070735e-03, -7.559812284896936e-03, 1.024962868820697e-03, -7.593914356376238e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.015022929288295e-01, 4.870430005817489e-01, -7.816385693227824e-01, -7.925801894797767e-01, 4.601020753985704e-01, -7.665752528935305e-01, -4.505851044012250e-03, 4.311409659161154e-04, -4.390509886285057e-03, -1.405355168870086e+00, 1.357480112752327e+00, -1.380998360113386e+00, -1.027527050921904e+00, 1.929431429665579e+00, -3.898047502256749e+00, -1.027527050921904e+00, 1.929431429665580e+00, -3.898047502256753e+00, -1.601233046657358e+04, 9.006507517295055e-08, -1.341327593453690e+04, -1.420990979929685e+04, 3.695673560289628e-07, -1.164774806483721e+04, -8.370059792973863e+01, 1.489288214502471e+01, -7.190430426370420e+01, -6.750537472164971e+04, 3.350885389426989e-17, -7.031007753052439e+04, -2.221427161418409e+04, 8.673770695270562e-13, -1.460208813509680e+05, -2.221427161418411e+04, 8.673770695270562e-13, -1.460208813509680e+05, -3.120937442842174e-06, 1.809299517292379e-08, -3.123583621634334e-06, -3.123251342613206e-06, 1.807545599629114e-08, -3.125818583373952e-06, -3.121034151413480e-06, 1.809212347410638e-08, -3.123635403204407e-06, -3.123017007873502e-06, 1.807663525628042e-08, -3.125668909910377e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -1.010635912347755e-04, 3.324691278596461e-06, -1.010779524700931e-04, -9.903149681292247e-05, 3.198712461362903e-06, -9.909978705291323e-05, -1.011475640512280e-04, 3.420793545345939e-06, -1.012672271456375e-04, -9.938724522915006e-05, 3.305373228471352e-06, -9.946546298030040e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -1.605154024547233e-02, 1.825453754003035e-03, -1.619117711055979e-02, -1.474343620688189e-02, 1.201192443406202e-03, -1.477479346054838e-02, -2.204666172622624e-02, 2.748455987594796e-03, -2.031678606014923e-02, -2.418338119192188e-02, 2.257366444272562e-03, -2.171147066780003e-02, -1.455920912893613e-02, 1.758833807333089e-03, -1.681843677980908e-02, -1.455920912893614e-02, 1.758833807333089e-03, -1.681843677980908e-02, -3.150401852206798e+00, 4.345108400965211e+00, -3.170434965885433e+00, -5.502177821396236e-01, 4.801730708975269e-01, -5.493965502748231e-01, -4.262172914865188e+00, 5.403210563745951e+00, -4.000430924985834e+00, -1.886068550772652e-04, 3.686127133635989e-06, -1.889444393377877e-04, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -1.699411089643476e+05, 4.391412325733211e-24, -1.460796247556560e+05, -7.954666730295906e+04, 9.952946977518016e-18, -7.449506296332044e+04, -2.990717847119347e+05, 4.581716902253058e-25, -2.612737931159296e+05, -1.696004532565848e+01, 1.218782134268272e+01, -1.643550682122481e+01, -2.313967161586600e+05, 7.784361458058929e-20, -9.240488802955455e+04, -2.313967161586598e+05, 7.784361458058927e-20, -9.240488802955452e+04, -2.219495429854996e-02, 1.781738515145262e-03, -2.195509733342586e-02, -2.076312885154710e-02, 1.834071765417697e-03, -2.055303334584081e-02, -2.118788746189437e-02, 1.815455511527695e-03, -2.097177410252597e-02, -2.159933539387829e-02, 1.800280877020669e-03, -2.136816452351270e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.560950998573218e-02, 2.045475405717882e-03, -2.533979798454380e-02, -2.658669298607634e-02, 4.372269458584065e-03, -2.639619554799486e-02, -2.539317146300312e-02, 3.481409492639727e-03, -2.519928883854928e-02, -2.474558936546363e-02, 2.801304754186088e-03, -2.452658703155491e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -1.210663724077704e-02, 9.448281971276932e-04, -1.210774703956818e-02, -2.896818500974693e-01, 1.841168313207797e-01, -2.893079402659515e-01, -1.863619421801817e-01, 8.322264776862785e-02, -1.860558812379716e-01, -9.818708946814067e-02, 2.335777938713061e-02, -9.716063264790924e-02, -1.367145607178618e-01, 4.455605659310826e-02, -1.373866162956502e-01, -1.367145607178618e-01, 4.455605659310827e-02, -1.373866162956503e-01, -3.643622074116785e-02, 6.561578635696272e-03, -3.608494043291562e-02, -8.685719210089600e+01, 1.430892164753827e+01, -8.522852476782363e+01, -3.265583822645921e+01, 1.521830626896655e+01, -3.015511765247127e+01, -1.291093042631665e-01, 2.777420884472484e-02, -1.254546410894600e-01, -8.387690733914193e+00, 7.858164809404253e+00, -8.331015966778173e+00, -8.387690733914191e+00, 7.858164809404253e+00, -8.331015966778182e+00, -5.373095280702843e+03, 2.768157770177566e-04, -4.881149980613249e+03, -5.023960912792954e+06, 2.308592770889069e-85, -5.846008400586689e+06, -5.637392051558921e+05, 1.346473245321597e-36, -4.801493238580819e+05, -1.031515996738637e+01, 8.933405596013928e+00, -9.898975829389819e+00, -3.312813801870204e+05, 6.624839855865914e-22, -1.199647090775366e+05, -3.312813801870212e+05, 6.624839855865567e-22, -1.199647090775370e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
