
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse12_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.444593826462089e+01, -1.444595333480215e+01, -1.444607494391314e+01, -1.444582708684860e+01, -1.444594575757287e+01, -1.444594575757287e+01, -2.448223966346886e+00, -2.448204850987506e+00, -2.447778444284058e+00, -2.449020564213678e+00, -2.448224317749982e+00, -2.448224317749982e+00, -5.253767497643602e-01, -5.252130486657385e-01, -5.217430659826727e-01, -5.250212244542359e-01, -5.253154043764453e-01, -5.253154043764453e-01, -1.745204377408115e-01, -1.758094946025138e-01, -6.103145150825584e-01, -1.431590707667634e-01, -1.748930159334368e-01, -1.748930159334368e-01, -1.696403024286339e-02, -1.775715728081159e-02, -6.298776741770314e-02, -8.172817038597017e-03, -1.757490485748904e-02, -1.757490485748904e-02, -3.526163710032877e+00, -3.525884087562425e+00, -3.526139033440397e+00, -3.525921519659829e+00, -3.526014192922127e+00, -3.526014192922127e+00, -1.496878807799800e+00, -1.504100128872941e+00, -1.497008156476303e+00, -1.502645404884253e+00, -1.501558073780197e+00, -1.501558073780197e+00, -4.504482824017232e-01, -4.813253186168814e-01, -4.305055899152831e-01, -4.431646115759835e-01, -4.646681020451678e-01, -4.646681020451678e-01, -1.162209855771969e-01, -1.846703113813968e-01, -1.145117600430563e-01, -1.330421984610141e+00, -1.277240954801799e-01, -1.277240954801799e-01, -7.884721974929558e-03, -9.008490127396979e-03, -6.755262439878142e-03, -8.091099183746135e-02, -8.209770451626875e-03, -8.209770451626875e-03, -4.616193759099085e-01, -4.580500922526834e-01, -4.592083267260858e-01, -4.601920607181856e-01, -4.596896683876247e-01, -4.596896683876247e-01, -4.489408341499965e-01, -4.026632212433781e-01, -4.133189641350437e-01, -4.244579049137231e-01, -4.184992326468625e-01, -4.184992326468625e-01, -5.018032037217406e-01, -2.178766692317413e-01, -2.456987330655972e-01, -2.947953569192806e-01, -2.686427467300550e-01, -2.686427467300550e-01, -3.682347058328304e-01, -5.953029191448767e-02, -7.504767861497486e-02, -2.781914617972602e-01, -9.825069296650940e-02, -9.825069296650943e-02, -1.982814368508343e-02, -2.468774866726740e-03, -4.688913998849454e-03, -9.432049800588349e-02, -6.979006647717203e-03, -6.979006647717521e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse12_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.719189422942060e+01, -1.719196081557120e+01, -1.719225190816282e+01, -1.719116168404163e+01, -1.719192939451082e+01, -1.719192939451082e+01, -2.853560254073596e+00, -2.853593175764921e+00, -2.854612932958781e+00, -2.853438204994181e+00, -2.853588833564082e+00, -2.853588833564082e+00, -6.105693440480400e-01, -6.098910630545868e-01, -5.935324331973196e-01, -5.977278746967596e-01, -6.103217674917110e-01, -6.103217674917110e-01, -1.947424511393365e-01, -1.988711787839566e-01, -7.234227563165709e-01, -1.512202397474481e-01, -1.959952693371980e-01, -1.959952693371980e-01, -2.254283470304129e-02, -2.358582039553078e-02, -7.446289345801921e-02, -1.089196606449921e-02, -2.334634702587075e-02, -2.334634702587075e-02, -4.369513731585553e+00, -4.372000253078676e+00, -4.369766362412362e+00, -4.371699791350103e+00, -4.370790907179850e+00, -4.370790907179850e+00, -1.625020248106382e+00, -1.635163943649613e+00, -1.621532193423602e+00, -1.629502893604254e+00, -1.636264334079470e+00, -1.636264334079470e+00, -5.600578839857966e-01, -6.260036604022375e-01, -5.334346401333298e-01, -5.732783454447388e-01, -5.827264950393524e-01, -5.827264950393524e-01, -1.294979021024242e-01, -1.896805172453578e-01, -1.272226441447958e-01, -1.736361826660477e+00, -1.383202009826888e-01, -1.383202009826888e-01, -1.050843626138765e-02, -1.200412357816389e-02, -9.004348126111740e-03, -9.352655486540851e-02, -1.094116594297560e-02, -1.094116594297559e-02, -5.992356318638770e-01, -5.956871746723839e-01, -5.973198398511873e-01, -5.983236697812744e-01, -5.978520949549453e-01, -5.978520949549453e-01, -5.818091383407688e-01, -4.825831710060153e-01, -5.106451689097802e-01, -5.410694742040243e-01, -5.254813232051513e-01, -5.254813232051513e-01, -6.525061928914633e-01, -2.289554594381421e-01, -2.791188670799553e-01, -3.557311685339830e-01, -3.189473325517742e-01, -3.189473325517743e-01, -4.413504284758098e-01, -7.155441686848321e-02, -8.755211531166371e-02, -3.429411197121698e-01, -1.107373369373571e-01, -1.107373369373572e-01, -2.629966042043782e-02, -3.291588137259588e-03, -6.251068169246578e-03, -1.062878902336169e-01, -9.302360887067648e-03, -9.302360886703716e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse12_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.182176525754457e-09, -5.182129193452029e-09, -5.181877663056304e-09, -5.182653472739118e-09, -5.182151901868307e-09, -5.182151901868307e-09, -6.265643338434673e-06, -6.265652701534012e-06, -6.264871613705873e-06, -6.261056845874614e-06, -6.265545551984252e-06, -6.265545551984252e-06, -2.592714903976984e-03, -2.593404457611654e-03, -2.559118733907025e-03, -2.502897295097298e-03, -2.593032432210129e-03, -2.593032432210129e-03, -2.334267180987061e-01, -2.131821194540657e-01, -1.442412548127668e-03, -5.069034662580747e-01, -2.272514923980591e-01, -2.272514923980591e-01, 2.948719632297825e-02, 3.177314056001308e-02, -2.522424765044742e+00, 5.521155581012880e-03, 3.311676184149787e-02, 3.311676184149787e-02, -1.245391721843036e-06, -1.242105485992610e-06, -1.245060354209224e-06, -1.242505426078932e-06, -1.243707189362625e-06, -1.243707189362625e-06, -4.136198657496258e-05, -4.077689564262433e-05, -4.108132709072000e-05, -4.061847981359530e-05, -4.136109224461771e-05, -4.136109224461771e-05, -3.528620822284883e-03, 1.184552047219416e-03, -4.363021049899640e-03, 1.422310947073787e-04, -2.769936936646342e-03, -2.769936936646342e-03, -6.503409228926988e-01, -2.101547722159483e-01, -7.330519922097133e-01, -1.682186501538778e-05, -6.400835148057589e-01, -6.400835148057589e-01, 5.689933158712631e-03, 7.087435648747788e-03, 2.145382733561061e-02, -1.587512366908948e+00, 1.094795505527167e-02, 1.094795505555073e-02, 4.382027523557775e-03, 2.025902158013862e-03, 2.795443274842895e-03, 3.446024849865030e-03, 3.114421878421550e-03, 3.114421878421736e-03, 5.548750369233911e-03, -6.935351008951676e-03, -5.256805091661543e-03, -2.356307569051384e-03, -3.983545474222706e-03, -3.983545474222781e-03, 7.040643923909989e-04, -1.069661805106233e-01, -5.077196032587802e-02, -2.137011865393715e-02, -2.972072575897775e-02, -2.972072575897802e-02, -9.680988607858770e-03, -2.211744289523617e+00, -1.656160588118754e+00, -2.379353091322768e-02, -1.166938120644066e+00, -1.166938120644072e+00, 2.438024817906253e-02, 1.779839569319765e-03, 4.326607523398382e-03, -1.425644623015335e+00, 1.480927522127662e-02, 1.480927522044869e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
