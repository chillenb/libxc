
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683216001868972e+01, -1.683218073709464e+01, -1.683233197359643e+01, -1.683199152889602e+01, -1.683217045330493e+01, -1.683217045330493e+01, -2.840917883170198e+00, -2.840897711587017e+00, -2.840458184129738e+00, -2.841805897254183e+00, -2.840919366057129e+00, -2.840919366057129e+00, -5.963281889253306e-01, -5.962118440173362e-01, -5.942759002903679e-01, -5.980250037706405e-01, -5.962834629047069e-01, -5.962834629047069e-01, -1.854284206055896e-01, -1.868471492940705e-01, -6.943511514418297e-01, -1.478835648137611e-01, -1.858433267208281e-01, -1.858433267208281e-01, -4.896505811128544e-02, -4.963119703430056e-02, -8.648035653661491e-02, -4.301844467085365e-02, -4.914914664445921e-02, -4.914914664445921e-02, -4.101189030624719e+00, -4.100786416260073e+00, -4.101152770185223e+00, -4.100839635545972e+00, -4.100975587301870e+00, -4.100975587301870e+00, -1.729996072119803e+00, -1.738219600223949e+00, -1.730358814772627e+00, -1.736757602937990e+00, -1.735113107380262e+00, -1.735113107380262e+00, -5.015923506146809e-01, -5.237475028286129e-01, -4.785648358228839e-01, -4.833081845260706e-01, -5.170498545217237e-01, -5.170498545217237e-01, -1.205440444542467e-01, -1.950225385248713e-01, -1.189676396070030e-01, -1.514374126979334e+00, -1.315102860434977e-01, -1.315102860434977e-01, -4.218514762016694e-02, -4.349522983030681e-02, -3.325914919086970e-02, -9.426818839685934e-02, -3.950525201393674e-02, -3.950525201393675e-02, -4.937356024308286e-01, -4.955979759683662e-01, -4.949714508975676e-01, -4.944553975142191e-01, -4.947164635113247e-01, -4.947164635113247e-01, -4.780662069242875e-01, -4.494466005907008e-01, -4.586905224897797e-01, -4.665376464104807e-01, -4.625112741883091e-01, -4.625112741883091e-01, -5.484280089874777e-01, -2.357341910135063e-01, -2.691630507023168e-01, -3.223229167035186e-01, -2.942809817245436e-01, -2.942809817245435e-01, -4.090266366763232e-01, -8.674145447494203e-02, -9.250073502934771e-02, -2.999031798987716e-01, -1.050977051489743e-01, -1.050977051489743e-01, -5.398120313243600e-02, -3.017227831461564e-02, -3.495361421142252e-02, -1.015516799167274e-01, -3.537356225771600e-02, -3.537356225771600e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.035798928190643e+01, -2.035805375478716e+01, -2.035835554967467e+01, -2.035729950887222e+01, -2.035802316428295e+01, -2.035802316428295e+01, -3.346780797633270e+00, -3.346804570001524e+00, -3.347593080140666e+00, -3.346928803720621e+00, -3.346806971630239e+00, -3.346806971630239e+00, -6.793020001354346e-01, -6.785257660435372e-01, -6.592354144118808e-01, -6.641135883287268e-01, -6.790192000108813e-01, -6.790192000108813e-01, -2.068291572821955e-01, -2.088245458661448e-01, -8.098335963169032e-01, -1.635251189106600e-01, -2.074137770919631e-01, -2.074137770919631e-01, -2.005696733748071e-02, -2.066486041001638e-02, -5.837577568679109e-02, -1.324685437619063e-02, -2.046016910523745e-02, -2.046016910523745e-02, -5.061950866714279e+00, -5.063782169721320e+00, -5.062138743527277e+00, -5.063562662477140e+00, -5.062888795725780e+00, -5.062888795725780e+00, -1.861780611897982e+00, -1.875498714577027e+00, -1.855150057194515e+00, -1.865821809381643e+00, -1.879779794116298e+00, -1.879779794116298e+00, -6.057052676534103e-01, -6.688633708588585e-01, -5.759859370795984e-01, -6.094332695480421e-01, -6.291595239732051e-01, -6.291595239732051e-01, -1.317323637171122e-01, -2.184374822747024e-01, -1.281029321919474e-01, -1.936800958192660e+00, -1.439507065191130e-01, -1.439507065191130e-01, -1.289910231854085e-02, -1.391975590490100e-02, -1.057439720167336e-02, -8.133755265045453e-02, -1.267286390029421e-02, -1.267286390029420e-02, -6.428051641129922e-01, -6.348992576053324e-01, -6.376108415995513e-01, -6.397932136631522e-01, -6.386913273971817e-01, -6.386913273971817e-01, -6.241897070231746e-01, -5.246952509460937e-01, -5.504718425358238e-01, -5.765043378542587e-01, -5.630286114909380e-01, -5.630286114909381e-01, -6.987260795433374e-01, -2.623407924595003e-01, -3.011384992727019e-01, -3.750460935319861e-01, -3.347010462092841e-01, -3.347010462092840e-01, -4.763345785328190e-01, -5.491621814410910e-02, -7.415044707800833e-02, -3.571321290445064e-01, -1.044085790996260e-01, -1.044085790996260e-01, -2.276621161818280e-02, -6.707625973741091e-03, -9.311001131101485e-03, -9.800019900932561e-02, -1.109504342066136e-02, -1.109504342066135e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.214528351566765e-09, -5.214506421853764e-09, -5.214329893808901e-09, -5.214690583652111e-09, -5.214517444397094e-09, -5.214517444397094e-09, -6.753982456667899e-06, -6.754207228337646e-06, -6.759283199137553e-06, -6.744857519271716e-06, -6.753983707853992e-06, -6.753983707853992e-06, -3.660273933175877e-03, -3.658635335795876e-03, -3.580538242651451e-03, -3.499192316302987e-03, -3.659753968869612e-03, -3.659753968869612e-03, -2.899443218859527e-01, -2.892360484099660e-01, -2.047012297121010e-03, -4.263372850808771e-01, -2.899528868946427e-01, -2.899528868946427e-01, -2.015526336227506e+03, -1.767844761576925e+03, -1.865908991374863e+01, -1.493365579524385e+04, -1.841471146809236e+03, -1.841471146809236e+03, -1.559102780925312e-06, -1.560211553649155e-06, -1.559207246507239e-06, -1.560069471967488e-06, -1.559683095843228e-06, -1.559683095843228e-06, -4.975606714719089e-05, -4.881471717048937e-05, -4.971396710814302e-05, -4.897928202514393e-05, -4.917266722931272e-05, -4.917266722931272e-05, -7.963103476801146e-03, -7.455620329268209e-03, -9.572129828314341e-03, -1.006569493656131e-02, -7.133347569405408e-03, -7.133347569405408e-03, -6.050393990892643e-01, -1.614304634448908e-01, -7.551454814229945e-01, -9.393653960410397e-05, -5.873225024690996e-01, -5.873225024690996e-01, -1.683616398715306e+04, -1.148252225077236e+04, -3.535462815563323e+04, -4.984822053626448e+00, -1.674415653835450e+04, -1.674415653835451e+04, -1.010463003735976e-02, -9.441362746099413e-03, -9.642995555394589e-03, -9.822680483598257e-03, -9.729847260879630e-03, -9.729847260879630e-03, -1.169303650072142e-02, -1.165375093670398e-02, -1.129694595968448e-02, -1.114250251742747e-02, -1.121427927660711e-02, -1.121427927660711e-02, -6.130734013789062e-03, -9.792657796907717e-02, -7.057458115678029e-02, -4.276369120259797e-02, -5.607050928626127e-02, -5.607050928626130e-02, -1.682695090642208e-02, -2.316823520811617e+01, -6.897352751340755e+00, -6.073665198465971e-02, -1.904759580870025e+00, -1.904759580870030e+00, -1.181588624710438e+03, -5.577972187257184e+05, -8.400926847205087e+04, -2.655056661267721e+00, -2.972258361088327e+04, -2.972258361088338e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
