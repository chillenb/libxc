
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_bhandhlyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.059420063204449e+01, -1.059421412343754e+01, -1.059430864200503e+01, -1.059410720470047e+01, -1.059420784218461e+01, -1.059420784218461e+01, -1.804013864414016e+00, -1.803995616734468e+00, -1.803616715714686e+00, -1.804608321503474e+00, -1.804034235537777e+00, -1.804034235537777e+00, -3.868001037216705e-01, -3.866831332225966e-01, -3.843345857736857e-01, -3.870089976059120e-01, -3.861472322239369e-01, -3.861472322239369e-01, -1.132837984346689e-01, -1.147210770051203e-01, -4.441565055948358e-01, -8.813479984351542e-02, -9.821231302456246e-02, -9.821231302456246e-02, -3.350266269510428e-02, -3.354987550147873e-02, -5.641537964930746e-02, -3.041479324441948e-02, -3.035729861271932e-02, -3.035729861271930e-02, -2.591409091046314e+00, -2.591079343293001e+00, -2.591399429200777e+00, -2.591108249396828e+00, -2.591238949536157e+00, -2.591238949536157e+00, -1.108368394593686e+00, -1.113662957581435e+00, -1.108353817617611e+00, -1.113034440783201e+00, -1.111294946012358e+00, -1.111294946012358e+00, -3.301587170954440e-01, -3.449479984359767e-01, -3.086845265172810e-01, -3.098696780627616e-01, -3.337185944492237e-01, -3.337185944492237e-01, -6.419512217198006e-02, -1.132896046170173e-01, -6.148457818966619e-02, -9.661774093119890e-01, -7.413423512163049e-02, -7.413423512163049e-02, -2.739690871784380e-02, -2.930310480388718e-02, -1.923042566142727e-02, -5.537165245754561e-02, -2.325816874346262e-02, -2.325816874346263e-02, -3.178133103940162e-01, -3.190724054700104e-01, -3.186618436844150e-01, -3.182946040855986e-01, -3.184809033676236e-01, -3.184809033676236e-01, -3.089744947659891e-01, -2.883415963797034e-01, -2.951133885520268e-01, -3.010363520202189e-01, -2.980279245247232e-01, -2.980279245247232e-01, -3.608480070470125e-01, -1.417491414159483e-01, -1.672160656261058e-01, -2.090220054134073e-01, -1.873026848061776e-01, -1.873026848061776e-01, -2.670450048094803e-01, -5.697375142564405e-02, -5.606083144264425e-02, -1.989349375652724e-01, -5.862755296393119e-02, -5.862755296393120e-02, -3.793259096942631e-02, -1.683659910613949e-02, -2.209233390020594e-02, -5.734326678282277e-02, -2.185330964367376e-02, -2.185330964367374e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_bhandhlyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.267801598795848e+01, -1.267806325919956e+01, -1.267826483498526e+01, -1.267756171630517e+01, -1.267793135331363e+01, -1.267793135331363e+01, -2.100516093707322e+00, -2.100534369417070e+00, -2.101007046116054e+00, -2.100571653396289e+00, -2.100586997335780e+00, -2.100586997335780e+00, -4.468374160568339e-01, -4.463677606543492e-01, -4.358841334702960e-01, -4.390433646016604e-01, -4.383407180381874e-01, -4.383407180381874e-01, -1.428878659490120e-01, -1.436603345130813e-01, -5.134889575876131e-01, -1.235949525934731e-01, -1.299303279417927e-01, -1.299303279417927e-01, -1.036657076369185e-02, -1.061270299636389e-02, -3.195022636013915e-02, -7.813845872908672e-03, -8.547044943659217e-03, -8.547044943659238e-03, -3.171563656176590e+00, -3.172796774153711e+00, -3.171619399236563e+00, -3.172707995565622e+00, -3.172189062676972e+00, -3.172189062676972e+00, -1.181592837450606e+00, -1.190227029843466e+00, -1.174439843427522e+00, -1.182010913136069e+00, -1.189888687288929e+00, -1.189888687288929e+00, -3.989382719136281e-01, -4.377052984800936e-01, -3.713161522951012e-01, -3.902136651739530e-01, -4.053882916377040e-01, -4.053882916377040e-01, -9.913687714830755e-02, -1.569841405036754e-01, -9.140087595562837e-02, -1.228089135530041e+00, -1.055032599282874e-01, -1.055032599282874e-01, -6.644589878975685e-03, -7.570853522715510e-03, -5.280695349172349e-03, -5.589921522125911e-02, -6.374934846456370e-03, -6.374934846456392e-03, -4.106301375543571e-01, -4.055698078359204e-01, -4.072568943684037e-01, -4.087217447253895e-01, -4.079802859440735e-01, -4.079802859440735e-01, -4.014155293319510e-01, -3.391561030785859e-01, -3.541723160145203e-01, -3.710953561371183e-01, -3.622115191970232e-01, -3.622115191970232e-01, -4.566396005507571e-01, -1.826003001122088e-01, -2.036654243384271e-01, -2.489184013150881e-01, -2.230239192223785e-01, -2.230239192223785e-01, -3.150884683065734e-01, -3.088285554652049e-02, -4.325444838719741e-02, -2.401635296391221e-01, -7.231672290704995e-02, -7.231672290704991e-02, -1.296199146892042e-02, -3.363719071732260e-03, -5.124623527875495e-03, -6.765311162519677e-02, -5.953453716493790e-03, -5.953453716493759e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_bhandhlyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.612132751247908e-09, -3.612115374448708e-09, -3.611989032859589e-09, -3.612248586599023e-09, -3.612119559379240e-09, -3.612119559379240e-09, -4.604734309951425e-06, -4.604937442637958e-06, -4.609192717963634e-06, -4.598347969186827e-06, -4.604538972506608e-06, -4.604538972506608e-06, -2.207444833516772e-03, -2.204943252122531e-03, -2.118614792756124e-03, -2.070218395038740e-03, -2.091751227177575e-03, -2.091751227177575e-03, -4.063173483283877e-02, -4.957265219031937e-02, -1.308722913464366e-03, 1.627703681111156e-01, 3.289685805495768e-02, 3.289685805495779e-02, -5.067833206794572e+03, -4.444054997624458e+03, -2.006070066953729e+01, -2.391666992835337e+04, -1.325451021838322e+04, -1.325451021838323e+04, -1.070078865673485e-06, -1.070881813167162e-06, -1.070105311373973e-06, -1.070814240470063e-06, -1.070491076123017e-06, -1.070491076123017e-06, -3.292587945321538e-05, -3.230904895951587e-05, -3.291324361788732e-05, -3.236749721838965e-05, -3.259088791935458e-05, -3.259088791935458e-05, -4.613477449991010e-03, -4.470284897280529e-03, -5.895142064387319e-03, -6.746191258959799e-03, -4.494307693379960e-03, -4.494307693379960e-03, 9.380523482458849e-01, 4.140225710203344e-02, 1.084123159519181e+00, -6.315168443813091e-05, 4.050826503736540e-01, 4.050826503736540e-01, -5.455183477572333e+04, -2.672113604935720e+04, -9.683043920003933e+04, -1.812931407990632e-01, -4.571567350371401e+04, -4.571567350371398e+04, -6.703622192727678e-03, -6.184136227685784e-03, -6.340363748435548e-03, -6.488567767286510e-03, -6.412017013754587e-03, -6.412017013754587e-03, -7.745444934837750e-03, -6.889372254627818e-03, -6.935215989855354e-03, -7.059253244670182e-03, -6.996833710901690e-03, -6.996833710901690e-03, -3.686140880130866e-03, -1.008803820994617e-02, -2.324920163353485e-02, -2.200862720861136e-02, -2.515180328897580e-02, -2.515180328897582e-02, -9.158148187835551e-03, -2.336792267453178e+01, -3.915110409886177e+00, -3.010613476836054e-02, 7.291473004195028e-01, 7.291473004195010e-01, -1.776253830691930e+03, -1.877175647376208e+06, -1.800458247733669e+05, 6.313338623692433e-01, -6.102863084263811e+04, -6.102863084263831e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
