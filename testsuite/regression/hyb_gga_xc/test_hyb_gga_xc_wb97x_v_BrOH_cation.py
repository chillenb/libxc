
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_v_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.733161105376414e+01, -1.733163396147140e+01, -1.733179179240842e+01, -1.733144983104351e+01, -1.733162104802143e+01, -1.733162104802143e+01, -2.809057520941438e+00, -2.809027095753303e+00, -2.808395428642582e+00, -2.810045084809595e+00, -2.809091149713413e+00, -2.809091149713413e+00, -4.805197778861938e-01, -4.803814640152532e-01, -4.790296750215511e-01, -4.831279179453719e-01, -4.838911432144692e-01, -4.838911432144692e-01, -7.589117484658418e-02, -7.740331995280028e-02, -5.722777702649494e-01, -4.785458426652860e-02, -6.650658352996275e-02, -6.650658352996275e-02, 4.851120018361024e-04, 5.064886219312150e-04, 2.869051229507426e-04, 2.870700725300031e-04, -3.474237234721568e-05, -3.474237234721609e-05, -4.120182826692868e+00, -4.119846188468501e+00, -4.120175426910468e+00, -4.119878079025450e+00, -4.120007461287765e+00, -4.120007461287765e+00, -1.681233841882901e+00, -1.688635339407573e+00, -1.684814665998760e+00, -1.691250149575516e+00, -1.683736361904383e+00, -1.683736361904383e+00, -3.928394677401367e-01, -4.247975407798075e-01, -3.588699470646874e-01, -3.677800641192699e-01, -3.995282880493383e-01, -3.995282880493383e-01, -2.129596061612191e-02, -8.206717779651648e-02, -1.734164037996171e-02, -1.443813894905717e+00, -3.090663467744615e-02, -3.090663467744615e-02, 2.186897789302816e-04, 2.805656664789841e-04, 2.091931426682084e-04, -4.679623588835007e-03, 1.398175291839296e-04, 1.398175291839296e-04, -3.866696054886355e-01, -3.841880673153717e-01, -3.848924477670718e-01, -3.855917443548684e-01, -3.852257056781207e-01, -3.852257056781207e-01, -3.745196366837162e-01, -3.258378712391074e-01, -3.373231939332695e-01, -3.499054716073451e-01, -3.432160509338062e-01, -3.432160509338062e-01, -4.494903632299474e-01, -1.184973958861623e-01, -1.499583077237454e-01, -2.061019236644736e-01, -1.754806287725253e-01, -1.754806287725253e-01, -2.931492817834107e-01, 5.031542911536824e-04, -1.512316173171061e-03, -1.922180295913992e-01, -1.102693715651554e-02, -1.102693715651553e-02, 6.723877378490824e-04, 7.071989735308779e-05, 1.513028304665611e-04, -9.015673191268990e-03, 1.474052228439988e-04, 1.474052228439991e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_v_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.082858460350122e+01, -2.082856191084424e+01, -2.082869649898630e+01, -2.082864368257374e+01, -2.082901004445032e+01, -2.082910256139714e+01, -2.082774087661547e+01, -2.082749212089495e+01, -2.082864903826416e+01, -2.082810541737155e+01, -2.082864903826416e+01, -2.082810541737155e+01, -3.296072635782772e+00, -3.296370522033932e+00, -3.296129153749534e+00, -3.296442773491392e+00, -3.297661008351092e+00, -3.298049006535136e+00, -3.295550189921623e+00, -3.295965384964742e+00, -3.295452168620586e+00, -3.297305111896514e+00, -3.295452168620586e+00, -3.297305111896514e+00, -5.650503906596551e-01, -5.689684708075623e-01, -5.631217336036225e-01, -5.679269535455146e-01, -5.309260491141041e-01, -5.244066967569108e-01, -5.324388194325599e-01, -5.345819580461831e-01, -5.635903714367007e-01, -4.996631701885445e-01, -5.635903714367007e-01, -4.996631701885445e-01, -9.903767442098237e-02, -9.661312629177360e-02, -1.016023766915570e-01, -9.905130702639114e-02, -6.637232691973748e-01, -6.915702673112112e-01, -6.640866322490180e-02, -6.628409708210790e-02, -7.108012688397884e-02, -8.631269176233131e-02, -7.108012688397881e-02, -8.631269176233128e-02, 8.380775264080438e-04, 4.600989446677851e-04, 9.036847345102206e-04, 4.566479401418782e-04, -8.828411062799414e-04, -2.355793018366432e-03, 3.510970891165797e-04, 4.162981822663014e-04, -4.120735734508057e-04, 2.027292587162389e-03, -4.120735734508068e-04, 2.027292587162387e-03, -5.150018058321939e+00, -5.148791309786395e+00, -5.152746749330515e+00, -5.151432792465583e+00, -5.150165599048111e+00, -5.148881868662003e+00, -5.152510782590522e+00, -5.151277816805766e+00, -5.151417720817360e+00, -5.150119779493378e+00, -5.151417720817360e+00, -5.150119779493378e+00, -1.630601065928880e+00, -1.630515490647919e+00, -1.650271125485886e+00, -1.649744491426315e+00, -1.601039582230838e+00, -1.608464383351284e+00, -1.618183769525665e+00, -1.625655895703719e+00, -1.662350915945627e+00, -1.645213662281004e+00, -1.662350915945627e+00, -1.645213662281004e+00, -5.163242416739863e-01, -5.153895736654953e-01, -5.876829629778360e-01, -5.880486022606084e-01, -4.624055547390187e-01, -4.756717421944350e-01, -5.033404479849953e-01, -5.158206374719644e-01, -5.381906290438008e-01, -5.177851755720948e-01, -5.381906290438008e-01, -5.177851755720949e-01, -3.757847570719525e-02, -3.749471581368707e-02, -9.735377950649582e-02, -9.715379607860090e-02, -3.130911933633621e-02, -3.280095386387769e-02, -1.911542626402111e+00, -1.910816813870987e+00, -5.158606824086853e-02, -4.583968216415955e-02, -5.158606824086853e-02, -4.583968216415955e-02, 3.561465478412624e-04, 2.372291191488141e-04, 4.035340837776202e-04, 3.463138560048612e-04, 3.727898211924508e-04, 2.012385488478223e-04, -1.198292524273097e-02, -1.231654019054587e-02, 9.754564594807840e-04, -1.112367131802606e-04, 9.754564594807827e-04, -1.112367131802616e-04, -5.413021753873549e-01, -5.429622320571968e-01, -5.342616886719737e-01, -5.359600888086725e-01, -5.369313681350490e-01, -5.386328573067273e-01, -5.390375266721668e-01, -5.407087875662698e-01, -5.380027215766826e-01, -5.396886546457668e-01, -5.380027215766826e-01, -5.396886546457668e-01, -5.249177290597546e-01, -5.262828905603537e-01, -4.031381922323704e-01, -4.045184054760092e-01, -4.394820146744603e-01, -4.410961850996887e-01, -4.751776719552880e-01, -4.764782858085157e-01, -4.572937024962812e-01, -4.585900916595403e-01, -4.572937024962812e-01, -4.585900916595403e-01, -6.184724185151131e-01, -6.195364606519631e-01, -1.310488035241460e-01, -1.307981643802953e-01, -1.699688372630125e-01, -1.699763953312236e-01, -2.652745877335560e-01, -2.660855424529135e-01, -2.128293800335634e-01, -2.128066602608275e-01, -2.128293800335633e-01, -2.128066602608275e-01, -3.656197540605347e-01, -3.675762329495702e-01, -1.070492598023887e-03, -1.250520564786155e-03, -5.216242106704220e-03, -6.288181776124680e-03, -2.600958467286471e-01, -2.623445606222132e-01, -2.296292643618206e-02, -2.268529791331012e-02, -2.296292643618204e-02, -2.268529791331013e-02, 1.006761263231752e-03, 7.101964502787924e-04, 9.693645067787837e-05, 9.431190046427919e-05, 2.803998820789663e-04, 1.401734234206190e-04, -1.948573010300076e-02, -2.000123299808261e-02, 8.423243948857442e-04, -7.291659424122969e-05, 8.423243948857470e-04, -7.291659424122955e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_v_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.163435282842385e-08, 0.000000000000000e+00, -1.163440947534859e-08, -1.163417512407888e-08, 0.000000000000000e+00, -1.163427971035664e-08, -1.163361229823557e-08, 0.000000000000000e+00, -1.163347541442891e-08, -1.163562795640882e-08, 0.000000000000000e+00, -1.163603443507111e-08, -1.163425292283401e-08, 0.000000000000000e+00, -1.163501236660484e-08, -1.163425292283401e-08, 0.000000000000000e+00, -1.163501236660484e-08, -1.533648582551527e-05, 0.000000000000000e+00, -1.533559441739276e-05, -1.533604613524708e-05, 0.000000000000000e+00, -1.533515787233521e-05, -1.532538673032619e-05, 0.000000000000000e+00, -1.532261213330360e-05, -1.533413615151910e-05, 0.000000000000000e+00, -1.533152287018956e-05, -1.534644903211278e-05, 0.000000000000000e+00, -1.532172334253405e-05, -1.534644903211278e-05, 0.000000000000000e+00, -1.532172334253405e-05, -7.733790995953397e-03, 0.000000000000000e+00, -7.621996962834210e-03, -7.791589139602332e-03, 0.000000000000000e+00, -7.654834181101376e-03, -8.754521565617384e-03, 0.000000000000000e+00, -8.927026492135727e-03, -8.603413944959679e-03, 0.000000000000000e+00, -8.550094334119287e-03, -7.794141632554738e-03, 0.000000000000000e+00, -9.357975735574141e-03, -7.794141632554738e-03, 0.000000000000000e+00, -9.357975735574141e-03, -3.511158560299792e-01, 0.000000000000000e+00, -4.130285926190799e-01, -3.362719568168502e-01, 0.000000000000000e+00, -4.033780037230232e-01, -4.658469082530434e-03, 0.000000000000000e+00, -4.162721948535258e-03, -4.437639460627255e-01, 0.000000000000000e+00, -4.796144566695431e-01, -6.597345405265043e-01, 0.000000000000000e+00, 3.097230609974278e+00, -6.597345405265044e-01, 0.000000000000000e+00, 3.097230609974280e+00, 3.358539765975526e+00, 0.000000000000000e+00, 2.064139773294661e+00, 3.637097631044274e+00, 0.000000000000000e+00, 2.094044222290687e+00, 1.190644851816695e+00, 0.000000000000000e+00, 6.591791275771952e-01, 2.368321396008488e+00, 0.000000000000000e+00, 2.707790999045241e+00, 3.647197136745277e-01, 0.000000000000000e+00, 3.294310632034819e+01, 3.647197136745360e-01, 0.000000000000000e+00, 3.294310632033263e+01, -2.980881091220618e-06, 0.000000000000000e+00, -2.983637748691348e-06, -2.976287689922604e-06, 0.000000000000000e+00, -2.979186223260914e-06, -2.980627993207746e-06, 0.000000000000000e+00, -2.983481393206569e-06, -2.976680089849033e-06, 0.000000000000000e+00, -2.979444428787600e-06, -2.978531305123989e-06, 0.000000000000000e+00, -2.981401464448306e-06, -2.978531305123989e-06, 0.000000000000000e+00, -2.981401464448306e-06, -1.508255983152581e-04, 0.000000000000000e+00, -1.508529435398947e-04, -1.465792582233804e-04, 0.000000000000000e+00, -1.467221401113130e-04, -1.544463326278287e-04, 0.000000000000000e+00, -1.535788328087877e-04, -1.506924143131219e-04, 0.000000000000000e+00, -1.497926409993541e-04, -1.458654403497068e-04, 0.000000000000000e+00, -1.481158647612590e-04, -1.458654403497068e-04, 0.000000000000000e+00, -1.481158647612590e-04, -1.018333778668242e-02, 0.000000000000000e+00, -1.022449719461180e-02, -3.630044261804867e-03, 0.000000000000000e+00, -3.510219792649453e-03, -1.417056986602146e-02, 0.000000000000000e+00, -1.307923577408807e-02, -6.220772140591145e-03, 0.000000000000000e+00, -6.602291607864503e-03, -8.885794555993039e-03, 0.000000000000000e+00, -9.805144689800495e-03, -8.885794555993040e-03, 0.000000000000000e+00, -9.805144689800505e-03, -1.733727449157260e-01, 0.000000000000000e+00, -2.402276866253336e-01, -3.564095343970073e-01, 0.000000000000000e+00, -3.604458613795367e-01, 5.176412138653710e-02, 0.000000000000000e+00, -2.702305991055574e-01, -1.151651691624572e-04, 0.000000000000000e+00, -1.152782258661326e-04, -1.144191184619770e-01, 0.000000000000000e+00, -6.335959486152672e-01, -1.144191184619770e-01, 0.000000000000000e+00, -6.335959486152672e-01, 3.986103218350067e+00, 0.000000000000000e+00, 2.931324317540812e+00, 3.174202581503563e+00, 0.000000000000000e+00, 2.815001305356393e+00, 2.375429286090405e+01, 0.000000000000000e+00, 1.504703291092876e+01, 5.071997644875501e-01, 0.000000000000000e+00, 4.673749248334075e-01, 2.712576611002712e+01, 0.000000000000000e+00, 2.169277617665241e+00, 2.712576611003301e+01, 0.000000000000000e+00, 2.169277617665930e+00, 3.356088987920823e-03, 0.000000000000000e+00, 3.378402509956583e-03, -3.780968271695464e-03, 0.000000000000000e+00, -3.710868826718939e-03, -2.049648047889182e-03, 0.000000000000000e+00, -1.976680072488369e-03, -8.574661099937044e-05, 0.000000000000000e+00, -5.298405879794317e-05, -1.140879624845964e-03, 0.000000000000000e+00, -1.086074003025658e-03, -1.140879624845964e-03, 0.000000000000000e+00, -1.086074003025658e-03, 9.435925976968580e-03, 0.000000000000000e+00, 9.230453207725675e-03, -2.150344275077331e-02, 0.000000000000000e+00, -2.129445712116240e-02, -1.648362067440919e-02, 0.000000000000000e+00, -1.630536178017456e-02, -1.134299622534005e-02, 0.000000000000000e+00, -1.126814706860955e-02, -1.400271960998332e-02, 0.000000000000000e+00, -1.390329750606802e-02, -1.400271960998332e-02, 0.000000000000000e+00, -1.390329750606802e-02, -3.641902360908046e-03, 0.000000000000000e+00, -3.510336168854731e-03, -2.436935293719033e-01, 0.000000000000000e+00, -2.449301358865185e-01, -1.601306666687134e-01, 0.000000000000000e+00, -1.604966662188001e-01, -6.289543618038522e-02, 0.000000000000000e+00, -6.259498492777463e-02, -1.048837066947866e-01, 0.000000000000000e+00, -1.050002706757405e-01, -1.048837066947866e-01, 0.000000000000000e+00, -1.050002706757406e-01, -2.812978745855535e-02, 0.000000000000000e+00, -2.772900489548812e-02, 8.826993123318870e-01, 0.000000000000000e+00, 8.217505964866288e-01, 7.549445114224391e-01, 0.000000000000000e+00, 4.681263301620948e-01, -5.943189166308369e-02, 0.000000000000000e+00, -5.929103356385009e-02, 5.371651124617982e-01, 0.000000000000000e+00, -1.912825140538894e-01, 5.371651124617942e-01, 0.000000000000000e+00, -1.912825140538917e-01, 2.343228464488647e+00, 0.000000000000000e+00, 1.757552387122372e+00, 1.567441307768601e+01, 0.000000000000000e+00, 1.544132625488714e+01, 9.329653701271077e+00, 0.000000000000000e+00, 5.712518786791877e+00, 3.547475461513104e-01, 0.000000000000000e+00, 1.918577443255250e-01, 3.840715036133258e+01, 0.000000000000000e+00, 3.973100754261514e+00, 3.840715036131732e+01, 0.000000000000000e+00, 3.973100754259726e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
