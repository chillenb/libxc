
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_bop_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_bop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.083027337192737e+01, -2.083030109213972e+01, -2.083049220983701e+01, -2.083007838839502e+01, -2.083028556968109e+01, -2.083028556968109e+01, -3.255387228961068e+00, -3.255356460292307e+00, -3.254730665278422e+00, -3.256481245398202e+00, -3.255434434731273e+00, -3.255434434731273e+00, -4.689480850551089e-01, -4.684785999903551e-01, -4.576526393611834e-01, -4.627793095011598e-01, -4.614116321156442e-01, -4.614116321156442e-01, -4.102718134890897e-02, -4.258889699574651e-02, -5.766383977142039e-01, -2.092919230614514e-02, -2.808076249102864e-02, -2.808076249102864e-02, -8.784281456643751e-06, -1.024650663676575e-05, -7.180998084726795e-04, -1.970298711929011e-06, -3.959926564585705e-06, -3.959926564585709e-06, -4.839880827076788e+00, -4.839370965403438e+00, -4.839867666180297e+00, -4.839417413781108e+00, -4.839616782004453e+00, -4.839616782004453e+00, -1.846769422496095e+00, -1.858060702180969e+00, -1.844760612915960e+00, -1.854746415068177e+00, -1.853972329330950e+00, -1.853972329330950e+00, -3.789278986469683e-01, -4.179311766194985e-01, -3.392700672551635e-01, -3.530889550151697e-01, -3.867859542241873e-01, -3.867859542241873e-01, -8.181269878569606e-03, -3.943933145490851e-02, -6.757893403296398e-03, -1.617153020331148e+00, -1.276053614068544e-02, -1.276053614068544e-02, -1.089959081801458e-06, -1.970629266133040e-06, -1.971848705354399e-06, -2.559277805162132e-03, -2.387344312038640e-06, -2.387344312038638e-06, -3.729879874177582e-01, -3.716477901636306e-01, -3.721328340062042e-01, -3.725196820542885e-01, -3.723269816486742e-01, -3.723269816486742e-01, -3.583550267676534e-01, -2.963011900404665e-01, -3.146257414441367e-01, -3.322865022877716e-01, -3.232866842104858e-01, -3.232866842104858e-01, -4.463027815403744e-01, -6.699531805564475e-02, -9.892559879180272e-02, -1.671835668232219e-01, -1.299013220821076e-01, -1.299013220821076e-01, -2.602599730459040e-01, -6.286193814764307e-04, -1.399619037756074e-03, -1.567319449103671e-01, -4.866851804721416e-03, -4.866851804721431e-03, -2.018657185205058e-05, -1.062696257278406e-07, -5.856192510508828e-07, -4.143851336256336e-03, -2.129792955938855e-06, -2.129792955938850e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_bop_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_bop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.506392701529986e+01, -2.506402093878049e+01, -2.506442232825886e+01, -2.506302527946533e+01, -2.506375959833008e+01, -2.506375959833008e+01, -3.918086035088225e+00, -3.918119064133452e+00, -3.918982707348040e+00, -3.918253086927889e+00, -3.918223536916098e+00, -3.918223536916098e+00, -6.334066234380649e-01, -6.324929956308147e-01, -6.108094462456887e-01, -6.170551203342607e-01, -6.157635453744287e-01, -6.157635453744287e-01, -7.941205962200368e-02, -8.196664345114131e-02, -7.629244411715372e-01, -4.394926545094918e-02, -5.704994785286798e-02, -5.704994785286800e-02, -2.877047685277220e-05, -3.346179048278787e-05, -1.932049816123652e-03, -6.664287067786584e-06, -1.326386675443808e-05, -1.326386675443809e-05, -6.047147771603807e+00, -6.049471028158713e+00, -6.047253358036008e+00, -6.049304326476174e+00, -6.048325811515865e+00, -6.048325811515865e+00, -2.090479426310882e+00, -2.107792287359480e+00, -2.075977360510284e+00, -2.091202794672717e+00, -2.107143236169777e+00, -2.107143236169777e+00, -5.382418657483232e-01, -6.013178772067629e-01, -4.867424083074108e-01, -5.135717681152270e-01, -5.496349963687490e-01, -5.496349963687490e-01, -1.866526038531321e-02, -7.710127729655128e-02, -1.566363765706535e-02, -2.155473810226269e+00, -2.814169798032055e-02, -2.814169798032055e-02, -3.746691451242317e-06, -6.687384301851496e-06, -6.832891574264908e-06, -6.395329750801333e-03, -8.197234305091184e-06, -8.197234305091179e-06, -5.448334821267694e-01, -5.400259607926802e-01, -5.416984167493485e-01, -5.430914610392881e-01, -5.423925224326359e-01, -5.423925224326359e-01, -5.257881676773287e-01, -4.276828648248648e-01, -4.548716490293715e-01, -4.824660852001182e-01, -4.682970542178437e-01, -4.682970542178437e-01, -6.381341787607474e-01, -1.219096606991954e-01, -1.692226664333547e-01, -2.624858864002436e-01, -2.122641775682627e-01, -2.122641775682627e-01, -3.827400534728975e-01, -1.698970631388095e-03, -3.611298632450099e-03, -2.480640995344777e-01, -1.165786565860445e-02, -1.165786565860451e-02, -6.419525363016833e-05, -3.822971165617047e-07, -2.053522177090825e-06, -1.004454527946237e-02, -7.344060926350114e-06, -7.344060926350100e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_bop_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_bop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.054757255735344e-09, -7.054723287360671e-09, -7.054477339232737e-09, -7.054984696876371e-09, -7.054732338101511e-09, -7.054732338101511e-09, -8.004983973257349e-06, -8.005308856808105e-06, -8.012080112523978e-06, -7.994528434466386e-06, -8.004637718269617e-06, -8.004637718269617e-06, -2.013392801714121e-03, -2.013262826613386e-03, -1.998178865414715e-03, -1.963439289271739e-03, -1.976735827381749e-03, -1.976735827381749e-03, 7.361791848717189e-02, 7.354008728179416e-02, -1.357136307894145e-03, 1.107301886823800e-01, 1.002012681496646e-01, 1.002012681496644e-01, 2.418099614627190e+00, 2.474085744814852e+00, 4.834433944811972e-01, 2.856913180990988e+00, 3.210816826557816e+00, 3.210816826557824e+00, -1.936205192745430e-06, -1.937562966854507e-06, -1.936249425318427e-06, -1.937448219392756e-06, -1.936902472356706e-06, -1.936902472356706e-06, -5.329031066374214e-05, -5.230746041700693e-05, -5.336420412291855e-05, -5.249146443480700e-05, -5.271244477128292e-05, -5.271244477128292e-05, -3.121016478663855e-03, -3.019547534948101e-03, -3.543875446736627e-03, -3.723348359762755e-03, -3.067815503771346e-03, -3.067815503771346e-03, 1.613104902256954e-01, 4.049415859346249e-02, 1.867098468937496e-01, -9.423068868042623e-05, 1.701813683407025e-01, 1.701813683407025e-01, 4.087953891432081e+00, 3.346340804959748e+00, 1.984055030147967e+01, 3.585850641697643e-01, 9.169142922707062e+00, 9.169142922707044e+00, -3.741111063433133e-03, -3.582029481471676e-03, -3.628159373947586e-03, -3.673208035344640e-03, -3.649773390407912e-03, -3.649773390407912e-03, -4.003201482251686e-03, -3.826269383028530e-03, -3.801506894505816e-03, -3.800034833709715e-03, -3.798845494059841e-03, -3.798845494059841e-03, -2.692173980084280e-03, 1.617801328417247e-02, 6.064338726630147e-03, -1.874103767612875e-03, 1.402894847239093e-03, 1.402894847239083e-03, -4.128590611041999e-03, 4.636463441706570e-01, 3.588978500095074e-01, 5.976856320044459e-04, 3.221281055882770e-01, 3.221281055882728e-01, 1.663093278265078e+00, 2.355905772705185e+01, 9.301036465648156e+00, 3.415799392529080e-01, 1.171559926142370e+01, 1.171559926142373e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
