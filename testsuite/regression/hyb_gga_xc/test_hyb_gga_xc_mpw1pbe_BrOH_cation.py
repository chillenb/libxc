
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.585472562441184e+01, -1.585474649954826e+01, -1.585489012596644e+01, -1.585457849940676e+01, -1.585473456045885e+01, -1.585473456045885e+01, -2.662928782621912e+00, -2.662905135985291e+00, -2.662422933308376e+00, -2.663759604272605e+00, -2.662963831799545e+00, -2.662963831799545e+00, -5.535300476675048e-01, -5.532992210856261e-01, -5.490783037691397e-01, -5.529254068040814e-01, -5.530725252652036e-01, -5.530725252652036e-01, -1.695603779962004e-01, -1.707430605903709e-01, -6.376875184468744e-01, -1.445979287186678e-01, -1.633188233405160e-01, -1.633188233405159e-01, -6.454382104325402e-04, -7.633185641122823e-04, -4.182128239869540e-02, -1.348517214786713e-04, -3.833078103731904e-04, -3.833078103731908e-04, -3.855357447884475e+00, -3.855038059781953e+00, -3.855350169547657e+00, -3.855068080744289e+00, -3.855191367725574e+00, -3.855191367725574e+00, -1.614240814285595e+00, -1.622188117865174e+00, -1.614090157592653e+00, -1.621089216850780e+00, -1.618743264484230e+00, -1.618743264484230e+00, -4.770730125315873e-01, -5.096510020284614e-01, -4.451494954453075e-01, -4.562069481620665e-01, -4.836799224660044e-01, -4.836799224660044e-01, -1.174344512912764e-01, -1.812947026134493e-01, -1.108756052829195e-01, -1.436547784141556e+00, -1.259153590585722e-01, -1.259153590585722e-01, -7.454044057075214e-05, -1.359817998800073e-04, -1.468795731065967e-04, -7.944782512691148e-02, -2.035123332941996e-04, -2.035123332942042e-04, -4.740834770746739e-01, -4.718627597091405e-01, -4.726179921823147e-01, -4.732702858451704e-01, -4.729410854014647e-01, -4.729410854014647e-01, -4.622318807578137e-01, -4.123000586218726e-01, -4.248253673569837e-01, -4.383992772916937e-01, -4.312432632844431e-01, -4.312432632844431e-01, -5.324502138690956e-01, -2.151444792931097e-01, -2.441950780440344e-01, -2.992853186861507e-01, -2.688459279902536e-01, -2.688459279902536e-01, -3.818560809628779e-01, -3.792286726252942e-02, -6.179424574751795e-02, -2.865916139909588e-01, -9.597856522961462e-02, -9.597856522961466e-02, -1.510728138974360e-03, -7.329697609778673e-06, -4.078032086972365e-05, -9.173388683787199e-02, -1.720523311636400e-04, -1.720523311636354e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.903833320889051e+01, -1.903831065829080e+01, -1.903841609178586e+01, -1.903837122621164e+01, -1.903866554494781e+01, -1.903873118851171e+01, -1.903772514335275e+01, -1.903753793197797e+01, -1.903837911048160e+01, -1.903800597407627e+01, -1.903837911048160e+01, -1.903800597407627e+01, -3.154255162824565e+00, -3.154356648743604e+00, -3.154288481160225e+00, -3.154393299489634e+00, -3.155126284932420e+00, -3.155323771696366e+00, -3.154169811371667e+00, -3.154366672697413e+00, -3.153718087960824e+00, -3.155124452600301e+00, -3.153718087960824e+00, -3.155124452600301e+00, -6.528826124904005e-01, -6.560307220968010e-01, -6.513370305550953e-01, -6.551864810250519e-01, -6.260225143274567e-01, -6.211121691809462e-01, -6.281294613094275e-01, -6.297130662127904e-01, -6.523467686985727e-01, -6.048783739629321e-01, -6.523467686985727e-01, -6.048783739629321e-01, -1.703302677384203e-01, -1.744680947775587e-01, -1.738005935894947e-01, -1.786390827733179e-01, -7.448893485098640e-01, -7.700314101488550e-01, -1.276061246926848e-01, -1.287531289109517e-01, -1.586159827394176e-01, -1.176805731237778e-01, -1.586159827394176e-01, -1.176805731237778e-01, -2.166722865383284e-03, -2.549772685653701e-03, -2.521547760601621e-03, -3.039441635891183e-03, -9.224408869740242e-02, -9.610831831275758e-02, -5.103148927713602e-04, -4.812473477777186e-04, -1.579990316711029e-03, -5.010960885465940e-04, -1.579990316711025e-03, -5.010960885465942e-04, -4.783635173479651e+00, -4.782510570556980e+00, -4.785732405684049e+00, -4.784543739968778e+00, -4.783748778507327e+00, -4.782581993810306e+00, -4.785553457027303e+00, -4.784423685183829e+00, -4.784708565790718e+00, -4.783532920825017e+00, -4.784708565790718e+00, -4.783532920825017e+00, -1.731352881513452e+00, -1.731268692769065e+00, -1.745913333224784e+00, -1.745443698835000e+00, -1.715492009568828e+00, -1.719203169480020e+00, -1.728049013502711e+00, -1.731901017246781e+00, -1.750784988019582e+00, -1.741409067846469e+00, -1.750784988019582e+00, -1.741409067846469e+00, -6.014260462942738e-01, -6.003719619602377e-01, -6.632101067527598e-01, -6.636960226943081e-01, -5.498075330460025e-01, -5.650817710811615e-01, -5.856275881365265e-01, -5.982169925703223e-01, -6.229181152795139e-01, -6.004768243082134e-01, -6.229181152795140e-01, -6.004768243082134e-01, -1.085513535613266e-01, -1.080512976425395e-01, -1.652302178567732e-01, -1.657662366145512e-01, -1.055784417786669e-01, -1.058028499468356e-01, -1.866500913769877e+00, -1.865829886612830e+00, -1.108944575389112e-01, -1.089085465171561e-01, -1.108944575389112e-01, -1.089085465171561e-01, -2.676988586033671e-04, -2.793790975618000e-04, -4.987507876506799e-04, -5.019036877377329e-04, -4.812983539021612e-04, -5.912895593057082e-04, -1.000069728409471e-01, -1.010008295304521e-01, -3.747512676322880e-04, -8.944432988745479e-04, -3.747512676322929e-04, -8.944432988745568e-04, -6.175106076551115e-01, -6.192151734086215e-01, -6.135450472555516e-01, -6.153200911463863e-01, -6.152263123853946e-01, -6.169948127371625e-01, -6.164167040480053e-01, -6.181260856329670e-01, -6.158527715950524e-01, -6.175910737117185e-01, -6.158527715950524e-01, -6.175910737117185e-01, -6.023222074446754e-01, -6.036764889095750e-01, -4.968460173836869e-01, -4.985540774127179e-01, -5.297792402497079e-01, -5.316678846426587e-01, -5.617464906664219e-01, -5.631826025415322e-01, -5.458659073894778e-01, -5.473469547841117e-01, -5.458659073894778e-01, -5.473469547841117e-01, -6.919143087064199e-01, -6.931429549254061e-01, -2.095735587028790e-01, -2.104051881239053e-01, -2.583961075240400e-01, -2.602512243447425e-01, -3.624025382897725e-01, -3.637811558047665e-01, -3.080769896195945e-01, -3.080646170472875e-01, -3.080769896195943e-01, -3.080646170472875e-01, -4.606089607576626e-01, -4.631308386341588e-01, -9.090143273088190e-02, -9.148471674981727e-02, -1.075463817931081e-01, -1.076013196593079e-01, -3.573114775498738e-01, -3.609419895687942e-01, -9.664154972800300e-02, -9.177599112621507e-02, -9.664154972800303e-02, -9.177599112621507e-02, -5.218880321950409e-03, -5.798139653199890e-03, -2.337232407161867e-05, -3.019448671583483e-05, -1.337041993833896e-04, -1.629299660373575e-04, -9.395676437675228e-02, -9.424648836361900e-02, -4.440206311524680e-04, -7.146012465149951e-04, -4.440206311524642e-04, -7.146012465149939e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.074736862146765e-08, 3.855567579455844e-10, -1.074743158088640e-08, -1.074730658220191e-08, 3.855637563905792e-10, -1.074738550548021e-08, -1.074697579919614e-08, 3.855734091993355e-10, -1.074695243557127e-08, -1.074769230173060e-08, 3.854697494807899e-10, -1.074785033668592e-08, -1.074735553464211e-08, 3.855271085313426e-10, -1.074738142163282e-08, -1.074735553464211e-08, 3.855271085313426e-10, -1.074738142163282e-08, -1.332846724997238e-05, 2.158879157656427e-06, -1.333408926496551e-05, -1.332867025288240e-05, 2.159323527660124e-06, -1.333471206488876e-05, -1.333820773077228e-05, 2.169371669283230e-06, -1.334169498270792e-05, -1.331340577467281e-05, 2.149943255801801e-06, -1.331790725131963e-05, -1.333606279441159e-05, 2.159156568071321e-06, -1.332496086046773e-05, -1.333606279441159e-05, 2.159156568071321e-06, -1.332496086046773e-05, -7.147950957751765e-03, 3.586683876242116e-03, -7.164786525815689e-03, -7.163152300899053e-03, 3.559577090514688e-03, -7.183375631156497e-03, -7.547057475109642e-03, 2.876045381924161e-03, -7.528442644565578e-03, -7.318326651684496e-03, 2.810968523930000e-03, -7.328402139791515e-03, -7.496102007515182e-03, 2.852692094259074e-03, -7.136037968094484e-03, -7.496102007515182e-03, 2.852692094259074e-03, -7.136037968094484e-03, -9.747378889724714e-01, 3.108902575321890e-01, -8.742456900764335e-01, -9.504564987251916e-01, 3.280826843588528e-01, -8.358327652490669e-01, -4.212775981006681e-03, 1.940414170439823e-03, -3.893439285683983e-03, -1.890197000743001e+00, 2.258949661124237e-01, -1.810217733209631e+00, -8.719908400203655e-01, 1.882246441728870e-01, -3.773689169127299e+00, -8.719908400203646e-01, 1.882246441728873e-01, -3.773689169127301e+00, 4.504616949051226e+02, 8.471332723898200e-03, 4.395038988712714e+02, 4.675795592040593e+02, 9.964515393423459e-03, 4.571334382934288e+02, 5.113692663052345e+01, 5.126941006152715e-02, 4.216819279963563e+01, 4.668736765283088e+02, 3.008683449168684e-03, 4.566655980158868e+02, 4.623264546374014e+02, 4.414566270491809e-03, 1.266223892159295e+03, 4.623264546374028e+02, 4.414566270088269e-03, 1.266223892159312e+03, -3.020829765415437e-06, 5.666948009101149e-07, -3.023793432081690e-06, -3.021517074813709e-06, 5.704413223836728e-07, -3.024397522978386e-06, -3.020861606518356e-06, 5.668443577206054e-07, -3.023778298254251e-06, -3.021405452093704e-06, 5.701514261968389e-07, -3.024375542798583e-06, -3.021215019121991e-06, 5.686004611431787e-07, -3.024088634257603e-06, -3.021215019121991e-06, 5.686004611431787e-07, -3.024088634257603e-06, -1.020511991615562e-04, 1.221811741084532e-05, -1.020704529050972e-04, -9.987628706025418e-05, 1.218856108878283e-05, -9.996935885850787e-05, -1.024656251610619e-04, 1.161795009824474e-05, -1.024765233640360e-04, -1.005889922919709e-04, 1.159619612758267e-05, -1.005529740364201e-04, -1.005432899976882e-04, 1.250231835492394e-05, -1.008052205791945e-04, -1.005432899976882e-04, 1.250231835492394e-05, -1.008052205791945e-04, -1.245596432004880e-02, 1.180452397706796e-02, -1.266439037069197e-02, -9.180753833600969e-03, 1.489938286408802e-02, -9.210339034418379e-03, -1.825373900488086e-02, 1.535577972946644e-02, -1.529539802956605e-02, -1.646017557298312e-02, 2.278859644535717e-02, -1.294862046818180e-02, -1.030307177558272e-02, 1.179162458306085e-02, -1.377284913029242e-02, -1.030307177558272e-02, 1.179162458306085e-02, -1.377284913029242e-02, -3.293049050754373e+00, 1.261488607621168e-01, -3.321964237056167e+00, -7.454430205496451e-01, 1.139695105238702e-01, -7.346586186327880e-01, -3.787161149361209e+00, 1.279112469154852e-01, -3.649477296186873e+00, -1.431677219345277e-04, 1.207887057881010e-04, -1.435734607047651e-04, -3.044470480265063e+00, 2.409472748596690e-01, -3.159219955743950e+00, -3.044470480265063e+00, 2.409472748596690e-01, -3.159219955743950e+00, 6.866363720036286e+02, 2.933546798259037e-03, 5.939794758478320e+02, 5.632164868508025e+02, 3.699144102256803e-03, 5.205913971486967e+02, 3.104209508732291e+03, 3.685108437354808e-02, 3.387439510657123e+03, -1.868973138464260e+00, 1.250822448857004e-01, -1.695481309278893e+00, 1.598720036208691e+03, 1.410360645889085e-02, 1.461788926229595e+03, 1.598720036208691e+03, 1.410360646869916e-02, 1.461788926229598e+03, -1.388385820633824e-02, 2.514346072918196e-02, -1.358798885053445e-02, -1.277732230560514e-02, 2.157065992117518e-02, -1.246818262187506e-02, -1.274429691060327e-02, 2.270457728491302e-02, -1.243897503235535e-02, -1.293822443978999e-02, 2.373865089872573e-02, -1.263124872005959e-02, -1.279966509747080e-02, 2.321019190891285e-02, -1.249319220834982e-02, -1.279966509747080e-02, 2.321019190891285e-02, -1.249319220834982e-02, -1.580545454042730e-02, 2.977269840520045e-02, -1.538434965788093e-02, -2.336307742167391e-02, 1.592277215307748e-02, -2.296039285022419e-02, -2.033883159875799e-02, 1.838749842245184e-02, -1.996281816821182e-02, -1.757505784380653e-02, 2.169730037966074e-02, -1.722824281471603e-02, -1.897547432393575e-02, 1.995497716545398e-02, -1.860319991405734e-02, -1.897547432393575e-02, 1.995497716545398e-02, -1.860319991405734e-02, -7.712666041103892e-03, 1.183264719377924e-02, -7.695491963630054e-03, -3.621720183092637e-01, 8.498631964250428e-02, -3.561144331134675e-01, -2.084403878244078e-01, 7.821972418059023e-02, -2.028698175186861e-01, -8.511460939265281e-02, 6.964082434152352e-02, -8.295790291464082e-02, -1.332266658855101e-01, 7.796350422599263e-02, -1.340820482660695e-01, -1.332266658855102e-01, 7.796350422599266e-02, -1.340820482660696e-01, -3.192580887970943e-02, 2.285950305464996e-02, -3.110447133022014e-02, 5.338159418744488e+01, 4.213028450134424e-02, 5.227900053882217e+01, 1.484866349794920e+01, 6.458066222247318e-02, 1.180704409126368e+01, -1.021405307406778e-01, 1.099497136873529e-01, -9.489585175693971e-02, -5.418855594129847e+00, 2.182010199987041e-01, -6.487787087549359e+00, -5.418855594129853e+00, 2.182010199987039e-01, -6.487787087549364e+00, 3.292098218041104e+02, 1.056259116938041e-02, 3.318652877292549e+02, 2.550752109110008e+03, 4.011531506685853e-03, 4.358167808614508e+03, 1.364096369648197e+03, 5.020763908060611e-03, 1.426060487441384e+03, -5.982320388206601e+00, 2.002688123716920e-01, -5.916775771334522e+00, 3.202160145850461e+03, 1.800188742308661e-02, 1.544994652873021e+03, 3.202160145850460e+03, 1.800188743452388e-02, 1.544994652873035e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
