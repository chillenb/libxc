
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_pbeh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.581256380359999e-01, -2.581263206357258e-01, -2.581278046172593e-01, -2.581176853020928e-01, -2.581232061205994e-01, -2.581232061205994e-01, -3.074409469086550e-01, -3.074410566365263e-01, -3.074442126189740e-01, -3.074411281844742e-01, -3.074413263554714e-01, -3.074413263554714e-01, -2.467839983366378e-01, -2.468172229693679e-01, -2.486125688429887e-01, -2.489847695825433e-01, -2.487370579704230e-01, -2.487370579704230e-01, -1.469812183939312e-01, -1.474395395082478e-01, -2.558072189677597e-01, -1.308103979823206e-01, -1.373047958364014e-01, -1.373047958364014e-01, -8.067736624359934e-03, -8.490652095303508e-03, -4.572338457990655e-02, -4.662177299487097e-03, -5.857179535588751e-03, -5.857179535588751e-03, -3.156627311584620e-01, -3.158110581404370e-01, -3.156688172240427e-01, -3.157997403689426e-01, -3.157380484822653e-01, -3.157380484822653e-01, -3.077442565178181e-01, -3.073493068206530e-01, -3.090648979274253e-01, -3.086922522276083e-01, -3.069099094063118e-01, -3.069099094063118e-01, -2.357323136850107e-01, -2.465504169476089e-01, -2.301150366321390e-01, -2.362712929254626e-01, -2.370478093390891e-01, -2.370478093390891e-01, -1.049939238746589e-01, -1.555141789420054e-01, -9.887784232108172e-02, -3.098063741006433e-01, -1.150925811861361e-01, -1.150925811861361e-01, -3.597536328721345e-03, -4.557676708220125e-03, -3.484818493404004e-03, -7.100791153476745e-02, -4.198040656380938e-03, -4.198040656380938e-03, -2.438034640819181e-01, -2.405196215395917e-01, -2.415617221139005e-01, -2.425123630876579e-01, -2.420264010216712e-01, -2.420264010216712e-01, -2.426338018092938e-01, -2.242837222669048e-01, -2.263717358387000e-01, -2.305300134760115e-01, -2.281067401097136e-01, -2.281067401097136e-01, -2.495547056646659e-01, -1.728811449076835e-01, -1.830691528188083e-01, -1.970759653680052e-01, -1.893098667167575e-01, -1.893098667167575e-01, -2.180367136230142e-01, -4.388443124522790e-02, -5.868970421519885e-02, -1.926349367343578e-01, -8.631155567273631e-02, -8.631155567273649e-02, -1.137743649579961e-02, -1.218603182758143e-03, -2.557678104423437e-03, -8.212776282897763e-02, -3.884585490820079e-03, -3.884585490820079e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_pbeh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.123737336777086e-01, -3.123795324041187e-01, -3.123957409390798e-01, -3.123096648278355e-01, -3.123561280150399e-01, -3.123561280150399e-01, -3.120014185924065e-01, -3.120185894059873e-01, -3.124158554812822e-01, -3.117258235421418e-01, -3.120220432972278e-01, -3.120220432972278e-01, -2.462765222769784e-01, -2.456768082559780e-01, -2.307013886587502e-01, -2.316182179043625e-01, -2.319428749944940e-01, -2.319428749944940e-01, -1.394031346521516e-01, -1.408063961919448e-01, -2.575490351289541e-01, -1.263785839622269e-01, -1.297002950144773e-01, -1.297002950144773e-01, -1.074232926758203e-02, -1.130336292677780e-02, -5.881179462067360e-02, -6.213526755213072e-03, -7.803589941940782e-03, -7.803589941940779e-03, -3.646772040457463e-01, -3.652104274912266e-01, -3.646992616586469e-01, -3.651700384112092e-01, -3.649489205004165e-01, -3.649489205004165e-01, -2.450192836172043e-01, -2.462877515126415e-01, -2.423480153947121e-01, -2.433576536585462e-01, -2.471570293686079e-01, -2.471570293686079e-01, -2.625876774951726e-01, -2.819867109133641e-01, -2.545004583981318e-01, -2.716593193025714e-01, -2.660975004456866e-01, -2.660975004456866e-01, -1.151156279678111e-01, -1.420793555893704e-01, -1.105351305285728e-01, -3.559001823582925e-01, -1.174754597809462e-01, -1.174754597809462e-01, -4.795305435166317e-03, -6.074178773214019e-03, -4.643555430472891e-03, -8.589542020094153e-02, -5.593898723282827e-03, -5.593898723282829e-03, -2.752643716562495e-01, -2.754581174464873e-01, -2.756947712539307e-01, -2.756582379620713e-01, -2.757052707817242e-01, -2.757052707817242e-01, -2.722871277540482e-01, -2.333407065907773e-01, -2.492635531962326e-01, -2.634630127598992e-01, -2.567403775586169e-01, -2.567403775586169e-01, -2.854485051922988e-01, -1.537108427544242e-01, -1.678118214334053e-01, -2.088255362633036e-01, -1.862791610208345e-01, -1.862791610208345e-01, -2.280287511131203e-01, -5.668645890124871e-02, -7.381618113112115e-02, -2.150679600885617e-01, -9.816475657386008e-02, -9.816475657385990e-02, -1.513258870650949e-02, -1.624695107662937e-03, -3.409521228547871e-03, -9.496732177562023e-02, -5.176361288706620e-03, -5.176361288706617e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_pbeh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.094957871435156e-10, 2.095116321335351e-10, 2.095519804422678e-10, 2.093168854853193e-10, 2.094443403855095e-10, 2.094443403855095e-10, 1.816081688826105e-08, 1.843670642733645e-08, 2.484013270379169e-08, 1.373541151563045e-08, 1.849043869670297e-08, 1.849043869670297e-08, -8.202103849808326e-04, -8.384317269280075e-04, -1.246924026880565e-03, -1.193210673531036e-03, -1.196309004440975e-03, -1.196309004440975e-03, -3.046490605623704e-01, -2.938239585050372e-01, -3.501589015061077e-04, -5.262324040341846e-01, -4.533540215478268e-01, -4.533540215478271e-01, -1.945459562762684e+00, -2.054784567510562e+00, -1.119447691217239e+00, -1.770351839276798e+00, -2.247913050032757e+00, -2.247913050034159e+00, 1.983117287376850e-07, 2.011917579054443e-07, 1.984287265715411e-07, 2.009709811419352e-07, 1.997761516391722e-07, 1.997761516391722e-07, -8.573901923264221e-06, -8.257469410515753e-06, -8.826516856899995e-06, -8.555270212143061e-06, -8.258828547626537e-06, -8.258828547626537e-06, 4.779324652811343e-04, 3.689807262366634e-03, 5.418362987603693e-05, 4.675996659662424e-03, 8.162592670727577e-04, 8.162592670727577e-04, -7.009496394472979e-01, -2.262060330238553e-01, -7.826990533239688e-01, 4.659308693431211e-05, -7.794705060211182e-01, -7.794705060211182e-01, -2.333201792981583e+00, -2.083485199368732e+00, -1.307755775524130e+01, -1.212615900074060e+00, -6.086293031484632e+00, -6.086293031475697e+00, 7.301895461820362e-03, 5.196678505722680e-03, 5.856227582558048e-03, 6.463547934130605e-03, 6.152319635267293e-03, 6.152319635267293e-03, 8.982203328937715e-03, -2.829810169702438e-03, -3.535829971096412e-04, 2.587168680086757e-03, 1.042602394236853e-03, 1.042602394236853e-03, 2.905787591155095e-03, -1.154545840399351e-01, -6.385514270630806e-02, -1.392420461051488e-02, -3.487569769393219e-02, -3.487569769393217e-02, -4.119892578055213e-03, -1.024190330422171e+00, -1.003543522409832e+00, -7.760137369344444e-03, -1.282728074743209e+00, -1.282728074743235e+00, -1.565857414716523e+00, -1.023185186882212e+01, -4.950314084065163e+00, -1.313935890569902e+00, -7.687693544278624e+00, -7.687693544280476e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
