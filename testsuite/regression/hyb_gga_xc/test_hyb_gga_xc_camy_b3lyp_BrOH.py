
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_b3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.705735349450542e+01, -1.705737262697987e+01, -1.705752071709809e+01, -1.705720616426685e+01, -1.705736305991388e+01, -1.705736305991388e+01, -2.814399483690946e+00, -2.814377385214854e+00, -2.813887056324340e+00, -2.815333355332525e+00, -2.814400197076708e+00, -2.814400197076708e+00, -5.354663877684442e-01, -5.353040024225441e-01, -5.319633085299025e-01, -5.357990223389741e-01, -5.354051234917110e-01, -5.354051234917110e-01, -1.320242253801181e-01, -1.337251257304526e-01, -6.347794761170757e-01, -9.262841872612840e-02, -1.325321235630017e-01, -1.325321235630017e-01, -2.475617102432155e-02, -2.512132325440123e-02, -4.279608998988734e-02, -2.140033920107426e-02, -2.487749076548669e-02, -2.487749076548669e-02, -4.089835039695868e+00, -4.089339285446186e+00, -4.089789534855223e+00, -4.089403973975196e+00, -4.089573434221169e+00, -4.089573434221169e+00, -1.686637404067040e+00, -1.694977227206030e+00, -1.687106162821851e+00, -1.693598189943006e+00, -1.691689708088130e+00, -1.691689708088130e+00, -4.434558000670575e-01, -4.671126353362435e-01, -4.205146521685108e-01, -4.267736368882368e-01, -4.590618212013072e-01, -4.590618212013072e-01, -6.507434256397518e-02, -1.354303305884941e-01, -6.475854387281509e-02, -1.462444858351887e+00, -7.704636783435484e-02, -7.704636783435484e-02, -2.097944243864320e-02, -2.167767700021348e-02, -1.657775957702401e-02, -4.653313575556194e-02, -1.969456210799454e-02, -1.969456210799454e-02, -4.378945981607257e-01, -4.393438762089844e-01, -4.388632383847577e-01, -4.384615839849420e-01, -4.386652766466005e-01, -4.386652766466005e-01, -4.225016545895026e-01, -3.903254110907908e-01, -4.007425950171885e-01, -4.095835494644494e-01, -4.050772900293595e-01, -4.050772900293595e-01, -4.915212611234669e-01, -1.756496971247738e-01, -2.101855506958001e-01, -2.654884103928196e-01, -2.365495061771163e-01, -2.365495061771162e-01, -3.502945954227278e-01, -4.288428586032850e-02, -4.480444415479133e-02, -2.452621405418653e-01, -5.491948638250597e-02, -5.491948638250597e-02, -2.734414788130245e-02, -1.482693947865525e-02, -1.728372283882011e-02, -5.327254133953824e-02, -1.761809569060031e-02, -1.761809569060031e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_b3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.044505741214662e+01, -2.044512398658534e+01, -2.044543293518781e+01, -2.044434252618421e+01, -2.044509242138426e+01, -2.044509242138426e+01, -3.304570046617656e+00, -3.304594724342153e+00, -3.305408947742562e+00, -3.304704472941383e+00, -3.304596767937602e+00, -3.304596767937602e+00, -6.289356300899905e-01, -6.282251763578550e-01, -6.108393185660327e-01, -6.155924369937880e-01, -6.286764983502646e-01, -6.286764983502646e-01, -1.695766714426986e-01, -1.711978845549032e-01, -7.574716709203070e-01, -1.314900237187642e-01, -1.700461793098298e-01, -1.700461793098298e-01, -1.099420455524731e-02, -1.134435807163700e-02, -3.572705805253756e-02, -7.077084191375099e-03, -1.123227842631182e-02, -1.123227842631182e-02, -5.036552699111399e+00, -5.038467208289818e+00, -5.036748923329734e+00, -5.038237540474675e+00, -5.037533485353365e+00, -5.037533485353365e+00, -1.813183277818476e+00, -1.826839365387736e+00, -1.806666347162435e+00, -1.817284173060957e+00, -1.831007188909124e+00, -1.831007188909124e+00, -5.524687230378944e-01, -6.124677057540135e-01, -5.231808242699135e-01, -5.539251610441502e-01, -5.753490363340380e-01, -5.753490363340380e-01, -1.022170791347955e-01, -1.834027099756504e-01, -9.875549866561145e-02, -1.887063496456841e+00, -1.134361423111351e-01, -1.134361423111351e-01, -6.887539046387963e-03, -7.463233278750826e-03, -5.676284086534505e-03, -5.561494131389329e-02, -6.800684359616157e-03, -6.800684359616152e-03, -5.855989452551071e-01, -5.784865684616297e-01, -5.809236869876794e-01, -5.828867290682199e-01, -5.818953398258755e-01, -5.818953398258755e-01, -5.669236206077043e-01, -4.742789980462854e-01, -4.980808910976445e-01, -5.222648935048879e-01, -5.097125762063709e-01, -5.097125762063709e-01, -6.423570165912709e-01, -2.242862257753725e-01, -2.597447585818543e-01, -3.276654334251739e-01, -2.903018090951285e-01, -2.903018090951284e-01, -4.267882472035516e-01, -3.277402834281791e-02, -4.906588951503525e-02, -3.086686718790386e-01, -7.669101957608397e-02, -7.669101957608399e-02, -1.250961339085109e-02, -3.471117012719092e-03, -4.909358993028174e-03, -7.084824043305607e-02, -5.945572077555777e-03, -5.945572077555775e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_b3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.824816578980079e-09, -5.824792200063499e-09, -5.824595582702224e-09, -5.824996563394046e-09, -5.824804456776852e-09, -5.824804456776852e-09, -7.282608305179803e-06, -7.282852458193639e-06, -7.288387264118408e-06, -7.272790057547373e-06, -7.282611852734682e-06, -7.282611852734682e-06, -3.302817749585665e-03, -3.299949692410081e-03, -3.190420057296424e-03, -3.124981477333634e-03, -3.301845359211602e-03, -3.301845359211602e-03, -1.075106781942916e-01, -1.129564712043569e-01, -1.923730424143666e-03, 7.274800634899370e-02, -1.093314784843831e-01, -1.093314784843831e-01, -9.797710747977766e+02, -8.593692980106924e+02, -4.920459364646918e+00, -7.259416319892072e+03, -8.951602812846866e+02, -8.951602812846866e+02, -1.704988942092694e-06, -1.706214853857855e-06, -1.705104567054792e-06, -1.706057883028522e-06, -1.705630401414926e-06, -1.705630401414926e-06, -5.185004563981587e-05, -5.089974972569957e-05, -5.178925571970245e-05, -5.104818816158265e-05, -5.128428354049880e-05, -5.128428354049880e-05, -7.029674465312847e-03, -6.763165666809188e-03, -8.333905226220508e-03, -8.930628489755123e-03, -6.362448937720746e-03, -6.362448937720746e-03, 6.261152180666817e-01, -2.328881406386942e-02, 5.842949648201374e-01, -9.815512669986329e-05, 2.596958820297918e-01, 2.596958820297918e-01, -8.184246673659420e+03, -5.581782068786099e+03, -1.718627796694404e+04, 5.194269423071310e-01, -8.139520963784521e+03, -8.139520963784525e+03, -9.091217986218651e-03, -8.465423547424600e-03, -8.656596937277968e-03, -8.826240650300314e-03, -8.738672109524148e-03, -8.738672109524148e-03, -1.045118558207463e-02, -9.811311678232347e-03, -9.705939045816911e-03, -9.731911736561464e-03, -9.716115711325001e-03, -9.716115711325001e-03, -5.613417096062859e-03, -4.111712389772562e-02, -4.100068458423908e-02, -3.134533459038929e-02, -3.746154931215862e-02, -3.746154931215862e-02, -1.368589698270794e-02, -7.066528220863509e+00, 1.021261601596308e-01, -4.418615520088402e-02, 7.304199986415586e-01, 7.304199986415580e-01, -5.743747875388214e+02, -2.711514257864146e+05, -4.083783893198430e+04, 5.621957422202849e-01, -1.444847849693465e+04, -1.444847849693471e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
