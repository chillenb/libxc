
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lrc_wpbeh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.671756231531536e+01, -1.671758509386140e+01, -1.671773921368095e+01, -1.671739922979700e+01, -1.671756985957062e+01, -1.671756985957062e+01, -2.730089391700440e+00, -2.730064180164390e+00, -2.729549780012243e+00, -2.730972440677039e+00, -2.730126372596007e+00, -2.730126372596007e+00, -4.965935807977473e-01, -4.963650652934699e-01, -4.923772480176039e-01, -4.964175034149254e-01, -4.965771975773709e-01, -4.965771975773709e-01, -9.682309238748035e-02, -9.823739135552176e-02, -5.853145972798492e-01, -6.842784606928931e-02, -8.971047681165820e-02, -8.971047681165820e-02, -6.930686324600277e-06, -8.110492469468930e-06, -2.627541617790614e-03, -1.317972172842313e-06, -3.862269465738033e-06, -3.862269465738033e-06, -3.996446436357711e+00, -3.996163962106133e+00, -3.996441027657454e+00, -3.996191510595150e+00, -3.996298865265561e+00, -3.996298865265561e+00, -1.622093832202573e+00, -1.630399925987911e+00, -1.622212319747564e+00, -1.629535403589640e+00, -1.626656274504499e+00, -1.626656274504499e+00, -4.162884894001446e-01, -4.527447347613545e-01, -3.827141524353861e-01, -3.962596978858040e-01, -4.233763847169372e-01, -4.233763847169373e-01, -3.799178689163175e-02, -1.052160486931813e-01, -3.247023984943873e-02, -1.433504073095654e+00, -4.908414187310289e-02, -4.908414187310289e-02, -6.066891636969965e-07, -1.231146082205557e-06, -5.544872876926163e-07, -1.229310995842187e-02, -1.150887152313732e-06, -1.150887152516771e-06, -4.169502491850124e-01, -4.132619605911224e-01, -4.144548835727453e-01, -4.155208840070281e-01, -4.149776329777421e-01, -4.149776329777421e-01, -4.051482905641468e-01, -3.480279050213678e-01, -3.613703662688343e-01, -3.764718646077258e-01, -3.684301505343117e-01, -3.684301505343117e-01, -4.764940237107758e-01, -1.415141998580830e-01, -1.726715433758827e-01, -2.303041966061383e-01, -1.985446608060528e-01, -1.985446608060530e-01, -3.161795146960945e-01, -2.226909829664532e-03, -6.501868370318196e-03, -2.177639267545287e-01, -2.238442628388143e-02, -2.238442628388137e-02, -1.964189366475708e-05, -2.348058569218513e-08, -2.190559060934814e-07, -1.929395433183024e-02, -8.856100916489010e-07, -8.856100917409483e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lrc_wpbeh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.015106546008022e+01, -2.015104188616154e+01, -2.015115882002075e+01, -2.015111006145292e+01, -2.015143374444082e+01, -2.015150877518480e+01, -2.015037522801993e+01, -2.015016490574642e+01, -2.015111801674153e+01, -2.015068723328773e+01, -2.015111801674153e+01, -2.015068723328773e+01, -3.248893497733255e+00, -3.249041618971043e+00, -3.248933544637734e+00, -3.249087773273417e+00, -3.249962704174048e+00, -3.250211490374719e+00, -3.248704401743122e+00, -3.248957861565106e+00, -3.248306291541479e+00, -3.249887833954664e+00, -3.248306291541479e+00, -3.249887833954664e+00, -5.981009054040485e-01, -6.018645479631709e-01, -5.963496521594923e-01, -6.009418091101963e-01, -5.689576232950695e-01, -5.637033999497205e-01, -5.710386927175786e-01, -5.727482196721946e-01, -5.992163133739834e-01, -5.497427283124320e-01, -5.992163133739834e-01, -5.497427283124320e-01, -1.094171546331166e-01, -1.119798066621238e-01, -1.119765941694369e-01, -1.150927407999831e-01, -6.942781456041260e-01, -7.228838508798068e-01, -7.644039214149105e-02, -7.746731060292414e-02, -9.729024207365615e-02, -6.505303248673004e-02, -9.729024207365608e-02, -6.505303248672988e-02, -1.255233354416856e-05, -1.508087949842106e-05, -1.447011802039463e-05, -1.782112355362794e-05, -5.035456004063128e-03, -6.022149712815807e-03, -2.703726271105401e-06, -2.570770308573857e-06, -8.869258299169958e-06, -1.634454344161671e-06, -8.869258299168691e-06, -1.634454344159493e-06, -4.999828255526284e+00, -4.998619020052468e+00, -5.002263231138546e+00, -5.000978569249619e+00, -4.999959710794348e+00, -4.998701002360619e+00, -5.002054221657137e+00, -5.000839216496947e+00, -5.001075499523902e+00, -4.999805540867838e+00, -5.001075499523902e+00, -4.999805540867838e+00, -1.731844831684672e+00, -1.731756849688226e+00, -1.746828823011659e+00, -1.746339401971513e+00, -1.716426976794161e+00, -1.719941817335105e+00, -1.729163936999434e+00, -1.732884821781765e+00, -1.751608918312170e+00, -1.742096522886784e+00, -1.751608918312170e+00, -1.742096522886784e+00, -5.499248366273161e-01, -5.488276087586459e-01, -6.182873076451633e-01, -6.187959579837820e-01, -4.948447531931772e-01, -5.115433296764499e-01, -5.362474292565611e-01, -5.497550201797158e-01, -5.733752606749660e-01, -5.493223273508049e-01, -5.733752606749659e-01, -5.493223273508048e-01, -5.094255743029245e-02, -5.125131060551837e-02, -1.121491036425317e-01, -1.125551123113986e-01, -4.364933901929108e-02, -4.676091830693194e-02, -1.897556885629629e+00, -1.896839065214154e+00, -5.990725840581421e-02, -5.859325762612126e-02, -5.990725840581421e-02, -5.859325762612126e-02, -1.140502989049236e-06, -1.280051791791043e-06, -2.408445430118785e-06, -2.519469572453431e-06, -1.010045024560417e-06, -1.198734455647887e-06, -2.093229306075311e-02, -2.131207647829690e-02, -1.076298112152921e-06, -2.780839853477119e-06, -1.076298112158123e-06, -2.780839853813209e-06, -5.698809947081860e-01, -5.717050250330198e-01, -5.658210490646207e-01, -5.677173187771916e-01, -5.675352021868317e-01, -5.694239979916897e-01, -5.687493179858539e-01, -5.705825408273612e-01, -5.681701005612734e-01, -5.700301917693633e-01, -5.681701005612734e-01, -5.700301917693633e-01, -5.532450246190956e-01, -5.546939237642076e-01, -4.365550396270718e-01, -4.384423265722389e-01, -4.738409706788266e-01, -4.759513644679396e-01, -5.102255232584563e-01, -5.117797115122530e-01, -4.922402646873031e-01, -4.938470916171573e-01, -4.922402646873031e-01, -4.938470916171573e-01, -6.486024551768266e-01, -6.499145611734510e-01, -1.507436486649452e-01, -1.513301207017752e-01, -1.925740544363568e-01, -1.940618167229172e-01, -2.979997715829860e-01, -2.994820385550305e-01, -2.409052912673558e-01, -2.409035185354042e-01, -2.409052912673557e-01, -2.409035185354042e-01, -3.989933130396000e-01, -4.018091179997906e-01, -4.731880944093649e-03, -4.842005715729884e-03, -1.200290518829333e-02, -1.309657726270144e-02, -2.951224339088482e-01, -2.990695566456905e-01, -3.223775583535715e-02, -3.361971342030710e-02, -3.223775583535709e-02, -3.361971342030701e-02, -3.750834692710465e-05, -4.186987879131394e-05, -4.681788057250061e-08, -4.713943286095431e-08, -3.946958907760275e-07, -4.747849506030814e-07, -2.916152297699105e-02, -3.002972558052119e-02, -9.148103491798114e-07, -2.141145556977123e-06, -9.148103491768466e-07, -2.141145557115028e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lrc_wpbeh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.109070416406538e-08, 3.855567579455844e-10, -1.109076670046272e-08, -1.109061021952390e-08, 3.855637563905792e-10, -1.109069746283967e-08, -1.109021322609457e-08, 3.855734091993355e-10, -1.109015947666692e-08, -1.109128910123710e-08, 3.854697494807899e-10, -1.109151571795438e-08, -1.109067023749053e-08, 3.855271085313426e-10, -1.109088997375187e-08, -1.109067023749053e-08, 3.855271085313426e-10, -1.109088997375187e-08, -1.412519488463846e-05, 2.158879157656427e-06, -1.412980027569368e-05, -1.412525546771441e-05, 2.159323527660124e-06, -1.413021882945726e-05, -1.413069990198515e-05, 2.169371669283230e-06, -1.413308920553245e-05, -1.411245658621212e-05, 2.149943255801801e-06, -1.411575663332998e-05, -1.413373640095562e-05, 2.159156568071321e-06, -1.411915964065448e-05, -1.413373640095562e-05, 2.159156568071321e-06, -1.411915964065448e-05, -7.678132307961199e-03, 3.586683876242116e-03, -7.662245702467351e-03, -7.703835220766392e-03, 3.559577090514688e-03, -7.685123151940488e-03, -8.176607904094328e-03, 2.876045381924161e-03, -8.161989763205672e-03, -7.936999293041326e-03, 2.810968523930000e-03, -7.945231632118504e-03, -7.934703522753470e-03, 2.852692094259074e-03, -7.583647087109215e-03, -7.934703522753470e-03, 2.852692094259074e-03, -7.583647087109215e-03, -7.568014481854424e-01, 3.108902575321890e-01, -7.053238581900820e-01, -7.515370304277491e-01, 3.280826843588528e-01, -6.886804456812262e-01, -4.552318356526141e-03, 1.940414170439823e-03, -4.139354241179023e-03, -1.050892946870043e+00, 2.258949661124237e-01, -1.019363860047582e+00, -7.010850128068681e-01, 1.882246441728870e-01, -1.362202277697323e+00, -7.010850128068687e-01, 1.882246441728873e-01, -1.362202277697328e+00, 4.105904459750338e-03, 8.471332723898200e-03, 4.055967134665304e-03, 4.805245283563844e-03, 9.964515393423459e-03, 4.724541344101175e-03, -3.266841885695609e-01, 5.126941006152715e-02, -3.886808736242290e-01, 1.496797088251813e-03, 3.008683449168684e-03, 1.497622470168877e-03, 2.138204187231417e-03, 4.414566270491809e-03, 2.198621418668824e-03, 2.138204187680964e-03, 4.414566270088269e-03, 2.198621419117407e-03, -3.036722473387184e-06, 5.666948009101149e-07, -3.039789996321130e-06, -3.035176828648445e-06, 5.704413223836728e-07, -3.038234839586513e-06, -3.036640408832073e-06, 5.668443577206054e-07, -3.039707874462596e-06, -3.035268407504867e-06, 5.701514261968389e-07, -3.038343650072152e-06, -3.035958262223544e-06, 5.686004611431787e-07, -3.039001160435785e-06, -3.035958262223544e-06, 5.686004611431787e-07, -3.039001160435785e-06, -1.113056842805607e-04, 1.221811741084532e-05, -1.113263344373045e-04, -1.090242114600699e-04, 1.218856108878283e-05, -1.091235579978044e-04, -1.114372003679718e-04, 1.161795009824474e-05, -1.115466299137565e-04, -1.095132040652582e-04, 1.159619612758267e-05, -1.095579772194127e-04, -1.098529984976520e-04, 1.250231835492394e-05, -1.100306732891498e-04, -1.098529984976520e-04, 1.250231835492394e-05, -1.100306732891498e-04, -1.187362685731202e-02, 1.180452397706796e-02, -1.206068684136361e-02, -6.242713584938400e-03, 1.489938286408802e-02, -6.220439650098988e-03, -1.765383014812713e-02, 1.535577972946644e-02, -1.461494929307809e-02, -1.167180557186782e-02, 2.278859644535717e-02, -8.989360863949220e-03, -9.585571667466927e-03, 1.179162458306085e-02, -1.286679385686371e-02, -9.585571667466942e-03, 1.179162458306085e-02, -1.286679385686371e-02, -1.090335425012948e+00, 1.261488607621168e-01, -1.113676664125437e+00, -5.161630252892452e-01, 1.139695105238702e-01, -5.111052317620424e-01, -1.155869244801471e+00, 1.279112469154852e-01, -1.160200663541552e+00, -1.263238537064533e-04, 1.207887057881010e-04, -1.266638370572984e-04, -1.205028656699797e+00, 2.409472748596690e-01, -1.470651314868086e+00, -1.205028656699797e+00, 2.409472748596690e-01, -1.470651314868086e+00, 1.464360421212167e-03, 2.933546798259037e-03, 1.464237944382939e-03, 1.842124822602763e-03, 3.699144102256803e-03, 1.842132426522523e-03, 1.841594906991999e-02, 3.685108437354808e-02, 1.841132523220898e-02, -1.153904482923189e+00, 1.250822448857004e-01, -1.121854436408881e+00, 7.046499617388889e-03, 1.410360645889085e-02, 7.025216934099277e-03, 7.046499620674185e-03, 1.410360646869916e-02, 7.025216937375690e-03, -5.861071929789595e-03, 2.514346072918196e-02, -5.591478792628415e-03, -8.144049254293313e-03, 2.157065992117518e-02, -7.867683591675834e-03, -7.425433013261247e-03, 2.270457728491302e-02, -7.150037071496954e-03, -6.765741179216991e-03, 2.373865089872573e-02, -6.494356447870778e-03, -7.103476956990616e-03, 2.321019190891285e-02, -6.830020151966775e-03, -7.103476956990616e-03, 2.321019190891285e-02, -6.830020151966775e-03, -5.428340359247646e-03, 2.977269840520045e-02, -5.177117574608849e-03, -2.409187852403454e-02, 1.592277215307748e-02, -2.365230609406262e-02, -1.964696417962348e-02, 1.838749842245184e-02, -1.922794724861910e-02, -1.475047551113317e-02, 2.169730037966074e-02, -1.442274489432542e-02, -1.730163946630141e-02, 1.995497716545398e-02, -1.693761760910039e-02, -1.730163946630141e-02, 1.995497716545398e-02, -1.693761760910039e-02, -5.541680431626879e-03, 1.183264719377924e-02, -5.473984284472661e-03, -3.009624586988753e-01, 8.498631964250428e-02, -2.974188628345153e-01, -1.983015055009864e-01, 7.821972418059023e-02, -1.942624488382635e-01, -8.230103800194388e-02, 6.964082434152352e-02, -8.016243783931476e-02, -1.321389243655695e-01, 7.796350422599263e-02, -1.329177105808804e-01, -1.321389243655701e-01, 7.796350422599266e-02, -1.329177105808805e-01, -3.254193191234191e-02, 2.285950305464996e-02, -3.162762697524738e-02, -2.841411326422005e-01, 4.213028450134424e-02, -2.908325163737852e-01, -6.089442151844733e-01, 6.458066222247318e-02, -6.678490203370486e-01, -8.847614712109642e-02, 1.099497136873529e-01, -8.146950902815001e-02, -1.444912663433954e+00, 2.182010199987041e-01, -1.773525214078864e+00, -1.444912663433955e+00, 2.182010199987039e-01, -1.773525214078876e+00, 4.536987971552774e-03, 1.056259116938041e-02, 4.357262710631025e-03, 2.005708462092595e-03, 4.011531506685853e-03, 2.005663303031742e-03, 2.509558606129822e-03, 5.020763908060611e-03, 2.509209608486122e-03, -1.553364514015533e+00, 2.002688123716920e-01, -1.546704428465388e+00, 8.992598350411956e-03, 1.800188742308661e-02, 8.983452647791306e-03, 8.992598354076389e-03, 1.800188743452388e-02, 8.983452651450863e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
