
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1b_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.602920061775123e+01, -1.602924097796279e+01, -1.602944048891933e+01, -1.602883960607014e+01, -1.602915159895404e+01, -1.602915159895404e+01, -2.702669669790866e+00, -2.702665128703589e+00, -2.702624886675066e+00, -2.703193392494141e+00, -2.702727636920493e+00, -2.702727636920493e+00, -5.751305560897924e-01, -5.748343943540088e-01, -5.690818589603220e-01, -5.729649947821118e-01, -5.749102700378748e-01, -5.749102700378748e-01, -1.869822883691124e-01, -1.879738816896163e-01, -6.607172327879286e-01, -1.625024792230263e-01, -1.740578791386714e-01, -1.740578791386713e-01, -9.738757912174970e-03, -1.026975237769236e-02, -5.710867459248092e-02, -5.591841989254442e-03, -9.773249742572855e-03, -9.773249742572855e-03, -3.976795772868427e+00, -3.977342703460086e+00, -3.976824403385485e+00, -3.977307153727306e+00, -3.977070905635262e+00, -3.977070905635262e+00, -1.611105388243115e+00, -1.619555794772818e+00, -1.609430943877665e+00, -1.616779275369462e+00, -1.616750848698848e+00, -1.616750848698848e+00, -4.987913433086403e-01, -5.319099387888391e-01, -4.659111501118542e-01, -4.755237231478070e-01, -5.055499140993910e-01, -5.055499140993910e-01, -1.316563760454428e-01, -2.016936214795831e-01, -1.240190351502402e-01, -1.508314005583043e+00, -1.415535210243032e-01, -1.415535210243032e-01, -4.328590155217241e-03, -5.466229167675022e-03, -4.207148712316289e-03, -8.873465773407035e-02, -5.844813860123677e-03, -5.844813860123680e-03, -4.999095835205479e-01, -4.922015553111507e-01, -4.937282800449075e-01, -4.957250911848475e-01, -4.946156450431394e-01, -4.946156450431394e-01, -4.928730948456979e-01, -4.322471532504430e-01, -4.450289521080137e-01, -4.580087897108517e-01, -4.512894022506823e-01, -4.512894022506823e-01, -5.557594843153837e-01, -2.355073724237284e-01, -2.632911861494268e-01, -3.169505522967835e-01, -2.869525027336335e-01, -2.869525027336336e-01, -4.012187839256442e-01, -5.460756769260403e-02, -7.363928140458990e-02, -3.028826703509391e-01, -1.067878572916638e-01, -1.067878572916638e-01, -1.371756157848860e-02, -1.475088409489113e-03, -3.097474585054534e-03, -1.018769007092154e-01, -5.280920710669750e-03, -5.280920710669747e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1b_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.097141742369680e+01, -2.097139281254475e+01, -2.097150709845278e+01, -2.097145807386094e+01, -2.097177808612528e+01, -2.097184993009600e+01, -2.097076407151425e+01, -2.097055926332928e+01, -2.097147160445538e+01, -2.097106304815187e+01, -2.097147160445538e+01, -2.097106304815187e+01, -3.443237521141243e+00, -3.443424018450550e+00, -3.443273601137318e+00, -3.443468596873934e+00, -3.444242269245429e+00, -3.444526343557079e+00, -3.443111999626811e+00, -3.443408400298007e+00, -3.442630056229878e+00, -3.444289884344136e+00, -3.442630056229878e+00, -3.444289884344136e+00, -6.886573224662466e-01, -6.935540155772151e-01, -6.867837186926287e-01, -6.928165655890942e-01, -6.594908676609208e-01, -6.503354967603595e-01, -6.594490733758271e-01, -6.624454101316526e-01, -6.990152418077853e-01, -6.097472051917644e-01, -6.990152418077853e-01, -6.097472051917644e-01, -1.825983345755426e-01, -1.788539263441561e-01, -1.864916054314376e-01, -1.830787235053367e-01, -7.870234847217158e-01, -8.185233676792508e-01, -1.398894054236783e-01, -1.378189991285128e-01, -1.293566653460375e-01, -2.477995379878766e-01, -1.293566653460373e-01, -2.477995379878771e-01, -1.152718431667920e-02, -1.418192479144537e-02, -1.194711801967397e-02, -1.509092618249260e-02, -6.803748365182311e-02, -7.537619061671319e-02, -7.665942948966861e-03, -7.216854806907114e-03, -1.556387516716722e-02, 1.376576363184712e-03, -1.556387516716720e-02, 1.376576363184680e-03, -5.218042275021477e+00, -5.216837644519615e+00, -5.219768825083394e+00, -5.218505167404880e+00, -5.218140117469602e+00, -5.216896112293526e+00, -5.219621184789140e+00, -5.218411467944757e+00, -5.218925951648017e+00, -5.217675051625746e+00, -5.218925951648017e+00, -5.217675051625746e+00, -1.807491287683658e+00, -1.807399990770368e+00, -1.827339066977780e+00, -1.826774120644444e+00, -1.777477350500027e+00, -1.785890550388286e+00, -1.794988492312841e+00, -1.803382575113551e+00, -1.839877051342580e+00, -1.821085971879167e+00, -1.839877051342580e+00, -1.821085971879167e+00, -6.260208410032203e-01, -6.249388868327000e-01, -6.982525202180995e-01, -6.992922486343860e-01, -5.720447746849844e-01, -5.877151109616408e-01, -6.096666503608305e-01, -6.231228989507190e-01, -6.477161582805412e-01, -6.243296120400441e-01, -6.477161582805411e-01, -6.243296120400441e-01, -1.263338458983771e-01, -1.237783598772205e-01, -1.717225787758339e-01, -1.708033965464963e-01, -1.232690639747910e-01, -1.190649747234756e-01, -1.997738645547398e+00, -1.997031509743704e+00, -1.393305404777749e-01, -1.108226780795005e-01, -1.393305404777749e-01, -1.108226780795005e-01, -5.332272149801311e-03, -6.144516749815714e-03, -7.077489870583551e-03, -7.472008441901261e-03, -4.962745999487668e-03, -6.130424428444786e-03, -9.885563475357029e-02, -1.003052424708664e-01, -2.377897485386770e-03, -9.830494875023910e-03, -2.377897485386760e-03, -9.830494875023922e-03, -6.720389741799456e-01, -6.742458221119673e-01, -6.462534966335405e-01, -6.485615945566182e-01, -6.540220477544251e-01, -6.564297716858960e-01, -6.618036141849796e-01, -6.640906116090720e-01, -6.577775383802296e-01, -6.601325422003366e-01, -6.577775383802296e-01, -6.601325422003366e-01, -6.603196157933175e-01, -6.618221949294304e-01, -5.197227256433608e-01, -5.215188189392360e-01, -5.507744786169710e-01, -5.527343635870772e-01, -5.801654741761878e-01, -5.816988106248423e-01, -5.651759100756200e-01, -5.667064046254433e-01, -5.651759100756200e-01, -5.667064046254433e-01, -7.269503625431052e-01, -7.289531951188418e-01, -2.142224874922520e-01, -2.136506382230543e-01, -2.665269144633441e-01, -2.673111698009090e-01, -3.757474556544257e-01, -3.770019073852452e-01, -3.196494229562362e-01, -3.199275493248855e-01, -3.196494229562363e-01, -3.199275493248855e-01, -4.806233948538809e-01, -4.833229195085451e-01, -6.903198426310554e-02, -6.996894349829046e-02, -8.717311043048682e-02, -9.074045629879622e-02, -3.669726461964758e-01, -3.704921176003350e-01, -1.135360945181998e-01, -1.011809162889685e-01, -1.135360945181996e-01, -1.011809162889682e-01, -1.717274393897388e-02, -1.927005874457777e-02, -1.953230357419104e-03, -1.970379706980803e-03, -3.604212849126268e-03, -4.550006758242846e-03, -1.051863452389314e-01, -1.053894881274928e-01, -2.617922367370760e-03, -8.882849548388246e-03, -2.617922367370766e-03, -8.882849548388251e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1b_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.812746368387303e-09, 0.000000000000000e+00, -1.812749220325636e-09, -1.812640749570827e-09, 0.000000000000000e+00, -1.812673169753497e-09, -1.812409687186595e-09, 0.000000000000000e+00, -1.812309094124583e-09, -1.813591607871140e-09, 0.000000000000000e+00, -1.813825834723377e-09, -1.812669746133497e-09, 0.000000000000000e+00, -1.813303362871802e-09, -1.812669746133497e-09, 0.000000000000000e+00, -1.813303362871802e-09, -4.267197812259099e-06, 0.000000000000000e+00, -4.262886113319692e-06, -4.266677165604139e-06, 0.000000000000000e+00, -4.262109326894448e-06, -4.251340223736275e-06, 0.000000000000000e+00, -4.246602871194036e-06, -4.275070705846393e-06, 0.000000000000000e+00, -4.269832470143310e-06, -4.271969385418871e-06, 0.000000000000000e+00, -4.255730983544187e-06, -4.271969385418871e-06, 0.000000000000000e+00, -4.255730983544187e-06, -4.470160902149661e-03, 0.000000000000000e+00, -4.286665942084345e-03, -4.526004544701251e-03, 0.000000000000000e+00, -4.299632082048798e-03, -5.215923719958164e-03, 0.000000000000000e+00, -5.559542622282566e-03, -5.245712381914716e-03, 0.000000000000000e+00, -5.137235801717349e-03, -3.725504433826223e-03, 0.000000000000000e+00, -6.910614741667067e-03, -3.725504433826223e-03, 0.000000000000000e+00, -6.910614741667067e-03, -9.501026058381444e-01, 0.000000000000000e+00, -9.500233988200610e-01, -9.042965826433452e-01, 0.000000000000000e+00, -8.959896688912627e-01, -2.575844503595124e-03, 0.000000000000000e+00, -2.041495743839221e-03, -2.062799221849223e+00, 0.000000000000000e+00, -2.080477096146139e+00, -1.440509850880048e+00, 0.000000000000000e+00, 6.585914607900910e+00, -1.440509850880048e+00, 0.000000000000000e+00, 6.585914607900938e+00, -4.103679460779530e+00, 0.000000000000000e+00, -9.908382707687462e+00, -3.856780138339627e+00, 0.000000000000000e+00, -1.090284596985268e+01, -4.533091000786912e+00, 0.000000000000000e+00, -6.805518138016908e+00, -7.110474063264685e+00, 0.000000000000000e+00, -5.040941675210492e+00, -1.800739626124683e+01, 0.000000000000000e+00, 1.030490241431950e+02, -1.800739626124913e+01, 0.000000000000000e+00, 1.030490241434249e+02, -4.521670374231923e-07, 0.000000000000000e+00, -4.528449552875443e-07, -4.475721822947178e-07, 0.000000000000000e+00, -4.484173330741867e-07, -4.519245325914742e-07, 0.000000000000000e+00, -4.527097957758408e-07, -4.479935215754112e-07, 0.000000000000000e+00, -4.486758374122406e-07, -4.498004759103366e-07, 0.000000000000000e+00, -4.506245498404732e-07, -4.498004759103366e-07, 0.000000000000000e+00, -4.506245498404732e-07, -7.380612341985194e-05, 0.000000000000000e+00, -7.382204502751004e-05, -7.089139223829657e-05, 0.000000000000000e+00, -7.098297839767767e-05, -7.786897728321560e-05, 0.000000000000000e+00, -7.664961003174421e-05, -7.521878544840381e-05, 0.000000000000000e+00, -7.401779527348416e-05, -6.922545378812081e-05, 0.000000000000000e+00, -7.197343330343848e-05, -6.922545378812081e-05, 0.000000000000000e+00, -7.197343330343848e-05, -7.187565916109042e-03, 0.000000000000000e+00, -7.264046786367453e-03, 1.148018751512018e-03, 0.000000000000000e+00, 1.696730937649456e-03, -1.081628842453077e-02, 0.000000000000000e+00, -9.178407121318580e-03, -5.075060522719606e-03, 0.000000000000000e+00, -4.644673421718332e-03, -6.090789917597233e-03, 0.000000000000000e+00, -7.675168652711039e-03, -6.090789917597208e-03, 0.000000000000000e+00, -7.675168652711049e-03, -3.344900766115042e+00, 0.000000000000000e+00, -3.564219970708695e+00, -8.604639718310682e-01, 0.000000000000000e+00, -8.615541814127781e-01, -3.483693823565512e+00, 0.000000000000000e+00, -4.248660222272461e+00, 1.818902823754686e-05, 0.000000000000000e+00, 1.842187035657771e-05, -2.547915816531420e+00, 0.000000000000000e+00, -4.011679217016580e+00, -2.547915816531420e+00, 0.000000000000000e+00, -4.011679217016580e+00, -6.930246840750829e+00, 0.000000000000000e+00, -8.409529057093103e+00, -7.149677352989676e+00, 0.000000000000000e+00, -7.138218055905154e+00, -1.443119425516236e+01, 0.000000000000000e+00, -6.892736378895353e+01, -6.386142262373784e+00, 0.000000000000000e+00, -6.221110498596242e+00, 6.403618182658589e+01, 0.000000000000000e+00, -5.084055479617765e+01, 6.403618182646548e+01, 0.000000000000000e+00, -5.084055479619357e+01, 5.630900849741695e-02, 0.000000000000000e+00, 5.744753755319960e-02, 3.142709975696769e-03, 0.000000000000000e+00, 3.695066754907270e-03, 1.203260596033643e-02, 0.000000000000000e+00, 1.282519986610996e-02, 2.533794691805930e-02, 0.000000000000000e+00, 2.609908106301222e-02, 1.777523903093054e-02, 0.000000000000000e+00, 1.856811879880681e-02, 1.777523903093054e-02, 0.000000000000000e+00, 1.856811879880681e-02, 1.261750885410511e-01, 0.000000000000000e+00, 1.249827447370482e-01, -1.513154792891585e-02, 0.000000000000000e+00, -1.483221746623841e-02, -1.241765948651591e-02, 0.000000000000000e+00, -1.215301754478509e-02, -1.089436592902953e-02, 0.000000000000000e+00, -1.069064869149179e-02, -1.167375716578777e-02, 0.000000000000000e+00, -1.147628623258095e-02, -1.167375716578777e-02, 0.000000000000000e+00, -1.147628623258095e-02, -3.588481715241303e-04, 0.000000000000000e+00, 1.745778749409546e-04, -4.018566848215104e-01, 0.000000000000000e+00, -4.003631818269773e-01, -2.048642826531071e-01, 0.000000000000000e+00, -2.007652790166514e-01, -6.125907824275906e-02, 0.000000000000000e+00, -6.004397152972605e-02, -1.119522230644057e-01, 0.000000000000000e+00, -1.116331494636448e-01, -1.119522230644056e-01, 0.000000000000000e+00, -1.116331494636449e-01, -2.127071546758123e-02, 0.000000000000000e+00, -2.058400368064808e-02, -5.132865684680392e+00, 0.000000000000000e+00, -5.400648939931437e+00, -4.639714326098772e+00, 0.000000000000000e+00, -5.919293643578366e+00, -7.355285139059732e-02, 0.000000000000000e+00, -6.925345262364409e-02, -4.582013641644215e+00, 0.000000000000000e+00, -7.754945710573221e+00, -4.582013641644235e+00, 0.000000000000000e+00, -7.754945710573241e+00, -4.659840236626882e+00, 0.000000000000000e+00, -7.691020969696228e+00, -5.605641846071315e+00, 0.000000000000000e+00, -6.726449431220412e+01, -5.011204162745551e+00, 0.000000000000000e+00, -2.495696743847747e+01, -6.363153266061502e+00, 0.000000000000000e+00, -6.701765353671238e+00, 5.054714090413044e+01, 0.000000000000000e+00, -4.480451638921974e+01, 5.054714090399631e+01, 0.000000000000000e+00, -4.480451638922665e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
