
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.671739846731214e+01, -1.671743063204122e+01, -1.671761569242529e+01, -1.671708816691446e+01, -1.671741508243226e+01, -1.671741508243226e+01, -2.800931323333174e+00, -2.800923106032178e+00, -2.800811128317639e+00, -2.801586919746484e+00, -2.800938789058797e+00, -2.800938789058797e+00, -5.821212357863961e-01, -5.819497741226500e-01, -5.798521647675683e-01, -5.834232288701495e-01, -5.820563811026783e-01, -5.820563811026783e-01, -1.852974151837451e-01, -1.863432579367536e-01, -6.805900733150327e-01, -1.547906470252615e-01, -1.855899045493555e-01, -1.855899045493555e-01, -1.171207361439820e-02, -1.234995258687975e-02, -6.041681508771010e-02, -5.104151722172977e-03, -1.220160117830291e-02, -1.220160117830291e-02, -4.110666963521547e+00, -4.111031960039009e+00, -4.110707338153258e+00, -4.110991075335889e+00, -4.110849402741760e+00, -4.110849402741760e+00, -1.685195237846109e+00, -1.692887881187689e+00, -1.686115900236895e+00, -1.692023153421136e+00, -1.689491645223843e+00, -1.689491645223843e+00, -4.964252633065913e-01, -5.308065665683818e-01, -4.731433448228476e-01, -4.865406925658048e-01, -5.130640062797276e-01, -5.130640062797276e-01, -1.282482182411391e-01, -2.029715485539949e-01, -1.252067420575645e-01, -1.541048868965117e+00, -1.386569897633088e-01, -1.386569897633088e-01, -4.903440189561470e-03, -5.692409575939823e-03, -4.127199895513977e-03, -8.373250662649041e-02, -5.128988313083540e-03, -5.128988313083543e-03, -5.076638126169193e-01, -5.031722352972291e-01, -5.043678392052384e-01, -5.055471048086406e-01, -5.049222226731376e-01, -5.049222226731376e-01, -4.931886573516675e-01, -4.408837562084697e-01, -4.531182661292440e-01, -4.655885956910014e-01, -4.590245070628674e-01, -4.590245070628674e-01, -5.551366868971566e-01, -2.390665779330103e-01, -2.672228740069970e-01, -3.169579981492630e-01, -2.896205283936241e-01, -2.896205283936241e-01, -4.012823286710100e-01, -5.599666316323861e-02, -7.643113190032673e-02, -2.965520424179396e-01, -1.046871404829493e-01, -1.046871404829492e-01, -1.405850361605045e-02, -1.383980537218704e-03, -2.762999102850733e-03, -9.910316618802754e-02, -4.279526886600510e-03, -4.279526886600479e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.141384083791072e+01, -2.141391727039782e+01, -2.141426063495232e+01, -2.141300893650931e+01, -2.141388112593443e+01, -2.141388112593443e+01, -3.489085699511004e+00, -3.489131849262658e+00, -3.490538955443096e+00, -3.488836938640407e+00, -3.489124009902005e+00, -3.489124009902005e+00, -6.763831434374055e-01, -6.748720585108150e-01, -6.314934792755102e-01, -6.376581651212240e-01, -6.758368712377844e-01, -6.758368712377844e-01, -1.898140390548841e-01, -1.937071251599669e-01, -8.268798609759984e-01, -1.327706045112002e-01, -1.910057411766004e-01, -1.910057411766004e-01, -1.606844575884369e-02, -1.693522144588481e-02, -7.385252266536603e-02, -6.995488379734350e-03, -1.673062285173522e-02, -1.673062285173522e-02, -5.337308779357810e+00, -5.339336167292109e+00, -5.337516877032406e+00, -5.339093333806670e+00, -5.338348483536323e+00, -5.338348483536323e+00, -1.771767218102451e+00, -1.792369254210905e+00, -1.754557617628824e+00, -1.770756999385773e+00, -1.807677625192218e+00, -1.807677625192218e+00, -6.250209199948822e-01, -6.982206536261010e-01, -5.931891200035945e-01, -6.343142048029252e-01, -6.510189816761435e-01, -6.510189816761435e-01, -1.161154974648961e-01, -1.744548016317500e-01, -1.129737093655975e-01, -2.033631280466355e+00, -1.193797609998072e-01, -1.193797609998072e-01, -6.717998494743463e-03, -7.807613404668227e-03, -5.642524030714052e-03, -9.112242736271796e-02, -7.027124817442739e-03, -7.027124817442742e-03, -6.727609984779461e-01, -6.629943543353526e-01, -6.666212365297843e-01, -6.694547901584423e-01, -6.680450983912495e-01, -6.680450983912495e-01, -6.528138941664580e-01, -5.304324182881269e-01, -5.658634826866697e-01, -5.976909560341447e-01, -5.816410433226386e-01, -5.816410433226386e-01, -7.293061077737155e-01, -2.215225370827691e-01, -2.749588296780238e-01, -3.753871280775912e-01, -3.232323097352712e-01, -3.232323097352712e-01, -4.794209823635932e-01, -7.035070985871268e-02, -8.796743178670205e-02, -3.637743049065044e-01, -1.005504262059966e-01, -1.005504262059965e-01, -1.927931032954494e-02, -1.875132589596538e-03, -3.766046461934972e-03, -9.575393065264266e-02, -5.853684779644571e-03, -5.853684779644525e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.140644839145374e-09, -2.140589168423200e-09, -2.140375988846473e-09, -2.141286960257658e-09, -2.140615186211167e-09, -2.140615186211167e-09, -3.629329985770751e-06, -3.628972368693119e-06, -3.618549541940643e-06, -3.633445686083484e-06, -3.629084609968814e-06, -3.629084609968814e-06, -3.081521266316974e-03, -3.105819821671687e-03, -3.793633749592783e-03, -3.665216825933541e-03, -3.090313319525274e-03, -3.090313319525274e-03, -4.311433094256564e-01, -4.093752777167116e-01, -1.353835002070191e-03, -1.146209576660473e+00, -4.244851705800315e-01, -4.244851705800315e-01, -6.434851754637413e+00, -6.564168184558763e+00, -4.093751606013305e+00, -3.439807369403438e+00, -6.789177479058010e+00, -6.789177479058010e+00, -4.951018707962198e-07, -4.922394298421031e-07, -4.948140269514260e-07, -4.925882902446976e-07, -4.936279011504416e-07, -4.936279011504416e-07, -5.335447030947776e-05, -5.149912408931963e-05, -5.454122489952188e-05, -5.306163967605917e-05, -5.058740587035030e-05, -5.058740587035030e-05, -4.035238260823318e-03, 6.889377318773532e-05, -5.087378199609457e-03, -2.018196120840523e-03, -3.285331336307117e-03, -3.285331336307117e-03, -1.912555058385870e+00, -4.105711389579920e-01, -2.113394780296540e+00, -8.009577894575310e-06, -1.673659206906496e+00, -1.673659206906496e+00, -3.597974032637236e+00, -3.797202031134434e+00, -9.690365893277804e+00, -3.872857446527201e+00, -5.401774184365146e+00, -5.401774184368834e+00, 9.991383792272147e-03, 8.995260409654253e-04, 2.778340344160498e-03, 5.030260778708790e-03, 3.789532690117354e-03, 3.789532690117353e-03, 1.585144267310924e-02, -8.467670764149006e-03, -6.255409649418104e-03, -4.241226467431442e-03, -5.297085080753165e-03, -5.297085080753161e-03, -2.651896141198588e-04, -1.910994644283945e-01, -1.005760389889400e-01, -3.489648668543299e-02, -6.014590861709536e-02, -6.014590861709539e-02, -1.283265916716030e-02, -3.493532075334834e+00, -3.491816775928676e+00, -4.014737166588785e-02, -3.272747769273535e+00, -3.272747769273532e+00, -5.147042412379854e+00, -4.079393257107333e+00, -4.384481700523165e+00, -3.907591684399061e+00, -7.402001643980088e+00, -7.402001643990991e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
