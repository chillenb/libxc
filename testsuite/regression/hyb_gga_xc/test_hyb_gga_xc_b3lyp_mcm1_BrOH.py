
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.678495145900598e+01, -1.678497353303471e+01, -1.678512878184131e+01, -1.678476617881855e+01, -1.678496262554540e+01, -1.678496262554540e+01, -2.811107687477032e+00, -2.811089550561307e+00, -2.810705406415660e+00, -2.811955026607513e+00, -2.811110164010537e+00, -2.811110164010537e+00, -5.773931320784517e-01, -5.772110327326599e-01, -5.732896077409786e-01, -5.771046096731395e-01, -5.773248078824978e-01, -5.773248078824978e-01, -1.689685980109258e-01, -1.706657298200237e-01, -6.761774469304969e-01, -1.280894757160594e-01, -1.694731549641786e-01, -1.694731549641786e-01, -4.359521623514721e-02, -4.416458692623206e-02, -7.362377066233095e-02, -3.878577288439530e-02, -4.372704515117043e-02, -4.372704515117043e-02, -4.074916658509652e+00, -4.074596147840590e+00, -4.074888598994332e+00, -4.074639308175555e+00, -4.074745601966867e+00, -4.074745601966867e+00, -1.696229056159485e+00, -1.704684950947837e+00, -1.696140633346991e+00, -1.702724988042964e+00, -1.702079510650436e+00, -1.702079510650436e+00, -4.867621642661826e-01, -5.110406592724355e-01, -4.637518460477324e-01, -4.703904710228788e-01, -5.024587268886573e-01, -5.024587268886573e-01, -9.901427235751165e-02, -1.738652586000814e-01, -9.837860551910242e-02, -1.497591759511284e+00, -1.114199148525578e-01, -1.114199148525578e-01, -3.804015484047581e-02, -3.914376275111216e-02, -2.984986578782037e-02, -7.789053371046470e-02, -3.550824570028169e-02, -3.550824570028170e-02, -4.818195043480201e-01, -4.831580631147325e-01, -4.827169249155714e-01, -4.823459701555161e-01, -4.825342966441297e-01, -4.825342966441297e-01, -4.663147795092985e-01, -4.332700590219437e-01, -4.438930844291772e-01, -4.529604226401258e-01, -4.483361275043629e-01, -4.483361275043629e-01, -5.354966479421499e-01, -2.156085895349784e-01, -2.509259084507170e-01, -3.070834867556449e-01, -2.777025567910563e-01, -2.777025567910563e-01, -3.930427277366927e-01, -7.430545127359886e-02, -7.655948688426148e-02, -2.861266998850565e-01, -8.695062990078567e-02, -8.695062990078566e-02, -4.809206808676990e-02, -2.757781329034113e-02, -3.169092944738960e-02, -8.459531708074397e-02, -3.179411910022904e-02, -3.179411910022904e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.044952381517474e+01, -2.044958750220923e+01, -2.044988759164641e+01, -2.044884438278193e+01, -2.044955726807391e+01, -2.044955726807391e+01, -3.346264850528496e+00, -3.346287014426763e+00, -3.347031914232124e+00, -3.346445893267997e+00, -3.346290260009648e+00, -3.346290260009648e+00, -6.747165098569005e-01, -6.740137834508075e-01, -6.569063120961750e-01, -6.616725966860799e-01, -6.744601276416683e-01, -6.744601276416683e-01, -2.037186940207537e-01, -2.054255054482805e-01, -8.034438396808786e-01, -1.635024368679386e-01, -2.042109270140008e-01, -2.042109270140008e-01, -1.629084086770042e-02, -1.680311475216779e-02, -5.139791151133788e-02, -1.075601645623003e-02, -1.662462353777501e-02, -1.662462353777501e-02, -5.062058666216219e+00, -5.063817531204893e+00, -5.062239328057046e+00, -5.063606920258087e+00, -5.062959196404608e+00, -5.062959196404608e+00, -1.863860934698489e+00, -1.877390682803904e+00, -1.857560349530621e+00, -1.868082369695806e+00, -1.881308117452333e+00, -1.881308117452333e+00, -5.974264635381269e-01, -6.576417665837383e-01, -5.679422079925706e-01, -5.989633638251176e-01, -6.204213352402431e-01, -6.204213352402431e-01, -1.322297477604552e-01, -2.200129871122568e-01, -1.278428441448502e-01, -1.924196328110196e+00, -1.438419821064224e-01, -1.438419821064224e-01, -1.046756502715863e-02, -1.128405551660908e-02, -8.448934860576931e-03, -7.650669859963748e-02, -1.021666088903326e-02, -1.021666088903325e-02, -6.308285265367382e-01, -6.236416116455491e-01, -6.261031856204907e-01, -6.280867277832956e-01, -6.270848983370746e-01, -6.270848983370746e-01, -6.121655197635166e-01, -5.185819068966313e-01, -5.426328009848006e-01, -5.670785595272293e-01, -5.543921100973187e-01, -5.543921100973188e-01, -6.875279659361668e-01, -2.627484116957957e-01, -2.992683880098585e-01, -3.692813967242466e-01, -3.307570901339206e-01, -3.307570901339205e-01, -4.704522385815055e-01, -4.769494851945068e-02, -6.860761733263962e-02, -3.499251207500914e-01, -1.016892513607861e-01, -1.016892513607861e-01, -1.862998785948672e-02, -5.570415085675862e-03, -7.581457068810072e-03, -9.441868804457403e-02, -8.903771828892152e-03, -8.903771828892151e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.851262229318068e-09, -4.851241888605251e-09, -4.851077884834567e-09, -4.851412444849737e-09, -4.851252114698204e-09, -4.851252114698204e-09, -6.218952390016434e-06, -6.219162629338237e-06, -6.223929920041987e-06, -6.210503767858595e-06, -6.218955580537809e-06, -6.218955580537809e-06, -3.096611782420133e-03, -3.093500243770178e-03, -2.976139229206427e-03, -2.913897782674881e-03, -3.095550397771191e-03, -3.095550397771191e-03, -1.626697254030253e-01, -1.674527146608515e-01, -1.778860272374177e-03, -4.389618719305303e-02, -1.643454094180902e-01, -1.643454094180902e-01, -1.878077298147950e+03, -1.647284962608270e+03, -1.351454270100724e+01, -1.391526343476262e+04, -1.715890793718679e+03, -1.715890793718679e+03, -1.443205594451718e-06, -1.444247398258071e-06, -1.443303848433552e-06, -1.444113995139992e-06, -1.443750729345149e-06, -1.443750729345149e-06, -4.496029854827486e-05, -4.413244123700885e-05, -4.490053364443348e-05, -4.425528050873380e-05, -4.447560461077100e-05, -4.447560461077100e-05, -6.803123485299880e-03, -6.534558598210500e-03, -8.124461608817222e-03, -8.730707261570807e-03, -6.133092998929694e-03, -6.133092998929694e-03, 3.793820612439585e-01, -4.588973975137266e-02, 2.750679182411079e-01, -8.598249390046381e-05, 5.993429752526638e-02, 5.993429752526638e-02, -1.568803113747359e+04, -1.069947802505926e+04, -3.294363893001991e+04, -1.849730871918932e+00, -1.560229808553058e+04, -1.560229808553058e+04, -8.885712992871294e-03, -8.253722329190694e-03, -8.446656934995423e-03, -8.617947892584285e-03, -8.529517795072571e-03, -8.529517795072571e-03, -1.027496849299832e-02, -9.629350258523977e-03, -9.528381690794105e-03, -9.554237499139898e-03, -9.539308707720113e-03, -9.539308707720111e-03, -5.385301136314865e-03, -5.007072863925052e-02, -4.601311152750814e-02, -3.323758991687592e-02, -4.075387188976308e-02, -4.075387188976310e-02, -1.367231510680083e-02, -1.768478874346348e+01, -3.178127652109016e+00, -4.804730049728895e-02, -1.373766172035907e-01, -1.373766172035954e-01, -1.100999730631978e+03, -5.197585472820619e+05, -7.828030308041518e+04, -6.469628559758392e-01, -2.769566853408554e+04, -2.769566853408565e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
