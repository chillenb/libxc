
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_bhandh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.974943847160658e+00, -9.974971578943478e+00, -9.975103258743516e+00, -9.974690491094458e+00, -9.974905580030443e+00, -9.974905580030443e+00, -1.670901185351750e+00, -1.670905609426905e+00, -1.671047538566120e+00, -1.671108303742571e+00, -1.670945530746230e+00, -1.670945530746230e+00, -3.474244360419413e-01, -3.469611446402601e-01, -3.353345788944063e-01, -3.381256976146621e-01, -3.376565685691626e-01, -3.376565685691626e-01, -8.417181833010655e-02, -8.649933677207311e-02, -4.023175005961047e-01, -5.215399436164358e-02, -6.573352391613477e-02, -6.573352391613475e-02, -3.842445539034314e-03, -4.043106771615228e-03, -1.576638749362877e-02, -2.224597828082648e-03, -2.792954470976175e-03, -2.792954470976175e-03, -2.477331876453556e+00, -2.477794644258764e+00, -2.477354768209723e+00, -2.477763282933897e+00, -2.477565602641896e+00, -2.477565602641896e+00, -9.541237261342655e-01, -9.610519675530536e-01, -9.486265897995033e-01, -9.547617233036697e-01, -9.606016655875212e-01, -9.606016655875212e-01, -3.103964217518629e-01, -3.383277908003605e-01, -2.882175495879919e-01, -3.020192748802164e-01, -3.154904973146470e-01, -3.154904973146470e-01, -2.243368423719572e-02, -7.351071458168407e-02, -2.008620526446414e-02, -9.473039207861879e-01, -3.766658834205565e-02, -3.766658834205565e-02, -1.717757818059987e-03, -2.174906411761034e-03, -1.664339028715567e-03, -1.593676687195115e-02, -2.003969183058528e-03, -2.003969183058528e-03, -3.156161412239348e-01, -3.132585000852999e-01, -3.140894276665097e-01, -3.147736628643626e-01, -3.144314280997369e-01, -3.144314280997369e-01, -3.079454589384211e-01, -2.601279057645507e-01, -2.743318672395731e-01, -2.880144582778501e-01, -2.811047261360778e-01, -2.811047261360778e-01, -3.532762679211220e-01, -1.028900154332128e-01, -1.327252916617020e-01, -1.864344254412627e-01, -1.587394971095682e-01, -1.587394971095682e-01, -2.404995281000247e-01, -1.554846340947020e-02, -1.408583254890201e-02, -1.823739810410946e-01, -2.167819067068887e-02, -2.167819067068890e-02, -5.410094585314480e-03, -5.827909579697596e-04, -1.222098657513971e-03, -2.002871636104194e-02, -1.854722249601491e-03, -1.854722249601489e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_bhandh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.328691409014464e+01, -1.328695079894189e+01, -1.328712560857772e+01, -1.328657921431035e+01, -1.328686386296538e+01, -1.328686386296538e+01, -2.222880184733975e+00, -2.222883259066946e+00, -2.223007136395778e+00, -2.223200949118718e+00, -2.222935811683861e+00, -2.222935811683861e+00, -4.784900328531307e-01, -4.781833793988938e-01, -4.715533146927522e-01, -4.747945051313231e-01, -4.739025540019641e-01, -4.739025540019641e-01, -1.557288794675153e-01, -1.566025272902231e-01, -5.482448579308419e-01, -1.328262399418801e-01, -1.409249447064774e-01, -1.409249447064774e-01, -5.115860976987682e-03, -5.382629541297445e-03, -2.718335231718335e-02, -2.963617400390296e-03, -3.719996339162405e-03, -3.719996339162405e-03, -3.290154811678430e+00, -3.290715332230796e+00, -3.290182993606443e+00, -3.290677793233686e+00, -3.290437648960221e+00, -3.290437648960221e+00, -1.291483033836245e+00, -1.299840580325093e+00, -1.286126418746740e+00, -1.293492547421785e+00, -1.298708531183709e+00, -1.298708531183709e+00, -4.177078562371042e-01, -4.453474997786809e-01, -3.902067866117950e-01, -3.989668605138658e-01, -4.231000504303303e-01, -4.231000504303303e-01, -1.025365299930839e-01, -1.698214324781921e-01, -9.391870885884068e-02, -1.250002379666702e+00, -1.119992741272396e-01, -1.119992741272396e-01, -2.288839210326086e-03, -2.897472224997416e-03, -2.217705667067236e-03, -5.475564416856273e-02, -2.669915972180363e-03, -2.669915972180363e-03, -4.133741760411881e-01, -4.123139963717279e-01, -4.126852900868601e-01, -4.129911004919748e-01, -4.128376481355867e-01, -4.128376481355867e-01, -4.027394977464270e-01, -3.620360380489238e-01, -3.730092757756664e-01, -3.843867626216789e-01, -3.784686775714314e-01, -3.784686775714314e-01, -4.652965336298273e-01, -1.989498529103000e-01, -2.221047362434716e-01, -2.663886106307046e-01, -2.416373533691369e-01, -2.416373533691369e-01, -3.364467419635404e-01, -2.571844878568659e-02, -3.975001336385794e-02, -2.542872002923627e-01, -7.412441831294660e-02, -7.412441831294657e-02, -7.198968244504672e-03, -7.768798231484579e-04, -1.628700263154258e-03, -6.872635759021908e-02, -2.471210907319875e-03, -2.471210907319873e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_bhandh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.998049598333790e-11, 1.998021587910859e-11, 1.997888421763919e-11, 1.998305355554308e-11, 1.998088106815000e-11, 1.998088106815000e-11, 1.940579007296332e-07, 1.940557672275662e-07, 1.939822505333951e-07, 1.939224343389651e-07, 1.940315168074151e-07, 1.940315168074151e-07, 7.941193202179249e-04, 7.984262217996744e-04, 9.109475659103590e-04, 8.748286877468953e-04, 8.823652249424177e-04, 8.823652249424177e-04, 3.424459820802077e-01, 3.231226662837196e-01, 3.723376253220434e-04, 9.388673679240482e-01, 6.225858485581673e-01, 6.225858485581675e-01, 5.642873435633357e-08, 2.320538157740478e-07, 9.579401826150896e+00, 2.079627509456378e-17, 9.060781298791116e-13, 9.060781298791116e-13, 2.490982512044963e-08, 2.488661477184987e-08, 2.490866850739910e-08, 2.488817918039498e-08, 2.489810371875221e-08, 2.489810371875221e-08, 3.636430646049755e-06, 3.504939992367789e-06, 3.736156458671880e-06, 3.615843647741471e-06, 3.517088649168979e-06, 3.517088649168979e-06, 1.525231009851840e-03, 1.019263746458143e-03, 2.219353492514693e-03, 1.841078612555446e-03, 1.411341000563378e-03, 1.411341000563378e-03, 2.928356397309912e+00, 3.404484143894039e-01, 3.600513380978786e+00, 4.012368713306653e-06, 1.835656855883216e+00, 1.835656855883216e+00, 2.729177401264382e-24, 6.175658252941481e-18, 2.857716644677563e-25, 7.998345688900798e+00, 5.854196218405015e-20, 5.854196218405015e-20, 1.489818890835494e-03, 1.531968321097038e-03, 1.516977045088314e-03, 1.504759966705367e-03, 1.510860493820015e-03, 1.510860493820015e-03, 1.701983094205791e-03, 3.542651849223445e-03, 2.842814828876798e-03, 2.305034704513578e-03, 2.562969507165569e-03, 2.562969507165569e-03, 8.089379322808377e-04, 1.336440024807798e-01, 6.163935655156776e-02, 1.794287270658814e-02, 3.360256419513215e-02, 3.360256419513216e-02, 5.243125681545367e-03, 9.190606806204421e+00, 9.883343370199622e+00, 2.118448453878427e-02, 5.193969900277263e+00, 5.193969900277263e+00, 1.731991136983093e-04, 1.426901871174842e-85, 8.400644335000831e-37, 5.914313919904077e+00, 4.809097095240821e-22, 4.809097095240568e-22])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
