
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3pw91_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683549268798477e+01, -1.683551385798163e+01, -1.683566647786106e+01, -1.683531865142437e+01, -1.683550336603038e+01, -1.683550336603038e+01, -2.834619679881550e+00, -2.834601838770355e+00, -2.834226471910303e+00, -2.835463747931785e+00, -2.834622360815913e+00, -2.834622360815913e+00, -5.910756842948800e-01, -5.908893178886255e-01, -5.875426381024628e-01, -5.912817620976050e-01, -5.910056401818828e-01, -5.910056401818828e-01, -1.866185785353867e-01, -1.878925885145247e-01, -6.904073805324297e-01, -1.548349979568731e-01, -1.869832515651123e-01, -1.869832515651123e-01, -4.755392666632489e-02, -4.815549757454123e-02, -8.880854162509716e-02, -4.233105869605510e-02, -4.768828060462132e-02, -4.768828060462132e-02, -4.105132475374021e+00, -4.104854572029815e+00, -4.105108648707629e+00, -4.104892482082491e+00, -4.104983299612661e+00, -4.104983299612661e+00, -1.715065991672769e+00, -1.723406474970449e+00, -1.715242865161019e+00, -1.721724482779697e+00, -1.720534895067948e+00, -1.720534895067948e+00, -5.035676250695241e-01, -5.351724499402678e-01, -4.803032117417608e-01, -4.922943512027426e-01, -5.199859239734995e-01, -5.199859239734995e-01, -1.336831332045615e-01, -2.008064912105617e-01, -1.304306162393050e-01, -1.527842022770289e+00, -1.405007027152447e-01, -1.405007027152447e-01, -4.152179995317402e-02, -4.273824601273984e-02, -3.269026364046616e-02, -1.014479996710941e-01, -3.881478597407883e-02, -3.881478597407884e-02, -5.091485486865046e-01, -5.076276680725431e-01, -5.081390381835872e-01, -5.085601315157262e-01, -5.083463703239236e-01, -5.083463703239236e-01, -4.939663300887975e-01, -4.480437191367748e-01, -4.602516327307550e-01, -4.721730662155761e-01, -4.659430185856273e-01, -4.659430185856273e-01, -5.593773649593754e-01, -2.380311136336415e-01, -2.688952623348545e-01, -3.225029232738218e-01, -2.935304981840901e-01, -2.935304981840900e-01, -4.079400578897002e-01, -8.851433154866711e-02, -9.942934955808301e-02, -3.025988464183362e-01, -1.137017207626402e-01, -1.137017207626402e-01, -5.233735168664749e-02, -2.996464923268499e-02, -3.455840909091450e-02, -1.083155533795183e-01, -3.478593608361191e-02, -3.478593608361191e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3pw91_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.040827078781055e+01, -2.040833587781462e+01, -2.040863956409899e+01, -2.040757343527514e+01, -2.040830500283969e+01, -2.040830500283969e+01, -3.378247597180831e+00, -3.378275178742914e+00, -3.379168631098703e+00, -3.378324892919918e+00, -3.378275757952905e+00, -3.378275757952905e+00, -6.893858499753477e-01, -6.883015562432702e-01, -6.594865536651933e-01, -6.648983530881959e-01, -6.889924399216115e-01, -6.889924399216115e-01, -2.011145963163581e-01, -2.049638420382297e-01, -8.277974816863768e-01, -1.358236635283172e-01, -2.022887240738555e-01, -2.022887240738555e-01, -1.819174853106807e-02, -1.871543886116796e-02, -5.083557982399561e-02, -1.233270611119135e-02, -1.853010012442874e-02, -1.853010012442874e-02, -5.109237478336466e+00, -5.111205276913865e+00, -5.109438996435065e+00, -5.110969051601024e+00, -5.110245813811236e+00, -5.110245813811236e+00, -1.862548370390138e+00, -1.877212865878808e+00, -1.854593232060058e+00, -1.866021651815059e+00, -1.882869554348842e+00, -1.882869554348842e+00, -6.281800590617862e-01, -6.941080126183382e-01, -5.976261403783101e-01, -6.343948524116051e-01, -6.528860148744523e-01, -6.528860148744523e-01, -9.879248335987760e-02, -1.893590919151116e-01, -9.758592413563068e-02, -1.979497450725126e+00, -1.142420863383667e-01, -1.142420863383667e-01, -1.201674243262172e-02, -1.291364533670334e-02, -9.817085846971172e-03, -6.517279396033185e-02, -1.175465117622068e-02, -1.175465117622067e-02, -6.642857821885836e-01, -6.591533051011520e-01, -6.611366308764898e-01, -6.625571028426864e-01, -6.618600705062415e-01, -6.618600705062415e-01, -6.447097315690101e-01, -5.398550520278307e-01, -5.713737162412265e-01, -6.007163880521484e-01, -5.858991733651888e-01, -5.858991733651889e-01, -7.247465531339070e-01, -2.422092436094861e-01, -2.943492516178851e-01, -3.878362182321516e-01, -3.390169441446929e-01, -3.390169441446927e-01, -4.903310565129827e-01, -4.867914903474017e-02, -6.056497396025828e-02, -3.748011600123937e-01, -8.134295083502692e-02, -8.134295083502693e-02, -2.059824947999473e-02, -6.430389969261651e-03, -8.784105156442873e-03, -7.778136422862839e-02, -1.031290666120525e-02, -1.031290666120525e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3pw91_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.099112810586337e-09, -5.099088893687804e-09, -5.098909412330396e-09, -5.099302518635033e-09, -5.099100806031200e-09, -5.099100806031200e-09, -6.148891220082012e-06, -6.149000992084047e-06, -6.151028439039934e-06, -6.142465258467898e-06, -6.148845851868607e-06, -6.148845851868607e-06, -3.042212258399890e-03, -3.052284833201795e-03, -3.295019960345262e-03, -3.205391560450081e-03, -3.045896950277444e-03, -3.045896950277444e-03, -3.450154510643830e-01, -3.269614306172523e-01, -1.577912056514935e-03, -1.037629888731848e+00, -3.395070740454356e-01, -3.395070740454356e-01, -2.015504640354990e+03, -1.767823814141033e+03, -2.677908476108202e+01, -1.493365126121983e+04, -1.841448335162129e+03, -1.841448335162129e+03, -1.386704946662152e-06, -1.386594506246610e-06, -1.386689015324101e-06, -1.386603305010615e-06, -1.386656607205492e-06, -1.386656607205492e-06, -4.775553755527081e-05, -4.674787575302264e-05, -4.787377907819353e-05, -4.708407177222852e-05, -4.691816332438291e-05, -4.691816332438291e-05, -4.680057925984260e-03, -2.260364484481961e-03, -5.671216981842113e-03, -3.642337757155879e-03, -3.997123174663871e-03, -3.997123174663871e-03, -2.510621473887853e+00, -3.208768536496140e-01, -2.716131304735017e+00, -5.350900690391827e-05, -1.736487633934520e+00, -1.736487633934520e+00, -1.683615931658904e+04, -1.148251642312759e+04, -3.535461057623074e+04, -1.079333685825584e+01, -1.674414754733222e+04, -1.674414754733224e+04, -1.881669847450907e-03, -2.566830836506904e-03, -2.295725893910481e-03, -2.100090466440470e-03, -2.194470335042166e-03, -2.194470335042166e-03, -1.916498480688132e-03, -8.340497467105568e-03, -6.740756602697543e-03, -5.147511396463281e-03, -5.976468888230909e-03, -5.976468888230908e-03, -2.014922084774605e-03, -1.428983371068229e-01, -7.700836382933456e-02, -2.980473072014981e-02, -4.840052431902474e-02, -4.840052431902477e-02, -1.206496909284666e-02, -3.137257935268887e+01, -1.369591320682984e+01, -3.316045936091111e-02, -5.221492246205862e+00, -5.221492246205864e+00, -1.181591739954994e+03, -5.577972172774979e+05, -8.400926493843486e+04, -6.331474233917839e+00, -2.972257147180735e+04, -2.972257147180746e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
