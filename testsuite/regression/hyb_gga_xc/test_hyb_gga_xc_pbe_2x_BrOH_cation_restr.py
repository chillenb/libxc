
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.267139643256909e+00, -9.267152554556723e+00, -9.267238409049757e+00, -9.267045730697651e+00, -9.267142642718962e+00, -9.267142642718962e+00, -1.569752538465608e+00, -1.569740973793808e+00, -1.569511399177984e+00, -1.570201342987146e+00, -1.569775537114425e+00, -1.569775537114425e+00, -3.342706952782015e-01, -3.340444391168094e-01, -3.294624513095433e-01, -3.318119156598612e-01, -3.311425913797519e-01, -3.311425913797519e-01, -1.009846079523047e-01, -1.020226649456391e-01, -3.841761947023801e-01, -8.219155605195612e-02, -8.928591774052551e-02, -8.928591774052551e-02, -4.438483986553649e-03, -4.671291933565672e-03, -2.538866364406725e-02, -2.564433954815816e-03, -3.221918152154763e-03, -3.221918152154763e-03, -2.274018925856703e+00, -2.273958649708277e+00, -2.274019866442894e+00, -2.273966577577172e+00, -2.273986136310504e+00, -2.273986136310504e+00, -9.509924609399152e-01, -9.557711741290262e-01, -9.505899748693492e-01, -9.547968085302609e-01, -9.538449429102376e-01, -9.538449429102376e-01, -2.943391016667847e-01, -3.212044985516815e-01, -2.744911373829932e-01, -2.877635375702400e-01, -2.987771870650824e-01, -2.987771870650824e-01, -6.163167111153103e-02, -1.049479919684669e-01, -5.752066750974926e-02, -8.697863582858607e-01, -6.937223357753300e-02, -6.937223357753300e-02, -1.978753573061794e-03, -2.506943108077189e-03, -1.916749186509100e-03, -4.006859489021590e-02, -2.309095263940894e-03, -2.309095263940894e-03, -3.028093297692389e-01, -2.987524756275616e-01, -3.000860835259080e-01, -3.012615009087471e-01, -3.006648073099488e-01, -3.006648073099488e-01, -2.965916032630714e-01, -2.517621432170661e-01, -2.620825887313093e-01, -2.739830539148110e-01, -2.676773587079455e-01, -2.676773587079455e-01, -3.344266764880204e-01, -1.270447184977715e-01, -1.465548621542231e-01, -1.843388892128737e-01, -1.635480998586690e-01, -1.635480998586690e-01, -2.337060217025869e-01, -2.434744687481894e-02, -3.281025835611596e-02, -1.788995669943991e-01, -4.952968891368243e-02, -4.952968891368245e-02, -6.261046400602959e-03, -6.702359683117299e-04, -1.406761977805345e-03, -4.688668736413199e-02, -2.136659035244583e-03, -2.136659035244584e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.118997866551704e+01, -1.119002361392447e+01, -1.119021036441070e+01, -1.118954189703360e+01, -1.118989401747922e+01, -1.118989401747922e+01, -1.885358161798935e+00, -1.885384732403366e+00, -1.886043126632817e+00, -1.885237644840271e+00, -1.885433007966620e+00, -1.885433007966620e+00, -4.127602967318231e-01, -4.119165686401071e-01, -3.910038768764033e-01, -3.942997349335992e-01, -3.940444939841324e-01, -3.940444939841324e-01, -1.167271218456243e-01, -1.191299301672732e-01, -4.749799055841776e-01, -9.007140059458711e-02, -9.916040476808494e-02, -9.916040476808491e-02, -5.910749556960798e-03, -6.219730555971669e-03, -3.283948256561471e-02, -3.417913377326815e-03, -4.292916149608761e-03, -4.292916149608758e-03, -2.857376984172570e+00, -2.858777017591569e+00, -2.857439058890126e+00, -2.858675036656050e+00, -2.858087808880987e+00, -2.858087808880987e+00, -1.035291602684855e+00, -1.043908616157963e+00, -1.026663318513069e+00, -1.034182383919125e+00, -1.044349203159082e+00, -1.044349203159082e+00, -3.861070522745603e-01, -4.242143958525885e-01, -3.594238421795332e-01, -3.812814073819205e-01, -3.932153645699654e-01, -3.932153645699654e-01, -7.114021983209468e-02, -1.138328782793643e-01, -6.716995188992221e-02, -1.145026024229759e+00, -7.714907116060563e-02, -7.714907116060563e-02, -2.637635481775453e-03, -3.341240991771820e-03, -2.554155014537455e-03, -4.935300653788546e-02, -3.076991767211767e-03, -3.076991767211771e-03, -3.948970873419263e-01, -3.942514539634959e-01, -3.947440067046222e-01, -3.949461854193226e-01, -3.948698612594147e-01, -3.948698612594147e-01, -3.845435676771186e-01, -3.201249031314015e-01, -3.428337596714179e-01, -3.636941684745964e-01, -3.534959043143316e-01, -3.534959043143316e-01, -4.420835371255236e-01, -1.403765748057150e-01, -1.703870532067328e-01, -2.383063061791084e-01, -2.018847273164623e-01, -2.018847273164623e-01, -2.985159879809233e-01, -3.160806603817917e-02, -4.168697760291039e-02, -2.377185512344646e-01, -5.834940831593877e-02, -5.834940831593876e-02, -8.329877388374145e-03, -8.935907527195572e-04, -1.875314847871732e-03, -5.585930441997439e-02, -2.847274202206078e-03, -2.847274202206076e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.909774136255638e-09, -2.909749011366960e-09, -2.909616533853441e-09, -2.909990759470588e-09, -2.909797628878338e-09, -2.909797628878338e-09, -3.107216436097439e-06, -3.107120423571909e-06, -3.104601896324537e-06, -3.106781661134485e-06, -3.106825208688731e-06, -3.106825208688731e-06, -8.754145651764936e-04, -8.908329336945837e-04, -1.243306814820793e-03, -1.202528864168983e-03, -1.202986169780919e-03, -1.202986169780919e-03, -1.190294371732842e-01, -1.095941986791775e-01, -5.208680953933640e-04, -2.565764532990302e-01, -2.045409638963323e-01, -2.045409638963325e-01, -1.068108015170057e+00, -1.127899441588857e+00, -6.056602933957469e-01, -9.730208861301713e-01, -1.234946779463116e+00, -1.234946779464516e+00, -6.302157448341278e-07, -6.284366167504875e-07, -6.301391669635244e-07, -6.285688328692492e-07, -6.293140846188144e-07, -6.293140846188144e-07, -2.615645422258681e-05, -2.554839142487450e-05, -2.643358451383876e-05, -2.589860196517065e-05, -2.567455170698359e-05, -2.567455170698359e-05, 5.959544232344884e-04, 3.133790890442812e-03, 6.119526097280682e-04, 4.498936865148585e-03, 8.381486325471565e-04, 8.381486325471565e-04, -3.678314149610755e-01, -1.139560306875188e-01, -4.113564652923332e-01, 7.792021906371190e-06, -3.902106490525662e-01, -3.902106490525662e-01, -1.282602240447163e+00, -1.145089122177542e+00, -7.184334081963623e+00, -6.441513560304293e-01, -3.343843668286570e+00, -3.343843668277640e+00, 6.486861316852451e-03, 4.738545599705146e-03, 5.292169183636177e-03, 5.797936224803232e-03, 5.539319565225577e-03, 5.539319565225577e-03, 8.035116658434970e-03, -1.310835830211503e-03, 6.339897230721817e-04, 2.970338740059595e-03, 1.744257662787062e-03, 1.744257662787062e-03, 2.360067606846485e-03, -5.741290834146525e-02, -2.892547506484722e-02, -7.014479863537357e-04, -1.188990452017292e-02, -1.188990452017290e-02, -1.374080425877626e-03, -5.551464311212997e-01, -5.402004125122388e-01, 9.590448430242933e-03, -6.658719886309202e-01, -6.658719886309235e-01, -8.588888277503837e-01, -5.626616295056537e+00, -2.721538775728433e+00, -6.861486002607557e-01, -4.223724414972435e+00, -4.223724414974280e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
