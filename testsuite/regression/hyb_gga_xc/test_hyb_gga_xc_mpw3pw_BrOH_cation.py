
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw3pw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.684825382367270e+01, -1.684827808096626e+01, -1.684843646202456e+01, -1.684807452098636e+01, -1.684825698608536e+01, -1.684825698608536e+01, -2.840439293342509e+00, -2.840415859196463e+00, -2.839942468676456e+00, -2.841294602011491e+00, -2.840478527346195e+00, -2.840478527346195e+00, -5.961143129976951e-01, -5.958793161948134e-01, -5.914226948671318e-01, -5.955299998178517e-01, -5.956108402699286e-01, -5.956108402699286e-01, -1.857738381128350e-01, -1.871179069788624e-01, -6.857998955229457e-01, -1.578096449910099e-01, -1.774163591307274e-01, -1.774163591307274e-01, -2.714233486178960e-03, -2.911252391939523e-03, -4.767305826631561e-02, -1.491036681479427e-03, -1.997682760942966e-03, -1.997682760942966e-03, -4.112827438545446e+00, -4.112534128297199e+00, -4.112821626357747e+00, -4.112562561783568e+00, -4.112674489374779e+00, -4.112674489374779e+00, -1.719853017652974e+00, -1.728532481173487e+00, -1.719034418607380e+00, -1.726687966773146e+00, -1.725074548023491e+00, -1.725074548023491e+00, -5.129483843592910e-01, -5.447853702570103e-01, -4.791279734390491e-01, -4.882561511790628e-01, -5.197120690105772e-01, -5.197120690105772e-01, -1.274115291811979e-01, -1.972911602081993e-01, -1.203319182677700e-01, -1.534126818822287e+00, -1.372951326803253e-01, -1.372951326803253e-01, -1.175743019581848e-03, -1.467612896620108e-03, -1.217079568021390e-03, -8.680599881892891e-02, -1.449520836080621e-03, -1.449520836080620e-03, -5.057717014240842e-01, -5.043802736781663e-01, -5.048560064331944e-01, -5.052683588437571e-01, -5.050601714491609e-01, -5.050601714491609e-01, -4.928388254289038e-01, -4.451436229889008e-01, -4.575759152345732e-01, -4.705521017802896e-01, -4.637406339005337e-01, -4.637406339005337e-01, -5.692791178563712e-01, -2.341377754491121e-01, -2.658430872199699e-01, -3.243807318421344e-01, -2.923538096149949e-01, -2.923538096149949e-01, -4.126073156748560e-01, -4.370623136824729e-02, -6.837950122753010e-02, -3.100119995520770e-01, -1.045989821913575e-01, -1.045989821913575e-01, -4.171476387321875e-03, -4.491777487764262e-04, -8.725095692944613e-04, -9.999268013516964e-02, -1.343181549939345e-03, -1.343181549939346e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw3pw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.041554211248410e+01, -2.041551784788174e+01, -2.041562808484424e+01, -2.041558060257627e+01, -2.041588989854633e+01, -2.041595779348012e+01, -2.041491530173282e+01, -2.041472010453251e+01, -2.041559092325366e+01, -2.041520681999431e+01, -2.041559092325366e+01, -2.041520681999431e+01, -3.384191103928980e+00, -3.384284450263735e+00, -3.384221666802318e+00, -3.384317633241225e+00, -3.384989625665162e+00, -3.385185371282653e+00, -3.384193065728665e+00, -3.384386249378158e+00, -3.383623962897746e+00, -3.385085947700927e+00, -3.383623962897746e+00, -3.385085947700927e+00, -6.996710272062734e-01, -7.028702608287974e-01, -6.981895858973441e-01, -7.021016420990834e-01, -6.750996134538442e-01, -6.701080655776472e-01, -6.773839496280402e-01, -6.789923032715909e-01, -7.017981562155033e-01, -6.535696872061726e-01, -7.017981562155033e-01, -6.535696872061726e-01, -1.902295150614159e-01, -1.942972146797428e-01, -1.935574710007825e-01, -1.983273085568226e-01, -7.980237692358495e-01, -8.239657776122542e-01, -1.457312174529227e-01, -1.468240644575325e-01, -1.777053417643792e-01, -1.382972871365835e-01, -1.777053417643792e-01, -1.382972871365835e-01, -4.717687247634629e-03, -5.073901826909667e-03, -5.163592883823703e-03, -5.645602375472372e-03, -9.788495542703368e-02, -1.014842471067188e-01, -2.215267050023829e-03, -2.186553950588218e-03, -3.561209629282760e-03, -2.541549334755288e-03, -3.561209629282762e-03, -2.541549334755293e-03, -5.116284630417426e+00, -5.115092220451033e+00, -5.118335290607806e+00, -5.117078354871049e+00, -5.116397032187180e+00, -5.115162026394089e+00, -5.118160278867405e+00, -5.116962490709704e+00, -5.117333914454127e+00, -5.116090411823114e+00, -5.117333914454127e+00, -5.116090411823114e+00, -1.876078751535142e+00, -1.875990427568849e+00, -1.891157901862500e+00, -1.890666225125321e+00, -1.860539210249224e+00, -1.864355878658022e+00, -1.873550295366513e+00, -1.877515183545238e+00, -1.895737402098023e+00, -1.886077874921873e+00, -1.895737402098023e+00, -1.886077874921873e+00, -6.388383820060368e-01, -6.377112919678291e-01, -7.045118926533298e-01, -7.050019484124630e-01, -5.842939072187454e-01, -6.003696669873458e-01, -6.215851569638258e-01, -6.351426036819662e-01, -6.614050046706744e-01, -6.375717814771730e-01, -6.614050046706745e-01, -6.375717814771730e-01, -1.222842606024598e-01, -1.217852727149281e-01, -1.870703061912999e-01, -1.875909900892199e-01, -1.185106200542487e-01, -1.186147013391768e-01, -1.985935384660207e+00, -1.985214979382197e+00, -1.266489469378734e-01, -1.246552405121651e-01, -1.266489469378734e-01, -1.246552405121651e-01, -1.659093511669543e-03, -1.674541511291965e-03, -2.172890003782952e-03, -2.176737560646916e-03, -1.827622192091505e-03, -1.939851929560198e-03, -1.089712474594406e-01, -1.099108557931084e-01, -1.930789404723264e-03, -2.453179229993017e-03, -1.930789404723258e-03, -2.453179229993013e-03, -6.569807070994639e-01, -6.588039385213874e-01, -6.517973720573601e-01, -6.536864705549627e-01, -6.538974386619953e-01, -6.557816005401811e-01, -6.554456791033426e-01, -6.572724469329149e-01, -6.547027441619127e-01, -6.565575922673950e-01, -6.547027441619127e-01, -6.565575922673950e-01, -6.412239483670144e-01, -6.426798337859809e-01, -5.307434904711021e-01, -5.325198983803021e-01, -5.630865841515840e-01, -5.650613409647205e-01, -5.958839789232157e-01, -5.974074621039874e-01, -5.793523239750868e-01, -5.809183826331591e-01, -5.793523239750868e-01, -5.809183826331591e-01, -7.349001696966360e-01, -7.361684579191230e-01, -2.343762186049181e-01, -2.351984156704497e-01, -2.842055204641156e-01, -2.860697138688262e-01, -3.870877485067636e-01, -3.885227350726363e-01, -3.331541764979771e-01, -3.331374796049850e-01, -3.331541764979771e-01, -3.331374796049850e-01, -4.919329968539883e-01, -4.945499834894082e-01, -9.626892289726099e-02, -9.681538298103061e-02, -1.144314986147751e-01, -1.144094684114112e-01, -3.795531099181418e-01, -3.833609032781375e-01, -1.081493366245728e-01, -1.033543789609843e-01, -1.081493366245727e-01, -1.033543789609843e-01, -8.419641998762212e-03, -8.960419645108644e-03, -5.930791058283377e-04, -6.000048713239446e-04, -1.188302292120189e-03, -1.225923125474638e-03, -1.048741532396018e-01, -1.051145578565184e-01, -1.901777475691138e-03, -2.187714735406208e-03, -1.901777475691137e-03, -2.187714735406209e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw3pw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.037094838270321e-08, 2.631854754392256e-10, -1.037100882374521e-08, -1.037089012865707e-08, 2.631895866484782e-10, -1.037096589500424e-08, -1.037057486248204e-08, 2.631942823238655e-10, -1.037055243340217e-08, -1.037124338460828e-08, 2.631334096077467e-10, -1.037139509816539e-08, -1.037093070965066e-08, 2.631672314016183e-10, -1.037095556116175e-08, -1.037093070965066e-08, 2.631672314016183e-10, -1.037095556116175e-08, -1.306930565971670e-05, 1.524569791863723e-06, -1.307470279411012e-05, -1.306957141111229e-05, 1.524854649863352e-06, -1.307537155063840e-05, -1.308033786349045e-05, 1.531279918613775e-06, -1.308368562534867e-05, -1.305348110293830e-05, 1.518722407064937e-06, -1.305780252051925e-05, -1.307665002985623e-05, 1.524730810906265e-06, -1.306599217327012e-05, -1.307665002985623e-05, 1.524730810906265e-06, -1.306599217327012e-05, -7.241697749651457e-03, 2.683886860772905e-03, -7.257859894992825e-03, -7.251927025312151e-03, 2.666592373995982e-03, -7.271341422359297e-03, -7.510103084745996e-03, 2.231147749365712e-03, -7.492232847423694e-03, -7.286479531746462e-03, 2.176757890714110e-03, -7.296152000329200e-03, -7.461981905707405e-03, 2.207136453503048e-03, -7.116320427863536e-03, -7.461981905707405e-03, 2.207136453503048e-03, -7.116320427863536e-03, -9.512081761228030e-01, 2.675350418124410e-01, -8.547356651826065e-01, -9.298348339679544e-01, 2.801661866009576e-01, -8.197960498308750e-01, -4.257564705485813e-03, 1.436198076183433e-03, -3.951001477976022e-03, -1.819875959164760e+00, 2.062854905649676e-01, -1.743095862332726e+00, -8.421721603404890e-01, 1.705737505640955e-01, -3.627802556283145e+00, -8.421721603404878e-01, 1.705737505640960e-01, -3.627802556283146e+00, 4.324426492774966e+02, 6.976816572929194e-03, 4.219231650849995e+02, 4.488757003675464e+02, 8.212998077181156e-03, 4.388474242933411e+02, 4.908920911628864e+01, 4.473773563134211e-02, 4.047922463863633e+01, 4.481985161775352e+02, 2.461756828256827e-03, 4.383987608056100e+02, 4.438330884335990e+02, 3.621947006379986e-03, 1.215574628454617e+03, 4.438330884335993e+02, 3.621947005282611e-03, 1.215574628454632e+03, -2.979670485395311e-06, 3.846791876807274e-07, -2.982515605394914e-06, -2.980890733206827e-06, 3.871549867169914e-07, -2.983655963444918e-06, -2.979723486544419e-06, 3.847778948381879e-07, -2.982523510610877e-06, -2.980740285688840e-06, 3.869632657911983e-07, -2.983591572765523e-06, -2.980325476460374e-06, 3.859383264909262e-07, -2.983084146990562e-06, -2.980325476460374e-06, 3.859383264909262e-07, -2.983084146990562e-06, -9.884581812917109e-05, 9.976058846257291e-06, -9.886430172297040e-05, -9.678380216840716e-05, 9.895885464105219e-06, -9.687315109473070e-05, -9.913506788349424e-05, 9.617096636565330e-06, -9.914553015834939e-05, -9.735683452646447e-05, 9.549544430134611e-06, -9.732225700113567e-05, -9.746738504131125e-05, 1.011057233366589e-05, -9.771883839955726e-05, -9.746738504131125e-05, 1.011057233366589e-05, -9.771883839955726e-05, -1.330451218573348e-02, 8.638770141011970e-03, -1.350460119435092e-02, -1.030604666818273e-02, 1.131836157367290e-02, -1.033444846096744e-02, -1.925657788373900e-02, 1.127557166218103e-02, -1.641657054743678e-02, -1.814463556653777e-02, 1.719131855459492e-02, -1.477354266592850e-02, -1.123590131233515e-02, 8.630054784186944e-03, -1.456688757285646e-02, -1.123590131233515e-02, 8.630054784186943e-03, -1.456688757285646e-02, -3.163571519770795e+00, 1.166140442384365e-01, -3.191330098620518e+00, -7.182884082262923e-01, 1.040845131056493e-01, -7.079353823861094e-01, -3.638194399101692e+00, 1.177554056090019e-01, -3.506017900054330e+00, -1.520393826513211e-04, 8.676041836822779e-05, -1.524288918707490e-04, -2.927747109624215e+00, 2.211984867257730e-01, -3.037906606083947e+00, -2.927747109624215e+00, 2.211984867257730e-01, -3.037906606083947e+00, 6.591707065878094e+02, 2.395133575854821e-03, 5.702200862782446e+02, 5.406875648240459e+02, 3.026072888213717e-03, 4.997674787100244e+02, 2.980038480144308e+03, 3.008056361628062e-02, 3.251939281992146e+03, -1.798078544276968e+00, 1.123502923877156e-01, -1.631526388259016e+00, 1.534770230111258e+03, 1.153016403337206e-02, 1.403316364531326e+03, 1.534770230111249e+03, 1.153016402149749e-02, 1.403316364531320e+03, -1.566133598690053e-02, 1.947205808238306e-02, -1.537730140532888e-02, -1.438086193134479e-02, 1.647856848840045e-02, -1.408408783496391e-02, -1.438858731152554e-02, 1.748826963882371e-02, -1.409547830840753e-02, -1.462448163150450e-02, 1.838153252416446e-02, -1.432978494056333e-02, -1.446279782457336e-02, 1.793154557055355e-02, -1.416858385101722e-02, -1.446279782457336e-02, 1.793154557055355e-02, -1.416858385101722e-02, -1.777900603699884e-02, 2.337025111261517e-02, -1.737474534975432e-02, -2.410964006994203e-02, 1.192368977668423e-02, -2.372306288135029e-02, -2.158234618280095e-02, 1.353786278956722e-02, -2.122137328947662e-02, -1.926415759765828e-02, 1.604520422926629e-02, -1.893121516973139e-02, -2.045673436569001e-02, 1.467622004941244e-02, -2.009935093220674e-02, -2.045673436569001e-02, 1.467622004941244e-02, -2.009935093220674e-02, -8.616349608382184e-03, 8.934960888183173e-03, -8.599862494007298e-03, -3.508098214216492e-01, 7.533749916729192e-02, -3.449945396336849e-01, -2.047860290678011e-01, 6.572442170062726e-02, -1.994382815743083e-01, -8.867865673907252e-02, 5.291792792361091e-02, -8.660821852018102e-02, -1.343667508446203e-01, 6.190666086789175e-02, -1.351879179299573e-01, -1.343667508446204e-01, 6.190666086789179e-02, -1.351879179299574e-01, -3.303732841399078e-02, 1.716801915352451e-02, -3.224884436648106e-02, 5.124444637845638e+01, 3.667699013988061e-02, 5.018595647577857e+01, 1.425235618086911e+01, 5.727588140932804e-02, 1.133240155045101e+01, -1.096006310160523e-01, 8.246028212985558e-02, -1.026457391916637e-01, -5.207714669206447e+00, 1.982463815151670e-01, -6.233888902889178e+00, -5.207714669206452e+00, 1.982463815151691e-01, -6.233888902889183e+00, 3.160407345911048e+02, 8.751405840155102e-03, 3.185899818792434e+02, 2.448721728533817e+03, 3.258646630697342e-03, 4.183840800058137e+03, 1.309532150102202e+03, 4.090413211226247e-03, 1.369017703183661e+03, -5.748432102258604e+00, 1.814490007162881e-01, -5.685509270061409e+00, 3.074072452853528e+03, 1.470748610493714e-02, 1.483193579595185e+03, 3.074072452853521e+03, 1.470748609914269e-02, 1.483193579595193e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
