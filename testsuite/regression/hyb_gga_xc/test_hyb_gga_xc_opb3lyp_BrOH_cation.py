
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_opb3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_opb3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.677135242157005e+01, -1.677137765493345e+01, -1.677153841079144e+01, -1.677116198781768e+01, -1.677135232061320e+01, -1.677135232061320e+01, -2.829642632725093e+00, -2.829618627070535e+00, -2.829131514377146e+00, -2.830504430408377e+00, -2.829680801043085e+00, -2.829680801043085e+00, -5.951028079443752e-01, -5.949135344854599e-01, -5.911919027908350e-01, -5.953190978504584e-01, -5.944909415021510e-01, -5.944909415021510e-01, -1.795875668407630e-01, -1.813458730468205e-01, -6.846875941712820e-01, -1.462084792886940e-01, -1.717992805523968e-01, -1.717992805523967e-01, -4.649360536679990e-02, -4.662115634776582e-02, -8.424660147816286e-02, -4.180137257207627e-02, -4.250958503310820e-02, -4.250958503310817e-02, -4.093210268343030e+00, -4.092874991734106e+00, -4.093202712425537e+00, -4.092906609889201e+00, -4.093036046935420e+00, -4.093036046935420e+00, -1.716998167661984e+00, -1.725668009453039e+00, -1.716050114040945e+00, -1.723708172600602e+00, -1.722257343543664e+00, -1.722257343543664e+00, -5.075273105933271e-01, -5.315900613228262e-01, -4.742615129836702e-01, -4.766529815136630e-01, -5.136145424391350e-01, -5.136145424391351e-01, -1.136590891638825e-01, -1.849570237517218e-01, -1.087245291969129e-01, -1.516586333793879e+00, -1.254983635459375e-01, -1.254983635459375e-01, -3.756780369872113e-02, -4.030007081659484e-02, -2.660086783874195e-02, -9.158948684336177e-02, -3.229296922424047e-02, -3.229296922424049e-02, -4.893988946631233e-01, -4.910483448872930e-01, -4.905108413363084e-01, -4.900292005741077e-01, -4.902734796109148e-01, -4.902734796109148e-01, -4.756396894761577e-01, -4.426365620039935e-01, -4.529860749477440e-01, -4.623823486874833e-01, -4.575672293732656e-01, -4.575672293732656e-01, -5.564953711310502e-01, -2.253452236626031e-01, -2.607594444475821e-01, -3.207626091622214e-01, -2.889856382457316e-01, -2.889856382457316e-01, -4.098053103334683e-01, -8.444143698507085e-02, -8.899152408589200e-02, -3.047483788645923e-01, -9.929548916033941e-02, -9.929548916033942e-02, -5.289143733051798e-02, -2.290336807962129e-02, -3.025332804539636e-02, -9.659753828193308e-02, -3.035915450068437e-02, -3.035915450068436e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_opb3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_opb3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.042014834847475e+01, -2.042012394094163e+01, -2.042023276158939e+01, -2.042018555218566e+01, -2.042049190275630e+01, -2.042055829074236e+01, -2.041953500600792e+01, -2.041934300722290e+01, -2.042019644708195e+01, -2.041982219517851e+01, -2.042019644708195e+01, -2.041982219517851e+01, -3.361290202822220e+00, -3.361350664455095e+00, -3.361316402115504e+00, -3.361377450276740e+00, -3.361959303230635e+00, -3.362121432253894e+00, -3.361381648622806e+00, -3.361537028740062e+00, -3.360747138440291e+00, -3.362115438269119e+00, -3.360747138440291e+00, -3.362115438269119e+00, -6.894018552410563e-01, -6.911486398440244e-01, -6.883893493529327e-01, -6.905112618677220e-01, -6.713274489173915e-01, -6.691680268043341e-01, -6.750770337223264e-01, -6.757619081906019e-01, -6.870734712833558e-01, -6.667199315564982e-01, -6.870734712833558e-01, -6.667199315564982e-01, -2.044468772006498e-01, -2.053800734387862e-01, -2.061647024877608e-01, -2.074267277885265e-01, -7.882562654766415e-01, -8.072984696528035e-01, -1.696350920337176e-01, -1.701726301760750e-01, -1.772603008166103e-01, -1.794387639323696e-01, -1.772603008166103e-01, -1.794387639323695e-01, -1.583732956661212e-02, -1.592136552470240e-02, -1.624451112504431e-02, -1.632582805413443e-02, -5.020873724144415e-02, -5.089887681471995e-02, -1.178269359970486e-02, -1.179465373595256e-02, -1.348298037909494e-02, -1.148054002348091e-02, -1.348298037909492e-02, -1.148054002348090e-02, -5.078425878597509e+00, -5.077243276545086e+00, -5.080277915976053e+00, -5.079036125747641e+00, -5.078528495778257e+00, -5.077306716327899e+00, -5.080120400711192e+00, -5.078932530111048e+00, -5.079373034432074e+00, -5.078144077903236e+00, -5.079373034432074e+00, -5.078144077903236e+00, -1.878059210929573e+00, -1.877980379236579e+00, -1.892335471929690e+00, -1.891903162252623e+00, -1.864831278178383e+00, -1.867604180622696e+00, -1.877139974573498e+00, -1.880076707014895e+00, -1.895312509872985e+00, -1.887903201718599e+00, -1.895312509872985e+00, -1.887903201718599e+00, -6.169205946063079e-01, -6.158524080199331e-01, -6.785072551491138e-01, -6.788862360556814e-01, -5.652717772060226e-01, -5.789001665295403e-01, -5.967066544773851e-01, -6.098527848751483e-01, -6.374310736656218e-01, -6.157529383852411e-01, -6.374310736656219e-01, -6.157529383852413e-01, -1.322405650804598e-01, -1.320673864546894e-01, -2.168355932675189e-01, -2.169485113811914e-01, -1.216312241652918e-01, -1.232749949375176e-01, -1.943744239124145e+00, -1.943012493501110e+00, -1.458545873981665e-01, -1.423820597597857e-01, -1.458545873981665e-01, -1.423820597597857e-01, -9.866499964918075e-03, -1.008585039719470e-02, -1.137947891283607e-02, -1.150030101598037e-02, -8.147081255629489e-03, -8.111460101046951e-03, -8.017122989642070e-02, -8.069235986859760e-02, -9.516789669586729e-03, -9.906854414292041e-03, -9.516789669586748e-03, -9.906854414292041e-03, -6.346933078743560e-01, -6.364689863980071e-01, -6.268264719300376e-01, -6.286044468480738e-01, -6.294629208334014e-01, -6.312546353507515e-01, -6.317545047514163e-01, -6.335192313387259e-01, -6.305967210221760e-01, -6.323747517694697e-01, -6.305967210221760e-01, -6.323747517694697e-01, -6.202048713276060e-01, -6.216320263676931e-01, -5.183489835113861e-01, -5.196686423454508e-01, -5.439697694598230e-01, -5.455460697284789e-01, -5.720777354006823e-01, -5.734459576505517e-01, -5.575072037972866e-01, -5.588753689386557e-01, -5.575072037972866e-01, -5.588753689386557e-01, -7.082544423334761e-01, -7.093322042650002e-01, -2.589410128144372e-01, -2.590966496333600e-01, -2.968524828490163e-01, -2.973277883182327e-01, -3.758899206776694e-01, -3.769175381722710e-01, -3.322892363591411e-01, -3.321282230973163e-01, -3.322892363591412e-01, -3.321282230973164e-01, -4.799022946008937e-01, -4.817545967783179e-01, -4.902746184774199e-02, -4.910354847073874e-02, -6.474040174478823e-02, -6.552143198147524e-02, -3.632563829725471e-01, -3.661040854195303e-01, -1.010949412396747e-01, -1.004225929414464e-01, -1.010949412396746e-01, -1.004225929414464e-01, -1.992935863622661e-02, -1.992415112218021e-02, -5.144202149841812e-03, -4.758065222425620e-03, -7.682475604636102e-03, -7.695831163195682e-03, -9.462016617261890e-02, -9.526204453899947e-02, -8.498544832084001e-03, -9.447820969695157e-03, -8.498544832084011e-03, -9.447820969695141e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_opb3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_opb3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.706616190566638e-09, 1.229467996712337e-11, -9.706671027823312e-09, -9.706562111155692e-09, 1.229450470355909e-11, -9.706631232098450e-09, -9.706267157089740e-09, 1.229367145735378e-11, -9.706245498793205e-09, -9.706887089430631e-09, 1.229628035819409e-11, -9.707027722306935e-09, -9.706593325956216e-09, 1.229492110295851e-11, -9.706624188844518e-09, -9.706593325956216e-09, 1.229492110295851e-11, -9.706624188844518e-09, -1.261228204420699e-05, 1.598308016370295e-07, -1.261704109068871e-05, -1.261264745974354e-05, 1.598289639924184e-07, -1.261775846653604e-05, -1.262497162010567e-05, 1.597656273783882e-07, -1.262803154563080e-05, -1.259540063582899e-05, 1.597140917425639e-07, -1.259930367158494e-05, -1.261815510523163e-05, 1.598092742992449e-07, -1.261004601835415e-05, -1.261815510523163e-05, 1.598092742992449e-07, -1.261004601835415e-05, -7.160842502349505e-03, 9.614082903037486e-04, -7.219801508501889e-03, -7.154360984825929e-03, 9.669715175404713e-04, -7.226630677642672e-03, -7.193744191909645e-03, 1.109430202556694e-03, -7.090739865429643e-03, -6.936906534174074e-03, 1.062924456554797e-03, -6.971786338639934e-03, -7.496784381233060e-03, 1.156312582127784e-03, -6.397490752371148e-03, -7.496784381233060e-03, 1.156312582127784e-03, -6.397490752371148e-03, -7.074325569359460e-01, 5.050816302329247e-01, -6.988219929344143e-01, -7.005373368724305e-01, 4.771428930059248e-01, -6.870370134888679e-01, -4.139694263412277e-03, 4.471091498389344e-04, -4.054635531830060e-03, -1.213959261208668e+00, 1.407757153965376e+00, -1.199360594853389e+00, -9.600536822444684e-01, 2.000891852986526e+00, -3.446766143845050e+00, -9.600536822444676e-01, 2.000891852986527e+00, -3.446766143845055e+00, -1.490036307305664e+04, 9.340081869787463e-08, -1.248179843907810e+04, -1.322311050765888e+04, 3.832550358818874e-07, -1.083887667142586e+04, -7.697530678991038e+01, 1.544447037261822e+01, -6.610796180449786e+01, -6.281750147709071e+04, 3.474992255702063e-17, -6.542743325757131e+04, -2.067161386319908e+04, 8.995021461762063e-13, -1.358805423682619e+05, -2.067161386319910e+04, 8.995021461762063e-13, -1.358805423682619e+05, -2.900881999344148e-06, 1.876310610525430e-08, -2.903324436505836e-06, -2.903038535614548e-06, 1.874491732948710e-08, -2.905407007941554e-06, -2.900972330382128e-06, 1.876220212129550e-08, -2.903372589564856e-06, -2.902820037433939e-06, 1.874614026577228e-08, -2.905267751553002e-06, -2.902009902010971e-06, 1.875392123470460e-08, -2.904373271377733e-06, -2.902009902010971e-06, 1.875392123470460e-08, -2.904373271377733e-06, -9.359525320276736e-05, 3.447827992618552e-06, -9.360813272156673e-05, -9.172126874185251e-05, 3.317183293265232e-06, -9.178229588659417e-05, -9.365253590916782e-05, 3.547489602580973e-06, -9.378087931657723e-05, -9.202898098267978e-05, 3.427794459155476e-06, -9.211893221197969e-05, -9.255606681936140e-05, 3.331773858071113e-06, -9.249006008057748e-05, -9.255606681936140e-05, 3.331773858071113e-06, -9.249006008057748e-05, -1.477408417524861e-02, 1.893063152299443e-03, -1.489769057144742e-02, -1.360733718969697e-02, 1.245681052421246e-03, -1.363727340602340e-02, -2.021422487415746e-02, 2.850250653802011e-03, -1.872472742589515e-02, -2.225712891200086e-02, 2.340972608875249e-03, -2.004910155559612e-02, -1.344867185920591e-02, 1.823975800197278e-03, -1.543741566549468e-02, -1.344867185920592e-02, 1.823975800197278e-03, -1.543741566549468e-02, -2.651066927593180e+00, 4.506038341741699e+00, -2.683055825208315e+00, -4.781979855064470e-01, 4.979572587085463e-01, -4.787178166352019e-01, -3.587705199502258e+00, 5.603329473514319e+00, -3.429126024609261e+00, -1.750156342379824e-04, 3.822650360807692e-06, -1.753250522703495e-04, -1.993449856224670e+00, 2.824394848217370e+00, -2.282888109423569e+00, -1.993449856224670e+00, 2.824394848217370e+00, -2.282888109423569e+00, -1.581396430640457e+05, 4.554057226686293e-24, -1.359352063698466e+05, -7.402259318469802e+04, 1.032157464335202e-17, -6.932179470197875e+04, -2.783029107736060e+05, 4.751410120855023e-25, -2.431297797051012e+05, -1.504337664241414e+01, 1.263922213315245e+01, -1.457133009649557e+01, -2.153274997587531e+05, 8.072671141690741e-20, -8.598788191639105e+04, -2.153274997587528e+05, 8.072671141690738e-20, -8.598788191639102e+04, -2.048695339669937e-02, 1.847728830521012e-03, -2.027277958477240e-02, -1.914991379077933e-02, 1.902000349322056e-03, -1.896375509228303e-02, -1.954681292504467e-02, 1.882694604547239e-03, -1.935496943084036e-02, -1.993106386352380e-02, 1.866957946539953e-03, -1.972505804514403e-02, -1.973231675217820e-02, 1.874815287670880e-03, -1.953348245169171e-02, -1.973231675217820e-02, 1.874815287670880e-03, -1.953348245169171e-02, -2.364200359320256e-02, 2.121233754077803e-03, -2.339971542015514e-02, -2.435105060923064e-02, 4.534205364457548e-03, -2.419561565070137e-02, -2.331543313695954e-02, 3.610350584959717e-03, -2.315341769379403e-02, -2.277256860340884e-02, 2.905056782118906e-03, -2.258088530897459e-02, -2.303442346978004e-02, 3.242603155911892e-03, -2.283789792745086e-02, -2.303442346978004e-02, 3.242603155911892e-03, -2.283789792745086e-02, -1.117555275548830e-02, 9.798218340583483e-04, -1.117879208989015e-02, -2.559699462544489e-01, 1.909359732215493e-01, -2.563026526421002e-01, -1.669079015666749e-01, 8.630496805635481e-02, -1.672316929515339e-01, -8.945844365778023e-02, 2.422288232739471e-02, -8.861901860859003e-02, -1.238026274006625e-01, 4.620628091137152e-02, -1.244152467919438e-01, -1.238026274006625e-01, 4.620628091137154e-02, -1.244152467919439e-01, -3.332596718338312e-02, 6.804600066647985e-03, -3.304808453549431e-02, -7.999558151287842e+01, 1.483888170855820e+01, -7.849267461085043e+01, -2.944922754257862e+01, 1.578194724189124e+01, -2.721013340021537e+01, -1.177807027638406e-01, 2.880288324638131e-02, -1.147427693127427e-01, -7.268321829399552e+00, 8.149207950493299e+00, -7.328296415429834e+00, -7.268321829399550e+00, 8.149207950493299e+00, -7.328296415429841e+00, -4.999963648811565e+03, 2.870682132035994e-04, -4.542181216986904e+03, -4.675074738293444e+06, 2.394096206847923e-85, -5.440035594990391e+06, -5.245906492422884e+05, 1.396342624777953e-36, -4.468056208123819e+05, -9.035728915126493e+00, 9.264272469940369e+00, -8.684933962772179e+00, -3.082757287851440e+05, 6.870204294972058e-22, -1.116338265027077e+05, -3.082757287851447e+05, 6.870204294971699e-22, -1.116338265027080e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
