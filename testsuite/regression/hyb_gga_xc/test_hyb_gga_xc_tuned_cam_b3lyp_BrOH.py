
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.937544136639237e+01, -1.937546307041326e+01, -1.937563120260086e+01, -1.937527436880414e+01, -1.937545221631195e+01, -1.937545221631195e+01, -3.194926050837728e+00, -3.194900778870322e+00, -3.194339245098243e+00, -3.195990529558141e+00, -3.194926784759181e+00, -3.194926784759181e+00, -5.980818347253120e-01, -5.978869558021839e-01, -5.938049792771403e-01, -5.982362345131551e-01, -5.980084549953641e-01, -5.980084549953641e-01, -1.239783061684295e-01, -1.263532334624891e-01, -7.123171367728519e-01, -7.033516645795275e-02, -1.246938183734921e-01, -1.246938183734921e-01, -2.587463332085947e-03, -2.704281369796494e-03, -5.809669651830366e-03, -1.295709053925646e-03, -2.677401092081000e-03, -2.677401092081000e-03, -4.643991816856850e+00, -4.643423599582969e+00, -4.643939620595439e+00, -4.643497703941773e+00, -4.643692029166504e+00, -4.643692029166504e+00, -1.913071007233788e+00, -1.922539195631198e+00, -1.913645230013984e+00, -1.921015122692138e+00, -1.918753721856583e+00, -1.918753721856583e+00, -4.926344733031010e-01, -5.203320394871314e-01, -4.661386339482803e-01, -4.738122922993503e-01, -5.106870715297969e-01, -5.106870715297969e-01, -3.126028078892669e-02, -1.245836589734633e-01, -3.164331869357569e-02, -1.656634875157969e+00, -4.910788734301286e-02, -4.910788734301286e-02, -1.252619499384029e-03, -1.420157033606985e-03, -1.082613843511645e-03, -9.072868798809039e-03, -1.301228350533137e-03, -1.301228350533137e-03, -4.868688375049561e-01, -4.884149040805906e-01, -4.879042783544080e-01, -4.874757431973434e-01, -4.876932128214219e-01, -4.876932128214219e-01, -4.691780726367326e-01, -4.308471958354829e-01, -4.432715998974542e-01, -4.538059327618938e-01, -4.484452026973456e-01, -4.484452026973456e-01, -5.483679807402004e-01, -1.752361819090437e-01, -2.181962726240069e-01, -2.854415040504648e-01, -2.505683132539395e-01, -2.505683132539395e-01, -3.843810915667158e-01, -5.242248748902770e-03, -6.041810927194460e-03, -2.623749219333303e-01, -2.008728265654389e-02, -2.008728265654389e-02, -3.011522553267910e-03, -4.146971307391151e-04, -7.660442143394725e-04, -1.914380343006231e-02, -1.116438628626693e-03, -1.116438628626691e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.322062939478905e+01, -2.322070505494624e+01, -2.322105610577645e+01, -2.321981688487402e+01, -2.322066918241091e+01, -2.322066918241091e+01, -3.749733564384727e+00, -3.749761806861693e+00, -3.750692512936241e+00, -3.749882417370460e+00, -3.749764029013582e+00, -3.749764029013582e+00, -7.074637102830105e-01, -7.066569020744332e-01, -6.869100785871526e-01, -6.923211003855272e-01, -7.071694228202682e-01, -7.071694228202682e-01, -1.830022145590122e-01, -1.847196324909744e-01, -8.538957311812764e-01, -1.395467547808920e-01, -1.834958854806683e-01, -1.834958854806683e-01, -3.407703238589266e-03, -3.564196697349232e-03, -2.095614466369496e-02, -1.701922961975449e-03, -3.528147430992429e-03, -3.528147430992429e-03, -5.718082526031508e+00, -5.720264278597928e+00, -5.718306123679148e+00, -5.720002534958856e+00, -5.719200244937864e+00, -5.719200244937864e+00, -2.053822447136284e+00, -2.069381723646020e+00, -2.046356000522199e+00, -2.058454496951664e+00, -2.074181638955960e+00, -2.074181638955960e+00, -6.198346043149412e-01, -6.879096671248539e-01, -5.863876100217630e-01, -6.210559514845453e-01, -6.459148126796195e-01, -6.459148126796195e-01, -1.020343738100687e-01, -2.004801904640084e-01, -9.805840671565992e-02, -2.139657285637416e+00, -1.172800910903906e-01, -1.172800910903906e-01, -1.645508456912039e-03, -1.864930988367594e-03, -1.423008353908124e-03, -4.358722006595110e-02, -1.709149557457780e-03, -1.709149557457780e-03, -6.569523178247532e-01, -6.489939703714733e-01, -6.517219255878232e-01, -6.539184856534005e-01, -6.528092316853449e-01, -6.528092316853448e-01, -6.355270876320144e-01, -5.308274617347719e-01, -5.577168901093631e-01, -5.850484429689019e-01, -5.708579657436869e-01, -5.708579657436869e-01, -7.221107533528612e-01, -2.469094441366703e-01, -2.866795964505970e-01, -3.631080331750715e-01, -3.209354894934555e-01, -3.209354894934554e-01, -4.765745730326219e-01, -1.765220276333572e-02, -3.542268793750104e-02, -3.407114486761734e-01, -7.030158737221795e-02, -7.030158737221791e-02, -3.977833389716337e-03, -5.477458166245491e-04, -1.008648021293970e-03, -6.337434245183350e-02, -1.467271355330343e-03, -1.467271355330341e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.624198262646963e-09, -6.624170505339427e-09, -6.623946768377788e-09, -6.624403313786811e-09, -6.624184459504115e-09, -6.624184459504115e-09, -8.317963419385456e-06, -8.318241277571584e-06, -8.324534050856318e-06, -8.306762723021506e-06, -8.317966823929799e-06, -8.317966823929799e-06, -3.737951888019674e-03, -3.734701109343768e-03, -3.611142838655151e-03, -3.538224215321465e-03, -3.736848713448353e-03, -3.736848713448353e-03, -1.854780257937269e-02, -2.917492767375419e-02, -2.189161314631874e-03, 4.380034549638581e-01, -2.193246216346312e-02, -2.193246216346312e-02, -1.779123009890258e-03, 2.917722664847193e-04, 8.077860233576493e+00, -5.089584727791009e-04, -4.480348093217274e-04, -4.480348093217274e-04, -1.944202854959171e-06, -1.945595351244312e-06, -1.944334155912204e-06, -1.945417014794554e-06, -1.944931527303874e-06, -1.944931527303874e-06, -5.942906610229104e-05, -5.833515801140073e-05, -5.936459079778873e-05, -5.851134290108761e-05, -5.877092159559949e-05, -5.877092159559949e-05, -7.872731247898519e-03, -7.599190030230039e-03, -9.297313229124343e-03, -9.980503628113415e-03, -7.141587680198911e-03, -7.141587680198911e-03, 1.709897935591052e+00, 4.806608705568941e-02, 1.765300121886836e+00, -1.122020306782250e-04, 9.540244059584648e-01, 9.540244059584648e-01, -4.803810170612718e-04, -6.919572828956827e-04, -6.458459463710626e-04, 5.705157298308227e+00, -7.004704986279726e-04, -7.004704986268772e-04, -1.017635032968297e-02, -9.478741173328364e-03, -9.692007989766232e-03, -9.881142065962363e-03, -9.783525692665282e-03, -9.783525692665282e-03, -1.167200275544827e-02, -1.086232857654046e-02, -1.078421861541977e-02, -1.084069523625471e-02, -1.080984556551987e-02, -1.080984556551987e-02, -6.323360299356343e-03, -2.226921959795721e-02, -3.587623210627301e-02, -3.238698572519802e-02, -3.659437820877803e-02, -3.659437820877805e-02, -1.495598391150976e-02, 8.168551581090789e+00, 6.714956962975765e+00, -4.499950198239893e-02, 3.156207993012926e+00, 3.156207993012925e+00, 1.767984797328466e-02, -2.799759908769844e-05, -1.508312250025894e-04, 3.539437128319125e+00, -5.822510485766307e-04, -5.822510485778536e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
