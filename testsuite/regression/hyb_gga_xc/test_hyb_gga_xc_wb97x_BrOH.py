
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.761343629066049e+01, -1.761345536134580e+01, -1.761360654187921e+01, -1.761329294197675e+01, -1.761344579533851e+01, -1.761344579533851e+01, -2.847690037313502e+00, -2.847664741304287e+00, -2.847091556312525e+00, -2.848704836804911e+00, -2.847689582375593e+00, -2.847689582375593e+00, -4.847616461054808e-01, -4.846702819922094e-01, -4.831220430895797e-01, -4.870085560760520e-01, -4.847259112707035e-01, -4.847259112707035e-01, -7.666568536194103e-02, -7.874467277856739e-02, -5.850681905849660e-01, -3.716122741833464e-02, -7.729308523575727e-02, -7.729308523575727e-02, 1.286453976253656e-02, 1.335200274692055e-02, 2.470336363940077e-02, 6.832027539452047e-03, 1.323690199952364e-02, 1.323690199952364e-02, -4.172071885756155e+00, -4.171684623406035e+00, -4.172037220828349e+00, -4.171735989511260e+00, -4.171865622318315e+00, -4.171865622318315e+00, -1.691819061313815e+00, -1.699963585676212e+00, -1.693188286722137e+00, -1.699510681442735e+00, -1.695619643165542e+00, -1.695619643165542e+00, -3.870752667526001e-01, -4.228726079639022e-01, -3.637012366586569e-01, -3.766265347227362e-01, -4.032007830445417e-01, -4.032007830445417e-01, -1.257247869989339e-02, -7.969902913106146e-02, -1.082445969747022e-02, -1.458978279792708e+00, -2.258758101668789e-02, -2.258758101668789e-02, 6.612798776407011e-03, 7.458031139864732e-03, 5.734384924592599e-03, 1.625731773957233e-02, 6.855197583762321e-03, 6.855197583762322e-03, -3.960999601197689e-01, -3.952925157979897e-01, -3.962896046688111e-01, -3.964906383033522e-01, -3.964646782728675e-01, -3.964646782728675e-01, -3.808176280641267e-01, -3.344836362238923e-01, -3.436443361170701e-01, -3.540753269475730e-01, -3.481302312822450e-01, -3.481302312822450e-01, -4.472051511297535e-01, -1.185447264541094e-01, -1.536089227759411e-01, -2.091342498812502e-01, -1.807388393704889e-01, -1.807388393704888e-01, -2.940971147990872e-01, 2.568218058203917e-02, 2.022667238184360e-02, -1.882171288013644e-01, 2.988466780372657e-03, 2.988466780372498e-03, 1.462027787241030e-02, 2.222897193587733e-03, 4.089850897730938e-03, 5.646484843828464e-03, 5.910559868971582e-03, 5.910559868971591e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.104596239054684e+01, -2.104604283773123e+01, -2.104639696967219e+01, -2.104507972922889e+01, -2.104600485543857e+01, -2.104600485543857e+01, -3.319451036564907e+00, -3.319494023952815e+00, -3.320816858873086e+00, -3.319256937675415e+00, -3.319487553603234e+00, -3.319487553603234e+00, -5.637986712851680e-01, -5.631967040800869e-01, -5.492585634917189e-01, -5.538837412846667e-01, -5.635779113914255e-01, -5.635779113914255e-01, -1.318433352461994e-01, -1.341303189381980e-01, -6.946987027304313e-01, -5.343377144122129e-02, -1.325832525708072e-01, -1.325832525708072e-01, 1.596944389816546e-02, 1.649496584811504e-02, 1.450142512742937e-02, 8.852683070103125e-03, 1.636083035523038e-02, 1.636083035523038e-02, -5.197550559951751e+00, -5.200610838119220e+00, -5.197861569982679e+00, -5.200241145706244e+00, -5.199122605349826e+00, -5.199122605349826e+00, -1.752525655237472e+00, -1.767666896250466e+00, -1.743629922574727e+00, -1.755620034172165e+00, -1.773756465883678e+00, -1.773756465883678e+00, -4.989625294170407e-01, -5.970909023074937e-01, -4.663966471827601e-01, -5.375873446319003e-01, -5.287653347205473e-01, -5.287653347205473e-01, -1.757820991743428e-02, -9.712609683589611e-02, -1.913378053407299e-02, -1.942126978962507e+00, -3.188928059961313e-02, -3.188928059961313e-02, 8.575910919371699e-03, 9.632901633099324e-03, 7.445260961174372e-03, -1.824263240517874e-03, 8.868821991535287e-03, 8.868821991535472e-03, -5.505039389977526e-01, -5.579582195214174e-01, -5.525950882920881e-01, -5.483889386470819e-01, -5.502811094966479e-01, -5.502811094966479e-01, -5.366867742676652e-01, -4.077204050097278e-01, -4.388192756109515e-01, -4.872862558904958e-01, -4.603666055587040e-01, -4.603666055587032e-01, -6.304556528187953e-01, -1.603112227722316e-01, -2.106892428169195e-01, -2.643126417903368e-01, -2.365583767115645e-01, -2.365583767115688e-01, -3.605972894757376e-01, 1.819455915375260e-02, 4.587176837187160e-03, -2.444887216322679e-01, -1.472791988900576e-02, -1.472791988900415e-02, 1.792159054498004e-02, 2.933429665556944e-03, 5.358267907636110e-03, -1.463731910478677e-02, 7.674001787003600e-03, 7.674001787003788e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.233254902022595e-09, -6.233200545541431e-09, -6.232905239097843e-09, -6.233796355698589e-09, -6.233226677777102e-09, -6.233226677777102e-09, -8.173859816248332e-06, -8.173878668805497e-06, -8.173028612219694e-06, -8.167626819203150e-06, -8.173732546828310e-06, -8.173732546828310e-06, -4.009441669251520e-03, -4.001678593273251e-03, -3.759521381858959e-03, -3.686645841290869e-03, -4.006735596852699e-03, -4.006735596852699e-03, 6.078637648427933e-02, 5.909359716751372e-02, -2.319610704462200e-03, -3.321637813775605e-01, 6.079702450620005e-02, 6.079702450620005e-02, 2.133091163710007e+01, 2.118115692406007e+01, 3.340675548283575e+00, 1.684373861569914e+01, 2.205090688044011e+01, 2.205090688044011e+01, -1.594738993608222e-06, -1.590984274138788e-06, -1.594359409792965e-06, -1.591440214024048e-06, -1.592814760102867e-06, -1.592814760102867e-06, -6.275209244324098e-05, -6.146278282353198e-05, -6.291731829557453e-05, -6.188369120917600e-05, -6.174242103042452e-05, -6.174242103042452e-05, -7.082243994933630e-03, 2.180599396940364e-03, -8.820999411240206e-03, 2.740561352280986e-03, -5.564983439818549e-03, -5.564983439818549e-03, -8.969402517446214e-01, -1.697332272693248e-01, -8.011921975280621e-01, -4.422445413259420e-05, -5.932335867519389e-01, -5.932335867519389e-01, 1.793531493898145e+01, 1.771383646437624e+01, 5.219431362137817e+01, 1.045873115480356e+00, 2.642804729243790e+01, 2.642804729243510e+01, -6.508410432454413e-03, 2.261497801703964e-03, -1.732700779953735e-03, -6.479616101951141e-03, -4.030732766451372e-03, -4.030732766451403e-03, 9.102288057007352e-03, -1.212486520846703e-02, -1.066746504766925e-02, -4.355149672137459e-03, -8.431333850159631e-03, -8.431333850159668e-03, 1.708733251206561e-03, -5.729627873872441e-02, -3.091247798731158e-02, -3.704773809728183e-02, -3.476676707555849e-02, -3.476676707555887e-02, -1.686390670738252e-02, 3.238683972753452e+00, 1.420160385156407e+00, -5.314928423742849e-02, -2.028536347113845e-01, -2.028536347113788e-01, 1.548053645405278e+01, 3.352433815972943e+01, 2.782404674435660e+01, 2.861591230394037e-01, 3.922300576081567e+01, 3.922300576093906e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
