
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2c_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.635616828619750e+01, -1.635619645587883e+01, -1.635636321395896e+01, -1.635594325757388e+01, -1.635615739759659e+01, -1.635615739759659e+01, -2.760503305309267e+00, -2.760483748330865e+00, -2.760098353982858e+00, -2.761281949276037e+00, -2.760544958850621e+00, -2.760544958850621e+00, -5.794618597771688e-01, -5.792896672803733e-01, -5.768746000032516e-01, -5.807983234755663e-01, -5.794460205065390e-01, -5.794460205065390e-01, -1.804784468698087e-01, -1.818264195096335e-01, -6.662312979034781e-01, -1.494506277175200e-01, -1.613357646239509e-01, -1.613357646239510e-01, -5.801277703075636e-03, -6.136930508249169e-03, -4.155952018955793e-02, -3.193891176732923e-03, -4.088460415449380e-03, -4.088460415449377e-03, -4.013709157163651e+00, -4.013679214100897e+00, -4.013714044422408e+00, -4.013687502573920e+00, -4.013690389121393e+00, -4.013690389121393e+00, -1.678376528904638e+00, -1.686227178723750e+00, -1.679040943661802e+00, -1.685905459928272e+00, -1.682468119405822e+00, -1.682468119405822e+00, -4.964934660425328e-01, -5.260004673666556e-01, -4.633114867508060e-01, -4.713561985354013e-01, -5.026201394889995e-01, -5.026201394889995e-01, -1.117298927608418e-01, -1.914134708487991e-01, -1.037606734045672e-01, -1.498682100548139e+00, -1.258242708540815e-01, -1.258242708540815e-01, -2.418457682551534e-03, -3.116903349230591e-03, -2.338162270079080e-03, -6.972423871030296e-02, -2.853681039480324e-03, -2.853681039480327e-03, -4.791975011926542e-01, -4.860841927357245e-01, -4.850525652507957e-01, -4.833357157924184e-01, -4.843234175000289e-01, -4.843234175000289e-01, -4.594918061324076e-01, -4.316397298225483e-01, -4.425286039823345e-01, -4.547388354907519e-01, -4.482207279967477e-01, -4.482207279967477e-01, -5.504623701046542e-01, -2.296417367337583e-01, -2.605129943298439e-01, -3.138684578284598e-01, -2.847338959538058e-01, -2.847338959538058e-01, -3.998671959350423e-01, -3.961177159401833e-02, -5.568296855415079e-02, -2.984582950145900e-01, -8.801778388347019e-02, -8.801778388347017e-02, -8.486058766506094e-03, -7.743350164789041e-04, -1.683085490289126e-03, -8.291487955134738e-02, -2.625866006036623e-03, -2.625866006036616e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2c_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.023241482328539e+01, -2.023249734869457e+01, -2.023283901560216e+01, -2.023161170203382e+01, -2.023225838453028e+01, -2.023225838453028e+01, -3.329164925160399e+00, -3.329213604161451e+00, -3.330417602491587e+00, -3.328938413702408e+00, -3.329301353548108e+00, -3.329301353548108e+00, -6.693553328706532e-01, -6.680083372357833e-01, -6.347870673794217e-01, -6.404281797615942e-01, -6.398820433761538e-01, -6.398820433761538e-01, -1.880721965145149e-01, -1.905504459469372e-01, -7.789338236866646e-01, -1.540154943378865e-01, -1.658941056043151e-01, -1.658941056043150e-01, -7.922741354055868e-03, -8.384721207453320e-03, -5.559745817263043e-02, -4.340665734806894e-03, -5.567735525157174e-03, -5.567735525157172e-03, -5.076216572099228e+00, -5.078229667025967e+00, -5.076307618793133e+00, -5.078084926482785e+00, -5.077238829604849e+00, -5.077238829604849e+00, -1.760519660259122e+00, -1.777743980287188e+00, -1.740150637847468e+00, -1.755328293601900e+00, -1.779949768431551e+00, -1.779949768431551e+00, -6.171637073014087e-01, -6.708804031491067e-01, -5.707045885124090e-01, -6.032549698493305e-01, -6.293770943073338e-01, -6.293770943073338e-01, -1.257546201999986e-01, -1.901729249033604e-01, -1.190483955333830e-01, -1.930552094169046e+00, -1.343421907868672e-01, -1.343421907868672e-01, -3.279555722351855e-03, -4.235207372690900e-03, -3.170071981436331e-03, -8.709675331306800e-02, -3.874911863689386e-03, -3.874911863689395e-03, -6.009022517442884e-01, -6.188215968990876e-01, -6.140937158736762e-01, -6.086004010789242e-01, -6.115125893054127e-01, -6.115125893054127e-01, -5.809327281447551e-01, -5.050490245200393e-01, -5.418744064216267e-01, -5.776135633836647e-01, -5.601212364738980e-01, -5.601212364738980e-01, -7.034067306999120e-01, -2.281848308608280e-01, -2.690389195069034e-01, -3.643290049281976e-01, -3.111832498888752e-01, -3.111832498888752e-01, -4.674474474256357e-01, -5.322796157517681e-02, -7.262759017597366e-02, -3.605500826791143e-01, -1.032147139927362e-01, -1.032147139927360e-01, -1.162122315680968e-02, -1.042304462753268e-03, -2.276281693776624e-03, -9.883789541421949e-02, -3.563255534745511e-03, -3.563255534745503e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2c_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.903775362030933e-09, -3.903722575155184e-09, -3.903489748077219e-09, -3.904275102035811e-09, -3.903863308820779e-09, -3.903863308820779e-09, -5.306275775859871e-06, -5.306095285119450e-06, -5.301404780614983e-06, -5.305593037176716e-06, -5.305557237236076e-06, -5.305557237236076e-06, -3.345356328119045e-03, -3.363446089275576e-03, -3.774620299699428e-03, -3.657861596500238e-03, -3.682444432777679e-03, -3.682444432777679e-03, -3.811656222384021e-01, -3.718473739056272e-01, -1.836882911857553e-03, -6.367679586013454e-01, -5.393662814440592e-01, -5.393662814440612e-01, -1.596518825230138e-01, -2.077993333826339e-01, -1.071909896460057e+00, 1.722987209377284e-01, 6.423433594954164e-02, 6.423433594856184e-02, -1.014996398373417e-06, -1.013805991888986e-06, -1.014940662416381e-06, -1.013889500957404e-06, -1.014391075581639e-06, -1.014391075581639e-06, -5.377106781929255e-05, -5.229327859449205e-05, -5.482037958489726e-05, -5.349430028089217e-05, -5.244295557709337e-05, -5.244295557709337e-05, -4.739871795916065e-03, -6.379171000573359e-03, -6.609806457820056e-03, -6.499321990950824e-03, -4.295921638311673e-03, -4.295921638311673e-03, -8.974715827118651e-01, -2.989127416715702e-01, -9.903774466080171e-01, -7.083458093250858e-05, -9.332264897941700e-01, -9.332264897941700e-01, 3.890859335992807e-01, 2.164088724408195e-01, 2.300074118042339e+00, -1.397903976974564e+00, 7.755437561053985e-01, 7.755437561291444e-01, -4.117953586204035e-02, -9.822550227433609e-03, -1.498576686765084e-02, -2.274779010522799e-02, -1.832670928923301e-02, -1.832670928923301e-02, -8.310152121550914e-02, -1.074282203904594e-02, -8.212388114524762e-03, -5.709339503802237e-03, -6.888715804649422e-03, -6.888715804649422e-03, -4.539557933530268e-03, -1.623429056262360e-01, -9.906310798558106e-02, -4.002742967239122e-02, -6.582823833624583e-02, -6.582823833624572e-02, -1.470193861546866e-02, -9.608212787520400e-01, -1.098132927788310e+00, -4.325733025751102e-02, -1.502357755561245e+00, -1.502357755561246e+00, -3.450320634598165e-01, 3.800500526284838e+00, 1.212297731866998e+00, -1.533285551255803e+00, 1.138628210857394e+00, 1.138628210879421e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
