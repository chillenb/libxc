
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1c_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.688281225499344e+01, -1.688283895989257e+01, -1.688300436466468e+01, -1.688260609542447e+01, -1.688280813803168e+01, -1.688280813803168e+01, -2.851581532812264e+00, -2.851558301569683e+00, -2.851090251350545e+00, -2.852435018381215e+00, -2.851620991858112e+00, -2.851620991858112e+00, -5.985753832466976e-01, -5.984401022550027e-01, -5.970862408165116e-01, -6.011039013500556e-01, -5.996666146400694e-01, -5.996666146400694e-01, -1.877499229943063e-01, -1.890304394273367e-01, -6.880305565845158e-01, -1.565103260973423e-01, -1.684593922450223e-01, -1.684593922450223e-01, -6.384071226022000e-03, -6.748908804942949e-03, -4.446526009609859e-02, -3.537250341504361e-03, -4.516734238522676e-03, -4.516734238522674e-03, -4.136295674982843e+00, -4.136166694278025e+00, -4.136296653516203e+00, -4.136182664798991e+00, -4.136226294417483e+00, -4.136226294417483e+00, -1.742496401851813e+00, -1.750372387345621e+00, -1.743838489275352e+00, -1.750727233197589e+00, -1.746270882183959e+00, -1.746270882183959e+00, -5.112232767207997e-01, -5.424811849133244e-01, -4.771458749175776e-01, -4.855700612011871e-01, -5.174253483014375e-01, -5.174253483014375e-01, -1.177476620276732e-01, -1.999750207235160e-01, -1.094627230835367e-01, -1.543659045660654e+00, -1.321704216919666e-01, -1.321704216919666e-01, -2.685210833316693e-03, -3.452775543366044e-03, -2.596681478035317e-03, -7.398399788503186e-02, -3.163692837618687e-03, -3.163692837618690e-03, -4.976539352372809e-01, -5.015027561735342e-01, -5.011537518579217e-01, -5.002596973482952e-01, -5.007997155890743e-01, -5.007997155890743e-01, -4.795483749231166e-01, -4.453829095652179e-01, -4.557999917767323e-01, -4.679433454921764e-01, -4.613611598892922e-01, -4.613611598892922e-01, -5.674480770797825e-01, -2.391971980671755e-01, -2.704271156485481e-01, -3.237666062706759e-01, -2.945737232889715e-01, -2.945737232889715e-01, -4.125503575995976e-01, -4.241541665398019e-02, -5.930789776992761e-02, -3.072978168060750e-01, -9.301172790856442e-02, -9.301172790856441e-02, -9.294734152222582e-03, -8.662941502932689e-04, -1.874093676623036e-03, -8.771013601328988e-02, -2.913302950379135e-03, -2.913302950379127e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1c_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.067103877617281e+01, -2.067112527405958e+01, -2.067148051372236e+01, -2.067019418541879e+01, -2.067087237013875e+01, -2.067087237013875e+01, -3.400242556763710e+00, -3.400295445444019e+00, -3.401598669910387e+00, -3.399959965308161e+00, -3.400385639658877e+00, -3.400385639658877e+00, -6.824068086820727e-01, -6.809877381250836e-01, -6.463157715534211e-01, -6.520899378645632e-01, -6.515465344826016e-01, -6.515465344826016e-01, -1.908640019337409e-01, -1.932544424116068e-01, -7.946346788188640e-01, -1.582527301103205e-01, -1.692654363937487e-01, -1.692654363937486e-01, -8.689515738279556e-03, -9.189293041229533e-03, -5.914825559252039e-02, -4.794779216959766e-03, -6.133040107524099e-03, -6.133040107524102e-03, -5.198877453917307e+00, -5.201146991821388e+00, -5.198979241121727e+00, -5.200982932369899e+00, -5.200030097078586e+00, -5.200030097078586e+00, -1.794941248101269e+00, -1.812414183353598e+00, -1.774448618037670e+00, -1.789816185975356e+00, -1.814603513155588e+00, -1.814603513155588e+00, -6.325415006109975e-01, -6.981753428642463e-01, -5.842820555598706e-01, -6.257901577259852e-01, -6.457507089302471e-01, -6.457507089302471e-01, -1.313034175845583e-01, -1.947319095017255e-01, -1.244995811454407e-01, -1.993930599887431e+00, -1.389834636995222e-01, -1.389834636995222e-01, -3.632887352773531e-03, -4.679452593151268e-03, -3.512256946331913e-03, -9.176983534244916e-02, -4.284924339136128e-03, -4.284924339136137e-03, -6.321352615574464e-01, -6.449221251572582e-01, -6.420432927837048e-01, -6.381494303202001e-01, -6.402635244718844e-01, -6.402635244718844e-01, -6.118099270450106e-01, -5.149704927142741e-01, -5.544080660316713e-01, -5.945838996904614e-01, -5.745392196740164e-01, -5.745392196740164e-01, -7.308547880128241e-01, -2.324281655375343e-01, -2.731452051122579e-01, -3.710112240178614e-01, -3.159843149302910e-01, -3.159843149302910e-01, -4.765339346818655e-01, -5.668099131678613e-02, -7.689766238590313e-02, -3.682178487208754e-01, -1.080278282091985e-01, -1.080278282091984e-01, -1.268021701341489e-02, -1.164581064467294e-03, -2.529663575297356e-03, -1.036307029323282e-01, -3.943566797076518e-03, -3.943566797076513e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1c_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.570998873102986e-09, -4.570941487055147e-09, -4.570681492710030e-09, -4.571535405707590e-09, -4.571088646660620e-09, -4.571088646660620e-09, -6.115641494005996e-06, -6.115469663589787e-06, -6.110897464493585e-06, -6.114275431420745e-06, -6.114857272049002e-06, -6.114857272049002e-06, -3.797962996944325e-03, -3.817375221245409e-03, -4.246423468542500e-03, -4.116588976647224e-03, -4.145508174632424e-03, -4.145508174632424e-03, -4.331709172747047e-01, -4.235877352340379e-01, -2.089601309154126e-03, -7.065678930952496e-01, -6.062819600580227e-01, -6.062819600580245e-01, -4.999505115415951e-01, -5.648949322998580e-01, -1.210139541713503e+00, -1.564218272498537e-01, -3.439186179574773e-01, -3.439186179537733e-01, -1.178634584555251e-06, -1.176995269287861e-06, -1.178559542048864e-06, -1.177112224312112e-06, -1.177802348295660e-06, -1.177802348295660e-06, -5.974711562148771e-05, -5.816795829923246e-05, -6.075955813683492e-05, -5.934646596645406e-05, -5.837822808605977e-05, -5.837822808605977e-05, -5.327448031634461e-03, -4.394470000302467e-03, -7.482168438166983e-03, -4.720841364129792e-03, -4.771531241101784e-03, -4.771531241101784e-03, -9.760403027147446e-01, -3.301509208683113e-01, -1.077822962634700e+00, -6.441256889383890e-05, -1.030173314051031e+00, -1.030173314051031e+00, -5.392123386014904e-02, -1.712961722143821e-01, -1.917445952430701e-01, -1.536691191502824e+00, -3.661377028044917e-01, -3.661377027941668e-01, -2.959713275780739e-02, -6.530943666022747e-03, -1.000383257378027e-02, -1.559920727973862e-02, -1.237533544101282e-02, -1.237533544101282e-02, -6.220498846040880e-02, -1.222863031280267e-02, -9.321159841013367e-03, -5.877287790881565e-03, -7.661503774090319e-03, -7.661503774090319e-03, -3.249416554039611e-03, -1.805033271243863e-01, -1.113232111859131e-01, -4.566516127079680e-02, -7.467947749371849e-02, -7.467947749371834e-02, -1.674064122251578e-02, -1.088256946999300e+00, -1.214647688400073e+00, -4.929224099410108e-02, -1.652235999231721e+00, -1.652235999231731e+00, -6.059127746640670e-01, 1.731892195725072e+00, 2.490152276283835e-01, -1.685830647721299e+00, -3.130984512534886e-01, -3.130984512674561e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
