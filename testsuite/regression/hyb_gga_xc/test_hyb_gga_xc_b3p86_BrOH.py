
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3p86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.688022749045885e+01, -1.688024764682395e+01, -1.688039744542338e+01, -1.688006618300977e+01, -1.688023761973356e+01, -1.688023761973356e+01, -2.840018581009891e+00, -2.839999723139057e+00, -2.839596861345014e+00, -2.840883329445087e+00, -2.840020772167460e+00, -2.840020772167460e+00, -5.943810241563094e-01, -5.941664258944345e-01, -5.899970510437258e-01, -5.937668578237173e-01, -5.943008441856988e-01, -5.943008441856988e-01, -1.905434585664351e-01, -1.920601497299796e-01, -6.941019837579735e-01, -1.545931119643550e-01, -1.909867451565301e-01, -1.909867451565301e-01, -5.336503672774351e-02, -5.414643438448984e-02, -9.509737188395810e-02, -4.569157687902616e-02, -5.362888683242543e-02, -5.362888683242543e-02, -4.109940688722023e+00, -4.109639069260613e+00, -4.109914470852439e+00, -4.109679857650887e+00, -4.109779197414096e+00, -4.109779197414096e+00, -1.722030899227033e+00, -1.730226199041031e+00, -1.722519974715685e+00, -1.728882056935723e+00, -1.727019807595244e+00, -1.727019807595244e+00, -5.083768085336013e-01, -5.394702926161548e-01, -4.851542530474826e-01, -4.968757226745143e-01, -5.248005237119824e-01, -5.248005237119824e-01, -1.316783194028949e-01, -2.011270940058266e-01, -1.287149506143374e-01, -1.532906819524509e+00, -1.393064330216686e-01, -1.393064330216686e-01, -4.478645692856153e-02, -4.637009921510271e-02, -3.556064957842670e-02, -1.032694513218841e-01, -4.218353003919201e-02, -4.218353003919202e-02, -5.128838505557910e-01, -5.118318295235861e-01, -5.121820654513010e-01, -5.124690849665751e-01, -5.123229413790557e-01, -5.123229413790557e-01, -4.976333411730978e-01, -4.525929529610424e-01, -4.651477637869863e-01, -4.770439149443533e-01, -4.708809285614814e-01, -4.708809285614814e-01, -5.637468768726246e-01, -2.398994847290311e-01, -2.724112245486022e-01, -3.276457723384769e-01, -2.981138791740204e-01, -2.981138791740204e-01, -4.126781063507384e-01, -9.620584457601394e-02, -1.030769034696421e-01, -3.080540134459415e-01, -1.130728127892510e-01, -1.130728127892510e-01, -5.885607116546387e-02, -3.119246712236202e-02, -3.668650156411550e-02, -1.081212051025013e-01, -3.773803794270315e-02, -3.773803794270314e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3p86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.035206005793857e+01, -2.035212504754243e+01, -2.035242845499684e+01, -2.035136397097840e+01, -2.035209421860264e+01, -2.035209421860264e+01, -3.369483500047643e+00, -3.369516176584998e+00, -3.370548210774574e+00, -3.369458593587201e+00, -3.369514141194477e+00, -3.369514141194477e+00, -6.988841229240655e-01, -6.978273596485653e-01, -6.693377615557453e-01, -6.747097295536553e-01, -6.985007454786997e-01, -6.985007454786997e-01, -2.160908327304245e-01, -2.193152143758265e-01, -8.364516768774520e-01, -1.518472279022797e-01, -2.170717014846967e-01, -2.170717014846967e-01, -2.443991852888000e-02, -2.500843680822197e-02, -4.184948704198652e-02, -1.657204108011118e-02, -2.475173627097086e-02, -2.475173627097086e-02, -5.106986454146425e+00, -5.109144005060123e+00, -5.107206945360375e+00, -5.108884558099022e+00, -5.108092846462951e+00, -5.108092846462951e+00, -1.845303489411970e+00, -1.860434474146914e+00, -1.836405649268346e+00, -1.848198111273705e+00, -1.867175120832628e+00, -1.867175120832628e+00, -6.337827330143452e-01, -6.967492428200981e-01, -6.033045793554948e-01, -6.372114149662365e-01, -6.580319774045320e-01, -6.580319774045320e-01, -1.018726143588038e-01, -2.072333403009131e-01, -1.022623335249839e-01, -1.985359658360865e+00, -1.260905903462114e-01, -1.260905903462114e-01, -1.613821747366955e-02, -1.746793284660289e-02, -1.336214410355982e-02, -5.714461459147503e-02, -1.596100170584168e-02, -1.596100170584167e-02, -6.674065318785114e-01, -6.617288638475319e-01, -6.637888642312532e-01, -6.653652002318186e-01, -6.645786816871684e-01, -6.645786816871684e-01, -6.479358731949311e-01, -5.478150408456103e-01, -5.771229519601478e-01, -6.044296162447432e-01, -5.905900848311614e-01, -5.905900848311615e-01, -7.274884058032021e-01, -2.595192908045204e-01, -3.088258123669329e-01, -3.959031504481155e-01, -3.501456441796630e-01, -3.501456441796629e-01, -4.984946827013677e-01, -4.118765571814718e-02, -4.958338336818522e-02, -3.802881560968336e-01, -8.247229589248185e-02, -8.247229589248185e-02, -2.746512666184578e-02, -8.015905855429495e-03, -1.150484660989457e-02, -7.979869398329392e-02, -1.399789516689101e-02, -1.399789516689100e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3p86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.392150242483915e-09, -5.392127690585945e-09, -5.391945170791035e-09, -5.392316101870955e-09, -5.392139034090160e-09, -5.392139034090160e-09, -6.417165056259493e-06, -6.417203125751483e-06, -6.417230565942784e-06, -6.411980313705361e-06, -6.417080282601049e-06, -6.417080282601049e-06, -2.802521390687019e-03, -2.812221278655202e-03, -3.062821468431844e-03, -2.980542906229681e-03, -2.806061256316015e-03, -2.806061256316015e-03, -2.486009046489305e-01, -2.380017221535858e-01, -1.469190178392371e-03, -7.561150347396361e-01, -2.453592862106369e-01, -2.453592862106369e-01, -2.066579506034764e+03, -1.819757748118259e+03, -3.285193338608563e+01, -1.494220664796421e+04, -1.896591526950319e+03, -1.896591526950319e+03, -1.421159619456012e-06, -1.420286267974624e-06, -1.421067609729319e-06, -1.420388707090067e-06, -1.420718165061166e-06, -1.420718165061166e-06, -5.109448839026392e-05, -4.996207056306791e-05, -5.132345060343338e-05, -5.043499614262515e-05, -5.002549901331854e-05, -5.002549901331854e-05, -4.500058781567118e-03, -2.917336377102701e-03, -5.435522095976633e-03, -4.316510194362864e-03, -3.904670947912323e-03, -3.904670947912323e-03, -2.257114784635549e+00, -2.387092123000751e-01, -2.381006930743113e+00, -5.259290861525752e-05, -1.354359230683057e+00, -1.354359230683057e+00, -1.684551165873378e+04, -1.149539361263127e+04, -3.548463962754200e+04, -1.199709595686926e+01, -1.677559765957909e+04, -1.677559765957909e+04, -2.888955677606613e-03, -3.519565176895767e-03, -3.355568509361148e-03, -3.193252724828856e-03, -3.279436821369156e-03, -3.279436821369156e-03, -3.043094760962285e-03, -7.594106287008638e-03, -6.441539569684624e-03, -5.432427665465309e-03, -5.943943154661111e-03, -5.943943154661109e-03, -2.488837379155595e-03, -1.090987948568074e-01, -6.123508888534421e-02, -2.673893528885759e-02, -4.059310051649675e-02, -4.059310051649678e-02, -1.091223533028115e-02, -3.858635124707844e+01, -1.624772195507845e+01, -3.267930293470193e-02, -4.868982327642568e+00, -4.868982327642568e+00, -1.215125936694727e+03, -5.577978533607929e+05, -8.401653453201659e+04, -5.836566045299560e+00, -2.978831312029281e+04, -2.978831312029292e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
