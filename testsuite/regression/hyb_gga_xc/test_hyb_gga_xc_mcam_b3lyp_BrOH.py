
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mcam_b3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.710323937906657e+01, -1.710325842329070e+01, -1.710340625178977e+01, -1.710309314148918e+01, -1.710324889683068e+01, -1.710324889683068e+01, -2.858166291505918e+00, -2.858143523122918e+00, -2.857634931347787e+00, -2.859113423025330e+00, -2.858166674680611e+00, -2.858166674680611e+00, -5.721346566754383e-01, -5.720187932133836e-01, -5.700733349239876e-01, -5.738892203617033e-01, -5.720900720118843e-01, -5.720900720118843e-01, -1.606965042131375e-01, -1.621594622191226e-01, -6.715015977476597e-01, -1.241858347374378e-01, -1.611271624472592e-01, -1.611271624472592e-01, -4.186616277486759e-02, -4.242414786206441e-02, -7.204644769102234e-02, -3.691055168982262e-02, -4.201265200014245e-02, -4.201265200014245e-02, -4.132649370058004e+00, -4.132134401784004e+00, -4.132601946538087e+00, -4.132201444775816e+00, -4.132377843148079e+00, -4.132377843148079e+00, -1.733015497538998e+00, -1.741226152333521e+00, -1.733708257293768e+00, -1.740096692301528e+00, -1.737695470965670e+00, -1.737695470965670e+00, -4.761979911582112e-01, -4.983849410182165e-01, -4.529853143725635e-01, -4.577630701676107e-01, -4.917782076647500e-01, -4.917782076647500e-01, -9.883708091309319e-02, -1.682471516516601e-01, -9.771151778197397e-02, -1.500430282126981e+00, -1.091159544045849e-01, -1.091159544045849e-01, -3.619810890673638e-02, -3.730614823377963e-02, -2.853168031568520e-02, -7.746911786753476e-02, -3.388464435897071e-02, -3.388464435897072e-02, -4.681675120758315e-01, -4.700809474966587e-01, -4.694374460113092e-01, -4.689072707586671e-01, -4.691755067318068e-01, -4.691755067318068e-01, -4.524408157401220e-01, -4.235146776016851e-01, -4.329614569066207e-01, -4.409122177367424e-01, -4.368431905752950e-01, -4.368431905752950e-01, -5.232287061315928e-01, -2.082354301867356e-01, -2.419428424624725e-01, -2.959100336058586e-01, -2.675009161078751e-01, -2.675009161078750e-01, -3.827852560905441e-01, -7.248459352157313e-02, -7.617212832521278e-02, -2.739854454692916e-01, -8.622364456028273e-02, -8.622364456028271e-02, -4.612860295678663e-02, -2.594498046841149e-02, -3.002610663697861e-02, -8.348140259518706e-02, -3.034852176922794e-02, -3.034852176922794e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mcam_b3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.048190453440666e+01, -2.048197121455419e+01, -2.048228048400971e+01, -2.048118834699372e+01, -2.048193960065153e+01, -2.048193960065153e+01, -3.338477010256431e+00, -3.338502403534481e+00, -3.339336357090018e+00, -3.338598215684077e+00, -3.338504106201083e+00, -3.338504106201083e+00, -6.558601438595898e-01, -6.551004686873769e-01, -6.363584642271064e-01, -6.412089370322117e-01, -6.555832725295792e-01, -6.555832725295792e-01, -1.861408334270124e-01, -1.880091889745794e-01, -7.864155421317799e-01, -1.449363992353092e-01, -1.866865178988802e-01, -1.866865178988802e-01, -1.686353288753963e-02, -1.736561775305944e-02, -4.862597930797619e-02, -1.122549060542683e-02, -1.719428229955308e-02, -1.719428229955308e-02, -5.073417846953616e+00, -5.075356415465698e+00, -5.073616476498103e+00, -5.075123801894059e+00, -5.074411046367797e+00, -5.074411046367797e+00, -1.841504448251757e+00, -1.855305103789478e+00, -1.834793979333709e+00, -1.845525728346354e+00, -1.859676813032844e+00, -1.859676813032844e+00, -5.811648726250040e-01, -6.440676476990668e-01, -5.514086793124169e-01, -5.843963829534593e-01, -6.046028119885420e-01, -6.046028119885420e-01, -1.152812067734606e-01, -1.984159038217475e-01, -1.118107387498150e-01, -1.923700446728771e+00, -1.264702561017773e-01, -1.264702561017773e-01, -1.093305506202702e-02, -1.178440797397224e-02, -8.958428005983099e-03, -6.904477660126421e-02, -1.073031871033523e-02, -1.073031871033522e-02, -6.177052488345937e-01, -6.098640578541465e-01, -6.125503237178153e-01, -6.147146451611459e-01, -6.136216011673479e-01, -6.136216011673479e-01, -5.989397842732901e-01, -5.006044604136530e-01, -5.258835779481505e-01, -5.515558032380098e-01, -5.382447416940562e-01, -5.382447416940562e-01, -6.741435688390810e-01, -2.415396792811996e-01, -2.793410885801862e-01, -3.513102605367847e-01, -3.119123324531636e-01, -3.119123324531635e-01, -4.523159335358613e-01, -4.561567208622149e-02, -6.262946006118603e-02, -3.328866866632474e-01, -8.988539022497218e-02, -8.988539022497215e-02, -1.911853383249756e-02, -5.726340007504122e-03, -7.918828064182183e-03, -8.396696936549737e-02, -9.401414233112632e-03, -9.401414233112630e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mcam_b3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.848414164667460e-09, -5.848389614777736e-09, -5.848191859808672e-09, -5.848595647819574e-09, -5.848401955432311e-09, -5.848401955432311e-09, -7.458374223057408e-06, -7.458622876317213e-06, -7.464245958836952e-06, -7.448314237431091e-06, -7.458376413847468e-06, -7.458376413847468e-06, -3.735242575556605e-03, -3.733027640180747e-03, -3.638432452420590e-03, -3.558979453772401e-03, -3.734514953333756e-03, -3.734514953333756e-03, -2.304193197918572e-01, -2.316900620489684e-01, -2.125120354532719e-03, -2.718674823626848e-01, -2.310086328986221e-01, -2.310086328986221e-01, -1.735591770723830e+03, -1.522310048146066e+03, -1.493274649335246e+01, -1.285953693928112e+04, -1.585710650940834e+03, -1.585710650940834e+03, -1.732321077721774e-06, -1.733557380556849e-06, -1.732437604719619e-06, -1.733399002088754e-06, -1.732968078382548e-06, -1.732968078382548e-06, -5.415112854809316e-05, -5.313938355558181e-05, -5.409948690422285e-05, -5.331006183314349e-05, -5.353225627875724e-05, -5.353225627875724e-05, -8.030419954870541e-03, -7.597782736404711e-03, -9.595266301841456e-03, -1.015821158089056e-02, -7.224884189441515e-03, -7.224884189441515e-03, -2.490260507826622e-01, -1.164520934385057e-01, -3.681506278429736e-01, -1.022241653604089e-04, -3.344628567618982e-01, -3.344628567618982e-01, -1.449780788206197e+04, -9.887727499822455e+03, -3.044426313971190e+04, -3.474794462156490e+00, -1.441857924753750e+04, -1.441857924753751e+04, -1.025160619671604e-02, -9.569018668780913e-03, -9.776936826072212e-03, -9.961906836051913e-03, -9.866377164899473e-03, -9.866377164899473e-03, -1.182554796089949e-02, -1.152987760030249e-02, -1.125982131900963e-02, -1.117362602873980e-02, -1.121199279006742e-02, -1.121199279006742e-02, -6.275011682779754e-03, -7.963075008747839e-02, -6.162277546643338e-02, -4.002619390463782e-02, -5.092049524169999e-02, -5.092049524170000e-02, -1.641121678025977e-02, -1.880615975841815e+01, -4.987953186982780e+00, -5.656774965441572e-02, -1.163974361527329e+00, -1.163974361527332e+00, -1.017475884683052e+03, -4.803253827918377e+05, -7.234131451892904e+04, -1.754557009316245e+00, -2.559444700339432e+04, -2.559444700339442e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
