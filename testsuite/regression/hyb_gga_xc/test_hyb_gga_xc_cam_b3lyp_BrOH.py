
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_b3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.704837655791082e+01, -1.704839571017179e+01, -1.704854386340170e+01, -1.704822898705297e+01, -1.704838613396434e+01, -1.704838613396434e+01, -2.802765798180928e+00, -2.802743900281053e+00, -2.802259169299616e+00, -2.803696275277352e+00, -2.802766623890673e+00, -2.802766623890673e+00, -5.183053728424931e-01, -5.181113702984946e-01, -5.138384537408879e-01, -5.177404010277564e-01, -5.182327331923638e-01, -5.182327331923638e-01, -1.167798724677230e-01, -1.184785284892406e-01, -6.187911669356920e-01, -8.020880921349519e-02, -1.172887339419537e-01, -1.172887339419537e-01, -2.473698558082226e-02, -2.509928442136706e-02, -4.148693647254156e-02, -2.139821507326016e-02, -2.485613213052720e-02, -2.485613213052720e-02, -4.079536459204258e+00, -4.079046063337398e+00, -4.079491491738300e+00, -4.079110097520593e+00, -4.079277617462040e+00, -4.079277617462040e+00, -1.671845592069721e+00, -1.680266701522369e+00, -1.672220159543156e+00, -1.678777032529894e+00, -1.677072302749795e+00, -1.677072302749795e+00, -4.275175196183058e-01, -4.524609731356210e-01, -4.044069065847836e-01, -4.117350147574939e-01, -4.433681910237858e-01, -4.433681910237858e-01, -5.681822553484478e-02, -1.183585795303053e-01, -5.676654200329179e-02, -1.450522588187137e+00, -6.691275425078010e-02, -6.691275425078010e-02, -2.097753542305238e-02, -2.167483098758293e-02, -1.657656101290040e-02, -4.348470033765425e-02, -1.969240907316322e-02, -1.969240907316322e-02, -4.234833873419219e-01, -4.246520038561882e-01, -4.242702586855563e-01, -4.239463103375150e-01, -4.241110085571480e-01, -4.241110085571480e-01, -4.080878199803596e-01, -3.732565822641619e-01, -3.844909794416222e-01, -3.940620104134905e-01, -3.891956490996448e-01, -3.891956490996448e-01, -4.769154735560882e-01, -1.569792118695303e-01, -1.916056580435325e-01, -2.482211750873667e-01, -2.185871044411777e-01, -2.185871044411776e-01, -3.330243937629377e-01, -4.181830129693666e-02, -4.243732650305873e-02, -2.288323552215864e-01, -4.946958822293669e-02, -4.946958822293666e-02, -2.731330849114949e-02, -1.482688104372851e-02, -1.728332229384250e-02, -4.837369947757974e-02, -1.761677389621146e-02, -1.761677389621145e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_b3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.043817667133153e+01, -2.043824322463114e+01, -2.043855211122489e+01, -2.043746204773888e+01, -2.043821166915114e+01, -2.043821166915114e+01, -3.296833866370195e+00, -3.296858315627105e+00, -3.297666308297376e+00, -3.296972814569037e+00, -3.296860475102570e+00, -3.296860475102570e+00, -6.191959103635950e-01, -6.185108357762160e-01, -6.018485193466463e-01, -6.065816508493145e-01, -6.189458962652261e-01, -6.189458962652261e-01, -1.568427666995538e-01, -1.584863854321263e-01, -7.474714273136126e-01, -1.186405437579088e-01, -1.573198434889192e-01, -1.573198434889192e-01, -1.095593430705859e-02, -1.130041127091459e-02, -3.333684401347790e-02, -7.072837363052184e-03, -1.118968528559970e-02, -1.118968528559970e-02, -5.028539661844728e+00, -5.030447712869655e+00, -5.028735241680629e+00, -5.030218837006980e+00, -5.029517113934318e+00, -5.029517113934318e+00, -1.806498573371352e+00, -1.820105850754643e+00, -1.800060273803933e+00, -1.810639155896455e+00, -1.824188667388709e+00, -1.824188667388709e+00, -5.407934908496040e-01, -5.995711594250068e-01, -5.114641440216567e-01, -5.411017828942812e-01, -5.635667209306847e-01, -5.635667209306847e-01, -9.143432810195608e-02, -1.702559665156001e-01, -8.825337197845720e-02, -1.876951978982531e+00, -1.015365521018758e-01, -1.015365521018758e-01, -6.883726188836206e-03, -7.457543782784993e-03, -5.673887545575136e-03, -5.055687211273632e-02, -6.796379883964456e-03, -6.796379883964451e-03, -5.720801368916700e-01, -5.653588856946501e-01, -5.676622083050046e-01, -5.695172105241481e-01, -5.685803733773925e-01, -5.685803733773925e-01, -5.532442636056497e-01, -4.631874624096275e-01, -4.863255793639583e-01, -5.098313302082751e-01, -4.976228812328194e-01, -4.976228812328195e-01, -6.296478983913322e-01, -2.122371922280931e-01, -2.482342032640475e-01, -3.157781621687808e-01, -2.787186001238361e-01, -2.787186001238360e-01, -4.155179835014335e-01, -3.079563493575106e-02, -4.498136491923886e-02, -2.960386361488462e-01, -6.868499223660263e-02, -6.868499223660259e-02, -1.244816982906712e-02, -3.471000144429370e-03, -4.908557965985998e-03, -6.349898016992521e-02, -5.942929160669701e-03, -5.942929160669699e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_b3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.820059166689725e-09, -5.820034823882279e-09, -5.819838443627611e-09, -5.820238831482689e-09, -5.820047062893801e-09, -5.820047062893801e-09, -7.231703505038199e-06, -7.231946467298661e-06, -7.237459429377258e-06, -7.221955918404534e-06, -7.231707568342423e-06, -7.231707568342423e-06, -3.073782248616791e-03, -3.070444889249930e-03, -2.949550013538886e-03, -2.892322442155167e-03, -3.072635483263176e-03, -3.072635483263176e-03, -5.399921891833465e-02, -6.024995009784455e-02, -1.824274613361075e-03, 1.559366149320337e-01, -5.603791210506191e-02, -5.603791210506191e-02, -9.797683917946911e+02, -8.593662629285370e+02, -4.870379480575691e+00, -7.259416022442079e+03, -8.951572532888912e+02, -8.951572532888912e+02, -1.697935492579619e-06, -1.699159311813472e-06, -1.698050945368493e-06, -1.699002633820963e-06, -1.698575823401796e-06, -1.698575823401796e-06, -5.103228667516814e-05, -5.010621389943897e-05, -5.096686031421672e-05, -5.024490469193428e-05, -5.048874053313139e-05, -5.048874053313139e-05, -6.480140357184575e-03, -6.320654006697687e-03, -7.629629584697634e-03, -8.258393083681596e-03, -5.895106089407772e-03, -5.895106089407772e-03, 7.181824755125722e-01, 1.535420390847468e-02, 6.830862556362050e-01, -9.673446399439537e-05, 3.569798825733602e-01, 3.569798825733602e-01, -8.184246392898752e+03, -5.581781664453557e+03, -1.718627758944148e+04, 6.050797369969895e-01, -8.139520554431938e+03, -8.139520554431941e+03, -8.466800634338858e-03, -7.869340303917888e-03, -8.052269154645054e-03, -8.214279708826770e-03, -8.130685233643980e-03, -8.130685233643980e-03, -9.703961697345151e-03, -8.822466646216614e-03, -8.825911976335671e-03, -8.927821936448541e-03, -8.875270737621538e-03, -8.875270737621538e-03, -5.268222345218296e-03, -2.078898104298840e-02, -2.895692807595886e-02, -2.606024035570484e-02, -2.933065996972862e-02, -2.933065996972862e-02, -1.207847672381611e-02, -7.027637747214534e+00, 1.693817660768764e-01, -3.664825308040015e-02, 8.413591182827344e-01, 8.413591182827329e-01, -5.743714210782340e+02, -2.711514257700440e+05, -4.083783884379952e+04, 6.821220104239832e-01, -1.444847815660839e+04, -1.444847815660844e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
