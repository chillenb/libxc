
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3pw91_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.683587831629022e+01, -1.683590264402121e+01, -1.683606118304148e+01, -1.683569819756889e+01, -1.683588123187885e+01, -1.683588123187885e+01, -2.834720333729567e+00, -2.834696929197209e+00, -2.834224203569823e+00, -2.835574906203581e+00, -2.834759567050775e+00, -2.834759567050775e+00, -5.920485051164376e-01, -5.918178417722768e-01, -5.875166674958590e-01, -5.916097170298887e-01, -5.918053683868265e-01, -5.918053683868265e-01, -1.834010217544677e-01, -1.846345766560238e-01, -6.816121812402980e-01, -1.575210935391585e-01, -1.759396907740853e-01, -1.759396907740852e-01, -4.792051675377022e-02, -4.797085926306483e-02, -8.737508183399034e-02, -4.362807502084655e-02, -4.436776615320347e-02, -4.436776615320344e-02, -4.106798959206098e+00, -4.106512729892981e+00, -4.106793435541872e+00, -4.106540621638042e+00, -4.106649611800944e+00, -4.106649611800944e+00, -1.715570248428792e+00, -1.724193608004393e+00, -1.714885130461888e+00, -1.722484061655355e+00, -1.720702678933490e+00, -1.720702678933490e+00, -5.089304545222491e-01, -5.408470869108126e-01, -4.751575314027241e-01, -4.843571088350805e-01, -5.156958067710403e-01, -5.156958067710403e-01, -1.333997376453273e-01, -1.962263790897524e-01, -1.275612737466265e-01, -1.529606414976001e+00, -1.387417834315943e-01, -1.387417834315943e-01, -3.933550692129900e-02, -4.203927646573446e-02, -2.757906882806625e-02, -1.028877070690668e-01, -3.359260938145113e-02, -3.359260938145115e-02, -5.020236917347195e-01, -5.004912324569840e-01, -5.009893342597299e-01, -5.014326129050930e-01, -5.012065786852896e-01, -5.012065786852896e-01, -4.892376962118877e-01, -4.412650847835191e-01, -4.536359534300188e-01, -4.666203035171440e-01, -4.597967650833941e-01, -4.597967650833941e-01, -5.653061856367720e-01, -2.320302207116260e-01, -2.629432771815026e-01, -3.207459989419070e-01, -2.889862344252083e-01, -2.889862344252083e-01, -4.087853101006352e-01, -8.725823583867076e-02, -9.775510142337053e-02, -3.063577459154696e-01, -1.116922731136896e-01, -1.116922731136896e-01, -5.411762487616641e-02, -2.421051900138052e-02, -3.174006856803192e-02, -1.086497417689149e-01, -3.157244361298620e-02, -3.157244361298619e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3pw91_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.040883963866835e+01, -2.040881538888756e+01, -2.040892610785901e+01, -2.040887848794711e+01, -2.040918876923076e+01, -2.040925719770507e+01, -2.040820879099102e+01, -2.040801240098708e+01, -2.040888889584536e+01, -2.040850137312033e+01, -2.040888889584536e+01, -2.040850137312033e+01, -3.378373854813787e+00, -3.378472918147901e+00, -3.378405158872976e+00, -3.378507193326834e+00, -3.379194328090064e+00, -3.379395911522251e+00, -3.378360323577380e+00, -3.378560129513215e+00, -3.377802321071811e+00, -3.379280913998699e+00, -3.377802321071811e+00, -3.379280913998699e+00, -6.945889846685176e-01, -6.979235790688517e-01, -6.930645490251737e-01, -6.971445754868021e-01, -6.693858215108244e-01, -6.640818315412744e-01, -6.714986195417836e-01, -6.732089694931443e-01, -6.971582545717628e-01, -6.456176360018258e-01, -6.971582545717628e-01, -6.456176360018258e-01, -1.830290364397693e-01, -1.876216608697675e-01, -1.866723930483789e-01, -1.919828611564373e-01, -7.927190006467928e-01, -8.192803472324652e-01, -1.331253557537894e-01, -1.343674773932142e-01, -1.706416719116431e-01, -1.166873351257739e-01, -1.706416719116431e-01, -1.166873351257739e-01, -1.425900645765165e-02, -1.462857909410181e-02, -1.455506325914158e-02, -1.497650769214880e-02, -4.439968089054708e-02, -4.559713304323167e-02, -1.102484826170505e-02, -1.099535924346663e-02, -1.305527389445720e-02, -9.455471497964102e-03, -1.305527389445718e-02, -9.455471497964095e-03, -5.112119510210744e+00, -5.110923149122133e+00, -5.114183652422382e+00, -5.112922234443690e+00, -5.112232635676532e+00, -5.110993330864374e+00, -5.114007391120215e+00, -5.112805629772264e+00, -5.113175780051969e+00, -5.111927868890729e+00, -5.113175780051969e+00, -5.111927868890729e+00, -1.865400511435801e+00, -1.865311272411070e+00, -1.880714400269530e+00, -1.880215286381157e+00, -1.849109382254045e+00, -1.853167942736844e+00, -1.862344488328437e+00, -1.866542341548920e+00, -1.885709704654725e+00, -1.875572864179107e+00, -1.885709704654725e+00, -1.875572864179107e+00, -6.347672359418089e-01, -6.336306511575341e-01, -7.006474947217611e-01, -7.011426294340982e-01, -5.800759583035010e-01, -5.963527253770028e-01, -6.176720811670828e-01, -6.313681141889167e-01, -6.574960802790927e-01, -6.334221497207576e-01, -6.574960802790927e-01, -6.334221497207577e-01, -9.345877615261088e-02, -9.391062883059989e-02, -1.758833888372164e-01, -1.764881250056711e-01, -8.604988947058516e-02, -8.883130455318690e-02, -1.981988263075151e+00, -1.981264256656385e+00, -1.070456882325743e-01, -1.102133999527099e-01, -1.070456882325743e-01, -1.102133999527099e-01, -9.233418368518688e-03, -9.541278544236914e-03, -1.058319147680988e-02, -1.074992961196378e-02, -7.404580194562888e-03, -7.469785354690604e-03, -6.279593215770327e-02, -6.314702397718344e-02, -8.337932696627675e-03, -9.409964603304555e-03, -8.337932696627689e-03, -9.409964603304550e-03, -6.536599372354263e-01, -6.555167549578474e-01, -6.479541214781166e-01, -6.498628452188145e-01, -6.501090315065277e-01, -6.520190606860012e-01, -6.517968785847149e-01, -6.536556573924809e-01, -6.509686206047557e-01, -6.528525270734301e-01, -6.509686206047557e-01, -6.528525270734301e-01, -6.378242228109925e-01, -6.392909126734950e-01, -5.261545612905183e-01, -5.279649446638877e-01, -5.589332314857023e-01, -5.609379191722781e-01, -5.919813676704951e-01, -5.935210611340722e-01, -5.753507983343483e-01, -5.769348521125721e-01, -5.753507983343483e-01, -5.769348521125721e-01, -7.310130301876816e-01, -7.322919334877112e-01, -2.256992221597520e-01, -2.266169859236172e-01, -2.775940581844121e-01, -2.796222357247356e-01, -3.826655088434611e-01, -3.841275086086918e-01, -3.279577348042099e-01, -3.279643840156211e-01, -3.279577348042100e-01, -3.279643840156212e-01, -4.873833768915545e-01, -4.900574918733318e-01, -4.392002491473784e-02, -4.406393484851283e-02, -5.406326360443720e-02, -5.490775150909957e-02, -3.755071903334349e-01, -3.793809540708090e-01, -7.489581803206369e-02, -7.661798449693059e-02, -7.489581803206367e-02, -7.661798449693058e-02, -1.782556992232046e-02, -1.805632743582363e-02, -5.005579231763370e-03, -4.591803273849499e-03, -7.219671010710542e-03, -7.311526185356639e-03, -7.156120634871715e-02, -7.229444211241362e-02, -7.405090089940315e-03, -8.969219596239073e-03, -7.405090089940326e-03, -8.969219596239055e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3pw91_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.032886343080464e-08, 2.631854754392256e-10, -1.032892339756142e-08, -1.032880249262247e-08, 2.631895866484782e-10, -1.032887852075513e-08, -1.032848306395859e-08, 2.631942823238655e-10, -1.032845785594658e-08, -1.032918178702226e-08, 2.631334096077467e-10, -1.032933905088104e-08, -1.032884393345784e-08, 2.631672314016183e-10, -1.032888736522997e-08, -1.032884393345784e-08, 2.631672314016183e-10, -1.032888736522997e-08, -1.305563708530986e-05, 1.524569791863723e-06, -1.306083693670661e-05, -1.305587840141595e-05, 1.524854649863352e-06, -1.306146863142520e-05, -1.306592444558222e-05, 1.531279918613775e-06, -1.306908353498501e-05, -1.304032455261861e-05, 1.518722407064937e-06, -1.304443081711336e-05, -1.306304981507933e-05, 1.524730810906265e-06, -1.305198745070977e-05, -1.306304981507933e-05, 1.524730810906265e-06, -1.305198745070977e-05, -7.298234513128568e-03, 2.683886860772905e-03, -7.306405035380374e-03, -7.311291302382002e-03, 2.666592373995982e-03, -7.320842670712735e-03, -7.609826572881663e-03, 2.231147749365712e-03, -7.608186805449397e-03, -7.391018464873969e-03, 2.176757890714110e-03, -7.395576127775634e-03, -7.498676607405942e-03, 2.207136453503048e-03, -7.315446798386573e-03, -7.498676607405942e-03, 2.207136453503048e-03, -7.315446798386573e-03, -1.028453405958715e+00, 2.675350418124410e-01, -9.158624379837706e-01, -9.999994144832191e-01, 2.801661866009576e-01, -8.735195908106251e-01, -4.287843264590562e-03, 1.436198076183433e-03, -3.963333120715232e-03, -2.183133663666519e+00, 2.062854905649676e-01, -2.083020045024758e+00, -9.057767787049720e-01, 1.705737505640955e-01, -5.508676317543211e+00, -9.057767787049712e-01, 1.705737505640960e-01, -5.508676317543215e+00, -1.601232697821127e+04, 6.976816572929194e-03, -1.341327244617415e+04, -1.420990569298691e+04, 8.212998077181156e-03, -1.164774395852485e+04, -9.225013850787202e+01, 4.473773563134211e-02, -7.942304005819335e+01, -6.750537349077129e+04, 2.461756828256827e-03, -7.031007629964597e+04, -2.221426980321058e+04, 3.621947006379986e-03, -1.460208795399945e+05, -2.221426980321061e+04, 3.621947005282611e-03, -1.460208795399945e+05, -2.959811507825329e-06, 3.846791876807274e-07, -2.962645317500084e-06, -2.960856291537850e-06, 3.871549867169914e-07, -2.963615939701925e-06, -2.959855685366988e-06, 3.847778948381879e-07, -2.962648051353882e-06, -2.960721918318906e-06, 3.869632657911983e-07, -2.963561909907717e-06, -2.960375921081561e-06, 3.859383264909262e-07, -2.963128497863189e-06, -2.960375921081561e-06, 3.859383264909262e-07, -2.963128497863189e-06, -1.003019594808695e-04, 9.976058846257291e-06, -1.003208699439338e-04, -9.815037195727324e-05, 9.895885464105219e-06, -9.824233502221808e-05, -1.007613034684486e-04, 9.617096636565330e-06, -1.007214059531144e-04, -9.889840339670589e-05, 9.549544430134611e-06, -9.881541690665790e-05, -9.875625588944268e-05, 1.011057233366589e-05, -9.911210761240172e-05, -9.875625588944268e-05, 1.011057233366589e-05, -9.911210761240172e-05, -1.326073810915059e-02, 8.638770141011970e-03, -1.345985446570062e-02, -1.013842257694614e-02, 1.131836157367290e-02, -1.016267484193669e-02, -1.923959042354717e-02, 1.127557166218103e-02, -1.638042953760843e-02, -1.790597298349890e-02, 1.719131855459492e-02, -1.456797087828709e-02, -1.117843883804639e-02, 8.630054784186944e-03, -1.450445325705364e-02, -1.117843883804640e-02, 8.630054784186943e-03, -1.450445325705365e-02, -5.726891175019740e+00, 1.166140442384365e-01, -5.621578808895625e+00, -8.156976708333995e-01, 1.040845131056493e-01, -8.028176942452970e-01, -7.757748811861345e+00, 1.177554056090019e-01, -6.697874726814061e+00, -1.498614665508084e-04, 8.676041836822779e-05, -1.502434047841013e-04, -4.150750318714319e+00, 2.211984867257730e-01, -3.864706511048158e+00, -4.150750318714319e+00, 2.211984867257730e-01, -3.864706511048158e+00, -1.699411077667808e+05, 2.395133575854821e-03, -1.460796235580892e+05, -7.954666578992261e+04, 3.026072888213717e-03, -7.449506145028399e+04, -2.990717696716529e+05, 3.008056361628062e-02, -2.612737780756478e+05, -2.384298999232989e+01, 1.123502923877156e-01, -2.316757385864590e+01, -2.313967103935780e+05, 1.153016403337206e-02, -9.240488226447253e+04, -2.313967103935777e+05, 1.153016402149749e-02, -9.240488226447252e+04, -1.402431135829229e-02, 1.947205808238306e-02, -1.369968454039775e-02, -1.413286723137441e-02, 1.647856848840045e-02, -1.383499269211314e-02, -1.403739560035723e-02, 1.748826963882371e-02, -1.373430004599252e-02, -1.398929172520460e-02, 1.838153252416446e-02, -1.367255180381926e-02, -1.400789112807827e-02, 1.793154557055355e-02, -1.369808214421699e-02, -1.400789112807827e-02, 1.793154557055355e-02, -1.369808214421699e-02, -1.569998142944261e-02, 2.337025111261517e-02, -1.534862304300988e-02, -2.428129847197445e-02, 1.192368977668423e-02, -2.388575607684716e-02, -2.157614904562670e-02, 1.353786278956722e-02, -2.120943721284808e-02, -1.911379786482531e-02, 1.604520422926629e-02, -1.878106172579242e-02, -2.037427675066071e-02, 1.467622004941244e-02, -2.001597531282573e-02, -2.037427675066071e-02, 1.467622004941244e-02, -2.001597531282573e-02, -8.487621588455582e-03, 8.934960888183173e-03, -8.468008488386728e-03, -3.796889039325350e-01, 7.533749916729192e-02, -3.729228003676369e-01, -2.146581504522477e-01, 6.572442170062726e-02, -2.086365595746575e-01, -8.966643650701983e-02, 5.291792792361091e-02, -8.755293576324778e-02, -1.378594557511819e-01, 6.190666086789175e-02, -1.386513975297833e-01, -1.378594557511820e-01, 6.190666086789179e-02, -1.386513975297834e-01, -3.329879626718756e-02, 1.716801915352451e-02, -3.248731204525205e-02, -9.463233210575467e+01, 3.667699013988061e-02, -9.288478463748679e+01, -4.144417134320334e+01, 5.727588140932804e-02, -3.811734204655809e+01, -1.100677875420161e-01, 8.246028212985558e-02, -1.030047038257945e-01, -1.333066851561095e+01, 1.982463815151670e-01, -1.221546597556707e+01, -1.333066851561094e+01, 1.982463815151691e-01, -1.221546597556708e+01, -5.373091047520505e+03, 8.751405840155102e-03, -4.881145745523017e+03, -5.023960911163630e+06, 3.258646630697342e-03, -5.846008398957365e+06, -5.637392031106855e+05, 4.090413211226247e-03, -4.801493218128753e+05, -1.551268363126029e+01, 1.814490007162881e-01, -1.475383418766486e+01, -3.312813728332773e+05, 1.470748610493714e-02, -1.199647017237935e+05, -3.312813728332781e+05, 1.470748609914269e-02, -1.199647017237939e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
