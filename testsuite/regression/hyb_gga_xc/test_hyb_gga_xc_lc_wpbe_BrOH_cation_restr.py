
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.075402666130470e+01, -2.075405148639501e+01, -2.075423367734622e+01, -2.075386285927718e+01, -2.075404694178436e+01, -2.075404694178436e+01, -3.294994409209211e+00, -3.294956143367682e+00, -3.294157138666849e+00, -3.296207209915889e+00, -3.295032357575322e+00, -3.295032357575322e+00, -5.148282749895371e-01, -5.145745857359226e-01, -5.097224903773155e-01, -5.147290262932374e-01, -5.131208933054574e-01, -5.131208933054574e-01, -5.851056957834731e-02, -5.986781418613720e-02, -6.229535781144206e-01, -3.431214864578562e-02, -4.319199176766971e-02, -4.319199176766971e-02, -2.168928294965325e-06, -2.533688203031629e-06, -6.056920667687769e-04, -4.133901513448786e-07, -8.230267786145440e-07, -8.230267786145440e-07, -4.858075082688669e+00, -4.857566777385768e+00, -4.858061853042968e+00, -4.857612912291075e+00, -4.857811343583757e+00, -4.857811343583757e+00, -1.920482298041751e+00, -1.931128855542103e+00, -1.919990795833322e+00, -1.929443991703714e+00, -1.926540971523298e+00, -1.926540971523298e+00, -4.157098578466744e-01, -4.587484035621335e-01, -3.756655085691512e-01, -3.913649578405616e-01, -4.234627106393761e-01, -4.234627106393761e-01, -1.370667808197224e-02, -6.500681944860680e-02, -1.084904083323062e-02, -1.662750494041738e+00, -2.056614330950325e-02, -2.056614330950325e-02, -1.895049663799902e-07, -3.861845979298780e-07, -1.728911232793964e-07, -3.024608877240027e-03, -3.021560941766824e-07, -3.021560941766824e-07, -4.166264437293656e-01, -4.118381539765306e-01, -4.133735131961560e-01, -4.147581912761647e-01, -4.140513653412277e-01, -4.140513653412277e-01, -4.028410280233758e-01, -3.352364468586772e-01, -3.507066257857571e-01, -3.681182484414472e-01, -3.587867760770057e-01, -3.587867760770057e-01, -4.871005498917729e-01, -9.971706782242631e-02, -1.319422623756632e-01, -1.987825140661245e-01, -1.615499298309979e-01, -1.615499298309979e-01, -2.976045913618144e-01, -5.203939020301477e-04, -1.501970499896967e-03, -1.858218488015513e-01, -6.505594516485175e-03, -6.505594516485042e-03, -6.182395100554805e-06, -7.342323759424243e-09, -6.800507700251739e-08, -5.336373921666716e-03, -2.393280678210230e-07, -2.393280678227669e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.471668549406539e+01, -2.471679638171497e+01, -2.471724386790202e+01, -2.471559506275957e+01, -2.471646545189118e+01, -2.471646545189118e+01, -3.856370442008345e+00, -3.856426068692515e+00, -3.857813543544764e+00, -3.856160629417715e+00, -3.856532874648622e+00, -3.856532874648622e+00, -6.346543060940169e-01, -6.334401640745115e-01, -6.069849601452882e-01, -6.132015680462429e-01, -6.120651914233699e-01, -6.120651914233699e-01, -7.676124319617930e-02, -8.022462695841542e-02, -7.617494064726714e-01, -4.679337485050257e-02, -5.630152263789799e-02, -5.630152263789780e-02, -4.381875746087533e-06, -5.125321000227076e-06, -1.275227472373834e-03, -8.297922859151983e-07, -1.656437336031409e-06, -1.656437336029067e-06, -6.056185218361247e+00, -6.059854857747146e+00, -6.056346321520597e+00, -6.059585971828599e+00, -6.058049195802925e+00, -6.058049195802925e+00, -2.085885600555538e+00, -2.100681710870298e+00, -2.077024489688525e+00, -2.090244987601074e+00, -2.098218577955257e+00, -2.098218577955257e+00, -5.701350442043864e-01, -6.575999502320589e-01, -5.154349556393820e-01, -5.660349435713483e-01, -5.852652661455087e-01, -5.852652661455087e-01, -2.236993718067942e-02, -7.591758259968739e-02, -1.824109053241599e-02, -2.236301763088673e+00, -3.143052159357274e-02, -3.143052159357274e-02, -3.800416950419428e-07, -7.753506648800123e-07, -3.494083206400595e-07, -5.518581268235425e-03, -6.087659765653352e-07, -6.087659765680346e-07, -5.995751798636455e-01, -5.948657829568023e-01, -5.969640847794354e-01, -5.983554076316886e-01, -5.977008740406049e-01, -5.977008740406049e-01, -5.789926578115379e-01, -4.415984003868223e-01, -4.819924259938738e-01, -5.262173686451503e-01, -5.037982120007576e-01, -5.037982120007576e-01, -6.948493099719507e-01, -1.096781275827399e-01, -1.614722672078843e-01, -2.838454848953413e-01, -2.224249281934445e-01, -2.224249281934444e-01, -3.988242691558541e-01, -1.119594785579977e-03, -2.782956706943435e-03, -2.785145638423297e-01, -1.166633242921603e-02, -1.166633242921592e-02, -1.256757972172899e-05, -1.470377457676155e-08, -1.363651809686575e-07, -9.687321696051236e-03, -4.824201555274453e-07, -4.824201555277315e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.629959530557817e-09, -7.629881954016978e-09, -7.629499713640344e-09, -7.630654551977113e-09, -7.630054793384175e-09, -7.630054793384175e-09, -9.567117183867836e-06, -9.567232663952088e-06, -9.568923226353719e-06, -9.558844512308663e-06, -9.566359551698974e-06, -9.566359551698974e-06, -3.837014988144609e-03, -3.845916190399162e-03, -3.933484419490948e-03, -3.839926353571768e-03, -3.872319213405819e-03, -3.872319213405819e-03, -1.940888791409316e-01, -1.804407902421702e-01, -2.334465512760734e-03, -2.503279917294529e-01, -2.506294183636200e-01, -2.506294183636202e-01, 4.259869540793457e-03, 5.018989884868796e-03, -2.449502325324787e-02, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, -1.928718794019946e-06, -1.924513676387239e-06, -1.928534563350402e-06, -1.924822982551066e-06, -1.926589369506185e-06, -1.926589369506185e-06, -6.277971239211382e-05, -6.189131695660299e-05, -6.213037183597360e-05, -6.132398712729501e-05, -6.263528464084768e-05, -6.263528464084768e-05, -4.253257109007433e-03, 1.079036473558418e-03, -5.641001034242734e-03, 1.191013360175078e-03, -3.644785675737915e-03, -3.644785675737915e-03, -2.062384935150707e-01, -1.835455823632001e-01, -2.015296848394136e-01, -4.295140164866446e-05, -2.485975948153041e-01, -2.485975948153041e-01, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, -1.748919653871195e-01, 8.056878965244950e-03, 8.056878974167092e-03, 5.205832061893076e-03, 2.328348172330141e-03, 3.255310994724011e-03, 4.089269243336147e-03, 3.664348398236421e-03, 3.664348398236421e-03, 7.150084854607396e-03, -9.423384372520721e-03, -6.687590346067161e-03, -2.338466262275419e-03, -4.722167889509018e-03, -4.722167889509018e-03, 4.423818209693163e-04, -1.260696853726716e-01, -7.136174753486910e-02, -1.841304249227695e-02, -3.479692030599561e-02, -3.479692030599561e-02, -1.152948782492882e-02, -5.565894275456350e-03, -1.372497631298668e-01, -7.947625200685302e-03, -1.957149725790644e-01, -1.957149725790693e-01, 5.292039407050194e-03, 2.005779865925479e-03, 2.523877354250999e-03, -1.876268417015485e-01, 1.003269687435131e-02, 1.003269687251532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
