
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2a_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.563145265644328e+01, -1.563147916842830e+01, -1.563163690701987e+01, -1.563124164681574e+01, -1.563144308471460e+01, -1.563144308471460e+01, -2.693935190276858e+00, -2.693916016553710e+00, -2.693536364010364e+00, -2.694687289552074e+00, -2.693974645523149e+00, -2.693974645523149e+00, -5.953010680128330e-01, -5.951329664680211e-01, -5.924660064757593e-01, -5.963083469091158e-01, -5.969661055650179e-01, -5.969661055650179e-01, -1.982888441756948e-01, -1.996654028138663e-01, -6.803995978950577e-01, -1.669772137768653e-01, -1.857632088103053e-01, -1.857632088103053e-01, -9.891739998853661e-03, -1.040833624447748e-02, -5.445813944162906e-02, -5.788994972669744e-03, -9.370136366953065e-03, -9.370136366953066e-03, -3.887290988811622e+00, -3.887204431874526e+00, -3.887293268383400e+00, -3.887216746097452e+00, -3.887243599538655e+00, -3.887243599538655e+00, -1.655168263188131e+00, -1.662883269233421e+00, -1.655345409910743e+00, -1.662107678423961e+00, -1.659425589535660e+00, -1.659425589535660e+00, -5.131050636399366e-01, -5.385713235631164e-01, -4.809211890466449e-01, -4.857489028858638e-01, -5.192556088223685e-01, -5.192556088223687e-01, -1.287781420596668e-01, -2.092942176773076e-01, -1.207465563814053e-01, -1.478592992817856e+00, -1.428725231002070e-01, -1.428725231002070e-01, -4.511359506442940e-03, -5.662928494183390e-03, -4.385605230259955e-03, -8.504985619817163e-02, -5.863443181510607e-03, -5.863443181510609e-03, -4.937829774767577e-01, -4.994218760405400e-01, -4.983000179540318e-01, -4.968184383067898e-01, -4.976393558362774e-01, -4.976393558362774e-01, -4.766498259087712e-01, -4.500264381616699e-01, -4.603861736906880e-01, -4.709809650723251e-01, -4.654504866300497e-01, -4.654504866300497e-01, -5.626331281684869e-01, -2.477645834061082e-01, -2.790334724940579e-01, -3.331210399240834e-01, -3.037197302895831e-01, -3.037197302895831e-01, -4.186223211700046e-01, -5.210734121381035e-02, -7.001929506521574e-02, -3.176027232182809e-01, -1.042758302383117e-01, -1.042758302383117e-01, -1.376952839864715e-02, -1.574007938267924e-03, -3.252024465015787e-03, -9.894140602440100e-02, -5.336784962201347e-03, -5.336784962201345e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2a_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.929192201338534e+01, -1.929190000982337e+01, -1.929201004172244e+01, -1.929196417153288e+01, -1.929226947689127e+01, -1.929234074919014e+01, -1.929127295037544e+01, -1.929107379752673e+01, -1.929197426047212e+01, -1.929156427848894e+01, -1.929197426047212e+01, -1.929156427848894e+01, -3.231386334200263e+00, -3.231564337018185e+00, -3.231422238316070e+00, -3.231608524436819e+00, -3.232382843784750e+00, -3.232650079972771e+00, -3.231223558144174e+00, -3.231502084171105e+00, -3.230832580667378e+00, -3.232362764907392e+00, -3.230832580667378e+00, -3.232362764907392e+00, -6.820153877710866e-01, -6.858975843985898e-01, -6.804104162725434e-01, -6.851612271854656e-01, -6.567602327823601e-01, -6.507392231484587e-01, -6.581676410345110e-01, -6.601424826152660e-01, -6.875016136660984e-01, -6.300430436126244e-01, -6.875016136660984e-01, -6.300430436126244e-01, -2.078105908871060e-01, -2.043405154072398e-01, -2.104020151821240e-01, -2.070702537337759e-01, -7.756507987091508e-01, -8.028263315701939e-01, -1.710703435543031e-01, -1.701183988117922e-01, -1.672991428652230e-01, -2.356515017923908e-01, -1.672991428652229e-01, -2.356515017923910e-01, -1.194512728056382e-02, -1.401934169189948e-02, -1.240355683343721e-02, -1.486007031298702e-02, -6.674202822979221e-02, -7.297738746511229e-02, -7.826606508037211e-03, -7.475070373667595e-03, -1.440041074172047e-02, -1.144629081670390e-03, -1.440041074172047e-02, -1.144629081670398e-03, -4.882033448987259e+00, -4.880921107363684e+00, -4.883884055013815e+00, -4.882710250432179e+00, -4.882136453463618e+00, -4.880983362580062e+00, -4.883725245412649e+00, -4.882607973845754e+00, -4.882981617652907e+00, -4.881820330062341e+00, -4.882981617652907e+00, -4.881820330062341e+00, -1.756264188930239e+00, -1.756185635537099e+00, -1.772279680652330e+00, -1.771815564345712e+00, -1.735894264552543e+00, -1.741188719098315e+00, -1.749791554486704e+00, -1.755178613559703e+00, -1.779887502845861e+00, -1.767228357493068e+00, -1.779887502845861e+00, -1.767228357493068e+00, -6.258900560030808e-01, -6.248963277127300e-01, -6.770275517644329e-01, -6.769433002500754e-01, -5.739100652018796e-01, -5.886279973228770e-01, -6.022269853465918e-01, -6.154531830009267e-01, -6.468415890991875e-01, -6.252128999154134e-01, -6.468415890991877e-01, -6.252128999154136e-01, -1.431391050028206e-01, -1.418759374028613e-01, -2.087172546984410e-01, -2.081584861575766e-01, -1.357766677256521e-01, -1.354841264266693e-01, -1.888717510385093e+00, -1.887995499499374e+00, -1.602337193476241e-01, -1.417064422216202e-01, -1.602337193476241e-01, -1.417064422216202e-01, -5.630106028536001e-03, -6.266428443755944e-03, -7.330770914621929e-03, -7.639398301841039e-03, -5.301953166118885e-03, -6.218033214006946e-03, -1.025110050253228e-01, -1.036764932365045e-01, -3.525486925959314e-03, -9.365644859389153e-03, -3.525486925959303e-03, -9.365644859389156e-03, -6.196512756013900e-01, -6.211313123571061e-01, -6.262100823089836e-01, -6.276386949015180e-01, -6.244825129553560e-01, -6.258590685756511e-01, -6.223642344005645e-01, -6.237753724113246e-01, -6.234857731457547e-01, -6.248740938686566e-01, -6.234857731457547e-01, -6.248740938686566e-01, -6.032434130076454e-01, -6.046083862622192e-01, -5.213208428705755e-01, -5.229245240239442e-01, -5.530711327643759e-01, -5.549275488590758e-01, -5.833961255272511e-01, -5.847638702524203e-01, -5.686002254615204e-01, -5.700261514054380e-01, -5.686002254615204e-01, -5.700261514054380e-01, -7.074264199680348e-01, -7.078552776700114e-01, -2.483625583873288e-01, -2.478767169962850e-01, -2.902488985124850e-01, -2.903513128817700e-01, -3.831835174468963e-01, -3.843195585674701e-01, -3.325510021267521e-01, -3.325978280425362e-01, -3.325510021267521e-01, -3.325978280425362e-01, -4.840351174778931e-01, -4.864196922947923e-01, -6.702404412125827e-02, -6.780929594800653e-02, -8.640567650702302e-02, -8.985701153244323e-02, -3.758306518412899e-01, -3.791805558200197e-01, -1.220916579820023e-01, -1.162540017378056e-01, -1.220916579820023e-01, -1.162540017378055e-01, -1.733895185676039e-02, -1.897832463526118e-02, -2.078143036669534e-03, -2.091709352473450e-03, -3.896911421876931e-03, -4.639402357766452e-03, -1.144643744669151e-01, -1.152812022887240e-01, -3.604825123604828e-03, -8.514459518897181e-03, -3.604825123604833e-03, -8.514459518897175e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2a_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.536921056329884e-09, 0.000000000000000e+00, -7.536959083495694e-09, -7.536818784108418e-09, 0.000000000000000e+00, -7.536884988568489e-09, -7.536479924830350e-09, 0.000000000000000e+00, -7.536401853528257e-09, -7.537632650473494e-09, 0.000000000000000e+00, -7.537874003230123e-09, -7.536857290678249e-09, 0.000000000000000e+00, -7.537279312393389e-09, -7.536857290678249e-09, 0.000000000000000e+00, -7.537279312393389e-09, -1.034619389872152e-05, 0.000000000000000e+00, -1.034626374467070e-05, -1.034605896100587e-05, 0.000000000000000e+00, -1.034617565217598e-05, -1.034317425281543e-05, 0.000000000000000e+00, -1.034189812318868e-05, -1.034152653448818e-05, 0.000000000000000e+00, -1.034044992191635e-05, -1.035306333605736e-05, 0.000000000000000e+00, -1.033716311766751e-05, -1.035306333605736e-05, 0.000000000000000e+00, -1.033716311766751e-05, -6.548520335079475e-03, 0.000000000000000e+00, -6.449390119104564e-03, -6.583888718069027e-03, 0.000000000000000e+00, -6.462898449727375e-03, -7.030270658949723e-03, 0.000000000000000e+00, -7.169120288784183e-03, -6.908071191703651e-03, 0.000000000000000e+00, -6.865383360921945e-03, -6.197978790155794e-03, 0.000000000000000e+00, -7.396963062861286e-03, -6.197978790155794e-03, 0.000000000000000e+00, -7.396963062861286e-03, -7.536778280186668e-01, 0.000000000000000e+00, -7.876965801682942e-01, -7.349419004618075e-01, 0.000000000000000e+00, -7.648144201649058e-01, -3.830080762404689e-03, 0.000000000000000e+00, -3.385090114704612e-03, -1.306706554425657e+00, 0.000000000000000e+00, -1.334478688849402e+00, -1.144984539881964e+00, 0.000000000000000e+00, 5.430768000478023e+00, -1.144984539881963e+00, 0.000000000000000e+00, 5.430768000478034e+00, -3.391853478863004e-01, 0.000000000000000e+00, -4.405453121194913e+00, -3.441616159149270e-02, 0.000000000000000e+00, -4.953471767606484e+00, -1.821561192062779e+00, 0.000000000000000e+00, -3.415849916217484e+00, -2.629044264206386e+00, 0.000000000000000e+00, -1.251743043695672e+00, -1.001324326107777e+01, 0.000000000000000e+00, 7.811230093863675e+01, -1.001324326107725e+01, 0.000000000000000e+00, 7.811230093870455e+01, -2.090738138387460e-06, 0.000000000000000e+00, -2.092692485688113e-06, -2.089841632286519e-06, 0.000000000000000e+00, -2.091831569817944e-06, -2.090674295643251e-06, 0.000000000000000e+00, -2.092656566531207e-06, -2.089909918186841e-06, 0.000000000000000e+00, -2.091868708135074e-06, -2.090282351815297e-06, 0.000000000000000e+00, -2.092259379408404e-06, -2.090282351815297e-06, 0.000000000000000e+00, -2.092259379408404e-06, -9.787715195509838e-05, 0.000000000000000e+00, -9.789478206918194e-05, -9.528475467178274e-05, 0.000000000000000e+00, -9.537633413642758e-05, -9.971248742751224e-05, 0.000000000000000e+00, -9.922540289524030e-05, -9.743468297922321e-05, 0.000000000000000e+00, -9.692169621330687e-05, -9.504096538659904e-05, 0.000000000000000e+00, -9.636488942834764e-05, -9.504096538659904e-05, 0.000000000000000e+00, -9.636488942834764e-05, -1.099038521456603e-02, 0.000000000000000e+00, -1.108947789390679e-02, -1.451720905780998e-02, 0.000000000000000e+00, -1.491193268781821e-02, -1.584349472264756e-02, 0.000000000000000e+00, -1.393255137887476e-02, -1.977838891909524e-02, 0.000000000000000e+00, -1.698467642711684e-02, -9.576823574600711e-03, 0.000000000000000e+00, -1.145871858043264e-02, -9.576823574600728e-03, 0.000000000000000e+00, -1.145871858043264e-02, -1.809876474921944e+00, 0.000000000000000e+00, -1.969795585949084e+00, -5.951167427508193e-01, 0.000000000000000e+00, -5.984561883119306e-01, -1.768320093099442e+00, 0.000000000000000e+00, -2.374317067577493e+00, -1.498792573333479e-04, 0.000000000000000e+00, -1.503037134266468e-04, -1.354730046715249e+00, 0.000000000000000e+00, -2.497008055191770e+00, -1.354730046715249e+00, 0.000000000000000e+00, -2.497008055191770e+00, -1.559987477270203e+00, 0.000000000000000e+00, -3.028454795087432e+00, -2.171614225497038e+00, 0.000000000000000e+00, -2.378915336984732e+00, 5.950663817911129e+00, 0.000000000000000e+00, -3.017840921844066e+01, -3.194775341546615e+00, 0.000000000000000e+00, -3.123331401082269e+00, 5.250609582530379e+01, 0.000000000000000e+00, -2.758380126235514e+01, 5.250609582519448e+01, 0.000000000000000e+00, -2.758380126235900e+01, -5.983657883244695e-02, 0.000000000000000e+00, -6.023299519484884e-02, -2.202916565307020e-02, 0.000000000000000e+00, -2.211806158856909e-02, -2.875711775847433e-02, 0.000000000000000e+00, -2.899377369033875e-02, -3.837619633897250e-02, 0.000000000000000e+00, -3.856160783676868e-02, -3.295589464877123e-02, 0.000000000000000e+00, -3.317863307586811e-02, -3.295589464877123e-02, 0.000000000000000e+00, -3.317863307586811e-02, -1.094317447812521e-01, 0.000000000000000e+00, -1.082513716460294e-01, -2.150408102200838e-02, 0.000000000000000e+00, -2.119978729015823e-02, -1.821030432561221e-02, 0.000000000000000e+00, -1.791596235214333e-02, -1.615911213018541e-02, 0.000000000000000e+00, -1.597772737586609e-02, -1.687705011797483e-02, 0.000000000000000e+00, -1.665908303056661e-02, -1.687705011797483e-02, 0.000000000000000e+00, -1.665908303056661e-02, -1.085525066087390e-02, 0.000000000000000e+00, -1.119355076653486e-02, -3.168703870893344e-01, 0.000000000000000e+00, -3.174036720717697e-01, -1.914443486708788e-01, 0.000000000000000e+00, -1.904226573050981e-01, -8.020076883438734e-02, 0.000000000000000e+00, -7.895875867439969e-02, -1.266440706495822e-01, 0.000000000000000e+00, -1.268873727968897e-01, -1.266440706495825e-01, 0.000000000000000e+00, -1.268873727968897e-01, -2.958410292116737e-02, 0.000000000000000e+00, -2.892933178785873e-02, -2.345669546592599e+00, 0.000000000000000e+00, -2.532654746673213e+00, -2.103643197008501e+00, 0.000000000000000e+00, -2.989695528734854e+00, -9.524671852575808e-02, 0.000000000000000e+00, -9.076726548008340e-02, -2.139473372309932e+00, 0.000000000000000e+00, -4.348446532516424e+00, -2.139473372309951e+00, 0.000000000000000e+00, -4.348446532516436e+00, -1.259239667878246e+00, 0.000000000000000e+00, -3.328763025261814e+00, 6.202010713677959e+00, 0.000000000000000e+00, -2.890356351533531e+01, 2.722476694135360e+00, 0.000000000000000e+00, -1.075626991126148e+01, -3.254390932105652e+00, 0.000000000000000e+00, -3.534347462997443e+00, 5.156698168087341e+01, 0.000000000000000e+00, -2.307972971855536e+01, 5.156698168086090e+01, 0.000000000000000e+00, -2.307972971855116e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
