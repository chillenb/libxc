
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.559129631980436e+01, -1.559131772828688e+01, -1.559146236786006e+01, -1.559114283631081e+01, -1.559130322878933e+01, -1.559130322878933e+01, -2.478059490363572e+00, -2.478036299855246e+00, -2.477564376230849e+00, -2.478879975516614e+00, -2.478094473412243e+00, -2.478094473412243e+00, -3.909859901949338e-01, -3.907093817520929e-01, -3.855560675538191e-01, -3.893287461490327e-01, -3.881549756547930e-01, -3.881549756547930e-01, -4.548263834479893e-02, -4.669484731321866e-02, -4.725789997041442e-01, -2.604170825973751e-02, -3.304953281448338e-02, -3.304953281448337e-02, -1.606991088487047e-06, -1.874931548579507e-06, -3.811904345336628e-04, -3.087675033823770e-07, -6.133450989678424e-07, -6.133450989678408e-07, -3.666252621291786e+00, -3.666004852708935e+00, -3.666248246599002e+00, -3.666029386728637e+00, -3.666122944769102e+00, -3.666122944769102e+00, -1.438235290582910e+00, -1.446055059007378e+00, -1.438253373240858e+00, -1.445146025537404e+00, -1.442562102405180e+00, -1.442562102405180e+00, -3.218148761535770e-01, -3.591211950524661e-01, -2.908656026629695e-01, -3.074085434561415e-01, -3.283321757592319e-01, -3.283321757592319e-01, -1.031537141338291e-02, -4.926776611554370e-02, -8.126032865014236e-03, -1.268174651795206e+00, -1.560132574429281e-02, -1.560132574429281e-02, -1.417903605618201e-07, -2.885156039233518e-07, -1.295297410893996e-07, -2.132953619863090e-03, -2.260072576290929e-07, -2.260072576290923e-07, -3.281974109556685e-01, -3.236157718322644e-01, -3.251223972465613e-01, -3.264490602829494e-01, -3.257755077380042e-01, -3.257755077380042e-01, -3.179829167171569e-01, -2.572052297479860e-01, -2.716102638910503e-01, -2.879020973143387e-01, -2.792897585653966e-01, -2.792897585653966e-01, -3.804408851814466e-01, -7.624458088006454e-02, -1.018629327252425e-01, -1.544787312958403e-01, -1.249927178704524e-01, -1.249927178704524e-01, -2.289503394708431e-01, -3.274222735342960e-04, -9.780719546714008e-04, -1.464380822569853e-01, -4.844533035730595e-03, -4.844533035730572e-03, -4.528136289007486e-06, -5.506017240723642e-09, -5.095137347916978e-08, -3.937448186270223e-03, -1.791225671458762e-07, -1.791225671461730e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.881500992776272e+01, -1.881508571432025e+01, -1.881540167200345e+01, -1.881427456132623e+01, -1.881486812170286e+01, -1.881486812170286e+01, -2.969982144838232e+00, -2.970023261433536e+00, -2.971048813459706e+00, -2.969842323365931e+00, -2.970104509739063e+00, -2.970104509739063e+00, -4.994447211853172e-01, -4.981301966879801e-01, -4.655348302538128e-01, -4.707767560300000e-01, -4.703342987902945e-01, -4.703342987902945e-01, -6.651655937459285e-02, -6.936477738904628e-02, -5.995002390516463e-01, -3.691588572715750e-02, -4.706656353076365e-02, -4.706656353076360e-02, -3.239360048968194e-06, -3.783800878287115e-06, -8.385209026506203e-04, -6.193256455104562e-07, -1.233269358611477e-06, -1.233269358609132e-06, -4.611769673060896e+00, -4.614036756381229e+00, -4.611870536498362e+00, -4.613871956611701e+00, -4.612920510095933e+00, -4.612920510095933e+00, -1.545665467204870e+00, -1.559624927317199e+00, -1.532623027615329e+00, -1.544749397058419e+00, -1.559943000607498e+00, -1.559943000607498e+00, -4.547542276552609e-01, -5.143962920171788e-01, -4.130687529185379e-01, -4.457946393358297e-01, -4.657108773833816e-01, -4.657108773833816e-01, -1.751175225378564e-02, -6.122190923722484e-02, -1.442801907594900e-02, -1.707061506616838e+00, -2.441735787405327e-02, -2.441735787405327e-02, -2.842771614181934e-07, -5.789217010651816e-07, -2.623992089137073e-07, -4.523527676775851e-03, -4.557435932557279e-07, -4.557435932584264e-07, -4.685970166346908e-01, -4.665754861589905e-01, -4.675914155383775e-01, -4.681942805569371e-01, -4.679211170926941e-01, -4.679211170926941e-01, -4.525767369106942e-01, -3.532653339565983e-01, -3.873555328334227e-01, -4.184635132181792e-01, -4.031963601765019e-01, -4.031963601765019e-01, -5.429997239511787e-01, -9.232231508030582e-02, -1.301944703547444e-01, -2.304413463319596e-01, -1.765435289998623e-01, -1.765435289998625e-01, -3.201206581376749e-01, -7.159963309327203e-04, -2.150558942157260e-03, -2.290563660241841e-01, -9.382381647094198e-03, -9.382381647094148e-03, -9.159252503346767e-06, -1.102966114851613e-08, -1.021967058294088e-07, -7.845329793348991e-03, -3.615169851741126e-07, -3.615169849656187e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.096191579869200e-09, -5.096151467809587e-09, -5.095929753924829e-09, -5.096527423301335e-09, -5.096220426039063e-09, -5.096220426039063e-09, -6.022368125670945e-06, -6.022352879043584e-06, -6.021416271631518e-06, -6.018647537278011e-06, -6.021794706954442e-06, -6.021794706954442e-06, -2.180882936501738e-03, -2.203038449504808e-03, -2.708956250876477e-03, -2.628421874897590e-03, -2.637109268014368e-03, -2.637109268014368e-03, -9.221890950670084e-02, -8.222192953240559e-02, -1.309735789987635e-03, -1.664574700773313e-01, -1.417692859968324e-01, -1.417692859968332e-01, 4.258138623754685e-03, 5.016609155486122e-03, 1.425790573698781e-02, 1.504861673822618e-03, 3.145375914697390e-03, 3.145375913301298e-03, -1.268260212246153e-06, -1.266473564876848e-06, -1.268179409691268e-06, -1.266602525986793e-06, -1.267357148023745e-06, -1.267357148023745e-06, -4.871905683222564e-05, -4.767470210340075e-05, -4.898047366614351e-05, -4.806808103542585e-05, -4.799297992855050e-05, -4.799297992855050e-05, -9.173345126239256e-04, 2.320515066166762e-03, -1.216373587205655e-03, 3.543145944083738e-03, -5.651488314556254e-04, -5.651488314556254e-04, -1.335433561210207e-01, -1.200995181732632e-01, -1.197010343552393e-01, -2.271574371967718e-05, -1.699249820502622e-01, -1.699249820502622e-01, 1.469877677953436e-03, 1.850073541166320e-03, 1.851288122386962e-02, -2.725302595747048e-02, 8.056650147199432e-03, 8.056650156121146e-03, 5.927186101362779e-03, 3.921594588345088e-03, 4.558641789458294e-03, 5.138468349634085e-03, 4.842169399866212e-03, 4.842169399866212e-03, 7.633701440571419e-03, -4.160070643082820e-03, -1.408842314839166e-03, 1.607813134881975e-03, 5.184651051308269e-05, 5.184651051308269e-05, 1.570674375854833e-03, -7.663375648275683e-02, -4.578485266476512e-02, -3.336911210626868e-03, -1.990140522149359e-02, -1.990140522149348e-02, -4.646186155866242e-03, 1.247724055719832e-02, -9.046833085984349e-04, 1.241910435136116e-02, -8.665125637987514e-02, -8.665125637987982e-02, 5.283471977578680e-03, 2.005777834146816e-03, 2.523856213203106e-03, -6.867420801852113e-02, 1.003249341803269e-02, 1.003249341619408e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
