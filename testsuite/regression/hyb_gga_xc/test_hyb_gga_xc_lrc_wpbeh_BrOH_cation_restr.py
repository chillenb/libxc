
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lrc_wpbeh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.671756231522584e+01, -1.671758509372926e+01, -1.671773921359467e+01, -1.671739922916237e+01, -1.671756985644738e+01, -1.671756985644738e+01, -2.730089379834108e+00, -2.730064166714425e+00, -2.729549768625976e+00, -2.730972426409255e+00, -2.730126154033662e+00, -2.730126154033662e+00, -4.965858605626606e-01, -4.963539427122976e-01, -4.923615931249014e-01, -4.964158331187950e-01, -4.950912730178058e-01, -4.950912730178058e-01, -9.676226623640057e-02, -9.815913818434660e-02, -5.849637709270252e-01, -6.841839169782031e-02, -7.906280756991262e-02, -7.906280756991260e-02, -6.873250702565327e-06, -8.024298108080894e-06, -2.605877329803079e-03, -1.317134558720253e-06, -2.616544511339943e-06, -2.616544511339937e-06, -3.996446331676707e+00, -3.996163849841523e+00, -3.996440917845384e+00, -3.996191405056523e+00, -3.996298754895019e+00, -3.996298754895019e+00, -1.622093781005221e+00, -1.630399820725253e+00, -1.622209852911748e+00, -1.629532738575294e+00, -1.626640109291820e+00, -1.626640109291820e+00, -4.162853182544011e-01, -4.527437013527635e-01, -3.825057013698139e-01, -3.960840173289020e-01, -4.229253287683329e-01, -4.229253287683329e-01, -3.798927352934961e-02, -1.052146918927388e-01, -3.237714556338341e-02, -1.433503939551884e+00, -4.903168587105166e-02, -4.903168587105166e-02, -6.046770866836734e-07, -1.230520773361595e-06, -5.504386701192151e-07, -1.229214132844513e-02, -9.621499252961763e-07, -9.621499252961738e-07, -4.169476045003037e-01, -4.132592546173081e-01, -4.144521746093949e-01, -4.155182408585480e-01, -4.149749579549283e-01, -4.149749579549283e-01, -4.051463119858250e-01, -3.480251187316906e-01, -3.613671950110467e-01, -3.764698501382424e-01, -3.684279026148766e-01, -3.684279026148766e-01, -4.764899691242774e-01, -1.415121909291889e-01, -1.726643965335214e-01, -2.303009073748655e-01, -1.985424052770744e-01, -1.985424052770744e-01, -3.161680244465332e-01, -2.226609634295381e-03, -6.486384006437349e-03, -2.177323694570722e-01, -2.232309959634933e-02, -2.232309959634940e-02, -1.958367462209815e-05, -2.348031052361751e-08, -2.172098675671633e-07, -1.928656385520295e-02, -7.622381904569240e-07, -7.622381901866425e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lrc_wpbeh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.015105367319897e+01, -2.015113444085607e+01, -2.015147125988356e+01, -2.015027006745084e+01, -2.015090262736129e+01, -2.015090262736129e+01, -3.248967549053274e+00, -3.249010648284953e+00, -3.250087093521321e+00, -3.248831124884290e+00, -3.249097237911343e+00, -3.249097237911343e+00, -5.999802144635733e-01, -5.986413195615171e-01, -5.662972201135629e-01, -5.718898029003844e-01, -5.712790862234914e-01, -5.712790862234914e-01, -1.107188450886675e-01, -1.135615496820266e-01, -7.088120571781918e-01, -7.695947470324375e-02, -8.791171027840622e-02, -8.791171027840616e-02, -1.381545343619457e-05, -1.614354756434664e-05, -5.530655451802623e-03, -2.637246374713875e-06, -5.244933273781323e-06, -5.244933273778968e-06, -4.999223709508920e+00, -5.001620984509828e+00, -4.999330436456022e+00, -5.001446791693861e+00, -5.000440602388847e+00, -5.000440602388847e+00, -1.731800853293234e+00, -1.746584156012099e+00, -1.718177869700030e+00, -1.731018388618848e+00, -1.746828783021151e+00, -1.746828783021151e+00, -5.493787669479244e-01, -6.185429576252485e-01, -5.033712435276293e-01, -5.430983672529756e-01, -5.616541063436652e-01, -5.616541063436652e-01, -5.109898148494685e-02, -1.123528233741030e-01, -4.526887492876251e-02, -1.897198043616554e+00, -5.921717004403741e-02, -5.921717004403741e-02, -1.210276323229924e-06, -2.463956287870318e-06, -1.104401035465733e-06, -2.112246102899015e-02, -1.928630322428309e-06, -1.928630322431004e-06, -5.707949184896218e-01, -5.667713353764336e-01, -5.684817236150075e-01, -5.696678746446078e-01, -5.691021777133567e-01, -5.691021777133567e-01, -5.539708092329455e-01, -4.375011450660119e-01, -4.748992148917830e-01, -5.110042430200702e-01, -4.930455174478541e-01, -4.930455174478541e-01, -6.492636772054200e-01, -1.510377745514561e-01, -1.933135126543382e-01, -2.987437745424889e-01, -2.409046537307318e-01, -2.409046537307319e-01, -4.004106600517260e-01, -4.786954444787385e-03, -1.255522852423888e-02, -2.971257315336533e-01, -3.297692570529119e-02, -3.297692570529125e-02, -3.968522723373684e-05, -4.697865721903306e-08, -4.347412556598639e-07, -2.959926659686814e-02, -1.528114288045032e-06, -1.528114287772942e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lrc_wpbeh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.448978526679833e-09, -5.448935981512018e-09, -5.448699823437884e-09, -5.449333767284327e-09, -5.449008278430816e-09, -5.449008278430816e-09, -6.524029005632661e-06, -6.524037692705936e-06, -6.523604480372926e-06, -6.519567617245672e-06, -6.523434169063162e-06, -6.523434169063162e-06, -2.938775119907942e-03, -2.957869181465274e-03, -3.366979547842903e-03, -3.267956870671633e-03, -3.287924247516503e-03, -3.287924247516503e-03, -2.873869146405903e-01, -2.773934241590084e-01, -1.686534411475916e-03, -4.609473740795734e-01, -4.086811999058589e-01, -4.086811999058602e-01, 4.182972447904208e-03, 4.911175707941235e-03, -1.661854007790488e-01, 1.501406101055842e-03, 3.130459218369102e-03, 3.130459216971416e-03, -1.377454090753855e-06, -1.375742266997464e-06, -1.377375657938961e-06, -1.375864830012010e-06, -1.376589423583498e-06, -1.376589423583498e-06, -5.260348120116957e-05, -5.148979923769971e-05, -5.284237574461246e-05, -5.186961245418247e-05, -5.184946681365187e-05, -5.184946681365187e-05, -3.032273235479699e-03, 6.090445352341725e-04, -4.179529807834184e-03, 5.736395684936748e-04, -2.585627391991497e-03, -2.585627391991497e-03, -5.195365699410747e-01, -2.283173910615337e-01, -5.473954246811601e-01, -3.304967259218640e-05, -6.146300755786821e-01, -6.146300755786821e-01, 1.468687066166697e-03, 1.846465066569020e-03, 1.850719660206195e-02, -5.375746162049390e-01, 8.049792772207591e-03, 8.049792781132664e-03, 3.423224545163644e-03, 1.390239357567618e-03, 2.032784636382540e-03, 2.620137563693815e-03, 2.319677552136353e-03, 2.319677552136353e-03, 4.792213184504178e-03, -7.954609668818486e-03, -5.121120850337127e-03, -1.868450191099696e-03, -3.570458708118424e-03, -3.570458708118424e-03, 2.042549214023477e-04, -1.283432995958164e-01, -7.858757255152740e-02, -2.320061062310758e-02, -4.677547135012589e-02, -4.677547135012566e-02, -1.032592931699568e-02, -1.332128235479958e-01, -3.033537615011725e-01, -1.495700370095186e-02, -7.546185510834734e-01, -7.546185510834800e-01, 4.875878673690305e-03, 2.005741898009107e-03, 2.523381642781241e-03, -7.249991794098647e-01, 1.002669157339874e-02, 1.002669157156093e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
