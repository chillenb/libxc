
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbeh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.576035554908983e+01, -1.576037695958189e+01, -1.576052160427274e+01, -1.576020204297152e+01, -1.576036245155157e+01, -1.576036245155157e+01, -2.646560956561590e+00, -2.646537603832822e+00, -2.646061956235120e+00, -2.647384285769492e+00, -2.646595779020629e+00, -2.646595779020629e+00, -5.504907694144979e-01, -5.502702788270812e-01, -5.464112724079652e-01, -5.502350455193415e-01, -5.489917228584208e-01, -5.489917228584208e-01, -1.678317811350236e-01, -1.692011131073543e-01, -6.337490079857022e-01, -1.387400949597858e-01, -1.498080389287681e-01, -1.498080389287681e-01, -7.565593893703516e-03, -7.962424339353416e-03, -4.327037465065900e-02, -4.371193968979829e-03, -5.491904939864689e-03, -5.491904939864689e-03, -3.834855022826527e+00, -3.834603281065871e+00, -3.834850486833575e+00, -3.834628119900876e+00, -3.834723327263865e+00, -3.834723327263865e+00, -1.606470111491497e+00, -1.614290946935002e+00, -1.606507345098229e+00, -1.613400537040948e+00, -1.610788047984887e+00, -1.610788047984887e+00, -4.743679000572144e-01, -5.080789717891776e-01, -4.424060078085212e-01, -4.543372731572136e-01, -4.805842203239267e-01, -4.805842203239267e-01, -1.047844544566397e-01, -1.767153961197876e-01, -9.783654848065158e-02, -1.432007066216422e+00, -1.175332373547047e-01, -1.175332373547047e-01, -3.372875302242280e-03, -4.273198191512130e-03, -3.267185599013961e-03, -6.824470802524822e-02, -3.935957262567228e-03, -3.935957262567228e-03, -4.735458487389514e-01, -4.704645055051305e-01, -4.714600996278449e-01, -4.723502717204026e-01, -4.718964649455510e-01, -4.718964649455510e-01, -4.621265742085886e-01, -4.100542991474997e-01, -4.223838246186604e-01, -4.361778688172731e-01, -4.288422742988409e-01, -4.288422742988409e-01, -5.306908000513346e-01, -2.126363195792171e-01, -2.429158416354765e-01, -2.977684331146911e-01, -2.677235915984361e-01, -2.677235915984361e-01, -3.797937116761068e-01, -4.149699872637260e-02, -5.590996310305019e-02, -2.849845616612346e-01, -8.424757198430846e-02, -8.424757198430849e-02, -1.067222336849007e-02, -1.142447670564648e-03, -2.397889689834170e-03, -7.978498994057287e-02, -3.642031942837879e-03, -3.642031942837879e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbeh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.898424036339425e+01, -1.898431624845945e+01, -1.898463248729293e+01, -1.898350391367705e+01, -1.898409826315944e+01, -1.898409826315944e+01, -3.136794365366272e+00, -3.136835308341086e+00, -3.137856927702818e+00, -3.136657960943845e+00, -3.136916610974994e+00, -3.136916610974994e+00, -6.483372895853092e-01, -6.471044940348447e-01, -6.172862858491056e-01, -6.225592368545040e-01, -6.219641201225374e-01, -6.219641201225374e-01, -1.797526007418768e-01, -1.825050253246529e-01, -7.511323672094943e-01, -1.462777120082690e-01, -1.571625833496460e-01, -1.571625833496459e-01, -1.007511641783280e-02, -1.060178022167821e-02, -5.593983178186786e-02, -5.825986927133253e-03, -7.317464156924584e-03, -7.317464156924581e-03, -4.779374713632634e+00, -4.781632176435979e+00, -4.779475187884618e+00, -4.781468116643401e+00, -4.780520666217543e+00, -4.780520666217543e+00, -1.713069570654097e+00, -1.727037856428995e+00, -1.699988483862673e+00, -1.712165155821409e+00, -1.727320519799946e+00, -1.727320519799946e+00, -5.986672119251861e-01, -6.642578382330827e-01, -5.549544345320399e-01, -5.924981287635853e-01, -6.102295328170412e-01, -6.102295328170412e-01, -1.196649928405058e-01, -1.829921058217455e-01, -1.132385928254206e-01, -1.868676323282155e+00, -1.274824123115567e-01, -1.274824123115567e-01, -4.495968872632174e-03, -5.695295255812528e-03, -4.353669942586812e-03, -8.379019714067562e-02, -5.244868567516932e-03, -5.244868567516934e-03, -6.195771464863852e-01, -6.151971437856665e-01, -6.169800461167847e-01, -6.182675122672195e-01, -6.176462201494211e-01, -6.176462201494211e-01, -6.038793690714154e-01, -4.932957250536792e-01, -5.278606715630337e-01, -5.617838227984601e-01, -5.448262234413832e-01, -5.448262234413832e-01, -6.933163793848017e-01, -2.211179675464074e-01, -2.624860481072436e-01, -3.597351867153354e-01, -3.061986052209938e-01, -3.061986052209938e-01, -4.577491799164979e-01, -5.384982677396132e-02, -7.095287419838928e-02, -3.565906111196290e-01, -9.838942752661060e-02, -9.838942752661060e-02, -1.419855825042472e-02, -1.523166037981875e-03, -3.196559103292370e-03, -9.439378119952881e-02, -4.853304994350968e-03, -4.853304994350965e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbeh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.095663408348566e-09, -5.095623047195389e-09, -5.095400633673264e-09, -5.096002001761509e-09, -5.095693007928165e-09, -5.095693007928165e-09, -6.056905901265415e-06, -6.056898783017023e-06, -6.056145525203720e-06, -6.053016933067379e-06, -6.056336840615502e-06, -6.056336840615502e-06, -2.755690030495050e-03, -2.772430020148698e-03, -3.132467275179869e-03, -3.039996655896674e-03, -3.059163203445252e-03, -3.059163203445252e-03, -3.126120287918795e-01, -3.026525694221432e-01, -1.571958232145424e-03, -5.169465490388140e-01, -4.509953566433762e-01, -4.509953566433764e-01, -1.823639933943612e+00, -1.926091972854437e+00, -1.050534892138175e+00, -1.659618647978773e+00, -2.107239264275725e+00, -2.107239264277127e+00, -1.273862514350869e-06, -1.272149707479169e-06, -1.273784668979912e-06, -1.272272952959427e-06, -1.272996905979178e-06, -1.272996905979178e-06, -4.888897470469265e-05, -4.784209242079706e-05, -4.914994470189844e-05, -4.823038017391831e-05, -4.816774327608992e-05, -4.816774327608992e-05, -3.142597604837155e-03, 9.304235786466129e-05, -4.370597229555320e-03, -3.627296697404237e-04, -2.731338803271456e-03, -2.731338803271456e-03, -6.714313418752549e-01, -2.343930635265139e-01, -7.464585756046515e-01, -2.926871568779331e-05, -7.504871001813259e-01, -7.504871001813259e-01, -2.187289445432185e+00, -1.953159999583315e+00, -1.225906731998191e+01, -1.142051394300289e+00, -5.705409962941257e+00, -5.705409962932323e+00, 2.199754488598989e-03, 4.782674731275485e-04, 1.022496556303685e-03, 1.520325106007418e-03, 1.265662137448173e-03, 1.265662137448173e-03, 3.208080404198812e-03, -7.843614174529204e-03, -5.396828560977290e-03, -2.580337137003612e-03, -4.056482091794796e-03, -4.056482091794796e-03, -1.454808876326912e-04, -1.278025950724067e-01, -7.686254222696881e-02, -2.572876797220573e-02, -4.773130212065207e-02, -4.773130212065206e-02, -1.039523882768428e-02, -9.611149414326400e-01, -9.435920107258577e-01, -2.239040847022550e-02, -1.212287047073965e+00, -1.212287047073969e+00, -1.467743529611303e+00, -9.592236393297364e+00, -4.640764735854870e+00, -1.240154569399833e+00, -7.206598743773580e+00, -7.206598743775432e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
