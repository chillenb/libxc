
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_pbeh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.665656899805095e-01, -3.665665367122338e-01, -3.665689444118379e-01, -3.665563758243615e-01, -3.665631539412699e-01, -3.665631539412699e-01, -3.533500537018512e-01, -3.533545241153938e-01, -3.534582501615950e-01, -3.532796830229812e-01, -3.533556093707294e-01, -3.533556093707294e-01, -2.991605492312074e-01, -2.990705095744717e-01, -2.970934673704285e-01, -2.976287097188992e-01, -2.975192300647539e-01, -2.975192300647539e-01, -1.637624016121687e-01, -1.647626838901866e-01, -3.089758275852140e-01, -1.403461922954608e-01, -1.495435301520558e-01, -1.495435301520557e-01, -8.069408872587773e-03, -8.492601961654880e-03, -4.604210437578997e-02, -4.662499474787379e-03, -5.857818743270200e-03, -5.857818743270200e-03, -3.713028900742293e-01, -3.714956457534879e-01, -3.713108425606860e-01, -3.714810053839732e-01, -3.714009586336758e-01, -3.714009586336758e-01, -3.310615659525598e-01, -3.315079024962032e-01, -3.301791210517523e-01, -3.305628811200260e-01, -3.317508986266029e-01, -3.317508986266029e-01, -2.904632108211421e-01, -3.026407873949765e-01, -2.834867538612241e-01, -2.905773868456351e-01, -2.921531950404272e-01, -2.921531950404272e-01, -1.092131577875235e-01, -1.710440618169195e-01, -1.023866368646971e-01, -3.673436153244110e-01, -1.212494848169175e-01, -1.212494848169175e-01, -3.597684314936885e-03, -4.557977704479643e-03, -3.484953064591646e-03, -7.226753935299075e-02, -4.198275929666097e-03, -4.198275929666097e-03, -2.982460549334995e-01, -2.953080094305720e-01, -2.962567687109561e-01, -2.971079988607284e-01, -2.966743731068499e-01, -2.966743731068499e-01, -2.964240403002050e-01, -2.746592903003539e-01, -2.787443538280820e-01, -2.841418124187132e-01, -2.811896004211215e-01, -2.811896004211215e-01, -3.062978944228855e-01, -1.954186509190224e-01, -2.130074317018598e-01, -2.389341618187310e-01, -2.256434466104466e-01, -2.256434466104466e-01, -2.668767823097647e-01, -4.416485199922347e-02, -5.937655362303293e-02, -2.335211815275415e-01, -8.870371641542422e-02, -8.870371641542431e-02, -1.138213586051735e-02, -1.218608931940846e-03, -2.557731274520015e-03, -8.415959185331008e-02, -3.884771888713287e-03, -3.884771888717088e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_pbeh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.426631116963595e-01, -4.426642450090630e-01, -4.426674811388764e-01, -4.426506567525358e-01, -4.426597287540261e-01, -4.426597287540261e-01, -4.142072629405702e-01, -4.142123282191009e-01, -4.143300155294365e-01, -4.141298902918177e-01, -4.142139030350862e-01, -4.142139030350862e-01, -3.250627740494895e-01, -3.247885471801220e-01, -3.191991694043199e-01, -3.199629474933848e-01, -3.198854169297226e-01, -3.198854169297226e-01, -1.704196392108502e-01, -1.724888370389247e-01, -3.382289463041874e-01, -1.446660391963177e-01, -1.530526259653091e-01, -1.530526259653090e-01, -1.074567326524424e-02, -1.130726198362891e-02, -5.943818480847934e-02, -6.214171084933103e-03, -7.804868276464009e-03, -7.804868276464007e-03, -4.373791026253379e-01, -4.375365489028301e-01, -4.373856367972346e-01, -4.375246394258619e-01, -4.374592825350703e-01, -4.374592825350703e-01, -3.768934084196761e-01, -3.777864945227292e-01, -3.750622724910396e-01, -3.758988292444447e-01, -3.782230365533692e-01, -3.782230365533692e-01, -3.261065893918766e-01, -3.414232874408926e-01, -3.177227255616030e-01, -3.307362222079597e-01, -3.289534706971174e-01, -3.289534706971174e-01, -1.229358538924623e-01, -1.731981223047216e-01, -1.170440437852674e-01, -4.109345941847174e-01, -1.290809916037716e-01, -1.290809916037716e-01, -4.795601402649955e-03, -6.074780746874602e-03, -4.643824567263344e-03, -8.829372175711260e-02, -5.594369255664820e-03, -5.594369255664823e-03, -3.343529439807212e-01, -3.345046609618877e-01, -3.346840629975760e-01, -3.346550550746665e-01, -3.346915372951824e-01, -3.346915372951824e-01, -3.314085038703183e-01, -3.003550253024558e-01, -3.120812754883784e-01, -3.234345541068548e-01, -3.179556795064064e-01, -3.179556795064064e-01, -3.451127933217677e-01, -1.993214449719482e-01, -2.240113854081893e-01, -2.648642976846565e-01, -2.430989404005532e-01, -2.430989404005532e-01, -2.925581559736248e-01, -5.723863802412325e-02, -7.514538842382083e-02, -2.671819261719482e-01, -1.026573213472007e-01, -1.026573213472008e-01, -1.514198392849621e-02, -1.624706606016923e-03, -3.409627567943511e-03, -9.879397315465996e-02, -5.176734075020900e-03, -5.176734075024696e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_pbeh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.924155246729109e-10, 1.924192524737776e-10, 1.924247540243588e-10, 1.923695290787812e-10, 1.924000367155335e-10, 1.924000367155335e-10, 9.306505420459551e-07, 9.308320897212674e-07, 9.349366742078976e-07, 9.269976011762925e-07, 9.307637168058260e-07, 9.307637168058260e-07, 1.289805384012655e-04, 1.225176030970299e-04, 1.844963533423013e-05, 2.896855782198293e-05, 2.772274347814471e-05, 2.772274347814471e-05, -2.644976150895600e-01, -2.549729076475199e-01, 1.887948663257431e-04, -4.863747897029538e-01, -4.093170363065061e-01, -4.093170363065060e-01, -1.945499800683194e+00, -2.054832542680908e+00, -1.121611201397265e+00, -1.770360212868991e+00, -2.247931567773778e+00, -2.247931567775179e+00, 2.568548790745272e-07, 2.584760933875514e-07, 2.569195749478950e-07, 2.583506301904243e-07, 2.576795496854493e-07, 2.576795496854493e-07, 4.913761515840915e-06, 4.900026583121589e-06, 4.692409431828783e-06, 4.686900625972936e-06, 5.010524950129664e-06, 5.010524950129664e-06, 1.062108867701916e-03, 3.274863299609785e-03, 8.546782722986751e-04, 4.128755988686780e-03, 1.272229613080065e-03, 1.272229613080065e-03, -6.870673269249925e-01, -1.871774856476764e-01, -7.725855454112645e-01, 4.518923451901708e-05, -7.501137579526157e-01, -7.501137579526157e-01, -2.333206732318938e+00, -2.083494001809084e+00, -1.307757266011432e+01, -1.214245069547550e+00, -6.086307731240725e+00, -6.086307731231784e+00, 6.049154136566513e-03, 4.486912998670824e-03, 4.979375140415769e-03, 5.431484475379650e-03, 5.200085474096470e-03, 5.200085474096470e-03, 7.304265154196719e-03, -8.406298121687514e-04, 6.082716059573872e-04, 2.622207064720713e-03, 1.538687007170109e-03, 1.538687007170109e-03, 2.638218660948036e-03, -8.323906352152935e-02, -4.103969127031347e-02, -1.054576166825995e-02, -2.405384823270592e-02, -2.405384823270595e-02, -1.769568744352013e-03, -1.026101284552384e+00, -1.006246080767876e+00, -7.849454479820342e-03, -1.276865118109918e+00, -1.276865118109920e+00, -1.565945399048419e+00, -1.023185253794878e+01, -4.950317307867870e+00, -1.310767090770672e+00, -7.687707487204261e+00, -7.687707487206113e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
