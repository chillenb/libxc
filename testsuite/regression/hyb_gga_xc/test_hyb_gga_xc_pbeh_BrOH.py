
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbeh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.575999686371207e+01, -1.576001549466172e+01, -1.576015489284437e+01, -1.575984868535397e+01, -1.576000621858283e+01, -1.576000621858283e+01, -2.646468092140251e+00, -2.646450229112647e+00, -2.646067129998170e+00, -2.647280328089220e+00, -2.646470005734147e+00, -2.646470005734147e+00, -5.495856415439391e-01, -5.494138224116955e-01, -5.465654754155719e-01, -5.500406465485375e-01, -5.495209571754535e-01, -5.495209571754535e-01, -1.717507270107333e-01, -1.730662913114215e-01, -6.423587617334851e-01, -1.376266440973193e-01, -1.721323164768265e-01, -1.721323164768265e-01, -1.275545908823972e-02, -1.335741885892438e-02, -5.285517738087216e-02, -6.131713047874956e-03, -1.321829158446008e-02, -1.321829158446008e-02, -3.833295517512828e+00, -3.833050977724518e+00, -3.833274719665367e+00, -3.833084491247150e+00, -3.833163797825151e+00, -3.833163797825151e+00, -1.606110612620059e+00, -1.613672383042694e+00, -1.606691206859659e+00, -1.612566581845786e+00, -1.610525854032160e+00, -1.610525854032160e+00, -4.694243987844728e-01, -5.029424258319967e-01, -4.475977571617822e-01, -4.617566125301998e-01, -4.851189992686294e-01, -4.851189992686294e-01, -1.092803223275430e-01, -1.826127684639078e-01, -1.073976754355983e-01, -1.430377236267012e+00, -1.212639854091882e-01, -1.212639854091882e-01, -5.915304375368178e-03, -6.759248373322051e-03, -5.066246080131943e-03, -7.170323089317480e-02, -6.158689436862849e-03, -6.158689436862849e-03, -4.804692461163532e-01, -4.774630504881258e-01, -4.784610807199471e-01, -4.792898930162684e-01, -4.788684428331296e-01, -4.788684428331296e-01, -4.665131833528964e-01, -4.165125017213328e-01, -4.287927982435604e-01, -4.414976809701706e-01, -4.347921621903575e-01, -4.347921621903575e-01, -5.253515128889967e-01, -2.190891454063876e-01, -2.487537767545416e-01, -2.995020352129319e-01, -2.720718556480348e-01, -2.720718556480347e-01, -3.790993083962378e-01, -4.925897068902951e-02, -6.540580843030386e-02, -2.816761230669477e-01, -9.009443092018272e-02, -9.009443092018272e-02, -1.494209145511988e-02, -1.851593052708847e-03, -3.516852149506236e-03, -8.590358789132958e-02, -5.234484289855650e-03, -5.234484289855641e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbeh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.898371002326196e+01, -1.898377607218364e+01, -1.898407512742177e+01, -1.898299347382186e+01, -1.898374481846168e+01, -1.898374481846168e+01, -3.136621715498884e+00, -3.136655773100088e+00, -3.137717191231172e+00, -3.136532017060214e+00, -3.136652159096680e+00, -3.136652159096680e+00, -6.409171006950707e-01, -6.397618989301956e-01, -6.098950809078334e-01, -6.149645182164641e-01, -6.404982041647487e-01, -6.404982041647487e-01, -1.908720288983371e-01, -1.940051169117596e-01, -7.733537926783476e-01, -1.447881901867501e-01, -1.918136130234560e-01, -1.918136130234560e-01, -1.692182837897757e-02, -1.771166839559649e-02, -6.659824519918325e-02, -8.167596666082359e-03, -1.752737519323510e-02, -1.752737519323510e-02, -4.777211765155929e+00, -4.779398545259428e+00, -4.777434872362400e+00, -4.779135219198970e+00, -4.778333692910363e+00, -4.778333692910363e+00, -1.710465214560519e+00, -1.724000776093766e+00, -1.703137106760045e+00, -1.713618018345561e+00, -1.729437831461516e+00, -1.729437831461516e+00, -5.931515896541085e-01, -6.577999629215903e-01, -5.641712211727505e-01, -6.017171250435680e-01, -6.171373469591988e-01, -6.171373469591988e-01, -1.216673044856086e-01, -1.898570162793195e-01, -1.190203952721832e-01, -1.866684798597081e+00, -1.299197747682946e-01, -1.299197747682946e-01, -7.879655225102542e-03, -9.001257289017238e-03, -6.747107250999363e-03, -8.618492086684430e-02, -8.201406565390479e-03, -8.201406565390475e-03, -6.285114303165122e-01, -6.247159528921213e-01, -6.263028974909429e-01, -6.273669736883473e-01, -6.268537735863611e-01, -6.268537735863611e-01, -6.097462605968768e-01, -5.061853787083042e-01, -5.392719636910521e-01, -5.693997019481577e-01, -5.543717021033218e-01, -5.543717021033217e-01, -6.867556931098562e-01, -2.318776803186741e-01, -2.756013553300600e-01, -3.643201235831335e-01, -3.167936116402838e-01, -3.167936116402837e-01, -4.597814252549704e-01, -6.278142683189337e-02, -8.049770904018674e-02, -3.545076580040343e-01, -1.024648871699720e-01, -1.024648871699720e-01, -1.980377662703641e-02, -2.468491705918898e-03, -4.687235913343624e-03, -9.768877782176297e-02, -6.971758520673191e-03, -6.971758520673176e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbeh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.096150042891659e-09, -5.096114913670035e-09, -5.095902004182515e-09, -5.096478367669663e-09, -5.096131986662530e-09, -5.096131986662530e-09, -6.057938615072864e-06, -6.057924542852414e-06, -6.056562808415647e-06, -6.053959357364361e-06, -6.057832308098345e-06, -6.057832308098345e-06, -2.852321744091249e-03, -2.867096896581829e-03, -3.197335570191646e-03, -3.109492489605605e-03, -2.857706045914642e-03, -2.857706045914642e-03, -2.763630904776336e-01, -2.641283471243343e-01, -1.413403577308596e-03, -5.709354548002724e-01, -2.727327956282661e-01, -2.727327956282661e-01, -3.814256910811487e+00, -3.822308075000198e+00, -1.540962202944704e+00, -2.717148738161355e+00, -3.970631698424981e+00, -3.970631698424981e+00, -1.276054585171124e-06, -1.274393883085965e-06, -1.275884780763295e-06, -1.274593703307372e-06, -1.275206986516768e-06, -1.275206986516768e-06, -4.897869163548373e-05, -4.796456963592381e-05, -4.906978908686435e-05, -4.828286034662557e-05, -4.814610016987912e-05, -4.814610016987912e-05, -3.209086247402429e-03, 2.465310827763287e-04, -3.946418268096578e-03, -5.593553982432380e-04, -2.554581454843435e-03, -2.554581454843435e-03, -7.626462527056855e-01, -2.207318307470706e-01, -8.636754240391937e-01, -2.927503810555955e-05, -7.574184310989491e-01, -7.574184310989491e-01, -2.882653992837389e+00, -2.887200262509296e+00, -8.262583279059058e+00, -1.455871362153952e+00, -4.264058806275083e+00, -4.264058806274804e+00, 2.288764428670870e-03, 7.241312243422109e-04, 1.231974837222590e-03, 1.663075139761357e-03, 1.443060455259269e-03, 1.443060455259269e-03, 2.998527764005181e-03, -7.021333116836132e-03, -4.748076346272421e-03, -2.327600851309784e-03, -3.587615001170137e-03, -3.587615001170134e-03, -1.331976947637880e-05, -1.153388764747249e-01, -6.777943161043630e-02, -2.414847267270467e-02, -4.254904322382439e-02, -4.254904322382443e-02, -1.012943857318959e-02, -1.315122604041662e+00, -1.280957898551425e+00, -2.143317918955041e-02, -1.317252546358150e+00, -1.317252546358153e+00, -2.863303972758648e+00, -4.976549512222283e+00, -4.282134610990826e+00, -1.606356648515371e+00, -6.228508953642603e+00, -6.228508953643420e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
