
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b1pw91_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.586356473000530e+01, -1.586358556206196e+01, -1.586372905429886e+01, -1.586341806756612e+01, -1.586357378520479e+01, -1.586357378520479e+01, -2.669725914996740e+00, -2.669701648127499e+00, -2.669205157802259e+00, -2.670567277374278e+00, -2.669760303490387e+00, -2.669760303490387e+00, -5.563325415485578e-01, -5.561202028450305e-01, -5.523082905426296e-01, -5.561567096734312e-01, -5.563945049752794e-01, -5.563945049752794e-01, -1.712338557324327e-01, -1.723550306998765e-01, -6.406862590357510e-01, -1.477465767656206e-01, -1.653034131002207e-01, -1.653034131002206e-01, -4.870321016295933e-02, -4.869843931203953e-02, -8.539024775352230e-02, -4.471030350025788e-02, -4.535589501702313e-02, -4.535589501702310e-02, -3.861404947387139e+00, -3.861059649096999e+00, -3.861396607136486e+00, -3.861091645374347e+00, -3.861225684543910e+00, -3.861225684543910e+00, -1.621297639053242e+00, -1.629220368555736e+00, -1.621247794398647e+00, -1.628225199474423e+00, -1.625738120260745e+00, -1.625738120260745e+00, -4.784487829050716e-01, -5.098655749460854e-01, -4.465914445867229e-01, -4.565172877688612e-01, -4.849150773249951e-01, -4.849150773249951e-01, -1.266246527635840e-01, -1.840557502044011e-01, -1.212914126327370e-01, -1.437693207030689e+00, -1.305793936915981e-01, -1.305793936915981e-01, -4.039617146991510e-02, -4.307052655805368e-02, -2.816692287748392e-02, -9.877530302368195e-02, -3.433857057118551e-02, -3.433857057118552e-02, -4.741457791904941e-01, -4.720270784877138e-01, -4.727131314056499e-01, -4.733270229706644e-01, -4.730139958240167e-01, -4.730139958240167e-01, -4.623625451384654e-01, -4.143308134640623e-01, -4.262964554667265e-01, -4.391637898786416e-01, -4.323710936680381e-01, -4.323710936680381e-01, -5.327306647840853e-01, -2.173857257652695e-01, -2.461868958307414e-01, -3.008551714182781e-01, -2.706812040150430e-01, -2.706812040150430e-01, -3.837557600020661e-01, -8.546863912332595e-02, -9.480571244656573e-02, -2.877030634890078e-01, -1.061366059118642e-01, -1.061366059118642e-01, -5.471707881444097e-02, -2.501111246671658e-02, -3.264245614025324e-02, -1.034687042225442e-01, -3.227733276345043e-02, -3.227733276345042e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b1pw91_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.904311903172027e+01, -1.904309655930609e+01, -1.904320210190258e+01, -1.904315719875553e+01, -1.904345170315618e+01, -1.904351778551609e+01, -1.904251003414449e+01, -1.904232195145374e+01, -1.904316607056661e+01, -1.904278999326768e+01, -1.904316607056661e+01, -1.904278999326768e+01, -3.153991185457340e+00, -3.154098952747133e+00, -3.154023349587969e+00, -3.154134861184410e+00, -3.154839829738906e+00, -3.155042906247531e+00, -3.153921366276837e+00, -3.154124789920584e+00, -3.153451991609225e+00, -3.154866714205274e+00, -3.153451991609225e+00, -3.154866714205274e+00, -6.518881441707443e-01, -6.551410325645011e-01, -6.503723962294941e-01, -6.543520725501547e-01, -6.263816865835343e-01, -6.212185174632501e-01, -6.282856341980556e-01, -6.299527325816712e-01, -6.534108539458879e-01, -6.031759632959617e-01, -6.534108539458879e-01, -6.031759632959617e-01, -1.688285958899523e-01, -1.733727627440678e-01, -1.726104900764972e-01, -1.778492981608141e-01, -7.435165735665604e-01, -7.689766817165589e-01, -1.193034063120464e-01, -1.205798460974830e-01, -1.559879122755577e-01, -1.006108791957872e-01, -1.559879122755577e-01, -1.006108791957872e-01, -1.324829960562964e-02, -1.367854123177906e-02, -1.347813739918301e-02, -1.397070122759165e-02, -3.898606055466208e-02, -4.036882013713991e-02, -1.052613970821585e-02, -1.048765199581269e-02, -1.252054003199680e-02, -8.482682394269450e-03, -1.252054003199678e-02, -8.482682394269444e-03, -4.781945358536640e+00, -4.780822393718116e+00, -4.784016571724968e+00, -4.782829127253274e+00, -4.782058012535952e+00, -4.780892610007115e+00, -4.783839416446886e+00, -4.782711264724089e+00, -4.783005573214755e+00, -4.781831187558771e+00, -4.783005573214755e+00, -4.781831187558771e+00, -1.733617230375101e+00, -1.733533248281905e+00, -1.748164894010539e+00, -1.747693749821542e+00, -1.717643288584079e+00, -1.721566403575193e+00, -1.730215657572513e+00, -1.734268687835886e+00, -1.753213144495739e+00, -1.743440182868090e+00, -1.753213144495739e+00, -1.743440182868090e+00, -5.993429586252926e-01, -5.982939834396587e-01, -6.624379161448306e-01, -6.629269439918692e-01, -5.478191616548067e-01, -5.631026076043854e-01, -5.846286677226863e-01, -5.972190769640370e-01, -6.208382445092140e-01, -5.984269149346457e-01, -6.208382445092140e-01, -5.984269149346458e-01, -8.198281807984109e-02, -8.246941499010749e-02, -1.594209940831356e-01, -1.600284919885815e-01, -7.509500780989606e-02, -7.809486888590307e-02, -1.864148279025957e+00, -1.863478050653868e+00, -9.454594708139176e-02, -9.787839099963191e-02, -9.454594708139176e-02, -9.787839099963191e-02, -8.853027510099414e-03, -9.187812694876910e-03, -1.007855126714710e-02, -1.025904420430849e-02, -6.966524511675412e-03, -7.054847827802083e-03, -5.476623611361763e-02, -5.514813934307125e-02, -7.736787817391029e-03, -8.982317448421239e-03, -7.736787817391043e-03, -8.982317448421233e-03, -6.178122029978406e-01, -6.195339669306644e-01, -6.129112146011829e-01, -6.146892387088260e-01, -6.148451425376436e-01, -6.166230829180037e-01, -6.163036458530023e-01, -6.180288839061421e-01, -6.155961945260250e-01, -6.173472847652590e-01, -6.155961945260250e-01, -6.173472847652590e-01, -6.026720887912246e-01, -6.040227454179380e-01, -4.955861504140170e-01, -4.973009898468710e-01, -5.278679980493218e-01, -5.297636475631002e-01, -5.600452688764556e-01, -5.614822230164204e-01, -5.439291148976086e-01, -5.454105417171214e-01, -5.439291148976086e-01, -5.454105417171214e-01, -6.909753273367572e-01, -6.922068948425785e-01, -2.073717060683820e-01, -2.082751385079954e-01, -2.582977445025628e-01, -2.602658496714019e-01, -3.613895281277362e-01, -3.627691230609394e-01, -3.080229521568839e-01, -3.080368973351402e-01, -3.080229521568840e-01, -3.080368973351402e-01, -4.593796601112317e-01, -4.619188156036094e-01, -3.880312987557567e-02, -3.896972052910059e-02, -4.732645107429734e-02, -4.829374344786595e-02, -3.558604619539020e-01, -3.595031992336811e-01, -6.516554417441807e-02, -6.708421231447356e-02, -6.516554417441804e-02, -6.708421231447355e-02, -1.640179971862182e-02, -1.667756076702297e-02, -4.939468107221926e-03, -4.508758521273278e-03, -6.959782035609867e-03, -7.071990339852893e-03, -6.232640689774375e-02, -6.312952586949759e-02, -6.837947258350983e-03, -8.575702528697434e-03, -6.837947258350994e-03, -8.575702528697417e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b1pw91_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.073384833885522e-08, 3.249203400484267e-10, -1.073391080422686e-08, -1.073378446505345e-08, 3.249254156154051e-10, -1.073386366102497e-08, -1.073345127396112e-08, 3.249312127455129e-10, -1.073342501561528e-08, -1.073418498169682e-08, 3.248560612441316e-10, -1.073434879821639e-08, -1.073382978876766e-08, 3.248978165452077e-10, -1.073387503019696e-08, -1.073382978876766e-08, 3.248978165452077e-10, -1.073387503019696e-08, -1.345257626634672e-05, 1.882184928226818e-06, -1.345799277821833e-05, -1.345280016256066e-05, 1.882536604769570e-06, -1.345862331882029e-05, -1.346264507076333e-05, 1.890469035325647e-06, -1.346593578889123e-05, -1.343718969533334e-05, 1.874965934648070e-06, -1.344146705418203e-05, -1.346028232947054e-05, 1.882383717168228e-06, -1.344875903325224e-05, -1.346028232947054e-05, 1.882383717168228e-06, -1.344875903325224e-05, -7.343465073400428e-03, 3.313440568855438e-03, -7.351976034079393e-03, -7.358733959464665e-03, 3.292089350612322e-03, -7.368683301475845e-03, -7.711707102407046e-03, 2.754503394278657e-03, -7.709999011331767e-03, -7.489027925339965e-03, 2.687355420634704e-03, -7.493775490862532e-03, -7.598241792677577e-03, 2.724859819139565e-03, -7.407377408282401e-03, -7.598241792677577e-03, 2.724859819139565e-03, -7.407377408282401e-03, -1.045501711279097e+00, 3.302901750770876e-01, -9.282194529718635e-01, -1.014643855113600e+00, 3.458841809888365e-01, -8.828940387879817e-01, -4.327981209625254e-03, 1.773084044670905e-03, -3.989949809755118e-03, -2.254201203417578e+00, 2.546734451419353e-01, -2.149916183999077e+00, -9.270655342833336e-01, 2.105848772396240e-01, -5.721752553906499e+00, -9.270655342833327e-01, 2.105848772396247e-01, -5.721752553906504e+00, -1.667950659605181e+04, 8.613353793739745e-03, -1.397215812517981e+04, -1.480198430471263e+04, 1.013950379898908e-02, -1.213306583131465e+04, -9.608957929681584e+01, 5.523177238437298e-02, -8.272801841173388e+01, -7.031809714878214e+04, 3.039205960810898e-03, -7.323966257469326e+04, -2.313986402900533e+04, 4.471539514049365e-03, -1.521050825048219e+05, -2.313986402900536e+04, 4.471539512694581e-03, -1.521050825048219e+05, -3.046034442209956e-06, 4.749125773836140e-07, -3.048986327287826e-06, -3.046883966231847e-06, 4.779691194036931e-07, -3.049758599736092e-06, -3.046070940116250e-06, 4.750344380718369e-07, -3.048979654685931e-06, -3.046762485730419e-06, 4.777324269027139e-07, -3.049720810302097e-06, -3.046500927969708e-06, 4.764670697418842e-07, -3.049368195450571e-06, -3.046500927969708e-06, 4.764670697418842e-07, -3.049368195450571e-06, -1.035190107587898e-04, 1.231612203241641e-05, -1.035387091578152e-04, -1.012855065272421e-04, 1.221714254827805e-05, -1.013813013865596e-04, -1.040321162058912e-04, 1.187295881057448e-05, -1.039905562940847e-04, -1.020981107498350e-04, 1.178956102485754e-05, -1.020116664893683e-04, -1.018959289421600e-04, 1.248218806625418e-05, -1.022666078202424e-04, -1.018959289421600e-04, 1.248218806625418e-05, -1.022666078202424e-04, -1.298005415102377e-02, 1.066514832223700e-02, -1.318746702243005e-02, -9.469193890561861e-03, 1.397328589342333e-02, -9.494456666593681e-03, -1.895370417748152e-02, 1.392045884219881e-02, -1.597541158796200e-02, -1.699394190462897e-02, 2.122385006740113e-02, -1.351685637836667e-02, -1.081183301183585e-02, 1.065438862245302e-02, -1.427643136496841e-02, -1.081183301183585e-02, 1.065438862245302e-02, -1.427643136496841e-02, -5.954264144094788e+00, 1.439679558499215e-01, -5.844563762715501e+00, -8.396460582460519e-01, 1.284993988958634e-01, -8.262294159667786e-01, -8.069630764129391e+00, 1.453770439617308e-01, -6.965595258871804e+00, -1.477375984163293e-04, 1.071116276150960e-04, -1.481354507426762e-04, -4.302363518073774e+00, 2.730845515133000e-01, -4.004401218421521e+00, -4.302363518073774e+00, 2.730845515133000e-01, -4.004401218421521e+00, -1.770219870260512e+05, 2.956955031919532e-03, -1.521662743086641e+05, -8.286110990596947e+04, 3.735892454584835e-03, -7.759902205217924e+04, -3.115330905066829e+05, 3.713649829170447e-02, -2.721601825941775e+05, -2.482561165362414e+01, 1.387040646761921e-01, -2.412205318103666e+01, -2.410382388812189e+05, 1.423477041157044e-02, -9.625508458006746e+04, -2.410382388812187e+05, 1.423477039691048e-02, -9.625508458006741e+04, -1.273056564305301e-02, 2.403957787948525e-02, -1.239241270774620e-02, -1.313236859668626e-02, 2.034391171407463e-02, -1.282208261828911e-02, -1.293553268181273e-02, 2.159045634422680e-02, -1.261980814601615e-02, -1.279926872184079e-02, 2.269325002983267e-02, -1.246933130373105e-02, -1.286204461927969e-02, 2.213771058093030e-02, -1.253932692775752e-02, -1.286204461927969e-02, 2.213771058093030e-02, -1.253932692775752e-02, -1.410007217644339e-02, 2.885216186742613e-02, -1.373407385724263e-02, -2.414297200237653e-02, 1.472060466257312e-02, -2.373094867411894e-02, -2.116942003310197e-02, 1.671341085131755e-02, -2.078742854062423e-02, -1.836263625683324e-02, 1.980889411020530e-02, -1.801603611200732e-02, -1.980767446544399e-02, 1.811879018445980e-02, -1.943444380103255e-02, -1.980767446544399e-02, 1.811879018445980e-02, -1.943444380103255e-02, -7.979489994901341e-03, 1.103081591133725e-02, -7.959059682329621e-03, -3.882429266304096e-01, 9.300925823122458e-02, -3.811949020836407e-01, -2.172630790107685e-01, 8.114126135879908e-02, -2.109905885132787e-01, -8.829857121452578e-02, 6.533077521433446e-02, -8.609700793976324e-02, -1.376326640861181e-01, 7.642797638011327e-02, -1.384576034388279e-01, -1.376326640861182e-01, 7.642797638011331e-02, -1.384576034388280e-01, -3.303038006675359e-02, 2.119508537472161e-02, -3.218508400223743e-02, -9.857180842515534e+01, 4.528023474059335e-02, -9.675144647904297e+01, -4.316548752171941e+01, 7.071096470287412e-02, -3.970004033771393e+01, -1.067006002434335e-01, 1.018028174442661e-01, -9.934322137236934e-02, -1.386699205122329e+01, 2.447486191545272e-01, -1.270532273867759e+01, -1.386699205122329e+01, 2.447486191545298e-01, -1.270532273867759e+01, -5.596968997088697e+03, 1.080420474093222e-02, -5.084525974174648e+03, -5.233292615481150e+06, 4.023020531725113e-03, -6.089592081932957e+06, -5.872283361791078e+05, 5.049892853365737e-03, -5.001555431605556e+05, -1.614154458110483e+01, 2.240111119954173e-01, -1.535107641069292e+01, -3.450847619494511e+05, 1.815739025300881e-02, -1.249632295437388e+05, -3.450847619494519e+05, 1.815739024585517e-02, -1.249632295437392e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
