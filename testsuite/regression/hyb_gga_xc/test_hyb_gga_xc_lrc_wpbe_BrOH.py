
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lrc_wpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.082732699274701e+01, -2.082735158516091e+01, -2.082753669979827e+01, -2.082713249057382e+01, -2.082733933165813e+01, -2.082733933165813e+01, -3.346020831543370e+00, -3.345995715683287e+00, -3.345449130645931e+00, -3.347128090741079e+00, -3.346022710482152e+00, -3.346022710482152e+00, -5.605383661546920e-01, -5.603453276547679e-01, -5.575621977869393e-01, -5.620815959118813e-01, -5.604651405656144e-01, -5.604651405656144e-01, -8.812493409780205e-02, -8.963466903830433e-02, -6.815241642551928e-01, -5.288561191875755e-02, -8.856451182033334e-02, -8.856451182033334e-02, -1.856637516567702e-05, -2.137892852592890e-05, -2.313961988138523e-03, -2.023696641134784e-06, -2.071350297751964e-05, -2.071350297751964e-05, -4.922660912281205e+00, -4.922268550608655e+00, -4.922626567928607e+00, -4.922321371763315e+00, -4.922451107547476e+00, -4.922451107547476e+00, -1.966009966712898e+00, -1.975938507264420e+00, -1.966989246014538e+00, -1.974705464641217e+00, -1.971515386065986e+00, -1.971515386065986e+00, -4.549694717529659e-01, -4.975127216727580e-01, -4.268808197437333e-01, -4.448462971250765e-01, -4.751471039888905e-01, -4.751471039888905e-01, -2.841998609202278e-02, -9.898280283503826e-02, -2.711764974837073e-02, -1.717654885591751e+00, -3.820168915501163e-02, -3.820168915501163e-02, -1.816656244334331e-06, -2.713490396107476e-06, -1.143539507197606e-06, -7.272523053996320e-03, -2.053146069515476e-06, -2.053146069515480e-06, -4.685064660621805e-01, -4.648213130788234e-01, -4.660465342829651e-01, -4.670625218932208e-01, -4.665460304710252e-01, -4.665460304710252e-01, -4.507051927815435e-01, -3.870238327746796e-01, -4.027420877649226e-01, -4.189988621288602e-01, -4.104251832238371e-01, -4.104251832238371e-01, -5.263862245227051e-01, -1.406094397798566e-01, -1.758661477920252e-01, -2.389594147453783e-01, -2.045232354694683e-01, -2.045232354694681e-01, -3.391094932276759e-01, -1.756172050734256e-03, -5.167602863772976e-03, -2.180675341341147e-01, -1.594202541506020e-02, -1.594202541506019e-02, -3.006512044171005e-05, -5.555003588404406e-08, -3.810632360343187e-07, -1.374336264782817e-02, -1.260307710094618e-06, -1.260307710085826e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lrc_wpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509993859536205e+01, -2.510002624343988e+01, -2.510042372170033e+01, -2.509898833650727e+01, -2.509998476396328e+01, -2.509998476396328e+01, -3.978166365413107e+00, -3.978210088332475e+00, -3.979578771458424e+00, -3.978077812064984e+00, -3.978206070309003e+00, -3.978206070309003e+00, -6.730070377871764e-01, -6.714681202881665e-01, -6.318937532587185e-01, -6.384779742557927e-01, -6.724491401887658e-01, -6.724491401887658e-01, -1.135239026824135e-01, -1.174668808108378e-01, -8.456778911091215e-01, -6.330974297177622e-02, -1.147013630489759e-01, -1.147013630489759e-01, -3.786340114157121e-05, -4.367994215800918e-05, -4.890973551444549e-03, -4.062738412555547e-06, -4.232742033657191e-05, -4.232742033657191e-05, -6.158129582542702e+00, -6.160992368416536e+00, -6.158421757826432e+00, -6.160647734785287e+00, -6.159598164475180e+00, -6.159598164475180e+00, -2.087676300832527e+00, -2.105338691799501e+00, -2.078462903787872e+00, -2.092103210850535e+00, -2.112097851970764e+00, -2.112097851970764e+00, -6.131812684078315e-01, -6.954804276968740e-01, -5.760834265117308e-01, -6.233691666399805e-01, -6.439512383956811e-01, -6.439512383956811e-01, -3.992294374171494e-02, -1.088675562314648e-01, -3.809000228706419e-02, -2.286248477757860e+00, -4.883453259233891e-02, -4.883453259233891e-02, -3.646948967277682e-06, -5.452851063037440e-06, -2.304982312533840e-06, -1.343424598269514e-02, -4.130047645200970e-06, -4.130047645072139e-06, -6.571230014417628e-01, -6.525824104761455e-01, -6.544909860883228e-01, -6.557633729013427e-01, -6.551504882116254e-01, -6.551504882116254e-01, -6.327628933314248e-01, -5.016005588782072e-01, -5.443145548500570e-01, -5.824256969554185e-01, -5.634918423877109e-01, -5.634918423877109e-01, -7.330748194143267e-01, -1.556810932845873e-01, -2.088063711126624e-01, -3.243556089599547e-01, -2.632212194163102e-01, -2.632212194163100e-01, -4.428750745373101e-01, -3.782252366486144e-03, -1.013122818052455e-02, -3.134364754620965e-01, -2.500898386809828e-02, -2.500898386809833e-02, -6.146904762789679e-05, -1.111933285079006e-07, -7.638167588712159e-07, -2.205747592313017e-02, -2.536465115723577e-06, -2.536465115871452e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lrc_wpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.859989745990012e-09, -6.859944217277187e-09, -6.859662578096960e-09, -6.860409680781709e-09, -6.859966392132289e-09, -6.859966392132289e-09, -8.413761037817686e-06, -8.413799001115910e-06, -8.413479923241355e-06, -8.407093155852938e-06, -8.413641573320626e-06, -8.413641573320626e-06, -3.996636426550912e-03, -4.016984849985661e-03, -4.463842155248787e-03, -4.344053368068954e-03, -4.004050412836742e-03, -4.004050412836742e-03, -2.436795544060720e-01, -2.274588954153322e-01, -2.021995518947167e-03, -4.643425886748507e-01, -2.388470995614931e-01, -2.388470995614931e-01, 2.910181503654055e-02, 3.127419129681409e-02, -1.160788621719374e-01, 5.516020158868585e-03, 3.262767184599838e-02, 3.262767184599838e-02, -1.793084910550870e-06, -1.791431791850697e-06, -1.792913914135718e-06, -1.791628781511629e-06, -1.792244326085520e-06, -1.792244326085520e-06, -6.728546764800819e-05, -6.593452839134337e-05, -6.733409138856619e-05, -6.629015588680492e-05, -6.626047977623910e-05, -6.626047977623910e-05, -4.345353460253627e-03, -4.187334759466962e-05, -5.202671839852433e-03, -8.866306898730174e-04, -3.535033060021803e-03, -3.535033060021803e-03, -4.762036610412206e-01, -2.335155657000414e-01, -5.173944257450308e-01, -5.368598105266151e-05, -5.324402535021751e-01, -5.324402535021751e-01, 5.685412269962356e-03, 7.078335565444890e-03, 2.144795204289762e-02, -3.473519884462566e-01, 1.093970676533213e-02, 1.093970676561012e-02, 2.527997812538724e-03, 6.249658169962952e-04, 1.243294809705706e-03, 1.766918341258696e-03, 1.499750736991651e-03, 1.499750736991649e-03, 3.491211158089438e-03, -9.153523272890676e-03, -6.101530197595744e-03, -2.997698334263279e-03, -4.595764757071776e-03, -4.595764757071772e-03, -3.860703251935818e-04, -1.348751263515606e-01, -8.091773594942164e-02, -2.504285046484095e-02, -4.758811320666229e-02, -4.758811320666248e-02, -1.266971393997508e-02, -7.351751994015873e-02, -2.351158489884136e-01, -1.392033432224410e-02, -5.513679910915646e-01, -5.513679910915611e-01, 2.368471295221216e-02, 1.779805356790428e-03, 4.326093092240225e-03, -5.838113289178265e-01, 1.480405241599477e-02, 1.480405241517125e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
