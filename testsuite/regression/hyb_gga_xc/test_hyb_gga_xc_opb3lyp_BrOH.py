
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_opb3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_opb3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.677096633799393e+01, -1.677098829637416e+01, -1.677114293925499e+01, -1.677078223183092e+01, -1.677097744429648e+01, -1.677097744429648e+01, -2.829543152264466e+00, -2.829524822645612e+00, -2.829135330192509e+00, -2.830393872533039e+00, -2.829545523652406e+00, -2.829545523652406e+00, -5.943890710060274e-01, -5.942351937464665e-01, -5.912041538811014e-01, -5.949821318591352e-01, -5.943308665778017e-01, -5.943308665778017e-01, -1.847258264564506e-01, -1.862498200255561e-01, -6.928628034713443e-01, -1.459191800381448e-01, -1.851742952537450e-01, -1.851742952537450e-01, -4.718927507377096e-02, -4.786261721159665e-02, -8.409858847353172e-02, -4.099164542259216e-02, -4.740182105504730e-02, -4.740182105504730e-02, -4.091554342137039e+00, -4.091228954871670e+00, -4.091525789481778e+00, -4.091272706638849e+00, -4.091380774925280e+00, -4.091380774925280e+00, -1.716455662518912e+00, -1.724845369648600e+00, -1.716471361317475e+00, -1.723001883788630e+00, -1.722131571937624e+00, -1.722131571937624e+00, -5.020253154409677e-01, -5.255974274980212e-01, -4.789745991977792e-01, -4.849050658927859e-01, -5.176542650682652e-01, -5.176542650682652e-01, -1.177613615289204e-01, -1.928087458908455e-01, -1.164111936763042e-01, -1.514798960519016e+00, -1.293014205106359e-01, -1.293014205106359e-01, -4.019114369195302e-02, -4.150640390662366e-02, -3.178354917394253e-02, -9.185183969076006e-02, -3.772561843144066e-02, -3.772561843144066e-02, -4.960406677464809e-01, -4.975477790046575e-01, -4.970458529872420e-01, -4.966281576908389e-01, -4.968398189858401e-01, -4.968398189858401e-01, -4.804335924931549e-01, -4.490590576469821e-01, -4.590815949947468e-01, -4.676738977248108e-01, -4.632750281539949e-01, -4.632750281539949e-01, -5.501922889567542e-01, -2.338312609672225e-01, -2.679025311254997e-01, -3.223337528459702e-01, -2.936781693330369e-01, -2.936781693330368e-01, -4.087240525835938e-01, -8.420156662275810e-02, -8.987424988513447e-02, -3.005857608897057e-01, -1.028463338132685e-01, -1.028463338132685e-01, -5.204698075423606e-02, -2.845763421480671e-02, -3.315858539898827e-02, -9.954078005358383e-02, -3.377165399640502e-02, -3.377165399640501e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_opb3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_opb3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.041958184884550e+01, -2.041964539638914e+01, -2.041994471930482e+01, -2.041890379749130e+01, -2.041961522938751e+01, -2.041961522938751e+01, -3.361150380793384e+00, -3.361172894362016e+00, -3.361927264151386e+00, -3.361324250386323e+00, -3.361175956810444e+00, -3.361175956810444e+00, -6.855302468354880e-01, -6.847744499583293e-01, -6.660307477989957e-01, -6.709042506067008e-01, -6.852547957725568e-01, -6.852547957725568e-01, -2.109638305909779e-01, -2.129384648032621e-01, -8.159266101056571e-01, -1.674752038376916e-01, -2.115416991576565e-01, -2.115416991576565e-01, -2.066731720681202e-02, -2.129805754484645e-02, -5.989856450207957e-02, -1.352273856648764e-02, -2.109270624959714e-02, -2.109270624959714e-02, -5.075569104535750e+00, -5.077334214349911e+00, -5.075750382614928e+00, -5.077122831076463e+00, -5.076472872827235e+00, -5.076472872827235e+00, -1.875614049157116e+00, -1.889288158874551e+00, -1.869117041150506e+00, -1.879755767403472e+00, -1.893404148921201e+00, -1.893404148921201e+00, -6.102665531191878e-01, -6.721463473186640e-01, -5.805423632756154e-01, -6.129656727698745e-01, -6.335977162430312e-01, -6.335977162430312e-01, -1.351310476510216e-01, -2.230797063584184e-01, -1.314397877325900e-01, -1.941256882155703e+00, -1.476048830650605e-01, -1.476048830650605e-01, -1.316859056487672e-02, -1.423545375756493e-02, -1.088158498248306e-02, -8.353286992898455e-02, -1.299249885989636e-02, -1.299249885989635e-02, -6.455640213373055e-01, -6.380685602780696e-01, -6.406413828306976e-01, -6.427104672143745e-01, -6.416659238267051e-01, -6.416659238267051e-01, -6.268681033751428e-01, -5.297605953593068e-01, -5.550198479423541e-01, -5.804574858459520e-01, -5.672923005225503e-01, -5.672923005225504e-01, -7.021033753685071e-01, -2.672618552435780e-01, -3.060539238426681e-01, -3.795777894250467e-01, -3.394560160855845e-01, -3.394560160855843e-01, -4.812693927790679e-01, -5.628361823312202e-02, -7.608187838979935e-02, -3.611810482131883e-01, -1.072417521622742e-01, -1.072417521622742e-01, -2.341960384480607e-02, -6.725484151029688e-03, -9.458946301451115e-03, -1.007158922680269e-01, -1.139112858665610e-02, -1.139112858665610e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_opb3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_opb3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.850684787013267e-09, -4.850664401226810e-09, -4.850500241375238e-09, -4.850835538619729e-09, -4.850674648246919e-09, -4.850674648246919e-09, -6.268214467131212e-06, -6.268423808623928e-06, -6.273155708368696e-06, -6.259735359640388e-06, -6.268216086735206e-06, -6.268216086735206e-06, -3.335464202592363e-03, -3.333583032485473e-03, -3.250882004645483e-03, -3.178233833580001e-03, -3.334850618233677e-03, -3.334850618233677e-03, -2.456342243682912e-01, -2.461991511734879e-01, -1.875948702440059e-03, -3.172652187809996e-01, -2.460172280344210e-01, -2.460172280344210e-01, -1.875558928359045e+03, -1.645077177850012e+03, -1.649256084262900e+01, -1.389659636501858e+04, -1.713590699791715e+03, -1.713590699791715e+03, -1.448678517643088e-06, -1.449712235950929e-06, -1.448775933845189e-06, -1.449579793784760e-06, -1.449219521089129e-06, -1.449219521089129e-06, -4.598534943051821e-05, -4.512045708643779e-05, -4.594155489788459e-05, -4.526673426547691e-05, -4.545571364172412e-05, -4.545571364172412e-05, -7.271372443610162e-03, -6.845076624434880e-03, -8.728640815848357e-03, -9.220839304021363e-03, -6.522432773269301e-03, -6.522432773269301e-03, -3.509244842508454e-01, -1.267128205729385e-01, -4.826107955398852e-01, -8.706503271480018e-05, -4.099878940484274e-01, -4.099878940484274e-01, -1.566698593248965e+04, -1.068512487224634e+04, -3.289944564482537e+04, -4.010078987399683e+00, -1.558136788985765e+04, -1.558136788985766e+04, -9.283769660527991e-03, -8.663424502909198e-03, -8.852191136315281e-03, -9.020265879463892e-03, -8.933445932606350e-03, -8.933445932606350e-03, -1.074144414348639e-02, -1.056793204817284e-02, -1.028796593227988e-02, -1.018242498534832e-02, -1.023081962186183e-02, -1.023081962186183e-02, -5.631373856607621e-03, -8.186604799266541e-02, -6.123248200081478e-02, -3.830756470550564e-02, -4.959218892761948e-02, -4.959218892761952e-02, -1.520704852254596e-02, -2.068150967448878e+01, -5.687764657054654e+00, -5.459667660444371e-02, -1.404245725202408e+00, -1.404245725202413e+00, -1.099531359729483e+03, -5.190613007586547e+05, -7.817529149482511e+04, -2.059813975519594e+00, -2.765851530457194e+04, -2.765851530457204e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
