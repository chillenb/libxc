
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2b_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.571101835475836e+01, -1.571105138626405e+01, -1.571122847852164e+01, -1.571073641944799e+01, -1.571098994433101e+01, -1.571098994433101e+01, -2.648768642810277e+00, -2.648757139391654e+00, -2.648554919913638e+00, -2.649397409289047e+00, -2.648817095733371e+00, -2.648817095733371e+00, -5.583354560904279e-01, -5.580837000116493e-01, -5.533998920602285e-01, -5.572322913097633e-01, -5.560218646240629e-01, -5.560218646240629e-01, -1.748220522785267e-01, -1.761414371039308e-01, -6.418701865957243e-01, -1.460145334699282e-01, -1.568091301892041e-01, -1.568091301892041e-01, -6.860092915998229e-03, -7.236797270475034e-03, -4.420892446433541e-02, -3.883212174043874e-03, -4.915934533739795e-03, -4.915934533739792e-03, -3.873960194026262e+00, -3.874182356840383e+00, -3.873975278338705e+00, -3.874171322907407e+00, -3.874070033402350e+00, -3.874070033402350e+00, -1.590435961550161e+00, -1.598545186240391e+00, -1.589417150874929e+00, -1.596504766840860e+00, -1.595492637454815e+00, -1.595492637454815e+00, -4.817153954593922e-01, -5.103993622193537e-01, -4.495635779904946e-01, -4.573524453167805e-01, -4.877619848622636e-01, -4.877619848622636e-01, -1.117188150222717e-01, -1.852456421798217e-01, -1.042398284725499e-01, -1.454036840989219e+00, -1.242215912062150e-01, -1.242215912062150e-01, -2.975096699736608e-03, -3.793597438793551e-03, -2.879927532989488e-03, -7.181831129520785e-02, -3.486142682490020e-03, -3.486142682490021e-03, -4.681841260639665e-01, -4.717268011799284e-01, -4.711222334966528e-01, -4.702073337744753e-01, -4.707243784191161e-01, -4.707243784191161e-01, -4.524688348027118e-01, -4.175749481668274e-01, -4.294270479524097e-01, -4.416439395621280e-01, -4.352984931553899e-01, -4.352984931553899e-01, -5.340475330867941e-01, -2.210585428764041e-01, -2.507865287100484e-01, -3.045367686399975e-01, -2.751058137355775e-01, -2.751058137355775e-01, -3.871237360772495e-01, -4.226334435413265e-02, -5.824540786871688e-02, -2.905921862283647e-01, -8.907339927776009e-02, -8.907339927776010e-02, -9.844346816976280e-03, -9.905535951982623e-04, -2.099683130194251e-03, -8.428353205936862e-02, -3.219048027758392e-03, -3.219048027758387e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2b_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.997006243749396e+01, -1.997013812502747e+01, -1.997045908755021e+01, -1.996933330365052e+01, -1.996992541000425e+01, -1.996992541000425e+01, -3.286451132625525e+00, -3.286490204927848e+00, -3.287470945874269e+00, -3.286373387314611e+00, -3.286575276125023e+00, -3.286575276125023e+00, -6.628572429161520e-01, -6.616615619193390e-01, -6.310826740492652e-01, -6.366305614415106e-01, -6.360486009146861e-01, -6.360486009146861e-01, -1.835041936216289e-01, -1.864892138252644e-01, -7.701039226926252e-01, -1.459222780947663e-01, -1.589590567797359e-01, -1.589590567797359e-01, -9.240651493341136e-03, -9.750255696510357e-03, -5.779548395004389e-02, -5.215652830856112e-03, -6.610474092638213e-03, -6.610474092638203e-03, -4.981681619710183e+00, -4.983339390075762e+00, -4.981757840380565e+00, -4.983221418293303e+00, -4.982522716468752e+00, -4.982522716468752e+00, -1.750750861602174e+00, -1.767930637922692e+00, -1.730227789272712e+00, -1.745449926323660e+00, -1.770133791508477e+00, -1.770133791508477e+00, -6.020564242756008e-01, -6.533743975862295e-01, -5.580476521280117e-01, -5.842478419498036e-01, -6.126698971974858e-01, -6.126698971974858e-01, -1.204760914207902e-01, -1.811596631776494e-01, -1.146964328537282e-01, -1.887240867734032e+00, -1.272227278167835e-01, -1.272227278167835e-01, -3.990715956260885e-03, -5.094605018999120e-03, -3.861893658237586e-03, -8.672167607608483e-02, -4.679192281145771e-03, -4.679192281145777e-03, -5.992040225975618e-01, -6.030953111661733e-01, -6.020851941892343e-01, -6.007984821301674e-01, -6.014813724935154e-01, -6.014813724935154e-01, -5.830203422770222e-01, -4.994585690487134e-01, -5.306669473524848e-01, -5.593769735241174e-01, -5.452969250968147e-01, -5.452969250968147e-01, -6.840681187707743e-01, -2.211707208743455e-01, -2.656319726867074e-01, -3.611626140025721e-01, -3.097638807769888e-01, -3.097638807769889e-01, -4.624280856425595e-01, -5.555116519789608e-02, -7.395644692591898e-02, -3.544861944326596e-01, -1.001414735912487e-01, -1.001414735912486e-01, -1.328190735084130e-02, -1.323672279144039e-03, -2.812244382014497e-03, -9.648596253843877e-02, -4.319003782331471e-03, -4.319003782331460e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2b_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.383916343780089e-09, -2.383873655824832e-09, -2.383701530510473e-09, -2.384336310524238e-09, -2.384001167386390e-09, -2.384001167386390e-09, -3.569462365473106e-06, -3.569279099483684e-06, -3.564695370900267e-06, -3.569970715675292e-06, -3.568900849341105e-06, -3.568900849341105e-06, -2.510606808663753e-03, -2.524821753658430e-03, -2.886581320986137e-03, -2.793269979720132e-03, -2.810063348767162e-03, -2.810063348767162e-03, -3.485165231191174e-01, -3.355383506378768e-01, -1.365491757392175e-03, -6.637450517571435e-01, -5.330849719402936e-01, -5.330849719402940e-01, -1.115430755133964e+00, -1.211993274029023e+00, -1.468743454145203e+00, -7.400395658056564e-01, -1.073481235574634e+00, -1.073481235576768e+00, -6.402381496861182e-07, -6.392700628549655e-07, -6.401938975773747e-07, -6.393390575065106e-07, -6.397454738600236e-07, -6.397454738600236e-07, -4.093131002621215e-05, -3.966515180443477e-05, -4.206707629118302e-05, -4.092018420816009e-05, -3.968636470756443e-05, -3.968636470756443e-05, -3.989596299042247e-03, -5.369146637191792e-03, -5.432777922389107e-03, -6.691352150693731e-03, -3.747830774615071e-03, -3.747830774615071e-03, -1.026903461208382e+00, -2.947920266346612e-01, -1.148681092930871e+00, -4.835537958912736e-05, -1.025101564841931e+00, -1.025101564841931e+00, -8.350784730704706e-01, -8.591252769814667e-01, -4.577592170133276e+00, -1.737643390474000e+00, -2.385523647604363e+00, -2.385523647596121e+00, -2.224282171238436e-02, -8.146099497016425e-03, -1.070278781661842e-02, -1.427774097353588e-02, -1.226835896498072e-02, -1.226835896498072e-02, -4.019073926260851e-02, -8.222332991632065e-03, -6.670296026329507e-03, -5.805171818735846e-03, -6.097215718923733e-03, -6.097215718923733e-03, -3.985300553124902e-03, -1.493635726778191e-01, -8.429592145006866e-02, -3.113907564302672e-02, -5.243470389287416e-02, -5.243470389287408e-02, -1.130512772154101e-02, -1.329797004956253e+00, -1.419219471194437e+00, -3.551382556623971e-02, -1.789143812590204e+00, -1.789143812590205e+00, -1.085140176004690e+00, -1.853152564708493e+00, -1.437292352224978e+00, -1.847203705785487e+00, -2.875592198816504e+00, -2.875592198806506e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
