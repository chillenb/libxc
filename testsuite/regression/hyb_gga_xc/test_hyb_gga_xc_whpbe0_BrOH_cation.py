
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_whpbe0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.259274755647846e+00, -5.259282456895386e+00, -5.259332276448605e+00, -5.259217378316661e+00, -5.259275366780911e+00, -5.259275366780911e+00, -8.816012035673135e-01, -8.815968771109453e-01, -8.815184141133803e-01, -8.818202458755318e-01, -8.816170301368345e-01, -8.816170301368345e-01, -1.740073318091127e-01, -1.737745827882874e-01, -1.686724398850016e-01, -1.701123808620273e-01, -1.701877262937307e-01, -1.701877262937307e-01, -3.444501944760289e-02, -3.527376732312006e-02, -2.034732273920836e-01, -2.270954111272253e-02, -2.947226279285973e-02, -2.947226279285972e-02, -2.169536801942102e-06, -2.539462165017658e-06, -8.266934266756428e-04, -4.121317916469988e-07, -1.207644770245466e-06, -1.207644770245466e-06, -1.289203587537504e+00, -1.289260707747508e+00, -1.289207887976905e+00, -1.289258265325638e+00, -1.289231441809449e+00, -1.289231441809449e+00, -5.210923191222303e-01, -5.240048150568773e-01, -5.204235100788476e-01, -5.229828014680512e-01, -5.230488455403788e-01, -5.230488455403788e-01, -1.567748414210340e-01, -1.799574991946075e-01, -1.444265104995107e-01, -1.590928988701134e-01, -1.602368500540497e-01, -1.602368500540497e-01, -1.213539921458200e-02, -3.500057728366564e-02, -1.035087642830909e-02, -4.973295419425564e-01, -1.603228671397059e-02, -1.603228671397059e-02, -1.896939532455727e-07, -3.850142502823019e-07, -1.737768133357948e-07, -3.894319157512660e-03, -3.601422098656417e-07, -3.601422099320728e-07, -1.718720873604285e-01, -1.669785102235704e-01, -1.685979833542876e-01, -1.700175551590684e-01, -1.692981310367337e-01, -1.692981310367337e-01, -1.689851213553369e-01, -1.273823084099646e-01, -1.366865731776813e-01, -1.477397228276226e-01, -1.418964901715844e-01, -1.418964901715844e-01, -1.873068397896313e-01, -4.804539943570640e-02, -6.068572354112138e-02, -8.801721932832708e-02, -7.282940652746964e-02, -7.282940652746966e-02, -1.169247451587331e-01, -7.001353475743059e-04, -2.048012736440365e-03, -8.752170818440111e-02, -7.167912377788277e-03, -7.167912377788263e-03, -6.152518357260056e-06, -7.340311814160500e-09, -6.849870664456039e-08, -6.161517670871323e-03, -2.771940306155084e-07, -2.771940306414407e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_whpbe0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.384627389484747e+00, -6.384620120605842e+00, -6.384657244688037e+00, -6.384642172842202e+00, -6.384745367895287e+00, -6.384768632346685e+00, -6.384403603782194e+00, -6.384338457506636e+00, -6.384641244307566e+00, -6.384507594110399e+00, -6.384641244307566e+00, -6.384507594110399e+00, -1.090302940945723e+00, -1.090350213049131e+00, -1.090319628358381e+00, -1.090368948790358e+00, -1.090740755602693e+00, -1.090817012703165e+00, -1.090177493610971e+00, -1.090255689058545e+00, -1.090138628414944e+00, -1.090605871815483e+00, -1.090138628414944e+00, -1.090605871815483e+00, -2.409100750756604e-01, -2.418692348889780e-01, -2.401862938909338e-01, -2.413564631157900e-01, -2.256466974929067e-01, -2.243234396172150e-01, -2.268438338033822e-01, -2.272774167886056e-01, -2.341830781952995e-01, -2.217715874726010e-01, -2.341830781952995e-01, -2.217715874726010e-01, -5.324649347096738e-02, -5.340302303672616e-02, -5.542413956848247e-02, -5.560845791544119e-02, -2.750001606968415e-01, -2.820056379353813e-01, -3.100543487914374e-02, -3.124336445534193e-02, -3.717145224110039e-02, -3.198490511389616e-02, -3.717145224110037e-02, -3.198490511389609e-02, -3.947243246278413e-06, -4.736484486640486e-06, -4.554874488032552e-06, -5.600651166037699e-06, -1.609870909722530e-03, -1.916712884870121e-03, -8.466462134658138e-07, -8.051150579675397e-07, -2.775875740216924e-06, -5.165755382255801e-07, -2.775875740215037e-06, -5.165755382234088e-07, -1.651383994645358e+00, -1.651028563577855e+00, -1.652270432732940e+00, -1.651892090220025e+00, -1.651430069957865e+00, -1.651059599224130e+00, -1.652195844849801e+00, -1.651838745007915e+00, -1.651837627133621e+00, -1.651463665403876e+00, -1.651837627133621e+00, -1.651463665403876e+00, -5.915832919555208e-01, -5.915579592681164e-01, -5.969633354812436e-01, -5.968222396840015e-01, -5.852148391887454e-01, -5.862422883784216e-01, -5.898216386020279e-01, -5.909093398094444e-01, -5.988230544755322e-01, -5.960437773086142e-01, -5.988230544755322e-01, -5.960437773086142e-01, -2.297915635609255e-01, -2.296307167201331e-01, -2.506454747070084e-01, -2.507659700237918e-01, -2.121287784262244e-01, -2.149879074728721e-01, -2.249280353345443e-01, -2.265389401950951e-01, -2.359670697289016e-01, -2.320639070553884e-01, -2.359670697289016e-01, -2.320639070553884e-01, -1.748363555630503e-02, -1.756784631715164e-02, -4.584359418071546e-02, -4.592417575580097e-02, -1.488809694247730e-02, -1.580763699617211e-02, -6.740249848861763e-01, -6.738492815201345e-01, -2.272646290399589e-02, -2.212587784651670e-02, -2.272646290399589e-02, -2.212587784651670e-02, -3.570955455955117e-07, -4.006891318672720e-07, -7.544906198257126e-07, -7.891690516228143e-07, -3.189793723113366e-07, -3.778342763941499e-07, -6.868293082292915e-03, -6.985360126877181e-03, -3.399985951733916e-07, -8.720533609104685e-07, -3.399985951790609e-07, -8.720533610207331e-07, -2.305026276820755e-01, -2.307388064959418e-01, -2.324288650454828e-01, -2.326978600347048e-01, -2.320464281318076e-01, -2.323083502322909e-01, -2.315062866889877e-01, -2.317499066163050e-01, -2.318043430725398e-01, -2.320568443489822e-01, -2.318043430725398e-01, -2.320568443489822e-01, -2.233768403163642e-01, -2.235435202814413e-01, -1.876447494931791e-01, -1.880011186041472e-01, -2.033634052351454e-01, -2.037423581962511e-01, -2.163164649414756e-01, -2.165456480127509e-01, -2.102786977444767e-01, -2.105279755988231e-01, -2.102786977444767e-01, -2.105279755988231e-01, -2.615355009231808e-01, -2.618067913737398e-01, -6.487303461137654e-02, -6.496603029426758e-02, -8.757340441654729e-02, -8.778819172454344e-02, -1.386017453122334e-01, -1.388000694570043e-01, -1.122821195694045e-01, -1.122943207664257e-01, -1.122821195694045e-01, -1.122943207664257e-01, -1.747154323069709e-01, -1.752329143765818e-01, -1.505673703610632e-03, -1.539946275396169e-03, -3.854043755260125e-03, -4.193156616402918e-03, -1.400669269667964e-01, -1.404897387334244e-01, -1.113776709278722e-02, -1.152310948049866e-02, -1.113776709278722e-02, -1.152310948049864e-02, -1.181638173746434e-05, -1.317716092977930e-05, -1.464795818468160e-08, -1.474842147308979e-08, -1.236357952504694e-07, -1.486534353169622e-07, -9.919120098458568e-03, -1.017979283208080e-02, -2.891151847261151e-07, -6.718530238065619e-07, -2.891151847235022e-07, -6.718530238478220e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_whpbe0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.333309915726637e-09, 3.855567579455844e-10, -3.333329458350806e-09, -3.333278152341956e-09, 3.855637563905792e-10, -3.333305415878134e-09, -3.333150773742281e-09, 3.855734091993355e-10, -3.333133977046140e-09, -3.333522617752571e-09, 3.854697494807899e-10, -3.333593435476722e-09, -3.333309505658140e-09, 3.855271085313426e-10, -3.333378173239811e-09, -3.333309505658140e-09, 3.855271085313426e-10, -3.333378173239811e-09, -3.672008691005122e-06, 2.158879157656427e-06, -3.673447875709877e-06, -3.671874871027585e-06, 2.159323527660124e-06, -3.673425921572227e-06, -3.670122208054248e-06, 2.169371669283230e-06, -3.670868865412779e-06, -3.671099689009419e-06, 2.149943255801801e-06, -3.672130953733748e-06, -3.674582555024115e-06, 2.159156568071321e-06, -3.670027317430008e-06, -3.674582555024115e-06, 2.159156568071321e-06, -3.670027317430008e-06, -1.166493763779647e-03, 3.586683876242116e-03, -1.161529199562820e-03, -1.183843881625073e-03, 3.559577090514688e-03, -1.177996360116978e-03, -1.566549369993047e-03, 2.876045381924161e-03, -1.561981200965342e-03, -1.514041848974477e-03, 2.810968523930000e-03, -1.516614454936095e-03, -1.498981943458903e-03, 2.852692094259074e-03, -1.389276807320073e-03, -1.498981943458903e-03, 2.852692094259074e-03, -1.389276807320073e-03, -1.296319265312608e-01, 3.108902575321890e-01, -1.135451796577107e-01, -1.220768992603159e-01, 3.280826843588528e-01, -1.024342165270275e-01, -7.555821153257293e-04, 1.940414170439823e-03, -6.265308292797548e-04, -2.507526512957429e-01, 2.258949661124237e-01, -2.408998116637237e-01, -1.543868450677163e-01, 1.882246441728870e-01, -3.609859903459835e-01, -1.543868450677165e-01, 1.882246441728873e-01, -3.609859903459850e-01, 4.195115767540678e-03, 8.471332723898200e-03, 4.179510353451605e-03, 4.926941317815099e-03, 9.964515393423459e-03, 4.901721336733014e-03, -8.446494921933523e-02, 5.126941006152715e-02, -1.038389132989190e-01, 1.501984025579037e-03, 3.008683449168684e-03, 1.502241957428120e-03, 2.185695963754029e-03, 4.414566270491809e-03, 2.204576348578219e-03, 2.185695964204030e-03, 4.414566270088269e-03, 2.204576349027919e-03, -7.541744351206430e-07, 5.666948009101149e-07, -7.551330360375012e-07, -7.524035543832515e-07, 5.704413223836728e-07, -7.533591828013976e-07, -7.540973797935647e-07, 5.668443577206054e-07, -7.550559628031032e-07, -7.525318245901076e-07, 5.701514261968389e-07, -7.534928378923840e-07, -7.532805484268897e-07, 5.686004611431787e-07, -7.542314541182153e-07, -7.532805484268897e-07, 5.686004611431787e-07, -7.542314541182153e-07, -3.058304847769713e-05, 1.221811741084532e-05, -3.058950165167957e-05, -2.988024820700274e-05, 1.218856108878283e-05, -2.991129400004479e-05, -3.083045476871956e-05, 1.161795009824474e-05, -3.086465150177727e-05, -3.023668385153665e-05, 1.159619612758267e-05, -3.025067546220993e-05, -3.003139009601115e-05, 1.250231835492394e-05, -3.008691346835419e-05, -3.003139009601115e-05, 1.250231835492394e-05, -3.008691346835419e-05, 3.472967242071036e-04, 1.180452397706796e-02, 2.888404791909823e-04, 3.170814864237007e-03, 1.489938286408802e-02, 3.177775468874323e-03, -2.382726392856369e-04, 1.535577972946644e-02, 7.113776279171896e-04, 4.186140786882831e-03, 2.278859644535717e-02, 5.024404758107393e-03, 1.057879804343752e-03, 1.179162458306085e-02, 3.249787015725900e-05, 1.057879804343748e-03, 1.179162458306085e-02, 3.249787015725814e-05, -2.973661494295686e-01, 1.261488607621168e-01, -3.046602866522214e-01, -1.221239261603088e-01, 1.139695105238702e-01, -1.205433656830579e-01, -3.172396478732615e-01, 1.279112469154852e-01, -3.185932162295371e-01, 2.044913331393042e-06, 1.207887057881010e-04, 1.938668534253971e-06, -2.937458294856755e-01, 2.409472748596690e-01, -3.767529101632656e-01, -2.937458294856755e-01, 2.409472748596690e-01, -3.767529101632656e-01, 1.466019342709504e-03, 2.933546798259037e-03, 1.465981068700370e-03, 1.847244791819527e-03, 3.699144102256803e-03, 1.847247168044452e-03, 1.842254433795555e-02, 3.685108437354808e-02, 1.842109938867086e-02, -3.175981292340370e-01, 1.250822448857004e-01, -3.075824896983158e-01, 7.050145851932117e-03, 1.410360645889085e-02, 7.043495013404113e-03, 7.050145855218907e-03, 1.410360646869916e-02, 7.043495016688128e-03, 6.811479647597049e-03, 2.514346072918196e-02, 6.895727502959918e-03, 4.869898955937308e-03, 2.157065992117518e-02, 4.956263225505270e-03, 5.484250625044710e-03, 2.270457728491302e-02, 5.570311856846051e-03, 6.045867127931661e-03, 2.373865089872573e-02, 6.130674856477353e-03, 5.758666919629223e-03, 2.321019190891285e-02, 5.844122171199174e-03, 5.758666919629223e-03, 2.321019190891285e-02, 5.844122171199174e-03, 8.538008714522764e-03, 2.977269840520045e-02, 8.616515834722387e-03, -2.055259111140411e-03, 1.592277215307748e-02, -1.917892726774183e-03, 1.810262765854862e-04, 1.838749842245184e-02, 3.119690675243529e-04, 2.848923408279263e-03, 2.169730037966074e-02, 2.951339226031687e-03, 1.452761067405614e-03, 1.995497716545398e-02, 1.566517897780935e-03, 1.452761067405614e-03, 1.995497716545398e-02, 1.566517897780935e-03, 2.335697337978213e-03, 1.183264719377924e-02, 2.356852383963906e-03, -6.483672096628765e-02, 8.498631964250428e-02, -6.372934725867516e-02, -3.508119028198035e-02, 7.821972418059023e-02, -3.381898507487946e-02, -1.780041008208749e-03, 6.964082434152352e-02, -1.111728457387148e-03, -1.449345928655550e-02, 7.796350422599263e-02, -1.473682997884015e-02, -1.449345928655568e-02, 7.796350422599266e-02, -1.473682997884018e-02, -2.311399547570921e-03, 2.285950305464996e-02, -2.025679254728883e-03, -7.431181865335058e-02, 4.213028450134424e-02, -7.640287606947080e-02, -1.680954646061737e-01, 6.458066222247318e-02, -1.865032162163535e-01, 1.014641810468492e-02, 1.099497136873529e-01, 1.233599250873067e-02, -3.765286066985566e-01, 2.182010199987041e-01, -4.792200287750911e-01, -3.765286066985561e-01, 2.182010199987039e-01, -4.792200287750941e-01, 5.048699455617121e-03, 1.056259116938041e-02, 4.992535311579074e-03, 2.005747838156352e-03, 4.011531506685853e-03, 2.005733725949835e-03, 2.510124655897813e-03, 5.020763908060611e-03, 2.510015594134157e-03, -4.165840063770853e-01, 2.002688123716920e-01, -4.145027296426648e-01, 8.998335788738366e-03, 1.800188742308661e-02, 8.995477756669413e-03, 8.998335792409303e-03, 1.800188743452388e-02, 8.995477760338825e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
