
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_01_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.615380430102901e+01, -1.615382536003212e+01, -1.615397174601734e+01, -1.615365734187139e+01, -1.615381458026409e+01, -1.615381458026409e+01, -2.609436676126137e+00, -2.609410793783993e+00, -2.608878540968100e+00, -2.610316168314125e+00, -2.609470665498442e+00, -2.609470665498442e+00, -4.384473390762487e-01, -4.381385632461805e-01, -4.310469060275263e-01, -4.351659196282864e-01, -4.340013424624265e-01, -4.340013424624265e-01, -5.317081135679302e-02, -5.543100996045049e-02, -5.248546689432232e-01, -2.203936365161389e-02, -3.448599066418837e-02, -3.448599066418834e-02, -1.594859309349127e-03, -1.671905648889973e-03, -3.101100724758095e-03, -9.566119035013409e-04, -1.184644122662619e-03, -1.184644122662619e-03, -3.827501194000771e+00, -3.827048218545113e+00, -3.827488581113059e+00, -3.827088577681693e+00, -3.827267114523349e+00, -3.827267114523349e+00, -1.527827403264213e+00, -1.536347010250564e+00, -1.526869453921371e+00, -1.534407631906107e+00, -1.532986154274276e+00, -1.532986154274276e+00, -3.611427378497405e-01, -3.885476856783409e-01, -3.289665333967894e-01, -3.363166815273076e-01, -3.670858367650230e-01, -3.670858367650230e-01, 1.917881698359330e-03, -4.603878107544933e-02, 3.183341017181153e-03, -1.330954343004126e+00, -9.519782144304514e-03, -9.519782144304514e-03, -7.490451858248667e-04, -9.364484986027456e-04, -7.269079946024569e-04, 2.061711995239448e-03, -8.667864089082224e-04, -8.667864089082224e-04, -3.504352178872029e-01, -3.507194257759472e-01, -3.506525569797378e-01, -3.505680686049016e-01, -3.506129342657225e-01, -3.506129342657225e-01, -3.380209281855858e-01, -2.953120366687125e-01, -3.087694112184512e-01, -3.210342285030919e-01, -3.148350734444403e-01, -3.148350734444403e-01, -4.117512571445477e-01, -8.144925076050337e-02, -1.178730862665710e-01, -1.830844534812557e-01, -1.490969665998194e-01, -1.490969665998194e-01, -2.647215676004140e-01, -3.331543529253430e-03, 9.918232092358495e-04, -1.724888704349355e-01, 3.452780438998002e-04, 3.452780438997547e-04, -2.186928295853251e-03, -2.652190618850754e-04, -5.414790287548139e-04, 9.381114696303617e-04, -8.055677082336526e-04, -8.055677082336514e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_01_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.938863252709128e+01, -1.938870505909978e+01, -1.938901476016044e+01, -1.938793590105141e+01, -1.938850301088782e+01, -1.938850301088782e+01, -3.094490380887687e+00, -3.094516551054352e+00, -3.095198842721230e+00, -3.094608072425661e+00, -3.094597263836064e+00, -3.094597263836064e+00, -5.564625523351918e-01, -5.558307232779358e-01, -5.417034098607970e-01, -5.464175971354966e-01, -5.453118722759169e-01, -5.453118722759169e-01, -1.161587798575484e-01, -1.174479008207732e-01, -6.568569692952140e-01, -8.817006743166567e-02, -9.794750698816176e-02, -9.794750698816179e-02, -2.085106818041635e-03, -2.184879077655426e-03, -9.099875407881189e-03, -1.256199645321962e-03, -1.552916241228028e-03, -1.552916241228028e-03, -4.739427730487590e+00, -4.741266183777948e+00, -4.739511081456325e+00, -4.741134064919351e+00, -4.740360019954284e+00, -4.740360019954284e+00, -1.686805679614234e+00, -1.699925451707416e+00, -1.676194074901374e+00, -1.687706507608938e+00, -1.699275788455552e+00, -1.699275788455552e+00, -4.798059337599950e-01, -5.316482940907744e-01, -4.392441460154557e-01, -4.615508111247606e-01, -4.887923903449807e-01, -4.887923903449807e-01, -5.945685594748799e-02, -1.295964491931469e-01, -5.264397944296650e-02, -1.740473957087433e+00, -6.771536412545523e-02, -6.771536412545523e-02, -9.854245583380806e-04, -1.229926781219767e-03, -9.565023124387209e-04, -2.493583907975507e-02, -1.139108043948667e-03, -1.139108043948667e-03, -4.885581052149902e-01, -4.832380272308399e-01, -4.850225619821514e-01, -4.865621193311933e-01, -4.857836799903588e-01, -4.857836799903588e-01, -4.739919828506024e-01, -3.944088741153081e-01, -4.141378791277733e-01, -4.358679070528533e-01, -4.244793760030305e-01, -4.244793760030305e-01, -5.604931028677456e-01, -1.674479986781234e-01, -1.993778174549044e-01, -2.625386757718128e-01, -2.270383108947345e-01, -2.270383108947344e-01, -3.588171231222659e-01, -8.439913084674826e-03, -1.579581960899478e-02, -2.481412665473089e-01, -3.771272367849589e-02, -3.771272367849586e-02, -2.850770336309255e-03, -3.509078068076042e-04, -7.138651833790271e-04, -3.400409132481866e-02, -1.059231302782971e-03, -1.059231302782970e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_01_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_01", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.501494139460797e-09, -5.501467809567873e-09, -5.501276094619674e-09, -5.501669384676568e-09, -5.501473914941591e-09, -5.501473914941591e-09, -6.626669314436217e-06, -6.626960247754939e-06, -6.633062912941748e-06, -6.617579298341339e-06, -6.626397518431251e-06, -6.626397518431251e-06, -2.211453951511051e-03, -2.207248489492481e-03, -2.078332308254590e-03, -2.042386354723444e-03, -2.061439303966697e-03, -2.061439303966697e-03, 2.228324008480804e-01, 2.059898439095595e-01, -1.422147634710081e-03, 7.138879828929453e-01, 4.527749750620651e-01, 4.527749750620654e-01, -3.152011623429051e-05, -3.746430291294078e-05, 7.661253067633655e+00, -6.555759302604450e-06, -1.450729670521029e-05, -1.450729670515303e-05, -1.574317340354926e-06, -1.575502302116550e-06, -1.574356511731519e-06, -1.575402722983161e-06, -1.574925591988825e-06, -1.574925591988825e-06, -4.503687338344631e-05, -4.422659493916181e-05, -4.500528114692845e-05, -4.428868616925027e-05, -4.460427436223221e-05, -4.460427436223221e-05, -4.257956768304181e-03, -4.384158166029046e-03, -5.107219489950946e-03, -6.105318933063974e-03, -4.200533344945630e-03, -4.200533344945630e-03, 2.324148496004967e+00, 2.368869734159098e-01, 2.863901248257299e+00, -8.555871023887833e-05, 1.438515643387654e+00, 1.438515643387654e+00, -3.865861505462508e-06, -6.891629716434674e-06, -1.167193043845368e-05, 6.390488387115412e+00, -1.151191687023332e-05, -1.151191687021594e-05, -6.273903121366968e-03, -5.755756375119098e-03, -5.913089203734302e-03, -6.061086204840288e-03, -5.984780439690559e-03, -5.984780439690559e-03, -7.121427933312212e-03, -5.320581351050247e-03, -5.722481940170894e-03, -6.128689006946095e-03, -5.928613078727100e-03, -5.928613078727100e-03, -3.712215118206521e-03, 7.399605956947417e-02, 1.965338529178225e-02, -8.072321603644036e-03, 1.814785449366607e-04, 1.814785449366662e-04, -6.344107934360915e-03, 7.350571416781538e+00, 7.902511743852782e+00, -1.112814027876171e-02, 4.139433858860006e+00, 4.139433858860006e+00, 6.933183347797157e-05, -5.234217673500627e-07, -2.522696023660347e-06, 4.717827169539841e+00, -1.091852996607755e-05, -1.091852996611657e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
