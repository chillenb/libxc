
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe38_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.314182414309374e+01, -1.314183979190141e+01, -1.314195632811466e+01, -1.314169914448392e+01, -1.314183200517956e+01, -1.314183200517956e+01, -2.212285804946615e+00, -2.212271612387879e+00, -2.211971450938161e+00, -2.212949625388428e+00, -2.212287756817223e+00, -2.212287756817223e+00, -4.623020112380022e-01, -4.621222086682542e-01, -4.588084080032913e-01, -4.617524202788241e-01, -4.622349017908291e-01, -4.622349017908291e-01, -1.446055127140468e-01, -1.458158477208453e-01, -5.407754016359660e-01, -1.150845769541075e-01, -1.449586002502865e-01, -1.449586002502865e-01, -1.062956992925255e-02, -1.113120795899111e-02, -4.405123102962895e-02, -5.109761382770004e-03, -1.101526833323371e-02, -1.101526833323371e-02, -3.204182618355953e+00, -3.204012981355116e+00, -3.204168691917670e+00, -3.204036718498281e+00, -3.204090451751663e+00, -3.204090451751663e+00, -1.341835748617872e+00, -1.348211835681744e+00, -1.342216137651197e+00, -1.347169623295199e+00, -1.345704873675683e+00, -1.345704873675683e+00, -3.976813152800648e-01, -4.285112658025016e-01, -3.792531492858450e-01, -3.933008200109713e-01, -4.111731230765888e-01, -4.111731230765888e-01, -9.116927096453822e-02, -1.528840093004476e-01, -8.961080310867703e-02, -1.203953712253176e+00, -1.012780249941860e-01, -1.012780249941860e-01, -4.929420770526969e-03, -5.632707827747235e-03, -4.221872373798433e-03, -5.977501440778219e-02, -5.132242014590461e-03, -5.132242014590461e-03, -4.106408286614188e-01, -4.072821864425007e-01, -4.084048285036092e-01, -4.093315870399284e-01, -4.088610840306521e-01, -4.088610840306521e-01, -3.990433074366185e-01, -3.519199080141746e-01, -3.633726490191241e-01, -3.753385197464283e-01, -3.690312286780848e-01, -3.690312286780848e-01, -4.471867450938491e-01, -1.837897065380059e-01, -2.093045074979338e-01, -2.536531731480084e-01, -2.296759178185269e-01, -2.296759178185268e-01, -3.204683304572220e-01, -4.105229640333470e-02, -5.451673008385446e-02, -2.396096529237257e-01, -7.514990369287326e-02, -7.514990369287326e-02, -1.245177462811664e-02, -1.542994213933013e-03, -2.930710184601184e-03, -7.165847635867177e-02, -4.362070803100768e-03, -4.362070803100760e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe38_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.584095060411809e+01, -1.584100579552631e+01, -1.584125546410849e+01, -1.584035162371773e+01, -1.584097968136711e+01, -1.584097968136711e+01, -2.632038092215514e+00, -2.632067302096721e+00, -2.632974631425720e+00, -2.631947919494436e+00, -2.632063893049114e+00, -2.632063893049114e+00, -5.468431009148083e-01, -5.458307893882368e-01, -5.194349630650572e-01, -5.237552506337044e-01, -5.464761834214122e-01, -5.464761834214122e-01, -1.650273517682504e-01, -1.679459585442207e-01, -6.588296215017437e-01, -1.227180625867391e-01, -1.659083204655753e-01, -1.659083204655753e-01, -1.410165790330320e-02, -1.475988953366529e-02, -5.553146315718254e-02, -6.806333886488541e-03, -1.460631038666956e-02, -1.460631038666956e-02, -4.002569616462603e+00, -4.004421498110696e+00, -4.002758494911129e+00, -4.004198439927159e+00, -4.003519809887958e+00, -4.003519809887958e+00, -1.437536842611949e+00, -1.448982968569493e+00, -1.431197934764365e+00, -1.440063190757992e+00, -1.453760910221695e+00, -1.453760910221695e+00, -5.083265487155073e-01, -5.619624371150203e-01, -4.839171231899597e-01, -5.151507447111626e-01, -5.285416859892152e-01, -5.285416859892152e-01, -1.019827600216839e-01, -1.616350371861769e-01, -9.983373685570728e-02, -1.575215447160659e+00, -1.095032594293350e-01, -1.095032594293350e-01, -6.566382347698353e-03, -7.501053293490056e-03, -5.622593567889951e-03, -7.195727926328016e-02, -6.834510813357375e-03, -6.834510813357372e-03, -5.363693748673033e-01, -5.339823804739543e-01, -5.350724120516045e-01, -5.357464211315187e-01, -5.354289750478110e-01, -5.354289750478110e-01, -5.204081620702239e-01, -4.345384027634337e-01, -4.629324723245435e-01, -4.883025685351736e-01, -4.757222668268452e-01, -4.757222668268452e-01, -5.864198531088888e-01, -1.985373712796027e-01, -2.372756693110402e-01, -3.147825722124812e-01, -2.735729131142073e-01, -2.735729131142072e-01, -3.953828136361462e-01, -5.233774743510775e-02, -6.715507538807781e-02, -3.069509169544051e-01, -8.580691192701470e-02, -8.580691192701471e-02, -1.650335284799222e-02, -2.057076443620996e-03, -3.906030321730159e-03, -8.183195286485592e-02, -5.809802442717560e-03, -5.809802442717547e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe38_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.214659914466837e-09, -4.214630132359877e-09, -4.214452023785016e-09, -4.214940608181822e-09, -4.214644586620563e-09, -4.214644586620563e-09, -4.868371728552137e-06, -4.868330506256728e-06, -4.866419190116701e-06, -4.865771259857171e-06, -4.868271727135111e-06, -4.868271727135111e-06, -2.093704426747214e-03, -2.108204382317187e-03, -2.442458869956663e-03, -2.373076193617726e-03, -2.098973286279366e-03, -2.098973286279366e-03, -1.957976421966624e-01, -1.841665385837757e-01, -1.009299286270385e-03, -4.508734450271003e-01, -1.922916547455661e-01, -1.922916547455661e-01, -3.173632892955743e+00, -3.179961205740163e+00, -1.273265792016504e+00, -2.263370422537627e+00, -3.303340288380568e+00, -3.303340288380568e+00, -1.016086684497100e-06, -1.014399856192715e-06, -1.015915283439851e-06, -1.014603872003102e-06, -1.015224115831108e-06, -1.015224115831108e-06, -3.980483135989506e-05, -3.896184311038859e-05, -3.991272175884728e-05, -3.925826030285643e-05, -3.906979122620454e-05, -3.906979122620454e-05, -1.630344527601627e-03, 1.532257482517977e-03, -2.021170252538236e-03, 1.260981528552316e-03, -1.167554706741162e-03, -1.167554706741162e-03, -6.199300590847719e-01, -1.725246939779229e-01, -7.004884890584168e-01, -1.425880658160187e-05, -6.068668880730532e-01, -6.068668880730532e-01, -2.401263338504705e+00, -2.404818979482956e+00, -6.881910427993280e+00, -1.195695047181105e+00, -3.551557679386690e+00, -3.551557679386411e+00, 3.918797900052073e-03, 2.345964068661324e-03, 2.856737059117974e-03, 3.290134060321331e-03, 3.068975755473076e-03, 3.068975755473076e-03, 4.863882648915329e-03, -4.527409376632076e-03, -2.445868322076670e-03, -1.955248596228962e-04, -1.367534142198805e-03, -1.367534142198801e-03, 1.046156121536305e-03, -8.801160534529391e-02, -4.930512539068926e-02, -1.419556329141862e-02, -2.865381669307353e-02, -2.865381669307357e-02, -6.437087461742675e-03, -1.088441043771005e+00, -1.055778233719029e+00, -7.712817519631043e-03, -1.071761403855027e+00, -1.071761403855029e+00, -2.382023269269030e+00, -4.146827953590349e+00, -3.567724407905121e+00, -1.305075352850815e+00, -5.187955915498622e+00, -5.187955915499441e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
