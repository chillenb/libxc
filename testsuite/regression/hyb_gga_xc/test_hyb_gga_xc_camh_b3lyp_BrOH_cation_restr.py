
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camh_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.707924293220081e+01, -1.707926487313593e+01, -1.707941825911905e+01, -1.707909067015924e+01, -1.707925437922475e+01, -1.707925437922475e+01, -2.833641557282522e+00, -2.833612487172314e+00, -2.833010008609342e+00, -2.834596548382329e+00, -2.833675127849144e+00, -2.833675127849144e+00, -5.488899140804594e-01, -5.487032190600957e-01, -5.450429940616325e-01, -5.492536870352580e-01, -5.478907300890284e-01, -5.478907300890284e-01, -1.355050924259791e-01, -1.372906314813445e-01, -6.397241752356018e-01, -1.042735621533247e-01, -1.162678475329722e-01, -1.162678475329722e-01, -3.402352342527501e-02, -3.409267096805842e-02, -5.950068744872693e-02, -3.074479496366611e-02, -3.075750346155824e-02, -3.075750346155822e-02, -4.110715781906977e+00, -4.110196123333891e+00, -4.110700731786198e+00, -4.110241850900664e+00, -4.110447554132045e+00, -4.110447554132045e+00, -1.706241324997862e+00, -1.714825618598264e+00, -1.706143960576011e+00, -1.713729573902841e+00, -1.711025487287212e+00, -1.711025487287212e+00, -4.600949737809868e-01, -4.839896995437314e-01, -4.264500029518887e-01, -4.288716517447049e-01, -4.657390566075126e-01, -4.657390566075126e-01, -7.619721754096515e-02, -1.380774052760770e-01, -7.249565875143824e-02, -1.480072341381047e+00, -8.680555154799133e-02, -8.680555154799133e-02, -2.766076662394423e-02, -2.962677924386090e-02, -1.948709143954712e-02, -6.199434204502614e-02, -2.355982468209707e-02, -2.355982468209708e-02, -4.416877756135125e-01, -4.434060592147306e-01, -4.428462301533492e-01, -4.423446291522853e-01, -4.425990641933262e-01, -4.425990641933262e-01, -4.279468576024188e-01, -3.946466030990529e-01, -4.052734965996329e-01, -4.147911636056522e-01, -4.099345353517994e-01, -4.099345353517994e-01, -5.089847425902558e-01, -1.765799463216210e-01, -2.120008815303769e-01, -2.730505821676978e-01, -2.408210912240618e-01, -2.408210912240618e-01, -3.616820961312250e-01, -5.986194552995640e-02, -6.117996760482263e-02, -2.578599726560651e-01, -6.694516204626148e-02, -6.694516204626148e-02, -3.861683308577946e-02, -1.693599409010861e-02, -2.228760732076445e-02, -6.515568836574398e-02, -2.213540667771928e-02, -2.213540667771926e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camh_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.046303315178928e+01, -2.046310969803172e+01, -2.046343618463085e+01, -2.046229762408391e+01, -2.046289616686796e+01, -2.046289616686796e+01, -3.320142277978196e+00, -3.320171821776572e+00, -3.320936132182526e+00, -3.320233701382351e+00, -3.320257125730349e+00, -3.320257125730349e+00, -6.441168134098967e-01, -6.433165356907642e-01, -6.249304993468774e-01, -6.300604438330984e-01, -6.289971950028599e-01, -6.289971950028599e-01, -1.678723938894023e-01, -1.695678641555587e-01, -7.511210080178158e-01, -1.356535070334962e-01, -1.469497987740306e-01, -1.469497987740305e-01, -1.102769332469765e-02, -1.130082422071243e-02, -3.472104868656260e-02, -8.237707843639594e-03, -9.058703850046984e-03, -9.058703850047005e-03, -5.055766099319599e+00, -5.057753623593938e+00, -5.055855991463079e+00, -5.057610577906841e+00, -5.056774105408909e+00, -5.056774105408909e+00, -1.828377468171731e+00, -1.842520781081977e+00, -1.816424505519583e+00, -1.828841265554456e+00, -1.842066304574296e+00, -1.842066304574296e+00, -5.693502026564242e-01, -6.308799779498052e-01, -5.254395335061562e-01, -5.555312062543049e-01, -5.796683175802584e-01, -5.796683175802584e-01, -1.023315384350079e-01, -1.801476459645122e-01, -9.406678469601359e-02, -1.905054686694302e+00, -1.122514856481070e-01, -1.122514856481070e-01, -6.985096519046017e-03, -7.986769405388679e-03, -5.612098561414442e-03, -5.838077919138189e-02, -6.763154151610774e-03, -6.763154151610795e-03, -5.874330152992590e-01, -5.797526665675831e-01, -5.823285779576164e-01, -5.845525830372503e-01, -5.834282807608593e-01, -5.834282807608593e-01, -5.726547722165247e-01, -4.735366469328045e-01, -4.982447978124916e-01, -5.253745395918687e-01, -5.112175319798163e-01, -5.112175319798163e-01, -6.610999475003793e-01, -2.208804359780261e-01, -2.572805642538577e-01, -3.325693972388221e-01, -2.904552291854670e-01, -2.904552291854669e-01, -4.356741280133744e-01, -3.361239959993534e-02, -4.597619035709216e-02, -3.201326480447772e-01, -7.516912096040705e-02, -7.516912096040700e-02, -1.382315624314653e-02, -3.493826307627702e-03, -5.377978473331258e-03, -7.032729331124885e-02, -6.317010661096569e-03, -6.317010661096537e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camh_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camh_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.835287335824149e-09, -5.835259231696190e-09, -5.835055123298084e-09, -5.835474904289525e-09, -5.835266193850518e-09, -5.835266193850518e-09, -7.356653751593241e-06, -7.356972404529617e-06, -7.363636858264084e-06, -7.346559716743394e-06, -7.356336686550341e-06, -7.356336686550341e-06, -3.466233895321233e-03, -3.464183190200854e-03, -3.382265520206136e-03, -3.302208055181011e-03, -3.334863285267581e-03, -3.334863285267581e-03, -1.231334236565500e-01, -1.289195677389924e-01, -2.052633381251528e-03, -2.786204821070460e-02, -1.005127535999703e-01, -1.005127535999702e-01, -5.067833216701722e+03, -4.444055009472699e+03, -2.188149950643827e+01, -2.391666993040872e+04, -1.325451022293154e+04, -1.325451022293155e+04, -1.714305927996140e-06, -1.715573160033243e-06, -1.714347533169011e-06, -1.715466383992958e-06, -1.714956553085072e-06, -1.714956553085072e-06, -5.271466110418889e-05, -5.170998987558221e-05, -5.273837170161093e-05, -5.184764155992538e-05, -5.214849675024976e-05, -5.214849675024976e-05, -7.025559043991652e-03, -6.687330513811496e-03, -8.973009902824821e-03, -1.002938888633690e-02, -6.828951424835506e-03, -6.828951424835506e-03, 3.757309867395570e-01, -3.531885985671665e-02, 3.947588996600861e-01, -9.929126415378855e-05, 4.659695271739402e-02, 4.659695271739402e-02, -5.455183477693534e+04, -2.672113605151785e+04, -9.683043920369870e+04, -1.703563193073813e+00, -4.571567350732321e+04, -4.571567350732318e+04, -9.883538944177438e-03, -9.182656881012288e-03, -9.392913235410577e-03, -9.592845076719309e-03, -9.489528861689717e-03, -9.489528861689717e-03, -1.135675671040132e-02, -1.068996263409428e-02, -1.055290048181452e-02, -1.057494220205059e-02, -1.055929376583464e-02, -1.055929376583464e-02, -5.539245309300513e-03, -4.703000285659154e-02, -4.565802287887890e-02, -3.380018281019249e-02, -4.135509312108153e-02, -4.135509312108155e-02, -1.417556384328131e-02, -2.511473901665910e+01, -5.794255593589491e+00, -4.460453340770418e-02, -2.627052680718290e-01, -2.627052680718298e-01, -1.776253885304689e+03, -1.877175647376372e+06, -1.800458247741578e+05, -4.967035163104774e-01, -6.102863084606127e+04, -6.102863084606147e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
