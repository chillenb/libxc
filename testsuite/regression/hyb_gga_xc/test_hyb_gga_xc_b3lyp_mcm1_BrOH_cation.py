
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.678533878380966e+01, -1.678536415005058e+01, -1.678552554251602e+01, -1.678514714162928e+01, -1.678533850429546e+01, -1.678533850429546e+01, -2.811207456455076e+00, -2.811183689491222e+00, -2.810702124182874e+00, -2.812065659077282e+00, -2.811245944400904e+00, -2.811245944400904e+00, -5.782897454932104e-01, -5.780726331774061e-01, -5.735525234959425e-01, -5.777064962753332e-01, -5.766219608615676e-01, -5.766219608615676e-01, -1.628234315490382e-01, -1.648117738197278e-01, -6.677455475701763e-01, -1.275150046224847e-01, -1.572506232667731e-01, -1.572506232667731e-01, -4.394477130299167e-02, -4.398123548460162e-02, -7.551739489744289e-02, -4.008135481750650e-02, -4.043612782964780e-02, -4.043612782964778e-02, -4.076575290501482e+00, -4.076245044014255e+00, -4.076567950808760e+00, -4.076276289414945e+00, -4.076403628509433e+00, -4.076403628509433e+00, -1.696799746818515e+00, -1.705536666097589e+00, -1.695679464151443e+00, -1.703400169299858e+00, -1.702175204612842e+00, -1.702175204612842e+00, -4.922213313154805e-01, -5.169853959064561e-01, -4.589768091508337e-01, -4.622133534609753e-01, -4.984288914233181e-01, -4.984288914233183e-01, -9.397605254297199e-02, -1.649731217334695e-01, -8.980906967257778e-02, -1.499376058474072e+00, -1.071677833082339e-01, -1.071677833082339e-01, -3.615262256083938e-02, -3.860721304385008e-02, -2.520521442387659e-02, -7.745989615158008e-02, -3.067389521517487e-02, -3.067389521517489e-02, -4.751891186763683e-01, -4.766513168273715e-01, -4.761801184986330e-01, -4.757530212445745e-01, -4.759700765464711e-01, -4.759700765464711e-01, -4.615496952735832e-01, -4.266780318683049e-01, -4.377020159160241e-01, -4.476609677935949e-01, -4.425799299308509e-01, -4.425799299308509e-01, -5.417477343525177e-01, -2.061746686567790e-01, -2.430839910499586e-01, -3.053860812570917e-01, -2.726448201448082e-01, -2.726448201448083e-01, -3.939997555306575e-01, -7.604660407509636e-02, -7.699731315626750e-02, -2.901484881447680e-01, -8.339932504779549e-02, -8.339932504779549e-02, -4.969249854024903e-02, -2.231679682338952e-02, -2.916597393954895e-02, -8.116257845691485e-02, -2.883266158859397e-02, -2.883266158859396e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.045009205490769e+01, -2.045006743242192e+01, -2.045017666910426e+01, -2.045012916314148e+01, -2.045043637913788e+01, -2.045050294043353e+01, -2.044947755892041e+01, -2.044928480745242e+01, -2.045014020235959e+01, -2.044976526801761e+01, -2.045014020235959e+01, -2.044976526801761e+01, -3.346409876244371e+00, -3.346459380961679e+00, -3.346436011664129e+00, -3.346485359291112e+00, -3.347067611192995e+00, -3.347220672899896e+00, -3.346508781329535e+00, -3.346653372871232e+00, -3.345863855062315e+00, -3.347226240775810e+00, -3.345863855062315e+00, -3.347226240775810e+00, -6.784521944335115e-01, -6.797899721315366e-01, -6.775413567345266e-01, -6.791582109675569e-01, -6.612951908650827e-01, -6.599760512663241e-01, -6.655058347377683e-01, -6.659141726106881e-01, -6.740020836680610e-01, -6.620839067078430e-01, -6.740020836680610e-01, -6.620839067078430e-01, -1.989250440535986e-01, -1.993469320043298e-01, -2.003320725659367e-01, -2.010406667121403e-01, -7.771115262306210e-01, -7.947265161044007e-01, -1.666486036579323e-01, -1.672257136635876e-01, -1.675765030573989e-01, -1.779683655548130e-01, -1.675765030573988e-01, -1.779683655548129e-01, -1.267681214569365e-02, -1.273386085708889e-02, -1.297947877102649e-02, -1.303136388354635e-02, -4.148109448791402e-02, -4.249608470672434e-02, -9.586037872425665e-03, -9.607254123618375e-03, -1.085360825617770e-02, -9.043737016745511e-03, -1.085360825617768e-02, -9.043737016745500e-03, -5.064925798134484e+00, -5.063728801791537e+00, -5.066771033118045e+00, -5.065515581921685e+00, -5.065027941428294e+00, -5.063792211640961e+00, -5.066614400863062e+00, -5.065412104650585e+00, -5.065869296552806e+00, -5.064626682840570e+00, -5.065869296552806e+00, -5.064626682840570e+00, -1.866251333505704e+00, -1.866173062317054e+00, -1.880377970838141e+00, -1.879952129609275e+00, -1.853512333451911e+00, -1.855963202196860e+00, -1.865678670660979e+00, -1.868306275407231e+00, -1.882957164102752e+00, -1.876184822977072e+00, -1.882957164102752e+00, -1.876184822977072e+00, -6.041037294883415e-01, -6.029993498157336e-01, -6.640247101865512e-01, -6.643781992818121e-01, -5.529114382071645e-01, -5.664634806979604e-01, -5.824938233512672e-01, -5.960388017081378e-01, -6.245010535674824e-01, -6.024833963864259e-01, -6.245010535674825e-01, -6.024833963864260e-01, -1.301563921581934e-01, -1.299325458897994e-01, -2.152309027805969e-01, -2.152875353932281e-01, -1.183978064894092e-01, -1.205524431336075e-01, -1.926693679820329e+00, -1.925942825726987e+00, -1.432472137868472e-01, -1.385165274092640e-01, -1.432472137868472e-01, -1.385165274092640e-01, -8.057266062712485e-03, -8.255515881918626e-03, -9.226011098832042e-03, -9.338711783361703e-03, -6.383066519876346e-03, -6.315609782836270e-03, -7.306167876566590e-02, -7.372931285805880e-02, -7.577072746583677e-03, -7.808669188821961e-03, -7.577072746583696e-03, -7.808669188821961e-03, -6.200154391824686e-01, -6.218301088050042e-01, -6.124950123141341e-01, -6.143011027734407e-01, -6.150094540951961e-01, -6.168319044451426e-01, -6.171989697807808e-01, -6.190000048213430e-01, -6.160920970935504e-01, -6.179037417563644e-01, -6.160920970935504e-01, -6.179037417563644e-01, -6.054987929340985e-01, -6.069657753438150e-01, -5.075846204810091e-01, -5.088433660532867e-01, -5.318624207391519e-01, -5.333940479516964e-01, -5.587838874466470e-01, -5.601642904382875e-01, -5.447739275609353e-01, -5.461473222020196e-01, -5.447739275609353e-01, -5.461473222020196e-01, -6.937088274380667e-01, -6.947590516143256e-01, -2.559300049771374e-01, -2.559586159378058e-01, -2.913672955772428e-01, -2.915353685026401e-01, -3.658445605515075e-01, -3.668333515526344e-01, -3.242647135953611e-01, -3.240384328961651e-01, -3.242647135953612e-01, -3.240384328961651e-01, -4.693454852606134e-01, -4.710784384881233e-01, -4.051905828597490e-02, -4.063201623227505e-02, -5.634687277936484e-02, -5.748117211527619e-02, -3.522132587836778e-01, -3.549696247468284e-01, -9.548647113732746e-02, -9.480208528670966e-02, -9.548647113732743e-02, -9.480208528670964e-02, -1.600143073794855e-02, -1.598476801258215e-02, -4.361684282969409e-03, -3.974075616102384e-03, -6.288340276800254e-03, -6.268861775442586e-03, -8.850739753872071e-02, -8.936414349044434e-02, -6.659153960952956e-03, -7.463318273099291e-03, -6.659153960952965e-03, -7.463318273099277e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_mcm1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.709954605763592e-09, 1.666075500782921e-11, -9.710009175238405e-09, -9.709900706339483e-09, 1.666051750483489e-11, -9.709969344375903e-09, -9.709605394012002e-09, 1.665938835703073e-11, -9.709584343121113e-09, -9.710225470803833e-09, 1.666292372825278e-11, -9.710364272572394e-09, -9.709933043218684e-09, 1.666108177559247e-11, -9.709960568019530e-09, -9.709933043218684e-09, 1.666108177559247e-11, -9.709960568019530e-09, -1.254217313589261e-05, 2.165897636945603e-07, -1.254691037773612e-05, -1.254254198548665e-05, 2.165872734673452e-07, -1.254762765968800e-05, -1.255487782685893e-05, 2.165014448152610e-07, -1.255798439270986e-05, -1.252530032908684e-05, 2.164316078935245e-07, -1.252923759205061e-05, -1.254766499841469e-05, 2.165605915890839e-07, -1.254031803920686e-05, -1.254766499841469e-05, 2.165605915890839e-07, -1.254031803920686e-05, -6.859378348647554e-03, 1.302822686729473e-03, -6.936585019602250e-03, -6.849143463007097e-03, 1.310361521924189e-03, -6.943933113417950e-03, -6.875908124530764e-03, 1.503409999488435e-03, -6.736864824291721e-03, -6.608848690952717e-03, 1.440389177257530e-03, -6.654614559261042e-03, -7.327107470781324e-03, 1.566941205042925e-03, -5.897754454836666e-03, -7.327107470781324e-03, 1.566941205042925e-03, -5.897754454836666e-03, -5.760429028437365e-01, 6.844457377311171e-01, -6.014404112374732e-01, -5.739872035256049e-01, 6.465854227483860e-01, -5.973308282857325e-01, -3.961782280844618e-03, 6.058861253114989e-04, -3.953348909814644e-03, -8.923988278117790e-01, 1.907678533760461e+00, -9.055741013945717e-01, -9.747209455226634e-01, 2.711446662207813e+00, -2.829201004630419e+00, -9.747209455226625e-01, 2.711446662207814e+00, -2.829201004630424e+00, -1.492037848612298e+04, 1.265692284807032e-07, -1.249856503397956e+04, -1.324087289483861e+04, 5.193561992194672e-07, -1.085343635643839e+04, -7.393385657508479e+01, 2.092909598232300e+01, -6.343009384866089e+01, -6.290188319549277e+04, 4.709028196030546e-17, -6.551532085448447e+04, -2.069938170271681e+04, 1.218932491657590e-12, -1.360630684699506e+05, -2.069938170271683e+04, 1.218932491657590e-12, -1.360630684699506e+05, -2.893327083990298e-06, 2.542624247572734e-08, -2.895703964287809e-06, -2.895497969780162e-06, 2.540159451923235e-08, -2.897799033484147e-06, -2.893418702107127e-06, 2.542501746984604e-08, -2.895752069815663e-06, -2.895277673504290e-06, 2.540325174348642e-08, -2.897659669571674e-06, -2.894462457730838e-06, 2.541379588269554e-08, -2.896758934271889e-06, -2.894462457730838e-06, 2.541379588269554e-08, -2.896758934271889e-06, -9.217040343614536e-05, 4.672217385711546e-06, -9.218163124162003e-05, -9.035244808887946e-05, 4.495178265147398e-06, -9.040487215821301e-05, -9.215589522204861e-05, 4.807270731688002e-06, -9.234295039939914e-05, -9.058018599153217e-05, 4.645069562924617e-06, -9.072940043234849e-05, -9.124889870772187e-05, 4.514950217431368e-06, -9.104230248377124e-05, -9.124889870772187e-05, 4.514950217431368e-06, -9.104230248377124e-05, -1.423312563876990e-02, 2.565325936026734e-03, -1.433507632263255e-02, -1.323886436315666e-02, 1.688046121394173e-03, -1.327144746039709e-02, -1.920284981197559e-02, 3.862428951455749e-03, -1.812566209295741e-02, -2.143650991054260e-02, 3.172296572241305e-03, -1.954326698809786e-02, -1.312397832990831e-02, 2.471704349243526e-03, -1.472401237899310e-02, -1.312397832990831e-02, 2.471704349243526e-03, -1.472401237899310e-02, -1.687977746705944e+00, 6.106218386195925e+00, -1.765996184882141e+00, -3.623482703822711e-01, 6.747913661761171e-01, -3.672928948130823e-01, -2.288471650768384e+00, 7.593178499644464e+00, -2.422497020909317e+00, -1.735503134904546e-04, 5.180146316318329e-06, -1.738438746368758e-04, -1.298491492737777e+00, 3.827391256816468e+00, -1.784882693348082e+00, -1.298491492737777e+00, 3.827391256816468e+00, -1.784882693348082e+00, -1.583520694502511e+05, 6.171289691829771e-24, -1.361178059007911e+05, -7.412202651882672e+04, 1.398696240062810e-17, -6.941491353068290e+04, -2.786767505044959e+05, 6.438726357820563e-25, -2.434563719464961e+05, -1.251776980849444e+01, 1.712765065972314e+01, -1.210044293908206e+01, -2.156167456539514e+05, 1.093943042926973e-19, -8.610338802642799e+04, -2.156167456539512e+05, 1.093943042926972e-19, -8.610338802642796e+04, -1.994016657045975e-02, 2.503892533073891e-03, -1.975680530474056e-02, -1.858532163599119e-02, 2.577436901944400e-03, -1.843111711988803e-02, -1.898839638827429e-02, 2.551275319471574e-03, -1.882820709717936e-02, -1.937790368957116e-02, 2.529950274460034e-03, -1.920301459804174e-02, -1.917652427416443e-02, 2.540597907090195e-03, -1.900907172303378e-02, -1.917652427416443e-02, 2.540597907090195e-03, -1.900907172303378e-02, -2.302233302001453e-02, 2.874524264603290e-03, -2.280967369431542e-02, -2.304228769073245e-02, 6.144388055192890e-03, -2.296187053962502e-02, -2.226376023076862e-02, 4.892454846261484e-03, -2.216493448774211e-02, -2.192602144146383e-02, 3.936697779864227e-03, -2.177580715780461e-02, -2.209124649596397e-02, 4.394113300445842e-03, -2.194288669090470e-02, -2.209124649596397e-02, 4.394113300445842e-03, -2.194288669090470e-02, -1.087928114243018e-02, 1.327775230605498e-03, -1.089012761567909e-02, -2.094722702845519e-01, 2.587409741882019e-01, -2.121505824880154e-01, -1.446943928526168e-01, 1.169535061173199e-01, -1.471155246312540e-01, -8.299742982626229e-02, 3.282488923008738e-02, -8.255569031150307e-02, -1.121927783748933e-01, 6.261501138263596e-02, -1.127622370098146e-01, -1.121927783748934e-01, 6.261501138263598e-02, -1.127622370098147e-01, -3.137249805345366e-02, 9.221043161744526e-03, -3.126308108417846e-02, -7.724377801590884e+01, 2.010845124863310e+01, -7.578246685772922e+01, -2.625402847216254e+01, 2.138641731600571e+01, -2.431500817832501e+01, -1.097983848761440e-01, 3.903133571351887e-02, -1.080068470738974e-01, -5.428246451645931e+00, 1.104314691672205e+01, -5.876652756301669e+00, -5.428246451645932e+00, 1.104314691672205e+01, -5.876652756301680e+00, -5.006679965604310e+03, 3.890116036781634e-04, -4.548282602854777e+03, -4.681354689434435e+06, 3.244285371732132e-85, -5.447343105491125e+06, -5.252953232487333e+05, 1.892210487838980e-36, -4.474058074672045e+05, -7.107721536537401e+00, 1.255419208634896e+01, -6.882171924428162e+00, -3.086898305103778e+05, 9.309944701150828e-22, -1.117837823890546e+05, -3.086898305103785e+05, 9.309944701150341e-22, -1.117837823890550e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
