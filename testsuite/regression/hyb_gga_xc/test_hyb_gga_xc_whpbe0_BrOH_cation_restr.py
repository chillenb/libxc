
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_whpbe0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.259274755619918e+00, -5.259282456854226e+00, -5.259332276421810e+00, -5.259217378119993e+00, -5.259275365809531e+00, -5.259275365809531e+00, -8.816011998641206e-01, -8.815968729143985e-01, -8.815184105666640e-01, -8.818202414221686e-01, -8.816169656222448e-01, -8.816169656222448e-01, -1.740052411191767e-01, -1.737715895956987e-01, -1.686683738291893e-01, -1.701119405674143e-01, -1.697979664164911e-01, -1.697979664164911e-01, -3.443522330230245e-02, -3.526214970719052e-02, -2.033875509235337e-01, -2.270701309574517e-02, -2.703331949142392e-02, -2.703331949142391e-02, -2.151609300718591e-06, -2.512562805198917e-06, -8.199539547500015e-04, -4.118701480100331e-07, -8.186472427988291e-07, -8.186472427988273e-07, -1.289203556841997e+00, -1.289260674796137e+00, -1.289207855753975e+00, -1.289258234380856e+00, -1.289231409413675e+00, -1.289231409413675e+00, -5.210923031640212e-01, -5.240047833716124e-01, -5.204227851632887e-01, -5.229820193322926e-01, -5.230441121300259e-01, -5.230441121300259e-01, -1.567740314049149e-01, -1.799571828001082e-01, -1.443932747458998e-01, -1.590699616397911e-01, -1.601650053447663e-01, -1.601650053447663e-01, -1.213465747388851e-02, -3.500023970843241e-02, -1.032282014764557e-02, -4.973295084024779e-01, -1.601999421734004e-02, -1.601999421734004e-02, -1.890654015181290e-07, -3.848189348412737e-07, -1.725139941916729e-07, -3.894020173622930e-03, -3.012316675806790e-07, -3.012316675806782e-07, -1.718717438861223e-01, -1.669781374877780e-01, -1.685976164384141e-01, -1.700172057865252e-01, -1.692977731453124e-01, -1.692977731453124e-01, -1.689848571227417e-01, -1.273818160687535e-01, -1.366860480133283e-01, -1.477394309346503e-01, -1.418961392716168e-01, -1.418961392716168e-01, -1.873056574436167e-01, -4.804496709343698e-02, -6.068442618620824e-02, -8.801673914559367e-02, -7.282870336230925e-02, -7.282870336230925e-02, -1.169220871826838e-01, -7.000418981392610e-04, -2.043206699429774e-03, -8.751639554876593e-02, -7.149695465356576e-03, -7.149695465356599e-03, -6.134354263454196e-06, -7.340225844092560e-09, -6.792205472717814e-08, -6.159272866387257e-03, -2.386908523562656e-07, -2.386908522732934e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_whpbe0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.384623755069713e+00, -6.384649708802427e+00, -6.384757000143150e+00, -6.384371030822390e+00, -6.384574419943934e+00, -6.384574419943934e+00, -1.090326574092949e+00, -1.090344285241652e+00, -1.090778882983297e+00, -1.090216589220702e+00, -1.090372305921014e+00, -1.090372305921014e+00, -2.413889715449964e-01, -2.407701583614087e-01, -2.249752120759433e-01, -2.270595365568529e-01, -2.270248624238757e-01, -2.270248624238757e-01, -5.334886643611920e-02, -5.554798453948100e-02, -2.785810992745385e-01, -3.112744245470760e-02, -3.904628767256937e-02, -3.904628767256933e-02, -4.341599887489547e-06, -5.077280759776215e-06, -1.764004292817539e-03, -8.258805447758602e-07, -1.645435752350634e-06, -1.645435752348288e-06, -1.651206301447697e+00, -1.652081287735996e+00, -1.651244859473552e+00, -1.652017317537065e+00, -1.651650671870554e+00, -1.651650671870554e+00, -5.915706295945039e-01, -5.968928024204868e-01, -5.857265753775264e-01, -5.903636724831401e-01, -5.974262548212643e-01, -5.974262548212643e-01, -2.297118879670373e-01, -2.507061316642883e-01, -2.136073915955447e-01, -2.257425679288718e-01, -2.340886459073421e-01, -2.340886459073421e-01, -1.752654628395175e-02, -4.588434069704980e-02, -1.537178829766225e-02, -6.739371497611975e-01, -2.242975303534677e-02, -2.242975303534677e-02, -3.788930259620381e-07, -7.718298852972566e-07, -3.484212537913326e-07, -6.926928300729806e-03, -6.063688941328466e-07, -6.063688941355445e-07, -2.306209083136495e-01, -2.325636873205016e-01, -2.321776821998301e-01, -2.316283217812926e-01, -2.319308518795718e-01, -2.319308518795718e-01, -2.234602905930734e-01, -1.878237734730995e-01, -2.035537600819312e-01, -2.164314040830610e-01, -2.104037986252249e-01, -2.104037986252249e-01, -2.616727025668409e-01, -6.492022777768024e-02, -8.768077837312718e-02, -1.387019300032820e-01, -1.122882992689190e-01, -1.122882992689190e-01, -1.749772970013998e-01, -1.522815044037474e-03, -4.025455305721147e-03, -1.402871721255023e-01, -1.134919843163325e-02, -1.134919843163326e-02, -1.249569037164622e-05, -1.469819007312992e-08, -1.361459582652594e-07, -1.005085154923689e-02, -4.807606225660824e-07, -4.807606224815301e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_whpbe0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_whpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.570270654043488e-09, -1.570254952962775e-09, -1.570177835411494e-09, -1.570411575886564e-09, -1.570290143435835e-09, -1.570290143435835e-09, -1.296644353711671e-06, -1.296494316201626e-06, -1.292904888562391e-06, -1.298321886097618e-06, -1.296363029264297e-06, -1.296363029264297e-06, 3.145701913372294e-04, 2.992928151750417e-04, -6.349957853981356e-05, -5.496219040226490e-05, -4.325979428793200e-05, -4.325979428793200e-05, 1.725799293955388e-02, 2.635614706723702e-02, 1.405217175001875e-04, -6.637154681299966e-02, -2.784300117840369e-02, -2.784300117840430e-02, 4.235839199265567e-03, 4.985297954578933e-03, -3.421288584146594e-02, 1.503855866932105e-03, 3.140991998442417e-03, 3.140991997045239e-03, -2.356530576798031e-07, -2.338302455319381e-07, -2.355771369741315e-07, -2.339681986625591e-07, -2.347277781694391e-07, -2.347277781694391e-07, -1.223861000553259e-05, -1.190074410423216e-05, -1.251956094478440e-05, -1.222304949090245e-05, -1.190521122731851e-05, -1.190521122731851e-05, 3.110236468569117e-03, 5.311989690262340e-03, 3.976618632895427e-03, 8.016327030279167e-03, 3.251347493701828e-03, 3.251347493701828e-03, -1.189845085002632e-01, -3.217072214699197e-02, -1.268738389094827e-01, 3.119309922149051e-05, -1.087816344663330e-01, -1.087816344663330e-01, 1.469535716781747e-03, 1.849024369295210e-03, 1.851125146083476e-02, -1.249920552329233e-01, 8.054664529920775e-03, 8.054664538843834e-03, 9.712861327463155e-03, 7.849406780616920e-03, 8.439985608645475e-03, 8.978994670418582e-03, 8.703443926143790e-03, 8.703443926143790e-03, 1.173196244188462e-02, 2.987712100566086e-03, 4.720429058962305e-03, 6.874602530722702e-03, 5.743808073527524e-03, 5.743808073527524e-03, 4.131306528386967e-03, -1.089194516938619e-02, 2.332418878764508e-03, 1.668938399843561e-02, 1.218262285883756e-02, 1.218262285883764e-02, 4.631371365152858e-03, -2.714548724115714e-02, -7.255371000799132e-02, 3.312649613083067e-02, -1.604099501101787e-01, -1.604099501101824e-01, 5.161989177875229e-03, 2.005768000951613e-03, 2.523722444416700e-03, -1.576868073268813e-01, 1.003082021780363e-02, 1.003082021596708e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
