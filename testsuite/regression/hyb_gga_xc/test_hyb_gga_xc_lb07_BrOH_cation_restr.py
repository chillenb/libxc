
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lb07_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lb07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.765125417867734e+01, -1.765130401953540e+01, -1.765154081459454e+01, -1.765079896654238e+01, -1.765118551679353e+01, -1.765118551679353e+01, -2.715852937318119e+00, -2.715860130530418e+00, -2.716097501543624e+00, -2.716235954167999e+00, -2.715931529774410e+00, -2.715931529774410e+00, -3.832241830083267e-01, -3.825301770743171e-01, -3.653806491554858e-01, -3.698460369534352e-01, -3.690204099496016e-01, -3.690204099496016e-01, -2.667966313229714e-02, -2.868842126573463e-02, -4.737810351426196e-01, -2.157811456017176e-03, -1.228190193266544e-02, -1.228190193266543e-02, -1.046101041777763e-03, -1.099977822476186e-03, 2.409865826460716e-04, -6.091485063019466e-04, -7.631909887928738e-04, -7.631909887928738e-04, -4.161496099160451e+00, -4.162312719769250e+00, -4.161536614666865e+00, -4.162257495850813e+00, -4.161908474230734e+00, -4.161908474230734e+00, -1.440819128475694e+00, -1.452915635502256e+00, -1.431549874065768e+00, -1.442251327524418e+00, -1.451978124367346e+00, -1.451978124367346e+00, -3.206578087832539e-01, -3.638185854443771e-01, -2.858143542431701e-01, -3.057484085820884e-01, -3.285513038360922e-01, -3.285513038360922e-01, 1.595862472678815e-02, -1.598580594583532e-02, 1.592817415882382e-02, -1.420381388227023e+00, 5.798775959148563e-03, 5.798775959148563e-03, -4.712572314392059e-04, -5.956515209672145e-04, -4.566945807623254e-04, 9.421243214255250e-03, -5.491858094343159e-04, -5.491858094343159e-04, -3.267183359767627e-01, -3.233627666403638e-01, -3.245445287911124e-01, -3.255179963078365e-01, -3.250309583467763e-01, -3.250309583467763e-01, -3.143572886840700e-01, -2.438724372218861e-01, -2.643334074089601e-01, -2.844104028766785e-01, -2.742128516091273e-01, -2.742128516091273e-01, -3.882887420966458e-01, -4.221808139409147e-02, -7.321313505250289e-02, -1.374653837121397e-01, -1.029802779329095e-01, -1.029802779329095e-01, -2.142174034711881e-01, -2.084468495001901e-04, 6.587752312245963e-03, -1.313074321178999e-01, 9.856324879643254e-03, 9.856324879643240e-03, -1.465312864857262e-03, -1.605911008312173e-04, -3.359126868604793e-04, 9.799359258360509e-03, -5.085695639786260e-04, -5.085695639786256e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lb07_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lb07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.360576042722862e+01, -2.360582661719826e+01, -2.360614159194890e+01, -2.360515638800739e+01, -2.360566967040435e+01, -2.360566967040435e+01, -3.695484437266135e+00, -3.695491215185903e+00, -3.695742741367986e+00, -3.696040457221608e+00, -3.695585867998859e+00, -3.695585867998859e+00, -5.840569647592018e-01, -5.834146065515339e-01, -5.687271463274911e-01, -5.744153036351980e-01, -5.730026545458482e-01, -5.730026545458482e-01, -9.102809040692078e-02, -9.186488586222850e-02, -7.050263928189981e-01, -7.250400152332989e-02, -7.802255210775658e-02, -7.802255210775656e-02, -1.388220666731881e-03, -1.459412559736145e-03, -5.997159580929924e-03, -8.098428092992297e-04, -1.013958158374048e-03, -1.013958158374048e-03, -5.616798398037504e+00, -5.617831371054916e+00, -5.616850110614872e+00, -5.617761971526011e+00, -5.617319761379694e+00, -5.617319761379694e+00, -2.015651648407745e+00, -2.030967427914875e+00, -2.005215861272400e+00, -2.018730490287050e+00, -2.029179472294774e+00, -2.029179472294774e+00, -4.856229152656774e-01, -5.358431219808028e-01, -4.389646219078743e-01, -4.570516498184755e-01, -4.951987628369912e-01, -4.951987628369912e-01, -5.380446471007504e-02, -1.051157638534228e-01, -4.788579731730529e-02, -1.955831834204085e+00, -5.781326092321038e-02, -5.781326092321038e-02, -6.269109335461923e-04, -7.919465005478223e-04, -6.075790033609385e-04, -2.159183837822452e-02, -7.303200752403476e-04, -7.303200752403476e-04, -4.825475299939062e-01, -4.799937510545468e-01, -4.808903827549610e-01, -4.816290888405530e-01, -4.812589311429418e-01, -4.812589311429418e-01, -4.648735716464232e-01, -3.892752030594162e-01, -4.100564725560366e-01, -4.313055614447345e-01, -4.203291332113820e-01, -4.203291332113820e-01, -5.697176495929286e-01, -1.370458323011449e-01, -1.683903533475577e-01, -2.375616004435542e-01, -1.983089816855070e-01, -1.983089816855071e-01, -3.475708499223222e-01, -5.402984200873823e-03, -1.252867100484791e-02, -2.212450704090061e-01, -3.336769465427840e-02, -3.336769465427838e-02, -1.941560063165680e-03, -2.139494973610045e-04, -4.471450208420023e-04, -3.003477487616855e-02, -6.764319838799295e-04, -6.764319838799289e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lb07_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lb07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.998049598333790e-11, 1.998021587910859e-11, 1.997888421763919e-11, 1.998305355554308e-11, 1.998088106815000e-11, 1.998088106815000e-11, 1.940579007296332e-07, 1.940557672275662e-07, 1.939822505333951e-07, 1.939224343389651e-07, 1.940315168074151e-07, 1.940315168074151e-07, 7.941193202179249e-04, 7.984262217996744e-04, 9.109475659103590e-04, 8.748286877468953e-04, 8.823652249424177e-04, 8.823652249424177e-04, 3.424459820802077e-01, 3.231226662837196e-01, 3.723376253220434e-04, 9.388673679240482e-01, 6.225858485581673e-01, 6.225858485581675e-01, 5.642873435633357e-08, 2.320538157740478e-07, 9.579401826150896e+00, 2.079627509456378e-17, 9.060781298791116e-13, 9.060781298791116e-13, 2.490982512044963e-08, 2.488661477184987e-08, 2.490866850739910e-08, 2.488817918039498e-08, 2.489810371875221e-08, 2.489810371875221e-08, 3.636430646049755e-06, 3.504939992367789e-06, 3.736156458671880e-06, 3.615843647741471e-06, 3.517088649168979e-06, 3.517088649168979e-06, 1.525231009851840e-03, 1.019263746458143e-03, 2.219353492514693e-03, 1.841078612555446e-03, 1.411341000563378e-03, 1.411341000563378e-03, 2.928356397309912e+00, 3.404484143894039e-01, 3.600513380978786e+00, 4.012368713306653e-06, 1.835656855883216e+00, 1.835656855883216e+00, 2.729177401264382e-24, 6.175658252941481e-18, 2.857716644677563e-25, 7.998345688900798e+00, 5.854196218405015e-20, 5.854196218405015e-20, 1.489818890835494e-03, 1.531968321097038e-03, 1.516977045088314e-03, 1.504759966705367e-03, 1.510860493820015e-03, 1.510860493820015e-03, 1.701983094205791e-03, 3.542651849223445e-03, 2.842814828876798e-03, 2.305034704513578e-03, 2.562969507165569e-03, 2.562969507165569e-03, 8.089379322808377e-04, 1.336440024807798e-01, 6.163935655156776e-02, 1.794287270658814e-02, 3.360256419513215e-02, 3.360256419513216e-02, 5.243125681545367e-03, 9.190606806204421e+00, 9.883343370199622e+00, 2.118448453878427e-02, 5.193969900277263e+00, 5.193969900277263e+00, 1.731991136983093e-04, 1.426901871174842e-85, 8.400644335000831e-37, 5.914313919904077e+00, 4.809097095240821e-22, 4.809097095240568e-22]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
