
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_qtp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.083255450375452e+01, -2.083258205463133e+01, -2.083277269226987e+01, -2.083236138450052e+01, -2.083256720991705e+01, -2.083256720991705e+01, -3.258251671592638e+00, -3.258219920328655e+00, -3.257571406178660e+00, -3.259361708182372e+00, -3.258297733741921e+00, -3.258297733741921e+00, -4.687664957996293e-01, -4.682880975284838e-01, -4.569100280998591e-01, -4.621051581067110e-01, -4.607516800290856e-01, -4.607516800290856e-01, -3.314876478713231e-02, -3.537292437590082e-02, -5.769408202791446e-01, -5.289412397007399e-03, -1.656248820817334e-02, -1.656248820817333e-02, -1.046385558492797e-03, -1.100309625181521e-03, 1.837346145322864e-04, -6.092032683387214e-04, -7.632996690556989e-04, -7.632996690556989e-04, -4.840057113313689e+00, -4.839512034899549e+00, -4.840042500384291e+00, -4.839561157344582e+00, -4.839775136285581e+00, -4.839775136285581e+00, -1.850971728654742e+00, -1.862289481958697e+00, -1.848929519265029e+00, -1.858951107542715e+00, -1.858192314975959e+00, -1.858192314975959e+00, -3.779732863071644e-01, -4.151657968806019e-01, -3.383474207514577e-01, -3.507106555804822e-01, -3.856987056092187e-01, -3.856987056092187e-01, 1.488446084104348e-02, -2.296809471796437e-02, 1.508167668622772e-02, -1.614267123384328e+00, 4.083022413760830e-03, 4.083022413760830e-03, -4.712823806134602e-04, -5.957026819779888e-04, -4.567174497347893e-04, 9.170594718382779e-03, -5.492257965492150e-04, -5.492257965492150e-04, -3.694297125985944e-01, -3.688487719187679e-01, -3.690870093687202e-01, -3.692536588816703e-01, -3.691729421673768e-01, -3.691729421673768e-01, -3.545623717710860e-01, -2.953005549555635e-01, -3.136887927387928e-01, -3.307133510835423e-01, -3.221170158178154e-01, -3.221170158178154e-01, -4.436430529810644e-01, -5.495878247656173e-02, -9.196166308523018e-02, -1.654546991804917e-01, -1.263755282645750e-01, -1.263755282645750e-01, -2.590675396448100e-01, -2.585663862904070e-04, 6.458779972480457e-03, -1.553594801556774e-01, 9.333291149784009e-03, 9.333291149784231e-03, -1.466113575581022e-03, -1.605920776147395e-04, -3.359217214446461e-04, 9.367461806314519e-03, -5.086012424348785e-04, -5.086012424348781e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_qtp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.505101182869969e+01, -2.505110574166359e+01, -2.505150709847600e+01, -2.505011020629592e+01, -2.505084444089659e+01, -2.505084444089659e+01, -3.908555271299308e+00, -3.908587253559914e+00, -3.909426747515714e+00, -3.908738721119185e+00, -3.908691450223022e+00, -3.908691450223022e+00, -6.353596642174288e-01, -6.346359356598597e-01, -6.186591357728307e-01, -6.245887113902364e-01, -6.231185096793120e-01, -6.231185096793120e-01, -1.011478054978383e-01, -1.022372678858423e-01, -7.628212376639698e-01, -7.800767064973892e-02, -8.521754649586076e-02, -8.521754649586080e-02, -1.388789888007868e-03, -1.460076402543807e-03, -6.111820401298436e-03, -8.099523473260541e-04, -1.014175559930199e-03, -1.014175559930199e-03, -6.035751242934254e+00, -6.038082208362850e+00, -6.035857138405510e+00, -6.037914907492845e+00, -6.036933167826427e+00, -6.036933167826427e+00, -2.095925665857926e+00, -2.112602587102991e+00, -2.082876411528247e+00, -2.097506655881204e+00, -2.111564589941136e+00, -2.111564589941136e+00, -5.342947316934080e-01, -5.954431363105068e-01, -4.837338916873218e-01, -5.079120159563049e-01, -5.451456165145403e-01, -5.451456165145403e-01, -5.585947352366995e-02, -1.162157916611235e-01, -4.952020842141784e-02, -2.147221070424804e+00, -6.098814709663129e-02, -6.098814709663129e-02, -6.269612358408991e-04, -7.920488349842914e-04, -6.076247444221611e-04, -2.208888185134927e-02, -7.304000573858493e-04, -7.304000573858493e-04, -5.397115989776167e-01, -5.343640980999668e-01, -5.361614854868882e-01, -5.377082093407252e-01, -5.369263306859966e-01, -5.369263306859966e-01, -5.209983221807453e-01, -4.296327237631806e-01, -4.525032296027631e-01, -4.774678167217588e-01, -4.643795413571599e-01, -4.643795413571599e-01, -6.321060662144813e-01, -1.547157171854860e-01, -1.910333787601270e-01, -2.661608825443439e-01, -2.238607485905675e-01, -2.238607485905675e-01, -3.850580759326759e-01, -5.503399267519768e-03, -1.278628172481642e-02, -2.479232805704709e-01, -3.438844203119467e-02, -3.438844203119514e-02, -1.943162426395591e-03, -2.139514509472109e-04, -4.471630907437576e-04, -3.088190006907622e-02, -6.764953461857632e-04, -6.764953461857626e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_qtp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.093409119007940e-09, -7.093375350008315e-09, -7.093128946497280e-09, -7.093633365406605e-09, -7.093382737345912e-09, -7.093382737345912e-09, -8.210991629429912e-06, -8.211355776216069e-06, -8.219012138421645e-06, -8.199740065031910e-06, -8.210669126782802e-06, -8.210669126782802e-06, -1.975270549459130e-03, -1.968666340750469e-03, -1.778794220669767e-03, -1.761221214217827e-03, -1.776553841875647e-03, -1.776553841875647e-03, 3.236633656235209e-01, 3.035500187599865e-01, -1.384460854640846e-03, 9.276367814442489e-01, 6.078512903277388e-01, 6.078512903277389e-01, -7.381055595782210e-06, -8.639238620228360e-06, 9.578862558391508e+00, -1.544585569304296e-06, -3.418083924051414e-06, -3.418083924103430e-06, -1.983672253863258e-06, -1.985186522344859e-06, -1.983722582637168e-06, -1.985059538709598e-06, -1.984449405198481e-06, -1.984449405198481e-06, -5.331353942739339e-05, -5.240286146271332e-05, -5.322577846005941e-05, -5.242214905672756e-05, -5.285215227745099e-05, -5.285215227745099e-05, -3.596459295655749e-03, -4.034699695533015e-03, -4.003667239894462e-03, -5.192252458962042e-03, -3.608260647386829e-03, -3.608260647386829e-03, 2.923514683284469e+00, 3.277986993564683e-01, 3.596274597262686e+00, -1.019040651585953e-04, 1.827374127191876e+00, 1.827374127191876e+00, -9.108180866372094e-07, -1.623718306901044e-06, -2.749977774879723e-06, 7.996352119406727e+00, -2.712291183357080e-06, -2.712291183292154e-06, -5.586112218550461e-03, -5.054323713553188e-03, -5.217292042341221e-03, -5.369338120765289e-03, -5.291080520918678e-03, -5.291080520918678e-03, -6.261234553060624e-03, -3.441276912366703e-03, -4.214794360898054e-03, -4.921486073577683e-03, -4.574696291152926e-03, -4.574696291152926e-03, -3.493545558545972e-03, 1.192897028598126e-01, 4.607308593867503e-02, 2.494299211213410e-03, 1.743727767092873e-02, 1.743727767092874e-02, -3.394068761288663e-03, 9.190152288936568e+00, 9.882344832389556e+00, 2.150601199597198e-03, 5.190022214769704e+00, 5.190022214769734e+00, 1.568855899880159e-04, -1.233200312709998e-07, -5.943581177095759e-07, 5.910928809608179e+00, -2.572478355186016e-06, -2.572478354887247e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
