
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mb3lyp_rc04_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mb3lyp_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.684564623980851e+01, -1.684567003444558e+01, -1.684582700962685e+01, -1.684547193710885e+01, -1.684565070853847e+01, -1.684565070853847e+01, -2.861256807212705e+00, -2.861230502109922e+00, -2.860690552162166e+00, -2.862157577580968e+00, -2.861292322292405e+00, -2.861292322292405e+00, -6.148259942926051e-01, -6.146675747114009e-01, -6.118230529402912e-01, -6.159817159772725e-01, -6.145970600773879e-01, -6.145970600773879e-01, -1.897139303990502e-01, -1.914352572470337e-01, -7.051196104222055e-01, -1.556450152596881e-01, -1.686454029620235e-01, -1.686454029620235e-01, -4.888692030260869e-02, -4.898858580948557e-02, -8.868755892593363e-02, -4.416918770701882e-02, -4.418159965932270e-02, -4.418159965932267e-02, -4.122032391806564e+00, -4.121616839475142e+00, -4.122021530061026e+00, -4.121654563293652e+00, -4.121817262428584e+00, -4.121817262428584e+00, -1.751271162595412e+00, -1.759772466982068e+00, -1.750886241462970e+00, -1.758393979615695e+00, -1.756152150786559e+00, -1.756152150786559e+00, -5.244533699672832e-01, -5.475605628080210e-01, -4.906349093124033e-01, -4.919123973523716e-01, -5.300008511084227e-01, -5.300008511084227e-01, -1.219886367294806e-01, -1.965509663878103e-01, -1.164556798714968e-01, -1.536991009575106e+00, -1.338337703280665e-01, -1.338337703280665e-01, -3.973859921807087e-02, -4.256003629200739e-02, -2.796992599495512e-02, -9.746412114817493e-02, -3.382671207191561e-02, -3.382671207191563e-02, -5.044813160986070e-01, -5.064812595168611e-01, -5.058235275704712e-01, -5.052399759110597e-01, -5.055354837426556e-01, -5.055354837426556e-01, -4.904460854750272e-01, -4.594881340233439e-01, -4.692941787056151e-01, -4.781063943472093e-01, -4.735835035646987e-01, -4.735835035646987e-01, -5.728060015662482e-01, -2.382760935292405e-01, -2.743298455223238e-01, -3.347894108149768e-01, -3.027718731083233e-01, -3.027718731083232e-01, -4.259690421463097e-01, -8.890239110137865e-02, -9.436001737529044e-02, -3.178231504779023e-01, -1.057707887252597e-01, -1.057707887252597e-01, -5.552937303684368e-02, -2.434200949471151e-02, -3.201710823248778e-02, -1.029186391418319e-01, -3.177873553920935e-02, -3.177873553920932e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mb3lyp_rc04_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mb3lyp_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.036994195151574e+01, -2.037001601180856e+01, -2.037033458098923e+01, -2.036923294048649e+01, -2.036981169278993e+01, -2.036981169278993e+01, -3.366517462554278e+00, -3.366545516580111e+00, -3.367274751636473e+00, -3.366628752419379e+00, -3.366629954608252e+00, -3.366629954608252e+00, -7.039208416316987e-01, -7.030668428950436e-01, -6.832177196630577e-01, -6.884427018902066e-01, -6.874149569732197e-01, -6.874149569732197e-01, -2.118877217301429e-01, -2.139029020875760e-01, -8.116501694773298e-01, -1.750960928772442e-01, -1.882785053403111e-01, -1.882785053403111e-01, -1.578464945131323e-02, -1.618391397017224e-02, -5.190775563063862e-02, -1.174756529213017e-02, -1.293018335397925e-02, -1.293018335397928e-02, -5.082364572283031e+00, -5.084254630033609e+00, -5.082450371464524e+00, -5.084118912173275e+00, -5.083322993804600e+00, -5.083322993804600e+00, -1.885080889983162e+00, -1.899216027215968e+00, -1.873068692356428e+00, -1.885487713718458e+00, -1.898785315546803e+00, -1.898785315546803e+00, -6.309878829653290e-01, -6.949057755044414e-01, -5.863926105667472e-01, -6.189349730170485e-01, -6.416480824080937e-01, -6.416480824080937e-01, -1.356342368841838e-01, -2.234538677591247e-01, -1.258666678500820e-01, -1.959799007780824e+00, -1.481346268400291e-01, -1.481346268400291e-01, -9.950812736311463e-03, -1.138657265489232e-02, -7.974895826820289e-03, -8.267068420017649e-02, -9.626326577876283e-03, -9.626326577876314e-03, -6.519910938883082e-01, -6.436665363123085e-01, -6.464622501831071e-01, -6.488733157472839e-01, -6.476548548179506e-01, -6.476548548179506e-01, -6.373581022655832e-01, -5.321954075262639e-01, -5.587068193526987e-01, -5.875854683400621e-01, -5.725605677210269e-01, -5.725605677210269e-01, -7.250816227146116e-01, -2.670174626295076e-01, -3.064092348599214e-01, -3.881022732124720e-01, -3.426923258585672e-01, -3.426923258585672e-01, -4.937290989036014e-01, -5.033646366671524e-02, -6.700966050073878e-02, -3.765982761532495e-01, -1.035815114514538e-01, -1.035815114514537e-01, -1.987254480537441e-02, -4.973482843501637e-03, -7.651588311926257e-03, -9.759588469399016e-02, -8.986113518611658e-03, -8.986113518611612e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mb3lyp_rc04_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mb3lyp_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.214058874266490e-09, -5.214033675209977e-09, -5.213850904374920e-09, -5.214227288442585e-09, -5.214040120579040e-09, -5.214040120579040e-09, -6.753073883789720e-06, -6.753365050752026e-06, -6.759446331703672e-06, -6.743792209262579e-06, -6.752775975998187e-06, -6.752775975998187e-06, -3.679015732001444e-03, -3.678126802790239e-03, -3.624702268092344e-03, -3.532256562136329e-03, -3.568011858849430e-03, -3.568011858849430e-03, -2.742506668698186e-01, -2.749518989128032e-01, -2.119133699341574e-03, -3.570971117121439e-01, -3.448576089925063e-01, -3.448576089925062e-01, -7.297679817819733e+03, -6.399439196725414e+03, -3.492243211460877e+01, -3.444000469682885e+04, -1.908649471447184e+04, -1.908649471447185e+04, -1.556606756395702e-06, -1.557748378266979e-06, -1.556644109538183e-06, -1.557652059160539e-06, -1.557192954959958e-06, -1.557192954959958e-06, -4.970421771964149e-05, -4.873314269689456e-05, -4.974884937872102e-05, -4.888717749255822e-05, -4.914664445284704e-05, -4.914664445284704e-05, -7.604303064193713e-03, -7.079346412352591e-03, -9.887197273001995e-03, -1.087439493881204e-02, -7.360947908822068e-03, -7.360947908822068e-03, -4.940691488311700e-01, -1.548632508383963e-01, -7.071860803090140e-01, -9.346621788029168e-05, -5.731448026683642e-01, -5.731448026683642e-01, -7.855464207704159e+04, -3.847843591107436e+04, -1.394358324480566e+05, -5.300019906758153e+00, -6.583056984534817e+04, -6.583056984534813e+04, -1.059180185875422e-02, -9.870296210158662e-03, -1.008581933615283e-02, -1.029153636391696e-02, -1.018514661091321e-02, -1.018514661091321e-02, -1.222569005551601e-02, -1.215256671167483e-02, -1.177768436758409e-02, -1.161749653616862e-02, -1.169011133321274e-02, -1.169011133321274e-02, -5.817673764725374e-03, -9.872249658521376e-02, -7.231164497977786e-02, -4.299643298555089e-02, -5.738821217905840e-02, -5.738821217905844e-02, -1.649090256985677e-02, -3.943989093923455e+01, -1.186426531346186e+01, -5.669905932587326e-02, -2.222228924570592e+00, -2.222228924570593e+00, -2.557805625311820e+03, -2.703132932221740e+06, -2.592659876736484e+05, -2.816897007727858e+00, -8.788122841339887e+04, -8.788122841339916e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
