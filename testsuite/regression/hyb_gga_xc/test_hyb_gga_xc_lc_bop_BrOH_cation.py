
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_bop_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_bop", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.083027337203939e+01, -2.083030109230460e+01, -2.083049220993351e+01, -2.083007838913512e+01, -2.083028557310979e+01, -2.083028557310979e+01, -3.255387239682720e+00, -3.255356472484479e+00, -3.254730674885700e+00, -3.256481257505618e+00, -3.255434674681846e+00, -3.255434674681846e+00, -4.689507576802834e-01, -4.684824386536321e-01, -4.576590965740857e-01, -4.627799489721003e-01, -4.619774593788865e-01, -4.619774593788865e-01, -4.106683723729518e-02, -4.264221388966519e-02, -5.769234091816235e-01, -2.093255999593332e-02, -3.277970497055222e-02, -3.277970497055221e-02, -8.743030941826064e-06, -1.018365071128230e-05, -7.175886617579008e-04, -1.969192731443044e-06, -3.044006536713328e-06, -3.044006536713332e-06, -4.839880959113066e+00, -4.839371105572593e+00, -4.839867803830511e+00, -4.839417546846247e+00, -4.839616919957628e+00, -4.839616919957628e+00, -1.846769469596748e+00, -1.858060814811423e+00, -1.844763341244730e+00, -1.854749324892807e+00, -1.853989292111076e+00, -1.853989292111076e+00, -3.789303226442509e-01, -4.179315778027345e-01, -3.395191389473303e-01, -3.533248171195240e-01, -3.873852151225184e-01, -3.873852151225184e-01, -8.181523072558278e-03, -3.944025112022908e-02, -6.768092292469534e-03, -1.617153196057287e+00, -1.276233444519156e-02, -1.276233444519156e-02, -1.089656847980670e-06, -1.970258924343557e-06, -1.956631550280312e-06, -2.559361481223193e-03, -2.028565236652151e-06, -2.028565236652150e-06, -3.729911687629632e-01, -3.716509505609414e-01, -3.721360009536423e-01, -3.725228535526422e-01, -3.723301512511416e-01, -3.723301512511416e-01, -3.583574101107653e-01, -2.963042215814937e-01, -3.146289474503615e-01, -3.322888737193105e-01, -3.232893031684624e-01, -3.232893031684624e-01, -4.463047527412493e-01, -6.699720576026286e-02, -9.893196973897797e-02, -1.671869325359174e-01, -1.299013414319553e-01, -1.299013414319553e-01, -2.602674200596586e-01, -6.286116511495742e-04, -1.399438526184552e-03, -1.567531734726629e-01, -4.862812347449946e-03, -4.862812347450040e-03, -2.015078137246674e-05, -1.070347470508680e-07, -5.810500125150782e-07, -4.144157711049634e-03, -1.984147256399375e-06, -1.984147256399372e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_bop_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_bop", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.506394203879725e+01, -2.506391199164250e+01, -2.506405068994762e+01, -2.506399118736532e+01, -2.506437907469967e+01, -2.506446558167995e+01, -2.506314890930482e+01, -2.506290164844120e+01, -2.506400514096236e+01, -2.506351405130619e+01, -2.506400514096236e+01, -2.506351405130619e+01, -3.918045655478434e+00, -3.918126427889217e+00, -3.918078161357047e+00, -3.918159981996055e+00, -3.918878717596859e+00, -3.919086703336618e+00, -3.918152925195718e+00, -3.918353259234002e+00, -3.917360280271769e+00, -3.919086482971429e+00, -3.917360280271769e+00, -3.919086482971429e+00, -6.325309701456283e-01, -6.342879754586369e-01, -6.314231300489972e-01, -6.335714922117350e-01, -6.121774048343350e-01, -6.094574308314216e-01, -6.166308746452229e-01, -6.174811577797339e-01, -6.292376104618155e-01, -6.039814044411247e-01, -6.292376104618155e-01, -6.039814044411247e-01, -7.879622317982417e-02, -8.005010111980787e-02, -8.124614466134786e-02, -8.271985458870379e-02, -7.518464643579355e-01, -7.739278573501318e-01, -4.385066389319313e-02, -4.405244650465827e-02, -6.246486040642890e-02, -6.011483332718069e-02, -6.246486040642885e-02, -6.011483332718058e-02, -3.097614884489267e-05, -2.663025217430697e-05, -3.636266485556320e-05, -3.065010254008159e-05, -2.001631721452158e-03, -1.865803571314835e-03, -6.526587284960681e-06, -6.800333365079756e-06, -6.276869702024195e-06, -2.718809247542518e-05, -6.276869702024203e-06, -2.718809247542523e-05, -6.047889985981386e+00, -6.046405391474306e+00, -6.050251324311888e+00, -6.048690545076428e+00, -6.048020732763176e+00, -6.046485803594335e+00, -6.050049899380426e+00, -6.048558586018560e+00, -6.049097942671033e+00, -6.047553497439305e+00, -6.049097942671033e+00, -6.047553497439305e+00, -2.090530518055323e+00, -2.090428304145915e+00, -2.108073619155259e+00, -2.107510860598943e+00, -2.074021760832802e+00, -2.077933816517011e+00, -2.089154561282379e+00, -2.093251429224308e+00, -2.112184213002180e+00, -2.102099930584516e+00, -2.112184213002180e+00, -2.102099930584516e+00, -5.389347999341649e-01, -5.375470014806595e-01, -6.012061509740653e-01, -6.014293953367452e-01, -4.787305754546924e-01, -4.946104778993096e-01, -5.048899153552541e-01, -5.220149722375492e-01, -5.627858765018655e-01, -5.360074603738261e-01, -5.627858765018655e-01, -5.360074603738262e-01, -1.866907238971370e-02, -1.866126680855928e-02, -7.696894746387110e-02, -7.723388545632411e-02, -1.574051954748066e-02, -1.561093183408018e-02, -2.155945150538071e+00, -2.155002278577653e+00, -2.816478714587852e-02, -2.805698261095250e-02, -2.816478714587852e-02, -2.805698261095250e-02, -3.970843303075145e-06, -3.543179305734396e-06, -6.840467866524719e-06, -6.537952042265622e-06, -7.362346855878095e-06, -6.285546503047381e-06, -6.412667419790894e-03, -6.378558202899426e-03, -1.184031103226374e-05, -4.929893560228055e-06, -1.184031103226372e-05, -4.929893560228053e-06, -5.437344299233482e-01, -5.459294329223802e-01, -5.389648669700324e-01, -5.410844375602966e-01, -5.406231736252224e-01, -5.427709434743867e-01, -5.420086561161852e-01, -5.441713037067768e-01, -5.413135725586831e-01, -5.434686317189525e-01, -5.413135725586831e-01, -5.434686317189525e-01, -5.248621821021255e-01, -5.267115248741270e-01, -4.269173447727462e-01, -4.284472502713081e-01, -4.540081186874699e-01, -4.557341073766928e-01, -4.816611157759714e-01, -4.832694386138575e-01, -4.674935495585749e-01, -4.690989217868050e-01, -4.674935495585749e-01, -4.690989217868050e-01, -6.376395296131431e-01, -6.386274547383375e-01, -1.216462162406055e-01, -1.221727592776293e-01, -1.686629526172500e-01, -1.697801214848682e-01, -2.619072985912793e-01, -2.630636747158442e-01, -2.123534734429606e-01, -2.121748779534995e-01, -2.123534734429606e-01, -2.121748779534995e-01, -3.817007912581802e-01, -3.837778898828723e-01, -1.706462080570266e-03, -1.691519546911623e-03, -3.668095568506925e-03, -3.555574060068672e-03, -2.466147970656070e-01, -2.495132952496217e-01, -1.183259014689427e-02, -1.146333874775057e-02, -1.183259014689350e-02, -1.146333874775068e-02, -6.680404443615962e-05, -6.158169056286509e-05, -3.764125561690950e-07, -3.935777827918427e-07, -2.224134657431534e-06, -1.880172879134994e-06, -1.009959250207450e-02, -9.991637464281947e-03, -1.135324652896749e-05, -4.822431314686390e-06, -1.135324652896748e-05, -4.822431314686385e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_bop_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_bop", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.410947465362486e-08, 0.000000000000000e+00, -1.410955436898126e-08, -1.410939625952077e-08, 0.000000000000000e+00, -1.410949688956039e-08, -1.410897068073737e-08, 0.000000000000000e+00, -1.410893867600692e-08, -1.410986658259618e-08, 0.000000000000000e+00, -1.411007220512654e-08, -1.410944058479345e-08, 0.000000000000000e+00, -1.410948875831638e-08, -1.410944058479345e-08, 0.000000000000000e+00, -1.410948875831638e-08, -1.600702172860309e-05, 0.000000000000000e+00, -1.601291491793323e-05, -1.600745301614249e-05, 0.000000000000000e+00, -1.601378328876783e-05, -1.602228578231525e-05, 0.000000000000000e+00, -1.602603478322848e-05, -1.598665756266470e-05, 0.000000000000000e+00, -1.599145648466610e-05, -1.601453657721775e-05, 0.000000000000000e+00, -1.600401514730604e-05, -1.601453657721775e-05, 0.000000000000000e+00, -1.600401514730604e-05, -4.001757612682517e-03, 0.000000000000000e+00, -4.051628652687036e-03, -3.995885839176606e-03, 0.000000000000000e+00, -4.056900400268440e-03, -4.036194238271285e-03, 0.000000000000000e+00, -3.955974438902487e-03, -3.913757471285308e-03, 0.000000000000000e+00, -3.939950180285917e-03, -4.338012361097964e-03, 0.000000000000000e+00, -3.525754204130051e-03, -4.338012361097964e-03, 0.000000000000000e+00, -3.525754204130051e-03, 1.736206364475746e-01, 0.000000000000000e+00, 1.239550786925287e-01, 1.779448244959398e-01, 0.000000000000000e+00, 1.204234313649763e-01, -2.694923423526936e-03, 0.000000000000000e+00, -2.724690000401344e-03, 2.348570531294399e-01, 0.000000000000000e+00, 2.088293699191454e-01, -6.191351530761682e-03, 0.000000000000000e+00, 2.123247606513130e+00, -6.191351530761700e-03, 0.000000000000000e+00, 2.123247606513126e+00, 5.878923084547335e+00, 0.000000000000000e+00, 3.986789912620020e+00, 6.160937939664870e+00, 0.000000000000000e+00, 3.982638726691506e+00, 1.150767507546238e+00, 0.000000000000000e+00, 8.131272966315480e-01, 5.472411193586217e+00, 0.000000000000000e+00, 5.962010246395653e+00, 1.138524334661308e+00, 0.000000000000000e+00, 7.331299147309237e+01, 1.138524334661311e+00, 0.000000000000000e+00, 7.331299147309254e+01, -3.870801048311863e-06, 0.000000000000000e+00, -3.874020943363480e-06, -3.873565053841674e-06, 0.000000000000000e+00, -3.876687935397306e-06, -3.870916948033596e-06, 0.000000000000000e+00, -3.874081916410848e-06, -3.873283891393459e-06, 0.000000000000000e+00, -3.876510209134877e-06, -3.872247334321567e-06, 0.000000000000000e+00, -3.875363674713334e-06, -3.872247334321567e-06, 0.000000000000000e+00, -3.875363674713334e-06, -1.065727483223079e-04, 0.000000000000000e+00, -1.065884765509111e-04, -1.045772684033511e-04, 0.000000000000000e+00, -1.046525772755236e-04, -1.066902062175960e-04, 0.000000000000000e+00, -1.067657701753934e-04, -1.049654583314092e-04, 0.000000000000000e+00, -1.049995808701749e-04, -1.053876424818230e-04, 0.000000000000000e+00, -1.054580266527022e-04, -1.053876424818230e-04, 0.000000000000000e+00, -1.054580266527022e-04, -6.247417852162303e-03, 0.000000000000000e+00, -6.236132231559659e-03, -6.028926994315538e-03, 0.000000000000000e+00, -6.049192863648572e-03, -6.741357090278788e-03, 0.000000000000000e+00, -7.337965305814094e-03, -7.101428688587551e-03, 0.000000000000000e+00, -7.681183221858355e-03, -6.235666120784953e-03, 0.000000000000000e+00, -5.902355362563724e-03, -6.235666120784957e-03, 0.000000000000000e+00, -5.902355362563730e-03, 3.308672649240578e-01, 0.000000000000000e+00, 3.144978314490302e-01, 8.299669060963917e-02, 0.000000000000000e+00, 7.901875831821642e-02, 4.472811618437726e-01, 0.000000000000000e+00, 3.120250052168499e-01, -1.883143108505347e-04, 0.000000000000000e+00, -1.886086525546542e-04, 3.805182782391652e-01, 0.000000000000000e+00, 2.975888396508636e-01, 3.805182782391652e-01, 0.000000000000000e+00, 2.975888396508636e-01, 9.733903494932679e+00, 0.000000000000000e+00, 6.929830187043152e+00, 7.211536100716826e+00, 0.000000000000000e+00, 6.214201343055425e+00, 4.560845311007664e+01, 0.000000000000000e+00, 3.429244627625947e+01, 7.404668760352479e-01, 0.000000000000000e+00, 6.947509417827845e-01, 5.043703624792407e+01, 0.000000000000000e+00, 6.868513942234374e+00, 5.043703624792391e+01, 0.000000000000000e+00, 6.868513942234364e+00, -7.442450164990105e-03, 0.000000000000000e+00, -7.520530903001558e-03, -7.128313784355397e-03, 0.000000000000000e+00, -7.198517690243372e-03, -7.218713462634186e-03, 0.000000000000000e+00, -7.292583895387133e-03, -7.308976936833747e-03, 0.000000000000000e+00, -7.382465678713816e-03, -7.262048101813163e-03, 0.000000000000000e+00, -7.335681181301228e-03, -7.262048101813163e-03, 0.000000000000000e+00, -7.335681181301228e-03, -7.965409420721770e-03, 0.000000000000000e+00, -8.045983181249716e-03, -7.596772801411099e-03, 0.000000000000000e+00, -7.706695935864425e-03, -7.544775854342609e-03, 0.000000000000000e+00, -7.659572299094873e-03, -7.558712016006337e-03, 0.000000000000000e+00, -7.640180898828396e-03, -7.554777966472959e-03, 0.000000000000000e+00, -7.639244581023625e-03, -7.554777966472959e-03, 0.000000000000000e+00, -7.639244581023625e-03, -5.370547961734100e-03, 0.000000000000000e+00, -5.397783764398853e-03, 3.367749160991503e-02, 0.000000000000000e+00, 3.106225774440409e-02, 1.367761395806091e-02, 0.000000000000000e+00, 1.062699505803019e-02, -3.246371186243657e-03, 0.000000000000000e+00, -4.235687226077232e-03, 2.735187591721387e-03, 0.000000000000000e+00, 2.875272243948027e-03, 2.735187591721408e-03, 0.000000000000000e+00, 2.875272243947992e-03, -8.101738980853273e-03, 0.000000000000000e+00, -8.406633590569359e-03, 9.475069919927390e-01, 0.000000000000000e+00, 9.075144632765556e-01, 7.924457845742091e-01, 0.000000000000000e+00, 6.496738940716942e-01, 3.269816533862713e-03, 0.000000000000000e+00, -7.413989837626658e-04, 7.227541038784743e-01, 0.000000000000000e+00, 5.663427757681073e-01, 7.227541038783823e-01, 0.000000000000000e+00, 5.663427757681057e-01, 3.693790563345532e+00, 0.000000000000000e+00, 2.991508776984827e+00, 3.916234288464071e+01, 0.000000000000000e+00, 5.780812622422241e+01, 2.199213791334280e+01, 0.000000000000000e+00, 1.566874576909352e+01, 7.248888202410749e-01, 0.000000000000000e+00, 6.439741698510292e-01, 8.433267521306237e+01, 0.000000000000000e+00, 8.791516067738856e+00, 8.433267521306260e+01, 0.000000000000000e+00, 8.791516067738877e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
