
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.671780649945534e+01, -1.671784345807464e+01, -1.671803717358563e+01, -1.671748670995420e+01, -1.671777095381578e+01, -1.671777095381578e+01, -2.801041595008023e+00, -2.801030162021754e+00, -2.800833899490041e+00, -2.801697353697569e+00, -2.801094055081894e+00, -2.801094055081894e+00, -5.830398287754744e-01, -5.828096547042130e-01, -5.792872058945047e-01, -5.832608320121174e-01, -5.819224996613822e-01, -5.819224996613822e-01, -1.831858817157882e-01, -1.841462785694978e-01, -6.711120166410806e-01, -1.577217826353604e-01, -1.666638228927859e-01, -1.666638228927859e-01, -6.462066909152964e-03, -6.845844772877902e-03, -4.845686530337979e-02, -3.506802593247207e-03, -4.514287940623383e-03, -4.514287940623383e-03, -4.112398227376321e+00, -4.112775681186322e+00, -4.112420088668442e+00, -4.112753209087519e+00, -4.112586798601535e+00, -4.112586798601535e+00, -1.685500179664136e+00, -1.693481351397407e+00, -1.686075262541571e+00, -1.692984640651465e+00, -1.689786996189516e+00, -1.689786996189516e+00, -5.017459385843355e-01, -5.363961108868756e-01, -4.677275602080655e-01, -4.784381379751471e-01, -5.082524179924360e-01, -5.082524179924360e-01, -1.249124279602077e-01, -1.992635353843193e-01, -1.167005726981459e-01, -1.542805643943560e+00, -1.358213038225800e-01, -1.358213038225800e-01, -2.639941699032362e-03, -3.420359101627993e-03, -2.549933498123418e-03, -8.020117951032377e-02, -3.125010554947747e-03, -3.125010554947748e-03, -4.997670052584262e-01, -4.956058088452720e-01, -4.966872197143198e-01, -4.978308671476024e-01, -4.972227146981408e-01, -4.972227146981408e-01, -4.885884737626748e-01, -4.342606080709632e-01, -4.464674446534030e-01, -4.599614653395159e-01, -4.528082519577217e-01, -4.528082519577217e-01, -5.609595534274662e-01, -2.345723374705047e-01, -2.626011886171485e-01, -3.153802434502201e-01, -2.857493023525950e-01, -2.857493023525950e-01, -4.021864175745924e-01, -4.621771153929057e-02, -6.485538392569834e-02, -3.003735043977766e-01, -9.889399666923394e-02, -9.889399666923396e-02, -9.551449216265854e-03, -8.307069021171702e-04, -1.825036435628806e-03, -9.374362006714980e-02, -2.870515833813014e-03, -2.870515833813008e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.141444429099721e+01, -2.141453210391931e+01, -2.141489532801041e+01, -2.141358936330523e+01, -2.141427754537849e+01, -2.141427754537849e+01, -3.489289459525435e+00, -3.489345238108490e+00, -3.490716580526455e+00, -3.488979622549123e+00, -3.489438810748902e+00, -3.489438810748902e+00, -6.859304339577614e-01, -6.843851983913589e-01, -6.434408168514993e-01, -6.496369273833822e-01, -6.493513965615708e-01, -6.493513965615708e-01, -1.737029803965742e-01, -1.776776073920649e-01, -8.009123362596685e-01, -1.327141712005927e-01, -1.458650922293222e-01, -1.458650922293222e-01, -8.874964168920019e-03, -9.405038142691233e-03, -6.300455130120597e-02, -4.791563210355921e-03, -6.181756538885040e-03, -6.181756538885044e-03, -5.339711884054516e+00, -5.341804149761941e+00, -5.339806637428253e+00, -5.341653820905354e+00, -5.340774109167008e+00, -5.340774109167008e+00, -1.777082828696211e+00, -1.798229364072343e+00, -1.747585563700003e+00, -1.766419933226845e+00, -1.802882704731304e+00, -1.802882704731304e+00, -6.312026734307323e-01, -7.048196581116413e-01, -5.833131024768259e-01, -6.245167766450560e-01, -6.435289038234298e-01, -6.435289038234298e-01, -1.186328113782485e-01, -1.639427339692582e-01, -1.145809137090242e-01, -2.035873244932727e+00, -1.180622236043880e-01, -1.180622236043880e-01, -3.597340541677575e-03, -4.672152287222103e-03, -3.472051048407023e-03, -9.162834290830583e-02, -4.263718029588237e-03, -4.263718029588251e-03, -6.623482614588818e-01, -6.515659043719852e-01, -6.553112363028083e-01, -6.585387973900977e-01, -6.569169144971488e-01, -6.569169144971488e-01, -6.464504187788312e-01, -5.160870926303072e-01, -5.536317593932638e-01, -5.893355644430144e-01, -5.713535536085057e-01, -5.713535536085057e-01, -7.360393148265586e-01, -2.049771191615430e-01, -2.569977963283769e-01, -3.704399845927998e-01, -3.106545343484296e-01, -3.106545343484295e-01, -4.771130418374320e-01, -6.063579491400931e-02, -8.044264258686654e-02, -3.662842101782765e-01, -1.002748603573039e-01, -1.002748603573039e-01, -1.314758060764844e-02, -1.121269243005203e-03, -2.478427670469978e-03, -9.798144873763229e-02, -3.913266015514459e-03, -3.913266015514446e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.140345522289916e-09, -2.140281573570452e-09, -2.140054228064959e-09, -2.141004530719456e-09, -2.140498461690542e-09, -2.140498461690542e-09, -3.628279280833917e-06, -3.627841648138140e-06, -3.617366192951343e-06, -3.632828868648633e-06, -3.627407019463706e-06, -3.627407019463706e-06, -2.928674932561998e-03, -2.953606149313291e-03, -3.612178612253846e-03, -3.485592492767867e-03, -3.500065428043093e-03, -3.500065428043093e-03, -5.199178856121286e-01, -4.943078654619095e-01, -1.553716907640492e-03, -1.096878127345205e+00, -8.470310065389084e-01, -8.470310065389088e-01, -2.510663041545132e+00, -2.705872006693737e+00, -2.743532192481563e+00, -1.844781085710334e+00, -2.556497443794171e+00, -2.556497443793626e+00, -4.939980825993114e-07, -4.910494404434022e-07, -4.938733284687188e-07, -4.912701963616056e-07, -4.924981794768207e-07, -4.924981794768207e-07, -5.295710937669969e-05, -5.106060352352535e-05, -5.504606469375099e-05, -5.331527160015408e-05, -5.091131261262272e-05, -5.091131261262272e-05, -3.884676349526070e-03, -2.127481157253731e-04, -5.529661078033100e-03, -1.915889172418700e-03, -3.487424596500516e-03, -3.487424596500516e-03, -1.797384316522498e+00, -4.721838681862459e-01, -2.023018819863491e+00, -8.071878477488740e-06, -1.747591808614812e+00, -1.747591808614812e+00, -2.206830934112750e+00, -2.152160715175610e+00, -1.220351787063619e+01, -3.146058450050286e+00, -6.087841998113834e+00, -6.087841998113705e+00, 8.402965923575308e-03, 6.170384160983060e-05, 1.712664475093436e-03, 3.868210872087322e-03, 2.671611235252593e-03, 2.671611235252593e-03, 1.767867027528462e-02, -9.462696179705183e-03, -6.945643473471596e-03, -4.602875949781988e-03, -5.818814365947511e-03, -5.818814365947511e-03, -4.719032558191367e-04, -2.272514791582723e-01, -1.191817444913587e-01, -3.662316485379634e-02, -6.786685443794661e-02, -6.786685443794672e-02, -1.305937727495506e-02, -2.491135032258416e+00, -2.606556432055117e+00, -3.902965427132123e-02, -3.177864496412396e+00, -3.177864496412392e+00, -2.320205741405219e+00, -6.784083770290576e+00, -4.146947566422830e+00, -3.298541515679798e+00, -7.469433449702158e+00, -7.469433449701997e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
