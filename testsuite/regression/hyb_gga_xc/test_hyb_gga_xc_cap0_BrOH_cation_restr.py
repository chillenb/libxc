
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cap0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.563834617204258e+01, -1.563837147699305e+01, -1.563852649408083e+01, -1.563814913330099e+01, -1.563834081507466e+01, -1.563834081507466e+01, -2.624043797096869e+00, -2.624026488800365e+00, -2.623689866110313e+00, -2.624764979337404e+00, -2.624085167778923e+00, -2.624085167778923e+00, -5.467575895500393e-01, -5.464619455518651e-01, -5.407664278953375e-01, -5.446017082519679e-01, -5.434308655560594e-01, -5.434308655560594e-01, -1.694774592406974e-01, -1.704071101199788e-01, -6.296291732458785e-01, -1.507667584103352e-01, -1.556685962929479e-01, -1.556685962929479e-01, -1.599505519082309e-01, -1.559792541033284e-01, -1.376782863572119e-01, -1.804219372723688e-01, -1.620469910180236e-01, -1.620469910180235e-01, -3.820196367176818e+00, -3.820142371302967e+00, -3.820199973788524e+00, -3.820152198710067e+00, -3.820165490002210e+00, -3.820165490002210e+00, -1.578566266469193e+00, -1.586586785477755e+00, -1.577834944961435e+00, -1.584868902408313e+00, -1.583407878584788e+00, -1.583407878584788e+00, -4.744961237534776e-01, -5.092703634190329e-01, -4.423328150034644e-01, -4.555327228892505e-01, -4.809730553751819e-01, -4.809730553751819e-01, -1.417917505270937e-01, -1.846265627555644e-01, -1.383020469795360e-01, -1.433522679804158e+00, -1.372066165183791e-01, -1.372066165183791e-01, -1.735685179753232e-01, -1.727171433644992e-01, -1.057348987820326e-01, -1.266456244325637e-01, -1.281251944904062e-01, -1.281251944904062e-01, -4.741603640450911e-01, -4.715810707696385e-01, -4.724591264496696e-01, -4.732073384591192e-01, -4.728300724846058e-01, -4.728300724846058e-01, -4.624553712989687e-01, -4.084014727162855e-01, -4.222025724814248e-01, -4.371295599678403e-01, -4.293082811153303e-01, -4.293082811153303e-01, -5.319390470588425e-01, -2.149651869795574e-01, -2.419715156759982e-01, -2.969770201486078e-01, -2.661946704406197e-01, -2.661946704406197e-01, -3.784096765367697e-01, -1.422233669661407e-01, -1.368161897675042e-01, -2.851563127991325e-01, -1.224536962813728e-01, -1.224536962813727e-01, -1.603233027045655e-01, -1.331998919244728e-01, -1.472570407378934e-01, -1.221463930031645e-01, -1.212453538860945e-01, -1.212453538860944e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cap0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.920135906801512e+01, -1.920143139443115e+01, -1.920173863211585e+01, -1.920066285373768e+01, -1.920122857424330e+01, -1.920122857424330e+01, -3.184370048745126e+00, -3.184407457745162e+00, -3.185347665749169e+00, -3.184297380730771e+00, -3.184489081645250e+00, -3.184489081645250e+00, -6.601339532650132e-01, -6.588676488001126e-01, -6.261993780904039e-01, -6.317471350858387e-01, -6.312707582370364e-01, -6.312707582370364e-01, -1.630157048905627e-01, -1.683411682542191e-01, -7.647666581455598e-01, -9.673228670011355e-02, -1.239865275028535e-01, -1.239865275028536e-01, 3.698770522230534e-02, 3.628836848965982e-02, 1.836732291465233e-02, 3.868733138753403e-02, 3.624070556722549e-02, 3.624070556722547e-02, -4.824858750397053e+00, -4.826814109177037e+00, -4.824946841852455e+00, -4.826673071039076e+00, -4.825850926471970e+00, -4.825850926471970e+00, -1.723768562816448e+00, -1.739579090871799e+00, -1.706153498419180e+00, -1.720149577837062e+00, -1.741018561216447e+00, -1.741018561216447e+00, -6.055517920877774e-01, -6.647485693544503e-01, -5.620858054503566e-01, -5.935554556423939e-01, -6.164023642796931e-01, -6.164023642796931e-01, -4.029250346947362e-02, -1.385517992284000e-01, -3.337571188365250e-02, -1.873745110198413e+00, -6.692564879676419e-02, -6.692564879676419e-02, 3.608964174296324e-02, 3.713961733055036e-02, 2.339082412146906e-02, -6.544439810861490e-03, 2.832395700832547e-02, 2.832395700832551e-02, -6.191606977342949e-01, -6.154538625561451e-01, -6.168788093783539e-01, -6.179566872860227e-01, -6.174286368016269e-01, -6.174286368016269e-01, -6.035651769804273e-01, -5.019924008809222e-01, -5.350491194728293e-01, -5.653883769371113e-01, -5.503806689311690e-01, -5.503806689311690e-01, -6.941441833502036e-01, -1.938199188528943e-01, -2.534365191197163e-01, -3.657489506202767e-01, -3.082708269944319e-01, -3.082708269944319e-01, -4.657437816039735e-01, 2.109515023023098e-02, 8.712335396118473e-03, -3.615768076547275e-01, -2.672079637240017e-02, -2.672079637240017e-02, 3.785925778079910e-02, 2.441872504808342e-02, 2.983424054581239e-02, -2.139607614319267e-02, 2.672978425283509e-02, 2.672978425283511e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cap0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cap0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.127278496750227e-09, -4.127245047334891e-09, -4.127062945277495e-09, -4.127561303163018e-09, -4.127304913591976e-09, -4.127304913591976e-09, -4.780450648053438e-06, -4.780382966627067e-06, -4.778362703750688e-06, -4.778410278403041e-06, -4.779931322892727e-06, -4.779931322892727e-06, -2.110647382613956e-03, -2.129220501687500e-03, -2.597506099602428e-03, -2.511938439173155e-03, -2.521523147121969e-03, -2.521523147121969e-03, -4.480210538881126e-01, -4.137563858360652e-01, -1.191451473926125e-03, -1.402321399565823e+00, -8.909542619616003e-01, -8.909542619616005e-01, -3.697929864111850e+04, -3.182161540425588e+04, -1.210834422278726e+02, -2.040134859040611e+05, -1.047490834517800e+05, -1.047490834517800e+05, -1.002191846841570e-06, -1.000859159397145e-06, -1.002131189175919e-06, -1.000954903863265e-06, -1.001517846007375e-06, -1.001517846007375e-06, -4.312187715949656e-05, -4.196710851241818e-05, -4.393031323911520e-05, -4.288820364932397e-05, -4.209525751701578e-05, -4.209525751701578e-05, -2.122218799000214e-03, -2.134796356629779e-04, -2.956432018075552e-03, -4.968156881259757e-04, -1.835184085335015e-03, -1.835184085335015e-03, -5.004916453952951e+00, -4.818500595001873e-01, -6.578204491353191e+00, -2.395077979162910e-05, -2.998172728115538e+00, -2.998172728115538e+00, -4.883492428830701e+05, -2.268751221752127e+05, -7.817922704649973e+05, -2.580651888039152e+01, -3.695970342398366e+05, -3.695970342398363e+05, 4.522048756639505e-04, -1.001201630385449e-04, 1.113212719906775e-04, 2.785944302393199e-04, 1.964993786000412e-04, 1.964993786000412e-04, 5.919832288459308e-04, -5.779829940569156e-03, -3.660696341086442e-03, -1.717258819815715e-03, -2.675922970529921e-03, -2.675922970529921e-03, -2.934345055381898e-04, -1.904176426480231e-01, -8.591609726851653e-02, -1.903680610229308e-02, -4.244520400554098e-02, -4.244520400554096e-02, -7.638903102522890e-03, -1.370271289442286e+02, -5.026861801122583e+01, -1.467892600269419e-02, -1.192644350208027e+01, -1.192644350208026e+01, -1.188680576767212e+04, -1.987038245592472e+07, -1.673672355584431e+06, -1.469461790771994e+01, -4.959421701018989e+05, -4.959421701019007e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
