
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3p86_nwchem_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86_nwchem", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.689904817666680e+01, -1.689907133992215e+01, -1.689922680678464e+01, -1.689888110120999e+01, -1.689905477986953e+01, -1.689905477986953e+01, -2.858442500647424e+00, -2.858417829487855e+00, -2.857916180274119e+00, -2.859318863850056e+00, -2.858480213965222e+00, -2.858480213965222e+00, -6.123285377455632e-01, -6.120644772497540e-01, -6.069280390714386e-01, -6.110750758716798e-01, -6.097797965783306e-01, -6.097797965783306e-01, -1.990907901041298e-01, -2.006816657859244e-01, -7.018074289127899e-01, -1.690479867538566e-01, -1.797092426271401e-01, -1.797092426271402e-01, -5.585463476234303e-02, -5.618589483753268e-02, -1.059290273710007e-01, -4.898455351010637e-02, -4.982212453781903e-02, -4.982212453781901e-02, -4.129996669264197e+00, -4.129686011924930e+00, -4.129990127426380e+00, -4.129715747769867e+00, -4.129834797387674e+00, -4.129834797387674e+00, -1.740567395852533e+00, -1.749048361283364e+00, -1.740386121958908e+00, -1.747849902491209e+00, -1.745371335702482e+00, -1.745371335702482e+00, -5.301842719319071e-01, -5.618691998338373e-01, -4.960349500103640e-01, -5.050913204369795e-01, -5.365721672038614e-01, -5.365721672038614e-01, -1.432036124143058e-01, -2.085784160362822e-01, -1.377176508811725e-01, -1.552772671998783e+00, -1.490588593015404e-01, -1.490588593015404e-01, -4.373394151541545e-02, -4.729882841419706e-02, -3.187054981003998e-02, -1.166822021896238e-01, -3.829518777623917e-02, -3.829518777623919e-02, -5.222999077270263e-01, -5.212542649531668e-01, -5.215958523403093e-01, -5.218938651433236e-01, -5.217419041654607e-01, -5.217419041654607e-01, -5.092999907241341e-01, -4.616467782386396e-01, -4.746025470170003e-01, -4.877471356919528e-01, -4.809113638012359e-01, -4.809113638012359e-01, -5.865098153905698e-01, -2.465636896396488e-01, -2.798825683509301e-01, -3.407256815040519e-01, -3.077799090603271e-01, -3.077799090603270e-01, -4.290889018203302e-01, -1.061661254326178e-01, -1.148783389326954e-01, -3.265781669508880e-01, -1.227083706742416e-01, -1.227083706742415e-01, -6.413861582314444e-02, -2.605252714109660e-02, -3.510974089119906e-02, -1.202244619156509e-01, -3.600357249891534e-02, -3.600357249891532e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3p86_nwchem_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86_nwchem", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.037105219056848e+01, -2.037112685945934e+01, -2.037144724149487e+01, -2.037033656939166e+01, -2.037092017898161e+01, -2.037092017898161e+01, -3.388063437955503e+00, -3.388102569516532e+00, -3.389087295760150e+00, -3.387992659901998e+00, -3.388188651402491e+00, -3.388188651402491e+00, -7.230909846240116e-01, -7.219737989349408e-01, -6.940986352604702e-01, -6.996816633111876e-01, -6.989405623115008e-01, -6.989405623115008e-01, -2.167307661229877e-01, -2.203954633548960e-01, -8.329285877898216e-01, -1.616281419265883e-01, -1.845652984090128e-01, -1.845652984090128e-01, -2.421151823532185e-02, -2.485962459252051e-02, -5.239771417998024e-02, -1.769531321639357e-02, -1.984262760461246e-02, -1.984262760461249e-02, -5.127705351588619e+00, -5.129932747641092e+00, -5.127805072316298e+00, -5.129771447916711e+00, -5.128835708526370e+00, -5.128835708526370e+00, -1.866657389999667e+00, -1.882245203461113e+00, -1.850902833261500e+00, -1.864624750760870e+00, -1.882970244327862e+00, -1.882970244327862e+00, -6.572693172948589e-01, -7.210489828947533e-01, -6.116009841179711e-01, -6.446227326213154e-01, -6.684079861883284e-01, -6.684079861883284e-01, -1.031126879357349e-01, -2.068794317734719e-01, -9.449739521743772e-02, -2.005795346768090e+00, -1.304664949018708e-01, -1.304664949018708e-01, -1.492295760495373e-02, -1.724344305943467e-02, -1.279952764454350e-02, -6.280476277813339e-02, -1.515023211570027e-02, -1.515023211570030e-02, -6.749420841261992e-01, -6.688250928539621e-01, -6.709983302925897e-01, -6.727788924849841e-01, -6.718901002630757e-01, -6.718901002630757e-01, -6.591059293846188e-01, -5.526161731129624e-01, -5.832400054482285e-01, -6.137656629368378e-01, -5.982632294122164e-01, -5.982632294122164e-01, -7.520073686509653e-01, -2.585177174838544e-01, -3.095833651309254e-01, -4.077514420363377e-01, -3.556733683228151e-01, -3.556733683228150e-01, -5.139640417068294e-01, -5.313179172372521e-02, -5.503422881392565e-02, -3.991078454503136e-01, -8.337422837651269e-02, -8.337422837651269e-02, -3.007884472359473e-02, -7.156058679356871e-03, -1.153464408626347e-02, -7.723421143292607e-02, -1.421701986530931e-02, -1.421701986530927e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3p86_nwchem_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86_nwchem", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.391663712854368e-09, -5.391637798543488e-09, -5.391448851113436e-09, -5.391835926534749e-09, -5.391643587847860e-09, -5.391643587847860e-09, -6.416139476511762e-06, -6.416197693291324e-06, -6.416933118608727e-06, -6.410992524557373e-06, -6.415618857275871e-06, -6.415618857275871e-06, -2.743542168390935e-03, -2.754034586241791e-03, -3.007560916251535e-03, -2.921706335335732e-03, -2.941079523132651e-03, -2.941079523132651e-03, -2.948091733245907e-01, -2.802495522489349e-01, -1.586181825867506e-03, -7.690539417452438e-01, -5.120251105012347e-01, -5.120251105012349e-01, -7.302090761948234e+03, -6.405337733752288e+03, -5.098893245674672e+01, -3.444042436886041e+04, -1.908917584871586e+04, -1.908917584871587e+04, -1.418811035876517e-06, -1.417909781272305e-06, -1.418765675444223e-06, -1.417970332278917e-06, -1.418358294863493e-06, -1.418358294863493e-06, -5.096629747138289e-05, -4.980119022535005e-05, -5.145992161883330e-05, -5.041970455264839e-05, -5.008030010364242e-05, -5.008030010364242e-05, -4.331973958683149e-03, -2.830166713260378e-03, -5.735395052697901e-03, -4.569240699463506e-03, -4.066660262733288e-03, -4.066660262733288e-03, -2.759611022222481e+00, -2.896032746665643e-01, -3.628226211817977e+00, -5.240096304466958e-05, -1.600502047050152e+00, -1.600502047050152e+00, -7.855502302065115e+04, -3.847918142202037e+04, -1.396238430301055e+05, -1.386823480039808e+01, -6.585838820380703e+04, -6.585838820380699e+04, -3.187908598517668e-03, -3.807421470042340e-03, -3.646344700193148e-03, -3.477366121959737e-03, -3.567050971817360e-03, -3.567050971817360e-03, -3.109759817502100e-03, -8.179021696396805e-03, -6.899816044252294e-03, -5.721144509042683e-03, -6.318249458091097e-03, -6.318249458091097e-03, -2.417397917177778e-03, -1.298621071008421e-01, -7.015408883557211e-02, -2.755391578695885e-02, -4.419335023464906e-02, -4.419335023464907e-02, -1.092920211790443e-02, -5.512940105354498e+01, -2.455134502513970e+01, -3.140711287900767e-02, -6.478059675382223e+00, -6.478059675382225e+00, -2.563280759984066e+03, -2.703133770297323e+06, -2.592679251634672e+05, -8.007711189354167e+00, -8.792920269043498e+04, -8.792920269043527e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
