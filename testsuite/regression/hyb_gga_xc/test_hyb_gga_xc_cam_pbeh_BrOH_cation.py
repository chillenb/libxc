
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_pbeh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.665656899804444e-01, -3.665665367120531e-01, -3.665689444117656e-01, -3.665563758227406e-01, -3.665631539415891e-01, -3.665631539415891e-01, -3.533500529897686e-01, -3.533545233048624e-01, -3.534582495748986e-01, -3.532796822526880e-01, -3.533556026524110e-01, -3.533556026524110e-01, -2.991594078288491e-01, -2.990685780562122e-01, -2.970863159702732e-01, -2.976279369423891e-01, -2.968004502162331e-01, -2.968004502162331e-01, -1.637926646891311e-01, -1.648001746024659e-01, -3.089549458224690e-01, -1.403531754216650e-01, -1.565836828558064e-01, -1.565836828558064e-01, -8.084187379425910e-03, -8.512542172923070e-03, -4.610570843088851e-02, -4.663156808300971e-03, -6.507363391011748e-03, -6.507363391011748e-03, -3.713028871452823e-01, -3.714956426917686e-01, -3.713108395473858e-01, -3.714810024311372e-01, -3.714009556243867e-01, -3.714009556243867e-01, -3.310615669021155e-01, -3.315079019305525e-01, -3.301789205184971e-01, -3.305626697057298e-01, -3.317495434102335e-01, -3.317495434102335e-01, -2.904640369555597e-01, -3.026413526229396e-01, -2.834648691673007e-01, -2.905490930937485e-01, -2.920823044287452e-01, -2.920823044287453e-01, -1.092154801866023e-01, -1.710447545836979e-01, -1.024808430188009e-01, -3.673436031428042e-01, -1.212852712101571e-01, -1.212852712101571e-01, -3.600343662789970e-03, -4.558491968513486e-03, -3.490652451472503e-03, -7.226888408524276e-02, -4.384658351152473e-03, -4.384658351151106e-03, -2.982457710381667e-01, -2.953077476675776e-01, -2.962565063801545e-01, -2.971077160506489e-01, -2.966741002900884e-01, -2.966741002900884e-01, -2.964239049715688e-01, -2.746591076964886e-01, -2.787442248289440e-01, -2.841416381024283e-01, -2.811894450138792e-01, -2.811894450138792e-01, -3.062998031074027e-01, -1.954193206749943e-01, -2.130087068150794e-01, -2.389344101779977e-01, -2.256449707793424e-01, -2.256449707793423e-01, -2.668795342042857e-01, -4.416581900358592e-02, -5.940491256817282e-02, -2.335316216453563e-01, -8.877244934638145e-02, -8.877244934638158e-02, -1.138930951068828e-02, -1.218611498498779e-03, -2.562564582333077e-03, -8.416857702583225e-02, -4.026689539117604e-03, -4.026689539117596e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_pbeh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.426630368738269e-01, -4.426631865182684e-01, -4.426641363746411e-01, -4.426643536424708e-01, -4.426675601336503e-01, -4.426674021399173e-01, -4.426503523862194e-01, -4.426509610981159e-01, -4.426593727802404e-01, -4.426600845544412e-01, -4.426593727802404e-01, -4.426600845544412e-01, -4.142102930680061e-01, -4.142042329614229e-01, -4.142155038542480e-01, -4.142091527275368e-01, -4.143344350830134e-01, -4.143255966768113e-01, -4.141345078719975e-01, -4.141252734895333e-01, -4.142383209248390e-01, -4.141894946816074e-01, -4.142383209248390e-01, -4.141894946816074e-01, -3.252959950172718e-01, -3.248602898772704e-01, -3.250939774535888e-01, -3.245295773180984e-01, -3.183332410776981e-01, -3.201502132951433e-01, -3.202625151319670e-01, -3.196727148695852e-01, -3.150233390489863e-01, -3.328798288711575e-01, -3.150233390489863e-01, -3.328798288711575e-01, -1.699343002607568e-01, -1.708763825968494e-01, -1.718646813162687e-01, -1.730588892991254e-01, -3.394920113621253e-01, -3.373422523250204e-01, -1.442409987294740e-01, -1.450788719187015e-01, -1.563509638234896e-01, -1.358967883303897e-01, -1.563509638234895e-01, -1.358967883303898e-01, -1.041106223279462e-02, -1.106047501122396e-02, -1.090705233340009e-02, -1.168071408815690e-02, -5.794758420874622e-02, -6.083691143212651e-02, -6.265846963193326e-03, -6.161617546821269e-03, -9.291118189599516e-03, -5.291040930955227e-03, -9.291118189599512e-03, -5.291040930955226e-03, -4.373636029922737e-01, -4.373946019814732e-01, -4.375201336958704e-01, -4.375529643362662e-01, -4.373695601128759e-01, -4.374017135011138e-01, -4.375090301675379e-01, -4.375402484492144e-01, -4.374430665969670e-01, -4.374754986364094e-01, -4.374430665969670e-01, -4.374754986364094e-01, -3.768920400580777e-01, -3.768947831178908e-01, -3.777774093587934e-01, -3.777955822785626e-01, -3.751854873770569e-01, -3.749356874104557e-01, -3.760295853333033e-01, -3.757648000332899e-01, -3.778481253999206e-01, -3.785845834771773e-01, -3.778481253999206e-01, -3.785845834771773e-01, -3.260335133266162e-01, -3.261781544649044e-01, -3.413461276317659e-01, -3.414990204521692e-01, -3.178541339517012e-01, -3.175111323197951e-01, -3.318434977785391e-01, -3.296569526464699e-01, -3.279397558763149e-01, -3.299001543940840e-01, -3.279397558763151e-01, -3.299001543940841e-01, -1.228297883263902e-01, -1.230379418502736e-01, -1.730882475731915e-01, -1.733065369626395e-01, -1.153915756215480e-01, -1.185365177978938e-01, -4.109002876604461e-01, -4.109689205761693e-01, -1.304351225182179e-01, -1.278780585234374e-01, -1.304351225182179e-01, -1.278780585234374e-01, -4.701582670115029e-03, -4.886066344186509e-03, -6.028800161964370e-03, -6.120076804712811e-03, -4.507322973936271e-03, -4.772692575948752e-03, -8.799583110146372e-02, -8.858948795091613e-02, -4.604532372267303e-03, -6.320099046406633e-03, -4.604532372267310e-03, -6.320099046404033e-03, -3.344520688988608e-01, -3.342534624196252e-01, -3.345740861554393e-01, -3.344345268064899e-01, -3.347591222698688e-01, -3.346083400459781e-01, -3.347471410342350e-01, -3.345625475876051e-01, -3.347752538974395e-01, -3.346072790008657e-01, -3.347752538974395e-01, -3.346072790008657e-01, -3.315171754400296e-01, -3.312996081044742e-01, -3.003628106341410e-01, -3.003468668016022e-01, -3.120551596731910e-01, -3.121061593400144e-01, -3.234710586503792e-01, -3.233973247155972e-01, -3.179827631254338e-01, -3.179276761832213e-01, -3.179827631254338e-01, -3.179276761832213e-01, -3.450316933321295e-01, -3.451885898007315e-01, -1.992320543698611e-01, -1.994094776832500e-01, -2.240325701685270e-01, -2.239838237591457e-01, -2.648102335461232e-01, -2.649161805043909e-01, -2.431809935595822e-01, -2.430200704680174e-01, -2.431809935595820e-01, -2.430200704680173e-01, -2.925429368937976e-01, -2.925728425861479e-01, -5.706145092261966e-02, -5.741445027521275e-02, -7.413255343146605e-02, -7.611604579331753e-02, -2.669319937394178e-01, -2.674027726449429e-01, -1.020648512947959e-01, -1.031468484159969e-01, -1.020648512947961e-01, -1.031468484159970e-01, -1.486981479970126e-02, -1.540454421007661e-02, -1.622870417340899e-03, -1.626533845701219e-03, -3.301521105465494e-03, -3.511270392348138e-03, -9.824509374549056e-02, -9.933060802883797e-02, -4.360725632588711e-03, -5.793803434072589e-03, -4.360725632588706e-03, -5.793803434072578e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_pbeh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.920526567080536e-10, 3.855567579455844e-10, 1.920526840344840e-10, 1.920566856806965e-10, 3.855637563905792e-10, 1.920565678165702e-10, 1.920625461204149e-10, 3.855734091993355e-10, 1.920630607572556e-10, 1.920047483402102e-10, 3.854697494807899e-10, 1.920036183726609e-10, 1.920381813174313e-10, 3.855271085313426e-10, 1.920348562250229e-10, 1.920381813174313e-10, 3.855271085313426e-10, 1.920348562250229e-10, 7.821462923831667e-07, 2.158879157656427e-06, 7.815764282091999e-07, 7.823064304650651e-07, 2.159323527660124e-06, 7.816980690842776e-07, 7.854318769302035e-07, 2.169371669283230e-06, 7.849429663503876e-07, 7.793073956632100e-07, 2.149943255801801e-06, 7.787394938132144e-07, 7.821792350303613e-07, 2.159156568071321e-06, 7.817189404491593e-07, 7.821792350303613e-07, 2.159156568071321e-06, 7.817189404491593e-07, -1.495435774616660e-03, 3.586683876242116e-03, -1.573617541575771e-03, -1.485093914119888e-03, 3.559577090514688e-03, -1.581894150390026e-03, -1.480013928261540e-03, 2.876045381924161e-03, -1.318914404348429e-03, -1.320838468573535e-03, 2.810968523930000e-03, -1.373918605962995e-03, -2.018088613593634e-03, 2.852692094259074e-03, -4.394989365605498e-04, -2.018088613593634e-03, 2.852692094259074e-03, -4.394989365605498e-04, -7.147845667639143e-01, 3.108902575321890e-01, -6.561548421193406e-01, -7.111051085921732e-01, 3.280826843588528e-01, -6.401681026594366e-01, -5.866592141082656e-04, 1.940414170439823e-03, -5.844056169694804e-04, -1.107952054863589e+00, 2.258949661124237e-01, -1.064315438018426e+00, -6.402702191285499e-01, 1.882246441728870e-01, -1.757002534075880e+00, -6.402702191285499e-01, 1.882246441728873e-01, -1.757002534075882e+00, -3.916701652676445e+00, 8.471332723898200e-03, -3.877400207444663e+00, -4.126303226593452e+00, 9.964515393423459e-03, -4.105170056867308e+00, -2.262113129416893e+00, 5.126941006152715e-02, -2.273939718480830e+00, -3.589901916112999e+00, 3.008683449168684e-03, -3.492409259061207e+00, -3.912171907912128e+00, 4.414566270491809e-03, -9.929710889226543e+00, -3.912171907911685e+00, 4.414566270088269e-03, -9.929710889226117e+00, 2.303911951479163e-07, 5.666948009101149e-07, 2.303334461818446e-07, 2.317519454891761e-07, 5.704413223836728e-07, 2.317110437768706e-07, 2.304405333194189e-07, 5.668443577206054e-07, 2.303933425565746e-07, 2.316543783072789e-07, 5.701514261968389e-07, 2.315966419819900e-07, 2.310800252566270e-07, 5.686004611431787e-07, 2.310376501360793e-07, 2.310800252566270e-07, 5.686004611431787e-07, 2.310376501360793e-07, 3.718725236253867e-06, 1.221811741084532e-05, 3.718205886172126e-06, 3.706588627072831e-06, 1.218856108878283e-05, 3.704957000669855e-06, 3.600381463273920e-06, 1.161795009824474e-05, 3.550333311447619e-06, 3.600461564481864e-06, 1.159619612758267e-05, 3.550016125969025e-06, 3.696696755939476e-06, 1.250231835492394e-05, 3.838888867453404e-06, 3.696696755939476e-06, 1.250231835492394e-05, 3.838888867453404e-06, -3.708626993110410e-03, 1.180452397706796e-02, -3.847855081785106e-03, -8.960300848506828e-04, 1.489938286408802e-02, -9.036766123250786e-04, -7.052677580032879e-03, 1.535577972946644e-02, -5.027513909908095e-03, -4.404260420783207e-03, 2.278859644535717e-02, -2.044108238560119e-03, -2.347911382670172e-03, 1.179162458306085e-02, -4.617405422298136e-03, -2.347911382670166e-03, 1.179162458306085e-02, -4.617405422298129e-03, -1.426068966502405e+00, 1.261488607621168e-01, -1.447986444636298e+00, -4.342499758257840e-01, 1.139695105238702e-01, -4.284691317263666e-01, -1.641524905819151e+00, 1.279112469154852e-01, -1.578808640312729e+00, 3.002727174600633e-05, 1.207887057881010e-04, 2.994083918305362e-05, -1.463478004957188e+00, 2.409472748596690e-01, -1.747849292763441e+00, -1.463478004957188e+00, 2.409472748596690e-01, -1.747849292763441e+00, -5.040195825367758e+00, 2.933546798259037e-03, -4.362268877573720e+00, -4.339437244270697e+00, 3.699144102256803e-03, -4.006359618792641e+00, -2.471002108374859e+01, 3.685108437354808e-02, -2.749038003962528e+01, -2.539365398109654e+00, 1.250822448857004e-01, -2.444113148686165e+00, -1.228993189256179e+01, 1.410360645889085e-02, -1.207176017919442e+01, -1.228993189255847e+01, 1.410360646869916e-02, -1.207176017919110e+01, -5.871704961277913e-04, 2.514346072918196e-02, -3.614320823555964e-04, -1.919102412082757e-03, 2.157065992117518e-02, -1.705563102593259e-03, -1.502739488982109e-03, 2.270457728491302e-02, -1.286016104000651e-03, -1.118367167130457e-03, 2.373865089872573e-02, -8.960853097499909e-04, -1.315560897188166e-03, 2.321019190891285e-02, -1.095999566660545e-03, -1.315560897188166e-03, 2.321019190891285e-02, -1.095999566660545e-03, -3.958817912981302e-04, 2.977269840520045e-02, -1.613006181842014e-04, -9.765931892455936e-03, 1.592277215307748e-02, -9.520846302570230e-03, -8.107368017965633e-03, 1.838749842245184e-02, -7.848723095530908e-03, -5.730511760755242e-03, 2.169730037966074e-02, -5.479726472656219e-03, -7.035755950531028e-03, 1.995497716545398e-02, -6.766448214499033e-03, -7.035755950531028e-03, 1.995497716545398e-02, -6.766448214499033e-03, -6.493270776333476e-04, 1.183264719377924e-02, -6.298629898832493e-04, -2.106473894768367e-01, 8.498631964250428e-02, -2.073189783313852e-01, -1.223385555104158e-01, 7.821972418059023e-02, -1.200656033563265e-01, -5.683625856333231e-02, 6.964082434152352e-02, -5.500425270598383e-02, -8.649395984582620e-02, 7.796350422599263e-02, -8.767107827324702e-02, -8.649395984582597e-02, 7.796350422599266e-02, -8.767107827324716e-02, -1.522722633561818e-02, 2.285950305464996e-02, -1.470942377432228e-02, -2.072061758948655e+00, 4.213028450134424e-02, -2.074428589147815e+00, -2.021931000715770e+00, 6.458066222247318e-02, -2.064632264012477e+00, -7.413536776613347e-02, 1.099497136873529e-01, -6.733018372163085e-02, -2.440227807340632e+00, 2.182010199987041e-01, -2.852558178187709e+00, -2.440227807340633e+00, 2.182010199987039e-01, -2.852558178187711e+00, -3.101962969199170e+00, 1.056259116938041e-02, -3.166779641778729e+00, -1.551025909908808e+01, 4.011531506685853e-03, -2.747560863138854e+01, -9.571399489420218e+00, 5.020763908060611e-03, -1.018955647730121e+01, -2.753826594100699e+00, 2.002688123716920e-01, -2.690330304082047e+00, -2.534372827318269e+01, 1.800188742308661e-02, -1.253035083886437e+01, -2.534372827317903e+01, 1.800188743452388e-02, -1.253035083886071e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
