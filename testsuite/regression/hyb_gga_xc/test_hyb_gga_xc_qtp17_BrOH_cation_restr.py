
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_qtp17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.621183454617672e+00, -7.621204551533673e+00, -7.621304720166240e+00, -7.620990707871607e+00, -7.621154337357781e+00, -7.621154337357781e+00, -1.298883343509660e+00, -1.298886756174755e+00, -1.298995936211511e+00, -1.299040996729272e+00, -1.298917254170649e+00, -1.298917254170649e+00, -2.829411014417303e-01, -2.825783800216393e-01, -2.734657448602494e-01, -2.756416203456003e-01, -2.752784698775628e-01, -2.752784698775628e-01, -7.503195799916965e-02, -7.691036574018925e-02, -3.256043378814631e-01, -4.903364619732396e-02, -6.007652723178322e-02, -6.007652723178320e-02, -4.696014646027688e-03, -4.914310720355616e-03, -1.715098822001227e-02, -2.876171044836373e-03, -3.529447260761875e-03, -3.529447260761875e-03, -1.914331268050545e+00, -1.914684838011754e+00, -1.914348752485951e+00, -1.914660871389610e+00, -1.914509845861214e+00, -1.914509845861214e+00, -7.503380995392167e-01, -7.556586549035309e-01, -7.461023077718775e-01, -7.508143912857029e-01, -7.553193540644345e-01, -7.553193540644345e-01, -2.541777034287415e-01, -2.760147287563585e-01, -2.368464346596791e-01, -2.476897094224631e-01, -2.581605676472797e-01, -2.581605676472797e-01, -2.457530404276652e-02, -6.650475438537749e-02, -2.253578734964672e-02, -7.454662388069068e-01, -3.707868908651737e-02, -3.707868908651737e-02, -2.276621542712482e-03, -2.818166744896796e-03, -2.212313079898399e-03, -1.835146957791271e-02, -2.617406324227308e-03, -2.617406324227308e-03, -2.583257771158021e-01, -2.564725379557239e-01, -2.571257297017752e-01, -2.576635900235051e-01, -2.573945729243143e-01, -2.573945729243143e-01, -2.523432093401048e-01, -2.148121136664046e-01, -2.259795602390971e-01, -2.367224521300852e-01, -2.312995172441939e-01, -2.312995172441939e-01, -2.876495536669698e-01, -9.019402718240081e-02, -1.140852192894437e-01, -1.568105862054748e-01, -1.348234467862886e-01, -1.348234467862886e-01, -1.994158186904822e-01, -1.688315462582493e-02, -1.638690689257565e-02, -1.536166714984572e-01, -2.347751079673879e-02, -2.347751079673881e-02, -6.369795466001021e-03, -8.436480389371309e-04, -1.669960646174526e-03, -2.202048219283174e-02, -2.440467357679316e-03, -2.440467357679315e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_qtp17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.014065798521421e+01, -1.014068589525851e+01, -1.014081881584510e+01, -1.014040338690923e+01, -1.014061980649246e+01, -1.014061980649246e+01, -1.720915804483570e+00, -1.720918091085710e+00, -1.721011234946831e+00, -1.721161435431691e+00, -1.720958168158558e+00, -1.720958168158558e+00, -3.854007235325085e-01, -3.851676872821653e-01, -3.801574284540406e-01, -3.826613841565884e-01, -3.819667778277434e-01, -3.819667778277434e-01, -1.326471038616200e-01, -1.333504325287076e-01, -4.392913167463576e-01, -1.141186207731847e-01, -1.207112361433832e-01, -1.207112361433832e-01, -6.085668101878622e-03, -6.367092196928959e-03, -2.699842855847112e-02, -3.737667919044723e-03, -4.581035325562456e-03, -4.581035325562456e-03, -2.534369279169429e+00, -2.534795148681797e+00, -2.534390701759081e+00, -2.534766637975586e+00, -2.534584165798424e+00, -2.534584165798424e+00, -1.010028341424872e+00, -1.016405299326203e+00, -1.005968504984115e+00, -1.011588469696088e+00, -1.015528805423618e+00, -1.015528805423618e+00, -3.381288171697209e-01, -3.594346338135254e-01, -3.167958164377810e-01, -3.234806675177490e-01, -3.422947115876651e-01, -3.422947115876651e-01, -8.934045699433193e-02, -1.439216276948299e-01, -8.230204645120326e-02, -9.776572262044865e-01, -9.718008333935900e-02, -9.718008333935900e-02, -2.962872669817645e-03, -3.662747185294405e-03, -2.879707978904007e-03, -5.014779737306010e-02, -3.403378707400369e-03, -3.403378707400369e-03, -3.346174742218487e-01, -3.338220249734278e-01, -3.341005360258237e-01, -3.343299117789980e-01, -3.342147961948985e-01, -3.342147961948985e-01, -3.263572927693942e-01, -2.949894245343980e-01, -3.034380088294937e-01, -3.122030688565683e-01, -3.076418262435244e-01, -3.076418262435244e-01, -3.748878451434931e-01, -1.671917684056061e-01, -1.855138184470510e-01, -2.202441106586095e-01, -2.008590894138784e-01, -2.008590894138784e-01, -2.750489053935564e-01, -2.572763493353351e-02, -3.765538910686666e-02, -2.106862540808066e-01, -6.615948389775826e-02, -6.615948389775823e-02, -8.242825927573815e-03, -1.105049483644998e-03, -2.177723320255915e-03, -6.171023244683725e-02, -3.174703678995280e-03, -3.174703678995278e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_qtp17_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.598439678667032e-11, 1.598417270328687e-11, 1.598310737411136e-11, 1.598644284443447e-11, 1.598470485452000e-11, 1.598470485452000e-11, 1.552463205837065e-07, 1.552446137820530e-07, 1.551858004267161e-07, 1.551379474711721e-07, 1.552252134459321e-07, 1.552252134459321e-07, 6.352954561743400e-04, 6.387409774397396e-04, 7.287580527282873e-04, 6.998629501975163e-04, 7.058921799539342e-04, 7.058921799539342e-04, 2.739567856641662e-01, 2.584981330269757e-01, 2.978701002576347e-04, 7.510938943392387e-01, 4.980686788465339e-01, 4.980686788465340e-01, 4.514298748506686e-08, 1.856430526192382e-07, 7.663521460920717e+00, 1.663702007565103e-17, 7.248625039032892e-13, 7.248625039032892e-13, 1.992786009635971e-08, 1.990929181747989e-08, 1.992693480591928e-08, 1.991054334431598e-08, 1.991848297500177e-08, 1.991848297500177e-08, 2.909144516839804e-06, 2.803951993894232e-06, 2.988925166937504e-06, 2.892674918193177e-06, 2.813670919335183e-06, 2.813670919335183e-06, 1.220184807881472e-03, 8.154109971665144e-04, 1.775482794011754e-03, 1.472862890044357e-03, 1.129072800450702e-03, 1.129072800450702e-03, 2.342685117847930e+00, 2.723587315115232e-01, 2.880410704783029e+00, 3.209894970645323e-06, 1.468525484706573e+00, 1.468525484706573e+00, 2.183341921011506e-24, 4.940526602353185e-18, 2.286173315742051e-25, 6.398676551120639e+00, 4.683356974724012e-20, 4.683356974724012e-20, 1.191855112668395e-03, 1.225574656877630e-03, 1.213581636070651e-03, 1.203807973364294e-03, 1.208688395056012e-03, 1.208688395056012e-03, 1.361586475364633e-03, 2.834121479378756e-03, 2.274251863101439e-03, 1.844027763610862e-03, 2.050375605732455e-03, 2.050375605732455e-03, 6.471503458246702e-04, 1.069152019846239e-01, 4.931148524125421e-02, 1.435429816527052e-02, 2.688205135610573e-02, 2.688205135610573e-02, 4.194500545236294e-03, 7.352485444963538e+00, 7.906674696159698e+00, 1.694758763102741e-02, 4.155175920221811e+00, 4.155175920221811e+00, 1.385592909586475e-04, 1.141521496939873e-85, 6.720515468000665e-37, 4.731451135923262e+00, 3.847277676192657e-22, 3.847277676192455e-22])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
