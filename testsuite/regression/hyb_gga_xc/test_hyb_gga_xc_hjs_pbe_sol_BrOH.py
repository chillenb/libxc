
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_pbe_sol_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.542174208509969e+01, -1.542176797529081e+01, -1.542192738707604e+01, -1.542150255353491e+01, -1.542175537166104e+01, -1.542175537166104e+01, -2.585617344462623e+00, -2.585609969967798e+00, -2.585511926906473e+00, -2.586217675897625e+00, -2.585624327440423e+00, -2.585624327440423e+00, -5.413561346944744e-01, -5.410053069292680e-01, -5.332184865342364e-01, -5.367747751501910e-01, -5.412271119499382e-01, -5.412271119499382e-01, -1.745716615559131e-01, -1.760529612776463e-01, -6.360112800507577e-01, -1.417989092291514e-01, -1.750049172627612e-01, -1.750049172627612e-01, -1.693222263851331e-02, -1.772229434717122e-02, -6.394175556341032e-02, -8.168723827606099e-03, -1.753910798065770e-02, -1.753910798065770e-02, -3.784116255010531e+00, -3.784320973409329e+00, -3.784140302872024e+00, -3.784299417894417e+00, -3.784216506173040e+00, -3.784216506173040e+00, -1.535666236038436e+00, -1.543931505412510e+00, -1.534663893417646e+00, -1.541083489344255e+00, -1.542641042201311e+00, -1.542641042201311e+00, -4.735670861188622e-01, -5.146051241243446e-01, -4.516607873053576e-01, -4.720947846519708e-01, -4.901507072182670e-01, -4.901507072182670e-01, -1.171552400717282e-01, -1.833267317351243e-01, -1.151789520732029e-01, -1.435419048802601e+00, -1.271883693007529e-01, -1.271883693007529e-01, -7.880810992110238e-03, -9.002918097704060e-03, -6.749843560872311e-03, -8.242446954987286e-02, -8.203810504223683e-03, -8.203810504223683e-03, -4.944540099645378e-01, -4.896431406311376e-01, -4.912819724565969e-01, -4.926111120007039e-01, -4.919390206973830e-01, -4.919390206973830e-01, -4.808014061015131e-01, -4.166232960952879e-01, -4.328032355732767e-01, -4.494108251760399e-01, -4.407430184241072e-01, -4.407430184241072e-01, -5.365688408859065e-01, -2.178971313583214e-01, -2.477463002578731e-01, -3.023248681745838e-01, -2.726839949694834e-01, -2.726839949694833e-01, -3.798484168496046e-01, -6.029663868136188e-02, -7.658440903764857e-02, -2.877481354626614e-01, -9.919588887467311e-02, -9.919588887467314e-02, -1.980180311740913e-02, -2.468581116920749e-03, -4.687710755617856e-03, -9.507515359028776e-02, -6.974066453775476e-03, -6.974066453775455e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_pbe_sol_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.936540488863045e+01, -1.936546601358668e+01, -1.936575216145965e+01, -1.936475094940021e+01, -1.936543701137862e+01, -1.936543701137862e+01, -3.223072209106590e+00, -3.223101168050229e+00, -3.224024869544383e+00, -3.223091440511052e+00, -3.223100333047216e+00, -3.223100333047216e+00, -6.713599335768634e-01, -6.701625421887145e-01, -6.377348893391774e-01, -6.431037672639084e-01, -6.709261502881302e-01, -6.709261502881302e-01, -2.022719884854146e-01, -2.061918275926921e-01, -8.064048433592702e-01, -1.445445898175247e-01, -2.034624571640114e-01, -2.034624571640114e-01, -2.234085565859095e-02, -2.335751924955339e-02, -7.580087878147357e-02, -1.087010720194251e-02, -2.311781313723685e-02, -2.311781313723685e-02, -4.864737519669271e+00, -4.866530239076395e+00, -4.864921378217354e+00, -4.866315316931338e+00, -4.865656155645660e+00, -4.865656155645660e+00, -1.764548223142100e+00, -1.779163725557818e+00, -1.755883311984684e+00, -1.767273851028462e+00, -1.785766814540137e+00, -1.785766814540137e+00, -6.189358039581196e-01, -6.769704741865818e-01, -5.897368942270411e-01, -6.222049397391517e-01, -6.424866071550682e-01, -6.424866071550682e-01, -1.204613660454642e-01, -1.914141900481184e-01, -1.180144012505889e-01, -1.894874723733763e+00, -1.282920434868623e-01, -1.282920434868623e-01, -1.048792852627455e-02, -1.197421642108927e-02, -8.979786537280619e-03, -9.160807063291428e-02, -1.091178811944339e-02, -1.091178811944339e-02, -6.447927412783843e-01, -6.432038499291485e-01, -6.440280247975886e-01, -6.444803777946103e-01, -6.442753555949213e-01, -6.442753555949213e-01, -6.255975540536087e-01, -5.325837176566142e-01, -5.646112694148746e-01, -5.921138491221180e-01, -5.785770575200286e-01, -5.785770575200286e-01, -7.065043242692385e-01, -2.396943436913362e-01, -2.905783987854959e-01, -3.869067753905723e-01, -3.368139316671014e-01, -3.368139316671014e-01, -4.850386243917885e-01, -7.276946868940647e-02, -8.776218256052069e-02, -3.762462148575147e-01, -1.038527477449528e-01, -1.038527477449527e-01, -2.605809142203082e-02, -3.290666107963862e-03, -6.245324715510517e-03, -9.950601487183927e-02, -9.279376160830083e-03, -9.279376160830060e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_pbe_sol_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.974642487035235e-09, -2.974615267799998e-09, -2.974471163413903e-09, -2.974917335928569e-09, -2.974628322082679e-09, -2.974628322082679e-09, -3.293179818783128e-06, -3.293045717808268e-06, -3.288842496302372e-06, -3.293478425302258e-06, -3.293058882806236e-06, -3.293058882806236e-06, -1.272187650285600e-03, -1.290522473772209e-03, -1.755666871018720e-03, -1.695592318018397e-03, -1.278815830514839e-03, -1.278815830514839e-03, -1.814553886688613e-01, -1.649097941057383e-01, -5.139821842243888e-04, -5.916870270332653e-01, -1.763816615713942e-01, -1.763816615713942e-01, -8.890471835848702e+00, -8.897668791778715e+00, -2.798539978655237e+00, -6.391851145674783e+00, -9.245228703008143e+00, -9.245228703008143e+00, -6.349509264170355e-07, -6.329033755338812e-07, -6.347449332852618e-07, -6.331529948832945e-07, -6.338999378487398e-07, -6.338999378487398e-07, -3.129013732698780e-05, -3.047797206404909e-05, -3.160061809880543e-05, -3.096288130314971e-05, -3.032577586346771e-05, -3.032577586346771e-05, 4.586143159223547e-04, 3.436841010936594e-03, 4.879044357234937e-04, 3.893417570576945e-03, 7.113234916657574e-04, 7.113234916657574e-04, -1.004140160655977e+00, -1.983098640085210e-01, -1.125441042036406e+00, 8.956900602250694e-06, -8.842329641438407e-01, -8.842329641438407e-01, -6.782131803860198e+00, -6.787112777628741e+00, -1.943112491723864e+01, -2.322605552571050e+00, -1.002462158702499e+01, -1.002462158702473e+01, 6.365199533815284e-03, 4.746378333241761e-03, 5.275025997215646e-03, 5.721303932923399e-03, 5.493832389935639e-03, 5.493832389935636e-03, 7.660817044392126e-03, -1.650455829050296e-03, 5.114871861656191e-04, 2.765446620316749e-03, 1.605825345936321e-03, 1.605825345936323e-03, 2.616555393856133e-03, -8.703946325534763e-02, -4.040997487444235e-02, -3.884745543496645e-03, -1.747954867178617e-02, -1.747954867178625e-02, -2.315748677706708e-03, -2.460256871737078e+00, -2.158702997609661e+00, 8.018710118828890e-03, -1.840016974274149e+00, -1.840016974274165e+00, -6.641704020253870e+00, -1.175742348557687e+01, -1.009633431733246e+01, -2.253253125793622e+00, -1.465009176088587e+01, -1.465009176087935e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
