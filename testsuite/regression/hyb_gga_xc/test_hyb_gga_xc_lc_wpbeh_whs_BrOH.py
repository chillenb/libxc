
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.559093763615940e+01, -1.559095626536176e+01, -1.559109565886538e+01, -1.559078947986146e+01, -1.559094699008272e+01, -1.559094699008272e+01, -2.477966534417785e+00, -2.477948801481905e+00, -2.477569225927007e+00, -2.478776062959624e+00, -2.477968508927989e+00, -2.477968508927989e+00, -3.897116329390136e-01, -3.894877036415407e-01, -3.853666699150984e-01, -3.888077301794151e-01, -3.896282129806679e-01, -3.896282129806679e-01, -4.969105273181686e-02, -5.095255306980198e-02, -4.816673597501086e-01, -2.585340155021540e-02, -5.006414174365718e-02, -5.006414174365718e-02, -7.863233869292077e-06, -9.052067174997414e-06, -8.135529171513845e-04, -8.551680792134774e-07, -8.774277594780991e-06, -8.774277594780991e-06, -3.664693235084773e+00, -3.664452545134175e+00, -3.664672818827226e+00, -3.664485583623130e+00, -3.664563498227920e+00, -3.664563498227920e+00, -1.437873019025825e+00, -1.445433844005818e+00, -1.438441432224001e+00, -1.444316335156832e+00, -1.442303782061702e+00, -1.442303782061702e+00, -3.172125018874218e-01, -3.544078429357161e-01, -2.962249711889292e-01, -3.141931057589413e-01, -3.328518624063808e-01, -3.328518624063808e-01, -1.209873140311320e-02, -5.391721996169026e-02, -1.152891233495109e-02, -1.266558998499053e+00, -1.744759755356680e-02, -1.744759755356680e-02, -7.677136427158124e-07, -1.147057194107234e-06, -4.845473037159972e-07, -2.638953729930234e-03, -8.686495675511084e-07, -8.686495675511099e-07, -3.349461491003264e-01, -3.305636705391425e-01, -3.320404814133313e-01, -3.332505057858611e-01, -3.326372696397075e-01, -3.326372696397075e-01, -3.220561707201050e-01, -2.639507320376827e-01, -2.782256570263825e-01, -2.931131390865732e-01, -2.852993209652719e-01, -2.852993209652719e-01, -3.755348539711791e-01, -8.197888660395689e-02, -1.075943018363198e-01, -1.565372697035925e-01, -1.296761043742921e-01, -1.296761043742920e-01, -2.287254232861649e-01, -6.182004556331005e-04, -1.823312186949112e-03, -1.442309065354656e-01, -6.326487594717043e-03, -6.326487594717088e-03, -1.267679973959101e-05, -2.344644126879491e-08, -1.609575840586504e-07, -5.416220630509269e-03, -5.335120257855021e-07, -5.335120257781079e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.881447978831394e+01, -1.881454575146929e+01, -1.881484454687449e+01, -1.881376429582594e+01, -1.881451453725650e+01, -1.881451453725650e+01, -2.969809493212658e+00, -2.969843689278313e+00, -2.970908767619691e+00, -2.969716515802227e+00, -2.969839992322425e+00, -2.969839992322425e+00, -4.914317502385675e-01, -4.901819974704106e-01, -4.571658384939677e-01, -4.622517487148427e-01, -4.909791666019819e-01, -4.909791666019819e-01, -7.895542045275350e-02, -8.229688015460335e-02, -6.221443804662162e-01, -3.767531158544006e-02, -7.996568939878769e-02, -7.996568939878769e-02, -1.630955624193159e-05, -1.882730078867981e-05, -1.820234703946977e-03, -1.724448202364205e-06, -1.826328459656782e-05, -1.826328459656782e-05, -4.609607182289546e+00, -4.611803277104225e+00, -4.609831210727491e+00, -4.611538799410273e+00, -4.610733903599912e+00, -4.610733903599912e+00, -1.543061000710714e+00, -1.556580310707706e+00, -1.535752480202274e+00, -1.546197308178509e+00, -1.562079760301578e+00, -1.562079760301578e+00, -4.494525821567995e-01, -5.079062822621726e-01, -4.218069235299697e-01, -4.549060101108396e-01, -4.722861237772976e-01, -4.722861237772976e-01, -1.984184687889269e-02, -6.837476670139586e-02, -1.914881395561551e-02, -1.705074616759935e+00, -2.697601256689498e-02, -2.697601256689498e-02, -1.548085896522797e-06, -2.317667121513572e-06, -9.866363748855787e-07, -5.527268894238827e-03, -1.759789691913997e-06, -1.759789691910933e-06, -4.769643713946095e-01, -4.753831054592835e-01, -4.762309412586889e-01, -4.766828679976749e-01, -4.764803102585857e-01, -4.764803102585857e-01, -4.583448629696463e-01, -3.660300471161707e-01, -3.981540239507225e-01, -4.256036846611729e-01, -4.121230773062530e-01, -4.121230773062530e-01, -5.363785920738220e-01, -1.030565061327056e-01, -1.449622928229133e-01, -2.350308777107352e-01, -1.883741100309942e-01, -1.883741100309941e-01, -3.224188770055385e-01, -1.377269498614039e-03, -3.921784540829013e-03, -2.271603027566519e-01, -1.184461884037085e-02, -1.184461884037096e-02, -2.627944979079262e-05, -4.698517004602551e-08, -3.235674249612056e-07, -1.052780536842015e-02, -1.082428248570975e-06, -1.082428248409974e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbeh_whs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbeh_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.096677749526445e-09, -5.096642837194946e-09, -5.096430573575828e-09, -5.097003390776869e-09, -5.096659810368042e-09, -5.096659810368042e-09, -6.023398675007978e-06, -6.023378139309446e-06, -6.021847240108935e-06, -6.019581538110792e-06, -6.023289995966800e-06, -6.023289995966800e-06, -2.315907555310538e-03, -2.336185580661734e-03, -2.818169325986709e-03, -2.738334871390727e-03, -2.323255845900776e-03, -2.323255845900776e-03, -3.763103041339444e-02, -2.385153103591703e-02, -1.139294917534174e-03, -1.612230050954131e-01, -3.335800977206560e-02, -3.335800977206560e-02, 2.942821300405980e-02, 3.169695199255111e-02, 2.237096647922053e-02, 5.520262347300027e-03, 3.304204354006499e-02, 3.304204354006499e-02, -1.270442658215261e-06, -1.268710341964382e-06, -1.270265800916994e-06, -1.268919049559472e-06, -1.269558228029508e-06, -1.269558228029508e-06, -4.880946791189939e-05, -4.779867082490307e-05, -4.890153449782196e-05, -4.811990468378256e-05, -4.796794365029624e-05, -4.796794365029624e-05, -8.276663850405415e-04, 2.632593810114813e-03, -8.914287300463772e-04, 2.964285319421832e-03, -4.689510557822742e-04, -4.689510557822742e-04, -1.550839061077304e-01, -1.095246926571491e-01, -1.564302496777029e-01, -2.266910524568082e-05, -1.714717717658143e-01, -1.714717717658143e-01, 5.689139403939806e-03, 7.085891248440568e-03, 2.145275196349365e-02, -3.256172049576413e-02, 1.094652180571708e-02, 1.094652180599615e-02, 5.787687351557271e-03, 3.972268892352413e-03, 4.563226378881223e-03, 5.063063640029687e-03, 4.808134448901994e-03, 4.808134448901994e-03, 7.187098602295055e-03, -3.418450995616768e-03, -9.230946954440333e-04, 1.640488061233522e-03, 3.235049042943049e-04, 3.235049042943066e-04, 1.829350682460601e-03, -6.626108183861783e-02, -3.516174133503809e-02, -1.546583112334202e-03, -1.365512348775792e-02, -1.365512348775803e-02, -4.085011628318055e-03, 1.838107605144517e-02, -1.574582079292862e-02, 1.691745448446241e-02, -1.064975966808744e-01, -1.064975966808740e-01, 2.427428486661150e-02, 1.779831919989166e-03, 4.326504213305280e-03, -7.746986716762325e-02, 1.480832769742837e-02, 1.480832769660516e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
