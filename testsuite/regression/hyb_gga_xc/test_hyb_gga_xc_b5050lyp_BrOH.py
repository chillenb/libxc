
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b5050lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.051407271198024e+01, -1.051408643404313e+01, -1.051418310411485e+01, -1.051395769294166e+01, -1.051407965217979e+01, -1.051407965217979e+01, -1.792915368158170e+00, -1.792904088401204e+00, -1.792665678460009e+00, -1.793444556282324e+00, -1.792916960021597e+00, -1.792916960021597e+00, -3.857492269149074e-01, -3.856173170223720e-01, -3.826422199045048e-01, -3.851077657359738e-01, -3.856999805233833e-01, -3.856999805233833e-01, -1.197265796411261e-01, -1.209498767516402e-01, -4.491731013822471e-01, -9.100279089188346e-02, -1.200921800026912e-01, -1.200921800026912e-01, -2.992810603557865e-02, -3.037613960122339e-02, -5.218017994478668e-02, -2.578201448242164e-02, -3.008129874724188e-02, -3.008129874724188e-02, -2.583802156196641e+00, -2.583602633283196e+00, -2.583784699376471e+00, -2.583629511797940e+00, -2.583695656369755e+00, -2.583695656369755e+00, -1.092667995640502e+00, -1.098019502674606e+00, -1.092562223782075e+00, -1.096730322756793e+00, -1.096433070281700e+00, -1.096433070281700e+00, -3.284367883586841e-01, -3.445650719830023e-01, -3.136045521091643e-01, -3.183519632939816e-01, -3.386016883830261e-01, -3.386016883830261e-01, -7.030020535086173e-02, -1.218006973233662e-01, -7.004806762355442e-02, -9.692831675338162e-01, -7.936724360558674e-02, -7.936724360558674e-02, -2.527294987282677e-02, -2.612642873132161e-02, -1.997540084766658e-02, -5.559020356497571e-02, -2.373559424999561e-02, -2.373559424999561e-02, -3.259557086762782e-01, -3.266919132628517e-01, -3.264523636576006e-01, -3.262483232713919e-01, -3.263521335908244e-01, -3.263521335908244e-01, -3.160101037383037e-01, -2.935667295643688e-01, -3.007848971056234e-01, -3.069470332720325e-01, -3.038117169336321e-01, -3.038117169336321e-01, -3.602223810336384e-01, -1.500008716825764e-01, -1.739291437093052e-01, -2.117057970705856e-01, -1.920431419626662e-01, -1.920431419626661e-01, -2.675466035362938e-01, -5.239279851572767e-02, -5.434433410764849e-02, -1.983714406362878e-01, -6.228766987037601e-02, -6.228766987037600e-02, -3.306802427132020e-02, -1.781882074208632e-02, -2.079487056618995e-02, -6.082124398308568e-02, -2.122686423789723e-02, -2.122686423789722e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b5050lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.279463508204426e+01, -1.279467479267197e+01, -1.279486185672395e+01, -1.279421138816949e+01, -1.279465594127029e+01, -1.279465594127029e+01, -2.129370578809235e+00, -2.129384325711348e+00, -2.129847039705809e+00, -2.129485936726578e+00, -2.129386410435444e+00, -2.129386410435444e+00, -4.514952004749200e-01, -4.510645310633169e-01, -4.406761046433643e-01, -4.436876044391848e-01, -4.513379812298605e-01, -4.513379812298605e-01, -1.468967220485635e-01, -1.479872304463456e-01, -5.329414138135355e-01, -1.201829192398568e-01, -1.472098768640650e-01, -1.472098768640650e-01, -1.348390538353932e-02, -1.391532690347525e-02, -4.070449052641702e-02, -8.631794023051217e-03, -1.377830153732797e-02, -1.377830153732797e-02, -3.201213467603872e+00, -3.202310220618712e+00, -3.201326124657183e+00, -3.202178896528568e+00, -3.201774992047477e+00, -3.201774992047477e+00, -1.202217462522264e+00, -1.210661997691778e+00, -1.198328936402898e+00, -1.204895054247886e+00, -1.213053045790417e+00, -1.213053045790417e+00, -4.013220592066161e-01, -4.391394148291620e-01, -3.825117333956694e-01, -4.018149116601243e-01, -4.159142277479439e-01, -4.159142277479439e-01, -9.858224797689173e-02, -1.585211642593251e-01, -9.551283477047900e-02, -1.238141747344043e+00, -1.066715367869346e-01, -1.066715367869346e-01, -8.398949178681022e-03, -9.110787435207589e-03, -6.924342912767748e-03, -5.900231440721007e-02, -8.300805905104427e-03, -8.300805905104420e-03, -4.218600168123190e-01, -4.174202689974086e-01, -4.189398396389255e-01, -4.201650807945914e-01, -4.195461455145074e-01, -4.195461455145074e-01, -4.099208490524470e-01, -3.513226126120674e-01, -3.663450299520641e-01, -3.816430183208834e-01, -3.736970013736243e-01, -3.736970013736243e-01, -4.582054529228226e-01, -1.867233143487809e-01, -2.103056903194732e-01, -2.550888944532277e-01, -2.304434191828673e-01, -2.304434191828673e-01, -3.204428276146377e-01, -3.790399123637523e-02, -5.321820633091773e-02, -2.421705299456750e-01, -7.707607739357328e-02, -7.707607739357325e-02, -1.534010946851649e-02, -4.201665257932143e-03, -5.966067828885311e-03, -7.194857674448114e-02, -7.251659256571382e-03, -7.251659256571379e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b5050lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.035063917579635e-09, -3.035051207537599e-09, -3.034948660545450e-09, -3.035157714155527e-09, -3.035057597954800e-09, -3.035057597954800e-09, -3.874313156065222e-06, -3.874444973177055e-06, -3.877438931036576e-06, -3.869037833863364e-06, -3.874315667555265e-06, -3.874315667555265e-06, -1.858804852171419e-03, -1.856454535045622e-03, -1.771660464562671e-03, -1.736138497487968e-03, -1.857993905675427e-03, -1.857993905675427e-03, -7.453606755800829e-02, -7.891253046867967e-02, -1.080964564728738e-03, 6.225446494485865e-02, -7.600858600759473e-02, -7.600858600759473e-02, -1.175722517578818e+03, -1.031240482996696e+03, -7.477151532012595e+00, -8.711299213892225e+03, -1.074189521261078e+03, -1.074189521261078e+03, -9.010509128752611e-07, -9.017053027069438e-07, -9.011126539880233e-07, -9.016215324165981e-07, -9.013932966832418e-07, -9.013932966832418e-07, -2.779006055337155e-05, -2.728432015021659e-05, -2.774743134218349e-05, -2.735347455613616e-05, -2.750159272290617e-05, -2.750159272290617e-05, -4.102256901010161e-03, -3.986011581475731e-03, -4.884255456590298e-03, -5.300941745961318e-03, -3.708992922292321e-03, -3.708992922292321e-03, 4.770101805812546e-01, -2.183098084368305e-03, 4.207359678910583e-01, -5.343404313811751e-05, 1.917147337377489e-01, 1.917147337377489e-01, -9.821095659172610e+03, -6.698137979616589e+03, -2.062353309078605e+04, -4.481720765613516e-01, -9.767424647373431e+03, -9.767424647373437e+03, -5.428128557386193e-03, -5.028943135630532e-03, -5.151007892998074e-03, -5.259220368348089e-03, -5.203371445769741e-03, -5.203371445769741e-03, -6.274771262160921e-03, -5.715945005248213e-03, -5.711524698871631e-03, -5.770821954592053e-03, -5.740701022298444e-03, -5.740701022298443e-03, -3.288203831515436e-03, -2.088876821078797e-02, -2.379034081361369e-02, -1.912903806867172e-02, -2.259439929066857e-02, -2.259439929066858e-02, -8.049513910613783e-03, -1.007985482897765e+01, -1.164565606838502e+00, -2.790824803531305e-02, 3.298250109989159e-01, 3.298250109989132e-01, -6.892502509138844e+02, -3.253817109233357e+05, -4.900540660869634e+04, 5.894466865505665e-02, -1.733817377301524e+04, -1.733817377301531e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
