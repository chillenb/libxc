
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_apbe0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.589816692179674e+01, -1.589818513054095e+01, -1.589832143745246e+01, -1.589804938973762e+01, -1.589818406390497e+01, -1.589818406390497e+01, -2.672617226787230e+00, -2.672588943714929e+00, -2.672000018132410e+00, -2.673524938288274e+00, -2.672646859259399e+00, -2.672646859259399e+00, -5.559024046038827e-01, -5.557484951748966e-01, -5.536109958922466e-01, -5.574209910399504e-01, -5.561052187430874e-01, -5.561052187430874e-01, -1.706474455197306e-01, -1.719595668506622e-01, -6.396812559955380e-01, -1.411543603361052e-01, -1.525007225205363e-01, -1.525007225205363e-01, -7.566314815057270e-03, -7.963288023568788e-03, -4.337345079491946e-02, -4.371326633596790e-03, -5.492201383545464e-03, -5.492201383545464e-03, -3.856757801187372e+00, -3.856325277568376e+00, -3.856745839254661e+00, -3.856363864115256e+00, -3.856533980030022e+00, -3.856533980030022e+00, -1.634891243594957e+00, -1.642486496158616e+00, -1.635777285471664e+00, -1.642482318863042e+00, -1.638659589930132e+00, -1.638659589930132e+00, -4.760709920416669e-01, -5.080922256569882e-01, -4.442316412899538e-01, -4.544349361373543e-01, -4.820295761384001e-01, -4.820295761384001e-01, -1.059957629538936e-01, -1.800330714339601e-01, -9.887288490554801e-02, -1.433541849969103e+00, -1.193306709956594e-01, -1.193306709956594e-01, -3.372945273246299e-03, -4.273332645832739e-03, -3.267336134483447e-03, -6.867259334547283e-02, -3.936136818515691e-03, -3.936136818515691e-03, -4.734456021675761e-01, -4.704291026820277e-01, -4.713746335984947e-01, -4.722441369867076e-01, -4.717980810187340e-01, -4.717980810187340e-01, -4.620644824600523e-01, -4.132922897200826e-01, -4.242650864402944e-01, -4.368385529445854e-01, -4.300767748269472e-01, -4.300767748269472e-01, -5.307723139911660e-01, -2.166242256714833e-01, -2.468663768631431e-01, -2.999740769761126e-01, -2.709374353684213e-01, -2.709374353684213e-01, -3.827184598377911e-01, -4.158387622972845e-02, -5.612194053428750e-02, -2.861659453212405e-01, -8.508571276700590e-02, -8.508571276700591e-02, -1.067403878984722e-02, -1.142453365243634e-03, -2.397926312766369e-03, -8.050327655470417e-02, -3.642191825005384e-03, -3.642191825005383e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_apbe0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.884618993365581e+01, -1.884626723719232e+01, -1.884658680086376e+01, -1.884543719026978e+01, -1.884604298412102e+01, -1.884604298412102e+01, -3.107593032771645e+00, -3.107635452193322e+00, -3.108690929208662e+00, -3.107428725373716e+00, -3.107716439664377e+00, -3.107716439664377e+00, -6.401101204729771e-01, -6.388713824025537e-01, -6.095742703211329e-01, -6.147582475987133e-01, -6.141429940267891e-01, -6.141429940267891e-01, -1.795935815273972e-01, -1.819006947846654e-01, -7.419949501111474e-01, -1.499128726919697e-01, -1.593646129729182e-01, -1.593646129729182e-01, -1.007799128928709e-02, -1.060522304857597e-02, -5.632822949421023e-02, -5.826517016329702e-03, -7.318647756344052e-03, -7.318647756344054e-03, -4.748157497402455e+00, -4.750563970798312e+00, -4.748264060033701e+00, -4.750388530907713e+00, -4.749379259724260e+00, -4.749379259724260e+00, -1.700279137135215e+00, -1.713655298751481e+00, -1.688558803497374e+00, -1.700167282585901e+00, -1.713595077140383e+00, -1.713595077140383e+00, -5.937762760520566e-01, -6.633771395711009e-01, -5.499354555117002e-01, -5.912756114630831e-01, -6.057580096597934e-01, -6.057580096597934e-01, -1.230191995164080e-01, -1.865652589834047e-01, -1.162358673582432e-01, -1.863598689696508e+00, -1.312285600613289e-01, -1.312285600613289e-01, -4.496248542370488e-03, -5.695832472552811e-03, -4.354271053534913e-03, -8.523602977938416e-02, -5.245585610969682e-03, -5.245585610969681e-03, -6.195734629059754e-01, -6.145346503780370e-01, -6.166070268956464e-01, -6.180935586488242e-01, -6.173782829069843e-01, -6.173782829069843e-01, -6.039290509368518e-01, -4.870219920690754e-01, -5.228074219476141e-01, -5.589364707632147e-01, -5.407873024829696e-01, -5.407873024829696e-01, -6.921623511326895e-01, -2.225652340020600e-01, -2.605621649557688e-01, -3.548820232801317e-01, -3.018761357281201e-01, -3.018761357281201e-01, -4.518698918885879e-01, -5.417962710356299e-02, -7.172348487326022e-02, -3.528480111762690e-01, -1.008538624710422e-01, -1.008538624710422e-01, -1.420578276959469e-02, -1.523188811826435e-03, -3.196705507963645e-03, -9.659213372546788e-02, -4.853943498438220e-03, -4.853943498438218e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_apbe0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.914366082803647e-09, -5.914324214560299e-09, -5.914080036589541e-09, -5.914704133461177e-09, -5.914385374102534e-09, -5.914385374102534e-09, -7.100909211290121e-06, -7.100975106860999e-06, -7.101806609835811e-06, -7.095130471300411e-06, -7.100327088048766e-06, -7.100327088048766e-06, -3.335800243767844e-03, -3.352017613220064e-03, -3.676620650424384e-03, -3.571502396846392e-03, -3.597457315148358e-03, -3.597457315148358e-03, -3.442039660996913e-01, -3.369047960081533e-01, -1.904444141598417e-03, -5.132274447406706e-01, -4.685257204491540e-01, -4.685257204491540e-01, -1.540899042292306e+00, -1.627632008485546e+00, -9.003917063528292e-01, -1.401585672934152e+00, -1.779963168040946e+00, -1.779963168039626e+00, -1.523592973560262e-06, -1.522068506286498e-06, -1.523521396762311e-06, -1.522176011052016e-06, -1.522824402761146e-06, -1.522824402761146e-06, -5.488064351308437e-05, -5.379161051809611e-05, -5.495904898182645e-05, -5.400826842048854e-05, -5.422128222426610e-05, -5.422128222426610e-05, -4.192503557739261e-03, -2.549646356624566e-04, -5.780770427757227e-03, -1.051855867425198e-03, -3.703327961873215e-03, -3.703327961873215e-03, -6.138841673725707e-01, -2.392542021319993e-01, -6.770673415682797e-01, -4.014404230834991e-05, -7.174860379908814e-01, -7.174860379908814e-01, -1.847068359431216e+00, -1.649506683198391e+00, -1.035476682298068e+01, -1.003785566716495e+00, -4.819058791241814e+00, -4.819058791238747e+00, 2.354789708464432e-03, 8.674194178005974e-05, 7.902105932564209e-04, 1.444619624342131e-03, 1.108546680574944e-03, 1.108546680574944e-03, 3.653244854420604e-03, -9.789630292687744e-03, -7.106993981110131e-03, -3.831629362675991e-03, -5.575847411486264e-03, -5.575847411486264e-03, -4.905769570826514e-04, -1.367074235182912e-01, -8.699932029448372e-02, -3.276900806147377e-02, -5.726757463099318e-02, -5.726757463099315e-02, -1.304605151729774e-02, -8.222540484984476e-01, -8.157033346345779e-01, -3.060551759279343e-02, -1.096259863888629e+00, -1.096259863888630e+00, -1.240846629979390e+00, -8.099058405993206e+00, -3.918744206155349e+00, -1.112750409585724e+00, -6.086967679657127e+00, -6.086967679659134e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
