
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_x3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645810948749867e+01, -1.645813266317666e+01, -1.645828591682364e+01, -1.645794007308375e+01, -1.645811414677510e+01, -1.645811414677510e+01, -2.779303495399464e+00, -2.779277726053310e+00, -2.778748671172351e+00, -2.780185255615943e+00, -2.779338194463174e+00, -2.779338194463174e+00, -5.852445962017820e-01, -5.850874899964195e-01, -5.822016808104310e-01, -5.862403852864387e-01, -5.849029088397135e-01, -5.849029088397135e-01, -1.768094116223018e-01, -1.785135368470057e-01, -6.728992492186220e-01, -1.434651571150103e-01, -1.564568947158850e-01, -1.564568947158851e-01, -3.767244196325641e-02, -3.778005864129647e-02, -7.112382808749233e-02, -3.385236663800345e-02, -3.396235575281081e-02, -3.396235575281079e-02, -4.012410924451901e+00, -4.012000062480167e+00, -4.012400119576709e+00, -4.012037295964142e+00, -4.012198261375402e+00, -4.012198261375402e+00, -1.693321743565698e+00, -1.701660521085813e+00, -1.692875586590809e+00, -1.700242750997490e+00, -1.698139517587319e+00, -1.698139517587319e+00, -4.978170732891207e-01, -5.201114476416624e-01, -4.651397997387560e-01, -4.663331060277683e-01, -5.031800725159439e-01, -5.031800725159439e-01, -1.086059362472673e-01, -1.820239435908112e-01, -1.030436017863211e-01, -1.484132889215067e+00, -1.223264723880571e-01, -1.223264723880571e-01, -3.041729235982520e-02, -3.263139661775279e-02, -2.154397034461492e-02, -8.313947995727859e-02, -2.602292625849692e-02, -2.602292625849693e-02, -4.784027347684466e-01, -4.803879193895710e-01, -4.797406892505631e-01, -4.791637889750938e-01, -4.794564491118473e-01, -4.794564491118473e-01, -4.648088712418845e-01, -4.350380677603118e-01, -4.445411616399845e-01, -4.530360444358417e-01, -4.486816272595334e-01, -4.486816272595334e-01, -5.445539476039816e-01, -2.221448053534118e-01, -2.569924949198347e-01, -3.152135667832087e-01, -2.844513081640224e-01, -2.844513081640224e-01, -4.027437894255467e-01, -7.084316899988560e-02, -7.700178446768621e-02, -2.990390274726218e-01, -9.407187616317424e-02, -9.407187616317424e-02, -4.289864224726735e-02, -1.854567063816640e-02, -2.449334586708844e-02, -9.081395662104226e-02, -2.445116326815941e-02, -2.445116326815939e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_x3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.989634290313729e+01, -1.989641522557879e+01, -1.989672642712551e+01, -1.989565063526509e+01, -1.989621579232263e+01, -1.989621579232263e+01, -3.273100563298907e+00, -3.273127637003000e+00, -3.273832460648440e+00, -3.273215227484446e+00, -3.273210141009065e+00, -3.273210141009065e+00, -6.723668921809751e-01, -6.715590744644214e-01, -6.529648863825140e-01, -6.580066365836750e-01, -6.569837360095635e-01, -6.569837360095635e-01, -2.014620433019372e-01, -2.030655288126225e-01, -7.769890528666258e-01, -1.712779219081067e-01, -1.811354041171986e-01, -1.811354041171986e-01, -1.298286788155348e-02, -1.333431123114146e-02, -5.498323456111992e-02, -9.573823938241709e-03, -1.059850271004725e-02, -1.059850271004727e-02, -4.950383000035035e+00, -4.952228775637883e+00, -4.950466797218241e+00, -4.952096244314003e+00, -4.951318951082087e+00, -4.951318951082087e+00, -1.827457066027841e+00, -1.841136592098864e+00, -1.816070302554316e+00, -1.828078273849835e+00, -1.840615654343262e+00, -1.840615654343262e+00, -6.008158562590311e-01, -6.625595857938686e-01, -5.576552058490637e-01, -5.888568292424514e-01, -6.111008342251782e-01, -6.111008342251782e-01, -1.431613157478046e-01, -2.162330148428647e-01, -1.347675725101614e-01, -1.896960994013607e+00, -1.484061048424286e-01, -1.484061048424286e-01, -8.099339906559743e-03, -9.291841590328408e-03, -6.610029578402237e-03, -9.479577483272289e-02, -7.936067836146957e-03, -7.936067836146980e-03, -6.207447406667509e-01, -6.128146462693612e-01, -6.155027727385939e-01, -6.178018904624409e-01, -6.166431151525406e-01, -6.166431151525406e-01, -6.065652191314490e-01, -5.056752804139103e-01, -5.308902300228521e-01, -5.585778808015002e-01, -5.441450771184995e-01, -5.441450771184995e-01, -6.918848676196145e-01, -2.553792391069795e-01, -2.908344573618548e-01, -3.667893918492124e-01, -3.241101032138624e-01, -3.241101032138623e-01, -4.684984296569081e-01, -5.197918475835168e-02, -7.613606289497188e-02, -3.553454797752062e-01, -1.119544372471033e-01, -1.119544372471033e-01, -1.643177626727508e-02, -4.012509595810175e-03, -6.235832032818973e-03, -1.072474952602201e-01, -7.417628140291109e-03, -7.417628140291076e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_x3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.121451977349170e-09, -5.121427620199645e-09, -5.121249224264878e-09, -5.121613068658444e-09, -5.121432381919677e-09, -5.121432381919677e-09, -6.613796529931489e-06, -6.614087575189397e-06, -6.620179825183164e-06, -6.604614615126943e-06, -6.613512217045607e-06, -6.613512217045607e-06, -3.539575410167607e-03, -3.538003650625094e-03, -3.465885382172830e-03, -3.379107614431302e-03, -3.413762719465454e-03, -3.413762719465454e-03, -2.264428655441346e-01, -2.305455932062580e-01, -2.047225964299944e-03, -1.850162493113017e-01, -2.459524311674084e-01, -2.459524311674083e-01, -5.486730991483332e+03, -4.809401805281801e+03, -1.845919343167203e+01, -2.593478783579087e+04, -1.436603615653788e+04, -1.436603615653788e+04, -1.528564308112045e-06, -1.529709842197033e-06, -1.528602003060575e-06, -1.529613406176173e-06, -1.529152419575375e-06, -1.529152419575375e-06, -4.820193616994137e-05, -4.727800641235074e-05, -4.820606034238182e-05, -4.738781390807521e-05, -4.768906342947089e-05, -4.768906342947089e-05, -7.352625339059058e-03, -6.892504895820007e-03, -9.537073663307355e-03, -1.056219840189848e-02, -7.124937457956420e-03, -7.124937457956420e-03, 3.973578855911737e-01, -1.010993372769567e-01, 5.130141799559816e-01, -9.170771733361426e-05, -1.509694604205140e-01, -1.509694604205140e-01, -5.916408174529668e+04, -2.897533066645866e+04, -1.049690249137058e+05, -1.123909945774067e-01, -4.955855359249454e+04, -4.955855359249450e+04, -1.047187701590009e-02, -9.602708576962080e-03, -9.827308317521941e-03, -1.006256498481257e-02, -9.937144800113144e-03, -9.937144800113144e-03, -1.210310105029899e-02, -1.162322415383469e-02, -1.134137463602791e-02, -1.124736238491998e-02, -1.128894285298299e-02, -1.128894285298299e-02, -5.665308280852406e-03, -7.972881339233527e-02, -6.409068163401668e-02, -4.063654008175678e-02, -5.302150722001514e-02, -5.302150722001518e-02, -1.573490189241798e-02, -2.211780950709675e+01, -3.009572496040907e+00, -5.394574612398367e-02, -2.275066304044040e-02, -2.275066304044206e-02, -1.917954421680826e+03, -2.036252332774465e+06, -1.952828216334176e+05, -6.349794428336199e-03, -6.616111449682855e+04, -6.616111449682877e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
