
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.761383570053220e+01, -1.761385761728390e+01, -1.761401423026899e+01, -1.761368694101478e+01, -1.761385001494721e+01, -1.761385001494721e+01, -2.847789080329744e+00, -2.847756343074413e+00, -2.847072184975995e+00, -2.848821959377071e+00, -2.847820881913937e+00, -2.847820881913937e+00, -4.850262821699038e-01, -4.849030747524702e-01, -4.827003812594043e-01, -4.869548550010077e-01, -4.855182703635911e-01, -4.855182703635911e-01, -6.880283305133819e-02, -7.096380371946948e-02, -5.773600562443458e-01, -3.794537375061956e-02, -4.879135608473600e-02, -4.879135608473584e-02, 8.252267014780863e-03, 8.633508587071645e-03, 2.631688650894273e-02, 5.011644332751421e-03, 6.182408188352396e-03, 6.182408188352394e-03, -4.173819077791371e+00, -4.173420317138482e+00, -4.173809185446555e+00, -4.173456981804225e+00, -4.173611849899733e+00, -4.173611849899733e+00, -1.692034539765063e+00, -1.700463017203827e+00, -1.693246888345396e+00, -1.700671016087575e+00, -1.696123764483808e+00, -1.696123764483808e+00, -3.926500395784298e-01, -4.283377608942929e-01, -3.587723257435940e-01, -3.687516000840328e-01, -3.985187976626953e-01, -3.985187976626953e-01, -9.096541189765373e-03, -7.390010380386799e-02, -2.892288114594126e-03, -1.460822265672688e+00, -1.942305620573218e-02, -1.942305620573218e-02, 3.933475540238597e-03, 4.906935519074578e-03, 3.814380725773610e-03, 1.894333493291301e-02, 4.542953827434326e-03, 4.542953827434343e-03, -3.892419609876129e-01, -3.874382206035232e-01, -3.888252589941672e-01, -3.894586784064360e-01, -3.892236833316346e-01, -3.892236833316346e-01, -3.762151180730749e-01, -3.283026117299355e-01, -3.376076821144162e-01, -3.484104967872824e-01, -3.422100545222553e-01, -3.422100545222553e-01, -4.528704678631910e-01, -1.103440670813389e-01, -1.454026230783216e-01, -2.076003709795647e-01, -1.755339210954484e-01, -1.755339210954486e-01, -2.952973845437269e-01, 2.630491121046747e-02, 2.472648486763988e-02, -1.921622353087701e-01, 7.842135586868380e-03, 7.842135586868479e-03, 1.113447384505169e-02, 1.393424769753467e-03, 2.847091532572554e-03, 1.115112596220616e-02, 4.224795741070118e-03, 4.224795741070121e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.104656991376922e+01, -2.104666234057095e+01, -2.104703732917179e+01, -2.104566295999835e+01, -2.104638820117140e+01, -2.104638820117140e+01, -3.319649380995500e+00, -3.319701266380298e+00, -3.320986292484374e+00, -3.319397751253520e+00, -3.319793129373242e+00, -3.319793129373242e+00, -5.676926874550344e-01, -5.669716083464835e-01, -5.522780109023043e-01, -5.572004376728316e-01, -5.560385339800552e-01, -5.560385339800552e-01, -1.158863534322343e-01, -1.209204875050224e-01, -6.750541683386891e-01, -4.240807501842577e-02, -7.431660776819651e-02, -7.431660776819754e-02, 1.063484869089286e-02, 1.110288777508294e-02, 2.285056737655259e-02, 6.549371637042552e-03, 8.038892509348182e-03, 8.038892509348054e-03, -5.200036399871989e+00, -5.203195168624396e+00, -5.200175001472029e+00, -5.202963670149590e+00, -5.201641151749342e+00, -5.201641151749342e+00, -1.755534643718202e+00, -1.771074512318480e+00, -1.739725916941271e+00, -1.753754084137575e+00, -1.771446201350774e+00, -1.771446201350774e+00, -5.046143360623274e-01, -6.054458136598113e-01, -4.554497681112941e-01, -5.281306462151921e-01, -5.200228535636229e-01, -5.200228535636229e-01, -1.474624615949505e-02, -6.836668385367098e-02, -1.345674152416740e-02, -1.944468658902277e+00, -2.460451062299163e-02, -2.460451062299163e-02, 5.159806366690745e-03, 6.413899087918588e-03, 4.996000092846008e-03, 2.777378181614654e-03, 5.938057781216974e-03, 5.938057781216856e-03, -5.386715920655816e-01, -5.508320300212318e-01, -5.467708001073872e-01, -5.414355027873595e-01, -5.441704794288600e-01, -5.441704794288600e-01, -5.320163126228641e-01, -3.977794352179130e-01, -4.259405335207322e-01, -4.771716928161931e-01, -4.479195121400769e-01, -4.479195121400769e-01, -6.386168433767619e-01, -1.329277860526039e-01, -1.977778564732199e-01, -2.625632360649823e-01, -2.327605500929460e-01, -2.327605500929468e-01, -3.607531802710762e-01, 2.395919128434282e-02, 1.466360406287758e-02, -2.476934473574412e-01, -9.770412681817066e-03, -9.770412681817345e-03, 1.414397597631465e-02, 1.844557328296368e-03, 3.748236036369814e-03, -6.918723773061258e-03, 5.527903632855082e-03, 5.527903632855146e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.232631590225347e-09, -6.232569140362843e-09, -6.232259369282679e-09, -6.233189115417201e-09, -6.232706528540752e-09, -6.232706528540752e-09, -8.172477036304814e-06, -8.172514678339405e-06, -8.172549350186398e-06, -8.166327601817431e-06, -8.171747171966022e-06, -8.171747171966022e-06, -4.064777895602053e-03, -4.058954604335994e-03, -3.839979129067266e-03, -3.756188493390595e-03, -3.795758349935096e-03, -3.795758349935096e-03, 1.064657334211440e-03, 2.054784533009135e-02, -2.413354193078122e-03, -5.030810601980173e-01, -1.778507231814732e-01, -1.778507231814630e-01, 1.104079330364135e+01, 1.158793694889797e+01, 3.133064808766698e+00, 1.060759918407407e+01, 1.320395438506697e+01, 1.320395438499897e+01, -1.591794875399507e-06, -1.587923749229362e-06, -1.591626227899188e-06, -1.588209324511492e-06, -1.589833205480466e-06, -1.589833205480466e-06, -6.263477103031788e-05, -6.131429454907287e-05, -6.305357098991542e-05, -6.183330001792359e-05, -6.175079942637256e-05, -6.175079942637256e-05, -6.870097487836710e-03, 2.204583351984225e-03, -9.544247857214770e-03, 3.763876679072729e-03, -5.997982650525368e-03, -5.997982650525368e-03, -9.441226752574762e-01, -2.917438459861230e-01, -8.159017992033597e-01, -4.399740932139772e-05, -7.553329456562551e-01, -7.553329456562551e-01, 1.425054400448196e+01, 1.250692411064005e+01, 8.008080826052262e+01, 9.766349102345838e-01, 3.677822917611348e+01, 3.677822917638401e+01, -9.395404322514496e-03, 3.756587131655531e-03, 1.129406846510752e-03, -3.752486396500342e-03, -1.004363128106322e-03, -1.004363128106322e-03, 1.617216020860348e-02, -1.247009187879268e-02, -1.164297386102539e-02, -5.239426730914854e-03, -9.593877373703963e-03, -9.593877373703963e-03, 1.584649744214666e-03, -1.000045388756375e-01, -3.569348494148677e-02, -3.612051568097239e-02, -3.177629654903707e-02, -3.177629654904065e-02, -1.639338161743927e-02, 3.016074483225778e+00, 1.735547000219819e+00, -5.026899969441229e-02, -8.502826096094469e-02, -8.502826096081938e-02, 8.465054049472924e+00, 6.585076357658529e+01, 3.086602589595460e+01, 1.928455683124677e-01, 4.672091236236876e+01, 4.672091236182565e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
