
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw3pw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.684786817609317e+01, -1.684788928478159e+01, -1.684804176170933e+01, -1.684769493629991e+01, -1.684787882071576e+01, -1.684787882071576e+01, -2.840338598220829e+00, -2.840320733933723e+00, -2.839944777003807e+00, -2.841183382304713e+00, -2.840341273957085e+00, -2.840341273957085e+00, -5.951131162394137e-01, -5.949219091732726e-01, -5.913836770848948e-01, -5.951391834733413e-01, -5.950413415608286e-01, -5.950413415608286e-01, -1.894105257095942e-01, -1.907524552468564e-01, -6.946379377003588e-01, -1.556835878172693e-01, -1.897970955269962e-01, -1.897970955269962e-01, -6.662169236859005e-03, -7.239090783801016e-03, -6.611755403582661e-02, -2.190036905414609e-03, -7.166190196861203e-03, -7.166190196861203e-03, -4.111160865544626e+00, -4.110876106679837e+00, -4.111136357846341e+00, -4.110914860840349e+00, -4.111008155854472e+00, -4.111008155854472e+00, -1.719327171174681e+00, -1.727723343942389e+00, -1.719423925673568e+00, -1.725952007569169e+00, -1.724928144735216e+00, -1.724928144735216e+00, -5.075774464150867e-01, -5.390982510366170e-01, -4.842821352033033e-01, -4.962104392636136e-01, -5.240100963490680e-01, -5.240100963490680e-01, -1.303451732370617e-01, -2.025341735230787e-01, -1.276873956621960e-01, -1.532360779502854e+00, -1.400480154895928e-01, -1.400480154895928e-01, -2.111683581922792e-03, -2.472078339561820e-03, -1.927283192142287e-03, -9.083536747638206e-02, -2.292918874291601e-03, -2.292918874291601e-03, -5.128501126191344e-01, -5.115117592349135e-01, -5.119954051503405e-01, -5.123764041079294e-01, -5.121859390940657e-01, -5.121859390940657e-01, -4.975829824423355e-01, -4.519512038751736e-01, -4.642017148886286e-01, -4.761087861881779e-01, -4.698919196364275e-01, -4.698919196364275e-01, -5.633368915124077e-01, -2.405625649624046e-01, -2.720212803613075e-01, -3.261560794728661e-01, -2.969848886782303e-01, -2.969848886782302e-01, -4.117718925737303e-01, -5.954415798667563e-02, -8.327214681668678e-02, -3.062492656739733e-01, -1.096006144283676e-01, -1.096006144283676e-01, -8.298831955586210e-03, -6.898019268089263e-04, -1.250148510645772e-03, -1.046031800384513e-01, -1.953910881296183e-03, -1.953910881296179e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw3pw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.041497404579776e+01, -2.041503876964374e+01, -2.041534136369861e+01, -2.041428122106841e+01, -2.041500806320200e+01, -2.041500806320200e+01, -3.384062785266997e+00, -3.384089629010571e+00, -3.384962931291103e+00, -3.384154324407737e+00, -3.384090573254409e+00, -3.384090573254409e+00, -6.945759364151264e-01, -6.935196029211296e-01, -6.656678980511098e-01, -6.710335358703934e-01, -6.941925363428846e-01, -6.941925363428846e-01, -2.067562608416379e-01, -2.104022124221440e-01, -8.325145857208905e-01, -1.466796358902174e-01, -2.078643750290162e-01, -2.078643750290162e-01, -1.641786353534198e-02, -1.810129237322284e-02, -1.025279741321867e-01, -3.754233157573128e-03, -1.790456780926319e-02, -1.790456780926319e-02, -5.113405880935161e+00, -5.115360852368557e+00, -5.113606108643102e+00, -5.115126187892371e+00, -5.114407573837805e+00, -5.114407573837805e+00, -1.873328681897966e+00, -1.887764099122345e+00, -1.865755148276151e+00, -1.876995321653001e+00, -1.893028838789551e+00, -1.893028838789551e+00, -6.322424488378495e-01, -6.979586597540152e-01, -6.016986620373872e-01, -6.382452675360663e-01, -6.568994438198010e-01, -6.568994438198010e-01, -1.204665933664049e-01, -1.986073753697125e-01, -1.175886357935417e-01, -1.983445120117889e+00, -1.283951238472360e-01, -1.283951238472360e-01, -3.586495929392782e-03, -4.447748303883675e-03, -3.392200912978589e-03, -1.016623075220464e-01, -4.116253609365893e-03, -4.116253609365887e-03, -6.675162587920285e-01, -6.629645651054155e-01, -6.648369629292776e-01, -6.660658730976765e-01, -6.654778966290555e-01, -6.654778966290555e-01, -6.480477304768304e-01, -5.443007397284866e-01, -5.754553682942256e-01, -6.046056907457201e-01, -5.898663074462593e-01, -5.898663074462593e-01, -7.286198465020073e-01, -2.495876827101433e-01, -3.001699486101189e-01, -3.921645246440935e-01, -3.439054519881436e-01, -3.439054519881435e-01, -4.947714762346150e-01, -1.043835869781816e-01, -1.066084145046248e-01, -3.787541413307731e-01, -1.041170001414451e-01, -1.041170001414450e-01, -2.106519044831598e-02, -9.317433060773951e-04, -1.848505648369134e-03, -9.933291926686447e-02, -3.392812259053670e-03, -3.392812259053658e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw3pw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.120154796855981e-09, -5.120131888200702e-09, -5.119955000766701e-09, -5.120331633956549e-09, -5.120143339930624e-09, -5.120143339930624e-09, -6.155761480259993e-06, -6.155883622174572e-06, -6.158249910214804e-06, -6.149097286270169e-06, -6.155722357016703e-06, -6.155722357016703e-06, -3.009901234114860e-03, -3.019026684900724e-03, -3.232530263263131e-03, -3.146183743949219e-03, -3.013245234245499e-03, -3.013245234245499e-03, -3.232674982421009e-01, -3.074847230880234e-01, -1.573025777324133e-03, -8.793735322725230e-01, -3.184799327938592e-01, -3.184799327938592e-01, 3.484251433395340e+02, 3.398094432202558e+02, 6.082510316324919e+00, 3.266117500818395e+02, 3.532119773855562e+02, 3.532119773855562e+02, -1.396645869499611e-06, -1.396619222920109e-06, -1.396638269266862e-06, -1.396617716015014e-06, -1.396640818773770e-06, -1.396640818773770e-06, -4.701473224775232e-05, -4.605070062902469e-05, -4.709045612593188e-05, -4.633640159397095e-05, -4.625943355979126e-05, -4.625943355979126e-05, -4.704463520824108e-03, -2.355254432558664e-03, -5.693595006575313e-03, -3.741498040908628e-03, -4.028786067568193e-03, -4.028786067568193e-03, -1.652005209472020e+00, -2.878523722639710e-01, -1.837493392427227e+00, -5.460883727756255e-05, -1.361513553135240e+00, -1.361513553135240e+00, 3.482425847469231e+02, 3.377519782923033e+02, 9.728558242594489e+02, -2.840664400768519e+00, 4.983184304853968e+02, 4.983184304853960e+02, -2.867785925810150e-03, -2.707212402174880e-03, -2.534079973891402e-03, -2.549085205046002e-03, -2.516084093009633e-03, -2.516084093009629e-03, -3.020177868273448e-03, -8.284669582033019e-03, -6.759389231498073e-03, -5.223524432997104e-03, -6.024957867518062e-03, -6.024957867518055e-03, -2.087085989484728e-03, -1.330841159714171e-01, -7.362273733463581e-02, -2.939932318403728e-02, -4.707257199144057e-02, -4.707257199144058e-02, -1.195804240766755e-02, 1.174643487807728e+01, -6.446215588785836e-01, -3.301776397200200e-02, -3.049103410978076e+00, -3.049103410978080e+00, 2.481508793060499e+02, 7.618484691143918e+02, 5.695762261873588e+02, -3.722046172613517e+00, 7.400836986238487e+02, 7.400836986238437e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
