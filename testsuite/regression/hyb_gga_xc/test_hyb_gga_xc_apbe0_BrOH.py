
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_apbe0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.589781173282037e+01, -1.589782757664296e+01, -1.589795932610826e+01, -1.589769866291781e+01, -1.589781957785538e+01, -1.589781957785538e+01, -2.672527709918833e+00, -2.672505888160250e+00, -2.672015227224688e+00, -2.673420121146463e+00, -2.672527714926671e+00, -2.672527714926671e+00, -5.554361326115710e-01, -5.553294735812399e-01, -5.542840574719016e-01, -5.577283670277188e-01, -5.553948636764772e-01, -5.553948636764772e-01, -1.741854780050375e-01, -1.754075988769826e-01, -6.475196803629629e-01, -1.400541619404273e-01, -1.745379138081686e-01, -1.745379138081686e-01, -1.276045495023209e-02, -1.336316213359060e-02, -5.308415480452329e-02, -6.132181525493489e-03, -1.322396412069775e-02, -1.322396412069775e-02, -3.855204319774342e+00, -3.854784599361126e+00, -3.855166036818511e+00, -3.854839588022746e+00, -3.854982149091079e+00, -3.854982149091079e+00, -1.634669250342964e+00, -1.642011320201782e+00, -1.635774032906495e+00, -1.641482099150797e+00, -1.638236565610147e+00, -1.638236565610147e+00, -4.710515037178706e-01, -5.029263364623906e-01, -4.492425880166928e-01, -4.619023191391212e-01, -4.864926514361686e-01, -4.864926514361686e-01, -1.107443255079588e-01, -1.860198904401743e-01, -1.088728763956086e-01, -1.431898833171224e+00, -1.232297364539129e-01, -1.232297364539129e-01, -5.915737601957954e-03, -6.759895221637876e-03, -5.066706808513570e-03, -7.226564499060377e-02, -6.159284040123310e-03, -6.159284040123310e-03, -4.803792158385022e-01, -4.773973337861814e-01, -4.783612403359022e-01, -4.791818031580173e-01, -4.787623178616519e-01, -4.787623178616519e-01, -4.664455798139618e-01, -4.194306678599790e-01, -4.304484603026455e-01, -4.421092066643324e-01, -4.358935580455979e-01, -4.358935580455979e-01, -5.253901392063168e-01, -2.229565497644919e-01, -2.523483198820262e-01, -3.015369511617046e-01, -2.749424637057490e-01, -2.749424637057490e-01, -3.818084746694260e-01, -4.942973432992515e-02, -6.580424672574391e-02, -2.826831963642775e-01, -9.116434407464413e-02, -9.116434407464413e-02, -1.494905083129177e-02, -1.851610514453677e-03, -3.516963125222094e-03, -8.692488010786782e-02, -5.234925516254679e-03, -5.234925516254669e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_apbe0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.884565943871236e+01, -1.884572672228770e+01, -1.884602879919432e+01, -1.884492698260975e+01, -1.884569490580509e+01, -1.884569490580509e+01, -3.107420100841566e+00, -3.107455337067179e+00, -3.108548409599322e+00, -3.107303700597597e+00, -3.107451042909601e+00, -3.107451042909601e+00, -6.326795256086437e-01, -6.315303405505360e-01, -6.026003216594861e-01, -6.075541547973350e-01, -6.322626114947777e-01, -6.322626114947777e-01, -1.888884345928894e-01, -1.917125640149347e-01, -7.644567232367567e-01, -1.478060451074882e-01, -1.897297913441122e-01, -1.897297913441122e-01, -1.694158240391738e-02, -1.773435420783920e-02, -6.741604176428222e-02, -8.169465802526497e-03, -1.754978153220583e-02, -1.754978153220583e-02, -4.745992759416448e+00, -4.748323836181236e+00, -4.746230217255789e+00, -4.748042760530647e+00, -4.747189078696345e+00, -4.747189078696345e+00, -1.697896938399354e+00, -1.710846119599978e+00, -1.691386255338812e+00, -1.701382361116053e+00, -1.715501384557606e+00, -1.715501384557606e+00, -5.883892186853601e-01, -6.570501135183361e-01, -5.594144145684173e-01, -6.003237923135514e-01, -6.127881614451267e-01, -6.127881614451267e-01, -1.252807400586442e-01, -1.920781694519769e-01, -1.225435591190096e-01, -1.861635864333587e+00, -1.335018918859156e-01, -1.335018918859156e-01, -7.881383871916045e-03, -9.003836566958251e-03, -6.748944372120608e-03, -8.798009439265933e-02, -8.203777319098809e-03, -8.203777319098812e-03, -6.285387117052431e-01, -6.242176886222777e-01, -6.260517763874178e-01, -6.272679283569625e-01, -6.266837398314801e-01, -6.266837398314801e-01, -6.097953676095837e-01, -5.000713498871106e-01, -5.345306223388155e-01, -5.666699083591726e-01, -5.505777103944357e-01, -5.505777103944358e-01, -6.857704439390331e-01, -2.316325872006308e-01, -2.724518610605775e-01, -3.595689887448472e-01, -3.121652796975795e-01, -3.121652796975793e-01, -4.540424504032077e-01, -6.340655683685674e-02, -8.185001118686511e-02, -3.510493422291089e-01, -1.053027085686188e-01, -1.053027085686188e-01, -1.983124512243890e-02, -2.468561526311816e-03, -4.687679302439088e-03, -1.003708504322024e-01, -6.973518316888944e-03, -6.973518316888931e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_apbe0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.914921661705141e-09, -5.914885221914260e-09, -5.914650998605163e-09, -5.915249127571255e-09, -5.914903043621859e-09, -5.914903043621859e-09, -7.102056916889349e-06, -7.102100139844976e-06, -7.102139611946366e-06, -7.096236456033842e-06, -7.101962298750124e-06, -7.101962298750124e-06, -3.426034316904713e-03, -3.439854423529042e-03, -3.720733147897072e-03, -3.623048256335660e-03, -3.431091565728276e-03, -3.431091565728276e-03, -3.203417262510831e-01, -3.096253727977603e-01, -1.734350893711261e-03, -5.767491885824205e-01, -3.172493213722155e-01, -3.172493213722155e-01, -3.229950693687380e+00, -3.237630968266837e+00, -1.337655969381721e+00, -2.295572124445835e+00, -3.363268452490573e+00, -3.363268452490573e+00, -1.526183280009700e-06, -1.524705732756985e-06, -1.526030885225765e-06, -1.524882259778484e-06, -1.525431829984568e-06, -1.525431829984568e-06, -5.494558073937446e-05, -5.389246343051387e-05, -5.491806947419231e-05, -5.410458029420914e-05, -5.423417513826349e-05, -5.423417513826349e-05, -4.298705532588848e-03, -7.762287497851440e-05, -5.274131795387365e-03, -1.253998078790685e-03, -3.481989326571236e-03, -3.481989326571236e-03, -7.110756025208810e-01, -2.317245014757591e-01, -8.095073465560739e-01, -4.018164490329965e-05, -7.366392384011781e-01, -7.366392384011781e-01, -2.435341780481913e+00, -2.439612549094405e+00, -6.981682450621249e+00, -1.295252784000948e+00, -3.603101024909512e+00, -3.603101024910931e+00, 2.512508688299966e-03, 4.334727527431463e-04, 1.096210158512054e-03, 1.667853757261487e-03, 1.375065785135300e-03, 1.375065785135299e-03, 3.396104727257127e-03, -8.861409209037748e-03, -6.333731211071112e-03, -3.496364598269136e-03, -4.994486939884369e-03, -4.994486939884368e-03, -3.390762257533941e-04, -1.269285575900079e-01, -7.876703175474756e-02, -3.105372611726467e-02, -5.200543457901827e-02, -5.200543457901832e-02, -1.281088731055437e-02, -1.135025231782429e+00, -1.124794621388563e+00, -2.988264764268402e-02, -1.213713584655369e+00, -1.213713584655372e+00, -2.425794180846580e+00, -4.202054711031423e+00, -3.616437980624202e+00, -1.482694968455689e+00, -5.262601524167554e+00, -5.262601524167247e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
