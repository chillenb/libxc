
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1k_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.212099219983177e+01, -1.212100820523387e+01, -1.212111801689067e+01, -1.212087909266343e+01, -1.212099878864263e+01, -1.212099878864263e+01, -2.048999681775200e+00, -2.048982222033831e+00, -2.048627874422423e+00, -2.049624957455795e+00, -2.049027222358679e+00, -2.049027222358679e+00, -4.316882517917543e-01, -4.314709754192547e-01, -4.271794623829472e-01, -4.301872475792873e-01, -4.302879452256068e-01, -4.302879452256068e-01, -1.316120206046219e-01, -1.326923202436393e-01, -4.967345641611211e-01, -1.110585011733262e-01, -1.254026790278185e-01, -1.254026790278185e-01, -4.922555750661125e-04, -5.821594540189747e-04, -3.189826279368665e-02, -1.028470084822988e-04, -2.923363395824946e-04, -2.923363395824949e-04, -2.962027264681712e+00, -2.961800556644397e+00, -2.962022418002237e+00, -2.961822179001810e+00, -2.961909188259300e+00, -2.961909188259300e+00, -1.243169325349788e+00, -1.249371830136244e+00, -1.242773930092014e+00, -1.248238931933067e+00, -1.246815625642872e+00, -1.246815625642872e+00, -3.746737127762635e-01, -4.023089451619102e-01, -3.497401194390915e-01, -3.605508839602746e-01, -3.799979855815423e-01, -3.799979855815424e-01, -8.971321180214631e-02, -1.395713296885466e-01, -8.467529816845044e-02, -1.114131615063561e+00, -9.643017741165694e-02, -9.643017741165694e-02, -5.684954630483026e-05, -1.037088871435207e-04, -1.120203324978218e-04, -6.061908430549660e-02, -1.552122486342991e-04, -1.552122486342971e-04, -3.759372518118831e-01, -3.732036682957265e-01, -3.741166343441298e-01, -3.749178026968271e-01, -3.745121237172629e-01, -3.745121237172629e-01, -3.671027858801076e-01, -3.230819500088535e-01, -3.338896331336634e-01, -3.456930367896692e-01, -3.394719364282425e-01, -3.394719364282425e-01, -4.197536420378092e-01, -1.664036080632287e-01, -1.900338328769417e-01, -2.354598433219430e-01, -2.104895698079742e-01, -2.104895698079742e-01, -2.995390850790159e-01, -2.892443043312441e-02, -4.713627777494434e-02, -2.265420069211290e-01, -7.329218508051177e-02, -7.329218508051180e-02, -1.152187454719617e-03, -5.590116962165713e-06, -3.110180685061640e-05, -7.003226223973109e-02, -1.312187356379161e-04, -1.312187356379174e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1k_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.455712515966551e+01, -1.455710802907602e+01, -1.455718828594302e+01, -1.455715418313318e+01, -1.455737851205154e+01, -1.455742844943431e+01, -1.455666196061983e+01, -1.455651958298445e+01, -1.455716007988038e+01, -1.455687617422706e+01, -1.455716007988038e+01, -1.455687617422706e+01, -2.432775211930742e+00, -2.432853108019526e+00, -2.432800148647855e+00, -2.432880656670091e+00, -2.433429813518408e+00, -2.433579681059353e+00, -2.432718688856938e+00, -2.432868318238437e+00, -2.432372267208253e+00, -2.433431250382682e+00, -2.432372267208253e+00, -2.433431250382682e+00, -5.167146202420296e-01, -5.190242935525538e-01, -5.155476922349221e-01, -5.183717048600757e-01, -4.961533399307450e-01, -4.925571008076833e-01, -4.978992855604413e-01, -4.990602426827400e-01, -5.156347484930399e-01, -4.808460695673484e-01, -5.156347484930399e-01, -4.808460695673484e-01, -1.389641192311549e-01, -1.417965332634629e-01, -1.420575269118863e-01, -1.453585109073063e-01, -5.879911237084686e-01, -6.063570049970896e-01, -1.012653736611217e-01, -1.020931573575206e-01, -1.246505008941900e-01, -9.616325181273197e-02, -1.246505008941900e-01, -9.616325181273198e-02, -1.652496438720620e-03, -1.944635425850359e-03, -1.923112683927550e-03, -2.318092557346881e-03, -7.036829496115141e-02, -7.331472298228744e-02, -3.892007828119288e-04, -3.670319414761783e-04, -1.205007493273174e-03, -3.821713983839578e-04, -1.205007493273177e-03, -3.821713983839629e-04, -3.677053950358697e+00, -3.676206280937707e+00, -3.678656728455630e+00, -3.677760472481947e+00, -3.677140644073999e+00, -3.676260990948100e+00, -3.678520105602647e+00, -3.677668533720047e+00, -3.677874205888969e+00, -3.676987795950240e+00, -3.677874205888969e+00, -3.676987795950240e+00, -1.346763975925590e+00, -1.346701187539534e+00, -1.357851771541811e+00, -1.357501294693082e+00, -1.334794631141999e+00, -1.337577098739559e+00, -1.344367975940578e+00, -1.347255549752562e+00, -1.361456980499158e+00, -1.354430792628029e+00, -1.361456980499158e+00, -1.354430792628029e+00, -4.767555631765522e-01, -4.760175202200106e-01, -5.247563344267407e-01, -5.251136602229445e-01, -4.374276975715373e-01, -4.482150437589094e-01, -4.653596358740911e-01, -4.740596105141539e-01, -4.926843136510343e-01, -4.768635966133979e-01, -4.926843136510343e-01, -4.768635966133979e-01, -8.367160108265885e-02, -8.328325389675349e-02, -1.320856946624334e-01, -1.324676122805528e-01, -8.121573946474478e-02, -8.135735022031967e-02, -1.448797414301681e+00, -1.448302691443689e+00, -8.680808761813988e-02, -8.518628179122581e-02, -8.680808761813988e-02, -8.518628179122581e-02, -2.041652421481100e-04, -2.130733655730163e-04, -3.803812678461059e-04, -3.827858736863311e-04, -3.670714036862262e-04, -4.509579903586103e-04, -7.643946157965045e-02, -7.719661602420158e-02, -2.858116129709075e-04, -6.821631824161659e-04, -2.858116129708997e-04, -6.821631824161603e-04, -4.887017146263376e-01, -4.898861877928388e-01, -4.863913274004466e-01, -4.876335058069766e-01, -4.875513426406842e-01, -4.887868755811938e-01, -4.882638656070032e-01, -4.894538673339029e-01, -4.879448096118518e-01, -4.891571096031177e-01, -4.879448096118518e-01, -4.891571096031177e-01, -4.765957701493362e-01, -4.775296176221425e-01, -3.960972023262462e-01, -3.973075134169045e-01, -4.214929501985617e-01, -4.228302740362547e-01, -4.463519309875442e-01, -4.473573773693170e-01, -4.339726238178940e-01, -4.350118178797074e-01, -4.339726238178940e-01, -4.350118178797074e-01, -5.469729808048219e-01, -5.478621391595742e-01, -1.691714780696975e-01, -1.697556917431493e-01, -2.095794700384678e-01, -2.108699384684624e-01, -2.918114168193086e-01, -2.927594835484474e-01, -2.492949409641310e-01, -2.492910745110819e-01, -2.492949409641310e-01, -2.492910745110819e-01, -3.680707717597971e-01, -3.698515325674291e-01, -6.933987264297671e-02, -6.978465931694772e-02, -8.207259656531968e-02, -8.211319596418470e-02, -2.879202653695263e-01, -2.903925329326867e-01, -7.427265399279213e-02, -7.053695824816802e-02, -7.427265399279208e-02, -7.053695824816800e-02, -3.980302167610716e-03, -4.422083120751615e-03, -1.782529856434287e-05, -2.302833460005547e-05, -1.019718399111555e-04, -1.242613543488215e-04, -7.208347529649628e-02, -7.229880578243426e-02, -3.386408941326707e-04, -5.450035346580373e-04, -3.386408941326685e-04, -5.450035346580370e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1k_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.181225275645033e-09, 3.249203400484267e-10, -8.181273292695062e-09, -8.181178091321897e-09, 3.249254156154051e-10, -8.181238283475478e-09, -8.180926596522181e-09, 3.249312127455129e-10, -8.180908777864279e-09, -8.181471095966479e-09, 3.248560612441316e-10, -8.181591623959074e-09, -8.181215250201067e-09, 3.248978165452077e-10, -8.181234993345982e-09, -8.181215250201067e-09, 3.248978165452077e-10, -8.181234993345982e-09, -1.004733781065184e-05, 1.882184928226818e-06, -1.005162553408661e-05, -1.004748624902792e-05, 1.882536604769570e-06, -1.005209413765144e-05, -1.005462564155951e-05, 1.890469035325647e-06, -1.005728525236909e-05, -1.003605286503885e-05, 1.874965934648070e-06, -1.003948599122816e-05, -1.005313707057833e-05, 1.882383717168228e-06, -1.004466999562380e-05, -1.005313707057833e-05, 1.882383717168228e-06, -1.004466999562380e-05, -5.162505764157955e-03, 3.313440568855438e-03, -5.175345690734708e-03, -5.174438210029118e-03, 3.292089350612322e-03, -5.189861869905463e-03, -5.475369442851372e-03, 2.754503394278657e-03, -5.461172532089767e-03, -5.309682079825999e-03, 2.687355420634704e-03, -5.317366318755618e-03, -5.442423806772591e-03, 2.724859819139565e-03, -5.167814966041072e-03, -5.442423806772591e-03, 2.724859819139565e-03, -5.167814966041072e-03, -6.968078273234026e-01, 3.302901750770876e-01, -6.201657769653577e-01, -6.770482628355039e-01, 3.458841809888365e-01, -5.896285621043795e-01, -3.066346396173363e-03, 1.773084044670905e-03, -2.822798943207252e-03, -1.400394803739899e+00, 2.546734451419353e-01, -1.339397282367782e+00, -6.315222396803145e-01, 2.105848772396240e-01, -2.844550832012536e+00, -6.315222396803135e-01, 2.105848772396247e-01, -2.844550832012537e+00, 3.435531955896583e+02, 8.613353793739745e-03, 3.351960498145078e+02, 3.566086137696585e+02, 1.013950379898908e-02, 3.486417055551510e+02, 3.900849452803461e+01, 5.523177238437298e-02, 3.216834019301083e+01, 3.560693629239489e+02, 3.039205960810898e-03, 3.482840017118083e+02, 3.526015284186109e+02, 4.471539514049365e-03, 9.657073074353086e+02, 3.526015284186110e+02, 4.471539512694581e-03, 9.657073074353207e+02, -2.282529496478757e-06, 4.749125773836140e-07, -2.284789786256220e-06, -2.282954086958383e-06, 4.779691194036931e-07, -2.285150908758644e-06, -2.282549881279539e-06, 4.750344380718369e-07, -2.284774344843448e-06, -2.282876755201836e-06, 4.777324269027139e-07, -2.285141944379424e-06, -2.282772762228696e-06, 4.764670697418842e-07, -2.284964372705456e-06, -2.282772762228696e-06, 4.764670697418842e-07, -2.284964372705456e-06, -7.633216231700771e-05, 1.231612203241641e-05, -7.634684650541495e-05, -7.471164828567069e-05, 1.221714254827805e-05, -7.478263104380550e-05, -7.664094902167998e-05, 1.187295881057448e-05, -7.664926071781491e-05, -7.524310706556592e-05, 1.178956102485754e-05, -7.521563714266582e-05, -7.520747253778746e-05, 1.248218806625418e-05, -7.540723826128291e-05, -7.520747253778746e-05, 1.248218806625418e-05, -7.540723826128291e-05, -8.668633103560634e-03, 1.066514832223700e-02, -8.827592704851159e-03, -5.696843309220242e-03, 1.397328589342333e-02, -5.719406955710319e-03, -1.281695953012627e-02, 1.392045884219881e-02, -1.056073147961951e-02, -1.063175364779076e-02, 2.122385006740113e-02, -7.953607621195619e-03, -7.027154603958451e-03, 1.065438862245302e-02, -9.673438133150383e-03, -7.027154603958453e-03, 1.065438862245302e-02, -9.673438133150384e-03, -2.487619530354328e+00, 1.439679558499215e-01, -2.509672179107163e+00, -5.477352175710335e-01, 1.284993988958634e-01, -5.395103137091105e-01, -2.864429870089055e+00, 1.453770439617308e-01, -2.759422984734762e+00, -1.016941952617143e-04, 1.071116276150960e-04, -1.020036386971486e-04, -2.277255104671992e+00, 2.730845515133000e-01, -2.364770704637223e+00, -2.277255104671992e+00, 2.730845515133000e-01, -2.364770704637223e+00, 5.236750328664386e+02, 2.956955031919532e-03, 4.530087067316177e+02, 4.295468979774889e+02, 3.735892454584835e-03, 3.970381628980161e+02, 2.367481634362132e+03, 3.713649829170447e-02, 2.583491715830137e+03, -1.403749510647060e+00, 1.387040646761921e-01, -1.271433075588354e+00, 1.219292220158437e+03, 1.423477041157044e-02, 1.114859426947712e+03, 1.219292220158426e+03, 1.423477039691048e-02, 1.114859426947705e+03, -8.157006610352730e-03, 2.403957787948525e-02, -7.931356914993035e-03, -7.798493604645674e-03, 2.034391171407463e-02, -7.562723072520865e-03, -7.582434409686863e-03, 2.159045634422680e-02, -7.349575590543111e-03, -7.573266367210908e-03, 2.269325002983267e-02, -7.339146218296526e-03, -7.543842471804681e-03, 2.213771058093030e-02, -7.310105815035078e-03, -7.543842471804681e-03, 2.213771058093030e-02, -7.310105815035078e-03, -8.981534720969263e-03, 2.885216186742613e-02, -8.660372063880557e-03, -1.652982183001696e-02, 1.472060466257312e-02, -1.622270773019130e-02, -1.416680953875563e-02, 1.671341085131755e-02, -1.388003662905908e-02, -1.177336760521776e-02, 1.980889411020530e-02, -1.150886334303140e-02, -1.302206461791822e-02, 1.811879018445980e-02, -1.273814333465096e-02, -1.302206461791822e-02, 1.811879018445980e-02, -1.273814333465096e-02, -4.878968141574428e-03, 1.103081591133725e-02, -4.865870045154380e-03, -2.621200134052611e-01, 9.300925823122458e-02, -2.575000950959339e-01, -1.482276932555472e-01, 8.114126135879908e-02, -1.439792049690502e-01, -5.880505550519696e-02, 6.533077521433446e-02, -5.716020736463315e-02, -9.312363193680426e-02, 7.642797638011327e-02, -9.377600356571092e-02, -9.312363193680435e-02, 7.642797638011331e-02, -9.377600356571099e-02, -2.246829804973743e-02, 2.119508537472161e-02, -2.184189127866027e-02, 4.071893693583841e+01, 4.528023474059335e-02, 3.987802551315549e+01, 1.133530941759320e+01, 7.071096470287412e-02, 9.015567683427706e+00, -6.892526020886777e-02, 1.018028174442661e-01, -6.339998503727018e-02, -4.093613545838606e+00, 2.447486191545272e-01, -4.908851964819887e+00, -4.093613545838609e+00, 2.447486191545298e-01, -4.908851964819890e+00, 2.510787316635394e+02, 1.080420474093222e-02, 2.531039670091162e+02, 1.945374090327498e+03, 4.023020531725113e-03, 3.323829797149596e+03, 1.040351441613484e+03, 5.049892853365737e-03, 1.087609408783754e+03, -4.526879967192265e+00, 2.240111119954173e-01, -4.476891272724492e+00, 2.442183018544005e+03, 1.815739025300881e-02, 1.178318135899877e+03, 2.442183018543998e+03, 1.815739024585517e-02, 1.178318135899882e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
