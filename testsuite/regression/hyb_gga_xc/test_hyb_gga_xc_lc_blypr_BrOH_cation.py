
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blypr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blypr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.092102248307974e+01, -2.092104983693947e+01, -2.092123992048832e+01, -2.092083153880601e+01, -2.092103578821168e+01, -2.092103578821168e+01, -3.343493325653956e+00, -3.343459954170217e+00, -3.342774113252936e+00, -3.344630560798195e+00, -3.343537832032072e+00, -3.343537832032072e+00, -5.342853246547650e-01, -5.338873625562468e-01, -5.247344008208285e-01, -5.300036499271457e-01, -5.290573462667383e-01, -5.290573462667383e-01, -6.197312755435426e-02, -6.383612573680819e-02, -6.455992975369190e-01, -3.575571728264802e-02, -5.272535254229098e-02, -5.272535254229098e-02, -3.161422928745048e-06, -3.694855959345538e-06, -1.187458506608471e-03, -6.044182052133394e-07, -1.767014639603903e-06, -1.767014639603904e-06, -4.923349649527842e+00, -4.922765880983016e+00, -4.923333450283669e+00, -4.922817936435062e+00, -4.923047956572201e+00, -4.923047956572201e+00, -1.940754176283009e+00, -1.951831170035425e+00, -1.939412519464659e+00, -1.949214892084111e+00, -1.947523446156437e+00, -1.947523446156437e+00, -4.353565516932092e-01, -4.706041195215986e-01, -3.944779729373640e-01, -4.038391468855279e-01, -4.435628231562987e-01, -4.435628231562987e-01, -1.644386160886060e-02, -6.163597681151659e-02, -1.377584119335939e-02, -1.687864478634161e+00, -2.336425049467850e-02, -2.336425049467850e-02, -2.783729950393072e-07, -5.646126454590817e-07, -2.541581925468248e-07, -5.205585310341392e-03, -5.276335298714938e-07, -5.276335298714939e-07, -4.217499758020355e-01, -4.220809571573151e-01, -4.220059137916501e-01, -4.219072518520287e-01, -4.219598446644758e-01, -4.219598446644758e-01, -4.058436491740660e-01, -3.515196585944294e-01, -3.684745219680422e-01, -3.840596145000553e-01, -3.761652086277763e-01, -3.761652086277763e-01, -5.003997102216582e-01, -9.661165782190695e-02, -1.349291560466100e-01, -2.104006164766433e-01, -1.699697891114041e-01, -1.699697891114041e-01, -3.127656240337691e-01, -1.012905925387009e-03, -2.831114772214541e-03, -1.966054207253224e-01, -9.541995824924054e-03, -9.541995824924024e-03, -8.838321984222277e-06, -1.077876503615156e-08, -1.005318612250211e-07, -8.190232708116845e-03, -4.060589125277705e-07, -4.060589125277694e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blypr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blypr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.512188161579886e+01, -2.512185156542736e+01, -2.512199052004369e+01, -2.512193095364879e+01, -2.512231940174605e+01, -2.512240611625446e+01, -2.512108627227061e+01, -2.512083853319538e+01, -2.512194470415399e+01, -2.512145230286822e+01, -2.512194470415399e+01, -2.512145230286822e+01, -3.974577929414658e+00, -3.974661992241024e+00, -3.974610987693896e+00, -3.974696298914730e+00, -3.975426633842627e+00, -3.975638354129591e+00, -3.974674415052315e+00, -3.974878671343508e+00, -3.973888739049145e+00, -3.975627441313874e+00, -3.973888739049145e+00, -3.975627441313874e+00, -6.853256880966202e-01, -6.873457276838579e-01, -6.842810283211013e-01, -6.867393817649550e-01, -6.681762780180236e-01, -6.654948731648046e-01, -6.725510242301073e-01, -6.733905808102695e-01, -6.864072086104837e-01, -6.616652486830195e-01, -6.864072086104837e-01, -6.616652486830195e-01, -1.009156517952929e-01, -1.042101626295262e-01, -1.033406464674784e-01, -1.071789599581521e-01, -8.048364551410017e-01, -8.284421399007090e-01, -5.993031785705014e-02, -6.064007677801711e-02, -9.068003959301706e-02, -5.564286319903176e-02, -9.068003959301701e-02, -5.564286319903171e-02, -5.701081777245042e-06, -6.840380867024999e-06, -6.559719069059925e-06, -8.063968596351719e-06, -2.593695651753591e-03, -2.600762686394943e-03, -1.238496417948115e-06, -1.177612936819824e-06, -4.047665448235657e-06, -7.459539137874977e-07, -4.047665448235657e-06, -7.459539137874979e-07, -6.108064631671290e+00, -6.106574561087761e+00, -6.110482792620353e+00, -6.108914357036968e+00, -6.108198355824726e+00, -6.106656585310217e+00, -6.110276080907679e+00, -6.108779206468386e+00, -6.109301885121489e+00, -6.107750059054323e+00, -6.109301885121489e+00, -6.107750059054323e+00, -2.151808682422651e+00, -2.151708514055167e+00, -2.168978696974524e+00, -2.168430806630203e+00, -2.136415273239722e+00, -2.139847737948799e+00, -2.151178611146294e+00, -2.154821385631135e+00, -2.172449518239968e+00, -2.163231386888762e+00, -2.172449518239968e+00, -2.163231386888762e+00, -5.880555607206243e-01, -5.866451857106950e-01, -6.543385755557282e-01, -6.547313727631289e-01, -5.259404213103842e-01, -5.432966888715636e-01, -5.554321310256957e-01, -5.724053115894630e-01, -6.126769856617466e-01, -5.847181554756521e-01, -6.126769856617464e-01, -5.847181554756521e-01, -2.844139782294208e-02, -2.854431873483480e-02, -1.052428624996647e-01, -1.057528446525754e-01, -2.391556244778017e-02, -2.429281949690417e-02, -2.219096952012913e+00, -2.218165278551545e+00, -3.909787496330809e-02, -4.028450693832072e-02, -3.909787496330809e-02, -4.028450693832072e-02, -5.228941367096350e-07, -5.868995037711646e-07, -1.103212887601925e-06, -1.154065609277343e-06, -4.612888539944656e-07, -5.479020615745932e-07, -9.746775904152225e-03, -9.739008219030719e-03, -4.914673020466479e-07, -1.272920725003879e-06, -4.914673020466473e-07, -1.272920725003880e-06, -5.978196257428967e-01, -6.000417786360827e-01, -5.909497693468587e-01, -5.931638256656522e-01, -5.932517907879566e-01, -5.954817468324979e-01, -5.952521790288219e-01, -5.974602536965677e-01, -5.942412726701187e-01, -5.964601258591883e-01, -5.942412726701187e-01, -5.964601258591883e-01, -5.792491689981718e-01, -5.810584043031018e-01, -4.749175638575728e-01, -4.766408199326180e-01, -5.011560847418923e-01, -5.031265770218202e-01, -5.298565123171743e-01, -5.315797581553832e-01, -5.149258698700949e-01, -5.166642853285507e-01, -5.149258698700949e-01, -5.166642853285507e-01, -6.911600055298185e-01, -6.924020167181711e-01, -1.601523210532924e-01, -1.609383858908943e-01, -2.104147985614210e-01, -2.119109900328493e-01, -3.029466769091951e-01, -3.043499357354857e-01, -2.536972787172235e-01, -2.535141109239783e-01, -2.536972787172235e-01, -2.535141109239782e-01, -4.282055146570095e-01, -4.306224568989601e-01, -2.251877693907991e-03, -2.253887516458783e-03, -5.652042960160236e-03, -5.615162925301244e-03, -2.847797584719228e-01, -2.884353446170262e-01, -1.702855453558344e-02, -1.708168864767083e-02, -1.702855453558331e-02, -1.708168864767089e-02, -1.668370974070307e-05, -1.856429564351753e-05, -2.148344857381500e-08, -2.163108888300481e-08, -1.809868785131528e-07, -2.177499122774659e-07, -1.478477701872500e-02, -1.478787692012372e-02, -4.176733516575026e-07, -9.801819344101883e-07, -4.176733516575017e-07, -9.801819344101851e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blypr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blypr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.428561608513921e-08, 1.553305487658505e-11, -1.428569677907554e-08, -1.428553719249882e-08, 1.553283135028069e-11, -1.428563885766609e-08, -1.428510596797071e-08, 1.553176865310277e-11, -1.428507426117297e-08, -1.428600862274135e-08, 1.553509596308293e-11, -1.428621519284346e-08, -1.428558184702540e-08, 1.553336239584837e-11, -1.428562622190983e-08, -1.428558184702540e-08, 1.553336239584837e-11, -1.428562622190983e-08, -1.721630687029183e-05, 2.274454170570171e-07, -1.722285554512016e-05, -1.721681630157412e-05, 2.274427734693724e-07, -1.722384850179507e-05, -1.723395810462699e-05, 2.273516645659458e-07, -1.723819374269891e-05, -1.719333436893395e-05, 2.272775325843600e-07, -1.719872663516739e-05, -1.722429805641702e-05, 2.274140292156520e-07, -1.721343809108992e-05, -1.722429805641702e-05, 2.274140292156520e-07, -1.721343809108992e-05, -6.206671875908742e-03, 1.253012597268392e-03, -6.277107427736290e-03, -6.191671612405216e-03, 1.259783047820955e-03, -6.278018051746028e-03, -6.068479484081193e-03, 1.433882889658570e-03, -5.946631159673164e-03, -5.865610514099670e-03, 1.377643147256728e-03, -5.906124252395175e-03, -6.495214365147386e-03, 1.445590650356177e-03, -5.226024149119381e-03, -6.495214365147386e-03, 1.445590650356177e-03, -5.226024149119381e-03, -4.396180166012896e-02, 1.166878787822668e-01, -5.334991851417383e-02, -4.711606318145799e-02, 1.159042930603910e-01, -5.745842321758774e-02, -3.907293900659984e-03, 5.988979894638686e-04, -3.876059868305672e-03, -3.066600252784756e-02, 8.956224868039743e-02, -3.226540918473445e-02, -8.781563929082442e-02, 1.037629132647009e-01, 2.649586760225904e-02, -8.781563929082421e-02, 1.037629132647009e-01, 2.649586760225549e-02, -5.878577873464423e-05, 0.000000000000000e+00, -6.886283212743638e-05, -6.916600718364194e-05, 0.000000000000000e+00, -8.306754282572207e-05, -4.268566222341405e-03, 4.913552626449904e-18, -4.918735047503076e-03, -1.369423862528402e-05, 0.000000000000000e+00, -1.282549458727415e-05, -4.301327552001832e-05, 0.000000000000000e+00, -1.733433105734218e-05, -4.301327552053608e-05, 0.000000000000000e+00, -1.733433105684810e-05, -4.084939419451041e-06, 2.599960370436855e-08, -4.088365581115741e-06, -4.088052014782378e-06, 2.597405752361372e-08, -4.091372662024771e-06, -4.085070540286739e-06, 2.599833336852092e-08, -4.088436431159276e-06, -4.087738363565313e-06, 2.597577597352108e-08, -4.091171881543681e-06, -4.086566340257150e-06, 2.598670329591689e-08, -4.089880019675117e-06, -4.086566340257150e-06, 2.598670329591689e-08, -4.089880019675117e-06, -1.179473735733864e-04, 5.010704833877338e-06, -1.179634634129272e-04, -1.157619184287407e-04, 4.820517799606957e-06, -1.158379544932345e-04, -1.178342347573900e-04, 5.155586056564349e-06, -1.180186711155648e-04, -1.159501609562223e-04, 4.981347571827675e-06, -1.160855551511752e-04, -1.168420539863645e-04, 4.840633670189029e-06, -1.167089451434345e-04, -1.168420539863645e-04, 4.840633670189029e-06, -1.167089451434345e-04, -1.200271316991034e-02, 2.364129080353365e-03, -1.209247944761783e-02, -1.189941758586315e-02, 1.599485950508044e-03, -1.193028678972543e-02, -1.529230262586628e-02, 3.417321850137400e-03, -1.442236918585272e-02, -1.780645277281852e-02, 2.855936827683047e-03, -1.624868455360253e-02, -1.116832021175185e-02, 2.242001351925763e-03, -1.257266546257518e-02, -1.116832021175186e-02, 2.242001351925763e-03, -1.257266546257518e-02, -3.198209442394961e-02, 1.091886218764244e-02, -3.328295411132188e-02, -1.346416333509298e-02, 1.165733205074768e-01, -1.442381270818971e-02, -2.973521668505517e-02, 4.650256990371399e-03, -3.335459071696845e-02, -2.222610344067453e-04, 5.556220701467168e-06, -2.226478470184892e-04, -3.411533125932542e-02, 3.793891664869414e-02, -5.119155083153709e-02, -3.411533125932542e-02, 3.793891664869414e-02, -5.119155083153709e-02, -7.805949971609744e-06, 0.000000000000000e+00, -7.858002482222254e-06, -1.403360173860738e-05, 0.000000000000000e+00, -1.384333717752758e-05, -2.089939062725414e-05, 0.000000000000000e+00, -2.633172695087173e-05, -1.674627362091774e-02, 1.425823999017654e-06, -1.660030890079598e-02, -1.367973460312826e-05, 0.000000000000000e+00, -3.236897596013365e-05, -1.367973460243688e-05, 0.000000000000000e+00, -3.236897595990072e-05, -1.715561678180387e-02, 2.311382328890834e-03, -1.700400138338192e-02, -1.588047979680751e-02, 2.374344291788817e-03, -1.575265082292125e-02, -1.626440603063576e-02, 2.351966707598879e-03, -1.613191847652891e-02, -1.663136936671240e-02, 2.333713395574444e-03, -1.648635881588828e-02, -1.644205528136609e-02, 2.342829315239698e-03, -1.630336994358834e-02, -1.644205528136609e-02, 2.342829315239698e-03, -1.630336994358834e-02, -1.948326945648200e-02, 2.626955237551396e-03, -1.931046307256386e-02, -1.671881789088581e-02, 5.254026572081650e-03, -1.665996648041557e-02, -1.701840281718755e-02, 4.276723213588743e-03, -1.694583981247857e-02, -1.753132148558804e-02, 3.508359695100062e-03, -1.741321149645112e-02, -1.727929228486520e-02, 3.878797619226277e-03, -1.716369687070977e-02, -1.727929228486520e-02, 3.878797619226277e-03, -1.716369687070977e-02, -1.003653900706816e-02, 1.275802318701210e-03, -1.004802359448948e-02, -2.500820988978025e-02, 8.689665236243441e-02, -2.600508303239737e-02, -3.605411574498839e-02, 5.557856912976124e-02, -3.741066176919635e-02, -4.066411304955481e-02, 2.201561330726190e-02, -4.053205423710368e-02, -4.168481138170636e-02, 3.613648850159216e-02, -4.195825087204939e-02, -4.168481138170636e-02, 3.613648850159217e-02, -4.195825087204942e-02, -2.106856164640751e-02, 7.539788238843107e-03, -2.101006168009593e-02, -3.842624736358911e-03, 9.342423185197651e-20, -3.912750630274401e-03, -8.042352777362777e-03, 2.447499672239381e-10, -8.853084650745354e-03, -5.246465159311112e-02, 2.522348256585123e-02, -5.201596955739836e-02, -2.817550846232173e-02, 4.657673547256565e-04, -3.573541591158230e-02, -2.817550846232009e-02, 4.657673547256587e-04, -3.573541591158939e-02, -1.323069883284341e-04, 1.109078561784430e-319, -1.476338267570072e-04, -8.676697243571266e-07, 0.000000000000000e+00, -1.307368205053318e-06, -4.553609209006896e-06, 0.000000000000000e+00, -5.650100793092444e-06, -2.742045502467402e-02, 1.391912952466879e-04, -2.814257730251552e-02, -1.940766745072110e-05, 0.000000000000000e+00, -2.614945184867036e-05, -1.940766744957473e-05, 0.000000000000000e+00, -2.614945184955487e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
