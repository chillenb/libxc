
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wp04_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.119883625932545e+01, -2.119886060716642e+01, -2.119904548976378e+01, -2.119864526364044e+01, -2.119884846208090e+01, -2.119884846208090e+01, -3.616254557950396e+00, -3.616226385255392e+00, -3.615597065906038e+00, -3.617426389040155e+00, -3.616255029405901e+00, -3.616255029405901e+00, -7.857274444394730e-01, -7.857258239112763e-01, -7.877122947848760e-01, -7.922140005981241e-01, -7.857231498354916e-01, -7.857231498354916e-01, -2.727221567656264e-01, -2.737243839344894e-01, -9.061454218000264e-01, -2.358629764381365e-01, -2.729932574324413e-01, -2.729932574324413e-01, -7.376573428670664e-02, -7.486432420441200e-02, -1.405024005098730e-01, -6.286875096599719e-02, -7.417321908261462e-02, -7.417321908261462e-02, -5.194143021491615e+00, -5.193530566287071e+00, -5.194086812145537e+00, -5.193610489341107e+00, -5.193819813272076e+00, -5.193819813272076e+00, -2.229034266759172e+00, -2.238931509949269e+00, -2.230254996899229e+00, -2.237945305623044e+00, -2.234198973995698e+00, -2.234198973995698e+00, -6.590950396014503e-01, -6.823539617434735e-01, -6.304155514656514e-01, -6.323384622665091e-01, -6.778329745758568e-01, -6.778329745758568e-01, -2.072590544588198e-01, -2.970228082264482e-01, -2.027261640545548e-01, -1.931552579203919e+00, -2.166989470540149e-01, -2.166989470540149e-01, -6.163125178771105e-02, -6.385407081287613e-02, -4.919780895644238e-02, -1.604118725794796e-01, -5.819349463164503e-02, -5.819349463164503e-02, -6.433445415971480e-01, -6.466999352301964e-01, -6.455507956820118e-01, -6.446210359869151e-01, -6.450898902816151e-01, -6.450898902816151e-01, -6.234673369178453e-01, -5.972723540577410e-01, -6.056796839945691e-01, -6.128189197898354e-01, -6.090813465923454e-01, -6.090813465923454e-01, -7.136055726698239e-01, -3.439305079346717e-01, -3.799034881717779e-01, -4.378034231822037e-01, -4.065402211845447e-01, -4.065402211845446e-01, -5.467467498051004e-01, -1.394055634961396e-01, -1.567816131449919e-01, -4.066212520937956e-01, -1.789210206887725e-01, -1.789210206887725e-01, -8.118783947651316e-02, -4.259171723850241e-02, -5.039130950768845e-02, -1.712852498972645e-01, -5.212652665216166e-02, -5.212652665216165e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wp04_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.545411290914446e+01, -2.545419480851641e+01, -2.545457570867371e+01, -2.545323427850538e+01, -2.545415597027414e+01, -2.545415597027414e+01, -4.210384246823457e+00, -4.210416785277830e+00, -4.211480175431883e+00, -4.210516751284478e+00, -4.210418434466142e+00, -4.210418434466142e+00, -8.576557338830416e-01, -8.564877564443131e-01, -8.263813128242159e-01, -8.328196493138008e-01, -8.572312049160303e-01, -8.572312049160303e-01, -2.636846381786628e-01, -2.670076342842895e-01, -1.026231290059129e+00, -2.008663922595034e-01, -2.646818788240554e-01, -2.646818788240554e-01, -3.666113131959125e-02, -3.769704806650676e-02, -9.274021212702852e-02, -2.428187305635474e-02, -3.737296177852523e-02, -3.737296177852523e-02, -6.366407626676393e+00, -6.368811072340661e+00, -6.366653899194878e+00, -6.368522689122818e+00, -6.367639015674132e+00, -6.367639015674132e+00, -2.333127039178502e+00, -2.350888210213183e+00, -2.323991289911780e+00, -2.337821128330731e+00, -2.357117388772119e+00, -2.357117388772119e+00, -7.747298242357800e-01, -8.605569763560673e-01, -7.369495897620596e-01, -7.845353697016155e-01, -8.052082251072481e-01, -8.052082251072481e-01, -1.599776298615137e-01, -2.638625485101542e-01, -1.578582218478693e-01, -2.456064540107961e+00, -1.769704823163013e-01, -1.769704823163013e-01, -2.367429384671647e-02, -2.557863449120442e-02, -1.997572165357964e-02, -1.143270970166894e-01, -2.353357887005945e-02, -2.353357887005944e-02, -8.295313715447119e-01, -8.181268789030007e-01, -8.220532934386069e-01, -8.252026110171490e-01, -8.236138636657812e-01, -8.236138636657812e-01, -8.063415826723006e-01, -6.678268475493087e-01, -7.045160045849487e-01, -7.409413640184810e-01, -7.221932563881860e-01, -7.221932563881861e-01, -8.978998094509595e-01, -3.218659495509674e-01, -3.768885606247823e-01, -4.800283467209255e-01, -4.246791432548124e-01, -4.246791432548123e-01, -6.067331922688265e-01, -8.920884602216968e-02, -1.076230644534974e-01, -4.616552364571510e-01, -1.362652554469710e-01, -1.362652554469710e-01, -4.105081705988835e-02, -1.185707043325716e-02, -1.703485356286141e-02, -1.310688938104550e-01, -2.079312235889114e-02, -2.079312235889113e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wp04_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.984455024476681e-09, -6.984425478528846e-09, -6.984188394041971e-09, -6.984674337224112e-09, -6.984440322937372e-09, -6.984440322937372e-09, -9.228360808311038e-06, -9.228658696891794e-06, -9.235330864131759e-06, -9.216024088909533e-06, -9.228356769984868e-06, -9.228356769984868e-06, -5.773026031979787e-03, -5.775306443349252e-03, -5.796756397487429e-03, -5.649909417430576e-03, -5.773958382493733e-03, -5.773958382493733e-03, -6.902836232969649e-01, -6.739901572372432e-01, -3.095827447608827e-03, -1.565681561222600e+00, -6.855925753247628e-01, -6.855925753247628e-01, -2.691291303813628e+03, -2.360571177410228e+03, -3.583337562508952e+01, -1.994057872437152e+04, -2.458881848753019e+03, -2.458881848753019e+03, -2.108834389971260e-06, -2.110290537933225e-06, -2.108971307891327e-06, -2.110103669097671e-06, -2.109596881013947e-06, -2.109596881013947e-06, -7.039336340893404e-05, -6.899739278236526e-05, -7.039505387492520e-05, -6.930314351396414e-05, -6.944821974207582e-05, -6.944821974207582e-05, -1.237256547120521e-02, -1.111883191515829e-02, -1.502286748119439e-02, -1.526927662447354e-02, -1.097378122904301e-02, -1.097378122904301e-02, -3.467362308590034e+00, -5.103074688076481e-01, -3.768052903087332e+00, -1.297965967052925e-04, -2.496396346067371e+00, -2.496396346067371e+00, -2.248095563506801e+04, -1.533235679429718e+04, -4.720824931781359e+04, -1.453772217737889e+01, -2.235810013329733e+04, -2.235810013329734e+04, -1.498649026461029e-02, -1.414019226176668e-02, -1.439518266273111e-02, -1.462422905627751e-02, -1.450570619984742e-02, -1.450570619984742e-02, -1.736357217400420e-02, -1.902836812644983e-02, -1.789915307887179e-02, -1.721422965223899e-02, -1.754075645693331e-02, -1.754075645693331e-02, -9.109276373703540e-03, -2.468697646886752e-01, -1.499227464671832e-01, -7.573946168438422e-02, -1.072767772702337e-01, -1.072767772702338e-01, -2.812823643850729e-02, -4.194287855900001e+01, -1.837082479051421e+01, -1.052018632739329e-01, -7.160671811774812e+00, -7.160671811774816e+00, -1.577780372328863e+03, -7.448142306707024e+05, -1.121757093180968e+05, -8.696993231523322e+00, -3.968790539375442e+04, -3.968790539375457e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
