
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse_sol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.542211022718583e+01, -1.542213997681946e+01, -1.542230643031540e+01, -1.542186311473886e+01, -1.542209054089648e+01, -1.542209054089648e+01, -2.585719216305443e+00, -2.585708926003502e+00, -2.585533388308741e+00, -2.586319487189003e+00, -2.585768047118780e+00, -2.585768047118780e+00, -5.434773846709060e-01, -5.430761151177866e-01, -5.345042926605148e-01, -5.383467731544742e-01, -5.389104427428497e-01, -5.389104427428497e-01, -1.700728096301364e-01, -1.715279046671953e-01, -6.255757255243526e-01, -1.430804859739716e-01, -1.629918150947255e-01, -1.629918150947254e-01, -1.009374281429272e-02, -1.062701412523747e-02, -5.402209172137210e-02, -5.826856211246696e-03, -8.127808006434211e-03, -8.127808006434211e-03, -3.785691996920553e+00, -3.785903871991549e+00, -3.785706512868662e+00, -3.785893454186941e+00, -3.785796566585854e+00, -3.785796566585854e+00, -1.536441648387890e+00, -1.544982528810780e+00, -1.533911940900441e+00, -1.541422003391658e+00, -1.542444558483499e+00, -1.542444558483499e+00, -4.782627633100436e-01, -5.194802452672511e-01, -4.460652744617862e-01, -4.651431929088458e-01, -4.857853658572956e-01, -4.857853658572956e-01, -1.136598860589079e-01, -1.779124814827722e-01, -1.074038953582309e-01, -1.437003230798193e+00, -1.241870451240034e-01, -1.241870451240034e-01, -4.499416749407716e-03, -5.696095688056615e-03, -4.361811755724383e-03, -7.944634683889185e-02, -5.478354646254685e-03, -5.478354646254692e-03, -4.873009140918987e-01, -4.822639199266605e-01, -4.839401329218860e-01, -4.853996448003343e-01, -4.846605363672233e-01, -4.846605363672233e-01, -4.764727761461381e-01, -4.092506106214839e-01, -4.256561916135490e-01, -4.438714845862661e-01, -4.343034209853959e-01, -4.343034209853959e-01, -5.415917434217736e-01, -2.113227831040353e-01, -2.411424326769531e-01, -3.001030672497149e-01, -2.674794900333560e-01, -2.674794900333561e-01, -3.799287297497553e-01, -5.203278791489654e-02, -6.739220813112301e-02, -2.904923165821227e-01, -9.426637806269941e-02, -9.426637806269948e-02, -1.420391078628790e-02, -1.523209934572153e-03, -3.202768988510046e-03, -9.014196533138914e-02, -5.031375407606774e-03, -5.031375407606772e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse_sol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.936594293987046e+01, -1.936591976852824e+01, -1.936602408754117e+01, -1.936597907748081e+01, -1.936627185672735e+01, -1.936633554333520e+01, -1.936535094333807e+01, -1.936516715548882e+01, -1.936598761124289e+01, -1.936562810692849e+01, -1.936598761124289e+01, -1.936562810692849e+01, -3.223193248826707e+00, -3.223290681640275e+00, -3.223226322123497e+00, -3.223326760702507e+00, -3.224054535011744e+00, -3.224249662622763e+00, -3.223122730247366e+00, -3.223316878350717e+00, -3.222648516418257e+00, -3.224067682638962e+00, -3.222648516418257e+00, -3.224067682638962e+00, -6.772645147927285e-01, -6.806668711827928e-01, -6.756251416347300e-01, -6.797922589471767e-01, -6.488780547602407e-01, -6.433631090897078e-01, -6.507507217002304e-01, -6.525323658434966e-01, -6.773386886440119e-01, -6.239045315093711e-01, -6.773386886440119e-01, -6.239045315093711e-01, -1.847964436944928e-01, -1.889054348527339e-01, -1.882320062760535e-01, -1.930351976023088e-01, -7.708650874802454e-01, -7.971545792396975e-01, -1.438922099637641e-01, -1.450305393848306e-01, -1.731285767682482e-01, -1.321088348664283e-01, -1.731285767682481e-01, -1.321088348664281e-01, -1.298425489279293e-02, -1.379000421926399e-02, -1.359911582442332e-02, -1.455797150232340e-02, -6.533833705438018e-02, -6.798859262172981e-02, -7.826189090553302e-03, -7.696251749016818e-03, -1.159309410306886e-02, -6.608692360954558e-03, -1.159309410306885e-02, -6.608692360954555e-03, -4.867458583748556e+00, -4.866326925213932e+00, -4.869337482892577e+00, -4.868149268380847e+00, -4.867561211703061e+00, -4.866391919165515e+00, -4.869178577683069e+00, -4.868042105679646e+00, -4.868419610788688e+00, -4.867243535926038e+00, -4.868419610788688e+00, -4.867243535926038e+00, -1.767561981035305e+00, -1.767475269161047e+00, -1.782816950087336e+00, -1.782328773577659e+00, -1.750097042912560e+00, -1.754285413306192e+00, -1.763283120717435e+00, -1.767601319019666e+00, -1.788503246701476e+00, -1.778135264888269e+00, -1.788503246701476e+00, -1.778135264888269e+00, -6.252042830187250e-01, -6.241205270072270e-01, -6.835498383834765e-01, -6.839390688525585e-01, -5.728343603697315e-01, -5.883815012370472e-01, -6.060882425955222e-01, -6.189762215615672e-01, -6.468268140916710e-01, -6.239901874386451e-01, -6.468268140916710e-01, -6.239901874386452e-01, -1.195107765303586e-01, -1.196054461057194e-01, -1.811309225601741e-01, -1.816287196882466e-01, -1.130850890988522e-01, -1.156198494837174e-01, -1.897267681605157e+00, -1.896573336979666e+00, -1.264678054597321e-01, -1.250437822661282e-01, -1.264678054597321e-01, -1.250437822661282e-01, -5.874127427437209e-03, -6.104521880073074e-03, -7.530235358723283e-03, -7.644207595115172e-03, -5.629716325957851e-03, -5.960368015001442e-03, -9.046054763126828e-02, -9.104571912816312e-02, -5.752036835032955e-03, -7.890768238258216e-03, -5.752036835032958e-03, -7.890768238258223e-03, -6.352914328854333e-01, -6.369720287167218e-01, -6.332379380365407e-01, -6.349740714861432e-01, -6.342296571065978e-01, -6.359596380083432e-01, -6.348527829295268e-01, -6.365408431457300e-01, -6.345670492163684e-01, -6.362754825208223e-01, -6.345670492163684e-01, -6.362754825208223e-01, -6.189698444433949e-01, -6.203174158344663e-01, -5.186610505639042e-01, -5.204380728443538e-01, -5.525015050051385e-01, -5.544261023360643e-01, -5.839270907435592e-01, -5.853679502019137e-01, -5.685512327709321e-01, -5.700521181177685e-01, -5.685512327709321e-01, -5.700521181177685e-01, -7.128962886708193e-01, -7.139813136150717e-01, -2.244078184456741e-01, -2.252348448296775e-01, -2.733642145141308e-01, -2.752827426916586e-01, -3.814449773874683e-01, -3.828840161327495e-01, -3.248674340387227e-01, -3.248867401983757e-01, -3.248674340387228e-01, -3.248867401983759e-01, -4.816986253192659e-01, -4.843352200103822e-01, -6.460153571058232e-02, -6.493115828838238e-02, -7.985779047181636e-02, -8.148563805089133e-02, -3.766585486341788e-01, -3.804227189966252e-01, -1.012830783288625e-01, -1.013622328372842e-01, -1.012830783288627e-01, -1.013622328372843e-01, -1.850113311890308e-02, -1.915840894809194e-02, -2.028421197515621e-03, -2.032955782865586e-03, -4.125685694453966e-03, -4.387590702286746e-03, -9.789212387125018e-02, -9.877717802824354e-02, -5.446849735925568e-03, -7.234956681406939e-03, -5.446849735925590e-03, -7.234956681406928e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse_sol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.141450732236476e-09, 3.855567579455844e-10, -6.141484756496435e-09, -6.141382895446215e-09, 3.855637563905792e-10, -6.141434507549079e-09, -6.141132664618786e-09, 3.855734091993355e-10, -6.141089116479140e-09, -6.141912095816535e-09, 3.854697494807899e-10, -6.142068026415391e-09, -6.141429183392493e-09, 3.855271085313426e-10, -6.141639629609804e-09, -6.141429183392493e-09, 3.855271085313426e-10, -6.141639629609804e-09, -7.663549917475427e-06, 2.158879157656427e-06, -7.665285607896581e-06, -7.663375993911435e-06, 2.159323527660124e-06, -7.665259430206267e-06, -7.661011176463138e-06, 2.169371669283230e-06, -7.661503684766360e-06, -7.660468899063333e-06, 2.149943255801801e-06, -7.661363171773011e-06, -7.668765443778518e-06, 2.159156568071321e-06, -7.658403376817478e-06, -7.668765443778518e-06, 2.159156568071321e-06, -7.658403376817478e-06, -4.108954003021456e-03, 3.586683876242116e-03, -4.075968650898810e-03, -4.138372658788142e-03, 3.559577090514688e-03, -4.098019888146843e-03, -4.690312307955048e-03, 2.876045381924161e-03, -4.739545586824964e-03, -4.574180850728447e-03, 2.810968523930000e-03, -4.560992095996435e-03, -4.351401586501172e-03, 2.852692094259074e-03, -4.715309761201839e-03, -4.351401586501172e-03, 2.852692094259074e-03, -4.715309761201839e-03, -6.879144437150144e-01, 3.108902575321890e-01, -6.151840990228916e-01, -6.694539672455184e-01, 3.280826843588528e-01, -5.858286183624077e-01, -2.433521826156413e-03, 1.940414170439823e-03, -2.124907859437655e-03, -1.257901335044819e+00, 2.258949661124237e-01, -1.207020509458441e+00, -6.265649538535489e-01, 1.882246441728870e-01, -2.247474392198745e+00, -6.265649538535519e-01, 1.882246441728873e-01, -2.247474392198737e+00, -8.626312703448775e+00, 8.471332723898200e-03, -8.535009782118323e+00, -9.083547044440687e+00, 9.964515393423459e-03, -9.030663443337431e+00, -4.153859686465518e+00, 5.126941006152715e-02, -4.110723697757424e+00, -7.932645888036400e+00, 3.008683449168684e-03, -7.718206381839871e+00, -8.622331863483025e+00, 4.414566270491809e-03, -2.192958802231063e+01, -8.622331863489208e+00, 4.414566270088269e-03, -2.192958802229517e+01, -1.550077571218630e-06, 5.666948009101149e-07, -1.551799402141483e-06, -1.547721222437409e-06, 5.704413223836728e-07, -1.549459352144863e-06, -1.549964755492422e-06, 5.668443577206054e-07, -1.551700558078836e-06, -1.547896864185130e-06, 5.701514261968389e-07, -1.549623093723315e-06, -1.548886209921850e-06, 5.686004611431787e-07, -1.550613785420211e-06, -1.548886209921850e-06, 5.686004611431787e-07, -1.550613785420211e-06, -6.842894356622934e-05, 1.221811741084532e-05, -6.844280990483395e-05, -6.671728280246973e-05, 1.218856108878283e-05, -6.678642982201626e-05, -6.938268661886984e-05, 1.161795009824474e-05, -6.922306787340880e-05, -6.789600185873918e-05, 1.159619612758267e-05, -6.770800368360156e-05, -6.679428824444545e-05, 1.250231835492394e-05, -6.735301270969218e-05, -6.679428824444545e-05, 1.250231835492394e-05, -6.735301270969218e-05, -5.128742519606468e-03, 1.180452397706796e-02, -5.250420369817761e-03, -1.187009035332596e-03, 1.489938286408802e-02, -1.179982432016616e-03, -8.322500865521897e-03, 1.535577972946644e-02, -6.310106340776579e-03, -3.515235272532929e-03, 2.278859644535717e-02, -1.657027430048995e-03, -3.653183424336108e-03, 1.179162458306085e-02, -5.783253287365882e-03, -3.653183424336112e-03, 1.179162458306085e-02, -5.783253287365878e-03, -1.925204195217013e+00, 1.261488607621168e-01, -1.941823283983882e+00, -5.157630665034016e-01, 1.139695105238702e-01, -5.088332530359069e-01, -2.276013235816233e+00, 1.279112469154852e-01, -2.148257632487454e+00, -4.274579977248237e-05, 1.207887057881010e-04, -4.293657035787724e-05, -1.839757531998307e+00, 2.409472748596690e-01, -2.036721109610681e+00, -1.839757531998307e+00, 2.409472748596690e-01, -2.036721109610681e+00, -1.114735634226703e+01, 2.933546798259037e-03, -9.648125310676823e+00, -9.588524937788124e+00, 3.699144102256803e-03, -8.852938682714239e+00, -5.456625600518588e+01, 3.685108437354808e-02, -6.067240187770700e+01, -3.945112450514950e+00, 1.250822448857004e-01, -3.799440437179678e+00, -2.715983953451061e+01, 1.410360645889085e-02, -2.662828676437782e+01, -2.715983953452866e+01, 1.410360646869916e-02, -2.662828676436887e+01, 3.676933163820825e-04, 2.514346072918196e-02, 5.513441414081062e-04, -1.426224645683706e-03, 2.157065992117518e-02, -1.243727999681771e-03, -8.532750878242363e-04, 2.270457728491302e-02, -6.704529850471708e-04, -3.341653042933847e-04, 2.373865089872573e-02, -1.510055554785252e-04, -5.991743542714256e-04, 2.321019190891285e-02, -4.161789516443463e-04, -5.991743542714256e-04, 2.321019190891285e-02, -4.161789516443463e-04, 1.165305702078781e-03, 2.977269840520045e-02, 1.346001060740155e-03, -1.267431300632110e-02, 1.592277215307748e-02, -1.237054020409412e-02, -9.149027128514620e-03, 1.838749842245184e-02, -8.867895017795079e-03, -5.462955322634177e-03, 2.169730037966074e-02, -5.244784910599177e-03, -7.348954760332925e-03, 1.995497716545398e-02, -7.106139543649472e-03, -7.348954760332925e-03, 1.995497716545398e-02, -7.106139543649472e-03, -1.214810675622189e-03, 1.183264719377924e-02, -1.179145998646321e-03, -2.569893371265102e-01, 8.498631964250428e-02, -2.526377477618094e-01, -1.447867649000407e-01, 7.821972418059023e-02, -1.404810736052010e-01, -4.658924652135739e-02, 6.964082434152352e-02, -4.499933757115027e-02, -8.479685033569073e-02, 7.796350422599263e-02, -8.531451874510801e-02, -8.479685033569107e-02, 7.796350422599266e-02, -8.531451874510798e-02, -1.731282997301740e-02, 2.285950305464996e-02, -1.666947975202887e-02, -3.828710919501597e+00, 4.213028450134424e-02, -3.825807129496846e+00, -3.436989848380631e+00, 6.458066222247318e-02, -3.470425443004429e+00, -4.762698564034828e-02, 1.099497136873529e-01, -4.229172447017786e-02, -3.477317932574840e+00, 2.182010199987041e-01, -3.879602211229074e+00, -3.477317932574847e+00, 2.182010199987039e-01, -3.879602211229052e+00, -6.807464318188092e+00, 1.056259116938041e-02, -6.944719086943731e+00, -3.438019414068141e+01, 4.011531506685853e-03, -6.088327855566415e+01, -2.118473956241547e+01, 5.020763908060611e-03, -2.254627936937616e+01, -3.947174462284587e+00, 2.002688123716920e-01, -3.836426750867740e+00, -5.596246545552123e+01, 1.800188742308661e-02, -2.765601585596929e+01, -5.596246545554467e+01, 1.800188743452388e-02, -2.765601585599488e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
