
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_x3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645773373819031e+01, -1.645775390554461e+01, -1.645790150437658e+01, -1.645757010676416e+01, -1.645774389205808e+01, -1.645774389205808e+01, -2.779207840784847e+00, -2.779188074510935e+00, -2.778757099732006e+00, -2.780076807677500e+00, -2.779209265798990e+00, -2.779209265798990e+00, -5.847424991379430e-01, -5.846205364698406e-01, -5.824499499645480e-01, -5.861343899930714e-01, -5.846958262243435e-01, -5.846958262243435e-01, -1.818479735869175e-01, -1.833192058213405e-01, -6.807901946582910e-01, -1.433824422453275e-01, -1.822806468481115e-01, -1.822806468481115e-01, -3.841699823988590e-02, -3.899290978376712e-02, -7.424716684478627e-02, -3.321318123494607e-02, -3.861697949941194e-02, -3.861697949941194e-02, -4.010795245721079e+00, -4.010396633190450e+00, -4.010759296291997e+00, -4.010449275032734e+00, -4.010583997184278e+00, -4.010583997184278e+00, -1.692869282459616e+00, -1.700937065560389e+00, -1.693181486886919e+00, -1.699460982983270e+00, -1.697940507986223e+00, -1.697940507986223e+00, -4.923966626975124e-01, -5.142052299017416e-01, -4.698534774897363e-01, -4.746334401530661e-01, -5.075459927150917e-01, -5.075459927150917e-01, -1.138889237612498e-01, -1.899273855343575e-01, -1.128406965081631e-01, -1.482377645123129e+00, -1.265234704921513e-01, -1.265234704921513e-01, -3.256347840893433e-02, -3.363759514568142e-02, -2.575688405767045e-02, -8.545212489579307e-02, -3.057403073009687e-02, -3.057403073009687e-02, -4.848473964870978e-01, -4.866794567843912e-01, -4.860715717656388e-01, -4.855662856085863e-01, -4.858226490237853e-01, -4.858226490237853e-01, -4.695122673916624e-01, -4.411876625096122e-01, -4.503938751933582e-01, -4.581793389426269e-01, -4.541911559723851e-01, -4.541911559723851e-01, -5.383373792744014e-01, -2.304974775885688e-01, -2.638969707669966e-01, -3.166839940583522e-01, -2.889289704446860e-01, -2.889289704446859e-01, -4.016002100656272e-01, -7.291451966174692e-02, -8.151694817369189e-02, -2.949027658863279e-01, -9.893435646578337e-02, -9.893435646578336e-02, -4.243014636002048e-02, -2.304184488972176e-02, -2.685417155261462e-02, -9.587922565461335e-02, -2.736586627835139e-02, -2.736586627835139e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_x3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.989580045872691e+01, -1.989586340602047e+01, -1.989615816013173e+01, -1.989512710630652e+01, -1.989583353852298e+01, -1.989583353852298e+01, -3.272933794891455e+00, -3.272956745433895e+00, -3.273719595359545e+00, -3.273083621246526e+00, -3.272959225832656e+00, -3.272959225832656e+00, -6.677529351084247e-01, -6.670184856520150e-01, -6.489782636684724e-01, -6.537000858512215e-01, -6.674852147182438e-01, -6.674852147182438e-01, -2.064378076089108e-01, -2.082212456999779e-01, -7.947804114512517e-01, -1.677246152694200e-01, -2.069550163186046e-01, -2.069550163186046e-01, -1.755497004907763e-02, -1.818938393002517e-02, -7.094159923510238e-02, -1.103203415169880e-02, -1.801167088429160e-02, -1.801167088429160e-02, -4.948167931918173e+00, -4.949955638742765e+00, -4.948351336880225e+00, -4.949741357124079e+00, -4.949083516636310e+00, -4.949083516636310e+00, -1.825130844596082e+00, -1.838394915419338e+00, -1.818867841289608e+00, -1.829179870588991e+00, -1.842361872803172e+00, -1.842361872803172e+00, -5.948614321112417e-01, -6.562012583914769e-01, -5.658503856095898e-01, -5.981774532746695e-01, -6.177078283043173e-01, -6.177078283043173e-01, -1.426752967850094e-01, -2.208636984079123e-01, -1.380612458288386e-01, -1.894896337565616e+00, -1.504511324843201e-01, -1.504511324843201e-01, -1.073957425785313e-02, -1.163752455377024e-02, -8.891021702124295e-03, -9.635448516057908e-02, -1.062237419649473e-02, -1.062237419649473e-02, -6.305297546168448e-01, -6.229888485801364e-01, -6.255936653694678e-01, -6.276681589241718e-01, -6.266233943144724e-01, -6.266233943144724e-01, -6.123521538149737e-01, -5.161553561086861e-01, -5.409443670433697e-01, -5.661157797132331e-01, -5.530683038340035e-01, -5.530683038340036e-01, -6.853971034140337e-01, -2.624628121384480e-01, -2.990688702079042e-01, -3.698637005053746e-01, -3.310040812208526e-01, -3.310040812208525e-01, -4.689244037029361e-01, -6.520167228595548e-02, -8.993526563967359e-02, -3.519312297580456e-01, -1.154256937514598e-01, -1.154256937514597e-01, -2.010598277345359e-02, -5.452164289316839e-03, -7.682920406928704e-03, -1.082901516090841e-01, -9.300766992681918e-03, -9.300766992681914e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_x3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_x3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.121912301192269e-09, -5.121891104300227e-09, -5.121718754881792e-09, -5.122067425669353e-09, -5.121901772886432e-09, -5.121901772886432e-09, -6.614680064740570e-06, -6.614904944659011e-06, -6.620007207059330e-06, -6.605656845278727e-06, -6.614683800439491e-06, -6.614683800439491e-06, -3.516862280420449e-03, -3.514553908280588e-03, -3.416579883873612e-03, -3.340845474628368e-03, -3.516098890227603e-03, -3.516098890227603e-03, -2.531497880568498e-01, -2.546824573409396e-01, -1.981271132089027e-03, -2.646052628532884e-01, -2.538553693909517e-01, -2.538553693909517e-01, -1.494231641426177e+03, -1.307503452923276e+03, -6.767481075662718e+00, -1.123392584080499e+04, -1.362027861432108e+03, -1.362027861432108e+03, -1.531012225438767e-06, -1.532124797033332e-06, -1.531117188688528e-06, -1.531982367414035e-06, -1.531594356753398e-06, -1.531594356753398e-06, -4.824568304531421e-05, -4.735047542265202e-05, -4.818139339059130e-05, -4.748369112919947e-05, -4.772063302907214e-05, -4.772063302907214e-05, -7.699077613918657e-03, -7.259874657936976e-03, -9.241920396802992e-03, -9.777006665649131e-03, -6.907603954499507e-03, -6.907603954499507e-03, 5.890484159687076e-02, -1.209897139559684e-01, -6.916376539443554e-02, -9.216966457593597e-05, -2.524553185564568e-01, -2.524553185564568e-01, -1.266617933281770e+04, -8.632977919538826e+03, -2.658468330815816e+04, -6.549798348962264e-01, -1.258853663386947e+04, -1.258853663386948e+04, -1.003698869941343e-02, -9.193722448047198e-03, -9.414464967529073e-03, -9.638786788559674e-03, -9.518730368873232e-03, -9.518730368873232e-03, -1.160424979874304e-02, -1.117011417061806e-02, -1.089274267381673e-02, -1.079247217570240e-02, -1.083865053212188e-02, -1.083865053212188e-02, -5.970855392582851e-03, -8.325573699861817e-02, -6.383745684927476e-02, -4.049372750612616e-02, -5.219159733368990e-02, -5.219159733368995e-02, -1.607248215637564e-02, -9.681968313002677e+00, -8.414189955834396e-01, -5.784654016677349e-02, -3.859633635800210e-01, -3.859633635800261e-01, -8.718950908955105e+02, -4.201685874934436e+05, -6.326120795848782e+04, -8.499147047391641e-01, -2.235404215842209e+04, -2.235404215842217e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
