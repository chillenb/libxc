
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse12_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.444626202632527e+01, -1.444627934576531e+01, -1.444640526337325e+01, -1.444614658366450e+01, -1.444627516652128e+01, -1.444627516652128e+01, -2.448305940745427e+00, -2.448281129079123e+00, -2.447766449746041e+00, -2.449115681296792e+00, -2.448333818402317e+00, -2.448333818402317e+00, -5.262049165660645e-01, -5.260072562539284e-01, -5.219764500642234e-01, -5.255489153459348e-01, -5.244324727845244e-01, -5.244324727845244e-01, -1.708825733323044e-01, -1.721113816433918e-01, -6.027393616614605e-01, -1.440994840192718e-01, -1.544768405221924e-01, -1.544768405221924e-01, -1.007996571732444e-02, -1.060771615228885e-02, -5.340707075154895e-02, -5.827084809605683e-03, -7.320309789788038e-03, -7.320309789788038e-03, -3.527583804730507e+00, -3.527295949958963e+00, -3.527577246252682e+00, -3.527322984193127e+00, -3.527433831684499e+00, -3.527433831684499e+00, -1.497315242529332e+00, -1.504772427262955e+00, -1.496676034400049e+00, -1.503293392606127e+00, -1.501707830043287e+00, -1.501707830043287e+00, -4.550085633116360e-01, -4.859731692315894e-01, -4.258629289454348e-01, -4.363935458118471e-01, -4.605558224219009e-01, -4.605558224219009e-01, -1.119240646233949e-01, -1.793009899305299e-01, -1.054407213958809e-01, -1.331903775823869e+00, -1.241061047350819e-01, -1.241061047350819e-01, -4.496735521797535e-03, -5.696597861464195e-03, -4.356603541172073e-03, -7.776939799149064e-02, -5.247818004298647e-03, -5.247818004298647e-03, -4.551176325682925e-01, -4.514897048546863e-01, -4.526302776186907e-01, -4.536781091361130e-01, -4.531410691798232e-01, -4.531410691798232e-01, -4.449339454091201e-01, -3.967849294156361e-01, -4.075871014460160e-01, -4.195928904939711e-01, -4.131252077572409e-01, -4.131252077572409e-01, -5.066280986714110e-01, -2.121026855614825e-01, -2.398606487951822e-01, -2.931522709437577e-01, -2.641295662980315e-01, -2.641295662980314e-01, -3.688919566199039e-01, -5.149381011826141e-02, -6.620414048838687e-02, -2.813077949837970e-01, -9.272165201464216e-02, -9.272165201464219e-02, -1.420007888658380e-02, -1.523273797533408e-03, -3.197137463138231e-03, -8.853309687934849e-02, -4.856105708725690e-03, -4.856105708810002e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse12_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.719238938910583e+01, -1.719246589118244e+01, -1.719277423404169e+01, -1.719163672103295e+01, -1.719223725788422e+01, -1.719223725788422e+01, -2.853718446576019e+00, -2.853758121209708e+00, -2.854745170381983e+00, -2.853551876025457e+00, -2.853831932906295e+00, -2.853831932906295e+00, -6.149882123978373e-01, -6.142066539681886e-01, -5.973439876773549e-01, -6.017360670799360e-01, -6.008660517679700e-01, -6.008660517679700e-01, -1.803996723473008e-01, -1.834684289764980e-01, -7.057371871615556e-01, -1.532865610056775e-01, -1.610014975138961e-01, -1.610014975138959e-01, -1.342919230825332e-02, -1.413067286448083e-02, -6.702560909416282e-02, -7.767798754097241e-03, -9.756896945945774e-03, -9.756896945945771e-03, -4.371527387719244e+00, -4.374094168765174e+00, -4.371639964624555e+00, -4.373905985846305e+00, -4.372831237729854e+00, -4.372831237729854e+00, -1.626477186011611e+00, -1.636921792415125e+00, -1.619789387287823e+00, -1.629124450854838e+00, -1.635390451962191e+00, -1.635390451962191e+00, -5.649926611711517e-01, -6.318323232976962e-01, -5.248315377581984e-01, -5.649925247584880e-01, -5.761685548581045e-01, -5.761685548581045e-01, -1.265029306173524e-01, -1.853021503151122e-01, -1.199632510624657e-01, -1.738169224090579e+00, -1.358635663772865e-01, -1.358635663772865e-01, -5.994930999082920e-03, -7.593933765058527e-03, -5.808159730337837e-03, -9.064622403939014e-02, -6.995920381953485e-03, -6.995920381953488e-03, -5.910778086681138e-01, -5.867316082337228e-01, -5.886462760837521e-01, -5.899346417836815e-01, -5.893266586909354e-01, -5.893266586909354e-01, -5.763724146658818e-01, -4.725269840918979e-01, -5.001741252605472e-01, -5.338027486438159e-01, -5.163587208400066e-01, -5.163587208400066e-01, -6.583776147643421e-01, -2.172994851023737e-01, -2.624517673512331e-01, -3.526987181567026e-01, -3.101342667766323e-01, -3.101342667766323e-01, -4.404868035163408e-01, -6.537041818735684e-02, -7.890200763574687e-02, -3.452849385865180e-01, -1.058781185635472e-01, -1.058781185635472e-01, -1.889487507085958e-02, -2.031005927657020e-03, -4.262603242564981e-03, -1.016788943153728e-01, -6.473895532802758e-03, -6.473895531390843e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse12_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.181655102871190e-09, -5.181600722058079e-09, -5.181336631461708e-09, -5.182146086919000e-09, -5.181725153341424e-09, -5.181725153341424e-09, -6.264601842721742e-06, -6.264624079211058e-06, -6.264497296072893e-06, -6.260083085747860e-06, -6.264047918883623e-06, -6.264047918883623e-06, -2.586968168531488e-03, -2.589922994751115e-03, -2.582133937652158e-03, -2.520541631455805e-03, -2.544042968904744e-03, -2.544042968904744e-03, -2.983381093703589e-01, -2.847472614869239e-01, -1.541127559027216e-03, -4.480185638279693e-01, -4.196153235184715e-01, -4.196153235184729e-01, 4.259869540793457e-03, 5.018989884868796e-03, -1.011834228390871e+00, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, -1.243095579151945e-06, -1.239706730488158e-06, -1.242949079371081e-06, -1.239957925953411e-06, -1.241378322337095e-06, -1.241378322337095e-06, -4.139176562711106e-05, -4.078835033824468e-05, -4.102212338884699e-05, -4.047322577995909e-05, -4.125876765591656e-05, -4.125876765591656e-05, -3.449708251005835e-03, 9.315755306409960e-04, -4.803461777904405e-03, 4.726026863074769e-04, -2.979169683718776e-03, -2.979169683718776e-03, -5.975300296801682e-01, -2.149895178154086e-01, -6.876855019337738e-01, -1.691075316857669e-05, -6.297830776359118e-01, -6.297830776359118e-01, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, -1.441329063182317e+00, 8.056878965244950e-03, 8.056878974167092e-03, 4.294149303626279e-03, 1.683587541137274e-03, 2.511995131800043e-03, 3.268435255613211e-03, 2.881804865887277e-03, 2.881804865887277e-03, 5.899214807740603e-03, -7.401148534683138e-03, -5.892360949180022e-03, -2.687405325268743e-03, -4.536244601171342e-03, -4.536244601171342e-03, 4.865611935936350e-04, -1.227457163598083e-01, -6.423022806366215e-02, -2.180346319495249e-02, -3.292126062560232e-02, -3.292126062560211e-02, -9.659813557462616e-03, -6.144674741308231e-01, -1.574325347114412e+00, -2.370541682058333e-02, -1.154675578513034e+00, -1.154675578513037e+00, 5.292039407050194e-03, 2.005779865925479e-03, 2.523877354250999e-03, -1.243264142931558e+00, 1.003269687435131e-02, 1.003269687251532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
