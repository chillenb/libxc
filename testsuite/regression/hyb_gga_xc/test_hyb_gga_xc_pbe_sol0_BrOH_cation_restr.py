
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_sol0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_sol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.541741592246097e+01, -1.541744569043217e+01, -1.541761219829027e+01, -1.541716860937359e+01, -1.541739618057608e+01, -1.541739618057608e+01, -2.579659881449948e+00, -2.579649609602348e+00, -2.579474520418289e+00, -2.580260007109554e+00, -2.579708574259920e+00, -2.579708574259920e+00, -5.350656575955693e-01, -5.346629452499493e-01, -5.259605448156103e-01, -5.298400085002427e-01, -5.288004737735512e-01, -5.288004737735512e-01, -1.584827872836412e-01, -1.600917036125373e-01, -6.170707280298542e-01, -1.298096574542650e-01, -1.403826583987513e-01, -1.403826583987513e-01, -7.561994385188679e-03, -7.958112548467110e-03, -4.276957375354788e-02, -4.370531203970545e-03, -5.490424256280916e-03, -5.490424256280916e-03, -3.779806873707669e+00, -3.780010683259131e+00, -3.779821057948084e+00, -3.780000890490550e+00, -3.779907352736712e+00, -3.779907352736712e+00, -1.528807277060495e+00, -1.537408485909310e+00, -1.526137621521776e+00, -1.533703967304870e+00, -1.534889041070983e+00, -1.534889041070983e+00, -4.686939920192487e-01, -5.071434819593023e-01, -4.363946686970973e-01, -4.530903917050473e-01, -4.755894387414231e-01, -4.755894387414231e-01, -9.964437480423773e-02, -1.650707343608627e-01, -9.336638801389897e-02, -1.426973044245050e+00, -1.104622015185298e-01, -1.104622015185298e-01, -3.372525713752214e-03, -4.272526489838715e-03, -3.266433618156018e-03, -6.627205849882686e-02, -3.935060326694470e-03, -3.935060326694470e-03, -4.733941250102029e-01, -4.697141091625262e-01, -4.709592993373947e-01, -4.720259437162463e-01, -4.714876040755011e-01, -4.714876040755011e-01, -4.620775653508901e-01, -4.002825595599864e-01, -4.162154678639246e-01, -4.332665212165027e-01, -4.243823834285396e-01, -4.243823834285396e-01, -5.295173011863596e-01, -1.995036716521365e-01, -2.305298819901989e-01, -2.906593407885935e-01, -2.577674175562644e-01, -2.577674175562644e-01, -3.708279489321756e-01, -4.107337885309841e-02, -5.489893042054094e-02, -2.806081018517855e-01, -8.059350213560519e-02, -8.059350213560519e-02, -1.066316584509656e-02, -1.142419215621664e-03, -2.397706706170187e-03, -7.660566904315801e-02, -3.641233268265573e-03, -3.641233268265572e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_sol0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_sol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.936292101133214e+01, -1.936299107395327e+01, -1.936329272827379e+01, -1.936225053820748e+01, -1.936279802195706e+01, -1.936279802195706e+01, -3.217775191437609e+00, -3.217808256659052e+00, -3.218648933596272e+00, -3.217777945679104e+00, -3.217889794725961e+00, -3.217889794725961e+00, -6.703110250736887e-01, -6.691647291353860e-01, -6.402769891193840e-01, -6.457040747994973e-01, -6.450687638882701e-01, -6.450687638882701e-01, -1.822223635525436e-01, -1.860168870162959e-01, -7.753633522253548e-01, -1.365067234699304e-01, -1.528487847483385e-01, -1.528487847483385e-01, -1.006077019116348e-02, -1.058460328440572e-02, -5.408896488941781e-02, -5.823339106513538e-03, -7.311553961612176e-03, -7.311553961612175e-03, -4.858743449151167e+00, -4.860549019005835e+00, -4.858825415019154e+00, -4.860419405491925e+00, -4.859659338098214e+00, -4.859659338098214e+00, -1.766628293066015e+00, -1.781551965676600e+00, -1.751624194007409e+00, -1.764763088098733e+00, -1.782203351144726e+00, -1.782203351144726e+00, -6.103290335109809e-01, -6.667216814385990e-01, -5.669675996486165e-01, -5.957109096209805e-01, -6.208483994955474e-01, -6.208483994955474e-01, -1.071165042129107e-01, -1.751781111356352e-01, -1.016720482517517e-01, -1.880430626711997e+00, -1.155538350278668e-01, -1.155538350278668e-01, -4.494571721323505e-03, -5.692611862069099e-03, -4.350667793213956e-03, -7.749686157448704e-02, -5.241287499974829e-03, -5.241287499974823e-03, -6.199587611710711e-01, -6.171810544978977e-01, -6.183101253090859e-01, -6.191217064564414e-01, -6.187296853824538e-01, -6.187296853824538e-01, -6.039868879911620e-01, -5.091546762986499e-01, -5.399837847526467e-01, -5.685883757556343e-01, -5.544066401591715e-01, -5.544066401591715e-01, -6.963780731679102e-01, -2.206368994065532e-01, -2.702862287359135e-01, -3.716883483609579e-01, -3.182206290043312e-01, -3.182206290043312e-01, -4.725033678899068e-01, -5.226856397760293e-02, -6.739470028436056e-02, -3.654015192904071e-01, -8.869397077663972e-02, -8.869397077663974e-02, -1.416255153041719e-02, -1.523052244346301e-03, -3.195827649321300e-03, -8.549939098587628e-02, -4.850116067193506e-03, -4.850116067193502e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_sol0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_sol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.970421620760051e-09, -2.970390764012680e-09, -2.970240712224462e-09, -2.970700060123293e-09, -2.970461198781471e-09, -2.970461198781471e-09, -3.288872208433503e-06, -3.288736090020705e-06, -3.285274040742539e-06, -3.288950386322213e-06, -3.288414302244346e-06, -3.288414302244346e-06, -1.178943928693012e-03, -1.194451612837044e-03, -1.571283109176361e-03, -1.518851819094835e-03, -1.521450894759713e-03, -1.521450894759713e-03, -1.953153393540755e-01, -1.805428712739757e-01, -6.769450346581364e-04, -4.820656134084432e-01, -3.544243275487234e-01, -3.544243275487233e-01, -3.234228312720715e+00, -3.414741023810625e+00, -1.758680093729052e+00, -2.948419459421346e+00, -3.741253939481407e+00, -3.741253939480735e+00, -6.448825229009947e-07, -6.430129013193669e-07, -6.448019997938438e-07, -6.431517099665566e-07, -6.439343143846606e-07, -6.439343143846606e-07, -3.040283397760168e-05, -2.960045866000330e-05, -3.095259163390348e-05, -3.023620632032667e-05, -2.968649759268362e-05, -2.968649759268362e-05, -3.933730546148758e-04, 1.402443165560225e-03, -6.716739583399389e-04, 1.944557386114994e-03, -1.766408337310534e-04, -1.766408337310534e-04, -8.596559952018450e-01, -1.964716352527603e-01, -9.872105480641320e-01, -1.722277464705530e-06, -8.087800394349934e-01, -8.087800394349934e-01, -3.886866882621313e+00, -3.469801811704073e+00, -2.176890309631066e+01, -1.721156157219783e+00, -1.013160595671011e+01, -1.013160595671887e+01, 3.087778193270649e-03, 2.161037325656041e-03, 2.464597455983636e-03, 2.733547109470093e-03, 2.596992456496913e-03, 2.596992456496913e-03, 3.839253758555924e-03, -2.629757990679753e-03, -9.033611283958080e-04, 8.687538610001114e-04, -2.705900851308028e-05, -2.705900851308028e-05, 1.027656872836159e-03, -8.991342573437419e-02, -4.325110856365161e-02, -6.781439156962318e-03, -2.020472693251036e-02, -2.020472693251037e-02, -3.290502176865957e-03, -1.621036465517109e+00, -1.523181220694857e+00, -4.295896637222588e-04, -1.627851578078212e+00, -1.627851578078212e+00, -2.598038604971830e+00, -1.705311936410987e+01, -8.247960076344576e+00, -1.718485364233440e+00, -1.279794310134544e+01, -1.279794310134711e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
