
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1a_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.715558936770189e+01, -1.715562555115191e+01, -1.715581970904151e+01, -1.715528069043627e+01, -1.715555838788800e+01, -1.715555838788800e+01, -2.840513815077577e+00, -2.840500723435601e+00, -2.840267390368536e+00, -2.841208550458209e+00, -2.840566050220707e+00, -2.840566050220707e+00, -5.730741813180757e-01, -5.728178075761510e-01, -5.677645032131281e-01, -5.718723867985991e-01, -5.705912696890549e-01, -5.705912696890549e-01, -1.687309850122593e-01, -1.701902948882855e-01, -6.623637483599623e-01, -1.381954803940913e-01, -1.497455228884165e-01, -1.497455228884165e-01, -5.477630895445822e-03, -5.795235305350566e-03, -3.883660173821674e-02, -3.007913253194222e-03, -3.855436755086936e-03, -3.855436755086935e-03, -4.175254774564276e+00, -4.175427879987991e+00, -4.175268396935157e+00, -4.175421129388504e+00, -4.175339376495630e+00, -4.175339376495630e+00, -1.684148326830025e+00, -1.693248719413240e+00, -1.682252919575800e+00, -1.690237358665636e+00, -1.690152091356368e+00, -1.690152091356368e+00, -4.893261262807840e-01, -5.149787677442330e-01, -4.556297193288723e-01, -4.593606779955693e-01, -4.952858761518175e-01, -4.952858761518175e-01, -1.030983352189547e-01, -1.779862540532416e-01, -9.578658323686962e-02, -1.531341803277694e+00, -1.160611940253784e-01, -1.160611940253784e-01, -2.273396167849654e-03, -2.934943290768632e-03, -2.197128742787722e-03, -6.464649284704679e-02, -2.685377780972489e-03, -2.685377780972489e-03, -4.716493162037859e-01, -4.738551761979262e-01, -4.731210767635504e-01, -4.724536122557221e-01, -4.727911164068726e-01, -4.727911164068726e-01, -4.577421190428843e-01, -4.230545490944252e-01, -4.345131376883034e-01, -4.450629513873522e-01, -4.397291853359698e-01, -4.397291853359698e-01, -5.402931320268117e-01, -2.154866098729096e-01, -2.472616135899765e-01, -3.038650180557372e-01, -2.731951571348553e-01, -2.731951571348553e-01, -3.908147021201479e-01, -3.704480920345302e-02, -5.183174028001060e-02, -2.885753393528183e-01, -8.129819088639627e-02, -8.129819088639630e-02, -8.016270826158422e-03, -7.208382690515219e-04, -1.577629419948980e-03, -7.664653929133680e-02, -2.469593101723075e-03, -2.469593101723069e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1a_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.182363918220875e+01, -2.182371839804930e+01, -2.182405984097447e+01, -2.182288147077825e+01, -2.182350044642028e+01, -2.182350044642028e+01, -3.529440722744411e+00, -3.529473787171841e+00, -3.530323423556126e+00, -3.529512274569427e+00, -3.529565041390246e+00, -3.529565041390246e+00, -6.819283308845543e-01, -6.808880220339638e-01, -6.544303602106472e-01, -6.601470287371556e-01, -6.593148376171505e-01, -6.593148376171505e-01, -1.824473650791050e-01, -1.852050975094403e-01, -7.955105869223479e-01, -1.444946914062324e-01, -1.579629141269512e-01, -1.579629141269512e-01, -7.482109111819613e-03, -7.918001113673643e-03, -5.153830988667966e-02, -4.093700034283668e-03, -5.255372863516415e-03, -5.255372863516411e-03, -5.363515377281615e+00, -5.365212715517202e+00, -5.363593887073081e+00, -5.365092341847971e+00, -5.364375864624042e+00, -5.364375864624042e+00, -1.895616037629765e+00, -1.912927263293545e+00, -1.876966224799171e+00, -1.892287246409069e+00, -1.914180093827707e+00, -1.914180093827707e+00, -6.064350806320564e-01, -6.632106564329795e-01, -5.610376938486562e-01, -5.861013231762709e-01, -6.166504864976704e-01, -6.166504864976704e-01, -1.153480672074011e-01, -1.825183271061314e-01, -1.090493286022387e-01, -1.996571254283589e+00, -1.240995649162953e-01, -1.240995649162953e-01, -3.088279671915173e-03, -3.993681454462648e-03, -2.983581214270671e-03, -7.985232004913757e-02, -3.651540006455680e-03, -3.651540006455685e-03, -6.199545641232771e-01, -6.102692770519352e-01, -6.129561589625627e-01, -6.157173660504665e-01, -6.142651955718835e-01, -6.142651955718835e-01, -6.061777358479338e-01, -5.054556148283756e-01, -5.328381038416850e-01, -5.583478801203957e-01, -5.455447902297476e-01, -5.455447902297476e-01, -6.947409230926116e-01, -2.244095154363063e-01, -2.687052852432002e-01, -3.599579600288130e-01, -3.110247824717245e-01, -3.110247824717245e-01, -4.662219763557831e-01, -4.940551713693201e-02, -6.696895706376717e-02, -3.490406049903105e-01, -9.429437749552613e-02, -9.429437749552615e-02, -1.096866411980118e-02, -9.725278411854881e-04, -2.138043201766679e-03, -9.031960043062183e-02, -3.356243304026736e-03, -3.356243304026732e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1a_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.631285113004788e-09, -2.631248298223658e-09, -2.631087247280827e-09, -2.631634950968967e-09, -2.631347575485580e-09, -2.631347575485580e-09, -4.007780171180087e-06, -4.007749871420326e-06, -4.006661010941779e-06, -4.005495826849055e-06, -4.007354354569903e-06, -4.007354354569903e-06, -2.786126016247098e-03, -2.792296123985511e-03, -2.965592389195636e-03, -2.877009461518160e-03, -2.899847892882470e-03, -2.899847892882470e-03, -3.163810878910545e-01, -3.071022969284849e-01, -1.545628341549473e-03, -5.674496680512489e-01, -4.660409649350016e-01, -4.660409649350015e-01, -8.495481850797537e-01, -9.255539170488001e-01, -1.185366049425724e+00, -5.441048870427472e-01, -8.022049123865362e-01, -8.022049123878929e-01, -7.938221231197383e-07, -7.935952969978127e-07, -7.938075032534672e-07, -7.936071778590443e-07, -7.937081988136815e-07, -7.937081988136815e-07, -3.988807492308832e-05, -3.877768304056542e-05, -4.069841332527862e-05, -3.969523910627384e-05, -3.888749853933535e-05, -3.888749853933535e-05, -5.755329400982105e-03, -6.959050471570858e-03, -7.526851471704307e-03, -1.057295484764389e-02, -5.633987390194566e-03, -5.633987390194566e-03, -8.511545680535363e-01, -2.559287370038255e-01, -9.493578064421427e-01, -5.905453834154902e-05, -8.622848951365119e-01, -8.622848951365119e-01, -6.005866775901870e-01, -6.305312335387016e-01, -3.281009998982788e+00, -1.419108251565335e+00, -1.738819798357579e+00, -1.738819798351457e+00, -1.032628167982144e-02, -1.018284289030325e-02, -1.069072195932814e-02, -1.089903100324000e-02, -1.083544309239965e-02, -1.083544309239965e-02, -8.998695176058164e-03, -9.504037890406348e-03, -9.020521388514642e-03, -9.719684151272582e-03, -9.182207831720648e-03, -9.182207831720648e-03, -5.501204995236294e-03, -1.335097558954419e-01, -7.906019392059604e-02, -3.557216213753438e-02, -5.300761272876318e-02, -5.300761272876321e-02, -1.307388212122852e-02, -1.072122564635896e+00, -1.152046285866702e+00, -4.656199756029042e-02, -1.474654008161173e+00, -1.474654008161168e+00, -8.401575782355806e-01, -1.135793757367374e+00, -9.968168579981002e-01, -1.518581815654307e+00, -2.082031352470266e+00, -2.082031352477466e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
