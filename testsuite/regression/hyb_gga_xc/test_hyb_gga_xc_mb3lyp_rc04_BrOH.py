
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mb3lyp_rc04_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mb3lyp_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.684526185648933e+01, -1.684528256248408e+01, -1.684543373448218e+01, -1.684509349318656e+01, -1.684527228463623e+01, -1.684527228463623e+01, -2.861158990785249e+00, -2.861138814950176e+00, -2.860699087218958e+00, -2.862046715986780e+00, -2.861160462854903e+00, -2.861160462854903e+00, -6.143334666809857e-01, -6.142118444907736e-01, -6.121356069565882e-01, -6.159257847607446e-01, -6.142868170408008e-01, -6.142868170408008e-01, -1.947199571820548e-01, -1.962304489637459e-01, -7.132145114388146e-01, -1.550613352603905e-01, -1.951624834945179e-01, -1.951624834945179e-01, -4.927761743315825e-02, -4.996667145341092e-02, -8.874417006861932e-02, -4.311311258381233e-02, -4.947931504589431e-02, -4.947931504589431e-02, -4.120380331582983e+00, -4.119977160674817e+00, -4.120344012422444e+00, -4.120030445064997e+00, -4.120166605384705e+00, -4.120166605384705e+00, -1.750819815455760e+00, -1.759044036858479e+00, -1.751182216273694e+00, -1.757581632403239e+00, -1.755937657131200e+00, -1.755937657131200e+00, -5.188465416835460e-01, -5.414595225909592e-01, -4.955151280721674e-01, -5.005033702472325e-01, -5.345160380812174e-01, -5.345160380812174e-01, -1.259645379552710e-01, -2.043635625044657e-01, -1.243211656103476e-01, -1.535194864888545e+00, -1.377220087757377e-01, -1.377220087757377e-01, -4.227407519963473e-02, -4.360716567415066e-02, -3.332670919452712e-02, -9.758603695331991e-02, -3.960066429439218e-02, -3.960066429439218e-02, -5.111666044050167e-01, -5.129990837295133e-01, -5.123833064308646e-01, -5.118755209313472e-01, -5.121324514478486e-01, -5.121324514478486e-01, -4.953133122688775e-01, -4.658467175859669e-01, -4.753578645297103e-01, -4.834373255481855e-01, -4.792943537843840e-01, -4.792943537843840e-01, -5.663896553580791e-01, -2.467043562914912e-01, -2.813831408960664e-01, -3.363126757541952e-01, -3.073924970273121e-01, -3.073924970273120e-01, -4.247698547422624e-01, -8.880544146403026e-02, -9.544723509318352e-02, -3.134892822499912e-01, -1.095022964667456e-01, -1.095022964667455e-01, -5.437859902841103e-02, -3.018000205933708e-02, -3.498746616329795e-02, -1.057470208583890e-01, -3.544520488851310e-02, -3.544520488851309e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mb3lyp_rc04_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mb3lyp_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.036938688845467e+01, -2.036945134834505e+01, -2.036975307571334e+01, -2.036869724782492e+01, -2.036942076406049e+01, -2.036942076406049e+01, -3.366346583297972e+00, -3.366370349224215e+00, -3.367158555941156e+00, -3.366494151724488e+00, -3.366372740905782e+00, -3.366372740905782e+00, -6.990193558336402e-01, -6.982392959190542e-01, -6.788464522112410e-01, -6.837547877176651e-01, -6.987351614124885e-01, -6.987351614124885e-01, -2.184292365575266e-01, -2.205242312313422e-01, -8.301402698278070e-01, -1.727580442361011e-01, -2.190438649919677e-01, -2.190438649919677e-01, -2.052908542946182e-02, -2.117038448482400e-02, -6.154142648360537e-02, -1.339623048489866e-02, -2.095796489055681e-02, -2.095796489055681e-02, -5.080099056959775e+00, -5.081929663536132e+00, -5.080286860290437e+00, -5.081710237758259e+00, -5.081036631990463e+00, -5.081036631990463e+00, -1.882642269781069e+00, -1.896351071864883e+00, -1.876015441587518e+00, -1.886679981821324e+00, -1.900630274730510e+00, -1.900630274730510e+00, -6.248579617796670e-01, -6.883649364727348e-01, -5.948997732690017e-01, -6.285400207578413e-01, -6.484754766230970e-01, -6.484754766230970e-01, -1.388903094103776e-01, -2.300913113901167e-01, -1.351798308700716e-01, -1.957687316626251e+00, -1.520551625110899e-01, -1.520551625110899e-01, -1.303979198605514e-02, -1.409517733044544e-02, -1.068260625268946e-02, -8.587752475812289e-02, -1.282336531606298e-02, -1.282336531606297e-02, -6.620942224065283e-01, -6.541654002040870e-01, -6.568852296610455e-01, -6.590739395901822e-01, -6.579688837648413e-01, -6.579688837648413e-01, -6.433368953689603e-01, -5.431633773253367e-01, -5.691585010723462e-01, -5.953778670003926e-01, -5.818087324078043e-01, -5.818087324078044e-01, -7.184117391207960e-01, -2.757209368997126e-01, -3.157850383563482e-01, -3.913939960252336e-01, -3.502185416352294e-01, -3.502185416352293e-01, -4.942502712256433e-01, -5.781598856909092e-02, -7.821137539763121e-02, -3.731018740913400e-01, -1.103209029833178e-01, -1.103209029833178e-01, -2.336163629621921e-02, -6.722546319311781e-03, -9.367318931208454e-03, -1.036515742191481e-01, -1.120947812069616e-02, -1.120947812069616e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mb3lyp_rc04_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mb3lyp_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.214528351566765e-09, -5.214506421853764e-09, -5.214329893808901e-09, -5.214690583652111e-09, -5.214517444397094e-09, -5.214517444397094e-09, -6.753982456667899e-06, -6.754207228337646e-06, -6.759283199137553e-06, -6.744857519271716e-06, -6.753983707853992e-06, -6.753983707853992e-06, -3.660273933175877e-03, -3.658635335795876e-03, -3.580538242651451e-03, -3.499192316302987e-03, -3.659753968869612e-03, -3.659753968869612e-03, -2.899443218859527e-01, -2.892360484099660e-01, -2.047012297121010e-03, -4.263372850808771e-01, -2.899528868946427e-01, -2.899528868946427e-01, -2.015526336227506e+03, -1.767844761576925e+03, -1.865908991374863e+01, -1.493365579524385e+04, -1.841471146809236e+03, -1.841471146809236e+03, -1.559102780925312e-06, -1.560211553649155e-06, -1.559207246507239e-06, -1.560069471967488e-06, -1.559683095843228e-06, -1.559683095843228e-06, -4.975606714719089e-05, -4.881471717048937e-05, -4.971396710814302e-05, -4.897928202514393e-05, -4.917266722931272e-05, -4.917266722931272e-05, -7.963103476801146e-03, -7.455620329268209e-03, -9.572129828314341e-03, -1.006569493656131e-02, -7.133347569405408e-03, -7.133347569405408e-03, -6.050393990892643e-01, -1.614304634448908e-01, -7.551454814229945e-01, -9.393653960410397e-05, -5.873225024690996e-01, -5.873225024690996e-01, -1.683616398715306e+04, -1.148252225077236e+04, -3.535462815563323e+04, -4.984822053626448e+00, -1.674415653835450e+04, -1.674415653835451e+04, -1.010463003735976e-02, -9.441362746099413e-03, -9.642995555394589e-03, -9.822680483598257e-03, -9.729847260879630e-03, -9.729847260879630e-03, -1.169303650072142e-02, -1.165375093670398e-02, -1.129694595968448e-02, -1.114250251742747e-02, -1.121427927660711e-02, -1.121427927660711e-02, -6.130734013789062e-03, -9.792657796907717e-02, -7.057458115678029e-02, -4.276369120259797e-02, -5.607050928626127e-02, -5.607050928626130e-02, -1.682695090642208e-02, -2.316823520811617e+01, -6.897352751340755e+00, -6.073665198465971e-02, -1.904759580870025e+00, -1.904759580870030e+00, -1.181588624710438e+03, -5.577972187257184e+05, -8.400926847205087e+04, -2.655056661267721e+00, -2.972258361088327e+04, -2.972258361088338e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
