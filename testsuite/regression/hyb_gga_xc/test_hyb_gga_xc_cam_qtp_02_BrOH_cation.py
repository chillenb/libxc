
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_02_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_02", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.507906056551291e+01, -1.507908028906757e+01, -1.507921723118385e+01, -1.507892276917359e+01, -1.507907005912201e+01, -1.507907005912201e+01, -2.422654419461753e+00, -2.422630656428901e+00, -2.422142967168673e+00, -2.423469029751672e+00, -2.422686782065833e+00, -2.422686782065833e+00, -3.970225679640056e-01, -3.966970362789404e-01, -3.890199174917768e-01, -3.929024219060884e-01, -3.915854244849244e-01, -3.915854244849244e-01, -3.971167064063804e-02, -4.199909392401667e-02, -4.778474399718857e-01, -9.765063229979460e-03, -3.303292703704448e-02, -3.303292703704443e-02, -1.038456320396710e-03, -1.089499688893374e-03, 5.050876154965726e-05, -6.089473384087648e-04, -4.020986316791164e-04, -4.020986316791164e-04, -3.560867988580112e+00, -3.560453282485209e+00, -3.560856557034174e+00, -3.560490338054807e+00, -3.560653627292500e+00, -3.560653627292500e+00, -1.410548126117103e+00, -1.418600874339745e+00, -1.409409496436598e+00, -1.416538577930880e+00, -1.415543416054203e+00, -1.415543416054203e+00, -3.267906249955616e-01, -3.534922553145683e-01, -2.968838051758159e-01, -3.049639245425021e-01, -3.329043483300897e-01, -3.329043483300897e-01, 1.291378207819415e-02, -3.001812242751040e-02, 1.332621692573957e-02, -1.231362489394754e+00, 1.232076456183756e-03, 1.232076456183756e-03, -4.697757945955122e-04, -5.955225747186432e-04, -4.534099215219219e-04, 8.632753165593700e-03, -4.416813336594940e-04, -4.416813336594940e-04, -3.184104162112816e-01, -3.183767878841333e-01, -3.184188653118215e-01, -3.184269892152353e-01, -3.184253224147372e-01, -3.184253224147372e-01, -3.069696853127255e-01, -2.643844576743690e-01, -2.778441686519365e-01, -2.900972530380172e-01, -2.839220780844195e-01, -2.839220780844195e-01, -3.750105275887081e-01, -6.283316099421749e-02, -9.767715061813653e-02, -1.605326250584607e-01, -1.279079316658043e-01, -1.279079316658043e-01, -2.360342857461387e-01, -3.733348903137989e-04, 6.157554623457771e-03, -1.516451582935845e-01, 8.255671399554416e-03, 8.255671399554411e-03, -1.463870884539599e-03, -1.605925228257584e-04, -3.330886822173240e-04, 8.473059678988204e-03, -4.263822898774162e-04, -4.263822898774159e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_02_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_02", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.810626749228772e+01, -1.810624591007464e+01, -1.810634580262047e+01, -1.810630308017089e+01, -1.810658273071737e+01, -1.810664480832923e+01, -1.810569491629060e+01, -1.810551744801729e+01, -1.810631199726829e+01, -1.810595963032848e+01, -1.810631199726829e+01, -1.810595963032848e+01, -2.880588816219581e+00, -2.880638020399123e+00, -2.880612532681084e+00, -2.880661977381327e+00, -2.881190656004172e+00, -2.881330251011728e+00, -2.880666391701856e+00, -2.880799316867471e+00, -2.880110304287864e+00, -2.881314489959812e+00, -2.880110304287864e+00, -2.881314489959812e+00, -5.147666416328369e-01, -5.151793313796907e-01, -5.142007765768075e-01, -5.146853822836206e-01, -5.027028088868835e-01, -5.028655963987653e-01, -5.071124326815120e-01, -5.070378757578216e-01, -5.082924979804344e-01, -5.111474313196207e-01, -5.082924979804344e-01, -5.111474313196207e-01, -1.081710742660786e-01, -1.070906994603853e-01, -1.090839617385587e-01, -1.080180270373143e-01, -6.022366457283712e-01, -6.143647226397632e-01, -8.440643422082932e-02, -8.445135439044185e-02, -7.687904954110078e-02, -1.071425881305785e-01, -7.687904954110071e-02, -1.071425881305786e-01, -1.585415716259922e-03, -1.206494362290251e-03, -1.694998002982230e-03, -1.243988523679685e-03, -6.652353283866767e-03, -6.072581960807242e-03, -7.798052071164788e-04, -8.411401288579280e-04, -2.082487377531519e-04, -2.307355236390335e-03, -2.082487377531519e-04, -2.307355236390335e-03, -4.415775128696809e+00, -4.414715928458778e+00, -4.417506589005979e+00, -4.416392592648977e+00, -4.415870515698130e+00, -4.414775153914349e+00, -4.417359203886848e+00, -4.416295170187729e+00, -4.416660771136580e+00, -4.415558494970609e+00, -4.416660771136580e+00, -4.415558494970609e+00, -1.571065381767838e+00, -1.570998819877858e+00, -1.583298097916796e+00, -1.582937981762980e+00, -1.560544800913969e+00, -1.562435659645386e+00, -1.571062507264330e+00, -1.573115044589999e+00, -1.585127883099714e+00, -1.579728950596626e+00, -1.585127883099714e+00, -1.579728950596626e+00, -4.417608900905834e-01, -4.408335191901261e-01, -4.876611696192775e-01, -4.878668980614123e-01, -3.986604917941393e-01, -4.088438569562824e-01, -4.170708412705113e-01, -4.282647847249471e-01, -4.580622614861213e-01, -4.403473516293566e-01, -4.580622614861213e-01, -4.403473516293567e-01, -5.955757639688165e-02, -5.908270346709663e-02, -1.234371194115490e-01, -1.233619935174204e-01, -5.227839464187647e-02, -5.218639231730722e-02, -1.614848280729763e+00, -1.614192147654210e+00, -6.874487355186637e-02, -6.304103517515497e-02, -6.874487355186637e-02, -6.304103517515497e-02, -6.824542966018532e-04, -5.738074549737870e-04, -8.193060408370544e-04, -7.656845869048419e-04, -6.883316053164720e-04, -5.316411239255085e-04, -2.298713637298829e-02, -2.324398777909671e-02, -1.288846796518753e-03, -3.167362225356350e-04, -1.288846796518753e-03, -3.167362225356350e-04, -4.464180049769139e-01, -4.478796322685610e-01, -4.419386288689577e-01, -4.433675960287246e-01, -4.434329302536102e-01, -4.448796266980650e-01, -4.447341013409163e-01, -4.461791682918723e-01, -4.440756379052738e-01, -4.455216136491144e-01, -4.440756379052738e-01, -4.455216136491144e-01, -4.328513900878352e-01, -4.340530753189362e-01, -3.631195596751169e-01, -3.639626713160563e-01, -3.800631961100803e-01, -3.811254570510862e-01, -3.990732856550504e-01, -4.001390667152902e-01, -3.890754363731930e-01, -3.901232380793624e-01, -3.890754363731930e-01, -3.901232380793624e-01, -5.143259685544210e-01, -5.150686151322541e-01, -1.575133675836954e-01, -1.573539609330431e-01, -1.855444918778441e-01, -1.851554205738390e-01, -2.404182506077650e-01, -2.410280348052461e-01, -2.094214382733298e-01, -2.091332860042410e-01, -2.094214382733297e-01, -2.091332860042410e-01, -3.298482988639635e-01, -3.309092459982159e-01, -5.770229409281556e-03, -5.690943235438491e-03, -1.331649058499102e-02, -1.332910765231076e-02, -2.254365446815005e-01, -2.270672576761914e-01, -3.737436570235884e-02, -3.525884029681232e-02, -3.737436570235882e-02, -3.525884029681230e-02, -2.105162027403385e-03, -1.794408295355834e-03, -2.150571495944521e-04, -2.128575803736238e-04, -5.110378726451997e-04, -3.871943235775329e-04, -3.247904092094873e-02, -3.257556264506163e-02, -1.140823425851645e-03, -3.228153008566070e-04, -1.140823425851644e-03, -3.228153008566068e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_02_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_02", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.027432536981257e-08, 1.463652377038497e-11, -1.027438312167347e-08, -1.027426882910096e-08, 1.463631512328463e-11, -1.027434144640990e-08, -1.027395845466415e-08, 1.463532316351641e-11, -1.027393625744633e-08, -1.027460753183673e-08, 1.463842899785011e-11, -1.027475424276222e-08, -1.027430203381621e-08, 1.463681083685537e-11, -1.027433064714798e-08, -1.027430203381621e-08, 1.463681083685537e-11, -1.027433064714798e-08, -1.229875585345366e-05, 1.902747638536065e-07, -1.230343293240031e-05, -1.229912540107936e-05, 1.902725761814505e-07, -1.230414562346249e-05, -1.231144146615784e-05, 1.901971754504621e-07, -1.231453597583564e-05, -1.228226165531647e-05, 1.901358235030523e-07, -1.228617244813607e-05, -1.230405613589207e-05, 1.902491360705296e-07, -1.229712942817747e-05, -1.230405613589207e-05, 1.902491360705296e-07, -1.229712942817747e-05, -4.043982279399080e-03, 1.144533678933034e-03, -4.128608899750728e-03, -4.026969256897189e-03, 1.151156568500561e-03, -4.131015524835921e-03, -3.935554701858909e-03, 1.320750241138922e-03, -3.779918062127929e-03, -3.765083577574507e-03, 1.265386257803329e-03, -3.814660524141517e-03, -4.514680748733992e-03, 1.376562597771172e-03, -2.982007973864362e-03, -4.514680748733992e-03, 1.376562597771172e-03, -2.982007973864362e-03, 3.687979101715773e-01, 6.012876550391961e-01, 2.521114584275317e-01, 3.501533204500313e-01, 5.680272535784819e-01, 2.239107675424320e-01, -2.559181630126284e-03, 5.322727974273029e-04, -2.672124268208625e-03, 1.033585626242904e+00, 1.675901373768304e+00, 9.396855833409929e-01, -1.190038261071331e-01, 2.382014110698246e+00, 2.060497903513392e+00, -1.190038261071325e-01, 2.382014110698246e+00, 2.060497903513391e+00, -3.979823657054934e-05, 1.111914508308031e-07, -4.663074264480488e-05, -4.665905808514837e-05, 4.562559950974850e-07, -5.608691190102406e-05, 1.057970920670168e+01, 1.838627425311693e+01, 9.306669548901148e+00, -9.284259339708210e-06, 4.136895542502456e-17, -8.695278086385092e-06, -2.916168400650790e-05, 1.070835888305008e-12, -1.175212378087860e-05, -2.916168400643824e-05, 1.070835888305008e-12, -1.175212378084199e-05, -2.927988849049777e-06, 2.233703107768369e-08, -2.930379277453614e-06, -2.930239426699839e-06, 2.231537777319893e-08, -2.932552053414300e-06, -2.928084387050186e-06, 2.233595490630417e-08, -2.930430074477858e-06, -2.930012225695025e-06, 2.231683364972891e-08, -2.932407765509013e-06, -2.929165188120316e-06, 2.232609670798167e-08, -2.931473366427240e-06, -2.929165188120316e-06, 2.232609670798167e-08, -2.931473366427240e-06, -8.325023814250344e-05, 4.104557134069705e-06, -8.325965276154288e-05, -8.173948078070932e-05, 3.949027730077658e-06, -8.178296777571927e-05, -8.308866226299331e-05, 4.223201907834492e-06, -8.329645328865402e-05, -8.178492304363059e-05, 4.080707689470805e-06, -8.195813891580906e-05, -8.259453037764109e-05, 3.966397450084659e-06, -8.231869688273561e-05, -8.259453037764109e-05, 3.966397450084659e-06, -8.231869688273561e-05, -7.829506110641895e-03, 2.253646609880290e-03, -7.849761751442199e-03, -8.008257217847859e-03, 1.482953633834817e-03, -8.035358306236372e-03, -9.313583451512095e-03, 3.393155540240489e-03, -9.556144713886265e-03, -1.143655118266954e-02, 2.786872153422916e-03, -1.097566967232231e-02, -7.646086031368097e-03, 2.171399762139616e-03, -7.868370621037617e-03, -7.646086031368095e-03, 2.171399762139616e-03, -7.868370621037613e-03, 3.227192452794230e+00, 5.364331359216309e+00, 3.071583525158204e+00, 3.384530609674096e-01, 5.928062603673171e-01, 3.234675769428766e-01, 4.366326137789818e+00, 6.670630325612285e+00, 3.378556150992180e+00, -1.580380948280518e-04, 4.550774239056777e-06, -1.582948808512648e-04, 2.310367252746524e+00, 3.362374819306393e+00, 1.638070535870803e+00, 2.310367252746524e+00, 3.362374819306393e+00, 1.638070535870803e+00, -5.292184239500253e-06, 5.421496698436063e-24, -5.327474341516817e-06, -9.514336256504034e-06, 1.228758886113335e-17, -9.385343109442658e-06, -1.416911917741404e-05, 5.656440620065503e-25, -1.785207132702327e-05, 8.555443805083396e+00, 1.504669301565768e+01, 8.369274065057315e+00, -9.274422690984797e-06, 9.610322787727072e-20, -2.194514426085493e-05, -9.274422691253098e-06, 9.610322787727070e-20, -2.194514426086507e-05, -1.147505675934346e-02, 2.199677179191681e-03, -1.142927190422123e-02, -1.053996819595767e-02, 2.264286130145305e-03, -1.051352103991369e-02, -1.082277395673622e-02, 2.241303100651475e-03, -1.079236214278458e-02, -1.109213116922047e-02, 2.222568983976134e-03, -1.105169706346466e-02, -1.095329843012805e-02, 2.231922961512953e-03, -1.091791290737548e-02, -1.095329843012805e-02, 2.231922961512953e-03, -1.091791290737548e-02, -1.301752645425201e-02, 2.525278278664052e-03, -1.295514530287501e-02, -9.902778152333562e-03, 5.397863529116129e-03, -1.002490512833172e-02, -1.055513486877860e-02, 4.298036410666330e-03, -1.063876526149818e-02, -1.126353380042928e-02, 3.458400931093935e-03, -1.126659761790767e-02, -1.092437104711332e-02, 3.860241852276062e-03, -1.094430181717518e-02, -1.092437104711332e-02, 3.860241852276062e-03, -1.094430181717518e-02, -6.783958760444185e-03, 1.166454564355177e-03, -6.806569487856184e-03, 1.057788295370844e-01, 2.273047300256539e-01, 9.789716045324147e-02, 2.714016591425849e-02, 1.027440095908986e-01, 2.014226513766205e-02, -1.627583488138393e-02, 2.883676467546989e-02, -1.720700889797470e-02, -4.843133816084200e-03, 5.500747727544229e-02, -4.916197024679568e-03, -4.843133816084137e-03, 5.500747727544231e-02, -4.916197024679630e-03, -1.181713133223379e-02, 8.100714365057125e-03, -1.215857682027422e-02, 9.618972294055769e+00, 1.766533536733120e+01, 9.472159117575986e+00, 1.087969275573339e+01, 1.878803243082290e+01, 9.859254925222904e+00, -2.095638676307289e-02, 3.428914672188251e-02, -2.390691150416182e-02, 6.205500818462085e+00, 9.701438036301546e+00, 4.893529849244636e+00, 6.205500818462081e+00, 9.701438036301546e+00, 4.893529849244626e+00, 8.625068326868653e-05, 3.417478728614279e-04, 7.350397148060560e-05, -5.882520936284791e-07, 2.850114531961813e-85, -8.863534875414349e-07, -3.087200622334534e-06, 1.662312648545182e-36, -3.830586784613187e-06, 6.510018906030966e+00, 1.102889579754806e+01, 6.086483048475042e+00, -1.315777800251972e-05, 8.178814636871498e-22, -1.772849928025720e-05, -1.315777800170110e-05, 8.178814636871070e-22, -1.772849928056628e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
