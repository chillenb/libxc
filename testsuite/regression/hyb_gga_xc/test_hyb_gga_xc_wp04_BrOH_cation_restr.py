
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wp04_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.119931530376948e+01, -2.119934328414012e+01, -2.119953504228457e+01, -2.119911736099480e+01, -2.119932663806928e+01, -2.119932663806928e+01, -3.616374896032171e+00, -3.616338331424843e+00, -3.615579129154536e+00, -3.617566129515623e+00, -3.616415723368888e+00, -3.616415723368888e+00, -7.853609705882935e-01, -7.853115763484000e-01, -7.859300848599171e-01, -7.909465654915889e-01, -7.890772142233260e-01, -7.890772142233260e-01, -2.712242123975100e-01, -2.722718818405791e-01, -8.975282386174788e-01, -2.399377798557160e-01, -2.505978893255110e-01, -2.505978893255110e-01, -7.129342918189971e-02, -7.161050093923367e-02, -1.365807842957262e-01, -6.323965772251817e-02, -6.394094643327192e-02, -6.394094643327188e-02, -5.196212871133181e+00, -5.195581485765540e+00, -5.196194726524485e+00, -5.195637183405566e+00, -5.195886890662867e+00, -5.195886890662867e+00, -2.229396430709992e+00, -2.239634860335687e+00, -2.230169647954467e+00, -2.239197897757166e+00, -2.234686436523048e+00, -2.234686436523048e+00, -6.661824858736012e-01, -6.900883166130031e-01, -6.248607360322955e-01, -6.215064878468398e-01, -6.724260345402252e-01, -6.724260345402252e-01, -2.066118508440810e-01, -2.920103309783225e-01, -1.981295593809673e-01, -1.933826233332676e+00, -2.141885354078785e-01, -2.141885354078785e-01, -5.662933387872220e-02, -6.102675761264725e-02, -4.083619100093860e-02, -1.618076260450968e-01, -4.913832512437575e-02, -4.913832512437577e-02, -6.351780316959371e-01, -6.388445305157315e-01, -6.376143951071236e-01, -6.365455281522724e-01, -6.370848282060553e-01, -6.370848282060553e-01, -6.173891635052381e-01, -5.903854866012579e-01, -5.988188964158999e-01, -6.063921343094082e-01, -6.024110568044629e-01, -6.024110568044629e-01, -7.217669745913359e-01, -3.378135807127107e-01, -3.744805291886855e-01, -4.365823215909861e-01, -4.026584963931757e-01, -4.026584963931756e-01, -5.488240989019466e-01, -1.360740004354921e-01, -1.529265291381849e-01, -4.124977179564543e-01, -1.755388817340350e-01, -1.755388817340350e-01, -8.142612926679697e-02, -3.406828496662804e-02, -4.553952064661948e-02, -1.710538175121131e-01, -4.619733997624901e-02, -4.619733997624897e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wp04_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.545480880242657e+01, -2.545490289936282e+01, -2.545530518005557e+01, -2.545390554785818e+01, -2.545464120344250e+01, -2.545464120344250e+01, -4.210601529439866e+00, -4.210640109537930e+00, -4.211633073004601e+00, -4.210685583903605e+00, -4.210746551496377e+00, -4.210746551496377e+00, -8.650429854359055e-01, -8.637845491207145e-01, -8.336255924429873e-01, -8.403909589064136e-01, -8.392828252537214e-01, -8.392828252537214e-01, -2.513360864637030e-01, -2.547333291467462e-01, -1.001092011044341e+00, -2.004819545619266e-01, -2.196554733088386e-01, -2.196554733088386e-01, -2.826442715125204e-02, -2.899585203292817e-02, -8.306790857890016e-02, -2.089743235120741e-02, -2.325983780374934e-02, -2.325983780374938e-02, -6.369254980125786e+00, -6.371736423794808e+00, -6.369367152095878e+00, -6.371557774156200e+00, -6.370513542923510e+00, -6.370513542923510e+00, -2.336412762935717e+00, -2.354719033404575e+00, -2.319981838876894e+00, -2.336084603497036e+00, -2.354569837821841e+00, -2.354569837821841e+00, -7.822343593158647e-01, -8.685541507558677e-01, -7.256931590174477e-01, -7.727623842113394e-01, -7.964029077604952e-01, -7.964029077604952e-01, -1.542563345377305e-01, -2.517049981869748e-01, -1.459284797493765e-01, -2.458707399999256e+00, -1.712092445165687e-01, -1.712092445165687e-01, -1.768949661181865e-02, -2.034118345395399e-02, -1.495851634330410e-02, -1.112156755852195e-01, -1.772745169178960e-02, -1.772745169178964e-02, -8.167028695361576e-01, -8.046722124919630e-01, -8.087291980390955e-01, -8.122154430783646e-01, -8.104553264653960e-01, -8.104553264653960e-01, -7.989208743363726e-01, -6.529308798731733e-01, -6.906574196605652e-01, -7.309809476547634e-01, -7.101358094996070e-01, -7.101358094996070e-01, -9.060314711251787e-01, -3.069780695088700e-01, -3.618845809962720e-01, -4.751935154857794e-01, -4.133992856058793e-01, -4.133992856058792e-01, -6.053302123231690e-01, -8.129515539270148e-02, -9.818601490553346e-02, -4.652187908786053e-01, -1.292535603429218e-01, -1.292535603429218e-01, -3.507733388260785e-02, -8.629570685428517e-03, -1.369425663299717e-02, -1.240113701259359e-01, -1.663188670833978e-02, -1.663188670833973e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wp04_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wp04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.983825353726642e-09, -6.983791403060737e-09, -6.983545913067672e-09, -6.984052999383844e-09, -6.983800728804135e-09, -6.983800728804135e-09, -9.227098256907464e-06, -9.227484738352707e-06, -9.235525431201036e-06, -9.214558139655962e-06, -9.226671933701323e-06, -9.226671933701323e-06, -5.771328142869054e-03, -5.774798981835437e-03, -5.825151408487322e-03, -5.662649047911444e-03, -5.718542877613828e-03, -5.718542877613828e-03, -7.365475894821978e-01, -7.165862460952537e-01, -3.232305970215975e-03, -1.492185424503515e+00, -1.133791732354716e+00, -1.133791732354716e+00, -9.744429690133100e+03, -8.545028949878479e+03, -5.699103113852664e+01, -4.598697293823786e+04, -2.548577224790725e+04, -2.548577224790727e+04, -2.105441763676067e-06, -2.106941044579655e-06, -2.105490389649052e-06, -2.106814123685982e-06, -2.106211825189382e-06, -2.106211825189382e-06, -7.030164621580239e-05, -6.886278746268267e-05, -7.046909285156215e-05, -6.918840623303215e-05, -6.942806563709218e-05, -6.942806563709218e-05, -1.180335610348485e-02, -1.055520220580607e-02, -1.560233012146194e-02, -1.651141840108826e-02, -1.135524017461419e-02, -1.135524017461419e-02, -3.826663789900580e+00, -5.749719063907170e-01, -4.838155066484430e+00, -1.291426401627128e-04, -2.750524516668198e+00, -2.750524516668198e+00, -1.048922679067608e+05, -5.137940039570402e+04, -1.861855684938356e+05, -1.572700970717800e+01, -8.790209701294130e+04, -8.790209701294125e+04, -1.575419953358618e-02, -1.483637262956750e-02, -1.510794318008317e-02, -1.536942009092291e-02, -1.523395778551506e-02, -1.523395778551506e-02, -1.816534441593550e-02, -2.005834168170028e-02, -1.880091337677529e-02, -1.800542236522008e-02, -1.838133333074901e-02, -1.838133333074901e-02, -8.643056646711996e-03, -2.763546034398799e-01, -1.632175557426601e-01, -7.681694974967496e-02, -1.129695375420233e-01, -1.129695375420233e-01, -2.769024508347747e-02, -6.260262142487895e+01, -2.653067859401196e+01, -9.861948435532415e-02, -8.584441498016476e+00, -8.584441498016476e+00, -3.415381198664378e+03, -3.609433334774973e+06, -3.461921118742300e+05, -1.015752262323599e+01, -1.173458513842246e+05, -1.173458513842250e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
