
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe50_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.052365142247541e+01, -1.052366408914109e+01, -1.052375776338494e+01, -1.052354960361387e+01, -1.052365779177629e+01, -1.052365779177629e+01, -1.778103517752979e+00, -1.778092995663111e+00, -1.777875771878152e+00, -1.778618922687636e+00, -1.778105507900301e+00, -1.778105507900301e+00, -3.750183809320655e-01, -3.748305949248129e-01, -3.710513405910107e-01, -3.734641940091109e-01, -3.749488464062048e-01, -3.749488464062048e-01, -1.174602984173604e-01, -1.185654041302691e-01, -4.391920415384470e-01, -9.254250981089558e-02, -1.177848840237465e-01, -1.177848840237465e-01, -8.503680770265382e-03, -8.904997059057842e-03, -3.524728467838574e-02, -4.087809717665051e-03, -8.812245082007354e-03, -8.812245082007354e-03, -2.575069719199078e+00, -2.574974984985715e+00, -2.575062664169975e+00, -2.574988945749411e+00, -2.575017105678175e+00, -2.575017105678175e+00, -1.077560884615685e+00, -1.082751288320794e+00, -1.077741068442735e+00, -1.081772664744612e+00, -1.080883893319206e+00, -1.080883893319206e+00, -3.259382317756568e-01, -3.540801057730066e-01, -3.109085414099079e-01, -3.248450274917428e-01, -3.372272468845481e-01, -3.372272468845481e-01, -7.305821960153346e-02, -1.231552501369874e-01, -7.182393078175575e-02, -9.775301882393406e-01, -8.129206457918378e-02, -8.129206457918378e-02, -3.943537165685761e-03, -4.506167282172418e-03, -3.377498667464923e-03, -4.784679792238958e-02, -4.105794592318072e-03, -4.105794592318072e-03, -3.408124112064843e-01, -3.371013223968758e-01, -3.383485762872713e-01, -3.393732810635884e-01, -3.388537252281748e-01, -3.388537252281748e-01, -3.315734315203405e-01, -2.873273143070164e-01, -2.979524997946878e-01, -3.091793585226861e-01, -3.032702951658121e-01, -3.032702951658121e-01, -3.690219772987015e-01, -1.484902676696243e-01, -1.698552382413261e-01, -2.078043110830850e-01, -1.872799799890190e-01, -1.872799799890189e-01, -2.618373525182062e-01, -3.284562211763989e-02, -4.362765173740504e-02, -1.975431827805036e-01, -6.020537646556381e-02, -6.020537646556381e-02, -9.961457801113391e-03, -1.234395375157178e-03, -2.344568219696132e-03, -5.741336482601395e-02, -3.489657316345887e-03, -3.489657316345880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe50_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.269819118497422e+01, -1.269823551886897e+01, -1.269843580079521e+01, -1.269770977361360e+01, -1.269821454427253e+01, -1.269821454427253e+01, -2.127454468932145e+00, -2.127478831093355e+00, -2.128232071620269e+00, -2.127363821928659e+00, -2.127475627001548e+00, -2.127475627001548e+00, -4.527691011345457e-01, -4.518996798462778e-01, -4.289748452222809e-01, -4.325459830509448e-01, -4.524541626780760e-01, -4.524541626780760e-01, -1.391826746381638e-01, -1.418868001766818e-01, -5.443054503251400e-01, -1.006479349867280e-01, -1.400030279076946e-01, -1.400030279076946e-01, -1.128148742762883e-02, -1.180811067173410e-02, -4.446468111518184e-02, -5.445071106894724e-03, -1.168524558010402e-02, -1.168524558010402e-02, -3.227927467769278e+00, -3.229444450961965e+00, -3.228082117459858e+00, -3.229261660655347e+00, -3.228705926865555e+00, -3.228705926865555e+00, -1.164608470663380e+00, -1.173965161045221e+00, -1.159258762768685e+00, -1.166508363170423e+00, -1.178083988981873e+00, -1.178083988981873e+00, -4.235015077769061e-01, -4.661249113084502e-01, -4.036630252071689e-01, -4.285843643787573e-01, -4.399460250192317e-01, -4.399460250192317e-01, -8.229821555775915e-02, -1.334130580930342e-01, -8.064707843923136e-02, -1.283746095724238e+00, -8.908674409037548e-02, -8.908674409037548e-02, -5.253109470294164e-03, -6.000849297962874e-03, -4.498079884780539e-03, -5.772963765971603e-02, -5.467615061324272e-03, -5.467615061324269e-03, -4.442273194180943e-01, -4.432488080557874e-01, -4.438419266122661e-01, -4.441258685746903e-01, -4.440041765092608e-01, -4.440041765092608e-01, -4.310700635435709e-01, -3.628914268185632e-01, -3.865929809580350e-01, -4.072054351221894e-01, -3.970728315503688e-01, -3.970728315503688e-01, -4.860840131079213e-01, -1.651970622405313e-01, -1.989499832920204e-01, -2.652450208418289e-01, -2.303522145881307e-01, -2.303522145881307e-01, -3.309842020173221e-01, -4.189406803832214e-02, -5.381244173596888e-02, -2.593941759047760e-01, -6.914893668405736e-02, -6.914893668405737e-02, -1.320292906894802e-02, -1.645661181323095e-03, -3.124824730116694e-03, -6.597512790794889e-02, -4.647846364761928e-03, -4.647846364761917e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe50_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.333169786042017e-09, -3.333145351049717e-09, -3.333002043387517e-09, -3.333402848693980e-09, -3.333157186578595e-09, -3.333157186578595e-09, -3.678804842031410e-06, -3.678736469661042e-06, -3.676275571817755e-06, -3.677583162349982e-06, -3.678711146171876e-06, -3.678711146171876e-06, -1.335087109403179e-03, -1.349311868052544e-03, -1.687582169721679e-03, -1.636659897629847e-03, -1.340240526644092e-03, -1.340240526644092e-03, -1.152321939156910e-01, -1.042047300432172e-01, -6.051949952321735e-04, -3.308114352539280e-01, -1.118505138628662e-01, -1.118505138628662e-01, -2.533008875099999e+00, -2.537614336480128e+00, -1.005569381088304e+00, -1.809592106913899e+00, -2.636048878336155e+00, -2.636048878336155e+00, -7.561187838230754e-07, -7.544058292994653e-07, -7.559457861164073e-07, -7.546140406988331e-07, -7.552412451454489e-07, -7.552412451454489e-07, -3.063097108430637e-05, -2.995911658485336e-05, -3.075565443083021e-05, -3.023366025908729e-05, -2.999348228252996e-05, -2.999348228252996e-05, -5.160280780082405e-05, 2.817983882259626e-03, -9.592223697989233e-05, 3.081318455347872e-03, 2.194720413611082e-04, 2.194720413611082e-04, -4.772138654638585e-01, -1.243175572087751e-01, -5.373015540776399e-01, 7.574249423558121e-07, -4.563153450471576e-01, -4.563153450471576e-01, -1.919872684172022e+00, -1.922437696456615e+00, -5.501237576927502e+00, -9.355187322082577e-01, -2.839056552498298e+00, -2.839056552498019e+00, 5.548831371433277e-03, 3.967796912980435e-03, 4.481499281013357e-03, 4.917192980881304e-03, 4.694891055686885e-03, 4.694891055686885e-03, 6.729237533825478e-03, -2.033485636428019e-03, -1.436602978809164e-04, 1.936551132063990e-03, 8.525467167725259e-04, 8.525467167725294e-04, 2.105632012548989e-03, -6.068433421586296e-02, -3.083081917094224e-02, -4.242653910132559e-03, -1.475859016232269e-02, -1.475859016232271e-02, -2.744736350295757e-03, -8.617594835003494e-01, -8.305985688866322e-01, 6.007544150288320e-03, -8.262702613519034e-01, -8.262702613519052e-01, -1.900742565779411e+00, -3.317106394958415e+00, -2.853314204819418e+00, -1.003794057186259e+00, -4.147402877354643e+00, -4.147402877355463e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
