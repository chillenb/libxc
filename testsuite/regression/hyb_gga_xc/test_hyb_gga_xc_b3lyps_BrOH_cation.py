
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyps_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.782812734969332e+01, -1.782815392294660e+01, -1.782832410851310e+01, -1.782792767911108e+01, -1.782812800116432e+01, -1.782812800116432e+01, -3.006603147023431e+00, -3.006577196228336e+00, -3.006049413550235e+00, -3.007526346632926e+00, -3.006643223765034e+00, -3.006643223765034e+00, -6.316964440137323e-01, -6.315104761421176e-01, -6.279713714312127e-01, -6.323349668236357e-01, -6.315485924314473e-01, -6.315485924314473e-01, -1.920616160514791e-01, -1.938303602183090e-01, -7.267463112780385e-01, -1.576362574249446e-01, -1.839964799296094e-01, -1.839964799296093e-01, -4.996932143083378e-02, -5.010451543328828e-02, -9.073027103813316e-02, -4.493796677216957e-02, -4.572162432866336e-02, -4.572162432866333e-02, -4.348734169814341e+00, -4.348363582956430e+00, -4.348725552047806e+00, -4.348398268832963e+00, -4.348541743628119e+00, -4.348541743628119e+00, -1.825356367145031e+00, -1.834517509972398e+00, -1.824492007178133e+00, -1.832582825467261e+00, -1.830848567435661e+00, -1.830848567435661e+00, -5.380968342790455e-01, -5.631283492017720e-01, -5.028781075658069e-01, -5.049156717220683e-01, -5.444932211192138e-01, -5.444932211192138e-01, -1.239173625789618e-01, -1.988302233233145e-01, -1.185608788800818e-01, -1.609337969485267e+00, -1.358273606942025e-01, -1.358273606942025e-01, -4.038962264910956e-02, -4.332479471148597e-02, -2.860441091185527e-02, -9.947979691668278e-02, -3.472860106836154e-02, -3.472860106836156e-02, -5.182309302035943e-01, -5.201042949327543e-01, -5.194910831742253e-01, -5.189441909279929e-01, -5.192213461626243e-01, -5.192213461626243e-01, -5.035995592033532e-01, -4.697334057191640e-01, -4.803496389374993e-01, -4.899823420828714e-01, -4.850380852330127e-01, -4.850380852330127e-01, -5.895775325736958e-01, -2.411566458413436e-01, -2.780219628180660e-01, -3.405160432920769e-01, -3.073328862086515e-01, -3.073328862086516e-01, -4.349048631039288e-01, -9.089885868948992e-02, -9.641766555037767e-02, -3.232419506546296e-01, -1.078286110461171e-01, -1.078286110461171e-01, -5.682536226461078e-02, -2.462510356586241e-02, -3.252865329237261e-02, -1.049139411991876e-01, -3.264894061581470e-02, -3.264894061581469e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyps_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.168453861719559e+01, -2.168451270965774e+01, -2.168462853100856e+01, -2.168457831747823e+01, -2.168490417602618e+01, -2.168497499873237e+01, -2.168388516952634e+01, -2.168368056216238e+01, -2.168459006857486e+01, -2.168419056273116e+01, -2.168459006857486e+01, -2.168419056273116e+01, -3.566357616448857e+00, -3.566426244870783e+00, -3.566385696324919e+00, -3.566455217303315e+00, -3.567077533026285e+00, -3.567254337314047e+00, -3.566448068149194e+00, -3.566618255701963e+00, -3.565776613422760e+00, -3.567243630590494e+00, -3.565776613422760e+00, -3.567243630590494e+00, -7.285682627470588e-01, -7.305987745930060e-01, -7.274561599304886e-01, -7.299256422646552e-01, -7.091619927555946e-01, -7.065342272643290e-01, -7.129394448987145e-01, -7.137757703797488e-01, -7.271492186779823e-01, -7.022201750084998e-01, -7.271492186779823e-01, -7.022201750084998e-01, -2.140508493803026e-01, -2.154228778444052e-01, -2.159187428776907e-01, -2.176875333230486e-01, -8.331870092129000e-01, -8.542991406491474e-01, -1.769218377431446e-01, -1.775543621842791e-01, -1.877758349129892e-01, -1.846918559597727e-01, -1.877758349129891e-01, -1.846918559597727e-01, -1.699828413748235e-02, -1.711486020724186e-02, -1.742976937657691e-02, -1.754827476056683e-02, -5.356985089337163e-02, -5.432657551654180e-02, -1.267861747816833e-02, -1.268695722585864e-02, -1.455288445712253e-02, -1.225584468838889e-02, -1.455288445712251e-02, -1.225584468838888e-02, -5.391325523651020e+00, -5.390066437599861e+00, -5.393307281250121e+00, -5.391984543975215e+00, -5.391435355150946e+00, -5.390134157962622e+00, -5.393138520634539e+00, -5.391873808135156e+00, -5.392339130847200e+00, -5.391030125404186e+00, -5.392339130847200e+00, -5.391030125404186e+00, -1.989523746279929e+00, -1.989438923307440e+00, -2.004738956484683e+00, -2.004272753928442e+00, -1.975282945287936e+00, -1.978361125724132e+00, -1.988401768412951e+00, -1.991651728275244e+00, -2.008076055423495e+00, -1.999921147644946e+00, -2.008076055423495e+00, -1.999921147644946e+00, -6.525176338187336e-01, -6.513631610021701e-01, -7.184672374660417e-01, -7.188855324216918e-01, -5.973956225152858e-01, -6.123106847766325e-01, -6.314468034903923e-01, -6.456712369970722e-01, -6.746096899456341e-01, -6.510762425181266e-01, -6.746096899456341e-01, -6.510762425181267e-01, -1.375816531353410e-01, -1.374498635767238e-01, -2.262350826429029e-01, -2.264013654394464e-01, -1.266631465702915e-01, -1.284744247321563e-01, -2.062245147781407e+00, -2.061465195913227e+00, -1.517998945179502e-01, -1.487140239237588e-01, -1.517998945179502e-01, -1.487140239237588e-01, -1.061645595228729e-02, -1.086043930764143e-02, -1.224151309401571e-02, -1.237530822323072e-02, -8.767009907149221e-03, -8.740696750777018e-03, -8.436779266626755e-02, -8.490098567068949e-02, -1.020165133653766e-02, -1.069258487113018e-02, -1.020165133653768e-02, -1.069258487113018e-02, -6.721395718839533e-01, -6.740616622502802e-01, -6.636259383077692e-01, -6.655541738074662e-01, -6.664800825823209e-01, -6.684222521218800e-01, -6.689605941942942e-01, -6.708717703501534e-01, -6.677074937952673e-01, -6.696339313944577e-01, -6.677074937952673e-01, -6.696339313944577e-01, -6.568196541487606e-01, -6.583632586191305e-01, -5.473604707740871e-01, -5.488271962187814e-01, -5.749532551402644e-01, -5.766914179152569e-01, -6.051817261902668e-01, -6.066722066007455e-01, -5.895266295894183e-01, -5.910205980226773e-01, -5.895266295894183e-01, -5.910205980226773e-01, -7.500021372558372e-01, -7.511797013621111e-01, -2.709391543908287e-01, -2.711804677550475e-01, -3.115675199826440e-01, -3.122368632078906e-01, -3.964088771391412e-01, -3.975621931061549e-01, -3.497456869614166e-01, -3.495906666056602e-01, -3.497456869614166e-01, -3.495906666056602e-01, -5.065872430584952e-01, -5.086619911197352e-01, -5.236069479714713e-02, -5.244502839179307e-02, -6.860400874127871e-02, -6.941946477781184e-02, -3.833297660629930e-01, -3.865181317993359e-01, -1.057342111174243e-01, -1.052081201900884e-01, -1.057342111174243e-01, -1.052081201900883e-01, -2.136776104139004e-02, -2.138314795993127e-02, -5.542944716404472e-03, -5.128186785131798e-03, -8.269589030078989e-03, -8.293813564040768e-03, -9.915711790246533e-02, -9.983555595590499e-02, -9.114971079094676e-03, -1.019622028215564e-02, -9.114971079094687e-03, -1.019622028215563e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyps_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyps", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.043401602249309e-08, 1.185558425401183e-11, -1.043407505857723e-08, -1.043395782851073e-08, 1.185541524986055e-11, -1.043403228730844e-08, -1.043364085111230e-08, 1.185461176244829e-11, -1.043361737800369e-08, -1.043430726173668e-08, 1.185712748825859e-11, -1.043445901963862e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.358064788891638e-05, 1.541225587214213e-07, -1.358577088276538e-05, -1.358103965629732e-05, 1.541207867069750e-07, -1.358654212396425e-05, -1.359428505024676e-05, 1.540597121148743e-07, -1.359756006350432e-05, -1.356249691843990e-05, 1.540100170374724e-07, -1.356668218543393e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -7.792259255394369e-03, 9.270722799357577e-04, -7.849951520308237e-03, -7.786461986509554e-03, 9.324368204854546e-04, -7.857131339723945e-03, -7.832736409582442e-03, 1.069807695322527e-03, -7.733242440070735e-03, -7.559812284896936e-03, 1.024962868820697e-03, -7.593914356376238e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.015022929288295e-01, 4.870430005817489e-01, -7.816385693227824e-01, -7.925801894797767e-01, 4.601020753985704e-01, -7.665752528935305e-01, -4.505851044012250e-03, 4.311409659161154e-04, -4.390509886285057e-03, -1.405355168870086e+00, 1.357480112752327e+00, -1.380998360113386e+00, -1.027527050921904e+00, 1.929431429665579e+00, -3.898047502256749e+00, -1.027527050921904e+00, 1.929431429665580e+00, -3.898047502256753e+00, -1.601233046657358e+04, 9.006507517295055e-08, -1.341327593453690e+04, -1.420990979929685e+04, 3.695673560289628e-07, -1.164774806483721e+04, -8.370059792973863e+01, 1.489288214502471e+01, -7.190430426370420e+01, -6.750537472164971e+04, 3.350885389426989e-17, -7.031007753052439e+04, -2.221427161418409e+04, 8.673770695270562e-13, -1.460208813509680e+05, -2.221427161418411e+04, 8.673770695270562e-13, -1.460208813509680e+05, -3.120937442842174e-06, 1.809299517292379e-08, -3.123583621634334e-06, -3.123251342613206e-06, 1.807545599629114e-08, -3.125818583373952e-06, -3.121034151413480e-06, 1.809212347410638e-08, -3.123635403204407e-06, -3.123017007873502e-06, 1.807663525628042e-08, -3.125668909910377e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -1.010635912347755e-04, 3.324691278596461e-06, -1.010779524700931e-04, -9.903149681292247e-05, 3.198712461362903e-06, -9.909978705291323e-05, -1.011475640512280e-04, 3.420793545345939e-06, -1.012672271456375e-04, -9.938724522915006e-05, 3.305373228471352e-06, -9.946546298030040e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -1.605154024547233e-02, 1.825453754003035e-03, -1.619117711055979e-02, -1.474343620688189e-02, 1.201192443406202e-03, -1.477479346054838e-02, -2.204666172622624e-02, 2.748455987594796e-03, -2.031678606014923e-02, -2.418338119192188e-02, 2.257366444272562e-03, -2.171147066780003e-02, -1.455920912893613e-02, 1.758833807333089e-03, -1.681843677980908e-02, -1.455920912893614e-02, 1.758833807333089e-03, -1.681843677980908e-02, -3.150401852206798e+00, 4.345108400965211e+00, -3.170434965885433e+00, -5.502177821396236e-01, 4.801730708975269e-01, -5.493965502748231e-01, -4.262172914865188e+00, 5.403210563745951e+00, -4.000430924985834e+00, -1.886068550772652e-04, 3.686127133635989e-06, -1.889444393377877e-04, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -1.699411089643476e+05, 4.391412325733211e-24, -1.460796247556560e+05, -7.954666730295906e+04, 9.952946977518016e-18, -7.449506296332044e+04, -2.990717847119347e+05, 4.581716902253058e-25, -2.612737931159296e+05, -1.696004532565848e+01, 1.218782134268272e+01, -1.643550682122481e+01, -2.313967161586600e+05, 7.784361458058929e-20, -9.240488802955455e+04, -2.313967161586598e+05, 7.784361458058927e-20, -9.240488802955452e+04, -2.219495429854996e-02, 1.781738515145262e-03, -2.195509733342586e-02, -2.076312885154710e-02, 1.834071765417697e-03, -2.055303334584081e-02, -2.118788746189437e-02, 1.815455511527695e-03, -2.097177410252597e-02, -2.159933539387829e-02, 1.800280877020669e-03, -2.136816452351270e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.560950998573218e-02, 2.045475405717882e-03, -2.533979798454380e-02, -2.658669298607634e-02, 4.372269458584065e-03, -2.639619554799486e-02, -2.539317146300312e-02, 3.481409492639727e-03, -2.519928883854928e-02, -2.474558936546363e-02, 2.801304754186088e-03, -2.452658703155491e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -1.210663724077704e-02, 9.448281971276932e-04, -1.210774703956818e-02, -2.896818500974693e-01, 1.841168313207797e-01, -2.893079402659515e-01, -1.863619421801817e-01, 8.322264776862785e-02, -1.860558812379716e-01, -9.818708946814067e-02, 2.335777938713061e-02, -9.716063264790924e-02, -1.367145607178618e-01, 4.455605659310826e-02, -1.373866162956502e-01, -1.367145607178618e-01, 4.455605659310827e-02, -1.373866162956503e-01, -3.643622074116785e-02, 6.561578635696272e-03, -3.608494043291562e-02, -8.685719210089600e+01, 1.430892164753827e+01, -8.522852476782363e+01, -3.265583822645921e+01, 1.521830626896655e+01, -3.015511765247127e+01, -1.291093042631665e-01, 2.777420884472484e-02, -1.254546410894600e-01, -8.387690733914193e+00, 7.858164809404253e+00, -8.331015966778173e+00, -8.387690733914191e+00, 7.858164809404253e+00, -8.331015966778182e+00, -5.373095280702843e+03, 2.768157770177566e-04, -4.881149980613249e+03, -5.023960912792954e+06, 2.308592770889069e-85, -5.846008400586689e+06, -5.637392051558921e+05, 1.346473245321597e-36, -4.801493238580819e+05, -1.031515996738637e+01, 8.933405596013928e+00, -9.898975829389819e+00, -3.312813801870204e+05, 6.624839855865914e-22, -1.199647090775366e+05, -3.312813801870212e+05, 6.624839855865567e-22, -1.199647090775370e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
