
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_qtp17_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.620989801217530e+00, -7.621008162715147e+00, -7.621103466424578e+00, -7.620802522517196e+00, -7.620999372529776e+00, -7.620999372529776e+00, -1.298825538201012e+00, -1.298828732234097e+00, -1.298967424218482e+00, -1.298990612366165e+00, -1.298832450214936e+00, -1.298832450214936e+00, -2.808112312256912e-01, -2.804676101744683e-01, -2.711206488872093e-01, -2.732116405627572e-01, -2.806863814838582e-01, -2.806863814838582e-01, -8.218767073820592e-02, -8.381444916468851e-02, -3.326904667135709e-01, -5.174499248324609e-02, -8.268721460913010e-02, -8.268721460913010e-02, -7.462578633503549e-03, -7.773063879481692e-03, -1.882960631236923e-02, -3.894829552750440e-03, -7.701818994284200e-03, -7.701818994284200e-03, -1.913525125684467e+00, -1.913867520132891e+00, -1.913561172693978e+00, -1.913827389232102e+00, -1.913699269312903e+00, -1.913699269312903e+00, -7.494668779183976e-01, -7.546325982119078e-01, -7.471576269080339e-01, -7.511958265070470e-01, -7.559389768886138e-01, -7.559389768886138e-01, -2.517675301494687e-01, -2.734009227179381e-01, -2.401307173629377e-01, -2.514724920995654e-01, -2.607428271630853e-01, -2.607428271630853e-01, -3.041646262797749e-02, -7.420880691506207e-02, -3.163963248144142e-02, -7.446623932591420e-01, -4.111165613668189e-02, -4.111165613668189e-02, -3.771906481769706e-03, -4.248438964453043e-03, -3.284380069370059e-03, -2.121499174659081e-02, -3.910556722925770e-03, -3.910556722925770e-03, -2.619384115414080e-01, -2.602117142212487e-01, -2.608316294092233e-01, -2.613095123490698e-01, -2.610704876798104e-01, -2.610704876798104e-01, -2.546393489718528e-01, -2.194621284175190e-01, -2.300767468558547e-01, -2.396616678304730e-01, -2.348272690852091e-01, -2.348272690852091e-01, -2.849602781240993e-01, -9.816448218509299e-02, -1.209015221709239e-01, -1.584621617881656e-01, -1.392179499319151e-01, -1.392179499319151e-01, -1.998288174613165e-01, -1.800933559219418e-02, -1.891284195394371e-02, -1.524090513209981e-01, -2.748988424052609e-02, -2.748988424052609e-02, -8.578863600232267e-03, -1.318038838514833e-03, -2.364428062360962e-03, -2.786308732995361e-02, -3.381712496867660e-03, -3.381712496867654e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_qtp17_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.014040027220502e+01, -1.014042456340318e+01, -1.014055104504008e+01, -1.014015290582583e+01, -1.014041293115029e+01, -1.014041293115029e+01, -1.720841124131089e+00, -1.720843558061540e+00, -1.720978149081772e+00, -1.721094650064170e+00, -1.720849377463725e+00, -1.720849377463725e+00, -3.842128514282919e-01, -3.840098205022346e-01, -3.794363602254914e-01, -3.817351774660014e-01, -3.841380296578379e-01, -3.841380296578379e-01, -1.342456928885009e-01, -1.349859680576125e-01, -4.461757911656038e-01, -1.118725282733383e-01, -1.344539298010047e-01, -1.344539298010047e-01, -9.650581587935183e-03, -1.005044436753185e-02, -3.482626605897014e-02, -5.052458281816147e-03, -9.958700085797717e-03, -9.958700085797717e-03, -2.533300501944056e+00, -2.533712854009992e+00, -2.533344141222863e+00, -2.533664746543671e+00, -2.533509890364156e+00, -2.533509890364156e+00, -1.009131829486969e+00, -1.015314005155614e+00, -1.007007438570908e+00, -1.011822306778280e+00, -1.016090398871662e+00, -1.016090398871662e+00, -3.348364704133794e-01, -3.558434982736144e-01, -3.202634699023220e-01, -3.286231819610634e-01, -3.453237518776909e-01, -3.453237518776909e-01, -9.131661335496591e-02, -1.462409539920232e-01, -8.858499201512474e-02, -9.765839204250600e-01, -9.937252000316991e-02, -9.937252000316991e-02, -4.893879265894185e-03, -5.508546417405611e-03, -4.264742358026260e-03, -5.310823445482710e-02, -5.072746123872542e-03, -5.072746123872542e-03, -3.391300566068021e-01, -3.383436918346413e-01, -3.386243644565375e-01, -3.388412959501173e-01, -3.387324922292455e-01, -3.387324922292455e-01, -3.293906277512601e-01, -2.993663058112359e-01, -3.077039644556888e-01, -3.157317913955207e-01, -3.115751837530202e-01, -3.115751837530202e-01, -3.711625032992105e-01, -1.701876851575366e-01, -1.887115283658599e-01, -2.212963286753879e-01, -2.034836056621761e-01, -2.034836056621761e-01, -2.746058926990318e-01, -3.171022619268446e-02, -4.697794689499294e-02, -2.081996003327792e-01, -7.113026548321300e-02, -7.113026548321298e-02, -1.108757496565636e-02, -1.721471571541028e-03, -3.076404717518209e-03, -6.644673043540548e-02, -4.390374161951124e-03, -4.390374161951119e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_qtp17_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.598645926157701e-11, 1.598626420250149e-11, 1.598525039346161e-11, 1.598844754537473e-11, 1.598635759448015e-11, 1.598635759448015e-11, 1.552828294108906e-07, 1.552811694298970e-07, 1.552030067207827e-07, 1.551700994650159e-07, 1.552786062843972e-07, 1.552786062843972e-07, 6.550635666516760e-04, 6.583689738318362e-04, 7.513762219867858e-04, 7.230981223240096e-04, 6.562668472063534e-04, 6.562668472063534e-04, 2.242325812356681e-01, 2.128794021225887e-01, 2.681503808596966e-04, 7.370695456601370e-01, 2.207540101079233e-01, 2.207540101079233e-01, 2.793609229968816e-03, 5.439027777018247e-03, 8.076604644363305e+00, 5.149606962624891e-11, 4.695808732769433e-03, 4.695808732769433e-03, 1.997205174796031e-08, 1.995402332064397e-08, 1.997014868037339e-08, 1.995613131323236e-08, 1.996288606492813e-08, 1.996288606492813e-08, 2.925776472074592e-06, 2.822948817941036e-06, 2.968611091515899e-06, 2.886573728863925e-06, 2.802875640556062e-06, 2.802875640556062e-06, 1.286842770466390e-03, 8.606821386999878e-04, 1.658043124763813e-03, 1.352802687287579e-03, 1.071707243126912e-03, 1.071707243126912e-03, 1.967288486044426e+00, 2.180377416497414e-01, 2.041451848820476e+00, 3.229088310383727e-06, 1.266535174743049e+00, 1.266535174743049e+00, 1.360438059347745e-11, 1.466275790823736e-09, 2.282846162206223e-14, 5.830259645757812e+00, 6.064484185833271e-11, 6.064484185833271e-11, 1.105159026742524e-03, 1.134265994099658e-03, 1.123728231463753e-03, 1.115677820249034e-03, 1.119698464576895e-03, 1.119698464576895e-03, 1.294617354887688e-03, 2.564921776582571e-03, 2.082039571621089e-03, 1.727931687286449e-03, 1.898576329613523e-03, 1.898576329613523e-03, 6.828033814001390e-04, 8.589053377858462e-02, 4.119268707834031e-02, 1.378713710501239e-02, 2.397249847225798e-02, 2.397249847225800e-02, 4.186565810881808e-03, 8.142101433892623e+00, 6.776628538730518e+00, 1.782865925310840e-02, 3.415549076163391e+00, 3.415549076163389e+00, 2.318261855932760e-02, 7.274066945305917e-50, 3.842561020871040e-23, 3.810910153626611e+00, 9.635757897666074e-14, 9.635757897665454e-14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
