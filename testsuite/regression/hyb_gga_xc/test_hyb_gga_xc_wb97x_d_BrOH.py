
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.628985086477829e+01, -1.628987025624643e+01, -1.629001503770120e+01, -1.628969633771172e+01, -1.628986060408176e+01, -1.628986060408176e+01, -2.676281172266012e+00, -2.676260641435246e+00, -2.675808663084648e+00, -2.677163565443088e+00, -2.676282177466189e+00, -2.676282177466189e+00, -4.917024147044389e-01, -4.915864762485500e-01, -4.891058898783492e-01, -4.927732436686560e-01, -4.916580729501660e-01, -4.916580729501660e-01, -1.012197122203656e-01, -1.029483982357576e-01, -5.859810052192258e-01, -7.015979878877264e-02, -1.017312021653902e-01, -1.017312021653902e-01, 7.258016079583285e-03, 7.510322983408335e-03, 1.367611949237010e-03, 3.911983814010059e-03, 7.449801680099697e-03, 7.449801680099697e-03, -3.907255511096126e+00, -3.906993515336055e+00, -3.907233073209049e+00, -3.907029259593228e+00, -3.907114436669825e+00, -3.907114436669825e+00, -1.595063815874881e+00, -1.603173705595713e+00, -1.595309789476431e+00, -1.601629326727505e+00, -1.600223799013682e+00, -1.600223799013682e+00, -4.013423413643276e-01, -4.356102361685834e-01, -3.791711667755173e-01, -3.927513402892458e-01, -4.167811689813012e-01, -4.167811689813012e-01, -5.379276790429291e-02, -1.110930481449991e-01, -5.017142764320194e-02, -1.400951205780358e+00, -5.873826017138650e-02, -5.873826017138650e-02, 3.785589715517581e-03, 4.271385997672491e-03, 3.276369059541607e-03, -1.538633426437610e-02, 3.923870031056184e-03, 3.923870031056193e-03, -4.024584303409494e-01, -4.089396023830407e-01, -4.081563206153723e-01, -4.062719892920865e-01, -4.073705138554899e-01, -4.073705138554899e-01, -3.869692525520369e-01, -3.511054306331191e-01, -3.601209570794810e-01, -3.708152049414138e-01, -3.646892257334919e-01, -3.646892257334919e-01, -4.588951591899872e-01, -1.461612396082941e-01, -1.784177417537969e-01, -2.313012948189684e-01, -2.040442690097559e-01, -2.040442690097556e-01, -3.127819130115983e-01, 3.960925237884349e-03, -9.441983073269633e-03, -2.107850575366737e-01, -3.253040117613905e-02, -3.253040117613923e-02, 8.159328168289728e-03, 1.251693810559958e-03, 2.327257241838413e-03, -2.763155521439270e-02, 3.378742138458461e-03, 3.378742138458474e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.964035666690675e+01, -1.964042631004947e+01, -1.964074006559761e+01, -1.963959959690439e+01, -1.964039336871546e+01, -1.964039336871546e+01, -3.155737452390279e+00, -3.155771277013454e+00, -3.156833946647792e+00, -3.155677066217967e+00, -3.155768332393006e+00, -3.155768332393006e+00, -5.723296351054395e-01, -5.718438195241663e-01, -5.616027012525701e-01, -5.659082023406581e-01, -5.721506446227550e-01, -5.721506446227550e-01, -1.389334629030876e-01, -1.426738778431609e-01, -6.950333264867166e-01, -3.631758835698276e-02, -1.401362128487972e-01, -1.401362128487972e-01, 8.759003686341135e-03, 8.986257751740351e-03, -1.077795467869637e-02, 5.063644323305362e-03, 8.922943876284381e-03, 8.922943876284381e-03, -4.886860097207345e+00, -4.889483678238894e+00, -4.887127206020020e+00, -4.889167237899083e+00, -4.888207607841753e+00, -4.888207607841753e+00, -1.732467004892543e+00, -1.744970525099531e+00, -1.727010276350869e+00, -1.736883021938512e+00, -1.747640331335126e+00, -1.747640331335126e+00, -5.108974736967810e-01, -5.890898933958117e-01, -4.796523166888274e-01, -5.449766331893859e-01, -5.398948159709662e-01, -5.398948159709662e-01, -1.073765042188788e-02, -8.856278211445294e-02, -1.141599703174836e-02, -1.835327839697138e+00, -1.482981869293847e-02, -1.482981869293847e-02, 4.906020739591827e-03, 5.502687657627187e-03, 4.251535323215093e-03, -2.264941008638746e-02, 5.066914065157127e-03, 5.066914065157332e-03, -5.359594326420848e-01, -5.488540710232621e-01, -5.370609232787814e-01, -5.297313300880113e-01, -5.328013498347408e-01, -5.328013498347408e-01, -5.304810736968769e-01, -4.221391325414374e-01, -4.531464797552606e-01, -5.017291659027658e-01, -4.750637317671720e-01, -4.750637317671705e-01, -6.228696876514673e-01, -1.652225812226452e-01, -2.248654665193975e-01, -2.835355937986188e-01, -2.546133891460663e-01, -2.546133891460705e-01, -3.768686613538014e-01, -7.099595861978468e-03, -2.142737015242297e-02, -2.656125414265614e-01, -1.801304194830871e-02, -1.801304194830879e-02, 9.611734686809467e-03, 1.658329528642656e-03, 3.057623048873611e-03, -1.825775424996362e-02, 4.384880006228955e-03, 4.384880006229099e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.267410289026388e-09, -5.267371140445605e-09, -5.267142141671072e-09, -5.267784244425041e-09, -5.267390097769945e-09, -5.267390097769945e-09, -6.809881128687528e-06, -6.809941539815798e-06, -6.810447349790389e-06, -6.803827723003296e-06, -6.809797818398954e-06, -6.809797818398954e-06, -3.495742255303388e-03, -3.485514033064935e-03, -3.162744961491088e-03, -3.104463028880640e-03, -3.492147532217898e-03, -3.492147532217898e-03, -1.057048522980696e-01, -9.258027426736359e-02, -2.023653526591697e-03, -1.210467175862028e+00, -1.010767665115579e-01, -1.010767665115579e-01, 1.825077153762112e+01, 1.805910502520948e+01, -1.666970796115820e-02, 1.479267459926369e+01, 1.881428440890680e+01, 1.881428440890680e+01, -1.339117116534912e-06, -1.336056044643820e-06, -1.338807108149309e-06, -1.336427112157760e-06, -1.337547323168493e-06, -1.337547323168493e-06, -4.766788088882476e-05, -4.687034806354938e-05, -4.751780705313762e-05, -4.687967839726645e-05, -4.738053606003603e-05, -4.738053606003603e-05, -6.105208268868506e-03, -2.098583017317870e-03, -7.740390831117328e-03, 2.463655168143606e-03, -4.596033149987455e-03, -4.596033149987455e-03, -2.925542676728841e+00, -3.516056026875892e-01, -3.028199021991061e+00, -6.051870325418155e-05, -2.153865420796254e+00, -2.153865420796254e+00, 1.575836425079598e+01, 1.553302839474107e+01, 4.591344392017962e+01, -2.892653295193464e+00, 2.320264543563687e+01, 2.320264543555275e+01, -2.592242369140042e-02, -5.820212801496813e-03, -1.561582472057216e-02, -2.553174337928283e-02, -2.054382658359258e-02, -2.054382658359260e-02, -7.370721314038257e-04, -1.115870692468176e-02, -9.497532923813327e-03, -2.764471628969628e-03, -7.012833744512037e-03, -7.012833744512274e-03, -7.837867360526762e-04, -1.026746013727646e-01, -4.297950295929682e-02, -3.705782738094563e-02, -3.809985510429607e-02, -3.809985510429361e-02, -1.579985924081438e-02, 5.526376789098104e-01, -1.924389989059034e+00, -5.267349562070305e-02, -3.751992998819444e+00, -3.751992998819563e+00, 1.307621608860791e+01, 2.960534668433429e+01, 2.454044773696229e+01, -3.925180964824037e+00, 3.449713126120137e+01, 3.449713126138234e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
