
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_00_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.705877765575364e+00, -9.705890333246744e+00, -9.705977762942721e+00, -9.705790130225287e+00, -9.705883958494484e+00, -9.705883958494484e+00, -1.608184465979959e+00, -1.608168885062314e+00, -1.607848283928218e+00, -1.608712598913314e+00, -1.608204743323258e+00, -1.608204743323258e+00, -2.998006609642294e-01, -2.996050875286011e-01, -2.950496486553736e-01, -2.975976798327991e-01, -2.968870672836393e-01, -2.968870672836393e-01, -5.259645796987033e-02, -5.425980339991755e-02, -3.528828326008252e-01, -2.897518599565473e-02, -3.867451223372949e-02, -3.867451223372948e-02, -7.436027924824794e-03, -7.511706630665126e-03, -1.310214627273483e-02, -6.321432918673354e-03, -6.511196518410287e-03, -6.511196518410284e-03, -2.337235281255182e+00, -2.336961285347092e+00, -2.337227612726298e+00, -2.336985659177240e+00, -2.337093713227100e+00, -2.337093713227100e+00, -9.592966777916991e-01, -9.644288191097221e-01, -9.586971693239034e-01, -9.632398949621319e-01, -9.624134736283838e-01, -9.624134736283838e-01, -2.521942525878498e-01, -2.691235747208743e-01, -2.321959982744807e-01, -2.367591434017282e-01, -2.558826529851975e-01, -2.558826529851975e-01, -9.267512738946207e-03, -4.675778427200449e-02, -8.147333436288810e-03, -8.406410616303912e-01, -1.891042026122439e-02, -1.891042026122439e-02, -5.595572867856543e-03, -6.103607873533153e-03, -4.106098124467166e-03, -8.774485013891159e-03, -4.954260908919843e-03, -4.954260908919845e-03, -2.454719249128879e-01, -2.456892304162188e-01, -2.456352971664090e-01, -2.455710422725858e-01, -2.456049796616932e-01, -2.456049796616932e-01, -2.377434386696089e-01, -2.110903037343905e-01, -2.195979771679341e-01, -2.272700472037130e-01, -2.234031964554724e-01, -2.234031964554724e-01, -2.834561643294258e-01, -7.191152606140686e-02, -9.693296511272904e-02, -1.400466440650858e-01, -1.178371381499950e-01, -1.178371381499949e-01, -1.919031407990745e-01, -1.337633448165406e-02, -9.849858119358056e-03, -1.332925806286392e-01, -1.031562954036380e-02, -1.031562954036379e-02, -8.748192357970459e-03, -3.266897022580480e-03, -4.457602660372712e-03, -9.757493857640765e-03, -4.647508083056620e-03, -4.647508083056616e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_00_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.163744002699768e+01, -1.163748337542569e+01, -1.163766845589680e+01, -1.163702368086838e+01, -1.163736261291941e+01, -1.163736261291941e+01, -1.897853913255320e+00, -1.897869509052859e+00, -1.898276325021534e+00, -1.897925452130767e+00, -1.897917804730956e+00, -1.897917804730956e+00, -3.736245064297177e-01, -3.732638960303534e-01, -3.654204598661286e-01, -3.682578047880089e-01, -3.675562499668401e-01, -3.675562499668401e-01, -9.974734833266700e-02, -1.003729109642794e-01, -4.345532665493389e-01, -8.248854103037791e-02, -8.832968035165623e-02, -8.832968035165624e-02, -3.699184952464683e-03, -3.830110268560770e-03, -1.337941263840897e-02, -2.516530123642768e-03, -2.908097920742349e-03, -2.908097920742353e-03, -2.881980933848797e+00, -2.883082164735225e+00, -2.882030853678991e+00, -2.883003018153008e+00, -2.882539374428624e+00, -2.882539374428624e+00, -1.055981540416802e+00, -1.063776294947395e+00, -1.049793215369671e+00, -1.056627237010462e+00, -1.063339566607167e+00, -1.063339566607167e+00, -3.259207885526945e-01, -3.574437565907504e-01, -3.010974555696556e-01, -3.145064676795876e-01, -3.313696027999030e-01, -3.313696027999030e-01, -6.151472952175221e-02, -1.121583920339375e-01, -5.552810926926482e-02, -1.086671753337184e+00, -6.716869347942513e-02, -6.716869347942513e-02, -2.068427597881947e-03, -2.449765615296650e-03, -1.797500326122207e-03, -2.949072827331285e-02, -2.154853848422534e-03, -2.154853848422538e-03, -3.311395393001054e-01, -3.278187196645476e-01, -3.289264939371679e-01, -3.298871764537000e-01, -3.294008591004621e-01, -3.294008591004621e-01, -3.222432071399235e-01, -2.740542394912763e-01, -2.856973011747226e-01, -2.987837334381994e-01, -2.918913646391182e-01, -2.918913646391182e-01, -3.750550219201601e-01, -1.358599973214622e-01, -1.544819340707748e-01, -1.919639071559121e-01, -1.705480219616833e-01, -1.705480219616833e-01, -2.520397863981954e-01, -1.268204413656137e-02, -2.046587027074930e-02, -1.823940387427697e-01, -4.151224601301719e-02, -4.151224601301719e-02, -4.828756623157406e-03, -9.178593696735931e-04, -1.555746941124128e-03, -3.808205337986292e-02, -2.008869536848264e-03, -2.008869536848257e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_00_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_00", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.291397645359126e-09, -3.291381911843770e-09, -3.291267243005897e-09, -3.291502257030244e-09, -3.291385467758228e-09, -3.291385467758228e-09, -3.985746944257422e-06, -3.985924427675914e-06, -3.989652220148024e-06, -3.980235878146624e-06, -3.985585947059850e-06, -3.985585947059850e-06, -1.319604741439468e-03, -1.316196613136977e-03, -1.213866621885477e-03, -1.194777916788084e-03, -1.206534652246461e-03, -1.206534652246461e-03, 1.759233016717093e-01, 1.616284285728931e-01, -8.547318491717700e-04, 5.893656773948808e-01, 3.655289730903787e-01, 3.655289730903789e-01, -9.122099969926526e+02, -7.999299230507085e+02, 2.326882922460920e+00, -4.305000591216873e+03, -2.385811848411225e+03, -2.385811848411226e+03, -9.460412134092229e-07, -9.467616745359299e-07, -9.460650908045418e-07, -9.467011906370213e-07, -9.464110028898200e-07, -9.464110028898200e-07, -2.695758254870024e-05, -2.648129777441875e-05, -2.691905614706422e-05, -2.649865247841748e-05, -2.671257896739525e-05, -2.671257896739525e-05, -2.619256090373614e-03, -2.756748606000192e-03, -3.133717424485174e-03, -3.858710676642903e-03, -2.592064921599479e-03, -2.592064921599479e-03, 1.973087305780984e+00, 1.982378212268706e-01, 2.417316559341896e+00, -5.196818857961555e-05, 1.192892690068986e+00, 1.192892690068986e+00, -9.819330262055752e+03, -4.809804493208296e+03, -1.742947906333038e+04, 4.921245512094865e+00, -8.228821237891420e+03, -8.228821237891416e+03, -4.003834077548090e-03, -3.644576770066205e-03, -3.753818227347589e-03, -3.856433267905100e-03, -3.803539688307538e-03, -3.803539688307538e-03, -4.571402424629856e-03, -3.154728647469302e-03, -3.503537252569500e-03, -3.835165876985272e-03, -3.673100588746760e-03, -3.673100588746760e-03, -2.324705616604256e-03, 6.288495008165300e-02, 1.813716792005970e-02, -4.433437066317538e-03, 2.274418877350772e-03, 2.274418877350771e-03, -3.737293314284741e-03, 1.490751562750705e+00, 5.420352610902127e+00, -6.830438105157492e-03, 3.341780642611695e+00, 3.341780642611696e+00, -3.197256255743485e+02, -3.378916165280457e+05, -3.240824846078885e+04, 3.772077479636837e+00, -1.098515355852545e+04, -1.098515355852549e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
