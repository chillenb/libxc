
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.266928516578613e+00, -9.266939751816144e+00, -9.267022452314677e+00, -9.266837823996243e+00, -9.266934169342720e+00, -9.266934169342720e+00, -1.569696019900034e+00, -1.569687259635222e+00, -1.569509845929347e+00, -1.570140185391256e+00, -1.569698028420177e+00, -1.569698028420177e+00, -3.331222383852158e-01, -3.329306203279611e-01, -3.289279482331160e-01, -3.310858453996485e-01, -3.330515398215851e-01, -3.330515398215851e-01, -1.044305955549509e-01, -1.054851912067925e-01, -3.904320286916379e-01, -8.172231758215387e-02, -1.047415002350073e-01, -1.047415002350073e-01, -7.483253973951541e-03, -7.836415827089872e-03, -3.102139042978900e-02, -3.597272918414673e-03, -7.754793921418699e-03, -7.754793921418699e-03, -2.273095527603777e+00, -2.273036746728402e+00, -2.273091770851080e+00, -2.273046014829953e+00, -2.273061899562900e+00, -2.273061899562900e+00, -9.507089498946355e-01, -9.553302255875376e-01, -9.507930352226734e-01, -9.543821246403300e-01, -9.537698227480965e-01, -9.537698227480965e-01, -2.915015516935409e-01, -3.183531489588489e-01, -2.781031296294580e-01, -2.919862470825130e-01, -3.017332263123686e-01, -3.017332263123686e-01, -6.436491494729116e-02, -1.088854457385265e-01, -6.328623206483353e-02, -8.688468967126993e-01, -7.169880357998272e-02, -7.169880357998272e-02, -3.470313035361979e-03, -3.965427820296506e-03, -2.972199288424838e-03, -4.212125400940112e-02, -3.613099829627326e-03, -3.613099829627326e-03, -3.072947708281157e-01, -3.034145076549757e-01, -3.047215752234291e-01, -3.057932941949452e-01, -3.052501930029856e-01, -3.052501930029856e-01, -2.991878910805271e-01, -2.563228693275805e-01, -2.665508281669584e-01, -2.774229611352897e-01, -2.717050470799212e-01, -2.717050470799212e-01, -3.315028887570305e-01, -1.315465370128011e-01, -1.509195889981544e-01, -1.857968572919217e-01, -1.669299298308551e-01, -1.669299298308551e-01, -2.336944831074786e-01, -2.890641846050638e-02, -3.840089413110932e-02, -1.773512771117570e-01, -5.303200339645526e-02, -5.303200339645526e-02, -8.766105724151832e-03, -1.086267932544777e-03, -2.063220076541706e-03, -5.057571129033819e-02, -3.070898842703543e-03, -3.070898842703537e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.118966666378516e+01, -1.118970578607345e+01, -1.118988236240484e+01, -1.118924168556361e+01, -1.118968727846713e+01, -1.118968727846713e+01, -1.885254329756128e+00, -1.885276365011739e+00, -1.885955642913651e+00, -1.885163455097085e+00, -1.885273259298716e+00, -1.885273259298716e+00, -4.076135812400196e-01, -4.068127472661375e-01, -3.855539886577483e-01, -3.887655346112202e-01, -4.073235927212745e-01, -4.073235927212745e-01, -1.267772296157222e-01, -1.293784041602631e-01, -4.893338481603701e-01, -9.005427373872271e-02, -1.275684874799118e-01, -1.275684874799118e-01, -9.927805599305135e-03, -1.039125681800712e-02, -3.915262573502149e-02, -4.791664972689691e-03, -1.028313447295255e-02, -1.028313447295255e-02, -2.856099236396481e+00, -2.857455468330574e+00, -2.856237456283248e+00, -2.857292006604878e+00, -2.856795263014800e+00, -2.856795263014800e+00, -1.033602852128066e+00, -1.041956613433570e+00, -1.028727960210758e+00, -1.035202045928390e+00, -1.045759066786759e+00, -1.045759066786759e+00, -3.827854881263775e-01, -4.201228989212966e-01, -3.651410581754293e-01, -3.870325018192027e-01, -3.974201077536397e-01, -3.974201077536397e-01, -7.284963421507529e-02, -1.198665081283257e-01, -7.143748239932290e-02, -1.143840807034756e+00, -7.928681672767489e-02, -7.928681672767489e-02, -4.622738489140153e-03, -5.280751380109826e-03, -3.958313316888021e-03, -5.090036969000524e-02, -4.811505100348381e-03, -4.811505100348379e-03, -3.999991328024740e-01, -3.996966932950672e-01, -4.000512936013836e-01, -4.001480033474126e-01, -4.001202732107567e-01, -4.001202732107567e-01, -3.881877762507775e-01, -3.285008783650254e-01, -3.499500251021108e-01, -3.682788110839570e-01, -3.593211026176600e-01, -3.593211026176600e-01, -4.379228099074569e-01, -1.491937139017769e-01, -1.805536540028909e-01, -2.414669961839158e-01, -2.096062792956140e-01, -2.096062792956139e-01, -3.000728684402865e-01, -3.688110192786503e-02, -4.740797758295658e-02, -2.365669402009540e-01, -6.115310856743782e-02, -6.115310856743784e-02, -1.161872565500680e-02, -1.448181855420103e-03, -2.749846046142230e-03, -5.836385192863350e-02, -4.090107447343224e-03, -4.090107447343214e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.910054524398103e-09, -2.910032656020841e-09, -2.909906052796717e-09, -2.910264724139816e-09, -2.910043234558451e-09, -2.910043234558451e-09, -3.107812736501461e-06, -3.107731332095112e-06, -3.105006635034260e-06, -3.107252875546530e-06, -3.107722067309523e-06, -3.107722067309523e-06, -9.709507970780413e-04, -9.850434612055153e-04, -1.325241353608886e-03, -1.283180075555664e-03, -9.760488020191592e-04, -9.760488020191592e-04, -7.656077874082476e-02, -6.582306194374904e-02, -4.112249355338318e-04, -2.731816705628053e-01, -7.323876623917019e-02, -7.323876623917019e-02, -2.225509346529241e+00, -2.229287839235311e+00, -8.770751038427673e-01, -1.591778515414510e+00, -2.315749001514836e+00, -2.315749001514836e+00, -6.313341914995434e-07, -6.296086963907052e-07, -6.311604274011541e-07, -6.298189216727839e-07, -6.304494672163321e-07, -6.304494672163321e-07, -2.622751815202380e-05, -2.563780785259645e-05, -2.636026211338200e-05, -2.590185223807810e-05, -2.563685398956616e-05, -2.563685398956616e-05, 7.061932177035617e-04, 3.435132554135618e-03, 8.281968104881130e-04, 3.955080180209739e-03, 8.852448804501992e-04, 8.852448804501992e-04, -4.087100925258199e-01, -1.011781315595842e-01, -4.589718252868669e-01, 7.965216073855506e-06, -3.840506043947275e-01, -3.840506043947275e-01, -1.688805170092333e+00, -1.690894680603971e+00, -4.838514608415927e+00, -8.106341010212909e-01, -2.497056011591869e+00, -2.497056011591590e+00, 6.331247437696256e-03, 4.746276678253609e-03, 5.261385147523143e-03, 5.698181262750092e-03, 5.475330399789514e-03, 5.475330399789514e-03, 7.624607878582349e-03, -8.364022411300708e-04, 9.613995537330455e-04, 2.959947608073697e-03, 1.918185529078766e-03, 1.918185529078770e-03, 2.614180440235078e-03, -4.756724407373608e-02, -2.196315218546366e-02, 5.347425928847530e-04, -8.088881427562269e-03, -8.088881427562283e-03, -9.724078168012358e-04, -7.529523345704343e-01, -7.225123297670818e-01, 1.259331775184962e-02, -7.084345129504040e-01, -7.084345129504057e-01, -1.669727828104394e+00, -2.918840046815087e+00, -2.510397307338279e+00, -8.591790352672718e-01, -3.647937419045532e+00, -3.647937419046353e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
