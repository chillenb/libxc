
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.524368079087074e+01, -1.524370307030084e+01, -1.524384716668034e+01, -1.524351478086268e+01, -1.524368253498598e+01, -1.524368253498598e+01, -2.582369195365111e+00, -2.582345303697996e+00, -2.581855692115953e+00, -2.583187784080705e+00, -2.582401658820597e+00, -2.582401658820597e+00, -5.445967297488632e-01, -5.445456822663226e-01, -5.452587900559892e-01, -5.488205351859849e-01, -5.488335692870021e-01, -5.488335692870021e-01, -1.710453114574904e-01, -1.728478059472749e-01, -6.256787953214542e-01, -1.371728408229316e-01, -1.518340567077250e-01, -1.518340567077250e-01, -1.092846022485334e-02, -1.161363959093307e-02, -7.227975185386158e-02, -5.848959390581950e-03, -1.396928094340546e-02, -1.396928094340546e-02, -3.738682668688339e+00, -3.738577670792579e+00, -3.738683998909675e+00, -3.738591166215867e+00, -3.738625709237910e+00, -3.738625709237910e+00, -1.591046210867855e+00, -1.598006939589607e+00, -1.592662552022228e+00, -1.598819686793234e+00, -1.594109167036955e+00, -1.594109167036955e+00, -4.645850152566744e-01, -4.956629804327854e-01, -4.336338900846731e-01, -4.441567569173080e-01, -4.709046547337850e-01, -4.709046547337851e-01, -1.213122648462570e-01, -1.760538498097976e-01, -1.174095973766735e-01, -1.401253435312997e+00, -1.190054475383113e-01, -1.190054475383113e-01, -4.414613664841130e-03, -5.701517952142389e-03, -4.286826872607907e-03, -9.743324450702072e-02, -7.088520820941552e-03, -7.088520820941571e-03, -4.554218838327700e-01, -4.584965246609586e-01, -4.580169565836050e-01, -4.571117889944059e-01, -4.576265823581100e-01, -4.576265823581100e-01, -4.423113549452679e-01, -4.051007747492900e-01, -4.140140624750667e-01, -4.265944550473885e-01, -4.195797770171428e-01, -4.195797770171428e-01, -5.183067897679106e-01, -2.155787221991015e-01, -2.482803266437969e-01, -2.949831615414548e-01, -2.704546481135285e-01, -2.704546481135286e-01, -3.753386610812168e-01, -6.971469144846104e-02, -8.955969172373687e-02, -2.792784979005772e-01, -1.011103677740532e-01, -1.011103677740531e-01, -1.598943788993847e-02, -1.364263849242187e-03, -3.072327867142210e-03, -1.001051487844336e-01, -6.220438819589409e-03, -6.220438819589403e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.849880057502590e+01, -1.849878095265479e+01, -1.849890402031423e+01, -1.849885667416896e+01, -1.849918975403106e+01, -1.849927553649865e+01, -1.849801489489786e+01, -1.849778660940620e+01, -1.849885857801447e+01, -1.849835177137824e+01, -1.849885857801447e+01, -1.849835177137824e+01, -3.041017463226269e+00, -3.041317246708923e+00, -3.041075014862749e+00, -3.041391037695428e+00, -3.042633760952529e+00, -3.043012920848350e+00, -3.040412433513548e+00, -3.040819539487626e+00, -3.040455364055040e+00, -3.042177714478589e+00, -3.040455364055040e+00, -3.042177714478589e+00, -6.041690390565551e-01, -6.086554094034303e-01, -6.021622303388712e-01, -6.075965766522222e-01, -5.747959808275110e-01, -5.702828340530758e-01, -5.766344623719178e-01, -5.781447644933464e-01, -6.084060075353777e-01, -5.659300170091509e-01, -6.084060075353777e-01, -5.659300170091509e-01, -2.011614509293282e-01, -2.001620194744460e-01, -2.008478799501946e-01, -1.996294776773228e-01, -6.936201961366861e-01, -7.240465503400521e-01, -1.358602452177288e-01, -1.338521236464963e-01, -1.653272116661364e-01, -3.250852359815629e-01, -1.653272116661358e-01, -3.250852359815629e-01, -1.150437927468181e-02, -1.763899245922988e-02, -1.175934709268249e-02, -1.900557091128354e-02, -6.583574642780762e-02, -7.307247864137011e-02, -8.492022217906960e-03, -7.445240846912731e-03, -2.471628373372736e-02, 1.473098762388749e-02, -2.471628373372730e-02, 1.473098762388692e-02, -4.701241977447150e+00, -4.700160263782308e+00, -4.703727064702582e+00, -4.702569099766349e+00, -4.701375508101784e+00, -4.700243587596994e+00, -4.703513448979329e+00, -4.702426580420778e+00, -4.702517432284137e+00, -4.701373265023566e+00, -4.702517432284137e+00, -4.701373265023566e+00, -1.614766076072986e+00, -1.614695971661024e+00, -1.627113767807723e+00, -1.626723648407138e+00, -1.604445408334047e+00, -1.606635937256857e+00, -1.614448657185351e+00, -1.616933925843784e+00, -1.630437093438166e+00, -1.622999552637422e+00, -1.630437093438166e+00, -1.622999552637422e+00, -5.813194281826348e-01, -5.804929339231470e-01, -6.361199603433494e-01, -6.356056838360261e-01, -5.271335633077097e-01, -5.418768217546683e-01, -5.675027779786223e-01, -5.794085184898704e-01, -6.042728830190769e-01, -5.847486908819106e-01, -6.042728830190767e-01, -5.847486908819105e-01, -3.236299820379242e-02, -2.596280939269070e-02, -1.967198658078011e-01, -1.965995709400191e-01, -3.913040608727142e-02, -1.467272499462651e-02, -1.809417856944917e+00, -1.808716605699680e+00, -8.628518755582408e-02, -6.986215498743989e-02, -8.628518755582408e-02, -6.986215498743989e-02, -5.009854536921832e-03, -6.910132205120244e-03, -7.305029467576016e-03, -8.229053792321969e-03, -4.342333863144488e-03, -7.051191863281038e-03, -4.230734940408580e-02, -4.440810211487682e-02, 2.999891748078225e-03, -1.433982304205339e-02, 2.999891748078423e-03, -1.433982304205311e-02, -5.840810661506086e-01, -5.857359227861640e-01, -5.867528333273730e-01, -5.877211077039618e-01, -5.835459564116878e-01, -5.845875501779154e-01, -5.817934072515372e-01, -5.830711007729430e-01, -5.824459985228011e-01, -5.835991273278378e-01, -5.824459985228011e-01, -5.835991273278378e-01, -5.770162992128265e-01, -5.782980148767269e-01, -4.579585346871366e-01, -4.596984446444255e-01, -5.049114399481344e-01, -5.069289461744244e-01, -5.496389275281252e-01, -5.508192818898124e-01, -5.288816506209510e-01, -5.302256505449066e-01, -5.288816506209510e-01, -5.302256505449066e-01, -6.664881326584181e-01, -6.661809611762255e-01, -2.484865197442485e-01, -2.485625875135793e-01, -2.656099554456456e-01, -2.654918308249580e-01, -3.272858395529852e-01, -3.285375454643512e-01, -2.807807023846559e-01, -2.806482635249015e-01, -2.807807023846566e-01, -2.806482635249022e-01, -4.227657773590605e-01, -4.254179357023136e-01, -7.038635908752980e-02, -7.147879442362597e-02, -6.835271106025388e-02, -6.605726339738746e-02, -3.312519787097576e-01, -3.349705820633720e-01, -4.687193425670916e-02, -5.734961680008874e-03, -4.687193425670918e-02, -5.734961680008887e-03, -1.907624114834922e-02, -2.384165592122207e-02, -1.825609033929755e-03, -1.864483528008676e-03, -2.967682033669531e-03, -5.174845107197549e-03, -2.877096471177010e-02, -2.367429584121046e-02, 1.875754298152793e-03, -1.272914895707393e-02, 1.875754298152704e-03, -1.272914895707371e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.078179546056467e-09, 0.000000000000000e+00, -9.078219927565677e-09, -9.077992946643077e-09, 0.000000000000000e+00, -9.078083037081685e-09, -9.077462155200423e-09, 0.000000000000000e+00, -9.077310964101916e-09, -9.079585591024019e-09, 0.000000000000000e+00, -9.079997594411406e-09, -9.078080802286290e-09, 0.000000000000000e+00, -9.078962741653096e-09, -9.078080802286290e-09, 0.000000000000000e+00, -9.078962741653096e-09, -1.227007715611328e-05, 0.000000000000000e+00, -1.226736788139298e-05, -1.226935376670598e-05, 0.000000000000000e+00, -1.226651889360954e-05, -1.225061591212003e-05, 0.000000000000000e+00, -1.224642033894337e-05, -1.227525832280068e-05, 0.000000000000000e+00, -1.227098445983166e-05, -1.227878884505999e-05, 0.000000000000000e+00, -1.225448765614165e-05, -1.227878884505999e-05, 0.000000000000000e+00, -1.225448765614165e-05, -8.003219393928672e-03, 0.000000000000000e+00, -7.877204267687571e-03, -8.066096300662315e-03, 0.000000000000000e+00, -7.917337706520245e-03, -8.805028036477168e-03, 0.000000000000000e+00, -8.810042617753906e-03, -8.560821155880074e-03, 0.000000000000000e+00, -8.560186184237503e-03, -7.949137848794753e-03, 0.000000000000000e+00, -7.961984131849922e-03, -7.949137848794753e-03, 0.000000000000000e+00, -7.961984131849922e-03, -3.594591983843768e-01, 0.000000000000000e+00, -3.835270216928560e-01, -3.950646454398766e-01, 0.000000000000000e+00, -4.202169508029600e-01, -4.598260181510904e-03, 0.000000000000000e+00, -3.978934157740976e-03, -1.318987240336341e+00, 0.000000000000000e+00, -1.355042944851889e+00, -6.102876510862175e-01, 0.000000000000000e+00, 1.262835057291308e+01, -6.102876510862270e-01, 0.000000000000000e+00, 1.262835057291313e+01, -4.755969250230481e+01, 0.000000000000000e+00, -7.468600041378001e+01, -4.785548534742409e+01, 0.000000000000000e+00, -8.095023872781358e+01, -3.200451439944305e+01, 0.000000000000000e+00, -4.130501385232007e+01, -5.963284817680722e+01, 0.000000000000000e+00, -4.912578589251415e+01, -1.134076836658167e+02, 0.000000000000000e+00, 4.165726962159700e+02, -1.134076836655851e+02, 0.000000000000000e+00, 4.165726962173952e+02, -2.096473718785069e-06, 0.000000000000000e+00, -2.098458462005472e-06, -2.089962494946406e-06, 0.000000000000000e+00, -2.092128829680100e-06, -2.096133750803342e-06, 0.000000000000000e+00, -2.098241737312957e-06, -2.090524710562317e-06, 0.000000000000000e+00, -2.092512983370515e-06, -2.093127895334801e-06, 0.000000000000000e+00, -2.095267684138131e-06, -2.093127895334801e-06, 0.000000000000000e+00, -2.095267684138131e-06, -1.146396254472455e-04, 0.000000000000000e+00, -1.146590458117468e-04, -1.124500476443949e-04, 0.000000000000000e+00, -1.125428424730015e-04, -1.141594304717695e-04, 0.000000000000000e+00, -1.144340915564626e-04, -1.124219584526919e-04, 0.000000000000000e+00, -1.126063607050098e-04, -1.134481716301451e-04, 0.000000000000000e+00, -1.134847624511078e-04, -1.134481716301451e-04, 0.000000000000000e+00, -1.134847624511078e-04, -7.875317805867321e-03, 0.000000000000000e+00, -7.895271222058114e-03, -8.313659857178555e-03, 0.000000000000000e+00, -8.841886114831747e-03, -1.313008980172391e-02, 0.000000000000000e+00, -1.120509913984592e-02, -6.605145803897022e-03, 0.000000000000000e+00, -6.195182992506736e-03, -6.021856980472199e-03, 0.000000000000000e+00, -6.772739725788810e-03, -6.021856980472108e-03, 0.000000000000000e+00, -6.772739725788820e-03, -9.188927266111341e+00, 0.000000000000000e+00, -9.476217329126346e+00, -3.422999317182490e-01, 0.000000000000000e+00, -3.430085575538918e-01, -1.117547311958058e+01, 0.000000000000000e+00, -1.236025816737167e+01, -1.135246394185235e-04, 0.000000000000000e+00, -1.138531192561767e-04, -4.255645596251799e+00, 0.000000000000000e+00, -4.481890858848192e+00, -4.255645596251799e+00, 0.000000000000000e+00, -4.481890858848192e+00, -6.927436858641801e+01, 0.000000000000000e+00, -7.139490758683925e+01, -6.522581382693144e+01, 0.000000000000000e+00, -6.277097442310424e+01, -2.464605936221714e+02, 0.000000000000000e+00, -5.243963559564717e+02, -2.988381684095159e+01, 0.000000000000000e+00, -2.918080063884955e+01, 2.147124612088216e+02, 0.000000000000000e+00, -3.276751534764423e+02, 2.147124612075399e+02, 0.000000000000000e+00, -3.276751534769862e+02, -3.266892087459927e-02, 0.000000000000000e+00, -3.202952503144813e-02, -1.300345549575507e-02, 0.000000000000000e+00, -1.344064790127916e-02, -2.023428957512516e-02, 0.000000000000000e+00, -2.069711890213027e-02, -2.774781701935199e-02, 0.000000000000000e+00, -2.788975875998961e-02, -2.393469583347671e-02, 0.000000000000000e+00, -2.426588294358156e-02, -2.393469583347671e-02, 0.000000000000000e+00, -2.426588294358156e-02, -9.569691294830774e-03, 0.000000000000000e+00, -9.024030463715161e-03, -2.575608976308164e-02, 0.000000000000000e+00, -2.532788687001539e-02, -1.602540212602025e-02, 0.000000000000000e+00, -1.563368727163916e-02, -5.187522229382174e-03, 0.000000000000000e+00, -5.177280695220996e-03, -1.026108648456311e-02, 0.000000000000000e+00, -1.011987822541443e-02, -1.026108648456311e-02, 0.000000000000000e+00, -1.011987822541443e-02, -5.647376998729674e-03, 0.000000000000000e+00, -6.170060028807247e-03, -1.539097161094683e-01, 0.000000000000000e+00, -1.540643721656030e-01, -1.623299387330258e-01, 0.000000000000000e+00, -1.625511947086137e-01, -1.011726050764857e-01, 0.000000000000000e+00, -9.921484643550275e-02, -1.552961464647057e-01, 0.000000000000000e+00, -1.562986089031540e-01, -1.552961464647056e-01, 0.000000000000000e+00, -1.562986089031532e-01, -3.572705342886032e-02, 0.000000000000000e+00, -3.478273943424449e-02, -3.405871181057395e+01, 0.000000000000000e+00, -3.518195736318154e+01, -2.792503827015211e+01, 0.000000000000000e+00, -3.274680318987568e+01, -9.677628027515234e-02, 0.000000000000000e+00, -9.055250188499835e-02, -1.684794525702285e+01, 0.000000000000000e+00, -2.288453280146955e+01, -1.684794525702290e+01, 0.000000000000000e+00, -2.288453280146940e+01, -4.411040883687735e+01, 0.000000000000000e+00, -5.882228171178054e+01, -1.385364457190140e+02, 0.000000000000000e+00, -5.172738184244993e+02, -9.290428620568757e+01, 0.000000000000000e+00, -1.919242728498488e+02, -2.317684526638050e+01, 0.000000000000000e+00, -2.383259410869900e+01, 5.689034967735455e+01, 0.000000000000000e+00, -3.025273818676990e+02, 5.689034967797114e+01, 0.000000000000000e+00, -3.025273818677420e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
