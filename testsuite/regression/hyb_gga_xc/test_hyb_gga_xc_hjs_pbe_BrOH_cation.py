
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.577603969224337e+01, -1.577606110002882e+01, -1.577620573777021e+01, -1.577588621766770e+01, -1.577604660653981e+01, -1.577604660653981e+01, -2.662088594549670e+00, -2.662065261012305e+00, -2.661590017217949e+00, -2.662911643969298e+00, -2.662123632305788e+00, -2.662123632305788e+00, -5.659214692285397e-01, -5.657047313456058e-01, -5.618817309157064e-01, -5.656924355412710e-01, -5.657311861016563e-01, -5.657311861016563e-01, -1.829347909122310e-01, -1.843258346419186e-01, -6.495102709908798e-01, -1.536460211216667e-01, -1.753491557458629e-01, -1.753491557458628e-01, -1.009850793769417e-02, -1.063274132336235e-02, -5.460758585697823e-02, -5.827711510158436e-03, -8.130522956272188e-03, -8.130522956272188e-03, -3.850389814280800e+00, -3.850137527932065e+00, -3.850385260418765e+00, -3.850162402456734e+00, -3.850257843318265e+00, -3.850257843318265e+00, -1.622015031681364e+00, -1.629830115567146e+00, -1.622066154217582e+00, -1.628955688851755e+00, -1.626337915861859e+00, -1.626337915861859e+00, -4.896968210552349e-01, -5.232164468372493e-01, -4.579179981792044e-01, -4.696211211557748e-01, -4.963140164429345e-01, -4.963140164429345e-01, -1.192823556923062e-01, -1.918254401954083e-01, -1.123019431448990e-01, -1.447449128111555e+00, -1.322679712290342e-01, -1.322679712290342e-01, -4.499862570769273e-03, -5.696962581352388e-03, -4.362800825179640e-03, -8.163076068475558e-02, -5.479748971368400e-03, -5.479748971368386e-03, -4.885197490916328e-01, -4.855500589571133e-01, -4.865105353160305e-01, -4.873684028989135e-01, -4.869311338772484e-01, -4.869311338772484e-01, -4.770395576992981e-01, -4.254121008053108e-01, -4.376985689412667e-01, -4.513983255036039e-01, -4.441181998398589e-01, -4.441181998398589e-01, -5.458690048224762e-01, -2.278598875131288e-01, -2.581948711513004e-01, -3.130236894324068e-01, -2.830122180301068e-01, -2.830122180301068e-01, -3.951384283210443e-01, -5.252802643067682e-02, -6.852747119019807e-02, -3.001623544524036e-01, -9.833335773863425e-02, -9.833335773863422e-02, -1.421587047133031e-02, -1.523241823670867e-03, -3.203000737226974e-03, -9.366307666769100e-02, -5.032536754104339e-03, -5.032536754104343e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.899970287218271e+01, -1.899968078047561e+01, -1.899979045861278e+01, -1.899974476250616e+01, -1.900004840056555e+01, -1.900011872491662e+01, -1.899905504741085e+01, -1.899885792368254e+01, -1.899975191025507e+01, -1.899934814136813e+01, -1.899975191025507e+01, -1.899934814136813e+01, -3.152492775593764e+00, -3.152631306446981e+00, -3.152530648983271e+00, -3.152674890578681e+00, -3.153503038863137e+00, -3.153735750660929e+00, -3.152310602024146e+00, -3.152547683901891e+00, -3.151944076611252e+00, -3.153423648552967e+00, -3.151944076611252e+00, -3.153423648552967e+00, -6.619311474274755e-01, -6.652858695676468e-01, -6.603244355814147e-01, -6.644170076255550e-01, -6.347586974961038e-01, -6.301040058036355e-01, -6.369172857016246e-01, -6.384306215438262e-01, -6.619602777589065e-01, -6.182043733121169e-01, -6.619602777589065e-01, -6.182043733121169e-01, -1.935211227567309e-01, -1.960153177092922e-01, -1.959507662812535e-01, -1.989586871741948e-01, -7.531989467804211e-01, -7.794215342986659e-01, -1.604720970080998e-01, -1.615872054864308e-01, -1.816769736422345e-01, -1.477309946807668e-01, -1.816769736422340e-01, -1.477309946807665e-01, -1.300153337334376e-02, -1.381062006559065e-02, -1.361951193259279e-02, -1.458296055245091e-02, -6.734294198690499e-02, -7.029987641367007e-02, -7.829779395561802e-03, -7.699617954229103e-03, -1.160536006208413e-02, -6.612291397735000e-03, -1.160536006208412e-02, -6.612291397735007e-03, -4.795301168839071e+00, -4.794169513063382e+00, -4.797593396918314e+00, -4.796391155356185e+00, -4.795424762964253e+00, -4.794246805616044e+00, -4.797396788347381e+00, -4.796259737802314e+00, -4.796475251810817e+00, -4.795286767621443e+00, -4.796475251810817e+00, -4.795286767621443e+00, -1.727991479346083e+00, -1.727909189160332e+00, -1.742096143959845e+00, -1.741638470740112e+00, -1.713420983421212e+00, -1.716702504598096e+00, -1.725413454554176e+00, -1.728887897988195e+00, -1.746594643196967e+00, -1.737710778833828e+00, -1.746594643196967e+00, -1.737710778833828e+00, -6.142102848088601e-01, -6.131718544440551e-01, -6.789212320367266e-01, -6.794255316413749e-01, -5.620234421521985e-01, -5.776026770015282e-01, -6.009372200820341e-01, -6.135342765681228e-01, -6.362124368528542e-01, -6.136425108097397e-01, -6.362124368528541e-01, -6.136425108097399e-01, -1.342021906483053e-01, -1.344997852607791e-01, -1.976771063942818e-01, -1.980872287377206e-01, -1.260063905715193e-01, -1.295156312664808e-01, -1.884347310349023e+00, -1.883677355336508e+00, -1.432602345841959e-01, -1.413369773590230e-01, -1.432602345841959e-01, -1.413369773590230e-01, -5.875917417310973e-03, -6.106391124203392e-03, -7.533751906444189e-03, -7.647742108611756e-03, -5.633229629206125e-03, -5.964770648186177e-03, -9.760203551813033e-02, -9.819841269603634e-02, -5.754673150519139e-03, -7.897546430803119e-03, -5.754673150519155e-03, -7.897546430803093e-03, -6.336896195258266e-01, -6.354091750134577e-01, -6.291727443179939e-01, -6.309635657960694e-01, -6.309826431860812e-01, -6.327680760635594e-01, -6.323273435701181e-01, -6.340555691899487e-01, -6.316767384476276e-01, -6.334328404658078e-01, -6.316767384476276e-01, -6.334328404658078e-01, -6.182188969085477e-01, -6.195706137669132e-01, -5.075252083134744e-01, -5.092590402858532e-01, -5.418983872826522e-01, -5.438508110568776e-01, -5.758836768750948e-01, -5.773444117826474e-01, -5.589825185052566e-01, -5.604890801658343e-01, -5.589825185052566e-01, -5.604890801658343e-01, -7.076187491065044e-01, -7.088805948461667e-01, -2.361777362395347e-01, -2.367430289990829e-01, -2.767443896293761e-01, -2.780605129506216e-01, -3.738267302570224e-01, -3.752020069992537e-01, -3.214025050686496e-01, -3.213225758122504e-01, -3.214025050686494e-01, -3.213225758122503e-01, -4.714897616344625e-01, -4.740553942366194e-01, -6.643568625780674e-02, -6.679905386821343e-02, -8.371415549989498e-02, -8.569779683317276e-02, -3.693522975161646e-01, -3.730604459299962e-01, -1.120267535694341e-01, -1.133432424470287e-01, -1.120267535694340e-01, -1.133432424470285e-01, -1.854592542798871e-02, -1.920871579346704e-02, -2.028543702010539e-03, -2.033122822333569e-03, -4.126534655467435e-03, -4.388647312612468e-03, -1.081034901431805e-01, -1.092286554525194e-01, -5.450070272667609e-03, -7.240274287464556e-03, -5.450070272667658e-03, -7.240274287464542e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.038554023741087e-08, 3.855567579455844e-10, -1.038559886606977e-08, -1.038545194827654e-08, 3.855637563905792e-10, -1.038553373896501e-08, -1.038507946821629e-08, 3.855734091993355e-10, -1.038502908096260e-08, -1.038609131159549e-08, 3.854697494807899e-10, -1.038630375961640e-08, -1.038550935959474e-08, 3.855271085313426e-10, -1.038571534280688e-08, -1.038550935959474e-08, 3.855271085313426e-10, -1.038571534280688e-08, -1.318369883304873e-05, 2.158879157656427e-06, -1.318804040829563e-05, -1.318374445154969e-05, 2.159323527660124e-06, -1.318842323116473e-05, -1.318861687858933e-05, 2.169371669283230e-06, -1.319087822748316e-05, -1.317196912426644e-05, 2.149943255801801e-06, -1.317508734090050e-05, -1.319169891972649e-05, 2.159156568071321e-06, -1.317806051848841e-05, -1.319169891972649e-05, 2.159156568071321e-06, -1.317806051848841e-05, -7.317581275065712e-03, 3.586683876242116e-03, -7.320023613954755e-03, -7.337155282749943e-03, 3.559577090514688e-03, -7.340567304617126e-03, -7.740764660813082e-03, 2.876045381924161e-03, -7.707023157131994e-03, -7.500810107894438e-03, 2.810968523930000e-03, -7.515079143959895e-03, -7.623408344190008e-03, 2.852692094259074e-03, -7.091739100858406e-03, -7.623408344190008e-03, 2.852692094259074e-03, -7.091739100858406e-03, -8.152884513888656e-01, 3.108902575321890e-01, -7.573330611727151e-01, -8.114256068114276e-01, 3.280826843588528e-01, -7.413555173260794e-01, -4.304074936821024e-03, 1.940414170439823e-03, -3.935517388450844e-03, -1.182313239541644e+00, 2.258949661124237e-01, -1.141347034455869e+00, -7.422735735425734e-01, 1.882246441728870e-01, -1.754979908623509e+00, -7.422735735425773e-01, 1.882246441728873e-01, -1.754979908623518e+00, -4.866467625002223e+00, 8.471332723898200e-03, -4.816098917413083e+00, -5.125456464821001e+00, 9.964515393423459e-03, -5.097172007468725e+00, -2.431091500427505e+00, 5.126941006152715e-02, -2.419556117041533e+00, -4.469596338756401e+00, 3.008683449168684e-03, -4.348564710486899e+00, -4.863073643535553e+00, 4.414566270491809e-03, -1.235903155382458e+01, -4.863073643545075e+00, 4.414566270088269e-03, -1.235903155377750e+01, -2.831131799624256e-06, 5.666948009101149e-07, -2.834009545737016e-06, -2.829593564788782e-06, 5.704413223836728e-07, -2.832461471599186e-06, -2.831051579099823e-06, 5.668443577206054e-07, -2.833928696282958e-06, -2.829685901845828e-06, 5.701514261968389e-07, -2.832570880046670e-06, -2.830370130792353e-06, 5.686004611431787e-07, -2.833223959927112e-06, -2.830370130792353e-06, 5.686004611431787e-07, -2.833223959927112e-06, -1.040351003384575e-04, 1.221811741084532e-05, -1.040544730415880e-04, -1.018976272159820e-04, 1.218856108878283e-05, -1.019907999913544e-04, -1.041699325230870e-04, 1.161795009824474e-05, -1.042746188862592e-04, -1.023673361411209e-04, 1.159619612758267e-05, -1.024113271015387e-04, -1.026702779558115e-04, 1.250231835492394e-05, -1.028319824913126e-04, -1.026702779558115e-04, 1.250231835492394e-05, -1.028319824913126e-04, -1.219998674925324e-02, 1.180452397706796e-02, -1.240293896208471e-02, -7.526915148418245e-03, 1.489938286408802e-02, -7.524410695140361e-03, -1.820662723570104e-02, 1.535577972946644e-02, -1.511971971752108e-02, -1.426484712906519e-02, 2.278859644535717e-02, -1.104993604710051e-02, -9.923353796450086e-03, 1.179162458306085e-02, -1.338759550558819e-02, -9.923353796450100e-03, 1.179162458306085e-02, -1.338759550558820e-02, -1.423287207973557e+00, 1.261488607621168e-01, -1.445963689232388e+00, -5.329390109245996e-01, 1.139695105238702e-01, -5.272719001551869e-01, -1.627014488395768e+00, 1.279112469154852e-01, -1.568947466526281e+00, -1.191795308501640e-04, 1.207887057881010e-04, -1.195166986343602e-04, -1.481035276402942e+00, 2.409472748596690e-01, -1.779228693327847e+00, -1.481035276402942e+00, 2.409472748596690e-01, -1.779228693327847e+00, -6.279119158000091e+00, 2.933546798259037e-03, -5.434559289442560e+00, -5.402667333986860e+00, 3.699144102256803e-03, -4.988091644165173e+00, -3.075131331043585e+01, 3.685108437354808e-02, -3.420045126312010e+01, -2.543477037393430e+00, 1.250822448857004e-01, -2.446521607829956e+00, -1.530219777628082e+01, 1.410360645889085e-02, -1.501365928007892e+01, -1.530219777624343e+01, 1.410360646869916e-02, -1.501365928008511e+01, -8.920981865562887e-03, 2.514346072918196e-02, -8.602969713092060e-03, -1.041259574511794e-02, 2.157065992117518e-02, -1.010469106041096e-02, -9.939362504334781e-03, 2.270457728491302e-02, -9.628743682622077e-03, -9.508394554862337e-03, 2.373865089872573e-02, -9.193511677026978e-03, -9.728811639857598e-03, 2.321019190891285e-02, -9.416023648998562e-03, -9.728811639857598e-03, 2.321019190891285e-02, -9.416023648998562e-03, -9.397567089710165e-03, 2.977269840520045e-02, -9.078678999432179e-03, -2.398366637791148e-02, 1.592277215307748e-02, -2.355931765467096e-02, -2.036945109836157e-02, 1.838749842245184e-02, -1.996184366910550e-02, -1.652458169904190e-02, 2.169730037966074e-02, -1.617149346136002e-02, -1.853339266095821e-02, 1.995497716545398e-02, -1.815017438128605e-02, -1.853339266095821e-02, 1.995497716545398e-02, -1.815017438128605e-02, -6.422177868706420e-03, 1.183264719377924e-02, -6.372588973798933e-03, -3.002362219759797e-01, 8.498631964250428e-02, -2.965625692381179e-01, -1.961056393932690e-01, 7.821972418059023e-02, -1.922960189181663e-01, -8.846985468816138e-02, 6.964082434152352e-02, -8.623289535659949e-02, -1.345109883859099e-01, 7.796350422599263e-02, -1.355180030498195e-01, -1.345109883859105e-01, 7.796350422599266e-02, -1.355180030498198e-01, -3.286670979514209e-02, 2.285950305464996e-02, -3.199615019848467e-02, -2.233493693417164e+00, 4.213028450134424e-02, -2.233182303065187e+00, -2.074728783421213e+00, 6.458066222247318e-02, -2.109545558231057e+00, -1.057236071474054e-01, 1.099497136873529e-01, -9.803030334249258e-02, -2.412984516692936e+00, 2.182010199987041e-01, -2.814852101491978e+00, -2.412984516692937e+00, 2.182010199987039e-01, -2.814852101491997e+00, -3.845294605367823e+00, 1.056259116938041e-02, -3.923908947305708e+00, -1.935526649505561e+01, 4.011531506685853e-03, -3.427822760219627e+01, -1.193032655014558e+01, 5.020763908060611e-03, -1.269824598759600e+01, -2.726997205501274e+00, 2.002688123716920e-01, -2.662340791513560e+00, -3.154055003960105e+01, 1.800188742308661e-02, -1.558906096242928e+01, -3.154055003962465e+01, 1.800188743452388e-02, -1.558906096247628e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
