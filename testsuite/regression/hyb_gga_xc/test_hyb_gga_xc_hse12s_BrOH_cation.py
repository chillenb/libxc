
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse12s_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12s", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.213672617277362e+01, -1.213674080685772e+01, -1.213684658914114e+01, -1.213662803100978e+01, -1.213673675952560e+01, -1.213673675952560e+01, -2.093151175924057e+00, -2.093131239089661e+00, -2.092719662706695e+00, -2.093815652117097e+00, -2.093175655833196e+00, -2.093175655833196e+00, -4.813356857695318e-01, -4.811390130355653e-01, -4.769844047498196e-01, -4.800212275968875e-01, -4.790953519176154e-01, -4.790953519176154e-01, -1.761735461550363e-01, -1.773235099937523e-01, -5.461436498644192e-01, -1.516207896260927e-01, -1.690371083796508e-01, -1.690371083796507e-01, -1.010889207733962e-02, -1.064513723843440e-02, -5.720283770431382e-02, -5.829608966288882e-03, -8.136347632575022e-03, -8.136347632575022e-03, -2.999292821241189e+00, -2.999085872417009e+00, -2.999288735978984e+00, -2.999105912084786e+00, -2.999184586355126e+00, -2.999184586355126e+00, -1.293798663488006e+00, -1.300115157176987e+00, -1.293098647406676e+00, -1.298701481133357e+00, -1.297604089659210e+00, -1.297604089659210e+00, -4.226349409556541e-01, -4.504131158555297e-01, -3.978767014925979e-01, -4.080557027363816e-01, -4.277888983362613e-01, -4.277888983362613e-01, -1.210118345244712e-01, -1.834356714517829e-01, -1.146316957253164e-01, -1.163088046770905e+00, -1.328743138852474e-01, -1.328743138852474e-01, -4.500813335176272e-03, -5.698823963842109e-03, -4.364421930750727e-03, -8.523138704196886e-02, -5.482244496245927e-03, -5.482244496245932e-03, -4.246988918872655e-01, -4.210914435276099e-01, -4.222302792136782e-01, -4.232726138376742e-01, -4.227388926028881e-01, -4.227388926028881e-01, -4.161673711460159e-01, -3.722779597625313e-01, -3.821294402807279e-01, -3.930586021726037e-01, -3.871867792137142e-01, -3.871867792137142e-01, -4.678868918356043e-01, -2.124071632597376e-01, -2.368658875510697e-01, -2.838921997963983e-01, -2.583519443481874e-01, -2.583519443481874e-01, -3.486066785247774e-01, -5.489793714467928e-02, -7.209922278542720e-02, -2.740356345019246e-01, -1.015056586940310e-01, -1.015056586940310e-01, -1.424467532418315e-02, -1.523305587899196e-03, -3.203444739744777e-03, -9.699697053148679e-02, -5.034575183040933e-03, -5.034575183040926e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse12s_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12s", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.444758196882256e+01, -1.444756589753225e+01, -1.444765613513536e+01, -1.444762012946129e+01, -1.444786634180832e+01, -1.444792703597064e+01, -1.444702468105210e+01, -1.444685954382930e+01, -1.444762324533188e+01, -1.444726895092005e+01, -1.444762324533188e+01, -1.444726895092005e+01, -2.443312838007220e+00, -2.443429940712770e+00, -2.443344413239245e+00, -2.443466698910544e+00, -2.444159900545994e+00, -2.444347672308955e+00, -2.443121300860272e+00, -2.443312491560032e+00, -2.442901208836020e+00, -2.444033872238502e+00, -2.442901208836020e+00, -2.444033872238502e+00, -5.621540768249438e-01, -5.631521893956078e-01, -5.614024318704445e-01, -5.625770988926676e-01, -5.474888924035184e-01, -5.467743772264109e-01, -5.507811477777683e-01, -5.509759716238870e-01, -5.562963868031778e-01, -5.440985122555388e-01, -5.562963868031778e-01, -5.440985122555388e-01, -1.848596179639224e-01, -1.870130586003796e-01, -1.872942374599708e-01, -1.903201132896689e-01, -6.328134925927582e-01, -6.470315593403778e-01, -1.598018297019086e-01, -1.606529664729798e-01, -1.719332034120170e-01, -1.495353003782060e-01, -1.719332034120169e-01, -1.495353003782059e-01, -1.303166075619110e-02, -1.384680266986702e-02, -1.365497987204885e-02, -1.462674979251655e-02, -7.165186069340733e-02, -7.434048092774173e-02, -7.836021381976033e-03, -7.705491945820380e-03, -1.162660068896030e-02, -6.617914173417633e-03, -1.162660068896030e-02, -6.617914173417631e-03, -3.717480742596469e+00, -3.716610693660671e+00, -3.719691244688667e+00, -3.718753442362750e+00, -3.717598130172476e+00, -3.716684082921323e+00, -3.719500052024840e+00, -3.718625361292903e+00, -3.718614275138072e+00, -3.717688556878056e+00, -3.718614275138072e+00, -3.717688556878056e+00, -1.410425883223225e+00, -1.410367949207350e+00, -1.419451455820824e+00, -1.419151335111424e+00, -1.403900575900499e+00, -1.404960323693901e+00, -1.411819493113999e+00, -1.412959728602322e+00, -1.419567053296810e+00, -1.416675188462295e+00, -1.419567053296810e+00, -1.416675188462295e+00, -5.201858721384574e-01, -5.194652061853705e-01, -5.764043826411973e-01, -5.768595091407032e-01, -4.799129672922475e-01, -4.910385755194025e-01, -5.153341501294790e-01, -5.240558237267762e-01, -5.372259130342185e-01, -5.209782964634266e-01, -5.372259130342188e-01, -5.209782964634271e-01, -1.350800995200770e-01, -1.354495363105689e-01, -1.895500411388699e-01, -1.897694978114785e-01, -1.272318031450073e-01, -1.306850267323539e-01, -1.510336933253988e+00, -1.509847743518257e+00, -1.446175473735760e-01, -1.431091293741960e-01, -1.446175473735760e-01, -1.431091293741960e-01, -5.878917172417577e-03, -6.109574968135242e-03, -7.539724762491725e-03, -7.653803455240572e-03, -5.638378978795075e-03, -5.971181595642494e-03, -9.930145759773604e-02, -9.986045968731753e-02, -5.758726442167129e-03, -7.907959649002400e-03, -5.758726442167137e-03, -7.907959649002408e-03, -5.410907085364526e-01, -5.423141221261968e-01, -5.375891428607902e-01, -5.389098405205238e-01, -5.391790662068063e-01, -5.404825807449944e-01, -5.402381623049173e-01, -5.414808311210400e-01, -5.397436657518949e-01, -5.410156349789123e-01, -5.397436657518949e-01, -5.410156349789123e-01, -5.285709620691907e-01, -5.295189746049316e-01, -4.407662084610408e-01, -4.417520632100824e-01, -4.638303881006936e-01, -4.651918528190845e-01, -4.925220437182668e-01, -4.936116619211371e-01, -4.776452414675790e-01, -4.787453035451643e-01, -4.776452414675790e-01, -4.787453035451643e-01, -5.986771669133975e-01, -5.997358439356711e-01, -2.187449784936301e-01, -2.191403712968581e-01, -2.588045298698951e-01, -2.604534628898171e-01, -3.376887829657535e-01, -3.384564756702319e-01, -3.017454026188563e-01, -3.016256737716370e-01, -3.017454026188561e-01, -3.016256737716368e-01, -4.131091081793922e-01, -4.144561805892671e-01, -7.092245355450776e-02, -7.128654718235325e-02, -8.594156212847917e-02, -8.763851679152976e-02, -3.297634983990040e-01, -3.320210085014818e-01, -1.141257618521176e-01, -1.159815670922443e-01, -1.141257618521175e-01, -1.159815670922441e-01, -1.863114577126264e-02, -1.930501573322127e-02, -2.028740684626994e-03, -2.033377412126733e-03, -4.127880851393160e-03, -4.390309070176121e-03, -1.103587227082076e-01, -1.114764324468289e-01, -5.454785196259676e-03, -7.248420469055984e-03, -5.454785196259670e-03, -7.248420469055976e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse12s_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12s", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.803742209678976e-09, 3.855567579455844e-10, -8.803789953900402e-09, -8.803640051332630e-09, 3.855637563905792e-10, -8.803714771360285e-09, -8.803273113585315e-09, 3.855734091993355e-10, -8.803204074382754e-09, -8.804440215283363e-09, 3.854697494807899e-10, -8.804677028250846e-09, -8.803700539509995e-09, 3.855271085313426e-10, -8.804046119153521e-09, -8.803700539509995e-09, 3.855271085313426e-10, -8.804046119153521e-09, -1.121792195715312e-05, 2.158879157656427e-06, -1.122189235417271e-05, -1.121795945642896e-05, 2.159323527660124e-06, -1.122223376753295e-05, -1.122226015642451e-05, 2.169371669283230e-06, -1.122439997770610e-05, -1.120780316311620e-05, 2.149943255801801e-06, -1.121076239041565e-05, -1.122471152004299e-05, 2.159156568071321e-06, -1.121343399502076e-05, -1.122471152004299e-05, 2.159156568071321e-06, -1.121343399502076e-05, -5.612831528120706e-03, 3.586683876242116e-03, -5.728490308978838e-03, -5.591683253264056e-03, 3.559577090514688e-03, -5.734892633768677e-03, -5.464393044266642e-03, 2.876045381924161e-03, -5.271569990178419e-03, -5.207915670785299e-03, 2.810968523930000e-03, -5.273816704207629e-03, -6.201607776307665e-03, 2.852692094259074e-03, -4.500353941401799e-03, -6.201607776307665e-03, 2.852692094259074e-03, -4.500353941401799e-03, -7.036552605705029e-01, 3.108902575321890e-01, -6.424092695526764e-01, -6.958389514513884e-01, 3.280826843588528e-01, -6.170722409400969e-01, -3.329320321257510e-03, 1.940414170439823e-03, -3.229018994405687e-03, -9.535128113708427e-01, 2.258949661124237e-01, -9.200792933648412e-01, -6.397393895654113e-01, 1.882246441728870e-01, -1.480313199287264e+00, -6.397393895654113e-01, 1.882246441728873e-01, -1.480313199287267e+00, 4.235666361990832e-03, 8.471332723898200e-03, 4.235666361990832e-03, 4.982257697020214e-03, 9.964515393423459e-03, 4.982257697020214e-03, -2.039398608858531e+00, 5.126941006152715e-02, -2.740296174673412e+00, 1.504341724364139e-03, 3.008683449168684e-03, 1.504341724364139e-03, 2.207283134900671e-03, 4.414566270491809e-03, 2.207283134900671e-03, 2.207283135350878e-03, 4.414566270088269e-03, 2.207283135350878e-03, -2.272001943183283e-06, 5.666948009101149e-07, -2.274478511989775e-06, -2.267569590737972e-06, 5.704413223836728e-07, -2.270132230960883e-06, -2.271778511360472e-06, 5.668443577206054e-07, -2.274313988248644e-06, -2.267929814263743e-06, 5.701514261968389e-07, -2.270414338231872e-06, -2.269748283783259e-06, 5.686004611431787e-07, -2.272288568480424e-06, -2.269748283783259e-06, 5.686004611431787e-07, -2.272288568480424e-06, -7.343098817207155e-05, 1.221811741084532e-05, -7.344364291666517e-05, -7.238995678395331e-05, 1.218856108878283e-05, -7.244553218509765e-05, -7.241206995251380e-05, 1.161795009824474e-05, -7.281620280979919e-05, -7.150222179865965e-05, 1.159619612758267e-05, -7.187381712229421e-05, -7.370824310177975e-05, 1.250231835492394e-05, -7.291792104629845e-05, -7.370824310177975e-05, 1.250231835492394e-05, -7.291792104629845e-05, -1.054510449128634e-02, 1.180452397706796e-02, -1.073434568853004e-02, -4.435985348690495e-03, 1.489938286408802e-02, -4.389222829643075e-03, -1.590722355256370e-02, 1.535577972946644e-02, -1.312478549830132e-02, -1.005649395183864e-02, 2.278859644535717e-02, -7.369490986086413e-03, -8.394483144589453e-03, 1.179162458306085e-02, -1.163696577710531e-02, -8.394483144589383e-03, 1.179162458306085e-02, -1.163696577710531e-02, -1.250336586994257e+00, 1.261488607621168e-01, -1.260592822788273e+00, -4.317551684012659e-01, 1.139695105238702e-01, -4.276724875985044e-01, -1.523648203272937e+00, 1.279112469154852e-01, -1.414091584841223e+00, -7.138151892563600e-05, 1.207887057881010e-04, -7.160375872293845e-05, -1.205818615228128e+00, 2.409472748596690e-01, -1.456551218314912e+00, -1.205818615228128e+00, 2.409472748596690e-01, -1.456551218314912e+00, 1.466773397935566e-03, 2.933546798259037e-03, 1.466773397935566e-03, 1.849572050554419e-03, 3.699144102256803e-03, 1.849572050554419e-03, 1.842554218706263e-02, 3.685108437354808e-02, 1.842554218706263e-02, -3.345058632585318e+00, 1.250822448857004e-01, -3.224509610293080e+00, 7.051803231269947e-03, 1.410360645889085e-02, 7.051803231269947e-03, 7.051803234557417e-03, 1.410360646869916e-02, 7.051803234557417e-03, -2.864967279342000e-03, 2.514346072918196e-02, -2.599119523121260e-03, -6.072967336622079e-03, 2.157065992117518e-02, -5.779986416617051e-03, -5.064735600465635e-03, 2.270457728491302e-02, -4.775912774680606e-03, -4.131811947907956e-03, 2.373865089872573e-02, -3.856862724937182e-03, -4.609416578407976e-03, 2.321019190891285e-02, -4.327313577821994e-03, -4.609416578407976e-03, 2.321019190891285e-02, -4.327313577821994e-03, -1.922997959942472e-03, 2.977269840520045e-02, -1.691259522671729e-03, -1.893419779116006e-02, 1.592277215307748e-02, -1.867264779233956e-02, -1.775002477988823e-02, 1.838749842245184e-02, -1.741079202969626e-02, -1.387453808901501e-02, 2.169730037966074e-02, -1.352723186673065e-02, -1.624568356838191e-02, 1.995497716545398e-02, -1.588056507788605e-02, -1.624568356838191e-02, 1.995497716545398e-02, -1.588056507788605e-02, -3.955852011925161e-03, 1.183264719377924e-02, -3.862034292731836e-03, -2.489498777544529e-01, 8.498631964250428e-02, -2.456633846849668e-01, -1.434548873720032e-01, 7.821972418059023e-02, -1.387065940187619e-01, -6.762789696901227e-02, 6.964082434152352e-02, -6.612239045187443e-02, -8.708442539968894e-02, 7.796350422599263e-02, -8.795895076129640e-02, -8.708442539968902e-02, 7.796350422599266e-02, -8.795895076129667e-02, -2.578230219887991e-02, 2.285950305464996e-02, -2.531834653858740e-02, -1.431495671929679e+00, 4.213028450134424e-02, -1.503509108813260e+00, -3.615889647666386e+00, 6.458066222247318e-02, -3.657661202555294e+00, -9.419547496930600e-02, 1.099497136873529e-01, -8.809549563980279e-02, -2.461874091218746e+00, 2.182010199987041e-01, -2.679824462071144e+00, -2.461874091218760e+00, 2.182010199987039e-01, -2.679824462071142e+00, 5.281295584737279e-03, 1.056259116938041e-02, 5.281295584737279e-03, 2.005765736367150e-03, 4.011531506685853e-03, 2.005765736367150e-03, 2.510381951246900e-03, 5.020763908060611e-03, 2.510381951246900e-03, -2.848554367481079e+00, 2.002688123716920e-01, -2.746602493811082e+00, 9.000943715250370e-03, 1.800188742308661e-02, 9.000943715250370e-03, 9.000943718924263e-03, 1.800188743452388e-02, 9.000943718924263e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
