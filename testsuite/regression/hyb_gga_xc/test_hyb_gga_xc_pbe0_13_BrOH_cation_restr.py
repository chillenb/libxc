
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe0_13_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.401486740236055e+01, -1.401488652812352e+01, -1.401501536899775e+01, -1.401472991601618e+01, -1.401487325562883e+01, -1.401487325562883e+01, -2.357096328041165e+00, -2.357076144144915e+00, -2.356666645198256e+00, -2.357818978569937e+00, -2.357127972056596e+00, -2.357127972056596e+00, -4.923670935714076e-01, -4.921450530985136e-01, -4.880916968438733e-01, -4.915191503958253e-01, -4.904301283749078e-01, -4.904301283749078e-01, -1.498621109246153e-01, -1.511423904832373e-01, -5.666595420493254e-01, -1.235388748232725e-01, -1.335386515125739e-01, -1.335386515125739e-01, -6.724972950921295e-03, -7.077711327044884e-03, -3.846346308974724e-02, -3.885505793129289e-03, -4.881693437792129e-03, -4.881693437792129e-03, -3.415275426866897e+00, -3.415075154356841e+00, -3.415272363072640e+00, -3.415095447233214e+00, -3.415170318943070e+00, -3.415170318943070e+00, -1.430266441988384e+00, -1.437269502632321e+00, -1.430185471380788e+00, -1.436356524000441e+00, -1.434190439093852e+00, -1.434190439093852e+00, -4.259730617802172e-01, -4.578438983382378e-01, -3.972676017801535e-01, -4.095593872467369e-01, -4.317113619210116e-01, -4.317113619210116e-01, -9.318424387999757e-02, -1.574230831758842e-01, -8.699894606911872e-02, -1.280872467310357e+00, -1.045867309629919e-01, -1.045867309629919e-01, -2.998111396548602e-03, -3.798398437900587e-03, -2.904165058018031e-03, -6.067048406421804e-02, -3.498628768312838e-03, -3.498628768312838e-03, -4.276489350374158e-01, -4.243053576885798e-01, -4.253918157294748e-01, -4.263586666635060e-01, -4.258664494521096e-01, -4.258664494521096e-01, -4.176279261049550e-01, -3.675026443274907e-01, -3.792920945414155e-01, -3.925771121230629e-01, -3.855183722582777e-01, -3.855183722582777e-01, -4.779316270504438e-01, -1.896278246648500e-01, -2.170123525276127e-01, -2.672766202378585e-01, -2.397194271522622e-01, -2.397194271522622e-01, -3.405228272746230e-01, -3.688690414262162e-02, -4.970036505279905e-02, -2.564670899766014e-01, -7.491480771801115e-02, -7.491480771801118e-02, -9.486423108305364e-03, -1.015509040926767e-03, -2.131457509181260e-03, -7.094136021572318e-02, -3.237361806388069e-03, -3.237361806388069e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe0_13_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.688900872417995e+01, -1.688907629293930e+01, -1.688935772307729e+01, -1.688835283393420e+01, -1.688888206808411e+01, -1.688888206808411e+01, -2.800386783762150e+00, -2.800423863196537e+00, -2.801347841393678e+00, -2.800254650163315e+00, -2.800496287585646e+00, -2.800496287585646e+00, -5.850101409687808e-01, -5.838819334448616e-01, -5.564576812865513e-01, -5.611991556929704e-01, -5.606954034186652e-01, -5.606954034186652e-01, -1.628102677052498e-01, -1.654687094221315e-01, -6.768978345145168e-01, -1.311684885099674e-01, -1.415705998599790e-01, -1.415705998599790e-01, -8.955662960609142e-03, -9.423809881434514e-03, -4.973006048717616e-02, -5.178655327722921e-03, -6.504413617323557e-03, -6.504413617323554e-03, -4.262708657326166e+00, -4.264735628359525e+00, -4.262798809122658e+00, -4.264588256431748e+00, -4.263737640051803e+00, -4.263737640051803e+00, -1.530871192167742e+00, -1.543400963883019e+00, -1.518987095327834e+00, -1.529911722514344e+00, -1.543726079842725e+00, -1.543726079842725e+00, -5.415273840621148e-01, -5.997300311415521e-01, -5.023924473405059e-01, -5.357194402201271e-01, -5.518923908151392e-01, -5.518923908151392e-01, -1.066206990210405e-01, -1.644009156221807e-01, -1.008545495631898e-01, -1.674146672999253e+00, -1.139519442602258e-01, -1.139519442602258e-01, -3.996416885842734e-03, -5.062484969780080e-03, -3.869929370530534e-03, -7.453288783885031e-02, -4.662105986789737e-03, -4.662105986789740e-03, -5.591792811249716e-01, -5.558031411452979e-01, -5.572391753070637e-01, -5.582348975231612e-01, -5.577601021682367e-01, -5.577601021682367e-01, -5.449181321374647e-01, -4.467444288380132e-01, -4.781222543878683e-01, -5.085339157221527e-01, -4.933933419556166e-01, -4.933933419556166e-01, -6.257806691000496e-01, -1.994132920784794e-01, -2.377282537791493e-01, -3.270930145281776e-01, -2.781572401928940e-01, -2.781572401928940e-01, -4.149445584284402e-01, -4.787085883423494e-02, -6.308569769422830e-02, -3.246357563117891e-01, -8.762598150223647e-02, -8.762598150223647e-02, -1.262095586815306e-02, -1.353925369900607e-03, -2.841385916351339e-03, -8.403505088244430e-02, -4.314049405064708e-03, -4.314049405064705e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe0_13_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe0_13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.508058765312834e-09, -4.508022499929683e-09, -4.507824262753957e-09, -4.508364571038144e-09, -4.508086723237352e-09, -4.508086723237352e-09, -5.263978625682627e-06, -5.263947611123175e-06, -5.262719818515769e-06, -5.261018204053160e-06, -5.263457369667446e-06, -5.263457369667446e-06, -2.250239636592212e-03, -2.266624351747055e-03, -2.624628441750010e-03, -2.546053701131167e-03, -2.560190882567744e-03, -2.560190882567744e-03, -2.605736977116121e-01, -2.507551579320987e-01, -1.289407120115301e-03, -4.469545878184421e-01, -3.847441757973967e-01, -3.847441757973969e-01, -1.620539955778678e+00, -1.711524088105625e+00, -9.309449462396731e-01, -1.475049357159256e+00, -1.872752037175562e+00, -1.872752037176963e+00, -1.100839189211961e-06, -1.099108554057481e-06, -1.100761684566905e-06, -1.099234210999702e-06, -1.099963889484457e-06, -1.099963889484457e-06, -4.277808210197602e-05, -4.184916204554907e-05, -4.304339626424799e-05, -4.222721398877109e-05, -4.212118640267425e-05, -4.212118640267425e-05, -2.137610500516822e-03, 9.104478773749158e-04, -3.031202111468389e-03, 9.441699364125342e-04, -1.771799169986883e-03, -1.771799169986883e-03, -5.898184582961745e-01, -2.020175170644185e-01, -6.563773631551035e-01, -1.930615181839426e-05, -6.536385918133799e-01, -6.536385918133799e-01, -1.944093960221158e+00, -1.735936645441978e+00, -1.089489171836409e+01, -1.008207297991187e+00, -5.070580313840535e+00, -5.070580313831602e+00, 3.352202560710135e-03, 1.623503528659160e-03, 2.170258015264031e-03, 2.670220568049301e-03, 2.414494779323817e-03, 2.414494779323817e-03, 4.505670795122509e-03, -6.087490963691116e-03, -3.775640850211304e-03, -1.088219965750063e-03, -2.497143448089996e-03, -2.497143448089996e-03, 5.280536538939682e-04, -1.088806362737665e-01, -6.397623385005441e-02, -1.900099378246057e-02, -3.809651781944801e-02, -3.809651781944799e-02, -7.970196246553462e-03, -8.519836214564733e-01, -8.351534090555303e-01, -1.379340392708883e-02, -1.065401278675297e+00, -1.065401278675301e+00, -1.304072910831486e+00, -8.526209485168112e+00, -4.124843778831635e+00, -1.091228233609759e+00, -6.404750805923810e+00, -6.404750805925660e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
