
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_case21_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.575159368671818e+01, -1.575161374107870e+01, -1.575175458163673e+01, -1.575145515296116e+01, -1.575160469518127e+01, -1.575160469518127e+01, -2.645632913582510e+00, -2.645607259756558e+00, -2.645078483724946e+00, -2.646492641388254e+00, -2.645664882593488e+00, -2.645664882593488e+00, -5.564667629064775e-01, -5.563204568393540e-01, -5.543906240406749e-01, -5.581381535235407e-01, -5.568363239646391e-01, -5.568363239646391e-01, -1.740249863804706e-01, -1.756168220123459e-01, -6.391149272923066e-01, -1.413479034499426e-01, -1.541362047376418e-01, -1.541362047376418e-01, -7.271930978954553e-03, -7.654053994401054e-03, -4.197394263593904e-02, -4.199543223628235e-03, -5.277225645836625e-03, -5.277225645836625e-03, -3.826716031763340e+00, -3.826444934770200e+00, -3.826710661556866e+00, -3.826471191950287e+00, -3.826574364477692e+00, -3.826574364477692e+00, -1.618971911373126e+00, -1.626441333545135e+00, -1.619866692136866e+00, -1.626462510448392e+00, -1.622665389963197e+00, -1.622665389963197e+00, -4.771773486480831e-01, -5.084499146964935e-01, -4.456533846023428e-01, -4.549773514525519e-01, -4.830319973111424e-01, -4.830319973111424e-01, -1.042814161598980e-01, -1.806763588915647e-01, -9.712873871535925e-02, -1.431476863972288e+00, -1.186868470333780e-01, -1.186868470333780e-01, -3.240183485159817e-03, -4.105442053659466e-03, -3.139407163946817e-03, -6.700148001049924e-02, -3.781946769004584e-03, -3.781946769004584e-03, -4.735890031348693e-01, -4.707980497443461e-01, -4.716648374446376e-01, -4.724695036022571e-01, -4.720559327346531e-01, -4.720559327346531e-01, -4.621329105267665e-01, -4.155097057456745e-01, -4.259029787874240e-01, -4.378503077124978e-01, -4.314123942362694e-01, -4.314123942362694e-01, -5.311340475552306e-01, -2.188555513471639e-01, -2.508133134118498e-01, -3.034090299164500e-01, -2.752873035820216e-01, -2.752873035820216e-01, -3.852676448380943e-01, -4.021107247220371e-02, -5.446562753835375e-02, -2.889643205740661e-01, -8.366492103772426e-02, -8.366492103772427e-02, -1.026266211803217e-02, -1.097350093984291e-03, -2.303457690703901e-03, -7.900465610503717e-02, -3.499490310614011e-03, -3.499490310614009e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_case21_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.885440057273109e+01, -1.885448001407817e+01, -1.885480580292457e+01, -1.885362444747930e+01, -1.885424734405386e+01, -1.885424734405386e+01, -3.104613399690832e+00, -3.104663239674577e+00, -3.105889806251368e+00, -3.104327608499781e+00, -3.104745405767397e+00, -3.104745405767397e+00, -6.383861632720379e-01, -6.371132048112514e-01, -6.080085939893705e-01, -6.130905291195743e-01, -6.124488358149039e-01, -6.124488358149039e-01, -1.947196539689870e-01, -1.964195855266784e-01, -7.406765882374057e-01, -1.617205441102314e-01, -1.743544498559408e-01, -1.743544498559408e-01, -9.697902941237851e-03, -1.020755156530386e-02, -5.527127420730620e-02, -5.600145805737034e-03, -7.037635481532674e-03, -7.037635481532674e-03, -4.761855953167657e+00, -4.764433265725764e+00, -4.761969602350963e+00, -4.764244925346133e+00, -4.763164936312052e+00, -4.763164936312052e+00, -1.682140696322968e+00, -1.695298923407359e+00, -1.670911496025897e+00, -1.682157275813197e+00, -1.695288162862386e+00, -1.695288162862386e+00, -5.924668957299353e-01, -6.627863325945830e-01, -5.482981360372489e-01, -5.902253675952720e-01, -6.045063758069187e-01, -6.045063758069187e-01, -1.266783558391066e-01, -2.021073180628733e-01, -1.191466767513861e-01, -1.868137419686571e+00, -1.392599538728483e-01, -1.392599538728483e-01, -4.320733235811038e-03, -5.474703369269596e-03, -4.186951498738441e-03, -8.560552431805958e-02, -5.043713379093429e-03, -5.043713379093429e-03, -6.193707469235263e-01, -6.138933679760037e-01, -6.161461948352045e-01, -6.177592342528088e-01, -6.169831864221659e-01, -6.169831864221659e-01, -6.038263083061254e-01, -4.851417421791647e-01, -5.209745993546470e-01, -5.572712779125452e-01, -5.389952344196858e-01, -5.389952344196858e-01, -6.915753882609594e-01, -2.403633097665251e-01, -2.734695085233935e-01, -3.527411675106939e-01, -3.046873536842228e-01, -3.046873536842228e-01, -4.498605478693549e-01, -5.304717037649894e-02, -7.094601225996452e-02, -3.497616407178363e-01, -1.035979180147564e-01, -1.035979180147565e-01, -1.368508145029059e-02, -1.463199412440030e-03, -3.071591081777283e-03, -9.866025560345437e-02, -4.667044110748363e-03, -4.667044110748359e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_case21_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.409998508215467e-09, -5.409949572919362e-09, -5.409696051367148e-09, -5.410424834435255e-09, -5.410048082534242e-09, -5.410048082534242e-09, -6.536161201066969e-06, -6.536053477958554e-06, -6.532917901298592e-06, -6.533565508799844e-06, -6.535427063626413e-06, -6.535427063626413e-06, -3.334170039485743e-03, -3.351490617109965e-03, -3.670477462952920e-03, -3.566155333393478e-03, -3.593608188453550e-03, -3.593608188453550e-03, -2.518582323012803e-01, -2.522649486077865e-01, -1.867110104867383e-03, -3.385082927338928e-01, -3.121264133218441e-01, -3.121264133218443e-01, 3.675337129511114e-01, 3.569059562201430e-01, -3.754818859324601e-01, 6.121583653298631e-01, 6.343821976260826e-01, 6.343821976270700e-01, -1.298034225771654e-06, -1.295045352456204e-06, -1.297903820073953e-06, -1.295265683023850e-06, -1.296519967946982e-06, -1.296519967946982e-06, -5.419207050213230e-05, -5.311780812141408e-05, -5.423495921727684e-05, -5.331697301361155e-05, -5.353626676115705e-05, -5.353626676115705e-05, -4.386472779967229e-03, -5.254206700987182e-04, -6.148348976437920e-03, -1.693059809935431e-03, -3.895288318906832e-03, -3.895288318906832e-03, -3.920392848891291e-01, -1.649285616130794e-01, -4.244642219152405e-01, -2.818069883913004e-05, -4.610186871687739e-01, -4.610186871687739e-01, 9.676759056882021e-01, 7.333567786767013e-01, 5.535596720804891e+00, -5.506640684189663e-01, 2.278459966841712e+00, 2.278459966840868e+00, 1.840142798584981e-03, -4.063474373986957e-04, 3.066467170190576e-04, 9.570376827368424e-04, 6.246086471529558e-04, 6.246086471529558e-04, 3.004943997630100e-03, -1.027056635091452e-02, -7.639152904649240e-03, -4.516496677266692e-03, -6.175848120737220e-03, -6.175848120737220e-03, -6.706332358202979e-04, -1.011209978173089e-01, -7.397876890467570e-02, -3.694344066451184e-02, -5.816246405930148e-02, -5.816246405930144e-02, -1.392039914255947e-02, -3.318009331459176e-01, -4.053807067035026e-01, -3.852650953191505e-02, -6.487379342335940e-01, -6.487379342335947e-01, 1.328364280544324e-01, 6.733288206010065e+00, 2.472579110978383e+00, -6.469733044806534e-01, 3.036414131646253e+00, 3.036414131649573e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
