
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_revb3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_revb3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.677135242149113e+01, -1.677137765481485e+01, -1.677153841071890e+01, -1.677116198724606e+01, -1.677135231808248e+01, -1.677135231808248e+01, -2.829642624383354e+00, -2.829618617583012e+00, -2.829131506919602e+00, -2.830504421016718e+00, -2.829680610781896e+00, -2.829680610781896e+00, -5.950995540815538e-01, -5.949090171123113e-01, -5.911864493223811e-01, -5.953185262443171e-01, -5.939849478190126e-01, -5.939849478190126e-01, -1.795186247851574e-01, -1.812578891074287e-01, -6.844407893468215e-01, -1.461928052285535e-01, -1.589899074887680e-01, -1.589899074887680e-01, -4.648566997134328e-02, -4.661123305191487e-02, -8.421011603212274e-02, -4.180034165432444e-02, -4.192631459220094e-02, -4.192631459220091e-02, -4.093210163303434e+00, -4.092874880208600e+00, -4.093202602907580e+00, -4.092906504038603e+00, -4.093035937177408e+00, -4.093035937177408e+00, -1.716998125691868e+00, -1.725667913987691e+00, -1.716048197771561e+00, -1.723706104033305e+00, -1.722244957847059e+00, -1.722244957847059e+00, -5.075242388108903e-01, -5.315891076133713e-01, -4.740612719011694e-01, -4.764730318326571e-01, -5.131498153054164e-01, -5.131498153054164e-01, -1.136556931591175e-01, -1.849549592009869e-01, -1.085561669544630e-01, -1.516586197474310e+00, -1.254330672153463e-01, -1.254330672153463e-01, -3.756222561012564e-02, -4.029224560200297e-02, -2.659780709416064e-02, -9.158584595811266e-02, -3.212767168930866e-02, -3.212767168930867e-02, -4.893963172578439e-01, -4.910457619425480e-01, -4.905082493207335e-01, -4.900266332668810e-01, -4.902708996706310e-01, -4.902708996706310e-01, -4.756376900123302e-01, -4.426340463296976e-01, -4.529833613298938e-01, -4.623804020917718e-01, -4.575650407280039e-01, -4.575650407280039e-01, -5.564915927516193e-01, -2.253426984276850e-01, -2.607531126588902e-01, -3.207593521616037e-01, -2.889836668644926e-01, -2.889836668644926e-01, -4.097956443532261e-01, -8.444087912335532e-02, -8.896240763466789e-02, -3.047191375673183e-01, -9.920975660889163e-02, -9.920975660889161e-02, -5.288500268732330e-02, -2.290596517484190e-02, -3.024839371307900e-02, -9.658334967170119e-02, -3.018768687239463e-02, -3.018768687239461e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_revb3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_revb3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.042013614476488e+01, -2.042020915697669e+01, -2.042052509680010e+01, -2.041943900705963e+01, -2.042000932272515e+01, -2.042000932272515e+01, -3.361320428640390e+00, -3.361346920505382e+00, -3.362040364739245e+00, -3.361459334014611e+00, -3.361431401471133e+00, -3.361431401471133e+00, -6.902686002615208e-01, -6.894400558766437e-01, -6.702224741131126e-01, -6.754167713172936e-01, -6.743722314121029e-01, -6.743722314121029e-01, -2.049213560409202e-01, -2.068084428244132e-01, -7.977485214888352e-01, -1.699179662969349e-01, -1.823683960777530e-01, -1.823683960777530e-01, -1.588189533452470e-02, -1.628795545997867e-02, -5.057822248614462e-02, -1.178832849508508e-02, -1.302099897758869e-02, -1.302099897758872e-02, -5.077834645322752e+00, -5.079657096557059e+00, -5.077917679071398e+00, -5.079526533858410e+00, -5.078758630306895e+00, -5.078758630306895e+00, -1.878019810214413e+00, -1.892119357768899e+00, -1.866215474566080e+00, -1.878606301860283e+00, -1.891599687368265e+00, -1.891599687368265e+00, -6.163884699325740e-01, -6.786975748884317e-01, -5.721843807156548e-01, -6.033791164335333e-01, -6.268521713265194e-01, -6.268521713265194e-01, -1.321553184418875e-01, -2.168933509109854e-01, -1.226334512452023e-01, -1.943378439949768e+00, -1.439327979277939e-01, -1.439327979277939e-01, -9.981191349420916e-03, -1.143994990322298e-02, -8.127090672777681e-03, -8.043451225836801e-02, -9.757845295051035e-03, -9.757845295051065e-03, -6.355828171900380e-01, -6.277170710756347e-01, -6.303604266579904e-01, -6.326385027126998e-01, -6.314873797160939e-01, -6.314873797160939e-01, -6.209197797475642e-01, -5.190095394695294e-01, -5.447588709814770e-01, -5.727629377434251e-01, -5.581924654402634e-01, -5.581924654402634e-01, -7.087967135883071e-01, -2.590193109281111e-01, -2.970863130971672e-01, -3.764051180984991e-01, -3.322091917817292e-01, -3.322091917817292e-01, -4.808312459941040e-01, -4.906580516231938e-02, -6.515587968048962e-02, -3.646931545383559e-01, -1.007701114227852e-01, -1.007701114227852e-01, -1.992584183534341e-02, -4.951627656049056e-03, -7.688309536134502e-03, -9.495493865577184e-02, -9.121892393318622e-03, -9.121892393318582e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_revb3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_revb3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.850248134663866e-09, -4.850224709700823e-09, -4.850054746140669e-09, -4.850404632820462e-09, -4.850230650102256e-09, -4.850230650102256e-09, -6.267372925699726e-06, -6.267644056748646e-06, -6.273309367337968e-06, -6.258747495879832e-06, -6.267097981562563e-06, -6.267097981562563e-06, -3.355035737021438e-03, -3.353837068744029e-03, -3.294417605248386e-03, -3.211506993225359e-03, -3.244129256889159e-03, -3.244129256889159e-03, -2.256695157161079e-01, -2.279886870768878e-01, -1.939857516703272e-03, -2.513213906931293e-01, -2.672111344854405e-01, -2.672111344854404e-01, -6.790896497132941e+03, -5.955033696932801e+03, -3.167103981025543e+01, -3.204833770399352e+04, -1.776104369263351e+04, -1.776104369263352e+04, -1.446360592562695e-06, -1.447424937029922e-06, -1.446395451494824e-06, -1.447335171820082e-06, -1.446907093864219e-06, -1.446907093864219e-06, -4.593889379033349e-05, -4.504659560193516e-05, -4.597182467730495e-05, -4.518036809651287e-05, -4.543033413651962e-05, -4.543033413651962e-05, -6.944675287913875e-03, -6.499813635584981e-03, -9.009167112536355e-03, -9.960435593283854e-03, -6.728042809410835e-03, -6.728042809410835e-03, -2.071880520054703e-01, -1.147451826779772e-01, -3.475316567336905e-01, -8.662944150374874e-05, -3.750176764409119e-01, -3.750176764409119e-01, -7.309945859946926e+04, -3.580632230613865e+04, -1.297527885280527e+05, -4.242105653121145e+00, -6.125900249497678e+04, -6.125900249497674e+04, -9.727763183672834e-03, -9.052726705647470e-03, -9.254575945447792e-03, -9.447060791516609e-03, -9.347533045341156e-03, -9.347533045341156e-03, -1.122988775978548e-02, -1.100308474581300e-02, -1.071459684084457e-02, -1.061191670011483e-02, -1.065724192619105e-02, -1.065724192619105e-02, -5.343897745515780e-03, -8.033997244171780e-02, -6.197360846472059e-02, -3.846299681283330e-02, -5.050469850479367e-02, -5.050469850479369e-02, -1.489348141247232e-02, -3.590831978697480e+01, -1.018791963434729e+01, -5.093446285899526e-02, -1.619927567576499e+00, -1.619927567576500e+00, -2.380180219726743e+03, -2.515415367484119e+06, -2.412614051963117e+05, -2.111169584377254e+00, -8.177836532913506e+04, -8.177836532913534e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
