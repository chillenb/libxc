
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2a_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.563145265638001e+01, -1.563147916833000e+01, -1.563163690693745e+01, -1.563124164621439e+01, -1.563144308174128e+01, -1.563144308174128e+01, -2.693935176275946e+00, -2.693916000681782e+00, -2.693536350888153e+00, -2.694687272855060e+00, -2.693974434682024e+00, -2.693974434682024e+00, -5.952925281621977e-01, -5.951204593688263e-01, -5.924459926710607e-01, -5.963061724840638e-01, -5.949977085995004e-01, -5.949977085995004e-01, -1.982678546550895e-01, -1.996357746169392e-01, -6.800744150373665e-01, -1.669672218389100e-01, -1.789101940032744e-01, -1.789101940032744e-01, -9.844403470692485e-03, -1.034481820782969e-02, -5.430596966210846e-02, -5.786776362822880e-03, -7.217881885765180e-03, -7.217881885765180e-03, -3.887290891579265e+00, -3.887204328047407e+00, -3.887293166672315e+00, -3.887216648105971e+00, -3.887243497445025e+00, -3.887243497445025e+00, -1.655168220439761e+00, -1.662883179178395e+00, -1.655341307689881e+00, -1.662103517187193e+00, -1.659403097258049e+00, -1.659403097258049e+00, -5.131027221773407e-01, -5.385710813534356e-01, -4.807332991539722e-01, -4.855861972018343e-01, -5.188394096347611e-01, -5.188394096347611e-01, -1.287767470358916e-01, -2.092932841554633e-01, -1.205982880844975e-01, -1.478592874007334e+00, -1.430399684203454e-01, -1.430399684203454e-01, -4.502180592604986e-03, -5.661188830657258e-03, -4.365909320971786e-03, -8.504681897640060e-02, -5.228436623394818e-03, -5.228436623394819e-03, -4.937807953399451e-01, -4.994196581293818e-01, -4.982979056306854e-01, -4.968162305242338e-01, -4.976372029905621e-01, -4.976372029905621e-01, -4.766471164553792e-01, -4.500240487404349e-01, -4.603833580407453e-01, -4.709791467721741e-01, -4.654484805067388e-01, -4.654484805067388e-01, -5.626308557856842e-01, -2.477635778347326e-01, -2.790300051803115e-01, -3.331183318687265e-01, -3.037179844746119e-01, -3.037179844746119e-01, -4.186134397714083e-01, -5.210499353116669e-02, -6.995841379259739e-02, -3.175774455538718e-01, -1.042416801392800e-01, -1.042416801392800e-01, -1.374742823865430e-02, -1.573998483192270e-03, -3.234909057393284e-03, -9.892519131990626e-02, -4.849991612330854e-03, -4.849991612330851e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2a_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.929191101168007e+01, -1.929198710674440e+01, -1.929230511317181e+01, -1.929117337477988e+01, -1.929176927443314e+01, -1.929176927443314e+01, -3.231475352347221e+00, -3.231515400158368e+00, -3.232516482385609e+00, -3.231362845888683e+00, -3.231597950314824e+00, -3.231597950314824e+00, -6.839631811629090e-01, -6.827952051027478e-01, -6.537492760483380e-01, -6.591550842273025e-01, -6.585194765470515e-01, -6.585194765470515e-01, -2.059000687817610e-01, -2.085213200100333e-01, -7.895523307175319e-01, -1.705897456773898e-01, -1.826468977753910e-01, -1.826468977753910e-01, -1.301556006721742e-02, -1.367662187447045e-02, -6.997965656892047e-02, -7.652386030840537e-03, -9.543600212898014e-03, -9.543600212898009e-03, -4.881477342425223e+00, -4.883297229181887e+00, -4.881559979974885e+00, -4.883166674676272e+00, -4.882401048225823e+00, -4.882401048225823e+00, -1.756224957564950e+00, -1.772047699655600e+00, -1.738543198037505e+00, -1.752487170986091e+00, -1.773573543357002e+00, -1.773573543357002e+00, -6.253950984311476e-01, -6.769861556869436e-01, -5.813933470257170e-01, -6.089508444964444e-01, -6.362540498864463e-01, -6.362540498864463e-01, -1.425083097757131e-01, -2.084360728827216e-01, -1.357089754097015e-01, -1.888356597293102e+00, -1.505341389633453e-01, -1.505341389633453e-01, -5.954635814295470e-03, -7.486293565643976e-03, -5.773737685164581e-03, -1.030959764845859e-01, -6.913637088547172e-03, -6.913637088547172e-03, -6.203911960227219e-01, -6.269257509578490e-01, -6.251717236646370e-01, -6.230703318606889e-01, -6.241806304600541e-01, -6.241806304600541e-01, -6.039271476104695e-01, -5.221239396013027e-01, -5.540016824266779e-01, -5.840812680701599e-01, -5.693145280003310e-01, -5.693145280003310e-01, -7.076417172879338e-01, -2.481157713462831e-01, -2.902855697779994e-01, -3.837524210623775e-01, -3.325755074462252e-01, -3.325755074462252e-01, -4.852340249491063e-01, -6.741850128100529e-02, -8.818344940854261e-02, -3.775229998326199e-01, -1.192590361357129e-01, -1.192590361357128e-01, -1.817433533076812e-02, -2.084943259687621e-03, -4.280017812504826e-03, -1.148813947033370e-01, -6.413524839635424e-03, -6.413524839635421e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2a_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.768470034928808e-09, -3.768425943097424e-09, -3.768220444498372e-09, -3.768876662568662e-09, -3.768534148055437e-09, -3.768534148055437e-09, -5.173114444084893e-06, -5.173058690668462e-06, -5.171268108743664e-06, -5.170494145449676e-06, -5.172554140797243e-06, -5.172554140797243e-06, -3.249629317448456e-03, -3.261928997852603e-03, -3.550508411049753e-03, -3.443435470327046e-03, -3.469171982489948e-03, -3.469171982489948e-03, -3.874605443042414e-01, -3.774282836331035e-01, -1.800271350588022e-03, -6.607465878426898e-01, -5.577595511875929e-01, -5.577595511875936e-01, -1.291088769607902e+00, -1.388132476961048e+00, -1.345638502816170e+00, -9.765444119747927e-01, -1.336520401615907e+00, -1.336520401617644e+00, -1.045857452685147e-06, -1.045418084682069e-06, -1.045832503895328e-06, -1.045444452072692e-06, -1.045635220626962e-06, -1.045635220626962e-06, -4.894298425030323e-05, -4.766526398043059e-05, -4.973474731769704e-05, -4.858929933266483e-05, -4.785184260996295e-05, -4.785184260996295e-05, -5.519877517001422e-03, -7.356479790035928e-03, -7.417175305763783e-03, -9.135048596406995e-03, -5.220504441981047e-03, -5.220504441981047e-03, -9.454821925691275e-01, -2.984164259029291e-01, -1.053247632845289e+00, -7.504557717617274e-05, -9.873629474702246e-01, -9.873629474702246e-01, -1.186002602501631e+00, -1.140798711452583e+00, -6.576067724231899e+00, -1.579311445431471e+00, -3.243893718413826e+00, -3.243893718405766e+00, -3.001939749855058e-02, -1.103686621592067e-02, -1.443804916828106e-02, -1.923532077933152e-02, -1.653422270338241e-02, -1.653422270338241e-02, -5.442409583850433e-02, -1.067556862763180e-02, -9.031077381811562e-03, -8.033942947754023e-03, -8.383711663002700e-03, -8.383711663002700e-03, -5.512031672535044e-03, -1.585817024359141e-01, -9.548738234750728e-02, -3.978811664602529e-02, -6.338382517628610e-02, -6.338382517628602e-02, -1.462727065441274e-02, -1.220109104358471e+00, -1.284653676073045e+00, -4.648410745104096e-02, -1.655024447155125e+00, -1.655024447155126e+00, -1.174320590045471e+00, -3.897373628340565e+00, -2.275455640437682e+00, -1.700129970232897e+00, -3.998389355000444e+00, -3.998389354987014e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
