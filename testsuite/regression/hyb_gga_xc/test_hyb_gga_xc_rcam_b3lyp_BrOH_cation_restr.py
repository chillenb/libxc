
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_rcam_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_rcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.723483418973258e+01, -1.723485272911961e+01, -1.723499804339658e+01, -1.723472091743334e+01, -1.723485718225142e+01, -1.723485718225142e+01, -2.750922796545169e+00, -2.750890045778623e+00, -2.750203737197034e+00, -2.751945836036486e+00, -2.750953199389983e+00, -2.750953199389983e+00, -4.318841950202563e-01, -4.315894890495837e-01, -4.248723987039043e-01, -4.292330545175000e-01, -4.279657624016924e-01, -4.279657624016924e-01, -3.080615444512688e-02, -3.313659352729811e-02, -5.235588440053727e-01, -2.195266577613951e-04, -1.250570691551094e-02, -1.250570691551094e-02, -4.556011132557380e-04, -4.697834317440866e-04, 4.020882080472663e-03, -3.247364124251739e-04, -3.653420090465647e-04, -3.653420090465646e-04, -4.036977389234620e+00, -4.036300505254084e+00, -4.036955935671469e+00, -4.036358243682927e+00, -4.036629014433833e+00, -4.036629014433833e+00, -1.607840497965912e+00, -1.616579889824713e+00, -1.607892751866266e+00, -1.615628245389615e+00, -1.612628383337707e+00, -1.612628383337707e+00, -3.486515130156733e-01, -3.760440614633934e-01, -3.149523605884618e-01, -3.215732251357702e-01, -3.547501587133072e-01, -3.547501587133072e-01, 2.149740972798566e-02, -2.161534574232934e-02, 2.170180890533264e-02, -1.371465422629298e+00, 1.043165368976164e-02, 1.043165368976164e-02, -2.720590018934202e-04, -3.153704417310958e-04, -2.258191017482192e-04, 1.481772758371517e-02, -2.716081557678140e-04, -2.716081557678141e-04, -3.357348254267088e-01, -3.364120042559785e-01, -3.362136325939607e-01, -3.360148840421474e-01, -3.361174799939111e-01, -3.361174799939111e-01, -3.226668439496013e-01, -2.801074988344230e-01, -2.938033748461277e-01, -3.060655463272205e-01, -2.998860373180415e-01, -2.998860373180415e-01, -4.004473711481374e-01, -5.703261614660032e-02, -9.476542432207832e-02, -1.627313494500156e-01, -1.273832278626538e-01, -1.273832278626537e-01, -2.479344505196969e-01, 3.423458097895589e-03, 1.127001310629559e-02, -1.518384468254362e-01, 1.575101151763674e-02, 1.575101151763675e-02, -5.860182203566191e-04, -1.322237863072082e-04, -2.077907828331279e-04, 1.561726277210773e-02, -2.534094164097990e-04, -2.534094164097987e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_rcam_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_rcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.033774785248217e+01, -2.033782749501135e+01, -2.033816273746108e+01, -2.033697821573538e+01, -2.033760155262219e+01, -2.033760155262219e+01, -3.205118960100289e+00, -3.205149804878688e+00, -3.205943967174433e+00, -3.205187307704271e+00, -3.205235059561303e+00, -3.205235059561303e+00, -5.501447764767936e-01, -5.495080866008764e-01, -5.355412543011305e-01, -5.403917144914051e-01, -5.392195809498620e-01, -5.392195809498620e-01, -9.910777632823535e-02, -1.001381828963777e-01, -6.544218302885741e-01, -7.416299548768751e-02, -8.237344154711326e-02, -8.237344154711324e-02, -4.243989240877362e-04, -4.438113919179572e-04, -9.238247573559863e-04, -2.612752035150141e-04, -3.185648993560113e-04, -3.185648993560115e-04, -4.945301203528425e+00, -4.947406428644661e+00, -4.945395951750019e+00, -4.947254447012171e+00, -4.946369122033198e+00, -4.946369122033198e+00, -1.725148047754469e+00, -1.738896414449136e+00, -1.713897771090208e+00, -1.725945614395985e+00, -1.738295192400082e+00, -1.738295192400082e+00, -4.698086197704183e-01, -5.241656423010845e-01, -4.276549009672740e-01, -4.507649095965773e-01, -4.791420973020294e-01, -4.791420973020294e-01, -4.894074375939234e-02, -1.155058345172823e-01, -4.227656615321074e-02, -1.795565586947003e+00, -5.502572471228610e-02, -5.502572471228610e-02, -2.066219180048864e-04, -2.552909382471817e-04, -1.943820300436462e-04, -1.500780022564694e-02, -2.327768897339718e-04, -2.327768897339719e-04, -4.792864636188558e-01, -4.735137450781882e-01, -4.754402826469608e-01, -4.771104267318486e-01, -4.762650574868248e-01, -4.762650574868248e-01, -4.641043765923225e-01, -3.817585231374415e-01, -4.016121482823281e-01, -4.239373335659605e-01, -4.121768482469103e-01, -4.121768482469103e-01, -5.543352697462527e-01, -1.527665536022397e-01, -1.836684773524700e-01, -2.454681469181441e-01, -2.103232738778396e-01, -2.103232738778396e-01, -3.448893354988728e-01, -4.969608213539990e-04, -6.494406334093417e-03, -2.298651333693350e-01, -2.687643375895601e-02, -2.687643375895590e-02, -5.776750023825748e-04, -7.727061158341328e-05, -1.503180070389094e-04, -2.341160795057797e-02, -2.162628450044764e-04, -2.162628450044761e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_rcam_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_rcam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.798589691222690e-09, -6.798557176115954e-09, -6.798320356669515e-09, -6.798806036780211e-09, -6.798564657790235e-09, -6.798564657790235e-09, -8.149270353584664e-06, -8.149628705649908e-06, -8.157148014146914e-06, -8.138091119314843e-06, -8.148937994118776e-06, -8.148937994118776e-06, -2.615875269430035e-03, -2.610451957748853e-03, -2.446078262545621e-03, -2.405780807215659e-03, -2.428084843194647e-03, -2.428084843194647e-03, 2.870376302902103e-01, 2.661851424399998e-01, -1.698843294398515e-03, 8.973224641876267e-01, 5.732112255088371e-01, 5.732112255088372e-01, -2.625140627612265e+01, -2.302024082285459e+01, 9.423683140988357e+00, -1.238883565261407e+02, -6.865837686655857e+01, -6.865837686655861e+01, -1.940069287237268e-06, -1.941532541005989e-06, -1.940117694324504e-06, -1.941409611265970e-06, -1.940820370545391e-06, -1.940820370545391e-06, -5.506572433397063e-05, -5.408160179670606e-05, -5.501975593208689e-05, -5.414968163178841e-05, -5.454390912803029e-05, -5.454390912803029e-05, -5.008914714824679e-03, -5.208498949428475e-03, -5.960819404389431e-03, -7.190845522723781e-03, -4.950639071295110e-03, -4.950639071295110e-03, 2.899866887977990e+00, 3.020232431311135e-01, 3.571342106764527e+00, -1.047256667558703e-04, 1.798493865374262e+00, 1.798493865374262e+00, -2.825785078516722e+02, -1.384154913555670e+02, -5.015816862679028e+02, 7.948057062677703e+00, -2.368071998072467e+02, -2.368071998072465e+02, -7.428107860872220e-03, -6.803181019501069e-03, -6.993166393059786e-03, -7.171685508564874e-03, -7.079663696345016e-03, -7.079663696345016e-03, -8.420657073093802e-03, -6.093500324464837e-03, -6.636951194368437e-03, -7.173147860451403e-03, -6.909373505809546e-03, -6.909373505809546e-03, -4.421053142508894e-03, 9.751334615627431e-02, 2.842469871247942e-02, -7.946427649771187e-03, 3.214988975675015e-03, 3.214988975675008e-03, -7.151847854457975e-03, 9.020112106459447e+00, 9.807853924428422e+00, -1.116984553162912e-02, 5.155528172673363e+00, 5.155528172673366e+00, -9.200889041438858e+00, -9.723769853911468e+03, -9.326373747492556e+02, 5.873719242951432e+00, -3.161283182528774e+02, -3.161283182528784e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
