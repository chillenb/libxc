
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.576299716704406e+01, -1.576301599697256e+01, -1.576315324057644e+01, -1.576287199335133e+01, -1.576301174518572e+01, -1.576301174518572e+01, -2.665670394014211e+00, -2.665642833197708e+00, -2.665069979394544e+00, -2.666561981979822e+00, -2.665700258034181e+00, -2.665700258034181e+00, -5.685884563472183e-01, -5.683941842904658e-01, -5.645083603485004e-01, -5.683848884473939e-01, -5.671527150707339e-01, -5.671527150707339e-01, -1.826213908167913e-01, -1.839108514722773e-01, -6.519064550192990e-01, -1.537622168501093e-01, -1.649590672664798e-01, -1.649590672664798e-01, -1.008532361448639e-02, -1.061411828339638e-02, -5.509447545920548e-02, -5.827955287561579e-03, -7.322130672141090e-03, -7.322130672141090e-03, -3.842338635610247e+00, -3.842004988788485e+00, -3.842330676561912e+00, -3.842035976358698e+00, -3.842165042248204e+00, -3.842165042248204e+00, -1.629372954605067e+00, -1.637471724506331e+00, -1.628769274643218e+00, -1.635957340653649e+00, -1.634097515705191e+00, -1.634097515705191e+00, -4.898136323790037e-01, -5.220636295813461e-01, -4.582381081320067e-01, -4.683587018074274e-01, -4.956945681478100e-01, -4.956945681478100e-01, -1.187738697446113e-01, -1.920904247545513e-01, -1.117035419779482e-01, -1.444101505180330e+00, -1.320163577968232e-01, -1.320163577968232e-01, -4.497120190914735e-03, -5.697407734130828e-03, -4.356952098791723e-03, -8.153279550529409e-02, -5.248442411236211e-03, -5.248442411236211e-03, -4.879871639991032e-01, -4.845074184810855e-01, -4.855917628831473e-01, -4.865960102140056e-01, -4.860803325137213e-01, -4.860803325137213e-01, -4.767713856589836e-01, -4.273249526669852e-01, -4.384329284565807e-01, -4.506996075402315e-01, -4.440794816014694e-01, -4.440794816014694e-01, -5.446189299490330e-01, -2.276759055992111e-01, -2.575933667587689e-01, -3.145299709153844e-01, -2.835472952208054e-01, -2.835472952208053e-01, -3.969408671674541e-01, -5.303432397880722e-02, -6.895028318289741e-02, -3.011425628215401e-01, -9.782471910962491e-02, -9.782471910962494e-02, -1.421840023430761e-02, -1.523287979727762e-03, -3.197271665713060e-03, -9.325988949743834e-02, -4.856594896419758e-03, -4.856594896561275e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.875396569924371e+01, -1.875404912157516e+01, -1.875438546891536e+01, -1.875314505598327e+01, -1.875379990168646e+01, -1.875379990168646e+01, -3.102047517784336e+00, -3.102090264630750e+00, -3.103154725808508e+00, -3.101874658900007e+00, -3.102170716842414e+00, -3.102170716842414e+00, -6.608322470911037e-01, -6.600057804639555e-01, -6.423565481073802e-01, -6.471064794672092e-01, -6.461357967731218e-01, -6.461357967731218e-01, -1.910669815122908e-01, -1.942423798422391e-01, -7.594793350641748e-01, -1.630240565780195e-01, -1.708463977371599e-01, -1.708463977371598e-01, -1.344073129015361e-02, -1.414453040343230e-02, -6.976664875193604e-02, -7.769594145928450e-03, -9.760708907045444e-03, -9.760708907045440e-03, -4.757186849357923e+00, -4.759972222900112e+00, -4.757309055351466e+00, -4.759768055178464e+00, -4.758601715384947e+00, -4.758601715384947e+00, -1.765551419774903e+00, -1.776860127133091e+00, -1.758462033618257e+00, -1.768569850727497e+00, -1.775127384928981e+00, -1.775127384928981e+00, -6.057123503929250e-01, -6.788170848466205e-01, -5.620959545119055e-01, -6.060374669947154e-01, -6.178459139494376e-01, -6.178459139494376e-01, -1.345178291526958e-01, -1.974857732871973e-01, -1.274215515947886e-01, -1.883401836458537e+00, -1.444224173677677e-01, -1.444224173677677e-01, -5.995715187562199e-03, -7.595602105185319e-03, -5.808869513515992e-03, -9.552845291318567e-02, -6.997201416177746e-03, -6.997201416177748e-03, -6.350093739267676e-01, -6.298488050961908e-01, -6.320609396588525e-01, -6.335871103037680e-01, -6.328612550123274e-01, -6.328612550123274e-01, -6.192012933050240e-01, -5.056779048790370e-01, -5.353301507944025e-01, -5.718647437516584e-01, -5.528551047075787e-01, -5.528551047075787e-01, -7.076097514140965e-01, -2.314926613197325e-01, -2.795135432860001e-01, -3.756295077633079e-01, -3.302709306080684e-01, -3.302709306080684e-01, -4.708669953663273e-01, -6.795879760846354e-02, -8.273106158389266e-02, -3.672750468357318e-01, -1.120667118864141e-01, -1.120667118864140e-01, -1.893559906312414e-02, -2.031034358482954e-03, -4.262874248400248e-03, -1.075136671298158e-01, -6.474895750507888e-03, -6.474895758511333e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.674506945091889e-09, -5.674447898289015e-09, -5.674160032398158e-09, -5.675038964326527e-09, -5.674582059915154e-09, -5.674582059915154e-09, -6.938080697677071e-06, -6.938125352327964e-06, -6.938447756136954e-06, -6.932737759176294e-06, -6.937488710843666e-06, -6.937488710843666e-06, -2.988815280038729e-03, -2.990797410002184e-03, -2.950902839566051e-03, -2.880671211725569e-03, -2.908723972491811e-03, -2.908723972491811e-03, -3.400492021867230e-01, -3.260082342530266e-01, -1.771571415516908e-03, -4.995610126435189e-01, -4.715119284333020e-01, -4.715119284333034e-01, 4.259869540793457e-03, 5.018989884868796e-03, -1.095610571731196e+00, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, -1.383077013240068e-06, -1.379549209177967e-06, -1.382923937580502e-06, -1.379810145598235e-06, -1.381289670721841e-06, -1.381289670721841e-06, -4.574777023074402e-05, -4.508766587215538e-05, -4.531670831381899e-05, -4.471647863898392e-05, -4.561562052307895e-05, -4.561562052307895e-05, -4.306003497104839e-03, 3.523876053636073e-04, -5.947379449395580e-03, -5.013599323897729e-04, -3.791756094623849e-03, -3.791756094623849e-03, -6.581553891911586e-01, -2.399670929848493e-01, -7.566222153080421e-01, -2.398732688485293e-05, -6.987560843756846e-01, -6.987560843756846e-01, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, -1.576633195064156e+00, 8.056878965244950e-03, 8.056878974167092e-03, 3.584220108466287e-03, 8.807205204330992e-04, 1.738650217143308e-03, 2.522062185562706e-03, 2.121648193141893e-03, 2.121648193141893e-03, 5.139921116560489e-03, -8.810739758941396e-03, -7.274652150226026e-03, -3.916212114469573e-03, -5.862364665628764e-03, -5.862364665628764e-03, 1.310504964087064e-06, -1.379154886920959e-01, -7.371635814529931e-02, -2.699851534083569e-02, -3.952155592827585e-02, -3.952155592827558e-02, -1.159491847353119e-02, -6.646991969343076e-01, -1.715106441582174e+00, -3.089717807920853e-02, -1.270040487138984e+00, -1.270040487138987e+00, 5.292039407050194e-03, 2.005779865925479e-03, 2.523877354250999e-03, -1.365518782969011e+00, 1.003269687435131e-02, 1.003269687251532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
