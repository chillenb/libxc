
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_pbeop_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.080240081397137e+01, -2.080242528572623e+01, -2.080261003552240e+01, -2.080220779752235e+01, -2.080241308780231e+01, -2.080241308780231e+01, -3.321547838677054e+00, -3.321523257469863e+00, -3.320991131774463e+00, -3.322644860863118e+00, -3.321549991737685e+00, -3.321549991737685e+00, -5.337579788525012e-01, -5.334187102452155e-01, -5.254452539862119e-01, -5.302384209990560e-01, -5.336324713950853e-01, -5.336324713950853e-01, -6.932767145138860e-02, -7.126891574522495e-02, -6.571889453294462e-01, -3.422196968129458e-02, -6.991006961683793e-02, -6.991006961683793e-02, -5.736444187105391e-04, -6.016632078413992e-04, -3.376989841745697e-03, -2.737338282251202e-04, -5.952673212349584e-04, -5.952673212349584e-04, -4.895952669311617e+00, -4.895491027806359e+00, -4.895911454881049e+00, -4.895552397981683e+00, -4.895707263461208e+00, -4.895707263461208e+00, -1.927775551961703e+00, -1.938359676234703e+00, -1.927788401990296e+00, -1.936036166736166e+00, -1.934925680021829e+00, -1.934925680021829e+00, -4.321515286583663e-01, -4.692168271888841e-01, -4.042537097501180e-01, -4.187906638335298e-01, -4.519947440630473e-01, -4.519947440630473e-01, -1.677717725672287e-02, -6.959415240291124e-02, -1.637175293446465e-02, -1.683930714358840e+00, -2.358437554684728e-02, -2.358437554684728e-02, -2.641102210225760e-04, -3.017099172336893e-04, -2.264920080825888e-04, -6.153986988071540e-03, -2.750387273510757e-04, -2.750387273510757e-04, -4.371215375503856e-01, -4.363229746640588e-01, -4.366138389461108e-01, -4.368332560921167e-01, -4.367234799723603e-01, -4.367234799723603e-01, -4.190558903376252e-01, -3.637814117522026e-01, -3.802738653255921e-01, -3.951725205192522e-01, -3.875572029541420e-01, -3.875572029541420e-01, -4.982405830083663e-01, -1.095985671869010e-01, -1.486552766872296e-01, -2.173568363723683e-01, -1.809949654299260e-01, -1.809949654299260e-01, -3.160808898418244e-01, -2.975032071026393e-03, -5.000614058150472e-03, -1.977140474843914e-01, -1.070558772258085e-02, -1.070558772258086e-02, -6.753565082688477e-04, -8.311865807364211e-05, -1.574098286138553e-04, -9.746779436972049e-03, -2.339350474947486e-04, -2.339350474947480e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_pbeop_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.506254489943011e+01, -2.506263106420455e+01, -2.506302406496938e+01, -2.506161292521335e+01, -2.506259026790210e+01, -2.506259026790210e+01, -3.962305505368747e+00, -3.962339627396684e+00, -3.963444352789466e+00, -3.962398004386146e+00, -3.962340270127616e+00, -3.962340270127616e+00, -6.787655522145756e-01, -6.778550682455288e-01, -6.553219707537832e-01, -6.612013998387304e-01, -6.784337201554083e-01, -6.784337201554083e-01, -1.194502631558436e-01, -1.222842442207886e-01, -8.368384951942505e-01, -6.340907456348893e-02, -1.203030518372499e-01, -1.203030518372499e-01, -7.756390745650058e-04, -8.149792392146257e-04, -5.498956513239193e-03, -3.651936525194817e-04, -8.061434981908944e-04, -8.061434981908944e-04, -6.107637008150606e+00, -6.110143631350927e+00, -6.107893603239041e+00, -6.109842634528210e+00, -6.108921846904616e+00, -6.108921846904616e+00, -2.128844838493618e+00, -2.145204640860147e+00, -2.121462506246148e+00, -2.134130440771492e+00, -2.149824429813627e+00, -2.149824429813627e+00, -5.861278266264507e-01, -6.547605795157690e-01, -5.504722611478957e-01, -5.847853054891179e-01, -6.138046714692631e-01, -6.138046714692631e-01, -3.137335827350327e-02, -1.197274940869753e-01, -3.070969433489983e-02, -2.224700259198429e+00, -4.436025282925864e-02, -4.436025282925864e-02, -3.523062333310413e-04, -4.028000820106971e-04, -3.022208305096945e-04, -1.087633176461343e-02, -3.671283100638698e-04, -3.671283100638698e-04, -6.185583874646687e-01, -6.126910000085819e-01, -6.147822073580842e-01, -6.164062667825990e-01, -6.155927209957658e-01, -6.155927209957658e-01, -5.951655925094532e-01, -4.909359357550593e-01, -5.199403239901298e-01, -5.480331168502833e-01, -5.336295573104668e-01, -5.336295573104668e-01, -6.917305032341702e-01, -1.754448868509141e-01, -2.254497680639735e-01, -3.132596399327920e-01, -2.663516835498880e-01, -2.663516835498879e-01, -4.331442676312028e-01, -4.731725429459193e-03, -8.573667573700466e-03, -2.909173631836363e-01, -1.990479713040529e-02, -1.990479713040530e-02, -9.178217047608467e-04, -1.107344949728249e-04, -2.097273279409449e-04, -1.812532401052905e-02, -3.121047648520505e-04, -3.121047648520496e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_pbeop_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.891406880419828e-09, -6.891365226240416e-09, -6.891094447042750e-09, -6.891778242254294e-09, -6.891385623554916e-09, -6.891385623554916e-09, -8.274754567178015e-06, -8.274933235604477e-06, -8.278524152122566e-06, -8.265568771860557e-06, -8.274710455852769e-06, -8.274710455852769e-06, -2.821519431624946e-03, -2.821951913479456e-03, -2.791684869290924e-03, -2.739885421104693e-03, -2.821724888882477e-03, -2.821724888882477e-03, 3.416295785793483e-02, 3.372173110586684e-02, -1.705231150317215e-03, 6.816276097999995e-02, 3.408283391638835e-02, 3.408283391638835e-02, 3.429102407034797e-01, 3.437843890658675e-01, 1.455135440339619e-01, 2.437638450244572e-01, 3.572028100926929e-01, 3.572028100926929e-01, -1.888429930393800e-06, -1.888587330600117e-06, -1.888438475040839e-06, -1.888560999722269e-06, -1.888521710014600e-06, -1.888521710014600e-06, -5.800360107608137e-05, -5.699522404609980e-05, -5.789021589257437e-05, -5.711083862455930e-05, -5.744491259299435e-05, -5.744491259299435e-05, -4.860895526194743e-03, -4.117362530129370e-03, -5.587170603214476e-03, -5.289024452351245e-03, -4.421750950912308e-03, -4.421750950912308e-03, 8.158900176188891e-02, 1.002520611708409e-02, 9.569951828065676e-02, -9.137967575673646e-05, 8.995338761247487e-02, 8.995338761247487e-02, 2.586623273446856e-01, 2.589893458911650e-01, 7.430370889967545e-01, 1.472918755139609e-01, 3.828808231040656e-01, 3.828808231040653e-01, -4.833161346546491e-03, -4.850162046531892e-03, -4.844649562327630e-03, -4.839993212007841e-03, -4.842381202088334e-03, -4.842381202088334e-03, -5.293342333111850e-03, -6.671129226020489e-03, -6.306944810334359e-03, -5.935775985286785e-03, -6.131388729926291e-03, -6.131388729926289e-03, -3.574957928929946e-03, -6.644865475834111e-03, -1.235010113680461e-02, -1.326618534086741e-02, -1.375433809972326e-02, -1.375433809972326e-02, -8.502693413467127e-03, 1.217314968490025e-01, 1.239864371776746e-01, -1.381703892430286e-02, 1.471524109229407e-01, 1.471524109229410e-01, 2.571549188651450e-01, 4.479039900467230e-01, 3.848949864413567e-01, 1.839884177730889e-01, 5.597859365636867e-01, 5.597859365636855e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
