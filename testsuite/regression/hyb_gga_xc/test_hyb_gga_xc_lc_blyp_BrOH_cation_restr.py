
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.092138995092306e+01, -2.092141730243372e+01, -2.092160737761635e+01, -2.092119902941213e+01, -2.092140325798296e+01, -2.092140325798296e+01, -3.345560199505227e+00, -3.345526768964114e+00, -3.344839559596487e+00, -3.346698058304308e+00, -3.345604364496367e+00, -3.345604364496367e+00, -5.399559287841031e-01, -5.395537799185877e-01, -5.302912010940602e-01, -5.355734315381810e-01, -5.340878830094881e-01, -5.340878830094881e-01, -5.463413478252127e-02, -5.737558782453215e-02, -6.508011925028057e-01, -1.762984278971585e-02, -3.236842173148134e-02, -3.236842173148133e-02, -1.048007652331068e-03, -1.102201039065091e-03, -1.305263007562441e-04, -6.095157579913941e-04, -7.639196719132471e-04, -7.639196719132471e-04, -4.924707815418138e+00, -4.924122960106944e+00, -4.924691563977806e+00, -4.924175102594938e+00, -4.924405567764707e+00, -4.924405567764707e+00, -1.944480589738184e+00, -1.955521888178597e+00, -1.943192223346617e+00, -1.952962025203878e+00, -1.951188644621089e+00, -1.951188644621089e+00, -4.413826570574255e-01, -4.766606075571347e-01, -4.002868443894373e-01, -4.099171141589726e-01, -4.490069416162173e-01, -4.490069416162173e-01, 9.917459640435838e-03, -4.550358790796120e-02, 1.106456658680210e-02, -1.690915917411555e+00, -3.408918213629231e-03, -3.408918213629231e-03, -4.714259163832419e-04, -5.959946290467876e-04, -4.568479741054846e-04, 7.866545823385055e-03, -5.494539961483316e-04, -5.494539961483316e-04, -4.280439560572769e-01, -4.283383677738543e-01, -4.282765568806749e-01, -4.281885861017900e-01, -4.282358718054398e-01, -4.282358718054398e-01, -4.122233396981492e-01, -3.572243922919904e-01, -3.745282025166262e-01, -3.903225655444945e-01, -3.823396746312456e-01, -3.823396746312456e-01, -5.063305323961796e-01, -8.831801429947750e-02, -1.333086110118719e-01, -2.151643720502170e-01, -1.723645271296428e-01, -1.723645271296428e-01, -3.183489318154833e-01, -5.344842026770438e-04, 5.767980775084674e-03, -2.020068200082028e-01, 6.736098090411351e-03, 6.736098090411363e-03, -1.470672658285330e-03, -1.605976538422519e-04, -3.359732922071609e-04, 7.192494462679081e-03, -5.087820355616428e-04, -5.087820355616423e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.512199811692446e+01, -2.512209226538835e+01, -2.512249429297376e+01, -2.512109390477859e+01, -2.512183002472339e+01, -2.512183002472339e+01, -3.975403393099794e+00, -3.975437172104672e+00, -3.976318256813100e+00, -3.975558241483451e+00, -3.975541764026215e+00, -3.975541764026215e+00, -6.925341501223442e-01, -6.917282803880178e-01, -6.737220465885452e-01, -6.797753142159350e-01, -6.783497319972702e-01, -6.783497319972702e-01, -1.319284287971141e-01, -1.335090132430511e-01, -8.216392774886019e-01, -9.824818874527336e-02, -1.098097205563687e-01, -1.098097205563687e-01, -1.392033805421808e-03, -1.463858863941384e-03, -6.735157488939976e-03, -8.105773154451054e-04, -1.015415521786768e-03, -1.015415521786768e-03, -6.107983483681459e+00, -6.110363971422827e+00, -6.108091425725211e+00, -6.110192916044570e+00, -6.109190632505935e+00, -6.109190632505935e+00, -2.152570144158830e+00, -2.169531652813786e+00, -2.138879321546678e+00, -2.153762574427401e+00, -2.168678020950946e+00, -2.168678020950946e+00, -5.937540507882111e-01, -6.599190645579605e-01, -5.417813161820766e-01, -5.700215800868673e-01, -6.052423332709148e-01, -6.052423332709148e-01, -6.496611021071960e-02, -1.485026273457469e-01, -5.698976091110723e-02, -2.220699817368310e+00, -7.415880677453379e-02, -7.415880677453379e-02, -6.272483047508704e-04, -7.926327189910723e-04, -6.078857900895362e-04, -2.462307881884648e-02, -7.308564488145879e-04, -7.308564488145879e-04, -6.044625747494768e-01, -5.977645796142455e-01, -6.000117620877381e-01, -6.019500049044952e-01, -6.009700069945565e-01, -6.009700069945565e-01, -5.857341056954131e-01, -4.845453339987782e-01, -5.096387116513925e-01, -5.372656767443165e-01, -5.227849015561138e-01, -5.227849015561138e-01, -6.969971727321593e-01, -1.956430056198014e-01, -2.360544907405808e-01, -3.162031585819953e-01, -2.711623324278575e-01, -2.711623324278575e-01, -4.390070838626197e-01, -6.051220584300618e-03, -1.414576090115749e-02, -2.978150178256986e-01, -3.931535812596940e-02, -3.931535812596928e-02, -1.952278719923609e-03, -2.139626033957028e-04, -4.472662318466751e-04, -3.503882947967644e-02, -6.768569272469306e-04, -6.768569272469300e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.139239795434102e-09, -7.139205642928802e-09, -7.138956930095729e-09, -7.139467067460421e-09, -7.139213528829688e-09, -7.139213528829688e-09, -8.564162875087095e-06, -8.564538962186695e-06, -8.572429080754041e-06, -8.552421065764789e-06, -8.563812760129112e-06, -8.563812760129112e-06, -2.779772263533867e-03, -2.774280087672536e-03, -2.607022401596235e-03, -2.563146181512335e-03, -2.586869179415476e-03, -2.586869179415476e-03, 2.861977490851374e-01, 2.652077986876991e-01, -1.799166629439162e-03, 8.993589278716255e-01, 5.738171374972764e-01, 5.738171374972765e-01, -3.186753697917427e-05, -3.784584955108425e-05, 9.577103471530533e+00, -6.630172041845896e-06, -1.467201596000635e-05, -1.467201596006215e-05, -2.037974676653000e-06, -2.039509804774697e-06, -2.038025443681735e-06, -2.039380819137733e-06, -2.038762661621547e-06, -2.038762661621547e-06, -5.796956879983428e-05, -5.693055135445950e-05, -5.792596727221831e-05, -5.700716941182256e-05, -5.741633711713127e-05, -5.741633711713127e-05, -5.320858351853940e-03, -5.507786268715792e-03, -6.349003523161796e-03, -7.621478455159289e-03, -5.254752358625350e-03, -5.254752358625350e-03, 2.909215603705252e+00, 3.016228717288770e-01, 3.583523969775154e+00, -1.101077269645301e-04, 1.804331388017252e+00, 1.804331388017252e+00, -3.909735236295703e-06, -6.969854108781901e-06, -1.180440172082608e-05, 7.990009007018224e+00, -1.164258400241355e-05, -1.164258400255693e-05, -7.854862277522622e-03, -7.201730621864471e-03, -7.400196659454425e-03, -7.586765568000372e-03, -7.490585809758456e-03, -7.490585809758456e-03, -8.904258801486042e-03, -6.546014370499160e-03, -7.084764766196010e-03, -7.623134210076183e-03, -7.357984843065037e-03, -7.357984843065037e-03, -4.673017622674931e-03, 9.638721481853074e-02, 2.713179687238657e-02, -9.097158865442094e-03, 1.929007307936603e-03, 1.929007307936596e-03, -7.728557466687346e-03, 9.188667938628681e+00, 9.879117746440309e+00, -1.260050441919842e-02, 5.177846392410643e+00, 5.177846392410647e+00, 1.031832185864446e-04, -5.293612149494051e-07, -2.551323645608341e-06, 5.900385746039733e+00, -1.104245603227089e-05, -1.104245603196124e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
