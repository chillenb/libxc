
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1c_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.688281225506862e+01, -1.688283896000746e+01, -1.688300436476248e+01, -1.688260609611402e+01, -1.688280814162381e+01, -1.688280814162381e+01, -2.851581552432829e+00, -2.851558323800296e+00, -2.851090269760561e+00, -2.852435041878489e+00, -2.851621240699006e+00, -2.851621240699006e+00, -5.985879443685295e-01, -5.984585311076546e-01, -5.971141104968929e-01, -6.011069558495064e-01, -6.024429100497434e-01, -6.024429100497434e-01, -1.877547723634895e-01, -1.890404509259241e-01, -6.884399930881714e-01, -1.565209913202993e-01, -1.738066658826771e-01, -1.738066658826771e-01, -6.443119052633278e-03, -6.828193118872734e-03, -4.465673604968250e-02, -3.539997380596409e-03, -7.187731561522302e-03, -7.187731561522302e-03, -4.136295780476226e+00, -4.136166807444229e+00, -4.136296764156845e+00, -4.136182771135402e+00, -4.136226405630362e+00, -4.136226405630362e+00, -1.742496453801960e+00, -1.750372490694293e+00, -1.743843582630675e+00, -1.750732370773782e+00, -1.746298489087751e+00, -1.746298489087751e+00, -5.112256583978684e-01, -5.424811334402445e-01, -4.773553724570728e-01, -4.857477260630130e-01, -5.178757804641964e-01, -5.178757804641965e-01, -1.177486299362356e-01, -1.999758465721997e-01, -1.096367474710263e-01, -1.543659175552407e+00, -1.318989703609494e-01, -1.318989703609494e-01, -2.696538925013547e-03, -3.454929118116359e-03, -2.620971002424683e-03, -7.398780829229321e-02, -3.948569489432107e-03, -3.948569489432109e-03, -4.976560917952839e-01, -5.015051638223058e-01, -5.011559657215664e-01, -5.002619724473851e-01, -5.008019464735584e-01, -5.008019464735584e-01, -4.795513672097628e-01, -4.453855801432191e-01, -4.558033455358956e-01, -4.679453657714273e-01, -4.613633666861153e-01, -4.613633666861153e-01, -5.674494102300258e-01, -2.391978787709155e-01, -2.704297213677225e-01, -3.237694789123517e-01, -2.945758110006084e-01, -2.945758110006084e-01, -4.125605466103501e-01, -4.241837357751264e-02, -5.938372678685993e-02, -3.073257318809155e-01, -9.303065694715587e-02, -9.303065694715584e-02, -9.322422006009421e-03, -8.663054905494399e-04, -1.895124813099082e-03, -8.772977011102093e-02, -3.514465373397818e-03, -3.514465373397812e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1c_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.067105040435819e+01, -2.067102714779697e+01, -2.067115054718539e+01, -2.067110000064368e+01, -2.067143928642796e+01, -2.067152174069422e+01, -2.067030755466402e+01, -2.067008081416586e+01, -2.067111165730030e+01, -2.067063307071901e+01, -2.067111165730030e+01, -2.067063307071901e+01, -3.400108651572074e+00, -3.400376425798345e+00, -3.400154656562100e+00, -3.400436193893344e+00, -3.401417993962839e+00, -3.401779297760972e+00, -3.399768109710511e+00, -3.400151763850197e+00, -3.399478817373389e+00, -3.401291775576025e+00, -3.399478817373389e+00, -3.401291775576025e+00, -6.796612437089489e-01, -6.851410004904751e-01, -6.776334624282760e-01, -6.843268096370421e-01, -6.503800439570987e-01, -6.422709448210169e-01, -6.507520939717222e-01, -6.534297245942607e-01, -6.917192616211738e-01, -6.139668797181671e-01, -6.917192616211738e-01, -6.139668797181671e-01, -1.942125977592926e-01, -1.880464706388406e-01, -1.966485288573284e-01, -1.905138975099569e-01, -7.767668967309094e-01, -8.117451515142715e-01, -1.591929753515097e-01, -1.573298188818937e-01, -1.403151410205371e-01, -2.590167105906506e-01, -1.403151410205370e-01, -2.590167105906511e-01, -7.355314163454886e-03, -9.941129927001085e-03, -7.601650277793758e-03, -1.066581270936085e-02, -5.513721019460530e-02, -6.285699446222327e-02, -5.010467819263088e-03, -4.575281731536130e-03, -1.216831209008773e-02, 4.258332821363591e-03, -1.216831209008773e-02, 4.258332821363567e-03, -5.199486753589891e+00, -5.198268012858465e+00, -5.201795535883420e+00, -5.200498273150158e+00, -5.199614370306379e+00, -5.198343949737296e+00, -5.201595103902411e+00, -5.200370617438260e+00, -5.200671185241124e+00, -5.199388839654358e+00, -5.200671185241124e+00, -5.199388839654358e+00, -1.794983798570766e+00, -1.794898583070802e+00, -1.812671263303189e+00, -1.812156918620965e+00, -1.771213898045904e+00, -1.777680769279507e+00, -1.786533341829516e+00, -1.793095463448471e+00, -1.822286071853657e+00, -1.806889966163369e+00, -1.822286071853657e+00, -1.806889966163369e+00, -6.330478897575846e-01, -6.320289810328552e-01, -6.982220675741544e-01, -6.981239054731558e-01, -5.752130506357582e-01, -5.930269410604623e-01, -6.184731958342325e-01, -6.328745395148223e-01, -6.577322304685822e-01, -6.332808924235285e-01, -6.577322304685822e-01, -6.332808924235287e-01, -1.322746546118346e-01, -1.303307397493816e-01, -1.952326233619253e-01, -1.942368612709862e-01, -1.253257844117588e-01, -1.235037342399228e-01, -1.994323879235965e+00, -1.993537103795221e+00, -1.528646281106482e-01, -1.262616485170547e-01, -1.528646281106482e-01, -1.262616485170547e-01, -3.232481909389134e-03, -4.017675800800445e-03, -4.486957291866006e-03, -4.868973580676305e-03, -2.930703798487530e-03, -4.060100724157343e-03, -9.105379983888026e-02, -9.248034500702002e-02, -1.036496142390412e-04, -7.317303193210515e-03, -1.036496142390478e-04, -7.317303193210524e-03, -6.314075485673403e-01, -6.328643524528762e-01, -6.441447352387493e-01, -6.456951479457071e-01, -6.413327876488338e-01, -6.427507586504090e-01, -6.374366588796249e-01, -6.388611056276160e-01, -6.395568480283490e-01, -6.409682282432375e-01, -6.395568480283490e-01, -6.409682282432375e-01, -6.110764266741161e-01, -6.125415977639364e-01, -5.139863958837013e-01, -5.159515951793469e-01, -5.532118274473246e-01, -5.555977669772737e-01, -5.937641149731008e-01, -5.954001079686616e-01, -5.736843389472188e-01, -5.753904610285149e-01, -5.736843389472188e-01, -5.753904610285149e-01, -7.305863356800545e-01, -7.311140826693460e-01, -2.329091791637436e-01, -2.319589730753959e-01, -2.733113702017468e-01, -2.730239731434689e-01, -3.703426275394763e-01, -3.716778864797677e-01, -3.159097569225607e-01, -3.160564220014021e-01, -3.159097569225607e-01, -3.160564220014021e-01, -4.750243497056106e-01, -4.780251450429164e-01, -5.619076891487013e-02, -5.716659083570541e-02, -7.475854546455857e-02, -7.890482889386845e-02, -3.660604481150631e-01, -3.703200977125590e-01, -1.123933566562097e-01, -1.034295016473313e-01, -1.123933566562095e-01, -1.034295016473312e-01, -1.163469266195011e-02, -1.368662606792363e-02, -1.156301865111736e-03, -1.172817342034346e-03, -2.059042885051208e-03, -2.971301308862545e-03, -1.032633021819189e-01, -1.039779861349322e-01, -4.801341922751543e-04, -6.539366787031530e-03, -4.801341922751492e-04, -6.539366787031521e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1c_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.141975073585296e-09, 0.000000000000000e+00, -9.142020419005236e-09, -9.141841749448906e-09, 0.000000000000000e+00, -9.141924199194967e-09, -9.141415580418842e-09, 0.000000000000000e+00, -9.141310390846678e-09, -9.142913125097275e-09, 0.000000000000000e+00, -9.143228502030290e-09, -9.141887266960825e-09, 0.000000000000000e+00, -9.142467331369930e-09, -9.141887266960825e-09, 0.000000000000000e+00, -9.142467331369930e-09, -1.223205564222364e-05, 0.000000000000000e+00, -1.223050918264624e-05, -1.223173613048491e-05, 0.000000000000000e+00, -1.223014121452879e-05, -1.222334861815313e-05, 0.000000000000000e+00, -1.222024045164250e-05, -1.223008338625351e-05, 0.000000000000000e+00, -1.222701720463242e-05, -1.224096945696100e-05, 0.000000000000000e+00, -1.221847230761907e-05, -1.224096945696100e-05, 0.000000000000000e+00, -1.221847230761907e-05, -7.692615854923319e-03, 0.000000000000000e+00, -7.497343102675532e-03, -7.751894777459944e-03, 0.000000000000000e+00, -7.514761430927394e-03, -8.366459699376900e-03, 0.000000000000000e+00, -8.613918058146802e-03, -8.271684789154644e-03, 0.000000000000000e+00, -8.194086931350071e-03, -6.877477488245924e-03, 0.000000000000000e+00, -9.132828461199701e-03, -6.877477488245924e-03, 0.000000000000000e+00, -9.132828461199701e-03, -8.298455175019492e-01, 0.000000000000000e+00, -8.903758090402590e-01, -8.121702640076129e-01, 0.000000000000000e+00, -8.674966300794578e-01, -4.543088489935733e-03, 0.000000000000000e+00, -3.833091594472883e-03, -1.383086080545893e+00, 0.000000000000000e+00, -1.440280271657720e+00, -1.379839379888439e+00, 0.000000000000000e+00, 8.659310543232415e+00, -1.379839379888438e+00, 0.000000000000000e+00, 8.659310543232444e+00, 2.359671807288249e+00, 0.000000000000000e+00, -3.731229423734995e+00, 2.966289578864712e+00, 0.000000000000000e+00, -4.382696423843924e+00, -1.128412291328136e+00, 0.000000000000000e+00, -3.497628159853701e+00, -1.285604514416121e+00, 0.000000000000000e+00, 6.961948880545130e-01, -1.206242416082451e+01, 0.000000000000000e+00, 1.237210240684173e+02, -1.206242416083155e+01, 0.000000000000000e+00, 1.237210240684430e+02, -2.356116446370133e-06, 0.000000000000000e+00, -2.358422873427766e-06, -2.352775633132696e-06, 0.000000000000000e+00, -2.355206553233922e-06, -2.355923835248952e-06, 0.000000000000000e+00, -2.358315398003639e-06, -2.353068500573962e-06, 0.000000000000000e+00, -2.355381386215899e-06, -2.354401759859298e-06, 0.000000000000000e+00, -2.356808717859834e-06, -2.354401759859298e-06, 0.000000000000000e+00, -2.356808717859834e-06, -1.194832329529179e-04, 0.000000000000000e+00, -1.195052270021654e-04, -1.162781915420208e-04, 0.000000000000000e+00, -1.163936849225113e-04, -1.218625641740951e-04, 0.000000000000000e+00, -1.211737837750508e-04, -1.190520693569091e-04, 0.000000000000000e+00, -1.183323060154972e-04, -1.158301755494453e-04, 0.000000000000000e+00, -1.176786151317235e-04, -1.158301755494453e-04, 0.000000000000000e+00, -1.176786151317235e-04, -1.061504568888386e-02, 0.000000000000000e+00, -1.069564723887191e-02, -8.622196970658384e-03, 0.000000000000000e+00, -8.961362469019372e-03, -1.639813379497310e-02, 0.000000000000000e+00, -1.370269817851192e-02, -1.018972868486759e-02, 0.000000000000000e+00, -8.807408489308855e-03, -8.606743455937975e-03, 0.000000000000000e+00, -1.065356925643173e-02, -8.606743455938006e-03, 0.000000000000000e+00, -1.065356925643174e-02, -1.837344164555298e+00, 0.000000000000000e+00, -2.063713305532969e+00, -6.567909324939031e-01, 0.000000000000000e+00, -6.636677135861770e-01, -1.635216429141456e+00, 0.000000000000000e+00, -2.571402267902995e+00, -1.286419119135856e-04, 0.000000000000000e+00, -1.290090005913384e-04, -1.209842996268896e+00, 0.000000000000000e+00, -2.782964007763028e+00, -1.209842996268896e+00, 0.000000000000000e+00, -2.782964007763028e+00, 1.376198717823148e+00, 0.000000000000000e+00, -1.310977902353055e+00, -5.345542791246505e-02, 0.000000000000000e+00, -6.068870162560704e-01, 2.702035813767605e+01, 0.000000000000000e+00, -2.480005427740365e+01, -3.097283275809315e+00, 0.000000000000000e+00, -3.049913247156929e+00, 8.729363592341544e+01, 0.000000000000000e+00, -3.226476840264165e+01, 8.729363592339143e+01, 0.000000000000000e+00, -3.226476840262701e+01, -5.874499488283539e-02, 0.000000000000000e+00, -5.963242299807253e-02, -1.297117253738420e-02, 0.000000000000000e+00, -1.315360647671092e-02, -1.979201526543842e-02, 0.000000000000000e+00, -2.022307662721325e-02, -3.096212461050894e-02, 0.000000000000000e+00, -3.143051317629283e-02, -2.451767103831221e-02, 0.000000000000000e+00, -2.498156178130299e-02, -2.451767103831221e-02, 0.000000000000000e+00, -2.498156178130299e-02, -1.250180317792213e-01, 0.000000000000000e+00, -1.237799507444717e-01, -2.468071566470941e-02, 0.000000000000000e+00, -2.423632048682006e-02, -1.888366965857731e-02, 0.000000000000000e+00, -1.840435468507154e-02, -1.187162712343803e-02, 0.000000000000000e+00, -1.163943245724093e-02, -1.546919616322779e-02, 0.000000000000000e+00, -1.517897114641445e-02, -1.546919616322779e-02, 0.000000000000000e+00, -1.517897114641445e-02, -6.370558627033559e-03, 0.000000000000000e+00, -6.632344043268032e-03, -3.601106953746366e-01, 0.000000000000000e+00, -3.618218435815118e-01, -2.231280631083488e-01, 0.000000000000000e+00, -2.220439759910375e-01, -9.221331208355053e-02, 0.000000000000000e+00, -9.045922997626932e-02, -1.492966602041813e-01, 0.000000000000000e+00, -1.494158634512139e-01, -1.492966602041816e-01, 0.000000000000000e+00, -1.494158634512137e-01, -3.398492265032723e-02, 0.000000000000000e+00, -3.298653559708716e-02, -2.036369217419457e+00, 0.000000000000000e+00, -2.313550263654682e+00, -1.750213456207041e+00, 0.000000000000000e+00, -3.043227291757982e+00, -1.021730626432928e-01, 0.000000000000000e+00, -9.518163273505038e-02, -1.685108397888075e+00, 0.000000000000000e+00, -4.749530218189763e+00, -1.685108397888098e+00, 0.000000000000000e+00, -4.749530218189772e+00, 3.866291530174155e-01, 0.000000000000000e+00, -2.651501936597638e+00, 2.067676025907044e+01, 0.000000000000000e+00, -2.283714136838437e+01, 1.109718981870634e+01, 0.000000000000000e+00, -8.542404512721069e+00, -3.135923510969556e+00, 0.000000000000000e+00, -3.589531177707984e+00, 9.547811231043718e+01, 0.000000000000000e+00, -2.520914503912575e+01, 9.547811231033528e+01, 0.000000000000000e+00, -2.520914503912288e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
