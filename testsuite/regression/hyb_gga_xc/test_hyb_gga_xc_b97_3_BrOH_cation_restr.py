
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.524368079079721e+01, -1.524370307018989e+01, -1.524384716657334e+01, -1.524351478015818e+01, -1.524368253093145e+01, -1.524368253093145e+01, -2.582369173453942e+00, -2.582345278870001e+00, -2.581855671810442e+00, -2.583187758068317e+00, -2.582401423163906e+00, -2.582401423163906e+00, -5.445866028534322e-01, -5.445310508481067e-01, -5.452448663997488e-01, -5.488189894215035e-01, -5.474525150335896e-01, -5.474525150335896e-01, -1.710207379191948e-01, -1.728155977647724e-01, -6.253200326503778e-01, -1.371668416086451e-01, -1.494089027601953e-01, -1.494089027601953e-01, -1.078699688423460e-02, -1.142401470628110e-02, -7.194326040371965e-02, -5.842328712247571e-03, -7.529029106885903e-03, -7.529029106885904e-03, -3.738682574444828e+00, -3.738577569804448e+00, -3.738683900157321e+00, -3.738591071228403e+00, -3.738625609988565e+00, -3.738625609988565e+00, -1.591046161128963e+00, -1.598006844337556e+00, -1.592661096242667e+00, -1.598817960700166e+00, -1.594096571827968e+00, -1.594096571827968e+00, -4.645830161509826e-01, -4.956634608816304e-01, -4.334532126351839e-01, -4.440021606652536e-01, -4.705059810411901e-01, -4.705059810411901e-01, -1.213207544511049e-01, -1.760531286002364e-01, -1.173886111139563e-01, -1.401253319904300e+00, -1.191994806106095e-01, -1.191994806106095e-01, -4.387172697375610e-03, -5.696301302680941e-03, -4.228268904153345e-03, -9.742535697378436e-02, -5.194014267979038e-03, -5.194014267979036e-03, -4.554194823195529e-01, -4.584948397325379e-01, -4.580152833407943e-01, -4.571098181077598e-01, -4.576247633816262e-01, -4.576247633816262e-01, -4.423097336998787e-01, -4.050983895108653e-01, -4.140111998251751e-01, -4.265928246165914e-01, -4.195779119726088e-01, -4.195779119726088e-01, -5.183068547479890e-01, -2.155775959384254e-01, -2.482772737388470e-01, -2.949804815289219e-01, -2.704526574361488e-01, -2.704526574361488e-01, -3.753289494427004e-01, -6.970927541269105e-02, -8.946295686699876e-02, -2.792532992887893e-01, -1.014347445776111e-01, -1.014347445776109e-01, -1.592382650271667e-02, -1.364251925342848e-03, -3.021362908781863e-03, -1.000884309492306e-01, -4.767027621232866e-03, -4.767027621232846e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.849879076396192e+01, -1.849888034742116e+01, -1.849923264544539e+01, -1.849790075325508e+01, -1.849860518160794e+01, -1.849860518160794e+01, -3.041167357334813e+00, -3.041233028663094e+00, -3.042823352648088e+00, -3.040615997552865e+00, -3.041316838561007e+00, -3.041316838561007e+00, -6.063942916661575e-01, -6.048504791838125e-01, -5.724329596044664e-01, -5.773779914884979e-01, -5.767707421030115e-01, -5.767707421030115e-01, -2.006215256142208e-01, -2.001696927071592e-01, -7.089667067136424e-01, -1.348345008652793e-01, -1.771383691538135e-01, -1.771383691538149e-01, -1.467151160817671e-02, -1.551673082152627e-02, -6.974778200501904e-02, -7.973256834462749e-03, -1.026522613018963e-02, -1.026522613018968e-02, -4.700701182546820e+00, -4.703148163297558e+00, -4.700809621583587e+00, -4.702970077674226e+00, -4.701945426809454e+00, -4.701945426809454e+00, -1.614731033182309e+00, -1.626918730127746e+00, -1.605521341098815e+00, -1.615672938716654e+00, -1.626634660775534e+00, -1.626634660775534e+00, -5.809102228764704e-01, -6.358613229257667e-01, -5.346728253325825e-01, -5.735717369657857e-01, -5.946851553731890e-01, -5.946851553731890e-01, -2.911201801994487e-02, -1.966579152914404e-01, -2.631627252100393e-02, -1.809067324881558e+00, -7.567026354959501e-02, -7.567026354959501e-02, -5.978963798295014e-03, -7.770638826704160e-03, -5.737791888143814e-03, -4.336236452442049e-02, -7.063442124625654e-03, -7.063442124625713e-03, -5.849079451882512e-01, -5.872364845586951e-01, -5.840650256551682e-01, -5.824309616548615e-01, -5.830209093060718e-01, -5.830209093060718e-01, -5.776597906214839e-01, -4.588300002986118e-01, -5.059241950456469e-01, -5.502305946256756e-01, -5.295554379288558e-01, -5.295554379288558e-01, -6.663303064080358e-01, -2.485245668153117e-01, -2.655403782578257e-01, -3.279133583617454e-01, -2.807128991385501e-01, -2.807128991385502e-01, -4.241038150326230e-01, -7.093723317522634e-02, -6.728510518490632e-02, -3.331573823481161e-01, -2.481110836385814e-02, -2.481110836385901e-02, -2.150603961001165e-02, -1.845158831766013e-03, -4.106493626483292e-03, -2.620025512929007e-02, -6.478848870171103e-03, -6.478848870171286e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.539099868294968e-09, -4.539018995723001e-09, -4.538693279736705e-09, -4.539895795137641e-09, -4.539260884574633e-09, -4.539260884574633e-09, -6.134361947545430e-06, -6.133968947669100e-06, -6.124259566211496e-06, -6.136561403536904e-06, -6.133316456309440e-06, -6.133316456309440e-06, -3.971252595516265e-03, -3.997602945825383e-03, -4.407305153834510e-03, -4.280629321536457e-03, -4.317331167828851e-03, -4.317331167828851e-03, -1.865673471213520e-01, -2.049943385703002e-01, -2.144150506582414e-03, -6.692039137662712e-01, -2.330580837686165e-01, -2.330580837686100e-01, -3.126485388235464e+01, -3.315535301216790e+01, -1.856274394136609e+01, -2.723915792109342e+01, -3.518235692072820e+01, -3.518235692074223e+01, -1.048732839169294e-06, -1.045522568957757e-06, -1.048593630214900e-06, -1.045759215226713e-06, -1.047098641089416e-06, -1.047098641089416e-06, -5.732467381733936e-05, -5.624822191601988e-05, -5.715060609667179e-05, -5.625922315013535e-05, -5.674401506659313e-05, -5.674401506659313e-05, -3.942320209791665e-03, -4.288244987163361e-03, -6.047326671689538e-03, -3.184540954374555e-03, -3.193639697921990e-03, -3.193639697921990e-03, -4.668868284049632e+00, -1.713409452817664e-01, -5.948191077909279e+00, -5.684429994725415e-05, -2.245394889794868e+00, -2.245394889794868e+00, -3.523847691026860e+01, -3.199720404447331e+01, -1.966819749328897e+02, -1.476419850715761e+01, -9.277837294949197e+01, -9.277837294957821e+01, -1.617745122134663e-02, -6.612116513383517e-03, -1.023486357319955e-02, -1.391165332963814e-02, -1.205238933888685e-02, -1.205238933888685e-02, -4.641990357242732e-03, -1.277036856329620e-02, -7.913806575183891e-03, -2.591033624241189e-03, -5.094878301999042e-03, -5.094878301999042e-03, -2.954277731765758e-03, -7.699610039937733e-02, -8.123943962116523e-02, -5.009282232304279e-02, -7.790229524707366e-02, -7.790229524707466e-02, -1.762464938364783e-02, -1.731367343655175e+01, -1.524336145449475e+01, -4.676096819768188e-02, -1.015241187036241e+01, -1.015241187036220e+01, -2.593490556106986e+01, -1.458499997788846e+02, -7.315946808431151e+01, -1.176363475808195e+01, -1.165342868282122e+02, -1.165342868282836e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
