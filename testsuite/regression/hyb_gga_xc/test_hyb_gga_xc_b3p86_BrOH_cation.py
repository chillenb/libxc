
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3p86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.688061169696221e+01, -1.688063486026622e+01, -1.688079032711644e+01, -1.688044462193299e+01, -1.688061830272206e+01, -1.688061830272206e+01, -2.840118379830465e+00, -2.840093709372069e+00, -2.839592041836123e+00, -2.840994713786107e+00, -2.840156280290469e+00, -2.840156280290469e+00, -5.955400722982301e-01, -5.952813457382061e-01, -5.902126002113161e-01, -5.943266624896656e-01, -5.945234291901269e-01, -5.945234291901269e-01, -1.858873668900523e-01, -1.874612064086247e-01, -6.850184646735891e-01, -1.564196937426042e-01, -1.747946978755733e-01, -1.747946978755733e-01, -5.188691613700192e-02, -5.209720908057777e-02, -9.687228100566696e-02, -4.617858553573066e-02, -4.714057687436467e-02, -4.714057687436464e-02, -4.111606680805151e+00, -4.111296010049167e+00, -4.111600142765414e+00, -4.111325741053900e+00, -4.111444803835434e+00, -4.111444803835434e+00, -1.722454829546383e+00, -1.730931895629586e+00, -1.722279305839493e+00, -1.729739678581097e+00, -1.727272143520569e+00, -1.727272143520569e+00, -5.137180895455338e-01, -5.451934201665702e-01, -4.799783762100328e-01, -4.888946355447784e-01, -5.204937461225086e-01, -5.204937461225088e-01, -1.314465857276053e-01, -1.953121824899841e-01, -1.262155640828324e-01, -1.534670950179283e+00, -1.370313727691626e-01, -1.370313727691626e-01, -4.138898958513010e-02, -4.454247294120409e-02, -2.957435486325091e-02, -1.061879283671725e-01, -3.584649878834150e-02, -3.584649878834151e-02, -5.058205050334953e-01, -5.047900028110798e-01, -5.051262631666713e-01, -5.054198436761443e-01, -5.052700988485714e-01, -5.052700988485714e-01, -4.928930401757293e-01, -4.457175386502720e-01, -4.585030541765445e-01, -4.715163539702443e-01, -4.647457935784000e-01, -4.647457935784000e-01, -5.697276607529173e-01, -2.327687462960123e-01, -2.656667447720659e-01, -3.258098729346802e-01, -2.932216881285539e-01, -2.932216881285540e-01, -4.134271774965912e-01, -9.722798426005390e-02, -1.050199460037067e-01, -3.117865731841393e-01, -1.116233814371310e-01, -1.116233814371310e-01, -5.930030336799988e-02, -2.501118597310685e-02, -3.327464427337059e-02, -1.092419929132568e-01, -3.369999346104074e-02, -3.369999346104072e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3p86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.035262865492734e+01, -2.035260463386275e+01, -2.035271493039463e+01, -2.035266769615349e+01, -2.035297769440538e+01, -2.035304569650407e+01, -2.035199854105232e+01, -2.035180350415985e+01, -2.035267726054158e+01, -2.035229200164555e+01, -2.035267726054158e+01, -2.035229200164555e+01, -3.369613929396038e+00, -3.369713757459041e+00, -3.369651521818207e+00, -3.369754429465464e+00, -3.370587473879652e+00, -3.370787904912661e+00, -3.369493540022868e+00, -3.369692558583022e+00, -3.369060077316403e+00, -3.370517703733471e+00, -3.369060077316403e+00, -3.370517703733471e+00, -7.039121461205017e-01, -7.071795256941455e-01, -7.024305988036761e-01, -7.064281537653679e-01, -6.791846861155177e-01, -6.739966969811260e-01, -6.813282557397460e-01, -6.830021196174373e-01, -7.064360315794532e-01, -6.560346804279547e-01, -7.064360315794532e-01, -6.560346804279547e-01, -2.005354932726666e-01, -2.047816048579091e-01, -2.038148070892836e-01, -2.087283061540678e-01, -8.019892648218122e-01, -8.279169023693927e-01, -1.476392808926471e-01, -1.487875828280749e-01, -1.844260285955970e-01, -1.450174074724435e-01, -1.844260285955969e-01, -1.450174074724435e-01, -1.941135259261152e-02, -1.947145634085416e-02, -1.992576804710986e-02, -1.997760283440498e-02, -4.222643601606491e-02, -4.244062672139012e-02, -1.425410272673854e-02, -1.427206235539668e-02, -1.625569001305688e-02, -1.452073355683127e-02, -1.625569001305686e-02, -1.452073355683126e-02, -5.109868520375472e+00, -5.108687520166334e+00, -5.112128232541322e+00, -5.110882564813280e+00, -5.109989563438843e+00, -5.108765904737544e+00, -5.111937290809641e+00, -5.110750926503918e+00, -5.111024503568490e+00, -5.109792226756112e+00, -5.111024503568490e+00, -5.109792226756112e+00, -1.848404959323745e+00, -1.848318155023782e+00, -1.864190326386175e+00, -1.863704260938227e+00, -1.830621315951492e+00, -1.834594642785570e+00, -1.844273097636417e+00, -1.848382578684482e+00, -1.869630393293888e+00, -1.859702135823073e+00, -1.869630393293888e+00, -1.859702135823073e+00, -6.404675663922628e-01, -6.393747714818436e-01, -7.033329901129570e-01, -7.038187610543715e-01, -5.863710373116902e-01, -6.020836723746116e-01, -6.207004520380892e-01, -6.337912450802027e-01, -6.623420103955078e-01, -6.391415509491485e-01, -6.623420103955078e-01, -6.391415509491486e-01, -9.031675069577397e-02, -9.071895970526590e-02, -1.925772423135609e-01, -1.931413509998370e-01, -8.082323230967779e-02, -8.329411127968141e-02, -1.987858200864790e+00, -1.987151888906656e+00, -1.160984081243221e-01, -1.189212240456475e-01, -1.160984081243221e-01, -1.189212240456475e-01, -1.190571065289834e-02, -1.213250957837377e-02, -1.379729452447655e-02, -1.392267329160501e-02, -9.989932667971789e-03, -9.938986034554443e-03, -5.122712141970244e-02, -5.151342072289982e-02, -1.175355294513393e-02, -1.205405035980569e-02, -1.175355294513395e-02, -1.205405035980569e-02, -6.567000460520155e-01, -6.584725419997911e-01, -6.505625573752228e-01, -6.523941658787885e-01, -6.527330760023757e-01, -6.545636218150341e-01, -6.545375033934860e-01, -6.563152470427535e-01, -6.536370066166090e-01, -6.554406958747149e-01, -6.536370066166090e-01, -6.554406958747149e-01, -6.410988913089648e-01, -6.424915138776403e-01, -5.347353086798412e-01, -5.364842406079050e-01, -5.651470317069482e-01, -5.670854865644975e-01, -5.958219462809188e-01, -5.973035991452597e-01, -5.803371010018247e-01, -5.818632052389520e-01, -5.803371010018247e-01, -5.818632052389520e-01, -7.338426408254015e-01, -7.350874007094415e-01, -2.435260758554523e-01, -2.443872350851022e-01, -2.936001061306041e-01, -2.955223237268346e-01, -3.912485250605546e-01, -3.926467130441743e-01, -3.402761608822921e-01, -3.402866487253319e-01, -3.402761608822921e-01, -3.402866487253320e-01, -4.959743278770745e-01, -4.985550647133952e-01, -4.316462076108398e-02, -4.318204797971267e-02, -4.403585320376183e-02, -4.435958144790378e-02, -3.815426655760160e-01, -3.852455518240276e-01, -7.067226107258956e-02, -7.202971229315938e-02, -7.067226107258961e-02, -7.202971229315942e-02, -2.436086717975139e-02, -2.433406164702658e-02, -6.046058630927595e-03, -5.630978078998929e-03, -9.241750289430370e-03, -9.246442668359363e-03, -6.503566913344550e-02, -6.565197895080023e-02, -1.055189101034770e-02, -1.147891345034827e-02, -1.055189101034771e-02, -1.147891345034825e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3p86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.062187680536546e-08, -3.228412736824136e-10, -1.062193677212224e-08, -1.062181743441766e-08, -3.228402969419139e-10, -1.062189346255032e-08, -1.062149525564217e-08, -3.228301010432921e-10, -1.062147004763016e-08, -1.062217085653245e-08, -3.228447294126412e-10, -1.062232812039123e-08, -1.062184650274588e-08, -3.228379071744598e-10, -1.062188993451801e-08, -1.062184650274588e-08, -3.228379071744598e-10, -1.062188993451801e-08, -1.332380067443026e-05, 9.882426136229381e-07, -1.332900052582700e-05, -1.332395319750759e-05, 9.887050576800609e-07, -1.332954342751685e-05, -1.333192556899447e-05, 9.992776717892891e-07, -1.333508465839725e-05, -1.330980889969161e-05, 9.797537129189278e-07, -1.331391516418636e-05, -1.333109261643371e-05, 9.886452081975237e-07, -1.332003025206414e-05, -1.333109261643371e-05, 9.886452081975237e-07, -1.332003025206414e-05, -7.061483171642883e-03, 3.157389543744275e-03, -7.069653693894689e-03, -7.073793209102514e-03, 3.141588560554956e-03, -7.083344577433248e-03, -7.370432032008802e-03, 2.709936831111437e-03, -7.368792264576535e-03, -7.160239807290397e-03, 2.638315205881254e-03, -7.164797470192062e-03, -7.264152521869912e-03, 2.676184624575107e-03, -7.080922712850543e-03, -7.264152521869912e-03, 2.676184624575107e-03, -7.080922712850543e-03, -9.056311420798617e-01, 5.131795695701475e-01, -7.930401741049173e-01, -8.839514785253253e-01, 5.122620585167450e-01, -7.574716548527314e-01, -4.171965714718655e-03, 1.667953175927246e-03, -3.847455570843325e-03, -1.937791573706799e+00, 6.969696704844084e-01, -1.837677955065038e+00, -6.959603576363966e-01, 5.902065927012461e-01, -5.298859896474635e+00, -6.959603576363963e-01, 5.902065927012460e-01, -5.298859896474640e+00, -1.601673132872440e+04, -8.801724209675806e+00, -1.341767679668728e+04, -1.421579106446383e+04, -1.176252995576329e+01, -1.165362933000177e+04, -1.005643766969105e+02, -1.658373864244567e+01, -8.773727824723186e+01, -6.750579431967100e+04, -8.391960425752988e-01, -7.031049712854567e+04, -2.221665174583283e+04, -4.760263297495377e+00, -1.460232614826168e+05, -2.221665174583286e+04, -4.760263297495415e+00, -1.460232614826167e+05, -2.994178428465465e-06, 3.159453464004554e-07, -2.997012238140220e-06, -2.994437035982406e-06, 3.199934978278792e-07, -2.997196684146481e-06, -2.994190183083568e-06, 3.161088994050259e-07, -2.996982549070463e-06, -2.994362404968065e-06, 3.196822924928796e-07, -2.997202396556876e-06, -2.994342966132796e-06, 3.180042363884568e-07, -2.997095542914424e-06, -2.994342966132796e-06, 3.180042363884568e-07, -2.997095542914424e-06, -1.036065598351259e-04, 3.366858137744414e-06, -1.036254702981903e-04, -1.013273609059596e-04, 3.541907566732560e-06, -1.014193239709044e-04, -1.042546397500841e-04, 2.630424073294445e-06, -1.042147422347498e-04, -1.022768721453063e-04, 2.792606932933811e-06, -1.021938856552583e-04, -1.018963789580154e-04, 3.830326196520517e-06, -1.022522306809744e-04, -1.018963789580154e-04, 3.830326196520517e-06, -1.022522306809744e-04, -1.307237675577738e-02, 9.015492847758402e-03, -1.327149311232741e-02, -1.072282068345118e-02, 1.014956536066282e-02, -1.074707294844173e-02, -1.893272985411052e-02, 1.188929280105433e-02, -1.607356896817178e-02, -1.871039739152909e-02, 1.558246973853453e-02, -1.537239528631728e-02, -1.106319583890957e-02, 8.860540782460589e-03, -1.438921025791682e-02, -1.106319583890957e-02, 8.860540782460589e-03, -1.438921025791682e-02, -5.678777379140400e+00, 2.128416359971166e-01, -5.573465013016285e+00, -7.267189197076560e-01, 2.820420153571364e-01, -7.138389431195535e-01, -7.821242941722805e+00, -9.232854113920727e-03, -6.761368856675522e+00, -1.489264078344348e-04, 8.863053580097506e-05, -1.493083460677277e-04, -3.802771612581088e+00, 9.171558989922359e-01, -3.516727804914926e+00, -3.802771612581088e+00, 9.171558989922359e-01, -3.516727804914926e+00, -1.699414895564240e+05, -7.611841527052976e-01, -1.460800053477323e+05, -7.954741270882060e+04, -1.490811723083083e+00, -7.449580836918198e+04, -2.992594116709057e+05, -3.752539179419557e+02, -2.614614200749006e+05, -2.598867095618494e+01, -4.179011635322388e+00, -2.531325482250096e+01, -2.314231223241307e+05, -5.281233094143472e+01, -9.243129419502527e+04, -2.314231223241305e+05, -5.281233094143447e+01, -9.243129419502524e+04, -1.514977394523795e-02, 1.722113290849174e-02, -1.482514712734341e-02, -1.506845171828258e-02, 1.460739951458409e-02, -1.477057717902132e-02, -1.511337710822971e-02, 1.533630662307876e-02, -1.481028155386499e-02, -1.514710697867801e-02, 1.606590201721765e-02, -1.483036705729266e-02, -1.513184496015549e-02, 1.568363790639911e-02, -1.482203597629420e-02, -1.513184496015549e-02, 1.568363790639911e-02, -1.482203597629420e-02, -1.689064187885264e-02, 2.098893021379511e-02, -1.653928349241991e-02, -2.340013027084530e-02, 1.368602617894253e-02, -2.300458787571802e-02, -2.116462010175898e-02, 1.436092067730267e-02, -2.079790826898035e-02, -1.937302962356695e-02, 1.552674071178302e-02, -1.904029348453406e-02, -2.026458359301788e-02, 1.489560636469810e-02, -1.990628215518290e-02, -2.026458359301788e-02, 1.489560636469810e-02, -1.990628215518290e-02, -8.899593179328997e-03, 8.111017706436343e-03, -8.879980079260143e-03, -3.402472283428623e-01, 1.542208503466373e-01, -3.334811247779642e-01, -1.954381675866451e-01, 1.041643874318326e-01, -1.894165767090548e-01, -8.614972596633862e-02, 5.995134900497334e-02, -8.403622522256657e-02, -1.283998503869859e-01, 8.082587159628378e-02, -1.291917921655873e-01, -1.283998503869860e-01, 8.082587159628382e-02, -1.291917921655874e-01, -3.207446226338830e-02, 1.961668716112302e-02, -3.126297804145279e-02, -1.028955496144076e+02, -1.648975802716597e+01, -1.011480021461397e+02, -4.615121667155446e+01, -9.356814775292905e+00, -4.282438737490920e+01, -1.088524898579736e-01, 8.489087749794065e-02, -1.017894061417520e-01, -1.347841739287836e+01, -9.725137301966187e-02, -1.236321485283449e+01, -1.347841739287836e+01, -9.725137301966190e-02, -1.236321485283449e+01, -5.378566090691822e+03, -1.094133493679440e+01, -4.886620788694335e+03, -5.023961750865807e+06, -1.676145706781664e+00, -5.846009238659542e+06, -5.637411380854080e+05, -3.865859031857028e+00, -4.801512567875979e+05, -1.600356226068456e+01, -8.003082581322393e-01, -1.524471281708912e+01, -3.313273200680585e+05, -9.187976207619899e+01, -1.200106489585747e+05, -3.313273200680593e+05, -9.187976207619931e+01, -1.200106489585751e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
