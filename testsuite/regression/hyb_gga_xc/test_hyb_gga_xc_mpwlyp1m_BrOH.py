
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpwlyp1m_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.008146342330831e+01, -2.008148557647882e+01, -2.008165842517957e+01, -2.008129418191814e+01, -2.008147448741860e+01, -2.008147448741860e+01, -3.377800347728769e+00, -3.377772919263077e+00, -3.377156357062963e+00, -3.378924270626976e+00, -3.377800410755337e+00, -3.377800410755337e+00, -7.025001097018250e-01, -7.024224254773691e-01, -7.017861026333108e-01, -7.061808267990828e-01, -7.024687564675957e-01, -7.024687564675957e-01, -2.159594035289636e-01, -2.175488041363361e-01, -8.175445313434571e-01, -1.714622793160843e-01, -2.164230406667327e-01, -2.164230406667327e-01, -6.424215102018722e-03, -7.121640203680690e-03, -7.283820996563840e-02, -1.391361135599182e-03, -7.039954682156195e-03, -7.039954682156195e-03, -4.868624666613867e+00, -4.867991115803187e+00, -4.868566089525705e+00, -4.868073367894654e+00, -4.868290957088004e+00, -4.868290957088004e+00, -2.064195141216298e+00, -2.073696315032320e+00, -2.065162293427566e+00, -2.072555312578396e+00, -2.069389962756480e+00, -2.069389962756480e+00, -5.866523247913403e-01, -6.100185103061099e-01, -5.595554114213879e-01, -5.628956728854726e-01, -6.045548615479894e-01, -6.045548615479894e-01, -1.354919772174635e-01, -2.277746454365512e-01, -1.342328934781457e-01, -1.783111979936468e+00, -1.511659525053154e-01, -1.511659525053154e-01, -1.323570683070892e-03, -1.663707621766432e-03, -1.226372751620550e-03, -9.646677068384762e-02, -1.522586893684120e-03, -1.522586893684120e-03, -5.735606440247774e-01, -5.766564064491023e-01, -5.756505207183054e-01, -5.748067151802121e-01, -5.752369551606992e-01, -5.752369551606992e-01, -5.549017512251324e-01, -5.266082098134065e-01, -5.361697740145825e-01, -5.440396955568512e-01, -5.399952566836248e-01, -5.399952566836248e-01, -6.392719435829330e-01, -2.760828598813307e-01, -3.151478118942432e-01, -3.761985735037359e-01, -3.440335977937742e-01, -3.440335977937742e-01, -4.788194197811211e-01, -6.544885547821781e-02, -8.783219960892066e-02, -3.487682892566388e-01, -1.164927517387374e-01, -1.164927517387374e-01, -8.360771833295387e-03, -2.856723616501647e-04, -6.332286141150696e-04, -1.127358047996394e-01, -1.231678947885641e-03, -1.231678947885637e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpwlyp1m_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.402556201310316e+01, -2.402563981683014e+01, -2.402600130981022e+01, -2.402472697136208e+01, -2.402560292381994e+01, -2.402560292381994e+01, -3.928415077754322e+00, -3.928444588543226e+00, -3.929415138483447e+00, -3.928561656278752e+00, -3.928446699937977e+00, -3.928446699937977e+00, -7.875073768946635e-01, -7.866058360131205e-01, -7.645901733517541e-01, -7.702576108581523e-01, -7.871787917293109e-01, -7.871787917293109e-01, -2.376571529695681e-01, -2.396663137164765e-01, -9.406819017416695e-01, -1.955607893556724e-01, -2.382359204853443e-01, -2.382359204853443e-01, -1.884104810931601e-02, -2.099065175567013e-02, -1.303851737400637e-01, -3.122277077513655e-03, -2.074732514759827e-02, -2.074732514759827e-02, -5.960904354323605e+00, -5.963183557971717e+00, -5.961137853958421e+00, -5.962910036802001e+00, -5.962072071358945e+00, -5.962072071358945e+00, -2.178046930998462e+00, -2.194023454773126e+00, -2.170506013085970e+00, -2.182917536529299e+00, -2.198829845013297e+00, -2.198829845013297e+00, -7.018207545493498e-01, -7.780272976629197e-01, -6.668809743241177e-01, -7.075971608714826e-01, -7.295502694654593e-01, -7.295502694654593e-01, -1.743554354529860e-01, -2.565444801695967e-01, -1.677704073055210e-01, -2.274326451644578e+00, -1.777790812290076e-01, -1.777790812290076e-01, -2.942418480400107e-03, -3.921485361279607e-03, -2.857068480128333e-03, -1.361585188502648e-01, -3.594671132430576e-03, -3.594671132430575e-03, -7.474372161350635e-01, -7.381621645384602e-01, -7.414538495865731e-01, -7.439727886480776e-01, -7.427167884354253e-01, -7.427167884354253e-01, -7.257951126067432e-01, -6.063847695281229e-01, -6.369043369852205e-01, -6.681907180056676e-01, -6.519484741226864e-01, -6.519484741226864e-01, -8.130816513450844e-01, -3.043907887118993e-01, -3.470290409612193e-01, -4.314230507563276e-01, -3.848523462378147e-01, -3.848523462378146e-01, -5.497886867166610e-01, -1.319643479597975e-01, -1.408019868520433e-01, -4.105039319428470e-01, -1.441199928239317e-01, -1.441199928239315e-01, -2.472289272953015e-02, -4.408402473528110e-04, -1.176166169148061e-03, -1.349951081066463e-01, -2.822855458137374e-03, -2.822855458137364e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpwlyp1m_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpwlyp1m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.909418032099164e-09, -6.909390410619248e-09, -6.909160827084778e-09, -6.909615276690022e-09, -6.909404354524792e-09, -6.909404354524792e-09, -8.933914175101923e-06, -8.934226927590606e-06, -8.941364753941181e-06, -8.921550305034287e-06, -8.933923702938654e-06, -8.933923702938654e-06, -4.843190030045662e-03, -4.840062372744320e-03, -4.706441002814286e-03, -4.601009682126134e-03, -4.842157849120386e-03, -4.842157849120386e-03, -3.731401966311723e-01, -3.742267872819936e-01, -2.717516002568600e-03, -4.170598060113824e-01, -3.738036288004732e-01, -3.738036288004732e-01, 4.596987531098549e+02, 4.483315756323637e+02, 1.804533332375753e+01, 4.309400767429460e+02, 4.660130790255021e+02, 4.660130790255021e+02, -2.071982346217412e-06, -2.073554322221510e-06, -2.072131011634858e-06, -2.073353436733748e-06, -2.072804368911387e-06, -2.072804368911387e-06, -6.492434884291444e-05, -6.373102069760688e-05, -6.481638161024285e-05, -6.388699722779931e-05, -6.425231739131171e-05, -6.425231739131171e-05, -1.064966252011327e-02, -1.003644370945795e-02, -1.280190816491656e-02, -1.352821822996427e-02, -9.545933090087114e-03, -9.545933090087114e-03, 1.655167319253352e-01, -1.881621780845322e-01, -1.249586639612676e-02, -1.256727101639803e-04, -3.890248118382702e-01, -3.890248118382702e-01, 4.594805812135539e+02, 4.456372821042592e+02, 1.283606017519594e+03, 3.414875789009121e+00, 6.574916215138390e+02, 6.574916215138381e+02, -1.472859795098993e-02, -1.274005528411658e-02, -1.313446227490077e-02, -1.364878336975210e-02, -1.335856848666727e-02, -1.335856848666727e-02, -1.699581186489594e-02, -1.552323810274431e-02, -1.510920257993724e-02, -1.495070215196399e-02, -1.502375590763110e-02, -1.502375590763109e-02, -8.243057613608834e-03, -1.236405774576913e-01, -9.219208950270802e-02, -5.707423415490809e-02, -7.428989924126973e-02, -7.428989924126975e-02, -2.242092606906824e-02, 2.562423270179913e+01, 7.537413973536147e+00, -8.148250980173494e-02, 5.959818410036632e-02, 5.959818410035744e-02, 3.274234172202105e+02, 1.005214819234918e+03, 7.515195249205370e+02, -3.877044940567709e-01, 9.764833077368445e+02, 9.764833077368421e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
