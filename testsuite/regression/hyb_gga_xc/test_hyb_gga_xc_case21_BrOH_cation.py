
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_case21_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.575159368680377e+01, -1.575161374120481e+01, -1.575175458172370e+01, -1.575145515358390e+01, -1.575160469837017e+01, -1.575160469837017e+01, -2.645632926836844e+00, -2.645607274776330e+00, -2.645078496388935e+00, -2.646492657343456e+00, -2.645665096747063e+00, -2.645665096747063e+00, -5.564741387065664e-01, -5.563311191372188e-01, -5.544027711550584e-01, -5.581394574095379e-01, -5.579576868905499e-01, -5.579576868905499e-01, -1.740779887661388e-01, -1.756847513454401e-01, -6.394473802109609e-01, -1.413565107724806e-01, -1.643196616527989e-01, -1.643196616527988e-01, -7.285227618334738e-03, -7.671993105252051e-03, -4.203131255468606e-02, -4.200134920424471e-03, -5.861798422209919e-03, -5.861798422209919e-03, -3.826716129848256e+00, -3.826445040159225e+00, -3.826710764541630e+00, -3.826471290830308e+00, -3.826574468043182e+00, -3.826574468043182e+00, -1.618971958627643e+00, -1.626441430489892e+00, -1.619868529830732e+00, -1.626464589696968e+00, -1.622679122754731e+00, -1.622679122754731e+00, -4.771794053099467e-01, -5.084504242868814e-01, -4.458459089088800e-01, -4.551361735054807e-01, -4.834446318160497e-01, -4.834446318160497e-01, -1.042840229799141e-01, -1.806776340486272e-01, -9.722447396947648e-02, -1.431476988253839e+00, -1.187395238310585e-01, -1.187395238310585e-01, -3.242577367895428e-03, -4.105904422165103e-03, -3.144536472747635e-03, -6.700263177005628e-02, -3.949683150436995e-03, -3.949683150436997e-03, -4.735914800674307e-01, -4.708005767737385e-01, -4.716673855615158e-01, -4.724719468600142e-01, -4.720584264570623e-01, -4.720584264570623e-01, -4.621345111709746e-01, -4.155122519871572e-01, -4.259059548156329e-01, -4.378521272668729e-01, -4.314143967507742e-01, -4.314143967507742e-01, -5.311358083961010e-01, -2.188573608605507e-01, -2.508185140548351e-01, -3.034118565454164e-01, -2.752887689521186e-01, -2.752887689521186e-01, -3.852767920068575e-01, -4.021194395576788e-02, -5.449144294668164e-02, -2.889892044278006e-01, -8.373286407443443e-02, -8.373286407443445e-02, -1.026911227485178e-02, -1.097352464396545e-03, -2.307809000399490e-03, -7.901293592540753e-02, -3.627201977900863e-03, -3.627201977900860e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_case21_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.885441144905393e+01, -1.885438969623180e+01, -1.885450322130408e+01, -1.885445680658805e+01, -1.885476873076671e+01, -1.885484287490820e+01, -1.885372708374328e+01, -1.885352180993591e+01, -1.885446169095714e+01, -1.885403299104470e+01, -1.885446169095714e+01, -1.885403299104470e+01, -3.104526313919682e+00, -3.104700498330376e+00, -3.104572161613806e+00, -3.104754332643969e+00, -3.105756412109713e+00, -3.106023201390526e+00, -3.104189560223722e+00, -3.104465662379366e+00, -3.103968563296621e+00, -3.105521859338369e+00, -3.103968563296621e+00, -3.105521859338369e+00, -6.365943509850986e-01, -6.401988853392357e-01, -6.349406324036683e-01, -6.393193270579974e-01, -6.101900076614816e-01, -6.059563875817551e-01, -6.124027597126013e-01, -6.137923013580879e-01, -6.380950296119623e-01, -6.004975739972945e-01, -6.380950296119623e-01, -6.004975739972945e-01, -1.938892119901413e-01, -1.954999708781727e-01, -1.954364405244253e-01, -1.973394393131567e-01, -7.267346761104287e-01, -7.542348805827911e-01, -1.611464942684725e-01, -1.622797374749452e-01, -1.821237513315752e-01, -1.484505154315053e-01, -1.821237513315750e-01, -1.484505154315053e-01, -9.396690523402347e-03, -9.981202869622348e-03, -9.847287870495955e-03, -1.054360744990340e-02, -5.391032866268467e-02, -5.654535521746661e-02, -5.646671035337602e-03, -5.552828804696204e-03, -8.374372503894337e-03, -4.773687053608096e-03, -8.374372503894339e-03, -4.773687053608098e-03, -4.762424827465534e+00, -4.761286942399860e+00, -4.765039752933752e+00, -4.763826615465055e+00, -4.762563105841931e+00, -4.761375945221173e+00, -4.764816563655212e+00, -4.763673148713610e+00, -4.763764288484242e+00, -4.762565425355647e+00, -4.763764288484242e+00, -4.762565425355647e+00, -1.682180708676512e+00, -1.682100650638408e+00, -1.695520197250439e+00, -1.695077567106546e+00, -1.669560592550992e+00, -1.672288046712214e+00, -1.680678964308299e+00, -1.683659200704550e+00, -1.699413858329937e+00, -1.691260618924773e+00, -1.699413858329937e+00, -1.691260618924773e+00, -5.929711205717969e-01, -5.919567683908369e-01, -6.625262034684336e-01, -6.630442583375356e-01, -5.402318587270317e-01, -5.560318327064944e-01, -5.838662714928888e-01, -5.964093755693323e-01, -6.154940259144134e-01, -5.929523776839792e-01, -6.154940259144135e-01, -5.929523776839793e-01, -1.264956529326980e-01, -1.268562912404285e-01, -2.018930552587135e-01, -2.023194395324303e-01, -1.173212084184295e-01, -1.208045566617302e-01, -1.868470907989747e+00, -1.867803805488733e+00, -1.396702779947371e-01, -1.388674212334178e-01, -1.396702779947371e-01, -1.388674212334178e-01, -4.236093571270918e-03, -4.402169184463411e-03, -5.433315140075140e-03, -5.515470347957786e-03, -4.064066367404614e-03, -4.302947008452423e-03, -8.533774781403919e-02, -8.587086553576355e-02, -4.152412314754230e-03, -5.696668144613949e-03, -4.152412314754233e-03, -5.696668144613950e-03, -6.185103438307866e-01, -6.202274063140193e-01, -6.129935088318402e-01, -6.147889836564050e-01, -6.152503683148822e-01, -6.170378098809912e-01, -6.168935361927879e-01, -6.186211653005405e-01, -6.161028639339357e-01, -6.178595233055556e-01, -6.161028639339357e-01, -6.178595233055556e-01, -6.031503955274130e-01, -6.045002430408097e-01, -4.842618738377776e-01, -4.860180051819484e-01, -5.199655152828313e-01, -5.219780228850500e-01, -5.565332496420461e-01, -5.580061489134592e-01, -5.382329654852499e-01, -5.397539297587480e-01, -5.382329654852499e-01, -5.397539297587480e-01, -6.909276655781489e-01, -6.922143300831533e-01, -2.401371495036473e-01, -2.405872484338885e-01, -2.731679956814326e-01, -2.737744078073520e-01, -3.520664436461767e-01, -3.534113766168645e-01, -3.047712503082000e-01, -3.046038674838478e-01, -3.047712503081998e-01, -3.046038674838478e-01, -4.485493322193923e-01, -4.511538353616422e-01, -5.288580684980244e-02, -5.320723527782448e-02, -7.000018679556230e-02, -7.185081691591298e-02, -3.478450319412459e-01, -3.516175171859018e-01, -1.027231034350341e-01, -1.043372621092411e-01, -1.027231034350341e-01, -1.043372621092411e-01, -1.344004428590566e-02, -1.392138754630068e-02, -1.461543556645186e-03, -1.464847667974904e-03, -2.974255826220908e-03, -3.163101367347195e-03, -9.811946072344745e-02, -9.918739217653993e-02, -3.932376920304474e-03, -5.222180383241907e-03, -3.932376920304473e-03, -5.222180383241901e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_case21_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.081996770630877e-08, 0.000000000000000e+00, -1.082002632656147e-08, -1.081985567482404e-08, 0.000000000000000e+00, -1.081994261698661e-08, -1.081942620153227e-08, 0.000000000000000e+00, -1.081935800384453e-08, -1.082072314163749e-08, 0.000000000000000e+00, -1.082097619738938e-08, -1.081993658468346e-08, 0.000000000000000e+00, -1.082025573768937e-08, -1.081993658468346e-08, 0.000000000000000e+00, -1.082025573768937e-08, -1.307114044173052e-05, 0.000000000000000e+00, -1.307350361409501e-05, -1.307082223614094e-05, 0.000000000000000e+00, -1.307339083910896e-05, -1.306558596956768e-05, 0.000000000000000e+00, -1.306608474280227e-05, -1.306658377034020e-05, 0.000000000000000e+00, -1.306767715115761e-05, -1.307885241822793e-05, 0.000000000000000e+00, -1.306286015268321e-05, -1.307885241822793e-05, 0.000000000000000e+00, -1.306286015268321e-05, -6.690174186287283e-03, 0.000000000000000e+00, -6.643883495222584e-03, -6.727918175214471e-03, 0.000000000000000e+00, -6.674073425855332e-03, -7.352187587792149e-03, 0.000000000000000e+00, -7.321153001597016e-03, -7.126054276060192e-03, 0.000000000000000e+00, -7.137666813160711e-03, -7.013611186925298e-03, 0.000000000000000e+00, -6.511941952802414e-03, -7.013611186925298e-03, 0.000000000000000e+00, -6.511941952802414e-03, -5.051219124734775e-01, 0.000000000000000e+00, -5.017487372189865e-01, -5.075095279444902e-01, 0.000000000000000e+00, -5.010106700905703e-01, -3.935643162771765e-03, 0.000000000000000e+00, -3.536331144825164e-03, -6.854968691065316e-01, 0.000000000000000e+00, -6.689312866174898e-01, -5.728617208220481e-01, 0.000000000000000e+00, -5.698881072031501e-01, -5.728617208220504e-01, 0.000000000000000e+00, -5.698881072031515e-01, 1.082795803644108e+00, 0.000000000000000e+00, 4.176926276066760e-01, 1.133067677238435e+00, 0.000000000000000e+00, 3.357832921212842e-01, -6.601372302276953e-01, 0.000000000000000e+00, -8.347750583452354e-01, 1.101227165559792e+00, 0.000000000000000e+00, 1.349845951032637e+00, -9.467343380572741e-01, 0.000000000000000e+00, 6.610025167727022e+00, -9.467343380596657e-01, 0.000000000000000e+00, 6.610025167736599e+00, -2.594813125145840e-06, 0.000000000000000e+00, -2.597324881177804e-06, -2.588793992032053e-06, 0.000000000000000e+00, -2.591388571505607e-06, -2.594523017202917e-06, 0.000000000000000e+00, -2.597093405130477e-06, -2.589273432894314e-06, 0.000000000000000e+00, -2.591790409259218e-06, -2.591753758056257e-06, 0.000000000000000e+00, -2.594327251885708e-06, -2.591753758056257e-06, 0.000000000000000e+00, -2.594327251885708e-06, -1.083747524724455e-04, 0.000000000000000e+00, -1.083935108730433e-04, -1.061909288778474e-04, 0.000000000000000e+00, -1.062803144434996e-04, -1.083568407084544e-04, 0.000000000000000e+00, -1.085768781948286e-04, -1.065586611965879e-04, 0.000000000000000e+00, -1.067034609158136e-04, -1.070514361082837e-04, 0.000000000000000e+00, -1.070664506306435e-04, -1.070514361082837e-04, 0.000000000000000e+00, -1.070664506306435e-04, -8.730826624072006e-03, 0.000000000000000e+00, -8.816185452155874e-03, -1.147254136436445e-03, 0.000000000000000e+00, -9.538812399731568e-04, -1.338882373574982e-02, 0.000000000000000e+00, -1.135087622329163e-02, -3.472294181395772e-03, 0.000000000000000e+00, -3.294210078908012e-03, -7.009021159972772e-03, 0.000000000000000e+00, -8.756961121939334e-03, -7.009021159972759e-03, 0.000000000000000e+00, -8.756961121939327e-03, -7.697593738920915e-01, 0.000000000000000e+00, -7.980774426481696e-01, -3.309017166572849e-01, 0.000000000000000e+00, -3.288278510798567e-01, -8.306605459114703e-01, 0.000000000000000e+00, -8.651567322790336e-01, -5.635721079576563e-05, 0.000000000000000e+00, -5.636545566851708e-05, -7.668860861404233e-01, 0.000000000000000e+00, -1.055788454298548e+00, -7.668860861404233e-01, 0.000000000000000e+00, -1.055788454298548e+00, 2.090182435213158e+00, 0.000000000000000e+00, 1.772009638198939e+00, 1.486668031602317e+00, 0.000000000000000e+00, 1.439463235078290e+00, 1.454738967624049e+01, 0.000000000000000e+00, 7.824555942565722e+00, -1.126325377718601e+00, 0.000000000000000e+00, -1.077351208437370e+00, 1.327569754171758e+01, 0.000000000000000e+00, -6.015440196910518e-01, 1.327569754172521e+01, 0.000000000000000e+00, -6.015440196952777e-01, 3.527815576583151e-03, 0.000000000000000e+00, 3.830444499120112e-03, -9.136678018500674e-04, 0.000000000000000e+00, -7.137079539958574e-04, 4.970494448588949e-04, 0.000000000000000e+00, 7.274141829429549e-04, 1.809539663853639e-03, 0.000000000000000e+00, 2.016496590180084e-03, 1.138684817808099e-03, 0.000000000000000e+00, 1.357625684132222e-03, 1.138684817808099e-03, 0.000000000000000e+00, 1.357625684132222e-03, 5.983746208415385e-03, 0.000000000000000e+00, 6.034573288424790e-03, -2.070570282366050e-02, 0.000000000000000e+00, -2.037861261159653e-02, -1.544094634076250e-02, 0.000000000000000e+00, -1.511811029822534e-02, -9.128757610390387e-03, 0.000000000000000e+00, -8.938844810555143e-03, -1.246447073457801e-02, 0.000000000000000e+00, -1.224079392125433e-02, -1.246447073457801e-02, 0.000000000000000e+00, -1.224079392125433e-02, -1.451853328171815e-03, 0.000000000000000e+00, -1.231790965854563e-03, -2.027385299436891e-01, 0.000000000000000e+00, -2.017491175629637e-01, -1.479975084560899e-01, 0.000000000000000e+00, -1.478843838200767e-01, -7.462790023097209e-02, 0.000000000000000e+00, -7.315993506489578e-02, -1.158893448324027e-01, 0.000000000000000e+00, -1.167548281446800e-01, -1.158893448324029e-01, 0.000000000000000e+00, -1.167548281446801e-01, -2.818684275170352e-02, 0.000000000000000e+00, -2.750186388212339e-02, -6.530170158759734e-01, 0.000000000000000e+00, -6.740766212430447e-01, -7.554807030460610e-01, 0.000000000000000e+00, -8.627130240162804e-01, -7.964695901516775e-02, 0.000000000000000e+00, -7.463538137496092e-02, -1.073341599807805e+00, 0.000000000000000e+00, -1.499438562609585e+00, -1.073341599807812e+00, 0.000000000000000e+00, -1.499438562609588e+00, 4.322676449272841e-01, 0.000000000000000e+00, 1.072971501602499e-01, 1.542906314747066e+01, 0.000000000000000e+00, 1.014767554948964e+01, 6.313692265299119e+00, 0.000000000000000e+00, 3.693854668682175e+00, -1.293841842315084e+00, 0.000000000000000e+00, -1.294168530256931e+00, 1.171975780597285e+01, 0.000000000000000e+00, 1.488275743605692e+00, 1.171975780597661e+01, 0.000000000000000e+00, 1.488275743600905e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
