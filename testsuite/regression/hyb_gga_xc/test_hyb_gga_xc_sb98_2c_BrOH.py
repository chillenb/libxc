
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2c_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.635578520263475e+01, -1.635580971700659e+01, -1.635596974109760e+01, -1.635556730692994e+01, -1.635579770720708e+01, -1.635579770720708e+01, -2.760402675212604e+00, -2.760387901765886e+00, -2.760093755489727e+00, -2.761173888423823e+00, -2.760406580672661e+00, -2.760406580672661e+00, -5.788994846856592e-01, -5.787783091782579e-01, -5.775786886841781e-01, -5.811154977647119e-01, -5.788528598063925e-01, -5.788528598063925e-01, -1.840159635406022e-01, -1.852493482499324e-01, -6.747293269503949e-01, -1.480325622093047e-01, -1.843712652171049e-01, -1.843712652171049e-01, -1.036234520240952e-02, -1.091244727318746e-02, -5.223635554877754e-02, -4.609682375548680e-03, -1.078536198780755e-02, -1.078536198780755e-02, -4.012061083579039e+00, -4.012031451229715e+00, -4.012061948488234e+00, -4.012038833575247e+00, -4.012040115981432e+00, -4.012040115981432e+00, -1.678100720124955e+00, -1.685679112011107e+00, -1.679076123963823e+00, -1.684932641443448e+00, -1.682118042514448e+00, -1.682118042514448e+00, -4.912229964134627e-01, -5.200765174296560e-01, -4.684607879859886e-01, -4.794608517996506e-01, -5.072540271562341e-01, -5.072540271562341e-01, -1.166432345349663e-01, -1.973227160100101e-01, -1.144131150646325e-01, -1.496929812058953e+00, -1.299134453364701e-01, -1.299134453364701e-01, -4.432726364152281e-03, -5.127553089182906e-03, -3.747197161870080e-03, -7.364752942435378e-02, -4.632431753483001e-03, -4.632431753483005e-03, -4.837190079968854e-01, -4.922730351024603e-01, -4.908069420044994e-01, -4.887338879355900e-01, -4.899041216511816e-01, -4.899041216511816e-01, -4.649942041686504e-01, -4.379016655695527e-01, -4.488610502261109e-01, -4.601793232141840e-01, -4.541984018554048e-01, -4.541984018554048e-01, -5.443136784563519e-01, -2.358446865792775e-01, -2.658623064230033e-01, -3.153275814053751e-01, -2.886060309938699e-01, -2.886060309938699e-01, -3.988241251351740e-01, -4.820439536125898e-02, -6.646880775422913e-02, -2.945936515958489e-01, -9.464487616751684e-02, -9.464487616751681e-02, -1.237524852536793e-02, -1.281777250508667e-03, -2.529163792999068e-03, -8.983350783736371e-02, -3.881929991171150e-03, -3.881929991171131e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2c_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.023184653070746e+01, -2.023191836029557e+01, -2.023224135907897e+01, -2.023106505394148e+01, -2.023188438988598e+01, -2.023188438988598e+01, -3.328975963942584e+00, -3.329016327797877e+00, -3.330258080198394e+00, -3.328803659368105e+00, -3.329010518683011e+00, -3.329010518683011e+00, -6.612049064368860e-01, -6.599324601920690e-01, -6.261561296268200e-01, -6.316184437463246e-01, -6.607437978241125e-01, -6.607437978241125e-01, -1.973600482627899e-01, -1.999274331095317e-01, -8.030445468321574e-01, -1.531408202797085e-01, -1.981291979238664e-01, -1.981291979238664e-01, -1.419386770504942e-02, -1.494842324487115e-02, -6.774757754505406e-02, -6.283686938697040e-03, -1.477347913001567e-02, -1.477347913001567e-02, -5.073943097028589e+00, -5.075893862569253e+00, -5.074143287554276e+00, -5.075660176794853e+00, -5.074943774639625e+00, -5.074943774639625e+00, -1.756707050467699e+00, -1.773443735947537e+00, -1.744995640866825e+00, -1.758056395700401e+00, -1.783260846781074e+00, -1.783260846781074e+00, -6.113117472148411e-01, -6.624020016824784e-01, -5.805476709720725e-01, -6.138658504189092e-01, -6.366486261063949e-01, -6.366486261063949e-01, -1.279172556467957e-01, -1.976719254165070e-01, -1.253204198432083e-01, -1.928289308412395e+00, -1.373086640067597e-01, -1.373086640067597e-01, -6.040539064688684e-03, -6.995572407694803e-03, -5.099407774216690e-03, -8.980859857194805e-02, -6.314846067484530e-03, -6.314846067484516e-03, -6.075483119767573e-01, -6.248470430393915e-01, -6.194034464621208e-01, -6.141302127612621e-01, -6.168485188501706e-01, -6.168485188501706e-01, -5.868841630125309e-01, -5.186746844802714e-01, -5.540903173966871e-01, -5.854311971824148e-01, -5.702292439695422e-01, -5.702292439695424e-01, -6.947110933090903e-01, -2.390592995467304e-01, -2.814813440647718e-01, -3.689467909375567e-01, -3.212369179267273e-01, -3.212369179267273e-01, -4.695388308121138e-01, -6.338270335514481e-02, -8.341884447290382e-02, -3.584518635419628e-01, -1.078546231553475e-01, -1.078546231553475e-01, -1.695930508464164e-02, -1.730368281209497e-03, -3.430946990106709e-03, -1.028954642273987e-01, -5.284244439289389e-03, -5.284244439289387e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2c_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.904192805685132e-09, -3.904146855745795e-09, -3.903926043069204e-09, -3.904678832589665e-09, -3.904168705485167e-09, -3.904168705485167e-09, -5.307365866986560e-06, -5.307213020319281e-06, -5.302149055658601e-06, -5.306450323309921e-06, -5.307198495922740e-06, -5.307198495922740e-06, -3.448974509965210e-03, -3.465278116710855e-03, -3.858373978089970e-03, -3.746787828543138e-03, -3.454917177088934e-03, -3.454917177088934e-03, -3.560015858170267e-01, -3.469825601847461e-01, -1.656294473997641e-03, -6.833472559697511e-01, -3.533875221626718e-01, -3.533875221626718e-01, -1.197898917778999e+00, -1.285701776196775e+00, -1.694666862711632e+00, -2.076786359805121e-02, -1.314105869203812e+00, -1.314105869203812e+00, -1.016780463056949e-06, -1.015623214415321e-06, -1.016660103733157e-06, -1.015760143674623e-06, -1.016186685326347e-06, -1.016186685326347e-06, -5.399643280026618e-05, -5.255713318719232e-05, -5.455539003402684e-05, -5.342136724090572e-05, -5.229322552284798e-05, -5.229322552284798e-05, -4.911263229782159e-03, -7.482629271244942e-03, -6.102579274654209e-03, -5.669612346961291e-03, -4.073321550773439e-03, -4.073321550773439e-03, -9.797108036347049e-01, -2.757788619525615e-01, -1.084304217648168e+00, -7.140124397010469e-05, -9.191327887871218e-01, -9.191327887871218e-01, 1.502238437245506e-02, -1.247772015305638e-01, 4.914637489329258e-01, -1.747368484987876e+00, -3.564672992478506e-02, -3.564672992273952e-02, -4.789318830343356e-02, -1.180959242549246e-02, -1.824061380779532e-02, -2.687038913458350e-02, -2.201750465972695e-02, -2.201750465972695e-02, -7.464568103438908e-02, -9.775970714460491e-03, -7.421108917451074e-03, -5.396240543724200e-03, -6.307715824221959e-03, -6.307715824221966e-03, -5.324057566857028e-03, -1.462163957059716e-01, -8.945490730018635e-02, -3.850621047327740e-02, -6.078014394180795e-02, -6.078014394180793e-02, -1.456775775048516e-02, -1.418050599581876e+00, -1.534257085411272e+00, -4.411897599964271e-02, -1.591073661180523e+00, -1.591073661180528e+00, -1.130266599935825e+00, 1.565965243118675e+00, 7.154547439914610e-01, -1.880206903036754e+00, 3.004790929362302e-01, 3.004790929149735e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
