
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_b97x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.533628361647965e+01, -1.533631490791010e+01, -1.533648528492045e+01, -1.533601909169647e+01, -1.533625891917065e+01, -1.533625891917065e+01, -2.568546850824144e+00, -2.568538490851701e+00, -2.568407309636420e+00, -2.569113182478102e+00, -2.568597395696801e+00, -2.568597395696801e+00, -5.394204186177953e-01, -5.390147554079053e-01, -5.307263561470115e-01, -5.345272932329764e-01, -5.334761413634150e-01, -5.334761413634150e-01, -1.732767407424074e-01, -1.741550988340771e-01, -6.206442953935352e-01, -1.543773995920266e-01, -1.600901140030903e-01, -1.600901140030904e-01, -1.422869723254505e-02, -1.496936098867659e-02, -7.138319793692571e-02, -8.235641196019378e-03, -1.034128705372764e-02, -1.034128705372763e-02, -3.769197173617469e+00, -3.769510386735649e+00, -3.769215839657002e+00, -3.769492255513129e+00, -3.769353351835222e+00, -3.769353351835222e+00, -1.525608387748800e+00, -1.533897260872752e+00, -1.523595294696523e+00, -1.530845459378975e+00, -1.531244038701664e+00, -1.531244038701664e+00, -4.755750050800681e-01, -5.184554429606305e-01, -4.431758909249434e-01, -4.637757958366471e-01, -4.828231658474373e-01, -4.828231658474373e-01, -1.342836794686304e-01, -1.873421843635488e-01, -1.282696269683481e-01, -1.434137076856766e+00, -1.389782812890725e-01, -1.389782812890725e-01, -6.356353221499482e-03, -8.050917199109935e-03, -6.154345748762897e-03, -9.989678067824305e-02, -7.413817606107235e-03, -7.413817606107223e-03, -4.869539389723098e-01, -4.813582810163334e-01, -4.832237763707342e-01, -4.848459092666813e-01, -4.840248336057263e-01, -4.840248336057263e-01, -4.763096559391537e-01, -4.062707601828330e-01, -4.229807203185237e-01, -4.419698684781489e-01, -4.319653235269189e-01, -4.319653235269189e-01, -5.404227644582004e-01, -2.164325260511500e-01, -2.422965618646972e-01, -2.979602004948215e-01, -2.662719121677620e-01, -2.662719121677619e-01, -3.771621999267164e-01, -6.913516603965743e-02, -8.733543543952181e-02, -2.885008800839092e-01, -1.132559418293203e-01, -1.132559418293202e-01, -2.000987540864936e-02, -2.153819392006467e-03, -4.519630838399126e-03, -1.096225255684921e-01, -6.860543905794924e-03, -6.860543905794924e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_b97x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.941152338777205e+01, -1.941159510785185e+01, -1.941190170663547e+01, -1.941083489790874e+01, -1.941139563012388e+01, -1.941139563012388e+01, -3.226054063377032e+00, -3.226093238767769e+00, -3.227074656113922e+00, -3.225958196860109e+00, -3.226175969649554e+00, -3.226175969649554e+00, -6.749086401642993e-01, -6.734758688948512e-01, -6.360157576246755e-01, -6.418069524351652e-01, -6.414809074997350e-01, -6.414809074997350e-01, -1.667147339323772e-01, -1.722246754635760e-01, -7.813520096052957e-01, -1.167746092403691e-01, -1.337530325292912e-01, -1.337530325292907e-01, -1.887080885414076e-02, -1.983765334906233e-02, -8.270358106462287e-02, -1.096320496321182e-02, -1.374877777822810e-02, -1.374877777822811e-02, -4.879588742046581e+00, -4.881442100040914e+00, -4.879672720763798e+00, -4.881308921384798e+00, -4.880529130687028e+00, -4.880529130687028e+00, -1.732216343634438e+00, -1.749037359978762e+00, -1.712234454366514e+00, -1.727173375822159e+00, -1.751117754813944e+00, -1.751117754813944e+00, -6.255560110627827e-01, -6.848625259285863e-01, -5.812214844708420e-01, -6.138276143182729e-01, -6.368618445649006e-01, -6.368618445649006e-01, -1.071805974821016e-01, -1.508195879035027e-01, -1.057473826822905e-01, -1.900092637150235e+00, -1.019450401099663e-01, -1.019450401099663e-01, -8.465956664997379e-03, -1.071677380158704e-02, -8.186645381782367e-03, -9.728083112100938e-02, -9.861970830134677e-03, -9.861970830134646e-03, -6.365677060626701e-01, -6.351048910718180e-01, -6.359244205466249e-01, -6.363630511197872e-01, -6.361719474328992e-01, -6.361719474328992e-01, -6.198554908796292e-01, -5.168373817022851e-01, -5.535960629782818e-01, -5.859355314699961e-01, -5.702174591072102e-01, -5.702174591072102e-01, -7.146844908887943e-01, -1.964024205959605e-01, -2.559519705936097e-01, -3.788548195206320e-01, -3.151746899132774e-01, -3.151746899132775e-01, -4.802515472655368e-01, -8.119733701987249e-02, -9.483808953126045e-02, -3.777314198945848e-01, -9.546634716183017e-02, -9.546634716182971e-02, -2.639866852933546e-02, -2.871031114421452e-03, -6.021450606482293e-03, -9.566967199263582e-02, -9.126899209817060e-03, -9.126899209817076e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_b97x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.569180651860738e-09, -2.569144432736316e-09, -2.568987700974071e-09, -2.569526485820825e-09, -2.569243555996235e-09, -2.569243555996235e-09, -2.881080951429615e-06, -2.880807869890548e-06, -2.874218036877999e-06, -2.883644974236330e-06, -2.880499210234433e-06, -2.880499210234433e-06, -1.102483765587172e-03, -1.128712229921926e-03, -1.791897008311152e-03, -1.719856786079309e-03, -1.716169326159674e-03, -1.716169326159674e-03, -4.288234598220546e-01, -3.930434721917404e-01, -5.928419436846965e-04, -1.138029598663598e+00, -8.042851428382023e-01, -8.042851428382000e-01, -1.320225500474429e+01, -1.393015953040822e+01, -5.757135962327372e+00, -1.207618255984671e+01, -1.530654788501759e+01, -1.530654788502548e+01, -4.934834122464709e-07, -4.909094593089256e-07, -4.933748330793412e-07, -4.911027402501943e-07, -4.921761639024905e-07, -4.921761639024905e-07, -3.358034974982819e-05, -3.247430393976986e-05, -3.470560379871779e-05, -3.369918782928438e-05, -3.242872958069540e-05, -3.242872958069540e-05, 9.616482196312557e-04, 3.956994706303863e-03, 9.205721173386030e-04, 5.683057168656176e-03, 1.278382671819144e-03, 1.278382671819144e-03, -2.267837644067650e+00, -4.231802788405519e-01, -2.652140613938158e+00, 1.874251293479494e-05, -2.039729690316191e+00, -2.039729690316191e+00, -1.593058831959015e+01, -1.421122392950853e+01, -8.913156389974090e+01, -5.092199014349654e+00, -4.147867720540451e+01, -4.147867720538201e+01, 7.800526195976779e-03, 5.891542567983514e-03, 6.503133575637170e-03, 7.055852434128974e-03, 6.773906090559135e-03, 6.773906090559135e-03, 9.556244462147850e-03, -2.067722197686415e-03, 8.633648670555941e-04, 3.907913189069996e-03, 2.361298720795244e-03, 2.361298720795244e-03, 3.027397892577432e-03, -1.803930329445982e-01, -7.799025664401954e-02, -5.893225544767469e-03, -3.144170695550096e-02, -3.144170695550084e-02, -2.556884618554269e-03, -5.347795731041047e+00, -4.756022415083557e+00, 7.519508234238179e-03, -4.487357159413522e+00, -4.487357159413562e+00, -1.052443060162183e+01, -7.002021057145359e+01, -3.382129252181316e+01, -4.819287061973399e+00, -5.239984029507148e+01, -5.239984029502300e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
