
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe50_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.052389110895791e+01, -1.052390566528927e+01, -1.052400289850171e+01, -1.052378566250180e+01, -1.052389486573799e+01, -1.052389486573799e+01, -1.778167078447199e+00, -1.778153233209203e+00, -1.777876030267789e+00, -1.778688373127229e+00, -1.778192492858406e+00, -1.778192492858406e+00, -3.761240512960229e-01, -3.759007734795468e-01, -3.714612858004814e-01, -3.740882905612363e-01, -3.741376035908626e-01, -3.741376035908626e-01, -1.139578278019753e-01, -1.150695878800601e-01, -4.326837312362166e-01, -9.314249996256305e-02, -1.075991918433006e-01, -1.075991918433006e-01, -5.052970497673824e-03, -5.320752216438055e-03, -2.888987238791388e-02, -2.914540317440532e-03, -4.067298871771919e-03, -4.067298871771919e-03, -2.576116299274848e+00, -2.576018969944096e+00, -2.576116183043984e+00, -2.576030166750926e+00, -2.576064370142838e+00, -2.576064370142838e+00, -1.077859134933515e+00, -1.083226679150616e+00, -1.077543282834672e+00, -1.082270169329115e+00, -1.081005184731562e+00, -1.081005184731562e+00, -3.291853570728369e-01, -3.573744624074729e-01, -3.071042947466485e-01, -3.200961030326032e-01, -3.342097812349029e-01, -3.342097812349029e-01, -6.998555799041453e-02, -1.188392863557551e-01, -6.539053789606723e-02, -9.786033483010106e-01, -7.872668850131787e-02, -7.872668850131787e-02, -2.250245780006126e-03, -2.849120377476934e-03, -2.181686298061930e-03, -4.552290900572274e-02, -2.740470371428848e-03, -2.740470371428853e-03, -3.358565320224351e-01, -3.319885261959705e-01, -3.332567128921924e-01, -3.343768808081226e-01, -3.338078625538555e-01, -3.338078625538555e-01, -3.286317136212535e-01, -2.824008674859516e-01, -2.931103721451322e-01, -3.053766906878034e-01, -2.988717989379175e-01, -2.988717989379175e-01, -3.724160186135206e-01, -1.436120095504189e-01, -1.652093438630632e-01, -2.062947869725390e-01, -1.837125923031984e-01, -1.837125923031983e-01, -2.619879287073298e-01, -2.766732593355977e-02, -3.729931527855652e-02, -1.994508579945626e-01, -5.629650192675232e-02, -5.629650192675234e-02, -7.119308895446663e-03, -7.616333857647406e-04, -1.601614059297059e-03, -5.326008754710544e-02, -2.516726326415990e-03, -2.516726326415984e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe50_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.269855278277996e+01, -1.269853810862467e+01, -1.269861158140790e+01, -1.269858118224035e+01, -1.269878475906309e+01, -1.269883163013792e+01, -1.269811632403033e+01, -1.269798502414461e+01, -1.269858428088013e+01, -1.269831507194906e+01, -1.269858428088013e+01, -1.269831507194906e+01, -2.127524750829372e+00, -2.127618502066880e+00, -2.127552137092883e+00, -2.127649822245860e+00, -2.128252018546128e+00, -2.128407323800215e+00, -2.127368749230007e+00, -2.127527316642375e+00, -2.127167927933553e+00, -2.128143133901657e+00, -2.127167927933553e+00, -2.128143133901657e+00, -4.573025340219973e-01, -4.594141851686770e-01, -4.561535455477649e-01, -4.587282177016700e-01, -4.362978548402839e-01, -4.333335011575853e-01, -4.379994055575300e-01, -4.389619871796966e-01, -4.538522460220988e-01, -4.258162869356371e-01, -4.538522460220988e-01, -4.258162869356371e-01, -1.282223943901784e-01, -1.295950167078189e-01, -1.305241600377745e-01, -1.322149349503591e-01, -5.200589403733094e-01, -5.365506837133824e-01, -1.005940086071924e-01, -1.012963711525839e-01, -1.143394940013810e-01, -9.434572215410231e-02, -1.143394940013809e-01, -9.434572215410225e-02, -6.507561017804681e-03, -6.913570166982670e-03, -6.817654835844633e-03, -7.301359921951548e-03, -3.636720440956464e-02, -3.819633243999218e-02, -3.916292930933781e-03, -3.851142788912116e-03, -5.807401049955584e-03, -3.306986646511174e-03, -5.807401049955582e-03, -3.306986646511172e-03, -3.229748291216400e+00, -3.229004708604728e+00, -3.231337643699083e+00, -3.230547315331482e+00, -3.229833128831135e+00, -3.229058874540314e+00, -3.231202046732259e+00, -3.230454934566331e+00, -3.230562167008616e+00, -3.229780905703434e+00, -3.230562167008616e+00, -3.229780905703434e+00, -1.166501394706358e+00, -1.166447459162902e+00, -1.176277187210538e+00, -1.175977112191990e+00, -1.155883170333247e+00, -1.158091428704045e+00, -1.164245034134870e+00, -1.166569967493058e+00, -1.179476344538696e+00, -1.173618019482564e+00, -1.179476344538696e+00, -1.173618019482564e+00, -4.275470865789783e-01, -4.269453181798188e-01, -4.705154742163870e-01, -4.708316846734871e-01, -3.925358920791369e-01, -4.017869139740208e-01, -4.185532331183980e-01, -4.256718320989692e-01, -4.416731027095011e-01, -4.283935311607172e-01, -4.416731027095012e-01, -4.283935311607173e-01, -8.043656263022143e-02, -8.062477140194012e-02, -1.270940456485718e-01, -1.273417330798586e-01, -7.489344194252127e-02, -7.717249616331200e-02, -1.285298813539099e+00, -1.284875851314970e+00, -8.759289454925054e-02, -8.626692266575645e-02, -8.759289454925054e-02, -8.626692266575645e-02, -2.938547651642083e-03, -3.053857052407499e-03, -3.768123710693528e-03, -3.825177254850581e-03, -2.817129942114194e-03, -2.982995508448057e-03, -5.582561021470091e-02, -5.620959934455406e-02, -2.877889341571155e-03, -3.950205023864293e-03, -2.877889341571162e-03, -3.950205023864301e-03, -4.378917101976450e-01, -4.388732909261799e-01, -4.364967010004510e-01, -4.375311329957155e-01, -4.372421278476285e-01, -4.382703440546366e-01, -4.376736923527227e-01, -4.386634878407077e-01, -4.374824741398879e-01, -4.384909847978357e-01, -4.374824741398879e-01, -4.384909847978357e-01, -4.266143696766148e-01, -4.273754852247508e-01, -3.531205544781457e-01, -3.541602233026966e-01, -3.780591728993500e-01, -3.792281601868490e-01, -4.016087951676310e-01, -4.024575003280428e-01, -3.900855930107607e-01, -3.909673578499296e-01, -3.900855930107607e-01, -3.909673578499296e-01, -4.903198034072659e-01, -4.910920989695792e-01, -1.558388499101024e-01, -1.561677118448916e-01, -1.878358721174934e-01, -1.885892807767849e-01, -2.614141782601607e-01, -2.621996690251527e-01, -2.220931692508119e-01, -2.220561488665150e-01, -2.220931692508119e-01, -2.220561488665150e-01, -3.285653934503159e-01, -3.300951674279696e-01, -3.580090375623615e-02, -3.602408202719967e-02, -4.670172705233817e-02, -4.797451656002383e-02, -2.596702084059238e-01, -2.617483910448643e-01, -6.563997916961588e-02, -6.648745161576915e-02, -6.563997916961591e-02, -6.648745161576917e-02, -9.295541290690093e-03, -9.629955246442274e-03, -1.014296407617457e-03, -1.016586066742738e-03, -2.063470962946443e-03, -2.194568347021046e-03, -6.294863081455014e-02, -6.367862070190183e-02, -2.725501700432866e-03, -3.621237570723883e-03, -2.725501700432861e-03, -3.621237570723877e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe50_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.858457813417666e-09, 3.855567579455844e-10, -6.858496861410242e-09, -6.858397389771743e-09, 3.855637563905792e-10, -6.858451988169485e-09, -6.858146739763501e-09, 3.855734091993355e-10, -6.858112752989899e-09, -6.858843058343648e-09, 3.854697494807899e-10, -6.858985529926446e-09, -6.858441904662160e-09, 3.855271085313426e-10, -6.858581812834671e-09, -6.858441904662160e-09, 3.855271085313426e-10, -6.858581812834671e-09, -8.434253555660372e-06, 2.158879157656427e-06, -8.437121877374443e-06, -8.434206557169068e-06, 2.159323527660124e-06, -8.437298027438757e-06, -8.435681760218439e-06, 2.169371669283230e-06, -8.437163219899892e-06, -8.427988020382447e-06, 2.149943255801801e-06, -8.430037891274979e-06, -8.439554212205852e-06, 2.159156568071321e-06, -8.430397972776013e-06, -8.439554212205852e-06, 2.159156568071321e-06, -8.430397972776013e-06, -4.270218143817105e-03, 3.586683876242116e-03, -4.272976791550918e-03, -4.287323122193151e-03, 3.559577090514688e-03, -4.291063080089415e-03, -4.665353868664597e-03, 2.876045381924161e-03, -4.644065979152813e-03, -4.517056363034481e-03, 2.810968523930000e-03, -4.526326526240246e-03, -4.598638697603999e-03, 2.852692094259074e-03, -4.262506725098744e-03, -4.598638697603999e-03, 2.852692094259074e-03, -4.262506725098744e-03, -4.886364643011629e-01, 3.108902575321890e-01, -4.497952630070673e-01, -4.829232869577952e-01, 3.280826843588528e-01, -4.354380733496009e-01, -2.542161302471256e-03, 1.940414170439823e-03, -2.298157896555842e-03, -7.406217513111983e-01, 2.258949661124237e-01, -7.137337775299846e-01, -4.611858935138104e-01, 1.882246441728870e-01, -1.117894266946681e+00, -4.611858935138102e-01, 1.882246441728873e-01, -1.117894266946682e+00, -2.446350288494530e+00, 8.471332723898200e-03, -2.421786925781540e+00, -2.577071340559589e+00, 9.964515393423459e-03, -2.563863172865644e+00, -1.404934877909005e+00, 5.126941006152715e-02, -1.412572956154887e+00, -2.243124582025852e+00, 3.008683449168684e-03, -2.182191670178036e+00, -2.444279788711442e+00, 4.414566270491809e-03, -6.205241591622412e+00, -2.444279788710997e+00, 4.414566270088269e-03, -6.205241591621977e+00, -1.791974002520878e-06, 5.666948009101149e-07, -1.793891787972662e-06, -1.790317862513003e-06, 5.704413223836728e-07, -1.792229266290333e-06, -1.791895274445439e-06, 5.668443577206054e-07, -1.793812773316645e-06, -1.790428291389765e-06, 5.701514261968389e-07, -1.792350880638378e-06, -1.791145339635067e-06, 5.686004611431787e-07, -1.793047358010448e-06, -1.791145339635067e-06, 5.686004611431787e-07, -1.793047358010448e-06, -6.721518475795354e-05, 1.221811741084532e-05, -6.722810574921966e-05, -6.578980769873671e-05, 1.218856108878283e-05, -6.585196692230712e-05, -6.744002347306603e-05, 1.161795009824474e-05, -6.749734193230018e-05, -6.622939389411492e-05, 1.159619612758267e-05, -6.624864900911385e-05, -6.624607859661450e-05, 1.250231835492394e-05, -6.636060657497412e-05, -6.624607859661450e-05, 1.250231835492394e-05, -6.636060657497412e-05, -6.090972316143838e-03, 1.180452397706796e-02, -6.224556406621133e-03, -2.361137390338235e-03, 1.489938286408802e-02, -2.357087264418427e-03, -9.477745722155647e-03, 1.535577972946644e-02, -7.425571712807877e-03, -5.391898329823723e-03, 2.278859644535717e-02, -3.307649050580978e-03, -4.576214986959930e-03, 1.179162458306085e-02, -6.864688921005196e-03, -4.576214986959931e-03, 1.179162458306085e-02, -6.864688921005195e-03, -9.084369734111030e-01, 1.261488607621168e-01, -9.238648952331571e-01, -3.333836898649052e-01, 1.139695105238702e-01, -3.296775939644329e-01, -1.034171942268121e+00, 1.279112469154852e-01, -1.000262800104949e+00, -5.904472526890328e-05, 1.207887057881010e-04, -5.926828703558305e-05, -9.331150132800672e-01, 2.409472748596690e-01, -1.128623389025431e+00, -9.331150132800672e-01, 2.409472748596690e-01, -1.128623389025431e+00, -3.149572356099846e+00, 2.933546798259037e-03, -2.725868013814035e+00, -2.711454701073848e+00, 3.699144102256803e-03, -2.503281184946824e+00, -1.543685362074124e+01, 3.685108437354808e-02, -1.717457797711409e+01, -1.573816637426308e+00, 1.250822448857004e-01, -1.514233934200252e+00, -7.678563018431452e+00, 1.410360645889085e-02, -7.542205729840150e+00, -7.678563018428141e+00, 1.410360646869916e-02, -7.542205729836851e+00, -1.361629353644879e-03, 2.514346072918196e-02, -1.154980809722457e-03, -3.059076088213325e-03, 2.157065992117518e-02, -2.857186728430265e-03, -2.523150491836471e-03, 2.270457728491302e-02, -2.319818866066503e-03, -2.032646818994515e-03, 2.373865089872573e-02, -1.827495311521370e-03, -2.283678937328306e-03, 2.321019190891285e-02, -2.079400061767699e-03, -2.283678937328306e-03, 2.321019190891285e-02, -2.079400061767699e-03, -7.875374647545071e-04, 2.977269840520045e-02, -5.830640742459682e-04, -1.325342091613091e-02, 1.592277215307748e-02, -1.297228452790794e-02, -1.039754549622412e-02, 1.838749842245184e-02, -1.012494335679668e-02, -7.173837807624260e-03, 2.169730037966074e-02, -6.940971123094749e-03, -8.862163393817990e-03, 1.995497716545398e-02, -8.608456602119065e-03, -8.862163393817990e-03, 1.995497716545398e-02, -8.608456602119065e-03, -2.183506893796357e-03, 1.183264719377924e-02, -2.148390476597113e-03, -1.857922039592009e-01, 8.498631964250428e-02, -1.833577753279971e-01, -1.167797476944152e-01, 7.821972418059023e-02, -1.142674054186597e-01, -4.665567822251082e-02, 6.964082434152352e-02, -4.518122488652407e-02, -7.630885076770250e-02, 7.796350422599263e-02, -7.695542260930391e-02, -7.630885076770252e-02, 7.796350422599266e-02, -7.695542260930402e-02, -1.795970931155572e-02, 2.285950305464996e-02, -1.738334150987984e-02, -1.287743294000121e+00, 4.213028450134424e-02, -1.289245518182981e+00, -1.254339320243066e+00, 6.458066222247318e-02, -1.281574311416630e+00, -5.076630833292502e-02, 1.099497136873529e-01, -4.568638276978734e-02, -1.508972754894085e+00, 2.182010199987041e-01, -1.776018071427817e+00, -1.508972754894085e+00, 2.182010199987039e-01, -1.776018071427817e+00, -1.936746936798978e+00, 1.056259116938041e-02, -1.977257480025823e+00, -9.693159774992164e+00, 4.011531506685853e-03, -1.717150323284793e+01, -5.981183289986666e+00, 5.020763908060611e-03, -6.367531408274102e+00, -1.706476902484961e+00, 2.002688123716920e-01, -1.667871174003312e+00, -1.583645483625657e+01, 1.800188742308661e-02, -7.828093951965131e+00, -1.583645483625292e+01, 1.800188743452388e-02, -7.828093951961476e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
