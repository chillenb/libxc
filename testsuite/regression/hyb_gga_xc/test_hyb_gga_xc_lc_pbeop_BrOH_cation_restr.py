
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_pbeop_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.080287821662026e+01, -2.080290633940849e+01, -2.080309799232295e+01, -2.080267821112783e+01, -2.080288869182171e+01, -2.080288869182171e+01, -3.321670701895857e+00, -3.321638615665012e+00, -3.320982126513568e+00, -3.322783350444813e+00, -3.321715961740120e+00, -3.321715961740120e+00, -5.356387148959064e-01, -5.352509934987711e-01, -5.266639478923386e-01, -5.318434250726106e-01, -5.303518064818459e-01, -5.303518064818459e-01, -6.203151698451931e-02, -6.406931542865210e-02, -6.452630962776267e-01, -3.360905666071193e-02, -4.383354924052099e-02, -4.383354924052098e-02, -3.375462352437856e-04, -3.552902466957250e-04, -2.409372225216300e-03, -1.953750090651812e-04, -2.452228025124328e-04, -2.452228025124328e-04, -4.898018149214107e+00, -4.897542431753362e+00, -4.898006346755152e+00, -4.897586226666137e+00, -4.897771410020053e+00, -4.897771410020053e+00, -1.928460450873539e+00, -1.939394768238758e+00, -1.927249090930955e+00, -1.936923984794592e+00, -1.935072227458714e+00, -1.935072227458714e+00, -4.385345391980826e-01, -4.760795249010690e-01, -3.976686069039395e-01, -4.091274572440977e-01, -4.462750866200310e-01, -4.462750866200310e-01, -1.447852163524160e-02, -6.158761249947584e-02, -1.219130501232894e-02, -1.686133837838214e+00, -2.107879554206796e-02, -2.107879554206796e-02, -1.509726918936843e-04, -1.910270076022088e-04, -1.463415536204644e-04, -5.414057858951426e-03, -1.760919737190727e-04, -1.760919737190727e-04, -4.288657119977662e-01, -4.280424745432915e-01, -4.283376292116460e-01, -4.285732287033391e-01, -4.284553577899755e-01, -4.284553577899755e-01, -4.134632583919637e-01, -3.549802174570488e-01, -3.721014084750188e-01, -3.885788820938966e-01, -3.801409818752679e-01, -3.801409818752679e-01, -5.054511043762999e-01, -9.925290563896953e-02, -1.387755176485832e-01, -2.147956649231787e-01, -1.741371295281701e-01, -1.741371295281701e-01, -3.165918372610548e-01, -2.260030719362394e-03, -3.647701759409929e-03, -2.014159867114956e-01, -8.843165503652634e-03, -8.843165503652620e-03, -4.769593585548500e-04, -5.136780704209152e-05, -1.075249747200502e-04, -7.751622088981974e-03, -1.630162472434815e-04, -1.630162472434813e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_pbeop_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.506324764454440e+01, -2.506334664143710e+01, -2.506376208009842e+01, -2.506228972384925e+01, -2.506306471210173e+01, -2.506306471210173e+01, -3.962522216029116e+00, -3.962562788638749e+00, -3.963600579792232e+00, -3.962564717956833e+00, -3.962668284381965e+00, -3.962668284381965e+00, -6.844690270124458e-01, -6.834717004583164e-01, -6.603370051841388e-01, -6.666073371296219e-01, -6.653416066432305e-01, -6.653416066432305e-01, -1.085340617906812e-01, -1.116239995394539e-01, -8.147295168555876e-01, -6.216257532893503e-02, -7.969211564243628e-02, -7.969211564243628e-02, -4.507999246310901e-04, -4.747606780825809e-04, -3.693652005463659e-03, -2.602839912607577e-04, -3.269205954986579e-04, -3.269205954986579e-04, -6.110476956676258e+00, -6.113064816321327e+00, -6.110593482406272e+00, -6.112878075848524e+00, -6.111789919596611e+00, -6.111789919596611e+00, -2.131646187613379e+00, -2.148537083345150e+00, -2.118153712190351e+00, -2.132890441358958e+00, -2.147721751888036e+00, -2.147721751888036e+00, -5.935969937654442e-01, -6.630595595505985e-01, -5.407032031306052e-01, -5.728606123360187e-01, -6.058011127194645e-01, -6.058011127194645e-01, -2.681620207360135e-02, -1.075973832570866e-01, -2.244187244475582e-02, -2.227342785916535e+00, -3.960555129383396e-02, -3.960555129383396e-02, -2.010993602697778e-04, -2.544993459436889e-04, -1.950619848233086e-04, -9.347242872776523e-03, -2.346922597050789e-04, -2.346922597050789e-04, -6.069142254107595e-01, -6.007246484540926e-01, -6.028884540736493e-01, -6.046851570331698e-01, -6.037849119335810e-01, -6.037849119335810e-01, -5.878089201748623e-01, -4.782533037551374e-01, -5.079796653245942e-01, -5.389799215471581e-01, -5.230228130230973e-01, -5.230228130230973e-01, -7.002490834565741e-01, -1.616910075107222e-01, -2.129285982592330e-01, -3.096250166668537e-01, -2.574160004789420e-01, -2.574160004789420e-01, -4.327207879487719e-01, -3.426810849025810e-03, -5.936602386251195e-03, -2.952534318016614e-01, -1.613615811021010e-02, -1.613615811021010e-02, -6.397234746946904e-04, -6.845005379761522e-05, -1.432415574552747e-04, -1.397831214058090e-02, -2.172624934800705e-04, -2.172624934800703e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_pbeop_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.890760250483490e-09, -6.890712391228785e-09, -6.890430212593620e-09, -6.891143692388225e-09, -6.890779707271533e-09, -6.890779707271533e-09, -8.273569692521407e-06, -8.273805851818464e-06, -8.278480839766491e-06, -8.264293479876554e-06, -8.273083329038287e-06, -8.273083329038287e-06, -2.822165256837733e-03, -2.823468417596589e-03, -2.818557025903494e-03, -2.759367576951927e-03, -2.781781963167044e-03, -2.781781963167044e-03, 3.202967938883118e-02, 3.167181242140121e-02, -1.773498234768222e-03, 5.630213670341511e-02, 5.135021803796096e-02, 5.135021803796097e-02, 1.633724252141822e-01, 1.725412791915406e-01, 9.517902768579969e-02, 1.489699112432779e-01, 1.890388775410587e-01, 1.890388775410591e-01, -1.885358843564905e-06, -1.885519791835048e-06, -1.885354041689593e-06, -1.885496325737506e-06, -1.885447322706002e-06, -1.885447322706002e-06, -5.796251498971007e-05, -5.691935265191298e-05, -5.790109141675761e-05, -5.698888237732997e-05, -5.740324975808243e-05, -5.740324975808243e-05, -4.704763864176749e-03, -3.980435678844701e-03, -5.758515872962024e-03, -5.557614508262265e-03, -4.543932185965034e-03, -4.543932185965034e-03, 6.749897842926905e-02, 1.243914170502104e-02, 7.497653227789718e-02, -9.097095531730918e-05, 8.496153245847750e-02, 8.496153245847750e-02, 1.965355327738790e-01, 1.753543658216458e-01, 1.103150200739187e+00, 1.102149907944494e-01, 5.128589654320082e-01, 5.128589654320070e-01, -5.038030035462045e-03, -5.055262579098050e-03, -5.049943051383510e-03, -5.045041900038627e-03, -5.047576838257144e-03, -5.047576838257144e-03, -5.445259490574678e-03, -6.908805114530730e-03, -6.547032699159227e-03, -6.135744381773108e-03, -6.355283285803325e-03, -6.355283285803325e-03, -3.452855914963257e-03, -4.348721494928071e-03, -1.128013919961487e-02, -1.330452496055163e-02, -1.353809329369416e-02, -1.353809329369417e-02, -8.425499349852157e-03, 8.660765812555406e-02, 8.678714769480086e-02, -1.382323387686352e-02, 1.270351035810303e-01, 1.270351035810313e-01, 1.312482048347627e-01, 8.640087111859267e-01, 4.174783868266581e-01, 1.273049875994700e-01, 6.480416118471901e-01, 6.480416118471917e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
