
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683663010610139e+01, -1.683665082470624e+01, -1.683680206224722e+01, -1.683646161426982e+01, -1.683664054082080e+01, -1.683664054082080e+01, -2.845143511645247e+00, -2.845123340474631e+00, -2.844683832448171e+00, -2.846031553755880e+00, -2.845144995581784e+00, -2.845144995581784e+00, -6.001063626770915e-01, -5.999896517630674e-01, -5.980440431261842e-01, -6.017959635569160e-01, -6.000615032224810e-01, -6.000615032224810e-01, -1.886316511889857e-01, -1.900575012355888e-01, -6.981919144724757e-01, -1.509051890902046e-01, -1.890487062386464e-01, -1.890487062386464e-01, -5.020925484767719e-02, -5.090561202319618e-02, -8.875957947525030e-02, -4.383592794426787e-02, -5.041670402235290e-02, -5.041670402235290e-02, -4.105487718518610e+00, -4.105085133721644e+00, -4.105451461199102e+00, -4.105138349549048e+00, -4.105274290224961e+00, -4.105274290224961e+00, -1.734094844919595e+00, -1.742320090876032e+00, -1.734456888431130e+00, -1.740857023964206e+00, -1.739213940130163e+00, -1.739213940130163e+00, -5.053199910897477e-01, -5.275055979989035e-01, -4.822727279425209e-01, -4.870319650296055e-01, -5.207914782655036e-01, -5.207914782655036e-01, -1.233765705313740e-01, -1.982296160392571e-01, -1.217919453474275e-01, -1.518468140272623e+00, -1.344336962985010e-01, -1.344336962985010e-01, -4.298450944992856e-02, -4.436325103023757e-02, -3.398358055186537e-02, -9.678387719336869e-02, -4.032503261362519e-02, -4.032503261362520e-02, -4.974748923545438e-01, -4.993352870909912e-01, -4.987094730060566e-01, -4.981939668992341e-01, -4.984547591191315e-01, -4.984547591191315e-01, -4.817933831703604e-01, -4.531194274375482e-01, -4.623802864156713e-01, -4.702422791075229e-01, -4.662084265518678e-01, -4.662084265518678e-01, -5.522031621553083e-01, -2.390605993761274e-01, -2.725736321840400e-01, -3.258460684447017e-01, -2.977489708516039e-01, -2.977489708516038e-01, -4.126583652812014e-01, -8.896491617595093e-02, -9.494203158748470e-02, -3.034011097750673e-01, -1.077944043505402e-01, -1.077944043505402e-01, -5.533020553932726e-02, -3.052884806845178e-02, -3.552119478563774e-02, -1.042169341268376e-01, -3.611336201608992e-02, -3.611336201608992e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.036248682555548e+01, -2.036255129859825e+01, -2.036285309432800e+01, -2.036179705086960e+01, -2.036252070801645e+01, -2.036252070801645e+01, -3.351071953228111e+00, -3.351095725953888e+00, -3.351884252931504e+00, -3.351219983602946e+00, -3.351098128134654e+00, -3.351098128134654e+00, -6.831989449488102e-01, -6.824223858168849e-01, -6.631234503157125e-01, -6.680041262449317e-01, -6.829160263253857e-01, -6.829160263253857e-01, -2.102121969738348e-01, -2.122140135955433e-01, -8.137860938461818e-01, -1.667433807743013e-01, -2.107987567431606e-01, -2.107987567431606e-01, -2.151719729962552e-02, -2.215775503165416e-02, -6.089660515028987e-02, -1.423361182827540e-02, -2.194566057831776e-02, -2.194566057831776e-02, -5.066304978152701e+00, -5.068136306476686e+00, -5.066492857637154e+00, -5.067916796271221e+00, -5.067242920032777e+00, -5.067242920032777e+00, -1.865961046729262e+00, -1.879680657384452e+00, -1.859329878246772e+00, -1.870002813265550e+00, -1.883962037203471e+00, -1.883962037203471e+00, -6.095573165961577e-01, -6.727424814832728e-01, -5.798204307388003e-01, -6.132818876125875e-01, -6.330239999448001e-01, -6.330239999448001e-01, -1.347769910786771e-01, -2.218239946519117e-01, -1.311399570260323e-01, -1.940977214019058e+00, -1.470790762411972e-01, -1.470790762411972e-01, -1.386522287556371e-02, -1.496382859250077e-02, -1.145469856192356e-02, -8.408541450403038e-02, -1.366223433565850e-02, -1.366223433565849e-02, -6.466675661978171e-01, -6.387599012200706e-01, -6.414721170414160e-01, -6.436549754446902e-01, -6.425528458859475e-01, -6.425528458859475e-01, -6.280413433542030e-01, -5.284985594489768e-01, -5.542902162036983e-01, -5.803359335134146e-01, -5.668535556964760e-01, -5.668535556964761e-01, -7.026203417978379e-01, -2.658347179476744e-01, -3.047078780292702e-01, -3.787160647014269e-01, -3.383217640522801e-01, -3.383217640522799e-01, -4.801013130019290e-01, -5.738275622617618e-02, -7.682742774896047e-02, -3.607795889812088e-01, -1.073269514555054e-01, -1.073269514555054e-01, -2.433926464179810e-02, -7.154231509969112e-03, -1.000901384617173e-02, -1.008891418155644e-01, -1.199301121411087e-02, -1.199301121411087e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.214528351566765e-09, -5.214506421853764e-09, -5.214329893808901e-09, -5.214690583652111e-09, -5.214517444397094e-09, -5.214517444397094e-09, -6.753982456667899e-06, -6.754207228337646e-06, -6.759283199137553e-06, -6.744857519271716e-06, -6.753983707853992e-06, -6.753983707853992e-06, -3.660273933175877e-03, -3.658635335795876e-03, -3.580538242651451e-03, -3.499192316302987e-03, -3.659753968869612e-03, -3.659753968869612e-03, -2.899443218859527e-01, -2.892360484099660e-01, -2.047012297121010e-03, -4.263372850808771e-01, -2.899528868946427e-01, -2.899528868946427e-01, -2.015526336227506e+03, -1.767844761576925e+03, -1.865908991374863e+01, -1.493365579524385e+04, -1.841471146809236e+03, -1.841471146809236e+03, -1.559102780925312e-06, -1.560211553649155e-06, -1.559207246507239e-06, -1.560069471967488e-06, -1.559683095843228e-06, -1.559683095843228e-06, -4.975606714719089e-05, -4.881471717048937e-05, -4.971396710814302e-05, -4.897928202514393e-05, -4.917266722931272e-05, -4.917266722931272e-05, -7.963103476801146e-03, -7.455620329268209e-03, -9.572129828314341e-03, -1.006569493656131e-02, -7.133347569405408e-03, -7.133347569405408e-03, -6.050393990892643e-01, -1.614304634448908e-01, -7.551454814229945e-01, -9.393653960410397e-05, -5.873225024690996e-01, -5.873225024690996e-01, -1.683616398715306e+04, -1.148252225077236e+04, -3.535462815563323e+04, -4.984822053626448e+00, -1.674415653835450e+04, -1.674415653835451e+04, -1.010463003735976e-02, -9.441362746099413e-03, -9.642995555394589e-03, -9.822680483598257e-03, -9.729847260879630e-03, -9.729847260879630e-03, -1.169303650072142e-02, -1.165375093670398e-02, -1.129694595968448e-02, -1.114250251742747e-02, -1.121427927660711e-02, -1.121427927660711e-02, -6.130734013789062e-03, -9.792657796907717e-02, -7.057458115678029e-02, -4.276369120259797e-02, -5.607050928626127e-02, -5.607050928626130e-02, -1.682695090642208e-02, -2.316823520811617e+01, -6.897352751340755e+00, -6.073665198465971e-02, -1.904759580870025e+00, -1.904759580870030e+00, -1.181588624710438e+03, -5.577972187257184e+05, -8.400926847205087e+04, -2.655056661267721e+00, -2.972258361088327e+04, -2.972258361088338e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
