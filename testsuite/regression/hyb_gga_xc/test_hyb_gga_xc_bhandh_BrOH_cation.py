
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_bhandh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.974943847168731e+00, -9.974971578966334e+00, -9.975103258770655e+00, -9.974690491372288e+00, -9.974905580785638e+00, -9.974905580785638e+00, -1.670901185576492e+00, -1.670905609733788e+00, -1.671047538212707e+00, -1.671108303241959e+00, -1.670945623059103e+00, -1.670945623059103e+00, -3.474227256465372e-01, -3.469585746753939e-01, -3.353286910006065e-01, -3.381250403005719e-01, -3.370394124341934e-01, -3.370394124341934e-01, -8.421843814568081e-02, -8.655895225912483e-02, -4.023874752643685e-01, -5.216758681209382e-02, -7.627818310011877e-02, -7.627818310011872e-02, -3.838956386723141e-03, -4.038412326458010e-03, -1.579018656993711e-02, -2.224439168170208e-03, -2.656451874386850e-03, -2.656451874386850e-03, -2.477331943338610e+00, -2.477794714055841e+00, -2.477354837193771e+00, -2.477763350239490e+00, -2.477565671413084e+00, -2.477565671413084e+00, -9.541237259981814e-01, -9.610519986374494e-01, -9.486267369410454e-01, -9.547620002691959e-01, -9.606043744628457e-01, -9.606043744628457e-01, -3.103972071455670e-01, -3.383277395169808e-01, -2.883279202383736e-01, -3.021194322481268e-01, -3.157695532965761e-01, -3.157695532965761e-01, -2.243697496727375e-02, -7.351255840299367e-02, -2.025753006546172e-02, -9.473040040640286e-01, -3.766192406197085e-02, -3.766192406197085e-02, -1.717112394855993e-03, -2.174782359175916e-03, -1.662954021265588e-03, -1.593896051522919e-02, -1.960929009700456e-03, -1.960929009700457e-03, -3.156173709822794e-01, -3.132597395622916e-01, -3.140906594114630e-01, -3.147748999182520e-01, -3.144326630695877e-01, -3.144326630695877e-01, -3.079463555056000e-01, -2.601292244583871e-01, -2.743331062568745e-01, -2.880154442397588e-01, -2.811058531585717e-01, -2.811058531585717e-01, -3.532762418294714e-01, -1.028919861469178e-01, -1.327281483451379e-01, -1.864360972888635e-01, -1.587393920159711e-01, -1.587393920159711e-01, -2.405018097884303e-01, -1.554877373079741e-02, -1.411029968965086e-02, -1.823823559305019e-01, -2.173184385695832e-02, -2.173184385695833e-02, -5.408430562567942e-03, -5.827901750523430e-04, -1.220918935322674e-03, -2.004066396122729e-02, -1.821603816079965e-03, -1.821603816079964e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_bhandh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.328692250005104e+01, -1.328690568022765e+01, -1.328696485570177e+01, -1.328693674215295e+01, -1.328711035966470e+01, -1.328714085745999e+01, -1.328662797991372e+01, -1.328653044837325e+01, -1.328694436907644e+01, -1.328678335603680e+01, -1.328694436907644e+01, -1.328678335603680e+01, -2.222911143322517e+00, -2.222849224980688e+00, -2.222917227691044e+00, -2.222849288943784e+00, -2.223004068172298e+00, -2.223010207468235e+00, -2.223206710410621e+00, -2.223195190572831e+00, -2.222609189884028e+00, -2.223262392202813e+00, -2.222609189884028e+00, -2.223262392202813e+00, -4.787384487848367e-01, -4.782589789801582e-01, -4.784963521335280e-01, -4.778966206300872e-01, -4.709221299406348e-01, -4.722431584652343e-01, -4.750241133064549e-01, -4.745710440963263e-01, -4.697339379131759e-01, -4.837353280782919e-01, -4.697339379131759e-01, -4.837353280782919e-01, -1.564238766116708e-01, -1.550390532629888e-01, -1.573277932240626e-01, -1.558814972965929e-01, -5.461606794970605e-01, -5.507178373902615e-01, -1.327635679489675e-01, -1.328583166803728e-01, -1.244938698883466e-01, -1.512731348646740e-01, -1.244938698883465e-01, -1.512731348646740e-01, -5.194962556901619e-03, -5.041517985518520e-03, -5.476962384907284e-03, -5.294701760798653e-03, -2.692824348231715e-02, -2.739112050284080e-02, -2.951133577696911e-03, -2.976315907657885e-03, -3.429034987930556e-03, -4.141273537266421e-03, -3.429034987930556e-03, -4.141273537266420e-03, -3.290516295934700e+00, -3.289793242766419e+00, -3.291084487507039e+00, -3.290346091401113e+00, -3.290549972532697e+00, -3.289815929104522e+00, -3.291040499381478e+00, -3.290315001984700e+00, -3.290804054349612e+00, -3.290071158995240e+00, -3.290804054349612e+00, -3.290071158995240e+00, -1.291505504511193e+00, -1.291460566205507e+00, -1.299956874876303e+00, -1.299724267897375e+00, -1.285875490390122e+00, -1.286382554512568e+00, -1.293180319010496e+00, -1.293809836743455e+00, -1.299697195031425e+00, -1.297744105951195e+00, -1.299697195031425e+00, -1.297744105951195e+00, -4.180132513740279e-01, -4.174012865373961e-01, -4.453432859387033e-01, -4.453519744938098e-01, -3.873625668339347e-01, -3.930086264854373e-01, -3.953915881349495e-01, -4.024162636145451e-01, -4.283602599215239e-01, -4.175400522804930e-01, -4.283602599215239e-01, -4.175400522804930e-01, -1.026692486516420e-01, -1.023992310991543e-01, -1.698926867526997e-01, -1.697475452404282e-01, -9.315540728859451e-02, -9.426689870920343e-02, -1.250237807905926e+00, -1.249766835551505e+00, -1.144860665431055e-01, -1.098123211289808e-01, -1.144860665431055e-01, -1.098123211289808e-01, -2.311645943166862e-03, -2.266901913133468e-03, -2.908568255508213e-03, -2.886544003665123e-03, -2.250879932869810e-03, -2.186393475438721e-03, -5.454802228540392e-02, -5.495743617417104e-02, -2.884738099883482e-03, -2.507988373900059e-03, -2.884738099883482e-03, -2.507988373900059e-03, -4.129492144601816e-01, -4.137982299741208e-01, -4.119070465238600e-01, -4.127202525860401e-01, -4.122729373111841e-01, -4.130969295937618e-01, -4.125716169838251e-01, -4.134096988146867e-01, -4.124216079969419e-01, -4.132528847066191e-01, -4.124216079969419e-01, -4.132528847066191e-01, -4.023778371472227e-01, -4.031003098056719e-01, -3.618370831359113e-01, -3.622357785181869e-01, -3.727517769692855e-01, -3.732678749329496e-01, -3.840826225345824e-01, -3.846903226698353e-01, -3.781705949169408e-01, -3.787660894522158e-01, -3.781705949169408e-01, -3.787660894522158e-01, -4.651606649708454e-01, -4.654334271642556e-01, -1.990940141354037e-01, -1.988053564384215e-01, -2.224268376662963e-01, -2.217952086290704e-01, -2.662486913844260e-01, -2.665279845255171e-01, -2.417567875580784e-01, -2.415180823105880e-01, -2.417567875580784e-01, -2.415180823105880e-01, -3.362332658642906e-01, -3.366649906290463e-01, -2.569465701289347e-02, -2.574166420272745e-02, -3.933807331972258e-02, -4.010146844666251e-02, -2.539269831316534e-01, -2.546518958748163e-01, -7.443617558035692e-02, -7.371005538311771e-02, -7.443617558035689e-02, -7.371005538311770e-02, -7.262452816837472e-03, -7.137782270884243e-03, -7.773376009434377e-04, -7.764230933379498e-04, -1.655052550891959e-03, -1.603928637650673e-03, -6.845562088575102e-02, -6.896558615236165e-02, -2.652504857025724e-03, -2.331389744963207e-03, -2.652504857025723e-03, -2.331389744963205e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_bhandh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.264215559403482e-11, 1.463652377038497e-11, 3.264330457260197e-11, 3.264130547651290e-11, 1.463631512328463e-11, 3.264324292707253e-11, 3.264117778792324e-11, 1.463532316351641e-11, 3.263903593187204e-11, 3.264349393758490e-11, 1.463842899785011e-11, 3.265029141517737e-11, 3.263767071398673e-11, 1.463681083685537e-11, 3.264904308130342e-11, 3.263767071398673e-11, 1.463681083685537e-11, 3.264904308130342e-11, 2.929309781794401e-07, 1.902747638536065e-07, 2.930258640408496e-07, 2.929210741361775e-07, 1.902725761814505e-07, 2.930294227069511e-07, 2.929374748670998e-07, 1.901971754504621e-07, 2.927943589970082e-07, 2.928257255693593e-07, 1.901358235030523e-07, 2.927281916196245e-07, 2.942402810680865e-07, 1.902491360705296e-07, 2.916390218488022e-07, 2.942402810680865e-07, 1.902491360705296e-07, 2.916390218488022e-07, 1.046813195210680e-03, 1.144533678933034e-03, 9.856752413069014e-04, 1.059414201074614e-03, 1.151156568500561e-03, 9.839598987491129e-04, 1.102054367879107e-03, 1.320750241138922e-03, 1.222862024767306e-03, 1.135290278190233e-03, 1.265386257803329e-03, 1.098815699699322e-03, 6.048599279062471e-04, 1.376562597771172e-03, 1.710560061400956e-03, 6.048599279062471e-04, 1.376562597771172e-03, 1.710560061400956e-03, 4.453316468346988e-01, 6.012876550391961e-01, 3.308535673669243e-01, 4.290152077826185e-01, 5.680272535784819e-01, 3.049721373056462e-01, 6.173966156420098e-04, 5.322727974273029e-04, 3.591632994097421e-04, 1.087557086517181e+00, 1.675901373768304e+00, 9.940301607331564e-01, -4.501653942578362e-02, 2.382014110698246e+00, 2.093723074775938e+00, -4.501653942578319e-02, 2.382014110698246e+00, 2.093723074775938e+00, 5.675921857173066e-08, 1.111914508308031e-07, 5.622200106389088e-08, 2.334453701932848e-07, 4.562559950974850e-07, 2.304668186220750e-07, 1.058260425425809e+01, 1.838627425311693e+01, 9.310005755931870e+00, 2.089929161854101e-17, 4.136895542502456e-17, 2.086937280168050e-17, 4.936189023492603e-13, 1.070835888305008e-12, 5.576405914305050e-13, 4.936189023492603e-13, 1.070835888305008e-12, 5.576405914305049e-13, 3.853538126360367e-08, 2.233703107768369e-08, 3.876702432853588e-08, 3.849684232486335e-08, 2.231537777319893e-08, 3.873438232897355e-08, 3.853145848469303e-08, 2.233595490630417e-08, 3.876740193650438e-08, 3.850190535926228e-08, 2.231683364972891e-08, 3.873411468264029e-08, 3.851533903969528e-08, 2.232609670798167e-08, 3.875112028906986e-08, 3.851533903969528e-08, 2.232609670798167e-08, 3.875112028906986e-08, 5.217774900274863e-06, 4.104557134069705e-06, 5.223391230826410e-06, 5.020762810374528e-06, 3.949027730077658e-06, 5.049988520194397e-06, 5.459614488275693e-06, 4.223201907834492e-06, 5.262626081184532e-06, 5.291272077312508e-06, 4.080707689470805e-06, 5.092254495586169e-06, 4.817071871303678e-06, 3.966397450084659e-06, 5.289865367181627e-06, 4.817071871303678e-06, 3.966397450084659e-06, 5.289865367181627e-06, 1.887139424918829e-03, 2.253646609880290e-03, 1.960570895860268e-03, 1.301440934445299e-03, 1.482953633834817e-03, 1.292669343487352e-03, 3.494709294335117e-03, 3.393155540240489e-03, 2.100530010555202e-03, 2.862038356635148e-03, 2.786872153422916e-03, 1.792789491092001e-03, 1.153403828646581e-03, 2.171399762139616e-03, 2.470424530046960e-03, 1.153403828646584e-03, 2.171399762139616e-03, 2.470424530046963e-03, 3.252834993743408e+00, 5.364331359216309e+00, 3.098087487814086e+00, 3.920026484525933e-01, 5.928062603673171e-01, 3.771153092880229e-01, 4.388214320741553e+00, 6.670630325612285e+00, 3.402866055102132e+00, 5.722000811922319e-06, 4.550774239056777e-06, 5.776758802997007e-06, 2.347586491583939e+00, 3.362374819306393e+00, 1.686136601637616e+00, 2.347586491583939e+00, 3.362374819306393e+00, 1.686136601637616e+00, 2.722402450437751e-24, 5.421496698436063e-24, 2.739348374112997e-24, 6.197552123746826e-18, 1.228758886113335e-17, 6.206195015698091e-18, 2.834568716226669e-25, 5.656440620065503e-25, 2.862062125809059e-25, 8.566814583784277e+00, 1.504669301565768e+01, 8.380545905697472e+00, 4.773107496180662e-20, 9.610322787727072e-20, 4.859139671020088e-20, 4.773107496180661e-20, 9.610322787727070e-20, 4.859139671020088e-20, 1.932575433251670e-03, 2.199677179191681e-03, 1.827921294028910e-03, 1.986447683984606e-03, 2.264286130145305e-03, 1.878078506756244e-03, 1.967460441820644e-03, 2.241303100651475e-03, 1.860075015899262e-03, 1.951509374578449e-03, 2.222568983976134e-03, 1.845868570850362e-03, 1.959468849833947e-03, 2.231922961512953e-03, 1.852968646730800e-03, 1.959468849833947e-03, 2.231922961512953e-03, 1.852968646730800e-03, 2.192095061750638e-03, 2.525278278664052e-03, 2.091297055276122e-03, 4.514136264494106e-03, 5.397863529116129e-03, 4.260994342215327e-03, 3.644332070873083e-03, 4.298036410666330e-03, 3.430962677879512e-03, 2.951618041968925e-03, 3.458400931093935e-03, 2.811205936877352e-03, 3.277966668740439e-03, 3.860241852276062e-03, 3.114997798250318e-03, 3.277966668740439e-03, 3.860241852276062e-03, 3.114997798250318e-03, 1.047487397247074e-03, 1.166454564355177e-03, 1.021903571493992e-03, 1.576244486650762e-01, 2.273047300256539e-01, 1.497328514633720e-01, 7.550422113874039e-02, 1.027440095908986e-01, 6.844801134197469e-02, 2.214606296380817e-02, 2.883676467546989e-02, 2.080403342857284e-02, 3.962743884847655e-02, 5.500747727544229e-02, 3.977544650380128e-02, 3.962743884847664e-02, 5.500747727544231e-02, 3.977544650380125e-02, 6.724179139236990e-03, 8.100714365057125e-03, 6.156026159381084e-03, 9.621578394973588e+00, 1.766533536733120e+01, 9.474812795966793e+00, 1.088514945364049e+01, 1.878803243082290e+01, 9.865262141717881e+00, 2.739336338737960e-02, 3.428914672188251e-02, 2.318543679168190e-02, 6.224816015375727e+00, 9.701438036301546e+00, 4.917991604378374e+00, 6.224816015375725e+00, 9.701438036301546e+00, 4.917991604378369e+00, 1.759513360408513e-04, 3.417478728614279e-04, 1.735959115977003e-04, 1.428164354090746e-85, 2.850114531961813e-85, 1.429263468290431e-85, 8.294165813489441e-37, 1.662312648545182e-36, 8.415661486156971e-37, 6.528701437323544e+00, 1.102889579754806e+01, 6.105657850164422e+00, 4.049098582250979e-22, 8.178814636871498e-22, 4.157023565057630e-22, 4.049098582250767e-22, 8.178814636871070e-22, 4.157023565057414e-22]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
