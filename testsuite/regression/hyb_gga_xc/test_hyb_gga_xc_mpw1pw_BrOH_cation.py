
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw1pw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.587175204578861e+01, -1.587177280431436e+01, -1.587191613125342e+01, -1.587160623483457e+01, -1.587176135831587e+01, -1.587176135831587e+01, -2.671180759014883e+00, -2.671156460893653e+00, -2.670659264026519e+00, -2.672022862560620e+00, -2.671215143867073e+00, -2.671215143867073e+00, -5.565618565494048e-01, -5.563454931423821e-01, -5.523833364099967e-01, -5.562429401691807e-01, -5.563697713866472e-01, -5.563697713866472e-01, -1.704086699324577e-01, -1.716361386201380e-01, -6.409806733835928e-01, -1.449187138210578e-01, -1.636673549101265e-01, -1.636673549101265e-01, -6.454383006471885e-04, -7.633186902109390e-04, -4.182191856305720e-02, -1.348517253970209e-04, -3.833078232466830e-04, -3.833078232466834e-04, -3.863115191228299e+00, -3.862762490179260e+00, -3.863106549109052e+00, -3.862795052562971e+00, -3.862932163025326e+00, -3.862932163025326e+00, -1.621384610219045e+00, -1.629363897485003e+00, -1.621197122387430e+00, -1.628229741291563e+00, -1.625916266136221e+00, -1.625916266136221e+00, -4.786871631684903e-01, -5.099841594895574e-01, -4.468178898447641e-01, -4.566512184618028e-01, -4.851489821430668e-01, -4.851489821430668e-01, -1.174935425898726e-01, -1.818665620461449e-01, -1.109193772644665e-01, -1.438032784875912e+00, -1.260746873198215e-01, -1.260746873198215e-01, -7.454044177323990e-05, -1.359818039427223e-04, -1.468795787359288e-04, -7.945650109348351e-02, -2.035123399242269e-04, -2.035123399242250e-04, -4.741008233372616e-01, -4.721316236072255e-01, -4.727934608265181e-01, -4.733743856493206e-01, -4.730803250958860e-01, -4.730803250958860e-01, -4.621770132141548e-01, -4.145054089057098e-01, -4.265131888735665e-01, -4.393515839199653e-01, -4.325817472740370e-01, -4.325817472740370e-01, -5.328648323574952e-01, -2.161450905767694e-01, -2.456676141823527e-01, -3.009505522092000e-01, -2.705728334845887e-01, -2.705728334845887e-01, -3.839114851266240e-01, -3.792333205476590e-02, -6.179652695674326e-02, -2.878383039025415e-01, -9.601145243327527e-02, -9.601145243327530e-02, -1.510728619470157e-03, -7.329697620731283e-06, -4.078032123883681e-05, -9.175814920424512e-02, -1.720523367046775e-04, -1.720523367046787e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw1pw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.904537799326872e+01, -1.904535547684956e+01, -1.904546055559922e+01, -1.904541574766177e+01, -1.904570922257207e+01, -1.904577480241577e+01, -1.904477327214113e+01, -1.904458626297818e+01, -1.904542469435734e+01, -1.904505189626839e+01, -1.904542469435734e+01, -1.904505189626839e+01, -3.155486005382823e+00, -3.155587647699560e+00, -3.155517409165992e+00, -3.155622406059073e+00, -3.156311559052483e+00, -3.156508810663761e+00, -3.155432132058521e+00, -3.155628832116709e+00, -3.154948970477762e+00, -3.156351047653051e+00, -3.154948970477762e+00, -3.156351047653051e+00, -6.530227496057055e-01, -6.561544778663657e-01, -6.515499384467336e-01, -6.553789937087250e-01, -6.282118336672264e-01, -6.233401913751639e-01, -6.302690653289832e-01, -6.318406082753397e-01, -6.542582739856989e-01, -6.071512093607445e-01, -6.542582739856989e-01, -6.071512093607445e-01, -1.728116244978198e-01, -1.768485027052997e-01, -1.762530155867943e-01, -1.809748715423323e-01, -7.447426917454845e-01, -7.697431954836980e-01, -1.290934054936554e-01, -1.302220580696942e-01, -1.599588783083329e-01, -1.200690398521466e-01, -1.599588783083330e-01, -1.200690398521466e-01, -2.166723493085394e-03, -2.549773291722551e-03, -2.521548640018969e-03, -3.039442480803461e-03, -9.224836395051386e-02, -9.611242021921777e-02, -5.103149195406143e-04, -4.812473747899130e-04, -1.579990400654788e-03, -5.010961982151903e-04, -1.579990400654790e-03, -5.010961982151960e-04, -4.781667671612220e+00, -4.780545344686499e+00, -4.783724865864024e+00, -4.782538520547934e+00, -4.781779603066036e+00, -4.780615136086428e+00, -4.783548973481686e+00, -4.782421470991522e+00, -4.782720630654779e+00, -4.781547295499030e+00, -4.782720630654779e+00, -4.781547295499030e+00, -1.740279324618121e+00, -1.740195809196353e+00, -1.754581999358044e+00, -1.754115972445026e+00, -1.725080873817517e+00, -1.728768612190271e+00, -1.737418139047151e+00, -1.741245838646825e+00, -1.759217087734777e+00, -1.749898935953810e+00, -1.759217087734777e+00, -1.749898935953810e+00, -5.994924032033381e-01, -5.984413495647866e-01, -6.623324290765030e-01, -6.628183550609156e-01, -5.480691786731268e-01, -5.632960268748143e-01, -5.845504219318942e-01, -5.971393605428820e-01, -6.209198817880156e-01, -5.985257161338770e-01, -6.209198817880157e-01, -5.985257161338770e-01, -1.088945140913474e-01, -1.083917243102996e-01, -1.675730780053107e-01, -1.680981927285424e-01, -1.058423092390022e-01, -1.060554165626197e-01, -1.863804839806645e+00, -1.863134077172073e+00, -1.117443108292650e-01, -1.097167585501301e-01, -1.117443108292650e-01, -1.097167585501301e-01, -2.676988669592361e-04, -2.793791057515788e-04, -4.987508156482359e-04, -5.019037155106877e-04, -4.812983932328864e-04, -5.912895974818748e-04, -1.000615821794413e-01, -1.010551695569244e-01, -3.747513185884568e-04, -8.944433422578733e-04, -3.747513185884488e-04, -8.944433422578679e-04, -6.171633354069973e-01, -6.188676012368420e-01, -6.128088460118827e-01, -6.145840084490961e-01, -6.146848241288653e-01, -6.164534234709396e-01, -6.159973074304174e-01, -6.177066676929895e-01, -6.153790335163428e-01, -6.171173884269209e-01, -6.153790335163428e-01, -6.171173884269209e-01, -6.021179171634773e-01, -6.034719463098451e-01, -4.963331102957952e-01, -4.980293762579690e-01, -5.281411002838210e-01, -5.300235099591478e-01, -5.600405433840966e-01, -5.614753741550030e-01, -5.440363269771701e-01, -5.455143117586302e-01, -5.440363269771701e-01, -5.455143117586302e-01, -6.908725317048615e-01, -6.921011844148354e-01, -2.127773535459203e-01, -2.135901052574660e-01, -2.614487344266013e-01, -2.632658347252991e-01, -3.621224708836711e-01, -3.634891707685882e-01, -3.096393019786097e-01, -3.096280958604538e-01, -3.096393019786096e-01, -3.096280958604538e-01, -4.601176617668873e-01, -4.626220728002765e-01, -9.090450544533149e-02, -9.148777367947056e-02, -1.075613340869567e-01, -1.076158902203318e-01, -3.562068388507494e-01, -3.598205990026953e-01, -9.684179294802119e-02, -9.196739700801557e-02, -9.684179294802113e-02, -9.196739700801554e-02, -5.218883627484136e-03, -5.798142887874238e-03, -2.337232414749789e-05, -3.019448679163068e-05, -1.337042019706215e-04, -1.629299685455972e-04, -9.410425663695603e-02, -9.439202153962986e-02, -4.440206731582709e-04, -7.146012828774638e-04, -4.440206731582684e-04, -7.146012828774638e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw1pw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw1pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.077768683041623e-08, 3.249203400484267e-10, -1.077774978983498e-08, -1.077762575258950e-08, 3.249254156154051e-10, -1.077770467586779e-08, -1.077729689742305e-08, 3.249312127455129e-10, -1.077727353379818e-08, -1.077799914584893e-08, 3.248560612441316e-10, -1.077815718080425e-08, -1.077767018063518e-08, 3.248978165452077e-10, -1.077769606762589e-08, -1.077767018063518e-08, 3.248978165452077e-10, -1.077769606762589e-08, -1.346681436468718e-05, 1.882184928226818e-06, -1.347243637968032e-05, -1.346706371432768e-05, 1.882536604769570e-06, -1.347310552633404e-05, -1.347765904775107e-05, 1.890469035325647e-06, -1.348114629968671e-05, -1.345089443524968e-05, 1.874965934648070e-06, -1.345539591189650e-05, -1.347444921986314e-05, 1.882383717168228e-06, -1.346334728591927e-05, -1.347444921986314e-05, 1.882383717168228e-06, -1.346334728591927e-05, -7.284572611445105e-03, 3.313440568855438e-03, -7.301408179509029e-03, -7.296896170850236e-03, 3.292089350612322e-03, -7.317119501107680e-03, -7.607828468932393e-03, 2.754503394278657e-03, -7.589213638388329e-03, -7.380133203332145e-03, 2.687355420634704e-03, -7.390208691439163e-03, -7.560018145074936e-03, 2.724859819139565e-03, -7.199954105654239e-03, -7.560018145074936e-03, 2.724859819139565e-03, -7.199954105654239e-03, -9.650379302000220e-01, 3.302901750770876e-01, -8.645457313039842e-01, -9.415557504101998e-01, 3.458841809888365e-01, -8.269320169340751e-01, -4.296441043891141e-03, 1.773084044670905e-03, -3.977104348568442e-03, -1.875807761228245e+00, 2.546734451419353e-01, -1.795828493694875e+00, -8.608107234869971e-01, 2.105848772396240e-01, -3.762509052593931e+00, -8.608107234869959e-01, 2.105848772396247e-01, -3.762509052593932e+00, 4.504617659156575e+02, 8.613353793739745e-03, 4.395039698818063e+02, 4.675796466982618e+02, 1.013950379898908e-02, 4.571335257876313e+02, 5.113890781168487e+01, 5.523177238437298e-02, 4.217017398079705e+01, 4.668736917895649e+02, 3.039205960810898e-03, 4.566656132771429e+02, 4.623264831240235e+02, 4.471539514049365e-03, 1.266223920645917e+03, 4.623264831240238e+02, 4.471539512694581e-03, 1.266223920645933e+03, -3.066720877178688e-06, 4.749125773836140e-07, -3.069684543844941e-06, -3.067753176303699e-06, 4.779691194036931e-07, -3.070633624468376e-06, -3.066766566342741e-06, 4.750344380718369e-07, -3.069683258078635e-06, -3.067614951740767e-06, 4.777324269027139e-07, -3.070585042445646e-06, -3.067281714822639e-06, 4.764670697418842e-07, -3.070155329958250e-06, -3.067281714822639e-06, 4.764670697418842e-07, -3.070155329958250e-06, -1.020021968507707e-04, 1.231612203241641e-05, -1.020214505943116e-04, -9.986199633050657e-05, 1.221714254827805e-05, -9.995506812876026e-05, -1.023381208048970e-04, 1.187295881057448e-05, -1.023490190078712e-04, -1.004923098433335e-04, 1.178956102485754e-05, -1.004562915877827e-04, -1.005533551420231e-04, 1.248218806625418e-05, -1.008152857235294e-04, -1.005533551420231e-04, 1.248218806625418e-05, -1.008152857235294e-04, -1.302565214746428e-02, 1.066514832223700e-02, -1.323407819810745e-02, -9.643802318933314e-03, 1.397328589342333e-02, -9.673387519750724e-03, -1.897139944851468e-02, 1.392045884219881e-02, -1.601305847319986e-02, -1.724254876196114e-02, 2.122385006740113e-02, -1.373099365715981e-02, -1.087168975588664e-02, 1.065438862245302e-02, -1.434146711059634e-02, -1.087168975588664e-02, 1.065438862245302e-02, -1.434146711059634e-02, -3.284139503210470e+00, 1.439679558499215e-01, -3.313054689512264e+00, -7.381780763636484e-01, 1.284993988958634e-01, -7.273936744467914e-01, -3.778428250838086e+00, 1.453770439617308e-01, -3.640744397663750e+00, -1.500062610210301e-04, 1.071116276150960e-04, -1.504119997912675e-04, -3.028401841938247e+00, 2.730845515133000e-01, -3.143151317417134e+00, -3.028401841938247e+00, 2.730845515133000e-01, -3.143151317417134e+00, 6.866363837077466e+02, 2.956955031919532e-03, 5.939794875519500e+02, 5.632165052249793e+02, 3.735892454584835e-03, 5.205914155228735e+02, 3.104209651439250e+03, 3.713649829170447e-02, 3.387439653364082e+03, -1.862162228569014e+00, 1.387040646761921e-01, -1.688670399383648e+00, 1.598720101790666e+03, 1.423477041157044e-02, 1.461788991811569e+03, 1.598720101790655e+03, 1.423477039691048e-02, 1.461788991811562e+03, -1.443579963118660e-02, 2.403957787948525e-02, -1.413993027538280e-02, -1.339069640915541e-02, 2.034391171407463e-02, -1.308155672542533e-02, -1.330135738094638e-02, 2.159045634422680e-02, -1.299603550269846e-02, -1.346092487423652e-02, 2.269325002983267e-02, -1.315394915450612e-02, -1.333590576146207e-02, 2.213771058093030e-02, -1.302943287234109e-02, -1.333590576146207e-02, 2.213771058093030e-02, -1.302943287234109e-02, -1.626572280931446e-02, 2.885216186742613e-02, -1.584461792676808e-02, -2.396416116692609e-02, 1.472060466257312e-02, -2.356147659547636e-02, -2.117587538432514e-02, 1.671341085131755e-02, -2.079986195377897e-02, -1.851926097853425e-02, 1.980889411020530e-02, -1.817244594944375e-02, -1.989356781443283e-02, 1.811879018445980e-02, -1.952129340455443e-02, -1.989356781443283e-02, 1.811879018445980e-02, -1.952129340455443e-02, -8.113581682324886e-03, 1.103081591133725e-02, -8.096407604851048e-03, -3.581605490149036e-01, 9.300925823122458e-02, -3.521029638191073e-01, -2.069796192353033e-01, 8.114126135879908e-02, -2.014090489295817e-01, -8.726963395624734e-02, 6.533077521433446e-02, -8.511292747823535e-02, -1.339944298084497e-01, 7.642797638011327e-02, -1.348498121890092e-01, -1.339944298084499e-01, 7.642797638011331e-02, -1.348498121890093e-01, -3.275801771967360e-02, 2.119508537472161e-02, -3.193668017018431e-02, 5.338316916256451e+01, 4.528023474059335e-02, 5.228057551394179e+01, 1.485172864918941e+01, 7.071096470287412e-02, 1.181010924250389e+01, -1.062139788622212e-01, 1.018028174442661e-01, -9.896929987848305e-02, -5.405581794551935e+00, 2.447486191545272e-01, -6.474513287971446e+00, -5.405581794551940e+00, 2.447486191545298e-01, -6.474513287971452e+00, 3.292099426108962e+02, 1.080420474093222e-02, 3.318654085360406e+02, 2.550752114854538e+03, 4.023020531725113e-03, 4.358167814359038e+03, 1.364096384212673e+03, 5.049892853365737e-03, 1.426060502005859e+03, -5.970449238394737e+00, 2.240111119954173e-01, -5.904904621522659e+00, 3.202160223601872e+03, 1.815739025300881e-02, 1.544994730624432e+03, 3.202160223601864e+03, 1.815739024585517e-02, 1.544994730624439e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
