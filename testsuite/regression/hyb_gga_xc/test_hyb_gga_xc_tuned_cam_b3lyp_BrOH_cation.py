
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.937588102514047e+01, -1.937590596759276e+01, -1.937608025278038e+01, -1.937570785273887e+01, -1.937589397030941e+01, -1.937589397030941e+01, -3.195037199613568e+00, -3.195004368386834e+00, -3.194324343034816e+00, -3.196118853126258e+00, -3.195075758519885e+00, -3.195075758519885e+00, -5.990126329634462e-01, -5.987779636397916e-01, -5.939717466138658e-01, -5.987960243819552e-01, -5.978067458382761e-01, -5.978067458382761e-01, -1.146430572113155e-01, -1.174424213657940e-01, -7.028828155756712e-01, -6.813971186683203e-02, -1.037675295429208e-01, -1.037675295429207e-01, -1.570031600330156e-03, -1.644796501428751e-03, -5.068620618805363e-03, -9.410200476723356e-04, -7.955486763577656e-04, -7.955486763577656e-04, -4.645891483890057e+00, -4.645305677853851e+00, -4.645874577265825e+00, -4.645357273355462e+00, -4.645589085718878e+00, -4.645589085718878e+00, -1.913553940347749e+00, -1.923341050739945e+00, -1.913359559522298e+00, -1.922008897551261e+00, -1.919064637174207e+00, -1.919064637174207e+00, -4.989245598103485e-01, -5.271501122987065e-01, -4.606274620983752e-01, -4.644543084629622e-01, -5.060435272337771e-01, -5.060435272337772e-01, -2.295830966317442e-02, -1.125563957011736e-01, -1.799153920717095e-02, -1.658704503898763e+00, -4.273901046270693e-02, -4.273901046270693e-02, -7.345437591561318e-04, -9.211331901756615e-04, -7.108450128809452e-04, -5.739509180156628e-03, -7.415681554678911e-04, -7.415681554678911e-04, -4.793012252048581e-01, -4.809766254214216e-01, -4.804358062473156e-01, -4.799463460988013e-01, -4.801950079018252e-01, -4.801950079018252e-01, -4.637453122208607e-01, -4.231693904848611e-01, -4.361114097239110e-01, -4.477211142094495e-01, -4.418127733825843e-01, -4.418127733825843e-01, -5.555524309225167e-01, -1.629887636173135e-01, -2.082165397503213e-01, -2.833324029657931e-01, -2.442585047863031e-01, -2.442585047863031e-01, -3.854196515365588e-01, -5.047671883324581e-03, -3.283781036607362e-03, -2.667813404726601e-01, -1.416054351951622e-02, -1.416054351951625e-02, -2.178479654120538e-03, -2.600245612065084e-04, -5.286098632439610e-04, -1.144856509959742e-02, -7.071208086481661e-04, -7.071208086481652e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.322128290078422e+01, -2.322125532696091e+01, -2.322138344580947e+01, -2.322132863874755e+01, -2.322168679657575e+01, -2.322176688134335e+01, -2.322054810108744e+01, -2.322031960061263e+01, -2.322134112252091e+01, -2.322088601898693e+01, -2.322134112252091e+01, -2.322088601898693e+01, -3.749883968253714e+00, -3.749976587077572e+00, -3.749916302887942e+00, -3.750011061781767e+00, -3.750723778935415e+00, -3.750932717395286e+00, -3.749934375458501e+00, -3.750138587713907e+00, -3.749247609555471e+00, -3.750873154707803e+00, -3.749247609555471e+00, -3.750873154707803e+00, -7.115265433422069e-01, -7.135121051853873e-01, -7.104280418587204e-01, -7.128398289691835e-01, -6.924736992020917e-01, -6.900213202125097e-01, -6.966237849400715e-01, -6.974000028852482e-01, -7.102168130625975e-01, -6.873065386199817e-01, -7.102168130625975e-01, -6.873065386199817e-01, -1.779121897525496e-01, -1.789110859565391e-01, -1.793696760032266e-01, -1.807146788064775e-01, -8.225245168688421e-01, -8.448951836977371e-01, -1.422022415229319e-01, -1.430186991844983e-01, -1.522108712165147e-01, -1.456132769758942e-01, -1.522108712165146e-01, -1.456132769758943e-01, -2.270147750496278e-03, -1.887522770984944e-03, -2.410272518627945e-03, -1.955746717612057e-03, -1.310348902549971e-02, -1.301355743707745e-02, -1.207079607151723e-03, -1.269929001563243e-03, -7.027047955767937e-04, -2.890561009820724e-03, -7.027047955767936e-04, -2.890561009820724e-03, -5.721371854750923e+00, -5.720003296067307e+00, -5.723661554395579e+00, -5.722218802424526e+00, -5.721498185450376e+00, -5.720080752830358e+00, -5.723465520725260e+00, -5.722090643179822e+00, -5.722543635034946e+00, -5.721116380978166e+00, -5.722543635034946e+00, -5.721116380978166e+00, -2.056624243075968e+00, -2.056532320387503e+00, -2.072876680376670e+00, -2.072370687102820e+00, -2.041345101503050e+00, -2.044724440885065e+00, -2.055338326890232e+00, -2.058905850710333e+00, -2.076586392659087e+00, -2.067631132102874e+00, -2.076586392659087e+00, -2.067631132102874e+00, -6.274449906727010e-01, -6.261601979683161e-01, -6.952168514795577e-01, -6.956427251393897e-01, -5.690066749589479e-01, -5.851309606538646e-01, -6.020599371708938e-01, -6.178667816951058e-01, -6.509811044883798e-01, -6.251345314164666e-01, -6.509811044883799e-01, -6.251345314164666e-01, -9.737049508362972e-02, -9.747656605732538e-02, -1.947007303529205e-01, -1.948764755163618e-01, -8.444320122908716e-02, -8.735765102853835e-02, -2.142502594372904e+00, -2.141654779865762e+00, -1.142730277514499e-01, -1.117320779478945e-01, -1.142730277514499e-01, -1.117320779478945e-01, -1.026496306344864e-03, -9.146782122445548e-04, -1.239789692717385e-03, -1.184821198649949e-03, -1.023892272570909e-03, -8.625304450700197e-04, -3.924590702604566e-02, -3.966434641430566e-02, -1.700546794411270e-03, -6.948884977835118e-04, -1.700546794411270e-03, -6.948884977835116e-04, -6.445943655997404e-01, -6.467091308029911e-01, -6.362870708037753e-01, -6.383965804992568e-01, -6.390666130976539e-01, -6.411935622061314e-01, -6.414862650253949e-01, -6.435863312164215e-01, -6.402633027811658e-01, -6.423766213263822e-01, -6.402633027811658e-01, -6.423766213263822e-01, -6.278665753357497e-01, -6.295769182848705e-01, -5.184157164676666e-01, -5.199639762336231e-01, -5.455391528613186e-01, -5.473819992838053e-01, -5.756220245403310e-01, -5.772457477935000e-01, -5.599698205642701e-01, -5.615932618070691e-01, -5.599698205642701e-01, -5.615932618070691e-01, -7.291709253355283e-01, -7.304197410554680e-01, -2.392134751777467e-01, -2.394078189787914e-01, -2.779542698153088e-01, -2.784418358291699e-01, -3.593368593429949e-01, -3.605477238917958e-01, -3.139427472848875e-01, -3.137024970682719e-01, -3.139427472848875e-01, -3.137024970682719e-01, -4.752850465931045e-01, -4.774361381440572e-01, -1.194190721025861e-02, -1.191712080832916e-02, -2.385063307926109e-02, -2.444800629882106e-02, -3.433260081657617e-01, -3.466339429518674e-01, -6.188544415415234e-02, -6.245017782738913e-02, -6.188544415415229e-02, -6.245017782738912e-02, -3.025783703749291e-03, -2.717486495629678e-03, -3.452817854546218e-04, -3.429960346009111e-04, -7.672394539217418e-04, -6.392262279757532e-04, -5.517692455349137e-02, -5.597002745851224e-02, -1.523521173673505e-03, -6.774067761422450e-04, -1.523521173673503e-03, -6.774067761422437e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.325309603299985e-08, 1.185558425401183e-11, -1.325317112305792e-08, -1.325302233131497e-08, 1.185541524986055e-11, -1.325311707379843e-08, -1.325262100891026e-08, 1.185461176244829e-11, -1.325259102932772e-08, -1.325346344530229e-08, 1.185712748825859e-11, -1.325365675280176e-08, -1.325306355124399e-08, 1.185581677785285e-11, -1.325310786060566e-08, -1.325306355124399e-08, 1.185581677785285e-11, -1.325310786060566e-08, -1.670762053983954e-05, 1.541225587214213e-07, -1.671394010920545e-05, -1.670810503726294e-05, 1.541207867069750e-07, -1.671489293763728e-05, -1.672449900596191e-05, 1.540597121148743e-07, -1.672853190234793e-05, -1.668535365811669e-05, 1.540100170374724e-07, -1.669051040982363e-05, -1.671561955386221e-05, 1.541018002171290e-07, -1.670448784628466e-05, -1.671561955386221e-05, 1.541018002171290e-07, -1.670448784628466e-05, -7.961307376205035e-03, 9.270722799357577e-04, -8.032367269770085e-03, -7.950632761007916e-03, 9.324368204854546e-04, -8.037737703846149e-03, -7.929923965288998e-03, 1.069807695322527e-03, -7.806168648621940e-03, -7.657684293388864e-03, 1.024962868820697e-03, -7.699310728549447e-03, -8.316699868975541e-03, 1.115015704194649e-03, -7.006139758056305e-03, -8.316699868975541e-03, 1.115015704194649e-03, -7.006139758056305e-03, -1.283382114362178e-01, 4.870430005817489e-01, -2.003199811409089e-01, -1.430449859181078e-01, 4.601020753985704e-01, -2.181435532843246e-01, -4.761856822238863e-03, 4.311409659161154e-04, -4.671259765636410e-03, 3.094737927086697e-01, 1.357480112752327e+00, 2.426286820677032e-01, -4.776896285103122e-01, 1.929431429665579e+00, 1.123747072894868e+00, -4.776896285103114e-01, 1.929431429665580e+00, 1.123747072894867e+00, -1.266463037120979e-03, 9.006507517295055e-08, -1.483450034763759e-03, -1.489857955956228e-03, 3.695673560289628e-07, -1.789152481769310e-03, 8.484278374399809e+00, 1.489288214502471e+01, 7.440888198293929e+00, -2.951338616456484e-04, 3.350885389426989e-17, -2.764124360901441e-04, -9.268094813328566e-04, 8.673770695270562e-13, -3.735929897656230e-04, -9.268094813346322e-04, 8.673770695270562e-13, -3.735929897696170e-04, -3.889614300038467e-06, 1.809299517292379e-08, -3.892925294646168e-06, -3.892522145634659e-06, 1.807545599629114e-08, -3.895734883410593e-06, -3.889735917370213e-06, 1.809212347410638e-08, -3.892991038046135e-06, -3.892228472407164e-06, 1.807663525628042e-08, -3.895546615973623e-06, -3.891134757405905e-06, 1.808413833346515e-08, -3.894340385722822e-06, -3.891134757405905e-06, 1.808413833346515e-08, -3.894340385722822e-06, -1.203985709600682e-04, 3.324691278596461e-06, -1.204158812215150e-04, -1.180455813600945e-04, 3.198712461362903e-06, -1.181279803250480e-04, -1.204394084557306e-04, 3.420793545345939e-06, -1.205788037992557e-04, -1.184049907056232e-04, 3.305373228471352e-06, -1.184947699937185e-04, -1.190865255149696e-04, 3.212781934568574e-06, -1.190625449646460e-04, -1.190865255149696e-04, 3.212781934568574e-06, -1.190625449646460e-04, -1.593475068867741e-02, 1.825453754003035e-03, -1.606113108213219e-02, -1.505375732182331e-02, 1.201192443406202e-03, -1.508844828724929e-02, -2.118365126739951e-02, 2.748455987594796e-03, -1.979287326696451e-02, -2.375148388786179e-02, 2.257366444272562e-03, -2.153262530887561e-02, -1.462733029083891e-02, 1.758833807333089e-03, -1.664753684950297e-02, -1.462733029083890e-02, 1.758833807333089e-03, -1.664753684950297e-02, 2.158470686221580e+00, 4.345108400965211e+00, 2.023324767586633e+00, -3.692185700319540e-02, 4.801730708975269e-01, -4.642700631668007e-02, 3.104136530115943e+00, 5.403210563745951e+00, 2.282163348877474e+00, -2.249409153888388e-04, 3.686127133635989e-06, -2.253429401389579e-04, 1.329458916085633e+00, 2.723523603638179e+00, 7.032326553370560e-01, 1.329458916085633e+00, 2.723523603638179e+00, 7.032326553370560e-01, -1.682404000654808e-04, 4.391412325733211e-24, -1.693615994067518e-04, -3.024498022948346e-04, 9.952946977518016e-18, -2.983485006514153e-04, -4.504361083870564e-04, 4.581716902253058e-25, -5.675101814328645e-04, 6.639303675232060e+00, 1.218782134268272e+01, 6.491574820556155e+00, -2.948352096659175e-04, 7.784361458058929e-20, -6.975833407959274e-04, -2.948352096659252e-04, 7.784361458058927e-20, -6.975833407937321e-04, -2.223669587583221e-02, 1.781738515145262e-03, -2.201989409584406e-02, -2.073164062518688e-02, 1.834071765417697e-03, -2.054511193054307e-02, -2.118087846823991e-02, 1.815455511527695e-03, -2.098826838588581e-02, -2.161365614457169e-02, 1.800280877020669e-03, -2.140552222816569e-02, -2.139003420191865e-02, 1.807857598825492e-03, -2.118975266867203e-02, -2.139003420191865e-02, 1.807857598825492e-03, -2.118975266867203e-02, -2.548124233788765e-02, 2.045475405717882e-03, -2.523641110566310e-02, -2.465160151238429e-02, 4.372269458584065e-03, -2.453138992275596e-02, -2.411080389560442e-02, 3.481409492639727e-03, -2.397468662778558e-02, -2.398719404128164e-02, 2.801304754186088e-03, -2.380509592932209e-02, -2.404639282660812e-02, 3.126795900343610e-03, -2.386380317338634e-02, -2.404639282660812e-02, 3.126795900343610e-03, -2.386380317338634e-02, -1.249965949500135e-02, 9.448281971276932e-04, -1.250638845686592e-02, -1.029933742293907e-01, 1.841168313207797e-01, -1.071442261521273e-01, -1.026231249606594e-01, 8.322264776862785e-02, -1.058172523962623e-01, -7.625347144095762e-02, 2.335777938713061e-02, -7.589958184165281e-02, -9.329205248663069e-02, 4.455605659310826e-02, -9.377393647705695e-02, -9.329205248663068e-02, 4.455605659310827e-02, -9.377393647705705e-02, -3.262142715688340e-02, 6.561578635696272e-03, -3.245147790354387e-02, 7.714350214035330e+00, 1.430892164753827e+01, 7.594093678902999e+00, 8.659959514624717e+00, 1.521830626896655e+01, 7.819597179560699e+00, -9.889241644162898e-02, 2.777420884472484e-02, -9.761107677351388e-02, 4.595451563324565e+00, 7.858164809404253e+00, 3.446802037821770e+00, 4.595451563324555e+00, 7.858164809404253e+00, 3.446802037821766e+00, -2.705985692035346e-03, 2.768157770177566e-04, -3.037483775075016e-03, -1.870160571551746e-05, 2.308592770889069e-85, -2.817878034224233e-05, -9.814600125111720e-05, 1.346473245321597e-36, -1.217786642890155e-04, 4.844593839765199e+00, 8.933405596013928e+00, 4.495099725568530e+00, -4.182877303740361e-04, 6.624839855865914e-22, -5.635625256344762e-04, -4.182877303764943e-04, 6.624839855865567e-22, -5.635625256291808e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
