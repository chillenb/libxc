
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646673253802516e+01, -1.646675559618101e+01, -1.646690856186357e+01, -1.646656446156149e+01, -1.646673758848025e+01, -1.646673758848025e+01, -2.780946721919943e+00, -2.780920819050487e+00, -2.780388704808971e+00, -2.781830904544800e+00, -2.780981300497267e+00, -2.780981300497267e+00, -5.856004224764203e-01, -5.854427749101975e-01, -5.825172292270812e-01, -5.865613222057030e-01, -5.852248469833506e-01, -5.852248469833506e-01, -1.765445070602848e-01, -1.782953662272666e-01, -6.733120921731427e-01, -1.423435323965571e-01, -1.558337093806193e-01, -1.558337093806193e-01, -3.042779918985064e-03, -3.261187079814929e-03, -4.473562895183672e-02, -1.642565260634043e-03, -2.114506623206996e-03, -2.114506623206996e-03, -4.014144070767467e+00, -4.013724432446152e+00, -4.014132906958134e+00, -4.013762335530729e+00, -4.013926940098861e+00, -4.013926940098861e+00, -1.694225293614384e+00, -1.702588151259202e+00, -1.693729566776501e+00, -1.701120678696249e+00, -1.699077398988672e+00, -1.699077398988672e+00, -4.980763062703547e-01, -5.202265890566194e-01, -4.653944317511981e-01, -4.664644622816458e-01, -5.034288870267951e-01, -5.034288870267951e-01, -1.048495088470441e-01, -1.811824995355792e-01, -9.872433390544272e-02, -1.484462398545976e+00, -1.205445842249253e-01, -1.205445842249253e-01, -1.276926751941690e-03, -1.613997584966633e-03, -1.310966680081652e-03, -7.409643772121870e-02, -1.546682379449462e-03, -1.546682379449462e-03, -4.783798270955125e-01, -4.804893738985011e-01, -4.798192683724840e-01, -4.792138718810850e-01, -4.795226079106059e-01, -4.795226079106059e-01, -4.646783150994660e-01, -4.352993300021002e-01, -4.447907134737358e-01, -4.532285007430769e-01, -4.489081304554471e-01, -4.489081304554471e-01, -5.446844645625403e-01, -2.217251026433083e-01, -2.569024255365611e-01, -3.153952386763394e-01, -2.845476408032516e-01, -2.845476408032516e-01, -4.029842869812338e-01, -4.137999065862375e-02, -5.911394715652003e-02, -2.992132861205481e-01, -8.985313427543774e-02, -8.985313427543776e-02, -4.693010943847126e-03, -4.626825588358914e-04, -9.295363865914986e-04, -8.580748299097989e-02, -1.438207307924102e-03, -1.438207307924101e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.989512121850637e+01, -1.989519330636041e+01, -1.989550383485754e+01, -1.989443152623998e+01, -1.989499480524758e+01, -1.989499480524758e+01, -3.273501688829449e+00, -3.273528245420597e+00, -3.274221160377481e+00, -3.273624752380121e+00, -3.273610656213924e+00, -3.273610656213924e+00, -6.728659751822963e-01, -6.720728047483850e-01, -6.539327159044687e-01, -6.589558024490521e-01, -6.579157271971974e-01, -6.579157271971974e-01, -2.031625043262324e-01, -2.046207014700546e-01, -7.774211923673414e-01, -1.753268432674678e-01, -1.838251446203055e-01, -1.838251446203055e-01, -5.363352255844255e-03, -5.902183162030918e-03, -1.010474290757472e-01, -2.425323283125491e-03, -3.362846313690711e-03, -3.362846313690714e-03, -4.949674474013796e+00, -4.951513935192973e+00, -4.949758006746334e+00, -4.951381877043621e+00, -4.950607192471864e+00, -4.950607192471864e+00, -1.830741428524316e+00, -1.844297264987875e+00, -1.819686061377380e+00, -1.831577928657297e+00, -1.843678567500669e+00, -1.843678567500669e+00, -6.008279322011255e-01, -6.624508214521271e-01, -5.577108160119265e-01, -5.887639679697587e-01, -6.110810723289978e-01, -6.110810723289978e-01, -1.547660842085612e-01, -2.197182824922517e-01, -1.480895388653028e-01, -1.896622074896275e+00, -1.542004115646918e-01, -1.542004115646918e-01, -1.819826577378017e-03, -2.391626608969605e-03, -2.025729994687951e-03, -1.217747509276580e-01, -2.391946149168823e-03, -2.391946149168824e-03, -6.202536992633656e-01, -6.127118099034512e-01, -6.153604815907782e-01, -6.175552474420498e-01, -6.164603573990045e-01, -6.164603573990045e-01, -6.061567921719685e-01, -5.060152097050339e-01, -5.309741637291451e-01, -5.585153373104315e-01, -5.441411266786607e-01, -5.441411266786607e-01, -6.917740865022629e-01, -2.578085095223400e-01, -2.923060697250364e-01, -3.671378026527769e-01, -3.249024611979024e-01, -3.249024611979024e-01, -4.688331734505844e-01, -9.740194213552791e-02, -1.202166481439663e-01, -3.554853325103041e-01, -1.249630483143263e-01, -1.249630483143263e-01, -9.400570529797555e-03, -6.199594954319409e-04, -1.296866982638144e-03, -1.226755804934766e-01, -2.211282103267657e-03, -2.211282103267653e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.153654683013775e-09, -5.153631029855692e-09, -5.153453947076813e-09, -5.153807354679701e-09, -5.153632395149958e-09, -5.153632395149958e-09, -6.642441360249446e-06, -6.642743373918825e-06, -6.649086620974846e-06, -6.633063732648345e-06, -6.642167434976958e-06, -6.642167434976958e-06, -3.538696273204359e-03, -3.536585999227255e-03, -3.449475213849833e-03, -3.363897836952566e-03, -3.398842871569373e-03, -3.398842871569373e-03, -2.112132876599994e-01, -2.169406019116702e-01, -2.049422745973802e-03, -1.097963168008593e-01, -2.077184766695545e-01, -2.077184766695542e-01, 2.101616545694419e+02, 2.183929154282619e+02, 3.025870783378818e+01, 2.183253183580554e+02, 2.596732803503723e+02, 2.596732803503745e+02, -1.540778077698546e-06, -1.541988944115235e-06, -1.540818391217561e-06, -1.541887472552924e-06, -1.541399494554453e-06, -1.541399494554453e-06, -4.796097244572019e-05, -4.705794492926625e-05, -4.792642635960423e-05, -4.712795299536720e-05, -4.747778502660171e-05, -4.747778502660171e-05, -7.398008941770908e-03, -6.979930990221820e-03, -9.586958934860239e-03, -1.068193647503584e-02, -7.174345472118497e-03, -7.174345472118497e-03, 9.570179367901750e-01, -8.018478097616925e-02, 1.344941151922637e+00, -9.281803511659658e-05, 6.107904433885591e-02, 6.107904433885591e-02, 3.005392946447845e+02, 2.558933222740185e+02, 1.538434659372177e+03, 6.095355665607380e+00, 7.167449726261492e+02, 7.167449726261535e+02, -1.113689810639020e-02, -9.729451566390341e-03, -9.995748142277501e-03, -1.034204805461898e-02, -1.014645831018034e-02, -1.014645831018034e-02, -1.292432187177999e-02, -1.162467612202882e-02, -1.139364147675288e-02, -1.134485820859031e-02, -1.136428441745477e-02, -1.136428441745477e-02, -5.733577012336729e-03, -7.342620015654032e-02, -6.199346292514475e-02, -4.054739564647435e-02, -5.233350955546712e-02, -5.233350955546717e-02, -1.573132889711382e-02, 3.296453867383217e+01, 1.485743856382362e+01, -5.407677735283620e-02, 1.606189987206340e+00, 1.606189987206337e+00, 1.563549797532692e+02, 1.563110659080561e+03, 6.607401048421643e+02, 2.291131416194059e+00, 9.093070004769925e+02, 9.093070004769911e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
