
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683701462284647e+01, -1.683703843201281e+01, -1.683719547602706e+01, -1.683684018836291e+01, -1.683701907420206e+01, -1.683701907420206e+01, -2.845241439614240e+00, -2.845215140531265e+00, -2.844675353811734e+00, -2.846142515924460e+00, -2.845277197716502e+00, -2.845277197716502e+00, -6.005726662573643e-01, -6.004208895496205e-01, -5.977071473213182e-01, -6.018201897614731e-01, -6.010224294072802e-01, -6.010224294072802e-01, -1.840193307816074e-01, -1.856645360877850e-01, -6.904348913384467e-01, -1.515345721123390e-01, -1.762782270982615e-01, -1.762782270982614e-01, -4.968905054531053e-02, -4.980936602123043e-02, -8.910332216979347e-02, -4.477637536041922e-02, -4.549606554860507e-02, -4.549606554860504e-02, -4.107141321212603e+00, -4.106726380671674e+00, -4.107130494153881e+00, -4.106764057903843e+00, -4.106926502205657e+00, -4.106926502205657e+00, -1.734546386587419e+00, -1.743048836140391e+00, -1.734162762666749e+00, -1.741671465417082e+00, -1.739441103014332e+00, -1.739441103014332e+00, -5.108718249826669e-01, -5.335525016836176e-01, -4.776704458603631e-01, -4.787151023757116e-01, -5.167933559274195e-01, -5.167933559274196e-01, -1.196812644658116e-01, -1.907814745893664e-01, -1.146367838204080e-01, -1.520264482253629e+00, -1.308481589209535e-01, -1.308481589209535e-01, -4.026486954005316e-02, -4.316682928535415e-02, -2.848343874466014e-02, -9.684406934067276e-02, -3.457663943668019e-02, -3.457663943668021e-02, -4.908736229757311e-01, -4.929039118366962e-01, -4.922354795750112e-01, -4.916431078092942e-01, -4.919430276141290e-01, -4.919430276141290e-01, -4.769838684608397e-01, -4.468856633460278e-01, -4.564243916067232e-01, -4.649884745857028e-01, -4.605900136632406e-01, -4.605900136632406e-01, -5.585711069032965e-01, -2.309875060712268e-01, -2.658089505137116e-01, -3.243849090691365e-01, -2.933048122925483e-01, -2.933048122925484e-01, -4.138700060956983e-01, -8.934392648131474e-02, -9.429666737217902e-02, -3.076897899808835e-01, -1.044676099046830e-01, -1.044676099046830e-01, -5.643028878866444e-02, -2.458288304756208e-02, -3.243986324322344e-02, -1.017620465317278e-01, -3.250939009315218e-02, -3.250939009315217e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.036305413055706e+01, -2.036302992470797e+01, -2.036313977501869e+01, -2.036309243098733e+01, -2.036340091896174e+01, -2.036346856917881e+01, -2.036243014900116e+01, -2.036223560747411e+01, -2.036310307815294e+01, -2.036272041490904e+01, -2.036310307815294e+01, -2.036272041490904e+01, -3.351207205503391e+00, -3.351278769451818e+00, -3.351234612732583e+00, -3.351307485781801e+00, -3.351914334924163e+00, -3.352086709583621e+00, -3.351271137175829e+00, -3.351438304849659e+00, -3.350662179075780e+00, -3.352048707307510e+00, -3.350662179075780e+00, -3.352048707307510e+00, -6.871524621511621e-01, -6.890188086505978e-01, -6.861048148544830e-01, -6.883728909527165e-01, -6.686716727585700e-01, -6.663228418421945e-01, -6.722972411030601e-01, -6.730455211390557e-01, -6.852503607043079e-01, -6.629756792142130e-01, -6.852503607043079e-01, -6.629756792142130e-01, -2.035438415293770e-01, -2.045071613327434e-01, -2.052822658588121e-01, -2.065791630119191e-01, -7.856110895530015e-01, -8.051238644206244e-01, -1.688431481646842e-01, -1.693641827476904e-01, -1.768046465058322e-01, -1.788060125435959e-01, -1.768046465058321e-01, -1.788060125435959e-01, -1.663693113584737e-02, -1.673087992763545e-02, -1.705111463016180e-02, -1.714264003070931e-02, -5.146436494255522e-02, -5.210315152591513e-02, -1.246139811127899e-02, -1.247335737188709e-02, -1.423052303405243e-02, -1.207240074086804e-02, -1.423052303405240e-02, -1.207240074086803e-02, -5.069163154239407e+00, -5.067981238471372e+00, -5.071084749134854e+00, -5.069841232550175e+00, -5.069269322091890e+00, -5.068046732077791e+00, -5.070920868078682e+00, -5.069733592798626e+00, -5.070146194037394e+00, -5.068915780513769e+00, -5.070146194037394e+00, -5.068915780513769e+00, -1.868440713190139e+00, -1.868362008707372e+00, -1.882764134308663e+00, -1.882331126104601e+00, -1.854948287239800e+00, -1.857818337910059e+00, -1.867296021492785e+00, -1.870327770958958e+00, -1.885933744216778e+00, -1.878313741877704e+00, -1.885933744216778e+00, -1.878313741877704e+00, -6.161696972042646e-01, -6.151114554885702e-01, -6.790417293985503e-01, -6.794421259596086e-01, -5.644242724255831e-01, -5.781271848531099e-01, -5.971110862627663e-01, -6.101946606089705e-01, -6.368066537014808e-01, -6.151571513802125e-01, -6.368066537014808e-01, -6.151571513802127e-01, -1.319607048868977e-01, -1.317753132404267e-01, -2.155303285196319e-01, -2.156431885186262e-01, -1.215783269575439e-01, -1.231163952592223e-01, -1.943453831597641e+00, -1.942727248786162e+00, -1.453682305892512e-01, -1.419007313542381e-01, -1.453682305892512e-01, -1.419007313542381e-01, -1.045350025468466e-02, -1.069108885702715e-02, -1.203250979455417e-02, -1.216314165063992e-02, -8.610722845609712e-03, -8.575183235448862e-03, -8.086435904045058e-02, -8.137601049198157e-02, -1.004202786894611e-02, -1.047337072102352e-02, -1.004202786894613e-02, -1.047337072102352e-02, -6.357339355266001e-01, -6.375152937864488e-01, -6.274298399866496e-01, -6.292167433575618e-01, -6.302104760349473e-01, -6.320110763182869e-01, -6.326298123596713e-01, -6.344004774371084e-01, -6.314073256917790e-01, -6.331927369327189e-01, -6.314073256917790e-01, -6.331927369327189e-01, -6.213909147968492e-01, -6.228174024251931e-01, -5.169630867757810e-01, -5.182981211525943e-01, -5.431240231451000e-01, -5.447209286118480e-01, -5.719153648344971e-01, -5.732888705213113e-01, -5.569899690250015e-01, -5.583630732756607e-01, -5.569899690250015e-01, -5.583630732756607e-01, -7.086939747949224e-01, -7.098042264315655e-01, -2.574197795967607e-01, -2.575828143795058e-01, -2.953659659643085e-01, -2.958728166205266e-01, -3.749604852565634e-01, -3.759952079253825e-01, -3.310382904848262e-01, -3.308898694652915e-01, -3.310382904848263e-01, -3.308898694652915e-01, -4.786379884843931e-01, -4.805202747595183e-01, -5.029459254607734e-02, -5.036478934651308e-02, -6.582482319352290e-02, -6.654724636067033e-02, -3.627521824941157e-01, -3.656302519360268e-01, -1.013843417131903e-01, -1.006151122047136e-01, -1.013843417131903e-01, -1.006151122047136e-01, -2.085086631543663e-02, -2.084751352258368e-02, -5.486715170290046e-03, -5.071828722540679e-03, -8.155174917280910e-03, -8.172124919144163e-03, -9.498949827254426e-02, -9.559978115248911e-02, -8.963773754470558e-03, -9.995294355528693e-03, -8.963773754470569e-03, -9.995294355528678e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.043401602249309e-08, 1.185558425401183e-11, -1.043407505857723e-08, -1.043395782851073e-08, 1.185541524986055e-11, -1.043403228730844e-08, -1.043364085111230e-08, 1.185461176244829e-11, -1.043361737800369e-08, -1.043430726173668e-08, 1.185712748825859e-11, -1.043445901963862e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.043399103588032e-08, 1.185581677785285e-11, -1.043402525603493e-08, -1.358064788891638e-05, 1.541225587214213e-07, -1.358577088276538e-05, -1.358103965629732e-05, 1.541207867069750e-07, -1.358654212396425e-05, -1.359428505024676e-05, 1.540597121148743e-07, -1.359756006350432e-05, -1.356249691843990e-05, 1.540100170374724e-07, -1.356668218543393e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -1.358708059286732e-05, 1.541018002171290e-07, -1.357812524846537e-05, -7.792259255394369e-03, 9.270722799357577e-04, -7.849951520308237e-03, -7.786461986509554e-03, 9.324368204854546e-04, -7.857131339723945e-03, -7.832736409582442e-03, 1.069807695322527e-03, -7.733242440070735e-03, -7.559812284896936e-03, 1.024962868820697e-03, -7.593914356376238e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.112308292553405e-03, 1.115015704194649e-03, -7.033461375403323e-03, -8.015022929288295e-01, 4.870430005817489e-01, -7.816385693227824e-01, -7.925801894797767e-01, 4.601020753985704e-01, -7.665752528935305e-01, -4.505851044012250e-03, 4.311409659161154e-04, -4.390509886285057e-03, -1.405355168870086e+00, 1.357480112752327e+00, -1.380998360113386e+00, -1.027527050921904e+00, 1.929431429665579e+00, -3.898047502256749e+00, -1.027527050921904e+00, 1.929431429665580e+00, -3.898047502256753e+00, -1.601233046657358e+04, 9.006507517295055e-08, -1.341327593453690e+04, -1.420990979929685e+04, 3.695673560289628e-07, -1.164774806483721e+04, -8.370059792973863e+01, 1.489288214502471e+01, -7.190430426370420e+01, -6.750537472164971e+04, 3.350885389426989e-17, -7.031007753052439e+04, -2.221427161418409e+04, 8.673770695270562e-13, -1.460208813509680e+05, -2.221427161418411e+04, 8.673770695270562e-13, -1.460208813509680e+05, -3.120937442842174e-06, 1.809299517292379e-08, -3.123583621634334e-06, -3.123251342613206e-06, 1.807545599629114e-08, -3.125818583373952e-06, -3.121034151413480e-06, 1.809212347410638e-08, -3.123635403204407e-06, -3.123017007873502e-06, 1.807663525628042e-08, -3.125668909910377e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -3.122147659704871e-06, 1.808413833346515e-08, -3.124709253674506e-06, -1.010635912347755e-04, 3.324691278596461e-06, -1.010779524700931e-04, -9.903149681292247e-05, 3.198712461362903e-06, -9.909978705291323e-05, -1.011475640512280e-04, 3.420793545345939e-06, -1.012672271456375e-04, -9.938724522915006e-05, 3.305373228471352e-06, -9.946546298030040e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -9.990971384051965e-05, 3.212781934568574e-06, -9.988260283181755e-05, -1.605154024547233e-02, 1.825453754003035e-03, -1.619117711055979e-02, -1.474343620688189e-02, 1.201192443406202e-03, -1.477479346054838e-02, -2.204666172622624e-02, 2.748455987594796e-03, -2.031678606014923e-02, -2.418338119192188e-02, 2.257366444272562e-03, -2.171147066780003e-02, -1.455920912893613e-02, 1.758833807333089e-03, -1.681843677980908e-02, -1.455920912893614e-02, 1.758833807333089e-03, -1.681843677980908e-02, -3.150401852206798e+00, 4.345108400965211e+00, -3.170434965885433e+00, -5.502177821396236e-01, 4.801730708975269e-01, -5.493965502748231e-01, -4.262172914865188e+00, 5.403210563745951e+00, -4.000430924985834e+00, -1.886068550772652e-04, 3.686127133635989e-06, -1.889444393377877e-04, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -2.359804503894215e+00, 2.723523603638179e+00, -2.609535107084575e+00, -1.699411089643476e+05, 4.391412325733211e-24, -1.460796247556560e+05, -7.954666730295906e+04, 9.952946977518016e-18, -7.449506296332044e+04, -2.990717847119347e+05, 4.581716902253058e-25, -2.612737931159296e+05, -1.696004532565848e+01, 1.218782134268272e+01, -1.643550682122481e+01, -2.313967161586600e+05, 7.784361458058929e-20, -9.240488802955455e+04, -2.313967161586598e+05, 7.784361458058927e-20, -9.240488802955452e+04, -2.219495429854996e-02, 1.781738515145262e-03, -2.195509733342586e-02, -2.076312885154710e-02, 1.834071765417697e-03, -2.055303334584081e-02, -2.118788746189437e-02, 1.815455511527695e-03, -2.097177410252597e-02, -2.159933539387829e-02, 1.800280877020669e-03, -2.136816452351270e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.138649414498954e-02, 1.807857598825492e-03, -2.116295032564181e-02, -2.560950998573218e-02, 2.045475405717882e-03, -2.533979798454380e-02, -2.658669298607634e-02, 4.372269458584065e-03, -2.639619554799486e-02, -2.539317146300312e-02, 3.481409492639727e-03, -2.519928883854928e-02, -2.474558936546363e-02, 2.801304754186088e-03, -2.452658703155491e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -2.505723377368717e-02, 3.126795900343610e-03, -2.483093712094919e-02, -1.210663724077704e-02, 9.448281971276932e-04, -1.210774703956818e-02, -2.896818500974693e-01, 1.841168313207797e-01, -2.893079402659515e-01, -1.863619421801817e-01, 8.322264776862785e-02, -1.860558812379716e-01, -9.818708946814067e-02, 2.335777938713061e-02, -9.716063264790924e-02, -1.367145607178618e-01, 4.455605659310826e-02, -1.373866162956502e-01, -1.367145607178618e-01, 4.455605659310827e-02, -1.373866162956503e-01, -3.643622074116785e-02, 6.561578635696272e-03, -3.608494043291562e-02, -8.685719210089600e+01, 1.430892164753827e+01, -8.522852476782363e+01, -3.265583822645921e+01, 1.521830626896655e+01, -3.015511765247127e+01, -1.291093042631665e-01, 2.777420884472484e-02, -1.254546410894600e-01, -8.387690733914193e+00, 7.858164809404253e+00, -8.331015966778173e+00, -8.387690733914191e+00, 7.858164809404253e+00, -8.331015966778182e+00, -5.373095280702843e+03, 2.768157770177566e-04, -4.881149980613249e+03, -5.023960912792954e+06, 2.308592770889069e-85, -5.846008400586689e+06, -5.637392051558921e+05, 1.346473245321597e-36, -4.801493238580819e+05, -1.031515996738637e+01, 8.933405596013928e+00, -9.898975829389819e+00, -3.312813801870204e+05, 6.624839855865914e-22, -1.199647090775366e+05, -3.312813801870212e+05, 6.624839855865567e-22, -1.199647090775370e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
