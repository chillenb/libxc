
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.629022302534408e+01, -1.629024530982345e+01, -1.629039554983576e+01, -1.629006295111148e+01, -1.629022994742630e+01, -1.629022994742630e+01, -2.676375656030167e+00, -2.676348940899735e+00, -2.675798154535759e+00, -2.677271692732075e+00, -2.676409071225318e+00, -2.676409071225318e+00, -4.921451363876314e-01, -4.920010184361835e-01, -4.890502932615576e-01, -4.930491122548283e-01, -4.917458611581441e-01, -4.917458611581441e-01, -9.575701720034223e-02, -9.731723476367793e-02, -5.784057199629757e-01, -7.379359263698808e-02, -7.959281079745432e-02, -7.959281079745413e-02, 4.727520688667403e-03, 4.944366737915755e-03, 7.483422888008201e-03, 2.861273150288723e-03, 3.538035619547478e-03, 3.538035619547483e-03, -3.908877746504823e+00, -3.908608143500236e+00, -3.908872691035214e+00, -3.908634534708789e+00, -3.908736682139730e+00, -3.908736682139730e+00, -1.595532986440973e+00, -1.603912020477831e+00, -1.594976495146969e+00, -1.602391844396284e+00, -1.600411618434428e+00, -1.600411618434428e+00, -4.065810293088120e-01, -4.410337152389920e-01, -3.744165225400862e-01, -3.852640707775142e-01, -4.122955357300080e-01, -4.122955357300080e-01, -5.318905899423827e-02, -1.085847103508312e-01, -4.553446405537352e-02, -1.402677908081183e+00, -5.790857577275173e-02, -5.790857577275173e-02, 2.237236491124341e-03, 2.800530441812242e-03, 2.167282559141123e-03, -1.236679668845718e-02, 2.588933558734100e-03, 2.588933558734116e-03, -3.972539297408141e-01, -4.021890685362480e-01, -4.022132268326667e-01, -4.009310227637257e-01, -4.017581339824872e-01, -4.017581339824872e-01, -3.825557322046658e-01, -3.451933573640686e-01, -3.543047736632232e-01, -3.653583828891785e-01, -3.589653003609518e-01, -3.589653003609518e-01, -4.644528448035890e-01, -1.399986534339932e-01, -1.711734550325690e-01, -2.298485097015376e-01, -1.991923905266933e-01, -1.991923905266935e-01, -3.139038864843758e-01, 8.325137412177330e-03, -8.240537237032918e-04, -2.146621254189039e-01, -2.819797020826617e-02, -2.819797020826597e-02, 6.346806771046399e-03, 7.783908700658396e-04, 1.610174298615118e-03, -2.381353962073112e-02, 2.404803307537798e-03, 2.404803307537774e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.964090988533722e+01, -1.964098990021589e+01, -1.964132176456761e+01, -1.964013181963643e+01, -1.964075870822332e+01, -1.964075870822332e+01, -3.155915541827309e+00, -3.155956146099353e+00, -3.156975632380676e+00, -3.155808275942302e+00, -3.156040534162201e+00, -3.156040534162201e+00, -5.755033134530561e-01, -5.748926547145856e-01, -5.635037190012581e-01, -5.681210891892721e-01, -5.669003012081114e-01, -5.669003012081114e-01, -1.151736741566060e-01, -1.221346942889388e-01, -6.771352549829491e-01, -2.292967030524985e-02, -6.155098607183105e-02, -6.155098607183333e-02, 6.069714106507434e-03, 6.327530654164872e-03, -6.935197684053057e-04, 3.748098154831963e-03, 4.602793946122610e-03, 4.602793946122304e-03, -4.889147308541110e+00, -4.891855055579443e+00, -4.889266754811533e+00, -4.891657280465503e+00, -4.890522948559180e+00, -4.890522948559180e+00, -1.734518460278659e+00, -1.747371113305225e+00, -1.724441502860619e+00, -1.736006912074412e+00, -1.746272876866352e+00, -1.746272876866352e+00, -5.161645639822428e-01, -5.989881487776870e-01, -4.688310547091009e-01, -5.349595841986553e-01, -5.314011711481375e-01, -5.314011711481375e-01, -1.749469326944013e-02, -5.265331228632010e-02, -2.240090341448381e-02, -1.837648377586915e+00, -9.682053324015316e-03, -9.682053324015316e-03, 2.944446484660990e-03, 3.669392581491900e-03, 2.845304684563804e-03, -2.377565597196075e-02, 3.390912466788107e-03, 3.390912466787990e-03, -5.217647051721245e-01, -5.466040950984472e-01, -5.355259446854881e-01, -5.249478081833781e-01, -5.300786582547299e-01, -5.300786582547299e-01, -5.278889976657204e-01, -4.125954842646058e-01, -4.403982087309926e-01, -4.920791704120668e-01, -4.627887421297047e-01, -4.627887421297047e-01, -6.327199113319479e-01, -1.317457427250308e-01, -2.088773601305252e-01, -2.816374941637914e-01, -2.498911076275646e-01, -2.498911076275655e-01, -3.769798830175724e-01, 1.144374757620019e-03, -1.426302730918484e-02, -2.683872138835348e-01, -2.248852886714208e-02, -2.248852886714225e-02, 7.958556488392173e-03, 1.034346310576561e-03, 2.127787258328478e-03, -2.393984688301939e-02, 3.153693470855318e-03, 3.153693470855520e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.266899405559555e-09, -5.266854425791447e-09, -5.266614890301768e-09, -5.267284859282684e-09, -5.266939454321984e-09, -5.266939454321984e-09, -6.808778838344556e-06, -6.808865695680848e-06, -6.810163379807243e-06, -6.802746868705869e-06, -6.808235738479537e-06, -6.808235738479537e-06, -3.565440088097852e-03, -3.557364024340387e-03, -3.266379490526279e-03, -3.196831910581499e-03, -3.235040846561302e-03, -3.235040846561302e-03, -2.359893636446031e-01, -1.953709897076774e-01, -2.096983927642478e-03, -1.375136087169554e+00, -7.210869273978856e-01, -7.210869273978739e-01, 9.663403465243952e+00, 1.013019649472375e+01, 1.252063965396147e+00, 9.347336316364856e+00, 1.161277345952785e+01, 1.161277345957961e+01, -1.336666350661745e-06, -1.333511675599088e-06, -1.336528523268515e-06, -1.333743843340590e-06, -1.335066544540740e-06, -1.335066544540740e-06, -4.765516077585391e-05, -4.683636045903068e-05, -4.751816267989738e-05, -4.676184315405125e-05, -4.730648421097207e-05, -4.730648421097207e-05, -5.937891626299066e-03, -9.910804340120501e-04, -8.497341708228936e-03, 2.897351141424235e-03, -5.025000509870339e-03, -5.025000509870339e-03, -2.931683073964913e+00, -5.384793907988678e-01, -3.071683623279601e+00, -5.993626855540156e-05, -2.475070780961885e+00, -2.475070780961885e+00, 1.257215335280367e+01, 1.102216293890810e+01, 7.063213420936493e+01, -2.114986887696939e+00, 3.241855182882134e+01, 3.241855182912376e+01, -3.228137826464030e-02, -1.926079597940720e-03, -9.907104381127770e-03, -2.096042654905593e-02, -1.497503173455875e-02, -1.497503173455875e-02, 1.079701692898911e-02, -1.149424024016541e-02, -1.052522452258299e-02, -3.586129378639432e-03, -8.213213902809408e-03, -8.213213902809408e-03, -1.337685809844010e-04, -1.656736944477720e-01, -5.333343202843178e-02, -3.632659203411197e-02, -3.644245944324973e-02, -3.644245944325764e-02, -1.534594177746399e-02, 1.369162934039437e+00, -4.608498356802962e-01, -5.005699377831418e-02, -3.524918380098031e+00, -3.524918380097768e+00, 7.329530740818670e+00, 5.815944624992522e+01, 2.725034220615893e+01, -3.322869021621066e+00, 4.119582562965239e+01, 4.119582562932150e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
