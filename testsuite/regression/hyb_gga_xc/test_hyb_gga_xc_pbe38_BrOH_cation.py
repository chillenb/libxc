
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe38_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.314212332906582e+01, -1.314214131249751e+01, -1.314226225142775e+01, -1.314199385303449e+01, -1.314212866011245e+01, -1.314212866011245e+01, -2.212364023091389e+00, -2.212345424853477e+00, -2.211968998613080e+00, -2.213036336167597e+00, -2.212394238363705e+00, -2.212394238363705e+00, -4.633107594619135e-01, -4.630903305279505e-01, -4.589431345671470e-01, -4.621623955488678e-01, -4.622147855610138e-01, -4.622147855610138e-01, -1.409244472700999e-01, -1.421735002957044e-01, -5.333774219572232e-01, -1.159460016019058e-01, -1.339761756989561e-01, -1.339761756989560e-01, -6.316211777610278e-03, -6.650938476631819e-03, -3.611030896812287e-02, -3.643175300259707e-03, -5.084123340419552e-03, -5.084123340419552e-03, -3.205485710029662e+00, -3.205311178033996e+00, -3.205483386319907e+00, -3.205329192706056e+00, -3.205393900346198e+00, -3.205393900346198e+00, -1.342164647190921e+00, -1.348758862325304e+00, -1.342026499849618e+00, -1.347836625171835e+00, -1.345904204638917e+00, -1.345904204638917e+00, -4.017781732561412e-01, -4.327272527069105e-01, -3.748518819375097e-01, -3.872976766886451e-01, -4.076052338781715e-01, -4.076052338781716e-01, -8.738632355676468e-02, -1.477779944657678e-01, -8.166401728813513e-02, -1.205305269339840e+00, -9.815618157987427e-02, -9.815618157987427e-02, -2.812807187338715e-03, -3.561400369628133e-03, -2.727107690927983e-03, -5.688446451333311e-02, -3.425587786113417e-03, -3.425587786113423e-03, -4.047024343043668e-01, -4.012277859126560e-01, -4.023596793924025e-01, -4.033648177712906e-01, -4.028534206537051e-01, -4.028534206537051e-01, -3.953800854614611e-01, -3.462288705062441e-01, -3.577485711018987e-01, -3.707782214914967e-01, -3.638580875343561e-01, -3.638580875343561e-01, -4.515554933105320e-01, -1.781251166725489e-01, -2.040659102884080e-01, -2.520331535742523e-01, -2.257192130969695e-01, -2.257192130969695e-01, -3.208963120419064e-01, -3.458262068029366e-02, -4.661826087248076e-02, -2.422333975573447e-01, -7.030779862150391e-02, -7.030779862150394e-02, -8.899130873276685e-03, -9.520417312500038e-04, -2.002017558217327e-03, -6.652705236400021e-02, -3.145907747701088e-03, -3.145907747701081e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe38_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.584140209367143e+01, -1.584138371535161e+01, -1.584147534460295e+01, -1.584143728556838e+01, -1.584169101328068e+01, -1.584174966854461e+01, -1.584085946139211e+01, -1.584069512583135e+01, -1.584144240052714e+01, -1.584110553676978e+01, -1.584144240052714e+01, -1.584110553676978e+01, -2.632124584753413e+00, -2.632241415903352e+00, -2.632157300217344e+00, -2.632278997937355e+00, -2.632995964801458e+00, -2.633190637673518e+00, -2.631953711786147e+00, -2.632152288595896e+00, -2.631671578168493e+00, -2.632900399666289e+00, -2.631671578168493e+00, -2.632900399666289e+00, -5.519905158413529e-01, -5.547089810424874e-01, -5.506184673561271e-01, -5.539331274838680e-01, -5.279732493819195e-01, -5.241519211259171e-01, -5.299013506454076e-01, -5.311411755596953e-01, -5.502505874309219e-01, -5.140969096241043e-01, -5.502505874309219e-01, -5.140969096241043e-01, -1.533493992974982e-01, -1.552994678102963e-01, -1.557255804506605e-01, -1.581261318096047e-01, -6.289688608500723e-01, -6.502867420833855e-01, -1.231542153644713e-01, -1.240623439800287e-01, -1.404631851042416e-01, -1.136936681610668e-01, -1.404631851042415e-01, -1.136936681610667e-01, -8.134442312614495e-03, -8.641954087039834e-03, -8.522056558403369e-03, -9.126688429691969e-03, -4.544580881797296e-02, -4.773276424103925e-02, -4.895365533938591e-03, -4.813927850017767e-03, -7.259249773345670e-03, -4.133731195936905e-03, -7.259249773345668e-03, -4.133731195936903e-03, -4.004844395004721e+00, -4.003906751279016e+00, -4.006785446259437e+00, -4.005789130589982e+00, -4.004948625462689e+00, -4.003972489180325e+00, -4.006619321840071e+00, -4.005677217352416e+00, -4.005838514748987e+00, -4.004853610717410e+00, -4.005838514748987e+00, -4.004853610717410e+00, -1.439806095363289e+00, -1.439737889866156e+00, -1.451772182816772e+00, -1.451392780578932e+00, -1.427097086938170e+00, -1.429883205712346e+00, -1.437321598745059e+00, -1.440255065547180e+00, -1.455638060672286e+00, -1.448244846569025e+00, -1.455638060672286e+00, -1.448244846569025e+00, -5.133647483637631e-01, -5.125463426400257e-01, -5.672604551094310e-01, -5.676697028768189e-01, -4.697644858067914e-01, -4.821861453951691e-01, -5.023367364191361e-01, -5.121841550731900e-01, -5.314414508348856e-01, -5.135280304024377e-01, -5.314414508348857e-01, -5.135280304024377e-01, -9.997694461165364e-02, -1.002166690695425e-01, -1.549413754998331e-01, -1.552678197467364e-01, -9.316310115580656e-02, -9.603112928586513e-02, -1.577154986695904e+00, -1.576608605547090e+00, -1.080345928584981e-01, -1.064462043000669e-01, -1.080345928584981e-01, -1.064462043000669e-01, -3.673184314239325e-03, -3.817321070801399e-03, -4.710153965122214e-03, -4.781470901359506e-03, -3.521411212987420e-03, -3.728743211102252e-03, -6.966312131353702e-02, -7.014369509799824e-02, -3.597360347714807e-03, -4.937755174046111e-03, -3.597360347714814e-03, -4.937755174046121e-03, -5.283047043522318e-01, -5.296530732311346e-01, -5.253991354459132e-01, -5.268098442748872e-01, -5.266647771010183e-01, -5.280694388465184e-01, -5.275386155069367e-01, -5.288955915798830e-01, -5.271253884395356e-01, -5.285055821169106e-01, -5.271253884395356e-01, -5.285055821169106e-01, -5.149087729601697e-01, -5.159642041290743e-01, -4.227747659668752e-01, -4.241592276555262e-01, -4.524692017976376e-01, -4.540324523062812e-01, -4.813306343510996e-01, -4.824847888045365e-01, -4.670784039799256e-01, -4.682725575056988e-01, -4.670784039799256e-01, -4.682725575056988e-01, -5.915007601934742e-01, -5.925165815275971e-01, -1.883383280590530e-01, -1.887822334152189e-01, -2.248333810904355e-01, -2.258661013351150e-01, -3.102306985733644e-01, -3.113088835874200e-01, -2.641622011822946e-01, -2.641112874561940e-01, -2.641622011822946e-01, -2.641112874561939e-01, -3.925140065466781e-01, -3.945580265570902e-01, -4.474132572853833e-02, -4.502034999246120e-02, -5.833965485763418e-02, -5.993160889209934e-02, -3.071909727363933e-01, -3.100834879763909e-01, -8.166325818229690e-02, -8.273951487001954e-02, -8.166325818229693e-02, -8.273951487001958e-02, -1.161939205942707e-02, -1.203741030394103e-02, -1.267870503205273e-03, -1.270732577119803e-03, -2.579338597017824e-03, -2.743210330816943e-03, -7.839264518431535e-02, -7.930900184531622e-02, -3.406875948468134e-03, -4.526545965209490e-03, -3.406875948468129e-03, -4.526545965209483e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe38_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe38", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.621266861515280e-09, 3.855567579455844e-10, -8.621315671506002e-09, -8.621192206763502e-09, 3.855637563905792e-10, -8.621260454760679e-09, -8.620880100854294e-09, 3.855734091993355e-10, -8.620837617387291e-09, -8.621737541614659e-09, 3.854697494807899e-10, -8.621915631093157e-09, -8.621243269394117e-09, 3.855271085313426e-10, -8.621418154609757e-09, -8.621243269394117e-09, 3.855271085313426e-10, -8.621418154609757e-09, -1.081267683928252e-05, 2.158879157656427e-06, -1.081626224142511e-05, -1.081267363741885e-05, 2.159323527660124e-06, -1.081653797525596e-05, -1.081577365893345e-05, 2.169371669283230e-06, -1.081762548353527e-05, -1.080372793245328e-05, 2.149943255801801e-06, -1.080629027106895e-05, -1.081933733626623e-05, 2.159156568071321e-06, -1.080789203697893e-05, -1.081933733626623e-05, 2.159156568071321e-06, -1.080789203697893e-05, -5.786108164301647e-03, 3.586683876242116e-03, -5.789556473968912e-03, -5.804101039055775e-03, 3.559577090514688e-03, -5.808775986426104e-03, -6.191198008571265e-03, 2.876045381924161e-03, -6.164588146681536e-03, -5.997691519284351e-03, 2.810968523930000e-03, -6.009279223291558e-03, -6.104884883787383e-03, 2.852692094259074e-03, -5.684719918155815e-03, -6.104884883787383e-03, 2.852692094259074e-03, -5.684719918155815e-03, -6.496568625679773e-01, 3.108902575321890e-01, -6.011053609503578e-01, -6.446644442421006e-01, 3.280826843588528e-01, -5.853079272318578e-01, -3.420253399394047e-03, 1.940414170439823e-03, -3.115249141999781e-03, -9.540140599030509e-01, 2.258949661124237e-01, -9.204040926765338e-01, -6.000104474138739e-01, 1.882246441728870e-01, -1.420895914204962e+00, -6.000104474138737e-01, 1.882246441728873e-01, -1.420895914204963e+00, -3.058996777208660e+00, 8.471332723898200e-03, -3.028292573817423e+00, -3.222584740123741e+00, 9.964515393423459e-03, -3.206074530506311e+00, -1.762577273643947e+00, 5.126941006152715e-02, -1.772124871451300e+00, -2.804281812963406e+00, 3.008683449168684e-03, -2.728115673153636e+00, -3.055901556673028e+00, 4.414566270491809e-03, -7.757103810311740e+00, -3.055901556672584e+00, 4.414566270088269e-03, -7.757103810311309e+00, -2.310804353264862e-06, 5.666948009101149e-07, -2.313201585079592e-06, -2.309202493439213e-06, 5.704413223836728e-07, -2.311591748160875e-06, -2.310724637771874e-06, 5.668443577206054e-07, -2.313121511360881e-06, -2.309304292511811e-06, 5.701514261968389e-07, -2.311707529072577e-06, -2.310006732186731e-06, 5.686004611431787e-07, -2.312384255155958e-06, -2.310006732186731e-06, 5.686004611431787e-07, -2.312384255155958e-06, -8.554624562379758e-05, 1.221811741084532e-05, -8.556239686288024e-05, -8.376082975951874e-05, 1.218856108878283e-05, -8.383852878898175e-05, -8.575227310361312e-05, 1.161795009824474e-05, -8.582392117765581e-05, -8.423626688359149e-05, 1.159619612758267e-05, -8.426033577734013e-05, -8.437038804013363e-05, 1.250231835492394e-05, -8.451354801308315e-05, -8.437038804013363e-05, 1.250231835492394e-05, -8.451354801308315e-05, -9.089280892313291e-03, 1.180452397706796e-02, -9.256261005409910e-03, -4.813844595933797e-03, 1.489938286408802e-02, -4.808781938534037e-03, -1.376665461887787e-02, 1.535577972946644e-02, -1.120143710719315e-02, -9.588447467949297e-03, 2.278859644535717e-02, -6.983135868895866e-03, -7.194221806582518e-03, 1.179162458306085e-02, -1.005481422413910e-02, -7.194221806582520e-03, 1.179162458306085e-02, -1.005481422413910e-02, -1.151314824359143e+00, 1.261488607621168e-01, -1.170599726636711e+00, -4.309758011466153e-01, 1.139695105238702e-01, -4.263431812710248e-01, -1.308703833699587e+00, 1.279112469154852e-01, -1.266317405995622e+00, -8.890449480964172e-05, 1.207887057881010e-04, -8.918394701799143e-05, -1.196512175957543e+00, 2.409472748596690e-01, -1.440897645639247e+00, -1.196512175957543e+00, 2.409472748596690e-01, -1.440897645639247e+00, -3.937332138474292e+00, 2.933546798259037e-03, -3.407701710617028e+00, -3.389780769354948e+00, 3.699144102256803e-03, -3.129563874196168e+00, -1.930067341147331e+01, 3.685108437354808e-02, -2.147282885693938e+01, -1.982906077393598e+00, 1.250822448857004e-01, -1.908427698361028e+00, -9.599966723847132e+00, 1.410360645889085e-02, -9.429520113108005e+00, -9.599966723843817e+00, 1.410360646869916e-02, -9.429520113104704e+00, -4.844969283203843e-03, 2.514346072918196e-02, -4.586658603300816e-03, -6.520177600413554e-03, 2.157065992117518e-02, -6.267815900684728e-03, -5.992010275409717e-03, 2.270457728491302e-02, -5.737845743197257e-03, -5.508139886083861e-03, 2.373865089872573e-02, -5.251700501742430e-03, -5.755872660274487e-03, 2.321019190891285e-02, -5.500524065823728e-03, -5.755872660274487e-03, 2.321019190891285e-02, -5.500524065823728e-03, -4.706009131593188e-03, 2.977269840520045e-02, -4.450417393457515e-03, -1.855712266429832e-02, 1.592277215307748e-02, -1.820570217901961e-02, -1.529536917308663e-02, 1.838749842245184e-02, -1.495461649880233e-02, -1.167945980698792e-02, 2.169730037966074e-02, -1.138837645132603e-02, -1.357207638795424e-02, 1.995497716545398e-02, -1.325494289833058e-02, -1.357207638795424e-02, 1.995497716545398e-02, -1.325494289833058e-02, -4.208464516467851e-03, 1.183264719377924e-02, -4.164568994968796e-03, -2.428635449043142e-01, 8.498631964250428e-02, -2.398205091153094e-01, -1.557521501405928e-01, 7.821972418059023e-02, -1.526117222958984e-01, -6.702470082082897e-02, 6.964082434152352e-02, -6.518163415084552e-02, -1.051315014878772e-01, 7.796350422599263e-02, -1.059397162898790e-01, -1.051315014878773e-01, 7.796350422599266e-02, -1.059397162898791e-01, -2.530707452127590e-02, 2.285950305464996e-02, -2.458661476918104e-02, -1.614945403062819e+00, 4.213028450134424e-02, -1.616823183291394e+00, -1.575996733081641e+00, 6.458066222247318e-02, -1.610040472048596e+00, -7.720159962707540e-02, 1.099497136873529e-01, -7.085169267315328e-02, -1.913491071117444e+00, 2.182010199987041e-01, -2.247297716784609e+00, -1.913491071117444e+00, 2.182010199987039e-01, -2.247297716784609e+00, -2.422253994894907e+00, 1.056259116938041e-02, -2.472892173928463e+00, -1.211695116017430e+01, 4.011531506685853e-03, -2.146488048249401e+01, -7.477106707971145e+00, 5.020763908060611e-03, -7.960041855830440e+00, -2.158129729652663e+00, 2.002688123716920e-01, -2.109872569050601e+00, -1.979781878124953e+01, 1.800188742308661e-02, -9.787367675885227e+00, -1.979781878124588e+01, 1.800188743452388e-02, -9.787367675881576e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
