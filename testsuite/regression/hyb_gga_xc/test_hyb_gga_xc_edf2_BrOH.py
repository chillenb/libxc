
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_edf2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.762313938181420e+01, -1.762316604842808e+01, -1.762333940147709e+01, -1.762290164050460e+01, -1.762315299025760e+01, -1.762315299025760e+01, -2.959656255649679e+00, -2.959641576941547e+00, -2.959357919351985e+00, -2.960462520157699e+00, -2.959661076966011e+00, -2.959661076966011e+00, -6.142524807007711e-01, -6.140274762211155e-01, -6.090751066562969e-01, -6.130774678220102e-01, -6.141685634987123e-01, -6.141685634987123e-01, -1.889215909292994e-01, -1.905252330234150e-01, -7.187231321949651e-01, -1.489300613890241e-01, -1.893935275638365e-01, -1.893935275638365e-01, -4.149864084899765e-02, -4.215338108080409e-02, -7.980376934208289e-02, -3.535421877197965e-02, -4.174364191976255e-02, -4.174364191976255e-02, -4.304035192176722e+00, -4.303894028667997e+00, -4.304025268617989e+00, -4.303915434401524e+00, -4.303956406172181e+00, -4.303956406172181e+00, -1.773873256416670e+00, -1.783145840923943e+00, -1.773069212668336e+00, -1.780290688634702e+00, -1.781206791911301e+00, -1.781206791911301e+00, -5.212109473372382e-01, -5.487182068553015e-01, -4.969158634348105e-01, -5.052920228252029e-01, -5.379763122827150e-01, -5.379763122827150e-01, -1.199027539147125e-01, -1.973205994229379e-01, -1.182745205067991e-01, -1.594073053566579e+00, -1.317225715165422e-01, -1.317225715165422e-01, -3.464856448536771e-02, -3.587105668176604e-02, -2.742016770735878e-02, -9.033100710201289e-02, -3.259112544795693e-02, -3.259112544795693e-02, -5.184136053433844e-01, -5.193045632877847e-01, -5.190184436116363e-01, -5.187712476547091e-01, -5.188972218469349e-01, -5.188972218469349e-01, -5.020609586411127e-01, -4.642156866513023e-01, -4.759683970314316e-01, -4.862901099764668e-01, -4.810071996313682e-01, -4.810071996313682e-01, -5.745215872323522e-01, -2.393585140031148e-01, -2.746411780857679e-01, -3.322111068286719e-01, -3.017815557392106e-01, -3.017815557392105e-01, -4.220841336559477e-01, -7.919240703942529e-02, -8.747506608040036e-02, -3.102995512399371e-01, -1.032553950276083e-01, -1.032553950276083e-01, -4.592028865495024e-02, -2.423881588638734e-02, -2.839947767903767e-02, -9.950922356940903e-02, -2.912512100461854e-02, -2.912512100461854e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_edf2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.182825834434257e+01, -2.182832319925929e+01, -2.182863393057504e+01, -2.182757148748755e+01, -2.182829236774097e+01, -2.182829236774097e+01, -3.590687482820502e+00, -3.590708258483111e+00, -3.591424563310003e+00, -3.590937259457985e+00, -3.590713173309379e+00, -3.590713173309379e+00, -7.238008032490145e-01, -7.229951218283660e-01, -7.027425186491622e-01, -7.079987028187619e-01, -7.235072285053412e-01, -7.235072285053412e-01, -2.171833054593739e-01, -2.194703801904892e-01, -8.631128446768591e-01, -1.685022136078335e-01, -2.178590525811354e-01, -2.178590525811354e-01, -1.962619866428143e-02, -2.027522544031647e-02, -6.062106567192150e-02, -1.234606008832822e-02, -2.007492604260915e-02, -2.007492604260915e-02, -5.410314110810558e+00, -5.412013916154090e+00, -5.410489209056647e+00, -5.411810874061874e+00, -5.411183732896152e+00, -5.411183732896152e+00, -2.007106942486267e+00, -2.021666759249455e+00, -2.000362708430981e+00, -2.011698896166301e+00, -2.025795981008074e+00, -2.025795981008074e+00, -6.424258925804891e-01, -7.062877868248368e-01, -6.108227599272568e-01, -6.439645796237401e-01, -6.670863603058582e-01, -6.670863603058582e-01, -1.333104824987298e-01, -2.261692311394852e-01, -1.301900654324900e-01, -2.056891875593995e+00, -1.473976734538079e-01, -1.473976734538079e-01, -1.200783500654046e-02, -1.306186334419661e-02, -9.923112219186460e-03, -8.355816536658391e-02, -1.190216392013940e-02, -1.190216392013940e-02, -6.771923713489310e-01, -6.699798093750153e-01, -6.724662855735701e-01, -6.744576674685100e-01, -6.734532105624461e-01, -6.734532105624461e-01, -6.572486697399045e-01, -5.570337937340805e-01, -5.836829882014863e-01, -6.100819120054134e-01, -5.964643271603901e-01, -5.964643271603902e-01, -7.382116299062859e-01, -2.742094111334711e-01, -3.171494849724428e-01, -3.970273502065784e-01, -3.537988540147185e-01, -3.537988540147183e-01, -5.052970576492017e-01, -5.694901623628353e-02, -7.617269156559651e-02, -3.776835605390494e-01, -1.068812143092655e-01, -1.068812143092655e-01, -2.237402924854341e-02, -5.888445000340178e-03, -8.457433479088051e-03, -1.008843603747475e-01, -1.038364231387401e-02, -1.038364231387401e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_edf2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.160776473066785e-09, -4.160759229276647e-09, -4.160619135115745e-09, -4.160902778911612e-09, -4.160767907285717e-09, -4.160767907285717e-09, -5.393499165606902e-06, -5.393680687448070e-06, -5.397789500184449e-06, -5.386172034732844e-06, -5.393501158242015e-06, -5.393501158242015e-06, -2.954584705252728e-03, -2.953366673910805e-03, -2.893756228048658e-03, -2.827478034681839e-03, -2.954202705291681e-03, -2.954202705291681e-03, -2.437541881138335e-01, -2.425786993295855e-01, -1.647933973289271e-03, -3.809662344963243e-01, -2.435738342454937e-01, -2.435738342454937e-01, -1.588618583593171e+03, -1.393387091629431e+03, -1.517144202232405e+01, -1.177181585867557e+04, -1.451418421559700e+03, -1.451418421559700e+03, -1.245970732760540e-06, -1.246875624130287e-06, -1.246056092092481e-06, -1.246759769808093e-06, -1.246444194844521e-06, -1.246444194844521e-06, -3.973445773404648e-05, -3.898279702982207e-05, -3.969926080396284e-05, -3.911259751615981e-05, -3.927079926974116e-05, -3.927079926974116e-05, -6.435284735970759e-03, -6.020073006529362e-03, -7.741406801354532e-03, -8.134446673505647e-03, -5.761639990546218e-03, -5.761639990546218e-03, -5.922276683675922e-01, -1.409216940213661e-01, -7.152267685451609e-01, -7.532595589865868e-05, -5.386080446318114e-01, -5.386080446318114e-01, -1.327153818990651e+04, -9.051282058605957e+03, -2.786892021918792e+04, -4.266729369915221e+00, -1.319884377755462e+04, -1.319884377755463e+04, -8.165518317447546e-03, -7.627959513377895e-03, -7.791272612998518e-03, -7.936890110465920e-03, -7.861648638598775e-03, -7.861648638598775e-03, -9.452478477990458e-03, -9.445502000808360e-03, -9.142953104264846e-03, -9.010077085336002e-03, -9.071600913445161e-03, -9.071600913445159e-03, -4.947898686851768e-03, -8.286481196298950e-02, -5.857689978750476e-02, -3.491851459317537e-02, -4.607791758171507e-02, -4.607791758171508e-02, -1.366613286222907e-02, -1.872818580904817e+01, -5.827327864438269e+00, -4.954698405615982e-02, -1.701373118877335e+00, -1.701373118877339e+00, -9.313038576475954e+02, -4.397207551337714e+05, -6.622436399478093e+04, -2.316446096734052e+00, -2.342944329046465e+04, -2.342944329046473e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
