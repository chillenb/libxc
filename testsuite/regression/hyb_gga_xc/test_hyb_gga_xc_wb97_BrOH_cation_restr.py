
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.092779926213077e+01, -2.092782649258100e+01, -2.092801640953353e+01, -2.092760985802290e+01, -2.092781308959247e+01, -2.092781308959247e+01, -3.317038138702156e+00, -3.317001413800523e+00, -3.316238684577448e+00, -3.318231047472236e+00, -3.317078623403370e+00, -3.317078623403370e+00, -5.175399807371450e-01, -5.173659827830192e-01, -5.144311178919221e-01, -5.193633793491879e-01, -5.176897935697484e-01, -5.176897935697484e-01, -5.176155002399131e-02, -5.431820786450337e-02, -6.253208602811593e-01, -1.729838839431259e-02, -2.974170947305871e-02, -2.974170947305857e-02, 2.651049748745892e-03, 2.780565593338454e-03, 1.114675837101933e-02, 1.578886026914220e-03, 1.962895469838299e-03, 1.962895469838280e-03, -4.899279315977672e+00, -4.898782945036967e+00, -4.899266678935589e+00, -4.898828288412302e+00, -4.899021735008779e+00, -4.899021735008779e+00, -1.944502354589196e+00, -1.953820862206057e+00, -1.947828111039734e+00, -1.955885198975938e+00, -1.948232833155360e+00, -1.948232833155360e+00, -4.115571537800162e-01, -4.541851316166043e-01, -3.726189322442108e-01, -3.842148777813400e-01, -4.182595025236137e-01, -4.182595025236137e-01, 4.946838748357787e-03, -5.237716435066028e-02, 7.706701810444636e-03, -1.670805142726954e+00, -1.369682749062974e-03, -1.369682749062974e-03, 1.230631512283645e-03, 1.545258758090720e-03, 1.195619550643781e-03, 1.333613064429527e-02, 1.429984674181869e-03, 1.429984674181875e-03, -4.145422420651409e-01, -4.072032201413422e-01, -4.102573076457614e-01, -4.126213290431294e-01, -4.114886536310272e-01, -4.114886536310272e-01, -3.997609434450644e-01, -3.372181665265380e-01, -3.483715185628002e-01, -3.603798537380383e-01, -3.535537511784047e-01, -3.535537511784047e-01, -4.821711303522774e-01, -9.327247138549931e-02, -1.322691053958646e-01, -2.016158708316226e-01, -1.655684495822548e-01, -1.655684495822549e-01, -2.997059952459007e-01, 1.079925813292197e-02, 1.249025612948045e-02, -1.851937328497232e-01, 1.230809013596727e-02, 1.230809013596727e-02, 3.633235576920256e-03, 4.255385668582106e-04, 8.835232683191509e-04, 1.296575658940312e-02, 1.327238270328808e-03, 1.327238270328810e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.512040599533830e+01, -2.512050538818805e+01, -2.512092244933329e+01, -2.511944419695055e+01, -2.512022229795624e+01, -2.512022229795624e+01, -3.907258192938122e+00, -3.907311611910062e+00, -3.908646875460875e+00, -3.907097463204478e+00, -3.907420121199326e+00, -3.907420121199326e+00, -6.202223082523596e-01, -6.192584545515216e-01, -5.929191583734414e-01, -5.992291080755757e-01, -5.983414881530037e-01, -5.983414881530037e-01, -1.157463586020682e-01, -1.205738059044125e-01, -7.471682638579851e-01, -4.360186151156280e-02, -7.580923662219383e-02, -7.580923662219433e-02, 3.504781869882323e-03, 3.678099588909571e-03, 1.624702556504039e-02, 2.088600720067440e-03, 2.596308953090025e-03, 2.596308953089795e-03, -6.115548288613893e+00, -6.118912402817696e+00, -6.115696794202901e+00, -6.118666626788963e+00, -6.117255930573560e+00, -6.117255930573560e+00, -1.935143168530349e+00, -1.961073262586446e+00, -1.896868278955845e+00, -1.920711811941203e+00, -1.966934279882087e+00, -1.966934279882087e+00, -5.394854667673274e-01, -6.723837136390325e-01, -4.834543551805250e-01, -5.748782538384871e-01, -5.565148922243703e-01, -5.565148922243703e-01, 7.642384838034907e-03, -8.028085736892859e-02, 1.199229623992093e-02, -2.256951187634173e+00, -1.328037801841203e-02, -1.328037801841203e-02, 1.630596538823404e-03, 2.044996523252708e-03, 1.590031153857324e-03, 2.118446965874131e-02, 1.897832109090635e-03, 1.897832109090572e-03, -5.946567452417717e-01, -6.092702697453491e-01, -6.082310593624055e-01, -6.030159703218604e-01, -6.060751666522257e-01, -6.060751666522257e-01, -5.747510242136542e-01, -4.219428032131989e-01, -4.499704052100119e-01, -5.061143674619466e-01, -4.726129277909273e-01, -4.726129277909273e-01, -7.093255765756200e-01, -1.342609513898305e-01, -1.929059110693102e-01, -2.674254729844233e-01, -2.335186691672069e-01, -2.335186691672063e-01, -3.791385595135758e-01, 1.550956317105965e-02, 1.898685996816294e-02, -2.468084225827253e-01, 1.757999021544882e-02, 1.757999021544861e-02, 4.806577931991089e-03, 5.665376665124221e-04, 1.173265302593475e-03, 1.954135716439274e-02, 1.762594953916279e-03, 1.762594953916359e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.188838837120388e-09, -7.188791769489803e-09, -7.188505271921986e-09, -7.189207159152102e-09, -7.188850352065139e-09, -7.188850352065139e-09, -9.257909878756906e-06, -9.258047208441275e-06, -9.260316987416702e-06, -9.249436555920278e-06, -9.257195546048797e-06, -9.257195546048797e-06, -4.474463043377304e-03, -4.472558313165634e-03, -4.531097055060195e-03, -4.415387661291766e-03, -4.446956166567009e-03, -4.446956166567009e-03, 1.395388954221841e-01, 1.529899902224877e-01, -2.671274300657782e-03, -9.841146515276278e-02, 9.216895264594181e-02, 9.216895264594978e-02, -6.408910288324007e+00, -6.725981973893132e+00, -2.392321828732666e+00, -6.159741949516902e+00, -7.661449823590752e+00, -7.661449823703082e+00, -1.924730589865637e-06, -1.921837705198177e-06, -1.924600695400307e-06, -1.922047778083389e-06, -1.923270802934958e-06, -1.923270802934958e-06, -8.433949088970060e-05, -8.167278152112005e-05, -8.709908813313251e-05, -8.458218798464647e-05, -8.165119125762966e-05, -8.165119125762966e-05, -8.081794055448326e-03, 6.960505466952079e-03, -1.096631653194317e-02, 7.675530118037567e-03, -7.201062721190808e-03, -7.201062721190808e-03, -6.858300725491214e-01, -1.283534012767104e-01, -8.077716271578578e-01, -3.402162068842959e-05, -2.811570974676831e-01, -2.811570974676831e-01, -8.278784015714013e+00, -7.261683319201982e+00, -4.643592031405314e+01, -1.747368018849870e+00, -2.132860376942709e+01, -2.132860376933107e+01, 7.756280546094358e-05, 1.167880440683633e-02, 1.213286423127413e-02, 9.102819260989414e-03, 1.112117076057187e-02, 1.112117076057187e-02, 2.685558695528823e-03, -1.323211813339966e-02, -1.317773934156002e-02, -6.584710415986538e-03, -1.147456815458369e-02, -1.147456815458369e-02, 4.644975083637115e-03, -6.916143879615805e-02, -3.288124849701880e-02, -3.492143613110946e-02, -2.800310156749139e-02, -2.800310156749453e-02, -1.716041502410730e-02, -2.256965488910651e+00, -1.859548857789546e+00, -5.315647491757517e-02, -1.156571244231180e+00, -1.156571244231054e+00, -4.931125390427853e+00, -3.838220480268092e+01, -1.794523557660612e+01, -1.351710542167033e+00, -2.709627504465204e+01, -2.709627504481480e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
