
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_qtp17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.621183454623750e+00, -7.621204551550879e+00, -7.621304720186632e+00, -7.620990708080583e+00, -7.621154337924740e+00, -7.621154337924740e+00, -1.298883343679651e+00, -1.298886756407478e+00, -1.298995935906460e+00, -1.299040996318408e+00, -1.298917320650885e+00, -1.298917320650885e+00, -2.829394488117686e-01, -2.825758954522995e-01, -2.734601808869539e-01, -2.756410104180657e-01, -2.747083459743565e-01, -2.747083459743565e-01, -7.505763096200768e-02, -7.694288239906796e-02, -3.256385655669065e-01, -4.904326374438310e-02, -6.668520543744279e-02, -6.668520543744275e-02, -4.691877935108022e-03, -4.908700080878753e-03, -1.716264612035396e-02, -2.876001953846583e-03, -3.370530991739966e-03, -3.370530991739966e-03, -1.914331317486414e+00, -1.914684889558949e+00, -1.914348803448005e+00, -1.914660921134561e+00, -1.914509896655059e+00, -1.914509896655059e+00, -7.503380993398278e-01, -7.556586771323406e-01, -7.461023199932093e-01, -7.508144978929819e-01, -7.553208353509180e-01, -7.553208353509180e-01, -2.541782138819156e-01, -2.760146840995974e-01, -2.369138941577473e-01, -2.477523520681556e-01, -2.583397138207491e-01, -2.583397138207491e-01, -2.457746637847610e-02, -6.650603109391366e-02, -2.265935744408447e-02, -7.454662983615137e-01, -3.705566557538181e-02, -3.705566557538181e-02, -2.275977349915953e-03, -2.818035237903173e-03, -2.210942576194157e-03, -1.835308589635480e-02, -2.572180120310237e-03, -2.572180120310237e-03, -2.583265105571269e-01, -2.564732749857613e-01, -2.571264604171981e-01, -2.576643293654708e-01, -2.573953084645348e-01, -2.573953084645348e-01, -2.523437463841149e-01, -2.148128862971331e-01, -2.259802469804576e-01, -2.367230445369904e-01, -2.313002026221972e-01, -2.313002026221972e-01, -2.876494847402783e-01, -9.019529481481421e-02, -1.140864717153628e-01, -1.568115505397126e-01, -1.348233613067481e-01, -1.348233613067481e-01, -1.994169667853924e-01, -1.688329117865294e-02, -1.640311456544275e-02, -1.536206827653196e-01, -2.350740766249777e-02, -2.350740766249778e-02, -6.367728292107131e-03, -8.436475225693075e-04, -1.668899541087175e-03, -2.202893017362269e-02, -2.406442388499306e-03, -2.406442388499305e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_qtp17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.014066431997839e+01, -1.014065165044208e+01, -1.014069647769322e+01, -1.014067531280207e+01, -1.014080734969187e+01, -1.014083028197558e+01, -1.014044007376592e+01, -1.014036669980423e+01, -1.014068032006156e+01, -1.014055929232164e+01, -1.014068032006156e+01, -1.014055929232164e+01, -1.720939613335032e+00, -1.720891994715232e+00, -1.720944172026793e+00, -1.720892008964831e+00, -1.721010225989742e+00, -1.721012246217069e+00, -1.721167029990672e+00, -1.721155843085310e+00, -1.720723144179520e+00, -1.721193170328642e+00, -1.720723144179520e+00, -1.721193170328642e+00, -3.856955105898721e-01, -3.851202812131455e-01, -3.855360255688032e-01, -3.848210062193871e-01, -3.794885028380073e-01, -3.808746480810661e-01, -3.828969409405921e-01, -3.824308796865662e-01, -3.771303421752215e-01, -3.914571248669565e-01, -3.771303421752215e-01, -3.914571248669565e-01, -1.336189325806220e-01, -1.316977441087195e-01, -1.344095888925236e-01, -1.323186179451750e-01, -4.385194430596136e-01, -4.404090050181678e-01, -1.141917092755099e-01, -1.140230162668379e-01, -1.039108951907160e-01, -1.360484022524600e-01, -1.039108951907160e-01, -1.360484022524600e-01, -6.179295541284999e-03, -5.997260469634550e-03, -6.479651081881228e-03, -6.261643344605747e-03, -2.698072442404349e-02, -2.698884405087108e-02, -3.724349770238061e-03, -3.751188668917364e-03, -4.223379740898350e-03, -5.099628568917294e-03, -4.223379740898351e-03, -5.099628568917294e-03, -2.534635805552028e+00, -2.534102691142766e+00, -2.535067210885377e+00, -2.534523024441888e+00, -2.534661202043418e+00, -2.534120139323207e+00, -2.535034064429076e+00, -2.534499149562458e+00, -2.534854212194217e+00, -2.534314058048032e+00, -2.534854212194217e+00, -2.534314058048032e+00, -1.010043929568384e+00, -1.010012755857868e+00, -1.016485410646398e+00, -1.016325177817931e+00, -1.005849238284134e+00, -1.006092102126541e+00, -1.011423926961136e+00, -1.011757240404797e+00, -1.016111923015948e+00, -1.014966147785889e+00, -1.016111923015948e+00, -1.014966147785889e+00, -3.383139483481895e-01, -3.379429351880610e-01, -3.594419294998540e-01, -3.594275526403892e-01, -3.153076291874412e-01, -3.182835200845722e-01, -3.213483650923069e-01, -3.255403083006414e-01, -3.453851846721936e-01, -3.390351549175588e-01, -3.453851846721936e-01, -3.390351549175588e-01, -8.951306084555113e-02, -8.916490995412947e-02, -1.440319137189331e-01, -1.438095479244962e-01, -8.204628502458486e-02, -8.224634278418916e-02, -9.778246036344977e-01, -9.774897671014937e-01, -9.963212392221815e-02, -9.499778768277685e-02, -9.963212392221815e-02, -9.499778768277685e-02, -2.985580406719604e-03, -2.940915031146168e-03, -3.674499968588928e-03, -3.651151607684778e-03, -2.912417722540591e-03, -2.848586218276203e-03, -5.001195073541472e-02, -5.027918643218605e-02, -3.628816246475194e-03, -3.227938356164611e-03, -3.628816246475194e-03, -3.227938356164612e-03, -3.343642287480028e-01, -3.348703947222650e-01, -3.335837630152730e-01, -3.340601398901800e-01, -3.338580266080165e-01, -3.343428828961647e-01, -3.340809845400395e-01, -3.345785319164020e-01, -3.339689716298743e-01, -3.344603823745784e-01, -3.339689716298743e-01, -3.344603823745784e-01, -3.261409159414317e-01, -3.265732795452665e-01, -2.949175659674585e-01, -2.950623641325452e-01, -3.033239332909408e-01, -3.035534527221809e-01, -3.120345037779539e-01, -3.123714846445374e-01, -3.074812943206341e-01, -3.078021681680749e-01, -3.074812943206341e-01, -3.078021681680749e-01, -3.748185398466645e-01, -3.749580472602901e-01, -1.673786922895661e-01, -1.670050665657701e-01, -1.859103416356863e-01, -1.851290001960579e-01, -2.202227057087219e-01, -2.202656763970957e-01, -2.009493296858811e-01, -2.007689818896958e-01, -2.009493296858811e-01, -2.007689818896957e-01, -2.750102588095041e-01, -2.750924556290832e-01, -2.573052403120542e-02, -2.572444399739827e-02, -3.746474889313646e-02, -3.780257370771350e-02, -2.106398033608844e-01, -2.107405882989022e-01, -6.673898249052301e-02, -6.551763661631790e-02, -6.673898249052300e-02, -6.551763661631789e-02, -8.321628976818476e-03, -8.166717421412013e-03, -1.105351319851052e-03, -1.104748162954681e-03, -2.201311913635061e-03, -2.155318595307317e-03, -6.158574917200525e-02, -6.181118204120362e-02, -3.360054032197506e-03, -3.027074715438006e-03, -3.360054032197506e-03, -3.027074715438005e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_qtp17_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_qtp17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.611372447522786e-11, 1.170921901630798e-11, 2.611464365808158e-11, 2.611304438121032e-11, 1.170905209862770e-11, 2.611459434165803e-11, 2.611294223033859e-11, 1.170825853081313e-11, 2.611122874549764e-11, 2.611479515006792e-11, 1.171074319828009e-11, 2.612023313214189e-11, 2.611013657118939e-11, 1.170944866948430e-11, 2.611923446504274e-11, 2.611013657118939e-11, 1.170944866948430e-11, 2.611923446504274e-11, 2.343447825435521e-07, 1.522198110828852e-07, 2.344206912326797e-07, 2.343368593089420e-07, 1.522180609451604e-07, 2.344235381655609e-07, 2.343499798936798e-07, 1.521577403603697e-07, 2.342354871976065e-07, 2.342605804554874e-07, 1.521086588024419e-07, 2.341825532956996e-07, 2.353922248544692e-07, 1.521993088564237e-07, 2.333112174790417e-07, 2.353922248544692e-07, 1.521993088564237e-07, 2.333112174790417e-07, 8.374505561685443e-04, 9.156269431464273e-04, 7.885401930455212e-04, 8.475313608596911e-04, 9.209252548004489e-04, 7.871679189992904e-04, 8.816434943032857e-04, 1.056600192911137e-03, 9.782896198138448e-04, 9.082322225521862e-04, 1.012309006242664e-03, 8.790525597594574e-04, 4.838879423249977e-04, 1.101250078216937e-03, 1.368448049120765e-03, 4.838879423249977e-04, 1.101250078216937e-03, 1.368448049120765e-03, 3.562653174677590e-01, 4.810301240313569e-01, 2.646828538935395e-01, 3.432121662260949e-01, 4.544218028627856e-01, 2.439777098445170e-01, 4.939172925136078e-04, 4.258182379418423e-04, 2.873306395277937e-04, 8.700456692137450e-01, 1.340721099014644e+00, 7.952241285865251e-01, -3.601323154062690e-02, 1.905611288558597e+00, 1.674978459820750e+00, -3.601323154062655e-02, 1.905611288558597e+00, 1.674978459820750e+00, 4.540737485738453e-08, 8.895316066464251e-08, 4.497760085111271e-08, 1.867562961546278e-07, 3.650047960779880e-07, 1.843734548976600e-07, 8.466083403406474e+00, 1.470901940249354e+01, 7.448004604745496e+00, 1.671943329483281e-17, 3.309516434001965e-17, 1.669549824134440e-17, 3.948951218794083e-13, 8.566687106440061e-13, 4.461124731444040e-13, 3.948951218794083e-13, 8.566687106440061e-13, 4.461124731444039e-13, 3.082830501088294e-08, 1.786962486214695e-08, 3.101361946282871e-08, 3.079747385989068e-08, 1.785230221855915e-08, 3.098750586317883e-08, 3.082516678775443e-08, 1.786876392504334e-08, 3.101392154920350e-08, 3.080152428740982e-08, 1.785346691978313e-08, 3.098729174611224e-08, 3.081227123175622e-08, 1.786087736638534e-08, 3.100089623125589e-08, 3.081227123175622e-08, 1.786087736638534e-08, 3.100089623125589e-08, 4.174219920219891e-06, 3.283645707255764e-06, 4.178712984661128e-06, 4.016610248299622e-06, 3.159222184062127e-06, 4.039990816155518e-06, 4.367691590620555e-06, 3.378561526267594e-06, 4.210100864947626e-06, 4.233017661850007e-06, 3.264566151576644e-06, 4.073803596468935e-06, 3.853657497042943e-06, 3.173117960067727e-06, 4.231892293745302e-06, 3.853657497042943e-06, 3.173117960067727e-06, 4.231892293745302e-06, 1.509711539935063e-03, 1.802917287904232e-03, 1.568456716688215e-03, 1.041152747556239e-03, 1.186362907067854e-03, 1.034135474789882e-03, 2.795767435468093e-03, 2.714524432192392e-03, 1.680424008444162e-03, 2.289630685308119e-03, 2.229497722738333e-03, 1.434231592873601e-03, 9.227230629172650e-04, 1.737119809711693e-03, 1.976339624037568e-03, 9.227230629172669e-04, 1.737119809711693e-03, 1.976339624037570e-03, 2.602267994994726e+00, 4.291465087373047e+00, 2.478469990251269e+00, 3.136021187620747e-01, 4.742450082938537e-01, 3.016922474304183e-01, 3.510571456593242e+00, 5.336504260489829e+00, 2.722292844081706e+00, 4.577600649537855e-06, 3.640619391245422e-06, 4.621407042397606e-06, 1.878069193267151e+00, 2.689899855445115e+00, 1.348909281310093e+00, 1.878069193267151e+00, 2.689899855445115e+00, 1.348909281310093e+00, 2.177921960350201e-24, 4.337197358748850e-24, 2.191478699290397e-24, 4.958041698997461e-18, 9.830071088906683e-18, 4.964956012558473e-18, 2.267654972981336e-25, 4.525152496052403e-25, 2.289649700647247e-25, 6.853451667027421e+00, 1.203735441252615e+01, 6.704436724557978e+00, 3.818485996944530e-20, 7.688258230181658e-20, 3.887311736816071e-20, 3.818485996944529e-20, 7.688258230181657e-20, 3.887311736816071e-20, 1.546060346601336e-03, 1.759741743353345e-03, 1.462337035223128e-03, 1.589158147187685e-03, 1.811428904116244e-03, 1.502462805404996e-03, 1.573968353456515e-03, 1.793042480521180e-03, 1.488060012719409e-03, 1.561207499662760e-03, 1.778055187180908e-03, 1.476694856680290e-03, 1.567575079867158e-03, 1.785538369210363e-03, 1.482374917384640e-03, 1.567575079867158e-03, 1.785538369210363e-03, 1.482374917384640e-03, 1.753676049400511e-03, 2.020222622931241e-03, 1.673037644220897e-03, 3.611309011595285e-03, 4.318290823292903e-03, 3.408795473772262e-03, 2.915465656698467e-03, 3.438429128533064e-03, 2.744770142303610e-03, 2.361294433575140e-03, 2.766720744875148e-03, 2.248964749501881e-03, 2.622373334992351e-03, 3.088193481820850e-03, 2.491998238600255e-03, 2.622373334992351e-03, 3.088193481820850e-03, 2.491998238600255e-03, 8.379899177976590e-04, 9.331636514841414e-04, 8.175228571951937e-04, 1.260995589320610e-01, 1.818437840205231e-01, 1.197862811706976e-01, 6.040337691099232e-02, 8.219520767271887e-02, 5.475840907357975e-02, 1.771685037104654e-02, 2.306941174037591e-02, 1.664322674285828e-02, 3.170195107878124e-02, 4.400598182035384e-02, 3.182035720304102e-02, 3.170195107878131e-02, 4.400598182035385e-02, 3.182035720304100e-02, 5.379343311389593e-03, 6.480571492045700e-03, 4.924820927504868e-03, 7.697262715978870e+00, 1.413226829386496e+01, 7.579850236773435e+00, 8.708119562912390e+00, 1.503042594465832e+01, 7.892209713374306e+00, 2.191469070990368e-02, 2.743131737750601e-02, 1.854834943334552e-02, 4.979852812300582e+00, 7.761150429041237e+00, 3.934393283502699e+00, 4.979852812300581e+00, 7.761150429041237e+00, 3.934393283502696e+00, 1.407610688326810e-04, 2.733982982891423e-04, 1.388767292781602e-04, 1.142531483272597e-85, 2.280091625569450e-85, 1.143410774632345e-85, 6.635332650791553e-37, 1.329850118836145e-36, 6.732529188925577e-37, 5.222961149858836e+00, 8.823116638038448e+00, 4.884526280131539e+00, 3.239278865800783e-22, 6.543051709497199e-22, 3.325618852046104e-22, 3.239278865800614e-22, 6.543051709496857e-22, 3.325618852045932e-22]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
