
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2b_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.571101835480320e+01, -1.571105138634021e+01, -1.571122847860159e+01, -1.571073642004714e+01, -1.571098994715482e+01, -1.571098994715482e+01, -2.648768656792901e+00, -2.648757155242087e+00, -2.648554933129469e+00, -2.649397426098322e+00, -2.648817314171089e+00, -2.648817314171089e+00, -5.583454100084563e-01, -5.580984191499648e-01, -5.534252172456233e-01, -5.572350430518699e-01, -5.585273055173464e-01, -5.585273055173464e-01, -1.748271331821956e-01, -1.761516404437799e-01, -6.422187500084142e-01, -1.460235536785084e-01, -1.610051352779377e-01, -1.610051352779377e-01, -6.915144046737310e-03, -7.310692780395501e-03, -4.438407507254365e-02, -3.885780519963255e-03, -7.411042239404030e-03, -7.411042239404030e-03, -3.873960294485288e+00, -3.874182463966187e+00, -3.873975383325589e+00, -3.874171424123435e+00, -3.874070138729446e+00, -3.874070138729446e+00, -1.590435997557707e+00, -1.598545269632042e+00, -1.589422294310880e+00, -1.596509921814323e+00, -1.595519779881148e+00, -1.595519779881148e+00, -4.817173658340271e-01, -5.103995573173111e-01, -4.497516662746845e-01, -4.575122916132675e-01, -4.881739500563279e-01, -4.881739500563279e-01, -1.117192306938252e-01, -1.852463163282790e-01, -1.043894371576947e-01, -1.454036962041882e+00, -1.239637222747515e-01, -1.239637222747515e-01, -2.985700980894065e-03, -3.795611369428945e-03, -2.902665319208983e-03, -7.182181339446575e-02, -4.220367511678787e-03, -4.220367511678790e-03, -4.681864015841279e-01, -4.717291112366396e-01, -4.711244707261308e-01, -4.702096220195349e-01, -4.707266355251070e-01, -4.707266355251070e-01, -4.524712841999268e-01, -4.175773522408667e-01, -4.294299221777714e-01, -4.416457481230212e-01, -4.353004671344783e-01, -4.353004671344783e-01, -5.340493606423380e-01, -2.210591571921323e-01, -2.507892750734022e-01, -3.045392982688271e-01, -2.751073217963356e-01, -2.751073217963355e-01, -3.871319577330548e-01, -4.226605354275809e-02, -5.831401056348438e-02, -2.906152711574351e-01, -8.907746331717102e-02, -8.907746331717102e-02, -9.870107780588994e-03, -9.905640539199134e-04, -2.119398302022811e-03, -8.430099015593998e-02, -3.781619626629510e-03, -3.781619626629506e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2b_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.997007404627987e+01, -1.997005082857078e+01, -1.997016165599757e+01, -1.997011459384058e+01, -1.997042379572782e+01, -1.997049437906489e+01, -1.996943310657110e+01, -1.996923349886608e+01, -1.997012702897758e+01, -1.996972377918553e+01, -1.997012702897758e+01, -1.996972377918553e+01, -3.286360236507861e+00, -3.286541972905020e+00, -3.286395114191004e+00, -3.286585232800354e+00, -3.287333680096211e+00, -3.287608149904087e+00, -3.286230220730526e+00, -3.286516477343937e+00, -3.285782284426439e+00, -3.287367600390588e+00, -3.285782284426439e+00, -3.287367600390588e+00, -6.606054416599073e-01, -6.650804779193198e-01, -6.588963439073748e-01, -6.643852022882454e-01, -6.347704466136357e-01, -6.273543139822392e-01, -6.354109246798058e-01, -6.378455699351004e-01, -6.698951301120075e-01, -5.986087177951918e-01, -6.698951301120075e-01, -5.986087177951918e-01, -1.861982743542480e-01, -1.812712146971110e-01, -1.891844495225092e-01, -1.843572495413785e-01, -7.548535510975116e-01, -7.844579498421289e-01, -1.468343529735198e-01, -1.450280692126082e-01, -1.342525937172442e-01, -2.434719602340003e-01, -1.342525937172442e-01, -2.434719602340004e-01, -7.996980505121274e-03, -1.040711902004612e-02, -8.270832216738281e-03, -1.112582603101363e-02, -5.417551462633786e-02, -6.113669110114205e-02, -5.417286173810426e-03, -5.010450087158890e-03, -1.224390400771288e-02, 3.103968020556163e-03, -1.224390400771287e-02, 3.103968020556146e-03, -4.982255458717773e+00, -4.981107646518685e+00, -4.983941925839634e+00, -4.982736696365591e+00, -4.982350852065085e+00, -4.981164679539202e+00, -4.983797662923958e+00, -4.982645037931744e+00, -4.983119149837683e+00, -4.981926129352888e+00, -4.983119149837683e+00, -4.981926129352888e+00, -1.750792414675485e+00, -1.750709192782985e+00, -1.768181854918184e+00, -1.767679229808293e+00, -1.726953489502583e+00, -1.733490224334571e+00, -1.742150218203144e+00, -1.748737190040759e+00, -1.777662003080825e+00, -1.762533047637821e+00, -1.777662003080825e+00, -1.762533047637821e+00, -6.025599891746850e-01, -6.015495002524823e-01, -6.533599705387054e-01, -6.533876719126503e-01, -5.503185051134827e-01, -5.655109690744767e-01, -5.774705061741053e-01, -5.908143760758110e-01, -6.235187763699458e-01, -6.013519377205602e-01, -6.235187763699458e-01, -6.013519377205603e-01, -1.214620526302425e-01, -1.194910772775730e-01, -1.816071190762509e-01, -1.807176555550953e-01, -1.158777145293759e-01, -1.133882569802634e-01, -1.887611236725365e+00, -1.886870318222696e+00, -1.402379137208516e-01, -1.154568310906832e-01, -1.402379137208516e-01, -1.154568310906832e-01, -3.615880807257498e-03, -4.350899621356648e-03, -4.914595245569007e-03, -5.271827618579227e-03, -3.317531699771763e-03, -4.374627358141090e-03, -8.606730583885064e-02, -8.737095628784412e-02, -7.664852775763342e-04, -7.514521165840708e-03, -7.664852775763155e-04, -7.514521165840717e-03, -5.984274006053640e-01, -5.999798748520776e-01, -6.023306510287899e-01, -6.038569944919803e-01, -6.013406089284944e-01, -6.028274496209386e-01, -6.000461119367847e-01, -6.015491780151788e-01, -6.007349900842164e-01, -6.022258053281987e-01, -6.007349900842164e-01, -6.022258053281987e-01, -5.823319892392893e-01, -5.837062800507314e-01, -4.986084074700431e-01, -5.003056973532930e-01, -5.296961592460285e-01, -5.316324128312736e-01, -5.586727915027473e-01, -5.600785564183262e-01, -5.445630599808032e-01, -5.460280378599605e-01, -5.445630599808032e-01, -5.460280378599605e-01, -6.837733925433053e-01, -6.843611638006637e-01, -2.215478766755999e-01, -2.208040034278494e-01, -2.656142463112633e-01, -2.656837599126584e-01, -3.605790730527561e-01, -3.617444390876454e-01, -3.096856231232228e-01, -3.098391937799213e-01, -3.096856231232228e-01, -3.098391937799211e-01, -4.611465676013206e-01, -4.636947986280349e-01, -5.510740140750493e-02, -5.599066319652281e-02, -7.209069820871596e-02, -7.570186887177348e-02, -3.527366585398621e-01, -3.562018529246842e-01, -1.047013531138833e-01, -9.542949293871418e-02, -1.047013531138832e-01, -9.542949293871408e-02, -1.230968329054620e-02, -1.421763528421787e-02, -1.315897033216113e-03, -1.331405602123838e-03, -2.371061442423376e-03, -3.226204057889889e-03, -9.624272925747258e-02, -9.671230661051626e-02, -1.076864608853868e-03, -6.747253357372328e-03, -1.076864608853874e-03, -6.747253357372319e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2b_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.767822003901139e-09, 0.000000000000000e+00, -4.767843371455012e-09, -4.767722743572885e-09, 0.000000000000000e+00, -4.767771880187627e-09, -4.767445589194600e-09, 0.000000000000000e+00, -4.767360533444972e-09, -4.768557832932643e-09, 0.000000000000000e+00, -4.768787413705007e-09, -4.767752922621485e-09, 0.000000000000000e+00, -4.768251767064674e-09, -4.767752922621485e-09, 0.000000000000000e+00, -4.768251767064674e-09, -7.140020606326080e-06, 0.000000000000000e+00, -7.137828641025927e-06, -7.139708950569527e-06, 0.000000000000000e+00, -7.137407195848422e-06, -7.130919571710944e-06, 0.000000000000000e+00, -7.127862023763718e-06, -7.141550886896353e-06, 0.000000000000000e+00, -7.138331998787204e-06, -7.145808981928437e-06, 0.000000000000000e+00, -7.129807575411236e-06, -7.145808981928437e-06, 0.000000000000000e+00, -7.129807575411236e-06, -5.098693124678630e-03, 0.000000000000000e+00, -4.943708470192446e-03, -5.144503689699887e-03, 0.000000000000000e+00, -4.954711258389583e-03, -5.651138837126585e-03, 0.000000000000000e+00, -5.893852339887666e-03, -5.624719089698452e-03, 0.000000000000000e+00, -5.548204013051583e-03, -4.427092264390104e-03, 0.000000000000000e+00, -6.645063543773480e-03, -4.427092264390104e-03, 0.000000000000000e+00, -6.645063543773480e-03, -6.668510860363888e-01, 0.000000000000000e+00, -7.166639912308377e-01, -6.417340585435762e-01, 0.000000000000000e+00, -6.879941848188823e-01, -2.997310502101919e-03, 0.000000000000000e+00, -2.488665800679919e-03, -1.301582494788353e+00, 0.000000000000000e+00, -1.350792227897009e+00, -1.192190809414197e+00, 0.000000000000000e+00, 7.898315844967489e+00, -1.192190809414196e+00, 0.000000000000000e+00, 7.898315844967493e+00, 9.118234747779486e-01, 0.000000000000000e+00, -4.785605321828636e+00, 1.412431798167638e+00, 0.000000000000000e+00, -5.470421301414754e+00, -1.728570457894440e+00, 0.000000000000000e+00, -3.944739363216658e+00, -2.408158173210419e+00, 0.000000000000000e+00, -5.172602969662495e-01, -1.261422573852443e+01, 0.000000000000000e+00, 1.126959844675884e+02, -1.261422573852721e+01, 0.000000000000000e+00, 1.126959844676781e+02, -1.279823627270421e-06, 0.000000000000000e+00, -1.281129541486166e-06, -1.277848222675283e-06, 0.000000000000000e+00, -1.279232689285583e-06, -1.279708230864863e-06, 0.000000000000000e+00, -1.281067987449572e-06, -1.278023662735799e-06, 0.000000000000000e+00, -1.279333142162602e-06, -1.278806056732705e-06, 0.000000000000000e+00, -1.280176482864542e-06, -1.278806056732705e-06, 0.000000000000000e+00, -1.280176482864542e-06, -8.185470515853513e-05, 0.000000000000000e+00, -8.187054180486582e-05, -7.928704836207789e-05, 0.000000000000000e+00, -7.937360350191542e-05, -8.453296919827918e-05, 0.000000000000000e+00, -8.373544206077710e-05, -8.224212610815330e-05, 0.000000000000000e+00, -8.143905004822204e-05, -7.841379914058659e-05, 0.000000000000000e+00, -8.033741155881556e-05, -7.841379914058659e-05, 0.000000000000000e+00, -8.033741155881556e-05, -7.942049119837782e-03, 0.000000000000000e+00, -8.016685907397297e-03, -1.059628495174154e-02, 0.000000000000000e+00, -1.088264842094077e-02, -1.179562564949023e-02, 0.000000000000000e+00, -1.004559050051080e-02, -1.463793521569038e-02, 0.000000000000000e+00, -1.231923024318872e-02, -6.775116911138808e-03, 0.000000000000000e+00, -8.357758857111654e-03, -6.775116911138823e-03, 0.000000000000000e+00, -8.357758857111656e-03, -1.947945469057035e+00, 0.000000000000000e+00, -2.156682839085237e+00, -5.866498177130930e-01, 0.000000000000000e+00, -5.923899974132869e-01, -1.826171832537034e+00, 0.000000000000000e+00, -2.671520882883070e+00, -9.656280120324065e-05, 0.000000000000000e+00, -9.685919793462971e-05, -1.282132494542308e+00, 0.000000000000000e+00, -2.693567412827193e+00, -1.282132494542308e+00, 0.000000000000000e+00, -2.693567412827193e+00, -4.038882861593001e-01, 0.000000000000000e+00, -2.695463545115778e+00, -1.504360002945760e+00, 0.000000000000000e+00, -1.911575546952540e+00, 1.703199208286510e+01, 0.000000000000000e+00, -3.249125600428585e+01, -3.508188366752461e+00, 0.000000000000000e+00, -3.443077262207861e+00, 7.773298658486237e+01, 0.000000000000000e+00, -3.429787878959934e+01, 7.773298658478801e+01, 0.000000000000000e+00, -3.429787878960725e+01, -4.436048275877774e-02, 0.000000000000000e+00, -4.460527497400853e-02, -1.627603418627974e-02, 0.000000000000000e+00, -1.630849328217752e-02, -2.133597617836498e-02, 0.000000000000000e+00, -2.147450849577678e-02, -2.850569259581065e-02, 0.000000000000000e+00, -2.860303461166009e-02, -2.447263469976923e-02, 0.000000000000000e+00, -2.459936608770698e-02, -2.447263469976923e-02, 0.000000000000000e+00, -2.459936608770698e-02, -8.083312182983615e-02, 0.000000000000000e+00, -7.992058198516970e-02, -1.659515505571651e-02, 0.000000000000000e+00, -1.629600828035840e-02, -1.348835746837592e-02, 0.000000000000000e+00, -1.319508056345677e-02, -1.169507382162367e-02, 0.000000000000000e+00, -1.152673429618091e-02, -1.229384130664118e-02, 0.000000000000000e+00, -1.209633572548809e-02, -1.229384130664118e-02, 0.000000000000000e+00, -1.209633572548809e-02, -7.851215119873543e-03, 0.000000000000000e+00, -8.090432183650669e-03, -2.980418065724220e-01, 0.000000000000000e+00, -2.993441257794200e-01, -1.691472283168605e-01, 0.000000000000000e+00, -1.679493476045898e-01, -6.285592037737806e-02, 0.000000000000000e+00, -6.170774824599995e-02, -1.049220633959757e-01, 0.000000000000000e+00, -1.048147855300920e-01, -1.049220633959759e-01, 0.000000000000000e+00, -1.048147855300919e-01, -2.295095080248411e-02, 0.000000000000000e+00, -2.227608278536415e-02, -2.528280382504966e+00, 0.000000000000000e+00, -2.787979207034691e+00, -2.199742845315761e+00, 0.000000000000000e+00, -3.415200425347929e+00, -7.329955943313655e-02, 0.000000000000000e+00, -6.885040370365758e-02, -2.056018209637941e+00, 0.000000000000000e+00, -4.927972766414101e+00, -2.056018209637950e+00, 0.000000000000000e+00, -4.927972766414111e+00, -6.602111334957341e-01, 0.000000000000000e+00, -3.529598918757686e+00, 1.411992389078247e+01, 0.000000000000000e+00, -3.075324145277317e+01, 7.176173875626904e+00, 0.000000000000000e+00, -1.144825242317392e+01, -3.483392955132659e+00, 0.000000000000000e+00, -3.888964049677842e+00, 8.101906984471479e+01, 0.000000000000000e+00, -2.784087455321520e+01, 8.101906984477374e+01, 0.000000000000000e+00, -2.784087455321026e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
