
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.576264387024275e+01, -1.576266025472045e+01, -1.576279281159595e+01, -1.576252333160759e+01, -1.576265201380904e+01, -1.576265201380904e+01, -2.665581354508474e+00, -2.665560104717909e+00, -2.665084091960411e+00, -2.666458179870871e+00, -2.665581541579987e+00, -2.665581541579987e+00, -5.678214334972492e-01, -5.676628835091140e-01, -5.643923102441676e-01, -5.679446669763482e-01, -5.677617336784363e-01, -5.677617336784363e-01, -1.863383235164740e-01, -1.876828849470987e-01, -6.599088380222656e-01, -1.526944931170977e-01, -1.867257653801616e-01, -1.867257653801616e-01, -1.699967676698443e-02, -1.779953241724044e-02, -6.545652859137879e-02, -8.175440033200285e-03, -1.761565576917126e-02, -1.761565576917126e-02, -3.840790197134211e+00, -3.840466143242295e+00, -3.840761383940351e+00, -3.840509313994279e+00, -3.840617284421113e+00, -3.840617284421113e+00, -1.628912606200227e+00, -1.636755092771538e+00, -1.629110732704403e+00, -1.635233385524947e+00, -1.633916564947138e+00, -1.633916564947138e+00, -4.848213105456586e-01, -5.169554322437120e-01, -4.631811788197774e-01, -4.757776775145390e-01, -5.001185841692788e-01, -5.001185841692788e-01, -1.234439663697467e-01, -1.978465290544248e-01, -1.215721041162102e-01, -1.442480137358149e+00, -1.359360033296116e-01, -1.359360033296116e-01, -7.887049280642102e-03, -9.012131939073072e-03, -6.756663091787177e-03, -8.495197994678139e-02, -8.212433314237651e-03, -8.212433314237651e-03, -4.949931215971359e-01, -4.915486401258219e-01, -4.926584736493047e-01, -4.936073412682727e-01, -4.931220400451013e-01, -4.931220400451013e-01, -4.811393627733753e-01, -4.335710172253556e-01, -4.445335926332114e-01, -4.559405719641101e-01, -4.498277430284942e-01, -4.498277430284942e-01, -5.393071190982510e-01, -2.338206907101169e-01, -2.637583896489258e-01, -3.162259381794053e-01, -2.882900059401082e-01, -2.882900059401082e-01, -3.961354412628753e-01, -6.170987458425090e-02, -7.856786115381999e-02, -2.976538715963579e-01, -1.038431300276843e-01, -1.038431300276843e-01, -1.989254987074201e-02, -2.468835940009989e-03, -4.689352358563810e-03, -9.955314322339423e-02, -6.980564037187249e-03, -6.980564037187470e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.875342532467219e+01, -1.875349793408873e+01, -1.875381546991777e+01, -1.875262662380724e+01, -1.875346366980243e+01, -1.875346366980243e+01, -3.101875383089991e+00, -3.101910867788812e+00, -3.103011583487082e+00, -3.101750630999684e+00, -3.101906346108246e+00, -3.101906346108246e+00, -6.561844512646819e-01, -6.554713252719631e-01, -6.384429264637230e-01, -6.429703909609310e-01, -6.559239999572324e-01, -6.559239999572324e-01, -2.059431759399932e-01, -2.102815779524952e-01, -7.784943563150309e-01, -1.605774169426530e-01, -2.072579892681471e-01, -2.072579892681471e-01, -2.262276810606430e-02, -2.368089689802156e-02, -7.788770082314871e-02, -1.089750620744054e-02, -2.343777390084254e-02, -2.343777390084254e-02, -4.754990491127468e+00, -4.757688763090345e+00, -4.755264662252532e+00, -4.757362740275422e+00, -4.756376392734964e+00, -4.756376392734964e+00, -1.763996571679807e+00, -1.774978856902108e+00, -1.760316408606014e+00, -1.768945869697396e+00, -1.776044188944328e+00, -1.776044188944328e+00, -6.003452515376059e-01, -6.725223807420154e-01, -5.714223045923242e-01, -6.150038341014189e-01, -6.249730954826194e-01, -6.249730954826194e-01, -1.376693348701536e-01, -2.018201755773688e-01, -1.351538749059516e-01, -1.881432519821388e+00, -1.469473204563175e-01, -1.469473204563175e-01, -1.051333708947376e-02, -1.201188271994921e-02, -9.007263442457641e-03, -9.864396188638382e-02, -1.094679246528457e-02, -1.094679246528456e-02, -6.439423615278415e-01, -6.396553083918107e-01, -6.415633286105793e-01, -6.427725667769246e-01, -6.421991731047533e-01, -6.421991731047533e-01, -6.250923370903226e-01, -5.164765881962381e-01, -5.466716890097589e-01, -5.797740414512971e-01, -5.627684104158285e-01, -5.627684104158284e-01, -7.012709351270742e-01, -2.436619414819921e-01, -2.971607877915080e-01, -3.788370294829984e-01, -3.395582350611989e-01, -3.395582350611988e-01, -4.717295993383216e-01, -7.471640194310442e-02, -9.215351580547378e-02, -3.647079298616328e-01, -1.172815190055017e-01, -1.172815190055017e-01, -2.644384077923415e-02, -3.291711028739355e-03, -6.251963215093474e-03, -1.124211452180430e-01, -9.305609815899236e-03, -9.305609815566940e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.675077316433785e-09, -5.675025922997603e-09, -5.674751702868862e-09, -5.675594099934756e-09, -5.675050589070671e-09, -5.675050589070671e-09, -6.939219821100095e-06, -6.939246274926217e-06, -6.938820909261496e-06, -6.933818938544692e-06, -6.939119347963982e-06, -6.939119347963982e-06, -2.986457544839492e-03, -2.986004825927010e-03, -2.916027256687951e-03, -2.852547141570860e-03, -2.986373240077913e-03, -2.986373240077913e-03, -2.738868059397540e-01, -2.525726471737130e-01, -1.667494732115527e-03, -5.672058658170833e-01, -2.674090116033803e-01, -2.674090116033803e-01, 2.948719632297825e-02, 3.177314056001308e-02, -2.745492608760738e+00, 5.521155581012880e-03, 3.311676184149787e-02, 3.311676184149787e-02, -1.385620899241984e-06, -1.382199999840731e-06, -1.385275597013191e-06, -1.382615979608332e-06, -1.383867868430288e-06, -1.383867868430288e-06, -4.571117055094318e-05, -4.507126323748468e-05, -4.538717675585684e-05, -4.488116359807595e-05, -4.573287638813809e-05, -4.573287638813809e-05, -4.424983483857540e-03, 5.841876363986385e-04, -5.458727964015067e-03, -7.716330097014210e-04, -3.550577251532049e-03, -3.550577251532049e-03, -7.186445456952145e-01, -2.357458649741475e-01, -8.109350613332770e-01, -2.392929677428229e-05, -7.122833609645953e-01, -7.122833609645953e-01, 5.689933158712631e-03, 7.087435648747788e-03, 2.145382733561061e-02, -1.740352701786651e+00, 1.094795505527167e-02, 1.094795505555073e-02, 3.724861158355847e-03, 1.285184059759742e-03, 2.082159499599050e-03, 2.755847983733708e-03, 2.412479295662651e-03, 2.412479295662835e-03, 4.816895727326078e-03, -8.300270726672450e-03, -6.568154291442198e-03, -3.519217376667138e-03, -5.235532658003573e-03, -5.235532658003644e-03, 2.015421437863507e-04, -1.212500412430304e-01, -5.938589932436955e-02, -2.659265332300151e-02, -3.619608699429695e-02, -3.619608699429726e-02, -1.167239195466443e-02, -2.402965555947604e+00, -1.810690673173726e+00, -3.151939804845466e-02, -1.287906268003531e+00, -1.287906268003538e+00, 2.438024817906253e-02, 1.779839569319765e-03, 4.326607523398382e-03, -1.574163158592672e+00, 1.480927522127662e-02, 1.480927522044869e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
