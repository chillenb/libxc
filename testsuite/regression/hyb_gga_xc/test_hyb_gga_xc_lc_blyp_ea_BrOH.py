
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blyp_ea_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093932567040994e+01, -2.093934943476186e+01, -2.093953266196530e+01, -2.093914197164760e+01, -2.093933755753154e+01, -2.093933755753154e+01, -3.363718729182429e+00, -3.363692789401312e+00, -3.363124102133917e+00, -3.364845374310462e+00, -3.363720278227138e+00, -3.363720278227138e+00, -5.539973092438060e-01, -5.536582744049436e-01, -5.453998096731866e-01, -5.503063757386569e-01, -5.538719181039365e-01, -5.538719181039365e-01, -7.196455637320098e-02, -7.447098574210419e-02, -6.788532342257004e-01, -2.526775629168123e-02, -7.272716826480839e-02, -7.272716826480839e-02, -1.757800754173993e-03, -1.839985908879599e-03, 1.447988902198229e-03, -8.521823107208085e-04, -1.821085706944622e-03, -1.821085706944622e-03, -4.940291962282114e+00, -4.939716563133639e+00, -4.940239441732378e+00, -4.939791934484507e+00, -4.939987915332132e+00, -4.939987915332132e+00, -1.963601288132333e+00, -1.974227834222452e+00, -1.963672155475122e+00, -1.971951983711693e+00, -1.970706891750315e+00, -1.970706891750315e+00, -4.491645714729681e-01, -4.833191162408052e-01, -4.209281033676230e-01, -4.332259719706891e-01, -4.689692776333386e-01, -4.689692776333386e-01, 1.433419992187370e-03, -6.494790258938400e-02, -1.903027858327338e-04, -1.704892701677230e+00, -1.106362703628267e-02, -1.106362703628267e-02, -8.224550216291637e-04, -9.383357248439286e-04, -7.057566291491262e-04, 5.027441725872699e-03, -8.559941402669512e-04, -8.559941402669512e-04, -4.493642914133690e-01, -4.498420566122019e-01, -4.497098531033389e-01, -4.495771075686742e-01, -4.496462933512861e-01, -4.496462933512861e-01, -4.309091446828561e-01, -3.804750037488198e-01, -3.966186990319763e-01, -4.104779576700234e-01, -4.034683276658155e-01, -4.034683276658155e-01, -5.128218405852468e-01, -1.117305534352291e-01, -1.563409017451852e-01, -2.301270952780200e-01, -1.918305245745356e-01, -1.918305245745355e-01, -3.316932859052090e-01, 1.059323776427397e-03, 5.763969731969331e-03, -2.097122722965944e-01, 2.269350413079815e-03, 2.269350413079806e-03, -2.055382443074387e-03, -2.598035544367059e-04, -4.914738523247932e-04, 9.835659910579367e-04, -7.288955325996506e-04, -7.288955325996495e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blyp_ea_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.513600378395472e+01, -2.513608577069975e+01, -2.513646653778321e+01, -2.513512368793549e+01, -2.513604689553204e+01, -2.513604689553204e+01, -3.989093008540094e+00, -3.989121973975097e+00, -3.990085703437714e+00, -3.989286243944480e+00, -3.989125201410103e+00, -3.989125201410103e+00, -7.000548379877279e-01, -6.993153834266792e-01, -6.817125611874998e-01, -6.873521059278989e-01, -6.997844762137256e-01, -6.997844762137256e-01, -1.448159302909375e-01, -1.464715304902010e-01, -8.543709018074891e-01, -1.017643135323012e-01, -1.452904578635572e-01, -1.452904578635572e-01, -2.335294727733979e-03, -2.444661073101814e-03, -1.227821137451750e-02, -1.132690143127071e-03, -2.419511716212199e-03, -2.419511716212199e-03, -6.120166354439906e+00, -6.122481964028088e+00, -6.120403806047237e+00, -6.122204294770969e+00, -6.121352449698027e+00, -6.121352449698027e+00, -2.161480394177962e+00, -2.177984091592269e+00, -2.153901916152595e+00, -2.166728982561314e+00, -2.182642640289582e+00, -2.182642640289582e+00, -5.989681406828206e-01, -6.656037981010936e-01, -5.635876831489934e-01, -5.954570285094091e-01, -6.260044587568082e-01, -6.260044587568082e-01, -7.074061873522962e-02, -1.637094180256265e-01, -6.720444951091145e-02, -2.233465207114750e+00, -8.205502783100738e-02, -8.205502783100738e-02, -1.093250472228416e-03, -1.246984429849551e-03, -9.384031537714026e-04, -2.803985955418105e-02, -1.137747222993754e-03, -1.137747222993754e-03, -6.303926677398806e-01, -6.236159213308514e-01, -6.259385761473141e-01, -6.278085588187601e-01, -6.268640756675717e-01, -6.268640756675717e-01, -6.071882534321970e-01, -5.078763225167051e-01, -5.333003791044373e-01, -5.591984471644065e-01, -5.457105065840236e-01, -5.457105065840236e-01, -7.025122954277327e-01, -2.133720576474968e-01, -2.543009881597816e-01, -3.301047072711815e-01, -2.882639668247310e-01, -2.882639668247309e-01, -4.503659060251972e-01, -1.003023018512747e-02, -2.257078818831098e-02, -3.040190657957138e-01, -4.624864598667349e-02, -4.624864598667344e-02, -2.731074768241891e-03, -3.459844646762897e-04, -6.539176013194673e-04, -4.093437471608971e-02, -9.691096223639519e-04, -9.691096223639505e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blyp_ea_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.149386691695792e-09, -7.149356900949200e-09, -7.149116195915036e-09, -7.149606198368205e-09, -7.149371882193299e-09, -7.149371882193299e-09, -8.639547685718353e-06, -8.639840411789198e-06, -8.646506902323842e-06, -8.627911304534858e-06, -8.639555102215848e-06, -8.639555102215848e-06, -2.923312823985436e-03, -2.917650516056212e-03, -2.731903955249491e-03, -2.690966421916021e-03, -2.921321905339088e-03, -2.921321905339088e-03, 1.985036121349440e-01, 1.827094484209572e-01, -1.858997391119288e-03, 8.615655850245961e-01, 1.936244836413826e-01, 1.936244836413826e-01, 3.178329514286674e-03, 6.443631437428994e-03, 1.008832662870845e+01, -3.458153809612717e-05, 5.515491785757628e-03, 5.515491785757628e-03, -2.052562805175711e-06, -2.054057913346246e-06, -2.052703982796807e-06, -2.053866634339220e-06, -2.053344904575284e-06, -2.053344904575284e-06, -5.900835976935029e-05, -5.797523354473122e-05, -5.890966996725955e-05, -5.810514211333265e-05, -5.843441701824902e-05, -5.843441701824902e-05, -5.946630112825639e-03, -6.120414708335709e-03, -6.807913766142270e-03, -7.680140265646111e-03, -5.520167843615806e-03, -5.520167843615806e-03, 2.424503284071951e+00, 2.181231883512394e-01, 2.514999703717921e+00, -1.123990275208077e-04, 1.533479143236054e+00, 1.533479143236054e+00, -3.263911197087529e-05, -4.701807385346743e-05, -4.387934317131512e-05, 7.271172372732379e+00, -4.759536072426731e-05, -4.759536072399570e-05, -8.096101030783797e-03, -7.469654674693463e-03, -7.662927684267989e-03, -7.832967923555131e-03, -7.745351337505991e-03, -7.745351337505991e-03, -9.174385788700794e-03, -7.271994468936695e-03, -7.653588583785910e-03, -8.039024118340869e-03, -7.848747236995718e-03, -7.848747236995720e-03, -5.180103894727148e-03, 6.023819535005928e-02, 1.067952824735691e-02, -1.295334230423936e-02, -6.054621624862699e-03, -6.054621624862686e-03, -9.077172287553902e-03, 1.017211788804610e+01, 8.459112187930518e+00, -1.771877947602728e-02, 4.238807787044678e+00, 4.238807787044678e+00, 2.858351733233391e-02, -1.901823873865653e-06, -1.024621030143566e-05, 4.732258347491429e+00, -3.955892876008802e-05, -3.955892876041495e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
