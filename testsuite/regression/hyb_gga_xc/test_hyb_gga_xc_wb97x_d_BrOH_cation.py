
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.629022302542809e+01, -1.629024530994813e+01, -1.629039554992500e+01, -1.629006295175024e+01, -1.629022995069505e+01, -1.629022995069505e+01, -2.676375671612077e+00, -2.676348958564585e+00, -2.675798169238728e+00, -2.677271711211058e+00, -2.676409291550721e+00, -2.676409291550721e+00, -4.921484510809042e-01, -4.920054071945064e-01, -4.890497862909977e-01, -4.930490447730127e-01, -4.917962802197401e-01, -4.917962802197401e-01, -9.578937816171397e-02, -9.735665868369249e-02, -5.786608624498580e-01, -7.380174815315664e-02, -8.475433867939924e-02, -8.475433867939930e-02, 4.679791200196136e-03, 4.880383912862166e-03, 7.300051295920568e-03, 2.859008949302881e-03, 1.353107258575540e-03, 1.353107258575551e-03, -3.908877847156881e+00, -3.908608252274204e+00, -3.908872797041427e+00, -3.908634636203708e+00, -3.908736788942268e+00, -3.908736788942268e+00, -1.595533028154497e+00, -1.603912109346833e+00, -1.594978294357619e+00, -1.602393708848914e+00, -1.600421898742502e+00, -1.600421898742502e+00, -4.065834504711885e-01, -4.410323129848804e-01, -3.746065240122008e-01, -3.854317572168698e-01, -4.127072371170366e-01, -4.127072371170365e-01, -5.318593431502456e-02, -1.085855060927707e-01, -4.566211744530618e-02, -1.402678027255478e+00, -5.769944251705141e-02, -5.769944251705141e-02, 2.227806606639459e-03, 2.798754748427104e-03, 2.147050942985254e-03, -1.237164748518915e-02, 1.939353333697457e-03, 1.939353333697428e-03, -3.972569343390130e-01, -4.021907544677648e-01, -4.022144729492072e-01, -4.009327924320971e-01, -4.017595862771545e-01, -4.017595862771545e-01, -3.825573462689719e-01, -3.451953358247453e-01, -3.543077839382656e-01, -3.653603603687621e-01, -3.589673695308798e-01, -3.589673695308798e-01, -4.644510712959178e-01, -1.400001727800923e-01, -1.711770674431326e-01, -2.298507152581580e-01, -1.991933542263423e-01, -1.991933542263422e-01, -3.139115924019595e-01, 8.322336323334380e-03, -9.008858845180323e-04, -2.146853263913967e-01, -2.811900063753137e-02, -2.811900063753122e-02, 6.324630878552427e-03, 7.783799858624231e-04, 1.592463701665001e-03, -2.383299106083543e-02, 1.905751722937120e-03, 1.905751722937121e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.964092105772983e+01, -1.964089871277963e+01, -1.964101372272878e+01, -1.964096607745521e+01, -1.964128373949842e+01, -1.964135978956312e+01, -1.964023711586304e+01, -1.964002652258482e+01, -1.964097852706053e+01, -1.964053888758460e+01, -1.964097852706053e+01, -1.964053888758460e+01, -3.155814448223038e+00, -3.156016738954000e+00, -3.155850121417521e+00, -3.156062288254283e+00, -3.156828560592420e+00, -3.157122789799919e+00, -3.155655856457796e+00, -3.155960810703813e+00, -3.155240177143535e+00, -3.156840949099659e+00, -3.155240177143535e+00, -3.156840949099659e+00, -5.746798563709641e-01, -5.764102629147282e-01, -5.739433097212006e-01, -5.759648930266549e-01, -5.637641028655522e-01, -5.633232325992827e-01, -5.680598925291890e-01, -5.681917520937202e-01, -5.753412396475978e-01, -5.647033492239009e-01, -5.753412396475978e-01, -5.647033492239009e-01, -1.149688047879942e-01, -1.152350854884590e-01, -1.222347731111465e-01, -1.218792915091833e-01, -6.676578662408180e-01, -6.880589086606061e-01, -2.395600023310158e-02, -2.194081614574009e-02, -6.322922541989735e-02, -1.401337574206610e-01, -6.322922541989744e-02, -1.401337574206632e-01, 7.147146086881650e-03, 5.059927053078168e-03, 7.607400605830108e-03, 5.138463322903045e-03, 2.831481989152784e-03, -3.956098133066132e-03, 3.570366726411682e-03, 3.929028503823536e-03, -3.069562298802811e-04, 1.312227387452460e-02, -3.069562298801503e-04, 1.312227387452396e-02, -4.889737130074579e+00, -4.888557351738722e+00, -4.892492547924835e+00, -4.891217389255803e+00, -4.889887558367175e+00, -4.888645791862266e+00, -4.892250269780024e+00, -4.891064153484826e+00, -4.891152105689887e+00, -4.889893623438837e+00, -4.891152105689887e+00, -4.889893623438837e+00, -1.734553586423100e+00, -1.734483327069099e+00, -1.747562483970608e+00, -1.747179696613927e+00, -1.723139929784400e+00, -1.725726215858139e+00, -1.734676150682327e+00, -1.737323899527444e+00, -1.749368002393414e+00, -1.743149983927680e+00, -1.749368002393414e+00, -1.743149983927680e+00, -5.165676122112495e-01, -5.157533847148388e-01, -5.994292674033945e-01, -5.985326969763330e-01, -4.604144330758277e-01, -4.771675409109894e-01, -5.281653501272060e-01, -5.415148743973482e-01, -5.428637803304299e-01, -5.195940448604537e-01, -5.428637803304284e-01, -5.195940448604527e-01, -1.947751536446708e-02, -1.554462387154327e-02, -5.265096123347834e-02, -5.266027695124605e-02, -2.802287377605217e-02, -1.687341875670230e-02, -1.838052150035929e+00, -1.837244277533806e+00, -2.166905246885646e-02, -1.359435665549081e-03, -2.166905246885646e-02, -1.359435665549081e-03, 3.277626014784687e-03, 2.624462334804089e-03, 3.828093330571709e-03, 3.513194067164488e-03, 3.329873665434753e-03, 2.389329814693223e-03, -2.312089031270508e-02, -2.442715733833635e-02, 6.858230476408024e-03, 8.902379843003429e-04, 6.858230476408288e-03, 8.902379843006514e-04, -5.207378984153155e-01, -5.228049532337268e-01, -5.461720538900027e-01, -5.470301143967206e-01, -5.352366600129025e-01, -5.358183393282033e-01, -5.244672100373711e-01, -5.254378223411695e-01, -5.297213296446869e-01, -5.304432065308726e-01, -5.297213296446869e-01, -5.304432065308726e-01, -5.270531816614915e-01, -5.287104294739041e-01, -4.120433105721790e-01, -4.131523212438536e-01, -4.393103505159351e-01, -4.414895737066025e-01, -4.911613049274093e-01, -4.929925535797064e-01, -4.619189878336578e-01, -4.636556991848868e-01, -4.619189878336578e-01, -4.636556991848868e-01, -6.329034016985104e-01, -6.325058709066206e-01, -1.313838948841097e-01, -1.321018939736005e-01, -2.086358152622805e-01, -2.090776307360002e-01, -2.813642480772165e-01, -2.819150410314631e-01, -2.500256039495282e-01, -2.497575379275229e-01, -2.500256039495306e-01, -2.497575379275283e-01, -3.762560576546948e-01, -3.777235215529318e-01, 1.578195688289033e-03, 7.145102328247961e-04, -1.256227540266459e-02, -1.582559387180632e-02, -2.670096877965848e-01, -2.697918542100843e-01, -3.143619100047097e-02, -1.392855680325217e-02, -3.143619100047219e-02, -1.392855680325161e-02, 8.794894651041585e-03, 7.153872734625273e-03, 1.041492830978302e-03, 1.027228100129398e-03, 2.524262624774034e-03, 1.756113847758486e-03, -2.446069820845366e-02, -2.340573555358495e-02, 6.030943784090918e-03, 1.006556638244059e-03, 6.030943784090713e-03, 1.006556638244201e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.053377080177221e-08, 0.000000000000000e+00, -1.053382682042866e-08, -1.053366598209040e-08, 0.000000000000000e+00, -1.053375172114540e-08, -1.053326695049882e-08, 0.000000000000000e+00, -1.053319261004695e-08, -1.053443838170707e-08, 0.000000000000000e+00, -1.053470105418831e-08, -1.053369731366699e-08, 0.000000000000000e+00, -1.053406047120695e-08, -1.053369731366699e-08, 0.000000000000000e+00, -1.053406047120695e-08, -1.361678048425578e-05, 0.000000000000000e+00, -1.361833063894813e-05, -1.361687782571139e-05, 0.000000000000000e+00, -1.361858017643793e-05, -1.362049646233010e-05, 0.000000000000000e+00, -1.362015296628886e-05, -1.360538079873965e-05, 0.000000000000000e+00, -1.360560146844998e-05, -1.362542697931399e-05, 0.000000000000000e+00, -1.360750556757902e-05, -1.362542697931399e-05, 0.000000000000000e+00, -1.360750556757902e-05, -7.104945371837728e-03, 0.000000000000000e+00, -7.150827870392582e-03, -7.079793152778521e-03, 0.000000000000000e+00, -7.141039056077430e-03, -6.613953435621878e-03, 0.000000000000000e+00, -6.448424561442950e-03, -6.365984176782738e-03, 0.000000000000000e+00, -6.420983649809547e-03, -6.955187510301484e-03, 0.000000000000000e+00, -5.718516446361863e-03, -6.955187510301484e-03, 0.000000000000000e+00, -5.718516446361863e-03, -4.741681542237573e-01, 0.000000000000000e+00, -4.715998165159067e-01, -3.821454221990928e-01, 0.000000000000000e+00, -3.998730424622289e-01, -4.283329601261042e-03, 0.000000000000000e+00, -4.042596118814092e-03, -2.760239957285727e+00, 0.000000000000000e+00, -2.738784534714866e+00, -1.059261681527993e+00, 0.000000000000000e+00, 4.893478227572253e+00, -1.059261681528012e+00, 0.000000000000000e+00, 4.893478227572418e+00, 2.474899700155837e+01, 0.000000000000000e+00, 1.491337934695286e+01, 2.679415098104615e+01, 0.000000000000000e+00, 1.506567507886928e+01, 4.687806698106204e+00, 0.000000000000000e+00, 6.514351866171594e-01, 1.741844633891818e+01, 0.000000000000000e+00, 2.001646938624514e+01, 2.072050839335732e+00, 0.000000000000000e+00, 2.487187970835863e+02, 2.072050839547648e+00, 0.000000000000000e+00, 2.487187970865047e+02, -2.671981612195068e-06, 0.000000000000000e+00, -2.674684945460838e-06, -2.665551280987700e-06, 0.000000000000000e+00, -2.668496769092665e-06, -2.671626597563159e-06, 0.000000000000000e+00, -2.674488777160113e-06, -2.666131412028502e-06, 0.000000000000000e+00, -2.668845128977794e-06, -2.668680755906905e-06, 0.000000000000000e+00, -2.671586736184074e-06, -2.668680755906905e-06, 0.000000000000000e+00, -2.671586736184074e-06, -9.530323611873805e-05, 0.000000000000000e+00, -9.531738513757703e-05, -9.363957696476518e-05, 0.000000000000000e+00, -9.370586142424437e-05, -9.497684538658878e-05, 0.000000000000000e+00, -9.509933234997590e-05, -9.347420560189886e-05, 0.000000000000000e+00, -9.357591314415560e-05, -9.471595116377656e-05, 0.000000000000000e+00, -9.451433119575002e-05, -9.471595116377656e-05, 0.000000000000000e+00, -9.451433119575002e-05, -1.184190301192924e-02, 0.000000000000000e+00, -1.191097031371905e-02, -1.611374904237950e-03, 0.000000000000000e+00, -2.370494014004099e-03, -1.860056093133162e-02, 0.000000000000000e+00, -1.550793204879072e-02, 6.411432332471103e-03, 0.000000000000000e+00, 5.233433657727007e-03, -8.940582426147831e-03, 0.000000000000000e+00, -1.134906469591375e-02, -8.940582426147094e-03, 0.000000000000000e+00, -1.134906469591375e-02, -5.738036428524862e+00, 0.000000000000000e+00, -5.982945604915665e+00, -1.082871237926685e+00, 0.000000000000000e+00, -1.071075956521288e+00, -5.493950869966633e+00, 0.000000000000000e+00, -6.636245919899182e+00, -1.196179168602026e-04, 0.000000000000000e+00, -1.201283994058196e-04, -4.539358753939900e+00, 0.000000000000000e+00, -5.151146742570006e+00, -4.539358753939900e+00, 0.000000000000000e+00, -5.151146742570006e+00, 2.950308805381180e+01, 0.000000000000000e+00, 2.158993316831874e+01, 2.342468528515818e+01, 0.000000000000000e+00, 2.074715180522124e+01, 1.765298669945459e+02, 0.000000000000000e+00, 1.099089939695017e+02, -4.193817862053988e+00, 0.000000000000000e+00, -4.263950202899538e+00, 2.041918341673201e+02, 0.000000000000000e+00, 1.450678559801418e+01, 2.041918341659376e+02, 0.000000000000000e+00, 1.450678559726941e+01, -6.519198055973521e-02, 0.000000000000000e+00, -6.388398693538100e-02, -3.435917299947975e-03, 0.000000000000000e+00, -4.270227579478167e-03, -1.912400600030032e-02, 0.000000000000000e+00, -2.049576585351097e-02, -4.143782978606324e-02, 0.000000000000000e+00, -4.238100718590841e-02, -2.930719976129049e-02, 0.000000000000000e+00, -3.057649169407563e-02, -2.930719976129049e-02, 0.000000000000000e+00, -3.057649169407563e-02, 2.065769645030224e-02, 0.000000000000000e+00, 2.243001120285510e-02, -2.308046907338763e-02, 0.000000000000000e+00, -2.289506196358489e-02, -2.130012918147754e-02, 0.000000000000000e+00, -2.080022679998466e-02, -7.364436618602213e-03, 0.000000000000000e+00, -6.983534979335909e-03, -1.662422496411529e-02, 0.000000000000000e+00, -1.623115088562314e-02, -1.662422496411529e-02, 0.000000000000000e+00, -1.623115088562314e-02, 7.883666824359590e-06, 0.000000000000000e+00, -5.651120416022480e-04, -3.341461539372732e-01, 0.000000000000000e+00, -3.286131154910668e-01, -1.068574396044251e-01, 0.000000000000000e+00, -1.065824788002109e-01, -7.281073149363308e-02, 0.000000000000000e+00, -7.248515253929888e-02, -7.265836838464214e-02, 0.000000000000000e+00, -7.310701469323745e-02, -7.265836838463743e-02, 0.000000000000000e+00, -7.310701469324143e-02, -3.083435528091765e-02, 0.000000000000000e+00, -3.053485048164262e-02, 2.974599821502756e+00, 0.000000000000000e+00, 2.506775999640625e+00, 2.115221304225839e-01, 0.000000000000000e+00, -1.958296406880930e+00, -1.022415147075989e-01, 0.000000000000000e+00, -9.789879841914924e-02, -4.958613278410787e+00, 0.000000000000000e+00, -8.809227458718656e+00, -4.958613278410819e+00, 0.000000000000000e+00, -8.809227458718583e+00, 1.700475822304874e+01, 0.000000000000000e+00, 1.253333688150360e+01, 1.166242087488232e+02, 0.000000000000000e+00, 1.128087229483136e+02, 6.941183935904215e+01, 0.000000000000000e+00, 4.180084228401464e+01, -6.275593292061854e+00, 0.000000000000000e+00, -6.988053459526481e+00, 2.877954280226535e+02, 0.000000000000000e+00, 2.815454109303111e+01, 2.877954280227034e+02, 0.000000000000000e+00, 2.815454109280807e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
