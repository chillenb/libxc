
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_o3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.213277071063438e+01, -4.213286236854258e+01, -4.213336485084074e+01, -4.213186200829639e+01, -4.213281826574328e+01, -4.213281826574328e+01, -6.421998615227304e+00, -6.422005780014581e+00, -6.422488381607136e+00, -6.423130965673070e+00, -6.422031946744773e+00, -6.422031946744773e+00, -8.507604785198939e-01, -8.494197426796591e-01, -8.141651593872962e-01, -8.238568372192597e-01, -8.502718586950799e-01, -8.502718586950799e-01, -7.340587798208235e-02, -7.620079830615036e-02, -1.103053519282581e+00, -2.683263287193996e-02, -7.425235948372014e-02, -7.425235948372014e-02, -2.533611141918832e-03, -2.642408152928635e-03, -1.955016369122007e-03, -1.289754306073170e-03, -2.617439618259906e-03, -2.617439618259906e-03, -9.813568268394162e+00, -9.814303084896094e+00, -9.813652634989706e+00, -9.814224005391107e+00, -9.813935001360385e+00, -9.813935001360385e+00, -3.388933080278987e+00, -3.416488455154036e+00, -3.377790303306534e+00, -3.399310651091229e+00, -3.421964940727569e+00, -3.421964940727569e+00, -6.920205213201928e-01, -7.725462766769822e-01, -6.380983789220767e-01, -6.769463723308796e-01, -7.326863149710164e-01, -7.326863149710164e-01, -3.435128167954031e-03, -6.595007908997981e-02, -4.744086954556553e-03, -3.225660062532960e+00, -1.413126644163307e-02, -1.413126644163307e-02, -1.247273489245584e-03, -1.412178074978273e-03, -1.079254000124383e-03, 3.416019532301702e-04, -1.295192463788218e-03, -1.295192463788218e-03, -6.785899326899314e-01, -7.077188188596591e-01, -7.040576016135077e-01, -6.980612234676566e-01, -7.015632160585709e-01, -7.015632160585709e-01, -6.252252582013631e-01, -5.512895380957913e-01, -5.922083128184384e-01, -6.288108459161275e-01, -6.104410384188828e-01, -6.104410384188828e-01, -8.297629450067980e-01, -1.188252771248769e-01, -1.775681653671989e-01, -2.947787964825466e-01, -2.311250562277508e-01, -2.311250562277507e-01, -4.646297368604622e-01, -2.130886918430631e-03, 1.130636841493694e-03, -2.667418015558251e-01, -2.371450052788891e-03, -2.371450052788873e-03, -2.924901529036718e-03, -4.145333469444000e-04, -7.649215037900287e-04, -3.336763564308634e-03, -1.112733319514407e-03, -1.112733319514406e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_o3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.512732738636474e+01, -5.512741514976669e+01, -5.512797453614913e+01, -5.512653386669238e+01, -5.512737226686642e+01, -5.512737226686642e+01, -8.621102786401533e+00, -8.621088802632796e+00, -8.621077485861457e+00, -8.623030115775535e+00, -8.621134522068175e+00, -8.621134522068175e+00, -1.280736953895685e+00, -1.279241903254107e+00, -1.240673220450442e+00, -1.253477867728439e+00, -1.280190537574099e+00, -1.280190537574099e+00, -1.544014155302581e-01, -1.575399431834318e-01, -1.614131971742766e+00, -9.470820414656297e-02, -1.553235343543727e-01, -1.553235343543727e-01, -3.300163331510852e-03, -3.440664594968664e-03, -1.368964330616854e-02, -1.690015695770954e-03, -3.408427755567794e-03, -3.408427755567794e-03, -1.288673876273024e+01, -1.288469500336437e+01, -1.288655038048352e+01, -1.288496149054059e+01, -1.288567271209471e+01, -1.288567271209471e+01, -4.692163080612457e+00, -4.727488327280645e+00, -4.679154958235014e+00, -4.706750686798656e+00, -4.732802499585548e+00, -4.732802499585548e+00, -1.043330149176147e+00, -1.106014691775216e+00, -9.703362913326672e-01, -9.985654437283087e-01, -1.095892457967473e+00, -1.095892457967473e+00, -6.337739551593034e-02, -1.678734834200809e-01, -6.047704045205836e-02, -4.193199165945845e+00, -7.448224674208889e-02, -7.448224674208889e-02, -1.634818266984369e-03, -1.848977053210792e-03, -1.416289589927820e-03, -2.710189889434408e-02, -1.697080294002947e-03, -1.697080294002947e-03, -8.841257085163000e-01, -1.014761969924742e+00, -9.931230520562201e-01, -9.641871116678442e-01, -9.805704169460717e-01, -9.805704169460715e-01, -7.724510664242333e-01, -8.591902254681439e-01, -9.077628095583490e-01, -9.470686210744904e-01, -9.281154160121352e-01, -9.281154160121349e-01, -1.185323757474751e+00, -2.476599260191811e-01, -3.295522424629814e-01, -4.908370136399692e-01, -4.027537639821888e-01, -4.027537639821885e-01, -7.375799636217477e-01, -1.171919905216115e-02, -2.245757239350769e-02, -4.423544429875316e-01, -4.254126031405428e-02, -4.254126031405425e-02, -3.804977605230356e-03, -5.474182511763357e-04, -1.006402694613344e-03, -3.810990772690128e-02, -1.459861790138568e-03, -1.459861790138566e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_o3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.122379405542163e-09, -3.122509119892555e-09, -3.122834563518499e-09, -3.120716139349950e-09, -3.122449928661028e-09, -3.122449928661028e-09, -1.931595534062726e-06, -1.932260103453595e-06, -1.950329770165023e-06, -1.917793755686427e-06, -1.931906416261020e-06, -1.931906416261020e-06, 4.241914202516286e-04, 4.322701815625457e-04, 6.228584018755396e-04, 5.931257376824354e-04, 4.271229286335646e-04, 4.271229286335646e-04, 2.266341450195793e-01, 2.150878214453019e-01, 7.072328567746441e-06, 7.462087261362117e-01, 2.230966673604685e-01, 2.230966673604685e-01, 2.828523136892692e-03, 5.507008123345411e-03, 8.177561260734775e+00, -1.789330758656994e-10, 4.754498869434393e-03, 4.754498869434393e-03, -1.528254301444295e-06, -1.551003036598460e-06, -1.530501258472819e-06, -1.548186343978944e-06, -1.539945125883701e-06, -1.539945125883701e-06, -1.322169745443842e-07, -2.957222749031320e-07, 6.993187148057657e-08, -5.690210970066061e-08, -5.226317213294509e-07, -5.226317213294509e-07, -3.432498967640635e-04, -1.778746193374765e-02, 3.737420547106215e-06, -9.083143688564908e-03, -8.552956711827639e-04, -8.552956711827639e-04, 1.991862345008682e+00, 2.206370815209812e-01, 2.066950679567810e+00, -3.887619261455345e-04, 1.282326665209169e+00, 1.282326665209169e+00, -1.985107760370671e-10, 1.121537330163867e-09, -3.279288237555635e-10, 5.903134038159475e+00, -3.082502905638543e-10, -3.082502905514048e-10, -2.165401483717278e-01, -2.721078947477557e-02, -4.660966302444880e-02, -7.939492481671008e-02, -5.983191829408128e-02, -5.983191829408139e-02, -4.785867041423560e-01, 1.769354462830396e-03, 4.070582261502535e-04, -2.711200154278592e-03, -7.052569749733218e-04, -7.052569749734214e-04, -1.291857746348632e-02, 8.674530912593667e-02, 4.130135105748513e-02, 1.262759311253457e-02, 2.353847913244675e-02, 2.353847913244667e-02, 3.302275711979719e-03, 8.243877130037244e+00, 6.861334341592237e+00, 1.509134560004669e-02, 3.458231055462607e+00, 3.458231055462606e+00, 2.347239247741293e-02, -3.501446282909053e-12, -3.928110430874625e-11, 3.858533779123398e+00, -2.814608810482069e-10, -2.814608810561007e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
