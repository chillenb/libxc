
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_kmlyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.913827357772696e+00, -8.913851935580622e+00, -8.913968712832165e+00, -8.913602888750175e+00, -8.913793505950615e+00, -8.913793505950615e+00, -1.529039545373215e+00, -1.529043087995910e+00, -1.529160459453409e+00, -1.529231463738187e+00, -1.529078795262571e+00, -1.529078795262571e+00, -3.401316787984980e-01, -3.397576728929082e-01, -3.305406081055866e-01, -3.330121552337542e-01, -3.324111470295760e-01, -3.324111470295760e-01, -1.030385027387192e-01, -1.047999789771619e-01, -3.896923114480947e-01, -7.700609739954156e-02, -9.212846327824513e-02, -9.212846327824510e-02, -7.730025396474886e-03, -8.059005904384508e-03, -2.850036252306249e-02, -4.908919758675993e-03, -5.864274588121129e-03, -5.864274588121129e-03, -2.248345397718480e+00, -2.248750015774020e+00, -2.248365481545743e+00, -2.248722658645179e+00, -2.248549717041721e+00, -2.248549717041721e+00, -8.896773297990732e-01, -8.957806385780799e-01, -8.850249230654533e-01, -8.904247922260273e-01, -8.953003414004900e-01, -8.953003414004900e-01, -3.045347367192301e-01, -3.285376543545613e-01, -2.846640250484985e-01, -2.957502132468271e-01, -3.091692570550937e-01, -3.091692570550937e-01, -5.157549331470804e-02, -9.831388108690457e-02, -4.840631093771195e-02, -8.787109403033889e-01, -6.329459316348271e-02, -6.329459316348271e-02, -3.943725720886789e-03, -4.816442701370048e-03, -3.838813797766521e-03, -3.705627659397484e-02, -4.481339663123979e-03, -4.481339663123980e-03, -3.075220690464608e-01, -3.056959982298507e-01, -3.063392003253821e-01, -3.068688650155205e-01, -3.066038632795900e-01, -3.066038632795900e-01, -3.004436023622450e-01, -2.603531503076054e-01, -2.720852710159397e-01, -2.835147904145910e-01, -2.777154821668084e-01, -2.777154821668084e-01, -3.421856306397688e-01, -1.236166805696326e-01, -1.482532803240384e-01, -1.931354883398120e-01, -1.696611046144255e-01, -1.696611046144255e-01, -2.424627989331820e-01, -2.775929011651137e-02, -3.207002275607791e-02, -1.882881871294229e-01, -4.506413021987227e-02, -4.506413021987228e-02, -1.022267523818580e-02, -1.534293776558190e-03, -2.944270036766752e-03, -4.281326906378821e-02, -4.201053342238587e-03, -4.201053342238586e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_kmlyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.185027084777625e+01, -1.185025615068404e+01, -1.185030847024661e+01, -1.185028379866065e+01, -1.185043791388108e+01, -1.185046492879477e+01, -1.185000869150593e+01, -1.184992263383323e+01, -1.185029024926918e+01, -1.185014723083947e+01, -1.185029024926918e+01, -1.185014723083947e+01, -2.017354574181994e+00, -2.017316024645635e+00, -2.017360136478083e+00, -2.017317355865860e+00, -2.017456042140478e+00, -2.017475104888677e+00, -2.017607481909498e+00, -2.017613441981310e+00, -2.017091261698426e+00, -2.017680299113982e+00, -2.017091261698426e+00, -2.017680299113982e+00, -4.490641898346321e-01, -4.492207063713702e-01, -4.486966272117024e-01, -4.488832130512267e-01, -4.406142340010661e-01, -4.405853074599161e-01, -4.436349631920430e-01, -4.436288771613495e-01, -4.439213508040527e-01, -4.442643021508756e-01, -4.439213508040527e-01, -4.442643021508756e-01, -1.511026621404520e-01, -1.504788293471594e-01, -1.524039892405452e-01, -1.517662530729141e-01, -5.099772103445910e-01, -5.159426748805024e-01, -1.258087716585013e-01, -1.257878315692686e-01, -1.278508569477352e-01, -1.415308381492767e-01, -1.278508569477352e-01, -1.415308381492767e-01, -9.893381454765982e-03, -9.785115095040339e-03, -1.032092581789583e-02, -1.018796139064487e-02, -3.861957583575910e-02, -3.847409466000104e-02, -6.276441277131652e-03, -6.286346327913988e-03, -7.389256550238110e-03, -7.792340032827175e-03, -7.389256550238110e-03, -7.792340032827174e-03, -2.971024576331809e+00, -2.970402552305772e+00, -2.971545170151382e+00, -2.970908346448572e+00, -2.971055491278149e+00, -2.970422992860513e+00, -2.971504345529168e+00, -2.970880190204850e+00, -2.971288555465698e+00, -2.970656627760000e+00, -2.971288555465698e+00, -2.970656627760000e+00, -1.178690911133447e+00, -1.178650409312801e+00, -1.186485558415059e+00, -1.186270666264050e+00, -1.172918299313574e+00, -1.173837554299505e+00, -1.179676593064454e+00, -1.180685252771273e+00, -1.186830278926343e+00, -1.184171954642502e+00, -1.186830278926343e+00, -1.184171954642502e+00, -3.973752594164622e-01, -3.969005898498134e-01, -4.244650284096024e-01, -4.245082112164331e-01, -3.693058228215421e-01, -3.742296463996478e-01, -3.793293658135565e-01, -3.847921718605199e-01, -4.066609029963088e-01, -3.978468313591151e-01, -4.066609029963088e-01, -3.978468313591151e-01, -9.718345050129380e-02, -9.699173878313910e-02, -1.572218247915220e-01, -1.571565148822339e-01, -9.037938059623535e-02, -9.047359798573423e-02, -1.149828942068555e+00, -1.149441028674304e+00, -1.087604298944418e-01, -1.062883052687092e-01, -1.087604298944418e-01, -1.062883052687092e-01, -5.065354108225275e-03, -5.055895990017239e-03, -6.168713877858093e-03, -6.160382474847324e-03, -4.933802477843841e-03, -4.921721563729784e-03, -6.124129481141401e-02, -6.137643076632675e-02, -5.813768880748657e-03, -5.697220724135111e-03, -5.813768880748657e-03, -5.697220724135111e-03, -3.957031636782934e-01, -3.963776893346506e-01, -3.942341872331802e-01, -3.948928101327416e-01, -3.947503060762390e-01, -3.954146488152986e-01, -3.951754790200486e-01, -3.958442485105604e-01, -3.949624535033650e-01, -3.956290886983619e-01, -3.949624535033650e-01, -3.956290886983619e-01, -3.862551412251223e-01, -3.868191816545055e-01, -3.438384695976925e-01, -3.442586024767856e-01, -3.556824366785366e-01, -3.561822329711227e-01, -3.676625404413292e-01, -3.681645447796302e-01, -3.614991718063959e-01, -3.619995324206254e-01, -3.614991718063959e-01, -3.619995324206254e-01, -4.423503625637629e-01, -4.426244831484228e-01, -1.856999772115614e-01, -1.856060875013743e-01, -2.104906308583652e-01, -2.103369048390601e-01, -2.568399520035391e-01, -2.571173608224301e-01, -2.317195661084351e-01, -2.316057366667076e-01, -2.317195661084351e-01, -2.316057366667075e-01, -3.205314784774559e-01, -3.210539665485781e-01, -3.712415472830122e-02, -3.710216736033446e-02, -4.940875144623785e-02, -4.950776476676729e-02, -2.473018352560536e-01, -2.480058201356809e-01, -7.704660646523466e-02, -7.628703537854546e-02, -7.704660646523465e-02, -7.628703537854548e-02, -1.302042969551355e-02, -1.291506254075508e-02, -1.991018296019965e-03, -1.991667900729824e-03, -3.790175386647586e-03, -3.793105449395998e-03, -7.235000100629987e-02, -7.244841982749817e-02, -5.434506708738515e-03, -5.353358045095854e-03, -5.434506708738517e-03, -5.353358045095853e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_kmlyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.462368570612760e-11, 6.557162649132467e-12, 1.462420044852568e-11, 1.462330485347778e-11, 6.557069175231513e-12, 1.462417283132850e-11, 1.462324764898961e-11, 6.556624777255350e-12, 1.462228809747868e-11, 1.462428528403803e-11, 6.558016191036848e-12, 1.462733055399946e-11, 1.462167647986606e-11, 6.557291254911206e-12, 1.462677130042393e-11, 1.462167647986606e-11, 6.557291254911206e-12, 1.462677130042393e-11, 1.312330782243892e-07, 8.524309420641574e-08, 1.312755870903006e-07, 1.312286412130075e-07, 8.524211412928984e-08, 1.312771813727141e-07, 1.312359887404607e-07, 8.520833460180703e-08, 1.311718728306597e-07, 1.311859250550730e-07, 8.518084892936744e-08, 1.311422298455918e-07, 1.318196459185028e-07, 8.523161295959727e-08, 1.306542817882634e-07, 1.318196459185028e-07, 8.523161295959727e-08, 1.306542817882634e-07, 4.689723114543848e-04, 5.127510881619993e-04, 4.415825081054919e-04, 4.746175620814270e-04, 5.157181426882514e-04, 4.408140346396026e-04, 4.937203568098399e-04, 5.916961080302369e-04, 5.478421870957531e-04, 5.086100446292243e-04, 5.668930434958915e-04, 4.922694334652961e-04, 2.709772477019987e-04, 6.167000438014850e-04, 7.663309075076284e-04, 2.709772477019987e-04, 6.167000438014850e-04, 7.663309075076284e-04, 1.995085777819451e-01, 2.693768694575598e-01, 1.482223981803821e-01, 1.921988130866131e-01, 2.544762096031599e-01, 1.366275175129295e-01, 2.765936838076204e-04, 2.384582132474317e-04, 1.609051581355645e-04, 4.872255747596972e-01, 7.508038154482004e-01, 4.453255120084541e-01, -2.016740966275106e-02, 1.067142321592814e+00, 9.379879374996201e-01, -2.016740966275087e-02, 1.067142321592814e+00, 9.379879374996201e-01, 2.542812992013534e-08, 4.981376997219980e-08, 2.518745647662311e-08, 1.045835258465916e-07, 2.044026858036733e-07, 1.032491347426896e-07, 4.741006705907625e+00, 8.237050865396384e+00, 4.170882578657478e+00, 9.362882645106372e-18, 1.853329203041100e-17, 9.349479015152863e-18, 2.211412682524686e-13, 4.797344779606435e-13, 2.498229849608662e-13, 2.211412682524686e-13, 4.797344779606435e-13, 2.498229849608662e-13, 1.726385080609445e-08, 1.000698992280229e-08, 1.736762689918407e-08, 1.724658536153878e-08, 9.997289242393124e-09, 1.735300328338015e-08, 1.726209340114248e-08, 1.000650779802427e-08, 1.736779606755396e-08, 1.724885360094950e-08, 9.997941475078551e-09, 1.735288337782285e-08, 1.725487188978348e-08, 1.000209132517579e-08, 1.736050188950330e-08, 1.725487188978348e-08, 1.000209132517579e-08, 1.736050188950330e-08, 2.337563155323139e-06, 1.838841596063228e-06, 2.340079271410232e-06, 2.249301739047789e-06, 1.769164423074791e-06, 2.262394857047090e-06, 2.445907290747511e-06, 1.891994454709852e-06, 2.357656484370671e-06, 2.370489890636004e-06, 1.828157044882920e-06, 2.281330014022604e-06, 2.158048198344048e-06, 1.776946057637927e-06, 2.369859684497369e-06, 2.158048198344048e-06, 1.776946057637927e-06, 2.369859684497369e-06, 8.454384623636352e-04, 1.009633681226370e-03, 8.783357613454003e-04, 5.830455386314940e-04, 6.643632279579981e-04, 5.791158658823339e-04, 1.565629763862132e-03, 1.520133682027739e-03, 9.410374447287304e-04, 1.282193183772546e-03, 1.248518724733466e-03, 8.031696920092165e-04, 5.167249152336683e-04, 9.727870934385480e-04, 1.106750189461038e-03, 5.167249152336694e-04, 9.727870934385480e-04, 1.106750189461039e-03, 1.457270077197047e+00, 2.403220448928907e+00, 1.387943194540711e+00, 1.756171865067618e-01, 2.655772046445581e-01, 1.689476585610342e-01, 1.965920015692216e+00, 2.988442385874304e+00, 1.524483992685755e+00, 2.563456363741199e-06, 2.038746859097436e-06, 2.587987943742659e-06, 1.051718748229605e+00, 1.506343919049264e+00, 7.553891975336521e-01, 1.051718748229605e+00, 1.506343919049264e+00, 7.553891975336521e-01, 1.219636297796112e-24, 2.428830520899356e-24, 1.227228071602623e-24, 2.776503351438578e-18, 5.504839809787742e-18, 2.780375367032745e-18, 1.269886784869548e-25, 2.534085397789346e-25, 1.282203832362458e-25, 3.837932933535356e+00, 6.740918471014641e+00, 3.754484565752468e+00, 2.138352158288937e-20, 4.305424608901729e-20, 2.176894572616999e-20, 2.138352158288936e-20, 4.305424608901727e-20, 2.176894572616999e-20, 8.657937940967481e-04, 9.854553762778731e-04, 8.189087397249516e-04, 8.899285624251036e-04, 1.014400186305097e-03, 8.413791710267975e-04, 8.814222779356484e-04, 1.004103789091861e-03, 8.333136071228693e-04, 8.742761998111453e-04, 9.957109048213083e-04, 8.269491197409622e-04, 8.778420447256084e-04, 9.999014867578030e-04, 8.301299537353984e-04, 8.778420447256084e-04, 9.999014867578030e-04, 8.301299537353984e-04, 9.820585876642860e-04, 1.131324668841495e-03, 9.369010807637024e-04, 2.022333046493359e-03, 2.418242861044026e-03, 1.908925465312467e-03, 1.632660767751141e-03, 1.925520311978516e-03, 1.537071279690021e-03, 1.322324882802078e-03, 1.549363617130083e-03, 1.259420259721054e-03, 1.468529067595717e-03, 1.729388349819676e-03, 1.395519013616143e-03, 1.468529067595717e-03, 1.729388349819676e-03, 1.395519013616143e-03, 4.692743539666890e-04, 5.225716448311192e-04, 4.578128000293085e-04, 7.061575300195413e-02, 1.018325190514930e-01, 6.708031745559066e-02, 3.382589107015570e-02, 4.602931629672256e-02, 3.066470908120466e-02, 9.921436207786060e-03, 1.291887057461051e-02, 9.320206976000634e-03, 1.775309260411750e-02, 2.464334981939815e-02, 1.781940003370297e-02, 1.775309260411754e-02, 2.464334981939816e-02, 1.781940003370296e-02, 3.012432254378172e-03, 3.629120035545592e-03, 2.757899719402726e-03, 4.310467120948167e+00, 7.914070244564376e+00, 4.244716132593124e+00, 4.876546955230938e+00, 8.417038529008661e+00, 4.419637439489611e+00, 1.227222679754606e-02, 1.536153773140336e-02, 1.038707568267349e-02, 2.788717574888326e+00, 4.346244240263093e+00, 2.203260238761512e+00, 2.788717574888325e+00, 4.346244240263093e+00, 2.203260238761509e+00, 7.882619854630137e-05, 1.531030470419197e-04, 7.777096839576972e-05, 6.398176306326544e-86, 1.276851310318892e-85, 6.403100337941129e-86, 3.715786284443270e-37, 7.447160665482414e-37, 3.770216345798323e-37, 2.924858243920948e+00, 4.940945317301531e+00, 2.735334716873661e+00, 1.813996164848439e-22, 3.664108957318431e-22, 1.862346557145818e-22, 1.813996164848344e-22, 3.664108957318239e-22, 1.862346557145722e-22]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
