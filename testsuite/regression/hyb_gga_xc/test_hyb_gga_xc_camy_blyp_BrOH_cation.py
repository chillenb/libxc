
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_blyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.672289986266561e+01, -1.672292181582885e+01, -1.672307406996721e+01, -1.672274632456564e+01, -1.672291028672653e+01, -1.672291028672653e+01, -2.668506371409751e+00, -2.668480130213781e+00, -2.667941797605870e+00, -2.669407440726901e+00, -2.668542323082046e+00, -2.668542323082046e+00, -4.393094827676675e-01, -4.389889808753530e-01, -4.315631351667139e-01, -4.357034440769682e-01, -4.344370017384905e-01, -4.344370017384905e-01, -5.738126376535618e-02, -5.977396942496552e-02, -5.264759855460581e-01, -2.339049564372838e-02, -4.989476261278883e-02, -4.989476261278879e-02, -1.041936775355784e-03, -1.093567143574634e-03, -5.980816933459146e-04, -6.096129512837241e-04, -4.040442292661401e-04, -4.040442292661401e-04, -3.930815897012126e+00, -3.930360121015676e+00, -3.930803392570561e+00, -3.930400904530451e+00, -3.930580274590486e+00, -3.930580274590486e+00, -1.549461593050064e+00, -1.558318101400443e+00, -1.548260227173273e+00, -1.556098662116703e+00, -1.554933078547444e+00, -1.554933078547444e+00, -3.623441648453095e-01, -3.899671260885435e-01, -3.304241642096501e-01, -3.378903415293833e-01, -3.687732654115800e-01, -3.687732654115800e-01, 5.398337170104975e-03, -4.926797171207380e-02, 6.934363847046886e-03, -1.351064177094147e+00, -8.691302346017043e-03, -8.691302346017043e-03, -4.700823634284425e-04, -5.961443534028934e-04, -4.536898193136960e-04, 6.187335151106677e-03, -4.422623765979397e-04, -4.422623765979397e-04, -3.518618160768017e-01, -3.521172646570111e-01, -3.520612394362591e-01, -3.519851579256451e-01, -3.520258899247359e-01, -3.520258899247359e-01, -3.394631077936320e-01, -2.966457474124221e-01, -3.101329488403584e-01, -3.224314250986677e-01, -3.162163672517217e-01, -3.162163672517217e-01, -4.132329079220548e-01, -8.558220285610768e-02, -1.219163162798096e-01, -1.860570063406751e-01, -1.526952102725876e-01, -1.526952102725876e-01, -2.663810163939568e-01, -9.419263219743308e-04, 4.786380552439750e-03, -1.757033923268670e-01, 3.822766374558560e-03, 3.822766374558553e-03, -1.473595661259169e-03, -1.606043937963266e-04, -3.331993991892971e-04, 4.663427652530862e-03, -4.268294610195480e-04, -4.268294610195477e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_blyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.008969963964601e+01, -2.008967563322808e+01, -2.008978661474967e+01, -2.008973909673163e+01, -2.009004967059600e+01, -2.009011870999045e+01, -2.008906404409147e+01, -2.008886666694126e+01, -2.008974939289763e+01, -2.008935751665856e+01, -2.008974939289763e+01, -2.008935751665856e+01, -3.176869896451200e+00, -3.176926754118969e+00, -3.176896121547253e+00, -3.176953365475939e+00, -3.177536610408640e+00, -3.177694442113320e+00, -3.176956062137543e+00, -3.177106706385108e+00, -3.176333021125326e+00, -3.177683208571788e+00, -3.176333021125326e+00, -3.177683208571788e+00, -5.596490744430691e-01, -5.603977464599820e-01, -5.589586791267654e-01, -5.598546999996166e-01, -5.458302284375167e-01, -5.454462936791468e-01, -5.503199535606894e-01, -5.504216945353527e-01, -5.541078269240010e-01, -5.516215888570138e-01, -5.541078269240010e-01, -5.516215888570138e-01, -1.248593458251773e-01, -1.238845424215487e-01, -1.257706821040167e-01, -1.248373956766292e-01, -6.548855280017959e-01, -6.696269407583777e-01, -9.994083457420748e-02, -1.001292534748426e-01, -9.379388176054690e-02, -1.186361835164235e-01, -9.379388176054684e-02, -1.186361835164236e-01, -1.591690492905618e-03, -1.214022214773722e-03, -1.702217129935438e-03, -1.252861754487112e-03, -7.800823251484077e-03, -7.409162364762580e-03, -7.811689961678011e-04, -8.424368852448481e-04, -2.127044898985538e-04, -2.308176684239134e-03, -2.127044898985538e-04, -2.308176684239134e-03, -4.880709079398639e+00, -4.879527953144184e+00, -4.882626993985292e+00, -4.881384734677320e+00, -4.880814894703083e+00, -4.879593418638252e+00, -4.882463568170094e+00, -4.881277060696371e+00, -4.881690148969311e+00, -4.880460957301806e+00, -4.881690148969311e+00, -4.880460957301806e+00, -1.723814958194526e+00, -1.723739408601606e+00, -1.737425221281457e+00, -1.737015259857276e+00, -1.711951251885807e+00, -1.714218580609439e+00, -1.723655516155036e+00, -1.726099260670932e+00, -1.739661103912892e+00, -1.733310243911198e+00, -1.739661103912892e+00, -1.733310243911198e+00, -4.820906493884171e-01, -4.810553411476061e-01, -5.334585681236398e-01, -5.337120622718770e-01, -4.347618371677640e-01, -4.464955662664667e-01, -4.564742245045267e-01, -4.689804831324578e-01, -5.003710053482094e-01, -4.803395060178896e-01, -5.003710053482094e-01, -4.803395060178896e-01, -7.057768831781436e-02, -7.023528546686877e-02, -1.410173049697854e-01, -1.409486966736733e-01, -6.163394039273046e-02, -6.237923984729346e-02, -1.773906855013352e+00, -1.773173792024066e+00, -8.164315207046680e-02, -7.641095071881149e-02, -8.164315207046680e-02, -7.641095071881149e-02, -6.830301350253237e-04, -5.744537756175405e-04, -8.205208728366477e-04, -7.669554119759241e-04, -6.888395924572693e-04, -5.322444818457800e-04, -2.729962779932770e-02, -2.762461356098214e-02, -1.289388020939233e-03, -3.181378532609048e-04, -1.289388020939233e-03, -3.181378532609048e-04, -4.891481974615188e-01, -4.907904767089059e-01, -4.838493312376855e-01, -4.854636303134733e-01, -4.856196572485509e-01, -4.872519437627514e-01, -4.871601459604011e-01, -4.887859218193543e-01, -4.863809595031721e-01, -4.880100320417179e-01, -4.863809595031721e-01, -4.880100320417179e-01, -4.745999719651210e-01, -4.759436792145085e-01, -3.954191470634434e-01, -3.964331026127622e-01, -4.148107092436972e-01, -4.160650368700592e-01, -4.364603291757796e-01, -4.376728527066281e-01, -4.251131430844489e-01, -4.263108097443897e-01, -4.251131430844489e-01, -4.263108097443897e-01, -5.623771975324136e-01, -5.632440908268702e-01, -1.753418302189679e-01, -1.751903772766831e-01, -2.042224470743156e-01, -2.039305167385008e-01, -2.638711778791973e-01, -2.645987102657212e-01, -2.300084587646097e-01, -2.297298007946136e-01, -2.300084587646098e-01, -2.297298007946136e-01, -3.595281975454210e-01, -3.608400555379720e-01, -6.860607971512805e-03, -6.802390588968484e-03, -1.576113524683269e-02, -1.599068479310754e-02, -2.487580390969345e-01, -2.507112715898333e-01, -4.425057609692694e-02, -4.280989101823070e-02, -4.425057609692683e-02, -4.280989101823063e-02, -2.123506195346686e-03, -1.814816628519785e-03, -2.150808099008617e-04, -2.128814032657761e-04, -5.112371932428171e-04, -3.874341297512748e-04, -3.875422152329992e-02, -3.906690711073192e-02, -1.141283385530152e-03, -3.238946377337596e-04, -1.141283385530150e-03, -3.238946377337594e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_blyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.139490657725600e-08, 1.463652377038497e-11, -1.139497070578898e-08, -1.139484388833038e-08, 1.463631512328463e-11, -1.139492455921670e-08, -1.139450003618648e-08, 1.463532316351641e-11, -1.139447526543666e-08, -1.139521890185520e-08, 1.463842899785011e-11, -1.139538209161211e-08, -1.139488027164559e-08, 1.463681083685537e-11, -1.139491282347588e-08, -1.139488027164559e-08, 1.463681083685537e-11, -1.139491282347588e-08, -1.357933372621594e-05, 1.902747638536065e-07, -1.358449761614941e-05, -1.357974029479762e-05, 1.902725761814505e-07, -1.358528363407368e-05, -1.359332177551931e-05, 1.901971754504621e-07, -1.359671969343785e-05, -1.356115218460762e-05, 1.901358235030523e-07, -1.356545397998709e-05, -1.358529642731376e-05, 1.902491360705296e-07, -1.357742544260643e-05, -1.358529642731376e-05, 1.902491360705296e-07, -1.357742544260643e-05, -4.790602767959723e-03, 1.144533678933034e-03, -4.874617018867684e-03, -4.774469691024611e-03, 1.151156568500561e-03, -4.877715094650958e-03, -4.697113460160225e-03, 1.320750241138922e-03, -4.543913984636818e-03, -4.504809772608822e-03, 1.265386257803329e-03, -4.553999018808579e-03, -5.254453480797786e-03, 1.376562597771172e-03, -3.730107768253425e-03, -5.254453480797786e-03, 1.376562597771172e-03, -3.730107768253425e-03, 2.510120185722312e-01, 6.012876550391961e-01, 1.413082627577858e-01, 2.327643706958669e-01, 5.680272535784819e-01, 1.149095543165516e-01, -2.977725441882191e-03, 5.322727974273029e-04, -3.060559521759823e-03, 8.839402101283786e-01, 1.675901373768304e+00, 7.927914014653610e-01, -2.234727174967263e-01, 2.382014110698246e+00, 1.900517539728773e+00, -2.234727174967259e-01, 2.382014110698246e+00, 1.900517539728771e+00, -4.757967102062048e-04, 1.111914508308031e-07, -5.573014861009251e-04, -5.595894646760831e-04, 4.562559950974850e-07, -6.720036177850656e-04, 1.055039960897406e+01, 1.838627425311693e+01, 9.273291868676555e+00, -1.109062759790920e-04, 4.136895542502456e-17, -1.038713577214024e-04, -3.482420630323041e-04, 1.070835888305008e-12, -1.403915640311353e-04, -3.482420630323332e-04, 1.070835888305008e-12, -1.403915640320962e-04, -3.235561210452777e-06, 2.233703107768369e-08, -3.238219946006365e-06, -3.238046186365194e-06, 2.231537777319893e-08, -3.240619496708712e-06, -3.235666531680827e-06, 2.233595490630417e-08, -3.238276219455953e-06, -3.237795521133017e-06, 2.231683364972891e-08, -3.240459944556468e-06, -3.236860019592121e-06, 2.232609670798167e-08, -3.239428274039258e-06, -3.236860019592121e-06, 2.232609670798167e-08, -3.239428274039258e-06, -9.218358259707744e-05, 4.104557134069705e-06, -9.219453533198831e-05, -9.049728570076910e-05, 3.949027730077658e-06, -9.054821796909399e-05, -9.203387401272227e-05, 4.223201907834492e-06, -9.224165950247090e-05, -9.057851738569159e-05, 4.080707689470805e-06, -9.074808403994618e-05, -9.141694329423854e-05, 3.966397450084659e-06, -9.116330085728141e-05, -9.141694329423854e-05, 3.966397450084659e-06, -9.116330085728141e-05, -9.398479489326416e-03, 2.253646609880290e-03, -9.437882439293603e-03, -9.373245737968182e-03, 1.482953633834817e-03, -9.402155996635393e-03, -1.161833999131578e-02, 3.393155540240489e-03, -1.156615452179279e-02, -1.383178680758464e-02, 2.786872153422916e-03, -1.304583670900203e-02, -9.009602811617471e-03, 2.171399762139616e-03, -9.553264952165182e-03, -9.009602811617473e-03, 2.171399762139616e-03, -9.553264952165179e-03, 3.092146389542965e+00, 5.364331359216309e+00, 2.934096983554205e+00, 2.524039859765271e-01, 5.928062603673171e-01, 2.382100509171114e-01, 4.235804802489100e+00, 6.670630325612285e+00, 3.242772186792723e+00, -1.745456393933590e-04, 4.550774239056777e-06, -1.748340401736356e-04, 2.153255264990446e+00, 3.362374819306393e+00, 1.458815235633286e+00, 2.153255264990446e+00, 3.362374819306393e+00, 1.458815235633286e+00, -6.322356791659688e-05, 5.421496698436063e-24, -6.364477968751264e-05, -1.136558732792263e-04, 1.228758886113335e-17, -1.121145281662792e-04, -1.692697848497517e-04, 5.656440620065503e-25, -2.132638702013788e-04, 8.461545500877975e+00, 1.504669301565768e+01, 8.276430069509983e+00, -1.107966515120698e-04, 9.610322787727072e-20, -2.621357282415512e-04, -1.107966515124288e-04, 9.610322787727070e-20, -2.621357282415558e-04, -1.357302102877389e-02, 2.199677179191681e-03, -1.349595820877341e-02, -1.252327201424157e-02, 2.264286130145305e-03, -1.246781806173037e-02, -1.283955543070269e-02, 2.241303100651475e-03, -1.277969534096224e-02, -1.314179510469726e-02, 2.222568983976134e-03, -1.307076863842085e-02, -1.298590181041085e-02, 2.231922961512953e-03, -1.292050647466668e-02, -1.298590181041085e-02, 2.231922961512953e-03, -1.292050647466668e-02, -1.545540892679444e-02, 2.525278278664052e-03, -1.535909940744674e-02, -1.281978536820454e-02, 5.397863529116129e-03, -1.289779139361630e-02, -1.321937252107568e-02, 4.298036410666330e-03, -1.326322226489465e-02, -1.375467114158602e-02, 3.458400931093935e-03, -1.372377024350228e-02, -1.349803774885174e-02, 3.860241852276062e-03, -1.348081284648341e-02, -1.349803774885174e-02, 3.860241852276062e-03, -1.348081284648341e-02, -7.889954963225010e-03, 1.166454564355177e-03, -7.910315413791717e-03, 5.630188777454789e-02, 2.273047300256539e-01, 4.910257169392955e-02, -3.158367987954963e-03, 1.027440095908986e-01, -9.399485331412091e-03, -2.933974394891064e-02, 2.883676467546989e-02, -3.000242004396184e-02, -2.491693790802124e-02, 5.500747727544229e-02, -2.508318180719826e-02, -2.491693790802121e-02, 5.500747727544231e-02, -2.508318180719833e-02, -1.600901287100020e-02, 8.100714365057125e-03, -1.625476868852887e-02, 9.592460847660666e+00, 1.766533536733120e+01, 9.445199345558050e+00, 1.082855789231052e+01, 1.878803243082290e+01, 9.803729193880272e+00, -3.815655847310637e-02, 3.428914672188251e-02, -4.019973118306111e-02, 6.071909389477458e+00, 9.701438036301546e+00, 4.735379417699125e+00, 6.071909389477460e+00, 9.701438036301546e+00, 4.735379417699122e+00, -8.939223599576953e-04, 3.417478728614279e-04, -1.019996501902562e-03, -7.028093230990027e-06, 2.850114531961813e-85, -1.058962838211628e-05, -3.688310268855585e-05, 1.662312648545182e-36, -4.576412127532222e-05, 6.376219164238186e+00, 1.102889579754806e+01, 5.951085472278105e+00, -1.571891150201458e-04, 8.178814636871498e-22, -2.117767980907497e-04, -1.571891150209082e-04, 8.178814636871070e-22, -2.117767980903256e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
