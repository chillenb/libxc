
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b1pw91_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.586356472991925e+01, -1.586358556193563e+01, -1.586372905422478e+01, -1.586341806700221e+01, -1.586357378256325e+01, -1.586357378256325e+01, -2.669725905777507e+00, -2.669701637674706e+00, -2.669205148910712e+00, -2.670567266292304e+00, -2.669760107555683e+00, -2.669760107555683e+00, -5.563260348418481e-01, -5.561108338045508e-01, -5.522927515939338e-01, -5.561550667461155e-01, -5.548987005642128e-01, -5.548987005642128e-01, -1.711691235488678e-01, -1.722725367956369e-01, -6.403713818686907e-01, -1.477378870762957e-01, -1.553971792260554e-01, -1.553971792260554e-01, -4.868669138040785e-02, -4.867700329749998e-02, -8.535047745796692e-02, -4.470882267184755e-02, -4.439186753695774e-02, -4.439186753695772e-02, -3.861404849661360e+00, -3.861059544547156e+00, -3.861396504754429e+00, -3.861091546851599e+00, -3.861225581717314e+00, -3.861225581717314e+00, -1.621297591223850e+00, -1.629220269900987e+00, -1.621244947882637e+00, -1.628222227882582e+00, -1.625721346144245e+00, -1.625721346144245e+00, -4.784456566936383e-01, -5.098644467202097e-01, -4.463989166282107e-01, -4.563551751417536e-01, -4.844981977147723e-01, -4.844981977147723e-01, -1.266224275096312e-01, -1.840545295585934e-01, -1.212208848344489e-01, -1.437693083203285e+00, -1.304410580313334e-01, -1.304410580313334e-01, -4.038864052959442e-02, -4.306151216467865e-02, -2.816074571633501e-02, -9.877286824283327e-02, -3.406373459869490e-02, -3.406373459869491e-02, -4.741432801049984e-01, -4.720245453395173e-01, -4.727105888909682e-01, -4.733245337819181e-01, -4.730114803957750e-01, -4.730114803957750e-01, -4.623606148002759e-01, -4.143282444630187e-01, -4.262935592994594e-01, -4.391619103712793e-01, -4.323689945385664e-01, -4.323689945385664e-01, -5.327262387869023e-01, -2.173837609816935e-01, -2.461793429886651e-01, -3.008520804718255e-01, -2.706788944205667e-01, -2.706788944205666e-01, -3.837448423557387e-01, -8.546798523691390e-02, -9.478612455870593e-02, -2.876718276473527e-01, -1.060506458816285e-01, -1.060506458816284e-01, -5.470611881691763e-02, -2.501401835023851e-02, -3.263469050304366e-02, -1.034606251350007e-01, -3.201731633526865e-02, -3.201731633526862e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b1pw91_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.904310779557524e+01, -1.904317965042542e+01, -1.904348474439099e+01, -1.904241599326521e+01, -1.904297803367016e+01, -1.904297803367016e+01, -3.154045063027579e+00, -3.154079098399869e+00, -3.154941366125904e+00, -3.154023074237684e+00, -3.154159511258180e+00, -3.154159511258180e+00, -6.535165640336602e-01, -6.523649813639898e-01, -6.238034568107453e-01, -6.291194505766924e-01, -6.284932030986340e-01, -6.284932030986340e-01, -1.711691149153742e-01, -1.753206592265607e-01, -7.564956602968025e-01, -1.199483009396064e-01, -1.394167009533562e-01, -1.394167009533562e-01, -1.347124746473581e-02, -1.373428200476548e-02, -3.969731118156481e-02, -1.050671747757933e-02, -1.130104884287627e-02, -1.130104884287631e-02, -4.781383942519906e+00, -4.783422925969965e+00, -4.781475384267416e+00, -4.783275407743470e+00, -4.782418455087976e+00, -4.782418455087976e+00, -1.733575258273866e+00, -1.747929375838811e+00, -1.719605443303816e+00, -1.732243003217694e+00, -1.748333274475931e+00, -1.748333274475931e+00, -5.988205113359744e-01, -6.626834892271722e-01, -5.556202485291817e-01, -5.910144863825053e-01, -6.099239699219111e-01, -6.099239699219111e-01, -8.222684403776183e-02, -1.597258684139710e-01, -7.663942106125074e-02, -1.863813227300733e+00, -9.621521418065578e-02, -9.621521418065578e-02, -9.026845706405729e-03, -1.016902687387871e-02, -7.009976064863507e-03, -5.495780847642538e-02, -8.467446285617006e-03, -8.467446285617037e-03, -6.186749519604978e-01, -6.138022261196883e-01, -6.157361134619456e-01, -6.171681353353109e-01, -6.164736749305670e-01, -6.164736749305670e-01, -6.033487825567171e-01, -4.964458451341949e-01, -5.288184166758820e-01, -5.607652181382594e-01, -5.446714830817307e-01, -5.446714830817307e-01, -6.915955044520431e-01, -2.078253196253102e-01, -2.592884131801105e-01, -3.620819639513181e-01, -3.080305247140998e-01, -3.080305247140997e-01, -4.606571749857047e-01, -3.888671167519248e-02, -4.781673335794333e-02, -3.577062355725569e-01, -6.612448836335426e-02, -6.612448836335422e-02, -1.654114523126687e-02, -4.724667063734333e-03, -7.016335420030715e-03, -6.273150179405504e-02, -7.915948310940378e-03, -7.915948310940330e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b1pw91_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.285709700822457e-09, -5.285680677683454e-09, -5.285486269242393e-09, -5.285919429602806e-09, -5.285701752378945e-09, -5.285701752378945e-09, -6.257095851781418e-06, -6.257221512248188e-06, -6.259527934792991e-06, -6.250922637831016e-06, -6.256663780086835e-06, -6.256663780086835e-06, -2.845607170792780e-03, -2.858981297234273e-03, -3.167039506861608e-03, -3.073887930331966e-03, -3.094143118856810e-03, -3.094143118856810e-03, -4.091820780028609e-01, -3.857197004097779e-01, -1.634360589904123e-03, -1.036771842811125e+00, -7.244981252552490e-01, -7.244981252552491e-01, -7.601745479009327e+03, -6.666077389684197e+03, -4.443238700594227e+01, -3.587500337229345e+04, -1.988176214243244e+04, -1.988176214243245e+04, -1.405026737937380e-06, -1.404668072074975e-06, -1.405003740862912e-06, -1.404687406347798e-06, -1.404850224946837e-06, -1.404850224946837e-06, -4.868540411993484e-05, -4.761241178836489e-05, -4.903760617529429e-05, -4.808021519265195e-05, -4.792077405525327e-05, -4.792077405525327e-05, -3.875466496670264e-03, -1.247679423791274e-03, -5.206049427027269e-03, -2.264030282765974e-03, -3.523338746783572e-03, -3.523338746783572e-03, -2.913460540558144e+00, -3.843172621249361e-01, -3.701538265629383e+00, -4.719026008449565e-05, -2.008564171062805e+00, -2.008564171062805e+00, -8.182775068193610e+04, -4.008170220546820e+04, -1.452456401436290e+05, -1.220010138822919e+01, -6.857350212453201e+04, -6.857350212453197e+04, -2.703135394925352e-04, -1.402139249092806e-03, -9.907212499022586e-04, -6.433058458798387e-04, -8.153997186588404e-04, -8.153997186588404e-04, 2.549805681899102e-04, -8.287638017826386e-03, -6.310240541745241e-03, -4.141921819903771e-03, -5.280239164392374e-03, -5.280239164392374e-03, -1.227203988282672e-03, -1.690915002004567e-01, -8.675800181722756e-02, -2.726115843247021e-02, -4.991755895564834e-02, -4.991755895564835e-02, -1.100402054004158e-02, -4.881515217180094e+01, -2.066225386690866e+01, -2.602746791654009e-02, -6.574206201572714e+00, -6.574206201572714e+00, -2.664375592752717e+03, -2.815763469052788e+06, -2.700687346215367e+05, -7.812410900427686e+00, -9.154293614532509e+04, -9.154293614532540e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
