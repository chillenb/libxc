
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blypr_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.092102248296644e+01, -2.092104983677299e+01, -2.092123992039149e+01, -2.092083153806429e+01, -2.092103578476748e+01, -2.092103578476748e+01, -3.343493314376258e+00, -3.343459941345542e+00, -3.342774103236406e+00, -3.344630548138061e+00, -3.343537590371194e+00, -3.343537590371194e+00, -5.342819973341391e-01, -5.338826928413768e-01, -5.247281935279547e-01, -5.300030283388483e-01, -5.285138689481549e-01, -5.285138689481549e-01, -6.191332170724587e-02, -6.375713647841168e-02, -6.452934286891017e-01, -3.575121112418271e-02, -4.517009653380212e-02, -4.517009653380212e-02, -3.135544585272458e-06, -3.656165543600518e-06, -1.187297107347489e-03, -6.040346403866011e-07, -1.198457831496599e-06, -1.198457831496599e-06, -4.923349517237105e+00, -4.922765740440303e+00, -4.923333312299849e+00, -4.922817803109461e+00, -4.923047818254287e+00, -4.923047818254287e+00, -1.940754123223106e+00, -1.951831048746873e+00, -1.939410164313818e+00, -1.949212339811370e+00, -1.947508084750491e+00, -1.947508084750491e+00, -4.353534074116894e-01, -4.706032665488238e-01, -3.942224526303142e-01, -4.036115772929383e-01, -4.429690629199732e-01, -4.429690629199732e-01, -1.644343323661312e-02, -6.163469864016591e-02, -1.376697864298212e-02, -1.687864304509281e+00, -2.333433456116651e-02, -2.333433456116651e-02, -2.774501330275463e-07, -5.643262305708347e-07, -2.522997650822683e-07, -5.205599366483026e-03, -4.411039655756014e-07, -4.411039655756016e-07, -4.217467530854994e-01, -4.220777194549098e-01, -4.220026694449832e-01, -4.219040369769390e-01, -4.219566148268648e-01, -4.219566148268648e-01, -4.058412099211736e-01, -3.515164357524368e-01, -3.684710795711877e-01, -3.840571792712822e-01, -3.761624906121970e-01, -3.761624906121970e-01, -5.003961193134316e-01, -9.660919265506319e-02, -1.349211549960292e-01, -2.103968665494565e-01, -1.699689777301565e-01, -1.699689777301565e-01, -3.127557301482096e-01, -1.012900572515850e-03, -2.831543584909120e-03, -1.965769712199446e-01, -9.540212576405620e-03, -9.540212576405593e-03, -8.813227994937295e-06, -1.077863865851664e-08, -9.968447771619141e-08, -8.190158609404969e-03, -3.494681243352004e-07, -3.494681243351995e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blypr_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.512186659069412e+01, -2.512196073697145e+01, -2.512236275906814e+01, -2.512096240331976e+01, -2.512169850566010e+01, -2.512169850566010e+01, -3.974619953289182e+00, -3.974653634724140e+00, -3.975532489206618e+00, -3.974776535973116e+00, -3.974758230445430e+00, -3.974758230445430e+00, -6.863285180068104e-01, -6.854992650112645e-01, -6.668111437695508e-01, -6.729681438078894e-01, -6.715399090076019e-01, -6.715399090076019e-01, -1.025881741245230e-01, -1.052937588111927e-01, -8.166220692300874e-01, -6.028557831339058e-02, -7.579620275234979e-02, -7.579620275234975e-02, -6.270736818816301e-06, -7.311853435587434e-06, -2.598849899546642e-03, -1.208054696997086e-06, -2.396858483595067e-06, -2.396858483595067e-06, -6.107319681600365e+00, -6.109698670594540e+00, -6.107427562764265e+00, -6.109527729815517e+00, -6.108526065840554e+00, -6.108526065840554e+00, -2.151758613323406e+00, -2.168704799147345e+00, -2.138128538077356e+00, -2.152997307646979e+00, -2.167829520786008e+00, -2.167829520786008e+00, -5.873519921362014e-01, -6.545355227396843e-01, -5.347462254868993e-01, -5.640455480520707e-01, -5.990311582498721e-01, -5.990311582498721e-01, -2.849256993579954e-02, -1.054985066610089e-01, -2.409497909822934e-02, -2.218631209861778e+00, -3.968429109085808e-02, -3.968429109085808e-02, -5.548968378146657e-07, -1.128639253412442e-06, -5.045955225199615e-07, -9.742852506365510e-03, -8.821978019209885e-07, -8.821978019209889e-07, -5.989326327392247e-01, -5.920586595807009e-01, -5.943686625102549e-01, -5.963581140604336e-01, -5.953525966046848e-01, -5.953525966046848e-01, -5.801552808120621e-01, -4.757804280020843e-01, -5.021426492729283e-01, -5.307194335856809e-01, -5.157964892940988e-01, -5.157964892940988e-01, -6.917835034864043e-01, -1.605468641947506e-01, -2.111659643625923e-01, -3.036500501227518e-01, -2.536052935721408e-01, -2.536052935721408e-01, -4.294163498867915e-01, -2.252907928488604e-03, -5.633732477329591e-03, -2.866177521896883e-01, -1.704832033056024e-02, -1.704832033056015e-02, -1.762401601224350e-05, -2.155726880003707e-08, -1.993684051192480e-07, -1.478576634738119e-02, -6.989294792996709e-07, -6.989294792996692e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blypr_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.138944952420362e-09, -7.138910804796970e-09, -7.138662115173122e-09, -7.139172179870453e-09, -7.138918679104325e-09, -7.138918679104325e-09, -8.552929033279855e-06, -8.553305255247699e-06, -8.561200021069540e-06, -8.541195787182614e-06, -8.552580586160469e-06, -8.552580586160469e-06, -2.807904524346414e-03, -2.802787780882073e-03, -2.645904946300934e-03, -2.598582021382654e-03, -2.623015310723183e-03, -2.623015310723183e-03, 4.780216858266101e-03, 2.748695706867560e-03, -1.799722514810186e-03, 6.661774617081485e-03, 8.606606444398861e-03, 8.606606444398847e-03, -3.192396571353061e-05, -3.807790336685830e-05, -2.298354620363095e-03, -6.630172041866693e-06, -1.467201686608448e-05, -1.467201686614028e-05, -2.036826014361829e-06, -2.038362348699883e-06, -2.036876841501533e-06, -2.038233281766385e-06, -2.037614608494911e-06, -2.037614608494911e-06, -5.772503861701000e-05, -5.669483944090857e-05, -5.767476075218091e-05, -5.676401872168262e-05, -5.717980973938025e-05, -5.717980973938025e-05, -5.432795762238115e-03, -5.557630454998666e-03, -6.569798244018286e-03, -7.779932827987991e-03, -5.351288460455503e-03, -5.351288460455503e-03, -1.358680487580034e-02, 2.217105735818404e-02, -1.461993742890035e-02, -1.098380820379805e-04, -1.186443455502877e-02, -1.186443455502877e-02, -3.909735236295703e-06, -6.969854108788077e-06, -1.180440172082608e-05, -8.335963571808207e-03, -1.164258400241361e-05, -1.164258400255699e-05, -7.961929021295959e-03, -7.314602915031443e-03, -7.510992299209430e-03, -7.695878456487450e-03, -7.600537888295470e-03, -7.600537888295470e-03, -9.041566118475095e-03, -7.031270921684428e-03, -7.421963033849189e-03, -7.858965419479228e-03, -7.640977470691071e-03, -7.640977470691071e-03, -4.702448514460117e-03, 8.969193375644231e-03, -4.478607619126253e-03, -1.479550703125639e-02, -1.187755864112473e-02, -1.187755864112474e-02, -8.635910825506181e-03, -1.938867575739820e-03, -4.225623636057618e-03, -1.982412402258506e-02, -1.588680239844150e-02, -1.588680239843744e-02, -7.001589511186473e-05, -5.293612149494051e-07, -2.551323645608341e-06, -1.385782780342289e-02, -1.104245603227089e-05, -1.104245603196124e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
