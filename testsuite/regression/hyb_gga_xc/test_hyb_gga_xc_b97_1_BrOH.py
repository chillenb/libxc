
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.654166458621340e+01, -1.654168521984323e+01, -1.654183454784616e+01, -1.654149553040806e+01, -1.654167498890460e+01, -1.654167498890460e+01, -2.796647948525661e+00, -2.796628401391926e+00, -2.796204775614983e+00, -2.797516623775705e+00, -2.796649570052780e+00, -2.796649570052780e+00, -5.861568306891622e-01, -5.860869575884705e-01, -5.862978697767020e-01, -5.898447664033172e-01, -5.861286211536161e-01, -5.861286211536161e-01, -1.843967013156179e-01, -1.857034703055348e-01, -6.820615437482277e-01, -1.459151876115820e-01, -1.847755570353786e-01, -1.847755570353786e-01, -8.509384698111695e-03, -8.989099788143776e-03, -4.738949703529667e-02, -3.612571453756881e-03, -8.878494872828371e-03, -8.878494872828371e-03, -4.045188372468994e+00, -4.044960765763072e+00, -4.045169466444865e+00, -4.044992403626876e+00, -4.045065135496318e+00, -4.045065135496318e+00, -1.715055504575589e+00, -1.722393091003392e+00, -1.716670790143738e+00, -1.722344099708543e+00, -1.718059560101904e+00, -1.718059560101904e+00, -4.947994350895314e-01, -5.245038582353683e-01, -4.718759915783750e-01, -4.830221097222913e-01, -5.108322581781652e-01, -5.108322581781652e-01, -1.121898142377118e-01, -1.969762447505873e-01, -1.101262753261185e-01, -1.505849605909804e+00, -1.266807010278250e-01, -1.266807010278250e-01, -3.466573524630171e-03, -4.042030736402120e-03, -2.905062466357780e-03, -6.853690524644229e-02, -3.631821657061838e-03, -3.631821657061838e-03, -4.896012211002327e-01, -4.967548331570171e-01, -4.957153577587033e-01, -4.940337888990703e-01, -4.950017258839647e-01, -4.950017258839647e-01, -4.710731294238767e-01, -4.418787241052177e-01, -4.521328917080040e-01, -4.632226853334938e-01, -4.572628803742392e-01, -4.572628803742393e-01, -5.487386513893096e-01, -2.371278918280393e-01, -2.681013495653654e-01, -3.176846229428749e-01, -2.910485310830941e-01, -2.910485310830941e-01, -4.023413752830675e-01, -4.344900586245114e-02, -6.126540564112632e-02, -2.962572075121741e-01, -9.003014118577675e-02, -9.003014118577672e-02, -1.026862604278404e-02, -9.451420313152762e-04, -1.921855063255550e-03, -8.532807210082262e-02, -3.014907491784277e-03, -3.014907491784257e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.003289323958755e+01, -2.003296779185535e+01, -2.003329785011757e+01, -2.003207706814282e+01, -2.003293257713068e+01, -2.003293257713068e+01, -3.299817720449058e+00, -3.299861607429805e+00, -3.301199030277080e+00, -3.299572164603697e+00, -3.299853924444619e+00, -3.299853924444619e+00, -6.577930323640079e-01, -6.565245692628723e-01, -6.238547185044411e-01, -6.291788320426948e-01, -6.573330964428100e-01, -6.573330964428100e-01, -2.002256435846178e-01, -2.024401041103421e-01, -7.994294853702357e-01, -1.589293910268434e-01, -2.008828253850619e-01, -2.008828253850619e-01, -1.187804393108977e-02, -1.255227707993188e-02, -6.365498416477749e-02, -4.999340549805634e-03, -1.239715089256149e-02, -1.239715089256149e-02, -5.048252326076869e+00, -5.050474391078708e+00, -5.048479548262711e+00, -5.050207390779256e+00, -5.049392953866421e+00, -5.049392953866421e+00, -1.744046058961692e+00, -1.760136978844804e+00, -1.733179490200593e+00, -1.745698353602275e+00, -1.769193061281893e+00, -1.769193061281893e+00, -6.125224276864416e-01, -6.717309498575542e-01, -5.814420364950661e-01, -6.215315858187912e-01, -6.388282026268867e-01, -6.388282026268867e-01, -1.304710230054768e-01, -2.044423480685816e-01, -1.280243774268875e-01, -1.936901406144611e+00, -1.420174482465907e-01, -1.420174482465907e-01, -4.795196265953742e-03, -5.600803602152987e-03, -4.012376598127048e-03, -8.761649730725601e-02, -5.027334426072867e-03, -5.027334426072863e-03, -6.163680166038061e-01, -6.343008520999557e-01, -6.290211766636081e-01, -6.236077529429684e-01, -6.264306425920239e-01, -6.264306425920239e-01, -5.951450294082201e-01, -5.172205010423299e-01, -5.547349167682656e-01, -5.899556226568007e-01, -5.725918374975861e-01, -5.725918374975864e-01, -7.038826191492237e-01, -2.442268276031317e-01, -2.836117330110934e-01, -3.682836558681732e-01, -3.212127177322975e-01, -3.212127177322975e-01, -4.682822478200069e-01, -5.895295618438227e-02, -8.009461554127345e-02, -3.589031190494166e-01, -1.087185793577205e-01, -1.087185793577206e-01, -1.434738869396359e-02, -1.289304677208993e-03, -2.641144953833086e-03, -1.036500545845722e-01, -4.165254956867653e-03, -4.165254956867660e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.038701738803995e-09, -5.038651155916077e-09, -5.038392632352804e-09, -5.039221619772970e-09, -5.038675337812861e-09, -5.038675337812861e-09, -6.568696780275683e-06, -6.568575381884143e-06, -6.564170910963083e-06, -6.566305631211875e-06, -6.568525009100951e-06, -6.568525009100951e-06, -3.935046215978326e-03, -3.950704508454970e-03, -4.296115124359111e-03, -4.178450954189313e-03, -3.940773618277234e-03, -3.940773618277234e-03, -3.456570084488945e-01, -3.399785121552398e-01, -1.934058146790359e-03, -5.714156114214981e-01, -3.440990900769123e-01, -3.440990900769123e-01, 9.388693899141675e-01, 8.487556934323122e-01, -9.810862478605930e-01, 1.563354766637549e+00, 9.048012961792269e-01, 9.048012961792269e-01, -1.300857097023950e-06, -1.299421441397010e-06, -1.300708155779436e-06, -1.299591785987336e-06, -1.300121978021622e-06, -1.300121978021622e-06, -6.141828517713451e-05, -5.992147129726350e-05, -6.185418246045428e-05, -6.068031158443927e-05, -5.982557000470098e-05, -5.982557000470098e-05, -5.503282175941114e-03, -5.962775846961952e-03, -6.846970370674519e-03, -4.446502757656289e-03, -4.488012307435817e-03, -4.488012307435817e-03, -7.430871957933811e-01, -2.507933039999621e-01, -8.194169020868984e-01, -7.474278218450160e-05, -7.283580707245761e-01, -7.283580707245761e-01, 1.698294630182987e+00, 1.551138189576126e+00, 5.349050583933344e+00, -1.150847364548929e+00, 2.450249043239538e+00, 2.450249043231819e+00, -4.422678156215503e-02, -9.442250515320383e-03, -1.532265088541063e-02, -2.353831656958934e-02, -1.888636445852199e-02, -1.888636445852198e-02, -7.039141447741699e-02, -1.109198918351368e-02, -8.329310408613490e-03, -5.303939302914946e-03, -6.827216490197822e-03, -6.827216490197839e-03, -4.282594614217219e-03, -1.419463039558504e-01, -9.210946344845221e-02, -4.249860441362948e-02, -6.528725162915280e-02, -6.528725162915275e-02, -1.639955498129935e-02, -7.941976879824909e-01, -9.797416994928571e-01, -4.794301081298100e-02, -1.134074614822103e+00, -1.134074614822109e+00, 4.557686564634317e-01, 4.581767519465289e+00, 3.265364805940356e+00, -1.316356322296467e+00, 3.957038187615602e+00, 3.957038187607711e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
