
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_blyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.672289986257518e+01, -1.672292181569600e+01, -1.672307406989016e+01, -1.672274632397484e+01, -1.672291028398656e+01, -1.672291028398656e+01, -2.668506362455417e+00, -2.668480120023316e+00, -2.667941789862271e+00, -2.669407430883512e+00, -2.668542135265150e+00, -2.668542135265150e+00, -4.393085374417763e-01, -4.389878362818476e-01, -4.315638389747465e-01, -4.357035379123140e-01, -4.345477624160798e-01, -4.345477624160798e-01, -5.731953668827651e-02, -5.969450925689988e-02, -5.262768690510660e-01, -2.337518451204205e-02, -3.734646064844870e-02, -3.734646064844870e-02, -1.050514800397255e-03, -1.105124220582661e-03, -5.915692056266582e-04, -6.099989336525401e-04, -7.648782318274548e-04, -7.648782318274548e-04, -3.930815791637315e+00, -3.930360009251331e+00, -3.930803282773461e+00, -3.930400798339941e+00, -3.930580164576334e+00, -3.930580164576334e+00, -1.549461551479815e+00, -1.558318005569327e+00, -1.548258711540088e+00, -1.556096985274301e+00, -1.554922634662062e+00, -1.554922634662062e+00, -3.623416137019184e-01, -3.899664645325391e-01, -3.302316662279281e-01, -3.377142073502559e-01, -3.683078057179645e-01, -3.683078057179645e-01, 5.401568881880909e-03, -4.926575423503164e-02, 7.103841947726022e-03, -1.351064038779304e+00, -8.697153267365214e-03, -8.697153267365214e-03, -4.716478643326163e-04, -5.964460428605521e-04, -4.570497994996665e-04, 6.189356626562755e-03, -5.498068428881110e-04, -5.498068428881110e-04, -3.518594330594672e-01, -3.521148803405506e-01, -3.520588530171938e-01, -3.519827783283696e-01, -3.520235062712095e-01, -3.520235062712095e-01, -3.394612787113379e-01, -2.966433989546728e-01, -3.101305350835621e-01, -3.224296004671871e-01, -3.162143042203462e-01, -3.162143042203462e-01, -4.132301601105844e-01, -8.557958929685813e-02, -1.219112415484260e-01, -1.860540682128149e-01, -1.526944645184478e-01, -1.526944645184478e-01, -2.663738564587059e-01, -9.418834902644841e-04, 4.804435267770401e-03, -1.756824311413900e-01, 3.865011820888919e-03, 3.865011820888865e-03, -1.477714192797566e-03, -1.606062767235523e-04, -3.360530378470929e-04, 4.674435733451849e-03, -5.090615857313950e-04, -5.090615857313946e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_blyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.008968763650162e+01, -2.008976285584031e+01, -2.009008419034656e+01, -2.008896535597930e+01, -2.008955345646284e+01, -2.008955345646284e+01, -3.176898319420832e+00, -3.176924736857497e+00, -3.177615521983350e+00, -3.177031378085224e+00, -3.177008211687689e+00, -3.177008211687689e+00, -5.600126618567109e-01, -5.593903728493893e-01, -5.456013930143629e-01, -5.503669093474864e-01, -5.492239812122203e-01, -5.492239812122203e-01, -1.243638160993700e-01, -1.252952310870779e-01, -6.620967867121840e-01, -1.000499049502401e-01, -1.082963628065632e-01, -1.082963628065632e-01, -1.397045601893805e-03, -1.469701838870047e-03, -7.613184674005838e-03, -8.115435632402826e-04, -1.017332235780075e-03, -1.017332235780075e-03, -4.880118583554518e+00, -4.882005939476654e+00, -4.880204229174050e+00, -4.881870382416934e+00, -4.881075626745485e+00, -4.881075626745485e+00, -1.723777194580250e+00, -1.737220273704624e+00, -1.713081438461038e+00, -1.724874129268340e+00, -1.736471259338889e+00, -1.736471259338889e+00, -4.815743928175205e-01, -5.335857158491659e-01, -4.406925943710487e-01, -4.628250472669270e-01, -4.905967411610309e-01, -4.905967411610309e-01, -7.040832289137031e-02, -1.409843326833379e-01, -6.219825739414656e-02, -1.773540399788414e+00, -7.885521800704448e-02, -7.885521800704448e-02, -6.276921763112273e-04, -7.935354528592691e-04, -6.082894124268483e-04, -2.746475000708343e-02, -7.315620703883925e-04, -7.315620703883925e-04, -4.899706158994312e-01, -4.846576289380942e-01, -4.864369840469831e-01, -4.879742759913291e-01, -4.871967112087889e-01, -4.871967112087889e-01, -4.752728927546900e-01, -3.959261228393416e-01, -4.154378872295466e-01, -4.370673609567519e-01, -4.257128022218135e-01, -4.257128022218135e-01, -5.628123975445620e-01, -1.752662533876235e-01, -2.040694273047570e-01, -2.642355678090203e-01, -2.298688617462660e-01, -2.298688617462661e-01, -3.601829786944333e-01, -6.831553601579777e-03, -1.589927092155262e-02, -2.497357890897942e-01, -4.356195560665235e-02, -4.356195560665223e-02, -1.966344496552897e-03, -2.139798490978333e-04, -4.474257192194669e-04, -3.892443612526118e-02, -6.774159795305388e-04, -6.774159795305383e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_blyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.693810189887398e-09, -5.693783033181097e-09, -5.693584994655973e-09, -5.693990641097327e-09, -5.693789073063960e-09, -5.693789073063960e-09, -6.743388973435844e-06, -6.743687638587895e-06, -6.749961054313902e-06, -6.734117521492185e-06, -6.743118398848300e-06, -6.743118398848300e-06, -2.130413237611861e-03, -2.125614223456026e-03, -1.980797920338534e-03, -1.948426552968465e-03, -1.966960356671703e-03, -1.966960356671703e-03, 2.464414967895502e-01, 2.265101366606777e-01, -1.381645925390541e-03, 8.376557630465183e-01, 5.182089329349603e-01, 5.182089329349604e-01, -2.583431456518158e-04, -3.079422699429105e-04, 9.562155199505824e+00, -5.369634866416873e-05, -1.188077666504453e-04, -1.188077666509293e-04, -1.612860774787507e-06, -1.614087343064300e-06, -1.612901456213211e-06, -1.613984400978747e-06, -1.613490316184425e-06, -1.613490316184425e-06, -4.506839466471631e-05, -4.427412107459952e-05, -4.501349033347032e-05, -4.431188096080261e-05, -4.465562227381024e-05, -4.465562227381024e-05, -4.145757646265080e-03, -4.323174723637169e-03, -4.958803351466611e-03, -6.016072251897092e-03, -4.097533735614984e-03, -4.097533735614984e-03, 2.847178309230995e+00, 2.708227639167328e-01, 3.522263426768199e+00, -8.620716550429583e-05, 1.729606564137492e+00, 1.729606564137492e+00, -3.166644312222903e-05, -5.644761490996147e-05, -9.560615524857905e-05, 7.946001926767273e+00, -9.429139017566726e-05, -9.429139017552945e-05, -6.217329516928371e-03, -5.681741413371478e-03, -5.844522973151417e-03, -5.997508157497257e-03, -5.918644152438222e-03, -5.918644152438222e-03, -7.072292650504415e-03, -5.080333951420202e-03, -5.546492575824145e-03, -6.005088240169202e-03, -5.779771153319132e-03, -5.779771153319132e-03, -3.658674447913179e-03, 8.315614528524434e-02, 2.251104482697620e-02, -7.629238964404931e-03, 1.250953568747090e-03, 1.250953568747090e-03, -6.043025886946528e-03, 9.175923809474279e+00, 9.853793127091720e+00, -1.104747837785177e-02, 5.109764534246057e+00, 5.109764534246047e+00, -3.929182046518942e-04, -4.287805350659155e-06, -2.066502154365154e-05, 5.837538196762750e+00, -8.943306889925681e-05, -8.943306889971523e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
