
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.698254422835165e+01, -1.698256822062746e+01, -1.698272666279499e+01, -1.698236863879086e+01, -1.698254887538247e+01, -1.698254887538247e+01, -2.857894242552241e+00, -2.857867704447597e+00, -2.857322975228024e+00, -2.858803266496991e+00, -2.857930291907025e+00, -2.857930291907025e+00, -5.959289295545162e-01, -5.957669005475099e-01, -5.927650485225960e-01, -5.969163533370484e-01, -5.960141862211971e-01, -5.960141862211971e-01, -1.768921903968998e-01, -1.786331641843293e-01, -6.863792415259783e-01, -1.435461318536051e-01, -1.703812961024267e-01, -1.703812961024266e-01, -4.890414874102078e-02, -4.897606414550156e-02, -8.554505983693667e-02, -4.438455182734622e-02, -4.493215570355322e-02, -4.493215570355320e-02, -4.130757850172269e+00, -4.130337331776373e+00, -4.130746849170458e+00, -4.130375487619574e+00, -4.130540159353743e+00, -4.130540159353743e+00, -1.737699694028703e+00, -1.746287334905495e+00, -1.737273146644734e+00, -1.744858419264052e+00, -1.742660724792368e+00, -1.742660724792368e+00, -5.061169137277394e-01, -5.291468818740932e-01, -4.727150158130713e-01, -4.740264429398544e-01, -5.121225323121958e-01, -5.121225323121960e-01, -1.112716440653054e-01, -1.824110957172745e-01, -1.065541110650173e-01, -1.522192088976118e+00, -1.229763048101313e-01, -1.229763048101313e-01, -3.998456482913731e-02, -4.277068419110081e-02, -2.807440787663601e-02, -9.083509805266470e-02, -3.412234457351670e-02, -3.412234457351672e-02, -4.863167800606433e-01, -4.883088091547977e-01, -4.876545580793607e-01, -4.870733393494028e-01, -4.873677490429154e-01, -4.873677490429154e-01, -4.723771664269088e-01, -4.415054598813091e-01, -4.513320274185761e-01, -4.601288969446518e-01, -4.556198520776056e-01, -4.556198520776056e-01, -5.542814774447569e-01, -2.231244800871316e-01, -2.587084539941128e-01, -3.184677504754938e-01, -2.868601522215576e-01, -2.868601522215577e-01, -4.083347895639679e-01, -8.595093149167486e-02, -8.928954282661995e-02, -3.019563962783163e-01, -9.763566838323427e-02, -9.763566838323427e-02, -5.536720816364795e-02, -2.456191835539234e-02, -3.224361741437053e-02, -9.513705620403495e-02, -3.207990240605502e-02, -3.207990240605500e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.053865530149154e+01, -2.053863079242904e+01, -2.053874182126099e+01, -2.053869391473847e+01, -2.053900547324553e+01, -2.053907386541922e+01, -2.053802508168577e+01, -2.053782834380242e+01, -2.053870480760562e+01, -2.053831802101912e+01, -2.053870480760562e+01, -2.053831802101912e+01, -3.368031718185808e+00, -3.368099670977877e+00, -3.368059397669859e+00, -3.368128373920203e+00, -3.368741694439985e+00, -3.368912375055542e+00, -3.368097713056186e+00, -3.368262430793207e+00, -3.367478973819738e+00, -3.368878968163014e+00, -3.367478973819738e+00, -3.368878968163014e+00, -6.850448432611589e-01, -6.867798296509846e-01, -6.840283854658774e-01, -6.861337211362442e-01, -6.668300814127461e-01, -6.647732543484705e-01, -6.706452794898842e-01, -6.712967705191162e-01, -6.824377624396301e-01, -6.631244309885285e-01, -6.824377624396301e-01, -6.631244309885285e-01, -2.007979710563096e-01, -2.016600316396745e-01, -2.024005422630757e-01, -2.035969432708980e-01, -7.840125172087646e-01, -8.032903503838885e-01, -1.671273696656979e-01, -1.677015085540999e-01, -1.727376246687329e-01, -1.768167546544726e-01, -1.727376246687329e-01, -1.768167546544726e-01, -1.512021791299619e-02, -1.521221429704577e-02, -1.548047810835169e-02, -1.557083618750224e-02, -4.722651662879677e-02, -4.805771159480923e-02, -1.143027898475631e-02, -1.144541437633180e-02, -1.300798088018978e-02, -1.086450771005956e-02, -1.300798088018975e-02, -1.086450771005955e-02, -5.100753244814821e+00, -5.099552881870515e+00, -5.102691569698418e+00, -5.101429211990186e+00, -5.100860301828731e+00, -5.099618989525156e+00, -5.102526340744429e+00, -5.101320547161786e+00, -5.101744789924972e+00, -5.100495680458101e+00, -5.101744789924972e+00, -5.100495680458101e+00, -1.874606949161792e+00, -1.874527442247281e+00, -1.888984268111629e+00, -1.888548252363677e+00, -1.861193159963188e+00, -1.863968566210756e+00, -1.873580401619118e+00, -1.876524821016490e+00, -1.892037517913490e+00, -1.884579909646110e+00, -1.892037517913490e+00, -1.884579909646110e+00, -6.128794426972296e-01, -6.117842675027122e-01, -6.755594532275505e-01, -6.759558050660373e-01, -5.608586227755175e-01, -5.748216150390111e-01, -5.930712732635950e-01, -6.065908445044434e-01, -6.337514600397550e-01, -6.115218918286510e-01, -6.337514600397550e-01, -6.115218918286510e-01, -1.306018448071108e-01, -1.304108524074650e-01, -2.145764473260232e-01, -2.146802321421966e-01, -1.196662110071870e-01, -1.215239402838718e-01, -1.948518068448206e+00, -1.947774109448991e+00, -1.437280177604766e-01, -1.398183256324982e-01, -1.437280177604766e-01, -1.398183256324982e-01, -9.606129234855027e-03, -9.838715618326091e-03, -1.101794119076752e-02, -1.114745313051119e-02, -7.765199402236776e-03, -7.717234159647875e-03, -7.728981211807677e-02, -7.787602802106022e-02, -9.102586208271762e-03, -9.484701513107974e-03, -9.102586208271783e-03, -9.484701513107974e-03, -6.318884865496355e-01, -6.337208782455034e-01, -6.236442530174129e-01, -6.254779268320468e-01, -6.264020580918835e-01, -6.282506649886846e-01, -6.288035538430286e-01, -6.306240284358123e-01, -6.275897864271205e-01, -6.294241393504283e-01, -6.275897864271205e-01, -6.294241393504283e-01, -6.174451801422581e-01, -6.189167902969638e-01, -5.138104829557775e-01, -5.151515840681015e-01, -5.396088366369763e-01, -5.412220693025069e-01, -5.681379390725404e-01, -5.695452639488223e-01, -5.533254630080298e-01, -5.547301950793141e-01, -5.533254630080298e-01, -5.547301950793141e-01, -7.053858120225242e-01, -7.065038691335339e-01, -2.560298149937129e-01, -2.561588521034440e-01, -2.930937976246838e-01, -2.935105087263112e-01, -3.712304091554795e-01, -3.722795153744136e-01, -3.279062073981895e-01, -3.277281260403309e-01, -3.279062073981895e-01, -3.277281260403309e-01, -4.753215534149216e-01, -4.772010329747144e-01, -4.618627046206328e-02, -4.627865612179009e-02, -6.170666743561423e-02, -6.262093380221921e-02, -3.585284020495951e-01, -3.614516419327378e-01, -9.841183573395547e-02, -9.771498520000156e-02, -9.841183573395544e-02, -9.771498520000155e-02, -1.895974468791543e-02, -1.895939235150378e-02, -5.135098595186352e-03, -4.714594730251703e-03, -7.504546654644586e-03, -7.508226208513620e-03, -9.182491589033953e-02, -9.255548587738885e-02, -8.068943163673939e-03, -9.060877025983852e-03, -8.068943163673950e-03, -9.060877025983837e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3lyp_mcm2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3lyp_mcm2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.056045969584567e-08, 1.378906904407968e-11, -1.056051932973420e-08, -1.056040087813162e-08, 1.378887247764645e-11, -1.056047603134376e-08, -1.056007995409052e-08, 1.378793795234881e-11, -1.056005644882095e-08, -1.056075441233536e-08, 1.379086395887459e-11, -1.056090723808874e-08, -1.056043494394348e-08, 1.378933948940144e-11, -1.056046820470552e-08, -1.056043494394348e-08, 1.378933948940144e-11, -1.056046820470552e-08, -1.371467573146440e-05, 1.792578550264827e-07, -1.371985118903357e-05, -1.371507360398328e-05, 1.792557940205446e-07, -1.372063163667912e-05, -1.372848256487793e-05, 1.791847589918804e-07, -1.373181597235946e-05, -1.369631071204407e-05, 1.791269593222256e-07, -1.370056019157905e-05, -1.372102914199488e-05, 1.792337110920460e-07, -1.371227914438118e-05, -1.372102914199488e-05, 1.792337110920460e-07, -1.371227914438118e-05, -7.761977456600977e-03, 1.078265178922811e-03, -7.827848176753681e-03, -7.754570714164849e-03, 1.084504603184379e-03, -7.835326972820571e-03, -7.796222533180170e-03, 1.244278802176978e-03, -7.680749375100627e-03, -7.515832906775893e-03, 1.192120393476517e-03, -7.554810240860115e-03, -8.139934356503958e-03, 1.296859623360221e-03, -6.912734079106481e-03, -8.139934356503958e-03, 1.296859623360221e-03, -6.912734079106481e-03, -7.572017439677775e-01, 5.664730998124267e-01, -7.510531875597365e-01, -7.501583118789890e-01, 5.351384755962879e-01, -7.389584671068433e-01, -4.486867229869469e-03, 5.014542024562621e-04, -4.401582316418117e-03, -1.290267332853029e+00, 1.578866684227120e+00, -1.277014010759376e+00, -1.045862031454888e+00, 2.244095493688817e+00, -3.691391223989164e+00, -1.045862031454887e+00, 2.244095493688818e+00, -3.691391223989168e+00, -1.621248459739883e+04, 1.047534658276996e-07, -1.358094188371175e+04, -1.438753367175959e+04, 4.298387729813406e-07, -1.179334491561957e+04, -8.345604224994726e+01, 1.732170897386146e+01, -7.166752011492072e+01, -6.834919190567033e+04, 3.897369290591564e-17, -7.118895349965594e+04, -2.249195000936139e+04, 1.008834490372148e-12, -1.478461423678552e+05, -2.249195000936141e+04, 1.008834490372148e-12, -1.478461423678551e+05, -3.155248807748073e-06, 2.104371697828580e-08, -3.157899809112290e-06, -3.157596332053296e-06, 2.102331740013072e-08, -3.160166689381550e-06, -3.155347203657478e-06, 2.104270311722916e-08, -3.157952191893257e-06, -3.157358450565725e-06, 2.102468898140960e-08, -3.160015177645842e-06, -3.156476596971815e-06, 2.103341570858954e-08, -3.159041451448178e-06, -3.156476596971815e-06, 2.103341570858954e-08, -3.159041451448178e-06, -1.016904480317491e-04, 3.866903276007069e-06, -1.017043037305892e-04, -9.965698297928858e-05, 3.720379024506162e-06, -9.972256204132394e-05, -1.017459721246609e-04, 3.978678517370875e-06, -1.018911586687055e-04, -9.998418288288423e-05, 3.844434714250445e-06, -1.000876535254550e-04, -1.005710229220239e-04, 3.736743037724757e-06, -1.004859040390533e-04, -1.005710229220239e-04, 3.736743037724757e-06, -1.004859040390533e-04, -1.602200066718626e-02, 2.123160471168221e-03, -1.615442618941923e-02, -1.476898590148895e-02, 1.397090618435781e-03, -1.480180503563336e-02, -2.189597783162754e-02, 3.196691834460565e-03, -2.031453373786363e-02, -2.413657632827033e-02, 2.625512255739729e-03, -2.176418855297158e-02, -1.460051281104867e-02, 2.045675715911733e-03, -1.672733720750421e-02, -1.460051281104867e-02, 2.045675715911733e-03, -1.672733720750421e-02, -2.793017326997531e+00, 5.053736573517685e+00, -2.832176181632879e+00, -5.092809813713639e-01, 5.584827778920495e-01, -5.102653673028519e-01, -3.780197634528552e+00, 6.284400829759334e+00, -3.635371724477075e+00, -1.902664997166968e-04, 4.287284410615389e-06, -1.906016246745145e-04, -2.102955197881943e+00, 3.167693317268554e+00, -2.436487783938384e+00, -2.102955197881943e+00, 3.167693317268554e+00, -2.436487783938384e+00, -1.720653728264020e+05, 5.107592039596615e-24, -1.479056200651017e+05, -8.054100064424604e+04, 1.157613746607373e-17, -7.542625125036195e+04, -3.028101820208339e+05, 5.328932708163711e-25, -2.645397155298787e+05, -1.612710868337212e+01, 1.417548949005110e+01, -1.561873356964267e+01, -2.342891751106433e+05, 9.053885098317676e-20, -9.355994912992399e+04, -2.342891751106430e+05, 9.053885098317673e-20, -9.355994912992395e+04, -2.223666533881096e-02, 2.072315870516483e-03, -2.200657535025450e-02, -2.078037100593742e-02, 2.133183963209891e-03, -2.058086763680222e-02, -2.121275506777697e-02, 2.111531651123754e-03, -2.100703862874323e-02, -2.163129173033757e-02, 2.093882239803916e-03, -2.141011676112713e-02, -2.141481910884342e-02, 2.102694622041353e-03, -2.120147135402735e-02, -2.141481910884342e-02, 2.102694622041353e-03, -2.120147135402735e-02, -2.566224806539679e-02, 2.379064666329403e-03, -2.540145950103330e-02, -2.636841487754062e-02, 5.085327230780305e-03, -2.620641320745308e-02, -2.526606870194591e-02, 4.049180102488750e-03, -2.509578827639680e-02, -2.469488562186277e-02, 3.258159517183597e-03, -2.449027252529873e-02, -2.497061921143865e-02, 3.636733849029278e-03, -2.476137197851948e-02, -2.497061921143865e-02, 3.636733849029278e-03, -2.476137197851948e-02, -1.213020293100754e-02, 1.098916845079012e-03, -1.213444718942980e-02, -2.740766310977650e-01, 2.141437861571686e-01, -2.746606249620311e-01, -1.794818390840361e-01, 9.679513143558556e-02, -1.800326335700089e-01, -9.671316205648192e-02, 2.716711600076019e-02, -9.583756857855794e-02, -1.335899358732921e-01, 5.182254434119419e-02, -1.342523389120446e-01, -1.335899358732921e-01, 5.182254434119420e-02, -1.342523389120447e-01, -3.607149174992402e-02, 7.631683003320318e-03, -3.578512089753656e-02, -8.676931497743030e+01, 1.664251244956272e+01, -8.513819103663339e+01, -3.173632009968216e+01, 1.770020535307826e+01, -2.932874127339111e+01, -1.273818650672804e-01, 3.230380512668551e-02, -1.241947804504128e-01, -7.733264934612666e+00, 9.139724773999687e+00, -7.835281640418849e+00, -7.733264934612663e+00, 9.139724773999687e+00, -7.835281640418858e+00, -5.440258950249963e+03, 3.219606710227512e-04, -4.942164334196554e+03, -5.086760424202866e+06, 2.685092900561224e-85, -5.919083505594023e+06, -5.707859452203406e+05, 1.566064746194416e-36, -4.861511904063080e+05, -9.647761109161156e+00, 1.039032273087003e+01, -9.277975410983387e+00, -3.354223974393582e+05, 7.705261269396639e-22, -1.214642679410058e+05, -3.354223974393589e+05, 7.705261269396236e-22, -1.214642679410062e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
