
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.019710904235322e+01, -2.019714333561181e+01, -2.019735519911056e+01, -2.019679246461989e+01, -2.019712663532415e+01, -2.019712663532415e+01, -3.089160808517486e+00, -3.089150180333858e+00, -3.088997206989361e+00, -3.089974791338449e+00, -3.089169676207336e+00, -3.089169676207336e+00, -4.075470252003938e-01, -4.070421444588062e-01, -3.950798678727483e-01, -3.995396523730004e-01, -4.073620681872316e-01, -4.073620681872316e-01, -3.748216233932904e-02, -3.901740106249395e-02, -5.256863916923649e-01, -1.543584283095628e-02, -3.794617208955563e-02, -3.794617208955563e-02, -4.836384019664498e-06, -5.581331458484647e-06, -4.451385895734438e-04, -5.112855039318168e-07, -5.415567862983768e-06, -5.415567862983768e-06, -4.680464552059596e+00, -4.680679556279332e+00, -4.680490836478904e+00, -4.680657929185388e+00, -4.680568370475354e+00, -4.680568370475354e+00, -1.696518278139534e+00, -1.707491569798832e+00, -1.695157275552042e+00, -1.703683427775667e+00, -1.705808606716837e+00, -1.705808606716837e+00, -3.301489686129482e-01, -3.778413912957352e-01, -3.047189870097461e-01, -3.287134271194796e-01, -3.497229346146991e-01, -3.497229346146991e-01, -6.130390604653720e-03, -3.486047471232571e-02, -5.972356510361522e-03, -1.556436711573761e+00, -9.724648459116813e-03, -9.724648459116813e-03, -4.590103821788418e-07, -6.872607311762685e-07, -2.929103261898977e-07, -1.368865059308613e-03, -5.220589967309055e-07, -5.220589967309052e-07, -3.532221796738889e-01, -3.485105669825924e-01, -3.501517619715395e-01, -3.514548126917953e-01, -3.507989193523357e-01, -3.507989193523357e-01, -3.373080912965419e-01, -2.630343222053081e-01, -2.831114505131516e-01, -3.028147207302334e-01, -2.926615714125602e-01, -2.926615714125602e-01, -4.039764735879169e-01, -5.931180226086449e-02, -8.660556750257435e-02, -1.431603639947955e-01, -1.122569864525245e-01, -1.122569864525244e-01, -2.222731230811921e-01, -3.379677944455236e-04, -9.332438059945391e-04, -1.323949628374895e-01, -3.347496898057275e-03, -3.347496898057283e-03, -7.769687881683780e-06, -1.392436552833912e-08, -9.592243793192059e-08, -2.982335266992542e-03, -3.212059733131683e-07, -3.212059733041469e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.543188047583633e+01, -2.543196159158012e+01, -2.543234195894679e+01, -2.543101328981212e+01, -2.543192309894982e+01, -2.543192309894982e+01, -3.923821619716017e+00, -3.923857986060071e+00, -3.925027218084229e+00, -3.923886963561505e+00, -3.923857901479785e+00, -3.923857901479785e+00, -5.832206170047388e-01, -5.819539649450243e-01, -5.469368945381570e-01, -5.533366155592175e-01, -5.827614113156550e-01, -5.827614113156550e-01, -8.432411503792756e-02, -8.747992661455170e-02, -7.466443235267463e-01, -3.547890717514254e-02, -8.530033369859220e-02, -8.530033369859220e-02, -1.084465904317817e-05, -1.261001366397860e-05, -1.164188981836607e-03, -1.051782765306984e-06, -1.226539003880840e-05, -1.226539003880840e-05, -6.099890556717178e+00, -6.102188251320172e+00, -6.100126456018676e+00, -6.101913041225623e+00, -6.101067680680376e+00, -6.101067680680376e+00, -2.002397291614823e+00, -2.021470304397057e+00, -1.991235911993452e+00, -2.006107619285187e+00, -2.029867529341461e+00, -2.029867529341461e+00, -5.042233066125180e-01, -5.659675098944221e-01, -4.694990359825361e-01, -4.999278978408836e-01, -5.313136151344999e-01, -5.313136151344999e-01, -1.417921862629760e-02, -6.609960667015652e-02, -1.436563502740295e-02, -2.146598939225728e+00, -2.320952250249554e-02, -2.320952250249554e-02, -9.442693663100473e-07, -1.423188003165113e-06, -6.225559751187346e-07, -3.690793308284094e-03, -1.090925614106967e-06, -1.090925614105229e-06, -5.258491118947226e-01, -5.241391478671620e-01, -5.249058487226793e-01, -5.253836261471423e-01, -5.251571719210559e-01, -5.251571719210559e-01, -5.024162799260976e-01, -4.089958495938329e-01, -4.399211001092884e-01, -4.665797952094790e-01, -4.533376355838342e-01, -4.533376355838342e-01, -6.028255461111492e-01, -1.084890900771021e-01, -1.575427901666554e-01, -2.451954952790371e-01, -1.995099610299398e-01, -1.995099610299397e-01, -3.540929213583376e-01, -8.475007895193763e-04, -2.423961883137462e-03, -2.279768254433243e-01, -8.992635820067475e-03, -8.992635820067527e-03, -1.733626122128463e-05, -2.804240305898325e-08, -1.953036825129043e-07, -8.461968436767539e-03, -6.746244915848488e-07, -6.746244909671580e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.025380509027901e-09, -4.025345419626713e-09, -4.025155351946992e-09, -4.025730619630344e-09, -4.025362284338592e-09, -4.025362284338592e-09, -4.593105030251446e-06, -4.592977160866884e-06, -4.588743230927814e-06, -4.592392694770311e-06, -4.592966402718152e-06, -4.592966402718152e-06, -9.233115612909081e-04, -9.402754455795066e-04, -1.406720778366663e-03, -1.365315113601331e-03, -9.294220819941427e-04, -9.294220819941427e-04, 1.807099943312597e-01, 1.885197911705316e-01, -4.733128915775085e-04, 1.202639542678828e-01, 1.834244742363761e-01, 1.834244742363761e-01, 6.182517177618892e-02, 6.659461851849384e-02, 1.209324809798837e-01, 1.160863367237646e-02, 6.941198491729328e-02, 6.941198491729328e-02, -9.255080537776425e-07, -9.234417723780692e-07, -9.252989753407976e-07, -9.236924701555005e-07, -9.244487140411794e-07, -9.244487140411794e-07, -4.116568703620721e-05, -4.013067532897385e-05, -4.154885215563417e-05, -4.073527699486979e-05, -3.995679998626290e-05, -3.995679998626290e-05, 1.275488623993638e-03, 2.863011845306069e-03, 1.733550622911641e-03, 3.806440491807445e-03, 1.235302641502734e-03, 1.235302641502734e-03, 7.548771209285322e-02, 1.748390764712195e-02, 1.094558129767516e-01, -8.896279200638064e-06, 1.313554954857368e-01, 1.313554954857368e-01, 1.196384288883078e-02, 1.489929792141254e-02, 4.510223394077216e-02, 1.655041615580778e-01, 2.301479483571729e-02, 2.301479483628615e-02, 4.920163971448651e-03, 4.033905008595818e-03, 4.330766374843382e-03, 4.575524924809800e-03, 4.451420375717370e-03, 4.451420375717368e-03, 5.948949496419473e-03, 1.006030925701775e-03, 2.278478835137043e-03, 3.537208276677389e-03, 2.905573103399068e-03, 2.905573103399070e-03, 2.132911833351039e-03, 1.287749676368825e-02, 1.785870459493052e-02, 1.632327085935831e-02, 1.896671374135808e-02, 1.896671374135805e-02, 2.627317215170906e-03, 8.492597479224021e-02, 1.147737712306116e-01, 3.366761239277936e-02, 2.066531412902091e-01, 2.066531412902116e-01, 5.107601330766801e-02, 3.744519430468124e-03, 9.100673024102141e-03, 2.908186731851637e-01, 3.113535860256774e-02, 3.113535860268852e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
