
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_camy_pbeh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.581256380356703e-01, -2.581263206354655e-01, -2.581278046257505e-01, -2.581176853395347e-01, -2.581232064833892e-01, -2.581232064833892e-01, -3.074409504491444e-01, -3.074410606300575e-01, -3.074442161647039e-01, -3.074411326976356e-01, -3.074413405743641e-01, -3.074413405743641e-01, -2.467868634122507e-01, -2.468212435587727e-01, -2.486165663210136e-01, -2.489852397461725e-01, -2.491485005277021e-01, -2.491485005277021e-01, -1.469873734403863e-01, -1.474456012358424e-01, -2.558463649845837e-01, -1.308154345468539e-01, -1.409319615622952e-01, -1.409319615622952e-01, -8.082501332871628e-03, -8.510571678055117e-03, -4.578497686144570e-02, -4.662834428427329e-03, -6.506420965923771e-03, -6.506420965923771e-03, -3.156627279870167e-01, -3.158110554994513e-01, -3.156688143440318e-01, -3.157997372002373e-01, -3.157380458061249e-01, -3.157380458061249e-01, -3.077442687866670e-01, -3.073493179330234e-01, -3.090648966567343e-01, -3.086922741397266e-01, -3.069104741709463e-01, -3.069104741709463e-01, -2.357332715277753e-01, -2.465509872680551e-01, -2.300900214280057e-01, -2.362414725659206e-01, -2.369720675440483e-01, -2.369720675440484e-01, -1.049956549176633e-01, -1.555145170826695e-01, -9.895743890872591e-02, -3.098063630144815e-01, -1.150954133690215e-01, -1.150954133690215e-01, -3.600195184351371e-03, -4.558190819491326e-03, -3.490516889078593e-03, -7.100916736777954e-02, -4.384376927294520e-03, -4.384376927294525e-03, -2.438031467909815e-01, -2.405193373773230e-01, -2.415614353297841e-01, -2.425120501230279e-01, -2.420261005786947e-01, -2.420261005786947e-01, -2.426336134783201e-01, -2.242835139824391e-01, -2.263716119533841e-01, -2.305298087289501e-01, -2.281065494261728e-01, -2.281065494261728e-01, -2.495565992576472e-01, -1.728812190316813e-01, -1.830690427828347e-01, -1.970759626334498e-01, -1.893117586847840e-01, -1.893117586847840e-01, -2.180399711933945e-01, -4.388537024599519e-02, -5.871656191812377e-02, -1.926432233039485e-01, -8.636790007579806e-02, -8.636790007579810e-02, -1.138459677346349e-02, -1.218605749250271e-03, -2.562510960262266e-03, -8.213581997636350e-02, -4.026472958059185e-03, -4.026472958059177e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_camy_pbeh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.123734019696225e-01, -3.123740653567807e-01, -3.123799079329826e-01, -3.123791568348454e-01, -3.123931332114485e-01, -3.123983486335526e-01, -3.123150604101013e-01, -3.123042690559886e-01, -3.123733408670253e-01, -3.123389138655169e-01, -3.123733408670253e-01, -3.123389138655169e-01, -3.119656116078552e-01, -3.120372319465188e-01, -3.119804420800960e-01, -3.120567440792011e-01, -3.123831023265953e-01, -3.124486105144911e-01, -3.116880751478791e-01, -3.117635759375294e-01, -3.119668227876580e-01, -3.120771999157494e-01, -3.119668227876580e-01, -3.120771999157494e-01, -2.457681695704004e-01, -2.467915247465013e-01, -2.450632106930839e-01, -2.463012340949809e-01, -2.312341868604297e-01, -2.302120360969900e-01, -2.314425254477578e-01, -2.317986542609281e-01, -2.389811657329366e-01, -2.295538202832285e-01, -2.389811657329366e-01, -2.295538202832285e-01, -1.398804094741281e-01, -1.389510536986770e-01, -1.412680322254307e-01, -1.403649348143924e-01, -2.556901334376995e-01, -2.593013714176202e-01, -1.262165422647223e-01, -1.265308973200834e-01, -1.239610282597258e-01, -1.271561644168822e-01, -1.239610282597257e-01, -1.271561644168823e-01, -1.040802196000279e-02, -1.105682730518978e-02, -1.090355426918678e-02, -1.167641406750624e-02, -5.737034379409255e-02, -6.016168130414963e-02, -6.265186397822125e-03, -6.160989452805715e-03, -9.288959533910981e-03, -5.290643063219739e-03, -9.288959533910977e-03, -5.290643063219737e-03, -3.646687868764739e-01, -3.646856194689150e-01, -3.652074951975579e-01, -3.652133516010274e-01, -3.646942976126816e-01, -3.647042199935621e-01, -3.651617357842292e-01, -3.651783390332555e-01, -3.649454547465852e-01, -3.649523788127992e-01, -3.649454547465852e-01, -3.649523788127992e-01, -2.450179903992345e-01, -2.450205716073396e-01, -2.462823166330038e-01, -2.462931806409668e-01, -2.423687118141857e-01, -2.423366126573591e-01, -2.433616834214798e-01, -2.433622843638325e-01, -2.473101560167838e-01, -2.470412323527028e-01, -2.473101560167838e-01, -2.470412323527028e-01, -2.624783947294734e-01, -2.626943172371324e-01, -2.818986151495914e-01, -2.820728552902785e-01, -2.545926874024986e-01, -2.543278414969055e-01, -2.729157193356200e-01, -2.704457860636149e-01, -2.648989300644623e-01, -2.672854369003779e-01, -2.648989300644624e-01, -2.672854369003779e-01, -1.151021321936049e-01, -1.151253982603328e-01, -1.421121216370927e-01, -1.420458586297517e-01, -1.092965188306544e-01, -1.116222655329807e-01, -3.558624590245321e-01, -3.559379280319108e-01, -1.197049121951349e-01, -1.154301254247079e-01, -1.197049121951349e-01, -1.154301254247079e-01, -4.701303771752556e-03, -4.885753307641162e-03, -6.028211749369007e-03, -6.119461270001986e-03, -4.507076935056343e-03, -4.772400341440041e-03, -8.561686481042674e-02, -8.617189524807563e-02, -4.604270236674074e-03, -6.319420128181310e-03, -4.604270236674081e-03, -6.319420128181319e-03, -2.753747575285990e-01, -2.751538078389655e-01, -2.755336720028933e-01, -2.753819204213696e-01, -2.757779570018928e-01, -2.756110148699633e-01, -2.757599161476667e-01, -2.755562861473843e-01, -2.757979755867127e-01, -2.756121477387683e-01, -2.757979755867127e-01, -2.756121477387683e-01, -2.724049320546576e-01, -2.721693013973904e-01, -2.333056176610253e-01, -2.333744984504596e-01, -2.492026762115139e-01, -2.493223839309378e-01, -2.635063258356147e-01, -2.634190460318305e-01, -2.567754834691315e-01, -2.567044076190936e-01, -2.567754834691315e-01, -2.567044076190936e-01, -2.853438699428078e-01, -2.855461037333622e-01, -1.538113113764063e-01, -1.536107985460498e-01, -1.679804479312526e-01, -1.676512456318687e-01, -2.088220620369631e-01, -2.088269922157230e-01, -1.862626593052379e-01, -1.862957141197667e-01, -1.862626593052379e-01, -1.862957141197667e-01, -2.279340381274365e-01, -2.281148242199914e-01, -5.651471418244512e-02, -5.685683264164555e-02, -7.286401112047818e-02, -7.472658308297471e-02, -2.149764622128940e-01, -2.151283842455677e-01, -9.789156189665026e-02, -9.833920397469238e-02, -9.789156189665028e-02, -9.833920397469224e-02, -1.486092059414423e-02, -1.539464801304027e-02, -1.622858958359628e-03, -1.626522307981065e-03, -3.301424570335942e-03, -3.511154248719368e-03, -9.449772402631368e-02, -9.542514043101934e-02, -4.360502856523702e-03, -5.793280642894358e-03, -4.360502856523696e-03, -5.793280642894349e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_camy_pbeh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_camy_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.262121817446036e-10, 3.855567579455844e-10, 2.262142087477896e-10, 2.262442938919164e-10, 3.855637563905792e-10, 2.262384780316839e-10, 2.263032125045477e-10, 3.855734091993355e-10, 2.263313000870682e-10, 2.259292319263424e-10, 3.854697494807899e-10, 2.258685600644932e-10, 2.262163132246467e-10, 3.855271085313426e-10, 2.260339425877840e-10, 2.262163132246467e-10, 3.855271085313426e-10, 2.260339425877840e-10, -1.043315819489718e-06, 2.158879157656427e-06, -1.042919381786284e-06, -1.042993428049851e-06, 2.159323527660124e-06, -1.042582492996296e-06, -1.035378522879749e-06, 2.169371669283230e-06, -1.034632039003725e-06, -1.047866828089982e-06, 2.149943255801801e-06, -1.047134009309862e-06, -1.045144021029568e-06, 2.159156568071321e-06, -1.040052425004197e-06, -1.045144021029568e-06, 2.159156568071321e-06, -1.040052425004197e-06, -3.443223754084707e-03, 3.586683876242116e-03, -3.423251329988476e-03, -3.467736777944625e-03, 3.559577090514688e-03, -3.444005538569235e-03, -3.928935958180101e-03, 2.876045381924161e-03, -3.931652125498489e-03, -3.791045663687745e-03, 2.810968523930000e-03, -3.792429652049382e-03, -3.712808662529744e-03, 2.852692094259074e-03, -3.608575084607029e-03, -3.712808662529744e-03, 2.852692094259074e-03, -3.608575084607029e-03, -7.970105086685659e-01, 3.108902575321890e-01, -7.344295294450751e-01, -7.913450145222773e-01, 3.280826843588528e-01, -7.152018178709864e-01, -1.810952246624948e-03, 1.940414170439823e-03, -1.534968566479485e-03, -1.187308730844509e+00, 2.258949661124237e-01, -1.144366140174623e+00, -7.205326877017465e-01, 1.882246441728870e-01, -1.796841938440036e+00, -7.205326877017465e-01, 1.882246441728873e-01, -1.796841938440034e+00, -3.916627543500164e+00, 8.471332723898200e-03, -3.877313426602885e+00, -4.126216061267747e+00, 9.964515393423459e-03, -4.105065423746213e+00, -2.257991320557227e+00, 5.126941006152715e-02, -2.269426905509355e+00, -3.589884621292029e+00, 3.008683449168684e-03, -3.492393060737358e+00, -3.912117650935131e+00, 4.414566270491809e-03, -9.929688998733340e+00, -3.912117650934690e+00, 4.414566270088269e-03, -9.929688998732916e+00, 1.134337709538832e-07, 5.666948009101149e-07, 1.131181357022771e-07, 1.173543716997559e-07, 5.704413223836728e-07, 1.169710740496023e-07, 1.136147276182334e-07, 5.668443577206054e-07, 1.132555768522935e-07, 1.170248409857673e-07, 5.701514261968389e-07, 1.167074469154497e-07, 1.154392214052607e-07, 5.686004611431787e-07, 1.150646686372754e-07, 1.154392214052607e-07, 5.686004611431787e-07, 1.150646686372754e-07, -2.325377742537717e-05, 1.221811741084532e-05, -2.325994027956551e-05, -2.259448328993094e-05, 1.218856108878283e-05, -2.262396009580744e-05, -2.343160032333461e-05, 1.161795009824474e-05, -2.349031939472865e-05, -2.289050513201707e-05, 1.159619612758267e-05, -2.292480290829963e-05, -2.274458546157776e-05, 1.250231835492394e-05, -2.278381680436829e-05, -2.274458546157776e-05, 1.250231835492394e-05, -2.278381680436829e-05, -4.879012402614117e-03, 1.180452397706796e-02, -5.014421661757524e-03, -8.175847350098357e-05, 1.489938286408802e-02, -5.838711937715662e-05, -8.825653349023799e-03, 1.535577972946644e-02, -6.480278697379083e-03, -3.146900534053837e-03, 2.278859644535717e-02, -1.085880434540238e-03, -3.203284378630398e-03, 1.179162458306085e-02, -5.585181680764586e-03, -3.203284378630397e-03, 1.179162458306085e-02, -5.585181680764585e-03, -1.452994788076820e+00, 1.261488607621168e-01, -1.476585846426775e+00, -5.123494519153977e-01, 1.139695105238702e-01, -5.064815859604840e-01, -1.658975599433829e+00, 1.279112469154852e-01, -1.601738308220108e+00, 3.281822530835868e-05, 1.207887057881010e-04, 3.276536081663810e-05, -1.513499872709887e+00, 2.409472748596690e-01, -1.813899284435562e+00, -1.513499872709887e+00, 2.409472748596690e-01, -1.813899284435562e+00, -5.040185963731202e+00, 2.933546798259037e-03, -4.362258950274536e+00, -4.339419520820740e+00, 3.699144102256803e-03, -4.006342135607732e+00, -2.470999469283939e+01, 3.685108437354808e-02, -2.749034679444296e+01, -2.536054048619890e+00, 1.250822448857004e-01, -2.440906788600657e+00, -1.228991461442915e+01, 1.410360645889085e-02, -1.207171932294971e+01, -1.228991461442583e+01, 1.410360646869916e-02, -1.207171932294641e+01, 1.928272266958539e-03, 2.514346072918196e-02, 2.134064886720929e-03, -4.987025830146905e-04, 2.157065992117518e-02, -2.870286480244743e-04, 2.535449047697293e-04, 2.270457728491302e-02, 4.649895633762838e-04, 9.533266099963581e-04, 2.373865089872573e-02, 1.160438140656623e-03, 5.939590231380347e-04, 2.321019190891285e-02, 8.033386852880665e-04, 5.939590231380347e-04, 2.321019190891285e-02, 8.033386852880665e-04, 2.981663231505258e-03, 2.977269840520045e-02, 3.172959759515120e-03, -1.379481264172270e-02, 1.592277215307748e-02, -1.344970256829742e-02, -1.006842143356192e-02, 1.838749842245184e-02, -9.735924878820894e-03, -5.805356443035670e-03, 2.169730037966074e-02, -5.545156085035993e-03, -8.037984982944607e-03, 1.995497716545398e-02, -7.748747760189122e-03, -8.037984982944607e-03, 1.995497716545398e-02, -7.748747760189122e-03, -1.325901698210809e-04, 1.183264719377924e-02, -7.710732085781415e-05, -2.752963224708265e-01, 8.498631964250428e-02, -2.715315754159509e-01, -1.687575778857492e-01, 7.821972418059023e-02, -1.648985681385455e-01, -6.368710851225763e-02, 6.964082434152352e-02, -6.167007950479490e-02, -1.083034052715044e-01, 7.796350422599263e-02, -1.091537559218692e-01, -1.083034052715045e-01, 7.796350422599266e-02, -1.091537559218694e-01, -2.004332829905613e-02, 2.285950305464996e-02, -1.930084023173206e-02, -2.068264214702046e+00, 4.213028450134424e-02, -2.070582575110931e+00, -2.016569549571202e+00, 6.458066222247318e-02, -2.059204207709826e+00, -7.410909807795793e-02, 1.099497136873529e-01, -6.703581948787180e-02, -2.448308258903928e+00, 2.182010199987041e-01, -2.868019572039493e+00, -2.448308258903932e+00, 2.182010199987039e-01, -2.868019572039491e+00, -3.101796662055485e+00, 1.056259116938041e-02, -3.166594170544703e+00, -1.551025800230092e+01, 4.011531506685853e-03, -2.747560697889199e+01, -9.571393735364234e+00, 5.020763908060611e-03, -1.018954933818476e+01, -2.759636367717620e+00, 2.002688123716920e-01, -2.697193299529879e+00, -2.534370376469493e+01, 1.800188742308661e-02, -1.253031782608207e+01, -2.534370376469129e+01, 1.800188743452388e-02, -1.253031782607843e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
