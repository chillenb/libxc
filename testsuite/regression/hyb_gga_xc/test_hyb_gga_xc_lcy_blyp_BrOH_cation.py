
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lcy_blyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.072461234754817e+01, -2.072464011764736e+01, -2.072483133836996e+01, -2.072441677842493e+01, -2.072462436659213e+01, -2.072462436659213e+01, -3.175498912935517e+00, -3.175468566270915e+00, -3.174851841461939e+00, -3.176581900447809e+00, -3.175546250706792e+00, -3.175546250706792e+00, -4.459489580586893e-01, -4.455047572817673e-01, -4.349684566540993e-01, -4.398092537925571e-01, -4.384737972584196e-01, -4.384737972584196e-01, -3.997447802481427e-02, -4.223957870244134e-02, -5.478218100791340e-01, -1.032020745226924e-02, -3.331002473130427e-02, -3.331002473130423e-02, -1.038695648515369e-03, -1.089779380670892e-03, 6.005353960827832e-06, -6.089931086063995e-04, -4.022324181704246e-04, -4.022324181704247e-04, -4.752038631636747e+00, -4.751529326589796e+00, -4.752025471371605e+00, -4.751575700785732e+00, -4.751774900298097e+00, -4.751774900298097e+00, -1.779203384890558e+00, -1.790461914452817e+00, -1.776852490165230e+00, -1.786821929975601e+00, -1.786554327989331e+00, -1.786554327989331e+00, -3.610971109374520e-01, -3.955314049794647e-01, -3.246370786622101e-01, -3.357176604055968e-01, -3.688127142477181e-01, -3.688127142477181e-01, 1.245418217904375e-02, -3.036456103691655e-02, 1.292346022089970e-02, -1.554176277038486e+00, 6.987185206918361e-04, 6.987185206918361e-04, -4.697968755126356e-04, -5.955653307050338e-04, -4.534291684237557e-04, 8.467400019029020e-03, -4.417212884711869e-04, -4.417212884711869e-04, -3.527794923441473e-01, -3.523157314200381e-01, -3.525108025008787e-01, -3.526435371335018e-01, -3.525796335948924e-01, -3.525796335948924e-01, -3.389137994063952e-01, -2.850112914695707e-01, -3.016549719299101e-01, -3.171196260643143e-01, -3.092989468387482e-01, -3.092989468387482e-01, -4.222049139396509e-01, -6.301078049838814e-02, -9.851239736870837e-02, -1.659286164523483e-01, -1.303383015024925e-01, -1.303383015024925e-01, -2.517283625678527e-01, -4.123652928483552e-04, 6.063852638633333e-03, -1.563024946679841e-01, 7.965998284433968e-03, 7.965998284433961e-03, -1.464539583952631e-03, -1.605933391226527e-04, -3.330962955699242e-04, 8.220877906553658e-03, -4.264130391507170e-04, -4.264130391507166e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lcy_blyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.496216111939658e+01, -2.496213102646296e+01, -2.496226942463176e+01, -2.496220998263925e+01, -2.496259718061024e+01, -2.496268329750314e+01, -2.496137075967442e+01, -2.496112431275759e+01, -2.496222377310448e+01, -2.496173525150001e+01, -2.496222377310448e+01, -2.496173525150001e+01, -3.836114172601932e+00, -3.836175836304976e+00, -3.836144868614582e+00, -3.836206372219288e+00, -3.836888386737699e+00, -3.837077930769390e+00, -3.836258566324201e+00, -3.836437711215651e+00, -3.835437270282001e+00, -3.837120917757888e+00, -3.835437270282001e+00, -3.837120917757888e+00, -6.006265694677269e-01, -6.016216511907650e-01, -5.998275942504792e-01, -6.010256999796483e-01, -5.852498208917470e-01, -5.844580220146689e-01, -5.903945316343229e-01, -5.906190710058473e-01, -5.959213067363511e-01, -5.898072025744177e-01, -5.959213067363511e-01, -5.898072025744177e-01, -1.077479867034198e-01, -1.066889638508638e-01, -1.086693146315314e-01, -1.076493269884766e-01, -7.144858789048791e-01, -7.332584739775909e-01, -8.449825778215217e-02, -8.451052383613161e-02, -7.645804015985787e-02, -1.076729654436880e-01, -7.645804015985783e-02, -1.076729654436879e-01, -1.585847188710423e-03, -1.207011998427069e-03, -1.695494410548572e-03, -1.244598669646476e-03, -6.731003232801879e-03, -6.164018241378222e-03, -7.798989865193212e-04, -8.412292988536208e-04, -2.085551300100056e-04, -2.307411722369012e-03, -2.085551300100057e-04, -2.307411722369012e-03, -5.955098465664412e+00, -5.953615323855858e+00, -5.957420336005530e+00, -5.955862304737533e+00, -5.955227170429920e+00, -5.953694519759412e+00, -5.957222449913282e+00, -5.955732631113960e+00, -5.956286041635487e+00, -5.954744203158470e+00, -5.956286041635487e+00, -5.954744203158470e+00, -2.037060312216862e+00, -2.036963349480712e+00, -2.053734380211401e+00, -2.053208905842657e+00, -2.022839032459888e+00, -2.025752418467183e+00, -2.037171116620277e+00, -2.040303637334520e+00, -2.056428320255208e+00, -2.048336190194088e+00, -2.056428320255208e+00, -2.048336190194088e+00, -5.060876832319536e-01, -5.047797917080040e-01, -5.637764019036718e-01, -5.640507770582097e-01, -4.502021003675902e-01, -4.648700609356713e-01, -4.730945789589990e-01, -4.886797203490293e-01, -5.280580731446318e-01, -5.029200737302933e-01, -5.280580731446318e-01, -5.029200737302935e-01, -6.011743668768988e-02, -5.964076371293099e-02, -1.229091181052329e-01, -1.228312373480119e-01, -5.280740590094639e-02, -5.273360313975175e-02, -2.080865830309362e+00, -2.079935861681334e+00, -6.923454228946493e-02, -6.343836684522944e-02, -6.923454228946493e-02, -6.343836684522944e-02, -6.824938935562223e-04, -5.738518985609339e-04, -8.193895773995747e-04, -7.657719737598951e-04, -6.883665365305272e-04, -5.316826131945541e-04, -2.327222338240183e-02, -2.353337053567909e-02, -1.288884013266767e-03, -3.168326039633639e-04, -1.288884013266767e-03, -3.168326039633639e-04, -5.102649936129537e-01, -5.122806201095826e-01, -5.050743128900350e-01, -5.070549165394092e-01, -5.068157277290446e-01, -5.088163626568530e-01, -5.083242743282114e-01, -5.103209740561556e-01, -5.075617766378319e-01, -5.095605029810405e-01, -5.075617766378319e-01, -5.095605029810405e-01, -4.928419358855332e-01, -4.944988910252801e-01, -4.057518655075933e-01, -4.070501196702369e-01, -4.274297927409318e-01, -4.289917240821569e-01, -4.513207135362571e-01, -4.528189642199395e-01, -4.388186838649015e-01, -4.403070555702242e-01, -4.388186838649015e-01, -4.403070555702242e-01, -5.982645045789700e-01, -5.992828959344033e-01, -1.579230250855100e-01, -1.578280045978931e-01, -1.892378732578114e-01, -1.891198367083090e-01, -2.552569982242614e-01, -2.561673801480008e-01, -2.178734307263053e-01, -2.175738188870032e-01, -2.178734307263054e-01, -2.175738188870031e-01, -3.640327854634741e-01, -3.657178282769385e-01, -5.844930179628237e-03, -5.767079329741429e-03, -1.348240828522664e-02, -1.350936293565280e-02, -2.380847448280325e-01, -2.404508357448946e-01, -3.779989658008312e-02, -3.570994699491280e-02, -3.779989658008309e-02, -3.570994699491273e-02, -2.106423393704296e-03, -1.795811589338463e-03, -2.150587765746187e-04, -2.128592185338306e-04, -5.110515787417821e-04, -3.872108136246905e-04, -3.287373481397268e-02, -3.298127690498949e-02, -1.140855054512593e-03, -3.228895202199628e-04, -1.140855054512592e-03, -3.228895202199626e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lcy_blyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.408496496053065e-08, 1.463652377038497e-11, -1.408504425765438e-08, -1.408488798201540e-08, 1.463631512328463e-11, -1.408498771850738e-08, -1.408446520491083e-08, 1.463532316351641e-11, -1.408443462961806e-08, -1.408534630053892e-08, 1.463842899785011e-11, -1.408554796575239e-08, -1.408493180936874e-08, 1.463681083685537e-11, -1.408497171402940e-08, -1.408493180936874e-08, 1.463681083685537e-11, -1.408497171402940e-08, -1.590391588905168e-05, 1.902747638536065e-07, -1.590999046003613e-05, -1.590439766533064e-05, 1.902725761814505e-07, -1.591091829061317e-05, -1.592047759607940e-05, 1.901971754504621e-07, -1.592448471161111e-05, -1.588268621776870e-05, 1.901358235030523e-07, -1.588775520622060e-05, -1.591090516745782e-05, 1.902491360705296e-07, -1.590176460423600e-05, -1.591090516745782e-05, 1.902491360705296e-07, -1.590176460423600e-05, -4.261404631589860e-03, 1.144533678933034e-03, -4.353048678372832e-03, -4.241964326667663e-03, 1.151156568500561e-03, -4.354604146521565e-03, -4.118703899791382e-03, 1.320750241138922e-03, -3.951572032797889e-03, -3.944709663653788e-03, 1.265386257803329e-03, -3.997981790739093e-03, -4.749961439903302e-03, 1.376562597771172e-03, -3.104200277404649e-03, -4.749961439903302e-03, 1.376562597771172e-03, -3.104200277404649e-03, 3.623091563197335e-01, 6.012876550391961e-01, 2.469675742518622e-01, 3.440519009591261e-01, 5.680272535784819e-01, 2.193699430514773e-01, -2.777100351081577e-03, 5.322727974273029e-04, -2.903874275163396e-03, 1.020224640989654e+00, 1.675901373768304e+00, 9.266780097554190e-01, -1.238900596425249e-01, 2.382014110698246e+00, 2.045694425418802e+00, -1.238900596425244e-01, 2.382014110698246e+00, 2.045694425418799e+00, -7.043974478417790e-05, 1.111914508308031e-07, -8.252251797749162e-05, -8.270924348843282e-05, 4.562559950974850e-07, -9.937907204314963e-05, 1.057756927546954e+01, 1.838627425311693e+01, 9.304218810344969e+00, -1.642416145398336e-05, 4.136895542502456e-17, -1.538226295692063e-05, -5.158408289738640e-05, 1.070835888305008e-12, -2.079007239151570e-05, -5.158408289724073e-05, 1.070835888305008e-12, -2.079007239200791e-05, -3.871034501363893e-06, 2.233703107768369e-08, -3.874212133329550e-06, -3.874054172355162e-06, 2.231537777319893e-08, -3.877128959488868e-06, -3.871162874468130e-06, 2.233595490630417e-08, -3.874281424329488e-06, -3.873750710706288e-06, 2.231683364972891e-08, -3.876935110081962e-06, -3.872612130163476e-06, 2.232609670798167e-08, -3.875680960543374e-06, -3.872612130163476e-06, 2.232609670798167e-08, -3.875680960543374e-06, -1.026290194536945e-04, 4.104557134069705e-06, -1.026410915576044e-04, -1.008434181631883e-04, 3.949027730077658e-06, -1.008994416066162e-04, -1.023707815805765e-04, 4.223201907834492e-06, -1.026135596776975e-04, -1.008341913969740e-04, 4.080707689470805e-06, -1.010342426816605e-04, -1.018799390543156e-04, 3.966397450084659e-06, -1.015713234141228e-04, -1.018799390543156e-04, 3.966397450084659e-06, -1.015713234141228e-04, -8.059769924312709e-03, 2.253646609880290e-03, -8.077750018152911e-03, -8.406423225027220e-03, 1.482953633834817e-03, -8.435602122826080e-03, -9.387059625003438e-03, 3.393155540240489e-03, -9.701005244000672e-03, -1.168308849217378e-02, 2.786872153422916e-03, -1.126886898968610e-02, -7.922731943841703e-03, 2.171399762139616e-03, -8.096240406902698e-03, -7.922731943841705e-03, 2.171399762139616e-03, -8.096240406902693e-03, 3.214873193142306e+00, 5.364331359216309e+00, 3.059007382506127e+00, 3.333828259093091e-01, 5.928062603673171e-01, 3.185259876316636e-01, 4.354737251177887e+00, 6.670630325612285e+00, 3.366314739237346e+00, -1.949558112250259e-04, 4.550774239056777e-06, -1.952736563511100e-04, 2.295650747291646e+00, 3.362374819306393e+00, 1.621264490915824e+00, 2.295650747291646e+00, 3.362374819306393e+00, 1.621264490915824e+00, -9.362226289463948e-06, 5.421496698436063e-24, -9.424643494973813e-06, -1.683121619363208e-05, 1.228758886113335e-17, -1.660300775317163e-05, -2.506601450328362e-05, 5.656440620065503e-25, -3.158124114518213e-05, 8.547947132481301e+00, 1.504669301565768e+01, 8.361854041403467e+00, -1.640703327056635e-05, 9.610322787727072e-20, -3.882124395383288e-05, -1.640703327089017e-05, 9.610322787727070e-20, -3.882124395345223e-05, -1.187128857245217e-02, 2.199677179191681e-03, -1.183057154535304e-02, -1.088220373061321e-02, 2.264286130145305e-03, -1.086119391515496e-02, -1.118209210040732e-02, 2.241303100651475e-03, -1.115710369917791e-02, -1.146708096191983e-02, 2.222568983976134e-03, -1.143173025217438e-02, -1.132025924341439e-02, 2.231922961512953e-03, -1.129012555490641e-02, -1.132025924341439e-02, 2.231922961512953e-03, -1.129012555490641e-02, -1.339843207487136e-02, 2.525278278664052e-03, -1.334090415984778e-02, -9.751685642596652e-03, 5.397863529116129e-03, -9.886214419728742e-03, -1.054946245693569e-02, 4.298036410666330e-03, -1.064490432599627e-02, -1.140333236482351e-02, 3.458400931093935e-03, -1.141402801289412e-02, -1.099076094033795e-02, 3.860241852276062e-03, -1.101937329955850e-02, -1.099076094033795e-02, 3.860241852276062e-03, -1.101937329955850e-02, -7.184671106860876e-03, 1.166454564355177e-03, -7.210152638902954e-03, 1.058838055717081e-01, 2.273047300256539e-01, 9.809909722098253e-02, 2.927694634330281e-02, 1.027440095908986e-01, 2.234758855279078e-02, -1.428677041355863e-02, 2.883676467546989e-02, -1.525357082560737e-02, -2.360225793624236e-03, 5.500747727544229e-02, -2.420823045802198e-03, -2.360225793624139e-03, 5.500747727544231e-02, -2.420823045802253e-03, -1.138643844105326e-02, 8.100714365057125e-03, -1.175397998935843e-02, 9.617041111262028e+00, 1.766533536733120e+01, 9.470194031514037e+00, 1.087582318453076e+01, 1.878803243082290e+01, 9.855027257836584e+00, -1.838048170491258e-02, 3.428914672188251e-02, -2.143988769341119e-02, 6.194131924749260e+00, 9.701438036301546e+00, 4.879790827919918e+00, 6.194131924749258e+00, 9.701438036301546e+00, 4.879790827919914e+00, 1.732540725769236e-05, 3.417478728614279e-04, -3.398251818680569e-06, -1.040673941359746e-06, 2.850114531961813e-85, -1.568043449545835e-06, -5.461518056852827e-06, 1.662312648545182e-36, -6.776620694411060e-06, 6.498762102943727e+00, 1.102889579754806e+01, 6.075037967829156e+00, -2.327693353466416e-05, 8.178814636871498e-22, -3.136225932782082e-05, -2.327693353545496e-05, 8.178814636871070e-22, -3.136225932781928e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
