
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1a_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.715558936775127e+01, -1.715562555123554e+01, -1.715581970912182e+01, -1.715528069106021e+01, -1.715555839067079e+01, -1.715555839067079e+01, -2.840513826029496e+00, -2.840500735859929e+00, -2.840267400793983e+00, -2.841208563597841e+00, -2.840566270227421e+00, -2.840566270227421e+00, -5.730813615348112e-01, -5.728283660299248e-01, -5.677832260847575e-01, -5.718743983748594e-01, -5.724041933731843e-01, -5.724041933731843e-01, -1.687460352191194e-01, -1.702127518562115e-01, -6.626846586495397e-01, -1.382048804270081e-01, -1.555606219383658e-01, -1.555606219383658e-01, -5.524338449744781e-03, -5.857977090295205e-03, -3.899065765477342e-02, -3.010076554600944e-03, -5.962142609948312e-03, -5.962142609948310e-03, -4.175254884612968e+00, -4.175427997143267e+00, -4.175268511840442e+00, -4.175421240266540e+00, -4.175339491714730e+00, -4.175339491714730e+00, -1.684148362131269e+00, -1.693248806454959e+00, -1.682257300898934e+00, -1.690241806619971e+00, -1.690176009344982e+00, -1.690176009344982e+00, -4.893285709040056e-01, -5.149796156590063e-01, -4.558278772647135e-01, -4.595342674456454e-01, -4.957302699976558e-01, -4.957302699976558e-01, -1.030992677842893e-01, -1.779871074098387e-01, -9.593027329510224e-02, -1.531341938747410e+00, -1.158585668630726e-01, -1.158585668630726e-01, -2.282300486402867e-03, -2.936639117626877e-03, -2.216214471176094e-03, -6.464959555199477e-02, -3.302921292598899e-03, -3.302921292598902e-03, -4.716521712179211e-01, -4.738579191530839e-01, -4.731238795563638e-01, -4.724563928547948e-01, -4.727939104554134e-01, -4.727939104554134e-01, -4.577441517121494e-01, -4.230570365048664e-01, -4.345159993080511e-01, -4.450648952817137e-01, -4.397313081364114e-01, -4.397313081364114e-01, -5.402966253826401e-01, -2.154875349129096e-01, -2.472648931489068e-01, -3.038677499755081e-01, -2.731966251930981e-01, -2.731966251930981e-01, -3.908233352681643e-01, -3.704718758622946e-02, -5.189293942814015e-02, -2.886005339129876e-01, -8.131609891279877e-02, -8.131609891279876e-02, -8.038239328943812e-03, -7.208469420912097e-04, -1.594122287277249e-03, -7.666257715631754e-02, -2.942341220672643e-03, -2.942341220672638e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1a_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.182365214428156e+01, -2.182362622000874e+01, -2.182374380791667e+01, -2.182369298797808e+01, -2.182402341706166e+01, -2.182409626462510e+01, -2.182298610461607e+01, -2.182277683527188e+01, -2.182370662134078e+01, -2.182329426161498e+01, -2.182370662134078e+01, -2.182329426161498e+01, -3.529376841386711e+00, -3.529504562230057e+00, -3.529407587541288e+00, -3.529539939641787e+00, -3.530207063438811e+00, -3.530439737497546e+00, -3.529394527799832e+00, -3.529629964114521e+00, -3.528769782630618e+00, -3.530359736767354e+00, -3.528769782630618e+00, -3.530359736767354e+00, -6.801866261399616e-01, -6.836490886483254e-01, -6.787481624312588e-01, -6.829973347462376e-01, -6.573106935527304e-01, -6.515235896043438e-01, -6.592024275658079e-01, -6.610885498742187e-01, -6.856047046132805e-01, -6.307505108131655e-01, -6.856047046132805e-01, -6.307505108131655e-01, -1.847067999450481e-01, -1.805750939956378e-01, -1.874720022986323e-01, -1.834127713483041e-01, -7.819469461833710e-01, -8.084089950204957e-01, -1.451472452439083e-01, -1.438552399841351e-01, -1.389770867469142e-01, -2.229403263381593e-01, -1.389770867469141e-01, -2.229403263381595e-01, -6.427087552626438e-03, -8.472070638712279e-03, -6.662090047617931e-03, -9.086337223462681e-03, -4.832324222173822e-02, -5.451142413418794e-02, -4.263544981593892e-03, -3.920866426632447e-03, -1.001996406294461e-02, 2.931645687787040e-03, -1.001996406294460e-02, 2.931645687787032e-03, -5.364141723080896e+00, -5.362888886574680e+00, -5.365868091213673e+00, -5.364557174735992e+00, -5.364239648578516e+00, -5.362947967670160e+00, -5.365721297560268e+00, -5.364463239726996e+00, -5.365024778396003e+00, -5.363726789585061e+00, -5.365024778396003e+00, -5.363726789585061e+00, -1.895660674059699e+00, -1.895571313315678e+00, -1.913188383810735e+00, -1.912665982713703e+00, -1.874100870943441e+00, -1.879823068740538e+00, -1.889376516927139e+00, -1.895188903406427e+00, -1.920921414601764e+00, -1.907384199475774e+00, -1.920921414601764e+00, -1.907384199475774e+00, -6.070011513499018e-01, -6.058668005545846e-01, -6.630047135914688e-01, -6.634170212571646e-01, -5.534010716455153e-01, -5.684497874516350e-01, -5.789330653766329e-01, -5.930733310629194e-01, -6.280955870345601e-01, -6.047070545523902e-01, -6.280955870345601e-01, -6.047070545523903e-01, -1.161081443280776e-01, -1.145874524554464e-01, -1.828551971547618e-01, -1.821857414969819e-01, -1.096250809954625e-01, -1.083409963369554e-01, -1.996960589468515e+00, -1.996181772878306e+00, -1.348477110845226e-01, -1.143161340770180e-01, -1.348477110845226e-01, -1.143161340770180e-01, -2.773570362201835e-03, -3.390754788413727e-03, -3.842111083942158e-03, -4.142918679651348e-03, -2.526727060704658e-03, -3.414032843660179e-03, -7.926767279317591e-02, -8.043249865614596e-02, -3.638073148222939e-04, -6.038491263328010e-03, -3.638073148222885e-04, -6.038491263328014e-03, -6.189668209112515e-01, -6.209380099099657e-01, -6.093130908159546e-01, -6.112224596381591e-01, -6.119765931009322e-01, -6.139325148051458e-01, -6.147460218945515e-01, -6.166850857446597e-01, -6.132889500190362e-01, -6.152380200182620e-01, -6.132889500190362e-01, -6.152380200182620e-01, -6.054159521037639e-01, -6.069362834467792e-01, -5.046561245006372e-01, -5.062527636889775e-01, -5.319362556955072e-01, -5.337362213799223e-01, -5.576194821675317e-01, -5.590741221487332e-01, -5.448037078178183e-01, -5.462835662927751e-01, -5.448037078178183e-01, -5.462835662927751e-01, -6.941753623517485e-01, -6.953050653401416e-01, -2.246948931034907e-01, -2.241327025553186e-01, -2.686967506692113e-01, -2.687437401629911e-01, -3.593988877579365e-01, -3.605158568253856e-01, -3.110163206696085e-01, -3.110316843406717e-01, -3.110163206696085e-01, -3.110316843406717e-01, -4.650624145358924e-01, -4.673729530071440e-01, -4.901254492363796e-02, -4.979479145258341e-02, -6.525497320488126e-02, -6.857750021483221e-02, -3.474616832949953e-01, -3.506042904192586e-01, -9.779253272096682e-02, -9.063151210314645e-02, -9.779253272096665e-02, -9.063151210314628e-02, -1.013951408615241e-02, -1.176691663699935e-02, -9.660685288901529e-04, -9.789522545870218e-04, -1.769029049699354e-03, -2.484398091606324e-03, -9.001050038658828e-02, -9.061275467950830e-02, -6.340954530921541e-04, -5.398431948136764e-03, -6.340954530921538e-04, -5.398431948136761e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1a_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.262557405285836e-09, 0.000000000000000e+00, -5.262583046876769e-09, -5.262471889500473e-09, 0.000000000000000e+00, -5.262521303707105e-09, -5.262209050704012e-09, 0.000000000000000e+00, -5.262139938857209e-09, -5.263169744445773e-09, 0.000000000000000e+00, -5.263370062936338e-09, -5.262500549663611e-09, 0.000000000000000e+00, -5.262889766729675e-09, -5.262500549663611e-09, 0.000000000000000e+00, -5.262889766729675e-09, -8.015546297839843e-06, 0.000000000000000e+00, -8.015574802700395e-06, -8.015467879612856e-06, 0.000000000000000e+00, -8.015532078336323e-06, -8.013835611922734e-06, 0.000000000000000e+00, -8.012808847062596e-06, -8.011435100661223e-06, 0.000000000000000e+00, -8.010548710502593e-06, -8.021026051370588e-06, 0.000000000000000e+00, -8.008401080226323e-06, -8.021026051370588e-06, 0.000000000000000e+00, -8.008401080226323e-06, -5.603512976287479e-03, 0.000000000000000e+00, -5.541388725156542e-03, -5.623376809410867e-03, 0.000000000000000e+00, -5.546380390750163e-03, -5.871844003079028e-03, 0.000000000000000e+00, -5.989921608182418e-03, -5.772035151630119e-03, 0.000000000000000e+00, -5.735939251448914e-03, -5.276459160279062e-03, 0.000000000000000e+00, -6.252311167059532e-03, -5.276459160279062e-03, 0.000000000000000e+00, -6.252311167059532e-03, -6.007981008874659e-01, 0.000000000000000e+00, -6.548999340891720e-01, -5.821426569053528e-01, 0.000000000000000e+00, -6.345774306172008e-01, -3.262416720122044e-03, 0.000000000000000e+00, -2.935006019559672e-03, -1.111470714818128e+00, 0.000000000000000e+00, -1.156035399753959e+00, -1.071523373002895e+00, 0.000000000000000e+00, 6.877313243875781e+00, -1.071523373002895e+00, 0.000000000000000e+00, 6.877313243875794e+00, 9.564278173298220e-01, 0.000000000000000e+00, -3.857812408990738e+00, 1.389960466012148e+00, 0.000000000000000e+00, -4.424766072771114e+00, -1.347636310549662e+00, 0.000000000000000e+00, -3.223395173658251e+00, -1.869939491276141e+00, 0.000000000000000e+00, -2.772312201797533e-01, -1.047191443469207e+01, 0.000000000000000e+00, 9.565064662148663e+01, -1.047191443469436e+01, 0.000000000000000e+00, 9.565064662152182e+01, -1.586878086138460e-06, 0.000000000000000e+00, -1.588411051468981e-06, -1.586411583896086e-06, 0.000000000000000e+00, -1.587970273813506e-06, -1.586838880409055e-06, 0.000000000000000e+00, -1.588391795136186e-06, -1.586446146026326e-06, 0.000000000000000e+00, -1.587983214030368e-06, -1.586642522578840e-06, 0.000000000000000e+00, -1.588190932691749e-06, -1.586642522578840e-06, 0.000000000000000e+00, -1.588190932691749e-06, -7.976883197982816e-05, 0.000000000000000e+00, -7.978346835622035e-05, -7.751661682961954e-05, 0.000000000000000e+00, -7.759414753455325e-05, -8.166639090093430e-05, 0.000000000000000e+00, -8.112720823059332e-05, -7.966667830523763e-05, 0.000000000000000e+00, -7.911446761965375e-05, -7.710044223973041e-05, 0.000000000000000e+00, -7.845318859994991e-05, -7.710044223973041e-05, 0.000000000000000e+00, -7.845318859994991e-05, -1.144762785560681e-02, 0.000000000000000e+00, -1.157370648533708e-02, -1.387780602264167e-02, 0.000000000000000e+00, -1.395708439078210e-02, -1.595265999216042e-02, 0.000000000000000e+00, -1.424050050206727e-02, -2.289002391108231e-02, 0.000000000000000e+00, -1.963090547146356e-02, -1.029775634723043e-02, 0.000000000000000e+00, -1.242479872928626e-02, -1.029775634723042e-02, 0.000000000000000e+00, -1.242479872928626e-02, -1.611387823903621e+00, 0.000000000000000e+00, -1.790715844811493e+00, -5.090646379433059e-01, 0.000000000000000e+00, -5.145355720602022e-01, -1.493151614901396e+00, 0.000000000000000e+00, -2.221507843117095e+00, -1.179800285910474e-04, 0.000000000000000e+00, -1.182383720652618e-04, -1.055053672558629e+00, 0.000000000000000e+00, -2.290339447321278e+00, -1.055053672558629e+00, 0.000000000000000e+00, -2.290339447321278e+00, -1.150861051721310e-01, 0.000000000000000e+00, -2.080769424282488e+00, -1.072701282831743e+00, 0.000000000000000e+00, -1.431690854281751e+00, 1.549251685500327e+01, 0.000000000000000e+00, -2.621462096110046e+01, -2.864324558708172e+00, 0.000000000000000e+00, -2.812648741337092e+00, 6.621638601801415e+01, 0.000000000000000e+00, -2.842147209998460e+01, 6.621638601802356e+01, 0.000000000000000e+00, -2.842147209999371e+01, -2.090148067881925e-02, 0.000000000000000e+00, -2.040608140781690e-02, -2.049240129599121e-02, 0.000000000000000e+00, -2.023946863278971e-02, -2.153379378791708e-02, 0.000000000000000e+00, -2.122956630303669e-02, -2.198653012132724e-02, 0.000000000000000e+00, -2.161100492061442e-02, -2.184116262936306e-02, 0.000000000000000e+00, -2.150149910182061e-02, -2.184116262936306e-02, 0.000000000000000e+00, -2.150149910182061e-02, -1.817274975634115e-02, 0.000000000000000e+00, -1.782746795637300e-02, -1.912902904260083e-02, 0.000000000000000e+00, -1.888828890195389e-02, -1.815187432445363e-02, 0.000000000000000e+00, -1.793143711590189e-02, -1.954702416009838e-02, 0.000000000000000e+00, -1.933264640732810e-02, -1.847469976388991e-02, 0.000000000000000e+00, -1.825518974013167e-02, -1.847469976388991e-02, 0.000000000000000e+00, -1.825518974013167e-02, -1.097447189897524e-02, 0.000000000000000e+00, -1.102713175067436e-02, -2.661914861575425e-01, 0.000000000000000e+00, -2.677835681082562e-01, -1.581533195417112e-01, 0.000000000000000e+00, -1.579957216168354e-01, -7.164620936832160e-02, 0.000000000000000e+00, -7.064668271682462e-02, -1.059211218253470e-01, 0.000000000000000e+00, -1.061054740186232e-01, -1.059211218253471e-01, 0.000000000000000e+00, -1.061054740186233e-01, -2.639780632453868e-02, 0.000000000000000e+00, -2.589887097570371e-02, -2.033164084834181e+00, 0.000000000000000e+00, -2.252852678437113e+00, -1.763471120653894e+00, 0.000000000000000e+00, -2.792464617743768e+00, -9.495006921629597e-02, 0.000000000000000e+00, -9.130242457011001e-02, -1.651677432033965e+00, 0.000000000000000e+00, -4.103086018782955e+00, -1.651677432033983e+00, 0.000000000000000e+00, -4.103086018782974e+00, -4.064432508195782e-01, 0.000000000000000e+00, -2.827114508941609e+00, 1.257901490618702e+01, 0.000000000000000e+00, -2.482511978286484e+01, 6.481348195083935e+00, 0.000000000000000e+00, -9.222856185122975e+00, -2.855542739817788e+00, 0.000000000000000e+00, -3.204738580289977e+00, 6.957187834738357e+01, 0.000000000000000e+00, -2.294904298521317e+01, 6.957187834731009e+01, 0.000000000000000e+00, -2.294904298522409e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
