
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hpbeint_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.714064754481705e+01, -1.714067528282817e+01, -1.714084941773633e+01, -1.714039419848132e+01, -1.714066175169090e+01, -1.714066175169090e+01, -2.863628732695857e+00, -2.863618274075873e+00, -2.863447468198193e+00, -2.864339794871939e+00, -2.863635355664077e+00, -2.863635355664077e+00, -5.896102533682920e-01, -5.893042878999148e-01, -5.831376575850952e-01, -5.869841412243010e-01, -5.894970197466750e-01, -5.894970197466750e-01, -1.833623754069939e-01, -1.847676537999292e-01, -6.930253406354658e-01, -1.487793491541241e-01, -1.837681604118079e-01, -1.837681604118079e-01, -1.417267440814065e-02, -1.484150147520742e-02, -5.867526482820958e-02, -6.813013891481727e-03, -1.468691710031380e-02, -1.468691710031380e-02, -4.190147389937106e+00, -4.190306543948267e+00, -4.190167280489399e+00, -4.190290955746847e+00, -4.190223505759959e+00, -4.190223505759959e+00, -1.708221168908234e+00, -1.716939576551144e+00, -1.707893720437817e+00, -1.714651122143331e+00, -1.714672039583294e+00, -1.714672039583294e+00, -5.095688594451941e-01, -5.506613030943499e-01, -4.854631118598251e-01, -5.046050174380101e-01, -5.274318824015788e-01, -5.274318824015788e-01, -1.200075888234485e-01, -1.957407070457303e-01, -1.178443231188346e-01, -1.573708099739217e+00, -1.320762720583105e-01, -1.320762720583105e-01, -6.572559899416431e-03, -7.510274817627864e-03, -5.629161739183087e-03, -7.940450841060080e-02, -6.842987286227761e-03, -6.842987286227761e-03, -5.265660130800833e-01, -5.227157048511709e-01, -5.240363706534081e-01, -5.251003453349916e-01, -5.245629995728327e-01, -5.245629995728327e-01, -5.112076939761312e-01, -4.487617000520364e-01, -4.647147907909261e-01, -4.810148231187137e-01, -4.725000001613194e-01, -4.725000001613194e-01, -5.752329605936829e-01, -2.335612910323880e-01, -2.650494902872625e-01, -3.219812448659269e-01, -2.909116612805065e-01, -2.909116612805064e-01, -4.080592738417583e-01, -5.470173781174781e-02, -7.253449199587783e-02, -3.041794253945468e-01, -9.923048959386990e-02, -9.923048959386989e-02, -1.660221936039637e-02, -2.057325614579834e-03, -3.907613473330884e-03, -9.461040637274026e-02, -5.816093126759388e-03, -5.816093126759377e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hpbeint_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.141806440125992e+01, -2.141813539429991e+01, -2.141846221181335e+01, -2.141729946722984e+01, -2.141810175614266e+01, -2.141810175614266e+01, -3.537205093000404e+00, -3.537241806717052e+00, -3.538391652146575e+00, -3.537137000004258e+00, -3.537238590245572e+00, -3.537238590245572e+00, -7.153121626276251e-01, -7.139208703658676e-01, -6.758499609794384e-01, -6.818529634866850e-01, -7.148084319394667e-01, -7.148084319394667e-01, -2.037067859829032e-01, -2.078243764976769e-01, -8.657226387673407e-01, -1.485148819155639e-01, -2.049553683127570e-01, -2.049553683127570e-01, -1.880163821527692e-02, -1.967912277763145e-02, -7.367341845385039e-02, -9.075103169970799e-03, -1.947436253314942e-02, -1.947436253314942e-02, -5.368310704798671e+00, -5.370399594908165e+00, -5.368524730006373e+00, -5.370148972427113e+00, -5.369381625066397e+00, -5.369381625066397e+00, -1.899225514072741e+00, -1.916201628903720e+00, -1.888247607881521e+00, -1.901480694527276e+00, -1.925048433349599e+00, -1.925048433349599e+00, -6.595946966264731e-01, -7.247435513455622e-01, -6.273172862738785e-01, -6.638111822594153e-01, -6.856821567182402e-01, -6.856821567182402e-01, -1.287306950648453e-01, -1.953034111095363e-01, -1.256096570811671e-01, -2.073872776935296e+00, -1.344726594307823e-01, -1.344726594307823e-01, -8.755168847348734e-03, -1.000138896942935e-02, -7.496781793411316e-03, -9.426887842354771e-02, -9.112667138474044e-03, -9.112667138474046e-03, -6.906135979695951e-01, -6.876409241791244e-01, -6.888930495663259e-01, -6.897230830802953e-01, -6.893233736663563e-01, -6.893233736663563e-01, -6.697148941189107e-01, -5.637684557553739e-01, -5.995543001685724e-01, -6.301927852507037e-01, -6.150971263175427e-01, -6.150971263175427e-01, -7.572444855363344e-01, -2.438599448942275e-01, -2.980866594089154e-01, -4.036088455460448e-01, -3.484553364373126e-01, -3.484553364373125e-01, -5.113794689858450e-01, -6.956577544818150e-02, -8.862426853328542e-02, -3.921040143080796e-01, -1.096023828586117e-01, -1.096023828586117e-01, -2.200348960440314e-02, -2.742768564362849e-03, -5.208039710404809e-03, -1.044894967517226e-01, -7.746394629538749e-03, -7.746394629538738e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hpbeint_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.587542093488921e-09, -3.587504518192488e-09, -3.587316209724822e-09, -3.587931934126852e-09, -3.587522450409844e-09, -3.587522450409844e-09, -4.250817684206082e-06, -4.250641485219346e-06, -4.245123840605681e-06, -4.251208835635600e-06, -4.250658678900714e-06, -4.250658678900714e-06, -2.097325193285619e-03, -2.118814642784428e-03, -2.673868893988992e-03, -2.585782090532838e-03, -2.105101528395699e-03, -2.105101528395699e-03, -2.918977687507662e-01, -2.728505975114787e-01, -9.120996112716908e-04, -7.337465638985726e-01, -2.861115704791821e-01, -2.861115704791821e-01, -4.251690649697240e+00, -4.262386734489538e+00, -1.811893026686781e+00, -3.020145959429109e+00, -4.427666257237854e+00, -4.427666257237854e+00, -8.014788706187437e-07, -7.991415494458506e-07, -8.012431336072121e-07, -7.994258604548685e-07, -8.002789738009944e-07, -8.002789738009944e-07, -4.271689788534238e-05, -4.156226306409531e-05, -4.319511822039727e-05, -4.228720942473020e-05, -4.130153729856200e-05, -4.130153729856200e-05, -1.227778205989878e-03, 1.552982324118948e-03, -1.583626349420022e-03, 1.449726363412735e-03, -7.863587803768040e-04, -7.863587803768040e-04, -9.909305474101237e-01, -2.695390277962799e-01, -1.124226432778918e+00, -5.260754788722830e-06, -9.909299605121759e-01, -9.909299605121759e-01, -3.204018620070711e+00, -3.209597353948206e+00, -9.183830759408506e+00, -1.791419759026595e+00, -4.740017258828147e+00, -4.740017258828946e+00, 3.398289501943815e-03, 2.261627027948057e-03, 2.642079166435319e-03, 2.956111766599281e-03, 2.796839125745566e-03, 2.796839125745566e-03, 4.146607883461421e-03, -4.354254458856431e-03, -1.983275980166954e-03, 2.255543508562132e-04, -8.817540759144538e-04, -8.817540759144416e-04, 1.119428677267862e-03, -1.285209053018371e-01, -6.572239878738774e-02, -1.549339981362864e-02, -3.483252775861257e-02, -3.483252775861263e-02, -6.416453942007442e-03, -1.528681052787434e+00, -1.542598748783529e+00, -8.320003529351021e-03, -1.690985668910620e+00, -1.690985668910619e+00, -3.194678313764452e+00, -5.529458676475675e+00, -4.758240556960778e+00, -2.061630798062475e+00, -6.922881380663534e+00, -6.922881380663351e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
