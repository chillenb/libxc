
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.576299716713580e+01, -1.576301599710632e+01, -1.576315324067191e+01, -1.576287199401057e+01, -1.576301174874794e+01, -1.576301174874794e+01, -2.665670405926161e+00, -2.665642846698952e+00, -2.665069990875403e+00, -2.666561996245000e+00, -2.665700463751333e+00, -2.665700463751333e+00, -5.685906822631953e-01, -5.683969524776713e-01, -5.645091769924693e-01, -5.683848981331533e-01, -5.672571075378611e-01, -5.672571075378611e-01, -1.826815508882534e-01, -1.839910934296701e-01, -6.521645073624578e-01, -1.537716598826170e-01, -1.751008017039077e-01, -1.751008017039075e-01, -1.010377077106553e-02, -1.063900434237137e-02, -5.515759965230477e-02, -5.828776979053707e-03, -8.133662477212027e-03, -8.133662477212027e-03, -3.842338733101910e+00, -3.842005094156959e+00, -3.842330779285474e+00, -3.842036074685162e+00, -3.842165145740076e+00, -3.842165145740076e+00, -1.629372999921736e+00, -1.637471819411461e+00, -1.628769979601287e+00, -1.635958185579523e+00, -1.634103089101860e+00, -1.634103089101860e+00, -4.898169568819556e-01, -5.220647812060595e-01, -4.584285866133936e-01, -4.685202290348659e-01, -4.961047362595177e-01, -4.961047362595178e-01, -1.187767765415760e-01, -1.920916775166048e-01, -1.118073951291201e-01, -1.444101630053799e+00, -1.320745562314792e-01, -1.320745562314792e-01, -4.500443582930569e-03, -5.698049781089011e-03, -4.364085372153985e-03, -8.153415557947580e-02, -5.481519990609812e-03, -5.481519990582247e-03, -4.879896551298105e-01, -4.845099993211637e-01, -4.855943436109694e-01, -4.865985059725195e-01, -4.860828689852303e-01, -4.860828689852303e-01, -4.767732337975774e-01, -4.273273202254818e-01, -4.384358062904671e-01, -4.507015069769379e-01, -4.440815874888637e-01, -4.440815874888637e-01, -5.446232887280276e-01, -2.276777568305305e-01, -2.576015432412720e-01, -3.145329497903302e-01, -2.835493061868006e-01, -2.835493061868006e-01, -3.969514234456039e-01, -5.303531459341056e-02, -6.897687918907976e-02, -3.011743198721202e-01, -9.790580218610562e-02, -9.790580218610564e-02, -1.422731954779506e-02, -1.523291949096400e-03, -3.203314675201224e-03, -9.326907648164344e-02, -5.034025420356129e-03, -5.034025420368943e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.875397620207762e+01, -1.875395519621516e+01, -1.875407263997987e+01, -1.875402560288422e+01, -1.875434584512174e+01, -1.875442509265055e+01, -1.875325288241004e+01, -1.875303722878001e+01, -1.875403117857057e+01, -1.875356862370933e+01, -1.875403117857057e+01, -1.875356862370933e+01, -3.101971196854434e+00, -3.102123942061911e+00, -3.102010587081651e+00, -3.102170059381895e+00, -3.103031775069022e+00, -3.103277762407833e+00, -3.101749571413614e+00, -3.101999862956166e+00, -3.101425709711909e+00, -3.102915786809983e+00, -3.101425709711909e+00, -3.102915786809983e+00, -6.600832953497972e-01, -6.616424105925721e-01, -6.591279504912473e-01, -6.609736500089600e-01, -6.429983861183033e-01, -6.417262895748435e-01, -6.469249565604535e-01, -6.472904452177763e-01, -6.559752879903155e-01, -6.367915861521370e-01, -6.559752879903155e-01, -6.367915861521370e-01, -1.896780022698093e-01, -1.925900831767605e-01, -1.922908130900160e-01, -1.963288421867287e-01, -7.499585382709881e-01, -7.698377789259208e-01, -1.624965815453840e-01, -1.635373735444448e-01, -1.777418815574641e-01, -1.489337911126621e-01, -1.777418815574639e-01, -1.489337911126619e-01, -1.302193215245524e-02, -1.383473836626605e-02, -1.364350072147590e-02, -1.461206317245729e-02, -6.846072406854828e-02, -7.094061840660694e-02, -7.834263875484044e-03, -7.703827172210206e-03, -1.162006291922965e-02, -6.616890411236268e-03, -1.162006291922965e-02, -6.616890411236266e-03, -4.757759161784545e+00, -4.756614402890466e+00, -4.760588886795414e+00, -4.759355393888118e+00, -4.757910166603795e+00, -4.756707790192410e+00, -4.760343424613488e+00, -4.759192549639192e+00, -4.759210449604828e+00, -4.757992820881546e+00, -4.759210449604828e+00, -4.757992820881546e+00, -1.765589701163478e+00, -1.765513177661186e+00, -1.777058514279046e+00, -1.776661726418756e+00, -1.757746920116010e+00, -1.759165661353222e+00, -1.767802574538519e+00, -1.769328167231588e+00, -1.777059724486011e+00, -1.773189252853669e+00, -1.777059724486011e+00, -1.773189252853669e+00, -6.062106312302774e-01, -6.052088062320286e-01, -6.785260326851942e-01, -6.791043369335431e-01, -5.542245284331850e-01, -5.697010613258651e-01, -5.997311564621658e-01, -6.121748668272159e-01, -6.288310275837354e-01, -6.062998576862068e-01, -6.288310275837358e-01, -6.062998576862073e-01, -1.342892795621936e-01, -1.347407600922038e-01, -1.973406768481493e-01, -1.976294283247260e-01, -1.253515482898158e-01, -1.293241315959731e-01, -1.883731368576871e+00, -1.883072179753728e+00, -1.450635560601120e-01, -1.436294119080612e-01, -1.450635560601120e-01, -1.436294119080612e-01, -5.878212299105470e-03, -6.108779528865529e-03, -7.538172554115390e-03, -7.652174397623150e-03, -5.637760529151273e-03, -5.970441434367727e-03, -9.524453501398447e-02, -9.581040279142829e-02, -5.758065753101974e-03, -7.906149453215239e-03, -5.758065753101982e-03, -7.906149453762565e-03, -6.341481850394480e-01, -6.358666734774777e-01, -6.289307522214633e-01, -6.307621478551600e-01, -6.311525361472216e-01, -6.329647305139180e-01, -6.327153964941029e-01, -6.344547739803804e-01, -6.319719189274264e-01, -6.337462698122738e-01, -6.319719189274264e-01, -6.337462698122738e-01, -6.185246286827003e-01, -6.198753708089081e-01, -5.049683396255080e-01, -5.063865217344858e-01, -5.343747957769769e-01, -5.362832722620755e-01, -5.711082998878505e-01, -5.726179082464137e-01, -5.520893768018084e-01, -5.536174861142082e-01, -5.520893768018084e-01, -5.536174861142082e-01, -7.069061715741118e-01, -7.082992451387500e-01, -2.312257787574993e-01, -2.317617105377105e-01, -2.783915161615456e-01, -2.806281851291052e-01, -3.750609646471421e-01, -3.761950068573935e-01, -3.303298596206360e-01, -3.302116209144739e-01, -3.303298596206359e-01, -3.302116209144738e-01, -4.698754168603622e-01, -4.718609571108803e-01, -6.779056121079842e-02, -6.812486902783209e-02, -8.190275395260899e-02, -8.355049149871971e-02, -3.656141993484755e-01, -3.689155196619836e-01, -1.109188804820527e-01, -1.130761317140551e-01, -1.109188804820527e-01, -1.130761317140549e-01, -1.859521210026257e-02, -1.926390156345441e-02, -2.028713442436253e-03, -2.033349981634456e-03, -4.127645119840413e-03, -4.390024155776031e-03, -1.069058891300399e-01, -1.081090522360497e-01, -5.454227468239582e-03, -7.247052550772410e-03, -5.454227483034662e-03, -7.247052549026241e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.154176113200957e-08, 3.855567579455844e-10, -1.154182340632255e-08, -1.154162894443226e-08, 3.855637563905792e-10, -1.154172640527686e-08, -1.154115179593628e-08, 3.855734091993355e-10, -1.154106174201388e-08, -1.154265835674932e-08, 3.854697494807899e-10, -1.154296724832138e-08, -1.154170226597064e-08, 3.855271085313426e-10, -1.154215304121256e-08, -1.154170226597064e-08, 3.855271085313426e-10, -1.154215304121256e-08, -1.495302185044949e-05, 2.158879157656427e-06, -1.495817755662641e-05, -1.495313575327590e-05, 2.159323527660124e-06, -1.495868633169251e-05, -1.496019473387632e-05, 2.169371669283230e-06, -1.496296505440781e-05, -1.493852722253994e-05, 2.149943255801801e-06, -1.494236345826528e-05, -1.496192002820430e-05, 2.159156568071321e-06, -1.494718151622186e-05, -1.496192002820430e-05, 2.159156568071321e-06, -1.494718151622186e-05, -7.701686090611585e-03, 3.586683876242116e-03, -7.836477909819050e-03, -7.674959357046538e-03, 3.559577090514688e-03, -7.842403940952598e-03, -7.458308415914711e-03, 2.876045381924161e-03, -7.222299077661580e-03, -7.126438552990640e-03, 2.810968523930000e-03, -7.207286515122488e-03, -8.317730102950048e-03, 2.852692094259074e-03, -6.259391583286344e-03, -8.317730102950048e-03, 2.852692094259074e-03, -6.259391583286344e-03, -8.711689788954258e-01, 3.108902575321890e-01, -8.000246912612397e-01, -8.627916775167455e-01, 3.280826843588528e-01, -7.708687050293912e-01, -4.567794191664393e-03, 1.940414170439823e-03, -4.417011411229807e-03, -1.130412416196069e+00, 2.258949661124237e-01, -1.094448851385162e+00, -7.889622774394360e-01, 1.882246441728870e-01, -1.634168254378827e+00, -7.889622774394351e-01, 1.882246441728873e-01, -1.634168254378833e+00, 4.235666361990832e-03, 8.471332723898200e-03, 4.235666361990832e-03, 4.982257697020214e-03, 9.964515393423459e-03, 4.982257697020214e-03, -1.878092433338191e+00, 5.126941006152715e-02, -2.531692095924646e+00, 1.504341724364139e-03, 3.008683449168684e-03, 1.504341724364139e-03, 2.207283134900671e-03, 4.414566270491809e-03, 2.207283134900671e-03, 2.207283135350878e-03, 4.414566270088269e-03, 2.207283135350878e-03, -3.047887866829691e-06, 5.666948009101149e-07, -3.051116373228673e-06, -3.042648957281333e-06, 5.704413223836728e-07, -3.045990646031164e-06, -3.047617811667208e-06, 5.668443577206054e-07, -3.050923726588138e-06, -3.043077258133227e-06, 5.701514261968389e-07, -3.046316145974289e-06, -3.045224064319270e-06, 5.686004611431787e-07, -3.048536503509107e-06, -3.045224064319270e-06, 5.686004611431787e-07, -3.048536503509107e-06, -9.759633220197457e-05, 1.221811741084532e-05, -9.761283088930368e-05, -9.623336851333272e-05, 1.218856108878283e-05, -9.630584322434498e-05, -9.618105303533255e-05, 1.161795009824474e-05, -9.670674430767492e-05, -9.499053194017561e-05, 1.159619612758267e-05, -9.547380654826752e-05, -9.799663359412156e-05, 1.250231835492394e-05, -9.696944893889199e-05, -9.799663359412156e-05, 1.250231835492394e-05, -9.696944893889199e-05, -1.440195535699736e-02, 1.180452397706796e-02, -1.462735338960880e-02, -6.776018786010300e-03, 1.489938286408802e-02, -6.713976082478691e-03, -2.139276018566119e-02, 1.535577972946644e-02, -1.794505324322759e-02, -1.403805738938198e-02, 2.278859644535717e-02, -1.094714445040983e-02, -1.170833864333853e-02, 1.179162458306085e-02, -1.563238448430727e-02, -1.170833864333847e-02, 1.179162458306085e-02, -1.563238448430728e-02, -1.372522087894244e+00, 1.261488607621168e-01, -1.386104925302564e+00, -5.392749651071207e-01, 1.139695105238702e-01, -5.345884126101520e-01, -1.629487416459078e+00, 1.279112469154852e-01, -1.531853504401918e+00, -1.082297991410678e-04, 1.207887057881010e-04, -1.085084243262269e-04, -1.365569845911594e+00, 2.409472748596690e-01, -1.655489647473469e+00, -1.365569845911594e+00, 2.409472748596690e-01, -1.655489647473469e+00, 1.466773397935566e-03, 2.933546798259037e-03, 1.466773397935566e-03, 1.849572050554419e-03, 3.699144102256803e-03, 1.849572050554419e-03, 1.842554218706263e-02, 3.685108437354808e-02, 1.842554218706263e-02, -3.272598161286005e+00, 1.250822448857004e-01, -3.160592677580998e+00, 7.051803231269947e-03, 1.410360645889085e-02, 7.051803231269947e-03, 7.051803234557417e-03, 1.410360646869916e-02, 7.051803234557417e-03, -5.558731162121751e-03, 2.514346072918196e-02, -5.250458028791351e-03, -9.197766468372542e-03, 2.157065992117518e-02, -8.852816420713134e-03, -8.045714519380206e-03, 2.270457728491302e-02, -7.707080470230028e-03, -6.986599084626916e-03, 2.373865089872573e-02, -6.666462485795208e-03, -7.527967393372356e-03, 2.321019190891285e-02, -7.198376049538175e-03, -7.527967393372356e-03, 2.321019190891285e-02, -7.198376049538175e-03, -4.739767242155267e-03, 2.977269840520045e-02, -4.475190883076442e-03, -2.575276250482270e-02, 1.592277215307748e-02, -2.541407094397390e-02, -2.396055895273195e-02, 1.838749842245184e-02, -2.352703698765280e-02, -1.889011135048600e-02, 2.169730037966074e-02, -1.847470689202831e-02, -2.192491984420680e-02, 1.995497716545398e-02, -2.148231315001123e-02, -2.192491984420680e-02, 1.995497716545398e-02, -2.148231315001123e-02, -5.974060493334534e-03, 1.183264719377924e-02, -5.854209747333591e-03, -3.203249491897613e-01, 8.498631964250428e-02, -3.163328636504140e-01, -1.895776758380472e-01, 7.821972418059023e-02, -1.835686206204754e-01, -8.974710361039785e-02, 6.964082434152352e-02, -8.790066572651023e-02, -1.175295403782046e-01, 7.796350422599263e-02, -1.185126678303032e-01, -1.175295403782047e-01, 7.796350422599266e-02, -1.185126678303034e-01, -3.492358164775948e-02, 2.285950305464996e-02, -3.430845610382992e-02, -1.317142315657011e+00, 4.213028450134424e-02, -1.383828137906535e+00, -3.423898564862638e+00, 6.458066222247318e-02, -3.479196542755017e+00, -1.204303932086644e-01, 1.099497136873529e-01, -1.131454046813218e-01, -2.517722125932520e+00, 2.182010199987041e-01, -2.763853665970861e+00, -2.517722125932535e+00, 2.182010199987039e-01, -2.763853665970856e+00, 5.281295584737279e-03, 1.056259116938041e-02, 5.281295584737279e-03, 2.005765736367150e-03, 4.011531506685853e-03, 2.005765736367150e-03, 2.510381951246900e-03, 5.020763908060611e-03, 2.510381951246900e-03, -2.877981854102895e+00, 2.002688123716920e-01, -2.786217850009141e+00, 9.000943715250370e-03, 1.800188742308661e-02, 9.000943715250370e-03, 9.000943718924263e-03, 1.800188743452388e-02, 9.000943718924263e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
