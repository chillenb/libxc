
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_o3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.865177533468748e+01, -1.865181063848985e+01, -1.865201549346142e+01, -1.865143645343689e+01, -1.865179355684131e+01, -1.865179355684131e+01, -3.117463131033022e+00, -3.117452572550825e+00, -3.117289533802826e+00, -3.118220520019474e+00, -3.117470735973773e+00, -3.117470735973773e+00, -6.463010635091904e-01, -6.461731312437282e-01, -6.460608580396343e-01, -6.499370135290365e-01, -6.462513481688894e-01, -6.462513481688894e-01, -2.084351216428292e-01, -2.089651204765884e-01, -7.551544903933839e-01, -1.805592880241481e-01, -2.085630741219966e-01, -2.085630741219966e-01, -2.300021335603268e-02, -2.406845470927222e-02, -8.357305463692273e-02, -1.115218080474086e-02, -2.382073773648185e-02, -2.382073773648185e-02, -4.574888132184028e+00, -4.575294361356186e+00, -4.574933050807189e+00, -4.575248836316289e+00, -4.575091105368701e+00, -4.575091105368701e+00, -1.885466034408124e+00, -1.893648052323245e+00, -1.887104017925080e+00, -1.893382943452586e+00, -1.889188055649288e+00, -1.889188055649288e+00, -5.493503250940264e-01, -5.893754091683187e-01, -5.232371324627945e-01, -5.398114679880539e-01, -5.681578283296430e-01, -5.681578283296430e-01, -1.493062351165120e-01, -2.312992210383540e-01, -1.474298924463885e-01, -1.713830093402922e+00, -1.631836470851981e-01, -1.631836470851981e-01, -1.076190193162453e-02, -1.228233571853576e-02, -9.227623309896864e-03, -1.058972763336153e-01, -1.119979132976733e-02, -1.119979132976733e-02, -5.613671597706505e-01, -5.584298208373907e-01, -5.594376594067145e-01, -5.602494497862028e-01, -5.598393784105605e-01, -5.598393784105605e-01, -5.443128853173799e-01, -4.872140994308899e-01, -5.007758623468550e-01, -5.156220191197843e-01, -5.077266643498135e-01, -5.077266643498135e-01, -6.165641732261405e-01, -2.694919420394912e-01, -2.977408401340569e-01, -3.485908122795736e-01, -3.198451894622243e-01, -3.198451894622242e-01, -4.429571813403921e-01, -7.882145711476553e-02, -9.777048088648047e-02, -3.252014694290058e-01, -1.277740881279338e-01, -1.277740881279338e-01, -2.688325970584339e-02, -3.394292743967476e-03, -6.423622508815890e-03, -1.232397230987033e-01, -9.531971021269087e-03, -9.531971021269077e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_o3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.383365494714671e+01, -2.383374462928882e+01, -2.383414084252466e+01, -2.383267229235084e+01, -2.383370227493216e+01, -2.383370227493216e+01, -3.862019113478792e+00, -3.862079093950831e+00, -3.863881040600259e+00, -3.861576193157307e+00, -3.862066106109467e+00, -3.862066106109467e+00, -7.374168160862004e-01, -7.354380090126956e-01, -6.806919164862028e-01, -6.877093900954846e-01, -7.367016558896645e-01, -7.367016558896645e-01, -1.880940260622581e-01, -1.915535818424959e-01, -9.121837557294438e-01, -1.639476417071103e-01, -1.891088999380920e-01, -1.891088999380920e-01, -3.031290308435540e-02, -3.169127496902684e-02, -1.095496736438859e-01, -1.481396518548412e-02, -3.136613085907071e-02, -3.136613085907071e-02, -5.941887219147062e+00, -5.944323700940860e+00, -5.942136968729717e+00, -5.944031559099245e+00, -5.943137686920604e+00, -5.943137686920604e+00, -1.931516449665889e+00, -1.954071035426905e+00, -1.912939620574338e+00, -1.930543141437716e+00, -1.970939761729334e+00, -1.970939761729334e+00, -6.967045171505235e-01, -7.751304462554732e-01, -6.605723176462126e-01, -7.074515593757909e-01, -7.268308276288725e-01, -7.268308276288725e-01, -1.752560150415458e-01, -1.996099398524109e-01, -1.676334636534538e-01, -2.260120322098115e+00, -1.630448904554389e-01, -1.630448904554389e-01, -1.429701716493383e-02, -1.630671741559609e-02, -1.225566032971857e-02, -1.369363968303501e-01, -1.487051200294927e-02, -1.487051200294927e-02, -7.393316224964206e-01, -7.348048748438092e-01, -7.365971173587050e-01, -7.378531673964854e-01, -7.372388904593262e-01, -7.372388904593262e-01, -7.167337885182345e-01, -5.824545942372267e-01, -6.294625633893053e-01, -6.683859769705205e-01, -6.494623483145556e-01, -6.494623483145556e-01, -8.105064076962757e-01, -2.345299575802116e-01, -2.840596502981562e-01, -4.065326767581439e-01, -3.401207044942823e-01, -3.401207044942822e-01, -5.244171767820880e-01, -1.042769640844546e-01, -1.317097353763569e-01, -4.002777670705910e-01, -1.494330574615106e-01, -1.494330574615106e-01, -3.536287153370381e-02, -4.519474115161794e-03, -8.545241118267736e-03, -1.404472982929055e-01, -1.266137703633219e-02, -1.266137703633216e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_o3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.557146489295821e-09, -2.557073562586823e-09, -2.556799591494886e-09, -2.557992813795556e-09, -2.557107600804103e-09, -2.557107600804103e-09, -4.409112623684427e-06, -4.408602077739552e-06, -4.393844112470716e-06, -4.415554652995335e-06, -4.408775648350783e-06, -4.408775648350783e-06, -3.949912320105502e-03, -3.986513278175449e-03, -4.933668329488880e-03, -4.766545617421477e-03, -3.963166873069647e-03, -3.963166873069647e-03, -6.746017920061023e-01, -6.531510353887029e-01, -1.635978611154285e-03, -1.074986558090073e+00, -6.685257925860804e-01, -6.685257925860804e-01, -1.192567710002493e+01, -1.195338973191133e+01, 3.276725293578592e+00, -8.459089407432835e+00, -1.241858454336574e+01, -1.241858454336574e+01, -5.531075936932167e-07, -5.491832273633910e-07, -5.527131864965688e-07, -5.496616635473754e-07, -5.510852479849665e-07, -5.510852479849665e-07, -6.564180170304987e-05, -6.349034595476392e-05, -6.687238322887697e-05, -6.517394222649405e-05, -6.256985530871185e-05, -6.256985530871185e-05, -3.981133851888094e-03, -3.686068670787778e-04, -5.140940454148205e-03, -1.296321605387883e-03, -3.037351846752135e-03, -3.037351846752135e-03, -4.396044906712783e-01, -4.451764858827522e-01, -6.981867482252997e-01, -1.131799002463673e-05, -1.146312108002324e+00, -1.146312108002324e+00, -8.973925232469378e+00, -8.991668908987643e+00, -2.573641306236790e+01, 1.236732709866344e+00, -1.328110100284877e+01, -1.328110100284896e+01, 6.511199294889585e-04, -2.330981189621760e-04, 7.888895699074802e-05, 3.239747867293672e-04, 2.010308663242519e-04, 2.010308663242518e-04, 9.534896688021875e-04, -1.037846082071485e-02, -6.459465350909309e-03, -3.220857075892065e-03, -4.787277505357509e-03, -4.787277505357504e-03, -4.206621083247270e-04, -2.429113126750702e-01, -1.419986268088614e-01, -4.580021000683265e-02, -8.600312779781467e-02, -8.600312779781476e-02, -1.606525158690578e-02, 4.076466591998648e+00, 2.777532483862732e+00, -4.559679680407124e-02, -7.938126473775365e-01, -7.938126473775478e-01, -8.935593068782422e+00, -1.547091476397202e+01, -1.331978059967354e+01, -1.355504954983813e+00, -1.939687693188153e+01, -1.939687693188453e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
