
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.937588102503554e+01, -1.937590596743874e+01, -1.937608025269079e+01, -1.937570785205439e+01, -1.937589396711895e+01, -1.937589396711895e+01, -3.195037188700561e+00, -3.195004355985856e+00, -3.194324333192966e+00, -3.196118840703678e+00, -3.195075532823799e+00, -3.195075532823799e+00, -5.990090464854392e-01, -5.987729855597546e-01, -5.939657659528241e-01, -5.987954029475798e-01, -5.972612446480933e-01, -5.972612446480933e-01, -1.145574915024028e-01, -1.173320837847924e-01, -7.025928589018289e-01, -6.812178957220355e-02, -8.703259250047975e-02, -8.703259250047973e-02, -1.578720794029563e-03, -1.656484118761542e-03, -5.058462854393210e-03, -9.414159883671314e-04, -1.167891053925823e-03, -1.167891053925823e-03, -4.645891362911557e+00, -4.645305549120857e+00, -4.645874450953225e+00, -4.645357151417957e+00, -4.645588959042009e+00, -4.645588959042009e+00, -1.913553886830129e+00, -1.923340934706096e+00, -1.913357194944202e+00, -1.922006360756085e+00, -1.919049589590241e+00, -1.919049589590241e+00, -4.989211038767353e-01, -5.271490647561955e-01, -4.603883190338285e-01, -4.642385482433458e-01, -5.054881851326085e-01, -5.054881851326085e-01, -2.295389932392473e-02, -1.125538937566140e-01, -1.779744007936520e-02, -1.658704344816602e+00, -4.268524844185849e-02, -4.268524844185849e-02, -7.361558940481841e-04, -9.214427785884068e-04, -7.143067629036098e-04, -5.737469262210554e-03, -8.524963509247138e-04, -8.524963509247138e-04, -4.792981562817943e-01, -4.809735521569705e-01, -4.804327226381579e-01, -4.799432888184725e-01, -4.801919371151023e-01, -4.801919371151023e-01, -4.637429434301077e-01, -4.231663960657248e-01, -4.361081924436922e-01, -4.477187965245835e-01, -4.418101741903598e-01, -4.418101741903598e-01, -5.555482069242362e-01, -1.629856937906383e-01, -2.082091827898259e-01, -2.833285747509797e-01, -2.442569388647156e-01, -2.442569388647156e-01, -3.854090432984779e-01, -5.047576956372005e-03, -3.263734173699261e-03, -2.667497016229073e-01, -1.408432146976340e-02, -1.408432146976339e-02, -2.182592684000985e-03, -2.600265180533871e-04, -5.315600441175062e-04, -1.143580130193070e-02, -7.919774811289611e-04, -7.919774811289599e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.322126911394788e+01, -2.322135604239486e+01, -2.322172683902308e+01, -2.322043385139644e+01, -2.322111357277195e+01, -2.322111357277195e+01, -3.749930270647221e+00, -3.749963674328357e+00, -3.750828244190863e+00, -3.750036475330671e+00, -3.750060521470091e+00, -3.750060521470091e+00, -7.125112181041239e-01, -7.116215098770164e-01, -6.912179399062167e-01, -6.970087254388539e-01, -6.957929015527198e-01, -6.957929015527198e-01, -1.784171807119101e-01, -1.800516828936889e-01, -8.336740403639921e-01, -1.426258807337373e-01, -1.555589298453295e-01, -1.555589298453295e-01, -2.072854060132972e-03, -2.174945650719231e-03, -1.306157086828648e-02, -1.238236013233252e-03, -1.534606337234522e-03, -1.534606337234522e-03, -5.720687653565919e+00, -5.722940266867647e+00, -5.720789554087301e+00, -5.722778160967613e+00, -5.721830094548386e+00, -5.721830094548386e+00, -2.056578299440212e+00, -2.072623731469187e+00, -2.043032235423267e+00, -2.057119817075820e+00, -2.072099862849250e+00, -2.072099862849250e+00, -6.268046031727136e-01, -6.954305991238559e-01, -5.771816711630705e-01, -6.100847653397132e-01, -6.383668524600619e-01, -6.383668524600619e-01, -9.742636519485731e-02, -1.947900241474065e-01, -8.608972891991674e-02, -2.142078771129540e+00, -1.128947381573631e-01, -1.128947381573631e-01, -9.694990185530370e-04, -1.212095753451782e-03, -9.408749425635660e-04, -3.945726652777055e-02, -1.121848381218742e-03, -1.121848381218742e-03, -6.456537064201779e-01, -6.373436942411373e-01, -6.401320009246010e-01, -6.425382120549170e-01, -6.413218776884043e-01, -6.413218776884043e-01, -6.287233008983483e-01, -5.191906123025058e-01, -5.464615735324475e-01, -5.764351387859833e-01, -5.607828792687778e-01, -5.607828792687778e-01, -7.297987693251996e-01, -2.393110660514759e-01, -2.781928916652679e-01, -3.599436663616780e-01, -3.138225042652391e-01, -3.138225042652390e-01, -4.763625013981390e-01, -1.192950036879440e-02, -2.416774247681220e-02, -3.449897997146803e-01, -6.221551509222382e-02, -6.221551509222379e-02, -2.868749970075127e-03, -3.441375996027674e-04, -7.012478288658834e-04, -5.558599145404338e-02, -1.042610557866676e-03, -1.042610557866675e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_tuned_cam_b3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_tuned_cam_b3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.623602893030185e-09, -6.623570997551632e-09, -6.623339356664931e-09, -6.623815767613645e-09, -6.623578901036763e-09, -6.623578901036763e-09, -8.316859314012716e-06, -8.317219053799314e-06, -8.324742775481271e-06, -8.305463435371449e-06, -8.316501322150489e-06, -8.316501322150489e-06, -3.766904354124058e-03, -3.764354683171876e-03, -3.667297923913858e-03, -3.583079935362495e-03, -3.617950006244768e-03, -3.617950006244768e-03, 3.803783962957450e-02, 2.284315003098884e-02, -2.254075994000383e-03, 4.769982704616411e-01, 2.247149682908407e-01, 2.247149682908409e-01, -6.877120033262483e-04, -8.200827841657769e-04, 7.712311217590971e+00, -1.428917316575401e-04, -3.161758849423498e-04, -3.161758849424513e-04, -1.941111323109134e-06, -1.942545093369155e-06, -1.941158396908807e-06, -1.942424285829285e-06, -1.941847451874798e-06, -1.941847451874798e-06, -5.937244574921014e-05, -5.824371200923260e-05, -5.939975786119758e-05, -5.839899285163616e-05, -5.873610004420661e-05, -5.873610004420661e-05, -7.542623604779725e-03, -7.235344282198440e-03, -9.547823780160124e-03, -1.072749020234258e-02, -7.343784499866773e-03, -7.343784499866773e-03, 2.131328784803822e+00, 9.918162314875520e-02, 2.684885877719041e+00, -1.116493445957808e-04, 1.176148685099144e+00, 1.176148685099144e+00, -8.426573405588580e-05, -1.502129214671188e-04, -2.544139493096075e-04, 6.329545853541468e+00, -2.509189641965567e-04, -2.509189641968870e-04, -1.061849968187963e-02, -9.860506671489237e-03, -1.008825375789561e-02, -1.030451869155324e-02, -1.019279509299130e-02, -1.019279509299130e-02, -1.216783568963808e-02, -1.120275482391225e-02, -1.115108166044130e-02, -1.124760462027657e-02, -1.119571486095657e-02, -1.119571486095657e-02, -6.015608313630215e-03, -6.520344482205113e-03, -3.133081615679272e-02, -3.219956428196882e-02, -3.562907598992895e-02, -3.562907598992895e-02, -1.462941557230075e-02, 7.404482647620935e+00, 7.923389594805259e+00, -4.219907880146061e-02, 3.960301065465162e+00, 3.960301065465164e+00, -1.367024826803751e-03, -1.140975939673098e-05, -5.498971690027059e-05, 4.567022733584357e+00, -2.379886950482313e-04, -2.379886950467285e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
