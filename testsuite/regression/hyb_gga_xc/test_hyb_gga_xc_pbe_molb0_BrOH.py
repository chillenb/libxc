
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_molb0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.595907744783066e+01, -1.595909226483943e+01, -1.595922120921503e+01, -1.595897732473358e+01, -1.595908473651574e+01, -1.595908473651574e+01, -2.689853798775845e+00, -2.689830607166593e+00, -2.689302770420897e+00, -2.690774257991706e+00, -2.689853150797075e+00, -2.689853150797075e+00, -5.630661609782190e-01, -5.629734765734068e-01, -5.621653166654227e-01, -5.656332080582697e-01, -5.630299494967673e-01, -5.630299494967673e-01, -1.778314525906450e-01, -1.791510398936187e-01, -6.552373978247983e-01, -1.418653010265990e-01, -1.782147713245900e-01, -1.782147713245900e-01, -1.276207363236250e-02, -1.336502856726461e-02, -5.317191204893106e-02, -6.132328874205755e-03, -1.322580781651019e-02, -1.322580781651019e-02, -3.871403659891177e+00, -3.870914149504052e+00, -3.871358417572434e+00, -3.870977701292830e+00, -3.871145470160342e+00, -3.871145470160342e+00, -1.650849381299687e+00, -1.658182996312564e+00, -1.652045783989673e+00, -1.657750466574825e+00, -1.654280643385639e+00, -1.654280643385639e+00, -4.764953543125354e-01, -5.053551045604933e-01, -4.546828647349230e-01, -4.650356150429139e-01, -4.917006766568324e-01, -4.917006766568324e-01, -1.115070239852851e-01, -1.888372518686700e-01, -1.096673626753921e-01, -1.437289315645621e+00, -1.244777790992034e-01, -1.244777790992034e-01, -5.915873821410176e-03, -6.760099125315911e-03, -5.066852145597806e-03, -7.251002515050101e-02, -6.159471583357397e-03, -6.159471583357397e-03, -4.811782649862186e-01, -4.794930530132224e-01, -4.800331058024522e-01, -4.804961834146969e-01, -4.802588873154217e-01, -4.802588873154217e-01, -4.669740312674898e-01, -4.256141047707068e-01, -4.358778143115243e-01, -4.463124404927038e-01, -4.407798807425313e-01, -4.407798807425313e-01, -5.280862856913414e-01, -2.268400662839541e-01, -2.571583546790259e-01, -3.068535776168537e-01, -2.802142588574288e-01, -2.802142588574288e-01, -3.877662401117429e-01, -4.949281539286908e-02, -6.596554704176662e-02, -2.872920562088783e-01, -9.171193436525431e-02, -9.171193436525432e-02, -1.495131496582644e-02, -1.851615958396101e-03, -3.516997842581767e-03, -8.745910886248151e-02, -5.235064542977128e-03, -5.235064542977118e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_molb0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.880549304621767e+01, -1.880556059238488e+01, -1.880586320853374e+01, -1.880475710677325e+01, -1.880552865707514e+01, -1.880552865707514e+01, -3.106147127447612e+00, -3.106181633855653e+00, -3.107254485024867e+00, -3.106043377343373e+00, -3.106177666779057e+00, -3.106177666779057e+00, -6.374864563824142e-01, -6.364303820268705e-01, -6.100527633620825e-01, -6.148909545532687e-01, -6.371030428580369e-01, -6.371030428580369e-01, -1.962234835708321e-01, -1.988680923253502e-01, -7.670446474192958e-01, -1.535514563625807e-01, -1.970123969266414e-01, -1.970123969266414e-01, -1.694814515153670e-02, -1.774192736191030e-02, -6.777301903515141e-02, -8.170057695528093e-03, -1.755726306180684e-02, -1.755726306180684e-02, -4.741212012713462e+00, -4.743558232292943e+00, -4.741450963872968e+00, -4.743275279919935e+00, -4.742416124114366e+00, -4.742416124114366e+00, -1.707349323150126e+00, -1.719990118764820e+00, -1.701282227916622e+00, -1.711034153810045e+00, -1.724177210547845e+00, -1.724177210547845e+00, -5.881700463576918e-01, -6.551236362807896e-01, -5.594010504374868e-01, -5.983684477198735e-01, -6.121042476168024e-01, -6.121042476168024e-01, -1.280873321985797e-01, -1.997503366775439e-01, -1.254603632459753e-01, -1.859393200856902e+00, -1.378075252933794e-01, -1.378075252933794e-01, -7.881931004420670e-03, -9.004656291907984e-03, -6.749528932222346e-03, -8.895321295252631e-02, -8.204531494080172e-03, -8.204531494080168e-03, -6.276183185240007e-01, -6.224108394762220e-01, -6.244525515319215e-01, -6.259058419790802e-01, -6.251937181784319e-01, -6.251937181784319e-01, -6.091545118366577e-01, -5.025922932732243e-01, -5.347071647383239e-01, -5.651926040941547e-01, -5.498243040392558e-01, -5.498243040392558e-01, -6.837760820236976e-01, -2.402594213706563e-01, -2.802951584200617e-01, -3.625049605714570e-01, -3.178313341409595e-01, -3.178313341409595e-01, -4.568237120837602e-01, -6.366334499245407e-02, -8.249833136240005e-02, -3.517238820387721e-01, -1.073931468540835e-01, -1.073931468540835e-01, -1.984043076892358e-02, -2.468583320298512e-03, -4.687818484429923e-03, -1.024207725602965e-01, -6.974077230360570e-03, -6.974077230360558e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_molb0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.218101302316758e-09, -6.218064875213815e-09, -6.217824280109234e-09, -6.218422328122585e-09, -6.218082744661647e-09, -6.218082744661647e-09, -7.464298235958664e-06, -7.464379779461944e-06, -7.465413696407964e-06, -7.457490831788504e-06, -7.464217126335166e-06, -7.464217126335166e-06, -3.570637620189688e-03, -3.580957321056190e-03, -3.775980674665533e-03, -3.680987450916422e-03, -3.574434372627716e-03, -3.574434372627716e-03, -2.966312096508928e-01, -2.882070922237217e-01, -1.861511539339898e-03, -5.231410838429166e-01, -2.942126737729974e-01, -2.942126737729974e-01, -3.032923549126456e+00, -3.039304330949351e+00, -1.240736450110695e+00, -2.161554379738142e+00, -3.157191903383688e+00, -3.157191903383688e+00, -1.625888306848003e-06, -1.624669445031743e-06, -1.625761283695163e-06, -1.624813799987069e-06, -1.625270715053575e-06, -1.625270715053575e-06, -5.618424637845055e-05, -5.514828888375387e-05, -5.610072115957221e-05, -5.530150070621068e-05, -5.555791395508370e-05, -5.555791395508370e-05, -5.283703624740724e-03, -1.964882794228772e-03, -6.432810954705238e-03, -3.520180373208705e-03, -4.447820813572163e-03, -4.447820813572163e-03, -6.516490027366659e-01, -2.135370514495456e-01, -7.398804798315810e-01, -5.281945521967923e-05, -6.693746142428670e-01, -6.693746142428670e-01, -2.293229839531946e+00, -2.296694929273888e+00, -6.572105533152788e+00, -1.192542866210974e+00, -3.391810014837297e+00, -3.391810014838169e+00, -8.174512422378048e-04, -2.120519452329410e-03, -1.698326278831206e-03, -1.339284533344724e-03, -1.522595024975707e-03, -1.522595024975707e-03, -6.147070427904803e-04, -9.692183419636513e-03, -7.673453607877292e-03, -5.478960058682768e-03, -6.631974112076101e-03, -6.631974112076095e-03, -1.808030307015683e-03, -1.189128609998664e-01, -7.595399726375222e-02, -3.395576475467232e-02, -5.258541588784844e-02, -5.258541588784842e-02, -1.396115132456851e-02, -1.055631935098610e+00, -1.040366136660142e+00, -3.771775393334061e-02, -1.108009280024524e+00, -1.108009280024524e+00, -2.277057867441577e+00, -3.960141045202425e+00, -3.407075354653227e+00, -1.349718582212940e+00, -4.954444778738648e+00, -4.954444778736169e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
