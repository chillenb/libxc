
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse_sol_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.542211022713065e+01, -1.542213997673117e+01, -1.542230643024573e+01, -1.542186311419172e+01, -1.542209053848492e+01, -1.542209053848492e+01, -2.585719207662143e+00, -2.585708916196482e+00, -2.585533379957072e+00, -2.586319476787741e+00, -2.585767850450997e+00, -2.585767850450997e+00, -5.434706646274012e-01, -5.430662890017058e-01, -5.344875600887519e-01, -5.383450090319318e-01, -5.373013938961013e-01, -5.373013938961013e-01, -1.700083020680261e-01, -1.714449300409662e-01, -6.252554177469509e-01, -1.430719339853657e-01, -1.529216048227195e-01, -1.529216048227194e-01, -1.007536890233778e-02, -1.060224202221524e-02, -5.396033504320658e-02, -5.826036042403510e-03, -7.317875354360011e-03, -7.317875354360014e-03, -3.785691897694345e+00, -3.785903766237804e+00, -3.785706409185205e+00, -3.785893354206598e+00, -3.785796462579531e+00, -3.785796462579531e+00, -1.536441615353711e+00, -1.544982446091325e+00, -1.533908903256624e+00, -1.541418835028724e+00, -1.542426704014404e+00, -1.542426704014404e+00, -4.782604176849274e-01, -5.194795943322185e-01, -4.458685788700972e-01, -4.649807689747988e-01, -4.853599880464108e-01, -4.853599880464108e-01, -1.136578138399665e-01, -1.779112495188379e-01, -1.073169432215307e-01, -1.437003107096006e+00, -1.241316392500919e-01, -1.241316392500919e-01, -4.496095399457980e-03, -5.695453358317545e-03, -4.354701321826158e-03, -7.944502357487368e-02, -5.245780765994913e-03, -5.245780765994914e-03, -4.872984789331520e-01, -4.822614269580271e-01, -4.839376393989974e-01, -4.853972095292704e-01, -4.846580727847015e-01, -4.846580727847015e-01, -4.764709845087569e-01, -4.092479655810993e-01, -4.256532354812352e-01, -4.438696217583395e-01, -4.343013493802059e-01, -4.343013493802059e-01, -5.415890732906059e-01, -2.113208043669825e-01, -2.411349831336463e-01, -3.001000313038807e-01, -2.674778498810439e-01, -2.674778498810437e-01, -3.799192980954772e-01, -5.203183718591176e-02, -6.736621234281545e-02, -2.904649002838753e-01, -9.420986141882415e-02, -9.420986141882405e-02, -1.419505402242790e-02, -1.523207314220597e-03, -3.196731494091720e-03, -9.013370356539629e-02, -4.854216546076562e-03, -4.854216546076586e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse_sol_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.936593135425343e+01, -1.936600158259737e+01, -1.936630370010575e+01, -1.936525904996302e+01, -1.936580786169062e+01, -1.936580786169062e+01, -3.223241966426436e+00, -3.223276542660299e+00, -3.224152103525618e+00, -3.223219808981597e+00, -3.223358290224478e+00, -3.223358290224478e+00, -6.789699048634854e-01, -6.777147212411847e-01, -6.461268850863225e-01, -6.516421420927189e-01, -6.510918264511844e-01, -6.510918264511844e-01, -1.869009129812532e-01, -1.907063471316379e-01, -7.843157745662572e-01, -1.444671008473892e-01, -1.587554044045079e-01, -1.587554044045074e-01, -1.339951936563195e-02, -1.409528264813029e-02, -6.671161658162574e-02, -7.761768968720656e-03, -9.743343028906105e-03, -9.743343028906110e-03, -4.866892822780951e+00, -4.868743453513750e+00, -4.866976639965992e+00, -4.868610410702207e+00, -4.867831649458867e+00, -4.867831649458867e+00, -1.767518646832186e+00, -1.782572920695933e+00, -1.752192100121153e+00, -1.765443371489972e+00, -1.783328195065257e+00, -1.783328195065257e+00, -6.246643499899526e-01, -6.837452650511335e-01, -5.807778768255950e-01, -6.126295750608745e-01, -6.357155809104160e-01, -6.357155809104160e-01, -1.195584537652121e-01, -1.813806363632524e-01, -1.144096146719346e-01, -1.896920581015779e+00, -1.255374002994114e-01, -1.255374002994114e-01, -5.991547315569484e-03, -7.587648751507449e-03, -5.799815112209338e-03, -9.075419954901791e-02, -6.986461420787200e-03, -6.986461420787207e-03, -6.361334366583905e-01, -6.341079031757890e-01, -6.350965179484288e-01, -6.356985510037656e-01, -6.354230683000633e-01, -6.354230683000633e-01, -6.196448226922997e-01, -5.195520708019694e-01, -5.534666691466948e-01, -5.846490175170702e-01, -5.693033942100029e-01, -5.693033942100029e-01, -7.134420698550697e-01, -2.248225934275434e-01, -2.743269208407732e-01, -3.821673617946663e-01, -3.248777342230112e-01, -3.248777342230112e-01, -4.830256442576218e-01, -6.476707836167039e-02, -8.069095023851976e-02, -3.785667609119464e-01, -1.013182985892763e-01, -1.013182985892761e-01, -1.883578886725272e-02, -2.030696352133955e-03, -4.260678138124314e-03, -9.833930793712108e-02, -6.465309476478999e-03, -6.465309476479039e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse_sol_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.974344682699490e-09, -2.974313411633967e-09, -2.974162092964330e-09, -2.974627592870525e-09, -2.974385426320513e-09, -2.974385426320513e-09, -3.292489109621652e-06, -3.292327992131873e-06, -3.288285851359943e-06, -3.292972265731452e-06, -3.292001936885512e-06, -3.292001936885512e-06, -1.149649765030886e-03, -1.169335332375770e-03, -1.638710253180452e-03, -1.581080491795016e-03, -1.581974205996064e-03, -1.581974205996064e-03, -2.470949825664335e-01, -2.304630872416919e-01, -6.516803841609113e-04, -5.594890309159125e-01, -4.297919704282387e-01, -4.297919704282404e-01, -4.286211200854505e+00, -4.524864748128283e+00, -2.053602495903988e+00, -3.913143186867067e+00, -4.961791745798364e+00, -4.961791745797565e+00, -6.337953532297676e-07, -6.316846207469883e-07, -6.337050467696595e-07, -6.318419420477715e-07, -6.327246935139919e-07, -6.327246935139919e-07, -3.116341117589838e-05, -3.032878290361546e-05, -3.174714515993224e-05, -3.100211552991196e-05, -3.041181555737904e-05, -3.041181555737904e-05, 3.564686813134783e-04, 3.133081217254704e-03, 2.162772898654962e-04, 4.436406846345821e-03, 6.451258053488465e-04, 6.451258053488465e-04, -9.353375301837875e-01, -2.276443461021454e-01, -1.072764051392271e+00, 8.776629135126549e-06, -9.191044762925850e-01, -9.191044762925850e-01, -5.161275346201776e+00, -4.604957758964248e+00, -2.888163289134289e+01, -1.904330393551118e+00, -1.344120084291154e+01, -1.344120084289801e+01, 6.515979798005832e-03, 4.725533288571771e-03, 5.295568670508550e-03, 5.813726202244135e-03, 5.549066004846941e-03, 5.549066004846941e-03, 8.071299126147395e-03, -2.279937175977464e-03, 9.320273896783540e-05, 2.747774061075523e-03, 1.375416803357598e-03, 1.375416803357598e-03, 2.359647303111447e-03, -1.061516045495815e-01, -5.175160081027552e-02, -5.482830841256010e-03, -2.303821201565590e-02, -2.303821201565592e-02, -2.779260233544143e-03, -1.903111226320508e+00, -1.711880075331201e+00, 5.040874478457261e-03, -1.796945241464662e+00, -1.796945241464682e+00, -3.438487341628372e+00, -2.267784200948896e+01, -1.095658623336451e+01, -1.895411382074868e+00, -1.697962162898634e+01, -1.697962162898127e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
