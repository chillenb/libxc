
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b3p86_nwchem_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86_nwchem", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.689866397031913e+01, -1.689868412667743e+01, -1.689883392524152e+01, -1.689850266293934e+01, -1.689867409959028e+01, -1.689867409959028e+01, -2.858342700243647e+00, -2.858323842848018e+00, -2.857921003433628e+00, -2.859207480958032e+00, -2.858344892610183e+00, -2.858344892610183e+00, -6.111618661095086e-01, -6.109449435998544e-01, -6.067134479722666e-01, -6.105015092706191e-01, -6.110808390311649e-01, -6.110808390311649e-01, -2.039235793191243e-01, -2.054701003076344e-01, -7.112506454348780e-01, -1.672419815344085e-01, -2.043758544599202e-01, -2.043758544599202e-01, -5.870062445451747e-02, -5.961223621793458e-02, -1.048130070469331e-01, -4.918708051316976e-02, -5.906514213419029e-02, -5.906514213419029e-02, -4.128330731584994e+00, -4.128029131967488e+00, -4.128304515809583e+00, -4.128069918036907e+00, -4.128169250364325e+00, -4.128169250364325e+00, -1.740142896191003e+00, -1.748342041505831e+00, -1.740630398245977e+00, -1.746995508419154e+00, -1.745136412379539e+00, -1.745136412379539e+00, -5.248170191637057e-01, -5.561205761260107e-01, -5.014503303410094e-01, -5.132882552109178e-01, -5.413390105184666e-01, -5.413390105184666e-01, -1.435916137799811e-01, -2.145233134987412e-01, -1.405963449519910e-01, -1.551008008976282e+00, -1.515723168430246e-01, -1.515723168430246e-01, -4.820388662041324e-02, -5.008340713820433e-02, -3.865541300703167e-02, -1.139395756414628e-01, -4.568893239093412e-02, -4.568893239093413e-02, -5.294061510747246e-01, -5.283403383505485e-01, -5.286955368042658e-01, -5.289863707247719e-01, -5.288383195603410e-01, -5.288383195603410e-01, -5.140702356599792e-01, -4.686174238799760e-01, -4.813059539683383e-01, -4.933155963938950e-01, -4.870959665460929e-01, -4.870959665460929e-01, -5.805084756663225e-01, -2.538172092121398e-01, -2.867338002983626e-01, -3.425882133540636e-01, -3.127388548290698e-01, -3.127388548290697e-01, -4.283519071387395e-01, -1.056929277367570e-01, -1.134493956173006e-01, -3.228475983242676e-01, -1.244572920230741e-01, -1.244572920230741e-01, -6.464306957520498e-02, -3.270866100447412e-02, -3.910689447953056e-02, -1.193825097181883e-01, -4.089895786060202e-02, -4.089895786060201e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b3p86_nwchem_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86_nwchem", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.037049560425643e+01, -2.037056059384093e+01, -2.037086400119476e+01, -2.036979951749348e+01, -2.037052976491040e+01, -2.037052976491040e+01, -3.387883095702918e+00, -3.387915772453805e+00, -3.388947816699467e+00, -3.387858203746732e+00, -3.387913737392999e+00, -3.387913737392999e+00, -7.164188632723346e-01, -7.153607027997783e-01, -6.868337052148434e-01, -6.922166743924592e-01, -7.160349766148979e-01, -7.160349766148979e-01, -2.302225987918692e-01, -2.334769927645106e-01, -8.542054169213118e-01, -1.652676474754551e-01, -2.312125017321363e-01, -2.312125017321363e-01, -3.070656585870100e-02, -3.141553764335753e-02, -5.255266906965440e-02, -2.079690522677282e-02, -3.112701335167213e-02, -3.112701335167213e-02, -5.125413698460553e+00, -5.127571256822335e+00, -5.125634190460555e+00, -5.127311808990180e+00, -5.126520094563269e+00, -5.126520094563269e+00, -1.863598985557579e+00, -1.878731959514675e+00, -1.854700330743682e+00, -1.866494360130645e+00, -1.885473000223582e+00, -1.885473000223582e+00, -6.511111727261191e-01, -7.142052672849796e-01, -6.205448760642673e-01, -6.545229651359886e-01, -6.754202397671173e-01, -6.754202397671173e-01, -1.146089020867111e-01, -2.213812925440568e-01, -1.149693089279811e-01, -2.003649550054958e+00, -1.391523783504768e-01, -1.391523783504768e-01, -2.027404137614797e-02, -2.194013170151931e-02, -1.712781799421354e-02, -6.873980385861525e-02, -2.019714052862621e-02, -2.019714052862620e-02, -6.847849573932442e-01, -6.790989027151001e-01, -6.811619213156671e-01, -6.827405768365262e-01, -6.819528983484541e-01, -6.819528983484541e-01, -6.652622902928658e-01, -5.648880324792903e-01, -5.942785010651230e-01, -6.216549482831161e-01, -6.077806219877789e-01, -6.077806219877790e-01, -7.450115737117254e-01, -2.742062947554334e-01, -3.239515688830009e-01, -4.117317433779520e-01, -3.656100251954378e-01, -3.656100251954378e-01, -5.151878776087978e-01, -5.167376611122113e-02, -6.090270699103553e-02, -3.959449551755242e-01, -9.472389652194868e-02, -9.472389652194868e-02, -3.421643271662460e-02, -9.917018021768313e-03, -1.448531952184353e-02, -9.193747207469513e-02, -1.783974725825496e-02, -1.783974725825496e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b3p86_nwchem_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b3p86_nwchem", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.392150242483915e-09, -5.392127690585945e-09, -5.391945170791035e-09, -5.392316101870955e-09, -5.392139034090160e-09, -5.392139034090160e-09, -6.417165056259493e-06, -6.417203125751483e-06, -6.417230565942784e-06, -6.411980313705361e-06, -6.417080282601049e-06, -6.417080282601049e-06, -2.802521390687019e-03, -2.812221278655202e-03, -3.062821468431844e-03, -2.980542906229681e-03, -2.806061256316015e-03, -2.806061256316015e-03, -2.486009046489305e-01, -2.380017221535858e-01, -1.469190178392371e-03, -7.561150347396361e-01, -2.453592862106369e-01, -2.453592862106369e-01, -2.066579506034764e+03, -1.819757748118259e+03, -3.285193338608563e+01, -1.494220664796421e+04, -1.896591526950319e+03, -1.896591526950319e+03, -1.421159619456012e-06, -1.420286267974624e-06, -1.421067609729319e-06, -1.420388707090067e-06, -1.420718165061166e-06, -1.420718165061166e-06, -5.109448839026392e-05, -4.996207056306791e-05, -5.132345060343338e-05, -5.043499614262515e-05, -5.002549901331854e-05, -5.002549901331854e-05, -4.500058781567118e-03, -2.917336377102701e-03, -5.435522095976633e-03, -4.316510194362864e-03, -3.904670947912323e-03, -3.904670947912323e-03, -2.257114784635549e+00, -2.387092123000751e-01, -2.381006930743113e+00, -5.259290861525752e-05, -1.354359230683057e+00, -1.354359230683057e+00, -1.684551165873378e+04, -1.149539361263127e+04, -3.548463962754200e+04, -1.199709595686926e+01, -1.677559765957909e+04, -1.677559765957909e+04, -2.888955677606613e-03, -3.519565176895767e-03, -3.355568509361148e-03, -3.193252724828856e-03, -3.279436821369156e-03, -3.279436821369156e-03, -3.043094760962285e-03, -7.594106287008638e-03, -6.441539569684624e-03, -5.432427665465309e-03, -5.943943154661111e-03, -5.943943154661109e-03, -2.488837379155595e-03, -1.090987948568074e-01, -6.123508888534421e-02, -2.673893528885759e-02, -4.059310051649675e-02, -4.059310051649678e-02, -1.091223533028115e-02, -3.858635124707844e+01, -1.624772195507845e+01, -3.267930293470193e-02, -4.868982327642568e+00, -4.868982327642568e+00, -1.215125936694727e+03, -5.577978533607929e+05, -8.401653453201659e+04, -5.836566045299560e+00, -2.978831312029281e+04, -2.978831312029292e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
