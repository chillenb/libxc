
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.092732061649784e+01, -2.092734431143417e+01, -2.092752751312111e+01, -2.092713795705383e+01, -2.092733246463360e+01, -2.092733246463360e+01, -3.316918228876863e+00, -3.316889923960414e+00, -3.316257014660015e+00, -3.318091571144277e+00, -3.316918605634573e+00, -3.316918605634573e+00, -5.170445724933661e-01, -5.169134778307204e-01, -5.150781453610279e-01, -5.195555581084683e-01, -5.169939669982879e-01, -5.169939669982879e-01, -6.137282402236655e-02, -6.379299570381122e-02, -6.347326043047909e-01, -1.773884996236175e-02, -6.210844144137279e-02, -6.210844144137279e-02, 4.308794398010354e-03, 4.493745658191216e-03, 1.293617964828356e-02, 2.179745529483385e-03, 4.453567515925409e-03, 4.453567515925409e-03, -4.897198851701986e+00, -4.896716969894854e+00, -4.897155558173900e+00, -4.896780742636721e+00, -4.896942675435203e+00, -4.896942675435203e+00, -1.944535576487791e+00, -1.953506047242548e+00, -1.947294371448367e+00, -1.954169838909607e+00, -1.947388490790248e+00, -1.947388490790248e+00, -4.051244464350275e-01, -4.482201168907954e-01, -3.782619029824452e-01, -3.931230957164775e-01, -4.236334744507798e-01, -4.236334744507798e-01, 3.322322098484265e-03, -6.034639048518967e-02, 4.346303096307309e-03, -1.668635060491329e+00, -4.202229765545068e-03, -4.202229765545068e-03, 2.107335727575921e-03, 2.389612672848179e-03, 1.824033040138347e-03, 1.390407636080087e-02, 2.191823489242317e-03, 2.191823489242314e-03, -4.229342699881685e-01, -4.170813249924012e-01, -4.198806676183848e-01, -4.216663789590757e-01, -4.208413947482734e-01, -4.208413947482734e-01, -4.052218217592043e-01, -3.444660552600783e-01, -3.552789377298041e-01, -3.668462571184786e-01, -3.602729421062116e-01, -3.602729421062116e-01, -4.759469897843420e-01, -1.029566284795648e-01, -1.414141865527503e-01, -2.034294624889102e-01, -1.715280148262737e-01, -1.715280148262734e-01, -2.984593711044641e-01, 1.224594801591580e-02, 1.356260450337099e-02, -1.809169615603538e-01, 1.128099636088244e-02, 1.128099636088221e-02, 4.950758983417776e-03, 6.856388541591568e-04, 1.282195265546868e-03, 1.258028383288888e-02, 1.880241450085408e-03, 1.880241450085420e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.511970058349009e+01, -2.511978709320570e+01, -2.512018162807133e+01, -2.511876483232588e+01, -2.511974613391914e+01, -2.511974613391914e+01, -3.907028482007553e+00, -3.907072954177474e+00, -3.908462848080541e+00, -3.906929055269745e+00, -3.907068650959167e+00, -3.907068650959167e+00, -6.145941658044602e-01, -6.136677980680056e-01, -5.842454336963533e-01, -5.904945565414128e-01, -6.142578507226630e-01, -6.142578507226630e-01, -1.315687222931354e-01, -1.338879213118942e-01, -7.697777507219892e-01, -5.295101640836510e-02, -1.323226483419361e-01, -1.323226483419361e-01, 5.818203788867020e-03, 6.083921000960704e-03, 2.019248304831501e-02, 2.886300915746735e-03, 6.031356693157837e-03, 6.031356693157837e-03, -6.112624367003417e+00, -6.115882870349531e+00, -6.112955881569187e+00, -6.115489521521437e+00, -6.114296496908259e+00, -6.114296496908259e+00, -1.928425109883211e+00, -1.953823424929580e+00, -1.906066157954538e+00, -1.926449999020313e+00, -1.972760941420986e+00, -1.972760941420986e+00, -5.327091171050928e-01, -6.639306785239902e-01, -4.952944293944063e-01, -5.846676773497016e-01, -5.664910805143396e-01, -5.664910805143396e-01, 6.006140846281054e-04, -1.022302146769287e-01, -3.528299109146614e-04, -2.254259844604735e+00, -2.352340543802781e-02, -2.352340543802781e-02, 2.790982796904845e-03, 3.166450941456881e-03, 2.427129726055789e-03, 2.157583447680982e-02, 2.909581515361936e-03, 2.909581515361963e-03, -6.043892123125809e-01, -6.200903011805921e-01, -6.161098957422072e-01, -6.102243398402384e-01, -6.133494733141160e-01, -6.133494733141160e-01, -5.815551606201050e-01, -4.328056661053350e-01, -4.637326879853488e-01, -5.181676242720782e-01, -4.866180651459499e-01, -4.866180651459496e-01, -7.013648412116756e-01, -1.571980415468345e-01, -2.077983484352281e-01, -2.689204678986585e-01, -2.387222890504893e-01, -2.387222890504924e-01, -3.785926828603061e-01, 1.865601902701937e-02, 2.151102188001562e-02, -2.422320899173036e-01, 1.205759466318964e-02, 1.205759466319042e-02, 6.698924507103065e-03, 9.113158409926096e-04, 1.700633627227881e-03, 1.299507605231143e-02, 2.498583663085375e-03, 2.498583663085444e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.189508682136940e-09, -7.189467716776764e-09, -7.189192490680535e-09, -7.189865178736013e-09, -7.189487851369789e-09, -7.189487851369789e-09, -9.259388731400712e-06, -9.259486198410017e-06, -9.260650986659855e-06, -9.250903176457478e-06, -9.259283504881369e-06, -9.259283504881369e-06, -4.452532639920707e-03, -4.451726026812846e-03, -4.594472304936928e-03, -4.479342860477941e-03, -4.452279310785954e-03, -4.452279310785954e-03, 1.910838890337246e-01, 1.868038040879370e-01, -2.574957408181884e-03, 5.093776260294686e-02, 1.904179142921485e-01, 1.904179142921485e-01, -1.232363701035778e+01, -1.223647034677068e+01, -2.845309511850287e+00, -9.765368987537508e+00, -1.273085521979809e+01, -1.273085521979809e+01, -1.928126321681547e-06, -1.925323191761211e-06, -1.927841377438116e-06, -1.925662319856439e-06, -1.926697287523021e-06, -1.926697287523021e-06, -8.485878656556368e-05, -8.223664496093789e-05, -8.640556951178136e-05, -8.426981616104757e-05, -8.128357827270042e-05, -8.128357827270042e-05, -8.357556768824470e-03, 7.878963007045195e-03, -1.029314116313866e-02, 5.609961947165674e-03, -6.725179125176573e-03, -6.725179125176573e-03, -5.273902282641795e-01, -6.419918207945777e-02, -4.754885649366383e-01, -3.401223090763134e-05, -1.146603639101820e-01, -1.146603639101820e-01, -1.039745548655562e+01, -1.026559959775743e+01, -3.018841890224278e+01, -1.787269425088110e+00, -1.529957150680364e+01, -1.529957150684956e+01, -2.431078370958719e-03, 1.138520745182233e-02, 9.792145155832040e-03, 5.382948932647225e-03, 7.974775394295775e-03, 7.974775394295809e-03, 2.252617776533924e-04, -1.299938468218979e-02, -1.231675651931093e-02, -5.457841476919328e-03, -1.023415265131772e-02, -1.023415265131782e-02, 5.518585904953218e-03, -4.067187202139463e-02, -2.652479080019299e-02, -3.640184335546669e-02, -3.043572100190304e-02, -3.043572100190169e-02, -1.774199593844289e-02, -2.669703370679071e+00, -1.973448181982712e+00, -5.757522776773576e-02, -8.000181033621401e-01, -8.000181033621654e-01, -8.995663683337391e+00, -1.950976664108335e+01, -1.615138370631760e+01, -8.120149548882077e-01, -2.270101782960816e+01, -2.270101782956490e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
