
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.686206174330255e+01, -1.686208815604682e+01, -1.686225263036897e+01, -1.686185870129169e+01, -1.686205842058344e+01, -1.686205842058344e+01, -2.847175299893082e+00, -2.847151916500013e+00, -2.846680212866378e+00, -2.848030770802136e+00, -2.847214730448567e+00, -2.847214730448567e+00, -5.968127033121636e-01, -5.966823374153004e-01, -5.953332969249998e-01, -5.993203088106279e-01, -6.006369819114750e-01, -6.006369819114750e-01, -1.869957307407377e-01, -1.882466495889582e-01, -6.865472544733014e-01, -1.562444070274820e-01, -1.734284171993324e-01, -1.734284171993323e-01, -6.564822548786346e-03, -6.954798422975791e-03, -4.505777574549424e-02, -3.615027229491191e-03, -7.171285307410655e-03, -7.171285307410655e-03, -4.129665620243234e+00, -4.129527171135861e+00, -4.129666204650293e+00, -4.129543846204969e+00, -4.129591426744531e+00, -4.129591426744531e+00, -1.739668385168376e+00, -1.747528298849463e+00, -1.741037749669317e+00, -1.747912871881980e+00, -1.743449803556550e+00, -1.743449803556550e+00, -5.097342512324643e-01, -5.410722416709429e-01, -4.758854596628407e-01, -4.844951384884979e-01, -5.164061058799763e-01, -5.164061058799764e-01, -1.179359997602371e-01, -1.994454678849241e-01, -1.098676200717916e-01, -1.540376784681565e+00, -1.318688961412932e-01, -1.318688961412932e-01, -2.754824927338164e-03, -3.528391344440413e-03, -2.676887664574878e-03, -7.437085564775187e-02, -3.984032387230486e-03, -3.984032387230487e-03, -4.957240133855443e-01, -5.001653296436880e-01, -4.997196083217222e-01, -4.986755504763666e-01, -4.993010083946058e-01, -4.993010083946058e-01, -4.771134288653077e-01, -4.438560723094503e-01, -4.543499766671609e-01, -4.666410529979476e-01, -4.599776768750921e-01, -4.599776768750921e-01, -5.660132586709751e-01, -2.383604180032843e-01, -2.693278170615618e-01, -3.224470998660691e-01, -2.933140752936240e-01, -2.933140752936240e-01, -4.110848393014269e-01, -4.282299048168920e-02, -5.980492430402305e-02, -3.060991333224347e-01, -9.329880095282758e-02, -9.329880095282758e-02, -9.488363969618710e-03, -8.866299179291438e-04, -1.936492831873779e-03, -8.803189890254406e-02, -3.552638287419794e-03, -3.552638287419789e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.062249441479575e+01, -2.062247122273352e+01, -2.062259440012153e+01, -2.062254398025946e+01, -2.062288266975824e+01, -2.062296494197590e+01, -2.062175246804524e+01, -2.062152625030202e+01, -2.062255533866546e+01, -2.062207778349532e+01, -2.062255533866546e+01, -2.062207778349532e+01, -3.392782065727590e+00, -3.393047917472266e+00, -3.392828171932045e+00, -3.393107675318208e+00, -3.394092449977711e+00, -3.394451573517254e+00, -3.392439701605896e+00, -3.392820948432503e+00, -3.392155206030754e+00, -3.393960030475302e+00, -3.392155206030754e+00, -3.393960030475302e+00, -6.780298411580112e-01, -6.834722735454065e-01, -6.759939927291253e-01, -6.826416961781457e-01, -6.483796759764041e-01, -6.403274140010661e-01, -6.487949450607881e-01, -6.514532997178866e-01, -6.895381401996963e-01, -6.122569035797679e-01, -6.895381401996963e-01, -6.122569035797679e-01, -1.919729126951260e-01, -1.861840384146670e-01, -1.944186175330751e-01, -1.886846599484741e-01, -7.751148428111778e-01, -8.098886826720814e-01, -1.574238206705904e-01, -1.556793764126432e-01, -1.401719881009452e-01, -2.523553096596582e-01, -1.401719881009452e-01, -2.523553096596586e-01, -7.568695979349391e-03, -1.005030344459070e-02, -7.831993598915347e-03, -1.077297692352982e-02, -5.562946024662804e-02, -6.308091534703805e-02, -5.100005112795245e-03, -4.682788238931699e-03, -1.204352970995486e-02, 3.710282790481200e-03, -1.204352970995487e-02, 3.710282790481194e-03, -5.188209491890542e+00, -5.186994889203453e+00, -5.190509748789338e+00, -5.189217223870437e+00, -5.188336568522959e+00, -5.187070660281782e+00, -5.190310212834989e+00, -5.189089901641961e+00, -5.189389522810110e+00, -5.188111821009358e+00, -5.189389522810110e+00, -5.188111821009358e+00, -1.790920561898560e+00, -1.790835564768246e+00, -1.808560385750407e+00, -1.808048109218431e+00, -1.767269428211195e+00, -1.773664013506518e+00, -1.782543175463538e+00, -1.789034793835407e+00, -1.818087487196618e+00, -1.802841843632160e+00, -1.818087487196618e+00, -1.802841843632160e+00, -6.321156134472939e-01, -6.311017171937306e-01, -6.958319940330875e-01, -6.956586397396589e-01, -5.743736722344935e-01, -5.920618409070977e-01, -6.168966521786536e-01, -6.312633171475888e-01, -6.567288667664353e-01, -6.324469614611836e-01, -6.567288667664353e-01, -6.324469614611837e-01, -1.315495001254113e-01, -1.296833200989057e-01, -1.931722618314975e-01, -1.922338346514706e-01, -1.247063520602645e-01, -1.230380835992727e-01, -1.988514208796371e+00, -1.987724852698888e+00, -1.510919873699157e-01, -1.254622718419821e-01, -1.510919873699157e-01, -1.254622718419821e-01, -3.326546553072796e-03, -4.079012067145325e-03, -4.591293661850801e-03, -4.957531389874728e-03, -3.029809894896605e-03, -4.112050576790973e-03, -9.108671412728100e-02, -9.247337044836940e-02, -3.665963697302196e-04, -7.281066866392693e-03, -3.665963697301977e-04, -7.281066866392695e-03, -6.270854684836080e-01, -6.284937529666899e-01, -6.417791475978150e-01, -6.432689966283899e-01, -6.383851612434820e-01, -6.397347601984539e-01, -6.338919233811681e-01, -6.352588019734549e-01, -6.363217246059910e-01, -6.376694329741658e-01, -6.363217246059910e-01, -6.376694329741658e-01, -6.064366605283661e-01, -6.078901739008623e-01, -5.127456673698939e-01, -5.147018867064778e-01, -5.523233865557023e-01, -5.546921675706549e-01, -5.929295352855033e-01, -5.945469718707056e-01, -5.728973506307321e-01, -5.745895013801404e-01, -5.728973506307321e-01, -5.745895013801404e-01, -7.283409926387892e-01, -7.287603114027021e-01, -2.306700656506105e-01, -2.297834826877489e-01, -2.712179851469519e-01, -2.710050762399162e-01, -3.692267061558620e-01, -3.705594336552542e-01, -3.142768850005923e-01, -3.144224934228608e-01, -3.142768850005923e-01, -3.144224934228608e-01, -4.738376057939852e-01, -4.768247544668832e-01, -5.657666302428728e-02, -5.751826901606233e-02, -7.508410410037678e-02, -7.909487560037658e-02, -3.653446074631625e-01, -3.695781090126199e-01, -1.118000695709760e-01, -1.031747012222013e-01, -1.118000695709759e-01, -1.031747012222012e-01, -1.188708085436685e-02, -1.385778104186573e-02, -1.183729205059043e-03, -1.199531525545918e-03, -2.134804946864247e-03, -3.008590233331426e-03, -1.029572833929014e-01, -1.036700424791320e-01, -7.073273483591911e-04, -6.514630413089554e-03, -7.073273483592054e-04, -6.514630413089552e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.251089993897318e-09, 0.000000000000000e+00, -9.251136001169493e-09, -9.250957091664184e-09, 0.000000000000000e+00, -9.251040011949076e-09, -9.250529346466919e-09, 0.000000000000000e+00, -9.250425150548479e-09, -9.252023173635853e-09, 0.000000000000000e+00, -9.252337385082960e-09, -9.251003440356348e-09, 0.000000000000000e+00, -9.251575903001383e-09, -9.251003440356348e-09, 0.000000000000000e+00, -9.251575903001383e-09, -1.229404779766986e-05, 0.000000000000000e+00, -1.229257729349540e-05, -1.229372808617590e-05, 0.000000000000000e+00, -1.229221401795407e-05, -1.228539259062138e-05, 0.000000000000000e+00, -1.228235574442275e-05, -1.229200519433097e-05, 0.000000000000000e+00, -1.228902089410746e-05, -1.230292727582857e-05, 0.000000000000000e+00, -1.228057125870063e-05, -1.230292727582857e-05, 0.000000000000000e+00, -1.228057125870063e-05, -7.663193854980198e-03, 0.000000000000000e+00, -7.469504651195281e-03, -7.723329768028422e-03, 0.000000000000000e+00, -7.488178415971419e-03, -8.364345218087736e-03, 0.000000000000000e+00, -8.608142791948258e-03, -8.266509406424625e-03, 0.000000000000000e+00, -8.190083077556995e-03, -6.888454280497201e-03, 0.000000000000000e+00, -9.113389184064026e-03, -6.888454280497201e-03, 0.000000000000000e+00, -9.113389184064026e-03, -8.504988009781086e-01, 0.000000000000000e+00, -9.039405684523245e-01, -8.320660143702753e-01, 0.000000000000000e+00, -8.799435362226672e-01, -4.523557488431769e-03, 0.000000000000000e+00, -3.819914625126590e-03, -1.422336684731776e+00, 0.000000000000000e+00, -1.473035348529123e+00, -1.370873590372539e+00, 0.000000000000000e+00, 8.056370965754960e+00, -1.370873590372537e+00, 0.000000000000000e+00, 8.056370965754965e+00, 1.747520779973732e+00, 0.000000000000000e+00, -4.009630872206297e+00, 2.295339325862152e+00, 0.000000000000000e+00, -4.654209892538466e+00, -1.343752454752525e+00, 0.000000000000000e+00, -3.586375677937112e+00, -1.659361648405864e+00, 0.000000000000000e+00, 2.274387441837587e-01, -1.189460672495604e+01, 0.000000000000000e+00, 1.158132949943016e+02, -1.189460672495909e+01, 0.000000000000000e+00, 1.158132949943106e+02, -2.378857118830956e-06, 0.000000000000000e+00, -2.381168005614113e-06, -2.375631329974154e-06, 0.000000000000000e+00, -2.378061291831107e-06, -2.378670604612473e-06, 0.000000000000000e+00, -2.381063337774360e-06, -2.375912837082669e-06, 0.000000000000000e+00, -2.378229979717491e-06, -2.377201689371382e-06, 0.000000000000000e+00, -2.379608327105815e-06, -2.377201689371382e-06, 0.000000000000000e+00, -2.379608327105815e-06, -1.196768633478463e-04, 0.000000000000000e+00, -1.196988363186810e-04, -1.164752290520105e-04, 0.000000000000000e+00, -1.165903949640464e-04, -1.220310776724963e-04, 0.000000000000000e+00, -1.213596320042132e-04, -1.192249086959754e-04, 0.000000000000000e+00, -1.185216687715850e-04, -1.160502210637619e-04, 0.000000000000000e+00, -1.178630388219626e-04, -1.160502210637619e-04, 0.000000000000000e+00, -1.178630388219626e-04, -1.038816094772052e-02, 0.000000000000000e+00, -1.046372586271872e-02, -9.050654246794446e-03, 0.000000000000000e+00, -9.442697572727672e-03, -1.606671956951206e-02, 0.000000000000000e+00, -1.344440254000356e-02, -1.023681863083078e-02, 0.000000000000000e+00, -8.849467585870404e-03, -8.414011937036772e-03, 0.000000000000000e+00, -1.036565894656140e-02, -8.414011937036805e-03, 0.000000000000000e+00, -1.036565894656140e-02, -1.898049406615601e+00, 0.000000000000000e+00, -2.114447529117628e+00, -6.695016436173618e-01, 0.000000000000000e+00, -6.755616350832272e-01, -1.731426452574440e+00, 0.000000000000000e+00, -2.610920604222380e+00, -1.333436107982184e-04, 0.000000000000000e+00, -1.337367185205554e-04, -1.301402976240212e+00, 0.000000000000000e+00, -2.814527459727322e+00, -1.301402976240212e+00, 0.000000000000000e+00, -2.814527459727322e+00, 6.804288208688140e-01, 0.000000000000000e+00, -1.778116704682118e+00, -5.862073600713180e-01, 0.000000000000000e+00, -1.068684673985872e+00, 2.251444925551240e+01, 0.000000000000000e+00, -2.684976072790536e+01, -3.227265211635023e+00, 0.000000000000000e+00, -3.171853917676333e+00, 8.106281800431339e+01, 0.000000000000000e+00, -3.201196741630407e+01, 8.106281800425207e+01, 0.000000000000000e+00, -3.201196741630620e+01, -6.448850870333504e-02, 0.000000000000000e+00, -6.547368704223044e-02, -1.373283039208686e-02, 0.000000000000000e+00, -1.396374033700951e-02, -2.140668612273489e-02, 0.000000000000000e+00, -2.190780793409785e-02, -3.383243036546893e-02, 0.000000000000000e+00, -3.436630475448294e-02, -2.667664957493838e-02, 0.000000000000000e+00, -2.720984829940806e-02, -2.667664957493838e-02, 0.000000000000000e+00, -2.720984829940806e-02, -1.372248380769830e-01, 0.000000000000000e+00, -1.358698121623363e-01, -2.449605029594692e-02, 0.000000000000000e+00, -2.405735315433724e-02, -1.853717150690137e-02, 0.000000000000000e+00, -1.806697339533094e-02, -1.141746341703434e-02, 0.000000000000000e+00, -1.119947880024830e-02, -1.504195488511856e-02, 0.000000000000000e+00, -1.476301301141755e-02, -1.504195488511856e-02, 0.000000000000000e+00, -1.476301301141755e-02, -6.594211041211426e-03, 0.000000000000000e+00, -6.906836811564510e-03, -3.653517042551348e-01, 0.000000000000000e+00, -3.667097450744942e-01, -2.252595329013809e-01, 0.000000000000000e+00, -2.239792803924694e-01, -9.150453824734672e-02, 0.000000000000000e+00, -8.977455183682667e-02, -1.496584431217865e-01, 0.000000000000000e+00, -1.497861771005087e-01, -1.496584431217869e-01, 0.000000000000000e+00, -1.497861771005087e-01, -3.371687696510652e-02, 0.000000000000000e+00, -3.273060050951610e-02, -2.180193643443620e+00, 0.000000000000000e+00, -2.442684937482842e+00, -1.899248969865054e+00, 0.000000000000000e+00, -3.127371003234269e+00, -1.000886706518202e-01, 0.000000000000000e+00, -9.326743270427139e-02, -1.869630335779107e+00, 0.000000000000000e+00, -4.810666561002126e+00, -1.869630335779120e+00, 0.000000000000000e+00, -4.810666561002135e+00, -1.868827040418413e-02, 0.000000000000000e+00, -2.900783609731301e+00, 1.765527589842370e+01, 0.000000000000000e+00, -2.497678341717195e+01, 9.319344311684958e+00, 0.000000000000000e+00, -9.335637764477205e+00, -3.278610623062539e+00, 0.000000000000000e+00, -3.701054528050666e+00, 8.719763626151317e+01, 0.000000000000000e+00, -2.539379068110949e+01, 8.719763626143468e+01, 0.000000000000000e+00, -2.539379068110909e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
