
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_apf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.620239540637471e+01, -1.620241801583510e+01, -1.620256837111561e+01, -1.620223096226995e+01, -1.620240066917180e+01, -1.620240066917180e+01, -2.723894456930849e+00, -2.723871082421284e+00, -2.723396636360398e+00, -2.724730626385623e+00, -2.723931011647602e+00, -2.723931011647602e+00, -5.675683023521951e-01, -5.673424361960427e-01, -5.632990886835019e-01, -5.672393506103263e-01, -5.659646370563689e-01, -5.659646370563689e-01, -1.742038456535174e-01, -1.755098389986031e-01, -6.532857434254046e-01, -1.464556214132282e-01, -1.565460493365454e-01, -1.565460493365454e-01, -2.414535492389620e-02, -2.439797627040311e-02, -6.138280641220147e-02, -2.050520711830827e-02, -2.110805132450041e-02, -2.110805132450040e-02, -3.946623937751273e+00, -3.946358018679184e+00, -3.946618993824071e+00, -3.946384114843191e+00, -3.946484985106506e+00, -3.946484985106506e+00, -1.651310248834055e+00, -1.659460899745422e+00, -1.651049413890834e+00, -1.658232608023208e+00, -1.655955832334814e+00, -1.655955832334814e+00, -4.885718235246869e-01, -5.215462201557958e-01, -4.557820017640545e-01, -4.666033636032589e-01, -4.948304847174821e-01, -4.948304847174821e-01, -1.165444802008196e-01, -1.847339119773841e-01, -1.100263749982931e-01, -1.472120344117891e+00, -1.261956456841719e-01, -1.261956456841719e-01, -1.815062566500432e-02, -1.979151476999855e-02, -1.325710494271353e-02, -8.248203464180065e-02, -1.602193258648174e-02, -1.602193258648175e-02, -4.852491349096657e-01, -4.828043695859941e-01, -4.835954898801310e-01, -4.843020113102080e-01, -4.839418079745919e-01, -4.839418079745919e-01, -4.732683972176743e-01, -4.228808090598362e-01, -4.352271806828263e-01, -4.486888812238125e-01, -4.415636492683183e-01, -4.415636492683183e-01, -5.449159529646200e-01, -2.206063928125256e-01, -2.511439241320006e-01, -3.072108761797885e-01, -2.764616261602240e-01, -2.764616261602240e-01, -3.917047008030811e-01, -6.030462601485132e-02, -7.310101276877755e-02, -2.937557471158909e-01, -9.549442861261154e-02, -9.549442861261154e-02, -2.852414525672723e-02, -1.062457163664489e-02, -1.445461137657718e-02, -9.164530963219762e-02, -1.502308322615369e-02, -1.502308322615368e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_apf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.956974568222678e+01, -1.956982111481978e+01, -1.957013918124370e+01, -1.956901726030333e+01, -1.956960757799902e+01, -1.956960757799902e+01, -3.236103890653081e+00, -3.236141482240658e+00, -3.237088023933133e+00, -3.236038690588493e+00, -3.236224555313164e+00, -3.236224555313164e+00, -6.680328235424182e-01, -6.668336787031728e-01, -6.376106699086160e-01, -6.430249176324045e-01, -6.423672459610955e-01, -6.423672459610955e-01, -1.820681333443419e-01, -1.853425323737238e-01, -7.737856311560927e-01, -1.411297867663845e-01, -1.556149770414616e-01, -1.556149770414616e-01, -1.187343949085191e-02, -1.231668672812363e-02, -5.144977571254546e-02, -7.956574979433376e-03, -9.236267641358941e-03, -9.236267641358953e-03, -4.915887001745504e+00, -4.918051644722192e+00, -4.915983853419097e+00, -4.917894825740394e+00, -4.916985504562592e+00, -4.916985504562592e+00, -1.775659256206881e+00, -1.790096370375350e+00, -1.762111484578036e+00, -1.774751893659769e+00, -1.790338237115481e+00, -1.790338237115481e+00, -6.132715824623591e-01, -6.793161561844736e-01, -5.686908928592276e-01, -6.056994449363918e-01, -6.248332690083251e-01, -6.248332690083251e-01, -1.089873235138229e-01, -1.801951126593020e-01, -1.026515374712926e-01, -1.915098775271031e+00, -1.197322703390935e-01, -1.197322703390935e-01, -6.508805107767399e-03, -7.738565065714733e-03, -5.620592813230283e-03, -7.523393146618469e-02, -6.774922179850061e-03, -6.774922179850076e-03, -6.339675618608106e-01, -6.290533642582700e-01, -6.309894326126629e-01, -6.324308723970038e-01, -6.317297063987771e-01, -6.317297063987771e-01, -6.181327025095485e-01, -5.071736721610600e-01, -5.410445310239504e-01, -5.745120444457290e-01, -5.576980410280754e-01, -5.576980410280754e-01, -7.090742649900670e-01, -2.231901749475572e-01, -2.691147577788010e-01, -3.694610511417766e-01, -3.151432105872203e-01, -3.151432105872203e-01, -4.704815683912508e-01, -4.979834995937890e-02, -6.418698423620264e-02, -3.651712480759076e-01, -8.908563023823382e-02, -8.908563023823379e-02, -1.573712283813908e-02, -2.869625317574036e-03, -4.869007187844857e-03, -8.516152729206790e-02, -6.302939704322447e-03, -6.302939704322426e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_apf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.096891036555818e-09, -5.096855968921247e-09, -5.096648440258754e-09, -5.097171237269892e-09, -5.096904640284536e-09, -5.096904640284536e-09, -6.094335665544612e-06, -6.094391893921884e-06, -6.095102764328687e-06, -6.089386834503056e-06, -6.093836144150552e-06, -6.093836144150552e-06, -2.848002156306825e-03, -2.862481337630801e-03, -3.179521126427923e-03, -3.086229290190557e-03, -3.106949731437671e-03, -3.106949731437671e-03, -3.557744024178834e-01, -3.411373084289482e-01, -1.625434456042909e-03, -7.214028016318139e-01, -5.613604253384578e-01, -5.613604253384579e-01, -3.000419087141634e+03, -2.631302277898558e+03, -1.815171948790639e+01, -1.415581893967835e+04, -7.845789431208829e+03, -7.845789431208834e+03, -1.319311551460564e-06, -1.318255410953370e-06, -1.319260383189370e-06, -1.318328334997524e-06, -1.318779980414655e-06, -1.318779980414655e-06, -4.838456361306101e-05, -4.734153907263946e-05, -4.866358017331521e-05, -4.774163780881912e-05, -4.766319081352554e-05, -4.766319081352554e-05, -3.708848605479549e-03, -8.682090190218009e-04, -5.057815659584243e-03, -1.761473878281101e-03, -3.327838120291016e-03, -3.327838120291016e-03, -1.549446575858933e+00, -2.936548675462787e-01, -1.904646390771294e+00, -3.916037884001889e-05, -1.243000349849816e+00, -1.243000349849816e+00, -3.228724571389172e+04, -1.581578694862648e+04, -5.731534151589063e+04, -5.490616125174744e+00, -2.705972198600207e+04, -2.705972198600205e+04, 4.479768491498412e-04, -8.986334038920509e-04, -4.541781295232091e-04, -5.787444391438655e-05, -2.586478188947022e-04, -2.586478188947022e-04, 1.100794032043403e-03, -8.343627750315928e-03, -6.183697601130286e-03, -3.764668294860058e-03, -5.031155174875768e-03, -5.031155174875768e-03, -9.099191357326119e-04, -1.448596002922564e-01, -8.200471317482520e-02, -2.792427154404090e-02, -5.016510163408183e-02, -5.016510163408183e-02, -1.111790194856228e-02, -1.982799902374915e+01, -8.710458642463529e+00, -2.659585495348639e-02, -3.315540527213984e+00, -3.315540527213986e+00, -1.052120868532072e+03, -1.110993284300714e+06, -1.065610534992023e+05, -3.819824335058416e+00, -3.612342619597322e+04, -3.612342619597333e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
