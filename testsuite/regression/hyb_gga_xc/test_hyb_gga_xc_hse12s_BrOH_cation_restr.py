
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse12s_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12s", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.213672617270330e+01, -1.213674080675522e+01, -1.213684658906799e+01, -1.213662803050492e+01, -1.213673675679616e+01, -1.213673675679616e+01, -2.093151166819595e+00, -2.093131228770813e+00, -2.092719653931266e+00, -2.093815641211829e+00, -2.093175499475580e+00, -2.093175499475580e+00, -4.813344285388545e-01, -4.811375637122739e-01, -4.769846669403695e-01, -4.800213159226338e-01, -4.791042719767606e-01, -4.791042719767606e-01, -1.761283838944769e-01, -1.772634660690081e-01, -5.459574242776120e-01, -1.516133212178387e-01, -1.611696548097783e-01, -1.611696548097783e-01, -1.009039186512653e-02, -1.062016867718227e-02, -5.713450461728609e-02, -5.828786690518790e-03, -7.323863914251575e-03, -7.323863914251575e-03, -2.999292747182757e+00, -2.999085792358412e+00, -2.999288657935006e+00, -2.999105837392633e+00, -2.999184507722790e+00, -2.999184507722790e+00, -1.293798628745394e+00, -1.300115084811637e+00, -1.293098125954363e+00, -1.298700853925875e+00, -1.297599943841544e+00, -1.297599943841544e+00, -4.226323653477676e-01, -4.504121675023108e-01, -3.977411035587374e-01, -4.079424934154615e-01, -4.274981262979627e-01, -4.274981262979627e-01, -1.210093949888945e-01, -1.834347147900664e-01, -1.145428799491051e-01, -1.163087953943066e+00, -1.328286677753693e-01, -1.328286677753693e-01, -4.497488637406788e-03, -5.698181484087925e-03, -4.357286045592197e-03, -8.523009282565398e-02, -5.249039563740393e-03, -5.249039563740393e-03, -4.246971178094056e-01, -4.210895950592290e-01, -4.222284319568018e-01, -4.232708345618264e-01, -4.227370807140683e-01, -4.227370807140683e-01, -4.161660473756861e-01, -3.722762820379286e-01, -3.821273913233943e-01, -3.930572436839322e-01, -3.871852678358077e-01, -3.871852678358077e-01, -4.678833478238355e-01, -2.124057810628119e-01, -2.368598319058575e-01, -2.838900789378169e-01, -2.583503418914749e-01, -2.583503418914748e-01, -3.485987561083374e-01, -5.489685930297914e-02, -7.207195456033676e-02, -2.740115850035757e-01, -1.014329094982484e-01, -1.014329094982484e-01, -1.423568688890489e-02, -1.523301618369352e-03, -3.197400596590011e-03, -9.698859037783417e-02, -4.857063118689261e-03, -4.857063118689257e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse12s_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12s", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.444757393325203e+01, -1.444763813240806e+01, -1.444789668891188e+01, -1.444694211273855e+01, -1.444744609854557e+01, -1.444744609854557e+01, -2.443371349822526e+00, -2.443405511237679e+00, -2.444253753573769e+00, -2.443216851604925e+00, -2.443467516827177e+00, -2.443467516827177e+00, -5.626296611678229e-01, -5.619553066279069e-01, -5.471288430039404e-01, -5.508778022174396e-01, -5.501641557221552e-01, -5.501641557221552e-01, -1.858859877482752e-01, -1.887589462190809e-01, -6.395941067138624e-01, -1.602337940599496e-01, -1.676024414665121e-01, -1.676024414665120e-01, -1.345161449967578e-02, -1.415759166617910e-02, -7.307000949781375e-02, -7.771305217029245e-03, -9.764327266591545e-03, -9.764327266591542e-03, -3.717045769489520e+00, -3.719222406783174e+00, -3.717141165514392e+00, -3.719062758807447e+00, -3.718151477415750e+00, -3.718151477415750e+00, -1.410396901105157e+00, -1.419301401002056e+00, -1.404434884782528e+00, -1.412393077791552e+00, -1.418123513170299e+00, -1.418123513170299e+00, -5.198274933792616e-01, -5.766334784503627e-01, -4.855730239660404e-01, -5.197521064153112e-01, -5.293148025537825e-01, -5.293148025537825e-01, -1.352672804312463e-01, -1.896604220925616e-01, -1.290369931270852e-01, -1.510092384236492e+00, -1.439258717812797e-01, -1.439258717812797e-01, -5.996465225741548e-03, -7.597192692108062e-03, -5.809548617176977e-03, -9.958208263245967e-02, -6.998424260754988e-03, -6.998424260754991e-03, -5.417038405064161e-01, -5.382512661973671e-01, -5.398325565161307e-01, -5.408609937197518e-01, -5.403812617591722e-01, -5.403812617591722e-01, -5.290459011424419e-01, -4.412593986599136e-01, -4.645117444913758e-01, -4.930680835524914e-01, -4.781965197998185e-01, -4.781965197998185e-01, -5.992121685062135e-01, -2.189419457599961e-01, -2.596326129816413e-01, -3.380736858758486e-01, -3.016855174906985e-01, -3.016855174906986e-01, -4.137807700416687e-01, -7.110571139348305e-02, -8.679612638552582e-02, -3.308969334305013e-01, -1.151181776729783e-01, -1.151181776729783e-01, -1.897410153942559e-02, -2.031061694822923e-03, -4.263134525590758e-03, -1.109239753731384e-01, -6.475851533001096e-03, -6.475851533001091e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse12s_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse12s", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.305493851404750e-09, -4.305447766544304e-09, -4.305225944853327e-09, -4.305911873840311e-09, -4.305554895387185e-09, -4.305554895387185e-09, -5.070234271665014e-06, -5.070217966336625e-06, -5.069322670199487e-06, -5.067156262828668e-06, -5.069749099520772e-06, -5.069749099520772e-06, -1.939342702403314e-03, -1.942721733462097e-03, -1.964689312668468e-03, -1.917665423471770e-03, -1.934307601776053e-03, -1.934307601776053e-03, -2.586852484849427e-01, -2.457675881433141e-01, -1.162466921954286e-03, -4.117451686178261e-01, -3.771640948126075e-01, -3.771640948126087e-01, 4.259869540793457e-03, 5.018989884868796e-03, -1.188975495943980e+00, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, -9.949461450445158e-07, -9.918148451657454e-07, -9.948117585044569e-07, -9.920479112374467e-07, -9.933588220714284e-07, -9.933588220714284e-07, -3.366413518256506e-05, -3.316173434799980e-05, -3.340199655524775e-05, -3.294452721292432e-05, -3.353067797819954e-05, -3.353067797819954e-05, -2.368582468597776e-03, 1.518561937632799e-03, -3.379586791301014e-03, 1.383973990127151e-03, -1.978279266171633e-03, -1.978279266171633e-03, -5.962257778764173e-01, -1.863583248800103e-01, -7.004765559720842e-01, -5.549098510285796e-06, -6.086532190472214e-01, -6.086532190472214e-01, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, -1.610687955428050e+00, 8.056878965244950e-03, 8.056878974167092e-03, 4.920414142802519e-03, 2.430028333906183e-03, 3.216589678449932e-03, 3.938073427993401e-03, 3.568960175062766e-03, 3.568960175062766e-03, 6.540041259404611e-03, -5.420802421691833e-03, -4.193058892784728e-03, -1.425552243274836e-03, -3.042233397406599e-03, -3.042233397406599e-03, 1.003825284973322e-03, -1.024041935707057e-01, -5.097213627378558e-02, -1.602471580705683e-02, -2.427163304031182e-02, -2.427163304031150e-02, -7.061941335493852e-03, -7.232107040600971e-01, -1.807986178892930e+00, -1.808162353200271e-02, -1.235152185526569e+00, -1.235152185526571e+00, 5.292039407050194e-03, 2.005779865925479e-03, 2.523877354250999e-03, -1.348191685382899e+00, 1.003269687435131e-02, 1.003269687251532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
