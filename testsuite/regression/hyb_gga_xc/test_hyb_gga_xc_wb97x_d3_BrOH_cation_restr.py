
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_d3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.683048278651768e+01, -1.683050506193313e+01, -1.683065831670676e+01, -1.683032579096167e+01, -1.683049231409305e+01, -1.683049231409305e+01, -2.743576841731019e+00, -2.743548161702096e+00, -2.742954327179792e+00, -2.744520842962171e+00, -2.743610195756933e+00, -2.743610195756933e+00, -4.852669221987616e-01, -4.851041203809542e-01, -4.818897558722928e-01, -4.860110092071905e-01, -4.846653548770954e-01, -4.846653548770954e-01, -8.098086672270298e-02, -8.263227600807140e-02, -5.742313942292270e-01, -5.711284796274514e-02, -6.430196079285923e-02, -6.430196079285909e-02, 4.477863811320025e-03, 4.684591336309661e-03, 1.044868538234564e-02, 2.710749253253543e-03, 3.350086132185905e-03, 3.350086132185898e-03, -4.015204420604574e+00, -4.014879290027008e+00, -4.015197281724585e+00, -4.014910098571620e+00, -4.015034952119022e+00, -4.015034952119022e+00, -1.631041059579489e+00, -1.639372067386135e+00, -1.631420679735325e+00, -1.638757756476013e+00, -1.635481151951618e+00, -1.635481151951618e+00, -3.981008656718980e-01, -4.328756425576345e-01, -3.651062294825663e-01, -3.755549678936009e-01, -4.039526595298256e-01, -4.039526595298256e-01, -3.418664682366482e-02, -9.179932300976774e-02, -2.766499858772736e-02, -1.423609126280380e+00, -4.085700383285921e-02, -4.085700383285921e-02, 2.122009282413555e-03, 2.653486396081163e-03, 2.056510271077567e-03, -2.260245061111882e-03, 2.454247186591195e-03, 2.454247186591207e-03, -3.925095612430983e-01, -3.932206913626908e-01, -3.940314772279081e-01, -3.939449029768257e-01, -3.941012590384845e-01, -3.941012590384845e-01, -3.789641909535093e-01, -3.344919578430333e-01, -3.444673819507399e-01, -3.557518008986241e-01, -3.493745379617858e-01, -3.493745379617858e-01, -4.567208080027632e-01, -1.244330327090094e-01, -1.561722593945989e-01, -2.167929142102754e-01, -1.848547750747139e-01, -1.848547750747141e-01, -3.024763482381906e-01, 1.088633938332610e-02, 5.608590546076715e-03, -2.021902028938732e-01, -1.439945281029985e-02, -1.439945281029976e-02, 6.031436128952915e-03, 7.429131110410208e-04, 1.530149955721146e-03, -1.091029006905161e-02, 2.280533155238827e-03, 2.280533155238814e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_d3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.022752833128103e+01, -2.022761288521066e+01, -2.022796093030394e+01, -2.022670352836044e+01, -2.022736633501486e+01, -2.022736633501486e+01, -3.226501516069872e+00, -3.226545585323203e+00, -3.227646649613856e+00, -3.226353839202217e+00, -3.226632862126514e+00, -3.226632862126514e+00, -5.742236055511929e-01, -5.735186568104875e-01, -5.579379918606002e-01, -5.628609892462124e-01, -5.617903483097479e-01, -5.617903483097479e-01, -1.055668127488545e-01, -1.121151595325292e-01, -6.785507299773718e-01, -2.667821877794781e-02, -5.806813198347765e-02, -5.806813198347857e-02, 5.763490517375371e-03, 6.013377031918812e-03, 5.291713233383807e-03, 3.549196413716120e-03, 4.360152276600313e-03, 4.360152276600136e-03, -5.013601016404913e+00, -5.016406941046888e+00, -5.013724716396331e+00, -5.016201883097545e+00, -5.015026271409386e+00, -5.015026271409386e+00, -1.730006519788547e+00, -1.745070282042486e+00, -1.714714328258106e+00, -1.728340675673327e+00, -1.745385345683598e+00, -1.745385345683598e+00, -5.108614622443912e-01, -5.997330956411256e-01, -4.636100150280510e-01, -5.282921430767035e-01, -5.253576623017544e-01, -5.253576623017544e-01, -1.796910907140060e-02, -5.203578210186829e-02, -1.968246132216074e-02, -1.880609391744883e+00, -1.481226220945653e-02, -1.481226220945653e-02, 2.790132220375884e-03, 3.474997481267684e-03, 2.698561891717864e-03, -1.316261557174698e-02, 3.213435969482004e-03, 3.213435969481923e-03, -5.312116882072047e-01, -5.468019995100191e-01, -5.406754286648346e-01, -5.339467397975691e-01, -5.372997819281999e-01, -5.372997819281999e-01, -5.283716398153180e-01, -4.083807904769667e-01, -4.351616735420828e-01, -4.827890459316093e-01, -4.556399115170127e-01, -4.556399115170127e-01, -6.325189941630792e-01, -1.209297576927642e-01, -1.954080474427733e-01, -2.751693535659486e-01, -2.402925123309392e-01, -2.402925123309382e-01, -3.720974956105037e-01, 6.551509220754455e-03, -4.286186724154982e-03, -2.611321664006190e-01, -1.691079252398843e-02, -1.691079252398872e-02, 7.615848353601070e-03, 9.858790143313417e-04, 2.019597715902656e-03, -1.663153811580639e-02, 2.989393279258964e-03, 2.989393279259180e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_d3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.630521681105678e-09, -5.630470892568627e-09, -5.630207108968558e-09, -5.630963484555130e-09, -5.630572572008333e-09, -5.630572572008333e-09, -7.262433319913486e-06, -7.262507275883431e-06, -7.263476580427181e-06, -7.256324542785809e-06, -7.261834106438436e-06, -7.261834106438436e-06, -3.556290179431772e-03, -3.551335884022665e-03, -3.391738766868991e-03, -3.314463365710893e-03, -3.347840334289936e-03, -3.347840334289936e-03, -1.838792238963553e-01, -1.474814376348925e-01, -2.113246322336633e-03, -1.037875048261077e+00, -5.616732337013655e-01, -5.616732337013488e-01, 7.615755398290129e+00, 7.987405399326283e+00, 1.438971475261532e+00, 7.346190097256613e+00, 9.133808437066339e+00, 9.133808437046415e+00, -1.444638806684132e-06, -1.441561849533307e-06, -1.444503652463825e-06, -1.441787717079941e-06, -1.443079919550068e-06, -1.443079919550068e-06, -5.490167560286068e-05, -5.372239395757569e-05, -5.532719369294094e-05, -5.423152717940419e-05, -5.409272110934184e-05, -5.409272110934184e-05, -6.017955125032346e-03, 6.802444144477189e-04, -8.363473804933894e-03, 2.856095763270935e-03, -5.237823195243463e-03, -5.237823195243463e-03, -1.917783272650326e+00, -4.580418410140120e-01, -1.937311750363052e+00, -5.049558899792100e-05, -1.715959588248930e+00, -1.715959588248930e+00, 9.875447253621100e+00, 8.661974237261431e+00, 5.548075061256473e+01, -8.748428047347465e-01, 2.547242705997235e+01, 2.547242706001585e+01, -1.735447738112787e-02, 1.161237910280205e-03, -3.170693690120713e-03, -9.906176588766415e-03, -6.193926886976705e-03, -6.193926886976705e-03, 1.157635602146977e-02, -1.089872708061898e-02, -1.019728099116543e-02, -4.419822928026583e-03, -8.362711972467319e-03, -8.362711972467319e-03, 6.657990798811482e-04, -1.561814086073196e-01, -5.213426856761138e-02, -3.163183484518245e-02, -3.220718152907646e-02, -3.220718152908048e-02, -1.432403184721532e-02, 1.468253794737650e+00, 2.108673495413447e-01, -4.357829706088658e-02, -1.990406260099768e+00, -1.990406260099595e+00, 5.802142131438262e+00, 4.565583038841731e+01, 2.139745107429133e+01, -1.783079835484314e+00, 3.236422829331438e+01, 3.236422829269433e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
