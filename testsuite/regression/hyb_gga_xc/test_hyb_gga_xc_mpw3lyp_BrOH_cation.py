
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646673253810791e+01, -1.646675559630387e+01, -1.646690856193594e+01, -1.646656446212632e+01, -1.646673759102430e+01, -1.646673759102430e+01, -2.780946730375690e+00, -2.780920828666272e+00, -2.780388712344270e+00, -2.781830914048748e+00, -2.780981486624194e+00, -2.780981486624194e+00, -5.856033657300483e-01, -5.854468013110685e-01, -5.825213654569754e-01, -5.865617560225151e-01, -5.855992727485639e-01, -5.855992727485639e-01, -1.766107801043450e-01, -1.783800618952673e-01, -6.735483029813881e-01, -1.423595875773540e-01, -1.685384819724609e-01, -1.685384819724609e-01, -3.039585924847152e-03, -3.257646938164965e-03, -4.482716694468058e-02, -1.642329476290563e-03, -1.902278622316010e-03, -1.902278622316011e-03, -4.014144173260432e+00, -4.013724541330992e+00, -4.014133013862257e+00, -4.013762438823795e+00, -4.013927047258816e+00, -4.013927047258816e+00, -1.694225337308218e+00, -1.702588247542640e+00, -1.693731260596483e+00, -1.701122529716103e+00, -1.699088725837591e+00, -1.699088725837591e+00, -4.980794573783714e-01, -5.202275994331472e-01, -4.655888421967493e-01, -4.666399541094171e-01, -5.038816278525230e-01, -5.038816278525230e-01, -1.048519092489931e-01, -1.811845855764734e-01, -9.890343651167757e-02, -1.484462531931717e+00, -1.205347216007361e-01, -1.205347216007361e-01, -1.275771973061368e-03, -1.613733948074089e-03, -1.309418715732573e-03, -7.409924677393429e-02, -1.485056566005057e-03, -1.485056566005057e-03, -4.783823177556297e-01, -4.804918874592678e-01, -4.798217840428467e-01, -4.792163599441810e-01, -4.795251097517540e-01, -4.795251097517540e-01, -4.646802976687878e-01, -4.353017624459663e-01, -4.447933344822559e-01, -4.532303985731798e-01, -4.489102690550125e-01, -4.489102690550125e-01, -5.446884481220792e-01, -2.217275854262920e-01, -2.569083621090015e-01, -3.153984337054084e-01, -2.845496748181386e-01, -2.845496748181386e-01, -4.029939592979803e-01, -4.138139109040580e-02, -5.915305989838870e-02, -2.992424735767861e-01, -8.987112294135001e-02, -8.987112294135002e-02, -4.692945684686719e-03, -4.627663041039768e-04, -9.275973389136392e-04, -8.582242937716604e-02, -1.385733638341619e-03, -1.385733638341619e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.989513306706166e+01, -1.989510936983502e+01, -1.989521641037726e+01, -1.989517020216245e+01, -1.989547096370878e+01, -1.989553670591187e+01, -1.989452619754643e+01, -1.989433685408244e+01, -1.989518056910689e+01, -1.989480903848794e+01, -1.989518056910689e+01, -1.989480903848794e+01, -3.273470487967451e+00, -3.273532902842109e+00, -3.273496644396275e+00, -3.273559861394821e+00, -3.274140540765181e+00, -3.274301788974165e+00, -3.273547224330851e+00, -3.273702293621676e+00, -3.272941119484701e+00, -3.274279988053798e+00, -3.272941119484701e+00, -3.274279988053798e+00, -6.720816653142949e-01, -6.736669514246707e-01, -6.711251488861325e-01, -6.730460559468984e-01, -6.548473930355558e-01, -6.530806152742170e-01, -6.586799659210113e-01, -6.592383264012912e-01, -6.692055541276525e-01, -6.529101932757865e-01, -6.692055541276525e-01, -6.529101932757865e-01, -2.030692463127223e-01, -2.032783332463742e-01, -2.043809303530401e-01, -2.048788816985749e-01, -7.684456435207855e-01, -7.865261712272009e-01, -1.751416371296684e-01, -1.754853335454365e-01, -1.751457265095072e-01, -1.955196107815563e-01, -1.751457265095072e-01, -1.955196107815562e-01, -5.351518613748938e-03, -5.383534283458486e-03, -5.859800432626740e-03, -5.955423162037182e-03, -9.939204667138624e-02, -1.023920297442722e-01, -2.413475506014970e-03, -2.437555413743011e-03, -3.181047976373824e-03, -3.950467300381425e-03, -3.181047976373823e-03, -3.950467300381426e-03, -4.950251892536309e+00, -4.949096923527333e+00, -4.952121205280788e+00, -4.950906517249798e+00, -4.950355137841537e+00, -4.949160733150818e+00, -4.951961911639881e+00, -4.950801709098182e+00, -4.951208083889489e+00, -4.950006156264934e+00, -4.951208083889489e+00, -4.950006156264934e+00, -1.830779334921654e+00, -1.830703496449196e+00, -1.844504270544458e+00, -1.844090187018856e+00, -1.818445741388641e+00, -1.820932978735200e+00, -1.830252275147915e+00, -1.832909672358719e+00, -1.847102261534494e+00, -1.840280721686303e+00, -1.847102261534494e+00, -1.840280721686303e+00, -6.013411897937203e-01, -6.003107193786026e-01, -6.622594390023603e-01, -6.626403381240157e-01, -5.510526325675937e-01, -5.641842667240616e-01, -5.823126851752130e-01, -5.950236726369104e-01, -6.213035058942250e-01, -6.003561011665642e-01, -6.213035058942251e-01, -6.003561011665643e-01, -1.553483841229255e-01, -1.541973431957645e-01, -2.197162787210655e-01, -2.197181703324271e-01, -1.485281892462501e-01, -1.474263038869197e-01, -1.896977603242393e+00, -1.896266402793437e+00, -1.592596987827637e-01, -1.503268774441531e-01, -1.592596987827637e-01, -1.503268774441531e-01, -1.860011142335871e-03, -1.781647471795936e-03, -2.412726339439992e-03, -2.370710995924656e-03, -2.039795457128728e-03, -2.015198584441586e-03, -1.212166049950256e-01, -1.223254423191574e-01, -2.602841057702686e-03, -2.285153658778855e-03, -2.602841057702685e-03, -2.285153658778856e-03, -6.193950888915478e-01, -6.211093776667677e-01, -6.118448513091488e-01, -6.135755615468873e-01, -6.144894577549237e-01, -6.162281364226718e-01, -6.167012889463086e-01, -6.184059535026319e-01, -6.155980099599431e-01, -6.173193704084279e-01, -6.155980099599431e-01, -6.173193704084279e-01, -6.054603236738777e-01, -6.068504400133032e-01, -5.053897482888564e-01, -5.066395252548410e-01, -5.302159872958261e-01, -5.317307275174069e-01, -5.578515367142938e-01, -5.591770363943810e-01, -5.434794717700037e-01, -5.448005211262672e-01, -5.434794717700037e-01, -5.448005211262672e-01, -6.912362526094149e-01, -6.923046722881167e-01, -2.577987344040513e-01, -2.578182488757991e-01, -2.921952884976908e-01, -2.924285985750699e-01, -3.666539730729340e-01, -3.676191108991729e-01, -3.249942653317272e-01, -3.248101082409840e-01, -3.249942653317272e-01, -3.248101082409840e-01, -4.679594462814209e-01, -4.697024372639323e-01, -9.716668664218839e-02, -9.763220038944907e-02, -1.202230783373663e-01, -1.201170865022650e-01, -3.541236844849474e-01, -3.568231748191280e-01, -1.289533762374896e-01, -1.216722013140718e-01, -1.289533762374896e-01, -1.216722013140718e-01, -9.264944387227827e-03, -9.537336506983780e-03, -6.178440763441800e-04, -6.226810205240132e-04, -1.333800996324068e-03, -1.262750893792444e-03, -1.225965457756508e-01, -1.227349635350218e-01, -2.471445433650639e-03, -2.050765075806582e-03, -2.471445433650637e-03, -2.050765075806583e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.031365431356063e-08, 1.274841220400531e-11, -1.031371283043748e-08, -1.031359971415878e-08, 1.274823047238091e-11, -1.031367263544509e-08, -1.031329168773502e-08, 1.274736647542279e-11, -1.031327146687826e-08, -1.031391800760427e-08, 1.275007165712744e-11, -1.031406148271239e-08, -1.031363183418894e-08, 1.274866223890103e-11, -1.031364640069223e-08, -1.031363183418894e-08, 1.274866223890103e-11, -1.031364640069223e-08, -1.336513170683187e-05, 1.657293193164913e-07, -1.337036373942009e-05, -1.336554227755957e-05, 1.657274138540434e-07, -1.337115943223778e-05, -1.337929350989536e-05, 1.656617398173525e-07, -1.338271477931470e-05, -1.334676156426210e-05, 1.656083022711586e-07, -1.335110191225578e-05, -1.337130274801517e-05, 1.657069975174313e-07, -1.336307341657356e-05, -1.337130274801517e-05, 1.657069975174313e-07, -1.336307341657356e-05, -7.540727924536607e-03, 9.968888343506726e-04, -7.609894306063228e-03, -7.531310310763858e-03, 1.002657371163989e-03, -7.616148796292741e-03, -7.534006429237097e-03, 1.150373460032001e-03, -7.411185740279823e-03, -7.258071418066298e-03, 1.102151430546700e-03, -7.299365470689051e-03, -7.907854563784466e-03, 1.198986022658691e-03, -6.604409208911542e-03, -7.907854563784466e-03, 1.198986022658691e-03, -6.604409208911542e-03, -6.805158150425018e-01, 5.237215475391398e-01, -6.852275969025454e-01, -6.798997129565048e-01, 4.947517378668578e-01, -6.795835912958512e-01, -4.361894206382015e-03, 4.636096065591808e-04, -4.284935802175263e-03, -9.463770296617241e-01, 1.459710096552193e+00, -9.522319144447310e-01, -9.524989284181610e-01, 2.074734290418172e+00, -1.832728878230883e+00, -9.524989284181598e-01, 2.074734290418172e+00, -1.832728878230884e+00, 4.258324515164790e+02, 9.684775367362953e-08, 4.154736816653437e+02, 4.420138336099587e+02, 3.973989717299094e-07, 4.321387673065150e+02, 5.753465627235788e+01, 1.601444487446484e+01, 4.794777993218312e+01, 4.413498267737178e+02, 3.603236017519639e-17, 4.316997898866416e+02, 4.370505218322336e+02, 9.326980587136617e-13, 1.197001566102931e+03, 4.370505218322346e+02, 9.326980587136617e-13, 1.197001566102946e+03, -3.089984497055642e-06, 1.945555406866249e-08, -3.092584388834584e-06, -3.092438656772286e-06, 1.943669404045627e-08, -3.094954743093714e-06, -3.090088704771125e-06, 1.945461672339093e-08, -3.092640443945596e-06, -3.092191701927037e-06, 1.943796210891388e-08, -3.094797173352720e-06, -3.091266889073424e-06, 1.944603023265204e-08, -3.093778047780083e-06, -3.091266889073424e-06, 1.944603023265204e-08, -3.093778047780083e-06, -9.770281516544463e-05, 3.575069263774713e-06, -9.771612454709495e-05, -9.580442550108876e-05, 3.439603152897640e-06, -9.586695378111814e-05, -9.760026451273940e-05, 3.678408861723842e-06, -9.778214384986069e-05, -9.596256477030806e-05, 3.554296397529071e-06, -9.610185982641098e-05, -9.676068302033647e-05, 3.454732179023738e-06, -9.659649159514405e-05, -9.676068302033647e-05, 3.454732179023738e-06, -9.659649159514405e-05, -1.571094483127595e-02, 1.962926197205732e-03, -1.584401811329397e-02, -1.458775920388787e-02, 1.291652615070126e-03, -1.462336713611829e-02, -2.147014136270929e-02, 2.955438475549466e-03, -1.988785318355066e-02, -2.383892715286965e-02, 2.427365645631359e-03, -2.145065282235221e-02, -1.430873033669312e-02, 1.891289192823606e-03, -1.644170149842563e-02, -1.430873033669312e-02, 1.891289192823606e-03, -1.644170149842562e-02, -3.394361179495186e-01, 4.672332613877405e+00, -5.015556850645875e-01, -4.171274172650049e-01, 5.163342527799332e-01, -4.198994350652769e-01, 1.815456174610440e-01, 5.810119013608300e+00, -5.465355860434195e-01, -1.874501520307649e-04, 3.963724362218452e-06, -1.877860162046699e-04, -9.471793384246315e-01, 2.928628467615868e+00, -1.631778696720587e+00, -9.471793384246315e-01, 2.928628467615868e+00, -1.631778696720587e+00, 6.490988637443113e+02, 4.722123624337811e-24, 5.615072112450316e+02, 5.324255704408469e+02, 1.070248989804715e-17, 4.921306523091228e+02, 2.934495303975712e+03, 4.926759780077053e-25, 3.202242065795318e+03, 5.635770687831917e+00, 1.310566961663784e+01, 5.637538278408210e+00, 1.511316674591295e+03, 8.370591148110280e-20, 1.381871131957722e+03, 1.511316674591291e+03, 8.370591148110278e-20, 1.381871131957723e+03, -2.332607652668955e-02, 1.915918823075954e-03, -2.313753511759939e-02, -2.054436467622359e-02, 1.972193219356560e-03, -2.034651418190333e-02, -2.106564749800006e-02, 1.952175000667434e-03, -2.087054925507388e-02, -2.175163916328800e-02, 1.935857585043213e-03, -2.155345792295003e-02, -2.136393674621650e-02, 1.944004899477782e-03, -2.116697938527031e-02, -2.136393674621650e-02, 1.944004899477782e-03, -2.116697938527031e-02, -2.710467033962388e-02, 2.199517380716389e-03, -2.679438092096267e-02, -2.568024680726932e-02, 4.701539133860148e-03, -2.552006227336367e-02, -2.474391982530767e-02, 3.743589713690373e-03, -2.457430653692876e-02, -2.429901934657648e-02, 3.012267210982818e-03, -2.409346248261102e-02, -2.451509196595892e-02, 3.362270653332450e-03, -2.430511444335077e-02, -2.451509196595892e-02, 3.362270653332450e-03, -2.430511444335077e-02, -1.197157668144766e-02, 1.015981925553359e-03, -1.197762496577333e-02, -2.452525869387663e-01, 1.979824198523446e-01, -2.463997308963579e-01, -1.682533263075229e-01, 8.949003235367266e-02, -1.691332392448303e-01, -9.408935287647099e-02, 2.511682203233427e-02, -9.321945407778029e-02, -1.282788585775650e-01, 4.791151270691024e-02, -1.289585653868660e-01, -1.282788585775650e-01, 4.791151270691025e-02, -1.289585653868661e-01, -3.512869640784111e-02, 7.055722211964756e-03, -3.484711988984505e-02, 5.882388157274558e+01, 1.538650710494547e+01, 5.765373020684600e+01, 2.348737660783836e+01, 1.636437624724675e+01, 1.972371054670039e+01, -1.246667935526686e-01, 2.986584679475967e-02, -1.214832610848942e-01, 1.960535789554564e-01, 8.449952529618647e+00, -1.952687054802484e+00, 1.960535789554486e-01, 8.449952529618647e+00, -1.952687054802493e+00, 3.112081788810066e+02, 2.976623972623037e-04, 3.137184772840018e+02, 2.411309097694785e+03, 2.482449757338739e-85, 4.119919405626372e+03, 1.289523394959691e+03, 1.447874316882853e-36, 1.348100140980184e+03, -6.344831372351850e-02, 9.606168239664360e+00, -3.699577669893760e-01, 3.027100215651843e+03, 7.123747548715075e-22, 1.460526436290503e+03, 3.027100215651839e+03, 7.123747548714702e-22, 1.460526436290514e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
