
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b5050lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.051431410127977e+01, -1.051432986992149e+01, -1.051443036029372e+01, -1.051419512822797e+01, -1.051431406535027e+01, -1.051431406535027e+01, -1.792977946571997e+00, -1.792963159923500e+00, -1.792663833137569e+00, -1.793513852178435e+00, -1.793002163301985e+00, -1.793002163301985e+00, -3.864228916804429e-01, -3.862683737484364e-01, -3.829491013977634e-01, -3.856279253654176e-01, -3.847503141507249e-01, -3.847503141507249e-01, -1.151273127699377e-01, -1.165590669722134e-01, -4.436098857421900e-01, -9.031733261159391e-02, -1.081176676170058e-01, -1.081176676170058e-01, -2.927818450864341e-02, -2.937170813859806e-02, -5.282762859949652e-02, -2.623464454381457e-02, -2.654787562863796e-02, -2.654787562863795e-02, -2.584839141977970e+00, -2.584633557606453e+00, -2.584834589471474e+00, -2.584653025078372e+00, -2.584732270723887e+00, -2.584732270723887e+00, -1.093040636885903e+00, -1.098569365053341e+00, -1.092252861603219e+00, -1.097140025309240e+00, -1.096478115447287e+00, -1.096478115447287e+00, -3.319318920130990e-01, -3.483627491479624e-01, -3.104464608256917e-01, -3.130864453615561e-01, -3.359330424735351e-01, -3.359330424735351e-01, -6.641529193316274e-02, -1.154456556154189e-01, -6.351487580516714e-02, -9.704051641539396e-01, -7.619058433515132e-02, -7.619058433515132e-02, -2.355476503100643e-02, -2.529085826096109e-02, -1.667674508315510e-02, -5.489589776544392e-02, -2.021195633500279e-02, -2.021195633500280e-02, -3.216779159380439e-01, -3.224818561530315e-01, -3.222262343258521e-01, -3.219912527454822e-01, -3.221109484432754e-01, -3.221109484432754e-01, -3.129489330027961e-01, -2.892064418653795e-01, -2.967213667115242e-01, -3.035126538312118e-01, -3.000566540609503e-01, -3.000566540609503e-01, -3.642088844317568e-01, -1.433575726884369e-01, -1.684458510744940e-01, -2.105262556295234e-01, -1.885413986137309e-01, -1.885413986137309e-01, -2.681001238857868e-01, -5.306834372522223e-02, -5.406774150042934e-02, -2.009328184070102e-01, -5.948826536199470e-02, -5.948826536199470e-02, -3.341281454253776e-02, -1.433375236887981e-02, -1.895000165307045e-02, -5.786505700246284e-02, -1.900389942815402e-02, -1.900389942815401e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b5050lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.279498911547254e+01, -1.279497394220404e+01, -1.279504180849915e+01, -1.279501249927392e+01, -1.279520403396972e+01, -1.279524516992703e+01, -1.279460543305851e+01, -1.279448638255905e+01, -1.279501819319259e+01, -1.279478639253064e+01, -1.279501819319259e+01, -1.279478639253064e+01, -2.129462151113755e+00, -2.129491082987934e+00, -2.129478365663233e+00, -2.129507176347347e+00, -2.129871708608108e+00, -2.129962134472354e+00, -2.129527809255522e+00, -2.129613119840676e+00, -2.129141699385410e+00, -2.129949317753808e+00, -2.129141699385410e+00, -2.129949317753808e+00, -4.539645594024724e-01, -4.544169535108361e-01, -4.534476838730049e-01, -4.539861628948458e-01, -4.429602918242076e-01, -4.428433178665097e-01, -4.460974111678800e-01, -4.461262694565054e-01, -4.482186611891831e-01, -4.476307813588318e-01, -4.482186611891831e-01, -4.476307813588318e-01, -1.447010156628297e-01, -1.434941476083264e-01, -1.457042583168573e-01, -1.444721376795091e-01, -5.178734209575185e-01, -5.262045992391730e-01, -1.226343892246279e-01, -1.226056417538995e-01, -1.156804363883643e-01, -1.433343670560625e-01, -1.156804363883642e-01, -1.433343670560625e-01, -1.024196222073539e-02, -1.013140786541909e-02, -1.053465177185715e-02, -1.039243897589181e-02, -3.352756609099733e-02, -3.360740091660144e-02, -7.443752588611622e-03, -7.479528705537569e-03, -8.211962198479097e-03, -7.931046986774911e-03, -8.211962198479084e-03, -7.931046986774905e-03, -3.202991027668722e+00, -3.202268991048502e+00, -3.204141162325818e+00, -3.203383631305024e+00, -3.203054400221866e+00, -3.202308864771373e+00, -3.204043934895476e+00, -3.203318677986724e+00, -3.203578985210650e+00, -3.202829231536054e+00, -3.203578985210650e+00, -3.202829231536054e+00, -1.203696990995346e+00, -1.203652943829489e+00, -1.212503547876154e+00, -1.212264833972303e+00, -1.195950088212178e+00, -1.197216029808080e+00, -1.203543751227687e+00, -1.204917373752547e+00, -1.213791130480908e+00, -1.210175613686797e+00, -1.213791130480908e+00, -1.210175613686797e+00, -4.055200702884660e-01, -4.049762826335805e-01, -4.432459284314814e-01, -4.434305612492676e-01, -3.741394306573449e-01, -3.804956246796195e-01, -3.922787269760536e-01, -3.989544338504287e-01, -4.169668316331172e-01, -4.061642771991227e-01, -4.169668316331172e-01, -4.061642771991227e-01, -9.720363382241362e-02, -9.682216071042324e-02, -1.556183630238341e-01, -1.554651262439856e-01, -8.939435995379652e-02, -8.973002707063722e-02, -1.239691266899023e+00, -1.239257090620695e+00, -1.070918833530496e-01, -1.022167650143240e-01, -1.070918833530496e-01, -1.022167650143240e-01, -6.242591779506925e-03, -6.328199996481893e-03, -7.213269702280626e-03, -7.264212076344948e-03, -5.173148426474009e-03, -5.075624411302591e-03, -5.646269691182497e-02, -5.682204869543019e-02, -6.286353990674654e-03, -6.070058481921963e-03, -6.286353990674666e-03, -6.070058481921963e-03, -4.150997851512806e-01, -4.160159916503368e-01, -4.104612500651537e-01, -4.113667332343127e-01, -4.120113476874468e-01, -4.129278156643501e-01, -4.133606287427716e-01, -4.142675055901590e-01, -4.126783530198444e-01, -4.135900173869884e-01, -4.126783530198444e-01, -4.135900173869884e-01, -4.057593638304996e-01, -4.064940588322844e-01, -3.445200850822851e-01, -3.450463543331250e-01, -3.596677731755906e-01, -3.603594239232193e-01, -3.764687759791907e-01, -3.771330569751428e-01, -3.677047844072538e-01, -3.683528970602038e-01, -3.677047844072538e-01, -3.683528970602038e-01, -4.622236853558161e-01, -4.627687999403920e-01, -1.826129684665543e-01, -1.823666125644640e-01, -2.056422751059712e-01, -2.052258516102531e-01, -2.530767253256184e-01, -2.534180316839039e-01, -2.263712173594026e-01, -2.262241199909588e-01, -2.263712173594026e-01, -2.262241199909588e-01, -3.200181206877006e-01, -3.206933130313551e-01, -3.245452248496347e-02, -3.245721237064430e-02, -4.440154371878753e-02, -4.473796456388021e-02, -2.441260769011105e-01, -2.451142739676192e-01, -7.313996157980238e-02, -7.159794372122354e-02, -7.313996157980235e-02, -7.159794372122354e-02, -1.296352814123999e-02, -1.283128661925081e-02, -3.201255513479665e-03, -2.957977363432327e-03, -4.846973764412241e-03, -4.793272739714190e-03, -6.775968813522758e-02, -6.804831129045529e-02, -5.592824780742719e-03, -5.796914847209153e-03, -5.592824780742725e-03, -5.796914847209143e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b5050lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.075492618941313e-09, 1.185558425401183e-11, -6.075526668876796e-09, -6.075458959366270e-09, 1.185541524986055e-11, -6.075501739775369e-09, -6.075274098978752e-09, 1.185461176244829e-11, -6.075261129208482e-09, -6.075662056809131e-09, 1.185712748825859e-11, -6.075748288103239e-09, -6.075479557064216e-09, 1.185581677785285e-11, -6.075495680647101e-09, -6.075479557064216e-09, 1.185581677785285e-11, -6.075495680647101e-09, -7.823180396732326e-06, 1.541225587214213e-07, -7.826136785832687e-06, -7.823412270319144e-06, 1.541207867069750e-07, -7.826585475482214e-06, -7.831133214876298e-06, 1.540597121148743e-07, -7.833091940882693e-06, -7.812627853376947e-06, 1.540100170374724e-07, -7.815102176831502e-06, -7.826490917645456e-06, 1.541018002171290e-07, -7.822144891730830e-06, -7.826490917645456e-06, 1.541018002171290e-07, -7.822144891730830e-06, -4.192185112263110e-03, 9.270722799357577e-04, -4.246472992905392e-03, -4.184550532601225e-03, 9.324368204854546e-04, -4.251240149011142e-03, -4.197152889763892e-03, 1.069807695322527e-03, -4.098342156682296e-03, -4.026730030634009e-03, 1.024962868820697e-03, -4.058933075904284e-03, -4.528039611654461e-03, 1.115015704194649e-03, -3.525538448262448e-03, -4.528039611654461e-03, 1.115015704194649e-03, -3.525538448262448e-03, -3.172435734017730e-01, 4.870430005817489e-01, -3.442927531186194e-01, -3.175458112365694e-01, 4.601020753985704e-01, -3.442408011805705e-01, -2.420041751227967e-03, 4.311409659161154e-04, -2.439913153448828e-03, -4.527399984746684e-01, 1.357480112752327e+00, -4.700971974853680e-01, -6.145838617606463e-01, 1.929431429665579e+00, -1.567229505246224e+00, -6.145838617606456e-01, 1.929431429665580e+00, -1.567229505246227e+00, -9.340526105482100e+03, 9.006507517295055e-08, -7.824410961794217e+03, -8.289114049511043e+03, 3.695673560289628e-07, -6.794519704410591e+03, -4.525371985653544e+01, 1.489288214502471e+01, -3.880205054453378e+01, -3.937813525429567e+04, 3.350885389426989e-17, -4.101421189280589e+04, -1.295832510827405e+04, 8.673770695270562e-13, -8.517884745473135e+04, -1.295832510827406e+04, 8.673770695270562e-13, -8.517884745473132e+04, -1.807541150481468e-06, 1.809299517292379e-08, -1.809006575242480e-06, -1.808903932239729e-06, 1.807545599629114e-08, -1.810321319598777e-06, -1.807598887752613e-06, 1.809212347410638e-08, -1.809036653715667e-06, -1.808765528200792e-06, 1.807663525628042e-08, -1.810234100408995e-06, -1.808253874568611e-06, 1.808413833346515e-08, -1.809668561545901e-06, -1.808253874568611e-06, 1.808413833346515e-08, -1.809668561545901e-06, -5.719276252477626e-05, 3.324691278596461e-06, -5.719924440048370e-05, -5.607386569237005e-05, 3.198712461362903e-06, -5.610383798863378e-05, -5.716012580675661e-05, 3.420793545345939e-06, -5.729641286588879e-05, -5.619008872424456e-05, 3.305373228471352e-06, -5.630288417958157e-05, -5.665490465040480e-05, 3.212781934568574e-06, -5.647952209046977e-05, -5.665490465040480e-05, 3.212781934568574e-06, -5.647952209046977e-05, -8.726488920615420e-03, 1.825453754003035e-03, -8.783160637140372e-03, -8.161101471972482e-03, 1.201192443406202e-03, -8.182353615226240e-03, -1.168108828679387e-02, 2.748455987594796e-03, -1.114252965652467e-02, -1.314103441659007e-02, 2.257366444272562e-03, -1.205995810297313e-02, -8.103598199711189e-03, 1.758833807333089e-03, -8.976986509331113e-03, -8.103598199711192e-03, 1.758833807333089e-03, -8.976986509331113e-03, -7.399026033988984e-01, 4.345108400965211e+00, -8.038158696292490e-01, -1.886594790620302e-01, 4.801730708975269e-01, -1.932049041089391e-01, -1.005245200421085e+00, 5.403210563745951e+00, -1.185117412644767e+00, -1.080894901877143e-04, 3.686127133635989e-06, -1.082679335176980e-04, -5.842421863620461e-01, 2.723523603638179e+00, -9.531577094133068e-01, -5.842421863620461e-01, 2.723523603638179e+00, -9.531577094133068e-01, -9.913231356253612e+04, 4.391412325733211e-24, -8.521311444079933e+04, -4.640222259339278e+04, 9.952946977518016e-18, -4.345545339527025e+04, -1.744585410819619e+05, 4.581716902253058e-25, -1.524097126509589e+05, -7.002059851273586e+00, 1.218782134268272e+01, -6.758944735874907e+00, -1.349814177592183e+05, 7.784361458058929e-20, -5.390285135057349e+04, -1.349814177592182e+05, 7.784361458058927e-20, -5.390285135057347e+04, -1.229481246543171e-02, 1.781738515145262e-03, -1.219021667443032e-02, -1.144139907005767e-02, 1.834071765417697e-03, -1.135541795571024e-02, -1.169558312032391e-02, 1.815455511527695e-03, -1.160575957527415e-02, -1.194097789917544e-02, 1.800280877020669e-03, -1.184178199605374e-02, -1.181413418109161e-02, 1.807857598825492e-03, -1.171967743835275e-02, -1.181413418109161e-02, 1.807857598825492e-03, -1.171967743835275e-02, -1.419904874166960e-02, 2.045475405717882e-03, -1.407573606816153e-02, -1.398538325261110e-02, 4.372269458584065e-03, -1.395969514583266e-02, -1.358272127949882e-02, 3.481409492639727e-03, -1.354163525203608e-02, -1.343875604068927e-02, 2.801304754186088e-03, -1.335839376471092e-02, -1.351040595061762e-02, 3.126795900343610e-03, -1.343340156364421e-02, -1.351040595061762e-02, 3.126795900343610e-03, -1.343340156364421e-02, -6.708678060549051e-03, 9.448281971276932e-04, -6.717959984368882e-03, -1.157828277990605e-01, 1.841168313207797e-01, -1.182281277862503e-01, -8.322845830411439e-02, 8.322264776862785e-02, -8.543139356090035e-02, -4.980150593946346e-02, 2.335777938713061e-02, -4.965567442913706e-02, -6.637589980739186e-02, 4.455605659310826e-02, -6.671797964409633e-02, -6.637589980739185e-02, 4.455605659310827e-02, -6.671797964409640e-02, -1.898505163952209e-02, 6.561578635696272e-03, -1.897188975707633e-02, -4.741941268388575e+01, 1.430892164753827e+01, -4.651889012925833e+01, -1.537550102483088e+01, 1.521830626896655e+01, -1.426095932444512e+01, -6.606850067693981e-02, 2.777420884472484e-02, -6.535678905165901e-02, -2.791944189593970e+00, 7.858164809404253e+00, -3.199937147476233e+00, -2.791944189593970e+00, 7.858164809404253e+00, -3.199937147476239e+00, -3.134305521026415e+03, 2.768157770177566e-04, -2.847337430102442e+03, -2.930643865795890e+06, 2.308592770889069e-85, -3.410171567008902e+06, -3.288478696742703e+05, 1.346473245321597e-36, -2.800871055838811e+05, -3.813739912545351e+00, 8.933405596013928e+00, -3.713743042713569e+00, -1.932474717757619e+05, 6.624839855865914e-22, -6.997941362856301e+04, -1.932474717757624e+05, 6.624839855865567e-22, -6.997941362856324e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
