
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_edf2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.762355336442359e+01, -1.762358400691392e+01, -1.762376467884484e+01, -1.762330786371147e+01, -1.762354090789852e+01, -1.762354090789852e+01, -2.959765897145325e+00, -2.959746365618420e+00, -2.959365973345627e+00, -2.960578842043760e+00, -2.959812679760155e+00, -2.959812679760155e+00, -6.154293181536593e-01, -6.151658731827905e-01, -6.095791388568222e-01, -6.139300448386898e-01, -6.133619268883592e-01, -6.133619268883592e-01, -1.835565298219319e-01, -1.853737555121871e-01, -7.093303944844612e-01, -1.494165940007947e-01, -1.748508699824527e-01, -1.748508699824527e-01, -4.020160518358470e-02, -4.036238670426265e-02, -7.803193035480183e-02, -3.582144414485765e-02, -3.657689715804904e-02, -3.657689715804902e-02, -4.305799682501065e+00, -4.305654549606325e+00, -4.305800318555357e+00, -4.305672084092261e+00, -4.305722153015432e+00, -4.305722153015432e+00, -1.774663447099321e+00, -1.784240246426935e+00, -1.772323035196095e+00, -1.780782271771723e+00, -1.781100184184548e+00, -1.781100184184548e+00, -5.269219918369450e-01, -5.549463003445846e-01, -4.917741158633700e-01, -4.967070715357120e-01, -5.336512705660789e-01, -5.336512705660789e-01, -1.158872979410252e-01, -1.894666361488614e-01, -1.103447878130320e-01, -1.595949129237783e+00, -1.278912465772887e-01, -1.278912465772887e-01, -3.211820521905510e-02, -3.453791272946198e-02, -2.281590617789922e-02, -8.962368013281620e-02, -2.771719504474133e-02, -2.771719504474135e-02, -5.113099270529007e-01, -5.123030476522801e-01, -5.119908104177948e-01, -5.116997979055148e-01, -5.118482242296474e-01, -5.118482242296474e-01, -4.970242106206256e-01, -4.571939442659881e-01, -4.693238335716728e-01, -4.806424712304933e-01, -4.748403364754073e-01, -4.748403364754073e-01, -5.810572486545424e-01, -2.306696248245665e-01, -2.671065909202970e-01, -3.304462123592899e-01, -2.967075039575300e-01, -2.967075039575300e-01, -4.230358861601445e-01, -7.784425202634766e-02, -8.490520535861849e-02, -3.145012071326478e-01, -9.925502891900836e-02, -9.925502891900836e-02, -4.603906093178037e-02, -1.946922362056819e-02, -2.581511753646175e-02, -9.608940499356841e-02, -2.604360240385128e-02, -2.604360240385126e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_edf2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.182885721963012e+01, -2.182883075873935e+01, -2.182894340100954e+01, -2.182889360673973e+01, -2.182921263820011e+01, -2.182927982560723e+01, -2.182823629990691e+01, -2.182803906148532e+01, -2.182890670578321e+01, -2.182853137147779e+01, -2.182890670578321e+01, -2.182853137147779e+01, -3.590843108535018e+00, -3.590888559712995e+00, -3.590867661802450e+00, -3.590912461685840e+00, -3.591458635509315e+00, -3.591615105529921e+00, -3.591008513860616e+00, -3.591155045249811e+00, -3.590258711659588e+00, -3.591700622759501e+00, -3.590258711659588e+00, -3.591700622759501e+00, -7.277313703409805e-01, -7.299424823714987e-01, -7.266122648051816e-01, -7.293081705514506e-01, -7.089160382605849e-01, -7.057929746684801e-01, -7.124313839498772e-01, -7.134242439463903e-01, -7.283281464575923e-01, -6.986112851846201e-01, -7.283281464575923e-01, -6.986112851846201e-01, -2.083711426145823e-01, -2.107458956542700e-01, -2.103862227595713e-01, -2.132712634986340e-01, -8.327436227245955e-01, -8.550230383806701e-01, -1.696179603193874e-01, -1.704329841771772e-01, -1.882175328719555e-01, -1.712523140017191e-01, -1.882175328719554e-01, -1.712523140017191e-01, -1.454887522730111e-02, -1.464966095671539e-02, -1.496236070572634e-02, -1.506828759097830e-02, -5.065135058499796e-02, -5.145727200247528e-02, -1.056768799989581e-02, -1.057585025863648e-02, -1.224939690333921e-02, -1.045197052016477e-02, -1.224939690333919e-02, -1.045197052016476e-02, -5.413348013518264e+00, -5.412083597472550e+00, -5.415131940791043e+00, -5.413809787832334e+00, -5.413448030000082e+00, -5.412145145681948e+00, -5.414980853744829e+00, -5.413711050553004e+00, -5.414259739790471e+00, -5.412950664638771e+00, -5.414259739790471e+00, -5.412950664638771e+00, -2.009670487220589e+00, -2.009582143509516e+00, -2.024879314472411e+00, -2.024394898015400e+00, -1.995734379059885e+00, -1.998924807463390e+00, -2.008857897222888e+00, -2.012217700017616e+00, -2.028124544460732e+00, -2.019752883042665e+00, -2.028124544460732e+00, -2.019752883042665e+00, -6.495870522049426e-01, -6.483600497929140e-01, -7.131271377421816e-01, -7.135233825131641e-01, -5.939749033624695e-01, -6.097895227047858e-01, -6.261153708698722e-01, -6.410827178869557e-01, -6.720740025302510e-01, -6.472519265744342e-01, -6.720740025302510e-01, -6.472519265744342e-01, -1.292316698366997e-01, -1.292807363608134e-01, -2.180693396567576e-01, -2.183688507196329e-01, -1.188910595543114e-01, -1.209769366831278e-01, -2.059565795209948e+00, -2.058767315188545e+00, -1.437314853436029e-01, -1.425370210032384e-01, -1.437314853436029e-01, -1.425370210032384e-01, -8.778829270106226e-03, -8.965459619444635e-03, -1.020797090587952e-02, -1.031188694843273e-02, -7.306101748900560e-03, -7.276775910955252e-03, -7.996136338650238e-02, -8.041348278844025e-02, -8.567396978574627e-03, -8.917500798850224e-03, -8.567396978574643e-03, -8.917500798850224e-03, -6.657298274900542e-01, -6.677126330711666e-01, -6.581462653051873e-01, -6.601374273552448e-01, -6.606995348536384e-01, -6.627022770572957e-01, -6.629094790399882e-01, -6.648831898291713e-01, -6.617940424165154e-01, -6.637820253514729e-01, -6.617940424165154e-01, -6.637820253514729e-01, -6.501191960625274e-01, -6.517227029070463e-01, -5.447572911285220e-01, -5.463585502566164e-01, -5.719171345405394e-01, -5.737639660710545e-01, -6.011777917309463e-01, -6.027415723710007e-01, -5.860790542476982e-01, -5.876587653962496e-01, -5.860790542476982e-01, -5.876587653962496e-01, -7.448367325012454e-01, -7.460000661569419e-01, -2.639427675970333e-01, -2.643924137706442e-01, -3.062134309843675e-01, -3.072941619474647e-01, -3.929416943114409e-01, -3.942393028713480e-01, -3.458074358449281e-01, -3.456727734897314e-01, -3.458074358449281e-01, -3.456727734897314e-01, -5.036644265400047e-01, -5.059510472549579e-01, -4.942566348910045e-02, -4.951713550189909e-02, -6.500952537443197e-02, -6.581860826642388e-02, -3.796139868079151e-01, -3.831400407195238e-01, -9.994328063570780e-02, -1.001593265164775e-01, -9.994328063570779e-02, -1.001593265164775e-01, -1.858786406243037e-02, -1.861586135858577e-02, -4.456234692934068e-03, -4.128949557479926e-03, -6.779726851776360e-03, -6.787914984131343e-03, -9.403058590618045e-02, -9.470897204159326e-02, -7.661171467740398e-03, -8.475885779602928e-03, -7.661171467740403e-03, -8.475885779602916e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_edf2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_edf2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.325118837768999e-09, 8.675181450719109e-12, -8.325166048998280e-09, -8.325073070012853e-09, 8.675057783873634e-12, -8.325132434462977e-09, -8.324821508536619e-09, 8.674469841193591e-12, -8.324803359398022e-09, -8.325345357998453e-09, 8.676310694643778e-12, -8.325465299605013e-09, -8.325099130579220e-09, 8.675351597366828e-12, -8.325122542642513e-09, -8.325099130579220e-09, 8.675351597366828e-12, -8.325122542642513e-09, -1.083987679037527e-05, 1.127785384425438e-07, -1.084400426524748e-05, -1.084019342886157e-05, 1.127772417766080e-07, -1.084462657547116e-05, -1.085089592053672e-05, 1.127325506383183e-07, -1.085353663877559e-05, -1.082530343531485e-05, 1.126961864237415e-07, -1.082867710963511e-05, -1.084505775752405e-05, 1.127633484542070e-07, -1.083786710573750e-05, -1.084505775752405e-05, 1.127633484542070e-07, -1.083786710573750e-05, -6.255033274714954e-03, 6.783830427506860e-04, -6.298946811120261e-03, -6.250675417751339e-03, 6.823085182383090e-04, -6.304434468729370e-03, -6.284573768162709e-03, 7.828290526411565e-04, -6.209823187983412e-03, -6.068391376151341e-03, 7.500140800964233e-04, -6.094227457588594e-03, -6.489737020727551e-03, 8.159066931073836e-04, -5.670468281578338e-03, -6.489737020727551e-03, 8.159066931073836e-04, -5.670468281578338e-03, -6.564153492125916e-01, 3.563640650466524e-01, -6.353818129441130e-01, -6.487332225523076e-01, 3.366522721509073e-01, -6.223775907595458e-01, -3.617940933040542e-03, 3.154865545551906e-04, -3.515265115024516e-03, -1.162199611956729e+00, 9.932087269962696e-01, -1.138586502884305e+00, -8.115369049461287e-01, 1.411605835120811e+00, -3.173874082523963e+00, -8.115369049461280e-01, 1.411605835120811e+00, -3.173874082523967e+00, -1.262201542949254e+04, 6.549351643921047e-08, -1.057320274979828e+04, -1.120115874286240e+04, 2.688476445869034e-07, -9.181434792217698e+03, -6.645193467758780e+01, 1.088954427232197e+01, -5.709679775951880e+01, -5.321439480964269e+04, 2.419969393318879e-17, -5.542540663391450e+04, -1.751098894246578e+04, 6.286543335294049e-13, -1.151075165595972e+05, -1.751098894246580e+04, 6.286543335294049e-13, -1.151075165595971e+05, -2.493512966622450e-06, 1.323943485885627e-08, -2.495636110892384e-06, -2.495402011517514e-06, 1.322660065984660e-08, -2.497461015367244e-06, -2.493592200483654e-06, 1.323879699786338e-08, -2.495678787515088e-06, -2.495211221067796e-06, 1.322746357709362e-08, -2.497338945217050e-06, -2.494500640001991e-06, 1.323295391378256e-08, -2.496555197544050e-06, -2.494500640001991e-06, 1.323295391378256e-08, -2.496555197544050e-06, -8.059743660310846e-05, 2.432838136623744e-06, -8.060912105466304e-05, -7.897859090389247e-05, 2.340653223185067e-06, -7.903421845458732e-05, -8.065915931686598e-05, 2.503160897304438e-06, -8.074931021068485e-05, -7.925736441340476e-05, 2.418702156936071e-06, -7.931429857985255e-05, -7.967599798051069e-05, 2.350948495422573e-06, -7.966754780350321e-05, -7.967599798051069e-05, 2.350948495422573e-06, -7.966754780350321e-05, -1.289922531624927e-02, 1.335769025854871e-03, -1.301457697749376e-02, -1.185780407378568e-02, 8.789692725773458e-04, -1.188292138122837e-02, -1.775553183117818e-02, 2.011167010494657e-03, -1.630747733430423e-02, -1.948068356671767e-02, 1.651816658054157e-03, -1.744618377966477e-02, -1.167458195340513e-02, 1.287017250128612e-03, -1.354525417834637e-02, -1.167458195340513e-02, 1.287017250128612e-03, -1.354525417834637e-02, -2.636253636795990e+00, 3.178834906284783e+00, -2.645066168683087e+00, -4.539345502122410e-01, 3.513378419776192e-01, -4.525887584233224e-01, -3.564811533480768e+00, 3.952825617817146e+00, -3.313377712360315e+00, -1.511086441630569e-04, 2.697318590571632e-06, -1.513818995483524e-04, -1.972618325306181e+00, 1.992587052560411e+00, -2.140543032911603e+00, -1.972618325306181e+00, 1.992587052560411e+00, -2.140543032911603e+00, -1.339656228191739e+05, 3.151318858548160e-24, -1.151554563557083e+05, -6.270649985584081e+04, 7.184722870376049e-18, -5.872434434306655e+04, -2.357557954152509e+05, 3.284532699075158e-25, -2.059588130677310e+05, -1.376438068289431e+01, 8.914724882589939e+00, -1.334221900549906e+01, -1.824097194359217e+05, 5.609345588558755e-20, -7.284120522043906e+04, -1.824097194359215e+05, 5.609345588558753e-20, -7.284120522043903e+04, -1.787108274006096e-02, 1.303780660204044e-03, -1.767370317258173e-02, -1.670910065803615e-02, 1.342075191631163e-03, -1.653566306509154e-02, -1.705368229390256e-02, 1.328452863795270e-03, -1.687542278117242e-02, -1.738755419599551e-02, 1.317348919311756e-03, -1.719716549868772e-02, -1.721482858777860e-02, 1.322893138463946e-03, -1.703058561885237e-02, -1.721482858777860e-02, 1.322893138463946e-03, -1.703058561885237e-02, -2.062782860110394e-02, 1.496768445984800e-03, -2.040632103666213e-02, -2.139450071267462e-02, 3.199380048512495e-03, -2.123073119619967e-02, -2.042792905691340e-02, 2.547501846178894e-03, -2.026330679055100e-02, -1.990799359799041e-02, 2.049841014608047e-03, -1.972608594822411e-02, -2.015698300396105e-02, 2.288016472139805e-03, -1.996828623298711e-02, -2.015698300396105e-02, 2.288016472139805e-03, -1.996828623298711e-02, -9.734402781604590e-03, 6.913758718834986e-04, -9.734532708246320e-03, -2.370441994957444e-01, 1.347201582267647e-01, -2.363779175490114e-01, -1.515166921049080e-01, 6.089582732934410e-02, -1.509464884586177e-01, -7.925048232145086e-02, 1.709168983555255e-02, -7.836791900559795e-02, -1.105837132561502e-01, 3.260294992252927e-02, -1.111288620998846e-01, -1.105837132561502e-01, 3.260294992252927e-02, -1.111288620998847e-01, -2.934495116567718e-02, 4.801381835808947e-03, -2.903852965327654e-02, -6.889543892813052e+01, 1.046213120379793e+01, -6.760511701988349e+01, -2.623798206916050e+01, 1.112987414879755e+01, -2.422056927610267e+01, -1.042415627711027e-01, 2.032330232718983e-02, -1.011258094308642e-01, -6.902339611995786e+00, 5.748463270256174e+00, -6.799495884396492e+00, -6.902339611995783e+00, 5.748463270256174e+00, -6.799495884396500e+00, -4.235302166478694e+03, 2.017336523398024e-04, -3.847509841223026e+03, -3.960503373299280e+06, 1.353218195256602e-85, -4.608530327990463e+06, -4.444022933977551e+05, 9.512039323497214e-37, -3.785063826648644e+05, -8.436030958570143e+00, 6.534865977029267e+00, -8.088539277050863e+00, -2.611467858518276e+05, 4.764596975996532e-22, -9.456667314121489e+04, -2.611467858518283e+05, 4.764596975996283e-22, -9.456667314121521e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
