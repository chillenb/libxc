
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wb97x_d3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.683009917503174e+01, -1.683011855834075e+01, -1.683026633456400e+01, -1.682994770877850e+01, -1.683010888469382e+01, -1.683010888469382e+01, -2.743480018704238e+00, -2.743457940080654e+00, -2.742967397305579e+00, -2.744408998005230e+00, -2.743480633314956e+00, -2.743480633314956e+00, -4.847250294498934e-01, -4.845944564480466e-01, -4.820009163630425e-01, -4.857719752242655e-01, -4.846752863426774e-01, -4.846752863426774e-01, -8.687862851131897e-02, -8.868351550189685e-02, -5.821796677639965e-01, -5.450715259672594e-02, -8.741453440046491e-02, -8.741453440046491e-02, 6.934863731072025e-03, 7.187241427135773e-03, 6.785259616336061e-03, 3.704241887872110e-03, 7.127197604289517e-03, 7.127197604289517e-03, -4.013531026446595e+00, -4.013215204452033e+00, -4.013503340777901e+00, -4.013257669858279e+00, -4.013361982779037e+00, -4.013361982779037e+00, -1.630707051076779e+00, -1.638760492540309e+00, -1.631540343879772e+00, -1.637793723088245e+00, -1.635139094271860e+00, -1.635139094271860e+00, -3.927362811922779e-01, -4.274713295763784e-01, -3.700164618663804e-01, -3.832205388880249e-01, -4.085363412071912e-01, -4.085363412071912e-01, -3.591560548330520e-02, -9.520392240994026e-02, -3.323494879088237e-02, -1.421836821481280e+00, -4.248619773336920e-02, -4.248619773336920e-02, 3.584617541527131e-03, 4.045155398732149e-03, 3.104081901491576e-03, -4.696671741958868e-03, 3.716175859008705e-03, 3.716175859008711e-03, -3.986870393940148e-01, -4.005336353467746e-01, -4.008350500435984e-01, -4.002848954565095e-01, -4.006588848915976e-01, -4.006588848915976e-01, -3.834668984382956e-01, -3.407272387549338e-01, -3.504962930597923e-01, -3.612820256552566e-01, -3.552189788107225e-01, -3.552189788107225e-01, -4.511387890100299e-01, -1.308744614942058e-01, -1.635984925897668e-01, -2.184111026722857e-01, -1.899909696978754e-01, -1.899909696978752e-01, -3.014429526060444e-01, 8.423832796477479e-03, -2.949905489154547e-04, -1.984080905028540e-01, -1.840747973672584e-02, -1.840747973672595e-02, 7.840124019304133e-03, 1.191275558217356e-03, 2.207133212268628e-03, -1.475689476269642e-02, 3.200559284979812e-03, 3.200559284979818e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wb97x_d3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.022695370466258e+01, -2.022702729894250e+01, -2.022735622781372e+01, -2.022615109970503e+01, -2.022699251068310e+01, -2.022699251068310e+01, -3.226316118185234e+00, -3.226352767701558e+00, -3.227496119491619e+00, -3.226218681593347e+00, -3.226348839982045e+00, -3.226348839982045e+00, -5.703563838234929e-01, -5.697466957048294e-01, -5.541538605696943e-01, -5.588497371986070e-01, -5.701333219217194e-01, -5.701333219217194e-01, -1.287804419342659e-01, -1.326903351188179e-01, -6.970676901623596e-01, -3.692851560752992e-02, -1.300293972798575e-01, -1.300293972798575e-01, 8.491507503121630e-03, 8.741880067910679e-03, -2.335302991449321e-03, 4.800458065180979e-03, 8.675436848330569e-03, 8.675436848330569e-03, -5.011239861345663e+00, -5.013958309270118e+00, -5.011516514465689e+00, -5.013630293046655e+00, -5.012635863689989e+00, -5.012635863689989e+00, -1.727097308439112e+00, -1.741780398199832e+00, -1.718496780034518e+00, -1.730139273437380e+00, -1.747602054132442e+00, -1.747602054132442e+00, -5.053260733297510e-01, -5.910341991261764e-01, -4.739685467056252e-01, -5.378702763502011e-01, -5.336640434159244e-01, -5.336640434159244e-01, -1.429393509039297e-02, -8.222384387680438e-02, -1.450548563931540e-02, -1.878319290926860e+00, -1.902168670828816e-02, -1.902168670828816e-02, 4.650270078876941e-03, 5.221349129250092e-03, 4.031782340347286e-03, -1.389899080358712e-02, 4.806370983520765e-03, 4.806370983520872e-03, -5.435046021668659e-01, -5.522875248268744e-01, -5.451429626926745e-01, -5.401719848106675e-01, -5.423337858400501e-01, -5.423337858400499e-01, -5.323554956626918e-01, -4.181032958896921e-01, -4.473737201724060e-01, -4.923746751593676e-01, -4.674443076189838e-01, -4.674443076189827e-01, -6.239350376695367e-01, -1.523692155706851e-01, -2.129071262564806e-01, -2.771661853232230e-01, -2.462377432727292e-01, -2.462377432727307e-01, -3.720098022394263e-01, 6.410208738997917e-04, -1.120319395405816e-02, -2.579287360939357e-01, -1.576746353516549e-02, -1.576746353516480e-02, 9.425052286555236e-03, 1.576174495776485e-03, 2.897732742728970e-03, -1.531684485399382e-02, 4.157339444060747e-03, 4.157339444060838e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wb97x_d3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wb97x_d3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.631073327578187e-09, -5.631029122119842e-09, -5.630777186378466e-09, -5.631502120263558e-09, -5.631050472636307e-09, -5.631050472636307e-09, -7.263622272379881e-06, -7.263671653164845e-06, -7.263815120870465e-06, -7.257474692685385e-06, -7.263526100586089e-06, -7.263526100586089e-06, -3.510056682590672e-03, -3.503866067170095e-03, -3.342406778642473e-03, -3.272596580381036e-03, -3.507896960748641e-03, -3.507896960748641e-03, -5.846645360274037e-02, -4.468280952730417e-02, -2.035431690111808e-03, -9.062072554146745e-01, -5.364605276665742e-02, -5.364605276665742e-02, 1.450858436299451e+01, 1.437583767454392e+01, 8.288776508638196e-01, 1.164129724110537e+01, 1.497227477493199e+01, 1.497227477493199e+01, -1.447266072905193e-06, -1.444281413608460e-06, -1.446963585092792e-06, -1.444643082815727e-06, -1.445737221401666e-06, -1.445737221401666e-06, -5.501348682780104e-05, -5.386074216372877e-05, -5.519325129493740e-05, -5.426578591090996e-05, -5.407836981209316e-05, -5.407836981209316e-05, -6.200091465866903e-03, 2.643609273331478e-04, -7.724060089209578e-03, 2.143846772670986e-03, -4.852693968369502e-03, -4.852693968369502e-03, -1.955347538024681e+00, -3.066993412040590e-01, -2.003459953600236e+00, -5.085276985261124e-05, -1.514560628409103e+00, -1.514560628409103e+00, 1.239892250068283e+01, 1.223128986859630e+01, 3.610259397282287e+01, -1.312320429954328e+00, 1.826048010071945e+01, 1.826048010064310e+01, -1.360274336348119e-02, -1.059162695060330e-03, -6.826512453026501e-03, -1.311256645126436e-02, -9.906133916667795e-03, -9.906133916667781e-03, 3.654196872817359e-03, -1.059706932720456e-02, -9.339956305126381e-03, -3.642370324192232e-03, -7.323272822586343e-03, -7.323272822586203e-03, 4.972118411811772e-04, -9.821018608991204e-02, -3.989177858655676e-02, -3.232374260401589e-02, -3.282735350699672e-02, -3.282735350699517e-02, -1.472636402950887e-02, 1.105657407546272e+00, -6.626649285854708e-01, -4.603700719653164e-02, -2.213904518878443e+00, -2.213904518878532e+00, 1.045029982594021e+01, 2.324328408692604e+01, 1.927804323867057e+01, -2.201372260429299e+00, 2.712878045029951e+01, 2.712878045023560e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
