
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_bhandhlyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.059396188683386e+01, -1.059397362655929e+01, -1.059406481514067e+01, -1.059387179850397e+01, -1.059396775351164e+01, -1.059396775351164e+01, -1.803953816284386e+00, -1.803939756635749e+00, -1.803625672747641e+00, -1.804538589333788e+00, -1.803954050902304e+00, -1.803954050902304e+00, -3.863752706944799e-01, -3.862800652560259e-01, -3.843229417552329e-01, -3.867750325283190e-01, -3.863392158712401e-01, -3.863392158712401e-01, -1.179385835853479e-01, -1.191551839650516e-01, -4.493617461049705e-01, -8.898851383764944e-02, -1.183023751747859e-01, -1.183023751747859e-01, -3.346777246395579e-02, -3.391073960730243e-02, -5.433077596993168e-02, -2.957754682968901e-02, -3.358047329395685e-02, -3.358047329395685e-02, -2.590378083470564e+00, -2.590058248212431e+00, -2.590348613866515e+00, -2.590099871545887e+00, -2.590209468733093e+00, -2.590209468733093e+00, -1.108120979203528e+00, -1.113242962226617e+00, -1.108490127170565e+00, -1.112477626315017e+00, -1.111116382199153e+00, -1.111116382199153e+00, -3.266214653119596e-01, -3.411049730276123e-01, -3.118278930469048e-01, -3.152815701818968e-01, -3.365876403966241e-01, -3.365876403966241e-01, -6.824727654905513e-02, -1.198834434503957e-01, -6.817913230543715e-02, -9.650471916634564e-01, -7.738489508501425e-02, -7.738489508501425e-02, -2.900763857123865e-02, -2.988363192353033e-02, -2.284419798810083e-02, -5.575999782157674e-02, -2.713671039845183e-02, -2.713671039845183e-02, -3.220179111002426e-01, -3.231805462827514e-01, -3.227927963268352e-01, -3.224707531563698e-01, -3.226339511103584e-01, -3.226339511103584e-01, -3.120381317554082e-01, -2.925417063911996e-01, -2.990344446110749e-01, -3.044186791903303e-01, -3.016819387740181e-01, -3.016819387740181e-01, -3.568052694121728e-01, -1.485333722493618e-01, -1.726855503660333e-01, -2.101337003359169e-01, -1.907172040547741e-01, -1.907172040547740e-01, -2.663894788083508e-01, -5.508179240376368e-02, -5.512798704594822e-02, -1.962971717897539e-01, -6.122932037436784e-02, -6.122932037436783e-02, -3.688125576525521e-02, -2.084884398045490e-02, -2.408899928227029e-02, -6.003827243652080e-02, -2.430546921335243e-02, -2.430546921335243e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_bhandhlyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.267766834401604e+01, -1.267770948762307e+01, -1.267790032618408e+01, -1.267722644545665e+01, -1.267768998083216e+01, -1.267768998083216e+01, -2.100409129121388e+00, -2.100424575619649e+00, -2.100933036993955e+00, -2.100487969052744e+00, -2.100425730630193e+00, -2.100425730630193e+00, -4.442018712442210e-01, -4.437812937022484e-01, -4.338344973777921e-01, -4.367666253028547e-01, -4.440482705320518e-01, -4.440482705320518e-01, -1.447817445724769e-01, -1.457112481632511e-01, -5.244555803086346e-01, -1.204549236728047e-01, -1.450432593057407e-01, -1.450432593057407e-01, -1.325384625098229e-02, -1.365188151726954e-02, -3.898779788312147e-02, -8.820419307461306e-03, -1.351525436888378e-02, -1.351525436888378e-02, -3.170147800140278e+00, -3.171342129456130e+00, -3.170270175472875e+00, -3.171198820544679e+00, -3.170759688020229e+00, -3.170759688020229e+00, -1.180128881882936e+00, -1.188499208073781e+00, -1.176196727449291e+00, -1.182699669628773e+00, -1.190988083359249e+00, -1.190988083359249e+00, -3.950702038804959e-01, -4.335863204734890e-01, -3.764536174915921e-01, -3.962683171646644e-01, -4.095901955981009e-01, -4.095901955981009e-01, -1.000264065011779e-01, -1.589396054388676e-01, -9.647654868842487e-02, -1.226774328466236e+00, -1.072933165085502e-01, -1.072933165085502e-01, -8.589880449850583e-03, -9.256520907559601e-03, -7.019548610771030e-03, -5.811547819083750e-02, -8.420417370211757e-03, -8.420417370211750e-03, -4.169572598385241e-01, -4.121124474056351e-01, -4.137634414443325e-01, -4.151001825604932e-01, -4.144243438580071e-01, -4.144243438580071e-01, -4.051712490739506e-01, -3.455692981470329e-01, -3.604611932902896e-01, -3.759199770185139e-01, -3.678593625052733e-01, -3.678593625052733e-01, -4.524387809991638e-01, -1.858611999325170e-01, -2.078466205020163e-01, -2.506785342042671e-01, -2.268417141683727e-01, -2.268417141683726e-01, -3.151448267977250e-01, -3.619240846644872e-02, -5.216653619458880e-02, -2.377131091210123e-01, -7.689896389343659e-02, -7.689896389343658e-02, -1.504908970704692e-02, -4.522474601478210e-03, -6.228045154772061e-03, -7.126994522650684e-02, -7.372237269389734e-03, -7.372237269389732e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_bhandhlyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.612457649234912e-09, -3.612442526940482e-09, -3.612320492447257e-09, -3.612569223062589e-09, -3.612450130410723e-09, -3.612450130410723e-09, -4.605345297574183e-06, -4.605502296813613e-06, -4.609070021767318e-06, -4.599070184682651e-06, -4.605348475975715e-06, -4.605348475975715e-06, -2.183619010026168e-03, -2.180673450627295e-03, -2.075576019331151e-03, -2.034550378453354e-03, -2.182599879649034e-03, -2.182599879649034e-03, -7.872303066865566e-02, -8.443994391557458e-02, -1.274891577912499e-03, 1.070173486989449e-01, -8.063132217684243e-02, -8.063132217684243e-02, -1.399669539069610e+03, -1.227666998848994e+03, -8.540808164105918e+00, -1.037059430225265e+04, -1.278796839486013e+03, -1.278796839486013e+03, -1.071788048731801e-06, -1.072567889086214e-06, -1.071861635014892e-06, -1.072468068443276e-06, -1.072196057685484e-06, -1.072196057685484e-06, -3.295279039960566e-05, -3.235530901136167e-05, -3.290012907887100e-05, -3.243479528726638e-05, -3.261486295998252e-05, -3.261486295998252e-05, -4.826190829901990e-03, -4.706828572945811e-03, -5.740570046918638e-03, -6.250251958557183e-03, -4.367623691279836e-03, -4.367623691279836e-03, 6.556946414380005e-01, 7.134901461305909e-03, 5.920123955021737e-01, -6.346780038866444e-05, 2.847735747507298e-01, 2.847735747507298e-01, -1.169178054663406e+04, -7.973973785257779e+03, -2.455182510807863e+04, -2.732587379112310e-01, -1.162788648496837e+04, -1.162788648496837e+04, -6.412720349861129e-03, -5.936200191490232e-03, -6.081985814664504e-03, -6.211169583438989e-03, -6.144503277795366e-03, -6.144503277795366e-03, -7.412170370657896e-03, -6.690190998364723e-03, -6.706485970161716e-03, -6.792886328950965e-03, -6.749410011830877e-03, -6.749410011830877e-03, -3.884046077039204e-03, -2.103318237391792e-02, -2.648287505735230e-02, -2.215716717527828e-02, -2.582789356899869e-02, -2.582789356899871e-02, -9.395854396078233e-03, -1.163634050619843e+01, -1.083859567423939e+00, -3.242818251585892e-02, 5.451286920893366e-01, 5.451286920893330e-01, -8.205349780543910e+02, -3.873591796706378e+05, -5.833976977225755e+04, 2.403021421619691e-01, -2.064068306311339e+04, -2.064068306311346e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
