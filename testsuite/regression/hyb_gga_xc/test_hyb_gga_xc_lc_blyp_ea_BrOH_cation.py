
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_blyp_ea_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093980377742427e+01, -2.093983108754161e+01, -2.094002104553884e+01, -2.093961331325236e+01, -2.093981721258203e+01, -2.093981721258203e+01, -3.363840977411337e+00, -3.363807194830829e+00, -3.363111828924241e+00, -3.364984655838802e+00, -3.363884967427772e+00, -3.363884967427772e+00, -5.558516210961821e-01, -5.554697318643604e-01, -5.467445306655395e-01, -5.520296094178908e-01, -5.506938306286577e-01, -5.506938306286577e-01, -6.157246412760412e-02, -6.445576273685034e-02, -6.673611431881395e-01, -2.200167533688454e-02, -5.367965411451500e-02, -5.367965411451495e-02, -1.040072800078240e-03, -1.091388908834585e-03, -2.620105544061382e-04, -6.092563945912448e-04, -4.030021425204922e-04, -4.030021425204922e-04, -4.942357613781693e+00, -4.941764424936451e+00, -4.942341024188629e+00, -4.941817193333066e+00, -4.942051121229859e+00, -4.942051121229859e+00, -1.964275737672711e+00, -1.975254432029943e+00, -1.963153272047023e+00, -1.972866194851645e+00, -1.970885880735422e+00, -1.970885880735422e+00, -4.556980544817135e-01, -4.903937270580110e-01, -4.146611114226905e-01, -4.235459262317676e-01, -4.638880844774618e-01, -4.638880844774618e-01, 8.014642853014408e-03, -5.279658184560671e-02, 9.344016292335857e-03, -1.707123006429926e+00, -6.199316880758844e-03, -6.199316880758844e-03, -4.699181351216870e-04, -5.958112772541701e-04, -4.535398801324539e-04, 7.345316635915216e-03, -4.419511271732607e-04, -4.419511271732607e-04, -4.412272057356607e-01, -4.417355175266247e-01, -4.416002221640558e-01, -4.414500238215818e-01, -4.415285789495317e-01, -4.415285789495317e-01, -4.252258834931107e-01, -3.715534837867278e-01, -3.884868005089876e-01, -4.038959531891994e-01, -3.961037301605894e-01, -3.961037301605894e-01, -5.202745545829888e-01, -9.813286766733631e-02, -1.445692665308703e-01, -2.274513967688752e-01, -1.842340903214047e-01, -1.842340903214047e-01, -3.322486948989274e-01, -6.459848458410806e-04, 5.473674523334009e-03, -2.136225430814733e-01, 5.678968021963833e-03, 5.678968021963845e-03, -1.468389804410275e-03, -1.605980343535095e-04, -3.331400873027043e-04, 6.325940241911398e-03, -4.265899193482409e-04, -4.265899193482406e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_blyp_ea_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.513671339355222e+01, -2.513668334680030e+01, -2.513682235533142e+01, -2.513676277955835e+01, -2.513715135355841e+01, -2.513723811474442e+01, -2.513591754002281e+01, -2.513566970051987e+01, -2.513677648217091e+01, -2.513628377729082e+01, -2.513677648217091e+01, -2.513628377729082e+01, -3.989262577602769e+00, -3.989346394490705e+00, -3.989296120690009e+00, -3.989381171863449e+00, -3.990122801798420e+00, -3.990334249978525e+00, -3.989351295683137e+00, -3.989555241737880e+00, -3.988574334282155e+00, -3.990312012781065e+00, -3.988574334282155e+00, -3.990312012781065e+00, -7.038924665222804e-01, -7.053919913344047e-01, -7.029153819752540e-01, -7.047289823942914e-01, -6.860990999024243e-01, -6.845675476795633e-01, -6.911457304228019e-01, -6.916136816300751e-01, -7.005383315986506e-01, -6.871255655575246e-01, -7.005383315986506e-01, -6.871255655575246e-01, -1.399809878723679e-01, -1.408599762386923e-01, -1.414576053602055e-01, -1.426545465291646e-01, -8.233055656887942e-01, -8.450464635217322e-01, -1.044241066566169e-01, -1.050391691976732e-01, -1.111139056247875e-01, -1.170130466240386e-01, -1.111139056247875e-01, -1.170130466240387e-01, -1.588330688293931e-03, -1.209991821868205e-03, -1.698351967535972e-03, -1.248111547332695e-03, -7.218626657747512e-03, -6.737561105155946e-03, -7.804384811519230e-04, -8.417422720937985e-04, -2.103183490968478e-04, -2.307736662467078e-03, -2.103183490968478e-04, -2.307736662467078e-03, -6.123734810146856e+00, -6.122244219424370e+00, -6.126164926726416e+00, -6.124595810250269e+00, -6.123869072905686e+00, -6.122326684260937e+00, -6.125957238968407e+00, -6.124459832935730e+00, -6.124978182451488e+00, -6.123425698298837e+00, -6.124978182451488e+00, -6.123425698298837e+00, -2.164374126062672e+00, -2.164275159796567e+00, -2.181618048869828e+00, -2.181077518584971e+00, -2.148850195348730e+00, -2.152144950878317e+00, -2.163680576790203e+00, -2.167190384045899e+00, -2.185018442625303e+00, -2.176077051657898e+00, -2.185018442625303e+00, -2.176077051657898e+00, -6.072525789466395e-01, -6.058264740398426e-01, -6.736712851933288e-01, -6.740408324966054e-01, -5.457602332589251e-01, -5.626089899516344e-01, -5.747228040272199e-01, -5.920458207466256e-01, -6.317729413668346e-01, -6.038905125253999e-01, -6.317729413668346e-01, -6.038905125253999e-01, -6.843553331873130e-02, -6.816770702581797e-02, -1.574059530943335e-01, -1.576027115331414e-01, -5.914237008932499e-02, -6.003975430433470e-02, -2.236567210998157e+00, -2.235632328336367e+00, -8.096958305778472e-02, -7.685858971318607e-02, -8.096958305778472e-02, -7.685858971318607e-02, -6.827216673695429e-04, -5.741075533540684e-04, -8.198701415787531e-04, -7.662746897270691e-04, -6.885674751747431e-04, -5.319212810692088e-04, -2.546494123480725e-02, -2.576596815299950e-02, -1.289098097621738e-03, -3.173870957416043e-04, -1.289098097621738e-03, -3.173870957416043e-04, -6.174236225337095e-01, -6.196887618024647e-01, -6.104156270883210e-01, -6.126545946605356e-01, -6.127600430627653e-01, -6.150202395200975e-01, -6.147991302689177e-01, -6.170449868208783e-01, -6.137681868134316e-01, -6.160211722516187e-01, -6.137681868134316e-01, -6.160211722516187e-01, -5.989331053912003e-01, -6.007878455791502e-01, -4.955503586911702e-01, -4.971040118111759e-01, -5.210461725242548e-01, -5.229020603648802e-01, -5.493833764869198e-01, -5.510994433864169e-01, -5.345726145450455e-01, -5.362838675819288e-01, -5.345726145450455e-01, -5.362838675819288e-01, -7.103752658588085e-01, -7.115917856170548e-01, -2.055352848642551e-01, -2.057423269487368e-01, -2.461109192086132e-01, -2.464602300904088e-01, -3.266231365797134e-01, -3.278454845328128e-01, -2.818280502547177e-01, -2.814970881469832e-01, -2.818280502547177e-01, -2.814970881469832e-01, -4.495872218464724e-01, -4.516855584337703e-01, -6.305921105332050e-03, -6.237534905602075e-03, -1.459451973449227e-02, -1.473498977219658e-02, -3.073413299899176e-01, -3.106106505779030e-01, -4.188239834652849e-02, -4.045804652355307e-02, -4.188239834652854e-02, -4.045804652355302e-02, -2.113691632189110e-03, -1.803899199875503e-03, -2.150681347676859e-04, -2.128686410394295e-04, -5.111304167901631e-04, -3.873056657245168e-04, -3.648604191320014e-02, -3.676464260742184e-02, -1.141036994036013e-03, -3.233164920396549e-04, -1.141036994036012e-03, -3.233164920396547e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_blyp_ea_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_blyp_ea", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.430476888094607e-08, 1.463652377038497e-11, -1.430484969259383e-08, -1.430468980641652e-08, 1.463631512328463e-11, -1.430479162991703e-08, -1.430425773175405e-08, 1.463532316351641e-11, -1.430422594409212e-08, -1.430516256518049e-08, 1.463842899785011e-11, -1.430536951556789e-08, -1.430473461057631e-08, 1.463681083685537e-11, -1.430477927010589e-08, -1.430473461057631e-08, 1.463681083685537e-11, -1.430477927010589e-08, -1.736868867363652e-05, 1.902747638536065e-07, -1.737528208007649e-05, -1.736920152724823e-05, 1.902725761814505e-07, -1.737628153013924e-05, -1.738644538080439e-05, 1.901971754504621e-07, -1.739071728437306e-05, -1.734550806862033e-05, 1.901358235030523e-07, -1.735094346728547e-05, -1.737668323578532e-05, 1.902491360705296e-07, -1.736583680272638e-05, -1.737668323578532e-05, 1.902491360705296e-07, -1.736583680272638e-05, -6.456847507116682e-03, 1.144533678933034e-03, -6.549324665908067e-03, -6.438973250696565e-03, 1.151156568500561e-03, -6.552537615779569e-03, -6.341230101805467e-03, 1.320750241138922e-03, -6.174928686498568e-03, -6.104376441860772e-03, 1.265386257803329e-03, -6.158358920779075e-03, -6.932169242843625e-03, 1.376562597771172e-03, -5.252223008531396e-03, -6.932169242843625e-03, 1.376562597771172e-03, -5.252223008531396e-03, 3.024316032022618e-01, 6.012876550391961e-01, 1.852793423159049e-01, 2.823071198375025e-01, 5.680272535784819e-01, 1.558707218194070e-01, -4.023866100008731e-03, 5.322727974273029e-04, -4.059334756324874e-03, 9.806364782519900e-01, 1.675901373768304e+00, 8.866182197887931e-01, -1.818524626069571e-01, 2.382014110698246e+00, 2.024974899413201e+00, -1.818524626069566e-01, 2.382014110698246e+00, 2.024974899413206e+00, -8.600944285110409e-05, 1.111914508308031e-07, -1.007630016407476e-04, -1.010297195805789e-04, 4.562559950974850e-07, -1.213846723089359e-04, 1.057637140844056e+01, 1.838627425311693e+01, 9.302826580926919e+00, -2.004962215439320e-05, 4.136895542502456e-17, -1.877770660964032e-05, -6.297464336906959e-05, 1.070835888305008e-12, -2.537908449478394e-05, -6.297464336932218e-05, 1.070835888305008e-12, -2.537908449517384e-05, -4.108103301378983e-06, 2.233703107768369e-08, -4.111543495290178e-06, -4.111224356228950e-06, 2.231537777319893e-08, -4.114558458266191e-06, -4.108234750128497e-06, 2.233595490630417e-08, -4.111614329372328e-06, -4.110909599620259e-06, 2.231683364972891e-08, -4.114357184526070e-06, -4.109734770346355e-06, 2.232609670798167e-08, -4.113061887996120e-06, -4.109734770346355e-06, 2.232609670798167e-08, -4.113061887996120e-06, -1.199717061521237e-04, 4.104557134069705e-06, -1.199874935157105e-04, -1.177312436741115e-04, 3.949027730077658e-06, -1.178056229207542e-04, -1.198675570915718e-04, 4.223201907834492e-06, -1.200729346322986e-04, -1.179338616732945e-04, 4.080707689470805e-06, -1.180895266835307e-04, -1.188485394556500e-04, 3.966397450084659e-06, -1.186703682275330e-04, -1.188485394556500e-04, 3.966397450084659e-06, -1.186703682275330e-04, -1.254491219004961e-02, 2.253646609880290e-03, -1.261355602939920e-02, -1.242043351105319e-02, 1.482953633834817e-03, -1.245551279081735e-02, -1.569321452353824e-02, 3.393155540240489e-03, -1.530324118106867e-02, -1.843735428467989e-02, 2.786872153422916e-03, -1.717820506168245e-02, -1.187378706329609e-02, 2.171399762139616e-03, -1.289690671063635e-02, -1.187378706329608e-02, 2.171399762139616e-03, -1.289690671063634e-02, 3.199463061424008e+00, 5.364331359216309e+00, 3.042976194589904e+00, 2.915455989027546e-01, 5.928062603673171e-01, 2.765951554953381e-01, 4.342307360425233e+00, 6.670630325612285e+00, 3.352080715894359e+00, -2.257945231058826e-04, 4.550774239056777e-06, -2.261820939475604e-04, 2.271282220207292e+00, 3.362374819306393e+00, 1.588511807861257e+00, 2.271282220207292e+00, 3.362374819306393e+00, 1.588511807861257e+00, -1.142866080687780e-05, 5.421496698436063e-24, -1.150486815879121e-05, -2.054648868264084e-05, 1.228758886113335e-17, -2.026792100353838e-05, -3.059869694385498e-05, 5.656440620065503e-25, -3.855212880079808e-05, 8.542551191009984e+00, 1.504669301565768e+01, 8.356496527467948e+00, -2.002843870256431e-05, 9.610322787727072e-20, -4.739106791064267e-05, -2.002843870287496e-05, 9.610322787727070e-20, -4.739106791004605e-05, -1.793213019971062e-02, 2.199677179191681e-03, -1.780807117631000e-02, -1.658999343997008e-02, 2.264286130145305e-03, -1.649273498994478e-02, -1.699405104418656e-02, 2.241303100651475e-03, -1.689138719976837e-02, -1.738039451471203e-02, 2.222568983976134e-03, -1.726381503799084e-02, -1.718108735788373e-02, 2.231922961512953e-03, -1.707152931564785e-02, -1.718108735788373e-02, 2.231922961512953e-03, -1.707152931564785e-02, -2.038543465541814e-02, 2.525278278664052e-03, -2.023829688088714e-02, -1.728754880846708e-02, 5.397863529116129e-03, -1.733188621664798e-02, -1.769869209872195e-02, 4.298036410666330e-03, -1.770715113007192e-02, -1.829924528068714e-02, 3.458400931093935e-03, -1.822762656789521e-02, -1.801027099696559e-02, 3.860241852276062e-03, -1.795143319384584e-02, -1.801027099696559e-02, 3.860241852276062e-03, -1.795143319384584e-02, -1.046067497734191e-02, 1.166454564355177e-03, -1.048034160410401e-02, 6.593519530830724e-02, 2.273047300256539e-01, 5.820630174552140e-02, -6.010673751355444e-03, 1.027440095908986e-01, -1.275082098896393e-02, -3.864299951424474e-02, 2.883676467546989e-02, -3.927824899573267e-02, -3.272923405907692e-02, 5.500747727544229e-02, -3.293846659147896e-02, -3.272923405907684e-02, 5.500747727544231e-02, -3.293846659147900e-02, -2.157084681438112e-02, 8.100714365057125e-03, -2.176801559171422e-02, 9.615966543901999e+00, 1.766533536733120e+01, 9.469098798244142e+00, 1.087343929929851e+01, 1.878803243082290e+01, 9.852378200751405e+00, -4.943281986794708e-02, 3.428914672188251e-02, -5.144430684915646e-02, 6.183966177700790e+00, 9.701438036301546e+00, 4.866447882960628e+00, 6.183966177700795e+00, 9.701438036301546e+00, 4.866447882960624e+00, -1.774733816407414e-05, 3.417478728614279e-04, -4.253994962387175e-05, -1.270355036414771e-06, 2.850114531961813e-85, -1.914117433252714e-06, -6.666931770219078e-06, 1.662312648545182e-36, -8.272301380164934e-06, 6.489116796365996e+00, 1.102889579754806e+01, 6.065060295902107e+00, -2.841468014454160e-05, 8.178814636871498e-22, -3.828518954216764e-05, -2.841468014520973e-05, 8.178814636871070e-22, -3.828518954114771e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
