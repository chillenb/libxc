
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b1wc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.756060072843970e+01, -1.756062871536140e+01, -1.756080165050364e+01, -1.756038425846588e+01, -1.756059606572425e+01, -1.756059606572425e+01, -2.935354905435367e+00, -2.935336014403453e+00, -2.934970287719800e+00, -2.936155980331935e+00, -2.935402038925151e+00, -2.935402038925151e+00, -6.030792666015127e-01, -6.026927273182905e-01, -5.943483053666140e-01, -5.987337597469776e-01, -5.975014142093669e-01, -5.975014142093669e-01, -1.776542763754843e-01, -1.791353417155779e-01, -6.961535723750087e-01, -1.494267973992008e-01, -1.594461886650838e-01, -1.594461886650838e-01, -8.469723796059736e-03, -8.913470963119861e-03, -4.823046765701328e-02, -4.895015888513980e-03, -6.149350568539294e-03, -6.149350568539294e-03, -4.276193694866870e+00, -4.276053454275413e+00, -4.276194474786213e+00, -4.276070556726836e+00, -4.276118570501643e+00, -4.276118570501643e+00, -1.748043617789174e+00, -1.757758709652512e+00, -1.745343561062761e+00, -1.753915161845524e+00, -1.754729091619300e+00, -1.754729091619300e+00, -5.234998783009120e-01, -5.620164158656521e-01, -4.875434865109620e-01, -5.021886603263133e-01, -5.307345843394906e-01, -5.307345843394906e-01, -1.160025777675330e-01, -1.884729241524457e-01, -1.085097681286248e-01, -1.594380496563823e+00, -1.283510421500442e-01, -1.283510421500442e-01, -3.777236803969079e-03, -4.785251536077327e-03, -3.658439149936478e-03, -7.597573025100612e-02, -4.407307255900854e-03, -4.407307255900854e-03, -5.230783061589880e-01, -5.200515478869223e-01, -5.210520568826815e-01, -5.219264508934019e-01, -5.214827315003848e-01, -5.214827315003848e-01, -5.101771011794874e-01, -4.488483263525638e-01, -4.650211982789708e-01, -4.817776472323851e-01, -4.730681114863259e-01, -4.730681114863259e-01, -5.872743924706065e-01, -2.252113834692561e-01, -2.583723863126989e-01, -3.243996673839751e-01, -2.881196164699687e-01, -2.881196164699687e-01, -4.153530419140607e-01, -4.626465909468659e-02, -6.227858806778604e-02, -3.120590115165182e-01, -9.351751463418762e-02, -9.351751463418763e-02, -1.194389173508746e-02, -1.279509710708522e-03, -2.685434732464808e-03, -8.866964310891785e-02, -4.078215481472460e-03, -4.078215481472459e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b1wc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.152434865673698e+01, -2.152442179340067e+01, -2.152474377416037e+01, -2.152365573224193e+01, -2.152422628478073e+01, -2.152422628478073e+01, -3.571989217906038e+00, -3.572014824393559e+00, -3.572692791349940e+00, -3.572174231638644e+00, -3.572103566180742e+00, -3.572103566180742e+00, -7.417013899318592e-01, -7.405975335286216e-01, -7.128415279045743e-01, -7.187650132694033e-01, -7.179129502861838e-01, -7.179129502861838e-01, -1.903571192793882e-01, -1.953905452482895e-01, -8.574162009076204e-01, -1.424486876130006e-01, -1.560616940363374e-01, -1.560616940363373e-01, -1.126982780350444e-02, -1.185708969445066e-02, -6.214294436719040e-02, -6.522270101364248e-03, -8.189405124150799e-03, -8.189405124150796e-03, -5.378150881084438e+00, -5.380127815400965e+00, -5.378240646982133e+00, -5.379985847211925e+00, -5.379153042150619e+00, -5.379153042150619e+00, -2.001345835080104e+00, -2.016896632935086e+00, -1.987506032951684e+00, -2.001300130189272e+00, -2.016591885528266e+00, -2.016591885528266e+00, -6.702226576688548e-01, -7.351342530902349e-01, -6.226734196377851e-01, -6.556811698841674e-01, -6.817206120243435e-01, -6.817206120243435e-01, -1.274820172730667e-01, -1.803648924011370e-01, -1.220623255050332e-01, -2.081974250492046e+00, -1.275096720187484e-01, -1.275096720187484e-01, -5.033970387225282e-03, -6.375861283347151e-03, -4.872954906012386e-03, -9.295999125074578e-02, -5.870487317718806e-03, -5.870487317718808e-03, -6.849485140725722e-01, -6.803387000489021e-01, -6.821172357560340e-01, -6.834683035908542e-01, -6.828071332028571e-01, -6.828071332028571e-01, -6.675892236998968e-01, -5.614120470391843e-01, -5.931320628069930e-01, -6.243475872882208e-01, -6.085341850311943e-01, -6.085341850311943e-01, -7.677314151385035e-01, -2.313618758866693e-01, -2.932067243904098e-01, -4.093188409706437e-01, -3.504606200014380e-01, -3.504606200014380e-01, -5.208082690025089e-01, -5.981822756243996e-02, -7.887798006014347e-02, -4.011980802465750e-01, -1.066837261456596e-01, -1.066837261456596e-01, -1.586890894260660e-02, -1.705819712499466e-03, -3.579347182841105e-03, -1.032478075779443e-01, -5.432341643816428e-03, -5.432341643816424e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b1wc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.741759117071716e-09, -4.741742346070561e-09, -4.741594513638241e-09, -4.741845530569824e-09, -4.741724425600675e-09, -4.741724425600675e-09, -5.254520240255352e-06, -5.254698639420574e-06, -5.258323914783567e-06, -5.248208513800548e-06, -5.254250954774906e-06, -5.254250954774906e-06, -1.926554380303589e-03, -1.936498454737749e-03, -2.183452140545656e-03, -2.119653363701457e-03, -2.131184478453108e-03, -2.131184478453108e-03, -3.310932457598046e-01, -3.053065390465252e-01, -1.143478446788421e-03, -7.622062450217775e-01, -6.025100317329355e-01, -6.025100317329357e-01, -3.418800612515855e+00, -3.587477774897486e+00, -1.296584298170631e+00, -3.227474139168794e+00, -4.039115596844262e+00, -4.039115596845669e+00, -1.232098304966826e-06, -1.231835604135134e-06, -1.232080551251654e-06, -1.231849038311097e-06, -1.231970983102057e-06, -1.231970983102057e-06, -3.735870558295683e-05, -3.656714396300154e-05, -3.759004376627300e-05, -3.687433033877672e-05, -3.681931322965466e-05, -3.681931322965466e-05, -2.319989761648225e-03, -2.536728874282697e-04, -3.046467155542060e-03, -6.392002516715008e-04, -2.081411105642989e-03, -2.081411105642989e-03, -9.119752700366450e-01, -3.174845050280318e-01, -9.822124759328338e-01, -3.383399243022452e-05, -1.124133755371673e+00, -1.124133755371673e+00, -4.281427602620695e+00, -3.795590095982087e+00, -2.360962282593191e+01, -1.323058966081689e+00, -1.099056333313536e+01, -1.099056333312641e+01, 1.229427159769548e-03, -4.044896043673037e-05, 3.506688471962872e-04, 7.170808022756246e-04, 5.286495999025798e-04, 5.286495999025798e-04, 1.955271130955359e-03, -5.017235190687030e-03, -3.627678024087824e-03, -2.041444916384855e-03, -2.889209695332290e-03, -2.889209695332290e-03, -3.923175744007905e-04, -1.415572596933501e-01, -6.353911075104354e-02, -1.391185944572549e-02, -3.004487797307783e-02, -3.004487797307782e-02, -6.424793542671418e-03, -1.213731318608926e+00, -1.092563235624883e+00, -1.033705578608238e-02, -1.567702082392307e+00, -1.567702082392311e+00, -2.658538794544286e+00, -1.900642399270058e+01, -9.119963914881007e+00, -1.551169053184808e+00, -1.389690467256580e+01, -1.389690467256766e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
