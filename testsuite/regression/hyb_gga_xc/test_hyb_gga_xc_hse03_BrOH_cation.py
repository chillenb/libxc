
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse03_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.577413697602873e+01, -1.577415580597401e+01, -1.577429304947536e+01, -1.577401180318849e+01, -1.577415155772285e+01, -1.577415155772285e+01, -2.676791595768932e+00, -2.676764031918187e+00, -2.676191069679950e+00, -2.677683266807026e+00, -2.676821648977452e+00, -2.676821648977452e+00, -5.794443213709511e-01, -5.792528862120523e-01, -5.754116492922068e-01, -5.792891379975221e-01, -5.781369738502281e-01, -5.781369738502281e-01, -1.920432740849525e-01, -1.933578509481344e-01, -6.630669921496051e-01, -1.626357582121264e-01, -1.843226953932418e-01, -1.843226953932417e-01, -1.010962075302461e-02, -1.064598880777887e-02, -5.743265601698343e-02, -5.829748402227209e-03, -8.136754982832881e-03, -8.136754982832881e-03, -3.853460605605260e+00, -3.853126795054177e+00, -3.853452644807682e+00, -3.853157788738174e+00, -3.853286931088028e+00, -3.853286931088028e+00, -1.640488106728375e+00, -1.648586881424129e+00, -1.639885710272186e+00, -1.647073903116838e+00, -1.645217821777889e+00, -1.645217821777889e+00, -5.003289651800973e-01, -5.322523691887354e-01, -4.689194832466028e-01, -4.786308336416268e-01, -5.065846519541222e-01, -5.065846519541223e-01, -1.264210487885507e-01, -2.017155346976034e-01, -1.190842280258114e-01, -1.455005889442768e+00, -1.402645787584821e-01, -1.402645787584821e-01, -4.500877528470487e-03, -5.698954156338058e-03, -4.364480540556730e-03, -8.656753577379200e-02, -5.482366259084754e-03, -5.482366259084761e-03, -4.979698879195811e-01, -4.945916864551325e-01, -4.956396512416205e-01, -4.966141776694930e-01, -4.961132870649989e-01, -4.961132870649989e-01, -4.866890992942833e-01, -4.379444120494720e-01, -4.489078469045941e-01, -4.609530255316636e-01, -4.544502851854555e-01, -4.544502851854555e-01, -5.548794839316114e-01, -2.376868367791043e-01, -2.677936197338622e-01, -3.247937555569865e-01, -2.938143066700123e-01, -2.938143066700123e-01, -4.074957260988558e-01, -5.508920061775079e-02, -7.274073409565307e-02, -3.111603679989535e-01, -1.042883065471697e-01, -1.042883065471697e-01, -1.424671160617292e-02, -1.523308073696889e-03, -3.203467923637454e-03, -9.930769531373848e-02, -5.034668817713941e-03, -5.034668817713932e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse03_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.876511385947247e+01, -1.876509285359424e+01, -1.876521029728006e+01, -1.876516326019458e+01, -1.876548350227212e+01, -1.876556274970337e+01, -1.876439054062545e+01, -1.876417488719148e+01, -1.876516883590125e+01, -1.876470628169041e+01, -1.876516883590125e+01, -1.876470628169041e+01, -3.113044007206212e+00, -3.113196637778983e+00, -3.113083383732505e+00, -3.113242733923278e+00, -3.114104162822279e+00, -3.114350043230882e+00, -3.112822687440632e+00, -3.113072857366530e+00, -3.112498542289310e+00, -3.113988424940958e+00, -3.112498542289310e+00, -3.113988424940958e+00, -6.704966968313739e-01, -6.720118080502918e-01, -6.695558023755397e-01, -6.713479726213795e-01, -6.535958185653064e-01, -6.523768850092577e-01, -6.575559184359269e-01, -6.579035558147909e-01, -6.662789983341447e-01, -6.476124323527618e-01, -6.662789983341447e-01, -6.476124323527618e-01, -1.984321662423831e-01, -2.013929540740865e-01, -2.010317654580017e-01, -2.051388149129321e-01, -7.605066505340202e-01, -7.802550842266646e-01, -1.711911616200100e-01, -1.722608120092545e-01, -1.866354774900584e-01, -1.571296129642454e-01, -1.866354774900582e-01, -1.571296129642452e-01, -1.303297460111894e-02, -1.384837896241441e-02, -1.365649151791229e-02, -1.462860790219625e-02, -7.210326929521461e-02, -7.488392315051844e-02, -7.836307322183551e-03, -7.705763471928063e-03, -1.162753367728704e-02, -6.618086182026073e-03, -1.162753367728704e-02, -6.618086182026072e-03, -4.768834435624311e+00, -4.767689669567426e+00, -4.771663624200809e+00, -4.770430142217577e+00, -4.768985413376752e+00, -4.767783040994947e+00, -4.771418211159880e+00, -4.770267329592691e+00, -4.770285447342824e+00, -4.769067827511357e+00, -4.770285447342824e+00, -4.769067827511357e+00, -1.776674711044642e+00, -1.776598187659921e+00, -1.788142194804782e+00, -1.787745427972950e+00, -1.768836557231302e+00, -1.770253987018607e+00, -1.778891180697852e+00, -1.780415452316223e+00, -1.788140179761625e+00, -1.784273051430429e+00, -1.788140179761625e+00, -1.784273051430429e+00, -6.159049052896290e-01, -6.148980710867337e-01, -6.886048047031814e-01, -6.891922470699728e-01, -5.638251085045353e-01, -5.793232762658367e-01, -6.095908869991354e-01, -6.220546122539624e-01, -6.385588473498620e-01, -6.159570932513329e-01, -6.385588473498623e-01, -6.159570932513335e-01, -1.425578212593797e-01, -1.430188004136066e-01, -2.066654023269422e-01, -2.069590007551838e-01, -1.333036677844833e-01, -1.374277301086380e-01, -1.894442712389178e+00, -1.893783446108441e+00, -1.534887876712851e-01, -1.519303149853951e-01, -1.534887876712851e-01, -1.519303149853951e-01, -5.879037749823882e-03, -6.109710303499681e-03, -7.539979136894351e-03, -7.654069553034750e-03, -5.638485351778023e-03, -5.971307939952196e-03, -1.015475461604903e-01, -1.021598159493037e-01, -5.758839773509899e-03, -7.908253534420612e-03, -5.758839773509907e-03, -7.908253534924426e-03, -6.443721635999684e-01, -6.460969171550283e-01, -6.389547376828471e-01, -6.407953494788716e-01, -6.412469254652940e-01, -6.430678442804407e-01, -6.428689986828450e-01, -6.446153496879622e-01, -6.420959812602117e-01, -6.438781595075633e-01, -6.420959812602117e-01, -6.438781595075633e-01, -6.287817094722136e-01, -6.301356137816233e-01, -5.148421727758561e-01, -5.162521577232004e-01, -5.439340299472852e-01, -5.458401478151877e-01, -5.806871406460322e-01, -5.822038969110729e-01, -5.615959039671120e-01, -5.631292659558663e-01, -5.615959039671120e-01, -5.631292659558663e-01, -7.169917246925457e-01, -7.183988972459313e-01, -2.408480401254506e-01, -2.413892227628379e-01, -2.882307468039574e-01, -2.904736002431720e-01, -3.843909788577782e-01, -3.855204881364080e-01, -3.401104587992917e-01, -3.399802093767225e-01, -3.401104587992915e-01, -3.399802093767225e-01, -4.796257559683481e-01, -4.815921053885732e-01, -7.134964094132293e-02, -7.172459007995763e-02, -8.705929358143084e-02, -8.887218894447399e-02, -3.744108521115990e-01, -3.777134795537885e-01, -1.181577661382026e-01, -1.203923676629090e-01, -1.181577661382025e-01, -1.203923676629088e-01, -1.863498938707298e-02, -1.930929285659917e-02, -2.028745639123827e-03, -2.033382400672503e-03, -4.127922588826695e-03, -4.390359285188816e-03, -1.139255210511737e-01, -1.152010055146329e-01, -5.454881512200495e-03, -7.248646480646024e-03, -5.454881512200487e-03, -7.248646480646014e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse03_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.154177439511873e-08, 3.855567579455844e-10, -1.154183666962582e-08, -1.154164220820567e-08, 3.855637563905792e-10, -1.154173966906215e-08, -1.154116506049383e-08, 3.855734091993355e-10, -1.154107500729834e-08, -1.154267161384127e-08, 3.854697494807899e-10, -1.154298050407980e-08, -1.154171552954370e-08, 3.855271085313426e-10, -1.154216629979136e-08, -1.154171552954370e-08, 3.855271085313426e-10, -1.154216629979136e-08, -1.495498596314146e-05, 2.158879157656427e-06, -1.496014768744160e-05, -1.495510055244823e-05, 2.159323527660124e-06, -1.496065754997007e-05, -1.496218032701655e-05, 2.169371669283230e-06, -1.496495606267768e-05, -1.494047474950819e-05, 2.149943255801801e-06, -1.494431714895137e-05, -1.496388412767939e-05, 2.159156568071321e-06, -1.494915312479851e-05, -1.496388412767939e-05, 2.159156568071321e-06, -1.494915312479851e-05, -7.745494710458857e-03, 3.586683876242116e-03, -7.884648924970282e-03, -7.717417539487287e-03, 3.559577090514688e-03, -7.890111520051998e-03, -7.486402883745486e-03, 2.876045381924161e-03, -7.246263388310038e-03, -7.151194128527849e-03, 2.810968523930000e-03, -7.233403940238364e-03, -8.372503655244249e-03, 2.852692094259074e-03, -6.271045599351202e-03, -8.372503655244249e-03, 2.852692094259074e-03, -6.271045599351202e-03, -8.964663070224304e-01, 3.108902575321890e-01, -8.229550420857294e-01, -8.883115831540340e-01, 3.280826843588528e-01, -7.934631304232704e-01, -4.586306253858865e-03, 1.940414170439823e-03, -4.440982451645243e-03, -1.170485827796681e+00, 2.258949661124237e-01, -1.132418096738124e+00, -8.088748173709988e-01, 1.882246441728870e-01, -1.723999529497273e+00, -8.088748173709984e-01, 1.882246441728873e-01, -1.723999529497280e+00, 4.235666361990832e-03, 8.471332723898200e-03, 4.235666361990832e-03, 4.982257697020214e-03, 9.964515393423459e-03, 4.982257697020214e-03, -2.081027090887836e+00, 5.126941006152715e-02, -2.807365517304254e+00, 1.504341724364139e-03, 3.008683449168684e-03, 1.504341724364139e-03, 2.207283134900671e-03, 4.414566270491809e-03, 2.207283134900671e-03, 2.207283135350878e-03, 4.414566270088269e-03, 2.207283135350878e-03, -3.048364670648884e-06, 5.666948009101149e-07, -3.051593645106898e-06, -3.043133066570040e-06, 5.704413223836728e-07, -3.046474981932229e-06, -3.048094979658186e-06, 5.668443577206054e-07, -3.051401211833308e-06, -3.043560692625336e-06, 5.701514261968389e-07, -3.046800047114369e-06, -3.045704622580250e-06, 5.686004611431787e-07, -3.049017312257669e-06, -3.045704622580250e-06, 5.686004611431787e-07, -3.049017312257669e-06, -9.760729735531152e-05, 1.221811741084532e-05, -9.762379797635437e-05, -9.624449033303457e-05, 1.218856108878283e-05, -9.631696886191858e-05, -9.619070262615073e-05, 1.161795009824474e-05, -9.671676674355424e-05, -9.500029975045786e-05, 1.159619612758267e-05, -9.548394117190321e-05, -9.800878850379196e-05, 1.250231835492394e-05, -9.698065159941673e-05, -9.800878850379196e-05, 1.250231835492394e-05, -9.698065159941673e-05, -1.471388941618718e-02, 1.180452397706796e-02, -1.494509242873647e-02, -7.092804669585492e-03, 1.489938286408802e-02, -7.030190763609070e-03, -2.185280556148396e-02, 1.535577972946644e-02, -1.835559792315056e-02, -1.467925739214520e-02, 2.278859644535717e-02, -1.148709539836038e-02, -1.198879140249310e-02, 1.179162458306085e-02, -1.599566235481888e-02, -1.198879140249304e-02, 1.179162458306085e-02, -1.599566235481888e-02, -1.449267093559677e+00, 1.261488607621168e-01, -1.462758383344331e+00, -5.502956316177748e-01, 1.139695105238702e-01, -5.454364140528092e-01, -1.734458577664725e+00, 1.279112469154852e-01, -1.623961504459515e+00, -1.091003003408965e-04, 1.207887057881010e-04, -1.093818339835150e-04, -1.432544834612672e+00, 2.409472748596690e-01, -1.732535604263433e+00, -1.432544834612672e+00, 2.409472748596690e-01, -1.732535604263433e+00, 1.466773397935566e-03, 2.933546798259037e-03, 1.466773397935566e-03, 1.849572050554419e-03, 3.699144102256803e-03, 1.849572050554419e-03, 1.842554218706263e-02, 3.685108437354808e-02, 1.842554218706263e-02, -3.584207153173496e+00, 1.250822448857004e-01, -3.459542028229593e+00, 7.051803231269947e-03, 1.410360645889085e-02, 7.051803231269947e-03, 7.051803234557417e-03, 1.410360646869916e-02, 7.051803234557417e-03, -6.016851754302832e-03, 2.514346072918196e-02, -5.699210106159081e-03, -9.689407336123897e-03, 2.157065992117518e-02, -9.334656830849778e-03, -8.529357489355805e-03, 2.270457728491302e-02, -8.180859065851189e-03, -7.460494136248740e-03, 2.373865089872573e-02, -7.130756973619846e-03, -8.007093698170025e-03, 2.321019190891285e-02, -7.667748696626214e-03, -8.007093698170025e-03, 2.321019190891285e-02, -7.667748696626214e-03, -5.249320724737504e-03, 2.977269840520045e-02, -4.976320131528371e-03, -2.612071731262681e-02, 1.592277215307748e-02, -2.578150401253839e-02, -2.450149484270723e-02, 1.838749842245184e-02, -2.406554619865335e-02, -1.955759036528280e-02, 2.169730037966074e-02, -1.913187680440803e-02, -2.254812449777042e-02, 1.995497716545398e-02, -2.209628657507565e-02, -2.254812449777042e-02, 1.995497716545398e-02, -2.209628657507565e-02, -6.221891092596088e-03, 1.183264719377924e-02, -6.100489127599816e-03, -3.249216624188954e-01, 8.498631964250428e-02, -3.208509529583984e-01, -1.920789966773817e-01, 7.821972418059023e-02, -1.860219298450542e-01, -9.220647713749375e-02, 6.964082434152352e-02, -9.032862417619905e-02, -1.196484908048357e-01, 7.796350422599263e-02, -1.206746324303442e-01, -1.196484908048359e-01, 7.796350422599266e-02, -1.206746324303445e-01, -3.551271779693585e-02, 2.285950305464996e-02, -3.490071636765153e-02, -1.458970513433346e+00, 4.213028450134424e-02, -1.533060872380388e+00, -3.783798611380269e+00, 6.458066222247318e-02, -3.840263635195433e+00, -1.256602539838881e-01, 1.099497136873529e-01, -1.181887234171164e-01, -2.721518893184352e+00, 2.182010199987041e-01, -2.978056777672988e+00, -2.721518893184367e+00, 2.182010199987039e-01, -2.978056777672985e+00, 5.281295584737279e-03, 1.056259116938041e-02, 5.281295584737279e-03, 2.005765736367150e-03, 4.011531506685853e-03, 2.005765736367150e-03, 2.510381951246900e-03, 5.020763908060611e-03, 2.510381951246900e-03, -3.121782272383564e+00, 2.002688123716920e-01, -3.018339958795762e+00, 9.000943715250370e-03, 1.800188742308661e-02, 9.000943715250370e-03, 9.000943718924263e-03, 1.800188743452388e-02, 9.000943718924263e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
