
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wc04_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.428707990192396e+00, -1.428679603400678e+00, -1.428605721662066e+00, -1.429026983516890e+00, -1.428798810327367e+00, -1.428798810327367e+00, -4.000358712661077e-01, -3.999905966605050e-01, -3.989512579477055e-01, -4.008145523545253e-01, -3.999887225568234e-01, -3.999887225568234e-01, -1.660467067199902e-01, -1.667101337552920e-01, -1.845541180881608e-01, -1.845385261491517e-01, -1.837071614056756e-01, -1.837071614056756e-01, -1.127690882710897e-01, -1.113144640982972e-01, -1.750628058567102e-01, -1.207104587196212e-01, -1.161049393340357e-01, -1.161049393340357e-01, -6.798323806971258e-02, -6.799457616000493e-02, -1.072263496485722e-01, -6.217957683455471e-02, -6.200374651170005e-02, -6.200374651170001e-02, -3.741063546447336e-01, -3.725270567711791e-01, -3.740415316113202e-01, -3.726472036495972e-01, -3.733015146597768e-01, -3.733015146597768e-01, -4.254369012697557e-01, -4.223783723702937e-01, -4.362477682130502e-01, -4.335242870019479e-01, -4.185237643693355e-01, -4.185237643693355e-01, -1.233148096505760e-01, -9.919948654326011e-02, -1.227120412418449e-01, -9.848372272971867e-02, -1.206634564993414e-01, -1.206634564993414e-01, -1.251262781115111e-01, -1.341325199833265e-01, -1.229579689274665e-01, -1.541662210970318e-01, -1.175968533948240e-01, -1.175968533948240e-01, -5.611390843812673e-02, -5.995730846139490e-02, -3.977377606024882e-02, -1.121410937436514e-01, -4.786556789129167e-02, -4.786556789129169e-02, -8.831456983218583e-02, -9.539747076134525e-02, -9.296755696498263e-02, -9.090824960292278e-02, -9.194348042669885e-02, -9.194348042669885e-02, -8.526394542791982e-02, -1.356987530675255e-01, -1.220145182241635e-01, -1.076205244832880e-01, -1.148538643291878e-01, -1.148538643291878e-01, -1.023463326152297e-01, -1.374670032888848e-01, -1.329370830911739e-01, -1.157683086374568e-01, -1.243525132791694e-01, -1.243525132791694e-01, -1.302650032318910e-01, -1.081720459870593e-01, -1.137700705939280e-01, -1.028267233425236e-01, -1.112762847226722e-01, -1.112762847226722e-01, -7.603547047246151e-02, -3.447558891013788e-02, -4.537443315075762e-02, -1.109100400778602e-01, -4.504519035713707e-02, -4.504519035713704e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wc04_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.016463132792627e+00, 1.016441916751312e+00, 1.016387946355909e+00, 1.016702752055652e+00, 1.016532069037725e+00, 1.016532069037725e+00, 1.009387736409965e-01, 1.009083087344702e-01, 1.002085310766315e-01, 1.014649765719372e-01, 1.009074153164435e-01, 1.009074153164435e-01, -3.281081356973409e-02, -3.245469885878714e-02, -2.401377575357721e-02, -2.407538316327800e-02, -2.440611865908665e-02, -2.440611865908665e-02, -3.608499963014934e-02, -3.622945798260430e-02, -3.083309185701801e-02, -3.710735455850064e-02, -3.615046548085896e-02, -3.615046548085894e-02, -2.121002802722223e-02, -2.154797306039730e-02, -4.012241515601933e-02, -1.696326536356281e-02, -1.821864798564747e-02, -1.821864798564751e-02, 8.106382153063942e-02, 7.971310627045677e-02, 8.100842308323780e-02, 7.981595649572515e-02, 8.037589650556543e-02, 8.037589650556543e-02, 9.316394073479217e-02, 9.239792224594866e-02, 9.691252913389946e-02, 9.631362901115464e-02, 9.083069648662399e-02, 9.083069648662399e-02, -5.493660403698269e-02, -7.943425317896292e-02, -5.260571082305426e-02, -7.391872662059651e-02, -5.748424697313449e-02, -5.748424697313449e-02, -4.105962333061840e-02, -3.612881266798144e-02, -4.125558639084065e-02, -8.220238573122608e-02, -3.817613033647360e-02, -3.817613033647360e-02, -1.470126266679958e-02, -1.648993991061688e-02, -1.197436173361475e-02, -4.103303923422886e-02, -1.413363067946193e-02, -1.413363067946197e-02, -8.711472005287486e-02, -7.895993601602704e-02, -8.164599266808129e-02, -8.400884798649118e-02, -8.281043307667101e-02, -8.281043307667101e-02, -8.921299032040307e-02, -4.202354126565823e-02, -5.133423331522957e-02, -6.359178182974194e-02, -5.707030330317648e-02, -5.707030330317648e-02, -7.869333275969045e-02, -3.460084711075494e-02, -3.486577305588944e-02, -4.377730055329760e-02, -3.795891975438529e-02, -3.795891975438524e-02, -4.288149541600417e-02, -4.023721254571484e-02, -4.193781179023052e-02, -4.953635054991590e-02, -3.963743725274449e-02, -3.963743725274446e-02, -2.499456531633843e-02, -7.703104929037168e-03, -1.160064857831518e-02, -3.990606643098916e-02, -1.331063160670551e-02, -1.331063160670546e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wc04_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.263498073763448e-09, -7.263462763515979e-09, -7.263207442682618e-09, -7.263734835675745e-09, -7.263472462718584e-09, -7.263472462718584e-09, -9.596605257129907e-06, -9.597007215512352e-06, -9.605369903775306e-06, -9.583562960727447e-06, -9.596161861378502e-06, -9.596161861378502e-06, -6.002448582706627e-03, -6.006058431327447e-03, -6.058427710104641e-03, -5.889417673285938e-03, -5.947549844427067e-03, -5.947549844427067e-03, -7.660445736845024e-01, -7.452837856177547e-01, -3.361747631702529e-03, -1.551944893489110e+00, -1.179197784623463e+00, -1.179197784623463e+00, -1.013465284706063e+04, -8.887221184713429e+03, -5.927331903069463e+01, -4.782855652272107e+04, -2.650636953472276e+04, -2.650636953472278e+04, -2.189755892867199e-06, -2.191315213530959e-06, -2.189806466099918e-06, -2.191183209999067e-06, -2.190556792037198e-06, -2.190556792037198e-06, -7.311694409344580e-05, -7.162046461197771e-05, -7.329109665745721e-05, -7.195912347972424e-05, -7.220837983286850e-05, -7.220837983286850e-05, -1.227603665489275e-02, -1.097789745137395e-02, -1.622714627934339e-02, -1.717263818119493e-02, -1.180997512404783e-02, -1.180997512404783e-02, -3.979917201678510e+00, -5.979984605018446e-01, -5.031917113536820e+00, -1.343142722553735e-04, -2.860678730492434e+00, -2.860678730492434e+00, -1.090927591844915e+05, -5.343692787150452e+04, -1.936415123122387e+05, -1.635684189706489e+01, -9.142220387272727e+04, -9.142220387272722e+04, -1.638509449702055e-02, -1.543051267982378e-02, -1.571295842118451e-02, -1.598490632644029e-02, -1.584401935359831e-02, -1.584401935359831e-02, -1.889279637417185e-02, -2.086160753769683e-02, -1.955382174981767e-02, -1.872647253730723e-02, -1.911743817854019e-02, -1.911743817854019e-02, -8.989177715267697e-03, -2.874219705730658e-01, -1.697539747229130e-01, -7.989321524314531e-02, -1.174936238382996e-01, -1.174936238382996e-01, -2.879914317141980e-02, -6.510962819489565e+01, -2.759315953507856e+01, -1.025688620419743e-01, -8.928232838205522e+00, -8.928232838205524e+00, -3.552152756963988e+03, -3.753975859622941e+06, -3.600556403817792e+05, -1.056431208766617e+01, -1.220450559591077e+05, -1.220450559591081e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
