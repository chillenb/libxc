
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b5050lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.051431410123037e+01, -1.051432986984738e+01, -1.051443036024878e+01, -1.051419512787359e+01, -1.051431406378133e+01, -1.051431406378133e+01, -1.792977941323049e+00, -1.792963153946361e+00, -1.792663828662815e+00, -1.793513846479470e+00, -1.793002050873247e+00, -1.793002050873247e+00, -3.864220884170712e-01, -3.862674030988079e-01, -3.829495867766682e-01, -3.856279741194137e-01, -3.848085361742575e-01, -3.848085361742575e-01, -1.150908791911939e-01, -1.165132309412042e-01, -4.434959985438684e-01, -9.030567188432616e-02, -1.001761336983276e-01, -1.001761336983276e-01, -2.927691666148239e-02, -2.937045455996174e-02, -5.280787536385997e-02, -2.623417644631370e-02, -2.634683687695157e-02, -2.634683687695155e-02, -2.584839077319407e+00, -2.584633489137490e+00, -2.584834522167621e+00, -2.584652959928313e+00, -2.584732203320006e+00, -2.584732203320006e+00, -1.093040610957966e+00, -1.098569306423505e+00, -1.092252017853605e+00, -1.097139086014974e+00, -1.096472188351022e+00, -1.096472188351022e+00, -3.319300413253437e-01, -3.483621752649191e-01, -3.103408656046534e-01, -3.129887982121765e-01, -3.356745598161521e-01, -3.356745598161521e-01, -6.641292927560588e-02, -1.154441802200978e-01, -6.338054263299867e-02, -9.704050817244675e-01, -7.618057171991724e-02, -7.618057171991724e-02, -2.355201647043758e-02, -2.528609255998924e-02, -1.667643936538607e-02, -5.489318530029983e-02, -2.015901601020308e-02, -2.015901601020309e-02, -3.216765847407957e-01, -3.224805280375622e-01, -3.222249034908789e-01, -3.219899251992296e-01, -3.221096187782093e-01, -3.221096187782093e-01, -3.129478768515093e-01, -2.892051622139892e-01, -2.967200496692536e-01, -3.035116354269641e-01, -3.000554886694967e-01, -3.000554886694967e-01, -3.642066501716473e-01, -1.433559985849581e-01, -1.684430754744955e-01, -2.105245299974290e-01, -1.885401954532646e-01, -1.885401954532646e-01, -2.680949833082544e-01, -5.306805521393685e-02, -5.404711291870439e-02, -2.009177390910296e-01, -5.943791966476662e-02, -5.943791966476661e-02, -3.341050156365462e-02, -1.433538144502347e-02, -1.894833877974565e-02, -5.785434707430355e-02, -1.893552435954917e-02, -1.893552435954916e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b5050lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.279498152887374e+01, -1.279502715394205e+01, -1.279522460197907e+01, -1.279454590807930e+01, -1.279490229382263e+01, -1.279490229382263e+01, -2.129476614053147e+00, -2.129492767611913e+00, -2.129916919186787e+00, -2.129570461202238e+00, -2.129545563137636e+00, -2.129545563137636e+00, -4.541836142977659e-01, -4.537060075808198e-01, -4.428761237182587e-01, -4.461091256336766e-01, -4.454018232405110e-01, -4.454018232405110e-01, -1.440877913364450e-01, -1.450772253190708e-01, -5.219243601420145e-01, -1.226317777079271e-01, -1.300369379368622e-01, -1.300369379368622e-01, -1.018563583041115e-02, -1.046174579333677e-02, -3.358250215677998e-02, -7.461296791080585e-03, -8.285633047197580e-03, -8.285633047197597e-03, -3.202630050314009e+00, -3.203762442152759e+00, -3.202681676376238e+00, -3.203681347804546e+00, -3.203204152820542e+00, -3.203204152820542e+00, -1.203674976234534e+00, -1.212384212185809e+00, -1.196580637873473e+00, -1.204228272665660e+00, -1.211973057012538e+00, -1.211973057012538e+00, -4.052493728294095e-01, -4.433387212593176e-01, -3.773500112965720e-01, -3.956668093118513e-01, -4.116942199513755e-01, -4.116942199513755e-01, -9.701389595889229e-02, -1.555426930459196e-01, -8.972012419192524e-02, -1.239474223350552e+00, -1.044746806884057e-01, -1.044746806884057e-01, -6.288004394042358e-03, -7.238678519585226e-03, -5.121863787665643e-03, -5.664476709924860e-02, -6.170077650408017e-03, -6.170077650408035e-03, -4.155586295813588e-01, -4.109146594852480e-01, -4.124702748946783e-01, -4.138147833866153e-01, -4.131348917005712e-01, -4.131348917005712e-01, -4.061273560546779e-01, -3.447831020327596e-01, -3.600135334734663e-01, -3.768013520150484e-01, -3.680293133423135e-01, -3.680293133423135e-01, -4.624981357763767e-01, -1.824897431779311e-01, -2.054284926338622e-01, -2.532477796298209e-01, -2.262979332299227e-01, -2.262979332299227e-01, -3.203557172795539e-01, -3.245603154391474e-02, -4.459074969205453e-02, -2.446237446588101e-01, -7.237746230929054e-02, -7.237746230929050e-02, -1.289560908246550e-02, -3.079925345100965e-03, -4.818568946770273e-03, -6.791602827417528e-02, -5.759635143490160e-03, -5.759635143490133e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b5050lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b5050lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.034790925927743e-09, -3.034776321013287e-09, -3.034670154128584e-09, -3.034888304349846e-09, -3.034779856310606e-09, -3.034779856310606e-09, -3.873798557381086e-06, -3.873969124832711e-06, -3.877541350605454e-06, -3.868429967147103e-06, -3.873633682409773e-06, -3.873633682409773e-06, -1.878077239760626e-03, -1.876105118436916e-03, -1.806964852892454e-03, -1.765228312464948e-03, -1.783541987577435e-03, -1.783541987577435e-03, -4.440403672199075e-02, -5.133470782837980e-02, -1.110497376069729e-03, 1.085610881756157e-01, 8.955785309419465e-03, 8.955785309419555e-03, -4.256979893709133e+03, -3.733006198011507e+03, -1.713837061719585e+01, -2.009000273981683e+04, -1.113378858344190e+04, -1.113378858344191e+04, -8.996135419193413e-07, -9.002873215035718e-07, -8.996357216093594e-07, -9.002306073702645e-07, -8.999594470548967e-07, -8.999594470548967e-07, -2.776683166008241e-05, -2.724474932576436e-05, -2.775920933278550e-05, -2.729717297287955e-05, -2.748185851173291e-05, -2.748185851173291e-05, -3.921077988288004e-03, -3.785617226109388e-03, -5.018499938860789e-03, -5.722033015902894e-03, -3.817558692456067e-03, -3.817558692456067e-03, 7.001132806072462e-01, 2.456444353402601e-02, 8.026480525667490e-01, -5.316778598942915e-05, 2.851997206373729e-01, 2.851997206373729e-01, -4.582354121160760e+04, -2.244575428146004e+04, -8.133756892803303e+04, -3.922366089382361e-01, -3.840116574311977e+04, -3.840116574311975e+04, -5.675737208616314e-03, -5.240633480888969e-03, -5.371414860038510e-03, -5.495539723521829e-03, -5.431420106368453e-03, -5.431420106368453e-03, -6.557233238089884e-03, -5.893352249364069e-03, -5.910865876344799e-03, -5.998923766658360e-03, -5.954229402372386e-03, -5.954229402372386e-03, -3.120626477278352e-03, -1.248327217077816e-02, -2.137851006871630e-02, -1.902553303643119e-02, -2.213559168859364e-02, -2.213559168859364e-02, -7.850138248228221e-03, -1.990477325079283e+01, -3.585193045410375e+00, -2.592468774158638e-02, 4.566646353440650e-01, 4.566646353440634e-01, -1.492053222977194e+03, -1.576827543796015e+06, -1.512384928096282e+05, 3.528910267930427e-01, -5.126404990781601e+04, -5.126404990781618e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
