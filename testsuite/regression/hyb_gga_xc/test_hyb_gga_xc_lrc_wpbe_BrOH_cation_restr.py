
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lrc_wpbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082780467452831e+01, -2.082783293596540e+01, -2.082802498391666e+01, -2.082760314567523e+01, -2.082781473515295e+01, -2.082781473515295e+01, -3.346143075703107e+00, -3.346110326262057e+00, -3.345438753169622e+00, -3.347266540151413e+00, -3.346187545787093e+00, -3.346187545787093e+00, -5.615135355076557e-01, -5.612566299249259e-01, -5.570779636734589e-01, -5.620620673107969e-01, -5.604003012042074e-01, -5.604003012042074e-01, -8.351211658690051e-02, -8.504377560451801e-02, -6.706508096226920e-01, -5.373479364727657e-02, -6.473035799234533e-02, -6.473035799234518e-02, -3.804914573546127e-06, -4.438783697122751e-06, -1.063981137101537e-03, -7.314645318468705e-07, -1.452317547381262e-06, -1.452317547381258e-06, -4.924733315884671e+00, -4.924329213611899e+00, -4.924724446185850e+00, -4.924367532949572e+00, -4.924522897094974e+00, -4.924522897094974e+00, -1.966430726695343e+00, -1.976699993323199e+00, -1.966820158654014e+00, -1.975876630819517e+00, -1.971928133712523e+00, -1.971928133712523e+00, -4.613579764473413e-01, -5.041405415644219e-01, -4.202245046911655e-01, -4.353598835216805e-01, -4.693164665751888e-01, -4.693164665751888e-01, -2.501819932217716e-02, -9.241335416685691e-02, -2.034892424654685e-02, -1.719830508589196e+00, -3.499409290349190e-02, -3.499409290349190e-02, -3.359103695459920e-07, -6.834160632319713e-07, -3.060509964600536e-07, -6.025898800765845e-03, -5.346586307977564e-07, -5.346586307977551e-07, -4.596992936440240e-01, -4.559034546760543e-01, -4.571320900147186e-01, -4.582286789561315e-01, -4.576698328691363e-01, -4.576698328691363e-01, -4.451251794992991e-01, -3.787513525642089e-01, -3.945269088389802e-01, -4.122007874855609e-01, -4.028083196900487e-01, -4.028083196900487e-01, -5.333117003066387e-01, -1.330542686893535e-01, -1.688597076178822e-01, -2.366878218133762e-01, -1.990409334380220e-01, -1.990409334380219e-01, -3.399795063464800e-01, -9.067150873780336e-04, -2.833457999616323e-03, -2.218758696524769e-01, -1.270678889095174e-02, -1.270678889095162e-02, -1.073467631674212e-05, -1.304612656476477e-08, -1.206891209360613e-07, -1.055622456165069e-02, -4.236411548651790e-07, -4.236411548651059e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lrc_wpbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.510064474656301e+01, -2.510074544746107e+01, -2.510116573329573e+01, -2.509966808267365e+01, -2.510045671198064e+01, -2.510045671198064e+01, -3.978394388465114e+00, -3.978446885538821e+00, -3.979760533781853e+00, -3.978245407854305e+00, -3.978554766172078e+00, -3.978554766172078e+00, -6.828956264408931e-01, -6.812575542146799e-01, -6.416063358101475e-01, -6.484664444275037e-01, -6.477180764582332e-01, -6.477180764582332e-01, -1.000654107957319e-01, -1.032248541219240e-01, -8.165208142765961e-01, -6.404457306853814e-02, -7.577685052053652e-02, -7.577685052053634e-02, -7.640058014289636e-06, -8.918285152854520e-06, -2.329291182688382e-03, -1.464863945503363e-06, -2.911822469391590e-06, -2.911822469389242e-06, -6.161006092811693e+00, -6.163961451365816e+00, -6.161137792525483e+00, -6.163746831245122e+00, -6.162506204397390e+00, -6.162506204397390e+00, -2.091001422468680e+00, -2.109242533441634e+00, -2.074489707644738e+00, -2.090328347471716e+00, -2.109404573026888e+00, -2.109404573026888e+00, -6.202566874330581e-01, -7.038893979992275e-01, -5.642984112961563e-01, -6.114343651826463e-01, -6.350849135328571e-01, -6.350849135328571e-01, -3.717742100310809e-02, -1.009838387701810e-01, -3.167959138762508e-02, -2.288884913539428e+00, -4.600578822268619e-02, -4.600578822268619e-02, -6.725468179182877e-07, -1.368847874267020e-06, -6.154661229346008e-07, -1.162982165439133e-02, -1.073121585502663e-06, -1.073121585505360e-06, -6.455942014366108e-01, -6.403815122759196e-01, -6.425187236745721e-01, -6.440501013771140e-01, -6.433124612484713e-01, -6.433124612484713e-01, -6.251573801336581e-01, -4.848598837470312e-01, -5.297559716684552e-01, -5.727256917316699e-01, -5.513570996643402e-01, -5.513570996643402e-01, -7.416302695603900e-01, -1.433488709042147e-01, -1.914173539254294e-01, -3.183479935130650e-01, -2.487532459251434e-01, -2.487532459251436e-01, -4.400403447031541e-01, -1.988064384919948e-03, -5.974684347754007e-03, -3.159232780878268e-01, -2.123274406108547e-02, -2.123274406108532e-02, -2.161906867943297e-05, -2.610995198008431e-08, -2.416762673629000e-07, -1.834682609149422e-02, -8.506010487142129e-07, -8.506010485054461e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lrc_wpbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.859337394331113e-09, -6.859285084369140e-09, -6.858991086973994e-09, -6.859770608348284e-09, -6.859370890301682e-09, -6.859370890301682e-09, -8.412380056245403e-06, -8.412441749437211e-06, -8.413048814817271e-06, -8.405776372455972e-06, -8.411667630252209e-06, -8.411667630252209e-06, -3.863761517526257e-03, -3.886717813117340e-03, -4.379814136987271e-03, -4.253090399992965e-03, -4.279763551371200e-03, -4.279763551371200e-03, -2.929187056645616e-01, -2.823509647026218e-01, -2.234399545061134e-03, -4.327273597786573e-01, -3.966943285322666e-01, -3.966943285322676e-01, 4.249395511372741e-03, 5.004423159153501e-03, -3.023311372036652e-02, 1.504403249546569e-03, 3.143524880861955e-03, 3.143524879464323e-03, -1.790032121976474e-06, -1.788326708505346e-06, -1.789951412622660e-06, -1.788446297296400e-06, -1.789172256902196e-06, -1.789172256902196e-06, -6.718228925966750e-05, -6.578585925872881e-05, -6.741472255077922e-05, -6.619548267267280e-05, -6.627040128614948e-05, -6.627040128614948e-05, -4.277257251301896e-03, -2.383615294081348e-04, -5.735889437438651e-03, -5.881754399573134e-04, -3.754081858285378e-03, -3.754081858285378e-03, -4.008549755656188e-01, -2.455578246254545e-01, -3.950559712223164e-01, -5.358341332034346e-05, -5.126735742392275e-01, -5.126735742392275e-01, 1.469705460392944e-03, 1.849591318682729e-03, 1.851204973519367e-02, -2.449887792479636e-01, 8.055708421931592e-03, 8.055708430851762e-03, 2.456520921720239e-03, 3.571139654056157e-04, 1.022821107959131e-03, 1.629396424138667e-03, 1.319305524881404e-03, 1.319305524881404e-03, 3.786004672293643e-03, -1.024737592808713e-02, -6.911812292601939e-03, -3.274432598320616e-03, -5.156288341802874e-03, -5.156288341802874e-03, -5.491274707131889e-04, -1.478378443101200e-01, -9.372704809866900e-02, -2.731719802126958e-02, -5.533395891569592e-02, -5.533395891569565e-02, -1.312431943718276e-02, -2.179276485488296e-02, -1.022136690432839e-01, -1.689505898791478e-02, -4.498866234738705e-01, -4.498866234738724e-01, 5.236948716159773e-03, 2.005771093018961e-03, 2.523779588213790e-03, -4.044374203812579e-01, 1.003167554156081e-02, 1.003167553972323e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
