
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_kmlyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.913601445829549e+00, -8.913622836869113e+00, -8.913733945919477e+00, -8.913383346404727e+00, -8.913612595678279e+00, -8.913612595678279e+00, -1.528972281763086e+00, -1.528975656698085e+00, -1.529128039365387e+00, -1.529172493973855e+00, -1.528980188146865e+00, -1.528980188146865e+00, -3.379738187363238e-01, -3.376233167408186e-01, -3.282882294890185e-01, -3.306399674104384e-01, -3.378462502747804e-01, -3.378462502747804e-01, -1.094736547875712e-01, -1.110305806457616e-01, -3.974096297411867e-01, -7.872131664446665e-02, -1.099472963227714e-01, -1.099472963227714e-01, -1.180947875786809e-02, -1.225486795848604e-02, -3.258460834301882e-02, -6.506644394550742e-03, -1.215285164264530e-02, -1.215285164264530e-02, -2.247403089322833e+00, -2.247794904804784e+00, -2.247444385173313e+00, -2.247749026408143e+00, -2.247602301002884e+00, -2.247602301002884e+00, -8.887078576170028e-01, -8.946316836394990e-01, -8.861892221532446e-01, -8.908164703781877e-01, -8.959702739281868e-01, -8.959702739281868e-01, -3.016909677857034e-01, -3.254473747012978e-01, -2.882421758430316e-01, -3.001345540871728e-01, -3.119118600088956e-01, -3.119118600088956e-01, -5.660865617919638e-02, -1.053532176381646e-01, -5.691993905060987e-02, -8.777664114662650e-01, -6.707890374961024e-02, -6.707890374961024e-02, -6.316331113890160e-03, -7.050693741610696e-03, -5.555044445586662e-03, -3.988956786801298e-02, -6.530948362940259e-03, -6.530948362940259e-03, -3.116971078663914e-01, -3.099858942919157e-01, -3.105998836351355e-01, -3.110733349097809e-01, -3.108364623999578e-01, -3.108364623999578e-01, -3.031309129977622e-01, -2.654152613161907e-01, -2.766348804671283e-01, -2.868784702789450e-01, -2.816885119034979e-01, -2.816885119034979e-01, -3.389988614925545e-01, -1.311345508228242e-01, -1.548783731837355e-01, -1.948153520655193e-01, -1.740778050631550e-01, -1.740778050631549e-01, -2.427355298014748e-01, -3.094065476724547e-02, -3.653533824091889e-02, -1.866872419074604e-01, -4.936193796114512e-02, -4.936193796114512e-02, -1.340152060343166e-02, -2.351537523449917e-03, -4.086522436675247e-03, -4.842596244270538e-02, -5.707892119498889e-03, -5.707892119498881e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_kmlyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.184996267290080e+01, -1.184999107662776e+01, -1.185013883544554e+01, -1.184967329345885e+01, -1.184997747616006e+01, -1.184997747616006e+01, -2.017247146947818e+00, -2.017250616276023e+00, -2.017425197312383e+00, -2.017532224120033e+00, -2.017257127534325e+00, -2.017257127534325e+00, -4.472081334388233e-01, -4.468872258228526e-01, -4.389515967153106e-01, -4.417862688674156e-01, -4.470906594691029e-01, -4.470906594691029e-01, -1.548136392739022e-01, -1.560551451100998e-01, -5.217826548371304e-01, -1.248041668368056e-01, -1.551784624558291e-01, -1.551784624558291e-01, -1.495557108216114e-02, -1.551402867821525e-02, -4.683535224146772e-02, -8.295959952305124e-03, -1.538612325869734e-02, -1.538612325869734e-02, -2.969462522535284e+00, -2.969959450183159e+00, -2.969515026833776e+00, -2.969901391600918e+00, -2.969714984304008e+00, -2.969714984304008e+00, -1.177530931378155e+00, -1.185006470814691e+00, -1.174718638424780e+00, -1.180547638333756e+00, -1.186245053569882e+00, -1.186245053569882e+00, -3.933403521613553e-01, -4.203447800639614e-01, -3.761131260051297e-01, -3.880408699829065e-01, -4.060116133638581e-01, -4.060116133638581e-01, -1.004177142765721e-01, -1.619761316251836e-01, -9.841669151702645e-02, -1.148379530573241e+00, -1.105911142713633e-01, -1.105911142713633e-01, -8.056299348903676e-03, -8.980700374426945e-03, -7.096818742590080e-03, -6.450333717946197e-02, -8.326560629156279e-03, -8.326560629156279e-03, -4.013856250478584e-01, -3.999711026965834e-01, -4.004775308385287e-01, -4.008684300670998e-01, -4.006726592288401e-01, -4.006726592288401e-01, -3.900705207766779e-01, -3.497095363535220e-01, -3.612683548861792e-01, -3.721360249778949e-01, -3.665634324134504e-01, -3.665634324134504e-01, -4.381979940175180e-01, -1.912601173185035e-01, -2.158286015224109e-01, -2.585490493953083e-01, -2.356635460833786e-01, -2.356635460833786e-01, -3.206003435122451e-01, -4.362116523094742e-02, -5.849488117950604e-02, -2.450696454774208e-01, -8.205583839536366e-02, -8.205583839536365e-02, -1.695126539898587e-02, -3.037066812331541e-03, -5.241355272682196e-03, -7.799630503989215e-02, -7.289569421535576e-03, -7.289569421535569e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_kmlyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_kmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.952417186483129e-12, 8.952307953400837e-12, 8.951740220338502e-12, 8.953530625409847e-12, 8.952360252908887e-12, 8.952360252908887e-12, 8.695838447009875e-08, 8.695745488074231e-08, 8.691368376363829e-08, 8.689525570040889e-08, 8.695601951926240e-08, 8.695601951926240e-08, 3.668355973249385e-04, 3.686866253458282e-04, 4.207706843126000e-04, 4.049349485014454e-04, 3.675094344355579e-04, 3.675094344355579e-04, 1.255702454919741e-01, 1.192124651886496e-01, 1.501642132814301e-04, 4.127589455696767e-01, 1.236222456604371e-01, 1.236222456604371e-01, 1.564421168782537e-03, 3.045855555130218e-03, 4.522898600843451e+00, 2.883779899069939e-11, 2.629652890350882e-03, 2.629652890350882e-03, 1.118434897885777e-08, 1.117425305956062e-08, 1.118328326100910e-08, 1.117543353541012e-08, 1.117921619635975e-08, 1.117921619635975e-08, 1.638434824361772e-06, 1.580851338046980e-06, 1.662422211248903e-06, 1.616481288163798e-06, 1.569610358711395e-06, 1.569610358711395e-06, 7.206319514611784e-04, 4.819819976719931e-04, 9.285041498677352e-04, 7.575695048810439e-04, 6.001560561510706e-04, 6.001560561510706e-04, 1.101681552184878e+00, 1.221011353238552e-01, 1.143213035339466e+00, 1.808289453814887e-06, 7.092596978561072e-01, 7.092596978561072e-01, 7.618453132347374e-12, 8.211144428612922e-10, 1.278393850835485e-14, 3.264945401624374e+00, 3.396111144066632e-11, 3.396111144066632e-11, 6.188890549758136e-04, 6.351889566958083e-04, 6.292878096197017e-04, 6.247795793394592e-04, 6.270311401630610e-04, 6.270311401630610e-04, 7.249857187371052e-04, 1.436356194886240e-03, 1.165942160107810e-03, 9.676417448804114e-04, 1.063202744583573e-03, 1.063202744583573e-03, 3.823698935840778e-04, 4.809869891600738e-02, 2.306790476387057e-02, 7.720796778806935e-03, 1.342459914446447e-02, 1.342459914446448e-02, 2.344476854093812e-03, 4.559576802979869e+00, 3.794911981689090e+00, 9.984049181740704e-03, 1.912707482651499e+00, 1.912707482651498e+00, 1.298226639322346e-02, 4.073477489371313e-50, 2.151834171687782e-23, 2.134109686030902e+00, 5.396024422693001e-14, 5.396024422692654e-14])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
