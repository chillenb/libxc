
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbeb0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.576864292964066e+01, -1.576866435403154e+01, -1.576880903945934e+01, -1.576848927174974e+01, -1.576864979150294e+01, -1.576864979150294e+01, -2.653867219688587e+00, -2.653843889700708e+00, -2.653368763117233e+00, -2.654690312905995e+00, -2.653902089370558e+00, -2.653902089370558e+00, -5.559026361841871e-01, -5.556830786045091e-01, -5.517107857854611e-01, -5.555535955115548e-01, -5.543138242472067e-01, -5.543138242472067e-01, -1.703719556977124e-01, -1.718764789674578e-01, -6.393555252708029e-01, -1.398352836330082e-01, -1.515054297716224e-01, -1.515054297716224e-01, -7.565598096260390e-03, -7.962429955287672e-03, -4.327659810433931e-02, -4.371194269344181e-03, -5.491906044585863e-03, -5.491906044585863e-03, -3.842316759694823e+00, -3.842059324114977e+00, -3.842311992721038e+00, -3.842084600804084e+00, -3.842182178219310e+00, -3.842182178219310e+00, -1.612479718739442e+00, -1.620351685944401e+00, -1.612400580835241e+00, -1.619341428102677e+00, -1.616879827550237e+00, -1.616879827550237e+00, -4.788093945690549e-01, -5.102518015917733e-01, -4.469052786187457e-01, -4.568336932839284e-01, -4.848609675094148e-01, -4.848609675094148e-01, -1.050456474797784e-01, -1.783271038473474e-01, -9.804320895066634e-02, -1.436260965068365e+00, -1.181648904516395e-01, -1.181648904516395e-01, -3.372875419653981e-03, -4.273198509508644e-03, -3.267186166522460e-03, -6.830089253932720e-02, -3.935957895557927e-03, -3.935957895557927e-03, -4.743730201304068e-01, -4.724274803496763e-01, -4.730631189464933e-01, -4.736245091221881e-01, -4.733387968793195e-01, -4.733387968793195e-01, -4.625274135800717e-01, -4.149596176065440e-01, -4.269003777427722e-01, -4.397322972467004e-01, -4.329615676326670e-01, -4.329615676326670e-01, -5.331002006410934e-01, -2.151177996051356e-01, -2.463871516219828e-01, -3.021773276003412e-01, -2.719047907060837e-01, -2.719047907060837e-01, -3.845755110094058e-01, -4.150169349813677e-02, -5.592769477644072e-02, -2.889921879944829e-01, -8.442383357682835e-02, -8.442383357682838e-02, -1.067223969525558e-02, -1.142447673538326e-03, -2.397889739568348e-03, -7.992103495769781e-02, -3.642032498498380e-03, -3.642032498498380e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbeb0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.899379587018566e+01, -1.899387166645215e+01, -1.899418765750457e+01, -1.899306040202316e+01, -1.899365403991600e+01, -1.899365403991600e+01, -3.144650925179101e+00, -3.144690730050840e+00, -3.145686079449459e+00, -3.144533277628395e+00, -3.144771873541507e+00, -3.144771873541507e+00, -6.536418420011959e-01, -6.524987016976660e-01, -6.248986091616349e-01, -6.301019779216042e-01, -6.294370142014722e-01, -6.294370142014722e-01, -1.874469177312605e-01, -1.902031087782680e-01, -7.562308915155678e-01, -1.512120316381264e-01, -1.637355211070447e-01, -1.637355211070446e-01, -1.007514383786394e-02, -1.060181684444147e-02, -5.597900839324001e-02, -5.825988895834546e-03, -7.317471384703547e-03, -7.317471384703543e-03, -4.785253617739906e+00, -4.787477161841437e+00, -4.785352699197021e+00, -4.787315684609775e+00, -4.786382308187115e+00, -4.786382308187115e+00, -1.724814524564438e+00, -1.738675712705077e+00, -1.711989025753129e+00, -1.724079058803449e+00, -1.738871705122855e+00, -1.738871705122855e+00, -5.992459129209676e-01, -6.626592631084096e-01, -5.559205209880230e-01, -5.909269122436824e-01, -6.103801575070872e-01, -6.103801575070872e-01, -1.211188879894498e-01, -1.895511267255261e-01, -1.144086527451947e-01, -1.867867093213779e+00, -1.306537995348764e-01, -1.306537995348764e-01, -4.495969643541132e-03, -5.695297340371991e-03, -4.353673668554511e-03, -8.412858027441605e-02, -5.244872718601495e-03, -5.244872718601495e-03, -6.186566408008221e-01, -6.136393103951735e-01, -6.155411035654506e-01, -6.170058639356846e-01, -6.162859421088885e-01, -6.162859421088885e-01, -6.033874123573284e-01, -4.970352159854043e-01, -5.290656545793542e-01, -5.608930945215875e-01, -5.448796081047708e-01, -5.448796081047708e-01, -6.917068623448621e-01, -2.293816027898156e-01, -2.709093818435591e-01, -3.631650802225711e-01, -3.126684424658908e-01, -3.126684424658908e-01, -4.613370714307804e-01, -5.387947014699321e-02, -7.106276606681360e-02, -3.577260539083854e-01, -9.939572049510947e-02, -9.939572049510947e-02, -1.419866440972924e-02, -1.523166057618513e-03, -3.196559430505519e-03, -9.518253552273245e-02, -4.853308640169144e-03, -4.853308640169141e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbeb0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.092650137563818e-09, -5.092609994980088e-09, -5.092388273553543e-09, -5.092986395803649e-09, -5.092679142399532e-09, -5.092679142399532e-09, -6.052516966438064e-06, -6.052528464230001e-06, -6.052207315279540e-06, -6.048327896847886e-06, -6.051969911749945e-06, -6.051969911749945e-06, -2.777118702367274e-03, -2.790408951918623e-03, -3.074224370184073e-03, -2.986037924366284e-03, -3.006576985595323e-03, -3.006576985595323e-03, -2.756888983201695e-01, -2.670787197928738e-01, -1.590717165032302e-03, -4.654670977776928e-01, -3.990022936244405e-01, -3.990022936244404e-01, -1.820331555788219e+00, -1.922194766375236e+00, -1.031114784425195e+00, -1.658448731340870e+00, -2.104794691975858e+00, -2.104794691978022e+00, -1.281705516441014e-06, -1.280172573210921e-06, -1.281634968993879e-06, -1.280282006167458e-06, -1.280931235159139e-06, -1.280931235159139e-06, -4.824003136125269e-05, -4.722014068088109e-05, -4.847423993219818e-05, -4.757802242992044e-05, -4.754812426078813e-05, -4.754812426078813e-05, -3.762625234471225e-03, -1.346077415285687e-03, -5.111034209750835e-03, -2.446191922669275e-03, -3.410287741319851e-03, -3.410287741319851e-03, -6.315792349290031e-01, -2.122075651408784e-01, -7.048176106025785e-01, -3.754552838016647e-05, -6.852247078522875e-01, -6.852247078522875e-01, -2.186146611240789e+00, -1.951721747331870e+00, -1.224467960307099e+01, -1.097718468985515e+00, -5.699148327716011e+00, -5.699148327719048e+00, -6.851947365733545e-04, -1.666703524496545e-03, -1.349729225150361e-03, -1.065274636291616e-03, -1.210150306997358e-03, -1.210150306997358e-03, -3.675458450052502e-04, -8.142438266160122e-03, -6.233521775535947e-03, -4.150627541286886e-03, -5.230068216306781e-03, -5.230068216306781e-03, -1.248784638100206e-03, -1.158581723665570e-01, -7.065137778300562e-02, -2.702731664257890e-02, -4.577777716694376e-02, -4.577777716694376e-02, -1.084331015312767e-02, -9.451776449352819e-01, -9.196943259372872e-01, -2.737980641792669e-02, -1.140498561358679e+00, -1.140498561358679e+00, -1.463637754776731e+00, -9.590676558582985e+00, -4.638802314208833e+00, -1.173055034275409e+00, -7.198801368998859e+00, -7.198801369003228e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
