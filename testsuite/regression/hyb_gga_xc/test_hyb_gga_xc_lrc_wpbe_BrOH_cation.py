
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lrc_wpbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082780467464022e+01, -2.082783293613063e+01, -2.082802498402456e+01, -2.082760314646915e+01, -2.082781473905879e+01, -2.082781473905879e+01, -3.346143090629290e+00, -3.346110343180723e+00, -3.345438767483755e+00, -3.347266558089450e+00, -3.346187820588043e+00, -3.346187820588043e+00, -5.615238212053665e-01, -5.612715171423053e-01, -5.570996178041565e-01, -5.620643811561820e-01, -5.624640101804474e-01, -5.624640101804474e-01, -8.358392294094580e-02, -8.513685940819302e-02, -6.711012527170996e-01, -5.374524192086001e-02, -7.670769174130954e-02, -7.670769174130959e-02, -3.836345636418106e-06, -4.485812332588019e-06, -1.073598563076521e-03, -7.319288476146561e-07, -2.140965507805909e-06, -2.140965507805909e-06, -4.924733447470306e+00, -4.924329354717189e+00, -4.924724584211357e+00, -4.924367665613768e+00, -4.924523035819175e+00, -4.924523035819175e+00, -1.966430790623185e+00, -1.976700125246501e+00, -1.966823277074670e+00, -1.975879997944655e+00, -1.971948546125300e+00, -1.971948546125300e+00, -4.613617990094976e-01, -5.041417139247643e-01, -4.204938358769987e-01, -4.355893712648783e-01, -4.699036827669394e-01, -4.699036827669394e-01, -2.502068717210654e-02, -9.241496065605447e-02, -2.043600135932645e-02, -1.719830678660962e+00, -3.505238902870011e-02, -3.505238902870011e-02, -3.370271109050032e-07, -6.837627389404546e-07, -3.082970075519878e-07, -6.026561407025009e-03, -6.393181548127303e-07, -6.393181544507618e-07, -4.597027121495347e-01, -4.559069430200318e-01, -4.571355828276977e-01, -4.582320945099372e-01, -4.576732858389693e-01, -4.576732858389693e-01, -4.451277227827958e-01, -3.787549402870824e-01, -3.945309671618298e-01, -4.122033830289779e-01, -4.028112074915288e-01, -4.028112074915288e-01, -5.333163775886137e-01, -1.330567273654950e-01, -1.688687765357668e-01, -2.366919961916985e-01, -1.990434730120891e-01, -1.990434730120891e-01, -3.399935072921180e-01, -9.068442407393191e-04, -2.842160247689730e-03, -2.219135497540742e-01, -1.275901859524792e-02, -1.275901859524793e-02, -1.076548138100095e-05, -1.304627871353876e-08, -1.217142630976294e-07, -1.056208185715814e-02, -4.920737795287862e-07, -4.920737795242045e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lrc_wpbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.510065949788096e+01, -2.510062999504987e+01, -2.510077595150178e+01, -2.510071494312229e+01, -2.510111880523727e+01, -2.510121266117739e+01, -2.509979963981846e+01, -2.509953652411013e+01, -2.510072612865199e+01, -2.510018728944417e+01, -2.510072612865199e+01, -2.510018728944417e+01, -3.978301453025858e+00, -3.978487347545734e+00, -3.978350124083098e+00, -3.978543674120982e+00, -3.979604270396810e+00, -3.979916806822286e+00, -3.978086241086687e+00, -3.978404591926032e+00, -3.977560318413170e+00, -3.979548776512985e+00, -3.977560318413170e+00, -3.979548776512985e+00, -6.804177507153352e-01, -6.853737826065321e-01, -6.782320879508972e-01, -6.842851770440339e-01, -6.452021717502717e-01, -6.380828505653628e-01, -6.473120475636225e-01, -6.496287909365244e-01, -6.847596993321764e-01, -6.177597326197289e-01, -6.847596993321764e-01, -6.177597326197289e-01, -9.850377325633244e-02, -1.015950113194819e-01, -1.013152100514604e-01, -1.050958378021711e-01, -7.977512699855575e-01, -8.346290535975331e-01, -6.351381831556330e-02, -6.456487754311999e-02, -8.668028139480131e-02, -5.165936052227220e-02, -8.668028139480130e-02, -5.165936052227216e-02, -6.948181984697950e-06, -8.331984314814910e-06, -8.004094313711258e-06, -9.832587337685950e-06, -2.108016118796654e-03, -2.553218769667737e-03, -1.501714508833835e-06, -1.428012613663427e-06, -4.910671665230373e-06, -9.112846004735225e-07, -4.910671665228066e-06, -9.112846004713485e-07, -6.161765798461187e+00, -6.160246207849666e+00, -6.164768480005544e+00, -6.163154211840247e+00, -6.161928533031732e+00, -6.160346852259241e+00, -6.164510168545816e+00, -6.162983312379486e+00, -6.163303998846304e+00, -6.161708204380451e+00, -6.163303998846304e+00, -6.161708204380451e+00, -2.091056782410885e+00, -2.090946030339623e+00, -2.109550633667918e+00, -2.108934324391574e+00, -2.072277960656780e+00, -2.076717841182375e+00, -2.087986606398368e+00, -2.092685126981909e+00, -2.115438189565341e+00, -2.103431052974631e+00, -2.115438189565341e+00, -2.103431052974631e+00, -6.209623227539582e-01, -6.195448697603140e-01, -7.035854088837240e-01, -7.041904022341244e-01, -5.534532708117724e-01, -5.747090041460442e-01, -6.024828278887522e-01, -6.201289947244372e-01, -6.501356831861872e-01, -6.192760317101609e-01, -6.501356831861872e-01, -6.192760317101608e-01, -3.700484446264185e-02, -3.734600739182402e-02, -1.007538542780491e-01, -1.012124014927615e-01, -3.017761823428176e-02, -3.308110145006702e-02, -2.289342171700567e+00, -2.288427479962420e+00, -4.634615707182212e-02, -4.569199982326832e-02, -4.634615707182212e-02, -4.569199982326832e-02, -6.338195235758433e-07, -7.112718706053777e-07, -1.338071186358336e-06, -1.399623809983333e-06, -5.631121506827396e-07, -6.677896999490026e-07, -1.150509146149672e-02, -1.175457566584766e-02, -6.000972243315019e-07, -1.545316284753391e-06, -6.000972243366221e-07, -1.545316284066103e-06, -6.444126332798896e-01, -6.467709744122452e-01, -6.391621463900687e-01, -6.415955765211578e-01, -6.413024153596845e-01, -6.437297852721416e-01, -6.428647267563448e-01, -6.452306113165662e-01, -6.421121582473227e-01, -6.445077153194553e-01, -6.421121582473227e-01, -6.445077153194553e-01, -6.242110850804637e-01, -6.261002988784080e-01, -4.836479911744637e-01, -4.860653825848667e-01, -5.284158691855141e-01, -5.310884166225599e-01, -5.717306711837006e-01, -5.737167475790658e-01, -5.503301695589572e-01, -5.523795585820842e-01, -5.503301695589572e-01, -5.523795585820842e-01, -7.408153774078823e-01, -7.424334085750639e-01, -1.429922146994146e-01, -1.437038341039952e-01, -1.904217509903675e-01, -1.924262899330683e-01, -3.174038372097344e-01, -3.192850700106635e-01, -2.487086368217057e-01, -2.487957098306316e-01, -2.487086368217053e-01, -2.487957098306315e-01, -4.382229242175408e-01, -4.418323007243161e-01, -1.964027564792328e-03, -2.012145031957421e-03, -5.660516214663913e-03, -6.287311297283010e-03, -3.134214136964965e-01, -3.183561113997446e-01, -2.049850915541131e-02, -2.188667868286221e-02, -2.049850915541131e-02, -2.188667868286229e-02, -2.046512571363787e-05, -2.277372504809643e-05, -2.602064118942772e-08, -2.619926012732974e-08, -2.194372886301895e-07, -2.639123362270291e-07, -1.800072039648632e-02, -1.868890398113018e-02, -5.101710952756409e-07, -1.190407498626748e-06, -5.101710950262146e-07, -1.190407498480578e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lrc_wpbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.391141408347507e-08, 3.855567579455844e-10, -1.391149225162376e-08, -1.391129751993599e-08, 3.855637563905792e-10, -1.391140657383670e-08, -1.391080247604374e-08, 3.855734091993355e-10, -1.391073528081390e-08, -1.391213444867319e-08, 3.854697494807899e-10, -1.391241773490880e-08, -1.391136796370740e-08, 3.855271085313426e-10, -1.391164269223653e-08, -1.391136796370740e-08, 3.855271085313426e-10, -1.391164269223653e-08, -1.790135362594529e-05, 2.158879157656427e-06, -1.790704568318356e-05, -1.790147763919916e-05, 2.159323527660124e-06, -1.790761282902639e-05, -1.790931846517387e-05, 2.169371669283230e-06, -1.791224782401209e-05, -1.788449431427511e-05, 2.149943255801801e-06, -1.788855375199915e-05, -1.791206113373010e-05, 2.159156568071321e-06, -1.789376932990272e-05, -1.791206113373010e-05, 2.159156568071321e-06, -1.789376932990272e-05, -9.542300843400025e-03, 3.586683876242116e-03, -9.497857934003831e-03, -9.578797581963620e-03, 3.559577090514688e-03, -9.525293033445582e-03, -1.018423525927605e-02, 2.876045381924161e-03, -1.020442748167728e-02, -9.912443690608841e-03, 2.810968523930000e-03, -9.910182932006776e-03, -9.715729505692737e-03, 2.852692094259074e-03, -9.643389246574810e-03, -9.715729505692737e-03, 2.852692094259074e-03, -9.643389246574810e-03, -7.654733753383423e-01, 3.108902575321890e-01, -7.183442620370395e-01, -7.589199929928377e-01, 3.280826843588528e-01, -7.005264860050855e-01, -5.711746965120353e-03, 1.940414170439823e-03, -5.175379796773867e-03, -9.901554412446389e-01, 2.258949661124237e-01, -9.670122852466827e-01, -7.223643295059183e-01, 1.882246441728870e-01, -1.081583007224264e+00, -7.223643295059197e-01, 1.882246441728873e-01, -1.081583007224266e+00, 4.217891183369132e-03, 8.471332723898200e-03, 4.211305935542151e-03, 4.958207151056969e-03, 9.964515393423459e-03, 4.947594136893383e-03, -7.388440933245194e-02, 5.126941006152715e-02, -9.895502181916763e-02, 1.503146581270302e-03, 3.008683449168684e-03, 1.503270864436392e-03, 2.197588568768307e-03, 4.414566270491809e-03, 2.205822190309816e-03, 2.197588569216088e-03, 4.414566270088269e-03, 2.205822190761724e-03, -3.861497960631782e-06, 5.666948009101149e-07, -3.865326946341856e-06, -3.859965184422021e-06, 5.704413223836728e-07, -3.863784556443963e-06, -3.861410636849043e-06, 5.668443577206054e-07, -3.865240975373390e-06, -3.860049798216411e-06, 5.701514261968389e-07, -3.863888442172440e-06, -3.860745397665620e-06, 5.686004611431787e-07, -3.864545662268170e-06, -3.860745397665620e-06, 5.686004611431787e-07, -3.864545662268170e-06, -1.404607357045348e-04, 1.221811741084532e-05, -1.404865096073120e-04, -1.376039680769633e-04, 1.218856108878283e-05, -1.377280441825641e-04, -1.405707441882820e-04, 1.161795009824474e-05, -1.407015233943622e-04, -1.381617773381620e-04, 1.159619612758267e-05, -1.382119778585228e-04, -1.386635994510242e-04, 1.250231835492394e-05, -1.388994778131304e-04, -1.386635994510242e-04, 1.250231835492394e-05, -1.388994778131304e-04, -1.435582275036654e-02, 1.180452397706796e-02, -1.455853195568142e-02, -7.940369735782264e-03, 1.489938286408802e-02, -7.912444579065408e-03, -2.094605085699295e-02, 1.535577972946644e-02, -1.756678637819722e-02, -1.407333259815214e-02, 2.278859644535717e-02, -1.123749615395143e-02, -1.176711980025924e-02, 1.179162458306085e-02, -1.537844958413454e-02, -1.176711980025925e-02, 1.179162458306085e-02, -1.537844958413455e-02, -8.528838409414834e-01, 1.261488607621168e-01, -8.764695079131982e-01, -5.504248028247244e-01, 1.139695105238702e-01, -5.457990567421598e-01, -8.330192495192476e-01, 1.279112469154852e-01, -8.727595166959295e-01, -1.673574380204184e-04, 1.207887057881010e-04, -1.677652636418360e-04, -1.012508947877409e+00, 2.409472748596690e-01, -1.259161776378271e+00, -1.012508947877409e+00, 2.409472748596690e-01, -1.259161776378271e+00, 1.466348015117219e-03, 2.933546798259037e-03, 1.466332820601678e-03, 1.848375668998833e-03, 3.699144102256803e-03, 1.848383439131010e-03, 1.842382389073509e-02, 3.685108437354808e-02, 1.842304913740612e-02, -5.583607433864991e-01, 1.250822448857004e-01, -5.467969097755235e-01, 7.050860844566642e-03, 1.410360645889085e-02, 7.047603726185020e-03, 7.050860847856919e-03, 1.410360646869916e-02, 7.047603729452073e-03, -7.803691584572330e-03, 2.514346072918196e-02, -7.515754183697768e-03, -1.022099905437554e-02, 2.157065992117518e-02, -9.923343905673288e-03, -9.455665918184536e-03, 2.270457728491302e-02, -9.159760542491109e-03, -8.756804409715310e-03, 2.373865089872573e-02, -8.466343776307509e-03, -9.114154632223540e-03, 2.321019190891285e-02, -8.820924361323347e-03, -9.114154632223540e-03, 2.321019190891285e-02, -8.820924361323347e-03, -7.447770545195877e-03, 2.977269840520045e-02, -7.182566760846384e-03, -2.871259501748304e-02, 1.592277215307748e-02, -2.820321603695142e-02, -2.325604396865713e-02, 1.838749842245184e-02, -2.278211170624738e-02, -1.757515759031884e-02, 2.169730037966074e-02, -1.722210621829762e-02, -2.048910047516273e-02, 1.995497716545398e-02, -2.009363572315235e-02, -2.048910047516273e-02, 1.995497716545398e-02, -2.009363572315235e-02, -7.054187447605702e-03, 1.183264719377924e-02, -6.975132893340630e-03, -3.400211981587746e-01, 8.498631964250428e-02, -3.363365455558003e-01, -2.289705182040266e-01, 7.821972418059023e-02, -2.241431318069201e-01, -9.058654160635121e-02, 6.964082434152352e-02, -8.834465702738196e-02, -1.493561949806545e-01, 7.796350422599263e-02, -1.499365704594098e-01, -1.493561949806556e-01, 7.796350422599266e-02, -1.499365704594103e-01, -3.821326770255561e-02, 2.285950305464996e-02, -3.715279874474145e-02, -6.339592388466377e-02, 4.213028450134424e-02, -6.591403062494725e-02, -2.196582606376850e-01, 6.458066222247318e-02, -2.537439734084470e-01, -9.233020837084710e-02, 1.099497136873529e-01, -8.537996040546469e-02, -8.763679342312136e-01, 2.182010199987041e-01, -1.132468207531778e+00, -8.763679342312104e-01, 2.182010199987039e-01, -1.132468207531786e+00, 5.182776569664301e-03, 1.056259116938041e-02, 5.158938620498975e-03, 2.005752500811155e-03, 4.011531506685853e-03, 2.005742071038526e-03, 2.510217931900221e-03, 5.020763908060611e-03, 2.510152894350276e-03, -9.028071608869637e-01, 2.002688123716920e-01, -9.149527774864996e-01, 8.999430672084452e-03, 1.800188742308661e-02, 8.998091799553897e-03, 8.999430675720760e-03, 1.800188743452388e-02, 8.998091803226391e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
