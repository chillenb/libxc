
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hse03_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.577413697593698e+01, -1.577415580584026e+01, -1.577429304937988e+01, -1.577401180252924e+01, -1.577415155416063e+01, -1.577415155416063e+01, -2.676791583865953e+00, -2.676764018427124e+00, -2.676191058206818e+00, -2.677683252551923e+00, -2.676821443285533e+00, -2.676821443285533e+00, -5.794422164536177e-01, -5.792502989641258e-01, -5.754110443479562e-01, -5.792891520102826e-01, -5.780548258110432e-01, -5.780548258110432e-01, -1.919823661517467e-01, -1.932766147353808e-01, -6.628101864510474e-01, -1.626261874295074e-01, -1.740458136487505e-01, -1.740458136487505e-01, -1.009111458051812e-02, -1.062101133600564e-02, -5.736201923393400e-02, -5.828926095659290e-03, -7.324140231417537e-03, -7.324140231417537e-03, -3.853460508113773e+00, -3.853126689685899e+00, -3.853452542084225e+00, -3.853157690411865e+00, -3.853286827596300e+00, -3.853286827596300e+00, -1.640488061407084e+00, -1.648586786513889e+00, -1.639885006468523e+00, -1.647073059330265e+00, -1.645212254853062e+00, -1.645212254853062e+00, -5.003256094460382e-01, -5.322511940026217e-01, -4.687288693264260e-01, -4.784692119944874e-01, -5.061745760354640e-01, -5.061745760354640e-01, -1.264180630358417e-01, -2.017142732642770e-01, -1.189770166811937e-01, -1.455005764610738e+00, -1.402055556512558e-01, -1.402055556512558e-01, -4.497552617914376e-03, -5.698311610555804e-03, -4.357344226883780e-03, -8.656608194378083e-02, -5.249141279627697e-03, -5.249141279627697e-03, -4.979673876309759e-01, -4.945890951556253e-01, -4.956370598146905e-01, -4.966116727600084e-01, -4.961107406983100e-01, -4.961107406983100e-01, -4.866872428504259e-01, -4.379420478942534e-01, -4.489049688958872e-01, -4.609511201110107e-01, -4.544481735716379e-01, -4.544481735716379e-01, -5.548750459384013e-01, -2.376849755698799e-01, -2.677854078827338e-01, -3.247907688823167e-01, -2.938122744945086e-01, -2.938122744945086e-01, -4.074851194580803e-01, -5.508809120235741e-02, -7.271152630344685e-02, -3.111281676704560e-01, -1.042032980905855e-01, -1.042032980905855e-01, -1.423771738704135e-02, -1.523304104137896e-03, -3.197423585075991e-03, -9.929801631523597e-02, -4.857143705538508e-03, -4.857143705538506e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hse03_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.876510335663068e+01, -1.876518677888044e+01, -1.876552312601696e+01, -1.876428271429672e+01, -1.876493755934235e+01, -1.876493755934235e+01, -3.113120270846108e+00, -3.113163000258020e+00, -3.114227060116971e+00, -3.112947714146351e+00, -3.113243452203680e+00, -3.113243452203680e+00, -6.712236574168814e-01, -6.704069064951838e-01, -6.529810998089813e-01, -6.577285750788758e-01, -6.567500796808237e-01, -6.567500796808237e-01, -1.998437835438499e-01, -2.030163322699148e-01, -7.699590446206571e-01, -1.717332560408584e-01, -1.795011549802897e-01, -1.795011549802896e-01, -1.345305958342890e-02, -1.415927654064664e-02, -7.356798553404942e-02, -7.771584044851915e-03, -9.764879648729534e-03, -9.764879648729531e-03, -4.768262119617821e+00, -4.771046965765155e+00, -4.768384304138149e+00, -4.770842838429756e+00, -4.769676717566811e+00, -4.769676717566811e+00, -1.776636429691375e+00, -1.787943818144188e+00, -1.769551019999158e+00, -1.779657800976203e+00, -1.786209533503216e+00, -1.786209533503216e+00, -6.154041033812203e-01, -6.889004600759204e-01, -5.717063235920955e-01, -6.159069799432109e-01, -6.275402532702338e-01, -6.275402532702338e-01, -1.427912085611143e-01, -2.068129297953300e-01, -1.354541158117651e-01, -1.894113141409538e+00, -1.527852333593631e-01, -1.527852333593631e-01, -5.996593182166292e-03, -7.597452928228758e-03, -5.809664975896444e-03, -1.018548020548882e-01, -6.998627681830940e-03, -6.998627681830943e-03, -6.452365090018457e-01, -6.398774310691779e-01, -6.421597240449265e-01, -6.437442249916031e-01, -6.429892603247316e-01, -6.429892603247316e-01, -6.294599692696438e-01, -5.155475950465417e-01, -5.448881274699570e-01, -5.814471697167307e-01, -5.623642595067564e-01, -5.623642595067564e-01, -7.177024727896568e-01, -2.411175344659236e-01, -2.893559816581728e-01, -3.849571992767833e-01, -3.400454648420266e-01, -3.400454648420266e-01, -4.806073714296100e-01, -7.153833065672059e-02, -8.797131281442093e-02, -3.760712862523093e-01, -1.193479795001943e-01, -1.193479795001942e-01, -1.897816188837520e-02, -2.031066666344225e-03, -4.263180501829261e-03, -1.145700398496964e-01, -6.476012699711901e-03, -6.476012699711898e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hse03_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hse03", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.674513576695000e-09, -5.674454530178708e-09, -5.674166664858658e-09, -5.675045592539094e-09, -5.674588690453012e-09, -5.674588690453012e-09, -6.939064257251058e-06, -6.939109355206077e-06, -6.939441905517283e-06, -6.933713062281505e-06, -6.938472637197155e-06, -6.938472637197155e-06, -3.011796239043380e-03, -3.013317494123511e-03, -2.963883841703091e-03, -2.893385706982350e-03, -2.921862131338184e-03, -2.921862131338184e-03, -3.520983814201077e-01, -3.380171671917910e-01, -1.782235645256404e-03, -5.190597568793606e-01, -4.889863390901176e-01, -4.889863390901189e-01, 4.259869540793457e-03, 5.018989884868796e-03, -1.215976260314721e+00, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, -1.383315532108502e-06, -1.379791320466980e-06, -1.383162600865288e-06, -1.380051979451662e-06, -1.381530012461988e-06, -1.381530012461988e-06, -4.575325329476702e-05, -4.509322774091598e-05, -4.532162541970209e-05, -4.472145342421154e-05, -4.562145575981922e-05, -4.562145575981922e-05, -4.463423291369801e-03, 1.941342547029786e-04, -6.164628807290274e-03, -7.949651801958824e-04, -3.950421975139024e-03, -3.950421975139024e-03, -6.965069434375658e-01, -2.454339622899127e-01, -8.056767128448250e-01, -2.442330374252582e-05, -7.349750872486757e-01, -7.349750872486757e-01, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, -1.729225710931724e+00, 8.056878965244950e-03, 8.056878974167092e-03, 3.357521609989299e-03, 6.373688074468916e-04, 1.499314391704086e-03, 2.287534377597022e-03, 1.884543138715529e-03, 1.884543138715529e-03, 4.887265855405467e-03, -8.994594274576715e-03, -7.544528965559773e-03, -4.247360345881140e-03, -6.171648187836066e-03, -6.171648187836066e-03, -1.222237640417555e-04, -1.401940916208917e-01, -7.495481704002360e-02, -2.822035191274590e-02, -4.059186375542703e-02, -4.059186375542680e-02, -1.189040384565592e-02, -7.374631549289243e-01, -1.895934234432731e+00, -3.346734907891830e-02, -1.374982449348733e+00, -1.374982449348735e+00, 5.292039407050194e-03, 2.005779865925479e-03, 2.523877354250999e-03, -1.484439544721272e+00, 1.003269687435131e-02, 1.003269687251532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
