
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_1c_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.688242148725402e+01, -1.688244472632127e+01, -1.688260369460228e+01, -1.688222205201738e+01, -1.688243328054133e+01, -1.688243328054133e+01, -2.851480335270977e+00, -2.851462636506770e+00, -2.851091930269452e+00, -2.852323503575505e+00, -2.851483126833954e+00, -2.851483126833954e+00, -5.982744780521062e-01, -5.981916395035228e-01, -5.981692323038185e-01, -6.017763302235228e-01, -5.982415304333620e-01, -5.982415304333620e-01, -1.908752427208363e-01, -1.920386090466006e-01, -6.963020607692924e-01, -1.548727939849682e-01, -1.912073990228942e-01, -1.912073990228942e-01, -1.131779049155880e-02, -1.191001763476967e-02, -5.566783232962436e-02, -5.085932272402340e-03, -1.177314377488427e-02, -1.177314377488427e-02, -4.134605913147888e+00, -4.134480263565461e+00, -4.134597282669549e+00, -4.134499499594313e+00, -4.134535169670289e+00, -4.134535169670289e+00, -1.742319822472481e+00, -1.749920277640826e+00, -1.743727668291299e+00, -1.749600426554431e+00, -1.745789825933774e+00, -1.745789825933774e+00, -5.057683901028924e-01, -5.365572135761721e-01, -4.823579386634598e-01, -4.938255636073663e-01, -5.221699814392664e-01, -5.221699814392664e-01, -1.227593049393277e-01, -2.058060006071073e-01, -1.203941947893927e-01, -1.541863741642016e+00, -1.363050159545698e-01, -1.363050159545698e-01, -4.892765895035874e-03, -5.650559338651283e-03, -4.143164221739622e-03, -7.804289372738721e-02, -5.110608477716634e-03, -5.110608477716634e-03, -5.030965048280834e-01, -5.082770985996220e-01, -5.076081214111319e-01, -5.064097498238158e-01, -5.071078787133579e-01, -5.071078787133579e-01, -4.849650712045323e-01, -4.516236407263998e-01, -4.622012478300284e-01, -4.735525973091553e-01, -4.674676169222248e-01, -4.674676169222249e-01, -5.612905964714759e-01, -2.452468599074235e-01, -2.755573372836350e-01, -3.251554152793013e-01, -2.982912494291116e-01, -2.982912494291117e-01, -4.113466196829887e-01, -5.144539226600226e-02, -7.057321141706671e-02, -3.032244439631741e-01, -9.983950136712129e-02, -9.983950136712127e-02, -1.348339275120760e-02, -1.429913315007470e-03, -2.806995036768099e-03, -9.479623168719693e-02, -4.290648736931821e-03, -4.290648736931804e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_1c_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.067045397045131e+01, -2.067052925775628e+01, -2.067086495088980e+01, -2.066963208224528e+01, -2.067049367593981e+01, -2.067049367593981e+01, -3.400046669459494e+00, -3.400090445967421e+00, -3.401428955003869e+00, -3.399822207185480e+00, -3.400083263321999e+00, -3.400083263321999e+00, -6.738206787604054e-01, -6.724858944703377e-01, -6.374162637188538e-01, -6.430011098593538e-01, -6.733369515126238e-01, -6.733369515126238e-01, -1.998719583116746e-01, -2.024449920705185e-01, -8.199654744874784e-01, -1.568582162749616e-01, -2.006401998902109e-01, -2.006401998902109e-01, -1.543506388598751e-02, -1.624242104827869e-02, -7.171685277910414e-02, -6.911471127616653e-03, -1.605490388683920e-02, -1.605490388683920e-02, -5.196532828834117e+00, -5.198731961847066e+00, -5.196757899582027e+00, -5.198467905562500e+00, -5.197661377640650e+00, -5.197661377640650e+00, -1.791094544707137e+00, -1.808066924977643e+00, -1.779319309326831e+00, -1.792547592656573e+00, -1.817948268376572e+00, -1.817948268376572e+00, -6.266434159950406e-01, -6.900309930158358e-01, -5.947861925713231e-01, -6.362234567415604e-01, -6.534615823011155e-01, -6.534615823011155e-01, -1.330216772895840e-01, -2.016239403268876e-01, -1.301664027539182e-01, -1.991653289287334e+00, -1.415612855740003e-01, -1.415612855740003e-01, -6.647143155150566e-03, -7.684165225396254e-03, -5.621676060097899e-03, -9.437067924254647e-02, -6.944749556653080e-03, -6.944749556653075e-03, -6.394109304983995e-01, -6.523382344759751e-01, -6.486773172971974e-01, -6.447500689442127e-01, -6.468110991319566e-01, -6.468110991319567e-01, -6.180523130526787e-01, -5.292565938840591e-01, -5.674097779336265e-01, -6.029457116778691e-01, -5.853625543792340e-01, -5.853625543792342e-01, -7.225653411986085e-01, -2.429407351761620e-01, -2.856515910729125e-01, -3.759033672018223e-01, -3.263765968550637e-01, -3.263765968550636e-01, -4.788620612682436e-01, -6.722661056538853e-02, -8.793801535512720e-02, -3.663293162504628e-01, -1.124166300035988e-01, -1.124166300035987e-01, -1.839406770188813e-02, -1.927078216302760e-03, -3.798754801185076e-03, -1.072033483108089e-01, -5.823353805987964e-03, -5.823353805987965e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_1c_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_1c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.571478644886069e-09, -4.571428692225936e-09, -4.571181808634745e-09, -4.572000302244964e-09, -4.571452502455552e-09, -4.571452502455552e-09, -6.116862604822489e-06, -6.116715606610042e-06, -6.111678145250173e-06, -6.115259876964868e-06, -6.116684798446013e-06, -6.116684798446013e-06, -3.907791404088781e-03, -3.925031593832755e-03, -4.327888873211569e-03, -4.204709293489683e-03, -3.914084074879967e-03, -3.914084074879967e-03, -4.087845101043543e-01, -3.990244556957875e-01, -1.889060763097325e-03, -7.644726965659959e-01, -4.059862625424491e-01, -4.059862625424491e-01, -1.859603496706946e+00, -1.943861113553876e+00, -1.892554063362979e+00, -5.409550581873491e-01, -1.999147260746855e+00, -1.999147260746855e+00, -1.180719945124715e-06, -1.179127764598618e-06, -1.180555927108148e-06, -1.179317863062131e-06, -1.179903747772366e-06, -1.179903747772366e-06, -5.997205348344687e-05, -5.843517716623008e-05, -6.050049262311033e-05, -5.929202999391041e-05, -5.823769125912536e-05, -5.823769125912536e-05, -5.510828289193617e-03, -5.090021358565735e-03, -6.875262837449745e-03, -4.288377560090365e-03, -4.500150150206839e-03, -4.500150150206839e-03, -1.073489703028329e+00, -3.071462911506349e-01, -1.193133338250654e+00, -6.485298357687775e-05, -1.020805483018879e+00, -1.020805483018879e+00, -5.390885177496866e-01, -6.714276780915760e-01, -1.124975591947424e+00, -1.928927072110834e+00, -8.521508583467708e-01, -8.521508583500906e-01, -3.503097869031568e-02, -7.867376370437369e-03, -1.239799993434569e-02, -1.879508095388010e-02, -1.516669308617077e-02, -1.516669308617077e-02, -5.566966397359802e-02, -1.113845133182551e-02, -8.384578561186500e-03, -5.459071268712506e-03, -6.938912150196340e-03, -6.938912150196347e-03, -3.728285499768754e-03, -1.637496521045348e-01, -1.010589632804812e-01, -4.394760052869565e-02, -6.912739010689785e-02, -6.912739010689778e-02, -1.659741301120613e-02, -1.587631486013912e+00, -1.692142894614684e+00, -5.016180697964732e-02, -1.759982077514256e+00, -1.759982077514261e+00, -1.613054515605316e+00, 5.170605701942591e-01, -1.492576477382225e-01, -2.091537737952135e+00, -9.135408278083131e-01, -9.135408278242753e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
