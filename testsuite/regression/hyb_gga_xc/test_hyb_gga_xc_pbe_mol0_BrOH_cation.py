
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_mol0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.595128349664663e+01, -1.595130050189952e+01, -1.595143368083148e+01, -1.595117949374964e+01, -1.595130449613940e+01, -1.595130449613940e+01, -2.682720301938269e+00, -2.682690179377477e+00, -2.682058954273251e+00, -2.683659569687693e+00, -2.682748197040222e+00, -2.682748197040222e+00, -5.580483966932426e-01, -5.579215879896944e-01, -5.564107110019424e-01, -5.602077428706033e-01, -5.598418169657090e-01, -5.598418169657090e-01, -1.717521052925310e-01, -1.730679775041558e-01, -6.423450030436558e-01, -1.419999495856765e-01, -1.648646087074444e-01, -1.648646087074443e-01, -7.580406031421238e-03, -7.982269196174089e-03, -4.346711430617060e-02, -4.371984378017795e-03, -6.101492900482976e-03, -6.101492900482976e-03, -3.865366151430072e+00, -3.864864522038893e+00, -3.865351356070025e+00, -3.864908358658163e+00, -3.865107118259712e+00, -3.865107118259712e+00, -1.645589277995815e+00, -1.653111235883795e+00, -1.646767494342721e+00, -1.653412748033054e+00, -1.649183027838068e+00, -1.649183027838068e+00, -4.767914293134954e-01, -5.081158332981641e-01, -4.451905440013238e-01, -4.546575773667937e-01, -4.830620333838117e-01, -4.830620333838117e-01, -1.063958433581533e-01, -1.812040012620363e-01, -9.931818547581665e-02, -1.434199977200966e+00, -1.199989211437618e-01, -1.199989211437618e-01, -3.375460532344571e-03, -4.273856644965438e-03, -3.272728483615291e-03, -6.881061641929129e-02, -4.110985953966004e-03, -4.110985953966010e-03, -4.734117605960552e-01, -4.704319868917910e-01, -4.713535794408952e-01, -4.722115437561603e-01, -4.717702079624375e-01, -4.717702079624375e-01, -4.620428586676835e-01, -4.146005439257506e-01, -4.250533608652288e-01, -4.371372659425715e-01, -4.306082838129069e-01, -4.306082838129069e-01, -5.308298477730786e-01, -2.180763565086309e-01, -2.483644552230744e-01, -3.008777059879431e-01, -2.722012699077244e-01, -2.722012699077244e-01, -3.839136550306674e-01, -4.161207456812497e-02, -5.621687601124226e-02, -2.867040891876566e-01, -8.543798592223679e-02, -8.543798592223681e-02, -1.068134069247840e-02, -1.142457660108576e-03, -2.402469562822823e-03, -8.074526912104978e-02, -3.775323313469048e-03, -3.775323313469040e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_mol0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.879571814225352e+01, -1.879569648252372e+01, -1.879580795271574e+01, -1.879576209196135e+01, -1.879606918232375e+01, -1.879614178364541e+01, -1.879505064264113e+01, -1.879484904906086e+01, -1.879576845945302e+01, -1.879534938945498e+01, -1.879576845945302e+01, -1.879534938945498e+01, -3.097074748935732e+00, -3.097220568161775e+00, -3.097114360348009e+00, -3.097266387629746e+00, -3.098132908380749e+00, -3.098372198495111e+00, -3.096855015880351e+00, -3.097099325478705e+00, -3.096527571106500e+00, -3.098014543329214e+00, -3.096527571106500e+00, -3.098014543329214e+00, -6.356964470797342e-01, -6.387577665907636e-01, -6.341380650149605e-01, -6.378583660957826e-01, -6.090373786130718e-01, -6.051863928014974e-01, -6.115976305775692e-01, -6.128444463376420e-01, -6.336964910674544e-01, -5.979129651149862e-01, -6.336964910674544e-01, -5.979129651149862e-01, -1.787555568081816e-01, -1.809029354601406e-01, -1.806302668656561e-01, -1.832962330599409e-01, -7.259989693204488e-01, -7.513395730210427e-01, -1.507391034612705e-01, -1.519544164650918e-01, -1.701724779425074e-01, -1.342078126952075e-01, -1.701724779425074e-01, -1.342078126952074e-01, -9.764759930513740e-03, -1.037444213420640e-02, -1.023051349044981e-02, -1.095699205765984e-02, -5.499341994951300e-02, -5.782246391327524e-02, -5.875155541618480e-03, -5.777385686552607e-03, -8.713544464208710e-03, -4.961192014056150e-03, -8.713544464208706e-03, -4.961192014056151e-03, -4.737062154453608e+00, -4.735929288721412e+00, -4.739558124455680e+00, -4.738348621809955e+00, -4.737195808127717e+00, -4.736012921598038e+00, -4.739343296466839e+00, -4.738204766103128e+00, -4.738341020504699e+00, -4.737145994234943e+00, -4.738341020504699e+00, -4.737145994234943e+00, -1.696914160689451e+00, -1.696833779666349e+00, -1.710219159413431e+00, -1.709779234949492e+00, -1.684425114440543e+00, -1.687075053442247e+00, -1.695692036617299e+00, -1.698549118102298e+00, -1.713588530731210e+00, -1.706036913990489e+00, -1.713588530731210e+00, -1.706036913990489e+00, -5.924007179385440e-01, -5.913672800012441e-01, -6.627141725099083e-01, -6.632778799307318e-01, -5.399869319707704e-01, -5.557030567495984e-01, -5.844143924793871e-01, -5.969238762010728e-01, -6.150483379457818e-01, -5.923749177126569e-01, -6.150483379457818e-01, -5.923749177126570e-01, -1.239590184766443e-01, -1.243717258780433e-01, -1.878884135198447e-01, -1.883047951930466e-01, -1.151976568909048e-01, -1.191410104202166e-01, -1.861900964594868e+00, -1.861241772463980e+00, -1.332735050383820e-01, -1.319601462592477e-01, -1.332735050383820e-01, -1.319601462592477e-01, -4.408180044267566e-03, -4.581160058605795e-03, -5.652886720336355e-03, -5.738470697419993e-03, -4.226392519209045e-03, -4.475368205584957e-03, -8.541574307608818e-02, -8.599637943510578e-02, -4.317356859274164e-03, -5.926656634886329e-03, -4.317356859274171e-03, -5.926656634886336e-03, -6.186920141925594e-01, -6.204312683969725e-01, -6.133307343326719e-01, -6.151536157179067e-01, -6.155266927482539e-01, -6.173431490059423e-01, -6.171312872781267e-01, -6.188815125976675e-01, -6.163594700502564e-01, -6.181420166377962e-01, -6.163594700502564e-01, -6.181420166377962e-01, -6.032683058021028e-01, -6.046213038613021e-01, -4.839016649858345e-01, -4.856023838323636e-01, -5.198914629379692e-01, -5.218625355403821e-01, -5.570493013015858e-01, -5.585300843619315e-01, -5.384437248195938e-01, -5.399664503926791e-01, -5.384437248195938e-01, -5.399664503926791e-01, -6.909886778146503e-01, -6.923438156273904e-01, -2.232043397967329e-01, -2.237089073269382e-01, -2.596973362277949e-01, -2.607504617093914e-01, -3.524452210144098e-01, -3.538005409563300e-01, -3.005667182283284e-01, -3.004286711340167e-01, -3.005667182283284e-01, -3.004286711340168e-01, -4.484844291441601e-01, -4.509842413377640e-01, -5.411113543344372e-02, -5.445509122650597e-02, -7.094010029621722e-02, -7.295922695953795e-02, -3.495354451596175e-01, -3.532429786439474e-01, -1.006531822309074e-01, -1.025900014163179e-01, -1.006531822309073e-01, -1.025900014163179e-01, -1.395216093939130e-02, -1.445489541621335e-02, -1.521470505064198e-03, -1.524913805327712e-03, -3.095377545647488e-03, -3.292065006483769e-03, -9.671697202239386e-02, -9.792459721656153e-02, -4.088891940506029e-03, -5.432914611308151e-03, -4.088891940506015e-03, -5.432914611308141e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_mol0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.263396492179548e-08, 3.765653144188737e-10, -1.263403709014613e-08, -1.263387227501635e-08, 3.765727110374861e-10, -1.263396872836405e-08, -1.263344687007431e-08, 3.765837226367158e-10, -1.263339942929765e-08, -1.263450962154885e-08, 3.764741478296917e-10, -1.263473786587694e-08, -1.263393403036543e-08, 3.765346646303282e-10, -1.263409492567452e-08, -1.263393403036543e-08, 3.765346646303282e-10, -1.263409492567452e-08, -1.603358498734667e-05, 2.109797232284356e-06, -1.603969360655016e-05, -1.603378415339161e-05, 2.110267755469075e-06, -1.604035453079292e-05, -1.604364895346529e-05, 2.120928588902559e-06, -1.604723371019361e-05, -1.601650669100968e-05, 2.100476493537030e-06, -1.602123952550317e-05, -1.604282121678366e-05, 2.110110686123594e-06, -1.602844306755851e-05, -1.604282121678366e-05, 2.110110686123594e-06, -1.602844306755851e-05, -8.830271574890643e-03, 3.498858996918330e-03, -8.871331106079188e-03, -8.840189641701779e-03, 3.466500756293501e-03, -8.891250561147833e-03, -9.130009733684843e-03, 2.677484506030317e-03, -9.029734233551266e-03, -8.817363697932490e-03, 2.621832447814515e-03, -8.853713133169313e-03, -9.269937616791393e-03, 2.663567213446650e-03, -8.074920598432666e-03, -9.269937616791393e-03, 2.663567213446650e-03, -8.074920598432666e-03, -8.562175267659955e-01, 2.493989469637455e-01, -8.082082563409813e-01, -8.589978225934602e-01, 2.665187248399331e-01, -7.985433379004729e-01, -5.185056233455420e-03, 1.908884926417140e-03, -4.832674940156816e-03, -1.117782520184199e+00, 1.618952656106820e-01, -1.082279909024562e+00, -7.794762273881547e-01, 1.378877165583219e-01, -1.532027278548494e+00, -7.794762273881544e-01, 1.378877165583220e-01, -1.532027278548495e+00, -2.924254993834880e+00, 5.367653492975471e-03, -2.895106284960232e+00, -3.081012005179009e+00, 6.314088437880206e-03, -3.065500080629759e+00, -1.715051181257283e+00, 3.274582837080147e-02, -1.727140685948381e+00, -2.679066389016170e+00, 1.905900294953562e-03, -2.606292255826046e+00, -2.920328127634352e+00, 2.796686669330543e-03, -7.410360970967567e+00, -2.920328127635406e+00, 2.796686666451386e-03, -7.410360970968633e+00, -3.522593194761835e-06, 5.723337941570443e-07, -3.526081185220652e-06, -3.521762865402613e-06, 5.763483597224003e-07, -3.525213793532946e-06, -3.522545532763454e-06, 5.724942760775800e-07, -3.526016597154161e-06, -3.521784111071427e-06, 5.760379292084757e-07, -3.525280708426856e-06, -3.522201760427930e-06, 5.743755401853794e-07, -3.525638103632034e-06, -3.522201760427930e-06, 5.743755401853794e-07, -3.525638103632034e-06, -1.193538891990730e-04, 1.085938123385162e-05, -1.193752504752143e-04, -1.171242368875880e-04, 1.087030534817820e-05, -1.172248469332891e-04, -1.189161326237535e-04, 1.024243333569634e-05, -1.191962011619783e-04, -1.170457169010948e-04, 1.025468003315107e-05, -1.172541350237708e-04, -1.183553947864687e-04, 1.117686850959839e-05, -1.181634684577268e-04, -1.183553947864687e-04, 1.117686850959839e-05, -1.181634684577268e-04, -1.538411761283503e-02, 1.257857104247353e-02, -1.562790907844047e-02, -9.543915899890466e-03, 1.744198005166773e-02, -9.542751313105903e-03, -2.267321417853006e-02, 1.620756916845482e-02, -1.909652117123792e-02, -1.795009936867196e-02, 2.635721574283183e-02, -1.407273178015973e-02, -1.267239052629831e-02, 1.269202816890098e-02, -1.679165429690876e-02, -1.267239052629831e-02, 1.269202816890098e-02, -1.679165429690875e-02, -1.217112841173012e+00, 8.415774687321310e-02, -1.240039023688379e+00, -5.239005013361796e-01, 8.426805616162830e-02, -5.191225788147432e-01, -1.365482408712808e+00, 8.481682565848619e-02, -1.331283804885127e+00, -1.557318435884523e-04, 1.336330490212947e-04, -1.561524346728268e-04, -1.324911197131689e+00, 1.666410003059426e-01, -1.630154892886902e+00, -1.324911197131689e+00, 1.666410003059426e-01, -1.630154892886902e+00, -3.761087338692343e+00, 1.858232804931570e-03, -3.255229859934572e+00, -3.238442529391529e+00, 2.343295540059957e-03, -2.989883336740852e+00, -1.844267521972484e+01, 2.334556949087866e-02, -2.051853532393627e+01, -1.994700778187831e+00, 8.114517739054626e-02, -1.920083190033111e+00, -9.171924004515986e+00, 8.934687149812862e-03, -9.010550205247691e+00, -9.171924004511510e+00, 8.934687156868786e-03, -9.010550205243231e+00, -1.077492921852698e-02, 3.074932526854206e-02, -1.039030813534642e-02, -1.308282434053899e-02, 2.541556944887205e-02, -1.271241625806090e-02, -1.237924697243272e-02, 2.707235070022103e-02, -1.200473536446557e-02, -1.171570440051870e-02, 2.861166829828662e-02, -1.133541256126381e-02, -1.205781103048985e-02, 2.782148839371575e-02, -1.168031800290516e-02, -1.205781103048985e-02, 2.782148839371575e-02, -1.168031800290516e-02, -1.102281878022964e-02, 3.692023322353113e-02, -1.063871730817122e-02, -2.920711421552714e-02, 1.585324866488305e-02, -2.874560589215323e-02, -2.543359458812965e-02, 1.929523541717588e-02, -2.497427410594692e-02, -2.093891918726729e-02, 2.407250153262304e-02, -2.052087621749140e-02, -2.335401660597664e-02, 2.151805614424417e-02, -2.290455683976718e-02, -2.335401660597664e-02, 2.151805614424417e-02, -2.290455683976718e-02, -8.186512879876512e-03, 1.374817360629250e-02, -8.129289161252516e-03, -3.131210916774214e-01, 6.652447894613407e-02, -3.099697980596669e-01, -2.151629084638564e-01, 6.609099013797613e-02, -2.120659366434473e-01, -1.066297910774292e-01, 6.906470370801876e-02, -1.041830240759455e-01, -1.564403601125830e-01, 7.150791441405585e-02, -1.576653142542693e-01, -1.564403601125831e-01, 7.150791441405591e-02, -1.576653142542694e-01, -3.994757131685739e-02, 2.277511801813789e-02, -3.902171752009453e-02, -1.568888990156455e+00, 2.688070166871296e-02, -1.570993613886735e+00, -1.550615346459843e+00, 4.146092838848897e-02, -1.586800182542035e+00, -1.294732036337610e-01, 1.148592771496738e-01, -1.209062181840331e-01, -1.985604931964758e+00, 1.443310545199706e-01, -2.356882206440949e+00, -1.985604931964761e+00, 1.443310545199714e-01, -2.356882206440952e+00, -2.317187441144405e+00, 6.694570966249526e-03, -2.365787671894821e+00, -1.157264226153475e+01, 2.540907520542279e-03, -2.050032905033584e+01, -7.142044827631913e+00, 3.180295727972646e-03, -7.603392035804932e+00, -2.227239610454706e+00, 1.317443438425304e-01, -2.181299967952597e+00, -1.891428946714159e+01, 1.140421015846105e-02, -9.352578469207334e+00, -1.891428946715067e+01, 1.140421013350708e-02, -9.352578469216406e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
