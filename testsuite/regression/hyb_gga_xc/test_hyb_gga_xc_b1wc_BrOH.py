
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b1wc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.756019274401995e+01, -1.756021709910179e+01, -1.756038329290097e+01, -1.755998331978070e+01, -1.756020510708526e+01, -1.756020510708526e+01, -2.935245074637006e+00, -2.935230908997093e+00, -2.934961018697456e+00, -2.936039995610167e+00, -2.935250120155168e+00, -2.935250120155168e+00, -6.011285661016920e-01, -6.007919264515377e-01, -5.931720526457099e-01, -5.972153767166862e-01, -6.010044021863455e-01, -6.010044021863455e-01, -1.823184729731074e-01, -1.839380292247442e-01, -7.072523137887327e-01, -1.475170212054958e-01, -1.827894765303790e-01, -1.827894765303790e-01, -1.426401718118029e-02, -1.493535415477251e-02, -5.886770278566976e-02, -6.865056236653284e-03, -1.477982881674266e-02, -1.477982881674266e-02, -4.274438821969021e+00, -4.274302388952600e+00, -4.274429312178668e+00, -4.274323149469205e+00, -4.274362411301836e+00, -4.274362411301836e+00, -1.747192469296060e+00, -1.756598778530179e+00, -1.746170081886984e+00, -1.753491350369889e+00, -1.754919742709417e+00, -1.754919742709417e+00, -5.180507663996896e-01, -5.562588798039674e-01, -4.935887352378297e-01, -5.104692247202472e-01, -5.358777683366474e-01, -5.358777683366474e-01, -1.203412716102159e-01, -1.937823922814771e-01, -1.180974454320787e-01, -1.592556723995203e+00, -1.316432750797345e-01, -1.316432750797345e-01, -6.622858829224624e-03, -7.567001781075783e-03, -5.671796934237976e-03, -7.976570450297182e-02, -6.894648299676056e-03, -6.894648299676056e-03, -5.307226580832212e-01, -5.277913270261846e-01, -5.287831496877266e-01, -5.295914075036500e-01, -5.291819236425838e-01, -5.291819236425838e-01, -5.150815580929637e-01, -4.567325201360858e-01, -4.725106276195956e-01, -4.877471639662071e-01, -4.798600325299584e-01, -4.798600325299584e-01, -5.812899480382511e-01, -2.321540796407278e-01, -2.657628726825657e-01, -3.267115151875935e-01, -2.938801509930183e-01, -2.938801509930183e-01, -4.149934582422034e-01, -5.487516428253075e-02, -7.281865746058384e-02, -3.086585731441691e-01, -9.961548904513524e-02, -9.961548904513523e-02, -1.670539842346361e-02, -2.073687512731759e-03, -3.938271527856758e-03, -9.496125738889087e-02, -5.860315241837648e-03, -5.860315241837638e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b1wc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.152377266466559e+01, -2.152383631975228e+01, -2.152414161453963e+01, -2.152309883407314e+01, -2.152380605600216e+01, -2.152380605600216e+01, -3.571811889242629e+00, -3.571833755107328e+00, -3.572578345453864e+00, -3.572031749406747e+00, -3.571837916045702e+00, -3.571837916045702e+00, -7.351446620761051e-01, -7.340982914189635e-01, -7.054992811318876e-01, -7.112307727104067e-01, -7.347648947903064e-01, -7.347648947903064e-01, -2.108473434347564e-01, -2.157329582080349e-01, -8.786048838179306e-01, -1.412137103229887e-01, -2.123485161608255e-01, -2.123485161608255e-01, -1.887569900993967e-02, -1.975132912485701e-02, -7.404419513093950e-02, -9.138224106544461e-03, -1.954592233668732e-02, -1.954592233668732e-02, -5.375763353665658e+00, -5.377677918770646e+00, -5.375959719173578e+00, -5.377448359066141e+00, -5.376743607769047e+00, -5.376743607769047e+00, -1.998586957276820e+00, -2.013694178135035e+00, -1.990913090324792e+00, -2.002738759108993e+00, -2.018670449334674e+00, -2.018670449334674e+00, -6.637702959307531e-01, -7.278346784137805e-01, -6.319214695662717e-01, -6.661407081370785e-01, -6.889992456008388e-01, -6.889992456008388e-01, -1.259227281903994e-01, -1.924048691785480e-01, -1.223489750954815e-01, -2.079724882226955e+00, -1.278597783054777e-01, -1.278597783054777e-01, -8.816412793579576e-03, -1.006857925212828e-02, -7.547574748403010e-03, -9.500595421258547e-02, -9.173791960909347e-03, -9.173791960909344e-03, -6.949443115489686e-01, -6.908101623819658e-01, -6.924438997121660e-01, -6.935994484736112e-01, -6.930341670027114e-01, -6.930341670027114e-01, -6.741089774476110e-01, -5.742416330528817e-01, -6.045556260474714e-01, -6.325276028287887e-01, -6.183840462813893e-01, -6.183840462813894e-01, -7.602713926005000e-01, -2.509817354548739e-01, -3.125290106952954e-01, -4.137325445079932e-01, -3.626413960963603e-01, -3.626413960963603e-01, -5.221321353209794e-01, -6.978243812627870e-02, -8.934203582707784e-02, -3.979636229443431e-01, -1.083711895366020e-01, -1.083711895366020e-01, -2.207904771535635e-02, -2.764326383281195e-03, -5.247336011652467e-03, -1.031978257735618e-01, -7.799511356795192e-03, -7.799511356795176e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b1wc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.742170368402892e-09, -4.742155775901329e-09, -4.742012285957395e-09, -4.742252794876308e-09, -4.742163328099080e-09, -4.742163328099080e-09, -5.255235692314715e-06, -5.255372143812238e-06, -5.258287814680448e-06, -5.249007090420704e-06, -5.255220476912535e-06, -5.255220476912535e-06, -1.984882328468819e-03, -1.994171514851643e-03, -2.245907380264424e-03, -2.182550513924507e-03, -1.988258012058378e-03, -1.988258012058378e-03, -2.305490753267281e-01, -2.078449214909367e-01, -1.051678496933741e-03, -8.229323120501081e-01, -2.234588589339856e-01, -2.234588589339856e-01, -6.383296009517037e+00, -6.323330202970289e+00, -1.768388388715572e+00, -5.144005942813331e+00, -6.570380074330997e+00, -6.570380074330997e+00, -1.234084979208287e-06, -1.233832063017277e-06, -1.234055934138258e-06, -1.233859514995605e-06, -1.233963396882258e-06, -1.233963396882258e-06, -3.742879973234766e-05, -3.665836431018788e-05, -3.751720119073256e-05, -3.690812873963924e-05, -3.680830118206707e-05, -3.680830118206707e-05, -2.366177227434045e-03, -1.515316739347464e-04, -2.807965357827831e-03, -7.629506528150989e-04, -1.974245999751542e-03, -1.974245999751542e-03, -1.098132494625819e+00, -2.728601577747141e-01, -1.257765795709263e+00, -3.388160632581044e-05, -1.141539843162297e+00, -1.141539843162297e+00, -5.466598970744035e+00, -5.411811576079481e+00, -1.552634108832589e+01, -1.755196305296139e+00, -7.989537650771446e+00, -7.989537650771160e+00, 1.320622146652139e-03, 1.474470995198266e-04, 5.194404036057212e-04, 8.420673377391840e-04, 6.766555924009182e-04, 6.766555924009182e-04, 1.813086064010080e-03, -4.535492343206309e-03, -3.269312583238013e-03, -1.889526869253526e-03, -2.623597206401158e-03, -2.623597206401157e-03, -3.048998321499210e-04, -1.119857993144141e-01, -4.933680893510947e-02, -1.287456271421184e-02, -2.503796499764197e-02, -2.503796499764201e-02, -6.245228695424499e-03, -1.536663493854662e+00, -1.479971996189314e+00, -9.405405618852392e-03, -1.827188653007651e+00, -1.827188653007653e+00, -4.687597523071271e+00, -9.823952188386979e+00, -8.321248499366698e+00, -2.237209403465726e+00, -1.174372037582141e+01, -1.174372037582221e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
