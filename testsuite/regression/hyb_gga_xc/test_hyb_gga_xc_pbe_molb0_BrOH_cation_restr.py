
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_molb0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.595943139734328e+01, -1.595944842651748e+01, -1.595958167455433e+01, -1.595932713110791e+01, -1.595945232280649e+01, -1.595945232280649e+01, -2.689942233567555e+00, -2.689912243539338e+00, -2.689284111522143e+00, -2.690879443347053e+00, -2.689970111138558e+00, -2.689970111138558e+00, -5.634260674491040e-01, -5.632892233067703e-01, -5.614483691158783e-01, -5.652817016006219e-01, -5.639497067332319e-01, -5.639497067332319e-01, -1.737896818112954e-01, -1.752287629723221e-01, -6.476454868306132e-01, -1.427909211228496e-01, -1.547677053196289e-01, -1.547677053196290e-01, -7.566541930012761e-03, -7.963560500137988e-03, -4.340982480569919e-02, -4.371368113740814e-03, -5.492294359071003e-03, -5.492294359071003e-03, -3.872954998147161e+00, -3.872450441947737e+00, -3.872940081051978e+00, -3.872494512132081e+00, -3.872694486544949e+00, -3.872694486544949e+00, -1.651048765836659e+00, -1.658634645460373e+00, -1.652079073631759e+00, -1.658782438199873e+00, -1.654734670815457e+00, -1.654734670815457e+00, -4.815863376985652e-01, -5.106762699847818e-01, -4.498160026399809e-01, -4.574057861899908e-01, -4.873083883639759e-01, -4.873083883639759e-01, -1.065688085136924e-01, -1.824228155023380e-01, -9.934908855976270e-02, -1.438947508306460e+00, -1.203811992166816e-01, -1.203811992166816e-01, -3.372967123903252e-03, -4.273374694477426e-03, -3.267383351000088e-03, -6.884590809537763e-02, -3.936193109043954e-03, -3.936193109043954e-03, -4.744240209868855e-01, -4.727576805494138e-01, -4.732731454112452e-01, -4.737519371386608e-01, -4.735054376430989e-01, -4.735054376430989e-01, -4.625387910868589e-01, -4.195791988099952e-01, -4.298639828883458e-01, -4.411235482574067e-01, -4.351079568615894e-01, -4.351079568615894e-01, -5.336457033563223e-01, -2.200716249633352e-01, -2.513790821910352e-01, -3.053435356806158e-01, -2.761396509934594e-01, -2.761396509934594e-01, -3.887628773008243e-01, -4.161414545495696e-02, -5.620034486665079e-02, -2.909327362330571e-01, -8.547605834583544e-02, -8.547605834583547e-02, -1.067461455202355e-02, -1.142455139251026e-03, -2.397937741675973e-03, -8.082600826667911e-02, -3.642241942422972e-03, -3.642241942422972e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_molb0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.880602318089728e+01, -1.880610078615371e+01, -1.880642095293398e+01, -1.880526687093128e+01, -1.880587511161806e+01, -1.880587511161806e+01, -3.106318920741989e+00, -3.106360437029090e+00, -3.107394981506225e+00, -3.106168075956993e+00, -3.106441090144373e+00, -3.106441090144373e+00, -6.442968057220319e-01, -6.431532472536072e-01, -6.163129037697767e-01, -6.214001980344064e-01, -6.207099331024313e-01, -6.207099331024313e-01, -1.872724534022713e-01, -1.895893697137820e-01, -7.455936096257159e-01, -1.552484200816953e-01, -1.660370488080614e-01, -1.660370488080615e-01, -1.007890403605049e-02, -1.060631863593648e-02, -5.647628128381322e-02, -5.826683265518623e-03, -7.319020836605779e-03, -7.319020836605777e-03, -4.743374858825630e+00, -4.745797005621743e+00, -4.743482050500726e+00, -4.745620354770086e+00, -4.744604576285276e+00, -4.744604576285276e+00, -1.709608763198748e+00, -1.722670000342634e+00, -1.698622730393577e+00, -1.709949122518216e+00, -1.722398023269919e+00, -1.722398023269919e+00, -5.936290455496557e-01, -6.614123851082165e-01, -5.502561485310313e-01, -5.893188019357775e-01, -6.052009012678680e-01, -6.052009012678680e-01, -1.251762802840344e-01, -1.935691013598676e-01, -1.180543465801041e-01, -1.861358230235747e+00, -1.349510272630888e-01, -1.349510272630888e-01, -4.496336076574728e-03, -5.696001015818157e-03, -4.354460556968877e-03, -8.593035139940389e-02, -5.245811472506936e-03, -5.245811472506939e-03, -6.184861932494569e-01, -6.126509549514024e-01, -6.148884920670774e-01, -6.165970009825793e-01, -6.157598374472366e-01, -6.157598374472366e-01, -6.033480536506092e-01, -4.902299244950633e-01, -5.234295535496571e-01, -5.575444711366850e-01, -5.402818643691755e-01, -5.402818643691755e-01, -6.901427038642870e-01, -2.310770884235973e-01, -2.690987783185123e-01, -3.582725173886110e-01, -3.084413006996492e-01, -3.084413006996491e-01, -4.550586785710620e-01, -5.430276813514539e-02, -7.204090462409814e-02, -3.539234671654661e-01, -1.023733395055751e-01, -1.023733395055751e-01, -1.420810144498821e-02, -1.523195911412427e-03, -3.196751280780414e-03, -9.786037317689500e-02, -4.854144586451853e-03, -4.854144586451854e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_molb0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_molb0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.217521403477982e-09, -6.217479549176342e-09, -6.217228956531424e-09, -6.217852978023521e-09, -6.217535179835811e-09, -6.217535179835811e-09, -7.463131995100723e-06, -7.463246133739119e-06, -7.465159135221677e-06, -7.456329522055326e-06, -7.462572626844192e-06, -7.462572626844192e-06, -3.504952876276339e-03, -3.517380819976023e-03, -3.754303510051192e-03, -3.650693837670555e-03, -3.679599588743282e-03, -3.679599588743282e-03, -3.147851653565121e-01, -3.086634103094682e-01, -2.013366588102178e-03, -4.677373109305467e-01, -4.254687016156998e-01, -4.254687016156996e-01, -1.450727368636726e+00, -1.532177882274797e+00, -8.402121593086984e-01, -1.320520922287107e+00, -1.676509265143097e+00, -1.676509265142143e+00, -1.623151454427218e-06, -1.621893460502916e-06, -1.623090206656622e-06, -1.621980059965883e-06, -1.622518748054982e-06, -1.622518748054982e-06, -5.613360562508903e-05, -5.506166645934990e-05, -5.612185710062512e-05, -5.518741101471078e-05, -5.552806328151587e-05, -5.552806328151587e-05, -5.113271051669441e-03, -1.995309164499926e-03, -6.899721068042136e-03, -3.585676439863666e-03, -4.675168934376657e-03, -4.675168934376657e-03, -5.654760057933595e-01, -2.205256763247298e-01, -6.239763627189514e-01, -5.268740061724781e-05, -6.543610306340755e-01, -6.543610306340755e-01, -1.740447443240243e+00, -1.554069273565350e+00, -9.752728501331339e+00, -9.287855641703766e-01, -4.539123825162379e+00, -4.539123825165610e+00, -1.057348976105352e-03, -2.485658378725726e-03, -2.035309505452949e-03, -1.622308533581430e-03, -1.833702311646004e-03, -1.833702311646004e-03, -5.744048981593079e-04, -1.052198483309952e-02, -8.383418862549329e-03, -5.854882381234746e-03, -7.194791357494092e-03, -7.194791357494092e-03, -1.837940132026489e-03, -1.274208793200810e-01, -8.277484799460481e-02, -3.527020682494825e-02, -5.681995861693693e-02, -5.681995861693699e-02, -1.405590245038184e-02, -7.680310584533599e-01, -7.590566126179400e-01, -3.718435689956014e-02, -1.006472955331181e+00, -1.006472955331182e+00, -1.167513748703454e+00, -7.633392391548517e+00, -3.692778724995895e+00, -1.023438675953299e+00, -5.733432443071307e+00, -5.733432443059361e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
