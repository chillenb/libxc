
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mcam_b3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.710362630042928e+01, -1.710364818624928e+01, -1.710380141589577e+01, -1.710347464629217e+01, -1.710363791585613e+01, -1.710363791585613e+01, -2.858263577247543e+00, -2.858234027748218e+00, -2.857620449068285e+00, -2.859226390081140e+00, -2.858296772568586e+00, -2.858296772568586e+00, -5.725879930939749e-01, -5.724372290002843e-01, -5.697301072353865e-01, -5.739102002471759e-01, -5.730429935804146e-01, -5.730429935804146e-01, -1.557469299794614e-01, -1.574337774084958e-01, -6.637513511357240e-01, -1.243880413888767e-01, -1.483408622232623e-01, -1.483408622232622e-01, -4.181787301411379e-02, -4.188641963801187e-02, -7.310948994383978e-02, -3.789896062051984e-02, -3.828222238185109e-02, -3.828222238185106e-02, -4.134320716818213e+00, -4.133789800055935e+00, -4.134305206530861e+00, -4.133836376155740e+00, -4.134046753729408e+00, -4.134046753729408e+00, -1.733389247139961e+00, -1.741878373938793e+00, -1.733527607905974e+00, -1.741026650499551e+00, -1.738022422869470e+00, -1.738022422869470e+00, -4.817927222834241e-01, -5.044706695700737e-01, -4.483465190166309e-01, -4.494154716274856e-01, -4.877607585986236e-01, -4.877607585986236e-01, -9.518818869099596e-02, -1.606455927610797e-01, -9.102527093962461e-02, -1.502256851743905e+00, -1.056863860578551e-01, -1.056863860578551e-01, -3.412752529886174e-02, -3.652369449425117e-02, -2.399441714443465e-02, -7.748124983054283e-02, -2.912586993518062e-02, -2.912586993518063e-02, -4.615549153033459e-01, -4.636346589850748e-01, -4.629502756505406e-01, -4.623435409703414e-01, -4.626507745490910e-01, -4.626507745490910e-01, -4.476211890606652e-01, -4.171858923864534e-01, -4.269502686726946e-01, -4.356338848955058e-01, -4.311876243958762e-01, -4.311876243958762e-01, -5.296472370481506e-01, -1.998600579581374e-01, -2.348698687089463e-01, -2.943843705555042e-01, -2.628769196883116e-01, -2.628769196883116e-01, -3.839622821645179e-01, -7.347198314341338e-02, -7.620488219924779e-02, -2.781687719242067e-01, -8.332163405341106e-02, -8.332163405341105e-02, -4.737359155547857e-02, -2.093583157766649e-02, -2.751261162915691e-02, -8.117218367688660e-02, -2.738798430752306e-02, -2.738798430752305e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mcam_b3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.048248000568545e+01, -2.048245576819076e+01, -2.048256859761540e+01, -2.048252039819981e+01, -2.048283593028217e+01, -2.048290640723454e+01, -2.048183216640323e+01, -2.048163112635118e+01, -2.048253098612999e+01, -2.048213042662267e+01, -2.048253098612999e+01, -2.048213042662267e+01, -3.338609050731423e+00, -3.338692647485666e+00, -3.338638095693832e+00, -3.338723733896827e+00, -3.339364718690992e+00, -3.339549831510831e+00, -3.338643264632783e+00, -3.338824595250475e+00, -3.338053361192343e+00, -3.339479036025897e+00, -3.338053361192343e+00, -3.339479036025897e+00, -6.597311435104660e-01, -6.615481616545443e-01, -6.587058140749695e-01, -6.609123758184452e-01, -6.416715799804558e-01, -6.394442235411876e-01, -6.453546469473129e-01, -6.460630624524650e-01, -6.578397755916792e-01, -6.368356827097873e-01, -6.578397755916792e-01, -6.368356827097873e-01, -1.801033317620346e-01, -1.808976932785278e-01, -1.817270972080313e-01, -1.828284904451370e-01, -7.582811701019665e-01, -7.778609297225320e-01, -1.471084180360560e-01, -1.475640045845360e-01, -1.533889035896747e-01, -1.595756979249353e-01, -1.533889035896746e-01, -1.595756979249353e-01, -1.319775079415366e-02, -1.316594072746855e-02, -1.352420747732436e-02, -1.347046342660362e-02, -4.075161803254095e-02, -4.104927304001649e-02, -9.903406825916629e-03, -9.934699198790690e-03, -1.103576198911085e-02, -9.899724758196530e-03, -1.103576198911083e-02, -9.899724758196522e-03, -5.076313111010093e+00, -5.075113408273436e+00, -5.078347373409599e+00, -5.077082161540124e+00, -5.076425141120930e+00, -5.075182306325868e+00, -5.078173301259948e+00, -5.076968036552893e+00, -5.077354170971736e+00, -5.076102600391426e+00, -5.077354170971736e+00, -5.076102600391426e+00, -1.844009083781311e+00, -1.843929555288984e+00, -1.858419475268707e+00, -1.857981384889360e+00, -1.830353987043738e+00, -1.833282762052894e+00, -1.842766528859900e+00, -1.845860263573099e+00, -1.861702662773342e+00, -1.853922305963372e+00, -1.861702662773342e+00, -1.853922305963372e+00, -5.878169216052127e-01, -5.867387244390443e-01, -6.504172281596005e-01, -6.508182414482799e-01, -5.360144813721898e-01, -5.498356742445404e-01, -5.680361141426905e-01, -5.813693469517844e-01, -6.085496988408268e-01, -5.865755857084898e-01, -6.085496988408268e-01, -5.865755857084898e-01, -1.129218554371827e-01, -1.126792172670669e-01, -1.924492105767378e-01, -1.925539449738092e-01, -1.034327242043431e-01, -1.045678375093546e-01, -1.926197366747480e+00, -1.925461250183921e+00, -1.252572820376977e-01, -1.214935460751331e-01, -1.252572820376977e-01, -1.214935460751331e-01, -8.342769080026135e-03, -8.507433908499489e-03, -9.566686979236332e-03, -9.660709234724268e-03, -6.780915336552624e-03, -6.692198379314476e-03, -6.626348628101390e-02, -6.670796764272870e-02, -8.094191807832451e-03, -8.114841158529307e-03, -8.094191807832468e-03, -8.114841158529305e-03, -6.067068578636134e-01, -6.085201317497045e-01, -5.984911312636427e-01, -6.003061308793282e-01, -6.012385974078224e-01, -6.030684781070516e-01, -6.036319479738445e-01, -6.054332659193982e-01, -6.024222367659225e-01, -6.042376311786368e-01, -6.024222367659225e-01, -6.042376311786368e-01, -5.922339955933135e-01, -5.936883533131101e-01, -4.892336987235142e-01, -4.905657078961519e-01, -5.148078074429434e-01, -5.164071758421325e-01, -5.431328882193752e-01, -5.445230682575432e-01, -5.284196077621449e-01, -5.298070636625427e-01, -5.284196077621449e-01, -5.298070636625427e-01, -6.802637787740621e-01, -6.813858382082889e-01, -2.335480211340777e-01, -2.336985280412946e-01, -2.705005789846451e-01, -2.709493607626178e-01, -3.476938252340227e-01, -3.487199880415400e-01, -3.049738321027799e-01, -3.048053192041581e-01, -3.049738321027800e-01, -3.048053192041582e-01, -4.509609441624778e-01, -4.528256550595206e-01, -3.968523125130794e-02, -3.971388239455269e-02, -5.301231849756935e-02, -5.350772347298997e-02, -3.349672553888340e-01, -3.378093228590361e-01, -8.483824880422977e-02, -8.372120044647413e-02, -8.483824880422973e-02, -8.372120044647413e-02, -1.651344200374104e-02, -1.642511140645899e-02, -4.428483810053107e-03, -4.070144172116892e-03, -6.519887333138690e-03, -6.484476260498206e-03, -7.890661398346270e-02, -7.937763518998371e-02, -7.174439754761847e-03, -7.762472532387839e-03, -7.174439754761855e-03, -7.762472532387825e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mcam_b3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mcam_b3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.170167082495598e-08, 1.185558425401183e-11, -1.170173707977632e-08, -1.170160565847068e-08, 1.185541524986055e-11, -1.170168923774769e-08, -1.170125075625979e-08, 1.185461176244829e-11, -1.170122435805547e-08, -1.170199631084328e-08, 1.185712748825859e-11, -1.170216675040049e-08, -1.170164246851157e-08, 1.185581677785285e-11, -1.170168122171525e-08, -1.170164246851157e-08, 1.185581677785285e-11, -1.170168122171525e-08, -1.498898558136188e-05, 1.541225587214213e-07, -1.499464728184323e-05, -1.498941905010972e-05, 1.541207867069750e-07, -1.499550023875897e-05, -1.500408093288144e-05, 1.540597121148743e-07, -1.500769682660669e-05, -1.496898075502314e-05, 1.540100170374724e-07, -1.497360311294866e-05, -1.499612510460222e-05, 1.541018002171290e-07, -1.498618607788309e-05, -1.499612510460222e-05, 1.541018002171290e-07, -1.498618607788309e-05, -7.947178456361982e-03, 9.270722799357577e-04, -8.009901875477534e-03, -7.939626569810470e-03, 9.324368204854546e-04, -8.016473961385313e-03, -7.962133192499237e-03, 1.069807695322527e-03, -7.853749219809870e-03, -7.686815365545523e-03, 1.024962868820697e-03, -7.723724673618839e-03, -8.279911618321036e-03, 1.115015704194649e-03, -7.114307309798985e-03, -8.279911618321036e-03, 1.115015704194649e-03, -7.114307309798985e-03, -6.611379532196625e-01, 4.870430005817489e-01, -6.574911156795109e-01, -6.559206523181772e-01, 4.601020753985704e-01, -6.480537980812792e-01, -4.654974158563591e-03, 4.311409659161154e-04, -4.545807258854636e-03, -1.102779283926748e+00, 1.357480112752327e+00, -1.092426145942534e+00, -9.102084387573464e-01, 1.929431429665579e+00, -3.130370056715824e+00, -9.102084387573456e-01, 1.929431429665580e+00, -3.130370056715828e+00, -1.378839569071239e+04, 9.006507517295055e-08, -1.155032095670661e+04, -1.223631122917646e+04, 3.695673560289628e-07, -1.003000529381117e+04, -7.088578293291981e+01, 1.489288214502471e+01, -6.087115425030643e+01, -5.812962823513360e+04, 3.350885389426989e-17, -6.054478898705506e+04, -1.912895612038660e+04, 8.673770695270562e-13, -1.257402033888493e+05, -1.912895612038662e+04, 8.673770695270562e-13, -1.257402033888493e+05, -3.466688553834870e-06, 1.809299517292379e-08, -3.469633897916935e-06, -3.469269424616189e-06, 1.807545599629114e-08, -3.472127147130850e-06, -3.466796455895016e-06, 1.809212347410638e-08, -3.469691953233638e-06, -3.469008415331665e-06, 1.807663525628042e-08, -3.471960124272164e-06, -3.468038221806389e-06, 1.808413833346515e-08, -3.470889638360549e-06, -3.468038221806389e-06, 1.808413833346515e-08, -3.470889638360549e-06, -1.098482690293595e-04, 3.324691278596461e-06, -1.098639845304073e-04, -1.076681451458930e-04, 3.198712461362903e-06, -1.077429213120713e-04, -1.099152567826703e-04, 3.420793545345939e-06, -1.100431343556108e-04, -1.080283502116180e-04, 3.305373228471352e-06, -1.081110831577636e-04, -1.086194316792058e-04, 3.212781934568574e-06, -1.085954388167800e-04, -1.086194316792058e-04, 3.212781934568574e-06, -1.085954388167800e-04, -1.619886037177390e-02, 1.825453754003035e-03, -1.633588098035628e-02, -1.502714527784716e-02, 1.201192443406202e-03, -1.505999414305611e-02, -2.200848223978378e-02, 2.748455987594796e-03, -2.036696175785729e-02, -2.431406565885900e-02, 2.257366444272562e-03, -2.189661912800813e-02, -1.475085903189568e-02, 1.758833807333089e-03, -1.695968660044962e-02, -1.475085903189569e-02, 1.758833807333089e-03, -1.695968660044962e-02, -2.354055525989699e+00, 4.345108400965211e+00, -2.388954765592822e+00, -4.444395192190008e-01, 4.801730708975269e-01, -4.454318577896312e-01, -3.182642258653643e+00, 5.403210563745951e+00, -3.068777882482737e+00, -2.050921697262828e-04, 3.686127133635989e-06, -2.054591797829057e-04, -1.778313632130589e+00, 2.723523603638179e+00, -2.070776930474344e+00, -1.778313632130589e+00, 2.723523603638179e+00, -2.070776930474344e+00, -1.463381771652269e+05, 4.391412325733211e-24, -1.257907879855301e+05, -6.849851906910336e+04, 9.952946977518016e-18, -6.414852644326728e+04, -2.575340368392480e+05, 4.581716902253058e-25, -2.249857662992757e+05, -1.364389876371252e+01, 1.218782134268272e+01, -1.321314032224231e+01, -1.992582833614453e+05, 7.784361458058929e-20, -7.957087580937764e+04, -1.992582833614451e+05, 7.784361458058927e-20, -7.957087580937761e+04, -2.246608911837338e-02, 1.781738515145262e-03, -2.223109770973809e-02, -2.099280254195877e-02, 1.834071765417697e-03, -2.078801668960896e-02, -2.143082143915503e-02, 1.815455511527695e-03, -2.121994872441505e-02, -2.185428283949895e-02, 1.800280877020669e-03, -2.162804526018577e-02, -2.163531513261448e-02, 1.807857598825492e-03, -2.141685663719956e-02, -2.163531513261448e-02, 1.807857598825492e-03, -2.141685663719956e-02, -2.585828995840187e-02, 2.045475405717882e-03, -2.559375405197340e-02, -2.623765072115657e-02, 4.372269458584065e-03, -2.606681684106510e-02, -2.524633229658110e-02, 3.481409492639727e-03, -2.506849881158329e-02, -2.476782855947488e-02, 2.801304754186088e-03, -2.455823574332043e-02, -2.499751471780317e-02, 3.126795900343610e-03, -2.478262850310413e-02, -2.499751471780317e-02, 3.126795900343610e-03, -2.478262850310413e-02, -1.239078312522567e-02, 9.448281971276932e-04, -1.239378549625613e-02, -2.458756886434592e-01, 1.841168313207797e-01, -2.464357560910061e-01, -1.651061287153018e-01, 8.322264776862785e-02, -1.656156702700820e-01, -9.238992247157027e-02, 2.335777938713061e-02, -9.154514466216639e-02, -1.252741335855423e-01, 4.455605659310826e-02, -1.258958220968715e-01, -1.252741335855423e-01, 4.455605659310827e-02, -1.258958220968716e-01, -3.557889082495441e-02, 6.561578635696272e-03, -3.527903892892909e-02, -7.371199572725915e+01, 1.430892164753827e+01, -7.232605664425495e+01, -2.689725387296759e+01, 1.521830626896655e+01, -2.485874696256970e+01, -1.211046249416873e-01, 2.777420884472484e-02, -1.180877994821442e-01, -6.527840948787635e+00, 7.858164809404253e+00, -6.627490866886952e+00, -6.527840948787634e+00, 7.858164809404253e+00, -6.627490866886963e+00, -4.626832052615695e+03, 2.768157770177566e-04, -4.203212491826741e+03, -4.326188563794098e+06, 2.308592770889069e-85, -5.034062789394341e+06, -4.854420933295500e+05, 1.346473245321597e-36, -4.134619177677552e+05, -8.153243363891708e+00, 8.933405596013928e+00, -7.842592120336565e+00, -2.852700773869550e+05, 6.624839855865914e-22, -1.033029439328471e+05, -2.852700773869557e+05, 6.624839855865567e-22, -1.033029439328475e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
