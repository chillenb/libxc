
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_pbeop_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.080287821673005e+01, -2.080290633957085e+01, -2.080309799242886e+01, -2.080267821191057e+01, -2.080288869564850e+01, -2.080288869564850e+01, -3.321670715324668e+00, -3.321638630916784e+00, -3.320982138734124e+00, -3.322783365895823e+00, -3.321716214436182e+00, -3.321716214436182e+00, -5.356423136478893e-01, -5.352561206011404e-01, -5.266710097938380e-01, -5.318441426355227e-01, -5.309802620334411e-01, -5.309802620334411e-01, -6.209974150399766e-02, -6.415884701834747e-02, -6.455683901205032e-01, -3.361558182328998e-02, -5.335347003426302e-02, -5.335347003426300e-02, -3.360485689662296e-04, -3.532745625018060e-04, -2.406839276604460e-03, -1.953069938395532e-04, -1.740188064343647e-04, -1.740188064343647e-04, -4.898018281141113e+00, -4.897542572295253e+00, -4.898006484562955e+00, -4.897586359637298e+00, -4.897771548274156e+00, -4.897771548274156e+00, -1.928460501879776e+00, -1.939394884343088e+00, -1.927251482827686e+00, -1.936926598449162e+00, -1.935088238285563e+00, -1.935088238285563e+00, -4.385373144034256e-01, -4.760800945029133e-01, -3.979227693400194e-01, -4.093677263408010e-01, -4.468793286684131e-01, -4.468793286684131e-01, -1.447967532349471e-02, -6.158906727257082e-02, -1.221982012644547e-02, -1.686134013253499e+00, -2.113650260778962e-02, -2.113650260778962e-02, -1.506960937703098e-04, -1.909738480238129e-04, -1.457466819264716e-04, -5.414147191303618e-03, -1.563124693448702e-04, -1.563124693448703e-04, -4.288690349598753e-01, -4.280457798083319e-01, -4.283409473850590e-01, -4.285765373018436e-01, -4.284586713725073e-01, -4.284586713725073e-01, -4.134657423788222e-01, -3.549833125551062e-01, -3.721047512569655e-01, -3.885813383473968e-01, -3.801436886338325e-01, -3.801436886338325e-01, -5.054536540886220e-01, -9.925541751064292e-02, -1.387830550700213e-01, -2.147993007473303e-01, -1.741375355773822e-01, -1.741375355773822e-01, -3.166004726938578e-01, -2.259987753870576e-03, -3.647765558638239e-03, -2.014412257727945e-01, -8.858364570481215e-03, -8.858364570481218e-03, -4.762511087982161e-04, -5.136752169467736e-05, -1.070189868006798e-04, -7.752797615597868e-03, -1.480031919614077e-04, -1.480031919614076e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_pbeop_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.506326238110832e+01, -2.506323290778937e+01, -2.506337691422299e+01, -2.506331636836013e+01, -2.506371589174654e+01, -2.506380826827677e+01, -2.506241956956372e+01, -2.506215987675137e+01, -2.506332945821160e+01, -2.506279996020355e+01, -2.506332945821160e+01, -2.506279996020355e+01, -3.962457536116866e+00, -3.962586915595258e+00, -3.962496025895011e+00, -3.962629573861904e+00, -3.963473411840078e+00, -3.963727757557980e+00, -3.962438154959568e+00, -3.962691297228168e+00, -3.961756460405921e+00, -3.963579777685695e+00, -3.961756460405921e+00, -3.963579777685695e+00, -6.834220080500332e-01, -6.855283171735526e-01, -6.821980426606887e-01, -6.847642066025125e-01, -6.618024628893552e-01, -6.589171979833199e-01, -6.661537366703861e-01, -6.670659762477549e-01, -6.810095696989698e-01, -6.544469269116077e-01, -6.810095696989698e-01, -6.544469269116077e-01, -1.068622635803430e-01, -1.101327331718178e-01, -1.097309793231689e-01, -1.134275519365059e-01, -8.027844828848828e-01, -8.266597156147577e-01, -6.168551751883337e-02, -6.263758545318297e-02, -9.514578685874028e-02, -5.694151864825428e-02, -9.514578685874026e-02, -5.694151864825425e-02, -4.849107532128273e-04, -4.187557175290259e-04, -5.154958370962254e-04, -4.368161930931981e-04, -3.766202364689075e-03, -3.629414936403666e-03, -2.549304804772843e-04, -2.657292996742974e-04, -1.585545402200178e-04, -6.350882268624139e-04, -1.585545402200178e-04, -6.350882268624136e-04, -6.111224692731393e+00, -6.109729053927408e+00, -6.113855235686126e+00, -6.112274204247355e+00, -6.111369276367506e+00, -6.109817504853235e+00, -6.113629339360057e+00, -6.112126643627672e+00, -6.112571644710977e+00, -6.111008006356442e+00, -6.112571644710977e+00, -6.111008006356442e+00, -2.131696416694107e+00, -2.131595935879283e+00, -2.148812677597705e+00, -2.148261409829570e+00, -2.116405366036744e+00, -2.119912967629565e+00, -2.131027388608683e+00, -2.134763400977538e+00, -2.152528577017837e+00, -2.142955212310559e+00, -2.152528577017837e+00, -2.142955212310559e+00, -5.942913703883015e-01, -5.928997644799243e-01, -6.629036159630749e-01, -6.632146231230196e-01, -5.322805462808423e-01, -5.489694097047682e-01, -5.639367138919785e-01, -5.815348497488333e-01, -6.193263555254644e-01, -5.917863859934961e-01, -6.193263555254644e-01, -5.917863859934961e-01, -2.666113516312109e-02, -2.697045342882368e-02, -1.073082519976153e-01, -1.078852044764051e-01, -2.181405656369730e-02, -2.307178620355878e-02, -2.227812989200985e+00, -2.226872393218581e+00, -3.819079069171141e-02, -4.089889962255892e-02, -3.819079069171141e-02, -4.089889962255892e-02, -2.108941417246879e-04, -1.916788078855115e-04, -2.592620247573928e-04, -2.498087499693282e-04, -2.093473814644684e-04, -1.815778640580355e-04, -9.340982956505959e-03, -9.353880310249963e-03, -3.432130356652543e-04, -1.563955422030889e-04, -3.432130356652545e-04, -1.563955422030890e-04, -6.057659706587000e-01, -6.080588353731952e-01, -5.996044661618248e-01, -6.018416333957612e-01, -6.017550614179994e-01, -6.040185224820920e-01, -6.035508256398352e-01, -6.058159921701193e-01, -6.026511724849249e-01, -6.049152396576863e-01, -6.026511724849249e-01, -6.049152396576863e-01, -5.868507904613767e-01, -5.887640899517409e-01, -4.774505731120865e-01, -4.790549568159186e-01, -5.070489488565144e-01, -5.089091019531077e-01, -5.381299934118119e-01, -5.398279588050970e-01, -5.221782454415548e-01, -5.238655047510991e-01, -5.221782454415548e-01, -5.238655047510991e-01, -6.996761634057106e-01, -7.008181507473951e-01, -1.612950051476515e-01, -1.620842087112802e-01, -2.122670936071986e-01, -2.135834955614010e-01, -3.090071045671631e-01, -3.102417829359771e-01, -2.575155045844278e-01, -2.573168561645610e-01, -2.575155045844277e-01, -2.573168561645609e-01, -4.316175500848071e-01, -4.338217175114368e-01, -3.435879140217975e-03, -3.417867682560654e-03, -5.940970201293480e-03, -5.935404350338675e-03, -2.936477586490623e-01, -2.968545464368606e-01, -1.574078404241329e-02, -1.651591682815469e-02, -1.574078404241330e-02, -1.651591682815470e-02, -6.668227955260380e-04, -6.136138834116420e-04, -6.864446312778581e-05, -6.825647275538861e-05, -1.545780543208453e-04, -1.325868059773280e-04, -1.390459027115561e-02, -1.405305010902304e-02, -3.059236721893962e-04, -1.510629280244223e-04, -3.059236721893959e-04, -1.510629280244222e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_pbeop_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_pbeop", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.378148286001965e-08, 0.000000000000000e+00, -1.378155814174832e-08, -1.378137226295842e-08, 0.000000000000000e+00, -1.378147730186194e-08, -1.378089280256318e-08, 0.000000000000000e+00, -1.378082804759132e-08, -1.378215092485151e-08, 0.000000000000000e+00, -1.378242384538650e-08, -1.378142698511021e-08, 0.000000000000000e+00, -1.378169183114923e-08, -1.378142698511021e-08, 0.000000000000000e+00, -1.378169183114923e-08, -1.654471947817948e-05, 0.000000000000000e+00, -1.654955922385767e-05, -1.654500556139303e-05, 0.000000000000000e+00, -1.655021778930839e-05, -1.655564823510602e-05, 0.000000000000000e+00, -1.655827460547669e-05, -1.652680259498999e-05, 0.000000000000000e+00, -1.653037077152328e-05, -1.655313331534833e-05, 0.000000000000000e+00, -1.653920110979917e-05, -1.655313331534833e-05, 0.000000000000000e+00, -1.653920110979917e-05, -5.621778881937046e-03, 0.000000000000000e+00, -5.666068138102369e-03, -5.618972182038977e-03, 0.000000000000000e+00, -5.673696063977723e-03, -5.681709825239144e-03, 0.000000000000000e+00, -5.590158332076624e-03, -5.503449077623112e-03, 0.000000000000000e+00, -5.533779514965362e-03, -5.931256511443742e-03, 0.000000000000000e+00, -4.972837999001023e-03, -5.931256511443742e-03, 0.000000000000000e+00, -4.972837999001023e-03, 8.547828458113201e-02, 0.000000000000000e+00, 4.468756872944349e-02, 8.882130203983614e-02, 0.000000000000000e+00, 4.077763461075956e-02, -3.571998760716453e-03, 0.000000000000000e+00, -3.510805659024121e-03, 1.208533937412532e-01, 0.000000000000000e+00, 1.047764887243730e-01, -5.930822596563565e-02, 0.000000000000000e+00, 9.737008097101761e-01, -5.930822596563563e-02, 0.000000000000000e+00, 9.737008097101768e-01, 3.825672673319891e-01, 0.000000000000000e+00, 2.795811895190476e-01, 4.112427634090681e-01, 0.000000000000000e+00, 2.900638019921411e-01, 2.172642977663943e-01, 0.000000000000000e+00, 1.667383240410589e-01, 2.895396940496151e-01, 0.000000000000000e+00, 3.063625570693553e-01, 8.361962677556656e-02, 0.000000000000000e+00, 3.553738805812687e+00, 8.361962677556677e-02, 0.000000000000000e+00, 3.553738805812694e+00, -3.769088789500591e-06, 0.000000000000000e+00, -3.772347842201637e-06, -3.769418702660867e-06, 0.000000000000000e+00, -3.772661686516347e-06, -3.769081001534763e-06, 0.000000000000000e+00, -3.772336405913933e-06, -3.769359845703712e-06, 0.000000000000000e+00, -3.772626719332782e-06, -3.769281412838534e-06, 0.000000000000000e+00, -3.772509090648069e-06, -3.769281412838534e-06, 0.000000000000000e+00, -3.772509090648069e-06, -1.159163108280418e-04, 0.000000000000000e+00, -1.159337267733381e-04, -1.137974000559594e-04, 0.000000000000000e+00, -1.138800108964261e-04, -1.157082143617002e-04, 0.000000000000000e+00, -1.158932419406630e-04, -1.139126382554008e-04, 0.000000000000000e+00, -1.140400988422088e-04, -1.148298938394938e-04, 0.000000000000000e+00, -1.147693961506618e-04, -1.148298938394938e-04, 0.000000000000000e+00, -1.147693961506618e-04, -9.395849880177685e-03, 0.000000000000000e+00, -9.422872297411219e-03, -7.957903071667199e-03, 0.000000000000000e+00, -7.963782650052181e-03, -1.152116431735951e-02, 0.000000000000000e+00, -1.145136438864854e-02, -1.112412886991747e-02, 0.000000000000000e+00, -1.104181318800849e-02, -8.867444826497352e-03, 0.000000000000000e+00, -9.238983623142578e-03, -8.867444826497348e-03, 0.000000000000000e+00, -9.238983623142580e-03, 1.373116274055305e-01, 0.000000000000000e+00, 1.326591382523033e-01, 2.629067288155225e-02, 0.000000000000000e+00, 2.348913845506144e-02, 1.748958486444974e-01, 0.000000000000000e+00, 1.282025268732972e-01, -1.818037482786237e-04, 0.000000000000000e+00, -1.820802540461670e-04, 1.790535892575999e-01, 0.000000000000000e+00, 1.550790031580497e-01, 1.790535892575999e-01, 0.000000000000000e+00, 1.550790031580497e-01, 4.673713153508983e-01, 0.000000000000000e+00, 3.337053880271001e-01, 3.790358364578627e-01, 0.000000000000000e+00, 3.246320055887967e-01, 2.405059035062908e+00, 0.000000000000000e+00, 2.008591189725031e+00, 2.282088494096065e-01, 0.000000000000000e+00, 2.129617398950802e-01, 2.316143998389783e+00, 0.000000000000000e+00, 4.658890009462731e-01, 2.316143998389777e+00, 0.000000000000000e+00, 4.658890009462726e-01, -1.007796199712146e-02, 0.000000000000000e+00, -1.007335798145715e-02, -1.011348618598668e-02, 0.000000000000000e+00, -1.010681809185682e-02, -1.010227619488343e-02, 0.000000000000000e+00, -1.009672834792933e-02, -1.009262249500652e-02, 0.000000000000000e+00, -1.008676913998724e-02, -1.009763710300433e-02, 0.000000000000000e+00, -1.009189869502155e-02, -1.009763710300433e-02, 0.000000000000000e+00, -1.009189869502155e-02, -1.088917601999837e-02, 0.000000000000000e+00, -1.089111660740885e-02, -1.380535252460422e-02, 0.000000000000000e+00, -1.382864879118250e-02, -1.308204968702313e-02, 0.000000000000000e+00, -1.310480807926249e-02, -1.226977668805919e-02, 0.000000000000000e+00, -1.227239867421765e-02, -1.270921012938270e-02, 0.000000000000000e+00, -1.271103145701238e-02, -1.270921012938270e-02, 0.000000000000000e+00, -1.271103145701238e-02, -6.905643605889585e-03, 0.000000000000000e+00, -6.905565440771698e-03, -7.639053104168340e-03, 0.000000000000000e+00, -9.735659829651841e-03, -2.119294201652402e-02, 0.000000000000000e+00, -2.388394190718340e-02, -2.628379637989801e-02, 0.000000000000000e+00, -2.692183846171360e-02, -2.706058350627806e-02, 0.000000000000000e+00, -2.709085463029721e-02, -2.706058350627806e-02, 0.000000000000000e+00, -2.709085463029725e-02, -1.678163948823914e-02, 0.000000000000000e+00, -1.691451181915106e-02, 1.760661050890940e-01, 0.000000000000000e+00, 1.704082923256548e-01, 1.861623240507174e-01, 0.000000000000000e+00, 1.615895262189205e-01, -2.616321440998743e-02, 0.000000000000000e+00, -2.899702808916906e-02, 2.653844736765317e-01, 0.000000000000000e+00, 2.382637212426048e-01, 2.653844736765317e-01, 0.000000000000000e+00, 2.382637212426045e-01, 2.837438881233378e-01, 0.000000000000000e+00, 2.424584619231827e-01, 1.317132484698481e+00, 0.000000000000000e+00, 2.306662363498322e+00, 9.418838069676372e-01, 0.000000000000000e+00, 7.367685884327425e-01, 2.681933664280868e-01, 0.000000000000000e+00, 2.417154603015466e-01, 4.389711238677110e+00, 0.000000000000000e+00, 5.239391696876590e-01, 4.389711238677117e+00, 0.000000000000000e+00, 5.239391696876605e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
