
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_qtp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.083207593589716e+01, -2.083209990988111e+01, -2.083228376448238e+01, -2.083188964742268e+01, -2.083208793614468e+01, -2.083208793614468e+01, -3.258127757116736e+00, -3.258103452162102e+00, -3.257579440711874e+00, -3.259222519330426e+00, -3.258130123134083e+00, -3.258130123134083e+00, -4.662606476661018e-01, -4.658247710793857e-01, -4.546623813320179e-01, -4.595239290330413e-01, -4.661005870614228e-01, -4.661005870614228e-01, -4.166676926737112e-02, -4.363696181254681e-02, -5.896149972667105e-01, -8.510310297046228e-03, -4.226978825133987e-02, -4.226978825133987e-02, -1.746813152900742e-03, -1.827359643139078e-03, 2.276928541783606e-03, -8.509686193781154e-04, -1.808849915109142e-03, -1.808849915109142e-03, -4.837988574460075e+00, -4.837459824441381e+00, -4.837940714507519e+00, -4.837529481728540e+00, -4.837708612291915e+00, -4.837708612291915e+00, -1.850146780927631e+00, -1.861106774418211e+00, -1.849659890469230e+00, -1.858206841976898e+00, -1.858187536290697e+00, -1.858187536290697e+00, -3.718605420282800e-01, -4.085170076256066e-01, -3.448879879028208e-01, -3.599714912868358e-01, -3.913003248844750e-01, -3.913003248844750e-01, 9.471557330396108e-03, -3.239379563014710e-02, 7.557782228258856e-03, -1.612056372708069e+00, 4.281375564294688e-04, 4.281375564294688e-04, -8.213654143952768e-04, -9.367093880700120e-04, -7.050718485188295e-04, 7.202219621357406e-03, -8.547638892416173e-04, -8.547638892416173e-04, -3.773089523271649e-01, -3.767819938087394e-01, -3.770013109773270e-01, -3.771467714293004e-01, -3.770761652645093e-01, -3.770761652645094e-01, -3.599258216384962e-01, -3.042784218148961e-01, -3.217981814811479e-01, -3.370689281089271e-01, -3.293587946959105e-01, -3.293587946959105e-01, -4.366308262886614e-01, -6.619738529165035e-02, -1.024437427780151e-01, -1.681266229010162e-01, -1.334779017817092e-01, -1.334779017817091e-01, -2.589508582495456e-01, 1.721043501760558e-03, 7.369247340102300e-03, -1.523616131317229e-01, 6.841814079381019e-03, 6.841814079381035e-03, -2.037698993563030e-03, -2.597701760154574e-04, -4.912450442854806e-04, 4.990911530477177e-03, -7.281403399877636e-04, -7.281403399877625e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_qtp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.505031781458798e+01, -2.505039955380531e+01, -2.505077957272134e+01, -2.504944076912598e+01, -2.505036079265091e+01, -2.505036079265091e+01, -3.908345942743165e+00, -3.908373154770026e+00, -3.909288618916565e+00, -3.908571934771032e+00, -3.908377226036024e+00, -3.908377226036024e+00, -6.314346935395354e-01, -6.307926358056336e-01, -6.157892682847713e-01, -6.212658374426847e-01, -6.311994493362559e-01, -6.311994493362559e-01, -1.038659489048239e-01, -1.050554577550665e-01, -7.818044106294787e-01, -7.504132070491483e-02, -1.042019928938637e-01, -1.042019928938637e-01, -2.313329418324999e-03, -2.419421417151785e-03, -1.064868208416697e-02, -1.130262899975756e-03, -2.395052343451044e-03, -2.395052343451044e-03, -6.032934247537543e+00, -6.035191797134287e+00, -6.033165896192564e+00, -6.034921238121886e+00, -6.034090384817784e+00, -6.034090384817784e+00, -2.093213085045217e+00, -2.109378253746709e+00, -2.086106010747230e+00, -2.098666320879700e+00, -2.113535592954353e+00, -2.113535592954353e+00, -5.267898047671926e-01, -5.871963810429595e-01, -4.924407766915551e-01, -5.197178667585290e-01, -5.526348077630273e-01, -5.526348077630273e-01, -5.642472153167161e-02, -1.202826602660790e-01, -5.337865397999396e-02, -2.144580422366619e+00, -6.251546661941196e-02, -6.251546661941196e-02, -1.091071372487759e-03, -1.243732003629766e-03, -9.370336499124985e-04, -2.385864984019819e-02, -1.135286876787358e-03, -1.135286876787358e-03, -5.510568887810503e-01, -5.458544597176992e-01, -5.476412016857489e-01, -5.490765031353046e-01, -5.483517472537229e-01, -5.483517472537229e-01, -5.281808829551403e-01, -4.403934732551256e-01, -4.630907460174243e-01, -4.860214962226952e-01, -4.740714755540575e-01, -4.740714755540575e-01, -6.235960535162388e-01, -1.613699563628947e-01, -1.984381763813505e-01, -2.687119716942952e-01, -2.299032483002496e-01, -2.299032483002495e-01, -3.845238426084452e-01, -8.725031121048528e-03, -1.945445109547932e-02, -2.430719919596149e-01, -3.776376969441373e-02, -3.776376969441386e-02, -2.695731059693435e-03, -3.459177079865538e-04, -6.534599913875978e-04, -3.344979358168398e-02, -9.675993028123841e-04, -9.675993028123827e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_qtp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_qtp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.094043821608469e-09, -7.094014433960377e-09, -7.093776406956600e-09, -7.094259790754603e-09, -7.094029217332720e-09, -7.094029217332720e-09, -8.212036266256906e-06, -8.212318124618860e-06, -8.218772485609494e-06, -8.200988309643187e-06, -8.212047068006104e-06, -8.212047068006104e-06, -1.927752553596934e-03, -1.920925690878014e-03, -1.710846625457097e-03, -1.699794983448335e-03, -1.925320910056622e-03, -1.925320910056622e-03, 2.577137567939579e-01, 2.427380976994151e-01, -1.379693442206470e-03, 9.086899334260153e-01, 2.531170282041401e-01, 2.531170282041401e-01, 3.442077848899155e-03, 6.742245972378264e-03, 1.009455112564929e+01, -5.502679341368004e-06, 5.813363531537286e-03, 5.813363531537286e-03, -1.986773854055102e-06, -1.988244484081746e-06, -1.986912915336329e-06, -1.988056529515335e-06, -1.987542888359725e-06, -1.987542888359725e-06, -5.334299741948851e-05, -5.246163202144771e-05, -5.322152075382962e-05, -5.253641942811035e-05, -5.290047945495673e-05, -5.290047945495673e-05, -3.704305117788037e-03, -4.200146505758832e-03, -4.027295454285358e-03, -4.922847223298464e-03, -3.566207879662126e-03, -3.566207879662126e-03, 2.452790849507891e+00, 2.580263426299358e-01, 2.545102249099553e+00, -1.023864524866889e-04, 1.573519477672657e+00, 1.573519477672657e+00, -5.193609643753643e-06, -7.480270726955278e-06, -6.982130603147041e-06, 7.285053090174373e+00, -7.573518415782318e-06, -7.573518415623170e-06, -5.453158458294156e-03, -4.963054102607388e-03, -5.115761085072642e-03, -5.248965868902311e-03, -5.180452689737798e-03, -5.180452689737798e-03, -6.068780766123272e-03, -3.628728903267008e-03, -4.284490095724721e-03, -4.857100001756313e-03, -4.575732620316939e-03, -4.575732620316941e-03, -3.643362788275675e-03, 9.163568581503084e-02, 3.506429206185166e-02, 1.657306906122605e-03, 1.343436021892723e-02, 1.343436021892725e-02, -3.575725400231497e-03, 1.017673695983187e+01, 8.468865293282114e+00, 2.311054889864609e-03, 4.264112323048974e+00, 4.264112323048979e+00, 2.891542069159343e-02, -3.026089582654993e-07, -1.630344039357031e-06, 4.758223671052360e+00, -6.294670206910625e-06, -6.294670206854944e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
