
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw3pw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.684825382358854e+01, -1.684827808084102e+01, -1.684843646194977e+01, -1.684807452040377e+01, -1.684825698345660e+01, -1.684825698345660e+01, -2.840439284827448e+00, -2.840415849537446e+00, -2.839942460422716e+00, -2.841294591782989e+00, -2.840478324573088e+00, -2.840478324573088e+00, -5.961080825847618e-01, -5.958703470977393e-01, -5.914080273308945e-01, -5.955284580325615e-01, -5.942131589800751e-01, -5.942131589800751e-01, -1.857101876828648e-01, -1.870361355930493e-01, -6.854780929096967e-01, -1.578011104139444e-01, -1.676991825029218e-01, -1.676991825029218e-01, -2.710124526929370e-03, -2.904947648206182e-03, -4.758154116543176e-02, -1.490941178559422e-03, -1.902498014058317e-03, -1.902498014058317e-03, -4.112827334413543e+00, -4.112534017078798e+00, -4.112821517378159e+00, -4.112562456815900e+00, -4.112674379978647e+00, -4.112674379978647e+00, -1.719852972193345e+00, -1.728532382627204e+00, -1.719031701499770e+00, -1.726685101306685e+00, -1.725058101563205e+00, -1.725058101563205e+00, -5.129452607864849e-01, -5.447842799627576e-01, -4.789235899659174e-01, -4.880824956202550e-01, -5.192671675493763e-01, -5.192671675493763e-01, -1.274104681190613e-01, -1.972899439351032e-01, -1.202583922014973e-01, -1.534126687136318e+00, -1.372376031321854e-01, -1.372376031321854e-01, -1.175545562534926e-03, -1.467618644753557e-03, -1.215707521666379e-03, -8.680468262466401e-02, -1.418503004044463e-03, -1.418503004044463e-03, -5.057690542162335e-01, -5.043775740867129e-01, -5.048533033930824e-01, -5.052657148733611e-01, -5.050574987616319e-01, -5.050574987616319e-01, -4.928367595633462e-01, -4.451409252551966e-01, -4.575728666207547e-01, -4.705501055398952e-01, -4.637384144567955e-01, -4.637384144567955e-01, -5.692747901938584e-01, -2.341358129140361e-01, -2.658355867827589e-01, -3.243775146757624e-01, -2.923516456850563e-01, -2.923516456850562e-01, -4.125963493305619e-01, -4.370478886484991e-02, -6.835203845399372e-02, -3.099801850789999e-01, -1.045883729718471e-01, -1.045883729718471e-01, -4.168018184911683e-03, -4.490909802081975e-04, -8.719484504413485e-04, -9.998471936328798e-02, -1.324706988321085e-03, -1.324706988321082e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw3pw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.041552998024206e+01, -2.041560434380328e+01, -2.041592384606458e+01, -2.041481770358834e+01, -2.041539887321422e+01, -2.041539887321422e+01, -3.384237769992553e+00, -3.384269641883479e+00, -3.385087495373821e+00, -3.384289652163200e+00, -3.384355107726337e+00, -3.384355107726337e+00, -7.012713110688138e-01, -7.001464027945089e-01, -6.726025787234380e-01, -6.781878999224713e-01, -6.774075952932985e-01, -6.774075952932985e-01, -1.923071809444474e-01, -1.960041049392630e-01, -8.112174094316060e-01, -1.462825142101960e-01, -1.626253174993083e-01, -1.626253174993083e-01, -4.896567781195280e-03, -5.405833663638311e-03, -9.983465313764465e-02, -2.200943792870898e-03, -3.056181767638439e-03, -3.056181767638444e-03, -5.115688495487026e+00, -5.117706902628176e+00, -5.115779605807527e+00, -5.117561455614048e+00, -5.116712241236463e+00, -5.116712241236463e+00, -1.876034604648823e+00, -1.890912113146432e+00, -1.862447328535660e+00, -1.875532791827588e+00, -1.890910631994319e+00, -1.890910631994319e+00, -6.382768066748686e-01, -7.047579952986275e-01, -5.924907540424574e-01, -6.284607111742097e-01, -6.497880891558118e-01, -6.497880891558118e-01, -1.220271275683077e-01, -1.873314087420508e-01, -1.185278672399557e-01, -1.985575250746780e+00, -1.252464715703289e-01, -1.252464715703289e-01, -1.666734198876320e-03, -2.174898986672464e-03, -1.883951710407190e-03, -1.094425479471819e-01, -2.202932377552052e-03, -2.202932377552054e-03, -6.578941072523498e-01, -6.527440233309583e-01, -6.548416709397494e-01, -6.563610458910434e-01, -6.556322452207748e-01, -6.556322452207748e-01, -6.419534203962167e-01, -5.316338627787547e-01, -5.640764813490314e-01, -5.966472164708259e-01, -5.801370149560934e-01, -5.801370149560934e-01, -7.355386150590314e-01, -2.347886310219450e-01, -2.851420767557525e-01, -3.878077340068001e-01, -3.331461850140143e-01, -3.331461850140143e-01, -4.932487434422763e-01, -9.654463278405168e-02, -1.144474280484223e-01, -3.814800014680353e-01, -1.053832966818987e-01, -1.053832966818987e-01, -8.691856959363583e-03, -5.962354109126470e-04, -1.207409504300345e-03, -1.049930017812648e-01, -2.043091885923339e-03, -2.043091885923333e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw3pw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.119692932817587e-09, -5.119666609324392e-09, -5.119483253429708e-09, -5.119876268272473e-09, -5.119679761777623e-09, -5.119679761777623e-09, -6.154859490545391e-06, -6.155021873757138e-06, -6.158185874106375e-06, -6.148140241393785e-06, -6.154477391830070e-06, -6.154477391830070e-06, -2.954049012897518e-03, -2.964355088969156e-03, -3.193122227733816e-03, -3.101502785636928e-03, -3.124743572908504e-03, -3.124743572908504e-03, -3.833863383703980e-01, -3.657208673270753e-01, -1.691900291452278e-03, -8.387678906111359e-01, -6.319980724521604e-01, -6.319980724521602e-01, 2.134257808999097e+02, 2.217853764733565e+02, 2.227754771063796e+01, 2.217138254929230e+02, 2.637046418162046e+02, 2.637046418162076e+02, -1.394376428700246e-06, -1.394347651634677e-06, -1.394366990764536e-06, -1.394341850332298e-06, -1.394367549268032e-06, -1.394367549268032e-06, -4.693351999907783e-05, -4.594026334310234e-05, -4.716611609694831e-05, -4.628261152187368e-05, -4.626994131129110e-05, -4.626994131129110e-05, -4.542471990467391e-03, -2.330594462635556e-03, -6.056534613135108e-03, -3.876455022358971e-03, -4.212545323585164e-03, -4.212545323585164e-03, -1.559988201302867e+00, -3.305159180502235e-01, -1.759726547588662e+00, -5.442686923674866e-05, -1.450425730062108e+00, -1.450425730062108e+00, 3.052033047114012e+02, 2.598649719844481e+02, 1.562318291888802e+03, -8.285409311280619e-01, 7.278717205433293e+02, 7.278717205433295e+02, -2.891372781660967e-03, -2.996114426950912e-03, -2.748431942302853e-03, -2.642667852390653e-03, -2.674432630331887e-03, -2.674432630331887e-03, -2.945107801149534e-03, -8.976631296053824e-03, -7.315906856321067e-03, -5.537052421053598e-03, -6.469412810245744e-03, -6.469412810245744e-03, -2.070563281573179e-03, -1.551049903048807e-01, -8.461049976044446e-02, -3.058765803095983e-02, -5.191403852884957e-02, -5.191403852884961e-02, -1.202872127447534e-02, 2.536510240810533e+01, 6.374694965380326e+00, -3.241787523969530e-02, -2.863373817018388e+00, -2.863373817018388e+00, 1.587850288937222e+02, 1.587363652660724e+03, 6.709934179540486e+02, -2.813844084534018e+00, 9.234229215411124e+02, 9.234229215411024e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
