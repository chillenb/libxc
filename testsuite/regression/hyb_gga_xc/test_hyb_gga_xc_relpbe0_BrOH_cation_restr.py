
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_relpbe0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.546709974867670e+01, -1.546713803775184e+01, -1.546732908865444e+01, -1.546675899510469e+01, -1.546705475024456e+01, -1.546705475024456e+01, -2.559888335590863e+00, -2.559888062079310e+00, -2.559943811570121e+00, -2.560326839834658e+00, -2.559948904660337e+00, -2.559948904660337e+00, -5.161524460121270e-01, -5.156628090161767e-01, -5.044303313064311e-01, -5.083546445412790e-01, -5.074254297085529e-01, -5.074254297085529e-01, -1.465535129668985e-01, -1.481340880407364e-01, -5.979566560148284e-01, -1.199841996985659e-01, -1.294887446197760e-01, -1.294887446197760e-01, -9.430570421382511e-03, -9.913358750596322e-03, -4.840974653709356e-02, -5.499646140419314e-03, -6.884851098709020e-03, -6.884851098709020e-03, -3.794860519785774e+00, -3.795389396241093e+00, -3.794888205956268e+00, -3.795355045075396e+00, -3.795126695311408e+00, -3.795126695311408e+00, -1.476846870964500e+00, -1.486414836693789e+00, -1.471428234655465e+00, -1.479858238275962e+00, -1.484782985658020e+00, -1.484782985658020e+00, -4.532362603625242e-01, -4.926249161469903e-01, -4.208327299956524e-01, -4.384140758928594e-01, -4.603111919833184e-01, -4.603111919833184e-01, -9.571119304613231e-02, -1.521334101422107e-01, -9.060265413367558e-02, -1.422877197394028e+00, -1.031573571065063e-01, -1.031573571065063e-01, -4.257205835453024e-03, -5.377515563258484e-03, -4.121259521894808e-03, -6.850976611756368e-02, -4.955049129904628e-03, -4.955049129904628e-03, -4.587646358068141e-01, -4.550941479339525e-01, -4.563448197291033e-01, -4.574086501836785e-01, -4.568725371534654e-01, -4.568725371534654e-01, -4.474036820554789e-01, -3.836498402557547e-01, -4.006316569941449e-01, -4.183694035186347e-01, -4.091951813044868e-01, -4.091951813044868e-01, -5.150731899520586e-01, -1.845734965711994e-01, -2.150617107457674e-01, -2.756598218106953e-01, -2.425283479328321e-01, -2.425283479328321e-01, -3.545901487561767e-01, -4.688416306319737e-02, -5.976787913149905e-02, -2.662819210254743e-01, -7.891271837260062e-02, -7.891271837260061e-02, -1.320066026930279e-02, -1.456383479663029e-03, -3.037413392885208e-03, -7.591091435096303e-02, -4.589199916949335e-03, -4.589199916949333e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_relpbe0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.018329647396030e+01, -2.018335936491211e+01, -2.018364531575074e+01, -2.018270948905658e+01, -2.018319894117812e+01, -2.018319894117812e+01, -3.327174477183510e+00, -3.327193648420704e+00, -3.327716790330260e+00, -3.327427613518561e+00, -3.327276229316797e+00, -3.327276229316797e+00, -6.693537453704365e-01, -6.683672131094945e-01, -6.435960357194983e-01, -6.490661797403402e-01, -6.482327189476661e-01, -6.482327189476661e-01, -1.716691582301393e-01, -1.753942423528740e-01, -7.772320247172071e-01, -1.225320895424833e-01, -1.413793441780009e-01, -1.413793441780009e-01, -1.242622929274319e-02, -1.304649850668402e-02, -5.352114179751678e-02, -7.292354081610625e-03, -9.108016550410934e-03, -9.108016550410932e-03, -4.992309795461205e+00, -4.993598192591481e+00, -4.992370699505603e+00, -4.993508091383302e+00, -4.992962071680927e+00, -4.992962071680927e+00, -1.848749286457801e+00, -1.863553778076319e+00, -1.835258419082201e+00, -1.848356016388484e+00, -1.863448509682951e+00, -1.863448509682951e+00, -5.995201204722244e-01, -6.529667421298437e-01, -5.560478518252908e-01, -5.815663599314340e-01, -6.095664002445256e-01, -6.095664002445256e-01, -8.643828833558596e-02, -1.630765472068771e-01, -8.148674585575709e-02, -1.888593874331901e+00, -9.888535101384964e-02, -9.888535101384964e-02, -5.651091718035127e-03, -7.129869584653275e-03, -5.458638013264685e-03, -6.428731242919231e-02, -6.562082029836298e-03, -6.562082029836297e-03, -6.056009129037587e-01, -6.029588674983856e-01, -6.040073070362734e-01, -6.047791619199858e-01, -6.044039147948097e-01, -6.044039147948097e-01, -5.895314793735938e-01, -5.009240983116476e-01, -5.289616284807713e-01, -5.552778306930265e-01, -5.421307225156060e-01, -5.421307225156060e-01, -6.830030369428109e-01, -2.114355070714041e-01, -2.618473600045060e-01, -3.602050389786581e-01, -3.084956796894248e-01, -3.084956796894248e-01, -4.632294380569324e-01, -5.280252166377205e-02, -6.117361883669514e-02, -3.520643668420759e-01, -7.107327255920466e-02, -7.107327255920465e-02, -1.727322695083143e-02, -1.937630501913987e-03, -4.035095365268380e-03, -6.853690680466609e-02, -6.078956771684360e-03, -6.078956771684356e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_relpbe0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_relpbe0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.071372734302376e-09, -1.071359332027560e-09, -1.071298780870318e-09, -1.071498200912423e-09, -1.071393844108864e-09, -1.071393844108864e-09, -1.196914482781255e-06, -1.196823488606783e-06, -1.194605038804858e-06, -1.197615415802371e-06, -1.196699163801388e-06, -1.196699163801388e-06, -4.451196973254750e-04, -4.548253417363522e-04, -6.977030407090042e-04, -6.705747905610148e-04, -6.696086291851943e-04, -6.696086291851943e-04, -1.602702056696155e-01, -1.467817150079287e-01, -2.436522972803832e-04, -4.893645493177638e-01, -3.216524350354999e-01, -3.216524350355002e-01, -1.554459810242563e+01, -1.638660541957150e+01, -6.408812442528083e+00, -1.427889123717526e+01, -1.806983620660952e+01, -1.806983620660962e+01, -2.159551069384687e-07, -2.150221891619039e-07, -2.159155478406403e-07, -2.150920527180584e-07, -2.154815150778640e-07, -2.154815150778640e-07, -1.306871270307264e-05, -1.265941980962517e-05, -1.345512429242852e-05, -1.308441955980397e-05, -1.265573689984985e-05, -1.265573689984985e-05, 3.128845874574335e-04, 1.478071334203732e-03, 2.906231351507052e-04, 2.121804872555243e-03, 4.344347044653863e-04, 4.344347044653863e-04, -1.357059583740388e+00, -1.724070368456560e-01, -1.678159144051714e+00, 5.930312293245489e-06, -9.750250113677709e-01, -9.750250113677709e-01, -1.884437633170751e+01, -1.680200299331479e+01, -1.052613938416152e+02, -4.214464785196994e+00, -4.898811552587463e+01, -4.898811552587580e+01, 2.972386200877248e-03, 2.214473877989625e-03, 2.456063704417891e-03, 2.675389349496670e-03, 2.563391372463818e-03, 2.563391372463818e-03, 3.659355181743601e-03, -8.368648497828345e-04, 2.656969497399139e-04, 1.426686148824946e-03, 8.341617816595639e-04, 8.341617816595639e-04, 1.123991860768509e-03, -6.815458654309617e-02, -2.880008177297303e-02, -2.150257768265765e-03, -1.142809410195883e-02, -1.142809410195883e-02, -1.021184300902702e-03, -6.104823279644013e+00, -4.753207969703620e+00, 3.013864465485659e-03, -2.922119658859796e+00, -2.922119658859796e+00, -1.237335090182546e+01, -8.281910321522192e+01, -4.001319343024954e+01, -3.326801275161666e+00, -6.189403895824286e+01, -6.189403895824298e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
