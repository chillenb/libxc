
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_bhandhlyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.059420063210177e+01, -1.059421412352141e+01, -1.059430864205320e+01, -1.059410720506871e+01, -1.059420784390142e+01, -1.059420784390142e+01, -1.804013870640132e+00, -1.803995623821095e+00, -1.803616720959351e+00, -1.804608328237636e+00, -1.804034349630881e+00, -1.804034349630881e+00, -3.868006241056554e-01, -3.866836324186503e-01, -3.843326946802980e-01, -3.870088068106942e-01, -3.859567042882407e-01, -3.859567042882407e-01, -1.133250613580965e-01, -1.147727205889684e-01, -4.442626996996790e-01, -8.814893252472968e-02, -1.076714048599271e-01, -1.076714048599270e-01, -3.350505066136848e-02, -3.355253954606476e-02, -5.644168823459524e-02, -3.041539379078371e-02, -3.063812674511608e-02, -3.063812674511606e-02, -2.591409155846381e+00, -2.591079411951743e+00, -2.591399496677720e+00, -2.591108314698463e+00, -2.591239017131628e+00, -2.591239017131628e+00, -1.108368425232654e+00, -1.113663021973401e+00, -1.108354568379850e+00, -1.113035285817673e+00, -1.111300405920636e+00, -1.111300405920636e+00, -3.301608074674787e-01, -3.449486751856144e-01, -3.087907059866447e-01, -3.099692114916842e-01, -3.339829327027024e-01, -3.339829327027025e-01, -6.419803766242084e-02, -1.132913623008464e-01, -6.165059301765277e-02, -9.661774931814098e-01, -7.414413915831831e-02, -7.414413915831831e-02, -2.740036218298321e-02, -2.930881219460360e-02, -1.923118044615222e-02, -5.537497814301480e-02, -2.333369259413022e-02, -2.333369259413023e-02, -3.178146387257783e-01, -3.190737267753104e-01, -3.186631673327178e-01, -3.182959288719727e-01, -3.184822282347269e-01, -3.184822282347269e-01, -3.089755723615993e-01, -2.883428725773201e-01, -2.951146713704987e-01, -3.010373797862987e-01, -2.980291142117047e-01, -2.980291142117047e-01, -3.608506027722850e-01, -1.417509440588900e-01, -1.672188796554193e-01, -2.090238332791553e-01, -1.873041124500022e-01, -1.873041124500023e-01, -2.670505466856561e-01, -5.697413657202248e-02, -5.608691679731822e-02, -1.989511984157007e-01, -5.869010148292161e-02, -5.869010148292161e-02, -3.793573403631699e-02, -1.683465996730364e-02, -2.209465582800972e-02, -5.735652633772561e-02, -2.194432000054400e-02, -2.194432000054398e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_bhandhlyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.267802343908435e+01, -1.267800853675021e+01, -1.267807803544408e+01, -1.267804848282864e+01, -1.267824331124642e+01, -1.267828635865824e+01, -1.267762319517713e+01, -1.267750023686113e+01, -1.267805358778973e+01, -1.267780911675518e+01, -1.267805358778973e+01, -1.267780911675518e+01, -2.100496985711771e+00, -2.100535208837827e+00, -2.100515016425788e+00, -2.100553730485369e+00, -2.100957635213775e+00, -2.101056462812721e+00, -2.100524165066659e+00, -2.100619149831783e+00, -2.100176701146554e+00, -2.100997191579241e+00, -2.100176701146554e+00, -2.100997191579241e+00, -4.467120430331122e-01, -4.469808363037421e-01, -4.462266547224982e-01, -4.465364283731023e-01, -4.357496570170705e-01, -4.360830869004050e-01, -4.391050119982294e-01, -4.389885229290083e-01, -4.395723370244008e-01, -4.434299246130101e-01, -4.395723370244008e-01, -4.434299246130101e-01, -1.437757076821838e-01, -1.420253164919819e-01, -1.445894161639215e-01, -1.427600354375792e-01, -5.098974641411961e-01, -5.174040392039297e-01, -1.236186347863629e-01, -1.235421470451100e-01, -1.113155105612457e-01, -1.465936835970223e-01, -1.113155105612456e-01, -1.465936835970223e-01, -1.041360796679322e-02, -1.032071928209185e-02, -1.067580730352684e-02, -1.055212412334981e-02, -3.182604965789917e-02, -3.203295592649132e-02, -7.796364683824835e-03, -7.832083650816451e-03, -8.552443285001406e-03, -7.961949952586315e-03, -8.552443285001389e-03, -7.961949952586308e-03, -3.171925258045875e+00, -3.171201972602204e+00, -3.173177618412577e+00, -3.172415838735136e+00, -3.171993672390354e+00, -3.171245038090012e+00, -3.173071276283901e+00, -3.172344632282321e+00, -3.172565841120591e+00, -3.171812194915872e+00, -3.172565841120591e+00, -3.171812194915872e+00, -1.181613970407829e+00, -1.181571683874639e+00, -1.190341335177223e+00, -1.190112681370500e+00, -1.173880190189982e+00, -1.175005769834581e+00, -1.181394687364804e+00, -1.182633124353440e+00, -1.191575126148398e+00, -1.188229784028132e+00, -1.191575126148398e+00, -1.188229784028132e+00, -3.992006600802635e-01, -3.986731483988090e-01, -4.376082340483730e-01, -4.378012430497120e-01, -3.682730651763509e-01, -3.743058695977476e-01, -3.868921585332720e-01, -3.934332789264566e-01, -4.104877426751568e-01, -4.000308001781173e-01, -4.104877426751568e-01, -4.000308001781174e-01, -9.936951473076160e-02, -9.890159946339452e-02, -1.570940839807043e-01, -1.568718756737214e-01, -9.098476800123968e-02, -9.142282971120944e-02, -1.228304800786476e+00, -1.227873381419603e+00, -1.087494222419672e-01, -1.026929839925362e-01, -1.087494222419672e-01, -1.026929839925362e-01, -6.584106634134146e-03, -6.698605212227474e-03, -7.537567625006611e-03, -7.604239282904215e-03, -5.332355726623640e-03, -5.234487050020245e-03, -5.567105999774549e-02, -5.612140637763953e-02, -6.446358390260210e-03, -6.304055527434124e-03, -6.446358390260224e-03, -6.304055527434124e-03, -4.101726786644199e-01, -4.110861302665279e-01, -4.051196983968295e-01, -4.060186371050544e-01, -4.068002718108495e-01, -4.077121764225750e-01, -4.082698271274120e-01, -4.091722556589774e-01, -4.075260040710172e-01, -4.084331897749119e-01, -4.075260040710172e-01, -4.084331897749119e-01, -4.010501919814592e-01, -4.017795334731060e-01, -3.389268091386368e-01, -3.393860179298105e-01, -3.538508441569795e-01, -3.544943355905207e-01, -3.707721941269003e-01, -3.714176985294144e-01, -3.619002200566499e-01, -3.625219256592171e-01, -3.619002200566499e-01, -3.625219256592171e-01, -4.563597924122859e-01, -4.569150089358943e-01, -1.827849154687502e-01, -1.824158865569062e-01, -2.040108183991246e-01, -2.033342365870178e-01, -2.487791049096431e-01, -2.490569975984823e-01, -2.231118883075002e-01, -2.229353269163505e-01, -2.231118883075003e-01, -2.229353269163505e-01, -3.148073988146962e-01, -3.153703940442132e-01, -3.087419536492791e-02, -3.089104270545655e-02, -4.298720647502736e-02, -4.346796804532754e-02, -2.397364471555350e-01, -2.405841548957390e-01, -7.321644009502222e-02, -7.138904741864034e-02, -7.321644009502219e-02, -7.138904741864033e-02, -1.302794435553398e-02, -1.289971957467591e-02, -3.508020861052414e-03, -3.218681464735430e-03, -5.150765827152314e-03, -5.101702139022743e-03, -6.745031878790742e-02, -6.782576916169782e-02, -5.699159949486787e-03, -6.039262811729367e-03, -5.699159949486794e-03, -6.039262811729357e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_bhandhlyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_bhandhlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.231563516992253e-09, 1.463652377038497e-11, -7.231604011594783e-09, -7.231523476430922e-09, 1.463631512328463e-11, -7.231574336294711e-09, -7.231303409101326e-09, 1.463532316351641e-11, -7.231288045393483e-09, -7.231765180941671e-09, 1.463842899785011e-11, -7.231867594477123e-09, -7.231548127312853e-09, 1.463681083685537e-11, -7.231566915898407e-09, -7.231548127312853e-09, 1.463681083685537e-11, -7.231566915898407e-09, -9.302848175460647e-06, 1.902747638536065e-07, -9.306364297513646e-06, -9.303124569160783e-06, 1.902725761814505e-07, -9.306898324763103e-06, -9.312315584083671e-06, 1.901971754504621e-07, -9.314652512039028e-06, -9.290289382868889e-06, 1.901358235030523e-07, -9.293238489384420e-06, -9.306742510968350e-06, 1.902491360705296e-07, -9.301661572708769e-06, -9.306742510968350e-06, 1.902491360705296e-07, -9.301661572708769e-06, -4.953310376674751e-03, 1.144533678933034e-03, -5.020122304364506e-03, -4.943771555439271e-03, 1.151156568500561e-03, -5.025858752438892e-03, -4.957251498485142e-03, 1.320750241138922e-03, -4.835305114213425e-03, -4.753180145581312e-03, 1.265386257803329e-03, -4.792819767753934e-03, -5.368921206925326e-03, 1.376562597771172e-03, -4.135978150500499e-03, -5.368921206925326e-03, 1.376562597771172e-03, -4.135978150500499e-03, -3.617662190437287e-01, 6.012876550391961e-01, -3.980561263066806e-01, -3.627087559560605e-01, 5.680272535784819e-01, -3.989186155492871e-01, -2.858952205665128e-03, 5.322727974273029e-04, -2.891831255317305e-03, -5.001348641418488e-01, 1.675901373768304e+00, -5.241384436468731e-01, -7.332551880278807e-01, 2.382014110698246e+00, -1.790973586908270e+00, -7.332551880278799e-01, 2.382014110698246e+00, -1.790973586908273e+00, -1.111967393509571e+04, 1.111914508308031e-07, -9.314774954514918e+03, -9.867992916076239e+03, 4.562559950974850e-07, -8.088713933813901e+03, -5.349552586774725e+01, 1.838627425311693e+01, -4.586041710935218e+01, -4.687873244559008e+04, 4.136895542502456e-17, -4.882644272953083e+04, -1.542657750985006e+04, 1.070835888305008e-12, -1.014033898270611e+05, -1.542657750985008e+04, 1.070835888305008e-12, -1.014033898270611e+05, -2.150458439337572e-06, 2.233703107768369e-08, -2.152194719657886e-06, -2.152082174964266e-06, 2.231537777319893e-08, -2.153761057296319e-06, -2.150527314283419e-06, 2.233595490630417e-08, -2.152230513878062e-06, -2.151917227428588e-06, 2.231683364972891e-08, -2.153657234486329e-06, -2.151307636187405e-06, 2.232609670798167e-08, -2.152983366591939e-06, -2.151307636187405e-06, 2.232609670798167e-08, -2.152983366591939e-06, -6.790027294972383e-05, 4.104557134069705e-06, -6.790778888518919e-05, -6.657528905721286e-05, 3.949027730077658e-06, -6.660992658693804e-05, -6.785278258584326e-05, 4.223201907834492e-06, -6.802206438506341e-05, -6.670398876419666e-05, 4.080707689470805e-06, -6.684537683894522e-05, -6.727427677888774e-05, 3.966397450084659e-06, -6.704860253506467e-05, -6.727427677888774e-05, 3.966397450084659e-06, -6.704860253506467e-05, -1.032127944984268e-02, 2.253646609880290e-03, -1.038612322650543e-02, -9.669116957070385e-03, 1.482953633834817e-03, -9.694730398716211e-03, -1.378124643805216e-02, 3.393155540240489e-03, -1.318989732881906e-02, -1.554187293558454e-02, 2.786872153422916e-03, -1.429306478361949e-02, -9.605947720061656e-03, 2.171399762139616e-03, -1.059865925408298e-02, -9.605947720061660e-03, 2.171399762139616e-03, -1.059865925408298e-02, -7.646637542697579e-01, 5.364331359216309e+00, -8.462776726128887e-01, -2.105945233433957e-01, 5.928062603673171e-01, -2.165374343217839e-01, -1.039998536665284e+00, 6.670630325612285e+00, -1.289323132132981e+00, -1.284736073373293e-04, 4.550774239056777e-06, -1.286840842304858e-04, -6.116840376363433e-01, 3.362374819306393e+00, -1.074492394481165e+00, -6.116840376363433e-01, 3.362374819306393e+00, -1.074492394481165e+00, -1.180146590030192e+05, 5.421496698436063e-24, -1.014441838580944e+05, -5.524074118261046e+04, 1.228758886113335e-17, -5.173268261341698e+04, -2.076887393832880e+05, 5.656440620065503e-25, -1.814401341082844e+05, -8.029827873523880e+00, 1.504669301565768e+01, -7.747057569885696e+00, -1.606921639990695e+05, 9.610322787727072e-20, -6.417006113163511e+04, -1.606921639990693e+05, 9.610322787727070e-20, -6.417006113163508e+04, -1.456766095527876e-02, 2.199677179191681e-03, -1.444687980429697e-02, -1.354976861849778e-02, 2.264286130145305e-03, -1.345128047679470e-02, -1.385304679413011e-02, 2.241303100651475e-03, -1.374994919618711e-02, -1.414575311659296e-02, 2.222568983976134e-03, -1.403143564158123e-02, -1.399446442332928e-02, 2.231922961512953e-03, -1.388581949875098e-02, -1.399446442332928e-02, 2.231922961512953e-03, -1.388581949875098e-02, -1.682534034502033e-02, 2.525278278664052e-03, -1.668213947202767e-02, -1.648804662461462e-02, 5.397863529116129e-03, -1.646650632805501e-02, -1.603975156830075e-02, 4.298036410666330e-03, -1.599845996630916e-02, -1.589310416598834e-02, 3.458400931093935e-03, -1.580244950786263e-02, -1.596674636970882e-02, 3.860241852276062e-03, -1.588089479725798e-02, -1.596674636970882e-02, 3.860241852276062e-03, -1.588089479725798e-02, -7.949111236466237e-03, 1.166454564355177e-03, -7.961074853838171e-03, -1.322072551656051e-01, 2.273047300256539e-01, -1.354001693361300e-01, -9.638491865470500e-02, 1.027440095908986e-01, -9.925946811981083e-02, -5.849657625065384e-02, 2.883676467546989e-02, -5.837089693604747e-02, -7.760366266897330e-02, 5.500747727544229e-02, -7.800561458212177e-02, -7.760366266897328e-02, 5.500747727544231e-02, -7.800561458212188e-02, -2.236110269683927e-02, 8.100714365057125e-03, -2.236572496701774e-02, -5.610805396671017e+01, 1.766533536733120e+01, -5.504124493497539e+01, -1.791541254907341e+01, 1.878803243082290e+01, -1.662500173832569e+01, -7.767464258966481e-02, 3.428914672188251e-02, -7.697764993798638e-02, -3.101428225157975e+00, 9.701438036301546e+00, -3.633806427791527e+00, -3.101428225157975e+00, 9.701438036301546e+00, -3.633806427791535e+00, -3.731316090176042e+03, 3.417478728614279e-04, -3.389687410588767e+03, -3.488861744995107e+06, 2.850114531961813e-85, -4.059728055962978e+06, -3.914855591360361e+05, 1.662312648545182e-36, -3.334370304570014e+05, -4.306998654078148e+00, 1.102889579754806e+01, -4.203063460962663e+00, -2.300565140187642e+05, 8.178814636871498e-22, -8.330882574828930e+04, -2.300565140187647e+05, 8.178814636871070e-22, -8.330882574828957e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
