
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_mpw3lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.646635684877764e+01, -1.646637691383334e+01, -1.646652424988450e+01, -1.646619452337453e+01, -1.646636694707854e+01, -1.646636694707854e+01, -2.780851121185517e+00, -2.780831248037978e+00, -2.780397392932144e+00, -2.781722399526570e+00, -2.780852498235159e+00, -2.780852498235159e+00, -5.850938740442262e-01, -5.849709489969552e-01, -5.827431366948255e-01, -5.864342683907550e-01, -5.850468611164259e-01, -5.850468611164259e-01, -1.817600169392002e-01, -1.832590799287533e-01, -6.812012094298143e-01, -1.425002805836413e-01, -1.822017205751805e-01, -1.822017205751805e-01, -7.300561605776286e-03, -7.913043191530663e-03, -6.069011304395383e-02, -2.437547541501270e-03, -7.831023837998817e-03, -7.831023837998817e-03, -4.012528481974710e+00, -4.012121369229053e+00, -4.012491686352822e+00, -4.012175055665928e+00, -4.012312848733162e+00, -4.012312848733162e+00, -1.693764765754112e+00, -1.701856511007168e+00, -1.694047483032762e+00, -1.700347225305222e+00, -1.698885412673501e+00, -1.698885412673501e+00, -4.926513403615422e-01, -5.143123896289014e-01, -4.701029867705461e-01, -4.747730014556318e-01, -5.077920753318493e-01, -5.077920753318493e-01, -1.112875726964350e-01, -1.893663300513246e-01, -1.104986688301686e-01, -1.482705782137356e+00, -1.251213304270553e-01, -1.251213304270553e-01, -2.346776850285094e-03, -2.755469603034662e-03, -2.113160867948123e-03, -7.943034031583905e-02, -2.540611764579460e-03, -2.540611764579460e-03, -4.847822444245734e-01, -4.867690471875877e-01, -4.861344999988114e-01, -4.855943076338017e-01, -4.858706061152190e-01, -4.858706061152190e-01, -4.693905977327019e-01, -4.414524881293896e-01, -4.506381888524775e-01, -4.583685767511844e-01, -4.544120924653618e-01, -4.544120924653618e-01, -5.384587154393820e-01, -2.302593001792497e-01, -2.639010912585429e-01, -3.168692909292857e-01, -2.890568816852013e-01, -2.890568816852013e-01, -4.018406225788076e-01, -5.489521635756888e-02, -7.237930303050560e-02, -2.950723231214072e-01, -9.604026663783972e-02, -9.604026663783971e-02, -9.073999049927998e-03, -7.261586262522479e-04, -1.358041924624002e-03, -9.316583012887342e-02, -2.149507929471699e-03, -2.149507929471695e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_mpw3lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.989457926499766e+01, -1.989464200806640e+01, -1.989493613998858e+01, -1.989390842529744e+01, -1.989461223467694e+01, -1.989461223467694e+01, -3.273335392443112e+00, -3.273357926672373e+00, -3.274109387776957e+00, -3.273493167139863e+00, -3.273360610961848e+00, -3.273360610961848e+00, -6.683510406841798e-01, -6.676321629542831e-01, -6.501146012346627e-01, -6.548104196941140e-01, -6.680888992189419e-01, -6.680888992189419e-01, -2.075558978680389e-01, -2.092422201100614e-01, -7.950664087107645e-01, -1.710862812670782e-01, -2.080417715976189e-01, -2.080417715976189e-01, -1.721767102088916e-02, -1.893628500072228e-02, -1.068064918400383e-01, -4.106940868284045e-03, -1.872851804523981e-02, -1.872851804523981e-02, -4.947460298046485e+00, -4.949241872618456e+00, -4.947643083885096e+00, -4.949028334653619e+00, -4.948372703593940e+00, -4.948372703593940e+00, -1.828468957065371e+00, -1.841610842538703e+00, -1.822406900823554e+00, -1.832619179550110e+00, -1.845369956503713e+00, -1.845369956503713e+00, -5.948690987661968e-01, -6.560890735973197e-01, -5.658785112149888e-01, -5.980829823692270e-01, -6.176780530352167e-01, -6.176780530352167e-01, -1.508174040106688e-01, -2.235598346537263e-01, -1.454299897704725e-01, -1.894556997672749e+00, -1.551840947776518e-01, -1.551840947776518e-01, -3.922438972179004e-03, -4.846767627049132e-03, -3.656983452817837e-03, -1.148257835329709e-01, -4.465911229896624e-03, -4.465911229896623e-03, -6.299805683891574e-01, -6.228672717818812e-01, -6.253922594179090e-01, -6.273249712415629e-01, -6.263611430150909e-01, -6.263611430150909e-01, -6.118972106336159e-01, -5.164192562602420e-01, -5.409911160413784e-01, -5.660471764822164e-01, -5.530459190799012e-01, -5.530459190799012e-01, -6.852852307528379e-01, -2.643388034127332e-01, -3.001970687401386e-01, -3.701656574632843e-01, -3.316382558114017e-01, -3.316382558114017e-01, -4.692146931199441e-01, -1.073209043520281e-01, -1.170445628633718e-01, -3.520413618664933e-01, -1.243836765995615e-01, -1.243836765995614e-01, -2.201506997299551e-02, -9.899631886501066e-04, -2.009908495480432e-03, -1.166920149917292e-01, -3.672046431608377e-03, -3.672046431608367e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_mpw3lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_mpw3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.154116199614622e-09, -5.154095615669014e-09, -5.153924431859712e-09, -5.154263096482673e-09, -5.154106007670257e-09, -5.154106007670257e-09, -6.643319564439593e-06, -6.643553235276871e-06, -6.648892489854423e-06, -6.634109782544495e-06, -6.643327333411075e-06, -6.643327333411075e-06, -3.512454086278958e-03, -3.509604701144996e-03, -3.395385293818326e-03, -3.321107525148243e-03, -3.511496215749329e-03, -3.511496215749329e-03, -2.435325924761000e-01, -2.461129849538502e-01, -1.986332452689577e-03, -1.963821503765958e-01, -2.445698759978222e-01, -2.445698759978222e-01, 3.430808732459512e+02, 3.345977815151538e+02, 1.472629852810540e+01, 3.216173835902699e+02, 3.477936508444858e+02, 3.477936508444858e+02, -1.543240391111803e-06, -1.544416391449618e-06, -1.543351639063291e-06, -1.544266138896486e-06, -1.543855308147563e-06, -1.543855308147563e-06, -4.799806900076820e-05, -4.712349559499672e-05, -4.791081534939432e-05, -4.722998706503136e-05, -4.751567605885282e-05, -4.751567605885282e-05, -7.747450072692765e-03, -7.356214569309919e-03, -9.295851451332104e-03, -9.885481449640160e-03, -6.957249375985563e-03, -6.957249375985563e-03, 4.301400151579109e-01, -1.064460748830721e-01, 3.088451527275028e-01, -9.328825749295355e-05, -9.293918661362191e-02, -9.293918661362191e-02, 3.429176127162229e+02, 3.325861400127756e+02, 9.579754383383076e+02, 3.457252371797351e+00, 4.906963785824431e+02, 4.906963785824423e+02, -1.081994035668926e-02, -9.331323092302390e-03, -9.627317622772151e-03, -1.001241827567749e-02, -9.795199687511242e-03, -9.795199687511238e-03, -1.248246982116123e-02, -1.118548114136890e-02, -1.095173962642353e-02, -1.088863783188802e-02, -1.091656313758636e-02, -1.091656313758636e-02, -6.045505549884322e-03, -7.888842343148571e-02, -6.238431497566656e-02, -4.044660424023046e-02, -5.170748474422267e-02, -5.170748474422269e-02, -1.608059282378494e-02, 2.039275882013822e+01, 6.681464284476752e+00, -5.803299325133338e-02, 5.768103659122121e-01, 5.768103659122057e-01, 2.443648792479891e+02, 7.502076914079545e+02, 5.608708875459587e+02, 3.046004193000943e-01, 7.287649107214976e+02, 7.287649107214959e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
