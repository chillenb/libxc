
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lcy_blyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.072461234743620e+01, -2.072464011748259e+01, -2.072483133827402e+01, -2.072441677768760e+01, -2.072462436318606e+01, -2.072462436318606e+01, -3.175498902501906e+00, -3.175468554393277e+00, -3.174851832414447e+00, -3.176581888985222e+00, -3.175546016363271e+00, -3.175546016363271e+00, -4.459478662232407e-01, -4.455033666432467e-01, -4.349685142963340e-01, -4.398092989587606e-01, -4.385438254176113e-01, -4.385438254176113e-01, -3.991732662217257e-02, -4.216549900824425e-02, -5.475709674927960e-01, -1.030649950064462e-02, -2.241003594941233e-02, -2.241003594941232e-02, -1.047300186592757e-03, -1.101376089972310e-03, 8.837648508791031e-06, -6.093794842650443e-04, -7.636492859049366e-04, -7.636492859049366e-04, -4.752038499259700e+00, -4.751529186235870e+00, -4.752025333470351e+00, -4.751575567390038e+00, -4.751774762141934e+00, -4.751774762141934e+00, -1.779203338458925e+00, -1.790461800590202e+00, -1.776850561491572e+00, -1.786819793554176e+00, -1.786541047160545e+00, -1.786541047160545e+00, -3.610944156616739e-01, -3.955308043962378e-01, -3.244006434150210e-01, -3.355027854716393e-01, -3.682412955196185e-01, -3.682412955196185e-01, 1.245679446542438e-02, -3.036245363506989e-02, 1.307301229176424e-02, -1.554176103507198e+00, 6.734986595095943e-04, 6.734986595095943e-04, -4.713633228131106e-04, -5.958673138669433e-04, -4.567910543058375e-04, 8.469257041097395e-03, -5.493544806358788e-04, -5.493544806358788e-04, -3.527765694835828e-01, -3.523128008880591e-01, -3.525078706799127e-01, -3.526406168466288e-01, -3.525767069274572e-01, -3.525767069274572e-01, -3.389115997989954e-01, -2.850084144155801e-01, -3.016519921868234e-01, -3.171174054580744e-01, -3.092964552803849e-01, -3.092964552803849e-01, -4.222022764319768e-01, -6.300812477549332e-02, -9.850677724638049e-02, -1.659253020552300e-01, -1.303378495185009e-01, -1.303378495185009e-01, -2.517206169132074e-01, -4.123739817692313e-04, 6.079266365747177e-03, -1.562804462871419e-01, 7.992645054137316e-03, 7.992645054137298e-03, -1.468683783353637e-03, -1.605952221793719e-04, -3.359508032579654e-04, 8.230435896716039e-03, -5.087031939114751e-04, -5.087031939114747e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lcy_blyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.496214607300929e+01, -2.496223970375858e+01, -2.496264023912297e+01, -2.496124753679277e+01, -2.496197951439163e+01, -2.496197951439163e+01, -3.836144997152042e+00, -3.836175612133839e+00, -3.836983153418051e+00, -3.836348131073262e+00, -3.836279216161989e+00, -3.836279216161989e+00, -6.011127884366031e-01, -6.004095123217984e-01, -5.848159543962488e-01, -5.905027577672743e-01, -5.891060953024346e-01, -5.891060953024346e-01, -1.072048050044115e-01, -1.081432808003912e-01, -7.237154067942528e-01, -8.451781382367812e-02, -9.189294097683762e-02, -9.189294097683762e-02, -1.390618803758961e-03, -1.462208870626304e-03, -6.455223663966598e-03, -8.103047650851390e-04, -1.014874738373830e-03, -1.014874738373830e-03, -5.954356979390843e+00, -5.956641414629561e+00, -5.954460936125985e+00, -5.956477626009853e+00, -5.955515214748150e+00, -5.955515214748150e+00, -2.037011841140216e+00, -2.053471681712537e+00, -2.024291975926070e+00, -2.038733887953911e+00, -2.052367057821740e+00, -2.052367057821740e+00, -5.054350814433086e-01, -5.639138651987304e-01, -4.576151217178179e-01, -4.810035074733506e-01, -5.157796258465597e-01, -5.157796258465597e-01, -5.988043373175643e-02, -1.228713619659350e-01, -5.294883823451223e-02, -2.080400943286777e+00, -6.615072240679620e-02, -6.615072240679620e-02, -6.271231169271206e-04, -7.923780859984149e-04, -6.077719496912648e-04, -2.340539111168061e-02, -7.306574157704094e-04, -7.306574157704094e-04, -5.112742787226062e-01, -5.060659440677201e-01, -5.078174091541164e-01, -5.093240592261477e-01, -5.085625420284464e-01, -5.085625420284464e-01, -4.936716116592357e-01, -4.064011389329357e-01, -4.282108940147457e-01, -4.520707378844440e-01, -4.395638336566394e-01, -4.395638336566394e-01, -5.987750357306443e-01, -1.578756235169994e-01, -1.891721278253000e-01, -2.557128496237773e-01, -2.177232742118333e-01, -2.177232742118333e-01, -3.648739258892907e-01, -5.806053119649587e-03, -1.351861782646039e-02, -2.392678522182242e-01, -3.677723120973941e-02, -3.677723120973939e-02, -1.948300484647114e-03, -2.139577400682447e-04, -4.472212538385620e-04, -3.294072494462732e-02, -6.766992425970716e-04, -6.766992425970710e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lcy_blyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lcy_blyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.038843173688762e-09, -7.038809846442898e-09, -7.038566127891988e-09, -7.039063959297911e-09, -7.038816680599450e-09, -7.038816680599450e-09, -7.905907695351013e-06, -7.906260610684793e-06, -7.913691259980452e-06, -7.895076324514341e-06, -7.905605414752289e-06, -7.905605414752289e-06, -1.867722287975193e-03, -1.861711606397826e-03, -1.688114451873124e-03, -1.669397343586031e-03, -1.684363987819880e-03, -1.684363987819880e-03, 3.006736379070649e-01, 2.804272912715781e-01, -1.292874425909021e-03, 9.051943619046270e-01, 5.835138625532750e-01, 5.835138625532751e-01, -3.822658802210309e-05, -4.542947841848176e-05, 9.576694323114092e+00, -7.951892663677562e-06, -1.759626771298062e-05, -1.759626771313067e-05, -1.930727095044743e-06, -1.932216660498135e-06, -1.930776796502888e-06, -1.932091940367699e-06, -1.931491470728636e-06, -1.931491470728636e-06, -5.029139350606008e-05, -4.944846052863086e-05, -5.019073521318026e-05, -4.944738321383933e-05, -4.987362123649225e-05, -4.987362123649225e-05, -3.471068321885293e-03, -3.839826648826757e-03, -3.940438058692726e-03, -5.040931835113930e-03, -3.470916459003750e-03, -3.470916459003750e-03, 2.909094507068596e+00, 3.111459022428961e-01, 3.582981325447526e+00, -9.641960712427085e-05, 1.806323386729127e+00, 1.806323386729127e+00, -4.689217957503659e-06, -8.359298782253395e-06, -1.415776619123176e-05, 7.988956244755246e+00, -1.396354578353647e-05, -1.396354578389389e-05, -5.375613157108407e-03, -4.869877810499246e-03, -5.024569331811052e-03, -5.169132529222833e-03, -5.094699557291185e-03, -5.094699557291185e-03, -6.053557538033358e-03, -3.560507715784953e-03, -4.224520562240760e-03, -4.839882149171698e-03, -4.537665904759327e-03, -4.537665904759327e-03, -3.307304534028658e-03, 1.078001056590787e-01, 3.855571500230208e-02, -1.793686140771494e-04, 1.255597472937601e-02, 1.255597472937600e-02, -3.762375096465028e-03, 9.188317763495492e+00, 9.878450729524880e+00, -1.417075700005984e-03, 5.176706835835469e+00, 5.176706835835468e+00, 8.925720476954459e-05, -6.349102304216012e-07, -3.060010051672348e-06, 5.899171870172930e+00, -1.324385040198926e-05, -1.324385040220491e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
