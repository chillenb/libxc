
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.555291733216968e+01, -1.555294491536391e+01, -1.555310591053373e+01, -1.555269473807802e+01, -1.555290472736595e+01, -1.555290472736595e+01, -2.611692466518101e+00, -2.611679200369088e+00, -2.611435429729884e+00, -2.612344965388132e+00, -2.611738168614799e+00, -2.611738168614799e+00, -5.500327836761366e-01, -5.496581975628013e-01, -5.418144575486157e-01, -5.456888845161046e-01, -5.446069294174837e-01, -5.446069294174837e-01, -1.733925543382596e-01, -1.747173564372930e-01, -6.324963209215901e-01, -1.488893451664768e-01, -1.571429333027811e-01, -1.571429333027812e-01, -7.780297029266335e-02, -7.554891555533040e-02, -8.736002706101463e-02, -3.863249599334455e-10, -1.421211643777611e-09, -1.421211643777611e-09, -3.811300386958819e+00, -3.811368252612634e+00, -3.811308999981337e+00, -3.811368814875676e+00, -3.811331620511255e+00, -3.811331620511255e+00, -1.558967446425960e+00, -1.567446706111528e+00, -1.556823047310364e+00, -1.564281652195126e+00, -1.564726409486033e+00, -1.564726409486033e+00, -4.823166297550239e-01, -5.211518422747272e-01, -4.499298944128480e-01, -4.669099837160999e-01, -4.892056173516177e-01, -4.892056173516177e-01, -1.272508455392359e-01, -1.832327608697208e-01, -1.221032594740279e-01, -1.441704069964810e+00, -1.320047742584754e-01, -1.320047742584754e-01, -1.509991701542680e-10, -4.090082411280409e-10, -7.300505882446868e-10, -1.007141429193890e-01, -8.142777099984582e-10, -8.142777099984582e-10, -4.878891231576924e-01, -4.837402061832734e-01, -4.851228728423523e-01, -4.863246163623199e-01, -4.857161401042683e-01, -4.857161401042683e-01, -4.767530593893528e-01, -4.140209995317898e-01, -4.296891064579612e-01, -4.467896011759561e-01, -4.378340474300213e-01, -4.378340474300213e-01, -5.434829793593209e-01, -2.158476852436839e-01, -2.452276128763652e-01, -3.037490883484979e-01, -2.713731449883871e-01, -2.713731449883873e-01, -3.843761460997059e-01, -8.732993965187857e-02, -9.637791677484865e-02, -2.934862394382827e-01, -1.082453858714262e-01, -1.082453858714263e-01, -8.155726370781513e-03, -3.823717035763631e-12, -6.395798173035613e-11, -1.056598068096589e-01, -7.147895832390729e-10, -7.147895854074772e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.931292888502553e+01, -1.931299750094234e+01, -1.931329475432593e+01, -1.931227405116002e+01, -1.931280998531278e+01, -1.931280998531278e+01, -3.218291647284430e+00, -3.218323280205454e+00, -3.219130742756045e+00, -3.218315981800675e+00, -3.218404322229736e+00, -3.218404322229736e+00, -6.796922371668219e-01, -6.784703395640108e-01, -6.475239231079233e-01, -6.530236582417595e-01, -6.524559358865955e-01, -6.524559358865955e-01, -1.848371972451481e-01, -1.891724813720085e-01, -7.847357768934620e-01, -1.320324154818307e-01, -1.520598493162235e-01, -1.520598493162232e-01, 4.092717791138941e-02, -6.070935806556571e-03, -4.894962593660489e-02, -2.532440258580943e-09, -9.300515336684613e-09, -9.300515334342254e-09, -4.851627408611044e+00, -4.853450845996612e+00, -4.851710051779253e+00, -4.853319793589492e+00, -4.852552222877107e+00, -4.852552222877107e+00, -1.771876838085661e+00, -1.786828212887031e+00, -1.756835371010897e+00, -1.769994464937797e+00, -1.787491546099636e+00, -1.787491546099636e+00, -6.235667413962781e-01, -6.821814478616842e-01, -5.800439005775865e-01, -6.110470455052815e-01, -6.343882492738012e-01, -6.343882492738012e-01, -9.306070933793817e-02, -1.721269625846850e-01, -8.733780169555458e-02, -1.892419001666929e+00, -1.077898501988632e-01, -1.077898501988632e-01, -9.915272039079206e-10, -2.681520491319627e-09, -4.794080302968559e-09, -6.495427663600030e-02, -5.340972180363619e-09, -5.340972183063063e-09, -6.354410945343839e-01, -6.327013995462782e-01, -6.338826824002722e-01, -6.346895888920017e-01, -6.343061731678170e-01, -6.343061731678170e-01, -6.192918237818772e-01, -5.200681722125138e-01, -5.529527280291502e-01, -5.831536197469410e-01, -5.682259376640659e-01, -5.682259376640659e-01, -7.117303011405115e-01, -2.212197749215380e-01, -2.745969875188433e-01, -3.828086753716408e-01, -3.259445392006064e-01, -3.259445392006053e-01, -4.835684142194829e-01, -4.811739004500888e-02, -5.741878721676739e-02, -3.786735735096255e-01, -7.671065806359131e-02, -7.671065806359119e-02, -1.085909088859515e-02, -2.525046135576282e-11, -4.208230858937827e-10, -7.316416665232058e-02, -4.690774621105478e-09, -4.690774621797467e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.550115403072405e-09, -3.550089962041343e-09, -3.549942923312767e-09, -3.550322134501529e-09, -3.550128257406298e-09, -3.550128257406298e-09, -3.925917741732572e-06, -3.925862763290079e-06, -3.924218795885118e-06, -3.924264455173473e-06, -3.925496749852455e-06, -3.925496749852455e-06, -1.435183027992489e-03, -1.453168987477901e-03, -1.889319591671307e-03, -1.825989481166620e-03, -1.830053544257184e-03, -1.830053544257184e-03, -2.955670701926304e-01, -2.736209704108974e-01, -8.227812060292882e-04, -8.324979862697462e-01, -5.631164079367561e-01, -5.631164079367591e-01, -2.090519103293279e+04, -1.192935037958000e+04, -3.837072580710610e+01, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, -8.336562928694141e-07, -8.323022740345429e-07, -8.335959385796956e-07, -8.324008888053832e-07, -8.329715103974887e-07, -8.329715103974887e-07, -3.413824099776186e-05, -3.326794958491316e-05, -3.467169947909823e-05, -3.389525603546821e-05, -3.339229971000745e-05, -3.339229971000745e-05, -5.242852564796754e-04, 1.874437199345317e-03, -8.581777335614780e-04, 2.590059650821697e-03, -2.576847842990712e-04, -2.576847842990712e-04, -2.430691750677549e+00, -3.016941331348896e-01, -3.100228091690899e+00, -6.571593062021302e-06, -1.649004307877873e+00, -1.649004307877873e+00, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, -1.040297124041293e+01, 8.056878965244950e-03, 8.056878974167092e-03, 4.389105431033543e-03, 2.936408445925779e-03, 3.400075257754837e-03, 3.821177714937923e-03, 3.606190456248206e-03, 3.606190456248206e-03, 5.528696709231470e-03, -3.282629709423055e-03, -1.137736972286581e-03, 1.111182009044026e-03, -4.128703564519609e-05, -4.128703564519609e-05, 1.348452580426708e-03, -1.264226770139967e-01, -5.854504921968966e-02, -8.991723357645899e-03, -2.727310306300414e-02, -2.727310306300496e-02, -4.140390292045775e-03, -4.212721852955362e+01, -1.769640460830179e+01, -4.468260419894926e-04, -5.551749873787905e+00, -5.551749873787919e+00, -8.907132212215174e-02, 2.005779865925479e-03, 2.523877354250999e-03, -6.618203865155308e+00, 1.003269687435131e-02, 1.003269687251532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
