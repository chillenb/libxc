
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b1lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.585903464242510e+01, -1.585905221243554e+01, -1.585918887304199e+01, -1.585889999513260e+01, -1.585904342111591e+01, -1.585904342111591e+01, -2.677289245461075e+00, -2.677267775957260e+00, -2.676786094139081e+00, -2.678173040143670e+00, -2.677289389265248e+00, -2.677289389265248e+00, -5.618577390364993e-01, -5.617755044184959e-01, -5.606843420767856e-01, -5.642060642238745e-01, -5.618254511890096e-01, -5.618254511890096e-01, -1.726901177224007e-01, -1.740695777504102e-01, -6.536767878212894e-01, -1.363891587725475e-01, -1.730949974398999e-01, -1.730949974398999e-01, -4.933189919371144e-02, -4.995662080153341e-02, -8.291425646312189e-02, -4.394123865338235e-02, -4.947034654163796e-02, -4.947034654163796e-02, -3.854867145493961e+00, -3.854378067359829e+00, -3.854822006207141e+00, -3.854441641335914e+00, -3.854609411176523e+00, -3.854609411176523e+00, -1.639227709602945e+00, -1.646743043517737e+00, -1.639987286329358e+00, -1.645833693132681e+00, -1.643349746447954e+00, -1.643349746447954e+00, -4.709177671919569e-01, -4.904236653989543e-01, -4.492947961416712e-01, -4.527450878753043e-01, -4.852944455122055e-01, -4.852944455122055e-01, -1.101171424685427e-01, -1.809016444516499e-01, -1.089454422916443e-01, -1.419289657868055e+00, -1.208374304499401e-01, -1.208374304499401e-01, -4.310113669402213e-02, -4.435763283935132e-02, -3.391398827410343e-02, -8.799165184814645e-02, -4.027809186840276e-02, -4.027809186840277e-02, -4.618344892290346e-01, -4.639355985373469e-01, -4.632253690268077e-01, -4.626433150253925e-01, -4.629375593774420e-01, -4.629375593774420e-01, -4.470848844103947e-01, -4.224415989131429e-01, -4.306224657645384e-01, -4.374108568057038e-01, -4.339315698195823e-01, -4.339315698195823e-01, -5.136432927070388e-01, -2.199778050251368e-01, -2.520471395268762e-01, -3.023146333633612e-01, -2.759154038563386e-01, -2.759154038563385e-01, -3.842895064250419e-01, -8.370567236977562e-02, -8.692498781403091e-02, -2.809069545084903e-01, -9.690434977319975e-02, -9.690434977319975e-02, -5.430890481618503e-02, -3.114339195756266e-02, -3.588795231996410e-02, -9.398030238122222e-02, -3.609438422986808e-02, -3.609438422986807e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b1lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.898046351056786e+01, -1.898052528938573e+01, -1.898081173697634e+01, -1.897979987937559e+01, -1.898049600000939e+01, -1.898049600000939e+01, -3.114917644808084e+00, -3.114941445861462e+00, -3.115721404023003e+00, -3.115023691547779e+00, -3.114942864959189e+00, -3.114942864959189e+00, -6.340408709613164e-01, -6.333323228524320e-01, -6.159672555182226e-01, -6.204549452108064e-01, -6.337826195162358e-01, -6.337826195162358e-01, -1.947254406005036e-01, -1.964090110130838e-01, -7.551990657281075e-01, -1.565734233984740e-01, -1.952131761623224e-01, -1.952131761623224e-01, -1.873139787926678e-02, -1.927649277272049e-02, -5.371386885009986e-02, -1.266630293507748e-02, -1.908347734214168e-02, -1.908347734214168e-02, -4.720762299398950e+00, -4.722568753708303e+00, -4.720947357864619e+00, -4.722351958835155e+00, -4.721687857752147e+00, -4.721687857752147e+00, -1.729764839696034e+00, -1.742529805478155e+00, -1.723547661442306e+00, -1.733471965573571e+00, -1.746593706964149e+00, -1.746593706964149e+00, -5.653895442528244e-01, -6.250229504982361e-01, -5.376821205615329e-01, -5.692836154045959e-01, -5.872946091191519e-01, -5.872946091191519e-01, -1.276515029513617e-01, -2.088698704516820e-01, -1.236349632063152e-01, -1.808990337506751e+00, -1.383592912853656e-01, -1.383592912853656e-01, -1.234000806640044e-02, -1.326399463230410e-02, -1.006126051819237e-02, -7.672817672687456e-02, -1.206379903286991e-02, -1.206379903286990e-02, -6.010782159224183e-01, -5.933449379122382e-01, -5.959892764115208e-01, -5.981236266176271e-01, -5.970453287602356e-01, -5.970453287602356e-01, -5.837286307162236e-01, -4.900464967587215e-01, -5.139002037767560e-01, -5.383044099629933e-01, -5.256357042697014e-01, -5.256357042697015e-01, -6.528726365162596e-01, -2.488757650247831e-01, -2.835406279630401e-01, -3.506428667698991e-01, -3.137230700237200e-01, -3.137230700237199e-01, -4.450546192295427e-01, -5.036926422289361e-02, -6.961007015049762e-02, -3.335144417033717e-01, -9.967604864848055e-02, -9.967604864848054e-02, -2.123750816510218e-02, -6.610775197985668e-03, -9.015489573285539e-03, -9.297963044721055e-02, -1.057505740613138e-02, -1.057505740613138e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b1lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b1lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.428678010890854e-09, -5.428655205537287e-09, -5.428471520166799e-09, -5.428846614309743e-09, -5.428666669112635e-09, -5.428666669112635e-09, -7.005069714743081e-06, -7.005304176114105e-06, -7.010606911851466e-06, -6.995586589189611e-06, -7.005071842891320e-06, -7.005071842891320e-06, -3.684843244196549e-03, -3.682490784585840e-03, -3.582974167738468e-03, -3.503761894132536e-03, -3.684066598977522e-03, -3.684066598977522e-03, -2.582299092752760e-01, -2.597095421999797e-01, -2.079931354906059e-03, -3.001424429891684e-01, -2.589182395827157e-01, -2.589182395827157e-01, -2.099506054610183e+03, -1.841503897665851e+03, -1.785909014888594e+01, -1.555589145337901e+04, -1.918198194109477e+03, -1.918198194109477e+03, -1.620164605440176e-06, -1.621323098204723e-06, -1.620273795447572e-06, -1.621174684735684e-06, -1.620770890318807e-06, -1.620770890318807e-06, -5.125779589445511e-05, -5.029730652825566e-05, -5.120557555050395e-05, -5.045630151143953e-05, -5.067409171532132e-05, -5.067409171532132e-05, -8.043562976394480e-03, -7.598169196106209e-03, -9.647132023355339e-03, -1.022087961739051e-02, -7.221252563874074e-03, -7.221252563874074e-03, -2.460133416207650e-01, -1.255712363391295e-01, -3.878888122595368e-01, -9.721988077698649e-05, -3.644241220883107e-01, -3.644241220883107e-01, -1.753767081995110e+04, -1.196096067788758e+04, -3.682773766211795e+04, -4.053800385465478e+00, -1.744182972745259e+04, -1.744182972745260e+04, -1.030980491650577e-02, -9.613216533547634e-03, -9.825308866661601e-03, -1.001405301281413e-02, -9.916566457053607e-03, -9.916566457053607e-03, -1.192739140279165e-02, -1.163836260791119e-02, -1.136100368750576e-02, -1.126928679798048e-02, -1.131072522375477e-02, -1.131072522375477e-02, -6.252821228933892e-03, -8.523135717249226e-02, -6.546974200999114e-02, -4.185271145355016e-02, -5.372465189865927e-02, -5.372465189865931e-02, -1.671038522591848e-02, -2.254332415548053e+01, -5.861182187842482e+00, -5.978518580698113e-02, -1.317025134468114e+00, -1.317025134468119e+00, -1.230816956218186e+03, -5.810387695059567e+05, -8.750965465838632e+04, -2.021365632773678e+00, -3.096102459467008e+04, -3.096102459467019e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
