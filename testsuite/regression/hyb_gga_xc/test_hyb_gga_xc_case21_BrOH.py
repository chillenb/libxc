
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_case21_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.575123751136747e+01, -1.575125496175847e+01, -1.575139084939753e+01, -1.575110394081497e+01, -1.575124622896994e+01, -1.575124622896994e+01, -2.645542401364652e+00, -2.645522683730148e+00, -2.645088617149975e+00, -2.646389008204475e+00, -2.645543344334056e+00, -2.645543344334056e+00, -5.560460879561507e-01, -5.559473690123973e-01, -5.550964031262252e-01, -5.584841243899747e-01, -5.560077002783320e-01, -5.560077002783320e-01, -1.786260511798159e-01, -1.799946761371207e-01, -6.469099674394679e-01, -1.408663955475020e-01, -1.790277461340658e-01, -1.790277461340658e-01, -1.228334158071818e-02, -1.286576590324506e-02, -5.162631995680709e-02, -5.893038865600849e-03, -1.273181809313884e-02, -1.273181809313884e-02, -3.825162658059223e+00, -3.824899275768322e+00, -3.825139926379152e+00, -3.824935038300695e+00, -3.825021115610373e+00, -3.825021115610373e+00, -1.618757360511453e+00, -1.625977767559706e+00, -1.619859043007641e+00, -1.625473438832080e+00, -1.622244689658000e+00, -1.622244689658000e+00, -4.721819897540228e-01, -5.032673850552334e-01, -4.505638566724130e-01, -4.624662629768089e-01, -4.874466438403822e-01, -4.874466438403822e-01, -1.095113605250951e-01, -1.877477231731355e-01, -1.078534943180699e-01, -1.429850698327327e+00, -1.230599344964895e-01, -1.230599344964895e-01, -5.684936675197911e-03, -6.497053534181709e-03, -4.869800755398483e-03, -7.079211726543612e-02, -5.919942253487117e-03, -5.919942253487118e-03, -4.804945547681654e-01, -4.777152953734733e-01, -4.786087213875734e-01, -4.793738979923816e-01, -4.789822970217146e-01, -4.789822970217145e-01, -4.665219617944912e-01, -4.214624782412638e-01, -4.319449052851887e-01, -4.430639798654689e-01, -4.371273654252590e-01, -4.371273654252590e-01, -5.257369663698144e-01, -2.262019459828735e-01, -2.567224880123527e-01, -3.048303214549837e-01, -2.791430045188997e-01, -2.791430045188996e-01, -3.842826688822352e-01, -4.796682781234713e-02, -6.420197831905247e-02, -2.853418928318773e-01, -9.009860735784193e-02, -9.009860735784193e-02, -1.439384073770361e-02, -1.778578266610985e-03, -3.378830857560046e-03, -8.601753087421322e-02, -5.031198826356588e-03, -5.031198826356581e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_case21_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.885386525841823e+01, -1.885393440311667e+01, -1.885424224110162e+01, -1.885310999285858e+01, -1.885390172825653e+01, -1.885390172825653e+01, -3.104433986638233e+00, -3.104475193501834e+00, -3.105731657523502e+00, -3.104202551027413e+00, -3.104467946971210e+00, -3.104467946971210e+00, -6.307750451226802e-01, -6.296082499771296e-01, -6.016474760210611e-01, -6.064257212261617e-01, -6.303514922188277e-01, -6.303514922188277e-01, -2.000943093161999e-01, -2.017719861528385e-01, -7.638720304374563e-01, -1.607704994070010e-01, -2.005862203564813e-01, -2.005862203564813e-01, -1.637700216737983e-02, -1.715195173119033e-02, -6.708467398346817e-02, -7.859218980704324e-03, -1.697372247418144e-02, -1.697372247418144e-02, -4.759674710662097e+00, -4.762171479210640e+00, -4.759928793690371e+00, -4.761870190813184e+00, -4.760956717904331e+00, -4.760956717904331e+00, -1.679817399298674e+00, -1.692524312461592e+00, -1.673585244817480e+00, -1.683298663360810e+00, -1.697208289914607e+00, -1.697208289914607e+00, -5.870259893366550e-01, -6.564989429907935e-01, -5.578232688700395e-01, -5.992429169109682e-01, -6.115809269737077e-01, -6.115809269737077e-01, -1.308866556133640e-01, -2.089144938735971e-01, -1.286292637504771e-01, -1.866147835487714e+00, -1.430716371759562e-01, -1.430716371759562e-01, -7.581695101270395e-03, -8.664929011137853e-03, -6.495340814988955e-03, -8.938364608891455e-02, -7.895571199761427e-03, -7.895571199761428e-03, -6.283772062506716e-01, -6.237019811180821e-01, -6.256823136021239e-01, -6.269949839832341e-01, -6.263641657780561e-01, -6.263641657780559e-01, -6.096825485267071e-01, -4.982337031162232e-01, -5.327456112213527e-01, -5.650649174333763e-01, -5.488520824569815e-01, -5.488520824569815e-01, -6.852160485947857e-01, -2.478254912350457e-01, -2.810390630288765e-01, -3.571835776824857e-01, -3.128511912660320e-01, -3.128511912660322e-01, -4.519812574517635e-01, -6.270367705229328e-02, -8.219773374084281e-02, -3.478575280957173e-01, -1.097265465558439e-01, -1.097265465558438e-01, -1.918444477061067e-02, -2.371607040780774e-03, -4.505860344641068e-03, -1.049211762251177e-01, -6.710365657816774e-03, -6.710365657816766e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_case21_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_case21", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.410527631236723e-09, -5.410485038147071e-09, -5.410242925532504e-09, -5.410941424526052e-09, -5.410505604598118e-09, -5.410505604598118e-09, -6.537370540561454e-06, -6.537274817660833e-06, -6.533583748137457e-06, -6.534590155532302e-06, -6.537214381556819e-06, -6.537214381556819e-06, -3.429807757129064e-03, -3.444158791898257e-03, -3.697111267177047e-03, -3.602851531124475e-03, -3.435067598901788e-03, -3.435067598901788e-03, -2.650211362546206e-01, -2.648848386168694e-01, -1.683295365523396e-03, -3.770310427787960e-01, -2.651611027373477e-01, -2.651611027373477e-01, 1.242831456158604e-01, 6.654918060714822e-02, -6.380693414388932e-01, 7.266372502273742e-01, 8.294669659715553e-02, 8.294669659715553e-02, -1.300367881556142e-06, -1.297469220126829e-06, -1.300074763515634e-06, -1.297821153046692e-06, -1.298882759587091e-06, -1.298882759587091e-06, -5.425375123305569e-05, -5.321850286312979e-05, -5.420675891513292e-05, -5.341804390014895e-05, -5.354384626743224e-05, -5.354384626743224e-05, -4.524165803713906e-03, -3.719196502339759e-04, -5.629384265795588e-03, -1.816135517543443e-03, -3.661987014400000e-03, -3.661987014400000e-03, -4.539416181458950e-01, -1.626114816057589e-01, -5.118837637030867e-01, -2.818591268154508e-05, -4.731221778864485e-01, -4.731221778864485e-01, 8.028075916333494e-01, 6.848351007133290e-01, 2.692200292551621e+00, -7.208573479233071e-01, 1.135299742917777e+00, 1.135299742916984e+00, 2.021364695369585e-03, -6.739223378602955e-06, 6.550902982835177e-04, 1.214561594029118e-03, 9.293443594218044e-04, 9.293443594218002e-04, 2.785430177655487e-03, -9.312146325467627e-03, -6.844374153485147e-03, -4.138264152391828e-03, -5.563716500017427e-03, -5.563716500017427e-03, -5.401269812862501e-04, -9.906021985663398e-02, -7.235229050219295e-02, -3.543706385460369e-02, -5.502724609246003e-02, -5.502724609245983e-02, -1.374296694249341e-02, -5.187439759470314e-01, -6.036859973171471e-01, -3.891798685603935e-02, -7.280285362382574e-01, -7.280285362382607e-01, -5.660834525049399e-02, 2.966217613570358e+00, 1.845432551423656e+00, -8.710011235603903e-01, 1.967684571274114e+00, 1.967684571273036e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
