
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_o3lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.865222977386966e+01, -1.865227033972279e+01, -1.865248470748672e+01, -1.865188048616868e+01, -1.865219224332500e+01, -1.865219224332500e+01, -3.117584455907490e+00, -3.117569978378125e+00, -3.117311272104800e+00, -3.118343548297542e+00, -3.117641137734584e+00, -3.117641137734584e+00, -6.469530022867599e-01, -6.467598261283146e-01, -6.447538970626090e-01, -6.490713963939768e-01, -6.517200186979635e-01, -6.517200186979635e-01, -2.088050507661536e-01, -2.093507649052956e-01, -7.455212552149100e-01, -1.829948099613375e-01, -2.023629171024244e-01, -2.023629171024242e-01, -1.374736438431936e-02, -1.446479359021382e-02, -7.109189158543038e-02, -7.973074026609232e-03, -1.060258646109321e-02, -1.060258646109321e-02, -4.576817965017010e+00, -4.577238123163923e+00, -4.576842303435353e+00, -4.577213091741721e+00, -4.577027797098133e+00, -4.577027797098133e+00, -1.885637426172725e+00, -1.894131504621629e+00, -1.887293355391950e+00, -1.894644700300531e+00, -1.889739282937146e+00, -1.889739282937146e+00, -5.552809450949285e-01, -5.956400724780412e-01, -5.173547716881426e-01, -5.310193616742209e-01, -5.632752192797357e-01, -5.632752192797358e-01, -1.426429330607075e-01, -2.269056951066118e-01, -1.345541634907212e-01, -1.715786641527175e+00, -1.590517140364557e-01, -1.590517140364557e-01, -6.164972829841304e-03, -7.795417199192299e-03, -5.975079671841690e-03, -1.005320179197097e-01, -7.352954832535174e-03, -7.352954832535175e-03, -5.531081985222771e-01, -5.500676889097283e-01, -5.510843874757031e-01, -5.519648418701623e-01, -5.515191735084196e-01, -5.515191735084196e-01, -5.389746484127592e-01, -4.800383394613008e-01, -4.932661783658892e-01, -5.092404907687904e-01, -5.006480528151243e-01, -5.006480528151243e-01, -6.230684097186492e-01, -2.653753908917649e-01, -2.941112902278655e-01, -3.470345052171027e-01, -3.164580267193479e-01, -3.164580267193479e-01, -4.441321976176891e-01, -6.863001233599883e-02, -8.540177853561765e-02, -3.295492362452765e-01, -1.203589100640853e-01, -1.203589100640853e-01, -1.930829596364650e-02, -2.098588832428856e-03, -4.394280812719649e-03, -1.149680965772739e-01, -6.779248407411862e-03, -6.779248407411855e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_o3lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.383435112098828e+01, -2.383432419332316e+01, -2.383447032975995e+01, -2.383441105387618e+01, -2.383481112975484e+01, -2.383490918734192e+01, -2.383346217577828e+01, -2.383319372191912e+01, -2.383442159818763e+01, -2.383385099766500e+01, -2.383442159818763e+01, -2.383385099766500e+01, -3.862084105187143e+00, -3.862426242513199e+00, -3.862147942345648e+00, -3.862507972089587e+00, -3.863876386323181e+00, -3.864326090360489e+00, -3.861494249113282e+00, -3.861975657921404e+00, -3.861341047676298e+00, -3.863525525450833e+00, -3.861341047676298e+00, -3.863525525450833e+00, -7.465361594276525e-01, -7.535812127251434e-01, -7.436781678500926e-01, -7.523333662093787e-01, -7.013455583167846e-01, -6.893482415616040e-01, -7.004837237500091e-01, -7.044302255248264e-01, -7.575267132280080e-01, -6.406358379151799e-01, -7.575267132280080e-01, -6.406358379151799e-01, -1.792353863974847e-01, -1.793847803893393e-01, -1.805417569634326e-01, -1.816453101048088e-01, -8.572733963560482e-01, -9.001091006955753e-01, -1.740278590986989e-01, -1.735230026996666e-01, -1.516351275159945e-01, -2.194297184056271e-01, -1.516351275159944e-01, -2.194297184056269e-01, -1.792931699051730e-02, -1.851687016111062e-02, -1.880960907581300e-02, -1.950935291795178e-02, -9.233152514047201e-02, -9.522016801310765e-02, -1.065065282250780e-02, -1.055682120655545e-02, -1.468640012452594e-02, -1.086537169374805e-02, -1.468640012452592e-02, -1.086537169374807e-02, -5.945289664395231e+00, -5.943874242589983e+00, -5.947844961192621e+00, -5.946347121824697e+00, -5.945430180341006e+00, -5.943960089610749e+00, -5.947625651407138e+00, -5.946203966179213e+00, -5.946599850782840e+00, -5.945118275058091e+00, -5.946599850782840e+00, -5.945118275058091e+00, -1.937359314263249e+00, -1.937253219512261e+00, -1.960831676165038e+00, -1.960170353914821e+00, -1.900587531332059e+00, -1.910329816329434e+00, -1.920975476946352e+00, -1.930780617451194e+00, -1.976868526164528e+00, -1.954309035016864e+00, -1.976868526164528e+00, -1.954309035016864e+00, -7.040395071479877e-01, -7.028022420598599e-01, -7.829142277756169e-01, -7.832525794888344e-01, -6.385101506193459e-01, -6.582323980292512e-01, -6.877961370503922e-01, -7.042193935860417e-01, -7.317493596809977e-01, -7.040044992882444e-01, -7.317493596809977e-01, -7.040044992882445e-01, -1.858017458519083e-01, -1.842134813814209e-01, -2.032337124128340e-01, -2.028126822584149e-01, -1.786518503072699e-01, -1.777356982889013e-01, -2.263100632602010e+00, -2.262204994159080e+00, -1.801286745711249e-01, -1.595499734043102e-01, -1.801286745711249e-01, -1.595499734043102e-01, -8.115508650767322e-03, -8.281658678804007e-03, -1.032637674074301e-02, -1.040888879423176e-02, -7.817538952728171e-03, -8.054908037042369e-03, -1.373058448418998e-01, -1.383372580605521e-01, -8.642018825140790e-03, -1.021550893748996e-02, -8.642018825140790e-03, -1.021550893748995e-02, -7.274204170843495e-01, -7.294998226693640e-01, -7.223023495426640e-01, -7.244200553870297e-01, -7.242980612221568e-01, -7.264064129672568e-01, -7.257950008117348e-01, -7.278774283778884e-01, -7.250649641220670e-01, -7.271591875341091e-01, -7.250649641220670e-01, -7.271591875341091e-01, -7.087967055782137e-01, -7.105249682729842e-01, -5.629596075094514e-01, -5.653943131843702e-01, -6.131571837012377e-01, -6.157554672402357e-01, -6.581270463362583e-01, -6.599132255057677e-01, -6.364609300449935e-01, -6.383314237820972e-01, -6.364609300449935e-01, -6.383314237820972e-01, -8.180687175675614e-01, -8.192207836121144e-01, -2.273247413651385e-01, -2.272020088381453e-01, -2.663589887092079e-01, -2.680043318759194e-01, -3.986625598964204e-01, -4.004763984076004e-01, -3.241770044320808e-01, -3.245504178830573e-01, -3.241770044320806e-01, -3.245504178830573e-01, -5.186409242671470e-01, -5.224095708809370e-01, -9.042640613503393e-02, -9.078289876627765e-02, -1.180729495673301e-01, -1.199380023699707e-01, -3.993390082607888e-01, -4.043386019712063e-01, -1.556104958163515e-01, -1.483598077839804e-01, -1.556104958163514e-01, -1.483598077839803e-01, -2.532574717740641e-02, -2.580823180429391e-02, -2.793620515647002e-03, -2.796796924562146e-03, -5.746622886993487e-03, -5.934625969365337e-03, -1.482064734876280e-01, -1.487813630530772e-01, -8.096590200157355e-03, -9.407307148752646e-03, -8.096590200157350e-03, -9.407307148752641e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_o3lyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.119469077696733e-09, 1.185558425401183e-11, -5.119484429424879e-09, -5.119275112674296e-09, 1.185541524986055e-11, -5.119343143690749e-09, -5.118810766246909e-09, 1.185461176244829e-11, -5.118636720309597e-09, -5.121003201401292e-09, 1.185712748825859e-11, -5.121425766657997e-09, -5.119348622736400e-09, 1.185581677785285e-11, -5.120424592534502e-09, -5.119348622736400e-09, 1.185581677785285e-11, -5.120424592534502e-09, -8.896095742708154e-06, 1.541225587214213e-07, -8.889022735067624e-06, -8.895051361948264e-06, 1.541207867069750e-07, -8.887560310718465e-06, -8.865379090881928e-06, 1.540597121148743e-07, -8.857496548813269e-06, -8.910936183027006e-06, 1.540100170374724e-07, -8.902275791739644e-06, -8.904101636096723e-06, 1.541018002171290e-07, -8.876336468357665e-06, -8.904101636096723e-06, 1.541018002171290e-07, -8.876336468357665e-06, -8.035458615339877e-03, 9.270722799357577e-04, -7.744562492596185e-03, -8.148140554133898e-03, 9.324368204854546e-04, -7.792365409300562e-03, -9.718557196709277e-03, 1.069807695322527e-03, -1.015584132452735e-02, -9.650217309602119e-03, 1.024962868820697e-03, -9.511858015511290e-03, -7.482442638333390e-03, 1.115015704194649e-03, -1.153039195790192e-02, -7.482442638333390e-03, 1.115015704194649e-03, -1.153039195790192e-02, -1.716547744310332e+00, 4.870430005817489e-01, -1.610834998412131e+00, -1.693786373695974e+00, 4.601020753985704e-01, -1.561261546644872e+00, -4.540247445652948e-03, 4.311409659161154e-04, -3.682721015254305e-03, -2.446702560786989e+00, 1.357480112752327e+00, -2.406487661968084e+00, -1.809788661622026e+00, 1.929431429665579e+00, -3.473997538310452e+00, -1.809788661622026e+00, 1.929431429665580e+00, -3.473997538310456e+00, -1.142008089844324e+01, 9.006507517295055e-08, -1.130516443962924e+01, -1.203224825961187e+01, 3.695673560289628e-07, -1.197007261948337e+01, 1.961220725262067e+00, 1.489288214502471e+01, 9.024123789585954e-01, -1.046248263954820e+01, 3.350885389426989e-17, -1.017851914484198e+01, -1.140172793457642e+01, 8.673770695270562e-13, -2.893306303433424e+01, -1.140172793457712e+01, 8.673770695270562e-13, -2.893306303429630e+01, -1.112068858404474e-06, 1.809299517292379e-08, -1.113278138760227e-06, -1.103844409113642e-06, 1.807545599629114e-08, -1.105318363614963e-06, -1.111641477169427e-06, 1.809212347410638e-08, -1.113023521167410e-06, -1.104581207716505e-06, 1.807663525628042e-08, -1.105795086572658e-06, -1.107833850126464e-06, 1.808413833346515e-08, -1.109275508241159e-06, -1.107833850126464e-06, 1.808413833346515e-08, -1.109275508241159e-06, -1.320726908153644e-04, 3.324691278596461e-06, -1.320977209958438e-04, -1.275421227272915e-04, 3.198712461362903e-06, -1.276800503757037e-04, -1.371772465620161e-04, 3.420793545345939e-06, -1.358445916661567e-04, -1.331634534143023e-04, 3.305373228471352e-06, -1.318150425817698e-04, -1.258001286057965e-04, 3.212781934568574e-06, -1.290848483319867e-04, -1.258001286057965e-04, 3.212781934568574e-06, -1.290848483319867e-04, -8.638010104654249e-03, 1.825453754003035e-03, -8.667063584810323e-03, -1.509927175130251e-03, 1.201192443406202e-03, -1.444909697133090e-03, -1.402510552631215e-02, 2.748455987594796e-03, -1.206722403138166e-02, -3.424988298928947e-03, 2.257366444272562e-03, -3.713495705834780e-03, -6.963615729713037e-03, 1.758833807333089e-03, -8.008320148836894e-03, -6.963615729713035e-03, 1.758833807333089e-03, -8.008320148836892e-03, -1.599199996809574e+00, 4.345108400965211e+00, -1.781241073069302e+00, -1.111539471818277e+00, 4.801730708975269e-01, -1.106747735684084e+00, -1.285211616184812e+00, 5.403210563745951e+00, -1.901781343433511e+00, -2.448879594941918e-05, 3.686127133635989e-06, -2.445392622838270e-05, -2.526891327850316e+00, 2.723523603638179e+00, -3.695842808783081e+00, -2.526891327850316e+00, 2.723523603638179e+00, -3.695842808783081e+00, -1.468790947497484e+01, 4.391412325733211e-24, -1.271289586462870e+01, -1.264700927143216e+01, 9.952946977518016e-18, -1.167670255121857e+01, -7.203604113618162e+01, 4.581716902253058e-25, -8.013325711731483e+01, -4.718715223868104e-01, 1.218782134268272e+01, -3.544038415579535e-01, -3.582356873457069e+01, 7.784361458058929e-20, -3.518461008426048e+01, -3.582356873455397e+01, 7.784361458058927e-20, -3.518461008427641e+01, 2.837748667023965e-04, 1.781738515145262e-03, 2.544801170724392e-04, -1.826876502063515e-03, 1.834071765417697e-03, -1.801043555460688e-03, -1.099920891551540e-03, 1.815455511527695e-03, -1.088407539783995e-03, -4.811549742122120e-04, 1.800280877020669e-03, -4.944260985515189e-04, -7.915993888537005e-04, 1.807857598825492e-03, -7.926753184941238e-04, -7.915993888537005e-04, 1.807857598825492e-03, -7.926753184941238e-04, 1.094889336201257e-03, 2.045475405717882e-03, 1.028037015807091e-03, -2.630179169964852e-02, 4.372269458584065e-03, -2.581775306814450e-02, -1.695920740946650e-02, 3.481409492639727e-03, -1.656327889135744e-02, -8.618096907881156e-03, 2.801304754186088e-03, -8.503887820382451e-03, -1.261755532781736e-02, 3.126795900343610e-03, -1.244059037112654e-02, -1.261755532781736e-02, 3.126795900343610e-03, -1.244059037112654e-02, -1.478991236412787e-03, 9.448281971276932e-04, -1.399919841724771e-03, -6.168369970627803e-01, 1.841168313207797e-01, -6.118249202895858e-01, -3.671177790157024e-01, 8.322264776862785e-02, -3.592456260958288e-01, -1.107778943533301e-01, 2.335777938713061e-02, -1.085331296004833e-01, -2.167514594165059e-01, 4.455605659310826e-02, -2.167934639029869e-01, -2.167514594165061e-01, 4.455605659310827e-02, -2.167934639029870e-01, -3.707594643433811e-02, 6.561578635696272e-03, -3.593303595831738e-02, 1.741058217181859e+00, 1.430892164753827e+01, 1.615963070795174e+00, 2.908407602809929e+00, 1.521830626896655e+01, 1.965104649379829e+00, -1.095798693762539e-01, 2.777420884472484e-02, -1.026149581072540e-01, -2.145081135944963e+00, 7.858164809404253e+00, -4.282547405483119e+00, -2.145081135944968e+00, 7.858164809404253e+00, -4.282547405483148e+00, -9.047599304629772e+00, 2.768157770177566e-04, -9.235876305241327e+00, -4.519461889589112e+01, 2.308592770889069e-85, -8.005496847480944e+01, -2.789239481048888e+01, 1.346473245321597e-36, -2.969306987171376e+01, -2.750872361997828e+00, 8.933405596013928e+00, -2.911748336094131e+00, -7.385520946749445e+01, 6.624839855865914e-22, -3.652721307065185e+01, -7.385520946755027e+01, 6.624839855865567e-22, -3.652721307065018e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
