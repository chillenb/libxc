
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbeh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.576035554917373e+01, -1.576037695970576e+01, -1.576052160435379e+01, -1.576020204356718e+01, -1.576036245448692e+01, -1.576036245448692e+01, -2.646560967735580e+00, -2.646537616497751e+00, -2.646061966958372e+00, -2.647384299207965e+00, -2.646595983869004e+00, -2.646595983869004e+00, -5.504974676278040e-01, -5.502798875763543e-01, -5.464249833338127e-01, -5.502365005364994e-01, -5.502919675311649e-01, -5.502919675311649e-01, -1.678910667382246e-01, -1.692774127113487e-01, -6.340711126782299e-01, -1.387495032412485e-01, -1.603531595546116e-01, -1.603531595546115e-01, -7.579453057546732e-03, -7.981124736825586e-03, -4.333074554833185e-02, -4.371810283078882e-03, -6.100947809067186e-03, -6.100947809067186e-03, -3.834855120784476e+00, -3.834603386123896e+00, -3.834850589595829e+00, -3.834628218661186e+00, -3.834723430549558e+00, -3.834723430549558e+00, -1.606470159448326e+00, -1.614291045499992e+00, -1.606509716864565e+00, -1.613403081014554e+00, -1.610803224546272e+00, -1.610803224546272e+00, -4.743709894394453e-01, -5.080800430063480e-01, -4.425994691283709e-01, -4.544992503446869e-01, -4.810006865214402e-01, -4.810006865214403e-01, -1.047870891231149e-01, -1.767167025757806e-01, -9.793749668020305e-02, -1.432007190378669e+00, -1.175856746584306e-01, -1.175856746584306e-01, -3.375368594671305e-03, -4.273680361779332e-03, -3.272529083794036e-03, -6.824602002094352e-02, -4.110705200797987e-03, -4.110705200797992e-03, -4.735483365862984e-01, -4.704670456293414e-01, -4.714626458926125e-01, -4.723527547344587e-01, -4.718989787535546e-01, -4.718989787535546e-01, -4.621284573016686e-01, -4.100568735265366e-01, -4.223867700586652e-01, -4.361797522951900e-01, -4.288443761307947e-01, -4.288443761307947e-01, -5.306949680075436e-01, -2.126382237946789e-01, -2.429224767137527e-01, -2.977715201759657e-01, -2.677258338907407e-01, -2.677258338907407e-01, -3.798046953764831e-01, -4.149791542702756e-02, -5.593720646640502e-02, -2.850159371201268e-01, -8.431909531625550e-02, -8.431909531625555e-02, -1.067895285110670e-02, -1.142450076735267e-03, -2.402421057137595e-03, -7.979401718089499e-02, -3.775089168986185e-03, -3.775089168986177e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbeh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.898425140456290e+01, -1.898422932207855e+01, -1.898433910779800e+01, -1.898429338889640e+01, -1.898459726749826e+01, -1.898466770695129e+01, -1.898360259875388e+01, -1.898340522751809e+01, -1.898430052017413e+01, -1.898389600159051e+01, -1.898430052017413e+01, -1.898389600159051e+01, -3.136724418677454e+00, -3.136864329739824e+00, -3.136762463341805e+00, -3.136908173628851e+00, -3.137739911056789e+00, -3.137973951546821e+00, -3.136538674342287e+00, -3.136777260549417e+00, -3.136175228403434e+00, -3.137657665430921e+00, -3.136175228403434e+00, -3.137657665430921e+00, -6.466784976607086e-01, -6.500037769162977e-01, -6.450833891644892e-01, -6.491380372660661e-01, -6.196486439235550e-01, -6.149703410942490e-01, -6.218032957332850e-01, -6.233203639396940e-01, -6.466489288397449e-01, -6.023775323125713e-01, -6.466489288397449e-01, -6.023775323125713e-01, -1.784764042048179e-01, -1.810039189127738e-01, -1.809270008635465e-01, -1.840373286688503e-01, -7.378787813268353e-01, -7.640228004533888e-01, -1.457144221217502e-01, -1.468283168074735e-01, -1.665868762071021e-01, -1.330416141680313e-01, -1.665868762071020e-01, -1.330416141680312e-01, -9.761323607424311e-03, -1.037033800709700e-02, -1.022645828096211e-02, -1.095201693743239e-02, -5.452441322638128e-02, -5.726919604208632e-02, -5.874438136943402e-03, -5.776712911123418e-03, -8.711098496735759e-03, -4.960475745362634e-03, -8.711098496735755e-03, -4.960475745362633e-03, -4.779940498793041e+00, -4.778808793953304e+00, -4.782233248819792e+00, -4.781030945848482e+00, -4.780064122094243e+00, -4.778886103820335e+00, -4.782036596947882e+00, -4.780899500138501e+00, -4.781114862489358e+00, -4.779926315731386e+00, -4.781114862489358e+00, -4.779926315731386e+00, -1.713110796020220e+00, -1.713028320569410e+00, -1.727267178423007e+00, -1.726808448965873e+00, -1.698311003543092e+00, -1.701674982720648e+00, -1.710398163355248e+00, -1.713940163601301e+00, -1.731799776805877e+00, -1.722871673655487e+00, -1.731799776805877e+00, -1.722871673655487e+00, -5.991824101485480e-01, -5.981473671002326e-01, -6.640054360024751e-01, -6.645077210801509e-01, -5.469930795344460e-01, -5.625853768163175e-01, -5.861202397198741e-01, -5.986964780474109e-01, -6.212097989602700e-01, -5.986625296441580e-01, -6.212097989602702e-01, -5.986625296441581e-01, -1.195173265930859e-01, -1.198085667371450e-01, -1.827887053510945e-01, -1.831939064136142e-01, -1.114327603690918e-01, -1.148897624084183e-01, -1.869011159852709e+00, -1.868341359779210e+00, -1.284762911677457e-01, -1.266254859343774e-01, -1.284762911677457e-01, -1.266254859343774e-01, -4.407820976836566e-03, -4.580785089195298e-03, -5.652184219550900e-03, -5.737764547868431e-03, -4.225692483860647e-03, -4.474490913756446e-03, -8.350063241237314e-02, -8.407779085144243e-02, -4.316831353858459e-03, -5.925305324227931e-03, -4.316831353858466e-03, -5.925305324227939e-03, -6.187176985068185e-01, -6.204328555360895e-01, -6.143015698913754e-01, -6.160885555540587e-01, -6.160874263544081e-01, -6.178685336384001e-01, -6.174035386611507e-01, -6.191276953190583e-01, -6.167683027391833e-01, -6.185201794359854e-01, -6.167683027391833e-01, -6.185201794359854e-01, -6.032031762437245e-01, -6.045529230333978e-01, -4.924289774556046e-01, -4.941582320083558e-01, -5.268792306959253e-01, -5.288367444257135e-01, -5.610524735345680e-01, -5.625120772810301e-01, -5.440712149490904e-01, -5.455777571614681e-01, -5.440712149490904e-01, -5.455777571614681e-01, -6.926817169796824e-01, -6.939410640856151e-01, -2.208378062080037e-01, -2.213967549855462e-01, -2.618308900633777e-01, -2.631429218934451e-01, -3.590472188865680e-01, -3.604180981496874e-01, -3.062312331137773e-01, -3.061664260458730e-01, -3.062312331137772e-01, -3.061664260458728e-01, -4.564626196430404e-01, -4.590208856862109e-01, -5.368174770084051e-02, -5.401661795772272e-02, -6.997758266293019e-02, -7.188870122417486e-02, -3.547117370668629e-01, -3.584185849079175e-01, -9.768653719497791e-02, -9.899157812426995e-02, -9.768653719497794e-02, -9.899157812426998e-02, -1.394324282816405e-02, -1.444486536143978e-02, -1.521444598793090e-03, -1.524879087496868e-03, -3.095206231089204e-03, -3.291852314612840e-03, -9.383665955408058e-02, -9.493938298873063e-02, -4.088250196503403e-03, -5.431854359695096e-03, -4.088250196503396e-03, -5.431854359695089e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbeh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.038407590961289e-08, 3.855567579455844e-10, -1.038413448160176e-08, -1.038398702375526e-08, 3.855637563905792e-10, -1.038406892135187e-08, -1.038361346194509e-08, 3.855734091993355e-10, -1.038356248178468e-08, -1.038463202488567e-08, 3.854697494807899e-10, -1.038484573225987e-08, -1.038404463412608e-08, 3.855271085313426e-10, -1.038425449638484e-08, -1.038404463412608e-08, 3.855271085313426e-10, -1.038425449638484e-08, -1.319110012290467e-05, 2.158879157656427e-06, -1.319540260547577e-05, -1.319114071766863e-05, 2.159323527660124e-06, -1.319577792307317e-05, -1.319586555764847e-05, 2.169371669283230e-06, -1.319808774717065e-05, -1.317946784452412e-05, 2.149943255801801e-06, -1.318254265086292e-05, -1.319912046032661e-05, 2.159156568071321e-06, -1.318538610118185e-05, -1.319912046032661e-05, 2.159156568071321e-06, -1.318538610118185e-05, -7.301998184786187e-03, 3.586683876242116e-03, -7.306136156386906e-03, -7.320878955918399e-03, 3.559577090514688e-03, -7.326488892762793e-03, -7.717042148477935e-03, 2.876045381924161e-03, -7.685110314210259e-03, -7.478326675534221e-03, 2.810968523930000e-03, -7.492231920342868e-03, -7.611131069970767e-03, 2.852692094259074e-03, -7.106933111212885e-03, -7.611131069970767e-03, 2.852692094259074e-03, -7.106933111212885e-03, -8.106772608347914e-01, 3.108902575321890e-01, -7.524154588936482e-01, -8.064056015264061e-01, 3.280826843588528e-01, -7.351777811141147e-01, -4.298345496316839e-03, 1.940414170439823e-03, -3.932340387443720e-03, -1.167406368494903e+00, 2.258949661124237e-01, -1.127074407823083e+00, -7.388350013139374e-01, 1.882246441728870e-01, -1.723897561463243e+00, -7.388350013139372e-01, 1.882246441728873e-01, -1.723897561463245e+00, -3.671643265922790e+00, 8.471332723898200e-03, -3.634798221853306e+00, -3.868098139687893e+00, 9.964515393423459e-03, -3.848285888146977e+00, -2.120219669378891e+00, 5.126941006152715e-02, -2.131676786747714e+00, -3.365439043900960e+00, 3.008683449168684e-03, -3.274039676129235e+00, -3.667523324634614e+00, 4.414566270491809e-03, -9.308966029001070e+00, -3.667523324634171e+00, 4.414566270088269e-03, -9.308966029000642e+00, -2.829634704008845e-06, 5.666948009101149e-07, -2.832511382186522e-06, -2.828087124365423e-06, 5.704413223836728e-07, -2.830954230031417e-06, -2.829554001098309e-06, 5.668443577206054e-07, -2.832430249405118e-06, -2.828180293633857e-06, 5.701514261968389e-07, -2.831064177506776e-06, -2.828868124738395e-06, 5.686004611431787e-07, -2.831721152301467e-06, -2.828868124738395e-06, 5.686004611431787e-07, -2.831721152301467e-06, -1.038773064896416e-04, 1.221811741084532e-05, -1.038966879765408e-04, -1.017318518203008e-04, 1.218856108878283e-05, -1.018250906556564e-04, -1.040645227341602e-04, 1.161795009824474e-05, -1.041505004230115e-04, -1.022431398730680e-04, 1.159619612758267e-05, -1.022720225455664e-04, -1.024946974836527e-04, 1.250231835492394e-05, -1.026664894511922e-04, -1.024946974836527e-04, 1.250231835492394e-05, -1.026664894511922e-04, -1.208758946848274e-02, 1.180452397706796e-02, -1.228796560419869e-02, -7.266551801529356e-03, 1.489938286408802e-02, -7.260476612649645e-03, -1.805556351560008e-02, 1.535577972946644e-02, -1.497730250157843e-02, -1.378499660607488e-02, 2.278859644535717e-02, -1.065862268721076e-02, -9.812228626205108e-03, 1.179162458306085e-02, -1.324493952727300e-02, -9.812228626205108e-03, 1.179162458306085e-02, -1.324493952727300e-02, -1.394192675307184e+00, 1.261488607621168e-01, -1.417334558040265e+00, -5.285679124283252e-01, 1.139695105238702e-01, -5.230087685776168e-01, -1.583235725131052e+00, 1.279112469154852e-01, -1.532372011886295e+00, -1.187642643503802e-04, 1.207887057881010e-04, -1.190996070003998e-04, -1.459909338635018e+00, 2.409472748596690e-01, -1.753171902253063e+00, -1.459909338635018e+00, 2.409472748596690e-01, -1.753171902253063e+00, -4.725091920848737e+00, 2.933546798259037e-03, -4.089535407420021e+00, -4.068106837636049e+00, 3.699144102256803e-03, -3.755846563445512e+00, -2.316449320220539e+01, 3.685108437354808e-02, -2.577107973676467e+01, -2.391995517360887e+00, 1.250822448857004e-01, -2.302621462521804e+00, -1.152137042926281e+01, 1.410360645889085e-02, -1.131683449637586e+01, -1.152137042925949e+01, 1.410360646869916e-02, -1.131683449637256e+01, -8.328309212762806e-03, 2.514346072918196e-02, -8.018336396879176e-03, -9.981279112613782e-03, 2.157065992117518e-02, -9.678445072939194e-03, -9.460870058982959e-03, 2.270457728491302e-02, -9.155872620328008e-03, -8.983632953173205e-03, 2.373865089872573e-02, -8.675905691963488e-03, -9.228066383220671e-03, 2.321019190891285e-02, -8.921648069879759e-03, -9.228066383220671e-03, 2.321019190891285e-02, -8.921648069879759e-03, -8.624480798431873e-03, 2.977269840520045e-02, -8.317770712669065e-03, -2.386082441246573e-02, 1.592277215307748e-02, -2.343911983013128e-02, -2.019319284994914e-02, 1.838749842245184e-02, -1.978428964080799e-02, -1.618508180635157e-02, 2.169730037966074e-02, -1.583578177955731e-02, -1.828198938209048e-02, 1.995497716545398e-02, -1.790142919454209e-02, -1.828198938209048e-02, 1.995497716545398e-02, -1.790142919454209e-02, -6.233422139139346e-03, 1.183264719377924e-02, -6.180747513340479e-03, -2.999348858494275e-01, 8.498631964250428e-02, -2.962832429026218e-01, -1.947245525867703e-01, 7.821972418059023e-02, -1.909560391731371e-01, -8.739372341914711e-02, 6.964082434152352e-02, -8.518204341516698e-02, -1.339541522080519e-01, 7.796350422599263e-02, -1.349240099704540e-01, -1.339541522080520e-01, 7.796350422599266e-02, -1.349240099704542e-01, -3.265443973099608e-02, 2.285950305464996e-02, -3.178988802848225e-02, -1.942147512125517e+00, 4.213028450134424e-02, -1.944400848399807e+00, -1.897654145920216e+00, 6.458066222247318e-02, -1.938506632680563e+00, -1.036368909212257e-01, 1.099497136873529e-01, -9.601700257651924e-02, -2.318009387340803e+00, 2.182010199987041e-01, -2.718577362141402e+00, -2.318009387340804e+00, 2.182010199987039e-01, -2.718577362141402e+00, -2.907761052990836e+00, 1.056259116938041e-02, -2.968526867831103e+00, -1.454074254535643e+01, 4.011531506685853e-03, -2.575825773214008e+01, -8.973030125955622e+00, 5.020763908060611e-03, -9.552552303386776e+00, -2.609782556820365e+00, 2.002688123716920e-01, -2.551873964097890e+00, -2.375918272624249e+01, 1.800188742308661e-02, -1.174664139980532e+01, -2.375918272623885e+01, 1.800188743452388e-02, -1.174664139980168e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
