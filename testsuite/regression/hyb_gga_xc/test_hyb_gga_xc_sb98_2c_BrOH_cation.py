
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_sb98_2c_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.635616828626328e+01, -1.635619645598151e+01, -1.635636321405093e+01, -1.635594325823153e+01, -1.635615740094440e+01, -1.635615740094440e+01, -2.760503323435202e+00, -2.760483768868869e+00, -2.760098371031312e+00, -2.761281971026249e+00, -2.760545198032225e+00, -2.760545198032225e+00, -5.794740227356117e-01, -5.793075576596819e-01, -5.769023570317516e-01, -5.808013623863191e-01, -5.822075791720958e-01, -5.822075791720958e-01, -1.804788646099894e-01, -1.818309749272191e-01, -6.666266248400915e-01, -1.494608294133408e-01, -1.659680367678059e-01, -1.659680367678059e-01, -5.862053381377926e-03, -6.218521895025956e-03, -4.175457213880839e-02, -3.196722680064558e-03, -6.840191141368628e-03, -6.840191141368629e-03, -4.013709259941032e+00, -4.013679324139569e+00, -4.013714152095174e+00, -4.013687606158190e+00, -4.013690497281847e+00, -4.013690497281847e+00, -1.678376575770234e+00, -1.686227275151420e+00, -1.679046085436092e+00, -1.685910633424089e+00, -1.682495744870144e+00, -1.682495744870144e+00, -4.964956633672873e-01, -5.260002410542201e-01, -4.635127878022789e-01, -4.715246966126264e-01, -5.030530443733550e-01, -5.030530443733551e-01, -1.117306502209240e-01, -1.914142164261272e-01, -1.039329458738493e-01, -1.498682223336194e+00, -1.255358547060884e-01, -1.255358547060884e-01, -2.430141062913482e-03, -3.119123262460275e-03, -2.363214156953128e-03, -6.972810124516554e-02, -3.662889196092836e-03, -3.662889196092839e-03, -4.791994868790013e-01, -4.860863728152190e-01, -4.850545199827115e-01, -4.833378098967515e-01, -4.843254269033879e-01, -4.843254269033879e-01, -4.594951158319112e-01, -4.316423038133040e-01, -4.425318141951309e-01, -4.547407626815719e-01, -4.482228390547349e-01, -4.482228390547349e-01, -5.504635803118529e-01, -2.296422977961329e-01, -2.605152516222296e-01, -3.138711758483786e-01, -2.847357599464082e-01, -2.847357599464082e-01, -3.998766900314900e-01, -3.961478555255864e-02, -5.575981163296416e-02, -2.984843442812576e-01, -8.803013117214260e-02, -8.803013117214258e-02, -8.514524124756496e-03, -7.743467473064427e-04, -1.704790482181133e-03, -8.293453536550628e-02, -3.245778079634405e-03, -3.245778079634400e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_sb98_2c_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.023242630322131e+01, -2.023240334317568e+01, -2.023252185998505e+01, -2.023247283713694e+01, -2.023279983111695e+01, -2.023287819976316e+01, -2.023172016691865e+01, -2.023150323515983e+01, -2.023248498327768e+01, -2.023203177337884e+01, -2.023248498327768e+01, -2.023203177337884e+01, -3.329041601240038e+00, -3.329288203467939e+00, -3.329084038840939e+00, -3.329343118303966e+00, -3.330248288498261e+00, -3.330586860808643e+00, -3.328759072560091e+00, -3.329117687565797e+00, -3.328430311712945e+00, -3.330171697069753e+00, -3.328430311712945e+00, -3.330171697069753e+00, -6.666866137541062e-01, -6.720075514790694e-01, -6.647443308956575e-01, -6.712494029994700e-01, -6.388162444956637e-01, -6.307640528446576e-01, -6.390996254144194e-01, -6.417571984040887e-01, -6.790489673397156e-01, -6.019354947914280e-01, -6.790489673397156e-01, -6.019354947914280e-01, -1.915907384714941e-01, -1.851024545191081e-01, -1.941304787993604e-01, -1.876459890963886e-01, -7.616097648191265e-01, -7.954420092648403e-01, -1.550507557372140e-01, -1.529993933172487e-01, -1.348979565358893e-01, -2.617607130125476e-01, -1.348979565358892e-01, -2.617607130125479e-01, -6.549574653850741e-03, -9.210789181301117e-03, -6.750979940650491e-03, -9.903947376321326e-03, -5.152901741091360e-02, -5.935687665609506e-02, -4.562979005222564e-03, -4.114421869368471e-03, -1.178298172295668e-02, 5.139670544666027e-03, -1.178298172295668e-02, 5.139670544666019e-03, -5.076808216586246e+00, -5.075624789290725e+00, -5.078856358201526e+00, -5.077602806641056e+00, -5.076922467672164e+00, -5.075692612316855e+00, -5.078679223954083e+00, -5.077490488827722e+00, -5.077858643734189e+00, -5.076618851364247e+00, -5.077858643734189e+00, -5.076618851364247e+00, -1.760561392290337e+00, -1.760477813493103e+00, -1.777997033230738e+00, -1.777490742225348e+00, -1.736890001231138e+00, -1.743406332321090e+00, -1.752026803260589e+00, -1.758623946167632e+00, -1.787621237611525e+00, -1.772236529861373e+00, -1.787621237611525e+00, -1.772236529861373e+00, -6.176634376356199e-01, -6.166587924480963e-01, -6.710448952540968e-01, -6.707124075650991e-01, -5.620222374320305e-01, -5.790690442736761e-01, -5.960617978177994e-01, -6.101999716478361e-01, -6.409300476032117e-01, -6.173380130315212e-01, -6.409300476032117e-01, -6.173380130315216e-01, -1.267830013869346e-01, -1.247251497591700e-01, -1.907081770524444e-01, -1.896436951447190e-01, -1.201019836984002e-01, -1.178336269100023e-01, -1.930944761121337e+00, -1.930159194660752e+00, -1.486681359651595e-01, -1.212120791032410e-01, -1.486681359651595e-01, -1.212120791032410e-01, -2.866596054150149e-03, -3.676393477155435e-03, -4.036783978808448e-03, -4.430561250696219e-03, -2.570266385888559e-03, -3.735072747987659e-03, -8.637748039048919e-02, -8.781043610133044e-02, 4.364493825143631e-04, -7.000562684961246e-03, 4.364493825143823e-04, -7.000562684961254e-03, -6.002396716277110e-01, -6.015676688249675e-01, -6.181490433635806e-01, -6.194906693471233e-01, -6.134905570891392e-01, -6.146950285306992e-01, -6.079741853984896e-01, -6.092267045744556e-01, -6.109034661046973e-01, -6.121209524738209e-01, -6.109034661046973e-01, -6.121209524738209e-01, -5.802275209082359e-01, -5.816359336145289e-01, -5.040973839315159e-01, -5.059976605170141e-01, -5.407357143484691e-01, -5.430065297107263e-01, -5.768427124729499e-01, -5.783810461303754e-01, -5.593061472502108e-01, -5.609328632750041e-01, -5.593061472502108e-01, -5.609328632750041e-01, -7.033237880804736e-01, -7.034856299802060e-01, -2.286952118403293e-01, -2.276867250884862e-01, -2.692272743796693e-01, -2.688959922861542e-01, -3.636853351066117e-01, -3.649709166116225e-01, -3.111018036081569e-01, -3.112623043206373e-01, -3.111018036081569e-01, -3.112623043206373e-01, -4.659887107348476e-01, -4.688888625284313e-01, -5.273014680226144e-02, -5.372104656481841e-02, -7.048227579462443e-02, -7.463818724118571e-02, -3.584871935872525e-01, -3.625629913185597e-01, -1.078440865512293e-01, -9.834867841819449e-02, -1.078440865512292e-01, -9.834867841819442e-02, -1.054647309179501e-02, -1.265568863855714e-02, -1.033750198831368e-03, -1.050814473211728e-03, -1.790573790474218e-03, -2.732051013306178e-03, -9.851268658586892e-02, -9.914313128489699e-02, 8.422945368424641e-06, -6.239446150978122e-03, 8.422945368424309e-06, -6.239446150978117e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_sb98_2c_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_sb98_2c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.807531691968980e-09, 0.000000000000000e+00, -7.807569756350028e-09, -7.807408954597163e-09, 0.000000000000000e+00, -7.807481346458696e-09, -7.807029133967284e-09, 0.000000000000000e+00, -7.806929858852773e-09, -7.808405314991541e-09, 0.000000000000000e+00, -7.808695097678802e-09, -7.807448289017750e-09, 0.000000000000000e+00, -7.808004961931611e-09, -7.807448289017750e-09, 0.000000000000000e+00, -7.808004961931611e-09, -1.061350669521926e-05, 0.000000000000000e+00, -1.061159557118702e-05, -1.061318461977682e-05, 0.000000000000000e+00, -1.061119556569750e-05, -1.060443441129386e-05, 0.000000000000000e+00, -1.060118424364819e-05, -1.061283293370291e-05, 0.000000000000000e+00, -1.060953848253906e-05, -1.062153802388378e-05, 0.000000000000000e+00, -1.060070433022973e-05, -1.062153802388378e-05, 0.000000000000000e+00, -1.060070433022973e-05, -6.788253898879749e-03, 0.000000000000000e+00, -6.591695923724641e-03, -6.845338856438638e-03, 0.000000000000000e+00, -6.606213267962457e-03, -7.416464925173218e-03, 0.000000000000000e+00, -7.677429317480236e-03, -7.356582503814281e-03, 0.000000000000000e+00, -7.274357449764819e-03, -5.921953325531408e-03, 0.000000000000000e+00, -8.310162710402982e-03, -5.921953325531408e-03, 0.000000000000000e+00, -8.310162710402982e-03, -7.200538446886333e-01, 0.000000000000000e+00, -7.914461930033967e-01, -7.021549608888419e-01, 0.000000000000000e+00, -7.696579560570564e-01, -4.021439354461523e-03, 0.000000000000000e+00, -3.346407853271470e-03, -1.238209490967327e+00, 0.000000000000000e+00, -1.305671772637169e+00, -1.312871314022533e+00, 0.000000000000000e+00, 9.494512615696328e+00, -1.312871314022532e+00, 0.000000000000000e+00, 9.494512615696328e+00, 3.269834169293230e+00, 0.000000000000000e+00, -3.237349062588298e+00, 3.957577027562673e+00, 0.000000000000000e+00, -3.888615866959157e+00, -7.672650366482815e-01, 0.000000000000000e+00, -3.291969705028962e+00, -6.843360764794786e-01, 0.000000000000000e+00, 1.411834903901336e+00, -1.212198934885170e+01, 0.000000000000000e+00, 1.339283768799696e+02, -1.212198934885288e+01, 0.000000000000000e+00, 1.339283768799975e+02, -2.028994774911810e-06, 0.000000000000000e+00, -2.030991678127372e-06, -2.026566076705392e-06, 0.000000000000000e+00, -2.028658866670378e-06, -2.028849917565882e-06, 0.000000000000000e+00, -2.030913666328357e-06, -2.026778479304244e-06, 0.000000000000000e+00, -2.028780390864918e-06, -2.027745744314096e-06, 0.000000000000000e+00, -2.029819511213778e-06, -2.027745744314096e-06, 0.000000000000000e+00, -2.029819511213778e-06, -1.075321018703465e-04, 0.000000000000000e+00, -1.075521698619243e-04, -1.045332115991854e-04, 0.000000000000000e+00, -1.046399465455307e-04, -1.100101365708777e-04, 0.000000000000000e+00, -1.092699623166121e-04, -1.073696051460819e-04, 0.000000000000000e+00, -1.066065661236365e-04, -1.039274538402779e-04, 0.000000000000000e+00, -1.058426720159619e-04, -1.039274538402779e-04, 0.000000000000000e+00, -1.058426720159619e-04, -9.441938619850028e-03, 0.000000000000000e+00, -9.518283016894405e-03, -1.248268939042438e-02, 0.000000000000000e+00, -1.304056733187805e-02, -1.451873845348310e-02, 0.000000000000000e+00, -1.208091808981256e-02, -1.427265095701984e-02, 0.000000000000000e+00, -1.194043410108306e-02, -7.730253416271507e-03, 0.000000000000000e+00, -9.620528189478941e-03, -7.730253416271547e-03, 0.000000000000000e+00, -9.620528189478932e-03, -1.675168350598358e+00, 0.000000000000000e+00, -1.911486678353805e+00, -5.936684657353569e-01, 0.000000000000000e+00, -6.018249895104506e-01, -1.422072061374198e+00, 0.000000000000000e+00, -2.427902230065963e+00, -1.414290288099413e-04, 0.000000000000000e+00, -1.419101831291650e-04, -9.939075858265808e-01, 0.000000000000000e+00, -2.608699229607409e+00, -9.939075858265808e-01, 0.000000000000000e+00, -2.608699229607409e+00, 2.433029993092068e+00, 0.000000000000000e+00, -5.641703996711201e-01, 7.740068856741471e-01, 0.000000000000000e+00, 1.196912635111808e-01, 3.356365820803214e+01, 0.000000000000000e+00, -2.120360856917565e+01, -2.812281849985435e+00, 0.000000000000000e+00, -2.779534688442059e+00, 9.550688861688596e+01, 0.000000000000000e+00, -3.211876816489833e+01, 9.550688861661686e+01, 0.000000000000000e+00, -3.211876816491631e+01, -8.183902165896365e-02, 0.000000000000000e+00, -8.286445798144518e-02, -1.950192591985643e-02, 0.000000000000000e+00, -1.978831363560902e-02, -2.968145394564839e-02, 0.000000000000000e+00, -3.025992837856420e-02, -4.521080411019815e-02, 0.000000000000000e+00, -4.577416587180291e-02, -3.635640540958741e-02, 0.000000000000000e+00, -3.694659130191576e-02, -3.635640540958741e-02, 0.000000000000000e+00, -3.694659130191576e-02, -1.670528226816838e-01, 0.000000000000000e+00, -1.653268777846822e-01, -2.169145524394545e-02, 0.000000000000000e+00, -2.128221099388921e-02, -1.664408568681609e-02, 0.000000000000000e+00, -1.620874017269686e-02, -1.152154363863724e-02, 0.000000000000000e+00, -1.131751358238822e-02, -1.390938301890409e-02, 0.000000000000000e+00, -1.364744938897793e-02, -1.390938301890409e-02, 0.000000000000000e+00, -1.364744938897793e-02, -8.844592629298936e-03, 0.000000000000000e+00, -9.317871016067149e-03, -3.234798013367079e-01, 0.000000000000000e+00, -3.258049324346077e-01, -1.984080301319883e-01, 0.000000000000000e+00, -1.977200376599525e-01, -8.084979632963371e-02, 0.000000000000000e+00, -7.927057815470551e-02, -1.316560080648503e-01, 0.000000000000000e+00, -1.316523143147381e-01, -1.316560080648506e-01, 0.000000000000000e+00, -1.316523143147381e-01, -2.987157288397766e-02, 0.000000000000000e+00, -2.894476829591580e-02, -1.772387783429814e+00, 0.000000000000000e+00, -2.067591461668346e+00, -1.476596732954701e+00, 0.000000000000000e+00, -2.847069130598656e+00, -8.980152841664411e-02, 0.000000000000000e+00, -8.339746490574906e-02, -1.323047495628469e+00, 0.000000000000000e+00, -4.506956989969514e+00, -1.323047495628481e+00, 0.000000000000000e+00, -4.506956989969531e+00, 1.008876613600806e+00, 0.000000000000000e+00, -2.220652735750022e+00, 2.502452707745429e+01, 0.000000000000000e+00, -1.912882943423064e+01, 1.367192813783470e+01, 0.000000000000000e+00, -7.168019497173280e+00, -2.809914955719074e+00, 0.000000000000000e+00, -3.304086908866286e+00, 1.067369119256622e+02, 0.000000000000000e+00, -2.450189597609791e+01, 1.067369119256730e+02, 0.000000000000000e+00, -2.450189597607896e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
