
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_hjs_b97x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.533591413698442e+01, -1.533594136930324e+01, -1.533610437326189e+01, -1.533565761135134e+01, -1.533592815135946e+01, -1.533592815135946e+01, -2.568443916638813e+00, -2.568438090703874e+00, -2.568381999333825e+00, -2.569011939323019e+00, -2.568451622923667e+00, -2.568451622923667e+00, -5.373092783595206e-01, -5.369625374870955e-01, -5.296826101233186e-01, -5.331662059010258e-01, -5.371816458419850e-01, -5.371816458419850e-01, -1.757083515778553e-01, -1.768404370065929e-01, -6.315206639404405e-01, -1.511845922846292e-01, -1.760290850740718e-01, -1.760290850740718e-01, -2.376754187480287e-02, -2.485176843821736e-02, -8.236324482597948e-02, -1.154007483232239e-02, -2.459803951090245e-02, -2.459803951090245e-02, -3.767619004431566e+00, -3.767921900983644e+00, -3.767652838472470e+00, -3.767888294641738e+00, -3.767769919646004e+00, -3.767769919646004e+00, -1.524916255011344e+00, -1.532929230051483e+00, -1.524222071058504e+00, -1.530423589583555e+00, -1.531390059764710e+00, -1.531390059764710e+00, -4.709331457169472e-01, -5.136540128326019e-01, -4.490521863878883e-01, -4.708077068685166e-01, -4.876562348034713e-01, -4.876562348034713e-01, -1.349735241862131e-01, -1.900004293431803e-01, -1.319329152198492e-01, -1.432565191741124e+00, -1.400216149501222e-01, -1.400216149501222e-01, -1.113386373950014e-02, -1.271492558020683e-02, -9.533821792308684e-03, -1.016300708798003e-01, -1.158649169209478e-02, -1.158649169209478e-02, -4.941762307324697e-01, -4.888435857854566e-01, -4.906633773708198e-01, -4.921371139252170e-01, -4.913922248127814e-01, -4.913922248127814e-01, -4.806210328335817e-01, -4.136514709418543e-01, -4.302241419102473e-01, -4.475551322748346e-01, -4.384895912240219e-01, -4.384895912240219e-01, -5.354897129262607e-01, -2.208533180188471e-01, -2.477076295138038e-01, -3.001625394480719e-01, -2.711031842300677e-01, -2.711031842300676e-01, -3.771143073675030e-01, -7.855437006360760e-02, -9.649069465668673e-02, -2.858541098082873e-01, -1.162715227331722e-01, -1.162715227331723e-01, -2.771205156818457e-02, -3.490397650841053e-03, -6.626303479011468e-03, -1.112923880349331e-01, -9.851414319215410e-03, -9.851414319215402e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_hjs_b97x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.941099303913978e+01, -1.941105546287558e+01, -1.941134576762518e+01, -1.941032331180062e+01, -1.941102586051422e+01, -1.941102586051422e+01, -3.225879824680344e+00, -3.225912489236904e+00, -3.226937631214648e+00, -3.225829381126565e+00, -3.225909866753502e+00, -3.225909866753502e+00, -6.660836431172330e-01, -6.646915957953763e-01, -6.253023586681330e-01, -6.310574090730773e-01, -6.655802100681922e-01, -6.655802100681922e-01, -1.884321285489834e-01, -1.932763389919324e-01, -8.050860575582940e-01, -1.186077609258917e-01, -1.899175317709406e-01, -1.899175317709406e-01, -3.095758103629781e-02, -3.228822631573830e-02, -8.722496756110354e-02, -1.532420343255478e-02, -3.196460250925235e-02, -3.196460250925235e-02, -4.877427782453744e+00, -4.879223297286942e+00, -4.877611994972452e+00, -4.879008119215813e+00, -4.878348015513754e+00, -4.878348015513754e+00, -1.728493819735665e+00, -1.744859439771774e+00, -1.717011321201483e+00, -1.729846211520840e+00, -1.754307055359642e+00, -1.754307055359642e+00, -6.198513009126224e-01, -6.780246907206565e-01, -5.904342628897333e-01, -6.234572795177720e-01, -6.437113745697790e-01, -6.437113745697790e-01, -1.021883652827704e-01, -1.630845136742020e-01, -9.914000083272574e-02, -1.898035553134781e+00, -1.031713655615864e-01, -1.031713655615864e-01, -1.478758640119747e-02, -1.686622442439095e-02, -1.265257641261278e-02, -9.273568498870377e-02, -1.537040642419702e-02, -1.537040642419698e-02, -6.451478559387265e-01, -6.441137877894267e-01, -6.447635498435703e-01, -6.450624268368063e-01, -6.449361841999056e-01, -6.449361841999056e-01, -6.258322837133964e-01, -5.307814903078133e-01, -5.651020990446007e-01, -5.934330461196793e-01, -5.796382239754649e-01, -5.796382239754649e-01, -7.076760267061117e-01, -2.174468622291460e-01, -2.760514489771590e-01, -3.841900810060537e-01, -3.294394093741007e-01, -3.294394093741006e-01, -4.827933276387843e-01, -8.653831937527591e-02, -9.465358518298247e-02, -3.757308733293673e-01, -9.188263492747950e-02, -9.188263492747953e-02, -3.587518237957323e-02, -4.651613043387598e-03, -8.820721324783655e-03, -8.789676853445326e-02, -1.307816877384810e-02, -1.307816877384808e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_hjs_b97x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.569455678315849e-09, -2.569424150411347e-09, -2.569275642135300e-09, -2.569792084226641e-09, -2.569439117245417e-09, -2.569439117245417e-09, -2.881805096180107e-06, -2.881581421928138e-06, -2.874985640905737e-06, -2.884092889017036e-06, -2.881645098863318e-06, -2.881645098863318e-06, -1.268645129885976e-03, -1.293757971905466e-03, -1.975373726087360e-03, -1.896843087932972e-03, -1.277705400740406e-03, -1.277705400740406e-03, -3.008393995179932e-01, -2.734774428748198e-01, -4.241261208383011e-04, -1.168105269899062e+00, -2.923884430591792e-01, -2.923884430591792e-01, -2.698107219080504e+01, -2.692787043001934e+01, -7.667480079884363e+00, -1.971091323888491e+01, -2.799674725526909e+01, -2.799674725526909e+01, -4.944469337778413e-07, -4.919494097540017e-07, -4.941964787272194e-07, -4.922546279471022e-07, -4.931628092559834e-07, -4.931628092559834e-07, -3.379873171340823e-05, -3.271764994408682e-05, -3.443199143191500e-05, -3.357174495034056e-05, -3.225550484315952e-05, -3.225550484315952e-05, 1.100343305838808e-03, 4.310099095339852e-03, 1.222841354372117e-03, 5.035374152623204e-03, 1.339407252163179e-03, 1.339407252163179e-03, -2.339268592658776e+00, -3.553145362327080e-01, -2.600489683706260e+00, 1.897574717287873e-05, -1.900212283650690e+00, -1.900212283650690e+00, -2.091684251691218e+01, -2.092014342364373e+01, -5.994068625586352e+01, -6.024806996784009e+00, -3.091039468802789e+01, -3.091039468805316e+01, 7.588224611375686e-03, 5.869125372034630e-03, 6.433647080917919e-03, 6.907758820647679e-03, 6.666369606569337e-03, 6.666369606569337e-03, 9.079926655441637e-03, -1.282656860113239e-03, 1.336904700540081e-03, 3.895835226134438e-03, 2.599214232043464e-03, 2.599214232043472e-03, 3.325655743678830e-03, -1.391391067726325e-01, -5.914631650036421e-02, -3.768071575027551e-03, -2.300028629869699e-02, -2.300028629869708e-02, -1.947586383352485e-03, -6.821328967560184e+00, -5.781018392428820e+00, 1.119671401793658e-02, -4.420071275862260e+00, -4.420071275862265e+00, -1.994777647403139e+01, -3.629709716963641e+01, -3.116009102650359e+01, -5.405488427819098e+00, -4.519133366440303e+01, -4.519133366438216e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
