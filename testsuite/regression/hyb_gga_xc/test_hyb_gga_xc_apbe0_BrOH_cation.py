
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_apbe0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.589816692189170e+01, -1.589818513067848e+01, -1.589832143753640e+01, -1.589804939034529e+01, -1.589818406697791e+01, -1.589818406697791e+01, -2.672617238280941e+00, -2.672588956739849e+00, -2.672000029161342e+00, -2.673524952102889e+00, -2.672647064831847e+00, -2.672647064831847e+00, -5.559086788029152e-01, -5.557574018238562e-01, -5.536225020167753e-01, -5.574222091356644e-01, -5.571801377870151e-01, -5.571801377870151e-01, -1.707083587912318e-01, -1.720378924626645e-01, -6.399997305291927e-01, -1.411642517317543e-01, -1.636740131676183e-01, -1.636740131676182e-01, -7.580179775158728e-03, -7.981997463395949e-03, -4.343450554670290e-02, -4.371943054818729e-03, -6.101363507697201e-03, -6.101363507697201e-03, -3.856757898833098e+00, -3.856325382501737e+00, -3.856745941822020e+00, -3.856363962581757e+00, -3.856534083185176e+00, -3.856534083185176e+00, -1.634891296193251e+00, -1.642486599870966e+00, -1.635779235279026e+00, -1.642484462797848e+00, -1.638672940552994e+00, -1.638672940552994e+00, -4.760743801864464e-01, -5.080934682060214e-01, -4.444259827259177e-01, -4.545975363512854e-01, -4.824469894150755e-01, -4.824469894150755e-01, -1.059986216022900e-01, -1.800344485024957e-01, -9.897858725217082e-02, -1.433541974571346e+00, -1.193894360973214e-01, -1.193894360973214e-01, -3.375438710880333e-03, -4.273814802127683e-03, -3.272681150146621e-03, -6.867391010587323e-02, -4.110919310063830e-03, -4.110919310063835e-03, -4.734481163499534e-01, -4.704316704183875e-01, -4.713772084150159e-01, -4.722466456442728e-01, -4.718006219600344e-01, -4.718006219600344e-01, -4.620664073509000e-01, -4.132948679128594e-01, -4.242680469840275e-01, -4.368404593233498e-01, -4.300789091100052e-01, -4.300789091100052e-01, -5.307770976325806e-01, -2.166261920356665e-01, -2.468729157591521e-01, -2.999772423278243e-01, -2.709398450976024e-01, -2.709398450976024e-01, -3.827300362397599e-01, -4.158480199744349e-02, -5.614971451203503e-02, -2.861991157018086e-01, -8.516313221782568e-02, -8.516313221782570e-02, -1.068077361570799e-02, -1.142455860318406e-03, -2.402458050225062e-03, -8.051257129852672e-02, -3.775267733819405e-03, -3.775267733819397e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_apbe0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.884620081631348e+01, -1.884617905084119e+01, -1.884629015792524e+01, -1.884624431622225e+01, -1.884655074217809e+01, -1.884662285943270e+01, -1.884553752323485e+01, -1.884533685630267e+01, -1.884625087760663e+01, -1.884583508694232e+01, -1.884625087760663e+01, -1.884583508694232e+01, -3.107520372027258e+00, -3.107665722654440e+00, -3.107559708846486e+00, -3.107711228795901e+00, -3.108571463233461e+00, -3.108810412774116e+00, -3.107306737293611e+00, -3.107550740090145e+00, -3.106972240972670e+00, -3.108460358668853e+00, -3.106972240972670e+00, -3.108460358668853e+00, -6.385436401984959e-01, -6.416926687277149e-01, -6.369684967435096e-01, -6.407992720990749e-01, -6.116603084085162e-01, -6.075589211414735e-01, -6.140977425809229e-01, -6.154265879798335e-01, -6.370753953462711e-01, -5.987429206821385e-01, -6.370753953462711e-01, -5.987429206821385e-01, -1.784661607442445e-01, -1.807057430344464e-01, -1.804964807595871e-01, -1.832727141849986e-01, -7.290730252330526e-01, -7.546990982138674e-01, -1.493132003679005e-01, -1.504996790017415e-01, -1.690110282360920e-01, -1.338266933850975e-01, -1.690110282360920e-01, -1.338266933850973e-01, -9.763943851820507e-03, -1.037346748382668e-02, -1.022955035083573e-02, -1.095581046605072e-02, -5.488071661488489e-02, -5.768946129268176e-02, -5.874985243134795e-03, -5.777225981698989e-03, -8.712963767789926e-03, -4.961021936629509e-03, -8.712963767789923e-03, -4.961021936629509e-03, -4.748723781558819e+00, -4.747591079192870e+00, -4.751167791313657e+00, -4.749959991526401e+00, -4.748854875570324e+00, -4.747673094433985e+00, -4.750957610734268e+00, -4.749819315277362e+00, -4.749975936518206e+00, -4.748782428248203e+00, -4.749975936518206e+00, -4.748782428248203e+00, -1.700319620251652e+00, -1.700238642801791e+00, -1.713877970356761e+00, -1.713432561604050e+00, -1.687135172340422e+00, -1.689995533373271e+00, -1.698643518412835e+00, -1.701703064062719e+00, -1.717601998692986e+00, -1.709638615078952e+00, -1.717601998692986e+00, -1.709638615078952e+00, -5.942905651731002e-01, -5.932571378291265e-01, -6.631022393853436e-01, -6.636492156418584e-01, -5.419227612193884e-01, -5.576153765472206e-01, -5.849225717754613e-01, -5.974496373839936e-01, -6.167788456947807e-01, -5.941371583219910e-01, -6.167788456947807e-01, -5.941371583219910e-01, -1.228265632237427e-01, -1.232069979360020e-01, -1.863585673406573e-01, -1.867703050238273e-01, -1.142459836798899e-01, -1.180637576415362e-01, -1.863929678376262e+00, -1.863267579165454e+00, -1.319974184796778e-01, -1.305158664520211e-01, -1.319974184796778e-01, -1.305158664520211e-01, -4.408094813628453e-03, -4.581071053839314e-03, -5.652719957697257e-03, -5.738303069105309e-03, -4.226226318772820e-03, -4.475159925915596e-03, -8.494510550861593e-02, -8.552499999040505e-02, -4.317232087826631e-03, -5.926335828987629e-03, -4.317232087826640e-03, -5.926335828987632e-03, -6.187052448418402e-01, -6.204377850629297e-01, -6.136259441398888e-01, -6.154390086459137e-01, -6.157015045844365e-01, -6.175082257141521e-01, -6.172200814195085e-01, -6.189630863266329e-01, -6.164891782173173e-01, -6.182632536791677e-01, -6.164891782173173e-01, -6.182632536791677e-01, -6.032516283464109e-01, -6.046037153320987e-01, -4.861645263893923e-01, -4.878755275883493e-01, -5.218199734504585e-01, -5.237897060965553e-01, -5.581971801848771e-01, -5.596725677360427e-01, -5.400260530583649e-01, -5.415449924615605e-01, -5.400260530583649e-01, -5.415449924615605e-01, -6.914921836966220e-01, -6.928213207706793e-01, -2.223060967707999e-01, -2.228231582800788e-01, -2.600031566520304e-01, -2.611257318210261e-01, -3.541990734147115e-01, -3.555600524420618e-01, -3.019353113743840e-01, -3.018183087654513e-01, -3.019353113743840e-01, -3.018183087654512e-01, -4.506032588569116e-01, -4.531235355071662e-01, -5.400809578809457e-02, -5.434986688723424e-02, -7.070711207814905e-02, -7.269994536160046e-02, -3.509674047770587e-01, -3.546789977031615e-01, -9.990663920285389e-02, -1.016790634389393e-01, -9.990663920285391e-02, -1.016790634389394e-01, -1.395004208359693e-02, -1.445251240390231e-02, -1.521464356511947e-03, -1.524905565474528e-03, -3.095336882679954e-03, -3.292014522706848e-03, -9.599560111897244e-02, -9.717671869542911e-02, -4.088739578770811e-03, -5.432662907775354e-03, -4.088739578770801e-03, -5.432662907775348e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_apbe0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_apbe0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.201834848340189e-08, 3.793010399369742e-10, -1.201841688755654e-08, -1.201825630333096e-08, 3.793083291553778e-10, -1.201834888390952e-08, -1.201784403714541e-08, 3.793189656540306e-10, -1.201779507458350e-08, -1.201890103231157e-08, 3.792109865091843e-10, -1.201912648812161e-08, -1.201831711974512e-08, 3.792706526962533e-10, -1.201849501472168e-08, -1.201831711974512e-08, 3.792706526962533e-10, -1.201849501472168e-08, -1.526220907973774e-05, 2.126364669746874e-06, -1.526779245702124e-05, -1.526236043015923e-05, 2.126828811717762e-06, -1.526836885953334e-05, -1.527069229980894e-05, 2.137339537116007e-06, -1.527387311479922e-05, -1.524670552207395e-05, 2.117133911233067e-06, -1.525094970071784e-05, -1.527113008821433e-05, 2.126668783223223e-06, -1.525684811618175e-05, -1.527113008821433e-05, 2.126668783223223e-06, -1.525684811618175e-05, -8.421990206251994e-03, 3.532466099381867e-03, -8.451970847501534e-03, -8.434766803260923e-03, 3.501408982376282e-03, -8.472202599064872e-03, -8.759743666971784e-03, 2.737380807400288e-03, -8.679430904370563e-03, -8.467418729646856e-03, 2.679122188445124e-03, -8.497223369586459e-03, -8.825303498305879e-03, 2.721002874464926e-03, -7.830840688217386e-03, -8.825303498305879e-03, 2.721002874464926e-03, -7.830840688217386e-03, -8.469389248607053e-01, 2.651292897790677e-01, -7.960852708569223e-01, -8.477967711056594e-01, 2.824377469198657e-01, -7.842999257087030e-01, -4.948090059017722e-03, 1.922601730619672e-03, -4.589261256692841e-03, -1.133658929042765e+00, 1.769312090434056e-01, -1.096881862770065e+00, -7.715415563589920e-01, 1.498980738471683e-01, -1.582401913528736e+00, -7.715415563589917e-01, 1.498980738471682e-01, -1.582401913528738e+00, -3.101734268496423e+00, 6.040298533980295e-03, -3.070767053196072e+00, -3.267931731724353e+00, 7.105251159261777e-03, -3.251411031820198e+00, -1.812442235240169e+00, 3.677980699689255e-02, -1.824507432899425e+00, -2.841995385801596e+00, 2.144865069676530e-03, -2.764799337365655e+00, -3.097731510379707e+00, 3.147284467715282e-03, -7.861042806072110e+00, -3.097731510379914e+00, 3.147284467857376e-03, -7.861042806072325e+00, -3.331278999779678e-06, 5.715054756324345e-07, -3.334599777143213e-06, -3.330217570842109e-06, 5.754520446152895e-07, -3.333509857385920e-06, -3.331220555551120e-06, 5.716631812049310e-07, -3.334529595141144e-06, -3.330261633457309e-06, 5.751468182462837e-07, -3.333590641513500e-06, -3.330766962701394e-06, 5.735127015918660e-07, -3.334044698864288e-06, -3.330766962701394e-06, 5.735127015918660e-07, -3.334044698864288e-06, -1.153678765557513e-04, 1.123408257029768e-05, -1.153887524237562e-04, -1.131513053503490e-04, 1.123507145217606e-05, -1.132502140246145e-04, -1.151139237572943e-04, 1.061880353371134e-05, -1.153377494819362e-04, -1.132483036884599e-04, 1.062280253237580e-05, -1.134043735521670e-04, -1.142489984619226e-04, 1.154453178595726e-05, -1.141648510861808e-04, -1.142489984619226e-04, 1.154453178595726e-05, -1.141648510861808e-04, -1.447011780161264e-02, 1.240143815402234e-02, -1.470200167597216e-02, -8.893767644833078e-03, 1.676514565660391e-02, -8.890978120687240e-03, -2.140188259913441e-02, 1.602152595132363e-02, -1.795600974508009e-02, -1.676718026929092e-02, 2.541805936863850e-02, -1.309889734741394e-02, -1.187416950405869e-02, 1.247917528865291e-02, -1.580722335045184e-02, -1.187416950405870e-02, 1.247917528865291e-02, -1.580722335045185e-02, -1.262844213151610e+00, 9.355776191030574e-02, -1.285941533540379e+00, -5.267161312183821e-01, 9.140039679875368e-02, -5.217303508312073e-01, -1.420964892597517e+00, 9.442598119979510e-02, -1.382934077073136e+00, -1.452717327955046e-04, 1.303636021753284e-04, -1.456683983620589e-04, -1.361739910181511e+00, 1.836774204032860e-01, -1.665416304712796e+00, -1.361739910181511e+00, 1.836774204032860e-01, -1.665416304712796e+00, -3.989904195818269e+00, 2.091239894202053e-03, -3.453262839026855e+00, -3.435386378147798e+00, 2.637098537985854e-03, -3.171706787750538e+00, -1.956364288461659e+01, 2.627223574055052e-02, -2.176552597799212e+01, -2.092686674709678e+00, 9.080657633443846e-02, -2.014428651178173e+00, -9.729642584314092e+00, 1.005479228080451e-02, -9.558090275792424e+00, -9.729642584311716e+00, 1.005479228927092e-02, -9.558090275790066e+00, -1.007606892353958e-02, 2.920489796913111e-02, -9.712235096138172e-03, -1.219701726307658e-02, 2.438675133149908e-02, -1.184521292715290e-02, -1.154457084856440e-02, 2.589219493671160e-02, -1.118925731551710e-02, -1.093403073567810e-02, 2.728385335695393e-02, -1.057388326379522e-02, -1.124823460935153e-02, 2.657033551931473e-02, -1.089042325408085e-02, -1.124823460935153e-02, 2.657033551931473e-02, -1.089042325408085e-02, -1.034121920331065e-02, 3.493081744096441e-02, -9.978819413503218e-03, -2.776760956011103e-02, 1.592185096972397e-02, -2.731550830238599e-02, -2.399101270401793e-02, 1.910452362914878e-02, -2.354422213727811e-02, -1.960304509942292e-02, 2.347762085043059e-02, -1.920358674195975e-02, -2.194294689115689e-02, 2.114865370404163e-02, -2.151188986677317e-02, -2.194294689115689e-02, 2.114865370404163e-02, -2.151188986677317e-02, -7.629731934486027e-03, 1.324147549853335e-02, -7.573449570124039e-03, -3.106433010571719e-01, 7.114966182737305e-02, -3.073525526384175e-01, -2.103105539320985e-01, 6.933524796270982e-02, -2.070177364971807e-01, -1.014716110985610e-01, 6.945738944814731e-02, -9.908247275836837e-02, -1.506676140589503e-01, 7.343345005612106e-02, -1.518233383444569e-01, -1.506676140589505e-01, 7.343345005612113e-02, -1.518233383444570e-01, -3.798517771482542e-02, 2.287111723347015e-02, -3.707253365270063e-02, -1.658512806974880e+00, 3.019957545151981e-02, -1.660666078234535e+00, -1.634723458042283e+00, 4.651181257385397e-02, -1.672164165453073e+00, -1.223971917942276e-01, 1.139039501195980e-01, -1.140677101843030e-01, -2.069733305027675e+00, 1.607767310189688e-01, -2.449569944879245e+00, -2.069733305027675e+00, 1.607767310189699e-01, -2.449569944879246e+00, -2.457489872240416e+00, 7.533006261480646e-03, -2.508988441142447e+00, -1.227708190652071e+01, 2.859561103419824e-03, -2.174822586941498e+01, -7.576633823438885e+00, 3.579097021043737e-03, -8.066033824047457e+00, -2.323675943927174e+00, 1.469462131402798e-01, -2.274873813007813e+00, -2.006438896517873e+01, 1.283392326620360e-02, -9.920949629200573e+00, -2.006438896517539e+01, 1.283392328300462e-02, -9.920949629197219e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
