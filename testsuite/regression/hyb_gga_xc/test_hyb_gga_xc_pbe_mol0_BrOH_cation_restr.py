
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_pbe_mol0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.595128349654751e+01, -1.595130050175686e+01, -1.595143368074670e+01, -1.595117949313854e+01, -1.595130449302471e+01, -1.595130449302471e+01, -2.682720290420152e+00, -2.682690166325577e+00, -2.682058943218527e+00, -2.683659555847667e+00, -2.682747991627334e+00, -2.682747991627334e+00, -5.580423377727720e-01, -5.579130280971378e-01, -5.564001614714835e-01, -5.602066281565411e-01, -5.588645198369415e-01, -5.588645198369415e-01, -1.716905425019863e-01, -1.729888465420761e-01, -6.420288427720446e-01, -1.419898905884477e-01, -1.534607822814339e-01, -1.534607822814339e-01, -7.566539266844553e-03, -7.963556941099291e-03, -4.340584366174775e-02, -4.371367923455639e-03, -5.492293659136724e-03, -5.492293659136724e-03, -3.865366053906800e+00, -3.864864417164370e+00, -3.865351253584803e+00, -3.864908260307375e+00, -3.865107015164486e+00, -3.865107015164486e+00, -1.645589223793846e+00, -1.653111130390231e+00, -1.646765721581050e+00, -1.653410772526936e+00, -1.649170457511538e+00, -1.649170457511538e+00, -4.767879293426215e-01, -5.081145253161193e-01, -4.449959089475843e-01, -4.544947323677220e-01, -4.826442297559957e-01, -4.826442297559957e-01, -1.063929064176667e-01, -1.812025982952358e-01, -9.921088986949941e-02, -1.434199852436299e+00, -1.199374814293521e-01, -1.199374814293521e-01, -3.372967049524571e-03, -4.273374493020856e-03, -3.267382991445435e-03, -6.880929820739280e-02, -3.936192708004280e-03, -3.936192708004280e-03, -4.734092362352934e-01, -4.704294087062800e-01, -4.713509937576988e-01, -4.722090252310000e-01, -4.717676566326353e-01, -4.717676566326353e-01, -4.620409174654991e-01, -4.145979659895849e-01, -4.250503971811227e-01, -4.371353510177163e-01, -4.306061374826606e-01, -4.306061374826606e-01, -5.308248284513318e-01, -2.180743657820678e-01, -2.483579516672530e-01, -3.008745123797113e-01, -2.721988057826044e-01, -2.721988057826044e-01, -3.839018723250359e-01, -4.161114594293477e-02, -5.618893263438357e-02, -2.866702692731539e-01, -8.535852688848301e-02, -8.535852688848304e-02, -1.067460420237636e-02, -1.142455137367391e-03, -2.397937710170861e-03, -8.073588680855334e-02, -3.642241590379367e-03, -3.642241590379373e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_pbe_mol0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.879570731246857e+01, -1.879578502245895e+01, -1.879610548303819e+01, -1.879494984633159e+01, -1.879555892609467e+01, -1.879555892609467e+01, -3.097147641607207e+00, -3.097190354676755e+00, -3.098252542445784e+00, -3.096977154496771e+00, -3.097271186061439e+00, -3.097271186061439e+00, -6.372174101257813e-01, -6.359832261586131e-01, -6.070720138287784e-01, -6.122166258760671e-01, -6.115869364590303e-01, -6.115869364590303e-01, -1.798357232753774e-01, -1.819775645091675e-01, -7.387477262969400e-01, -1.513532447421538e-01, -1.603965313564713e-01, -1.603965313564713e-01, -1.007888665680506e-02, -1.060629542192397e-02, -5.645111465674383e-02, -5.826682018243210e-03, -7.319016256718238e-03, -7.319016256718240e-03, -4.736495788503923e+00, -4.738953452532942e+00, -4.736604439875380e+00, -4.738774099087484e+00, -4.737743584724115e+00, -4.737743584724115e+00, -1.696873972910467e+00, -1.709999225794963e+00, -1.685742793242264e+00, -1.697113836428337e+00, -1.709783752058891e+00, -1.709783752058891e+00, -5.918864501153643e-01, -6.629974921136639e-01, -5.480113440589567e-01, -5.907585721770870e-01, -6.040140755692066e-01, -6.040140755692066e-01, -1.241679076181612e-01, -1.880974408699519e-01, -1.172515009931865e-01, -1.861571428465565e+00, -1.326027022193743e-01, -1.326027022193743e-01, -4.496335588194227e-03, -5.695999695129826e-03, -4.354458196098900e-03, -8.570703532934976e-02, -5.245808842293273e-03, -5.245808842293273e-03, -6.195636192321823e-01, -6.142443829337886e-01, -6.164371180669890e-01, -6.180084047395589e-01, -6.172528432100592e-01, -6.172528432100592e-01, -6.039462071215245e-01, -4.847539195111972e-01, -5.208795266169909e-01, -5.577913056444870e-01, -5.392068792385870e-01, -5.392068792385870e-01, -6.916720647933557e-01, -2.234572157319453e-01, -2.602211630572132e-01, -3.531253041451415e-01, -3.004968430230026e-01, -3.004968430230025e-01, -4.497404032882880e-01, -5.428375962727171e-02, -7.196968552386802e-02, -3.514135980416003e-01, -1.016858510564563e-01, -1.016858510564563e-01, -1.420803412893643e-02, -1.523195898973719e-03, -3.196751073494151e-03, -9.732682988980018e-02, -4.854142276408535e-03, -4.854142276408542e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_pbe_mol0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_pbe_mol0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.222859174436302e-09, -6.222817073134865e-09, -6.222565644267405e-09, -6.223193334940202e-09, -6.222873577021867e-09, -6.222873577021867e-09, -7.490870327190959e-06, -7.490967710168781e-06, -7.492488667379866e-06, -7.484317580180346e-06, -7.490288306371683e-06, -7.490288306371683e-06, -3.551149020970687e-03, -3.566915779578679e-03, -3.871816985373238e-03, -3.762441467860661e-03, -3.791043963686871e-03, -3.791043963686871e-03, -3.535453571666819e-01, -3.473209523576514e-01, -2.028540333894818e-03, -5.093752616240051e-01, -4.719748031838745e-01, -4.719748031838744e-01, -1.452824361111076e+00, -1.534648319148099e+00, -8.526995187426055e-01, -1.321262136546135e+00, -1.678058309385011e+00, -1.678058309384307e+00, -1.619084777942525e-06, -1.617656720950193e-06, -1.619016602612064e-06, -1.617756352679892e-06, -1.618365729404570e-06, -1.618365729404570e-06, -5.696744709250889e-05, -5.586969377633921e-05, -5.696835916674893e-05, -5.601214846400216e-05, -5.633978442584056e-05, -5.633978442584056e-05, -4.608195986309996e-03, -4.112442737583943e-04, -6.335664900662627e-03, -1.352719596874843e-03, -4.091265935814278e-03, -4.091265935814278e-03, -5.933223081364634e-01, -2.396819105070213e-01, -6.527321606792255e-01, -4.456271178499825e-05, -7.034120028614653e-01, -7.034120028614653e-01, -1.741171450424371e+00, -1.554980502861901e+00, -9.761845140098739e+00, -9.581314360363692e-01, -4.543091415452878e+00, -4.543091415451443e+00, 2.396697666316441e-03, -9.427721575439377e-05, 6.727411771832847e-04, 1.390805831403195e-03, 1.021498857348372e-03, 1.021498857348372e-03, 3.815255864565744e-03, -1.052418351160981e-02, -7.777473715948441e-03, -4.346175124611518e-03, -6.184406571210888e-03, -6.184406571210888e-03, -6.420794979629142e-04, -1.391379070771643e-01, -9.028686644165529e-02, -3.543181744320405e-02, -6.065284704729079e-02, -6.065284704729083e-02, -1.404811033126958e-02, -7.782592913300839e-01, -7.745691967642505e-01, -3.384604672915691e-02, -1.055815301947064e+00, -1.055815301947063e+00, -1.170117430719340e+00, -7.634380462331674e+00, -3.694021909113555e+00, -1.069060734320682e+00, -5.738373078853533e+00, -5.738373078852334e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
