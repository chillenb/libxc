
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_wc04_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.428738835977174e+00, -1.428714125054400e+00, -1.428646351682042e+00, -1.429050156342801e+00, -1.428725449288794e+00, -1.428725449288794e+00, -4.000656790724126e-01, -4.000293331892514e-01, -3.990429861635164e-01, -4.008058042643900e-01, -4.000482462073003e-01, -4.000482462073003e-01, -1.704677429695000e-01, -1.711274237303096e-01, -1.903348207985611e-01, -1.900842844206843e-01, -1.707044941362340e-01, -1.707044941362340e-01, -1.054453396948664e-01, -1.041330754203385e-01, -1.678345219090258e-01, -1.157740833669228e-01, -1.050209872331119e-01, -1.050209872331119e-01, -6.639537541634115e-02, -6.705627399363419e-02, -1.031240950792989e-01, -6.037293459359639e-02, -6.644826238819934e-02, -6.644826238819934e-02, -3.741452908556770e-01, -3.726148963264667e-01, -3.739925681723333e-01, -3.728025331516425e-01, -3.733550476312614e-01, -3.733550476312614e-01, -4.271731799175468e-01, -4.241672233244503e-01, -4.338191377106893e-01, -4.314375031559831e-01, -4.165813871800801e-01, -4.165813871800801e-01, -1.221350134275094e-01, -9.793802730290362e-02, -1.209777999713756e-01, -1.000697040769016e-01, -1.200672900776394e-01, -1.200672900776394e-01, -1.201134692242894e-01, -1.294521970917645e-01, -1.166102415015533e-01, -1.539691286773103e-01, -1.151647853118689e-01, -1.151647853118689e-01, -5.926007302513654e-02, -6.089278583626164e-02, -4.701241455274627e-02, -1.071333353576420e-01, -5.548811653158722e-02, -5.548811653158723e-02, -8.787125288860900e-02, -9.445158727259866e-02, -9.214851926031242e-02, -9.032678487274903e-02, -9.124221343634165e-02, -9.124221343634165e-02, -8.577783069522774e-02, -1.327921863125578e-01, -1.198781341812879e-01, -1.072197349079277e-01, -1.135658470620572e-01, -1.135658470620572e-01, -1.008887966375139e-01, -1.323530213997297e-01, -1.277750671780433e-01, -1.140431156168853e-01, -1.207525114596921e-01, -1.207525114596920e-01, -1.279284731068051e-01, -1.051178311309326e-01, -1.092932350497660e-01, -1.003367976198205e-01, -1.084489808901261e-01, -1.084489808901261e-01, -7.237042974167862e-02, -4.275606836301105e-02, -4.950894828749503e-02, -1.040391461806170e-01, -4.992286718922533e-02, -4.992286718922532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_wc04_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.016481472152328e+00, 1.016463003794761e+00, 1.016413591395662e+00, 1.016715345442362e+00, 1.016471456910112e+00, 1.016471456910112e+00, 1.009581550557161e-01, 1.009337060938028e-01, 1.002701288947136e-01, 1.014584677186017e-01, 1.009464939225172e-01, 1.009464939225172e-01, -3.051227104661550e-02, -3.017901785079215e-02, -2.171358473006344e-02, -2.183552383488483e-02, -3.039224674200245e-02, -3.039224674200245e-02, -3.709789626315749e-02, -3.741758955370223e-02, -3.539856505997632e-02, -3.657718469567253e-02, -3.719426731575977e-02, -3.719426731575977e-02, -2.442009508801657e-02, -2.485775031359371e-02, -3.930114515390930e-02, -1.859703925067488e-02, -2.466780521699605e-02, -2.466780521699605e-02, 8.110313535449316e-02, 7.979459033691071e-02, 8.097267657500842e-02, 7.995517922995247e-02, 8.042785522328984e-02, 8.042785522328984e-02, 9.376438774912788e-02, 9.302214331141211e-02, 9.609856185195513e-02, 9.555278710307746e-02, 9.009471173930279e-02, 9.009471173930279e-02, -5.538346043517125e-02, -8.015686662553612e-02, -5.430190647367062e-02, -7.326220574470863e-02, -5.835266147480063e-02, -5.835266147480063e-02, -3.944050193333338e-02, -3.559525720362507e-02, -3.884870529578789e-02, -8.234341840404359e-02, -3.745350618080485e-02, -3.745350618080485e-02, -1.819637686835426e-02, -1.927541062128051e-02, -1.525728914366851e-02, -3.953717000199991e-02, -1.778912518420181e-02, -1.778912518420180e-02, -8.854594312780102e-02, -8.080384776794380e-02, -8.341088186689381e-02, -8.554712054595315e-02, -8.446491864951848e-02, -8.446491864951848e-02, -8.919047793656329e-02, -4.409666787742530e-02, -5.339080543864515e-02, -6.450859304569700e-02, -5.864822273816796e-02, -5.864822273816805e-02, -7.960684770763282e-02, -3.479695366529449e-02, -3.607863014110729e-02, -4.481462560063992e-02, -3.951456206414444e-02, -3.951456206414445e-02, -4.410612570163879e-02, -3.979766863536500e-02, -4.046254706469313e-02, -5.065616032462036e-02, -3.848493406449237e-02, -3.848493406449235e-02, -2.666880991752524e-02, -1.028398970649804e-02, -1.386492001931480e-02, -3.778128356360146e-02, -1.592748682597637e-02, -1.592748682597637e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_wc04_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_wc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.264152960171696e-09, -7.264122231032754e-09, -7.263875652310780e-09, -7.264381055476173e-09, -7.264137669897466e-09, -7.264137669897466e-09, -9.597918368555048e-06, -9.598228186304069e-06, -9.605167545204719e-06, -9.585087615203606e-06, -9.597914168489871e-06, -9.597914168489871e-06, -6.004214564042026e-03, -6.006586312778868e-03, -6.028895712342155e-03, -5.876167990845170e-03, -6.005184257270320e-03, -6.005184257270320e-03, -7.179276826023844e-01, -7.009816753730417e-01, -3.219803573265835e-03, -1.628384169142570e+00, -7.130487606052673e-01, -7.130487606052673e-01, -2.799066127206877e+03, -2.455102059828024e+03, -3.726839105074564e+01, -2.073911448564498e+04, -2.557349657365032e+03, -2.557349657365032e+03, -2.193284379704350e-06, -2.194798840137475e-06, -2.193426780597960e-06, -2.194604488006702e-06, -2.194077405239478e-06, -2.194077405239478e-06, -7.321233425514085e-05, -7.176046039996693e-05, -7.321409263155668e-05, -7.207845547248680e-05, -7.222934097039800e-05, -7.222934097039800e-05, -1.286804078176505e-02, -1.156409837112499e-02, -1.562447802556564e-02, -1.588075328393387e-02, -1.141324007542252e-02, -1.141324007542252e-02, -3.606225337981084e+00, -5.307442140289151e-01, -3.918957689082635e+00, -1.349944170850941e-04, -2.596372791380583e+00, -2.596372791380583e+00, -2.338122273715883e+04, -1.594635277576217e+04, -4.909873985113565e+04, -1.511992559110225e+01, -2.325344739263990e+04, -2.325344739263991e+04, -1.558664128787357e-02, -1.470645277844352e-02, -1.497165441273866e-02, -1.520987310440128e-02, -1.508660392945319e-02, -1.508660392945319e-02, -1.805891621295280e-02, -1.979038655431998e-02, -1.861594880734277e-02, -1.790359532446953e-02, -1.824319899956959e-02, -1.824319899956959e-02, -9.474067747095322e-03, -2.567562836076556e-01, -1.559267239778895e-01, -7.877257550323809e-02, -1.115728780530014e-01, -1.115728780530015e-01, -2.925467418630269e-02, -4.362255404098946e+01, -1.910653247405866e+01, -1.094148417807658e-01, -7.447443501064660e+00, -7.447443501064663e+00, -1.640963796966088e+03, -7.746408875053416e+05, -1.166678715905606e+05, -9.045290068863411e+00, -4.127723798961415e+04, -4.127723798961430e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
