
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.019759937598165e+01, -2.019763878138262e+01, -2.019785997723373e+01, -2.019727276063454e+01, -2.019757390812464e+01, -2.019757390812464e+01, -3.089295355902967e+00, -3.089280650815567e+00, -3.089023568242233e+00, -3.090110148287441e+00, -3.089359092496441e+00, -3.089359092496441e+00, -4.106267476104631e-01, -4.100643599790267e-01, -3.974137607871903e-01, -4.021883693339896e-01, -4.030653102920096e-01, -4.030653102920096e-01, -3.170775978860578e-02, -3.316238743544632e-02, -5.121361520085506e-01, -1.491640044974247e-02, -2.490731604427401e-02, -2.490731604427410e-02, -9.678681173903403e-07, -1.133091773818653e-06, -2.126320074197921e-04, -1.836594095599310e-07, -5.367026454676242e-07, -5.367026454676253e-07, -4.682557566121232e+00, -4.682780226498013e+00, -4.682574449324246e+00, -4.682770880673633e+00, -4.682666567345187e+00, -4.682666567345187e+00, -1.697554252345474e+00, -1.708892171371672e+00, -1.694147634768289e+00, -1.704122849561537e+00, -1.705542083704541e+00, -1.705542083704541e+00, -3.355888168239697e-01, -3.836760166766452e-01, -2.981295071119691e-01, -3.207135947601805e-01, -3.446216229102406e-01, -3.446216229102406e-01, -4.976174837624264e-03, -3.024895279011514e-02, -3.910569595001486e-03, -1.558539384612636e+00, -8.372629683162432e-03, -8.372629683162432e-03, -8.452749978521092e-08, -1.716648437724530e-07, -7.841370653930942e-08, -1.067610441397417e-03, -1.611178023308955e-07, -1.611178008714422e-07, -3.450922426570739e-01, -3.401045982098548e-01, -3.418052789819145e-01, -3.432519590941318e-01, -3.425231377661337e-01, -3.425231377661337e-01, -3.323173075088091e-01, -2.541403628789856e-01, -2.747357934979677e-01, -2.964924060909194e-01, -2.852318848807149e-01, -2.852318848807149e-01, -4.100703120337953e-01, -5.256752534270408e-02, -7.888242054168826e-02, -1.404974599794246e-01, -1.061248016688092e-01, -1.061248016688092e-01, -2.219390799785606e-01, -1.823438220743543e-04, -5.029090367285700e-04, -1.344037001168443e-01, -2.464539255630822e-03, -2.464539255630670e-03, -2.719358950578525e-06, -3.268630182860865e-09, -3.054519566234131e-08, -1.989313061213536e-03, -1.241876711970670e-07, -1.241876683366951e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.543259699050306e+01, -2.543256607897574e+01, -2.543270475552326e+01, -2.543264470674451e+01, -2.543303380929397e+01, -2.543311878193831e+01, -2.543181258401031e+01, -2.543156737595660e+01, -2.543265802834457e+01, -2.543217835807941e+01, -2.543265802834457e+01, -2.543217835807941e+01, -3.923977305136489e+00, -3.924112064666478e+00, -3.924018466706277e+00, -3.924157540552188e+00, -3.925058217196753e+00, -3.925323068301150e+00, -3.923925205122816e+00, -3.924189443340523e+00, -3.923244339754552e+00, -3.925147341203202e+00, -3.923244339754552e+00, -3.925147341203202e+00, -5.891457269491372e-01, -5.931610031749930e-01, -5.873633507790184e-01, -5.922907010069043e-01, -5.595100984604598e-01, -5.525892779985987e-01, -5.615544220843586e-01, -5.637886765756025e-01, -5.933982406772470e-01, -5.253252084166076e-01, -5.933982406772470e-01, -5.253252084166076e-01, -6.880198521055096e-02, -7.122974473623672e-02, -7.215633648426284e-02, -7.500886730339346e-02, -7.046712719004621e-01, -7.373522989428074e-01, -3.238126543861085e-02, -3.270804299606710e-02, -5.010519007581234e-02, -3.431316047083842e-02, -5.010519007581234e-02, -3.431316047083816e-02, -1.800504260335345e-06, -2.142542845886125e-06, -2.085867484014029e-06, -2.536956657673501e-06, -4.692031117516742e-04, -5.318291946583045e-04, -3.799767484033306e-07, -3.616103307340770e-07, -1.237668281872403e-06, -2.434345603451695e-07, -1.237668281874336e-06, -2.434345603456032e-07, -6.103508168863524e+00, -6.101994563003438e+00, -6.105918059978217e+00, -6.104328527628800e+00, -6.103641212134393e+00, -6.102077110751416e+00, -6.105713205990993e+00, -6.104193121672589e+00, -6.104741128652406e+00, -6.103167875150692e+00, -6.104741128652406e+00, -6.103167875150692e+00, -2.006294957719144e+00, -2.006179912893177e+00, -2.026206595935558e+00, -2.025556354009655e+00, -1.983587772708663e+00, -1.989338135485375e+00, -2.000810554074195e+00, -2.006726155012893e+00, -2.033799823649128e+00, -2.019648836913017e+00, -2.033799823649128e+00, -2.019648836913017e+00, -5.121716274096271e-01, -5.107698724151549e-01, -5.743073097066969e-01, -5.746928767446379e-01, -4.503819832169669e-01, -4.689532749725431e-01, -4.795132485588566e-01, -4.962826033848259e-01, -5.375358877384036e-01, -5.087802629316540e-01, -5.375358877384036e-01, -5.087802629316541e-01, -1.105048771441994e-02, -1.114949329712367e-02, -5.501863194156957e-02, -5.528137055065781e-02, -8.649618486614309e-03, -9.249385062892523e-03, -2.149788230202674e+00, -2.148844432718580e+00, -1.927440394574101e-02, -1.979112652106693e-02, -1.927440394574101e-02, -1.979112652106693e-02, -1.602888587695044e-07, -1.796048750062842e-07, -3.394135730395953e-07, -3.547478732718484e-07, -1.497647550528438e-07, -1.756293895761393e-07, -2.702177053901345e-03, -2.734833177568115e-03, -1.598585324611359e-07, -3.943989709387023e-07, -1.598585324650308e-07, -3.943989689131212e-07, -5.140853139409680e-01, -5.162369369055912e-01, -5.121316719688883e-01, -5.143118424088976e-01, -5.129845063743794e-01, -5.151655328360211e-01, -5.135664600577305e-01, -5.157175930965510e-01, -5.132911236384841e-01, -5.154567036345163e-01, -5.132911236384841e-01, -5.154567036345163e-01, -4.942860579468170e-01, -4.960386311603395e-01, -3.944976795626362e-01, -3.965158371613234e-01, -4.269760272320237e-01, -4.291767149374927e-01, -4.570932214547463e-01, -4.588483793566101e-01, -4.422307276749786e-01, -4.440348898359264e-01, -4.422307276749786e-01, -4.440348898359264e-01, -6.110425605590514e-01, -6.122816171600131e-01, -9.178637539551324e-02, -9.249121894902512e-02, -1.406950944705716e-01, -1.426442503152212e-01, -2.405797968512460e-01, -2.419970218842848e-01, -1.892131857274111e-01, -1.892201740338674e-01, -1.892131857274110e-01, -1.892201740338673e-01, -3.514250983838119e-01, -3.543011129997360e-01, -4.209387063432816e-04, -4.278470453595107e-04, -1.172983688752731e-03, -1.259128038306502e-03, -2.297301757606824e-01, -2.332835689610565e-01, -6.231520935397515e-03, -6.538732650536492e-03, -6.231520935397300e-03, -6.538732650536444e-03, -5.341902901224395e-06, -5.905167243693318e-06, -6.551932423378156e-09, -6.596523847460897e-09, -5.564724461568794e-08, -6.673731381873565e-08, -5.140787654159694e-03, -5.248183302123097e-03, -1.362542407080038e-07, -3.049262222159703e-07, -1.362542407010611e-07, -3.049262169840378e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbesol_whs_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbesol_whs", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.246149507226099e-09, 3.924232368725627e-10, -8.246194826578616e-09, -8.246060358681365e-09, 3.924296816115061e-10, -8.246129167663746e-09, -8.245729038471139e-09, 3.924376028377716e-10, -8.245670815734076e-09, -8.246748496282778e-09, 3.923421653813450e-10, -8.246956688011728e-09, -8.246114970880473e-09, 3.923951125479222e-10, -8.246396662937553e-09, -8.246114970880473e-09, 3.923951125479222e-10, -8.246396662937553e-09, -1.026364740124559e-05, 2.160283788062830e-06, -1.026546539987255e-05, -1.026346120080403e-05, 2.160679371320279e-06, -1.026544243409566e-05, -1.026092497001202e-05, 2.169596379790034e-06, -1.026116595198312e-05, -1.025909613963304e-05, 2.152143033245858e-06, -1.025980085357581e-05, -1.027053771290546e-05, 2.160504755167462e-06, -1.025642863330104e-05, -1.027053771290546e-05, 2.160504755167462e-06, -1.025642863330104e-05, -3.401360008777672e-03, 3.502464509038655e-03, -3.342251295828069e-03, -3.434199904904628e-03, 3.484212993337901e-03, -3.361541048664780e-03, -4.002133857739511e-03, 2.998335795936386e-03, -4.108001857216359e-03, -3.961666729903984e-03, 2.923016200794973e-03, -3.929739755556194e-03, -3.495628315771602e-03, 2.961848518020074e-03, -4.466984593853629e-03, -3.495628315771602e-03, 2.961848518020074e-03, -4.466984593853629e-03, 3.631700069199126e-02, 4.036523593851310e-01, 5.155044003735434e-02, 5.010851019003304e-02, 4.167732807198712e-01, 6.713026980211304e-02, -2.292042283735992e-03, 1.877927402871148e-03, -1.965998078309506e-03, -3.873958117976245e-02, 3.631115076261158e-01, -3.744542608900475e-02, -1.095525209962359e-02, 2.895021812397551e-01, -4.229054804654128e-02, -1.095525209962578e-02, 2.895021812397556e-01, -4.229054804654092e-02, 8.903928761983176e-03, 1.780923863322236e-02, 8.903691323408592e-03, 1.047209553357050e-02, 2.094603145755870e-02, 1.047171731016660e-02, 4.775141307731186e-02, 1.058875238306064e-01, 4.610946666090207e-02, 3.164268304551731e-03, 6.328648217783347e-03, 3.164273809426484e-03, 4.641784717645057e-03, 9.284352922054217e-03, 4.642104214952087e-03, 4.641784717877664e-03, 9.284352921806719e-03, 4.642104215175268e-03, -2.119028375179809e-06, 5.447862516555482e-07, -2.121264796573000e-06, -2.116389884058338e-06, 5.480625369107096e-07, -2.118659678207304e-06, -2.118894835461626e-06, 5.449167399912604e-07, -2.121157199351830e-06, -2.116590696712436e-06, 5.478087633638220e-07, -2.118832913415634e-06, -2.117693027081981e-06, 5.464531415813659e-07, -2.119947872301057e-06, -2.117693027081981e-06, 5.464531415813659e-07, -2.119947872301057e-06, -8.890406443620969e-05, 1.379628549525131e-05, -8.892173691037181e-05, -8.669218470789449e-05, 1.369758735885949e-05, -8.678118626087510e-05, -9.023417180649769e-05, 1.326989552314756e-05, -8.996206676045153e-05, -8.830821015571647e-05, 1.318810272778560e-05, -8.800267485826756e-05, -8.669229491356452e-05, 1.400297483065355e-05, -8.755407938404981e-05, -8.669229491356452e-05, 1.400297483065355e-05, -8.755407938404981e-05, -2.812156907425241e-03, 1.016619295788007e-02, -2.877962116036397e-03, -3.974579943081761e-04, 1.125460881018527e-02, -3.868885108991010e-04, -3.979620185806240e-03, 1.338680806093630e-02, -2.863458178970742e-03, -5.779864028373043e-04, 1.749442325527369e-02, 3.127504395623801e-04, -1.962011482064414e-03, 1.001437922971996e-02, -3.182403518183862e-03, -1.962011482064420e-03, 1.001437922971996e-02, -3.182403518183861e-03, -3.578033444305245e-02, 2.363423791386441e-01, -4.007098666948594e-02, -8.658884268702613e-02, 1.722295977524940e-01, -8.562478069744772e-02, -1.050796113047270e-02, 2.428965328721264e-01, -2.475771841041599e-02, -6.754159724812770e-05, 9.942030332770422e-05, -6.774143003871597e-05, 7.910332033919915e-03, 4.172491666969919e-01, -1.692954679768130e-02, 7.910332033919915e-03, 4.172491666969919e-01, -1.692954679768130e-02, 3.085538835559531e-03, 6.171121297633935e-03, 3.085538312465902e-03, 3.890403746234676e-03, 7.780920747421459e-03, 3.890404409163026e-03, 3.875130610901671e-02, 7.750279055850653e-02, 3.875126801696823e-02, 6.986903535231784e-02, 2.494517602975471e-01, 7.009735563121336e-02, 1.483122219233692e-02, 2.966254161607970e-02, 1.483107536783426e-02, 1.483122219235155e-02, 2.966254161369759e-02, 1.483107536782985e-02, 1.279479829881785e-03, 1.792659001284867e-02, 1.373216314660873e-03, 1.818150723955411e-04, 1.614886381961827e-02, 2.788734509000055e-04, 5.416372053924576e-04, 1.672929276764286e-02, 6.379905507184593e-04, 8.602255326209248e-04, 1.724549016285097e-02, 9.547364760961611e-04, 6.985204609254812e-04, 1.698327859994344e-02, 7.939472139879720e-04, 6.985204609254812e-04, 1.698327859994344e-02, 7.939472139879720e-04, 2.103648791669155e-03, 2.085943275450910e-02, 2.188698285022522e-03, -6.087443698300193e-03, 1.502913877693196e-02, -5.916189467290346e-03, -3.794432263115124e-03, 1.614687317543641e-02, -3.637615642875291e-03, -1.521945338924066e-03, 1.764044252227230e-02, -1.411543874768759e-03, -2.654013011954276e-03, 1.687721053499117e-02, -2.530284904889700e-03, -2.654013011954276e-03, 1.687721053499117e-02, -2.530284904889700e-03, -6.707131840040636e-04, 9.031795125911575e-03, -6.411123286029470e-04, -5.926878881790857e-02, 1.154815614433179e-01, -5.764302756643155e-02, -2.473035457207010e-02, 9.336554331022104e-02, -2.255776316459817e-02, -1.691302499996918e-03, 6.569618122322450e-02, -1.234997311466646e-03, -7.159694664284649e-03, 8.207722746589632e-02, -7.152469111237153e-03, -7.159694664284774e-03, 8.207722746589632e-02, -7.152469111237125e-03, -6.560475669991872e-03, 2.152487737361528e-02, -6.227541829117810e-03, 3.924966865108899e-02, 8.721472124114714e-02, 3.909253127316652e-02, 4.823687331121802e-02, 1.318486983034387e-01, 4.511565046719634e-02, 1.042228316978156e-02, 9.650295197887153e-02, 1.171595546272158e-02, 9.818944705535892e-02, 4.165989187035299e-01, 6.954941239007961e-02, 9.818944705536398e-02, 4.165989187035304e-01, 6.954941239008372e-02, 1.109261231492161e-02, 2.219217594856401e-02, 1.109180028955989e-02, 4.220014014742463e-03, 8.440029620734958e-03, 4.220013382852360e-03, 5.281178406150464e-03, 1.056237513262514e-02, 5.281174931054119e-03, 8.955586091701158e-02, 3.870874530572532e-01, 8.593263762758331e-02, 1.893079370868658e-02, 3.786174589046336e-02, 1.893073611403885e-02, 1.893079371199424e-02, 3.786174589577986e-02, 1.893073611733564e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
