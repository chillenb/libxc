
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lrc_wpbeh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.671717983219453e+01, -1.671719965354297e+01, -1.671734819001199e+01, -1.671702241306879e+01, -1.671718978284576e+01, -1.671718978284576e+01, -2.729990622436747e+00, -2.729971324103194e+00, -2.729555943488326e+00, -2.730861569851668e+00, -2.729992536860069e+00, -2.729992536860069e+00, -4.956414538047576e-01, -4.954621001251892e-01, -4.925701686552755e-01, -4.962531842908731e-01, -4.955738669691769e-01, -4.955738669691769e-01, -1.008816219989383e-01, -1.022411277555807e-01, -5.940702823979892e-01, -6.746348294501210e-02, -1.012768932407543e-01, -1.012768932407543e-01, -3.420917761950057e-05, -3.955682318180199e-05, -5.378275988178060e-03, -3.647414066969668e-06, -3.828188206426114e-05, -3.828188206426114e-05, -3.994784277374760e+00, -3.994509913686676e+00, -3.994760744253687e+00, -3.994547320474836e+00, -3.994636806697336e+00, -3.994636806697336e+00, -1.621723629454809e+00, -1.629754511404580e+00, -1.622389104181471e+00, -1.628629860948146e+00, -1.626345918426354e+00, -1.626345918426354e+00, -4.110860476180613e-01, -4.473819328846778e-01, -3.880414142630407e-01, -4.038216043227343e-01, -4.277365482017141e-01, -4.277365482017141e-01, -4.182254933758697e-02, -1.111602090440671e-01, -4.027705142137116e-02, -1.431766655527365e+00, -5.240467113781461e-02, -5.240467113781461e-02, -3.273480078993446e-06, -4.893866209088871e-06, -2.057376758846771e-06, -1.427605405426061e-02, -3.699154803891271e-06, -3.699154803891277e-06, -4.242680835587446e-01, -4.206912465918045e-01, -4.218794728496035e-01, -4.228658258116210e-01, -4.223643872514530e-01, -4.223643872514530e-01, -4.097234189722922e-01, -3.549016804682524e-01, -3.682032599695569e-01, -3.821012206490686e-01, -3.747587180030994e-01, -3.747587180030994e-01, -4.709089494849963e-01, -1.481616940367035e-01, -1.787446950018747e-01, -2.322058397764456e-01, -2.031885015930930e-01, -2.031885015930928e-01, -3.154910261788040e-01, -4.190729561145995e-03, -1.080634265185997e-02, -2.144849593357798e-01, -2.658943195424617e-02, -2.658943195424618e-02, -5.642069612390664e-05, -9.997873015855199e-08, -6.858318103391309e-07, -2.359472851796864e-02, -2.268427451544218e-06, -2.268427451264389e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lrc_wpbeh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.015048833212467e+01, -2.015055863072499e+01, -2.015087715879372e+01, -2.014972590606227e+01, -2.015052536416233e+01, -2.015052536416233e+01, -3.248783966914335e+00, -3.248819833196003e+00, -3.249939282403218e+00, -3.248696858011520e+00, -3.248816199181549e+00, -3.248816199181549e+00, -5.919011652370438e-01, -5.906447716077696e-01, -5.583837230067612e-01, -5.637494438123132e-01, -5.914456673150439e-01, -5.914456673150439e-01, -1.225044698403729e-01, -1.259323831289392e-01, -7.326034523256536e-01, -7.587946648849757e-02, -1.235285010048411e-01, -1.235285010048411e-01, -7.027144998196929e-05, -8.152940714042275e-05, -1.044366306551097e-02, -7.319804244958480e-06, -7.886278123522489e-05, -7.886278123522489e-05, -4.996918129456041e+00, -4.999240328559067e+00, -4.997155068284306e+00, -4.998960709865425e+00, -4.998109491002643e+00, -4.998109491002643e+00, -1.729070800295392e+00, -1.743386874068199e+00, -1.721451064194964e+00, -1.732510102790239e+00, -1.749055410388546e+00, -1.749055410388546e+00, -5.436128404996209e-01, -6.116889054429595e-01, -5.131479036463175e-01, -5.528306618652484e-01, -5.689505243376263e-01, -5.689505243376263e-01, -5.344140241799940e-02, -1.195761781338103e-01, -5.127692675724674e-02, -1.895079805242272e+00, -6.175078966362019e-02, -6.175078966362019e-02, -6.568189875592433e-06, -9.831937661477681e-06, -4.135377302685330e-06, -2.326925108943203e-02, -7.431953524547927e-06, -7.431953524545816e-06, -5.801293512942944e-01, -5.767089392477484e-01, -5.782088742667602e-01, -5.791711402511877e-01, -5.787128210737427e-01, -5.787128210737427e-01, -5.601894773825371e-01, -4.513552561372050e-01, -4.870058691746159e-01, -5.189992942906148e-01, -5.031110309947732e-01, -5.031110309947731e-01, -6.423010646813054e-01, -1.620395934844724e-01, -2.078044584576021e-01, -3.038185909881527e-01, -2.526316304790637e-01, -2.526316304790636e-01, -4.027781679682301e-01, -8.451037435114991e-03, -1.889610239150254e-02, -2.951904678949524e-01, -3.688774863668302e-02, -3.688774863668313e-02, -1.171632133320754e-04, -2.000557754182850e-07, -1.373609475382104e-06, -3.319478065133406e-02, -4.556082038382675e-06, -4.556082038102397e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lrc_wpbeh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lrc_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.449497942053916e-09, -5.449460912080789e-09, -5.449234784500312e-09, -5.449842366836081e-09, -5.449478923044053e-09, -5.449478923044053e-09, -6.525128619738137e-06, -6.525126605653608e-06, -6.524019793387588e-06, -6.520584010243276e-06, -6.525020609499561e-06, -6.525020609499561e-06, -3.049874951323485e-03, -3.066776586843095e-03, -3.438226338069589e-03, -3.344426829593268e-03, -3.056029943918120e-03, -3.056029943918120e-03, -2.460925411181243e-01, -2.320380633464663e-01, -1.513276533028862e-03, -5.027153763152687e-01, -2.419331713497323e-01, -2.419331713497323e-01, 2.661029004812573e-02, 2.807161803658166e-02, -4.211039187648292e-01, 5.485153476028320e-03, 2.948283492331647e-02, 2.948283492331647e-02, -1.379818656054415e-06, -1.378159022014163e-06, -1.379648582650527e-06, -1.378358348289207e-06, -1.378972271470293e-06, -1.378972271470293e-06, -5.269383457722479e-05, -5.161614109351320e-05, -5.276664122161682e-05, -5.193349563048342e-05, -5.183089198083952e-05, -5.183089198083952e-05, -3.068443504493627e-03, 8.253424967929390e-04, -3.727305328467195e-03, 2.389796613224346e-04, -2.407204850212600e-03, -2.407204850212600e-03, -6.012234170131618e-01, -2.148184790179023e-01, -6.685649565963178e-01, -3.306335326465397e-05, -6.279218452431570e-01, -6.279218452431570e-01, 5.658546779597095e-03, 7.022106633798713e-03, 2.141493190473667e-02, -7.298377688670108e-01, 1.089007274992946e-02, 1.089007275021022e-02, 3.455124581868243e-03, 1.610484975964190e-03, 2.208211372779507e-03, 2.715759020032085e-03, 2.456657166233936e-03, 2.456657166233934e-03, 4.477727010975876e-03, -7.049052090768245e-03, -4.430839828768495e-03, -1.643463687004848e-03, -3.092484612000495e-03, -3.092484612000491e-03, 3.855918033419054e-04, -1.161333916643776e-01, -6.810815034776445e-02, -2.126675746698892e-02, -4.071668403476667e-02, -4.071668403476675e-02, -9.946527412395245e-03, -3.019428001875510e-01, -5.572994256187780e-01, -1.251761215892946e-02, -8.689448498638217e-01, -8.689448498638157e-01, 1.932812721178217e-02, 1.779678205750914e-03, 4.323621776177873e-03, -9.946309759576425e-01, 1.477432776836757e-02, 1.477432776754492e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
