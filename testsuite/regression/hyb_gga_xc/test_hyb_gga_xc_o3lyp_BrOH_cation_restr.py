
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_o3lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.865222977381960e+01, -1.865227033963535e+01, -1.865248470736955e+01, -1.865188048535143e+01, -1.865219223904020e+01, -1.865219223904020e+01, -3.117584430007706e+00, -3.117569949019520e+00, -3.117311248262249e+00, -3.118343517595833e+00, -3.117640838272821e+00, -3.117640838272821e+00, -6.469365440224933e-01, -6.467354750366880e-01, -6.447117909322939e-01, -6.490667908813895e-01, -6.474988249290436e-01, -6.474988249290436e-01, -2.087475750257432e-01, -2.092749546038452e-01, -7.450226768912367e-01, -1.829790129114145e-01, -1.928967835889929e-01, -1.928967835889929e-01, -1.373391943553737e-02, -1.444664375887607e-02, -7.100783009500214e-02, -7.972480805263584e-03, -9.998408530596369e-03, -9.998408530596373e-03, -4.576817840786729e+00, -4.577237990637069e+00, -4.576842173629839e+00, -4.577212966593136e+00, -4.577027666835296e+00, -4.577027666835296e+00, -1.885637367851353e+00, -1.894131383843841e+00, -1.887285531535030e+00, -1.894636897102351e+00, -1.889698341875743e+00, -1.889698341875743e+00, -5.552783068821732e-01, -5.956397589582426e-01, -5.171015679895750e-01, -5.308027704730152e-01, -5.627147355397302e-01, -5.627147355397302e-01, -1.426408118949004e-01, -2.269039434553619e-01, -1.343589186582550e-01, -1.715786481745581e+00, -1.591907269514724e-01, -1.591907269514724e-01, -6.162577746453490e-03, -7.794951919281911e-03, -5.969964582097978e-03, -1.005286641934709e-01, -7.183359969450864e-03, -7.183359969450866e-03, -5.531051891441817e-01, -5.500645964689138e-01, -5.510813080004752e-01, -5.519618199174874e-01, -5.515161242677710e-01, -5.515161242677710e-01, -5.389725021313122e-01, -4.800349040409463e-01, -4.932623162702763e-01, -5.092381310916791e-01, -5.006454195222566e-01, -5.006454195222566e-01, -6.230669725921494e-01, -2.653732981433169e-01, -2.941031570163120e-01, -3.470305282295056e-01, -3.164546655332226e-01, -3.164546655332226e-01, -4.441194521542247e-01, -6.862876151781079e-02, -8.535547978478233e-02, -3.295143466619262e-01, -1.203242914487952e-01, -1.203242914487953e-01, -1.930174146796929e-02, -2.098587772938855e-03, -4.389945511155410e-03, -1.149507912537148e-01, -6.650393319652236e-03, -6.650393319652232e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_o3lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.383433765727554e+01, -2.383444069200145e+01, -2.383486015883080e+01, -2.383332795045936e+01, -2.383413630906343e+01, -2.383413630906343e+01, -3.862255227742514e+00, -3.862328017891732e+00, -3.864101297377928e+00, -3.861735026953233e+00, -3.862433852383590e+00, -3.862433852383590e+00, -7.500880146481606e-01, -7.480482325988664e-01, -6.953831575491922e-01, -7.024610816933483e-01, -7.023311084988472e-01, -7.023311084988472e-01, -1.791785904663848e-01, -1.809482498726682e-01, -8.795715945529334e-01, -1.737840831059119e-01, -1.676606638361307e-01, -1.676606638361308e-01, -1.823205603292530e-02, -1.917160197048620e-02, -9.384506996553699e-02, -1.060413082862692e-02, -1.328927898503473e-02, -1.328927898503474e-02, -5.944582036891667e+00, -5.947096143434154e+00, -5.944695229958586e+00, -5.946914893295725e+00, -5.945859161815836e+00, -5.945859161815836e+00, -1.937306378777042e+00, -1.960501185707679e+00, -1.905463998129410e+00, -1.925884248106825e+00, -1.965632860308862e+00, -1.965632860308862e+00, -7.034249165945943e-01, -7.830845517272482e-01, -6.485841493073370e-01, -6.961357036908588e-01, -7.181941497416979e-01, -7.181941497416979e-01, -1.850075152074283e-01, -2.030227906552334e-01, -1.783945354497713e-01, -2.262652915636874e+00, -1.690471494900775e-01, -1.690471494900775e-01, -8.200178656493340e-03, -1.036793864825799e-02, -7.939648902413967e-03, -1.378251830568356e-01, -9.552124273794758e-03, -9.552124273794762e-03, -7.284619326152640e-01, -7.233632895567875e-01, -7.253542458087208e-01, -7.268380892523334e-01, -7.261140102777245e-01, -7.261140102777245e-01, -7.096621308616897e-01, -5.641806541803832e-01, -6.144611377154184e-01, -6.590219419528427e-01, -6.373983297738139e-01, -6.373983297738139e-01, -8.186487550029856e-01, -2.272604017631097e-01, -2.671702267617763e-01, -3.995733320264684e-01, -3.243682031719025e-01, -3.243682031719025e-01, -5.205467647631870e-01, -9.060563322143228e-02, -1.190509623095870e-01, -4.018921000951897e-01, -1.519700506304843e-01, -1.519700506304844e-01, -2.557133933488889e-02, -2.795217471886203e-03, -5.843515885840048e-03, -1.485092688773083e-01, -8.844276279694075e-03, -8.844276279694077e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_o3lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_o3lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.556774480547968e-09, -2.556690709982380e-09, -2.556398218389006e-09, -2.557642957835164e-09, -2.556979339245864e-09, -2.556979339245864e-09, -4.407749311870962e-06, -4.407123105602770e-06, -4.392204042990466e-06, -4.414800653744048e-06, -4.406577740689944e-06, -4.406577740689944e-06, -3.713117747458989e-03, -3.751869050184071e-03, -4.701751488483190e-03, -4.534350441462801e-03, -4.553135483454596e-03, -4.553135483454596e-03, -7.102298311886837e-01, -6.984790054775156e-01, -1.934646470549093e-03, -8.738385166515775e-01, -9.250369869856893e-01, -9.250369869856876e-01, -5.678735520895504e+00, -5.999097824265768e+00, 4.445394757773576e+00, -5.161809755182719e+00, -6.557301341782690e+00, -6.557301341783008e+00, -5.518133667870856e-07, -5.477716289418104e-07, -5.516430424395829e-07, -5.480747786399875e-07, -5.497561133043493e-07, -5.497561133043493e-07, -6.521142545794350e-05, -6.300584486427332e-05, -6.740068664526820e-05, -6.541851637547603e-05, -6.291730493729168e-05, -6.291730493729168e-05, -3.869668737233130e-03, -4.382567792230019e-04, -5.799867977049122e-03, -1.231786345074250e-03, -3.286294100716953e-03, -3.286294100716953e-03, 2.404973995867722e-01, -4.345329122996653e-01, 5.426441032942788e-01, -1.131417099216877e-05, -9.114818378520207e-01, -9.114818378520207e-01, -6.801628536193315e+00, -6.075014803403953e+00, -3.814946632685612e+01, 2.841230391654307e+00, -1.775317780359433e+01, -1.775317780359059e+01, 5.800112300789794e-04, -4.483200199405593e-04, -9.310110360344412e-05, 2.062183074389175e-04, 5.597523971580722e-05, 5.597523971580722e-05, 1.042040802560916e-03, -1.193584831287797e-02, -7.509266505347444e-03, -3.579918866092263e-03, -5.482468362701118e-03, -5.482468362701118e-03, -4.830327297351596e-04, -2.611382206162074e-01, -1.607864591306369e-01, -4.898261646518283e-02, -9.724721350839924e-02, -9.724721350839928e-02, -1.660684378586397e-02, 4.416590198148660e+00, 5.019595516468474e+00, -4.603266348664634e-02, 3.177339518590180e-01, 3.177339518590204e-01, -4.574907797436650e+00, -2.981603617284023e+01, -1.442942501493945e+01, 8.169577960931897e-01, -2.242402565459434e+01, -2.242402565458710e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
