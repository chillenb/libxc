
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_b97_1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.654204262588499e+01, -1.654206633753273e+01, -1.654222143982570e+01, -1.654186764197062e+01, -1.654204595533069e+01, -1.654204595533069e+01, -2.796744722233041e+00, -2.796719218274704e+00, -2.796197350420416e+00, -2.797625888531130e+00, -2.796780214830834e+00, -2.796780214830834e+00, -5.863714504980118e-01, -5.862513815364049e-01, -5.851860671517738e-01, -5.891339099601456e-01, -5.877127919861421e-01, -5.877127919861421e-01, -1.804046706363290e-01, -1.818888358559963e-01, -6.741608222357961e-01, -1.469483441988231e-01, -1.600150691554249e-01, -1.600150691554249e-01, -4.604066376177230e-03, -4.885969284577384e-03, -3.706385219955870e-02, -2.454956638155025e-03, -3.183298466666323e-03, -3.183298466666322e-03, -4.046831594470380e+00, -4.046597370123624e+00, -4.046828090645748e+00, -4.046621187741906e+00, -4.046708676105048e+00, -4.046708676105048e+00, -1.715165514160357e+00, -1.722769169764616e+00, -1.716863037058300e+00, -1.723522424005447e+00, -1.718605286502456e+00, -1.718605286502456e+00, -5.001482892785162e-01, -5.303534183447626e-01, -4.667870220711300e-01, -4.749387863447316e-01, -5.061944659808078e-01, -5.061944659808078e-01, -1.066835770977287e-01, -1.903362623484650e-01, -9.855308097097716e-02, -1.507611947666529e+00, -1.221070218507342e-01, -1.221070218507342e-01, -1.833665021400999e-03, -2.392863494626345e-03, -1.770296400594845e-03, -6.442456033028635e-02, -2.181426096665964e-03, -2.181426096665967e-03, -4.848283567524305e-01, -4.902933406939674e-01, -4.896675266452479e-01, -4.883647884034854e-01, -4.891363550512391e-01, -4.891363550512391e-01, -4.655987415524390e-01, -4.357814422374579e-01, -4.458785893576691e-01, -4.577313803785095e-01, -4.512867764246378e-01, -4.512867764246378e-01, -5.548139336454631e-01, -2.304108424800525e-01, -2.626001203555057e-01, -3.162997327981512e-01, -2.872408853269503e-01, -2.872408853269503e-01, -4.035312032198450e-01, -3.520975105524039e-02, -5.056980496489668e-02, -3.002319667402352e-01, -8.299095348477864e-02, -8.299095348477861e-02, -6.882366914085821e-03, -5.604835963683541e-04, -1.255238319299168e-03, -7.778164194628780e-02, -1.999125757697107e-03, -1.999125757697100e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_b97_1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.003346337949573e+01, -2.003354903279101e+01, -2.003389842999570e+01, -2.003262471391233e+01, -2.003329658543857e+01, -2.003329658543857e+01, -3.300009156459609e+00, -3.300062230139225e+00, -3.301367379839591e+00, -3.299705685320394e+00, -3.300149933780577e+00, -3.300149933780577e+00, -6.659853336370157e-01, -6.646254036736965e-01, -6.319822962658477e-01, -6.375193924183943e-01, -6.369480540178111e-01, -6.369480540178111e-01, -1.926884684429095e-01, -1.947890846436253e-01, -7.747825423345523e-01, -1.599372858875280e-01, -1.718062608086281e-01, -1.718062608086279e-01, -6.387313070692288e-03, -6.782822687405446e-03, -5.093113739978029e-02, -3.382206017693107e-03, -4.398644583460833e-03, -4.398644583460832e-03, -5.050534967260192e+00, -5.052828132576902e+00, -5.050637495934959e+00, -5.052662054505053e+00, -5.051699808931216e+00, -5.051699808931216e+00, -1.747628796777657e+00, -1.764203443738367e+00, -1.728673324963820e+00, -1.743212300872435e+00, -1.766089081092697e+00, -1.766089081092697e+00, -6.182283779675187e-01, -6.800576903147998e-01, -5.710965091691776e-01, -6.111731128117678e-01, -6.312667388200127e-01, -6.312667388200127e-01, -1.268408397328485e-01, -1.976620214000894e-01, -1.192090666611257e-01, -1.939137517773759e+00, -1.384213954613286e-01, -1.384213954613286e-01, -2.518290960619835e-03, -3.295841208906249e-03, -2.431428442044915e-03, -8.385283234055962e-02, -3.002399382238083e-03, -3.002399382238087e-03, -6.099909784859276e-01, -6.279914862018966e-01, -6.236257448548843e-01, -6.181595517552056e-01, -6.210963459144101e-01, -6.210963459144101e-01, -5.890665109687192e-01, -5.033839935607206e-01, -5.419414108894670e-01, -5.818062486209199e-01, -5.619479911332624e-01, -5.619479911332624e-01, -7.123560495977677e-01, -2.348532109667220e-01, -2.726161686250423e-01, -3.636229528792021e-01, -3.117377357865529e-01, -3.117377357865529e-01, -4.660621671970522e-01, -4.853771822647265e-02, -6.808857476150418e-02, -3.607050127750088e-01, -1.026064561410332e-01, -1.026064561410330e-01, -9.585366342846485e-03, -7.610276311030259e-04, -1.717175798990954e-03, -9.749674934925928e-02, -2.748982128506542e-03, -2.748982128506535e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_b97_1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_b97_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.038183530912060e-09, -5.038125419989248e-09, -5.037853558949746e-09, -5.038718432233057e-09, -5.038267160505799e-09, -5.038267160505799e-09, -6.567432620882470e-06, -6.567293324589533e-06, -6.563430792430163e-06, -6.565255814610283e-06, -6.566647050525241e-06, -6.566647050525241e-06, -3.834710688083245e-03, -3.852767767008057e-03, -4.233049280839450e-03, -4.107604718986965e-03, -4.137630696468443e-03, -4.137630696468443e-03, -3.546174610386535e-01, -3.494353238365918e-01, -2.130958556442230e-03, -5.275371416143694e-01, -4.688590550630629e-01, -4.688590550630645e-01, 8.930682834598860e-01, 9.012388037383088e-01, -5.568285371233248e-01, 1.152997253434279e+00, 1.298474082223664e+00, 1.298474082222527e+00, -1.298597060744363e-06, -1.297119204494292e-06, -1.298527923241417e-06, -1.297223116503452e-06, -1.297847102083838e-06, -1.297847102083838e-06, -6.121726465175203e-05, -5.967780041008994e-05, -6.207889709873227e-05, -6.070638278537996e-05, -5.994037011976703e-05, -5.994037011976703e-05, -5.328554185979198e-03, -5.071216180713535e-03, -7.461042952478913e-03, -4.967487477961880e-03, -4.760549789822212e-03, -4.760549789822212e-03, -6.705267001670711e-01, -2.645741972316283e-01, -7.252635641059328e-01, -7.420757979546908e-05, -7.278305791954052e-01, -7.278305791954052e-01, 1.693151608310918e+00, 1.371553781278194e+00, 9.619175951990975e+00, -9.090621598321615e-01, 4.160508632544834e+00, 4.160508632561362e+00, -3.730190109798247e-02, -7.629305914376239e-03, -1.218302332021224e-02, -1.940951771273143e-02, -1.525572538212467e-02, -1.525572538212467e-02, -7.866940530972870e-02, -1.214599199207179e-02, -9.272537282012340e-03, -5.707218740921205e-03, -7.555819680321474e-03, -7.555819680321474e-03, -3.667289238043841e-03, -1.533557270549556e-01, -9.970183123747565e-02, -4.408240994918101e-02, -6.986053020292589e-02, -6.986053020292581e-02, -1.652879757534616e-02, -4.852949440290666e-01, -6.610179703208859e-01, -4.731969487469344e-02, -1.047828914987344e+00, -1.047828914987355e+00, 4.864973872122659e-01, 9.669867748141362e+00, 4.006871903411424e+00, -1.050287635749735e+00, 5.425679124926029e+00, 5.425679124940315e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
