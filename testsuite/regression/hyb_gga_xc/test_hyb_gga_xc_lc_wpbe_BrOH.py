
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_lc_wpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.075355616085496e+01, -2.075357776180445e+01, -2.075375376485996e+01, -2.075339846312445e+01, -2.075356688677193e+01, -2.075356688677193e+01, -3.294877218872422e+00, -3.294847662921375e+00, -3.294179246391854e+00, -3.296069000745926e+00, -3.294876830480159e+00, -3.294876830480159e+00, -5.138329160278606e-01, -5.136300049892411e-01, -5.097051303066213e-01, -5.142859397246761e-01, -5.137564012960127e-01, -5.137564012960127e-01, -6.300800381904569e-02, -6.446382103407092e-02, -6.333367141447402e-01, -3.393409648731337e-02, -6.343429714030535e-02, -6.343429714030535e-02, -1.080979792036812e-05, -1.247830906636465e-05, -1.222665276211675e-03, -1.149087347332919e-06, -1.208548614532224e-05, -1.208548614532224e-05, -4.856017366190892e+00, -4.855523833365962e+00, -4.855972816088618e+00, -4.855588933639661e+00, -4.855755134491989e+00, -4.855755134491989e+00, -1.919922488726441e+00, -1.930231568831605e+00, -1.920375242079150e+00, -1.928424817656491e+00, -1.926242631321628e+00, -1.926242631321628e+00, -4.094773074289631e-01, -4.523837671209665e-01, -3.821321833678368e-01, -4.004840721506714e-01, -4.291536961608375e-01, -4.291536961608375e-01, -1.599403510849342e-02, -7.067863246068501e-02, -1.522238562606978e-02, -1.660594710780789e+00, -2.296142857229745e-02, -2.296142857229745e-02, -1.030966951735794e-06, -1.543758635730438e-06, -6.486059949841319e-07, -3.634221123933094e-03, -1.166672306789196e-06, -1.166672306789196e-06, -4.253645637435115e-01, -4.207142777322043e-01, -4.222486537474625e-01, -4.235315656570909e-01, -4.228785404211497e-01, -4.228785404211497e-01, -4.082310704104278e-01, -3.433707917138884e-01, -3.586819860646400e-01, -3.747510589010856e-01, -3.662037677637848e-01, -3.662037677637848e-01, -4.804444626941558e-01, -1.064451437364605e-01, -1.390496148051406e-01, -2.011121462459964e-01, -1.673438648970920e-01, -1.673438648970919e-01, -2.968513041704642e-01, -9.581683841468076e-04, -2.598945401966102e-03, -1.824353684201216e-01, -8.388961591228136e-03, -8.388961591228193e-03, -1.763296657541004e-05, -3.128029000412097e-08, -2.151081490482111e-07, -7.172748814085291e-03, -7.147245177663377e-07, -7.147245177625910e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_lc_wpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.471596569262737e+01, -2.471606220736564e+01, -2.471648468577491e+01, -2.471490442583628e+01, -2.471601665884883e+01, -2.471601665884883e+01, -3.856142575487574e+00, -3.856188783122057e+00, -3.857625744336362e+00, -3.855995678539190e+00, -3.856183257221167e+00, -3.856183257221167e+00, -6.276814538168483e-01, -6.266157125638188e-01, -6.010376812447993e-01, -6.069853017858361e-01, -6.272930299990671e-01, -6.272930299990671e-01, -9.297157288287965e-02, -9.743025893639176e-02, -7.875837078079689e-01, -4.659139748881216e-02, -9.432717289333753e-02, -9.432717289333753e-02, -2.244315058824036e-05, -2.598106145971913e-05, -2.287096253699153e-03, -2.318867698516235e-06, -2.517200045464266e-05, -2.517200045464266e-05, -6.053264243760499e+00, -6.056819115343319e+00, -6.053625515739053e+00, -6.056389652956420e+00, -6.055090018596044e+00, -6.055090018596044e+00, -2.083912043710154e+00, -2.098278384798245e+00, -2.079359938112691e+00, -2.090644883996770e+00, -2.099342233086805e+00, -2.099342233086805e+00, -5.633733839337767e-01, -6.493181626558633e-01, -5.271364427854243e-01, -5.776884325310697e-01, -5.941677531354225e-01, -5.941677531354225e-01, -2.552971196622813e-02, -8.162152555701759e-02, -2.455168733328846e-02, -2.233692732781031e+00, -3.440046310095519e-02, -3.440046310095519e-02, -2.080098111507303e-06, -3.121745058994366e-06, -1.317305068436461e-06, -6.758418339134994e-03, -2.362566317342971e-06, -2.362566317339889e-06, -6.108253902657219e-01, -6.069273467297889e-01, -6.087305128208957e-01, -6.098296177762930e-01, -6.093139743618697e-01, -6.093139743618697e-01, -5.865459494811051e-01, -4.562643150822185e-01, -4.962535435034766e-01, -5.359034696542664e-01, -5.159557388771476e-01, -5.159557388771476e-01, -6.864586679257868e-01, -1.232848562770140e-01, -1.822387330532746e-01, -2.887133862285595e-01, -2.355600984667590e-01, -2.355600984667589e-01, -4.007198731192700e-01, -1.834666285888414e-03, -4.782966113033721e-03, -2.759067887542417e-01, -1.485351265358963e-02, -1.485351265358959e-02, -3.670924962377641e-05, -6.266965143308559e-08, -4.322817683107783e-07, -1.310080664738243e-02, -1.447853763692581e-06, -1.447853763688832e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_lc_wpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_lc_wpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.630724126308738e-09, -7.630656605156611e-09, -7.630292321260175e-09, -7.631399151572245e-09, -7.630689045189490e-09, -7.630689045189490e-09, -9.568647817118734e-06, -9.568727598848647e-06, -9.569325818018904e-06, -9.560341345885388e-06, -9.568530491206094e-06, -9.568530491206094e-06, -3.875045876056693e-03, -3.880280436463183e-03, -3.917134126402246e-03, -3.831015966714702e-03, -3.877034431661470e-03, -3.877034431661470e-03, -1.177363173916610e-01, -9.752850113489875e-02, -2.174334696689789e-03, -2.632049911026564e-01, -1.114425565192493e-01, -1.114425565192493e-01, 2.948719632297825e-02, 3.177314056001308e-02, -1.499229974642312e-01, 5.521155581012880e-03, 3.311676184149787e-02, 3.311676184149787e-02, -1.932230001272383e-06, -1.928152540089092e-06, -1.931817334506916e-06, -1.928647290166340e-06, -1.930142219994171e-06, -1.930142219994171e-06, -6.272017867493651e-05, -6.185949663757998e-05, -6.224024030492411e-05, -6.156060708177281e-05, -6.280624891681592e-05, -6.280624891681592e-05, -4.285056505416346e-03, 1.407554823917272e-03, -5.078453937329339e-03, 6.610911127179538e-04, -3.402225737320679e-03, -3.402225737320679e-03, -2.291020304755758e-01, -1.813619536712063e-01, -2.359821299840560e-01, -4.294740920122214e-05, -2.594633877482655e-01, -2.594633877482655e-01, 5.689933158712631e-03, 7.087435648747788e-03, 2.145382733561061e-02, -1.735479813672564e-01, 1.094795505527167e-02, 1.094795505555073e-02, 5.208456869272103e-03, 2.623018549558521e-03, 3.477633722539570e-03, 4.191378699928027e-03, 3.828461256155974e-03, 3.828461256155971e-03, 6.690710099491512e-03, -8.658877916109368e-03, -5.875277219145216e-03, -2.045116031615187e-03, -4.105454184175360e-03, -4.105454184175353e-03, 7.189884018070272e-04, -1.100747166201042e-01, -5.512776079266798e-02, -1.700620295380009e-02, -2.898159290173793e-02, -2.898159290173802e-02, -1.124726232930259e-02, -1.159393016184274e-01, -1.721269851296645e-01, -4.442539898509013e-03, -2.079162033859578e-01, -2.079162033859595e-01, 2.438024817906253e-02, 1.779839569319765e-03, 4.326607523398382e-03, -1.886593176612751e-01, 1.480927522127662e-02, 1.480927522044869e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
