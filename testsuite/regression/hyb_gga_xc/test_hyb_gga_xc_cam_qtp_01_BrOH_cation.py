
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_gga_xc_cam_qtp_01_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.615380430111627e+01, -1.615382536016027e+01, -1.615397174609176e+01, -1.615365734244108e+01, -1.615381458291246e+01, -1.615381458291246e+01, -2.609436684864256e+00, -2.609410803722000e+00, -2.608878548669533e+00, -2.610316178070559e+00, -2.609470848469783e+00, -2.609470848469783e+00, -4.384487481459536e-01, -4.381404119959386e-01, -4.310477680337635e-01, -4.351659922371783e-01, -4.340446005138899e-01, -4.340446005138899e-01, -5.323012331903962e-02, -5.550789698792790e-02, -5.250591536095914e-01, -2.205166394677551e-02, -4.513318686059102e-02, -4.513318686059098e-02, -1.586068070703570e-03, -1.660067363577105e-03, -3.097871766731432e-03, -9.562140119624206e-04, -8.095815362078423e-04, -8.095815362078423e-04, -3.827501294866514e+00, -3.827048325679335e+00, -3.827488686305264e+00, -3.827088679336478e+00, -3.827267219965082e+00, -3.827267219965082e+00, -1.527827444354991e+00, -1.536347103063810e+00, -1.526871099950033e+00, -1.534409428251466e+00, -1.532997101103347e+00, -1.532997101103347e+00, -3.611452022159602e-01, -3.885483407166016e-01, -3.291552220950718e-01, -3.364887115516380e-01, -3.675364778917788e-01, -3.675364778917789e-01, 1.915675671838524e-03, -4.604074583175100e-02, 3.062194494710588e-03, -1.330954475032294e+00, -9.509603343946856e-03, -9.509603343946856e-03, -7.474271633954430e-04, -9.361374290140224e-04, -7.234339751510856e-04, 2.060286250836181e-03, -7.553582566998719e-04, -7.553582566998719e-04, -3.504375764103733e-01, -3.507217860016917e-01, -3.506549209021433e-01, -3.505704222307638e-01, -3.506152935482404e-01, -3.506152935482404e-01, -3.380227341004143e-01, -2.953143551711599e-01, -3.087718245358591e-01, -3.210360254236226e-01, -3.148370964966296e-01, -3.148370964966296e-01, -4.117539873914980e-01, -8.145174223988573e-02, -1.178783787701494e-01, -1.830873449220117e-01, -1.490975876284610e-01, -1.490975876284610e-01, -2.647286303461452e-01, -3.331451438943889e-03, 9.815320692359740e-04, -1.725095623969133e-01, 3.259755390821245e-04, 3.259755390820977e-04, -2.182722401525930e-03, -2.652171006778735e-04, -5.385206142695246e-04, 9.307237695291752e-04, -7.203623912255831e-04, -7.203623912255821e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_gga_xc_cam_qtp_01_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.938864405406063e+01, -1.938862099999711e+01, -1.938872792047328e+01, -1.938868219753354e+01, -1.938898145454791e+01, -1.938904806566882e+01, -1.938803102829772e+01, -1.938784077290492e+01, -1.938869216094399e+01, -1.938831385753350e+01, -1.938869216094399e+01, -1.938831385753350e+01, -3.094458629674411e+00, -3.094522143637827e+00, -3.094484332341383e+00, -3.094548782888248e+00, -3.095118744627922e+00, -3.095278948436109e+00, -3.094530821891532e+00, -3.094685334314643e+00, -3.093938971620977e+00, -3.095255351985123e+00, -3.093938971620977e+00, -3.095255351985123e+00, -5.559901132189584e-01, -5.569533306650234e-01, -5.552640053004608e-01, -5.564252894179735e-01, -5.421540579146680e-01, -5.413157056271737e-01, -5.462952816160744e-01, -5.465466160207552e-01, -5.519486958528984e-01, -5.449227189645366e-01, -5.519486958528984e-01, -5.449227189645366e-01, -1.162206291041636e-01, -1.161002856633887e-01, -1.174418510811071e-01, -1.174550184481478e-01, -6.492841740401484e-01, -6.646587285681678e-01, -8.804609900475101e-02, -8.827206315391128e-02, -8.903714702698425e-02, -1.061398798903192e-01, -8.903714702698420e-02, -1.061398798903192e-01, -2.284657022336686e-03, -1.897537190540193e-03, -2.423148734061545e-03, -1.962761591904312e-03, -9.460317770168538e-03, -8.737038445251026e-03, -1.224888863824665e-03, -1.288047948181800e-03, -7.134412241540976e-04, -2.918437855667166e-03, -7.134412241540975e-04, -2.918437855667166e-03, -4.739995249458413e+00, -4.738860082322521e+00, -4.741863658877041e+00, -4.740668563530322e+00, -4.740098355640376e+00, -4.738923667521122e+00, -4.741704183818450e+00, -4.740563815447888e+00, -4.740951154678279e+00, -4.739768743127603e+00, -4.740951154678279e+00, -4.739768743127603e+00, -1.686842582790589e+00, -1.686768753278358e+00, -1.700126867824740e+00, -1.699723967802757e+00, -1.674989731978327e+00, -1.677404050657543e+00, -1.686420079917446e+00, -1.688998143828791e+00, -1.702584736039146e+00, -1.695989132115875e+00, -1.702584736039146e+00, -1.695989132115875e+00, -4.803146797612411e-01, -4.792945830356178e-01, -5.315160614498742e-01, -5.317797360912977e-01, -4.332503015359290e-01, -4.450988508168984e-01, -4.552663534946337e-01, -4.676422871714193e-01, -4.985008066584555e-01, -4.786076126283072e-01, -4.985008066584556e-01, -4.786076126283072e-01, -5.963214163891504e-02, -5.927982545059342e-02, -1.295714601867484e-01, -1.296191556192072e-01, -5.250657144422018e-02, -5.250978193825935e-02, -1.740824813775814e+00, -1.740122957379332e+00, -6.997808645290397e-02, -6.575534435213319e-02, -6.997808645290397e-02, -6.575534435213319e-02, -1.042628229034164e-03, -9.304014184762997e-04, -1.257752588980138e-03, -1.202521095259418e-03, -1.039810583877277e-03, -8.778756964290787e-04, -2.484249924516382e-02, -2.502520694937427e-02, -1.720358412385285e-03, -7.099825135927188e-04, -1.720358412385285e-03, -7.099825135927187e-04, -4.877439758444270e-01, -4.893695860763671e-01, -4.824354440513953e-01, -4.840381924024664e-01, -4.842116470058809e-01, -4.858309903608706e-01, -4.857556073964489e-01, -4.873660539189650e-01, -4.849749667448549e-01, -4.865898568029775e-01, -4.849749667448549e-01, -4.865898568029775e-01, -4.733262241908077e-01, -4.746555775878318e-01, -3.938786057814125e-01, -3.949387927677590e-01, -4.134937085206605e-01, -4.147816043841833e-01, -4.352598644052749e-01, -4.364743318669506e-01, -4.238760054707547e-01, -4.250810217857843e-01, -4.238760054707547e-01, -4.250810217857843e-01, -5.600538187738053e-01, -5.609288546781344e-01, -1.674341099590512e-01, -1.674610828448775e-01, -1.993758992836873e-01, -1.993898367109852e-01, -2.621408556758065e-01, -2.629350519876036e-01, -2.271655435159419e-01, -2.269118086901528e-01, -2.271655435159419e-01, -2.269118086901528e-01, -3.581165113033602e-01, -3.595191468134806e-01, -8.487740520512889e-03, -8.392159087658750e-03, -1.585183779177394e-02, -1.570785885774400e-02, -2.470786521580092e-01, -2.492001732052177e-01, -3.859061951345018e-02, -3.681408144629923e-02, -3.859061951345016e-02, -3.681408144629923e-02, -3.011286149402059e-03, -2.696032527996551e-03, -3.520545422806811e-04, -3.497636977601533e-04, -7.800399356923425e-04, -6.516683577299040e-04, -3.397307821733486e-02, -3.401530423754164e-02, -1.542085156191752e-03, -6.923665073528812e-04, -1.542085156191750e-03, -6.923665073528799e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_gga_xc_cam_qtp_01_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_gga_xc_cam_qtp_01", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.100881180998430e-08, 1.170921901630798e-11, -1.100887396661058e-08, -1.100875099545962e-08, 1.170905209862770e-11, -1.100882929462261e-08, -1.100841851076371e-08, 1.170825853081313e-11, -1.100839412608984e-08, -1.100911462668921e-08, 1.171074319828009e-11, -1.100927365531966e-08, -1.100878558169086e-08, 1.170944866948430e-11, -1.100881951912225e-08, -1.100878558169086e-08, 1.170944866948430e-11, -1.100881951912225e-08, -1.332691850688547e-05, 1.522198110828852e-07, -1.333197923135837e-05, -1.332731294251028e-05, 1.522180609451604e-07, -1.333274689000182e-05, -1.334056116809668e-05, 1.521577403603697e-07, -1.334384829947572e-05, -1.330912355091534e-05, 1.521086588024419e-07, -1.331330255060347e-05, -1.333300770639836e-05, 1.521993088564237e-07, -1.332478131080522e-05, -1.333300770639836e-05, 1.521993088564237e-07, -1.332478131080522e-05, -4.843619231951678e-03, 9.156269431464273e-04, -4.916959545664617e-03, -4.829282604011268e-03, 9.209252548004489e-04, -4.919363180424248e-03, -4.749853172260439e-03, 1.056600192911137e-03, -4.617509791372434e-03, -4.569390969862528e-03, 1.012309006242664e-03, -4.612212985811538e-03, -5.224372240186174e-03, 1.101250078216937e-03, -3.893226642952440e-03, -5.224372240186174e-03, 1.101250078216937e-03, -3.893226642952440e-03, 2.552546043940108e-01, 4.810301240313569e-01, 1.614711563300640e-01, 2.393937207217923e-01, 4.544218028627856e-01, 1.381019753888673e-01, -3.028748838921167e-03, 4.258182379418423e-04, -3.068510223130932e-03, 7.958370253325401e-01, 1.340721099014644e+00, 7.206208095045948e-01, -1.330182656580938e-01, 1.905611288558597e+00, 1.627912354649729e+00, -1.330182656580933e-01, 1.905611288558597e+00, 1.627912354649729e+00, -5.807991880147145e-05, 8.895316066464251e-08, -6.804399887136687e-05, -6.820202049462590e-05, 3.650047960779880e-07, -8.194942338168599e-05, 8.461869914908446e+00, 1.470901940249354e+01, 7.443150636330732e+00, -1.354054214984645e-05, 3.309516434001965e-17, -1.268155074655082e-05, -4.253020158461918e-05, 8.566687106440061e-13, -1.713979412523178e-05, -4.253020158445617e-05, 8.566687106440061e-13, -1.713979412497203e-05, -3.156252320565845e-06, 1.786962486214695e-08, -3.158887692974556e-06, -3.158654435978813e-06, 1.785230221855915e-08, -3.161208012730766e-06, -3.156353591696800e-06, 1.786876392504334e-08, -3.158942194072378e-06, -3.158412178707107e-06, 1.785346691978313e-08, -3.161053209412700e-06, -3.157507951802063e-06, 1.786087736638534e-08, -3.160056230257528e-06, -3.157507951802063e-06, 1.786087736638534e-08, -3.160056230257528e-06, -9.170962535374780e-05, 3.283645707255764e-06, -9.172149646174290e-05, -9.000489037840974e-05, 3.159222184062127e-06, -9.006070705232320e-05, -9.161635835935861e-05, 3.378561526267594e-06, -9.178187744100117e-05, -9.014518418276783e-05, 3.264566151576644e-06, -9.027268471810549e-05, -9.086935132036157e-05, 3.173117960067727e-06, -9.071330470675618e-05, -9.086935132036157e-05, 3.173117960067727e-06, -9.071330470675618e-05, -9.393262094635323e-03, 1.802917287904232e-03, -9.441226179821237e-03, -9.347832285814029e-03, 1.186362907067854e-03, -9.374919192998828e-03, -1.166501854523109e-02, 2.714524432192392e-03, -1.144829106551760e-02, -1.378819240893364e-02, 2.229497722738333e-03, -1.289646945931417e-02, -8.928014057226921e-03, 1.737119809711693e-03, -9.630815070940343e-03, -8.928014057226919e-03, 1.737119809711693e-03, -9.630815070940345e-03, 2.565796893618022e+00, 4.291465087373047e+00, 2.440798700103297e+00, 2.426947946660496e-01, 4.742450082938537e-01, 2.307142902727492e-01, 3.479277490836896e+00, 5.336504260489829e+00, 2.687629919457866e+00, -1.727905269035722e-04, 3.640619391245422e-06, -1.730851846687139e-04, 1.825677132859670e+00, 2.689899855445115e+00, 1.281680141821464e+00, 1.825677132859670e+00, 2.689899855445115e+00, 1.281680141821464e+00, -7.718354767269492e-06, 4.337197358748850e-24, -7.769822084253496e-06, -1.387609977655066e-05, 9.830071088906683e-18, -1.368796939604985e-05, -2.066485796622438e-05, 4.525152496052403e-25, -2.603622175261634e-05, 6.837002465096153e+00, 1.203735441252615e+01, 6.688131984804268e+00, -1.352622308691937e-05, 7.688258230181658e-20, -3.200564886744205e-05, -1.352622308742982e-05, 7.688258230181657e-20, -3.200564886719635e-05, -1.347168924915809e-02, 1.759741743353345e-03, -1.338374975535471e-02, -1.245095286422035e-02, 1.811428904116244e-03, -1.238345189056932e-02, -1.275849748999293e-02, 1.793042480521180e-03, -1.268686758235935e-02, -1.305235620007394e-02, 1.778055187180908e-03, -1.297010915351668e-02, -1.290078340107868e-02, 1.785538369210363e-03, -1.282389203759979e-02, -1.290078340107868e-02, 1.785538369210363e-03, -1.282389203759979e-02, -1.530577449563634e-02, 2.020222622931241e-03, -1.520029352382549e-02, -1.277573353389519e-02, 4.318290823292903e-03, -1.282356937624391e-02, -1.315434850626533e-02, 3.438429128533064e-03, -1.317286739628425e-02, -1.366371038272890e-02, 2.766720744875148e-03, -1.361757883219048e-02, -1.341875467788974e-02, 3.088193481820850e-03, -1.338357034777733e-02, -1.341875467788974e-02, 3.088193481820850e-03, -1.338357034777733e-02, -7.882428887150869e-03, 9.331636514841414e-04, -7.898744069653076e-03, 6.021946115646908e-02, 1.818437840205231e-01, 5.399211291117017e-02, 1.000016780631036e-03, 8.219520767271887e-02, -4.460644756437399e-03, -2.739374934356175e-02, 2.306941174037591e-02, -2.795483883226629e-02, -2.156592616791986e-02, 4.400598182035384e-02, -2.171103270391665e-02, -2.156592616791983e-02, 4.400598182035385e-02, -2.171103270391671e-02, -1.583372824078864e-02, 6.480571492045700e-03, -1.601542042058115e-02, 7.693469264009582e+00, 1.413226829386496e+01, 7.575987670672164e+00, 8.700195177199168e+00, 1.503042594465832e+01, 7.883489360948083e+00, -3.502714324446096e-02, 2.743131737750601e-02, -3.680730433130185e-02, 4.952080061193236e+00, 7.761150429041237e+00, 3.899308796393108e+00, 4.952080061193226e+00, 7.761150429041237e+00, 3.899308796393109e+00, 9.943688935091802e-06, 2.733982982891423e-04, -7.094307870991927e-06, -8.579344519926117e-07, 2.280091625569450e-85, -1.292699487150194e-06, -4.502514885668316e-06, 1.329850118836145e-36, -5.586702331545621e-06, 5.196064373108554e+00, 8.823116638038448e+00, 4.856934730402831e+00, -1.918987827240827e-05, 6.543051709497199e-22, -2.585596165784640e-05, -1.918987827236676e-05, 6.543051709496857e-22, -2.585596165756057e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
