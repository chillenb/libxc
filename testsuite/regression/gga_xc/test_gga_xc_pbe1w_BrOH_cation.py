
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_pbe1w_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.102642835327424e+01, -2.102645641949179e+01, -2.102664795322935e+01, -2.102622901345908e+01, -2.102643903741852e+01, -2.102643903741852e+01, -3.533132989311701e+00, -3.533098804668020e+00, -3.532394138887300e+00, -3.534280893388122e+00, -3.533176186751494e+00, -3.533176186751494e+00, -7.352656838553414e-01, -7.351076923205810e-01, -7.331243057224475e-01, -7.381062590644996e-01, -7.380925098167205e-01, -7.380925098167205e-01, -2.300664642391006e-01, -2.316512027812867e-01, -8.461683599037434e-01, -1.923995942783766e-01, -2.198124094834329e-01, -2.198124094834328e-01, -1.108653922006555e-02, -1.166499689556571e-02, -6.159987140351585e-02, -6.438606704060292e-03, -8.768149484905497e-03, -8.768149484905497e-03, -5.110299150752941e+00, -5.109839409944269e+00, -5.110288007956261e+00, -5.109881964331198e+00, -5.110060424135836e+00, -5.110060424135836e+00, -2.154478363664168e+00, -2.164684217515244e+00, -2.155102432748743e+00, -2.164105556935766e+00, -2.159843992086539e+00, -2.159843992086539e+00, -6.261339851442405e-01, -6.614247011443596e-01, -5.848763992521803e-01, -5.919809965161342e-01, -6.339650965507223e-01, -6.339650965507224e-01, -1.464865419673017e-01, -2.436361240118127e-01, -1.370856708597425e-01, -1.891369668770419e+00, -1.638166539051151e-01, -1.638166539051151e-01, -4.983466360182639e-03, -6.295645221042923e-03, -4.832185906674726e-03, -9.621925906496392e-02, -6.003341869961062e-03, -6.003341869961067e-03, -6.122163747200572e-01, -6.113006277844474e-01, -6.115648352520895e-01, -6.118244309708603e-01, -6.116885540487442e-01, -6.116885540487442e-01, -5.961270933285617e-01, -5.462582757542894e-01, -5.585478674193936e-01, -5.717407620030426e-01, -5.646983931673739e-01, -5.646983931673739e-01, -6.919398520989551e-01, -2.912377109735835e-01, -3.300781641969612e-01, -3.967134180756254e-01, -3.604072356505481e-01, -3.604072356505480e-01, -5.058582011888543e-01, -5.905196916431911e-02, -7.915064962122829e-02, -3.765408240769294e-01, -1.183721607066307e-01, -1.183721607066308e-01, -1.555010150246610e-02, -1.701028379209954e-03, -3.556851619368606e-03, -1.121597078917629e-01, -5.526319817305661e-03, -5.526319817305653e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_pbe1w_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.528237121787544e+01, -2.528234179032496e+01, -2.528248755613579e+01, -2.528242662417705e+01, -2.528283014544467e+01, -2.528292403533910e+01, -2.528151267562481e+01, -2.528124960729549e+01, -2.528243844596252e+01, -2.528189924389450e+01, -2.528243844596252e+01, -2.528189924389450e+01, -4.148951591859223e+00, -4.149138035499848e+00, -4.148998680261409e+00, -4.149192841286227e+00, -4.150217606938978e+00, -4.150529821554318e+00, -4.148762986745981e+00, -4.149081207701860e+00, -4.148213566083804e+00, -4.150193015027667e+00, -4.148213566083804e+00, -4.150193015027667e+00, -8.353346175056190e-01, -8.398191636213285e-01, -8.333684269599251e-01, -8.388357363425206e-01, -8.042355869494037e-01, -7.979589364640499e-01, -8.068460564711194e-01, -8.088815466326161e-01, -8.401201047556951e-01, -7.806976657056552e-01, -8.401201047556951e-01, -7.806976657056552e-01, -2.333735917066791e-01, -2.365406928413584e-01, -2.355899626352360e-01, -2.395488777302870e-01, -9.550287322823172e-01, -9.903570628421950e-01, -1.983078217907664e-01, -1.996272291232022e-01, -2.232056343320298e-01, -1.858726335393456e-01, -2.232056343320296e-01, -1.858726335393455e-01, -1.433397436627859e-02, -1.503635233308465e-02, -1.501987035214638e-02, -1.585721645481844e-02, -7.759572999636574e-02, -8.084051255930963e-02, -8.613435849900387e-03, -8.501478847131896e-03, -1.232403901690310e-02, -8.007978281376596e-03, -1.232403901690310e-02, -8.007978281376595e-03, -6.330956032570128e+00, -6.329442020395350e+00, -6.333905931141604e+00, -6.332297597135039e+00, -6.331116489211828e+00, -6.329540629059204e+00, -6.333651801467357e+00, -6.332130531691077e+00, -6.332467308271080e+00, -6.330877385038579e+00, -6.332467308271080e+00, -6.330877385038579e+00, -2.267800676607065e+00, -2.267691239163973e+00, -2.286121350676355e+00, -2.285512412566490e+00, -2.249409039140350e+00, -2.253873762643226e+00, -2.265033227255391e+00, -2.269735326080923e+00, -2.291746611426420e+00, -2.279884018218258e+00, -2.291746611426420e+00, -2.279884018218258e+00, -7.676133162355558e-01, -7.661634639204268e-01, -8.550802584158136e-01, -8.557677797270417e-01, -6.985454915437624e-01, -7.202148575503062e-01, -7.510373631807697e-01, -7.689968572488082e-01, -7.973093250155600e-01, -7.658194402820931e-01, -7.973093250155602e-01, -7.658194402820933e-01, -1.663998156453142e-01, -1.666641192839799e-01, -2.459182460439121e-01, -2.463993415448207e-01, -1.558485007601610e-01, -1.597945069392550e-01, -2.449059948460103e+00, -2.448146119175965e+00, -1.773647182471909e-01, -1.741673168159905e-01, -1.773647182471909e-01, -1.741673168159905e-01, -6.522545081273155e-03, -6.720235677033109e-03, -8.318794321657368e-03, -8.416846077689874e-03, -6.269954579547171e-03, -6.554093348947463e-03, -1.174547446351150e-01, -1.181605659639718e-01, -6.651636874944802e-03, -8.493457091796110e-03, -6.651636874944808e-03, -8.493457091796117e-03, -7.985679383552721e-01, -8.010156388999413e-01, -7.898852245524389e-01, -7.924188360275164e-01, -7.930720337489152e-01, -7.956018499614991e-01, -7.956308272206953e-01, -7.980866142119403e-01, -7.943652031195430e-01, -7.968569956090037e-01, -7.943652031195430e-01, -7.968569956090037e-01, -7.793553869365655e-01, -7.812941320417207e-01, -6.300486917897228e-01, -6.324220829742953e-01, -6.727714910482485e-01, -6.754843394289451e-01, -7.172385595050124e-01, -7.192939049447917e-01, -6.948168756233113e-01, -6.969262770970829e-01, -6.948168756233113e-01, -6.969262770970829e-01, -8.924265738857068e-01, -8.941693671672374e-01, -2.919260578826902e-01, -2.926209305082717e-01, -3.393733086849051e-01, -3.410980210793840e-01, -4.549966294236964e-01, -4.569038152214084e-01, -3.909722829729262e-01, -3.908838857784598e-01, -3.909722829729261e-01, -3.908838857784597e-01, -5.826313126947285e-01, -5.861492674540737e-01, -7.615773968350371e-02, -7.655384483403932e-02, -9.895082775763921e-02, -1.011984777203171e-01, -4.470797860297472e-01, -4.523227186328325e-01, -1.370029433243278e-01, -1.381115861470925e-01, -1.370029433243278e-01, -1.381115861470925e-01, -2.030941057072465e-02, -2.089083013826194e-02, -2.262595493703187e-03, -2.266484205912194e-03, -4.609440126572882e-03, -4.833534164378865e-03, -1.315857088980051e-01, -1.328723095964504e-01, -6.269081518658486e-03, -7.806419028699371e-03, -6.269081518658477e-03, -7.806419028699360e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_pbe1w_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.395981638434105e-08, 2.853120008797325e-10, -1.395989448032620e-08, -1.395969994606955e-08, 2.853171797290286e-10, -1.395980914286503e-08, -1.395920472732258e-08, 2.853243228075083e-10, -1.395913675377538e-08, -1.396053205886019e-08, 2.852476146157845e-10, -1.396081700202579e-08, -1.395976588769907e-08, 2.852900603131935e-10, -1.396004570404409e-08, -1.395976588769907e-08, 2.852900603131935e-10, -1.396004570404409e-08, -1.822860098064429e-05, 1.597570576665756e-06, -1.823433762407244e-05, -1.822878693676402e-05, 1.597899410468492e-06, -1.823496987730339e-05, -1.823806767208531e-05, 1.605335035269590e-06, -1.824103059144822e-05, -1.821044029192003e-05, 1.590958009293333e-06, -1.821454003370509e-05, -1.823937706229663e-05, 1.597775860372777e-06, -1.822106458343696e-05, -1.823937706229663e-05, 1.597775860372777e-06, -1.822106458343696e-05, -1.080004712966674e-02, 2.654146068419166e-03, -1.080556442513437e-02, -1.081717981141056e-02, 2.634087046980869e-03, -1.082465972720308e-02, -1.114261632794141e-02, 2.128273582623879e-03, -1.110004054891785e-02, -1.080502289614486e-02, 2.080116707708200e-03, -1.082356322255639e-02, -1.099447341459121e-02, 2.110992149751715e-03, -1.032220946958071e-02, -1.099447341459121e-02, 2.110992149751715e-03, -1.032220946958071e-02, -1.173133790847605e+00, 2.300587905738198e-01, -1.095451388259414e+00, -1.172538665061668e+00, 2.427811864255511e-01, -1.077568237845279e+00, -6.306783532319600e-03, 1.435906486125469e-03, -5.818776720488773e-03, -1.623557331273224e+00, 1.671622749231936e-01, -1.569781383710796e+00, -1.040953312856540e+00, 1.392862366879364e-01, -2.354370059722281e+00, -1.040953312856539e+00, 1.392862366879366e-01, -2.354370059722283e+00, -4.898037516605168e+00, 6.268786215684668e-03, -4.848910791179189e+00, -5.160420325817423e+00, 7.373741391133360e-03, -5.134003990429535e+00, -2.842169484156776e+00, 3.793936344553010e-02, -2.857445640648541e+00, -4.488144634624402e+00, 2.226425752384827e-03, -4.366278810928770e+00, -4.891340754172860e+00, 3.266779040163939e-03, -1.241326435999480e+01, -4.891340754172537e+00, 3.266779039865319e-03, -1.241326435999450e+01, -3.940965729615128e-06, 4.193541526734850e-07, -3.944801300518697e-06, -3.940013758127720e-06, 4.221265785639179e-07, -3.943836565682379e-06, -3.940902494254859e-06, 4.194648247132480e-07, -3.944737491997271e-06, -3.940051981283538e-06, 4.219120553856608e-07, -3.943897159780764e-06, -3.940508969790336e-06, 4.207643412459522e-07, -3.944313006541100e-06, -3.940508969790336e-06, 4.207643412459522e-07, -3.944313006541100e-06, -1.421277834847396e-04, 9.041406884025540e-06, -1.421536254672719e-04, -1.392584088834066e-04, 9.019535205699293e-06, -1.393827273305474e-04, -1.421993555080262e-04, 8.597283072701111e-06, -1.423139924264945e-04, -1.397643913486069e-04, 8.581185134411172e-06, -1.398029015786048e-04, -1.403686177568311e-04, 9.251715582643718e-06, -1.405976737135503e-04, -1.403686177568311e-04, 9.251715582643718e-06, -1.405976737135503e-04, -1.961879473784049e-02, 8.735347743030289e-03, -1.988596291879508e-02, -1.410888598505192e-02, 1.102554331942513e-02, -1.410078573321231e-02, -2.862963267387516e-02, 1.136327699980517e-02, -2.452528465517962e-02, -2.514061242022246e-02, 1.686356136956430e-02, -2.097211386173697e-02, -1.658115346124819e-02, 8.725802191465027e-03, -2.115810132933873e-02, -1.658115346124820e-02, 8.725802191465029e-03, -2.115810132933873e-02, -1.896347729102339e+00, 9.335015696396640e-02, -1.927203572746448e+00, -7.385681713598485e-01, 8.433743778766394e-02, -7.311559795589039e-01, -2.148927970092997e+00, 9.465432271745904e-02, -2.081109685766653e+00, -1.941863351843102e-04, 8.938364228319471e-05, -1.946334587176697e-04, -2.018026809721726e+00, 1.783009833961551e-01, -2.409043561212453e+00, -2.018026809721726e+00, 1.783009833961551e-01, -2.409043561212453e+00, -6.300992846681091e+00, 2.170824630711687e-03, -5.453584162109470e+00, -5.425239862931394e+00, 2.737366635670034e-03, -5.008892830677346e+00, -3.089692342463817e+01, 2.726980243642558e-02, -3.437237213738388e+01, -3.226435089130607e+00, 9.256086121541830e-02, -3.107269682678496e+00, -1.536601130893430e+01, 1.043666877957923e-02, -1.509329673175170e+01, -1.536601130893183e+01, 1.043666878683738e-02, -1.509329673174924e+01, -1.856363896667439e-02, 1.860616093959465e-02, -1.815034187882955e-02, -1.970766792676701e-02, 1.596228834166963e-02, -1.930388920720089e-02, -1.935018467316814e-02, 1.680138719083564e-02, -1.894352142162821e-02, -1.902064370418624e-02, 1.756660166505704e-02, -1.861034068923995e-02, -1.918977877727171e-02, 1.717554201259551e-02, -1.878122102615049e-02, -1.918977877727171e-02, 1.717554201259551e-02, -1.878122102615049e-02, -2.033187492478529e-02, 2.203179681984833e-02, -1.992292814376822e-02, -3.653818828870063e-02, 1.178285139327733e-02, -3.597591551225469e-02, -3.237921499859291e-02, 1.360674883261436e-02, -3.183401071973803e-02, -2.801697485443479e-02, 1.605600228094894e-02, -2.755124148537576e-02, -3.029596240187199e-02, 1.476668310243594e-02, -2.978854881847414e-02, -3.029596240187199e-02, 1.476668310243594e-02, -2.978854881847414e-02, -1.182158151967363e-02, 8.756158923396633e-03, -1.175134868527515e-02, -4.251257892931796e-01, 6.288987653545317e-02, -4.202569320307719e-01, -2.828379216226022e-01, 5.788259589363677e-02, -2.778132370710913e-01, -1.371850757801815e-01, 5.153421001272741e-02, -1.342361691082080e-01, -2.017347091977804e-01, 5.769299312723455e-02, -2.030278528809832e-01, -2.017347091977804e-01, 5.769299312723457e-02, -2.030278528809834e-01, -5.032090554754091e-02, 1.691603226044097e-02, -4.916816994418914e-02, -2.602028667236088e+00, 3.117641053099474e-02, -2.605033115601809e+00, -2.549364457686288e+00, 4.778969004463015e-02, -2.603834440033416e+00, -1.708009362888823e-01, 8.136278812864113e-02, -1.606410851626070e-01, -3.155412152387353e+00, 1.614687547990411e-01, -3.689502785454817e+00, -3.155412152387354e+00, 1.614687547990409e-01, -3.689502785454818e+00, -3.880148306034725e+00, 7.816317465341506e-03, -3.961169392488414e+00, -1.938884681481215e+01, 2.968533314947531e-03, -3.434553373052369e+01, -1.196552966123190e+01, 3.715365291964852e-03, -1.273822589780677e+01, -3.539123156764088e+00, 1.481989211550521e-01, -3.461911699800789e+00, -3.168425086159436e+01, 1.332139669308409e-02, -1.566752909301148e+01, -3.168425086159169e+01, 1.332139670154767e-02, -1.566752909300880e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
