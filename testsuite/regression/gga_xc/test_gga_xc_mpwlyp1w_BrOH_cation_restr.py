
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mpwlyp1w_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.114762398312775e+01, -2.114765077616192e+01, -2.114783934506271e+01, -2.114743928545305e+01, -2.114763903221781e+01, -2.114763903221781e+01, -3.559164739764821e+00, -3.559127155973420e+00, -3.558344150007880e+00, -3.560370918293391e+00, -3.559204145560180e+00, -3.559204145560180e+00, -7.414575547227401e-01, -7.413497828485457e-01, -7.401479881679460e-01, -7.452220500086412e-01, -7.434276117912261e-01, -7.434276117912261e-01, -2.257448577260200e-01, -2.275513929667629e-01, -8.531212328881338e-01, -1.863630767144307e-01, -2.015359331542779e-01, -2.015359331542779e-01, -2.227730135286587e-03, -2.449097774860563e-03, -5.697078331493710e-02, -9.968918071878085e-04, -1.390499142232072e-03, -1.390499142232071e-03, -5.131073367853449e+00, -5.130383098123433e+00, -5.131052775899271e+00, -5.130443247168896e+00, -5.130717410357862e+00, -5.130717410357862e+00, -2.176734954073536e+00, -2.187040934743627e+00, -2.177276148478233e+00, -2.186380299110582e+00, -2.182158961216843e+00, -2.182158961216843e+00, -6.256037451631662e-01, -6.503100706995933e-01, -5.844807110106991e-01, -5.825279236724429e-01, -6.319742416709747e-01, -6.319742416709747e-01, -1.417630562545617e-01, -2.360165945117955e-01, -1.336110921604315e-01, -1.880815775359583e+00, -1.593861024635094e-01, -1.593861024635094e-01, -7.369388315522819e-04, -9.810687006031333e-04, -8.127815029776618e-04, -9.908909813188460e-02, -9.712537965287942e-04, -9.712537965287945e-04, -5.961835985295438e-01, -5.997674823080889e-01, -5.986077555161182e-01, -5.975772004511017e-01, -5.981010004897727e-01, -5.981010004897727e-01, -5.785250766565403e-01, -5.486598592022507e-01, -5.585487901911927e-01, -5.671250070370341e-01, -5.627017306593703e-01, -5.627017306593703e-01, -6.815488404132463e-01, -2.855854843752437e-01, -3.273991194676827e-01, -3.962771532263409e-01, -3.596701549388962e-01, -3.596701549388961e-01, -5.074874532427350e-01, -5.227245666270299e-02, -7.817865111159190e-02, -3.741063333630603e-01, -1.199795277405586e-01, -1.199795277405586e-01, -3.901476245689086e-03, -2.330134050156844e-04, -5.130849557445116e-04, -1.146514794751655e-01, -8.938723142060174e-04, -8.938723142060165e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mpwlyp1w_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.529930838073247e+01, -2.529940251223770e+01, -2.529980452845875e+01, -2.529840439272576e+01, -2.529914037062956e+01, -2.529914037062956e+01, -4.137556084283251e+00, -4.137593127137114e+00, -4.138549942884269e+00, -4.137659660003858e+00, -4.137698526059198e+00, -4.137698526059198e+00, -8.330365705608623e-01, -8.319615739374978e-01, -8.071678298424639e-01, -8.135849725348814e-01, -8.123306054036239e-01, -8.123306054036239e-01, -2.416083961705407e-01, -2.435658341722913e-01, -9.657292261050876e-01, -2.071240091493845e-01, -2.175157087056097e-01, -2.175157087056097e-01, -4.947432171278202e-03, -5.598733979831818e-03, -1.327454447737383e-01, -1.737897935549807e-03, -2.718211007983873e-03, -2.718211007983876e-03, -6.281477497708616e+00, -6.283960557148575e+00, -6.281589675456479e+00, -6.283781718041352e+00, -6.282736856597877e+00, -6.282736856597877e+00, -2.294227399760777e+00, -2.311672569891400e+00, -2.279597471490821e+00, -2.294897198469084e+00, -2.311077745820965e+00, -2.311077745820965e+00, -7.454545987474117e-01, -8.270507368220891e-01, -6.905042477761156e-01, -7.330694170718373e-01, -7.588411925595249e-01, -7.588411925595249e-01, -1.857428884904827e-01, -2.600687163842287e-01, -1.788531393967996e-01, -2.398340185021444e+00, -1.827806166278397e-01, -1.827806166278397e-01, -1.206110039805331e-03, -1.721167047557719e-03, -1.531641465865499e-03, -1.535744814202997e-01, -1.828806437875053e-03, -1.828806437875056e-03, -7.746058558147544e-01, -7.640504571973146e-01, -7.677580099661337e-01, -7.708303447924383e-01, -7.692978381152114e-01, -7.692978381152114e-01, -7.570710928572085e-01, -6.231351562226359e-01, -6.564763990328001e-01, -6.933063909969533e-01, -6.740986121688922e-01, -6.740986121688922e-01, -8.640875196282570e-01, -3.072615372696736e-01, -3.514067051620771e-01, -4.484642085296877e-01, -3.937763823735055e-01, -3.937763823735055e-01, -5.763168733693683e-01, -1.280440588968004e-01, -1.559561277853478e-01, -4.352098369804892e-01, -1.523122487553122e-01, -1.523122487553122e-01, -9.822237433457373e-03, -3.313947730298894e-04, -8.048481372647930e-04, -1.506779336102375e-01, -1.669274082030328e-03, -1.669274082030322e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mpwlyp1w_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.275869483725442e-09, -7.275836024816788e-09, -7.275585796599870e-09, -7.276085708818343e-09, -7.275838182290941e-09, -7.275838182290941e-09, -9.436374028718934e-06, -9.436799256537960e-06, -9.445720388486089e-06, -9.423100264774073e-06, -9.435978479759852e-06, -9.435978479759852e-06, -5.267852291740203e-03, -5.266376798461946e-03, -5.182725159992898e-03, -5.049436543189096e-03, -5.101350735328837e-03, -5.101350735328837e-03, -4.172423708214064e-01, -4.185863896996497e-01, -3.020338401182471e-03, -4.820474838752232e-01, -5.099393344588244e-01, -5.099393344588241e-01, 2.964198230684054e+02, 3.080294998179493e+02, 3.933967451422119e+01, 3.079341584739851e+02, 3.662528636817660e+02, 3.662528636817690e+02, -2.181851618179559e-06, -2.183551380667227e-06, -2.181908074798829e-06, -2.183408806579430e-06, -2.182724002850892e-06, -2.182724002850892e-06, -6.891320413222308e-05, -6.759371721097388e-05, -6.889923257745119e-05, -6.773110810134156e-05, -6.819010901274807e-05, -6.819010901274807e-05, -1.096595630421030e-02, -1.019995864132115e-02, -1.429522820280786e-02, -1.570779996985337e-02, -1.061080339427038e-02, -1.061080339427038e-02, 3.293083753777741e-01, -2.317387520500750e-01, 6.422091759526066e-01, -1.323122865702121e-04, -5.535614268163175e-01, -5.535614268163175e-01, 4.238918119108386e+02, 3.609214700620854e+02, 2.169865528028458e+03, 5.809766449638605e+00, 1.010923797780182e+03, 1.010923797780188e+03, -1.622708400273319e-02, -1.425665768570803e-02, -1.462702796978550e-02, -1.511120472100499e-02, -1.483746364032918e-02, -1.483746364032918e-02, -1.882207031692010e-02, -1.763045774461912e-02, -1.706071109262590e-02, -1.680449391168057e-02, -1.692178127402714e-02, -1.692178127402714e-02, -8.368757964237911e-03, -1.501367564026677e-01, -1.089186391282174e-01, -6.344248326490573e-02, -8.552331610268037e-02, -8.552331610268044e-02, -2.401523327293378e-02, 4.329157058413990e+01, 1.751123001962580e+01, -8.365449900236815e-02, 4.553792725611187e-01, 4.553792725611160e-01, 2.205288250482824e+02, 2.204669476841412e+03, 9.319324468859863e+02, 1.170412881331677e+00, 1.282520452012683e+03, 1.282520452012682e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
