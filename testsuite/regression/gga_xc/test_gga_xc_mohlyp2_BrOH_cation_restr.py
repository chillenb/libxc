
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mohlyp2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120856945495250e+01, -2.120861059068313e+01, -2.120884045622551e+01, -2.120822749910013e+01, -2.120854198110489e+01, -2.120854198110489e+01, -3.518974292304160e+00, -3.518947604187694e+00, -3.518417973926031e+00, -3.520004337757002e+00, -3.519026503790606e+00, -3.519026503790606e+00, -7.175749955917843e-01, -7.176463960346605e-01, -7.242146029582225e-01, -7.287431336746664e-01, -7.266625486129353e-01, -7.266625486129353e-01, -2.497191989003104e-01, -2.485761827136296e-01, -8.263238850848729e-01, -2.364970809166477e-01, -2.405554209399468e-01, -2.405554209399468e-01, -1.750523717118679e-02, -1.842102740980702e-02, -9.508211330609322e-02, -1.012158575416115e-02, -1.271321004977248e-02, -1.271321004977248e-02, -5.156669002290746e+00, -5.156947275738846e+00, -5.156688397537946e+00, -5.156933888314226e+00, -5.156805778661993e+00, -5.156805778661993e+00, -2.168032619792002e+00, -2.175666887824191e+00, -2.175274276333668e+00, -2.181764528758904e+00, -2.169017316328208e+00, -2.169017316328208e+00, -6.041426442760777e-01, -6.444367254788319e-01, -5.625808672389579e-01, -5.726824362837716e-01, -6.115998543339494e-01, -6.115998543339494e-01, -1.985830426530862e-01, -2.869351780342961e-01, -1.877960483415729e-01, -1.904651625877240e+00, -2.117392211600765e-01, -2.117392211600765e-01, -7.811172059459655e-03, -9.894676758333663e-03, -7.565077786964719e-03, -1.396479406748185e-01, -9.113109060873538e-03, -9.113109060873538e-03, -5.964786155757177e-01, -5.936280378878531e-01, -5.945455030675499e-01, -5.953697809191151e-01, -5.949491102227611e-01, -5.949491102227611e-01, -5.806540101563991e-01, -5.277320185371340e-01, -5.366730722713178e-01, -5.504097636832148e-01, -5.426424408188184e-01, -5.426424408188184e-01, -6.751416259291859e-01, -3.224465925949992e-01, -3.424079597672961e-01, -3.803614214589552e-01, -3.556056079791748e-01, -3.556056079791748e-01, -4.876591426102137e-01, -9.164299291405111e-02, -1.180681245084055e-01, -3.562794906412005e-01, -1.652224865896094e-01, -1.652224865896095e-01, -2.467338382524436e-02, -2.646583054384918e-03, -5.553909407490655e-03, -1.583552008039554e-01, -8.432887553897577e-03, -8.432887553897574e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mohlyp2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.665718724844987e+01, -2.665732007161762e+01, -2.665783950492423e+01, -2.665586474312132e+01, -2.665690962097843e+01, -2.665690962097843e+01, -4.236346496383453e+00, -4.236459447395351e+00, -4.239169895044345e+00, -4.235250924722068e+00, -4.236583220622213e+00, -4.236583220622213e+00, -7.703682084540597e-01, -7.674018177629777e-01, -6.897448305519216e-01, -6.981977568041960e-01, -6.987442532214430e-01, -6.987442532214430e-01, -1.431442714962617e-01, -1.450894608838421e-01, -9.163401307858721e-01, -1.556025439125038e-01, -1.382961504199244e-01, -1.382961504199246e-01, -2.327556565022178e-02, -2.448412714009156e-02, -1.210771258158914e-01, -1.348296706884547e-02, -1.692388455866118e-02, -1.692388455866120e-02, -6.644448972159265e+00, -6.647968947996298e+00, -6.644604977712132e+00, -6.647712769454926e+00, -6.646238658049252e+00, -6.646238658049252e+00, -1.965912796593068e+00, -1.995658465926532e+00, -1.919926768451724e+00, -1.946105678206128e+00, -2.004750885485259e+00, -2.004750885485259e+00, -7.478384468072715e-01, -8.503473652338813e-01, -6.843783487749302e-01, -7.520315118922793e-01, -7.666268890083083e-01, -7.666268890083083e-01, -2.005757949303228e-01, -1.699176652555179e-01, -1.974725779193927e-01, -2.516783343229014e+00, -1.664078722803903e-01, -1.664078722803903e-01, -1.040822486187999e-02, -1.318032499614988e-02, -1.007332190344704e-02, -1.666139250211866e-01, -1.213459356603153e-02, -1.213459356603154e-02, -7.908917090439146e-01, -7.837806448355159e-01, -7.865969559840628e-01, -7.886688010042402e-01, -7.876616760464756e-01, -7.876616760464756e-01, -7.701255446447287e-01, -5.748439172083355e-01, -6.449818846371088e-01, -7.057375525484414e-01, -6.765935803481060e-01, -6.765935803481060e-01, -8.897758819694161e-01, -1.825273568922890e-01, -2.250578223720443e-01, -3.958668461623758e-01, -2.983288378847933e-01, -2.983288378847933e-01, -5.275511257963137e-01, -1.172873524421982e-01, -1.498739479298108e-01, -4.097392311472136e-01, -1.722283078623848e-01, -1.722283078623850e-01, -3.273674976870904e-02, -3.528208452811178e-03, -7.401732519670490e-03, -1.714200717156081e-01, -1.122944222004733e-02, -1.122944222004733e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mohlyp2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.077413953010880e-09, -4.077280654647360e-09, -4.076814954563591e-09, -4.078795628929828e-09, -4.077739694672532e-09, -4.077739694672532e-09, -7.154832331526856e-06, -7.153835861184865e-06, -7.130077586017434e-06, -7.165927518375303e-06, -7.152950414630692e-06, -7.152950414630692e-06, -6.523448385827662e-03, -6.588397262529229e-03, -8.185909296536313e-03, -7.891558732149728e-03, -7.927330160798753e-03, -7.927330160798753e-03, -1.397696747753639e+00, -1.363826436444386e+00, -3.366323738797853e-03, -2.126850085861413e+00, -1.959344267575106e+00, -1.959344267575104e+00, -9.021243791608983e+00, -9.530171738714106e+00, -4.747961702573651e-01, -8.200055066297917e+00, -1.041693410628014e+01, -1.041693410627903e+01, -8.962093710820130e-07, -8.897704020111055e-07, -8.959378837040729e-07, -8.902532166862436e-07, -8.929319945617229e-07, -8.929319945617229e-07, -1.064559444703919e-04, -1.028487049320061e-04, -1.100122674696046e-04, -1.067687321025210e-04, -1.027176084917738e-04, -1.027176084917738e-04, -7.347359700953687e-03, -1.498137781455508e-03, -1.095978815704115e-02, -3.405316000691266e-03, -6.331005431102618e-03, -6.331005431102618e-03, -1.921878768863614e+00, -9.581527843745608e-01, -1.970718968718616e+00, -2.113049885906990e-05, -2.892214349482300e+00, -2.892214349482300e+00, -1.080507248087056e+01, -9.650773329340717e+00, -6.060427242903074e+01, -1.779250725679957e+00, -2.820271232294240e+01, -2.820271232293574e+01, -2.507335058715268e-04, -1.917503109997092e-03, -1.341407422217945e-03, -8.562963789832910e-04, -1.099772326621968e-03, -1.099772326621968e-03, 3.163233212236364e-04, -2.174853838354626e-02, -1.416585859511962e-02, -7.500586360141238e-03, -1.072591249611878e-02, -1.072591249611878e-02, -1.403791557430748e-03, -5.199910271590271e-01, -3.039212859004360e-01, -9.193067702239660e-02, -1.809243770029588e-01, -1.809243770029588e-01, -3.050676157864595e-02, -2.146641643492915e-01, 1.982485420098161e-01, -8.979477143859294e-02, -3.581689847824134e+00, -3.581689847824125e+00, -7.267838418555164e+00, -4.736577868464003e+01, -2.292259600974268e+01, -3.355365098566471e+00, -3.562282491931631e+01, -3.562282491930122e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
