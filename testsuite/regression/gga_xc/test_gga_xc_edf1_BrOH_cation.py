
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_edf1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111531611984610e+01, -2.111535325092840e+01, -2.111557101387089e+01, -2.111501750693036e+01, -2.111530003842440e+01, -2.111530003842440e+01, -3.539063466766238e+00, -3.539036887812612e+00, -3.538508394300639e+00, -3.540088987638867e+00, -3.539115755332982e+00, -3.539115755332982e+00, -7.339949297150828e-01, -7.338084614000815e-01, -7.314972131930492e-01, -7.365073832096823e-01, -7.375141448523441e-01, -7.375141448523441e-01, -2.264813072027561e-01, -2.275496294275839e-01, -8.460383973087929e-01, -1.995870819187885e-01, -2.249940014117830e-01, -2.249940014117828e-01, -1.210596379053183e-01, -1.207008896197831e-01, -1.747203048022632e-01, -1.132758301027523e-01, -1.130579715040682e-01, -1.130579715040681e-01, -5.153556555945705e+00, -5.153541270117540e+00, -5.153563813030688e+00, -5.153550149669455e+00, -5.153544090280533e+00, -5.153544090280533e+00, -2.153724187661149e+00, -2.163562179918230e+00, -2.155258326465002e+00, -2.163849924888271e+00, -2.158557374336443e+00, -2.158557374336443e+00, -6.255339597089268e-01, -6.638134159408515e-01, -5.833242112026638e-01, -5.925763723300439e-01, -6.338336870151640e-01, -6.338336870151638e-01, -1.797337637238501e-01, -2.448292005004392e-01, -1.758839247408352e-01, -1.915668353483712e+00, -1.807866317305476e-01, -1.807866317305476e-01, -1.027981841796465e-01, -1.090721908609751e-01, -7.094314109564019e-02, -1.657225610928177e-01, -8.624410462734612e-02, -8.624410462734622e-02, -6.141870215036063e-01, -6.126623889869447e-01, -6.131316915216763e-01, -6.135669930368693e-01, -6.133424142013921e-01, -6.133424142013921e-01, -5.979278305652623e-01, -5.430262424786895e-01, -5.563909661143502e-01, -5.710236102832741e-01, -5.632232101655978e-01, -5.632232101655978e-01, -6.948546983267064e-01, -2.880906643186843e-01, -3.245806523466939e-01, -3.910462064419690e-01, -3.542102257616707e-01, -3.542102257616702e-01, -5.020193429850912e-01, -1.778131680491498e-01, -1.752436905676519e-01, -3.708078372839029e-01, -1.621364180468438e-01, -1.621364180468438e-01, -1.341418902471261e-01, -6.436795946568336e-02, -8.331753128309054e-02, -1.616116013867929e-01, -8.116779751387994e-02, -8.116779751387984e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_edf1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.619296539377445e+01, -2.619293557610770e+01, -2.619309468991758e+01, -2.619302982073611e+01, -2.619346616600999e+01, -2.619357209798469e+01, -2.619200261368737e+01, -2.619171141397233e+01, -2.619304111135098e+01, -2.619242613629671e+01, -2.619304111135098e+01, -2.619242613629671e+01, -4.253530813005657e+00, -4.253812219970049e+00, -4.253590978068074e+00, -4.253886048014778e+00, -4.255186525495499e+00, -4.255591393609955e+00, -4.253098463434505e+00, -4.253523411354852e+00, -4.252748626878084e+00, -4.254955481823631e+00, -4.252748626878084e+00, -4.254955481823631e+00, -8.408583943527325e-01, -8.459757860061208e-01, -8.385591111956295e-01, -8.448248432657955e-01, -8.027012077696791e-01, -7.945589953924058e-01, -8.045379505576147e-01, -8.071983332488458e-01, -8.445828802137636e-01, -7.637853011429623e-01, -8.445828802137636e-01, -7.637853011429623e-01, -2.092101438914086e-01, -2.127057810614816e-01, -2.127584095724145e-01, -2.170478187152991e-01, -9.640109765579028e-01, -1.000875900068594e+00, -1.583684494941381e-01, -1.589714283996017e-01, -1.724831284951315e-01, -1.738053915849476e-01, -1.724831284951305e-01, -1.738053915849471e-01, -2.670840757873022e-02, -2.675963257126582e-02, -2.692210799333338e-02, -2.692507107422576e-02, -4.573529140432882e-02, -4.541584179075318e-02, -2.276985834467679e-02, -2.283933866786684e-02, -2.438999242909281e-02, -1.997651756726030e-02, -2.438999242909285e-02, -1.997651756726039e-02, -6.533531306978228e+00, -6.531960276960367e+00, -6.536558897719018e+00, -6.534890609924076e+00, -6.533696468031644e+00, -6.532061476063920e+00, -6.536298208829899e+00, -6.534719737023189e+00, -6.535083237949578e+00, -6.533433865684856e+00, -6.535083237949578e+00, -6.533433865684856e+00, -2.226501326241917e+00, -2.226391964805122e+00, -2.249220471706669e+00, -2.248571186265072e+00, -2.195453730210778e+00, -2.203102835403995e+00, -2.215211300890108e+00, -2.222970621303849e+00, -2.261055902129431e+00, -2.242958037007208e+00, -2.261055902129431e+00, -2.242958037007208e+00, -7.760391493579312e-01, -7.746299740322931e-01, -8.643235384411496e-01, -8.647974026464702e-01, -7.058643280343528e-01, -7.263818846878642e-01, -7.580433141492973e-01, -7.763798112093322e-01, -8.056576164756557e-01, -7.752165629721022e-01, -8.056576164756557e-01, -7.752165629721021e-01, -1.175343304560059e-01, -1.170813337059833e-01, -2.116902923473703e-01, -2.118930183628452e-01, -1.069355806179956e-01, -1.078946194205379e-01, -2.499164072075207e+00, -2.498181132371768e+00, -1.308454572769186e-01, -1.275078494657715e-01, -1.308454572769186e-01, -1.275078494657715e-01, -1.974207474504523e-02, -2.033234268238051e-02, -2.185323338046818e-02, -2.218521725536476e-02, -1.489790154232072e-02, -1.468889230878626e-02, -6.609583334575363e-02, -6.679265083134278e-02, -1.753430034040303e-02, -1.804803370589656e-02, -1.753430034040308e-02, -1.804803370589656e-02, -8.057895512658817e-01, -8.081834651197073e-01, -7.975350124152348e-01, -7.999747298111295e-01, -8.005923999242520e-01, -8.030291114321295e-01, -8.030178354201587e-01, -8.054151247371859e-01, -8.018201871070599e-01, -8.042360871096036e-01, -8.018201871070599e-01, -8.042360871096036e-01, -7.859041637803121e-01, -7.878705369569905e-01, -6.327958716516705e-01, -6.350366820483715e-01, -6.784373068838183e-01, -6.810005722406847e-01, -7.240716063865863e-01, -7.260426600247039e-01, -7.012398398037519e-01, -7.032473056000802e-01, -7.012398398037519e-01, -7.032473056000802e-01, -9.027208246271157e-01, -9.041565046929393e-01, -2.658882029052931e-01, -2.663754091163084e-01, -3.229605110836566e-01, -3.247541921605755e-01, -4.523254999117310e-01, -4.540330079947804e-01, -3.824290774138178e-01, -3.825561684601787e-01, -3.824290774138178e-01, -3.825561684601778e-01, -5.841308244505172e-01, -5.874725921762024e-01, -4.557715750630667e-02, -4.552544176141314e-02, -5.554496435341844e-02, -5.566376992827356e-02, -4.453070898217950e-01, -4.500979951171501e-01, -8.508806162417906e-02, -8.288995520931847e-02, -8.508806162417934e-02, -8.288995520931855e-02, -3.103961982546952e-02, -3.085393971844085e-02, -1.176773862938524e-02, -1.062876937484037e-02, -1.587265756693265e-02, -1.583150050310431e-02, -7.819765390030772e-02, -7.872908788026453e-02, -1.520558890797969e-02, -1.750299734424232e-02, -1.520558890797975e-02, -1.750299734424169e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_edf1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.814798105187211e-09, 1.958594467128205e-11, -9.814842542547792e-09, -9.814611621404482e-09, 1.958566548537480e-11, -9.814706358144067e-09, -9.814066966486145e-09, 1.958433816670741e-11, -9.813915783334356e-09, -9.816181323160769e-09, 1.958849401258794e-11, -9.816600071725585e-09, -9.814689410144908e-09, 1.958632878849497e-11, -9.815563426757551e-09, -9.814689410144908e-09, 1.958632878849497e-11, -9.815563426757551e-09, -1.438048134713673e-05, 2.543896069527235e-07, -1.437851306815909e-05, -1.437997864237853e-05, 2.543866824577473e-07, -1.437793736111593e-05, -1.436686124238412e-05, 2.542858862016755e-07, -1.436326453112042e-05, -1.438012780033874e-05, 2.542038704508032e-07, -1.437653274595080e-05, -1.438965572596062e-05, 2.543553511125748e-07, -1.436530941919532e-05, -1.438965572596062e-05, 2.543553511125748e-07, -1.436530941919532e-05, -9.935284970899639e-03, 1.529859976103373e-03, -9.806032136909001e-03, -9.999355879216706e-03, 1.538715386476890e-03, -9.841747250776394e-03, -1.101789534328695e-02, 1.765460753578999e-03, -1.120183099245113e-02, -1.078741360844011e-02, 1.691433459247852e-03, -1.073072438460241e-02, -9.921876027131963e-03, 1.840670384106646e-03, -1.161974364572141e-02, -9.921876027131963e-03, 1.840670384106646e-03, -1.161974364572141e-02, -1.774532299240899e+00, 8.091076312938530e-01, -1.646053437779541e+00, -1.717518565146805e+00, 7.642404802766353e-01, -1.572134559005810e+00, -5.673784154734046e-03, 7.114470456048381e-04, -5.121872783907487e-03, -3.907601868392381e+00, 2.263569243388546e+00, -3.784562205094130e+00, -2.076233353407216e+00, 3.231363863395676e+00, -1.144677452616490e+01, -2.076233353407217e+00, 3.231363863395676e+00, -1.144677452616489e+01, -4.364660245925996e+04, 2.262482583217451e-07, -3.657337801335486e+04, -3.874586669077304e+04, 9.084342023713334e-07, -3.177182708417212e+04, -2.394678899272870e+02, 2.614019333916288e+01, -2.058701923776352e+02, -1.836226911966769e+05, 1.157368925926300e-16, -1.912389008637876e+05, -6.051817831960750e+04, 2.572270240743162e-12, -3.972971465188046e+05, -6.051817831960751e+04, 2.572270240743163e-12, -3.972971465188054e+05, -2.572969775708831e-06, 2.987101538460560e-08, -2.575355537524165e-06, -2.566626434767514e-06, 2.984206198455027e-08, -2.569214839760733e-06, -2.572629437352858e-06, 2.986957640336948e-08, -2.575149367098194e-06, -2.567182069647183e-06, 2.984400868184495e-08, -2.569575901914985e-06, -2.569716540687972e-06, 2.985639465374402e-08, -2.572271899833559e-06, -2.569716540687972e-06, 2.985639465374402e-08, -2.572271899833559e-06, -1.491434937312925e-04, 5.485892904012289e-06, -1.491673682498108e-04, -1.449411094807239e-04, 5.278039493492928e-06, -1.450661633184831e-04, -1.525171351870297e-04, 5.644454153715148e-06, -1.517574853699571e-04, -1.487962176769764e-04, 5.454021737456064e-06, -1.480074898546901e-04, -1.444274570946592e-04, 5.301263233623755e-06, -1.464125237311019e-04, -1.444274570946592e-04, 5.301263233623755e-06, -1.464125237311019e-04, -1.521092045617827e-02, 3.012869953080560e-03, -1.529335001766677e-02, -8.014427326100415e-03, 1.982323961656133e-03, -7.941056531583668e-03, -2.220331743540026e-02, 4.537298592752541e-03, -2.016594291167917e-02, -1.429815804995788e-02, 3.726275390359982e-03, -1.361691553050456e-02, -1.327776377048949e-02, 2.903457962779253e-03, -1.501471923161787e-02, -1.327776377048952e-02, 2.903457962779253e-03, -1.501471923161784e-02, -1.067190675931723e+01, 7.300196787388454e+00, -1.057173776177207e+01, -1.413053342991882e+00, 7.976137718297219e-01, -1.401029158057119e+00, -1.465307069779331e+01, 9.097821034925108e+00, -1.308108394325022e+01, -1.087173908231101e-04, 6.082226040494854e-06, -1.088090863742239e-04, -7.537217647786575e+00, 4.559502652747855e+00, -7.386355236217448e+00, -7.537217647786575e+00, 4.559502652747855e+00, -7.386355236217448e+00, -4.620187954445455e+05, 1.896129456109251e-23, -3.971487639419892e+05, -2.163820102046580e+05, 3.497602425127100e-17, -2.026377769921756e+05, -8.139045271842403e+05, 2.041516695096821e-24, -7.112550541366560e+05, -5.310728457286415e+01, 2.080784683047878e+01, -5.154479897499242e+01, -6.294260322929504e+05, 2.923132443772522e-19, -2.516245567960519e+05, -6.294260322929510e+05, 2.923132443772522e-19, -2.516245567960515e+05, -7.999215313962277e-03, 2.940700353797360e-03, -7.918094758426726e-03, -1.089881514447599e-02, 3.027099854715185e-03, -1.077249173527259e-02, -1.003391943963740e-02, 2.996365278393276e-03, -9.915320944612706e-03, -9.202657275777413e-03, 2.971312693798059e-03, -9.108662006868030e-03, -9.632588375464829e-03, 2.983821481419493e-03, -9.525992692386619e-03, -9.632588375464829e-03, 2.983821481419493e-03, -9.525992692386619e-03, -7.475019585532135e-03, 3.376125576961928e-03, -7.461381236882381e-03, -3.291180340497697e-02, 7.218584198369614e-03, -3.255277920759571e-02, -2.624551625825358e-02, 5.747243950711403e-03, -2.591289273770769e-02, -1.967708836319005e-02, 4.624125256999047e-03, -1.949519057482603e-02, -2.300278824614973e-02, 5.161620916108917e-03, -2.278259157883471e-02, -2.300278824614973e-02, 5.161620916108917e-03, -2.278259157883471e-02, -6.886289654193348e-03, 1.559165248440828e-03, -6.786533415227731e-03, -6.474053240377908e-01, 3.051356306834887e-01, -6.414453722143578e-01, -3.554048954452006e-01, 1.377414383541257e-01, -3.495366121285701e-01, -1.285852388798166e-01, 3.860407864043126e-02, -1.268832689206233e-01, -2.180803724830600e-01, 7.368583910962748e-02, -2.184153546769225e-01, -2.180803724830601e-01, 7.368583910962749e-02, -2.184153546769217e-01, -4.560161360690094e-02, 1.083521516081454e-02, -4.481118251071113e-02, -2.473749252321282e+02, 2.519565085421223e+01, -2.427652435394292e+02, -9.886154166470338e+01, 2.626183079434530e+01, -9.105851888438320e+01, -1.464940968385623e-01, 4.591092011232091e-02, -1.408421302869498e-01, -2.722877596904813e+01, 1.329420073914978e+01, -2.562232982521077e+01, -2.722877596904816e+01, 1.329420073914978e+01, -2.562232982521092e+01, -1.467238269470474e+04, 6.125890193362306e-04, -1.333281986051965e+04, -1.364277385125373e+07, 6.722273604039496e-84, -1.587732326827908e+07, -1.532032219691772e+06, 8.651168725977103e-36, -1.305058208974383e+06, -3.266899382396794e+01, 1.514447591321881e+01, -3.117713496602444e+01, -9.014787856838010e+05, 2.661434777339479e-21, -3.265719552016826e+05, -9.014787856838038e+05, 2.661434777339341e-21, -3.265719552016837e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
