
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_120_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.120590601523022e+01, -2.120596899966098e+01, -2.120626057264446e+01, -2.120532328095838e+01, -2.120581275041209e+01, -2.120581275041209e+01, -3.519425911527738e+00, -3.519426247268738e+00, -3.519519973720993e+00, -3.520014354886608e+00, -3.519509883595788e+00, -3.519509883595788e+00, -7.301359481073630e-01, -7.298559599754588e-01, -7.257383975925796e-01, -7.305745433680069e-01, -7.355066604533353e-01, -7.355066604533353e-01, -2.385654020234022e-01, -2.395931039388275e-01, -8.407259653849221e-01, -2.031061110360499e-01, -2.212163516550243e-01, -2.212163516550243e-01, -6.715815883868896e-03, -7.129928180018244e-03, -5.005321507178116e-02, -3.673497687637558e-03, -9.027138487046421e-03, -9.027138487046430e-03, -5.238853718518842e+00, -5.240109471940577e+00, -5.238913573053122e+00, -5.240022042867159e+00, -5.239488496336699e+00, -5.239488496336699e+00, -2.091813851987797e+00, -2.101970669364233e+00, -2.091920019606862e+00, -2.100657790117946e+00, -2.097702945732907e+00, -2.097702945732907e+00, -6.286979965396214e-01, -6.735916115390238e-01, -5.862878634462838e-01, -5.993063499857022e-01, -6.375188667725009e-01, -6.375188667725010e-01, -1.486519591644484e-01, -2.574798444110860e-01, -1.373919888131656e-01, -1.972513139079370e+00, -1.704612622940599e-01, -1.704612622940599e-01, -2.810141465639570e-03, -3.585733530228601e-03, -2.742688103560854e-03, -8.841863454989579e-02, -4.569446338362208e-03, -4.569446338362215e-03, -6.269550777018799e-01, -6.213374790248708e-01, -6.229702926158139e-01, -6.245966690986458e-01, -6.237496420986482e-01, -6.237496420986482e-01, -6.116324506169660e-01, -5.448135483555288e-01, -5.593754823892315e-01, -5.756751023404466e-01, -5.669976912674113e-01, -5.669976912674113e-01, -7.049460300139686e-01, -3.031503094384773e-01, -3.366714256673147e-01, -3.971931098391310e-01, -3.627520083608427e-01, -3.627520083608428e-01, -5.049159847596495e-01, -4.717514314582136e-02, -6.837794470502148e-02, -3.771214164059708e-01, -1.160154866562121e-01, -1.160154866562121e-01, -9.717283839733418e-03, -9.150334617449993e-04, -1.991299669147443e-03, -1.083620080652691e-01, -4.012337947790769e-03, -4.012337947790765e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_120_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.861166227251275e+01, -2.861162973546726e+01, -2.861180330074411e+01, -2.861173153057464e+01, -2.861220544780274e+01, -2.861232443486206e+01, -2.861062211863991e+01, -2.861029657287648e+01, -2.861175782084483e+01, -2.861106513149233e+01, -2.861175782084483e+01, -2.861106513149233e+01, -4.576742034533708e+00, -4.577275237262076e+00, -4.576814193435730e+00, -4.577376520038984e+00, -4.578877450884801e+00, -4.579538460510732e+00, -4.576036593595069e+00, -4.576752979444679e+00, -4.575756026521438e+00, -4.578687244385339e+00, -4.575756026521438e+00, -4.578687244385339e+00, -8.539775170843098e-01, -8.651647275890878e-01, -8.505167456855495e-01, -8.642470591525764e-01, -8.085599267700738e-01, -7.898763432797077e-01, -8.043651062788160e-01, -8.105453647141628e-01, -8.915016872631404e-01, -7.135904514378393e-01, -8.915016872631404e-01, -7.135904514378393e-01, -2.271355086548336e-01, -2.154046472048314e-01, -2.296570862076393e-01, -2.181190209864055e-01, -9.768665537549391e-01, -1.040963490828919e+00, -2.074883678178301e-01, -2.038387856509762e-01, -1.473286734381450e-01, -3.756860490102584e-01, -1.473286734381448e-01, -3.756860490102600e-01, -6.904281326543023e-03, -1.108739800187247e-02, -7.030926237944164e-03, -1.198362994027392e-02, -6.542915130875761e-02, -7.757759879333631e-02, -5.324938982789403e-03, -4.614619600142355e-03, -1.617011213374462e-02, 1.056399754175174e-02, -1.617011213374458e-02, 1.056399754175137e-02, -7.066064024358488e+00, -7.064321904857929e+00, -7.068839339168171e+00, -7.066991182198290e+00, -7.066222878437213e+00, -7.064410428274554e+00, -7.068595087246210e+00, -7.066845288792142e+00, -7.067489468570958e+00, -7.065661721264402e+00, -7.067489468570958e+00, -7.065661721264402e+00, -2.239284191309697e+00, -2.239151338878254e+00, -2.269375752912393e+00, -2.268505685053831e+00, -2.187870112077945e+00, -2.203172364092120e+00, -2.214197536564383e+00, -2.229490352267925e+00, -2.293973102177376e+00, -2.259288426014078e+00, -2.293973102177376e+00, -2.259288426014078e+00, -7.920438886236882e-01, -7.904157893735249e-01, -8.930889810389530e-01, -8.942903659719484e-01, -7.137330452371523e-01, -7.432146156323907e-01, -7.757213689871038e-01, -7.980909283834963e-01, -8.269326047669456e-01, -7.870115090297166e-01, -8.269326047669454e-01, -7.870115090297168e-01, -1.910634583843934e-01, -1.879767836841831e-01, -2.373284413669484e-01, -2.353190314682050e-01, -1.808738311801286e-01, -1.777119043307757e-01, -2.651189808900402e+00, -2.650101811406784e+00, -2.177630452975401e-01, -1.713931232543759e-01, -2.177630452975401e-01, -1.713931232543759e-01, -3.115475557775107e-03, -4.401448343529440e-03, -4.540255144181719e-03, -5.163695469388211e-03, -2.702977638675493e-03, -4.554289371676882e-03, -1.245464498411743e-01, -1.266097703982257e-01, 2.389077941130384e-03, -9.405668938731571e-03, 2.389077941130802e-03, -9.405668938731496e-03, -8.330306915379584e-01, -8.359723665711173e-01, -8.223575754049850e-01, -8.257770474917969e-01, -8.272883847317064e-01, -8.305979455135893e-01, -8.306302530637979e-01, -8.337170837308002e-01, -8.290838626418270e-01, -8.322777929832885e-01, -8.290838626418270e-01, -8.322777929832885e-01, -8.105414594227277e-01, -8.129060133766232e-01, -6.394009171411722e-01, -6.428467504267591e-01, -6.881739914821327e-01, -6.921871869028963e-01, -7.357436256705361e-01, -7.385564811563808e-01, -7.116470653468518e-01, -7.144885906660083e-01, -7.116470653468518e-01, -7.144885906660083e-01, -9.329636955156154e-01, -9.356945104087144e-01, -2.668738566557599e-01, -2.649127061286421e-01, -3.144492155232664e-01, -3.141734404211834e-01, -4.534357941418894e-01, -4.557745896973157e-01, -3.776807109341150e-01, -3.782645343656424e-01, -3.776807109341153e-01, -3.782645343656428e-01, -5.882814075551603e-01, -5.936654274950924e-01, -6.709713547547119e-02, -6.863194954491721e-02, -9.491576511134101e-02, -1.015443104182421e-01, -4.450684661317422e-01, -4.524770294677604e-01, -1.623017068303091e-01, -1.488956580354170e-01, -1.623017068303084e-01, -1.488956580354161e-01, -1.166179761735360e-02, -1.496144962452047e-02, -1.211582624611708e-03, -1.239043827128781e-03, -1.860049326695749e-03, -3.361010607298744e-03, -1.477881482036116e-01, -1.488327442632475e-01, 1.570737209940616e-03, -8.344024882849087e-03, 1.570737209940664e-03, -8.344024882849011e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_120_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.874608650715898e-09, 0.000000000000000e+00, 1.874639475676832e-09, 1.874862725341137e-09, 0.000000000000000e+00, 1.874820384649586e-09, 1.875287913307251e-09, 0.000000000000000e+00, 1.875555916662481e-09, 1.872473910406787e-09, 0.000000000000000e+00, 1.871913818993922e-09, 1.874821770358734e-09, 0.000000000000000e+00, 1.873058900475322e-09, 1.874821770358734e-09, 0.000000000000000e+00, 1.873058900475322e-09, -2.985198278436472e-06, 0.000000000000000e+00, -2.969144070472469e-06, -2.983556327350637e-06, 0.000000000000000e+00, -2.966496780402122e-06, -2.933126183768087e-06, 0.000000000000000e+00, -2.917046967721739e-06, -3.018319950900348e-06, 0.000000000000000e+00, -3.000206066861127e-06, -2.995022556169572e-06, 0.000000000000000e+00, -2.953567087679085e-06, -2.995022556169572e-06, 0.000000000000000e+00, -2.953567087679085e-06, -7.451959415793979e-03, 0.000000000000000e+00, -6.915779717128966e-03, -7.588372620478630e-03, 0.000000000000000e+00, -6.932312920194895e-03, -8.894720993061224e-03, 0.000000000000000e+00, -9.713816079303274e-03, -9.083767150329963e-03, 0.000000000000000e+00, -8.822060156863442e-03, -4.919168219098507e-03, 0.000000000000000e+00, -1.246205569027849e-02, -4.919168219098507e-03, 0.000000000000000e+00, -1.246205569027849e-02, -1.339285618532351e+00, 0.000000000000000e+00, -1.431651998280554e+00, -1.314707509819865e+00, 0.000000000000000e+00, -1.391685919382398e+00, -4.335265636024647e-03, 0.000000000000000e+00, -2.866207648097116e-03, -1.728785374985794e+00, 0.000000000000000e+00, -1.847366456600577e+00, -2.162050098778854e+00, 0.000000000000000e+00, 1.534247601457368e+01, -2.162050098778853e+00, 0.000000000000000e+00, 1.534247601457380e+01, 2.103285620949664e+01, 0.000000000000000e+00, 8.302542765067024e+00, 2.314345613595120e+01, 0.000000000000000e+00, 7.894147449521569e+00, 6.109900939460672e+00, 0.000000000000000e+00, 1.368606338399364e+00, 1.215960303953990e+01, 0.000000000000000e+00, 1.585036432944142e+01, -8.753950753221281e+00, 0.000000000000000e+00, 2.963930921566844e+02, -8.753950753120019e+00, 0.000000000000000e+00, 2.963930921583392e+02, 8.155514687443940e-07, 0.000000000000000e+00, 8.152864748261731e-07, 8.297591519901129e-07, 0.000000000000000e+00, 8.289485814019721e-07, 8.162955283464332e-07, 0.000000000000000e+00, 8.156829159462713e-07, 8.284286637325076e-07, 0.000000000000000e+00, 8.281548621235201e-07, 8.228927873199279e-07, 0.000000000000000e+00, 8.221398845936482e-07, 8.228927873199279e-07, 0.000000000000000e+00, 8.221398845936482e-07, -1.225734811244099e-04, 0.000000000000000e+00, -1.226025507942508e-04, -1.172116290143972e-04, 0.000000000000000e+00, -1.173845177200923e-04, -1.306224067224903e-04, 0.000000000000000e+00, -1.280903121288358e-04, -1.258109992636224e-04, 0.000000000000000e+00, -1.232993780535262e-04, -1.134236119602936e-04, 0.000000000000000e+00, -1.193428506165248e-04, -1.134236119602936e-04, 0.000000000000000e+00, -1.193428506165248e-04, -9.859909825661584e-03, 0.000000000000000e+00, -9.997919668441076e-03, 1.907112273493291e-03, 0.000000000000000e+00, 2.360259709694987e-03, -1.726652514792699e-02, 0.000000000000000e+00, -1.257694828081873e-02, -4.672211841596560e-03, 0.000000000000000e+00, -2.727199692437008e-03, -7.176912815591542e-03, 0.000000000000000e+00, -1.096228079437033e-02, -7.176912815591520e-03, 0.000000000000000e+00, -1.096228079437031e-02, -6.361225430520930e-01, 0.000000000000000e+00, -1.034056306112693e+00, -9.586239381584012e-01, 0.000000000000000e+00, -9.723660903284608e-01, 4.144433489011282e-01, 0.000000000000000e+00, -1.481281585171308e+00, 9.319049820187419e-05, 0.000000000000000e+00, 9.344173243253307e-05, -4.008984136407359e-01, 0.000000000000000e+00, -3.183429062603547e+00, -4.008984136407359e-01, 0.000000000000000e+00, -3.183429062603547e+00, 2.362237475232161e+01, 0.000000000000000e+00, 1.528019246878723e+01, 1.779366774142616e+01, 0.000000000000000e+00, 1.527830291056839e+01, 1.575640656328805e+02, 0.000000000000000e+00, 6.199737984029839e+01, 1.406893449661286e+00, 0.000000000000000e+00, 1.245738047228836e+00, 2.309194182922618e+02, 0.000000000000000e+00, -1.685916504672048e+01, 2.309194182903210e+02, 0.000000000000000e+00, -1.685916504695681e+01, 1.548217886113233e-02, 0.000000000000000e+00, 1.570817872566421e-02, 2.776319796275923e-03, 0.000000000000000e+00, 3.384667274161495e-03, 7.062372049376516e-03, 0.000000000000000e+00, 7.638344642891873e-03, 1.108256295905083e-02, 0.000000000000000e+00, 1.147398145357487e-02, 9.056043250310352e-03, 0.000000000000000e+00, 9.544891189438937e-03, 9.056043250310352e-03, 0.000000000000000e+00, 9.544891189438937e-03, 2.023811739495779e-02, 0.000000000000000e+00, 2.025126340453586e-02, -2.593926957767228e-02, 0.000000000000000e+00, -2.514727424753244e-02, -1.938705849777694e-02, 0.000000000000000e+00, -1.854032252164270e-02, -1.341942320815464e-02, 0.000000000000000e+00, -1.286285418361858e-02, -1.658936092152472e-02, 0.000000000000000e+00, -1.603134509411610e-02, -1.658936092152472e-02, 0.000000000000000e+00, -1.603134509411610e-02, 8.482854601759625e-04, 0.000000000000000e+00, 1.392158017178180e-03, -5.679178943590115e-01, 0.000000000000000e+00, -5.708081988016420e-01, -3.403724809080735e-01, 0.000000000000000e+00, -3.363596958225309e-01, -1.117055366912193e-01, 0.000000000000000e+00, -1.085152874179805e-01, -2.021217245230798e-01, 0.000000000000000e+00, -2.015261650592263e-01, -2.021217245230799e-01, 0.000000000000000e+00, -2.015261650592263e-01, -3.719891925335784e-02, 0.000000000000000e+00, -3.532499133760005e-02, 3.681101584483763e+00, 0.000000000000000e+00, 3.128674118227584e+00, 3.454639743167003e+00, 0.000000000000000e+00, 1.013773970366490e+00, -1.349203422367633e-01, 0.000000000000000e+00, -1.213400191055638e-01, 2.295939403357537e+00, 0.000000000000000e+00, -2.821823084444063e+00, 2.295939403357381e+00, 0.000000000000000e+00, -2.821823084444131e+00, 1.357974330927077e+01, 0.000000000000000e+00, 7.581927130470457e+00, 1.064348783925132e+02, 0.000000000000000e+00, 6.565514990039020e+01, 6.233571601309242e+01, 0.000000000000000e+00, 2.431190523360353e+01, 5.980975980989989e-01, 0.000000000000000e+00, -4.023079653640450e-01, 3.015039610990644e+02, 0.000000000000000e+00, -4.025156243913630e-01, 3.015039610993218e+02, 0.000000000000000e+00, -4.025156243277073e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
