
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_opbe_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opbe_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.099649490663189e+01, -2.099652267103266e+01, -2.099671324971225e+01, -2.099629879392247e+01, -2.099650640858305e+01, -2.099650640858305e+01, -3.524006459963084e+00, -3.523972064341862e+00, -3.523262618357728e+00, -3.525156747162906e+00, -3.524048997276914e+00, -3.524048997276914e+00, -7.331695442039483e-01, -7.330158233223597e-01, -7.315922116374172e-01, -7.365378732309013e-01, -7.347601612888530e-01, -7.347601612888530e-01, -2.325308134849649e-01, -2.337273920142266e-01, -8.432248543200374e-01, -1.999525498007526e-01, -2.117686909273780e-01, -2.117686909273780e-01, -1.230062860988240e-02, -1.294483840584196e-02, -6.941984287489687e-02, -7.109623576801415e-03, -8.931214830465812e-03, -8.931214830465812e-03, -5.099720530187442e+00, -5.099302582122940e+00, -5.099711081774925e+00, -5.099341940713912e+00, -5.099503026964268e+00, -5.099503026964268e+00, -2.154957078185975e+00, -2.164717083135577e+00, -2.156728389576916e+00, -2.165298697576854e+00, -2.159543343779355e+00, -2.159543343779355e+00, -6.248993707901737e-01, -6.611634822872064e-01, -5.833845388720760e-01, -5.914335001684067e-01, -6.322552618029775e-01, -6.322552618029775e-01, -1.588154557647165e-01, -2.505589120367082e-01, -1.492322885177281e-01, -1.889835146975408e+00, -1.730600103792640e-01, -1.730600103792640e-01, -5.486189242901893e-03, -6.950191664752993e-03, -5.313504505638818e-03, -1.069605910224733e-01, -6.401161238331612e-03, -6.401161238331612e-03, -6.121354081565257e-01, -6.110935949511260e-01, -6.114157024355549e-01, -6.117132332639404e-01, -6.115596901917846e-01, -6.115596901917846e-01, -5.960574046319503e-01, -5.448582004990302e-01, -5.573447901898853e-01, -5.710572077206454e-01, -5.637320638968523e-01, -5.637320638968523e-01, -6.916080687294739e-01, -2.955097438058558e-01, -3.315721580920112e-01, -3.959223875612283e-01, -3.602510254370345e-01, -3.602510254370345e-01, -5.046072405537291e-01, -6.668809942884062e-02, -8.895322544941286e-02, -3.758602468759388e-01, -1.289870657307746e-01, -1.289870657307746e-01, -1.734410859367486e-02, -1.858429680472173e-03, -3.900437764690877e-03, -1.229115613777558e-01, -5.923200553782951e-03, -5.923200553782948e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_opbe_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opbe_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.522379027768022e+01, -2.522389529495106e+01, -2.522432754203012e+01, -2.522276581089760e+01, -2.522358904972094e+01, -2.522358904972094e+01, -4.135272998996076e+00, -4.135333229492394e+00, -4.136824713509246e+00, -4.134996869808955e+00, -4.135442292644557e+00, -4.135442292644557e+00, -8.335872682235708e-01, -8.319162995945043e-01, -7.906460729885757e-01, -7.976777270820385e-01, -7.969878382952178e-01, -7.969878382952178e-01, -2.218500463759327e-01, -2.254985751134228e-01, -9.694912730376112e-01, -1.811711603757006e-01, -1.932547242373961e-01, -1.932547242373961e-01, -1.636284189536103e-02, -1.721427150775996e-02, -8.732226668230715e-02, -9.472500473519819e-03, -1.189265422211085e-02, -1.189265422211085e-02, -6.331013147070503e+00, -6.334068537466467e+00, -6.331149019980773e+00, -6.333846406047638e+00, -6.332564481978037e+00, -6.332564481978037e+00, -2.213382415045701e+00, -2.233280865515611e+00, -2.192250188384089e+00, -2.209678642264915e+00, -2.234796715439342e+00, -2.234796715439342e+00, -7.681732264355882e-01, -8.559631147690792e-01, -7.105782131576081e-01, -7.608369967258178e-01, -7.833653066944167e-01, -7.833653066944167e-01, -1.604189943399596e-01, -2.244854760373340e-01, -1.540822072431825e-01, -2.451579976016981e+00, -1.618349823084267e-01, -1.618349823084267e-01, -7.311227839105567e-03, -9.259830257632096e-03, -7.076733427071065e-03, -1.223478044479762e-01, -8.525412014252193e-03, -8.525412014252194e-03, -7.997594480073320e-01, -7.915590944592321e-01, -7.945689348453930e-01, -7.969578033340645e-01, -7.957745900524116e-01, -7.957745900524116e-01, -7.802270724960980e-01, -6.296430553400552e-01, -6.749076808073297e-01, -7.194881764194732e-01, -6.970988877287694e-01, -6.970988877287694e-01, -8.939993689515121e-01, -2.721450948777339e-01, -3.268926831444247e-01, -4.544734952015836e-01, -3.847466063582892e-01, -3.847466063582891e-01, -5.829202459480602e-01, -8.448170455115644e-02, -1.080966365770252e-01, -4.499403861447169e-01, -1.351458111048393e-01, -1.351458111048393e-01, -2.302989268767690e-02, -2.477605783010462e-03, -5.198651607930030e-03, -1.316668737338952e-01, -7.889168468264289e-03, -7.889168468264282e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_opbe_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opbe_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.965605299995399e-09, -6.965542051394032e-09, -6.965214710494389e-09, -6.966156674819407e-09, -6.965669658682868e-09, -6.965669658682868e-09, -8.757274356861395e-06, -8.757246222886802e-06, -8.755743068026015e-06, -8.751861397319759e-06, -8.756418688517713e-06, -8.756418688517713e-06, -4.777622672570845e-03, -4.799113457484147e-03, -5.285930925152124e-03, -5.127168774643567e-03, -5.163709524678992e-03, -5.163709524678992e-03, -6.337569897228339e-01, -6.132872715659372e-01, -2.671844535565592e-03, -1.145079471789418e+00, -9.494460860695138e-01, -9.494460860695136e-01, -5.614344139923421e+00, -5.929042515754792e+00, -3.138069022631388e+00, -5.112240234782433e+00, -6.489899155702233e+00, -6.489899155702273e+00, -1.808538498315270e-06, -1.806514707878194e-06, -1.808444361096685e-06, -1.806658075213483e-06, -1.807515807249609e-06, -1.807515807249609e-06, -7.537895839173710e-05, -7.360918863648121e-05, -7.613146351356850e-05, -7.455970593654592e-05, -7.402312726258940e-05, -7.402312726258940e-05, -7.256924059408586e-03, -3.971380313102620e-03, -9.878074745166002e-03, -6.694348340833808e-03, -6.696605605978401e-03, -6.696605605978401e-03, -1.721893471719972e+00, -4.901461781570007e-01, -1.949896241275551e+00, -6.736924234607355e-05, -1.773992383408072e+00, -1.773992383408072e+00, -6.738165393697688e+00, -6.016430091183544e+00, -3.776054011959675e+01, -3.216155387030737e+00, -1.757344245552060e+01, -1.757344245552781e+01, -4.404607670893576e-03, -5.360577622373250e-03, -5.047245772098620e-03, -4.770037651788116e-03, -4.910802385200246e-03, -4.910802385200246e-03, -4.569839472146099e-03, -1.509759885229237e-02, -1.209339446293132e-02, -9.160660310453801e-03, -1.064583014637703e-02, -1.064583014637703e-02, -3.407823791371746e-03, -2.512736144362036e-01, -1.462105704742402e-01, -5.512816382920053e-02, -9.289314887022385e-02, -9.289314887022389e-02, -2.054080014537891e-02, -2.882472011823871e+00, -2.760407303017266e+00, -6.060860055384566e-02, -3.207947023309345e+00, -3.207947023309349e+00, -4.515178058868334e+00, -2.955271682217677e+01, -1.429697747013938e+01, -3.337411650791502e+00, -2.219776710615547e+01, -2.219776710615888e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
