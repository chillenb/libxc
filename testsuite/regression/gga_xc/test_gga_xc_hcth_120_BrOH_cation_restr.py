
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_120_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.120590601522501e+01, -2.120596899962353e+01, -2.120626057250273e+01, -2.120532327996858e+01, -2.120581274529819e+01, -2.120581274529819e+01, -3.519425876789742e+00, -3.519426207943007e+00, -3.519519940420717e+00, -3.520014312267193e+00, -3.519509483184177e+00, -3.519509483184177e+00, -7.301099277693565e-01, -7.298172327635947e-01, -7.256718233572145e-01, -7.305672478437055e-01, -7.288923657692270e-01, -7.288923657692270e-01, -2.385865019841236e-01, -2.396126271933640e-01, -8.399999782516724e-01, -2.030919680375356e-01, -2.173375051448048e-01, -2.173375051448048e-01, -6.620295762251145e-03, -7.001785615015570e-03, -4.975397454538411e-02, -3.669014541198523e-03, -4.681341369060516e-03, -4.681341369060508e-03, -5.238853570392848e+00, -5.240109312290734e+00, -5.238913417345180e+00, -5.240021893629772e+00, -5.239488339666249e+00, -5.239488339666249e+00, -2.091813798280224e+00, -2.101970547997163e+00, -2.091907557493935e+00, -2.100645462212811e+00, -2.097639311845909e+00, -2.097639311845909e+00, -6.286953633565446e-01, -6.735907239598735e-01, -5.859735131100007e-01, -5.990532807645407e-01, -6.368836358945971e-01, -6.368836358945971e-01, -1.486506995583559e-01, -2.574790927540336e-01, -1.371251182877211e-01, -1.972512955044809e+00, -1.709729471157082e-01, -1.709729471157082e-01, -2.791585010447948e-03, -3.582218887960841e-03, -2.702880096641394e-03, -8.841295926334128e-02, -3.286344365272336e-03, -3.286344365272337e-03, -6.269508344163913e-01, -6.213327980579538e-01, -6.229656230874435e-01, -6.245923333351721e-01, -6.237451480387639e-01, -6.237451480387639e-01, -6.116297412781880e-01, -5.448094389570519e-01, -5.593701176682213e-01, -5.756719853685561e-01, -5.669944278915074e-01, -5.669944278915074e-01, -7.049431424661773e-01, -3.031501681187005e-01, -3.366687514569563e-01, -3.971891225126931e-01, -3.627490445302314e-01, -3.627490445302313e-01, -5.049016076622644e-01, -4.717052372751608e-02, -6.826000275361116e-02, -3.770803880653271e-01, -1.159951524053069e-01, -1.159951524053070e-01, -9.672784733527741e-03, -9.150133957594752e-04, -1.956698160295527e-03, -1.083322618457135e-01, -3.028490794743291e-03, -3.028490794743288e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_120_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.861164600412671e+01, -2.861176741587424e+01, -2.861226494177570e+01, -2.861045934817628e+01, -2.861141149393858e+01, -2.861141149393858e+01, -4.577008731495360e+00, -4.577095464458697e+00, -4.579208057286516e+00, -4.576394914173187e+00, -4.577222510569050e+00, -4.577222510569050e+00, -8.596160105573009e-01, -8.574474968772297e-01, -7.992744194999272e-01, -8.074617510946418e-01, -8.072866180958009e-01, -8.072866180958009e-01, -2.207569284675106e-01, -2.232592492635862e-01, -1.010166951557808e+00, -2.056479861091019e-01, -2.049071900213894e-01, -2.049071900213892e-01, -9.063156592639241e-03, -9.597781131333180e-03, -7.173954053427421e-02, -4.972910255464880e-03, -6.370182861632314e-03, -6.370182861632360e-03, -7.065193070411130e+00, -7.067915392417142e+00, -7.065316775262260e+00, -7.067720295263547e+00, -7.066575722458144e+00, -7.066575722458144e+00, -2.239217923924092e+00, -2.268940951651962e+00, -2.195533362981426e+00, -2.221857304001829e+00, -2.276717657303356e+00, -2.276717657303356e+00, -7.912331273025038e-01, -8.936936987369528e-01, -7.287605075535055e-01, -7.870411841622129e-01, -8.074173326385120e-01, -8.074173326385120e-01, -1.895243507428017e-01, -2.363185278950729e-01, -1.794390396289294e-01, -2.650645921052231e+00, -1.938202163448669e-01, -1.938202163448669e-01, -3.771326793048030e-03, -4.854422198161395e-03, -3.656436980138042e-03, -1.255822820849287e-01, -4.453609779047261e-03, -4.453609779047312e-03, -8.345053420113284e-01, -8.240727918729799e-01, -8.289488201686335e-01, -8.321782044055597e-01, -8.306859437512176e-01, -8.306859437512176e-01, -8.117255059752062e-01, -6.411275972020336e-01, -6.901867751125078e-01, -7.371529440833711e-01, -7.130707613588807e-01, -7.130707613588807e-01, -9.343417822605381e-01, -2.658816287129417e-01, -3.142681025149731e-01, -4.546072241507255e-01, -3.779760685414979e-01, -3.779760685414978e-01, -5.909914798090036e-01, -6.786817172971112e-02, -9.833504258520966e-02, -4.488092406045654e-01, -1.558950368069325e-01, -1.558950368069315e-01, -1.334337467581753e-02, -1.225343960348523e-03, -2.634511735137008e-03, -1.483266655424391e-01, -4.100561005711763e-03, -4.100561005711659e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_120_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.373120319257917e-10, 9.374207780391667e-10, 9.377109580686751e-10, 9.360969362761476e-10, 9.369701878388309e-10, 9.369701878388309e-10, -1.488586241391819e-06, -1.487514034092507e-06, -1.462543415213846e-06, -1.504631825860907e-06, -1.487137093720036e-06, -1.487137093720036e-06, -3.591905866015172e-03, -3.630159928529446e-03, -4.653294259034193e-03, -4.476593040164719e-03, -4.492085578717861e-03, -4.492085578717861e-03, -6.981819147710177e-01, -6.828968915780201e-01, -1.780879505399058e-03, -8.953600696849744e-01, -9.116106238557320e-01, -9.116106238557339e-01, 7.006066966801439e+00, 7.322337190538090e+00, 1.763864214132788e+00, 6.985962457765801e+00, 8.574623245096669e+00, 8.574623245154246e+00, 4.077095679796482e-07, 4.146771377698017e-07, 4.079947710138634e-07, 4.141459677616566e-07, 4.112583584339070e-07, 4.112583584339070e-07, -6.129399700394586e-05, -5.864900405902571e-05, -6.467856830218258e-05, -6.227766436281560e-05, -5.818866177247843e-05, -5.818866177247843e-05, -4.964153547185681e-03, 1.067005258539694e-03, -7.377167887190748e-03, -1.818408458474823e-03, -4.429471871898624e-03, -4.429471871898624e-03, -4.187638405936088e-01, -4.828129102057015e-01, -3.154066493645577e-01, 4.665796300321864e-05, -9.445827339280850e-01, -9.445827339280850e-01, 9.511938740078932e+00, 8.246810003558222e+00, 5.349903387218370e+01, 6.624891819072476e-01, 2.434824055711168e+01, 2.434824055712324e+01, 7.799073867777903e-03, 1.542030358502912e-03, 3.677246643681265e-03, 5.640924539855858e-03, 4.652205470893522e-03, 4.652205470893522e-03, 1.012291071536393e-02, -1.277020195931326e-02, -9.480181502670465e-03, -6.569513836242526e-03, -8.154098142735055e-03, -8.154098142735055e-03, 5.613089044980862e-04, -2.847175900936353e-01, -1.692314437959706e-01, -5.504843370691818e-02, -1.009128023112396e-01, -1.009128023112398e-01, -1.812535504312243e-02, 1.700924875878271e+00, 1.087560323399269e+00, -6.398452297220680e-02, -1.921941610754351e-01, -1.921941610754472e-01, 5.214350914889592e+00, 4.560826268674824e+01, 2.090348426472671e+01, 4.018471251013874e-02, 3.105318665169712e+01, 3.105318665153389e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
