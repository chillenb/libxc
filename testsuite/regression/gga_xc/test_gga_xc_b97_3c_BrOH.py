
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_3c_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.113224223418721e+01, -2.113229391046096e+01, -2.113256116839774e+01, -2.113171423851222e+01, -2.113226917954848e+01, -2.113226917954848e+01, -3.509561414638266e+00, -3.509561196757728e+00, -3.509698217054031e+00, -3.510193772531121e+00, -3.509575978203513e+00, -3.509575978203513e+00, -7.241671014657562e-01, -7.239152234769134e-01, -7.205681891327261e-01, -7.249971260886104e-01, -7.240724765640949e-01, -7.240724765640949e-01, -2.336917115165386e-01, -2.348461636820858e-01, -8.481492859783945e-01, -1.984976275716985e-01, -2.340084658798841e-01, -2.340084658798841e-01, -1.384364807610461e-02, -1.464460235227468e-02, -7.815211418173119e-02, -5.749520790116585e-03, -1.445796376961819e-02, -1.445796376961819e-02, -5.208190922366019e+00, -5.209182574563212e+00, -5.208294993235567e+00, -5.209065993455027e+00, -5.208695172980040e+00, -5.208695172980040e+00, -2.083531388335866e+00, -2.093381825498994e+00, -2.084201195709914e+00, -2.091728935643034e+00, -2.089819687236235e+00, -2.089819687236235e+00, -6.186645746415732e-01, -6.589877262655965e-01, -5.894934371161863e-01, -6.040865241127584e-01, -6.394738118602882e-01, -6.394738118602882e-01, -1.672058176775119e-01, -2.584010585579237e-01, -1.628857045606154e-01, -1.949914527720052e+00, -1.790359636654036e-01, -1.790359636654036e-01, -5.511529615965962e-03, -6.450517094231758e-03, -4.597384957649087e-03, -1.091251267367305e-01, -5.779011003121397e-03, -5.779011003121404e-03, -6.288301717089008e-01, -6.235941284366373e-01, -6.246511149567520e-01, -6.259349247112007e-01, -6.252240335619816e-01, -6.252240335619816e-01, -6.108250766207945e-01, -5.491585131721420e-01, -5.644362023804517e-01, -5.791632014783585e-01, -5.715515942706945e-01, -5.715515942706945e-01, -6.901097742380602e-01, -3.017030350842361e-01, -3.349959639408472e-01, -3.951900207534313e-01, -3.618479641653782e-01, -3.618479641653783e-01, -4.998806373061203e-01, -7.228499654153356e-02, -9.963218338216007e-02, -3.692007368572711e-01, -1.361467027517319e-01, -1.361467027517319e-01, -1.680371238078353e-02, -1.471250018702647e-03, -3.018728858695585e-03, -1.285944617540335e-01, -4.775944649092630e-03, -4.775944649092583e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_3c_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.820772977528065e+01, -2.820782742960861e+01, -2.820827115343136e+01, -2.820667178422676e+01, -2.820778120751106e+01, -2.820778120751106e+01, -4.537096764949754e+00, -4.537157064549612e+00, -4.538995579726790e+00, -4.536777659357269e+00, -4.537146978137010e+00, -4.537146978137010e+00, -8.500983100000230e-01, -8.480655751707817e-01, -7.871790878227580e-01, -7.954296115092226e-01, -8.493643202769334e-01, -8.493643202769334e-01, -2.329347268798022e-01, -2.381200213512652e-01, -1.045074413372486e+00, -1.566127803038342e-01, -2.345340447026169e-01, -2.345340447026169e-01, -1.929373088467888e-02, -2.039824256805853e-02, -9.460731120509314e-02, -7.995073114459756e-03, -2.013677713505005e-02, -2.013677713505005e-02, -6.949663554631920e+00, -6.951882121546371e+00, -6.949892633835455e+00, -6.951617768460043e+00, -6.950800231687669e+00, -6.950800231687669e+00, -2.231839992002789e+00, -2.261635653727448e+00, -2.204691283088912e+00, -2.228229290305748e+00, -2.286337387101701e+00, -2.286337387101701e+00, -7.787051420764823e-01, -8.655173828856678e-01, -7.383715735933056e-01, -7.826885744284693e-01, -8.105869336153915e-01, -8.105869336153915e-01, -1.393591707502869e-01, -2.049930178857330e-01, -1.353802423898137e-01, -2.596181184941196e+00, -1.409522354852515e-01, -1.409522354852515e-01, -7.660290647514250e-03, -8.979822070134235e-03, -6.371957438285882e-03, -1.146144972958934e-01, -8.033293815496015e-03, -8.033293815496003e-03, -8.416162608207163e-01, -8.210060034941948e-01, -8.276933456575768e-01, -8.336327746116811e-01, -8.305922517617410e-01, -8.305922517617410e-01, -8.175214464036806e-01, -6.621023811775698e-01, -7.037698706160829e-01, -7.386240371666892e-01, -7.211743178880862e-01, -7.211743178880862e-01, -9.051110721019651e-01, -2.652617580092800e-01, -3.363169811470942e-01, -4.644931592782793e-01, -3.992232308710990e-01, -3.992232308710991e-01, -5.969316596252594e-01, -9.044313110434314e-02, -1.120369488252030e-01, -4.468192609016644e-01, -1.226002104306263e-01, -1.226002104306265e-01, -2.340540790220372e-02, -2.011172789940739e-03, -4.164281366505938e-03, -1.168387855113454e-01, -6.623682383680826e-03, -6.623682383680786e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_3c_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.604928426257829e-10, 1.605672759205392e-10, 1.607892898357291e-10, 1.595725223773256e-10, 1.605330161807788e-10, 1.605330161807788e-10, -1.934173182653979e-06, -1.933514227653711e-06, -1.915070978290713e-06, -1.945076007448646e-06, -1.933798519831757e-06, -1.933798519831757e-06, -3.512476265547942e-03, -3.547234207491165e-03, -4.603888161566649e-03, -4.430721655324391e-03, -3.525018190366724e-03, -3.525018190366724e-03, -5.887729304645984e-01, -5.570266784974044e-01, -1.408973359589387e-03, -1.688847767779337e+00, -5.789703274200906e-01, -5.789703274200906e-01, -8.717671294949428e+00, -8.950424633556551e+00, -6.309010289601359e+00, -4.092802177317402e+00, -9.242559030780985e+00, -9.242559030780985e+00, 1.039048693407034e-07, 1.080864478464364e-07, 1.043227240799380e-07, 1.075743089400048e-07, 1.060636286829826e-07, 1.060636286829826e-07, -6.092436639744391e-05, -5.825744512136636e-05, -6.306556029160755e-05, -6.092241295959526e-05, -5.641340365767694e-05, -5.641340365767694e-05, -5.267589870242598e-03, -2.243301982368163e-03, -6.670268969843921e-03, -5.859623046152969e-03, -4.467725167535188e-03, -4.467725167535188e-03, -2.942145640328618e+00, -5.959775465531477e-01, -3.235411691653101e+00, 1.127211595699292e-05, -2.514884424499642e+00, -2.514884424499642e+00, -4.247008352747875e+00, -4.611862027070571e+00, -1.101800040512009e+01, -5.988774714981945e+00, -6.428815217107970e+00, -6.428815217125482e+00, 1.680007867047830e-02, -2.056277850331235e-03, 1.104569227912763e-03, 5.541679489306607e-03, 3.026182487851480e-03, 3.026182487851482e-03, 2.983585666145743e-02, -1.027974155614722e-02, -8.236401220505249e-03, -7.483516546536961e-03, -7.760515537249405e-03, -7.760515537249403e-03, -2.059524308184988e-03, -2.685541515144604e-01, -1.355596985052003e-01, -4.613167179619999e-02, -7.890995281262173e-02, -7.890995281262182e-02, -1.597907292681591e-02, -5.380881840181729e+00, -5.417978059104783e+00, -6.004033924383800e-02, -5.011746995260192e+00, -5.011746995260213e+00, -7.131351451509611e+00, -3.388589214128555e+00, -4.532148705392022e+00, -5.954950740703795e+00, -8.486180940142276e+00, -8.486180940144067e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
