
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_3c_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.113278358387762e+01, -2.113284295938626e+01, -2.113312390472178e+01, -2.113224018656993e+01, -2.113270081294999e+01, -2.113270081294999e+01, -3.509711698130269e+00, -3.509709888349609e+00, -3.509753650773994e+00, -3.510333283654166e+00, -3.509792581266538e+00, -3.509792581266538e+00, -7.255817689065359e-01, -7.252523133745918e-01, -7.200003818426086e-01, -7.249400004889897e-01, -7.233033839816887e-01, -7.233033839816887e-01, -2.319569772495991e-01, -2.329250771457606e-01, -8.355431335289044e-01, -2.030068194923430e-01, -2.127179553295932e-01, -2.127179553295932e-01, -7.374948851954616e-03, -7.838686090140604e-03, -6.220414028853227e-02, -3.874538372318129e-03, -5.051930775889972e-03, -5.051930775889966e-03, -5.210443946252789e+00, -5.211468376553337e+00, -5.210494233709856e+00, -5.211398519135219e+00, -5.210961116667105e+00, -5.210961116667105e+00, -2.084048841864434e+00, -2.094278371292752e+00, -2.083994138469512e+00, -2.092779023712029e+00, -2.090006101042686e+00, -2.090006101042686e+00, -6.253492577332357e-01, -6.662544087914599e-01, -5.827450050117757e-01, -5.936418607409898e-01, -6.334575938299556e-01, -6.334575938299556e-01, -1.637633651483698e-01, -2.551132547335054e-01, -1.530718206446428e-01, -1.952146994260978e+00, -1.760604282629629e-01, -1.760604282629629e-01, -2.878377358089189e-03, -3.774447150632474e-03, -2.776052360178916e-03, -1.047449820591973e-01, -3.433712775794552e-03, -3.433712775794553e-03, -6.186059426570522e-01, -6.143352299141356e-01, -6.151450961652379e-01, -6.162255258330585e-01, -6.156203220117122e-01, -6.156203220117122e-01, -6.050858542989441e-01, -5.408608191656500e-01, -5.561664986653098e-01, -5.721963269768289e-01, -5.638654505835613e-01, -5.638654505835613e-01, -6.976880619602962e-01, -2.973050336558189e-01, -3.299505752212698e-01, -3.933107081616555e-01, -3.572964892022577e-01, -3.572964892022578e-01, -5.010033181956697e-01, -5.920796846259482e-02, -8.431814081324203e-02, -3.741192418383208e-01, -1.290780829918405e-01, -1.290780829918406e-01, -1.115298493574878e-02, -8.696449191555356e-04, -1.959655279924860e-03, -1.224078656144719e-01, -3.141671162918769e-03, -3.141671162918754e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_3c_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.820851986774368e+01, -2.820863206171904e+01, -2.820910119213223e+01, -2.820743249295722e+01, -2.820831111394713e+01, -2.820831111394713e+01, -4.537364599798103e+00, -4.537437457957651e+00, -4.539227956473404e+00, -4.536965579212832e+00, -4.537560598822440e+00, -4.537560598822440e+00, -8.628122972468604e-01, -8.607755773874973e-01, -8.045312197367239e-01, -8.127117913343247e-01, -8.125269501214554e-01, -8.125269501214554e-01, -2.102157467263270e-01, -2.158196813376936e-01, -1.011703411446846e+00, -1.553920116900128e-01, -1.730630174397714e-01, -1.730630174397713e-01, -1.028450644496823e-02, -1.093631536402996e-02, -8.112170599481043e-02, -5.363489986411158e-03, -7.015933343368100e-03, -7.015933343368119e-03, -6.952783688896986e+00, -6.955072897773358e+00, -6.952889285036700e+00, -6.954910390384383e+00, -6.953945511511405e+00, -6.953945511511405e+00, -2.240027765267222e+00, -2.270562344677755e+00, -2.193786068329911e+00, -2.221164384558263e+00, -2.278835110335995e+00, -2.278835110335995e+00, -7.868783297977220e-01, -8.736946863501663e-01, -7.265495631156446e-01, -7.700297241743626e-01, -8.014071368290308e-01, -8.014071368290308e-01, -1.447348315138326e-01, -1.898284663771862e-01, -1.411331627090019e-01, -2.599107214969977e+00, -1.397880016518261e-01, -1.397880016518261e-01, -3.968755749172390e-03, -5.222926446477360e-03, -3.824259956797449e-03, -1.166981693689269e-01, -4.744045052850658e-03, -4.744045052850671e-03, -8.268573340648822e-01, -8.055068248174863e-01, -8.118787608067751e-01, -8.181941441871534e-01, -8.149177630235195e-01, -8.149177630235195e-01, -8.095808301204942e-01, -6.441580938998064e-01, -6.891054639624338e-01, -7.283359447502679e-01, -7.088355710507983e-01, -7.088355710507983e-01, -9.135555573968522e-01, -2.414789393996049e-01, -3.114212733725242e-01, -4.585258037908080e-01, -3.828378682263505e-01, -3.828378682263506e-01, -5.942379630497289e-01, -7.805605170578503e-02, -1.038210899711400e-01, -4.507192136499164e-01, -1.241726753889862e-01, -1.241726753889862e-01, -1.560100963523764e-02, -1.181841885195472e-03, -2.688314371631278e-03, -1.222643302078664e-01, -4.335383805869434e-03, -4.335383805869428e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_3c_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.606536834263424e-10, 1.607391779343317e-10, 1.609796779158977e-10, 1.597104725687085e-10, 1.603954154290287e-10, 1.603954154290287e-10, -1.933031779041024e-06, -1.932217285169808e-06, -1.913187542905278e-06, -1.944675402031498e-06, -1.931853155181773e-06, -1.931853155181773e-06, -3.297058088562028e-03, -3.331278630798806e-03, -4.306969080747991e-03, -4.141270434013260e-03, -4.152528369459063e-03, -4.152528369459063e-03, -7.284832906745968e-01, -6.881865293902589e-01, -1.659360558421271e-03, -1.637338347636444e+00, -1.228868231502108e+00, -1.228868231502109e+00, -3.121073279453694e+00, -3.396634687317181e+00, -4.207903090662460e+00, -2.025956924415830e+00, -2.968530653275891e+00, -2.968530653277648e+00, 1.042173019606729e-07, 1.085237224487460e-07, 1.043948609202119e-07, 1.081968927895356e-07, 1.064117504033914e-07, 1.064117504033914e-07, -6.025345979667582e-05, -5.753518320528051e-05, -6.394369860305061e-05, -6.143618312777745e-05, -5.700115477410086e-05, -5.700115477410086e-05, -5.005491701083298e-03, -2.438834430536676e-03, -7.093094127145933e-03, -6.285157835412809e-03, -4.681038762743200e-03, -4.681038762743200e-03, -2.795540389065514e+00, -6.989535955269637e-01, -3.150419311499884e+00, 1.111352502843849e-05, -2.653294590364044e+00, -2.653294590364044e+00, -2.254713764858601e+00, -2.349243809580976e+00, -1.232700868841638e+01, -4.892747400759806e+00, -6.493113144680596e+00, -6.493113144642604e+00, 1.248603057143566e-02, -3.534311593465378e-03, -1.094937273702482e-03, 2.789470101747195e-03, 5.539475882333490e-04, 5.539475882333490e-04, 3.392087341942760e-02, -1.147812423686136e-02, -8.918369486371114e-03, -7.913333303984988e-03, -8.257447944488893e-03, -8.257447944488893e-03, -2.169677908373236e-03, -3.263324118237322e-01, -1.636830695104113e-01, -4.805925922564239e-02, -8.952871967169213e-02, -8.952871967169226e-02, -1.618229616768375e-02, -3.814073588347525e+00, -4.048145358067723e+00, -5.645099564663643e-02, -4.910775838915947e+00, -4.910775838915940e+00, -3.066733702083015e+00, -4.537851493276725e+00, -3.793582122617907e+00, -5.107115945246369e+00, -7.793900441459463e+00, -7.793900441472885e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
