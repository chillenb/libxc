
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_beefvdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.161461449206840e+01, -2.161464064120021e+01, -2.161482971625124e+01, -2.161443918711713e+01, -2.161463345195961e+01, -2.161463345195961e+01, -3.655875275571598e+00, -3.655830131883731e+00, -3.654875761760038e+00, -3.657218440369338e+00, -3.655907697364210e+00, -3.655907697364210e+00, -7.752931473038153e-01, -7.753896759163368e-01, -7.796243086807425e-01, -7.846150536885155e-01, -7.825951539486906e-01, -7.825951539486906e-01, -2.627107580587114e-01, -2.632716924107175e-01, -8.882408600860533e-01, -2.225353979581264e-01, -2.398634382364905e-01, -2.398634382364905e-01, -1.272842021605453e-02, -1.337754918717175e-02, -6.900069686730242e-02, -7.455608755510572e-03, -9.316534869969863e-03, -9.316534870678914e-03, -5.261564833168383e+00, -5.261044525653851e+00, -5.261551327765442e+00, -5.261091766219524e+00, -5.261294673698641e+00, -5.261294673698641e+00, -2.276992279894643e+00, -2.286557773489474e+00, -2.280191521473752e+00, -2.288675665841604e+00, -2.280679677750872e+00, -2.280679677750872e+00, -6.503404851546459e-01, -6.819085294982732e-01, -6.086878497388222e-01, -6.102200593839371e-01, -6.568279824208113e-01, -6.568279824208113e-01, -1.658062247444171e-01, -2.818284923391218e-01, -1.547144573385661e-01, -1.951132279666163e+00, -1.879877653896264e-01, -1.879877653896264e-01, -5.785765832941366e-03, -7.292295842219438e-03, -5.608639087564428e-03, -1.080184934166917e-01, -6.729571739434748e-03, -6.729571739434748e-03, -6.308032298043457e-01, -6.301438659079057e-01, -6.303243217890505e-01, -6.305131386687942e-01, -6.304135876376100e-01, -6.304135876376100e-01, -6.140825531104112e-01, -5.764567680320053e-01, -5.825675596512081e-01, -5.912812669136425e-01, -5.861719241149854e-01, -5.861719241149854e-01, -7.134476800408831e-01, -3.330864399661989e-01, -3.648917633221322e-01, -4.213791979767529e-01, -3.887055213970287e-01, -3.887055213970285e-01, -5.344595654687222e-01, -6.623098310860337e-02, -8.858139994807480e-02, -3.957262451458194e-01, -1.337755148587634e-01, -1.337755148587629e-01, -1.778069098465649e-02, -1.996768166961797e-03, -4.141190704296462e-03, -1.265666048239401e-01, -6.237639283056366e-03, -6.237639283134729e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_beefvdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.574464612619188e+01, -2.574477321643535e+01, -2.574527096175313e+01, -2.574338146658229e+01, -2.574438109915255e+01, -2.574438109915255e+01, -4.161829169825203e+00, -4.161931116707899e+00, -4.164387285429856e+00, -4.160888883855409e+00, -4.162049424318969e+00, -4.162049424318969e+00, -8.248068421119060e-01, -8.236778566192278e-01, -7.966930496249387e-01, -8.030957349427458e-01, -8.019377701717986e-01, -8.019377701717986e-01, -2.248981183534744e-01, -2.210074772492709e-01, -9.564059393350377e-01, -2.437431118875535e-01, -2.408118433497895e-01, -2.408118433497895e-01, -1.684334290501845e-02, -1.769883433255428e-02, -8.951702928245232e-02, -9.881342462268874e-03, -1.234008892638899e-02, -1.234008892736528e-02, -6.498529897632999e+00, -6.502760408902912e+00, -6.498714508261815e+00, -6.502449318164573e+00, -6.500679291264779e+00, -6.500679291264779e+00, -2.264958801917570e+00, -2.280787376525243e+00, -2.254778056194424e+00, -2.268083114900187e+00, -2.279447389820086e+00, -2.279447389820086e+00, -7.698584702675535e-01, -8.809832819892404e-01, -7.075173201819069e-01, -7.810756447201199e-01, -7.882880662637571e-01, -7.882880662637571e-01, -2.001440986519054e-01, -2.871166516712533e-01, -1.883470843475315e-01, -2.530812187639294e+00, -2.170976436509660e-01, -2.170976436509660e-01, -7.672563431428979e-03, -9.665255787828951e-03, -7.436861529076314e-03, -1.360691838976058e-01, -8.920009296919147e-03, -8.920009296919149e-03, -8.239279409850966e-01, -8.146649627772405e-01, -8.181868002227082e-01, -8.208406842404971e-01, -8.195346363106668e-01, -8.195346363106668e-01, -8.039332820754661e-01, -6.199246398973557e-01, -6.689855431724280e-01, -7.290951244005222e-01, -6.995965211133106e-01, -6.995965211133106e-01, -9.198643811949866e-01, -2.897745375994541e-01, -2.963612765382683e-01, -4.489789425169195e-01, -3.916552395132797e-01, -3.916552395132585e-01, -5.740678042933071e-01, -8.611080936951628e-02, -1.136917314921677e-01, -4.401088672513941e-01, -1.637096814548321e-01, -1.637096814548197e-01, -2.349988246377021e-02, -2.653028413652015e-03, -5.495317261987539e-03, -1.560651567590359e-01, -8.269297688927580e-03, -8.269297689028081e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_beefvdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.699895682320852e-09, -7.699783033805702e-09, -7.699299042937939e-09, -7.700974721800923e-09, -7.700094287755326e-09, -7.700094287755326e-09, -1.105590638344933e-05, -1.105543936825775e-05, -1.104352717914764e-05, -1.105585744841196e-05, -1.105428988692400e-05, -1.105428988692400e-05, -7.026318944267150e-03, -7.024308122869094e-03, -6.947488735375322e-03, -6.764070803320217e-03, -6.833619512510854e-03, -6.833619512510854e-03, -8.956387395555379e-01, -9.234753794214918e-01, -3.992270722183056e-03, -6.727422404978193e-01, -8.161376118167095e-01, -8.161376118167091e-01, -1.615878927910010e+00, -1.706862068787468e+00, -9.362825755077601e-01, -1.469582593731422e+00, -1.866464243240803e+00, -1.866464227047150e+00, -1.984899404975964e-06, -1.978917424570165e-06, -1.984641591198244e-06, -1.979361604457464e-06, -1.981867719386654e-06, -1.981867719386654e-06, -8.745433095139360e-05, -8.597354174731316e-05, -8.685226883708034e-05, -8.560924854744848e-05, -8.685531598139298e-05, -8.685531598139298e-05, -1.155783550414211e-02, -4.828870770241003e-03, -1.622439073958165e-02, -8.799332955758616e-03, -1.053467080817124e-02, -1.053467080817124e-02, -6.251727740166042e-01, -3.830977465957381e-01, -6.858171968045385e-01, -7.027551960247673e-05, -7.984450482623694e-01, -7.984450482623694e-01, -1.936616412378889e+00, -1.729546571752705e+00, -1.085860295642494e+01, -1.024428687892269e+00, -5.053362311260178e+00, -5.053362288475518e+00, -5.437883609464607e-03, -6.554406118488994e-03, -6.112692093541124e-03, -5.809829967807280e-03, -5.957266066313882e-03, -5.957266066313882e-03, -5.712244021625368e-03, -2.382497510195413e-02, -2.025278796876593e-02, -1.437641920302472e-02, -1.728025760022884e-02, -1.728025760022884e-02, -4.166641450613577e-03, -3.143644881998336e-01, -2.421961921017762e-01, -8.743750066754866e-02, -1.234848507329584e-01, -1.234848507329971e-01, -3.259619552057934e-02, -8.562494616169772e-01, -8.419059279006209e-01, -1.113030705975202e-01, -1.113567875622084e+00, -1.113567875623399e+00, -1.301204569299667e+00, -8.491003672545707e+00, -4.108663805784020e+00, -1.131397700828928e+00, -6.382937288702766e+00, -6.382937255302525e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
