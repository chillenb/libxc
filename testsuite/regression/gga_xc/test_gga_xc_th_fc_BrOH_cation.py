
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.985807437894245e+01, -2.985713317658583e+01, -2.985493783727509e+01, -2.986889931896956e+01, -2.986130140616635e+01, -2.986130140616635e+01, -3.815719722983586e+00, -3.815743153780154e+00, -3.816374956261754e+00, -3.815967390905852e+00, -3.815835552307747e+00, -3.815835552307747e+00, -8.980348682399594e-01, -8.978362730450172e-01, -8.959920917715758e-01, -9.004862474492261e-01, -9.007470774940400e-01, -9.007470774940400e-01, -4.399624764246467e-01, -4.398334022837972e-01, -1.002753134053598e+00, -4.229407298106783e-01, -4.709227550124848e-01, -4.709227550124847e-01, -2.030793288341626e-01, -2.069265249752986e-01, -3.477076183703841e-01, -1.456806630711329e-01, -1.103107552118914e-01, -1.103107552118915e-01, -5.620221098892614e+00, -5.621966310836516e+00, -5.620300843948974e+00, -5.621841543168323e+00, -5.621106254337330e+00, -5.621106254337330e+00, -2.248425256050241e+00, -2.259925578488357e+00, -2.245935277261514e+00, -2.255805603633852e+00, -2.256304239255500e+00, -2.256304239255500e+00, -7.980617030342333e-01, -8.402061758455034e-01, -7.581553261139292e-01, -7.675229133234267e-01, -8.065598099746065e-01, -8.065598099746064e-01, -4.080666047717589e-01, -4.737697820374261e-01, -4.006508731825234e-01, -2.215357547511322e+00, -4.020371836089289e-01, -4.020371836089289e-01, -1.184085098673365e-01, -1.450292541203843e-01, -1.270991116366165e-01, -3.644949338858732e-01, -1.266357530222782e-01, -1.266357530222781e-01, -7.922170999668622e-01, -7.883191752203275e-01, -7.893903856425996e-01, -7.904747281055349e-01, -7.899042273467939e-01, -7.899042273467939e-01, -7.764129928789255e-01, -7.223295418144901e-01, -7.327903260171581e-01, -7.458577092554051e-01, -7.386629097926666e-01, -7.386629097926666e-01, -8.713918775419898e-01, -5.101413112133401e-01, -5.356358298768974e-01, -5.825998893937340e-01, -5.550675800808831e-01, -5.550675800808830e-01, -6.846863305758143e-01, -3.496350291284464e-01, -3.660664434689522e-01, -5.592304923089415e-01, -3.692906364244001e-01, -3.692906364244001e-01, -2.377498443294728e-01, -4.171225008599835e-02, -9.613486419112174e-02, -3.659770699160434e-01, -1.187486536824468e-01, -1.187486536824467e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.726590136832915e+01, 4.726618780251522e+01, 4.726661756723231e+01, 4.726710055098090e+01, 4.727063584403391e+01, 4.727010191630632e+01, 4.725740578814550e+01, 4.725910091918695e+01, 4.726319981223975e+01, 4.726603521810841e+01, 4.726319981223975e+01, 4.726603521810841e+01, -5.229525061359559e+00, -5.229461722590632e+00, -5.229598894958809e+00, -5.229526567493216e+00, -5.231243919740480e+00, -5.231339529600009e+00, -5.229241096066109e+00, -5.229306235776075e+00, -5.228833752028325e+00, -5.230570449860441e+00, -5.228833752028325e+00, -5.230570449860441e+00, -1.002893066990817e+00, -1.006359637186226e+00, -1.000285572029945e+00, -1.004539603158615e+00, -9.484676671791310e-01, -9.425021803278013e-01, -9.525871760615124e-01, -9.544694336182822e-01, -9.799664873954390e-01, -9.231771837389546e-01, -9.799664873954390e-01, -9.231771837389546e-01, -3.613211395728810e-01, -3.731086899475415e-01, -3.652940841652375e-01, -3.786563613565167e-01, -1.140459839919018e+00, -1.174601304831098e+00, -3.006366291878529e-01, -3.049034350720745e-01, -3.564717085877115e-01, -1.587086194815609e-01, -3.564717085877117e-01, -1.587086194815610e-01, -1.845185841089742e-01, -1.948582639559379e-01, -1.774764086432418e-01, -1.896844667986424e-01, -1.629819602649798e-01, -1.811536689054055e-01, -2.430808486514759e-01, -2.419763404880923e-01, -3.190419633852226e-01, -3.077429956197587e-01, -3.190419633852223e-01, -3.077429956197582e-01, -7.533556340286167e+00, -7.532198399473655e+00, -7.533169153016800e+00, -7.531776291340234e+00, -7.533560958732370e+00, -7.532177782483215e+00, -7.533192956836042e+00, -7.531831367594640e+00, -7.533359208789584e+00, -7.531976835018487e+00, -7.533359208789584e+00, -7.531976835018487e+00, -2.529961530182638e+00, -2.529823286566588e+00, -2.564092781675243e+00, -2.563342969044780e+00, -2.479305566640184e+00, -2.484005095285891e+00, -2.509372445646540e+00, -2.514297653743924e+00, -2.577652224148416e+00, -2.565562677923949e+00, -2.577652224148416e+00, -2.565562677923949e+00, -9.456077817430711e-01, -9.435890264398641e-01, -1.056275338037071e+00, -1.056670310068720e+00, -8.672495214011094e-01, -8.925391381085157e-01, -9.329669309279305e-01, -9.576348662122761e-01, -9.817232258907759e-01, -9.420296028333172e-01, -9.817232258907763e-01, -9.420296028333170e-01, -2.408140233934953e-01, -2.439570962776837e-01, -3.482538548215680e-01, -3.500059368544146e-01, -2.246595158451456e-01, -2.418561292070399e-01, -3.058023477999335e+00, -3.056722116163520e+00, -2.608582118778796e-01, -2.783422581922681e-01, -2.608582118778796e-01, -2.783422581922681e-01, -2.450201187755760e-01, -2.458752065361776e-01, -2.296937639132477e-01, -2.307357626011149e-01, -1.301947004756896e-01, -1.351606146212098e-01, -1.981654453929373e-01, -2.001017863283052e-01, -1.777240811539127e-01, -1.975977461442643e-01, -1.777240811539130e-01, -1.975977461442648e-01, -9.985108834715466e-01, -1.001702978968869e+00, -9.818299069636757e-01, -9.849335439090955e-01, -9.873562606974967e-01, -9.904932325652193e-01, -9.921627554062967e-01, -9.953045883022938e-01, -9.897279700166349e-01, -9.928663984808855e-01, -9.897279700166349e-01, -9.928663984808855e-01, -9.798280847850379e-01, -9.825236810847313e-01, -7.871529009448955e-01, -7.898980611710970e-01, -8.393943540207324e-01, -8.423337946334761e-01, -8.929989394654886e-01, -8.954688618306401e-01, -8.657914701153552e-01, -8.683190513801335e-01, -8.657914701153552e-01, -8.683190513801335e-01, -1.098616239259083e+00, -1.100102615185008e+00, -4.063006362933632e-01, -4.084842776050473e-01, -4.696138058527417e-01, -4.735908020448149e-01, -6.056365458166905e-01, -6.081637049362016e-01, -5.344696421822365e-01, -5.343214518730547e-01, -5.344696421822365e-01, -5.343214518730545e-01, -7.374994693761038e-01, -7.415173495560452e-01, -1.706361590529150e-01, -1.729589092399501e-01, -1.780240153708574e-01, -1.892131937514591e-01, -5.996610347823101e-01, -6.062365640616418e-01, -2.138095803318961e-01, -2.300067279858944e-01, -2.138095803318960e-01, -2.300067279858943e-01, -1.770361402138684e-01, -1.849335771994499e-01, -2.143155177269416e-01, -2.141294715422105e-01, -2.109319898651302e-01, -2.111381443402286e-01, -2.135882323382053e-01, -2.184525563544174e-01, -1.722625094618714e-01, -1.880558419359409e-01, -1.722625094618715e-01, -1.880558419359409e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.421786333893675e-07, 0.000000000000000e+00, -5.421797887253978e-07, -5.421801119484076e-07, 0.000000000000000e+00, -5.421810583908890e-07, -5.421814384776278e-07, 0.000000000000000e+00, -5.421827417050677e-07, -5.421622686032641e-07, 0.000000000000000e+00, -5.421612201973841e-07, -5.421783220914224e-07, 0.000000000000000e+00, -5.421677959779129e-07, -5.421783220914224e-07, 0.000000000000000e+00, -5.421677959779129e-07, 6.508996275407210e-06, 0.000000000000000e+00, 6.524354622555625e-06, 6.510654174837690e-06, 0.000000000000000e+00, 6.527086544127645e-06, 6.563407383669399e-06, 0.000000000000000e+00, 6.575354615260425e-06, 6.471896427784866e-06, 0.000000000000000e+00, 6.486193312531691e-06, 6.519938554880322e-06, 0.000000000000000e+00, 6.517981353370384e-06, 6.519938554880322e-06, 0.000000000000000e+00, 6.517981353370384e-06, -8.009757164560776e-03, 0.000000000000000e+00, -7.943330580405460e-03, -8.092729594762245e-03, 0.000000000000000e+00, -8.012979990341819e-03, -9.921675497604143e-03, 0.000000000000000e+00, -9.986535015907896e-03, -9.583616274086437e-03, 0.000000000000000e+00, -9.559487379004491e-03, -9.215996208264738e-03, 0.000000000000000e+00, -1.000072498241520e-02, -9.215996208264738e-03, 0.000000000000000e+00, -1.000072498241520e-02, -2.395217435652738e+00, 0.000000000000000e+00, -2.247992890399759e+00, -2.311893865102096e+00, 0.000000000000000e+00, -2.149671548506187e+00, -3.653019098431849e-03, 0.000000000000000e+00, -3.753133974647398e-03, -5.624989208230527e+00, 0.000000000000000e+00, -5.452428807254688e+00, -3.282428055640019e+00, 0.000000000000000e+00, -1.080493333646782e+01, -3.282428055640018e+00, 0.000000000000000e+00, -1.080493333646782e+01, -2.722294580305612e+04, 0.000000000000000e+00, -1.011153819247322e+04, -2.805930419391642e+04, 0.000000000000000e+00, -1.136915771206034e+04, -3.399848532760309e+02, 0.000000000000000e+00, -2.884080547130173e+02, 1.201927423639197e+05, 0.000000000000000e+00, 9.904032642091176e+04, 1.256601779526056e+05, 0.000000000000000e+00, -8.159654714331472e+05, 1.256601779526055e+05, 0.000000000000000e+00, -8.159654714331477e+05, 2.282031877480049e-06, 0.000000000000000e+00, 2.282423537738379e-06, 2.281600515498711e-06, 0.000000000000000e+00, 2.281935037550731e-06, 2.282009199444086e-06, 0.000000000000000e+00, 2.282367098613297e-06, 2.281587923573345e-06, 0.000000000000000e+00, 2.281976975214413e-06, 2.281835915641408e-06, 0.000000000000000e+00, 2.282175504054326e-06, 2.281835915641408e-06, 0.000000000000000e+00, 2.282175504054326e-06, -9.428097576177604e-05, 0.000000000000000e+00, -9.424934156492069e-05, -8.906765447959722e-05, 0.000000000000000e+00, -8.891995172958411e-05, -1.017651533150257e-04, 0.000000000000000e+00, -1.013734524302330e-04, -9.688070204381916e-05, 0.000000000000000e+00, -9.656974460318186e-05, -8.761102317984674e-05, 0.000000000000000e+00, -8.809348983887045e-05, -8.761102317984674e-05, 0.000000000000000e+00, -8.809348983887045e-05, -1.211463792599452e-02, 0.000000000000000e+00, -1.200169359311477e-02, 4.631610839237561e-04, 0.000000000000000e+00, 6.823323231811770e-04, -1.858847401283156e-02, 0.000000000000000e+00, -1.943634733200882e-02, -7.668662946082853e-03, 0.000000000000000e+00, -9.918883977902663e-03, -1.130273586468375e-02, 0.000000000000000e+00, -9.488819832068496e-03, -1.130273586468375e-02, 0.000000000000000e+00, -9.488819832068505e-03, -1.719166352212411e+01, 0.000000000000000e+00, -1.692020339776564e+01, -1.996019370271578e+00, 0.000000000000000e+00, -1.978563823367626e+00, -2.350197546232438e+01, 0.000000000000000e+00, -2.084957494557314e+01, 3.650062866842514e-04, 0.000000000000000e+00, 3.667499418894074e-04, -1.142152202150660e+01, 0.000000000000000e+00, -1.070866757314545e+01, -1.142152202150660e+01, 0.000000000000000e+00, -1.070866757314545e+01, 3.186156234537557e+05, 0.000000000000000e+00, 4.938723401860584e+05, 8.781371238796812e+04, 0.000000000000000e+00, 1.231054576327673e+05, -3.464558826748193e+05, 0.000000000000000e+00, -6.125091963334912e+04, -7.981481272517793e+01, 0.000000000000000e+00, -7.787547373298430e+01, -7.751971328765678e+05, 0.000000000000000e+00, 2.759768002366569e+05, -7.751971328765660e+05, 0.000000000000000e+00, 2.759768002366578e+05, 9.806393388367769e-03, 0.000000000000000e+00, 9.789881857585401e-03, -2.925271970625784e-03, 0.000000000000000e+00, -3.030472005031026e-03, -2.600041218416890e-04, 0.000000000000000e+00, -3.428203621737031e-04, 2.985503582820092e-03, 0.000000000000000e+00, 2.870837353750543e-03, 1.203460371736739e-03, 0.000000000000000e+00, 1.105956644916173e-03, 1.203460371736739e-03, 0.000000000000000e+00, 1.105956644916173e-03, 2.225528508104880e-02, 0.000000000000000e+00, 2.186056952493715e-02, -3.288782791510252e-02, 0.000000000000000e+00, -3.293749147611655e-02, -2.515035680701311e-02, 0.000000000000000e+00, -2.521248979703690e-02, -1.731748703866749e-02, 0.000000000000000e+00, -1.742180954413358e-02, -2.140606173178512e-02, 0.000000000000000e+00, -2.150177572819475e-02, -2.140606173178512e-02, 0.000000000000000e+00, -2.150177572819475e-02, 1.025774491535181e-03, 0.000000000000000e+00, 1.242328419821579e-03, -8.625159136515835e-01, 0.000000000000000e+00, -8.556471770204559e-01, -4.501460393383583e-01, 0.000000000000000e+00, -4.458097806612695e-01, -1.608030412773719e-01, 0.000000000000000e+00, -1.599938312451357e-01, -2.726487587096205e-01, 0.000000000000000e+00, -2.732365796594577e-01, -2.726487587096206e-01, 0.000000000000000e+00, -2.732365796594580e-01, -4.826359590396643e-02, 0.000000000000000e+00, -4.827219255450259e-02, -3.476298160676881e+02, 0.000000000000000e+00, -3.404459636109019e+02, -1.480955122426784e+02, 0.000000000000000e+00, -1.359986031138176e+02, -2.029156435506748e-01, 0.000000000000000e+00, -1.999312097799248e-01, -4.126502091332294e+01, 0.000000000000000e+00, -3.779381943416011e+01, -4.126502091332297e+01, 0.000000000000000e+00, -3.779381943416011e+01, -1.241787627109189e+04, 0.000000000000000e+00, -9.362922299802240e+03, 3.892050853325477e+07, 0.000000000000000e+00, 3.278995228917810e+07, 1.197171726795757e+06, 0.000000000000000e+00, 1.867635021360872e+06, -4.872530225137962e+01, 0.000000000000000e+00, -4.663496240295503e+01, -1.169682558004834e+06, 0.000000000000000e+00, 3.743326893345027e+05, -1.169682558004837e+06, 0.000000000000000e+00, 3.743326893345048e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
