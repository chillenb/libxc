
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.185184756772817e+01, -3.185214998910858e+01, -3.185332002197410e+01, -3.184882348446849e+01, -3.185120378588333e+01, -3.185120378588333e+01, -3.499461791904555e+00, -3.499451060993095e+00, -3.499286432219399e+00, -3.500215421158150e+00, -3.499532033603153e+00, -3.499532033603153e+00, -7.326250631175530e-01, -7.324347778317669e-01, -7.302360505475111e-01, -7.352905369588673e-01, -7.350824705086021e-01, -7.350824705086021e-01, -2.205674149059497e-01, -2.217179629228295e-01, -8.456809924537086e-01, -1.913943015124243e-01, -2.055634848092272e-01, -2.055634848092273e-01, -7.487260664182360e-02, -7.385935391897190e-02, -1.167895760198417e-01, -7.327466071108181e-02, -1.208313730190181e-02, -1.208313730190182e-02, -5.191192937127209e+00, -5.192357512063347e+00, -5.191249332420764e+00, -5.192277116219012e+00, -5.191781429005432e+00, -5.191781429005432e+00, -2.150011557068938e+00, -2.158850479548891e+00, -2.153503166840375e+00, -2.161104763750501e+00, -2.153496619212866e+00, -2.153496619212866e+00, -6.224356743566477e-01, -6.601239110380147e-01, -5.797482766363585e-01, -5.871179742633412e-01, -6.308093874731473e-01, -6.308093874731477e-01, -1.653560830231788e-01, -2.408006962606580e-01, -1.580018744578868e-01, -1.949659602769747e+00, -1.684981872877452e-01, -1.684981872877452e-01, -6.449190246846995e-02, -6.911503316213219e-02, -3.728140461489389e-02, -1.290919200224580e-01, -3.682213967747857e-02, -3.682213967747858e-02, -6.080165278975025e-01, -6.072673761631250e-01, -6.074646274120497e-01, -6.076682922245821e-01, -6.075596701927002e-01, -6.075596701927002e-01, -5.908208823683669e-01, -5.396199776913124e-01, -5.525249319181954e-01, -5.662409203822697e-01, -5.589650555821775e-01, -5.589650555821775e-01, -6.922252868232625e-01, -2.845670474605874e-01, -3.206542261281304e-01, -3.863876709737184e-01, -3.499649267949372e-01, -3.499649267949371e-01, -4.982029030220861e-01, -1.189606938800184e-01, -1.277676714793014e-01, -3.652039709981740e-01, -1.363309966416226e-01, -1.363309966416225e-01, -8.428385056476054e-02, -3.503814608889265e-02, -4.833061382945651e-02, -1.332459128309108e-01, -3.272228775604645e-02, -3.272228775604644e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.384489420576618e+01, -6.384099229543742e+01, -6.384566630810069e+01, -6.383908662748800e+01, -6.383783551854560e+01, -6.384511007161648e+01, -6.386141171945357e+01, -6.383833189825368e+01, -6.386455137924547e+01, -6.382593211425107e+01, -6.386455137924547e+01, -6.382593211425107e+01, -4.389478113201185e+00, -4.388976768279617e+00, -4.389609796764837e+00, -4.389037309472288e+00, -4.391279483016728e+00, -4.392036115822569e+00, -4.388213461735538e+00, -4.388729321852798e+00, -4.382580279104172e+00, -4.396327248821298e+00, -4.382580279104172e+00, -4.396327248821298e+00, -8.416461504961663e-01, -8.444171963595870e-01, -8.395302118997737e-01, -8.429339326754793e-01, -7.976761114168562e-01, -7.927830577664614e-01, -8.019010404433556e-01, -8.034436414133885e-01, -8.241181769341738e-01, -7.773701223238729e-01, -8.241181769341738e-01, -7.773701223238729e-01, -2.011091809437676e-01, -2.108739414407757e-01, -2.048863878013258e-01, -2.160277551367864e-01, -9.714286739447663e-01, -9.995683067600201e-01, -1.420953417119825e-01, -1.450655480585888e-01, -2.232440165416849e-01, -1.003930091365416e-01, -2.232440165416849e-01, -1.003930091365416e-01, 1.952484896511363e-02, 1.680000549897926e-02, 1.827509624979586e-02, 1.554156855833047e-02, -8.266731320929303e-03, -1.254121901631388e-02, 2.252576456605769e-02, 2.365159357530308e-02, -2.055655501124404e-02, -7.101566522305899e-02, -2.055655501124423e-02, -7.101566522305891e-02, -7.030904379226320e+00, -7.005612024979510e+00, -7.033705096553629e+00, -7.007732870016089e+00, -7.031253912293764e+00, -7.005490236223284e+00, -7.033237995456735e+00, -7.007850995729815e+00, -7.032387722596546e+00, -7.006625492038293e+00, -7.032387722596546e+00, -7.006625492038293e+00, -2.128732675424773e+00, -2.128345053597053e+00, -2.156905956510287e+00, -2.154778223848055e+00, -2.081304817311929e+00, -2.094398445221844e+00, -2.105207613655966e+00, -2.119077444044187e+00, -2.180215834784169e+00, -2.145987499181025e+00, -2.180215834784169e+00, -2.145987499181025e+00, -7.721446604223557e-01, -7.706037143510913e-01, -8.654285237515532e-01, -8.657121538729498e-01, -7.004680869420210e-01, -7.201810914612466e-01, -7.529618743527010e-01, -7.710505398598950e-01, -8.017210568524684e-01, -7.716125459490000e-01, -8.017210568524685e-01, -7.716125459490003e-01, -8.284027759066455e-02, -8.448714931319452e-02, -1.907985142054331e-01, -1.922742311715999e-01, -7.137628327331272e-02, -7.967473344044473e-02, -2.610597377085471e+00, -2.607387344552920e+00, -1.065998222042311e-01, -1.167401804808496e-01, -1.065998222042311e-01, -1.167401804808496e-01, 2.086808096078673e-02, 1.875527151330126e-02, 2.113080034089468e-02, 2.027485551540117e-02, 4.582383113200995e-03, 5.353435549876879e-03, -4.224064888633217e-02, -4.284662264450510e-02, -3.429343904977026e-03, 4.645630108245102e-03, -3.429343904976965e-03, 4.645630108245042e-03, -8.064989754474494e-01, -8.087492346669394e-01, -7.949192561784876e-01, -7.971560606339851e-01, -7.988455995300342e-01, -8.010909090988961e-01, -8.021951951727162e-01, -8.044298733165054e-01, -8.005066141911408e-01, -8.027460906100115e-01, -8.005066141911408e-01, -8.027460906100115e-01, -7.868978234413125e-01, -7.887868778256414e-01, -6.271800001731234e-01, -6.294438644512271e-01, -6.718527116667206e-01, -6.741805906437436e-01, -7.169379125255944e-01, -7.188113316566481e-01, -6.941012236539420e-01, -6.960610706247853e-01, -6.941012236539420e-01, -6.960610706247853e-01, -9.059431445968962e-01, -9.070159480860304e-01, -2.504543214646214e-01, -2.524703271219885e-01, -3.132727307469321e-01, -3.170474693323395e-01, -4.430752187757066e-01, -4.453564161001967e-01, -3.754077457871508e-01, -3.752687041142817e-01, -3.754077457871507e-01, -3.752687041142818e-01, -5.773488829563882e-01, -5.807381996975001e-01, -6.127275117441995e-03, -6.707108045931964e-03, -2.139508695234420e-02, -2.465727702652431e-02, -4.328869922397833e-01, -4.387502062381349e-01, -6.351733949875879e-02, -6.963702214389519e-02, -6.351733949875886e-02, -6.963702214389519e-02, 1.960449468994047e-02, 1.771647903713327e-02, 8.502253773746376e-03, 8.462845398339303e-03, 1.350219951120878e-02, 1.188422969555987e-02, -5.955977337986966e-02, -6.128511450182853e-02, -6.821777696344775e-03, 2.510927267367076e-03, -6.821777696344848e-03, 2.510927267367002e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.931798780687707e-06, -1.373613883702613e-05, 6.931796997953850e-06, 6.931766019445048e-06, -1.373608277978383e-05, 6.931764559038991e-06, 6.931619061663603e-06, -1.373581626561794e-05, 6.931617050694702e-06, 6.932102321586300e-06, -1.373665065896719e-05, 6.932103939281247e-06, 6.931841167478394e-06, -1.373621590945072e-05, 6.931857409668372e-06, 6.931841167478394e-06, -1.373621590945072e-05, 6.931857409668372e-06, -5.838107074045231e-05, 1.016608902792205e-04, -5.836927479948610e-05, -5.837908771070980e-05, 1.016596961532024e-04, -5.836646684450507e-05, -5.831411170904137e-05, 1.016185458053405e-04, -5.830493501822799e-05, -5.836450193441679e-05, 1.015850596718786e-04, -5.835351985638585e-05, -5.836387775532187e-05, 1.016460979290886e-04, -5.836538101634920e-05, -5.836387775532187e-05, 1.016460979290886e-04, -5.836538101634920e-05, -1.012162696773856e-02, 1.820293128066200e-03, -1.010295609674521e-02, -1.016228086548633e-02, 1.798993950297276e-03, -1.013990191725760e-02, -1.109547952961910e-02, 1.221563580780821e-03, -1.111290853140815e-02, -1.086934078267996e-02, 1.409317781994543e-03, -1.086276585910494e-02, -1.087385445852740e-02, 1.474692953249275e-03, -1.108823147753545e-02, -1.087385445852740e-02, 1.474692953249275e-03, -1.108823147753545e-02, -4.804148033044006e-01, -1.757452131496488e+00, -4.289948328022646e-01, -4.758340375305979e-01, -1.663237377354019e+00, -4.188839714827343e-01, -6.760406647373074e-03, 3.544724893588990e-03, -6.793748711459184e-03, -7.989297991670637e-01, -4.730889966317108e+00, -7.435265606870751e-01, -3.926065377569822e-01, -3.699834712627505e+00, -2.991152591152809e+00, -3.926065377569850e-01, -3.699834712627505e+00, -2.991152591152811e+00, 7.652001407514293e+03, -9.528000334583275e+04, 1.046979126728231e+04, 5.972422067674389e+03, -8.149977714380274e+04, 8.749854552914043e+03, 3.353437921869670e-01, -3.895215155675596e+02, 1.249081664883668e+01, 6.359469481369307e+04, -5.101060328451634e+05, 6.048086227926925e+04, 5.677494607294707e+04, -3.188215583592304e+05, -9.208700150297544e+04, 5.677494607294704e+04, -3.188215583592304e+05, -9.208700150297566e+04, 1.060361173352674e-05, -2.017666099287995e-05, 1.060524533723441e-05, 1.062353802024964e-05, -2.019962054957172e-05, 1.062494185006423e-05, 1.060459753439664e-05, -2.017780552725523e-05, 1.060609077405252e-05, 1.062201651135376e-05, -2.019807240858307e-05, 1.062364850090588e-05, 1.061375305146422e-05, -2.018825563495246e-05, 1.061517383046869e-05, 1.061375305146422e-05, -2.018825563495246e-05, 1.061517383046869e-05, -5.935205329438766e-04, 8.576522298270212e-04, -5.935035200928810e-04, -5.791961359015015e-04, 8.405005851116952e-04, -5.791164246363330e-04, -6.061303196743783e-04, 8.704176418244104e-04, -6.059201992370137e-04, -5.931328568524824e-04, 8.549948658361570e-04, -5.929655343465438e-04, -5.794945259519477e-04, 8.421200443100545e-04, -5.797548170640268e-04, -5.794945259519477e-04, 8.421200443100545e-04, -5.797548170640268e-04, -1.377028831721548e-02, -2.285978266798258e-03, -1.374718656960815e-02, -8.814746947206310e-03, 6.384438502200027e-04, -8.758318481482449e-03, -1.733352623524671e-02, -6.529608324143181e-03, -1.743621825485399e-02, -1.420017820286499e-02, -4.178695674896036e-03, -1.458145754788283e-02, -1.325476290086157e-02, -1.530766199711984e-03, -1.285903067518067e-02, -1.325476290086158e-02, -1.530766199711948e-03, -1.285903067518071e-02, -1.374068535023752e+00, -1.668363651490418e+01, -1.294824785360025e+00, -3.434093770956169e-01, -1.746094886875957e+00, -3.373112612082581e-01, -1.977143192067970e+00, -2.175650466071956e+01, -1.217056205894335e+00, -3.806045922769700e-04, 9.047266179763653e-04, -3.796754834622037e-04, -1.372786904035084e+00, -9.682604473333472e+00, -1.156064671667018e+00, -1.372786904035084e+00, -9.682604473333472e+00, -1.156064671667018e+00, 1.237525950317435e+05, -1.126942142284123e+06, 1.482201123814448e+05, 6.114173653895481e+04, -5.466334439063079e+05, 6.631294924071799e+04, 3.646246542186954e+04, -1.243814227403254e+06, 7.603053734452454e+04, -3.344111501040085e+00, -8.102536361486274e+01, -2.837004668883641e+00, -4.515535346405968e+04, -7.763640729503337e+05, 1.079558003528589e+05, -4.515535346405949e+04, -7.763640729503337e+05, 1.079558003528593e+05, -9.078816167960288e-03, -2.073381047095438e-03, -9.082256834727737e-03, -1.192121424792274e-02, -2.326233795239103e-03, -1.194265536358206e-02, -1.130609132625890e-02, -2.236160955423605e-03, -1.132310528439718e-02, -1.057661141611633e-02, -2.162876097544567e-03, -1.060032047376121e-02, -1.097519476573701e-02, -2.199457883740441e-03, -1.099529080970371e-02, -1.097519476573701e-02, -2.199457883740441e-03, -1.099529080970371e-02, -8.051232807542438e-03, -3.357426828689491e-03, -8.124205309529422e-03, -2.303396482823334e-02, -1.502697924598130e-02, -2.302533687631072e-02, -2.022703660833797e-02, -1.053300111329560e-02, -2.022798309660576e-02, -1.748893939353954e-02, -7.112799039479908e-03, -1.750015100940952e-02, -1.890098549120628e-02, -8.747870037480655e-03, -1.890739070764178e-02, -1.890098549120628e-02, -8.747870037480655e-03, -1.890739070764178e-02, -7.655337507133987e-03, 1.745838011637179e-03, -7.594814709996773e-03, -1.920005651579780e-01, -7.236703643184176e-01, -1.893804575185805e-01, -1.259289739200342e-01, -3.498702767553677e-01, -1.241171035950735e-01, -6.535057121933206e-02, -1.046421345620114e-01, -6.491398297067605e-02, -9.136497753799012e-02, -1.956086571267550e-01, -9.163566649179364e-02, -9.136497753799000e-02, -1.956086571267554e-01, -9.163566649179349e-02, -2.918913129979418e-02, -2.597890056221801e-02, -2.914011298060994e-02, 1.058942931946590e+01, -4.467795172826075e+02, 1.226637536015473e+01, -1.840268476338346e+00, -1.649527580673939e+02, 1.176167045931698e+00, -8.050815234776409e-02, -1.238963564140121e-01, -7.897856405408339e-02, -3.411182144980580e+00, -3.657446971848957e+01, -2.452097764065849e+00, -3.411182144980589e+00, -3.657446971848954e+01, -2.452097764065840e+00, 2.658397936950889e+03, -3.287223508054397e+04, 3.197606499325312e+03, 3.472123553046350e+06, -3.011576700210341e+07, 2.789260723283058e+06, 2.909996321935331e+05, -3.192380453884746e+06, 3.782632860633756e+05, -3.457605043460039e+00, -4.496074233597828e+01, -2.888550849342936e+00, -8.936328840464575e+04, -9.673914962235349e+05, 1.315804336435040e+05, -8.936328840464633e+04, -9.673914962235376e+05, 1.315804336435046e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
