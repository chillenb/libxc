
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_opwlyp_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.108264415718505e+01, -2.108267190190254e+01, -2.108286286384985e+01, -2.108244868521183e+01, -2.108265609406694e+01, -2.108265609406694e+01, -3.543462833601845e+00, -3.543426746562809e+00, -3.542678011936362e+00, -3.544642678960877e+00, -3.543503941925036e+00, -3.543503941925036e+00, -7.358706247648764e-01, -7.357320063115557e-01, -7.336984167181084e-01, -7.387796740557788e-01, -7.377991498601898e-01, -7.377991498601898e-01, -2.193108694901741e-01, -2.213146756700539e-01, -8.476650007999216e-01, -1.788476800192615e-01, -2.134774845550249e-01, -2.134774845550247e-01, -6.595273309694644e-02, -6.599512164335899e-02, -1.079216196048031e-01, -6.021342342187372e-02, -6.085242664161720e-02, -6.085242664161718e-02, -5.115006607406335e+00, -5.114380680954113e+00, -5.114988654324249e+00, -5.114435918564499e+00, -5.114683427157701e+00, -5.114683427157701e+00, -2.162856347826226e+00, -2.173179264700543e+00, -2.163252497980184e+00, -2.172365316773559e+00, -2.168386006767466e+00, -2.168386006767466e+00, -6.220427495117433e-01, -6.483517416771786e-01, -5.810746675527386e-01, -5.807056773281958e-01, -6.292199308580856e-01, -6.292199308580857e-01, -1.378877210733153e-01, -2.278652817808642e-01, -1.317128359394599e-01, -1.876072046298166e+00, -1.528958134075858e-01, -1.528958134075858e-01, -5.432502356655840e-02, -5.801377612075441e-02, -3.800167852717778e-02, -1.115108976415461e-01, -4.621427409444775e-02, -4.621427409444778e-02, -5.946088107782628e-01, -5.979337600025368e-01, -5.968793211771384e-01, -5.959087207982502e-01, -5.964050842663787e-01, -5.964050842663787e-01, -5.772387975913060e-01, -5.440120658377835e-01, -5.548117198247232e-01, -5.643796430481411e-01, -5.594511151326756e-01, -5.594511151326756e-01, -6.794690637660450e-01, -2.779962352240040e-01, -3.208761014400469e-01, -3.919244404284302e-01, -3.542639882766766e-01, -3.542639882766767e-01, -5.029626806196729e-01, -1.088232904331550e-01, -1.101036086461855e-01, -3.706013308918109e-01, -1.203320504545615e-01, -1.203320504545615e-01, -7.437949119011804e-02, -3.350745794008163e-02, -4.385229715389759e-02, -1.170871148119186e-01, -4.345224073797940e-02, -4.345224073797938e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_opwlyp_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.531501467832750e+01, -2.531498461196003e+01, -2.531512410957110e+01, -2.531506439465689e+01, -2.531545415316623e+01, -2.531554131686244e+01, -2.531421493017833e+01, -2.531396613934583e+01, -2.531507791807164e+01, -2.531458269315321e+01, -2.531507791807164e+01, -2.531458269315321e+01, -4.137199454626027e+00, -4.137305104541050e+00, -4.137236224197531e+00, -4.137344485926383e+00, -4.138154439718941e+00, -4.138387313244816e+00, -4.137224995374948e+00, -4.137453281851691e+00, -4.136501151196635e+00, -4.138290420035942e+00, -4.136501151196635e+00, -4.138290420035942e+00, -8.329682992936174e-01, -8.354709849826775e-01, -8.316215450747901e-01, -8.346625875756858e-01, -8.095843416345346e-01, -8.064535760708846e-01, -8.139110780635376e-01, -8.149091146502182e-01, -8.313982619437400e-01, -8.016853764345812e-01, -8.313982619437400e-01, -8.016853764345812e-01, -2.417741969875644e-01, -2.431930914208646e-01, -2.435964076731796e-01, -2.455200022320096e-01, -9.538075256483749e-01, -9.797331826993390e-01, -2.033849021922923e-01, -2.041573096178683e-01, -2.093717110108555e-01, -2.154166904352020e-01, -2.093717110108554e-01, -2.154166904352020e-01, -1.921009016863988e-02, -1.939256446558173e-02, -1.962328263269640e-02, -1.981419527836732e-02, -5.779940483384054e-02, -5.968222454367651e-02, -1.479452248483879e-02, -1.480638567935815e-02, -1.684876742728213e-02, -1.362840974053718e-02, -1.684876742728218e-02, -1.362840974053719e-02, -6.283845501825457e+00, -6.282348376468043e+00, -6.286358949239431e+00, -6.284780806813859e+00, -6.283983972827211e+00, -6.282433453901270e+00, -6.286143859053158e+00, -6.284639840907565e+00, -6.285131846894079e+00, -6.283570628394674e+00, -6.285131846894079e+00, -6.283570628394674e+00, -2.287530763484618e+00, -2.287430203771040e+00, -2.305504301403665e+00, -2.304949567765263e+00, -2.270125381373874e+00, -2.273891453442818e+00, -2.285607711890614e+00, -2.289580101409491e+00, -2.309877746182880e+00, -2.299910713204834e+00, -2.309877746182880e+00, -2.299910713204834e+00, -7.472607351895829e-01, -7.458354936524664e-01, -8.261229242475471e-01, -8.266054170138883e-01, -6.822998640226836e-01, -7.008352188909041e-01, -7.240886606843363e-01, -7.418174545525748e-01, -7.740520274124767e-01, -7.449175267073380e-01, -7.740520274124768e-01, -7.449175267073381e-01, -1.640531396752451e-01, -1.636966189813197e-01, -2.592126527590052e-01, -2.593588506359568e-01, -1.510599426868856e-01, -1.534044578505082e-01, -2.395858369971003e+00, -2.394917712886836e+00, -1.774104256897703e-01, -1.716803432014171e-01, -1.774104256897703e-01, -1.716803432014171e-01, -1.247467074776519e-02, -1.280956515552503e-02, -1.423917467673307e-02, -1.442481968612899e-02, -9.964057869305064e-03, -9.920332658867104e-03, -9.888565090243059e-02, -9.981312101281378e-02, -1.160237246940894e-02, -1.226184245323532e-02, -1.160237246940898e-02, -1.226184245323531e-02, -7.722133190759927e-01, -7.746409071084166e-01, -7.621348117604920e-01, -7.645088526993694e-01, -7.653107572006764e-01, -7.676975377080237e-01, -7.681063489583804e-01, -7.704733703928859e-01, -7.666748653642523e-01, -7.690495132760415e-01, -7.666748653642523e-01, -7.690495132760415e-01, -7.555987869884967e-01, -7.575367280180224e-01, -6.237260448399736e-01, -6.255380598877255e-01, -6.566547101028027e-01, -6.588207515038784e-01, -6.931211648535404e-01, -6.949824398700815e-01, -6.742111791169225e-01, -6.760736091163734e-01, -6.742111791169225e-01, -6.760736091163734e-01, -8.628725800083148e-01, -8.642879602381305e-01, -3.080624771138522e-01, -3.082763251920785e-01, -3.526900433215243e-01, -3.533832695535543e-01, -4.493358444263985e-01, -4.507809373112452e-01, -3.956447944672215e-01, -3.954304160561166e-01, -3.956447944672215e-01, -3.954304160561165e-01, -5.765673472929939e-01, -5.791355447966762e-01, -5.667840514231361e-02, -5.689769176241897e-02, -7.870742632150363e-02, -8.034673588447856e-02, -4.344742390562428e-01, -4.385141874102837e-01, -1.243545125897245e-01, -1.231160872354996e-01, -1.243545125897244e-01, -1.231160872354997e-01, -2.390074008150397e-02, -2.394645831665091e-02, -6.798192723400909e-03, -6.221414770854681e-03, -9.783962560314986e-03, -9.806246955353818e-03, -1.162324638383733e-01, -1.173113554686515e-01, -1.025388637927687e-02, -1.172976102625053e-02, -1.025388637927686e-02, -1.172976102625052e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_opwlyp_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.405279065802031e-08, 1.601231108417485e-11, -1.405286987951883e-08, -1.405270878649245e-08, 1.601208303801657e-11, -1.405280973146191e-08, -1.405227534422874e-08, 1.601099885013954e-11, -1.405224029962837e-08, -1.405321230618904e-08, 1.601439345183759e-11, -1.405342403957379e-08, -1.405275472861783e-08, 1.601262484268248e-11, -1.405282317589561e-08, -1.405275472861783e-08, 1.601262484268248e-11, -1.405282317589561e-08, -1.833502689395565e-05, 2.055723362020155e-07, -1.834174826665563e-05, -1.833553164867016e-05, 2.055699755757097e-07, -1.834275278909331e-05, -1.835269817144986e-05, 2.054886132146208e-07, -1.835693392121359e-05, -1.831101809870736e-05, 2.054224102780175e-07, -1.831645734902765e-05, -1.834376986211463e-05, 2.055447248989575e-07, -1.833129527098345e-05, -1.834376986211463e-05, 2.055447248989575e-07, -1.833129527098345e-05, -1.055800321784178e-02, 1.243597395542995e-03, -1.063309283243017e-02, -1.055168043596964e-02, 1.250831775657875e-03, -1.064370580681735e-02, -1.064097729430665e-02, 1.435951251934469e-03, -1.050967293315912e-02, -1.027161033280709e-02, 1.375458085415005e-03, -1.031658750777871e-02, -1.099902331729255e-02, 1.502283814716401e-03, -9.575293829838167e-03, -1.099902331729255e-02, 1.502283814716401e-03, -9.575293829838167e-03, -1.063782087693174e+00, 7.042560250584774e-01, -1.051592277553170e+00, -1.052435788582688e+00, 6.643830387643708e-01, -1.032831773364894e+00, -6.101847917930744e-03, 5.773895991277778e-04, -5.942386043316547e-03, -1.816989256924494e+00, 2.031495145157652e+00, -1.800758196735493e+00, -1.444149665735037e+00, 3.005356420052568e+00, -5.091629122520402e+00, -1.444149665735036e+00, 3.005356420052569e+00, -5.091629122520406e+00, -2.224359271689326e+04, 3.957331174924181e-06, -1.863335464531893e+04, -1.974002408455000e+04, 1.358614364938476e-05, -1.618100600153428e+04, -1.082144980689072e+02, 3.433640340011926e+01, -9.303735879660741e+01, -9.376695846867697e+04, 2.012384245830952e-14, -9.766249266306072e+04, -3.085830302477472e+04, 1.491279132152981e-10, -2.028295538888950e+05, -3.085830302477474e+04, 1.491279132152981e-10, -2.028295538888949e+05, -4.194302063584789e-06, 2.420418239728443e-08, -4.197862392845631e-06, -4.197226523621524e-06, 2.418075378310126e-08, -4.200686610841542e-06, -4.194422541463912e-06, 2.420301806266945e-08, -4.197926347577937e-06, -4.196928287850209e-06, 2.418232893942102e-08, -4.200496281812452e-06, -4.195832726240811e-06, 2.419235156504410e-08, -4.199284689701824e-06, -4.195832726240811e-06, 2.419235156504410e-08, -4.199284689701824e-06, -1.375435487861232e-04, 4.423210863886883e-06, -1.375631106344254e-04, -1.347474399541459e-04, 4.255660271232843e-06, -1.348407322533524e-04, -1.377390943911916e-04, 4.551045770231399e-06, -1.378801368590327e-04, -1.353148935075852e-04, 4.397537928952570e-06, -1.354003172885812e-04, -1.358987771423034e-04, 4.274487760322558e-06, -1.359089580777746e-04, -1.358987771423034e-04, 4.274487760322558e-06, -1.359089580777746e-04, -2.161054723668216e-02, 2.456107710693401e-03, -2.179443501117487e-02, -2.004820448574854e-02, 1.613029686186534e-03, -2.012744752270407e-02, -2.967680563707309e-02, 3.709913305284229e-03, -2.739611663263921e-02, -3.247362958486985e-02, 3.043251195638420e-03, -2.918994530901789e-02, -1.961076240625383e-02, 2.371219389651337e-03, -2.259249630412288e-02, -1.961076240625384e-02, 2.371219389651337e-03, -2.259249630412288e-02, -3.749950181865721e+00, 6.947163786878757e+00, -3.821288432133009e+00, -7.299135579925320e-01, 6.936521837914831e-01, -7.307753645777222e-01, -4.935994529810266e+00, 8.803504002516755e+00, -4.879540256923566e+00, -2.577699918560502e-04, 4.903923827214078e-06, -2.582583130780624e-04, -2.886917103125388e+00, 4.222182190462843e+00, -3.383091863049681e+00, -2.886917103125388e+00, 4.222182190462843e+00, -3.383091863049681e+00, -2.360479775795899e+05, 1.649561371027342e-20, -2.029044543817748e+05, -1.104927903352254e+05, 6.888912474077807e-15, -1.034758917616780e+05, -4.154281057897012e+05, 2.228347141281552e-21, -3.629291943274110e+05, -2.034964600763956e+01, 2.232135498845117e+01, -1.971601103376936e+01, -3.214168550082118e+05, 9.292128669619770e-17, -1.283590534207557e+05, -3.214168550082115e+05, 9.292128669619770e-17, -1.283590534207555e+05, -3.180784157865476e-02, 2.397019861461115e-03, -3.140478841711620e-02, -2.832377010098702e-02, 2.467778243399020e-03, -2.807901263300396e-02, -2.949751717377228e-02, 2.442606401477713e-03, -2.925867207008728e-02, -3.076787057867882e-02, 2.422088783470979e-03, -3.048280178651854e-02, -3.011276279690904e-02, 2.432333120134835e-03, -2.985547988121497e-02, -3.011276279690904e-02, 2.432333120134835e-03, -2.985547988121497e-02, -3.219208480229766e-02, 2.753728751678163e-03, -3.178751431351060e-02, -3.595697864082942e-02, 5.911985776741475e-03, -3.570798476573579e-02, -3.422194721630972e-02, 4.700754890627441e-03, -3.396661611655102e-02, -3.320496353907021e-02, 3.777647688141733e-03, -3.291680726467243e-02, -3.369911816194492e-02, 4.219240519723776e-03, -3.340137675016591e-02, -3.369911816194492e-02, 4.219240519723776e-03, -3.340137675016591e-02, -1.637823758889702e-02, 1.267496802802820e-03, -1.641357913401722e-02, -3.900727447020775e-01, 2.600962368259859e-01, -3.903559502571257e-01, -2.520998552560103e-01, 1.159591687177621e-01, -2.522285509089371e-01, -1.325801115237168e-01, 3.202414380780368e-02, -1.312737113790473e-01, -1.850891220195572e-01, 6.154185400395614e-02, -1.859751244144575e-01, -1.850891220195573e-01, 6.154185400395615e-02, -1.859751244144576e-01, -4.926091162586728e-02, 8.897036984154708e-03, -4.880601707860295e-02, -1.129565453244883e+02, 3.387210465714072e+01, -1.108423373516302e+02, -3.974104837626543e+01, 3.048021181826001e+01, -3.694864488618596e+01, -1.736888177595367e-01, 3.815460086154264e-02, -1.690184673821647e-01, -9.920184707825477e+00, 1.332972582448751e+01, -1.032694886014855e+01, -9.920184707825491e+00, 1.332972582448751e+01, -1.032694886014856e+01, -7.464636806862476e+03, 4.293764061393768e-03, -6.781280272942543e+03, -6.977932431032650e+06, 5.562291000166757e-75, -8.119747554741582e+06, -7.830199105676697e+05, 1.322870487628839e-31, -6.669197732997640e+05, -1.240604973830742e+01, 1.541934878783970e+01, -1.200007292134424e+01, -4.601673188062290e+05, 1.376528989067760e-18, -1.666400482069594e+05, -4.601673188062303e+05, 1.376528989067698e-18, -1.666400482069601e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
