
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_gga1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.129694966392232e+01, -2.129701027671701e+01, -2.129730534546006e+01, -2.129631232188408e+01, -2.129698142288106e+01, -2.129698142288106e+01, -3.519837373510058e+00, -3.519846512661181e+00, -3.520241247020609e+00, -3.520294703177031e+00, -3.519856784205886e+00, -3.519856784205886e+00, -7.223140456461465e-01, -7.219878997423856e-01, -7.175041728839661e-01, -7.219040302946261e-01, -7.221924687965632e-01, -7.221924687965632e-01, -2.378764805729483e-01, -2.384061322746830e-01, -8.488854134376190e-01, -2.163462972540593e-01, -2.379906387832231e-01, -2.379906387832231e-01, -2.078198233065396e-02, -2.189069574232781e-02, -1.016339484302401e-01, -9.184918677937517e-03, -2.163131237276190e-02, -2.163131237276190e-02, -5.271635257461051e+00, -5.273135929222084e+00, -5.271790241719739e+00, -5.272957047356849e+00, -5.272402053542985e+00, -5.272402053542985e+00, -2.066727595516416e+00, -2.076666660307890e+00, -2.067187730548969e+00, -2.074737688319241e+00, -2.073508313707495e+00, -2.073508313707495e+00, -6.228030207655995e-01, -6.707770669058356e-01, -5.930151373027330e-01, -6.131217785354732e-01, -6.447243953211470e-01, -6.447243953211470e-01, -1.953808869458239e-01, -2.720446596924644e-01, -1.897126754940081e-01, -1.987763091269444e+00, -2.014638412000242e-01, -2.014638412000242e-01, -8.828621842105443e-03, -1.022690295051235e-02, -7.446121056544844e-03, -1.359500951085491e-01, -9.227154718066597e-03, -9.227154718066607e-03, -6.443339998224517e-01, -6.351593170228934e-01, -6.372299588166869e-01, -6.395313214042967e-01, -6.382783553711870e-01, -6.382783553711870e-01, -6.270243964726784e-01, -5.494656375930903e-01, -5.674579584645034e-01, -5.855133109836838e-01, -5.761672111338880e-01, -5.761672111338880e-01, -7.021453749153597e-01, -3.090358252877901e-01, -3.370677494556006e-01, -3.952369792984816e-01, -3.617845513360360e-01, -3.617845513360361e-01, -4.999499187575296e-01, -9.499431921731659e-02, -1.263178526000576e-01, -3.704524980156026e-01, -1.623634214517899e-01, -1.623634214517898e-01, -2.486893970583495e-02, -2.530719987372821e-03, -5.012710057783458e-03, -1.535658402734295e-01, -7.717907333620187e-03, -7.717907333620133e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_gga1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.930831894706171e+01, -2.930841960112969e+01, -2.930887827259087e+01, -2.930722972317886e+01, -2.930837194819639e+01, -2.930837194819639e+01, -4.701591152569586e+00, -4.701658573916918e+00, -4.703698338727187e+00, -4.701168262015572e+00, -4.701645763144383e+00, -4.701645763144383e+00, -8.650520375547289e-01, -8.625301944047812e-01, -7.847270860899291e-01, -7.940650137138642e-01, -8.641428623461426e-01, -8.641428623461426e-01, -2.101036283842521e-01, -2.174215668621431e-01, -1.075013085971405e+00, -1.211788992911473e-01, -2.123720119062486e-01, -2.123720119062486e-01, -2.820701464790881e-02, -2.967784478685120e-02, -1.146525137644810e-01, -1.252526568650456e-02, -2.932426054972954e-02, -2.932426054972954e-02, -7.205136266962851e+00, -7.207217699467416e+00, -7.205352064733691e+00, -7.206970591496171e+00, -7.206202251803153e+00, -7.206202251803153e+00, -2.233764262159354e+00, -2.268191051446389e+00, -2.199977160074356e+00, -2.227263970526215e+00, -2.299590511848633e+00, -2.299590511848633e+00, -8.025688763866767e-01, -8.918303056900184e-01, -7.606780083150819e-01, -8.055863854347216e-01, -8.356126967085596e-01, -8.356126967085596e-01, -1.258448188184361e-01, -1.617761720915013e-01, -1.204264829244241e-01, -2.680046776642738e+00, -1.133045372998783e-01, -1.133045372998783e-01, -1.203597938233183e-02, -1.395113759655117e-02, -1.012686715869556e-02, -1.257366443076057e-01, -1.257364879298995e-02, -1.257364879298994e-02, -8.707708503426589e-01, -8.462678058028080e-01, -8.541712812145327e-01, -8.613009039817754e-01, -8.576453335834046e-01, -8.576453335834046e-01, -8.460629184535970e-01, -6.777644237993906e-01, -7.246869489068405e-01, -7.606123089413581e-01, -7.429819395983225e-01, -7.429819395983224e-01, -9.325015866397092e-01, -2.279412307025906e-01, -3.154692681152017e-01, -4.715724471597656e-01, -3.942464364191997e-01, -3.942464364191997e-01, -6.094667018340779e-01, -1.120683199354807e-01, -1.291687770853379e-01, -4.576988094803944e-01, -1.171633509448706e-01, -1.171633509448706e-01, -3.370016687400236e-02, -3.419059530532479e-03, -6.806335638529723e-03, -1.114424221885076e-01, -1.050293829449112e-02, -1.050293829449108e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_gga1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.392289755805051e-09, 2.392372064538985e-09, 2.392570735859553e-09, 2.391226146025678e-09, 2.392334571432283e-09, 2.392334571432283e-09, 4.906992846000579e-07, 4.916424113363665e-07, 5.174978695256200e-07, 4.726991365927127e-07, 4.911794772221371e-07, 4.911794772221371e-07, -2.892179458055247e-03, -2.943865818608330e-03, -4.527940689921828e-03, -4.325465843546946e-03, -2.910786325511924e-03, -2.910786325511924e-03, -8.038531672823852e-01, -7.491273613883451e-01, -8.375932594178758e-04, -2.564797760280326e+00, -7.869269554836196e-01, -7.869269554836196e-01, -2.036348520160029e+01, -2.060948476234365e+01, -1.059840504323138e+01, -1.247658385220234e+01, -2.135651350639520e+01, -2.135651350639520e+01, 7.959110993063482e-07, 8.015181499149205e-07, 7.964687189219337e-07, 8.008287769263803e-07, 7.988093244404793e-07, 7.988093244404793e-07, -5.792878013095965e-05, -5.478674837041705e-05, -6.083936991480676e-05, -5.830200887621115e-05, -5.212869750081846e-05, -5.212869750081846e-05, -2.553186122948353e-03, 1.658470450191735e-03, -3.496537206286093e-03, -1.728295506226768e-03, -1.939447135611553e-03, -1.939447135611553e-03, -4.545109358024581e+00, -8.507825873335478e-01, -5.029702403822188e+00, 5.870031741125440e-05, -3.882328502000186e+00, -3.882328502000186e+00, -1.314488352284189e+01, -1.351100930065684e+01, -3.656738939571169e+01, -9.707755969104477e+00, -1.958623850162927e+01, -1.958623850163252e+01, 3.121144029918219e-02, 3.414234265527897e-03, 8.170450674421324e-03, 1.473981595966694e-02, 1.102522121018348e-02, 1.102522121018347e-02, 5.122723299767275e-02, -7.552437444553368e-03, -4.593676207068903e-03, -3.417720168667055e-03, -3.863231539024928e-03, -3.863231539024929e-03, 9.632452496221728e-04, -3.602822122416103e-01, -1.649601075614388e-01, -3.961543605438286e-02, -8.324317025255989e-02, -8.324317025255987e-02, -1.248562022870457e-02, -9.105199230536847e+00, -8.830300563305059e+00, -4.460163050937732e-02, -7.985245002436618e+00, -7.985245002436661e+00, -1.584481213359985e+01, -1.888515515179378e+01, -1.781154429151214e+01, -9.597476934883728e+00, -2.773837087587158e+01, -2.773837087589007e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
