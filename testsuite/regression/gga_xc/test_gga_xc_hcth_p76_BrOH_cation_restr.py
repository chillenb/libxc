
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_p76_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.222025852853393e+01, -2.222032860060710e+01, -2.222064783041280e+01, -2.221960515985437e+01, -2.222015039220215e+01, -2.222015039220215e+01, -3.428028866386120e+00, -3.428036580855611e+00, -3.428304779008465e+00, -3.428524721430420e+00, -3.428124983976422e+00, -3.428124983976422e+00, -5.754050905662823e-01, -5.751236451753714e-01, -5.719134365382266e-01, -5.765059446068779e-01, -5.748747614349232e-01, -5.748747614349232e-01, -1.462605483563963e-01, -1.460943173587379e-01, -6.814929290294656e-01, -1.393680841641960e-01, -1.377799665991736e-01, -1.377799665991735e-01, -1.972787145622642e-02, -2.071784043051342e-02, -9.054541698249706e-02, -1.155378493979293e-02, -1.445261639495841e-02, -1.445261639495845e-02, -5.254933202416955e+00, -5.256472510334952e+00, -5.255005202023876e+00, -5.256364022949493e+00, -5.255712183181771e+00, -5.255712183181771e+00, -1.926999002847691e+00, -1.937741083813931e+00, -1.926141472198662e+00, -1.935351320123432e+00, -1.933654635518885e+00, -1.933654635518885e+00, -4.819580602662180e-01, -5.415442878367360e-01, -4.405101467389124e-01, -4.656073790164308e-01, -4.908233616950131e-01, -4.908233616950131e-01, -1.412134667158737e-01, -1.744275095330528e-01, -1.371851693379062e-01, -1.854286375662481e+00, -1.306464318014520e-01, -1.306464318014520e-01, -8.936422441447893e-03, -1.129645742247566e-02, -8.643572351116709e-03, -1.161505682559082e-01, -1.040292484963554e-02, -1.040292484963555e-02, -5.087684018640842e-01, -4.917588068384097e-01, -4.965963330615511e-01, -5.014478579012479e-01, -4.989122896180013e-01, -4.989122896180013e-01, -4.992763703245566e-01, -4.007174654008258e-01, -4.150709096580556e-01, -4.356476861145059e-01, -4.241272746102840e-01, -4.241272746102840e-01, -5.706885067288215e-01, -2.024640673146972e-01, -2.242368609058682e-01, -2.674274318911596e-01, -2.415361692074243e-01, -2.415361692074243e-01, -3.639866642100147e-01, -8.830570219203897e-02, -1.075645364825321e-01, -2.485258044351394e-01, -1.201478409936106e-01, -1.201478409936103e-01, -2.739791758320746e-02, -3.018260742194480e-03, -6.357742970036392e-03, -1.190650783546210e-01, -9.631913604028165e-03, -9.631913604028116e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_p76_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.037942640308758e+01, -3.037954146602083e+01, -3.038003238554862e+01, -3.037832081143074e+01, -3.037922061532281e+01, -3.037922061532281e+01, -4.628350172072007e+00, -4.628435951085891e+00, -4.630533928836744e+00, -4.627805069839404e+00, -4.628570302472359e+00, -4.628570302472359e+00, -6.998616087036932e-01, -6.971976000862246e-01, -6.289146796753051e-01, -6.374393117193856e-01, -6.374983570998070e-01, -6.374983570998070e-01, -9.017189249939449e-02, -9.547045821639399e-02, -8.565316666264373e-01, -1.711222217973342e-02, -4.675772969736531e-02, -4.675772969736783e-02, -2.580919064925799e-02, -2.704734913860981e-02, -9.052480368158596e-02, -1.530346838246778e-02, -1.905507126252652e-02, -1.905507126252665e-02, -7.253043185371434e+00, -7.255667394588608e+00, -7.253163473525630e+00, -7.255480327271103e+00, -7.254375196593110e+00, -7.254375196593110e+00, -2.126503995374557e+00, -2.159215428724359e+00, -2.077330230681432e+00, -2.106460098328414e+00, -2.168128453116105e+00, -2.168128453116105e+00, -6.601578124824619e-01, -7.905521452949134e-01, -5.929799125551850e-01, -6.803436695355555e-01, -6.803667754029831e-01, -6.803667754029831e-01, -2.880696399480057e-02, -5.681527729810202e-02, -3.532604664443355e-02, -2.599834411348063e+00, -6.234879376032283e-04, -6.234879376032283e-04, -1.186859683751978e-02, -1.496235179029448e-02, -1.144107201130007e-02, -6.846787545317184e-02, -1.375851343063674e-02, -1.375851343063698e-02, -7.339564735522788e-01, -7.213184959599168e-01, -7.279770755089141e-01, -7.321513548800800e-01, -7.302781571553599e-01, -7.302781571553599e-01, -7.075975857057356e-01, -4.851813365492737e-01, -5.516508087333342e-01, -6.188631227434527e-01, -5.848111325108868e-01, -5.848111325108868e-01, -8.304330076014981e-01, -1.130609922612831e-01, -1.706684674769060e-01, -3.023721963812584e-01, -2.259221608742052e-01, -2.259221608742055e-01, -4.356353009648070e-01, -9.132764599552011e-02, -9.163743198695171e-02, -3.095149095154423e-01, -2.814059453099796e-02, -2.814059453100578e-02, -3.540367193757472e-02, -4.030120706951737e-03, -8.462085723720647e-03, -3.769470982876930e-02, -1.274677853664483e-02, -1.274677853664565e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_p76_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.655592597904545e-09, 1.655672897472030e-09, 1.655866259434700e-09, 1.654674846645291e-09, 1.655322443243920e-09, 1.655322443243920e-09, -1.385974005260175e-08, -1.267184581825985e-08, 1.483129723434346e-08, -3.280052289387061e-08, -1.241807027847271e-08, -1.241807027847271e-08, -3.411743328961331e-03, -3.467584045007518e-03, -4.815366543149640e-03, -4.618656971099361e-03, -4.631088547506852e-03, -4.631088547506852e-03, -8.836179078553001e-01, -8.362631191673973e-01, -1.542173702898950e-03, -2.467072829287979e+00, -1.641718127078671e+00, -1.641718127078661e+00, -4.739646279003573e+01, -4.966134614184267e+01, -1.648530358220087e+01, -4.630225635047631e+01, -5.725244364440226e+01, -5.725244364444039e+01, 7.190242415715385e-07, 7.264502494478499e-07, 7.193258008445808e-07, 7.258815031870891e-07, 7.228056941080496e-07, 7.228056941080496e-07, -5.630372632121008e-05, -5.350358974488091e-05, -6.024813892367082e-05, -5.768495306104221e-05, -5.285780795520971e-05, -5.285780795520971e-05, -1.485471765370573e-03, 1.297608474167641e-02, -3.766230410750023e-03, 1.396906054206611e-02, -4.177925391082878e-04, -4.177925391082878e-04, -5.532609583587677e+00, -8.709736752966636e-01, -6.583741252807967e+00, 1.139215865232432e-04, -4.759078086863028e+00, -4.759078086863028e+00, -6.261964736233017e+01, -5.462459272487479e+01, -3.520111589336514e+02, -1.355123299716161e+01, -1.609366880248442e+02, -1.609366880253260e+02, 4.239911857172440e-02, 1.989800756944496e-02, 2.595840301770713e-02, 3.241285899772639e-02, 2.900649217970733e-02, 2.900649217970733e-02, 5.997742680854839e-02, -1.265427627129499e-02, -5.868102850615938e-03, 3.129471168573316e-03, -1.903737019876008e-03, -1.903737019876008e-03, 9.368580175999305e-03, -3.671069356110744e-01, -1.913780671553921e-01, -6.197687117011947e-02, -1.176748331951622e-01, -1.176748331951624e-01, -1.847996804931187e-02, -1.541150473981535e+01, -1.289184897372177e+01, -5.937876376241583e-02, -1.176468616587172e+01, -1.176468616587117e+01, -3.596050529881551e+01, -2.951161562372983e+02, -1.366528817388456e+02, -1.273471733718098e+01, -2.048461846283813e+02, -2.048461846281522e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
