
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.185007501056861e+01, -3.185033826204707e+01, -3.185144037109458e+01, -3.184713045661773e+01, -3.185021444546468e+01, -3.185021444546468e+01, -3.499322835067296e+00, -3.499315386179820e+00, -3.499251146940593e+00, -3.500079196937090e+00, -3.499333386034012e+00, -3.499333386034012e+00, -7.320927546741652e-01, -7.319669627459400e-01, -7.315067604847749e-01, -7.360545196100404e-01, -7.320435183003734e-01, -7.320435183003734e-01, -2.226875689508606e-01, -2.238632885880289e-01, -8.560534647612911e-01, -1.871236458503876e-01, -2.230132771387110e-01, -2.230132771387110e-01, -6.506060214849536e-02, -6.554043949576377e-02, -1.121019798246301e-01, -6.483050250174638e-02, -6.472095847890078e-02, -6.472095847890078e-02, -5.188866137055620e+00, -5.189993069889839e+00, -5.188983869349610e+00, -5.189860061872232e+00, -5.189440016667251e+00, -5.189440016667251e+00, -2.150086167078219e+00, -2.158584888515078e+00, -2.152907006362311e+00, -2.159397764543826e+00, -2.152600017169128e+00, -2.152600017169128e+00, -6.154792510556787e-01, -6.525986351796427e-01, -5.859012035352471e-01, -5.975775323726659e-01, -6.360143538704151e-01, -6.360143538704151e-01, -1.635878543618124e-01, -2.451262496583705e-01, -1.587546154919909e-01, -1.947466581289541e+00, -1.699984012684019e-01, -1.699984012684019e-01, -6.333871238096761e-02, -6.439128311681537e-02, -4.491594121702173e-02, -1.244586086643564e-01, -5.635244091291569e-02, -5.635244091291571e-02, -6.173121446254330e-01, -6.163346283479587e-01, -6.166064401130350e-01, -6.168630463703140e-01, -6.167277679120174e-01, -6.167277679120173e-01, -5.971072312731196e-01, -5.475091963984755e-01, -5.604505672516554e-01, -5.732170417346119e-01, -5.664907504138593e-01, -5.664907504138593e-01, -6.843876430154014e-01, -2.905114658040383e-01, -3.265471276335248e-01, -3.880834985350561e-01, -3.545573653259945e-01, -3.545573653259945e-01, -4.966690839687355e-01, -1.142453020247720e-01, -1.242841193225629e-01, -3.598574937749867e-01, -1.374558862496328e-01, -1.374558862496328e-01, -7.254310863186836e-02, -4.622066061483452e-02, -5.235868201863092e-02, -1.301012811496692e-01, -4.909671945101288e-02, -4.909671945101288e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.384140274896370e+01, -6.384090934574854e+01, -6.384012370558320e+01, -6.384817476081530e+01, -6.384113071266748e+01, -6.384113071266748e+01, -4.388933757766635e+00, -4.389012845402179e+00, -4.391373752717128e+00, -4.388278271074660e+00, -4.388994031060915e+00, -4.388994031060915e+00, -8.320640387601269e-01, -8.303379286898798e-01, -7.824326890417317e-01, -7.897196300894570e-01, -8.314392186639934e-01, -8.314392186639934e-01, -2.230186406527773e-01, -2.271016835663418e-01, -1.018051067017582e+00, -1.478994424545449e-01, -2.242619030810709e-01, -2.242619030810709e-01, 4.512109104989810e-03, 3.888141028616549e-03, -2.834922494258817e-02, 1.472636092100026e-02, 3.653413934768136e-03, 3.653413934768136e-03, -7.014804701505885e+00, -7.017191563232869e+00, -7.015051274375360e+00, -7.016907245010682e+00, -7.016026972251462e+00, -7.016026972251462e+00, -2.121295200442065e+00, -2.147898125023056e+00, -2.097424617995710e+00, -2.118334473609375e+00, -2.169804788805069e+00, -2.169804788805069e+00, -7.635065048264258e-01, -8.567607423864214e-01, -7.230077286185905e-01, -7.750111670665054e-01, -7.967528703477033e-01, -7.967528703477033e-01, -9.593575483624385e-02, -2.090610068529145e-01, -9.671163247086452e-02, -2.606150464014666e+00, -1.207638774384944e-01, -1.207638774384944e-01, 1.424854717489508e-02, 1.340469105616513e-02, 5.700153316429019e-03, -5.201465900225563e-02, 9.931426010256752e-03, 9.931426010256759e-03, -8.214426249124233e-01, -8.103816350034520e-01, -8.141869832030594e-01, -8.172246982338355e-01, -8.156922046114774e-01, -8.156922046114774e-01, -7.959635086543971e-01, -6.454451494588184e-01, -6.883235916387953e-01, -7.285651100432607e-01, -7.081552637120201e-01, -7.081552637120201e-01, -8.975407408936782e-01, -2.716169633924584e-01, -3.343770221508535e-01, -4.497675886256327e-01, -3.888538232779931e-01, -3.888538232779931e-01, -5.813368556300104e-01, -2.130227009390629e-02, -4.101992433872699e-02, -4.322500818750143e-01, -7.806327018359872e-02, -7.806327018359872e-02, 5.378359417903173e-03, 1.281315770627820e-02, 1.247746806076973e-02, -7.577377669702159e-02, 7.583060558560365e-03, 7.583060558560386e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.187063818685538e-08, 3.186864847154443e-08, 3.186215957165162e-08, 3.189469148601419e-08, 3.186956892329852e-08, 3.186956892329852e-08, -3.774124668754857e-06, -3.773393350057519e-06, -3.752408808884998e-06, -3.784142824150639e-06, -3.773660804304647e-06, -3.773660804304647e-06, -4.745402470150889e-03, -4.768746939176213e-03, -5.400729339806410e-03, -5.238864235807309e-03, -4.753889252258272e-03, -4.753889252258272e-03, -5.835664397157295e-01, -5.627766883637011e-01, -2.246919946617861e-03, -1.577045961213065e+00, -5.773113596836925e-01, -5.773113596836925e-01, -4.373594336698687e+03, -3.811581510298262e+03, -5.118342609210044e+01, -3.717707699126858e+04, -3.949538591455390e+03, -3.949538591455390e+03, 2.576055129985332e-07, 2.616571816163270e-07, 2.580094612798074e-07, 2.611597575537480e-07, 2.596932450554559e-07, 2.596932450554559e-07, -8.293067052803089e-05, -8.010522255668427e-05, -8.466426798543658e-05, -8.241412621589273e-05, -7.880980478319405e-05, -7.880980478319405e-05, -7.791901436277098e-03, -4.416356403258785e-03, -9.713078461256516e-03, -7.615845546055520e-03, -6.585297865699567e-03, -6.585297865699567e-03, -4.083001095938198e+00, -5.108642901954110e-01, -4.323244833608671e+00, 3.650273854738399e-05, -2.655141579279603e+00, -2.655141579279603e+00, -4.160144277644535e+04, -2.803290896041350e+04, -7.385572290766437e+04, -1.861522920544170e+01, -3.849164980002892e+04, -3.849164980002891e+04, -4.069403684309662e-03, -5.863152822368941e-03, -5.480676580988261e-03, -5.055431158815626e-03, -5.287958492529221e-03, -5.287958492529219e-03, -4.589115185230034e-03, -1.408313663243599e-02, -1.181671469887272e-02, -9.906833945430021e-03, -1.086793535812318e-02, -1.086793535812317e-02, -3.498013893926485e-03, -2.347866982011622e-01, -1.318058794093845e-01, -5.715956028142860e-02, -8.731634034986470e-02, -8.731634034986478e-02, -2.109134679666847e-02, -6.338150394060305e+01, -2.524292536781237e+01, -7.484772342125887e-02, -8.262693360971824e+00, -8.262693360971824e+00, -2.640189838043721e+03, -1.349528716275102e+06, -2.012626109598067e+05, -9.799890942096606e+00, -6.491182259117053e+04, -6.491182259117079e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
