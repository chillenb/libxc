
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mohlyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.016893649177355e+01, -2.016897432133234e+01, -2.016919471146275e+01, -2.016857422808953e+01, -2.016895601025416e+01, -2.016895601025416e+01, -3.379049529086697e+00, -3.379037340036789e+00, -3.378839990393488e+00, -3.379883637614254e+00, -3.379057368033986e+00, -3.379057368033986e+00, -7.053065253891349e-01, -7.052232089005351e-01, -7.068350583158551e-01, -7.109353582308019e-01, -7.052725105718105e-01, -7.052725105718105e-01, -2.344474801177343e-01, -2.346906624624243e-01, -8.218621060015294e-01, -2.087980350430697e-01, -2.344803365842149e-01, -2.344803365842149e-01, -2.625662848974664e-02, -2.746242897968383e-02, -9.767650474767070e-02, -1.282238268964673e-02, -2.718291984158687e-02, -2.718291984158687e-02, -4.953504093053200e+00, -4.953925099459072e+00, -4.953550835444664e+00, -4.953878102907195e+00, -4.953714135710532e+00, -4.953714135710532e+00, -2.051064238633978e+00, -2.059710712697180e+00, -2.053166478567419e+00, -2.059793135890506e+00, -2.054539868535906e+00, -2.054539868535906e+00, -5.979333404190429e-01, -6.398652205288445e-01, -5.698109258778498e-01, -5.865034023734291e-01, -6.180342828335598e-01, -6.180342828335598e-01, -1.774106317688768e-01, -2.640452772598640e-01, -1.744494235320242e-01, -1.857180308853729e+00, -1.907114663083009e-01, -1.907114663083009e-01, -1.237750842500707e-02, -1.410963769824705e-02, -1.062679727809448e-02, -1.255120926250570e-01, -1.287671370090766e-02, -1.287671370090766e-02, -6.092726839870631e-01, -6.063431925174769e-01, -6.073428353050961e-01, -6.081522232530333e-01, -6.077428656268203e-01, -6.077428656268203e-01, -5.907922797159592e-01, -5.321050848361776e-01, -5.456312210084671e-01, -5.608089424686572e-01, -5.526852183910546e-01, -5.526852183910546e-01, -6.693173121819955e-01, -3.033966051840558e-01, -3.313321573293300e-01, -3.826085737490059e-01, -3.531554847559400e-01, -3.531554847559400e-01, -4.844295872151302e-01, -9.197495635260719e-02, -1.161658148947171e-01, -3.562732174800907e-01, -1.509366885033265e-01, -1.509366885033265e-01, -3.063599705392920e-02, -3.935415133048254e-03, -7.418089386998736e-03, -1.448957174081312e-01, -1.097431955471178e-02, -1.097431955471176e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mohlyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.573528510211235e+01, -2.573538290733672e+01, -2.573581356702603e+01, -2.573421202873134e+01, -2.573533672872352e+01, -2.573533672872352e+01, -4.172516016974567e+00, -4.172582841640152e+00, -4.174585079742292e+00, -4.171999014264133e+00, -4.172567821349229e+00, -4.172567821349229e+00, -7.914438509807754e-01, -7.892020882930341e-01, -7.269149905512559e-01, -7.346558268414759e-01, -7.906338885672106e-01, -7.906338885672106e-01, -1.976067183138817e-01, -2.016720889792193e-01, -9.828013687644590e-01, -1.693576768154288e-01, -1.988078161152277e-01, -1.988078161152277e-01, -3.451739710018378e-02, -3.606849522790474e-02, -1.222762540437458e-01, -1.699616578881370e-02, -3.570282243008717e-02, -3.570282243008717e-02, -6.425511820870916e+00, -6.428197035092507e+00, -6.425786945486488e+00, -6.427874951121312e+00, -6.426890133372524e+00, -6.426890133372524e+00, -2.074110440982607e+00, -2.098888732122398e+00, -2.053411104038757e+00, -2.072755453848123e+00, -2.117786576072282e+00, -2.117786576072282e+00, -7.522339571054939e-01, -8.396267839809521e-01, -7.129514858222272e-01, -7.659603669022221e-01, -7.852722680538003e-01, -7.852722680538003e-01, -1.828482529385480e-01, -2.047261656481811e-01, -1.754112680135802e-01, -2.447236961738402e+00, -1.693757784823538e-01, -1.693757784823538e-01, -1.640860390182610e-02, -1.869151698828858e-02, -1.408605584921904e-02, -1.488902767273140e-01, -1.706068074124204e-02, -1.706068074124203e-02, -8.014067362323398e-01, -7.960826932488269e-01, -7.981799639850300e-01, -7.996572420415470e-01, -7.989339326495721e-01, -7.989339326495721e-01, -7.770160839261648e-01, -6.262158978881606e-01, -6.791289848002678e-01, -7.228552916826393e-01, -7.016186057768894e-01, -7.016186057768894e-01, -8.778385500863974e-01, -2.429576085471891e-01, -2.988738717874634e-01, -4.360574577709634e-01, -3.620039901669323e-01, -3.620039901669323e-01, -5.632902644163491e-01, -1.169283952553566e-01, -1.442921223924350e-01, -4.312475500279649e-01, -1.591569812084956e-01, -1.591569812084954e-01, -4.019491220176419e-02, -5.232934978809096e-03, -9.850899341510276e-03, -1.504832252100515e-01, -1.454798386183562e-02, -1.454798386183559e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mohlyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.845354200056563e-09, -2.845273184040097e-09, -2.844968682961478e-09, -2.846294264805553e-09, -2.845310999076578e-09, -2.845310999076578e-09, -4.969712052980734e-06, -4.969144728589485e-06, -4.952730468753875e-06, -4.976803876417256e-06, -4.969336043273064e-06, -4.969336043273064e-06, -4.709308657758154e-03, -4.751568349693432e-03, -5.848883078385454e-03, -5.649349782372632e-03, -4.724615572234483e-03, -4.724615572234483e-03, -8.603028438206127e-01, -8.308421763830159e-01, -1.948928763947283e-03, -1.560194932536472e+00, -8.518270422038441e-01, -8.518270422038441e-01, -1.323401113094508e+01, -1.326607944191226e+01, -3.900444244694894e-01, -9.386125678572583e+00, -1.378188474389840e+01, -1.378188474389840e+01, -6.236782373435699e-07, -6.193148110867183e-07, -6.232396582409365e-07, -6.198467301067356e-07, -6.214296929240287e-07, -6.214296929240287e-07, -7.429390674331088e-05, -7.185541625659368e-05, -7.568069973985370e-05, -7.375523327245777e-05, -7.082404284853967e-05, -7.082404284853967e-05, -5.058868709992981e-03, -8.380186884718768e-04, -6.530807846501671e-03, -2.112704818141395e-03, -3.904420566529062e-03, -3.904420566529062e-03, -1.468396459968077e+00, -6.026468095085731e-01, -1.792284391598755e+00, -1.416790754811724e-05, -1.903254755579036e+00, -1.903254755579036e+00, -9.957382645455134e+00, -9.977070861984803e+00, -2.855688075671230e+01, -1.533886818991787e+00, -1.473658418280129e+01, -1.473658418280274e+01, 1.715984743387274e-04, -8.240301890107960e-04, -4.725996196980151e-04, -1.966418873172805e-04, -3.350634318438166e-04, -3.350634318438168e-04, 4.126675997537243e-04, -1.279435408272867e-02, -8.205176066061722e-03, -4.435138155549031e-03, -6.258283065671937e-03, -6.258283065671932e-03, -8.071131698930186e-04, -3.123451300013176e-01, -1.780932592383062e-01, -5.769182260114256e-02, -1.073775999527991e-01, -1.073775999527992e-01, -1.991268877146377e-02, 4.646934056134171e-01, -2.959573967074247e-01, -5.948065611379182e-02, -2.583323084850676e+00, -2.583323084850694e+00, -9.926405256898262e+00, -1.716638084106736e+01, -1.477950269793836e+01, -3.403643415986174e+00, -2.152259136710263e+01, -2.152259136710323e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
