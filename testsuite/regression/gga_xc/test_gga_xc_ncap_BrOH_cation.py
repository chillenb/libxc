
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_ncap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111269180177700e+01, -2.111271677120836e+01, -2.111290004971240e+01, -2.111252707105635e+01, -2.111271222837122e+01, -2.111271222837122e+01, -3.536636097367938e+00, -3.536597935175862e+00, -3.535802036285994e+00, -3.537851384568988e+00, -3.536674993849855e+00, -3.536674993849855e+00, -7.319489751228190e-01, -7.317835578950578e-01, -7.298041722520059e-01, -7.347661649681760e-01, -7.353956587086297e-01, -7.353956587086297e-01, -2.304617415967682e-01, -2.318259335193264e-01, -8.426809270770599e-01, -2.008824884007109e-01, -2.214264095020905e-01, -2.214264095020904e-01, -3.004714267928091e-01, -2.894830308427740e-01, -1.989773765287459e-01, -3.770554959155153e-01, -3.103221398879424e-01, -3.103221398879422e-01, -5.109793435340177e+00, -5.109241706340124e+00, -5.109778488875050e+00, -5.109291213812138e+00, -5.109507696572748e+00, -5.109507696572748e+00, -2.166729806737422e+00, -2.176364430505688e+00, -2.169125317266224e+00, -2.177584745518026e+00, -2.170973371866742e+00, -2.170973371866742e+00, -6.240914246909313e-01, -6.600825241409096e-01, -5.829279829508750e-01, -5.907308294589837e-01, -6.319859612030758e-01, -6.319859612030758e-01, -1.840139453770301e-01, -2.483130971826254e-01, -1.797348002364292e-01, -1.888856293288766e+00, -1.806697521318859e-01, -1.806697521318859e-01, -3.755179078462413e-01, -3.598647307186910e-01, -2.126600565620954e-01, -1.694203917335210e-01, -2.552478087870697e-01, -2.552478087870698e-01, -6.113279182250579e-01, -6.101183088801156e-01, -6.104640220674314e-01, -6.108049025793759e-01, -6.106263428927988e-01, -6.106263428927988e-01, -5.954379472252607e-01, -5.440008454819331e-01, -5.566906838659054e-01, -5.702961955852863e-01, -5.630584458900647e-01, -5.630584458900647e-01, -6.904828814785515e-01, -2.918619772354938e-01, -3.287979740210937e-01, -3.955217079114268e-01, -3.589267292178265e-01, -3.589267292178265e-01, -5.038914398188004e-01, -2.075177665641264e-01, -1.903953176491390e-01, -3.758946363412994e-01, -1.601589606448531e-01, -1.601589606448531e-01, -2.856387319934088e-01, -3.271623822124433e-01, -3.274815714853072e-01, -1.600969111382716e-01, -2.424824747124314e-01, -2.424824747124312e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_ncap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509885287488630e+01, -2.509882413033745e+01, -2.509897274731679e+01, -2.509891160357692e+01, -2.509932175618950e+01, -2.509941907785786e+01, -2.509796353889451e+01, -2.509769377888277e+01, -2.509892231130156e+01, -2.509835997474662e+01, -2.509892231130156e+01, -2.509835997474662e+01, -4.106341577703273e+00, -4.106566832893166e+00, -4.106400820844053e+00, -4.106636325382248e+00, -4.107931228923701e+00, -4.108278653634985e+00, -4.105924537451716e+00, -4.106283717771611e+00, -4.105608169411550e+00, -4.107646082887648e+00, -4.105608169411550e+00, -4.107646082887648e+00, -8.333301046400607e-01, -8.384325595481769e-01, -8.311860644979130e-01, -8.374226899854379e-01, -7.992258791475575e-01, -7.913566953849395e-01, -8.009233021764499e-01, -8.034793395087432e-01, -8.401513786655341e-01, -7.631794686803519e-01, -8.401513786655341e-01, -7.631794686803519e-01, -2.229467656349105e-01, -2.293475309863119e-01, -2.271967663802172e-01, -2.344887485997289e-01, -9.514669530734985e-01, -9.889220912947161e-01, -1.514017476102344e-01, -1.532823779220394e-01, -2.075184870403408e-01, -1.253840173144294e-01, -2.075184870403407e-01, -1.253840173144293e-01, 1.440115600008241e-01, 1.421950890560006e-01, 1.391992458704056e-01, 1.368397730446509e-01, 6.297563035537412e-02, 5.858789443863960e-02, 1.718542157118515e-01, 1.739394657841538e-01, 1.513873996671910e-01, 1.275983175777287e-01, 1.513873996671909e-01, 1.275983175777287e-01, -6.302637610721228e+00, -6.301132224098088e+00, -6.305999664577605e+00, -6.304394721106391e+00, -6.302816548422030e+00, -6.301246059480659e+00, -6.305711907398290e+00, -6.304199093786106e+00, -6.304360056802047e+00, -6.302774056634400e+00, -6.304360056802047e+00, -6.302774056634400e+00, -2.196276019393227e+00, -2.196165856254439e+00, -2.216468934246234e+00, -2.215841421007597e+00, -2.171698240646903e+00, -2.177455575315070e+00, -2.189112538449243e+00, -2.195039637688477e+00, -2.224992110148905e+00, -2.210727283484573e+00, -2.224992110148905e+00, -2.210727283484573e+00, -7.675899430762181e-01, -7.661853528499163e-01, -8.542605216060802e-01, -8.549689592533950e-01, -6.986754089178043e-01, -7.203159189893420e-01, -7.504496711313471e-01, -7.678360637304116e-01, -7.969167265807968e-01, -7.659430507118278e-01, -7.969167265807969e-01, -7.659430507118279e-01, -5.578792241258553e-02, -5.783096648073190e-02, -2.075542508378011e-01, -2.084615182090335e-01, -3.918688207336352e-02, -4.659370578722343e-02, -2.449866463786792e+00, -2.448972325778519e+00, -1.010441566508082e-01, -1.142426246479723e-01, -1.010441566508082e-01, -1.142426246479723e-01, 1.654115130309206e-01, 1.716183365365500e-01, 1.634173254353303e-01, 1.670232853438783e-01, 1.017189644924388e-01, 9.705683867641217e-02, 1.245260953554531e-02, 1.290319112443607e-02, 1.251453469181140e-01, 1.173271793408894e-01, 1.251453469181142e-01, 1.173271793408895e-01, -7.979160196679530e-01, -8.002872825436848e-01, -7.890601804879098e-01, -7.915400138763020e-01, -7.922899539202098e-01, -7.947596215742672e-01, -7.949044070892125e-01, -7.972917750359899e-01, -7.936092682983531e-01, -7.960367234097889e-01, -7.936092682983531e-01, -7.960367234097889e-01, -7.787226598610357e-01, -7.805871988410603e-01, -6.305677209431797e-01, -6.330082586027344e-01, -6.729745068988340e-01, -6.757230897544291e-01, -7.166616882644554e-01, -7.186910624593179e-01, -6.946394154755602e-01, -6.967310763808048e-01, -6.946394154755602e-01, -6.967310763808048e-01, -8.916480665894636e-01, -8.934090929541457e-01, -2.719116845499917e-01, -2.731802222924305e-01, -3.338653533051940e-01, -3.365802279654182e-01, -4.567276870239814e-01, -4.586720376049666e-01, -3.920569814892056e-01, -3.921220364827880e-01, -3.920569814892056e-01, -3.921220364827879e-01, -5.835076433292840e-01, -5.871626275243064e-01, 6.658410016326972e-02, 6.602723466750716e-02, 4.723031554918427e-02, 4.328100370273053e-02, -4.479974040815945e-01, -4.532871658291330e-01, -2.708412148251108e-02, -3.858641351155612e-02, -2.708412148251113e-02, -3.858641351155617e-02, 1.367566001683903e-01, 1.342563603184518e-01, 1.452553234903220e-01, 1.228246999930098e-01, 1.468366042912310e-01, 1.424596325054515e-01, -2.077970257006997e-02, -2.232052385451257e-02, 1.010388796906185e-01, 1.187400458984271e-01, 1.010388796906183e-01, 1.187400458984273e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_ncap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.515620068263026e-08, -3.985694736819921e-10, -1.515628267714645e-08, -1.515606888895726e-08, -3.985682678295233e-10, -1.515618673144959e-08, -1.515552171594744e-08, -3.985556803003606e-10, -1.515543932537555e-08, -1.515701541390569e-08, -3.985737400156064e-10, -1.515733972759478e-08, -1.515612647909488e-08, -3.985653174993331e-10, -1.515649030584010e-08, -1.515612647909488e-08, -3.985653174993331e-10, -1.515649030584010e-08, -1.972037820990655e-05, 1.220052609411035e-06, -1.972581821387121e-05, -1.972038078130535e-05, 1.220623528000075e-06, -1.972625375887575e-05, -1.972520628418045e-05, 1.233676138011468e-06, -1.972770709703179e-05, -1.970445493172225e-05, 1.209572485085096e-06, -1.970807729267765e-05, -1.973202537627168e-05, 1.220549639750029e-06, -1.971096808514074e-05, -1.973202537627168e-05, 1.220549639750029e-06, -1.971096808514074e-05, -1.127313081015668e-02, 3.898011782400340e-03, -1.124266800009852e-02, -1.130361832660987e-02, 3.878504395746859e-03, -1.126640433346649e-02, -1.184994795359522e-02, 3.345601026063502e-03, -1.189336156559766e-02, -1.153546761492251e-02, 3.257179266520066e-03, -1.152745918245776e-02, -1.139947680722068e-02, 3.303931635277910e-03, -1.159062930777176e-02, -1.139947680722068e-02, 3.303931635277910e-03, -1.159062930777176e-02, -1.559454306681693e+00, 6.335550241606760e-01, -1.367911832480329e+00, -1.517789146689566e+00, 6.324222944651172e-01, -1.305182265446309e+00, -6.618106914120161e-03, 2.059201451762032e-03, -6.019045221751414e-03, -3.598735128312344e+00, 8.604563833140844e-01, -3.408945817028874e+00, -1.232933422895513e+00, 7.286501144459828e-01, -1.126190490264704e+01, -1.232933422895512e+00, 7.286501144459826e-01, -1.126190490264704e+01, -1.788839621002665e+05, -1.086632618478494e+01, -1.456878211487590e+05, -1.542206185177273e+05, -1.452164192069542e+01, -1.223029963537783e+05, -4.171446945713562e+02, -2.047375141042675e+01, -3.473843111301272e+02, -9.624088513838729e+05, -1.036044497006542e+00, -1.012848678984907e+06, -2.620859639646707e+05, -5.876868268512811e+00, -2.004752052071891e+06, -2.620859639646708e+05, -5.876868268512858e+00, -2.004752052071890e+06, -4.180739980669393e-06, 3.900559832104387e-07, -4.184809273522261e-06, -4.178065691450467e-06, 3.950537010220730e-07, -4.182142302826170e-06, -4.180598365063987e-06, 3.902579005000320e-07, -4.184680370308728e-06, -4.178242566526855e-06, 3.946694969047896e-07, -4.182322261972973e-06, -4.179404578209887e-06, 3.925978227017985e-07, -4.183459154359237e-06, -4.179404578209887e-06, 3.925978227017985e-07, -4.183459154359237e-06, -1.617990511916682e-04, 4.156614984869647e-06, -1.618288905532000e-04, -1.581301548218099e-04, 4.372725391027851e-06, -1.582767722346634e-04, -1.630698281380117e-04, 3.247437127524005e-06, -1.628993013107571e-04, -1.598897706403446e-04, 3.447662880165198e-06, -1.596527418174379e-04, -1.588259281359173e-04, 4.728797773482119e-06, -1.596468330409080e-04, -1.588259281359173e-04, 4.728797773482119e-06, -1.596468330409080e-04, -1.997068961109239e-02, 1.113023808365235e-02, -2.025343152281120e-02, -1.415307000333520e-02, 1.253032760575656e-02, -1.413562935263730e-02, -2.934933400359856e-02, 1.467813926056091e-02, -2.488529085777831e-02, -2.547034045285114e-02, 1.923761696115374e-02, -2.112735300027330e-02, -1.676093839977556e-02, 1.093893923760567e-02, -2.164515465933866e-02, -1.676093839977556e-02, 1.093893923760567e-02, -2.164515465933866e-02, -1.290960921836455e+01, 2.627674518482920e-01, -1.253390023582488e+01, -1.284561579470808e+00, 3.482000189594276e-01, -1.261131864963034e+00, -1.864952795041761e+01, -1.139858532582806e-02, -1.554996305918466e+01, -1.935963517235867e-04, 1.094204145691050e-04, -1.940551750954210e-04, -7.927703473305076e+00, 1.132291233323748e+00, -6.794272719818007e+00, -7.927703473305076e+00, 1.132291233323748e+00, -6.794272719818007e+00, -2.644319936193421e+06, -9.397335218583921e-01, -2.270723511477400e+06, -1.129679760210580e+06, -1.840508300102571e+00, -1.060236005896659e+06, -3.983413722260097e+06, -4.632764419036490e+02, -3.349931914629952e+06, -7.346479989696452e+01, -5.159273623854800e+00, -7.163040375673884e+01, -3.299562554051536e+06, -6.520040856967249e+01, -1.144443852246098e+06, -3.299562554051535e+06, -6.520040856967218e+01, -1.144443852246098e+06, -1.795801312553200e-02, 2.126065791171819e-02, -1.752461459440135e-02, -1.977264955708408e-02, 1.803382656121493e-02, -1.934448453948777e-02, -1.928068423547450e-02, 1.893371188034415e-02, -1.885016858274068e-02, -1.877687998669619e-02, 1.983444693483661e-02, -1.834554735909501e-02, -1.904239537381011e-02, 1.936251593382607e-02, -1.861134142073732e-02, -1.904239537381011e-02, 1.936251593382607e-02, -1.861134142073732e-02, -1.896427100638212e-02, 2.591225952320384e-02, -1.854548714253031e-02, -3.769352089431652e-02, 1.689632861597843e-02, -3.705215814973935e-02, -3.308025853037774e-02, 1.772953170037367e-02, -3.247544500772844e-02, -2.849506276677221e-02, 1.916881569355929e-02, -2.799687296288737e-02, -3.087086598094804e-02, 1.838963748728160e-02, -3.032430977354315e-02, -3.087086598094804e-02, 1.838963748728160e-02, -3.032430977354315e-02, -1.187603202592266e-02, 1.001360210671153e-02, -1.179217956861494e-02, -5.799463202654899e-01, 1.903961115390584e-01, -5.684102635201180e-01, -3.286981115555125e-01, 1.285980091751019e-01, -3.187742212080926e-01, -1.417481241235073e-01, 7.401401111725103e-02, -1.383896065525299e-01, -2.150027593115752e-01, 9.978502666207874e-02, -2.161809757611428e-01, -2.150027593115754e-01, 9.978502666207878e-02, -2.161809757611429e-01, -5.191952045477970e-02, 2.421813229768274e-02, -5.058266472996038e-02, -4.394001294024816e+02, -2.035772595946416e+01, -4.294547378513387e+02, -1.590108391022981e+02, -1.155162317937396e+01, -1.428455505734497e+02, -1.759187096819698e-01, 1.048035524665934e-01, -1.646035739987831e-01, -3.366675924247285e+01, -1.200634234810640e-01, -2.864721868745037e+01, -3.366675924247284e+01, -1.200634234810641e-01, -2.864721868745038e+01, -5.175412363997509e+04, -1.350782090962272e+01, -4.604677425307671e+04, -1.069569013647749e+08, -2.069315687384770e+00, -1.177462776056215e+08, -9.510823868053421e+06, -4.772665471428430e+00, -7.845172740040164e+06, -4.002409104931067e+01, -9.880348865830114e-01, -3.777422954772681e+01, -4.465819612338899e+06, -1.134318050323444e+02, -1.539857193163048e+06, -4.465819612338911e+06, -1.134318050323448e+02, -1.539857193163054e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
