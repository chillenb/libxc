
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.185184767085128e+01, -3.185215010750981e+01, -3.185332002964763e+01, -3.184882342974242e+01, -3.185120462515943e+01, -3.185120462515943e+01, -3.499461606078154e+00, -3.499450848052737e+00, -3.499286316536709e+00, -3.500215258412931e+00, -3.499530100910740e+00, -3.499530100910740e+00, -7.326184617460901e-01, -7.324253540371017e-01, -7.302202095770626e-01, -7.352888099332168e-01, -7.334917652743355e-01, -7.334917652743355e-01, -2.204872187862069e-01, -2.216099753469972e-01, -8.453002697261384e-01, -1.914004486720436e-01, -2.007558301071728e-01, -2.007558301071728e-01, -7.558212002496542e-02, -7.473202743372352e-02, -1.172542530267859e-01, -7.331775086627321e-02, -6.944653034678416e-02, -6.944653034678411e-02, -5.191190800842098e+00, -5.192355216822362e+00, -5.191247089221118e+00, -5.192274962918915e+00, -5.191779175492165e+00, -5.191779175492165e+00, -2.150011104933476e+00, -2.158849470207910e+00, -2.153491962588349e+00, -2.161093641068097e+00, -2.153437246472655e+00, -2.153437246472655e+00, -6.224320305142832e-01, -6.601231568924221e-01, -5.794419444065632e-01, -5.868619168913752e-01, -6.300752901899458e-01, -6.300752901899458e-01, -1.653569286370523e-01, -2.408001935557888e-01, -1.582044066717565e-01, -1.949658796600799e+00, -1.684087864597953e-01, -1.684087864597953e-01, -6.497755459968742e-02, -6.924182736430701e-02, -3.749457685230053e-02, -1.291059443548603e-01, -4.851330058990411e-02, -4.851330058990415e-02, -6.080132675994590e-01, -6.072640548338796e-01, -6.074613295472348e-01, -6.076650222050183e-01, -6.075563860548947e-01, -6.075563860548947e-01, -5.908184677721103e-01, -5.396158523637115e-01, -5.525208237660628e-01, -5.662381910349185e-01, -5.589619093004704e-01, -5.589619093004704e-01, -6.922221832880278e-01, -2.845646299077142e-01, -3.206425692152287e-01, -3.863831127180226e-01, -3.499650679302826e-01, -3.499650679302826e-01, -4.981918155587580e-01, -1.189684592995750e-01, -1.279029704354673e-01, -3.651706910939367e-01, -1.363905917468484e-01, -1.363905917468484e-01, -8.452618609639027e-02, -3.525245023049012e-02, -4.873385895760448e-02, -1.332753236316098e-01, -4.467604219216481e-02, -4.467604219216478e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.384294319707050e+01, -6.384237640530811e+01, -6.384147278958940e+01, -6.384987181869266e+01, -6.384524128210344e+01, -6.384524128210344e+01, -4.389227766096409e+00, -4.389323925240727e+00, -4.391657994853482e+00, -4.388471676020401e+00, -4.389453954000214e+00, -4.389453954000214e+00, -8.430365498691198e-01, -8.412391152201998e-01, -7.952443048825771e-01, -8.026738548160726e-01, -8.021314893177625e-01, -8.021314893177625e-01, -2.060787942945320e-01, -2.105713541823922e-01, -9.857795730302402e-01, -1.435755723511849e-01, -1.689329451010393e-01, -1.689329451010393e-01, 1.854537628684540e-02, 1.737466860489134e-02, -1.018254078075202e-02, 2.310495604441034e-02, 1.856810452139236e-02, 1.856810452139233e-02, -7.018258884922618e+00, -7.020719589649596e+00, -7.018372713431644e+00, -7.020545177543571e+00, -7.019507217498061e+00, -7.019507217498061e+00, -2.128539363407840e+00, -2.155842988588561e+00, -2.087856173856494e+00, -2.112146208809776e+00, -2.163115042824560e+00, -2.163115042824560e+00, -7.713764930952889e-01, -8.655709943396962e-01, -7.105544029510715e-01, -7.621681728587330e-01, -7.871511701096123e-01, -7.871511701096123e-01, -8.366802729079169e-02, -1.915372913567247e-01, -7.545414847665721e-02, -2.608992649805992e+00, -1.118566900102898e-01, -1.118566900102898e-01, 2.017870736603514e-02, 2.081988046676667e-02, 5.041337607877137e-03, -4.252917676274254e-02, 9.546482117878804e-03, 9.546482117878825e-03, -8.076262129911551e-01, -7.960398477514172e-01, -7.999704080870145e-01, -8.033146679329830e-01, -8.016284952247112e-01, -8.016284952247112e-01, -7.878441657103196e-01, -6.283154937511491e-01, -6.730200398842938e-01, -7.178765635762493e-01, -6.950834306265343e-01, -6.950834306265343e-01, -9.064826578316951e-01, -2.514652511636114e-01, -3.151728577632689e-01, -4.442194426244790e-01, -3.753366865569292e-01, -3.753366865569292e-01, -5.790516558938327e-01, -6.413509281809469e-03, -2.297317110192314e-02, -4.358408560840517e-01, -6.663914223008510e-02, -6.663914223008513e-02, 1.878447096189993e-02, 8.701896650509159e-03, 1.286187842900518e-02, -6.040180014698663e-02, 8.040715989846563e-03, 8.040715989846549e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.186423539897886e-08, 3.186194966808501e-08, 3.185496168673221e-08, 3.188890047410336e-08, 3.187066703203711e-08, 3.187066703203711e-08, -3.772364854453723e-06, -3.771465790571642e-06, -3.750125859309415e-06, -3.783241432862085e-06, -3.770790672647877e-06, -3.770790672647877e-06, -4.601053332049284e-03, -4.625769172936976e-03, -5.246567513160854e-03, -5.080685235611406e-03, -5.111506256943141e-03, -5.111506256943141e-03, -6.653908529017742e-01, -6.378291498745021e-01, -2.500785613427354e-03, -1.567809111704357e+00, -1.103069102067227e+00, -1.103069102067227e+00, -1.915658277140799e+04, -1.654740922845808e+04, -9.368072683131257e+01, -9.646425594820609e+04, -5.022295729636927e+04, -5.022295729636928e+04, 2.580487986167849e-07, 2.622146501040595e-07, 2.582204993740170e-07, 2.618979316926894e-07, 2.601676294276964e-07, 2.601676294276964e-07, -8.234294956017020e-05, -7.945299188646487e-05, -8.540815229530288e-05, -8.277579307308986e-05, -7.928175060711634e-05, -7.928175060711634e-05, -7.450838519167279e-03, -4.233664202511951e-03, -1.032010241518568e-02, -8.247153006993834e-03, -6.913470690146932e-03, -6.913470690146932e-03, -4.837558611594999e+00, -6.066808125674001e-01, -6.208739079082321e+00, 3.611132190988980e-05, -3.043536409091168e+00, -3.043536409091168e+00, -2.129726578115055e+05, -1.047384555031413e+05, -2.812583710277289e+05, -2.179940434239656e+01, -1.489637151528199e+05, -1.489637151528199e+05, -5.058745946546833e-03, -6.547572792159131e-03, -6.216403532573448e-03, -5.835036923603265e-03, -6.042559552451201e-03, -6.042559552451201e-03, -4.883125466065493e-03, -1.527139551541836e-02, -1.274688917779379e-02, -1.052544912983320e-02, -1.163900698596339e-02, -1.163900698596339e-02, -3.375881276799805e-03, -2.762506787665529e-01, -1.499637374758486e-01, -5.872485604791657e-02, -9.465297592362240e-02, -9.465297592362241e-02, -2.107650709471115e-02, -1.059722958653175e+02, -4.133077162567969e+01, -7.083642854607156e-02, -1.057336937154419e+01, -1.057336937154419e+01, -6.739269516057850e+03, -5.952326438358237e+06, -6.266215537195374e+05, -1.282041873441626e+01, -1.921384426454302e+05, -1.921384426454308e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
