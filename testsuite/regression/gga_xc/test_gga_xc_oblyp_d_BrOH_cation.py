
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_oblyp_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.108088301647169e+01, -2.108091080764093e+01, -2.108110188902120e+01, -2.108068702108972e+01, -2.108089480349338e+01, -2.108089480349338e+01, -3.543422219350401e+00, -3.543386193652408e+00, -3.542638871050146e+00, -3.544601028460673e+00, -3.543463394018825e+00, -3.543463394018825e+00, -7.357954919868273e-01, -7.356574348730420e-01, -7.336441626497585e-01, -7.387244846033593e-01, -7.377625515022553e-01, -7.377625515022553e-01, -2.193695125370692e-01, -2.213554901957555e-01, -8.476047163888442e-01, -1.790217972990407e-01, -2.135030634821749e-01, -2.135030634821748e-01, -6.591989137400685e-02, -6.596067553337415e-02, -1.069106256520682e-01, -6.019410992803104e-02, -6.083881501823894e-02, -6.083881501823889e-02, -5.115056032484146e+00, -5.114432962246821e+00, -5.115038196537546e+00, -5.114487982167393e+00, -5.114734305390767e+00, -5.114734305390767e+00, -2.162760576084439e+00, -2.173085099150650e+00, -2.163150751592016e+00, -2.172264751547587e+00, -2.168294332517740e+00, -2.168294332517740e+00, -6.219252378613964e-01, -6.483055216707683e-01, -5.809461667144178e-01, -5.805839960681527e-01, -6.291010900399860e-01, -6.291010900399862e-01, -1.378270499538150e-01, -2.281580407281008e-01, -1.315224014508133e-01, -1.876468328444225e+00, -1.529537517742491e-01, -1.529537517742491e-01, -5.431010558536331e-02, -5.799487484068686e-02, -3.798717027632916e-02, -1.106641317231153e-01, -4.619993940789212e-02, -4.619993940789215e-02, -5.949232988924409e-01, -5.978722396364546e-01, -5.968931367487402e-01, -5.960330491516731e-01, -5.964678531363163e-01, -5.964678531363163e-01, -5.775959477502826e-01, -5.438989040122035e-01, -5.546787855489059e-01, -5.642405247543191e-01, -5.593132891708287e-01, -5.593132891708287e-01, -6.794190266663817e-01, -2.781993293726271e-01, -3.209331056752939e-01, -3.917935086950726e-01, -3.542060681635132e-01, -3.542060681635132e-01, -5.028428691771034e-01, -1.078204968230751e-01, -1.089373549655738e-01, -3.704312440821315e-01, -1.199009634220660e-01, -1.199009634220660e-01, -7.433358171163745e-02, -3.350236766011076e-02, -4.384169893769511e-02, -1.165563030437325e-01, -4.343844427346007e-02, -4.343844427346004e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_oblyp_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.531723197868624e+01, -2.531720191811016e+01, -2.531734140765381e+01, -2.531728170206807e+01, -2.531767146809197e+01, -2.531775862250021e+01, -2.531643223240235e+01, -2.531618347238260e+01, -2.531729520659402e+01, -2.531680002940574e+01, -2.531729520659402e+01, -2.531680002940574e+01, -4.137869574637932e+00, -4.137975804777986e+00, -4.137906343588400e+00, -4.138015227149036e+00, -4.138825141356586e+00, -4.139058421142816e+00, -4.137894901173165e+00, -4.138123697648322e+00, -4.137171872515672e+00, -4.138960587618128e+00, -4.137171872515672e+00, -4.138960587618128e+00, -8.327783228905026e-01, -8.353062533967193e-01, -8.314244375213559e-01, -8.344967282908469e-01, -8.093141540686682e-01, -8.061287580318554e-01, -8.136146597755438e-01, -8.146307045160434e-01, -8.313214691264669e-01, -8.010572737498165e-01, -8.313214691264669e-01, -8.010572737498165e-01, -2.409965721012578e-01, -2.424505089446759e-01, -2.428341035150644e-01, -2.447993056752746e-01, -9.536990705849044e-01, -9.796851194049419e-01, -2.026827872875045e-01, -2.034459874791001e-01, -2.089908951179377e-01, -2.148758387837696e-01, -2.089908951179377e-01, -2.148758387837696e-01, -1.916000782287897e-02, -1.935345099099519e-02, -1.956985771779324e-02, -1.977379793939568e-02, -5.801747663860257e-02, -6.005136097870505e-02, -1.476939888143618e-02, -1.477946046898692e-02, -1.683965426638857e-02, -1.355793164235882e-02, -1.683965426638855e-02, -1.355793164235880e-02, -6.284759497789646e+00, -6.283263397090791e+00, -6.287276758855363e+00, -6.285699489046654e+00, -6.284898158715397e+00, -6.283348583885202e+00, -6.287061306142918e+00, -6.285558300063356e+00, -6.286047776803726e+00, -6.284487451074862e+00, -6.286047776803726e+00, -6.284487451074862e+00, -2.287732292176551e+00, -2.287631801088810e+00, -2.305718666316666e+00, -2.305164079627692e+00, -2.270292451748014e+00, -2.274075809573601e+00, -2.285787140828331e+00, -2.289775805918064e+00, -2.310114151618897e+00, -2.300115149892469e+00, -2.310114151618897e+00, -2.300115149892469e+00, -7.471524071681274e-01, -7.457314373979200e-01, -8.267333704657118e-01, -8.272689052197582e-01, -6.821501964186444e-01, -7.006706760105359e-01, -7.242485547998604e-01, -7.419115371767497e-01, -7.739369039873373e-01, -7.448627620065051e-01, -7.739369039873373e-01, -7.448627620065053e-01, -1.641019757730074e-01, -1.637194569859378e-01, -2.581392916569345e-01, -2.582864498923751e-01, -1.513529894775598e-01, -1.535983401257798e-01, -2.398508149563456e+00, -2.397577496994886e+00, -1.770958241252508e-01, -1.712773291109341e-01, -1.770958241252508e-01, -1.712773291109341e-01, -1.245285829366401e-02, -1.279098177516514e-02, -1.421291019424025e-02, -1.440014431496242e-02, -9.941969021016503e-03, -9.902860042621642e-03, -9.973662748417417e-02, -1.006833307834807e-01, -1.156230665540015e-02, -1.225038518930845e-02, -1.156230665540014e-02, -1.225038518930847e-02, -7.735583118441554e-01, -7.759551363746721e-01, -7.627556452431569e-01, -7.651605966053253e-01, -7.663750053450686e-01, -7.687979508835228e-01, -7.695233358061689e-01, -7.719061466316536e-01, -7.679327705277537e-01, -7.703353343706015e-01, -7.679327705277537e-01, -7.703353343706015e-01, -7.559521222891000e-01, -7.578764101700318e-01, -6.234230284792173e-01, -6.252378795332616e-01, -6.564642888591049e-01, -6.586313626630380e-01, -6.930220466372856e-01, -6.948806033369027e-01, -6.740692442817131e-01, -6.759293788018003e-01, -6.740692442817131e-01, -6.759293788018003e-01, -8.633594588482184e-01, -8.648432103698872e-01, -3.069911192942413e-01, -3.072129752943242e-01, -3.518151416497104e-01, -3.525316404571474e-01, -4.488904611545997e-01, -4.503393133907930e-01, -3.950032928362199e-01, -3.947934410448507e-01, -3.950032928362198e-01, -3.947934410448506e-01, -5.762253020574228e-01, -5.788005812234969e-01, -5.688921545223011e-02, -5.712800354390642e-02, -7.958454387037428e-02, -8.127544912918808e-02, -4.341061471921148e-01, -4.381562660598124e-01, -1.248676351905900e-01, -1.235147013713362e-01, -1.248676351905900e-01, -1.235147013713362e-01, -2.383460564899964e-02, -2.388918711859680e-02, -6.791293081180027e-03, -6.214565467488516e-03, -9.767652652472508e-03, -9.793616250336793e-03, -1.168022598038475e-01, -1.178777052124721e-01, -1.021824676240278e-02, -1.171830415098379e-02, -1.021824676240279e-02, -1.171830415098378e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_oblyp_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.402859880128544e-08, 1.587040446902951e-11, -1.402867787976809e-08, -1.402851685478517e-08, 1.587017837751464e-11, -1.402861768434618e-08, -1.402808377883737e-08, 1.586910348256297e-11, -1.402804856688236e-08, -1.402902148235418e-08, 1.587246898789939e-11, -1.402923335929013e-08, -1.402856274897492e-08, 1.587071553760526e-11, -1.402863253760002e-08, -1.402856274897492e-08, 1.587071553760526e-11, -1.402863253760002e-08, -1.830850294418066e-05, 2.043201969445461e-07, -1.831520399834750e-05, -1.830900543280291e-05, 2.043178506668154e-07, -1.831620493627197e-05, -1.832610540040436e-05, 2.042369829881296e-07, -1.833032220150182e-05, -1.828455935488068e-05, 2.041711825912514e-07, -1.828997691861658e-05, -1.831725246756832e-05, 2.042927424299421e-07, -1.830474240826251e-05, -1.831725246756832e-05, 2.042927424299421e-07, -1.830474240826251e-05, -1.056009353654858e-02, 1.226216933036985e-03, -1.063367115435943e-02, -1.055410661442947e-02, 1.233336528973560e-03, -1.064427039820144e-02, -1.064529005000167e-02, 1.415498835534565e-03, -1.051682686406671e-02, -1.027725285419445e-02, 1.355978760019137e-03, -1.032135666271426e-02, -1.099170044513077e-02, 1.480616770351542e-03, -9.594584306521742e-03, -1.099170044513077e-02, 1.480616770351542e-03, -9.594584306521742e-03, -1.071827698391611e+00, 6.898374553907295e-01, -1.058265194462094e+00, -1.060122697999860e+00, 6.507290454097058e-01, -1.038996527559861e+00, -6.102895303832031e-03, 5.700758984286063e-04, -5.938477580002592e-03, -1.834355638147306e+00, 1.997010159733012e+00, -1.817795466775840e+00, -1.446857627913174e+00, 2.977889390568609e+00, -5.111697186170437e+00, -1.446857627913173e+00, 2.977889390568610e+00, -5.111697186170431e+00, -2.224386356053454e+04, 8.676234909521261e-06, -1.863359624460467e+04, -1.974028047382788e+04, 2.852287519017878e-05, -1.618123198278967e+04, -1.066251019569800e+02, 3.693406484860304e+01, -9.172634105616049e+01, -9.376759961197233e+04, 8.336902184317657e-14, -9.766314354349054e+04, -3.085863485914097e+04, 4.558648906348796e-10, -2.028310752134661e+05, -3.085863485914098e+04, 4.558648906348796e-10, -2.028310752134662e+05, -4.186411362926291e-06, 2.404937672321693e-08, -4.189969262119533e-06, -4.189280017773773e-06, 2.402609206663328e-08, -4.192739723370741e-06, -4.186529093018561e-06, 2.404821952303510e-08, -4.190031650308989e-06, -4.188987053365748e-06, 2.402765756871415e-08, -4.192552733668319e-06, -4.187913568709063e-06, 2.403761857962109e-08, -4.191364869719293e-06, -4.187913568709063e-06, 2.403761857962109e-08, -4.191364869719293e-06, -1.374406965524800e-04, 4.392722310012618e-06, -1.374603211068798e-04, -1.346438448929106e-04, 4.226420743017038e-06, -1.347374874023323e-04, -1.376437054357868e-04, 4.519596883565824e-06, -1.377803898918538e-04, -1.352188080866946e-04, 4.367237055145033e-06, -1.352999577586387e-04, -1.357882621678069e-04, 4.245084705702272e-06, -1.358081721845920e-04, -1.357882621678069e-04, 4.245084705702272e-06, -1.358081721845920e-04, -2.160469561552940e-02, 2.418642670278684e-03, -2.178956074736931e-02, -1.967074598675588e-02, 1.589706867899556e-03, -1.971006992282498e-02, -2.968889173740185e-02, 3.650428867911093e-03, -2.738535861966973e-02, -3.228442731767234e-02, 2.995586289889170e-03, -2.903127114437586e-02, -1.959402345828034e-02, 2.335160610643722e-03, -2.259451463520988e-02, -1.959402345828035e-02, 2.335160610643722e-03, -2.259451463520987e-02, -3.763588662982274e+00, 6.901442744751003e+00, -3.837442066397117e+00, -7.377695667149655e-01, 6.793540555820781e-01, -7.384524523137170e-01, -4.926021394074699e+00, 8.776496869730632e+00, -4.891925045072676e+00, -2.517181761914779e-04, 4.869823148103605e-06, -2.521659534387348e-04, -2.907251654769182e+00, 4.172488367637721e+00, -3.407004832339797e+00, -2.907251654769182e+00, 4.172488367637721e+00, -3.407004832339797e+00, -2.360492751864891e+05, 1.067834941887728e-19, -2.029055726471039e+05, -1.104935531191700e+05, 2.954278018717462e-14, -1.034766022964550e+05, -4.154314602344939e+05, 1.536154380315558e-20, -3.629324055314498e+05, -2.004265810802143e+01, 2.279133966810191e+01, -1.942264225260832e+01, -3.214190518141492e+05, 4.550747427644936e-16, -1.283602861376305e+05, -3.214190518141490e+05, 4.550747427644936e-16, -1.283602861376305e+05, -2.948941716044233e-02, 2.360567133081836e-03, -2.917311457116004e-02, -2.768865516460631e-02, 2.430112781570391e-03, -2.741036878750907e-02, -2.822288503035440e-02, 2.405372821498795e-03, -2.793685390606996e-02, -2.874043894933822e-02, 2.385206860012143e-03, -2.843524078869400e-02, -2.847272361970905e-02, 2.395275658841816e-03, -2.817722866026526e-02, -2.847272361970905e-02, 2.395275658841816e-03, -2.817722866026526e-02, -3.397297341304618e-02, 2.711123096530591e-03, -3.361938562171313e-02, -3.598723208935517e-02, 5.811876930582206e-03, -3.573361500697279e-02, -3.423038174499648e-02, 4.623212587860045e-03, -3.397124591160019e-02, -3.319214950975288e-02, 3.716914066115917e-03, -3.290178162383969e-02, -3.369719914836544e-02, 4.150513693453447e-03, -3.339688996972278e-02, -3.369719914836544e-02, 4.150513693453447e-03, -3.339688996972278e-02, -1.616175996598651e-02, 1.249738298768967e-03, -1.616071041708773e-02, -3.932758694589115e-01, 2.544789213214225e-01, -3.934312809034110e-01, -2.535160783869232e-01, 1.134799525863590e-01, -2.535155438481829e-01, -1.328492396203999e-01, 3.138667320033968e-02, -1.315189272927864e-01, -1.857251473788440e-01, 6.026227096355874e-02, -1.866118840406213e-01, -1.857251473788442e-01, 6.026227096355875e-02, -1.866118840406215e-01, -4.931660961595852e-02, 8.739536751300207e-03, -4.885103927764660e-02, -1.113875673126247e+02, 3.665849602854054e+01, -1.093087319973583e+02, -3.893607369454595e+01, 3.174431895127885e+01, -3.626744924934968e+01, -1.739791382584964e-01, 3.738568187170309e-02, -1.692354157604185e-01, -9.836734670127990e+00, 1.339390211302462e+01, -1.029300989785744e+01, -9.836734670127997e+00, 1.339390211302461e+01, -1.029300989785746e+01, -7.464760438875652e+03, 7.308940739585990e-03, -6.781397432140679e+03, -6.977949633027466e+06, 1.637042522349295e-72, -8.119770628086507e+06, -7.830234167561427e+05, 1.895919026629125e-30, -6.669230134079017e+05, -1.229685866048295e+01, 1.554797820283555e+01, -1.191026589711008e+01, -4.601709274377653e+05, 7.715169642386172e-18, -1.666415185910787e+05, -4.601709274377662e+05, 7.715169642385829e-18, -1.666415185910792e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
