
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.079412081898238e+01, -8.079337486452459e+01, -8.079244239085433e+01, -8.080460855030643e+01, -8.079370740604031e+01, -8.079370740604031e+01, -3.566932115370369e+00, -3.566958269794841e+00, -3.567824031672322e+00, -3.567085620614084e+00, -3.566960694026462e+00, -3.566960694026462e+00, -7.222920105173842e-01, -7.221761267581916e-01, -7.224346566519888e-01, -7.266967576343348e-01, -7.222463547329711e-01, -7.222463547329711e-01, -2.344218111965038e-01, -2.355018220425970e-01, -8.421908008317446e-01, -1.983194027058436e-01, -2.347156332623072e-01, -2.347156332623072e-01, -6.964495690181317e-03, -8.902919817309275e-03, -1.005357459000450e-01, 1.940475986540929e-02, -7.765125843230931e-03, -7.765125843230931e-03, -5.521370531847230e+00, -5.523546975806394e+00, -5.521594004927531e+00, -5.523286339148918e+00, -5.522486096114390e+00, -5.522486096114390e+00, -2.076889413923613e+00, -2.086975466207800e+00, -2.076591740494409e+00, -2.084288437275528e+00, -2.084586555198610e+00, -2.084586555198610e+00, -6.120361075530800e-01, -6.528558316959321e-01, -5.835850901661650e-01, -5.977679318918979e-01, -6.321490232934515e-01, -6.321490232934515e-01, -1.719055318231434e-01, -2.597250573514718e-01, -1.661832891201849e-01, -2.004542379035940e+00, -1.793347352818759e-01, -1.793347352818759e-01, 2.179145991332994e-02, 1.584607608889600e-02, 3.936623576227483e-02, -1.213793198770290e-01, 2.490438168407924e-02, 2.490438168407926e-02, -6.219186038613059e-01, -6.178900126891370e-01, -6.190218576064127e-01, -6.200864931990603e-01, -6.195280390921016e-01, -6.195280390921016e-01, -6.028544606033642e-01, -5.465379692163201e-01, -5.591854454664005e-01, -5.726829758948787e-01, -5.654558422847419e-01, -5.654558422847419e-01, -6.836240686773267e-01, -3.043707004275519e-01, -3.380587593530266e-01, -3.951286612376009e-01, -3.638261025260460e-01, -3.638261025260458e-01, -4.983238442128285e-01, -1.012462843210100e-01, -1.193891663886456e-01, -3.678207609968485e-01, -1.399698545161330e-01, -1.399698545161330e-01, -1.944253875014390e-02, 7.738151152332949e-02, 4.832646832282354e-02, -1.308473452496151e-01, 3.545268896407548e-02, 3.545268896407552e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.438617480352899e+01, -2.438530480631288e+01, -2.438260412030288e+01, -2.439682664851806e+01, -2.438570612855530e+01, -2.438570612855530e+01, -5.053966302506320e+00, -5.054014424446866e+00, -5.055574190670970e+00, -5.054115570951160e+00, -5.054015787948670e+00, -5.054015787948670e+00, -8.169435440592756e-01, -8.149574254006329e-01, -7.593404237937332e-01, -7.669308429742698e-01, -8.162252922181480e-01, -8.162252922181480e-01, -2.289318311710613e-01, -2.332979617141225e-01, -1.011918475041742e+00, -1.497080663448555e-01, -2.302665792625347e-01, -2.302665792625347e-01, 5.012751160035941e-02, 4.904062737399648e-02, -1.038632611642071e-02, 5.663095094610926e-02, 4.922320182031648e-02, 4.922320182031648e-02, -7.860939826019406e+00, -7.859867231397596e+00, -7.860841071397676e+00, -7.860006992718083e+00, -7.860376453410834e+00, -7.860376453410834e+00, -2.296552428066218e+00, -2.328119167149188e+00, -2.270200179535013e+00, -2.295039534688371e+00, -2.351505247848063e+00, -2.351505247848063e+00, -7.609250899576215e-01, -8.623538115181346e-01, -7.202213925673239e-01, -7.783842163336897e-01, -7.953104493524075e-01, -7.953104493524075e-01, -9.268132723911987e-02, -2.098080586138336e-01, -9.385514805396600e-02, -2.785492861453303e+00, -1.206591821735999e-01, -1.206591821735999e-01, 5.698689687283411e-02, 5.714317402690110e-02, 6.467518765954887e-02, -4.112303612314819e-02, 5.970236527000373e-02, 5.970236527000372e-02, -8.288950494318145e-01, -8.158209450142262e-01, -8.203042788441292e-01, -8.238929494821060e-01, -8.220814159242154e-01, -8.220814159242154e-01, -8.035256869684776e-01, -6.388740563524365e-01, -6.855613448589941e-01, -7.294989460209081e-01, -7.072349846265786e-01, -7.072349846265786e-01, -9.035223591085745e-01, -2.711530403963214e-01, -3.339053831060266e-01, -4.504779184714041e-01, -3.890553158353678e-01, -3.890553158353677e-01, -5.763826914657696e-01, -1.788284722657296e-03, -2.761191874160521e-02, -4.366968372093912e-01, -7.276648221600482e-02, -7.276648221600487e-02, 4.701416475275162e-02, 4.826600418691522e-02, 5.752325084204268e-02, -7.006744439470067e-02, 6.270875652216920e-02, 6.270875652216919e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.526228366414759e-07, -3.526252512787590e-07, -3.526305403285175e-07, -3.525911145881581e-07, -3.526241558671505e-07, -3.526241558671505e-07, 4.855373206961788e-06, 4.856093682025783e-06, 4.875609201867849e-06, 4.840377646885451e-06, 4.855710207882670e-06, 4.855710207882670e-06, -4.558301064650017e-03, -4.590793101436892e-03, -5.469722228329639e-03, -5.289577776572746e-03, -4.570082996469178e-03, -4.570082996469178e-03, -6.521628779747026e-01, -6.267148434918179e-01, -1.927102545259718e-03, -1.831922879789747e+00, -6.444704824954384e-01, -6.444704824954384e-01, -4.255241545146107e+03, -3.758440074958537e+03, -5.963616429839596e+01, -2.368228249102078e+04, -3.895925862777289e+03, -3.895925862777289e+03, 1.583944606400930e-06, 1.580845338613814e-06, 1.583627286053126e-06, 1.581217664832465e-06, 1.582360848056994e-06, 1.582360848056994e-06, -4.915247872191005e-05, -4.655904048322728e-05, -5.103292389842457e-05, -4.895782972667528e-05, -4.500019940588041e-05, -4.500019940588041e-05, -6.424697376438450e-03, -5.817633286363923e-04, -8.273783463906087e-03, -3.934695890424055e-03, -5.120921462368045e-03, -5.120921462368045e-03, -4.814622098634013e+00, -5.868865131592008e-01, -5.093373664491597e+00, 1.260019939773078e-04, -3.109205538904845e+00, -3.109205538904845e+00, -2.602455636228002e+04, -1.952067363756595e+04, -5.186377623215073e+04, -2.195367620833639e+01, -2.704726930503084e+04, -2.704726930503082e+04, 6.198580090965904e-03, -7.918943219005869e-04, 6.250008804624156e-04, 2.261814194648267e-03, 1.360337138653040e-03, 1.360337138653031e-03, 1.000335713799222e-02, -1.348580422436649e-02, -1.032287747803805e-02, -7.218214481215903e-03, -8.845428223197459e-03, -8.845428223197446e-03, -4.222831949632865e-04, -2.649149741847593e-01, -1.446416554983690e-01, -5.781158625131608e-02, -9.259700096391853e-02, -9.259700096391857e-02, -2.063530516199027e-02, -7.329277688570653e+01, -2.965583777659506e+01, -7.295514751905216e-02, -9.751984380443929e+00, -9.751984380443927e+00, -2.621372558257187e+03, 2.967380875309281e+05, -7.087070866704005e+04, -1.156878274198382e+01, -4.378193555188477e+04, -4.378193555188490e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
