
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_gga1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.129751470727832e+01, -2.129758434913997e+01, -2.129789533887342e+01, -2.129685920418750e+01, -2.129740190950492e+01, -2.129740190950492e+01, -3.519999015878545e+00, -3.520008825298907e+00, -3.520321723441013e+00, -3.520435375882457e+00, -3.520094026580163e+00, -3.520094026580163e+00, -7.242774118466667e-01, -7.238581163008554e-01, -7.170687008216337e-01, -7.220029105297673e-01, -7.204038900319134e-01, -7.204038900319134e-01, -2.399702127964529e-01, -2.399603620065670e-01, -8.347632235952229e-01, -2.236910121982284e-01, -2.271515305130068e-01, -2.271515305130068e-01, -1.159029366676644e-02, -1.226763963875043e-02, -8.309739031861696e-02, -6.343750574374449e-03, -8.138230681581114e-03, -8.138230681581119e-03, -5.273963909627629e+00, -5.275513734553138e+00, -5.274035981404008e+00, -5.275404112126512e+00, -5.274748613199725e+00, -5.274748613199725e+00, -2.067310503571279e+00, -2.077646222687913e+00, -2.066927939850121e+00, -2.075719217589952e+00, -2.073583895811526e+00, -2.073583895811526e+00, -6.294253499551729e-01, -6.779088749002764e-01, -5.857028613226332e-01, -6.027302038924562e-01, -6.383824602065703e-01, -6.383824602065703e-01, -1.948751220585599e-01, -2.731986036052463e-01, -1.840615082898139e-01, -1.989999569725619e+00, -2.009724186506581e-01, -2.009724186506581e-01, -4.792593381314048e-03, -6.189222354106217e-03, -4.629848880164351e-03, -1.323034547419378e-01, -5.660232861535877e-03, -5.660232861535882e-03, -6.330990750270804e-01, -6.251711639183312e-01, -6.269204774856086e-01, -6.289938367580165e-01, -6.278598829477485e-01, -6.278598829477485e-01, -6.213906023484955e-01, -5.406211514909521e-01, -5.585205555311687e-01, -5.782177697164482e-01, -5.679518795360406e-01, -5.679518795360406e-01, -7.095479186868472e-01, -3.083451954360127e-01, -3.340225086169740e-01, -3.931991589764085e-01, -3.576426167976746e-01, -3.576426167976746e-01, -5.008043851793770e-01, -7.949210235646391e-02, -1.095939010354171e-01, -3.751161942634828e-01, -1.569817089062897e-01, -1.569817089062897e-01, -1.702998019931030e-02, -1.526364872138997e-03, -3.327333474464875e-03, -1.503590922657416e-01, -5.204717048094662e-03, -5.204717048094647e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_gga1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.930913832079525e+01, -2.930925396038439e+01, -2.930973882559443e+01, -2.930801882543572e+01, -2.930892428080287e+01, -2.930892428080287e+01, -4.701874890799787e+00, -4.701956510855790e+00, -4.703952119425373e+00, -4.701363801731309e+00, -4.702085548296972e+00, -4.702085548296972e+00, -8.808023901146679e-01, -8.783180987276104e-01, -8.075337061067075e-01, -8.165870865521255e-01, -8.168701150827349e-01, -8.168701150827349e-01, -1.777300986816938e-01, -1.852688127746665e-01, -1.037255696859850e+00, -1.203516735784042e-01, -1.355484963757575e-01, -1.355484963757576e-01, -1.583164460399239e-02, -1.675791674743428e-02, -1.035110564316222e-01, -8.633650292629401e-03, -1.109374949924584e-02, -1.109374949924585e-02, -7.208354442648981e+00, -7.210501737044759e+00, -7.208454668717589e+00, -7.210350534772827e+00, -7.209444225102550e+00, -7.209444225102550e+00, -2.243768612176821e+00, -2.279005856215646e+00, -2.186513640543781e+00, -2.218254524203801e+00, -2.290278870278711e+00, -2.290278870278711e+00, -8.110211819178383e-01, -9.000961589329586e-01, -7.482053455441270e-01, -7.925240260045915e-01, -8.261236732902603e-01, -8.261236732902603e-01, -1.404905367736791e-01, -1.446094155857514e-01, -1.417325068399866e-01, -2.683079632927586e+00, -1.166056221365224e-01, -1.166056221365224e-01, -6.507320860241742e-03, -8.420937730385821e-03, -6.278480410102508e-03, -1.337768015460636e-01, -7.690426380987908e-03, -7.690426380987940e-03, -8.551653130702465e-01, -8.298044883609507e-01, -8.372212421588695e-01, -8.447627317446768e-01, -8.408341068043805e-01, -8.408341068043805e-01, -8.378320339773440e-01, -6.573336515122264e-01, -7.090865820747084e-01, -7.500528630117081e-01, -7.302102270617740e-01, -7.302102270617740e-01, -9.410783431231454e-01, -1.970586106977553e-01, -2.819119848142643e-01, -4.641270313346842e-01, -3.726772824155698e-01, -3.726772824155697e-01, -6.055763553824089e-01, -1.004214243188939e-01, -1.269420638592113e-01, -4.611591861758338e-01, -1.273363903066000e-01, -1.273363903066000e-01, -2.328253393024610e-02, -2.055432299763671e-03, -4.504146501008261e-03, -1.293517173642273e-01, -7.066318603297842e-03, -7.066318603297817e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_gga1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.392289718955781e-09, 2.392384254450774e-09, 2.392603030887360e-09, 2.391200563244487e-09, 2.391964151155483e-09, 2.391964151155483e-09, 4.917581179880401e-07, 4.929297523414466e-07, 5.199806008984883e-07, 4.727402400054232e-07, 4.931350217327851e-07, 4.931350217327851e-07, -2.566298977819459e-03, -2.616783267502293e-03, -4.070375369272330e-03, -3.885622815696125e-03, -3.880328886268507e-03, -3.880328886268507e-03, -1.042012696637857e+00, -9.760624008638403e-01, -1.152158954526692e-03, -2.473133839316826e+00, -1.834810254124808e+00, -1.834810254124807e+00, -8.734251074171947e+00, -9.321478804173541e+00, -7.247533857742111e+00, -7.162863475080878e+00, -9.477435325290253e+00, -9.477435325296900e+00, 7.952171466795012e-07, 8.009913018542522e-07, 7.954510533720974e-07, 8.005489474286556e-07, 7.981615961480023e-07, 7.981615961480023e-07, -5.704871861041329e-05, -5.385246025043652e-05, -6.200841335636747e-05, -5.904002471124172e-05, -5.293315389989370e-05, -5.293315389989370e-05, -2.420910626736793e-03, 1.095437869961158e-03, -3.918357557965449e-03, -1.729873434580667e-03, -2.098476601799483e-03, -2.098476601799483e-03, -4.304067110966983e+00, -1.008588571659128e+00, -4.886564679808174e+00, 5.825063673189778e-05, -4.092118952714101e+00, -4.092118952714101e+00, -9.039260258209808e+00, -8.396034631902607e+00, -5.037257718488393e+01, -7.915945298778322e+00, -2.417174077708902e+01, -2.417174077708468e+01, 2.536662315407166e-02, 1.574663329062174e-03, 5.306428845983692e-03, 1.111027861652427e-02, 7.782573502473309e-03, 7.782573502473309e-03, 5.752856149016108e-02, -9.041607627369632e-03, -5.297727258493662e-03, -3.710175746743800e-03, -4.275687534326279e-03, -4.275687534326279e-03, 5.766268540555484e-04, -4.487174595509687e-01, -2.084307771495139e-01, -4.272369208263625e-02, -9.970400525789103e-02, -9.970400525789132e-02, -1.307942795899883e-02, -6.610477075639738e+00, -6.689893718035378e+00, -4.294065530936726e-02, -7.818342130695970e+00, -7.818342130695938e+00, -7.563190517777831e+00, -3.447662107465626e+01, -1.822296953786629e+01, -8.166376730352145e+00, -3.013871450455030e+01, -3.013871450452926e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
