
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_gga1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.129751470726401e+01, -2.129758434915342e+01, -2.129789533900178e+01, -2.129685920512285e+01, -2.129740191401218e+01, -2.129740191401218e+01, -3.519999047971629e+00, -3.520008861632341e+00, -3.520321754254103e+00, -3.520435415401058e+00, -3.520094419205579e+00, -3.520094419205579e+00, -7.243075644898330e-01, -7.239033741907247e-01, -7.171588280234810e-01, -7.220127357649032e-01, -7.294649496073480e-01, -7.294649496073480e-01, -2.399247990868846e-01, -2.399131256637885e-01, -8.355336462956314e-01, -2.237029050531571e-01, -2.214117112633074e-01, -2.214117112633074e-01, -1.174153125680406e-02, -1.247056882639487e-02, -8.355346999229786e-02, -6.350824307972574e-03, -1.500448124965536e-02, -1.500448124965536e-02, -5.273964059117433e+00, -5.275513894624369e+00, -5.274036137945036e+00, -5.275404262679792e+00, -5.274748770391056e+00, -5.274748770391056e+00, -2.067310553696513e+00, -2.077646341813506e+00, -2.066945073587179e+00, -2.075735896741982e+00, -2.073666345557511e+00, -2.073666345557511e+00, -6.294273740486501e-01, -6.779098513799053e-01, -5.860068866094827e-01, -6.029709947016718e-01, -6.389992029618698e-01, -6.389992029618700e-01, -1.948700635799641e-01, -2.731984081429870e-01, -1.843340568222356e-01, -1.989999752998411e+00, -2.000725420132988e-01, -2.000725420132988e-01, -4.821828829807610e-03, -6.194771912266722e-03, -4.692506789175912e-03, -1.323127186532869e-01, -7.682861860607453e-03, -7.682861860607462e-03, -6.331036886481787e-01, -6.251757234821457e-01, -6.269252527477346e-01, -6.289983163738733e-01, -6.278645185327923e-01, -6.278645185327923e-01, -6.213923148681837e-01, -5.406253374037889e-01, -5.585257354231248e-01, -5.782206881402844e-01, -5.679549653926695e-01, -5.679549653926695e-01, -7.095506349864565e-01, -3.083444682528384e-01, -3.340272580329334e-01, -3.932029794579302e-01, -3.576458067979233e-01, -3.576458067979233e-01, -5.008180180334686e-01, -7.949920133014386e-02, -1.097644664819433e-01, -3.751530132645718e-01, -1.568287977306127e-01, -1.568287977306126e-01, -1.710056347469694e-02, -1.526391626158959e-03, -3.381726388287318e-03, -1.503986881167512e-01, -6.755042303671703e-03, -6.755042303671693e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_gga1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.930915536570418e+01, -2.930912127565755e+01, -2.930928961382393e+01, -2.930921830657352e+01, -2.930968320170062e+01, -2.930979444855774e+01, -2.930817406652363e+01, -2.930786357935537e+01, -2.930924451434047e+01, -2.930860400972632e+01, -2.930924451434047e+01, -2.930860400972632e+01, -4.701629506726355e+00, -4.702120012448574e+00, -4.701697973715379e+00, -4.702214751927771e+00, -4.703641295343018e+00, -4.704262675895448e+00, -4.701027364301578e+00, -4.701699898748751e+00, -4.700649206571594e+00, -4.703519835594395e+00, -4.700649206571594e+00, -4.703519835594395e+00, -8.742925546830382e-01, -8.871323318120766e-01, -8.702625880121199e-01, -8.861061349161775e-01, -8.197637607721699e-01, -7.948765922481057e-01, -8.124692219854556e-01, -8.206578055323307e-01, -9.185020140314217e-01, -6.737823746339805e-01, -9.185020140314217e-01, -6.737823746339805e-01, -1.836381469700668e-01, -1.730821001507514e-01, -1.908467620757518e-01, -1.811894049748215e-01, -1.000861727226427e+00, -1.069649244953230e+00, -1.239328911506485e-01, -1.168444916260373e-01, -6.167146045143459e-02, -4.372562813782342e-01, -6.167146045143435e-02, -4.372562813782352e-01, -1.241832043439122e-02, -1.903226274733042e-02, -1.269970512572943e-02, -2.053004493765427e-02, -9.458982857403402e-02, -1.116830208140216e-01, -9.188751961676249e-03, -8.068699423348655e-03, -2.657729382936290e-02, 1.563428818767584e-02, -2.657729382936286e-02, 1.563428818767567e-02, -7.209221483749241e+00, -7.207487189439627e+00, -7.211410505120107e+00, -7.209592713158850e+00, -7.209349868866636e+00, -7.207559229292620e+00, -7.211220957308810e+00, -7.209479897686077e+00, -7.210344096332951e+00, -7.208544105527708e+00, -7.210344096332951e+00, -7.208544105527708e+00, -2.243842072709637e+00, -2.243694707093294e+00, -2.279506840467302e+00, -2.278504209700569e+00, -2.176077785548146e+00, -2.196865434443126e+00, -2.207972892666971e+00, -2.228452133139596e+00, -2.312363676585937e+00, -2.267752579402539e+00, -2.312363676585937e+00, -2.267752579402539e+00, -8.118380910154214e-01, -8.101992023538498e-01, -8.994735661965714e-01, -9.007185671016754e-01, -7.337881396162486e-01, -7.619862098261495e-01, -7.816068593099267e-01, -8.031806368269357e-01, -8.448316959883952e-01, -8.065277284677799e-01, -8.448316959883952e-01, -8.065277284677801e-01, -1.443834115799862e-01, -1.366215851294666e-01, -1.460984457729645e-01, -1.431394974602233e-01, -1.501043359565184e-01, -1.333030365330902e-01, -2.683617536891586e+00, -2.682541557126266e+00, -1.587338594742328e-01, -7.985648007285998e-02, -1.587338594742328e-01, -7.985648007285998e-02, -5.473957032307218e-03, -7.500230085350604e-03, -7.924978620315451e-03, -8.909209837785577e-03, -4.779163761437306e-03, -7.690458346190658e-03, -1.320795921746832e-01, -1.354602620717796e-01, 3.085306990886065e-03, -1.549399727706048e-02, 3.085306990886086e-03, -1.549399727706052e-02, -8.535471671968461e-01, -8.567719899669209e-01, -8.281194117269248e-01, -8.314821373455213e-01, -8.354920001294858e-01, -8.389419590928104e-01, -8.431065904840732e-01, -8.464096218335029e-01, -8.391378092884856e-01, -8.425214546987931e-01, -8.391378092884856e-01, -8.425214546987931e-01, -8.366826878340214e-01, -8.389769485134102e-01, -6.554859373119557e-01, -6.591693932448001e-01, -7.071537267673633e-01, -7.110035303833516e-01, -7.487739418497482e-01, -7.513266673535438e-01, -7.288779924163851e-01, -7.315366731978021e-01, -7.288779924163851e-01, -7.315366731978021e-01, -9.397731537585881e-01, -9.423750909875704e-01, -1.980247224722802e-01, -1.961230113921038e-01, -2.809031191407790e-01, -2.829824895887321e-01, -4.628484680512082e-01, -4.653984588931958e-01, -3.720661725703588e-01, -3.732731737693176e-01, -3.720661725703588e-01, -3.732731737693176e-01, -6.026198170220793e-01, -6.084769684950270e-01, -9.931368131678070e-02, -1.015176785068651e-01, -1.230389269375240e-01, -1.305332813965016e-01, -4.573820835922061e-01, -4.648366767476066e-01, -1.461854733018669e-01, -1.086547710095527e-01, -1.461854733018666e-01, -1.086547710095523e-01, -2.062466156210525e-02, -2.584001630257409e-02, -2.034025351079005e-03, -2.076706825252436e-03, -3.287116971865961e-03, -5.645977870966941e-03, -1.298039371109571e-01, -1.288709665419507e-01, 1.867178371893127e-03, -1.375376397877403e-02, 1.867178371893092e-03, -1.375376397877404e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_gga1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_gga1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.784556438041469e-09, 0.000000000000000e+00, 4.784602436478158e-09, 4.784777301949266e-09, 0.000000000000000e+00, 4.784759713728032e-09, 4.785084766236680e-09, 0.000000000000000e+00, 4.785327354553104e-09, 4.782639586118500e-09, 0.000000000000000e+00, 4.782162649645811e-09, 4.784743756976595e-09, 0.000000000000000e+00, 4.783112746353177e-09, 4.784743756976595e-09, 0.000000000000000e+00, 4.783112746353177e-09, 9.747868056913509e-07, 0.000000000000000e+00, 9.922462468831541e-07, 9.765751365747052e-07, 0.000000000000000e+00, 9.951446042528226e-07, 1.031520095548051e-06, 0.000000000000000e+00, 1.048400749774875e-06, 9.358645969095914e-07, 0.000000000000000e+00, 9.550950301996901e-07, 9.671341813814543e-07, 0.000000000000000e+00, 1.005354634248400e-06, 9.671341813814543e-07, 0.000000000000000e+00, 1.005354634248400e-06, -5.473616914482537e-03, 0.000000000000000e+00, -4.796763825621084e-03, -5.653943018256252e-03, 0.000000000000000e+00, -4.820796694547596e-03, -7.535689974538981e-03, 0.000000000000000e+00, -8.755057161012535e-03, -7.965852865404357e-03, 0.000000000000000e+00, -7.577522164584956e-03, -2.353797345952196e-03, 0.000000000000000e+00, -1.389240733807294e-02, -2.353797345952196e-03, 0.000000000000000e+00, -1.389240733807294e-02, -2.097198725500091e+00, 0.000000000000000e+00, -2.053885448442366e+00, -1.978505520934726e+00, 0.000000000000000e+00, -1.907429756600273e+00, -3.180797261438566e-03, 0.000000000000000e+00, -1.561411425838802e-03, -4.915014452695508e+00, 0.000000000000000e+00, -4.971977968899353e+00, -3.269979527590153e+00, 0.000000000000000e+00, 1.826664289889773e+01, -3.269979527590154e+00, 0.000000000000000e+00, 1.826664289889777e+01, -8.427738376353178e+00, 0.000000000000000e+00, -2.481610676034180e+01, -7.565911121782978e+00, 0.000000000000000e+00, -2.743735822628361e+01, -1.101618967653613e+01, 0.000000000000000e+00, -1.738641940774037e+01, -1.714919099214379e+01, 0.000000000000000e+00, -1.139554033547044e+01, -4.760530900130852e+01, 0.000000000000000e+00, 2.983633536212507e+02, -4.760530900132225e+01, 0.000000000000000e+00, 2.983633536216356e+02, 1.590146663108154e-06, 0.000000000000000e+00, 1.590721954211165e-06, 1.601918180387533e-06, 0.000000000000000e+00, 1.602046621478107e-06, 1.590756622536110e-06, 0.000000000000000e+00, 1.591047346580054e-06, 1.600812291545459e-06, 0.000000000000000e+00, 1.601383516321983e-06, 1.596237735768938e-06, 0.000000000000000e+00, 1.596408289873052e-06, 1.596237735768938e-06, 0.000000000000000e+00, 1.596408289873052e-06, -1.140816847528133e-04, 0.000000000000000e+00, -1.141132656239626e-04, -1.076058696232984e-04, 0.000000000000000e+00, -1.078041629714882e-04, -1.259286194668862e-04, 0.000000000000000e+00, -1.221138829634971e-04, -1.199399013603256e-04, 0.000000000000000e+00, -1.162301348896257e-04, -1.017449743151120e-04, 0.000000000000000e+00, -1.100521239388179e-04, -1.017449743151120e-04, 0.000000000000000e+00, -1.100521239388179e-04, -4.796599873611824e-03, 0.000000000000000e+00, -4.888027486030106e-03, 1.943419491849811e-03, 0.000000000000000e+00, 2.443481822779731e-03, -9.858417655181815e-03, 0.000000000000000e+00, -6.128945980473571e-03, -4.579160919822541e-03, 0.000000000000000e+00, -2.492463682540040e-03, -3.003622580759616e-03, 0.000000000000000e+00, -5.721287711030488e-03, -3.003622580759588e-03, 0.000000000000000e+00, -5.721287711030469e-03, -8.311578014101535e+00, 0.000000000000000e+00, -8.895289508149030e+00, -2.015728169377210e+00, 0.000000000000000e+00, -2.018371782789684e+00, -8.575737098280532e+00, 0.000000000000000e+00, -1.070246223424806e+01, 1.163383800567830e-04, 0.000000000000000e+00, 1.166647834161833e-04, -6.117470106999403e+00, 0.000000000000000e+00, -9.825165378155035e+00, -6.117470106999403e+00, 0.000000000000000e+00, -9.825165378155035e+00, -1.546618537289126e+01, 0.000000000000000e+00, -2.018193544846527e+01, -1.665582185558855e+01, 0.000000000000000e+00, -1.689175444681791e+01, -2.074180844511498e+01, 0.000000000000000e+00, -1.720701691835839e+02, -1.603171997039340e+01, 0.000000000000000e+00, -1.563698509113245e+01, 1.903496803465884e+02, 0.000000000000000e+00, -1.335515407286858e+02, 1.903496803459945e+02, 0.000000000000000e+00, -1.335515407287377e+02, 5.005068708014133e-02, 0.000000000000000e+00, 5.140012980234780e-02, 2.804964337480927e-03, 0.000000000000000e+00, 3.489792326795312e-03, 1.014625382112515e-02, 0.000000000000000e+00, 1.107433666855290e-02, 2.174907751133899e-02, 0.000000000000000e+00, 2.268327947133589e-02, 1.508940249569607e-02, 0.000000000000000e+00, 1.603406421284001e-02, 1.508940249569607e-02, 0.000000000000000e+00, 1.603406421284001e-02, 1.154611307379807e-01, 0.000000000000000e+00, 1.146275498162427e-01, -1.849660166725792e-02, 0.000000000000000e+00, -1.767737687513864e-02, -1.096434328726453e-02, 0.000000000000000e+00, -1.023432077980043e-02, -7.616824659291843e-03, 0.000000000000000e+00, -7.227002461262882e-03, -8.760443835088321e-03, 0.000000000000000e+00, -8.345920150446762e-03, -8.760443835088321e-03, 0.000000000000000e+00, -8.345920150446762e-03, 8.978895690074112e-04, 0.000000000000000e+00, 1.411702095470364e-03, -9.000212978111346e-01, 0.000000000000000e+00, -8.947516859838585e-01, -4.240901001720721e-01, 0.000000000000000e+00, -4.096423350569119e-01, -8.713719623580736e-02, 0.000000000000000e+00, -8.379304292347273e-02, -2.003803190291094e-01, 0.000000000000000e+00, -1.984445913631469e-01, -2.003803190291095e-01, 0.000000000000000e+00, -1.984445913631469e-01, -2.718793299329536e-02, 0.000000000000000e+00, -2.516535442192324e-02, -1.284150065918676e+01, 0.000000000000000e+00, -1.359181710002909e+01, -1.151118604672292e+01, 0.000000000000000e+00, -1.506180190799101e+01, -9.246815134624778e-02, 0.000000000000000e+00, -7.971199886103213e-02, -1.111188401661255e+01, 0.000000000000000e+00, -1.957308778568073e+01, -1.111188401661256e+01, 0.000000000000000e+00, -1.957308778568078e+01, -1.065564292146164e+01, 0.000000000000000e+00, -1.914456422084482e+01, -3.210107136404708e+00, 0.000000000000000e+00, -1.672545819497898e+02, -6.386842517317133e+00, 0.000000000000000e+00, -6.209651818847470e+01, -1.582445332280493e+01, 0.000000000000000e+00, -1.679656668615278e+01, 1.628635809970856e+02, 0.000000000000000e+00, -1.161667103662031e+02, 1.628635809971568e+02, 0.000000000000000e+00, -1.161667103661415e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
