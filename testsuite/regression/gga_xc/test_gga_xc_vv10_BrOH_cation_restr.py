
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_vv10_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.130928618929884e+01, -2.130929918399983e+01, -2.130944951636207e+01, -2.130925427517203e+01, -2.130934341395446e+01, -2.130934341395446e+01, -3.597014089444461e+00, -3.596960693848083e+00, -3.595813181954020e+00, -3.598483348109318e+00, -3.597035802264821e+00, -3.597035802264821e+00, -7.504759168179862e-01, -7.504348093855151e-01, -7.505079226340201e-01, -7.556149106695421e-01, -7.537683945032611e-01, -7.537683945032611e-01, -2.291320830265465e-01, -2.310384179994775e-01, -8.625527663458621e-01, -1.896695915464219e-01, -2.043106276003662e-01, -2.043106276003662e-01, -2.405969824345806e-02, -2.468232084954152e-02, -7.579755184690561e-02, -1.744623183710532e-02, -1.954661919668594e-02, -1.954661919668593e-02, -5.132714159589089e+00, -5.131525283992160e+00, -5.132672895527653e+00, -5.131623089658614e+00, -5.132103597802427e+00, -5.132103597802427e+00, -2.224344589139625e+00, -2.234606235998168e+00, -2.225604144784046e+00, -2.234743821321268e+00, -2.229310714483602e+00, -2.229310714483602e+00, -6.308693239651476e-01, -6.580097493636630e-01, -5.903471506437018e-01, -5.890745481026218e-01, -6.368739139647076e-01, -6.368739139647076e-01, -1.482606291922498e-01, -2.412527475888908e-01, -1.396657681576615e-01, -1.882664075649726e+00, -1.620176902905027e-01, -1.620176902905027e-01, -1.452254559633090e-02, -1.693294694604789e-02, -1.199967887771599e-02, -1.036808125895742e-01, -1.448475655353699e-02, -1.448475655353700e-02, -6.101673341745366e-01, -6.081218239311694e-01, -6.084981966900687e-01, -6.090711169609830e-01, -6.087515048486866e-01, -6.087515048486866e-01, -5.950059987676695e-01, -5.561401513652472e-01, -5.647506016254109e-01, -5.722341362387162e-01, -5.681706274111671e-01, -5.681706274111671e-01, -6.884415844217886e-01, -2.907875938880060e-01, -3.329836340902129e-01, -4.035502378049330e-01, -3.662328103342570e-01, -3.662328103342570e-01, -5.148825036077460e-01, -7.423329178574774e-02, -9.116263022790633e-02, -3.814365468014353e-01, -1.209638858990455e-01, -1.209638858990455e-01, -3.028376827759794e-02, -6.539828513668695e-03, -1.097511642169931e-02, -1.158639219607192e-01, -1.350586784356113e-02, -1.350586784356112e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_vv10_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.423635359418751e+01, -2.423645915870573e+01, -2.423688776292579e+01, -2.423531814769791e+01, -2.423614632148254e+01, -2.423614632148254e+01, -3.984925688927623e+00, -3.984958960299707e+00, -3.985828867848296e+00, -3.985060699934083e+00, -3.985059183483062e+00, -3.985059183483062e+00, -8.282186352916014e-01, -8.274316524829772e-01, -8.106594346579216e-01, -8.166329900191871e-01, -8.151663168503382e-01, -8.151663168503382e-01, -2.464434581274625e-01, -2.499168341088336e-01, -9.544450374048571e-01, -1.928200349267472e-01, -2.131054906209269e-01, -2.131054906209268e-01, -1.941239885899771e-02, -1.993720394632099e-02, -6.766671591916787e-02, -1.399592501214680e-02, -1.571421954589871e-02, -1.571421954589871e-02, -6.118296825659316e+00, -6.122642202998427e+00, -6.118485166791008e+00, -6.122321084000042e+00, -6.120502516614051e+00, -6.120502516614051e+00, -2.305652505125252e+00, -2.319237966946091e+00, -2.299992475980940e+00, -2.311900172312459e+00, -2.316014285383919e+00, -2.316014285383919e+00, -7.414207902956678e-01, -8.500082752397672e-01, -6.872423544037459e-01, -7.505137027226373e-01, -7.560666953390545e-01, -7.560666953390545e-01, -1.438768007397686e-01, -2.481142487411885e-01, -1.348543941125784e-01, -2.431405862591317e+00, -1.614002392284862e-01, -1.614002392284862e-01, -1.164027139946688e-02, -1.358552413022620e-02, -9.640177546175653e-03, -9.744498329304498e-02, -1.163613483935348e-02, -1.163613483935350e-02, -8.008734352252713e-01, -7.868811940939797e-01, -7.926514427683505e-01, -7.968261106355591e-01, -7.948209685028070e-01, -7.948209685028070e-01, -7.812768035858124e-01, -6.242167844051915e-01, -6.541619980326163e-01, -6.978102869155524e-01, -6.732664885072999e-01, -6.732664885072999e-01, -8.860414876659698e-01, -3.057178322544601e-01, -3.594663575834185e-01, -4.566628391762698e-01, -4.052657850440273e-01, -4.052657850440274e-01, -5.792106896755420e-01, -6.580326819466821e-02, -8.345852552562248e-02, -4.417744967531776e-01, -1.165595572858332e-01, -1.165595572858331e-01, -2.458708288164366e-02, -5.234282633693524e-03, -8.792489409182423e-03, -1.110063084943913e-01, -1.084808676012246e-02, -1.084808676012245e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_vv10_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.053016192630962e-08, -1.053010353365546e-08, -1.052971389770932e-08, -1.053058506792176e-08, -1.053014720103664e-08, -1.053014720103664e-08, -1.276485701304203e-05, -1.276562898651002e-05, -1.278220521694818e-05, -1.274383643581389e-05, -1.276457518272951e-05, -1.276457518272951e-05, -5.850418655317576e-03, -5.838879762641927e-03, -5.494738537897881e-03, -5.367525083237169e-03, -5.428381664744979e-03, -5.428381664744979e-03, -4.241669582533831e-01, -4.134778761930543e-01, -3.461296742725967e-03, -8.067827664828084e-01, -6.326511998853774e-01, -6.326511998853783e-01, -1.871786381129327e+03, -1.690029072757473e+03, -2.002400497827799e+01, -6.769317403553150e+03, -4.296166124075381e+03, -4.296166124075385e+03, -2.857754389624024e-06, -2.853763460107202e-06, -2.857574798900496e-06, -2.854053672025701e-06, -2.855747613406609e-06, -2.855747613406609e-06, -7.568355531581507e-05, -7.471010950542602e-05, -7.460122226837580e-05, -7.374945748770228e-05, -7.567946019846474e-05, -7.567946019846474e-05, -1.211066192935187e-02, -4.625903500669545e-03, -1.578624564979684e-02, -1.002840167191321e-02, -1.152308402213938e-02, -1.152308402213938e-02, -1.808597287500563e+00, -3.293950957547712e-01, -2.235674090646289e+00, -8.369068444192578e-05, -1.409583870452553e+00, -1.409583870452553e+00, -1.409861332258912e+04, -7.628195413942684e+03, -3.024703050447664e+04, -6.484224585288961e+00, -1.424675991611861e+04, -1.424675991611857e+04, 9.495785195139678e-04, -5.834177742995694e-03, -3.781284858927430e-03, -1.811017520593091e-03, -2.827332156796638e-03, -2.827332156796638e-03, 3.996068389474307e-03, -1.885534645192791e-02, -1.874094665156762e-02, -1.644378264275858e-02, -1.817425052456520e-02, -1.817425052456520e-02, -4.366502116967477e-03, -1.691368164402434e-01, -1.073122153395772e-01, -6.276516922475303e-02, -8.118063340118151e-02, -8.118063340118149e-02, -2.527982747152951e-02, -2.157136360970384e+01, -1.001712441502598e+01, -8.390065492573634e-02, -3.903493506930277e+00, -3.903493506930282e+00, -7.459862132098342e+02, -3.428298206054401e+05, -4.322243404707073e+04, -4.513586539913002e+00, -1.884819077289887e+04, -1.884819077289892e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
