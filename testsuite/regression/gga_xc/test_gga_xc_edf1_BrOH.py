
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_edf1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.111481888225542e+01, -2.111485119520520e+01, -2.111506009626032e+01, -2.111452968226828e+01, -2.111483538178448e+01, -2.111483538178448e+01, -3.538935097918134e+00, -3.538914948539727e+00, -3.538505395642092e+00, -3.539949830250968e+00, -3.538939556542281e+00, -3.538939556542281e+00, -7.334542310694809e-01, -7.333273107643080e-01, -7.326351283360113e-01, -7.371624955686946e-01, -7.334046612000171e-01, -7.334046612000171e-01, -2.282766148831001e-01, -2.293743139474876e-01, -8.561077516356420e-01, -1.957340803008483e-01, -2.285780784416909e-01, -2.285780784416909e-01, -1.135572231414792e-01, -1.144342513453103e-01, -1.606638537312445e-01, -1.076066213668029e-01, -1.133310076131056e-01, -1.133310076131056e-01, -5.151426775863547e+00, -5.151411016612905e+00, -5.151430091929059e+00, -5.151417733729152e+00, -5.151411181908305e+00, -5.151411181908305e+00, -2.153479882240239e+00, -2.162971952391408e+00, -2.155142918891752e+00, -2.162470524592005e+00, -2.157959915177500e+00, -2.157959915177500e+00, -6.187115643108887e-01, -6.565776549564237e-01, -5.895204669357056e-01, -6.026625069924445e-01, -6.390649253926931e-01, -6.390649253926931e-01, -1.776915956409059e-01, -2.496707932847010e-01, -1.738781471904290e-01, -1.913445956280011e+00, -1.815111902851334e-01, -1.815111902851334e-01, -1.056672081676357e-01, -1.079439656491313e-01, -8.264693554569252e-02, -1.581162143169370e-01, -9.798878846696001e-02, -9.798878846696005e-02, -6.231793725867963e-01, -6.216031471662194e-01, -6.221062153473087e-01, -6.225374039515151e-01, -6.223161012949739e-01, -6.223161012949739e-01, -6.039213880703495e-01, -5.509546194866788e-01, -5.643704760674165e-01, -5.779536241667279e-01, -5.707705868019584e-01, -5.707705868019585e-01, -6.872941813928095e-01, -2.944806785013277e-01, -3.306827330382175e-01, -3.928513254419729e-01, -3.589290821193714e-01, -3.589290821193719e-01, -5.005822413273044e-01, -1.664027696382101e-01, -1.630769210575799e-01, -3.656923844574947e-01, -1.598005308260563e-01, -1.598005308260564e-01, -1.238750686254086e-01, -7.915323207268769e-02, -8.963717656518358e-02, -1.541714794196122e-01, -8.815065634043785e-02, -8.815065634043791e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_edf1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.619220294387280e+01, -2.619230022843075e+01, -2.619273186297351e+01, -2.619113882098160e+01, -2.619225426830238e+01, -2.619225426830238e+01, -4.253424034865112e+00, -4.253479485908716e+00, -4.255174263242731e+00, -4.253137054042727e+00, -4.253470327077644e+00, -4.253470327077644e+00, -8.329785620534643e-01, -8.313412736441691e-01, -7.872007434939732e-01, -7.942297535780520e-01, -8.323854843061443e-01, -8.323854843061443e-01, -2.263827089773965e-01, -2.305135929058669e-01, -1.013474363396228e+00, -1.577950714065514e-01, -2.276279755731869e-01, -2.276279755731869e-01, -2.766984957497927e-02, -2.802949968395298e-02, -4.839916304152411e-02, -2.336283330001976e-02, -2.775744191488072e-02, -2.775744191488072e-02, -6.529763868265783e+00, -6.532650149555054e+00, -6.530058917393421e+00, -6.532303215793630e+00, -6.531245018655199e+00, -6.531245018655199e+00, -2.221390999202519e+00, -2.243212308817129e+00, -2.205739071742427e+00, -2.222786438850387e+00, -2.256450910867635e+00, -2.256450910867635e+00, -7.678263902844858e-01, -8.560462538942184e-01, -7.286471102792828e-01, -7.796322671939142e-01, -8.001013796742040e-01, -8.001013796742040e-01, -1.193124881745823e-01, -2.230241065334091e-01, -1.152473588712787e-01, -2.495920826664984e+00, -1.334925977531533e-01, -1.334925977531533e-01, -2.286466788868103e-02, -2.385714883833865e-02, -1.819845255862231e-02, -6.733952667287729e-02, -2.167440985821124e-02, -2.167440985821136e-02, -8.193755018741484e-01, -8.119248758545383e-01, -8.147505361768776e-01, -8.168268235293388e-01, -8.158012843370092e-01, -8.158012843370092e-01, -7.946729872241199e-01, -6.511494650043980e-01, -6.949894177257073e-01, -7.353657226836962e-01, -7.150917646031685e-01, -7.150917646031676e-01, -8.947737684030719e-01, -2.820328769365655e-01, -3.417035116561614e-01, -4.591450451760263e-01, -3.963417740297628e-01, -3.963417740297632e-01, -5.884090488610781e-01, -4.714233881535213e-02, -6.194169053542663e-02, -4.447891360029319e-01, -8.969944046810831e-02, -8.969944046810857e-02, -3.046180027753323e-02, -1.448062017200046e-02, -1.810566062958177e-02, -8.274583596224136e-02, -1.929292269701464e-02, -1.929292269701486e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_edf1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.903067981898961e-09, -4.902997822911868e-09, -4.902682539428591e-09, -4.903831468732466e-09, -4.903031001595634e-09, -4.903031001595634e-09, -7.127651232305203e-06, -7.127424609778261e-06, -7.120021482383550e-06, -7.126777557213894e-06, -7.127414439904187e-06, -7.127414439904187e-06, -4.683939496798225e-03, -4.704883482585256e-03, -5.229765716857238e-03, -5.078701426526357e-03, -4.691570439639448e-03, -4.691570439639448e-03, -5.875076990937584e-01, -5.670714157996954e-01, -2.286293451504338e-03, -1.451818921629753e+00, -5.814841868759291e-01, -5.814841868759291e-01, -5.523674300536717e+03, -4.847045721511146e+03, -5.949356845250750e+01, -4.069016451829753e+04, -5.048866710764331e+03, -5.048866710764331e+03, -1.282035360270536e-06, -1.279013636676090e-06, -1.281728804105277e-06, -1.279379312152827e-06, -1.280484309402853e-06, -1.280484309402853e-06, -7.351650446943892e-05, -7.154454120326993e-05, -7.429074646546818e-05, -7.273481171678478e-05, -7.117878057833999e-05, -7.117878057833999e-05, -7.140702250064346e-03, -3.554779200143189e-03, -8.809497453024721e-03, -5.773870926524300e-03, -6.015691996594470e-03, -6.015691996594470e-03, -3.279828352038677e+00, -4.521876119451206e-01, -3.688387420650243e+00, -5.305555279697431e-05, -2.383747590906796e+00, -2.383747590906796e+00, -4.586942051699648e+04, -3.130454405179602e+04, -9.637362747092659e+04, -1.923854187261801e+01, -4.565031017471202e+04, -4.565031017471205e+04, -2.863141478189706e-03, -4.181322208766138e-03, -3.780218053959318e-03, -3.423394379203467e-03, -3.607796325202577e-03, -3.607796325202577e-03, -2.863342709123063e-03, -1.333413598383191e-02, -1.063819976573461e-02, -8.107741939372491e-03, -9.399344546606472e-03, -9.399344546606441e-03, -3.077586517295811e-03, -2.175452050483715e-01, -1.262630062691371e-01, -5.224752543163703e-02, -8.315459359106314e-02, -8.315459359106284e-02, -1.977033652240716e-02, -7.212437243150956e+01, -2.569902011803019e+01, -6.228390322734569e-02, -8.071978531628140e+00, -8.071978531628140e+00, -3.240926268737818e+03, -1.515393294561238e+06, -2.285204934067211e+05, -1.035668329187654e+01, -8.100544604195695e+04, -8.100544604195723e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
