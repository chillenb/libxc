
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_p14_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.049352809884429e+01, -2.049358327094052e+01, -2.049384832324081e+01, -2.049302708369712e+01, -2.049345458037321e+01, -2.049345458037321e+01, -3.468886985405674e+00, -3.468884828091666e+00, -3.468917847829861e+00, -3.469497102259366e+00, -3.468965380060485e+00, -3.468965380060485e+00, -7.475306056166046e-01, -7.471536034259194e-01, -7.398157600033246e-01, -7.447859613808188e-01, -7.476942038437318e-01, -7.476942038437318e-01, -2.478900684440316e-01, -2.495665385796257e-01, -8.574558190734408e-01, -2.094703223556717e-01, -2.380982823774847e-01, -2.380982823774846e-01, -1.671122314180775e-02, -1.751958006428005e-02, -7.942049989837080e-02, -1.003251047189571e-02, -1.277215105285321e-02, -1.277215105285321e-02, -5.113738267852202e+00, -5.114683466664692e+00, -5.113785018285191e+00, -5.114619335709946e+00, -5.114215175988122e+00, -5.114215175988122e+00, -2.067293342487459e+00, -2.078363621606259e+00, -2.064328345985552e+00, -2.074005446719999e+00, -2.075001981895127e+00, -2.075001981895127e+00, -6.504752479242547e-01, -6.976950339902028e-01, -6.078864629370354e-01, -6.241579536145494e-01, -6.597169856444002e-01, -6.597169856444003e-01, -1.650252868308708e-01, -2.604148051535233e-01, -1.559189184324469e-01, -1.958448307831987e+00, -1.811917244033391e-01, -1.811917244033391e-01, -7.865907859677964e-03, -9.821543364040466e-03, -7.633822300902912e-03, -1.156948141550726e-01, -9.195362810970123e-03, -9.195362810970132e-03, -6.524045998049531e-01, -6.462517574735300e-01, -6.480172329271040e-01, -6.497745842204841e-01, -6.488562435366508e-01, -6.488562435366508e-01, -6.376454219373047e-01, -5.640892394149423e-01, -5.807546938048319e-01, -5.992637042819475e-01, -5.894524483358953e-01, -5.894524483358953e-01, -7.284793106540345e-01, -3.078732004954600e-01, -3.468508237883886e-01, -4.158334025522181e-01, -3.779054126561105e-01, -3.779054126561104e-01, -5.242066077272349e-01, -7.665581439445514e-02, -9.859782335412627e-02, -3.973797475224337e-01, -1.369213775411036e-01, -1.369213775411037e-01, -2.291152562462027e-02, -2.804706038120437e-03, -5.698956908674069e-03, -1.309227759947921e-01, -8.531451127200933e-03, -8.531451127200933e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_p14_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.713036676049505e+01, -2.713033496182765e+01, -2.713048881211729e+01, -2.713042313396974e+01, -2.713084799485631e+01, -2.713094888201504e+01, -2.712947654389696e+01, -2.712919353260031e+01, -2.713044732244852e+01, -2.712986822600083e+01, -2.713044732244852e+01, -2.712986822600083e+01, -4.461576205782630e+00, -4.461920957403400e+00, -4.461630067144961e+00, -4.461992081267785e+00, -4.463121590896463e+00, -4.463599535649589e+00, -4.461236920235025e+00, -4.461742968459162e+00, -4.460680277057805e+00, -4.463175317185613e+00, -4.460680277057805e+00, -4.463175317185613e+00, -8.918169274327375e-01, -9.006977916936474e-01, -8.890470102751722e-01, -8.999161229502460e-01, -8.573109082146491e-01, -8.436777692977384e-01, -8.557666454099737e-01, -8.602514661661931e-01, -9.232751451290147e-01, -7.948337808150802e-01, -9.232751451290147e-01, -7.948337808150802e-01, -2.558428516930303e-01, -2.579124461436511e-01, -2.580256518734569e-01, -2.608783266940268e-01, -1.013686973645659e+00, -1.069934162641803e+00, -2.164083935605744e-01, -2.182065149091267e-01, -2.460771856871643e-01, -1.689559377523208e-01, -2.460771856871640e-01, -1.689559377523218e-01, -2.160630879550196e-02, -2.196288753913556e-02, -2.260574371692020e-02, -2.303065858137751e-02, -9.539394143735463e-02, -9.744360676336711e-02, -1.318142623700749e-02, -1.312374890301902e-02, -1.706487743160523e-02, -1.482245974041297e-02, -1.706487743160519e-02, -1.482245974041308e-02, -6.784341937244120e+00, -6.782686127542784e+00, -6.786756704081510e+00, -6.785011025845222e+00, -6.784480288232407e+00, -6.782764623283439e+00, -6.786546161140421e+00, -6.784883309736253e+00, -6.785580500468059e+00, -6.783853132928768e+00, -6.785580500468059e+00, -6.783853132928768e+00, -2.355825233368378e+00, -2.355697261585839e+00, -2.379001538184246e+00, -2.378232328610986e+00, -2.324505244658772e+00, -2.333883175907555e+00, -2.344399750201629e+00, -2.353963449622222e+00, -2.392847515280364e+00, -2.370114484562226e+00, -2.392847515280364e+00, -2.370114484562226e+00, -8.227811615119299e-01, -8.209370407463473e-01, -9.153382937519593e-01, -9.163368931319097e-01, -7.450562235405458e-01, -7.755902846750936e-01, -8.013813384206088e-01, -8.254086234702052e-01, -8.581041979620679e-01, -8.160016987262645e-01, -8.581041979620680e-01, -8.160016987262648e-01, -1.745927447133809e-01, -1.758601626651038e-01, -2.676570786093138e-01, -2.681510403804932e-01, -1.629384975691954e-01, -1.697385916170503e-01, -2.599797423829206e+00, -2.598720931333153e+00, -1.861754084228407e-01, -1.914499950496456e-01, -1.861754084228407e-01, -1.914499950496456e-01, -1.027556793487467e-02, -1.037871913521139e-02, -1.285206129836891e-02, -1.290275170425361e-02, -9.939565535892668e-03, -1.008824307881030e-02, -1.293958994069407e-01, -1.299463263638385e-01, -1.136568359788455e-02, -1.232649154227645e-02, -1.136568359788440e-02, -1.232649154227638e-02, -8.567519408438533e-01, -8.598166689627107e-01, -8.463215042665688e-01, -8.497626697263909e-01, -8.507655754150217e-01, -8.541563583919835e-01, -8.541393089028380e-01, -8.573587704952773e-01, -8.525274212183799e-01, -8.558329853136564e-01, -8.525274212183799e-01, -8.558329853136564e-01, -8.337889708241873e-01, -8.362801263538109e-01, -6.744344761204112e-01, -6.779846732133323e-01, -7.206470121999249e-01, -7.246832943112830e-01, -7.668500431104394e-01, -7.697080953756419e-01, -7.437387757647712e-01, -7.466911848457241e-01, -7.437387757647712e-01, -7.466911848457241e-01, -9.543797976535772e-01, -9.567912207482830e-01, -3.152409645770348e-01, -3.157201280749667e-01, -3.631743102379215e-01, -3.651203063635000e-01, -4.870733453307435e-01, -4.898798134237659e-01, -4.179403025442522e-01, -4.181814854791300e-01, -4.179403025442520e-01, -4.181814854791300e-01, -6.232348297324820e-01, -6.287279356106057e-01, -9.370656668953575e-02, -9.394901167923971e-02, -1.149598441517461e-01, -1.166555678707446e-01, -4.775792372104315e-01, -4.858691500288720e-01, -1.437429398419353e-01, -1.495287263915837e-01, -1.437429398419353e-01, -1.495287263915832e-01, -2.960995006117938e-02, -2.990418541274206e-02, -3.702564407640426e-03, -3.704675983088475e-03, -7.433727160885740e-03, -7.552495281911940e-03, -1.407194323014652e-01, -1.424180901000140e-01, -1.062819745042064e-02, -1.143381800268130e-02, -1.062819745042066e-02, -1.143381800268122e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_p14_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.519223261186446e-10, 0.000000000000000e+00, -6.519132314383687e-10, -6.517483482303245e-10, 0.000000000000000e+00, -6.517891094474838e-10, -6.514186768106596e-10, 0.000000000000000e+00, -6.512420546077788e-10, -6.533495038375073e-10, 0.000000000000000e+00, -6.537372601618547e-10, -6.517819268481396e-10, 0.000000000000000e+00, -6.529218336864320e-10, -6.517819268481396e-10, 0.000000000000000e+00, -6.529218336864320e-10, -3.927892792555938e-06, 0.000000000000000e+00, -3.918397003875398e-06, -3.926868108031063e-06, 0.000000000000000e+00, -3.916787354484987e-06, -3.895860629817914e-06, 0.000000000000000e+00, -3.886012535542652e-06, -3.946949432630763e-06, 0.000000000000000e+00, -3.935965985054121e-06, -3.935385964594925e-06, 0.000000000000000e+00, -3.906981279576540e-06, -3.935385964594925e-06, 0.000000000000000e+00, -3.906981279576540e-06, -5.781642192646869e-03, 0.000000000000000e+00, -5.439919917236926e-03, -5.869023473875586e-03, 0.000000000000000e+00, -5.453144602476455e-03, -6.627895830659221e-03, 0.000000000000000e+00, -7.070210381074399e-03, -6.683010543732805e-03, 0.000000000000000e+00, -6.541790972587172e-03, -4.184901853776278e-03, 0.000000000000000e+00, -8.199331135070806e-03, -4.184901853776278e-03, 0.000000000000000e+00, -8.199331135070806e-03, -9.643386829954261e-01, 0.000000000000000e+00, -9.333837859126700e-01, -9.569261014835966e-01, 0.000000000000000e+00, -9.145684189146441e-01, -3.372096963318061e-03, 0.000000000000000e+00, -2.351463583185864e-03, -1.498974682330702e+00, 0.000000000000000e+00, -1.440073962359158e+00, -9.566149499798279e-01, 0.000000000000000e+00, -4.497745891041883e+00, -9.566149499798290e-01, 0.000000000000000e+00, -4.497745891041879e+00, -1.872985569163476e+01, 0.000000000000000e+00, -1.520670546577540e+01, -1.998563701407843e+01, 0.000000000000000e+00, -1.585109526757910e+01, -8.362964078697310e+00, 0.000000000000000e+00, -7.066239838299301e+00, -1.531455708643404e+01, 0.000000000000000e+00, -1.596878079889303e+01, -1.080771321680639e+01, 0.000000000000000e+00, -1.121874569052939e+02, -1.080771321676739e+01, 0.000000000000000e+00, -1.121874569051494e+02, 7.872502583380398e-08, 0.000000000000000e+00, 7.812613912692574e-08, 8.836259073328742e-08, 0.000000000000000e+00, 8.740067847188326e-08, 7.923078463247618e-08, 0.000000000000000e+00, 7.839965820885414e-08, 8.746623981601719e-08, 0.000000000000000e+00, 8.686069343692351e-08, 8.370041683663657e-08, 0.000000000000000e+00, 8.277902693609362e-08, 8.370041683663657e-08, 0.000000000000000e+00, 8.277902693609362e-08, -8.478600841173256e-05, 0.000000000000000e+00, -8.480529823813194e-05, -8.178469605435362e-05, 0.000000000000000e+00, -8.189343176340172e-05, -8.828787577568720e-05, 0.000000000000000e+00, -8.717123301156185e-05, -8.567865804620087e-05, 0.000000000000000e+00, -8.453833449145882e-05, -8.023311259501221e-05, 0.000000000000000e+00, -8.311199899869736e-05, -8.023311259501221e-05, 0.000000000000000e+00, -8.311199899869736e-05, -7.002854794720586e-03, 0.000000000000000e+00, -7.100622951949902e-03, 2.950987501576669e-03, 0.000000000000000e+00, 3.320967671708362e-03, -1.264493874025489e-02, 0.000000000000000e+00, -9.041622856191558e-03, -6.015869324337095e-04, 0.000000000000000e+00, 2.585377812957783e-04, -4.865093771523370e-03, 0.000000000000000e+00, -7.576630998222790e-03, -4.865093771523399e-03, 0.000000000000000e+00, -7.576630998222780e-03, -2.619151808110035e+00, 0.000000000000000e+00, -2.556024177695288e+00, -6.368639979221904e-01, 0.000000000000000e+00, -6.314549014933921e-01, -3.403999592057320e+00, 0.000000000000000e+00, -2.793493632041471e+00, 5.364629785281055e-05, 0.000000000000000e+00, 5.383090606198254e-05, -2.380920560162068e+00, 0.000000000000000e+00, -2.344680381841155e+00, -2.380920560162068e+00, 0.000000000000000e+00, -2.344680381841155e+00, -2.325505451969806e+01, 0.000000000000000e+00, -1.875421659994239e+01, -1.933499956155305e+01, 0.000000000000000e+00, -1.754585627598557e+01, -1.250436270848639e+02, 0.000000000000000e+00, -1.089486836539757e+02, -6.498955399140669e+00, 0.000000000000000e+00, -6.245698901338093e+00, -1.027610965198022e+02, 0.000000000000000e+00, -3.609340010594963e+01, -1.027610965210530e+02, 0.000000000000000e+00, -3.609340010594354e+01, 2.008739123584788e-02, 0.000000000000000e+00, 2.018854364539766e-02, 4.803497496374692e-03, 0.000000000000000e+00, 5.229379143302195e-03, 9.033027518528820e-03, 0.000000000000000e+00, 9.477644538581530e-03, 1.374246373822955e-02, 0.000000000000000e+00, 1.404664607933083e-02, 1.125677064824734e-02, 0.000000000000000e+00, 1.164103448679379e-02, 1.125677064824734e-02, 0.000000000000000e+00, 1.164103448679379e-02, 2.322050273446643e-02, 0.000000000000000e+00, 2.298770099435896e-02, -2.008379912533747e-02, 0.000000000000000e+00, -1.946815506167985e-02, -1.424621828530044e-02, 0.000000000000000e+00, -1.358745089660972e-02, -7.843638119412822e-03, 0.000000000000000e+00, -7.464067309772715e-03, -1.119430037287998e-02, 0.000000000000000e+00, -1.078403924458134e-02, -1.119430037287998e-02, 0.000000000000000e+00, -1.078403924458134e-02, 1.654068178707146e-03, 0.000000000000000e+00, 2.071357440753621e-03, -3.548657815595184e-01, 0.000000000000000e+00, -3.524409478800387e-01, -2.271825012359804e-01, 0.000000000000000e+00, -2.232941448769053e-01, -8.624024229173592e-02, 0.000000000000000e+00, -8.353514201588891e-02, -1.483012174219224e-01, 0.000000000000000e+00, -1.483844914623266e-01, -1.483012174219229e-01, 0.000000000000000e+00, -1.483844914623270e-01, -2.871613447132930e-02, 0.000000000000000e+00, -2.727103197361133e-02, -7.218708140059220e+00, 0.000000000000000e+00, -7.071352437743283e+00, -6.504976023270026e+00, 0.000000000000000e+00, -5.912903371608788e+00, -9.963901305022307e-02, 0.000000000000000e+00, -8.857200494600481e-02, -5.644790238290324e+00, 0.000000000000000e+00, -4.984590356269500e+00, -5.644790238290337e+00, 0.000000000000000e+00, -4.984590356269504e+00, -1.397380194724374e+01, 0.000000000000000e+00, -1.258859636509402e+01, -8.061512167236575e+01, 0.000000000000000e+00, -1.101205537139671e+02, -4.882834821728931e+01, 0.000000000000000e+00, -4.079629779522372e+01, -5.988748777714770e+00, 0.000000000000000e+00, -5.591175899303932e+00, -1.654163341934326e+02, 0.000000000000000e+00, -4.203706625272334e+01, -1.654163341932720e+02, 0.000000000000000e+00, -4.203706625283709e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
