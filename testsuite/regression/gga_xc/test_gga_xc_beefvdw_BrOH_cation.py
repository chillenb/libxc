
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_beefvdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.161461449216226e+01, -2.161464064139603e+01, -2.161482971627300e+01, -2.161443918821483e+01, -2.161463345778717e+01, -2.161463345778717e+01, -3.655875311063805e+00, -3.655830172071079e+00, -3.654875795253985e+00, -3.657218483185807e+00, -3.655908065959864e+00, -3.655908065959864e+00, -7.752993868920083e-01, -7.753981904067166e-01, -7.796364953424311e-01, -7.846163888424730e-01, -7.837470944242834e-01, -7.837470944242834e-01, -2.627223671638552e-01, -2.632899391693368e-01, -8.886649154880041e-01, -2.225474437781287e-01, -2.498555649137744e-01, -2.498555649137743e-01, -1.274188086958065e-02, -1.339574522645784e-02, -6.906596300947326e-02, -7.456197169057125e-03, -9.902265520084922e-03, -9.902265519889429e-03, -5.261564968050790e+00, -5.261044672155463e+00, -5.261551470357659e+00, -5.261091902294665e+00, -5.261294817552014e+00, -5.261294817552014e+00, -2.276992357747321e+00, -2.286557918436025e+00, -2.280192988211706e+00, -2.288677489363431e+00, -2.280694344322462e+00, -2.280694344322462e+00, -6.503450880961594e-01, -6.819098180470631e-01, -6.089690903959329e-01, -6.104584473478544e-01, -6.574151752305321e-01, -6.574151752305322e-01, -1.658098904643218e-01, -2.818299061714509e-01, -1.548424673585669e-01, -1.951132454753200e+00, -1.880487463679144e-01, -1.880487463679144e-01, -5.788129954749905e-03, -7.292755853781582e-03, -5.613702253376180e-03, -1.080199572604011e-01, -6.895996546617505e-03, -6.895996546556022e-03, -6.308068708148838e-01, -6.301476041344922e-01, -6.303280477487901e-01, -6.305167704242544e-01, -6.304172631122760e-01, -6.304172631122760e-01, -6.140852554237818e-01, -5.764600495311211e-01, -5.825722100795574e-01, -5.912840365683990e-01, -5.861749754961071e-01, -5.861749754961071e-01, -7.134527667104982e-01, -3.330873136748380e-01, -3.649014606921938e-01, -4.213833739031341e-01, -3.887091899857508e-01, -3.887091899857498e-01, -5.344755442238274e-01, -6.623196878248290e-02, -8.861189977864342e-02, -3.957743266492426e-01, -1.338724762210261e-01, -1.338724762210232e-01, -1.778731346800476e-02, -1.996770422920823e-03, -4.145453205940779e-03, -1.265773614976866e-01, -6.364089843540865e-03, -6.364089843449769e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_beefvdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.574465990262198e+01, -2.574463234721167e+01, -2.574480697920456e+01, -2.574473945410660e+01, -2.574520893942313e+01, -2.574533298323548e+01, -2.574354583731297e+01, -2.574321709266915e+01, -2.574474831359841e+01, -2.574401386330616e+01, -2.574474831359841e+01, -2.574401386330616e+01, -4.161566816809747e+00, -4.162091485192664e+00, -4.161654143580968e+00, -4.162208048128099e+00, -4.164068754200265e+00, -4.164705746867607e+00, -4.160543777342602e+00, -4.161233923444905e+00, -4.160698573220040e+00, -4.163399194837245e+00, -4.160698573220040e+00, -4.163399194837245e+00, -8.231859909376082e-01, -8.264962320990300e-01, -8.217257803027587e-01, -8.257119476962456e-01, -7.991034242129653e-01, -7.945521752532677e-01, -8.023517755001853e-01, -8.038663121420837e-01, -8.277160720296223e-01, -7.725513587908366e-01, -8.277160720296223e-01, -7.725513587908366e-01, -2.289789707526179e-01, -2.215039576345735e-01, -2.249587673774191e-01, -2.178485444040169e-01, -9.406369171708581e-01, -9.747801007477204e-01, -2.432084343673856e-01, -2.442577859541217e-01, -2.150810146716531e-01, -2.310016479201306e-01, -2.150810146716530e-01, -2.310016479201306e-01, -1.653866028828737e-02, -1.713030419638093e-02, -1.733375456043199e-02, -1.803994310973573e-02, -8.796686208467305e-02, -9.097913346806911e-02, -9.927609550788821e-03, -9.834300734551691e-03, -1.368645480705729e-02, -1.007454566239580e-02, -1.368645480674445e-02, -1.007454566249606e-02, -6.499331170872700e+00, -6.497728444064623e+00, -6.503632603429600e+00, -6.501887984162734e+00, -6.499561551091409e+00, -6.497867253428544e+00, -6.503255259098018e+00, -6.501643193569699e+00, -6.501539364891974e+00, -6.499818994607438e+00, -6.501539364891974e+00, -6.499818994607438e+00, -2.265009451489475e+00, -2.264908164888311e+00, -2.281063500609479e+00, -2.280511235852607e+00, -2.253576354749751e+00, -2.256014618799811e+00, -2.266700376937227e+00, -2.269510009819029e+00, -2.284024130611047e+00, -2.275106618363754e+00, -2.284024130611047e+00, -2.275106618363754e+00, -7.705268713935227e-01, -7.691794787780563e-01, -8.806211496818687e-01, -8.813393353627945e-01, -6.947589762397018e-01, -7.197215287136789e-01, -7.717246800312071e-01, -7.901835063537417e-01, -8.043365277703375e-01, -7.715383045854168e-01, -8.043365277591340e-01, -7.715383045793290e-01, -1.998409871432891e-01, -2.004398367506575e-01, -2.871825699677152e-01, -2.870473386925668e-01, -1.857554083938858e-01, -1.907464949266956e-01, -2.531286851104572e+00, -2.530337329426233e+00, -2.180437751524071e-01, -2.156184657665872e-01, -2.180437751524071e-01, -2.156184657665872e-01, -7.589001613568645e-03, -7.753005799505297e-03, -9.624128957275411e-03, -9.705778680500481e-03, -7.315626978564376e-03, -7.551399460670133e-03, -1.357472719488340e-01, -1.363890588691356e-01, -8.036777037001190e-03, -9.569842265964103e-03, -8.036777036949759e-03, -9.569842265890549e-03, -8.226691485428761e-01, -8.251814378750817e-01, -8.133476190375736e-01, -8.159754795112644e-01, -8.168862031997254e-01, -8.194812265234065e-01, -8.195779243955438e-01, -8.220980553300126e-01, -8.182544219595157e-01, -8.208091378651472e-01, -8.182544219595157e-01, -8.208091378651472e-01, -8.029254034495541e-01, -8.049374343321271e-01, -6.188712685725015e-01, -6.209780918423863e-01, -6.672809017144538e-01, -6.706814835870469e-01, -7.279677174664084e-01, -7.302178955361729e-01, -6.984324564530736e-01, -7.007546602359450e-01, -6.984324564530736e-01, -7.007546602359450e-01, -9.189162415317491e-01, -9.207904107325170e-01, -2.904176488740970e-01, -2.891461729843467e-01, -2.950637529522248e-01, -2.979416195246953e-01, -4.481267718159611e-01, -4.498254628406687e-01, -3.915948493903006e-01, -3.917034349993405e-01, -3.915948493902836e-01, -3.917034349993511e-01, -5.725506492438687e-01, -5.755824433614325e-01, -8.592777018352542e-02, -8.629253286774063e-02, -1.125645730302141e-01, -1.147775103486034e-01, -4.373593491652120e-01, -4.428362214899257e-01, -1.622351106929740e-01, -1.650285219998437e-01, -1.622351106929955e-01, -1.650285219998321e-01, -2.324857358414348e-02, -2.374250812074308e-02, -2.651430991679285e-03, -2.654618271947298e-03, -5.400006219713847e-03, -5.584990498539730e-03, -1.553424317509206e-01, -1.567751730244217e-01, -7.542775859335544e-03, -8.820433105730337e-03, -7.542775859210541e-03, -8.820433105607123e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_beefvdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.547683283742663e-08, 1.541585168843969e-10, -1.547690842729709e-08, -1.547657366321362e-08, 1.541613150973154e-10, -1.547671979086512e-08, -1.547578334687379e-08, 1.541651746138483e-10, -1.547557801151412e-08, -1.547871425559791e-08, 1.541237279833786e-10, -1.547930835053328e-08, -1.547668319147441e-08, 1.541466620546428e-10, -1.547784063892567e-08, -1.547668319147441e-08, 1.541466620546428e-10, -1.547784063892567e-08, -2.254455667094289e-05, 8.631922595529296e-07, -2.254225837135969e-05, -2.254373629485065e-05, 8.633699335770677e-07, -2.254138799165770e-05, -2.252342532852304e-05, 8.673875174428418e-07, -2.251806902942660e-05, -2.254410501514373e-05, 8.596193864323184e-07, -2.253894110671016e-05, -2.256127372610763e-05, 8.633031775364611e-07, -2.251921034008199e-05, -2.256127372610763e-05, 8.633031775364611e-07, -2.251921034008199e-05, -1.470786218985324e-02, 1.434076450483850e-03, -1.482657179489795e-02, -1.468363527834760e-02, 1.423238248846535e-03, -1.483113373680694e-02, -1.454669415245399e-02, 1.149939357650222e-03, -1.437715444911718e-02, -1.406019363156516e-02, 1.123919448246138e-03, -1.411848443748842e-02, -1.499380824339575e-02, 1.140601930367123e-03, -1.360515081241135e-02, -1.499380824339575e-02, 1.140601930367123e-03, -1.360515081241135e-02, -1.850042146560083e+00, 1.243043469665614e-01, -1.844530793471479e+00, -1.926819577882517e+00, 1.311784555553054e-01, -1.886161430648819e+00, -8.581813651673563e-03, 7.758426340401184e-04, -8.051811840451397e-03, -1.406121119708993e+00, 9.032038015128549e-02, -1.375756996152566e+00, -1.640028361305880e+00, 7.525852261388931e-02, -1.618054946468883e+00, -1.640028361305879e+00, 7.525852261388939e-02, -1.618054946468813e+00, -3.251278629331681e+00, 3.387122808348537e-03, -3.218596315904074e+00, -3.425410109739995e+00, 3.984147295736684e-03, -3.407767771381589e+00, -1.877867577017658e+00, 2.049922885215899e-02, -1.886160111659928e+00, -2.979321789256543e+00, 1.202972503373775e-03, -2.898436107466546e+00, -3.246771810171702e+00, 1.765091584889168e-03, -8.239911552956217e+00, -3.246771810171522e+00, 1.765091584727819e-03, -8.239911561352098e+00, -4.080929772511523e-06, 2.265835787703443e-07, -4.085253260161692e-06, -4.069537085044742e-06, 2.280815636504868e-07, -4.074216223543370e-06, -4.080328252748847e-06, 2.266433765967863e-07, -4.084883469989919e-06, -4.070536288837856e-06, 2.279656534367717e-07, -4.074877635170930e-06, -4.075100366129357e-06, 2.273455256151618e-07, -4.079718046070569e-06, -4.075100366129357e-06, 2.273455256151618e-07, -4.079718046070569e-06, -1.773361312260345e-04, 4.885212930027736e-06, -1.773663576767783e-04, -1.743130342481424e-04, 4.873395321647609e-06, -1.744545183111080e-04, -1.757131563209047e-04, 4.645245918981187e-06, -1.763335619799849e-04, -1.732845237779292e-04, 4.636547952249954e-06, -1.737790858330203e-04, -1.764245192014673e-04, 4.998845994767037e-06, -1.759367896214172e-04, -1.764245192014673e-04, 4.998845994767037e-06, -1.759367896214172e-04, -2.533353379888704e-02, 4.719844410269505e-03, -2.561944062333407e-02, -1.267333634348739e-02, 5.957272742564080e-03, -1.260082366890212e-02, -3.872388725449580e-02, 6.139755509180133e-03, -3.270933501850869e-02, -2.390925124043346e-02, 9.111644803251292e-03, -2.057902120811901e-02, -2.096201303718540e-02, 4.714686800117787e-03, -2.639018424163101e-02, -2.096201303718540e-02, 4.714686800117788e-03, -2.639018424163101e-02, -1.263189972506198e+00, 5.043854343356849e-02, -1.287733393227526e+00, -7.899807556984637e-01, 4.556883091874154e-02, -7.879894466980034e-01, -1.417328957776391e+00, 5.114320449833245e-02, -1.379220240424443e+00, -1.645407576436343e-04, 4.829537378594577e-05, -1.648569580071224e-04, -1.424743253390650e+00, 9.633879778848552e-02, -1.862318707817168e+00, -1.424743253390650e+00, 9.633879778848552e-02, -1.862318707817168e+00, -4.182746629344693e+00, 1.172930351526636e-03, -3.620234279320042e+00, -3.601383884347907e+00, 1.479041818859924e-03, -3.325019172039495e+00, -2.051032098041071e+01, 1.473429889513109e-02, -2.281690688172975e+01, -2.113283042164447e+00, 5.001207464990655e-02, -2.035590837836275e+00, -1.020044545630220e+01, 5.639094658874242e-03, -1.001890962236723e+01, -1.020044549807111e+01, 5.639094662795933e-03, -1.001890953980653e+01, -1.606570218238496e-02, 1.005319848627532e-02, -1.574129235825552e-02, -1.760935695463950e-02, 8.624672951875439e-03, -1.723645265580807e-02, -1.693706839215067e-02, 9.078051126323004e-03, -1.659462716699950e-02, -1.652991829905067e-02, 9.491508422478491e-03, -1.620326922207807e-02, -1.672218285071513e-02, 9.280212802767739e-03, -1.638965102874689e-02, -1.672218285071513e-02, 9.280212802767739e-03, -1.638965102874689e-02, -1.753143573964871e-02, 1.190412289554505e-02, -1.722351459541449e-02, -5.114952059096219e-02, 6.366458087483541e-03, -5.051880447048052e-02, -4.465061092643054e-02, 7.351938275244612e-03, -4.371821047062714e-02, -3.338318036666009e-02, 8.675308052558719e-03, -3.280147906490954e-02, -3.888646299190134e-02, 7.978668823443514e-03, -3.821800900420782e-02, -3.888646299190134e-02, 7.978668823443514e-03, -3.821800900420782e-02, -1.077905303600212e-02, 4.731089015088080e-03, -1.062233740212789e-02, -6.460594007845715e-01, 3.398037959796522e-02, -6.452989556269797e-01, -5.069833806828807e-01, 3.127486789503565e-02, -4.924669812413365e-01, -1.905305947268031e-01, 2.784473614805959e-02, -1.870917593621082e-01, -2.619784915716369e-01, 3.117242256790037e-02, -2.631415871753871e-01, -2.619784915717067e-01, 3.117242256790038e-02, -2.631415871753311e-01, -7.036945487829829e-02, 9.139995642655904e-03, -6.914963467802628e-02, -1.719989222005731e+00, 1.684510008137780e-02, -1.721813074127515e+00, -1.677913192205976e+00, 2.582151370054252e-02, -1.713019265641153e+00, -2.515360131772320e-01, 4.396158138745059e-02, -2.377300228869594e-01, -2.078172620729503e+00, 8.724408257009543e-02, -2.440897820418585e+00, -2.078172620713413e+00, 8.724408257009535e-02, -2.440897820418585e+00, -2.575351350096542e+00, 4.223278040318319e-03, -2.629025060230345e+00, -1.287091108158728e+01, 1.603944775344856e-03, -2.279941951568768e+01, -7.943067206587119e+00, 2.007469722013198e-03, -8.455955596902074e+00, -2.328097335383520e+00, 8.007418481762649e-02, -2.278119865359810e+00, -2.103215631030807e+01, 7.197758070822300e-03, -1.040040561480182e+01, -2.103215624305746e+01, 7.197758075395304e-03, -1.040040568115915e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
