
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fco_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.908743577260397e+01, -1.908691329534286e+01, -1.908558155007182e+01, -1.909411639171424e+01, -1.908715188488841e+01, -1.908715188488841e+01, -3.843896268657259e+00, -3.843915431593949e+00, -3.844590914519630e+00, -3.844188694917212e+00, -3.843921407671605e+00, -3.843921407671605e+00, -8.956412615827590e-01, -8.954626707880232e-01, -8.939413173503835e-01, -8.981123263997348e-01, -8.955731270073343e-01, -8.955731270073343e-01, -4.285441723053167e-01, -4.289798243585760e-01, -1.015612153034124e+00, -4.018547646888366e-01, -4.286345719840700e-01, -4.286345719840700e-01, -2.105387103079926e-01, -2.128612851318324e-01, -3.166726045131978e-01, -1.769164426517117e-01, -2.113085510133664e-01, -2.113085510133664e-01, -5.587038233810983e+00, -5.588550585420250e+00, -5.587194067682122e+00, -5.588370011272613e+00, -5.587812557843687e+00, -5.587812557843687e+00, -2.270732636446755e+00, -2.282229429541418e+00, -2.269563569162348e+00, -2.278372882022070e+00, -2.280509708103033e+00, -2.280509708103033e+00, -7.900485508694345e-01, -8.323391868839155e-01, -7.618623442994110e-01, -7.763164666667892e-01, -8.101937789785888e-01, -8.101937789785888e-01, -3.830072010762921e-01, -4.604774899460300e-01, -3.760731363171494e-01, -2.236745518250346e+00, -3.857114823871564e-01, -3.857114823871564e-01, -1.736844370287194e-01, -1.818388854590154e-01, -1.487802319169361e-01, -3.346804471922628e-01, -1.694298486062177e-01, -1.694298486062177e-01, -8.008969233580538e-01, -7.967885799172970e-01, -7.979652866365025e-01, -7.990551675497293e-01, -7.984854113800008e-01, -7.984854113800008e-01, -7.812207322886904e-01, -7.255743124675803e-01, -7.377876820707979e-01, -7.511110820451946e-01, -7.439464518160431e-01, -7.439464518160431e-01, -8.635969599421011e-01, -5.002867818941543e-01, -5.290008868148028e-01, -5.788765261931512e-01, -5.509177692409173e-01, -5.509177692409170e-01, -6.788185549177556e-01, -3.196285080423436e-01, -3.355378456146542e-01, -5.503132463987471e-01, -3.496083529782422e-01, -3.496083529782423e-01, -2.268524538723810e-01, -9.351012317584506e-02, -1.365864102593388e-01, -3.390809174358310e-01, -1.546411692832136e-01, -1.546411692832136e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fco_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.102843445299878e+01, 3.102963290129019e+01, 3.103402778595508e+01, 3.101442211685372e+01, 3.102907442862657e+01, 3.102907442862657e+01, -5.228498689586555e+00, -5.228556431418391e+00, -5.230347447256211e+00, -5.228320929596216e+00, -5.228549728655524e+00, -5.228549728655524e+00, -1.002587445831442e+00, -1.000569734714851e+00, -9.444572632704488e-01, -9.523749144103948e-01, -1.001857495776134e+00, -1.001857495776134e+00, -3.958273422668436e-01, -4.000993619115391e-01, -1.207998740413251e+00, -3.186564209655600e-01, -3.971311003316618e-01, -3.971311003316618e-01, -1.231427864962904e-01, -1.239067691936606e-01, -1.845453848236489e-01, -1.303659062269463e-01, -1.233298176740658e-01, -1.233298176740658e-01, -7.368946789174281e+00, -7.368206309223254e+00, -7.368878066295888e+00, -7.368302300540001e+00, -7.368559537009129e+00, -7.368559537009129e+00, -2.578415910062856e+00, -2.610623722163761e+00, -2.551373322078732e+00, -2.576709756392400e+00, -2.634706785860725e+00, -2.634706785860725e+00, -9.405188263476976e-01, -1.047344680346035e+00, -8.979218401919038e-01, -9.589080861689835e-01, -9.765093095341019e-01, -9.765093095341019e-01, -2.643511486097505e-01, -3.787411176091937e-01, -2.648625870281206e-01, -3.082813507313755e+00, -2.903868748817117e-01, -2.903868748817117e-01, -1.293141522161936e-01, -1.270865792491371e-01, -1.053003125625223e-01, -2.132766769531208e-01, -1.184907908703946e-01, -1.184907908703946e-01, -1.013384734002936e+00, -9.986234023744902e-01, -1.003592706887054e+00, -1.007629607562983e+00, -1.005584179231818e+00, -1.005584179231818e+00, -9.871301901775923e-01, -8.136510573252322e-01, -8.617370990549047e-01, -9.075094853613606e-01, -8.842406013710931e-01, -8.842406013710931e-01, -1.090582381503274e+00, -4.394375080971791e-01, -5.016876307385435e-01, -6.190616563272953e-01, -5.568824313521946e-01, -5.568824313521945e-01, -7.487277651857510e-01, -1.779745860034687e-01, -2.015847058741531e-01, -6.048830962772227e-01, -2.432905257372148e-01, -2.432905257372148e-01, -1.288291402704562e-01, -1.479913489404209e-01, -1.288573226253560e-01, -2.398679792518308e-01, -1.110711605560276e-01, -1.110711605560277e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fco_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.657234755650700e-07, -1.657257268698819e-07, -1.657317014702778e-07, -1.656949207870896e-07, -1.657246968347027e-07, -1.657246968347027e-07, 3.020024789804590e-06, 3.020913486869286e-06, 3.045089295485904e-06, 3.001986392862701e-06, 3.020451198999388e-06, 3.020451198999388e-06, -3.902750650803140e-03, -3.934921562021710e-03, -4.798522040287901e-03, -4.626087959024898e-03, -3.914415324342855e-03, -3.914415324342855e-03, -8.751486050882036e-01, -8.448345999611345e-01, -1.430518938617204e-03, -2.411896412661198e+00, -8.661072514590344e-01, -8.661072514590344e-01, -6.240953680045612e+03, -5.520133109584408e+03, -8.134128720152411e+01, -3.051147657352954e+04, -5.747000441165284e+03, -5.747000441165284e+03, 9.583240096184043e-07, 9.569382861067790e-07, 9.581799910503776e-07, 9.571026805151164e-07, 9.576198801744135e-07, 9.576198801744135e-07, -4.508914239579058e-05, -4.266362403870584e-05, -4.709777849401109e-05, -4.515427336575262e-05, -4.087833381430381e-05, -4.087833381430381e-05, -5.918215921561146e-03, 4.664871360579646e-05, -7.970384235444054e-03, -3.841889519173821e-03, -4.532232557767888e-03, -4.532232557767888e-03, -6.291576744522913e+00, -7.228981406652994e-01, -6.742760330219371e+00, 1.758644419077023e-04, -4.127239057851312e+00, -4.127239057851312e+00, -3.376936026801551e+04, -2.604800266128590e+04, -8.297567673910897e+04, -2.996546556730657e+01, -3.873474888510727e+04, -3.873474888510723e+04, 5.921538311406725e-03, -6.098782062797497e-04, 7.170190031102546e-04, 2.247374991182285e-03, 1.404792281494652e-03, 1.404792281494642e-03, 8.519209516302393e-03, -1.342028883467386e-02, -1.029415919056992e-02, -7.273676333470511e-03, -8.853558815672270e-03, -8.853558815672267e-03, 3.857888300889839e-04, -3.160904597294009e-01, -1.707769859188837e-01, -6.832174365008965e-02, -1.094573042727817e-01, -1.094573042727818e-01, -2.163034320050451e-02, -9.835914105215352e+01, -3.988558212079499e+01, -9.351296439489501e-02, -1.332778112212415e+01, -1.332778112212415e+01, -3.728493747669185e+03, 6.739773250176569e+05, -8.591040328032314e+04, -1.610220862137205e+01, -6.666281819160820e+04, -6.666281819160833e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
