
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_vv10_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.130928618946017e+01, -2.130929918422565e+01, -2.130944951648189e+01, -2.130925427600916e+01, -2.130934341844840e+01, -2.130934341844840e+01, -3.597014096998912e+00, -3.596960702421823e+00, -3.595813189517926e+00, -3.598483357024617e+00, -3.597036034532947e+00, -3.597036034532947e+00, -7.504766884854694e-01, -7.504352412280968e-01, -7.505054414470560e-01, -7.556145464678631e-01, -7.533962077644178e-01, -7.533962077644178e-01, -2.292263434527370e-01, -2.311588956983330e-01, -8.628507748190668e-01, -1.896829249042798e-01, -2.205257122910642e-01, -2.205257122910640e-01, -2.408411706262818e-02, -2.471434345533052e-02, -7.586766241513666e-02, -1.744755142778359e-02, -2.081896611153665e-02, -2.081896611153665e-02, -5.132714287569644e+00, -5.131525423494928e+00, -5.132673031065929e+00, -5.131623218841050e+00, -5.132103734721883e+00, -5.132103734721883e+00, -2.224344660250236e+00, -2.234606374835644e+00, -2.225604129679742e+00, -2.234744102341981e+00, -2.229314948060920e+00, -2.229314948060920e+00, -6.308747626678796e-01, -6.580120288263164e-01, -5.906035087674590e-01, -5.893035768354842e-01, -6.374359724437909e-01, -6.374359724437909e-01, -1.482644538875637e-01, -2.412547131820953e-01, -1.397918058416630e-01, -1.882664249059326e+00, -1.621713235902621e-01, -1.621713235902621e-01, -1.452943316096267e-02, -1.693563831003143e-02, -1.200905762838167e-02, -1.036830503484173e-01, -1.484352163088246e-02, -1.484352163088248e-02, -6.101709542036302e-01, -6.081256635004533e-01, -6.085020407040503e-01, -6.090747679360931e-01, -6.087552479689609e-01, -6.087552479689609e-01, -5.950085930310325e-01, -5.561433468289650e-01, -5.647542998785852e-01, -5.722368270974278e-01, -5.681735780730640e-01, -5.681735780730640e-01, -6.884497110421505e-01, -2.907905524063099e-01, -3.329929890834834e-01, -4.035545252392922e-01, -3.662358122566672e-01, -3.662358122566672e-01, -5.148979760364690e-01, -7.423437971565863e-02, -9.119478270175113e-02, -3.814836323697727e-01, -1.210774340495128e-01, -1.210774340495128e-01, -3.029525037394539e-02, -6.536093217550932e-03, -1.098566527238842e-02, -1.158756320589588e-01, -1.380779986771160e-02, -1.380779986771159e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_vv10_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.423636732215710e+01, -2.423633986598200e+01, -2.423648941307518e+01, -2.423642890400276e+01, -2.423683764606504e+01, -2.423693788022066e+01, -2.423545523995798e+01, -2.423518105679486e+01, -2.423643795425713e+01, -2.423585470885404e+01, -2.423643795425713e+01, -2.423585470885404e+01, -3.984891898250593e+00, -3.984959676800420e+00, -3.984924971770954e+00, -3.984993172139236e+00, -3.985731126741620e+00, -3.985926787274621e+00, -3.984969872309619e+00, -3.985151759787872e+00, -3.984224946187899e+00, -3.985893940460092e+00, -3.984224946187899e+00, -3.985893940460092e+00, -8.276368815204883e-01, -8.288525245894969e-01, -8.267485756763518e-01, -8.281909919595177e-01, -8.110912756114573e-01, -8.103092039081761e-01, -8.165398314362501e-01, -8.167354232691242e-01, -8.228778553971698e-01, -8.162449997156543e-01, -8.228778553971698e-01, -8.162449997156543e-01, -2.440025246353230e-01, -2.487393755978021e-01, -2.471048701515543e-01, -2.525348462471741e-01, -9.440242012027449e-01, -9.656417010659071e-01, -1.918264240228007e-01, -1.937947417119942e-01, -2.349481437403639e-01, -1.602870359434460e-01, -2.349481437403637e-01, -1.602870359434459e-01, -1.902391396474737e-02, -1.977386324848967e-02, -1.948771734266865e-02, -2.035206873919333e-02, -6.623826466187763e-02, -6.901485551252613e-02, -1.404813499272960e-02, -1.394323082367496e-02, -1.773099801183171e-02, -1.147343357327654e-02, -1.773099801183170e-02, -1.147343357327653e-02, -6.119060776534446e+00, -6.117532708645460e+00, -6.123477953492555e+00, -6.121806255669320e+00, -6.119294922036000e+00, -6.117675224572015e+00, -6.123089988141643e+00, -6.121552010977202e+00, -6.121325940444200e+00, -6.119678900582561e+00, -6.121325940444200e+00, -6.119678900582561e+00, -2.305702393334496e+00, -2.305602695923781e+00, -2.319491857132435e+00, -2.318984104662424e+00, -2.299620319849089e+00, -2.300375698301660e+00, -2.311397128703474e+00, -2.312414175301731e+00, -2.317782086289386e+00, -2.314305857657913e+00, -2.317782086289386e+00, -2.314305857657913e+00, -7.421203786206400e-01, -7.407157795751814e-01, -8.494246081764983e-01, -8.505830109259930e-01, -6.772039263313009e-01, -6.970167140614780e-01, -7.418769513639143e-01, -7.589511400629173e-01, -7.709442591904521e-01, -7.404630749312122e-01, -7.709442591904523e-01, -7.404630749312122e-01, -1.434961334414135e-01, -1.442535951083533e-01, -2.477014362521276e-01, -2.485239900469808e-01, -1.321864653811225e-01, -1.373563538256160e-01, -2.431823344066540e+00, -2.430988249996849e+00, -1.597389395051851e-01, -1.630178455696360e-01, -1.597389395051851e-01, -1.630178455696360e-01, -1.141485400710215e-02, -1.185159995286434e-02, -1.346988193198192e-02, -1.370027727864822e-02, -9.519075458770381e-03, -9.756525201300645e-03, -9.710933888279508e-02, -9.777845402831627e-02, -1.032483514530765e-02, -1.255044712192111e-02, -1.032483514530766e-02, -1.255044712192113e-02, -7.996203351781608e-01, -8.021200202195803e-01, -7.854830144670781e-01, -7.882710792985654e-01, -7.912791318725868e-01, -7.940153780044861e-01, -7.955373595148632e-01, -7.981078514996415e-01, -7.934921271711899e-01, -7.961421194154540e-01, -7.934921271711899e-01, -7.961421194154540e-01, -7.803051690211646e-01, -7.822446294815256e-01, -6.233158929146405e-01, -6.251156135335236e-01, -6.530052524890610e-01, -6.553183711332645e-01, -6.967460939478116e-01, -6.988706197096675e-01, -6.722485438781419e-01, -6.742808764754532e-01, -6.722485438781419e-01, -6.742808764754532e-01, -8.847675392684708e-01, -8.872838911434414e-01, -3.052002886630341e-01, -3.062309203565068e-01, -3.586435226299303e-01, -3.602804738201445e-01, -4.558837462761269e-01, -4.574378663595967e-01, -4.054501789916818e-01, -4.050857007085635e-01, -4.054501789916816e-01, -4.050857007085635e-01, -5.779637641398266e-01, -5.804612254759998e-01, -6.563522288938962e-02, -6.597014309662844e-02, -8.245091323303595e-02, -8.443354410150894e-02, -4.396581483557741e-01, -4.438765087380159e-01, -1.149480890877673e-01, -1.181125455175157e-01, -1.149480890877674e-01, -1.181125455175157e-01, -2.432847835501636e-02, -2.483837855215396e-02, -5.377311484122575e-03, -5.086325637555449e-03, -8.652246626894565e-03, -8.924687639084366e-03, -1.102806185810786e-01, -1.117191751399702e-01, -9.306256569620017e-03, -1.185560952186801e-02, -9.306256569620005e-03, -1.185560952186802e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_vv10_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.125304101546288e-08, 3.855567579455844e-10, -2.125316344722641e-08, -2.125291038613298e-08, 3.855637563905792e-10, -2.125306750427189e-08, -2.125224351777478e-08, 3.855734091993355e-10, -2.125218547884222e-08, -2.125373714824164e-08, 3.854697494807899e-10, -2.125407285905627e-08, -2.125299291068460e-08, 3.855271085313426e-10, -2.125312285429153e-08, -2.125299291068460e-08, 3.855271085313426e-10, -2.125312285429153e-08, -2.660130568464902e-05, 2.158879157656427e-06, -2.661700008335403e-05, -2.660251373741043e-05, 2.159323527660124e-06, -2.661932417470366e-05, -2.664340656713351e-05, 2.169371669283230e-06, -2.665478276430280e-05, -2.655561240979340e-05, 2.149943255801801e-06, -2.656967309088000e-05, -2.661409282706807e-05, 2.159156568071321e-06, -2.660333860598226e-05, -2.661409282706807e-05, 2.159156568071321e-06, -2.660333860598226e-05, -1.335538970929546e-02, 3.586683876242116e-03, -1.363085474954553e-02, -1.328785112151518e-02, 3.559577090514688e-03, -1.362433630960707e-02, -1.262884830548575e-02, 2.876045381924161e-03, -1.222436987847662e-02, -1.207189543053901e-02, 2.810968523930000e-03, -1.220902371353168e-02, -1.430524956504953e-02, 2.852692094259074e-03, -1.011600275807560e-02, -1.430524956504953e-02, 2.852692094259074e-03, -1.011600275807560e-02, -1.043384514596919e+00, 3.108902575321890e-01, -9.678097835892849e-01, -1.037348677059854e+00, 3.280826843588528e-01, -9.496603024478427e-01, -7.886479738628669e-03, 1.940414170439823e-03, -7.855246865339966e-03, -1.763617510812025e+00, 2.258949661124237e-01, -1.690987319187349e+00, -9.381378058345273e-01, 1.882246441728870e-01, -3.768036042226779e+00, -9.381378058345274e-01, 1.882246441728873e-01, -3.768036042226780e+00, -4.050958145145034e+03, 8.471332723898200e-03, -3.483822559996218e+03, -3.693416497340216e+03, 9.964515393423459e-03, -3.120428601823365e+03, -4.294595589860534e+01, 5.126941006152715e-02, -3.759143896512563e+01, -1.334195303354380e+04, 3.008683449168684e-03, -1.374085100262250e+04, -5.333703888147631e+03, 4.414566270491809e-03, -3.004905907778348e+04, -5.333703888147643e+03, 4.414566270088269e-03, -3.004905907778349e+04, -5.995857557115866e-06, 5.666948009101149e-07, -6.001857260337979e-06, -5.989671176705887e-06, 5.704413223836728e-07, -5.995826342257425e-06, -5.995522197669596e-06, 5.668443577206054e-07, -6.001623770266742e-06, -5.990172152272969e-06, 5.701514261968389e-07, -5.996196433951888e-06, -5.992745828182492e-06, 5.686004611431787e-07, -5.998847431508069e-06, -5.992745828182492e-06, 5.686004611431787e-07, -5.998847431508069e-06, -1.574633574160063e-04, 1.221811741084532e-05, -1.574889217767673e-04, -1.554589604111193e-04, 1.218856108878283e-05, -1.555700086276104e-04, -1.545022806674014e-04, 1.161795009824474e-05, -1.555193062398767e-04, -1.528359687918894e-04, 1.159619612758267e-05, -1.537564474289297e-04, -1.585267461478210e-04, 1.250231835492394e-05, -1.566812065094056e-04, -1.585267461478210e-04, 1.250231835492394e-05, -1.566812065094056e-04, -2.991699123025504e-02, 1.180452397706796e-02, -3.033074446020388e-02, -1.683425413588922e-02, 1.489938286408802e-02, -1.656910787227678e-02, -4.194260295719209e-02, 1.535577972946644e-02, -3.679942220480953e-02, -3.426133017402581e-02, 2.278859644535717e-02, -2.892803463621227e-02, -2.586732812555928e-02, 1.179162458306085e-02, -3.264662688312135e-02, -2.586732812555921e-02, 1.179162458306085e-02, -3.264662688312134e-02, -3.700870779802720e+00, 1.261488607621168e-01, -3.659919267362658e+00, -7.204522316044649e-01, 1.139695105238702e-01, -7.111676369101723e-01, -4.838562615184267e+00, 1.279112469154852e-01, -4.272808369460710e+00, -2.275912429571569e-04, 1.207887057881010e-04, -2.279602905196654e-04, -2.926197292006344e+00, 2.409472748596690e-01, -2.938628531097271e+00, -2.926197292006344e+00, 2.409472748596690e-01, -2.938628531097271e+00, -3.049111464493063e+04, 2.933546798259037e-03, -2.623992449906556e+04, -1.578797541365349e+04, 3.699144102256803e-03, -1.475078699730994e+04, -6.354242458778060e+04, 3.685108437354808e-02, -5.773849854023744e+04, -1.322909511965027e+01, 1.250822448857004e-01, -1.283781131723660e+01, -4.572548912800039e+04, 1.410360645889085e-02, -2.114779069237852e+04, -4.572548912800034e+04, 1.410360646869916e-02, -2.114779069237850e+04, -1.095401589734144e-02, 2.514346072918196e-02, -1.039706854491810e-02, -2.282073852937774e-02, 2.157065992117518e-02, -2.209275994186223e-02, -1.927413389383323e-02, 2.270457728491302e-02, -1.856213836668243e-02, -1.580411326100253e-02, 2.373865089872573e-02, -1.518463557191387e-02, -1.759699616350166e-02, 2.321019190891285e-02, -1.692887187373949e-02, -1.759699616350166e-02, 2.321019190891285e-02, -1.692887187373949e-02, -7.057442355293264e-03, 2.977269840520045e-02, -6.734654452949285e-03, -4.591432213512748e-02, 1.592277215307748e-02, -4.543160257279729e-02, -4.695096216119445e-02, 1.838749842245184e-02, -4.640098027689035e-02, -4.410292492234948e-02, 2.169730037966074e-02, -4.337340751883718e-02, -4.668259174579698e-02, 1.995497716545398e-02, -4.597308013594750e-02, -4.668259174579698e-02, 1.995497716545398e-02, -4.597308013594750e-02, -1.484283510157206e-02, 1.183264719377924e-02, -1.445881956074312e-02, -3.832437121103791e-01, 8.498631964250428e-02, -3.783283803907143e-01, -2.554655941213613e-01, 7.821972418059023e-02, -2.520226839364429e-01, -1.617774973239311e-01, 6.964082434152352e-02, -1.589427848857732e-01, -2.003844557868685e-01, 7.796350422599263e-02, -2.022815655639361e-01, -2.003844557868687e-01, 7.796350422599266e-02, -2.022815655639361e-01, -6.240716103074902e-02, 2.285950305464996e-02, -6.155984462814654e-02, -4.352388639290437e+01, 4.213028450134424e-02, -4.281004989683282e+01, -2.081226950814455e+01, 6.458066222247318e-02, -1.937547657141735e+01, -2.278668427400113e-01, 1.099497136873529e-01, -2.176664430094238e-01, -8.073295219169326e+00, 2.182010199987041e-01, -7.748536945290764e+00, -8.073295219169314e+00, 2.182010199987039e-01, -7.748536945290773e+00, -1.552840429779259e+03, 1.056259116938041e-02, -1.435711859846607e+03, -6.154192494134214e+05, 4.011531506685853e-03, -7.692188660043788e+05, -9.214677352527792e+04, 5.020763908060611e-03, -8.147028027389753e+04, -9.338671948900158e+00, 2.002688123716920e-01, -8.925329889340437e+00, -6.950199092613162e+04, 1.800188742308661e-02, -2.647959104382776e+04, -6.950199092613185e+04, 1.800188743452388e-02, -2.647959104382781e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
