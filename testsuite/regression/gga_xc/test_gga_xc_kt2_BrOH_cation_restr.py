
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.349700268266129e+01, -2.349700394969299e+01, -2.349713248714762e+01, -2.349711112810970e+01, -2.349710483065814e+01, -2.349710483065814e+01, -4.008436969860765e+00, -4.008346387076106e+00, -4.006350886133718e+00, -4.010574538076336e+00, -4.008423870539290e+00, -4.008423870539290e+00, -8.110188966940561e-01, -8.112955889465965e-01, -8.215637173142337e-01, -8.279038168855072e-01, -8.250717486917981e-01, -8.250717486917981e-01, -1.955813249769239e-01, -1.983614710608428e-01, -9.478004105883262e-01, -1.505576330909380e-01, -1.680140034646823e-01, -1.680140034646823e-01, -8.177241767474816e-03, -8.589361343038617e-03, -4.335549864877057e-02, -4.815470341889756e-03, -6.005288976605256e-03, -6.005288976605256e-03, -5.631808890989518e+00, -5.629770029653575e+00, -5.631733304891775e+00, -5.629933058425699e+00, -5.630764854702433e+00, -5.630764854702433e+00, -2.665856133428407e+00, -2.669643740303591e+00, -2.687552744157796e+00, -2.690583201958136e+00, -2.657769051977325e+00, -2.657769051977325e+00, -6.585929767467740e-01, -6.848949362389555e-01, -6.103028643184162e-01, -6.103052719373612e-01, -6.657353624969469e-01, -6.657353624969469e-01, -1.066511988316946e-01, -1.968118976371914e-01, -9.909921319670012e-02, -2.022143748624945e+00, -1.239607121963251e-01, -1.239607121963251e-01, -3.744442088486255e-03, -4.710909935087861e-03, -3.630930234987192e-03, -6.825573388340220e-02, -4.350510187289888e-03, -4.350510187289888e-03, -6.269793163601135e-01, -6.297354753770098e-01, -6.287766736081061e-01, -6.279696977706705e-01, -6.283734227778967e-01, -6.283734227778967e-01, -6.087058451187711e-01, -5.655589051081455e-01, -5.795413165220541e-01, -5.916216596252352e-01, -5.854499174809914e-01, -5.854499174809914e-01, -7.191925336340259e-01, -2.476260699423973e-01, -2.965088163086931e-01, -3.874888337559993e-01, -3.389877934483611e-01, -3.389877934483611e-01, -5.156045292399991e-01, -4.160902379045860e-02, -5.565218000001250e-02, -3.699353452673824e-01, -8.561628888817176e-02, -8.561628888817177e-02, -1.137487516102951e-02, -1.299286379433252e-03, -2.685937011533932e-03, -8.070829274756068e-02, -4.034899125788766e-03, -4.034899125788762e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.554925468742503e+01, -2.554941110407179e+01, -2.554999141922748e+01, -2.554766658405216e+01, -2.554890113174570e+01, -2.554890113174570e+01, -4.034362132848898e+00, -4.034502806439760e+00, -4.037850272084706e+00, -4.032783156377968e+00, -4.034626686983391e+00, -4.034626686983391e+00, -8.396308391026926e-01, -8.378586339617421e-01, -7.930602666096338e-01, -7.982785108467263e-01, -7.984494114388381e-01, -7.984494114388381e-01, -2.550806981997113e-01, -2.587353280062795e-01, -9.477578839366556e-01, -1.966451456928579e-01, -2.193698055049994e-01, -2.193698055049994e-01, -1.079539693070199e-02, -1.133727735935047e-02, -5.688347680986704e-02, -6.369785929818516e-03, -7.937370335693583e-03, -7.937370335693583e-03, -6.471128767788779e+00, -6.476389048381031e+00, -6.471356149172979e+00, -6.476000271449750e+00, -6.473804086194622e+00, -6.473804086194622e+00, -1.775618216502190e+00, -1.808223078383687e+00, -1.719433913045921e+00, -1.748654596022779e+00, -1.820403928367606e+00, -1.820403928367606e+00, -7.922778829334751e-01, -8.774645003507845e-01, -7.392039923608607e-01, -7.810350876304570e-01, -8.060931794201498e-01, -8.060931794201498e-01, -1.395272241786189e-01, -2.554359908786630e-01, -1.297024333116620e-01, -2.528437401266959e+00, -1.621578327166109e-01, -1.621578327166109e-01, -4.957227553712976e-03, -6.231951491296109e-03, -4.807427470600956e-03, -8.945621028843945e-02, -5.756756137009222e-03, -5.756756137009222e-03, -8.209388762524582e-01, -8.119438440079392e-01, -8.150903520565107e-01, -8.177032174797545e-01, -8.163945151881307e-01, -8.163945151881307e-01, -8.008538752704648e-01, -6.718192978238328e-01, -7.062030803926100e-01, -7.424906663856463e-01, -7.237965467982672e-01, -7.237965467982672e-01, -9.156742743892800e-01, -3.187360831960509e-01, -3.791119195900042e-01, -4.932899845667832e-01, -4.322795444231992e-01, -4.322795444231992e-01, -6.267707221513072e-01, -5.459734728216988e-02, -7.296629983049244e-02, -4.771338528206813e-01, -1.121631929319088e-01, -1.121631929319088e-01, -1.499701342327830e-02, -1.724930232451579e-03, -3.559466791972827e-03, -1.057468431846914e-01, -5.340467670584049e-03, -5.340467670584041e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.456875388159532e-08, -1.456859136131286e-08, -1.456781870682645e-08, -1.457023779814198e-08, -1.456897731227614e-08, -1.456897731227614e-08, -2.072110133584341e-05, -2.072092256256626e-05, -2.071476209220954e-05, -2.070974930737685e-05, -2.071889050874426e-05, -2.071889050874426e-05, -9.991834262785215e-03, -1.002126085716725e-02, -1.075221055002394e-02, -1.052519190872449e-02, -1.057313025723073e-02, -1.057313025723073e-02, -2.973531169936327e-02, -2.971906257281380e-02, -6.380322037026571e-03, -2.991155332910673e-02, -2.985961459039836e-02, -2.985961459039835e-02, -2.999999960784869e-02, -2.999999951870602e-02, -2.999955408869025e-02, -2.999999995637297e-02, -2.999999989122942e-02, -2.999999989122942e-02, -4.125901428976495e-06, -4.122873387391456e-06, -4.125750550578988e-06, -4.123077500452938e-06, -4.124372320638429e-06, -4.124372320638429e-06, -2.053043725929537e-04, -1.994930458438085e-04, -2.096803917115833e-04, -2.043976690865090e-04, -2.000319898913317e-04, -2.000319898913317e-04, -1.380966883379668e-02, -1.139435408104428e-02, -1.613404134715472e-02, -1.497370119220113e-02, -1.333424995459325e-02, -1.333424995459325e-02, -2.997940246690328e-02, -2.973371448261174e-02, -2.998490969293967e-02, -2.216666287359384e-04, -2.996095820775853e-02, -2.996095820775853e-02, -2.999999998453858e-02, -2.999999996015443e-02, -2.999999998637845e-02, -2.999691075464514e-02, -2.999999997131019e-02, -2.999999997131019e-02, -1.366538747140105e-02, -1.383677194084215e-02, -1.377631465177844e-02, -1.372663992836519e-02, -1.375149053841933e-02, -1.375149053841933e-02, -1.448647218275721e-02, -1.896911373636437e-02, -1.765513773950951e-02, -1.636858886382651e-02, -1.702241144575327e-02, -1.702241144575327e-02, -1.009260831240348e-02, -2.933067597602328e-02, -2.864046264879647e-02, -2.621253475233856e-02, -2.771000222510246e-02, -2.771000222510246e-02, -2.116018408683360e-02, -2.999962577937851e-02, -2.999870720394697e-02, -2.667167890997857e-02, -2.999188054322394e-02, -2.999188054322394e-02, -2.999999844425039e-02, -2.999999999979656e-02, -2.999999999605086e-02, -2.999368614516538e-02, -2.999999997896794e-02, -2.999999997896794e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
