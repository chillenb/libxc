
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.125293601872982e+01, -2.125298954308206e+01, -2.125326304586265e+01, -2.125238589185615e+01, -2.125296395542262e+01, -2.125296395542262e+01, -3.523470840339471e+00, -3.523471913704183e+00, -3.523644986617350e+00, -3.524081653744768e+00, -3.523486135196485e+00, -3.523486135196485e+00, -7.267500507199074e-01, -7.265070998749658e-01, -7.232936815172988e-01, -7.277219057971503e-01, -7.266586671492348e-01, -7.266586671492348e-01, -2.372974572334330e-01, -2.383315319728740e-01, -8.507333079073396e-01, -2.033515391174750e-01, -2.375768299946738e-01, -2.375768299946738e-01, -1.562211278461054e-02, -1.648887537950578e-02, -8.255887969599292e-02, -6.712203780876308e-03, -1.628708458704741e-02, -1.628708458704741e-02, -5.236043852080643e+00, -5.237082470410376e+00, -5.236152665114908e+00, -5.236960188309814e+00, -5.236572334471189e+00, -5.236572334471189e+00, -2.085375511422782e+00, -2.095459996992684e+00, -2.085695255023002e+00, -2.093410179576062e+00, -2.092260747599672e+00, -2.092260747599672e+00, -6.196848817984248e-01, -6.572752915544704e-01, -5.905467516969070e-01, -6.029851992829538e-01, -6.402739124835303e-01, -6.402739124835303e-01, -1.724046260678201e-01, -2.628793064128197e-01, -1.680569421481524e-01, -1.955758781152141e+00, -1.840950095749646e-01, -1.840950095749646e-01, -6.444279862989880e-03, -7.498643804081251e-03, -5.410254329474483e-03, -1.140166156884326e-01, -6.745336536983058e-03, -6.745336536983070e-03, -6.259592375326447e-01, -6.215395996287040e-01, -6.222489629692297e-01, -6.232862881716097e-01, -6.226941443693887e-01, -6.226941443693887e-01, -6.078621058166445e-01, -5.510337121871047e-01, -5.655235416420650e-01, -5.790922031416196e-01, -5.721249202842145e-01, -5.721249202842145e-01, -6.886793194802251e-01, -3.056430125964654e-01, -3.382737403918021e-01, -3.970317319683070e-01, -3.644421158921680e-01, -3.644421158921680e-01, -5.017573886036154e-01, -7.656295078447410e-02, -1.044040338713580e-01, -3.702312561298546e-01, -1.412351443262426e-01, -1.412351443262426e-01, -1.881599616758801e-02, -1.791791092711042e-03, -3.602704910933882e-03, -1.336234285688941e-01, -5.612880921955691e-03, -5.612880921955646e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.852968248463089e+01, -2.852977849959267e+01, -2.853021914708945e+01, -2.852864653961434e+01, -2.852973301689513e+01, -2.852973301689513e+01, -4.576671683800531e+00, -4.576728520556980e+00, -4.578474301287343e+00, -4.576428525212554e+00, -4.576720362931479e+00, -4.576720362931479e+00, -8.507316974103460e-01, -8.487625884002266e-01, -7.897019942866785e-01, -7.979259208764083e-01, -8.500205550627045e-01, -8.500205550627045e-01, -2.316179954740803e-01, -2.365511854276808e-01, -1.045433553842052e+00, -1.590924959705837e-01, -2.331370297643518e-01, -2.331370297643518e-01, -2.152722887241601e-02, -2.270875414117219e-02, -9.939704488275795e-02, -9.237609760001441e-03, -2.242925597084180e-02, -2.242925597084180e-02, -7.002945513769349e+00, -7.005045270174931e+00, -7.003162770294531e+00, -7.004795512982314e+00, -7.004020709274440e+00, -7.004020709274440e+00, -2.262362095100801e+00, -2.291975245468476e+00, -2.235790763387632e+00, -2.259185175923169e+00, -2.315985407062060e+00, -2.315985407062060e+00, -7.746193621312065e-01, -8.602734015326996e-01, -7.342823987034994e-01, -7.767240146720734e-01, -8.061973531258978e-01, -8.061973531258978e-01, -1.438565787589040e-01, -2.066251667931509e-01, -1.397253073597946e-01, -2.602589902334167e+00, -1.444394090873925e-01, -1.444394090873925e-01, -8.865232652328338e-03, -1.032906085853487e-02, -7.425068021921724e-03, -1.195209750685450e-01, -9.279921293694522e-03, -9.279921293694506e-03, -8.390601604852230e-01, -8.158236582849663e-01, -8.231827217945806e-01, -8.298604951841528e-01, -8.264261674455370e-01, -8.264261674455369e-01, -8.153725462056165e-01, -6.594729821760249e-01, -6.996831994339151e-01, -7.330747875587099e-01, -7.163383367521041e-01, -7.163383367521040e-01, -8.999023633737778e-01, -2.656299033719342e-01, -3.351850543735753e-01, -4.610542474114561e-01, -3.968518919850269e-01, -3.968518919850269e-01, -5.940754770538513e-01, -9.517987367088138e-02, -1.170136203708456e-01, -4.422067496751982e-01, -1.271258196957505e-01, -1.271258196957503e-01, -2.591355161791518e-02, -2.433079528729287e-03, -4.926573864501634e-03, -1.212622793060266e-01, -7.707408532866835e-03, -7.707408532866817e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.629172911853015e-10, 5.629866515935606e-10, 5.631851597049781e-10, 5.620514803186825e-10, 5.629547967849526e-10, 5.629547967849526e-10, -1.607485901336990e-06, -1.606865031744347e-06, -1.589514409618004e-06, -1.617862525582733e-06, -1.607135279157110e-06, -1.607135279157110e-06, -3.593386205238351e-03, -3.625343110410177e-03, -4.610288066030116e-03, -4.438282921211263e-03, -3.604920728067034e-03, -3.604920728067034e-03, -6.284772806729859e-01, -5.978328939713207e-01, -1.468626856322642e-03, -1.726038071800336e+00, -6.190639396492907e-01, -6.190639396492907e-01, -9.422135935696165e+00, -9.643898773373401e+00, -6.413926591782446e+00, -4.717371212204531e+00, -9.966225186922530e+00, -9.966225186922530e+00, 1.610636895002434e-07, 1.648427536548940e-07, 1.614412433995632e-07, 1.643798582200778e-07, 1.630152172634411e-07, 1.630152172634411e-07, -5.752897412974340e-05, -5.496625534940783e-05, -5.960197632503324e-05, -5.754128884820048e-05, -5.317795158852191e-05, -5.317795158852191e-05, -6.123114505799184e-03, -3.907180644361683e-03, -7.705071708185577e-03, -8.038377704928769e-03, -5.302496522772698e-03, -5.302496522772698e-03, -2.970425294406572e+00, -6.075439231819293e-01, -3.272970700846269e+00, 5.886972028858943e-06, -2.556640708077036e+00, -2.556640708077036e+00, -4.915189790874800e+00, -5.260251776787302e+00, -1.300223895111175e+01, -6.065836047983172e+00, -7.409009289111541e+00, -7.409009289116846e+00, 1.605817173303403e-02, -4.284638829906469e-03, -1.035861492756135e-03, 3.700346430986086e-03, 9.989663259000910e-04, 9.989663259000925e-04, 3.014831932585633e-02, -1.113948251330088e-02, -9.467690572454357e-03, -9.345164575137677e-03, -9.262653880473226e-03, -9.262653880473221e-03, -3.351340395888213e-03, -2.754538632076657e-01, -1.413048522309261e-01, -5.093794767620479e-02, -8.428271460425821e-02, -8.428271460425839e-02, -1.735912770060470e-02, -5.474072120028119e+00, -5.485364914261512e+00, -6.968695096139478e-02, -5.081872974084374e+00, -5.081872974084374e+00, -7.625593374802771e+00, -4.773454970148410e+00, -5.628686672347442e+00, -6.053108645366410e+00, -9.971037849461032e+00, -9.971037849488399e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
