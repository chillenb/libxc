
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.330640335886424e+01, -2.330641659449186e+01, -2.330657824999936e+01, -2.330637924262331e+01, -2.330646888344500e+01, -2.330646888344500e+01, -3.945802516170697e+00, -3.945728295006796e+00, -3.944109945620761e+00, -3.947666999286540e+00, -3.945807595943370e+00, -3.945807595943370e+00, -8.035414011129008e-01, -8.038001293968156e-01, -8.145684250089759e-01, -8.204082743376132e-01, -8.176944533751345e-01, -8.176944533751345e-01, -2.192376925922451e-01, -2.207311931329421e-01, -9.342932270396921e-01, -1.824872536122627e-01, -1.968767650498374e-01, -1.968767650498374e-01, -1.256631518565982e-02, -1.322383698413449e-02, -6.567600630120699e-02, -7.266663631903433e-03, -9.126965656719390e-03, -9.126965656719393e-03, -5.607083003679353e+00, -5.605740964073404e+00, -5.607036143081880e+00, -5.605851086227751e+00, -5.606393860205499e+00, -5.606393860205499e+00, -2.583748824095472e+00, -2.588269779640302e+00, -2.602898142619452e+00, -2.606561295822734e+00, -2.577322871393176e+00, -2.577322871393176e+00, -6.592078232864572e-01, -6.918632193275494e-01, -6.118445004423333e-01, -6.159516610156388e-01, -6.666811670132810e-01, -6.666811670132810e-01, -1.352799503817854e-01, -2.320068220943388e-01, -1.267490389099536e-01, -2.034675295623392e+00, -1.550897154457390e-01, -1.550897154457390e-01, -5.608377352265635e-03, -7.103872469719102e-03, -5.432322237395001e-03, -9.334550939057493e-02, -6.543393085022491e-03, -6.543393085022491e-03, -6.362543718884506e-01, -6.367008134546585e-01, -6.365090265656654e-01, -6.363738000908806e-01, -6.364374622511272e-01, -6.364374622511272e-01, -6.184550638612253e-01, -5.695711701794454e-01, -5.818550278592979e-01, -5.950486366982555e-01, -5.879791823002445e-01, -5.879791823002445e-01, -7.257916676593477e-01, -2.806342049737962e-01, -3.214808828112636e-01, -3.961131917208417e-01, -3.547114987391567e-01, -3.547114987391567e-01, -5.214259572983281e-01, -6.346005135307094e-02, -7.872348115253031e-02, -3.754673769486910e-01, -1.134345795598747e-01, -1.134345795598748e-01, -1.771121843462619e-02, -1.900620166924656e-03, -3.988053095719896e-03, -1.079131288170236e-01, -6.055150552085196e-03, -6.055150552085191e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.642011591723960e+01, -2.642027557486836e+01, -2.642086985732752e+01, -2.641849678406908e+01, -2.641975668289574e+01, -2.641975668289574e+01, -4.167195232540299e+00, -4.167343157578433e+00, -4.170860258626123e+00, -4.165521121092024e+00, -4.167471566925657e+00, -4.167471566925657e+00, -8.318465901157379e-01, -8.294204851786747e-01, -7.669283208830953e-01, -7.734934029554540e-01, -7.739992491454323e-01, -7.739992491454323e-01, -2.227222589778682e-01, -2.250712492700745e-01, -9.554828986006217e-01, -2.015408967159270e-01, -2.030303534865175e-01, -2.030303534865176e-01, -1.671807854479426e-02, -1.758803627329127e-02, -8.848477740979846e-02, -9.681083338709056e-03, -1.215330199811929e-02, -1.215330199811929e-02, -6.672592656494372e+00, -6.677663839201434e+00, -6.672812658787142e+00, -6.677289914042802e+00, -6.675172173877561e+00, -6.675172173877561e+00, -1.816972799254394e+00, -1.850642752761594e+00, -1.759119771429266e+00, -1.789079513045218e+00, -1.863378781576288e+00, -1.863378781576288e+00, -8.003529770056618e-01, -8.960333914969191e-01, -7.417891219946630e-01, -7.964371717565303e-01, -8.167865206983699e-01, -8.167865206983699e-01, -1.925658664795904e-01, -2.448503036267575e-01, -1.835310929745648e-01, -2.590288768439448e+00, -1.863563497918377e-01, -1.863563497918377e-01, -7.473569139711502e-03, -9.464049550046988e-03, -7.235497838665486e-03, -1.351816294523817e-01, -8.715149553281933e-03, -8.715149553281936e-03, -8.366850145690818e-01, -8.284420749877822e-01, -8.314861664996970e-01, -8.338836262605623e-01, -8.326977617426417e-01, -8.326977617426417e-01, -8.156503669498577e-01, -6.541727153696191e-01, -7.053950220738530e-01, -7.535676884559268e-01, -7.297326602421044e-01, -7.297326602421044e-01, -9.356396305676410e-01, -2.835998271482054e-01, -3.329782917223345e-01, -4.716936852455338e-01, -3.938126299858055e-01, -3.938126299858055e-01, -6.075731684308423e-01, -8.520823522569979e-02, -1.140294006252910e-01, -4.678126322913843e-01, -1.548592958529213e-01, -1.548592958529214e-01, -2.352524731393488e-02, -2.533768103999683e-03, -5.315192018063894e-03, -1.497273556690721e-01, -8.065245646113448e-03, -8.065245646113450e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.174020129275853e-08, -1.174002642742736e-08, -1.173927914791122e-08, -1.174188026601711e-08, -1.174051298188277e-08, -1.174051298188277e-08, -1.727450235144878e-05, -1.727388593549688e-05, -1.725793760570292e-05, -1.727256857841421e-05, -1.727210313091873e-05, -1.727210313091873e-05, -9.437179739770044e-03, -9.486646523958763e-03, -1.070408121495495e-02, -1.042765502518598e-02, -1.047288138756592e-02, -1.047288138756592e-02, -5.087567052286482e-01, -5.036696322103852e-01, -5.709044299923430e-03, -5.073228928605349e-01, -6.177605533755011e-01, -6.177605533754998e-01, -4.533420277845694e+00, -4.788042014439314e+00, 5.626639845916347e+00, -4.122571214867336e+00, -5.231698417364809e+00, -5.231698417365061e+00, -3.183682687843941e-06, -3.178456768577998e-06, -3.183446984794508e-06, -3.178833440116405e-06, -3.181030777289718e-06, -3.181030777289718e-06, -1.878968852171178e-04, -1.822986972852447e-04, -1.925322390087198e-04, -1.874615527005195e-04, -1.825849420704989e-04, -1.825849420704989e-04, -1.194552581884910e-02, -7.719682941746639e-03, -1.487607486763014e-02, -1.055529208588139e-02, -1.119004487050772e-02, -1.119004487050772e-02, 8.172325079139313e-01, -2.900743246097831e-01, 1.205668633745284e+00, -1.558849435401233e-04, -3.394189404448152e-01, -3.394189404448152e-01, -5.425888006417589e+00, -4.848380363564047e+00, -3.034093584212949e+01, 4.002839788653785e+00, -1.413010472765617e+01, -1.413010472765320e+01, -8.320575783742519e-03, -9.242843483853933e-03, -8.923520523704896e-03, -8.655202424932023e-03, -8.789835726529163e-03, -8.789835726529163e-03, -8.453938585990577e-03, -2.135100376865096e-02, -1.711120532451228e-02, -1.324913590699265e-02, -1.514024374404950e-02, -1.514024374404950e-02, -6.933843502137257e-03, -1.976192508100656e-01, -1.332863469506965e-01, -5.244739934176020e-02, -8.835114054792892e-02, -8.835114054792896e-02, -2.614902307956937e-02, 5.517967638089554e+00, 6.150068825481042e+00, -4.969370738527738e-02, 1.378465698008612e+00, 1.378465698008613e+00, -3.656067325351497e+00, -2.371758234932742e+01, -1.148840866313327e+01, 1.934171197834816e+00, -1.784246276709374e+01, -1.784246276708798e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
