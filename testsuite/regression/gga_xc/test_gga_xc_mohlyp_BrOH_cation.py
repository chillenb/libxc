
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mohlyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.016942678248478e+01, -2.016947025066521e+01, -2.016970084062792e+01, -2.016905337218131e+01, -2.016938731741603e+01, -2.016938731741603e+01, -3.379179942476167e+00, -3.379163327765725e+00, -3.378861502083507e+00, -3.380016722443527e+00, -3.379240160691353e+00, -3.379240160691353e+00, -7.056574421446016e-01, -7.055028608531657e-01, -7.048902011437963e-01, -7.094850137507386e-01, -7.128227818496162e-01, -7.128227818496162e-01, -2.366472763099428e-01, -2.368216032473623e-01, -8.120046249711836e-01, -2.127008267861999e-01, -2.286867748067620e-01, -2.286867748067619e-01, -1.577608806024042e-02, -1.659140178660744e-02, -8.243281977999155e-02, -9.192585507699729e-03, -1.218435756415228e-02, -1.218435756415228e-02, -4.955589300710168e+00, -4.956024799637995e+00, -4.955614839572908e+00, -4.955999156942671e+00, -4.955806591019587e+00, -4.955806591019587e+00, -2.051160593633930e+00, -2.060141698241320e+00, -2.053497275519929e+00, -2.061257311376131e+00, -2.055230700929735e+00, -2.055230700929735e+00, -6.043781294426199e-01, -6.466732489584929e-01, -5.636158248881019e-01, -5.769573707647567e-01, -6.128120102961089e-01, -6.128120102961089e-01, -1.716559123555282e-01, -2.610430190500436e-01, -1.621236446233158e-01, -1.859300062213272e+00, -1.870516163175551e-01, -1.870516163175551e-01, -7.121396859388889e-03, -8.989328562844833e-03, -6.903557585107646e-03, -1.201050180903876e-01, -8.479619691159179e-03, -8.479619691159183e-03, -6.003734476614282e-01, -5.973610787759899e-01, -5.983615486919892e-01, -5.992333885898775e-01, -5.987913882777245e-01, -5.987913882777245e-01, -5.850129239397061e-01, -5.247032306723609e-01, -5.377291328862577e-01, -5.539660121403279e-01, -5.451620077636333e-01, -5.451620077636333e-01, -6.763916782771410e-01, -3.006003180209432e-01, -3.286815352641242e-01, -3.811624235419266e-01, -3.501827755399746e-01, -3.501827755399746e-01, -4.859084477474544e-01, -7.943301082914778e-02, -1.015128206551138e-01, -3.611550926329778e-01, -1.432034660016273e-01, -1.432034660016273e-01, -2.208281805875866e-02, -2.438856050340172e-03, -5.087168680236774e-03, -1.369401681112967e-01, -7.823135375526858e-03, -7.823135375526849e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mohlyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.573603862681835e+01, -2.573600972395345e+01, -2.573616865529833e+01, -2.573610442947691e+01, -2.573653888753438e+01, -2.573664621489770e+01, -2.573506803276358e+01, -2.573477514902840e+01, -2.573611617391471e+01, -2.573549052093306e+01, -2.573611617391471e+01, -2.573549052093306e+01, -4.172575831461855e+00, -4.172970903942625e+00, -4.172646507224774e+00, -4.173062521022490e+00, -4.174573060894498e+00, -4.175083559571785e+00, -4.171896518241089e+00, -4.172444795506573e+00, -4.171760220805309e+00, -4.174177271400904e+00, -4.171760220805309e+00, -4.174177271400904e+00, -8.015646504492961e-01, -8.099849273769507e-01, -7.982778871573389e-01, -8.086260383069878e-01, -7.509468416611850e-01, -7.364128117592829e-01, -7.491093481427791e-01, -7.538888891269337e-01, -8.175836922265100e-01, -6.756738450682610e-01, -8.175836922265100e-01, -6.756738450682610e-01, -1.857567854122403e-01, -1.870339874772320e-01, -1.874439155101513e-01, -1.898983382895617e-01, -9.204559921276575e-01, -9.703265481791826e-01, -1.792025071324730e-01, -1.787233114219140e-01, -1.639884897516117e-01, -2.239881078133524e-01, -1.639884897516116e-01, -2.239881078133523e-01, -2.053027309494985e-02, -2.119915272172594e-02, -2.152709128499713e-02, -2.232417640079980e-02, -1.044223576234340e-01, -1.073850114725256e-01, -1.225537789139959e-02, -1.214919508174811e-02, -1.682420717143578e-02, -1.258503851790793e-02, -1.682420717143577e-02, -1.258503851790794e-02, -6.429194138141774e+00, -6.427662868678659e+00, -6.432010823236373e+00, -6.430387602402736e+00, -6.429349133542070e+00, -6.427756948945196e+00, -6.431768343997605e+00, -6.430230235713388e+00, -6.430638759679386e+00, -6.429033421794657e+00, -6.430638759679386e+00, -6.429033421794657e+00, -2.080597166603869e+00, -2.080479020472033e+00, -2.106386642410177e+00, -2.105646001970700e+00, -2.039474755334133e+00, -2.050706157433801e+00, -2.061885849153911e+00, -2.073168822254290e+00, -2.124745749535922e+00, -2.098887911244809e+00, -2.124745749535922e+00, -2.098887911244809e+00, -7.601172784786812e-01, -7.587551375885579e-01, -8.479684104453100e-01, -8.483847252920675e-01, -6.881789836595784e-01, -7.106870263922105e-01, -7.445742553286381e-01, -7.627327668661062e-01, -7.909903348858900e-01, -7.599323208424572e-01, -7.909903348858899e-01, -7.599323208424572e-01, -1.938580029601929e-01, -1.922376876554858e-01, -2.073252241704020e-01, -2.069891130792068e-01, -1.878274902093424e-01, -1.865173306947215e-01, -2.450456903465812e+00, -2.449491243484089e+00, -1.868877502532918e-01, -1.662340461551894e-01, -1.868877502532918e-01, -1.662340461551894e-01, -9.360494781240999e-03, -9.548029473072664e-03, -1.188621458583490e-02, -1.197955612643292e-02, -9.020359950391849e-03, -9.288204299873579e-03, -1.497519984958506e-01, -1.507347243419911e-01, -9.983248712947557e-03, -1.174723202029900e-02, -9.983248712947560e-03, -1.174723202029900e-02, -7.884327507883253e-01, -7.907431354889852e-01, -7.824085401322317e-01, -7.847766257091544e-01, -7.847442616558966e-01, -7.870984300199831e-01, -7.865077404813146e-01, -7.888251124043707e-01, -7.856466200090558e-01, -7.879809672893655e-01, -7.856466200090558e-01, -7.879809672893655e-01, -7.684183849251249e-01, -7.703301531476157e-01, -6.044053963295024e-01, -6.072513876728842e-01, -6.610005969988501e-01, -6.640079292337216e-01, -7.116139090671679e-01, -7.136304049565108e-01, -6.872694524818367e-01, -6.893917384534113e-01, -6.872694524818367e-01, -6.893917384534113e-01, -8.859085441226967e-01, -8.872468545522725e-01, -2.335107746963961e-01, -2.336157763090146e-01, -2.779507750487223e-01, -2.803187105983172e-01, -4.270824500495300e-01, -4.292248938626156e-01, -3.437663766029665e-01, -3.442632736854465e-01, -3.437663766029663e-01, -3.442632736854465e-01, -5.564884585023324e-01, -5.609298151126401e-01, -1.023064631022537e-01, -1.026756404850563e-01, -1.312486851426050e-01, -1.329963677827924e-01, -4.296500713763050e-01, -4.355299897553657e-01, -1.664499845348631e-01, -1.587821675231685e-01, -1.664499845348631e-01, -1.587821675231684e-01, -2.889135410830067e-02, -2.944355236645475e-02, -3.243131677544959e-03, -3.246694037857561e-03, -6.645917251230274e-03, -6.857511828859955e-03, -1.594306859273524e-01, -1.598847136368083e-01, -9.355211704302948e-03, -1.082571615454660e-02, -9.355211704302938e-03, -1.082571615454659e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mohlyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.693531174369498e-09, 7.318261885192485e-12, -5.693548666678278e-09, -5.693315613613372e-09, 7.318157561642313e-12, -5.693391872780376e-09, -5.692800328286876e-09, 7.317661581758203e-12, -5.692606354454957e-09, -5.695233957225549e-09, 7.319214498925054e-12, -5.695705542260570e-09, -5.693395730255464e-09, 7.318405418427685e-12, -5.694594151116961e-09, -5.693395730255464e-09, 7.318405418427685e-12, -5.694594151116961e-09, -9.987835380807102e-06, 9.513738192680327e-08, -9.980025075838407e-06, -9.986672596365077e-06, 9.513628809072527e-08, -9.978403802682078e-06, -9.953755064848510e-06, 9.509858772523106e-08, -9.944951600570534e-06, -1.000426022175180e-05, 9.506791175152615e-08, -9.994611839957469e-06, -9.997240753013238e-06, 9.512456803526481e-08, -9.965395485398803e-06, -9.997240753013238e-06, 9.512456803526481e-08, -9.965395485398803e-06, -9.333504921378546e-03, 5.722668394665170e-04, -8.986349451404299e-03, -9.463560618231956e-03, 5.755782842502805e-04, -9.038707091785543e-03, -1.122308363514848e-02, 6.603751205694608e-04, -1.175646424116286e-02, -1.116050777114107e-02, 6.326931289016647e-04, -1.099244069838806e-02, -8.543646644975859e-03, 6.882812988855859e-04, -1.347613117581095e-02, -8.543646644975859e-03, 6.882812988855859e-04, -1.347613117581095e-02, -2.082249322285067e+00, 3.006438275195981e-01, -1.919301223831223e+00, -2.050487041096611e+00, 2.840136267892410e-01, -1.853974295087502e+00, -5.284013893524730e-03, 2.661363987136514e-04, -4.229535396393839e-03, -3.148521384250152e+00, 8.379506868841522e-01, -3.066603734953553e+00, -1.990173227677774e+00, 1.191007055349123e+00, -4.689625332085987e+00, -1.990173227677773e+00, 1.191007055349123e+00, -4.689625332085985e+00, -1.267161388189703e+01, 5.559572541540157e-08, -1.254410366480311e+01, -1.335086907208024e+01, 2.281279975487425e-07, -1.328187956809262e+01, -2.043855614507373e+00, 9.193137126558463e+00, -2.711227352198194e+00, -1.160907187931456e+01, 2.068447771251228e-17, -1.129398866869164e+01, -1.265124958396722e+01, 5.354179441525038e-13, -3.210385336119876e+01, -1.265124958396962e+01, 5.354179441525038e-13, -3.210385336116354e+01, -1.249307787877657e-06, 1.116851553884184e-08, -1.250741965856177e-06, -1.240166648546552e-06, 1.115768888659947e-08, -1.241896857968837e-06, -1.248832005417413e-06, 1.116797745315208e-08, -1.250459595159114e-06, -1.240986212292309e-06, 1.115841682486445e-08, -1.242425718529367e-06, -1.244600670503482e-06, 1.116304835399084e-08, -1.246294342824609e-06, -1.244600670503482e-06, 1.116304835399084e-08, -1.246294342824609e-06, -1.486272932744361e-04, 2.052278567034853e-06, -1.486573061410391e-04, -1.435216555468488e-04, 1.974513865038829e-06, -1.436863530502614e-04, -1.543876980718037e-04, 2.111600953917246e-06, -1.528304440499240e-04, -1.498669014956189e-04, 2.040353844735402e-06, -1.482913556646669e-04, -1.415075298303588e-04, 1.983198725042329e-06, -1.453407588825856e-04, -1.415075298303588e-04, 1.983198725042329e-06, -1.453407588825856e-04, -1.033718586169719e-02, 1.126823304940145e-03, -1.039870547500736e-02, -2.194374376076597e-03, 7.414768169174086e-04, -2.118733764003269e-03, -1.695570401888755e-02, 1.696577770120245e-03, -1.422730264395386e-02, -4.941624957683556e-03, 1.393436076711458e-03, -4.835367448237001e-03, -8.186703153725255e-03, 1.085699881069808e-03, -9.871083473424750e-03, -8.186703153725255e-03, 1.085699881069808e-03, -9.871083473424745e-03, -3.071584837892600e+00, 2.682165679608155e+00, -3.211867488982610e+00, -1.389671943202892e+00, 2.964031301836585e-01, -1.378418478441915e+00, -3.175939634432102e+00, 3.335315162806142e+00, -3.467153879348605e+00, -2.945428939906970e-05, 2.275387119528388e-06, -2.943743403964197e-05, -3.739957924900164e+00, 1.681187409653197e+00, -4.773250164089202e+00, -3.739957924900164e+00, 1.681187409653197e+00, -4.773250164089202e+00, -1.629756557083240e+01, 2.710748349218031e-24, -1.410610913024038e+01, -1.403300198897480e+01, 6.143794430566676e-18, -1.295635882042100e+01, -7.993051059319923e+01, 2.828220310032752e-25, -8.891510493715023e+01, -3.939758668995233e+00, 7.523346507828840e+00, -3.735139587506285e+00, -3.974949337943202e+01, 4.805161393863536e-20, -3.904051089841762e+01, -3.974949337938614e+01, 4.805161393863535e-20, -3.904051089843127e+01, -4.557759992352609e-04, 1.099838589595841e-03, -4.465484185731252e-04, -2.819217363318255e-03, 1.132143065072652e-03, -2.747339172242132e-03, -2.005022775563851e-03, 1.120651550325737e-03, -1.949425760496536e-03, -1.312085179548175e-03, 1.111284491988067e-03, -1.284684485093647e-03, -1.659725355505005e-03, 1.115961480756476e-03, -1.618450286974335e-03, -1.659725355505005e-03, 1.115961480756476e-03, -1.618450286974335e-03, 3.407407389503295e-04, 1.262639139332026e-03, 3.067570902852168e-04, -3.098431420457986e-02, 2.698931764558064e-03, -3.034628452685258e-02, -2.027102057199823e-02, 2.149018205333165e-03, -1.974661706930157e-02, -1.073957074471975e-02, 1.729200465546968e-03, -1.055685351738980e-02, -1.530746951982272e-02, 1.930120926138031e-03, -1.504612404896218e-02, -1.530746951982272e-02, 1.930120926138031e-03, -1.504612404896218e-02, -2.058779518665432e-03, 5.832272821775883e-04, -1.960840626353829e-03, -7.472921443559577e-01, 1.136523650128270e-01, -7.385838721589755e-01, -4.374591122039109e-01, 5.137200479544929e-02, -4.259104525929129e-01, -1.317492537698597e-01, 1.441838233773494e-02, -1.287233251116318e-01, -2.563075396008442e-01, 2.750373863772115e-02, -2.564131681501362e-01, -2.563075396008445e-01, 2.750373863772115e-02, -2.564131681501364e-01, -4.382050963860357e-02, 4.050357182528563e-03, -4.232578554916553e-02, -1.904919160357913e+00, 8.832667683665598e+00, -1.985198077554911e+00, -1.113511453825185e+00, 9.394016215411451e+00, -1.753492720911375e+00, -1.325123938886536e-01, 1.714457336094126e-02, -1.231062062236098e-01, -4.862421349804245e+00, 4.850719018150773e+00, -6.713013516528654e+00, -4.862421349804249e+00, 4.850719018150773e+00, -6.713013516528672e+00, -1.003920086361056e+01, 1.708739364307139e-04, -1.024811030523457e+01, -5.014752209360060e+01, 1.425057265980906e-85, -8.882823659902049e+01, -3.094913773305654e+01, 8.311563242725909e-37, -3.294714976679684e+01, -5.655781457490081e+00, 5.514447898774030e+00, -5.665591526518883e+00, -8.194904258468343e+01, 4.089407318435749e-22, -4.053025048617304e+01, -8.194904258470272e+01, 4.089407318435535e-22, -4.053025048619974e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
