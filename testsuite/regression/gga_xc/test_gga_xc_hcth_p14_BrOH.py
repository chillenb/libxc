
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_p14_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.049300999829999e+01, -2.049305801594396e+01, -2.049331032129568e+01, -2.049252327221411e+01, -2.049303500278073e+01, -2.049303500278073e+01, -3.468741378352622e+00, -3.468740843096238e+00, -3.468864875788198e+00, -3.469361599376855e+00, -3.468755356939697e+00, -3.468755356939697e+00, -7.456975274281348e-01, -7.453809635303736e-01, -7.393554694867049e-01, -7.439160126966265e-01, -7.455798316354540e-01, -7.455798316354540e-01, -2.520497853871299e-01, -2.535372384175186e-01, -8.698385851908855e-01, -2.078302770287711e-01, -2.524768015244490e-01, -2.524768015244490e-01, -2.691446501630534e-02, -2.806070718196651e-02, -9.344597029667645e-02, -1.375067185434968e-02, -2.779465640905097e-02, -2.779465640905097e-02, -5.111563511273961e+00, -5.112478401462437e+00, -5.111659728027247e+00, -5.112371038032792e+00, -5.112028341071124e+00, -5.112028341071124e+00, -2.066327143285374e+00, -2.077028384582694e+00, -2.065219731475381e+00, -2.073499295504454e+00, -2.075212730512061e+00, -2.075212730512061e+00, -6.438774042841067e-01, -6.907745804883674e-01, -6.145620974760939e-01, -6.339879522517731e-01, -6.651665045633870e-01, -6.651665045633870e-01, -1.703568167125328e-01, -2.681612487880025e-01, -1.675801501021420e-01, -1.956289968696328e+00, -1.858543277372646e-01, -1.858543277372646e-01, -1.329948424293982e-02, -1.504926543775346e-02, -1.151088004290298e-02, -1.197951963386833e-01, -1.380479558458960e-02, -1.380479558458959e-02, -6.623326213280355e-01, -6.560635333050795e-01, -6.579476371025365e-01, -6.596730955769609e-01, -6.587774960997095e-01, -6.587774960997095e-01, -6.436018052459955e-01, -5.727044002064485e-01, -5.893546175704609e-01, -6.064504109033232e-01, -5.974509633115722e-01, -5.974509633115722e-01, -7.213054529099971e-01, -3.160277770423139e-01, -3.538799626058068e-01, -4.178919124040150e-01, -3.831016054477602e-01, -3.831016054477601e-01, -5.232483830738043e-01, -8.833071283429948e-02, -1.115471073964672e-01, -3.925592682403415e-01, -1.440986114572071e-01, -1.440986114572071e-01, -3.106260184710383e-02, -4.454288766783100e-03, -8.179500191705781e-03, -1.381041035111690e-01, -1.186759083905859e-02, -1.186759083905859e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_p14_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.712959953180182e+01, -2.712969102086272e+01, -2.713010965959612e+01, -2.712861123215835e+01, -2.712964769242443e+01, -2.712964769242443e+01, -4.461497627455986e+00, -4.461549521718303e+00, -4.463152712141589e+00, -4.461309286790287e+00, -4.461542839331832e+00, -4.461542839331832e+00, -8.855495617113408e-01, -8.838672930151703e-01, -8.391044106371598e-01, -8.463685129812258e-01, -8.849400673295841e-01, -8.849400673295841e-01, -2.664526325124975e-01, -2.695614890823693e-01, -1.074123257638810e+00, -2.151875619665120e-01, -2.673696382297204e-01, -2.673696382297204e-01, -3.471251821900712e-02, -3.614203643341338e-02, -1.085320528869714e-01, -1.797034044567386e-02, -3.580254741693337e-02, -3.580254741693337e-02, -6.780503604279955e+00, -6.782800108071274e+00, -6.780740081413338e+00, -6.782525801951877e+00, -6.781680572998709e+00, -6.781680572998709e+00, -2.350748332574324e+00, -2.372929955134186e+00, -2.335482582051171e+00, -2.352708796227324e+00, -2.385880758281377e+00, -2.385880758281377e+00, -8.139408984751795e-01, -9.073922657804663e-01, -7.732293632654050e-01, -8.260239555423281e-01, -8.471253728789985e-01, -8.471253728789985e-01, -1.792291363199777e-01, -2.752726987093526e-01, -1.760114784470863e-01, -2.596406175954390e+00, -1.936691959151364e-01, -1.936691959151364e-01, -1.738589500753709e-02, -1.964564041619927e-02, -1.505417404469971e-02, -1.312274873796154e-01, -1.803070577491976e-02, -1.803070577491980e-02, -8.702936561042366e-01, -8.624314444486667e-01, -8.663961281910649e-01, -8.688821403458161e-01, -8.677374113206493e-01, -8.677374113206493e-01, -8.433892299631290e-01, -6.939379099138582e-01, -7.382552932970111e-01, -7.789818176190892e-01, -7.583849217459019e-01, -7.583849217459020e-01, -9.469924045301390e-01, -3.265136934512419e-01, -3.791643732410077e-01, -4.944408276091312e-01, -4.313562590378618e-01, -4.313562590378615e-01, -6.285432089685771e-01, -1.045500441196308e-01, -1.253727842216769e-01, -4.784863646657658e-01, -1.524075721024912e-01, -1.524075721024915e-01, -3.994071024410051e-02, -5.869022981457060e-03, -1.073642677493407e-02, -1.459671823196649e-01, -1.552052718969150e-02, -1.552052718969153e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_p14_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.261350591706283e-10, -3.260701782294959e-10, -3.258671834568206e-10, -3.269279391156923e-10, -3.261001204963451e-10, -3.261001204963451e-10, -1.962558481023621e-06, -1.962025298841094e-06, -1.947020145463321e-06, -1.971110703855952e-06, -1.962249304157125e-06, -1.962249304157125e-06, -2.958135294470935e-03, -2.981625830186044e-03, -3.557516172994726e-03, -3.440729302852848e-03, -2.966660660139082e-03, -2.966660660139082e-03, -4.636107177159770e-01, -4.537006103976440e-01, -1.204440730428646e-03, -8.134358411740686e-01, -4.608967770264233e-01, -4.608967770264233e-01, -1.690918502146678e+01, -1.687271423302538e+01, -4.956897846433217e+00, -1.262685470005973e+01, -1.753965501140743e+01, -1.753965501140743e+01, 3.880324632340415e-08, 4.339294277822577e-08, 3.926134588619900e-08, 4.283014407050602e-08, 4.117054239154578e-08, 4.117054239154578e-08, -4.268888217643240e-05, -4.124992502698709e-05, -4.351607255690232e-05, -4.238978802207638e-05, -4.059618718994860e-05, -4.059618718994860e-05, -3.668013540047228e-03, 2.026804706915384e-03, -4.818889405201989e-03, -3.839791655050515e-04, -2.800746830623015e-03, -2.800746830623015e-03, -1.322628012150643e+00, -3.058028861689821e-01, -1.476747651142240e+00, 2.713300549857304e-05, -1.137839262942942e+00, -1.137839262942942e+00, -1.341644706290203e+01, -1.335559070835675e+01, -3.866669560982771e+01, -3.690432918516453e+00, -1.980116626325497e+01, -1.980116626326223e+01, 1.006730205197813e-02, 3.508866545220350e-03, 5.701204567347532e-03, 7.763302100799722e-03, 6.705006196541116e-03, 6.705006196541106e-03, 1.136387369080028e-02, -8.785303027011864e-03, -6.123101619127633e-03, -3.398138367618526e-03, -4.857467922428026e-03, -4.857467922428020e-03, 1.288661311024612e-03, -1.656397335401073e-01, -1.027401395811431e-01, -4.059999958540538e-02, -6.783653618779838e-02, -6.783653618779859e-02, -1.377123978877572e-02, -4.467327304255333e+00, -3.632052107016232e+00, -4.862155119523106e-02, -2.561873951874516e+00, -2.561873951874552e+00, -1.253046026124597e+01, -2.399006531876725e+01, -2.031030350190257e+01, -3.148493294675475e+00, -2.911732892931962e+01, -2.911732892936017e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
