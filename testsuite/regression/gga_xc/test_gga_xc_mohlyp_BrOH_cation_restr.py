
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mohlyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.016942678242967e+01, -2.016947025056943e+01, -2.016970084049911e+01, -2.016905337128844e+01, -2.016938731269168e+01, -2.016938731269168e+01, -3.379179913780301e+00, -3.379163295250351e+00, -3.378861475379339e+00, -3.380016688127486e+00, -3.379239829638978e+00, -3.379239829638978e+00, -7.056378870327394e-01, -7.054738956859942e-01, -7.048393307655523e-01, -7.094794629765493e-01, -7.077309361435870e-01, -7.077309361435870e-01, -2.365941008120538e-01, -2.367506436190268e-01, -8.114278128991979e-01, -2.126881084188310e-01, -2.214430104116878e-01, -2.214430104116877e-01, -1.576078265423943e-02, -1.657072760289101e-02, -8.235021775865228e-02, -9.191914237527450e-03, -1.150660811454625e-02, -1.150660811454626e-02, -4.955589167161956e+00, -4.956024656844510e+00, -4.955614699834687e+00, -4.955999022391813e+00, -4.955806450699893e+00, -4.955806450699893e+00, -2.051160528519198e+00, -2.060141566457070e+00, -2.053488248767049e+00, -2.061248321757929e+00, -2.055183711973764e+00, -2.055183711973764e+00, -6.043752833528693e-01, -6.466728730815480e-01, -5.633399965001425e-01, -5.767234728577715e-01, -6.122136605763782e-01, -6.122136605763782e-01, -1.716547487830161e-01, -2.610416740781329e-01, -1.619723927260674e-01, -1.859299891222048e+00, -1.871971840151683e-01, -1.871971840151683e-01, -7.118693323677702e-03, -8.988802223090512e-03, -6.897785347441933e-03, -1.201021680412695e-01, -8.288717806112360e-03, -8.288717806112362e-03, -6.003701045606289e-01, -5.973576410639090e-01, -5.983581213442070e-01, -5.992300352564471e-01, -5.987879999058929e-01, -5.987879999058929e-01, -5.850105507190871e-01, -5.246994526956325e-01, -5.377247934742160e-01, -5.539634225556510e-01, -5.451591400566034e-01, -5.451591400566034e-01, -6.763899702120285e-01, -3.005985088340790e-01, -3.286725632050262e-01, -3.811581786684026e-01, -3.501790024209160e-01, -3.501790024209160e-01, -4.858941040495992e-01, -7.943176621099803e-02, -1.014714186546880e-01, -3.611162317400850e-01, -1.431846603058632e-01, -1.431846603058633e-01, -2.207532022078490e-02, -2.438854842338228e-03, -5.082288558310372e-03, -1.369256120630569e-01, -7.678085808819213e-03, -7.678085808819207e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mohlyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.573602417551857e+01, -2.573613654259052e+01, -2.573659255152964e+01, -2.573492159268066e+01, -2.573580335979780e+01, -2.573580335979780e+01, -4.172773427298916e+00, -4.172854581187894e+00, -4.174828376376446e+00, -4.172170738937355e+00, -4.172969388606808e+00, -4.172969388606808e+00, -8.058111510762621e-01, -8.035048476139360e-01, -7.437328050834557e-01, -7.515050056480375e-01, -7.514589556340713e-01, -7.514589556340713e-01, -1.862537748349862e-01, -1.885151411054080e-01, -9.464762521736579e-01, -1.789666002339227e-01, -1.730251810771554e-01, -1.730251810771555e-01, -2.087484471686635e-02, -2.193934056357635e-02, -1.059693695931072e-01, -1.220272989382439e-02, -1.526226760988739e-02, -1.526226760988739e-02, -6.428428593611915e+00, -6.431199324179423e+00, -6.428553144661464e+00, -6.430999381291244e+00, -6.429836198688679e+00, -6.429836198688679e+00, -2.080538218515532e+00, -2.106016514413240e+00, -2.045097657376159e+00, -2.067535503932486e+00, -2.111872240586970e+00, -2.111872240586970e+00, -7.594405924999720e-01, -8.481778981920834e-01, -6.996829763285430e-01, -7.537896115241910e-01, -7.758042972246110e-01, -7.758042972246110e-01, -1.930468287179492e-01, -2.071562481222780e-01, -1.873122300032861e-01, -2.449974180795830e+00, -1.757430419873511e-01, -1.757430419873511e-01, -9.456054344288886e-03, -1.193322973195685e-02, -9.158129037036342e-03, -1.502462112600997e-01, -1.100191408706158e-02, -1.100191408706159e-02, -7.895900586750962e-01, -7.835950489913533e-01, -7.859237216392009e-01, -7.876686146237700e-01, -7.868160666845301e-01, -7.868160666845301e-01, -7.693757363474228e-01, -6.058329242633436e-01, -6.625101328178283e-01, -7.126242531346840e-01, -6.883330752128994e-01, -6.883330752128994e-01, -8.865824072314504e-01, -2.335600352957281e-01, -2.791250984982104e-01, -4.281581023314558e-01, -3.440198428222150e-01, -3.440198428222150e-01, -5.587345815884931e-01, -1.024919987577762e-01, -1.321603474355166e-01, -4.326518905471132e-01, -1.625780737244490e-01, -1.625780737244491e-01, -2.917239200770643e-02, -3.244922585189643e-03, -6.754955897546602e-03, -1.596683633078395e-01, -1.019296867880334e-02, -1.019296867880334e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mohlyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.844940394602833e-09, -2.844847331878085e-09, -2.844522254945319e-09, -2.845905068673510e-09, -2.845167857437992e-09, -2.845167857437992e-09, -4.968181136868314e-06, -4.967485453536910e-06, -4.950902086498429e-06, -4.975951219475614e-06, -4.966870651482720e-06, -4.966870651482720e-06, -4.436710016454998e-03, -4.481425551829133e-03, -5.580276080487926e-03, -5.380126395124370e-03, -5.403975432698841e-03, -5.403975432698841e-03, -9.246209279329652e-01, -9.038767960655476e-01, -2.295141902893127e-03, -1.343993549273595e+00, -1.274679829687662e+00, -1.274679829687661e+00, -6.301071299454699e+00, -6.656542354281221e+00, 1.112605793055315e+00, -5.727495331631589e+00, -7.275919610447464e+00, -7.275919610449199e+00, -6.222201476075742e-07, -6.177262179315511e-07, -6.220306961002662e-07, -6.180632138088674e-07, -6.199327644576589e-07, -6.199327644576589e-07, -7.380807495665436e-05, -7.130834925937940e-05, -7.627702598170029e-05, -7.402965163872041e-05, -7.121495069277826e-05, -7.121495069277826e-05, -4.901961715077995e-03, -8.927357000646206e-04, -7.320486628261406e-03, -2.100942363743224e-03, -4.209238999881967e-03, -4.209238999881967e-03, -9.008821963429976e-01, -6.179136649637549e-01, -8.336579977888807e-01, -1.415410286533677e-05, -1.743373484067826e+00, -1.743373484067826e+00, -7.547022756768720e+00, -6.740779024474493e+00, -4.233028737096020e+01, -3.688468864337935e-02, -1.969875834528384e+01, -1.969875834526490e+01, 4.948236482176058e-05, -1.108352132351957e-03, -7.082265328180711e-04, -3.712327583781083e-04, -5.403737438226708e-04, -5.403737438226708e-04, 4.775416442746082e-04, -1.465660192909924e-02, -9.465835729766406e-03, -4.891419025753987e-03, -7.105326205208561e-03, -7.105326205208561e-03, -8.585473945295309e-04, -3.430495000513730e-01, -2.029869601095062e-01, -6.150569808526896e-02, -1.213042282052382e-01, -1.213042282052382e-01, -2.051758950917398e-02, 1.235683673094903e+00, 1.628531262462399e+00, -5.952511032401783e-02, -1.718636198120615e+00, -1.718636198120610e+00, -5.076343531135253e+00, -3.308359201276225e+01, -1.601075365631068e+01, -1.451952531225241e+00, -2.488148698702543e+01, -2.488148698699777e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
