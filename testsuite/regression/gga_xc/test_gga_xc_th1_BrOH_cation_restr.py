
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.079741989588527e+01, -8.079656296342262e+01, -8.079545385532941e+01, -8.080814622638235e+01, -8.080111236730853e+01, -8.080111236730853e+01, -3.567118038914521e+00, -3.567148937795678e+00, -3.567951201221849e+00, -3.567231740350847e+00, -3.567240694055976e+00, -3.567240694055976e+00, -7.228018460283913e-01, -7.226120864409850e-01, -7.208940759455338e-01, -7.256804937217955e-01, -7.239452257565429e-01, -7.239452257565429e-01, -2.328765875305235e-01, -2.338706585902743e-01, -8.311928500709193e-01, -2.033485251573361e-01, -2.128550266947710e-01, -2.128550266947710e-01, 3.473718652096470e-03, 1.910884461567641e-03, -1.011876694204012e-01, 3.089945572296320e-02, 2.140908465109933e-02, 2.140908465109935e-02, -5.524030604628612e+00, -5.526276327892528e+00, -5.524132556491777e+00, -5.526115175552767e+00, -5.525170244781132e+00, -5.525170244781132e+00, -2.077644545448325e+00, -2.088118664541536e+00, -2.076041428177723e+00, -2.085007369709318e+00, -2.084487480716626e+00, -2.084487480716626e+00, -6.186583601432826e-01, -6.599492806275581e-01, -5.772637816286990e-01, -5.875829240878532e-01, -6.263159967701983e-01, -6.263159967701983e-01, -1.738328537151326e-01, -2.561513630570687e-01, -1.649917036801791e-01, -2.006866678719841e+00, -1.775813080539161e-01, -1.775813080539161e-01, 4.691148856686789e-02, 3.350326757238048e-02, 5.721264565387470e-02, -1.258322335865834e-01, 4.561442010015728e-02, 4.561442010015725e-02, -6.122225309502827e-01, -6.085654495646138e-01, -6.095728043417377e-01, -6.105896905373387e-01, -6.100548583947774e-01, -6.100548583947774e-01, -5.968433630921872e-01, -5.391043396868928e-01, -5.514848984476849e-01, -5.658500412292958e-01, -5.580851315949490e-01, -5.580851315949490e-01, -6.909875608595317e-01, -2.994995780572098e-01, -3.331651366955721e-01, -3.936018340080333e-01, -3.598287532352396e-01, -3.598287532352395e-01, -4.998266233688955e-01, -1.019189446170277e-01, -1.200783032736126e-01, -3.729452784511478e-01, -1.378618497056745e-01, -1.378618497056745e-01, -1.791029356937328e-02, 9.539636922340773e-02, 6.551307239490488e-02, -1.334350852441693e-01, 5.019371740498802e-02, 5.019371740498802e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.438389394354629e+01, -2.438289445685088e+01, -2.437997626270498e+01, -2.439481472474479e+01, -2.438682302187941e+01, -2.438682302187941e+01, -5.054276604252352e+00, -5.054333758081488e+00, -5.055795678779144e+00, -5.054355147208627e+00, -5.054485100484928e+00, -5.054485100484928e+00, -8.296274179636234e-01, -8.275696069602522e-01, -7.744699807248954e-01, -7.821313039927140e-01, -7.818455634104925e-01, -7.818455634104925e-01, -2.103873176844816e-01, -2.152242374435474e-01, -9.759166092492805e-01, -1.443467411579259e-01, -1.716787856357465e-01, -1.716787856357464e-01, 5.454280806577591e-02, 5.489912719379636e-02, 1.161875005812336e-02, 4.644945342471599e-02, 5.357377537347857e-02, 5.357377537347859e-02, -7.864207735013460e+00, -7.863094898078313e+00, -7.864174579033166e+00, -7.863192083720539e+00, -7.863635521490020e+00, -7.863635521490020e+00, -2.304688241626850e+00, -2.337086689383015e+00, -2.259512319273826e+00, -2.288402835698585e+00, -2.344174931898388e+00, -2.344174931898388e+00, -7.686004363178650e-01, -8.710722606072835e-01, -7.071730604311220e-01, -7.657547222837476e-01, -7.853673106106369e-01, -7.853673106106369e-01, -7.846276994416232e-02, -1.910539060868331e-01, -6.926277568970379e-02, -2.788795603155783e+00, -1.106133044342880e-01, -1.106133044342880e-01, 4.528628247688753e-02, 4.867789267980424e-02, 6.902820062486544e-02, -2.982081858539040e-02, 6.189590570430656e-02, 6.189590570430653e-02, -8.146571496912419e-01, -8.009626665912035e-01, -8.055945805620748e-01, -8.095461573252680e-01, -8.075526515140429e-01, -8.075526515140429e-01, -7.954143235414831e-01, -6.208831716677041e-01, -6.695937953416188e-01, -7.186036460707658e-01, -6.937250864196828e-01, -6.937250864196828e-01, -9.123759790215172e-01, -2.499138363715565e-01, -3.136980255370045e-01, -4.445831546347256e-01, -3.748702976651546e-01, -3.748702976651546e-01, -5.734340609150428e-01, 1.593586859467794e-02, -5.815381745359088e-03, -4.396282713761295e-01, -5.916638171870453e-02, -5.916638171870456e-02, 5.343449050603151e-02, 5.210580991278015e-02, 5.277886233703034e-02, -5.164305403913017e-02, 6.404930431023988e-02, 6.404930431023989e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.526207843241299e-07, -3.526235579862640e-07, -3.526294341011646e-07, -3.525883063260198e-07, -3.526107720617882e-07, -3.526107720617882e-07, 4.855876246985873e-06, 4.856774568699858e-06, 4.877402372387234e-06, 4.840126320227588e-06, 4.856763269990521e-06, 4.856763269990521e-06, -4.352156495837136e-03, -4.386479546036165e-03, -5.247284628608307e-03, -5.066191095121019e-03, -5.091897556831633e-03, -5.091897556831633e-03, -7.548377043554915e-01, -7.212479165540471e-01, -2.240267179828814e-03, -1.828135438535962e+00, -1.272408341411059e+00, -1.272408341411058e+00, -1.330912942805249e+04, -1.201451093843329e+04, -1.066141586521497e+02, -3.330592614487948e+04, -2.695757008645952e+04, -2.695757008645953e+04, 1.579931738369018e-06, 1.576715944479384e-06, 1.579785669426513e-06, 1.576947126764996e-06, 1.578304558568571e-06, 1.578304558568571e-06, -4.854536357904653e-05, -4.589788873572288e-05, -5.181518547710717e-05, -4.938791679892000e-05, -4.551932634402732e-05, -4.551932634402732e-05, -6.150697782353237e-03, -7.196218747508763e-04, -8.997681995394378e-03, -4.166179969460765e-03, -5.475260840559649e-03, -5.475260840559649e-03, -5.718581983318392e+00, -7.028576987754268e-01, -7.339803416514453e+00, 1.251166307403393e-04, -3.575079974850500e+00, -3.575079974850500e+00, -4.002768530854723e+04, -3.724732771999494e+04, -1.439287898779432e+05, -2.562625804615529e+01, -7.260743602092832e+04, -7.260743602092823e+04, 4.300804123104832e-03, -1.753927845327747e-03, -4.883247068753077e-04, 1.041329497610907e-03, 2.010832338998350e-04, 2.010832338998350e-04, 1.115999862404439e-02, -1.490386896341677e-02, -1.142820988213382e-02, -7.864981868538361e-03, -9.731075145164129e-03, -9.731075145164129e-03, -5.681255762810548e-04, -3.151407882840530e-01, -1.667918306917472e-01, -5.987312704737107e-02, -1.016356878168660e-01, -1.016356878168660e-01, -2.079488144739987e-02, -1.198254667735054e+02, -4.796895908363677e+01, -6.957549416758053e-02, -1.248724222764459e+01, -1.248724222764459e+01, -5.556775101288454e+03, 3.829341886813514e+06, -2.357602621424616e+04, -1.513600186390066e+01, -9.202742708622721e+04, -9.202742708622752e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
