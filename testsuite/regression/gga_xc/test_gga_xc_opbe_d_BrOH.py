
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_opbe_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opbe_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.099601842858466e+01, -2.099604258825654e+01, -2.099622634155380e+01, -2.099582920995365e+01, -2.099603053452168e+01, -2.099603053452168e+01, -3.523885700018659e+00, -3.523859258919276e+00, -3.523276462300528e+00, -3.525018348008053e+00, -3.523886904538868e+00, -3.523886904538868e+00, -7.328770453547381e-01, -7.327856908591237e-01, -7.329764829686148e-01, -7.374169717622082e-01, -7.328403359877634e-01, -7.328403359877634e-01, -2.349590506413717e-01, -2.361568607163040e-01, -8.531084973664765e-01, -1.969407587280100e-01, -2.352921971848045e-01, -2.352921971848045e-01, -2.070316133278807e-02, -2.167537891892661e-02, -8.381541274181481e-02, -9.970416670972511e-03, -2.144971510018676e-02, -2.144971510018676e-02, -5.097649940097178e+00, -5.097244125827648e+00, -5.097614239207812e+00, -5.097298580365318e+00, -5.097433164345703e+00, -5.097433164345703e+00, -2.154759009589597e+00, -2.164183068892706e+00, -2.156575824213556e+00, -2.163875764731303e+00, -2.158906215298605e+00, -2.158906215298605e+00, -6.181885690460389e-01, -6.540415160376940e-01, -5.896400369398327e-01, -6.015813996354594e-01, -6.379723977069862e-01, -6.379723977069862e-01, -1.634323786069578e-01, -2.561257284228405e-01, -1.601462355540198e-01, -1.887638982858771e+00, -1.768957991907626e-01, -1.768957991907626e-01, -9.618702432252125e-03, -1.098959387756188e-02, -8.237233445899781e-03, -1.112718468593872e-01, -1.001311957053997e-02, -1.001311957053997e-02, -6.208594344093528e-01, -6.197578541411594e-01, -6.201131012565926e-01, -6.204151972289818e-01, -6.202603382005166e-01, -6.202603382005166e-01, -6.019375481541320e-01, -5.524802935865045e-01, -5.650507186041962e-01, -5.778001324034037e-01, -5.710464450996178e-01, -5.710464450996178e-01, -6.841590476457544e-01, -3.018121134701760e-01, -3.373646352417716e-01, -3.976392674595858e-01, -3.647397090171031e-01, -3.647397090171032e-01, -5.031282834706717e-01, -7.852025856310275e-02, -1.026192579441046e-01, -3.708734359606340e-01, -1.361017512801371e-01, -1.361017512801371e-01, -2.424184656712618e-02, -3.011925808830322e-03, -5.720021030995795e-03, -1.297087589482495e-01, -8.511098839506187e-03, -8.511098839506173e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_opbe_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opbe_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.522307668946036e+01, -2.522316809521726e+01, -2.522357660172959e+01, -2.522207978759439e+01, -2.522312488768726e+01, -2.522312488768726e+01, -4.135038303940282e+00, -4.135088249704505e+00, -4.136626767349016e+00, -4.134829317107743e+00, -4.135081146641558e+00, -4.135081146641558e+00, -8.234701711271484e-01, -8.218894091695170e-01, -7.799745078829343e-01, -7.867844562491515e-01, -8.228973644217255e-01, -8.228973644217255e-01, -2.365821126087878e-01, -2.406222878329445e-01, -9.992538612842207e-01, -1.786745985669873e-01, -2.377999486698088e-01, -2.377999486698088e-01, -2.734194308165839e-02, -2.859915952612477e-02, -1.005054989204700e-01, -1.326919135218524e-02, -2.830197957250390e-02, -2.830197957250390e-02, -6.328127026777840e+00, -6.331086933954136e+00, -6.328428998437914e+00, -6.330730513795174e+00, -6.329645978814866e+00, -6.329645978814866e+00, -2.209315656829418e+00, -2.228622439785984e+00, -2.197298590518780e+00, -2.212300460495957e+00, -2.238235507760527e+00, -2.238235507760527e+00, -7.608798278203354e-01, -8.476382190067958e-01, -7.226767858247616e-01, -7.728369255368436e-01, -7.924653396815354e-01, -7.924653396815354e-01, -1.586155531099467e-01, -2.331173728119852e-01, -1.543432996786718e-01, -2.448927632989873e+00, -1.629422368208136e-01, -1.629422368208136e-01, -1.280209647820657e-02, -1.461869885295650e-02, -1.095869174977382e-02, -1.225243356236599e-01, -1.331948634806930e-02, -1.331948634806930e-02, -8.119428153387714e-01, -8.044587053573490e-01, -8.072563609555825e-01, -8.093342771606667e-01, -8.083045610187521e-01, -8.083045610187521e-01, -7.878308033661825e-01, -6.465917292593477e-01, -6.898740301022122e-01, -7.295521482697647e-01, -7.096612095172160e-01, -7.096612095172161e-01, -8.855326676531396e-01, -2.869066505631038e-01, -3.446258052382632e-01, -4.604009750718174e-01, -3.986300086027879e-01, -3.986300086027880e-01, -5.855701860628360e-01, -9.617636302486356e-02, -1.178864087586999e-01, -4.471504607827846e-01, -1.364791863794897e-01, -1.364791863794897e-01, -3.195752492092462e-02, -4.014979815219983e-03, -7.620841073075257e-03, -1.300203101905187e-01, -1.132487213886345e-02, -1.132487213886343e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_opbe_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opbe_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.966287935750400e-09, -6.966232883806627e-09, -6.965920284484558e-09, -6.966823115942806e-09, -6.966259463317720e-09, -6.966259463317720e-09, -8.758805491267805e-06, -8.758770577814263e-06, -8.756390994130475e-06, -8.753244624828673e-06, -8.758642258410022e-06, -8.758642258410022e-06, -4.898551724279896e-03, -4.917899185854907e-03, -5.378161379653238e-03, -5.227593694491989e-03, -4.905616173169655e-03, -4.905616173169655e-03, -5.691728568267849e-01, -5.484788814118271e-01, -2.446480491050792e-03, -1.243147344526639e+00, -5.630475299776903e-01, -5.630475299776903e-01, -1.170797358000074e+01, -1.172769687617320e+01, -4.475611136823789e+00, -8.366812288960162e+00, -1.218305583026255e+01, -1.218305583026255e+01, -1.811666085541867e-06, -1.809703412105575e-06, -1.811463801267036e-06, -1.809937914260240e-06, -1.810665213690396e-06, -1.810665213690396e-06, -7.557513485930952e-05, -7.385640789966940e-05, -7.592545130146818e-05, -7.458150778431676e-05, -7.393483491992394e-05, -7.393483491992394e-05, -7.535218509343896e-03, -4.073783811605417e-03, -9.247151791513121e-03, -6.358002336819128e-03, -6.385948805291802e-03, -6.385948805291802e-03, -1.884750996385209e+00, -4.487418013044928e-01, -2.118809826265204e+00, -6.759906570441587e-05, -1.744139378854526e+00, -1.744139378854526e+00, -8.876722040743687e+00, -8.888957873913812e+00, -2.544148872766699e+01, -3.998096630216863e+00, -1.312826200870176e+01, -1.312826200870220e+01, -4.036927566168618e-03, -4.894922117828517e-03, -4.606788460379914e-03, -4.369736545824307e-03, -4.489905635898538e-03, -4.489905635898538e-03, -4.419251270358625e-03, -1.384658139832285e-02, -1.111663064925871e-02, -8.624413550028215e-03, -9.882771362265456e-03, -9.882771362265451e-03, -3.487062977790109e-03, -2.233190751009213e-01, -1.297920779435490e-01, -5.306975488557714e-02, -8.484681318737806e-02, -8.484681318737808e-02, -2.041061728246008e-02, -3.868236281819534e+00, -3.618637365429024e+00, -6.245211475452811e-02, -3.361843875905759e+00, -3.361843875905763e+00, -8.780805064812485e+00, -1.533192021025035e+01, -1.319075662989452e+01, -4.100358622426225e+00, -1.917897833521639e+01, -1.917897833522203e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
