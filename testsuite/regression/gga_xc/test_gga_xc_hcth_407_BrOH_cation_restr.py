
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_407_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.118073366891745e+01, -2.118079547831231e+01, -2.118108355489326e+01, -2.118016369982703e+01, -2.118064378655038e+01, -2.118064378655038e+01, -3.517338061111110e+00, -3.517339662991762e+00, -3.517462316791752e+00, -3.517905266588492e+00, -3.517423103511232e+00, -3.517423103511232e+00, -7.293513223567774e-01, -7.290270578758712e-01, -7.240722332333080e-01, -7.289704573214756e-01, -7.273303942659357e-01, -7.273303942659357e-01, -2.477705981333678e-01, -2.482236289699169e-01, -8.392805966269754e-01, -2.139979226630283e-01, -2.287510904550340e-01, -2.287510904550340e-01, 5.738717151293442e-04, 4.868045779132097e-04, -3.254401940421429e-02, 8.928921607768345e-04, 8.560400771762178e-04, 8.560400771762260e-04, -5.232920047155510e+00, -5.234102052929985e+00, -5.232976846850343e+00, -5.234020234824448e+00, -5.233517351881510e+00, -5.233517351881510e+00, -2.076416150409062e+00, -2.087203177287465e+00, -2.074781922242086e+00, -2.084099037681216e+00, -2.083398554320485e+00, -2.083398554320485e+00, -6.294063244461895e-01, -6.782831760711677e-01, -5.864595961377987e-01, -6.025623591223404e-01, -6.378115248577176e-01, -6.378115248577176e-01, -1.491369049188727e-01, -2.693984056690377e-01, -1.354556859644741e-01, -1.974161360237938e+00, -1.782837343054829e-01, -1.782837343054829e-01, 8.437586219693161e-04, 8.904243792405722e-04, 8.247417828086044e-04, -7.721968154600116e-02, 8.725622761434282e-04, 8.725622761434179e-04, -6.356894559027932e-01, -6.262373463976674e-01, -6.288546344300447e-01, -6.315074658180965e-01, -6.301161323124030e-01, -6.301161323124030e-01, -6.233171666683308e-01, -5.446444462638883e-01, -5.597380034302794e-01, -5.772163847976600e-01, -5.678177106375352e-01, -5.678177106375352e-01, -7.092505553627607e-01, -3.126915851557302e-01, -3.418476810426913e-01, -3.974495968872481e-01, -3.645206221805700e-01, -3.645206221805701e-01, -5.048206676513534e-01, -2.972392196189884e-02, -5.265562484749865e-02, -3.773168078389751e-01, -1.121727146845112e-01, -1.121727146845114e-01, -3.114658575684611e-04, 4.277313864247892e-04, 7.179357393213600e-04, -1.025436070732078e-01, 8.564483258413049e-04, 8.564483258413090e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_407_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.847848229980882e+01, -2.847859125984192e+01, -2.847905257187895e+01, -2.847743187057894e+01, -2.847828440063386e+01, -2.847828440063386e+01, -4.590418768738868e+00, -4.590487506384147e+00, -4.592185469887665e+00, -4.590096266511797e+00, -4.590611173697413e+00, -4.590611173697413e+00, -8.654637437304984e-01, -8.632972016652791e-01, -8.044258961552199e-01, -8.128577125639586e-01, -8.126617479616620e-01, -8.126617479616620e-01, -2.085055691208473e-01, -2.092394765289229e-01, -1.017804360688811e+00, -2.267357701399506e-01, -2.098268318977644e-01, -2.098268318977645e-01, -7.173295353170825e-05, -2.754895814466335e-04, -6.202753017738209e-02, 8.801222690911532e-04, 6.669392894657347e-04, 6.669392894656531e-04, -7.031931800797666e+00, -7.034444607757227e+00, -7.032046647642550e+00, -7.034265104437203e+00, -7.033207030727572e+00, -7.033207030727572e+00, -2.307456311488429e+00, -2.336189035030004e+00, -2.266904673289938e+00, -2.292517506435168e+00, -2.342719303828267e+00, -2.342719303828267e+00, -7.968927271291650e-01, -9.086519689990361e-01, -7.336806994941691e-01, -8.004554301461737e-01, -8.137031517390714e-01, -8.137031517390714e-01, -2.214063311914019e-01, -2.411796333914434e-01, -2.092607909676571e-01, -2.656848502468566e+00, -2.266409191897297e-01, -2.266409191897297e-01, 9.258935198924896e-04, 8.861346426302959e-04, 8.865712467737070e-04, -1.378226024165483e-01, 8.824298955521063e-04, 8.824298955522310e-04, -8.535576914055616e-01, -8.392500541775093e-01, -8.448687827811976e-01, -8.489057072401229e-01, -8.469543770050237e-01, -8.469543770050237e-01, -8.345548480263758e-01, -6.432954918912996e-01, -6.946154782719213e-01, -7.455085970623768e-01, -7.189609181604193e-01, -7.189609181604193e-01, -9.488483181267618e-01, -2.535199871586870e-01, -2.965193883817236e-01, -4.523401740335358e-01, -3.666775218600990e-01, -3.666775218600985e-01, -5.922200912721975e-01, -5.660601091724565e-02, -9.694920201533082e-02, -4.500331848062148e-01, -1.841385200830077e-01, -1.841385200830057e-01, -1.947383085455594e-03, 5.395541737618909e-04, 8.447443796743324e-04, -1.730930026368683e-01, 8.935244740170049e-04, 8.935244740170336e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_407_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.886818724362401e-10, 6.887593242324460e-10, 6.889656394284534e-10, 6.878161055376380e-10, 6.884380984289703e-10, 6.884380984289703e-10, -1.221212361608500e-06, -1.220402251432591e-06, -1.201518842983267e-06, -1.233241416874526e-06, -1.220104487857890e-06, -1.220104487857890e-06, -3.329688394434566e-03, -3.367549795807351e-03, -4.400325539859141e-03, -4.224509778758613e-03, -4.238417328601213e-03, -4.238417328601213e-03, -8.563359563418838e-01, -8.483366561389872e-01, -1.614034432595653e-03, -7.797620386334351e-01, -9.901392790457174e-01, -9.901392790457133e-01, 2.701446332004750e+01, 2.822261521546447e+01, 7.078217771324674e+00, 2.704905382615457e+01, 3.314873612578566e+01, 3.314873612584576e+01, 3.116052575042877e-07, 3.175108431025698e-07, 3.118468135147535e-07, 3.170602023157316e-07, 3.146110336513244e-07, 3.146110336513244e-07, -5.075765339990565e-05, -4.846977270435753e-05, -5.376768500148707e-05, -5.167148418177823e-05, -4.805104485356316e-05, -4.805104485356316e-05, -4.285638073471518e-03, 4.529398997219812e-03, -6.588202046761446e-03, 2.625153116147695e-03, -3.671960389207925e-03, -3.671960389207925e-03, 5.257201024021781e-01, -5.175807072859772e-01, 9.182333475444288e-01, 5.642265282682974e-05, -3.467084429604846e-01, -3.467084429604846e-01, 3.688915610697976e+01, 3.193645783296300e+01, 2.075641480867764e+02, 4.177944266405318e+00, 9.435608267986760e+01, 9.435608268047557e+01, 2.245977311202675e-02, 7.031454507398527e-03, 1.052100629202107e-02, 1.435488633534321e-02, 1.228734280011842e-02, 1.228734280011842e-02, 4.748986517711403e-02, -1.229226273298051e-02, -8.610979523425313e-03, -4.485326485206107e-03, -6.903380272578373e-03, -6.903380272578373e-03, 3.046867543204008e-03, -3.293534399258376e-01, -1.978160784441831e-01, -5.682725434688157e-02, -1.134957446268832e-01, -1.134957446268843e-01, -1.768571061956500e-02, 6.738878456282243e+00, 4.816542663001292e+00, -6.242158055556402e-02, 2.406168808342450e+00, 2.406168808342383e+00, 2.004058142120921e+01, 1.776785555951377e+02, 8.121245092816480e+01, 2.994258600887593e+00, 1.203980164292937e+02, 1.203980164285231e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
