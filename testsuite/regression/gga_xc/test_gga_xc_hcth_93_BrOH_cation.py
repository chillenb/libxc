
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_93_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.125739827487726e+01, -2.125746036088298e+01, -2.125774971005733e+01, -2.125682574988914e+01, -2.125730798169545e+01, -2.125730798169545e+01, -3.521968242171565e+00, -3.521967926622948e+00, -3.522046968190424e+00, -3.522569029335502e+00, -3.522051681290399e+00, -3.522051681290399e+00, -7.257391331480790e-01, -7.254705187817531e-01, -7.219862391520974e-01, -7.267902514360917e-01, -7.315529218632753e-01, -7.315529218632753e-01, -2.399712567176895e-01, -2.405220949654641e-01, -8.363811231794436e-01, -2.145074241075645e-01, -2.267450211106072e-01, -2.267450211106072e-01, -1.558729375113427e-02, -1.644409530307098e-02, -8.992272490703247e-02, -8.884166112085069e-03, -1.511373125099806e-02, -1.511373125099806e-02, -5.244644062318557e+00, -5.245897514652595e+00, -5.244703833049229e+00, -5.245810267674877e+00, -5.245277623893593e+00, -5.245277623893593e+00, -2.093316686441201e+00, -2.103406550620367e+00, -2.093666642276299e+00, -2.102352633754289e+00, -2.099038695309548e+00, -2.099038695309548e+00, -6.251402747503104e-01, -6.731646001172753e-01, -5.823781451651264e-01, -5.984134676223986e-01, -6.342967038886728e-01, -6.342967038886730e-01, -1.836054167165795e-01, -2.645349412907161e-01, -1.746606478315303e-01, -1.973594371070499e+00, -1.901026920799016e-01, -1.901026920799016e-01, -6.847785738579601e-03, -8.681208305367798e-03, -6.646432449099538e-03, -1.318452049368686e-01, -9.132965846221303e-03, -9.132965846221315e-03, -6.268923122246253e-01, -6.209193080254450e-01, -6.227270710401840e-01, -6.244563004387966e-01, -6.235625977955674e-01, -6.235625977955674e-01, -6.115628693266816e-01, -5.402996665755564e-01, -5.552988809757087e-01, -5.732899807047602e-01, -5.636191736513309e-01, -5.636191736513309e-01, -7.044397885747211e-01, -3.054015278668701e-01, -3.358448938490291e-01, -3.929138738169703e-01, -3.597829102250244e-01, -3.597829102250244e-01, -5.004262757708539e-01, -8.643040901225278e-02, -1.135586202139152e-01, -3.728874611929354e-01, -1.510580389099779e-01, -1.510580389099778e-01, -2.206130803461029e-02, -2.299002790712647e-03, -4.872583100442968e-03, -1.458265569110684e-01, -8.260879302345502e-03, -8.260879302345500e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_93_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.858754039514768e+01, -2.858750812951191e+01, -2.858768403273628e+01, -2.858761225411468e+01, -2.858809244042806e+01, -2.858821253012668e+01, -2.858647404073002e+01, -2.858614643283986e+01, -2.858763227468891e+01, -2.858693205309700e+01, -2.858763227468891e+01, -2.858693205309700e+01, -4.574010467465632e+00, -4.574527596352320e+00, -4.574088477110129e+00, -4.574633757949131e+00, -4.576275637319568e+00, -4.576919538873612e+00, -4.573218919431665e+00, -4.573916245102120e+00, -4.573049590526605e+00, -4.575926947843802e+00, -4.573049590526605e+00, -4.575926947843802e+00, -8.473952838631185e-01, -8.582299126936146e-01, -8.437336611236930e-01, -8.570414457140126e-01, -7.964535559010332e-01, -7.780781044175493e-01, -7.926346894604683e-01, -7.987013948111911e-01, -8.786947777892086e-01, -7.017216467184897e-01, -8.786947777892086e-01, -7.017216467184897e-01, -2.052514879511836e-01, -2.003033611204378e-01, -2.087860455639423e-01, -2.042796278606001e-01, -9.728106137512993e-01, -1.035082684422200e+00, -1.582075393631026e-01, -1.559838803802711e-01, -1.458581105408175e-01, -2.840054622555127e-01, -1.458581105408172e-01, -2.840054622555133e-01, -1.871435817732277e-02, -2.249226231147886e-02, -1.943610574528782e-02, -2.390803649087206e-02, -9.956464578915689e-02, -1.080074767104419e-01, -1.217673740613288e-02, -1.153913948083065e-02, -2.378090349706825e-02, 3.133621844584173e-04, -2.378090349706821e-02, 3.133621844581136e-04, -7.074002539433274e+00, -7.072283403719565e+00, -7.076861247325164e+00, -7.075040634556119e+00, -7.074163550711948e+00, -7.072376919373654e+00, -7.076612714711135e+00, -7.074886160311047e+00, -7.075469924647600e+00, -7.073669055650742e+00, -7.075469924647600e+00, -7.073669055650742e+00, -2.228624514173408e+00, -2.228490732342462e+00, -2.258365641805017e+00, -2.257500601214575e+00, -2.178607126759130e+00, -2.193220104711368e+00, -2.204519479827498e+00, -2.219145819882160e+00, -2.282046886275117e+00, -2.248748794005687e+00, -2.282046886275117e+00, -2.248748794005687e+00, -7.961009305965518e-01, -7.945155872406325e-01, -8.956140166742073e-01, -8.965023183704354e-01, -7.172872690062791e-01, -7.450044770599086e-01, -7.799193551474696e-01, -8.012946039325077e-01, -8.307847475289051e-01, -7.931252439226799e-01, -8.307847475289052e-01, -7.931252439226802e-01, -1.351325893368271e-01, -1.315509748791791e-01, -1.975669905946180e-01, -1.965523291933931e-01, -1.346124129341494e-01, -1.266979279350225e-01, -2.655330011791131e+00, -2.654248161363709e+00, -1.513354578128254e-01, -1.210170635561534e-01, -1.513354578128254e-01, -1.210170635561534e-01, -8.534358486823322e-03, -9.686923383478622e-03, -1.130632817237354e-02, -1.186765629312647e-02, -7.963776382230245e-03, -9.614152992804614e-03, -1.196103702223621e-01, -1.215979867868438e-01, -4.522276385570544e-03, -1.508572628757024e-02, -4.522276385570314e-03, -1.508572628757006e-02, -8.334368173790578e-01, -8.361698971502513e-01, -8.245970286701145e-01, -8.276736480749161e-01, -8.286807346166367e-01, -8.316824161025049e-01, -8.314622286865517e-01, -8.343074642172047e-01, -8.301719571775278e-01, -8.330927792787778e-01, -8.301719571775278e-01, -8.330927792787778e-01, -8.105278492091166e-01, -8.127678721960668e-01, -6.340264240478477e-01, -6.374299543258516e-01, -6.899864142766448e-01, -6.937431151235535e-01, -7.415056699074423e-01, -7.440612562317771e-01, -7.161860538622700e-01, -7.188208841065432e-01, -7.161860538622700e-01, -7.188208841065432e-01, -9.360849607942219e-01, -9.382796676308087e-01, -2.435549230073859e-01, -2.427961595689886e-01, -2.981750593870062e-01, -2.993608212452415e-01, -4.460683177158748e-01, -4.484729302931883e-01, -3.643153810380371e-01, -3.649124041121059e-01, -3.643153810380370e-01, -3.649124041121061e-01, -5.826072360218275e-01, -5.879302240626901e-01, -1.015362891454193e-01, -1.026509966431931e-01, -1.188406200698244e-01, -1.216429490904324e-01, -4.435993678056228e-01, -4.507120358568815e-01, -1.268624847095416e-01, -1.069922325087014e-01, -1.268624847095414e-01, -1.069922325087012e-01, -2.774775002350800e-02, -3.072453021475876e-02, -3.054516546518914e-03, -3.078306656818609e-03, -5.772405081273932e-03, -7.109303894723003e-03, -1.169167330892379e-01, -1.163324888014251e-01, -4.762746546705071e-03, -1.364618743225720e-02, -4.762746546705065e-03, -1.364618743225704e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_93_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.387623580622769e-09, 0.000000000000000e+00, 1.387652745093541e-09, 1.387889793181224e-09, 0.000000000000000e+00, 1.387844228443504e-09, 1.388353087942714e-09, 0.000000000000000e+00, 1.388625651318333e-09, 1.385379177026610e-09, 0.000000000000000e+00, 1.384805930963412e-09, 1.387822954534226e-09, 0.000000000000000e+00, 1.386034358675001e-09, 1.387822954534226e-09, 0.000000000000000e+00, 1.386034358675001e-09, -3.266888876941159e-06, 0.000000000000000e+00, -3.251197492963348e-06, -3.265079290318674e-06, 0.000000000000000e+00, -3.248404416195466e-06, -3.210997276747754e-06, 0.000000000000000e+00, -3.195298091853257e-06, -3.302371211475300e-06, 0.000000000000000e+00, -3.284687185180164e-06, -3.276100690567115e-06, 0.000000000000000e+00, -3.235825040985510e-06, -3.276100690567115e-06, 0.000000000000000e+00, -3.235825040985510e-06, -7.624677168166374e-03, 0.000000000000000e+00, -7.118191568126798e-03, -7.774512903660995e-03, 0.000000000000000e+00, -7.154834465046399e-03, -9.436246439234573e-03, 0.000000000000000e+00, -1.020710908131251e-02, -9.567434630133775e-03, 0.000000000000000e+00, -9.321842948108533e-03, -5.655355171301027e-03, 0.000000000000000e+00, -1.281119234082671e-02, -5.655355171301027e-03, 0.000000000000000e+00, -1.281119234082671e-02, -1.710376201234113e+00, 0.000000000000000e+00, -1.664223490124781e+00, -1.661359744810861e+00, 0.000000000000000e+00, -1.596530779838023e+00, -4.337570893767526e-03, 0.000000000000000e+00, -2.939366583285143e-03, -3.507160649653968e+00, 0.000000000000000e+00, -3.474778786266858e+00, -2.168145436703928e+00, 0.000000000000000e+00, 4.862992123996773e+00, -2.168145436703931e+00, 0.000000000000000e+00, 4.862992123996792e+00, -3.093863733568586e+01, 0.000000000000000e+00, -3.968715926640276e+01, -3.184865801393154e+01, 0.000000000000000e+00, -4.262855867149440e+01, -1.885874924772724e+01, 0.000000000000000e+00, -2.204778858038588e+01, -3.366065996887257e+01, 0.000000000000000e+00, -2.983190330023073e+01, -5.254431663665286e+01, 0.000000000000000e+00, 9.771742309191465e+01, -5.254431663656464e+01, 0.000000000000000e+00, 9.771742309306143e+01, 8.035113601201799e-07, 0.000000000000000e+00, 8.034080173015919e-07, 8.184664557071475e-07, 0.000000000000000e+00, 8.178345438623235e-07, 8.042818311616641e-07, 0.000000000000000e+00, 8.038405651472126e-07, 8.170860224974850e-07, 0.000000000000000e+00, 8.169764627513309e-07, 8.112321013711520e-07, 0.000000000000000e+00, 8.106542961515666e-07, 8.112321013711520e-07, 0.000000000000000e+00, 8.106542961515666e-07, -1.261138278796059e-04, 0.000000000000000e+00, -1.261434738304710e-04, -1.207731141303179e-04, 0.000000000000000e+00, -1.209461054140055e-04, -1.337909819843306e-04, 0.000000000000000e+00, -1.314623318655612e-04, -1.290286612367921e-04, 0.000000000000000e+00, -1.267097000362250e-04, -1.172838682097415e-04, 0.000000000000000e+00, -1.227941736578063e-04, -1.172838682097415e-04, 0.000000000000000e+00, -1.227941736578063e-04, -7.799944350626952e-03, 0.000000000000000e+00, -7.887378766833486e-03, 3.719391515379813e-03, 0.000000000000000e+00, 4.059962247973517e-03, -1.446368864383511e-02, 0.000000000000000e+00, -1.066130418311106e-02, 7.885694013174073e-05, 0.000000000000000e+00, 6.681987805825897e-04, -5.388246342090852e-03, 0.000000000000000e+00, -8.007325020166307e-03, -5.388246342090845e-03, 0.000000000000000e+00, -8.007325020166295e-03, -7.551117224086970e+00, 0.000000000000000e+00, -7.766404618106250e+00, -1.401451764928483e+00, 0.000000000000000e+00, -1.396521320203022e+00, -8.825715923511323e+00, 0.000000000000000e+00, -9.282375533260376e+00, 9.948970548174020e-05, 0.000000000000000e+00, 9.977187007930070e-05, -5.467829529090872e+00, 0.000000000000000e+00, -6.790048651315230e+00, -5.467829529090872e+00, 0.000000000000000e+00, -6.790048651315230e+00, -4.253789785829964e+01, 0.000000000000000e+00, -4.056731680062563e+01, -3.844041457657651e+01, 0.000000000000000e+00, -3.632693421256155e+01, -1.779598314205523e+02, 0.000000000000000e+00, -2.800489961107638e+02, -1.854840629114980e+01, 0.000000000000000e+00, -1.801130306951208e+01, 2.215477763717113e+01, 0.000000000000000e+00, -1.548926769164157e+02, 2.215477763600930e+01, 0.000000000000000e+00, -1.548926769166610e+02, 1.619135394082865e-02, 0.000000000000000e+00, 1.622394229708167e-02, 5.400194412217413e-03, 0.000000000000000e+00, 5.761666980760223e-03, 9.001580991362852e-03, 0.000000000000000e+00, 9.337050335450526e-03, 1.243181604978188e-02, 0.000000000000000e+00, 1.262097373831297e-02, 1.069391470287138e-02, 0.000000000000000e+00, 1.096123889482323e-02, 1.069391470287138e-02, 0.000000000000000e+00, 1.096123889482323e-02, 1.928612463972197e-02, 0.000000000000000e+00, 1.915688040368510e-02, -2.621908175544799e-02, 0.000000000000000e+00, -2.545347937539558e-02, -1.686476535922671e-02, 0.000000000000000e+00, -1.614126830328619e-02, -8.412700720544007e-03, 0.000000000000000e+00, -8.044651258055691e-03, -1.262914226802849e-02, 0.000000000000000e+00, -1.221654603933682e-02, -1.262914226802849e-02, 0.000000000000000e+00, -1.221654603933682e-02, 2.449698065315988e-03, 0.000000000000000e+00, 2.844935715354290e-03, -6.783665576734678e-01, 0.000000000000000e+00, -6.738324398311369e-01, -3.814206250569888e-01, 0.000000000000000e+00, -3.730103085953135e-01, -1.165561263222649e-01, 0.000000000000000e+00, -1.132696421391267e-01, -2.233804942556945e-01, 0.000000000000000e+00, -2.230107798925778e-01, -2.233804942556946e-01, 0.000000000000000e+00, -2.230107798925781e-01, -3.774534434726996e-02, 0.000000000000000e+00, -3.592901422012972e-02, -1.891833516277366e+01, 0.000000000000000e+00, -1.930514811637653e+01, -1.643128654930441e+01, 0.000000000000000e+00, -1.824840284003741e+01, -1.259839241955264e-01, 0.000000000000000e+00, -1.138302052153910e-01, -1.312194567342391e+01, 0.000000000000000e+00, -1.691888775727162e+01, -1.312194567342399e+01, 0.000000000000000e+00, -1.691888775727158e+01, -2.658475206040054e+01, 0.000000000000000e+00, -3.166912202719429e+01, -1.065894815100663e+02, 0.000000000000000e+00, -2.779656120650358e+02, -6.814261508681039e+01, 0.000000000000000e+00, -1.030455606026504e+02, -1.655322896613871e+01, 0.000000000000000e+00, -1.667792071372291e+01, -8.088953604072026e+01, 0.000000000000000e+00, -1.484631961913767e+02, -8.088953604120599e+01, 0.000000000000000e+00, -1.484631961915486e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
