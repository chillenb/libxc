
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_93_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.125739827486869e+01, -2.125746036084148e+01, -2.125774970991349e+01, -2.125682574889161e+01, -2.125730797648173e+01, -2.125730797648173e+01, -3.521968207689967e+00, -3.521967887577988e+00, -3.522046935385740e+00, -3.522568987286043e+00, -3.522051288114678e+00, -3.522051288114678e+00, -7.257140405299776e-01, -7.254331675458525e-01, -7.219212789574149e-01, -7.267831500887810e-01, -7.250805441505729e-01, -7.250805441505729e-01, -2.399632507117355e-01, -2.405073501842299e-01, -8.356739123001565e-01, -2.144961571531692e-01, -2.227362810384867e-01, -2.227362810384867e-01, -1.550066450456006e-02, -1.632782475290051e-02, -8.967013750844542e-02, -8.880134701273216e-03, -1.119105739591203e-02, -1.119105739591203e-02, -5.244643914685072e+00, -5.245897356085508e+00, -5.244703678192415e+00, -5.245810118956795e+00, -5.245277468225681e+00, -5.245277468225681e+00, -2.093316631219371e+00, -2.103406427071564e+00, -2.093654798143439e+00, -2.102340888847800e+00, -2.098977763912040e+00, -2.098977763912040e+00, -6.251378076685262e-01, -6.731640869734613e-01, -5.820704908239246e-01, -5.981615569530165e-01, -6.336605729695420e-01, -6.336605729695420e-01, -1.836070419151775e-01, -2.645341983064671e-01, -1.745067135057195e-01, -1.973594186832444e+00, -1.903824284202247e-01, -1.903824284202247e-01, -6.831155430398051e-03, -8.678042022782564e-03, -6.610852976208940e-03, -1.318395846318375e-01, -7.981653511931175e-03, -7.981653511931181e-03, -6.268883677201083e-01, -6.209150143774086e-01, -6.227227886181130e-01, -6.244522678175287e-01, -6.235584459765553e-01, -6.235584459765553e-01, -6.115602865463087e-01, -5.402955411475179e-01, -5.552937482566279e-01, -5.732870122094016e-01, -5.636160083020625e-01, -5.636160083020625e-01, -7.044380535883249e-01, -3.054008188993744e-01, -3.358394733344663e-01, -3.929097482000936e-01, -3.597797001034146e-01, -3.597797001034146e-01, -5.004118110397080e-01, -8.642644618140681e-02, -1.134678217332288e-01, -3.728473522039454e-01, -1.511191908644619e-01, -1.511191908644619e-01, -2.202076957835558e-02, -2.298991673710472e-03, -4.841740041082955e-03, -1.458043512588710e-01, -7.378779377804739e-03, -7.378779377804730e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_93_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.858752426247408e+01, -2.858764814365013e+01, -2.858815248571899e+01, -2.858631023919977e+01, -2.858728218158035e+01, -2.858728218158035e+01, -4.574269123799246e+00, -4.574361221039358e+00, -4.576597686869030e+00, -4.573567705886158e+00, -4.574489136527385e+00, -4.574489136527385e+00, -8.528587925432379e-01, -8.504548667222406e-01, -7.873258687033544e-01, -7.956748482707666e-01, -7.956119123478882e-01, -7.956119123478882e-01, -2.024845655442928e-01, -2.061664513033571e-01, -1.005280732121195e+00, -1.570836661509983e-01, -1.739383651824347e-01, -1.739383651824347e-01, -2.066399410103216e-02, -2.175373240792126e-02, -1.039936328430922e-01, -1.186073353722938e-02, -1.493773648804160e-02, -1.493773648804165e-02, -7.073143075097964e+00, -7.075951070187723e+00, -7.073270354519697e+00, -7.075749542451963e+00, -7.074569615256133e+00, -7.074569615256133e+00, -2.228557777489357e+00, -2.257933351219457e+00, -2.185924221725135e+00, -2.211844409968624e+00, -2.265475142825391e+00, -2.265475142825391e+00, -7.953121581823047e-01, -8.960610737469499e-01, -7.314365770945811e-01, -7.907444490380029e-01, -8.123640350567162e-01, -8.123640350567162e-01, -1.333275605318465e-01, -1.970564958580037e-01, -1.305845711682256e-01, -2.654789201644906e+00, -1.349318535085706e-01, -1.349318535085706e-01, -9.122109227207182e-03, -1.158916949363299e-02, -8.813706965860240e-03, -1.206080568002224e-01, -1.064729251194243e-02, -1.064729251194247e-02, -8.348065832073756e-01, -8.261396761135645e-01, -8.301860575751879e-01, -8.328885809237411e-01, -8.316364948224922e-01, -8.316364948224922e-01, -8.116493867276401e-01, -6.357327325782121e-01, -6.918715162009900e-01, -7.427860848972384e-01, -7.175063379105192e-01, -7.175063379105192e-01, -9.371916689346034e-01, -2.431691022689187e-01, -2.987432267869589e-01, -4.472738215361037e-01, -3.646179369332827e-01, -3.646179369332829e-01, -5.852921313056751e-01, -1.020968435418797e-01, -1.203164467521898e-01, -4.472073168364146e-01, -1.165343049535808e-01, -1.165343049535815e-01, -2.926482694569285e-02, -3.066464338845395e-03, -6.462102135821064e-03, -1.166272478673740e-01, -9.841816173103842e-03, -9.841816173103901e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_93_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.938190817663272e-10, 6.939335059619308e-10, 6.942446853791413e-10, 6.925462808974400e-10, 6.934643478172697e-10, 6.934643478172697e-10, -1.629522264396245e-06, -1.628371704234438e-06, -1.601573975431732e-06, -1.646764933608389e-06, -1.627971142359030e-06, -1.627971142359030e-06, -3.685569255460497e-03, -3.732158212877228e-03, -4.911788463645003e-03, -4.722434559320974e-03, -4.737763389463419e-03, -4.737763389463419e-03, -8.455693924398056e-01, -8.166168985095712e-01, -1.798216219558673e-03, -1.745774851210114e+00, -1.318164855239536e+00, -1.318164855239535e+00, -1.788387011736263e+01, -1.893045302643562e+01, -1.030786406473292e+01, -1.589147870388442e+01, -2.036662461955847e+01, -2.036662461953268e+01, 4.017298988227245e-07, 4.090754293713643e-07, 4.020307329262636e-07, 4.085156797215111e-07, 4.054717649241024e-07, 4.054717649241024e-07, -6.306431523810220e-05, -6.042977302182460e-05, -6.631378598731801e-05, -6.393475459027845e-05, -6.001734574031427e-05, -6.001734574031427e-05, -3.921485345356438e-03, 1.944994856406369e-03, -6.208801553521943e-03, 1.920316377726354e-04, -3.279344985723190e-03, -3.279344985723190e-03, -3.830643272756726e+00, -6.995081990618131e-01, -4.553094128026411e+00, 4.981529385613955e-05, -3.111628699183787e+00, -3.111628699183787e+00, -2.073407996689172e+01, -1.868320658036254e+01, -1.159482833583072e+02, -9.138184959496996e+00, -5.435631993423861e+01, -5.435631993437218e+01, 8.104833954207762e-03, 2.791609882880658e-03, 4.586015812928960e-03, 6.264366915530352e-03, 5.415085156188590e-03, 5.415085156188590e-03, 9.610649573421573e-03, -1.291662051644372e-02, -8.249841379640493e-03, -4.113588560767435e-03, -6.210565053278522e-03, -6.210565053278522e-03, 1.324710138003941e-03, -3.380578412349008e-01, -1.886200269008750e-01, -5.744859969055317e-02, -1.115982797215899e-01, -1.115982797215902e-01, -1.841177650103122e-02, -9.557093901464954e+00, -8.698403057027962e+00, -5.985787534658616e-02, -7.611392064558645e+00, -7.611392064558541e+00, -1.463521712797228e+01, -8.817736898035093e+01, -4.348198154706222e+01, -8.311815467200633e+00, -6.845051757999826e+01, -6.845051757984359e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
