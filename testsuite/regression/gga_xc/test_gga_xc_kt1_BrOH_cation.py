
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.214492491955284e+01, -2.214492225703525e+01, -2.214503211139982e+01, -2.214506924355137e+01, -2.214503247785782e+01, -2.214503247785782e+01, -3.824055766365266e+00, -3.823964716682478e+00, -3.821952879897754e+00, -3.826163256829672e+00, -3.824037178387507e+00, -3.824037178387507e+00, -7.948966550053569e-01, -7.952186456534176e-01, -8.064092867337964e-01, -8.124383921346858e-01, -8.139284720165650e-01, -8.139284720165650e-01, -2.001449971576089e-01, -2.028949693364966e-01, -9.263881170687346e-01, -1.557244122959520e-01, -1.837931201524882e-01, -1.837931201524882e-01, -9.377052185500372e-03, -9.839619766142459e-03, -4.729003371769908e-02, -5.576176548368466e-03, -6.947960214175087e-03, -6.947960214175086e-03, -5.337235717427263e+00, -5.335135493481156e+00, -5.337157082896453e+00, -5.335302649602689e+00, -5.336160704894325e+00, -5.336160704894325e+00, -2.575893517949017e+00, -2.578820003633684e+00, -2.598234065213237e+00, -2.600503352973713e+00, -2.567101097096419e+00, -2.567101097096419e+00, -6.466779072773733e-01, -6.704511926900234e-01, -6.007827197328236e-01, -5.997309751475539e-01, -6.539630793646880e-01, -6.539630793646880e-01, -1.119686869563689e-01, -2.012927383269017e-01, -1.044272533614094e-01, -1.934448778323107e+00, -1.293810480004925e-01, -1.293810480004925e-01, -4.352664495463730e-03, -5.457033270120763e-03, -4.222577360364920e-03, -7.305479304749116e-02, -5.048478466510272e-03, -5.048478466510272e-03, -6.149223724804659e-01, -6.178451455143037e-01, -6.168277584996406e-01, -6.159724702911789e-01, -6.164003808841836e-01, -6.164003808841836e-01, -5.974329258406116e-01, -5.581633532520123e-01, -5.710579501992051e-01, -5.820412549655718e-01, -5.764316260205009e-01, -5.764316260205009e-01, -7.031891779070170e-01, -2.509790114396721e-01, -2.985131955759822e-01, -3.863852358825943e-01, -3.396149626389953e-01, -3.396149626389952e-01, -5.100066348410834e-01, -4.544310949164043e-02, -6.008463686037965e-02, -3.693524477368108e-01, -9.079462199225735e-02, -9.079462199225735e-02, -1.294597813800274e-02, -1.528108990553384e-03, -3.135893210025554e-03, -8.576826442584787e-02, -4.686661752034790e-03, -4.686661752034783e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.372750824123885e+01, -2.372748619245739e+01, -2.372768324416488e+01, -2.372761352021617e+01, -2.372812702720212e+01, -2.372828043502537e+01, -2.372615033629056e+01, -2.372576377330152e+01, -2.372761673631863e+01, -2.372668499361427e+01, -2.372761673631863e+01, -2.372668499361427e+01, -3.776431484490213e+00, -3.777225604519603e+00, -3.776548110935912e+00, -3.777389031571564e+00, -3.779853325832618e+00, -3.780734630075361e+00, -3.774721496929405e+00, -3.775696299625524e+00, -3.775530671481644e+00, -3.778638107535635e+00, -3.775530671481644e+00, -3.778638107535635e+00, -8.088046708066595e-01, -8.152816537425944e-01, -8.063468199223400e-01, -8.142843816593979e-01, -7.721917838309116e-01, -7.613815169220308e-01, -7.698436135878376e-01, -7.734680443754955e-01, -8.222643086082582e-01, -7.114566717179691e-01, -8.222643086082582e-01, -7.114566717179691e-01, -2.556972221535769e-01, -2.609481425999529e-01, -2.588166532283599e-01, -2.649051058475581e-01, -8.886619552189496e-01, -9.338705300216891e-01, -2.006661446171417e-01, -2.019825177716198e-01, -2.460590511665266e-01, -1.890363334698085e-01, -2.460590511665265e-01, -1.890363334698085e-01, -1.229974267601262e-02, -1.233058810147036e-02, -1.289856066647508e-02, -1.293790395700406e-02, -6.106292069076373e-02, -6.182082658451500e-02, -7.347668729575879e-03, -7.345829676986384e-03, -9.175092592362830e-03, -9.030477542157965e-03, -9.175092592362828e-03, -9.030477542157965e-03, -6.065885549557739e+00, -6.064350705690325e+00, -6.071151229033212e+00, -6.069440408126836e+00, -6.066165351472883e+00, -6.064517396383139e+00, -6.070685108845166e+00, -6.069140179890027e+00, -6.068593446172264e+00, -6.066910025158402e+00, -6.068593446172264e+00, -6.066910025158402e+00, -1.646153005543435e+00, -1.646030895732829e+00, -1.677947944858542e+00, -1.677097386899124e+00, -1.581312047567571e+00, -1.600140366985616e+00, -1.609649685499984e+00, -1.628171177743667e+00, -1.709797480291965e+00, -1.669456915466723e+00, -1.709797480291965e+00, -1.669456915466723e+00, -7.713105332188190e-01, -7.701399195530512e-01, -8.520083855814637e-01, -8.526005196276902e-01, -7.117465904767422e-01, -7.294104689190472e-01, -7.523515694653493e-01, -7.694822137929137e-01, -7.967122131863124e-01, -7.704513070083500e-01, -7.967122131863124e-01, -7.704513070083501e-01, -1.447003369793762e-01, -1.452546324894354e-01, -2.583669408118910e-01, -2.590531214981976e-01, -1.338049846830462e-01, -1.365424945153044e-01, -2.402415870107031e+00, -2.401591328369672e+00, -1.652472908367224e-01, -1.694427573080150e-01, -1.652472908367224e-01, -1.694427573080150e-01, -5.741617950390803e-03, -5.742865956694492e-03, -7.189874810090778e-03, -7.191388877567774e-03, -5.570744373796389e-03, -5.572225119327597e-03, -9.469457517241880e-02, -9.487495452493727e-02, -6.638103548823810e-03, -6.665254606825995e-03, -6.638103548823810e-03, -6.665254606825996e-03, -7.980080605968676e-01, -8.003637617298098e-01, -7.892577237011226e-01, -7.916017171214068e-01, -7.923094141819689e-01, -7.946749901740134e-01, -7.948683689660835e-01, -7.972033843802054e-01, -7.935870663020691e-01, -7.959365563236114e-01, -7.935870663020691e-01, -7.959365563236114e-01, -7.792670788877554e-01, -7.811870496477989e-01, -6.558600550585123e-01, -6.577233980551126e-01, -6.885107464904817e-01, -6.906819501950723e-01, -7.234064627088945e-01, -7.251938700739593e-01, -7.055277130175739e-01, -7.073067956792153e-01, -7.055277130175739e-01, -7.073067956792153e-01, -8.874694393670280e-01, -8.890975627856631e-01, -3.194964923911668e-01, -3.205628426831118e-01, -3.770407738498766e-01, -3.793402027325126e-01, -4.867016241691787e-01, -4.884349981658787e-01, -4.292576430229417e-01, -4.291720447474766e-01, -4.292576430229416e-01, -4.291720447474765e-01, -6.129436616126482e-01, -6.157550007512376e-01, -5.903490690758394e-02, -5.912337133799483e-02, -7.764676106224888e-02, -7.834278912111969e-02, -4.698520602427069e-01, -4.744403812490292e-01, -1.165051649377177e-01, -1.187850035319851e-01, -1.165051649377177e-01, -1.187850035319851e-01, -1.694751813897517e-02, -1.698611092424465e-02, -2.024601346533421e-03, -2.024515498830691e-03, -4.144046633933713e-03, -4.142995933516620e-03, -1.109134781502021e-01, -1.115347304325406e-01, -6.170423608791669e-03, -6.187552833139934e-03, -6.170423608791659e-03, -6.187552833139924e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.913743272202873e-08, 0.000000000000000e+00, -2.913758280469071e-08, -2.913705618526752e-08, 0.000000000000000e+00, -2.913730926094561e-08, -2.913577730392545e-08, 0.000000000000000e+00, -2.913549752455576e-08, -2.914003166087178e-08, 0.000000000000000e+00, -2.914091954353180e-08, -2.913721189934130e-08, 0.000000000000000e+00, -2.913869738289579e-08, -2.913721189934130e-08, 0.000000000000000e+00, -2.913869738289579e-08, -4.144107259170911e-05, 0.000000000000000e+00, -4.144333280558974e-05, -4.144055470773748e-05, 0.000000000000000e+00, -4.144313561284127e-05, -4.143122889406785e-05, 0.000000000000000e+00, -4.142781959750147e-05, -4.142066042809703e-05, 0.000000000000000e+00, -4.141833685843224e-05, -4.146878346474689e-05, 0.000000000000000e+00, -4.140681910450775e-05, -4.146878346474689e-05, 0.000000000000000e+00, -4.140681910450775e-05, -2.008957131655911e-02, 0.000000000000000e+00, -1.987867002693345e-02, -2.017290944740074e-02, 0.000000000000000e+00, -1.991349762473952e-02, -2.131503003050626e-02, 0.000000000000000e+00, -2.169653682351126e-02, -2.110966080435316e-02, 0.000000000000000e+00, -2.099137516949460e-02, -1.947455584716378e-02, 0.000000000000000e+00, -2.306232414337591e-02, -1.947455584716378e-02, 0.000000000000000e+00, -2.306232414337591e-02, -5.951026673653365e-02, 0.000000000000000e+00, -5.943027118657882e-02, -5.948588927740554e-02, 0.000000000000000e+00, -5.938939302355743e-02, -1.345473767427502e-02, 0.000000000000000e+00, -1.212473998870797e-02, -5.982792447667615e-02, 0.000000000000000e+00, -5.981825649616724e-02, -5.941871458749858e-02, 0.000000000000000e+00, -5.995141684136009e-02, -5.941871458749857e-02, 0.000000000000000e+00, -5.995141684136007e-02, -5.999999930923648e-02, 0.000000000000000e+00, -5.999999911927893e-02, -5.999999916713167e-02, 0.000000000000000e+00, -5.999999890316009e-02, -5.999920382899389e-02, 0.000000000000000e+00, -5.999900988711532e-02, -5.999999990980200e-02, 0.000000000000000e+00, -5.999999991566524e-02, -5.999999956250308e-02, 0.000000000000000e+00, -5.999999995412083e-02, -5.999999956250308e-02, 0.000000000000000e+00, -5.999999995412079e-02, -8.247851336175881e-06, 0.000000000000000e+00, -8.255757693890473e-06, -8.241694027000481e-06, 0.000000000000000e+00, -8.249803011335639e-06, -8.247476218411777e-06, 0.000000000000000e+00, -8.255529422442626e-06, -8.242193207902519e-06, 0.000000000000000e+00, -8.250120127611997e-06, -8.244722219272828e-06, 0.000000000000000e+00, -8.252770498762953e-06, -8.244722219272828e-06, 0.000000000000000e+00, -8.252770498762953e-06, -4.105675345134940e-04, 0.000000000000000e+00, -4.106499630906427e-04, -3.987704473855553e-04, 0.000000000000000e+00, -3.992019399526426e-04, -4.208043724179019e-04, 0.000000000000000e+00, -4.179258300696937e-04, -4.102617128352948e-04, 0.000000000000000e+00, -4.073381021399754e-04, -3.966020964970210e-04, 0.000000000000000e+00, -4.035790416573681e-04, -3.966020964970210e-04, 0.000000000000000e+00, -4.035790416573681e-04, -2.754048208849979e-02, 0.000000000000000e+00, -2.769854075651198e-02, -2.280154347912252e-02, 0.000000000000000e+00, -2.277588437905150e-02, -3.337056466971072e-02, 0.000000000000000e+00, -3.121794164158514e-02, -3.095170828509515e-02, 0.000000000000000e+00, -2.899121655318641e-02, -2.522088483098432e-02, 0.000000000000000e+00, -2.824905141212463e-02, -2.522088483098432e-02, 0.000000000000000e+00, -2.824905141212463e-02, -5.995958445490470e-02, 0.000000000000000e+00, -5.995802172528038e-02, -5.947267815745036e-02, 0.000000000000000e+00, -5.946216762121143e-02, -5.997292871074273e-02, 0.000000000000000e+00, -5.996662805640390e-02, -4.429380699174163e-04, 0.000000000000000e+00, -4.437290618051618e-04, -5.993075401551787e-02, 0.000000000000000e+00, -5.991282350185132e-02, -5.993075401551787e-02, 0.000000000000000e+00, -5.991282350185132e-02, -5.999999997143194e-02, 0.000000000000000e+00, -5.999999996667670e-02, -5.999999992269361e-02, 0.000000000000000e+00, -5.999999991790614e-02, -5.999999997582901e-02, 0.000000000000000e+00, -5.999999996959559e-02, -5.999389712985675e-02, 0.000000000000000e+00, -5.999374565679141e-02, -5.999999997369800e-02, 0.000000000000000e+00, -5.999999990644282e-02, -5.999999997369795e-02, 0.000000000000000e+00, -5.999999990644286e-02, -2.744597647863983e-02, 0.000000000000000e+00, -2.721631679097617e-02, -2.779012579552894e-02, 0.000000000000000e+00, -2.755771148606563e-02, -2.766909672993123e-02, 0.000000000000000e+00, -2.743691403073652e-02, -2.756861817724298e-02, 0.000000000000000e+00, -2.733868255049653e-02, -2.761887241488999e-02, 0.000000000000000e+00, -2.738783616997029e-02, -2.761887241488999e-02, 0.000000000000000e+00, -2.738783616997029e-02, -2.907209146073432e-02, 0.000000000000000e+00, -2.887430915914591e-02, -3.805908736370898e-02, 0.000000000000000e+00, -3.781787371726699e-02, -3.543928287986232e-02, 0.000000000000000e+00, -3.518192106642468e-02, -3.284184614910757e-02, 0.000000000000000e+00, -3.263299224146485e-02, -3.415428389978679e-02, 0.000000000000000e+00, -3.393586009017419e-02, -3.415428389978679e-02, 0.000000000000000e+00, -3.393586009017419e-02, -2.022891083273366e-02, 0.000000000000000e+00, -2.014167541206005e-02, -5.867644585888430e-02, 0.000000000000000e+00, -5.864622220847029e-02, -5.733264893416549e-02, 0.000000000000000e+00, -5.722903688275544e-02, -5.249805861434300e-02, 0.000000000000000e+00, -5.235208240270064e-02, -5.541701914497275e-02, 0.000000000000000e+00, -5.542298955040134e-02, -5.541701914497279e-02, 0.000000000000000e+00, -5.542298955040134e-02, -4.249191344418759e-02, 0.000000000000000e+00, -4.214961992061191e-02, -5.999926174800491e-02, 0.000000000000000e+00, -5.999924133471404e-02, -5.999758311823000e-02, 0.000000000000000e+00, -5.999724289933499e-02, -5.352039827867603e-02, 0.000000000000000e+00, -5.316616822082570e-02, -5.998549884390834e-02, 0.000000000000000e+00, -5.998197559045434e-02, -5.998549884390834e-02, 0.000000000000000e+00, -5.998197559045435e-02, -5.999999710791460e-02, 0.000000000000000e+00, -5.999999666514718e-02, -5.999999999959497e-02, 0.000000000000000e+00, -5.999999999959125e-02, -5.999999999305741e-02, 0.000000000000000e+00, -5.999999999111612e-02, -5.998778013044760e-02, 0.000000000000000e+00, -5.998696113492794e-02, -5.999999997882720e-02, 0.000000000000000e+00, -5.999999993396921e-02, -5.999999997882716e-02, 0.000000000000000e+00, -5.999999993396919e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
