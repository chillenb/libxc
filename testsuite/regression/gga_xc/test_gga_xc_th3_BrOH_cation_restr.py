
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.581985347007590e+01, -2.581992223594459e+01, -2.582034180839985e+01, -2.581931608898199e+01, -2.581983748338985e+01, -2.581983748338985e+01, -3.520799133004576e+00, -3.520788746406284e+00, -3.520635339137699e+00, -3.521564312059117e+00, -3.520870521538608e+00, -3.520870521538608e+00, -7.294672723539840e-01, -7.292774317810091e-01, -7.271268953490065e-01, -7.320185977934811e-01, -7.302828217292785e-01, -7.302828217292785e-01, -2.349008374928970e-01, -2.358572814527695e-01, -8.387374631751265e-01, -2.076048156353735e-01, -2.161429998568687e-01, -2.161429998568688e-01, -8.611288212662178e-02, -8.522365906370713e-02, -1.343889602941407e-01, -8.271878009727787e-02, -7.864558151619980e-02, -7.864558151619976e-02, -5.240489710489562e+00, -5.241641051601491e+00, -5.240545406958212e+00, -5.241561705708632e+00, -5.241071174987195e+00, -5.241071174987195e+00, -2.126475702797099e+00, -2.135793717681111e+00, -2.129056281332072e+00, -2.137087000231396e+00, -2.130595835009515e+00, -2.130595835009515e+00, -6.228674906365336e-01, -6.597554616144656e-01, -5.812312944235782e-01, -5.884099752635876e-01, -6.302861513632142e-01, -6.302861513632142e-01, -1.831672694413156e-01, -2.565079772168027e-01, -1.759854118122863e-01, -1.940272026610960e+00, -1.850160443028030e-01, -1.850160443028030e-01, -7.287717547549238e-02, -7.805271099853803e-02, -4.116733924890362e-02, -1.462836237149644e-01, -5.418054096732864e-02, -5.418054096732868e-02, -6.091499159884806e-01, -6.082959208184872e-01, -6.085218215412717e-01, -6.087549169631100e-01, -6.086308375631788e-01, -6.086308375631788e-01, -5.924394699259200e-01, -5.429404582764121e-01, -5.551909960713329e-01, -5.683703498525815e-01, -5.613567087286613e-01, -5.613567087286613e-01, -6.910026769240085e-01, -2.986356456333382e-01, -3.327531587300581e-01, -3.948539562505498e-01, -3.602958607128555e-01, -3.602958607128554e-01, -5.029338182965085e-01, -1.363526158769195e-01, -1.456914693800044e-01, -3.738354853979426e-01, -1.531042780879745e-01, -1.531042780879746e-01, -9.679138845825092e-02, -3.774991102938357e-02, -5.388841660342526e-02, -1.500322033470163e-01, -4.964611287966592e-02, -4.964611287966587e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.547683680108611e+01, -3.547657756075776e+01, -3.547605462346835e+01, -3.547989851823763e+01, -3.547779493219492e+01, -3.547779493219492e+01, -4.446409907870813e+00, -4.446506538334356e+00, -4.448852586817655e+00, -4.445652916278645e+00, -4.446637597394590e+00, -4.446637597394590e+00, -8.369626336538520e-01, -8.351789730825966e-01, -7.895147857852870e-01, -7.968465074556621e-01, -7.963243831633094e-01, -7.963243831633094e-01, -2.141003428930196e-01, -2.185835753070905e-01, -9.780046349340716e-01, -1.518408811860380e-01, -1.772186846352717e-01, -1.772186846352717e-01, 2.044027642827001e-02, 1.910745635117182e-02, -1.464316912398400e-02, 2.630002463215045e-02, 2.119161573894856e-02, 2.119161573894852e-02, -7.060858327119436e+00, -7.063931110310610e+00, -7.060996919936683e+00, -7.063709745581135e+00, -7.062418455738980e+00, -7.062418455738980e+00, -2.150986651867797e+00, -2.178453857705054e+00, -2.110919363805201e+00, -2.135349620834179e+00, -2.185360442664418e+00, -2.185360442664418e+00, -7.673374570982819e-01, -8.605623971484909e-01, -7.076588807917847e-01, -7.590470983391227e-01, -7.829028173714533e-01, -7.829028173714533e-01, -9.143305959587625e-02, -1.989922573547879e-01, -8.309295685241012e-02, -2.611388244877033e+00, -1.201198104915049e-01, -1.201198104915049e-01, 2.372040339387937e-02, 2.399089319937458e-02, 8.230049976187285e-03, -4.910437720707948e-02, 1.255108124433784e-02, 1.255108124433786e-02, -8.040687847056716e-01, -7.923930073789581e-01, -7.963442018467990e-01, -7.997128565652916e-01, -7.980135063672084e-01, -7.980135063672084e-01, -7.848333723262917e-01, -6.266418142114782e-01, -6.708814185593956e-01, -7.153070484645372e-01, -6.927318296246567e-01, -6.927318296246567e-01, -9.007113607359785e-01, -2.578620641102645e-01, -3.204859627822495e-01, -4.473114107688410e-01, -3.796696468748232e-01, -3.796696468748232e-01, -5.785862483938801e-01, -1.062036172646783e-02, -2.851714320781886e-02, -4.396243430276779e-01, -7.415870571496827e-02, -7.415870571496827e-02, 1.977055972324088e-02, 1.300469500698692e-02, 1.666083952480902e-02, -6.771392252387409e-02, 1.113513257223734e-02, 1.113513257223733e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th3_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.101847678163960e-08, -1.101937473131105e-08, -1.102216549768450e-08, -1.100883159557156e-08, -1.101598873723313e-08, -1.101598873723313e-08, -3.740575593238535e-06, -3.739631286299232e-06, -3.717282912716542e-06, -3.752464725075620e-06, -3.738987437939177e-06, -3.738987437939177e-06, -4.427280690327801e-03, -4.452134973192739e-03, -5.076099755637527e-03, -4.912162448516149e-03, -4.942170356676364e-03, -4.942170356676364e-03, -7.118426635989649e-01, -6.823196307349226e-01, -2.374148460661588e-03, -1.691155300037755e+00, -1.186826995243141e+00, -1.186826995243142e+00, -2.178897518976247e+04, -1.883465740123252e+04, -1.043834265150639e+02, -1.095450108788575e+05, -5.724708457144220e+04, -5.724708457144221e+04, 2.409008289477000e-07, 2.478709728604194e-07, 2.411876027377039e-07, 2.473404331188046e-07, 2.444449301478249e-07, 2.444449301478249e-07, -7.770476293898721e-05, -7.495770843785675e-05, -8.067312579419371e-05, -7.817002930749062e-05, -7.476820802971556e-05, -7.476820802971556e-05, -7.207106328324837e-03, -3.898228578107597e-03, -1.008594705042494e-02, -7.926216913121288e-03, -6.665049643544285e-03, -6.665049643544285e-03, -5.267784095188107e+00, -6.435023260119076e-01, -6.780846247686795e+00, 4.268531233710283e-05, -3.311190583254574e+00, -3.311190583254574e+00, -2.426657082881831e+05, -1.192159984745639e+05, -3.288468364694674e+05, -2.412268152998447e+01, -1.722370058222502e+05, -1.722370058222501e+05, -4.532182500034437e-03, -6.184071177659463e-03, -5.819592110442169e-03, -5.397221406427403e-03, -5.627344845250258e-03, -5.627344845250258e-03, -4.181853218141371e-03, -1.509925948675640e-02, -1.253559726364573e-02, -1.026610086752326e-02, -1.140639158629289e-02, -1.140639158629289e-02, -3.073740588791629e-03, -2.893597988824387e-01, -1.556439788758412e-01, -6.005545212901837e-02, -9.758220831395410e-02, -9.758220831395413e-02, -2.100749533076319e-02, -1.180191593165450e+02, -4.579672739185290e+01, -7.299167006884175e-02, -1.165929651414215e+01, -1.165929651414215e+01, -7.636206100859347e+03, -6.897667562362651e+06, -7.211158013620400e+05, -1.415721351885401e+01, -2.229036590439605e+05, -2.229036590439612e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
