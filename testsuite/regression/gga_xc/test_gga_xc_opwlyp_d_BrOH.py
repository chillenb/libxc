
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_opwlyp_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.108216605792762e+01, -2.108219020058912e+01, -2.108237433905188e+01, -2.108197746974261e+01, -2.108217815104686e+01, -2.108217815104686e+01, -3.543342994289775e+00, -3.543315196901741e+00, -3.542695293590217e+00, -3.544503773063773e+00, -3.543343565913825e+00, -3.543343565913825e+00, -7.356194257777358e-01, -7.355238605138505e-01, -7.345440756615522e-01, -7.391624621309392e-01, -7.355814517657480e-01, -7.355814517657480e-01, -2.247776357163269e-01, -2.264841208997245e-01, -8.567054325132445e-01, -1.781972932594214e-01, -2.252759057580391e-01, -2.252759057580391e-01, -6.514649793173070e-02, -6.594933998591690e-02, -1.048265076131523e-01, -5.828899833236581e-02, -6.530771314947431e-02, -6.530771314947431e-02, -5.112946523867302e+00, -5.112339357337260e+00, -5.112890817341690e+00, -5.112418607122463e+00, -5.112626076338354e+00, -5.112626076338354e+00, -2.162434946005685e+00, -2.172417171493364e+00, -2.163421444308393e+00, -2.171184290719137e+00, -2.167946995458583e+00, -2.167946995458583e+00, -6.151106450832697e-01, -6.407892370972399e-01, -5.866038216776571e-01, -5.910473752647856e-01, -6.340575101222323e-01, -6.340575101222323e-01, -1.431787818931889e-01, -2.371461068237304e-01, -1.414790468196535e-01, -1.873822296918127e+00, -1.575591925621019e-01, -1.575591925621019e-01, -5.717944089777510e-02, -5.881301551330134e-02, -4.497008378276172e-02, -1.117246568128411e-01, -5.340250933464627e-02, -5.340250933464627e-02, -6.026648074125220e-01, -6.057667513738298e-01, -6.047467520216261e-01, -6.038757786036835e-01, -6.043195526234204e-01, -6.043195526234204e-01, -5.831887981267986e-01, -5.514905452753861e-01, -5.620037379713905e-01, -5.708287624068387e-01, -5.662876175512417e-01, -5.662876175512417e-01, -6.714947606824659e-01, -2.878331954738512e-01, -3.289529801223802e-01, -3.936074995005998e-01, -3.595128899335209e-01, -3.595128899335208e-01, -5.013082770405429e-01, -1.058770061304848e-01, -1.097872412286134e-01, -3.651759926966516e-01, -1.246563830849670e-01, -1.246563830849670e-01, -7.167406361583817e-02, -4.143534962305542e-02, -4.767975563723754e-02, -1.206542109148503e-01, -4.786940640314618e-02, -4.786940640314620e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_opwlyp_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.531430367063141e+01, -2.531438601405052e+01, -2.531476800753155e+01, -2.531341932313171e+01, -2.531434697335702e+01, -2.531434697335702e+01, -4.137036835264575e+00, -4.137068955409485e+00, -4.138119585667582e+00, -4.137171592881343e+00, -4.137070675846571e+00, -4.137070675846571e+00, -8.279772544946344e-01, -8.269883331270390e-01, -8.024213382469624e-01, -8.084556675251682e-01, -8.276170838968968e-01, -8.276170838968968e-01, -2.490820372863242e-01, -2.513705197012766e-01, -9.900000499366237e-01, -1.999105763742758e-01, -2.497478674369953e-01, -2.497478674369953e-01, -2.411491719308203e-02, -2.480025903801939e-02, -7.114225459266213e-02, -1.648018024940193e-02, -2.455218900014932e-02, -2.455218900014932e-02, -6.280263013062077e+00, -6.282658254694917e+00, -6.280508451547144e+00, -6.282370865832250e+00, -6.281490253326589e+00, -6.281490253326589e+00, -2.284359896429389e+00, -2.301571607673431e+00, -2.275789215122681e+00, -2.289176565751502e+00, -2.307278603506346e+00, -2.307278603506346e+00, -7.390688384036879e-01, -8.182539264449508e-01, -7.022628207356898e-01, -7.448661527433313e-01, -7.682959400808793e-01, -7.682959400808793e-01, -1.653468876960408e-01, -2.655648789381685e-01, -1.601172136475121e-01, -2.392750279206278e+00, -1.775743940779548e-01, -1.775743940779548e-01, -1.605956359997803e-02, -1.723436541244196e-02, -1.307560453190664e-02, -1.020726757646072e-01, -1.567337179398334e-02, -1.567337179398336e-02, -7.862086849626225e-01, -7.760758552409044e-01, -7.791750175018297e-01, -7.818358782554796e-01, -7.804578117485159e-01, -7.804578117485159e-01, -7.637863308396018e-01, -6.381740777202592e-01, -6.706844298472560e-01, -7.036681587894177e-01, -6.865883079073329e-01, -6.865883079073331e-01, -8.553174344284763e-01, -3.174577200513558e-01, -3.637565328952613e-01, -4.540750153860221e-01, -4.044891224424253e-01, -4.044891224424252e-01, -5.785775310649743e-01, -6.647434612455348e-02, -9.323553672064025e-02, -4.323719066839607e-01, -1.304100450613183e-01, -1.304100450613183e-01, -2.730568143264814e-02, -8.693346469709253e-03, -1.178806523895769e-02, -1.216942493542551e-01, -1.375004473126310e-02, -1.375004473126313e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_opwlyp_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.023047356807723e-09, -7.023016507470701e-09, -7.022774794698793e-09, -7.023282057533738e-09, -7.023031957988588e-09, -7.023031957988588e-09, -9.119041677568122e-06, -9.119332877308404e-06, -9.125848309176219e-06, -9.106952691580222e-06, -9.119037049169664e-06, -9.119037049169664e-06, -4.965753017069154e-03, -4.964120430123076e-03, -4.874021402785219e-03, -4.762573205205081e-03, -4.965260194733634e-03, -4.965260194733634e-03, -3.791018728485975e-01, -3.790565030325995e-01, -2.769005715988369e-03, -4.935638512935214e-01, -3.793960789121589e-01, -3.793960789121589e-01, -2.800516834389017e+03, -2.456398098343097e+03, -2.043684566563516e+01, -2.074479225393758e+04, -2.558706810579594e+03, -2.558706810579594e+03, -2.095352752266749e-06, -2.096754201854177e-06, -2.095484245551050e-06, -2.096574063444855e-06, -2.096086784605469e-06, -2.096086784605469e-06, -6.774753330705606e-05, -6.645048615414066e-05, -6.771185250200065e-05, -6.669913299497547e-05, -6.691476253187459e-05, -6.691476253187459e-05, -1.071833802737837e-02, -1.020128735450797e-02, -1.288750589204205e-02, -1.350912568848266e-02, -9.592424541457789e-03, -9.592424541457789e-03, -4.332933259969063e-01, -2.062251201686811e-01, -6.165670721739072e-01, -1.284529579838199e-04, -6.024434319968033e-01, -6.024434319968033e-01, -2.338752374630926e+04, -1.595110920470992e+04, -4.911310092561284e+04, -4.483604284454108e+00, -2.326040735213196e+04, -2.326040735213196e+04, -1.414559870562510e-02, -1.305219102224537e-02, -1.366523986267070e-02, -1.416560161505975e-02, -1.392640000112209e-02, -1.392640000112209e-02, -1.505190516409197e-02, -1.574994115750596e-02, -1.521272298608456e-02, -1.494497133478894e-02, -1.507220496992322e-02, -1.507220496992322e-02, -8.339613261627755e-03, -1.301786821132200e-01, -9.494017233736543e-02, -5.761837689192427e-02, -7.558989442569047e-02, -7.558989442569050e-02, -2.273543573296983e-02, -2.599826716344190e+01, -6.273821093019510e+00, -8.149829122656917e-02, -1.674217595403306e+00, -1.674217595403313e+00, -1.641716754846874e+03, -7.747560322901356e+05, -1.166914680289893e+05, -2.523041541409081e+00, -4.128896577784971e+04, -4.128896577784989e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
