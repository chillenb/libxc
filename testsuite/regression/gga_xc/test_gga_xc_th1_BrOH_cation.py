
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.079741964075914e+01, -8.079656265974792e+01, -8.079545381502182e+01, -8.080814613782366e+01, -8.080110973274991e+01, -8.080110973274991e+01, -3.567117238538897e+00, -3.567148022125288e+00, -3.567950717546797e+00, -3.567231040648184e+00, -3.567238951984214e+00, -3.567238951984214e+00, -7.228073538313778e-01, -7.226204236010785e-01, -7.209100909658377e-01, -7.256821116027270e-01, -7.254255820851570e-01, -7.254255820851570e-01, -2.329363724817329e-01, -2.339479308206668e-01, -8.315855741627530e-01, -2.033511781971136e-01, -2.202352319457119e-01, -2.202352319457118e-01, 3.322135679072152e-03, 1.713587592516299e-03, -1.012717932629368e-01, 3.088114855265754e-02, 1.626970075387820e-02, 1.626970075387820e-02, -5.524025924797680e+00, -5.526272174770607e+00, -5.524128175466016e+00, -5.526110502375143e+00, -5.525166063429482e+00, -5.525166063429482e+00, -2.077644127481262e+00, -2.088117861239342e+00, -2.076035251580464e+00, -2.085001399266116e+00, -2.084457205933357e+00, -2.084457205933357e+00, -6.186599771214315e-01, -6.599489784429950e-01, -5.775865282087402e-01, -5.878604246436384e-01, -6.270664284685610e-01, -6.270664284685609e-01, -1.738377571668601e-01, -2.561521766962293e-01, -1.650555836712581e-01, -2.006866269704187e+00, -1.777863303257074e-01, -1.777863303257074e-01, 4.681950541065867e-02, 3.348368817348479e-02, 5.702918980137266e-02, -1.258286655663206e-01, 4.094097439654722e-02, 4.094097439654719e-02, -6.122265897304883e-01, -6.085694949986264e-01, -6.095768793779112e-01, -6.105936903734215e-01, -6.100588946977606e-01, -6.100588946977606e-01, -5.968458804671084e-01, -5.391084394591854e-01, -5.514893126979177e-01, -5.658529676066740e-01, -5.580883330341688e-01, -5.580883330341688e-01, -6.909864625139004e-01, -2.995014660983383e-01, -3.331732155836058e-01, -3.936053640223599e-01, -3.598286417501604e-01, -3.598286417501604e-01, -4.998351622934590e-01, -1.019202209004944e-01, -1.201174595199187e-01, -3.729687284724885e-01, -1.380449735985550e-01, -1.380449735985549e-01, -1.796567336287952e-02, 9.527474625264339e-02, 6.526950178531607e-02, -1.334391477035234e-01, 4.641787008217782e-02, 4.641787008217788e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.438207067808732e+01, -2.438571751631078e+01, -2.437981984577126e+01, -2.438596943008609e+01, -2.438337583387595e+01, -2.437657673061340e+01, -2.438402968748667e+01, -2.440559978104675e+01, -2.436877735619836e+01, -2.440487156726876e+01, -2.436877735619836e+01, -2.440487156726876e+01, -5.054052952154978e+00, -5.054500838572141e+00, -5.054078370547529e+00, -5.054589811444521e+00, -5.056133801872185e+00, -5.055457904833995e+00, -5.054585860285707e+00, -5.054124942880829e+00, -5.060625726347456e+00, -5.048344526822683e+00, -5.060625726347456e+00, -5.048344526822683e+00, -8.279507895592020e-01, -8.312944259666651e-01, -8.255099771866343e-01, -8.296151978051617e-01, -7.773688017596511e-01, -7.715413576333549e-01, -7.812107611469932e-01, -7.830488151066877e-01, -8.081098925254646e-01, -7.528370578191365e-01, -8.081098925254646e-01, -7.528370578191365e-01, -2.070977896478721e-01, -2.134293974234576e-01, -2.115244284257592e-01, -2.186158543217917e-01, -9.596745849863333e-01, -9.914269763127054e-01, -1.429914572968098e-01, -1.456718049989841e-01, -1.961831513035998e-01, -1.059041164878358e-01, -1.961831513035998e-01, -1.059041164878357e-01, 6.294685751121050e-02, 4.699448991281335e-02, 6.452050496786380e-02, 4.637638828159477e-02, 2.127489586699864e-02, 2.867528553975375e-03, 4.466876535730029e-02, 4.829259052661813e-02, 2.164990985526610e-02, 1.077452992191242e-01, 2.164990985526624e-02, 1.077452992191243e-01, -7.851609636868437e+00, -7.876808392136199e+00, -7.850156920208287e+00, -7.876034856674662e+00, -7.851341482373542e+00, -7.877009895531725e+00, -7.850546000853483e+00, -7.875840706902440e+00, -7.850802636492811e+00, -7.876470443266977e+00, -7.850802636492811e+00, -7.876470443266977e+00, -2.304593289007449e+00, -2.304783197676156e+00, -2.336556371966708e+00, -2.337616921223419e+00, -2.262680012243430e+00, -2.256340000040368e+00, -2.291811727250931e+00, -2.284988948276104e+00, -2.335648262364895e+00, -2.352671698234241e+00, -2.335648262364895e+00, -2.352671698234241e+00, -7.695298708084696e-01, -7.676665058968611e-01, -8.708921795479713e-01, -8.712510984270181e-01, -6.955632635604089e-01, -7.184088557380716e-01, -7.546725287826003e-01, -7.765586432448739e-01, -8.032347555800939e-01, -7.666130030728767e-01, -8.032347555800936e-01, -7.666130030728769e-01, -7.723886051871090e-02, -7.965607831994198e-02, -1.905215188189316e-01, -1.915810722778352e-01, -6.212400357842954e-02, -7.567709303034473e-02, -2.788122792090242e+00, -2.789468021159227e+00, -1.041152896183545e-01, -1.161590007455215e-01, -1.041152896183545e-01, -1.161590007455215e-01, 4.891066486438723e-02, 4.200220335159310e-02, 5.026742915671283e-02, 4.713691509223375e-02, 7.360665102244748e-02, 6.493265892025041e-02, -2.894600505182353e-02, -3.069870853458524e-02, 9.409332352190072e-02, 4.369860827709306e-02, 9.409332352190074e-02, 4.369860827709299e-02, -8.132476668371035e-01, -8.160625288614641e-01, -7.995764210846960e-01, -8.023448386789388e-01, -8.041982880292645e-01, -8.069868166282191e-01, -8.081522205070546e-01, -8.109360117357749e-01, -8.061578954252280e-01, -8.089433407130544e-01, -8.061578954252280e-01, -8.089433407130544e-01, -7.942404545115145e-01, -7.965846319911405e-01, -6.196684091014676e-01, -6.220924597983034e-01, -6.682893219646208e-01, -6.708931750067135e-01, -7.175093609401630e-01, -7.196948596985288e-01, -6.926040090107618e-01, -6.948425851305358e-01, -6.926040090107618e-01, -6.948425851305358e-01, -9.116938104200831e-01, -9.130522728084364e-01, -2.492514505952919e-01, -2.505687376666740e-01, -3.124547978023691e-01, -3.149193595792579e-01, -4.437042029740718e-01, -4.454576196157857e-01, -3.749185868873959e-01, -3.748228181721345e-01, -3.749185868873957e-01, -3.748228181721344e-01, -5.717344876668241e-01, -5.751198458122360e-01, 1.713573743964383e-02, 1.475061136326079e-02, -2.623123074744424e-04, -1.101970056453221e-02, -4.374591061478840e-01, -4.417709752744659e-01, -5.205354828035564e-02, -6.538359926438360e-02, -5.205354828035572e-02, -6.538359926438360e-02, 5.894561009936390e-02, 4.825511391172669e-02, 5.234575560314059e-02, 5.219198888080328e-02, 5.724151195305635e-02, 4.889946467274081e-02, -4.955568560061286e-02, -5.367654212916906e-02, 9.121485122580511e-02, 4.824034906893649e-02, 9.121485122580519e-02, 4.824034906893650e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.630325527236261e-05, -3.401699032217726e-05, 1.630325191254678e-05, 1.630316635491235e-05, -3.401682418939761e-05, 1.630316360256963e-05, 1.630276019896696e-05, -3.401603434442552e-05, 1.630275640901330e-05, 1.630407545303280e-05, -3.401850718042769e-05, 1.630407850181390e-05, 1.630337251553035e-05, -3.401721873164522e-05, 1.630340312625733e-05, 1.630337251553035e-05, -3.401721873164522e-05, 1.630340312625733e-05, 2.880267353976843e-04, -5.566425952030073e-04, 2.880393692502140e-04, 2.880273537045297e-04, -5.566411213771059e-04, 2.880408710517190e-04, 2.880450544931089e-04, -5.565903246114476e-04, 2.880548823120029e-04, 2.879488651630130e-04, -5.565489817890188e-04, 2.879606257803639e-04, 2.880266397761490e-04, -5.566246110681497e-04, 2.880250297744198e-04, 2.880266397761490e-04, -5.566246110681497e-04, 2.880250297744198e-04, -3.699589530343593e-03, -1.006442486308707e-02, -3.644453580027701e-03, -3.753388261065084e-03, -1.010513817149389e-02, -3.687137742887579e-03, -4.889057544014298e-03, -1.115613304388734e-02, -4.944154395954015e-03, -4.732239473895936e-03, -1.082064162651328e-02, -4.711889027196267e-03, -4.385901843523333e-03, -1.093215566248910e-02, -5.047532210730808e-03, -4.385901843523333e-03, -1.093215566248910e-02, -5.047532210730808e-03, -7.579668830767478e-01, -1.553460433418673e+00, -7.132961293685131e-01, -7.327950301016737e-01, -1.475088435354369e+00, -6.837745850547343e-01, -1.498461869049152e-03, -5.891185801039329e-03, -1.574990357798799e-03, -1.700064503876733e+00, -3.969560389520914e+00, -1.645191058928827e+00, -1.062632596167128e+00, -3.266520449685606e+00, -3.351098303218223e+00, -1.062632596167129e+00, -3.266520449685605e+00, -3.351098303218226e+00, -2.091326306905316e+04, -1.748592151154754e+04, -1.553652937676541e+04, -1.870534410785430e+04, -1.667095744563994e+04, -1.345716548925920e+04, -9.468510021871568e+01, -2.563018081908444e+02, -7.797684190401759e+01, -8.315768868518929e+04, 3.950459668626809e+04, -8.975852723179093e+04, -1.234917348140370e+04, -3.296900328181797e+04, -3.074422657062280e+05, -1.234917348140374e+04, -3.296900328181795e+04, -3.074422657062282e+05, 1.668100328864753e-04, -3.272997167528599e-04, 1.668094098723503e-04, 1.667615107165541e-04, -3.272156198192137e-04, 1.667609719489058e-04, 1.668076204117035e-04, -3.272955294167001e-04, 1.668070507497061e-04, 1.667648506131862e-04, -3.272212876147335e-04, 1.667642245470143e-04, 1.667855081272013e-04, -3.272572553622144e-04, 1.667849645510981e-04, 1.667855081272013e-04, -3.272572553622144e-04, 1.667849645510981e-04, 4.308307951785780e-04, -1.055867278344017e-03, 4.308549942066220e-04, 4.320877237554056e-04, -1.047880104269426e-03, 4.322008390372149e-04, 4.271149935786342e-04, -1.061789454372320e-03, 4.274143829048639e-04, 4.284271695484911e-04, -1.054643313517257e-03, 4.286650823695364e-04, 4.334961426838487e-04, -1.048696986988430e-03, 4.331266935096083e-04, 4.334961426838487e-04, -1.048696986988430e-03, 4.331266935096083e-04, -4.053625355115373e-03, -1.660474679509884e-02, -3.944520318055406e-03, 4.540169003410657e-03, -1.214898913873710e-02, 4.730450833271408e-03, -6.303154991007439e-03, -2.238373528661275e-02, -7.270068660200404e-03, 2.566911701217648e-03, -1.928126036913758e-02, 2.323926572289972e-04, -3.902589418827576e-03, -1.565450502907475e-02, -2.197027238988112e-03, -3.902589418827590e-03, -1.565450502907471e-02, -2.197027238988126e-03, -4.881640534881743e+00, -1.320196591998888e+01, -4.793425992134670e+00, -6.366562227678619e-01, -1.543509149605988e+00, -6.313604294553018e-01, -6.674186809290594e+00, -1.701022376783296e+01, -5.810775856762032e+00, 7.883425539083389e-04, -1.077546596596240e-03, 7.896723998852735e-04, -3.356785820217390e+00, -7.860983816966976e+00, -3.126600038788388e+00, -3.356785820217390e+00, -7.860983816966976e+00, -3.126600038788388e+00, -2.375674444527821e+05, 2.560242913210788e+05, -1.830263370662206e+05, -1.047145618891832e+05, 4.910681852205153e+04, -9.370417568802122e+04, -4.892107594940159e+05, 3.060120369324081e+05, -4.004799471817762e+05, -2.198505773864447e+01, -5.917810714794316e+01, -2.135279177779005e+01, -4.327065103200300e+05, 7.764806459813569e+04, -1.048569586269373e+05, -4.327065103200295e+05, 7.764806459813582e+04, -1.048569586269372e+05, 1.676063292299568e-02, -1.630128421358781e-02, 1.674480693184256e-02, 4.874599058396199e-03, -1.666247438565359e-02, 4.772823924216984e-03, 7.330721340370787e-03, -1.653418765102844e-02, 7.250866853696308e-03, 1.035292112359234e-02, -1.642949412474635e-02, 1.024265355649059e-02, 8.690370717503204e-03, -1.648178839120410e-02, 8.596480986165441e-03, 8.690370717503204e-03, -1.648178839120410e-02, 8.596480986165441e-03, 3.156808869494997e-02, -1.810432565737109e-02, 3.117124855345922e-02, -1.344481828193992e-02, -3.263588847047384e-02, -1.353485671423067e-02, -9.164355079036738e-03, -2.729857892119648e-02, -9.249848095424871e-03, -4.141225507243826e-03, -2.305493546557391e-02, -4.263241965889962e-03, -6.847771374883868e-03, -2.510776399547129e-02, -6.968310836890451e-03, -6.847771374883868e-03, -2.510776399547129e-02, -6.968310836890451e-03, 3.874432091412210e-03, -1.020398791766750e-02, 4.054705538280299e-03, -2.919376573188363e-01, -6.786291063095684e-01, -2.900437257368385e-01, -1.588779636647761e-01, -3.504683852792808e-01, -1.578789130222291e-01, -5.751660042098122e-02, -1.244707406960356e-01, -5.750920366342317e-02, -9.810257511632822e-02, -2.102414373883857e-01, -9.819784459148848e-02, -9.810257511632811e-02, -2.102414373883861e-01, -9.819784459148838e-02, -1.904160445387978e-02, -4.496982366004575e-02, -1.917052091702177e-02, -9.558414226408914e+01, -2.905028829876173e+02, -9.325877690559160e+01, -4.038795193682304e+01, -1.154005947562227e+02, -3.645302168720929e+01, -6.777797854663993e-02, -1.429661514287913e-01, -6.758691002599168e-02, -1.168543357048013e+01, -2.788277810695795e+01, -1.055341921349057e+01, -1.168543357048013e+01, -2.788277810695791e+01, -1.055341921349056e+01, -6.501323662004145e+03, -1.026502738833320e+04, -5.536526860233083e+03, -8.304719446044900e+06, 3.369380520391987e+07, -1.019617566167368e+07, -8.884362416987162e+05, 1.455922861469258e+06, -6.804434849743565e+05, -1.367706232992348e+01, -3.390202649106347e+01, -1.299519832560838e+01, -6.223791934666092e+05, 1.449413473441400e+05, -1.412673790837705e+05, -6.223791934666109e+05, 1.449413473441414e+05, -1.412673790837711e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
