
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.125348414372815e+01, -2.125354564233673e+01, -2.125383329787040e+01, -2.125291804861974e+01, -2.125339558891434e+01, -2.125339558891434e+01, -3.523623358190336e+00, -3.523623148426903e+00, -3.523704117263185e+00, -3.524221951590768e+00, -3.523706876020020e+00, -3.523706876020020e+00, -7.281222422108327e-01, -7.278166438871718e-01, -7.227829002886245e-01, -7.276566034967612e-01, -7.333102024958886e-01, -7.333102024958886e-01, -2.360340004710589e-01, -2.368932036310213e-01, -8.389313750672222e-01, -2.079795682733616e-01, -2.137047169062586e-01, -2.137047169062584e-01, -8.668229284965643e-03, -9.230700174120726e-03, -6.664733130622974e-02, -4.593036273304946e-03, -1.219598189671351e-02, -1.219598189671350e-02, -5.238315791823918e+00, -5.239388687711061e+00, -5.238368147212562e+00, -5.239315210630840e+00, -5.238857669346401e+00, -5.238857669346401e+00, -2.085988480467614e+00, -2.096456515148302e+00, -2.085368452687791e+00, -2.094369916101899e+00, -2.092417334960246e+00, -2.092417334960246e+00, -6.264280585760967e-01, -6.646910392337616e-01, -5.842390929088547e-01, -5.926192886127695e-01, -6.349250153748019e-01, -6.349250153748021e-01, -1.689921694663031e-01, -2.598038675547085e-01, -1.585484062460537e-01, -1.958011298305383e+00, -1.803812758049773e-01, -1.803812758049773e-01, -3.467074735614274e-03, -4.477083113453122e-03, -3.379000051738692e-03, -1.095922997176599e-01, -5.929441648460440e-03, -5.929441648460446e-03, -6.157658171188054e-01, -6.124825948320253e-01, -6.129138666197372e-01, -6.136885015414831e-01, -6.132333993969847e-01, -6.132333993969847e-01, -6.021086636526850e-01, -5.429009791662396e-01, -5.574370027325021e-01, -5.722113662245825e-01, -5.645872052563848e-01, -5.645872052563848e-01, -6.964297706265028e-01, -3.015069040276803e-01, -3.335298401022292e-01, -3.952867282302721e-01, -3.601384153973002e-01, -3.601384153973003e-01, -5.030016842525207e-01, -6.315647914960330e-02, -8.899517366217692e-02, -3.753597735369339e-01, -1.340348991293226e-01, -1.340348991293226e-01, -1.275875251825957e-02, -1.071536017980093e-03, -2.418567672892025e-03, -1.274668564024150e-01, -5.161637303441290e-03, -5.161637303441280e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.853049265107507e+01, -2.853045919719303e+01, -2.853062077846726e+01, -2.853055169148723e+01, -2.853099884271214e+01, -2.853110494535137e+01, -2.852955994908115e+01, -2.852926226994899e+01, -2.853057891079246e+01, -2.852996987439639e+01, -2.853057891079246e+01, -2.852996987439639e+01, -4.576728902476276e+00, -4.577146859906594e+00, -4.576786532699442e+00, -4.577226267116583e+00, -4.578423454451027e+00, -4.578973188566520e+00, -4.576323434233939e+00, -4.576913276407709e+00, -4.575787594840332e+00, -4.578471108376845e+00, -4.575787594840332e+00, -4.578471108376845e+00, -8.574070049198760e-01, -8.684976548602129e-01, -8.541199191002726e-01, -8.677779806014011e-01, -8.165938852791031e-01, -7.961402122469760e-01, -8.113032492098462e-01, -8.180349103632730e-01, -9.004244816544965e-01, -7.012426683884558e-01, -9.004244816544965e-01, -7.012426683884558e-01, -2.167623458283772e-01, -2.049064376218735e-01, -2.219169116881906e-01, -2.106013715338703e-01, -9.801210030792786e-01, -1.042377858537237e+00, -1.616770144377331e-01, -1.552566933873559e-01, -1.004545250016105e-01, -4.504643555888719e-01, -1.004545250016103e-01, -4.504643555888730e-01, -8.651635272231372e-03, -1.468898938442516e-02, -8.778657443701038e-03, -1.592601372238281e-02, -7.741850186892284e-02, -9.328992354163786e-02, -6.796857514735786e-03, -5.773399462048704e-03, -2.228483935780376e-02, 1.626622748325110e-02, -2.228483935780371e-02, 1.626622748325105e-02, -7.006935783959280e+00, -7.005234908732183e+00, -7.009145204493382e+00, -7.007358770353681e+00, -7.007065103851618e+00, -7.005306847111119e+00, -7.008952776380340e+00, -7.007245002390850e+00, -7.008068820178409e+00, -7.006300367837336e+00, -7.008068820178409e+00, -7.006300367837336e+00, -2.270472378987103e+00, -2.270334514654109e+00, -2.301206531833397e+00, -2.300299131476600e+00, -2.216622922534096e+00, -2.233500415763107e+00, -2.243924966907946e+00, -2.260631607871770e+00, -2.326914909761470e+00, -2.290076864955694e+00, -2.326914909761470e+00, -2.290076864955694e+00, -7.837192783885861e-01, -7.820721302979525e-01, -8.677623459658682e-01, -8.689862571707151e-01, -7.084468397121405e-01, -7.363199950201643e-01, -7.531603885708220e-01, -7.746202703080618e-01, -8.157619645820425e-01, -7.775413130390206e-01, -8.157619645820426e-01, -7.775413130390210e-01, -1.528895587486797e-01, -1.463565230248741e-01, -1.937758491792220e-01, -1.909933672939521e-01, -1.528111889155342e-01, -1.392604293443053e-01, -2.606061390601248e+00, -2.605009941833796e+00, -1.807327552902121e-01, -1.109126492480442e-01, -1.807327552902121e-01, -1.109126492480442e-01, -3.758410852934574e-03, -5.610488184214482e-03, -5.677509425976325e-03, -6.576645124634072e-03, -3.166114037566080e-03, -5.828202556503563e-03, -1.202176304615170e-01, -1.232147878753499e-01, 4.262236648808329e-03, -1.271857796396378e-02, 4.262236648808325e-03, -1.271857796396382e-02, -8.221784922455952e-01, -8.253834828465978e-01, -7.983155019771505e-01, -8.016440007547528e-01, -8.051896627289205e-01, -8.085923926142060e-01, -8.122795668865339e-01, -8.155400955300556e-01, -8.085808919883526e-01, -8.119181830293123e-01, -8.085808919883526e-01, -8.119181830293123e-01, -8.063323826027106e-01, -8.086251754767768e-01, -6.401300912094517e-01, -6.435850379874891e-01, -6.834152271169238e-01, -6.871711123760252e-01, -7.215677268484700e-01, -7.241274857028633e-01, -7.028555488786514e-01, -7.055088198930597e-01, -7.028555488786514e-01, -7.055088198930597e-01, -9.069959318526993e-01, -9.095782582748886e-01, -2.438188528618107e-01, -2.417692335131056e-01, -3.106266325186058e-01, -3.115804051979015e-01, -4.540692635086719e-01, -4.564904079093290e-01, -3.804771057431862e-01, -3.813547317254896e-01, -3.804771057431863e-01, -3.813547317254897e-01, -5.888755076581944e-01, -5.943073651584739e-01, -8.154215571137587e-02, -8.358132721669188e-02, -1.049743325798521e-01, -1.122530379196616e-01, -4.426524960178486e-01, -4.499209266456238e-01, -1.445504819585070e-01, -1.133741897268664e-01, -1.445504819585065e-01, -1.133741897268658e-01, -1.513153647122239e-02, -1.989050768878172e-02, -1.428980506279065e-03, -1.468120513611336e-03, -2.112130117243631e-03, -4.269706225690192e-03, -1.274124094044389e-01, -1.268967052187475e-01, 3.043517805235836e-03, -1.123346692197945e-02, 3.043517805235809e-03, -1.123346692197945e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.126060535051922e-09, 0.000000000000000e+00, 1.126080900448730e-09, 1.126247050146482e-09, 0.000000000000000e+00, 1.126213051962421e-09, 1.126562473888995e-09, 0.000000000000000e+00, 1.126760322566528e-09, 1.124505096320475e-09, 0.000000000000000e+00, 1.124087597481266e-09, 1.126223459133936e-09, 0.000000000000000e+00, 1.124926644848910e-09, 1.126223459133936e-09, 0.000000000000000e+00, 1.124926644848910e-09, -3.218836785926885e-06, 0.000000000000000e+00, -3.206902761165397e-06, -3.217670912935924e-06, 0.000000000000000e+00, -3.204997921687968e-06, -3.181577240355492e-06, 0.000000000000000e+00, -3.169422343176197e-06, -3.241855944554617e-06, 0.000000000000000e+00, -3.228176167411275e-06, -3.227461522611800e-06, 0.000000000000000e+00, -3.193929006190806e-06, -3.227461522611800e-06, 0.000000000000000e+00, -3.193929006190806e-06, -7.057913011119301e-03, 0.000000000000000e+00, -6.535865984045939e-03, -7.181196473126756e-03, 0.000000000000000e+00, -6.538822884872239e-03, -8.205620976907874e-03, 0.000000000000000e+00, -9.131416332444447e-03, -8.481987530437754e-03, 0.000000000000000e+00, -8.188072080254643e-03, -4.179233788268392e-03, 0.000000000000000e+00, -1.282519591730714e-02, -4.179233788268392e-03, 0.000000000000000e+00, -1.282519591730714e-02, -1.486347628540591e+00, 0.000000000000000e+00, -1.531496801248091e+00, -1.416920487833486e+00, 0.000000000000000e+00, -1.442470056871390e+00, -4.151111844427590e-03, 0.000000000000000e+00, -2.756122587245858e-03, -3.266085841571783e+00, 0.000000000000000e+00, -3.383355104468898e+00, -2.654195841660588e+00, 0.000000000000000e+00, 2.051732788435688e+01, -2.654195841660588e+00, 0.000000000000000e+00, 2.051732788435693e+01, 1.829589117825962e+00, 0.000000000000000e+00, -1.424387234817236e+01, 3.205060474677018e+00, 0.000000000000000e+00, -1.621700210380897e+01, -5.193332870966163e+00, 0.000000000000000e+00, -1.140328151913224e+01, -7.499350890808071e+00, 0.000000000000000e+00, -2.142175094502460e+00, -3.636042036040746e+01, 0.000000000000000e+00, 3.162270320099898e+02, -3.636042036041303e+01, 0.000000000000000e+00, 3.162270320101010e+02, 3.227816937820869e-07, 0.000000000000000e+00, 3.222838051727808e-07, 3.307275456773709e-07, 0.000000000000000e+00, 3.299045233705985e-07, 3.232063255247158e-07, 0.000000000000000e+00, 3.224998358497933e-07, 3.299769780557086e-07, 0.000000000000000e+00, 3.294731536717107e-07, 3.268935434387385e-07, 0.000000000000000e+00, 3.261061197930990e-07, 3.268935434387385e-07, 0.000000000000000e+00, 3.261061197930990e-07, -1.137473536468645e-04, 0.000000000000000e+00, -1.137763615305274e-04, -1.084511041862252e-04, 0.000000000000000e+00, -1.086265271537853e-04, -1.223544792715625e-04, 0.000000000000000e+00, -1.194573791173906e-04, -1.174998805330078e-04, 0.000000000000000e+00, -1.146676876030588e-04, -1.043077721585802e-04, 0.000000000000000e+00, -1.107205401973171e-04, -1.043077721585802e-04, 0.000000000000000e+00, -1.107205401973171e-04, -1.150204467061202e-02, 0.000000000000000e+00, -1.169285200295871e-02, -8.145219966558936e-03, 0.000000000000000e+00, -7.807942445386059e-03, -1.866927891121491e-02, 0.000000000000000e+00, -1.407791237342011e-02, -1.985985482072066e-02, 0.000000000000000e+00, -1.542574737639797e-02, -9.185545259872096e-03, 0.000000000000000e+00, -1.337807883250139e-02, -9.185545259872073e-03, 0.000000000000000e+00, -1.337807883250138e-02, -5.346998572805375e+00, 0.000000000000000e+00, -5.899359733831671e+00, -1.409964878757600e+00, 0.000000000000000e+00, -1.421297853597450e+00, -5.082505724310951e+00, 0.000000000000000e+00, -7.341477492030301e+00, 1.151732083473180e-05, 0.000000000000000e+00, 1.156533655411437e-05, -3.446871975382556e+00, 0.000000000000000e+00, -6.951871281598870e+00, -3.446871975382556e+00, 0.000000000000000e+00, -6.951871281598870e+00, -2.135370935269510e+00, 0.000000000000000e+00, -8.470472402036437e+00, -5.095099865982228e+00, 0.000000000000000e+00, -6.179351913782105e+00, 4.320405934588519e+01, 0.000000000000000e+00, -9.714776500620580e+01, -9.989434520667317e+00, 0.000000000000000e+00, -9.803366175315153e+00, 2.170398531814127e+02, 0.000000000000000e+00, -9.918165804762683e+01, 2.170398531808893e+02, 0.000000000000000e+00, -9.918165804767615e+01, 2.153320152773238e-02, 0.000000000000000e+00, 2.289549470287613e-02, -1.216816022701849e-02, 0.000000000000000e+00, -1.140522417986027e-02, -7.440051185567912e-03, 0.000000000000000e+00, -6.473834540171242e-03, 6.642882133440698e-04, 0.000000000000000e+00, 1.668710100076678e-03, -4.046309456074108e-03, 0.000000000000000e+00, -3.051250889086632e-03, -4.046309456074108e-03, 0.000000000000000e+00, -3.051250889086632e-03, 6.925812847948636e-02, 0.000000000000000e+00, 6.897129232332964e-02, -2.500811552828947e-02, 0.000000000000000e+00, -2.419393749384656e-02, -2.062000136922569e-02, 0.000000000000000e+00, -1.983634760107291e-02, -1.989431599106053e-02, 0.000000000000000e+00, -1.935982429364086e-02, -1.977142483988059e-02, 0.000000000000000e+00, -1.921950086870799e-02, -1.977142483988059e-02, 0.000000000000000e+00, -1.921950086870799e-02, -6.915884971380058e-03, 0.000000000000000e+00, -6.535246957570738e-03, -6.640431602475944e-01, 0.000000000000000e+00, -6.639418022079043e-01, -3.419944957272181e-01, 0.000000000000000e+00, -3.330310464104279e-01, -1.071364585434609e-01, 0.000000000000000e+00, -1.036510956481909e-01, -1.897902902424921e-01, 0.000000000000000e+00, -1.885552242052990e-01, -1.897902902424922e-01, 0.000000000000000e+00, -1.885552242052991e-01, -3.588405657273120e-02, 0.000000000000000e+00, -3.394771137631052e-02, -7.417440072654943e+00, 0.000000000000000e+00, -8.146015354757735e+00, -6.421615375089622e+00, 0.000000000000000e+00, -9.812364127347015e+00, -1.369833655226759e-01, 0.000000000000000e+00, -1.228824182813929e-01, -5.823439484093209e+00, 0.000000000000000e+00, -1.355113530508718e+01, -5.823439484093208e+00, 0.000000000000000e+00, -1.355113530508725e+01, -2.440396697291140e+00, 0.000000000000000e+00, -1.054946256307437e+01, 3.669543193867783e+01, 0.000000000000000e+00, -9.245201651353933e+01, 1.834685873234361e+01, 0.000000000000000e+00, -3.435772533426996e+01, -9.759081621678863e+00, 0.000000000000000e+00, -1.085572916895466e+01, 2.237316778149224e+02, 0.000000000000000e+00, -8.105301555893055e+01, 2.237316778148973e+02, 0.000000000000000e+00, -8.105301555892497e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
