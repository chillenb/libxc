
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.330640335904156e+01, -2.330641659474232e+01, -2.330657825021206e+01, -2.330637924391386e+01, -2.330646889182869e+01, -2.330646889182869e+01, -3.945802571076556e+00, -3.945728357163539e+00, -3.944109996490816e+00, -3.947667064984246e+00, -3.945808048944436e+00, -3.945808048944436e+00, -8.035638627862683e-01, -8.038329593351734e-01, -8.146234906740797e-01, -8.204144425439317e-01, -8.233842957716940e-01, -8.233842957716940e-01, -2.193310988339560e-01, -2.208536414360815e-01, -9.349397602253482e-01, -1.825066454256869e-01, -2.123910948226723e-01, -2.123910948226722e-01, -1.258019906095719e-02, -1.324257267183796e-02, -6.576487922404967e-02, -7.267279212839682e-03, -9.752717205912710e-03, -9.752717205912710e-03, -5.607083146451020e+00, -5.605741119758699e+00, -5.607036294295653e+00, -5.605851230307973e+00, -5.606394012989091e+00, -5.606394012989091e+00, -2.583748986121791e+00, -2.588270024425416e+00, -2.602913929439250e+00, -2.606576672589097e+00, -2.577399561612008e+00, -2.577399561612008e+00, -6.592128423590006e-01, -6.918645445016616e-01, -6.121593712141834e-01, -6.162360380786912e-01, -6.673962319424965e-01, -6.673962319424966e-01, -1.352836022153729e-01, -2.320093125651805e-01, -1.269773695912511e-01, -2.034675489889981e+00, -1.550308209681900e-01, -1.550308209681900e-01, -5.610866908088602e-03, -7.104354923679257e-03, -5.437646366437037e-03, -9.334900099388227e-02, -6.719581073367427e-03, -6.719581073367429e-03, -6.362581790922699e-01, -6.367046727324229e-01, -6.365128795017185e-01, -6.363776127765572e-01, -6.364412943207794e-01, -6.364412943207794e-01, -6.184579406598182e-01, -5.695754113912346e-01, -5.818595800325969e-01, -5.950516475775125e-01, -5.879826101541299e-01, -5.879826101541299e-01, -7.257970003477900e-01, -2.806375112606202e-01, -3.214921479105856e-01, -3.961185835193559e-01, -3.547146787193374e-01, -3.547146787193374e-01, -5.214426488173098e-01, -6.346136766011486e-02, -7.877354372024455e-02, -3.755108630258673e-01, -1.135064866932233e-01, -1.135064866932233e-01, -1.771796596683144e-02, -1.900621720360387e-03, -3.992570978453260e-03, -1.079322906362922e-01, -6.189065838928780e-03, -6.189065838928774e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.642012881460989e+01, -2.642010301933482e+01, -2.642031365515635e+01, -2.642023749380052e+01, -2.642078945467698e+01, -2.642095025902054e+01, -2.641870162144932e+01, -2.641829194126962e+01, -2.642024239558942e+01, -2.641927093238604e+01, -2.642024239558942e+01, -2.641927093238604e+01, -4.166790118703261e+00, -4.167600180813275e+00, -4.166914399225983e+00, -4.167771730090851e+00, -4.170403891510256e+00, -4.171316431092504e+00, -4.165017540092409e+00, -4.166024462866650e+00, -4.165801457787633e+00, -4.169139735019082e+00, -4.165801457787633e+00, -4.169139735019082e+00, -8.273838918245054e-01, -8.362418239685036e-01, -8.239372156734486e-01, -8.348061194812944e-01, -7.742986611294163e-01, -7.594545822082365e-01, -7.710151402168604e-01, -7.759596928815269e-01, -8.430673335408265e-01, -6.946998852492094e-01, -8.430673335408265e-01, -6.946998852492094e-01, -2.216736558838119e-01, -2.239320806681923e-01, -2.234665346060361e-01, -2.268436603097493e-01, -9.266719873972823e-01, -9.821633330526245e-01, -2.013757658620818e-01, -2.016805977505877e-01, -1.978240120839435e-01, -2.259111169704871e-01, -1.978240120839433e-01, -2.259111169704869e-01, -1.640481555677393e-02, -1.701274834697928e-02, -1.721347801785722e-02, -1.793746051255855e-02, -8.680342667862835e-02, -9.002236145112703e-02, -9.729398204179496e-03, -9.631948001107922e-03, -1.360036248473564e-02, -9.640629988056707e-03, -1.360036248473563e-02, -9.640629988056719e-03, -6.673443939667789e+00, -6.671741178870780e+00, -6.678600148091702e+00, -6.676727259711954e+00, -6.673718927349391e+00, -6.671906148384530e+00, -6.678146266240675e+00, -6.676433363336339e+00, -6.676094751114676e+00, -6.674249336724428e+00, -6.676094751114676e+00, -6.674249336724428e+00, -1.817038380545747e+00, -1.816906734679831e+00, -1.851094932152433e+00, -1.850189881198159e+00, -1.749635363684404e+00, -1.768546875783377e+00, -1.779695542266200e+00, -1.798405758218303e+00, -1.883927990397478e+00, -1.842522981501751e+00, -1.883927990397478e+00, -1.842522981501751e+00, -8.010293571707831e-01, -7.996664769289051e-01, -8.957499670796693e-01, -8.963131897052545e-01, -7.305073742027697e-01, -7.526317148504424e-01, -7.863935669767566e-01, -8.061465953720949e-01, -8.321178927797418e-01, -8.007192875786163e-01, -8.321178927797419e-01, -8.007192875786164e-01, -1.930548415331335e-01, -1.920743381069147e-01, -2.448736170940748e-01, -2.448262190700559e-01, -1.826664452110962e-01, -1.839369558862877e-01, -2.590779981358455e+00, -2.589797369553066e+00, -1.944798621053447e-01, -1.794859682331111e-01, -1.944798621053447e-01, -1.794859682331111e-01, -7.385549812150811e-03, -7.558262604860449e-03, -9.420940042990579e-03, -9.506520837992367e-03, -7.108232386776098e-03, -7.355617535915722e-03, -1.346510203748958e-01, -1.357047187898359e-01, -7.768648334002090e-03, -9.404652088051201e-03, -7.768648334002092e-03, -9.404652088051199e-03, -8.353699309182566e-01, -8.379954055150335e-01, -8.271203869862256e-01, -8.297587571251267e-01, -8.301607777491999e-01, -8.328066284498573e-01, -8.325745327730246e-01, -8.351879747952622e-01, -8.313811935792847e-01, -8.340095050064978e-01, -8.313811935792847e-01, -8.340095050064978e-01, -8.145657269190185e-01, -8.167314362414705e-01, -6.528808669083617e-01, -6.554575349621583e-01, -7.039532151104738e-01, -7.068279803580579e-01, -7.525092199041581e-01, -7.546220768448207e-01, -7.286523702280278e-01, -7.308081667911014e-01, -7.286523702280278e-01, -7.308081667911014e-01, -9.347973372855651e-01, -9.364680087177339e-01, -2.834545102250068e-01, -2.837483935564559e-01, -3.319416611721341e-01, -3.340308769335420e-01, -4.706248158216607e-01, -4.727542088160420e-01, -3.937018852631468e-01, -3.939161552459016e-01, -3.937018852631468e-01, -3.939161552459017e-01, -6.055579554687174e-01, -6.095492144549987e-01, -8.501098100114045e-02, -8.540345260206243e-02, -1.128393801828571e-01, -1.151228908182033e-01, -4.648461185278858e-01, -4.706804738379054e-01, -1.570068797065195e-01, -1.526679714333053e-01, -1.570068797065194e-01, -1.526679714333052e-01, -2.327135970848110e-02, -2.377013004722323e-02, -2.532083132900455e-03, -2.535438210222553e-03, -5.214170992366025e-03, -5.410169705464421e-03, -1.492016991772701e-01, -1.502178629191224e-01, -7.287703820668489e-03, -8.650426998045690e-03, -7.287703820668483e-03, -8.650426998045687e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.348667255580496e-08, 1.265194287583470e-11, -2.348678455886670e-08, -2.348626755677802e-08, 1.265176251940334e-11, -2.348648991703201e-08, -2.348504593801223e-08, 1.265090506045205e-11, -2.348472156045786e-08, -2.348962419749134e-08, 1.265358977160261e-11, -2.349055047154704e-08, -2.348643059338192e-08, 1.265219101867531e-11, -2.348827358016839e-08, -2.348643059338192e-08, 1.265219101867531e-11, -2.348827358016839e-08, -3.463330965346153e-05, 1.644752183479322e-07, -3.462917395010879e-05, -3.463213651586470e-05, 1.644733273044315e-07, -3.462787937823429e-05, -3.460233236949296e-05, 1.644081502339585e-07, -3.459382608955634e-05, -3.463151984672948e-05, 1.643551170584500e-07, -3.462310909888891e-05, -3.465785773138358e-05, 1.644530654615904e-07, -3.459505449856557e-05, -3.465785773138358e-05, 1.644530654615904e-07, -3.459505449856557e-05, -1.954862053632957e-02, 9.893452128728250e-04, -1.919030607475046e-02, -1.969095801115711e-02, 9.950700982210015e-04, -1.925189635575988e-02, -2.169112062649085e-02, 1.141668395192654e-03, -2.226635556016410e-02, -2.149255900928938e-02, 1.093811269721518e-03, -2.131178215471093e-02, -1.879658350525208e-02, 1.189913098576781e-03, -2.416176479494034e-02, -1.879658350525208e-02, 1.189913098576781e-03, -2.416176479494034e-02, -1.305721988191208e+00, 5.197584606047765e-01, -1.246905788153819e+00, -1.291214993481040e+00, 4.910078702385220e-01, -1.213188024285307e+00, -1.244216877656974e-02, 4.601013965513374e-04, -1.093092060813039e-02, -1.744563868048394e+00, 1.448664230597686e+00, -1.733229415405115e+00, -1.487952013110660e+00, 2.059034435414560e+00, -2.339146342447363e+00, -1.487952013110660e+00, 2.059034435414560e+00, -2.339146342447366e+00, -9.116602455501956e+00, 9.611489082120371e-08, -9.025267637201710e+00, -9.603148863068220e+00, 3.943917884662219e-07, -9.553732088511749e+00, 3.853568549252144e+00, 1.589326094086255e+01, 2.731266042454063e+00, -8.355509898433706e+00, 3.575969738999006e-17, -8.129817648099754e+00, -9.102015657590188e+00, 9.256401793738433e-13, -2.303580131640924e+01, -9.102015657590741e+00, 9.256401793738433e-13, -2.303580131637909e+01, -6.373930380115526e-06, 1.930833069682948e-08, -6.380111306440546e-06, -6.363297273798399e-06, 1.928961338555312e-08, -6.369822344723064e-06, -6.373341487382235e-06, 1.930740044460348e-08, -6.379756673837469e-06, -6.364214546534926e-06, 1.929087185832851e-08, -6.370412710781685e-06, -6.368482768309141e-06, 1.929887892924973e-08, -6.374942088417068e-06, -6.368482768309141e-06, 1.929887892924973e-08, -6.374942088417068e-06, -3.775309847203105e-04, 3.548016127704060e-06, -3.776045918104704e-04, -3.661088614203118e-04, 3.413575111128698e-06, -3.664996991200034e-04, -3.883592532155948e-04, 3.650573737949305e-06, -3.854245008212645e-04, -3.781778188550132e-04, 3.527400453147769e-06, -3.752009458745923e-04, -3.633237087285795e-04, 3.428589653430230e-06, -3.704813675708494e-04, -3.633237087285795e-04, 3.428589653430230e-06, -3.704813675708494e-04, -2.480939994956118e-02, 1.948072412400011e-03, -2.492166297301436e-02, -1.611397642978199e-02, 1.281878467669520e-03, -1.604713016025020e-02, -3.262307585123667e-02, 2.933074187383741e-03, -2.993947588759558e-02, -2.272518798471844e-02, 2.408997371268149e-03, -2.188340187407750e-02, -2.209408607134124e-02, 1.876977496991343e-03, -2.465261805012212e-02, -2.209408607134125e-02, 1.876977496991343e-03, -2.465261805012211e-02, -5.933446492803414e-01, 4.636976305888810e+00, -7.721700179882964e-01, -8.366062687284279e-01, 5.124270667178522e-01, -8.360753643172417e-01, -9.330293030268685e-02, 5.766152889132189e+00, -8.007381061726629e-01, -3.134931496091814e-04, 3.933730209208829e-06, -3.139806822526798e-04, -1.530370003554888e+00, 2.906467055181820e+00, -2.605366107895764e+00, -1.530370003554888e+00, 2.906467055181820e+00, -2.605366107895764e+00, -1.171385035034187e+01, 4.686390539598418e-24, -1.014412299285536e+01, -1.009175677758063e+01, 1.062150239986342e-17, -9.320563609140354e+00, -5.729375455838525e+01, 4.889478179950202e-25, -6.372936663642066e+01, 1.475030289915337e+00, 1.300649686297164e+01, 1.527297092777644e+00, -2.851232828712034e+01, 8.307249510616370e-20, -2.800448830640985e+01, -2.851232828710705e+01, 8.307249510616369e-20, -2.800448830642252e+01, -1.764539792933554e-02, 1.901420750787902e-03, -1.753866421681976e-02, -1.954047648352640e-02, 1.957269309472773e-03, -1.938891087512325e-02, -1.888620016404155e-02, 1.937402571931040e-03, -1.874595303724132e-02, -1.833094275659273e-02, 1.921208632869826e-03, -1.821150730086737e-02, -1.860942861539280e-02, 1.929294295238450e-03, -1.847975636287770e-02, -1.860942861539280e-02, 1.929294295238450e-03, -1.847975636287770e-02, -1.802754941899815e-02, 2.182873271581714e-03, -1.797106703333205e-02, -4.528127152521019e-02, 4.665961815339743e-03, -4.479160164350789e-02, -3.630121475250787e-02, 3.715261355707671e-03, -3.586203386904554e-02, -2.809296357036356e-02, 2.989472890445977e-03, -2.789393366169419e-02, -3.207466320414021e-02, 3.336827799284099e-03, -3.182435204433971e-02, -3.207466320414021e-02, 3.336827799284099e-03, -3.182435204433971e-02, -1.443032921081987e-02, 1.008293823519694e-03, -1.431497132854094e-02, -4.945993383805666e-01, 1.964842543767455e-01, -4.923367204490401e-01, -3.133462411781601e-01, 8.881284658645905e-02, -3.085772200002132e-01, -1.181582123971615e-01, 2.492675891635825e-02, -1.165728585020494e-01, -2.004743982393755e-01, 4.754895842418780e-02, -2.004791089752810e-01, -2.004743982393756e-01, 4.754895842418781e-02, -2.004791089752812e-01, -5.631211959870459e-02, 7.002330403584664e-03, -5.530089607401803e-02, 3.466557058431342e+00, 1.527007487953939e+01, 3.334751918829840e+00, 4.673136799342919e+00, 1.624054432549519e+01, 3.698392078822197e+00, -1.167298964530427e-01, 2.963984702871574e-02, -1.118864592738534e-01, -3.715267035383520e-01, 8.386010351521383e+00, -2.358688100979447e+00, -3.715267035383561e-01, 8.386010351521383e+00, -2.358688100979472e+00, -7.230931445087895e+00, 2.954099370322740e-04, -7.380573241411331e+00, -3.596037509021524e+01, 2.463664652458579e-85, -6.366714335692645e+01, -2.220868530443611e+01, 1.436918014216292e-36, -2.363984957122046e+01, -7.859617790967197e-01, 9.533476787462721e+00, -1.007158995476174e+00, -5.873961715020432e+01, 7.069840981443455e-22, -2.907158000996741e+01, -5.873961715024868e+01, 7.069840981443085e-22, -2.907158000996608e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
