
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_ncap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.111221845637835e+01, -2.111224018301406e+01, -2.111241723800078e+01, -2.111205986317182e+01, -2.111222924447691e+01, -2.111222924447691e+01, -3.536517764596727e+00, -3.536488298142499e+00, -3.535823477593434e+00, -3.537712201017972e+00, -3.536517521614247e+00, -3.536517521614247e+00, -7.315320748340419e-01, -7.314220967483729e-01, -7.309513548568919e-01, -7.354403562239838e-01, -7.314887058986796e-01, -7.314887058986796e-01, -2.336438454031179e-01, -2.350246425679027e-01, -8.521956578631480e-01, -1.967283746825710e-01, -2.340351369168798e-01, -2.340351369168798e-01, -1.937305162019102e-01, -1.904741586996062e-01, -1.655892585771609e-01, -2.832020388664946e-01, -1.887358079904404e-01, -1.887358079904404e-01, -5.107726896222277e+00, -5.107191415262612e+00, -5.107678232433331e+00, -5.107261740556415e+00, -5.107443109464409e+00, -5.107443109464409e+00, -2.166628556401432e+00, -2.175928859017517e+00, -2.168830022168353e+00, -2.176031771147060e+00, -2.170199118658690e+00, -2.170199118658690e+00, -6.173873993349696e-01, -6.529746395224836e-01, -5.889038577256640e-01, -6.006345078167816e-01, -6.371160546391401e-01, -6.371160546391401e-01, -1.784017895251865e-01, -2.531319300070196e-01, -1.731342444180056e-01, -1.886656790381818e+00, -1.809807620152445e-01, -1.809807620152445e-01, -2.811806335355533e-01, -2.678375721138572e-01, -2.078962135892470e-01, -1.558014783561688e-01, -2.426032238047675e-01, -2.426032238047675e-01, -6.200810888209138e-01, -6.187708815007322e-01, -6.191630972450805e-01, -6.195176342830188e-01, -6.193333704399404e-01, -6.193333704399404e-01, -6.012833371168039e-01, -5.516713116894438e-01, -5.643794655976659e-01, -5.770067823561416e-01, -5.703371165245245e-01, -5.703371165245245e-01, -6.830388953053241e-01, -2.985604994061643e-01, -3.352923811327134e-01, -3.973160380146534e-01, -3.637917644075883e-01, -3.637917644075882e-01, -5.024716346506881e-01, -1.778786680065123e-01, -1.653414322507343e-01, -3.709053372342812e-01, -1.558282870886727e-01, -1.558282870886726e-01, -2.018722649303570e-01, -3.482965119801568e-01, -2.955463719001747e-01, -1.484917302567015e-01, -2.261757338950328e-01, -2.261757338950330e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_ncap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.509812829066778e+01, -2.509821852585815e+01, -2.509862331865335e+01, -2.509714565490388e+01, -2.509817585895684e+01, -2.509817585895684e+01, -4.106217548862998e+00, -4.106270807718242e+00, -4.107898850592696e+00, -4.105938078355623e+00, -4.106261906161872e+00, -4.106261906161872e+00, -8.263753854005246e-01, -8.248854030801247e-01, -7.851034793934795e-01, -7.917956666906600e-01, -8.258353053580547e-01, -8.258353053580547e-01, -2.437211986649917e-01, -2.478044302746832e-01, -9.994156454020192e-01, -1.596821326799324e-01, -2.449676507273107e-01, -2.449676507273107e-01, 8.719213506876763e-02, 8.487087972012346e-02, 3.241661073641026e-02, 1.342546617165680e-01, 8.413449218145434e-02, 8.413449218145434e-02, -6.298993480938046e+00, -6.302202232707973e+00, -6.299320247679190e+00, -6.301815258011862e+00, -6.300640831786774e+00, -6.300640831786774e+00, -2.192081944147650e+00, -2.211431821509667e+00, -2.179746534338943e+00, -2.194804788429327e+00, -2.221380144468739e+00, -2.221380144468739e+00, -7.595612305679429e-01, -8.463633677047270e-01, -7.215521147304822e-01, -7.712054316179682e-01, -7.908388740535557e-01, -7.908388740535557e-01, -8.098584514755613e-02, -2.281685086783735e-01, -8.431760121858180e-02, -2.446777135410762e+00, -1.229916248809562e-01, -1.229916248809562e-01, 1.331671751712592e-01, 1.273954327910322e-01, 9.876453077333078e-02, -7.800754174448910e-03, 1.153558565319423e-01, 1.153558565319424e-01, -8.113382702842058e-01, -8.033252919924687e-01, -8.063297824476338e-01, -8.085642482529152e-01, -8.074576863993168e-01, -8.074576863993168e-01, -7.872595273786991e-01, -6.479191339265001e-01, -6.889381010085700e-01, -7.277213823837387e-01, -7.080966611148620e-01, -7.080966611148620e-01, -8.841490768040404e-01, -2.926522742645341e-01, -3.532298133428998e-01, -4.630828767092089e-01, -4.048272879925771e-01, -4.048272879925770e-01, -5.875351618683401e-01, 4.417924304655818e-02, 1.394146700943758e-02, -4.475309591625709e-01, -5.667294121019637e-02, -5.667294121019645e-02, 8.896029737503948e-02, 1.490052562933925e-01, 1.356662527737248e-01, -5.561775602596956e-02, 1.073324421500241e-01, 1.073324421500242e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_ncap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.678496261693093e-09, -7.678446445499127e-09, -7.678133211513630e-09, -7.678950771020397e-09, -7.678470750983402e-09, -7.678470750983402e-09, -9.558190216110250e-06, -9.558150270599482e-06, -9.555515444202383e-06, -9.552232351850270e-06, -9.558012970889298e-06, -9.558012970889298e-06, -4.758013905453481e-03, -4.774762722904358e-03, -5.184467650959279e-03, -5.043303382676052e-03, -4.764134605439733e-03, -4.764134605439733e-03, -4.904533908525207e-01, -4.715506398640713e-01, -2.432637810255156e-03, -1.502319655527612e+00, -4.847157391760895e-01, -4.847157391760895e-01, -1.541705272641811e+04, -1.318161259848256e+04, -1.000989020213639e+02, -1.733601664839404e+05, -1.373918635111445e+04, -1.373918635111445e+04, -1.997315820745506e-06, -1.994809353969451e-06, -1.997058937834185e-06, -1.995110285061402e-06, -1.996036212794940e-06, -1.996036212794940e-06, -8.007661965539485e-05, -7.826997680433108e-05, -8.045836821846029e-05, -7.904264352275310e-05, -7.834324508863381e-05, -7.834324508863381e-05, -7.557107988787105e-03, -4.011261448183275e-03, -9.237310125630024e-03, -6.449438196843018e-03, -6.447867153278539e-03, -6.447867153278539e-03, -4.952993346091795e+00, -4.499525700973688e-01, -5.200261578712825e+00, -6.978569243724873e-05, -2.800271053970286e+00, -2.800271053970286e+00, -1.974150847852918e+05, -1.262895475907883e+05, -3.937635993331553e+05, -3.061899159682205e+01, -1.837767085068811e+05, -1.837767085068810e+05, -3.051974574205056e-03, -4.730322974789094e-03, -4.264538813849597e-03, -3.822418169311595e-03, -4.054621015302087e-03, -4.054621015302084e-03, -2.911131697460654e-03, -1.337060613850482e-02, -1.106285545423067e-02, -8.792592473973147e-03, -9.972497642475313e-03, -9.972497642475306e-03, -3.470777409453112e-03, -2.022016610514883e-01, -1.143270026181532e-01, -4.995500998055258e-02, -7.644789324721750e-02, -7.644789324721750e-02, -1.953192588738053e-02, -1.271483123580005e+02, -4.441586621096508e+01, -6.117960102498921e-02, -1.115089624853230e+01, -1.115089624853229e+01, -8.612344476503655e+03, -1.020793762307067e+07, -1.193564722640992e+06, -1.340078995663825e+01, -3.370886284662373e+05, -3.370886284662390e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
