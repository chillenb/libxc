
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.214492491933906e+01, -2.214492225674251e+01, -2.214503211119415e+01, -2.214506924232656e+01, -2.214503246964591e+01, -2.214503246964591e+01, -3.824055714786539e+00, -3.823964658325974e+00, -3.821952831509463e+00, -3.826163194537943e+00, -3.824036757316815e+00, -3.824036757316815e+00, -7.948798957925142e-01, -7.951943848963989e-01, -8.063686909575701e-01, -8.124337940540441e-01, -8.096602579785404e-01, -8.096602579785404e-01, -2.000662147133348e-01, -2.027911859727763e-01, -9.258556814212038e-01, -1.557171728771494e-01, -1.729616654526004e-01, -1.729616654526004e-01, -9.376351479520647e-03, -9.838607946422705e-03, -4.727446740114923e-02, -5.576164955334674e-03, -6.927600756238493e-03, -6.927600756238493e-03, -5.337235591988348e+00, -5.335135355151804e+00, -5.337156949072369e+00, -5.335302522883181e+00, -5.336160569229758e+00, -5.336160569229758e+00, -2.575893343144004e+00, -2.578819754154224e+00, -2.598218307327691e+00, -2.600488093198247e+00, -2.567026263705182e+00, -2.567026263705182e+00, -6.466729846906283e-01, -6.704495355965985e-01, -6.005154977662680e-01, -5.994806039406758e-01, -6.533484999149087e-01, -6.533484999149087e-01, -1.119666769671149e-01, -2.012913141409894e-01, -1.043721223320384e-01, -1.934448608203093e+00, -1.292890602357356e-01, -1.292890602357356e-01, -4.352646472327074e-03, -5.457024722922850e-03, -4.222545617822042e-03, -7.305436042035679e-02, -5.045874674976780e-03, -5.045874674976780e-03, -6.149189527694303e-01, -6.178417287687387e-01, -6.168243297964724e-01, -6.159690627752087e-01, -6.163969626851826e-01, -6.163969626851826e-01, -5.974302645367888e-01, -5.581598490752901e-01, -5.710542640855987e-01, -5.820386293644086e-01, -5.764286444990462e-01, -5.764286444990462e-01, -7.031825258546027e-01, -2.509763685068028e-01, -2.985035040332948e-01, -3.863808007238860e-01, -3.396141596598093e-01, -3.396141596598093e-01, -5.099937899299319e-01, -4.544288154157736e-02, -6.007595899382684e-02, -3.693201540488600e-01, -9.074774703696389e-02, -9.074774703696391e-02, -1.294546270324040e-02, -1.528109063487015e-03, -3.135917429552123e-03, -8.576440392839572e-02, -4.685167252212474e-03, -4.685167252212468e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.372749721711109e+01, -2.372764838257104e+01, -2.372820373151340e+01, -2.372595705711963e+01, -2.372715088057248e+01, -2.372715088057248e+01, -3.776828604345231e+00, -3.776968638193964e+00, -3.780294054280538e+00, -3.775208990717373e+00, -3.777085246522170e+00, -3.777085246522170e+00, -8.120628722559625e-01, -8.103443510922446e-01, -7.668342094911471e-01, -7.716612794829633e-01, -7.719154225790378e-01, -7.719154225790378e-01, -2.583656972987080e-01, -2.619176931449979e-01, -9.119833377286897e-01, -2.013280977808632e-01, -2.235684727343590e-01, -2.235684727343590e-01, -1.231532010953927e-02, -1.291847286042154e-02, -6.144909039401099e-02, -7.346746980952730e-03, -9.116004963747046e-03, -9.116004963747046e-03, -6.065118212784623e+00, -6.070295941448280e+00, -6.065341482651643e+00, -6.069912731540000e+00, -6.067751853421115e+00, -6.067751853421115e+00, -1.646092180992049e+00, -1.677523001434799e+00, -1.590764606629023e+00, -1.618948163125252e+00, -1.689814538269117e+00, -1.689814538269117e+00, -7.707282471431152e-01, -8.523058613968549e-01, -7.207202224311207e-01, -7.610577822585454e-01, -7.838747227489978e-01, -7.838747227489978e-01, -1.449785384482643e-01, -2.587107666478220e-01, -1.352021537417761e-01, -2.402003658003150e+00, -1.673943367659492e-01, -1.673943367659492e-01, -5.742219865637058e-03, -7.190629867649838e-03, -5.571434284989093e-03, -9.478497304716249e-02, -6.651677818799672e-03, -6.651677818799672e-03, -7.991880666750196e-01, -7.904318299643236e-01, -7.934943448730256e-01, -7.960379992663498e-01, -7.947639434301531e-01, -7.947639434301531e-01, -7.802287243098476e-01, -6.567936246148570e-01, -6.895984457855358e-01, -7.243016607416713e-01, -7.064189011394729e-01, -7.064189011394729e-01, -8.882895358323571e-01, -3.200310353664171e-01, -3.781957214615097e-01, -4.875706911852702e-01, -4.292149326478409e-01, -4.292149326478409e-01, -6.143558272323922e-01, -5.907924375610994e-02, -7.799895408738788e-02, -4.721629556775702e-01, -1.176691978897580e-01, -1.176691978897580e-01, -1.696697299211090e-02, -2.024558353549560e-03, -4.143455458920519e-03, -1.112260488106572e-01, -6.178581061420519e-03, -6.178581061420508e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.456875388159532e-08, -1.456859136131286e-08, -1.456781870682645e-08, -1.457023779814198e-08, -1.456897731227614e-08, -1.456897731227614e-08, -2.072110133584341e-05, -2.072092256256626e-05, -2.071476209220954e-05, -2.070974930737685e-05, -2.071889050874426e-05, -2.071889050874426e-05, -9.991834262785215e-03, -1.002126085716725e-02, -1.075221055002394e-02, -1.052519190872449e-02, -1.057313025723073e-02, -1.057313025723073e-02, -2.973531169936327e-02, -2.971906257281380e-02, -6.380322037026571e-03, -2.991155332910673e-02, -2.985961459039836e-02, -2.985961459039835e-02, -2.999999960784869e-02, -2.999999951870602e-02, -2.999955408869025e-02, -2.999999995637297e-02, -2.999999989122942e-02, -2.999999989122942e-02, -4.125901428976495e-06, -4.122873387391456e-06, -4.125750550578988e-06, -4.123077500452938e-06, -4.124372320638429e-06, -4.124372320638429e-06, -2.053043725929537e-04, -1.994930458438085e-04, -2.096803917115833e-04, -2.043976690865090e-04, -2.000319898913317e-04, -2.000319898913317e-04, -1.380966883379668e-02, -1.139435408104428e-02, -1.613404134715472e-02, -1.497370119220113e-02, -1.333424995459325e-02, -1.333424995459325e-02, -2.997940246690328e-02, -2.973371448261174e-02, -2.998490969293967e-02, -2.216666287359384e-04, -2.996095820775853e-02, -2.996095820775853e-02, -2.999999998453858e-02, -2.999999996015443e-02, -2.999999998637845e-02, -2.999691075464514e-02, -2.999999997131019e-02, -2.999999997131019e-02, -1.366538747140105e-02, -1.383677194084215e-02, -1.377631465177844e-02, -1.372663992836519e-02, -1.375149053841933e-02, -1.375149053841933e-02, -1.448647218275721e-02, -1.896911373636437e-02, -1.765513773950951e-02, -1.636858886382651e-02, -1.702241144575327e-02, -1.702241144575327e-02, -1.009260831240348e-02, -2.933067597602328e-02, -2.864046264879647e-02, -2.621253475233856e-02, -2.771000222510246e-02, -2.771000222510246e-02, -2.116018408683360e-02, -2.999962577937851e-02, -2.999870720394697e-02, -2.667167890997857e-02, -2.999188054322394e-02, -2.999188054322394e-02, -2.999999844425039e-02, -2.999999999979656e-02, -2.999999999605086e-02, -2.999368614516538e-02, -2.999999997896794e-02, -2.999999997896794e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
