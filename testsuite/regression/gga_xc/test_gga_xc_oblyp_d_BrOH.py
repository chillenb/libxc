
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_oblyp_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.108040487227957e+01, -2.108042905537711e+01, -2.108061330328503e+01, -2.108021577325666e+01, -2.108041698731645e+01, -2.108041698731645e+01, -3.543302334987987e+00, -3.543274586878284e+00, -3.542656026380249e+00, -3.544462130130289e+00, -3.543302930699472e+00, -3.543302930699472e+00, -7.355480790836211e-01, -7.354531444199406e-01, -7.344983406024715e-01, -7.391153622645551e-01, -7.355103295993526e-01, -7.355103295993526e-01, -2.247579609422756e-01, -2.264504244251070e-01, -8.566456019174262e-01, -1.783191714541987e-01, -2.252517314803977e-01, -2.252517314803977e-01, -6.509154401944062e-02, -6.589183247099299e-02, -1.038749313684994e-01, -5.826197948017776e-02, -6.525078908352054e-02, -6.525078908352054e-02, -5.112995810433131e+00, -5.112391409664826e+00, -5.112940379310039e+00, -5.112470319583615e+00, -5.112676788682103e+00, -5.112676788682103e+00, -2.162338186910010e+00, -2.172321948015205e+00, -2.163320972810914e+00, -2.171084902120974e+00, -2.167856471519541e+00, -2.167856471519541e+00, -6.149908980065094e-01, -6.407557623215775e-01, -5.864763313013202e-01, -5.909276199762589e-01, -6.339428600105760e-01, -6.339428600105760e-01, -1.431697298895302e-01, -2.373579309242726e-01, -1.414353441357936e-01, -1.874220801420655e+00, -1.576261838010294e-01, -1.576261838010294e-01, -5.715334857311437e-02, -5.878328888949308e-02, -4.494755938674886e-02, -1.110470850330547e-01, -5.337531192991792e-02, -5.337531192991794e-02, -6.030449700680393e-01, -6.057501467358620e-01, -6.048326809478662e-01, -6.040830740966310e-01, -6.044617502094880e-01, -6.044617502094880e-01, -5.835619477989591e-01, -5.513718147898645e-01, -5.618701041162525e-01, -5.706919103216116e-01, -5.661509636713489e-01, -5.661509636713488e-01, -6.714558441346608e-01, -2.879556225213194e-01, -3.289532830333144e-01, -3.934691912881713e-01, -3.594283503645192e-01, -3.594283503645192e-01, -5.011833272660655e-01, -1.048633840288760e-01, -1.089217219713156e-01, -3.649991858886277e-01, -1.243587794616818e-01, -1.243587794616818e-01, -7.160942094971594e-02, -4.142710057483062e-02, -4.766411151284687e-02, -1.203058554179200e-01, -4.784617828821133e-02, -4.784617828821135e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_oblyp_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.531652094103188e+01, -2.531660328400857e+01, -2.531698528507012e+01, -2.531563660772468e+01, -2.531656424344431e+01, -2.531656424344431e+01, -4.137707206610244e+00, -4.137739343179804e+00, -4.138790440229553e+00, -4.137841734192595e+00, -4.137741057542853e+00, -4.137741057542853e+00, -8.277738732404208e-01, -8.267808431228518e-01, -8.020858684274675e-01, -8.081309600607156e-01, -8.274122253519095e-01, -8.274122253519095e-01, -2.484150417541693e-01, -2.507208122437676e-01, -9.899692620310804e-01, -1.992457351448988e-01, -2.490864162501465e-01, -2.490864162501465e-01, -2.404121518441645e-02, -2.472298927760809e-02, -7.171916721417010e-02, -1.644384360508173e-02, -2.447574985508243e-02, -2.447574985508243e-02, -6.281176960733391e+00, -6.283575794086666e+00, -6.281422746859625e+00, -6.283287951490022e+00, -6.282406020650097e+00, -6.282406020650097e+00, -2.284557103243063e+00, -2.301781461477484e+00, -2.275971008324066e+00, -2.289368534178999e+00, -2.307503565167006e+00, -2.307503565167006e+00, -7.389597873984606e-01, -8.190055899461676e-01, -7.021232977558639e-01, -7.449560839104105e-01, -7.682185847771607e-01, -7.682185847771607e-01, -1.651918615450782e-01, -2.645649112190459e-01, -1.599806624952062e-01, -2.395420768317825e+00, -1.771289620407356e-01, -1.771289620407356e-01, -1.602446428009898e-02, -1.719440791418389e-02, -1.304525317309258e-02, -1.027326003114341e-01, -1.563678016272768e-02, -1.563678016272773e-02, -7.872727466939615e-01, -7.769944590213935e-01, -7.805220493997842e-01, -7.833597137990870e-01, -7.819271986887277e-01, -7.819271986887277e-01, -7.642597965555011e-01, -6.379076626401152e-01, -6.705174402490406e-01, -7.035779346293111e-01, -6.864605534001845e-01, -6.864605534001844e-01, -8.559573448381032e-01, -3.165035338032029e-01, -3.629960483972299e-01, -4.536527162119700e-01, -4.039096465181120e-01, -4.039096465181120e-01, -5.782549297172239e-01, -6.699441543223697e-02, -9.404636246719400e-02, -4.320212432503545e-01, -1.306355816167027e-01, -1.306355816167027e-01, -2.721778384222260e-02, -8.682213710437882e-03, -1.176697450094768e-02, -1.219482048739079e-01, -1.371875760298945e-02, -1.371875760298948e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_oblyp_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.010985964755746e-09, -7.010955088353316e-09, -7.010713548366326e-09, -7.011221248342693e-09, -7.010970549209808e-09, -7.010970549209808e-09, -9.106086859884286e-06, -9.106376897024038e-06, -9.112862385838525e-06, -9.094028807436998e-06, -9.106081844732300e-06, -9.106081844732300e-06, -4.971429913121601e-03, -4.969902305599522e-03, -4.882795035367669e-03, -4.770828907638091e-03, -4.970975033587811e-03, -4.970975033587811e-03, -3.849888252971034e-01, -3.846274866827508e-01, -2.769380432496101e-03, -5.104633649845209e-01, -3.851860316173542e-01, -3.851860316173542e-01, -2.800574269461732e+03, -2.456439207023982e+03, -1.962118454774741e+01, -2.074502380893301e+04, -2.558753349143125e+03, -2.558753349143125e+03, -2.091441544250450e-06, -2.092816512492600e-06, -2.091570466164719e-06, -2.092639705155765e-06, -2.092162056793045e-06, -2.092162056793045e-06, -6.770419789086575e-05, -6.640653264885456e-05, -6.767028693463220e-05, -6.665703842154880e-05, -6.686874594804759e-05, -6.686874594804759e-05, -1.072558857267241e-02, -9.946343517314101e-03, -1.289973622537592e-02, -1.345896418561455e-02, -9.596281421251379e-03, -9.596281421251379e-03, -4.560582811144318e-01, -2.122295666342426e-01, -6.386680786904839e-01, -1.253792622647610e-04, -6.252757786496883e-01, -6.252757786496883e-01, -2.338777886288171e+04, -1.595131038806054e+04, -4.911370357351758e+04, -4.295394837386635e+00, -2.326070214248110e+04, -2.326070214248109e+04, -1.342044445975834e-02, -1.258612241650411e-02, -1.283979196099412e-02, -1.306583281809386e-02, -1.294905578966348e-02, -1.294905578966348e-02, -1.551632044678040e-02, -1.578247682361370e-02, -1.523117940218662e-02, -1.495109481596264e-02, -1.508485016891070e-02, -1.508485016891070e-02, -8.183215234796417e-03, -1.325265170084304e-01, -9.598780276052149e-02, -5.788870122764981e-02, -7.613987844151109e-02, -7.613987844151114e-02, -2.279834470078833e-02, -2.498139313302082e+01, -5.939504295514283e+00, -8.182927862877719e-02, -1.665053308889878e+00, -1.665053308889877e+00, -1.641687651051984e+03, -7.747588490358413e+05, -1.166922727714293e+05, -2.496808647505893e+00, -4.128945196738555e+04, -4.128945196738574e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
