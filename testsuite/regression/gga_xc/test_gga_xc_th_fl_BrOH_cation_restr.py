
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.926616258762649e+01, 1.926642149700205e+01, 1.926765247301196e+01, 1.926379880602297e+01, 1.926580665066181e+01, 1.926580665066181e+01, -3.907724860289562e+00, -3.907732682314202e+00, -3.908002274752795e+00, -3.908221711363317e+00, -3.907821598070370e+00, -3.907821598070370e+00, -8.675104523118018e-01, -8.667762959088900e-01, -8.491334320740145e-01, -8.544961341687507e-01, -8.533553488742579e-01, -8.533553488742579e-01, -3.734725423425905e-01, -3.763761786379500e-01, -9.789961737260511e-01, -3.252168798744419e-01, -3.444458253836208e-01, -3.444458253836207e-01, -7.751982117475993e-02, -7.941944635570033e-02, -1.753758283183018e-01, -5.970020325535447e-02, -6.657669815875533e-02, -6.657669815875533e-02, -5.509382661299331e+00, -5.510135467603432e+00, -5.509420159043857e+00, -5.510084706285284e+00, -5.509762750026670e+00, -5.509762750026670e+00, -2.243747344430350e+00, -2.259586365419947e+00, -2.232186679295063e+00, -2.246181352526549e+00, -2.258093261063954e+00, -2.258093261063954e+00, -7.845768731723159e-01, -8.344740961420780e-01, -7.416626782330553e-01, -7.626397848730375e-01, -7.938681179138152e-01, -7.938681179138152e-01, -2.729131776936278e-01, -3.737642701388851e-01, -2.631051346263384e-01, -2.202010704684802e+00, -2.944732118960336e-01, -2.944732118960336e-01, -5.271899968375558e-02, -5.905620440328182e-02, -5.192226868824282e-02, -2.189009779168305e-01, -5.677853362097755e-02, -5.677853362097755e-02, -7.873739434002224e-01, -7.840535581602324e-01, -7.852217940144791e-01, -7.861841561241709e-01, -7.857024365932261e-01, -7.857024365932261e-01, -7.716954100973695e-01, -6.924352149012623e-01, -7.150404929099194e-01, -7.375046365479920e-01, -7.260257742476149e-01, -7.260257742476149e-01, -8.650043704200187e-01, -4.228292919216547e-01, -4.679898341386695e-01, -5.516695298652535e-01, -5.070887252570100e-01, -5.070887252570099e-01, -6.544652131478415e-01, -1.718951627129360e-01, -1.980845669189167e-01, -5.394164305654437e-01, -2.447500470456783e-01, -2.447500470456783e-01, -9.118372172432307e-02, -3.119529362701517e-02, -4.472377571778859e-02, -2.377155522161668e-01, -5.470335627362941e-02, -5.470335627362938e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.021162393633671e+01, 5.021213323795153e+01, 5.021455469158047e+01, 5.020697411922703e+01, 5.021092377091204e+01, 5.021092377091204e+01, -5.115721979831590e+00, -5.115731505718763e+00, -5.116059819173030e+00, -5.116327046427876e+00, -5.115839789431668e+00, -5.115839789431668e+00, -1.089483591535053e+00, -1.088481211826286e+00, -1.064406053359060e+00, -1.071721107868875e+00, -1.070164797758435e+00, -1.070164797758435e+00, -4.375197843783896e-01, -4.411116678990432e-01, -1.242126717796371e+00, -3.784692662978409e-01, -4.018534432613842e-01, -4.018534432613842e-01, -8.974313641594803e-02, -9.192816380989745e-02, -2.021176058074898e-01, -6.922026419257839e-02, -7.714587281756553e-02, -7.714587281756553e-02, -6.876382366411450e+00, -6.877081318166899e+00, -6.876417185904390e+00, -6.877034193914782e+00, -6.876735286794206e+00, -6.876735286794206e+00, -2.971538819107889e+00, -2.992832142908850e+00, -2.955988869003558e+00, -2.974811852806747e+00, -2.990825437082484e+00, -2.990825437082484e+00, -9.765649620563043e-01, -1.044422934548230e+00, -9.184362851392921e-01, -9.468206861124319e-01, -9.891802658017392e-01, -9.891802658017392e-01, -3.158268384541312e-01, -4.378804644244312e-01, -3.042288343920823e-01, -2.915367399806179e+00, -3.414820873524495e-01, -3.414820873524495e-01, -6.116546345352132e-02, -6.847759820944861e-02, -6.024563208806818e-02, -2.524610838583412e-01, -6.585037177772000e-02, -6.585037177772000e-02, -9.803616689052839e-01, -9.758547229617361e-01, -9.774402879739172e-01, -9.787465552747340e-01, -9.780926771627660e-01, -9.780926771627660e-01, -9.590918937009368e-01, -8.520813939690568e-01, -8.825040590304769e-01, -9.128172167053757e-01, -8.973180697927688e-01, -8.973180697927688e-01, -1.086062095592635e+00, -4.991497203491744e-01, -5.565419068583022e-01, -6.650232778200854e-01, -6.069151237918236e-01, -6.069151237918236e-01, -8.011859465856636e-01, -1.981103936869071e-01, -2.283223657249651e-01, -6.489866968075829e-01, -2.826384367440783e-01, -2.826384367440783e-01, -1.054500751603713e-01, -3.627078871310264e-02, -5.192929672392090e-02, -2.744011494638625e-01, -6.345589467419949e-02, -6.345589467419946e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
