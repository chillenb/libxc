
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_407_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.118073366892585e+01, -2.118079547835273e+01, -2.118108355501066e+01, -2.118016370070214e+01, -2.118064379064461e+01, -2.118064379064461e+01, -3.517338086038754e+00, -3.517339691225008e+00, -3.517462340860233e+00, -3.517905297197653e+00, -3.517423456931319e+00, -3.517423456931319e+00, -7.293727170576576e-01, -7.290589798633131e-01, -7.241339230828614e-01, -7.289771214315721e-01, -7.335001618685696e-01, -7.335001618685696e-01, -2.477832712465808e-01, -2.482520128626088e-01, -8.399351902260052e-01, -2.140044775352532e-01, -2.208137362664544e-01, -2.208137362664543e-01, 3.667600862624281e-04, 2.092945129028858e-04, -3.309082077211991e-02, 8.831039189740969e-04, -8.617191039647152e-03, -8.617191039647157e-03, -5.232920194104413e+00, -5.234102210472245e+00, -5.232977000834961e+00, -5.234020382849730e+00, -5.233517506584952e+00, -5.233517506584952e+00, -2.076416195319300e+00, -2.087203291192624e+00, -2.074793245424192e+00, -2.084110219949916e+00, -2.083455489798386e+00, -2.083455489798386e+00, -6.294088802249174e-01, -6.782838758280503e-01, -5.867730814580387e-01, -6.028220365256395e-01, -6.384593380798214e-01, -6.384593380798214e-01, -1.491252325546534e-01, -2.693983127742268e-01, -1.356400503790416e-01, -1.974161547448172e+00, -1.771422788424867e-01, -1.771422788424867e-01, 8.031127881083180e-04, 8.827400824524688e-04, 7.377578891381283e-04, -7.723008705719911e-02, -1.930489875629815e-03, -1.930489875629827e-03, -6.356938020572742e-01, -6.262419233802284e-01, -6.288592071878840e-01, -6.315117207795873e-01, -6.301205352583915e-01, -6.301205352583915e-01, -6.233191488324386e-01, -5.446486486415867e-01, -5.597431559307408e-01, -5.772194697827662e-01, -5.678209629559794e-01, -5.678209629559794e-01, -7.092524474502447e-01, -3.126920964491601e-01, -3.418572096912328e-01, -3.974539250082655e-01, -3.645238659846783e-01, -3.645238659846782e-01, -5.048351138432248e-01, -2.973252269262644e-02, -5.283937286858138e-02, -3.773582663878758e-01, -1.117273206447474e-01, -1.117273206447473e-01, -4.071252449414433e-04, 4.276944357146804e-04, 6.420341692962347e-04, -1.025777501988525e-01, -1.295641238669777e-03, -1.295641238669783e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_407_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.847849905749878e+01, -2.847846554191784e+01, -2.847862544948035e+01, -2.847855706987948e+01, -2.847900086220092e+01, -2.847910428092296e+01, -2.847757769332258e+01, -2.847728604425171e+01, -2.847858031245459e+01, -2.847798846372519e+01, -2.847858031245459e+01, -2.847798846372519e+01, -4.590235528454776e+00, -4.590601882978707e+00, -4.590294993674448e+00, -4.590679877172933e+00, -4.591934860248608e+00, -4.592435942577507e+00, -4.589829908636982e+00, -4.590362452783451e+00, -4.589323201825515e+00, -4.591897815288394e+00, -4.589323201825515e+00, -4.591897815288394e+00, -8.606346457384307e-01, -8.701946440866372e-01, -8.573399025730808e-01, -8.691082542826551e-01, -8.131982609406768e-01, -7.953967569067060e-01, -8.099309297606305e-01, -8.157565811426584e-01, -8.885313438554425e-01, -7.119005676683891e-01, -8.885313438554425e-01, -7.119005676683891e-01, -2.096532337485855e-01, -2.083151137320463e-01, -2.094287926735800e-01, -2.100795526421863e-01, -9.880578639392937e-01, -1.045043226858767e+00, -2.304529077577117e-01, -2.231283769250888e-01, -1.605668418726215e-01, -6.480449214178984e-01, -1.605668418726214e-01, -6.480449214178989e-01, 4.585822769294239e-03, -4.435477462787062e-03, 5.251843422448935e-03, -5.408002890599683e-03, -5.294843078360972e-02, -7.019858743763827e-02, 1.128399336143139e-04, 1.661161056747329e-03, -2.060145885489907e-02, 3.752083754654833e-02, -2.060145885489910e-02, 3.752083754654759e-02, -7.032784114097881e+00, -7.031079282782572e+00, -7.035343576871071e+00, -7.033545393145586e+00, -7.032929987770657e+00, -7.031163077105585e+00, -7.035121078708587e+00, -7.033408922934141e+00, -7.034096509747629e+00, -7.032317313117044e+00, -7.034096509747629e+00, -7.032317313117044e+00, -2.307526145552033e+00, -2.307386196822396e+00, -2.336629112166172e+00, -2.335748503788179e+00, -2.259822650594533e+00, -2.273941603129059e+00, -2.285470927274688e+00, -2.299518470963197e+00, -2.358250414362879e+00, -2.326943105927675e+00, -2.358250414362879e+00, -2.326943105927675e+00, -7.977181973068111e-01, -7.960600634693440e-01, -9.080534645564118e-01, -9.092412501900411e-01, -7.194097225407013e-01, -7.474113432002988e-01, -7.894876861163027e-01, -8.111707743579485e-01, -8.327081243926518e-01, -7.938431998940152e-01, -8.327081243926512e-01, -7.938431998940151e-01, -2.269216219159402e-01, -2.159589542273295e-01, -2.422843680108125e-01, -2.400956240292811e-01, -2.263915164742439e-01, -1.928947581558075e-01, -2.657381779107576e+00, -2.656315009440052e+00, -2.736868066305129e-01, -1.879423977975325e-01, -2.736868066305129e-01, -1.879423977975325e-01, 2.361193715131356e-03, -4.529438805433389e-04, 1.572455883676838e-03, 2.105522940229955e-04, 2.965418337422505e-03, -1.069862833686790e-03, -1.363730672978272e-01, -1.392579084047113e-01, 1.581085700613803e-02, -9.898117267418068e-03, 1.581085700613843e-02, -9.898117267417862e-03, -8.520398400538689e-01, -8.550685718975711e-01, -8.375746330364644e-01, -8.409146674374054e-01, -8.432439021637246e-01, -8.464831256186177e-01, -8.473734486367095e-01, -8.504298518262617e-01, -8.453798365101129e-01, -8.485196306658589e-01, -8.453798365101129e-01, -8.485196306658589e-01, -8.333730083136942e-01, -8.357318301832788e-01, -6.416053435433977e-01, -6.449753476999088e-01, -6.927579182099777e-01, -6.964619732508432e-01, -7.441454954191382e-01, -7.468662974994607e-01, -7.175974987704437e-01, -7.203187947334152e-01, -7.175974987704437e-01, -7.203187947334152e-01, -9.474834297048644e-01, -9.501837479906078e-01, -2.537262800898791e-01, -2.533373581380807e-01, -2.946892405156139e-01, -2.983714350226375e-01, -4.510454316405239e-01, -4.536258651867579e-01, -3.663148480417708e-01, -3.670296959615292e-01, -3.663148480417714e-01, -3.670296959615301e-01, -5.895750291517440e-01, -5.948175425885279e-01, -5.543577571693399e-02, -5.776194691975244e-02, -9.454366515900033e-02, -9.899306128971574e-02, -4.463880676458382e-01, -4.535798227839564e-01, -2.131209150604710e-01, -1.562086665904928e-01, -2.131209150604711e-01, -1.562086665904918e-01, 1.633524724483282e-03, -5.389834328187745e-03, 5.695283824845140e-04, 5.097708455520208e-04, 2.542446774803630e-03, -7.473804477343905e-04, -1.757596058626210e-01, -1.704379573891782e-01, 1.327638870655022e-02, -8.362167644143492e-03, 1.327638870655001e-02, -8.362167644143501e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_407_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.377352703600459e-09, 0.000000000000000e+00, 1.377374785210057e-09, 1.377533321587991e-09, 0.000000000000000e+00, 1.377503973802164e-09, 1.377836981155059e-09, 0.000000000000000e+00, 1.378025575008249e-09, 1.375828944951235e-09, 0.000000000000000e+00, 1.375435466453141e-09, 1.377496808924701e-09, 0.000000000000000e+00, 1.376255531244016e-09, 1.377496808924701e-09, 0.000000000000000e+00, 1.376255531244016e-09, -2.448055765008739e-06, 0.000000000000000e+00, -2.436791529745177e-06, -2.446787212966674e-06, 0.000000000000000e+00, -2.434819308186019e-06, -2.408712715798905e-06, 0.000000000000000e+00, -2.397362040602683e-06, -2.472861972778392e-06, 0.000000000000000e+00, -2.460102469287899e-06, -2.455145263951877e-06, 0.000000000000000e+00, -2.425301837459237e-06, -2.455145263951877e-06, 0.000000000000000e+00, -2.425301837459237e-06, -6.857822693129927e-03, 0.000000000000000e+00, -6.463037912652720e-03, -6.979135790469867e-03, 0.000000000000000e+00, -6.494200873764912e-03, -8.457077764974818e-03, 0.000000000000000e+00, -9.149357129986335e-03, -8.558311359301391e-03, 0.000000000000000e+00, -8.340202233144831e-03, -5.392776887386415e-03, 0.000000000000000e+00, -1.194562051676474e-02, -5.392776887386415e-03, 0.000000000000000e+00, -1.194562051676474e-02, -1.770087114103988e+00, 0.000000000000000e+00, -1.646821067573129e+00, -1.778464791099756e+00, 0.000000000000000e+00, -1.609069379083964e+00, -3.832290911948404e-03, 0.000000000000000e+00, -2.700215236087824e-03, -1.453745584853606e+00, 0.000000000000000e+00, -1.655898031973755e+00, -1.905748124887444e+00, 0.000000000000000e+00, 3.211955777885486e+01, -1.905748124887448e+00, 0.000000000000000e+00, 3.211955777885503e+01, 8.225280672594813e+01, 0.000000000000000e+00, 3.107883650424431e+01, 9.061115107647012e+01, 0.000000000000000e+00, 2.931194277612398e+01, 2.400864138461783e+01, 0.000000000000000e+00, 5.953101964243514e+00, 4.677169301390203e+01, 0.000000000000000e+00, 6.169216007489756e+01, -3.759767833381754e+01, 0.000000000000000e+00, 1.187202425805041e+03, -3.759767833373876e+01, 0.000000000000000e+00, 1.187202425809146e+03, 6.233009443233935e-07, 0.000000000000000e+00, 6.231198592448175e-07, 6.353331103611517e-07, 0.000000000000000e+00, 6.347096599235094e-07, 6.239243973327343e-07, 0.000000000000000e+00, 6.234623893153399e-07, 6.342144602523433e-07, 0.000000000000000e+00, 6.340261093095671e-07, 6.295099109626013e-07, 0.000000000000000e+00, 6.289336633504455e-07, 6.295099109626013e-07, 0.000000000000000e+00, 6.289336633504455e-07, -1.015023306745278e-04, 0.000000000000000e+00, -1.015283228223017e-04, -9.686381282085305e-05, 0.000000000000000e+00, -9.701540129467711e-05, -1.086223858233475e-04, 0.000000000000000e+00, -1.064522405310100e-04, -1.044125654934154e-04, 0.000000000000000e+00, -1.022779621013447e-04, -9.367222770095598e-05, 0.000000000000000e+00, -9.856368548451645e-05, -9.367222770095598e-05, 0.000000000000000e+00, -9.856368548451645e-05, -8.516141799514477e-03, 0.000000000000000e+00, -8.627711857718887e-03, 8.756691064815209e-03, 0.000000000000000e+00, 9.360014805513916e-03, -1.521223090519084e-02, 0.000000000000000e+00, -1.141020219360684e-02, 5.514012635519391e-03, 0.000000000000000e+00, 5.078301325876094e-03, -6.024873949378075e-03, 0.000000000000000e+00, -8.979693913113642e-03, -6.024873949377999e-03, 0.000000000000000e+00, -8.979693913113635e-03, 1.534620227507816e+00, 0.000000000000000e+00, 5.841582884952424e-01, -1.030309103971927e+00, 0.000000000000000e+00, -1.039710826097338e+00, 4.832998664099596e+00, 0.000000000000000e+00, -5.526477898310799e-01, 1.126551094225876e-04, 0.000000000000000e+00, 1.130361098111500e-04, 1.761489200824894e+00, 0.000000000000000e+00, -2.574029652971153e+00, 1.761489200824894e+00, 0.000000000000000e+00, -2.574029652971153e+00, 9.207447143560663e+01, 0.000000000000000e+00, 5.888476935854425e+01, 6.900518416932374e+01, 0.000000000000000e+00, 5.907700337486239e+01, 6.195467394180329e+02, 0.000000000000000e+00, 2.332159753974628e+02, 8.742806114053499e+00, 0.000000000000000e+00, 7.981691006660588e+00, 9.223134613805152e+02, 0.000000000000000e+00, -7.509415977735175e+01, 9.223134613753215e+02, 0.000000000000000e+00, -7.509415977771401e+01, 4.461614772026156e-02, 0.000000000000000e+00, 4.521925915679108e-02, 1.381009387620572e-02, 0.000000000000000e+00, 1.430890938822398e-02, 2.079429485523731e-02, 0.000000000000000e+00, 2.128248994106595e-02, 2.854559398249894e-02, 0.000000000000000e+00, 2.886835158277470e-02, 2.436968425850217e-02, 0.000000000000000e+00, 2.477319550043843e-02, 2.436968425850217e-02, 0.000000000000000e+00, 2.477319550043843e-02, 9.528211954381581e-02, 0.000000000000000e+00, 9.465291424282601e-02, -2.494066629478837e-02, 0.000000000000000e+00, -2.423443713115263e-02, -1.756113709118337e-02, 0.000000000000000e+00, -1.688807731825431e-02, -9.195200820799209e-03, 0.000000000000000e+00, -8.749511846315451e-03, -1.403236293708915e-02, 0.000000000000000e+00, -1.358461199617722e-02, -1.403236293708915e-02, 0.000000000000000e+00, -1.358461199617722e-02, 5.754373468763597e-03, 0.000000000000000e+00, 6.425659619964116e-03, -6.621976017825042e-01, 0.000000000000000e+00, -6.551660392922768e-01, -4.033987052225874e-01, 0.000000000000000e+00, -3.879696902042858e-01, -1.153914687175283e-01, 0.000000000000000e+00, -1.119543144398528e-01, -2.271676502530744e-01, 0.000000000000000e+00, -2.268176629770660e-01, -2.271676502530735e-01, 0.000000000000000e+00, -2.268176629770667e-01, -3.621641030749941e-02, 0.000000000000000e+00, -3.455249641806390e-02, 1.454904561072116e+01, 0.000000000000000e+00, 1.243026280919923e+01, 1.429595976422734e+01, 0.000000000000000e+00, 5.421973760565240e+00, -1.310040457118432e-01, 0.000000000000000e+00, -1.190341618661579e-01, 1.192784649146909e+01, 0.000000000000000e+00, -1.364382164292405e+00, 1.192784649146873e+01, 0.000000000000000e+00, -1.364382164292545e+00, 5.275443389347197e+01, 0.000000000000000e+00, 2.863479701198248e+01, 4.195851323510613e+02, 0.000000000000000e+00, 2.482568989499269e+02, 2.453104105925675e+02, 0.000000000000000e+00, 9.178695796764585e+01, 7.636343642450657e+00, 0.000000000000000e+00, 4.455387715023789e+00, 1.198692838816545e+03, 0.000000000000000e+00, -9.150336725074512e+00, 1.198692838818762e+03, 0.000000000000000e+00, -9.150336725029174e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
