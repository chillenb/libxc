
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mpwlyp1w_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.114762398324283e+01, -2.114765077633064e+01, -2.114783934515948e+01, -2.114743928619471e+01, -2.114763903565998e+01, -2.114763903565998e+01, -3.559164751635906e+00, -3.559127169459066e+00, -3.558344160811719e+00, -3.560370931897024e+00, -3.559204393281688e+00, -3.559204393281688e+00, -7.414627258807561e-01, -7.413569961407767e-01, -7.401571357561915e-01, -7.452230155344651e-01, -7.442839387241820e-01, -7.442839387241820e-01, -2.258338544575043e-01, -2.276655017559227e-01, -8.534639740697452e-01, -1.863821729536873e-01, -2.175199618480249e-01, -2.175199618480248e-01, -2.225061861213486e-03, -2.446621848656345e-03, -5.709695023615081e-02, -9.966237738120651e-04, -1.156245211782257e-03, -1.156245211782258e-03, -5.131073499576972e+00, -5.130383238409274e+00, -5.131052913506492e+00, -5.130443379945054e+00, -5.130717548394938e+00, -5.130717548394938e+00, -2.176735015932878e+00, -2.187041065101663e+00, -2.177278700937355e+00, -2.186383047737385e+00, -2.182175393358245e+00, -2.182175393358245e+00, -6.256080846394296e-01, -6.503115189726297e-01, -5.847455940477192e-01, -5.827652785921758e-01, -6.325789953127846e-01, -6.325789953127847e-01, -1.417657043253629e-01, -2.360190951127205e-01, -1.338155457765224e-01, -1.880815948800506e+00, -1.593912123567337e-01, -1.593912123567337e-01, -7.355301348264945e-04, -9.807466234284428e-04, -8.110587260533476e-04, -9.909240523701308e-02, -9.008126241782433e-04, -9.008126241782437e-04, -5.961870418531461e-01, -5.997709599143113e-01, -5.986112391998901e-01, -5.975806372547458e-01, -5.981044604202755e-01, -5.981044604202755e-01, -5.785278167466988e-01, -5.486632139206054e-01, -5.585524744629579e-01, -5.671276141905873e-01, -5.627046539852748e-01, -5.627046539852748e-01, -6.815545396182282e-01, -2.855886321967787e-01, -3.274076669593568e-01, -3.962815343765243e-01, -3.596730620675164e-01, -3.596730620675165e-01, -5.075011977564000e-01, -5.227440413131659e-02, -7.822784738215910e-02, -3.741478427932816e-01, -1.199969985793569e-01, -1.199969985793569e-01, -3.902360890844492e-03, -2.331315392043258e-04, -5.106407904160087e-04, -1.146693053858123e-01, -8.318465376647104e-04, -8.318465376647090e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mpwlyp1w_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.529932339952911e+01, -2.529929336177422e+01, -2.529943228782619e+01, -2.529937273639932e+01, -2.529976117197704e+01, -2.529984788481239e+01, -2.529852824887469e+01, -2.529828053543650e+01, -2.529938657567638e+01, -2.529889416161949e+01, -2.529938657567638e+01, -2.529889416161949e+01, -4.137503546695515e+00, -4.137608640793484e+00, -4.137539296585474e+00, -4.137646979255873e+00, -4.138433895841147e+00, -4.138666001534538e+00, -4.137545980842767e+00, -4.137773356781451e+00, -4.136806085624142e+00, -4.138590668149078e+00, -4.136806085624142e+00, -4.138590668149078e+00, -8.317006345600758e-01, -8.343893699037064e-01, -8.303401765073301e-01, -8.336090429799585e-01, -8.089203943686262e-01, -8.054813172739705e-01, -8.130390558837866e-01, -8.141380047964281e-01, -8.319421364309401e-01, -7.994500127715278e-01, -8.319421364309401e-01, -7.994500127715278e-01, -2.408145963578709e-01, -2.424156752488399e-01, -2.424893742824234e-01, -2.446450773459479e-01, -9.524012226919677e-01, -9.790568231277055e-01, -2.067681813129801e-01, -2.074511539214421e-01, -2.145687440520848e-01, -2.241854941245960e-01, -2.145687440520847e-01, -2.241854941245960e-01, -4.889298588640437e-03, -5.015278199707351e-03, -5.488620772168942e-03, -5.721304709807810e-03, -1.303646980302001e-01, -1.346972873603052e-01, -1.726277385237492e-03, -1.749998933213644e-03, -2.614759509165062e-03, -3.341522658604333e-03, -2.614759509165062e-03, -3.341522658604336e-03, -6.282224214657859e+00, -6.280730609889866e+00, -6.284748252391161e+00, -6.283172668171387e+00, -6.282363365880694e+00, -6.280815799087216e+00, -6.284531900141728e+00, -6.283031363176797e+00, -6.283516038875332e+00, -6.281957484805412e+00, -6.283516038875332e+00, -6.281957484805412e+00, -2.294277901714374e+00, -2.294176860275106e+00, -2.311950405920889e+00, -2.311394630532114e+00, -2.277769713934143e+00, -2.281432423543750e+00, -2.292962483742830e+00, -2.296838416295282e+00, -2.315986568023257e+00, -2.306195004127483e+00, -2.315986568023257e+00, -2.306195004127483e+00, -7.461568389588155e-01, -7.447469528046994e-01, -8.267666151436716e-01, -8.273321285652803e-01, -6.810064489975554e-01, -6.997153605036509e-01, -7.241887269856483e-01, -7.416890605308200e-01, -7.730404288586811e-01, -7.439486133459007e-01, -7.730404288586812e-01, -7.439486133459008e-01, -1.864601530625534e-01, -1.850457756643893e-01, -2.599871008917922e-01, -2.601479826847307e-01, -1.794349096941487e-01, -1.780832465117035e-01, -2.398802100739348e+00, -2.397878087169292e+00, -1.886339992219028e-01, -1.784708649849177e-01, -1.886339992219028e-01, -1.784708649849177e-01, -1.255069247351240e-03, -1.159796709787372e-03, -1.746485547651360e-03, -1.696061134080275e-03, -1.540573236912983e-03, -1.527321716329270e-03, -1.528356958477751e-01, -1.543046351763501e-01, -2.047020384245304e-03, -1.744247008306698e-03, -2.047020384245303e-03, -1.744247008306699e-03, -7.734186301341086e-01, -7.757887594563881e-01, -7.628445742189111e-01, -7.652515481536976e-01, -7.665480924721191e-01, -7.689629131550564e-01, -7.696479403271145e-01, -7.720079678222465e-01, -7.681019346327580e-01, -7.704888119082135e-01, -7.681019346327580e-01, -7.704888119082135e-01, -7.561110965927382e-01, -7.580270473086816e-01, -6.222037734886728e-01, -6.240641107537211e-01, -6.553702285154954e-01, -6.575793232376969e-01, -6.923718659722656e-01, -6.942377698417508e-01, -6.731612767260203e-01, -6.750325726722173e-01, -6.731612767260203e-01, -6.750325726722173e-01, -8.633176436208695e-01, -8.648467153578674e-01, -3.071204192672324e-01, -3.074022532854449e-01, -3.509810657134581e-01, -3.518428849093144e-01, -4.477196331611888e-01, -4.492047742012203e-01, -3.938704943953921e-01, -3.936814370931500e-01, -3.938704943953920e-01, -3.936814370931500e-01, -5.749839217000233e-01, -5.776406058712895e-01, -1.277047643071418e-01, -1.283764005653821e-01, -1.560033925940665e-01, -1.557951442200325e-01, -4.331219894607973e-01, -4.372579578303375e-01, -1.575588373160696e-01, -1.480730894434685e-01, -1.575588373160696e-01, -1.480730894434685e-01, -9.593762533095197e-03, -1.005114886000019e-02, -3.284013990065680e-04, -3.352431629516882e-04, -8.505654744817798e-04, -7.629432959124649e-04, -1.505854820524339e-01, -1.507523991823699e-01, -1.973266301928400e-03, -1.496555275633947e-03, -1.973266301928396e-03, -1.496555275633948e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mpwlyp1w_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.455813757033118e-08, 1.288014091793877e-11, -1.455822050512170e-08, -1.455806026504360e-08, 1.287995730849047e-11, -1.455816379112484e-08, -1.455762576860770e-08, 1.287908438389444e-11, -1.455759650194120e-08, -1.455850996062958e-08, 1.288181751810809e-11, -1.455871469212307e-08, -1.455810430164874e-08, 1.288039353643273e-11, -1.455812880995311e-08, -1.455810430164874e-08, 1.288039353643273e-11, -1.455812880995311e-08, -1.895276317760288e-05, 1.674417921911738e-07, -1.896017569803569e-05, -1.895333881037678e-05, 1.674398670396765e-07, -1.896129921297632e-05, -1.897273977600215e-05, 1.673735143964067e-07, -1.897751538721535e-05, -1.892681656493058e-05, 1.673195246826860e-07, -1.893290436366878e-05, -1.896192332392309e-05, 1.674192397420661e-07, -1.894940985344424e-05, -1.896192332392309e-05, 1.674192397420661e-07, -1.894940985344424e-05, -1.100052824937837e-02, 1.007189637461070e-03, -1.107677707289892e-02, -1.099163663126287e-02, 1.013017780280494e-03, -1.108500085765257e-02, -1.101029904436202e-02, 1.162260212202251e-03, -1.087916853224165e-02, -1.063269244005859e-02, 1.113539906866930e-03, -1.067822405327328e-02, -1.136432066963546e-02, 1.211375086038631e-03, -9.911219166265854e-03, -1.136432066963546e-02, 1.211375086038631e-03, -9.911219166265854e-03, -1.115018841103553e+00, 5.291331364344926e-01, -1.081769952507144e+00, -1.108463738357453e+00, 4.998639831490641e-01, -1.064789995742356e+00, -6.367335066537155e-03, 4.684000617360266e-04, -6.168798124391286e-03, -1.713809075597164e+00, 1.474793208916108e+00, -1.689473746909280e+00, -1.327752104170435e+00, 2.096172417414456e+00, -3.314592349148832e+00, -1.327752104170433e+00, 2.096172417414457e+00, -3.314592349148834e+00, 6.006099457016289e+02, 9.784847673110676e-08, 5.859995509893546e+02, 6.234327694672482e+02, 4.015052756857868e-07, 6.095046082504532e+02, 7.746108097773737e+01, 1.617992134274290e+01, 6.438288252469319e+01, 6.224962295821126e+02, 3.640468077402161e-17, 6.088854582322166e+02, 6.164323298056891e+02, 9.423355817084068e-13, 1.688295579834881e+03, 6.164323298056903e+02, 9.423355817084068e-13, 1.688295579834903e+03, -4.371658418982022e-06, 1.965658734836164e-08, -4.375406128639886e-06, -4.375106426761514e-06, 1.963753244041506e-08, -4.378737989110800e-06, -4.371804030371683e-06, 1.965564031754767e-08, -4.375485322448615e-06, -4.374759876873347e-06, 1.963881361176144e-08, -4.378515653608614e-06, -4.373460167903176e-06, 1.964696510302387e-08, -4.377084167251209e-06, -4.373460167903176e-06, 1.964696510302387e-08, -4.377084167251209e-06, -1.396220352437300e-04, 3.612010277981340e-06, -1.396427645308992e-04, -1.368758188663979e-04, 3.475144402468339e-06, -1.369741959727613e-04, -1.395616728638964e-04, 3.716417678894353e-06, -1.397495535994355e-04, -1.371931343796480e-04, 3.591022766734308e-06, -1.373202455108327e-04, -1.381535756534530e-04, 3.490429756074500e-06, -1.380867581524221e-04, -1.381535756534530e-04, 3.490429756074500e-06, -1.380867581524221e-04, -2.281695238418181e-02, 1.983209016694655e-03, -2.303023409061089e-02, -2.102865899854811e-02, 1.304999197774639e-03, -2.107582493301432e-02, -3.150016098047054e-02, 2.985976875411630e-03, -2.878258411644378e-02, -3.462070464037667e-02, 2.452447495012166e-03, -3.087957016898621e-02, -2.058351672027520e-02, 1.910831790682862e-03, -2.405090830932247e-02, -2.058351672027520e-02, 1.910831790682862e-03, -2.405090830932247e-02, -1.612336513686375e+00, 4.720611596110352e+00, -1.787067900639904e+00, -7.249413704438248e-01, 5.216695091232391e-01, -7.236630263528373e-01, -1.273193761506035e+00, 5.870154686538811e+00, -1.956721764369611e+00, -2.663807390569459e-04, 4.004681330369963e-06, -2.668735370517834e-04, -2.154049377665996e+00, 2.958889840989626e+00, -2.889124581457277e+00, -2.154049377665996e+00, 2.958889840989626e+00, -2.889124581457277e+00, 9.155132069736409e+02, 4.770917094623735e-24, 7.919706787659120e+02, 7.509528497050027e+02, 1.081307819779735e-17, 6.941193967688615e+02, 4.138921444253472e+03, 4.977667745657643e-25, 4.516561446819914e+03, 4.963444485854017e+00, 1.324108985377876e+01, 5.030850488051451e+00, 2.131617312540614e+03, 8.457084053199824e-20, 1.949042499235151e+03, 2.131617312540608e+03, 8.457084053199821e-20, 1.949042499235152e+03, -3.357345171331082e-02, 1.935715917688679e-03, -3.327105488142179e-02, -2.966879572635051e-02, 1.992571794527868e-03, -2.935197435733803e-02, -3.039741554861088e-02, 1.972346728573298e-03, -3.008481888575779e-02, -3.135940493590810e-02, 1.955860705898998e-03, -3.104306788354829e-02, -3.081534881471576e-02, 1.964092206131399e-03, -3.050043847461855e-02, -3.081534881471576e-02, 1.964092206131399e-03, -3.050043847461855e-02, -3.899336133636281e-02, 2.222244885224366e-03, -3.852059040533187e-02, -3.779351141819539e-02, 4.750119905622193e-03, -3.747936354786775e-02, -3.616976219094357e-02, 3.782272041386370e-03, -3.585617601604969e-02, -3.530085350124988e-02, 3.043392819362663e-03, -3.496199611494313e-02, -3.571933987372540e-02, 3.397012830002935e-03, -3.536638659991884e-02, -3.571933987372540e-02, 3.397012830002935e-03, -3.536638659991884e-02, -1.725019727441392e-02, 1.026480016632556e-03, -1.724981227111151e-02, -4.008440560154207e-01, 2.000281624225755e-01, -3.997118812918588e-01, -2.636232852841789e-01, 9.041472843999075e-02, -2.624053228310372e-01, -1.404248266764016e-01, 2.537635291441350e-02, -1.387302040300593e-01, -1.947390778113492e-01, 4.840658000238922e-02, -1.957493409154094e-01, -1.947390778113493e-01, 4.840658000238923e-02, -1.957493409154095e-01, -5.189013623351733e-02, 7.128628641250270e-03, -5.129499412313814e-02, 7.961436104783570e+01, 1.554549512325145e+01, 7.801508245587944e+01, 2.933409574165425e+01, 1.653346853912415e+01, 2.438110236491500e+01, -1.853810236649116e-01, 3.017444911525661e-02, -1.794244270908081e-01, -1.892770045308291e+00, 8.537265471945361e+00, -4.468017518211978e+00, -1.892770045308302e+00, 8.537265471945361e+00, -4.468017518211991e+00, 4.389395421818767e+02, 3.007381281180565e-04, 4.424801613426291e+02, 3.401000137792363e+03, 2.508100788126395e-85, 5.810887737131696e+03, 1.818791812354994e+03, 1.462835130719760e-36, 1.901410636079244e+03, -2.364682461011876e+00, 9.705428301842293e+00, -2.649567995215799e+00, 4.269534859875661e+03, 7.197356880446919e-22, 2.059980869239074e+03, 4.269534859875655e+03, 7.197356880446542e-22, 2.059980869239088e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
