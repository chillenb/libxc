
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.691828210879734e+01, -4.691824111850536e+01, -4.691874596973488e+01, -4.691933906403432e+01, -4.691892834806352e+01, -4.691892834806352e+01, -3.569192354525567e+00, -3.569218938829756e+00, -3.569925592952034e+00, -3.569369995919390e+00, -3.569310823465357e+00, -3.569310823465357e+00, -7.259690575806734e-01, -7.258646035166710e-01, -7.261666744272159e-01, -7.308677662636763e-01, -7.305369740522978e-01, -7.305369740522978e-01, -2.330680580135046e-01, -2.340711776157056e-01, -8.341948985656249e-01, -2.020390419527721e-01, -2.244843413001919e-01, -2.244843413001920e-01, -1.281003077536478e-02, -1.232999852542133e-02, -9.287677694974777e-02, -7.035933452426121e-03, 1.584023243393213e-02, 1.584023243393214e-02, -5.466901577682284e+00, -5.469008638694478e+00, -5.466997850869118e+00, -5.468856820815891e+00, -5.467971321697232e+00, -5.467971321697232e+00, -2.088608034626919e+00, -2.098821045625757e+00, -2.087930341900817e+00, -2.096665913463811e+00, -2.094888859156978e+00, -2.094888859156978e+00, -6.173049670184508e-01, -6.522299943000318e-01, -5.768354693044533e-01, -5.816046981036760e-01, -6.250116237214618e-01, -6.250116237214621e-01, -1.696250044068489e-01, -2.572913509069409e-01, -1.602884435810009e-01, -2.005364708169874e+00, -1.748855095097503e-01, -1.748855095097503e-01, 3.041542889350143e-03, -2.363600435138042e-03, 3.293761237965858e-02, -1.184927192057795e-01, 2.261000082498303e-02, 2.261000082498303e-02, -6.015187468376803e-01, -6.008760568063121e-01, -6.010004589158287e-01, -6.011680060038364e-01, -6.010741831362051e-01, -6.010741831362051e-01, -5.848269718915606e-01, -5.411341123656533e-01, -5.511513951365974e-01, -5.624275618251814e-01, -5.563179662797878e-01, -5.563179662797878e-01, -6.835453509274684e-01, -3.022351112287219e-01, -3.362928547895490e-01, -3.948310710134105e-01, -3.623196452728881e-01, -3.623196452728880e-01, -5.016886096916057e-01, -9.365531091627173e-02, -1.119027939492337e-01, -3.725376775630142e-01, -1.322324079850508e-01, -1.322324079850509e-01, -2.669750513074191e-02, 3.295922637900066e-02, 2.076084241230829e-02, -1.271905348144091e-01, 2.841297298527775e-02, 2.841297298527777e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.287669057872537e+01, -5.287752949722899e+01, -5.287436820931030e+01, -5.287578285971452e+01, -5.287066794885172e+01, -5.286910388072631e+01, -5.289759413512506e+01, -5.290255611130216e+01, -5.287955926286467e+01, -5.288786237488858e+01, -5.287955926286467e+01, -5.288786237488858e+01, -4.996583138338118e+00, -4.996546875771676e+00, -4.996656102657813e+00, -4.996614693114524e+00, -4.998369148407656e+00, -4.998423906535742e+00, -4.996379393861130e+00, -4.996416647025484e+00, -4.996286818036729e+00, -4.997281026242836e+00, -4.996286818036729e+00, -4.997281026242836e+00, -8.136413802061735e-01, -8.165435704693818e-01, -8.113335532075587e-01, -8.148935823334178e-01, -7.648010308377158e-01, -7.598472686155167e-01, -7.690617616659787e-01, -7.706349349647286e-01, -7.921023602095000e-01, -7.445681065646743e-01, -7.921023602095000e-01, -7.445681065646743e-01, -2.052131649176475e-01, -2.104317330446429e-01, -2.095303035333654e-01, -2.152845785093828e-01, -9.437126633233754e-01, -9.761282248939326e-01, -1.422333794027227e-01, -1.447972039095602e-01, -1.819780235796841e-01, -9.793586524504980e-02, -1.819780235796841e-01, -9.793586524504956e-02, 9.746882324009244e-02, 8.113171053743506e-02, 9.653034621547640e-02, 7.819225267227792e-02, 3.121248903943406e-02, 1.319780099049125e-02, 9.719089463533134e-02, 1.015089567771121e-01, 4.014126783303991e-02, 1.142917811324580e-01, 4.014126783303984e-02, 1.142917811324580e-01, -7.680464901717967e+00, -7.682275693686618e+00, -7.678934776649502e+00, -7.680796554614320e+00, -7.680397497873996e+00, -7.682242138287519e+00, -7.679082303859058e+00, -7.680901970767978e+00, -7.679676742691703e+00, -7.681522332530255e+00, -7.679676742691703e+00, -7.681522332530255e+00, -2.271810231625900e+00, -2.271638439840330e+00, -2.304634178517404e+00, -2.303703699784394e+00, -2.222541481643662e+00, -2.228382209209088e+00, -2.251293053450728e+00, -2.257407186359869e+00, -2.319280555268504e+00, -2.304270454315634e+00, -2.319280555268504e+00, -2.304270454315634e+00, -7.528884840150853e-01, -7.514575546547800e-01, -8.522249560153644e-01, -8.525218051961843e-01, -6.833739558706294e-01, -6.999001638093768e-01, -7.398997059461114e-01, -7.561704140189669e-01, -7.825225643964735e-01, -7.539266274884366e-01, -7.825225643964733e-01, -7.539266274884371e-01, -7.610357325241635e-02, -7.853842285603367e-02, -1.901853244049964e-01, -1.911062064219765e-01, -6.044614096476390e-02, -7.413539565439768e-02, -2.794462912530279e+00, -2.792799213396763e+00, -1.030996792051557e-01, -1.150897958269351e-01, -1.030996792051557e-01, -1.150897958269351e-01, 1.012194245112684e-01, 9.251442863018745e-02, 9.844000011937612e-02, 9.477619229093953e-02, 8.282888249949939e-02, 7.453751664898416e-02, -2.466435382250919e-02, -2.641529964592099e-02, 1.090372204008578e-01, 6.119301214550747e-02, 1.090372204008579e-01, 6.119301214550746e-02, -7.951177708066184e-01, -7.972974979611102e-01, -7.817251758676165e-01, -7.838503421310823e-01, -7.862305262391437e-01, -7.883768625862797e-01, -7.900984042737110e-01, -7.922463970937473e-01, -7.881452665057611e-01, -7.902918017363664e-01, -7.881452665057611e-01, -7.902918017363664e-01, -7.762337952644500e-01, -7.780110269624751e-01, -6.073636633719133e-01, -6.090163435968868e-01, -6.539665751856506e-01, -6.557772666690584e-01, -7.013257694223110e-01, -7.028877101005107e-01, -6.772939336317764e-01, -6.788699727298728e-01, -6.772939336317764e-01, -6.788699727298728e-01, -8.928928745532783e-01, -8.940673663739384e-01, -2.478880066361053e-01, -2.488882803556441e-01, -3.090632487339589e-01, -3.106955072742296e-01, -4.347801025757638e-01, -4.357864415708390e-01, -3.684481264463385e-01, -3.683907122056590e-01, -3.684481264463384e-01, -3.683907122056586e-01, -5.604185854181295e-01, -5.626110510223232e-01, 2.840999747273242e-02, 2.607789100087386e-02, 6.754441174365064e-03, -3.893357575801115e-03, -4.283865433725879e-01, -4.307429914537171e-01, -4.950259580538775e-02, -6.295172538614105e-02, -4.950259580538791e-02, -6.295172538614105e-02, 9.028673508850876e-02, 7.963187061145091e-02, 8.228597566307257e-02, 8.201324017735304e-02, 9.415488389780842e-02, 8.361796142783008e-02, -4.670301024197766e-02, -5.085098196149626e-02, 1.007614786461443e-01, 6.108064842102467e-02, 1.007614786461443e-01, 6.108064842102464e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.100871096513515e-05, -4.235003274329801e-05, 2.100870541928472e-05, 2.100859258559962e-05, -4.234982109783950e-05, 2.100858804246823e-05, 2.100805714848216e-05, -4.234881487247563e-05, 2.100805089261992e-05, 2.100980556540856e-05, -4.235196515153031e-05, 2.100981059784132e-05, 2.100886545742637e-05, -4.235032372569749e-05, 2.100891598473691e-05, 2.100886545742637e-05, -4.235032372569749e-05, 2.100891598473691e-05, 3.988509825108338e-04, -7.817338060733383e-04, 3.988656878692491e-04, 3.988514769834812e-04, -7.817316061722615e-04, 3.988672106988677e-04, 3.988643181537051e-04, -7.816557851014008e-04, 3.988757573975585e-04, 3.987460398676940e-04, -7.815940755844953e-04, 3.987597288315759e-04, 3.988481086555698e-04, -7.817069286893721e-04, 3.988462346698769e-04, 3.988481086555698e-04, -7.817069286893721e-04, 3.988462346698769e-04, -7.930677849168115e-03, -4.199526407564095e-03, -7.903042022207596e-03, -7.987464184814073e-03, -4.212578762072795e-03, -7.954335637748514e-03, -9.303929877271015e-03, -4.554919477760649e-03, -9.329826780026189e-03, -8.987508239327072e-03, -4.444042683441299e-03, -8.977751374345137e-03, -8.872256816759619e-03, -4.509047623011746e-03, -9.190450991669576e-03, -8.872256816759619e-03, -4.509047623011746e-03, -9.190450991669576e-03, -1.088506525952633e+00, -1.078251490188409e+00, -1.026925449572147e+00, -1.057237154227815e+00, -1.018175092002654e+00, -9.889453564980675e-01, -3.650758416372457e-03, -3.000770557282065e-03, -3.699806034852432e-03, -2.253487544606546e+00, -3.020088099625862e+00, -2.188684862390626e+00, -1.546441327334036e+00, -2.274170466579025e+00, -4.648787861655546e+00, -1.546441327334038e+00, -2.274170466579024e+00, -4.648787861655551e+00, -6.946591064794568e+03, -7.484932457438698e+04, -4.257578874893164e+03, -6.576474045851777e+03, -6.393969894693269e+04, -3.919832916787789e+03, -8.093758744618060e+01, -2.840340574658436e+02, -6.812829306997583e+01, -1.098554360948101e+04, -4.055163247563179e+05, -1.389063067686896e+04, 7.395229360458837e+03, -2.515171979853700e+05, -1.334781313030560e+05, 7.395229360458814e+03, -2.515171979853700e+05, -1.334781313030561e+05, 2.251507011572033e-04, -4.444394232412554e-04, 2.251492771901977e-04, 2.250799399484796e-04, -4.443184209161849e-04, 2.250787110560343e-04, 2.251471851895049e-04, -4.444333980140092e-04, 2.251458832980209e-04, 2.250848670294987e-04, -4.443265762143209e-04, 2.250834388184935e-04, 2.251149113179063e-04, -4.443783275633287e-04, 2.251136702021513e-04, 2.251149113179063e-04, -4.443783275633287e-04, 2.251136702021513e-04, 6.345418830689778e-04, -1.488028603571335e-03, 6.345673763795576e-04, 6.352088897936688e-04, -1.478323495165704e-03, 6.353282883104829e-04, 6.310982818618810e-04, -1.495171610991958e-03, 6.314132282249431e-04, 6.319115566296896e-04, -1.486549650018059e-03, 6.321622701490545e-04, 6.367711663219334e-04, -1.479335364816396e-03, 6.363812655012459e-04, 6.367711663219334e-04, -1.479335364816396e-03, 6.363812655012459e-04, -1.325933973840444e-02, -6.498681754581112e-03, -1.322369454146347e-02, -5.859417087929464e-03, -4.888902531509657e-03, -5.775206508709329e-03, -1.887057122081587e-02, -8.793302563058825e-03, -1.905022359986098e-02, -1.384897738193545e-02, -7.539441246536455e-03, -1.445999395750952e-02, -1.238217757185305e-02, -6.154845811385178e-03, -1.177788505269644e-02, -1.238217757185310e-02, -6.154845811385094e-03, -1.177788505269650e-02, -5.869944960446158e+00, -1.116062465051567e+01, -5.780078422438226e+00, -9.211869527624038e-01, -1.071197423627276e+00, -9.138832577438785e-01, -7.757478857122450e+00, -1.468089477380460e+01, -6.900921893624603e+00, 1.010774857503149e-03, -1.513932924493653e-03, 1.012168423594583e-03, -4.169599979188752e+00, -6.349901143601479e+00, -3.920463666365217e+00, -4.169599979188752e+00, -6.349901143601479e+00, -3.920463666365217e+00, -3.571810091413085e+04, -8.998857125886570e+05, -1.310548178882641e+04, -1.812349023606503e+04, -4.347358542055516e+05, -1.330308342788301e+04, -1.313508908186595e+05, -9.936874156179756e+05, -9.482148105521729e+04, -2.247509901911164e+01, -5.691096304391781e+01, -2.192149153840755e+01, -1.484826559488015e+05, -6.175655899143060e+05, -5.889790862084556e+03, -1.484826559488014e+05, -6.175655899143060e+05, -5.889790862084371e+03, -6.043198818895141e-03, -6.384138498970984e-03, -6.048490474566763e-03, -1.040420036729318e-02, -6.520588259414188e-03, -1.043730423428771e-02, -9.459780303747783e-03, -6.472019872300964e-03, -9.486011970947273e-03, -8.340467846977133e-03, -6.432467853846012e-03, -8.376980830425941e-03, -8.951985119634397e-03, -6.452214385673971e-03, -8.982951175951990e-03, -8.951985119634397e-03, -6.452214385673971e-03, -8.982951175951990e-03, -4.249644950791716e-03, -7.074080312380855e-03, -4.364413684274651e-03, -2.870350864021470e-02, -1.324202600680002e-02, -2.869644911206335e-02, -2.374204363145643e-02, -1.087273586890294e-02, -2.374722651057857e-02, -1.913511666900632e-02, -9.068166604053763e-03, -1.915546705914799e-02, -2.148170662406508e-02, -9.931371961167416e-03, -2.149565891091668e-02, -2.148170662406508e-02, -9.931371961167416e-03, -2.149565891091668e-02, -4.268158509204959e-03, -4.244071735591211e-03, -4.178535904482467e-03, -4.503288671485282e-01, -4.297259187337132e-01, -4.471298446060489e-01, -2.595399419178870e-01, -2.039472872997112e-01, -2.572978770851416e-01, -1.097218781599521e-01, -6.206977893185590e-02, -1.091756362939028e-01, -1.701680220226021e-01, -1.137442961242404e-01, -1.705056165501176e-01, -1.701680220226021e-01, -1.137442961242409e-01, -1.705056165501176e-01, -3.979973760067327e-02, -1.904306727676794e-02, -3.974254940911021e-02, -8.118480527959434e+01, -3.267908514680483e+02, -7.942324350414695e+01, -3.847415235789984e+01, -1.179874351467068e+02, -3.523455654169174e+01, -1.346433690789407e-01, -7.287963415624944e-02, -1.327298370590000e-01, -1.277471259562904e+01, -2.509423701061884e+01, -1.170743146592566e+01, -1.277471259562905e+01, -2.509423701061881e+01, -1.170743146592566e+01, -2.622552193936484e+03, -2.558262807598080e+04, -2.099731099277697e+03, -4.489712562641667e+05, -2.437063157141106e+07, -1.059702063045261e+06, -1.418741508127437e+05, -2.561970683796983e+06, -6.213993869862975e+04, -1.470463650128180e+01, -3.105198645610765e+01, -1.407464408608373e+01, -2.140086268219802e+05, -7.707326167072498e+05, -8.904755996382955e+03, -2.140086268219811e+05, -7.707326167072519e+05, -8.904755996382644e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
