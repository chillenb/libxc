
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_147_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.115235017872800e+01, -2.115241332286608e+01, -2.115270502916523e+01, -2.115176537444130e+01, -2.115225616365294e+01, -2.115225616365294e+01, -3.514070902624814e+00, -3.514071654627637e+00, -3.514174810172849e+00, -3.514651113952798e+00, -3.514155154045494e+00, -3.514155154045494e+00, -7.304396136617810e-01, -7.301430192453229e-01, -7.256632386853208e-01, -7.305077620216380e-01, -7.352119820973141e-01, -7.352119820973141e-01, -2.400402372584142e-01, -2.408859807165900e-01, -8.409920327872416e-01, -2.079866376037350e-01, -2.241190855757585e-01, -2.241190855757584e-01, -8.630856856157734e-03, -9.154113069050340e-03, -6.070228134200246e-02, -4.745459381470387e-03, -1.105497234894159e-02, -1.105497234894159e-02, -5.230784861422854e+00, -5.232062511445675e+00, -5.230845598447976e+00, -5.231973398855643e+00, -5.231430792033059e+00, -5.231430792033059e+00, -2.088744536717596e+00, -2.098910529541405e+00, -2.088771354937802e+00, -2.097519609776081e+00, -2.094672951522333e+00, -2.094672951522333e+00, -6.299596217787635e-01, -6.750454942506864e-01, -5.874631690498940e-01, -6.007903626337036e-01, -6.388568986448783e-01, -6.388568986448785e-01, -1.599154260862093e-01, -2.609870274564671e-01, -1.491379884517179e-01, -1.972531568973340e+00, -1.775862326998911e-01, -1.775862326998911e-01, -3.631109919265887e-03, -4.632395738133363e-03, -3.539027153312383e-03, -1.009859446536412e-01, -5.725167605821269e-03, -5.725167605821285e-03, -6.291882466524221e-01, -6.228229996875434e-01, -6.245534674959409e-01, -6.263744393469906e-01, -6.254133883550606e-01, -6.254133883550606e-01, -6.143270662639371e-01, -5.454213853094210e-01, -5.604968856459831e-01, -5.771897561167089e-01, -5.683594762596963e-01, -5.683594762596963e-01, -7.063703403255090e-01, -3.048647752935149e-01, -3.372643005857692e-01, -3.977688298416820e-01, -3.630310572331883e-01, -3.630310572331883e-01, -5.055359492805912e-01, -5.755485547858452e-02, -8.094249759594133e-02, -3.780960079196791e-01, -1.267561185573166e-01, -1.267561185573166e-01, -1.245194241669245e-02, -1.183906352112497e-03, -2.571412685925641e-03, -1.196971774991564e-01, -5.048127666571439e-03, -5.048127666571433e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_147_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.856747967497712e+01, -2.856744737552101e+01, -2.856762229837570e+01, -2.856755035249058e+01, -2.856802724783575e+01, -2.856814778080414e+01, -2.856642564900543e+01, -2.856609697222347e+01, -2.856757608370231e+01, -2.856687310937328e+01, -2.856757608370231e+01, -2.856687310937328e+01, -4.574055728313014e+00, -4.574591690462201e+00, -4.574128806155094e+00, -4.574694099749681e+00, -4.576216010826361e+00, -4.576878715471478e+00, -4.573332326297997e+00, -4.574050886894839e+00, -4.573074995095675e+00, -4.576000388233252e+00, -4.573074995095675e+00, -4.576000388233252e+00, -8.578722355952687e-01, -8.687109112897727e-01, -8.544229739903084e-01, -8.677236242199273e-01, -8.108219045078079e-01, -7.928044090133084e-01, -8.071243318934540e-01, -8.130841737015604e-01, -8.915405587927699e-01, -7.197057928871630e-01, -8.915405587927699e-01, -7.197057928871630e-01, -2.193801058774147e-01, -2.107872411046863e-01, -2.224128781394487e-01, -2.140820163915768e-01, -9.815060645717318e-01, -1.044016136902452e+00, -1.939464413496291e-01, -1.906482956364597e-01, -1.510893695363056e-01, -3.685610335863126e-01, -1.510893695363052e-01, -3.685610335863146e-01, -9.118538740319600e-03, -1.392808078823102e-02, -9.321136769938130e-03, -1.501124565155234e-02, -7.489033569041534e-02, -8.644522223631176e-02, -6.817145128459484e-03, -5.998652617787628e-03, -1.948178966154840e-02, 1.132857432631346e-02, -1.948178966154828e-02, 1.132857432631299e-02, -7.061832545600939e+00, -7.060094906988962e+00, -7.064623242633284e+00, -7.062778973945820e+00, -7.061992186206334e+00, -7.060183872248346e+00, -7.064377562211324e+00, -7.062632209150217e+00, -7.063265975626021e+00, -7.061442169667738e+00, -7.063265975626021e+00, -7.061442169667738e+00, -2.239716741066718e+00, -2.239585552535951e+00, -2.269667172622888e+00, -2.268811269402928e+00, -2.188854795802760e+00, -2.203683305131270e+00, -2.215029938794545e+00, -2.229866111738481e+00, -2.293756354342743e+00, -2.260000112449551e+00, -2.293756354342743e+00, -2.260000112449551e+00, -7.954344105204807e-01, -7.938230057359938e-01, -8.948634438950271e-01, -8.961737415564979e-01, -7.178874233571835e-01, -7.465969176750926e-01, -7.769403249176312e-01, -7.990792052373920e-01, -8.296179764830814e-01, -7.904042127834980e-01, -8.296179764830817e-01, -7.904042127834985e-01, -1.775545476496020e-01, -1.733904349350105e-01, -2.249474677550439e-01, -2.233569999646977e-01, -1.717953198433116e-01, -1.632225228542397e-01, -2.652896319084704e+00, -2.651821330999984e+00, -2.020959521604977e-01, -1.583688133268894e-01, -2.020959521604977e-01, -1.583688133268894e-01, -4.113255062342371e-03, -5.596597166288690e-03, -5.896268012621490e-03, -6.615774168236580e-03, -3.616854599476488e-03, -5.746413737701764e-03, -1.245164190498660e-01, -1.266594975401652e-01, 2.143581432042201e-03, -1.143995008560359e-02, 2.143581432042537e-03, -1.143995008560342e-02, -8.377770514972861e-01, -8.407058658935649e-01, -8.243155458373982e-01, -8.277931499646159e-01, -8.302490411405826e-01, -8.336412283673661e-01, -8.346140596777920e-01, -8.377556500416083e-01, -8.325538988221162e-01, -8.358202427893837e-01, -8.325538988221162e-01, -8.358202427893837e-01, -8.142357253716069e-01, -8.165729577310056e-01, -6.433587756974603e-01, -6.466996311465236e-01, -6.921497020389632e-01, -6.960382378440487e-01, -7.378421370428686e-01, -7.405961900959372e-01, -7.148938898267819e-01, -7.176657680244194e-01, -7.148938898267819e-01, -7.176657680244194e-01, -9.344305923083596e-01, -9.372884005152941e-01, -2.588917670087172e-01, -2.574906964560510e-01, -3.109490026196404e-01, -3.111814231870418e-01, -4.568703169955200e-01, -4.591294221838539e-01, -3.783016029665311e-01, -3.788511306905797e-01, -3.783016029665310e-01, -3.788511306905799e-01, -5.922141999547320e-01, -5.974189307043630e-01, -7.673051331136697e-02, -7.823097377352416e-02, -1.027246986586149e-01, -1.076215459552113e-01, -4.491639413185065e-01, -4.562779641951108e-01, -1.575709787727961e-01, -1.364615277452865e-01, -1.575709787727951e-01, -1.364615277452857e-01, -1.503079024240605e-02, -1.880627727485257e-02, -1.569690389752909e-03, -1.601036035569683e-03, -2.513061863425124e-03, -4.242684582699791e-03, -1.415488963295164e-01, -1.411733861378107e-01, 1.250039929246962e-03, -1.017485161679127e-02, 1.250039929246972e-03, -1.017485161679113e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_147_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.023513500431842e-09, 0.000000000000000e+00, 2.023546173524969e-09, 2.023777229142559e-09, 0.000000000000000e+00, 2.023734097823561e-09, 2.024217463185754e-09, 0.000000000000000e+00, 2.024495504111102e-09, 2.021294730338364e-09, 0.000000000000000e+00, 2.020714824131206e-09, 2.023733516327762e-09, 0.000000000000000e+00, 2.021903282581353e-09, 2.023733516327762e-09, 0.000000000000000e+00, 2.021903282581353e-09, -2.803221735560645e-06, 0.000000000000000e+00, -2.786840638566516e-06, -2.801537887375961e-06, 0.000000000000000e+00, -2.784129011812155e-06, -2.749859627808429e-06, 0.000000000000000e+00, -2.733510857427691e-06, -2.837334858652906e-06, 0.000000000000000e+00, -2.818904741642166e-06, -2.812904905983189e-06, 0.000000000000000e+00, -2.771317905872378e-06, -2.812904905983189e-06, 0.000000000000000e+00, -2.771317905872378e-06, -7.174342138989833e-03, 0.000000000000000e+00, -6.653823557603247e-03, -7.311589156704086e-03, 0.000000000000000e+00, -6.674998123376998e-03, -8.729195099058763e-03, 0.000000000000000e+00, -9.512914034375975e-03, -8.896819890627940e-03, 0.000000000000000e+00, -8.646233777249655e-03, -4.887187602748279e-03, 0.000000000000000e+00, -1.212207927415648e-02, -4.887187602748279e-03, 0.000000000000000e+00, -1.212207927415648e-02, -1.483744206534555e+00, 0.000000000000000e+00, -1.517879890883134e+00, -1.447680657627528e+00, 0.000000000000000e+00, -1.466218229695701e+00, -4.161482816448844e-03, 0.000000000000000e+00, -2.742082871201856e-03, -2.272817624741390e+00, 0.000000000000000e+00, -2.346336395375856e+00, -2.123401514915473e+00, 0.000000000000000e+00, 1.342170559869883e+01, -2.123401514915472e+00, 0.000000000000000e+00, 1.342170559869892e+01, 1.390967099163530e+01, 0.000000000000000e+00, -4.088214004433868e+00, 1.606824347383079e+01, 0.000000000000000e+00, -5.591481421453713e+00, 6.750442321855888e-01, 0.000000000000000e+00, -5.751686775231284e+00, 2.547735404991536e+00, 0.000000000000000e+00, 8.221184713940904e+00, -2.861146642629736e+01, 0.000000000000000e+00, 3.823795899000648e+02, -2.861146642620749e+01, 0.000000000000000e+00, 3.823795899028296e+02, 8.805490169414733e-07, 0.000000000000000e+00, 8.803414219234184e-07, 8.951053192646067e-07, 0.000000000000000e+00, 8.943373296223647e-07, 8.813112949489555e-07, 0.000000000000000e+00, 8.807469731000735e-07, 8.937412652383916e-07, 0.000000000000000e+00, 8.935245414009102e-07, 8.880708988813255e-07, 0.000000000000000e+00, 8.873619446378515e-07, 8.880708988813255e-07, 0.000000000000000e+00, 8.873619446378515e-07, -1.213915779866637e-04, 0.000000000000000e+00, -1.214200172296256e-04, -1.160784100790970e-04, 0.000000000000000e+00, -1.162469945086980e-04, -1.293268002805859e-04, 0.000000000000000e+00, -1.268991795730096e-04, -1.245663651105464e-04, 0.000000000000000e+00, -1.221540326250208e-04, -1.123908327673933e-04, 0.000000000000000e+00, -1.181037730885598e-04, -1.123908327673933e-04, 0.000000000000000e+00, -1.181037730885598e-04, -9.230158938072852e-03, 0.000000000000000e+00, -9.354912391298428e-03, 2.188546979683602e-03, 0.000000000000000e+00, 2.721433281602451e-03, -1.611654171796782e-02, 0.000000000000000e+00, -1.176262342225985e-02, -4.920378066911046e-03, 0.000000000000000e+00, -3.007149842800570e-03, -6.766389076755689e-03, 0.000000000000000e+00, -1.028245450098017e-02, -6.766389076755691e-03, 0.000000000000000e+00, -1.028245450098015e-02, -2.578633128999567e+00, 0.000000000000000e+00, -2.982957719649627e+00, -1.108343443063551e+00, 0.000000000000000e+00, -1.114991815410025e+00, -1.980143627315933e+00, 0.000000000000000e+00, -3.866426861717866e+00, 1.006811447264335e-04, 0.000000000000000e+00, 1.009803930905238e-04, -1.808485195001171e+00, 0.000000000000000e+00, -4.210754416386517e+00, -1.808485195001171e+00, 0.000000000000000e+00, -4.210754416386517e+00, 1.293053698724078e+01, 0.000000000000000e+00, 3.810505490253791e+00, 7.502774020353019e+00, 0.000000000000000e+00, 5.283199112213860e+00, 1.231252962224972e+02, 0.000000000000000e+00, -2.476823670112658e+01, -4.060581679058179e+00, 0.000000000000000e+00, -4.087131278217612e+00, 2.791176045887698e+02, 0.000000000000000e+00, -7.381914127382832e+01, 2.791176045854326e+02, 0.000000000000000e+00, -7.381914127408980e+01, 2.249448687854229e-02, 0.000000000000000e+00, 2.271350312668795e-02, 3.345629061588559e-03, 0.000000000000000e+00, 4.031338877766005e-03, 8.988516564391185e-03, 0.000000000000000e+00, 9.689849373316151e-03, 1.501388790997433e-02, 0.000000000000000e+00, 1.550571079628507e-02, 1.187595651291389e-02, 0.000000000000000e+00, 1.248512119441103e-02, 1.187595651291389e-02, 0.000000000000000e+00, 1.248512119441103e-02, 2.606724985647409e-02, 0.000000000000000e+00, 2.591355296301440e-02, -2.470650361465351e-02, 0.000000000000000e+00, -2.396269008514723e-02, -1.811593496494331e-02, 0.000000000000000e+00, -1.732333695280120e-02, -1.299604838667782e-02, 0.000000000000000e+00, -1.246960897428208e-02, -1.558838362012065e-02, 0.000000000000000e+00, -1.506990319739281e-02, -1.558838362012065e-02, 0.000000000000000e+00, -1.506990319739281e-02, 9.306551676190672e-04, 0.000000000000000e+00, 1.542620581437770e-03, -6.090749372210990e-01, 0.000000000000000e+00, -6.088387936656073e-01, -3.507519784143162e-01, 0.000000000000000e+00, -3.454332591463393e-01, -1.066724866301711e-01, 0.000000000000000e+00, -1.037216272410490e-01, -2.011336797991085e-01, 0.000000000000000e+00, -2.006168008027423e-01, -2.011336797991089e-01, 0.000000000000000e+00, -2.006168008027426e-01, -3.541713008392301e-02, 0.000000000000000e+00, -3.365552751511217e-02, -2.124410855076454e+00, 0.000000000000000e+00, -2.882078165120707e+00, -1.446258138870502e+00, 0.000000000000000e+00, -4.714551609039731e+00, -1.257766198181744e-01, 0.000000000000000e+00, -1.133385519808468e-01, -1.392955531773846e+00, 0.000000000000000e+00, -7.140733422055791e+00, -1.392955531774048e+00, 0.000000000000000e+00, -7.140733422055900e+00, 6.669342656310005e+00, 0.000000000000000e+00, -2.135681276155656e+00, 8.801840084347721e+01, 0.000000000000000e+00, -1.966444484931482e+01, 4.952516534062607e+01, 0.000000000000000e+00, -7.351331702100675e+00, -3.984346260636221e+00, 0.000000000000000e+00, -5.006789397999203e+00, 3.261441912538181e+02, 0.000000000000000e+00, -5.224454072209944e+01, 3.261441912530950e+02, 0.000000000000000e+00, -5.224454072232754e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
