
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_xlyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120820250415205e+01, -2.120822753082550e+01, -2.120841144972020e+01, -2.120803760435641e+01, -2.120822315978920e+01, -2.120822315978920e+01, -3.568555197993537e+00, -3.568514849339334e+00, -3.567668264246386e+00, -3.569808093851566e+00, -3.568591606327914e+00, -3.568591606327914e+00, -7.425559891441419e-01, -7.424835043102203e-01, -7.422243643681130e-01, -7.472868598996888e-01, -7.454524917206250e-01, -7.454524917206250e-01, -2.257073053845964e-01, -2.274606123766309e-01, -8.544145170978508e-01, -1.868602502973163e-01, -2.017506402896778e-01, -2.017506402896778e-01, -4.758256809501080e-02, -4.761779724679087e-02, -8.798558109199406e-02, -4.343535698184420e-02, -4.323917983871104e-02, -4.323917983871101e-02, -5.136914966758818e+00, -5.136130572967815e+00, -5.136890502468329e+00, -5.136197873065866e+00, -5.136511040669385e+00, -5.136511040669385e+00, -2.190288086756581e+00, -2.200371624097803e+00, -2.191536597649938e+00, -2.200441826106585e+00, -2.195248903934312e+00, -2.195248903934312e+00, -6.248267664769429e-01, -6.482339027214569e-01, -5.838044973699725e-01, -5.806595427404437e-01, -6.310427892184171e-01, -6.310427892184171e-01, -1.439268272305677e-01, -2.364868123762481e-01, -1.363425282626813e-01, -1.878372529561013e+00, -1.603386923453569e-01, -1.603386923453569e-01, -3.918499531371285e-02, -4.184120157020205e-02, -2.741048943360357e-02, -1.074060647196657e-01, -3.315354675998201e-02, -3.315354675998203e-02, -5.938439712793203e-01, -5.976849345593793e-01, -5.964137410220366e-01, -5.952992047806275e-01, -5.958631703670524e-01, -5.958631703670524e-01, -5.762075832131315e-01, -5.487237083229364e-01, -5.579198836453269e-01, -5.657613125717189e-01, -5.617085679894188e-01, -5.617085679894188e-01, -6.795207694304040e-01, -2.860920959934466e-01, -3.277562399797244e-01, -3.958449974659023e-01, -3.596744476808417e-01, -3.596744476808416e-01, -5.074032215887486e-01, -8.741737669234144e-02, -9.727297650632891e-02, -3.731889899919548e-01, -1.232309495255529e-01, -1.232309495255529e-01, -5.372192428928938e-02, -2.418288876032521e-02, -3.163254681988805e-02, -1.186921959140314e-01, -3.115647414984612e-02, -3.115647414984609e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_xlyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.520691802912220e+01, -2.520701380064487e+01, -2.520742003091140e+01, -2.520599555876751e+01, -2.520674472586301e+01, -2.520674472586301e+01, -4.114856748658832e+00, -4.114896163324098e+00, -4.115907344549185e+00, -4.114918793808364e+00, -4.115001555363906e+00, -4.115001555363906e+00, -8.268695954771708e-01, -8.257805757577212e-01, -8.006708017267595e-01, -8.070543969548278e-01, -8.058243221050421e-01, -8.058243221050421e-01, -2.391931878126846e-01, -2.410915487819423e-01, -9.588335120903637e-01, -2.051322994560080e-01, -2.153847884920292e-01, -2.153847884920292e-01, -1.406308656063146e-02, -1.440593292004097e-02, -7.067770665086956e-02, -1.066600954367187e-02, -1.160849610366060e-02, -1.160849610366063e-02, -6.258774338134439e+00, -6.261350253437100e+00, -6.258890320508908e+00, -6.261164342192481e+00, -6.260081009227644e+00, -6.260081009227644e+00, -2.273614116251321e+00, -2.291125509301524e+00, -2.258607867672052e+00, -2.273962429361269e+00, -2.290687307267456e+00, -2.290687307267456e+00, -7.408442838662075e-01, -8.233689623323680e-01, -6.860193558436889e-01, -7.294451434017976e-01, -7.543027278534051e-01, -7.543027278534051e-01, -1.795710334233777e-01, -2.584002138018970e-01, -1.706811425124385e-01, -2.390827403666622e+00, -1.800826153313742e-01, -1.800826153313742e-01, -9.107752793423012e-03, -1.033030003304527e-02, -7.178824347346891e-03, -1.259366084777685e-01, -8.667716989426179e-03, -8.667716989426208e-03, -7.719963991291968e-01, -7.605738110029469e-01, -7.644563285172772e-01, -7.677699236185713e-01, -7.661014455936669e-01, -7.661014455936669e-01, -7.545458752120313e-01, -6.184966660851761e-01, -6.520857188997551e-01, -6.893380946262601e-01, -6.698988108987994e-01, -6.698988108987994e-01, -8.602320453753819e-01, -3.050739766408198e-01, -3.485003182011727e-01, -4.448203827674536e-01, -3.903896568072740e-01, -3.903896568072739e-01, -5.719615077324305e-01, -6.588403980959767e-02, -1.014384927651930e-01, -4.317900882220512e-01, -1.428441881111617e-01, -1.428441881111616e-01, -1.771105352947517e-02, -4.686164479327167e-03, -7.049091470132875e-03, -1.383678961710714e-01, -8.096992553753544e-03, -8.096992553753499e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_xlyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.721565532593118e-09, -7.721528971039293e-09, -7.721260429722820e-09, -7.721806597623041e-09, -7.721535475691920e-09, -7.721535475691920e-09, -1.002021989751619e-05, -1.002066045218603e-05, -1.002987967446796e-05, -1.000630347703227e-05, -1.001978704380169e-05, -1.001978704380169e-05, -5.571232359143578e-03, -5.569993009784567e-03, -5.490034608610282e-03, -5.348803203288761e-03, -5.403415026739613e-03, -5.403415026739613e-03, -4.380642125925802e-01, -4.393435068739990e-01, -3.196336938067102e-03, -5.168789423846294e-01, -5.382974351142472e-01, -5.382974351142471e-01, -7.295661768627846e+03, -6.393523792955266e+03, -2.207908208007231e+01, -3.451630651606160e+04, -1.911439835453501e+04, -1.911439835453502e+04, -2.311108507152002e-06, -2.312839720752048e-06, -2.311165455457701e-06, -2.312693961494683e-06, -2.311997318614516e-06, -2.311997318614516e-06, -7.354226480410175e-05, -7.212104023947634e-05, -7.356103423475665e-05, -7.230194993848845e-05, -7.274735894907699e-05, -7.274735894907699e-05, -1.155020421629676e-02, -1.070927652127268e-02, -1.505399595246500e-02, -1.649565607506448e-02, -1.117329470214259e-02, -1.117329470214259e-02, 6.639834696589197e-02, -2.438938858697040e-01, 1.890051368103549e-01, -1.395091165974589e-04, -6.424198936766792e-01, -6.424198936766792e-01, -7.874762427834443e+04, -3.856250281116121e+04, -1.396779300401037e+05, -7.662675040717737e-02, -6.594587660932749e+04, -6.594587660932745e+04, -1.634267460126688e-02, -1.495593441542924e-02, -1.529635883285410e-02, -1.566551519363739e-02, -1.546670555380211e-02, -1.546670555380211e-02, -1.889039504427395e-02, -1.858662271977610e-02, -1.796310344438946e-02, -1.766684431043636e-02, -1.780401419574432e-02, -1.780401419574432e-02, -8.792942290965014e-03, -1.576618521963022e-01, -1.144512178816599e-01, -6.666860681154378e-02, -8.988091032473486e-02, -8.988091032473490e-02, -2.529825078729441e-02, -2.700313292898456e+01, -3.064377571694163e+00, -8.778203410981300e-02, -6.355063198572584e-01, -6.355063198572610e-01, -2.546432370010762e+03, -2.710534390579037e+06, -2.599330891134991e+05, -5.207428741103861e-01, -8.804013486023384e+04, -8.804013486023416e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
