
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_93_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.125684889350154e+01, -2.125690292890526e+01, -2.125717799678456e+01, -2.125629249731302e+01, -2.125687710567201e+01, -2.125687710567201e+01, -3.521815762957969e+00, -3.521816749337404e+00, -3.521987949371614e+00, -3.522428679860433e+00, -3.521831018411417e+00, -3.521831018411417e+00, -7.246453057036329e-01, -7.244507909806621e-01, -7.231342211580566e-01, -7.274598390639530e-01, -7.245711539259140e-01, -7.245711539259140e-01, -2.395541380325031e-01, -2.401882261169539e-01, -8.480752635378926e-01, -2.095701175300264e-01, -2.397093390598533e-01, -2.397093390598533e-01, -2.631996960607165e-02, -2.757783238855583e-02, -1.054894789340226e-01, -1.251339204597727e-02, -2.728162572866940e-02, -2.728162572866940e-02, -5.242353793388117e+00, -5.243567149082520e+00, -5.242479974614084e+00, -5.243423353042046e+00, -5.242972173472482e+00, -5.242972173472482e+00, -2.092867712710703e+00, -2.102585101351058e+00, -2.093780044965424e+00, -2.101216520543733e+00, -2.098707070637899e+00, -2.098707070637899e+00, -6.184728892716602e-01, -6.661515768442254e-01, -5.890155462370751e-01, -6.083830981952609e-01, -6.398594488760831e-01, -6.398594488760831e-01, -1.841801880593389e-01, -2.673796715005670e-01, -1.793970181152774e-01, -1.971371159909263e+00, -1.921730174662054e-01, -1.921730174662054e-01, -1.206445803783111e-02, -1.381453311490267e-02, -1.030047812536226e-02, -1.337905012097848e-01, -1.256341036185141e-02, -1.256341036185142e-02, -6.368673836823160e-01, -6.308991997582696e-01, -6.327933870840885e-01, -6.344509206486851e-01, -6.336003192029428e-01, -6.336003192029428e-01, -6.176467655712530e-01, -5.483576374614428e-01, -5.637478408655492e-01, -5.805226392354466e-01, -5.715958957879431e-01, -5.715958957879431e-01, -6.971784487817712e-01, -3.089951643831261e-01, -3.394740584833471e-01, -3.945404401742347e-01, -3.633340544992751e-01, -3.633340544992751e-01, -4.991205872324771e-01, -1.000543157474802e-01, -1.265826041118414e-01, -3.678803155764261e-01, -1.552635959068288e-01, -1.552635959068287e-01, -3.094191648399626e-02, -3.732852794656250e-03, -7.124310570095786e-03, -1.475370713640125e-01, -1.064998105118876e-02, -1.064998105118872e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_93_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.858670338420517e+01, -2.858681121225713e+01, -2.858728759944455e+01, -2.858552187580639e+01, -2.858676028808021e+01, -2.858676028808021e+01, -4.573981342246678e+00, -4.574057145573710e+00, -4.576323455702212e+00, -4.573376813421692e+00, -4.574039696562386e+00, -4.574039696562386e+00, -8.378684615221192e-01, -8.355174546900963e-01, -7.692487415959632e-01, -7.775738315330207e-01, -8.370191715090878e-01, -8.370191715090878e-01, -2.176728435854833e-01, -2.218180697777604e-01, -1.043722993966075e+00, -1.581033615277745e-01, -2.189210267111649e-01, -2.189210267111649e-01, -3.452609121647946e-02, -3.609681753493504e-02, -1.082696021609072e-01, -1.668685181307450e-02, -3.570932594098773e-02, -3.570932594098773e-02, -7.069926729886322e+00, -7.072648456339209e+00, -7.070206386071882e+00, -7.072322808230385e+00, -7.071323414371327e+00, -7.071323414371327e+00, -2.220894026822700e+00, -2.249478434846969e+00, -2.195908571743831e+00, -2.218256817016635e+00, -2.272594120141949e+00, -2.272594120141949e+00, -7.873477742871176e-01, -8.872484711222153e-01, -7.451298424278916e-01, -8.035008623363316e-01, -8.224638994462861e-01, -8.224638994462861e-01, -1.301630961322234e-01, -2.082824403250627e-01, -1.271109235902197e-01, -2.651769610514302e+00, -1.387132920974087e-01, -1.387132920974087e-01, -1.608909158926362e-02, -1.840723209104233e-02, -1.371411941750134e-02, -1.129226630721014e-01, -1.673320108142069e-02, -1.673320108142066e-02, -8.471972325343335e-01, -8.406831867898217e-01, -8.440945846312534e-01, -8.460214778744621e-01, -8.451550331010751e-01, -8.451550331010751e-01, -8.200654504431348e-01, -6.564629314512528e-01, -7.089014339399085e-01, -7.539319111057508e-01, -7.314731170631552e-01, -7.314731170631552e-01, -9.282374369503813e-01, -2.591795377583326e-01, -3.194639034089859e-01, -4.547328686567293e-01, -3.820114723140309e-01, -3.820114723140309e-01, -5.894586405940015e-01, -1.083336967265084e-01, -1.170300861772215e-01, -4.447679554056113e-01, -1.138333852365113e-01, -1.138333852365108e-01, -4.042910071378478e-02, -4.981253422274302e-03, -9.508516930173775e-03, -1.087040887206104e-01, -1.418681549222700e-02, -1.418681549222691e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_93_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.936442055324351e-10, 6.937438248909766e-10, 6.940303332784108e-10, 6.924021112511468e-10, 6.936980614458680e-10, 6.936980614458680e-10, -1.630926171136704e-06, -1.629997121152729e-06, -1.604159003487726e-06, -1.647139547049992e-06, -1.630417970269262e-06, -1.630417970269262e-06, -3.973968760344671e-03, -4.018717926739239e-03, -5.217644985085652e-03, -5.025444234124406e-03, -3.990151380449612e-03, -3.990151380449612e-03, -7.571496794247922e-01, -7.296777935937262e-01, -1.451098493830489e-03, -1.813118360319833e+00, -7.490370810092998e-01, -7.490370810092998e-01, -3.804597168999175e+01, -3.816846888905895e+01, -1.365645633340401e+01, -2.637678621004785e+01, -3.962350184582252e+01, -3.962350184582252e+01, 4.016515715399274e-07, 4.087829677895190e-07, 4.023623919438556e-07, 4.079076235861394e-07, 4.053326735554933e-07, 4.053326735554933e-07, -6.367259448121454e-05, -6.109805479582638e-05, -6.554501848925683e-05, -6.350471250731262e-05, -5.948176342419345e-05, -5.948176342419345e-05, -4.078564533386919e-03, 2.370406221708116e-03, -5.491786233904748e-03, -1.165437740167658e-04, -2.988738896868706e-03, -2.988738896868706e-03, -3.743959822156462e+00, -6.150921970919000e-01, -4.092758733275423e+00, 5.018422393923594e-05, -2.850697296385448e+00, -2.850697296385448e+00, -2.793747305952243e+01, -2.814276190561523e+01, -7.942642090232701e+01, -1.049079133880272e+01, -4.136442671711179e+01, -4.136442671713969e+01, 8.001991541792602e-03, 3.669577441422363e-03, 5.364662750546032e-03, 6.712849485073014e-03, 6.049406340428909e-03, 6.049406340428906e-03, 9.251386659154617e-03, -1.119105112567678e-02, -7.113095694244141e-03, -3.600103347615921e-03, -5.407783660703895e-03, -5.407783660703896e-03, 1.674636310796924e-03, -2.949693255088072e-01, -1.639029112625064e-01, -5.420651433745604e-02, -9.898519409666071e-02, -9.898519409666062e-02, -1.788605526897523e-02, -1.222537102251333e+01, -1.032807896092660e+01, -6.145873192246076e-02, -7.131497084481095e+00, -7.131497084481117e+00, -2.875879186658183e+01, -4.628147981708022e+01, -4.063863047623240e+01, -8.611034170999789e+00, -5.998139272241991e+01, -5.998139272241546e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
