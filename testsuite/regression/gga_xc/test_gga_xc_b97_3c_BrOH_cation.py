
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_3c_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.113278358389304e+01, -2.113284295943544e+01, -2.113312390484720e+01, -2.113224018747947e+01, -2.113270081739845e+01, -2.113270081739845e+01, -3.509711727111062e+00, -3.509709921161124e+00, -3.509753678624316e+00, -3.510333319272943e+00, -3.509792950733378e+00, -3.509792950733378e+00, -7.256070380854196e-01, -7.252900677910424e-01, -7.200717725187356e-01, -7.249477918508638e-01, -7.304476649370235e-01, -7.304476649370235e-01, -2.319181197404939e-01, -2.328858099336626e-01, -8.362384196294986e-01, -2.030222172150263e-01, -2.123819534101044e-01, -2.123819534101042e-01, -7.528626177789292e-03, -8.044849375577721e-03, -6.267015814926033e-02, -3.881743670178781e-03, -1.203891521448358e-02, -1.203891521448358e-02, -5.210444091223690e+00, -5.211468532076712e+00, -5.210494385717930e+00, -5.211398665183080e+00, -5.210961269402902e+00, -5.210961269402902e+00, -2.084048894693469e+00, -2.094278491915018e+00, -2.084007914461106e+00, -2.092792506944189e+00, -2.090073660163838e+00, -2.090073660163838e+00, -6.253518709220564e-01, -6.662555674717766e-01, -5.830475739688598e-01, -5.938853873969340e-01, -6.340764282370502e-01, -6.340764282370503e-01, -1.637610712537123e-01, -2.551136257774428e-01, -1.533970375730792e-01, -1.952147174141727e+00, -1.752389947783444e-01, -1.752389947783444e-01, -2.908184962167873e-03, -3.780098663247944e-03, -2.839966918975825e-03, -1.047541792195049e-01, -5.495030324545004e-03, -5.495030324545011e-03, -6.186104598587180e-01, -6.143397253742220e-01, -6.151497544724462e-01, -6.162299367112413e-01, -6.156248615510065e-01, -6.156248615510065e-01, -6.050880170624576e-01, -5.408648531584138e-01, -5.561715584638628e-01, -5.721992808773065e-01, -5.638685863433105e-01, -5.638685863433105e-01, -6.976918369982142e-01, -2.973047072390959e-01, -3.299535630533476e-01, -3.933146108542699e-01, -3.572992810293129e-01, -3.572992810293129e-01, -5.010170628260474e-01, -5.921520331539397e-02, -8.449541457515379e-02, -3.741581309107772e-01, -1.289984720677842e-01, -1.289984720677842e-01, -1.122459701190270e-02, -8.696740336166530e-04, -2.015187362461966e-03, -1.224501033482189e-01, -4.722041181835023e-03, -4.722041181835009e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_3c_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.820853624180683e+01, -2.820850349345557e+01, -2.820866651111703e+01, -2.820859761196097e+01, -2.820904706943497e+01, -2.820915531405753e+01, -2.820758318636971e+01, -2.820728179530280e+01, -2.820862310814212e+01, -2.820799908888246e+01, -2.820862310814212e+01, -2.820799908888246e+01, -4.537146018879937e+00, -4.537582981848861e+00, -4.537207335739439e+00, -4.537667355901064e+00, -4.538944928463291e+00, -4.539510778749541e+00, -4.536661033566509e+00, -4.537269864266158e+00, -4.536210786307362e+00, -4.538908727380247e+00, -4.536210786307362e+00, -4.538908727380247e+00, -8.573126952688992e-01, -8.681876248515509e-01, -8.539893548278199e-01, -8.673776240054442e-01, -8.143461049965418e-01, -7.944494545019549e-01, -8.094201446383917e-01, -8.159737068923738e-01, -8.965371750333464e-01, -7.030307881147011e-01, -8.965371750333464e-01, -7.030307881147011e-01, -2.175118547116254e-01, -2.042012074237987e-01, -2.230654969199843e-01, -2.101233068266968e-01, -9.795994820164282e-01, -1.040884163627316e+00, -1.586450619430063e-01, -1.522028840011009e-01, -9.542319383359354e-02, -4.496250128458922e-01, -9.542319383359334e-02, -4.496250128458940e-01, -6.813686795440799e-03, -1.353874480639129e-02, -6.810090189337996e-03, -1.477131422418180e-02, -7.172354154382915e-02, -8.976149475317320e-02, -5.929062148473125e-03, -4.787865853568672e-03, -2.276824087364289e-02, 2.019691052019768e-02, -2.276824087364286e-02, 2.019691052019763e-02, -6.953627234682505e+00, -6.951939938700678e+00, -6.955960722106633e+00, -6.954184826921267e+00, -6.953762441570222e+00, -6.952015897780032e+00, -6.955757430126821e+00, -6.954063143786432e+00, -6.954824214260799e+00, -6.953066569377010e+00, -6.954824214260799e+00, -6.953066569377010e+00, -2.240095039978988e+00, -2.239960151354292e+00, -2.271008331221042e+00, -2.270115847641866e+00, -2.185344459035755e+00, -2.202169405646184e+00, -2.212807840367076e+00, -2.229462309626937e+00, -2.297046408539523e+00, -2.260310704959751e+00, -2.297046408539523e+00, -2.260310704959751e+00, -7.876904465469272e-01, -7.860614103881844e-01, -8.731194291401340e-01, -8.742687353275072e-01, -7.125006657066912e-01, -7.400251802016505e-01, -7.591233593382146e-01, -7.806643196082812e-01, -8.199197807516692e-01, -7.820134404280343e-01, -8.199197807516692e-01, -7.820134404280347e-01, -1.479931165933386e-01, -1.414883185800833e-01, -1.912833890682719e-01, -1.883909381875378e-01, -1.471653906772339e-01, -1.349119241408681e-01, -2.599631816587066e+00, -2.598582438455539e+00, -1.779248812487599e-01, -1.057914251772401e-01, -1.779248812487599e-01, -1.057914251772401e-01, -2.915126431892942e-03, -4.981070488342074e-03, -4.717799188222681e-03, -5.720204452154823e-03, -2.294219795619385e-03, -5.265084584853304e-03, -1.150222204137571e-01, -1.183605883137480e-01, 6.243042378767070e-03, -1.269710290979263e-02, 6.243042378767111e-03, -1.269710290979266e-02, -8.252793701196350e-01, -8.284250837800828e-01, -8.038606329168880e-01, -8.071454205311204e-01, -8.102035441729349e-01, -8.135456044600592e-01, -8.165869951412199e-01, -8.197926318431504e-01, -8.132742517646347e-01, -8.165527177293714e-01, -8.132742517646347e-01, -8.165527177293714e-01, -8.084297929505269e-01, -8.107272840942690e-01, -6.424754322099104e-01, -6.458321265369109e-01, -6.872486933345927e-01, -6.909491561318140e-01, -7.270589720569987e-01, -7.296078216797478e-01, -7.075176575668085e-01, -7.101479770799816e-01, -7.075176575668085e-01, -7.101479770799816e-01, -9.123065202945481e-01, -9.147944851665563e-01, -2.426316315528660e-01, -2.403563994905109e-01, -3.112435953551431e-01, -3.116796841196141e-01, -4.573665818558664e-01, -4.596806011211744e-01, -3.824270073423196e-01, -3.832398119557336e-01, -3.824270073423196e-01, -3.832398119557336e-01, -5.915884623434443e-01, -5.968495459145553e-01, -7.689630064634176e-02, -7.920416667437225e-02, -9.934078411743195e-02, -1.079793521667725e-01, -4.471523069588046e-01, -4.542145704859175e-01, -1.394488868347128e-01, -1.086898708600471e-01, -1.394488868347123e-01, -1.086898708600466e-01, -1.290034539492875e-02, -1.819957125483824e-02, -1.159880862621386e-03, -1.203680829481198e-03, -1.445590335056540e-03, -3.854142505108250e-03, -1.222317247868692e-01, -1.222594753306322e-01, 4.773941871016242e-03, -1.115172772028538e-02, 4.773941871016261e-03, -1.115172772028535e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_3c_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_3c", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.212988922168519e-10, 0.000000000000000e+00, 3.213158405140104e-10, 3.214987568338368e-10, 0.000000000000000e+00, 3.214579532663176e-10, 3.218554451354056e-10, 0.000000000000000e+00, 3.220632644227098e-10, 3.196439005009829e-10, 0.000000000000000e+00, 3.191979760983157e-10, 3.214675471630464e-10, 0.000000000000000e+00, 3.201140385371356e-10, 3.214675471630464e-10, 0.000000000000000e+00, 3.201140385371356e-10, -3.872262955372760e-06, 0.000000000000000e+00, -3.859863599342965e-06, -3.871017948673662e-06, 0.000000000000000e+00, -3.857850505574256e-06, -3.832690425646528e-06, 0.000000000000000e+00, -3.820060708098005e-06, -3.896454711863828e-06, 0.000000000000000e+00, -3.882247646642570e-06, -3.881126802616507e-06, 0.000000000000000e+00, -3.846325977151936e-06, -3.881126802616507e-06, 0.000000000000000e+00, -3.846325977151936e-06, -6.857902031764716e-03, 0.000000000000000e+00, -6.333053740303470e-03, -6.987172698476056e-03, 0.000000000000000e+00, -6.341915049302939e-03, -8.158536495669675e-03, 0.000000000000000e+00, -9.072831170683526e-03, -8.428153792395480e-03, 0.000000000000000e+00, -8.137234507116346e-03, -4.127683355726435e-03, 0.000000000000000e+00, -1.269009413864646e-02, -4.127683355726435e-03, 0.000000000000000e+00, -1.269009413864646e-02, -1.397418795183173e+00, 0.000000000000000e+00, -1.491312790750549e+00, -1.321805487465873e+00, 0.000000000000000e+00, -1.401829226160861e+00, -4.050740198532878e-03, 0.000000000000000e+00, -2.680321590662342e-03, -3.199624802733759e+00, 0.000000000000000e+00, -3.342352674924242e+00, -2.770757172365116e+00, 0.000000000000000e+00, 2.282597206976413e+01, -2.770757172365116e+00, 0.000000000000000e+00, 2.282597206976419e+01, 3.168473950606962e+00, 0.000000000000000e+00, -1.389204763967328e+01, 4.692807384331055e+00, 0.000000000000000e+00, -1.591389536519777e+01, -4.816877207331313e+00, 0.000000000000000e+00, -1.141300123313368e+01, -6.825580725815054e+00, 0.000000000000000e+00, -1.174447188978397e+00, -3.733668237807408e+01, 0.000000000000000e+00, 3.385043859508731e+02, -3.733668237807407e+01, 0.000000000000000e+00, 3.385043859510517e+02, 2.087115133718561e-07, 0.000000000000000e+00, 2.081572924676838e-07, 2.174990648798855e-07, 0.000000000000000e+00, 2.165950919437426e-07, 2.091787505131353e-07, 0.000000000000000e+00, 2.084000809491095e-07, 2.166738087455155e-07, 0.000000000000000e+00, 2.161133487795223e-07, 2.132559465713459e-07, 0.000000000000000e+00, 2.123903620614365e-07, 2.132559465713459e-07, 0.000000000000000e+00, 2.123903620614365e-07, -1.204923073777372e-04, 0.000000000000000e+00, -1.205215815318973e-04, -1.149819941561801e-04, 0.000000000000000e+00, -1.151588825700404e-04, -1.293437994769789e-04, 0.000000000000000e+00, -1.264362340321806e-04, -1.242975643365307e-04, 0.000000000000000e+00, -1.214533113537447e-04, -1.107981726343367e-04, 0.000000000000000e+00, -1.172486522710453e-04, -1.107981726343367e-04, 0.000000000000000e+00, -1.172486522710453e-04, -9.938275860026900e-03, 0.000000000000000e+00, -1.008451510022986e-02, -5.051679630991865e-03, 0.000000000000000e+00, -4.699903457066899e-03, -1.637501055621810e-02, 0.000000000000000e+00, -1.230097407686168e-02, -1.433711168295937e-02, 0.000000000000000e+00, -1.104135952780604e-02, -7.804158782115030e-03, 0.000000000000000e+00, -1.131205686381092e-02, -7.804158782115011e-03, 0.000000000000000e+00, -1.131205686381091e-02, -5.291905472648044e+00, 0.000000000000000e+00, -5.881498529626540e+00, -1.390177007814516e+00, 0.000000000000000e+00, -1.405291016173382e+00, -4.935338885866999e+00, 0.000000000000000e+00, -7.382208360588463e+00, 2.218044677702054e-05, 0.000000000000000e+00, 2.227395164130822e-05, -3.239956754202479e+00, 0.000000000000000e+00, -7.007769693120111e+00, -3.239956754202479e+00, 0.000000000000000e+00, -7.007769693120111e+00, -6.791094731495485e-01, 0.000000000000000e+00, -7.611290152216576e+00, -4.039961194567976e+00, 0.000000000000000e+00, -5.294584302123358e+00, 5.359845696035315e+01, 0.000000000000000e+00, -9.438416106343843e+01, -9.871946864962434e+00, 0.000000000000000e+00, -9.700746843985176e+00, 2.340538810820772e+02, 0.000000000000000e+00, -1.013975658660761e+02, 2.340538810819713e+02, 0.000000000000000e+00, -1.013975658660949e+02, 2.439148208646289e-02, 0.000000000000000e+00, 2.554029705309646e-02, -7.402952002387590e-03, 0.000000000000000e+00, -6.738321666592341e-03, -2.611825585687971e-03, 0.000000000000000e+00, -1.772826425226555e-03, 5.149810579731029e-03, 0.000000000000000e+00, 6.000574517676779e-03, 6.778291004895826e-04, 0.000000000000000e+00, 1.531844395087157e-03, 6.778291004895826e-04, 0.000000000000000e+00, 1.531844395087157e-03, 6.800884182612099e-02, 0.000000000000000e+00, 6.765550603371256e-02, -2.332913001681794e-02, 0.000000000000000e+00, -2.258921168317905e-02, -1.820201664195031e-02, 0.000000000000000e+00, -1.747795912477773e-02, -1.606010543627832e-02, 0.000000000000000e+00, -1.559659751704301e-02, -1.675673117344579e-02, 0.000000000000000e+00, -1.627676760145854e-02, -1.675673117344579e-02, 0.000000000000000e+00, -1.627676760145854e-02, -4.533288000075182e-03, 0.000000000000000e+00, -4.142777664181701e-03, -6.515241546490858e-01, 0.000000000000000e+00, -6.536410048971911e-01, -3.306323537816729e-01, 0.000000000000000e+00, -3.239617717736735e-01, -9.760131011167664e-02, 0.000000000000000e+00, -9.466168771281218e-02, -1.797148237659567e-01, 0.000000000000000e+00, -1.784001396049484e-01, -1.797148237659568e-01, 0.000000000000000e+00, -1.784001396049486e-01, -3.326079483832624e-02, 0.000000000000000e+00, -3.149177162830236e-02, -7.237088292722625e+00, 0.000000000000000e+00, -8.010467378107435e+00, -6.206162677092339e+00, 0.000000000000000e+00, -9.802294839733001e+00, -1.191456149905931e-01, 0.000000000000000e+00, -1.069606092193615e-01, -5.471550450110731e+00, 0.000000000000000e+00, -1.365966913537336e+01, -5.471550450110821e+00, 0.000000000000000e+00, -1.365966913537342e+01, -1.617583071943775e+00, 0.000000000000000e+00, -1.019866703641475e+01, 4.381518366320892e+01, 0.000000000000000e+00, -8.937475094638003e+01, 2.247327397388983e+01, 0.000000000000000e+00, -3.322916348045680e+01, -9.593254653732201e+00, 0.000000000000000e+00, -1.078679072849764e+01, 2.452586058160532e+02, 0.000000000000000e+00, -8.202383320203305e+01, 2.452586058155291e+02, 0.000000000000000e+00, -8.202383320206906e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
