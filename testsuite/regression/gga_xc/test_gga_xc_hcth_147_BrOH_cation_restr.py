
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_147_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.115235017872382e+01, -2.115241332282990e+01, -2.115270502902089e+01, -2.115176537344050e+01, -2.115225615842660e+01, -2.115225615842660e+01, -3.514070867491331e+00, -3.514071614851275e+00, -3.514174776589587e+00, -3.514651070940853e+00, -3.514154754491909e+00, -3.514154754491909e+00, -7.304143974976658e-01, -7.301054945153443e-01, -7.255991221998297e-01, -7.305007349298300e-01, -7.288374472986310e-01, -7.288374472986310e-01, -2.400457488018100e-01, -2.408871904518268e-01, -8.402834333093784e-01, -2.079736293405083e-01, -2.202988349540048e-01, -2.202988349540048e-01, -8.520708115980050e-03, -9.006390313524786e-03, -6.038161199637797e-02, -4.740288132374669e-03, -6.040139545492392e-03, -6.040139545492381e-03, -5.230784713646385e+00, -5.232062352170129e+00, -5.230845443112179e+00, -5.231973249971819e+00, -5.231430635734590e+00, -5.231430635734590e+00, -2.088744483511090e+00, -2.098910409063148e+00, -2.088759294901810e+00, -2.097507663376219e+00, -2.094611065780116e+00, -2.094611065780116e+00, -6.299570519374521e-01, -6.750444643136753e-01, -5.871529952246087e-01, -6.005390164849318e-01, -6.382249724478584e-01, -6.382249724478584e-01, -1.599165983551007e-01, -2.609862475960812e-01, -1.489170848899526e-01, -1.972531384696834e+00, -1.780665526610462e-01, -1.780665526610462e-01, -3.609698910887525e-03, -4.628337724193968e-03, -3.493165952377769e-03, -1.009795767200618e-01, -4.245619626916931e-03, -4.245619626916936e-03, -6.291840258243170e-01, -6.228182748013253e-01, -6.245487137186929e-01, -6.263700616565088e-01, -6.254088272678002e-01, -6.254088272678002e-01, -6.143244323480076e-01, -5.454173455741029e-01, -5.604916453580004e-01, -5.771866794776066e-01, -5.683562561124875e-01, -5.683562561124875e-01, -7.063672158192282e-01, -3.048643100672086e-01, -3.372605705862091e-01, -3.977648807194646e-01, -3.630281225993987e-01, -3.630281225993987e-01, -5.055219956646803e-01, -5.754985684706132e-02, -8.082428841417191e-02, -3.780562971540932e-01, -1.268223923914313e-01, -1.268223923914314e-01, -1.240072219045566e-02, -1.183886790357137e-03, -2.531520704319195e-03, -1.196692387373032e-01, -3.913355464149917e-03, -3.913355464149919e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_147_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.856746352539033e+01, -2.856758632565422e+01, -2.856808751477081e+01, -2.856626131307069e+01, -2.856722461461842e+01, -2.856722461461842e+01, -4.574323804635164e+00, -4.574411560282532e+00, -4.576547464376510e+00, -4.573691733700747e+00, -4.574538561213092e+00, -4.574538561213092e+00, -8.633340417108255e-01, -8.611351901247752e-01, -8.018636535608840e-01, -8.101100895270784e-01, -8.099729390408926e-01, -8.099729390408926e-01, -2.146790908054116e-01, -2.177532995653650e-01, -1.013965854162388e+00, -1.922796613854442e-01, -1.952917960187966e-01, -1.952917960187962e-01, -1.160099488016480e-02, -1.227064014425123e-02, -8.092653434672600e-02, -6.411511708696151e-03, -8.191533747840147e-03, -8.191533747840143e-03, -7.060963831493957e+00, -7.063701239340594e+00, -7.061088150476169e+00, -7.063504992317411e+00, -7.062354199521470e+00, -7.062354199521470e+00, -2.239651304351844e+00, -2.269239450855952e+00, -2.196279504241591e+00, -2.222459703321140e+00, -2.276956075629129e+00, -2.276956075629129e+00, -7.946317997012163e-01, -8.955221863971298e-01, -7.325150446654899e-01, -7.881411168231210e-01, -8.104464207311954e-01, -8.104464207311954e-01, -1.754640905193935e-01, -2.241475445248965e-01, -1.674938398039101e-01, -2.652358928587277e+00, -1.788773011167597e-01, -1.788773011167597e-01, -4.869760992090203e-03, -6.258841084964752e-03, -4.713715834368997e-03, -1.255924568664569e-01, -5.738353150570840e-03, -5.738353150570938e-03, -8.392459030408185e-01, -8.260597134830105e-01, -8.319509923637354e-01, -8.361898243937727e-01, -8.341925355105313e-01, -8.341925355105313e-01, -8.154057478161901e-01, -6.450328044190531e-01, -6.940998660698013e-01, -7.392218845830880e-01, -7.162826064508557e-01, -7.162826064508557e-01, -9.358714044224530e-01, -2.581820273859942e-01, -3.110320666124325e-01, -4.580019119294801e-01, -3.785803328298704e-01, -3.785803328298704e-01, -5.948345535829669e-01, -7.748475663176749e-02, -1.052777928500973e-01, -4.527558105821819e-01, -1.469183974417914e-01, -1.469183974417902e-01, -1.695518050854478e-02, -1.585412329868657e-03, -3.405514964805559e-03, -1.413688833737866e-01, -5.285410852331750e-03, -5.285410852331651e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_147_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.011764918830163e-09, 1.011877832303906e-09, 1.012178242404443e-09, 1.010502392606101e-09, 1.011409219870126e-09, 1.011409219870126e-09, -1.397516288244303e-06, -1.396417528190896e-06, -1.370842776171976e-06, -1.414060261201246e-06, -1.396045444267797e-06, -1.396045444267797e-06, -3.457045314495598e-03, -3.496687279394184e-03, -4.561738654877683e-03, -4.385905594294910e-03, -4.399135053597131e-03, -4.399135053597131e-03, -7.542708501632019e-01, -7.328900207240391e-01, -1.707152178246422e-03, -1.155843740728532e+00, -1.052000988319052e+00, -1.052000988319054e+00, 1.991019225145285e+00, 1.997346772299283e+00, -1.418147926986122e+00, 2.666398935324664e+00, 2.970166540951367e+00, 2.970166541001036e+00, 4.402226846798692e-07, 4.473608616543776e-07, 4.405147211962268e-07, 4.468165308908748e-07, 4.438583962153632e-07, 4.438583962153632e-07, -6.070288790699116e-05, -5.808131924941201e-05, -6.405700702622755e-05, -6.168030179359241e-05, -5.762152733558553e-05, -5.762152733558553e-05, -4.645999428340583e-03, 1.227313406444166e-03, -6.892767712822615e-03, -1.952353109038175e-03, -4.164982440326494e-03, -4.164982440326494e-03, -1.392029414290019e+00, -5.558811889596993e-01, -1.517503963372928e+00, 5.041526098931112e-05, -1.564339167905805e+00, -1.564339167905805e+00, 3.948750695209537e+00, 3.174601316854449e+00, 2.244909517084344e+01, -2.037206354628172e+00, 9.657625428872304e+00, 9.657625429042898e+00, 1.130442106735247e-02, 1.846013106213929e-03, 4.671824107375704e-03, 7.632121777863037e-03, 6.092549023153277e-03, 6.092549023153277e-03, 1.299462419168954e-02, -1.216595772084004e-02, -8.858260779756259e-03, -6.365443661700732e-03, -7.663584766886214e-03, -7.663584766886214e-03, 6.191291315225574e-04, -3.045023011426022e-01, -1.740782332312920e-01, -5.259228610541612e-02, -1.004378182018903e-01, -1.004378182018905e-01, -1.726268123314871e-02, -1.253788498927384e+00, -1.583216851612846e+00, -5.970477327257621e-02, -2.235317233032632e+00, -2.235317233032667e+00, 1.019095146347739e+00, 2.290373419638509e+01, 9.412837775904052e+00, -2.257912527059780e+00, 1.262511179225798e+01, 1.262511179189509e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
