
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_407p_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407p", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.121103415040940e+01, -2.121109521419860e+01, -2.121138138148642e+01, -2.121047259066207e+01, -2.121094668410055e+01, -2.121094668410055e+01, -3.518397074388691e+00, -3.518397346819747e+00, -3.518489386764568e+00, -3.518986816458486e+00, -3.518481000061780e+00, -3.518481000061780e+00, -7.286224790390768e-01, -7.283712486919487e-01, -7.252330870522926e-01, -7.299904419385351e-01, -7.352383429348410e-01, -7.352383429348410e-01, -2.499923840253033e-01, -2.504267792958988e-01, -8.387892090158650e-01, -2.125612513085195e-01, -2.184326325056094e-01, -2.184326325056093e-01, 5.718942191893439e-03, 5.818991744228634e-03, -1.077705905371572e-02, 4.069755518290816e-03, -5.265204496145747e-03, -5.265204496145750e-03, -5.233384593407465e+00, -5.234543742623015e+00, -5.233440455375381e+00, -5.234463641136784e+00, -5.233970191544082e+00, -5.233970191544082e+00, -2.083769569587242e+00, -2.094166550098311e+00, -2.083203872246914e+00, -2.092140790799703e+00, -2.090127039191352e+00, -2.090127039191352e+00, -6.265156365976499e-01, -6.781652258676055e-01, -5.841039885915477e-01, -6.015910156434594e-01, -6.354492024870053e-01, -6.354492024870054e-01, -1.339415086955062e-01, -2.714489714563210e-01, -1.186948859505220e-01, -1.974294001005516e+00, -1.704876240093938e-01, -1.704876240093938e-01, 3.283213160306201e-03, 4.000463607971080e-03, 3.135691423051809e-03, -5.447298884306741e-02, 7.633731048165466e-04, 7.633731048165265e-04, -6.358312166437494e-01, -6.262807894198595e-01, -6.295266335151372e-01, -6.324118721692381e-01, -6.309589535908587e-01, -6.309589535908587e-01, -6.208235793010718e-01, -5.435338702646776e-01, -5.572558706946736e-01, -5.743688342293585e-01, -5.649162083755193e-01, -5.649162083755193e-01, -7.088074342310479e-01, -3.165250292224485e-01, -3.449411890164912e-01, -3.968186358895701e-01, -3.658341426373394e-01, -3.658341426373394e-01, -5.037950542290526e-01, -7.640837441363191e-03, -2.820966085445480e-02, -3.755993904589880e-01, -9.487437852232308e-02, -9.487437852232311e-02, 6.977550365161173e-03, 1.291105736091785e-03, 2.420078808440243e-03, -8.404094595900342e-02, 1.233538219288350e-03, 1.233538219288358e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_407p_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407p", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.844506012710060e+01, -2.844502655949440e+01, -2.844518508500605e+01, -2.844511719163014e+01, -2.844555822431643e+01, -2.844565975941706e+01, -2.844414930639929e+01, -2.844386186667530e+01, -2.844513868762844e+01, -2.844455890748499e+01, -2.844513868762844e+01, -2.844455890748499e+01, -4.575804857005815e+00, -4.576180983793970e+00, -4.575867151298282e+00, -4.576262451756067e+00, -4.577580781474918e+00, -4.578090391646501e+00, -4.575347784462346e+00, -4.575890427753517e+00, -4.574895459024335e+00, -4.577481317085542e+00, -4.574895459024335e+00, -4.577481317085542e+00, -8.463872679378726e-01, -8.565693451941498e-01, -8.428990895575493e-01, -8.554505292947893e-01, -7.969952043764463e-01, -7.772402543058357e-01, -7.925662469799890e-01, -7.990304161136496e-01, -8.776665636638813e-01, -6.805860429155154e-01, -8.776665636638813e-01, -6.805860429155154e-01, -2.137878575679516e-01, -2.058273144677502e-01, -2.124992783170316e-01, -2.066195782151766e-01, -9.732062209113639e-01, -1.032158938617963e+00, -2.541217758575159e-01, -2.443832175639507e-01, -1.336608915367136e-01, -7.471016781972596e-01, -1.336608915367139e-01, -7.471016781972619e-01, 1.186669825817020e-02, 2.244113913481872e-03, 1.291698097746509e-02, 1.541531650651860e-03, -3.340645186006009e-02, -5.517253301160308e-02, 4.255435268487235e-03, 5.906118341801689e-03, -1.680450277027228e-02, 4.512220470320479e-02, -1.680450277027225e-02, 4.512220470320413e-02, -7.027131558811114e+00, -7.025434352320414e+00, -7.029860795962460e+00, -7.028067250134264e+00, -7.027285252919288e+00, -7.025524139092253e+00, -7.029624021897402e+00, -7.027919410514715e+00, -7.028530872028468e+00, -7.026756620268532e+00, -7.028530872028468e+00, -7.026756620268532e+00, -2.264705259197358e+00, -2.264561963032462e+00, -2.295480748613829e+00, -2.294560717204752e+00, -2.211553795958624e+00, -2.227656567346836e+00, -2.238862615749034e+00, -2.254793052128555e+00, -2.320103183558354e+00, -2.285146829131891e+00, -2.320103183558354e+00, -2.285146829131891e+00, -7.914642609434333e-01, -7.898796456870812e-01, -9.168376388801049e-01, -9.177759785220417e-01, -7.115676842294619e-01, -7.396809450717287e-01, -7.982552865609603e-01, -8.191371889225055e-01, -8.279567061246279e-01, -7.895941160598871e-01, -8.279567061246275e-01, -7.895941160598872e-01, -2.614585228069092e-01, -2.501401438508342e-01, -2.556924890755927e-01, -2.521817291186828e-01, -2.555400477284187e-01, -2.248419032250188e-01, -2.665829737263663e+00, -2.664756319647696e+00, -3.165826657188164e-01, -2.076151973396628e-01, -3.165826657188164e-01, -2.076151973396628e-01, 5.730525997953395e-03, 2.731466599643242e-03, 5.719300292700681e-03, 4.269102365914618e-03, 6.267235850655714e-03, 1.957421386594065e-03, -1.420914964497192e-01, -1.454008510409069e-01, 2.058691093163251e-02, -6.837189569331599e-03, 2.058691093163269e-02, -6.837189569331516e-03, -8.448914641102124e-01, -8.473843260266177e-01, -8.459042024814054e-01, -8.489668711398440e-01, -8.488049642717808e-01, -8.515741659525875e-01, -8.483678643164845e-01, -8.509176099187236e-01, -8.489366665472976e-01, -8.515759659487739e-01, -8.489366665472976e-01, -8.515759659487739e-01, -8.205806750033391e-01, -8.228221809921397e-01, -6.296522511592443e-01, -6.330779829752812e-01, -6.841749375357076e-01, -6.879390385203713e-01, -7.442681017264832e-01, -7.470242983800344e-01, -7.124407524818295e-01, -7.151725849926523e-01, -7.124407524818295e-01, -7.151725849926523e-01, -9.567234703810636e-01, -9.591792746340974e-01, -2.531376723712110e-01, -2.515149167958858e-01, -2.864570156136231e-01, -2.895148036265453e-01, -4.402864404445356e-01, -4.428781362609624e-01, -3.556956344057420e-01, -3.565704478373444e-01, -3.556956344057426e-01, -3.565704478373464e-01, -5.778645386193992e-01, -5.832265639383810e-01, -3.665503669473329e-02, -3.950421253325048e-02, -8.227817381359698e-02, -9.083146598742695e-02, -4.372600930979108e-01, -4.444879626714586e-01, -2.360506369952195e-01, -1.814808646898330e-01, -2.360506369952201e-01, -1.814808646898329e-01, 1.135307196483176e-02, 3.840385538835476e-03, 1.717463586321912e-03, 1.653166634834151e-03, 5.013594419703445e-03, 1.503145826802064e-03, -1.957324134516495e-01, -1.919110846965066e-01, 1.760891942548504e-02, -5.465553653500756e-03, 1.760891942548497e-02, -5.465553653500739e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_407p_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407p", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.883087998602798e-10, 0.000000000000000e+00, 9.883277853581039e-10, 9.884810683613574e-10, 0.000000000000000e+00, 9.884514792866395e-10, 9.887788377328880e-10, 0.000000000000000e+00, 9.889560193252596e-10, 9.868572391849843e-10, 0.000000000000000e+00, 9.864846309162560e-10, 9.884397867570635e-10, 0.000000000000000e+00, 9.872770317184947e-10, 9.884397867570635e-10, 0.000000000000000e+00, 9.872770317184947e-10, -3.010885326720968e-06, 0.000000000000000e+00, -2.999727396368283e-06, -3.009567152378873e-06, 0.000000000000000e+00, -2.997714811387582e-06, -2.970432333855423e-06, 0.000000000000000e+00, -2.959106676440632e-06, -3.036026736109432e-06, 0.000000000000000e+00, -3.023316314335167e-06, -3.018269439573370e-06, 0.000000000000000e+00, -2.987720630409849e-06, -3.018269439573370e-06, 0.000000000000000e+00, -2.987720630409849e-06, -7.840927901971608e-03, 0.000000000000000e+00, -7.409642867390160e-03, -7.973579623242869e-03, 0.000000000000000e+00, -7.442559109616508e-03, -9.539361167754338e-03, 0.000000000000000e+00, -1.034789202543822e-02, -9.672900371807186e-03, 0.000000000000000e+00, -9.418722923427235e-03, -6.105818452869352e-03, 0.000000000000000e+00, -1.376797021286838e-02, -6.105818452869352e-03, 0.000000000000000e+00, -1.376797021286838e-02, -1.771049382336948e+00, 0.000000000000000e+00, -1.731669466008701e+00, -1.795116104029054e+00, 0.000000000000000e+00, -1.703125223548301e+00, -4.368702204145792e-03, 0.000000000000000e+00, -3.132622669539953e-03, -7.878838782833372e-01, 0.000000000000000e+00, -1.111862625356420e+00, -2.312999701476987e+00, 0.000000000000000e+00, 4.207991411026839e+01, -2.312999701476993e+00, 0.000000000000000e+00, 4.207991411026850e+01, 1.095075191174450e+02, 0.000000000000000e+00, 5.893540879226143e+01, 1.192381843622172e+02, 0.000000000000000e+00, 5.884102190160570e+01, 3.797328384202893e+01, 0.000000000000000e+00, 1.975728289512816e+01, 7.233857196039786e+01, 0.000000000000000e+00, 8.627334393027589e+01, -8.208787997142480e+00, 0.000000000000000e+00, 1.238734916298238e+03, -8.208787997061412e+00, 0.000000000000000e+00, 1.238734916300217e+03, 5.582657689422810e-07, 0.000000000000000e+00, 5.580428588340452e-07, 5.715543074284772e-07, 0.000000000000000e+00, 5.708645006276754e-07, 5.589481767131554e-07, 0.000000000000000e+00, 5.584287116097920e-07, 5.703283787124823e-07, 0.000000000000000e+00, 5.700982907664657e-07, 5.651161009712520e-07, 0.000000000000000e+00, 5.644763119457319e-07, 5.651161009712520e-07, 0.000000000000000e+00, 5.644763119457319e-07, -1.138334670146095e-04, 0.000000000000000e+00, -1.138630148415557e-04, -1.085346737608975e-04, 0.000000000000000e+00, -1.087082614918359e-04, -1.221790629266635e-04, 0.000000000000000e+00, -1.195576434600372e-04, -1.173333182871324e-04, 0.000000000000000e+00, -1.147699845141541e-04, -1.047657036011106e-04, 0.000000000000000e+00, -1.105388575402374e-04, -1.047657036011106e-04, 0.000000000000000e+00, -1.105388575402374e-04, -9.390065955660392e-03, 0.000000000000000e+00, -9.502682903119071e-03, 1.463689181820271e-02, 0.000000000000000e+00, 1.518961000669932e-02, -1.720465415827959e-02, 0.000000000000000e+00, -1.298139383783699e-02, 1.517096972402281e-02, 0.000000000000000e+00, 1.288033539891716e-02, -6.352290063195898e-03, 0.000000000000000e+00, -9.441363369507320e-03, -6.352290063195737e-03, 0.000000000000000e+00, -9.441363369507313e-03, 5.129966832178392e+00, 0.000000000000000e+00, 4.003930498059963e+00, -9.495979195314341e-01, 0.000000000000000e+00, -9.737738356826952e-01, 9.835125395807172e+00, 0.000000000000000e+00, 3.413176101328546e+00, 1.362379209593835e-04, 0.000000000000000e+00, 1.366545057864390e-04, 4.513441960905137e+00, 0.000000000000000e+00, -1.387553649118985e+00, 4.513441960905137e+00, 0.000000000000000e+00, -1.387553649118985e+00, 1.275024745743916e+02, 0.000000000000000e+00, 8.992899673958595e+01, 9.968182412337151e+01, 0.000000000000000e+00, 8.748541743229666e+01, 7.900256226372014e+02, 0.000000000000000e+00, 4.309986255802639e+02, 1.990642190119065e+01, 0.000000000000000e+00, 1.877755226499672e+01, 9.960230372656030e+02, 0.000000000000000e+00, 1.492128863242499e+01, 9.960230372633029e+02, 0.000000000000000e+00, 1.492128863222860e+01, 2.371309019182495e-02, 0.000000000000000e+00, 2.309367803104218e-02, 2.261924413183672e-02, 0.000000000000000e+00, 2.284856344541180e-02, 2.736169582697726e-02, 0.000000000000000e+00, 2.729886315176951e-02, 2.856349559958980e-02, 0.000000000000000e+00, 2.814799131843895e-02, 2.843552661262253e-02, 0.000000000000000e+00, 2.818432563082480e-02, 2.843552661262253e-02, 0.000000000000000e+00, 2.818432563082480e-02, 2.580741259819039e-02, 0.000000000000000e+00, 2.569185318534643e-02, -2.876524757695036e-02, 0.000000000000000e+00, -2.797225923539488e-02, -2.011625111785594e-02, 0.000000000000000e+00, -1.936686259041862e-02, -7.263242120691475e-03, 0.000000000000000e+00, -6.786276812329262e-03, -1.508313404444244e-02, 0.000000000000000e+00, -1.459185518692371e-02, -1.508313404444244e-02, 0.000000000000000e+00, -1.459185518692371e-02, 1.035211272435871e-02, 0.000000000000000e+00, 1.101863575937353e-02, -6.916999195544490e-01, 0.000000000000000e+00, -6.890500570242789e-01, -4.381184970107370e-01, 0.000000000000000e+00, -4.224976804071507e-01, -1.328593518847502e-01, 0.000000000000000e+00, -1.289489355484912e-01, -2.531782482091209e-01, 0.000000000000000e+00, -2.525995033655445e-01, -2.531782482091201e-01, 0.000000000000000e+00, -2.525995033655447e-01, -4.177358480187494e-02, 0.000000000000000e+00, -3.990676303145765e-02, 2.752448378713665e+01, 0.000000000000000e+00, 2.540118166552491e+01, 2.555146528722712e+01, 0.000000000000000e+00, 1.657284711451212e+01, -1.523868498554381e-01, 0.000000000000000e+00, -1.388740675285023e-01, 2.049155330856164e+01, 0.000000000000000e+00, 5.739766537123979e+00, 2.049155330856154e+01, 0.000000000000000e+00, 5.739766537123935e+00, 7.447325640725899e+01, 0.000000000000000e+00, 5.122207119340978e+01, 5.261410216970279e+02, 0.000000000000000e+00, 4.460408567890549e+02, 3.113143823481892e+02, 0.000000000000000e+00, 1.651330433233017e+02, 1.694248081855213e+01, 0.000000000000000e+00, 1.321339872615376e+01, 1.363287877272832e+03, 0.000000000000000e+00, 8.311115543837452e+01, 1.363287877272285e+03, 0.000000000000000e+00, 8.311115543841045e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
