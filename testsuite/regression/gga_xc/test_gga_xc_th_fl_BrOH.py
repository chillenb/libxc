
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.926377984146116e+01, 1.926400516949910e+01, 1.926517636972395e+01, 1.926148326638400e+01, 1.926389728455781e+01, 1.926389728455781e+01, -3.907557568880506e+00, -3.907565174311415e+00, -3.907923391495859e+00, -3.908074265346120e+00, -3.907576917894918e+00, -3.907576917894918e+00, -8.633622006296863e-01, -8.626833336382331e-01, -8.451116667460425e-01, -8.501634338372117e-01, -8.631145920731419e-01, -8.631145920731419e-01, -3.835565778681299e-01, -3.862063549680973e-01, -9.959272300000346e-01, -3.260897108910128e-01, -3.843524172964030e-01, -3.843524172964030e-01, -9.919335658009731e-02, -1.013651801464450e-01, -1.934031458902339e-01, -7.016481328170307e-02, -1.008705317527327e-01, -1.008705317527327e-01, -5.507593720516969e+00, -5.508323077650875e+00, -5.507670681084820e+00, -5.508237764166672e+00, -5.507964447922155e+00, -5.507964447922155e+00, -2.241306088487046e+00, -2.256673679763614e+00, -2.235094805882487e+00, -2.247087265074450e+00, -2.259752106314319e+00, -2.259752106314319e+00, -7.782925867776445e-01, -8.275438976879199e-01, -7.492544473464865e-01, -7.724478621917736e-01, -8.001936893151460e-01, -8.001936893151460e-01, -2.810410658046373e-01, -3.849835433045393e-01, -2.793278247662364e-01, -2.199508143736226e+00, -3.012356155139613e-01, -3.012356155139613e-01, -6.897590578538937e-02, -7.349066152391781e-02, -6.407248875403014e-02, -2.252549262075357e-01, -7.031565622817779e-02, -7.031565622817779e-02, -7.964569562979027e-01, -7.933146309237186e-01, -7.944409454498748e-01, -7.953099992139694e-01, -7.948750250493675e-01, -7.948750250493675e-01, -7.775851704284876e-01, -7.025666199755983e-01, -7.243870940879407e-01, -7.446619039569015e-01, -7.343258106690201e-01, -7.343258106690201e-01, -8.577893363575357e-01, -4.351323763234756e-01, -4.792119010360079e-01, -5.546960491876577e-01, -5.148921389496420e-01, -5.148921389496419e-01, -6.546418882607898e-01, -1.867338980234444e-01, -2.145344311184313e-01, -5.357444615664319e-01, -2.547717217056434e-01, -2.547717217056435e-01, -1.068168233185099e-01, -3.945989677120849e-02, -5.379031863310391e-02, -2.492435813262058e-01, -6.507712505486447e-02, -6.507712505486443e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([5.020693681376112e+01, 5.020738005972818e+01, 5.020968394071529e+01, 5.020241917600463e+01, 5.020716783776322e+01, 5.020716783776322e+01, -5.115518245965774e+00, -5.115527508214758e+00, -5.115963754838955e+00, -5.116147489015022e+00, -5.115541810087127e+00, -5.115541810087127e+00, -1.083820357276979e+00, -1.082893695709281e+00, -1.058921777678319e+00, -1.065810844303584e+00, -1.083482364225416e+00, -1.083482364225416e+00, -4.500125610880470e-01, -4.533038760967210e-01, -1.265367862361072e+00, -3.795265036334211e-01, -4.510007075177382e-01, -4.510007075177382e-01, -1.146481939733353e-01, -1.171413555998996e-01, -2.229105359453015e-01, -8.127834013241812e-02, -1.165735508864319e-01, -1.165735508864319e-01, -6.874720679043643e+00, -6.875398277598544e+00, -6.874792186121733e+00, -6.875319027102611e+00, -6.875065119066869e+00, -6.875065119066869e+00, -2.968255728633022e+00, -2.988917436244676e+00, -2.959901168644520e+00, -2.976029962951868e+00, -2.993054888505713e+00, -2.993054888505713e+00, -9.680381289072760e-01, -1.034982884695826e+00, -9.287018940579949e-01, -9.601120007336363e-01, -9.977744948260262e-01, -9.977744948260262e-01, -3.254721221977121e-01, -4.517845674077357e-01, -3.234364158870033e-01, -2.911996473857345e+00, -3.495762704670228e-01, -3.495762704670228e-01, -7.990928710960478e-02, -8.510699095693394e-02, -7.426052762439984e-02, -2.598564023026697e-01, -8.145202354925017e-02, -8.145202354925017e-02, -9.926970482037235e-01, -9.884284847244225e-01, -9.899583528793298e-01, -9.911388826024531e-01, -9.905479995296664e-01, -9.905479995296664e-01, -9.670785678957943e-01, -8.657059144580174e-01, -8.951070746892422e-01, -9.224908840016665e-01, -9.085231151092418e-01, -9.085231151092418e-01, -1.076214466248302e+00, -5.146949201467739e-01, -5.709386930142825e-01, -6.689915188812500e-01, -6.170374831431301e-01, -6.170374831431300e-01, -8.014221160914067e-01, -2.152099474610533e-01, -2.473867024105676e-01, -6.441902308672273e-01, -2.944086157881589e-01, -2.944086157881589e-01, -1.233981927772071e-01, -4.584132055729203e-02, -6.240211859634234e-02, -2.879107681022583e-01, -7.541819118662098e-02, -7.541819118662092e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
