
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hle16_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hle16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.638003831791030e+01, -2.638010614135132e+01, -2.638045012112223e+01, -2.637933868515989e+01, -2.638007373956798e+01, -2.638007373956798e+01, -4.326647395733279e+00, -4.326653581549250e+00, -4.327001745936563e+00, -4.327313327062585e+00, -4.326668860512440e+00, -4.326668860512440e+00, -8.612276374662843e-01, -8.608251067699526e-01, -8.548571565110471e-01, -8.603091253395730e-01, -8.610776693275712e-01, -8.610776693275712e-01, -2.771168245586247e-01, -2.772202638665923e-01, -1.016981048651864e+00, -2.550688829986674e-01, -2.770900029249282e-01, -2.770900029249282e-01, -2.620190471360758e-02, -2.753689069860114e-02, -1.194528197877024e-01, -1.198002396659622e-02, -2.722651791740633e-02, -2.722651791740633e-02, -6.472418611832090e+00, -6.473946398180355e+00, -6.472577480752488e+00, -6.473765344006748e+00, -6.473197581731550e+00, -6.473197581731550e+00, -2.521596725423102e+00, -2.534712062493965e+00, -2.520942806847242e+00, -2.531001420070857e+00, -2.531863059565860e+00, -2.531863059565860e+00, -7.400300081547305e-01, -8.064794196742248e-01, -7.033559685486054e-01, -7.337435398920202e-01, -7.674210652982100e-01, -7.674210652982100e-01, -2.271028016276711e-01, -3.187198619833110e-01, -2.213896723853186e-01, -2.417720401620088e+00, -2.368678621730584e-01, -2.368678621730584e-01, -1.153313027168930e-02, -1.328321734178979e-02, -9.793014792670722e-03, -1.587679597600102e-01, -1.203518340878276e-02, -1.203518340878275e-02, -7.729863946062779e-01, -7.635082787694261e-01, -7.664850511996431e-01, -7.690496374130705e-01, -7.677330556987904e-01, -7.677330556987904e-01, -7.501400785564584e-01, -6.491255171372892e-01, -6.719144841411236e-01, -6.966314422467722e-01, -6.835542295389259e-01, -6.835542295389259e-01, -8.443572036050360e-01, -3.614034839162198e-01, -3.931858401312086e-01, -4.610029746420525e-01, -4.213033350905580e-01, -4.213033350905580e-01, -5.885567855042366e-01, -1.117604125234885e-01, -1.473016769369210e-01, -4.312154970796307e-01, -1.902588484156571e-01, -1.902588484156570e-01, -3.109193959472264e-02, -3.438270092729163e-03, -6.680852358346372e-03, -1.807814744660533e-01, -1.013603980071575e-02, -1.013603980071571e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hle16_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hle16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.556030260442312e+01, -3.556042063915262e+01, -3.556096480394422e+01, -3.555903150372124e+01, -3.556036470501619e+01, -3.556036470501619e+01, -5.711525717564139e+00, -5.711598740686452e+00, -5.713835798779707e+00, -5.711183403068993e+00, -5.711587548498392e+00, -5.711587548498392e+00, -1.037044797134895e+00, -1.034069679611959e+00, -9.467953722189395e-01, -9.577870304663592e-01, -1.035970852429488e+00, -1.035970852429488e+00, -2.236639252617298e-01, -2.311220667073806e-01, -1.294238647411874e+00, -1.591805930950121e-01, -2.259235222783903e-01, -2.259235222783903e-01, -3.530557637222278e-02, -3.707502320931035e-02, -1.383181269569858e-01, -1.618513624033729e-02, -3.665634508925525e-02, -3.665634508925525e-02, -8.749370543190128e+00, -8.752146438506555e+00, -8.749657226271907e+00, -8.751815734137915e+00, -8.750792695127258e+00, -8.750792695127258e+00, -2.825334304498574e+00, -2.861239015018140e+00, -2.794349971866275e+00, -2.822610525667055e+00, -2.889136419034041e+00, -2.889136419034041e+00, -9.699631140095064e-01, -1.086609860955443e+00, -9.176734118176409e-01, -9.861084300226735e-01, -1.013026198366735e+00, -1.013026198366735e+00, -1.715827981136671e-01, -1.996285061296302e-01, -1.654581066214598e-01, -3.262716663396610e+00, -1.574902157789547e-01, -1.574902157789547e-01, -1.557835290987996e-02, -1.795133584808549e-02, -1.320944001524058e-02, -1.574822719798787e-01, -1.625374534027909e-02, -1.625374534027898e-02, -1.036406508139711e+00, -1.028544446058305e+00, -1.031682540524191e+00, -1.033758637581971e+00, -1.032749429451074e+00, -1.032749429451074e+00, -1.004178235233910e+00, -8.076064614568375e-01, -8.727221906382729e-01, -9.271330111839764e-01, -9.001476953961762e-01, -9.001476953961761e-01, -1.137662730746193e+00, -2.630954090099354e-01, -3.564520066353604e-01, -5.523241514115481e-01, -4.515655596994415e-01, -4.515655596994418e-01, -7.230174071202387e-01, -1.340658043427621e-01, -1.574882555792466e-01, -5.428298306782808e-01, -1.571262534324500e-01, -1.571262534324500e-01, -4.183961619945954e-02, -4.616743082180063e-03, -8.999334793031062e-03, -1.502271540502094e-01, -1.367678651906643e-02, -1.367678651906627e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hle16_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hle16", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.023366413838079e-09, 1.023450066053954e-09, 1.023681055582470e-09, 1.022313983202872e-09, 1.023411717879760e-09, 1.023411717879760e-09, -7.331354698404367e-07, -7.322193790118027e-07, -7.069000973818316e-07, -7.498002488126319e-07, -7.326501473232673e-07, -7.326501473232673e-07, -3.548841578313313e-03, -3.607819376001652e-03, -5.282544424809744e-03, -5.057631044943625e-03, -3.570116159779290e-03, -3.570116159779290e-03, -1.107495251219579e+00, -1.049746912943790e+00, -1.057792777787721e-03, -2.703302334159778e+00, -1.090191906862260e+00, -1.090191906862260e+00, -1.540875714347617e+01, -1.575473927231182e+01, -9.851222624265898e+00, -7.847398623078401e+00, -1.628548378331379e+01, -1.628548378331379e+01, 5.292239997197109e-07, 5.358342204561208e-07, 5.298821250612017e-07, 5.350221010513166e-07, 5.326369208655255e-07, 5.326369208655255e-07, -6.065993852825398e-05, -5.781239921473263e-05, -6.301857547338474e-05, -6.073794608976541e-05, -5.571395068561159e-05, -5.571395068561159e-05, -1.659217337901567e-03, 6.020988042242436e-03, -2.624649329877009e-03, 4.739923467495363e-03, -6.844824591898885e-04, -6.844824591898885e-04, -4.271798348648043e+00, -9.397298970771679e-01, -4.749080115849630e+00, 6.701929105461001e-05, -3.834722219687546e+00, -3.834722219687546e+00, -8.184557647895478e+00, -8.728782542757576e+00, -2.175949385281072e+01, -9.009550139818721e+00, -1.232700965324018e+01, -1.232700965329276e+01, 1.809692767854757e-02, 8.597721728373087e-03, 1.066997656933351e-02, 1.282019871362291e-02, 1.165294344681468e-02, 1.165294344681469e-02, 2.705215344087851e-02, -8.986076644292898e-03, -3.784172322905604e-03, 8.959686522494361e-04, -1.541295813354527e-03, -1.541295813354533e-03, 4.526245819171814e-03, -4.275180119704813e-01, -2.110843460678478e-01, -4.930419105281444e-02, -1.099136530245502e-01, -1.099136530245499e-01, -1.506415416126195e-02, -8.481435077230326e+00, -8.246558850983650e+00, -4.459956662501341e-02, -7.455663762921238e+00, -7.455663762921287e+00, -1.242433238299306e+01, -8.279530304085990e+00, -9.522597918451398e+00, -8.965445131829036e+00, -1.666752702845623e+01, -1.666752702857465e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
