
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.349652888935773e+01, -2.349652998181422e+01, -2.349665734415608e+01, -2.349663703602031e+01, -2.349652844157701e+01, -2.349652844157701e+01, -4.008347942066049e+00, -4.008276434880067e+00, -4.006476368902522e+00, -4.010420453024315e+00, -4.008328040493930e+00, -4.008328040493930e+00, -8.137311615701677e-01, -8.140727847401346e-01, -8.271015305367788e-01, -8.327427147597557e-01, -8.138490989065967e-01, -8.138490989065967e-01, -2.051755193814458e-01, -2.077351916102171e-01, -9.517025761664195e-01, -1.512465553590625e-01, -2.059424142172238e-01, -2.059424142172238e-01, -1.350273376361858e-02, -1.411228240053565e-02, -5.298259606336173e-02, -6.679606152369550e-03, -1.397222291245986e-02, -1.397222291245986e-02, -5.629662138208380e+00, -5.627685288368863e+00, -5.629469847820174e+00, -5.627932530992965e+00, -5.628633510871422e+00, -5.628633510871422e+00, -2.668842283186900e+00, -2.672362655765371e+00, -2.682860832904951e+00, -2.685366218218077e+00, -2.653696858188106e+00, -2.653696858188106e+00, -6.503846154326404e-01, -6.765670868416411e-01, -6.170592701597177e-01, -6.219488287670077e-01, -6.718973524570724e-01, -6.718973524570724e-01, -1.130353092210956e-01, -2.077582771865469e-01, -1.116412601472766e-01, -2.019625681289070e+00, -1.295974022717216e-01, -1.295974022717216e-01, -6.452095421593923e-03, -7.337553511622207e-03, -5.556422043080063e-03, -7.234125294222045e-02, -6.708753928638550e-03, -6.708753928638550e-03, -6.357646794741778e-01, -6.383643630075385e-01, -6.374415066008149e-01, -6.367186046139293e-01, -6.370802394714851e-01, -6.370802394714851e-01, -6.150458845881500e-01, -5.749518423923664e-01, -5.881672902257811e-01, -5.989811436828253e-01, -5.934534157816613e-01, -5.934534157816613e-01, -7.102946804657922e-01, -2.602920304622367e-01, -3.081805694895338e-01, -3.903699390562512e-01, -3.469945846954213e-01, -3.469945846954213e-01, -5.141119234814077e-01, -4.930831883712503e-02, -6.550302519185179e-02, -3.652622941012906e-01, -9.282285142940944e-02, -9.282285142940944e-02, -1.570389518108007e-02, -2.086278673715236e-03, -3.899879387807508e-03, -8.879466740318905e-02, -5.734349327122331e-03, -5.734349327122324e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.554843132048697e+01, -2.554856746983117e+01, -2.554911288542720e+01, -2.554688458953775e+01, -2.554850363912584e+01, -2.554850363912584e+01, -4.034053442117284e+00, -4.034168145571656e+00, -4.037481579396259e+00, -4.032611821977023e+00, -4.034129382056503e+00, -4.034129382056503e+00, -8.286418928136052e-01, -8.269440077158584e-01, -7.804195054842124e-01, -7.855218170839235e-01, -8.280281708373801e-01, -8.280281708373801e-01, -2.678320739406019e-01, -2.712087310149460e-01, -9.818736693462827e-01, -1.976590382118967e-01, -2.688451299386954e-01, -2.688451299386954e-01, -1.779028383173026e-02, -1.859008417924843e-02, -6.948621780905574e-02, -8.825136865530249e-03, -1.840632823086003e-02, -1.840632823086003e-02, -6.467951855124092e+00, -6.473048968582306e+00, -6.468467934045938e+00, -6.472431385466183e+00, -6.470574357017187e+00, -6.470574357017187e+00, -1.765865723518170e+00, -1.797703753704970e+00, -1.732552180792892e+00, -1.757714598936614e+00, -1.829737917201406e+00, -1.829737917201406e+00, -7.853693091949687e-01, -8.691471941227983e-01, -7.498012060729281e-01, -7.932746250161335e-01, -8.145711348214012e-01, -8.145711348214012e-01, -1.478964045763040e-01, -2.696312816279087e-01, -1.461156085953809e-01, -2.525797469604524e+00, -1.695315056290575e-01, -1.695315056290575e-01, -8.525660156772636e-03, -9.690953420058072e-03, -7.346186237612739e-03, -9.481354229932916e-02, -8.863510335052737e-03, -8.863510335052737e-03, -8.338178933601644e-01, -8.251925651317817e-01, -8.282683822079989e-01, -8.306566769996803e-01, -8.294606784782366e-01, -8.294606784782366e-01, -8.087939242502340e-01, -6.854866957992176e-01, -7.190929783568992e-01, -7.521131709124977e-01, -7.351656496952038e-01, -7.351656496952038e-01, -9.073895751180948e-01, -3.350513739720875e-01, -3.943488961651981e-01, -4.975057590505737e-01, -4.429974063546312e-01, -4.429974063546311e-01, -6.276640990111053e-01, -6.467548298043117e-02, -8.586144052187572e-02, -4.721771433593451e-01, -1.215994004725454e-01, -1.215994004725455e-01, -2.067780222650312e-02, -2.766680185435137e-03, -5.162333033626662e-03, -1.163518728687609e-01, -7.580556613498147e-03, -7.580556613498137e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.457024970462253e-08, -1.457010823848453e-08, -1.456937297014644e-08, -1.457169168258781e-08, -1.457017597084265e-08, -1.457017597084265e-08, -2.072492522972928e-05, -2.072475136940251e-05, -2.071656443704143e-05, -2.071311739184369e-05, -2.072448291414267e-05, -2.072448291414267e-05, -1.015914158946932e-02, -1.018676167645068e-02, -1.092524028455702e-02, -1.070827922928989e-02, -1.016920785474571e-02, -1.016920785474571e-02, -2.967538912784231e-02, -2.965795297400472e-02, -5.964807461309258e-03, -2.990960843420687e-02, -2.967022933565853e-02, -2.967022933565853e-02, -2.999999680698964e-02, -2.999999615639031e-02, -2.999895098535874e-02, -2.999999983087901e-02, -2.999999631412034e-02, -2.999999631412034e-02, -4.133105599519598e-06, -4.130166998725898e-06, -4.132795429805716e-06, -4.130510627030078e-06, -4.131611680933994e-06, -4.131611680933994e-06, -2.062188459082051e-04, -2.005460883079356e-04, -2.085686676257886e-04, -2.040614854708459e-04, -1.994333330279873e-04, -1.994333330279873e-04, -1.413736789048140e-02, -1.170886799054341e-02, -1.570943093078594e-02, -1.444639867579984e-02, -1.301702198290690e-02, -1.301702198290690e-02, -2.997360524767782e-02, -2.966609066098439e-02, -2.997493157383263e-02, -2.226988248776979e-04, -2.995284181123701e-02, -2.995284181123701e-02, -2.999999985353185e-02, -2.999999975014974e-02, -2.999999992115428e-02, -2.999603894951902e-02, -2.999999982779374e-02, -2.999999982779374e-02, -1.320377687432580e-02, -1.336225912943033e-02, -1.330530434659269e-02, -1.326147249653267e-02, -1.328339854622248e-02, -1.328339854622248e-02, -1.417455691278754e-02, -1.837910076203098e-02, -1.711641315303685e-02, -1.596571141489470e-02, -1.654876906531310e-02, -1.654876906531310e-02, -1.038787817485716e-02, -2.917814223383646e-02, -2.840796328686458e-02, -2.609364818287020e-02, -2.748232321313896e-02, -2.748232321313897e-02, -2.115017212748282e-02, -2.999922810030482e-02, -2.999740754995131e-02, -2.680227909122726e-02, -2.998853887524246e-02, -2.998853887524247e-02, -2.999999397580472e-02, -2.999999999859621e-02, -2.999999998171961e-02, -2.999050515255835e-02, -2.999999991016322e-02, -2.999999991016322e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
