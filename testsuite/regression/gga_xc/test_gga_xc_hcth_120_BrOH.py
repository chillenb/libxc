
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_120_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.120535608913081e+01, -2.120541090665942e+01, -2.120568800594392e+01, -2.120478972680759e+01, -2.120538472595448e+01, -2.120538472595448e+01, -3.519273281573942e+00, -3.519274788800499e+00, -3.519459762142724e+00, -3.519874386900748e+00, -3.519288759905752e+00, -3.519288759905752e+00, -7.289450026794274e-01, -7.287324052495263e-01, -7.265985062577370e-01, -7.309720549106523e-01, -7.288644542369305e-01, -7.288644542369305e-01, -2.400699951071296e-01, -2.410456662026724e-01, -8.523514541655007e-01, -2.008997676623008e-01, -2.403337653238898e-01, -2.403337653238898e-01, -1.186927875905871e-02, -1.250929409548378e-02, -6.456669859875237e-02, -5.272604906354887e-03, -1.236387986171276e-02, -1.236387986171276e-02, -5.236567794816511e+00, -5.237783392410850e+00, -5.236694201062629e+00, -5.237639325217342e+00, -5.237187379626286e+00, -5.237187379626286e+00, -2.091324448029448e+00, -2.101106444739454e+00, -2.092085463233000e+00, -2.099568915754052e+00, -2.097417351538169e+00, -2.097417351538169e+00, -6.219892899245072e-01, -6.665194405429129e-01, -5.927149512963189e-01, -6.093697123375554e-01, -6.429576090191762e-01, -6.429576090191762e-01, -1.571456851845107e-01, -2.633417943281960e-01, -1.545628418009954e-01, -1.970290105256821e+00, -1.769559344835221e-01, -1.769559344835221e-01, -5.072496783279823e-03, -5.860080455953105e-03, -4.301266463681059e-03, -9.515749766483490e-02, -5.301466410458117e-03, -5.301466410458118e-03, -6.369099697006211e-01, -6.311970413675876e-01, -6.329589935240059e-01, -6.345461092145410e-01, -6.337274377961473e-01, -6.337274377961473e-01, -6.177068659129664e-01, -5.528701036156989e-01, -5.675938778527925e-01, -5.827637954735227e-01, -5.747418507077545e-01, -5.747418507077545e-01, -6.976062244621846e-01, -3.083748490975335e-01, -3.412805493261575e-01, -3.988816760966354e-01, -3.667942368060437e-01, -3.667942368060436e-01, -5.036231062780416e-01, -5.878763235072634e-02, -8.412262156159557e-02, -3.720136568563613e-01, -1.267462223000120e-01, -1.267462223000120e-01, -1.419423421604470e-02, -1.498524033228638e-03, -2.917881098501019e-03, -1.204833751477194e-01, -4.452518629999531e-03, -4.452518629999497e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_120_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.861082927611825e+01, -2.861093495458732e+01, -2.861140505993275e+01, -2.860967446912870e+01, -2.861088501872672e+01, -2.861088501872672e+01, -4.576725666373477e+00, -4.576797153759662e+00, -4.578945166126879e+00, -4.576204075294381e+00, -4.576781835884964e+00, -4.576781835884964e+00, -8.461080114367474e-01, -8.439690883429287e-01, -7.821394186851373e-01, -7.903160708466000e-01, -8.453353795238114e-01, -8.453353795238114e-01, -2.323697583285236e-01, -2.361674612858586e-01, -1.045769621639321e+00, -1.987377318090560e-01, -2.335005238525442e-01, -2.335005238525442e-01, -1.655826943991345e-02, -1.748330442681214e-02, -9.351069260441662e-02, -7.193071778912319e-03, -1.727844964971750e-02, -1.727844964971750e-02, -7.061984391142393e+00, -7.064622915457077e+00, -7.062255650943238e+00, -7.064307359401869e+00, -7.063337907398578e+00, -7.063337907398578e+00, -2.231397352648828e+00, -2.260339728848396e+00, -2.205778995557018e+00, -2.228461797096097e+00, -2.283960680213502e+00, -2.283960680213502e+00, -7.831547459721715e-01, -8.851779763105097e-01, -7.415932803688445e-01, -7.994860657657686e-01, -8.172707884446899e-01, -8.172707884446899e-01, -1.908635478935639e-01, -2.364330325460951e-01, -1.862737496680372e-01, -2.647644870444513e+00, -1.923510883161503e-01, -1.923510883161503e-01, -6.915986938412957e-03, -8.012069111064170e-03, -5.860492001493340e-03, -1.332523443048355e-01, -7.241001878122595e-03, -7.241001878122552e-03, -8.470067324951409e-01, -8.391274572315693e-01, -8.432059606555399e-01, -8.454936914851535e-01, -8.444646804933255e-01, -8.444646804933255e-01, -8.200905497384687e-01, -6.599851647346532e-01, -7.060094821631644e-01, -7.482800515734360e-01, -7.265282483506367e-01, -7.265282483506368e-01, -9.257424324820412e-01, -2.769579968248019e-01, -3.341278816556763e-01, -4.609514380200134e-01, -3.941192251935426e-01, -3.941192251935428e-01, -5.941229608887133e-01, -8.511512789564421e-02, -1.199821414670423e-01, -4.453192318185121e-01, -1.632469193196379e-01, -1.632469193196381e-01, -1.987762370044203e-02, -2.012951282977212e-03, -3.946315051265934e-03, -1.559481226648032e-01, -6.066317825480352e-03, -6.066317825480330e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_120_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_120", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.371667949358952e-10, 9.372614716447730e-10, 9.375282454830779e-10, 9.359809069603991e-10, 9.372180249168448e-10, 9.372180249168448e-10, -1.489901254340197e-06, -1.489035402621802e-06, -1.464954012559459e-06, -1.504987038106518e-06, -1.489426977733645e-06, -1.489426977733645e-06, -3.829607891632168e-03, -3.867314608046211e-03, -4.936635079105373e-03, -4.756285954663341e-03, -3.843234761535494e-03, -3.843234761535494e-03, -6.467828820178076e-01, -6.249631225832964e-01, -1.488088314529677e-03, -1.042479550661442e+00, -6.404416648849415e-01, -6.404416648849415e-01, 1.285143601237854e+01, 1.269361130048179e+01, 1.807437428598583e+00, 1.085404983611204e+01, 1.322760443095072e+01, 1.322760443095072e+01, 4.076520003695128e-07, 4.144159463871793e-07, 4.083259636224946e-07, 4.135854344789971e-07, 4.111429486117850e-07, 4.111429486117850e-07, -6.192128993672699e-05, -5.933378712591215e-05, -6.387766090648550e-05, -6.181997995229550e-05, -5.763465324789576e-05, -5.763465324789576e-05, -5.206911784540824e-03, 1.509819213094908e-03, -6.784253437130473e-03, -2.014142102005615e-03, -4.139450333754314e-03, -4.139450333754314e-03, -6.955136012223038e-01, -4.762244387482292e-01, -8.163690013985657e-01, 4.702175196817754e-05, -1.092647255392004e+00, -1.092647255392004e+00, 1.158598460865804e+01, 1.133280264912631e+01, 3.403213469971738e+01, 4.663950884368361e-01, 1.701632492775531e+01, 1.701632492773408e+01, 7.869458450276074e-03, 2.695905854532762e-03, 4.693225063531465e-03, 6.254389273406521e-03, 5.488280392727692e-03, 5.488280392727694e-03, 9.576025400770204e-03, -1.137062186605214e-02, -8.556596639088808e-03, -5.967535545347308e-03, -7.411974909729002e-03, -7.411974909729003e-03, 9.239477072125357e-04, -2.581031419078434e-01, -1.472956465236236e-01, -5.277636908061623e-02, -9.007964184585818e-02, -9.007964184585816e-02, -1.786933062376973e-02, 1.805656018348794e+00, 8.471713705782211e-01, -6.768400250582213e-02, -6.587229095825656e-01, -6.587229095825877e-01, 9.174433352569860e+00, 2.291161017730674e+01, 1.853033770613513e+01, -7.238009124036305e-01, 2.552799563155842e+01, 2.552799563146469e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
