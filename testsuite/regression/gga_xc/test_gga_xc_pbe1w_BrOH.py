
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_pbe1w_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.102595090586520e+01, -2.102597532829501e+01, -2.102615997084465e+01, -2.102575853928236e+01, -2.102596315273992e+01, -2.102596315273992e+01, -3.533011739651949e+00, -3.532985469654205e+00, -3.532407448812080e+00, -3.534142207257128e+00, -3.533013058910080e+00, -3.533013058910080e+00, -7.348964056103234e-01, -7.347911489825364e-01, -7.341690550282781e-01, -7.386813178904225e-01, -7.348547909132133e-01, -7.348547909132133e-01, -2.338219549962997e-01, -2.352355233410453e-01, -8.556211546519629e-01, -1.906637454676621e-01, -2.342254928929243e-01, -2.342254928929243e-01, -1.852785920773143e-02, -1.938853692708999e-02, -7.488599456647983e-02, -8.996184797553064e-03, -1.918974560941472e-02, -1.918974560941472e-02, -5.108228574764888e+00, -5.107782302519585e+00, -5.108188863651129e+00, -5.107841749562026e+00, -5.107990974894642e+00, -5.107990974894642e+00, -2.154095229420657e+00, -2.163961950282755e+00, -2.155217303816077e+00, -2.162886144019411e+00, -2.159366631628203e+00, -2.159366631628203e+00, -6.193800537759743e-01, -6.542719529950349e-01, -5.908039722462027e-01, -6.019388057358882e-01, -6.390717507673992e-01, -6.390717507673992e-01, -1.525905253283716e-01, -2.510925731292341e-01, -1.499908804667729e-01, -1.889164098122617e+00, -1.687395992867355e-01, -1.687395992867355e-01, -8.682436375757318e-03, -9.905004929671120e-03, -7.449714428229347e-03, -1.010029055183219e-01, -9.035371781483708e-03, -9.035371781483708e-03, -6.209331357018818e-01, -6.199297408640916e-01, -6.202366989760996e-01, -6.205106020004620e-01, -6.203687184796896e-01, -6.203687184796896e-01, -6.020053815586309e-01, -5.538850328504129e-01, -5.661853094340482e-01, -5.784567416100562e-01, -5.719561970806737e-01, -5.719561970806737e-01, -6.844461913128995e-01, -2.990850128209636e-01, -3.367293048629978e-01, -3.984383882217734e-01, -3.651528653791435e-01, -3.651528653791434e-01, -5.043515882308672e-01, -6.987890551537487e-02, -9.229237433868935e-02, -3.714587234142332e-01, -1.263016662334839e-01, -1.263016662334839e-01, -2.165015215357156e-02, -2.748081171373929e-03, -5.191151970485641e-03, -1.205345724754805e-01, -7.694211193947667e-03, -7.694211193947657e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_pbe1w_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.528165042797969e+01, -2.528173797615269e+01, -2.528213519343851e+01, -2.528070143968105e+01, -2.528169654235125e+01, -2.528169654235125e+01, -4.148817906563178e+00, -4.148860382871517e+00, -4.150195132596138e+00, -4.148754291553320e+00, -4.148857003263563e+00, -4.148857003263563e+00, -8.287754275942600e-01, -8.274050582204570e-01, -7.927676403897270e-01, -7.992380143577230e-01, -8.282779081282817e-01, -8.282779081282817e-01, -2.449879183604945e-01, -2.481411385608307e-01, -1.000797699758498e+00, -1.957850856417440e-01, -2.459219100189009e-01, -2.459219100189009e-01, -2.449346265568948e-02, -2.561810555288982e-02, -9.408386019702421e-02, -1.194771075820395e-02, -2.535600715716793e-02, -2.535600715716793e-02, -6.327324503619243e+00, -6.330136320354090e+00, -6.327611600933424e+00, -6.329797946232181e+00, -6.328766796126958e+00, -6.328766796126958e+00, -2.264496248065707e+00, -2.282002209977588e+00, -2.255531080288619e+00, -2.269078827983983e+00, -2.288382301462705e+00, -2.288382301462705e+00, -7.595884979221975e-01, -8.471767753790810e-01, -7.215283967782345e-01, -7.720586531550013e-01, -7.910086201048309e-01, -7.910086201048309e-01, -1.687158231177172e-01, -2.527383956773128e-01, -1.649260825184228e-01, -2.445963419651588e+00, -1.781036906469722e-01, -1.781036906469722e-01, -1.153192762565141e-02, -1.315023940740378e-02, -9.894309884605530e-03, -1.210349053930838e-01, -1.199685138824149e-02, -1.199685138824148e-02, -8.120090428810827e-01, -8.041510428569932e-01, -8.071070107706432e-01, -8.092927866701243e-01, -8.082112707150166e-01, -8.082112707150166e-01, -7.879269034062724e-01, -6.473898582001848e-01, -6.888600548831648e-01, -7.283430045979511e-01, -7.083815328076766e-01, -7.083815328076766e-01, -8.849318579367385e-01, -3.033203675300793e-01, -3.544122173642199e-01, -4.614445193689496e-01, -4.030463170848753e-01, -4.030463170848752e-01, -5.865883625396047e-01, -8.878606915573767e-02, -1.132739666434676e-01, -4.467874806880497e-01, -1.428130357162687e-01, -1.428130357162687e-01, -2.859034657699131e-02, -3.656936424936614e-03, -6.902095610961791e-03, -1.362280245635482e-01, -1.021946160754422e-02, -1.021946160754420e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_pbe1w_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.909255888932189e-09, -6.909210857579990e-09, -6.908929413310155e-09, -6.909668415852264e-09, -6.909232814279676e-09, -6.909232814279676e-09, -8.717732691167705e-06, -8.717818931991430e-06, -8.718767759371827e-06, -8.709879551575221e-06, -8.717631576221892e-06, -8.717631576221892e-06, -4.811395740372290e-03, -4.823309054252682e-03, -5.053389374778361e-03, -4.922666456024998e-03, -4.815791098278413e-03, -4.815791098278413e-03, -4.913216828337069e-01, -4.801190152763957e-01, -2.484529923304393e-03, -8.499129913446949e-01, -4.881927303073288e-01, -4.881927303073288e-01, -5.103171617566950e+00, -5.115262830065872e+00, -2.093311253083475e+00, -3.626140869859875e+00, -5.313824876592597e+00, -5.313824876592597e+00, -1.869766119426160e-06, -1.868630209223582e-06, -1.869646148236299e-06, -1.868763139890653e-06, -1.869192189663357e-06, -1.869192189663357e-06, -6.890317439135367e-05, -6.754348796148902e-05, -6.891080361202041e-05, -6.785689281232106e-05, -6.793977396519205e-05, -6.793977396519205e-05, -7.995044345568653e-03, -4.394752981825787e-03, -9.774232453779168e-03, -6.894322454092171e-03, -6.828205499828226e-03, -6.828205499828226e-03, -1.072427876292659e+00, -3.349589616509983e-01, -1.220065302320569e+00, -7.512131242340342e-05, -1.096453132185411e+00, -1.096453132185411e+00, -3.846914684124021e+00, -3.853805561830652e+00, -1.102950697629787e+01, -2.003572489297260e+00, -5.691907528366238e+00, -5.691907528366031e+00, -4.109233480900641e-03, -5.237867819762801e-03, -4.872492130402848e-03, -4.561654153770099e-03, -4.720393731869300e-03, -4.720393731869300e-03, -4.421752844916294e-03, -1.407415502158518e-02, -1.170943706237847e-02, -9.312615160374555e-03, -1.055832295880384e-02, -1.055832295880384e-02, -3.781590801417677e-03, -1.826358538120706e-01, -1.159253095340223e-01, -5.330222717517983e-02, -8.095329843510310e-02, -8.095329843510314e-02, -2.064055450091132e-02, -1.780177081554366e+00, -1.749548451731386e+00, -6.470504014518026e-02, -1.848715351616151e+00, -1.848715351616153e+00, -3.832204244264441e+00, -6.636455387774173e+00, -5.712079935118317e+00, -2.261265332467193e+00, -8.313465441488093e+00, -8.313465441488692e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
