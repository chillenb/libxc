
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_407p_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.121103415039841e+01, -2.121109521415511e+01, -2.121138138137187e+01, -2.121047258980095e+01, -2.121094668012205e+01, -2.121094668012205e+01, -3.518397048911341e+00, -3.518397317965808e+00, -3.518489362180045e+00, -3.518986785174922e+00, -3.518480645230265e+00, -3.518480645230265e+00, -7.285994255015771e-01, -7.283368215198925e-01, -7.251638069203398e-01, -7.299829505285192e-01, -7.282819870003446e-01, -7.282819870003446e-01, -2.500188025529091e-01, -2.504436885861893e-01, -8.381146295675267e-01, -2.125527435256661e-01, -2.298955481709877e-01, -2.298955481709877e-01, 5.939368598438245e-03, 6.114373141967352e-03, -1.016389813706534e-02, 4.080182558070942e-03, 4.818913190424330e-03, 4.818913190424354e-03, -5.233384447053292e+00, -5.234543585686882e+00, -5.233440302004747e+00, -5.234463493709399e+00, -5.233970037441696e+00, -5.233970037441696e+00, -2.083769519507126e+00, -2.094166430511374e+00, -2.083190833482073e+00, -2.092128009120242e+00, -2.090063139770183e+00, -2.090063139770183e+00, -6.265130185012938e-01, -6.781650485807692e-01, -5.837954057879445e-01, -6.013334881295330e-01, -6.348147387811272e-01, -6.348147387811272e-01, -1.339514631528315e-01, -2.714493990734906e-01, -1.183989292533522e-01, -1.974293814893006e+00, -1.719365098646520e-01, -1.719365098646520e-01, 3.326521394184261e-03, 4.008643411609909e-03, 3.228484456953932e-03, -5.446186640648450e-02, 3.750659679111372e-03, 3.750659679111370e-03, -6.358276124311084e-01, -6.262765167577210e-01, -6.295226066340556e-01, -6.324081654946127e-01, -6.309551145020595e-01, -6.309551145020595e-01, -6.208210657705295e-01, -5.435297088839793e-01, -5.572507226167991e-01, -5.743657831439544e-01, -5.649130018709674e-01, -5.649130018709674e-01, -7.088069381689548e-01, -3.165254306743974e-01, -3.449334417184310e-01, -3.968143935294103e-01, -3.658304907828274e-01, -3.658304907828275e-01, -5.037800077985509e-01, -7.631270670602143e-03, -2.799086729617261e-02, -3.755569973056733e-01, -9.525597677608093e-02, -9.525597677608100e-02, 7.079404884687108e-03, 1.291151027282579e-03, 2.501041057213575e-03, -8.399719582992829e-02, 3.526943155658329e-03, 3.526943155658327e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_407p_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.844504334339471e+01, -2.844515113847556e+01, -2.844560899217806e+01, -2.844400558829986e+01, -2.844484880986836e+01, -2.844484880986836e+01, -4.575992985167132e+00, -4.576064874426267e+00, -4.577835657131669e+00, -4.575619194856654e+00, -4.576189076109709e+00, -4.576189076109709e+00, -8.515389205216343e-01, -8.492656264275978e-01, -7.872910853953375e-01, -7.958172359466782e-01, -7.957519002667659e-01, -7.957519002667659e-01, -2.090414627854278e-01, -2.087059003665886e-01, -1.004113333502509e+00, -2.491894062407726e-01, -2.203883751351691e-01, -2.203883751351690e-01, 6.898983985172420e-03, 7.019088715134858e-03, -4.479121424480636e-02, 5.073445079618787e-03, 5.856832691093475e-03, 5.856832691093405e-03, -7.026283057166052e+00, -7.028964145698142e+00, -7.026404810893205e+00, -7.028771819107337e+00, -7.027643865294068e+00, -7.027643865294068e+00, -2.264633773223106e+00, -2.295020992226112e+00, -2.219637274985287e+00, -2.246859948211040e+00, -2.302793258138788e+00, -2.302793258138788e+00, -7.906764514367011e-01, -9.173149876398671e-01, -7.258938909179936e-01, -8.088112215322422e-01, -8.091754056495625e-01, -8.091754056495625e-01, -2.557820670413674e-01, -2.539234781913403e-01, -2.400352432895215e-01, -2.665293162900183e+00, -2.581347749296373e-01, -2.581347749296373e-01, 4.200882983847243e-03, 4.988471985656617e-03, 4.047061450626086e-03, -1.437540999425568e-01, 4.663277128125307e-03, 4.663277128125206e-03, -8.461387696518887e-01, -8.474420547236464e-01, -8.501954477772087e-01, -8.496459926205946e-01, -8.502608450477454e-01, -8.502608450477454e-01, -8.217032304927624e-01, -6.313706885056217e-01, -6.860625357379178e-01, -7.456490735328822e-01, -7.138095247484698e-01, -7.138095247484698e-01, -9.579733894945137e-01, -2.523075998525134e-01, -2.879571879229587e-01, -4.415869367160971e-01, -3.561385678658120e-01, -3.561385678658121e-01, -5.805716930538281e-01, -3.808746746845348e-02, -8.677244512256660e-02, -4.409278747118762e-01, -2.088745540700239e-01, -2.088745540700226e-01, 7.523056679026029e-03, 1.685235618102478e-03, 3.202015049307549e-03, -1.938308090680600e-01, 4.403883595748641e-03, 4.403883595748744e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_407p_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407p", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.941591465237461e-10, 4.942331372746738e-10, 4.944337146537983e-10, 4.933354701749311e-10, 4.939292182398793e-10, 4.939292182398793e-10, -1.502653698571315e-06, -1.501821089615374e-06, -1.482384886079867e-06, -1.514836037600430e-06, -1.501489886444437e-06, -1.501489886444437e-06, -3.811813469451223e-03, -3.852785764548721e-03, -4.969549202814544e-03, -4.772684386381437e-03, -4.789771735011540e-03, -4.789771735011540e-03, -8.810031912638439e-01, -8.796382190036186e-01, -1.852881190583227e-03, -4.782466588069905e-01, -9.090710737652452e-01, -9.090710737652418e-01, 4.080937679990130e+01, 4.278926032320848e+01, 1.402588586059279e+01, 3.959123498074987e+01, 4.908190042798572e+01, 4.908190042796877e+01, 2.790772162960350e-07, 2.856048600193788e-07, 2.793443449471276e-07, 2.851067302074581e-07, 2.823982503368611e-07, 2.823982503368611e-07, -5.692410870057124e-05, -5.431069763199497e-05, -6.043240182685551e-05, -5.802386845141243e-05, -5.381375533617734e-05, -5.381375533617734e-05, -4.722755530359628e-03, 7.458382828063803e-03, -7.472480203937861e-03, 6.949940449586679e-03, -3.868022597852647e-03, -3.868022597852647e-03, 2.279483322349605e+00, -4.809669495316147e-01, 3.144639900798572e+00, 6.822298400802159e-05, 6.282685878153542e-01, 6.282685878153542e-01, 5.340005549512631e+01, 4.669433086613960e+01, 3.000034928159034e+02, 9.666585060714075e+00, 1.374216638549334e+02, 1.374216638552560e+02, 1.169967564639498e-02, 1.136916295762793e-02, 1.366735963754357e-02, 1.417843973605368e-02, 1.415644031122606e-02, 1.415644031122606e-02, 1.287611616269558e-02, -1.418265205210968e-02, -9.869354439212255e-03, -3.511412195793905e-03, -7.417784129528157e-03, -7.417784129528157e-03, 5.346807740911311e-03, -3.452243116242220e-01, -2.151490590088749e-01, -6.544167148687813e-02, -1.264442956981127e-01, -1.264442956981136e-01, -2.041276432724581e-02, 1.322559044662805e+01, 1.042240572495134e+01, -7.271494031340063e-02, 6.353728375386192e+00, 6.353728375386171e+00, 3.113280594036856e+01, 2.497870239948046e+02, 1.161895398562475e+02, 7.507461676041064e+00, 1.747748369454728e+02, 1.747748369451583e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
