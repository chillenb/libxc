
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_p76_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.222025852853078e+01, -2.222032860063550e+01, -2.222064783052965e+01, -2.221960516075584e+01, -2.222015039618595e+01, -2.222015039618595e+01, -3.428028892959382e+00, -3.428036610956469e+00, -3.428304804575903e+00, -3.428524754075155e+00, -3.428125371815901e+00, -3.428125371815901e+00, -5.754351755423465e-01, -5.751687794054652e-01, -5.720038176363407e-01, -5.765157285407025e-01, -5.838609389892002e-01, -5.838609389892002e-01, -1.462515947345558e-01, -1.460920848266051e-01, -6.823376799220866e-01, -1.393838830876578e-01, -1.496063751589481e-01, -1.496063751589481e-01, -1.959760348785652e-02, -2.054397555404133e-02, -9.034031894912055e-02, -1.154744633372251e-02, -8.368982385136265e-03, -8.368982385136297e-03, -5.254933363930019e+00, -5.256472681828491e+00, -5.255005370284494e+00, -5.256364185557351e+00, -5.255712351755975e+00, -5.255712351755975e+00, -1.926999052694295e+00, -1.937741212783892e+00, -1.926157241285945e+00, -1.935366806213035e+00, -1.933732550481347e+00, -1.933732550481347e+00, -4.819603718934636e-01, -5.415440696968237e-01, -4.408839532415104e-01, -4.659171238730863e-01, -4.915977078321268e-01, -4.915977078321269e-01, -1.412296892304689e-01, -1.744285154367660e-01, -1.374320870062242e-01, -1.854286590804825e+00, -1.310197583745842e-01, -1.310197583745842e-01, -8.909769790614908e-03, -1.129146867684180e-02, -8.586718033995057e-03, -1.161472728960856e-01, -8.579966461763540e-03, -8.579966461763533e-03, -5.087723988807810e-01, -4.917634494805729e-01, -4.966009217232343e-01, -5.014520893761371e-01, -4.989166950101792e-01, -4.989166950101792e-01, -4.992782930981470e-01, -4.007228871479377e-01, -4.150770726888480e-01, -4.356510973490654e-01, -4.241310250626347e-01, -4.241310250626347e-01, -5.706868326056207e-01, -2.024644316663913e-01, -2.242442083543131e-01, -2.674329769561020e-01, -2.415397029588067e-01, -2.415397029588068e-01, -3.640046750539758e-01, -8.830227138389236e-02, -1.075373596848060e-01, -2.485762795596688e-01, -1.207925616344702e-01, -1.207925616344703e-01, -2.733944739649605e-02, -3.018240918813130e-03, -6.307442511114206e-03, -1.190772491121841e-01, -8.226340669851995e-03, -8.226340669851966e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_p76_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.037944492834717e+01, -3.037940787762589e+01, -3.037957799868582e+01, -3.037950493302370e+01, -3.037997958139418e+01, -3.038008518894476e+01, -3.037847207814311e+01, -3.037816954052374e+01, -3.037952004724590e+01, -3.037892115313990e+01, -3.037952004724590e+01, -3.037892115313990e+01, -4.628157514222885e+00, -4.628542620508633e+00, -4.628233726854856e+00, -4.628637939327021e+00, -4.630266232734209e+00, -4.630801404212268e+00, -4.627520292963276e+00, -4.628089567615054e+00, -4.627157603064429e+00, -4.629981092118896e+00, -4.627157603064429e+00, -4.629981092118896e+00, -6.931061031041852e-01, -7.064333271079175e-01, -6.888334382253442e-01, -7.052892175049196e-01, -6.415963989835951e-01, -6.158537512163703e-01, -6.331978898379401e-01, -6.416386236551712e-01, -7.455102275916868e-01, -4.945760400728140e-01, -7.455102275916868e-01, -4.945760400728140e-01, -9.511249134636328e-02, -8.622942100847494e-02, -1.001153683407834e-01, -9.213932932367222e-02, -8.171255765476266e-01, -8.914182680743830e-01, -1.652660707225391e-02, -1.763181821155626e-02, -1.297412895332674e-02, 1.706502909081116e-01, -1.297412895332667e-02, 1.706502909081165e-01, -2.871342500763442e-02, -2.309467410419127e-02, -3.047640890563004e-02, -2.387262446408932e-02, -9.075182913101469e-02, -9.068327384897500e-02, -1.480802826425448e-02, -1.580803327579731e-02, -5.554455626580411e-03, -4.273989300622053e-02, -5.554455626580472e-03, -4.273989300622039e-02, -7.253957321400091e+00, -7.252128827685996e+00, -7.256620981244655e+00, -7.254713544912432e+00, -7.254104415443035e+00, -7.252222283728816e+00, -7.256397861286747e+00, -7.254562569108874e+00, -7.255319872585071e+00, -7.253430264630497e+00, -7.255319872585071e+00, -7.253430264630497e+00, -2.126587979452107e+00, -2.126419647995208e+00, -2.159760652821038e+00, -2.158669618581478e+00, -2.067575780990124e+00, -2.087018525157677e+00, -2.096791337921237e+00, -2.116061252130673e+00, -2.189215340479049e+00, -2.146665853346100e+00, -2.189215340479049e+00, -2.146665853346100e+00, -6.611411432410566e-01, -6.591623951320295e-01, -7.901179696613382e-01, -7.909782710946917e-01, -5.762757327812763e-01, -6.088117471292589e-01, -6.684114196484862e-01, -6.919930574845456e-01, -7.016654906580019e-01, -6.580720178119026e-01, -7.016654906580020e-01, -6.580720178119029e-01, -2.497052637918211e-02, -3.252310279450434e-02, -5.738112713672913e-02, -5.624869017550202e-02, -1.522033656694852e-02, -5.351545436015499e-02, -2.600425016345714e+00, -2.599243559075072e+00, 6.773427101420983e-03, -9.708823284483856e-04, 6.773427101420983e-03, -9.708823284483856e-04, -1.280829333832685e-02, -1.096644852024817e-02, -1.540732785216478e-02, -1.452449482947379e-02, -1.279564722170947e-02, -1.016848633225274e-02, -6.819606038076248e-02, -6.874240862814385e-02, -2.346558388919918e-02, -6.803211167217903e-03, -2.346558388919997e-02, -6.803211167218327e-03, -7.325590553212558e-01, -7.353470963609393e-01, -7.196689118599191e-01, -7.229587363007435e-01, -7.263798869897714e-01, -7.295643399688112e-01, -7.306474900262320e-01, -7.336469765911141e-01, -7.287286436621551e-01, -7.318184921594447e-01, -7.287286436621551e-01, -7.318184921594447e-01, -7.063882933720438e-01, -7.088054516643718e-01, -4.828964512730150e-01, -4.874483947242141e-01, -5.494492356468822e-01, -5.538307438287619e-01, -6.174600611709239e-01, -6.202596966774968e-01, -5.832992471426200e-01, -5.863149359134417e-01, -5.832992471426200e-01, -5.863149359134417e-01, -8.293074639977792e-01, -8.315314821116483e-01, -1.138315607688526e-01, -1.123115486465682e-01, -1.695690909817230e-01, -1.718654511431938e-01, -3.005427992111812e-01, -3.041878005023750e-01, -2.253785827976292e-01, -2.264586673442245e-01, -2.253785827976292e-01, -2.264586673442249e-01, -4.319815539591637e-01, -4.392102345422642e-01, -9.145648222571996e-02, -9.120546253775404e-02, -8.780862603145978e-02, -9.556217206150927e-02, -3.045972833193714e-01, -3.142336451590613e-01, -3.195725508038156e-03, -5.013633821817642e-02, -3.195725508039146e-03, -5.013633821817801e-02, -3.755586228432400e-02, -3.333998765558895e-02, -4.050112725993655e-03, -4.010297593566468e-03, -9.586344941031413e-03, -7.408950189118536e-03, -3.274356680220758e-02, -4.255236158494984e-02, -2.081951019528454e-02, -6.743413701085168e-03, -2.081951019528400e-02, -6.743413701084914e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_p76_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.311168179049595e-09, 0.000000000000000e+00, 3.311202211497311e-09, 3.311353023520852e-09, 0.000000000000000e+00, 3.311338564634242e-09, 3.311640282085113e-09, 0.000000000000000e+00, 3.311824753434423e-09, 3.309531816978533e-09, 0.000000000000000e+00, 3.309167555807625e-09, 3.311264063525531e-09, 0.000000000000000e+00, 3.310025627754001e-09, 3.311264063525531e-09, 0.000000000000000e+00, 3.310025627754001e-09, -3.462453640228737e-08, 0.000000000000000e+00, -2.081389919550222e-08, -3.268634823774821e-08, 0.000000000000000e+00, -1.800037357441844e-08, 2.293375477653950e-08, 0.000000000000000e+00, 3.639004846361168e-08, -7.324731734998278e-08, 0.000000000000000e+00, -5.795597908896768e-08, -4.056212363894902e-08, 0.000000000000000e+00, -9.156385363487462e-09, -4.056212363894902e-08, 0.000000000000000e+00, -9.156385363487462e-09, -7.126898667951104e-03, 0.000000000000000e+00, -6.525904447534663e-03, -7.309771887107552e-03, 0.000000000000000e+00, -6.569075514407469e-03, -9.084401975285991e-03, 0.000000000000000e+00, -1.018393512363047e-02, -9.411687471666126e-03, 0.000000000000000e+00, -9.063606353808254e-03, -4.353322429234927e-03, 0.000000000000000e+00, -1.459788292028313e-02, -4.353322429234927e-03, 0.000000000000000e+00, -1.459788292028313e-02, -1.754294807756379e+00, 0.000000000000000e+00, -1.763303154291115e+00, -1.669605651835639e+00, 0.000000000000000e+00, -1.655150358085933e+00, -3.930273656010386e-03, 0.000000000000000e+00, -2.384259632189230e-03, -5.029361509772992e+00, 0.000000000000000e+00, -4.843966759338057e+00, -2.738063721542077e+00, 0.000000000000000e+00, -2.069711132544691e+01, -2.738063721542077e+00, 0.000000000000000e+00, -2.069711132544710e+01, -1.308265549809357e+02, 0.000000000000000e+00, -6.549167568941948e+01, -1.428364660713971e+02, 0.000000000000000e+00, -6.476724618892891e+01, -4.486282954124746e+01, 0.000000000000000e+00, -2.309206811473756e+01, -8.359701665699977e+01, 0.000000000000000e+00, -1.019384880816615e+02, 2.163801596350443e+01, 0.000000000000000e+00, -1.577484884940858e+03, 2.163801596339092e+01, 0.000000000000000e+00, -1.577484884947766e+03, 1.437627665749802e-06, 0.000000000000000e+00, 1.438469545859142e-06, 1.452685244496620e-06, 0.000000000000000e+00, 1.453115565544417e-06, 1.438362491265814e-06, 0.000000000000000e+00, 1.438940681297103e-06, 1.451341123493927e-06, 0.000000000000000e+00, 1.452185124804431e-06, 1.445378264747166e-06, 0.000000000000000e+00, 1.445844365844379e-06, 1.445378264747166e-06, 0.000000000000000e+00, 1.445844365844379e-06, -1.125914774180026e-04, 0.000000000000000e+00, -1.126234845586023e-04, -1.069101618787009e-04, 0.000000000000000e+00, -1.071043648914037e-04, -1.221315281751681e-04, 0.000000000000000e+00, -1.188668429543289e-04, -1.169690855608197e-04, 0.000000000000000e+00, -1.137777784162785e-04, -1.021309950174598e-04, 0.000000000000000e+00, -1.093518433924987e-04, -1.021309950174598e-04, 0.000000000000000e+00, -1.093518433924987e-04, -2.956440676631045e-03, 0.000000000000000e+00, -2.987905222710250e-03, 2.557940698942588e-02, 0.000000000000000e+00, 2.632394097937202e-02, -9.335121352208112e-03, 0.000000000000000e+00, -6.058686613962513e-03, 3.108585013236405e-02, 0.000000000000000e+00, 2.533869877269103e-02, -3.247387662713173e-04, 0.000000000000000e+00, -1.472136021809273e-03, -3.247387662713020e-04, 0.000000000000000e+00, -1.472136021809278e-03, -1.137009612111410e+01, 0.000000000000000e+00, -1.077401115421208e+01, -1.745545435912988e+00, 0.000000000000000e+00, -1.738360182819329e+00, -1.601738665898558e+01, 0.000000000000000e+00, -1.090931772795627e+01, 2.274531907819440e-04, 0.000000000000000e+00, 2.282343519824061e-04, -9.786947159594680e+00, 0.000000000000000e+00, -9.568629841456389e+00, -9.786947159594680e+00, 0.000000000000000e+00, -9.568629841456389e+00, -1.510331919009973e+02, 0.000000000000000e+00, -1.042252630930856e+02, -1.169266460058681e+02, 0.000000000000000e+00, -1.020544181106099e+02, -9.543675529728650e+02, 0.000000000000000e+00, -4.813492792991879e+02, -2.788308815664015e+01, 0.000000000000000e+00, -2.634623900422750e+01, -1.256402900683380e+03, 0.000000000000000e+00, 1.459920853662129e+01, -1.256402900671670e+03, 0.000000000000000e+00, 1.459920853700846e+01, 8.511813118848861e-02, 0.000000000000000e+00, 8.447323582161699e-02, 3.978376478501542e-02, 0.000000000000000e+00, 3.980450706560800e-02, 5.192142736015305e-02, 0.000000000000000e+00, 5.190675166998455e-02, 6.500419802521155e-02, 0.000000000000000e+00, 6.464279498248263e-02, 5.809610900713650e-02, 0.000000000000000e+00, 5.792468337957201e-02, 5.809610900713650e-02, 0.000000000000000e+00, 5.792468337957201e-02, 1.208440617027100e-01, 0.000000000000000e+00, 1.190674707105109e-01, -2.579210263070558e-02, 0.000000000000000e+00, -2.483465437736468e-02, -1.208421843251438e-02, 0.000000000000000e+00, -1.139741302105595e-02, 6.202497935497785e-03, 0.000000000000000e+00, 6.313372723909232e-03, -3.942976560150952e-03, 0.000000000000000e+00, -3.675286355043831e-03, -3.942976560150952e-03, 0.000000000000000e+00, -3.675286355043831e-03, 1.837538821938909e-02, 0.000000000000000e+00, 1.908793406527923e-02, -7.350935152084497e-01, 0.000000000000000e+00, -7.332403222950320e-01, -3.883566998256903e-01, 0.000000000000000e+00, -3.770154710709254e-01, -1.263437269634793e-01, 0.000000000000000e+00, -1.216181533705556e-01, -2.359473590687051e-01, 0.000000000000000e+00, -2.347433760146355e-01, -2.359473590687053e-01, 0.000000000000000e+00, -2.347433760146356e-01, -3.814500062102242e-02, 0.000000000000000e+00, -3.581983065454546e-02, -3.212004122539756e+01, 0.000000000000000e+00, -2.955504542236815e+01, -3.106474173502021e+01, 0.000000000000000e+00, -2.102657562664659e+01, -1.266101228798350e-01, 0.000000000000000e+00, -1.115779369143135e-01, -2.845696211032059e+01, 0.000000000000000e+00, -1.949108650192152e+01, -2.845696211032028e+01, 0.000000000000000e+00, -1.949108650192131e+01, -8.777782986583394e+01, 0.000000000000000e+00, -5.758616854476193e+01, -6.386997416873887e+02, 0.000000000000000e+00, -5.009864550408859e+02, -3.766265856294494e+02, 0.000000000000000e+00, -1.852775896775563e+02, -2.728508202877862e+01, 0.000000000000000e+00, -2.377499389828448e+01, -1.695708813857800e+03, 0.000000000000000e+00, -7.240407192194341e+01, -1.695708813857079e+03, 0.000000000000000e+00, -7.240407192221194e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
