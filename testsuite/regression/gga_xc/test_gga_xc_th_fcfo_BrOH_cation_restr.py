
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fcfo_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fcfo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.985807437482622e+01, -2.985713317142926e+01, -2.985493783642368e+01, -2.986889931380884e+01, -2.986130136467390e+01, -2.986130136467390e+01, -3.815719700444957e+00, -3.815743127930609e+00, -3.816374942200486e+00, -3.815967371159207e+00, -3.815835308383038e+00, -3.815835308383038e+00, -8.980271356682881e-01, -8.978250275763757e-01, -8.959729745709129e-01, -9.004841876162933e-01, -8.988462045011664e-01, -8.988462045011664e-01, -4.397385444307717e-01, -4.395493730738994e-01, -1.002311467683220e+00, -4.229018736762687e-01, -4.261581387799934e-01, -4.261581387799934e-01, -2.036416838165778e-01, -2.075493750435330e-01, -3.473549399606871e-01, -1.457470982252276e-01, -1.722326837943618e-01, -1.722326837943618e-01, -5.620220989946334e+00, -5.621966191962575e+00, -5.620300728371881e+00, -5.621841433394611e+00, -5.621106137802458e+00, -5.621106137802458e+00, -2.248425210345977e+00, -2.259925384807466e+00, -2.245931639528584e+00, -2.255801900043934e+00, -2.256283591638933e+00, -2.256283591638933e+00, -7.980573008092724e-01, -8.402057478080933e-01, -7.577409411480386e-01, -7.671660656050351e-01, -8.055768381375931e-01, -8.055768381375931e-01, -4.080527762235781e-01, -4.737644007448852e-01, -4.001850351890444e-01, -2.215357260555734e+00, -4.014808452244379e-01, -4.014808452244379e-01, -1.193213529897657e-01, -1.451855989217695e-01, -1.273574424556788e-01, -3.644828326666926e-01, -1.421297469326688e-01, -1.421297469326688e-01, -7.922124868585451e-01, -7.883145755242436e-01, -7.893857802303145e-01, -7.904701607292446e-01, -7.898996409226050e-01, -7.898996409226050e-01, -7.764098454143538e-01, -7.223239310672832e-01, -7.327849218523295e-01, -7.458539970381267e-01, -7.386585962693345e-01, -7.386585962693345e-01, -8.713906687114880e-01, -5.101339930446962e-01, -5.356152647643395e-01, -5.825923916146623e-01, -5.550638045692117e-01, -5.550638045692117e-01, -6.846685111356454e-01, -3.496293979319899e-01, -3.659059543949010e-01, -5.591709798736160e-01, -3.688260487800219e-01, -3.688260487800218e-01, -2.378320469658777e-01, -4.244494938276899e-02, -9.712184319088234e-02, -3.659311540988587e-01, -1.360261736977454e-01, -1.360261736977453e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fcfo_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fcfo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.726604458545526e+01, 4.726685905820969e+01, 4.727036887819679e+01, 4.725825333352250e+01, 4.726461746126557e+01, 4.726461746126557e+01, -5.229493442854796e+00, -5.229562789452734e+00, -5.231291755480602e+00, -5.229273710390304e+00, -5.229702240544611e+00, -5.229702240544611e+00, -1.004633222491249e+00, -1.002422071101541e+00, -9.455017951398184e-01, -9.535301729038165e-01, -9.532830007324319e-01, -9.532830007324319e-01, -3.674896479571876e-01, -3.723202610554656e-01, -1.157853161109357e+00, -3.028186514222950e-01, -3.291214331384031e-01, -3.291214331384030e-01, -1.888200753267402e-01, -1.826241166054702e-01, -1.726890534862589e-01, -2.424063557452195e-01, -2.019073278984834e-01, -2.019073278984831e-01, -7.532877532316596e+00, -7.532472887537591e+00, -7.532869535192830e+00, -7.532512325578878e+00, -7.532668184982446e+00, -7.532668184982446e+00, -2.529892581579591e+00, -2.563718216462176e+00, -2.481658280326712e+00, -2.511837807571602e+00, -2.571620954208219e+00, -2.571620954208219e+00, -9.446045716469784e-01, -1.056474722191819e+00, -8.801835551891309e-01, -9.455321539672418e-01, -9.625621608702845e-01, -9.625621608702845e-01, -2.424086747328447e-01, -3.491369908987946e-01, -2.339900811470111e-01, -3.057373022287251e+00, -2.703349426784507e-01, -2.703349426784507e-01, -2.440896974985749e-01, -2.299273218436128e-01, -1.322140252875940e-01, -1.991435946410835e-01, -1.610444611932901e-01, -1.610444611932902e-01, -1.000109584758995e+00, -9.833843255082741e-01, -9.889273106722259e-01, -9.937363316149377e-01, -9.912997961446156e-01, -9.912997961446156e-01, -9.811786860000717e-01, -7.885299700221731e-01, -8.408677237202832e-01, -8.942363622447008e-01, -8.670583791702287e-01, -8.670583791702287e-01, -1.099366876004179e+00, -4.074016619025232e-01, -4.716256657814658e-01, -6.069067340339510e-01, -5.343990774350915e-01, -5.343990774350915e-01, -7.395267448972475e-01, -1.718072465172330e-01, -1.838826819462488e-01, -6.029997034227003e-01, -2.225623274508930e-01, -2.225623274508931e-01, -1.808307200626705e-01, -2.133122048221698e-01, -2.093334738865812e-01, -2.160820360454794e-01, -1.525210353551805e-01, -1.525210353551804e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fcfo_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fcfo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.710896055301972e-07, -2.710902925846249e-07, -2.710910450388492e-07, -2.710808721427929e-07, -2.710865292849417e-07, -2.710865292849417e-07, 3.258336371078467e-06, 3.259433629914545e-06, 3.284689680438916e-06, 3.239521259057091e-06, 3.259479169534567e-06, 3.259479169534567e-06, -3.988344297667533e-03, -4.026541194839597e-03, -4.977066009275092e-03, -4.785781334724749e-03, -4.811336218301746e-03, -4.811336218301746e-03, -1.158267898484593e+00, -1.112204673888712e+00, -1.851272109694306e-03, -2.768159768447622e+00, -1.950944968991351e+00, -1.950944968991350e+00, -8.940601243225698e+03, -9.420438590429283e+03, -1.557855180201527e+02, 5.489550006627887e+04, -1.822721505119691e+03, -1.822721505119749e+03, 1.141113924594942e-06, 1.140883977236363e-06, 1.141094156005653e-06, 1.140891298341145e-06, 1.141002940430537e-06, 1.141002940430537e-06, -4.713256791904783e-05, -4.449690333316499e-05, -5.078476212377203e-05, -4.836269487874770e-05, -4.392647573787185e-05, -4.392647573787185e-05, -6.029081659275810e-03, 2.863383562828532e-04, -9.519032656980940e-03, -4.449160421975165e-03, -5.246240814988132e-03, -5.246240814988132e-03, -8.526804123958160e+00, -9.936004012115150e-01, -1.101911776451946e+01, 1.829384689812409e-04, -5.518586190016475e+00, -5.518586190016475e+00, 2.059987124383821e+05, 5.293422766092927e+04, -9.724616721788539e+04, -3.941592528464675e+01, -1.573438816386473e+04, -1.573438816386444e+04, 4.898632060743306e-03, -1.489223792122257e-03, -1.510205700795786e-04, 1.463736964545724e-03, 5.770240036484884e-04, 5.770240036484884e-04, 1.102995390256648e-02, -1.645634615151062e-02, -1.259080496817754e-02, -8.685015328345595e-03, -1.072712263304637e-02, -1.072712263304637e-02, 5.677218667477053e-04, -4.295200166968036e-01, -2.239680655292628e-01, -8.019727383568521e-02, -1.364727585219156e-01, -1.364727585219156e-01, -2.413375214709190e-02, -1.719962185765503e+02, -7.084146759191107e+01, -1.007072129567446e-01, -1.969537249274317e+01, -1.969537249274317e+01, -5.405337799930808e+03, 1.802841045389189e+07, 7.764278232087061e+05, -2.382373366400973e+01, -2.546602937779890e+04, -2.546602937779906e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
