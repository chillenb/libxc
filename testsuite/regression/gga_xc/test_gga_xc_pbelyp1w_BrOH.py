
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_pbelyp1w_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103546422424568e+01, -2.103548815905814e+01, -2.103567133504990e+01, -2.103527787346601e+01, -2.103547620804343e+01, -2.103547620804343e+01, -3.544784095476852e+00, -3.544755309683434e+00, -3.544108161813797e+00, -3.545962653370998e+00, -3.544784136748499e+00, -3.544784136748499e+00, -7.419459965938945e-01, -7.419136837477645e-01, -7.427360869542551e-01, -7.472665612435655e-01, -7.419307599855284e-01, -7.419307599855284e-01, -2.334934498159640e-01, -2.350599706445592e-01, -8.614472201796947e-01, -1.846053526877180e-01, -2.339495554228830e-01, -2.339495554228830e-01, -1.981501141162599e-02, -2.073446650913162e-02, -7.276390819198222e-02, -9.625303290095314e-03, -2.052217090331934e-02, -2.052217090331934e-02, -5.110287134035511e+00, -5.109703054222634e+00, -5.110233687895623e+00, -5.109779422698835e+00, -5.109978513116532e+00, -5.109978513116532e+00, -2.172925335870996e+00, -2.182708888850620e+00, -2.174202016576703e+00, -2.181815834001106e+00, -2.177903396166311e+00, -2.177903396166311e+00, -6.186866469834901e-01, -6.439949237411623e-01, -5.903333151901005e-01, -5.940449869972756e-01, -6.373921639237153e-01, -6.373921639237153e-01, -1.406717379431902e-01, -2.463616258231421e-01, -1.396087329023976e-01, -1.877861461754611e+00, -1.606969843493664e-01, -1.606969843493664e-01, -9.289709664476880e-03, -1.059736742376236e-02, -7.971128472963265e-03, -9.446334628115936e-02, -9.667289272421567e-03, -9.667289272421567e-03, -6.067887856592568e-01, -6.090462467778883e-01, -6.082517207697777e-01, -6.076239254729330e-01, -6.079385274525548e-01, -6.079385274525548e-01, -5.873908985153837e-01, -5.566859194334205e-01, -5.658793189953800e-01, -5.739365332556373e-01, -5.697037225996383e-01, -5.697037225996383e-01, -6.746532656741038e-01, -2.978654887522321e-01, -3.381384208767925e-01, -3.994469871004251e-01, -3.670950514568302e-01, -3.670950514568301e-01, -5.067758155123582e-01, -6.826208506306543e-02, -8.597473323573919e-02, -3.698309484812856e-01, -1.184961418085636e-01, -1.184961418085636e-01, -2.314921985958997e-02, -2.940294695951225e-03, -5.554560677122637e-03, -1.144083299257645e-01, -8.232661694083810e-03, -8.232661694083800e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_pbelyp1w_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524089455983982e+01, -2.524098134532770e+01, -2.524137625766103e+01, -2.523995497095311e+01, -2.524094026282304e+01, -2.524094026282304e+01, -4.120899276805680e+00, -4.120937140033053e+00, -4.122145040793812e+00, -4.120922219927193e+00, -4.120935988642644e+00, -4.120935988642644e+00, -8.199329972436956e-01, -8.188980135758019e-01, -7.945692497515860e-01, -8.004820082053363e-01, -8.195558928439072e-01, -8.195558928439072e-01, -2.517148042954632e-01, -2.530736498210547e-01, -9.835999842082109e-01, -2.223144553714829e-01, -2.520798702770411e-01, -2.520798702770411e-01, -2.619393638310613e-02, -2.739533675183498e-02, -1.009940564184936e-01, -1.278289848534897e-02, -2.711559548787728e-02, -2.711559548787728e-02, -6.282598850803191e+00, -6.285257258106802e+00, -6.282870611179036e+00, -6.284937666524945e+00, -6.283961981924494e+00, -6.283961981924494e+00, -2.270388115772559e+00, -2.286844830892094e+00, -2.262925740949821e+00, -2.275639686424065e+00, -2.291638695236580e+00, -2.291638695236580e+00, -7.375588304660674e-01, -8.234510821120312e-01, -7.003273805542560e-01, -7.483186226053939e-01, -7.677859307931898e-01, -7.677859307931898e-01, -1.992157932827923e-01, -2.812683066099665e-01, -1.932379459291170e-01, -2.404873898752511e+00, -2.060317969700550e-01, -2.060317969700550e-01, -1.233823699514577e-02, -1.406897911264395e-02, -1.058702362085877e-02, -1.358874526993287e-01, -1.283573166210215e-02, -1.283573166210215e-02, -7.920706679176959e-01, -7.814574243838821e-01, -7.851969328953754e-01, -7.881359173832725e-01, -7.866605405718989e-01, -7.866605405718989e-01, -7.689376275070822e-01, -6.328202778347698e-01, -6.683976909339284e-01, -7.049103197458346e-01, -6.860569083213227e-01, -6.860569083213227e-01, -8.603863664138198e-01, -3.240375878412464e-01, -3.624126284736001e-01, -4.493492591171493e-01, -3.997974077455270e-01, -3.997974077455269e-01, -5.732206224697320e-01, -9.449838556749834e-02, -1.257337618983437e-01, -4.297254725530747e-01, -1.641455771328979e-01, -1.641455771328979e-01, -3.056690051723353e-02, -3.912882649422150e-03, -7.385429536982674e-03, -1.549520571250844e-01, -1.093472706533984e-02, -1.093472706533982e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_pbelyp1w_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.037133552581608e-09, -7.037090956093954e-09, -7.036813486566036e-09, -7.037512761923257e-09, -7.037111819560843e-09, -7.037111819560843e-09, -9.372898474960738e-06, -9.373117211042836e-06, -9.377586165174845e-06, -9.361972438052375e-06, -9.372851936892811e-06, -9.372851936892811e-06, -5.463004739599482e-03, -5.462148813322693e-03, -5.343990596542095e-03, -5.222464604753326e-03, -5.462815243416322e-03, -5.462815243416322e-03, -4.371084486047777e-01, -4.427810213610738e-01, -2.984795226010471e-03, -2.787067484497513e-01, -4.393316677117706e-01, -4.393316677117706e-01, -5.122408054308234e+00, -5.133743853386540e+00, 5.329288008610455e+00, -3.630226524942191e+00, -5.333987657277493e+00, -5.333987657277493e+00, -2.061269057525333e-06, -2.061494743574402e-06, -2.061283591058206e-06, -2.061459228969414e-06, -2.061397295875219e-06, -2.061397295875219e-06, -7.068453896804045e-05, -6.941058454768635e-05, -7.051057336448439e-05, -6.952671965095398e-05, -7.001781158188228e-05, -7.001781158188228e-05, -1.143960419572501e-02, -9.489680219635701e-03, -1.386829423406022e-02, -1.331135292862343e-02, -1.010488478492578e-02, -1.010488478492578e-02, 6.780123006237856e-01, -1.839721831271713e-01, 5.828474803127249e-01, -1.171429455045565e-04, -3.286730756984609e-02, -3.286730756984609e-02, -3.851125234648884e+00, -3.859050262854420e+00, -1.104538280852620e+01, 3.311579652543198e+00, -5.700009015051043e+00, -5.700009015051043e+00, -1.201799567131279e-02, -1.192546671001071e-02, -1.195864916105910e-02, -1.198446938074943e-02, -1.197160132197684e-02, -1.197160132197684e-02, -1.372531802601007e-02, -1.757883727829357e-02, -1.649177758981651e-02, -1.545827112275513e-02, -1.600446376687814e-02, -1.600446376687814e-02, -7.844214000306346e-03, -1.391694252902570e-01, -1.096912142105114e-01, -6.687017322815202e-02, -8.898725115916821e-02, -8.898725115916825e-02, -2.566623551650967e-02, 5.717991344185426e+00, 4.466944079666557e+00, -9.327138355022968e-02, 1.195453755426149e+00, 1.195453755426145e+00, -3.828801705749569e+00, -6.637772469055470e+00, -5.715281624685632e+00, 1.114841526788168e+00, -8.324424305151750e+00, -8.324424305151735e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
