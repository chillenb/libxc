
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mohlyp2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120856945502532e+01, -2.120861059080299e+01, -2.120884045638897e+01, -2.120822750016656e+01, -2.120854198728045e+01, -2.120854198728045e+01, -3.518974333268230e+00, -3.518947650580754e+00, -3.518418012072351e+00, -3.520004386919896e+00, -3.519026904236175e+00, -3.519026904236175e+00, -7.176025928998347e-01, -7.176872621633685e-01, -7.242864529797224e-01, -7.287509991575650e-01, -7.338830389134529e-01, -7.338830389134529e-01, -2.497833252210438e-01, -2.486620548820839e-01, -8.270676311160757e-01, -2.365125950138766e-01, -2.489595344043035e-01, -2.489595344043034e-01, -1.753195791029610e-02, -1.845706634506331e-02, -9.520550423789639e-02, -1.012277505124865e-02, -1.389837238752655e-02, -1.389837238752655e-02, -5.156669144842200e+00, -5.156947429062087e+00, -5.156688547212953e+00, -5.156934031978719e+00, -5.156805929231940e+00, -5.156805929231940e+00, -2.168032712539767e+00, -2.175667054973835e+00, -2.175286579694902e+00, -2.181776695933740e+00, -2.169080156229624e+00, -2.169080156229624e+00, -6.041462675391210e-01, -6.444372653114293e-01, -5.629057469768333e-01, -5.729554071488807e-01, -6.122891676805187e-01, -6.122891676805189e-01, -1.985842784479446e-01, -2.869366720804511e-01, -1.879847004186316e-01, -1.904651813571455e+00, -2.115400541317032e-01, -2.115400541317032e-01, -7.815986889154339e-03, -9.895609043047921e-03, -7.575373243511929e-03, -1.396516900726000e-01, -9.451214890312865e-03, -9.451214890312868e-03, -5.964825347382433e-01, -5.936320836931853e-01, -5.945495342153396e-01, -5.953737144887459e-01, -5.949530897681241e-01, -5.949530897681241e-01, -5.806567925451441e-01, -5.277365771814628e-01, -5.366783771190888e-01, -5.504128264276444e-01, -5.426458381350854e-01, -5.426458381350854e-01, -6.751439474676083e-01, -3.224485993986819e-01, -3.424193556848331e-01, -3.803666524132885e-01, -3.556110311695410e-01, -3.556110311695411e-01, -4.876779477604704e-01, -9.164486661499163e-02, -1.181261532912009e-01, -3.563300056439022e-01, -1.652485073070235e-01, -1.652485073070235e-01, -2.468632673305850e-02, -2.646585981582628e-03, -5.562654668022872e-03, -1.583744343875773e-01, -8.690297048923363e-03, -8.690297048923355e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mohlyp2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.665720162809265e+01, -2.665717286843521e+01, -2.665735543346123e+01, -2.665728470921557e+01, -2.665777434579756e+01, -2.665790466317945e+01, -2.665603728656050e+01, -2.665569219484389e+01, -2.665729561029399e+01, -2.665652359696763e+01, -2.665729561029399e+01, -2.665652359696763e+01, -4.236049949192088e+00, -4.236642873266789e+00, -4.236146260384626e+00, -4.236772442814771e+00, -4.238815535144568e+00, -4.239524065138616e+00, -4.234864246593015e+00, -4.235637367372594e+00, -4.235113614523418e+00, -4.238051063304862e+00, -4.235113614523418e+00, -4.238051063304862e+00, -7.644944288235417e-01, -7.761349003406575e-01, -7.601691996460381e-01, -7.744785202188649e-01, -6.997761527073431e-01, -6.795514100939769e-01, -6.948561174471322e-01, -7.015214374234873e-01, -7.902704697192628e-01, -5.923693742179466e-01, -7.902704697192628e-01, -5.923693742179466e-01, -1.423468326256181e-01, -1.443384194746943e-01, -1.434822086850369e-01, -1.471328428917914e-01, -8.822757672822247e-01, -9.472847841549704e-01, -1.559298570844853e-01, -1.552698768174541e-01, -1.290859822370566e-01, -2.049269968079637e-01, -1.290859822370564e-01, -2.049269968079635e-01, -2.267290395211315e-02, -2.384232164866636e-02, -2.376401092262189e-02, -2.515573306321061e-02, -1.186563757681458e-01, -1.233018591531779e-01, -1.357629874153621e-02, -1.338804646007942e-02, -1.963896401000756e-02, -1.228709807373678e-02, -1.963896401000753e-02, -1.228709807373680e-02, -6.645276585568659e+00, -6.643621162499985e+00, -6.648855637733449e+00, -6.647082003967570e+00, -6.645471447525062e+00, -6.643738275649237e+00, -6.648544351763230e+00, -6.646880987755912e+00, -6.647114697261853e+00, -6.645362373367690e+00, -6.647114697261853e+00, -6.645362373367690e+00, -1.965978981702522e+00, -1.965846253579343e+00, -1.996090703570695e+00, -1.995225699695805e+00, -1.912385029007333e+00, -1.927447477367201e+00, -1.938561452319029e+00, -1.953626202643703e+00, -2.021801360454724e+00, -1.987541184546612e+00, -2.021801360454724e+00, -1.987541184546612e+00, -7.485996629263432e-01, -7.470652020618093e-01, -8.500759108791225e-01, -8.506149633762925e-01, -6.702519140035171e-01, -6.978413493399639e-01, -7.412735991751133e-01, -7.624651948222567e-01, -7.844848794795383e-01, -7.479558880479426e-01, -7.844848794795385e-01, -7.479558880479428e-01, -2.016687627907268e-01, -1.994859785339889e-01, -1.701531320353087e-01, -1.696852722524199e-01, -1.981316163655368e-01, -1.964800902739715e-01, -2.517307535092956e+00, -2.516258916424870e+00, -1.816224162994782e-01, -1.534435810820532e-01, -1.816224162994782e-01, -1.534435810820532e-01, -1.023800845410419e-02, -1.057199881626324e-02, -1.309702165361787e-02, -1.326239243706979e-02, -9.827311471343993e-03, -1.030549796672170e-02, -1.659200393585030e-01, -1.673006211677743e-01, -1.033459155547358e-02, -1.345064245816054e-02, -1.033459155547359e-02, -1.345064245816055e-02, -7.895347546368493e-01, -7.922433840360291e-01, -7.823782249011344e-01, -7.851767405748986e-01, -7.852063776015310e-01, -7.879814748069253e-01, -7.873049965036016e-01, -7.900271114625648e-01, -7.862855221976466e-01, -7.890320795525257e-01, -7.862855221976466e-01, -7.890320795525257e-01, -7.690035949721412e-01, -7.712438796030501e-01, -5.730177862451770e-01, -5.766574028389369e-01, -6.430693991257047e-01, -6.468779082159223e-01, -7.045209692556473e-01, -7.069486608064190e-01, -6.753026032637141e-01, -6.778780297282271e-01, -6.753026032637141e-01, -6.778780297282271e-01, -8.889465780253832e-01, -8.905916152226352e-01, -1.824621770411546e-01, -1.826018198469113e-01, -2.234183786392995e-01, -2.267223407996170e-01, -3.944746070604842e-01, -3.972468253651494e-01, -2.979346207886153e-01, -2.987086528305901e-01, -2.979346207886152e-01, -2.987086528305902e-01, -5.246225386189194e-01, -5.304068664565076e-01, -1.169956725370847e-01, -1.175761674191834e-01, -1.484902843343515e-01, -1.511547703749120e-01, -4.058155993611076e-01, -4.134867414815603e-01, -1.774298794319336e-01, -1.671336200809883e-01, -1.774298794319334e-01, -1.671336200809881e-01, -3.225000531678476e-02, -3.320612415256576e-02, -3.524944091924880e-03, -3.531443333355355e-03, -7.206248537085622e-03, -7.585513200863246e-03, -1.710572045592301e-01, -1.717570862150418e-01, -9.745592988175809e-03, -1.234914218966716e-02, -9.745592988175802e-03, -1.234914218966715e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mohlyp2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mohlyp2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.158474391629781e-09, 7.318261885192485e-12, -8.158499683375286e-09, -8.158165589797368e-09, 7.318157561642313e-12, -8.158275188245472e-09, -8.157427828233844e-09, 7.317661581758203e-12, -8.157149653579059e-09, -8.160912554726244e-09, 7.319214498925054e-12, -8.161589190256423e-09, -8.158279508230360e-09, 7.318405418427685e-12, -8.159997742103253e-09, -8.158279508230360e-09, 7.318405418427685e-12, -8.159997742103253e-09, -1.436281306634156e-05, 9.513738192680327e-08, -1.435165153383107e-05, -1.436114617006818e-05, 9.513628809072527e-08, -1.434933112519122e-05, -1.431402168029368e-05, 9.509858772523106e-08, -1.430138686892633e-05, -1.438630579234619e-05, 9.506791175152615e-08, -1.437247115142820e-05, -1.437656135075760e-05, 9.512456803526481e-08, -1.433040699931153e-05, -1.437656135075760e-05, 9.512456803526481e-08, -1.433040699931153e-05, -1.358873362412390e-02, 5.722668394665170e-04, -1.307851451041163e-02, -1.377765429242465e-02, 5.755782842502805e-04, -1.315310468745436e-02, -1.630596727574878e-02, 6.603751205694608e-04, -1.709568462211889e-02, -1.622355138249003e-02, 6.326931289016647e-04, -1.597505671666229e-02, -1.236249791705050e-02, 6.882812988855859e-04, -1.966300139366193e-02, -1.236249791705050e-02, 6.882812988855859e-04, -1.966300139366193e-02, -3.077281190684800e+00, 3.006438275195981e-01, -2.819278304675312e+00, -3.028285229337896e+00, 2.840136267892410e-01, -2.720163234114198e+00, -7.698387750845684e-03, 2.661363987136514e-04, -6.132951225194654e-03, -4.742487262955678e+00, 8.379506868841522e-01, -4.605017977527254e+00, -2.839614190031213e+00, 1.191007055349123e+00, -7.166066713637884e+00, -2.839614190031212e+00, 1.191007055349123e+00, -7.166066713637887e+00, -1.814194960696197e+01, 5.559572541540157e-08, -1.795939322903104e+01, -1.911443930088868e+01, 2.281279975487425e-07, -1.901566702738270e+01, -5.210443211571866e+00, 9.193137126558463e+00, -5.891228942560015e+00, -1.662070820961705e+01, 2.068447771251228e-17, -1.616960357696283e+01, -1.811279402936809e+01, 5.354179441525038e-13, -4.596308685725141e+01, -1.811279402937023e+01, 5.354179441525038e-13, -4.596308685718258e+01, -1.796951821950190e-06, 1.116851553884184e-08, -1.799055134717602e-06, -1.783856134139921e-06, 1.115768888659947e-08, -1.786384547979692e-06, -1.796269797470031e-06, 1.116797745315208e-08, -1.798650946097298e-06, -1.785030596410695e-06, 1.115841682486445e-08, -1.787141659872743e-06, -1.790208315891553e-06, 1.116304835399084e-08, -1.792684039936389e-06, -1.790208315891553e-06, 1.116304835399084e-08, -1.792684039936389e-06, -2.139159524932344e-04, 2.052278567034853e-06, -2.139601341992996e-04, -2.065636858990427e-04, 1.974513865038829e-06, -2.068057916841432e-04, -2.222153251166957e-04, 2.111600953917246e-06, -2.199432845859000e-04, -2.157065639491655e-04, 2.040353844735402e-06, -2.134078970379759e-04, -2.036360954215456e-04, 1.983198725042329e-06, -2.092261819317039e-04, -2.036360954215456e-04, 1.983198725042329e-06, -2.092261819317039e-04, -1.520708804306060e-02, 1.126823304940145e-03, -1.531101585643948e-02, -3.422601819928881e-03, 7.414768169174086e-04, -3.312413807715226e-03, -2.502981444502353e-02, 1.696577770120245e-03, -2.082262859812709e-02, -7.692695431195242e-03, 1.393436076711458e-03, -7.309769187293124e-03, -1.196986512160181e-02, 1.085699881069808e-03, -1.466567134371285e-02, -1.196986512160181e-02, 1.085699881069808e-03, -1.466567134371284e-02, -5.099712445810347e+00, 2.682165679608155e+00, -5.267152868221066e+00, -2.074207092752071e+00, 2.964031301836585e-01, -2.054882075095109e+00, -5.494188835748506e+00, 3.335315162806142e+00, -5.698432847057193e+00, -4.340480000790153e-05, 2.275387119528388e-06, -4.339248770218230e-05, -5.861224305287959e+00, 1.681187409653197e+00, -7.197814845389988e+00, -5.861224305287959e+00, 1.681187409653197e+00, -7.197814845389988e+00, -2.333322462775409e+01, 2.710748349218031e-24, -2.019571644177685e+01, -2.009104894761080e+01, 6.143794430566676e-18, -1.854961892320154e+01, -1.144365120162882e+02, 2.828220310032752e-25, -1.272997557385313e+02, -7.489699414310283e+00, 7.523346507828840e+00, -7.156540181177562e+00, -5.690934967131349e+01, 4.805161393863536e-20, -5.589429945328040e+01, -5.690934967126833e+01, 4.805161393863535e-20, -5.589429945328147e+01, -1.069680905372496e-03, 1.099838589595841e-03, -1.033880182187284e-03, -4.465048231650824e-03, 1.132143065072652e-03, -4.338748738582396e-03, -3.295267444141750e-03, 1.120651550325737e-03, -3.192490053484746e-03, -2.299745650061881e-03, 1.111284491988067e-03, -2.237713508326624e-03, -2.799180142713173e-03, 1.115961480756476e-03, -2.717098558258000e-03, -2.799180142713173e-03, 1.115961480756476e-03, -2.717098558258000e-03, 1.467479687631136e-05, 1.262639139332026e-03, -1.222234322000612e-05, -4.533461895938803e-02, 2.698931764558064e-03, -4.436651118586201e-02, -2.980864923042782e-02, 2.149018205333165e-03, -2.901180495213934e-02, -1.601295018957426e-02, 1.729200465546968e-03, -1.572104598232195e-02, -2.262325321697780e-02, 1.930120926138031e-03, -2.221390807565148e-02, -2.262325321697780e-02, 1.930120926138031e-03, -2.221390807565148e-02, -3.173654791569080e-03, 5.832272821775883e-04, -3.027913410657755e-03, -1.103921400318782e+00, 1.136523650128270e-01, -1.089750365758374e+00, -6.426077970751364e-01, 5.137200479544929e-02, -6.245504982254384e-01, -1.934056343130461e-01, 1.441838233773494e-02, -1.887837351778808e-01, -3.755090871219723e-01, 2.750373863772115e-02, -3.756922629683956e-01, -3.755090871219727e-01, 2.750373863772115e-02, -3.756922629683958e-01, -6.418923771679304e-02, 4.050357182528563e-03, -6.192660541724269e-02, -4.804090458439542e+00, 8.832667683665598e+00, -4.887346429644814e+00, -3.943773858009845e+00, 9.394016215411451e+00, -4.639892361818598e+00, -1.956308518175512e-01, 1.714457336094126e-02, -1.812557319818267e-01, -8.305155183433575e+00, 4.850719018150773e+00, -1.067256993941914e+01, -8.305155183433573e+00, 4.850719018150773e+00, -1.067256993941916e+01, -1.437316185552508e+01, 1.708739364307139e-04, -1.467225699468251e+01, -7.179620738165070e+01, 1.425057265980906e-85, -1.271753863388520e+02, -4.430988049238023e+01, 8.311563242725909e-37, -4.717043432113692e+01, -9.506602517934827e+00, 5.514447898774030e+00, -9.429333635475075e+00, -1.173264442685096e+02, 4.089407318435749e-22, -5.802715962105840e+01, -1.173264442684852e+02, 4.089407318435535e-22, -5.802715962106790e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
