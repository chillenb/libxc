
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_ncap_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.111269180165945e+01, -2.111271677103626e+01, -2.111290004959844e+01, -2.111252707023829e+01, -2.111271222419288e+01, -2.111271222419288e+01, -3.536636080159171e+00, -3.536597915677770e+00, -3.535802019843055e+00, -3.537851363854904e+00, -3.536674712791554e+00, -3.536674712791554e+00, -7.319383006816707e-01, -7.317681492660162e-01, -7.297796704231526e-01, -7.347635462872327e-01, -7.330027470144445e-01, -7.330027470144445e-01, -2.303770032694928e-01, -2.317184358284058e-01, -8.422234926327733e-01, -2.008713760985352e-01, -2.100788234238866e-01, -2.100788234238866e-01, -3.006228277452866e-01, -2.896681203915593e-01, -1.990166549633258e-01, -3.770539138122124e-01, -3.211054918910763e-01, -3.211054918910760e-01, -5.109793305553095e+00, -5.109241566876382e+00, -5.109778352569009e+00, -5.109291082940544e+00, -5.109507559489418e+00, -5.109507559489418e+00, -2.166729735589931e+00, -2.176364292169607e+00, -2.169121035460993e+00, -2.177580314618362e+00, -2.170948583984900e+00, -2.170948583984900e+00, -6.240870968330089e-01, -6.600810198080068e-01, -5.826621893840450e-01, -5.905065750807378e-01, -6.314157753407993e-01, -6.314157753407993e-01, -1.840097248100620e-01, -2.483115442539258e-01, -1.796650234526657e-01, -1.888856126455795e+00, -1.803560046549083e-01, -1.803560046549083e-01, -3.755766496745062e-01, -3.597673611873177e-01, -2.127048060414657e-01, -1.694155744890855e-01, -2.579434711821186e-01, -2.579434711821188e-01, -6.113244789500529e-01, -6.101147879855213e-01, -6.104604936447807e-01, -6.108014663225613e-01, -6.106228617204544e-01, -6.106228617204544e-01, -5.954353512543725e-01, -5.439973070856337e-01, -5.566865954857059e-01, -5.702935866854180e-01, -5.630555420083349e-01, -5.630555420083349e-01, -6.904770547140223e-01, -2.918594307457588e-01, -3.287878219270833e-01, -3.955174324297674e-01, -3.589232398277411e-01, -3.589232398277411e-01, -5.038758694549066e-01, -2.075182843624522e-01, -1.903853366795097e-01, -3.758501962233933e-01, -1.599492337966387e-01, -1.599492337966388e-01, -2.856410532892760e-01, -3.267917635514600e-01, -3.275928894138895e-01, -1.600876935835719e-01, -2.449742833926362e-01, -2.449742833926361e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_ncap_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.509883850272021e+01, -2.509894217561047e+01, -2.509937041713134e+01, -2.509782865969363e+01, -2.509864114675224e+01, -2.509864114675224e+01, -4.106454198157466e+00, -4.106518564808659e+00, -4.108104941693135e+00, -4.106104125498592e+00, -4.106627379828412e+00, -4.106627379828412e+00, -8.358835005215477e-01, -8.343071305430279e-01, -7.952909005744841e-01, -8.022011388456219e-01, -8.014681842373311e-01, -8.014681842373311e-01, -2.262502389036064e-01, -2.309712574967948e-01, -9.705596948707915e-01, -1.523526599714106e-01, -1.851374292921301e-01, -1.851374292921300e-01, 1.430761574191105e-01, 1.379684924976277e-01, 6.072213730108534e-02, 1.728694503377824e-01, 1.508254778803700e-01, 1.508254778803700e-01, -6.301885004793657e+00, -6.305197297313649e+00, -6.302031402331290e+00, -6.304955589159260e+00, -6.303567158400195e+00, -6.303567158400195e+00, -2.196220972983236e+00, -2.216155257045056e+00, -2.174576830671366e+00, -2.192076367854209e+00, -2.217864770521419e+00, -2.217864770521419e+00, -7.668910053140309e-01, -8.546165831360909e-01, -7.097200128137907e-01, -7.592679577495836e-01, -7.818159998247021e-01, -7.818159998247021e-01, -5.682055810958955e-02, -2.080097716893581e-01, -4.301594846787900e-02, -2.449419478296080e+00, -1.083052660094504e-01, -1.083052660094504e-01, 1.687023836176995e-01, 1.652171115252883e-01, 9.920717992041572e-02, 1.267898089281278e-02, 1.203076803741826e-01, 1.203076803741827e-01, -7.991043070120574e-01, -7.903030610016274e-01, -7.935277343226322e-01, -7.961007889294538e-01, -7.948258157740473e-01, -7.948258157740473e-01, -7.796567885063840e-01, -6.317910688244905e-01, -6.743526566058946e-01, -7.176785265040946e-01, -6.956876261418582e-01, -6.956876261418582e-01, -8.925358212518166e-01, -2.725488489546629e-01, -3.352317421067748e-01, -4.577033555036455e-01, -3.920906296446335e-01, -3.920906296446335e-01, -5.853473671352514e-01, 6.630448344065934e-02, 4.520558594395636e-02, -4.506800341419185e-01, -3.327373041266885e-02, -3.327373041266892e-02, 1.354394117971628e-01, 1.339291829699898e-01, 1.444781553257167e-01, -2.155752738894350e-02, 1.140680777403344e-01, 1.140680777403346e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_ncap_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.677763208396881e-09, -7.677705972062809e-09, -7.677379180445447e-09, -7.678232220038279e-09, -7.677795528430625e-09, -7.677795528430625e-09, -9.556535968178643e-06, -9.556502763325622e-06, -9.554809456769983e-06, -9.550740090922644e-06, -9.555609572490989e-06, -9.555609572490989e-06, -4.654734693696391e-03, -4.673296787500161e-03, -5.100065593747358e-03, -4.951507180163513e-03, -4.986350179047764e-03, -4.986350179047764e-03, -5.706518138463272e-01, -5.440802356330920e-01, -2.641445262335417e-03, -1.535689222077953e+00, -9.985773210877518e-01, -9.985773210877520e-01, -8.034361247760108e+04, -6.826476512446679e+04, -1.947529665641289e+02, -4.935154278511843e+05, -2.403181640714977e+05, -2.403181640714978e+05, -1.993872891612135e-06, -1.991288151967959e-06, -1.993754783746772e-06, -1.991473404834644e-06, -1.992566060063358e-06, -1.992566060063358e-06, -7.986783780858251e-05, -7.800854265009850e-05, -8.068083809626386e-05, -7.902409049187188e-05, -7.843767689541719e-05, -7.843767689541719e-05, -7.273236646492051e-03, -3.939647850974188e-03, -9.820099058296703e-03, -6.770225661241771e-03, -6.749251150205455e-03, -6.749251150205455e-03, -6.293838119932167e+00, -5.493243814842830e-01, -8.486895691905628e+00, -6.955767815473129e-05, -3.373633162725146e+00, -3.373633162725146e+00, -1.222004146463384e+06, -5.470340475201788e+05, -1.820500307933897e+06, -3.755849043297268e+01, -8.613777620229314e+05, -8.613777620229310e+05, -3.554686355949355e-03, -5.270061458775246e-03, -4.798507817775325e-03, -4.321204221905914e-03, -4.572020688819740e-03, -4.572020688819740e-03, -2.898680570861015e-03, -1.446129039536795e-02, -1.195555342938834e-02, -9.330002639400054e-03, -1.070050095086561e-02, -1.070050095086561e-02, -3.413748910976718e-03, -2.394637802295931e-01, -1.296871570160807e-01, -5.152345784972098e-02, -8.285250839481416e-02, -8.285250839481414e-02, -1.956902516468134e-02, -2.222765010583173e+02, -7.814925275459565e+01, -5.887495048716151e-02, -1.551392228794509e+01, -1.551392228794509e+01, -2.437682605961527e+04, -5.602900716915984e+07, -4.300986541630664e+06, -1.968172870264638e+01, -1.159971309747377e+06, -1.159971309747381e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
