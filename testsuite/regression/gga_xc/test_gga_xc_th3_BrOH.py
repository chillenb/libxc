
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.581887105838670e+01, -2.581893091265772e+01, -2.581933399347095e+01, -2.581835088444599e+01, -2.581890148643838e+01, -2.581890148643838e+01, -3.520655528883728e+00, -3.520648415794929e+00, -3.520597626901587e+00, -3.521424102322921e+00, -3.520666685241703e+00, -3.520666685241703e+00, -7.289419960149286e-01, -7.288184327212337e-01, -7.283861434554412e-01, -7.327701046629478e-01, -7.288936733740472e-01, -7.288936733740472e-01, -2.363998553985109e-01, -2.374312722034038e-01, -8.493497949433734e-01, -2.029181169844396e-01, -2.366803713795061e-01, -2.366803713795061e-01, -7.486047230457489e-02, -7.547329423364610e-02, -1.282540942686508e-01, -7.353496971571141e-02, -7.451886035845359e-02, -7.451886035845359e-02, -5.238169388427020e+00, -5.239283546276966e+00, -5.238285750797960e+00, -5.239151992492448e+00, -5.238736445635666e+00, -5.238736445635666e+00, -2.126396559240193e+00, -2.135363619974172e+00, -2.128680336439926e+00, -2.135541006665120e+00, -2.129909805882299e+00, -2.129909805882299e+00, -6.161290372241014e-01, -6.524426091921242e-01, -5.874739117726870e-01, -5.988224495784472e-01, -6.360516569578490e-01, -6.360516569578490e-01, -1.807025081200718e-01, -2.601717119253671e-01, -1.755452183688407e-01, -1.938060541942839e+00, -1.862534141775197e-01, -1.862534141775197e-01, -7.177560122410827e-02, -7.317430795778559e-02, -5.031874521281236e-02, -1.408650245003615e-01, -6.381055319068192e-02, -6.381055319068195e-02, -6.182441280775340e-01, -6.171479003846210e-01, -6.174528867215566e-01, -6.177410086504511e-01, -6.175892150836931e-01, -6.175892150836932e-01, -5.985682112899330e-01, -5.504976842286869e-01, -5.628373468669753e-01, -5.751393710501266e-01, -5.686400906824757e-01, -5.686400906824757e-01, -6.833917433396737e-01, -3.038827724479790e-01, -3.380512059834479e-01, -3.964148710053476e-01, -3.645030853181319e-01, -3.645030853181319e-01, -5.014100586768477e-01, -1.308108452726321e-01, -1.411156068100620e-01, -3.685935121670477e-01, -1.537188427189413e-01, -1.537188427189413e-01, -8.363454679622451e-02, -5.075362353830173e-02, -5.848177577294986e-02, -1.459109928299754e-01, -5.521224525320182e-02, -5.521224525320183e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.547654581477134e+01, -3.547632014705118e+01, -3.547585195861598e+01, -3.547953650601278e+01, -3.547642230347905e+01, -3.547642230347905e+01, -4.446113740635853e+00, -4.446193220781253e+00, -4.448566642338656e+00, -4.445457918581116e+00, -4.446174381247846e+00, -4.446174381247846e+00, -8.260680384505417e-01, -8.243546705152354e-01, -7.767786939437286e-01, -7.839742329242027e-01, -8.254478653743282e-01, -8.254478653743282e-01, -2.310558593176844e-01, -2.351236186513508e-01, -1.010005253118572e+00, -1.562961720866559e-01, -2.322954456214418e-01, -2.322954456214418e-01, 4.527832532430006e-03, 3.740750824360883e-03, -3.398766829036993e-02, 1.700307425244973e-02, 3.531300687791580e-03, 3.531300687791580e-03, -7.057472721706668e+00, -7.060451585401228e+00, -7.057778075260911e+00, -7.060094371613314e+00, -7.059000679019984e+00, -7.059000679019984e+00, -2.143824965822870e+00, -2.170582877451509e+00, -2.120356711864902e+00, -2.141383059914743e+00, -2.191931031704240e+00, -2.191931031704240e+00, -7.596406343793132e-01, -8.519424794410380e-01, -7.199257425970470e-01, -7.715919457410969e-01, -7.923518320836515e-01, -7.923518320836515e-01, -1.039778186796514e-01, -2.164576381903953e-01, -1.048302496168308e-01, -2.608472302169472e+00, -1.291422633064916e-01, -1.291422633064916e-01, 1.659077313396523e-02, 1.542087914801734e-02, 8.131295142304219e-03, -5.899512350677857e-02, 1.206212504450425e-02, 1.206212504450426e-02, -8.176599685539843e-01, -8.065067777206077e-01, -8.103336135892526e-01, -8.133950197968117e-01, -8.118497453580149e-01, -8.118497453580148e-01, -7.927691136376296e-01, -6.435188385344007e-01, -6.859477183845712e-01, -7.257993694734309e-01, -7.055863337100294e-01, -7.055863337100294e-01, -8.919530860094402e-01, -2.778394145361154e-01, -3.394835746558668e-01, -4.527979856230891e-01, -3.930217337041155e-01, -3.930217337041154e-01, -5.809035021930046e-01, -2.651084910105264e-02, -4.749635802530435e-02, -4.362129123142087e-01, -8.593377926152873e-02, -8.593377926152877e-02, 4.922923215819116e-03, 1.687784657675218e-02, 1.574482222031397e-02, -8.362268097258482e-02, 9.998378346066126e-03, 9.998378346066141e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th3_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.101578954910904e-08, -1.101657121611506e-08, -1.101916564041582e-08, -1.100638435416788e-08, -1.101620923517982e-08, -1.101620923517982e-08, -3.742304506074118e-06, -3.741537374195804e-06, -3.719634557089116e-06, -3.753301678782330e-06, -3.741829342220055e-06, -3.741829342220055e-06, -4.572758022037378e-03, -4.596232642099414e-03, -5.231448678879299e-03, -5.071284339673689e-03, -4.581290433625720e-03, -4.581290433625720e-03, -6.249360175543740e-01, -6.026741279107126e-01, -2.122782498104939e-03, -1.704666292395737e+00, -6.182469431270462e-01, -6.182469431270462e-01, -5.019027070986147e+03, -4.373121902810942e+03, -5.712675797373338e+01, -4.253456072051303e+04, -4.534106290916598e+03, -4.534106290916598e+03, 2.402468180005337e-07, 2.470145038776855e-07, 2.409209411218967e-07, 2.461829650829883e-07, 2.437331937200774e-07, 2.437331937200774e-07, -7.827158579686114e-05, -7.558546327854609e-05, -7.995419189138343e-05, -7.781437401824373e-05, -7.430904671100604e-05, -7.430904671100604e-05, -7.546112509484807e-03, -4.067980908060932e-03, -9.472353601312737e-03, -7.298234072544679e-03, -6.336277450903934e-03, -6.336277450903934e-03, -4.449479656597270e+00, -5.413068932214791e-01, -4.721306616171162e+00, 4.311766944282905e-05, -2.887731723011776e+00, -2.887731723011776e+00, -4.763750488443307e+04, -3.209975672278526e+04, -8.589503442048005e+04, -2.064420011159320e+01, -4.432978765533030e+04, -4.432978765533028e+04, -3.492316673642803e-03, -5.482059048364523e-03, -5.060639401811415e-03, -4.589703192610262e-03, -4.847464932500902e-03, -4.847464932500895e-03, -3.911691964665269e-03, -1.389478774858380e-02, -1.159259332474186e-02, -9.639582712972931e-03, -1.062468435056493e-02, -1.062468435056493e-02, -3.182169887362556e-03, -2.455918285446391e-01, -1.366385728594174e-01, -5.844135245051505e-02, -8.994609391182622e-02, -8.994609391182630e-02, -2.102468103426023e-02, -7.068061807504064e+01, -2.799762059052365e+01, -7.728534797760615e-02, -9.109581119962918e+00, -9.109581119962918e+00, -3.014886832885104e+03, -1.552726455969953e+06, -2.316461587439639e+05, -1.084500847990143e+01, -7.517710555098508e+04, -7.517710555098539e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
