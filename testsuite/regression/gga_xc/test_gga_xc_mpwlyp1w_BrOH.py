
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_mpwlyp1w_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.114714660207501e+01, -2.114716991635327e+01, -2.114735186596335e+01, -2.114696853090698e+01, -2.114715824573891e+01, -2.114715824573891e+01, -3.559045731643753e+00, -3.559016735523267e+00, -3.558364415282957e+00, -3.560231585605281e+00, -3.559045744344444e+00, -3.559045744344444e+00, -7.414254610357814e-01, -7.413615874376307e-01, -7.412495433044770e-01, -7.458445081422028e-01, -7.413988832559261e-01, -7.413988832559261e-01, -2.305261227264966e-01, -2.320755823167659e-01, -8.621441930423500e-01, -1.854455876520452e-01, -2.309746360368254e-01, -2.309746360368254e-01, -7.163876116961469e-03, -7.911097924963976e-03, -7.920654473565644e-02, -1.696549909305829e-03, -7.822130331170260e-03, -7.822130331170260e-03, -5.129013715472732e+00, -5.128344219197471e+00, -5.128951797912377e+00, -5.128431121188854e+00, -5.128661095427824e+00, -5.128661095427824e+00, -2.176337223474254e+00, -2.186303645705876e+00, -2.177416985175976e+00, -2.185170617724912e+00, -2.181705009613119e+00, -2.181705009613119e+00, -6.186256057843995e-01, -6.426948677206304e-01, -5.901480707995601e-01, -5.931874282242935e-01, -6.373814970511180e-01, -6.373814970511180e-01, -1.486427335256019e-01, -2.448074110784782e-01, -1.469239401892513e-01, -1.878557330354649e+00, -1.643905679174985e-01, -1.643905679174985e-01, -1.618655288960769e-03, -2.001756553579471e-03, -1.489920361614770e-03, -1.055747725448702e-01, -1.835514951682866e-03, -1.835514951682867e-03, -6.041834349298767e-01, -6.075499744720394e-01, -6.064522990506026e-01, -6.055341840656692e-01, -6.060019998070340e-01, -6.060019998070340e-01, -5.845243860529248e-01, -5.559257485621807e-01, -5.655756697325998e-01, -5.735253905141861e-01, -5.694284202922330e-01, -5.694284202922330e-01, -6.735121380193756e-01, -2.948512902360902e-01, -3.349605516631546e-01, -3.978194351559472e-01, -3.645819183262746e-01, -3.645819183262745e-01, -5.057051961016069e-01, -7.121121882211122e-02, -9.628273633801358e-02, -3.685708767458886e-01, -1.273384638327950e-01, -1.273384638327949e-01, -9.248365065473125e-03, -3.847703201276142e-04, -8.134779254833670e-04, -1.229098467537470e-01, -1.500844873500336e-03, -1.500844873500332e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_mpwlyp1w_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.529861378778734e+01, -2.529869571721171e+01, -2.529907634776584e+01, -2.529773443558803e+01, -2.529865686813799e+01, -2.529865686813799e+01, -4.137341606977907e+00, -4.137372896225353e+00, -4.138400832553704e+00, -4.137492178818731e+00, -4.137375021794678e+00, -4.137375021794678e+00, -8.268593528701239e-01, -8.258803891204345e-01, -8.017791557539052e-01, -8.077997877174425e-01, -8.265027085033022e-01, -8.265027085033022e-01, -2.478316564758935e-01, -2.500793055134141e-01, -9.889256483273563e-01, -2.021782202327434e-01, -2.484837355252132e-01, -2.484837355252132e-01, -2.032730940077225e-02, -2.260517340199790e-02, -1.380952796610375e-01, -3.579886647209293e-03, -2.234559777637672e-02, -2.234559777637672e-02, -6.278644023082089e+00, -6.281048978203653e+00, -6.278890394779307e+00, -6.280760355356592e+00, -6.279876185868924e+00, -6.279876185868924e+00, -2.291242661238746e+00, -2.308156035691968e+00, -2.283185124934158e+00, -2.296327069300496e+00, -2.313334253436158e+00, -2.313334253436158e+00, -7.379832472943595e-01, -8.190936783145405e-01, -7.011217316011472e-01, -7.447564996497041e-01, -7.673295123894991e-01, -7.673295123894991e-01, -1.797738055611839e-01, -2.652820416485988e-01, -1.732668617961254e-01, -2.395720566625259e+00, -1.836227950677020e-01, -1.836227950677020e-01, -3.382593342634274e-03, -4.443659674811145e-03, -3.260381253168350e-03, -1.427681581548942e-01, -4.078157547998710e-03, -4.078157547998710e-03, -7.870823020804527e-01, -7.771419549901033e-01, -7.806706621058330e-01, -7.833712846303443e-01, -7.820246512001964e-01, -7.820246512001964e-01, -7.643161913441244e-01, -6.367182885483789e-01, -6.694971067694943e-01, -7.029659366251163e-01, -6.856107595885739e-01, -6.856107595885739e-01, -8.559897293702980e-01, -3.161006290581728e-01, -3.620215454975927e-01, -4.525195486384369e-01, -4.027538629024897e-01, -4.027538629024896e-01, -5.770622266634994e-01, -1.399327785476587e-01, -1.480938909931463e-01, -4.311415058966790e-01, -1.498418284174503e-01, -1.498418284174502e-01, -2.657172541581066e-02, -5.730787216815045e-04, -1.426444612507739e-03, -1.407482399254284e-01, -3.230929323841311e-03, -3.230929323841300e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_mpwlyp1w_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_mpwlyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.276521322366092e-09, -7.276492205032380e-09, -7.276250319384672e-09, -7.276729377301921e-09, -7.276506902980695e-09, -7.276506902980695e-09, -9.437628584348585e-06, -9.437957439288145e-06, -9.445454074019940e-06, -9.424589658341701e-06, -9.437637702344164e-06, -9.437637702344164e-06, -5.239450590746584e-03, -5.236871591978786e-03, -5.116287503496397e-03, -4.999205049686902e-03, -5.238623739787040e-03, -5.238623739787040e-03, -4.411661850362992e-01, -4.398600681232888e-01, -2.918407190152461e-03, -5.980621714439058e-01, -4.411138956553658e-01, -4.411138956553658e-01, 4.838928214946976e+02, 4.719268006649152e+02, 1.725224144385584e+01, 4.536211334136163e+02, 4.905390698786441e+02, 4.905390698786441e+02, -2.185343807184994e-06, -2.186994628423412e-06, -2.185499886436142e-06, -2.186783624897854e-06, -2.186207116373365e-06, -2.186207116373365e-06, -6.897277159967340e-05, -6.769444758451031e-05, -6.886836514105643e-05, -6.787236299180674e-05, -6.823884936592180e-05, -6.823884936592180e-05, -1.148785819795671e-02, -1.075040373462258e-02, -1.383348105841384e-02, -1.453215029564024e-02, -1.027961376308224e-02, -1.027961376308224e-02, -2.502920081197602e-01, -2.451157001291886e-01, -4.536773635834996e-01, -1.329838665974832e-04, -6.828047606953633e-01, -6.828047606953633e-01, 4.836637696984748e+02, 4.690918758989037e+02, 1.351164228967994e+03, 2.336497433293442e+00, 6.920964436987649e+02, 6.920964436987639e+02, -1.574226900154963e-02, -1.365534717148106e-02, -1.406823848668509e-02, -1.460789191884542e-02, -1.430327018095320e-02, -1.430327018095319e-02, -1.816969307647149e-02, -1.689373375467762e-02, -1.635370599170480e-02, -1.611045068195549e-02, -1.622417268968618e-02, -1.622417268968617e-02, -8.824244533469330e-03, -1.486822493497906e-01, -1.059332530039661e-01, -6.305326027519539e-02, -8.337290676640276e-02, -8.337290676640279e-02, -2.450439164242001e-02, 2.521589674510646e+01, 6.471794866417253e+00, -8.961829994591806e-02, -6.743046068559255e-01, -6.743046068559342e-01, 3.446512260877956e+02, 1.058120862352545e+03, 7.910731841268811e+02, -1.230464290052870e+00, 1.027877166038784e+03, 1.027877166038781e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
