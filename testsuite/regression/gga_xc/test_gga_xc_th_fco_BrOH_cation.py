
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fco_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.908716832824713e+01, -1.908656802638867e+01, -1.908510782221005e+01, -1.909401257918013e+01, -1.908917343059379e+01, -1.908917343059379e+01, -3.844075057899648e+00, -3.844097182230679e+00, -3.844699844017469e+00, -3.844335239683760e+00, -3.844186373526697e+00, -3.844186373526697e+00, -8.965890273176553e-01, -8.963383171028355e-01, -8.929661249496847e-01, -8.976273275908117e-01, -8.976846104808111e-01, -8.976846104808111e-01, -4.302362975698364e-01, -4.305039422680957e-01, -1.003732355835225e+00, -4.087286893313100e-01, -4.211801147585991e-01, -4.211801147585992e-01, -1.984296730881835e-01, -2.007281720832090e-01, -3.226071980712786e-01, -1.586477864748309e-01, -2.027392741432950e-01, -2.027392741432950e-01, -5.589122497888071e+00, -5.590682866395252e+00, -5.589194376712548e+00, -5.590571471965461e+00, -5.589913953558512e+00, -5.589913953558512e+00, -2.271782376362036e+00, -2.283704440444239e+00, -2.268634074352558e+00, -2.278898233373750e+00, -2.280111136126827e+00, -2.280111136126827e+00, -7.965919668951860e-01, -8.395109564515618e-01, -7.559917748725493e-01, -7.663745654176316e-01, -8.052431404007105e-01, -8.052431404007107e-01, -3.881963527232561e-01, -4.594665923858942e-01, -3.799468732978631e-01, -2.239132264526508e+00, -3.858208714061944e-01, -3.858208714061944e-01, -1.368468493261617e-01, -1.558550498803417e-01, -1.236018011334448e-01, -3.427751980856288e-01, -1.482882337739022e-01, -1.482882337739022e-01, -7.909730627247883e-01, -7.872957590913728e-01, -7.883293151747278e-01, -7.893555232871654e-01, -7.888177789118667e-01, -7.888177789118667e-01, -7.750133523874269e-01, -7.184442348229051e-01, -7.302471460852166e-01, -7.443016147813893e-01, -7.366634154307027e-01, -7.366634154307027e-01, -8.710057543135054e-01, -4.977649966429156e-01, -5.259817225045500e-01, -5.777444024159278e-01, -5.480197768107807e-01, -5.480197768107806e-01, -6.804188809508580e-01, -3.243796482822865e-01, -3.413420488027357e-01, -5.557632559197531e-01, -3.502993822334307e-01, -3.502993822334307e-01, -2.264118029385697e-01, -6.712501656022342e-02, -1.117331015905841e-01, -3.467679353588253e-01, -1.422446677652716e-01, -1.422446677652714e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fco_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.103596752877314e+01, 3.103231051244924e+01, 3.103859924985034e+01, 3.103243251728692e+01, 3.103680640459227e+01, 3.104362442067804e+01, 3.103057525955959e+01, 3.100894439132344e+01, 3.104877662125536e+01, 3.101258141177996e+01, 3.104877662125536e+01, 3.101258141177996e+01, -5.228487513156239e+00, -5.229083721326942e+00, -5.228514690062923e+00, -5.229195500339950e+00, -5.231031494532629e+00, -5.230131745732927e+00, -5.228835918787667e+00, -5.228222421550523e+00, -5.237163846120519e+00, -5.220815746515009e+00, -5.237163846120519e+00, -5.220815746515009e+00, -1.013935320727056e+00, -1.016990654765019e+00, -1.011485732619409e+00, -1.015239098446683e+00, -9.622740824390487e-01, -9.568798428131147e-01, -9.667770125947839e-01, -9.684675539586264e-01, -9.907195191261081e-01, -9.400923140549845e-01, -9.907195191261081e-01, -9.400923140549845e-01, -3.777520123723859e-01, -3.780236694327992e-01, -3.823584122257551e-01, -3.827668696082879e-01, -1.158143376830299e+00, -1.182307434803208e+00, -3.142629688445956e-01, -3.137765128091400e-01, -3.370051975630891e-01, -2.928786350512452e-01, -3.370051975630891e-01, -2.928786350512452e-01, -1.360796852986541e-01, -1.385765588250895e-01, -1.332624794502834e-01, -1.360516664731360e-01, -1.677423297317144e-01, -1.679231570333035e-01, -1.612966057393571e-01, -1.610648761239731e-01, -1.110384558509153e-01, -7.787774074213005e-02, -1.110384558509150e-01, -7.787774074213005e-02, -7.356113749978768e+00, -7.385646201062285e+00, -7.354946158146565e+00, -7.385272540765201e+00, -7.355814397700843e+00, -7.385897182880859e+00, -7.355354233782459e+00, -7.384997268467122e+00, -7.355444393737876e+00, -7.385525532469590e+00, -7.355444393737876e+00, -7.385525532469590e+00, -2.586562448208662e+00, -2.586946142956102e+00, -2.618750966232354e+00, -2.620872167201926e+00, -2.546852043454192e+00, -2.533978767113072e+00, -2.576742354440852e+00, -2.563015421176849e+00, -2.610103371411885e+00, -2.644224340584484e+00, -2.610103371411885e+00, -2.644224340584484e+00, -9.495545557128414e-01, -9.476160132541686e-01, -1.056267556850962e+00, -1.056629186983558e+00, -8.716759018931429e-01, -8.964559632033425e-01, -9.335755423379224e-01, -9.574343038693418e-01, -9.842307404928976e-01, -9.465320827414360e-01, -9.842307404928978e-01, -9.465320827414360e-01, -2.521061233526698e-01, -2.517034978578627e-01, -3.607859492998435e-01, -3.610199534747764e-01, -2.438887150188627e-01, -2.414943037139178e-01, -3.084699204052026e+00, -3.087788376876783e+00, -2.826214434240572e-01, -2.791528373846007e-01, -2.826214434240572e-01, -2.791528373846007e-01, -1.602145736970959e-01, -1.600060690195750e-01, -1.541946538507817e-01, -1.543842536096354e-01, -9.916320119822614e-02, -9.912314204087484e-02, -2.045027554213404e-01, -2.042043001543802e-01, -1.031352389688290e-01, -1.087936592168713e-01, -1.031352389688292e-01, -1.087936592168715e-01, -9.967267295705188e-01, -9.997630487558991e-01, -9.814259343805106e-01, -9.843921198454317e-01, -9.865120617670076e-01, -9.895055616519173e-01, -9.909235077993942e-01, -9.939175927432989e-01, -9.886903751380962e-01, -9.916832816566363e-01, -9.886903751380962e-01, -9.916832816566363e-01, -9.774187952100600e-01, -9.800024728687761e-01, -7.937840523673262e-01, -7.964838431151605e-01, -8.437129170520863e-01, -8.466081978615854e-01, -8.949055332376742e-01, -8.973251032421371e-01, -8.689136015079280e-01, -8.713985883593967e-01, -8.689136015079280e-01, -8.713985883593967e-01, -1.099190514698574e+00, -1.100503174635420e+00, -4.184992421470467e-01, -4.192478095652348e-01, -4.807623040113729e-01, -4.828224394666020e-01, -6.120942249716510e-01, -6.140885173115116e-01, -5.427575073772598e-01, -5.426603823781448e-01, -5.427575073772598e-01, -5.426603823781446e-01, -7.438366880811631e-01, -7.477070150801343e-01, -1.654163666705952e-01, -1.655141884755137e-01, -1.843371747538305e-01, -1.839196942667129e-01, -6.053774616801821e-01, -6.103099570633144e-01, -2.328245448411141e-01, -2.288438763084497e-01, -2.328245448411142e-01, -2.288438763084496e-01, -1.368688946322494e-01, -1.387466274449655e-01, -1.371604846291363e-01, -1.370290401956920e-01, -1.395664155967534e-01, -1.383843363968853e-01, -2.244802977934793e-01, -2.233376765178750e-01, -9.805343712619995e-02, -1.025749663636681e-01, -9.805343712619999e-02, -1.025749663636680e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fco_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.217415762317334e-05, -2.501121469893009e-05, 1.217415497339091e-05, 1.217409156681939e-05, -2.501109340975848e-05, 1.217408939613334e-05, 1.217379059456599e-05, -2.501051676461877e-05, 1.217378760555681e-05, 1.217476731289361e-05, -2.501232211697433e-05, 1.217476971738490e-05, 1.217424449353286e-05, -2.501138145478901e-05, 1.217426863528145e-05, 1.217424449353286e-05, -2.501138145478901e-05, 1.217426863528145e-05, 1.899716361472806e-04, -3.678757388277557e-04, 1.899871293388365e-04, 1.899729031541855e-04, -3.678749277122867e-04, 1.899894797984426e-04, 1.900121448472939e-04, -3.678469706106436e-04, 1.900241969941231e-04, 1.899084557674702e-04, -3.678242154748297e-04, 1.899228782199497e-04, 1.899777458132364e-04, -3.678658792619159e-04, 1.899757714266176e-04, 1.899777458132364e-04, -3.678658792619159e-04, 1.899757714266176e-04, -7.092521713230130e-03, -6.632238251392910e-04, -7.034813515878081e-03, -7.163471875726064e-03, -6.691596892277889e-04, -7.094192037668030e-03, -8.717943152596835e-03, -8.298879748744533e-04, -8.774237739469044e-03, -8.436080385294342e-03, -7.772140940223087e-04, -8.415132569854916e-03, -8.117209726273715e-03, -7.852097716971520e-04, -8.798656399314963e-03, -8.117209726273715e-03, -7.852097716971520e-04, -8.798656399314963e-03, -1.772309105208373e+00, -5.311944099394706e-01, -1.656524548604995e+00, -1.713186754012393e+00, -5.039413486955281e-01, -1.585544486402340e+00, -3.329545204349641e-03, -2.068138964526426e-04, -3.417208076477031e-03, -4.127030149929431e+00, -1.347975705213309e+00, -3.992489907186824e+00, -2.349754961126771e+00, -1.111820504456051e+00, -8.257742416189220e+00, -2.349754961126770e+00, -1.111820504456051e+00, -8.257742416189219e+00, -7.045577696771553e+04, 6.175336996532410e+04, -5.777179638722329e+04, -6.214058608796188e+04, 5.014166323894461e+04, -4.976424440463723e+04, -2.850019650634505e+02, -3.176342477723170e+01, -2.460020307620095e+02, -3.103651419763349e+05, 5.391660739211278e+05, -3.259908861633864e+05, -1.001283295724682e+05, 2.466217022494084e+05, -7.971847340574380e+05, -1.001283295724683e+05, 2.466217022494084e+05, -7.971847340574379e+05, 1.162753639954256e-04, -2.287285123946849e-04, 1.162752555643665e-04, 1.162449721065950e-04, -2.286735388780090e-04, 1.162448759088907e-04, 1.162738520525528e-04, -2.287257753522476e-04, 1.162737527784612e-04, 1.162470337121218e-04, -2.286772437861671e-04, 1.162469221166112e-04, 1.162600179845735e-04, -2.287007560479921e-04, 1.162599221385876e-04, 1.162600179845735e-04, -2.287007560479921e-04, 1.162599221385876e-04, 1.803425435942498e-04, -5.385663529819698e-04, 1.803727158925524e-04, 1.848895880076023e-04, -5.378753800884271e-04, 1.850305817135974e-04, 1.735051585146065e-04, -5.390391138476913e-04, 1.738785310740513e-04, 1.778025475092457e-04, -5.384718142225157e-04, 1.780991727077013e-04, 1.863440357264373e-04, -5.379886233201258e-04, 1.858835191128678e-04, 1.863440357264373e-04, -5.379886233201258e-04, 1.858835191128678e-04, -1.034504412403813e-02, -1.831731279026159e-03, -1.024711013851587e-02, 3.284194533898863e-04, -9.933910880634948e-04, 5.185342281587577e-04, -1.552746858162884e-02, -3.086566434758557e-03, -1.626589709382578e-02, -6.297702482878011e-03, -2.391155082639602e-03, -8.251559006700446e-03, -9.705178785820921e-03, -1.629527344775246e-03, -8.132399361370644e-03, -9.705178785820922e-03, -1.629527344775244e-03, -8.132399361370645e-03, -1.270603464784772e+01, -4.166378166503512e+00, -1.249655122601942e+01, -1.459064157618194e+00, -5.278349396647506e-01, -1.445335850061702e+00, -1.749341250834336e+01, -5.232998144458811e+00, -1.545059845076696e+01, 6.184115443392910e-04, -5.400850149596538e-04, 6.200709558176018e-04, -8.424454449100020e+00, -2.586745329933336e+00, -7.871936648340706e+00, -8.424454449100020e+00, -2.586745329933336e+00, -7.871936648340706e+00, -8.116991198723606e+05, 1.455904239599376e+06, -6.824029294216466e+05, -3.694935519670559e+05, 5.883980934021294e+05, -3.434259637741285e+05, -1.433787751400226e+06, 1.643675505659696e+06, -1.223407145353606e+06, -6.165181441465160e+01, -1.467255893362367e+01, -6.017192515292692e+01, -1.197112916080595e+06, 8.480915230074154e+05, -4.207920285410438e+05, -1.197112916080594e+06, 8.480915230074156e+05, -4.207920285410439e+05, 8.641920464147164e-03, -1.770114455953949e-03, 8.627604460424675e-03, -2.373120326129569e-03, -1.843470055300246e-03, -2.464340813362063e-03, -7.062502078576067e-05, -1.817324434657972e-03, -1.424335544895465e-04, 2.736484614759600e-03, -1.796062406015452e-03, 2.637062296019432e-03, 1.194821608203223e-03, -1.806674427306952e-03, 1.110279014423808e-03, 1.194821608203223e-03, -1.806674427306952e-03, 1.110279014423808e-03, 1.957706828782278e-02, -2.143871051857366e-03, 1.923460214914280e-02, -2.695443331814118e-02, -5.630286660394183e-03, -2.699895270461768e-02, -2.076570614427486e-02, -4.273849404823444e-03, -2.082030903679371e-02, -1.435303780065840e-02, -3.251582040656570e-03, -1.444397461961969e-02, -1.771889298491168e-02, -3.738975638514112e-03, -1.780260577924951e-02, -1.771889298491168e-02, -3.738975638514112e-03, -1.780260577924951e-02, 7.599737581027217e-04, -6.837357067852691e-04, 9.480794164261815e-04, -6.364125780651906e-01, -2.252618147845850e-01, -6.309694937197158e-01, -3.371976515190410e-01, -1.103430174240472e-01, -3.337429003286918e-01, -1.243833728577241e-01, -3.354025103560437e-02, -1.237380080568849e-01, -2.073135703261194e-01, -6.212491691805239e-02, -2.077831368168704e-01, -2.073135703261194e-01, -6.212491691805253e-02, -2.077831368168703e-01, -3.887066293342276e-02, -8.976729369103374e-03, -3.888352412133758e-02, -2.978406769392637e+02, -3.140449424900741e+01, -2.924127182334840e+02, -1.182642606498698e+02, -2.313280582573650e+01, -1.090735070736186e+02, -1.567371872332969e-01, -3.959244665862609e-02, -1.543541234033615e-01, -3.111355485823684e+01, -8.036063508558044e+00, -2.845024043901344e+01, -3.111355485823682e+01, -8.036063508558030e+00, -2.845024043901344e+01, -2.245174402727923e+04, 1.469498587274684e+04, -2.018120658291156e+04, -2.563364562389926e+07, 8.108228600029173e+07, -3.013851077893763e+07, -2.797732799370852e+06, 5.271354702381382e+06, -2.303830765485186e+06, -3.692375875255607e+01, -9.449346523420884e+00, -3.532233320578047e+01, -1.688847292076389e+06, 1.132360611991284e+06, -5.490613278522886e+05, -1.688847292076393e+06, 1.132360611991289e+06, -5.490613278522906e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
