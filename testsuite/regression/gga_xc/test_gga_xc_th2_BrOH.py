
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.691602125352670e+01, -4.691598563229724e+01, -4.691649474483442e+01, -4.691706307444695e+01, -4.691599688567617e+01, -4.691599688567617e+01, -3.569012282662089e+00, -3.569035085385779e+00, -3.569808244537233e+00, -3.569225885785020e+00, -3.569039060221797e+00, -3.569039060221797e+00, -7.259840072550596e-01, -7.259462762365030e-01, -7.282540240449256e-01, -7.324299319261511e-01, -7.259665096807203e-01, -7.259665096807203e-01, -2.343281173342290e-01, -2.353673468354101e-01, -8.437868144944926e-01, -1.969162384484661e-01, -2.346084626370820e-01, -2.346084626370820e-01, -7.508089498638146e-03, -8.746226130773943e-03, -9.230671507693250e-02, 6.756080233367116e-04, -7.675207670370218e-03, -7.675207670370218e-03, -5.464380149372774e+00, -5.466421493315561e+00, -5.464589884656621e+00, -5.466177180887315e+00, -5.465426543176064e+00, -5.465426543176064e+00, -2.088000758870422e+00, -2.097830614229810e+00, -2.088270944649715e+00, -2.095764834897826e+00, -2.094804279126092e+00, -2.094804279126092e+00, -6.105889635345395e-01, -6.448990749806099e-01, -5.824629274279495e-01, -5.917561606207108e-01, -6.299410284669968e-01, -6.299410284669968e-01, -1.682047998540678e-01, -2.610342022712255e-01, -1.623792364728305e-01, -2.003025270118526e+00, -1.767322627429047e-01, -1.767322627429047e-01, 2.564243623723188e-03, 4.513894434807555e-04, 2.366279054871880e-02, -1.144867296599460e-01, 1.000593732511048e-02, 1.000593732511046e-02, -6.106132443532857e-01, -6.096277649998327e-01, -6.098614700325665e-01, -6.101140161382176e-01, -6.099774075992319e-01, -6.099774075992319e-01, -5.909465991382549e-01, -5.480187203162901e-01, -5.583283649220196e-01, -5.690197871811855e-01, -5.632850109954010e-01, -5.632850109954011e-01, -6.759019404469112e-01, -3.070250676509655e-01, -3.408267088648219e-01, -3.960944785303814e-01, -3.659150450443990e-01, -3.659150450443989e-01, -4.998561491692117e-01, -9.284061677976792e-02, -1.118860227299217e-01, -3.670626671626597e-01, -1.347638383840236e-01, -1.347638383840237e-01, -1.835529705303975e-02, 2.289697952474291e-02, 1.670047485394404e-02, -1.253789999353756e-01, 1.894013382974577e-02, 1.894013382974576e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.287892034024480e+01, -5.287714936282568e+01, -5.287239737979139e+01, -5.290133383346876e+01, -5.287796006750857e+01, -5.287796006750857e+01, -4.996250404463429e+00, -4.996309063278100e+00, -4.998150006589410e+00, -4.996165028525387e+00, -4.996304477495348e+00, -4.996304477495348e+00, -8.029429710715869e-01, -8.010392910023325e-01, -7.479871879425667e-01, -7.554038138015885e-01, -8.022543386198175e-01, -8.022543386198175e-01, -2.255624341130817e-01, -2.297258210391772e-01, -9.953754997292291e-01, -1.485235002033323e-01, -2.268338646962474e-01, -2.268338646962474e-01, 6.469895967290126e-02, 6.316763226083537e-02, -4.208726640331444e-03, 8.655270223038787e-02, 6.306005956619547e-02, 6.306005956619547e-02, -7.678407815001421e+00, -7.676958124522833e+00, -7.678270959165301e+00, -7.677143704334825e+00, -7.677651357074315e+00, -7.677651357074315e+00, -2.263423692551705e+00, -2.295031609476587e+00, -2.236382738383227e+00, -2.261234044127474e+00, -2.319341336143434e+00, -2.319341336143434e+00, -7.445519250730315e-01, -8.436904004557263e-01, -7.044633074623419e-01, -7.606430312418682e-01, -7.783106653440425e-01, -7.783106653440425e-01, -9.160237051786203e-02, -2.086437830430865e-01, -9.259962652666266e-02, -2.790300790361514e+00, -1.195512720638262e-01, -1.195512720638262e-01, 8.629026078223447e-02, 8.400274672983354e-02, 7.707365454261726e-02, -3.762668397914870e-02, 8.065723750521835e-02, 8.065723750521835e-02, -8.103426440335471e-01, -7.974693178169106e-01, -8.018584748925123e-01, -8.053880386478562e-01, -8.036042319084608e-01, -8.036042319084608e-01, -7.851680195064608e-01, -6.255538582599658e-01, -6.703838862038237e-01, -7.128013787869126e-01, -6.912687262174951e-01, -6.912687262174951e-01, -8.846494504560418e-01, -2.686054101149730e-01, -3.290434088506325e-01, -4.408763760422816e-01, -3.818754585789503e-01, -3.818754585789501e-01, -5.642256607432624e-01, 5.683648035703317e-03, -2.312259287863329e-02, -4.265708759651251e-01, -7.067286155102533e-02, -7.067286155102537e-02, 6.301047117277062e-02, 8.858801737349456e-02, 8.736499846444962e-02, -6.775565246972348e-02, 7.913718114360441e-02, 7.913718114360445e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.314413791522372e-08, -8.314938511537094e-08, -8.316467230654900e-08, -8.307891844258635e-08, -8.314697299003048e-08, -8.314697299003048e-08, 3.994947514220853e-06, 3.995794383960427e-06, 4.018898936450396e-06, 3.978054519789989e-06, 3.995360792131341e-06, 3.995360792131341e-06, -5.186020197721006e-03, -5.214600016951516e-03, -5.986137443523451e-03, -5.795698412960138e-03, -5.196406072832317e-03, -5.196406072832317e-03, -6.997363455467212e-01, -6.750397485003821e-01, -2.282348388339878e-03, -1.875488718251507e+00, -6.923076497761163e-01, -6.923076497761163e-01, -4.852529392582478e+03, -4.231406051865925e+03, -5.893872763107372e+01, -4.118565910357502e+04, -4.381690598147261e+03, -4.381690598147261e+03, 1.468934401909801e-06, 1.464033290083848e-06, 1.468438923041211e-06, 1.464628378178926e-06, 1.466422242754470e-06, 1.466422242754470e-06, -5.536800973831558e-05, -5.264269711049769e-05, -5.734398637649853e-05, -5.516642370011413e-05, -5.099910080675890e-05, -5.099910080675890e-05, -8.646732180115314e-03, -4.318708522574194e-03, -1.094117914837941e-02, -8.238494853571688e-03, -7.195574620218452e-03, -7.195574620218452e-03, -4.816518422012427e+00, -6.124176683558491e-01, -5.095170713363151e+00, 1.281188220717266e-04, -3.142721480934689e+00, -3.142721480934689e+00, -4.603767225936814e+04, -3.104365902666077e+04, -8.031915018156193e+04, -2.162065899322259e+01, -4.234988659318701e+04, -4.234988659318700e+04, -3.298731933819939e-03, -5.975088464402725e-03, -5.412142897329063e-03, -4.779749900384538e-03, -5.126226352735903e-03, -5.126226352735907e-03, -3.643186989751928e-03, -1.622641148817290e-02, -1.346345182093957e-02, -1.108996748952130e-02, -1.229169701053424e-02, -1.229169701053424e-02, -3.285951360294777e-03, -2.821407834975372e-01, -1.583803691942327e-01, -6.835659544826660e-02, -1.047823022023830e-01, -1.047823022023831e-01, -2.466185239810986e-02, -7.295348581437341e+01, -2.926901996888064e+01, -8.995672427300688e-02, -9.667827311105087e+00, -9.667827311105084e+00, -2.946696238102541e+03, -1.478938699694839e+06, -2.209881788808971e+05, -1.143770541980091e+01, -7.092851762769489e+04, -7.092851762769520e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
