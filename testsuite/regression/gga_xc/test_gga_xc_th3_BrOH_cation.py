
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.581985340887591e+01, -2.581992216812866e+01, -2.582034180886883e+01, -2.581931617337007e+01, -2.581983712006899e+01, -2.581983712006899e+01, -3.520799087308663e+00, -3.520788694785174e+00, -3.520635318226714e+00, -3.521564272832124e+00, -3.520873426437512e+00, -3.520873426437512e+00, -7.294719292792686e-01, -7.292844707270849e-01, -7.271406799821899e-01, -7.320199754229133e-01, -7.315397976111654e-01, -7.315397976111654e-01, -2.349843619199439e-01, -2.359673565547022e-01, -8.391581838914889e-01, -2.076058418561997e-01, -2.243262311847640e-01, -2.243262311847639e-01, -8.578089224928483e-02, -8.481190753267132e-02, -1.341739874091765e-01, -8.270117505373217e-02, -5.126402430824421e-02, -5.126402430824415e-02, -5.240492698276782e+00, -5.241644310489541e+00, -5.240548573903073e+00, -5.241564719932587e+00, -5.241074368780615e+00, -5.241074368780615e+00, -2.126475748490965e+00, -2.135794135537056e+00, -2.129069769780063e+00, -2.137101711132319e+00, -2.130683423020333e+00, -2.130683423020333e+00, -6.228688149679389e-01, -6.597553594363997e-01, -5.814905081486549e-01, -5.886317568203032e-01, -6.308821890763908e-01, -6.308821890763906e-01, -1.831687255642062e-01, -2.565089492968093e-01, -1.759245674416125e-01, -1.940272910315239e+00, -1.851535774620274e-01, -1.851535774620274e-01, -7.264781501614220e-02, -7.799672268989631e-02, -4.104774709612295e-02, -1.462772217905993e-01, -4.830964526093624e-02, -4.830964526093627e-02, -6.091532825502463e-01, -6.082992842814680e-01, -6.085252056869184e-01, -6.087582493126913e-01, -6.086341946505607e-01, -6.086341946505607e-01, -5.924417638350877e-01, -5.429438068971569e-01, -5.551946820943841e-01, -5.683727484875631e-01, -5.613593032657811e-01, -5.613593032657811e-01, -6.910026293194803e-01, -2.986380435023747e-01, -3.327633719263700e-01, -3.948575963496631e-01, -3.602956337952272e-01, -3.602956337952271e-01, -5.029411176840898e-01, -1.363490797138529e-01, -1.456345833664682e-01, -3.738627286284817e-01, -1.531245854471004e-01, -1.531245854471004e-01, -9.668204141680319e-02, -3.764270491074455e-02, -5.370463640604643e-02, -1.500202105682765e-01, -4.353661561649697e-02, -4.353661561649692e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.547953445825038e+01, -3.547413921266264e+01, -3.548112652259050e+01, -3.547202867763343e+01, -3.547102530430293e+01, -3.548108394679431e+01, -3.549585503525069e+01, -3.546394195745573e+01, -3.550449502708582e+01, -3.545109536123022e+01, -3.550449502708582e+01, -3.545109536123022e+01, -4.446787620556420e+00, -4.446032092467408e+00, -4.446937849066581e+00, -4.446075109973981e+00, -4.448282444032429e+00, -4.449422666399194e+00, -4.445264169301698e+00, -4.446041573377476e+00, -4.436278897159871e+00, -4.456995560577631e+00, -4.436278897159871e+00, -4.456995560577631e+00, -8.354444709975681e-01, -8.384754022130548e-01, -8.333150771125105e-01, -8.370347019649119e-01, -7.921197246206257e-01, -7.868887501823936e-01, -7.960168861312680e-01, -7.976741083660417e-01, -8.205094149790172e-01, -7.703076959129229e-01, -8.205094149790172e-01, -7.703076959129229e-01, -2.096963193116738e-01, -2.182888840467110e-01, -2.135503887444629e-01, -2.233406864875652e-01, -9.608484073384559e-01, -9.947586276231913e-01, -1.505103183775277e-01, -1.531591413240176e-01, -2.170087925716581e-01, -1.069086858691951e-01, -2.170087925716583e-01, -1.069086858691954e-01, 2.194749317952906e-02, 1.901767601918101e-02, 2.063577447558285e-02, 1.769040549911299e-02, -1.257603882226922e-02, -1.655797775279952e-02, 2.570395088697314e-02, 2.692047957376178e-02, 8.350333330547660e-03, -4.422412922369501e-03, 8.350333330547577e-03, -4.422412922369501e-03, -7.079384380865450e+00, -7.042331222789198e+00, -7.082954754283328e+00, -7.044906334429282e+00, -7.079868171262293e+00, -7.042124563946678e+00, -7.082304783010539e+00, -7.045113648673434e+00, -7.081288474005643e+00, -7.043547326837537e+00, -7.081288474005643e+00, -7.043547326837537e+00, -2.151286073802956e+00, -2.150686989041621e+00, -2.180098468004416e+00, -2.176808744592856e+00, -2.100806540436730e+00, -2.121026678522761e+00, -2.124633359509368e+00, -2.146060493883854e+00, -2.211812362243676e+00, -2.158881430944748e+00, -2.211812362243676e+00, -2.158881430944748e+00, -7.681256451658212e-01, -7.665476100625097e-01, -8.604092563023285e-01, -8.607151818687664e-01, -6.977779196857024e-01, -7.172162546968359e-01, -7.498033355017344e-01, -7.680775195732228e-01, -7.981770290694540e-01, -7.670379137859853e-01, -7.981770290694540e-01, -7.670379137859854e-01, -9.067798701928939e-02, -9.217281450178116e-02, -1.983305861403756e-01, -1.996500190800278e-01, -7.920803210510333e-02, -8.674355517791352e-02, -2.613882748314943e+00, -2.608893526271709e+00, -1.153383314417874e-01, -1.243805455382257e-01, -1.153383314417874e-01, -1.243805455382257e-01, 2.479268828533555e-02, 2.246241218656211e-02, 2.440917215063305e-02, 2.348223952191048e-02, 7.834201757430367e-03, 8.705252790312595e-03, -4.883985510323002e-02, -4.938041962612383e-02, 9.720118168975684e-03, 1.276238263900207e-02, 9.720118168975743e-03, 1.276238263900209e-02, -8.029023513943870e-01, -8.052320326303587e-01, -7.912389826987311e-01, -7.935437859355104e-01, -7.951838976338622e-01, -7.975012820097165e-01, -7.985564734939675e-01, -8.008660526569381e-01, -7.968554323745415e-01, -7.991683778982259e-01, -7.968554323745415e-01, -7.991683778982259e-01, -7.838667859995908e-01, -7.857971707911843e-01, -6.255687583871616e-01, -6.277094778383503e-01, -6.697566181331227e-01, -6.720010348026585e-01, -7.143826047431397e-01, -7.162287229750809e-01, -6.917755249598690e-01, -6.936849377004041e-01, -6.917755249598690e-01, -6.936849377004041e-01, -9.001153940630343e-01, -9.013049590817789e-01, -2.569644981117939e-01, -2.587523922501126e-01, -3.188120429432189e-01, -3.221343766642070e-01, -4.463013141300720e-01, -4.483151384081807e-01, -3.797316734945118e-01, -3.796096121719822e-01, -3.797316734945118e-01, -3.796096121719821e-01, -5.770170806783684e-01, -5.801436682282027e-01, -1.034737386764489e-02, -1.089075323787776e-02, -2.697160975195264e-02, -2.997887669013957e-02, -4.370261621846052e-01, -4.421819976066405e-01, -7.129572277252719e-02, -7.668794488525604e-02, -7.129572277252713e-02, -7.668794488525602e-02, 2.077432848593464e-02, 1.881663132799828e-02, 1.291512710366285e-02, 1.287047470195173e-02, 1.765058943398887e-02, 1.583433619933990e-02, -6.695452723144373e-02, -6.847163266691543e-02, 5.856168227579352e-03, 1.069079589364626e-02, 5.856168227579265e-03, 1.069079589364621e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th3_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.184786318520920e-06, -8.413645864749854e-06, 4.184785639109013e-06, 4.184765804188620e-06, -8.413608550723865e-06, 4.184765247618361e-06, 4.184671626329881e-06, -8.413431148264677e-06, 4.184670859938796e-06, 4.184975306382314e-06, -8.413986555691153e-06, 4.184975922900273e-06, 4.184813510833006e-06, -8.413697166870919e-06, 4.184819700846527e-06, 4.184813510833006e-06, -8.413697166870919e-06, 4.184819700846527e-06, 2.212539166989470e-05, -5.922555149875545e-05, 2.213786184942089e-05, 2.212683597865984e-05, -5.922553433638821e-05, 2.214017824333895e-05, 2.217305584492502e-05, -5.922494211800004e-05, 2.218275727863695e-05, 2.210149715718320e-05, -5.922445965892508e-05, 2.211310741933330e-05, 2.213550883184148e-05, -5.922537716342663e-05, 2.213391963417601e-05, 2.213550883184148e-05, -5.922537716342663e-05, 2.213391963417601e-05, -4.077943269981160e-03, -9.573781715375006e-03, -4.057446839410535e-03, -4.107500664482499e-03, -9.618179294380153e-03, -4.082929852433246e-03, -4.761445048079841e-03, -1.076278185037913e-02, -4.780656850215994e-03, -4.628817537319355e-03, -1.039829396660301e-02, -4.621579139404705e-03, -4.540632382250757e-03, -1.048617829690741e-02, -4.776532624262654e-03, -4.540632382250757e-03, -1.048617829690741e-02, -4.776532624262654e-03, -7.312894981752776e-01, -1.450567874566992e+00, -6.711899433686515e-01, -7.121104760402505e-01, -1.378681689550337e+00, -6.456044767972232e-01, -2.254364544231625e-03, -4.957511832651125e-03, -2.290319920602930e-03, -1.583639101372762e+00, -3.665386540596451e+00, -1.517928712295589e+00, -8.184621017983306e-01, -3.052420830313796e+00, -3.861115181343317e+00, -8.184621017983328e-01, -3.052420830313794e+00, -3.861115181343320e+00, -1.513228022319499e+04, -6.119006119389678e+04, -1.146675162292653e+04, -1.363221512456512e+04, -5.238385590079444e+04, -1.002230014093973e+04, -8.569643404806430e+01, -2.636001335320227e+02, -7.050599188158888e+01, -5.455658635375262e+04, -3.251857930221416e+05, -5.864083061299998e+04, -1.068731074464068e+04, -2.042109474680185e+05, -2.049349056156341e+05, -1.068731074464069e+04, -2.042109474680185e+05, -2.049349056156343e+05, 2.534383368249321e-05, -4.972680903042932e-05, 2.534657994772084e-05, 2.535470705558607e-05, -4.972029078120336e-05, 2.535706862270421e-05, 2.534436294960068e-05, -4.972648476064326e-05, 2.534687333107320e-05, 2.535367381786518e-05, -4.972072988643109e-05, 2.535641907877282e-05, 2.534945486830803e-05, -4.972351828430576e-05, 2.535184415730562e-05, 2.534945486830803e-05, -4.972351828430576e-05, 2.535184415730562e-05, -1.159171495268078e-04, -7.900198703780517e-05, -1.158999404566372e-04, -1.111252234641091e-04, -7.766100898242029e-05, -1.110446095450944e-04, -1.214345196743287e-04, -8.003632098578601e-05, -1.212219422294910e-04, -1.170292465603898e-04, -7.879123876152601e-05, -1.168599997315097e-04, -1.105114841596141e-04, -7.778901207252820e-05, -1.107747278435410e-04, -1.105114841596141e-04, -7.778901207252820e-05, -1.107747278435410e-04, -6.117470810852670e-03, -1.661962967805773e-02, -6.091409402227868e-03, -1.907830475000981e-03, -1.183964955911318e-02, -1.845394957808262e-03, -8.761261335952524e-03, -2.271343284870688e-02, -8.883126791681755e-03, -5.890520510943536e-03, -1.945048262015106e-02, -6.327726665742103e-03, -5.748282248319863e-03, -1.558804494164737e-02, -5.304369388362156e-03, -5.748282248319862e-03, -1.558804494164738e-02, -5.304369388362172e-03, -4.477159584151700e+00, -1.221491956353212e+01, -4.381554932350978e+00, -5.699792764365695e-01, -1.441277181484570e+00, -5.628521228084635e-01, -6.194248324195105e+00, -1.578438976889168e+01, -5.274219009128599e+00, 1.263848201571678e-04, -8.296750791886278e-05, 1.273252060334243e-04, -3.146653839953800e+00, -7.249787051808371e+00, -2.887084095861388e+00, -3.146653839953800e+00, -7.249787051808371e+00, -2.887084095861388e+00, -1.450845277967775e+05, -7.164643904087236e+05, -1.128835592163787e+05, -6.777027759114132e+04, -3.483825814204489e+05, -6.098539159689577e+04, -2.922630299796756e+05, -7.905377617044724e+05, -2.401690291296511e+05, -2.027758924326705e+01, -5.656944862225096e+01, -1.965405216117830e+01, -2.695957302793945e+05, -4.947366152756642e+05, -6.864011839108313e+04, -2.695957302793943e+05, -4.947366152756642e+05, -6.864011839108296e+04, -9.139352021458726e-04, -1.629638212602145e-02, -9.178105868790693e-04, -4.015411375070271e-03, -1.668101850296609e-02, -4.039606670038787e-03, -3.357204403308408e-03, -1.654445408640359e-02, -3.376390951588492e-03, -2.564396619169859e-03, -1.643296592621907e-02, -2.591118725634538e-03, -2.998853187263120e-03, -1.648865876617447e-02, -3.021509229547304e-03, -2.998853187263120e-03, -1.648865876617447e-02, -3.021509229547304e-03, 7.837142544423249e-04, -1.821224232316910e-02, 7.006752406129636e-04, -1.352517184389617e-02, -3.335568702200303e-02, -1.351680520291790e-02, -1.114805146276277e-02, -2.784467960750283e-02, -1.115004631008332e-02, -8.813477772495026e-03, -2.342398253013698e-02, -8.826981256459549e-03, -1.002508091963278e-02, -2.556726301988314e-02, -1.003338201982059e-02, -1.002508091963278e-02, -2.556726301988314e-02, -1.003338201982059e-02, -1.318021032056196e-03, -9.726259084111299e-03, -1.251545352759179e-03, -2.577928797722937e-01, -6.449245861958148e-01, -2.547727731417733e-01, -1.427474984276687e-01, -3.392063686375586e-01, -1.406841608998630e-01, -5.818539759425669e-02, -1.243444463641399e-01, -5.769921848634696e-02, -9.166641974872539e-02, -2.066879496514982e-01, -9.197152457246535e-02, -9.166641974872557e-02, -2.066879496514984e-01, -9.197152457246555e-02, -1.907632919005219e-02, -4.593135968506739e-02, -1.902415812682430e-02, -8.629680052131653e+01, -3.016212792844067e+02, -8.419823061079708e+01, -3.693982007372933e+01, -1.133780092522062e+02, -3.320233835618693e+01, -7.573826200235143e-02, -1.422338419348475e-01, -7.402910458464305e-02, -1.093295697932254e+01, -2.609613759234784e+01, -9.764620965495533e+00, -1.093295697932255e+01, -2.609613759234781e+01, -9.764620965495530e+00, -5.036836157613579e+03, -2.123788758384552e+04, -4.339597923976194e+03, -3.873116926558133e+06, -1.899547571156830e+07, -4.782050864119417e+06, -4.980978554496358e+05, -2.023497097270770e+06, -3.827925690580381e+05, -1.273730298915514e+01, -3.187793232619256e+01, -1.204231939586162e+01, -3.804455569743302e+05, -6.158767610775429e+05, -9.012708998099998e+04, -3.804455569743313e+05, -6.158767610775447e+05, -9.012708998100022e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
