
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_147_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.115180114464693e+01, -2.115185610118923e+01, -2.115213330132638e+01, -2.115123275728682e+01, -2.115182985912158e+01, -2.115182985912158e+01, -3.513918278054436e+00, -3.513920117037893e+00, -3.514113858708440e+00, -3.514511482940088e+00, -3.513933888412592e+00, -3.513933888412592e+00, -7.291461798992088e-01, -7.289187548779096e-01, -7.264410824490362e-01, -7.308218274190349e-01, -7.290602816032994e-01, -7.290602816032994e-01, -2.408507173107351e-01, -2.417260623523298e-01, -8.528215224017157e-01, -2.049329680788543e-01, -2.410814779467333e-01, -2.410814779467333e-01, -1.512384405738944e-02, -1.592046918303092e-02, -7.586459962988094e-02, -6.796362711159783e-03, -1.573705646344055e-02, -1.573705646344055e-02, -5.228502178930261e+00, -5.229738983435294e+00, -5.228630687947133e+00, -5.229592301834375e+00, -5.229132713963870e+00, -5.229132713963870e+00, -2.088243343243120e+00, -2.098034924842940e+00, -2.088955125858029e+00, -2.096447542408332e+00, -2.094402647639962e+00, -2.094402647639962e+00, -6.232694994488477e-01, -6.679919283650541e-01, -5.939642228396580e-01, -6.108573906978616e-01, -6.443200363052228e-01, -6.443200363052228e-01, -1.662745011217437e-01, -2.657821679117807e-01, -1.630511885597911e-01, -1.970315177798222e+00, -1.828855832054197e-01, -1.828855832054197e-01, -6.539946194433937e-03, -7.546800213121549e-03, -5.546838917275799e-03, -1.065529725690035e-01, -6.830351582746368e-03, -6.830351582746395e-03, -6.393480651291733e-01, -6.327262449378250e-01, -6.346508913876107e-01, -6.364808207371310e-01, -6.355254477458366e-01, -6.355254477458366e-01, -6.203703337405609e-01, -5.536023235855431e-01, -5.688102024935244e-01, -5.842844357231375e-01, -5.761508174632111e-01, -5.761508174632111e-01, -6.990441784378637e-01, -3.094706442123073e-01, -3.416612032012275e-01, -3.995294332653570e-01, -3.671110957080710e-01, -3.671110957080709e-01, -5.043159862679644e-01, -7.002531099959552e-02, -9.632314107755308e-02, -3.730695365848616e-01, -1.359311286885709e-01, -1.359311286885708e-01, -1.803388267099278e-02, -1.939159398931431e-03, -3.771767862725957e-03, -1.291863756988990e-01, -5.742058604013898e-03, -5.742058604013865e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_147_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.856664510192490e+01, -2.856675198913937e+01, -2.856722545868042e+01, -2.856547511327836e+01, -2.856670149894045e+01, -2.856670149894045e+01, -4.574040226155415e+00, -4.574112533420338e+00, -4.576282576463577e+00, -4.573501240001168e+00, -4.574096773429082e+00, -4.574096773429082e+00, -8.496093325343379e-01, -8.474342069734886e-01, -7.843222639411700e-01, -7.925759143276854e-01, -8.488237792121776e-01, -8.488237792121776e-01, -2.287946460264764e-01, -2.331223333249295e-01, -1.049681591568168e+00, -1.872267403697037e-01, -2.300909407695937e-01, -2.300909407695937e-01, -2.073138973734419e-02, -2.183249061224676e-02, -9.849364140613692e-02, -9.230597139059944e-03, -2.157957516967634e-02, -2.157957516967634e-02, -7.057757135712189e+00, -7.060410279397140e+00, -7.058029856876430e+00, -7.060092934820464e+00, -7.059118230742151e+00, -7.059118230742151e+00, -2.231879273723061e+00, -2.260685526347189e+00, -2.206447353881559e+00, -2.229009873496719e+00, -2.284160848167062e+00, -2.284160848167062e+00, -7.865100487724239e-01, -8.872584134147903e-01, -7.451454730674186e-01, -8.005446698974443e-01, -8.201572826254201e-01, -8.201572826254201e-01, -1.756936041685224e-01, -2.271163626047167e-01, -1.716423337650345e-01, -2.649377551218538e+00, -1.785278877111935e-01, -1.785278877111935e-01, -8.878641334415098e-03, -1.026279805244995e-02, -7.520752154013256e-03, -1.293300555042237e-01, -9.279698128235070e-03, -9.279698128234795e-03, -8.515981199389023e-01, -8.416995897066614e-01, -8.468726178184276e-01, -8.499631937413239e-01, -8.485624044004709e-01, -8.485624044004709e-01, -8.239696451629732e-01, -6.640478469928343e-01, -7.097122994141143e-01, -7.501878120467694e-01, -7.294764195716804e-01, -7.294764195716805e-01, -9.275098779080615e-01, -2.714834485424537e-01, -3.325780780146007e-01, -4.645546591688534e-01, -3.956901956816557e-01, -3.956901956816555e-01, -5.980772340597647e-01, -9.218745718394847e-02, -1.205252051565723e-01, -4.492381218624515e-01, -1.517188108755692e-01, -1.517188108755700e-01, -2.474792771743932e-02, -2.603746325285476e-03, -5.091373545346323e-03, -1.451677635663313e-01, -7.787097716618856e-03, -7.787097716618824e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_147_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_147", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.011617476710915e-09, 1.011715781489597e-09, 1.011991894053268e-09, 1.010385283976731e-09, 1.011670677241994e-09, 1.011670677241994e-09, -1.398837888113354e-06, -1.397950807171353e-06, -1.373303003643075e-06, -1.414400421690331e-06, -1.398354484479897e-06, -1.398354484479897e-06, -3.704686715767099e-03, -3.743900236119237e-03, -4.858677355735930e-03, -4.678135844794022e-03, -3.718851262595546e-03, -3.718851262595546e-03, -6.803878214052739e-01, -6.536041578292684e-01, -1.412839102544040e-03, -1.286466333380692e+00, -6.725052012561178e-01, -6.725052012561178e-01, 1.842307280217150e+00, 1.617983764664260e+00, -2.323921210957673e+00, 3.551055788228751e+00, 1.738509329724252e+00, 1.738509329724252e+00, 4.402019098166358e-07, 4.471313626164081e-07, 4.408922576803874e-07, 4.462804197685893e-07, 4.437783581642021e-07, 4.437783581642021e-07, -6.132502485265729e-05, -5.876095900626196e-05, -6.326407320836604e-05, -6.122663093368992e-05, -5.707049501623821e-05, -5.707049501623821e-05, -4.876229990849219e-03, 1.775011851456319e-03, -6.345038213782795e-03, -2.142633314284082e-03, -3.901119590167830e-03, -3.901119590167830e-03, -1.558229327151182e+00, -5.265182557966799e-01, -1.737492419528647e+00, 5.082866002349375e-05, -1.603490265997515e+00, -1.603490265997515e+00, 3.867054706080546e+00, 3.496819412769772e+00, 1.228889131765381e+01, -2.518066041015653e+00, 5.564309883805780e+00, 5.564309883829906e+00, 1.133076365854310e-02, 3.324571975084626e-03, 6.181610877017316e-03, 8.718514584856464e-03, 7.437161983318203e-03, 7.437161983318201e-03, 1.275133784000475e-02, -1.076199570695450e-02, -7.996257532327324e-03, -5.817095704233943e-03, -6.999437668805496e-03, -6.999437668805493e-03, 1.047383720393478e-03, -2.709814718562267e-01, -1.496115774449114e-01, -5.015317017166963e-02, -8.864283433709041e-02, -8.864283433709041e-02, -1.694971484847407e-02, -1.934396096198988e+00, -2.207939421770261e+00, -6.301960116069381e-02, -2.429188300500378e+00, -2.429188300500427e+00, 7.636372672530791e-01, 1.080363022979965e+01, 7.606338411704359e+00, -2.854412619177247e+00, 9.075764110931949e+00, 9.075764110868668e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
