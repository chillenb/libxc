
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_407_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.118018666894483e+01, -2.118024046391775e+01, -2.118051432379945e+01, -2.117963275478312e+01, -2.118021475546099e+01, -2.118021475546099e+01, -3.517184421538324e+00, -3.517186951686562e+00, -3.517399546801736e+00, -3.517765395298660e+00, -3.517200410645926e+00, -3.517200410645926e+00, -7.279790371568304e-01, -7.277354685833622e-01, -7.247643926868015e-01, -7.291424966351715e-01, -7.278873540794608e-01, -7.278873540794608e-01, -2.465750764851921e-01, -2.469601735460756e-01, -8.520530464910930e-01, -2.121285475038062e-01, -2.466534929120661e-01, -2.466534929120661e-01, -1.359769648339665e-03, -1.677495248835266e-03, -4.985470760022086e-02, 7.914448413414970e-04, -1.611728309613766e-03, -1.611728309613766e-03, -5.230645592562401e+00, -5.231789842009050e+00, -5.230764888020405e+00, -5.231654538175468e+00, -5.231228455325219e+00, -5.231228455325219e+00, -2.075645918675221e+00, -2.086048719845537e+00, -2.075356706945099e+00, -2.083340456970186e+00, -2.083468018005908e+00, -2.083468018005908e+00, -6.227275314591357e-01, -6.714867204926817e-01, -5.933352912337250e-01, -6.126668003146861e-01, -6.439675972925559e-01, -6.439675972925559e-01, -1.609404054862429e-01, -2.743870837071126e-01, -1.588211370801358e-01, -1.971955257947926e+00, -1.858819821844629e-01, -1.858819821844629e-01, 8.137382314841063e-04, 7.037656073216139e-04, 8.564026726617137e-04, -8.684214444505776e-02, 7.762927015469649e-04, 7.762927015469717e-04, -6.465797601730647e-01, -6.366759941616480e-01, -6.394795656184064e-01, -6.421034873176640e-01, -6.407315051416901e-01, -6.407315051416901e-01, -6.289934237546871e-01, -5.527997015135366e-01, -5.681175156387549e-01, -5.844338123346370e-01, -5.757190543505017e-01, -5.757190543505017e-01, -7.022095600591888e-01, -3.160466563250331e-01, -3.448733896028881e-01, -3.990903231462681e-01, -3.679588600733170e-01, -3.679588600733169e-01, -5.035818640770988e-01, -4.281452784972987e-02, -7.249725262628669e-02, -3.722894342778112e-01, -1.267502505700309e-01, -1.267502505700308e-01, -2.511796155452133e-03, 6.113713358312485e-04, 8.519807325069864e-04, -1.202917849142386e-01, 8.530517073032330e-04, 8.530517073032681e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_407_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.847769347048072e+01, -2.847778830908470e+01, -2.847822490436850e+01, -2.847667155288136e+01, -2.847774337236222e+01, -2.847774337236222e+01, -4.590152375945602e+00, -4.590209374250609e+00, -4.591960714699295e+00, -4.589906380340344e+00, -4.590201128660304e+00, -4.590201128660304e+00, -8.519515519494885e-01, -8.498035119668506e-01, -7.867680126524169e-01, -7.952360969902585e-01, -8.511757854569137e-01, -8.511757854569137e-01, -2.149876138722473e-01, -2.185552112775932e-01, -1.052714175428434e+00, -2.149120665911874e-01, -2.160148410427743e-01, -2.160148410427743e-01, -4.349687797352058e-03, -5.018583134532237e-03, -9.465470026146393e-02, 4.616238223951413e-04, -4.895909897942082e-03, -4.895909897942082e-03, -7.028766991551457e+00, -7.031201959016361e+00, -7.029017601360581e+00, -7.030910977564950e+00, -7.030014843876002e+00, -7.030014843876002e+00, -2.300165611646131e+00, -2.328165415300846e+00, -2.276483523301645e+00, -2.298513013326863e+00, -2.349311590393987e+00, -2.349311590393987e+00, -7.888754742279152e-01, -9.003966274638107e-01, -7.469112510295359e-01, -8.125070179337947e-01, -8.238079636132314e-01, -8.238079636132314e-01, -2.253424605038225e-01, -2.322427156862508e-01, -2.211356857462459e-01, -2.653888480376824e+00, -2.218286461174487e-01, -2.218286461174487e-01, 5.259831506655211e-04, 2.228535948215560e-04, 6.704397671090714e-04, -1.529531624376499e-01, 4.055927387590591e-04, 4.055927387593116e-04, -8.674884696252884e-01, -8.547601162954500e-01, -8.595970345746539e-01, -8.629163285607050e-01, -8.612846351391278e-01, -8.612846351391277e-01, -8.425719639408271e-01, -6.628790628759166e-01, -7.109497621748847e-01, -7.570462937559003e-01, -7.329431268815744e-01, -7.329431268815741e-01, -9.405886479207377e-01, -2.603702234390561e-01, -3.180774086382333e-01, -4.595677423122306e-01, -3.854567252216672e-01, -3.854567252216677e-01, -5.957692827627872e-01, -8.144171923099398e-02, -1.311369840493646e-01, -4.471353465008446e-01, -1.968284150880466e-01, -1.968284150880474e-01, -6.613337598597825e-03, 7.440463762658233e-04, 9.125739249944977e-04, -1.897001499460132e-01, 6.530756169593169e-04, 6.530756169594533e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_407_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_407", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.885797856716389e-10, 6.886472167512885e-10, 6.888368634876062e-10, 6.877348245362088e-10, 6.886162758942051e-10, 6.886162758942051e-10, -1.222229648462445e-06, -1.221575265640085e-06, -1.203350010179959e-06, -1.233531600112190e-06, -1.221868920798974e-06, -1.221868920798974e-06, -3.566171763269572e-03, -3.603813247994495e-03, -4.695269132267597e-03, -4.513883463747076e-03, -3.579766665928800e-03, -3.579766665928800e-03, -8.302815595792925e-01, -8.054069853806722e-01, -1.340697756168088e-03, -9.881256676276083e-01, -8.233575374488967e-01, -8.233575374488967e-01, 4.942588048098126e+01, 4.881473432808750e+01, 8.224765545213733e+00, 4.193000560022116e+01, 5.087547691716858e+01, 5.087547691716858e+01, 3.115183578596708e-07, 3.172500091829315e-07, 3.120888665748081e-07, 3.165455122406469e-07, 3.144744854783921e-07, 3.144744854783921e-07, -5.131013017394016e-05, -4.906823346921261e-05, -5.305279899993973e-05, -5.125919432007485e-05, -4.756638810714794e-05, -4.756638810714794e-05, -4.475743016082973e-03, 5.421909712235965e-03, -5.945830713179538e-03, 1.766448207905614e-03, -3.368141095723823e-03, -3.368141095723823e-03, 1.915762370110137e-01, -5.406488222102463e-01, 1.878525540129776e-01, 5.691173836698841e-05, -6.472560885630182e-01, -6.472560885630182e-01, 4.477050599941954e+01, 4.374840250725082e+01, 1.317007812883232e+02, 4.571552275501394e+00, 6.574688377162073e+01, 6.574688377153794e+01, 2.580595452325860e-02, 8.513419725122692e-03, 1.205375578493306e-02, 1.588122094927663e-02, 1.378375437174167e-02, 1.378375437174168e-02, 4.189676002378876e-02, -1.080533310420919e-02, -7.613317727108679e-03, -3.835889425023572e-03, -6.073174181654011e-03, -6.073174181654023e-03, 3.761177559685652e-03, -3.044801945031147e-01, -1.712800672803526e-01, -5.384940528969957e-02, -9.954806518789271e-02, -9.954806518789208e-02, -1.732283596805101e-02, 7.704300962950771e+00, 5.007866655424575e+00, -6.508081234395145e-02, 1.684743244632906e+00, 1.684743244632871e+00, 3.524044052885519e+01, 8.911125985092798e+01, 7.185278009532274e+01, 2.330328557750535e+00, 9.875847732136495e+01, 9.875847732113168e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
