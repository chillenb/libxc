
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_pbelyp1w_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103594057240300e+01, -2.103596807843912e+01, -2.103615802409280e+01, -2.103574739926350e+01, -2.103595293838144e+01, -2.103595293838144e+01, -3.544902549906165e+00, -3.544865238404937e+00, -3.544088199003689e+00, -3.546101265029864e+00, -3.544942077036557e+00, -3.544942077036557e+00, -7.417834036486349e-01, -7.417086132843036e-01, -7.413771995066515e-01, -7.463834543749944e-01, -7.454547006135960e-01, -7.454547006135960e-01, -2.283675985220412e-01, -2.303538146062235e-01, -8.530979474657761e-01, -1.844240520862021e-01, -2.175956642742440e-01, -2.175956642742439e-01, -1.185335841370194e-02, -1.246931105792594e-02, -6.123917454991793e-02, -6.888914955792327e-03, -9.064788161606172e-03, -9.064788161606172e-03, -5.112345103541515e+00, -5.111743099625868e+00, -5.112328105308789e+00, -5.111796476064433e+00, -5.112034009951538e+00, -5.112034009951538e+00, -2.173264621207608e+00, -2.183382029775721e+00, -2.174138101767452e+00, -2.183082156754550e+00, -2.178433254695629e+00, -2.178433254695629e+00, -6.256404213074386e-01, -6.515131138573880e-01, -5.849780435807224e-01, -5.837107049944649e-01, -6.325908652811577e-01, -6.325908652811578e-01, -1.314597305692624e-01, -2.361921807011907e-01, -1.228184406240289e-01, -1.880102034795867e+00, -1.540939346104825e-01, -1.540939346104825e-01, -5.330956413858635e-03, -6.736039710892254e-03, -5.167577307485002e-03, -8.845295742205128e-02, -6.329912735306381e-03, -6.329912735306383e-03, -5.985791928186712e-01, -6.011066995260839e-01, -6.002352698827869e-01, -5.994952434449620e-01, -5.998662011470756e-01, -5.998662011470756e-01, -5.814389974753928e-01, -5.496348552927492e-01, -5.589349293263687e-01, -5.675273513313736e-01, -5.629952779198029e-01, -5.629952779198029e-01, -6.825817124209573e-01, -2.880120564376329e-01, -3.306812250804940e-01, -3.980331596010184e-01, -3.624589180083991e-01, -3.624589180083990e-01, -5.086693459983095e-01, -5.904701464411097e-02, -7.387947052478382e-02, -3.754604606696378e-01, -1.093963435048349e-01, -1.093963435048350e-01, -1.662878086850984e-02, -1.819861270496697e-03, -3.803285220727688e-03, -1.035235297570190e-01, -5.841632298958270e-03, -5.841632298958264e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_pbelyp1w_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524161356776963e+01, -2.524158418059460e+01, -2.524172892384555e+01, -2.524166824433062e+01, -2.524206950009706e+01, -2.524216267854484e+01, -2.524076383568301e+01, -2.524050245752423e+01, -2.524168121626071e+01, -2.524114645610507e+01, -2.524168121626071e+01, -2.524114645610507e+01, -4.121039989722861e+00, -4.121201277311682e+00, -4.121082111569162e+00, -4.121249593430311e+00, -4.122168538622422e+00, -4.122454119328470e+00, -4.120945277982906e+00, -4.121233715085766e+00, -4.120324090454924e+00, -4.122220340539755e+00, -4.120324090454924e+00, -4.122220340539755e+00, -8.249966962057769e-01, -8.281451588544816e-01, -8.235183188237002e-01, -8.273365277565088e-01, -8.015883503889223e-01, -7.980103538541767e-01, -8.055217895775976e-01, -8.066788019745891e-01, -8.271600983200168e-01, -7.944591304313593e-01, -8.271600983200168e-01, -7.944591304313593e-01, -2.508667649794006e-01, -2.506781529692196e-01, -2.513109256755303e-01, -2.515573362675082e-01, -9.446555783618616e-01, -9.736024452472254e-01, -2.291092048246186e-01, -2.297630205522465e-01, -2.268592039398898e-01, -2.417135978460754e-01, -2.268592039398896e-01, -2.417135978460754e-01, -1.550420792574852e-02, -1.592559605308292e-02, -1.627074191375479e-02, -1.677356479753131e-02, -8.190297192304975e-02, -8.461915632627959e-02, -9.189849518418192e-03, -9.123311816487078e-03, -1.247604582152048e-02, -9.715029235181347e-03, -1.247604582152048e-02, -9.715029235181347e-03, -6.286207289629164e+00, -6.284705108440071e+00, -6.288997353485157e+00, -6.287403960046429e+00, -6.286360178943370e+00, -6.284798197223389e+00, -6.288756761833560e+00, -6.287247345137148e+00, -6.287636561822350e+00, -6.286061227126787e+00, -6.287636561822350e+00, -6.286061227126787e+00, -2.273271186942715e+00, -2.273171445216623e+00, -2.290495822440928e+00, -2.289947640317403e+00, -2.257920079576800e+00, -2.261296225861971e+00, -2.272569442100282e+00, -2.276203435425899e+00, -2.294295617616764e+00, -2.284737927703382e+00, -2.294295617616764e+00, -2.284737927703382e+00, -7.456038261197847e-01, -7.442172921066068e-01, -8.310692228343012e-01, -8.316721202565267e-01, -6.793258776323708e-01, -6.987427503812859e-01, -7.278126081787706e-01, -7.453375473020761e-01, -7.734296635968603e-01, -7.439847092456561e-01, -7.734296635968605e-01, -7.439847092456562e-01, -1.990965169277249e-01, -1.987775640674230e-01, -2.808021563084950e-01, -2.808303498635309e-01, -1.858128812532479e-01, -1.886165007662601e-01, -2.407953337075831e+00, -2.407033591297789e+00, -2.101787794456436e-01, -2.009032203018825e-01, -2.101787794456436e-01, -2.009032203018825e-01, -7.027290176029838e-03, -7.144549033870587e-03, -8.924508421913720e-03, -8.982854028307126e-03, -6.779077879098702e-03, -6.947221030948610e-03, -1.315429535889445e-01, -1.323940723256445e-01, -7.605125474103678e-03, -8.727180504571526e-03, -7.605125474103680e-03, -8.727180504571528e-03, -7.783312451627116e-01, -7.807251227857306e-01, -7.669889586220441e-01, -7.694267845814122e-01, -7.708907860914148e-01, -7.733361428978324e-01, -7.742076784079752e-01, -7.765982698441096e-01, -7.725419445349067e-01, -7.749591705890982e-01, -7.725419445349067e-01, -7.749591705890982e-01, -7.605991153799926e-01, -7.625137743532637e-01, -6.177347474156428e-01, -6.196798912283492e-01, -6.535613868347144e-01, -6.559128121693527e-01, -6.940747617069266e-01, -6.959902803803264e-01, -6.731272093259285e-01, -6.750550463359291e-01, -6.731272093259285e-01, -6.750550463359291e-01, -8.676240413191626e-01, -8.692199039169938e-01, -3.200899612542032e-01, -3.200891363766442e-01, -3.545917500152445e-01, -3.549158517962389e-01, -4.443529693316604e-01, -4.458743534582733e-01, -3.916129611107237e-01, -3.913830279137949e-01, -3.916129611107237e-01, -3.913830279137948e-01, -5.707689491979464e-01, -5.735722985794621e-01, -7.985360947352806e-02, -8.018003988603195e-02, -1.073840172457868e-01, -1.095109991325260e-01, -4.312171433352855e-01, -4.355728881358276e-01, -1.587520009544803e-01, -1.575741610757383e-01, -1.587520009544803e-01, -1.575741610757384e-01, -2.185850240347993e-02, -2.220899427017313e-02, -2.421726658457597e-03, -2.423987613134483e-03, -4.987514263798068e-03, -5.119945079245759e-03, -1.505347788237828e-01, -1.517058586690197e-01, -7.113071426503111e-03, -8.044792628274428e-03, -7.113071426503103e-03, -8.044792628274419e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_pbelyp1w_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.407831718964133e-08, 1.083102759008488e-11, -1.407839443538234e-08, -1.407820396988145e-08, 1.083087319123062e-11, -1.407831173296352e-08, -1.407771241716327e-08, 1.083013914100214e-11, -1.407764602858955e-08, -1.407899968065427e-08, 1.083243745840908e-11, -1.407927959368645e-08, -1.407825904152731e-08, 1.083124001927297e-11, -1.407853044232052e-08, -1.407825904152731e-08, 1.083124001927297e-11, -1.407853044232052e-08, -1.881061734512439e-05, 1.408033252516688e-07, -1.881628377301508e-05, -1.881097504713749e-05, 1.408017063742734e-07, -1.881707780973450e-05, -1.882396145831845e-05, 1.407459098333420e-07, -1.882703028342523e-05, -1.878922825964537e-05, 1.407005093922587e-07, -1.879340017655324e-05, -1.882052718449264e-05, 1.407843606921919e-07, -1.880413963745523e-05, -1.882052718449264e-05, 1.407843606921919e-07, -1.880413963745523e-05, -1.135247839942042e-02, 8.469549224104451e-04, -1.140323778077685e-02, -1.135025682610578e-02, 8.518558606904152e-04, -1.141357292561917e-02, -1.139123288702281e-02, 9.773551784428020e-04, -1.125925944190198e-02, -1.100496644413819e-02, 9.363858307744637e-04, -1.105049795863299e-02, -1.160237314281645e-02, 1.018656322350667e-03, -1.011189109901986e-02, -1.160237314281645e-02, 1.018656322350667e-03, -1.011189109901986e-02, -9.586177674768376e-01, 4.449528647290051e-01, -9.656491436947996e-01, -9.764580045153055e-01, 4.203401676480766e-01, -9.732794494518766e-01, -6.567863279807248e-03, 3.938818700962041e-04, -6.270949121988299e-03, -9.023462247121061e-01, 1.240167016588545e+00, -9.177802022298570e-01, -1.143908670375588e+00, 1.762690441916702e+00, -8.746581027320555e-01, -1.143908670375587e+00, 1.762690441916702e+00, -8.746581027320572e-01, -4.901171867711220e+00, 8.228167361479431e-08, -4.852045142682782e+00, -5.164107023763644e+00, 3.376294363721389e-07, -5.137690690579883e+00, 4.969987982271444e+00, 1.360584294730653e+01, 4.012988937018275e+00, -4.489257847500432e+00, 3.061302701451817e-17, -4.367392023804800e+00, -4.892974143692321e+00, 7.924185573457057e-13, -1.241489774951421e+01, -4.892974143692332e+00, 7.924185573457057e-13, -1.241489774951424e+01, -4.122126623816804e-06, 1.652940299748593e-08, -4.125790778852322e-06, -4.122589384089280e-06, 1.651337955216721e-08, -4.126236412040897e-06, -4.122121627332810e-06, 1.652860663066508e-08, -4.125782026920881e-06, -4.122516599010515e-06, 1.651445690079939e-08, -4.126189942608440e-06, -4.122389789523938e-06, 1.652131156390644e-08, -4.126019348150164e-06, -4.122389789523938e-06, 1.652131156390644e-08, -4.126019348150164e-06, -1.427873335005490e-04, 3.037372279211582e-06, -1.428090193984731e-04, -1.400528120065791e-04, 2.922280520257467e-06, -1.401555034284532e-04, -1.424578823230528e-04, 3.125169411797524e-06, -1.427182906627686e-04, -1.401394425786012e-04, 3.019723690208395e-06, -1.403252258190766e-04, -1.414298423633882e-04, 2.935134113062647e-06, -1.413090311331578e-04, -1.414298423633882e-04, 2.935134113062647e-06, -1.413090311331578e-04, -2.258998543491570e-02, 1.667698491311414e-03, -2.280281432737362e-02, -1.865859135327497e-02, 1.097385689037765e-03, -1.865698207874423e-02, -3.172518629596975e-02, 2.510935099777962e-03, -2.865253094727135e-02, -3.145448472109460e-02, 2.062285393532958e-03, -2.807723032311104e-02, -2.009053572378224e-02, 1.606835823983316e-03, -2.369288827283649e-02, -2.009053572378224e-02, 1.606835823983316e-03, -2.369288827283649e-02, 4.640750877857994e-01, 3.969605205820069e+00, 3.187060897539929e-01, -4.906549303987614e-01, 4.386766326718147e-01, -4.942593695795988e-01, 1.051023465897023e+00, 4.936266440953091e+00, 3.896840336501948e-01, -2.346438757250850e-04, 3.367572936902015e-06, -2.350504783450493e-04, -3.699632976476881e-01, 2.488157366286731e+00, -1.250452967698694e+00, -3.699632976476881e-01, 2.488157366286731e+00, -1.250452967698694e+00, -6.302078258995564e+00, 4.011907556842686e-24, -5.454669574423942e+00, -5.426608546248804e+00, 9.092815757238681e-18, -5.010261513994756e+00, -3.091055832585660e+01, 4.185766058848473e-25, -3.438600703860231e+01, 3.066727272262048e+00, 1.113455283158668e+01, 3.048053856929924e+00, -1.537122964332544e+01, 7.111638862918034e-20, -1.509851506614284e+01, -1.537122964332540e+01, 7.111638862918031e-20, -1.509851506614282e+01, -2.643661361586548e-02, 1.627761112601844e-03, -2.610076059104548e-02, -2.621884081145322e-02, 1.675571736307525e-03, -2.589525528303609e-02, -2.629495754163868e-02, 1.658564294482091e-03, -2.596775950528057e-02, -2.635982759952671e-02, 1.644701048142339e-03, -2.602769877933920e-02, -2.632754283469234e-02, 1.651622991519585e-03, -2.599779523386745e-02, -2.632754283469234e-02, 1.651622991519585e-03, -2.599779523386745e-02, -2.972562298901399e-02, 1.868705926211398e-03, -2.939126673278805e-02, -3.908915314961366e-02, 3.994419011545935e-03, -3.871420539565402e-02, -3.648578368245401e-02, 3.180546943893084e-03, -3.609847275441437e-02, -3.386077864385226e-02, 2.559216689009512e-03, -3.349895023256100e-02, -3.525360861822203e-02, 2.856578970684286e-03, -3.486679199898687e-02, -3.525360861822203e-02, 2.856578970684286e-03, -3.486679199898687e-02, -1.542452030740912e-02, 8.631763776228307e-04, -1.537321950406791e-02, -3.399286355487498e-01, 1.682055002189839e-01, -3.408995602156032e-01, -2.559060959267527e-01, 7.603056709726494e-02, -2.561030066248484e-01, -1.465640941933271e-01, 2.133920585984772e-02, -1.446082893774278e-01, -2.012569010135250e-01, 4.070553318382730e-02, -2.024405190317875e-01, -2.012569010135250e-01, 4.070553318382731e-02, -2.024405190317878e-01, -5.380302911472603e-02, 5.994528630142272e-03, -5.307072671646763e-02, 4.502351139778869e+00, 1.307234817182508e+01, 4.390740148148121e+00, 5.481751292985359e+00, 1.390314399880895e+01, 4.672564699815502e+00, -1.912112414465420e-01, 2.537396857419306e-02, -1.841652560010829e-01, 1.370217321591166e+00, 7.179064146863144e+00, -1.309233756143404e-01, 1.370217321591162e+00, 7.179064146863144e+00, -1.309233756143450e-01, -3.883926260778760e+00, 2.528934259174567e-04, -3.964949090246538e+00, -1.939033108145706e+01, 2.109084753651742e-85, -3.434701799716860e+01, -1.196738734387583e+01, 1.230111359923434e-36, -1.274008358045070e+01, 1.218016446277809e+00, 8.161382890185564e+00, 9.821756487433581e-01, -3.169091155994365e+01, 6.052322831284908e-22, -1.567418979136076e+01, -3.169091155994369e+01, 6.052322831284592e-22, -1.567418979136080e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
