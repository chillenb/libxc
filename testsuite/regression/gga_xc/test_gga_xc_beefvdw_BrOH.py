
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_beefvdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.161412958852333e+01, -2.161415234134373e+01, -2.161433491784246e+01, -2.161396073079664e+01, -2.161414090979347e+01, -2.161414090979347e+01, -3.655759623144282e+00, -3.655724567504532e+00, -3.654910490398669e+00, -3.657076158156839e+00, -3.655756886402133e+00, -3.655756886402133e+00, -7.766082541691490e-01, -7.767453923862744e-01, -7.824604068469094e-01, -7.869097482611671e-01, -7.766538918572446e-01, -7.766538918572446e-01, -2.608312876299166e-01, -2.609302022503459e-01, -8.951110129066226e-01, -2.211335574433538e-01, -2.608171381467460e-01, -2.608171381467460e-01, -2.114706449901145e-02, -2.211471492189565e-02, -8.406572006749033e-02, -1.037352507690519e-02, -2.189170326291684e-02, -2.189170326291684e-02, -5.259442012094753e+00, -5.258936633390246e+00, -5.259396376130010e+00, -5.259003268553636e+00, -5.259173284421554e+00, -5.259173284421554e+00, -2.277026837366848e+00, -2.286271475162880e+00, -2.279745937672710e+00, -2.286948948494238e+00, -2.279725948932147e+00, -2.279725948932147e+00, -6.432103849160903e-01, -6.744975324404467e-01, -6.142565585736771e-01, -6.208044003904756e-01, -6.623863290850662e-01, -6.623863290850662e-01, -1.738704249263034e-01, -2.897855979890895e-01, -1.712578763593705e-01, -1.948863460619461e+00, -1.945621276054773e-01, -1.945621276054773e-01, -1.001655983052408e-02, -1.140661687829338e-02, -8.612460322525580e-03, -1.138230536835278e-01, -1.041858971188240e-02, -1.041858971214752e-02, -6.397623653641159e-01, -6.389986188395758e-01, -6.392309401483099e-01, -6.394401011392485e-01, -6.393316980295430e-01, -6.393316980295430e-01, -6.201648470229757e-01, -5.826715459600357e-01, -5.893411382716404e-01, -5.979872994405027e-01, -5.930666598632026e-01, -5.930666598632026e-01, -7.056820283424582e-01, -3.375480211400403e-01, -3.671813411271885e-01, -4.223263749921521e-01, -3.922611153336704e-01, -3.922611153336699e-01, -5.319785301494562e-01, -7.837733284678973e-02, -1.036529831984671e-01, -3.896205200697798e-01, -1.436826161344652e-01, -1.436826161344651e-01, -2.465029900784620e-02, -3.212369959822939e-03, -6.027571316564750e-03, -1.372966201756590e-01, -8.891188110065401e-03, -8.891188110065390e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_beefvdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.574387818991496e+01, -2.574398881042091e+01, -2.574445800937412e+01, -2.574264701384381e+01, -2.574393673082712e+01, -2.574393673082712e+01, -4.161553248388279e+00, -4.161636797786815e+00, -4.164099580771636e+00, -4.160716749354756e+00, -4.161613541377609e+00, -4.161613541377609e+00, -8.183392940740110e-01, -8.173146901206721e-01, -7.914241698453067e-01, -7.972410725503986e-01, -8.179669062093755e-01, -8.179669062093755e-01, -2.136127548948935e-01, -2.171322319391861e-01, -9.858694132134853e-01, -2.359170976566484e-01, -2.143644336380512e-01, -2.143644336380512e-01, -2.789556223528841e-02, -2.916137736806330e-02, -1.074707821922763e-01, -1.373490934933722e-02, -2.886810522691680e-02, -2.886810522691680e-02, -6.495458639709909e+00, -6.499556820236144e+00, -6.495874402561708e+00, -6.499061004507672e+00, -6.497564372259165e+00, -6.497564372259165e+00, -2.262628912783278e+00, -2.277847469821894e+00, -2.257235098427861e+00, -2.268728728972144e+00, -2.281281844860152e+00, -2.281281844860152e+00, -7.629060679411434e-01, -8.725878410436596e-01, -7.223274210475789e-01, -7.928852316316573e-01, -7.984874252339100e-01, -7.984874252339100e-01, -2.060300476311486e-01, -2.743569339463511e-01, -2.021205378537358e-01, -2.528072870587990e+00, -2.202994544159563e-01, -2.202994544159563e-01, -1.326354257622033e-02, -1.509772293947324e-02, -1.140653122500887e-02, -1.416524854529980e-01, -1.379255878640718e-02, -1.379255878672807e-02, -8.365731107645368e-01, -8.282667136172630e-01, -8.314111140561112e-01, -8.336943037083838e-01, -8.325640224194816e-01, -8.325640224194816e-01, -8.117671620073774e-01, -6.347949042600218e-01, -6.874009986986892e-01, -7.402886569601516e-01, -7.141342928279169e-01, -7.141342928235143e-01, -9.114352961503502e-01, -2.755338575659582e-01, -3.306409577347562e-01, -4.533967019062263e-01, -4.023256759583133e-01, -4.023256759584521e-01, -5.753368976138772e-01, -1.008555209410287e-01, -1.307499102590531e-01, -4.381347565056145e-01, -1.728252103880177e-01, -1.728252103880155e-01, -3.248916871821984e-02, -4.264835756013973e-03, -7.992007783120730e-03, -1.650883062474647e-01, -1.177543277654300e-02, -1.177543277655999e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_beefvdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.700737931325591e-09, -7.700639872025767e-09, -7.700181435295791e-09, -7.701787614721236e-09, -7.700686390721611e-09, -7.700686390721611e-09, -1.105828261146994e-05, -1.105789082717989e-05, -1.104528407138720e-05, -1.105766769581233e-05, -1.105789435389284e-05, -1.105789435389284e-05, -6.985990021733387e-03, -6.982472668088009e-03, -6.848565384857579e-03, -6.692774639552999e-03, -6.984836087388432e-03, -6.984836087388432e-03, -1.005071536918512e+00, -9.775221867317206e-01, -3.753700076810505e-03, -8.340615139000099e-01, -9.994532812795354e-01, -9.994532812795354e-01, -3.386838881704966e+00, -3.394624649206123e+00, -1.379841744422151e+00, -2.407288040258636e+00, -3.526415452087174e+00, -3.526415452087174e+00, -1.988742989293270e-06, -1.982942874438487e-06, -1.988158644649582e-06, -1.983649253227832e-06, -1.985769179724285e-06, -1.985769179724285e-06, -8.744192381433036e-05, -8.602319041194523e-05, -8.695722659727469e-05, -8.589133949549442e-05, -8.698308241230824e-05, -8.698308241230824e-05, -1.201470757720610e-02, -4.930313736200074e-03, -1.501222180679775e-02, -8.472380255845478e-03, -9.995471787352158e-03, -9.995471787352158e-03, -7.439892494455085e-01, -4.537506101083215e-01, -8.544347989098364e-01, -7.052306670555154e-05, -8.741329590527125e-01, -8.741329590527125e-01, -2.553854447931032e+00, -2.558435675733112e+00, -7.322367767847408e+00, -1.318827500428741e+00, -3.778737969763913e+00, -3.778737969763802e+00, -5.001443302422919e-03, -5.926431428730057e-03, -5.586429761740164e-03, -5.345466859834732e-03, -5.466066593410266e-03, -5.466066593410266e-03, -5.514489550363504e-03, -2.262345372105082e-02, -1.835531044307432e-02, -1.339259842138613e-02, -1.589382064250524e-02, -1.589382064326193e-02, -4.228935834864239e-03, -3.362759447186498e-01, -1.969966866886854e-01, -8.658663363387621e-02, -1.179302464283986e-01, -1.179302464283208e-01, -3.317908258280759e-02, -1.173993604387021e+00, -1.149510242195073e+00, -1.163948436611044e-01, -1.251277855193725e+00, -1.251277855193792e+00, -2.542894228920279e+00, -4.405543617565988e+00, -3.792011970683042e+00, -1.533439755559141e+00, -5.519170835936806e+00, -5.519170853770798e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
