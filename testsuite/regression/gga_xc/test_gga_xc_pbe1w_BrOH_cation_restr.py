
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_pbe1w_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.102642835316238e+01, -2.102645641932665e+01, -2.102664795312131e+01, -2.102622901266514e+01, -2.102643903350548e+01, -2.102643903350548e+01, -3.533132974412514e+00, -3.533098787780752e+00, -3.532394124588392e+00, -3.534280875469600e+00, -3.533175913218233e+00, -3.533175913218233e+00, -7.352566774828557e-01, -7.350947693069867e-01, -7.331059236103860e-01, -7.381043087090712e-01, -7.363491623507866e-01, -7.363491623507866e-01, -2.299903125052967e-01, -2.315525208374849e-01, -8.457330661163269e-01, -1.923879018213869e-01, -2.068129140567135e-01, -2.068129140567135e-01, -1.107054872144746e-02, -1.164340492379577e-02, -6.152783309574463e-02, -6.437900506327227e-03, -8.067986934317544e-03, -8.067986934317544e-03, -5.110299019686650e+00, -5.109839269381578e+00, -5.110287870466898e+00, -5.109881832187439e+00, -5.110060285946390e+00, -5.110060285946390e+00, -2.154478299731771e+00, -2.164684086370957e+00, -2.155099283731481e+00, -2.164102178855891e+00, -2.159823825044881e+00, -2.159823825044881e+00, -6.261297965831853e-01, -6.614232698238300e-01, -5.846065526556613e-01, -5.917504401302600e-01, -6.333825107039917e-01, -6.333825107039917e-01, -1.464834704266452e-01, -2.436344925309271e-01, -1.369640563698314e-01, -1.891369499722000e+00, -1.637624534050213e-01, -1.637624534050213e-01, -4.980616597632753e-03, -6.295092749468328e-03, -4.826081733570244e-03, -9.621765621278452e-02, -5.803291101719024e-03, -5.803291101719024e-03, -6.122128249076770e-01, -6.112970203391922e-01, -6.115612137914441e-01, -6.118208931540434e-01, -6.116849755380974e-01, -6.116849755380974e-01, -5.961244104116789e-01, -5.462547334709182e-01, -5.585437694130877e-01, -5.717381069510860e-01, -5.646954507393751e-01, -5.646954507393751e-01, -6.919342559527268e-01, -2.912352811149427e-01, -3.300694096906440e-01, -3.967091379268947e-01, -3.604042456644719e-01, -3.604042456644719e-01, -5.058432810747254e-01, -5.905087573986051e-02, -7.911803180032653e-02, -3.764973040037233e-01, -1.182896366403034e-01, -1.182896366403034e-01, -1.554229478699840e-02, -1.701025762214398e-03, -3.551687325680376e-03, -1.121487887038311e-01, -5.374113906091579e-03, -5.374113906091576e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_pbe1w_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.528235650419817e+01, -2.528245709030592e+01, -2.528287709048256e+01, -2.528138114217948e+01, -2.528216884795879e+01, -2.528216884795879e+01, -4.149044801884969e+00, -4.149095747241976e+00, -4.150373709437228e+00, -4.148922088549550e+00, -4.149203505733805e+00, -4.149203505733805e+00, -8.375714929935146e-01, -8.360933819820994e-01, -8.010653046455520e-01, -8.078602452286556e-01, -8.069203370402367e-01, -8.069203370402367e-01, -2.349493139921687e-01, -2.375679386899245e-01, -9.729165737988963e-01, -1.989738649704473e-01, -2.101902891186745e-01, -2.101902891186745e-01, -1.469579992689111e-02, -1.545291900864162e-02, -7.926890402030211e-02, -8.557926249363563e-03, -1.071914625672114e-02, -1.071914625672114e-02, -6.330199115033955e+00, -6.333101868426626e+00, -6.330328657868480e+00, -6.332891256250668e+00, -6.331672448298377e+00, -6.331672448298377e+00, -2.267745974285959e+00, -2.285816936328092e+00, -2.251635295791162e+00, -2.267378832716247e+00, -2.285794452088097e+00, -2.285794452088097e+00, -7.668914519122478e-01, -8.554257004010745e-01, -7.095921237267929e-01, -7.601436919532575e-01, -7.819461163105786e-01, -7.819461163105786e-01, -1.665341654705616e-01, -2.461595048537209e-01, -1.579099754012666e-01, -2.448603119282577e+00, -1.756469547909631e-01, -1.756469547909631e-01, -6.623285923014285e-03, -8.368185746768437e-03, -6.416094600691820e-03, -1.178088385226123e-01, -7.713821458926464e-03, -7.713821458926465e-03, -7.997944682431076e-01, -7.911549393419827e-01, -7.943398508509479e-01, -7.968614153342038e-01, -7.956138990409057e-01, -7.956138990409057e-01, -7.803266657943888e-01, -6.312379636814379e-01, -6.741313542822289e-01, -7.182683038001052e-01, -6.958738463967526e-01, -6.958738463967526e-01, -8.933046427857853e-01, -2.922738143690512e-01, -3.402325749032449e-01, -4.559532172590027e-01, -3.909277830448589e-01, -3.909277830448590e-01, -5.843995806650599e-01, -7.635655137616540e-02, -1.000979470153336e-01, -4.497336396649612e-01, -1.376103259896610e-01, -1.376103259896610e-01, -2.060529976380705e-02, -2.264545043532237e-03, -4.724927606170192e-03, -1.322355359376829e-01, -7.144074105610518e-03, -7.144074105610512e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_pbe1w_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbe1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.908599715988753e-09, -6.908547977323462e-09, -6.908254289627316e-09, -6.909025361366290e-09, -6.908630386115785e-09, -6.908630386115785e-09, -8.716342018548502e-06, -8.716464357345743e-06, -8.718440962364419e-06, -8.708505743405788e-06, -8.715665636918093e-06, -8.715665636918093e-06, -4.738315726007490e-03, -4.752600484174813e-03, -5.029885154148550e-03, -4.887252903811355e-03, -4.928292964035384e-03, -4.928292964035384e-03, -5.092175892746197e-01, -5.010950787292238e-01, -2.672072030028475e-03, -7.562975192055087e-01, -6.875178696336290e-01, -6.875178696336292e-01, -2.434047434519020e+00, -2.571100564470938e+00, -1.416006131280251e+00, -2.213717812480510e+00, -2.811518848278911e+00, -2.811518848279952e+00, -1.866602816861417e-06, -1.865430542806402e-06, -1.866543391810594e-06, -1.865508867254909e-06, -1.866014018506405e-06, -1.866014018506405e-06, -6.881000777997931e-05, -6.740539659521412e-05, -6.897992773645824e-05, -6.774738875738569e-05, -6.793274372834627e-05, -6.793274372834627e-05, -7.692153364650079e-03, -4.296094129364916e-03, -1.038661188045515e-02, -7.247263852464715e-03, -7.145132356160497e-03, -7.145132356160497e-03, -9.326719912999784e-01, -3.463362851172100e-01, -1.033413020428028e+00, -7.485894067155800e-05, -1.072531488819014e+00, -1.072531488819014e+00, -2.917258080646703e+00, -2.605311110806392e+00, -1.635640752942577e+01, -1.559845506072818e+00, -7.611993698774389e+00, -7.611993698767770e+00, -4.526254383510263e-03, -5.761642606424422e-03, -5.372398739183527e-03, -5.015401188858179e-03, -5.198176325904303e-03, -5.198176325904303e-03, -4.555153188425427e-03, -1.518197243502702e-02, -1.265079551061356e-02, -9.877355175876628e-03, -1.132866510531178e-02, -1.132866510531178e-02, -3.704330308600557e-03, -1.956171803383194e-01, -1.256911679806798e-01, -5.496560247267138e-02, -8.677091173771229e-02, -8.677091173771227e-02, -2.064220411572495e-02, -1.293986305332884e+00, -1.277320220856685e+00, -6.247690652831669e-02, -1.681462418083620e+00, -1.681462418083624e+00, -1.960131316196587e+00, -1.279083862045027e+01, -6.189183815036682e+00, -1.712981014474875e+00, -9.614751058510221e+00, -9.614751058511601e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
