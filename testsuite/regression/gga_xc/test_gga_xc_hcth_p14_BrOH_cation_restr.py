
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_p14_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.049352809882289e+01, -2.049358327088525e+01, -2.049384832312527e+01, -2.049302708284569e+01, -2.049345457630355e+01, -2.049345457630355e+01, -3.468886961862593e+00, -3.468884801426113e+00, -3.468917825038320e+00, -3.469497073348019e+00, -3.468965037373809e+00, -3.468965037373809e+00, -7.475112166729010e-01, -7.471248371319781e-01, -7.397701790772460e-01, -7.447810258316764e-01, -7.432471691240725e-01, -7.432471691240725e-01, -2.478194267892727e-01, -2.494734412418453e-01, -8.568047708596394e-01, -2.094586540362192e-01, -2.241669561901920e-01, -2.241669561901920e-01, -1.670315398021938e-02, -1.750869477854983e-02, -7.937952034296131e-02, -1.003214691178831e-02, -1.241326621872925e-02, -1.241326621872924e-02, -5.113738125172035e+00, -5.114683313691493e+00, -5.113784868745785e+00, -5.114619191971700e+00, -5.114215025748737e+00, -5.114215025748737e+00, -2.067293304597240e+00, -2.078363516435759e+00, -2.064321071372782e+00, -2.073998034678878e+00, -2.074961311314385e+00, -2.074961311314385e+00, -6.504726929859093e-01, -6.976943986205879e-01, -6.075400047948794e-01, -6.238764017601204e-01, -6.590067448307541e-01, -6.590067448307541e-01, -1.650210217760235e-01, -2.604131843249946e-01, -1.558075393702207e-01, -1.958448122611799e+00, -1.810219917871229e-01, -1.810219917871229e-01, -7.864425891678144e-03, -9.821258127479325e-03, -7.630633246431205e-03, -1.156937274767233e-01, -9.091620008777588e-03, -9.091620008777591e-03, -6.524001788863928e-01, -6.462469610977998e-01, -6.480124116966696e-01, -6.497700428053892e-01, -6.488515645067108e-01, -6.488515645067108e-01, -6.376425575531884e-01, -5.640846345182047e-01, -5.807490157946515e-01, -5.992603647789086e-01, -5.894488768973291e-01, -5.894488768973291e-01, -7.284771710843639e-01, -3.078709521095052e-01, -3.468420487969888e-01, -4.158284783989686e-01, -3.779033427452116e-01, -3.779033427452116e-01, -5.241920648427884e-01, -7.665519821375766e-02, -9.857694703678305e-02, -3.973350282508714e-01, -1.367963270942953e-01, -1.367963270942953e-01, -2.290759405942646e-02, -2.804705235856645e-03, -5.696222157680725e-03, -1.309138420212277e-01, -8.452366011365942e-03, -8.452366011365939e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_p14_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.713035086126197e+01, -2.713045597320389e+01, -2.713089843871567e+01, -2.712933503986158e+01, -2.713015778521850e+01, -2.713015778521850e+01, -4.461748628743313e+00, -4.461811127251581e+00, -4.463360616606278e+00, -4.461490010017116e+00, -4.461928373190053e+00, -4.461928373190053e+00, -8.962746209040477e-01, -8.945058607074200e-01, -8.504824461135833e-01, -8.580078986910809e-01, -8.572683530057555e-01, -8.572683530057555e-01, -2.568232425404868e-01, -2.593719443924438e-01, -1.042612302559075e+00, -2.173179098696548e-01, -2.312655968988235e-01, -2.312655968988232e-01, -2.179007728341144e-02, -2.282558971722174e-02, -9.644521146600796e-02, -1.315283305398099e-02, -1.624296086918960e-02, -1.624296086918964e-02, -6.783514132977724e+00, -6.785883985766163e+00, -6.783622569042750e+00, -6.785714837248089e+00, -6.784716934071357e+00, -6.784716934071357e+00, -2.355761322142913e+00, -2.378617061996286e+00, -2.329191077694097e+00, -2.349179756046035e+00, -2.381488193593137e+00, -2.381488193593137e+00, -8.218624399549024e-01, -9.158399084611785e-01, -7.606443138850069e-01, -8.135643090963509e-01, -8.375649578392377e-01, -8.375649578392377e-01, -1.752298243533222e-01, -2.679053737612548e-01, -1.664340116286899e-01, -2.599259286554117e+00, -1.892167086306221e-01, -1.892167086306221e-01, -1.032816414732043e-02, -1.287759742506404e-02, -1.001606937718336e-02, -1.296718596476111e-01, -1.192182976512617e-02, -1.192182976512615e-02, -8.582885903644299e-01, -8.480468177356925e-01, -8.524659819182124e-01, -8.557535349043219e-01, -8.541849876360492e-01, -8.541849876360492e-01, -8.350361460533302e-01, -6.762136440537128e-01, -7.226715253496951e-01, -7.682821309942782e-01, -7.452182603565710e-01, -7.452182603565710e-01, -9.555937197021072e-01, -3.154800227805028e-01, -3.641335320021322e-01, -4.884802215562542e-01, -4.180620227296810e-01, -4.180620227296809e-01, -6.259978964651579e-01, -9.382817261646860e-02, -1.158169941579578e-01, -4.817720964680936e-01, -1.466508016045716e-01, -1.466508016045714e-01, -2.975964532501526e-02, -3.703625572815533e-03, -7.494977182418970e-03, -1.415746411359952e-01, -1.108882152171137e-02, -1.108882152171135e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_p14_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p14", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.259588891891932e-10, -3.258843640838772e-10, -3.256651825468797e-10, -3.267716887234953e-10, -3.261759299149662e-10, -3.261759299149662e-10, -1.961573056966065e-06, -1.960914563570781e-06, -1.945468562749697e-06, -1.970729304137388e-06, -1.960585904255258e-06, -1.960585904255258e-06, -2.805877521015488e-03, -2.831296396686177e-03, -3.426684013011316e-03, -3.306437343948586e-03, -3.324705903063400e-03, -3.324705903063400e-03, -4.749854002361160e-01, -4.685243162193206e-01, -1.420842132737466e-03, -7.344127220736381e-01, -6.427390832674823e-01, -6.427390832674850e-01, -8.394022363690038e+00, -8.841272275189768e+00, -3.830714792972552e+00, -7.818242767344616e+00, -9.840828119541245e+00, -9.840828119540515e+00, 3.921288941611109e-08, 4.394099664619021e-08, 3.940776079848044e-08, 4.358183446591116e-08, 4.162003059462377e-08, 4.162003059462377e-08, -4.239782327053438e-05, -4.091951625903806e-05, -4.386606155424799e-05, -4.255531723820146e-05, -4.083978502571499e-05, -4.083978502571499e-05, -3.525576009196998e-03, 1.567865623490025e-03, -5.353674885889836e-03, -7.439927708141513e-05, -3.034264953307292e-03, -3.034264953307292e-03, -1.293607560611635e+00, -3.170705119559198e-01, -1.535986579176221e+00, 2.686921673122107e-05, -1.174776953775786e+00, -1.174776953775786e+00, -1.038936661958310e+01, -9.207753448220101e+00, -5.825222901135469e+01, -3.185247723291018e+00, -2.695975985631936e+01, -2.695975985628366e+01, 1.007083423601940e-02, 2.509355470823580e-03, 4.629085834901851e-03, 6.948755332283046e-03, 5.725925916841728e-03, 5.725925916841728e-03, 1.155118704171956e-02, -9.886871658282901e-03, -6.957045206294642e-03, -3.826140509337551e-03, -5.493727305583013e-03, -5.493727305583013e-03, 9.320276481647378e-04, -1.768276511477409e-01, -1.126348910327379e-01, -4.243747786919806e-02, -7.417305778125981e-02, -7.417305778125960e-02, -1.399250956634673e-02, -3.572148953701727e+00, -3.098773356161439e+00, -4.697286713913027e-02, -2.655345905638932e+00, -2.655345905638911e+00, -6.625085228343184e+00, -4.663977063463292e+01, -2.224276600866062e+01, -2.892289795911831e+00, -3.413648160737075e+01, -3.413648160734900e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
