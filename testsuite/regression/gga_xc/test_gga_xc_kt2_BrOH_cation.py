
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_kt2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.349700268287633e+01, -2.349700394998930e+01, -2.349713248735766e+01, -2.349711112937852e+01, -2.349710483899326e+01, -2.349710483899326e+01, -4.008437021467245e+00, -4.008346445468797e+00, -4.006350934585196e+00, -4.010574600397430e+00, -4.008424312473704e+00, -4.008424312473704e+00, -8.110363347421311e-01, -8.113208729451054e-01, -8.216063468039722e-01, -8.279086153953548e-01, -8.295220669874105e-01, -8.295220669874105e-01, -1.956861434081242e-01, -1.984992566874068e-01, -9.483854481997385e-01, -1.505676805302459e-01, -1.830645343621121e-01, -1.830645343621121e-01, -8.182730257298980e-03, -8.596808219937711e-03, -4.338832270069161e-02, -4.815702765241955e-03, -6.240139616807795e-03, -6.240139616807795e-03, -5.631809028466670e+00, -5.629770180666725e+00, -5.631733451206435e+00, -5.629933197264510e+00, -5.630765002851545e+00, -5.630765002851545e+00, -2.665856308473652e+00, -2.669643996791441e+00, -2.687568781837379e+00, -2.690598766871964e+00, -2.657845706747591e+00, -2.657845706747591e+00, -6.585981778753812e-01, -6.848966019649985e-01, -6.106190571949188e-01, -6.105968447996833e-01, -6.664542834314470e-01, -6.664542834314469e-01, -1.066542623634572e-01, -1.968137661453054e-01, -9.918460781932316e-02, -2.022143937461156e+00, -1.240958422646507e-01, -1.240958422646507e-01, -3.745365025133274e-03, -4.711091244925520e-03, -3.632907093312343e-03, -6.825648122066187e-02, -4.416026191138048e-03, -4.416026191138049e-03, -6.269833279685684e-01, -6.297394936621543e-01, -6.287807042453409e-01, -6.279736969426259e-01, -6.283774376417740e-01, -6.283774376417740e-01, -6.087089316083133e-01, -5.655630684424153e-01, -5.795457156763184e-01, -5.916247464620422e-01, -5.854534061558790e-01, -5.854534061558790e-01, -7.191993003856230e-01, -2.476294082034309e-01, -2.965208454659619e-01, -3.874941231187609e-01, -3.389885996231486e-01, -3.389885996231486e-01, -5.156189471472612e-01, -4.160951385911924e-02, -5.566858459013400e-02, -3.699737832039734e-01, -8.569249325466888e-02, -8.569249325466889e-02, -1.137764732972441e-02, -1.299287426849345e-03, -2.687581745414760e-03, -8.071465745069425e-02, -4.084485142169807e-03, -4.084485142169802e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_kt2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.554926701382724e+01, -2.554924236049517e+01, -2.554944816164470e+01, -2.554937404573294e+01, -2.554991228705986e+01, -2.555007055058982e+01, -2.554786756642788e+01, -2.554746559696904e+01, -2.554937987678348e+01, -2.554842235532729e+01, -2.554937987678348e+01, -2.554842235532729e+01, -4.033967725019417e+00, -4.034756420957549e+00, -4.034085376032899e+00, -4.034920102913772e+00, -4.037405451243036e+00, -4.038294940181789e+00, -4.032292872658144e+00, -4.033273255175454e+00, -4.032997735845351e+00, -4.036253893885276e+00, -4.032997735845351e+00, -4.036253893885276e+00, -8.361433136888343e-01, -8.430778939856078e-01, -8.335795097950031e-01, -8.420786738951215e-01, -7.988085467446697e-01, -7.872137182624414e-01, -7.963371968563979e-01, -8.002086134737866e-01, -8.523822125747171e-01, -7.341240818575929e-01, -8.523822125747171e-01, -7.341240818575929e-01, -2.514808608021774e-01, -2.585536944955489e-01, -2.545613514532786e-01, -2.627423562725728e-01, -9.222725396555677e-01, -9.717279705387126e-01, -1.957077901966264e-01, -1.975705906761030e-01, -2.505148275221338e-01, -1.672924134054436e-01, -2.505148275221338e-01, -1.672924134054436e-01, -1.067101009167469e-02, -1.091281089091629e-02, -1.118765290628794e-02, -1.147744669908332e-02, -5.606107217394542e-02, -5.766577057785719e-02, -6.388083708768621e-03, -6.351189682428824e-03, -8.482921055594832e-03, -7.024226308549406e-03, -8.482921055594832e-03, -7.024226308549406e-03, -6.471963095914922e+00, -6.470294252193163e+00, -6.477313105314763e+00, -6.475464727643031e+00, -6.472248256461402e+00, -6.470463806644653e+00, -6.476839870233076e+00, -6.475160481057962e+00, -6.474713903393560e+00, -6.472894015700133e+00, -6.474713903393560e+00, -6.472894015700133e+00, -1.775685379512096e+00, -1.775550592427758e+00, -1.808682348984443e+00, -1.807763126268366e+00, -1.709765267281245e+00, -1.729025344573839e+00, -1.739129887328400e+00, -1.758103388666984e+00, -1.840938847673421e+00, -1.799491624678581e+00, -1.840938847673421e+00, -1.799491624678581e+00, -7.930000471237497e-01, -7.915492445698408e-01, -8.771416582031133e-01, -8.777845115346646e-01, -7.283814550995424e-01, -7.496668785496780e-01, -7.706144243386885e-01, -7.911098717388720e-01, -8.215778423823618e-01, -7.898603548554769e-01, -8.215778423823618e-01, -7.898603548554770e-01, -1.391001901730785e-01, -1.399505245488860e-01, -2.549728084035324e-01, -2.558970064160755e-01, -1.275089060042073e-01, -1.317924693592332e-01, -2.528905132835003e+00, -2.527969524356125e+00, -1.589761504577138e-01, -1.651738616932597e-01, -1.589761504577138e-01, -1.651738616932597e-01, -4.924617279282964e-03, -4.988645476714963e-03, -6.215740134466467e-03, -6.247929931836304e-03, -4.760049976931312e-03, -4.852246408954117e-03, -8.929711737256973e-02, -8.961440942606343e-02, -5.408655451966891e-03, -6.014265532535804e-03, -5.408655451966892e-03, -6.014265532535805e-03, -8.195538579877175e-01, -8.223186642107114e-01, -8.105634557344658e-01, -8.133190787780955e-01, -8.136989316593517e-01, -8.164765521024224e-01, -8.163287578375383e-01, -8.190725129785700e-01, -8.150119989134226e-01, -8.177718404714329e-01, -8.150119989134226e-01, -8.177718404714329e-01, -7.997201184388437e-01, -8.019836511955505e-01, -6.706819061308563e-01, -6.729518653362049e-01, -7.049001224815045e-01, -7.075007324127178e-01, -7.414199060167895e-01, -7.435577201087864e-01, -7.227225890704908e-01, -7.248664211218315e-01, -7.227225890704908e-01, -7.248664211218315e-01, -9.147601613665964e-01, -9.165761403727326e-01, -3.180404074800627e-01, -3.194279317638886e-01, -3.776427838148038e-01, -3.805669178381888e-01, -4.922136881561784e-01, -4.943601814726305e-01, -4.323343284233486e-01, -4.322245778815157e-01, -4.323343284233486e-01, -4.322245778815156e-01, -6.250516931034823e-01, -6.284743017440145e-01, -5.450156088884866e-02, -5.469253581960725e-02, -7.229508630927217e-02, -7.361753524859066e-02, -4.742706523999546e-01, -4.799539443462309e-01, -1.102556252054966e-01, -1.139775509738787e-01, -1.102556252054966e-01, -1.139775509738787e-01, -1.489138009435289e-02, -1.509916186280641e-02, -1.724318141087765e-03, -1.725540951229961e-03, -3.522690164596436e-03, -3.594102501544331e-03, -1.052264698136863e-01, -1.062595015368136e-01, -5.055512482245853e-03, -5.557707511960706e-03, -5.055512482245846e-03, -5.557707511960697e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_kt2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_kt2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.913743272202873e-08, 0.000000000000000e+00, -2.913758280469071e-08, -2.913705618526752e-08, 0.000000000000000e+00, -2.913730926094561e-08, -2.913577730392545e-08, 0.000000000000000e+00, -2.913549752455576e-08, -2.914003166087178e-08, 0.000000000000000e+00, -2.914091954353180e-08, -2.913721189934130e-08, 0.000000000000000e+00, -2.913869738289579e-08, -2.913721189934130e-08, 0.000000000000000e+00, -2.913869738289579e-08, -4.144107259170911e-05, 0.000000000000000e+00, -4.144333280558974e-05, -4.144055470773748e-05, 0.000000000000000e+00, -4.144313561284127e-05, -4.143122889406785e-05, 0.000000000000000e+00, -4.142781959750147e-05, -4.142066042809703e-05, 0.000000000000000e+00, -4.141833685843224e-05, -4.146878346474689e-05, 0.000000000000000e+00, -4.140681910450775e-05, -4.146878346474689e-05, 0.000000000000000e+00, -4.140681910450775e-05, -2.008957131655911e-02, 0.000000000000000e+00, -1.987867002693345e-02, -2.017290944740074e-02, 0.000000000000000e+00, -1.991349762473952e-02, -2.131503003050626e-02, 0.000000000000000e+00, -2.169653682351126e-02, -2.110966080435316e-02, 0.000000000000000e+00, -2.099137516949460e-02, -1.947455584716378e-02, 0.000000000000000e+00, -2.306232414337591e-02, -1.947455584716378e-02, 0.000000000000000e+00, -2.306232414337591e-02, -5.951026673653365e-02, 0.000000000000000e+00, -5.943027118657882e-02, -5.948588927740554e-02, 0.000000000000000e+00, -5.938939302355743e-02, -1.345473767427502e-02, 0.000000000000000e+00, -1.212473998870797e-02, -5.982792447667615e-02, 0.000000000000000e+00, -5.981825649616724e-02, -5.941871458749858e-02, 0.000000000000000e+00, -5.995141684136009e-02, -5.941871458749857e-02, 0.000000000000000e+00, -5.995141684136007e-02, -5.999999930923648e-02, 0.000000000000000e+00, -5.999999911927893e-02, -5.999999916713167e-02, 0.000000000000000e+00, -5.999999890316009e-02, -5.999920382899389e-02, 0.000000000000000e+00, -5.999900988711532e-02, -5.999999990980200e-02, 0.000000000000000e+00, -5.999999991566524e-02, -5.999999956250308e-02, 0.000000000000000e+00, -5.999999995412083e-02, -5.999999956250308e-02, 0.000000000000000e+00, -5.999999995412079e-02, -8.247851336175881e-06, 0.000000000000000e+00, -8.255757693890473e-06, -8.241694027000481e-06, 0.000000000000000e+00, -8.249803011335639e-06, -8.247476218411777e-06, 0.000000000000000e+00, -8.255529422442626e-06, -8.242193207902519e-06, 0.000000000000000e+00, -8.250120127611997e-06, -8.244722219272828e-06, 0.000000000000000e+00, -8.252770498762953e-06, -8.244722219272828e-06, 0.000000000000000e+00, -8.252770498762953e-06, -4.105675345134940e-04, 0.000000000000000e+00, -4.106499630906427e-04, -3.987704473855553e-04, 0.000000000000000e+00, -3.992019399526426e-04, -4.208043724179019e-04, 0.000000000000000e+00, -4.179258300696937e-04, -4.102617128352948e-04, 0.000000000000000e+00, -4.073381021399754e-04, -3.966020964970210e-04, 0.000000000000000e+00, -4.035790416573681e-04, -3.966020964970210e-04, 0.000000000000000e+00, -4.035790416573681e-04, -2.754048208849979e-02, 0.000000000000000e+00, -2.769854075651198e-02, -2.280154347912252e-02, 0.000000000000000e+00, -2.277588437905150e-02, -3.337056466971072e-02, 0.000000000000000e+00, -3.121794164158514e-02, -3.095170828509515e-02, 0.000000000000000e+00, -2.899121655318641e-02, -2.522088483098432e-02, 0.000000000000000e+00, -2.824905141212463e-02, -2.522088483098432e-02, 0.000000000000000e+00, -2.824905141212463e-02, -5.995958445490470e-02, 0.000000000000000e+00, -5.995802172528038e-02, -5.947267815745036e-02, 0.000000000000000e+00, -5.946216762121143e-02, -5.997292871074273e-02, 0.000000000000000e+00, -5.996662805640390e-02, -4.429380699174163e-04, 0.000000000000000e+00, -4.437290618051618e-04, -5.993075401551787e-02, 0.000000000000000e+00, -5.991282350185132e-02, -5.993075401551787e-02, 0.000000000000000e+00, -5.991282350185132e-02, -5.999999997143194e-02, 0.000000000000000e+00, -5.999999996667670e-02, -5.999999992269361e-02, 0.000000000000000e+00, -5.999999991790614e-02, -5.999999997582901e-02, 0.000000000000000e+00, -5.999999996959559e-02, -5.999389712985675e-02, 0.000000000000000e+00, -5.999374565679141e-02, -5.999999997369800e-02, 0.000000000000000e+00, -5.999999990644282e-02, -5.999999997369795e-02, 0.000000000000000e+00, -5.999999990644286e-02, -2.744597647863983e-02, 0.000000000000000e+00, -2.721631679097617e-02, -2.779012579552894e-02, 0.000000000000000e+00, -2.755771148606563e-02, -2.766909672993123e-02, 0.000000000000000e+00, -2.743691403073652e-02, -2.756861817724298e-02, 0.000000000000000e+00, -2.733868255049653e-02, -2.761887241488999e-02, 0.000000000000000e+00, -2.738783616997029e-02, -2.761887241488999e-02, 0.000000000000000e+00, -2.738783616997029e-02, -2.907209146073432e-02, 0.000000000000000e+00, -2.887430915914591e-02, -3.805908736370898e-02, 0.000000000000000e+00, -3.781787371726699e-02, -3.543928287986232e-02, 0.000000000000000e+00, -3.518192106642468e-02, -3.284184614910757e-02, 0.000000000000000e+00, -3.263299224146485e-02, -3.415428389978679e-02, 0.000000000000000e+00, -3.393586009017419e-02, -3.415428389978679e-02, 0.000000000000000e+00, -3.393586009017419e-02, -2.022891083273366e-02, 0.000000000000000e+00, -2.014167541206005e-02, -5.867644585888430e-02, 0.000000000000000e+00, -5.864622220847029e-02, -5.733264893416549e-02, 0.000000000000000e+00, -5.722903688275544e-02, -5.249805861434300e-02, 0.000000000000000e+00, -5.235208240270064e-02, -5.541701914497275e-02, 0.000000000000000e+00, -5.542298955040134e-02, -5.541701914497279e-02, 0.000000000000000e+00, -5.542298955040134e-02, -4.249191344418759e-02, 0.000000000000000e+00, -4.214961992061191e-02, -5.999926174800491e-02, 0.000000000000000e+00, -5.999924133471404e-02, -5.999758311823000e-02, 0.000000000000000e+00, -5.999724289933499e-02, -5.352039827867603e-02, 0.000000000000000e+00, -5.316616822082570e-02, -5.998549884390834e-02, 0.000000000000000e+00, -5.998197559045434e-02, -5.998549884390834e-02, 0.000000000000000e+00, -5.998197559045435e-02, -5.999999710791460e-02, 0.000000000000000e+00, -5.999999666514718e-02, -5.999999999959497e-02, 0.000000000000000e+00, -5.999999999959125e-02, -5.999999999305741e-02, 0.000000000000000e+00, -5.999999999111612e-02, -5.998778013044760e-02, 0.000000000000000e+00, -5.998696113492794e-02, -5.999999997882720e-02, 0.000000000000000e+00, -5.999999993396921e-02, -5.999999997882716e-02, 0.000000000000000e+00, -5.999999993396919e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
