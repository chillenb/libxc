
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_b97_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.125348414371809e+01, -2.125354564229393e+01, -2.125383329774908e+01, -2.125291804772457e+01, -2.125339558465854e+01, -2.125339558465854e+01, -3.523623331023210e+00, -3.523623117675287e+00, -3.523704090862466e+00, -3.524221917923470e+00, -3.523706508266232e+00, -3.523706508266232e+00, -7.280966543410087e-01, -7.277784003149111e-01, -7.227098304176597e-01, -7.276486433571099e-01, -7.260082836482895e-01, -7.260082836482895e-01, -2.360785753428501e-01, -2.369398859352736e-01, -8.382251654384101e-01, -2.079676373758015e-01, -2.173659924372408e-01, -2.173659924372408e-01, -8.530207735650152e-03, -9.045521481938707e-03, -6.622991513790157e-02, -4.586573383728442e-03, -5.925466967099794e-03, -5.925466967099791e-03, -5.238315645947782e+00, -5.239388531187188e+00, -5.238367994226505e+00, -5.239315063671030e+00, -5.238857515629568e+00, -5.238857515629568e+00, -2.085988430490693e+00, -2.096456397522275e+00, -2.085354668865003e+00, -2.094356417226132e+00, -2.092349665150375e+00, -2.092349665150375e+00, -6.264253586665151e-01, -6.646896888110821e-01, -5.839400888000832e-01, -5.923824043285454e-01, -6.343224229357786e-01, -6.343224229357786e-01, -1.689956379490458e-01, -2.598038392618562e-01, -1.582784345277441e-01, -1.958011119586379e+00, -1.811922128366554e-01, -1.811922128366554e-01, -3.440351385211633e-03, -4.472013490547245e-03, -3.321715551274961e-03, -1.095839765984330e-01, -4.081026301983898e-03, -4.081026301983899e-03, -6.157612163036195e-01, -6.124780663173188e-01, -6.129091478920178e-01, -6.136840358814269e-01, -6.132288008436056e-01, -6.132288008436056e-01, -6.021065281420654e-01, -5.428969476569642e-01, -5.574319253980377e-01, -5.722084350404525e-01, -5.645841016581193e-01, -5.645841016581193e-01, -6.964253250786191e-01, -3.015074706442326e-01, -3.335265394515717e-01, -3.952829289980646e-01, -3.601355077571723e-01, -3.601355077571723e-01, -5.029875614640408e-01, -6.314999114796586e-02, -8.883783351240830e-02, -3.753199621153456e-01, -1.341480930633181e-01, -1.341480930633182e-01, -1.269438759286407e-02, -1.071510583913192e-03, -2.368818547363658e-03, -1.274300410420859e-01, -3.744660885506991e-03, -3.744660885506980e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_b97_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.853047592423813e+01, -2.853058623514603e+01, -2.853105189440763e+01, -2.852941111158427e+01, -2.853027440761579e+01, -2.853027440761579e+01, -4.576937979992231e+00, -4.577006511340209e+00, -4.578698423542241e+00, -4.576618484624380e+00, -4.577130188933031e+00, -4.577130188933031e+00, -8.630171260812208e-01, -8.610450992520283e-01, -8.065090035569936e-01, -8.146848435295768e-01, -8.144224209620852e-01, -8.144224209620852e-01, -2.102218947420813e-01, -2.155220634901558e-01, -1.012772573280337e+00, -1.584341917711793e-01, -1.747490467030771e-01, -1.747490467030770e-01, -1.176745388167258e-02, -1.248297316029843e-02, -8.569486968657572e-02, -6.289632238398193e-03, -8.146607293398042e-03, -8.146607293398079e-03, -7.006085449778996e+00, -7.008252111204715e+00, -7.006186091655365e+00, -7.008098994009688e+00, -7.007184714291821e+00, -7.007184714291821e+00, -2.270403610753432e+00, -2.300753083128480e+00, -2.225091396645262e+00, -2.252308164515497e+00, -2.308655084993170e+00, -2.308655084993170e+00, -7.828978084467259e-01, -8.683745976824068e-01, -7.226853518553753e-01, -7.640207938860935e-01, -7.971032710386320e-01, -7.971032710386320e-01, -1.496156149162970e-01, -1.923760608443538e-01, -1.460887704941073e-01, -2.605535748661699e+00, -1.437271710496900e-01, -1.437271710496900e-01, -4.702949790733294e-03, -6.130593371947725e-03, -4.537111614934786e-03, -1.217223118929715e-01, -5.587265851183486e-03, -5.587265851183492e-03, -8.237864075195362e-01, -7.999835514917834e-01, -8.068952695710275e-01, -8.139143166555904e-01, -8.102539236167287e-01, -8.102539236167287e-01, -8.074812215788866e-01, -6.418623387998121e-01, -6.853001233564280e-01, -7.228501961286032e-01, -7.041850193087053e-01, -7.041850193087053e-01, -9.082916949431792e-01, -2.427795893073432e-01, -3.110666949831765e-01, -4.552824740523162e-01, -3.809200982774198e-01, -3.809200982774198e-01, -5.916111547626183e-01, -8.256697096655034e-02, -1.087576210389772e-01, -4.463243997861979e-01, -1.290037916859621e-01, -1.290037916859621e-01, -1.755685836233979e-02, -1.448607492220502e-03, -3.225332930976925e-03, -1.271693565091006e-01, -5.121874684494687e-03, -5.121874684494656e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_b97_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_b97_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.630353591127700e-10, 5.631150259244735e-10, 5.633306996342566e-10, 5.621481767887925e-10, 5.627875448961947e-10, 5.627875448961947e-10, -1.606434955991297e-06, -1.605667299070941e-06, -1.587749606965100e-06, -1.617507772758527e-06, -1.605337676542329e-06, -1.605337676542329e-06, -3.397681104814556e-03, -3.428886602334131e-03, -4.333209720549208e-03, -4.167419901606657e-03, -4.181654343791974e-03, -4.181654343791974e-03, -7.597714023032542e-01, -7.208497707990309e-01, -1.702397314921323e-03, -1.663996356663971e+00, -1.261852285641391e+00, -1.261852285641391e+00, -3.518337165089684e+00, -3.810404153265674e+00, -4.290994385646362e+00, -2.435008347166121e+00, -3.464804895352676e+00, -3.464804895354109e+00, 1.612664738568412e-07, 1.651581935750508e-07, 1.614266884559215e-07, 1.648626347863587e-07, 1.632500827179681e-07, 1.632500827179681e-07, -5.688091665286351e-05, -5.426937192304758e-05, -6.045159193002795e-05, -5.804029774231228e-05, -5.374624929869825e-05, -5.374624929869825e-05, -5.798512418861148e-03, -3.989410431587900e-03, -8.100114211804881e-03, -8.739133329580673e-03, -5.521369405870100e-03, -5.521369405870100e-03, -2.813673955186031e+00, -7.078913731633789e-01, -3.172349520302729e+00, 5.770600994683684e-06, -2.688241893160538e+00, -2.688241893160538e+00, -2.818226602114525e+00, -2.832726957664283e+00, -1.550577221661349e+01, -4.947709482987071e+00, -7.927736654069542e+00, -7.927736654017667e+00, 1.111063550494356e-02, -5.892267762592654e-03, -3.477162175508029e-03, 5.853328617057294e-04, -1.772719954540374e-03, -1.772719954540374e-03, 3.456289196113042e-02, -1.229885396337421e-02, -1.011230342695386e-02, -9.812578823276515e-03, -9.746668241889606e-03, -9.746668241889606e-03, -3.363789994646379e-03, -3.320300553727966e-01, -1.687786638057887e-01, -5.268865662507074e-02, -9.458683788103757e-02, -9.458683788103792e-02, -1.745169185429938e-02, -3.892925506613843e+00, -4.102056093297615e+00, -6.488002138814257e-02, -4.966926774199526e+00, -4.966926774199511e+00, -3.354111446725477e+00, -7.325438501611400e+00, -5.047625299066135e+00, -5.164986707601602e+00, -9.630040165179848e+00, -9.630040165170039e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
