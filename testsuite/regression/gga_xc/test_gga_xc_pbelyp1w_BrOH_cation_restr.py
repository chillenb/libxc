
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_pbelyp1w_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103594057229119e+01, -2.103596807827422e+01, -2.103615802398564e+01, -2.103574739847495e+01, -2.103595293450025e+01, -2.103595293450025e+01, -3.544902534946394e+00, -3.544865221428434e+00, -3.544088185206996e+00, -3.546101247593679e+00, -3.544941814673824e+00, -3.544941814673824e+00, -7.417771186680315e-01, -7.416997881017873e-01, -7.413676357840872e-01, -7.463824312444662e-01, -7.445678661866277e-01, -7.445678661866277e-01, -2.282902534529873e-01, -2.302539430109092e-01, -8.527316788274052e-01, -1.844060818730841e-01, -2.022540413703197e-01, -2.022540413703197e-01, -1.184375007876835e-02, -1.245632278105498e-02, -6.116727866226571e-02, -6.888494895726502e-03, -8.632399581041422e-03, -8.632399581041422e-03, -5.112344972111645e+00, -5.111742959174491e+00, -5.112327967748537e+00, -5.111796343572422e+00, -5.112033871821809e+00, -5.112033871821809e+00, -2.173264558189806e+00, -2.183381899398814e+00, -2.174135792461457e+00, -2.183079609244801e+00, -2.178417255284545e+00, -2.178417255284545e+00, -6.256361646929950e-01, -6.515117359842026e-01, -5.847134733953514e-01, -5.834750043216025e-01, -6.319939777950793e-01, -6.319939777950793e-01, -1.314555884839961e-01, -2.361898297533430e-01, -1.226085065926558e-01, -1.880101861854937e+00, -1.540996230543581e-01, -1.540996230543581e-01, -5.329266350918526e-03, -6.735710870886230e-03, -5.163961992344706e-03, -8.845009369440832e-02, -6.209560039368759e-03, -6.209560039368759e-03, -5.985757198461981e-01, -6.011031942519055e-01, -6.002317510710125e-01, -5.994917822988568e-01, -5.998627116218037e-01, -5.998627116218037e-01, -5.814363425548345e-01, -5.496315096729302e-01, -5.589311487749814e-01, -5.675247426509515e-01, -5.629923666539305e-01, -5.629923666539305e-01, -6.825763485342814e-01, -2.880092119544761e-01, -3.306738486037857e-01, -3.980288673463184e-01, -3.624560104364660e-01, -3.624560104364660e-01, -5.086553984575571e-01, -5.904595868546383e-02, -7.383720344611992e-02, -3.754187314850927e-01, -1.093096892927885e-01, -1.093096892927885e-01, -1.662405520558821e-02, -1.819860047035506e-03, -3.800233748071259e-03, -1.035067668396106e-01, -5.750353477050895e-03, -5.750353477050890e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_pbelyp1w_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524159887427994e+01, -2.524169858423675e+01, -2.524211608940885e+01, -2.524063314730396e+01, -2.524141383911677e+01, -2.524141383911677e+01, -4.121120622078034e+00, -4.121165839423937e+00, -4.122311322939754e+00, -4.121089486763903e+00, -4.121272389095669e+00, -4.121272389095669e+00, -8.265577951522965e-01, -8.254070436685004e-01, -7.997415351989732e-01, -8.060940555723016e-01, -8.048530963583950e-01, -8.048530963583950e-01, -2.507147780357570e-01, -2.513681460351233e-01, -9.591045847387247e-01, -2.294495619868659e-01, -2.344199108720466e-01, -2.344199108720466e-01, -1.572123847357060e-02, -1.653072889839702e-02, -8.331733946181716e-02, -9.156857628311373e-03, -1.146877318518414e-02, -1.146877318518414e-02, -6.285456284788737e+00, -6.288200756768017e+00, -6.285579283077896e+00, -6.288002140302313e+00, -6.286848992030692e+00, -6.286848992030692e+00, -2.273221330735408e+00, -2.290221774653591e+00, -2.259599400171239e+00, -2.274378335931873e+00, -2.289482254626407e+00, -2.289482254626407e+00, -7.449136344457473e-01, -8.313722463861958e-01, -6.891878265266985e-01, -7.367021694846237e-01, -7.590457786164667e-01, -7.590457786164667e-01, -1.989398139068460e-01, -2.808171964475474e-01, -1.874260189151130e-01, -2.407493553273829e+00, -2.052553595562854e-01, -2.052553595562854e-01, -7.087038311139816e-03, -8.953896781449141e-03, -6.865553137051988e-03, -1.319715924128753e-01, -8.253998452356423e-03, -8.253998452356423e-03, -7.795306310838847e-01, -7.682103924607347e-01, -7.721160160052946e-01, -7.754054048417531e-01, -7.737530483897420e-01, -7.737530483897420e-01, -7.615582804245150e-01, -6.187084763664336e-01, -6.547390537968025e-01, -6.950342202849594e-01, -6.740929384346583e-01, -6.740929384346583e-01, -8.684281263195247e-01, -3.200887078585884e-01, -3.547415922629776e-01, -4.451155128402540e-01, -3.914976270712803e-01, -3.914976270712803e-01, -5.721755198440023e-01, -8.001761701319254e-02, -1.084873658370799e-01, -4.334176429671524e-01, -1.582256827752461e-01, -1.582256827752462e-01, -2.203684300576826e-02, -2.422861398980803e-03, -5.055756773707860e-03, -1.511361818680877e-01, -7.644427552785345e-03, -7.644427552785338e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_pbelyp1w_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_pbelyp1w", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.036470149401127e-09, -7.036421207437941e-09, -7.036132076710634e-09, -7.036861709049287e-09, -7.036489564299330e-09, -7.036489564299330e-09, -9.371524460453541e-06, -9.371812794977772e-06, -9.377561614860716e-06, -9.360482146759788e-06, -9.370970328939189e-06, -9.370970328939189e-06, -5.477756429872788e-03, -5.478832616687964e-03, -5.419964802384643e-03, -5.279942228253400e-03, -5.334717584072717e-03, -5.334717584072717e-03, -3.710499462238571e-01, -3.836581648305820e-01, -3.115083501623173e-03, -1.451416823806681e-01, -3.343006422187105e-01, -3.343006422187103e-01, -2.437199696221943e+00, -2.574814445265917e+00, 5.653678000569637e+00, -2.214831489834198e+00, -2.813846725201294e+00, -2.813846725201301e+00, -2.057846631077775e-06, -2.058077746129094e-06, -2.057843398260614e-06, -2.058047650923211e-06, -2.057971601184781e-06, -2.057971601184781e-06, -7.063975255452263e-05, -6.932150890862379e-05, -7.051382547238822e-05, -6.936226992243793e-05, -6.995603688060311e-05, -6.995603688060311e-05, -1.093117430455365e-02, -9.054611061744041e-03, -1.443041983258231e-02, -1.432039710054448e-02, -1.047008325899798e-02, -1.047008325899798e-02, 1.187629131060369e+00, -1.365747308969865e-01, 1.583405352529727e+00, -1.165816135849418e-04, 1.962039729382262e-01, 1.962039729382262e-01, -2.918345822532329e+00, -2.606680249696042e+00, -1.637010721941382e+01, 4.312646654077366e+00, -7.617955789208670e+00, -7.617955789208653e+00, -1.272691088611548e-02, -1.260917610876754e-02, -1.265057449415881e-02, -1.268522316914065e-02, -1.266795493708094e-02, -1.266795493708094e-02, -1.431161720137209e-02, -1.845191616163175e-02, -1.735056955582301e-02, -1.619968037370255e-02, -1.681546628915509e-02, -1.681546628915509e-02, -7.483800428432101e-03, -1.281669437479049e-01, -1.090225766748127e-01, -6.745556447406666e-02, -9.075151411005107e-02, -9.075151411005108e-02, -2.522059796922627e-02, 5.491473196877271e+00, 6.012410873903788e+00, -8.748753595893970e-02, 2.080908505421160e+00, 2.080908505421158e+00, -1.963919258013668e+00, -1.279232289755105e+01, -6.191051484278828e+00, 2.589476271248121e+00, -9.622175254197241e+00, -9.622175254197263e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
