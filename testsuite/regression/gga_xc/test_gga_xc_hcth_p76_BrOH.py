
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_hcth_p76_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.221966615655947e+01, -2.221972714344745e+01, -2.222003030902590e+01, -2.221903102681503e+01, -2.221969805907569e+01, -2.221969805907569e+01, -3.427862584904014e+00, -3.427870091339164e+00, -3.428226198460480e+00, -3.428378113833788e+00, -3.427881795269556e+00, -3.427881795269556e+00, -5.743258832682007e-01, -5.741367741901057e-01, -5.732604646894873e-01, -5.773214171475664e-01, -5.742537109081062e-01, -5.742537109081062e-01, -1.436117559994863e-01, -1.437134486735805e-01, -6.942183156724436e-01, -1.318433006886169e-01, -1.436075821786144e-01, -1.436075821786144e-01, -3.210012977159552e-02, -3.347151298437727e-02, -9.956025822867726e-02, -1.608345105314771e-02, -3.314103336387283e-02, -3.314103336387283e-02, -5.252501826018944e+00, -5.253992203942313e+00, -5.252655973383422e+00, -5.253814760141215e+00, -5.253262817822744e+00, -5.253262817822744e+00, -1.926336600776981e+00, -1.936680523282661e+00, -1.926530629792374e+00, -1.934429485205185e+00, -1.933617810936296e+00, -1.933617810936296e+00, -4.757133101754857e-01, -5.356265805140873e-01, -4.474399513659558e-01, -4.747197738479796e-01, -4.970347368959728e-01, -4.970347368959728e-01, -1.342928874235553e-01, -1.726889459007600e-01, -1.286768025406625e-01, -1.852052317957172e+00, -1.269912662649539e-01, -1.269912662649539e-01, -1.552917925421536e-02, -1.767335505088647e-02, -1.331844723117514e-02, -1.129988336787269e-01, -1.613349003303382e-02, -1.613349003303379e-02, -5.204355238507975e-01, -5.031808363747849e-01, -5.082853571339648e-01, -5.129918593089038e-01, -5.105457426150899e-01, -5.105457426150899e-01, -5.045921388152961e-01, -4.081086994692840e-01, -4.233731794688703e-01, -4.429197050012467e-01, -4.321391991795520e-01, -4.321391991795520e-01, -5.645827634713435e-01, -2.032114445354901e-01, -2.259104433833238e-01, -2.685632280994140e-01, -2.436333459960783e-01, -2.436333459960783e-01, -3.626847066968705e-01, -9.706414570557108e-02, -1.123515714213981e-01, -2.440488156344012e-01, -1.161926754731547e-01, -1.161926754731547e-01, -3.715718721243375e-02, -4.906908427973392e-03, -9.309784122951498e-03, -1.096165205091806e-01, -1.376003018647844e-02, -1.376003018647839e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_hcth_p76_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.037857916547093e+01, -3.037867931631919e+01, -3.037914410964981e+01, -3.037750365681363e+01, -3.037863183126379e+01, -3.037863183126379e+01, -4.628054290683466e+00, -4.628125123261032e+00, -4.630267780129430e+00, -4.627601684641856e+00, -4.628111448010541e+00, -4.628111448010541e+00, -6.832791843525189e-01, -6.807066477451078e-01, -6.096929539888086e-01, -6.181929074015783e-01, -6.823496214411184e-01, -6.823496214411184e-01, -1.087802584800804e-01, -1.121113145982377e-01, -8.989491654079204e-01, -2.329672193459046e-02, -1.098277915874414e-01, -1.098277915874414e-01, -4.028661409804785e-02, -4.179466892662743e-02, -7.672510213437110e-02, -2.112638339523691e-02, -4.138811506239035e-02, -4.138811506239035e-02, -7.249661119469333e+00, -7.252204427511586e+00, -7.249923195334670e+00, -7.251900837648216e+00, -7.250964615359145e+00, -7.250964615359145e+00, -2.117757968118336e+00, -2.149641476112572e+00, -2.088884288480508e+00, -2.113961813701130e+00, -2.176216168883451e+00, -2.176216168883451e+00, -6.526557191627944e-01, -7.826342876506309e-01, -6.088486341700445e-01, -6.919315036824131e-01, -6.915688077959041e-01, -6.915688077959041e-01, -9.070523223477461e-03, -7.795183772962290e-02, -3.482758637891944e-03, -2.596734210085351e+00, -1.327095659992874e-03, -1.327095659992874e-03, -2.041194618175548e-02, -2.313990420606521e-02, -1.748190562021454e-02, -4.607601967310382e-02, -2.113516442053400e-02, -2.113516442053390e-02, -7.454835632401250e-01, -7.375080383668303e-01, -7.429277880187144e-01, -7.455717295282593e-01, -7.444730785583206e-01, -7.444730785583206e-01, -7.164863415477816e-01, -5.078746526552637e-01, -5.713438323723043e-01, -6.311384047655944e-01, -6.008499000076842e-01, -6.008499000076841e-01, -8.225498007202742e-01, -1.345172839145874e-01, -1.885627440647647e-01, -3.103797963136297e-01, -2.407731030230698e-01, -2.407731030230701e-01, -4.409057737287115e-01, -8.470885793706558e-02, -6.712967223280278e-02, -3.091533968272455e-01, -7.049642115675173e-03, -7.049642115671584e-03, -4.616745448672124e-02, -6.541584066158767e-03, -1.234355541917082e-02, -2.356223524343577e-03, -1.807420739111852e-02, -1.807420739111874e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_hcth_p76_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_hcth_p76", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.655564225068110e-09, 1.655634138222366e-09, 1.655810368350191e-09, 1.654668137031510e-09, 1.655602228997554e-09, 1.655602228997554e-09, -1.501674469453090e-08, -1.405992778345442e-08, 1.227644164832934e-08, -3.291895967352099e-08, -1.452151764307998e-08, -1.452151764307998e-08, -3.755855430369758e-03, -3.808075977401155e-03, -5.154281283589685e-03, -4.954083554623176e-03, -3.774750504233807e-03, -3.774750504233807e-03, -7.492041612738392e-01, -7.233372067426012e-01, -1.129710022937651e-03, -2.493007090991163e+00, -7.412161229388312e-01, -7.412161229388312e-01, -9.003677333190286e+01, -8.930792778084565e+01, -2.148405770498362e+01, -7.277754330125279e+01, -9.298689702364669e+01, -9.298689702364669e+01, 7.195271922566059e-07, 7.267356331863085e-07, 7.202434521382687e-07, 7.258484354819757e-07, 7.232475818118546e-07, 7.232475818118546e-07, -5.701938607989996e-05, -5.427494764942574e-05, -5.931812420791787e-05, -5.712305885669437e-05, -5.221108672409775e-05, -5.221108672409775e-05, -1.452196970912462e-03, 1.480480928286212e-02, -2.688948973494769e-03, 1.174965924639525e-02, -3.808524871294997e-05, -3.808524871294997e-05, -5.664914316177758e+00, -7.111472589490410e-01, -6.327491757883614e+00, 1.148497025058175e-04, -4.324911787888715e+00, -4.324911787888715e+00, -7.757887354213820e+01, -7.629619247733801e+01, -2.267041599722066e+02, -1.627807592581024e+01, -1.141401841811417e+02, -1.141401841814602e+02, 4.324752702220452e-02, 2.192564648250221e-02, 2.803643405878251e-02, 3.390472853433539e-02, 3.083871191623832e-02, 3.083871191623833e-02, 5.599855827429472e-02, -1.053390127309348e-02, -4.187824894809900e-03, 3.775485277765813e-03, -6.710491764932314e-04, -6.710491764932221e-04, 1.081305134249543e-02, -3.048399747683276e-01, -1.674895138231081e-01, -5.802663784813433e-02, -1.063248626159952e-01, -1.063248626159953e-01, -1.768840664937587e-02, -1.919297567025730e+01, -1.558989057210244e+01, -5.844538085799528e-02, -1.146871430808652e+01, -1.146871430808668e+01, -6.519996370252055e+01, -1.491475480078668e+02, -1.221212136629716e+02, -1.426449250118459e+01, -1.702252015997430e+02, -1.702252015991358e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
