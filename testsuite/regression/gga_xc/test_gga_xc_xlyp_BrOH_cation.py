
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_xlyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120820250427321e+01, -2.120822753100176e+01, -2.120841144982015e+01, -2.120803760511190e+01, -2.120822316337505e+01, -2.120822316337505e+01, -3.568555210885688e+00, -3.568514863982382e+00, -3.567668275912506e+00, -3.569808108597416e+00, -3.568591856762968e+00, -3.568591856762968e+00, -7.425612103754371e-01, -7.424907555529761e-01, -7.422332482724298e-01, -7.472878050829512e-01, -7.462904329490209e-01, -7.462904329490209e-01, -2.257993116298478e-01, -2.275782488739588e-01, -8.547559895920858e-01, -1.868808780881093e-01, -2.186150517486601e-01, -2.186150517486599e-01, -4.758959217717101e-02, -4.762656468666707e-02, -8.806438917875091e-02, -4.343637246953497e-02, -4.378335592251113e-02, -4.378335592251110e-02, -5.136915098524950e+00, -5.136130713369024e+00, -5.136890640162473e+00, -5.136198005893378e+00, -5.136511178818839e+00, -5.136511178818839e+00, -2.190288152743618e+00, -2.200371759337731e+00, -2.191539196695268e+00, -2.200444615072758e+00, -2.195265512076308e+00, -2.195265512076308e+00, -6.248312882774641e-01, -6.482354337128093e-01, -5.840697346459378e-01, -5.808980685680482e-01, -6.316507953835049e-01, -6.316507953835050e-01, -1.439304119640479e-01, -2.364894804834467e-01, -1.365687312093089e-01, -1.878372703997840e+00, -1.603623215254442e-01, -1.603623215254442e-01, -3.919056140710774e-02, -4.184955156266308e-02, -2.741291702738977e-02, -1.074103236100798e-01, -3.330412853868830e-02, -3.330412853868833e-02, -5.938474364526051e-01, -5.976884125173957e-01, -5.964172319686704e-01, -5.953026557544243e-01, -5.958666414567326e-01, -5.958666414567326e-01, -5.762103237808244e-01, -5.487270640209861e-01, -5.579235540065043e-01, -5.657639269833523e-01, -5.617115085080765e-01, -5.617115085080765e-01, -6.795267486562542e-01, -2.860953802573323e-01, -3.277648638189991e-01, -3.958494490005580e-01, -3.596775641542139e-01, -3.596775641542139e-01, -5.074173408050777e-01, -8.741852900302012e-02, -9.732505206821154e-02, -3.732314961835316e-01, -1.233008084496246e-01, -1.233008084496246e-01, -5.372840060850342e-02, -2.418009578117381e-02, -3.163696345549052e-02, -1.187118064821100e-01, -3.131906581145186e-02, -3.131906581145184e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_xlyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.520693292029713e+01, -2.520690313777454e+01, -2.520704370639685e+01, -2.520698389462791e+01, -2.520737572052396e+01, -2.520746434116169e+01, -2.520612137796927e+01, -2.520586973837257e+01, -2.520699723940344e+01, -2.520649220800401e+01, -2.520699723940344e+01, -2.520649220800401e+01, -4.114797932278002e+00, -4.114915583593810e+00, -4.114835645751630e+00, -4.114956702060023e+00, -4.115785496849271e+00, -4.116029203207025e+00, -4.114798438436188e+00, -4.115039166057919e+00, -4.114098700723249e+00, -4.115904104143852e+00, -4.114098700723249e+00, -4.115904104143852e+00, -8.255498106361223e-01, -8.282075283142730e-01, -8.241800965820463e-01, -8.274091301816592e-01, -8.023646121035186e-01, -7.990482456749901e-01, -8.065277951608880e-01, -8.075886516732265e-01, -8.251172080718550e-01, -7.937566699616621e-01, -8.251172080718550e-01, -7.937566699616621e-01, -2.385212578402432e-01, -2.398770208625014e-01, -2.401504978294236e-01, -2.420337127647213e-01, -9.456154515443026e-01, -9.720847398548453e-01, -2.047820586546380e-01, -2.054499632721965e-01, -2.100729245427176e-01, -2.214149117143346e-01, -2.100729245427176e-01, -2.214149117143346e-01, -1.403993109282121e-02, -1.408379632018758e-02, -1.438433669156987e-02, -1.442558334951083e-02, -6.856340394352309e-02, -7.264036191386875e-02, -1.065309419003391e-02, -1.067982999230095e-02, -1.195670940255914e-02, -1.026070098438601e-02, -1.195670940255911e-02, -1.026070098438600e-02, -6.259521696617576e+00, -6.258026808915703e+00, -6.262140035869308e+00, -6.260560276447000e+00, -6.259665549652689e+00, -6.258114904958428e+00, -6.261915226975326e+00, -6.260413284729887e+00, -6.260862110644929e+00, -6.259299717570316e+00, -6.260862110644929e+00, -6.259299717570316e+00, -2.273664112720029e+00, -2.273564076734560e+00, -2.291401200978869e+00, -2.290849709182076e+00, -2.256764803564640e+00, -2.260458493674580e+00, -2.272012617339219e+00, -2.275919104020600e+00, -2.295634383196273e+00, -2.285768020681377e+00, -2.295634383196273e+00, -2.285768020681377e+00, -7.415393562551306e-01, -7.401434925816864e-01, -8.230781562020404e-01, -8.236569970606882e-01, -6.766028184267445e-01, -6.951541958592804e-01, -7.206130834627070e-01, -7.380159795065245e-01, -7.683941853259904e-01, -7.395189966221313e-01, -7.683941853259904e-01, -7.395189966221314e-01, -1.800769893187556e-01, -1.790713784340940e-01, -2.583351878839987e-01, -2.584625587761948e-01, -1.702572733673382e-01, -1.707037622134824e-01, -2.391287646193015e+00, -2.390366981928145e+00, -1.855763535880374e-01, -1.758939262188766e-01, -1.855763535880374e-01, -1.758939262188766e-01, -8.999887112676332e-03, -9.205551557016009e-03, -1.027232849865490e-02, -1.038825536593542e-02, -7.218980364367812e-03, -7.144971773487870e-03, -1.254327321597372e-01, -1.264322599651326e-01, -8.546090971120924e-03, -8.738712165088836e-03, -8.546090971120945e-03, -8.738712165088838e-03, -7.708012335697327e-01, -7.731869161512475e-01, -7.593675293415738e-01, -7.617753702766088e-01, -7.632425267538719e-01, -7.656652570399392e-01, -7.665810105775901e-01, -7.689541042328416e-01, -7.649002933174488e-01, -7.672977813917392e-01, -7.649002933174488e-01, -7.672977813917392e-01, -7.535890283162492e-01, -7.554988176684954e-01, -6.175808139319364e-01, -6.194102552172088e-01, -6.509889529505619e-01, -6.531794036182920e-01, -6.884081933274186e-01, -6.902648639174537e-01, -6.689682936452532e-01, -6.708259634643071e-01, -6.689682936452532e-01, -6.708259634643071e-01, -8.594534274322306e-01, -8.609995419474801e-01, -3.049638191336007e-01, -3.051836876767737e-01, -3.481365704231588e-01, -3.488758533729958e-01, -4.440927529029224e-01, -4.455440004417175e-01, -3.904870255903862e-01, -3.902912022639400e-01, -3.904870255903863e-01, -3.902912022639400e-01, -5.706530543632076e-01, -5.732606770974595e-01, -6.564364832621328e-02, -6.612252341731369e-02, -9.983733324540453e-02, -1.028865117439510e-01, -4.297362794524733e-01, -4.338033270336312e-01, -1.456640230556979e-01, -1.402536091966502e-01, -1.456640230556978e-01, -1.402536091966502e-01, -1.771386083192403e-02, -1.771135957486708e-02, -4.893917633833502e-03, -4.477398534107783e-03, -7.062500369904469e-03, -7.038952771586427e-03, -1.379936440101330e-01, -1.387077729620014e-01, -7.551340236940503e-03, -8.361570058227918e-03, -7.551340236940512e-03, -8.361570058227904e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_xlyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.545040544819667e-08, 1.463652377038497e-11, -1.545049320556847e-08, -1.545032098011049e-08, 1.463631512328463e-11, -1.545043121875661e-08, -1.544985520019730e-08, 1.463532316351641e-11, -1.544982184162310e-08, -1.545082136573363e-08, 1.463842899785011e-11, -1.545104345382445e-08, -1.545036879171069e-08, 1.463681083685537e-11, -1.545040991058163e-08, -1.545036879171069e-08, 1.463681083685537e-11, -1.545040991058163e-08, -2.013171463953286e-05, 1.902747638536065e-07, -2.013944071513513e-05, -2.013230866270859e-05, 1.902725761814505e-07, -2.014060689021354e-05, -2.015238661876837e-05, 1.901971754504621e-07, -2.015732934740559e-05, -2.010451728855268e-05, 1.901358235030523e-07, -2.011083279363195e-05, -2.014142807409057e-05, 1.902491360705296e-07, -2.012796945723906e-05, -2.014142807409057e-05, 1.902491360705296e-07, -2.012796945723906e-05, -1.167413161141009e-02, 1.144533678933034e-03, -1.175396058384695e-02, -1.166568053526701e-02, 1.151156568500561e-03, -1.176344632517734e-02, -1.170744068744167e-02, 1.320750241138922e-03, -1.156952103230035e-02, -1.130619143059178e-02, 1.265386257803329e-03, -1.135401481616924e-02, -1.207626369181034e-02, 1.376562597771172e-03, -1.055129619111531e-02, -1.207626369181034e-02, 1.376562597771172e-03, -1.055129619111531e-02, -1.193288340371074e+00, 6.012876550391961e-01, -1.158848641157244e+00, -1.184791851432483e+00, 5.680272535784819e-01, -1.139557624620028e+00, -6.754917857548606e-03, 5.322727974273029e-04, -6.548050314198642e-03, -1.885811591591208e+00, 1.675901373768304e+00, -1.858001149419573e+00, -1.444910998930784e+00, 2.382014110698246e+00, -4.050727649673274e+00, -1.444910998930783e+00, 2.382014110698246e+00, -4.050727649673282e+00, -1.601211016353715e+04, 1.111914508308031e-07, -1.340604580140076e+04, -1.420202402801005e+04, 4.562559950974850e-07, -1.163268437966312e+04, -5.908081137664566e+01, 1.838627425311693e+01, -4.866145317103318e+01, -6.765360927037848e+04, 4.136895542502456e-17, -7.046722757231860e+04, -2.223180294394550e+04, 1.070835888305008e-12, -1.463172427738471e+05, -2.223180294394552e+04, 1.070835888305008e-12, -1.463172427738470e+05, -4.631404821186312e-06, 2.233703107768369e-08, -4.635367809677844e-06, -4.634915711798368e-06, 2.231537777319893e-08, -4.638759989813905e-06, -4.631551945509078e-06, 2.233595490630417e-08, -4.635447326255157e-06, -4.634561346922648e-06, 2.231683364972891e-08, -4.638532907155975e-06, -4.633240472757503e-06, 2.232609670798167e-08, -4.637076336627016e-06, -4.633240472757503e-06, 2.232609670798167e-08, -4.637076336627016e-06, -1.491258179537799e-04, 4.104557134069705e-06, -1.491477702065410e-04, -1.461644178360118e-04, 3.949027730077658e-06, -1.462687728953403e-04, -1.491400887613073e-04, 4.223201907834492e-06, -1.493250345452483e-04, -1.465825682744722e-04, 4.080707689470805e-06, -1.467037743691082e-04, -1.474932982612342e-04, 3.966397450084659e-06, -1.474515709663109e-04, -1.474932982612342e-04, 3.966397450084659e-06, -1.474515709663109e-04, -2.411660071374810e-02, 2.253646609880290e-03, -2.433801164933218e-02, -2.213653800949505e-02, 1.482953633834817e-03, -2.218305180740897e-02, -3.327183789172178e-02, 3.393155540240489e-03, -3.045517416061752e-02, -3.643747136346263e-02, 2.786872153422916e-03, -3.255533486683094e-02, -2.177617149704884e-02, 2.171399762139616e-03, -2.537676076381499e-02, -2.177617149704885e-02, 2.171399762139616e-03, -2.537676076381499e-02, -2.481875334972029e+00, 5.364331359216309e+00, -2.614250147829698e+00, -7.848273870539384e-01, 5.928062603673171e-01, -7.835331005547677e-01, -2.777491490717112e+00, 6.670630325612285e+00, -3.112295872067985e+00, -2.810370993913897e-04, 4.550774239056777e-06, -2.815505979378209e-04, -2.561284200392218e+00, 3.362374819306393e+00, -3.252687945835745e+00, -2.561284200392218e+00, 3.362374819306393e+00, -3.252687945835745e+00, -1.703586965875476e+05, 5.421496698436063e-24, -1.464382486069770e+05, -7.972012076358577e+04, 1.228758886113335e-17, -7.465814342090407e+04, -2.996292146609080e+05, 5.656440620065503e-25, -2.616935872817845e+05, -7.837089893171372e+00, 1.504669301565768e+01, -7.522044818221984e+00, -2.319049920862672e+05, 9.610322787727072e-20, -9.252642580552356e+04, -2.319049920862670e+05, 9.610322787727070e-20, -9.252642580552353e+04, -3.396406744768878e-02, 2.199677179191681e-03, -3.360768202452824e-02, -3.121060595190964e-02, 2.264286130145305e-03, -3.087896960669288e-02, -3.188228881721434e-02, 2.241303100651475e-03, -3.154609471874670e-02, -3.261942929088300e-02, 2.222568983976134e-03, -3.226699529212761e-02, -3.222242461883176e-02, 2.231922961512953e-03, -3.187805875375330e-02, -3.222242461883176e-02, 2.231922961512953e-03, -3.187805875375330e-02, -3.926633815311528e-02, 2.525278278664052e-03, -3.882284721923622e-02, -4.003461825008904e-02, 5.397863529116129e-03, -3.971063245207731e-02, -3.823777906939160e-02, 4.298036410666330e-03, -3.791347278327048e-02, -3.723936503895135e-02, 3.458400931093935e-03, -3.688792877194091e-02, -3.772187488870077e-02, 3.860241852276062e-03, -3.735604460410866e-02, -3.772187488870077e-02, 3.860241852276062e-03, -3.735604460410866e-02, -1.816929162311704e-02, 1.166454564355177e-03, -1.816728395572965e-02, -4.295012346398068e-01, 2.273047300256539e-01, -4.284291019521883e-01, -2.808142004647370e-01, 1.027440095908986e-01, -2.796675907728319e-01, -1.486322474602941e-01, 2.883676467546989e-02, -1.468876422521656e-01, -2.067334569024942e-01, 5.500747727544229e-02, -2.077857211947073e-01, -2.067334569024943e-01, 5.500747727544231e-02, -2.077857211947074e-01, -5.495041099377972e-02, 8.100714365057125e-03, -5.433844812858325e-02, -6.359903536570130e+01, 1.766533536733120e+01, -6.209670099248661e+01, -1.633274628038842e+01, 1.878803243082290e+01, -1.485147488085603e+01, -1.957856552461014e-01, 3.428914672188251e-02, -1.896418898155368e-01, -5.265536460621596e+00, 9.701438036301546e+00, -6.809183631032385e+00, -5.265536460621605e+00, 9.701438036301546e+00, -6.809183631032396e+00, -5.351556125372898e+03, 3.417478728614279e-04, -4.857329951785391e+03, -5.037754153067586e+06, 2.850114531961813e-85, -5.861958661134716e+06, -5.652027440568894e+05, 1.662312648545182e-36, -4.813736373846485e+05, -6.585506576327489e+00, 1.102889579754806e+01, -6.529542726748857e+00, -3.319219212270427e+05, 8.178814636871498e-22, -1.201585025519537e+05, -3.319219212270436e+05, 8.178814636871070e-22, -1.201585025519541e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
