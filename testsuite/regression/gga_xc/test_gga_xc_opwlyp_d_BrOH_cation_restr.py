
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_opwlyp_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.108264415707333e+01, -2.108267190173796e+01, -2.108286286375239e+01, -2.108244868446672e+01, -2.108265609059972e+01, -2.108265609059972e+01, -3.543462821178854e+00, -3.543426732445611e+00, -3.542678000790150e+00, -3.544642664857740e+00, -3.543503693556616e+00, -3.543503693556616e+00, -7.358657776428783e-01, -7.357252661026982e-01, -7.336901281992771e-01, -7.387787947816961e-01, -7.370162595482093e-01, -7.370162595482093e-01, -2.192082336349017e-01, -2.211836898249784e-01, -8.473298491396484e-01, -1.788237789807577e-01, -1.943408689577834e-01, -1.943408689577834e-01, -6.593957535224432e-02, -6.597849681132537e-02, -1.078377729098615e-01, -6.021184608037774e-02, -5.993885565729558e-02, -5.993885565729554e-02, -5.115006474922788e+00, -5.114380540028770e+00, -5.114988516031805e+00, -5.114435785035446e+00, -5.114683288479934e+00, -5.114683288479934e+00, -2.162856286621698e+00, -2.173179134096944e+00, -2.163249840756953e+00, -2.172362475498320e+00, -2.168369210048019e+00, -2.168369210048019e+00, -6.220384302836607e-01, -6.483504195948763e-01, -5.808038415022849e-01, -5.804623609607282e-01, -6.285957406726759e-01, -6.285957406726759e-01, -1.378823586894612e-01, -2.278622494555035e-01, -1.314364546072064e-01, -1.876071871490252e+00, -1.528013455567631e-01, -1.528013455567631e-01, -5.431658927680505e-02, -5.800206591424182e-02, -3.799689938705961e-02, -1.115046358547218e-01, -4.595845924783577e-02, -4.595845924783578e-02, -5.946052869486864e-01, -5.979302986552513e-01, -5.968758593315291e-01, -5.959052671270552e-01, -5.964016279372870e-01, -5.964016279372870e-01, -5.772360914956481e-01, -5.440086407929280e-01, -5.548080201356556e-01, -5.643769976121592e-01, -5.594481351969591e-01, -5.594481351969591e-01, -6.794637307439088e-01, -2.779926092931801e-01, -3.208670689774750e-01, -3.919198684267156e-01, -3.542610909862368e-01, -3.542610909862368e-01, -5.029490424952371e-01, -1.088220170691342e-01, -1.100461148140800e-01, -3.705596435033157e-01, -1.201923316348002e-01, -1.201923316348002e-01, -7.436916190855804e-02, -3.351133758778027e-02, -4.384487256016906e-02, -1.170627463684765e-01, -4.319007830707193e-02, -4.319007830707190e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_opwlyp_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.531499964522595e+01, -2.531509425224095e+01, -2.531549773508642e+01, -2.531409053537005e+01, -2.531483030793440e+01, -2.531483030793440e+01, -4.137252272960407e+00, -4.137290347498517e+00, -4.138270873055748e+00, -4.137339132976950e+00, -4.137395942476540e+00, -4.137395942476540e+00, -8.342110488682445e-01, -8.331287607922446e-01, -8.079852906245122e-01, -8.144064995659519e-01, -8.131734634975324e-01, -8.131734634975324e-01, -2.424919812320724e-01, -2.445735073493313e-01, -9.667477433266247e-01, -2.037921135070820e-01, -2.168462121115809e-01, -2.168462121115809e-01, -1.930578720305899e-02, -1.972382569935734e-02, -5.881103857849773e-02, -1.479994938888108e-02, -1.605458387586636e-02, -1.605458387586640e-02, -6.283097025089093e+00, -6.285569975395997e+00, -6.283208806813826e+00, -6.285391936869995e+00, -6.284351332885954e+00, -6.284351332885954e+00, -2.287480507308590e+00, -2.305226991870460e+00, -2.272005483846567e+00, -2.287591269695470e+00, -2.304883871653003e+00, -2.304883871653003e+00, -7.465509519931915e-01, -8.263655345286038e-01, -6.917072036999551e-01, -7.330923335677328e-01, -7.598431053415542e-01, -7.598431053415542e-01, -1.638761649169488e-01, -2.592875392058103e-01, -1.525187848287248e-01, -2.395388140938651e+00, -1.742157834254168e-01, -1.742157834254168e-01, -1.264961257539040e-02, -1.433209423078655e-02, -9.938930186605497e-03, -9.935468897888572e-02, -1.200172654458128e-02, -1.200172654458129e-02, -7.734292299208569e-01, -7.633241354506801e-01, -7.665063231563405e-01, -7.692919173472786e-01, -7.678642862560136e-01, -7.678642862560136e-01, -7.565698482390779e-01, -6.246331269391012e-01, -6.577391595824960e-01, -6.940533564494891e-01, -6.751440713954696e-01, -6.751440713954696e-01, -8.635854585935840e-01, -3.081699530357246e-01, -3.530310521634663e-01, -4.500604339812654e-01, -3.955383560405111e-01, -3.955383560405112e-01, -5.778558532781476e-01, -5.678898953539338e-02, -7.958188174835087e-02, -4.365138924075161e-01, -1.237426128101198e-01, -1.237426128101199e-01, -2.392264675576875e-02, -6.510546137751314e-03, -9.793742622873575e-03, -1.167963462278584e-01, -1.121410368752068e-02, -1.121410368752067e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_opwlyp_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_opwlyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.022412056693607e-09, -7.022376608813346e-09, -7.022126161296761e-09, -7.022655488002625e-09, -7.022391322212707e-09, -7.022391322212707e-09, -9.117800491319299e-06, -9.118178364780790e-06, -9.126035851383640e-06, -9.105513185764696e-06, -9.117379971151071e-06, -9.117379971151071e-06, -4.987191255584522e-03, -4.986601828281990e-03, -4.929584785229169e-03, -4.803275578282633e-03, -4.851428563223695e-03, -4.851428563223695e-03, -3.534132501539312e-01, -3.558728814943441e-01, -2.870515425675891e-03, -3.965188735145402e-01, -4.213292612225351e-01, -4.213292612225350e-01, -1.013767065726875e+04, -8.890004714308099e+03, -4.137611100238323e+01, -4.783811524712310e+04, -2.651276737037718e+04, -2.651276737037719e+04, -2.091989717034874e-06, -2.093432770836488e-06, -2.092036132092422e-06, -2.093310207916302e-06, -2.092730942596601e-06, -2.092730942596601e-06, -6.767086824391645e-05, -6.633312752332319e-05, -6.776751789802467e-05, -6.657987948539799e-05, -6.688565676528386e-05, -6.688565676528386e-05, -1.023720274206275e-02, -9.640637506533970e-03, -1.331962402633281e-02, -1.460828862052303e-02, -9.901176845436684e-03, -9.901176845436684e-03, -1.563925993759283e-01, -1.917688222029301e-01, -2.491422482920793e-01, -1.277809732055631e-04, -5.323893151158403e-01, -5.323893151158403e-01, -1.091123014569290e+05, -5.344772589801053e+04, -1.936857742420411e+05, -4.433589424187472e+00, -9.144303022846879e+04, -9.144303022846872e+04, -1.520391898865904e-02, -1.348346477443951e-02, -1.407821160682582e-02, -1.470702650335892e-02, -1.438383727846612e-02, -1.438383727846612e-02, -1.530521952884032e-02, -1.643815032851555e-02, -1.587186361641758e-02, -1.558574518191117e-02, -1.572001597920121e-02, -1.572001597920121e-02, -7.881318884751203e-03, -1.300917033677580e-01, -9.711328583290080e-02, -5.795627622311973e-02, -7.738317868808503e-02, -7.738317868808503e-02, -2.229389294160350e-02, -4.747571365871609e+01, -1.150962698423284e+01, -7.614231467297228e-02, -1.749216920983684e+00, -1.749216920983689e+00, -3.553483707501545e+03, -3.754474054341691e+06, -3.601152465775658e+05, -2.243123880641939e+00, -1.220725016772464e+05, -1.220725016772468e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
