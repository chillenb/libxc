
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_edf1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111531611976251e+01, -2.111535325079698e+01, -2.111557101374495e+01, -2.111501750604486e+01, -2.111530003380719e+01, -2.111530003380719e+01, -3.539063443033675e+00, -3.539036860889293e+00, -3.538508372794192e+00, -3.540088960006431e+00, -3.539115451641165e+00, -3.539115451641165e+00, -7.339832792074309e-01, -7.337914710384683e-01, -7.314696530422247e-01, -7.365043743851114e-01, -7.347319789889174e-01, -7.347319789889174e-01, -2.263770713504073e-01, -2.274173400431457e-01, -8.455916156126589e-01, -1.995637207542625e-01, -2.079521351726743e-01, -2.079521351726741e-01, -1.210400882887058e-01, -1.206768467929919e-01, -1.746760490593215e-01, -1.132729988222090e-01, -1.115383259779716e-01, -1.115383259779714e-01, -5.153556417841411e+00, -5.153541122750547e+00, -5.153563668684323e+00, -5.153550010508283e+00, -5.153543945395770e+00, -5.153543945395770e+00, -2.153724121322131e+00, -2.163562041978608e+00, -2.155252323202555e+00, -2.163843877519215e+00, -2.158525091563685e+00, -2.158525091563685e+00, -6.255302222558242e-01, -6.638126076669694e-01, -5.830384319099983e-01, -5.923249038635906e-01, -6.331831344054004e-01, -6.331831344054004e-01, -1.797294224024051e-01, -2.448263035931665e-01, -1.756522641665116e-01, -1.915668170756468e+00, -1.806239322111680e-01, -1.806239322111680e-01, -1.027826066454926e-01, -1.090494466260195e-01, -7.093610464447772e-02, -1.657150338422197e-01, -8.581744914671698e-02, -8.581744914671702e-02, -6.141835540217981e-01, -6.126588388304707e-01, -6.131281490202203e-01, -6.135635134417928e-01, -6.133389041698586e-01, -6.133389041698586e-01, -5.979253011675960e-01, -5.430225129924701e-01, -5.563868739168050e-01, -5.710208953186081e-01, -5.632201554888027e-01, -5.632201554888027e-01, -6.948515001822406e-01, -2.880870579815933e-01, -3.245700246339746e-01, -3.910414704147838e-01, -3.542066774324851e-01, -3.542066774324856e-01, -5.020050658235917e-01, -1.778124231163840e-01, -1.752022891650554e-01, -3.707663189061138e-01, -1.619935311758967e-01, -1.619935311758967e-01, -1.341248756901954e-01, -6.437568329183017e-02, -8.330474166304785e-02, -1.615891988195828e-01, -8.070888664345378e-02, -8.070888664345385e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_edf1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.619295048506797e+01, -2.619306225551850e+01, -2.619351913220185e+01, -2.619185701510533e+01, -2.619273363159874e+01, -2.619273363159874e+01, -4.253671539629849e+00, -4.253738539001651e+00, -4.255388987947829e+00, -4.253310971661140e+00, -4.253852444383120e+00, -4.253852444383120e+00, -8.434272357607789e-01, -8.417062524696530e-01, -7.986402677499911e-01, -8.058693260578285e-01, -8.052157841465094e-01, -8.052157841465094e-01, -2.110015944037043e-01, -2.149633579739921e-01, -9.828606234983939e-01, -1.586910901833662e-01, -1.771832608902894e-01, -1.771832608902892e-01, -2.673858182318618e-02, -2.692779503084287e-02, -4.559512993984508e-02, -2.280342471048950e-02, -2.354502111020270e-02, -2.354502111020198e-02, -6.532745883039449e+00, -6.535724862971867e+00, -6.532879074587793e+00, -6.535509065193376e+00, -6.534258657971926e+00, -6.534258657971926e+00, -2.226446728836039e+00, -2.248895964484427e+00, -2.199282763693045e+00, -2.219095749369079e+00, -2.252035759468094e+00, -2.252035759468094e+00, -7.753387581580226e-01, -8.645620943101693e-01, -7.163094192625868e-01, -7.673575686075877e-01, -7.908039594519113e-01, -7.908039594519113e-01, -1.173075400919171e-01, -2.117935855974441e-01, -1.076640673803547e-01, -2.498672711004689e+00, -1.288140975634527e-01, -1.288140975634527e-01, -2.005141316547772e-02, -2.201927164165668e-02, -1.478535761744807e-02, -6.644849109803698e-02, -1.787064224019671e-02, -1.787064224019648e-02, -8.069887229470529e-01, -7.987572925624105e-01, -8.018131480320414e-01, -8.042187395232684e-01, -8.030304595047508e-01, -8.030304595047508e-01, -7.868889632198874e-01, -6.339187116755215e-01, -6.797221053822002e-01, -7.250589807622828e-01, -7.022456691296736e-01, -7.022456691296736e-01, -9.034444854462695e-01, -2.661330107268005e-01, -3.238583140509362e-01, -4.531825673289219e-01, -3.824964034453667e-01, -3.824964034453677e-01, -5.858160494240929e-01, -4.555147041276253e-02, -5.563173296617944e-02, -4.477434227084975e-01, -8.392237813470582e-02, -8.392237813470591e-02, -3.094253269447830e-02, -1.119994005507921e-02, -1.584821149404228e-02, -7.848323184869152e-02, -1.675428425481550e-02, -1.675428425481594e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_edf1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_edf1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.902513675666490e-09, -4.902433078321555e-09, -4.902099602797173e-09, -4.903298223875239e-09, -4.902666624410848e-09, -4.902666624410848e-09, -7.126151527344747e-06, -7.125882700783701e-06, -7.118960184474984e-06, -7.125614477691459e-06, -7.125148994241858e-06, -7.125148994241858e-06, -4.553030979931014e-03, -4.575851472117099e-03, -5.114156805637711e-03, -4.956742322725250e-03, -4.989777545282203e-03, -4.989777545282203e-03, -6.516432550702247e-01, -6.296780006045499e-01, -2.516680817532111e-03, -1.356475944084047e+00, -1.034061703346957e+00, -1.034061703346955e+00, -1.989526888476420e+04, -1.745267079966236e+04, -1.041042863601723e+02, -9.367780051589855e+04, -5.196630157930354e+04, -5.196630157930389e+04, -1.279613331244221e-06, -1.276499517294730e-06, -1.279477035582812e-06, -1.276728245103290e-06, -1.278032732651500e-06, -1.278032732651500e-06, -7.320624214583301e-05, -7.118229609879905e-05, -7.465772303250724e-05, -7.283752180591673e-05, -7.138444183267137e-05, -7.138444183267137e-05, -6.872697007503885e-03, -3.493203641202390e-03, -9.431791979600663e-03, -6.046475390165307e-03, -6.319597672547736e-03, -6.319597672547736e-03, -3.485780496334297e+00, -5.041001106369687e-01, -4.624841232703316e+00, -5.286106509642211e-05, -2.606569256858145e+00, -2.606569256858145e+00, -2.135667641893266e+05, -1.046678970430622e+05, -3.795248501768488e+05, -2.095581208829726e+01, -1.791783741904413e+05, -1.791783741904411e+05, -3.243955432278085e-03, -4.660804009178316e-03, -4.237971215899868e-03, -3.834801007062016e-03, -4.043464921950421e-03, -4.043464921950421e-03, -2.889958007122068e-03, -1.456101374507748e-02, -1.160226917841650e-02, -8.636784742421931e-03, -1.015563109285894e-02, -1.015563109285894e-02, -3.028057102684033e-03, -2.459223445173060e-01, -1.417946499088243e-01, -5.421293646215634e-02, -9.070323727278019e-02, -9.070323727277980e-02, -1.989255057894528e-02, -1.162244329018694e+02, -4.081993934719520e+01, -6.032107787892372e-02, -9.889218997036991e+00, -9.889218997036952e+00, -6.985655126505450e+03, -7.340950092119281e+06, -7.046414338537237e+05, -1.216507670645681e+01, -2.391797493707092e+05, -2.391797493707104e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
