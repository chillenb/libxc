
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fco_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.908716851774365e+01, -1.908656825269741e+01, -1.908510785370051e+01, -1.909401266094626e+01, -1.908917542926119e+01, -1.908917542926119e+01, -3.844075573098484e+00, -3.844097771886578e+00, -3.844700158002570e+00, -3.844335690385635e+00, -3.844188679372982e+00, -3.844188679372982e+00, -8.965822843239779e-01, -8.963284938105009e-01, -8.929490445819070e-01, -8.976255035603274e-01, -8.960060759794858e-01, -8.960060759794858e-01, -4.302129488814208e-01, -4.304744824995738e-01, -1.003415816007359e+00, -4.087254148851001e-01, -4.143652371602383e-01, -4.143652371602381e-01, -1.980922764900217e-01, -2.003302404822857e-01, -3.225925713186812e-01, -1.586130245617884e-01, -1.735239259352620e-01, -1.735239259352620e-01, -5.589126834252435e+00, -5.590686893797871e+00, -5.589198545362437e+00, -5.590575811219140e+00, -5.589917982690621e+00, -5.589917982690621e+00, -2.271782576663164e+00, -2.283704957986349e+00, -2.268643166313587e+00, -2.278908005274639e+00, -2.280168064996241e+00, -2.280168064996241e+00, -7.965881346181715e-01, -8.395106099685308e-01, -7.555992389928469e-01, -7.660383273793205e-01, -8.043368314274888e-01, -8.043368314274888e-01, -3.881973956547068e-01, -4.594654085585284e-01, -3.799772117376931e-01, -2.239132841395264e+00, -3.858023679306810e-01, -3.858023679306810e-01, -1.364628322537210e-01, -1.557294362002743e-01, -1.234573470903845e-01, -3.427720239316553e-01, -1.406370543235402e-01, -1.406370543235402e-01, -7.909686748326056e-01, -7.872913729595322e-01, -7.883249237142684e-01, -7.893511755647601e-01, -7.888134095095350e-01, -7.888134095095350e-01, -7.750103327085288e-01, -7.184389831288244e-01, -7.302419345375549e-01, -7.442980699407908e-01, -7.366593420036314e-01, -7.366593420036314e-01, -8.710047476730118e-01, -4.977622629054337e-01, -5.259710510784170e-01, -5.777388540369324e-01, -5.480173582865886e-01, -5.480173582865885e-01, -6.804035738378090e-01, -3.243790636665494e-01, -3.413390653474432e-01, -5.557208146797955e-01, -3.503152495823619e-01, -3.503152495823619e-01, -2.262993775020067e-01, -6.677712777278373e-02, -1.113516981465420e-01, -3.467694168503056e-01, -1.340506700097077e-01, -1.340506700097076e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fco_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.103413913404462e+01, 3.103551601779868e+01, 3.104021542818340e+01, 3.101975984410100e+01, 3.103068010954216e+01, 3.103068010954216e+01, -5.228785485517025e+00, -5.228854944511974e+00, -5.230581540552869e+00, -5.228529054977368e+00, -5.228989524698094e+00, -5.228989524698094e+00, -1.015470211538876e+00, -1.013372598140331e+00, -9.595955732157134e-01, -9.676242869929924e-01, -9.672256595325507e-01, -9.672256595325507e-01, -3.779181638696791e-01, -3.825955458853585e-01, -1.170659432648815e+00, -3.140294425762549e-01, -3.401440821727937e-01, -3.401440821727936e-01, -1.379089225999843e-01, -1.353774029457766e-01, -1.682288588478248e-01, -1.612165689832139e-01, -1.415248734571824e-01, -1.415248734571823e-01, -7.370878828978960e+00, -7.370108368273486e+00, -7.370854738581453e+00, -7.370174608136483e+00, -7.370483969585848e+00, -7.370483969585848e+00, -2.586754445718039e+00, -2.619811856666000e+00, -2.540417979213814e+00, -2.569881258898649e+00, -2.627175209394481e+00, -2.627175209394481e+00, -9.485904605760418e-01, -1.056449909931716e+00, -8.843465494673998e-01, -9.457396888792264e-01, -9.660935093953013e-01, -9.660935093953013e-01, -2.519123449838116e-01, -3.609049482535929e-01, -2.429231724843648e-01, -3.086243985402698e+00, -2.810589122484578e-01, -2.810589122484578e-01, -1.605314157233036e-01, -1.543964469871530e-01, -9.934439045875496e-02, -2.043573636726494e-01, -1.167629050942282e-01, -1.167629050942283e-01, -9.982479776571581e-01, -9.829120581180241e-01, -9.880118254843188e-01, -9.924236307489426e-01, -9.901898750329962e-01, -9.901898750329962e-01, -9.787135099845774e-01, -7.951377690230285e-01, -8.451640191511259e-01, -8.961177270690338e-01, -8.701589684131404e-01, -8.701589684131404e-01, -1.099853229894181e+00, -4.188765649950739e-01, -4.818008825824353e-01, -6.130944688325277e-01, -5.427108255191192e-01, -5.427108255191193e-01, -7.457851327725478e-01, -1.654719793476485e-01, -1.842632891794088e-01, -6.078659458949973e-01, -2.310236319120786e-01, -2.310236319120787e-01, -1.380137752380282e-01, -1.374975900132068e-01, -1.393051435625276e-01, -2.239270520023503e-01, -1.114226979089037e-01, -1.114226979089036e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fco_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fco", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.657255255976687e-07, -1.657281117088229e-07, -1.657346411179281e-07, -1.656962716389115e-07, -1.657170812309053e-07, -1.657170812309053e-07, 3.020755299468397e-06, 3.021862246876889e-06, 3.047341981600210e-06, 3.001778441979429e-06, 3.021908810032726e-06, 3.021908810032726e-06, -3.697700936955180e-03, -3.731802161928924e-03, -4.580521247591061e-03, -4.407110764370601e-03, -4.430840150649031e-03, -4.430840150649031e-03, -9.879046157489182e-01, -9.480271841779894e-01, -1.738133207172767e-03, -2.365904460232961e+00, -1.663471713539563e+00, -1.663471713539563e+00, -1.629616458524332e+04, -1.508357759585365e+04, -1.396396841310221e+02, -2.421721202543439e+04, -3.069880972544387e+04, -3.069880972544392e+04, 9.555269322723858e-07, 9.540774322783606e-07, 9.554575138988230e-07, 9.541781549875458e-07, 9.547961633411411e-07, 9.547961633411411e-07, -4.446276247947684e-05, -4.198880403524362e-05, -4.791395034069014e-05, -4.564259099107656e-05, -4.144053308226705e-05, -4.144053308226705e-05, -5.605969053822641e-03, -3.663974463741270e-05, -8.730686050507955e-03, -4.280354323846568e-03, -4.908332107816416e-03, -4.908332107816416e-03, -7.341278087959146e+00, -8.580212255802433e-01, -9.488668390748320e+00, 1.745988087057465e-04, -4.708573212526982e+00, -4.708573212526982e+00, -7.223831330366731e+03, -3.096566030492320e+04, -2.494222209740456e+05, -3.411885917462032e+01, -1.047598774830926e+05, -1.047598774830925e+05, 3.874468017785456e-03, -1.670483182657174e-03, -5.078703235535478e-04, 8.940659807512071e-04, 1.243177108311432e-04, 1.243177108311432e-04, 9.167802310628805e-03, -1.489592185789301e-02, -1.146503800701948e-02, -8.012310838021560e-03, -9.815255224479510e-03, -9.815255224479510e-03, 2.566835521071349e-04, -3.731435117910004e-01, -1.953027600923023e-01, -7.041371968014112e-02, -1.193065424294842e-01, -1.193065424294842e-01, -2.168250821182304e-02, -1.553962143054111e+02, -6.247059888464841e+01, -8.766622377600711e-02, -1.684185526935943e+01, -1.684185526935943e+01, -6.951591850357339e+03, 6.401629461616517e+06, 5.167504680830241e+04, -2.041080229904660e+01, -1.407102641134870e+05, -1.407102641134875e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
