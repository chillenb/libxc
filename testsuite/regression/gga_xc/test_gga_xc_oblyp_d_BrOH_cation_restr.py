
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_oblyp_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.108088301636013e+01, -2.108091080747655e+01, -2.108110188892375e+01, -2.108068702034470e+01, -2.108089480002666e+01, -2.108089480002666e+01, -3.543422206927967e+00, -3.543386179536282e+00, -3.542638859894332e+00, -3.544601014347376e+00, -3.543463145738356e+00, -3.543463145738356e+00, -7.357905863871922e-01, -7.356506059404166e-01, -7.336356785070327e-01, -7.387235843744009e-01, -7.369601439540062e-01, -7.369601439540062e-01, -2.192672295091351e-01, -2.212249242645374e-01, -8.472691107864636e-01, -1.789979956906462e-01, -1.944658299621004e-01, -1.944658299621004e-01, -6.590648343967075e-02, -6.594371418330035e-02, -1.068205246091456e-01, -6.019252117918161e-02, -5.991463335379157e-02, -5.991463335379154e-02, -5.115055900128453e+00, -5.114432821441770e+00, -5.115038058369916e+00, -5.114487848766467e+00, -5.114734166833668e+00, -5.114734166833668e+00, -2.162760514936765e+00, -2.173084968768585e+00, -2.163148079603383e+00, -2.172261896397509e+00, -2.168277473287010e+00, -2.168277473287010e+00, -6.219209307823901e-01, -6.483041450186487e-01, -5.806762246806645e-01, -5.803414893263646e-01, -6.284794824679353e-01, -6.284794824679353e-01, -1.378217109531630e-01, -2.281550331028370e-01, -1.312445537254585e-01, -1.876468153209537e+00, -1.528606922160745e-01, -1.528606922160745e-01, -5.430162470537098e-02, -5.798315562473560e-02, -3.798229161008966e-02, -1.106577328539916e-01, -4.594094286370155e-02, -4.594094286370157e-02, -5.949198193711176e-01, -5.978687524840991e-01, -5.968896365301749e-01, -5.960295840005098e-01, -5.964643701122387e-01, -5.964643701122387e-01, -5.775932335801177e-01, -5.438954882885596e-01, -5.546750918755031e-01, -5.642378869330852e-01, -5.593103187542748e-01, -5.593103187542748e-01, -6.794136153713521e-01, -2.781957300069521e-01, -3.209240871543654e-01, -3.917889519369487e-01, -3.542031717087111e-01, -3.542031717087111e-01, -5.028292461519899e-01, -1.078191273514738e-01, -1.088773849126586e-01, -3.703896105401500e-01, -1.197609728227938e-01, -1.197609728227938e-01, -7.432313348303360e-02, -3.350624745630575e-02, -4.383418921263273e-02, -1.165315479863416e-01, -4.317384326637783e-02, -4.317384326637781e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_oblyp_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.531721694848037e+01, -2.531731155498788e+01, -2.531771504536817e+01, -2.531630785300045e+01, -2.531704762032198e+01, -2.531704762032198e+01, -4.137922683129537e+00, -4.137960777854703e+00, -4.138941777895452e+00, -4.138009293858774e+00, -4.138066387611075e+00, -4.138066387611075e+00, -8.340339090769414e-01, -8.329476001728552e-01, -8.076884860953721e-01, -8.141191585531857e-01, -8.128884903398277e-01, -8.128884903398277e-01, -2.417311221557753e-01, -2.438311608513339e-01, -9.666748755319881e-01, -2.030851110136829e-01, -2.160907043715161e-01, -2.160907043715161e-01, -1.926136058285298e-02, -1.967714523455778e-02, -5.911261283028706e-02, -1.477393267680139e-02, -1.602199765739643e-02, -1.602199765739641e-02, -6.284011533220794e+00, -6.286488221052320e+00, -6.284123464536486e+00, -6.286309889825211e+00, -6.285267708935230e+00, -6.285267708935230e+00, -2.287682070400183e+00, -2.305441430401536e+00, -2.272181259709184e+00, -2.287778898399214e+00, -2.305104603688457e+00, -2.305104603688457e+00, -7.464447525078494e-01, -8.270023708962132e-01, -6.915505174872211e-01, -7.332173264842088e-01, -7.597568998794469e-01, -7.597568998794469e-01, -1.639117503546964e-01, -2.582146153007231e-01, -1.527605355560241e-01, -2.398042916361878e+00, -1.738469290127533e-01, -1.738469290127533e-01, -1.262944632138145e-02, -1.430663032386148e-02, -9.919216417073303e-03, -1.002155074641271e-01, -1.197811238059448e-02, -1.197811238059449e-02, -7.747590813776839e-01, -7.639604098491553e-01, -7.675888180416062e-01, -7.707170502627931e-01, -7.691363790531061e-01, -7.691363790531061e-01, -7.569161407777645e-01, -6.243315489729159e-01, -6.575492791263913e-01, -6.939528789360530e-01, -6.750009903586501e-01, -6.750009903586501e-01, -8.641063440215092e-01, -3.071025782146860e-01, -3.521678975462118e-01, -4.496169378201008e-01, -3.948991224166219e-01, -3.948991224166219e-01, -5.775174313483605e-01, -5.700967084942586e-02, -8.048798068582075e-02, -4.361510344580179e-01, -1.241930400278731e-01, -1.241930400278731e-01, -2.386102578982584e-02, -6.503672020932039e-03, -9.779329473167956e-03, -1.173648128239124e-01, -1.119220843068950e-02, -1.119220843068948e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_oblyp_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_oblyp_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.010351569225595e-09, -7.010316090272154e-09, -7.010065810604430e-09, -7.010595593088854e-09, -7.010331145062694e-09, -7.010331145062694e-09, -9.104846472698621e-06, -9.105222880087748e-06, -9.113047636611328e-06, -9.092591199799309e-06, -9.104425389827379e-06, -9.104425389827379e-06, -4.992200370536292e-03, -4.991718589633517e-03, -4.937554155264190e-03, -4.810747348597068e-03, -4.858944309028877e-03, -4.858944309028877e-03, -3.606839489606430e-01, -3.627313198747586e-01, -2.871522436219070e-03, -4.137444357307367e-01, -4.338087999646303e-01, -4.338087999646295e-01, -1.013779821358894e+04, -8.890124669308731e+03, -4.000368110908792e+01, -4.783843825138677e+04, -2.651301226020524e+04, -2.651301226020526e+04, -2.088082460897864e-06, -2.089498088464996e-06, -2.088127795673313e-06, -2.089377680399882e-06, -2.088809881927750e-06, -2.088809881927750e-06, -6.762707992258798e-05, -6.628872733908685e-05, -6.772659207829660e-05, -6.653833915544642e-05, -6.684015702552289e-05, -6.684015702552289e-05, -1.024388528612949e-02, -9.447889673196994e-03, -1.333431655756830e-02, -1.453449967284549e-02, -9.905916060351457e-03, -9.905916060351457e-03, -1.752902643921379e-01, -1.992264043054361e-01, -2.573199501218042e-01, -1.247534792042615e-04, -5.561774916746565e-01, -5.561774916746565e-01, -1.091129016703917e+05, -5.344809390416915e+04, -1.936874154402006e+05, -4.166039798810392e+00, -9.144380085196027e+04, -9.144380085196023e+04, -1.407512729826107e-02, -1.316692885483622e-02, -1.343828485577609e-02, -1.369726496457411e-02, -1.356333939811822e-02, -1.356333939811822e-02, -1.621995777659865e-02, -1.647713659421320e-02, -1.589450483485895e-02, -1.559396425904401e-02, -1.573559025946790e-02, -1.573559025946790e-02, -7.768548497108336e-03, -1.330653541702093e-01, -9.840829646737626e-02, -5.824415878025992e-02, -7.802126431385673e-02, -7.802126431385674e-02, -2.235840131944086e-02, -4.600349564427317e+01, -1.082330484851637e+01, -7.646071723891804e-02, -1.705372515037438e+00, -1.705372515037444e+00, -3.553543107491186e+03, -3.754483966007939e+06, -3.601169298462057e+05, -2.161383744554401e+00, -1.220735091085210e+05, -1.220735091085214e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
