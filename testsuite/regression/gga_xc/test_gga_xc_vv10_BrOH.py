
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_vv10_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.130883256879319e+01, -2.130884387164081e+01, -2.130899057038970e+01, -2.130880356406449e+01, -2.130883772477335e+01, -2.130883772477335e+01, -3.596907735006160e+00, -3.596866027986020e+00, -3.595866404478065e+00, -3.598343018681689e+00, -3.596901433840362e+00, -3.596901433840362e+00, -7.508597624297783e-01, -7.508528601416210e-01, -7.518410936022761e-01, -7.564718909231968e-01, -7.508537956819771e-01, -7.508537956819771e-01, -2.345016105878302e-01, -2.362550860931150e-01, -8.704084213232722e-01, -1.878558381804626e-01, -2.350113960652451e-01, -2.350113960652451e-01, -3.080109233010465e-02, -3.168754824567879e-02, -8.447509159196227e-02, -2.037037089030884e-02, -3.136872057480562e-02, -3.136872057480562e-02, -5.130698366025550e+00, -5.129545300875828e+00, -5.130587926490430e+00, -5.129691189117012e+00, -5.130095619673703e+00, -5.130095619673703e+00, -2.224065229492667e+00, -2.233999339330593e+00, -2.225605605642988e+00, -2.233372821990224e+00, -2.228676358730874e+00, -2.228676358730874e+00, -6.238789019366054e-01, -6.508800046975327e-01, -5.957417615838324e-01, -5.993731704621772e-01, -6.421482325893810e-01, -6.421482325893810e-01, -1.523772430231304e-01, -2.493338422347985e-01, -1.493556642237321e-01, -1.880459007240687e+00, -1.663810714989786e-01, -1.663810714989786e-01, -1.981672991218853e-02, -2.147679920105416e-02, -1.625977745119761e-02, -1.058285900996815e-01, -1.953414481369125e-02, -1.953414481369125e-02, -6.191841581623333e-01, -6.167479489212169e-01, -6.173093847364522e-01, -6.179687627361047e-01, -6.176121161309743e-01, -6.176121161309743e-01, -6.007762781598962e-01, -5.631459956306082e-01, -5.714545749147318e-01, -5.785911222811447e-01, -5.747017538556928e-01, -5.747017538556928e-01, -6.809294918402938e-01, -2.999197674116932e-01, -3.408654754864779e-01, -4.051078011300503e-01, -3.714040617416776e-01, -3.714040617416775e-01, -5.129913645861309e-01, -8.137398667917878e-02, -9.973006603192798e-02, -3.759186076160150e-01, -1.269072608120560e-01, -1.269072608120560e-01, -3.491635333378783e-02, -9.331258080587698e-03, -1.392769839273802e-02, -1.209202484853661e-01, -1.705409558405186e-02, -1.705409558405184e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_vv10_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.423565857703024e+01, -2.423575045566391e+01, -2.423615522438524e+01, -2.423465090960968e+01, -2.423570707339275e+01, -2.423570707339275e+01, -3.984722900428531e+00, -3.984751072664753e+00, -3.985690146965760e+00, -3.984900950039959e+00, -3.984753928406331e+00, -3.984753928406331e+00, -8.239437765375885e-01, -8.232617993590130e-01, -8.076501658698677e-01, -8.132022245201497e-01, -8.236938859460807e-01, -8.236938859460807e-01, -2.587723155006090e-01, -2.619952198075791e-01, -9.744684385062613e-01, -1.930084503248387e-01, -2.597432681953374e-01, -2.597432681953374e-01, -2.542268644113197e-02, -2.622195289921671e-02, -7.791316763360399e-02, -1.640884337836551e-02, -2.595672391420320e-02, -2.595672391420320e-02, -6.115379395970828e+00, -6.119586806264986e+00, -6.115804830376470e+00, -6.119076205504341e+00, -6.117539654757025e+00, -6.117539654757025e+00, -2.304172778347542e+00, -2.317318617041709e+00, -2.301538882319750e+00, -2.311732993327406e+00, -2.316693835562125e+00, -2.316693835562125e+00, -7.343964173449963e-01, -8.427840812457849e-01, -6.980892064489194e-01, -7.611535599939226e-01, -7.650304068013014e-01, -7.650304068013014e-01, -1.496292103777347e-01, -2.604165729103500e-01, -1.471413434691412e-01, -2.428939198381352e+00, -1.674014788652977e-01, -1.674014788652977e-01, -1.595845971940843e-02, -1.732902924564679e-02, -1.311421376092128e-02, -1.006706161935488e-01, -1.576271707273257e-02, -1.576271707273259e-02, -8.131906539649090e-01, -8.014705980705091e-01, -8.065324164848675e-01, -8.098612467593337e-01, -8.082710501764945e-01, -8.082710501764945e-01, -7.889441282347390e-01, -6.362889893598223e-01, -6.671466279625309e-01, -7.083383679088378e-01, -6.855484143494396e-01, -6.855484143494395e-01, -8.789854305734847e-01, -3.200123656796123e-01, -3.725240080726940e-01, -4.600996460933722e-01, -4.140454839413114e-01, -4.140454839413113e-01, -5.793816772510385e-01, -7.415519200163319e-02, -9.360876519278045e-02, -4.375945204256612e-01, -1.238100199938745e-01, -1.238100199938745e-01, -2.896146024591464e-02, -7.471528219401426e-03, -1.117446787940921e-02, -1.181184919135584e-01, -1.374695015153584e-02, -1.374695015153584e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_vv10_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_vv10", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.053112185536744e-08, -1.053107104500574e-08, -1.053069566657620e-08, -1.053153040686020e-08, -1.053109630300645e-08, -1.053109630300645e-08, -1.276633575734557e-05, -1.276693948564899e-05, -1.278142215365631e-05, -1.274580711560985e-05, -1.276643289730060e-05, -1.276643289730060e-05, -5.754895307203313e-03, -5.742311679464098e-03, -5.356701635068694e-03, -5.248702528256984e-03, -5.750474528052012e-03, -5.750474528052012e-03, -3.991119087010856e-01, -3.906819611053051e-01, -3.402053461478736e-03, -8.528554871349928e-01, -3.966633387666288e-01, -3.966633387666288e-01, -6.985327515830961e+02, -6.238867925566121e+02, -1.383171096141900e+01, -3.642465494188364e+03, -6.496335951436367e+02, -6.496335951436367e+02, -2.862810857574862e-06, -2.858950696933744e-06, -2.862419707541780e-06, -2.859419390254668e-06, -2.860850196627995e-06, -2.860850196627995e-06, -7.556687990319423e-05, -7.463011236677763e-05, -7.480870256397940e-05, -7.408719505544167e-05, -7.592505101090655e-05, -7.592505101090655e-05, -1.263782655688553e-02, -4.386431978260566e-03, -1.521016141660344e-02, -9.859103917368965e-03, -1.108290680635097e-02, -1.108290680635097e-02, -1.705896737529560e+00, -2.984362134197314e-01, -1.866144916230911e+00, -8.378182413114042e-05, -1.305232734722222e+00, -1.305232734722222e+00, -4.066862041743037e+03, -2.948080680446791e+03, -8.973299080045879e+03, -6.268638689294523e+00, -4.307658416914459e+03, -4.307658416914448e+03, 1.824747527986254e-03, -4.390166602348197e-03, -2.424776125264795e-03, -7.039783950013902e-04, -1.586365739421352e-03, -1.586365739421353e-03, 3.539794046183233e-03, -1.828939177930873e-02, -1.793050530602261e-02, -1.546828683698574e-02, -1.719779671817425e-02, -1.719779671817424e-02, -4.161793531736954e-03, -1.544404787197892e-01, -1.012932564644864e-01, -6.280217436110849e-02, -7.929510513457136e-02, -7.929510513457147e-02, -2.592227503570798e-02, -1.561307414702896e+01, -7.532911160887920e+00, -8.989082629676082e-02, -3.400931642151215e+00, -3.400931642151218e+00, -4.234025105407844e+02, -8.271490246593070e+04, -1.666612483573410e+04, -4.128594670717176e+00, -7.414579308436239e+03, -7.414579308436250e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
