
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_xlyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120772724149142e+01, -2.120774901813563e+01, -2.120792669818364e+01, -2.120756849110343e+01, -2.120773805260789e+01, -2.120773805260789e+01, -3.568438226475858e+00, -3.568407008957546e+00, -3.567694213271231e+00, -3.569668425551232e+00, -3.568437152765142e+00, -3.568437152765142e+00, -7.427572552062200e-01, -7.427283337127383e-01, -7.436270530772612e-01, -7.481998174187880e-01, -7.427432308791669e-01, -7.427432308791669e-01, -2.302327815323619e-01, -2.317304184780909e-01, -8.630176685555707e-01, -1.858182918306648e-01, -2.306648822765777e-01, -2.306648822765777e-01, -4.730875377024703e-02, -4.794528631976731e-02, -9.364141013412476e-02, -4.205491586231892e-02, -4.747779694445835e-02, -4.747779694445835e-02, -5.134859807212656e+00, -5.134099098062425e+00, -5.134788780247210e+00, -5.134197176089949e+00, -5.134460089972110e+00, -5.134460089972110e+00, -2.190004799194972e+00, -2.199752774739619e+00, -2.191517669612012e+00, -2.199097984161154e+00, -2.194669398401648e+00, -2.194669398401648e+00, -6.178115826904524e-01, -6.405832089379440e-01, -5.893677407368347e-01, -5.913586887321958e-01, -6.364022364365618e-01, -6.364022364365618e-01, -1.501183929155025e-01, -2.451512293933550e-01, -1.483145908078857e-01, -1.876107785117975e+00, -1.651198521554475e-01, -1.651198521554475e-01, -4.125342172572475e-02, -4.244072900672861e-02, -3.245056797469399e-02, -1.108845657194053e-01, -3.853713916778778e-02, -3.853713916778778e-02, -6.018338224539125e-01, -6.053939152134850e-01, -6.041957909341842e-01, -6.032145121966324e-01, -6.037112199607575e-01, -6.037112199607575e-01, -5.822010428301695e-01, -5.558294391563745e-01, -5.648198246892523e-01, -5.721196432208445e-01, -5.683494548996764e-01, -5.683494548996764e-01, -6.714388066287068e-01, -2.952126491372679e-01, -3.351326134024955e-01, -3.973091429234935e-01, -3.644352904524030e-01, -3.644352904524029e-01, -5.055164135701915e-01, -9.121693142580750e-02, -1.049193351739251e-01, -3.675656297580221e-01, -1.294911405840486e-01, -1.294911405840486e-01, -5.216320846870109e-02, -2.989722011488209e-02, -3.439521834148158e-02, -1.250718894849883e-01, -3.454027388816579e-02, -3.454027388816579e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_xlyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.520622185945491e+01, -2.520630521651820e+01, -2.520668970855776e+01, -2.520532446862286e+01, -2.520626571365392e+01, -2.520626571365392e+01, -4.114640902206147e+00, -4.114674093861294e+00, -4.115753499346518e+00, -4.114751947826409e+00, -4.114675210856804e+00, -4.114675210856804e+00, -8.205989374299274e-01, -8.196070328863744e-01, -7.951975722315717e-01, -8.011880743648898e-01, -8.202376468736989e-01, -8.202376468736989e-01, -2.451829176563839e-01, -2.473920593178376e-01, -9.822054149086142e-01, -2.000590183483677e-01, -2.458225863317523e-01, -2.458225863317523e-01, -1.891306947980216e-02, -1.965759046625824e-02, -9.496844264941560e-02, -1.196247466497622e-02, -1.945662335806523e-02, -1.945662335806523e-02, -6.255939883659524e+00, -6.258434808280147e+00, -6.256195226714420e+00, -6.258135146879213e+00, -6.257218497141147e+00, -6.257218497141147e+00, -2.270570297881765e+00, -2.287548579104643e+00, -2.262278117090995e+00, -2.275469644115563e+00, -2.293015136295621e+00, -2.293015136295621e+00, -7.334271471870198e-01, -8.154839350078418e-01, -6.966717045525901e-01, -7.410563377247188e-01, -7.627998930796711e-01, -7.627998930796711e-01, -1.758930679164227e-01, -2.633007956553899e-01, -1.695860414331954e-01, -2.388222393608258e+00, -1.811945599676628e-01, -1.811945599676628e-01, -1.165056273207804e-02, -1.255612206267126e-02, -9.518669412514599e-03, -1.260774907388085e-01, -1.142143100664078e-02, -1.142143100664078e-02, -7.845764123977086e-01, -7.737351015294459e-01, -7.774863631729056e-01, -7.804642415252672e-01, -7.789658578039861e-01, -7.789658578039861e-01, -7.618183855070912e-01, -6.320972118356948e-01, -6.651434599798914e-01, -6.990027712357836e-01, -6.814370313995187e-01, -6.814370313995188e-01, -8.522138965062112e-01, -3.135855524382164e-01, -3.589125558000203e-01, -4.488804137031573e-01, -3.993022432463623e-01, -3.993022432463623e-01, -5.727493217824852e-01, -8.650676622164676e-02, -1.197315606857368e-01, -4.277758472865832e-01, -1.441098143532596e-01, -1.441098143532596e-01, -2.186128198352615e-02, -6.256024790868437e-03, -8.497163871643371e-03, -1.350717440220420e-01, -9.996484781251050e-03, -9.996484781251046e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_xlyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_xlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.722259366842723e-09, -7.722227549088402e-09, -7.721968089337031e-09, -7.722491479120531e-09, -7.722243569547582e-09, -7.722243569547582e-09, -1.002156186041666e-05, -1.002190222365485e-05, -1.002962016702011e-05, -1.000788528065187e-05, -1.002156705592023e-05, -1.002156705592023e-05, -5.543321738545086e-03, -5.540910424701444e-03, -5.422399440814065e-03, -5.298157928428688e-03, -5.542560838031989e-03, -5.542560838031989e-03, -4.627085985859267e-01, -4.612573578308202e-01, -3.086600257807220e-03, -6.372064278578453e-01, -4.626277004291141e-01, -4.626277004291141e-01, -1.970956283110426e+03, -1.722282642112418e+03, -7.119683559771879e+00, -1.494226623453597e+04, -1.794157052865939e+03, -1.794157052865939e+03, -2.314813273285397e-06, -2.316494673627799e-06, -2.314971890497698e-06, -2.316279412962736e-06, -2.315693054922025e-06, -2.315693054922025e-06, -7.361141137135524e-05, -7.223422804069389e-05, -7.352038322901814e-05, -7.244677660648105e-05, -7.279357927779710e-05, -7.279357927779710e-05, -1.209823880909377e-02, -1.128148084449180e-02, -1.456547929758304e-02, -1.526484660549629e-02, -1.082402431475128e-02, -1.082402431475128e-02, -4.088702552214691e-01, -2.574660023270092e-01, -6.235666454690794e-01, -1.402134650042393e-04, -7.560088289073823e-01, -7.560088289073823e-01, -1.684812291432821e+04, -1.147911808677678e+04, -3.535203537820157e+04, -1.132535158736299e+00, -1.673850658271827e+04, -1.673850658271828e+04, -1.567422787966159e-02, -1.430641437150517e-02, -1.464731551448106e-02, -1.500920101129397e-02, -1.481350577272971e-02, -1.481350577272971e-02, -1.812324831102892e-02, -1.780573226967913e-02, -1.721551085599828e-02, -1.693678443364087e-02, -1.706814161608869e-02, -1.706814161608868e-02, -9.267904214347070e-03, -1.561165208463255e-01, -1.113000281401419e-01, -6.625094612333110e-02, -8.760574944134662e-02, -8.760574944134668e-02, -2.580754674060446e-02, -1.066597718835354e+01, -8.585989461752774e-01, -9.401176268979797e-02, -1.243055311001628e+00, -1.243055311001635e+00, -1.146955326462283e+03, -5.592903618709391e+05, -8.419259386998690e+04, -1.960212953153285e+00, -2.972943882605057e+04, -2.972943882605068e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
