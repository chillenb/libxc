
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_xc_th_fc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.985813712215281e+01, -2.985731785877100e+01, -2.985532349015017e+01, -2.986870538870650e+01, -2.985769119052028e+01, -2.985769119052028e+01, -3.815537351090184e+00, -3.815557518579220e+00, -3.816262341606294e+00, -3.815818560484250e+00, -3.815563188433422e+00, -3.815563188433422e+00, -8.974205096858867e-01, -8.972953955759889e-01, -8.974835619597775e-01, -9.014756828653775e-01, -8.973716163240618e-01, -8.973716163240618e-01, -4.360507880698208e-01, -4.361076986993236e-01, -1.013867783587299e+00, -4.146959588295540e-01, -4.360202769497855e-01, -4.360202769497855e-01, -2.270012361415855e-01, -2.296803458228881e-01, -3.384029617368635e-01, -1.812303108199345e-01, -2.280332871903511e-01, -2.280332871903511e-01, -5.618008358525357e+00, -5.619699814337445e+00, -5.618182309717359e+00, -5.619497513270254e+00, -5.618874663386412e+00, -5.618874663386412e+00, -2.247488129914426e+00, -2.258569937992795e+00, -2.246697059096391e+00, -2.255169870089006e+00, -2.256526917691696e+00, -2.256526917691696e+00, -7.915768504000097e-01, -8.331107247111774e-01, -7.638015841552769e-01, -7.773959902885766e-01, -8.113223570276992e-01, -8.113223570276992e-01, -4.005936824868776e-01, -4.731021793032985e-01, -3.927870156916705e-01, -2.213015795431300e+00, -4.001640532246269e-01, -4.001640532246269e-01, -1.777268452229221e-01, -1.887244151046453e-01, -1.568654519693952e-01, -3.540149161342724e-01, -1.771600123523625e-01, -1.771600123523625e-01, -8.022039042814231e-01, -7.977951444671239e-01, -7.990341118928985e-01, -8.002000858392955e-01, -7.995885496549043e-01, -7.995885496549043e-01, -7.826134870776909e-01, -7.290347152597728e-01, -7.400628133038443e-01, -7.525784171283164e-01, -7.457760455964918e-01, -7.457760455964919e-01, -8.640868802950104e-01, -5.111229853870733e-01, -5.374049184767016e-01, -5.834624738470118e-01, -5.572430199434073e-01, -5.572430199434072e-01, -6.828825779705749e-01, -3.427287275675224e-01, -3.568301966470303e-01, -5.534938755662560e-01, -3.661799340114255e-01, -3.661799340114254e-01, -2.446602045039170e-01, -7.176512292638521e-02, -1.323228346138022e-01, -3.548050285377265e-01, -1.618560963463373e-01, -1.618560963463373e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_xc_th_fc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.725991640495752e+01, 4.726062529228594e+01, 4.726394977067918e+01, 4.725233815595027e+01, 4.726028889430168e+01, 4.726028889430168e+01, -5.229197798093978e+00, -5.229255522806759e+00, -5.231054422742785e+00, -5.229057359768099e+00, -5.229249692956360e+00, -5.229249692956360e+00, -9.909887367781377e-01, -9.888565603378442e-01, -9.293075715262143e-01, -9.372690594660864e-01, -9.902177368869590e-01, -9.902177368869590e-01, -3.861208197976126e-01, -3.905556681080832e-01, -1.196337982106624e+00, -3.075709498027112e-01, -3.874751218704092e-01, -3.874751218704092e-01, -1.418242568004525e-01, -1.414588798940275e-01, -1.820801843641428e-01, -1.783607794862722e-01, -1.406139184245160e-01, -1.406139184245160e-01, -7.530634554197375e+00, -7.530247490311432e+00, -7.530601708528164e+00, -7.530300729143887e+00, -7.530428501687494e+00, -7.530428501687494e+00, -2.521242401312831e+00, -2.554207502449239e+00, -2.493052717790356e+00, -2.519004311319144e+00, -2.579468221971978e+00, -2.579468221971978e+00, -9.366855820182305e-01, -1.047570703493468e+00, -8.940839141665956e-01, -9.585128191105436e-01, -9.730957388406536e-01, -9.730957388406536e-01, -2.541572885310110e-01, -3.673814981720366e-01, -2.546204218755022e-01, -3.053983313256883e+00, -2.795073279806792e-01, -2.795073279806792e-01, -1.770552474656916e-01, -1.698610091738957e-01, -1.343921664090083e-01, -2.062973222729636e-01, -1.552085779359479e-01, -1.552085779359479e-01, -1.015422102474781e+00, -9.993204647683384e-01, -1.004721336619049e+00, -1.009121780462698e+00, -1.006890585952937e+00, -1.006890585952937e+00, -9.895213324401744e-01, -8.075915967023738e-01, -8.578565572020320e-01, -9.057554392228752e-01, -8.814152246454848e-01, -8.814152246454848e-01, -1.090342548185403e+00, -4.286530404115400e-01, -4.923269336602721e-01, -6.131666598074745e-01, -5.491876705690324e-01, -5.491876705690323e-01, -7.428147161290117e-01, -1.778313419247360e-01, -1.965159443223964e-01, -6.002265398847643e-01, -2.338616664165237e-01, -2.338616664165237e-01, -1.476757753561936e-01, -2.275883676997836e-01, -1.852731229150723e-01, -2.304539653732247e-01, -1.446471568239803e-01, -1.446471568239804e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_xc_th_fc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_xc_th_fc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.710927658623608e-07, -2.710933640780785e-07, -2.710939763095550e-07, -2.710842229006743e-07, -2.710930985298083e-07, -2.710930985298083e-07, 3.257613375314163e-06, 3.258494286075342e-06, 3.282457167055650e-06, 3.239728420405930e-06, 3.258035940294443e-06, 3.258035940294443e-06, -4.218365154294799e-03, -4.254403399534467e-03, -5.221690240012217e-03, -5.031216865034924e-03, -4.231430237366851e-03, -4.231430237366851e-03, -1.029835947867688e+00, -9.947237352093129e-01, -1.510916011437551e-03, -2.831837066043862e+00, -1.019389856703095e+00, -1.019389856703095e+00, -6.267647799137296e+03, -5.610548393544792e+03, -9.349738091259665e+01, -1.416517612994255e+04, -5.849250158363078e+03, -5.849250158363078e+03, 1.143915178358015e-06, 1.143708849924541e-06, 1.143888174046553e-06, 1.143727844069915e-06, 1.143818483319585e-06, 1.143818483319585e-06, -4.779609005480209e-05, -4.521169333991919e-05, -4.992019864664732e-05, -4.784824666560243e-05, -4.333316067379220e-05, -4.333316067379220e-05, -6.373927587139800e-03, 3.964008073482040e-04, -8.664304033294296e-03, -3.966349064534067e-03, -4.826741878268398e-03, -4.826741878268398e-03, -7.349100784671190e+00, -8.384403636540038e-01, -7.898545159159830e+00, 1.842927732709412e-04, -4.848290803342332e+00, -4.848290803342332e+00, -1.498182192503704e+04, -1.588264219696661e+04, -5.977120532073748e+04, -3.496223565229843e+01, -2.569428788358230e+04, -2.569428788358224e+04, 7.240527694013985e-03, -2.867052161077918e-04, 1.241374769957094e-03, 3.004756118435919e-03, 2.033774297503710e-03, 2.033774297503696e-03, 1.027344299231361e-02, -1.479509616026358e-02, -1.127139433128262e-02, -7.852562199633791e-03, -9.642961171150117e-03, -9.642961171150103e-03, 7.290118033061563e-04, -3.641272072486234e-01, -1.959258973759999e-01, -7.782472692314668e-02, -1.252240415757638e-01, -1.252240415757639e-01, -2.408037204028768e-02, -1.118889848068423e+02, -4.613758802402505e+01, -1.076648802485126e-01, -1.567327509884097e+01, -1.567327509884097e+01, -3.780960396666229e+03, 2.651455512944051e+06, 7.015527987029492e+04, -1.900387324965424e+01, -4.330641524638115e+04, -4.330641524638109e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
