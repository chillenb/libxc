
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_mggac_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.412523874444797e-02, -7.412610225317599e-02, -7.412856147554035e-02, -7.411574354446093e-02, -7.412265567748824e-02, -7.412265567748824e-02, -6.143836620149326e-02, -6.144331279491855e-02, -6.155791423745047e-02, -6.135959066201509e-02, -6.144438147390688e-02, -6.144438147390688e-02, -4.185366097745712e-02, -4.164213133499248e-02, -3.629030388059340e-02, -3.657902395112532e-02, -3.656038866108371e-02, -3.656038866108371e-02, -1.422602122981752e-02, -1.508055547867584e-02, -4.482873167705297e-02, -6.119075408310116e-03, -6.213164964797575e-03, -6.213164964797579e-03, -2.656367582495878e-08, -3.543628974023855e-08, -3.887615401309413e-05, -1.909329524346637e-09, -4.928958199489769e-09, -4.928958199489769e-09, -7.864859242413905e-02, -7.883694865846270e-02, -7.865636391648625e-02, -7.882264608173183e-02, -7.874444704492030e-02, -7.874444704492030e-02, -3.836612716167577e-02, -3.892419471007129e-02, -3.712424195197141e-02, -3.761141937081253e-02, -3.928786929443941e-02, -3.928786929443941e-02, -4.983167136459979e-02, -6.097407975859243e-02, -4.734189411049275e-02, -5.709378695606375e-02, -5.113770028490175e-02, -5.113770028490171e-02, -1.546432286452366e-03, -8.926378768191613e-03, -1.226614436155436e-03, -8.209691275673223e-02, -3.590058788583251e-03, -3.590058788583251e-03, -7.451076086423952e-10, -2.021567599951035e-09, -3.591544743683159e-09, -3.448910365638803e-04, -3.522965498752723e-09, -3.522965502655850e-09, -6.232443166040829e-02, -5.953680830727108e-02, -6.049360551497045e-02, -6.130451469348884e-02, -6.089687914356078e-02, -6.089687914356078e-02, -6.252770365109313e-02, -3.991768699648368e-02, -4.588199703682490e-02, -5.230135135773586e-02, -4.903527563367360e-02, -4.903527563367360e-02, -6.144559533209076e-02, -1.381015064777181e-02, -2.028508159322771e-02, -3.484308785236631e-02, -2.733879248131255e-02, -2.733879248131256e-02, -3.883561010999029e-02, -2.953034200960276e-05, -1.102928726484445e-04, -3.834464727670712e-02, -1.048807781320417e-03, -1.048807781320424e-03, -1.035346871274684e-07, -1.891350108213646e-11, -3.146149612533178e-10, -8.191104271139428e-04, -3.170006000969075e-09, -3.170005997065947e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_mggac_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.517900532708272e-01, -1.517902544652263e-01, -1.517908097372785e-01, -1.517911490070741e-01, -1.517935384937868e-01, -1.517931633943360e-01, -1.517805013688174e-01, -1.517816913667469e-01, -1.517867063002452e-01, -1.517886975821162e-01, -1.517867063002452e-01, -1.517886975821162e-01, -1.272000842428287e-01, -1.272020321621992e-01, -1.272031623970938e-01, -1.272053868531655e-01, -1.272804276691385e-01, -1.272774841869397e-01, -1.271530286515805e-01, -1.271510269932060e-01, -1.272320013610400e-01, -1.271785889923430e-01, -1.272320013610400e-01, -1.271785889923430e-01, -8.840428988604312e-02, -8.798662044685773e-02, -8.837802636615456e-02, -8.786666425106333e-02, -8.520524342345698e-02, -8.587158083560187e-02, -8.594617613650085e-02, -8.573643034525943e-02, -8.272696423019303e-02, -8.907017364068530e-02, -8.272696423019303e-02, -8.907017364068530e-02, -4.755681576275349e-02, -4.574486851869652e-02, -4.912999579843869e-02, -4.698125077616664e-02, -9.427874577074537e-02, -9.059977277537661e-02, -2.683374530407720e-02, -2.649900790391174e-02, -2.306111576830976e-02, -4.126083145533228e-02, -2.306111576830979e-02, -4.126083145533228e-02, -1.769133170867284e-07, -1.702390014943377e-07, -2.366121073981330e-07, -2.264704094991184e-07, -2.490057757838271e-04, -2.386735701024558e-04, -1.245185961195431e-08, -1.257829363449404e-08, -3.042036258402723e-08, -4.174911038108903e-08, -3.042036258619563e-08, -4.174911038065535e-08, -1.427105213121541e-01, -1.427517442813080e-01, -1.428009770695899e-01, -1.428433655757828e-01, -1.427139329926377e-01, -1.427559263353272e-01, -1.427945954530593e-01, -1.428360244052971e-01, -1.427565314453729e-01, -1.427985493378245e-01, -1.427565314453729e-01, -1.427985493378245e-01, -1.014928038160736e-01, -1.014979134701049e-01, -1.021601736290183e-01, -1.021879907491009e-01, -1.001191054756480e-01, -9.994862727835228e-02, -1.007400621956250e-01, -1.005607460412853e-01, -1.023380710113575e-01, -1.027897880365518e-01, -1.023380710113575e-01, -1.027897880365518e-01, -8.347976782322107e-02, -8.378480237554241e-02, -7.939204598294133e-02, -7.933393581704618e-02, -8.391957685627950e-02, -7.991310039706302e-02, -7.924852991879981e-02, -7.526080055299043e-02, -8.067019418540189e-02, -8.664335733435007e-02, -8.067019418540188e-02, -8.664335733435004e-02, -8.386840833072288e-03, -8.319174345856443e-03, -3.580776779445739e-02, -3.564077369540596e-02, -6.919599714904303e-03, -6.619549762762874e-03, -1.144985456583905e-01, -1.145749918928503e-01, -1.782967197608000e-02, -1.694322784086103e-02, -1.782967197608000e-02, -1.694322784086103e-02, -4.950602757702008e-09, -4.839738215112366e-09, -1.331196013476540e-08, -1.319250497676055e-08, -2.400842286682764e-08, -2.321381560814666e-08, -2.050456554608033e-03, -2.040201768315029e-03, -2.627540533691212e-08, -2.185777580736596e-08, -2.627540534366128e-08, -2.185777580977831e-08, -7.411474559875525e-02, -7.362366066627056e-02, -7.694149433669840e-02, -7.645455770729284e-02, -7.603051152100603e-02, -7.554049963964748e-02, -7.520836455844147e-02, -7.472020333004580e-02, -7.562706791958665e-02, -7.513801978771366e-02, -7.562706791958665e-02, -7.513801978771366e-02, -7.233025777909036e-02, -7.191200604116203e-02, -8.050340584168242e-02, -8.007109291242409e-02, -8.092107358707565e-02, -8.044077117884098e-02, -7.926511434382748e-02, -7.885635449689611e-02, -8.033787048628048e-02, -7.992064598449172e-02, -8.033787048628048e-02, -7.992064598449172e-02, -8.130878937847162e-02, -8.109799184429241e-02, -4.807128374101750e-02, -4.779845067347881e-02, -5.942481213309192e-02, -5.880125360886751e-02, -7.137385266546838e-02, -7.088239751804647e-02, -6.654025712680915e-02, -6.656719647903743e-02, -6.654025712680914e-02, -6.656719647903743e-02, -7.842372557719000e-02, -7.775381624631633e-02, -1.860822561393594e-04, -1.851026934621369e-04, -6.869453691632680e-04, -6.691125918286592e-04, -6.998941520160454e-02, -6.859436260321215e-02, -5.977279632546564e-03, -5.709853467366766e-03, -5.977279632546585e-03, -5.709853467366769e-03, -6.812309652647206e-07, -6.654573682398291e-07, -1.249721086531675e-10, -1.248152494270386e-10, -2.109841355327743e-09, -2.036536774606248e-09, -4.670446974147562e-03, -4.607564179772631e-03, -2.326788557740513e-08, -1.973161113963211e-08, -2.326788556714587e-08, -1.973161113132441e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_mggac_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.957722363530417e-10, 3.915444727060833e-10, 1.957722363530417e-10, 1.957751843190516e-10, 3.915503686381033e-10, 1.957751843190516e-10, 1.957783961037771e-10, 3.915567922075542e-10, 1.957783961037771e-10, 1.957347496561888e-10, 3.914694993123777e-10, 1.957347496561888e-10, 1.957590226695629e-10, 3.915180453391258e-10, 1.957590226695629e-10, 1.957590226695629e-10, 3.915180453391258e-10, 1.957590226695629e-10, 1.032132625576413e-06, 2.064265251152826e-06, 1.032132625576413e-06, 1.032299289065549e-06, 2.064598578131097e-06, 1.032299289065549e-06, 1.036042224866184e-06, 2.072084449732367e-06, 1.036042224866184e-06, 1.028611472255701e-06, 2.057222944511401e-06, 1.028611472255701e-06, 1.032212964494127e-06, 2.064425928988253e-06, 1.032212964494127e-06, 1.032212964494127e-06, 2.064425928988253e-06, 1.032212964494127e-06, 1.569369916239382e-03, 3.138739832478765e-03, 1.569369916239382e-03, 1.564608668981207e-03, 3.129217337962414e-03, 1.564608668981207e-03, 1.427175466835264e-03, 2.854350933670529e-03, 1.427175466835264e-03, 1.388306922150280e-03, 2.776613844300560e-03, 1.388306922150280e-03, 1.404663806893606e-03, 2.809327613787213e-03, 1.404663806893606e-03, 1.404663806893606e-03, 2.809327613787213e-03, 1.404663806893606e-03, 2.332931549768754e-01, 4.665863099537508e-01, 2.332931549768754e-01, 2.350860592559674e-01, 4.701721185119347e-01, 2.350860592559674e-01, 8.376904483197535e-04, 1.675380896639507e-03, 8.376904483197535e-04, 2.749112298985059e-01, 5.498224597970117e-01, 2.749112298985059e-01, 2.061927430288291e-01, 4.123854860576584e-01, 2.061927430288291e-01, 2.061927430288295e-01, 4.123854860576588e-01, 2.061927430288295e-01, 2.090577276384086e-02, 4.181154552772607e-02, 2.090577276384086e-02, 2.458328712822128e-02, 4.916657425648901e-02, 2.458328712822128e-02, 1.205170604900012e-01, 2.410341209800020e-01, 1.205170604900012e-01, 7.436112278185893e-03, 1.487222455467310e-02, 7.436112278185893e-03, 1.090598369077302e-02, 2.181196738145840e-02, 1.090598369077302e-02, 1.090598368915328e-02, 2.181196737862096e-02, 1.090598368915328e-02, 2.515834649650657e-07, 5.031669299301314e-07, 2.515834649650657e-07, 2.529236767088805e-07, 5.058473534177609e-07, 2.529236767088805e-07, 2.516366799414852e-07, 5.032733598829705e-07, 2.516366799414852e-07, 2.528197269913248e-07, 5.056394539826496e-07, 2.528197269913248e-07, 2.522655958462665e-07, 5.045311916925330e-07, 2.522655958462665e-07, 2.522655958462665e-07, 5.045311916925330e-07, 2.522655958462665e-07, 7.255933013327415e-06, 1.451186602665483e-05, 7.255933013327415e-06, 7.174357143576538e-06, 1.434871428715308e-05, 7.174357143576538e-06, 7.050774636913052e-06, 1.410154927382610e-05, 7.050774636913052e-06, 6.980979234943452e-06, 1.396195846988690e-05, 6.980979234943452e-06, 7.312156028359470e-06, 1.462431205671894e-05, 7.312156028359470e-06, 7.312156028359470e-06, 1.462431205671894e-05, 7.312156028359470e-06, 4.033585737864979e-03, 8.067171475729957e-03, 4.033585737864979e-03, 3.958014217728435e-03, 7.916028435456869e-03, 3.958014217728435e-03, 5.366140450432377e-03, 1.073228090086475e-02, 5.366140450432377e-03, 6.239162145402721e-03, 1.247832429080544e-02, 6.239162145402721e-03, 3.922124969081174e-03, 7.844249938162347e-03, 3.922124969081174e-03, 3.922124969081175e-03, 7.844249938162349e-03, 3.922124969081175e-03, 2.271267400962285e-01, 4.542534801924564e-01, 2.271267400962285e-01, 1.199962807400765e-01, 2.399925614801529e-01, 1.199962807400765e-01, 2.388047368629222e-01, 4.776094737258446e-01, 2.388047368629222e-01, 3.806246375079212e-05, 7.612492750158428e-05, 3.806246375079212e-05, 3.528547640940917e-01, 7.057095281881832e-01, 3.528547640940917e-01, 3.528547640940917e-01, 7.057095281881832e-01, 3.528547640940917e-01, 7.252069407916588e-03, 1.450413881824174e-02, 7.252069407916588e-03, 9.142350564399621e-03, 1.828470112807981e-02, 9.142350564399621e-03, 9.104089070671696e-02, 1.820817814214108e-01, 9.104089070671696e-02, 2.669569603028602e-01, 5.339139206057198e-01, 2.669569603028602e-01, 3.484549351469230e-02, 6.969098703107487e-02, 3.484549351469230e-02, 3.484549351753400e-02, 6.969098703646821e-02, 3.484549351753400e-02, 6.003364261308539e-03, 1.200672852261708e-02, 6.003364261308539e-03, 5.634294661018782e-03, 1.126858932203757e-02, 5.634294661018782e-03, 5.757660432209498e-03, 1.151532086441899e-02, 5.757660432209498e-03, 5.865090641841792e-03, 1.173018128368358e-02, 5.865090641841792e-03, 5.810803795481306e-03, 1.162160759096261e-02, 5.810803795481306e-03, 5.810803795481306e-03, 1.162160759096261e-02, 5.810803795481306e-03, 6.888368405822302e-03, 1.377673681164460e-02, 6.888368405822302e-03, 6.473690266455913e-03, 1.294738053291183e-02, 6.473690266455913e-03, 6.510898692986101e-03, 1.302179738597220e-02, 6.510898692986101e-03, 6.625635496054730e-03, 1.325127099210946e-02, 6.625635496054730e-03, 6.573653890398679e-03, 1.314730778079736e-02, 6.573653890398679e-03, 6.573653890398679e-03, 1.314730778079736e-02, 6.573653890398679e-03, 3.206079573455482e-03, 6.412159146910967e-03, 3.206079573455482e-03, 7.062162971851413e-02, 1.412432594370283e-01, 7.062162971851413e-02, 4.963360615361991e-02, 9.926721230723982e-02, 4.963360615361991e-02, 2.805371706895989e-02, 5.610743413791978e-02, 2.805371706895989e-02, 3.865696795421922e-02, 7.731393590843844e-02, 3.865696795421922e-02, 3.865696795421923e-02, 7.731393590843846e-02, 3.865696795421923e-02, 9.233034463100295e-03, 1.846606892620059e-02, 9.233034463100295e-03, 9.966971731162923e-02, 1.993394346232573e-01, 9.966971731162923e-02, 1.470510543690512e-01, 2.941021087380981e-01, 1.470510543690512e-01, 3.859634429117034e-02, 7.719268858234070e-02, 3.859634429117034e-02, 4.132839416361035e-01, 8.265678832722080e-01, 4.132839416361035e-01, 4.132839416361037e-01, 8.265678832722072e-01, 4.132839416361037e-01, 2.602351381206436e-02, 5.204702762387600e-02, 2.602351381206436e-02, 9.920865495519422e-03, 1.984173102081704e-02, 9.920865495519422e-03, 1.241352330826535e-02, 2.482704661764365e-02, 1.241352330826535e-02, 3.922160972625766e-01, 7.844321945251531e-01, 3.922160972625766e-01, 4.447812645439951e-02, 8.895625291338681e-02, 4.447812645439951e-02, 4.447812644495976e-02, 8.895625289060909e-02, 4.447812644495976e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
