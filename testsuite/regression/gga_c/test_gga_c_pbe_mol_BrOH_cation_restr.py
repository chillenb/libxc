
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_mol_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.451259711822525e-02, -4.451342490313077e-02, -4.451577727538791e-02, -4.450348997088110e-02, -4.451011659618027e-02, -4.451011659618027e-02, -3.566072634194148e-02, -3.566577465524862e-02, -3.578273344913182e-02, -3.557977557538571e-02, -3.566678882432599e-02, -3.566678882432599e-02, -2.311380062583790e-02, -2.288624787616552e-02, -1.756081293947817e-02, -1.779559317346604e-02, -1.793228139326727e-02, -1.793228139326727e-02, -4.484947253943372e-03, -4.941069326222302e-03, -2.549088250457977e-02, -1.321236423499335e-03, -2.384801515243739e-03, -2.384801515243739e-03, -3.426637488466723e-09, -4.579789825680175e-09, -5.203859643903214e-06, -2.447136210691012e-10, -9.003085347475066e-10, -9.003085347475066e-10, -5.260521998022322e-02, -5.281871851024336e-02, -5.261401409932741e-02, -5.280248631619014e-02, -5.271382929986482e-02, -5.271382929986482e-02, -1.636587602050592e-02, -1.677474072022834e-02, -1.545810399456056e-02, -1.580476531791770e-02, -1.705313215135559e-02, -1.705313215135559e-02, -3.497180423627096e-02, -5.388845962656747e-02, -3.230484379219824e-02, -4.898187785293814e-02, -3.698878998871365e-02, -3.698878998871365e-02, -2.505581049852690e-04, -2.154214134012698e-03, -1.945182195276483e-04, -6.797683796390329e-02, -6.797968391379964e-04, -6.797968391379964e-04, -9.564646216313763e-11, -2.590829605615120e-10, -4.624648598304674e-10, -4.934210748599961e-05, -5.158184735339133e-10, -5.158184735339133e-10, -5.964751753368530e-02, -5.314497707141116e-02, -5.528535298507050e-02, -5.717189113573944e-02, -5.621491927095388e-02, -5.621491927095388e-02, -6.123279320887252e-02, -2.313374876212152e-02, -3.071067998141290e-02, -4.056150660123899e-02, -3.531676000291468e-02, -3.531676000291468e-02, -5.357555224960846e-02, -4.024186848668558e-03, -7.436275625795728e-03, -1.979461745241607e-02, -1.258909194519749e-02, -1.258909194519749e-02, -2.249514668594980e-02, -3.912620990251185e-06, -1.506919367412149e-05, -2.492174902901602e-02, -1.646139377447881e-04, -1.646139377447881e-04, -1.332390354987864e-08, -2.421929003756624e-12, -4.051192249163198e-11, -1.248442260373179e-04, -4.527941556758790e-10, -4.527941643163336e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_mol_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.188846869360734e-01, -1.188858100945899e-01, -1.188890088106167e-01, -1.188723359681248e-01, -1.188813271831011e-01, -1.188813271831011e-01, -1.017085926102446e-01, -1.017157186236045e-01, -1.018806260241362e-01, -1.015949609918578e-01, -1.017172603149554e-01, -1.017172603149554e-01, -7.258994617936092e-02, -7.222676246785055e-02, -6.233631037123100e-02, -6.286971459748829e-02, -6.314365147253159e-02, -6.314365147253159e-02, -2.141871548339685e-02, -2.316994543292935e-02, -7.740510345580452e-02, -7.309278128616823e-03, -1.246378405479665e-02, -1.246378405479664e-02, -2.236823774216332e-08, -2.988215319739409e-08, -3.312525833015613e-05, -1.604202964426221e-09, -5.892035371410479e-09, -5.892035373201694e-09, -1.238153461009920e-01, -1.240267711001088e-01, -1.238240850868612e-01, -1.240107421419684e-01, -1.239230202138642e-01, -1.239230202138642e-01, -6.309251759972814e-02, -6.415971404710265e-02, -6.068238028486628e-02, -6.162105731990444e-02, -6.486561702024012e-02, -6.486561702024012e-02, -8.289463226477878e-02, -8.476027293959192e-02, -7.997190155096333e-02, -8.261350458249365e-02, -8.413548599980587e-02, -8.413548599980587e-02, -1.506672380148286e-03, -1.144685138771371e-02, -1.178234132509991e-03, -1.180107836378572e-01, -3.923559369852754e-03, -3.923559369852754e-03, -6.280717341846878e-10, -1.698647323536703e-09, -3.037064507272427e-09, -3.072932188909743e-04, -3.383506574774920e-09, -3.383506574878745e-09, -7.686804725795790e-02, -8.191621693388378e-02, -8.055080622400022e-02, -7.910892147895141e-02, -7.986856273289558e-02, -7.986856273289558e-02, -7.371460053043008e-02, -6.980365173148084e-02, -7.804125309580344e-02, -8.265420165000839e-02, -8.096036954647515e-02, -8.096036954647515e-02, -8.669569809401163e-02, -1.981465677721297e-02, -3.259965173932051e-02, -6.168878427546178e-02, -4.738266863265049e-02, -4.738266863265048e-02, -6.810283302640571e-02, -2.494555646131973e-05, -9.511907823868171e-05, -6.685148805538138e-02, -1.001527669009302e-03, -1.001527669009319e-03, -8.670656683581570e-08, -1.599364357258474e-11, -2.665602623820814e-10, -7.645995731664893e-04, -2.971589530899195e-09, -2.971589541145425e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_mol_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.882826572096736e-10, 1.882863555194160e-10, 1.882918613191806e-10, 1.882370739231260e-10, 1.882673323383487e-10, 1.882673323383487e-10, 1.054898616296457e-06, 1.055133877935743e-06, 1.060464294804042e-06, 1.050238246931124e-06, 1.055055459054075e-06, 1.055055459054075e-06, 1.749452490032881e-03, 1.733284902651178e-03, 1.338802923237448e-03, 1.310922016998060e-03, 1.337140674717477e-03, 1.337140674717477e-03, 1.249499252361950e-01, 1.335979639384317e-01, 9.552917923772147e-04, 8.097278838078729e-02, 1.090504283038219e-01, 1.090504283038217e-01, 2.699164116872399e-03, 3.180322625625923e-03, 1.646250413763329e-02, 9.533477677775709e-04, 1.992933710647128e-03, 1.992933711355198e-03, 2.861669089589140e-07, 2.881741924522958e-07, 2.862471503684604e-07, 2.880189766294997e-07, 2.871877824504108e-07, 2.871877824504108e-07, 5.429690630550879e-06, 5.435153066998493e-06, 5.121231933724275e-06, 5.127356500616268e-06, 5.588538824376820e-06, 5.588538824376820e-06, 6.289313731102468e-03, 8.720990778088165e-03, 8.110777018154275e-03, 1.318490366761873e-02, 6.356186015146614e-03, 6.356186015146614e-03, 4.208578302505376e-02, 4.213566611622228e-02, 4.262163177745449e-02, 6.681653183197985e-05, 8.380232103344411e-02, 8.380232103344411e-02, 9.311105612049129e-04, 1.172037771298630e-03, 1.172825313620051e-02, 4.057543218685560e-02, 5.104097884558589e-03, 5.104097885981304e-03, 1.537473485694986e-02, 1.270786266357690e-02, 1.353625254794473e-02, 1.430590882150358e-02, 1.391082018653945e-02, 1.391082018653945e-02, 1.846017332701339e-02, 7.926743488641606e-03, 9.647745894315702e-03, 1.203633162111059e-02, 1.075911868275002e-02, 1.075911868275002e-02, 6.874094749034255e-03, 3.326381636449530e-02, 3.304954656144091e-02, 3.453322165379145e-02, 3.575396177417119e-02, 3.575396177417121e-02, 1.138799130087669e-02, 1.344149932620444e-02, 2.077241534505952e-02, 5.743866578339801e-02, 7.255762584158011e-02, 7.255762584158240e-02, 3.354096168330624e-03, 1.270462917220183e-03, 1.598696399475983e-03, 6.590417125653980e-02, 6.355756098036711e-03, 6.355756099248917e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
