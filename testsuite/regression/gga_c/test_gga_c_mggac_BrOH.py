
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_mggac_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.412350179782143e-02, -7.412425346037083e-02, -7.412652530972653e-02, -7.411423901244144e-02, -7.412390723833240e-02, -7.412390723833240e-02, -6.143351493546204e-02, -6.143749869488897e-02, -6.154724575986861e-02, -6.135907939199021e-02, -6.143558009312353e-02, -6.143558009312353e-02, -4.049662102031420e-02, -4.029318029649191e-02, -3.473905174395035e-02, -3.506411068521575e-02, -4.042333465206802e-02, -4.042333465206802e-02, -1.812190280210781e-02, -1.898058318557477e-02, -4.744788876789235e-02, -7.164038727552124e-03, -1.838929262700325e-02, -1.838929262700325e-02, -6.104223230490504e-07, -7.542031474882191e-07, -1.461854143028972e-04, -1.510504298825201e-08, -7.474133894054317e-07, -7.474133894054317e-07, -7.862869771448575e-02, -7.881118769791483e-02, -7.864690970542162e-02, -7.878880632326973e-02, -7.872278042803627e-02, -7.872278042803627e-02, -3.815511853820107e-02, -3.869904023497980e-02, -3.740548043805426e-02, -3.782905630985885e-02, -3.951233477362436e-02, -3.951233477362436e-02, -4.984789704298159e-02, -6.105601205923948e-02, -4.845331708581611e-02, -5.715638978151042e-02, -5.181511504874859e-02, -5.181511504874859e-02, -2.348830230524052e-03, -1.125705260744015e-02, -2.550002075219094e-03, -8.211052160827434e-02, -4.560698681282191e-03, -4.560698681282191e-03, -1.356948982674016e-08, -2.518958833598955e-08, -1.897794877036405e-08, -5.838463271390809e-04, -2.421762936767015e-08, -2.421762936767015e-08, -6.300592862656192e-02, -6.041740918530493e-02, -6.132451552741031e-02, -6.204163888222808e-02, -6.168135662160522e-02, -6.168135662160522e-02, -6.268591480230286e-02, -4.153701566025182e-02, -4.721991778090129e-02, -5.289706196337258e-02, -5.001904144856827e-02, -5.001904144856827e-02, -6.159535995420638e-02, -1.659647555812419e-02, -2.313663985262723e-02, -3.574544478554929e-02, -2.937913231183091e-02, -2.937913231183090e-02, -3.960493482990955e-02, -8.906255449648915e-05, -3.216572572808157e-04, -3.892911932140184e-02, -1.693078065087023e-03, -1.693078065087030e-03, -9.357815973408709e-07, -9.918671903791037e-11, -1.780288201587789e-09, -1.708224493684442e-03, -1.664446895690613e-08, -1.664446895433721e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_mggac_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.517884155878568e-01, -1.517891341755664e-01, -1.517913265046785e-01, -1.517795800748700e-01, -1.517888030175075e-01, -1.517888030175075e-01, -1.271973187022665e-01, -1.271999142599504e-01, -1.272718188625147e-01, -1.271511589314249e-01, -1.271987206916704e-01, -1.271987206916704e-01, -8.770521651237353e-02, -8.762182346156516e-02, -8.452831034456179e-02, -8.486386786040209e-02, -8.767531569512083e-02, -8.767531569512083e-02, -5.199331010882658e-02, -5.293982713917791e-02, -9.332290921853691e-02, -2.983393441518718e-02, -5.229514278189459e-02, -5.229514278189459e-02, -3.951487509945098e-06, -4.878186305468459e-06, -8.917189007216420e-04, -9.870872187220716e-08, -4.834740282290172e-06, -4.834740282290172e-06, -1.427145039102272e-01, -1.428027505184286e-01, -1.427233581605878e-01, -1.427919810409857e-01, -1.427600625372969e-01, -1.427600625372969e-01, -1.012496110896805e-01, -1.019151980988156e-01, -1.003714049253260e-01, -1.009027158078510e-01, -1.028110953807715e-01, -1.028110953807715e-01, -8.323831648346194e-02, -7.873570198246317e-02, -8.197065262000276e-02, -7.801920533803459e-02, -8.370890313014064e-02, -8.370890313014064e-02, -1.209455655207187e-02, -4.160471444146412e-02, -1.296774487795635e-02, -1.144776532664116e-01, -2.106648512053691e-02, -2.106648512053691e-02, -8.870058777865782e-08, -1.644535114329691e-07, -1.241631159019851e-07, -3.373197497521595e-03, -1.582145581504939e-07, -1.582145581412486e-07, -7.387503029897731e-02, -7.657148500932685e-02, -7.567779295758177e-02, -7.493223372453740e-02, -7.531108816217082e-02, -7.531108816217082e-02, -7.249257272085427e-02, -8.079836856834842e-02, -8.082179299713610e-02, -7.920455470629187e-02, -8.021279521348515e-02, -8.021279521348515e-02, -8.052797087895171e-02, -5.298623820978243e-02, -6.232612959041457e-02, -7.129311242216230e-02, -6.780743692216915e-02, -6.780743692216913e-02, -7.806288760763136e-02, -5.497426420081537e-04, -1.912407238962114e-03, -6.868418587347627e-02, -9.004712621340923e-03, -9.004712621340952e-03, -6.044398419511077e-06, -6.534812108529316e-10, -1.168390948023874e-08, -9.057379242718716e-03, -1.088805944462692e-07, -1.088805944447212e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_mggac_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.957858627110319e-10, 1.957884293448299e-10, 1.957910384914418e-10, 1.957491942882622e-10, 1.957872901607227e-10, 1.957872901607227e-10, 1.032193342815689e-06, 1.032325740901486e-06, 1.035769107090568e-06, 1.028799522412754e-06, 1.032240337122989e-06, 1.032240337122989e-06, 1.532093954589678e-03, 1.527098642820254e-03, 1.373201434086589e-03, 1.341316824856866e-03, 1.530330670066110e-03, 1.530330670066110e-03, 2.529366686861587e-01, 2.526787076258762e-01, 8.334386452275131e-04, 3.353177900496093e-01, 2.531012273979887e-01, 2.531012273979887e-01, 1.445651857037844e-01, 1.556405128286990e-01, 2.924637476287483e-01, 2.726167303800575e-02, 1.622233489194401e-01, 1.622233489194401e-01, 2.519608642885129e-07, 2.532612575981366e-07, 2.520890949511340e-07, 2.531001768848253e-07, 2.526321225332206e-07, 2.526321225332206e-07, 7.228972534886541e-06, 7.151193998846493e-06, 7.092731886582636e-06, 7.034000740587952e-06, 7.355397066276941e-06, 7.355397066276941e-06, 4.254494230827326e-03, 4.184523156716540e-03, 5.209146158870484e-03, 5.740966834365198e-03, 3.803221862086600e-03, 3.803221862086600e-03, 3.083454136303509e-01, 1.259010218676374e-01, 3.711319571463016e-01, 3.829752098216491e-05, 3.934795539647746e-01, 3.934795539647746e-01, 2.809703846287016e-02, 3.497972049540621e-02, 1.058900475156112e-01, 4.272553792455877e-01, 5.403085863970874e-02, 5.403085863765247e-02, 5.698333729017916e-03, 5.373686192444926e-03, 5.484696772739872e-03, 5.574629527112342e-03, 5.529235200803723e-03, 5.529235200803723e-03, 6.588371869232874e-03, 6.238100895961434e-03, 6.256203859949236e-03, 6.338534683233502e-03, 6.302057384592694e-03, 6.302057384592695e-03, 3.395333214467977e-03, 7.070767396384596e-02, 4.882423774552089e-02, 2.792799576334008e-02, 3.784536090437483e-02, 3.784536090437485e-02, 9.503449609702782e-03, 2.060897407146999e-01, 3.005119497500976e-01, 4.165307383566449e-02, 5.424380757222652e-01, 5.424380757222660e-01, 1.193435254872287e-01, 8.802386716377278e-03, 2.138589002375166e-02, 6.965194416908504e-01, 7.310699353653317e-02, 7.310699353568907e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
