
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zpbesol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbesol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.169595066410576e-02, -6.169681460083697e-02, -6.169927203972725e-02, -6.168644881847885e-02, -6.169336545459034e-02, -6.169336545459034e-02, -5.082214364314042e-02, -5.082731614923408e-02, -5.094713348075456e-02, -5.073944816032008e-02, -5.082847021508018e-02, -5.082847021508018e-02, -3.435097007577047e-02, -3.411977575356760e-02, -2.841657829872803e-02, -2.869296201296220e-02, -2.914665576248387e-02, -2.914665576248387e-02, -9.551886615327101e-03, -1.029783835417888e-02, -3.719112455040979e-02, -3.450137970517953e-03, -1.979160471132762e-02, -1.979160471132765e-02, -2.942906102085370e-03, -3.237096091059421e-03, -1.719168712118945e-03, -5.825014246660298e-04, -2.448489658576850e-03, -2.448489658576850e-03, -6.824056183022942e-02, -6.844408539306393e-02, -6.824895309972870e-02, -6.842862127878924e-02, -6.834412027946338e-02, -6.834412027946338e-02, -2.850927586202523e-02, -2.903287435649329e-02, -2.734375074996465e-02, -2.779653631130638e-02, -2.940059767692448e-02, -2.940059767692448e-02, -4.445939399053622e-02, -5.868760632765385e-02, -4.185120915924456e-02, -5.442468839210468e-02, -4.607043653931663e-02, -4.607043653931658e-02, -7.705716004537469e-04, -5.274722797165690e-03, -1.312528508453738e-03, -7.717717763966475e-02, -2.384755594179840e-03, -2.384755594179840e-03, -1.558476562049153e-03, -4.333838339388996e-04, -1.237049566531158e-03, -1.684164829830331e-04, -2.023384882378594e-03, -2.023384882378594e-03, -6.150403147255463e-02, -5.749043187016636e-02, -5.884966418235388e-02, -6.001649946832462e-02, -5.942822366211239e-02, -5.942822366211239e-02, -6.213703107417572e-02, -3.338558690332161e-02, -4.031017789271198e-02, -4.826100184995093e-02, -4.415231623727005e-02, -4.415231623727005e-02, -5.888225437713268e-02, -8.885314856368003e-03, -1.436472731616616e-02, -2.900004215483713e-02, -2.111761198403775e-02, -2.111761198403775e-02, -3.249140324876574e-02, -4.448785753670588e-05, -5.905798125400603e-04, -3.342539766696492e-02, -1.138835759296023e-03, -1.138835759296224e-03, -1.538141505611772e-03, -7.300401820099669e-06, -1.357284951990384e-03, -4.460067840581818e-04, -1.910123256187998e-03, -1.910123256188001e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zpbesol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbesol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.393674063893667e-01, -1.393348786037772e-01, -1.393794929346144e-01, -1.393246452518765e-01, -1.393244034230965e-01, -1.393850339371563e-01, -1.394372174965222e-01, -1.392447001665438e-01, -1.395093694781904e-01, -1.391873727511583e-01, -1.395093694781904e-01, -1.391873727511583e-01, -1.189948978541633e-01, -1.189750107591283e-01, -1.190010203796546e-01, -1.189783211160063e-01, -1.190840996168199e-01, -1.191137991420461e-01, -1.189006761126150e-01, -1.189212802153437e-01, -1.187179071700731e-01, -1.192629223968972e-01, -1.187179071700731e-01, -1.192629223968972e-01, -8.470786626973398e-02, -8.496828592027866e-02, -8.448784685104579e-02, -8.482774362771595e-02, -7.991451750739516e-02, -7.852309246048123e-02, -7.942995949542468e-02, -7.985801649286156e-02, -8.352556602337820e-02, -7.106601059873130e-02, -8.352556602337820e-02, -7.106601059873130e-02, -3.439453908167377e-02, -3.897992292279465e-02, -3.621606579987467e-02, -4.071586414253461e-02, -8.757770193782106e-02, -9.004152965609748e-02, -1.456296028139508e-02, -1.903408649175549e-02, -2.050136930009102e-03, 3.915583507311717e-02, -2.050136930009114e-03, 3.915583507311699e-02, 3.080608447321262e-02, -2.452222114032542e-02, 2.596918317410655e-02, -2.096633217407144e-02, 4.590964254024228e-02, -3.267933526170914e-02, -3.796645372866956e-02, 4.200145445994109e-02, -2.735674303888031e-03, -5.360986007450113e-03, -2.735674303888031e-03, -5.360986007450113e-03, -1.368506826502395e-01, -1.366484689061957e-01, -1.369908318038987e-01, -1.367871343544111e-01, -1.368582620622423e-01, -1.366524427512688e-01, -1.369781409713784e-01, -1.367787417590424e-01, -1.369225792345184e-01, -1.367186102983874e-01, -1.369225792345184e-01, -1.367186102983874e-01, -8.822495657630060e-02, -8.808650668613505e-02, -8.939422475463753e-02, -8.867075222468668e-02, -8.358749759834236e-02, -8.876569344605151e-02, -8.433780632614918e-02, -8.959307286863015e-02, -9.513214228743866e-02, -8.382691532540679e-02, -9.513214228743866e-02, -8.382691532540679e-02, -8.482888366047042e-02, -8.504084602705846e-02, -8.148371528386017e-02, -8.142728942489141e-02, -8.412041034614522e-02, -8.152535272100082e-02, -8.139114438921623e-02, -7.757158744218438e-02, -8.287088348251796e-02, -8.735447135407466e-02, -8.287088348251799e-02, -8.735447135407465e-02, -9.106273938440178e-04, -7.442675894217200e-03, -2.347920792389113e-02, -2.521235016419533e-02, 1.803780691055186e-02, -1.851608999790638e-02, -1.167211108960488e-01, -1.167865105383578e-01, 3.769946594122776e-03, -1.913923852308476e-02, 3.769946594122776e-03, -1.913923852308476e-02, 2.045594538390173e-02, -1.834320765561301e-02, 3.620443115552778e-02, -3.303599843264680e-02, 1.748734070027095e-02, -1.340919495859334e-02, 1.838950708509434e-03, -3.628948319644360e-03, -3.448524464083225e-03, -2.295778297885341e-03, -3.448524464083225e-03, -2.295778297885340e-03, -7.508623949651989e-02, -7.459791366044927e-02, -7.889798551315870e-02, -7.842271623591793e-02, -7.772727724673004e-02, -7.724513404845866e-02, -7.662309804162012e-02, -7.614018497798097e-02, -7.719099699597468e-02, -7.670843883381070e-02, -7.719099699597468e-02, -7.670843883381070e-02, -7.282335984805717e-02, -7.240606708346248e-02, -7.881385126490482e-02, -7.875811183944557e-02, -8.165705798482097e-02, -8.135926137903203e-02, -8.145686781161500e-02, -8.109827199734074e-02, -8.197317095946070e-02, -8.165067503888832e-02, -8.197317095946070e-02, -8.165067503888832e-02, -8.351877593621353e-02, -8.331561762801200e-02, -3.572404525638413e-02, -3.723189280966781e-02, -4.958428386310924e-02, -5.097364398697016e-02, -7.009274166648299e-02, -6.992852037421390e-02, -6.179382204795080e-02, -6.178029705443525e-02, -6.179382204795078e-02, -6.178029705443523e-02, -7.682992347519881e-02, -7.669462399512113e-02, 6.244453318778234e-03, -6.136060491549532e-03, 2.361587160736325e-02, -1.965688845432660e-02, -7.067325904437974e-02, -6.970657747253997e-02, 1.538651985477858e-02, -1.564712452544495e-02, 1.538651985477890e-02, -1.564712452544444e-02, 5.286845009108778e-02, -4.275953680844424e-02, 4.271673587710205e-03, -4.210936475131787e-03, 2.592755832620601e-04, -2.958328584623767e-03, 3.173329724789308e-03, -7.151263271981299e-03, -3.151293236449420e-03, -2.184548869499203e-03, -3.151293236449422e-03, -2.184548869499204e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zpbesol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbesol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.962116182461640e-10, 3.924232364923280e-10, 1.962116182461640e-10, 1.962148402654416e-10, 3.924296805308832e-10, 1.962148402654416e-10, 1.962188007587046e-10, 3.924376015174092e-10, 1.962188007587046e-10, 1.961710760397132e-10, 3.923421520794264e-10, 1.961710760397132e-10, 1.961975376583172e-10, 3.923950753166344e-10, 1.961975376583172e-10, 1.961975376583172e-10, 3.923950753166344e-10, 1.961975376583172e-10, 1.080141884978366e-06, 2.160283769956732e-06, 1.080141884978366e-06, 1.080339673857785e-06, 2.160679347715569e-06, 1.080339673857785e-06, 1.084798169374603e-06, 2.169596338749206e-06, 1.084798169374603e-06, 1.076071507022374e-06, 2.152143014044748e-06, 1.076071507022374e-06, 1.080245573855411e-06, 2.160491147710823e-06, 1.080245573855411e-06, 1.080245573855411e-06, 2.160491147710823e-06, 1.080245573855411e-06, 1.751049151349156e-03, 3.502098302698313e-03, 1.751049151349156e-03, 1.741826119830844e-03, 3.483652239661688e-03, 1.741826119830844e-03, 1.498358688824806e-03, 2.996717377649612e-03, 1.498358688824806e-03, 1.461431661925572e-03, 2.922863323851144e-03, 1.461431661925572e-03, 1.412027512940316e-03, 2.824055025880630e-03, 1.412027512940316e-03, 1.412027512940316e-03, 2.824055025880630e-03, 1.412027512940316e-03, 1.987137254845462e-01, 3.974274509690924e-01, 1.987137254845462e-01, 2.047178916704684e-01, 4.094357833409367e-01, 2.047178916704684e-01, 9.317205809264308e-04, 1.863441161852861e-03, 9.317205809264308e-04, 1.801044976849094e-01, 3.602089953698190e-01, 1.801044976849094e-01, -3.352305410357156e-01, -6.704610820714312e-01, -3.352305410357156e-01, -3.352305410357158e-01, -6.704610820714316e-01, -3.352305410357158e-01, -7.431703626458947e+02, -1.486340725291789e+03, -7.431703626458947e+02, -6.301855285075845e+02, -1.260371057015169e+03, -6.301855285075845e+02, -3.790168783241856e+00, -7.580337566483712e+00, -3.790168783241856e+00, -1.471940594796903e+03, -2.943881189593806e+03, -1.471940594796903e+03, -4.008077080075926e-74, -8.016154160151853e-74, -4.008077080075926e-74, -4.008077080077193e-74, -8.016154160154385e-74, -4.008077080077193e-74, 2.723926702939384e-07, 5.447853405878769e-07, 2.723926702939384e-07, 2.740307922611853e-07, 5.480615845223706e-07, 2.740307922611853e-07, 2.724578975011769e-07, 5.449157950023540e-07, 2.724578975011769e-07, 2.739039264107193e-07, 5.478078528214385e-07, 2.739039264107193e-07, 2.732261002568175e-07, 5.464522005136350e-07, 2.732261002568175e-07, 2.732261002568175e-07, 5.464522005136350e-07, 2.732261002568175e-07, 6.898141214532086e-06, 1.379628242906418e-05, 6.898141214532086e-06, 6.848750942832823e-06, 1.369750188566564e-05, 6.848750942832823e-06, 6.633053322946602e-06, 1.326610664589321e-05, 6.633053322946602e-06, 6.592066411258733e-06, 1.318413282251747e-05, 6.592066411258733e-06, 6.990481369718142e-06, 1.398096273943629e-05, 6.990481369718142e-06, 6.990481369718142e-06, 1.398096273943629e-05, 6.990481369718142e-06, 5.083036478695223e-03, 1.016607295739045e-02, 5.083036478695223e-03, 5.627304135408975e-03, 1.125460827081795e-02, 5.627304135408975e-03, 6.677314050819041e-03, 1.335462810163808e-02, 6.677314050819041e-03, 8.744262944454647e-03, 1.748852588890929e-02, 8.744262944454647e-03, 4.988498294211025e-03, 9.976996588422049e-03, 4.988498294211025e-03, 4.988498294211032e-03, 9.976996588422065e-03, 4.988498294211032e-03, 1.149173139985111e-01, 2.298346279970218e-01, 1.149173139985111e-01, 8.604331964137747e-02, 1.720866392827549e-01, 8.604331964137747e-02, -7.202425073312679e-03, -1.440485014662494e-02, -7.202425073312679e-03, 4.971013935897108e-05, 9.942027871794217e-05, 4.971013935897108e-05, 1.525142021125551e-01, 3.050284042251097e-01, 1.525142021125551e-01, 1.525142021125551e-01, 3.050284042251097e-01, 1.525142021125551e-01, -4.087057281008352e+03, -8.174114562016704e+03, -4.087057281008352e+03, -1.323125761943755e+03, -2.646251523887511e+03, -1.323125761943755e+03, -1.260209323350398e+04, -2.520418646700796e+04, -1.260209323350398e+04, 1.166463615499184e-01, 2.332927230998368e-01, 1.166463615499184e-01, -4.239149410871346e-15, -8.478298821742692e-15, -4.239149410871346e-15, -4.239149410872985e-15, -8.478298821745969e-15, -4.239149410872985e-15, 8.963289761163040e-03, 1.792657952232608e-02, 8.963289761163040e-03, 8.074408731551791e-03, 1.614881746310358e-02, 8.074408731551791e-03, 8.364630245834150e-03, 1.672926049166830e-02, 8.364630245834150e-03, 8.622734391742893e-03, 1.724546878348579e-02, 8.622734391742893e-03, 8.491625983978854e-03, 1.698325196795771e-02, 8.491625983978854e-03, 8.491625983978854e-03, 1.698325196795771e-02, 8.491625983978854e-03, 1.042971500136827e-02, 2.085943000273655e-02, 1.042971500136827e-02, 7.514043067329765e-03, 1.502808613465953e-02, 7.514043067329765e-03, 8.073129963096681e-03, 1.614625992619336e-02, 8.073129963096681e-03, 8.820136438614023e-03, 1.764027287722805e-02, 8.820136438614023e-03, 8.438456259742424e-03, 1.687691251948485e-02, 8.438456259742424e-03, 8.438456259742424e-03, 1.687691251948485e-02, 8.438456259742424e-03, 4.515894090438690e-03, 9.031788180877378e-03, 4.515894090438690e-03, 5.770334849602577e-02, 1.154066969920515e-01, 5.770334849602577e-02, 4.663537166966873e-02, 9.327074333933746e-02, 4.663537166966873e-02, 3.284533716446129e-02, 6.569067432892259e-02, 3.284533716446129e-02, 4.103858667459762e-02, 8.207717334919523e-02, 4.103858667459762e-02, 4.103858667459764e-02, 8.207717334919529e-02, 4.103858667459764e-02, 1.076070533873627e-02, 2.152141067747254e-02, 1.076070533873627e-02, -3.883223845555109e-02, -7.766447691110248e-02, -3.883223845555109e-02, -4.974866869721959e-01, -9.949733739443921e-01, -4.974866869721959e-01, 4.823588005221170e-02, 9.647176010442338e-02, 4.823588005221170e-02, -1.885194874276011e-02, -3.770389748552073e-02, -1.885194874276011e-02, -1.885194874282427e-02, -3.770389748564913e-02, -1.885194874282427e-02, -2.408973184831163e+02, -4.817946369662325e+02, -2.408973184831163e+02, -2.857129023266580e+03, -5.714258046533151e+03, -2.857129023266580e+03, -2.280099373948295e+03, -4.560198747896589e+03, -2.280099373948295e+03, 1.668175160605507e-01, 3.336350321211005e-01, 1.668175160605507e-01, -3.206339945729252e-10, -6.412679891458504e-10, -3.206339945729252e-10, -3.206339945729262e-10, -6.412679891458522e-10, -3.206339945729262e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
