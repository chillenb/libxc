
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.855638995600988e-02, -5.855665107272010e-02, -5.855739767995367e-02, -5.855352128713048e-02, -5.855561131707077e-02, -5.855561131707077e-02, -5.154201498808466e-02, -5.154399411077434e-02, -5.158986844263312e-02, -5.151095619811916e-02, -5.154447360505767e-02, -5.154447360505767e-02, -3.409616653061627e-02, -3.397980591550160e-02, -3.106179742768190e-02, -3.127480088098773e-02, -3.072890814757842e-02, -3.072890814757842e-02, -1.142214728331443e-02, -1.180096973599768e-02, -3.662177208674919e-02, -7.429773317277501e-03, -5.503716432210945e-03, -5.503716432210947e-03, -3.328882763658312e-04, -3.495811594775331e-04, -1.797553545378416e-03, -1.947026519777767e-04, -1.722522583394620e-04, -1.722522583394620e-04, -5.831756550190240e-02, -5.837074325899365e-02, -5.831976648260332e-02, -5.836671655940624e-02, -5.834465372101522e-02, -5.834465372101522e-02, -3.863674707330723e-02, -3.896263232302734e-02, -3.795266500956473e-02, -3.824011648986756e-02, -3.914884354110654e-02, -3.914884354110654e-02, -3.713187389705573e-02, -4.313968671738275e-02, -3.526319666040007e-02, -4.048435940091536e-02, -3.786636222854848e-02, -3.786636222854847e-02, -4.636061199881510e-03, -9.709390956555963e-03, -4.267981562433728e-03, -5.654636678439887e-02, -5.798284192086232e-03, -5.798284192086232e-03, -1.504177421073897e-04, -1.904093034179410e-04, -1.454925414414962e-04, -2.890161849320257e-03, -1.557848986113748e-04, -1.557848986113749e-04, -4.330727376317658e-02, -4.193481420102792e-02, -4.240940612084857e-02, -4.280878559388751e-02, -4.260834978716532e-02, -4.260834978716532e-02, -4.324565591008969e-02, -3.074260251906380e-02, -3.415930432988420e-02, -3.777039330458334e-02, -3.594181909631682e-02, -3.594181909631682e-02, -4.365019305937891e-02, -1.278857935368403e-02, -1.655185206966257e-02, -2.539667012233642e-02, -2.067322767815957e-02, -2.067322767815957e-02, -2.953488007495021e-02, -1.728524344231483e-03, -2.313258237871691e-03, -2.690009841736651e-02, -3.746534443879048e-03, -3.746534443879050e-03, -4.674187495512850e-04, -5.135674302788443e-05, -1.069184588982463e-04, -3.510148597225652e-03, -1.475971737057948e-04, -1.475971737057946e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.208802803464303e-02, -8.208824365859368e-02, -8.208764545725039e-02, -8.208824152589916e-02, -8.208800456810704e-02, -8.208680035290379e-02, -8.208870496377629e-02, -8.209181008193316e-02, -8.208510160745663e-02, -8.209233251971521e-02, -8.208510160745663e-02, -8.209233251971521e-02, -7.872214820538867e-02, -7.869805470814180e-02, -7.872191395644897e-02, -7.869651057048462e-02, -7.870391956752303e-02, -7.867346980651028e-02, -7.874166650841707e-02, -7.870904856016461e-02, -7.877800766943979e-02, -7.864041240163160e-02, -7.877800766943979e-02, -7.864041240163160e-02, -6.074988327159860e-02, -5.929336010801919e-02, -6.087507280236579e-02, -5.909587943300228e-02, -5.745675235294520e-02, -5.964979324070426e-02, -5.913025521075658e-02, -5.841983036479553e-02, -4.794306019901399e-02, -6.903821652246386e-02, -4.794306019901399e-02, -6.903821652246386e-02, -2.588873515186183e-02, -2.305223010865848e-02, -2.698141555308609e-02, -2.360386015809550e-02, -6.762617128075114e-02, -5.833604139913319e-02, -1.525886271118526e-02, -1.468133807649805e-02, -6.683020267385122e-03, -3.595383357605335e-02, -6.683020267385128e-03, -3.595383357605333e-02, -4.792120312199958e-04, -4.119184946397484e-04, -5.089390620268029e-04, -4.287563154894320e-04, -2.658678345655251e-03, -2.327962956827734e-03, -2.536921862509493e-04, -2.645518732028200e-04, -1.545082383874455e-04, -6.343423588159448e-04, -1.545082383874455e-04, -6.343423588159446e-04, -7.692756094039035e-02, -7.697882266453909e-02, -7.687476380905170e-02, -7.693167897791810e-02, -7.692366603115514e-02, -7.697861438496832e-02, -7.688127176033820e-02, -7.693277679694399e-02, -7.689973553119493e-02, -7.695579195648673e-02, -7.689973553119493e-02, -7.695579195648673e-02, -7.349713385671428e-02, -7.350912220898013e-02, -7.371381969892377e-02, -7.378219414999750e-02, -7.334512370367922e-02, -7.268853754549980e-02, -7.358989281182327e-02, -7.291609149805367e-02, -7.303879847850586e-02, -7.466851535974225e-02, -7.303879847850586e-02, -7.466851535974225e-02, -5.639953282127209e-02, -5.676663517735735e-02, -5.393890539480192e-02, -5.370933488695542e-02, -5.886039818051367e-02, -5.224547913372640e-02, -5.468878786006628e-02, -5.065434372056603e-02, -5.258916225152380e-02, -6.083766898785138e-02, -5.258916225152378e-02, -6.083766898785134e-02, -8.044814917123395e-03, -7.877275123963199e-03, -2.040854502760213e-02, -2.012151897089648e-02, -7.654887986995405e-03, -6.730979971724319e-03, -6.680081812321129e-02, -6.685754306231560e-02, -1.169089067748806e-02, -1.036145032218845e-02, -1.169089067748806e-02, -1.036145032218845e-02, -2.103712968063933e-04, -1.910919680295814e-04, -2.581589784188507e-04, -2.486548640146394e-04, -2.088861307794626e-04, -1.810300121917712e-04, -4.411477353741706e-03, -4.335942168736921e-03, -3.427216116957943e-04, -1.551228235167552e-04, -3.427216116957945e-04, -1.551228235167554e-04, -5.099262376163673e-02, -5.047935117304467e-02, -5.262278677461976e-02, -5.202778174932814e-02, -5.209203185173705e-02, -5.151458516268724e-02, -5.160849877867896e-02, -5.107371556983453e-02, -5.185350945289655e-02, -5.129771300843048e-02, -5.185350945289655e-02, -5.129771300843048e-02, -4.993307011019149e-02, -4.955254834072515e-02, -5.438370996996134e-02, -5.354711784734176e-02, -5.503682056368537e-02, -5.414017037051699e-02, -5.401994837870662e-02, -5.343966233021782e-02, -5.465861023085039e-02, -5.402408664410313e-02, -5.465861023085039e-02, -5.402408664410313e-02, -5.507372932534867e-02, -5.459326285279285e-02, -2.758561809987640e-02, -2.711138733453700e-02, -3.549837897286739e-02, -3.434668180714383e-02, -4.671697154203838e-02, -4.586267499547048e-02, -4.128441140785501e-02, -4.127221824610004e-02, -4.128441140785501e-02, -4.127221824610000e-02, -5.288159106308919e-02, -5.154838751752373e-02, -2.388604747064447e-03, -2.349211291108708e-03, -3.429179713585803e-03, -3.169177868238308e-03, -4.691887054055326e-02, -4.455083174534619e-02, -6.595702901859767e-03, -5.874597272591314e-03, -6.595702901859772e-03, -5.874597272591319e-03, -6.501522516483913e-04, -5.950651448392280e-04, -6.862297993543622e-05, -6.823484192345239e-05, -1.543970760054389e-04, -1.323690676335616e-04, -5.805222552807491e-03, -5.572463329880724e-03, -3.055060313109429e-04, -1.500828784711548e-04, -3.055060313109426e-04, -1.500828784711547e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.176892085851657e-10, 0.000000000000000e+00, 1.176906502763608e-10, 1.176884253140855e-10, 0.000000000000000e+00, 1.176905359124128e-10, 1.176858694850566e-10, 0.000000000000000e+00, 1.176842876592576e-10, 1.176888023981292e-10, 0.000000000000000e+00, 1.176948083163030e-10, 1.176850012833996e-10, 0.000000000000000e+00, 1.176922444747228e-10, 1.176850012833996e-10, 0.000000000000000e+00, 1.176922444747228e-10, 8.231935008502520e-07, 0.000000000000000e+00, 8.236353205650476e-07, 8.232406853562013e-07, 0.000000000000000e+00, 8.237185598865523e-07, 8.248010899763255e-07, 0.000000000000000e+00, 8.249773310819305e-07, 8.215411210394445e-07, 0.000000000000000e+00, 8.218116062849146e-07, 8.244135508380317e-07, 0.000000000000000e+00, 8.223783113942398e-07, 8.244135508380317e-07, 0.000000000000000e+00, 8.223783113942398e-07, 1.595671912390260e-03, 0.000000000000000e+00, 1.580749140459544e-03, 1.592913053201285e-03, 0.000000000000000e+00, 1.574724010013596e-03, 1.439198547882168e-03, 0.000000000000000e+00, 1.458941328422673e-03, 1.413008634976599e-03, 0.000000000000000e+00, 1.408062322615784e-03, 1.311476434709664e-03, 0.000000000000000e+00, 1.439609133212273e-03, 1.311476434709664e-03, 0.000000000000000e+00, 1.439609133212273e-03, 1.760075837252796e-01, 0.000000000000000e+00, 1.409845406272539e-01, 1.840127987175583e-01, 0.000000000000000e+00, 1.421053011851842e-01, 9.239825312784262e-04, 0.000000000000000e+00, 7.567635574267396e-04, 1.677081849635112e-01, 0.000000000000000e+00, 1.523841056299212e-01, 2.889189814078939e-02, 0.000000000000000e+00, 9.935523590906438e-01, 2.889189814078939e-02, 0.000000000000000e+00, 9.935523590906440e-01, 3.825678299867112e-01, 0.000000000000000e+00, 2.795818997437380e-01, 4.112434782609627e-01, 0.000000000000000e+00, 2.900647386580332e-01, 2.176444228903581e-01, 0.000000000000000e+00, 1.672138549353978e-01, 2.895397613261981e-01, 0.000000000000000e+00, 3.063626182645113e-01, 8.361998250867149e-02, 0.000000000000000e+00, 3.553738900462098e+00, 8.361998250867170e-02, 0.000000000000000e+00, 3.553738900462105e+00, 1.412907936108420e-07, 0.000000000000000e+00, 1.415872774468383e-07, 1.414506861051695e-07, 0.000000000000000e+00, 1.417485821777246e-07, 1.412956972212662e-07, 0.000000000000000e+00, 1.415934677593612e-07, 1.414376038030662e-07, 0.000000000000000e+00, 1.417351723280862e-07, 1.413734195457145e-07, 0.000000000000000e+00, 1.416694901485453e-07, 1.413734195457145e-07, 0.000000000000000e+00, 1.416694901485453e-07, 7.685294400930455e-06, 0.000000000000000e+00, 7.688481505746636e-06, 7.560440294736132e-06, 0.000000000000000e+00, 7.576341670127924e-06, 7.554448918005107e-06, 0.000000000000000e+00, 7.526542397145945e-06, 7.457138138802849e-06, 0.000000000000000e+00, 7.422381273429466e-06, 7.633850448919700e-06, 0.000000000000000e+00, 7.746405608116371e-06, 7.633850448919700e-06, 0.000000000000000e+00, 7.746405608116371e-06, 4.014334334769823e-03, 0.000000000000000e+00, 4.114552648698293e-03, 3.715278704372232e-03, 0.000000000000000e+00, 3.709331388080667e-03, 6.374476054888480e-03, 0.000000000000000e+00, 4.739395168856439e-03, 7.196368902315977e-03, 0.000000000000000e+00, 5.345090420568037e-03, 3.157525346006724e-03, 0.000000000000000e+00, 4.944325253736351e-03, 3.157525346006725e-03, 0.000000000000000e+00, 4.944325253736351e-03, 1.502648903585812e-01, 0.000000000000000e+00, 1.463439074364046e-01, 7.931811328586889e-02, 0.000000000000000e+00, 7.683614326090707e-02, 1.848077477534094e-01, 0.000000000000000e+00, 1.400156933863778e-01, 2.119796404081357e-05, 0.000000000000000e+00, 2.128660498125633e-05, 2.032815689885711e-01, 0.000000000000000e+00, 1.921002307052709e-01, 2.032815689885711e-01, 0.000000000000000e+00, 1.921002307052709e-01, 4.673713452632692e-01, 0.000000000000000e+00, 3.337054182264765e-01, 3.790359061603207e-01, 0.000000000000000e+00, 3.246320739280473e-01, 2.405059159231878e+00, 0.000000000000000e+00, 2.008591363491282e+00, 2.315873644076202e-01, 0.000000000000000e+00, 2.162932258671811e-01, 2.316144065570521e+00, 0.000000000000000e+00, 4.658892357214324e-01, 2.316144065570515e+00, 0.000000000000000e+00, 4.658892357214319e-01, 5.800674161623245e-03, 0.000000000000000e+00, 5.607636783985431e-03, 5.551945895510993e-03, 0.000000000000000e+00, 5.369132007649598e-03, 5.637554495569201e-03, 0.000000000000000e+00, 5.451268554840965e-03, 5.710168600958908e-03, 0.000000000000000e+00, 5.520845966605962e-03, 5.673732445144783e-03, 0.000000000000000e+00, 5.485914051169828e-03, 5.673732445144783e-03, 0.000000000000000e+00, 5.485914051169828e-03, 6.692831072682160e-03, 0.000000000000000e+00, 6.497776376200763e-03, 6.714823379325386e-03, 0.000000000000000e+00, 6.499920121622592e-03, 6.813685892790361e-03, 0.000000000000000e+00, 6.588047955261227e-03, 6.847651173523880e-03, 0.000000000000000e+00, 6.646557857553558e-03, 6.853849302790840e-03, 0.000000000000000e+00, 6.643242388719233e-03, 6.853849302790840e-03, 0.000000000000000e+00, 6.643242388719233e-03, 2.976041017830348e-03, 0.000000000000000e+00, 2.944004752893400e-03, 5.228205639178733e-02, 0.000000000000000e+00, 5.045760289686053e-02, 4.189455366639411e-02, 0.000000000000000e+00, 3.960251307526828e-02, 2.882877566117888e-02, 0.000000000000000e+00, 2.759906521022734e-02, 3.530919099379224e-02, 0.000000000000000e+00, 3.564525796015408e-02, 3.530919099379227e-02, 0.000000000000000e+00, 3.564525796015407e-02, 9.658058321936962e-03, 0.000000000000000e+00, 9.192055346945689e-03, 1.763881187547222e-01, 0.000000000000000e+00, 1.707396088588594e-01, 1.872007460915014e-01, 0.000000000000000e+00, 1.628002840665625e-01, 4.298914244581637e-02, 0.000000000000000e+00, 3.823224041671835e-02, 2.733931381772520e-01, 0.000000000000000e+00, 2.500396295584803e-01, 2.733931381772521e-01, 0.000000000000000e+00, 2.500396295584803e-01, 2.837457552796849e-01, 0.000000000000000e+00, 2.424606599897324e-01, 1.317132486003146e+00, 0.000000000000000e+00, 2.306662365830582e+00, 9.418838207715773e-01, 0.000000000000000e+00, 7.367686072374541e-01, 2.757662280412542e-01, 0.000000000000000e+00, 2.496196856298892e-01, 4.389711350187890e+00, 0.000000000000000e+00, 5.239393416942481e-01, 4.389711350187897e+00, 0.000000000000000e+00, 5.239393416942496e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
