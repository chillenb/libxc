
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbeint_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.813844524758260e-02, -5.813930585568049e-02, -5.814175327549402e-02, -5.812897857766852e-02, -5.813586786713666e-02, -5.813586786713666e-02, -4.771139327825141e-02, -4.771658716469920e-02, -4.783690005756788e-02, -4.762828835923723e-02, -4.771765923021744e-02, -4.771765923021744e-02, -3.207374034235023e-02, -3.183954089671876e-02, -2.611811169159964e-02, -2.639208401837534e-02, -2.654102557212356e-02, -2.654102557212356e-02, -8.275809009787048e-03, -8.961959562870362e-03, -3.481104765701350e-02, -2.854012679047968e-03, -4.824516392174550e-03, -4.824516392174550e-03, -8.902311238649194e-09, -1.189721717849939e-08, -1.334978503351627e-05, -6.360139221872106e-10, -2.339563439877910e-09, -2.339563439877910e-09, -6.511881627022043e-02, -6.532554859909571e-02, -6.512733751319789e-02, -6.530983918088955e-02, -6.522400279216299e-02, -6.522400279216299e-02, -2.581248997172998e-02, -2.631870769446386e-02, -2.468256736077514e-02, -2.511869612748070e-02, -2.665800491726884e-02, -2.665800491726884e-02, -4.269294178305670e-02, -5.787299916340225e-02, -4.008702292415259e-02, -5.352868008118471e-02, -4.446583798153786e-02, -4.446583798153786e-02, -6.011872577899022e-04, -4.450473890048247e-03, -4.709733259713397e-04, -7.551878531061713e-02, -1.545844674160427e-03, -1.545844674160427e-03, -2.486014893327027e-10, -6.733547643123908e-10, -1.201817420860986e-09, -1.235471776815338e-04, -1.340479202587543e-09, -1.340479202587543e-09, -6.120263825876041e-02, -5.675816747997222e-02, -5.825611684107358e-02, -5.954784806035126e-02, -5.889592483917586e-02, -5.889592483917586e-02, -6.199230723157322e-02, -3.135329704173339e-02, -3.849855134934133e-02, -4.688385605822962e-02, -4.252761164803526e-02, -4.252761164803526e-02, -5.797478476423434e-02, -7.675425791203944e-03, -1.276490409071868e-02, -2.717458701288228e-02, -1.930010826256274e-02, -1.930010826256274e-02, -3.051277929226779e-02, -1.005392821624351e-05, -3.834722118831887e-05, -3.182370045387799e-02, -4.000680792445153e-04, -4.000680792445187e-04, -3.460000668210607e-08, -6.295661689935700e-12, -1.053010230802749e-10, -3.059876792321680e-04, -1.176706561295273e-09, -1.176706563463677e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbeint_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.354873133647907e-01, -1.354882736739634e-01, -1.354910164755558e-01, -1.354767610053696e-01, -1.354844474290627e-01, -1.354844474290627e-01, -1.160277953107055e-01, -1.160329748305725e-01, -1.161529345472292e-01, -1.159461644420918e-01, -1.160342337615512e-01, -1.160342337615512e-01, -8.311682127802925e-02, -8.290348406394325e-02, -7.655486285406847e-02, -7.698453850863372e-02, -7.715142539105690e-02, -7.715142539105690e-02, -3.395106929975192e-02, -3.587447689965563e-02, -8.756319832023264e-02, -1.449620239755739e-02, -2.247813085109306e-02, -2.247813085109307e-02, -5.809796133882207e-08, -7.760543651071043e-08, -8.450862434172392e-05, -4.169007034150987e-09, -1.530902001770221e-08, -1.530902001976900e-08, -1.345464751600681e-01, -1.347000360729234e-01, -1.345528368690693e-01, -1.346884112495193e-01, -1.346246977101890e-01, -1.346246977101890e-01, -8.355571518864358e-02, -8.448666396482407e-02, -8.146334204536394e-02, -8.229869272471867e-02, -8.507777883395476e-02, -8.507777883395476e-02, -8.498159571086984e-02, -8.211850666352401e-02, -8.281326582008049e-02, -8.013126389368358e-02, -8.538798341121191e-02, -8.538798341121191e-02, -3.487353117556775e-03, -2.128706524052947e-02, -2.763667912570152e-03, -1.172435977347532e-01, -8.390621560792092e-03, -8.390621560792092e-03, -1.632373535886248e-09, -4.414400892218692e-09, -7.891490359367557e-09, -7.570156725381624e-04, -8.791780198745802e-09, -8.791780199368750e-09, -7.518760817972248e-02, -7.929466770224376e-02, -7.805506107665534e-02, -7.686886666575057e-02, -7.748117552483347e-02, -7.748117552483347e-02, -7.279490800638030e-02, -7.769401292953781e-02, -8.134350719401115e-02, -8.179771178108967e-02, -8.203718754848199e-02, -8.203718754848199e-02, -8.410025168737263e-02, -3.291810988417816e-02, -4.703152048740815e-02, -6.904628322703700e-02, -5.955546815690031e-02, -5.955546815690031e-02, -7.573544926898737e-02, -6.379140022351241e-05, -2.398735908014177e-04, -7.006642236314210e-02, -2.362102826221042e-03, -2.362102826221053e-03, -2.250681271683138e-07, -4.157393549965736e-11, -6.928299128911002e-10, -1.825775686164221e-03, -7.721549881816959e-09, -7.721549879451470e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbeint_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.955365005848544e-10, 1.955398085119754e-10, 1.955440257670874e-10, 1.954950368047989e-10, 1.955221935353657e-10, 1.955221935353657e-10, 1.084799072775508e-06, 1.085005226678209e-06, 1.089656986013230e-06, 1.080588195521501e-06, 1.084918751424336e-06, 1.084918751424336e-06, 1.779327442094614e-03, 1.768782106676943e-03, 1.492926452600662e-03, 1.456494523039180e-03, 1.481468257795420e-03, 1.481468257795420e-03, 1.880813786325253e-01, 1.956950442502574e-01, 9.569870044370296e-04, 1.569356858634520e-01, 1.901129225729430e-01, 1.901129225729431e-01, 7.010242677269865e-03, 8.258909723797258e-03, 4.194561449561687e-02, 2.477514017164807e-03, 5.177975998447401e-03, 5.177976000206084e-03, 2.768029578829259e-07, 2.785211019783633e-07, 2.768714411088305e-07, 2.783880637083008e-07, 2.776770271198033e-07, 2.776770271198033e-07, 6.686541203068688e-06, 6.648304665722563e-06, 6.408898644093751e-06, 6.377769394423161e-06, 6.803645761959918e-06, 6.803645761959918e-06, 5.370859529715915e-03, 6.190853080399833e-03, 7.051788899049991e-03, 9.580297028276875e-03, 5.320617904574538e-03, 5.320617904574538e-03, 9.658161946607351e-02, 7.605487427837697e-02, 9.922711895915960e-02, 5.321882922361414e-05, 1.764436655612417e-01, 1.764436655612417e-01, 2.419945379748840e-03, 3.045799254915949e-03, 3.047368508421641e-02, 9.958313588314174e-02, 1.326220660605617e-02, 1.326220661398082e-02, 1.003333532217407e-02, 8.907386805931282e-03, 9.271908767531711e-03, 9.598550877363396e-03, 9.432323702105446e-03, 9.432323702105446e-03, 1.173489647075933e-02, 7.721795973458928e-03, 8.481502285579801e-03, 9.488116658739625e-03, 8.968028925809283e-03, 8.968028925809283e-03, 4.952314141221618e-03, 5.288932399613151e-02, 4.462913476611361e-02, 3.378952747855792e-02, 4.081854393797926e-02, 4.081854393797930e-02, 1.106992916608875e-02, 3.433492281435964e-02, 5.227627432483651e-02, 5.074970317966462e-02, 1.699151082161745e-01, 1.699151082161729e-01, 8.705504972469478e-03, 3.302434233648849e-03, 4.155207134172153e-03, 1.564102255970309e-01, 1.651468441399625e-02, 1.651468440717277e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
