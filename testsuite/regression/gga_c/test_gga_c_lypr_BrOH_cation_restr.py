
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lypr_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.344911074378295e-02, -6.344920396813671e-02, -6.344947668687131e-02, -6.344809255239039e-02, -6.344883799731336e-02, -6.344883799731336e-02, -5.521722628106442e-02, -5.521822503346883e-02, -5.524148516299601e-02, -5.520248665059524e-02, -5.521860905103593e-02, -5.521860905103593e-02, -3.051516238371427e-02, -3.039786126681599e-02, -2.713656067543995e-02, -2.740823828322115e-02, -2.746971498038990e-02, -2.746971498038990e-02, -1.108655906835802e-02, -1.129932324340284e-02, -3.389363548930667e-02, -9.264238892250202e-03, -1.002458821994374e-02, -1.002458821994374e-02, -4.928090384191763e-24, -4.074219222615089e-22, -5.777056881269372e-04, -5.749648767095296e-63, -1.312211272105753e-41, -1.312211272105753e-41, -6.004516158314025e-02, -6.006547479216424e-02, -6.004600952562832e-02, -6.006394395371419e-02, -6.005551080603644e-02, -6.005551080603644e-02, -4.229745520249893e-02, -4.267442368165159e-02, -4.155343440572687e-02, -4.189991048510523e-02, -4.285526517560217e-02, -4.285526517560217e-02, -3.211803579662446e-02, -3.651200507426330e-02, -3.024044928015614e-02, -3.384774173383753e-02, -3.281422017859188e-02, -3.281422017859188e-02, -6.435503572762242e-03, -9.155335252018074e-03, -5.730280415861989e-03, -5.351752550137182e-02, -7.882217324579046e-03, -7.882217324579046e-03, -2.013550216344585e-102, -1.157806605409593e-65, -8.643990976109058e-109, -2.652131459930762e-03, -1.636758553763818e-76, -1.636758553763818e-76, -3.574790210000316e-02, -3.499608617873334e-02, -3.526157234948191e-02, -3.548031646836500e-02, -3.537103620668711e-02, -3.537103620668711e-02, -3.540787115182307e-02, -2.594466031166480e-02, -2.902461660219858e-02, -3.181193675544668e-02, -3.044850693439240e-02, -3.044850693439240e-02, -3.727800912483138e-02, -9.491490785949654e-03, -1.221379299094308e-02, -2.035802985679322e-02, -1.606321728067347e-02, -1.606321728067347e-02, -2.456270902092672e-02, -4.779191743489451e-04, -1.486850478072110e-03, -2.143993728069581e-02, -4.393940271321381e-03, -4.393940271321382e-03, -3.705314078311285e-14, 0.000000000000000e+00, -1.355563825621858e-197, -3.896567564387239e-03, -1.565439227485224e-88, -1.565439227484760e-88])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lypr_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.194620596728170e-02, -7.194605810551269e-02, -7.194564156305258e-02, -7.194783659255233e-02, -7.194665214521451e-02, -7.194665214521451e-02, -7.060731300107424e-02, -7.060564598659379e-02, -7.056723939857119e-02, -7.063483437407794e-02, -7.060541467638162e-02, -7.060541467638162e-02, -5.730394445991310e-02, -5.743143562716265e-02, -6.112906433660988e-02, -6.112459321379998e-02, -6.094227830904310e-02, -6.094227830904310e-02, -1.923602987962676e-02, -1.961185661496501e-02, -5.933951461486878e-02, -1.351546443818366e-02, -1.556394623777607e-02, -1.556394623777606e-02, -1.537656398867308e-22, -1.153993370078552e-20, -1.386441244999247e-03, -5.189217108069191e-61, -7.579992304084048e-40, -7.579992304084048e-40, -6.825312067815954e-02, -6.822076500256467e-02, -6.825178797064461e-02, -6.822322101169316e-02, -6.823662586092058e-02, -6.823662586092058e-02, -7.987176377856940e-02, -7.943145407241561e-02, -8.098750679611441e-02, -8.057777740662118e-02, -7.910557696367716e-02, -7.910557696367716e-02, -4.830694917242468e-02, -4.561936500335648e-02, -4.728808451833421e-02, -4.383616677194303e-02, -4.803767748953935e-02, -4.803767748953935e-02, -9.584224996187258e-03, -1.950199171095988e-02, -8.773966941447617e-03, -6.028739565011502e-02, -1.124504195687865e-02, -1.124504195687865e-02, -3.029960235823611e-100, -1.092524362499937e-63, -1.384861032194428e-106, -4.733043720230463e-03, -1.815305332549183e-74, -1.815305332549183e-74, -4.308285249473044e-02, -4.393905555468719e-02, -4.363690000092869e-02, -4.338747995305108e-02, -4.351205785974853e-02, -4.351205785974853e-02, -4.228672885024607e-02, -4.863741350112006e-02, -4.651304314128744e-02, -4.459100579745508e-02, -4.550821839923389e-02, -4.550821839923389e-02, -4.666440343268211e-02, -2.826744081478410e-02, -3.438415299226138e-02, -3.875698205984899e-02, -3.703934060754222e-02, -3.703934060754223e-02, -4.639785143861323e-02, -1.188188656594493e-03, -2.973309698931792e-03, -3.575100802683150e-02, -7.109965762624824e-03, -7.109965762624825e-03, -6.105933472836812e-13, 0.000000000000000e+00, -4.014122121969548e-195, -6.453558632938823e-03, -2.023437389359052e-86, -2.023437389358362e-86])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lypr_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.027533899707810e-11, 2.027505401094074e-11, 2.027369914024608e-11, 2.027794114551180e-11, 2.027573079351399e-11, 2.027573079351399e-11, 2.052917425368728e-07, 2.052894741665628e-07, 2.052113102178957e-07, 2.051477129211399e-07, 2.052636907760574e-07, 2.052636907760574e-07, 7.659870594053775e-04, 7.699185285901373e-04, 8.720650212056596e-04, 8.393928478765767e-04, 8.462190936347105e-04, 8.462190936347105e-04, 6.102844985333644e-02, 6.066356330288798e-02, 3.717817399510187e-04, 4.617021466950418e-02, 5.737531750528981e-02, 5.737531750528982e-02, 0.000000000000000e+00, 0.000000000000000e+00, 2.479565203353723e-18, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.605848741162076e-08, 2.603407084666352e-08, 2.605727068760078e-08, 2.603571655174403e-08, 2.604615684538787e-08, 2.604615684538787e-08, 3.880960828874031e-06, 3.740651905918719e-06, 3.987362978709276e-06, 3.858994337881410e-06, 3.753616026920005e-06, 3.753616026920005e-06, 1.413293599467665e-03, 9.694195601752694e-04, 1.998558771658203e-03, 1.682624239726744e-03, 1.314804898733224e-03, 1.314804898733224e-03, 5.553988728860147e-03, 6.099660001871096e-02, 2.369473774731981e-03, 4.282013639856276e-06, 1.946103331093576e-02, 1.946103331093576e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.183107661056431e-07, 0.000000000000000e+00, 0.000000000000000e+00, 1.382752147062157e-03, 1.419096027930066e-03, 1.406181405333309e-03, 1.395647078218289e-03, 1.400908415283001e-03, 1.400908415283001e-03, 1.564675777216738e-03, 3.057395298038177e-03, 2.505616561223618e-03, 2.069203495110534e-03, 2.279976879539535e-03, 2.279976879539535e-03, 7.795070404956513e-04, 4.622598103789333e-02, 3.002895206005494e-02, 1.224452454077385e-02, 1.979599824607082e-02, 1.979599824607083e-02, 4.335772322726533e-03, 4.684787511795087e-20, 1.232545791163507e-10, 1.396086493539762e-02, 2.367054681787544e-04, 2.367054681787556e-04, 5.657051644882273e-320, 0.000000000000000e+00, 0.000000000000000e+00, 7.034606092104693e-05, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
