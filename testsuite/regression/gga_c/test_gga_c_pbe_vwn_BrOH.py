
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_vwn_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.118812670949033e-02, -5.118886507071858e-02, -5.119109149769244e-02, -5.117902287192676e-02, -5.118852501886703e-02, -5.118852501886703e-02, -4.184276440396008e-02, -4.184693557857456e-02, -4.196177119833192e-02, -4.176427618365274e-02, -4.184491314448378e-02, -4.184491314448378e-02, -2.617611575717148e-02, -2.595519239580896e-02, -2.027825691236100e-02, -2.056991488084581e-02, -2.609644739173403e-02, -2.609644739173403e-02, -8.854578986631997e-03, -9.538965422555947e-03, -3.321836992896977e-02, -2.356516306892072e-03, -9.065183902537329e-03, -9.065183902537329e-03, -1.249071238625497e-07, -1.544767775859454e-07, -3.140331544714086e-05, -3.037972022970292e-09, -1.530721479338928e-07, -1.530721479338928e-07, -5.906897543638596e-02, -5.927401251782770e-02, -5.908942198184869e-02, -5.924884809921848e-02, -5.917465727118108e-02, -5.917465727118108e-02, -2.083868449560652e-02, -2.129059145660970e-02, -2.021201963068282e-02, -2.055944146142630e-02, -2.198776279553653e-02, -2.198776279553653e-02, -3.925494158024373e-02, -5.667993776592922e-02, -3.780147973315094e-02, -5.131606265886431e-02, -4.174693801594246e-02, -4.174693801594246e-02, -6.080316450979122e-04, -4.226441196253323e-03, -6.698847238414418e-04, -7.236188475714493e-02, -1.336176205399674e-03, -1.336176205399674e-03, -2.726661927471399e-09, -5.079081262508766e-09, -3.799797867355020e-09, -1.329381198268251e-04, -4.872841250950238e-09, -4.872841250950238e-09, -6.180740271560452e-02, -5.668458003059788e-02, -5.843102772282654e-02, -5.984805383972926e-02, -5.913202225208312e-02, -5.913202225208312e-02, -6.199212024560177e-02, -2.918544641696983e-02, -3.652712721957099e-02, -4.481802528164747e-02, -4.049234698767500e-02, -4.049234698767500e-02, -5.670180001535995e-02, -7.295586709765138e-03, -1.209229005976678e-02, -2.452373924512450e-02, -1.776685694931449e-02, -1.776685694931449e-02, -2.750816470056573e-02, -1.888918625194564e-05, -7.089515545285540e-05, -2.938181723610912e-02, -4.232688769891611e-04, -4.232688769891611e-04, -1.919015349818801e-07, -1.925533736747331e-11, -3.525061065566314e-10, -4.289905170583915e-04, -3.335019575552253e-09, -3.335019575118572e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_vwn_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.273968237607925e-01, -1.273977252280117e-01, -1.274004525338391e-01, -1.273857170094412e-01, -1.273973099827991e-01, -1.273973099827991e-01, -1.097470369340892e-01, -1.097519744703774e-01, -1.098879270338363e-01, -1.096551034581308e-01, -1.097496059728674e-01, -1.097496059728674e-01, -7.706367621618250e-02, -7.676713915846467e-02, -6.775443674534239e-02, -6.833097434871230e-02, -7.695713018394722e-02, -7.695713018394722e-02, -3.576274769653990e-02, -3.761496015520442e-02, -8.681003803925606e-02, -1.229062225630956e-02, -3.634241204363001e-02, -3.634241204363001e-02, -8.109214085236207e-07, -1.002236100689064e-06, -1.967981500786398e-04, -1.988649159093968e-08, -9.932304889818797e-07, -9.932304889818797e-07, -1.298280426381619e-01, -1.300047130417379e-01, -1.298457050866149e-01, -1.299830819024641e-01, -1.299191931070438e-01, -1.299191931070438e-01, -7.377302203060129e-02, -7.476866145324421e-02, -7.238430128237791e-02, -7.316900457119803e-02, -7.624556197603291e-02, -7.624556197603291e-02, -8.464777568110335e-02, -8.320565447544839e-02, -8.307945355853780e-02, -8.272768043574281e-02, -8.601288453404807e-02, -8.601288453404807e-02, -3.526882962362192e-03, -2.048817515898874e-02, -3.864331609749067e-03, -1.184156965140966e-01, -7.360831514067100e-03, -7.360831514067100e-03, -1.785409243720008e-08, -3.321762936473737e-08, -2.490831091432634e-08, -8.126041012415715e-04, -3.189291041176550e-08, -3.189291041311405e-08, -7.607416778084969e-02, -8.072944824948247e-02, -7.933472021298073e-02, -7.805844088687060e-02, -7.871972074501191e-02, -7.871972074501191e-02, -7.412364525859931e-02, -7.674332188375969e-02, -8.165462065534200e-02, -8.322135324682786e-02, -8.288582474771178e-02, -8.288582474771178e-02, -8.518426172985499e-02, -3.188531035919544e-02, -4.580068637132206e-02, -6.737458992096598e-02, -5.769659828586813e-02, -5.769659828586812e-02, -7.378864601827362e-02, -1.190296897451841e-04, -4.388890760465786e-04, -6.940603504619543e-02, -2.493553356173255e-03, -2.493553356173278e-03, -1.243412232349189e-06, -1.270657611765293e-10, -2.317405953618125e-09, -2.524609321042261e-03, -2.185702292542226e-08, -2.185702292464206e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_vwn_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.929474205297979e-10, 1.929504627276669e-10, 1.929545490446262e-10, 1.929049310674618e-10, 1.929491041614853e-10, 1.929491041614853e-10, 1.082467379071484e-06, 1.082644097024982e-06, 1.087295676205412e-06, 1.078175926049880e-06, 1.082535656930894e-06, 1.082535656930894e-06, 1.706783253074552e-03, 1.693706228711311e-03, 1.340265001748678e-03, 1.317109072359975e-03, 1.702108735701744e-03, 1.702108735701744e-03, 2.066363306270744e-01, 2.152759727008852e-01, 1.014402279489795e-03, 1.484587430077619e-01, 2.095283989927954e-01, 2.095283989927954e-01, 2.967061143193079e-02, 3.198359922510885e-02, 6.501968848451198e-02, 5.486355636244921e-03, 3.333323965393602e-02, 3.333323965393602e-02, 2.840101876273955e-07, 2.858259042513950e-07, 2.841893965690108e-07, 2.856011227898870e-07, 2.849467091343753e-07, 2.849467091343753e-07, 6.122230015878466e-06, 6.108004659731118e-06, 5.930537150425934e-06, 5.921484324310271e-06, 6.368137388485562e-06, 6.368137388485562e-06, 6.271359448180672e-03, 7.961945061150813e-03, 7.615248555372763e-03, 1.036543319856000e-02, 5.773718471993573e-03, 5.773718471993573e-03, 9.278581770049907e-02, 6.832830847398062e-02, 1.143891741551653e-01, 6.083597481063552e-05, 1.446985129790593e-01, 1.446985129790593e-01, 5.649209676275337e-03, 7.058546839941789e-03, 2.121749606644105e-02, 1.044234387577592e-01, 1.088012109073773e-02, 1.088012109037995e-02, 1.206910785213649e-02, 1.045615654188075e-02, 1.098119234516572e-02, 1.142582166925142e-02, 1.119906513920174e-02, 1.119906513920174e-02, 1.419072965869227e-02, 7.961559410406853e-03, 9.077741725556159e-03, 1.047120433266112e-02, 9.742249925911467e-03, 9.742249925911470e-03, 6.344571321917638e-03, 4.863987288688398e-02, 4.314178985185574e-02, 3.562828823681836e-02, 4.090208026291617e-02, 4.090208026291618e-02, 1.205272191068407e-02, 4.488241323734051e-02, 6.969138647194402e-02, 6.094300130640407e-02, 1.542997151579490e-01, 1.542997151579505e-01, 2.456032145027490e-02, 1.708971959877993e-03, 4.235656702876518e-03, 1.995841100185597e-01, 1.465851496457672e-02, 1.465851496237928e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
