
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tm_lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.853277446210937e-02, -5.853287344086645e-02, -5.853317608760022e-02, -5.853155797077846e-02, -5.853282782143460e-02, -5.853282782143460e-02, -5.308076875729231e-02, -5.308172708619468e-02, -5.310822221799442e-02, -5.306348877643376e-02, -5.308128076710535e-02, -5.308128076710535e-02, -3.371140521493757e-02, -3.355920586451402e-02, -2.888774262903283e-02, -2.924138698322645e-02, -3.365668318403789e-02, -3.365668318403789e-02, -9.994717275261173e-03, -1.093526398238929e-02, -3.934773118196176e-02, 2.044067452072182e-03, -1.029304878614043e-02, -1.029304878614043e-02, -3.089291404116082e-03, -3.223863287953869e-03, -8.511183660429087e-03, -1.545229419086597e-03, -3.192996943911887e-03, -3.192996943911887e-03, -5.724650767029778e-02, -5.726975546075506e-02, -5.724883625210576e-02, -5.726691396730455e-02, -5.725850752756746e-02, -5.725850752756746e-02, -4.076268823517545e-02, -4.115974709288370e-02, -4.024933500086236e-02, -4.056939024770156e-02, -4.167331256138797e-02, -4.167331256138797e-02, -3.829836909828018e-02, -4.350064360116587e-02, -3.722803217979808e-02, -4.147433200633111e-02, -3.950629370876525e-02, -3.950629370876525e-02, 5.512288677565407e-03, 2.769379576774037e-03, 3.525879737945552e-03, -5.446955495496938e-02, 3.039257553656028e-03, 3.039257553656028e-03, -1.492735337961677e-03, -1.696747138776810e-03, -1.285624546320904e-03, -5.672579536487403e-03, -1.551952721546162e-03, -1.551952721546162e-03, -4.381926897100250e-02, -4.291623860895576e-02, -4.324147314020041e-02, -4.349178309371717e-02, -4.336675966246158e-02, -4.336675966246158e-02, -4.351008597714440e-02, -3.246529327061835e-02, -3.624862884097701e-02, -3.934927456283648e-02, -3.784923696294428e-02, -3.784923696294428e-02, -4.398694513172721e-02, -4.017222152440025e-03, -1.295071945244808e-02, -2.628732311004630e-02, -2.015332181105729e-02, -2.015332181105728e-02, -3.047498406071477e-02, -8.492565632361298e-03, -6.494420232248002e-03, -2.851200184249762e-02, -2.018442104795104e-03, -2.018442104795116e-03, -3.572327435702143e-03, -4.795766241375753e-04, -9.011281085810356e-04, -4.026037443007304e-03, -1.326820766877753e-03, -1.326820766877751e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tm_lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.881459350384647e-02, -6.881443162268644e-02, -6.881394503527943e-02, -6.881659132307662e-02, -6.881450616373216e-02, -6.881450616373216e-02, -6.996995262193513e-02, -6.996834313261679e-02, -6.992422546572288e-02, -7.000065428955334e-02, -6.996913200315862e-02, -6.996913200315862e-02, -6.961283284745728e-02, -6.982842497029434e-02, -7.657492828888099e-02, -7.626828930090142e-02, -6.969017765394167e-02, -6.969017765394167e-02, -5.035000859154401e-02, -4.980016834623358e-02, -6.608103986428636e-02, -4.867952597329465e-02, -5.016781163224673e-02, -5.016781163224673e-02, -4.038107606242475e-03, -4.210330893044247e-03, -1.149322989624282e-02, -2.040053695698069e-03, -4.170855713046746e-03, -4.170855713046746e-03, -6.604051110301749e-02, -6.600229005494430e-02, -6.603668886254348e-02, -6.600696767840036e-02, -6.602077347331595e-02, -6.602077347331595e-02, -8.393147229063935e-02, -8.336356468009588e-02, -8.476213371185565e-02, -8.430216184525323e-02, -8.250971987528595e-02, -8.250971987528595e-02, -5.731577045765652e-02, -5.166537584463771e-02, -5.718000203450943e-02, -5.179813298872069e-02, -5.666486648941642e-02, -5.666486648941642e-02, -3.677531653904358e-02, -6.600231269567595e-02, -3.491884941506423e-02, -6.026174067988236e-02, -4.183985166542500e-02, -4.183985166542500e-02, -1.971414218306836e-03, -2.237910936070969e-03, -1.700147143405795e-03, -1.574737107084439e-02, -2.048841480722155e-03, -2.048841480722155e-03, -4.941801934956691e-02, -5.070700914646810e-02, -5.024279450632385e-02, -4.988538883060108e-02, -5.006387979131741e-02, -5.006387979131741e-02, -4.880737312986532e-02, -6.146309077114763e-02, -5.703261110733270e-02, -5.344774628079624e-02, -5.516039406985306e-02, -5.516039406985305e-02, -5.242885858455593e-02, -6.911855248378153e-02, -6.515979104664754e-02, -5.657093222428158e-02, -6.038202311283222e-02, -6.038202311283219e-02, -6.061856670099593e-02, -1.097481874719126e-02, -1.359077896664378e-02, -5.088629856922913e-02, -2.423053731119949e-02, -2.423053731119951e-02, -4.654862661135492e-03, -6.374847461917527e-04, -1.194616681941170e-03, -2.199391101156893e-02, -1.754162605646859e-03, -1.754162605646857e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tm_lyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.536161768324187e-11, 2.536130831360709e-11, 2.535970038157472e-11, 2.536477116184157e-11, 2.536145643612981e-11, 2.536145643612981e-11, 2.463761182918549e-07, 2.463734814531351e-07, 2.462493219803821e-07, 2.461970496754785e-07, 2.463694099600495e-07, 2.463694099600495e-07, 1.082715496338591e-03, 1.088218465247855e-03, 1.243124562905510e-03, 1.196014157372559e-03, 1.084718744691427e-03, 1.084718744691427e-03, 3.352521251202931e-01, 3.196461112792314e-01, 4.402143842285148e-04, 9.522175583637783e-01, 3.304823240453922e-01, 3.304823240453922e-01, 7.477824472932918e-08, 2.527143830214911e-07, 2.086317618236241e+00, 2.444389967470999e-21, 1.930549902599187e-07, 1.930549902599187e-07, 3.164491636089712e-08, 3.161634337581691e-08, 3.164190021682054e-08, 3.161968430101554e-08, 3.163038980497490e-08, 3.163038980497490e-08, 4.673255552875898e-06, 4.508428956680234e-06, 4.741924981710987e-06, 4.610412637695353e-06, 4.476256094495328e-06, 4.476256094495328e-06, 2.136593479380221e-03, 1.425313822763402e-03, 2.756875100119318e-03, 2.246777809844844e-03, 1.777367986323692e-03, 1.777367986323692e-03, 2.004806433947353e+00, 3.267505566435177e-01, 2.054489924204674e+00, 5.159602669861103e-06, 1.463743489909421e+00, 1.463743489909421e+00, 2.539989931048804e-22, 7.438206025175528e-19, 5.099076805151286e-27, 3.134011755702283e+00, 3.229309435334315e-21, 3.229309435334315e-21, 1.833206780526262e-03, 1.881798886475730e-03, 1.864206201257838e-03, 1.850766583805654e-03, 1.857478727495587e-03, 1.857478727495587e-03, 2.149579726857972e-03, 4.273248861190238e-03, 3.465760078598915e-03, 2.873703220412723e-03, 3.158995644557357e-03, 3.158995644557357e-03, 1.128902893859281e-03, 1.364329714948304e-01, 6.716655918599285e-02, 2.290592360701054e-02, 3.954716791173316e-02, 3.954716791173317e-02, 6.983603282929673e-03, 1.699877067907759e+00, 2.972098483636554e+00, 2.953880249257671e-02, 2.756961314543708e+00, 2.756961314543706e+00, 3.698825650735409e-06, 8.106770149188471e-86, 1.046920168354118e-41, 2.890248006966355e+00, 5.795540312594369e-26, 5.795540312593670e-26])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
