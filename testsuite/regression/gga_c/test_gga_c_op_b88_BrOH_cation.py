
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.847669935459032e-02, -5.847696646634824e-02, -5.847773010359394e-02, -5.847376475064027e-02, -5.847590274901342e-02, -5.847590274901342e-02, -5.143793894490314e-02, -5.143991987857915e-02, -5.148584198946624e-02, -5.140685256173797e-02, -5.144039987449357e-02, -5.144039987449357e-02, -3.406609976913528e-02, -3.395146097347358e-02, -3.107139134525443e-02, -3.128333947093467e-02, -3.070722467035434e-02, -3.070722467035434e-02, -1.114275144189504e-02, -1.156548913073568e-02, -3.657611396840307e-02, -6.508782463445617e-03, -4.471310325378954e-03, -4.471310325378956e-03, -7.184450100093060e-06, -8.362077039390426e-06, -4.139691828657219e-04, -1.671222610760464e-06, -2.172879228597425e-06, -2.172879228597429e-06, -5.832627376425226e-02, -5.838208110434047e-02, -5.832858259882305e-02, -5.837785371083211e-02, -5.835469700569016e-02, -5.835469700569016e-02, -3.865685139302523e-02, -3.898052106461488e-02, -3.797635911354580e-02, -3.826267622167666e-02, -3.916494364149445e-02, -3.916494364149445e-02, -3.707071584792635e-02, -4.334636445270468e-02, -3.519991213711584e-02, -4.060335370216913e-02, -3.781390126326897e-02, -3.781390126326897e-02, -3.036273755712036e-03, -8.965342949029427e-03, -2.641701449648431e-03, -5.685836303265410e-02, -4.589740557706879e-03, -4.589740557706879e-03, -9.524231378589187e-07, -1.691912473731262e-06, -1.831335233291502e-06, -1.283461489608676e-03, -1.768448496558179e-06, -1.768448496558178e-06, -4.371927385944750e-02, -4.214563625932019e-02, -4.268004000129045e-02, -4.313725365285999e-02, -4.290687136355636e-02, -4.290687136355636e-02, -4.373377507164354e-02, -3.071284462925097e-02, -3.409723043029502e-02, -3.775566836047414e-02, -3.588735072949837e-02, -3.588735072949837e-02, -4.383683201513675e-02, -1.239115434615800e-02, -1.644387181335512e-02, -2.538770375234274e-02, -2.068109851919475e-02, -2.068109851919474e-02, -2.950942247028632e-02, -3.639966061502472e-04, -7.300519336531137e-04, -2.686111975279238e-02, -2.244154225449599e-03, -2.244154225449599e-03, -1.579327441336797e-05, -1.017209952482002e-07, -5.314894097771341e-07, -1.979941307955459e-03, -1.783965645849334e-06, -1.783965645849332e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.254679628521552e-02, -8.254701796594545e-02, -8.254646791309257e-02, -8.254705981451520e-02, -8.254694532656287e-02, -8.254577944166634e-02, -8.254697480795552e-02, -8.255000253512725e-02, -8.254385348338919e-02, -8.255082902441579e-02, -8.254385348338919e-02, -8.255082902441579e-02, -7.863689827742355e-02, -7.861471663207256e-02, -7.863690865504502e-02, -7.861353887550754e-02, -7.862608771912127e-02, -7.859749099887696e-02, -7.865142050826664e-02, -7.862090662252273e-02, -7.869198364823221e-02, -7.855857651458195e-02, -7.869198364823221e-02, -7.855857651458195e-02, -6.033882597262592e-02, -5.890841510211542e-02, -6.046251802270518e-02, -5.871276433787777e-02, -5.719046654840720e-02, -5.945017599279268e-02, -5.888738251456897e-02, -5.815677284904547e-02, -4.767055223170127e-02, -6.968796168483535e-02, -4.767055223170127e-02, -6.968796168483535e-02, -2.782528470155442e-02, -2.431297026338087e-02, -2.883148162012125e-02, -2.472931059811529e-02, -6.714280153420374e-02, -5.804884078625614e-02, -1.733469167569360e-02, -1.656069507340267e-02, -5.892058684639257e-03, -4.891483082009106e-02, -5.892058684639262e-03, -4.891483082009105e-02, -2.816545243447385e-05, -2.325783425994412e-05, -3.312862340229671e-05, -2.667438934712671e-05, -1.448859128365551e-03, -1.215433439850220e-03, -5.916021113747219e-06, -6.219782532036495e-06, -4.281356465084138e-06, -2.682034592632557e-05, -4.281356465084145e-06, -2.682034592632562e-05, -7.780495028366062e-02, -7.785683743815530e-02, -7.776193776906991e-02, -7.781934071584386e-02, -7.780150402863370e-02, -7.785698411081260e-02, -7.776763752950040e-02, -7.781977564669902e-02, -7.778214388574867e-02, -7.783869403000976e-02, -7.778214388574867e-02, -7.783869403000976e-02, -7.328252953100525e-02, -7.329458020195573e-02, -7.345560164978183e-02, -7.352453782078140e-02, -7.325906723208728e-02, -7.256516620956428e-02, -7.345741675159716e-02, -7.275004363824206e-02, -7.272973008107482e-02, -7.441118140696490e-02, -7.272973008107482e-02, -7.441118140696490e-02, -5.648703859645297e-02, -5.685789372245305e-02, -5.485407212455071e-02, -5.461529879582981e-02, -5.877602266483941e-02, -5.224393473976486e-02, -5.552552546232552e-02, -5.139792892931604e-02, -5.278500843783517e-02, -6.104391986995771e-02, -5.278500843783519e-02, -6.104391986995771e-02, -8.805413301952501e-03, -8.531551222334682e-03, -2.274449221572513e-02, -2.236295736166765e-02, -8.330157768797773e-03, -7.006081161285664e-03, -6.807231138402166e-02, -6.813038757184142e-02, -1.381473375341307e-02, -1.130286071055111e-02, -1.381473375341307e-02, -1.130286071055111e-02, -3.713063602937752e-06, -3.253845677826447e-06, -6.296595596071880e-06, -5.969009730848166e-06, -7.134937393586227e-06, -6.015437423558904e-06, -3.908241803022409e-03, -3.828249482829621e-03, -1.159802413160714e-05, -4.302353976795225e-06, -1.159802413160712e-05, -4.302353976795223e-06, -5.186271128360682e-02, -5.132979268836581e-02, -5.351587409778214e-02, -5.290336267011763e-02, -5.300467531483267e-02, -5.240745679104646e-02, -5.251659564112736e-02, -5.196284659875131e-02, -5.276650978747615e-02, -5.219119237010248e-02, -5.276650978747615e-02, -5.219119237010248e-02, -5.071642156284448e-02, -5.032700121614877e-02, -5.403369076302907e-02, -5.320814407724372e-02, -5.491993691603415e-02, -5.404090933260625e-02, -5.444750424770841e-02, -5.386548209141398e-02, -5.479321427032052e-02, -5.416264066863812e-02, -5.479321427032052e-02, -5.416264066863812e-02, -5.599296854224087e-02, -5.549784410729480e-02, -2.967516229018769e-02, -2.908337456859553e-02, -3.674024181482196e-02, -3.540769693674854e-02, -4.643971843087091e-02, -4.559084878530350e-02, -4.150387766835650e-02, -4.147593644514520e-02, -4.150387766835650e-02, -4.147593644514518e-02, -5.254006652729103e-02, -5.122372056682124e-02, -1.183942157506825e-03, -1.158254294803867e-03, -2.404523870817076e-03, -2.162364598383883e-03, -4.667284763785148e-02, -4.434180598209068e-02, -7.118489808903971e-03, -5.951574713737148e-03, -7.118489808903969e-03, -5.951574713737146e-03, -5.857806174974401e-05, -5.242833367849436e-05, -3.658215716671373e-07, -3.829140134862983e-07, -2.134910917767491e-06, -1.772825471444803e-06, -5.938977976431513e-03, -5.629652032903530e-03, -1.114733908301374e-05, -4.339211354914439e-06, -1.114733908301373e-05, -4.339211354914436e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.204184363918652e-10, 0.000000000000000e+00, 1.204199358027573e-10, 1.204179480763175e-10, 0.000000000000000e+00, 1.204200484563310e-10, 1.204159244634872e-10, 0.000000000000000e+00, 1.204146061888133e-10, 1.204153693280497e-10, 0.000000000000000e+00, 1.204208702932431e-10, 1.204143076620010e-10, 0.000000000000000e+00, 1.204197643143429e-10, 1.204143076620010e-10, 0.000000000000000e+00, 1.204197643143429e-10, 8.239183129832011e-07, 0.000000000000000e+00, 8.244225826399800e-07, 8.239733594682700e-07, 0.000000000000000e+00, 8.245177015227545e-07, 8.257661504913221e-07, 0.000000000000000e+00, 8.260031338607321e-07, 8.221048745218261e-07, 0.000000000000000e+00, 8.224432583871040e-07, 8.251150649844538e-07, 0.000000000000000e+00, 8.232122122704214e-07, 8.251150649844538e-07, 0.000000000000000e+00, 8.232122122704214e-07, 1.569342135574242e-03, 0.000000000000000e+00, 1.555188307263706e-03, 1.566639310061170e-03, 0.000000000000000e+00, 1.549211560018028e-03, 1.422117870061547e-03, 0.000000000000000e+00, 1.446665892556691e-03, 1.398409277185564e-03, 0.000000000000000e+00, 1.391994966657183e-03, 1.292052026599100e-03, 0.000000000000000e+00, 1.471358135456357e-03, 1.292052026599100e-03, 0.000000000000000e+00, 1.471358135456357e-03, 2.114197363954421e-01, 0.000000000000000e+00, 1.638237283086489e-01, 2.172514797437790e-01, 0.000000000000000e+00, 1.620023205449069e-01, 9.086459792074321e-04, 0.000000000000000e+00, 7.475304267754800e-04, 2.580505295625906e-01, 0.000000000000000e+00, 2.323038075787843e-01, 3.123365207916254e-02, 0.000000000000000e+00, 2.136244473815581e+00, 3.123365207916256e-02, 0.000000000000000e+00, 2.136244473815581e+00, 5.878937372225493e+00, 0.000000000000000e+00, 3.986806649667066e+00, 6.160954750368168e+00, 0.000000000000000e+00, 3.982658916426250e+00, 1.151811667681016e+00, 0.000000000000000e+00, 8.143317293391481e-01, 5.472414521776195e+00, 0.000000000000000e+00, 5.962013363447559e+00, 1.138534788722542e+00, 0.000000000000000e+00, 7.331299568594163e+01, 1.138534788722545e+00, 0.000000000000000e+00, 7.331299568594180e+01, 1.483138999452589e-07, 0.000000000000000e+00, 1.486212102687593e-07, 1.485826983821815e-07, 0.000000000000000e+00, 1.488884160956132e-07, 1.483241435185831e-07, 0.000000000000000e+00, 1.486307819352636e-07, 1.485598299456649e-07, 0.000000000000000e+00, 1.488683304739495e-07, 1.484525472405958e-07, 0.000000000000000e+00, 1.487566487005111e-07, 1.484525472405958e-07, 0.000000000000000e+00, 1.487566487005111e-07, 7.630641489284731e-06, 0.000000000000000e+00, 7.633832605047812e-06, 7.497064706556279e-06, 0.000000000000000e+00, 7.513045783335808e-06, 7.529504096771315e-06, 0.000000000000000e+00, 7.492850875528976e-06, 7.422441566452914e-06, 0.000000000000000e+00, 7.379786615076817e-06, 7.556963048618931e-06, 0.000000000000000e+00, 7.683185609781264e-06, 7.556963048618931e-06, 0.000000000000000e+00, 7.683185609781264e-06, 4.056909577739719e-03, 0.000000000000000e+00, 4.158980375169338e-03, 4.160052456460887e-03, 0.000000000000000e+00, 4.162007543018933e-03, 6.371510854908370e-03, 0.000000000000000e+00, 4.762644364260020e-03, 7.881990046589755e-03, 0.000000000000000e+00, 5.841630622250381e-03, 3.222079855033296e-03, 0.000000000000000e+00, 5.028942045182090e-03, 3.222079855033296e-03, 0.000000000000000e+00, 5.028942045182090e-03, 3.407753902374628e-01, 0.000000000000000e+00, 3.247595424645067e-01, 1.091381829586800e-01, 0.000000000000000e+00, 1.052858824042356e-01, 4.556059514712877e-01, 0.000000000000000e+00, 3.213465183988420e-01, 2.387242588601393e-05, 0.000000000000000e+00, 2.397491719637584e-05, 3.953639812584870e-01, 0.000000000000000e+00, 3.171476281684714e-01, 3.953639812584870e-01, 0.000000000000000e+00, 3.171476281684714e-01, 9.733905392044342e+00, 0.000000000000000e+00, 6.929832096806360e+00, 7.211539511381064e+00, 0.000000000000000e+00, 6.214204707479730e+00, 4.560845818934791e+01, 0.000000000000000e+00, 3.429245267578568e+01, 7.446420470475521e-01, 0.000000000000000e+00, 6.988907908892318e-01, 5.043703957256830e+01, 0.000000000000000e+00, 6.868521809087231e+00, 5.043703957256815e+01, 0.000000000000000e+00, 6.868521809087222e+00, 6.922328322467503e-03, 0.000000000000000e+00, 6.700379561226762e-03, 6.240944836228151e-03, 0.000000000000000e+00, 6.043711413497864e-03, 6.450364255548567e-03, 0.000000000000000e+00, 6.246313718097977e-03, 6.646571676135409e-03, 0.000000000000000e+00, 6.433781184452409e-03, 6.545714315837840e-03, 0.000000000000000e+00, 6.337388564621108e-03, 6.545714315837840e-03, 0.000000000000000e+00, 6.337388564621108e-03, 8.202874918578514e-03, 0.000000000000000e+00, 7.965642496800075e-03, 6.605771417691276e-03, 0.000000000000000e+00, 6.395243466583584e-03, 6.795051508431389e-03, 0.000000000000000e+00, 6.576532389065508e-03, 7.120395057770765e-03, 0.000000000000000e+00, 6.916118531651450e-03, 6.951926486392524e-03, 0.000000000000000e+00, 6.742072224006473e-03, 6.951926486392524e-03, 0.000000000000000e+00, 6.742072224006473e-03, 3.307599836022547e-03, 0.000000000000000e+00, 3.281858638208094e-03, 6.322883453344301e-02, 0.000000000000000e+00, 6.074034098543288e-02, 4.553563813516225e-02, 0.000000000000000e+00, 4.272296355546844e-02, 2.837804228600547e-02, 0.000000000000000e+00, 2.716376178739791e-02, 3.574193168616992e-02, 0.000000000000000e+00, 3.605008892036355e-02, 3.574193168616994e-02, 0.000000000000000e+00, 3.605008892036354e-02, 9.499574585133610e-03, 0.000000000000000e+00, 9.042742550991528e-03, 9.484465731451325e-01, 0.000000000000000e+00, 9.084712994514136e-01, 7.944265845610577e-01, 0.000000000000000e+00, 6.518571278085848e-01, 4.241982504148744e-02, 0.000000000000000e+00, 3.777684851385878e-02, 7.299757574705469e-01, 0.000000000000000e+00, 5.755579222146024e-01, 7.299757574705470e-01, 0.000000000000000e+00, 5.755579222146027e-01, 3.693822723046603e+00, 0.000000000000000e+00, 2.991544662742825e+00, 3.916234309551272e+01, 0.000000000000000e+00, 5.780812654195550e+01, 2.199213902002076e+01, 0.000000000000000e+00, 1.566874714225604e+01, 7.318477676382353e-01, 0.000000000000000e+00, 6.511272716668653e-01, 8.433267992979040e+01, 0.000000000000000e+00, 8.791522422994461e+00, 8.433267992979063e+01, 0.000000000000000e+00, 8.791522422994483e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
