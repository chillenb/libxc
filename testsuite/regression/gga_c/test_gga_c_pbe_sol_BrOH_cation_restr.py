
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_sol_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.169595064838960e-02, -6.169681455617274e-02, -6.169927198515557e-02, -6.168644826855633e-02, -6.169336391560874e-02, -6.169336391560874e-02, -5.082214354138720e-02, -5.082731601661273e-02, -5.094713325146954e-02, -5.073944805188300e-02, -5.082839375662507e-02, -5.082839375662507e-02, -3.435058374838284e-02, -3.411915645799582e-02, -2.841297134814232e-02, -2.869261464299171e-02, -2.884103182475404e-02, -2.884103182475404e-02, -9.486321175543336e-03, -1.022468056132577e-02, -3.716059846264418e-02, -3.427154190750881e-03, -5.677762998037838e-03, -5.677762998037838e-03, -1.137375951591393e-08, -1.519968913994321e-08, -1.698174504218138e-05, -8.126950887235374e-10, -2.989327498501854e-09, -2.989327498501854e-09, -6.824054366381209e-02, -6.844406661058013e-02, -6.824893426528152e-02, -6.842860330633514e-02, -6.834410161952489e-02, -6.834410161952489e-02, -2.850927323843541e-02, -2.903280051395446e-02, -2.734039501875789e-02, -2.779298854062401e-02, -2.938198855423653e-02, -2.938198855423653e-02, -4.445960470736950e-02, -5.868761593155279e-02, -4.188631567476080e-02, -5.447146053801746e-02, -4.615622476758415e-02, -4.615622476758415e-02, -7.473159526851622e-04, -5.271487299734824e-03, -5.872637269355343e-04, -7.717718866035961e-02, -1.887273917198009e-03, -1.887273917198009e-03, -3.176682358151721e-10, -8.604066969953694e-10, -1.535616490732271e-09, -1.558441552044525e-04, -1.712795572698814e-09, -1.712795572698814e-09, -6.150473798742070e-02, -5.749112641053076e-02, -5.885036852017291e-02, -6.001719849128225e-02, -5.942892531798777e-02, -5.942892531798777e-02, -6.213754750768930e-02, -3.338567726534015e-02, -4.031067239576480e-02, -4.826147386547381e-02, -4.415276464215226e-02, -4.415276464215226e-02, -5.888237841972589e-02, -8.882050309382139e-03, -1.435952815277418e-02, -2.900038172420017e-02, -2.111761019453746e-02, -2.111761019453746e-02, -3.249175144393377e-02, -1.279654527240382e-05, -4.864388436418506e-05, -3.343082242378179e-02, -4.994853911026810e-04, -4.994853911026843e-04, -4.419897172413881e-08, -8.045012406856764e-12, -1.345574596266159e-10, -3.831370366131277e-04, -1.503540251140127e-09, -1.503540253308532e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_sol_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.393511425780235e-01, -1.393520693247692e-01, -1.393547189630379e-01, -1.393409616821585e-01, -1.393483790923588e-01, -1.393483790923588e-01, -1.189849549115453e-01, -1.189896715362761e-01, -1.190989507441885e-01, -1.189109788080514e-01, -1.189908693365078e-01, -1.189908693365078e-01, -8.484347569087637e-02, -8.466612921604333e-02, -7.924772377583077e-02, -7.964679474036052e-02, -7.978311808713512e-02, -7.978311808713512e-02, -3.715675976709726e-02, -3.902405372066819e-02, -8.921846126820727e-02, -1.691551814246710e-02, -2.548939536538430e-02, -2.548939536538427e-02, -7.422084572080199e-08, -9.913804513479117e-08, -1.072932832250295e-04, -5.326986026242371e-09, -1.955982474709109e-08, -1.955982474640216e-08, -1.367496950519870e-01, -1.368891068409074e-01, -1.367554760845813e-01, -1.368785597568620e-01, -1.368207175032869e-01, -1.368207175032869e-01, -8.815574589343521e-02, -8.903289112327653e-02, -8.619469498860033e-02, -8.698462362230186e-02, -8.958125343529404e-02, -8.958125343529404e-02, -8.493519543732143e-02, -8.145549563791321e-02, -8.289770884440663e-02, -7.945282428481108e-02, -8.519754670962126e-02, -8.519754670962126e-02, -4.280805780784044e-03, -2.436302981903186e-02, -3.407955703508797e-03, -1.167538112681925e-01, -1.002963259831016e-02, -1.002963259831016e-02, -2.085840912461823e-09, -5.640518974829310e-09, -1.008287751310157e-08, -9.494799665791566e-04, -1.123321127214031e-08, -1.123321126611847e-08, -7.484147523041201e-02, -7.865984419815381e-02, -7.748565535603298e-02, -7.638107077065978e-02, -7.694915679224940e-02, -7.694915679224940e-02, -7.261426241833006e-02, -7.878910054349186e-02, -8.150939920380698e-02, -8.127754376798632e-02, -8.181227900996606e-02, -8.181227900996606e-02, -8.341711568780340e-02, -3.649750297653336e-02, -5.031863433953811e-02, -7.001395998798456e-02, -6.178708797658363e-02, -6.178708797658362e-02, -7.676922402974203e-02, -8.105697077395419e-05, -3.033232792096829e-04, -7.019882504607509e-02, -2.918197968892883e-03, -2.918197968892917e-03, -2.874664342903945e-07, -5.312568220467237e-11, -8.853101718039370e-10, -2.265280042739660e-03, -9.865829394950333e-09, -9.865829396633922e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_sol_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.962116184365218e-10, 1.962148408064365e-10, 1.962188014197211e-10, 1.961710826990806e-10, 1.961975562975035e-10, 1.961975562975035e-10, 1.080141894174071e-06, 1.080339685846181e-06, 1.084798190220946e-06, 1.076071516773370e-06, 1.080252484833486e-06, 1.080252484833486e-06, 1.751250606770245e-03, 1.742134154479526e-03, 1.499221578443030e-03, 1.461513207223159e-03, 1.485633470061397e-03, 1.485633470061397e-03, 2.021443070851978e-01, 2.087983132403996e-01, 9.396399879663183e-04, 1.816049072303345e-01, 2.129743799473642e-01, 2.129743799473641e-01, 8.955489672418590e-03, 1.055020864141142e-02, 5.323110118182873e-02, 3.165644287245402e-03, 6.615649567218798e-03, 6.615649567900460e-03, 2.723931363333472e-07, 2.740312795776248e-07, 2.724583808980188e-07, 2.739043923052118e-07, 2.732265817124752e-07, 2.732265817124752e-07, 6.898142762208967e-06, 6.848794096984534e-06, 6.634964397231541e-06, 6.594069209589408e-06, 7.001597955372625e-06, 7.001597955372625e-06, 5.083114876313912e-03, 5.627304816964835e-03, 6.698021233548748e-03, 8.750708722072646e-03, 5.013693472759081e-03, 5.013693472759081e-03, 1.181895240821957e-01, 8.611762770619918e-02, 1.220291745722130e-01, 4.971015631493202e-05, 2.097174970901191e-01, 2.097174970901191e-01, 3.092182675475082e-03, 3.891755227576366e-03, 3.893550767203049e-02, 1.247344067967812e-01, 1.694487721966109e-02, 1.694487721088608e-02, 8.963333412859131e-03, 8.074474167881708e-03, 8.364687753097295e-03, 8.622784836123857e-03, 8.491679869889105e-03, 8.491679869889105e-03, 1.042974682601409e-02, 7.514657494196444e-03, 8.073521817247532e-03, 8.820269501353756e-03, 8.438662372334911e-03, 8.438662372334911e-03, 4.515901966157134e-03, 5.774298383983048e-02, 4.668716778855016e-02, 3.284871674189813e-02, 4.103861766679163e-02, 4.103861766679164e-02, 1.076275513062131e-02, 4.361106055933914e-02, 6.605596085744300e-02, 4.825727513217191e-02, 2.093791607542390e-01, 2.093791607542401e-01, 1.111865175959997e-02, 4.220044909696954e-03, 5.309577237370695e-03, 1.936340036092347e-01, 2.110061274707496e-02, 2.110061274543444e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
