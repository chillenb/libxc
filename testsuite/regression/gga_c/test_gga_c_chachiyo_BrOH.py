
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_chachiyo_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.963900710602029e-02, -4.963950357413236e-02, -4.964100746165965e-02, -4.963289270286932e-02, -4.963927486848961e-02, -4.963927486848961e-02, -4.081195236046352e-02, -4.081523369705126e-02, -4.090566045750098e-02, -4.075041140298736e-02, -4.081364686645854e-02, -4.081364686645854e-02, -2.629835619234414e-02, -2.611170526538644e-02, -2.137270041057745e-02, -2.162295694986461e-02, -2.623101964268865e-02, -2.623101964268865e-02, -1.009818739040644e-02, -1.074976098257571e-02, -3.244474702282912e-02, -3.137660972876826e-03, -1.029937573968778e-02, -1.029937573968778e-02, -8.517731933320895e-19, -6.191887814585023e-18, -4.969115345161736e-06, -1.468267223162889e-42, -4.949880340068338e-18, -4.949880340068338e-18, -5.520548828249298e-02, -5.538576417399779e-02, -5.522344948536543e-02, -5.536361950231822e-02, -5.529836539610591e-02, -5.529836539610591e-02, -2.400486615830699e-02, -2.435413001692453e-02, -2.353755404429756e-02, -2.380649978112247e-02, -2.486975484999837e-02, -2.486975484999837e-02, -3.778490451204479e-02, -5.459261862206004e-02, -3.644556985088022e-02, -4.932938376423936e-02, -4.010198140911873e-02, -4.010198140911873e-02, -7.578836752330262e-04, -5.513486194664480e-03, -8.332088219333046e-04, -6.955527056788434e-02, -1.776014637414058e-03, -1.776014637414058e-03, -5.774327654210052e-44, -5.295198740069833e-38, -5.674016327783711e-46, -8.228878770981596e-05, -3.802432859650250e-40, -3.802432859650220e-40, -5.975100730457361e-02, -5.462960411601851e-02, -5.637255789944742e-02, -5.778956887300632e-02, -5.707330278879822e-02, -5.707330278879822e-02, -5.995313954809186e-02, -2.868759146944058e-02, -3.527550080863833e-02, -4.303935388200782e-02, -3.894606651988063e-02, -3.894606651988063e-02, -5.458715610272258e-02, -8.828869328797733e-03, -1.340259928869729e-02, -2.443639016456368e-02, -1.847635358688523e-02, -1.847635358688523e-02, -2.717019004838244e-02, -1.623273416362658e-06, -2.868878218375529e-05, -2.874011459979961e-02, -4.498607957386841e-04, -4.498607957386851e-04, -1.134212867461756e-16, -2.177040924578176e-154, -3.592482283668276e-75, -4.436918547554659e-04, -6.533891074519368e-46, -6.533891074518214e-46])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_chachiyo_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.009878800197237e-01, -1.009887828463304e-01, -1.009914836639082e-01, -1.009767275121018e-01, -1.009883672297727e-01, -1.009883672297727e-01, -9.452238948854486e-02, -9.452818506699237e-02, -9.468764488745531e-02, -9.441308629662698e-02, -9.452536975031561e-02, -9.452536975031561e-02, -6.940766573547523e-02, -6.911237247347606e-02, -6.080242800995304e-02, -6.128677996397790e-02, -6.930139247312617e-02, -6.930139247312617e-02, -3.571624406954243e-02, -3.718961303895867e-02, -7.908257580362257e-02, -1.515439041906235e-02, -3.617774731991602e-02, -3.617774731991602e-02, -3.263919270348493e-17, -2.266774580794983e-16, -5.498318852327101e-05, -1.202092271365756e-40, -1.826582551314627e-16, -1.826582551314627e-16, -1.171804275791058e-01, -1.174480080090807e-01, -1.172071289104598e-01, -1.174151894507739e-01, -1.173184012991196e-01, -1.173184012991196e-01, -6.370967306996099e-02, -6.444441401241821e-02, -6.268904474126615e-02, -6.325915117214836e-02, -6.556285393084230e-02, -6.556285393084230e-02, -7.977533165932038e-02, -8.085247666058400e-02, -7.809911790258633e-02, -8.004998357750663e-02, -8.155020629418981e-02, -8.155020629418981e-02, -4.713560571080149e-03, -2.314715712124001e-02, -5.136163591094620e-03, -1.169633585451779e-01, -9.632239209524933e-03, -9.632239209524933e-03, -4.891885415121505e-42, -3.909935081278192e-36, -5.350540318909164e-44, -6.980349508440965e-04, -3.029378214839243e-38, -3.029378214839219e-38, -7.386837813113234e-02, -7.841785414116578e-02, -7.708465021910986e-02, -7.583691030026213e-02, -7.648590790458944e-02, -7.648590790458944e-02, -7.192323764081505e-02, -7.054944830580889e-02, -7.659514531615264e-02, -7.971424997943886e-02, -7.859419749797494e-02, -7.859419749797494e-02, -8.279580177334164e-02, -3.271748434005727e-02, -4.369295822725276e-02, -6.219728368949804e-02, -5.340742642557070e-02, -5.340742642557070e-02, -6.783657902755461e-02, -1.938063933023162e-05, -2.688976276294923e-04, -6.488360126135308e-02, -3.086237312841216e-03, -3.086237312841223e-03, -3.787430999615525e-15, -6.115269615123159e-152, -5.141223108459945e-73, -3.076988829969307e-03, -6.044298864320048e-44, -6.044298864318990e-44])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_chachiyo_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.289168826186253e-10, 1.289197218427136e-10, 1.289247941466497e-10, 1.288784634274572e-10, 1.289184433964931e-10, 1.289184433964931e-10, 8.509941622551511e-07, 8.511659003489089e-07, 8.557264584507141e-07, 8.469854083534060e-07, 8.510642530090975e-07, 8.510642530090975e-07, 1.435194027153628e-03, 1.422513706230140e-03, 1.100007749920441e-03, 1.081133093347058e-03, 1.430650743346909e-03, 1.430650743346909e-03, 1.948211815959250e-01, 2.008806181046503e-01, 8.791149441683544e-04, 1.759080940844764e-01, 1.968918620222014e-01, 1.968918620222014e-01, 1.157159976028424e-12, 7.031925074123193e-12, 1.823191823939662e-02, 3.000118127523241e-35, 5.962878405551832e-12, 5.962878405551832e-12, 2.496362317095907e-07, 2.517176969838036e-07, 2.498418497923958e-07, 2.514601595624286e-07, 2.507089073503360e-07, 2.507089073503360e-07, 4.495897240197508e-06, 4.484980623498879e-06, 4.354144328825470e-06, 4.346076380971420e-06, 4.681616355996173e-06, 4.681616355996173e-06, 5.804121200398680e-03, 7.939434024243736e-03, 7.006179019899365e-03, 1.019417162031719e-02, 5.413756999253886e-03, 5.413756999253886e-03, 1.213590693554618e-01, 7.273981195437867e-02, 1.490125537365607e-01, 6.326729556975322e-05, 1.838969193627556e-01, 1.838969193627556e-01, 1.399405960939081e-36, 7.593152245318192e-31, 4.242042917522228e-38, 8.976950826241660e-02, 9.518557987133909e-33, 9.518557987133829e-33, 1.209070040494738e-02, 1.042712562301735e-02, 1.097952997746361e-02, 1.143928583499485e-02, 1.120576065837087e-02, 1.120576065837087e-02, 1.420737442993996e-02, 6.982690860442719e-03, 8.309405424103055e-03, 1.003065986107712e-02, 9.123637545019514e-03, 9.123637545019518e-03, 6.326591514121645e-03, 4.656245137878238e-02, 3.836192138136651e-02, 3.127236550051753e-02, 3.553127208264682e-02, 3.553127208264683e-02, 1.054951370398988e-02, 7.302546290960208e-03, 4.269802768090924e-02, 5.495187220673271e-02, 1.894038851610613e-01, 1.894038851610619e-01, 7.252847640465721e-11, 6.914926083636850e-145, 8.272401241622741e-67, 2.421079721399900e-01, 3.740694258801189e-38, 3.740694258800547e-38])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
