
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_chachiyo_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.964016697153183e-02, -4.964073732302168e-02, -4.964236502412307e-02, -4.963389899003068e-02, -4.963846370755226e-02, -4.963846370755226e-02, -4.081588167754725e-02, -4.081995710758558e-02, -4.091444147374811e-02, -4.075077100739383e-02, -4.082079885258720e-02, -4.082079885258720e-02, -2.757131867701092e-02, -2.737040034207097e-02, -2.263170726469630e-02, -2.285816080756337e-02, -2.283736468223522e-02, -2.283736468223522e-02, -7.352486180118351e-03, -7.921804440130025e-03, -2.987340840022465e-02, -2.600406700758495e-03, -2.340962936129710e-03, -2.340962936129709e-03, -1.406097294386729e-35, -1.688149714759158e-33, -1.908903734370303e-07, -3.136742211811755e-65, -9.024065937792131e-56, -9.024065937792451e-56, -5.522321162062190e-02, -5.540932949414274e-02, -5.523087176372423e-02, -5.539516871182229e-02, -5.531785582647676e-02, -5.531785582647676e-02, -2.413787945592005e-02, -2.449735210669338e-02, -2.336324542199786e-02, -2.367162854989381e-02, -2.472592380891240e-02, -2.472592380891240e-02, -3.764672843135078e-02, -5.419872118739084e-02, -3.513526971005584e-02, -4.959802052161931e-02, -3.932615871982589e-02, -3.932615871982593e-02, -4.379032419353755e-04, -4.192867805210410e-03, -3.088446237515819e-04, -6.951155056439687e-02, -1.312259598162536e-03, -1.312259598162536e-03, -9.866383387606455e-85, -9.341789243390916e-66, -1.792815324287914e-72, -3.413533026265071e-05, -5.537836071669132e-67, -5.537836071669237e-67, -5.872688187500881e-02, -5.329259513467737e-02, -5.509906965620799e-02, -5.667766460621738e-02, -5.587860837725910e-02, -5.587860837725910e-02, -5.989955833614684e-02, -2.703676486619485e-02, -3.370481463924630e-02, -4.230075282609688e-02, -3.772899035631159e-02, -3.772899035631159e-02, -5.408092792022214e-02, -7.069627261414394e-03, -1.130533297335571e-02, -2.349307824108395e-02, -1.669980048654036e-02, -1.669980048654036e-02, -2.633029599552549e-02, -8.891345162487666e-08, -3.345245124171097e-06, -2.788343284020621e-02, -2.230696610985082e-04, -2.230696610985078e-04, -1.964692899310205e-25, -2.298502280392340e-253, -1.152042654544080e-115, -1.507261505957436e-04, -1.286795166337356e-70, -1.286795166337042e-70]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_chachiyo_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.009897235412888e-01, -1.009899967002022e-01, -1.009906669860280e-01, -1.009911276061809e-01, -1.009940776346030e-01, -1.009935683746477e-01, -1.009776203577940e-01, -1.009792360748439e-01, -1.009853819683734e-01, -1.009880855393084e-01, -1.009853819683734e-01, -1.009880855393084e-01, -9.452813821088582e-02, -9.453026120375695e-02, -9.453518649973031e-02, -9.453761085616268e-02, -9.470468371749206e-02, -9.470147654884795e-02, -9.441469194786466e-02, -9.441250993994561e-02, -9.456693688053110e-02, -9.450872456835349e-02, -9.456693688053110e-02, -9.450872456835349e-02, -7.154459891553176e-02, -7.116647664420352e-02, -7.128685404746800e-02, -7.082412781625388e-02, -6.286754056106741e-02, -6.346396180933921e-02, -6.368177185837381e-02, -6.349379173551989e-02, -6.095786726386829e-02, -6.664496589448318e-02, -6.095786726386829e-02, -6.664496589448318e-02, -2.943181253281119e-02, -2.813207530932684e-02, -3.112837716162341e-02, -2.957515735478593e-02, -7.725667514851509e-02, -7.386319008389775e-02, -1.311611868011130e-02, -1.289716034351413e-02, -1.063917794767526e-02, -2.143220828061463e-02, -1.063917794767526e-02, -2.143220828061462e-02, -9.981833619985593e-34, -9.069789900010591e-34, -1.143129653130731e-31, -1.026455292286396e-31, -2.706832120808768e-06, -2.502950535431696e-06, -3.682586614310318e-63, -3.786623871734039e-63, -7.975368893687233e-54, -1.768797532703507e-53, -7.975368893687516e-54, -1.768797532703570e-53, -1.171838619100389e-01, -1.172294290852786e-01, -1.174594010086792e-01, -1.175062409496013e-01, -1.171948226650779e-01, -1.172412407668464e-01, -1.174389522658586e-01, -1.174847330474628e-01, -1.173239921126042e-01, -1.173704300978097e-01, -1.173239921126042e-01, -1.173704300978097e-01, -6.399452902296607e-02, -6.399998665257364e-02, -6.473691899103935e-02, -6.476659566893939e-02, -6.239935304968480e-02, -6.221633556639534e-02, -6.305883171926700e-02, -6.286655055457382e-02, -6.501477538896774e-02, -6.549582724289550e-02, -6.501477538896774e-02, -6.549582724289550e-02, -7.977056198189994e-02, -8.004834706006758e-02, -8.158357425131660e-02, -8.153019654157256e-02, -7.894323729853815e-02, -7.532694035438450e-02, -8.112904676678931e-02, -7.749441644567322e-02, -7.839202752335869e-02, -8.385176184481613e-02, -7.839202752335875e-02, -8.385176184481619e-02, -2.940393620552752e-03, -2.904110890130013e-03, -1.876899065554147e-02, -1.865152512353445e-02, -2.247575922971920e-03, -2.098572567243929e-03, -1.169602881921675e-01, -1.170368268408542e-01, -7.784281914758126e-03, -7.248866879466366e-03, -7.784281914758126e-03, -7.248866879466366e-03, -1.574238757710277e-82, -1.476720316928195e-82, -1.144364196555419e-63, -1.116459036855631e-63, -2.760011781533783e-70, -2.535683342715344e-70, -3.137516825520901e-04, -3.111937481188583e-04, -9.938440046934345e-65, -6.240331609829562e-65, -9.938440046934529e-65, -6.240331609829679e-65, -7.442178610058511e-02, -7.397724722377155e-02, -7.891584893164319e-02, -7.847187424590660e-02, -7.766343799271795e-02, -7.721752096189881e-02, -7.637015027402497e-02, -7.592683562467653e-02, -7.704759476710372e-02, -7.660298958384254e-02, -7.704759476710372e-02, -7.660298958384254e-02, -7.162129885387515e-02, -7.124482643465166e-02, -6.865839104013130e-02, -6.827786622756599e-02, -7.551156300030665e-02, -7.508084255632166e-02, -7.951463945181338e-02, -7.914338084269715e-02, -7.802188325961501e-02, -7.764493141569867e-02, -7.802188325961501e-02, -7.764493141569867e-02, -8.360700630028196e-02, -8.341246839291455e-02, -2.787961023044339e-02, -2.767759726345993e-02, -3.920781438175582e-02, -3.872394860516993e-02, -6.127479804737532e-02, -6.085797357057211e-02, -5.031358636073624e-02, -5.033546591365267e-02, -5.031358636073623e-02, -5.033546591365266e-02, -6.717364167521125e-02, -6.658890964213765e-02, -1.265743039280736e-06, -1.253210064235004e-06, -3.789890354805491e-05, -3.618042040781436e-05, -6.515832355376876e-02, -6.395928293164235e-02, -1.732910603433632e-03, -1.617352326151079e-03, -1.732910603433629e-03, -1.617352326151077e-03, -9.751198928857513e-24, -9.222084776600457e-24, -1.054365753657436e-250, -1.050333772505029e-250, -2.605250295807522e-113, -2.356156764668002e-113, -1.196659739291962e-03, -1.172041944358062e-03, -2.361814669920167e-68, -1.556643737666005e-68, -2.361814669919594e-68, -1.556643737665628e-68]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_chachiyo_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.289101127115361e-10, 2.578202254230723e-10, 1.289101127115361e-10, 1.289133739866047e-10, 2.578267479732093e-10, 1.289133739866047e-10, 1.289191286091060e-10, 2.578382572182120e-10, 1.289191286091060e-10, 1.288707992718501e-10, 2.577415985437002e-10, 1.288707992718501e-10, 1.288973615704213e-10, 2.577947231408425e-10, 1.288973615704213e-10, 1.288973615704213e-10, 2.577947231408425e-10, 1.288973615704213e-10, 8.510090931889029e-07, 1.702018186377806e-06, 8.510090931889029e-07, 8.512243380931053e-07, 1.702448676186211e-06, 8.512243380931053e-07, 8.561165684160956e-07, 1.712233136832191e-06, 8.561165684160956e-07, 8.468282597720940e-07, 1.693656519544188e-06, 8.468282597720940e-07, 8.511638950729754e-07, 1.702327790145951e-06, 8.511638950729754e-07, 8.511638950729754e-07, 1.702327790145951e-06, 8.511638950729754e-07, 1.526846989604480e-03, 3.053693979208961e-03, 1.526846989604480e-03, 1.513340687950184e-03, 3.026681375900368e-03, 1.513340687950184e-03, 1.192444699402092e-03, 2.384889398804185e-03, 1.192444699402092e-03, 1.165674318661096e-03, 2.331348637322192e-03, 1.165674318661096e-03, 1.184491144641404e-03, 2.368982289282808e-03, 1.184491144641404e-03, 1.184491144641404e-03, 2.368982289282808e-03, 1.184491144641404e-03, 1.551769864578419e-01, 3.103539729156839e-01, 1.551769864578419e-01, 1.613286526226696e-01, 3.226573052453391e-01, 1.613286526226696e-01, 8.283234174875697e-04, 1.656646834975139e-03, 8.283234174875697e-04, 1.371577442955032e-01, 2.743154885910064e-01, 1.371577442955032e-01, 1.044454867072652e-01, 2.088909734145303e-01, 1.044454867072652e-01, 1.044454867072652e-01, 2.088909734145303e-01, 1.044454867072652e-01, 1.035841994085028e-28, 2.071683988170057e-28, 1.035841994085028e-28, 1.045694025031640e-26, 2.091388050063279e-26, 1.045694025031640e-26, 1.279299465646614e-03, 2.558598931293228e-03, 1.279299465646614e-03, 1.912333037392361e-57, 3.824666074784722e-57, 1.912333037392361e-57, 2.856033111360441e-48, 5.712066222720882e-48, 2.856033111360441e-48, 2.856033111360547e-48, 5.712066222721093e-48, 2.856033111360547e-48, 2.493135959257594e-07, 4.986271918515188e-07, 2.493135959257594e-07, 2.514593427000676e-07, 5.029186854001352e-07, 2.514593427000676e-07, 2.493997062129838e-07, 4.987994124259677e-07, 2.493997062129838e-07, 2.512936993251880e-07, 5.025873986503760e-07, 2.512936993251880e-07, 2.504042712133420e-07, 5.008085424266840e-07, 2.504042712133420e-07, 2.504042712133420e-07, 5.008085424266840e-07, 2.504042712133420e-07, 4.529011903340660e-06, 9.058023806681319e-06, 4.529011903340660e-06, 4.516860955059811e-06, 9.033721910119623e-06, 4.516860955059811e-06, 4.307735213502646e-06, 8.615470427005293e-06, 4.307735213502646e-06, 4.296704830352699e-06, 8.593409660705399e-06, 4.296704830352699e-06, 4.635545141032118e-06, 9.271090282064236e-06, 4.635545141032118e-06, 4.635545141032118e-06, 9.271090282064236e-06, 4.635545141032118e-06, 5.461151242926978e-03, 1.092230248585396e-02, 5.461151242926978e-03, 7.423498853751665e-03, 1.484699770750333e-02, 7.423498853751665e-03, 7.021779633496649e-03, 1.404355926699330e-02, 7.021779633496649e-03, 1.122736782925408e-02, 2.245473565850815e-02, 1.122736782925408e-02, 5.517386991234936e-03, 1.103477398246987e-02, 5.517386991234936e-03, 5.517386991234938e-03, 1.103477398246988e-02, 5.517386991234938e-03, 7.971318774436750e-02, 1.594263754887350e-01, 7.971318774436750e-02, 6.422847433170105e-02, 1.284569486634021e-01, 6.422847433170105e-02, 7.692239391104730e-02, 1.538447878220946e-01, 7.692239391104730e-02, 6.281576948104818e-05, 1.256315389620964e-04, 6.281576948104818e-05, 1.549443425738169e-01, 3.098886851476338e-01, 1.549443425738169e-01, 1.549443425738169e-01, 3.098886851476338e-01, 1.549443425738169e-01, 1.925533375056638e-76, 3.851066750113277e-76, 1.925533375056638e-76, 6.751457648326821e-58, 1.350291529665364e-57, 6.751457648326821e-58, 9.286010099222899e-64, 1.857202019844580e-63, 9.286010099222899e-64, 4.112397865398443e-02, 8.224795730796886e-02, 4.112397865398443e-02, 9.852752490243692e-59, 1.970550498048738e-58, 9.852752490243692e-59, 9.852752490243867e-59, 1.970550498048773e-58, 9.852752490243867e-59, 1.259014508194184e-02, 2.518029016388368e-02, 1.259014508194184e-02, 1.072804868396544e-02, 2.145609736793089e-02, 1.072804868396544e-02, 1.133065596011557e-02, 2.266131192023113e-02, 1.133065596011557e-02, 1.187103194371352e-02, 2.374206388742704e-02, 1.187103194371352e-02, 1.159600345163505e-02, 2.319200690327010e-02, 1.159600345163505e-02, 1.159600345163505e-02, 2.319200690327010e-02, 1.159600345163505e-02, 1.490150727889611e-02, 2.980301455779222e-02, 1.490150727889611e-02, 6.936390876855796e-03, 1.387278175371159e-02, 6.936390876855796e-03, 8.348297078905834e-03, 1.669659415781167e-02, 8.348297078905834e-03, 1.036356224772250e-02, 2.072712449544499e-02, 1.036356224772250e-02, 9.290340447471825e-03, 1.858068089494365e-02, 9.290340447471825e-03, 9.290340447471825e-03, 1.858068089494365e-02, 9.290340447471825e-03, 5.893626035411444e-03, 1.178725207082289e-02, 5.893626035411444e-03, 4.270820071697713e-02, 8.541640143395425e-02, 4.270820071697713e-02, 3.568607388432700e-02, 7.137214776865400e-02, 3.568607388432700e-02, 3.049921429795462e-02, 6.099842859590923e-02, 3.049921429795462e-02, 3.401888867236948e-02, 6.803777734473897e-02, 3.401888867236948e-02, 3.401888867236950e-02, 6.803777734473899e-02, 3.401888867236950e-02, 9.977538596596737e-03, 1.995507719319347e-02, 9.977538596596737e-03, 6.702322131206334e-04, 1.340464426241267e-03, 6.702322131206334e-04, 8.026286406623362e-03, 1.605257281324672e-02, 8.026286406623362e-03, 4.935036115838797e-02, 9.870072231677594e-02, 4.935036115838797e-02, 1.200363709268834e-01, 2.400727418537668e-01, 1.200363709268834e-01, 1.200363709268833e-01, 2.400727418537666e-01, 1.200363709268833e-01, 3.380977028449698e-19, 6.761954056899396e-19, 3.380977028449698e-19, 6.930904718409336e-243, 1.386180943681867e-242, 6.930904718409336e-243, 1.265857649903717e-106, 2.531715299807433e-106, 1.265857649903717e-106, 1.014515001208045e-01, 2.029030002416090e-01, 1.014515001208045e-01, 3.462770559613217e-62, 6.925541119226435e-62, 3.462770559613217e-62, 3.462770559612392e-62, 6.925541119224783e-62, 3.462770559612392e-62]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
