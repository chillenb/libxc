
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zvpbesol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbesol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.169595064830757e-02, -6.169681455593944e-02, -6.169927198487023e-02, -6.168644826568534e-02, -6.169336390757034e-02, -6.169336390757034e-02, -5.082214353277732e-02, -5.082731600538517e-02, -5.094713323183037e-02, -5.073944804278533e-02, -5.082838728349753e-02, -5.082838728349753e-02, -3.435003724273513e-02, -3.411833578835866e-02, -2.841150533953582e-02, -2.869246992979939e-02, -2.871784963217226e-02, -2.871784963217226e-02, -9.467381575462282e-03, -1.019876862962957e-02, -3.712049633309503e-02, -3.426113369323160e-03, -1.933757607250257e-02, -1.933757607250258e-02, -9.130266837088872e-06, -1.517666825805435e-05, -2.221736082085556e-05, -3.391263716460285e-08, -2.448489658573271e-03, -2.448489658573271e-03, -6.824054035036850e-02, -6.844406311175101e-02, -6.824893082702610e-02, -6.842859996378503e-02, -6.834409817937842e-02, -6.834409817937842e-02, -2.850927316134327e-02, -2.903279824620003e-02, -2.734030776217865e-02, -2.779289265497500e-02, -2.938139413575969e-02, -2.938139413575969e-02, -4.445931963286254e-02, -5.868760620081129e-02, -4.183574080642870e-02, -5.442364853714002e-02, -4.604841120166962e-02, -4.604841120166960e-02, -7.471961572887570e-04, -5.271285605417661e-03, -5.874144935196259e-04, -7.717717621370795e-02, -1.879644910820003e-03, -1.879644910820003e-03, -1.150334699630533e-06, -1.860225303223356e-08, -1.891897608408350e-06, -1.558335012457855e-04, -1.852340295629924e-03, -1.852340295629925e-03, -6.150403091929404e-02, -5.749042507591574e-02, -5.884966051860858e-02, -6.001649762578706e-02, -5.942822100316864e-02, -5.942822100316864e-02, -6.213703101485075e-02, -3.338504719184894e-02, -4.030992956671207e-02, -4.826095657764559e-02, -4.415221539865184e-02, -4.415221539865184e-02, -5.888225209327393e-02, -8.881629844411390e-03, -1.435769793181827e-02, -2.899946743853877e-02, -2.111760716932149e-02, -2.111760716932149e-02, -3.249019954628247e-02, -1.279596505629824e-05, -4.907481346646397e-05, -3.342353984563508e-02, -4.995566294327680e-04, -4.995566294327819e-04, -9.690250368579734e-07, -9.308820099300508e-12, -5.574720466219613e-06, -3.829653501524581e-04, -1.464588066400778e-03, -1.464588066400778e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zvpbesol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbesol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.393510576114114e-01, -1.393512275446132e-01, -1.393519260470738e-01, -1.393522126024010e-01, -1.393548773729047e-01, -1.393545605530934e-01, -1.393404591445655e-01, -1.393414642189690e-01, -1.393475381566242e-01, -1.393492200259042e-01, -1.393475381566242e-01, -1.393492200259042e-01, -1.189841135386802e-01, -1.189857962837999e-01, -1.189887107004361e-01, -1.189906323713226e-01, -1.191002226844300e-01, -1.190976788026678e-01, -1.189118431367704e-01, -1.189101144786516e-01, -1.190139401251782e-01, -1.189677980904686e-01, -1.190139401251782e-01, -1.189677980904686e-01, -8.502767545927922e-02, -8.465929568797691e-02, -8.489133106966103e-02, -8.444094144424565e-02, -7.896467244068464e-02, -7.953004154827789e-02, -7.973592270549591e-02, -7.955759807258665e-02, -7.738940532748839e-02, -8.197543204632245e-02, -7.738940532748839e-02, -8.197543204632245e-02, -3.778272311058058e-02, -3.647795143795154e-02, -3.977283064166926e-02, -3.820766035345695e-02, -9.082282542109205e-02, -8.761434514987325e-02, -1.701360183908493e-02, -1.681214697853755e-02, -7.661730422242843e-03, 6.764242164098130e-02, -7.661730422242866e-03, 6.764242164098133e-02, 5.101522409554814e-04, -3.910776713048223e-04, 7.598750141967526e-04, -5.620276565052095e-04, 2.195913378672748e-04, -3.630134203662642e-04, -5.699130092752583e-06, 6.121444491160044e-06, -2.735674303757242e-03, -5.360986006041214e-03, -2.735674303757242e-03, -5.360986006041214e-03, -1.367312544728847e-01, -1.367681370162811e-01, -1.368701350557552e-01, -1.369080801121038e-01, -1.367366905013858e-01, -1.367742631060905e-01, -1.368600181525094e-01, -1.368971027791885e-01, -1.368019163744313e-01, -1.368395200819938e-01, -1.368019163744313e-01, -1.368395200819938e-01, -8.815371172395359e-02, -8.815777996737038e-02, -8.902178061538339e-02, -8.904399892178934e-02, -8.626194683007551e-02, -8.612732528191062e-02, -8.705556475724575e-02, -8.691355683599608e-02, -8.940061936362183e-02, -8.976118346776649e-02, -8.940061936362183e-02, -8.976118346776649e-02, -8.479194491369416e-02, -8.507870434822039e-02, -8.148408873812220e-02, -8.142691764004072e-02, -8.478482687508641e-02, -8.105098387179743e-02, -8.144025745682856e-02, -7.753605204216284e-02, -8.243817201022394e-02, -8.806043258661402e-02, -8.243817201022394e-02, -8.806043258661397e-02, -4.296948895672057e-03, -4.263787891223649e-03, -2.441660597212488e-02, -2.430860050879025e-02, -3.275514685541664e-03, -3.478074235112957e-03, -1.167168888704872e-01, -1.167907505077744e-01, -1.006561370594130e-02, -9.887866721261789e-03, -1.006561370594130e-02, -9.887866721261789e-03, 9.717397531134448e-05, -8.215451235464675e-05, 3.654031807971396e-06, -3.433246590354936e-06, 1.112986987530544e-04, -8.664033599971103e-05, -9.516974493833654e-04, -9.471726214261950e-04, 4.446688763910817e-03, -3.084935945180901e-03, 4.446688763910783e-03, -3.084935945180897e-03, -7.508643442678707e-02, -7.459772619270773e-02, -7.890035501913299e-02, -7.842043651239033e-02, -7.772855559203173e-02, -7.724390445132573e-02, -7.662374681844365e-02, -7.613956086363489e-02, -7.719192906547502e-02, -7.670754224744529e-02, -7.719192906547502e-02, -7.670754224744529e-02, -7.282338421898207e-02, -7.240604351829309e-02, -7.898351654559463e-02, -7.859485052197590e-02, -8.173335341557864e-02, -8.128601274097055e-02, -8.147435277410332e-02, -8.108136320398461e-02, -8.201006243920268e-02, -8.161504306578607e-02, -8.201006243920268e-02, -8.161504306578607e-02, -8.352066115843765e-02, -8.331376232175143e-02, -3.659394361450741e-02, -3.639978950062622e-02, -5.056146166780301e-02, -5.007263856209404e-02, -7.023514654527302e-02, -6.979298197775112e-02, -6.177565479125813e-02, -6.179851928636718e-02, -6.177565479125811e-02, -6.179851928636718e-02, -7.707095055488315e-02, -7.646791825596518e-02, -8.103737056419202e-05, -8.106035353775277e-05, -2.551704445095054e-04, -3.436438790884671e-04, -7.085021321553235e-02, -6.955255211597186e-02, -2.804030872359064e-03, -2.975777417049344e-03, -2.804030872359089e-03, -2.975777417049364e-03, 8.372497595992795e-05, -7.216955575453115e-05, 1.615905981251515e-09, -1.705670752895610e-09, 3.075265988713630e-04, -2.349431172782558e-04, -2.277315099083184e-03, -2.251683908287234e-03, 9.916313037865247e-03, -3.847091779354924e-03, 9.916313037865301e-03, -3.847091779354935e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zvpbesol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbesol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.962116184362814e-10, 3.924232368725627e-10, 1.962116184362814e-10, 1.962148408057530e-10, 3.924296816115060e-10, 1.962148408057530e-10, 1.962188014188858e-10, 3.924376028377716e-10, 1.962188014188858e-10, 1.961710826906725e-10, 3.923421653813451e-10, 1.961710826906725e-10, 1.961975562739611e-10, 3.923951125479223e-10, 1.961975562739611e-10, 1.961975562739611e-10, 3.923951125479223e-10, 1.961975562739611e-10, 1.080141894031415e-06, 2.160283788062831e-06, 1.080141894031415e-06, 1.080339685660140e-06, 2.160679371320280e-06, 1.080339685660140e-06, 1.084798189895017e-06, 2.169596379790034e-06, 1.084798189895017e-06, 1.076071516622929e-06, 2.152143033245857e-06, 1.076071516622929e-06, 1.080252377582943e-06, 2.160504755165887e-06, 1.080252377582943e-06, 1.080252377582943e-06, 2.160504755165887e-06, 1.080252377582943e-06, 1.751232251135290e-03, 3.502464502270580e-03, 1.751232251135290e-03, 1.742106488010997e-03, 3.484212976021995e-03, 1.742106488010997e-03, 1.499167838443530e-03, 2.998335676887059e-03, 1.499167838443530e-03, 1.461508100087900e-03, 2.923016200175801e-03, 1.461508100087900e-03, 1.479527735560136e-03, 2.959055471120272e-03, 1.479527735560136e-03, 1.479527735560136e-03, 2.959055471120272e-03, 1.479527735560136e-03, 2.018177498444297e-01, 4.036354996888594e-01, 2.018177498444297e-01, 2.083728362646997e-01, 4.167456725293994e-01, 2.083728362646997e-01, 9.389345607973879e-04, 1.877869121594776e-03, 9.389345607973879e-04, 1.815554884345607e-01, 3.631109768691217e-01, 1.815554884345607e-01, -3.341710065900554e-01, -6.683420131801109e-01, -3.341710065900554e-01, -3.341710065900556e-01, -6.683420131801111e-01, -3.341710065900556e-01, -5.374501972068495e+00, -1.074900394413681e+01, -5.374501972068495e+00, -7.875172550485200e+00, -1.575034510097038e+01, -7.875172550485200e+00, 4.014826437133824e-02, 8.029652874267547e-02, 4.014826437133824e-02, -9.356421954157651e-02, -1.871284390838023e-01, -9.356421954157651e-02, -1.619544344376760e-07, -3.239088688753520e-07, -1.619544344376760e-07, -1.619544344376833e-07, -3.239088688753667e-07, -1.619544344376833e-07, 2.723931258277530e-07, 5.447862516555059e-07, 2.723931258277530e-07, 2.740312684553313e-07, 5.480625369106626e-07, 2.740312684553313e-07, 2.724583699956072e-07, 5.449167399912145e-07, 2.724583699956072e-07, 2.739043816818897e-07, 5.478087633637794e-07, 2.739043816818897e-07, 2.732265707906602e-07, 5.464531415813203e-07, 2.732265707906602e-07, 2.732265707906602e-07, 5.464531415813203e-07, 2.732265707906602e-07, 6.898142747625653e-06, 1.379628549525131e-05, 6.898142747625653e-06, 6.848793679428059e-06, 1.369758735885612e-05, 6.848793679428059e-06, 6.634947754050673e-06, 1.326989550810135e-05, 6.634947754050673e-06, 6.594051355134066e-06, 1.318810271026813e-05, 6.594051355134066e-06, 7.001486963280347e-06, 1.400297392656069e-05, 7.001486963280347e-06, 7.001486963280347e-06, 1.400297392656069e-05, 7.001486963280347e-06, 5.083096478558774e-03, 1.016619295711755e-02, 5.083096478558774e-03, 5.627304405092611e-03, 1.125460881018522e-02, 5.627304405092611e-03, 6.693336959815735e-03, 1.338667391963147e-02, 6.693336959815735e-03, 8.747201851793325e-03, 1.749440370358665e-02, 8.747201851793325e-03, 5.006995608272167e-03, 1.001399121654433e-02, 5.006995608272167e-03, 5.006995608272169e-03, 1.001399121654434e-02, 5.006995608272169e-03, 1.181709916606412e-01, 2.363419833212819e-01, 1.181709916606412e-01, 8.611479768284691e-02, 1.722295953656938e-01, 8.611479768284691e-02, 1.209004535051283e-01, 2.418009070102570e-01, 1.209004535051283e-01, 4.971015166385043e-05, 9.942030332770085e-05, 4.971015166385043e-05, 2.082864092008679e-01, 4.165728184017352e-01, 2.082864092008679e-01, 2.082864092008679e-01, 4.165728184017352e-01, 2.082864092008679e-01, -8.391796458661242e+00, -1.678359291731948e+01, -8.391796458661242e+00, -5.631591833698475e-02, -1.126318366742790e-01, -5.631591833698475e-02, -3.590704348530190e+01, -7.181408697059261e+01, -3.590704348530190e+01, 1.247257502090269e-01, 2.494515004180537e-01, 1.247257502090269e-01, -3.136921538226947e+03, -6.273843076453893e+03, -3.136921538226947e+03, -3.136921538226932e+03, -6.273843076453863e+03, -3.136921538226932e+03, 8.963295006338962e-03, 1.792659001267792e-02, 8.963295006338962e-03, 8.074431909423436e-03, 1.614886381884687e-02, 8.074431909423436e-03, 8.364646383552853e-03, 1.672929276710571e-02, 8.364646383552853e-03, 8.622745081251468e-03, 1.724549016250294e-02, 8.622745081251468e-03, 8.491639299752590e-03, 1.698327859950518e-02, 8.491639299752590e-03, 8.491639299752590e-03, 1.698327859950518e-02, 8.491639299752590e-03, 1.042971637723960e-02, 2.085943275447921e-02, 1.042971637723960e-02, 7.514569378062707e-03, 1.502913875612541e-02, 7.514569378062707e-03, 8.073436581132036e-03, 1.614687316226407e-02, 8.073436581132036e-03, 8.820221260094343e-03, 1.764044252018869e-02, 8.820221260094343e-03, 8.438605265419827e-03, 1.687721053083965e-02, 8.438605265419827e-03, 8.438605265419827e-03, 1.687721053083965e-02, 8.438605265419827e-03, 4.515897562948826e-03, 9.031795125897652e-03, 4.515897562948826e-03, 5.774077970417819e-02, 1.154815594083564e-01, 5.774077970417819e-02, 4.668276610940364e-02, 9.336553221880729e-02, 4.668276610940364e-02, 3.284809052758766e-02, 6.569618105517532e-02, 3.284809052758766e-02, 4.103861373294736e-02, 8.207722746589471e-02, 4.103861373294736e-02, 4.103861373294737e-02, 8.207722746589476e-02, 4.103861373294737e-02, 1.076243858243793e-02, 2.152487716487586e-02, 1.076243858243793e-02, 4.360602942488448e-02, 8.721205884976868e-02, 4.360602942488448e-02, 6.536600398750711e-02, 1.307320079750140e-01, 6.536600398750711e-02, 4.825147032073738e-02, 9.650294064147474e-02, 4.825147032073738e-02, 2.073157002951881e-01, 4.146314005903757e-01, 2.073157002951881e-01, 2.073157002951903e-01, 4.146314005903801e-01, 2.073157002951903e-01, -1.636635260720429e-01, -3.273270521439157e-01, -1.636635260720429e-01, 3.722765723436434e-03, 7.445531456265726e-03, 3.722765723436434e-03, -1.646639000738743e+02, -3.293278001477563e+02, -1.646639000738743e+02, 1.935383647816174e-01, 3.870767295632339e-01, 1.935383647816174e-01, -6.829204670136425e+03, -1.365840934027285e+04, -6.829204670136425e+03, -6.829204670136480e+03, -1.365840934027296e+04, -6.829204670136480e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
