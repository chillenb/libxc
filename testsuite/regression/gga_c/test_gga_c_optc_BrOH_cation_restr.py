
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_optc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.416417295083146e-02, -6.416482056523699e-02, -6.416669021438424e-02, -6.415707649261125e-02, -6.416225714792757e-02, -6.416225714792757e-02, -4.759615425454986e-02, -4.760017586024308e-02, -4.769342197247867e-02, -4.753251308371588e-02, -4.760110597782222e-02, -4.760110597782222e-02, -2.976201699969474e-02, -2.956186292054892e-02, -2.463028823334211e-02, -2.488345022395019e-02, -2.500763588587686e-02, -2.500763588587686e-02, -7.144198275859633e-03, -7.759996580199256e-03, -3.238786456899168e-02, -2.343223285511897e-03, -4.054518525698216e-03, -4.054518525698216e-03, -5.686846573532320e-09, -7.609432321460850e-09, -9.226894761244026e-06, -4.018134506764699e-10, -1.484276335492770e-09, -1.484276335492770e-09, -6.250625396762483e-02, -6.266230830457116e-02, -6.251269283640246e-02, -6.265045625821425e-02, -6.258565164045596e-02, -6.258565164045596e-02, -2.758115343087533e-02, -2.804429771663313e-02, -2.658022167811852e-02, -2.698352367224673e-02, -2.833359939947349e-02, -2.833359939947349e-02, -3.849558559640130e-02, -5.158818595308923e-02, -3.618706030420979e-02, -4.775979929869874e-02, -4.001844250966818e-02, -4.001844250966818e-02, -4.628520177435120e-04, -3.795385055149747e-03, -3.586429228518838e-04, -6.757562229164323e-02, -1.227578559631290e-03, -1.227578559631290e-03, -1.564119155636984e-10, -4.252436371308386e-10, -7.558600012385735e-10, -8.952242133479503e-05, -8.454571208438818e-10, -8.454571208438818e-10, -5.445356221854304e-02, -5.058846909427719e-02, -5.189740235604143e-02, -5.302399179327993e-02, -5.245598412341970e-02, -5.245598412341970e-02, -5.510123328794437e-02, -2.860322641074940e-02, -3.477091216846898e-02, -4.198658319704312e-02, -3.823387984985996e-02, -3.823387984985996e-02, -5.169477711409673e-02, -6.759696078880445e-03, -1.145990231703692e-02, -2.454058740632002e-02, -1.743968482128306e-02, -1.743968482128306e-02, -2.776203583177400e-02, -6.923701733823778e-06, -2.711966597031571e-05, -2.857931950148819e-02, -2.994579017029065e-04, -2.994579017029074e-04, -2.230324195224345e-08, -3.912841247978515e-12, -6.594715984683306e-11, -2.270345260507447e-04, -7.412586014035936e-10, -7.412585971666664e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_optc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.228035961157141e-01, -1.228042195079548e-01, -1.228060273373354e-01, -1.227967729393694e-01, -1.228017588417231e-01, -1.228017588417231e-01, -1.017598281987191e-01, -1.017631998965635e-01, -1.018414437796778e-01, -1.017074337884583e-01, -1.017641202334543e-01, -1.017641202334543e-01, -7.356174068954729e-02, -7.340444921470149e-02, -6.872220223632938e-02, -6.906270049624841e-02, -6.917863561126061e-02, -6.917863561126061e-02, -3.001834160487392e-02, -3.180674137945423e-02, -7.717646333951290e-02, -1.218291337527149e-02, -1.937653662915780e-02, -1.937653662915778e-02, -3.716145278002853e-08, -4.970322260383824e-08, -5.874806999214449e-05, -2.636220012056326e-09, -9.722601666987001e-09, -9.722601672230800e-09, -1.160510929082622e-01, -1.161671929061650e-01, -1.160559010918349e-01, -1.161583980884275e-01, -1.161101970997052e-01, -1.161101970997052e-01, -7.872132023818003e-02, -7.935245264619789e-02, -7.735719316177095e-02, -7.792882132917840e-02, -7.972145537541102e-02, -7.972145537541102e-02, -7.475727036552048e-02, -7.283037244356919e-02, -7.293869580112011e-02, -7.103970981687781e-02, -7.513431154101667e-02, -7.513431154101667e-02, -2.727749560120039e-03, -1.852667786388093e-02, -2.136108426178470e-03, -1.026815440364423e-01, -6.805415441282880e-03, -6.805415441282880e-03, -1.027832104263552e-09, -2.790312615561535e-09, -4.967158519428139e-09, -5.542480196763590e-04, -5.549931446126226e-09, -5.549931443432504e-09, -6.662970988992860e-02, -7.036782075278711e-02, -6.928121534369169e-02, -6.820264702284125e-02, -6.876421245767550e-02, -6.876421245767550e-02, -6.452958642568750e-02, -6.883714680385537e-02, -7.171764627394109e-02, -7.225711352963358e-02, -7.233808181457838e-02, -7.233808181457838e-02, -7.453527589024257e-02, -2.942455062057751e-02, -4.247009602974737e-02, -6.157913417389919e-02, -5.359181194291281e-02, -5.359181194291281e-02, -6.719560086073532e-02, -4.416932329233250e-05, -1.709298100877580e-04, -6.232777578317475e-02, -1.794276639755654e-03, -1.794276639755681e-03, -1.453191699498494e-07, -2.585001022258751e-11, -4.341801004165072e-10, -1.373180547143778e-03, -4.868216613248296e-09, -4.868216607224482e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_optc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.438186889127020e-10, 1.438208785158143e-10, 1.438232824933188e-10, 1.437908642161821e-10, 1.438088901012168e-10, 1.438088901012168e-10, 8.380885351357495e-07, 8.382381702370748e-07, 8.416088243027423e-07, 8.349860518848209e-07, 8.381688762146574e-07, 8.381688762146574e-07, 1.503186792052616e-03, 1.495086823577593e-03, 1.284101852450497e-03, 1.251337378594934e-03, 1.272150047043721e-03, 1.272150047043721e-03, 1.662029567055212e-01, 1.734592937610487e-01, 7.990941451104477e-04, 1.315540672238773e-01, 1.636565665471244e-01, 1.636565665471241e-01, 4.478837544907864e-03, 5.283252837453151e-03, 2.906840850759259e-02, 1.565292948620014e-03, 3.285318662511947e-03, 3.285318663881283e-03, 2.079158717848889e-07, 2.092144774151979e-07, 2.079676058788755e-07, 2.091138790305759e-07, 2.085763609601428e-07, 2.085763609601428e-07, 5.781593390395632e-06, 5.725173127288739e-06, 5.595402589298446e-06, 5.547561381505184e-06, 5.842835374589435e-06, 5.842835374589435e-06, 4.553095073739208e-03, 5.394118087981624e-03, 5.997843345323261e-03, 8.335148617403105e-03, 4.515753658491058e-03, 4.515753658491058e-03, 7.524153653929334e-02, 6.591850014082989e-02, 7.639168726686074e-02, 4.413384356243089e-05, 1.426981359241102e-01, 1.426981359241102e-01, 1.522603768156760e-03, 1.923612929946196e-03, 1.916733964104780e-02, 7.264717726215443e-02, 8.365276344762859e-03, 8.365276336190464e-03, 8.579005133431064e-03, 7.777759986435376e-03, 8.096043905029764e-03, 8.345925615664589e-03, 8.224750016416029e-03, 8.224750016416029e-03, 9.940505734282663e-03, 6.621245199771306e-03, 7.233348400130219e-03, 8.157236309390409e-03, 7.664367406272550e-03, 7.664367406272550e-03, 4.303427802043417e-03, 4.700553455580565e-02, 3.997037866577387e-02, 2.960912690010955e-02, 3.629240128429319e-02, 3.629240128429322e-02, 9.540555636718843e-03, 2.370033584530186e-02, 3.711955610510664e-02, 4.445370928251437e-02, 1.286364821270992e-01, 1.286364821271017e-01, 5.612978883217156e-03, 2.052529632301482e-03, 2.602362395226074e-03, 1.172345325124881e-01, 1.040408433782230e-02, 1.040408432444188e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
