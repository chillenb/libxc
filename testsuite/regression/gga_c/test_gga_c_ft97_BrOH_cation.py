
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_ft97_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.263554691497863e-02, -5.263564467161392e-02, -5.263592470236202e-02, -5.263447331859946e-02, -5.263525582904874e-02, -5.263525582904874e-02, -4.965257851411502e-02, -4.965362801828127e-02, -4.967777959610443e-02, -4.963591444604003e-02, -4.965385770403759e-02, -4.965385770403759e-02, -3.935548762505975e-02, -3.908847406554659e-02, -2.963269960266258e-02, -3.030950747595050e-02, -2.356522776932038e-02, -2.356522776932038e-02, -3.465983639778210e-09, -5.871915775218136e-08, -4.154186776612773e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.191365855441099e-02, -5.192822347084072e-02, -5.191425017808352e-02, -5.192709757622507e-02, -5.192099199322494e-02, -5.192099199322494e-02, -2.894799983047209e-02, -3.010789558438331e-02, -2.617985878003655e-02, -2.728038460542785e-02, -3.082674749042626e-02, -3.082674749042626e-02, -4.308533995425024e-02, -5.551816399759082e-02, -4.265465922834033e-02, -4.546384335200557e-02, -4.292550180754583e-02, -4.292550180754583e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.090070402489915e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.310566612963717e-02, -5.537303880962735e-02, -5.946080843458268e-02, -6.167614501731292e-02, -6.070411690501343e-02, -6.070411690501343e-02, -6.305669034983320e-02, -3.853221899124751e-02, -4.228375722708350e-02, -4.115331110909171e-02, -4.222269222056052e-02, -4.222269222056052e-02, -5.379141885724097e-02, 0.000000000000000e+00, -9.944927747470798e-05, -3.336541571016866e-02, -1.247042486819767e-02, -1.247042486819766e-02, -3.761942296577202e-02, 0.000000000000000e+00, 0.000000000000000e+00, -3.838005702485502e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_ft97_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.145362576927045e-02, -6.145365061690462e-02, -6.145326468304851e-02, -6.145348244517747e-02, -6.145295549051510e-02, -6.145230249682155e-02, -6.145579394684112e-02, -6.145732682186678e-02, -6.145238636171106e-02, -6.145648963874346e-02, -6.145238636171106e-02, -6.145648963874346e-02, -6.391855760484889e-02, -6.385289328698447e-02, -6.391220264060088e-02, -6.384248003248058e-02, -6.371730274960927e-02, -6.365183942405969e-02, -6.405947590821087e-02, -6.398425359076339e-02, -6.396386393381859e-02, -6.378810760844020e-02, -6.396386393381859e-02, -6.378810760844020e-02, -9.934565822686590e-02, -8.861182527104607e-02, -1.024082999082346e-01, -8.899096060275406e-02, -1.312596935321654e-01, -1.561893356618724e-01, -1.454881912290323e-01, -1.373290474341365e-01, -4.106705561737635e-02, -2.043722167091980e-01, -4.106705561737635e-02, -2.043722167091980e-01, -7.352370980678001e-09, -7.127681703334782e-07, -2.740962865687054e-07, -1.014318807948756e-05, -1.043912985748213e-01, -6.504181915294870e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.720927201168061e-02, -5.720766665922628e-02, -5.742918871529778e-02, -5.741912880251926e-02, -5.721940171862545e-02, -5.721404075867660e-02, -5.740812842078601e-02, -5.740498885593624e-02, -5.731803209166918e-02, -5.731000696126909e-02, -5.731803209166918e-02, -5.731000696126909e-02, -1.637289531289257e-01, -1.637861078653791e-01, -1.598452155136001e-01, -1.602035146596765e-01, -1.743331584429773e-01, -1.684924398823988e-01, -1.716244947160257e-01, -1.656556381632890e-01, -1.504815630991089e-01, -1.644304853936294e-01, -1.504815630991089e-01, -1.644304853936294e-01, -4.104539648937237e-02, -4.092233524902494e-02, -1.238531050514813e-01, -1.216966998428266e-01, -4.802538156448539e-02, -4.316479626189466e-02, -1.201329654837693e-01, -1.189187180471679e-01, -3.819658733986391e-02, -3.754530962121628e-02, -3.819658733986390e-02, -3.754530962121629e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.551769472909783e-01, -1.550187979371588e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.355105615640854e-02, -7.349230847037559e-02, -1.162589560285076e-01, -1.149275696372001e-01, -9.581975355737643e-02, -9.456110813373034e-02, -8.194290603862379e-02, -8.143391342854241e-02, -8.816736304042339e-02, -8.730354589097246e-02, -8.816736304042339e-02, -8.730354589097246e-02, -7.133333059328001e-02, -7.132130655833614e-02, -8.758669866372464e-02, -8.418073964648284e-02, -4.914874487934051e-02, -4.790335107777896e-02, -3.154461947449253e-02, -3.173030268236963e-02, -3.773960362182021e-02, -3.764220623476137e-02, -3.773960362182021e-02, -3.764220623476137e-02, -1.319808765708988e-01, -1.301188543135511e-01, 0.000000000000000e+00, 0.000000000000000e+00, -4.010070481910127e-03, -7.005603055708008e-03, -1.054537425440968e-01, -1.008200173100777e-01, -1.483076827003624e-01, -1.488455264325265e-01, -1.483076827003623e-01, -1.488455264325265e-01, -9.152179234057430e-02, -8.511373149270600e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.358632414871626e-02, -5.708185992364293e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_ft97_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.393512761117673e-11, 0.000000000000000e+00, 4.393569107342992e-11, 4.393366568606341e-11, 0.000000000000000e+00, 4.393483047485650e-11, 4.393070118129189e-11, 0.000000000000000e+00, 4.392891091420637e-11, 4.394456812148775e-11, 0.000000000000000e+00, 4.394959822865590e-11, 4.393277782474700e-11, 0.000000000000000e+00, 4.394306774834283e-11, 4.393277782474700e-11, 0.000000000000000e+00, 4.394306774834283e-11, 4.381289019880743e-07, 0.000000000000000e+00, 4.368165947895612e-07, 4.379474764668064e-07, 0.000000000000000e+00, 4.365568922038254e-07, 4.328232234284864e-07, 0.000000000000000e+00, 4.314059231485307e-07, 4.414578860117387e-07, 0.000000000000000e+00, 4.398742704653991e-07, 4.395292189451004e-07, 0.000000000000000e+00, 4.347998454099433e-07, 4.395292189451004e-07, 0.000000000000000e+00, 4.347998454099433e-07, 4.073783723985636e-03, 0.000000000000000e+00, 3.515736377283697e-03, 4.253340711838782e-03, 0.000000000000000e+00, 3.562639106247666e-03, 6.277665431716777e-03, 0.000000000000000e+00, 7.263358372092002e-03, 6.578993471826018e-03, 0.000000000000000e+00, 6.267385160842294e-03, 2.345484265164199e-03, 0.000000000000000e+00, 7.551397665638503e-03, 2.345484265164199e-03, 0.000000000000000e+00, 7.551397665638503e-03, 0.000000000000000e+00, 0.000000000000000e+00, 1.013091295752584e-05, 2.318185568139295e-06, 0.000000000000000e+00, 1.423184059164220e-04, 2.153885839228355e-03, 0.000000000000000e+00, 9.080629398686504e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.729864569693257e-08, 0.000000000000000e+00, 3.730390784625211e-08, 3.920640442698230e-08, 0.000000000000000e+00, 3.913369286940400e-08, 3.738814401518853e-08, 0.000000000000000e+00, 3.735670045172336e-08, 3.902025941920396e-08, 0.000000000000000e+00, 3.901409997319335e-08, 3.824349129932069e-08, 0.000000000000000e+00, 3.818799755221226e-08, 3.824349129932069e-08, 0.000000000000000e+00, 3.818799755221226e-08, 3.114459592911804e-05, 0.000000000000000e+00, 3.116295887358666e-05, 2.958372721401657e-05, 0.000000000000000e+00, 2.968306373947534e-05, 3.310475710144600e-05, 0.000000000000000e+00, 3.231484132258502e-05, 3.188476497349410e-05, 0.000000000000000e+00, 3.103955091162698e-05, 2.828391830781441e-05, 0.000000000000000e+00, 3.055121679007353e-05, 2.828391830781441e-05, 0.000000000000000e+00, 3.055121679007353e-05, -1.141543090609898e-03, 0.000000000000000e+00, -1.211270242683524e-03, 4.209138472899692e-02, 0.000000000000000e+00, 4.113721024238189e-02, 1.052842714983996e-03, 0.000000000000000e+00, -4.503890370135775e-04, 6.885927246226771e-02, 0.000000000000000e+00, 5.747759593917394e-02, -1.682600025500062e-03, 0.000000000000000e+00, -2.578710007514939e-03, -1.682600025500062e-03, 0.000000000000000e+00, -2.578710007514938e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.304178933324083e-04, 0.000000000000000e+00, 2.306758538957210e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.075688738347721e-02, 0.000000000000000e+00, 1.050261101716260e-02, 5.971292763556679e-02, 0.000000000000000e+00, 5.777852163203454e-02, 4.203559012012810e-02, 0.000000000000000e+00, 4.000127861862446e-02, 2.532038387079929e-02, 0.000000000000000e+00, 2.420082155159764e-02, 3.346606893316514e-02, 0.000000000000000e+00, 3.186115170527050e-02, 3.346606893316514e-02, 0.000000000000000e+00, 3.186115170527050e-02, 6.706208482954204e-03, 0.000000000000000e+00, 6.992101553370027e-03, 1.635310832807705e-02, 0.000000000000000e+00, 1.514919727636102e-02, 1.970748924407829e-03, 0.000000000000000e+00, 1.482238202386210e-03, -7.562367043274679e-03, 0.000000000000000e+00, -7.360622497859994e-03, -3.419309048638828e-03, 0.000000000000000e+00, -3.404774172605932e-03, -3.419309048638828e-03, 0.000000000000000e+00, -3.404774172605932e-03, 3.510738292830428e-02, 0.000000000000000e+00, 3.464773825695944e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.027011293847869e-02, 0.000000000000000e+00, 1.811617491019397e-02, 1.186416122322976e-01, 0.000000000000000e+00, 1.096289033908254e-01, 2.779078049365813e-01, 0.000000000000000e+00, 2.827342151940675e-01, 2.779078049365813e-01, 0.000000000000000e+00, 2.827342151940679e-01, 2.644665100341763e-02, 0.000000000000000e+00, 2.325640847644378e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 6.501447754187084e-02, 0.000000000000000e+00, 4.646152584735766e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
