
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_rge2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.758526120492236e-02, -5.758600975383380e-02, -5.758826858822453e-02, -5.757603335373636e-02, -5.758566499599591e-02, -5.758566499599591e-02, -4.722215705587056e-02, -4.722634007071800e-02, -4.734151360016410e-02, -4.714356976020068e-02, -4.722431500650830e-02, -4.722431500650830e-02, -3.021791338283442e-02, -2.999607475493423e-02, -2.418071167556745e-02, -2.448881150886328e-02, -3.013794660578153e-02, -3.013794660578153e-02, -1.132312661211862e-02, -1.209296791737647e-02, -3.732651702895230e-02, -3.370525541466877e-03, -1.156100120497460e-02, -1.156100120497460e-02, -1.965008893668725e-07, -2.428927910542740e-07, -4.926157631188565e-05, -4.844358580194674e-09, -2.407052656875899e-07, -2.407052656875899e-07, -6.460898466396105e-02, -6.480970126533857e-02, -6.462900449627111e-02, -6.478507184575466e-02, -6.471244689189767e-02, -6.471244689189767e-02, -2.520975144727598e-02, -2.569915667941601e-02, -2.453100145303760e-02, -2.490885286823606e-02, -2.644846675574757e-02, -2.644846675574757e-02, -4.252429480026628e-02, -5.802728928282076e-02, -4.109177717549840e-02, -5.316705097949311e-02, -4.486909950631866e-02, -4.486909950631866e-02, -9.213722435417723e-04, -5.823144121323880e-03, -1.011776940497234e-03, -7.528339253681343e-02, -1.967421761301113e-03, -1.967421761301113e-03, -4.351726910781940e-09, -8.080493903487017e-09, -6.087709895764311e-09, -2.067225353202639e-04, -7.768874204236317e-09, -7.768874204236317e-09, -6.205340780505530e-02, -5.782493940374162e-02, -5.928073404392886e-02, -6.045115963017252e-02, -5.986094771587458e-02, -5.986094771587458e-02, -6.206093245661633e-02, -3.287097134131487e-02, -3.983241498317061e-02, -4.738038723723420e-02, -4.348008135299929e-02, -4.348008135299930e-02, -5.821313093914468e-02, -9.595023178340966e-03, -1.507343674652116e-02, -2.793396396387673e-02, -2.112051377104485e-02, -2.112051377104484e-02, -3.112868689696648e-02, -2.968303177910959e-05, -1.108935327324719e-04, -3.242376641830206e-02, -6.461547514191156e-04, -6.461547514191156e-04, -3.014799767046751e-07, -3.178349504210113e-11, -5.706429673008108e-10, -6.541116289938741e-04, -5.338698380766932e-09, -5.338698378198010e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_rge2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.348719486777836e-01, -1.348727893784661e-01, -1.348753378323946e-01, -1.348615955536097e-01, -1.348724020825344e-01, -1.348724020825344e-01, -1.155376865377819e-01, -1.155419193620107e-01, -1.156585865351831e-01, -1.154594717983048e-01, -1.155399031353316e-01, -1.155399031353316e-01, -8.136303129930142e-02, -8.113439273816370e-02, -7.388553304210756e-02, -7.439333153943993e-02, -8.128093516771639e-02, -8.128093516771639e-02, -4.170377190485611e-02, -4.338946553003662e-02, -8.967588303140399e-02, -1.668718537923142e-02, -4.223484438299181e-02, -4.223484438299181e-02, -1.274468461417065e-06, -1.574340038335019e-06, -3.071860659247261e-04, -3.166947196346609e-08, -1.560310545753814e-06, -1.560310545753814e-06, -1.341646042964560e-01, -1.343155759364381e-01, -1.341797062768519e-01, -1.342971009516065e-01, -1.342425035460367e-01, -1.342425035460367e-01, -8.245718978858457e-02, -8.337644645801920e-02, -8.118397724692411e-02, -8.191210481649026e-02, -8.471510220632010e-02, -8.471510220632010e-02, -8.468644758267727e-02, -8.150265278856283e-02, -8.325517612173407e-02, -8.108792781064240e-02, -8.566450257109262e-02, -8.566450257109262e-02, -5.210346172940308e-03, -2.642220264399683e-02, -5.681357366539810e-03, -1.172621253451644e-01, -1.042298092748504e-02, -1.042298092748504e-02, -2.845699323350773e-08, -5.278038460598215e-08, -3.984783082047811e-08, -1.249514264031156e-03, -5.077960096125648e-08, -5.077960095990821e-08, -7.502145779089157e-02, -7.909857443903633e-02, -7.782849527097147e-02, -7.670651096613804e-02, -7.728361657464998e-02, -7.728361657464998e-02, -7.327277345341446e-02, -7.893340764257052e-02, -8.195586847518407e-02, -8.208052887603312e-02, -8.239583748847569e-02, -8.239583748847570e-02, -8.344992104264795e-02, -3.866332250128120e-02, -5.196988104219534e-02, -6.964841688943028e-02, -6.210990167678332e-02, -6.210990167678332e-02, -7.609790486511191e-02, -1.863658326626666e-04, -6.811518119884761e-04, -6.986832651273857e-02, -3.726249313899292e-03, -3.726249313899278e-03, -1.951716214240754e-06, -2.094133287385063e-10, -3.745727061816722e-09, -3.766778541580236e-03, -3.493875910726173e-08, -3.493875910238194e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_rge2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.954071261143200e-10, 1.954100180778171e-10, 1.954135940153515e-10, 1.953664327835856e-10, 1.954087291815987e-10, 1.954087291815987e-10, 1.085148950897051e-06, 1.085314043053269e-06, 1.089645383568944e-06, 1.081078632301578e-06, 1.085211311475725e-06, 1.085211311475725e-06, 1.705976761900420e-03, 1.695343076940011e-03, 1.398285587013810e-03, 1.371325219782551e-03, 1.702184660990489e-03, 1.702184660990489e-03, 2.322767560550772e-01, 2.388172626031994e-01, 9.835302110037707e-04, 1.987276004467030e-01, 2.345539381268120e-01, 2.345539381268120e-01, 4.664775258672019e-02, 5.025508783232392e-02, 1.012743081529006e-01, 8.747402580834455e-03, 5.238034921565317e-02, 5.238034921565317e-02, 2.778234847326400e-07, 2.795023122322414e-07, 2.779891416958869e-07, 2.792944422352244e-07, 2.786895610221922e-07, 2.786895610221922e-07, 6.608867543590638e-06, 6.575168804707239e-06, 6.428442455036370e-06, 6.404406127937242e-06, 6.825175481968888e-06, 6.825175481968888e-06, 5.734525124665300e-03, 6.688121033168129e-03, 6.984662961807226e-03, 8.865201151872108e-03, 5.228091253275001e-03, 5.228091253275001e-03, 1.362201535684243e-01, 8.643202707051532e-02, 1.670480464446100e-01, 5.413298730038473e-05, 2.028489333730533e-01, 2.028489333730533e-01, 9.014939447839529e-03, 1.122786032322376e-02, 3.398736908006500e-02, 1.600238991472239e-01, 1.734351043413490e-02, 1.734351043290132e-02, 9.761020601753769e-03, 8.715688477425817e-03, 9.062076385470628e-03, 9.350801839975397e-03, 9.204090149986950e-03, 9.204090149986950e-03, 1.140663921543786e-02, 7.639815964799418e-03, 8.349319193450734e-03, 9.226997638884201e-03, 8.775336142019809e-03, 8.775336142019809e-03, 5.362456293324573e-03, 5.737517771515155e-02, 4.704029485888261e-02, 3.433719187881574e-02, 4.172073715185168e-02, 4.172073715185170e-02, 1.160320380968782e-02, 7.014391141651723e-02, 1.078709231255032e-01, 5.611226981360561e-02, 2.292922252628095e-01, 2.292922252628088e-01, 3.855622695484997e-02, 2.820832728628672e-03, 6.856354706530498e-03, 2.960647063416027e-01, 2.346185573945915e-02, 2.346185573923523e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
