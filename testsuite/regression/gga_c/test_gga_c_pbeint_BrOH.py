
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbeint_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.813672752976056e-02, -5.813747666498251e-02, -5.813973735777281e-02, -5.812749253398091e-02, -5.813713163636751e-02, -5.813713163636751e-02, -4.770640556937766e-02, -4.771058750768356e-02, -4.782573242398366e-02, -4.762784877502613e-02, -4.770856322260702e-02, -4.770856322260702e-02, -3.057601579044337e-02, -3.035428556626971e-02, -2.453243224747301e-02, -2.484182356924556e-02, -3.049609046401527e-02, -3.049609046401527e-02, -1.153704542161209e-02, -1.231286594032960e-02, -3.768960829728268e-02, -3.465987765948730e-03, -1.177684233316491e-02, -1.177684233316491e-02, -2.041072403675246e-07, -2.522921353507408e-07, -5.111029533101667e-05, -5.032348561041138e-09, -2.500199808659095e-07, -2.500199808659095e-07, -6.509833502821835e-02, -6.529861717724217e-02, -6.511831186888882e-02, -6.527404146050254e-02, -6.520157391979557e-02, -6.520157391979557e-02, -2.561970209417718e-02, -2.611206159862860e-02, -2.493687871997034e-02, -2.531714507626844e-02, -2.686537728408260e-02, -2.686537728408260e-02, -4.280420504743663e-02, -5.815283795138648e-02, -4.137240256381679e-02, -5.332973275331038e-02, -4.513710811305863e-02, -4.513710811305863e-02, -9.522664153096722e-04, -5.970626175234090e-03, -1.045389344166331e-03, -7.555056466743325e-02, -2.028179486220144e-03, -2.028179486220144e-03, -4.520604072331443e-09, -8.394015560842865e-09, -6.323916342235506e-09, -2.142163571418701e-04, -8.070300602578848e-09, -8.070300602578848e-09, -6.209421560180419e-02, -5.793315488159208e-02, -5.936680109509015e-02, -6.051862056944889e-02, -5.993788092423502e-02, -5.993788092423502e-02, -6.208784451104098e-02, -3.318704709340180e-02, -4.011336647977014e-02, -4.759911656211016e-02, -4.373389441819255e-02, -4.373389441819255e-02, -5.835254376081293e-02, -9.802072827697721e-03, -1.533373687352741e-02, -2.821907686209640e-02, -2.140593323581356e-02, -2.140593323581355e-02, -3.143726950902441e-02, -3.080542006689629e-05, -1.149899701395353e-04, -3.267203278042945e-02, -6.683022685833738e-04, -6.683022685833738e-04, -3.131436563684893e-07, -3.301758276211424e-11, -5.927955329497754e-10, -6.764747613710880e-04, -5.545855337300218e-09, -5.545855334731295e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbeint_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.354853517332401e-01, -1.354861876705696e-01, -1.354887220838094e-01, -1.354750576636261e-01, -1.354858025656943e-01, -1.354858025656943e-01, -1.160224732132744e-01, -1.160266470200451e-01, -1.161416991625677e-01, -1.159454068682756e-01, -1.160246602807993e-01, -1.160246602807993e-01, -8.170325968884642e-02, -8.148023509710785e-02, -7.438268041409561e-02, -7.488453864492803e-02, -8.162318347888087e-02, -8.162318347888087e-02, -4.215898784235732e-02, -4.382593527466825e-02, -8.990494104751655e-02, -1.707975281954938e-02, -4.268442385391887e-02, -4.268442385391887e-02, -1.323738338842178e-06, -1.635177169094093e-06, -3.185422235326729e-04, -3.289811166313877e-08, -1.620605747556795e-06, -1.620605747556795e-06, -1.345267975314398e-01, -1.346756236384754e-01, -1.345416857494709e-01, -1.346574121615581e-01, -1.346035905032385e-01, -1.346035905032385e-01, -8.320387758499449e-02, -8.411542477365605e-02, -8.194237137810206e-02, -8.266466911884003e-02, -8.544049116489645e-02, -8.544049116489645e-02, -8.469121907279240e-02, -8.139990999560077e-02, -8.326844944239736e-02, -8.098279099370796e-02, -8.564261766227214e-02, -8.564261766227214e-02, -5.372426303471905e-03, -2.693353932662998e-02, -5.855493977457695e-03, -1.171939308658736e-01, -1.070669835880990e-02, -1.070669835880990e-02, -2.956104138510619e-08, -5.482758144401906e-08, -4.139345306760029e-08, -1.293379817394700e-03, -5.274915236879253e-08, -5.274915237091123e-08, -7.497368077235120e-02, -7.900211755455966e-02, -7.774371091742739e-02, -7.663484924562318e-02, -7.720490277808492e-02, -7.720490277808492e-02, -7.323976532807787e-02, -7.909457269936243e-02, -8.197690584514618e-02, -8.200292664689518e-02, -8.236133190578267e-02, -8.236133190578267e-02, -8.334400966096699e-02, -3.921976793759848e-02, -5.244638630963531e-02, -6.980257002815524e-02, -6.243098545033200e-02, -6.243098545033199e-02, -7.626452175982215e-02, -1.933318683071101e-04, -7.057508771746886e-04, -6.988685292102068e-02, -3.846239851840948e-03, -3.846239851840992e-03, -2.027110238623042e-06, -2.175441244559211e-10, -3.891120958957782e-09, -3.887584121331274e-03, -3.629408303303684e-08, -3.629408303364596e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbeint_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.955494769543707e-10, 1.955523569557115e-10, 1.955558937116415e-10, 1.955089280635556e-10, 1.955510735946718e-10, 1.955510735946718e-10, 1.084837230156059e-06, 1.085001298514288e-06, 1.089304552927014e-06, 1.080786872773694e-06, 1.084899080985287e-06, 1.084899080985287e-06, 1.704237634160914e-03, 1.693810849518729e-03, 1.401710036385106e-03, 1.374460986206192e-03, 1.700520162932034e-03, 1.700520162932034e-03, 2.339925984071445e-01, 2.403273634078853e-01, 9.801946845508455e-04, 2.031207294548435e-01, 2.362080120838756e-01, 2.362080120838756e-01, 4.845056307104414e-02, 5.219644150651267e-02, 1.050050987506451e-01, 9.086742631711225e-03, 5.440380912742335e-02, 5.440380912742335e-02, 2.772057920149789e-07, 2.788727824094201e-07, 2.773702774753016e-07, 2.786663751371380e-07, 2.780657760968514e-07, 2.780657760968514e-07, 6.646546901107588e-06, 6.611127192714473e-06, 6.467321187266001e-06, 6.441949935875429e-06, 6.859998466218200e-06, 6.859998466218200e-06, 5.687615760931455e-03, 6.589460562956838e-03, 6.929098258110306e-03, 8.746520433147189e-03, 5.181344365670991e-03, 5.181344365670991e-03, 1.403745231707959e-01, 8.793608500871453e-02, 1.720589279631685e-01, 5.357998726209581e-05, 2.081681603653204e-01, 2.081681603653204e-01, 9.364671271354857e-03, 1.166332172446339e-02, 3.530557260643712e-02, 1.655983025974441e-01, 1.801614621560885e-02, 1.801614621480946e-02, 9.589551861222423e-03, 8.582036435130396e-03, 8.916334514462276e-03, 9.194652523615858e-03, 9.053267848042921e-03, 9.053267848042921e-03, 1.120117455183275e-02, 7.605991357837801e-03, 8.284603286194594e-03, 9.124659668798817e-03, 8.693000567321515e-03, 8.693000567321522e-03, 5.285864420281213e-03, 5.804379144642706e-02, 4.729016932676802e-02, 3.418984617363971e-02, 4.172374383388584e-02, 4.172374383388584e-02, 1.155416757968213e-02, 7.275874649960344e-02, 1.117457689071681e-01, 5.567173117398975e-02, 2.365575469121963e-01, 2.365575469121998e-01, 4.004510551719229e-02, 2.930354930420622e-03, 7.122483121567940e-03, 3.054032900223853e-01, 2.437190905354002e-02, 2.437190905370964e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
