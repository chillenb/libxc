
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_vwn_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.118981304863886e-02, -5.119066128122896e-02, -5.119307174339720e-02, -5.118048083955634e-02, -5.118727122924778e-02, -5.118727122924778e-02, -4.184770487746793e-02, -4.185288582058277e-02, -4.197290116427933e-02, -4.176468275919755e-02, -4.185393069209588e-02, -4.185393069209588e-02, -2.767715867392445e-02, -2.744129181100459e-02, -2.179947069988089e-02, -2.206068953076687e-02, -2.209958336577304e-02, -2.209958336577304e-02, -6.069267775893603e-03, -6.631793922991971e-03, -3.025430623282110e-02, -1.913706788613627e-03, -2.131692889398181e-03, -2.131692889398181e-03, -5.368595402000659e-09, -7.170484221143136e-09, -8.130553016971048e-06, -3.803885292689990e-10, -9.826654039091220e-10, -9.826654034754412e-10, -5.908946770499927e-02, -5.930111402813087e-02, -5.909818802114990e-02, -5.928502670818533e-02, -5.919714514309384e-02, -5.919714514309384e-02, -2.101601116791824e-02, -2.148118807053091e-02, -1.997934992418204e-02, -2.037720024692966e-02, -2.179517953635494e-02, -2.179517953635494e-02, -3.910621296016775e-02, -5.629112194046026e-02, -3.637985642580903e-02, -5.157910239693195e-02, -4.092858481193093e-02, -4.092858481193089e-02, -3.787090291279757e-04, -3.071363601358991e-03, -2.938287462627073e-04, -7.232148569669727e-02, -9.997727090928880e-04, -9.997727090928880e-04, -1.473183723448013e-10, -4.025051967074256e-10, -7.096935801618326e-10, -7.616886349416652e-05, -6.976735946774559e-10, -6.976735929427325e-10, -6.077660341530042e-02, -5.533297824928882e-02, -5.714717119363329e-02, -5.872808943628628e-02, -5.792827602246112e-02, -5.792827602246112e-02, -6.193305114170416e-02, -2.730658563893568e-02, -3.480465959127017e-02, -4.404110619566156e-02, -3.918611545512990e-02, -3.918611545512990e-02, -5.620019926952995e-02, -5.557217703715450e-03, -9.806436613588557e-03, -2.345191595227445e-02, -1.574680605566343e-02, -1.574680605566344e-02, -2.654671329223417e-02, -6.152233956729578e-06, -2.344601097489102e-05, -2.842783622422585e-02, -2.491643605528025e-04, -2.491643605528025e-04, -2.107194782899335e-08, -3.618984886072374e-12, -6.155638672400432e-11, -1.905954540911518e-04, -6.266481749738623e-10, -6.266481773591071e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_vwn_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.273988450529904e-01, -1.273989893808659e-01, -1.273998311136602e-01, -1.274000744917256e-01, -1.274030393251662e-01, -1.274027702410945e-01, -1.273871051148054e-01, -1.273879587247971e-01, -1.273951074663787e-01, -1.273965359040280e-01, -1.273951074663787e-01, -1.273965359040280e-01, -1.097524234508788e-01, -1.097538686378283e-01, -1.097584501042387e-01, -1.097601005180684e-01, -1.099022465338848e-01, -1.099000607913136e-01, -1.096565688806417e-01, -1.096550847163545e-01, -1.097804749192100e-01, -1.097408458937071e-01, -1.097804749192100e-01, -1.097408458937071e-01, -7.912973575126397e-02, -7.881811051563939e-02, -7.887398128786269e-02, -7.849357560900372e-02, -7.021301621147204e-02, -7.067026187484866e-02, -7.100629982099085e-02, -7.086186433064459e-02, -6.890223942958876e-02, -7.327778062097226e-02, -6.890223942958876e-02, -7.327778062097226e-02, -2.762701696471631e-02, -2.674975323323795e-02, -2.962918123333007e-02, -2.855305819188660e-02, -8.502545617032763e-02, -8.223793734143779e-02, -1.028152975783808e-02, -1.017013371128650e-02, -1.003762154362961e-02, -1.710618110113802e-02, -1.003762154362964e-02, -1.710618110113802e-02, -3.581937378467313e-08, -3.445831640849459e-08, -4.796580878622092e-08, -4.589838895366882e-08, -5.269899862525764e-05, -5.065773806344470e-05, -2.484466850085608e-09, -2.510230201607210e-09, -6.073239221531142e-09, -8.358196150058846e-09, -6.073239223211655e-09, -8.358196155208806e-09, -1.298327553153786e-01, -1.298657131750748e-01, -1.300145675911655e-01, -1.300484923341398e-01, -1.298399878383980e-01, -1.298735630413604e-01, -1.300011396453305e-01, -1.300342938258212e-01, -1.299252745953934e-01, -1.299588856760176e-01, -1.299252745953934e-01, -1.299588856760176e-01, -7.415935110887192e-02, -7.416252253433839e-02, -7.517040690457336e-02, -7.518778879782748e-02, -7.191162314817506e-02, -7.180752190832443e-02, -7.282041601131509e-02, -7.271024867636103e-02, -7.569910114301280e-02, -7.598271869692191e-02, -7.569910114301280e-02, -7.598271869692191e-02, -8.472961600095008e-02, -8.499055146640012e-02, -8.396941431270870e-02, -8.391409333097387e-02, -8.402584017293969e-02, -8.065137304061352e-02, -8.379515940217741e-02, -8.005073828114700e-02, -8.308326386991710e-02, -8.826581949342538e-02, -8.308326386991707e-02, -8.826581949342532e-02, -2.252354496071387e-03, -2.236039207326898e-03, -1.565788774582922e-02, -1.559506837295675e-02, -1.794640715969194e-03, -1.724445617606992e-03, -1.184210350234554e-01, -1.184919500792442e-01, -5.767231118155221e-03, -5.513784151153224e-03, -5.767231118155221e-03, -5.513784151153224e-03, -9.807077458572670e-10, -9.581864554691115e-10, -2.655057572995463e-09, -2.630720131211368e-09, -4.754988633136086e-09, -4.593559756793402e-09, -4.719907890899568e-04, -4.698352201679984e-04, -5.227296685146620e-09, -4.331197996838864e-09, -5.227296679373244e-09, -4.331197991065488e-09, -7.664763783770874e-02, -7.616792938955795e-02, -8.129508475463597e-02, -8.083036515127671e-02, -7.995925511771150e-02, -7.948763306926630e-02, -7.862168665140225e-02, -7.814863979975241e-02, -7.931849368359846e-02, -7.884618378368868e-02, -7.931849368359846e-02, -7.884618378368868e-02, -7.383717258220256e-02, -7.342622281550402e-02, -7.494103933142987e-02, -7.460851124938800e-02, -8.083552127343155e-02, -8.043483768331319e-02, -8.312020628393656e-02, -8.275296366159081e-02, -8.252072003624075e-02, -8.215913993243856e-02, -8.252072003624075e-02, -8.215913993243856e-02, -8.604190044085611e-02, -8.584215563027076e-02, -2.585836248527166e-02, -2.573441969372817e-02, -3.996054032560452e-02, -3.961359342661983e-02, -6.642031884397234e-02, -6.604712824919085e-02, -5.403042449075612e-02, -5.404825974471172e-02, -5.403042449075615e-02, -5.404825974471175e-02, -7.316860669916468e-02, -7.265348986192414e-02, -3.921249296799796e-05, -3.901961530672142e-05, -1.492033357707382e-04, -1.456283068623464e-04, -6.981519051647023e-02, -6.867234098481392e-02, -1.530508296823204e-03, -1.468653617251423e-03, -1.530508296823187e-03, -1.468653617251402e-03, -1.388829164548354e-07, -1.356814726538035e-07, -2.394898283194559e-11, -2.391784888236049e-11, -4.137250706850595e-10, -3.989228860334518e-10, -1.161652850918424e-03, -1.147499337257186e-03, -4.619983090862166e-09, -3.902706115200237e-09, -4.619983092502022e-09, -3.902706119442178e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_vwn_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.929350443876548e-10, 3.858700887753096e-10, 1.929350443876548e-10, 1.929385386296445e-10, 3.858770772592890e-10, 1.929385386296445e-10, 1.929433462287858e-10, 3.858866924575715e-10, 1.929433462287858e-10, 1.928915904015951e-10, 3.857831808031902e-10, 1.928915904015951e-10, 1.929202306596641e-10, 3.858404613193282e-10, 1.929202306596641e-10, 1.929202306596641e-10, 3.858404613193282e-10, 1.929202306596641e-10, 1.082443290055489e-06, 2.164886580110978e-06, 1.082443290055489e-06, 1.082665165497321e-06, 2.165330330994642e-06, 1.082665165497321e-06, 1.087681683218445e-06, 2.175363366436889e-06, 1.087681683218445e-06, 1.077977687375235e-06, 2.155955374750469e-06, 1.077977687375235e-06, 1.082581257653029e-06, 2.165162515306058e-06, 1.082581257653029e-06, 1.082581257653029e-06, 2.165162515306058e-06, 1.082581257653029e-06, 1.800426992112607e-03, 3.600853984225215e-03, 1.800426992112607e-03, 1.786928693177390e-03, 3.573857386354780e-03, 1.786928693177390e-03, 1.446233028234609e-03, 2.892466056469218e-03, 1.446233028234609e-03, 1.413434838932684e-03, 2.826869677865367e-03, 1.413434838932684e-03, 1.434420009485226e-03, 2.868840018970451e-03, 1.434420009485226e-03, 1.434420009485226e-03, 2.868840018970451e-03, 1.434420009485226e-03, 1.550167904844094e-01, 3.100335809688189e-01, 1.550167904844094e-01, 1.636355385624539e-01, 3.272710771249078e-01, 1.636355385624539e-01, 9.739017584527035e-04, 1.947803516905407e-03, 9.739017584527035e-04, 1.121736777116026e-01, 2.243473554232051e-01, 1.121736777116026e-01, 9.569070741295446e-02, 1.913814148259090e-01, 9.569070741295446e-02, 9.569070741295474e-02, 1.913814148259093e-01, 9.569070741295474e-02, 4.228317556651813e-03, 8.456635113375259e-03, 4.228317556651813e-03, 4.978662803645457e-03, 9.957325607598651e-03, 4.978662803645457e-03, 2.564878092970849e-02, 5.129756185941643e-02, 2.564878092970849e-02, 1.481845026595168e-03, 2.963690053584174e-03, 1.481845026595168e-03, 2.175155268634813e-03, 4.350310536259947e-03, 2.175155268634813e-03, 2.175155268772120e-03, 4.350310536536425e-03, 2.175155268772120e-03, 2.836040456302550e-07, 5.672080912605099e-07, 2.836040456302550e-07, 2.854755120079615e-07, 5.709510240159230e-07, 2.854755120079615e-07, 2.836787479302585e-07, 5.673574958605171e-07, 2.836787479302585e-07, 2.853306980734330e-07, 5.706613961468657e-07, 2.853306980734330e-07, 2.845559631300330e-07, 5.691119262600661e-07, 2.845559631300330e-07, 2.845559631300330e-07, 5.691119262600661e-07, 2.845559631300330e-07, 6.166671038046611e-06, 1.233334207609322e-05, 6.166671038046611e-06, 6.150291775469809e-06, 1.230058355093962e-05, 6.150291775469809e-06, 5.867016575429028e-06, 1.173403315085806e-05, 5.867016575429028e-06, 5.854771581629363e-06, 1.170954316325872e-05, 5.854771581629363e-06, 6.307606572669193e-06, 1.261521314533839e-05, 6.307606572669193e-06, 6.307606572669193e-06, 1.261521314533839e-05, 6.307606572669193e-06, 5.910051953113151e-03, 1.182010390622630e-02, 5.910051953113151e-03, 7.450826156183457e-03, 1.490165231236691e-02, 7.450826156183457e-03, 7.689357646050225e-03, 1.537871529210045e-02, 7.689357646050225e-03, 1.139700488702035e-02, 2.279400977404069e-02, 1.139700488702035e-02, 5.902493736375799e-03, 1.180498747275160e-02, 5.902493736375799e-03, 5.902493736375799e-03, 1.180498747275160e-02, 5.902493736375799e-03, 6.247429953654292e-02, 1.249485990730859e-01, 6.247429953654292e-02, 5.677738985085984e-02, 1.135547797017197e-01, 5.677738985085984e-02, 6.337406092985198e-02, 1.267481218597039e-01, 6.337406092985198e-02, 6.040796420643162e-05, 1.208159284128632e-04, 6.040796420643162e-05, 1.194811452790171e-01, 2.389622905580344e-01, 1.194811452790171e-01, 1.194811452790171e-01, 2.389622905580344e-01, 1.194811452790171e-01, 1.434091975735736e-03, 2.868183952076653e-03, 1.434091975735736e-03, 1.820772669227958e-03, 3.641545338791614e-03, 1.820772669227958e-03, 1.799692194460662e-02, 3.599384389919408e-02, 1.799692194460662e-02, 6.212551780117491e-02, 1.242510356023503e-01, 6.212551780117491e-02, 6.903231012381619e-03, 1.380646202287082e-02, 6.903231012381619e-03, 6.903231005703792e-03, 1.380646200891120e-02, 6.903231005703792e-03, 1.257196151624988e-02, 2.514392303249977e-02, 1.257196151624988e-02, 1.078670444803254e-02, 2.157340889606509e-02, 1.078670444803254e-02, 1.135318795400090e-02, 2.270637590800181e-02, 1.135318795400090e-02, 1.186988477977366e-02, 2.373976955954732e-02, 1.186988477977366e-02, 1.160581828244709e-02, 2.321163656489418e-02, 1.160581828244709e-02, 1.160581828244709e-02, 2.321163656489418e-02, 1.160581828244709e-02, 1.488641059804027e-02, 2.977282119608055e-02, 1.488641059804027e-02, 7.983128942829164e-03, 1.596625788565833e-02, 7.983128942829164e-03, 9.208224194187145e-03, 1.841644838837429e-02, 9.208224194187145e-03, 1.085567219089514e-02, 2.171134438179027e-02, 1.085567219089514e-02, 9.988172712657530e-03, 1.997634542531506e-02, 9.988172712657530e-03, 9.988172712657530e-03, 1.997634542531506e-02, 9.988172712657530e-03, 5.917441070042805e-03, 1.183488214008561e-02, 5.917441070042805e-03, 4.247896325174995e-02, 8.495792650349993e-02, 4.247896325174995e-02, 3.917293818051543e-02, 7.834587636103089e-02, 3.917293818051543e-02, 3.488237444212253e-02, 6.976474888424507e-02, 3.488237444212253e-02, 3.906247957036588e-02, 7.812495914073180e-02, 3.906247957036588e-02, 3.906247957036591e-02, 7.812495914073185e-02, 3.906247957036591e-02, 1.145852622755049e-02, 2.291705245510097e-02, 1.145852622755049e-02, 2.108317734837779e-02, 4.216635469676485e-02, 2.108317734837779e-02, 3.217216527533614e-02, 6.434433055067192e-02, 3.217216527533614e-02, 5.503074784895701e-02, 1.100614956979140e-01, 5.503074784895701e-02, 1.081961955848272e-01, 2.163923911696551e-01, 1.081961955848272e-01, 1.081961955848264e-01, 2.163923911696547e-01, 1.081961955848264e-01, 5.303390168472213e-03, 1.060678033712020e-02, 5.303390168472213e-03, 1.898387767700976e-03, 3.796775537491181e-03, 1.898387767700976e-03, 2.429110211417583e-03, 4.858220430664832e-03, 2.429110211417583e-03, 9.930686635485593e-02, 1.986137327097116e-01, 9.930686635485593e-02, 8.795653544204090e-03, 1.759130708307579e-02, 8.795653544204090e-03, 8.795653547039402e-03, 1.759130709397271e-02, 8.795653547039402e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
