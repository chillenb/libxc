
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_chachiyo_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.964016697166380e-02, -4.964073732339677e-02, -4.964236502458144e-02, -4.963389899464595e-02, -4.963846372047396e-02, -4.963846372047396e-02, -4.081588168840965e-02, -4.081995712174998e-02, -4.091444149850795e-02, -4.075077101887749e-02, -4.082080701900242e-02, -4.082080701900242e-02, -2.757187961288838e-02, -2.737124343121734e-02, -2.263325329193579e-02, -2.285831335363233e-02, -2.297640599960813e-02, -2.297640599960813e-02, -7.371065611476414e-03, -7.947051926976957e-03, -2.991544086839798e-02, -2.601531998000563e-03, -4.379298858629100e-03, -4.379298858629100e-03, -1.628530800790835e-35, -2.015097622839664e-33, -1.950822790573296e-07, -3.202958322106699e-65, -2.015960453287886e-49, -2.015960453287949e-49, -5.522321571427130e-02, -5.540933381314757e-02, -5.523087601142630e-02, -5.539517283818182e-02, -5.531786007481870e-02, -5.531786007481870e-02, -2.413787955934072e-02, -2.449735513569585e-02, -2.336336402371447e-02, -2.367175835345403e-02, -2.472671554410449e-02, -2.472671554410449e-02, -3.764700458340320e-02, -5.419873027248277e-02, -3.518416594265411e-02, -4.964252088968835e-02, -3.943054091317220e-02, -3.943054091317220e-02, -4.380323756936072e-04, -4.193087087660270e-03, -3.117694950809383e-04, -6.951156346215920e-02, -1.323820414755455e-03, -1.323820414755455e-03, -1.137554555792183e-84, -9.500254670903668e-66, -2.343210230196163e-72, -3.414121032989203e-05, -5.057809626476241e-64, -5.057809626476056e-64, -5.872752503720607e-02, -5.329324394091488e-02, -5.509972107175321e-02, -5.667830630867619e-02, -5.587925484690449e-02, -5.587925484690449e-02, -5.990002425053920e-02, -2.703738172737086e-02, -3.370552986142483e-02, -4.230124150822963e-02, -3.772951447569069e-02, -3.772951447569069e-02, -5.408104669939991e-02, -7.070064614661171e-03, -1.130714360031805e-02, -2.349394010595107e-02, -1.669980338143779e-02, -1.669980338143779e-02, -2.633180070118880e-02, -8.894550308371067e-08, -3.366493160864659e-06, -2.789016097905887e-02, -2.254274356998230e-04, -2.254274356998237e-04, -2.036490857295122e-25, -2.301956665233810e-253, -1.893322395706806e-115, -1.508759085736594e-04, -4.670043236570665e-68, -4.670043236569654e-68]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_chachiyo_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.009898601206920e-01, -1.009908972959521e-01, -1.009938230044390e-01, -1.009784282144447e-01, -1.009867337485930e-01, -1.009867337485930e-01, -9.452919970409036e-02, -9.453639867373236e-02, -9.470308012577053e-02, -9.441360094050022e-02, -9.453782829480470e-02, -9.453782829480470e-02, -7.135543107305775e-02, -7.105533615227977e-02, -6.316572934430548e-02, -6.358777850441386e-02, -6.379781330619776e-02, -6.379781330619776e-02, -2.879813675386862e-02, -3.037175388474424e-02, -7.555016795598057e-02, -1.300881000401708e-02, -1.959268950216854e-02, -1.959268950216854e-02, -1.096422194919837e-33, -1.284634527422826e-31, -2.649424029390654e-06, -3.811562428789515e-63, -1.872173236507515e-47, -1.872173236507573e-47, -1.172066436301382e-01, -1.174828190000572e-01, -1.172180297778089e-01, -1.174618407664895e-01, -1.173472091627349e-01, -1.173472091627349e-01, -6.399725783741647e-02, -6.475175729454995e-02, -6.230784600123526e-02, -6.296269204634113e-02, -6.525528805080302e-02, -6.525528805080302e-02, -7.990930752083047e-02, -8.155687801619027e-02, -7.711110023409957e-02, -7.927689534552584e-02, -8.106208217812819e-02, -8.106208217812819e-02, -2.922719410557286e-03, -1.871057324740057e-02, -2.184655848557605e-03, -1.169985476578717e-01, -7.546861678022481e-03, -7.546861678022481e-03, -1.754273298543638e-82, -1.149136839244164e-63, -3.442490489924578e-70, -3.125085826795069e-04, -6.339825502202454e-62, -6.339825502202224e-62, -7.419896541464240e-02, -7.869333078862510e-02, -7.743993580025522e-02, -7.614794996027026e-02, -7.682474871774600e-02, -7.682474871774600e-02, -7.143266102834106e-02, -6.846797289043888e-02, -7.529587108861216e-02, -7.932868371413089e-02, -7.783310935879703e-02, -7.783310935879703e-02, -8.350964209949194e-02, -2.777901414310921e-02, -3.896677142835715e-02, -6.106619883681548e-02, -5.032452646022696e-02, -5.032452646022696e-02, -6.688089880322509e-02, -1.259835342979785e-06, -3.721083901203255e-05, -6.455598830464859e-02, -1.685493106288420e-03, -1.685493106288425e-03, -9.812311259001022e-24, -1.053921680303037e-250, -4.050369384098790e-113, -1.185064941603618e-03, -6.280640844575552e-66, -6.280640844574204e-66]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_chachiyo_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.289101127117229e-10, 1.289133739871354e-10, 1.289191286097547e-10, 1.288707992783806e-10, 1.288973615887066e-10, 1.288973615887066e-10, 8.510090933014939e-07, 8.512243382399370e-07, 8.561165686733409e-07, 8.468282598908273e-07, 8.511639797198128e-07, 8.511639797198128e-07, 1.526861366340464e-03, 1.513362354705991e-03, 1.192486393778706e-03, 1.165678287771778e-03, 1.188157770534874e-03, 1.188157770534874e-03, 1.554187396907969e-01, 1.616403490149541e-01, 8.288539945750848e-04, 1.372002035863253e-01, 1.612508107051137e-01, 1.612508107051137e-01, 1.197373335186884e-28, 1.245097220300617e-26, 1.305072763098152e-03, 1.952417534915267e-57, 5.614102357250847e-42, 5.614102357251031e-42, 2.493136040775331e-07, 2.514593513251158e-07, 2.493997146724560e-07, 2.512937075636830e-07, 2.504042796854696e-07, 2.504042796854696e-07, 4.529011914494425e-06, 4.516861274794468e-06, 4.307747904021435e-06, 4.296718456775702e-06, 4.635629858215749e-06, 4.635629858215749e-06, 5.461164595779527e-03, 7.423499031596355e-03, 7.025197241847035e-03, 1.122910624571105e-02, 5.521998041600202e-03, 5.521998041600202e-03, 7.973208549506987e-02, 6.423077502121592e-02, 7.751547808507604e-02, 6.281577208924108e-05, 1.559741394628524e-01, 1.559741394628524e-01, 2.218382413058283e-76, 6.865184144420270e-58, 1.211647924549827e-63, 4.113010182609141e-02, 8.582177752301702e-56, 8.582177752301382e-56, 1.259015253785328e-02, 1.072806592502953e-02, 1.133067026111926e-02, 1.187104325602835e-02, 1.159601628559079e-02, 1.159601628559079e-02, 1.490151032112310e-02, 6.936459389045711e-03, 8.348360741432031e-03, 1.036359333492002e-02, 9.290380901071239e-03, 9.290380901071239e-03, 5.893628069913947e-03, 4.270988596870558e-02, 3.568938195830339e-02, 3.049969844668768e-02, 3.401889168551011e-02, 3.401889168551012e-02, 9.977784290604702e-03, 6.704551960598693e-04, 8.071916305810454e-03, 4.935471229831417e-02, 1.210790449572268e-01, 1.210790449572272e-01, 3.502137852301088e-19, 6.941302951160047e-243, 2.076379772776453e-106, 1.015354843806122e-01, 1.209098204443546e-59, 1.209098204443292e-59]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
