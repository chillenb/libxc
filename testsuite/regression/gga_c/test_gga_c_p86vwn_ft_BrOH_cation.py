
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86vwn_ft_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn_ft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.169112757624798e-01, -1.169105682246804e-01, -1.169088798944766e-01, -1.169193765534588e-01, -1.169136693044594e-01, -1.169136693044594e-01, -5.136325049863397e-02, -5.136619755625165e-02, -5.143501557413999e-02, -5.131854031070326e-02, -5.136712600069297e-02, -5.136712600069297e-02, -3.081730933189459e-02, -3.056221083059164e-02, -2.425599146146238e-02, -2.455556161581353e-02, -2.462510046259777e-02, -2.462510046259777e-02, -5.780516195640281e-03, -6.798102020612200e-03, -3.355236163880584e-02, 3.092052134034746e-03, 2.183765111310583e-03, 2.183765111310569e-03, -3.769100455108063e-03, -3.932629220150370e-03, -9.147306077922426e-03, -2.344299980667871e-03, -2.436339001989537e-03, -2.436339001989537e-03, -6.701299832677388e-02, -6.716070891970577e-02, -6.701908289387447e-02, -6.714946640005728e-02, -6.708803130659134e-02, -6.708803130659134e-02, -3.191032926306911e-02, -3.221564727659997e-02, -3.148166891686704e-02, -3.173197532489536e-02, -3.231638560461983e-02, -3.231638560461983e-02, -4.235589360111515e-02, -5.772956922918815e-02, -3.969775181802164e-02, -5.333113546911420e-02, -4.407921851295746e-02, -4.407921851295744e-02, 5.565476563093173e-03, 1.705980616945678e-03, 4.824779877839636e-03, -7.515636897893554e-02, 4.702020876547940e-03, 4.702020876547940e-03, -1.857584998071018e-03, -2.297659415179471e-03, -1.799738687580905e-03, -1.076387159308828e-03, -2.008145544403506e-03, -2.008145544403505e-03, -6.119547728064405e-02, -5.662134833344526e-02, -5.814288521423890e-02, -5.946811949010306e-02, -5.879737541718196e-02, -5.879737541718196e-02, -6.209226852717285e-02, -3.059664259444465e-02, -3.814773928377362e-02, -4.670718341822512e-02, -4.229222428365260e-02, -4.229222428365260e-02, -5.782053180752154e-02, -3.076524700329063e-03, -1.014536924293643e-02, -2.678447154349300e-02, -1.814778398591106e-02, -1.814778398591108e-02, -2.984720195637481e-02, -9.768876844564242e-03, -6.139980999354748e-03, -3.178595705775426e-02, 3.137943016395871e-03, 3.137943016395868e-03, -5.032950104129497e-03, -6.836981362851313e-04, -1.360076535940941e-03, 2.327368343261069e-03, -1.894276135017484e-03, -1.894276135017480e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86vwn_ft_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn_ft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.834205491593932e-02, -5.834233787256154e-02, -5.834254214990194e-02, -5.834301928598253e-02, -5.834477360264460e-02, -5.834424609956945e-02, -5.833500318104764e-02, -5.833667707287549e-02, -5.833910351669962e-02, -5.834190416396783e-02, -5.833910351669962e-02, -5.834190416396783e-02, -9.424656545913893e-02, -9.424806784549600e-02, -9.425855323516481e-02, -9.426026887948337e-02, -9.453939098462137e-02, -9.453712163443896e-02, -9.404845581014869e-02, -9.404691150807216e-02, -9.428168471301088e-02, -9.424048957392250e-02, -9.428168471301088e-02, -9.424048957392250e-02, -8.634386893916016e-02, -8.606009493288994e-02, -8.619823538399989e-02, -8.585178341062308e-02, -8.021394026091767e-02, -8.063347534662639e-02, -8.084617333715172e-02, -8.071370241432918e-02, -7.886821238440681e-02, -8.292851299840795e-02, -7.886821238440681e-02, -8.292851299840795e-02, -4.698998492511329e-02, -4.610145103586545e-02, -4.846282242773973e-02, -4.737257682585996e-02, -9.123575218150400e-02, -8.868812689310433e-02, -2.534272708557207e-02, -2.525071106303334e-02, -2.508887837561167e-02, -5.002933529136075e-02, -2.508887837561168e-02, -5.002933529136070e-02, -5.037449785319000e-03, -4.615996722041056e-03, -5.271731590566669e-03, -4.771920463894650e-03, 5.596153818200290e-03, 6.692439970520650e-03, -3.002627291839391e-03, -3.073177575971075e-03, -2.721269510025724e-03, -5.354750002303519e-03, -2.721269510025724e-03, -5.354750002303519e-03, -1.189710751255064e-01, -1.190037916699171e-01, -1.193551627143597e-01, -1.193888029334375e-01, -1.189866319248731e-01, -1.190199598146195e-01, -1.193263737454729e-01, -1.193592525339119e-01, -1.191667600527309e-01, -1.192001067389924e-01, -1.191667600527309e-01, -1.192001067389924e-01, -5.651362161981183e-02, -5.651750096695637e-02, -5.785120328014494e-02, -5.787224068933298e-02, -5.303316567838649e-02, -5.290175333315085e-02, -5.422988078136844e-02, -5.409221085308685e-02, -5.881632765231592e-02, -5.915631582004901e-02, -5.881632765231592e-02, -5.915631582004901e-02, -8.568162129112283e-02, -8.592129964326445e-02, -8.220538025475614e-02, -8.215255910091680e-02, -8.537616619141018e-02, -8.227912728375304e-02, -8.184525951259514e-02, -7.829529539170507e-02, -8.361343942220517e-02, -8.839883087450351e-02, -8.361343942220514e-02, -8.839883087450347e-02, 5.274269878118069e-03, 5.278333190388832e-03, -3.409305544736898e-02, -3.404006835038214e-02, 8.464666051834539e-03, 8.543183938108705e-03, -1.177495637387588e-01, -1.178164324213221e-01, -1.342040879337525e-02, -1.323629791439482e-02, -1.342040879337525e-02, -1.323629791439482e-02, -2.482267447457501e-03, -2.355621104813665e-03, -3.008805206647579e-03, -2.947055114159460e-03, -2.398780043844658e-03, -2.216054129979133e-03, 1.720786475160014e-02, 1.726224397604991e-02, -3.428782872903610e-03, -2.264612599053859e-03, -3.428782872903609e-03, -2.264612599053858e-03, -7.584998865031077e-02, -7.537994206591049e-02, -7.957544735323409e-02, -7.913047660140833e-02, -7.845380256541988e-02, -7.799907604098379e-02, -7.738264733903079e-02, -7.692351878104212e-02, -7.793576926216082e-02, -7.747892062136784e-02, -7.793576926216082e-02, -7.747892062136784e-02, -7.349516589327766e-02, -7.308855095478080e-02, -8.075734455005121e-02, -8.045456088557726e-02, -8.266218598735653e-02, -8.229538365179742e-02, -8.198051152594087e-02, -8.163899992525171e-02, -8.266175194103775e-02, -8.232865101259675e-02, -8.266175194103775e-02, -8.232865101259675e-02, -8.424063233837646e-02, -8.405058844881311e-02, -4.639975699281764e-02, -4.628444693344950e-02, -5.797495603398718e-02, -5.764771572194638e-02, -7.201879906855427e-02, -7.167694581308698e-02, -6.608288989455459e-02, -6.609942611201912e-02, -6.608288989455459e-02, -6.609942611201913e-02, -7.883756395899834e-02, -7.836808672057798e-02, 3.760986086486456e-03, 3.903457389820916e-03, 1.546479003415695e-02, 1.600056846145014e-02, -7.133810397104892e-02, -7.028802788688887e-02, 7.361072525572949e-03, 7.547214323771572e-03, 7.361072525572916e-03, 7.547214323771545e-03, -6.469073043309116e-03, -6.133541918664463e-03, -9.000008897150396e-04, -8.973447138989112e-04, -1.855467920647186e-03, -1.708928022947800e-03, 1.043128705825039e-02, 1.049894219003686e-02, -3.125829125732631e-03, -2.148955190510748e-03, -3.125829125732623e-03, -2.148955190510743e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86vwn_ft_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn_ft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.992559865666052e-10, -3.985119731332104e-10, -1.992559865666052e-10, -1.992553885006274e-10, -3.985107770012549e-10, -1.992553885006274e-10, -1.992491082548122e-10, -3.984982165096244e-10, -1.992491082548122e-10, -1.992580659842169e-10, -3.985161319684338e-10, -1.992580659842169e-10, -1.992538936637105e-10, -3.985077873274210e-10, -1.992538936637105e-10, -1.992538936637105e-10, -3.985077873274210e-10, -1.992538936637105e-10, 6.093419261982052e-07, 1.218683852396410e-06, 6.093419261982052e-07, 6.096272839078996e-07, 1.219254567815799e-06, 6.096272839078996e-07, 6.161513193930438e-07, 1.232302638786088e-06, 6.161513193930438e-07, 6.041040570127902e-07, 1.208208114025580e-06, 6.041040570127902e-07, 6.095903985312599e-07, 1.219180797062520e-06, 6.095903985312599e-07, 6.095903985312599e-07, 1.219180797062520e-06, 6.095903985312599e-07, 1.948235346452359e-03, 3.896470692904718e-03, 1.948235346452359e-03, 1.938479564747985e-03, 3.876959129495969e-03, 1.938479564747985e-03, 1.671987809381437e-03, 3.343975618762873e-03, 1.671987809381437e-03, 1.627801955329906e-03, 3.255603910659812e-03, 1.627801955329906e-03, 1.651172732820662e-03, 3.302345465641324e-03, 1.651172732820662e-03, 1.651172732820662e-03, 3.302345465641324e-03, 1.651172732820662e-03, 3.166269565962380e-01, 6.332539131924759e-01, 3.166269565962380e-01, 3.160671691520016e-01, 6.321343383040031e-01, 3.160671691520016e-01, 1.029184762348002e-03, 2.058369524696005e-03, 1.029184762348002e-03, 4.298840754260977e-01, 8.597681508521955e-01, 4.298840754260977e-01, 3.641037752748000e-01, 7.282075505496001e-01, 3.641037752748000e-01, 3.641037752747999e-01, 7.282075505495997e-01, 3.641037752747999e-01, -5.417664413057920e+00, -1.083532882611584e+01, -5.417664413057920e+00, -7.241058925525201e+00, -1.448211785105040e+01, -7.241058925525201e+00, -1.023099030572662e+01, -2.046198061145324e+01, -1.023099030572662e+01, -5.159367879972369e-01, -1.031873575994474e+00, -5.159367879972369e-01, -2.928690477591739e+00, -5.857380955183477e+00, -2.928690477591739e+00, -2.928690477591763e+00, -5.857380955183526e+00, -2.928690477591763e+00, 1.948682254071781e-07, 3.897364508143563e-07, 1.948682254071781e-07, 1.973664668917316e-07, 3.947329337834632e-07, 1.973664668917316e-07, 1.949691597001042e-07, 3.899383194002084e-07, 1.949691597001042e-07, 1.971744127849838e-07, 3.943488255699676e-07, 1.971744127849838e-07, 1.961388299761448e-07, 3.922776599522895e-07, 1.961388299761448e-07, 1.961388299761448e-07, 3.922776599522895e-07, 1.961388299761448e-07, 2.073263081542962e-06, 4.146526163085924e-06, 2.073263081542962e-06, 2.181372799552629e-06, 4.362745599105259e-06, 2.181372799552629e-06, 1.618842316061060e-06, 3.237684632122120e-06, 1.618842316061060e-06, 1.718998981857835e-06, 3.437997963715670e-06, 1.718998981857835e-06, 2.359305516851009e-06, 4.718611033702019e-06, 2.359305516851009e-06, 2.359305516851009e-06, 4.718611033702019e-06, 2.359305516851009e-06, 5.563783869208439e-03, 1.112756773841688e-02, 5.563783869208439e-03, 6.264406321421247e-03, 1.252881264284249e-02, 6.264406321421247e-03, 7.337245931335352e-03, 1.467449186267070e-02, 7.337245931335352e-03, 9.617512812036575e-03, 1.923502562407315e-02, 9.617512812036575e-03, 5.468229934181004e-03, 1.093645986836201e-02, 5.468229934181004e-03, 5.468229934181004e-03, 1.093645986836201e-02, 5.468229934181004e-03, 1.306612280274762e-01, 2.613224560549524e-01, 1.306612280274762e-01, 1.739747462232992e-01, 3.479494924465983e-01, 1.739747462232992e-01, -6.541789376316127e-03, -1.308357875263225e-02, -6.541789376316127e-03, 5.469862945220109e-05, 1.093972589044022e-04, 5.469862945220109e-05, 5.655147443716222e-01, 1.131029488743244e+00, 5.655147443716222e-01, 5.655147443716222e-01, 1.131029488743244e+00, 5.655147443716222e-01, -4.678403383565772e-01, -9.356806767131545e-01, -4.678403383565772e-01, -9.166630085919013e-01, -1.833326017183803e+00, -9.166630085919013e-01, -2.310028445348909e+02, -4.620056890697817e+02, -2.310028445348909e+02, -2.580570704719396e+00, -5.161141409438791e+00, -2.580570704719396e+00, -3.250072444891580e+01, -6.500144889783159e+01, -3.250072444891580e+01, -3.250072444891564e+01, -6.500144889783128e+01, -3.250072444891564e+01, 1.062962631177543e-02, 2.125925262355086e-02, 1.062962631177543e-02, 9.015895331740882e-03, 1.803179066348176e-02, 9.015895331740882e-03, 9.465922662828929e-03, 1.893184532565786e-02, 9.465922662828929e-03, 9.916377427239824e-03, 1.983275485447965e-02, 9.916377427239824e-03, 9.680365890490735e-03, 1.936073178098147e-02, 9.680365890490735e-03, 9.680365890490735e-03, 1.936073178098147e-02, 9.680365890490735e-03, 1.295555477482196e-02, 2.591110954964393e-02, 1.295555477482196e-02, 8.445457751850547e-03, 1.689091550370109e-02, 8.445457751850547e-03, 8.862521907510187e-03, 1.772504381502037e-02, 8.862521907510187e-03, 9.582642225497722e-03, 1.916528445099544e-02, 9.582642225497722e-03, 9.192804085131425e-03, 1.838560817026285e-02, 9.192804085131425e-03, 9.192804085131425e-03, 1.838560817026285e-02, 9.192804085131425e-03, 5.006149039530372e-03, 1.001229807906074e-02, 5.006149039530372e-03, 9.514233652231975e-02, 1.902846730446395e-01, 9.514233652231975e-02, 6.426922138249061e-02, 1.285384427649812e-01, 6.426922138249061e-02, 3.699625936343521e-02, 7.399251872687042e-02, 3.699625936343521e-02, 4.987422257369025e-02, 9.974844514738050e-02, 4.987422257369025e-02, 4.987422257369026e-02, 9.974844514738053e-02, 4.987422257369026e-02, 1.210530480645792e-02, 2.421060961291583e-02, 1.210530480645792e-02, -1.017209574250972e+01, -2.034419148501944e+01, -1.017209574250972e+01, -5.774384870748170e+00, -1.154876974149634e+01, -5.774384870748170e+00, 5.238959485518025e-02, 1.047791897103605e-01, 5.238959485518025e-02, -6.149133688685916e-02, -1.229826737737183e-01, -6.149133688685916e-02, -6.149133688686054e-02, -1.229826737737211e-01, -6.149133688686054e-02, -6.737486049411415e+00, -1.347497209882283e+01, -6.737486049411415e+00, -1.029276177196339e+00, -2.058552354392678e+00, -1.029276177196339e+00, -2.376200818916625e+00, -4.752401637833250e+00, -2.376200818916625e+00, -4.955282258243384e-01, -9.910564516486767e-01, -4.955282258243384e-01, -5.654634140218943e+01, -1.130926828043789e+02, -5.654634140218943e+01, -5.654634140218963e+01, -1.130926828043793e+02, -5.654634140218963e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
