
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_rge2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.758697723888843e-02, -5.758783717355897e-02, -5.759028258862640e-02, -5.757751789319816e-02, -5.758440179934863e-02, -5.758440179934863e-02, -4.722714340700199e-02, -4.723233866314597e-02, -4.735268341729027e-02, -4.714400701010285e-02, -4.723340955394408e-02, -4.723340955394408e-02, -3.171707531218102e-02, -3.148259302837082e-02, -2.576283518201740e-02, -2.603576827587196e-02, -2.618465926142152e-02, -2.618465926142152e-02, -8.095761666590994e-03, -8.773345871344738e-03, -3.444246046565943e-02, -2.772352014108388e-03, -4.700634440886057e-03, -4.700634440886050e-03, -8.569800350108897e-09, -1.145288891017585e-08, -1.285925149794005e-05, -6.122459371329324e-10, -2.252150176487151e-09, -2.252150176487151e-09, -6.462947550478393e-02, -6.483665672463715e-02, -6.463801499945870e-02, -6.482091285056087e-02, -6.473488972188408e-02, -6.473488972188408e-02, -2.540142074392384e-02, -2.590464663940665e-02, -2.427827445464836e-02, -2.471158286220497e-02, -2.624218223731703e-02, -2.624218223731703e-02, -4.240982155393631e-02, -5.773935739227552e-02, -3.979927999010145e-02, -5.337444929075886e-02, -4.419425532052592e-02, -4.419425532052592e-02, -5.810305713844014e-04, -4.332009009207998e-03, -4.549783738193364e-04, -7.525095438678081e-02, -1.497947172710934e-03, -1.497947172710934e-03, -2.393104730045661e-10, -6.481915937959442e-10, -1.156911679424950e-09, -1.191519174871323e-04, -1.290391875230010e-09, -1.290391875230010e-09, -6.115257590040583e-02, -5.663773160344365e-02, -5.815820019808082e-02, -5.947032125596168e-02, -5.880799426125053e-02, -5.880799426125053e-02, -6.196816671957683e-02, -3.103285320246221e-02, -3.820912617273031e-02, -4.666077757621170e-02, -4.226629928599357e-02, -4.226629928599357e-02, -5.782616488355083e-02, -7.497583591307382e-03, -1.252393438618505e-02, -2.688657041876775e-02, -1.901899493699712e-02, -1.901899493699712e-02, -3.020059133889762e-02, -9.683698691319448e-06, -3.695306643612649e-05, -3.156688536862942e-02, -3.864097522747608e-04, -3.864097522747643e-04, -3.330838333880306e-08, -6.060341505734366e-12, -1.013654209384558e-10, -2.954170510616304e-04, -1.132738100869043e-09, -1.132738103037448e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_rge2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.348739199651981e-01, -1.348748857462118e-01, -1.348776437724690e-01, -1.348633070790053e-01, -1.348710373569042e-01, -1.348710373569042e-01, -1.155430695854438e-01, -1.155483224952598e-01, -1.156699758075761e-01, -1.154602268513491e-01, -1.155495913658049e-01, -1.155495913658049e-01, -8.281425419336860e-02, -8.259513852939131e-02, -7.609960909123452e-02, -7.653404517742023e-02, -7.670567898573646e-02, -7.670567898573646e-02, -3.344382830673465e-02, -3.537217310582334e-02, -8.727292451929122e-02, -1.414047164402809e-02, -2.202129525898579e-02, -2.202129525898578e-02, -5.592861539419267e-08, -7.470811008535311e-08, -8.142599030167531e-05, -4.013226438886644e-09, -1.473713166329083e-08, -1.473713166797555e-08, -1.341844006313118e-01, -1.343401757311170e-01, -1.341908532293766e-01, -1.343283822781776e-01, -1.342637499629362e-01, -1.342637499629362e-01, -8.281231837404777e-02, -8.375122621101017e-02, -8.070069541460588e-02, -8.154266750379777e-02, -8.434869285268616e-02, -8.434869285268616e-02, -8.497131583283908e-02, -8.222321475921772e-02, -8.278047358123521e-02, -8.023682097294750e-02, -8.540254773926491e-02, -8.540254773926491e-02, -3.376543539979000e-03, -2.082540791658771e-02, -2.674086326277844e-03, -1.173112198715239e-01, -8.155570289400532e-03, -8.155570289400532e-03, -1.571371039778111e-09, -4.249453138528627e-09, -7.596673507497668e-09, -7.306835505942205e-04, -8.463324935938376e-09, -8.463324937599571e-09, -7.524434261480317e-02, -7.939559892798856e-02, -7.814660356047241e-02, -7.694798247201233e-02, -7.756708772752723e-02, -7.756708772752723e-02, -7.282478392630566e-02, -7.749247371533986e-02, -8.129675243305748e-02, -8.187074101334274e-02, -8.205762119666754e-02, -8.205762119666754e-02, -8.420720181265888e-02, -3.236146765248183e-02, -4.649689483529992e-02, -6.886488647353914e-02, -5.917310941736183e-02, -5.917310941736183e-02, -7.554370143986845e-02, -6.145719169815559e-05, -2.312578388971053e-04, -7.002480377380728e-02, -2.284919717580154e-03, -2.284919717580142e-03, -2.166708338148966e-07, -4.002000797030800e-11, -6.669369654279308e-10, -1.765025075445480e-03, -7.433072750716056e-09, -7.433072752564919e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_rge2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.953941888872878e-10, 1.953975105552591e-10, 1.954017699902524e-10, 1.953525770002190e-10, 1.953798433199468e-10, 1.953798433199468e-10, 1.085111825228730e-06, 1.085319252639117e-06, 1.090000493416578e-06, 1.080879891558676e-06, 1.085232935622188e-06, 1.085232935622188e-06, 1.782510418200733e-03, 1.771738687600821e-03, 1.490745683970717e-03, 1.454549742426449e-03, 1.479640218962745e-03, 1.479640218962745e-03, 1.857562741405901e-01, 1.934948548630460e-01, 9.591030934180613e-04, 1.532670451188571e-01, 1.865740315187164e-01, 1.865740315187165e-01, 6.748503662786595e-03, 7.950597193733623e-03, 4.041813780411261e-02, 2.384940682354827e-03, 4.984554452462413e-03, 4.984554451580622e-03, 2.774202326687521e-07, 2.791505797153639e-07, 2.774892103389072e-07, 2.790166036327817e-07, 2.783004982751749e-07, 2.783004982751749e-07, 6.649265289475267e-06, 6.612799241691288e-06, 6.369540722714179e-06, 6.339957745366552e-06, 6.768442430926689e-06, 6.768442430926689e-06, 5.414330175733561e-03, 6.281773243279705e-03, 7.104667119437397e-03, 9.713277237507813e-03, 5.367448019837473e-03, 5.367448019837473e-03, 9.355408332709927e-02, 7.451963460273053e-02, 9.604783324490265e-02, 5.376689521317406e-05, 1.716394420952387e-01, 1.716394420952387e-01, 2.329512582658939e-03, 2.931993416615554e-03, 2.933526873653223e-02, 9.613761854610212e-02, 1.276675808451127e-02, 1.276675809027427e-02, 1.020962216392726e-02, 9.042209765370372e-03, 9.419630069092161e-03, 9.758248886442045e-03, 9.585875416054211e-03, 9.585875416054211e-03, 1.195122929347803e-02, 7.749140787316921e-03, 8.542036425660694e-03, 9.592459082116955e-03, 9.048890221554879e-03, 9.048890221554879e-03, 5.022445107300160e-03, 5.211065763679114e-02, 4.426632286000775e-02, 3.391227122478753e-02, 4.074413258246107e-02, 4.074413258246108e-02, 1.111062556754841e-02, 3.308040325447819e-02, 5.040388692905222e-02, 5.111674576541471e-02, 1.644232221916589e-01, 1.644232221916587e-01, 8.380744329402032e-03, 3.178998318019389e-03, 3.999917772382385e-03, 1.512534827805218e-01, 1.589771867324018e-02, 1.589771867621677e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
