
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_pw91_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.825577169890580e-02, -5.825603536444073e-02, -5.825678918624409e-02, -5.825287499688361e-02, -5.825498540276830e-02, -5.825498540276830e-02, -5.127928053679943e-02, -5.128122942781956e-02, -5.132641129133094e-02, -5.124870672012690e-02, -5.128170294700296e-02, -5.128170294700296e-02, -3.403599540914408e-02, -3.392394497906280e-02, -3.111856903832714e-02, -3.132624896428540e-02, -3.079212990198347e-02, -3.079212990198347e-02, -1.148661812070588e-02, -1.187956464316390e-02, -3.652375234354764e-02, -7.278619755982966e-03, -5.448780926751298e-03, -5.448780926751296e-03, -1.419642614547176e+00, -1.144954314316332e+00, -1.077509016641708e-02, -8.616360188100659e+00, -3.449518552219260e+00, -3.449518552219299e+00, -5.808976550461448e-02, -5.814498966583208e-02, -5.809205018513847e-02, -5.814080637753423e-02, -5.811789136695622e-02, -5.811789136695622e-02, -3.874599543597610e-02, -3.905993833016549e-02, -3.808864825243174e-02, -3.836591968574254e-02, -3.923809735077707e-02, -3.923809735077707e-02, -3.695644484154378e-02, -4.317598506474489e-02, -3.510132962104669e-02, -4.044782312545400e-02, -3.769072597266748e-02, -3.769072597266748e-02, -4.690229684445760e-03, -9.625611827595710e-03, -4.451368380133782e-03, -5.661720784452189e-02, -5.639475145804537e-03, -5.639475145804537e-03, -1.439412912540210e+01, -7.810090173740062e+00, -2.776829407024862e+00, -4.267453633139022e-03, -4.201292770626607e+00, -4.201292770626635e+00, -4.356975416658116e-02, -4.198105816815390e-02, -4.251343408649932e-02, -4.297216142595163e-02, -4.274038683220901e-02, -4.274038683220901e-02, -4.361780367446145e-02, -3.068133454004410e-02, -3.400809148710916e-02, -3.762294498436942e-02, -3.577468651213876e-02, -3.577468651213876e-02, -4.366432710792290e-02, -1.284404226093719e-02, -1.669765052189488e-02, -2.538609006410095e-02, -2.078548727524800e-02, -2.078548727524800e-02, -2.948372961612013e-02, -1.300822480771070e-02, -6.423287470936180e-03, -2.681356089731711e-02, -4.015070694901712e-03, -4.015070694901707e-03, -5.970260563585313e-01, -8.980690142862994e+01, -1.947089020276358e+01, -3.925120487354003e-03, -3.088821943557380e+00, -3.088821943557389e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_pw91_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.201588284537259e-02, -8.201610367480870e-02, -8.201556548560590e-02, -8.201615053321616e-02, -8.201605204193602e-02, -8.201490644065329e-02, -8.201599657800110e-02, -8.201897661324735e-02, -8.201297917665021e-02, -8.201982748788189e-02, -8.201297917665021e-02, -8.201982748788189e-02, -7.805391875165658e-02, -7.803258072303253e-02, -7.805397748481915e-02, -7.803150273948982e-02, -7.804487330975467e-02, -7.801715566416477e-02, -7.806716617701698e-02, -7.803764110973256e-02, -7.810819328283831e-02, -7.797742321377472e-02, -7.810819328283831e-02, -7.797742321377472e-02, -5.973561421745562e-02, -5.836274405483147e-02, -5.984689741863523e-02, -5.816842512030482e-02, -5.651987369749640e-02, -5.865300455636793e-02, -5.814035468014506e-02, -5.745078744640417e-02, -4.745938722709811e-02, -6.814090903373396e-02, -4.745938722709811e-02, -6.814090903373396e-02, -2.668475409897844e-02, -2.358095885911616e-02, -2.772091782188584e-02, -2.405266211798010e-02, -6.644641826497326e-02, -5.760616286608483e-02, -1.574586239782941e-02, -1.515157293592270e-02, -6.736167721194757e-03, -3.040169066654356e-02, -6.736167721194755e-03, -3.040169066654356e-02, 7.397036426502500e+00, 4.718421651884755e+00, 6.162623996589734e+00, 3.682890051912421e+00, 4.269322841936715e-02, 2.663778380140949e-02, 3.297754506917198e+01, 3.819467055002210e+01, 1.547581976151289e+00, 8.336435084376836e+01, 1.547581976151269e+00, 8.336435084377291e+01, -7.736915693481698e-02, -7.742064317650312e-02, -7.732752980954845e-02, -7.738444672660443e-02, -7.736579401402988e-02, -7.742081752589687e-02, -7.733308628029327e-02, -7.738482168111054e-02, -7.734707278033552e-02, -7.740314728100187e-02, -7.734707278033552e-02, -7.740314728100187e-02, -7.223571385499598e-02, -7.224742167528583e-02, -7.242822773751367e-02, -7.249495183381888e-02, -7.214418871551324e-02, -7.149522394847484e-02, -7.236012016984930e-02, -7.169652136953310e-02, -7.176008071697676e-02, -7.334881159052681e-02, -7.176008071697676e-02, -7.334881159052681e-02, -5.614312198891982e-02, -5.651190332608474e-02, -5.462020471905044e-02, -5.438417096323749e-02, -5.837340090704514e-02, -5.192247408546333e-02, -5.527920604473916e-02, -5.116999518364274e-02, -5.248972137276766e-02, -6.068066577014260e-02, -5.248972137276769e-02, -6.068066577014259e-02, -5.672901795063891e-03, -5.816828486149918e-03, -2.129786361319777e-02, -2.098673508845397e-02, -4.077596739484044e-03, -4.606204160826575e-03, -6.776718323685825e-02, -6.782513559321811e-02, -1.081915592629236e-02, -1.037286933233021e-02, -1.081915592629236e-02, -1.037286933233021e-02, 6.473727134104652e+01, 5.407672992725838e+01, 3.307455958334619e+01, 3.138359933007493e+01, 1.470461902477017e+01, 8.805427198336496e+00, 2.738925888540715e-03, 2.729924411079450e-03, 5.169445278235064e+01, 4.104468143799547e+00, 5.169445278234590e+01, 4.104468143799608e+00, -5.181150433506690e-02, -5.128053316120804e-02, -5.329218986878140e-02, -5.268353041580259e-02, -5.280429321133365e-02, -5.221189039524700e-02, -5.236275350651221e-02, -5.181397203918182e-02, -5.258493478576703e-02, -5.201465112664506e-02, -5.258493478576703e-02, -5.201465112664506e-02, -5.064943311107830e-02, -5.025840865969666e-02, -5.353628636085558e-02, -5.272905036226794e-02, -5.454458891290346e-02, -5.367925605182116e-02, -5.416770487707367e-02, -5.359036053936262e-02, -5.447117304069458e-02, -5.384692906836511e-02, -5.447117304069458e-02, -5.384692906836511e-02, -5.574855268880149e-02, -5.525784903640224e-02, -2.847508206407693e-02, -2.795568164554808e-02, -3.579996699118979e-02, -3.457782037451396e-02, -4.597134368459194e-02, -4.514124701672444e-02, -4.085607084133724e-02, -4.083812020582111e-02, -4.085607084133723e-02, -4.083812020582108e-02, -5.204555097115245e-02, -5.076103766154359e-02, 4.486390143222810e-02, 4.233727391842707e-02, 1.653191931285780e-02, 1.160235860397254e-02, -4.630757202364047e-02, -4.401603639214772e-02, -2.343159583865050e-03, -4.029848538505241e-03, -2.343159583865050e-03, -4.029848538505239e-03, 2.890146128764591e+00, 2.175194057832674e+00, 4.456651453984113e+02, 2.839185090018703e+02, 1.019832153670296e+02, 6.117743383708147e+01, -2.000395584223628e-03, -2.239610176559344e-03, 2.924690339299825e+01, 5.773229179478302e+00, 2.924690339299737e+01, 5.773229179478409e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_pw91_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.188561314422918e-10, 0.000000000000000e+00, 1.188576145799556e-10, 1.188556860248194e-10, 0.000000000000000e+00, 1.188577514080264e-10, 1.188537534883327e-10, 0.000000000000000e+00, 1.188524916228909e-10, 1.188528057166521e-10, 0.000000000000000e+00, 1.188581509190595e-10, 1.188520926234414e-10, 0.000000000000000e+00, 1.188572225264798e-10, 1.188520926234414e-10, 0.000000000000000e+00, 1.188572225264798e-10, 8.105338242592567e-07, 0.000000000000000e+00, 8.110447604051535e-07, 8.105895715575500e-07, 0.000000000000000e+00, 8.111408760663151e-07, 8.124018352555471e-07, 0.000000000000000e+00, 8.126493154786227e-07, 8.087159093315387e-07, 0.000000000000000e+00, 8.090651152991318e-07, 8.117049525699493e-07, 0.000000000000000e+00, 8.098651194064120e-07, 8.117049525699493e-07, 0.000000000000000e+00, 8.098651194064120e-07, 1.529584271844082e-03, 0.000000000000000e+00, 1.517922413275200e-03, 1.526262545825446e-03, 0.000000000000000e+00, 1.511912333599817e-03, 1.377462214133057e-03, 0.000000000000000e+00, 1.396989459687285e-03, 1.352405001058860e-03, 0.000000000000000e+00, 1.347535967608206e-03, 1.266364625781390e-03, 0.000000000000000e+00, 1.396784431565153e-03, 1.266364625781390e-03, 0.000000000000000e+00, 1.396784431565153e-03, 1.869692189452796e-01, 0.000000000000000e+00, 1.474676873864420e-01, 1.938147328503024e-01, 0.000000000000000e+00, 1.471531342959502e-01, 8.859932867046085e-04, 0.000000000000000e+00, 7.325649241912017e-04, 1.866090874429727e-01, 0.000000000000000e+00, 1.697946385296263e-01, 3.031253255605460e-02, 0.000000000000000e+00, 6.157724567707824e-01, 3.031253255605457e-02, 0.000000000000000e+00, 6.157724567707851e-01, -3.058783181206149e+06, 0.000000000000000e+00, -1.765699580751480e+06, -2.261212693277644e+06, 0.000000000000000e+00, -1.212803509057038e+06, -7.484343237077776e+01, 0.000000000000000e+00, -4.476745158402086e+01, -6.365710071196862e+07, 0.000000000000000e+00, -7.410088126407565e+07, -2.303758129633265e+06, 0.000000000000000e+00, -3.726459590454379e+08, -2.303758129633272e+06, 0.000000000000000e+00, -3.726459590454483e+08, 1.467517878165200e-07, 0.000000000000000e+00, 1.470555283262542e-07, 1.470253554575566e-07, 0.000000000000000e+00, 1.473272615633049e-07, 1.467623177620314e-07, 0.000000000000000e+00, 1.470652212838374e-07, 1.470020291765693e-07, 0.000000000000000e+00, 1.473069526445656e-07, 1.468928970717926e-07, 0.000000000000000e+00, 1.471932277366841e-07, 1.468928970717926e-07, 0.000000000000000e+00, 1.471932277366841e-07, 7.366236306517397e-06, 0.000000000000000e+00, 7.369297707188779e-06, 7.242919072601004e-06, 0.000000000000000e+00, 7.258196926447734e-06, 7.252556781246269e-06, 0.000000000000000e+00, 7.222951316563799e-06, 7.154663503156035e-06, 0.000000000000000e+00, 7.118949012918650e-06, 7.310048063112096e-06, 0.000000000000000e+00, 7.420459922945505e-06, 7.310048063112096e-06, 0.000000000000000e+00, 7.420459922945505e-06, 3.999522912681790e-03, 0.000000000000000e+00, 4.100288791819240e-03, 4.135097555821662e-03, 0.000000000000000e+00, 4.137987762557414e-03, 6.267781575130425e-03, 0.000000000000000e+00, 4.691004355070894e-03, 7.823738487709822e-03, 0.000000000000000e+00, 5.797744858789381e-03, 3.180973337241088e-03, 0.000000000000000e+00, 4.962409264028117e-03, 3.180973337241088e-03, 0.000000000000000e+00, 4.962409264028117e-03, -1.506478274034615e-02, 0.000000000000000e+00, 3.598488548721157e-03, 8.840357922674287e-02, 0.000000000000000e+00, 8.556527031306231e-02, -1.745326650826393e-01, 0.000000000000000e+00, -5.151030493195109e-02, 2.373489259569366e-05, 0.000000000000000e+00, 2.383717050449469e-05, 1.694807122741797e-01, 0.000000000000000e+00, 2.023048669400543e-01, 1.694807122741797e-01, 0.000000000000000e+00, 2.023048669400543e-01, -3.417369104345751e+08, 0.000000000000000e+00, -2.416658118354758e+08, -7.741739273305334e+07, 0.000000000000000e+00, -6.763746595657144e+07, -1.872674509309703e+08, 0.000000000000000e+00, -1.114279162925030e+08, -2.671641049161310e+00, 0.000000000000000e+00, -2.542487959950047e+00, -3.981399323428091e+08, 0.000000000000000e+00, -2.267221712112647e+07, -3.981399323428038e+08, 0.000000000000000e+00, -2.267221712112724e+07, 7.273999533432281e-03, 0.000000000000000e+00, 7.058342692612300e-03, 6.206451552441449e-03, 0.000000000000000e+00, 6.011430896922015e-03, 6.441190729767570e-03, 0.000000000000000e+00, 6.241332760644315e-03, 6.714279319490402e-03, 0.000000000000000e+00, 6.507697806646830e-03, 6.564089275802994e-03, 0.000000000000000e+00, 6.361039224762401e-03, 6.564089275802994e-03, 0.000000000000000e+00, 6.361039224762401e-03, 8.681692853261147e-03, 0.000000000000000e+00, 8.423102279324980e-03, 6.446435615066626e-03, 0.000000000000000e+00, 6.243094489711414e-03, 6.681050930298052e-03, 0.000000000000000e+00, 6.468001106817106e-03, 7.043767539324412e-03, 0.000000000000000e+00, 6.842161372735947e-03, 6.857660856711963e-03, 0.000000000000000e+00, 6.651251909287120e-03, 6.857660856711963e-03, 0.000000000000000e+00, 6.651251909287120e-03, 3.285669743388829e-03, 0.000000000000000e+00, 3.260870225491219e-03, 5.576848807543310e-02, 0.000000000000000e+00, 5.371287860648682e-02, 4.222011267035275e-02, 0.000000000000000e+00, 3.975081365081460e-02, 2.758903018922535e-02, 0.000000000000000e+00, 2.641757675518424e-02, 3.414799340164698e-02, 0.000000000000000e+00, 3.445860308945252e-02, 3.414799340164700e-02, 0.000000000000000e+00, 3.445860308945250e-02, 9.263377760419416e-03, 0.000000000000000e+00, 8.823723397803332e-03, -8.155386791310910e+01, 0.000000000000000e+00, -7.650012653662667e+01, -1.378727142010007e+01, 0.000000000000000e+00, -9.964230725249701e+00, 4.153836073991592e-02, 0.000000000000000e+00, 3.702361106864264e-02, -5.450641076981193e-01, 0.000000000000000e+00, -1.264180433805329e-01, -5.450641076981179e-01, 0.000000000000000e+00, -1.264180433805323e-01, -3.677250801081365e+05, 0.000000000000000e+00, -2.661808630473987e+05, -9.571568271685583e+10, 0.000000000000000e+00, -9.359153553419258e+10, -2.067853081383361e+09, 0.000000000000000e+00, -1.185413342182453e+09, -6.531151193755410e-01, 0.000000000000000e+00, -5.318573827034047e-01, -3.988993429827049e+08, 0.000000000000000e+00, -3.074780529137165e+07, -3.988993429827031e+08, 0.000000000000000e+00, -3.074780529137237e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
