
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_cs1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.654952393608643e-02, -5.654958681416263e-02, -5.654978053576826e-02, -5.654875248219006e-02, -5.654955782146081e-02, -5.654955782146081e-02, -5.185236567442993e-02, -5.185299219520328e-02, -5.187033701564779e-02, -5.184126863116088e-02, -5.185270538073138e-02, -5.185270538073138e-02, -3.623872404481151e-02, -3.614839692891220e-02, -3.327092263387067e-02, -3.351219754604137e-02, -3.620626242389886e-02, -3.620626242389886e-02, -1.274128519988465e-02, -1.355428526816353e-02, -4.008781528060227e-02, 3.070154664196814e-04, -1.299678627041283e-02, -1.299678627041283e-02, 2.481179598803117e-03, 2.591950762705699e-03, 8.193651482891390e-03, 1.220696931771896e-03, 2.565707022382862e-03, 2.565707022382862e-03, -5.476912597450110e-02, -5.477959032081801e-02, -5.477017848328494e-02, -5.477831616723974e-02, -5.477453262063101e-02, -5.477453262063101e-02, -4.209712111287012e-02, -4.242675305914031e-02, -4.166004823886903e-02, -4.192693842143928e-02, -4.286193803386869e-02, -4.286193803386869e-02, -3.758379284167702e-02, -3.966877793603105e-02, -3.677309493001134e-02, -3.835052713817359e-02, -3.830778109340089e-02, -3.830778109340089e-02, 7.708380451481868e-03, -5.191994216503881e-03, 7.148371668076655e-03, -5.059972814871380e-02, 4.023760280048262e-03, 4.023760280048262e-03, 1.178229991369602e-03, 1.343146436204043e-03, 1.010192766163672e-03, 8.931204364639442e-03, 1.225198608114258e-03, 1.225198608114258e-03, -3.908614960929542e-02, -3.895763608238639e-02, -3.901035190850971e-02, -3.904601872622068e-02, -3.902873353191232e-02, -3.902873353191232e-02, -3.866374491446344e-02, -3.407193506979751e-02, -3.602684634397142e-02, -3.737054661603288e-02, -3.675178152730284e-02, -3.675178152730284e-02, -4.025087924324714e-02, -1.208306194591811e-02, -1.906797004689549e-02, -2.851761977981235e-02, -2.428779715577618e-02, -2.428779715577617e-02, -3.242261194763546e-02, 7.980901307063772e-03, 9.110798260185635e-03, -2.910027645655633e-02, 7.786685676666381e-03, 7.786685676666370e-03, 2.887216861592492e-03, 3.725046801497198e-04, 7.047240493245263e-04, 7.409677019620965e-03, 1.043624279521894e-03, 1.043624279521892e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_cs1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.310421781954770e-02, -6.310400022206344e-02, -6.310334750828805e-02, -6.310690479972066e-02, -6.310410040719032e-02, -6.310410040719032e-02, -6.324321977439420e-02, -6.324117530594948e-02, -6.318525345098167e-02, -6.328255683459741e-02, -6.324218468385462e-02, -6.324218468385462e-02, -5.788902584302220e-02, -5.807729561405342e-02, -6.371362965319585e-02, -6.351060974825648e-02, -5.795658751549176e-02, -5.795658751549176e-02, -4.462375852588210e-02, -4.439976801444748e-02, -5.526498741530188e-02, -3.346383790706234e-02, -4.455742280373207e-02, -4.455742280373207e-02, 3.186331694072805e-03, 3.317060895490001e-03, 6.390474611691141e-03, 1.613111866781401e-03, 3.283914894246363e-03, 3.283914894246363e-03, -5.918943955505913e-02, -5.915244035954628e-02, -5.918573185391317e-02, -5.915695911132796e-02, -5.917030782624609e-02, -5.917030782624609e-02, -7.860980190527933e-02, -7.801968550313940e-02, -7.951333368845963e-02, -7.904442297329761e-02, -7.705269407079970e-02, -7.705269407079970e-02, -4.706855758268044e-02, -4.436880143459802e-02, -4.681890902026125e-02, -4.372302357027691e-02, -4.672428376098731e-02, -4.672428376098731e-02, -1.327753943742351e-02, -4.602446032296792e-02, -1.425334375429897e-02, -5.348146936518088e-02, -2.431078816732834e-02, -2.431078816732834e-02, 1.557542541641863e-03, 1.771696377578873e-03, 1.334096116857866e-03, 1.541831211925908e-03, 1.616474229266209e-03, 1.616474229266207e-03, -4.346007737860579e-02, -4.363690542901037e-02, -4.354776640963780e-02, -4.349819544898470e-02, -4.352080404410608e-02, -4.352080404410608e-02, -4.306230778875032e-02, -5.015449404210105e-02, -4.658951140514238e-02, -4.425680348362022e-02, -4.527257486063783e-02, -4.527257486063782e-02, -4.496824944834187e-02, -5.268866586803064e-02, -5.291522952767928e-02, -4.621684992930879e-02, -4.973111537571233e-02, -4.973111537571231e-02, -4.936336521084324e-02, 7.190738405698591e-03, 4.593906729844003e-03, -4.148508240920579e-02, -7.962693545889897e-03, -7.962693545889925e-03, 3.681162084812993e-03, 4.958613123314034e-04, 9.357261339493293e-04, -7.841529596110740e-03, 1.378856783819744e-03, 1.378856783819741e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_cs1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.593598515586639e-11, 1.593549403634288e-11, 1.593359259261452e-11, 1.594162948508384e-11, 1.593572373564595e-11, 1.593572373564595e-11, 1.604450138404271e-07, 1.604266904814172e-07, 1.598904702260103e-07, 1.606469100623022e-07, 1.604322350366178e-07, 1.604322350366178e-07, 6.108767870732997e-04, 6.165915401378078e-04, 7.683568068268730e-04, 7.381469326418116e-04, 6.129472838805713e-04, 6.129472838805713e-04, 2.286529162383240e-01, 2.192522523078849e-01, 2.233977910396754e-04, 5.118898988379095e-01, 2.258949816465840e-01, 2.258949816465840e-01, 4.539730352399027e+00, 4.545076369415368e+00, 1.703759632798999e+00, 3.268213810894512e+00, 4.723058276199669e+00, 4.723058276199669e+00, 1.387582657433982e-08, 1.377806720949495e-08, 1.386598626801761e-08, 1.378997017575075e-08, 1.382546334091929e-08, 1.382546334091929e-08, 4.007301934687500e-06, 3.852379154534087e-06, 4.091819574987110e-06, 3.968822296487907e-06, 3.793029956614841e-06, 3.793029956614841e-06, 7.640554672804731e-04, 1.700590826670189e-04, 1.018639346333373e-03, 3.878239950391825e-04, 5.820800055321031e-04, 5.820800055321031e-04, 7.397824791924226e-01, 1.688156505163924e-01, 8.434603800901254e-01, 8.647431879539211e-07, 7.131605800136241e-01, 7.131605800136241e-01, 3.468825967541605e+00, 3.469020675650536e+00, 9.967319317983506e+00, 1.551726057312092e+00, 5.130852259796765e+00, 5.130852259797552e+00, 6.628742189774272e-05, 1.964258729089010e-04, 1.503628409170292e-04, 1.142927501928198e-04, 1.323754265791214e-04, 1.323754265791214e-04, 5.167146365235135e-05, 2.047858742739497e-03, 1.317028968983720e-03, 7.460978996823513e-04, 1.019373040860070e-03, 1.019373040860069e-03, 1.478872279285044e-04, 7.668598993619340e-02, 3.968605301692275e-02, 1.148295486261821e-02, 2.250693044566212e-02, 2.250693044566213e-02, 3.401600024814488e-03, 1.461348070693443e+00, 1.379712173413780e+00, 1.257263351157215e-02, 1.350150573918327e+00, 1.350150573918329e+00, 3.392901008596808e+00, 6.035854104900317e+00, 5.176881086166627e+00, 1.669708958405735e+00, 7.509279257232256e+00, 7.509279257231118e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
