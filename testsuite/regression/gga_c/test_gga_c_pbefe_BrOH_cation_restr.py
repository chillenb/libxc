
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbefe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.365701704977042e-02, -6.365788205719414e-02, -6.366034299486123e-02, -6.364750293447981e-02, -6.365442734689962e-02, -6.365442734689962e-02, -5.252570771031151e-02, -5.253085952073973e-02, -5.265019910482517e-02, -5.244338357116905e-02, -5.253193907917661e-02, -5.253193907917661e-02, -3.558519610725409e-02, -3.535595120092205e-02, -2.967644554420507e-02, -2.995848174542870e-02, -3.010600281677469e-02, -3.010600281677469e-02, -1.018772439959741e-02, -1.095223802045398e-02, -3.843246451040603e-02, -3.778902283970277e-03, -6.188282979427919e-03, -6.188282979427919e-03, -1.301453076408732e-08, -1.739209706544979e-08, -1.938027254610397e-05, -9.300113272712368e-10, -3.420744147998647e-09, -3.420744147998647e-09, -6.993512784304581e-02, -7.013665669058622e-02, -6.994343717827892e-02, -7.012134615923325e-02, -7.003767350542343e-02, -7.003767350542343e-02, -3.002559844663558e-02, -3.055720560095455e-02, -2.883876685547896e-02, -2.929915677546043e-02, -3.091076220535796e-02, -3.091076220535796e-02, -4.538938145570050e-02, -5.910336010186412e-02, -4.283582943328859e-02, -5.495439162827959e-02, -4.704291587635784e-02, -4.704291587635784e-02, -8.410579441798581e-04, -5.766863884748781e-03, -6.621591008289395e-04, -7.804145682463887e-02, -2.101287417150722e-03, -2.101287417150722e-03, -3.635296736168056e-10, -9.846087222966284e-10, -1.757248772306693e-09, -1.769514103971272e-04, -1.960002952444911e-09, -1.960002952444911e-09, -6.165690841269288e-02, -5.786442053056245e-02, -5.915192195386601e-02, -6.025460962546675e-02, -5.969897054990059e-02, -5.969897054990059e-02, -6.221042422979655e-02, -3.447810284708024e-02, -4.126851364708808e-02, -4.897664506015763e-02, -4.500427359666907e-02, -4.500427359666907e-02, -5.934669954757539e-02, -9.589787345344322e-03, -1.526468841749004e-02, -2.998076701783616e-02, -2.211863162594987e-02, -2.211863162594987e-02, -3.355464688899909e-02, -1.460902546221691e-05, -5.542040403245138e-05, -3.427943922820715e-02, -5.636157492355932e-04, -5.636157492355898e-04, -5.057048862292808e-08, -9.206667098825715e-12, -1.539844797000593e-10, -4.330877884564857e-04, -1.720549301131398e-09, -1.720549303299802e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbefe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.414169875196943e-01, -1.414178968970580e-01, -1.414204984880424e-01, -1.414069990267940e-01, -1.414142771960272e-01, -1.414142771960272e-01, -1.204938564243506e-01, -1.204983251938199e-01, -1.206018866210828e-01, -1.204239871521347e-01, -1.204994914084323e-01, -1.204994914084323e-01, -8.563600589611232e-02, -8.547743717095632e-02, -8.055443096673791e-02, -8.093694408134658e-02, -8.105664230549645e-02, -8.105664230549645e-02, -3.885745833127315e-02, -4.067675814853990e-02, -8.997759924521587e-02, -1.833583917232300e-02, -2.718254920038336e-02, -2.718254920038334e-02, -8.492360818661399e-08, -1.134312524718454e-07, -1.223043518039177e-04, -6.095858193433926e-09, -2.238202060922993e-08, -2.238202060550972e-08, -1.378682842051080e-01, -1.379999743534148e-01, -1.378737484226449e-01, -1.379900155268789e-01, -1.379353774783946e-01, -1.379353774783946e-01, -9.054389377778303e-02, -9.139009894364700e-02, -8.865921861981174e-02, -8.942261307230499e-02, -9.191393605658943e-02, -9.191393605658943e-02, -8.483461778324339e-02, -8.110060313636260e-02, -8.285918008304781e-02, -7.908306394731315e-02, -8.502903973345406e-02, -8.502903973345406e-02, -4.781084532518461e-03, -2.611871852193880e-02, -3.816680867045383e-03, -1.164489041563239e-01, -1.102567361731165e-02, -1.102567361731165e-02, -2.386943632918541e-09, -6.454630311299274e-09, -1.153781568026046e-08, -1.074336617016162e-03, -1.285416961877106e-08, -1.285416961544866e-08, -7.466466632241847e-02, -7.832286330782766e-02, -7.718756880935261e-02, -7.612853146638218e-02, -7.667219561598093e-02, -7.667219561598093e-02, -7.252303894074945e-02, -7.925021236518603e-02, -8.150970346459813e-02, -8.096046644775021e-02, -8.162742201366983e-02, -8.162742201366983e-02, -8.304751415022740e-02, -3.844345188178577e-02, -5.199846315271396e-02, -7.040713423292794e-02, -6.284475409290248e-02, -6.284475409290248e-02, -7.719810898680277e-02, -9.244349852607206e-05, -3.449158079262928e-04, -7.018127318949970e-02, -3.271835234597062e-03, -3.271835234597057e-03, -3.288774593684529e-07, -6.079652086589474e-11, -1.013119748895725e-09, -2.546373723904237e-03, -1.128950549659281e-08, -1.128950550199494e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbefe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.964159887628936e-10, 1.964191659097990e-10, 1.964229952090809e-10, 1.963759478023558e-10, 1.964020597556955e-10, 1.964020597556955e-10, 1.075713886237948e-06, 1.075906962873387e-06, 1.080256726633227e-06, 1.071724276292169e-06, 1.075819569330851e-06, 1.075819569330851e-06, 1.730564621567572e-03, 1.722207437174304e-03, 1.497141874370041e-03, 1.458912493608065e-03, 1.482496358268124e-03, 1.482496358268124e-03, 2.090893862633768e-01, 2.151110388809860e-01, 9.275329599161020e-04, 1.958456287802532e-01, 2.254376174244681e-01, 2.254376174244678e-01, 1.024676087778484e-02, 1.207111675492715e-02, 6.066211446900698e-02, 3.622543716358743e-03, 7.570136916345047e-03, 7.570136914437283e-03, 2.696551792516328e-07, 2.712482329632617e-07, 2.697186003973419e-07, 2.711248143691209e-07, 2.704657273728309e-07, 2.704657273728309e-07, 6.993484402484815e-06, 6.938299411813444e-06, 6.738894165303873e-06, 6.692828601316591e-06, 7.089312763708800e-06, 7.089312763708800e-06, 4.920286892982069e-03, 5.333456825794709e-03, 6.495363555569421e-03, 8.314554379676081e-03, 4.842049690092838e-03, 4.842049690092838e-03, 1.317501220126306e-01, 9.172049898800132e-02, 1.364369643172657e-01, 4.780117993189780e-05, 2.297398533162985e-01, 2.297398533162985e-01, 3.538546284407998e-03, 4.453443844594670e-03, 4.455353501405408e-02, 1.410213478030063e-01, 1.938991133454463e-02, 1.938991133750645e-02, 8.420317377775233e-03, 7.642031524098115e-03, 7.897241477648694e-03, 8.123333536177637e-03, 8.008593951903776e-03, 8.008593951903776e-03, 9.772540373731889e-03, 7.379780732670695e-03, 7.837858017663065e-03, 8.457566718948506e-03, 8.143115387249249e-03, 8.143115387249249e-03, 4.287178953893228e-03, 6.025546573910452e-02, 4.760066953412382e-02, 3.223034529413760e-02, 4.097336235711291e-02, 4.097336235711293e-02, 1.056346578871734e-02, 4.972566915939836e-02, 7.508037935729558e-02, 4.680727187455799e-02, 2.343816832399524e-01, 2.343816832399519e-01, 1.272008541472320e-02, 4.829374654397982e-03, 6.076091798086464e-03, 2.173663531345270e-01, 2.414536446037411e-02, 2.414536447046366e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
