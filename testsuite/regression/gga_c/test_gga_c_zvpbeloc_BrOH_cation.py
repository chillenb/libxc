
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zvpbeloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.704538192878862e-02, -6.704626685704351e-02, -6.704878826490231e-02, -6.703565235904117e-02, -6.704273579243138e-02, -6.704273579243138e-02, -5.193921477956975e-02, -5.194514488989525e-02, -5.208255297978564e-02, -5.184499150930397e-02, -5.194645194127493e-02, -5.194645194127493e-02, -2.357652578557128e-02, -2.321806443603886e-02, -1.489200873498970e-02, -1.528409692112733e-02, -1.506586646165044e-02, -1.506586646165044e-02, -1.742357744284291e-03, -2.066762777287908e-03, -2.785264999509084e-02, -2.196471838494689e-04, -1.699507323942150e-06, -1.699507323942150e-06, -2.207865181779192e-13, -2.254920765563463e-13, -3.606451688100479e-08, -2.598835149548564e-14, -3.282455434865369e-80, -3.282455434865463e-80, -7.185639090160119e-02, -7.206710414428494e-02, -7.186508387242904e-02, -7.205110329198292e-02, -7.196362533927116e-02, -7.196362533927116e-02, -2.109463004876409e-02, -2.181616086507315e-02, -1.957460334844744e-02, -2.019294740076924e-02, -2.225765009695577e-02, -2.225765009695577e-02, -4.011162130825540e-02, -5.899694835990917e-02, -3.609796227043047e-02, -5.401514469638758e-02, -4.196286464679348e-02, -4.196286464679345e-02, -1.463069487015062e-05, -3.869422438269387e-04, -9.177652871799407e-06, -7.892378085104763e-02, -7.307485027154207e-05, -7.307485027154207e-05, -1.785968329530860e-15, -3.242528476384135e-14, -4.709652127833481e-15, -1.461919682229669e-06, -5.763009789084348e-52, -5.763137212480073e-52, -6.181917394065921e-02, -5.777471746557738e-02, -5.922039095215730e-02, -6.039933998593619e-02, -5.981213632204457e-02, -5.981213632204457e-02, -6.231446938284228e-02, -2.283690068242058e-02, -3.415086838934758e-02, -4.635187824347159e-02, -4.025745774585067e-02, -4.025745774585067e-02, -5.915571096115710e-02, -1.029237932490020e-03, -3.113832051438593e-03, -1.844812515844009e-02, -8.431680276761147e-03, -8.431680276761154e-03, -2.186306833192348e-02, -2.965899291722987e-08, -2.035806104553399e-07, -2.646638601439104e-02, -8.601284668055327e-06, -8.601284668061426e-06, -5.975075510703841e-12, -1.315864257669184e-16, -8.560277928970211e-18, -6.361866429209875e-06, -7.985135533529695e-48, -7.984934727637694e-48]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zvpbeloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.466550632480795e-01, -1.466552820185014e-01, -1.466558322236293e-01, -1.466562011318556e-01, -1.466586333304513e-01, -1.466582254617116e-01, -1.466452528884616e-01, -1.466465468277541e-01, -1.466515727470630e-01, -1.466537379762987e-01, -1.466515727470630e-01, -1.466537379762987e-01, -1.311610245892897e-01, -1.311645336401825e-01, -1.311638773311637e-01, -1.311678846794234e-01, -1.312402765846076e-01, -1.312349698638511e-01, -1.311158039974913e-01, -1.311122003663818e-01, -1.312147689788145e-01, -1.311185472630185e-01, -1.312147689788145e-01, -1.311185472630185e-01, -1.024091030173789e-01, -1.008926309643875e-01, -1.020794941345193e-01, -1.002411523128012e-01, -8.263914068484331e-02, -8.441648000602947e-02, -8.499985596063500e-02, -8.443350171399686e-02, -7.561196816614640e-02, -9.247145679536711e-02, -7.561196816614640e-02, -9.247145679536711e-02, -1.646061011153314e-02, -1.279045865231557e-02, -1.941676177382687e-02, -1.454179025484615e-02, -1.146795790253849e-01, -1.016021628782566e-01, -2.242382157992618e-03, -2.026778256721053e-03, -1.145971116818468e-05, -6.820596548754296e-05, -1.145971116818475e-05, -6.820596548754266e-05, -1.292243397524948e-11, 5.994110876836321e-12, -1.415530019755736e-11, 6.635022582974865e-12, -6.607698562574093e-07, -1.705416684241073e-07, 2.268388177427938e-13, -8.402682229413939e-13, 2.525721358029343e-78, -2.684730599321920e-77, 2.525722643320837e-78, -2.684730496498683e-77, -1.433111058040529e-01, -1.433780434818734e-01, -1.434009860076276e-01, -1.434698553968007e-01, -1.433142572543518e-01, -1.433824474155208e-01, -1.433949074218527e-01, -1.434622148608431e-01, -1.433567515913689e-01, -1.434249998307610e-01, -1.433567515913689e-01, -1.434249998307610e-01, -9.954979519463847e-02, -9.955819057767239e-02, -1.010331331785604e-01, -1.010794794100806e-01, -9.624302479779163e-02, -9.597300945123644e-02, -9.767198259524285e-02, -9.738414738805284e-02, -1.015867272054723e-01, -1.023473562311708e-01, -1.015867272054723e-01, -1.023473562311708e-01, -1.010401506750541e-01, -1.028703097072500e-01, -8.385565083722676e-02, -8.344125403431912e-02, -1.132582519320179e-01, -8.914806511100673e-02, -9.903096972185345e-02, -6.855817281583965e-02, -8.254656504132786e-02, -1.187186976393725e-01, -8.254656504132785e-02, -1.187186976393724e-01, -1.592723677564360e-04, -1.453238181034972e-04, -3.743539458271226e-03, -3.635921664666980e-03, -1.241546295678172e-04, -7.237109754688577e-05, -1.182456493857298e-01, -1.184777267901041e-01, -9.322410447606011e-04, -5.686957347125350e-04, -9.322410447606011e-04, -5.686957347125350e-04, -1.360287835325094e-13, 8.135981653268911e-14, -9.878274517806458e-13, 2.296770744932031e-13, -5.369872871234030e-13, 3.434911503545700e-13, -1.628777285639899e-05, -1.488108987341226e-05, -3.566511396395236e-49, 1.051989473594833e-49, -3.566588742815508e-49, 1.052013857143359e-49, -7.675076780835120e-02, -7.282701855047866e-02, -8.242874609284827e-02, -7.868393716913021e-02, -8.037790907794577e-02, -7.655600462833036e-02, -7.870291624267554e-02, -7.485282064075810e-02, -7.953420241404602e-02, -7.569828432059755e-02, -7.953420241404602e-02, -7.569828432059755e-02, -7.419359842307635e-02, -7.073271117581537e-02, -9.666015336352309e-02, -9.460110583224420e-02, -1.019447701609155e-01, -9.900638726282503e-02, -9.368188190945545e-02, -9.071600704533483e-02, -9.901449629106533e-02, -9.620697155610133e-02, -9.901449629106533e-02, -9.620697155610133e-02, -8.687123256501006e-02, -8.543826063433807e-02, -9.408404395514278e-03, -9.139201981892605e-03, -2.545010273187489e-02, -2.426422403187582e-02, -8.393353454391600e-02, -8.105645418158321e-02, -5.357819437529086e-02, -5.367644741939131e-02, -5.357819437529091e-02, -5.367644741939128e-02, -9.449219036357448e-02, -9.113230656846304e-02, -3.500639998483220e-07, -2.973237361765315e-07, -2.883595610210583e-06, -1.588497612862720e-06, -9.253904871725904e-02, -8.122891631326129e-02, -1.215862867334282e-04, -6.330825463655545e-05, -1.215862867334645e-04, -6.330825463653862e-05, -1.798602340321308e-10, 3.366424893801482e-11, -2.866872522936126e-15, -6.311826888590965e-17, -1.392851283400491e-15, 9.487980864968400e-16, -7.374613361336620e-05, -6.007867851784560e-05, -4.704374041056407e-45, 1.577505773890354e-45, -4.704258000555146e-45, 1.577464115828950e-45]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zvpbeloc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.004875531049759e-10, 4.009751062099519e-10, 2.004875531049759e-10, 2.004905904617433e-10, 4.009811809234867e-10, 2.004905904617433e-10, 2.004938989172828e-10, 4.009877978345656e-10, 2.004938989172828e-10, 2.004489290367500e-10, 4.008978580734999e-10, 2.004489290367500e-10, 2.004739381314264e-10, 4.009478762628528e-10, 2.004739381314264e-10, 2.004739381314264e-10, 4.009478762628528e-10, 2.004739381314264e-10, 1.236783010970113e-06, 2.473566021940225e-06, 1.236783010970113e-06, 1.236976098360217e-06, 2.473952196720433e-06, 1.236976098360217e-06, 1.241301501263207e-06, 2.482603002526415e-06, 1.241301501263207e-06, 1.232632724661616e-06, 2.465265449323232e-06, 1.232632724661616e-06, 1.236866028011607e-06, 2.473732056023215e-06, 1.236866028011607e-06, 1.236866028011607e-06, 2.473732056023215e-06, 1.236866028011607e-06, 2.707964819178405e-03, 5.415929638356810e-03, 2.707964819178405e-03, 2.685632353402142e-03, 5.371264706804283e-03, 2.685632353402142e-03, 2.011018171257122e-03, 4.022036342514245e-03, 2.011018171257122e-03, 1.978510075797850e-03, 3.957020151595700e-03, 1.978510075797850e-03, 1.972119236657601e-03, 3.944238473315201e-03, 1.972119236657601e-03, 1.972119236657601e-03, 3.944238473315201e-03, 1.972119236657601e-03, 9.995441762047386e-02, 1.999088352409477e-01, 9.995441762047386e-02, 1.145652872260371e-01, 2.291305744520741e-01, 1.145652872260371e-01, 1.435125390366140e-03, 2.870250780732280e-03, 1.435125390366140e-03, 2.749794372283919e-02, 5.499588744567838e-02, 2.749794372283919e-02, 1.661619057165438e-04, 3.323238114330876e-04, 1.661619057165438e-04, 1.661619057165467e-04, 3.323238114330934e-04, 1.661619057165467e-04, 3.463463679145373e-07, 6.926927358290746e-07, 3.463463679145373e-07, 3.117404366510197e-07, 6.234808733020395e-07, 3.117404366510197e-07, 2.255599720301609e-04, 4.511199440603218e-04, 2.255599720301609e-04, 2.019959694368102e-07, 4.039919388736204e-07, 2.019959694368102e-07, 1.448859356917832e-73, 2.897718713835664e-73, 1.448859356917832e-73, 1.448860697947923e-73, 2.897721395895847e-73, 1.448860697947923e-73, 2.816388112204172e-07, 5.632776224408344e-07, 2.816388112204172e-07, 2.831255706414218e-07, 5.662511412828437e-07, 2.831255706414218e-07, 2.816977643773442e-07, 5.633955287546884e-07, 2.816977643773442e-07, 2.830101646498237e-07, 5.660203292996474e-07, 2.830101646498237e-07, 2.823954821018419e-07, 5.647909642036837e-07, 2.823954821018419e-07, 2.823954821018419e-07, 5.647909642036837e-07, 2.823954821018419e-07, 8.791882760056325e-06, 1.758376552011265e-05, 8.791882760056325e-06, 8.767719321622729e-06, 1.753543864324546e-05, 8.767719321622729e-06, 8.351894499696493e-06, 1.670378899939299e-05, 8.351894499696493e-06, 8.342737626385606e-06, 1.668547525277121e-05, 8.342737626385606e-06, 8.988763919302511e-06, 1.797752783860502e-05, 8.988763919302511e-06, 8.988763919302511e-06, 1.797752783860502e-05, 8.988763919302511e-06, 7.981385457916695e-03, 1.596277091583339e-02, 7.981385457916695e-03, 6.183155195567242e-03, 1.236631039113448e-02, 6.183155195567242e-03, 1.083725184226055e-02, 2.167450368452109e-02, 1.083725184226055e-02, 1.046789745035899e-02, 2.093579490071797e-02, 1.046789745035899e-02, 7.544114684564735e-03, 1.508822936912947e-02, 7.544114684564735e-03, 7.544114684564733e-03, 1.508822936912947e-02, 7.544114684564733e-03, 4.913496801716534e-03, 9.826993603433068e-03, 4.913496801716534e-03, 1.590626309695076e-02, 3.181252619390153e-02, 1.590626309695076e-02, 4.008862021580161e-03, 8.017724043160323e-03, 4.008862021580161e-03, 4.868083318099698e-05, 9.736166636199395e-05, 4.868083318099698e-05, 1.813242240570955e-02, 3.626484481141910e-02, 1.813242240570955e-02, 1.813242240570955e-02, 3.626484481141910e-02, 1.813242240570955e-02, 3.469221689634705e-08, 6.938443379269409e-08, 3.469221689634705e-08, 2.925891873263205e-07, 5.851783746526410e-07, 2.925891873263205e-07, 2.376672673234757e-07, 4.753345346469514e-07, 2.376672673234757e-07, 2.374655675992418e-03, 4.749311351984835e-03, 2.374655675992418e-03, 1.136038131711173e-44, 2.272076263422345e-44, 1.136038131711173e-44, 1.136042280574786e-44, 2.272084561149573e-44, 1.136042280574786e-44, 8.251555253406723e-03, 1.650311050681345e-02, 8.251555253406723e-03, 8.833471897357137e-03, 1.766694379471427e-02, 8.833471897357137e-03, 8.658757653909544e-03, 1.731751530781909e-02, 8.658757653909544e-03, 8.490228084740441e-03, 1.698045616948088e-02, 8.490228084740441e-03, 8.577328182908897e-03, 1.715465636581779e-02, 8.577328182908897e-03, 8.577328182908897e-03, 1.715465636581779e-02, 8.577328182908897e-03, 9.032481182960928e-03, 1.806496236592186e-02, 9.032481182960928e-03, 1.234554207568572e-02, 2.469108415137144e-02, 1.234554207568572e-02, 1.342924392802138e-02, 2.685848785604276e-02, 1.342924392802138e-02, 1.275381262217066e-02, 2.550762524434131e-02, 1.275381262217066e-02, 1.334062047584526e-02, 2.668124095169052e-02, 1.334062047584526e-02, 1.334062047584526e-02, 2.668124095169052e-02, 1.334062047584526e-02, 5.047251723691073e-03, 1.009450344738215e-02, 5.047251723691073e-03, 1.837273801939507e-02, 3.674547603879014e-02, 1.837273801939507e-02, 2.993718693106385e-02, 5.987437386212770e-02, 2.993718693106385e-02, 5.418153527218516e-02, 1.083630705443703e-01, 5.418153527218516e-02, 4.823769703401853e-02, 9.647539406803707e-02, 4.823769703401853e-02, 4.823769703401857e-02, 9.647539406803714e-02, 4.823769703401857e-02, 1.779269791192944e-02, 3.558539582385889e-02, 1.779269791192944e-02, 2.015776014239107e-04, 4.031552028478214e-04, 2.015776014239107e-04, 5.548199508061415e-04, 1.109639901612283e-03, 5.548199508061415e-04, 8.468465562568543e-02, 1.693693112513709e-01, 8.468465562568543e-02, 7.504746083109693e-03, 1.500949216621939e-02, 7.504746083109693e-03, 7.504746083110205e-03, 1.500949216622041e-02, 7.504746083110205e-03, 2.992687425046965e-06, 5.985374850093930e-06, 2.992687425046965e-06, 1.355997575387277e-07, 2.711995150774554e-07, 1.355997575387277e-07, 6.742574761817514e-10, 1.348514952363503e-09, 6.742574761817514e-10, 6.639717375345083e-03, 1.327943475069017e-02, 6.639717375345083e-03, 2.232366190597887e-40, 4.464732381195774e-40, 2.232366190597887e-40, 2.232369081404211e-40, 4.464738162808422e-40, 2.232369081404211e-40]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
