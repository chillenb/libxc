
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gapc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.988920496896771e-02, -3.988957436598277e-02, -3.989069064985180e-02, -3.988465316389151e-02, -3.988940421977464e-02, -3.988940421977464e-02, -3.944315119052884e-02, -3.944634264824037e-02, -3.953408608540883e-02, -3.938228064472536e-02, -3.944477522938667e-02, -3.944477522938667e-02, -3.139262071085369e-02, -3.122301833484344e-02, -2.688628124467902e-02, -2.711094511479070e-02, -3.133144527555051e-02, -3.133144527555051e-02, -1.553663969399161e-02, -1.616589622258790e-02, -3.686032071543228e-02, -7.668225991455899e-03, -1.573158127172087e-02, -1.573158127172087e-02, -1.247660438912915e-06, -1.538842057161667e-06, -3.403890297031579e-04, -3.750097849437183e-08, -1.514062186967569e-06, -1.514062186967569e-06, -5.147259229857640e-02, -5.165897625655944e-02, -5.149114756429608e-02, -5.163606530198295e-02, -5.156860327632953e-02, -5.156860327632953e-02, -2.632631572276344e-02, -2.662137343734843e-02, -2.590625996987384e-02, -2.613277727842762e-02, -2.709338256913944e-02, -2.709338256913944e-02, -4.168456118923357e-02, -5.695755108374203e-02, -4.044745005316003e-02, -5.201361343511468e-02, -4.378329713953023e-02, -4.378329713953023e-02, -3.579943023719646e-03, -1.090208155836501e-02, -3.763763953562665e-03, -7.114552099525588e-02, -5.588223459186956e-03, -5.588223459186956e-03, -3.338860622521706e-08, -5.993554350201657e-08, -3.562173492188247e-08, -1.183505500349459e-03, -5.251736527173154e-08, -5.251736527173151e-08, -6.166516600165416e-02, -5.690782277808311e-02, -5.851849778817728e-02, -5.983422174634764e-02, -5.916843501371959e-02, -5.916843501371959e-02, -6.180381669994770e-02, -3.352572779114573e-02, -3.936513070613464e-02, -4.628790289512362e-02, -4.262758077075947e-02, -4.262758077075948e-02, -5.701632274058230e-02, -1.469835529056407e-02, -1.929258002918146e-02, -2.937876372247429e-02, -2.401320761202879e-02, -2.401320761202879e-02, -3.210242120723387e-02, -2.164534269630272e-04, -7.118636872385364e-04, -3.294388634329068e-02, -2.766916216072791e-03, -2.766916216072802e-03, -2.015204781760758e-06, -3.132413575575213e-10, -4.518847718705010e-09, -2.752729207022719e-03, -3.354300392996235e-08, -3.354300389363566e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gapc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.805296267516124e-02, -7.805394400612757e-02, -7.805683053363680e-02, -7.804079276726290e-02, -7.805349266029023e-02, -7.805349266029023e-02, -8.999257823216862e-02, -8.999922581586765e-02, -9.018181354047562e-02, -8.986565125840250e-02, -8.999595984728705e-02, -8.999595984728705e-02, -7.049061002225389e-02, -7.023661694413384e-02, -6.318983570201167e-02, -6.360223525559520e-02, -7.039915726221328e-02, -7.039915726221328e-02, -4.007635633686532e-02, -4.114551286486250e-02, -7.931386614440721e-02, -2.391833146117836e-02, -4.041046924420947e-02, -4.041046924420947e-02, -7.071280030445999e-06, -8.753682723994167e-06, -1.834517000079663e-03, -1.951671024895649e-07, -8.621027460552987e-06, -8.621027460552987e-06, -1.137208563386396e-01, -1.140544929796706e-01, -1.137541350559502e-01, -1.140135575726493e-01, -1.138928882000756e-01, -1.138928882000756e-01, -6.169526473848439e-02, -6.237769079155307e-02, -6.069411136495974e-02, -6.122129728310307e-02, -6.349397635423747e-02, -6.349397635423747e-02, -7.931744369434804e-02, -8.160580084709312e-02, -7.763379623945946e-02, -8.035178195230169e-02, -8.111500394972267e-02, -8.111500394972267e-02, -1.328946579067863e-02, -3.123711926419993e-02, -1.382548338189079e-02, -1.180345157335339e-01, -1.872124578055284e-02, -1.872124578055284e-02, -1.736995464623912e-07, -3.158980860737701e-07, -1.930019191107539e-07, -5.605473663192669e-03, -2.800411892989985e-07, -2.800411892989984e-07, -7.537269780648023e-02, -7.930730745948242e-02, -7.819118826431828e-02, -7.711560146558763e-02, -7.767829125990519e-02, -7.767829125990519e-02, -7.353233923960836e-02, -7.067433942319944e-02, -7.613147653752349e-02, -7.945062985173848e-02, -7.812524408902190e-02, -7.812524408902190e-02, -8.344749679048109e-02, -3.904104283362553e-02, -4.756605045254215e-02, -6.242448855576469e-02, -5.516172476816720e-02, -5.516172476816721e-02, -6.803891222046014e-02, -1.197502345526508e-03, -3.585226867595994e-03, -6.439576084923995e-02, -1.103722134994200e-02, -1.103722134994206e-02, -1.140717336100665e-05, -1.509864424456708e-09, -2.283093092453632e-08, -1.103466846770181e-02, -1.796024047208863e-07, -1.796024044635990e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gapc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.624348624710165e-11, 9.624647422227715e-11, 9.625271641692645e-11, 9.620394129477304e-11, 9.624512123757436e-11, 9.624512123757436e-11, 8.307515297952713e-07, 8.309361252535259e-07, 8.358546246513239e-07, 8.265119729611033e-07, 8.308284797989793e-07, 8.308284797989793e-07, 1.309251027352201e-03, 1.298300462805615e-03, 1.021924907724993e-03, 1.003686050369572e-03, 1.305327540663707e-03, 1.305327540663707e-03, 1.817774209827901e-01, 1.847906444024652e-01, 8.063286984471369e-04, 2.341886288084144e-01, 1.828703884830379e-01, 1.828703884830379e-01, 2.363075433441767e-01, 2.557354114608004e-01, 5.668347534073895e-01, 4.661491453248222e-02, 2.649867827358571e-01, 2.649867827358571e-01, 2.596033899345603e-07, 2.620053066987440e-07, 2.598407676547301e-07, 2.617082162722507e-07, 2.608409388443156e-07, 2.608409388443156e-07, 4.153703544760359e-06, 4.148648093214810e-06, 4.012969669392874e-06, 4.009287150259238e-06, 4.342579864881975e-06, 4.342579864881975e-06, 5.161203963254411e-03, 7.310253117827631e-03, 6.199250272551516e-03, 9.234850230938204e-03, 4.837099867451686e-03, 4.837099867451686e-03, 2.998298079859397e-01, 8.219880502503261e-02, 3.503886979363299e-01, 6.342419629380805e-05, 3.059064961278713e-01, 3.059064961278713e-01, 4.756367297950781e-02, 5.859510554484379e-02, 1.457533842783958e-01, 6.504320790129752e-01, 8.395064454677227e-02, 8.395064454677223e-02, 1.130420463294424e-02, 9.592849469977049e-03, 1.015440798228217e-02, 1.062686054891626e-02, 1.038630470252865e-02, 1.038630470252865e-02, 1.330080316905153e-02, 6.155618340236024e-03, 7.320728878130327e-03, 8.939912367784113e-03, 8.071503077578890e-03, 8.071503077578890e-03, 5.831912651332178e-03, 4.660230840458607e-02, 3.521254878783532e-02, 2.689707612633533e-02, 3.115195926832427e-02, 3.115195926832430e-02, 9.234891516025353e-03, 4.213732565425348e-01, 5.201289141458060e-01, 4.671319814143935e-02, 5.975881593505981e-01, 5.975881593506012e-01, 2.058921688915711e-01, 1.665598787545753e-02, 3.538517212327195e-02, 7.638746378407046e-01, 1.060494248079128e-01, 1.060494246930642e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
