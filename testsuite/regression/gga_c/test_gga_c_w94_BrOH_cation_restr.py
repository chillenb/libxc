
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_w94_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.449582739213586e-02, -5.449674432094594e-02, -5.449935025672911e-02, -5.448573875346906e-02, -5.449307992313939e-02, -5.449307992313939e-02, -4.364001276398791e-02, -4.364680570944099e-02, -4.380409545290379e-02, -4.353101321869887e-02, -4.364816553527777e-02, -4.364816553527777e-02, -2.640080239857170e-02, -2.605622763581631e-02, -1.843866963363374e-02, -1.875361542365412e-02, -1.893896997417816e-02, -1.893896997417816e-02, -3.768706794538901e-03, -4.178080343793844e-03, -2.985170657284944e-02, -1.145900404301061e-03, -1.995474804367597e-03, -1.995474804367595e-03, -6.872436163216374e-08, -8.453235183207959e-08, -1.294138875600834e-05, -1.106418843123267e-08, -2.771372400588766e-08, -2.771372400588772e-08, -6.315394367926416e-02, -6.335442520264620e-02, -6.316222533365255e-02, -6.333922596350032e-02, -6.325609070182536e-02, -6.325609070182536e-02, -1.732173686580738e-02, -1.783571083217618e-02, -1.620125035271087e-02, -1.662959644697094e-02, -1.818438473231725e-02, -1.818438473231725e-02, -4.665126967114180e-02, -7.305728000212672e-02, -4.242885084773199e-02, -6.891356089575219e-02, -5.003318450871282e-02, -5.003318450871282e-02, -2.709796893681717e-04, -1.807346739310444e-03, -2.200224584398431e-04, -7.666978077124756e-02, -6.347380057072333e-04, -6.347380057072333e-04, -6.027792114175149e-09, -1.171534154011539e-08, -2.141531669629629e-08, -7.354971130741591e-05, -2.113167565478358e-08, -2.113167565478354e-08, -7.784194496592475e-02, -7.311843848381974e-02, -7.500917891077531e-02, -7.640580932056039e-02, -7.572944585095390e-02, -7.572944585095390e-02, -7.857146129829183e-02, -2.697324839737723e-02, -3.987156914861181e-02, -5.700071331929705e-02, -4.804276284530783e-02, -4.804276284530783e-02, -7.232858258812057e-02, -3.358916265939078e-03, -6.520293165749377e-03, -2.242886162148057e-02, -1.227432412954593e-02, -1.227432412954593e-02, -2.613620542388354e-02, -1.039176295868595e-05, -2.898962397512028e-05, -3.161650523796810e-02, -1.936122175008872e-04, -1.936122175008873e-04, -1.738103789201295e-07, -6.188643002278246e-10, -3.692753929898719e-09, -1.547134803160227e-04, -1.986026121402506e-08, -1.986026121402503e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_w94_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.368828021828339e-01, -1.368825958302563e-01, -1.368820104301711e-01, -1.368850685200979e-01, -1.368834212774318e-01, -1.368834212774318e-01, -1.324546016288730e-01, -1.324601922448870e-01, -1.325883631396717e-01, -1.323644512724424e-01, -1.324613384644305e-01, -1.324613384644305e-01, -1.013585707177131e-01, -1.005095798277343e-01, -7.855155477777093e-02, -7.958913970734413e-02, -8.018687294726184e-02, -8.018687294726184e-02, -1.882171808610601e-02, -2.076225365011030e-02, -1.095532574365370e-01, -5.906233335282922e-03, -1.017795212614824e-02, -1.017795212614823e-02, -3.599277533743675e-07, -4.426899946348916e-07, -6.772559720225574e-05, -5.796352382475433e-08, -1.451506220101834e-07, -1.451506220101837e-07, -1.299927142642470e-01, -1.297642848773525e-01, -1.299833607895786e-01, -1.297817473372907e-01, -1.298768327409935e-01, -1.298768327409935e-01, -7.553504127759453e-02, -7.730988620535392e-02, -7.157637302776079e-02, -7.310628202092395e-02, -7.849653480803383e-02, -7.849653480803383e-02, -1.280885922594898e-01, -9.937648113058850e-02, -1.255341171050426e-01, -1.069261461254217e-01, -1.284930305208141e-01, -1.284930305208141e-01, -1.412462591314663e-03, -9.253668692137701e-03, -1.147565513930918e-03, -1.016925922167623e-01, -3.291420668354473e-03, -3.291420668354473e-03, -3.157640954907868e-08, -6.136896641128372e-08, -1.120230555976110e-07, -3.843513234860539e-04, -1.106087304856460e-07, -1.106087304856458e-07, -8.478865150644845e-02, -9.779404288052465e-02, -9.284979213123865e-02, -8.896929764193780e-02, -9.087226511329542e-02, -9.087226511329542e-02, -8.202401810717375e-02, -1.018768842344309e-01, -1.231097343707243e-01, -1.240770242154560e-01, -1.274271424112265e-01, -1.274271424112265e-01, -1.019091064571710e-01, -1.690557109733707e-02, -3.165969181664026e-02, -8.927973668010539e-02, -5.567111977901502e-02, -5.567111977901504e-02, -9.963657882167412e-02, -5.439117598087085e-05, -1.516565735419695e-04, -1.094352816932172e-01, -1.009650766660032e-03, -1.009650766660032e-03, -9.102846805818426e-07, -3.240031516904255e-09, -1.933711629369775e-08, -8.072847563038075e-04, -1.039364642478183e-07, -1.039364642478182e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_w94_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.085218703000780e-10, 2.085223060320830e-10, 2.085179843087166e-10, 2.085116218274990e-10, 2.085158496803616e-10, 2.085158496803616e-10, 1.419578408122925e-06, 1.419833260294823e-06, 1.425553319388008e-06, 1.414271677721493e-06, 1.419713302225745e-06, 1.419713302225745e-06, 2.664794916906643e-03, 2.629063049832768e-03, 1.798962068743368e-03, 1.771056158851298e-03, 1.813420044750831e-03, 1.813420044750831e-03, 1.113458201813494e-01, 1.218934250443745e-01, 1.474958514347674e-03, 6.447115441463737e-02, 8.867817563858159e-02, 8.867817563858151e-02, 4.299564517171254e-02, 4.662147701109214e-02, 3.281720573125998e-02, 3.423951914518971e-02, 4.871809131016247e-02, 4.871809131016264e-02, 2.697904797223041e-07, 2.699679945107326e-07, 2.697959796950783e-07, 2.699529400434670e-07, 2.698837662223181e-07, 2.698837662223181e-07, 6.740302062604060e-06, 6.798138416336606e-06, 6.246927471727044e-06, 6.296921098165519e-06, 7.025599514311722e-06, 7.025599514311722e-06, 1.097823446375644e-02, 8.285613172306300e-03, 1.448232879441377e-02, 1.631305651476698e-02, 1.091148590342235e-02, 1.091148590342235e-02, 3.840471996311178e-02, 3.374686622319449e-02, 4.038986493948019e-02, 3.493894243016465e-05, 6.884228136221317e-02, 6.884228136221317e-02, 4.660535311096412e-02, 4.209306760919954e-02, 4.304390188304441e-01, 4.936627564006976e-02, 1.658872453210456e-01, 1.658872453210452e-01, 7.538981958639978e-03, 1.228953852928102e-02, 1.104052115232856e-02, 9.697814689389751e-03, 1.040850198464910e-02, 1.040850198464910e-02, 5.831209416109090e-03, 1.285623478369421e-02, 1.734997229184573e-02, 2.014094454653760e-02, 1.933317438122156e-02, 1.933317438122156e-02, 6.761191535729232e-03, 2.851220899024353e-02, 3.304369626369228e-02, 5.582476832999278e-02, 4.481694943061642e-02, 4.481694943061646e-02, 1.856074914548763e-02, 2.858442462780128e-02, 3.223033597242633e-02, 1.093015363438858e-01, 7.123860777931275e-02, 7.123860777931278e-02, 3.476346526861530e-02, 2.575796584937728e-01, 1.156673787279977e-01, 6.773852219404002e-02, 2.211012986278912e-01, 2.211012986278917e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
