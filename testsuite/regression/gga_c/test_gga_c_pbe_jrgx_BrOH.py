
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_jrgx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.761787803628497e-02, -6.761863171244645e-02, -6.762090796069462e-02, -6.760858881685317e-02, -6.761828457699151e-02, -6.761828457699151e-02, -5.593370060119611e-02, -5.593780115763764e-02, -5.605073345734511e-02, -5.585688497516651e-02, -5.593582150762381e-02, -5.593582150762381e-02, -3.659214303080798e-02, -3.637813417657412e-02, -3.061815522695258e-02, -3.094155962865864e-02, -3.651503383674333e-02, -3.651503383674333e-02, -1.538752272670222e-02, -1.623396883651508e-02, -4.367105616304692e-02, -5.437536205480519e-03, -1.565041665573680e-02, -1.565041665573680e-02, -3.909716246330453e-07, -4.831613204721118e-07, -9.564154957781304e-05, -9.658001939626817e-09, -4.788108339760743e-07, -4.788108339760743e-07, -7.328053700893288e-02, -7.347142828407441e-02, -7.329958299262786e-02, -7.344801152559448e-02, -7.337894472453106e-02, -7.337894472453106e-02, -3.293516465589425e-02, -3.346580853170558e-02, -3.220100690138694e-02, -3.261303294236843e-02, -3.426741074617164e-02, -3.426741074617164e-02, -4.722800235817765e-02, -6.003117947867506e-02, -4.581549355327618e-02, -5.579105732615616e-02, -4.934592612175357e-02, -4.934592612175357e-02, -1.647431746207074e-03, -8.881468010174679e-03, -1.797732243429487e-03, -7.970488863915220e-02, -3.335951693277025e-03, -3.335951693277025e-03, -8.676036106341214e-09, -1.610770984622559e-08, -1.213546374474496e-08, -3.908377793333783e-04, -1.548634062524835e-08, -1.548634062524835e-08, -6.269098470097566e-02, -5.954445819503192e-02, -6.064055382147730e-02, -6.151205281568160e-02, -6.107366224888471e-02, -6.107366224888471e-02, -6.248000679600147e-02, -3.834148754068700e-02, -4.456886815554847e-02, -5.097212250970996e-02, -4.770428415809894e-02, -4.770428415809894e-02, -6.044637675682017e-02, -1.367686253841774e-02, -1.993885724568891e-02, -3.286922588625014e-02, -2.623408946906255e-02, -2.623408946906255e-02, -3.647659636238020e-02, -5.797095869743893e-05, -2.126835116065783e-04, -3.660214495563877e-02, -1.172944360149351e-03, -1.172944360149351e-03, -5.995857904778075e-07, -6.339420455475702e-11, -1.138006144039042e-09, -1.185245185073330e-03, -1.064287365748662e-08, -1.064287366138975e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_jrgx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.454644165648081e-01, -1.454651792988292e-01, -1.454674993298989e-01, -1.454550313974857e-01, -1.454648278545068e-01, -1.454648278545068e-01, -1.232885279523202e-01, -1.232917388666843e-01, -1.233804572500555e-01, -1.232302721970981e-01, -1.232902349665721e-01, -1.232902349665721e-01, -8.609599825249904e-02, -8.596201380509209e-02, -8.136595070642444e-02, -8.176543128484316e-02, -8.604793175443702e-02, -8.604793175443702e-02, -4.883448908612439e-02, -5.009575337218337e-02, -9.261042590765439e-02, -2.443976910454983e-02, -4.923518085435213e-02, -4.923518085435213e-02, -2.533156386490287e-06, -3.128136374016825e-06, -5.894488114072896e-04, -6.312478554509742e-08, -3.100269151600166e-06, -3.100269151600166e-06, -1.399083168067350e-01, -1.400209461756517e-01, -1.399195995036575e-01, -1.400071811771511e-01, -1.399664471172102e-01, -1.399664471172102e-01, -9.475473829918821e-02, -9.552177727573392e-02, -9.371612044097045e-02, -9.432703981728356e-02, -9.659487785816682e-02, -9.659487785816682e-02, -8.413119620978052e-02, -7.974007464425586e-02, -8.281908389647043e-02, -7.918580090033384e-02, -8.473574761580110e-02, -8.473574761580110e-02, -8.857362039387397e-03, -3.583793483793474e-02, -9.568677922464266e-03, -1.157153219650066e-01, -1.639310398789630e-02, -1.639310398789630e-02, -5.672315122197278e-08, -1.051850909185122e-07, -7.941373668928254e-08, -2.306274614230800e-03, -1.011960816379741e-07, -1.011960816377815e-07, -7.426134084705477e-02, -7.747332114283415e-02, -7.642973065650216e-02, -7.554281004514091e-02, -7.599529285062419e-02, -7.599529285062419e-02, -7.275277901200626e-02, -8.071088919584747e-02, -8.162903005692726e-02, -8.042676529350645e-02, -8.129345808667914e-02, -8.129345808667914e-02, -8.160409833936691e-02, -4.807128237154304e-02, -5.924544174219182e-02, -7.128879527136693e-02, -6.647251619052716e-02, -6.647251619052714e-02, -7.794973960110975e-02, -3.606855077485943e-04, -1.283935778886932e-03, -6.949781705251874e-02, -6.476820715119182e-03, -6.476820715119198e-03, -3.876893895661434e-06, -4.176762809718170e-10, -7.469242970794241e-09, -6.529596843028731e-03, -6.963507245607876e-08, -6.963507246104892e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_jrgx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.965126013490830e-10, 1.965152905754969e-10, 1.965182393850565e-10, 1.964743921381329e-10, 1.965140951819932e-10, 1.965140951819932e-10, 1.063063929997799e-06, 1.063209674706155e-06, 1.067013627293494e-06, 1.059385576299676e-06, 1.063117001767753e-06, 1.063117001767753e-06, 1.627262799188866e-03, 1.620227106979797e-03, 1.412741349894712e-03, 1.381857007942564e-03, 1.624766516194669e-03, 1.624766516194669e-03, 2.525859121131597e-01, 2.549948319975590e-01, 9.030459912731196e-04, 2.822833727252951e-01, 2.535944559729670e-01, 2.535944559729670e-01, 9.269517984739509e-02, 9.982761364331667e-02, 1.937997191646952e-01, 1.743476108121370e-02, 1.040495748816617e-01, 1.040495748816617e-01, 2.638748950314056e-07, 2.653300158274566e-07, 2.640184229184354e-07, 2.651498001668953e-07, 2.646258199050051e-07, 2.646258199050051e-07, 7.108304236412385e-06, 7.045618518530678e-06, 6.953339832867335e-06, 6.906606253806565e-06, 7.270029725928726e-06, 7.270029725928726e-06, 4.844405048808654e-03, 5.060870801089123e-03, 5.921246800523468e-03, 6.861034129366970e-03, 4.360880454836765e-03, 4.360880454836765e-03, 2.285407310295501e-01, 1.124471047005022e-01, 2.774011934679397e-01, 4.429741599857479e-05, 3.122271356673371e-01, 3.122271356673371e-01, 1.796853972557088e-02, 2.237438388606713e-02, 6.773005830565457e-02, 2.936556336754944e-01, 3.456076239270036e-02, 3.456076239378742e-02, 7.055642525728379e-03, 6.532031320987691e-03, 6.709210697039854e-03, 6.854124253225101e-03, 6.780811407713538e-03, 6.780811407713538e-03, 8.186629093348601e-03, 6.866995169596570e-03, 7.100582649367048e-03, 7.419768388794904e-03, 7.261644353781744e-03, 7.261644353781745e-03, 4.089429104514686e-03, 6.733580925865601e-02, 4.950894855732337e-02, 3.084343589350637e-02, 4.024531167990165e-02, 4.024531167990167e-02, 1.045567627488263e-02, 1.354682779526554e-01, 2.025002332012734e-01, 4.750915226829207e-02, 3.941413357928751e-01, 3.941413357928758e-01, 7.656624435654807e-02, 5.626130172333757e-03, 1.367174832564716e-02, 5.073961715104680e-01, 4.675821830655727e-02, 4.675821830869031e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
