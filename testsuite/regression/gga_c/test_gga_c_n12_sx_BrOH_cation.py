
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_n12_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.722040752447264e-01, -1.722068491995174e-01, -1.722149013778972e-01, -1.721737198577661e-01, -1.721959064181049e-01, -1.721959064181049e-01, -9.518946397764430e-02, -9.520316735711248e-02, -9.552088668577033e-02, -9.497359467641968e-02, -9.520649365819810e-02, -9.520649365819810e-02, -3.545330198971409e-02, -3.487339122785676e-02, -1.984999509760917e-02, -2.062298451834377e-02, -2.138884684194637e-02, -2.138884684194637e-02, 3.145048057564018e-02, 2.877207452232683e-02, -4.296630957534573e-02, 4.729422348018535e-02, 3.533071897473811e-02, 3.533071897473811e-02, -1.205266742504821e-03, -1.257797973520798e-03, -1.025859586312030e-03, -6.850949463638931e-04, 7.125158331696061e-04, 7.125158331696088e-04, -1.478597951534680e-01, -1.483210770441513e-01, -1.478788925084733e-01, -1.482861397364509e-01, -1.480947242064315e-01, -1.480947242064315e-01, -2.328639768784501e-02, -2.511546885037740e-02, -1.915793233921958e-02, -2.079520599528252e-02, -2.628905827731053e-02, -2.628905827731053e-02, -6.056087177411058e-02, -9.662132507283054e-02, -5.402521547615804e-02, -8.758131109635452e-02, -6.494286051051906e-02, -6.494286051051903e-02, 3.181637578628504e-02, 4.872220286808950e-02, 2.778286928166725e-02, -1.397114272703875e-01, 4.250201114842962e-02, 4.250201114842962e-02, -5.033545103490159e-04, -6.672165445177593e-04, -4.693403609974661e-04, 1.081086985087650e-02, -1.260470341483426e-04, -1.260470341483381e-04, -1.015046947418633e-01, -9.425824233602370e-02, -9.683661402447317e-02, -9.884494878349616e-02, -9.784691535219885e-02, -9.784691535219885e-02, -1.035372533954355e-01, -3.287076549824716e-02, -5.010576143500423e-02, -7.123643228430127e-02, -6.009320739912036e-02, -6.009320739912036e-02, -9.701172067331054e-02, 3.884158752978411e-02, 1.928211118174005e-02, -2.290006475086438e-02, -2.187745401672076e-03, -2.187745401672108e-03, -3.076531212885015e-02, -1.722910656192165e-03, 2.667900729090502e-03, -3.433448318423725e-02, 2.371950919446324e-02, 2.371950919446322e-02, -1.728840453903072e-03, -1.413630815415730e-04, -3.288857476220104e-04, 2.052987964129346e-02, -1.832851015923211e-04, -1.832851015923167e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_n12_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.240600431237359e-01, -4.240604565406264e-01, -4.240604602589666e-01, -4.240605417391564e-01, -4.240609496495779e-01, -4.240623028274751e-01, -4.240590824809325e-01, -4.240566781873477e-01, -4.240645496250636e-01, -4.240551395494980e-01, -4.240645496250636e-01, -4.240551395494980e-01, -2.815300592870066e-01, -2.816354603627121e-01, -2.815325434962830e-01, -2.816448256514142e-01, -2.816793520929244e-01, -2.817749870424807e-01, -2.814441014882769e-01, -2.815552102121954e-01, -2.815124639189111e-01, -2.816705702013585e-01, -2.815124639189111e-01, -2.816705702013585e-01, -1.617326998851828e-01, -1.637159758001674e-01, -1.613959250893029e-01, -1.637450444701148e-01, -1.613485881198093e-01, -1.613908599659002e-01, -1.615873530577417e-01, -1.616616623413102e-01, -1.694370810509236e-01, -1.749858183940152e-01, -1.694370810509236e-01, -1.749858183940152e-01, -8.261764357807556e-02, -6.772534675892107e-02, -8.986238313998214e-02, -7.247423460846515e-02, -1.699734264815499e-01, -1.768614879893054e-01, 2.842908915543918e-02, 2.767628079327068e-02, 1.035710525362853e-02, 1.257087637757711e-01, 1.035710525362871e-02, 1.257087637757712e-01, -2.297078359445892e-03, -8.303989424984873e-04, -2.488733943936188e-03, -7.657887592188820e-04, 1.370265967847569e-02, 1.309538007529365e-02, -7.910673810655065e-04, -1.052381672217478e-03, 2.384601216441651e-03, -7.339471327996098e-03, 2.384601216441643e-03, -7.339471327995633e-03, -3.108777653413906e-01, -3.109130014146426e-01, -3.105741901914661e-01, -3.106141375234786e-01, -3.108643350798332e-01, -3.109021584075831e-01, -3.105995543643415e-01, -3.106353668246240e-01, -3.107235987848606e-01, -3.107625450950073e-01, -3.107235987848606e-01, -3.107625450950073e-01, -2.304750785828636e-01, -2.304938846244236e-01, -2.305024979385790e-01, -2.305945126109429e-01, -2.314519021970993e-01, -2.309345260286749e-01, -2.314264662864292e-01, -2.309588516423420e-01, -2.300169648557755e-01, -2.305669443842468e-01, -2.300169648557755e-01, -2.305669443842468e-01, -1.653980266025311e-01, -1.657281897569097e-01, -1.426907386699846e-01, -1.418885456675709e-01, -1.586774157948304e-01, -1.593524657800302e-01, -1.475641620617448e-01, -1.462769927790903e-01, -1.662689301366040e-01, -1.689037267353993e-01, -1.662689301366042e-01, -1.689037267353993e-01, 9.172951831118904e-02, 8.766594634688317e-02, -1.571945813366778e-02, -1.505068813458951e-02, 9.567137254054500e-02, 7.842235246479153e-02, -1.984583888962744e-01, -1.984483878702180e-01, 7.985186266143546e-02, 6.030859386913214e-02, 7.985186266143546e-02, 6.030859386913214e-02, -9.386065381436049e-04, -4.575427781069599e-04, -1.011438123990638e-03, -7.807895816842313e-04, -9.913732462814681e-04, -3.065735649376829e-04, 5.419839960363394e-02, 5.390290976752329e-02, -3.329201032385631e-03, 1.021450721788672e-03, -3.329201032385731e-03, 1.021450721788606e-03, -1.267682567299812e-01, -1.265461578853541e-01, -1.370414408018605e-01, -1.362972251825533e-01, -1.310592090508640e-01, -1.304416966271051e-01, -1.276413465580313e-01, -1.272500403672000e-01, -1.290913027916960e-01, -1.285920065504824e-01, -1.290913027916960e-01, -1.285920065504824e-01, -1.260064301128705e-01, -1.257401330357075e-01, -1.454737514926492e-01, -1.453988160892047e-01, -1.544620130992664e-01, -1.548937992939755e-01, -1.608383746576605e-01, -1.606597561438561e-01, -1.596794646649141e-01, -1.596519749083310e-01, -1.596794646649141e-01, -1.596519749083310e-01, -1.484709038104574e-01, -1.471499150988032e-01, -7.726896447812671e-02, -7.501081122744710e-02, -1.167380776939146e-01, -1.116671714577822e-01, -1.262560727004010e-01, -1.256851993960988e-01, -1.225663537719505e-01, -1.225344976953033e-01, -1.225663537719504e-01, -1.225344976953025e-01, -1.406639608039829e-01, -1.406655397117877e-01, 1.063660244069416e-02, 1.063908266039610e-02, 3.067893407076139e-02, 2.778004810837880e-02, -1.267600862718409e-01, -1.269471261225197e-01, 9.045635586077817e-02, 6.815439584728429e-02, 9.045635586077726e-02, 6.815439584728343e-02, -2.544863944516167e-03, -1.446482459279948e-03, -2.020623450590149e-04, -1.916906064398378e-04, -7.621413427975749e-04, -1.939148694621771e-04, 7.622361571014484e-02, 7.215164605851215e-02, -2.832906774841512e-03, 8.393410941644731e-04, -2.832906774841443e-03, 8.393410941644812e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_n12_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.221598483080601e-09, 0.000000000000000e+00, 1.221608358685050e-09, 1.221606203063915e-09, 0.000000000000000e+00, 1.221611831327284e-09, 1.221583741146723e-09, 0.000000000000000e+00, 1.221603372640610e-09, 1.221525290140080e-09, 0.000000000000000e+00, 1.221496932662184e-09, 1.221632034695427e-09, 0.000000000000000e+00, 1.221488068168469e-09, 1.221632034695427e-09, 0.000000000000000e+00, 1.221488068168469e-09, 5.701668891321281e-06, 0.000000000000000e+00, 5.709703807279953e-06, 5.702214838074620e-06, 0.000000000000000e+00, 5.710791289128132e-06, 5.721330139230984e-06, 0.000000000000000e+00, 5.728205392003719e-06, 5.683943048654648e-06, 0.000000000000000e+00, 5.691972185837763e-06, 5.702744152826103e-06, 0.000000000000000e+00, 5.709275470900727e-06, 5.702744152826103e-06, 0.000000000000000e+00, 5.709275470900727e-06, 8.617429931901522e-03, 0.000000000000000e+00, 8.945271701527291e-03, 8.561359680183523e-03, 0.000000000000000e+00, 8.954496859881441e-03, 8.482972431306364e-03, 0.000000000000000e+00, 8.220240724703292e-03, 8.041335617897914e-03, 0.000000000000000e+00, 8.134700804144423e-03, 1.034110539209556e-02, 0.000000000000000e+00, 7.547690203049424e-03, 1.034110539209556e-02, 0.000000000000000e+00, 7.547690203049424e-03, 1.868143448800989e+00, 0.000000000000000e+00, 1.465977694996210e+00, 1.933509529482077e+00, 0.000000000000000e+00, 1.470507661503803e+00, 4.492515393970521e-03, 0.000000000000000e+00, 4.830857133771987e-03, 7.776984801364830e-01, 0.000000000000000e+00, 7.170652210213631e-01, 2.611026352733172e-01, 0.000000000000000e+00, -1.038258194150056e+00, 2.611026352733191e-01, 0.000000000000000e+00, -1.038258194150045e+00, -6.097006254042828e+01, 0.000000000000000e+00, -3.719815530119703e+01, -6.603562078093218e+01, 0.000000000000000e+00, -3.771721817464340e+01, -2.242153693860306e+01, 0.000000000000000e+00, -1.438354882785856e+01, -4.274833554582360e+01, 0.000000000000000e+00, -4.904168321812303e+01, -5.816778702425428e+00, 0.000000000000000e+00, -6.050312472224045e+02, -5.816778702473673e+00, 0.000000000000000e+00, -6.050312472237672e+02, 1.223264620022905e-06, 0.000000000000000e+00, 1.224361756319342e-06, 1.225555741696026e-06, 0.000000000000000e+00, 1.226534211698946e-06, 1.223386389001216e-06, 0.000000000000000e+00, 1.224408099278432e-06, 1.225318916058748e-06, 0.000000000000000e+00, 1.226418421421037e-06, 1.224469855741620e-06, 0.000000000000000e+00, 1.225453357677120e-06, 1.224469855741620e-06, 0.000000000000000e+00, 1.225453357677120e-06, 4.751160059610174e-05, 0.000000000000000e+00, 4.752373787219723e-05, 4.643966167609702e-05, 0.000000000000000e+00, 4.649376907391053e-05, 4.737426783246961e-05, 0.000000000000000e+00, 4.757848203524200e-05, 4.643097584310053e-05, 0.000000000000000e+00, 4.661562939514208e-05, 4.722105606977608e-05, 0.000000000000000e+00, 4.676919692710003e-05, 4.722105606977608e-05, 0.000000000000000e+00, 4.676919692710003e-05, 2.634153533907631e-02, 0.000000000000000e+00, 2.672728684070825e-02, 2.266922950913570e-02, 0.000000000000000e+00, 2.244321756645003e-02, 3.580060781256558e-02, 0.000000000000000e+00, 3.331462553089080e-02, 4.616160659341259e-02, 0.000000000000000e+00, 4.051216213736863e-02, 2.431883166598475e-02, 0.000000000000000e+00, 2.928481950332639e-02, 2.431883166598468e-02, 0.000000000000000e+00, 2.928481950332636e-02, -3.639206278830159e+00, 0.000000000000000e+00, -3.352243964575660e+00, 6.652259621572274e-01, 0.000000000000000e+00, 6.436674673434793e-01, -5.808770280936455e+00, 0.000000000000000e+00, -3.744165289625553e+00, 1.287478700823854e-04, 0.000000000000000e+00, 1.289203066166678e-04, -1.353498318371410e+00, 0.000000000000000e+00, -6.667533069690503e-01, -1.353498318371410e+00, 0.000000000000000e+00, -6.667533069690503e-01, -7.215475311384346e+01, 0.000000000000000e+00, -5.287490437606258e+01, -5.740755809878713e+01, 0.000000000000000e+00, -5.087176811197121e+01, -4.308902250595445e+02, 0.000000000000000e+00, -2.694316636859120e+02, -1.340786223378693e+01, 0.000000000000000e+00, -1.276341499363958e+01, -4.970920227104805e+02, 0.000000000000000e+00, -3.668164816138906e+01, -4.970920227090594e+02, 0.000000000000000e+00, -3.668164816115363e+01, 3.599503563959790e-02, 0.000000000000000e+00, 3.621224836127090e-02, 3.298385714339233e-02, 0.000000000000000e+00, 3.230198755801383e-02, 3.006497260432729e-02, 0.000000000000000e+00, 2.950325257407629e-02, 2.918465764941283e-02, 0.000000000000000e+00, 2.888365346682116e-02, 2.926192272949564e-02, 0.000000000000000e+00, 2.882183482448322e-02, 2.926192272949564e-02, 0.000000000000000e+00, 2.882183482448322e-02, 6.580797524767319e-02, 0.000000000000000e+00, 6.520171465479470e-02, 3.753366083118578e-02, 0.000000000000000e+00, 3.722949179842160e-02, 4.128717128767787e-02, 0.000000000000000e+00, 4.124642199745358e-02, 4.942683257935357e-02, 0.000000000000000e+00, 4.895127125980199e-02, 4.549929055387806e-02, 0.000000000000000e+00, 4.508615011543222e-02, 4.549929055387806e-02, 0.000000000000000e+00, 4.508615011543222e-02, 1.886523698013317e-02, 0.000000000000000e+00, 1.855442002106315e-02, 5.199928437475955e-01, 0.000000000000000e+00, 5.007165362649183e-01, 3.693601791774601e-01, 0.000000000000000e+00, 3.494722453195562e-01, 1.694092631853990e-01, 0.000000000000000e+00, 1.661943155716633e-01, 2.478503139570196e-01, 0.000000000000000e+00, 2.498994158461326e-01, 2.478503139570196e-01, 0.000000000000000e+00, 2.498994158461327e-01, 5.399165333474055e-02, 0.000000000000000e+00, 5.350650926165176e-02, -1.743380472468857e+01, 0.000000000000000e+00, -1.649233116845537e+01, -1.574757548639424e+01, 0.000000000000000e+00, -1.203112012856890e+01, 2.517632045545649e-01, 0.000000000000000e+00, 2.451808769138975e-01, -1.096169169597050e+01, 0.000000000000000e+00, -6.887621983506038e+00, -1.096169169597025e+01, 0.000000000000000e+00, -6.887621983505968e+00, -4.252632515651809e+01, 0.000000000000000e+00, -3.182057253940341e+01, -2.844975243359836e+02, 0.000000000000000e+00, -2.759438865377912e+02, -1.694063765517904e+02, 0.000000000000000e+00, -1.023573941514816e+02, -1.101724329531100e+01, 0.000000000000000e+00, -9.635555059852610e+00, -7.011604576383230e+02, 0.000000000000000e+00, -6.974486627067880e+01, -7.011604576393410e+02, 0.000000000000000e+00, -6.974486627075500e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
