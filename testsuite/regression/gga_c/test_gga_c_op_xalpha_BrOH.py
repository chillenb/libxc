
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_xalpha_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.510646664621639e-02, -5.510646859264890e-02, -5.510647870943591e-02, -5.510644680685832e-02, -5.510646766071766e-02, -5.510646766071766e-02, -5.125446288030490e-02, -5.125447189911344e-02, -5.125489665458197e-02, -5.125507553422629e-02, -5.125448582504471e-02, -5.125448582504471e-02, -3.769879380643293e-02, -3.768594385436250e-02, -3.734650132051716e-02, -3.744545709403098e-02, -3.769410917368138e-02, -3.769410917368138e-02, -1.980311703639979e-02, -1.997745421722191e-02, -3.988533344803832e-02, -1.580253228656112e-02, -1.985558210338589e-02, -1.985558210338589e-02, -1.578522638475712e-03, -1.651682599434201e-03, -6.247479794676141e-03, -7.660659887208188e-04, -1.634867847182609e-03, -1.634867847182609e-03, -5.271883510292082e-02, -5.271937352783844e-02, -5.271889191970294e-02, -5.271931055120447e-02, -5.271910878886787e-02, -5.271910878886787e-02, -4.810211261727862e-02, -4.814959710778841e-02, -4.808275205151367e-02, -4.812004514600997e-02, -4.815903865140127e-02, -4.815903865140127e-02, -3.592352684831437e-02, -3.699344879317289e-02, -3.523103787400503e-02, -3.578805416086232e-02, -3.641462671601720e-02, -3.641462671601720e-02, -1.246924576564702e-02, -1.989712500973512e-02, -1.234142825103754e-02, -4.796991361375038e-02, -1.397393656032093e-02, -1.397393656032093e-02, -7.392909424324665e-04, -8.436535721133566e-04, -6.341786167596985e-04, -8.390059995351020e-03, -7.694991802843326e-04, -7.694991802843326e-04, -3.633263357728789e-02, -3.626312042452485e-02, -3.628809576449259e-02, -3.630732100460465e-02, -3.629770343512499e-02, -3.629770343512499e-02, -3.590723136505607e-02, -3.400698690598559e-02, -3.459713278921547e-02, -3.511691751845522e-02, -3.485524285709150e-02, -3.485524285709150e-02, -3.759273421739933e-02, -2.301076398908033e-02, -2.543520387076086e-02, -2.895121939083777e-02, -2.719156845919294e-02, -2.719156845919294e-02, -3.258647567988001e-02, -5.827117636367465e-03, -7.646790951051363e-03, -2.813838044081522e-02, -1.051865383563941e-02, -1.051865383563941e-02, -1.842939366105239e-03, -2.329450070614536e-04, -4.412421224110259e-04, -1.011298571070861e-02, -6.550197629620454e-04, -6.550197629620445e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_xalpha_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.537376161066074e-02, -5.537376292602388e-02, -5.537376976276083e-02, -5.537374820358690e-02, -5.537376229624198e-02, -5.537376229624198e-02, -5.268691073057538e-02, -5.268691721843887e-02, -5.268722277388006e-02, -5.268735145353508e-02, -5.268692723633915e-02, -5.268692723633915e-02, -4.186861388195222e-02, -4.185732843177686e-02, -4.155849415522129e-02, -4.164575484201766e-02, -4.186449984063265e-02, -4.186449984063265e-02, -2.418790001095943e-02, -2.437941761139716e-02, -4.376010016610199e-02, -1.968769104934122e-02, -2.424557569742299e-02, -2.424557569742299e-02, -2.092981583862950e-03, -2.189397567969446e-03, -8.131676742417628e-03, -1.018710639369315e-03, -2.167242505586831e-03, -2.167242505586831e-03, -5.372813443325090e-02, -5.372851279408908e-02, -5.372817435957692e-02, -5.372846853944958e-02, -5.372832675768104e-02, -5.372832675768104e-02, -5.036230811268460e-02, -5.039817167740244e-02, -5.034767820548538e-02, -5.037585505550968e-02, -5.040529948013069e-02, -5.040529948013069e-02, -4.029063264203270e-02, -4.124620596065944e-02, -3.966476998736455e-02, -4.016865138411783e-02, -4.073096320090840e-02, -4.073096320090840e-02, -1.578431414257853e-02, -2.429121983854508e-02, -1.563187055523690e-02, -5.026232514001774e-02, -1.756358820321708e-02, -1.756358820321708e-02, -9.831982955961604e-04, -1.121578062096863e-03, -8.437194459342674e-04, -1.081984631268913e-02, -1.023263662986828e-03, -1.023263662986828e-03, -4.065764922992515e-02, -4.059543055777956e-02, -4.061779179189409e-02, -4.063499963784899e-02, -4.062639184335386e-02, -4.062639184335386e-02, -4.027597174774327e-02, -3.854424363418519e-02, -3.908675285015246e-02, -3.956107127965693e-02, -3.932269607585137e-02, -3.932269607585136e-02, -4.177540776084814e-02, -2.765032065887645e-02, -3.018146975381023e-02, -3.372171643514868e-02, -3.196918536956074e-02, -3.196918536956074e-02, -3.722097157459636e-02, -7.597948973827387e-03, -9.893476959606181e-03, -3.291694735858783e-02, -1.343587492002504e-02, -1.343587492002504e-02, -2.441196532771943e-03, -3.103458275207116e-04, -5.874303094233200e-04, -1.294157177946876e-02, -8.713829589474136e-04, -8.713829589474124e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_xalpha_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
