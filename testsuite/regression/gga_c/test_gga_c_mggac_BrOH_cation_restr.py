
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_mggac_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.412523874454509e-02, -7.412610225345222e-02, -7.412856147587812e-02, -7.411574354786016e-02, -7.412265568700548e-02, -7.412265568700548e-02, -6.143836621145993e-02, -6.144331280791514e-02, -6.155791426017461e-02, -6.135959067254954e-02, -6.144438896695380e-02, -6.144438896695380e-02, -4.185428058139490e-02, -4.164306304055736e-02, -3.629203114716381e-02, -3.657919416010163e-02, -3.671550086532062e-02, -3.671550086532062e-02, -1.425192201415557e-02, -1.511548268091858e-02, -4.487430404013350e-02, -6.120795687519230e-03, -9.376398589209715e-03, -9.376398589209708e-03, -2.671542639887671e-08, -3.569747321502274e-08, -3.908707450364632e-05, -1.910126100842292e-09, -7.024324951466245e-09, -7.024324951466245e-09, -7.864859612751517e-02, -7.883695256701087e-02, -7.865636775928028e-02, -7.882264981584780e-02, -7.874445088889361e-02, -7.874445088889361e-02, -3.836612725850235e-02, -3.892419754927477e-02, -3.712435242780598e-02, -3.761154042207770e-02, -3.928861274976370e-02, -3.928861274976370e-02, -4.983197460616692e-02, -6.097408964916686e-02, -4.739607327126827e-02, -5.714261696857624e-02, -5.125193044427857e-02, -5.125193044427857e-02, -1.546673108071269e-03, -8.926690508991744e-03, -1.232495661056772e-03, -8.209692563892201e-02, -3.609183808910294e-03, -3.609183808910294e-03, -7.467067028664782e-10, -2.022240431328486e-09, -3.608608450457643e-09, -3.449146088838699e-04, -4.025019419859181e-09, -4.025019419859181e-09, -6.232514216713548e-02, -5.953751989769732e-02, -6.049432134763668e-02, -6.130522131317274e-02, -6.089759023599221e-02, -6.089759023599221e-02, -6.252822127140835e-02, -3.991838781143640e-02, -4.588279459272797e-02, -5.230188940298051e-02, -4.903585574964499e-02, -4.903585574964499e-02, -6.144572403896641e-02, -1.381074132423553e-02, -2.028741495400433e-02, -3.484410403305892e-02, -2.733879604567525e-02, -2.733879604567526e-02, -3.883733401134319e-02, -2.953284680922233e-05, -1.105129674920082e-04, -3.835247546778326e-02, -1.054254610450547e-03, -1.054254610450550e-03, -1.037452177904265e-07, -1.891363680525789e-11, -3.163062056264556e-10, -8.194928946697326e-04, -3.533329478541356e-09, -3.533329480709761e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_mggac_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.517901538680213e-01, -1.517909793721609e-01, -1.517933509440426e-01, -1.517810963675928e-01, -1.517877019406496e-01, -1.517877019406496e-01, -1.272010582006343e-01, -1.272042746226773e-01, -1.272789559237015e-01, -1.271520278204228e-01, -1.272052937626992e-01, -1.272052937626992e-01, -8.819526818370924e-02, -8.812207029644123e-02, -8.553821949229000e-02, -8.584128299834527e-02, -8.587918601980278e-02, -8.587918601980278e-02, -4.666665867764944e-02, -4.807376948663383e-02, -9.242440907655926e-02, -2.666945287971581e-02, -3.609952538834568e-02, -3.609952538834565e-02, -1.742673985466049e-07, -2.327302462779689e-07, -2.447342983391522e-04, -1.251872484628811e-08, -4.595136736071604e-08, -4.595136735603132e-08, -1.427311314162480e-01, -1.428221698548736e-01, -1.427349282310906e-01, -1.428153085276596e-01, -1.427775389532735e-01, -1.427775389532735e-01, -1.014953586654001e-01, -1.021740827963892e-01, -1.000338963614467e-01, -1.006504351534200e-01, -1.025640795073281e-01, -1.025640795073281e-01, -8.363210069235023e-02, -7.936298279898607e-02, -8.188492581623169e-02, -7.721583192316016e-02, -8.358389578530355e-02, -8.358389578530355e-02, -8.353753603255630e-03, -3.572470166257948e-02, -6.788633125475254e-03, -1.145367590094803e-01, -1.743172250057700e-02, -1.743172250057700e-02, -4.902509831538342e-09, -1.325531443169499e-08, -2.368942278568411e-08, -2.045418715880855e-03, -2.639256015864851e-08, -2.639256015823321e-08, -7.386858624604842e-02, -7.669743904059360e-02, -7.578490381471813e-02, -7.496368098417520e-02, -7.538194153943906e-02, -7.538194153943906e-02, -7.212067663543652e-02, -8.028697417491351e-02, -8.068047431330543e-02, -7.906035218651170e-02, -8.012888751514684e-02, -8.012888751514684e-02, -8.120328641385449e-02, -4.793535058606457e-02, -5.911371042645905e-02, -7.112772772901146e-02, -6.655372642056540e-02, -6.655372642056540e-02, -7.808808476232423e-02, -1.856031705348165e-04, -6.789278458576045e-04, -6.928760532500065e-02, -5.861593211476840e-03, -5.861593211476827e-03, -6.742982237556232e-07, -1.248943016757257e-10, -2.080970757705394e-09, -4.640322401574481e-03, -2.318037806189015e-08, -2.318037806390424e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_mggac_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_mggac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.957722363532775e-10, 1.957751843197219e-10, 1.957783961045962e-10, 1.957347496644346e-10, 1.957590226926506e-10, 1.957590226926506e-10, 1.032132625703910e-06, 1.032299289231816e-06, 1.036042225157322e-06, 1.028611472390206e-06, 1.032213060344840e-06, 1.032213060344840e-06, 1.569384076696304e-03, 1.564630049717035e-03, 1.427219095048790e-03, 1.388311066853021e-03, 1.408480044950673e-03, 1.408480044950673e-03, 2.335882754888474e-01, 2.354574340737170e-01, 8.382149974504821e-04, 2.749750473691761e-01, 2.846897735213167e-01, 2.846897735213165e-01, 2.102515546781349e-02, 2.476439934806730e-02, 1.211646136493205e-01, 7.439214269953594e-03, 1.554112076260108e-02, 1.554112076335052e-02, 2.515834740927757e-07, 2.529236863637496e-07, 2.516366894136189e-07, 2.528197362136864e-07, 2.522656053312844e-07, 2.522656053312844e-07, 7.255933027118113e-06, 7.174357537238760e-06, 7.050790497822925e-06, 6.980996202031435e-06, 7.312259979624795e-06, 7.312259979624795e-06, 4.033598412774827e-03, 3.958014481195757e-03, 5.369338159567759e-03, 6.241407301746706e-03, 3.926561152171613e-03, 3.926561152171613e-03, 2.271595834189093e-01, 1.199995865566037e-01, 2.398780587013715e-01, 3.806246691963482e-05, 3.544987205649291e-01, 3.544987205649291e-01, 7.267631891519504e-03, 9.145392976502910e-03, 9.147334761691951e-02, 2.669746498447600e-01, 3.981029074318324e-02, 3.981029074416996e-02, 6.003388858829260e-03, 5.634321631372353e-03, 5.757686798844456e-03, 5.865115997655513e-03, 5.810829655526314e-03, 5.810829655526314e-03, 6.888388054561032e-03, 6.473754719976540e-03, 6.510957868923964e-03, 6.625667309953683e-03, 6.573692511401458e-03, 6.573692511401458e-03, 3.206082399398741e-03, 7.062383056013657e-02, 4.963737961595098e-02, 2.805416228953200e-02, 3.865697097085945e-02, 3.865697097085947e-02, 9.233263997129591e-03, 9.967810096372934e-02, 1.473397386294428e-01, 3.860026228261712e-02, 4.153034049099222e-01, 4.153034049099237e-01, 2.607639536016321e-02, 9.920936045791136e-03, 1.248024908877176e-02, 3.923899400155728e-01, 4.957491082513883e-02, 4.957491081646480e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
