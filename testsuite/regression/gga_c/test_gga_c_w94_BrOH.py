
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_w94_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.449400316296769e-02, -5.449480134873269e-02, -5.449720843582299e-02, -5.448416111345959e-02, -5.449443374330854e-02, -5.449443374330854e-02, -4.363356674138569e-02, -4.363903564176272e-02, -4.378952366517835e-02, -4.353050878466234e-02, -4.363638093546619e-02, -4.363638093546619e-02, -2.423791348960466e-02, -2.392705319208934e-02, -1.659996119527550e-02, -1.693885335808098e-02, -2.412560933351127e-02, -2.412560933351127e-02, -5.922562109401580e-03, -6.513412901768070e-03, -3.432046435753795e-02, -1.402132217120426e-03, -6.101807785928740e-03, -6.101807785928740e-03, -6.628418925582492e-07, -7.706340505506015e-07, -3.698572881225743e-05, -4.823809468106484e-08, -7.681848414317806e-07, -7.681848414317806e-07, -6.313506174610427e-02, -6.332941692046611e-02, -6.315449173178415e-02, -6.330562218585971e-02, -6.323537913010219e-02, -6.323537913010219e-02, -1.712791749695565e-02, -1.762503906862830e-02, -1.645019646944641e-02, -1.682613733065083e-02, -1.839911472337693e-02, -1.839911472337693e-02, -4.704607720765502e-02, -7.362804180671041e-02, -4.488072253080237e-02, -6.818898955864933e-02, -5.122945307717582e-02, -5.122945307717582e-02, -4.073422699758949e-04, -2.510629589081160e-03, -4.439940365401365e-04, -7.669894187692519e-02, -8.222493770859221e-04, -8.222493770859221e-04, -4.507975306794259e-08, -6.912190986528488e-08, -6.351698384099433e-08, -1.157865204218264e-04, -7.003255208883125e-08, -7.003255208883121e-08, -7.831234462763784e-02, -7.436951026415577e-02, -7.600218714813810e-02, -7.711340518584693e-02, -7.657654411096873e-02, -7.657654411096873e-02, -7.855732481939046e-02, -2.996630170604542e-02, -4.295742579695916e-02, -5.822173270686856e-02, -5.035773985278234e-02, -5.035773985278236e-02, -7.303433740365049e-02, -4.575706769748902e-03, -8.548924965340165e-03, -2.413375426622506e-02, -1.466351716414579e-02, -1.466351716414578e-02, -2.771426694224453e-02, -2.480415549086637e-05, -6.969706667595976e-05, -3.365034743387486e-02, -3.012340940442810e-04, -3.012340940442815e-04, -8.774185348094198e-07, -1.712287405937137e-09, -1.174663926162943e-08, -3.059559534998307e-04, -5.631040430787079e-08, -5.631040430787045e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_w94_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.368832067361804e-01, -1.368830272571342e-01, -1.368824871248684e-01, -1.368854160283652e-01, -1.368831099117556e-01, -1.368831099117556e-01, -1.324492416506447e-01, -1.324537469132047e-01, -1.325765771695324e-01, -1.323639841338008e-01, -1.324515652352465e-01, -1.324515652352465e-01, -9.582444327973133e-02, -9.498840704213153e-02, -7.233688192035168e-02, -7.351596805213227e-02, -9.552357342769498e-02, -9.552357342769498e-02, -2.880156499374676e-02, -3.144412589145740e-02, -1.179521262238287e-01, -7.201702772371516e-03, -2.960749043076201e-02, -2.960749043076201e-02, -3.468240990977991e-06, -4.032104822107754e-06, -1.933674786269291e-04, -2.525862723551994e-07, -4.019164136570802e-06, -4.019164136570802e-06, -1.300133725213412e-01, -1.297923497935848e-01, -1.299914494443397e-01, -1.298196155620236e-01, -1.298997640604677e-01, -1.298997640604677e-01, -7.485936399916911e-02, -7.658623358569362e-02, -7.246700880741855e-02, -7.380118901168300e-02, -7.922159893040931e-02, -7.922159893040931e-02, -1.280965346509841e-01, -9.775045799849816e-02, -1.269992267679002e-01, -1.087143604317996e-01, -1.283984526050622e-01, -1.283984526050622e-01, -2.118812486108906e-03, -1.274728303948636e-02, -2.307868853830581e-03, -1.016101115934284e-01, -4.252970139906834e-03, -4.252970139906834e-03, -2.360418391440055e-07, -3.619034872669966e-07, -3.322947982240597e-07, -6.044529571932446e-04, -3.665693555884223e-07, -3.665693555884221e-07, -8.367211875453227e-02, -9.482887570779504e-02, -9.038696130426911e-02, -8.721584072919057e-02, -8.876238695014066e-02, -8.876238695014066e-02, -8.227801759923917e-02, -1.084126322423261e-01, -1.256428438476193e-01, -1.231010858830430e-01, -1.274688216727612e-01, -1.274688216727613e-01, -1.000165807440682e-01, -2.270635557778535e-02, -4.052776173544780e-02, -9.380350428940978e-02, -6.455670339957395e-02, -6.455670339957392e-02, -1.032732810334769e-01, -1.297379571664097e-04, -3.642035350846821e-04, -1.125721246535388e-01, -1.568100025990260e-03, -1.568100025990262e-03, -4.591765804749531e-06, -8.967028431517450e-09, -6.150351053495389e-08, -1.592102556513171e-03, -2.946696902328091e-07, -2.946696902328073e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_w94_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.085419748923323e-10, 2.085423549318878e-10, 2.085379790578658e-10, 2.085318686000644e-10, 2.085422260709130e-10, 2.085422260709130e-10, 1.419649403489395e-06, 1.419852086935993e-06, 1.425129934886402e-06, 1.414539088599852e-06, 1.419723490843709e-06, 1.419723490843709e-06, 2.427548739817110e-03, 2.394230773955632e-03, 1.581478408273531e-03, 1.568441603384145e-03, 2.415578838447703e-03, 2.415578838447703e-03, 1.775303603224248e-01, 1.933524208406383e-01, 1.609186767258794e-03, 8.702585589772992e-02, 1.825003431594961e-01, 1.825003431594961e-01, 1.251166671176455e-01, 1.268100549882775e-01, 6.223910323765020e-02, 6.916958458890025e-02, 1.329432432564294e-01, 1.329432432564294e-01, 2.703377911814089e-07, 2.705118441015802e-07, 2.703544350594559e-07, 2.704899128712022e-07, 2.704311149071196e-07, 2.704311149071196e-07, 6.662387850602111e-06, 6.720297442224758e-06, 6.352388169746898e-06, 6.398161844939430e-06, 7.125383202470568e-06, 7.125383202470568e-06, 1.170074183678758e-02, 8.546451938650744e-03, 1.440986268251014e-02, 1.510857153078842e-02, 1.058618959165769e-02, 1.058618959165769e-02, 5.464421091439551e-02, 4.314430738120965e-02, 6.705482333900130e-02, 3.510108671090707e-05, 8.274450425576911e-02, 8.274450425576911e-02, 7.415412237363864e-02, 7.627062412567129e-02, 2.812482948706997e-01, 7.572769924663733e-02, 1.241018609854278e-01, 1.241018609854276e-01, 6.176135706678404e-03, 1.076419863076014e-02, 9.498490092756438e-03, 8.265477505228483e-03, 8.913466974083023e-03, 8.913466974083019e-03, 5.848966769274505e-03, 1.344419238094758e-02, 1.733134242706296e-02, 1.909051584971383e-02, 1.872514711024299e-02, 1.872514711024299e-02, 6.975807116364965e-03, 3.601964067563367e-02, 4.127419788342209e-02, 5.946277342110190e-02, 5.189426786327236e-02, 5.189426786327238e-02, 2.014627034033926e-02, 4.765871323734957e-02, 5.631664297520560e-02, 1.257127780793220e-01, 9.501830675619087e-02, 9.501830675619111e-02, 8.929476001116617e-02, 1.206360961444901e-01, 1.120251544575547e-01, 1.233359509073293e-01, 1.963377267381610e-01, 1.963377267381606e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
