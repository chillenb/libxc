
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_n12_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.721979210582778e-01, -1.722003357502485e-01, -1.722077850579917e-01, -1.721683110234107e-01, -1.721992222618921e-01, -1.721992222618921e-01, -9.517540681592655e-02, -9.518644722346867e-02, -9.549110199328664e-02, -9.497160850611816e-02, -9.518118908253788e-02, -9.518118908253788e-02, -3.168929581222560e-02, -3.112533727191870e-02, -1.530003060276613e-02, -1.620935326552988e-02, -3.148623089038993e-02, -3.148623089038993e-02, 1.877510475662696e-02, 1.602416955167869e-02, -4.997825113172781e-02, 4.568677071617409e-02, 1.791367509999748e-02, 1.791367509999748e-02, -1.890843531793591e-03, -1.947740816763526e-03, 4.146860359639373e-03, -9.877235286427468e-04, -1.926628077276565e-03, -1.926628077276565e-03, -1.478020079200906e-01, -1.482490894428455e-01, -1.478467140172141e-01, -1.481943593078046e-01, -1.480326588212023e-01, -1.480326588212023e-01, -2.259235184432658e-02, -2.438232033211194e-02, -2.010267220681779e-02, -2.151887875955254e-02, -2.700828923196859e-02, -2.700828923196859e-02, -6.082293058412448e-02, -9.707092116506055e-02, -5.721880793742165e-02, -8.712641851776805e-02, -6.667882481743494e-02, -6.667882481743494e-02, 3.753853650874174e-02, 4.317269263985279e-02, 3.804057488868362e-02, -1.397209346766288e-01, 4.449913086417638e-02, 4.449913086417638e-02, -9.497617726010120e-04, -1.091826738464811e-03, -7.874926075586667e-04, 1.599676798999628e-02, -9.820941903821764e-04, -9.820941903821712e-04, -1.031744354764989e-01, -9.639063719207053e-02, -9.867727978137965e-02, -1.004281447636115e-01, -9.954260555133437e-02, -9.954260555133439e-02, -1.035716862080114e-01, -3.731235515040594e-02, -5.407347915072543e-02, -7.304777693780136e-02, -6.313996451531292e-02, -6.313996451531298e-02, -9.766755272436926e-02, 2.989946495625399e-02, 1.002679658673498e-02, -2.545508290068842e-02, -8.203354347615250e-03, -8.203354347615292e-03, -3.300826011468162e-02, 1.685147747574541e-03, 1.003497733813603e-02, -3.648644154402299e-02, 3.044209095971989e-02, 3.044209095971982e-02, -2.155921301829345e-03, -2.520790446300440e-04, -5.325825895262897e-04, 2.978118055004505e-02, -8.207403583236724e-04, -8.207403583236756e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_n12_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.240581946535849e-01, -4.240584135224350e-01, -4.240594822786663e-01, -4.240558880665110e-01, -4.240583093137666e-01, -4.240583093137666e-01, -2.815740051262879e-01, -2.815788038679490e-01, -2.817133353511901e-01, -2.814963455537794e-01, -2.815767782506303e-01, -2.815767782506303e-01, -1.618334975275648e-01, -1.617301203818350e-01, -1.618913445344452e-01, -1.621364093720262e-01, -1.617950521412889e-01, -1.617950521412889e-01, -9.453037345952021e-02, -9.692627543879002e-02, -1.769678473114676e-01, 9.569372989685848e-03, -9.533549754041511e-02, -9.533549754041511e-02, -1.533780082383621e-03, -1.463790558214127e-03, 3.268839301636083e-02, -1.254203103192844e-03, -1.448812270420922e-03, -1.448812270420922e-03, -3.108925630985249e-01, -3.106016062615729e-01, -3.108639612877201e-01, -3.106377941386510e-01, -3.107434312548296e-01, -3.107434312548296e-01, -2.305775902371496e-01, -2.306251737091972e-01, -2.310215431503696e-01, -2.310253521378005e-01, -2.301507972695291e-01, -2.301507972695291e-01, -1.650583869225015e-01, -1.396403248807252e-01, -1.610689358471937e-01, -1.499230175909168e-01, -1.683876480571808e-01, -1.683876480571808e-01, 8.430092469636047e-02, -4.755933042194063e-02, 8.071369165614127e-02, -1.982446705392557e-01, 5.211463917741167e-02, 5.211463917741167e-02, -1.210548261777743e-03, -1.355670211273467e-03, -9.831154523716552e-04, 6.509072693648893e-02, -1.218310929466101e-03, -1.218310929466290e-03, -1.276880988730111e-01, -1.335804522256435e-01, -1.290531985565186e-01, -1.273285984563010e-01, -1.279552574529601e-01, -1.279552574529601e-01, -1.264133538544600e-01, -1.477904759305950e-01, -1.573925666568198e-01, -1.609425340973565e-01, -1.611489297620584e-01, -1.611489297620586e-01, -1.447134705603265e-01, -9.656785590861923e-02, -1.190093898593980e-01, -1.266073802546354e-01, -1.222635273116363e-01, -1.222635273116360e-01, -1.411910807861089e-01, 2.429167670011721e-02, 5.146763202936833e-02, -1.272688414088076e-01, 8.123900296151725e-02, 8.123900296151804e-02, -1.512436429324697e-03, -3.484831954269720e-04, -7.141865781274226e-04, 7.880530354763617e-02, -1.032977554595310e-03, -1.032977554595286e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_n12_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.108553004328970e-10, 6.108577379590127e-10, 6.108495136486291e-10, 6.108099725014078e-10, 6.108567455543465e-10, 6.108567455543465e-10, 2.853052401744649e-06, 2.853376234419325e-06, 2.861738633887630e-06, 2.844494989065597e-06, 2.853161361962633e-06, 2.853161361962633e-06, 4.299060073697815e-03, 4.289067746133711e-03, 4.117570449594891e-03, 4.001657071275384e-03, 4.295509354119666e-03, 4.295509354119666e-03, 9.056530523323723e-01, 8.990779884930248e-01, 2.342090408903469e-03, 6.627858116909383e-01, 9.046935618513486e-01, 9.046935618513486e-01, -4.644536457747600e+01, -4.616449373005553e+01, -1.109422362530093e+01, -3.642771008999598e+01, -4.803261680167798e+01, -4.803261680167798e+01, 6.130220176752635e-07, 6.141090805880211e-07, 6.131288882331028e-07, 6.139744490269582e-07, 6.135901957685583e-07, 6.135901957685583e-07, 2.377863134536671e-05, 2.326733832469201e-05, 2.372565363663154e-05, 2.332114610924307e-05, 2.352252854279025e-05, 2.352252854279025e-05, 1.409309047359546e-02, 1.157970410744171e-02, 1.712107480365614e-02, 2.006826344419431e-02, 1.297032278851439e-02, 1.297032278851439e-02, -1.270818359601224e+00, 4.125232951525161e-01, -1.280433048896581e+00, 6.469447477701466e-05, 1.086696917212276e-02, 1.086696917212276e-02, -3.877827189954463e+01, -3.832639582621641e+01, -1.126153849110733e+02, -7.121445949696339e+00, -5.711266696352093e+01, -5.711266696355373e+01, 1.980502433089621e-02, 1.439426878809588e-02, 1.351516535475271e-02, 1.416065795808583e-02, 1.359920883669055e-02, 1.359920883669053e-02, 2.964140311210662e-02, 1.821798303856599e-02, 2.040169692158280e-02, 2.357873996127976e-02, 2.213137406818015e-02, 2.213137406818014e-02, 9.597925754793228e-03, 2.609053579395947e-01, 1.689565072705042e-01, 8.383733791369852e-02, 1.179215919296212e-01, 1.179215919296207e-01, 2.785043422090775e-02, -1.021727669100490e+01, -7.556935824864257e+00, 1.377851478729432e-01, -3.369626876735359e+00, -3.369626876735330e+00, -3.394179772761376e+01, -7.232226952050176e+01, -6.005647364274017e+01, -4.145060116291050e+00, -8.467228409322777e+01, -8.467228409321831e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
