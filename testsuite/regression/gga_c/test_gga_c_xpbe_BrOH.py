
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_xpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.491100988012953e-02, -7.491155543557253e-02, -7.491325455275435e-02, -7.490433615944413e-02, -7.491130372847329e-02, -7.491130372847329e-02, -5.080630430312495e-02, -5.080946829129673e-02, -5.089690523917120e-02, -5.074830181212295e-02, -5.080797026644887e-02, -5.080797026644887e-02, -2.721999313014053e-02, -2.702704302362931e-02, -2.199534688135490e-02, -2.228734318516393e-02, -2.715041131263574e-02, -2.715041131263574e-02, -8.138221665024941e-03, -8.773353806414577e-03, -3.398701829862625e-02, -2.053667195499109e-03, -8.333461699616351e-03, -8.333461699616351e-03, -7.245365088921627e-08, -8.978533758459788e-08, -2.121380798629921e-05, -1.736298539764141e-09, -8.892953725411959e-08, -8.892953725411959e-08, -6.693797591190326e-02, -6.708796435769165e-02, -6.695294152812213e-02, -6.706956456205113e-02, -6.701527231007895e-02, -6.701527231007895e-02, -2.912094681503326e-02, -2.958037141096838e-02, -2.852991294418890e-02, -2.888718011366660e-02, -3.021388914992965e-02, -3.021388914992965e-02, -3.790989946739179e-02, -5.464157966130108e-02, -3.648294003826979e-02, -4.919212724834641e-02, -4.022124935900119e-02, -4.022124935900119e-02, -4.911981878075562e-04, -3.955045198322803e-03, -5.397737043000264e-04, -7.067494937595252e-02, -1.120419694913793e-03, -1.120419694913793e-03, -1.558284550809105e-09, -2.904122177739609e-09, -2.172356706143219e-09, -9.605373551195085e-05, -2.785186027795864e-09, -2.785186027795864e-09, -6.069357973685117e-02, -5.477329576369090e-02, -5.671475909465191e-02, -5.834515733585993e-02, -5.751471000819506e-02, -5.751471000819506e-02, -6.113325764596211e-02, -2.867996105253853e-02, -3.522861891931072e-02, -4.285014983205628e-02, -3.882488667567349e-02, -3.882488667567349e-02, -5.458856351388311e-02, -7.069505682343468e-03, -1.179454888196891e-02, -2.353352699732341e-02, -1.720032978986814e-02, -1.720032978986813e-02, -2.688550474743497e-02, -1.257995961349325e-05, -5.002923214516590e-05, -2.779920775060604e-02, -3.255031263003117e-04, -3.255031263003117e-04, -1.121301969936822e-07, -1.117371407295247e-11, -2.021781437497407e-10, -3.266387563534930e-04, -1.906355949786846e-09, -1.906355949719958e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_xpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.320649473856359e-01, -1.320654834561649e-01, -1.320671583570869e-01, -1.320583948677678e-01, -1.320652360807301e-01, -1.320652360807301e-01, -1.048480036216640e-01, -1.048509783824180e-01, -1.049333030481990e-01, -1.047941677633176e-01, -1.048495868114170e-01, -1.048495868114170e-01, -7.208432447432923e-02, -7.186235983144112e-02, -6.529874697033219e-02, -6.575788970773652e-02, -7.200447821172261e-02, -7.200447821172261e-02, -3.283611147027517e-02, -3.454835053618008e-02, -8.018222916376680e-02, -1.085561114288196e-02, -3.337128558390413e-02, -3.337128558390413e-02, -4.715413189154749e-07, -5.840716129463816e-07, -1.345259400311885e-04, -1.136801940541960e-08, -5.785461369950991e-07, -5.785461369950991e-07, -1.210460121106425e-01, -1.211756319499380e-01, -1.210589588875919e-01, -1.211597460617763e-01, -1.211128289627770e-01, -1.211128289627770e-01, -7.948300108146399e-02, -8.010641123844042e-02, -7.868588640676644e-02, -7.917947968456714e-02, -8.093035525606973e-02, -8.093035525606973e-02, -7.894127261122712e-02, -8.227061098680065e-02, -7.742949720188201e-02, -8.073180731941877e-02, -8.056475660292076e-02, -8.056475660292076e-02, -2.897881066522489e-03, -1.914763611234455e-02, -3.168216797914548e-03, -1.123046638553896e-01, -6.275971116117652e-03, -6.275971116117652e-03, -1.020490138117955e-08, -1.900105951311617e-08, -1.423861938463300e-08, -5.961306096784132e-04, -1.823336043888846e-08, -1.823336043523607e-08, -7.631993128599561e-02, -8.023530765926197e-02, -7.926643435355606e-02, -7.822348366984445e-02, -7.878188752616541e-02, -7.878188752616540e-02, -7.427526818847953e-02, -7.101920531995268e-02, -7.606676002620853e-02, -7.938607114595865e-02, -7.796043938091801e-02, -7.796043938091803e-02, -8.385005303486422e-02, -3.031993473788781e-02, -4.318881164307970e-02, -6.253666036241928e-02, -5.375915311218331e-02, -5.375915311218330e-02, -6.835322973842056e-02, -8.013968223433883e-05, -3.140047249387295e-04, -6.509920027824535e-02, -1.951842885705171e-03, -1.951842885705207e-03, -7.287875425997409e-07, -7.365536367686969e-11, -1.328278463310783e-09, -1.957370314694547e-03, -1.249303800596236e-08, -1.249303800894189e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_xpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.360883874505159e-10, 1.360902213239929e-10, 1.360921560769171e-10, 1.360622573206978e-10, 1.360894067810015e-10, 1.360894067810015e-10, 8.164847202702937e-07, 8.166063089080371e-07, 8.197922867880755e-07, 8.134633539220161e-07, 8.165300765934838e-07, 8.165300765934838e-07, 1.454209899626530e-03, 1.444200287029540e-03, 1.179988821421301e-03, 1.157064646641330e-03, 1.450632315097558e-03, 1.450632315097558e-03, 1.861402852145875e-01, 1.939967206917589e-01, 8.443351184314418e-04, 1.291810477891996e-01, 1.887649054105480e-01, 1.887649054105480e-01, 1.722002213254658e-02, 1.860048006298360e-02, 4.407930594792918e-02, 3.136000029058922e-03, 1.937680554448550e-02, 1.937680554448550e-02, 2.056276191772382e-07, 2.069540865087487e-07, 2.057584573533567e-07, 2.067897741315655e-07, 2.063115742524840e-07, 2.063115742524840e-07, 5.540265856917439e-06, 5.488764951441121e-06, 5.422864468478726e-06, 5.383982693988577e-06, 5.661709405716491e-06, 5.661709405716491e-06, 5.543749872737319e-03, 8.481357375369236e-03, 6.736004537266790e-03, 1.046492840521387e-02, 5.154635898245983e-03, 5.154635898245983e-03, 7.527612232292354e-02, 6.251054991574240e-02, 9.262515673675778e-02, 5.354378714143068e-05, 1.217341912063854e-01, 1.217341912063854e-01, 3.228886212066569e-03, 4.036534512902868e-03, 1.213186739068498e-02, 7.585695931914799e-02, 6.219719114515055e-03, 6.219719113059462e-03, 1.490619468162680e-02, 1.144876374441852e-02, 1.247620071172836e-02, 1.341629445344524e-02, 1.292831620724231e-02, 1.292831620724231e-02, 1.802494743746468e-02, 6.900138890578720e-03, 8.036645450661975e-03, 9.856181356324236e-03, 8.836582554600217e-03, 8.836582554600217e-03, 6.617295256092592e-03, 4.495362427610544e-02, 3.924539314226579e-02, 3.174297492329375e-02, 3.659568127731635e-02, 3.659568127731636e-02, 1.052774666570052e-02, 2.997820150569553e-02, 4.939216042813575e-02, 5.595603232839981e-02, 1.194622699251789e-01, 1.194622699251799e-01, 1.435972552727107e-02, 9.917182398429189e-04, 2.429466261972789e-03, 1.531285084089691e-01, 8.380184935788208e-03, 8.380184937354875e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
