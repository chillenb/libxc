
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_g96_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.824536960168580e-02, -5.824560937578331e-02, -5.824629530842623e-02, -5.824273578903836e-02, -5.824465490752959e-02, -5.824465490752959e-02, -5.152652782474039e-02, -5.152830688698690e-02, -5.156955793433809e-02, -5.149868540739762e-02, -5.152874815572560e-02, -5.152874815572560e-02, -3.447754526278846e-02, -3.437040428234676e-02, -3.164387542198781e-02, -3.185246497469530e-02, -3.121503258511317e-02, -3.121503258511317e-02, -1.121525509222716e-02, -1.167866117422167e-02, -3.693606135844630e-02, -6.038028878403125e-03, -3.920967150458657e-03, -3.920967150458660e-03, -1.398272924825120e-07, -1.818498550824784e-07, -1.052186156552818e-04, -1.257326576534907e-08, -2.614841886555306e-08, -2.614841886555314e-08, -5.786806417747737e-02, -5.791877759046967e-02, -5.787016225531683e-02, -5.791493568784609e-02, -5.789388994828950e-02, -5.789388994828950e-02, -3.946637680028137e-02, -3.978008261236735e-02, -3.880694815805757e-02, -3.908619753787586e-02, -3.995647522220128e-02, -3.995647522220128e-02, -3.703519730636660e-02, -4.289137138180817e-02, -3.524503759167497e-02, -4.020121808294874e-02, -3.771400147818108e-02, -3.771400147818105e-02, -2.211777930891452e-03, -8.665604511606586e-03, -1.830206926921169e-03, -5.621534242947350e-02, -3.927178068520436e-03, -3.927178068520436e-03, -5.426954494505095e-09, -1.336177625980195e-08, -2.357362931123145e-08, -6.493621599107970e-04, -2.004955008501041e-08, -2.004955008501038e-08, -4.337667332860581e-02, -4.170651915482845e-02, -4.224569963277120e-02, -4.272573898523545e-02, -4.248123916620008e-02, -4.248123916620008e-02, -4.352272419411491e-02, -3.105417505790858e-02, -3.418697619166504e-02, -3.753262595326971e-02, -3.582305447957321e-02, -3.582305447957321e-02, -4.337722328778925e-02, -1.241942946046128e-02, -1.676815788330997e-02, -2.573984350550772e-02, -2.112019048653422e-02, -2.112019048653420e-02, -2.985135744515530e-02, -8.375166076049041e-05, -2.603625094883957e-04, -2.705150855023570e-02, -1.509585572432135e-03, -1.509585572432135e-03, -4.869745413766062e-07, -2.247622721526910e-10, -2.572869849600663e-09, -1.259607837077617e-03, -2.154127853407815e-08, -2.154127853407812e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_g96_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.985896327249066e-02, -7.985917878998855e-02, -7.985867775547002e-02, -7.985923005375890e-02, -7.985915321991460e-02, -7.985809963360098e-02, -7.985898420310769e-02, -7.986174563240418e-02, -7.985628953678042e-02, -7.986256371364671e-02, -7.985628953678042e-02, -7.986256371364671e-02, -7.609113582541784e-02, -7.607105571051058e-02, -7.609103436169126e-02, -7.606988994133219e-02, -7.607900538352831e-02, -7.605281106195595e-02, -7.610618898035014e-02, -7.607826911671013e-02, -7.614284143638385e-02, -7.601816331159651e-02, -7.614284143638385e-02, -7.601816331159651e-02, -5.912821090461354e-02, -5.769635743035209e-02, -5.927837697516786e-02, -5.752318977210488e-02, -5.668234744340838e-02, -5.907545904847437e-02, -5.842107809195753e-02, -5.764794119975716e-02, -4.687381085043103e-02, -7.037512738524321e-02, -4.687381085043103e-02, -7.037512738524321e-02, -2.985767788208930e-02, -2.575912699557724e-02, -3.081586717482582e-02, -2.607134201111993e-02, -6.557123471564372e-02, -5.669356124342621e-02, -1.894115906831462e-02, -1.803391833493473e-02, -5.502023449289392e-03, -5.598617736192903e-02, -5.502023449289398e-03, -5.598617736192905e-02, -9.315248951041337e-07, -7.888367937400605e-07, -1.220147471101389e-06, -1.011894208025848e-06, -5.953292014989156e-04, -5.060682206669159e-04, -7.750760891347674e-08, -8.050907519207288e-08, -9.268275610848667e-08, -5.300279280322410e-07, -9.268275610848693e-08, -5.300279280322426e-07, -7.564018024619001e-02, -7.568937942387098e-02, -7.560885875575743e-02, -7.566284497115484e-02, -7.563743169893065e-02, -7.568975753480642e-02, -7.561334062589377e-02, -7.566276990254719e-02, -7.562344550633567e-02, -7.567666996322910e-02, -7.562344550633567e-02, -7.567666996322910e-02, -7.292658174313779e-02, -7.293867354164860e-02, -7.299950338068628e-02, -7.306913624925258e-02, -7.316526755587635e-02, -7.241290857988861e-02, -7.326994518751603e-02, -7.250827695023149e-02, -7.216234368546601e-02, -7.394071002138899e-02, -7.216234368546601e-02, -7.394071002138899e-02, -5.488075755920487e-02, -5.523847566655597e-02, -5.422528804004016e-02, -5.401457841586550e-02, -5.704737409886691e-02, -5.084275843164111e-02, -5.463889287893107e-02, -5.056434124590594e-02, -5.137397047349518e-02, -5.925082386370413e-02, -5.137397047349516e-02, -5.925082386370407e-02, -8.665482732469912e-03, -8.377452687760056e-03, -2.483624610512164e-02, -2.438327033011835e-02, -7.969087243948608e-03, -6.638485234361943e-03, -6.732226920612693e-02, -6.738156800377791e-02, -1.493400661583748e-02, -1.186996333929984e-02, -1.493400661583748e-02, -1.186996333929984e-02, -3.670919056406061e-08, -3.193501320854957e-08, -8.620501261309200e-08, -8.116457578433163e-08, -1.514736150331269e-07, -1.332848146723428e-07, -2.952538132491145e-03, -2.886264870653671e-03, -2.089323994034367e-07, -8.881204114986198e-08, -2.089323994034364e-07, -8.881204114986186e-08, -5.190122111331395e-02, -5.136779280975862e-02, -5.295129233381146e-02, -5.236074057274612e-02, -5.263829673715335e-02, -5.205750888767532e-02, -5.232903649318749e-02, -5.178324990947074e-02, -5.248834397194533e-02, -5.192517038939921e-02, -5.248834397194533e-02, -5.192517038939921e-02, -5.092204766816932e-02, -5.052737290657810e-02, -5.292521298084355e-02, -5.211800561604046e-02, -5.339135078363958e-02, -5.255684518671915e-02, -5.306348317182017e-02, -5.251220440883561e-02, -5.325598683893920e-02, -5.265812719339001e-02, -5.325598683893920e-02, -5.265812719339001e-02, -5.525838778448631e-02, -5.480975560987447e-02, -3.187557972109385e-02, -3.118338191577031e-02, -3.831993556026317e-02, -3.681156734946348e-02, -4.575718810821128e-02, -4.491896157852533e-02, -4.190750830829932e-02, -4.185969401616272e-02, -4.190750830829929e-02, -4.185969401616266e-02, -5.151572860719251e-02, -5.022291064375654e-02, -4.463947177676602e-04, -4.375278197760959e-04, -1.346953669293940e-03, -1.219045036590194e-03, -4.556655875388577e-02, -4.331608153608452e-02, -6.660504184848870e-03, -5.527781539316057e-03, -6.660504184848871e-03, -5.527781539316060e-03, -3.077436601489363e-06, -2.807436053797947e-06, -1.318347905267694e-09, -1.515667995250095e-09, -1.741394869336501e-08, -1.500832062076638e-08, -5.338069393234085e-03, -5.047841969837997e-03, -2.272676231917049e-07, -8.907794804175750e-08, -2.272676231917045e-07, -8.907794804175744e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_g96_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.079872461550334e-10, 0.000000000000000e+00, 1.079885990015073e-10, 1.079868790322846e-10, 0.000000000000000e+00, 1.079887425446321e-10, 1.079851644706067e-10, 0.000000000000000e+00, 1.079840840055459e-10, 1.079839862686915e-10, 0.000000000000000e+00, 1.079887014713410e-10, 1.079837089650074e-10, 0.000000000000000e+00, 1.079879406436061e-10, 1.079837089650074e-10, 0.000000000000000e+00, 1.079879406436061e-10, 7.395575453585799e-07, 0.000000000000000e+00, 7.399998043935332e-07, 7.396037394494727e-07, 0.000000000000000e+00, 7.400813280270347e-07, 7.411312465097141e-07, 0.000000000000000e+00, 7.413344356563248e-07, 7.379877076848635e-07, 0.000000000000000e+00, 7.382796799671406e-07, 7.406336167668152e-07, 0.000000000000000e+00, 7.389032306375128e-07, 7.406336167668152e-07, 0.000000000000000e+00, 7.389032306375128e-07, 1.451952919276770e-03, 0.000000000000000e+00, 1.433044455515641e-03, 1.451765693952290e-03, 0.000000000000000e+00, 1.428408825974264e-03, 1.351011497210887e-03, 0.000000000000000e+00, 1.386601863860145e-03, 1.334030550384588e-03, 0.000000000000000e+00, 1.324053782236876e-03, 1.187091193832186e-03, 0.000000000000000e+00, 1.476991926939134e-03, 1.187091193832186e-03, 0.000000000000000e+00, 1.476991926939134e-03, 2.412488442070137e-01, 0.000000000000000e+00, 1.833202571338049e-01, 2.455178884722604e-01, 0.000000000000000e+00, 1.791267873719431e-01, 8.378076537335368e-04, 0.000000000000000e+00, 6.800374866408929e-04, 3.193434632626020e-01, 0.000000000000000e+00, 2.866980339821894e-01, 3.295694441475527e-02, 0.000000000000000e+00, 2.752702213967512e+00, 3.295694441475529e-02, 0.000000000000000e+00, 2.752702213967514e+00, 2.447676149532578e-01, 0.000000000000000e+00, 1.732969631603638e-01, 2.852657774117268e-01, 0.000000000000000e+00, 1.938869355248249e-01, 5.928238001573141e-01, 0.000000000000000e+00, 4.325724172904633e-01, 9.134245921275790e-02, 0.000000000000000e+00, 9.784546410218355e-02, 3.404837802900736e-02, 0.000000000000000e+00, 1.723635360411151e+00, 3.404837802900749e-02, 0.000000000000000e+00, 1.723635360411157e+00, 1.346089433830399e-07, 0.000000000000000e+00, 1.348850497682735e-07, 1.349156616741551e-07, 0.000000000000000e+00, 1.351880241199181e-07, 1.346214794386924e-07, 0.000000000000000e+00, 1.348955210361595e-07, 1.348890381295237e-07, 0.000000000000000e+00, 1.351662058911306e-07, 1.347669813990893e-07, 0.000000000000000e+00, 1.350381389868313e-07, 1.347669813990893e-07, 0.000000000000000e+00, 1.350381389868313e-07, 7.349791660237937e-06, 0.000000000000000e+00, 7.352920252889234e-06, 7.199476630755661e-06, 0.000000000000000e+00, 7.215288385659291e-06, 7.310934752336295e-06, 0.000000000000000e+00, 7.259163558595491e-06, 7.187245939773076e-06, 0.000000000000000e+00, 7.130537044152605e-06, 7.226617087770428e-06, 0.000000000000000e+00, 7.381041181720675e-06, 7.226617087770428e-06, 0.000000000000000e+00, 7.381041181720675e-06, 3.634441865973803e-03, 0.000000000000000e+00, 3.725961736395830e-03, 4.090575355533709e-03, 0.000000000000000e+00, 4.108985352491999e-03, 5.719057844597360e-03, 0.000000000000000e+00, 4.271530592039638e-03, 7.484333281001426e-03, 0.000000000000000e+00, 5.529445009036476e-03, 2.889757091244815e-03, 0.000000000000000e+00, 4.505990335260367e-03, 2.889757091244813e-03, 0.000000000000000e+00, 4.505990335260364e-03, 4.023160210424349e-01, 0.000000000000000e+00, 3.831671949565689e-01, 1.316678002525755e-01, 0.000000000000000e+00, 1.268146326779201e-01, 5.241919759639754e-01, 0.000000000000000e+00, 3.698924577959105e-01, 2.368655887880640e-05, 0.000000000000000e+00, 2.379365724345270e-05, 4.980964899592080e-01, 0.000000000000000e+00, 3.881635633185633e-01, 4.980964899592080e-01, 0.000000000000000e+00, 3.881635633185633e-01, 1.218242913210694e-01, 0.000000000000000e+00, 8.687623784237655e-02, 1.252717438572403e-01, 0.000000000000000e+00, 1.075667603879065e-01, 1.214083626851162e+00, 0.000000000000000e+00, 9.701178403476313e-01, 6.977293836189031e-01, 0.000000000000000e+00, 6.542973233904835e-01, 1.101056849886233e+00, 0.000000000000000e+00, 1.879510141241491e-01, 1.101056849886231e+00, 0.000000000000000e+00, 1.879510141241487e-01, 8.174970075905242e-03, 0.000000000000000e+00, 7.959380830904994e-03, 6.183120508789683e-03, 0.000000000000000e+00, 6.004342437229511e-03, 6.638390549028014e-03, 0.000000000000000e+00, 6.452007245030297e-03, 7.163828004023926e-03, 0.000000000000000e+00, 6.960280822935071e-03, 6.879215773981181e-03, 0.000000000000000e+00, 6.684905951243627e-03, 6.879215773981181e-03, 0.000000000000000e+00, 6.684905951243627e-03, 1.137674827741860e-02, 0.000000000000000e+00, 1.106947513877595e-02, 6.084047053186297e-03, 0.000000000000000e+00, 5.884500713602233e-03, 6.108253117272235e-03, 0.000000000000000e+00, 5.909827698984530e-03, 6.431196182150682e-03, 0.000000000000000e+00, 6.249533498555840e-03, 6.228400677530504e-03, 0.000000000000000e+00, 6.041068102236858e-03, 6.228400677530504e-03, 0.000000000000000e+00, 6.041068102236858e-03, 3.209928067492764e-03, 0.000000000000000e+00, 3.202111976521941e-03, 7.242313822773304e-02, 0.000000000000000e+00, 6.939518647918033e-02, 4.866764242129825e-02, 0.000000000000000e+00, 4.538508583456355e-02, 2.650612313158709e-02, 0.000000000000000e+00, 2.534606872765264e-02, 3.548406047211552e-02, 0.000000000000000e+00, 3.574695135896685e-02, 3.548406047211552e-02, 0.000000000000000e+00, 3.574695135896681e-02, 8.772752076756039e-03, 0.000000000000000e+00, 8.335046897583253e-03, 4.518987390098091e-01, 0.000000000000000e+00, 4.346720313165315e-01, 5.557987181096068e-01, 0.000000000000000e+00, 4.639661836400101e-01, 3.857528615899133e-02, 0.000000000000000e+00, 3.428198221124943e-02, 8.253309052646765e-01, 0.000000000000000e+00, 6.534984913203199e-01, 8.253309052646766e-01, 0.000000000000000e+00, 6.534984913203207e-01, 2.451151741747378e-01, 0.000000000000000e+00, 2.046591072277554e-01, 1.788991773572752e-01, 0.000000000000000e+00, 2.911449311377478e-01, 2.260682447335993e-01, 0.000000000000000e+00, 1.699824054142609e-01, 8.026917519571429e-01, 0.000000000000000e+00, 7.149319039218125e-01, 2.108664682585173e+00, 0.000000000000000e+00, 2.377525143104055e-01, 2.108664682585175e+00, 0.000000000000000e+00, 2.377525143104065e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
