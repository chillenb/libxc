
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_q2d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_q2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.177187962426985e-02, -5.177265901450503e-02, -5.177488755044501e-02, -5.176331861114195e-02, -5.176955574205266e-02, -5.176955574205266e-02, -4.138858788595230e-02, -4.139374906471669e-02, -4.151331160812151e-02, -4.130590396590429e-02, -4.139479833143019e-02, -4.139479833143019e-02, -2.737794869056808e-02, -2.714351707203846e-02, -2.153565641183670e-02, -2.179254713619448e-02, -2.193791477363395e-02, -2.193791477363395e-02, -6.104882582970333e-03, -6.672726485607836e-03, -2.994412454943078e-02, -1.929504738115027e-03, -3.383782029761656e-03, -3.383782029761656e-03, -3.428880041735902e-05, -3.011588971816717e-05, -1.325577448713563e-05, -5.847213183538810e-05, -4.082366963434799e-05, -4.082366963438350e-05, -5.864320878280104e-02, -5.885458538269421e-02, -5.865191823047858e-02, -5.883851850009077e-02, -5.875074828931377e-02, -5.875074828931377e-02, -2.065955238676300e-02, -2.111940592776855e-02, -1.963629089336365e-02, -2.002921741053573e-02, -2.143001882690321e-02, -2.143001882690321e-02, -3.881438591916495e-02, -5.596331261278774e-02, -3.616038700826367e-02, -5.133630265703051e-02, -4.072851879579050e-02, -4.072851879579050e-02, -3.837214291863312e-04, -3.085064053153969e-03, -2.993608108439334e-04, -7.179570289445264e-02, -1.015183543097678e-03, -1.015183543097678e-03, -5.002262404702825e-05, -5.184354026244788e-05, -9.193622894631289e-06, -7.843570330792511e-05, -1.864652229876092e-05, -1.864652229873640e-05, -6.047362560152668e-02, -5.503217652395270e-02, -5.684554534967595e-02, -5.842582667163563e-02, -5.762632612683314e-02, -5.762632612683314e-02, -6.163874131512068e-02, -2.708949664861714e-02, -3.455828881830221e-02, -4.377106798431018e-02, -3.892717515626094e-02, -3.892717515626094e-02, -5.585824564139156e-02, -5.560240951762648e-03, -9.784653458835703e-03, -2.334216200730905e-02, -1.568621331663927e-02, -1.568621331663927e-02, -2.635582705026388e-02, -1.236810957854120e-05, -2.721198806584240e-05, -2.832733329906879e-02, -2.535527952505108e-04, -2.535527952505073e-04, -2.897229012254668e-05, -1.832957216591904e-05, -3.123771926749282e-05, -1.933095227431822e-04, -1.544005032869343e-05, -1.544005032861412e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_q2d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_q2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.220078367336604e-01, -1.220093066429787e-01, -1.220134111990603e-01, -1.219915907812631e-01, -1.220033703754241e-01, -1.220033703754241e-01, -1.090710095412520e-01, -1.090772142246292e-01, -1.092208307458141e-01, -1.089724712246005e-01, -1.090786152292215e-01, -1.090786152292215e-01, -7.839159864895720e-02, -7.810005289282405e-02, -6.982586590001459e-02, -7.031556099362923e-02, -7.054280812447211e-02, -7.054280812447211e-02, -2.727094724713908e-02, -2.917760609223199e-02, -8.301995627069529e-02, -1.029280909142434e-02, -1.683361254465093e-02, -1.683361254465090e-02, 1.450257900340087e-04, 1.315116265300999e-04, -2.714329789104039e-05, 1.223022657571469e-04, 1.463146524381975e-04, 1.463146524384552e-04, -1.293531637852013e-01, -1.295368356123258e-01, -1.293607622570461e-01, -1.295229187261835e-01, -1.294467125991798e-01, -1.294467125991798e-01, -7.315325677931517e-02, -7.418075579456004e-02, -7.082561678572605e-02, -7.173973257991902e-02, -7.485137981835949e-02, -7.485137981835949e-02, -8.440862028398044e-02, -8.350756722726715e-02, -8.189639340588598e-02, -8.148992138220135e-02, -8.519514466665197e-02, -8.519514466665197e-02, -2.260758364238848e-03, -1.566900928203999e-02, -1.776273747960582e-03, -1.179093446627543e-01, -5.705786124449205e-03, -5.705786124449205e-03, 7.311363663640610e-05, 1.235720663741866e-04, 4.056684284521605e-05, -4.660379481399936e-04, 7.543260937997453e-05, 7.543260937976405e-05, -7.599635763172069e-02, -8.065111492676785e-02, -7.931220591169898e-02, -7.797397793928512e-02, -7.867115609861269e-02, -7.867115609861269e-02, -7.322823653497490e-02, -7.433360984110436e-02, -8.021475326305887e-02, -8.253461883633401e-02, -8.193020340015295e-02, -8.193020340015295e-02, -8.549497667713814e-02, -2.577401238020222e-02, -3.966482410883153e-02, -6.595542130807903e-02, -5.382581338586807e-02, -5.382581338586809e-02, -7.250721876589425e-02, -8.788417740058822e-06, -1.306711096466589e-04, -6.899684128602901e-02, -1.514320392468054e-03, -1.514320392468041e-03, 1.323681269417485e-04, -6.703128673631578e-08, 5.104558777246205e-05, -1.160500774270409e-03, 6.381700034702768e-05, 6.381700034639259e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_q2d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_q2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.756491254483904e-10, 1.756537946766192e-10, 1.756621286070497e-10, 1.755929229525085e-10, 1.756309495894710e-10, 1.756309495894710e-10, 1.078259294484690e-06, 1.078481969626961e-06, 1.083517387530153e-06, 1.073783841045014e-06, 1.078398755808443e-06, 1.078398755808443e-06, 1.793296084422066e-03, 1.779751931769485e-03, 1.437957761025158e-03, 1.405370237104854e-03, 1.431469388616886e-03, 1.431469388616886e-03, 1.557259493489739e-01, 1.644180280781186e-01, 9.709600286532861e-04, 1.129438393940746e-01, 1.452476884188670e-01, 1.452476884188668e-01, -3.266912521603380e+01, -2.591197415756466e+01, 3.979022574638079e-03, -1.711485381890830e+02, -9.680217123424774e+01, -9.680217123436533e+01, 2.832017044334432e-07, 2.850773644557679e-07, 2.832765833106398e-07, 2.849322353009792e-07, 2.841557600662708e-07, 2.841557600662708e-07, 6.088546405711573e-06, 6.074938608756053e-06, 5.786028255215540e-06, 5.776306951561321e-06, 6.232485216193142e-06, 6.232485216193142e-06, 5.902258932462588e-03, 7.449688475147734e-03, 7.683919536735360e-03, 1.139935982116896e-02, 5.904495702723310e-03, 5.904495702723310e-03, 6.280927790893936e-02, 5.697123760213679e-02, 6.389397252320117e-02, 6.039410860124792e-05, 1.210580670112982e-01, 1.210580670112982e-01, -3.001553697237649e+02, -1.908944377089710e+02, -2.911862503625495e+02, 6.058971432294029e-02, -2.159169301509230e+02, -2.159169301505336e+02, 1.257178581497061e-02, 1.078538790971219e-02, 1.135234668910908e-02, 1.186938206123024e-02, 1.160515332325632e-02, 1.160515332325632e-02, 1.488639322372645e-02, 7.961384998280599e-03, 9.193811639912418e-03, 1.084869946952898e-02, 9.977534928009584e-03, 9.977534928009584e-03, 5.916326394080252e-03, 4.248936516424581e-02, 3.911221311472749e-02, 3.482094026065075e-02, 3.898100831040581e-02, 3.898100831040584e-02, 1.143001181673997e-02, -7.895392920292866e-03, 2.555512900211413e-02, 5.498247488743194e-02, 1.091597707436440e-01, 1.091597707436436e-01, -9.353001737549212e+00, -2.748504322094029e+03, -8.063606417824113e+02, 9.946405613027887e-02, -2.576969874857541e+02, -2.576969874838654e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
