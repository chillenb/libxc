
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_gaussian_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.096147085486809e-02, -5.096231878320632e-02, -5.096472911920822e-02, -5.095214272204858e-02, -5.095893058082496e-02, -5.095893058082496e-02, -4.137862871747351e-02, -4.138379547304347e-02, -4.150348554289630e-02, -4.129584993689776e-02, -4.138484517247268e-02, -4.138484517247268e-02, -2.737718650165213e-02, -2.714274733745410e-02, -2.153461524780629e-02, -2.179151010577860e-02, -2.193689249097485e-02, -2.193689249097485e-02, -6.104540274578969e-03, -6.672387481814670e-03, -2.994329415193603e-02, -1.929030864367670e-03, -3.383419079750785e-03, -3.383419079750785e-03, -5.408376658302531e-09, -7.228193265450653e-09, -8.170174725713515e-06, -3.863044620876478e-10, -1.421136245687654e-09, -1.421136245687654e-09, -5.863796216486747e-02, -5.884944402978786e-02, -5.864667597509038e-02, -5.883336920850023e-02, -5.874555553895690e-02, -5.874555553895690e-02, -2.063656131849895e-02, -2.109741805592655e-02, -1.960996958889931e-02, -2.000390256031261e-02, -2.140903435385900e-02, -2.140903435385900e-02, -3.881392387904343e-02, -5.596308832989491e-02, -3.615991840415456e-02, -5.133604606952403e-02, -4.072807668251197e-02, -4.072807668251197e-02, -3.825406328856686e-04, -3.084454709600544e-03, -2.981121082408227e-04, -7.179525481293211e-02, -1.014633381263314e-03, -1.014633381263314e-03, -1.509911558145545e-10, -4.089865394809133e-10, -7.300118556132974e-10, -7.668846234469887e-05, -8.142345064748181e-10, -8.142345064748181e-10, -6.047353879800992e-02, -5.503197352777706e-02, -5.684537884601500e-02, -5.842569375464524e-02, -5.762617600556533e-02, -5.762617600556533e-02, -6.163869900285261e-02, -2.708894632801687e-02, -3.455781842487577e-02, -4.377070518104337e-02, -3.892675274464439e-02, -3.892675274464439e-02, -5.585799743689883e-02, -5.559664820071483e-03, -9.784144265375824e-03, -2.334170450027851e-02, -1.568573726162815e-02, -1.568573726162815e-02, -2.635530384021129e-02, -6.147150242374690e-06, -2.357942670503909e-05, -2.832693029577003e-02, -2.526811026633731e-04, -2.526811026633766e-04, -2.102571300762402e-08, -3.823514460593613e-12, -6.395458714004704e-11, -1.923128262867771e-04, -7.147516626342435e-10, -7.147516648026478e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_gaussian_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.271546869271616e-01, -1.271557252487870e-01, -1.271586858482524e-01, -1.271432723525542e-01, -1.271515839155973e-01, -1.271515839155973e-01, -1.091253309219566e-01, -1.091315021418368e-01, -1.092743535367376e-01, -1.090273621220579e-01, -1.091329005884401e-01, -1.091329005884401e-01, -7.839235979792109e-02, -7.810084800369843e-02, -6.982804332343551e-02, -7.031771085660281e-02, -7.054488030036057e-02, -7.054488030036057e-02, -2.727089877992819e-02, -2.917746666044538e-02, -8.302100206934118e-02, -1.029430636350765e-02, -1.683417586238473e-02, -1.683417586238474e-02, -3.530094800915951e-08, -4.715698469133389e-08, -5.188742885373874e-05, -2.532305899135602e-09, -9.300022001449398e-09, -9.300022010267691e-09, -1.293796072525946e-01, -1.295626473332326e-01, -1.293871795369207e-01, -1.295487780797651e-01, -1.294728327364426e-01, -1.294728327364426e-01, -7.328301524100024e-02, -7.430468221102515e-02, -7.097482006312032e-02, -7.188309492263539e-02, -7.496942536762841e-02, -7.496942536762841e-02, -8.440864488816893e-02, -8.350772287552707e-02, -8.189639114301583e-02, -8.149007166101960e-02, -8.519518542336994e-02, -8.519518542336994e-02, -2.266242505506650e-03, -1.567084978759134e-02, -1.782118849104831e-03, -1.179095135276356e-01, -5.707957648172381e-03, -5.707957648172381e-03, -9.914745915044214e-10, -2.681378221745277e-09, -4.793825992983490e-09, -4.743896339067481e-04, -5.340688856342285e-09, -5.340688858522605e-09, -7.599645212263215e-02, -8.065126726114864e-02, -7.931234878177597e-02, -7.797410499861755e-02, -7.867129209902164e-02, -7.867129209902164e-02, -7.322828793269652e-02, -7.433361521449501e-02, -8.021473237978119e-02, -8.253470821885832e-02, -8.193023069910443e-02, -8.193023069910443e-02, -8.549513279806238e-02, -2.577515494231475e-02, -3.966508406191935e-02, -6.595522249979296e-02, -5.382563106387054e-02, -5.382563106387055e-02, -7.250715703354738e-02, -3.911327551063355e-05, -1.482780362564160e-04, -6.899673818223166e-02, -1.518340761128192e-03, -1.518340761128204e-03, -1.368027301960231e-07, -2.524912059697350e-11, -4.208007577341411e-10, -1.165151889642002e-03, -4.690525790429858e-09, -4.690525794923027e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_gaussian_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.927779744286808e-10, 1.927814736733972e-10, 1.927863001498180e-10, 1.927344699746384e-10, 1.927631496880362e-10, 1.927631496880362e-10, 1.079437867430485e-06, 1.079660054101516e-06, 1.084684162909107e-06, 1.074969891486827e-06, 1.079576688445921e-06, 1.079576688445921e-06, 1.793361670962094e-03, 1.779818834015735e-03, 1.438073353262293e-03, 1.405481553961966e-03, 1.431579369909811e-03, 1.431579369909811e-03, 1.557293650305340e-01, 1.644205979692597e-01, 9.710016037842322e-04, 1.129769169220034e-01, 1.452607396457576e-01, 1.452607396457578e-01, 4.259643679465630e-03, 5.018723807569698e-03, 2.577328120235421e-02, 1.504889550976208e-03, 3.145612769419485e-03, 3.145612770128655e-03, 2.833479241969863e-07, 2.852212016121652e-07, 2.834227036854706e-07, 2.850762517471715e-07, 2.843007628938606e-07, 2.843007628938606e-07, 6.108987415967667e-06, 6.094212129565803e-06, 5.808918197495905e-06, 5.798044562892597e-06, 6.251199643096231e-06, 6.251199643096231e-06, 5.902337716706701e-03, 7.449833630135705e-03, 7.684018048620857e-03, 1.139956864219622e-02, 5.904575863990791e-03, 5.904575863990791e-03, 6.308169013147870e-02, 5.698496771062946e-02, 6.426931095456183e-02, 6.039511845638841e-05, 1.211444367480105e-01, 1.211444367480105e-01, 1.469843471759776e-03, 1.850089530489401e-03, 1.851211255533202e-02, 6.254234874214731e-02, 8.056451590808339e-03, 8.056451596317512e-03, 1.257208513783340e-02, 1.078560461334412e-02, 1.135258810761372e-02, 1.186964724155379e-02, 1.160540621389457e-02, 1.160540621389457e-02, 1.488676855175430e-02, 7.961505612956140e-03, 9.193926016455856e-03, 1.084886021691869e-02, 9.977666029126234e-03, 9.977666029126234e-03, 5.916437561765354e-03, 4.249392636906988e-02, 3.911357064050029e-02, 3.482123842682253e-02, 3.898146321281155e-02, 3.898146321281155e-02, 1.143016137114569e-02, 2.106584041370182e-02, 3.235374425657357e-02, 5.498300676203115e-02, 1.096796702315953e-01, 1.096796702315964e-01, 5.291759009610900e-03, 2.005673423360353e-03, 2.523743441130880e-03, 1.001776319528181e-01, 1.003216467719249e-02, 1.003216468333993e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
