
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_ft97_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.263534405188162e-02, -5.263542915363943e-02, -5.263568798547412e-02, -5.263429669053650e-02, -5.263538994176373e-02, -5.263538994176373e-02, -4.965151206987974e-02, -4.965235850190967e-02, -4.967553667215066e-02, -4.963577319457804e-02, -4.965195468902548e-02, -4.965195468902548e-02, -3.759885235954367e-02, -3.730207556514253e-02, -2.583363328459381e-02, -2.662674461356630e-02, -3.749290303020209e-02, -3.749290303020209e-02, -2.279833258495744e-05, -9.719338924144121e-05, -4.368929376425561e-02, 0.000000000000000e+00, -3.672927616959332e-05, -3.672927616959332e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.191147411642642e-02, -5.192551616165093e-02, -5.191285199896377e-02, -5.192376424162454e-02, -5.191863994194874e-02, -5.191863994194874e-02, -2.849421015905548e-02, -2.964202036300099e-02, -2.682850619197606e-02, -2.777111292422801e-02, -3.129687922374188e-02, -3.129687922374188e-02, -4.298776066565041e-02, -5.688829440707447e-02, -4.273493067630083e-02, -4.422151168578629e-02, -4.290035205319075e-02, -4.290035205319075e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.099108814847009e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.368554466259338e-02, -5.828540837051385e-02, -6.127506589468479e-02, -6.269058487091006e-02, -6.207234961747181e-02, -6.207234961747181e-02, -6.324287068877310e-02, -4.014516381544164e-02, -4.246136207754171e-02, -4.104057705722167e-02, -4.210806263021456e-02, -4.210806263021455e-02, -5.558799974086760e-02, -1.300121535696476e-07, -1.984023834554706e-03, -3.496679580733106e-02, -1.949568448991713e-02, -1.949568448991711e-02, -3.858298306892446e-02, 0.000000000000000e+00, 0.000000000000000e+00, -3.874244092801317e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_ft97_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.145413758812181e-02, -6.145390713377743e-02, -6.145321956363634e-02, -6.145698947868122e-02, -6.145401320496247e-02, -6.145401320496247e-02, -6.389342889928534e-02, -6.388667535563178e-02, -6.370222494779065e-02, -6.402224614214212e-02, -6.388997657522716e-02, -6.388997657522716e-02, -1.049830317467597e-01, -1.067313875367639e-01, -1.569598395548694e-01, -1.547237948456344e-01, -1.056101120888661e-01, -1.056101120888661e-01, -1.462939846096267e-03, -5.373322415179027e-03, -6.776504960185727e-02, 0.000000000000000e+00, -2.252256538267186e-03, -2.252256538267186e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.718754388497163e-02, -5.739296500614729e-02, -5.720666328391728e-02, -5.736606264413065e-02, -5.728954364317735e-02, -5.728954364317735e-02, -1.651480913339710e-01, -1.615754489877897e-01, -1.698206481010141e-01, -1.672981129294606e-01, -1.558152009781741e-01, -1.558152009781741e-01, -4.036324005232830e-02, -1.164756494243176e-01, -4.203224868478189e-02, -1.118995266134460e-01, -3.705832512293283e-02, -3.705832512293283e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.547351069437560e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.298477075612068e-02, -1.035412525968820e-01, -8.628723605621563e-02, -7.764291135146638e-02, -8.136391372447978e-02, -8.136391372447978e-02, -7.163247258574237e-02, -7.395816925250027e-02, -4.383308400514691e-02, -3.143904209502366e-02, -3.581466490834776e-02, -3.581466490834773e-02, -1.256538099097834e-01, -1.225287665376058e-05, -6.142601128219369e-02, -9.319496342290644e-02, -1.523160395867602e-01, -1.523160395867602e-01, -8.098128327976727e-02, 0.000000000000000e+00, 0.000000000000000e+00, -5.382251248267618e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_ft97_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.197101669428757e-11, 2.197051102081047e-11, 2.196841896153971e-11, 2.197670315477508e-11, 2.197074864321126e-11, 2.197074864321126e-11, 2.188863087887178e-07, 2.187970964117668e-07, 2.163094020082714e-07, 2.203830393773181e-07, 2.188360234392761e-07, 2.188360234392761e-07, 2.248823534451598e-03, 2.303787915273826e-03, 3.703217198185257e-03, 3.533578506115749e-03, 2.268637456957465e-03, 2.268637456957465e-03, 1.118750171317657e-02, 4.095732715124763e-02, 4.368721671284529e-04, 0.000000000000000e+00, 1.722005240505618e-02, 1.722005240505618e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.860218143211093e-08, 1.949386048608972e-08, 1.868505290725486e-08, 1.937693957625164e-08, 1.904499902592560e-08, 1.904499902592560e-08, 1.573881460412465e-05, 1.500500964922382e-05, 1.618684022059312e-05, 1.563900625474085e-05, 1.455141515029930e-05, 1.455141515029930e-05, -7.101075219069813e-04, 2.060842389505609e-02, -5.199171100103989e-04, 2.475787656440335e-02, -1.136762740697821e-03, -1.136762740697821e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.156747056311509e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.970530311577751e-03, 2.275149867074233e-02, 1.422265765045681e-02, 8.429290782111715e-03, 1.113289455730465e-02, 1.113289455730465e-02, 3.451590594264564e-03, 5.516771961985740e-03, -1.796612817389852e-04, -3.694666609877337e-03, -2.151489931932452e-03, -2.151489931932456e-03, 1.782516101966348e-02, 2.410962217746013e-05, 7.669469327553891e-02, 4.834770048768684e-02, 1.374189187911441e-01, 1.374189187911442e-01, 1.087968871534295e-02, 0.000000000000000e+00, 0.000000000000000e+00, 2.037019839156577e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
