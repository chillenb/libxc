
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gaploc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.417643148175696e-02, -3.417732579361316e-02, -3.417986888316293e-02, -3.416659539002474e-02, -3.417375303485758e-02, -3.417375303485758e-02, -2.883799587865703e-02, -2.884506044644907e-02, -2.900921329741364e-02, -2.872393235694576e-02, -2.884631868448172e-02, -2.884631868448172e-02, -1.976990141869695e-02, -1.941740203724411e-02, -1.329467983923280e-02, -1.349280788673376e-02, -1.353540507134993e-02, -1.353540507134993e-02, -5.768931717760119e-03, -5.874220646170115e-03, -2.298443989926437e-02, -4.623911787852378e-03, -3.441409565626237e-03, -3.441409565626240e-03, -4.767829903220895e-05, -5.411905354160260e-05, -1.046816913391189e-03, -1.537022393273787e-05, -1.878016459254469e-05, -1.878016459254470e-05, -5.834584153241813e-02, -5.893960170563094e-02, -5.837015933995373e-02, -5.889423966771139e-02, -5.864726407720398e-02, -5.864726407720398e-02, -1.266858139720425e-02, -1.288806476151039e-02, -1.219869450649154e-02, -1.237596334518848e-02, -1.303976277058721e-02, -1.303976277058721e-02, -5.128397410426265e-02, -6.574702342818475e-02, -4.488921219138622e-02, -6.268695495866279e-02, -5.546277967250364e-02, -5.546277967250361e-02, -3.343169663147232e-03, -5.240118458943438e-03, -3.144506735067555e-03, -9.393635704056207e-02, -4.051685632909279e-03, -4.051685632909279e-03, -1.049962220735053e-05, -1.593001579663887e-05, -2.309008943640739e-05, -2.143042178623523e-03, -2.014813911166747e-05, -2.014813911166744e-05, -6.392376176974969e-02, -6.376041875867350e-02, -6.382741023841665e-02, -6.387288383937874e-02, -6.385085543516648e-02, -6.385085543516648e-02, -6.327383902496653e-02, -2.134812850999309e-02, -4.096407292915297e-02, -5.945764160109041e-02, -5.251071746542753e-02, -5.251071746542753e-02, -6.685871307965970e-02, -6.016611027272628e-03, -7.049272066366125e-03, -1.672385338157533e-02, -9.212070428185856e-03, -9.212070428185858e-03, -2.054567245596321e-02, -9.391273100179899e-04, -1.473187622615609e-03, -2.894222856925489e-02, -3.005565408496592e-03, -3.005565408496588e-03, -8.489880038832288e-05, -2.533510160641809e-06, -7.705651520505730e-06, -2.809928446091893e-03, -1.987198294315386e-05, -1.987198294315386e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gaploc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.145484453977639e-01, -1.145487511253482e-01, -1.145515368071895e-01, -1.145520523289738e-01, -1.145611178019468e-01, -1.145605478993030e-01, -1.145124894914107e-01, -1.145142985462265e-01, -1.145374693040571e-01, -1.145404955385409e-01, -1.145374693040571e-01, -1.145404955385409e-01, -1.192849077024614e-01, -1.192864599786443e-01, -1.193232885561278e-01, -1.193250614759128e-01, -1.202192691347209e-01, -1.202169146894829e-01, -1.186614466085119e-01, -1.186598554484012e-01, -1.193518309130552e-01, -1.193092592257042e-01, -1.193518309130552e-01, -1.193092592257042e-01, -9.705399331185852e-02, -9.678195814006216e-02, -9.466506714732324e-02, -9.433693972182326e-02, -5.040420951080430e-02, -5.072247619591284e-02, -5.195122557449862e-02, -5.185008399734511e-02, -5.110996082868285e-02, -5.419127645144325e-02, -5.110996082868285e-02, -5.419127645144325e-02, -9.873694229091056e-03, -9.123243444692194e-03, -1.028079968824119e-02, -9.412915175733247e-03, -1.168979943078511e-01, -1.142405578507377e-01, -7.937506530535387e-03, -7.715562286513754e-03, -4.356710949435324e-03, -1.419037544711658e-02, -4.356710949435324e-03, -1.419037544711656e-02, -1.786110014165244e-04, -1.677582478605378e-04, -2.034729138566213e-04, -1.895005635643497e-04, -3.403046757876434e-03, -3.192438206031009e-03, -5.557731031674105e-05, -5.654301004356651e-05, -6.019320907057059e-05, -1.124451769968246e-04, -6.019320907057056e-05, -1.124451769968246e-04, -2.491499042895890e-01, -2.492028897994040e-01, -2.513674318696912e-01, -2.514222719900863e-01, -2.492408790360474e-01, -2.492948692189691e-01, -2.511997351522567e-01, -2.512533072624544e-01, -2.502797601682355e-01, -2.503339469419507e-01, -2.502797601682355e-01, -2.503339469419507e-01, -3.745441556885847e-02, -3.745673567380087e-02, -3.856527110853498e-02, -3.857799133046814e-02, -3.509205711729819e-02, -3.501565296010264e-02, -3.598178479825887e-02, -3.590099805514438e-02, -3.926655183591625e-02, -3.947403472256197e-02, -3.926655183591625e-02, -3.947403472256197e-02, -1.653599165981609e-01, -1.657735365575408e-01, -7.424979629389782e-02, -7.417731757585497e-02, -1.779502541390647e-01, -1.728253692778937e-01, -7.488121577628748e-02, -6.989575453323521e-02, -1.417905324553667e-01, -1.500395694050651e-01, -1.417905324553666e-01, -1.500395694050650e-01, -7.008592539084193e-03, -6.897327357870697e-03, -8.679637313130081e-03, -8.589620219428929e-03, -7.078241114026563e-03, -6.499997561238389e-03, -1.064423749826079e-01, -1.065470842168763e-01, -7.786001774457554e-03, -6.963323346855574e-03, -7.786001774457554e-03, -6.963323346855574e-03, -3.912588055527082e-05, -3.761250146979000e-05, -5.852991755234676e-05, -5.763529942869280e-05, -8.649913187764161e-05, -8.153815763854159e-05, -5.537014812406662e-03, -5.490486277886666e-03, -9.228603434219347e-05, -6.588726255443842e-05, -9.228603434219333e-05, -6.588726255443830e-05, -7.213343639466484e-02, -7.153551838890471e-02, -7.228862700565804e-02, -7.168593890308092e-02, -7.213007069843873e-02, -7.152720013067217e-02, -7.210443470807773e-02, -7.150669769160781e-02, -7.210921338219603e-02, -7.150897215579799e-02, -7.210921338219603e-02, -7.150897215579799e-02, -7.140064023637753e-02, -7.089457571788410e-02, -1.127599565027177e-01, -1.124428572778878e-01, -1.761397756603089e-01, -1.755562606732772e-01, -9.421187771476856e-02, -9.367375780200360e-02, -1.430386682214351e-01, -1.424740107424539e-01, -1.430386682214351e-01, -1.424740107424539e-01, -7.583378434262827e-02, -7.556904592311260e-02, -1.002789940753741e-02, -9.908554254430714e-03, -1.409316983102550e-02, -1.385334669745868e-02, -8.684013579379148e-02, -8.652753572979131e-02, -2.901485716471392e-02, -2.902585844544755e-02, -2.901485716471394e-02, -2.902585844544756e-02, -1.088761326104284e-01, -1.083932977468678e-01, -3.019983479580348e-03, -2.996366618138905e-03, -4.144574805392113e-03, -3.970179151132977e-03, -1.458428267037290e-01, -1.444416231791382e-01, -6.920359195672958e-03, -6.347444790396123e-03, -6.920359195672954e-03, -6.347444790396118e-03, -3.116382410726400e-04, -3.003458201552186e-04, -9.276737019785929e-06, -9.255103737793013e-06, -2.910742892372801e-05, -2.732442656550687e-05, -6.511655033823772e-03, -6.351904044567527e-03, -8.828307839293100e-05, -6.538114372115457e-05, -8.828307839293107e-05, -6.538114372115465e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gaploc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.032284017789590e-10, 4.064568035579180e-10, 2.032284017789590e-10, 2.032375128822594e-10, 4.064750257645188e-10, 2.032375128822594e-10, 2.032578517453042e-10, 4.065157034906085e-10, 2.032578517453042e-10, 2.031227548749711e-10, 4.062455097499422e-10, 2.031227548749711e-10, 2.031963931781002e-10, 4.063927863562004e-10, 2.031963931781002e-10, 2.031963931781002e-10, 4.063927863562004e-10, 2.031963931781002e-10, 1.478881974780196e-06, 2.957763949560391e-06, 1.478881974780196e-06, 1.479691226581009e-06, 2.959382453162017e-06, 1.479691226581009e-06, 1.498355137745382e-06, 2.996710275490764e-06, 1.498355137745382e-06, 1.464559947691171e-06, 2.929119895382341e-06, 1.464559947691171e-06, 1.479654571044836e-06, 2.959309142089673e-06, 1.479654571044836e-06, 1.479654571044836e-06, 2.959309142089673e-06, 1.479654571044836e-06, 2.777495719938558e-03, 5.554991439877115e-03, 2.777495719938558e-03, 2.683836557958654e-03, 5.367673115917308e-03, 2.683836557958654e-03, 1.114356115194326e-03, 2.228712230388652e-03, 1.114356115194326e-03, 1.118020400820135e-03, 2.236040801640271e-03, 1.118020400820135e-03, 1.153999810695189e-03, 2.307999621390379e-03, 1.153999810695189e-03, 1.153999810695189e-03, 2.307999621390379e-03, 1.153999810695189e-03, 2.381489544572492e-02, 4.762979089144985e-02, 2.381489544572492e-02, 2.529088888597014e-02, 5.058177777194028e-02, 2.529088888597014e-02, 1.741821337869346e-03, 3.483642675738693e-03, 1.741821337869346e-03, 3.951432147854817e-02, 7.902864295709634e-02, 3.951432147854817e-02, 2.113033075495818e-02, 4.226066150991636e-02, 2.113033075495818e-02, 2.113033075495819e-02, 4.226066150991637e-02, 2.113033075495819e-02, 1.844764604134484e+01, 3.689529208268968e+01, 1.844764604134484e+01, 1.842638561763033e+01, 3.685277123526065e+01, 1.842638561763033e+01, 1.345709422947667e+00, 2.691418845895334e+00, 1.345709422947667e+00, 2.969678497554163e+01, 5.939356995108325e+01, 2.969678497554163e+01, 2.055001737561702e+01, 4.110003475123404e+01, 2.055001737561702e+01, 2.055001737561703e+01, 4.110003475123406e+01, 2.055001737561703e+01, 7.981219377517271e-07, 1.596243875503454e-06, 7.981219377517271e-07, 8.107963513706441e-07, 1.621592702741288e-06, 8.107963513706441e-07, 7.986358492421486e-07, 1.597271698484297e-06, 7.986358492421486e-07, 8.098236940153871e-07, 1.619647388030774e-06, 8.098236940153871e-07, 8.045656608371377e-07, 1.609131321674275e-06, 8.045656608371377e-07, 8.045656608371377e-07, 1.609131321674275e-06, 8.045656608371377e-07, 2.877299087715371e-06, 5.754598175430742e-06, 2.877299087715371e-06, 2.944569592355744e-06, 5.889139184711487e-06, 2.944569592355744e-06, 2.582436247406597e-06, 5.164872494813195e-06, 2.582436247406597e-06, 2.632629433067498e-06, 5.265258866134997e-06, 2.632629433067498e-06, 3.077251155105330e-06, 6.154502310210660e-06, 3.077251155105330e-06, 3.077251155105330e-06, 6.154502310210660e-06, 3.077251155105330e-06, 1.530156765003938e-02, 3.060313530007876e-02, 1.530156765003938e-02, 1.615075979978238e-04, 3.230151959956477e-04, 1.615075979978238e-04, 2.280485391751307e-02, 4.560970783502613e-02, 2.280485391751307e-02, 8.070925543488184e-04, 1.614185108697637e-03, 8.070925543488184e-04, 1.219841799172066e-02, 2.439683598344132e-02, 1.219841799172066e-02, 1.219841799172066e-02, 2.439683598344132e-02, 1.219841799172066e-02, 1.197633086826493e-01, 2.395266173652986e-01, 1.197633086826493e-01, 1.359077939179360e-02, 2.718155878358721e-02, 1.359077939179360e-02, 1.556720411219018e-01, 3.113440822438036e-01, 1.556720411219018e-01, 5.251188364934103e-06, 1.050237672986821e-05, 5.251188364934103e-06, 8.187209863980321e-02, 1.637441972796064e-01, 8.187209863980321e-02, 8.187209863980321e-02, 1.637441972796064e-01, 8.187209863980321e-02, 5.076445156283616e+01, 1.015289031256723e+02, 5.076445156283616e+01, 3.572453258262982e+01, 7.144906516525964e+01, 3.572453258262982e+01, 2.883645290775443e+02, 5.767290581550886e+02, 2.883645290775443e+02, 5.144620003052361e-01, 1.028924000610472e+00, 5.144620003052361e-01, 9.841480108637106e+01, 1.968296021727421e+02, 9.841480108637106e+01, 9.841480108637069e+01, 1.968296021727414e+02, 9.841480108637069e+01, 4.445398487814520e-06, 8.890796975629039e-06, 4.445398487814520e-06, 1.800464902695982e-04, 3.600929805391964e-04, 1.800464902695982e-04, 6.911506826324127e-05, 1.382301365264825e-04, 6.911506826324127e-05, 2.527037956688377e-05, 5.054075913376753e-05, 2.527037956688377e-05, 4.311116171573537e-05, 8.622232343147074e-05, 4.311116171573537e-05, 4.311116171573537e-05, 8.622232343147074e-05, 4.311116171573537e-05, 3.901443222443158e-07, 7.802886444886317e-07, 3.901443222443158e-07, 1.582979070486870e-02, 3.165958140973741e-02, 1.582979070486870e-02, 2.832067223570500e-02, 5.664134447141000e-02, 2.832067223570500e-02, 8.551781767872489e-03, 1.710356353574498e-02, 8.551781767872489e-03, 2.139760181494313e-02, 4.279520362988627e-02, 2.139760181494313e-02, 2.139760181494313e-02, 4.279520362988627e-02, 2.139760181494313e-02, 1.962076732991387e-04, 3.924153465982774e-04, 1.962076732991387e-04, 7.381997346888684e-03, 1.476399469377737e-02, 7.381997346888684e-03, 8.417916587576256e-03, 1.683583317515251e-02, 8.417916587576256e-03, 5.855945375880879e-02, 1.171189075176176e-01, 5.855945375880879e-02, 1.990239754100753e-02, 3.980479508201505e-02, 1.990239754100753e-02, 1.990239754100755e-02, 3.980479508201511e-02, 1.990239754100755e-02, 2.244566134243720e-02, 4.489132268487439e-02, 2.244566134243720e-02, 1.342784042191660e+00, 2.685568084383320e+00, 1.342784042191660e+00, 7.106090094511426e-01, 1.421218018902285e+00, 7.106090094511426e-01, 1.638644323093209e-01, 3.277288646186418e-01, 1.638644323093209e-01, 3.067472818457558e-01, 6.134945636915116e-01, 3.067472818457558e-01, 3.067472818457556e-01, 6.134945636915111e-01, 3.067472818457556e-01, 1.041178307598289e+01, 2.082356615196577e+01, 1.041178307598289e+01, 6.619085434260772e+02, 1.323817086852154e+03, 6.619085434260772e+02, 1.510676940665710e+02, 3.021353881331420e+02, 1.510676940665710e+02, 3.643755998643171e-01, 7.287511997286341e-01, 3.643755998643171e-01, 1.376519140056014e+02, 2.753038280112027e+02, 1.376519140056014e+02, 1.376519140056021e+02, 2.753038280112042e+02, 1.376519140056021e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
