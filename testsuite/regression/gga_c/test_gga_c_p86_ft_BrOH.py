
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86_ft_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.176771564147875e-01, -1.176765415458579e-01, -1.176750098794925e-01, -1.176850543742446e-01, -1.176768220277635e-01, -1.176768220277635e-01, -5.097760491190687e-02, -5.097998372867742e-02, -5.104626703210378e-02, -5.093562907067266e-02, -5.097889299913635e-02, -5.097889299913635e-02, -2.835025790256370e-02, -2.810835374531126e-02, -2.167663513068130e-02, -2.201146003805776e-02, -2.826309640061319e-02, -2.826309640061319e-02, -1.080166543463583e-02, -1.180438184873596e-02, -3.568935523446838e-02, 1.249469927470811e-03, -1.111556472179797e-02, -1.111556472179797e-02, -5.635880509020586e-03, -5.820386519242036e-03, -4.997307471636421e-03, -3.141094319654171e-03, -5.766782801514343e-03, -5.766782801514343e-03, -6.691544611354718e-02, -6.705863261101971e-02, -6.692969903611955e-02, -6.704102595883620e-02, -6.698913219826892e-02, -6.698913219826892e-02, -3.104082319402477e-02, -3.133887896515369e-02, -3.078641355982323e-02, -3.100892012263423e-02, -3.162143764922211e-02, -3.162143764922211e-02, -4.180567356064140e-02, -5.723938647040666e-02, -4.045453992945901e-02, -5.250822889384330e-02, -4.412609018209139e-02, -4.412609018209139e-02, 5.229873861457476e-03, -1.434700339835946e-03, 4.793719959564124e-03, -7.439023914860157e-02, 3.492996110331556e-03, 3.492996110331556e-03, -3.045275056807230e-03, -3.413233368981008e-03, -2.651649448597116e-03, 6.844699401805305e-04, -3.148408561672506e-03, -3.148408561672506e-03, -6.140825459366214e-02, -5.709871491851647e-02, -5.856078496230505e-02, -5.974943791527927e-02, -5.914820093711720e-02, -5.914820093711720e-02, -6.150018049527427e-02, -3.209671647700446e-02, -3.927809680503103e-02, -4.683304412467291e-02, -4.295351414394899e-02, -4.295351414394899e-02, -5.738140713987361e-02, -6.689422810850306e-03, -1.376910780334891e-02, -2.799758271485639e-02, -2.077672199533094e-02, -2.077672199533094e-02, -3.061838951350566e-02, -6.781401504759093e-03, -1.588549093069326e-03, -3.282433768760235e-02, 3.592090681995572e-03, 3.592090681995580e-03, -6.379289607768491e-03, -1.079030818091981e-03, -1.929744361142089e-03, 3.014313096352592e-03, -2.733433034442520e-03, -2.733433034442517e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86_ft_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.925212603943067e-02, -5.925263545631334e-02, -5.925424156348440e-02, -5.924591861856601e-02, -5.925240025430582e-02, -5.925240025430582e-02, -9.410668529569410e-02, -9.411641379619860e-02, -9.438247413207183e-02, -9.391763447068074e-02, -9.411156278805392e-02, -9.411156278805392e-02, -8.387650880507704e-02, -8.368585836815430e-02, -7.722704452254645e-02, -7.765463032867462e-02, -8.380815642905740e-02, -8.380815642905740e-02, -5.214342009487864e-02, -5.307441754699140e-02, -9.094021249636990e-02, -2.981773169648189e-02, -5.243938510207211e-02, -5.243938510207211e-02, -5.909458944433039e-03, -5.924764435066647e-03, 1.396487617365618e-02, -4.015688240694974e-03, -5.845860396989758e-03, -5.845860396989758e-03, -1.191262465617882e-01, -1.194990665772389e-01, -1.191635166350633e-01, -1.194534252755267e-01, -1.193187551423475e-01, -1.193187551423475e-01, -5.534286987502121e-02, -5.666601594539927e-02, -5.318305480094746e-02, -5.422512279046775e-02, -5.904030197378940e-02, -5.904030197378940e-02, -8.433406959542726e-02, -8.034981704203049e-02, -8.298393952587042e-02, -7.977847000931874e-02, -8.505056877680686e-02, -8.505056877680686e-02, -4.148515739975333e-03, -4.105447700589886e-02, -6.502760422097740e-03, -1.171308383985857e-01, -1.924113717486890e-02, -1.924113717486890e-02, -3.895874115439923e-03, -4.333218499841832e-03, -3.291349887160822e-03, 1.236472630007601e-02, -3.971867325545448e-03, -3.971867325545448e-03, -7.431879044778167e-02, -7.800324855321029e-02, -7.686263865082699e-02, -7.585557750466008e-02, -7.637419777337742e-02, -7.637419777337742e-02, -7.261751551650918e-02, -8.045453074865823e-02, -8.176623018681518e-02, -8.089318959626714e-02, -8.160668778207428e-02, -8.160668778207428e-02, -8.227093528120191e-02, -5.202374945058353e-02, -6.153222666711733e-02, -7.196186498019770e-02, -6.766790269152224e-02, -6.766790269152224e-02, -7.802547254034763e-02, 1.213853336792374e-02, 1.634444651621013e-02, -7.019065619031457e-02, -6.571207042536708e-04, -6.571207042536716e-04, -6.534234233939315e-03, -1.409669103386767e-03, -2.499876545782850e-03, -1.809936411385258e-03, -3.442002631327192e-03, -3.442002631327188e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86_ft_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.992744521739536e-10, -1.992739320991757e-10, -1.992678146053751e-10, -1.992763925269632e-10, -1.992742096610583e-10, -1.992742096610583e-10, 6.092430611615682e-07, 6.094714020801406e-07, 6.156043714287794e-07, 6.042398268788741e-07, 6.093439582437567e-07, 6.093439582437567e-07, 1.877002433367459e-03, 1.867134336666615e-03, 1.577561833745171e-03, 1.543388608827954e-03, 1.873493758951359e-03, 1.873493758951359e-03, 3.312019239026271e-01, 3.292270272236544e-01, 1.048159503599642e-03, 5.138434766542394e-01, 3.308679604954268e-01, 3.308679604954268e-01, -6.292411394527701e+01, -6.398441172937080e+01, -7.425504197083510e+00, -1.052601820802774e+01, -6.793937368559348e+01, -6.793937368559348e+01, 1.951052475365900e-07, 1.975291795092265e-07, 1.953453716238503e-07, 1.972300110866643e-07, 1.963549236334343e-07, 1.963549236334343e-07, 1.999826415969805e-06, 2.107229453369016e-06, 1.718835426977134e-06, 1.806164587663954e-06, 2.445589600935070e-06, 2.445589600935070e-06, 5.882525518997633e-03, 6.677898741943136e-03, 7.177760498237788e-03, 8.787530636645705e-03, 5.324468543838941e-03, 5.324468543838941e-03, 4.187654977257135e-01, 1.770328111284807e-01, 5.437472619138219e-01, 5.506625481708996e-05, 6.356264711602123e-01, 6.356264711602123e-01, -1.150673145689656e+01, -1.584788050292391e+01, -1.601273369449113e+02, -1.371027310863910e+00, -3.871737620270066e+01, -3.871737620270053e+01, 1.028908241108206e-02, 8.727776351493518e-03, 9.166082745924337e-03, 9.578324241916947e-03, 9.362298071606098e-03, 9.362298071606098e-03, 1.229663389817428e-02, 8.215562055212983e-03, 8.594804521787744e-03, 9.207726735012531e-03, 8.877932121172513e-03, 8.877932121172518e-03, 5.349007353807234e-03, 9.352238547367889e-02, 6.299497677091935e-02, 3.700720054758785e-02, 4.905683944394466e-02, 4.905683944394468e-02, 1.253156591998809e-02, -8.854422319868736e+00, -3.073872565236283e+00, 5.691189763473604e-02, 6.084319444223016e-01, 6.084319444223035e-01, -4.131121654146599e+01, -7.797488534256973e-01, -8.938892293875089e+00, 8.340404587179296e-01, -8.094294646757282e+01, -8.094294646757228e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
