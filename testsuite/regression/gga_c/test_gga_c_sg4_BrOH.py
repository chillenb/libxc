
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sg4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.589332920559374e-02, -4.589405517426740e-02, -4.589624483147339e-02, -4.588437880700907e-02, -4.589372082474551e-02, -4.589372082474551e-02, -3.606667228114469e-02, -3.607081834565784e-02, -3.618501877714368e-02, -3.598882724331188e-02, -3.606881183540063e-02, -3.606881183540063e-02, -1.624190833215679e-02, -1.601966239384447e-02, -1.068903227817964e-02, -1.096455516388414e-02, -1.616163382950161e-02, -1.616163382950161e-02, -2.893292551106522e-03, -3.263695629565706e-03, -2.415114627224619e-02, -4.269037572847115e-04, -3.005351086299751e-03, -3.005351086299751e-03, -3.616295789361851e-09, -4.647097693736239e-09, -2.124069430486169e-06, -4.165141376676302e-11, -4.636561157420232e-09, -4.636561157420232e-09, -5.357649811846135e-02, -5.378469547019906e-02, -5.359725710427533e-02, -5.375913992580803e-02, -5.368380102273972e-02, -5.368380102273972e-02, -1.501071024371351e-02, -1.543146322991266e-02, -1.444807941517502e-02, -1.476937040637778e-02, -1.606081899710297e-02, -1.606081899710297e-02, -3.084946578946637e-02, -5.345266488595669e-02, -2.909065241092697e-02, -4.678757325467631e-02, -3.394435667031789e-02, -3.394435667031789e-02, -7.295532089310397e-05, -8.578585616374395e-04, -8.437584869088232e-05, -6.824671062985131e-02, -2.048659150687861e-04, -2.048659150687861e-04, -3.720658503781037e-11, -7.757666733925800e-11, -7.142721708545480e-11, -1.211704791084010e-05, -8.133818182934660e-11, -8.133818182934660e-11, -6.070239455500976e-02, -5.385417433713378e-02, -5.620630572231201e-02, -5.810488323328367e-02, -5.714702684328098e-02, -5.714702684328098e-02, -6.119352153365668e-02, -1.885104845886585e-02, -2.755725721245710e-02, -3.824643858912738e-02, -3.258839333050347e-02, -3.258839333050349e-02, -5.317923482803576e-02, -1.834900790944489e-03, -4.091255762082743e-03, -1.413636211251225e-02, -7.958548309171844e-03, -7.958548309171844e-03, -1.698993331918816e-02, -1.119608084284472e-06, -5.500045605939322e-06, -2.004675719492717e-02, -5.030812147292951e-05, -5.030812147292261e-05, -5.628011043298775e-09, -1.234239443169925e-13, -3.679471371780665e-12, -5.286428324336573e-05, -5.715238334434945e-11, -5.715238724747727e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sg4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.208321973671077e-01, -1.208331579525763e-01, -1.208360617940098e-01, -1.208203599120946e-01, -1.208327154950173e-01, -1.208327154950173e-01, -1.038256174418915e-01, -1.038313093927534e-01, -1.039879164818961e-01, -1.037190886732182e-01, -1.038285660402916e-01, -1.038285660402916e-01, -6.785068297982196e-02, -6.732266749047124e-02, -5.225100183276042e-02, -5.315631538809919e-02, -6.766078929255338e-02, -6.766078929255338e-02, -1.737493186313110e-02, -1.923187194586921e-02, -8.328882831173849e-02, -3.033631991525705e-03, -1.794312514336334e-02, -1.794312514336334e-02, -3.022476047916435e-08, -3.878344071280467e-08, -1.696316675298397e-05, -3.560667749708003e-10, -3.869066908943099e-08, -3.869066908943099e-08, -1.254355984877207e-01, -1.256344529186529e-01, -1.254554736009292e-01, -1.256101000911734e-01, -1.255381936017394e-01, -1.255381936017394e-01, -6.294256594297405e-02, -6.409053053395897e-02, -6.135872814509702e-02, -6.225885530684968e-02, -6.578934375343189e-02, -6.578934375343189e-02, -8.744142432399676e-02, -8.684173646121421e-02, -8.546423615121050e-02, -8.756064391484239e-02, -8.965840485546571e-02, -8.965840485546571e-02, -5.520704299815000e-04, -5.897339039415384e-03, -6.354975741761122e-04, -1.191896467332535e-01, -1.501018611206653e-03, -1.501018611206653e-03, -3.181674303741062e-10, -6.613773990126850e-10, -6.073385050853549e-10, -9.463397093751531e-05, -6.925760359656068e-10, -6.925760295987139e-10, -7.699714610781259e-02, -8.406619113220398e-02, -8.192813423075676e-02, -7.997832776811355e-02, -8.098673160772944e-02, -8.098673160772944e-02, -7.456566754894853e-02, -7.197732481059178e-02, -8.358544297159531e-02, -8.836963559813363e-02, -8.691965716537152e-02, -8.691965716537156e-02, -8.897404013405261e-02, -1.191323834599164e-02, -2.400587005054795e-02, -5.924184069868675e-02, -4.050777872668850e-02, -4.050777872668849e-02, -6.762573858754796e-02, -9.007797240208183e-06, -4.346942342075585e-05, -6.882170498077915e-02, -3.827213257533748e-04, -3.827213257533611e-04, -4.696543168796907e-08, -1.074327686621824e-12, -3.170674014634007e-11, -4.011536460167719e-04, -4.868502090128299e-10, -4.868502182578875e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sg4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.896377954601502e-10, 1.896409769014561e-10, 1.896455651441865e-10, 1.895936695497372e-10, 1.896395535208412e-10, 1.896395535208412e-10, 1.075464004393504e-06, 1.075652963207991e-06, 1.080641960268300e-06, 1.070941455083934e-06, 1.075538554749024e-06, 1.075538554749024e-06, 1.696264644238210e-03, 1.675374666870432e-03, 1.142591626237520e-03, 1.133209095482377e-03, 1.688768685039521e-03, 1.688768685039521e-03, 1.153201412046186e-01, 1.270286402854293e-01, 1.102146611134478e-03, 4.025159610305219e-02, 1.190038573101819e-01, 1.190038573101819e-01, 1.203644226718646e-03, 1.346505347828990e-03, 6.045439223024209e-03, 1.076398900430341e-04, 1.412630491708764e-03, 1.412630491708764e-03, 2.883265590133996e-07, 2.902579294961815e-07, 2.885172277908254e-07, 2.900188716994588e-07, 2.893226166068427e-07, 2.893226166068427e-07, 5.446280822492047e-06, 5.461958166543642e-06, 5.236753333681975e-06, 5.250784071360267e-06, 5.738289779288330e-06, 5.738289779288330e-06, 7.874626354101593e-03, 1.068796190031087e-02, 9.554080287623007e-03, 1.412035995620324e-02, 7.341483868086293e-03, 7.341483868086293e-03, 1.573724811663828e-02, 2.188765234025230e-02, 2.038883660106105e-02, 6.822821001627223e-05, 3.215655539174353e-02, 3.215655539174353e-02, 1.103242237681248e-04, 1.538695069315897e-04, 5.661208829937168e-04, 1.311322219973883e-02, 2.586110012917569e-04, 2.586110018936984e-04, 1.594643336862261e-02, 1.419278733627436e-02, 1.484491437991090e-02, 1.534646013239963e-02, 1.509751838484724e-02, 1.509751838484724e-02, 1.856761949172585e-02, 8.870186875342212e-03, 1.136500633376471e-02, 1.404807410570917e-02, 1.269204938575741e-02, 1.269204938575742e-02, 8.428055068118220e-03, 2.053966927916176e-02, 2.610765428226037e-02, 3.825291540564781e-02, 3.403769913589033e-02, 3.403769913589031e-02, 1.321426790490181e-02, 3.666840854657632e-03, 7.444012225856310e-03, 7.696859341233986e-02, 2.559684913917582e-02, 2.559684913917690e-02, 1.009121118256977e-03, 1.592027089875776e-05, 6.366366725529064e-05, 3.426606345490561e-02, 3.574658708124706e-04, 3.574658722924316e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
