
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbeloc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.704538192880519e-02, -6.704626685709059e-02, -6.704878826495987e-02, -6.703565235962078e-02, -6.704273579405419e-02, -6.704273579405419e-02, -5.193921478841947e-02, -5.194514490143592e-02, -5.208255299998740e-02, -5.184499151864876e-02, -5.194645859486049e-02, -5.194645859486049e-02, -2.357827664085121e-02, -2.322066832169947e-02, -1.489548167710854e-02, -1.528444333316008e-02, -1.537997217688834e-02, -1.537997217688834e-02, -1.789512103878114e-03, -2.138276982262648e-03, -2.797663568976731e-02, -2.206479960375624e-04, -2.902830691596144e-04, -2.902830691596074e-04, -1.531265565735129e-12, -2.386404442111800e-12, -4.718873027054205e-08, -3.363715556092828e-14, -1.350946264577768e-13, -1.350946264577768e-13, -7.185639342262598e-02, -7.206710680738002e-02, -7.186508648845422e-02, -7.205110583605034e-02, -7.196362795721059e-02, -7.196362795721059e-02, -2.109463013636798e-02, -2.181616347454940e-02, -1.957469892291337e-02, -2.019305370778644e-02, -2.225834282762409e-02, -2.225834282762409e-02, -4.011315053207602e-02, -5.899700904892840e-02, -3.637433465914072e-02, -5.434107639195569e-02, -4.255009006505060e-02, -4.255009006505056e-02, -1.467671016359626e-05, -3.871182321831396e-04, -1.017139193069949e-05, -7.892380727546543e-02, -8.061693743451406e-05, -8.061693743451406e-05, -1.029189754253590e-14, -4.003915254902068e-14, -2.579952310816092e-13, -1.465000796646576e-06, -1.569191825090410e-13, -1.569170141046961e-13, -6.182414186550501e-02, -5.777948156260415e-02, -5.922526093840584e-02, -6.040420853149862e-02, -5.981700513243748e-02, -5.981700513243748e-02, -6.231823550486171e-02, -2.283965945112383e-02, -3.415500219431412e-02, -4.635525293519661e-02, -4.026080118559192e-02, -4.026080118559192e-02, -5.915645792546262e-02, -1.029736274526807e-03, -3.117583922237155e-03, -1.845326099022546e-02, -8.431691327327871e-03, -8.431691327327878e-03, -2.187029820381627e-02, -2.979026138272278e-08, -2.195262897783379e-07, -2.652273239873829e-02, -9.791499423549704e-06, -9.791499423556643e-06, -9.593624505921383e-12, -1.341158087364569e-16, -4.643204223886421e-15, -6.440768114433087e-06, -1.552098293639004e-13, -1.552059262360794e-13]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbeloc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.466550804012353e-01, -1.466552648653408e-01, -1.466558611486208e-01, -1.466561722068502e-01, -1.466586013509015e-01, -1.466582574412445e-01, -1.466453543432569e-01, -1.466464453727899e-01, -1.466517425161746e-01, -1.466535682067137e-01, -1.466517425161746e-01, -1.466535682067137e-01, -1.311618894028225e-01, -1.311636688300477e-01, -1.311648649684665e-01, -1.311668970465465e-01, -1.312389682101721e-01, -1.312362782458205e-01, -1.311149161944943e-01, -1.311130881730350e-01, -1.311910560232890e-01, -1.311422627695614e-01, -1.311910560232890e-01, -1.311422627695614e-01, -1.018224840019972e-01, -1.014861767439083e-01, -1.013702630564543e-01, -1.009609213269907e-01, -8.332027181477453e-02, -8.375809870383112e-02, -8.478753284496426e-02, -8.464804840647645e-02, -8.293404506461438e-02, -8.717272098769761e-02, -8.293404506461438e-02, -8.717272098769761e-02, -1.512312037271818e-02, -1.469658082253083e-02, -1.768160005865537e-02, -1.711254568200875e-02, -1.098851205798255e-01, -1.067795107554811e-01, -2.152664614650417e-03, -2.131266950028102e-03, -2.549878870514413e-03, -4.093731932105191e-03, -2.549878870514421e-03, -4.093731932105217e-03, -1.742176552252796e-11, -1.679048186870437e-11, -2.721612662003720e-11, -2.609769228183851e-11, -5.239324442431100e-07, -5.045961372916649e-07, -3.748750160902891e-13, -3.786003347549493e-13, -1.422848004781901e-12, -1.975918181244124e-12, -1.422842366930605e-12, -1.975919048605862e-12, -1.433251359479984e-01, -1.433640116314081e-01, -1.434154258287871e-01, -1.434554137485997e-01, -1.433285500868605e-01, -1.433681528111974e-01, -1.434090194003048e-01, -1.434481011387740e-01, -1.433710588486977e-01, -1.434106907891138e-01, -1.433710588486977e-01, -1.434106907891138e-01, -9.955210688388891e-02, -9.955587930647933e-02, -1.010459223582772e-01, -1.010667022279160e-01, -9.616952977606363e-02, -9.604699696687510e-02, -9.759351096807682e-02, -9.746314979952783e-02, -1.017987242960478e-01, -1.021384734410142e-01, -1.017987242960478e-01, -1.021384734410142e-01, -1.018095811110671e-01, -1.021015166823152e-01, -8.367731208166777e-02, -8.361948166939831e-02, -1.032225487285675e-01, -9.943876441254872e-02, -8.551976639516445e-02, -8.155502806989648e-02, -9.777498257158877e-02, -1.035473013947907e-01, -9.777498257158876e-02, -1.035473013947906e-01, -1.531907213520354e-04, -1.521483807427623e-04, -3.697683603068715e-03, -3.684312367005319e-03, -1.084629799724316e-04, -1.044622694437674e-04, -1.183240319818760e-01, -1.183993001371813e-01, -8.263594560885710e-04, -7.925363877856395e-04, -8.263594560885710e-04, -7.925363877856395e-04, -1.167513313504980e-13, -1.141717975417205e-13, -4.503622649184186e-13, -4.464010238610256e-13, -2.938027304388478e-12, -2.841795037441706e-12, -1.564399338827738e-05, -1.557616657494488e-05, -1.998319207590499e-12, -1.661163556970074e-12, -1.998309476876001e-12, -1.661157729383397e-12, -7.502842535053850e-02, -7.453819682753661e-02, -8.079434411689747e-02, -8.030939111031248e-02, -7.870625586453667e-02, -7.821783575831116e-02, -7.701614376904589e-02, -7.652924982392451e-02, -7.785500985193045e-02, -7.736739103323481e-02, -7.785500985193045e-02, -7.736739103323481e-02, -7.266768592354855e-02, -7.224980687170972e-02, -9.581444024836253e-02, -9.545704887144965e-02, -1.007026669587971e-01, -1.002535224175454e-01, -9.239888593421476e-02, -9.199667914619346e-02, -9.781255519418668e-02, -9.740952270985286e-02, -9.781255519418668e-02, -9.740952270985286e-02, -8.625888985248098e-02, -8.604929325838540e-02, -9.296676890622694e-03, -9.257583808929087e-03, -2.497039075756399e-02, -2.478631775662578e-02, -8.270282779638131e-02, -8.230912246194648e-02, -5.361999877224348e-02, -5.363473202111040e-02, -5.361999877224351e-02, -5.363473202111039e-02, -9.310157543226193e-02, -9.255056046226844e-02, -3.255813911571472e-07, -3.240576942992254e-07, -2.399929722362476e-06, -2.345191034040827e-06, -8.757857704969201e-02, -8.629610685508440e-02, -1.042717059203825e-04, -1.002858379741522e-04, -1.042717059203963e-04, -1.002858379741557e-04, -1.079494686143510e-10, -1.055850622006381e-10, -1.487236809594436e-15, -1.485610506335708e-15, -5.314292080260121e-14, -5.129674134329290e-14, -6.794870406191022e-05, -6.716535983432556e-05, -1.943892028138765e-12, -1.647830892462059e-12, -1.943887406727005e-12, -1.647828222614209e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbeloc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeloc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.004875531050255e-10, 4.009751062100510e-10, 2.004875531050255e-10, 2.004905904618843e-10, 4.009811809237685e-10, 2.004905904618843e-10, 2.004938989174550e-10, 4.009877978349100e-10, 2.004938989174550e-10, 2.004489290384831e-10, 4.008978580769663e-10, 2.004489290384831e-10, 2.004739381362790e-10, 4.009478762725580e-10, 2.004739381362790e-10, 2.004739381362790e-10, 4.009478762725580e-10, 2.004739381362790e-10, 1.236783011180843e-06, 2.473566022361686e-06, 1.236783011180843e-06, 1.236976098635035e-06, 2.473952197270071e-06, 1.236976098635035e-06, 1.241301501744683e-06, 2.482603003489366e-06, 1.241301501744683e-06, 1.232632724883791e-06, 2.465265449767583e-06, 1.232632724883791e-06, 1.236866186436170e-06, 2.473732372872341e-06, 1.236866186436170e-06, 1.236866186436170e-06, 2.473732372872341e-06, 1.236866186436170e-06, 2.708165919821675e-03, 5.416331839643350e-03, 2.708165919821675e-03, 2.685933544726422e-03, 5.371867089452843e-03, 2.685933544726422e-03, 2.011487157666746e-03, 4.022974315333491e-03, 2.011487157666746e-03, 1.978554918466717e-03, 3.957109836933433e-03, 1.978554918466717e-03, 2.013235618841233e-03, 4.026471237682467e-03, 2.013235618841233e-03, 2.013235618841233e-03, 4.026471237682467e-03, 2.013235618841233e-03, 1.026595374886115e-01, 2.053190749772231e-01, 1.026595374886115e-01, 1.185294796934590e-01, 2.370589593869179e-01, 1.185294796934590e-01, 1.441513831627699e-03, 2.883027663255397e-03, 1.441513831627699e-03, 2.762323682581922e-02, 5.524647365163844e-02, 2.762323682581922e-02, 2.838115922732562e-02, 5.676231845465124e-02, 2.838115922732562e-02, 2.838115922732613e-02, 5.676231845465225e-02, 2.838115922732613e-02, 2.402084923364734e-06, 4.804169846729469e-06, 2.402084923364734e-06, 3.299179173703556e-06, 6.598358347407111e-06, 3.299179173703556e-06, 2.951346531005815e-04, 5.902693062011630e-04, 2.951346531005815e-04, 2.614467426995808e-07, 5.228934853991615e-07, 2.614467426995808e-07, 5.963009018603700e-07, 1.192601803720740e-06, 5.963009018603700e-07, 5.963014537824212e-07, 1.192602907564842e-06, 5.963014537824212e-07, 2.816388211014927e-07, 5.632776422029855e-07, 2.816388211014927e-07, 2.831255811037586e-07, 5.662511622075172e-07, 2.831255811037586e-07, 2.816977746316765e-07, 5.633955492633529e-07, 2.816977746316765e-07, 2.830101746426886e-07, 5.660203492853772e-07, 2.830101746426886e-07, 2.823954923750079e-07, 5.647909847500158e-07, 2.823954923750079e-07, 2.823954923750079e-07, 5.647909847500158e-07, 2.823954923750079e-07, 8.791882796568134e-06, 1.758376559313627e-05, 8.791882796568134e-06, 8.767720370347823e-06, 1.753544074069565e-05, 8.767720370347823e-06, 8.351935278446496e-06, 1.670387055689299e-05, 8.351935278446496e-06, 8.342781547242468e-06, 1.668556309448494e-05, 8.342781547242468e-06, 8.989043678954140e-06, 1.797808735790828e-05, 8.989043678954140e-06, 8.989043678954140e-06, 1.797808735790828e-05, 8.989043678954140e-06, 7.981689741921320e-03, 1.596337948384264e-02, 7.981689741921320e-03, 6.183161556059354e-03, 1.236632311211871e-02, 6.183161556059354e-03, 1.092022376062707e-02, 2.184044752125414e-02, 1.092022376062707e-02, 1.053106157931219e-02, 2.106212315862438e-02, 1.053106157931219e-02, 7.649686502368687e-03, 1.529937300473737e-02, 7.649686502368687e-03, 7.649686502368685e-03, 1.529937300473737e-02, 7.649686502368685e-03, 4.928950339582084e-03, 9.857900679164169e-03, 4.928950339582084e-03, 1.591349755413498e-02, 3.182699510826996e-02, 1.591349755413498e-02, 4.442934090793679e-03, 8.885868181587358e-03, 4.442934090793679e-03, 4.868084947979388e-05, 9.736169895958775e-05, 4.868084947979388e-05, 2.000387762938102e-02, 4.000775525876204e-02, 2.000387762938102e-02, 2.000387762938102e-02, 4.000775525876204e-02, 2.000387762938102e-02, 1.999188540562903e-07, 3.998377081125805e-07, 1.999188540562903e-07, 3.612928364662010e-07, 7.225856729324021e-07, 3.612928364662010e-07, 1.301943750606938e-05, 2.603887501213876e-05, 1.301943750606938e-05, 2.379660455623948e-03, 4.759320911247896e-03, 2.379660455623948e-03, 3.093188110892310e-06, 6.186376221784620e-06, 3.093188110892310e-06, 3.093182688388078e-06, 6.186365376776155e-06, 3.093182688388078e-06, 8.252218366543745e-03, 1.650443673308749e-02, 8.252218366543745e-03, 8.834200304505598e-03, 1.766840060901120e-02, 8.834200304505598e-03, 8.659469706464857e-03, 1.731893941292971e-02, 8.659469706464857e-03, 8.490912447554268e-03, 1.698182489510854e-02, 8.490912447554268e-03, 8.578026392121414e-03, 1.715605278424283e-02, 8.578026392121414e-03, 8.578026392121414e-03, 1.715605278424283e-02, 8.578026392121414e-03, 9.033027082277899e-03, 1.806605416455580e-02, 9.033027082277899e-03, 1.234703345560530e-02, 2.469406691121059e-02, 1.234703345560530e-02, 1.343086947600492e-02, 2.686173895200983e-02, 1.343086947600492e-02, 1.275474117539329e-02, 2.550948235078659e-02, 1.275474117539329e-02, 1.334172843355470e-02, 2.668345686710940e-02, 1.334172843355470e-02, 1.334172843355470e-02, 2.668345686710940e-02, 1.334172843355470e-02, 5.047315455777413e-03, 1.009463091155483e-02, 5.047315455777413e-03, 1.838163383191525e-02, 3.676326766383049e-02, 1.838163383191525e-02, 2.997325838757862e-02, 5.994651677515724e-02, 2.997325838757862e-02, 5.419661904078717e-02, 1.083932380815743e-01, 5.419661904078717e-02, 4.823776025438176e-02, 9.647552050876351e-02, 4.823776025438176e-02, 4.823776025438177e-02, 9.647552050876354e-02, 4.823776025438177e-02, 1.779858175790099e-02, 3.559716351580198e-02, 1.779858175790099e-02, 2.024697686827737e-04, 4.049395373655473e-04, 2.024697686827737e-04, 5.982768448481066e-04, 1.196553689696213e-03, 5.982768448481066e-04, 8.486494749294698e-02, 1.697298949858940e-01, 8.486494749294698e-02, 8.543225783418843e-03, 1.708645156683769e-02, 8.543225783418843e-03, 8.543225783419423e-03, 1.708645156683885e-02, 8.543225783419423e-03, 4.805080599912168e-06, 9.610161199824337e-06, 4.805080599912168e-06, 1.380945586575171e-07, 2.761891173150342e-07, 1.380945586575171e-07, 3.657429576068498e-07, 7.314859152136997e-07, 3.657429576068498e-07, 6.722065047392270e-03, 1.344413009478454e-02, 6.722065047392270e-03, 4.339120982960020e-06, 8.678241965920040e-06, 4.339120982960020e-06, 4.339126601912103e-06, 8.678253203824206e-06, 4.339126601912103e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
