
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86vwn_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.168744261720328e-01, -1.168737185209835e-01, -1.168720298930722e-01, -1.168825282419815e-01, -1.168768200884208e-01, -1.168768200884208e-01, -5.134153102957143e-02, -5.134448132951874e-02, -5.141337395497043e-02, -5.129676606599508e-02, -5.134541580265922e-02, -5.134541580265922e-02, -3.081009198868934e-02, -3.055511269786996e-02, -2.424684533450403e-02, -2.454548913984728e-02, -2.471375239357167e-02, -2.471375239357167e-02, -5.785550398401920e-03, -6.808514168201305e-03, -3.357590798228755e-02, 3.103033708811425e-03, -5.539967761035409e-04, -5.539967761035452e-04, -3.778657874974317e-03, -3.945459443656578e-03, -9.163902728646268e-03, -2.344744273266970e-03, -2.866651208642780e-03, -2.866651208642780e-03, -6.699501329868912e-02, -6.714284022067425e-02, -6.700110274407316e-02, -6.713158871896904e-02, -6.707010554185310e-02, -6.707010554185310e-02, -3.188339149125811e-02, -3.218897270028512e-02, -3.145404747637719e-02, -3.170458745443395e-02, -3.229053405715118e-02, -3.229053405715118e-02, -4.235307764552544e-02, -5.772894255167241e-02, -3.973634800121709e-02, -5.337377486700936e-02, -4.416791535545458e-02, -4.416791535545458e-02, 5.580223102209915e-03, 1.717868169514668e-03, 4.837961257631166e-03, -7.515391645610137e-02, 4.710645386946381e-03, 4.710645386946381e-03, -1.859410427204252e-03, -2.298006967541696e-03, -1.803646341837418e-03, -1.064484334739651e-03, -2.134800718537838e-03, -2.134800718537838e-03, -6.119602797416104e-02, -5.662146757983357e-02, -5.814317437750673e-02, -5.946852726487444e-02, -5.879772510460862e-02, -5.879772510460862e-02, -6.209272898920547e-02, -3.059190425957144e-02, -3.814498563913531e-02, -4.670592052310540e-02, -4.229018712309349e-02, -4.229018712309349e-02, -5.781988044951702e-02, -3.066125789064505e-03, -1.013819028644075e-02, -2.678101888171701e-02, -1.814168329309579e-02, -1.814168329309580e-02, -2.984351126601005e-02, -9.764279907517640e-03, -6.137193187596899e-03, -3.178918960550926e-02, 3.147106888398178e-03, 3.147106888398169e-03, -5.037394697011911e-03, -6.837004082032315e-04, -1.363451552016986e-03, 2.339681014976085e-03, -1.991148347217834e-03, -1.991148347217830e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86vwn_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.829553078589975e-02, -5.829611683032274e-02, -5.829785051254762e-02, -5.828915524263738e-02, -5.829383276566010e-02, -5.829383276566010e-02, -9.426303494623949e-02, -9.427513090228232e-02, -9.455401149937794e-02, -9.406337549334481e-02, -9.427680510755562e-02, -9.427680510755562e-02, -8.621331951184895e-02, -8.603650572330661e-02, -8.043770707647134e-02, -8.079334943169225e-02, -8.096297662343621e-02, -8.096297662343621e-02, -4.658085466003974e-02, -4.795909826738779e-02, -8.998087054918186e-02, -2.530952940985329e-02, -3.608448718163071e-02, -3.608448718163068e-02, -4.819844423552720e-03, -5.012514517784348e-03, 6.210886859648843e-03, -3.037593381852009e-03, -3.694551496507442e-03, -3.694551496507442e-03, -1.190040319191167e-01, -1.193885845641441e-01, -1.190198945148706e-01, -1.193594147333587e-01, -1.192000337345809e-01, -1.192000337345809e-01, -5.652666915823613e-02, -5.787316860272499e-02, -5.297745361098777e-02, -5.417136727781431e-02, -5.899786322091408e-02, -5.899786322091408e-02, -8.580693142559141e-02, -8.218031491655789e-02, -8.382805647451870e-02, -8.004684223451251e-02, -8.598871739823560e-02, -8.598871739823560e-02, 5.274677423996622e-03, -3.407851360188709e-02, 8.510248327494937e-03, -1.177876279924029e-01, -1.337139011336208e-02, -1.337139011336208e-02, -2.417690841022077e-03, -2.977686543513919e-03, -2.304515248088223e-03, 1.724626325729510e-02, -2.754362512711901e-03, -2.754362512711901e-03, -7.561472344011690e-02, -7.935367628456420e-02, -7.822679524393589e-02, -7.715316382075199e-02, -7.770756146090840e-02, -7.770756146090840e-02, -7.329153803602102e-02, -8.061451277329525e-02, -8.248468938251527e-02, -8.181291924851565e-02, -8.249973418027645e-02, -8.249973418027645e-02, -8.414714978562461e-02, -4.635483932427648e-02, -5.782429846188612e-02, -7.185502644353479e-02, -6.610038457130427e-02, -6.610038457130427e-02, -7.861110151343564e-02, 3.849884222094836e-03, 1.577170891575646e-02, -7.081761293319092e-02, 7.464823507655680e-03, 7.464823507655665e-03, -6.297691898108577e-03, -8.986712157116806e-04, -1.779891026062372e-03, 1.046965264140657e-02, -2.567265633930762e-03, -2.567265633930756e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86vwn_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.992847368412026e-10, -1.992841339153488e-10, -1.992778401508982e-10, -1.992868700150302e-10, -1.992826587698989e-10, -1.992826587698989e-10, 6.100263047764953e-07, 6.103117640926306e-07, 6.168380691691294e-07, 6.047862426169977e-07, 6.102748732547185e-07, 6.102748732547185e-07, 1.949024954304973e-03, 1.939280810131091e-03, 1.672850469417530e-03, 1.628594399846397e-03, 1.656355762864367e-03, 1.656355762864367e-03, 3.170651099138225e-01, 3.165823535230631e-01, 1.030302901215955e-03, 4.302786888708385e-01, 4.162062170659100e-01, 4.162062170659098e-01, -5.445609978756631e+00, -7.282144245567958e+00, -1.025578378142682e+01, -5.181136192104167e-01, -3.310042276572299e+00, -3.310042276572326e+00, 1.950279986009250e-07, 1.975268579751515e-07, 1.951289575122880e-07, 1.973347555774588e-07, 1.962989186526594e-07, 1.962989186526594e-07, 2.078307495751734e-06, 2.186362796743723e-06, 1.623721594335734e-06, 1.723834931580772e-06, 2.364427351890736e-06, 2.364427351890736e-06, 5.565143485790808e-03, 6.265164609534949e-03, 7.345035245976538e-03, 9.625219648788205e-03, 5.478362785858169e-03, 5.478362785858169e-03, 1.313911215181706e-01, 1.741027059595669e-01, -5.709003600179875e-03, 5.471021418938331e-05, 5.673145788686633e-01, 5.673145788686633e-01, -4.703007525517386e-01, -9.203838839560782e-01, -2.321118296899811e+02, -2.579697389667011e+00, -3.434365241834017e+01, -3.434365241834001e+01, 1.063042785409049e-02, 9.016998864450522e-03, 9.466945731458287e-03, 9.917315820973539e-03, 9.681348937148230e-03, 9.681348937148230e-03, 1.295621795595136e-02, 8.448262979196311e-03, 8.864874487311115e-03, 9.584481651582630e-03, 9.194897748056489e-03, 9.194897748056489e-03, 5.006809349006265e-03, 9.520003888123862e-02, 6.430300611231561e-02, 3.700770875423263e-02, 4.989251721292147e-02, 4.989251721292150e-02, 1.210942253580752e-02, -1.017915876701834e+01, -5.779718002242157e+00, 5.240910978182820e-02, -6.014213776178705e-02, -6.014213776178842e-02, -6.759252322177368e+00, -1.034661214000902e+00, -2.391962739282104e+00, -4.940986500049445e-01, -5.922750251370579e+01, -5.922750251370602e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
