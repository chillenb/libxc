
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sogga11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.573004233965205e-01, -4.572900967581303e-01, -4.572628812263538e-01, -4.574161527948566e-01, -4.573331756548419e-01, -4.573331756548419e-01, -2.016757424555014e-01, -2.016561711721651e-01, -2.012030795353741e-01, -2.020096988790032e-01, -2.016552667184200e-01, -2.016552667184200e-01, -6.749044011317523e-02, -6.845496213562208e-02, -9.453997827909616e-02, -9.400721744413092e-02, -9.305451822484737e-02, -9.305451822484737e-02, -6.978201529209609e-02, -6.822024675176568e-02, -6.984404539187254e-02, -7.049193403624182e-02, -7.037191750401660e-02, -7.037191750401660e-02, -4.013293134660040e-02, -4.183368980829843e-02, -1.252362070302901e-01, -2.521387361441962e-02, -3.066847369918673e-02, -3.066847369918673e-02, -1.725770319577064e-01, -1.711821094412858e-01, -1.725199587066697e-01, -1.712886143927881e-01, -1.718678526949562e-01, -1.718678526949562e-01, -1.939497352838755e-01, -1.937754533249708e-01, -1.953691528257107e-01, -1.951439741127257e-01, -1.932452638485317e-01, -1.932452638485317e-01, -4.616150988596571e-02, -6.817330426363544e-02, -4.317936362291423e-02, -6.503852609736632e-02, -4.908745030653570e-02, -4.908745030653570e-02, -9.965952029598397e-02, -7.808510457287697e-02, -1.039208204406939e-01, -9.032266406414786e-02, -7.292052883678334e-02, -7.292052883678334e-02, -2.007068557336237e-02, -2.471224023262038e-02, -1.943564713403886e-02, -1.204150743717587e-01, -2.293676006613560e-02, -2.293676006613560e-02, -6.322941049784622e-02, -6.589370860936090e-02, -6.511710370778456e-02, -6.422518624208952e-02, -6.468494918619432e-02, -6.468494918619432e-02, -6.235801089971813e-02, -4.649576076214609e-02, -4.166737778804575e-02, -5.627342469957841e-02, -4.740154485064536e-02, -4.740154485064536e-02, -6.942279839840214e-02, -8.330080709953255e-02, -7.846747925980040e-02, -3.866138365377238e-02, -5.813724780645835e-02, -5.813724780645860e-02, -4.406130369164181e-02, -1.249183389915615e-01, -1.324185682831568e-01, -3.519164948092064e-02, -9.614113914590203e-02, -9.614113914590201e-02, -5.300335603210807e-02, -7.477856092187007e-03, -1.477881552889841e-02, -1.019661345684149e-01, -2.141728815365146e-02, -2.141728815365148e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sogga11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([4.374979931962471e-01, 4.374671633162240e-01, 4.373849113208353e-01, 4.378423313750010e-01, 4.375949186140587e-01, 4.375949186140587e-01, 1.599017331832175e-02, 1.613568758841724e-02, 1.949557848355488e-02, 1.356531796017915e-02, 1.615192802129814e-02, 1.615192802129814e-02, 1.323863375019479e-01, 1.345490512603942e-01, 1.286725774616745e-01, 1.308681501715576e-01, 1.326456854807574e-01, 1.326456854807574e-01, -3.748755459821937e-03, 1.196803018417104e-02, 1.361914195844722e-01, -2.513622441459123e-02, -5.552102165099991e-02, -5.552102165100064e-02, -5.006634973935473e-02, -5.195495660782087e-02, -7.795023543164120e-02, -3.229655544160465e-02, -3.888995681004079e-02, -3.888995681004079e-02, 2.414391381223287e-01, 2.442590287608727e-01, 2.415579292022726e-01, 2.440496648600654e-01, 2.428929454854936e-01, 2.428929454854936e-01, -1.333323952390864e-01, -1.364698711112722e-01, -1.215997173718279e-01, -1.261576669531112e-01, -1.383449012770595e-01, -1.383449012770595e-01, -1.089733479083233e-01, -7.273085836664916e-02, -8.955368232455002e-02, -8.081354587156184e-02, -1.235514808478608e-01, -1.235514808478608e-01, 1.072077681731788e-01, -5.478915236226121e-02, 1.030986711304018e-01, -1.692788532990777e-01, 4.176152020482307e-02, 4.176152020482307e-02, -2.586677393812963e-02, -3.165234540394481e-02, -2.485892290212553e-02, 3.242527569134143e-02, -2.927985799450654e-02, -2.927985799450654e-02, -6.805381820181339e-02, -6.777929321134596e-02, -6.445375329709667e-02, -6.469401826527987e-02, -6.424007964647689e-02, -6.424007964647689e-02, -7.080062294298209e-02, 5.653565036372669e-02, -7.669444442874768e-02, -1.226837691633557e-01, -1.200104903547543e-01, -1.200104903547543e-01, -7.912419880520011e-02, -5.184289359602386e-02, 3.944387069527068e-02, 3.354559887809663e-02, 1.075880393176260e-01, 1.075880393176266e-01, 4.682964247437124e-02, -8.676619556342727e-02, -4.017089650621453e-02, -6.774686044575232e-02, 9.370038188491184e-02, 9.370038188491210e-02, -6.444981528945805e-02, -9.788601069222235e-03, -1.915180162472670e-02, 8.484876710072654e-02, -2.737928072973196e-02, -2.737928072973196e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sogga11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.601945131534342e-09, -2.601868252959469e-09, -2.601601843689767e-09, -2.602743623744681e-09, -2.602134830119934e-09, -2.602134830119934e-09, -4.145254635720891e-06, -4.148249022166586e-06, -4.217185286267254e-06, -4.092615763287537e-06, -4.148177145067913e-06, -4.148177145067913e-06, -8.062873905177133e-03, -8.133122476186380e-03, -7.647278420862835e-03, -7.490056872258599e-03, -7.640672085809567e-03, -7.640672085809567e-03, -6.133628650981877e-01, -7.188114749008261e-01, -4.328486839790969e-03, -8.317366172570796e-01, -3.100472942911681e-01, -3.100472942911672e-01, -2.074998939427041e+02, -2.154639166320131e+02, -4.742372348701478e+01, -2.207541760118610e+02, -2.638534613502948e+02, -2.638534613502956e+02, -1.912268251990168e-06, -1.931851653249759e-06, -1.913069651039905e-06, -1.930365720166771e-06, -1.922303169671626e-06, -1.922303169671626e-06, -1.008261084857710e-05, -9.532914742813929e-06, -1.147167719635813e-05, -1.074726082922804e-05, -9.401127481686706e-06, -9.401127481686706e-06, 8.430710158125767e-03, -1.351596357654515e-03, 7.799979949646525e-03, 3.709872906894453e-03, 1.043694216809869e-02, 1.043694216809869e-02, -8.038693403647583e+00, -1.748269264009195e-01, -1.045046492107249e+01, 1.099563213895422e-04, -3.521303245899638e+00, -3.521303245899638e+00, -3.090906516770035e+02, -2.612058586204312e+02, -1.740412370511079e+03, -2.969920723348371e+01, -7.770566185550238e+02, -7.770566185550221e+02, -4.695275046133061e-03, -3.624419398376328e-03, -6.454544304480650e-03, -7.237052591994650e-03, -7.084020745532800e-03, -7.084020745532800e-03, 2.601290417609887e-03, -2.036049804468779e-02, 6.766256468910024e-03, 1.964543679993900e-02, 1.777783614895553e-02, 1.777783614895553e-02, 3.502113588660770e-04, -1.002196041232675e-01, -1.834151180858633e-01, -7.025272158124482e-02, -1.942067896733250e-01, -1.942067896733253e-01, -2.654284953778926e-02, -4.531162507880491e+01, -3.331469259796365e+01, 4.218560120071564e-02, -1.923829656719187e+01, -1.923829656719186e+01, -1.481297960153608e+02, -1.634935541243533e+03, -7.028039587140499e+02, -2.267645416428595e+01, -9.992265061104463e+02, -9.992265061104540e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
