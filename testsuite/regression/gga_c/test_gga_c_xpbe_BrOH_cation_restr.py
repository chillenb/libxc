
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_xpbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.491246130363427e-02, -7.491308804036975e-02, -7.491492351222113e-02, -7.490561917016839e-02, -7.491062939104384e-02, -7.491062939104384e-02, -5.081042170368143e-02, -5.081434776422592e-02, -5.090548105215812e-02, -5.074895318014746e-02, -5.081534781506232e-02, -5.081534781506232e-02, -2.852443924740945e-02, -2.831956088056644e-02, -2.335643723380336e-02, -2.362039567764011e-02, -2.373911140614976e-02, -2.373911140614976e-02, -5.576427989253341e-03, -6.104906410935638e-03, -3.144175146524391e-02, -1.666713628745314e-03, -3.001114548308246e-03, -3.001114548308241e-03, -3.090180553207375e-09, -4.136818028392905e-09, -5.317792485382089e-06, -2.177316130885574e-10, -8.049157666134516e-10, -8.049157666134516e-10, -6.695658000331649e-02, -6.711140064106806e-02, -6.696297253863187e-02, -6.709964588100734e-02, -6.703533967705727e-02, -6.703533967705727e-02, -2.928944882567493e-02, -2.976121674532161e-02, -2.830697199922106e-02, -2.871824202665088e-02, -3.003723521253425e-02, -3.003723521253425e-02, -3.780909782433140e-02, -5.421093050720483e-02, -3.522996369721694e-02, -4.951754784910173e-02, -3.955320165864475e-02, -3.955320165864475e-02, -3.009456971413451e-04, -2.851820077476128e-03, -2.300864938703617e-04, -7.064327552260560e-02, -8.327902971358429e-04, -8.327902971358429e-04, -8.472658028909296e-11, -2.304184389640511e-10, -4.094789543586272e-10, -5.422613919811134e-05, -4.580766757074081e-10, -4.580766757074081e-10, -5.952160956637564e-02, -5.334578184322356e-02, -5.532409375408715e-02, -5.710939782010879e-02, -5.619852675331549e-02, -5.619852675331549e-02, -6.113039168921228e-02, -2.698096211299027e-02, -3.365860403178242e-02, -4.210457789627220e-02, -3.761052346817510e-02, -3.761052346817510e-02, -5.405636515518894e-02, -5.381743275653092e-03, -9.618692375024548e-03, -2.255775839317556e-02, -1.532514155020651e-02, -1.532514155020651e-02, -2.604608639508357e-02, -3.976060895534304e-06, -1.599580534071609e-05, -2.695235193054598e-02, -1.884235483402377e-04, -1.884235483402388e-04, -1.216619797724160e-08, -2.123236195608666e-12, -3.572817988933481e-11, -1.413616811770919e-04, -4.015857243872377e-10, -4.015857223020533e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_xpbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.320663938118352e-01, -1.320670096514539e-01, -1.320688185707310e-01, -1.320596758481068e-01, -1.320645982954608e-01, -1.320645982954608e-01, -1.048520475753538e-01, -1.048557368815826e-01, -1.049414209584998e-01, -1.047949403420684e-01, -1.048567720564755e-01, -1.048567720564755e-01, -7.352863750455853e-02, -7.330662272700167e-02, -6.722669646112142e-02, -6.762702908310268e-02, -6.777394680500712e-02, -6.777394680500712e-02, -2.497963747076031e-02, -2.674631360295968e-02, -7.767499156502335e-02, -9.024842487730266e-03, -1.509597121289155e-02, -1.509597121289150e-02, -2.020405936933453e-08, -2.703685923952603e-08, -3.406646088752866e-05, -1.428712810775250e-09, -5.274043050706690e-09, -5.274043052413550e-09, -1.210641399433283e-01, -1.211979222641321e-01, -1.210696754939338e-01, -1.211877796319091e-01, -1.211322187866325e-01, -1.211322187866325e-01, -7.970855840201732e-02, -8.034574502674902e-02, -7.838085514346088e-02, -7.895246347529922e-02, -8.070109758720807e-02, -8.070109758720807e-02, -7.906491934501940e-02, -8.278329658504573e-02, -7.655846196878215e-02, -8.016910741291564e-02, -8.011141388456849e-02, -8.011141388456849e-02, -1.812791654868889e-03, -1.455222033844993e-02, -1.398174354095984e-03, -1.123206235437382e-01, -4.767991923226494e-03, -4.767991923226494e-03, -5.567934059464298e-10, -1.512152286706506e-09, -2.691126125874882e-09, -3.399545243095604e-04, -3.007421644368550e-09, -3.007421645069594e-09, -7.666739651043099e-02, -8.028196550581777e-02, -7.944899197833034e-02, -7.844347273944249e-02, -7.898775227409868e-02, -7.898775227409868e-02, -7.375143483372122e-02, -6.927054243124997e-02, -7.492288638395195e-02, -7.896616255291582e-02, -7.722066356227179e-02, -7.722066356227179e-02, -8.433036640430695e-02, -2.465382208909939e-02, -3.784810464104811e-02, -6.146704618930453e-02, -5.056456614425343e-02, -5.056456614425343e-02, -6.756784140815347e-02, -2.550873707841047e-05, -1.016849141262146e-04, -6.474165312725119e-02, -1.150870136673108e-03, -1.150870136673105e-03, -7.934341835768092e-08, -1.402515241210878e-11, -2.352169195070925e-10, -8.699710578592113e-04, -2.637706075349484e-09, -2.637706069038858e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_xpbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.360789190210881e-10, 1.360810253792828e-10, 1.360833912719766e-10, 1.360522044738055e-10, 1.360695379534686e-10, 1.360695379534686e-10, 8.164515203246907e-07, 8.166043538001648e-07, 8.200519461570563e-07, 8.133115690961589e-07, 8.165375644879647e-07, 8.165375644879647e-07, 1.527170224920166e-03, 1.516661041763332e-03, 1.259436139648485e-03, 1.228715908442080e-03, 1.250305747290639e-03, 1.250305747290639e-03, 1.398455815414499e-01, 1.477351105597710e-01, 8.149944407254040e-04, 9.751489165404446e-02, 1.280762003732825e-01, 1.280762003732823e-01, 2.434179463839355e-03, 2.872766509485056e-03, 1.681059667321046e-02, 8.482387149726096e-04, 1.781793229306598e-03, 1.781793228816378e-03, 2.053296979856111e-07, 2.066970274439312e-07, 2.053842358023796e-07, 2.065911522726964e-07, 2.060249529156196e-07, 2.060249529156196e-07, 5.564661962986371e-06, 5.510499942526920e-06, 5.386169560141319e-06, 5.339634568177485e-06, 5.624131608054953e-06, 5.624131608054953e-06, 5.208708024360650e-03, 7.839450219992064e-03, 6.769882492205740e-03, 1.164887219351069e-02, 5.261042050383938e-03, 5.261042050383938e-03, 4.983812889058281e-02, 5.182544821130889e-02, 4.983346292930298e-02, 5.312768675751010e-05, 9.986342446188219e-02, 9.986342446188219e-02, 8.248113008678684e-04, 1.042373922646018e-03, 1.038465213766227e-02, 4.441547536630852e-02, 4.532790221305211e-03, 4.532790226498358e-03, 1.525026227790875e-02, 1.158453029020976e-02, 1.264306428847379e-02, 1.368867206481645e-02, 1.314410665367473e-02, 1.314410665367473e-02, 1.901749439564299e-02, 6.919453754427762e-03, 8.101621351192273e-03, 1.016966307598528e-02, 8.997224456666546e-03, 8.997224456666546e-03, 6.088963598531956e-03, 3.954155793481834e-02, 3.602123865910190e-02, 3.103682379793557e-02, 3.511008317065530e-02, 3.511008317065531e-02, 9.998248659852282e-03, 1.365126153717679e-02, 2.201169150548848e-02, 5.013573278246839e-02, 8.228372973180047e-02, 8.228372973180072e-02, 3.062725530447332e-03, 1.113779914205695e-03, 1.409925454094074e-03, 7.405900009777346e-02, 5.637025064804504e-03, 5.637025069698778e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
