
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_xalpha_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.510648722789938e-02, -5.510648946406329e-02, -5.510650009606233e-02, -5.510646680761582e-02, -5.510648414679742e-02, -5.510648414679742e-02, -5.125466124671279e-02, -5.125467051942912e-02, -5.125499016464345e-02, -5.125525033099714e-02, -5.125477027908248e-02, -5.125477027908248e-02, -3.777635638066539e-02, -3.776231061344842e-02, -3.742372947535363e-02, -3.752927922805557e-02, -3.736055443135387e-02, -3.736055443135387e-02, -1.910042999396279e-02, -1.928626145095530e-02, -3.959892411605072e-02, -1.573573185564834e-02, -1.182346829482434e-02, -1.182346829482435e-02, -9.386675751875150e-04, -9.860256223323133e-04, -5.119585770118695e-03, -5.474270403389544e-04, -4.843981557581404e-04, -4.843981557581405e-04, -5.272015326017068e-02, -5.272070870429243e-02, -5.272018084657826e-02, -5.272067135511859e-02, -5.272043368663624e-02, -5.272043368663624e-02, -4.810969524423924e-02, -4.815852799300237e-02, -4.807353594417239e-02, -4.811711273359278e-02, -4.815319324600627e-02, -4.815319324600627e-02, -3.606684090038662e-02, -3.713440029509440e-02, -3.499877404835427e-02, -3.552084364583709e-02, -3.618753812068091e-02, -3.618753812068091e-02, -1.186197509309622e-02, -1.914983887554976e-02, -1.109896270388477e-02, -4.797794924092033e-02, -1.342013781609646e-02, -1.342013781609646e-02, -4.224731185085755e-04, -5.352867246149396e-04, -4.084554017984996e-04, -7.946788914739948e-03, -4.376186213706679e-04, -4.376186213706681e-04, -3.612977741655070e-02, -3.605469552221760e-02, -3.608117690924993e-02, -3.610294505149108e-02, -3.609205517281142e-02, -3.609205517281142e-02, -3.577011004822853e-02, -3.372086688761529e-02, -3.434774822231781e-02, -3.493603690585153e-02, -3.463968789731699e-02, -3.463968789731699e-02, -3.772970655470653e-02, -2.228105207709121e-02, -2.484280799987190e-02, -2.882347484560912e-02, -2.682248481015115e-02, -2.682248481015114e-02, -3.257941781911976e-02, -4.933746292862837e-03, -6.540510794941746e-03, -2.829297653399008e-02, -9.751374351655353e-03, -9.751374351655353e-03, -1.321576035663712e-03, -1.438993812929286e-04, -2.999776203105226e-04, -9.273402511781119e-03, -4.144892851070199e-04, -4.144892851070192e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_xalpha_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.537370386989599e-02, -5.537384716909467e-02, -5.537365621095822e-02, -5.537389785077501e-02, -5.537391779135566e-02, -5.537365064033430e-02, -5.537333789102027e-02, -5.537418555654985e-02, -5.537306428826663e-02, -5.537448260888692e-02, -5.537306428826663e-02, -5.537448260888692e-02, -5.268631502782948e-02, -5.268779185652760e-02, -5.268621692474099e-02, -5.268790330845245e-02, -5.268840423562986e-02, -5.268617590660425e-02, -5.268823674161595e-02, -5.268671767721689e-02, -5.270738756138324e-02, -5.266689556762705e-02, -5.270738756138324e-02, -5.266689556762705e-02, -4.212003231828260e-02, -4.175530725827769e-02, -4.214977381407371e-02, -4.170191538627902e-02, -4.131275778614117e-02, -4.194640356168765e-02, -4.181922020072872e-02, -4.162052025051025e-02, -3.882889537599393e-02, -4.484647884461498e-02, -3.882889537599393e-02, -4.484647884461498e-02, -2.453005278790506e-02, -2.241041048762154e-02, -2.490971368359857e-02, -2.247768055482335e-02, -4.515541972422840e-02, -4.201555855583258e-02, -1.993921851722341e-02, -1.929526646458474e-02, -1.007667241333969e-02, -4.527094885833079e-02, -1.007667241333970e-02, -4.527094885833079e-02, -1.351087174341509e-03, -1.161093353480317e-03, -1.435034497506975e-03, -1.208602805200118e-03, -7.184158658433681e-03, -6.279076364892650e-03, -7.136199308714819e-04, -7.442011180367910e-04, -4.343919845137379e-04, -1.784908807769389e-03, -4.343919845137382e-04, -1.784908807769390e-03, -5.371595129369126e-02, -5.374217813507956e-02, -5.371599581261752e-02, -5.374291466758796e-02, -5.371572677968278e-02, -5.374244171945473e-02, -5.371627222888162e-02, -5.374258538634955e-02, -5.371590813198746e-02, -5.374261570613703e-02, -5.371590813198746e-02, -5.374261570613703e-02, -5.036537760798316e-02, -5.037069630677876e-02, -5.039058853058603e-02, -5.041924958907548e-02, -5.043182854508616e-02, -5.025000501540595e-02, -5.046860664256209e-02, -5.027911694379668e-02, -5.017112782947741e-02, -5.063328214700342e-02, -5.017112782947741e-02, -5.063328214700342e-02, -4.030117026532094e-02, -4.053855401462175e-02, -4.139177606480982e-02, -4.135037545702386e-02, -4.111938068168460e-02, -3.794467139850825e-02, -4.144289520762603e-02, -3.854154584685456e-02, -3.838823809778063e-02, -4.298747735249306e-02, -3.838823809778064e-02, -4.298747735249305e-02, -1.523391652665461e-02, -1.488737193046817e-02, -2.360613905503232e-02, -2.332950640687989e-02, -1.511096529530289e-02, -1.330636724365949e-02, -5.024480381574191e-02, -5.029204039855702e-02, -1.819225154726917e-02, -1.583015299656545e-02, -1.819225154726917e-02, -1.583015299656545e-02, -5.911360753106680e-04, -5.369466931161349e-04, -7.260661322991086e-04, -6.993340482767115e-04, -5.863345152727413e-04, -5.080651911934010e-04, -1.034604862433857e-02, -1.019169631046470e-02, -9.630572139575625e-04, -4.356382491578080e-04, -9.630572139575632e-04, -4.356382491578083e-04, -4.064976309310641e-02, -4.030389166838480e-02, -4.058389747315261e-02, -4.023501258911120e-02, -4.060769407510340e-02, -4.025876770238374e-02, -4.062568975923841e-02, -4.027981494980983e-02, -4.061666984528767e-02, -4.026930399901986e-02, -4.061666984528767e-02, -4.026930399901986e-02, -4.030011832570125e-02, -4.000616289791689e-02, -3.846598656437519e-02, -3.809560121196765e-02, -3.905122955738344e-02, -3.866713889241007e-02, -3.955107091978876e-02, -3.924318064867405e-02, -3.928823877345097e-02, -3.896482492128725e-02, -3.928823877345097e-02, -3.896482492128725e-02, -4.197091826142486e-02, -4.182092280947139e-02, -2.705721352075672e-02, -2.669385562189649e-02, -2.991694497290399e-02, -2.923233882951910e-02, -3.380898422262421e-02, -3.338584617101172e-02, -3.158388195241860e-02, -3.160954735027158e-02, -3.158388195241860e-02, -3.160954735027156e-02, -3.750426435228950e-02, -3.692985399824297e-02, -6.511879409145493e-03, -6.403041247821596e-03, -8.864413140740888e-03, -8.174299798351079e-03, -3.364912944942710e-02, -3.251591738596630e-02, -1.339825323947874e-02, -1.173334233599697e-02, -1.339825323947875e-02, -1.173334233599697e-02, -1.836082566656218e-03, -1.680094656964690e-03, -1.923205686411838e-04, -1.912263661534503e-04, -4.333367789524913e-04, -3.714819037926994e-04, -1.215391568023340e-02, -1.168168750885385e-02, -8.579108545805073e-04, -4.213875809181088e-04, -8.579108545805060e-04, -4.213875809181082e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_xalpha_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
