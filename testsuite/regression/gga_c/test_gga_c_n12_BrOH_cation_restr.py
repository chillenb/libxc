
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_n12_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.350688779372672e-01, -1.350690443178216e-01, -1.350696498224963e-01, -1.350671796352376e-01, -1.350684919332478e-01, -1.350684919332478e-01, -9.157065095721330e-02, -9.156991000160629e-02, -9.155339171270792e-02, -9.158660704378341e-02, -9.157032814030201e-02, -9.157032814030201e-02, -5.563514890723079e-02, -5.555530706835941e-02, -5.210795436940414e-02, -5.246761998817591e-02, -5.255064325622345e-02, -5.255064325622345e-02, -1.561305629889308e-02, -1.593876842491636e-02, -5.911544317238083e-02, -3.291378358508053e-02, -1.962657617230652e-02, -1.962657617230635e-02, -2.689250092509815e-02, -2.811020150823023e-02, -9.742533264205629e-02, -1.650091595548403e-02, -2.026292885296861e-02, -2.026292885296865e-02, -1.031922557363154e-01, -1.033091739767282e-01, -1.031970647123191e-01, -1.033002432465785e-01, -1.032514358122965e-01, -1.032514358122965e-01, -7.313778435671608e-02, -7.383748918478553e-02, -7.169248671291517e-02, -7.236085809733003e-02, -7.417205926560420e-02, -7.417205926560420e-02, -5.263459273897203e-02, -6.415559432269441e-02, -5.133814747259587e-02, -5.825840970133437e-02, -5.290326201231369e-02, -5.290326201231369e-02, -8.490472085752501e-02, -2.348167078744733e-02, -9.015426055054880e-02, -9.240353330902551e-02, -5.188177886340480e-02, -5.188177886340480e-02, -1.301748588232673e-02, -1.616276108864772e-02, -1.262575876034707e-02, -1.036953846693200e-01, -1.498367436496700e-02, -1.498367436496696e-02, -5.915799542537971e-02, -6.256240909860188e-02, -6.356941973387803e-02, -6.295775783339408e-02, -6.348949428874939e-02, -6.348949428874939e-02, -5.426135780433557e-02, -4.968503368897913e-02, -5.050377891890269e-02, -5.162895294599219e-02, -5.052054485895745e-02, -5.052054485895745e-02, -6.443513239013234e-02, -1.758721014767020e-02, -2.308927968990366e-02, -4.245859798695494e-02, -3.384593306286724e-02, -3.384593306286769e-02, -4.801393143469068e-02, -9.609232834536495e-02, -1.071754727514024e-01, -4.279016581969518e-02, -8.707260678141897e-02, -8.707260678141888e-02, -3.613026481095578e-02, -4.704158692190877e-03, -9.484841437439667e-03, -9.193927782711989e-02, -1.395549424830913e-02, -1.395549424830915e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_n12_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.520712743316451e-01, -1.520749376051327e-01, -1.520854898173028e-01, -1.520311215901091e-01, -1.520604177202551e-01, -1.520604177202551e-01, -8.905198126710426e-02, -8.905426346854622e-02, -8.911066351857055e-02, -8.902042646612129e-02, -8.905522326084150e-02, -8.905522326084150e-02, -7.436508434924914e-02, -7.520516776062813e-02, -9.821100795627731e-02, -9.737447243178297e-02, -9.665477780866018e-02, -9.665477780866018e-02, -2.119245003122601e-02, -3.156377448995782e-02, -7.046481058617489e-02, 1.056844603402104e-01, 5.180903963029484e-02, 5.180903963029244e-02, -3.441958277419576e-02, -3.589463784966820e-02, -8.518238022465509e-02, -2.143797207527961e-02, -2.617964941788781e-02, -2.617964941788813e-02, -1.482645054031743e-01, -1.491307757842826e-01, -1.483003037584942e-01, -1.490650896398009e-01, -1.487056292103585e-01, -1.487056292103585e-01, -1.442789535070219e-01, -1.419631169235772e-01, -1.497158711698519e-01, -1.478256915747463e-01, -1.401759779120280e-01, -1.401759779120280e-01, -5.632526576197821e-02, -9.282567900974802e-02, -5.260728842957962e-02, -9.549241593607502e-02, -6.039686839614453e-02, -6.039686839614453e-02, 9.122870973414707e-02, 6.966195096567772e-02, 7.368206901660555e-02, -1.268261858533902e-01, 1.228390870505049e-01, 1.228390870505049e-01, -1.698032129614154e-02, -2.100192159946492e-02, -1.643001264795292e-02, -1.668876591736879e-02, -1.945900279535915e-02, -1.945900279535936e-02, -4.292845738209199e-02, -8.790780268262402e-02, -7.334614278301446e-02, -5.704480444501996e-02, -6.541275224892346e-02, -6.541275224892346e-02, -5.646900474263584e-02, -6.502096627519116e-02, -5.153092012692811e-02, -7.124702886909422e-02, -5.585913111629701e-02, -5.585913111629701e-02, -9.796658044367970e-02, -8.873054894446010e-03, -7.472196287786721e-02, -6.619708555738790e-02, -8.834974568966936e-02, -8.834974568967141e-02, -6.471510886885691e-02, -8.864863927369990e-02, -6.727074463616116e-02, -4.858614862215970e-02, 5.809541352952450e-02, 5.809541352952339e-02, -4.557104127554662e-02, -6.200695318124802e-03, -1.242091309316964e-02, 3.998497506798433e-02, -1.814320198237992e-02, -1.814320198237986e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_n12_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.208445436895002e-11, 2.209364015058681e-11, 2.211917727469438e-11, 2.198288142897138e-11, 2.205645012552648e-11, 2.205645012552648e-11, -1.654675596301350e-07, -1.654499596880696e-07, -1.649721313514999e-07, -1.655911458513117e-07, -1.654276572526924e-07, -1.654276572526924e-07, 4.293465700597798e-04, 4.592752377462753e-04, 1.192797723126567e-03, 1.124564001106790e-03, 1.119577475113219e-03, 1.119577475113219e-03, 2.258897052580502e-02, 9.613320600167774e-02, 8.313331794169582e-05, -1.957585163302134e+00, -8.114380066000462e-01, -8.114380066000307e-01, -5.362295326377265e+01, -5.631233757821089e+01, -2.121407581155224e+01, -5.135120793894841e+01, -6.396482452001239e+01, -6.396482452011011e+01, 1.493713089346427e-07, 1.534543791023166e-07, 1.495378104714887e-07, 1.531418528774038e-07, 1.514457234991768e-07, 1.514457234991768e-07, 7.422448094564869e-06, 6.976435697133909e-06, 8.022415695646718e-06, 7.637659004093676e-06, 6.858827569438706e-06, 6.858827569438706e-06, -3.798287524161524e-04, 6.960623476872592e-03, -9.077441106015947e-04, 1.339541816502047e-02, 1.409688708682238e-04, 1.409688708682238e-04, -6.481190557060807e+00, -4.401700219774876e-01, -7.910979243193408e+00, 3.639614645626414e-05, -4.780920325237738e+00, -4.780920325237738e+00, -6.895686776540394e+01, -6.053982886360257e+01, -3.873012561232345e+02, -1.737942989584013e+01, -1.779350643835990e+02, -1.779350643837802e+02, -3.398270749611335e-02, 9.374104398500126e-03, 1.307106640282960e-03, -1.221139180338011e-02, -4.577233063574868e-03, -4.577233063574868e-03, -1.584666558993373e-02, 1.542613183398678e-03, -1.129933358933675e-03, 4.014438882622854e-03, -2.539331286616620e-04, -2.539331286616620e-04, 6.182426844788477e-03, -2.416394788273275e-02, 6.346417513229603e-02, 1.496706092181329e-02, 5.141210582425248e-02, 5.141210582424841e-02, 2.641751216590089e-03, -1.979975127232929e+01, -1.685025673554499e+01, -2.752098575347073e-04, -1.423305123012656e+01, -1.423305123012625e+01, -4.138396884223989e+01, -3.188400009590698e+02, -1.493441391963400e+02, -1.567970275413195e+01, -2.260070544097342e+02, -2.260070544101287e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
