
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86vwn_ft_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.169114668111721e-01, -1.169108508815580e-01, -1.169093137021548e-01, -1.169193755817777e-01, -1.169111318713083e-01, -1.169111318713083e-01, -5.135982446761683e-02, -5.136220169966962e-02, -5.142841036482465e-02, -5.131774096856309e-02, -5.136110852316192e-02, -5.136110852316192e-02, -2.918222172440554e-02, -2.893937447297524e-02, -2.248183148813165e-02, -2.282436678288033e-02, -2.909471669458033e-02, -2.909471669458033e-02, -1.046122469688484e-02, -1.146328722316435e-02, -3.664600022334763e-02, 1.536867234872000e-03, -1.077491077905152e-02, -1.077491077905152e-02, -5.674621974970783e-03, -5.860842707344982e-03, -4.996008580607094e-03, -3.153987360731230e-03, -5.806854479496407e-03, -5.806854479496407e-03, -6.699452960875638e-02, -6.713758498550849e-02, -6.700876869574172e-02, -6.711999367068167e-02, -6.706814904583264e-02, -6.706814904583264e-02, -3.182882485304175e-02, -3.212258682821256e-02, -3.157615239912438e-02, -3.179530576666683e-02, -3.240428613262926e-02, -3.240428613262926e-02, -4.248306949901531e-02, -5.801584377344274e-02, -4.105793218978478e-02, -5.317176998580801e-02, -4.485121858215785e-02, -4.485121858215785e-02, 5.430135010428891e-03, -1.093887584808437e-03, 4.990098943252970e-03, -7.518994823419649e-02, 3.736299427388097e-03, 3.736299427388097e-03, -3.057156534032189e-03, -3.429031507027721e-03, -2.659548402648120e-03, 7.519443030955667e-04, -3.161431050843107e-03, -3.161431050843107e-03, -6.212568318617699e-02, -5.780953147340032e-02, -5.927398606163695e-02, -6.046446775410542e-02, -5.986231667539355e-02, -5.986231667539355e-02, -6.217592574016383e-02, -3.254934629280005e-02, -3.980666960869966e-02, -4.742347291485343e-02, -4.351338290674110e-02, -4.351338290674110e-02, -5.820551178483643e-02, -6.364386281075206e-03, -1.350087123582910e-02, -2.790213685782748e-02, -2.057967314244270e-02, -2.057967314244270e-02, -3.085439977841048e-02, -6.791419846045485e-03, -1.545165701023471e-03, -3.267786547891115e-02, 3.730331740098227e-03, 3.730331740098236e-03, -6.423719421081582e-03, -1.074192202068721e-03, -1.930617582808968e-03, 3.139121629222771e-03, -2.742120364643347e-03, -2.742120364643347e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86vwn_ft_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.834077740178967e-02, -5.834128594191545e-02, -5.834288749203709e-02, -5.833457891737814e-02, -5.834105115968993e-02, -5.834105115968993e-02, -9.423720604086061e-02, -9.424693292328626e-02, -9.451291705053438e-02, -9.404804529347410e-02, -9.424207941666360e-02, -9.424207941666360e-02, -8.501410053566122e-02, -8.482343590109041e-02, -7.836362810360542e-02, -7.879162712689976e-02, -8.494574318103362e-02, -8.494574318103362e-02, -5.178457280083508e-02, -5.271879073111878e-02, -9.205579150623160e-02, -2.944793058767073e-02, -5.208148081060717e-02, -5.208148081060717e-02, -5.960639732793652e-03, -5.977425352215197e-03, 1.401859469332558e-02, -4.038109629109825e-03, -5.898196668193018e-03, -5.898196668193018e-03, -1.189595549085271e-01, -1.193322508720695e-01, -1.189968118919436e-01, -1.192866240806933e-01, -1.191520004340449e-01, -1.191520004340449e-01, -5.592761356786651e-02, -5.724527875150758e-02, -5.377002314393186e-02, -5.480780074273373e-02, -5.961847080855597e-02, -5.961847080855597e-02, -8.545326323812749e-02, -8.148409282209534e-02, -8.408671087553453e-02, -8.089486961926770e-02, -8.617821212897886e-02, -8.617821212897886e-02, -3.847973215185460e-03, -4.069733535975061e-02, -6.206043144389546e-03, -1.177306577780232e-01, -1.890169757722257e-02, -1.890169757722257e-02, -3.916984513636041e-03, -4.359332245639775e-03, -3.307164945130539e-03, 1.251210863041909e-02, -3.994455523622023e-03, -3.994455523622023e-03, -7.544520473687179e-02, -7.912856406263213e-02, -7.798835494795631e-02, -7.698159772460016e-02, -7.750006645267575e-02, -7.750006645267575e-02, -7.373638374571374e-02, -8.151488502457670e-02, -8.284921692474193e-02, -8.199273867602375e-02, -8.269828786830929e-02, -8.269828786830929e-02, -8.340835878005855e-02, -5.176677157698020e-02, -6.141979616180598e-02, -7.218769999918358e-02, -6.770332140608042e-02, -6.770332140608043e-02, -7.880943688363927e-02, 1.217449744713292e-02, 1.645934486013262e-02, -7.032288020735337e-02, -4.226990755100793e-04, -4.226990755100940e-04, -6.589953540499290e-03, -1.406165706763496e-03, -2.505721601425480e-03, -1.591120065139784e-03, -3.458883623302779e-03, -3.458883623302778e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86vwn_ft_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.992744521739536e-10, -1.992739320991757e-10, -1.992678146053751e-10, -1.992763925269632e-10, -1.992742096610583e-10, -1.992742096610583e-10, 6.092430611615682e-07, 6.094714020801406e-07, 6.156043714287794e-07, 6.042398268788741e-07, 6.093439582437567e-07, 6.093439582437567e-07, 1.877002433367459e-03, 1.867134336666615e-03, 1.577561833745171e-03, 1.543388608827954e-03, 1.873493758951359e-03, 1.873493758951359e-03, 3.312019239026271e-01, 3.292270272236544e-01, 1.048159503599642e-03, 5.138434766542394e-01, 3.308679604954268e-01, 3.308679604954268e-01, -6.292411394527701e+01, -6.398441172937080e+01, -7.425504197083510e+00, -1.052601820802774e+01, -6.793937368559348e+01, -6.793937368559348e+01, 1.951052475365900e-07, 1.975291795092265e-07, 1.953453716238503e-07, 1.972300110866643e-07, 1.963549236334343e-07, 1.963549236334343e-07, 1.999826415969805e-06, 2.107229453369016e-06, 1.718835426977134e-06, 1.806164587663954e-06, 2.445589600935070e-06, 2.445589600935070e-06, 5.882525518997633e-03, 6.677898741943136e-03, 7.177760498237788e-03, 8.787530636645705e-03, 5.324468543838941e-03, 5.324468543838941e-03, 4.187654977257135e-01, 1.770328111284807e-01, 5.437472619138219e-01, 5.506625481708996e-05, 6.356264711602123e-01, 6.356264711602123e-01, -1.150673145689656e+01, -1.584788050292391e+01, -1.601273369449113e+02, -1.371027310863910e+00, -3.871737620270066e+01, -3.871737620270053e+01, 1.028908241108206e-02, 8.727776351493518e-03, 9.166082745924337e-03, 9.578324241916947e-03, 9.362298071606098e-03, 9.362298071606098e-03, 1.229663389817428e-02, 8.215562055212983e-03, 8.594804521787744e-03, 9.207726735012531e-03, 8.877932121172513e-03, 8.877932121172518e-03, 5.349007353807234e-03, 9.352238547367889e-02, 6.299497677091935e-02, 3.700720054758785e-02, 4.905683944394466e-02, 4.905683944394468e-02, 1.253156591998809e-02, -8.854422319868736e+00, -3.073872565236283e+00, 5.691189763473604e-02, 6.084319444223016e-01, 6.084319444223035e-01, -4.131121654146599e+01, -7.797488534256973e-01, -8.938892293875089e+00, 8.340404587179296e-01, -8.094294646757282e+01, -8.094294646757228e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
