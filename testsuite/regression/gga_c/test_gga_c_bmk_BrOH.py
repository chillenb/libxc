
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_bmk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.010053618680917e-01, -1.010072817904056e-01, -1.010131691311905e-01, -1.009817890367061e-01, -1.010063967482700e-01, -1.010063967482700e-01, -5.488525230958351e-02, -5.489084372444771e-02, -5.504574867794257e-02, -5.478258333089898e-02, -5.488818719042694e-02, -5.488818719042694e-02, -2.529794074919460e-02, -2.519936697085685e-02, -2.326439984570595e-02, -2.339195060566088e-02, -2.526212608768308e-02, -2.526212608768308e-02, -1.226601230081688e-02, -1.256705425450045e-02, -3.084189575589686e-02, -1.286647660664762e-03, -1.236330417825805e-02, -1.236330417825805e-02, 9.268074246566005e-03, 9.621715124214530e-03, 2.247843332346287e-02, 4.934070149469910e-03, 9.536673898530796e-03, 9.536673898530796e-03, -9.492609927155361e-02, -9.546900072467303e-02, -9.498013025735541e-02, -9.540223718616049e-02, -9.520555438947824e-02, -9.520555438947824e-02, -3.307166029310189e-02, -3.326872397352759e-02, -3.287215588868275e-02, -3.301824032970133e-02, -3.349524821872966e-02, -3.349524821872966e-02, -3.527732867946292e-02, -8.541868354229752e-02, -3.310270145461588e-02, -6.650367589955203e-02, -3.934270651926562e-02, -3.934270651926562e-02, 1.332658958895115e-02, -7.795976503269744e-03, 1.212955625514172e-02, -1.225203652602425e-01, 4.980676960462273e-03, 4.980676960462273e-03, 4.776768076923220e-03, 5.382460719655474e-03, 4.144400973765971e-03, 2.105422352765727e-02, 4.948925311821725e-03, 4.948925311821705e-03, -7.706255484146074e-02, -8.719465494434803e-02, -9.180717891269155e-02, -9.150955209958600e-02, -9.231964185340540e-02, -9.231964185340534e-02, -5.835765739826847e-02, -2.465822907138444e-02, -3.132178694433463e-02, -4.624503478218303e-02, -3.715026293759540e-02, -3.715026293759557e-02, -8.395711873789422e-02, -1.275243384739708e-02, -1.559742565773532e-02, -1.992337354544065e-02, -1.727710280541265e-02, -1.727710280541257e-02, -2.301367623373951e-02, 2.262036217469189e-02, 2.293876185005048e-02, -2.238410945397245e-02, 1.514385456780834e-02, 1.514385456780864e-02, 1.056088925362634e-02, 1.621589600265676e-03, 2.966693008793113e-03, 1.453880381851959e-02, 4.271401819221306e-03, 4.271401819221315e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_bmk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.006934035229024e-01, -3.007003323836352e-01, -3.007215144523505e-01, -3.006082571384276e-01, -3.006971388830197e-01, -3.006971388830197e-01, -1.497410377525585e-01, -1.497661246375198e-01, -1.504591735423692e-01, -1.492754257067435e-01, -1.497541001107731e-01, -1.497541001107731e-01, -4.901860949811054e-02, -4.842206846937484e-02, -3.626137429893241e-02, -3.679874926699568e-02, -4.880239892166612e-02, -4.880239892166612e-02, -2.403891136836170e-02, -2.279496638863612e-02, -7.458307768820596e-02, -4.776702722943175e-02, -2.362500408873308e-02, -2.362500408873308e-02, 1.138458490171175e-02, 1.175256445434591e-02, 1.150470942320992e-02, 6.368600254622853e-03, 1.165259450586916e-02, 1.165259450586916e-02, -2.865226915768326e-01, -2.879661547406957e-01, -2.866669987062794e-01, -2.877894255540230e-01, -2.872674867351006e-01, -2.872674867351006e-01, -5.121869369651726e-02, -5.225075989856833e-02, -4.996762102656521e-02, -5.070518255718801e-02, -5.379649829646199e-02, -5.379649829646199e-02, -1.022742834090038e-01, -1.783249171794680e-01, -9.407443728081974e-02, -1.811532269826957e-01, -1.176452772160437e-01, -1.176452772160437e-01, -3.788430525949670e-02, -4.367466452859899e-02, -3.885700529660759e-02, -2.547805378173688e-01, -4.728250903115332e-02, -4.728250903115332e-02, 6.170884416472181e-03, 6.922458652854125e-03, 5.354632041362351e-03, -6.511894953522753e-03, 6.373058384832895e-03, 6.373058384832771e-03, 1.743376886593826e-02, -1.626156698108700e-01, -1.244409674849905e-01, -7.496648822127000e-02, -1.021608167702897e-01, -1.021608167702899e-01, 5.869132091075170e-02, -5.540095732929472e-02, -8.722993826923651e-02, -1.410484815614219e-01, -1.107589260402386e-01, -1.107589260402410e-01, -1.874023974752800e-01, -3.227195002169191e-02, -2.398459097913476e-02, -3.939838701862399e-02, -2.619396225322499e-02, -2.619396225322356e-02, -4.930755552267359e-02, 1.533446773576630e-02, 3.100555163570653e-03, -5.516504537952425e-02, -2.858901932660103e-02, -2.858901932660208e-02, 1.281039155048195e-02, 2.134789972247910e-03, 3.874614114351485e-03, -2.803500015132800e-02, 5.520443153190370e-03, 5.520443153190237e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_bmk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.899937694379002e-10, 4.900128697722436e-10, 4.900579676581165e-10, 4.897460624266665e-10, 4.900041775355778e-10, 4.900041775355778e-10, 1.443899655548072e-06, 1.444426244174752e-06, 1.458693642790804e-06, 1.432762608286181e-06, 1.444141304829184e-06, 1.444141304829184e-06, 7.054115374501779e-04, 6.843930235091802e-04, 2.912221991957681e-04, 2.956354963216091e-04, 6.977928870949639e-04, 6.977928870949639e-04, 7.619887250115992e-02, 6.382795939261651e-02, 7.772174317657620e-04, 6.953192154633764e-01, 7.215994647118949e-02, 7.215994647118949e-02, 2.344953483914319e+01, 2.333347487362646e+01, 6.439761078139360e+00, 1.823453772342590e+01, 2.427737038089711e+01, 2.427737038089711e+01, 7.457906567812284e-07, 7.544496590234573e-07, 7.466483019081730e-07, 7.533806776116580e-07, 7.502526035791295e-07, 7.502526035791295e-07, 1.736843248743188e-06, 1.809036948024093e-06, 1.589294712254169e-06, 1.639138918375377e-06, 2.011679118738654e-06, 2.011679118738654e-06, 9.134111362017657e-03, 3.114933968064430e-02, 1.007081109144930e-02, 4.113247635804729e-02, 1.019724071729724e-02, 1.019724071729724e-02, 1.718632668669459e+00, 1.461855017528468e-01, 1.920614808115618e+00, 1.733535822780140e-04, 1.284680635957222e+00, 1.284680635957222e+00, 1.941005701591713e+01, 1.919390194480969e+01, 5.640631812276685e+01, 4.978500423402499e+00, 2.860547810043341e+01, 2.860547810044530e+01, -1.761209685664762e-01, 3.689678440917805e-02, 1.586977889003568e-02, -2.735515381919473e-02, -1.340837079932004e-03, -1.340837079932183e-03, -3.727940688797913e-01, 4.762113008170499e-03, 1.099357512220481e-02, 2.667645712955207e-02, 1.695200504639508e-02, 1.695200504639502e-02, 2.545000668261459e-02, 3.500662118444040e-02, 7.924012043252691e-03, 1.438035866291365e-02, 6.771578109156182e-03, 6.771578109156761e-03, 6.253812783095217e-03, 5.723459880700446e+00, 4.763570257949764e+00, 4.771648964216754e-02, 3.513849278258759e+00, 3.513849278258810e+00, 1.717210007447592e+01, 3.617165723635657e+01, 3.003928180885385e+01, 4.373310909136227e+00, 4.240067372844155e+01, 4.240067372830858e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
