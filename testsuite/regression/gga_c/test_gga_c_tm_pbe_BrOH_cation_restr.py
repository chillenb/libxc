
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tm_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.790949228474724e-02, -3.791034097369590e-02, -3.791274761919732e-02, -3.790015021130095e-02, -3.790694477349046e-02, -3.790694477349046e-02, -3.210272863905773e-02, -3.210846380450338e-02, -3.224129415735548e-02, -3.201016473906295e-02, -3.210952824565318e-02, -3.210952824565318e-02, -2.588982967071958e-02, -2.556388860604689e-02, -1.819355599221777e-02, -1.846367816954174e-02, -1.866181214061819e-02, -1.866181214061819e-02, -5.623619142528636e-03, -6.310736433795490e-03, -2.803981363909770e-02, -1.462548492117429e-03, -2.791476974094937e-03, -2.791476974094910e-03, -7.277513106111240e-09, -9.656294371752447e-09, -7.296520429571385e-06, -5.539762634113645e-10, -1.991006495633157e-09, -1.991006495633157e-09, -5.001290390860252e-02, -5.026294190622298e-02, -5.002319034482133e-02, -5.024391480942456e-02, -5.014007207323023e-02, -5.014007207323023e-02, -1.269408755898331e-02, -1.309451785401961e-02, -1.179277514100933e-02, -1.212655546348978e-02, -1.338056469274952e-02, -1.338056469274952e-02, -4.666159622382102e-02, -7.002973691730294e-02, -4.320648702870294e-02, -6.630524998077750e-02, -4.988496075966116e-02, -4.988496075966116e-02, -2.706744142087909e-04, -2.258140392510127e-03, -2.138720489707298e-04, -8.251826838804698e-02, -7.563756921778012e-04, -7.563756921778012e-04, -2.213911095355788e-10, -5.877883520825996e-10, -1.073816610298505e-09, -6.029578893811531e-05, -1.179502263332176e-09, -1.179502261600228e-09, -6.646994169078088e-02, -6.820054383899377e-02, -6.807230102855330e-02, -6.755297425385234e-02, -6.785705268516043e-02, -6.785705268516043e-02, -6.453801457538830e-02, -2.893896123989610e-02, -4.118903114224216e-02, -5.713725958143776e-02, -4.884923226316909e-02, -4.884923226316909e-02, -7.067137167189209e-02, -4.315481960148035e-03, -8.619595205879436e-03, -2.715820620504114e-02, -1.602733526784084e-02, -1.602733526784082e-02, -2.879609661171241e-02, -5.552008487633947e-06, -1.941460313619839e-05, -3.690200397224001e-02, -1.930127629029754e-04, -1.930127629029685e-04, -2.678848503202099e-08, -5.923410271698939e-12, -9.596101942766008e-11, -1.479094077215815e-04, -1.042252884410135e-09, -1.042252882681657e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tm_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.140799231749677e-01, -1.140811863705655e-01, -1.140847664719967e-01, -1.140660151334359e-01, -1.140761297388440e-01, -1.140761297388440e-01, -1.060253640042485e-01, -1.060354612875297e-01, -1.062689047296941e-01, -1.058619981818125e-01, -1.060373060852969e-01, -1.060373060852969e-01, -9.604205185217377e-02, -9.534960386102269e-02, -7.731320220844352e-02, -7.805811719660856e-02, -7.860768290417057e-02, -7.860768290417057e-02, -3.162893066293767e-02, -3.494467080916505e-02, -1.003418140424423e-01, -9.022101795412133e-03, -1.674656772268176e-02, -1.674656772268161e-02, -4.719811086356809e-08, -6.258706610443447e-08, -4.623752319297395e-05, -3.615005350060642e-09, -1.296132903913245e-08, -1.296132904240360e-08, -1.320579079903961e-01, -1.323824336034427e-01, -1.320712714493402e-01, -1.323577628304227e-01, -1.322230592140602e-01, -1.322230592140602e-01, -5.934225002629894e-02, -6.070187836728869e-02, -5.618916940639217e-02, -5.736956322863969e-02, -6.166147851544602e-02, -6.166147851544602e-02, -1.240876136594541e-01, -8.345804210055183e-02, -1.206976307995263e-01, -8.885798679248030e-02, -1.256017223101442e-01, -1.256017223101442e-01, -1.703865225826899e-03, -1.364118418349779e-02, -1.347779838741725e-03, -1.584191473490250e-01, -4.735769975755777e-03, -4.735769975755777e-03, -1.448359636346188e-09, -3.836589182813374e-09, -7.028230329588797e-09, -3.812610774953248e-04, -7.705987902361031e-09, -7.705987898841526e-09, -6.940857418690326e-02, -7.724664221653692e-02, -7.233149757782824e-02, -7.005851482651546e-02, -7.098744954077191e-02, -7.098744954077191e-02, -6.962647085481974e-02, -1.019039556781027e-01, -1.184338909484834e-01, -1.171941534178611e-01, -1.222673029949368e-01, -1.222673029949368e-01, -9.039455691262351e-02, -2.485459472997595e-02, -4.504800402239300e-02, -9.766605060228914e-02, -7.153313616475167e-02, -7.153313616475161e-02, -1.014640400948764e-01, -3.518768358698051e-05, -1.227413993240740e-04, -1.085755970317044e-01, -1.220290979689161e-03, -1.220290979689075e-03, -1.729562925666199e-07, -3.905757432819820e-11, -6.296311464353512e-10, -9.354571388403924e-04, -6.814486067500687e-09, -6.814486065130952e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tm_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.936481946947756e-10, 1.936522998013264e-10, 1.936587857555779e-10, 1.935979639442573e-10, 1.936315017648098e-10, 1.936315017648098e-10, 1.200047155294430e-06, 1.200350871970770e-06, 1.207250439462778e-06, 1.194141203775985e-06, 1.200264938080010e-06, 1.200264938080010e-06, 2.581974454551606e-03, 2.551043867426835e-03, 1.828606723848226e-03, 1.793098586644153e-03, 1.834522247918833e-03, 1.834522247918833e-03, 1.996889295984727e-01, 2.185544411548176e-01, 1.383399064175852e-03, 1.058350977619698e-01, 1.566515600549241e-01, 1.566515600549235e-01, 5.739047347413226e-03, 6.714213447270728e-03, 2.352420274753946e-02, 2.159021452811497e-03, 4.410326704174706e-03, 4.410326703546972e-03, 3.361521954492377e-07, 3.388716389995188e-07, 3.362611204232084e-07, 3.386614821207362e-07, 3.375344325102305e-07, 3.375344325102305e-07, 5.500481407365928e-06, 5.541702053939323e-06, 5.099884869729550e-06, 5.136515469695332e-06, 5.727798772294641e-06, 5.727798772294641e-06, 1.081259148741151e-02, 2.050213348259769e-03, 1.400675035404261e-02, 7.462702856580872e-03, 1.088314460412532e-02, 1.088314460412532e-02, 4.955318531682243e-02, 5.342757057826262e-02, 5.068070063626352e-02, 1.088929436393755e-04, 1.063074566737947e-01, 1.063074566737947e-01, 2.155831164968669e-03, 2.660132443156107e-03, 2.724943614111495e-02, 5.195485850779773e-02, 1.167842776547005e-02, 1.167842776289148e-02, -8.201517130193259e-03, 6.751243227867087e-04, -2.852307911787213e-03, -5.509539004977905e-03, -4.224115479218448e-03, -4.224115479218448e-03, -1.115007918025242e-02, 1.301269742394515e-02, 1.671014176644756e-02, 1.818883503430506e-02, 1.845058088756614e-02, 1.845058088756614e-02, 3.179835694346505e-03, 4.483801035692578e-02, 4.973656452889428e-02, 6.127414279022855e-02, 5.962968556714168e-02, 5.962968556714213e-02, 1.907772602423083e-02, 1.939612597757748e-02, 2.753613963630452e-02, 1.043086120164303e-01, 9.185141698353629e-02, 9.185141698352098e-02, 6.756459423957029e-03, 3.107457791527529e-03, 3.787665930546788e-03, 8.362619116676151e-02, 1.463847237273667e-02, 1.463847237179845e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
