
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_erf_gws_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.048217915064678e-02, -5.048302617747904e-02, -5.048543573830632e-02, -5.047286268867393e-02, -5.047964309315059e-02, -5.047964309315059e-02, -4.013798352794862e-02, -4.014305423919783e-02, -4.026053180831772e-02, -4.005683239267309e-02, -4.014409697804144e-02, -4.014409697804144e-02, -2.622669412981472e-02, -2.603075623687623e-02, -2.125736777138100e-02, -2.147739631416432e-02, -2.160423369452221e-02, -2.160423369452221e-02, -8.881285448464437e-03, -9.229096272600231e-03, -2.855648203154315e-02, -5.346016988639595e-03, -6.736327650674313e-03, -6.736327650674310e-03, -1.365510464072574e-06, -1.592233551446002e-06, -2.580505935951782e-04, -2.630891099559653e-07, -5.219873981139596e-07, -5.219873981139596e-07, -5.740407303033101e-02, -5.761312254809817e-02, -5.741268797166286e-02, -5.759723407668252e-02, -5.751042927676399e-02, -5.751042927676399e-02, -1.981809885799111e-02, -2.026222583626603e-02, -1.882719695639692e-02, -1.920655517690381e-02, -2.056350411931970e-02, -2.056350411931970e-02, -3.440977373012216e-02, -4.618117200435132e-02, -3.207813697106765e-02, -4.175876024830303e-02, -3.582857062103591e-02, -3.582857062103591e-02, -2.707401067259088e-03, -6.792474399660321e-03, -2.353295564096787e-03, -6.807548768514897e-02, -3.886539360148197e-03, -3.886539360148197e-03, -1.208510514413549e-07, -2.457993657680016e-07, -1.099041312841663e-07, -9.766116556700207e-04, -1.921449248845100e-07, -1.921449248845100e-07, -4.734453460326371e-02, -4.437653614173220e-02, -4.539048487226521e-02, -4.625373427198031e-02, -4.581933857295177e-02, -4.581933857295177e-02, -4.738495229068802e-02, -2.534694592187798e-02, -3.066865384755720e-02, -3.680770364551016e-02, -3.363325209864464e-02, -3.363325209864464e-02, -4.678498965870032e-02, -8.915200383766213e-03, -1.215052276041885e-02, -2.132246885841693e-02, -1.625332375554830e-02, -1.625332375554829e-02, -2.452757795421138e-02, -2.269622244902566e-04, -5.433459412940445e-04, -2.353958808073594e-02, -1.780965310654974e-03, -1.780965310654960e-03, -3.836717413853279e-06, -4.695172596591973e-09, -4.342215691748713e-08, -1.535183019544352e-03, -1.522296696280962e-07, -1.522296696276625e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_erf_gws_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.266221149089399e-01, -1.266231580531291e-01, -1.266261346429677e-01, -1.266106495012461e-01, -1.266189993842017e-01, -1.266189993842017e-01, -1.067842077396031e-01, -1.067902859791958e-01, -1.069310243145812e-01, -1.066880736345492e-01, -1.067917147236050e-01, -1.067917147236050e-01, -6.893607356053737e-02, -6.874459919216426e-02, -6.309657071863581e-02, -6.352390266702773e-02, -6.365524399975159e-02, -6.365524399975159e-02, -2.096088641698816e-02, -2.152507724637215e-02, -7.434808637028785e-02, -1.293939739350385e-02, -1.607652153756834e-02, -1.607652153756833e-02, -2.732502604853388e-06, -3.186336271316169e-06, -5.260689413895571e-04, -5.262813728175670e-07, -1.044262201950849e-06, -1.044262201950849e-06, -1.275417023944248e-01, -1.277213969684125e-01, -1.275491406206476e-01, -1.277077863902192e-01, -1.276332292680936e-01, -1.276332292680936e-01, -7.063102078687569e-02, -7.163103263087178e-02, -6.838489486306082e-02, -6.927319523545356e-02, -7.227535176044102e-02, -7.227535176044102e-02, -6.791745683649057e-02, -6.722552567965619e-02, -6.487208224538583e-02, -6.338737012438662e-02, -6.844679662411152e-02, -6.844679662411152e-02, -6.203777799991283e-03, -1.910940239503000e-02, -5.253589390057893e-03, -1.109215187376688e-01, -8.844611986155611e-03, -8.844611986155611e-03, -2.417281606971766e-07, -4.916852030924734e-07, -2.198203175870716e-07, -2.020744505296804e-03, -3.843285064155985e-07, -3.843285064155985e-07, -6.148737614740407e-02, -6.369363789503948e-02, -6.300312845564922e-02, -6.236307086394655e-02, -6.269103090115200e-02, -6.269103090115200e-02, -5.966710518047639e-02, -6.002332461387784e-02, -6.282578283185995e-02, -6.356594600486276e-02, -6.346930840430930e-02, -6.346930840430930e-02, -6.949896023179745e-02, -2.607414655707928e-02, -3.367599615884896e-02, -4.702577597248098e-02, -4.055767471681485e-02, -4.055767471681485e-02, -5.704694446240546e-02, -4.627158964346957e-04, -1.118934376599347e-03, -4.561780005814542e-02, -3.731763530577041e-03, -3.731763530577001e-03, -7.682418036337467e-06, -9.390425181571766e-09, -8.684803572196309e-08, -3.198686393742218e-03, -3.044837273886957e-07, -3.044837273864462e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_erf_gws_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.923604819030149e-10, 1.923639880486676e-10, 1.923688473397466e-10, 1.923169144306194e-10, 1.923456476801965e-10, 1.923456476801965e-10, 1.059137605249108e-06, 1.059355286824134e-06, 1.064277718989776e-06, 1.054763290585956e-06, 1.059274065049598e-06, 1.059274065049598e-06, 1.488664288386354e-03, 1.479997744055603e-03, 1.249978296352552e-03, 1.221393639367293e-03, 1.241723765927436e-03, 1.241723765927436e-03, 7.748949796921627e-02, 7.752395801883701e-02, 8.311527516006991e-04, 8.829394827426333e-02, 8.677956113653440e-02, 8.677956113653430e-02, 3.464016043810613e-04, 3.836848479759310e-04, 1.631181860694284e-02, 1.191612852615332e-04, 1.846253814219354e-04, 1.846253814219354e-04, 2.799052990706138e-07, 2.817450907204840e-07, 2.799787440548651e-07, 2.816027388031137e-07, 2.808411437570648e-07, 2.808411437570648e-07, 5.903160664177819e-06, 5.889907340831642e-06, 5.612193979461805e-06, 5.602570833525209e-06, 6.041598645063039e-06, 6.041598645063039e-06, 4.033202165751486e-03, 4.372754281228255e-03, 5.126835523498894e-03, 6.345564687818056e-03, 3.987034441526142e-03, 3.987034441526142e-03, 8.262325160059679e-02, 5.611176465417809e-02, 7.904519219680463e-02, 5.412497453660772e-05, 9.353878859010059e-02, 9.353878859010059e-02, 7.316823895317515e-05, 1.141441818042789e-04, 6.898136234307188e-05, 4.629913439807148e-02, 9.773481930020739e-05, 9.773481930020739e-05, 6.368565660635687e-03, 5.907456391770224e-03, 6.062320623524288e-03, 6.196497697676302e-03, 6.128754098443269e-03, 6.128754098443269e-03, 7.166455749614026e-03, 5.648834576000396e-03, 6.022672170744574e-03, 6.451333462878527e-03, 6.242580385335854e-03, 6.242580385335854e-03, 3.628611823720812e-03, 3.666489586828872e-02, 2.796477791526888e-02, 1.931837245323637e-02, 2.380361119861175e-02, 2.380361119861176e-02, 7.717358076072427e-03, 1.471853579501794e-02, 2.970188301879080e-02, 2.520662066005522e-02, 6.932631218539909e-02, 6.932631218539669e-02, 6.959404165568031e-04, 1.043242089329924e-05, 3.904711297361189e-05, 6.319596578193823e-02, 8.447361870928240e-05, 8.447361870861351e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
