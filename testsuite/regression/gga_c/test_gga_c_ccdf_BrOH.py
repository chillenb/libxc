
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_ccdf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ccdf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.755494754105778e-02, -2.755569739638786e-02, -2.755795881635382e-02, -2.754570609980089e-02, -2.755535204448323e-02, -2.755535204448323e-02, -2.213226978832869e-02, -2.213330912052510e-02, -2.216233648182741e-02, -2.211289395191350e-02, -2.213280469245396e-02, -2.213280469245396e-02, -2.077628112758321e-02, -2.077508012731979e-02, -2.075486871907365e-02, -2.075936219508168e-02, -2.077583803817479e-02, -2.077583803817479e-02, -1.939404523364427e-02, -1.941732020199522e-02, -2.098677278653870e-02, -1.874542298984616e-02, -1.940108574458095e-02, -1.940108574458095e-02, -7.629136917122342e-03, -7.857863784242573e-03, -1.500602391976242e-02, -4.496197030149283e-03, -7.805929086180607e-03, -7.805929086180607e-03, -3.814200217624122e-02, -3.837149162592641e-02, -3.816506236689304e-02, -3.834353796405407e-02, -3.826078501423568e-02, -3.826078501423568e-02, -2.114306602560988e-02, -2.114450744932889e-02, -2.114243376673763e-02, -2.114354959784672e-02, -2.114492317136303e-02, -2.114492317136303e-02, -2.325867770399788e-02, -4.519667514265934e-02, -2.234126308202882e-02, -4.392889581425140e-02, -2.619646752103182e-02, -2.619646752103182e-02, -1.795687576882225e-02, -1.940663840149811e-02, -1.791998274557801e-02, -4.606190732231621e-02, -1.835027575246907e-02, -1.835027575246907e-02, -4.369934849901557e-03, -4.852201920337907e-03, -3.856388202643299e-03, -1.638035010751622e-02, -4.512257893007713e-03, -4.512257893007713e-03, -4.539934359819709e-02, -4.521905689506969e-02, -4.532505554563934e-02, -4.536934514896887e-02, -4.535026413730989e-02, -4.535026413730989e-02, -4.536085287168419e-02, -2.063281995220049e-02, -2.175930291677350e-02, -3.513136999615485e-02, -2.560093285967512e-02, -2.560093285967513e-02, -4.515605049693974e-02, -1.977389732425361e-02, -2.000599943739676e-02, -2.028908777711644e-02, -2.015179729295983e-02, -2.015179729295983e-02, -2.053422920073727e-02, -1.465918304600216e-02, -1.596542914333363e-02, -2.036787477705257e-02, -1.731960973510687e-02, -1.731960973510687e-02, -8.423372386810384e-03, -1.591182014906432e-03, -2.832658982993400e-03, -1.716374259038127e-02, -3.960544376906061e-03, -3.960544376906057e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_ccdf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ccdf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.049479566932604e-01, -1.049539954129985e-01, -1.049722015691336e-01, -1.048734667795981e-01, -1.049512143372174e-01, -1.049512143372174e-01, -3.901772520291767e-02, -3.903604377604419e-02, -3.954630701166752e-02, -3.867529225238138e-02, -3.902714546712408e-02, -3.902714546712408e-02, -2.111385470989018e-02, -2.109718259792122e-02, -2.095093515397455e-02, -2.095518345057463e-02, -2.110765142279057e-02, -2.110765142279057e-02, -1.998376807931844e-02, -2.000069234994181e-02, -2.385866591108448e-02, -1.950533576839642e-02, -1.998888927928562e-02, -1.998888927928562e-02, -9.263067463629900e-03, -9.512707654435707e-03, -1.649081364002258e-02, -5.679168206598253e-03, -9.456167792381603e-03, -9.456167792381603e-03, -1.174585660364731e-01, -1.162917610870212e-01, -1.173437588890094e-01, -1.164367664733619e-01, -1.168613567108430e-01, -1.168613567108430e-01, -2.121560173572703e-02, -2.121858948458587e-02, -2.121304294819051e-02, -2.121489597016798e-02, -2.122298692317409e-02, -2.122298692317409e-02, -6.451803772703399e-02, -4.813690816685630e-02, -5.153763019184523e-02, -5.945778701162421e-02, -9.736612425294217e-02, -9.736612425294217e-02, -1.890599212544691e-02, -1.999292655615437e-02, -1.887747553208738e-02, -4.884529375914969e-02, -1.920742800834573e-02, -1.920742800834573e-02, -5.528304030881885e-03, -6.101858404096972e-03, -4.909561457402316e-03, -1.764949818583999e-02, -5.698322800760135e-03, -5.698322800760135e-03, -4.590876409489675e-02, -4.722207666422813e-02, -4.637622800881653e-02, -4.607284420590426e-02, -4.619762412569433e-02, -4.619762412569433e-02, -4.584899783614606e-02, -2.184903980289622e-02, -4.259176754260049e-02, -1.218750807465088e-01, -9.239760075648373e-02, -9.239760075648386e-02, -4.910670513289388e-02, -2.025784940497455e-02, -2.042311846625799e-02, -2.080004697608512e-02, -2.052844638961360e-02, -2.052844638961360e-02, -2.131963427280941e-02, -1.618907017881702e-02, -1.730589908090622e-02, -2.384165236845093e-02, -1.840743908949784e-02, -1.840743908949784e-02, -1.012290728499545e-02, -2.082029545445017e-03, -3.651548182872386e-03, -1.828356843514717e-02, -5.035719216918848e-03, -5.035719216918842e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_ccdf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ccdf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.959404914207200e-10, 1.959565670643696e-10, 1.959998437325874e-10, 1.957371407218023e-10, 1.959492069204795e-10, 1.959492069204795e-10, 2.696283983232614e-07, 2.699464608386964e-07, 2.787700231116245e-07, 2.634523293222003e-07, 2.697862016045954e-07, 2.697862016045954e-07, 5.186221598006922e-06, 4.623939796623309e-06, 1.721415193379251e-07, 2.003558523330275e-07, 4.976583130698756e-06, 4.976583130698756e-06, 2.646868812611015e-09, 7.466930836692194e-09, 5.244773630238669e-05, 1.516077804164339e-17, 3.677107917045404e-09, 3.677107917045404e-09, 2.656225581568685e-247, 1.704757005938567e-235, 2.218715734427516e-65, 0.000000000000000e+00, 1.038599018855300e-235, 1.038599018855300e-235, 3.211244300220911e-07, 3.176508044576543e-07, 3.207846956915818e-07, 3.180852893950268e-07, 3.193588376088614e-07, 3.193588376088614e-07, 8.265567053867416e-10, 1.043925608448599e-09, 5.728088120275464e-10, 6.897272579515823e-10, 1.550225067197622e-09, 1.550225067197622e-09, 5.978692883205510e-03, 9.499802305550899e-04, 5.127737776214855e-03, 5.829338192291015e-03, 9.836857949334461e-03, 9.836857949334461e-03, 3.494501049222278e-28, 3.122285151717741e-14, 3.225322136174720e-27, 3.798732418957919e-06, 1.470876622078950e-21, 1.470876622078950e-21, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.637272803362873e-44, 0.000000000000000e+00, 0.000000000000000e+00, 1.025664376305100e-04, 8.869357223165336e-04, 4.487841037029631e-04, 2.494692112250151e-04, 3.371731195073323e-04, 3.371731195073322e-04, 7.576502980245691e-05, 1.679049983047566e-04, 4.353510843754354e-03, 2.587943196313594e-02, 1.634973546096141e-02, 1.634973546096144e-02, 9.670511769528590e-04, 3.292222594077692e-11, 1.889257309925207e-08, 1.506661827864947e-04, 2.478040180224585e-06, 2.478040180224586e-06, 1.393344751041469e-04, 5.051432221341691e-75, 1.237307270055862e-52, 5.014782207261990e-03, 3.529168080422016e-31, 3.529168080422117e-31, 5.596093815825987e-226, 0.000000000000000e+00, 0.000000000000000e+00, 6.990871452520237e-31, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
