
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86vwn_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.168746173532904e-01, -1.168740013248504e-01, -1.168724638720183e-01, -1.168825273677557e-01, -1.168742823599083e-01, -1.168742823599083e-01, -5.133810262825154e-02, -5.134048246300952e-02, -5.140676205901536e-02, -5.129596712945271e-02, -5.133938795436493e-02, -5.133938795436493e-02, -2.917397867082388e-02, -2.893103991969681e-02, -2.247077934308594e-02, -2.281339966820485e-02, -2.908644079290006e-02, -2.908644079290006e-02, -1.045533059503356e-02, -1.145770731739348e-02, -3.663901048281447e-02, 1.547182136893092e-03, -1.076911734117402e-02, -1.076911734117402e-02, -5.674287482822238e-03, -5.860448667799792e-03, -4.986951165000709e-03, -3.153980834192100e-03, -5.806456266789708e-03, -5.806456266789708e-03, -6.697653699726694e-02, -6.711970493282488e-02, -6.699078730579602e-02, -6.710209980340819e-02, -6.705021450754471e-02, -6.705021450754471e-02, -3.180175994943711e-02, -3.209577684694233e-02, -3.154861717938534e-02, -3.176796841201346e-02, -3.237801757394551e-02, -3.237801757394551e-02, -4.248010618645470e-02, -5.801527351049665e-02, -4.105491751888515e-02, -5.317086310298343e-02, -4.484859738834109e-02, -4.484859738834109e-02, 5.443643758001377e-03, -1.083361984920927e-03, 5.002946568061083e-03, -7.518749828045466e-02, 3.747754612304287e-03, 3.747754612304287e-03, -3.057150319727473e-03, -3.429018581620411e-03, -2.659515168370502e-03, 7.639029543351925e-04, -3.161411213852440e-03, -3.161411213852440e-03, -6.212558862189832e-02, -5.780908849214181e-02, -5.927368220553614e-02, -6.046426180942347e-02, -5.986206298104066e-02, -5.986206298104066e-02, -6.217587539740791e-02, -3.254458267359518e-02, -3.980361383783505e-02, -4.742183402980140e-02, -4.351106644520462e-02, -4.351106644520462e-02, -5.820482711841146e-02, -6.355131097547703e-03, -1.349363222320061e-02, -2.789824508298138e-02, -2.057425970050557e-02, -2.057425970050557e-02, -3.084980553065996e-02, -6.783468590881751e-03, -1.533653824104219e-03, -3.267545966318731e-02, 3.742425853360704e-03, 3.742425853360713e-03, -6.423308002803223e-03, -1.074192192821345e-03, -1.930616772349252e-03, 3.150508361476006e-03, -2.742099259427190e-03, -2.742099259427189e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86vwn_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.829410966131534e-02, -5.829461969961650e-02, -5.829622542791248e-02, -5.828789237289128e-02, -5.829438423024313e-02, -5.829438423024313e-02, -9.425292320863368e-02, -9.426265133855387e-02, -9.452866911737012e-02, -9.406373733516409e-02, -9.425779719318564e-02, -9.425779719318564e-02, -8.502588079401580e-02, -8.483529914676864e-02, -7.837755386321589e-02, -7.880550488853884e-02, -8.495755333209709e-02, -8.495755333209709e-02, -5.179308023051540e-02, -5.272701019127256e-02, -9.206638975272353e-02, -2.945781092497390e-02, -5.208989752523097e-02, -5.208989752523097e-02, -5.958221596668350e-03, -5.974680141501158e-03, 1.403302319803970e-02, -4.038023134268215e-03, -5.895435672155319e-03, -5.895435672155319e-03, -1.189761544063684e-01, -1.193488536212281e-01, -1.190134117774064e-01, -1.193032265069206e-01, -1.191686017865774e-01, -1.191686017865774e-01, -5.593855276774301e-02, -5.725655602479771e-02, -5.378031054893150e-02, -5.481837051632520e-02, -5.963041687206184e-02, -5.963041687206184e-02, -8.545863828247426e-02, -8.148531316310333e-02, -8.409215877136775e-02, -8.089674665727993e-02, -8.618305815475388e-02, -8.618305815475388e-02, -3.852983767535134e-03, -4.070878024733909e-02, -6.211615336604504e-03, -1.177352709273697e-01, -1.891021637580913e-02, -1.891021637580913e-02, -3.916901785448022e-03, -4.359173937327953e-03, -3.306810892955180e-03, 1.251754801720356e-02, -3.994226650605582e-03, -3.994226650605582e-03, -7.544542329401638e-02, -7.912952588637075e-02, -7.798902754762525e-02, -7.698206131694113e-02, -7.750063261089865e-02, -7.750063261089866e-02, -7.373650197012560e-02, -8.152276309665266e-02, -8.285472171756698e-02, -8.199594753193944e-02, -8.270263601905377e-02, -8.270263601905375e-02, -8.340980705069825e-02, -5.177826824085802e-02, -6.143004462732731e-02, -7.219432847061709e-02, -6.771180404554857e-02, -6.771180404554855e-02, -7.881707010384868e-02, 1.219121837013048e-02, 1.647005275346647e-02, -7.032731873336291e-02, -4.256128002549799e-04, -4.256128002549963e-04, -6.587061011135495e-03, -1.406165500062720e-03, -2.505708489094944e-03, -1.594168522470649e-03, -3.458643361684678e-03, -3.458643361684677e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86vwn_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.993032110059301e-10, -1.993026867001828e-10, -1.992965567392035e-10, -1.993052038014234e-10, -1.993029662082164e-10, -1.993029662082164e-10, 6.099274878851014e-07, 6.101559094246095e-07, 6.162909598760024e-07, 6.049221373761544e-07, 6.100284124887595e-07, 6.100284124887595e-07, 1.877783214473678e-03, 1.867916843389392e-03, 1.578376788865713e-03, 1.544180566575760e-03, 1.874275179444482e-03, 1.874275179444482e-03, 3.313319823927607e-01, 3.293515072907422e-01, 1.048548616480348e-03, 5.142039078050983e-01, 3.309963406398496e-01, 3.309963406398496e-01, -6.302511268878063e+01, -6.408330805643145e+01, -7.426273172739708e+00, -1.055660829667320e+01, -6.804398226511296e+01, -6.804398226511296e+01, 1.952652640297647e-07, 1.976897954156577e-07, 1.955054473046886e-07, 1.973905528790973e-07, 1.965152505219781e-07, 1.965152505219781e-07, 2.004848685064814e-06, 2.112200352576245e-06, 1.723747203542573e-06, 1.811039238263583e-06, 2.450715805008885e-06, 2.450715805008885e-06, 5.883917284359566e-03, 6.678672367406476e-03, 7.179477032297614e-03, 8.788762300095209e-03, 5.325654574270472e-03, 5.325654574270472e-03, 4.195113661403655e-01, 1.771413142779985e-01, 5.445784538402629e-01, 5.507788012729626e-05, 6.362100447078752e-01, 6.362100447078752e-01, -1.154033528482600e+01, -1.589057019435441e+01, -1.605079900108341e+02, -1.369303718411142e+00, -3.881619904262246e+01, -3.881619904262241e+01, 1.028968873374068e-02, 8.728693689172283e-03, 9.166915901716656e-03, 9.579075989841418e-03, 9.363092759129110e-03, 9.363092759129110e-03, 1.229721211306534e-02, 8.218059195660729e-03, 8.596878341069392e-03, 9.209389734987271e-03, 8.879808216888510e-03, 8.879808216888514e-03, 5.349672911482849e-03, 9.357030686800820e-02, 6.302109622006870e-02, 3.701757065748817e-02, 4.907353515176015e-02, 4.907353515176018e-02, 1.253532525883797e-02, -8.857084366846893e+00, -3.072880010213635e+00, 5.692452659719757e-02, 6.099020899294945e-01, 6.099020899294981e-01, -4.137511059629295e+01, -7.835000918954841e-01, -8.970444402130468e+00, 8.358483290309927e-01, -8.114754248091408e+01, -8.114754248091366e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
