
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbeint_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.813844524750496e-02, -5.813930585545961e-02, -5.814175327522388e-02, -5.812897857495038e-02, -5.813586785952617e-02, -5.813586785952617e-02, -4.771139327005637e-02, -4.771658715401253e-02, -4.783690003887225e-02, -4.762828835057875e-02, -4.771765306892108e-02, -4.771765306892108e-02, -3.207321822011090e-02, -3.183875719491444e-02, -2.611672944262602e-02, -2.639194753300306e-02, -2.641647431084460e-02, -2.641647431084460e-02, -8.258600152426725e-03, -8.938237480186722e-03, -3.477238707844940e-02, -2.853125319856199e-03, -3.039795243475103e-03, -3.039795243475103e-03, -8.851727479469718e-09, -1.181013837940614e-08, -1.327718608251996e-05, -6.357486620478525e-10, -1.641566017666907e-09, -1.641566017666907e-09, -6.511881307813083e-02, -6.532554522784756e-02, -6.512733420084491e-02, -6.530983596026280e-02, -6.522399947772924e-02, -6.522399947772924e-02, -2.581248990043403e-02, -2.631870559490734e-02, -2.468248686722425e-02, -2.511860758482130e-02, -2.665745342202981e-02, -2.665745342202981e-02, -4.269266324029135e-02, -5.787298949321960e-02, -4.003765146565028e-02, -5.348124786885238e-02, -4.436003272218551e-02, -4.436003272218548e-02, -6.010888770148839e-04, -4.450299675158594e-03, -4.686244833887951e-04, -7.551877302177978e-02, -1.536981357712523e-03, -1.536981357712523e-03, -2.480690581337791e-10, -6.731307013521648e-10, -1.196133553966680e-09, -1.235385362758495e-04, -1.173252018541598e-09, -1.173252022878407e-09, -6.120193249538985e-02, -5.675747003851329e-02, -5.825541181700876e-02, -5.954714938289393e-02, -5.889522310185943e-02, -5.889522310185943e-02, -6.199179116454891e-02, -3.135269138183538e-02, -3.849782808533783e-02, -4.688334645852473e-02, -4.252707364131804e-02, -4.252707364131804e-02, -5.797465933730678e-02, -7.675052463554648e-03, -1.276322768633719e-02, -2.717370849573624e-02, -1.930010541689711e-02, -1.930010541689712e-02, -3.051128700472767e-02, -1.005306970458704e-05, -3.826986458389109e-05, -3.181661547813858e-02, -3.979126156601343e-04, -3.979126156601377e-04, -3.452975313664175e-08, -6.295616046710084e-12, -1.047379635278622e-10, -3.058395193521468e-04, -1.055691095088948e-09, -1.055691090968980e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbeint_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.354872329209819e-01, -1.354873938085684e-01, -1.354881380228868e-01, -1.354884093249514e-01, -1.354911664535954e-01, -1.354908664974075e-01, -1.354762852216994e-01, -1.354772367879467e-01, -1.354836512579286e-01, -1.354852435971387e-01, -1.354836512579286e-01, -1.354852435971387e-01, -1.160269944755714e-01, -1.160285961440281e-01, -1.160320602826710e-01, -1.160338893761146e-01, -1.161541453769954e-01, -1.161517237134469e-01, -1.159469870452207e-01, -1.159453418370126e-01, -1.160561927351492e-01, -1.160122734278983e-01, -1.160561927351492e-01, -1.160122734278983e-01, -8.329275733745684e-02, -8.294079974453630e-02, -8.311847708024102e-02, -8.268834669401583e-02, -7.628772821651725e-02, -7.682096447621321e-02, -7.706858348387061e-02, -7.690039480294961e-02, -7.456137244976795e-02, -7.965335817639083e-02, -7.456137244976795e-02, -7.965335817639083e-02, -3.452714653311363e-02, -3.332345089404709e-02, -3.657117534936648e-02, -3.511206618268614e-02, -8.912233875026274e-02, -8.600152451340314e-02, -1.458015326851992e-02, -1.440749150706338e-02, -1.348794756409334e-02, -2.343349146232713e-02, -1.348794756409338e-02, -2.343349146232715e-02, -5.897973847951358e-08, -5.675495895180871e-08, -7.889926198286312e-08, -7.551801725854917e-08, -8.597224244339112e-05, -8.241599373198544e-05, -4.146740211596533e-09, -4.188843404490444e-09, -1.013392324011398e-08, -1.390752273853222e-08, -1.013392324054766e-08, -1.390752273853222e-08, -1.345287097865569e-01, -1.345642415297542e-01, -1.346817558879040e-01, -1.347183173338836e-01, -1.345347389957618e-01, -1.345709357770483e-01, -1.346705457946367e-01, -1.347062777305402e-01, -1.346065834456643e-01, -1.346428130210123e-01, -1.346065834456643e-01, -1.346428130210123e-01, -8.355383394844189e-02, -8.355759632158803e-02, -8.447637722501540e-02, -8.449694764757820e-02, -8.152538263554714e-02, -8.140117092916500e-02, -8.236420304251135e-02, -8.223304270506340e-02, -8.490984524380747e-02, -8.524492844727063e-02, -8.490984524380747e-02, -8.524492844727063e-02, -8.484161134482025e-02, -8.512180099591837e-02, -8.214692165651474e-02, -8.209010636024842e-02, -8.465581244193028e-02, -8.100502136620125e-02, -8.210209721293447e-02, -7.822856740445448e-02, -8.266903410828738e-02, -8.820124444501487e-02, -8.266903410828737e-02, -8.820124444501483e-02, -3.500818008348832e-03, -3.473174954626870e-03, -2.133332436076178e-02, -2.124000074445453e-02, -2.814845776559454e-03, -2.695029802390380e-03, -1.172071431288670e-01, -1.172800682567439e-01, -8.568175467083182e-03, -8.157482668352652e-03, -8.568175467083182e-03, -8.157482668352652e-03, -1.648385841557074e-09, -1.611472902272008e-09, -4.433264265101065e-09, -4.393484304525484e-09, -7.997736666820770e-09, -7.733055506801936e-09, -7.588602371747593e-04, -7.551009266432778e-04, -8.752415631824422e-09, -7.280986415939949e-09, -8.752415640741985e-09, -7.280986418785980e-09, -7.543211197125083e-02, -7.494430555023898e-02, -7.953383317613195e-02, -7.905657864950032e-02, -7.829693194775683e-02, -7.781431896702029e-02, -7.711077935586910e-02, -7.662810496833089e-02, -7.772305256620388e-02, -7.724043837789361e-02, -7.772305256620388e-02, -7.724043837789361e-02, -7.300385632188187e-02, -7.258685969182636e-02, -7.788084277491836e-02, -7.750722866291219e-02, -8.156151711205459e-02, -8.112595492004711e-02, -8.199157633641403e-02, -8.160442703001614e-02, -8.223089720740014e-02, -8.184395820277601e-02, -8.223089720740014e-02, -8.184395820277601e-02, -8.420305750034600e-02, -8.399763190674020e-02, -3.300368761404936e-02, -3.283124844845730e-02, -4.725375563853501e-02, -4.680576391463502e-02, -6.925873231303326e-02, -6.883385601697933e-02, -5.954471312484375e-02, -5.956622058473571e-02, -5.954471312484374e-02, -5.956622058473572e-02, -7.602546148972843e-02, -7.544555883904544e-02, -6.395553736495113e-05, -6.361979567982747e-05, -2.426800290617870e-04, -2.364124637910082e-04, -7.069969255615538e-02, -6.943709816326089e-02, -2.406891710469960e-03, -2.301079896532677e-03, -2.406891710469943e-03, -2.301079896532691e-03, -2.273810859093759e-07, -2.221174805765311e-07, -4.159983299006581e-11, -4.154761900606130e-11, -7.024413261268623e-10, -6.780362474744392e-10, -1.837385305305482e-03, -1.813026128824914e-03, -7.750457741022873e-09, -6.572612226975433e-09, -7.750457733799376e-09, -6.572612222137180e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbeint_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.955365005846136e-10, 3.910730011692272e-10, 1.955365005846136e-10, 1.955398085112910e-10, 3.910796170225820e-10, 1.955398085112910e-10, 1.955440257662509e-10, 3.910880515325018e-10, 1.955440257662509e-10, 1.954950367963791e-10, 3.909900735927581e-10, 1.954950367963791e-10, 1.955221935117903e-10, 3.910443870235806e-10, 1.955221935117903e-10, 1.955221935117903e-10, 3.910443870235806e-10, 1.955221935117903e-10, 1.084799072629435e-06, 2.169598145258871e-06, 1.084799072629435e-06, 1.085005226487713e-06, 2.170010452975426e-06, 1.085005226487713e-06, 1.089656985679447e-06, 2.179313971358895e-06, 1.089656985679447e-06, 1.080588195367473e-06, 2.161176390734945e-06, 1.080588195367473e-06, 1.084918641605753e-06, 2.169837283211506e-06, 1.084918641605753e-06, 1.084918641605753e-06, 2.169837283211506e-06, 1.084918641605753e-06, 1.779307944138859e-03, 3.558615888277719e-03, 1.779307944138859e-03, 1.768752740527472e-03, 3.537505481054945e-03, 1.768752740527472e-03, 1.492870413008627e-03, 2.985740826017254e-03, 1.492870413008627e-03, 1.456489188803019e-03, 2.912978377606038e-03, 1.456489188803019e-03, 1.476546914092376e-03, 2.953093828184752e-03, 1.476546914092376e-03, 1.476546914092376e-03, 2.953093828184752e-03, 1.476546914092376e-03, 1.877681238905127e-01, 3.755362477810255e-01, 1.877681238905127e-01, 1.952860453509259e-01, 3.905720907018519e-01, 1.952860453509259e-01, 9.562690364469483e-04, 1.912538072893896e-03, 9.562690364469483e-04, 1.568916981814917e-01, 3.137833963629834e-01, 1.568916981814917e-01, 1.270600169278122e-01, 2.541200338556246e-01, 1.270600169278122e-01, 1.270600169278127e-01, 2.541200338556253e-01, 1.270600169278127e-01, 6.970418583684089e-03, 1.394083716767340e-02, 6.970418583684089e-03, 8.198475701130373e-03, 1.639695140223212e-02, 8.198475701130373e-03, 4.171871617709051e-02, 8.343743235418925e-02, 4.171871617709051e-02, 2.476480778708084e-03, 4.952961555121697e-03, 2.476480778708084e-03, 3.633305996282370e-03, 7.266611993229210e-03, 3.633305996282370e-03, 3.633305995468526e-03, 7.266611991447444e-03, 3.633305995468526e-03, 2.768029470386359e-07, 5.536058940772718e-07, 2.768029470386359e-07, 2.785210904948458e-07, 5.570421809896916e-07, 2.785210904948458e-07, 2.768714298548249e-07, 5.537428597096498e-07, 2.768714298548249e-07, 2.783880527401519e-07, 5.567761054803036e-07, 2.783880527401519e-07, 2.776770158445531e-07, 5.553540316891062e-07, 2.776770158445531e-07, 2.776770158445531e-07, 5.553540316891062e-07, 2.776770158445531e-07, 6.686541188454034e-06, 1.337308237690807e-05, 6.686541188454034e-06, 6.648304246795188e-06, 1.329660849359038e-05, 6.648304246795188e-06, 6.408882021810799e-06, 1.281776404362160e-05, 6.408882021810799e-06, 6.377751544308554e-06, 1.275550308861711e-05, 6.377751544308554e-06, 6.803534760616398e-06, 1.360706952123280e-05, 6.803534760616398e-06, 6.803534760616398e-06, 1.360706952123280e-05, 6.803534760616398e-06, 5.370839250455402e-03, 1.074167850091081e-02, 5.370839250455402e-03, 6.190852613094352e-03, 1.238170522618870e-02, 6.190852613094352e-03, 7.046709315567600e-03, 1.409341863113520e-02, 7.046709315567600e-03, 9.576337008920063e-03, 1.915267401784013e-02, 9.576337008920063e-03, 5.313423688669489e-03, 1.062684737733898e-02, 5.313423688669489e-03, 5.313423688669491e-03, 1.062684737733898e-02, 5.313423688669491e-03, 9.656641292638023e-02, 1.931328258527610e-01, 9.656641292638023e-02, 7.605226953385301e-02, 1.521045390677060e-01, 7.605226953385301e-02, 9.874857583565101e-02, 1.974971516713018e-01, 9.874857583565101e-02, 5.321882407557631e-05, 1.064376481511526e-04, 5.321882407557631e-05, 1.755004733124453e-01, 3.510009466248905e-01, 1.755004733124453e-01, 1.755004733124453e-01, 3.510009466248905e-01, 1.755004733124453e-01, 2.414762870979863e-03, 4.829525739717181e-03, 2.414762870979863e-03, 3.044785834660105e-03, 6.089571670993928e-03, 3.044785834660105e-03, 3.032957932134007e-02, 6.065915863432825e-02, 3.032957932134007e-02, 9.957628411531118e-02, 1.991525682306227e-01, 9.957628411531118e-02, 1.160788984698113e-02, 2.321577969903203e-02, 1.160788984698113e-02, 1.160788984669153e-02, 2.321577969244254e-02, 1.160788984669153e-02, 1.003329164642730e-02, 2.006658329285461e-02, 1.003329164642730e-02, 8.907338799000564e-03, 1.781467759800113e-02, 8.907338799000564e-03, 9.271861710143704e-03, 1.854372342028741e-02, 9.271861710143704e-03, 9.598505637211641e-03, 1.919701127442328e-02, 9.598505637211641e-03, 9.432277540062924e-03, 1.886455508012585e-02, 9.432277540062924e-03, 9.432277540062924e-03, 1.886455508012585e-02, 9.432277540062924e-03, 1.173486192130148e-02, 2.346972384260296e-02, 1.173486192130148e-02, 7.721700881902358e-03, 1.544340176380472e-02, 7.721700881902358e-03, 8.481408614906042e-03, 1.696281722981208e-02, 8.481408614906042e-03, 9.488062644573702e-03, 1.897612528914740e-02, 9.488062644573702e-03, 8.967965580287831e-03, 1.793593116057567e-02, 8.967965580287831e-03, 8.967965580287831e-03, 1.793593116057567e-02, 8.967965580287831e-03, 4.952309153762377e-03, 9.904618307524754e-03, 4.952309153762377e-03, 5.288719956573374e-02, 1.057743991314675e-01, 5.288719956573374e-02, 4.462467820649971e-02, 8.924935641299944e-02, 4.462467820649971e-02, 3.378884668688708e-02, 6.757769337377416e-02, 3.378884668688708e-02, 4.081853978321046e-02, 8.163707956642091e-02, 4.081853978321046e-02, 4.081853978321048e-02, 8.163707956642095e-02, 4.081853978321048e-02, 1.106958682006554e-02, 2.213917364013108e-02, 1.106958682006554e-02, 3.433200450561024e-02, 6.866400901121213e-02, 3.433200450561024e-02, 5.217175050738718e-02, 1.043435010147752e-01, 5.217175050738718e-02, 5.074327768478428e-02, 1.014865553695685e-01, 5.074327768478428e-02, 1.690280780296012e-01, 3.380561560592040e-01, 1.690280780296012e-01, 1.690280780296022e-01, 3.380561560592035e-01, 1.690280780296022e-01, 8.687835677885891e-03, 1.737567135607801e-02, 8.687835677885891e-03, 3.302410546435663e-03, 6.604821135914521e-03, 3.302410546435663e-03, 4.132989401617288e-03, 8.265978807604456e-03, 4.132989401617288e-03, 1.563365223647593e-01, 3.126730447295191e-01, 1.563365223647593e-01, 1.481644159464460e-02, 2.963288318679947e-02, 1.481644159464460e-02, 1.481644159289188e-02, 2.963288318747713e-02, 1.481644159289188e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
