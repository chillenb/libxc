
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sogga11_x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.770150138478103e-01, -5.770073357464962e-01, -5.769861842216805e-01, -5.771116189274762e-01, -5.770108551924922e-01, -5.770108551924922e-01, -1.216845040007355e-01, -1.216717252070642e-01, -1.213275053223311e-01, -1.219438009085545e-01, -1.216783134209860e-01, -1.216783134209860e-01, -6.482728531996949e-02, -6.488814128729362e-02, -6.626313518945043e-02, -6.633473555436468e-02, -6.484946741418458e-02, -6.484946741418458e-02, -3.884949928004586e-02, -3.879078994607358e-02, -6.650516492277479e-02, -6.741301400384603e-02, -3.881623573849746e-02, -3.881623573849746e-02, -2.157857992431561e-02, -2.244757236590835e-02, -7.048186541396279e-02, -1.146443866661904e-02, -2.225930256349255e-02, -2.225930256349255e-02, -1.211259620010995e-01, -1.210389649517488e-01, -1.211172033568373e-01, -1.210495387106861e-01, -1.210807345713261e-01, -1.210807345713261e-01, -1.804666894716833e-01, -1.765558616689875e-01, -1.876613348302108e-01, -1.845186280986308e-01, -1.687706731327752e-01, -1.687706731327752e-01, -5.198307079317473e-02, -5.832891748606601e-02, -5.115810015124337e-02, -5.429838645517249e-02, -5.230850811098405e-02, -5.230850811098405e-02, -1.025333160937537e-01, -5.990967849622089e-02, -9.871107678390249e-02, -7.774281476141226e-02, -8.433181522658434e-02, -8.433181522658434e-02, -1.111311683853614e-02, -1.247952524965875e-02, -9.733786598071710e-03, -8.832738167121115e-02, -1.152638281732503e-02, -1.152638281732503e-02, -6.175437270791755e-02, -5.792478917513334e-02, -5.914861728257362e-02, -6.019679926860477e-02, -5.966017479189965e-02, -5.966017479189910e-02, -6.181060948375015e-02, -5.391379412568559e-02, -5.043278380585068e-02, -5.085276789326914e-02, -4.997181049687786e-02, -4.997181049687832e-02, -5.870272734281449e-02, -4.950282265573098e-02, -4.672483276955477e-02, -4.642799012458552e-02, -4.756672405462658e-02, -4.756672405462596e-02, -5.193943707302388e-02, -6.597494563494807e-02, -8.281714491796514e-02, -4.192421032468716e-02, -9.483431183650881e-02, -9.483431183650846e-02, -2.459450742087133e-02, -3.927147410338656e-03, -7.025863230046273e-03, -9.119857696864130e-02, -1.000831547621063e-02, -1.000831547621064e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sogga11_x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.841519689062137e-01, 1.841917824110147e-01, 1.843048317797987e-01, 1.836542044156906e-01, 1.841735048696715e-01, 1.841735048696715e-01, 5.877177442036335e-02, 5.864116296673101e-02, 5.509012474916185e-02, 6.135525590733946e-02, 5.870719879045434e-02, 5.870719879045434e-02, -5.329165727733049e-02, -5.407364528791091e-02, -4.722887013608611e-02, -4.908448897066978e-02, -5.357698812937967e-02, -5.357698812937967e-02, -2.967820601606054e-02, -3.408593639823041e-02, -3.798425007410274e-02, 1.438297173943315e-01, -3.132049605209528e-02, -3.132049605209528e-02, -2.872958647399021e-02, -2.996610207262024e-02, -9.697089156056939e-02, -1.491836959705498e-02, -2.972134112210860e-02, -2.972134112210860e-02, -1.012477099552279e-01, -1.020219768916452e-01, -1.013296408658893e-01, -1.019325981861015e-01, -1.016601436066586e-01, -1.016601436066586e-01, 3.935384500194654e-01, 3.877393046185867e-01, 4.022177690504293e-01, 3.989900584180859e-01, 3.730665202630599e-01, 3.730665202630599e-01, -4.615716574058777e-02, -7.809061882669675e-02, -4.323594934154923e-02, -7.495216221652380e-02, -5.374272780316269e-02, -5.374272780316269e-02, 1.542596096620052e-04, 1.273431486941656e-01, 1.816088135032626e-02, -1.023157263447086e-01, 1.119958606523048e-01, 1.119958606523048e-01, -1.446332892419310e-02, -1.625673797516371e-02, -1.273435868127195e-02, -9.582341239762288e-02, -1.504206523997361e-02, -1.504206523997361e-02, -7.481893304759876e-02, -7.644830347179431e-02, -7.612945410661588e-02, -7.571174610162167e-02, -7.594185882662108e-02, -7.594185882662043e-02, -7.331262776197166e-02, -2.690624228792324e-02, -4.076092805416413e-02, -6.651759205228827e-02, -5.451094758374719e-02, -5.451094758374898e-02, -7.935967345284813e-02, 3.946463103904791e-02, -3.805483546887416e-02, -2.354525608939506e-02, -3.655946616561320e-02, -3.655946616561276e-02, -2.608170110519884e-02, -9.247918112527835e-02, -1.054523214105654e-01, -3.451168388950355e-02, -2.602068023658578e-02, -2.602068023658534e-02, -3.283934777686446e-02, -5.136190762561244e-03, -9.156017027807238e-03, -1.821151325645733e-02, -1.307355224483532e-02, -1.307355224483532e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sogga11_x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.246163767992875e-09, -2.246283791909044e-09, -2.246572421392272e-09, -2.244612277263382e-09, -2.246229127333110e-09, -2.246229127333110e-09, -3.367866041803380e-06, -3.365834884751122e-06, -3.309891215744034e-06, -3.405403070965920e-06, -3.366802892311113e-06, -3.366802892311113e-06, -7.150042255771381e-04, -6.842159803943649e-04, -8.360096987033934e-04, -7.628959202040106e-04, -7.037618239555116e-04, -7.037618239555116e-04, -1.285297880519741e-01, -9.111157776017553e-02, -7.619068842483986e-04, -3.565135504193702e+00, -1.145743594725440e-01, -1.145743594725440e-01, 6.139337143388391e+01, 5.998268620876155e+01, 4.541565169755497e+00, 5.936515476693628e+01, 6.256555481032613e+01, 6.256555481032613e+01, -1.320375067652314e-07, -1.290361635773711e-07, -1.317180741518180e-07, -1.293804373720415e-07, -1.304353816410473e-07, -1.304353816410473e-07, -7.495890139748745e-05, -7.277286877691618e-05, -7.571991411370050e-05, -7.416144892179599e-05, -7.181434735478088e-05, -7.181434735478088e-05, -1.941647582947742e-03, 5.190039235379093e-03, -2.754717332393580e-03, 5.831340230176993e-03, -7.536446919562737e-04, -7.536446919562737e-04, -4.122812005922134e+00, -8.888511467022729e-01, -5.160235926210418e+00, 2.695888599979869e-05, -5.421780540231212e+00, -5.421780540231212e+00, 6.365832889441392e+01, 6.108718983531890e+01, 1.894086392189712e+02, -1.760859479026432e+00, 9.263345310254799e+01, 9.263345310254789e+01, 1.002391289021756e-02, 7.048923174638940e-03, 7.842710099917520e-03, 8.623959540838203e-03, 8.209824827222663e-03, 8.209824827222425e-03, 1.246607098629121e-02, -6.329259316250230e-03, -3.682963915507815e-03, 3.012113567682985e-03, -4.723223971726496e-04, -4.723223971725988e-04, 4.023667165775205e-03, -2.061470573445708e-01, -2.161093092269486e-02, -2.715503663850219e-02, -2.001179412647015e-02, -2.001179412646972e-02, -9.473001595052211e-03, 5.559935361005282e+00, 1.023755848301770e+00, -2.306412787656866e-02, -6.921869202985021e+00, -6.921869202985042e+00, 4.272089971961274e+01, 1.434749192736058e+02, 1.085737748976604e+02, -9.212498682570034e+00, 1.417882794817644e+02, 1.417882794817650e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
