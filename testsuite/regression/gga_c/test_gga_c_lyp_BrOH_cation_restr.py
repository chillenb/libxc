
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.381657870039611e-02, -6.381666962887358e-02, -6.381693391172914e-02, -6.381558390023206e-02, -6.381631121278836e-02, -6.381631121278836e-02, -5.728411141003307e-02, -5.728505265204033e-02, -5.730694152307628e-02, -5.726999681684251e-02, -5.728538317620864e-02, -5.728538317620864e-02, -3.618909383367839e-02, -3.606894834402681e-02, -3.269956824154542e-02, -3.297864148255392e-02, -3.304372904172307e-02, -3.304372904172307e-02, -3.807372143633427e-03, -4.917774589523314e-03, -3.940139930301070e-02, 8.857129442216656e-03, 2.777086582377039e-03, 2.777086582377051e-03, -1.044872107745796e-03, -1.098544873521491e-03, 4.790651184643081e-04, -6.089117233510075e-04, -7.627212140817505e-04, -7.627212140817505e-04, -6.140345976417363e-02, -6.142269445880582e-02, -6.140426120358427e-02, -6.142124343919057e-02, -6.141326031645617e-02, -6.141326031645617e-02, -4.602392171757667e-02, -4.636526311337611e-02, -4.533549343852588e-02, -4.564959587761319e-02, -4.653582504620039e-02, -4.653582504620039e-02, -3.814728544236059e-02, -4.256934608257428e-02, -3.630484103927922e-02, -4.015327859987181e-02, -3.885209887483593e-02, -3.885209887483593e-02, 1.992538930428672e-02, 6.975775480186637e-03, 1.910126481392223e-02, -5.656913840364593e-02, 1.204319902295824e-02, 1.204319902295824e-02, -4.711484662502144e-04, -5.954303028162167e-04, -4.565956743404023e-04, 1.042001372993732e-02, -5.490128921827559e-04, -5.490128921827559e-04, -4.204510507178066e-02, -4.125673449767784e-02, -4.153545978517358e-02, -4.176486559321602e-02, -4.165029318526216e-02, -4.165029318526216e-02, -4.179000092879868e-02, -3.165261685121840e-02, -3.508173954763701e-02, -3.807732302865897e-02, -3.662569095344094e-02, -3.662569095344094e-02, -4.321242220757944e-02, -1.200312430363966e-03, -1.060124900678569e-02, -2.512553535755368e-02, -1.845876668015974e-02, -1.845876668015974e-02, -3.015591068820046e-02, 4.971954898611963e-07, 7.112673881921684e-03, -2.686978606895396e-02, 1.188237039549559e-02, 1.188237039549557e-02, -1.461859430327446e-03, -1.605868752035934e-04, -3.358736077294447e-04, 1.148608550769681e-02, -5.084325674373076e-04, -5.084325674373072e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.207773219762498e-02, -7.207758652242024e-02, -7.207717546867104e-02, -7.207933805138102e-02, -7.207817120850336e-02, -7.207817120850336e-02, -7.139075281168550e-02, -7.138918336712582e-02, -7.135300700505272e-02, -7.141653988441279e-02, -7.138894825716681e-02, -7.138894825716681e-02, -6.350957657544691e-02, -6.366045100391605e-02, -6.803996715560436e-02, -6.793176362184548e-02, -6.775210129871147e-02, -6.775210129871147e-02, -4.857628455221785e-02, -4.782711104682340e-02, -6.435672287338320e-02, -5.147807487006643e-02, -4.957746404179498e-02, -4.957746404179499e-02, -1.385763068602992e-03, -1.456547010505796e-03, -5.522748834392579e-03, -8.093692607481083e-04, -1.013018663303173e-03, -1.013018663303173e-03, -6.891692275925361e-02, -6.888606583085163e-02, -6.891565093159076e-02, -6.888840724074581e-02, -6.890119252630127e-02, -6.890119252630127e-02, -8.068329461399326e-02, -8.025830773885667e-02, -8.173829026543651e-02, -8.134304418704308e-02, -7.995407712861440e-02, -7.995407712861440e-02, -5.470900782443447e-02, -5.100290682163269e-02, -5.432317521351143e-02, -4.981219880673961e-02, -5.424885251058206e-02, -5.424885251058206e-02, -4.605776527110732e-02, -6.250611239569788e-02, -4.166874875432551e-02, -6.235600315664638e-02, -4.571955764055436e-02, -4.571955764055436e-02, -6.266934079130558e-04, -7.915040797376599e-04, -6.073811945670162e-04, -1.961327003271144e-02, -7.299742510126669e-04, -7.299742510126669e-04, -4.861279450498252e-02, -4.964497558823181e-02, -4.927999957841190e-02, -4.897937079711273e-02, -4.912946824962026e-02, -4.912946824962026e-02, -4.786555373359697e-02, -5.740231949781399e-02, -5.400910551975162e-02, -5.113724895609072e-02, -5.249663066124886e-02, -5.249663066124886e-02, -5.187807267843710e-02, -6.336358223983489e-02, -5.927267937024989e-02, -5.131009051909258e-02, -5.459637946325894e-02, -5.459637946325896e-02, -5.598858541444143e-02, -4.986501312406508e-03, -1.148533812275969e-02, -4.694827366284190e-02, -2.937700355803398e-02, -2.937700355803395e-02, -1.934654704521959e-03, -2.139410461269027e-04, -4.470668634415559e-04, -2.670662176523407e-02, -6.761579977676309e-04, -6.761579977676304e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.998049598333790e-11, 1.998021587910859e-11, 1.997888421763919e-11, 1.998305355554308e-11, 1.998088106815000e-11, 1.998088106815000e-11, 1.940579007296332e-07, 1.940557672275662e-07, 1.939822505333951e-07, 1.939224343389651e-07, 1.940315168074151e-07, 1.940315168074151e-07, 7.941193202179249e-04, 7.984262217996744e-04, 9.109475659103590e-04, 8.748286877468953e-04, 8.823652249424177e-04, 8.823652249424177e-04, 3.424459820802077e-01, 3.231226662837196e-01, 3.723376253220434e-04, 9.388673679240482e-01, 6.225858485581673e-01, 6.225858485581675e-01, 5.642873435633357e-08, 2.320538157740478e-07, 9.579401826150896e+00, 2.079627509456378e-17, 9.060781298791116e-13, 9.060781298791116e-13, 2.490982512044963e-08, 2.488661477184987e-08, 2.490866850739910e-08, 2.488817918039498e-08, 2.489810371875221e-08, 2.489810371875221e-08, 3.636430646049755e-06, 3.504939992367789e-06, 3.736156458671880e-06, 3.615843647741471e-06, 3.517088649168979e-06, 3.517088649168979e-06, 1.525231009851840e-03, 1.019263746458143e-03, 2.219353492514693e-03, 1.841078612555446e-03, 1.411341000563378e-03, 1.411341000563378e-03, 2.928356397309912e+00, 3.404484143894039e-01, 3.600513380978786e+00, 4.012368713306653e-06, 1.835656855883216e+00, 1.835656855883216e+00, 2.729177401264382e-24, 6.175658252941481e-18, 2.857716644677563e-25, 7.998345688900798e+00, 5.854196218405015e-20, 5.854196218405015e-20, 1.489818890835494e-03, 1.531968321097038e-03, 1.516977045088314e-03, 1.504759966705367e-03, 1.510860493820015e-03, 1.510860493820015e-03, 1.701983094205791e-03, 3.542651849223445e-03, 2.842814828876798e-03, 2.305034704513578e-03, 2.562969507165569e-03, 2.562969507165569e-03, 8.089379322808377e-04, 1.336440024807798e-01, 6.163935655156776e-02, 1.794287270658814e-02, 3.360256419513215e-02, 3.360256419513216e-02, 5.243125681545367e-03, 9.190606806204421e+00, 9.883343370199622e+00, 2.118448453878427e-02, 5.193969900277263e+00, 5.193969900277263e+00, 1.731991136983093e-04, 1.426901871174842e-85, 8.400644335000831e-37, 5.914313919904077e+00, 4.809097095240821e-22, 4.809097095240568e-22])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
