
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zpbeint_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.813844525567712e-02, -5.813930587868447e-02, -5.814175330360062e-02, -5.812897886090158e-02, -5.813586865977664e-02, -5.813586865977664e-02, -4.771139332810059e-02, -4.771658722966853e-02, -4.783690016980327e-02, -4.762828841239082e-02, -4.771769668604900e-02, -4.771769668604900e-02, -3.207371716132424e-02, -3.183952714464881e-02, -2.611941969206077e-02, -2.639220853311571e-02, -2.664932502290521e-02, -2.664932502290521e-02, -8.302804887448008e-03, -8.990250558546461e-03, -3.481034189811030e-02, -2.865375540754979e-03, -1.356722018818226e-02, -1.356722018818228e-02, -2.003062204531981e-03, -2.276838497477680e-03, -8.907878901394384e-04, -3.118959721392441e-04, -2.448489658576850e-03, -2.448489658576850e-03, -6.511882443680791e-02, -6.532555701203099e-02, -6.512734597885075e-02, -6.530984723325933e-02, -6.522401116523895e-02, -6.522401116523895e-02, -2.581249130578009e-02, -2.631874521787959e-02, -2.468427644940373e-02, -2.512050221805635e-02, -2.666745558275113e-02, -2.666745558275113e-02, -4.269270381382322e-02, -5.787298956391988e-02, -4.004611493512403e-02, -5.348182795197238e-02, -4.437220738457062e-02, -4.437220738457059e-02, -6.128449967012020e-04, -4.452061573190995e-03, -8.370676621584673e-04, -7.551877380427474e-02, -1.795381551918159e-03, -1.795381551918159e-03, -1.106126228784649e-03, -2.279400318518881e-04, -7.904342165694596e-04, -1.298411933277586e-04, -2.023384882221046e-03, -2.023384882221046e-03, -6.120193280655904e-02, -5.675747383111061e-02, -5.825541386724590e-02, -5.954715041623761e-02, -5.889522459141439e-02, -5.889522459141439e-02, -6.199179119800174e-02, -3.135298207707807e-02, -3.849796324442487e-02, -4.688337139890594e-02, -4.252712884523359e-02, -4.252712884523359e-02, -5.797466060813614e-02, -7.676961427494432e-03, -1.276691978794514e-02, -2.717401874787059e-02, -1.930010798149590e-02, -1.930010798149590e-02, -3.051193592634114e-02, -2.591109291153436e-05, -3.115665972505642e-04, -3.181762909242640e-02, -7.225840650824655e-04, -7.225840650825800e-04, -8.389379082603763e-04, -3.659821261978169e-06, -1.218990793026525e-03, -3.374979839475822e-04, -1.910123215616776e-03, -1.910123215616778e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zpbeint_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.354956899089542e-01, -1.354789367367456e-01, -1.355023979820761e-01, -1.354741491274192e-01, -1.354754027017475e-01, -1.355066299580108e-01, -1.355263367745426e-01, -1.354271823005268e-01, -1.355673642197073e-01, -1.354015224227128e-01, -1.355673642197073e-01, -1.354015224227128e-01, -1.160326663661947e-01, -1.160229236227638e-01, -1.160385344468148e-01, -1.160274143899684e-01, -1.161456648505078e-01, -1.161602028169152e-01, -1.159411142584931e-01, -1.159512139523198e-01, -1.159004987586268e-01, -1.161674935047000e-01, -1.159004987586268e-01, -1.161674935047000e-01, -8.312173138133207e-02, -8.310610768037177e-02, -8.290277670079628e-02, -8.289523343783155e-02, -7.679170576361340e-02, -7.628710186362180e-02, -7.690631907327708e-02, -7.705975687825312e-02, -7.803180363411673e-02, -7.359537585162752e-02, -7.803180363411673e-02, -7.359537585162752e-02, -3.275231737261852e-02, -3.464247134167581e-02, -3.469938733583344e-02, -3.644227978702438e-02, -8.737196642260331e-02, -8.731641325132067e-02, -1.333084520906667e-02, -1.554177114434800e-02, -4.504103567056659e-04, 4.183055742863041e-02, -4.504103567056755e-04, 4.183055742863035e-02, 3.434883848115047e-02, -2.473666665797496e-02, 3.289491089599806e-02, -2.294592695205406e-02, 2.442308142377562e-02, -1.737527250065436e-02, -2.184934800360120e-02, 2.423622180293368e-02, -2.735674303888031e-03, -5.360986007450113e-03, -2.735674303888031e-03, -5.360986007450113e-03, -1.345918646100830e-01, -1.345009608070188e-01, -1.347455907338957e-01, -1.346543518077620e-01, -1.345990276507319e-01, -1.345065165723978e-01, -1.347330186277916e-01, -1.346436798907526e-01, -1.346703958569407e-01, -1.345788710331572e-01, -1.346703958569407e-01, -1.345788710331572e-01, -8.359090750741087e-02, -8.352050813076843e-02, -8.467027375130726e-02, -8.430263784847750e-02, -8.013534712247537e-02, -8.277265900029133e-02, -8.095110164576141e-02, -8.362647678878748e-02, -8.789605316372685e-02, -8.215425511399740e-02, -8.789605316372685e-02, -8.215425511399740e-02, -8.486176951479699e-02, -8.510114551689975e-02, -8.214671350022512e-02, -8.209031358991471e-02, -8.429098365047577e-02, -8.126665669553947e-02, -8.207461438613060e-02, -7.824850354479580e-02, -8.291278964202183e-02, -8.780709384906200e-02, -8.291278964202183e-02, -8.780709384906200e-02, -1.797524280840704e-03, -5.072681592348115e-03, -2.085292928983523e-02, -2.170341868077215e-02, 8.144477804071298e-03, -1.044376672884852e-02, -1.172094600037817e-01, -1.172777416041574e-01, -1.419458759820055e-03, -1.296507742996443e-02, -1.419458759820055e-03, -1.296507742996443e-02, 2.607538032014835e-02, -2.141556133724132e-02, 2.010068156933291e-02, -1.831071707635076e-02, 1.588602991650805e-02, -1.148504871158578e-02, 6.391391505567547e-04, -2.098652710237102e-03, -3.448524423585647e-03, -2.295778295448280e-03, -3.448524423585647e-03, -2.295778295448278e-03, -7.543200233822701e-02, -7.494441099290143e-02, -7.953251056959861e-02, -7.905785132924856e-02, -7.829621661161278e-02, -7.781500710843005e-02, -7.711041551454983e-02, -7.662845501254562e-02, -7.772253043298294e-02, -7.724094068893492e-02, -7.772253043298294e-02, -7.724094068893492e-02, -7.300384257932049e-02, -7.258687298038566e-02, -7.778947653672105e-02, -7.759518608967486e-02, -8.151999773851289e-02, -8.116583193236306e-02, -8.198194488765755e-02, -8.161374330574082e-02, -8.221070356355635e-02, -8.186346813317034e-02, -8.221070356355635e-02, -8.186346813317034e-02, -8.420200852370256e-02, -8.399866431344460e-02, -3.255319508079268e-02, -3.326250541756145e-02, -4.674075396734205e-02, -4.727945295901695e-02, -6.918187677927250e-02, -6.890705066188599e-02, -5.955439029237229e-02, -5.955651458607433e-02, -5.955439029237227e-02, -5.955651458607433e-02, -7.589555731988482e-02, -7.556783341148916e-02, 3.103014229714194e-03, -3.095174181644878e-03, 1.191630117175659e-02, -1.007202422536688e-02, -7.060316706032109e-02, -6.952123905602439e-02, 6.940504785229987e-03, -8.826123369168822e-03, 6.940504785230143e-03, -8.826123369168611e-03, 3.182574372810055e-02, -2.554766466585807e-02, 2.147134843773991e-03, -2.116580499330563e-03, 7.618801337082461e-03, -7.063385033263803e-03, 9.019778855235460e-04, -4.276374975359708e-03, -3.151285076447359e-03, -2.184548693891568e-03, -3.151285076447360e-03, -2.184548693891569e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zpbeint_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.955365004868411e-10, 3.910730009736823e-10, 1.955365004868411e-10, 1.955398082334227e-10, 3.910796164668454e-10, 1.955398082334227e-10, 1.955440254267364e-10, 3.910880508534729e-10, 1.955440254267364e-10, 1.954950333759727e-10, 3.909900667519455e-10, 1.954950333759727e-10, 1.955221839382530e-10, 3.910443678765059e-10, 1.955221839382530e-10, 1.955221839382530e-10, 3.910443678765059e-10, 1.955221839382530e-10, 1.084799067915367e-06, 2.169598135830734e-06, 1.084799067915367e-06, 1.085005220342012e-06, 2.170010440684025e-06, 1.085005220342012e-06, 1.089656974993129e-06, 2.179313949986258e-06, 1.089656974993129e-06, 1.080588190368636e-06, 2.161176380737272e-06, 1.080588190368636e-06, 1.084915098777515e-06, 2.169830197555030e-06, 1.084915098777515e-06, 1.084915098777515e-06, 2.169830197555030e-06, 1.084915098777515e-06, 1.779211351917442e-03, 3.558422703834883e-03, 1.779211351917442e-03, 1.768604889505463e-03, 3.537209779010924e-03, 1.768604889505463e-03, 1.492447789893545e-03, 2.984895579787089e-03, 1.492447789893545e-03, 1.456449256269313e-03, 2.912898512538626e-03, 1.456449256269313e-03, 1.440362231650205e-03, 2.880724463300410e-03, 1.440362231650205e-03, 1.440362231650205e-03, 2.880724463300410e-03, 1.440362231650205e-03, 1.861772708224986e-01, 3.723545416449972e-01, 1.861772708224986e-01, 1.934059054547010e-01, 3.868118109094020e-01, 1.934059054547010e-01, 9.524418526745156e-04, 1.904883705349031e-03, 9.524418526745156e-04, 1.561631743216279e-01, 3.123263486432559e-01, 1.561631743216279e-01, -2.689879231714928e-01, -5.379758463429857e-01, -2.689879231714928e-01, -2.689879231714931e-01, -5.379758463429860e-01, -2.689879231714931e-01, -7.919450750730778e+02, -1.583890150146155e+03, -7.919450750730778e+02, -7.471031240359310e+02, -1.494206248071862e+03, -7.471031240359310e+02, -2.001413051818583e+00, -4.002826103637166e+00, -2.001413051818583e+00, -8.482668081722917e+02, -1.696533616344585e+03, -8.482668081722917e+02, -8.623553263373250e-35, -1.724710652674650e-34, -8.623553263373250e-35, -8.623553263374611e-35, -1.724710652674922e-34, -8.623553263374611e-35, 2.768027083860474e-07, 5.536054167720947e-07, 2.768027083860474e-07, 2.785208409842738e-07, 5.570416819685475e-07, 2.785208409842738e-07, 2.768711823152396e-07, 5.537423646304792e-07, 2.768711823152396e-07, 2.783878141950420e-07, 5.567756283900842e-07, 2.783878141950420e-07, 2.776767693163600e-07, 5.553535386327201e-07, 2.776767693163600e-07, 2.776767693163600e-07, 5.553535386327201e-07, 2.776767693163600e-07, 6.686540400729735e-06, 1.337308080145947e-05, 6.686540400729735e-06, 6.648282276949869e-06, 1.329656455389974e-05, 6.648282276949869e-06, 6.407909837690700e-06, 1.281581967538140e-05, 6.407909837690700e-06, 6.376732452370108e-06, 1.275346490474021e-05, 6.376732452370108e-06, 6.797873849533145e-06, 1.359574769906629e-05, 6.797873849533145e-06, 6.797873849533145e-06, 1.359574769906629e-05, 6.797873849533145e-06, 5.370806850109443e-03, 1.074161370021889e-02, 5.370806850109443e-03, 6.190852463511916e-03, 1.238170492702383e-02, 6.190852463511916e-03, 7.038036374465569e-03, 1.407607274893114e-02, 7.038036374465569e-03, 9.574706820958585e-03, 1.914941364191717e-02, 9.574706820958585e-03, 5.303297706734369e-03, 1.060659541346874e-02, 5.303297706734369e-03, 5.303297706734373e-03, 1.060659541346875e-02, 5.303297706734373e-03, 9.493961774419155e-02, 1.898792354883840e-01, 9.493961774419155e-02, 7.601627306167177e-02, 1.520325461233435e-01, 7.601627306167177e-02, 3.352409988077423e-02, 6.704819976154885e-02, 3.352409988077423e-02, 5.321881737935540e-05, 1.064376347587108e-04, 5.321881737935540e-05, 1.471738443003862e-01, 2.943476886007724e-01, 1.471738443003862e-01, 1.471738443003862e-01, 2.943476886007724e-01, 1.471738443003862e-01, -4.997012127339440e+03, -9.994024254678878e+03, -4.997012127339440e+03, -7.340018896327130e+02, -1.468003779265424e+03, -7.340018896327130e+02, -1.115177666586760e+04, -2.230355333173519e+04, -1.115177666586760e+04, 9.553670858165937e-02, 1.910734171633178e-01, 9.553670858165937e-02, -2.722162924490507e-05, -5.444325848981014e-05, -2.722162924490507e-05, -2.722162924491020e-05, -5.444325848982042e-05, -2.722162924491020e-05, 1.003328870199059e-02, 2.006657740398117e-02, 1.003328870199059e-02, 8.907325918630084e-03, 1.781465183726017e-02, 8.907325918630084e-03, 9.271852712415134e-03, 1.854370542483027e-02, 9.271852712415134e-03, 9.598499659696636e-03, 1.919699931939327e-02, 9.598499659696636e-03, 9.432270105024378e-03, 1.886454021004876e-02, 9.432270105024378e-03, 9.432270105024378e-03, 1.886454021004876e-02, 9.432270105024378e-03, 1.173486114617612e-02, 2.346972229235224e-02, 1.173486114617612e-02, 7.721421226656905e-03, 1.544284245331381e-02, 7.721421226656905e-03, 8.481243589485871e-03, 1.696248717897174e-02, 8.481243589485871e-03, 9.488016301092864e-03, 1.897603260218573e-02, 9.488016301092864e-03, 8.967884805903903e-03, 1.793576961180781e-02, 8.967884805903903e-03, 8.967884805903903e-03, 1.793576961180781e-02, 8.967884805903903e-03, 4.952307231934501e-03, 9.904614463869001e-03, 4.952307231934501e-03, 5.286818974741857e-02, 1.057363794948371e-01, 5.286818974741857e-02, 4.460027231761902e-02, 8.920054463523805e-02, 4.460027231761902e-02, 3.378738131122140e-02, 6.757476262244280e-02, 3.378738131122140e-02, 4.081852562129661e-02, 8.163705124259323e-02, 4.081852562129661e-02, 4.081852562129662e-02, 8.163705124259323e-02, 4.081852562129662e-02, 1.106866509627115e-02, 2.213733019254230e-02, 1.106866509627115e-02, -6.931109373505192e-03, -1.386221874700706e-02, -6.931109373505192e-03, -2.339212682490797e-01, -4.678425364981647e-01, -2.339212682490797e-01, 5.073487066268354e-02, 1.014697413253671e-01, 5.073487066268354e-02, 5.392403216086688e-02, 1.078480643217335e-01, 5.392403216086688e-02, 5.392403216083577e-02, 1.078480643216717e-01, 5.392403216083577e-02, -1.445131455990532e+02, -2.890262911981063e+02, -1.445131455990532e+02, -1.436111597435711e+03, -2.872223194871400e+03, -1.436111597435711e+03, -1.004894185539361e+04, -2.009788371078722e+04, -1.004894185539361e+04, 1.429619894713227e-01, 2.859239789426459e-01, 1.429619894713227e-01, -7.547839913714153e-03, -1.509567982742831e-02, -7.547839913714153e-03, -7.547839913714190e-03, -1.509567982742838e-02, -7.547839913714190e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
