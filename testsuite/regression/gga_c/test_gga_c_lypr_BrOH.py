
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lypr_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.344889591743690e-02, -6.344897707134690e-02, -6.344922952730546e-02, -6.344790272798781e-02, -6.344893963136283e-02, -6.344893963136283e-02, -5.521594137623602e-02, -5.521674837745644e-02, -5.523922090311990e-02, -5.520210266657177e-02, -5.521638919602720e-02, -5.521638919602720e-02, -2.975698401217121e-02, -2.963919037829320e-02, -2.608284025314718e-02, -2.638396918404202e-02, -2.971458931709699e-02, -2.971458931709699e-02, -1.205273290531540e-02, -1.227441316098190e-02, -3.526022471390061e-02, -9.439466669694212e-03, -1.212115435327316e-02, -1.212115435327316e-02, -4.336639309570581e-11, -1.874646679229025e-10, -1.264910436135755e-03, -2.822640858078790e-34, -1.361692200703911e-10, -1.361692200703911e-10, -6.004104429963212e-02, -6.006074069422745e-02, -6.004301990284473e-02, -6.005833596781993e-02, -6.005120703740191e-02, -6.005120703740191e-02, -4.217126363455446e-02, -4.254140062881983e-02, -4.172687289715112e-02, -4.202432710138161e-02, -4.297807207533947e-02, -4.297807207533947e-02, -3.198055962016461e-02, -3.637902400065994e-02, -3.080830537454548e-02, -3.409276450884248e-02, -3.314313183424862e-02, -3.314313183424862e-02, -7.008981837983388e-03, -9.773890002035756e-03, -6.899931022010013e-03, -5.350809799823020e-02, -8.294916878631107e-03, -8.294916878631107e-03, -1.716430175005608e-36, -5.371564852470179e-29, -4.672934995322988e-48, -3.055838384434505e-03, -5.227453572470955e-34, -5.227453572470955e-34, -3.612158974019632e-02, -3.543646896461555e-02, -3.568290443979123e-02, -3.587277979287796e-02, -3.577790820036636e-02, -3.577790820036636e-02, -3.559047982434758e-02, -2.692194323116311e-02, -2.975779350321699e-02, -3.217612614101660e-02, -3.099143185444190e-02, -3.099143185444190e-02, -3.716366171491019e-02, -1.074562766989392e-02, -1.375087150174518e-02, -2.081622694515392e-02, -1.716487137801120e-02, -1.716487137801119e-02, -2.492184893044216e-02, -9.784742409015715e-04, -2.386332775316106e-03, -2.153802988198121e-02, -5.122095760552359e-03, -5.122095760552359e-03, -4.005417251799420e-09, 0.000000000000000e+00, -1.341812606213368e-94, -4.718449895331805e-03, -2.566623964851445e-45, -2.566623964850735e-45]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lypr_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.194648629665289e-02, -7.194635757839585e-02, -7.194597306005829e-02, -7.194807718409767e-02, -7.194641682904183e-02, -7.194641682904183e-02, -7.060870784590446e-02, -7.060736701351282e-02, -7.057072710265218e-02, -7.063478663746894e-02, -7.060803594035062e-02, -7.060803594035062e-02, -5.816970097708563e-02, -5.830117537462907e-02, -6.243469905151266e-02, -6.236718733890299e-02, -5.821679131000673e-02, -5.821679131000673e-02, -2.046178106599118e-02, -2.077295613987990e-02, -5.814503249198722e-02, -1.371745295270199e-02, -2.055537788678615e-02, -2.055537788678615e-02, -5.200428742647968e-10, -2.075738973077062e-09, -2.611052272093360e-03, -1.316831275580175e-32, -1.535038219285546e-09, -1.535038219285546e-09, -6.825484820063092e-02, -6.822347378914796e-02, -6.825171249831265e-02, -6.822731531162779e-02, -6.823864345439745e-02, -6.823864345439745e-02, -8.005500541287920e-02, -7.962082253356273e-02, -8.073029984435089e-02, -8.037797810140059e-02, -7.891779676756307e-02, -7.891779676756307e-02, -4.797721906405062e-02, -4.529931291041252e-02, -4.715040727272030e-02, -4.431590341861021e-02, -4.806164498531048e-02, -4.806164498531048e-02, -1.024208577255430e-02, -2.126543637403548e-02, -1.013454526598951e-02, -6.027100317524913e-02, -1.176600567358096e-02, -1.176600567358096e-02, -8.583439794850680e-35, -2.077427144853977e-27, -3.156978160339789e-46, -5.304882193192685e-03, -2.417565796274209e-32, -2.417565796274209e-32, -4.325781302239865e-02, -4.403732571139321e-02, -4.375708174323942e-02, -4.354090207101821e-02, -4.364889467026706e-02, -4.364889467026706e-02, -4.250864303065129e-02, -4.829325009496355e-02, -4.635866301710583e-02, -4.471201410225069e-02, -4.549932814004969e-02, -4.549932814004969e-02, -4.632745489632099e-02, -2.970007062626651e-02, -3.486447255949999e-02, -3.862488083355946e-02, -3.705125970645262e-02, -3.705125970645261e-02, -4.592000208901122e-02, -2.123471415586464e-03, -4.347739606958682e-03, -3.512500195296592e-02, -8.041907906289048e-03, -8.041907906289048e-03, -3.672031164579778e-08, 0.000000000000000e+00, -1.858729778233851e-92, -7.530903391364828e-03, -1.627128455965951e-43, -1.627128455965489e-43]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lypr_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.027796202461450e-11, 2.027771395109089e-11, 2.027642460246092e-11, 2.028049069788441e-11, 2.027783272575921e-11, 2.027783272575921e-11, 2.053402634551940e-07, 2.053380573081489e-07, 2.052341776618710e-07, 2.051904433946077e-07, 2.053346508380986e-07, 2.053346508380986e-07, 7.885209646626051e-04, 7.922836131131831e-04, 8.975656166233067e-04, 8.656736842525904e-04, 7.898908686402175e-04, 7.898908686402175e-04, 5.934495959517041e-02, 5.872743489537686e-02, 3.360159409967392e-04, 4.682362821555815e-02, 5.916625102373856e-02, 5.916625102373856e-02, 2.244237123725242e-223, 1.400948357798770e-203, 7.877045693473880e-12, 0.000000000000000e+00, 6.791469631851464e-208, 6.791469631851464e-208, 2.611659823480607e-08, 2.609289125367742e-08, 2.611409573750137e-08, 2.609566321079449e-08, 2.610454555019866e-08, 2.610454555019866e-08, 3.903143429168858e-06, 3.765991722202864e-06, 3.960271387861662e-06, 3.850856707170435e-06, 3.739216143981991e-06, 3.739216143981991e-06, 1.484872591307217e-03, 1.019925305480155e-03, 1.876754915835325e-03, 1.555321966404169e-03, 1.252393334125876e-03, 1.252393334125876e-03, 9.710525077018584e-03, 5.902034297632525e-02, 8.715957094279308e-03, 4.307603149846867e-06, 2.533511723360678e-02, 2.533511723360678e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.379325690920973e-06, 0.000000000000000e+00, 0.000000000000000e+00, 1.288826190154702e-03, 1.320439322835033e-03, 1.309003566161999e-03, 1.300260006969735e-03, 1.304627605485318e-03, 1.304627605485318e-03, 1.493195737885977e-03, 2.794206266660339e-03, 2.312077118492183e-03, 1.949359033986709e-03, 2.125194538212388e-03, 2.125194538212389e-03, 8.200523592302900e-04, 4.149983644683884e-02, 2.669623638775630e-02, 1.185617443408458e-02, 1.819310543704955e-02, 1.819310543704956e-02, 4.328538934103432e-03, 7.731035440829666e-14, 1.713940662093332e-07, 1.452331593574519e-02, 9.507442194603117e-04, 9.507442194603114e-04, 1.499677591267234e-162, 0.000000000000000e+00, 0.000000000000000e+00, 4.615384981946408e-04, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
