
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_apbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.616615881124492e-02, -4.616699269762438e-02, -4.616936257546779e-02, -4.615698467449386e-02, -4.616366013974743e-02, -4.616366013974743e-02, -3.712685362847773e-02, -3.713194181288729e-02, -3.724982041524516e-02, -3.704527942417091e-02, -3.713296165690802e-02, -3.713296165690802e-02, -2.420538796450240e-02, -2.397515928744128e-02, -1.855978039534271e-02, -1.880181162995896e-02, -1.884417622744496e-02, -1.884417622744496e-02, -4.858903741274581e-03, -5.339131399013111e-03, -2.660294393564919e-02, -1.459049471664843e-03, -1.598590634820093e-03, -1.598590634820089e-03, -3.834245499226285e-09, -5.116088077489200e-09, -5.816910166737618e-06, -2.752840867585593e-10, -7.108860453422516e-10, -7.108860453422516e-10, -5.417141317679525e-02, -5.438462168082701e-02, -5.418019596564529e-02, -5.436841271968995e-02, -5.427987765976118e-02, -5.427987765976118e-02, -1.742203116744787e-02, -1.784515485382791e-02, -1.648163077807321e-02, -1.684115764666574e-02, -1.813235946363027e-02, -1.813235946363027e-02, -3.598853762794825e-02, -5.445679035957677e-02, -3.327759026442394e-02, -4.957827314348653e-02, -3.788593658427039e-02, -3.788593658427035e-02, -2.797079666849063e-04, -2.368363783791051e-03, -2.162743382411354e-04, -6.900170919640458e-02, -7.504333371241220e-04, -7.504333371241220e-04, -1.074099444369619e-10, -2.914728571348779e-10, -5.179872331843166e-10, -5.532107618240120e-05, -5.080699199029592e-10, -5.080699242397679e-10, -5.987670515559776e-02, -5.366244621397809e-02, -5.571487821441541e-02, -5.751831698378882e-02, -5.660416088473413e-02, -5.660416088473413e-02, -6.134581223088482e-02, -2.415402076669041e-02, -3.172256725873854e-02, -4.142316421077474e-02, -3.627599016742782e-02, -3.627599016742782e-02, -5.419900280242503e-02, -4.385509795349227e-03, -8.004473787309098e-03, -2.070790827903429e-02, -1.336387721280146e-02, -1.336387721280147e-02, -2.349037624631306e-02, -4.397897767939585e-06, -1.688904462269006e-05, -2.581012702197441e-02, -1.830201186301186e-04, -1.830201186301256e-04, -1.496292650719766e-08, -2.725641869323614e-12, -4.534846196474485e-11, -1.396180928663164e-04, -4.571578380609120e-10, -4.571578341577842e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_apbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.210890052331307e-01, -1.210891353365208e-01, -1.210900605264913e-01, -1.210902799183248e-01, -1.210934249531715e-01, -1.210931823878136e-01, -1.210765907909763e-01, -1.210773602596485e-01, -1.210851368988087e-01, -1.210864245486500e-01, -1.210851368988087e-01, -1.210864245486500e-01, -1.037301901049124e-01, -1.037315033092956e-01, -1.037369733618441e-01, -1.037384730676725e-01, -1.038978584671844e-01, -1.038958717956547e-01, -1.036219767808440e-01, -1.036206284095499e-01, -1.037572298680322e-01, -1.037212195144469e-01, -1.037572298680322e-01, -1.037212195144469e-01, -7.436968993283388e-02, -7.408066240241591e-02, -7.405622908171754e-02, -7.370369788762081e-02, -6.417347211106599e-02, -6.458789969200010e-02, -6.497075884920606e-02, -6.483974999432424e-02, -6.309962461465067e-02, -6.707047306077885e-02, -6.309962461465067e-02, -6.707047306077885e-02, -2.324494510156093e-02, -2.247241242333054e-02, -2.512941425987259e-02, -2.417601804692058e-02, -8.027308002396449e-02, -7.768570913593706e-02, -8.050572928957160e-03, -7.957507096525492e-03, -7.779605116231266e-03, -1.333401242727318e-02, -7.779605116231289e-03, -1.333401242727316e-02, -2.555341673296791e-08, -2.458957834365888e-08, -3.418713163572495e-08, -3.272214476346085e-08, -3.785268218398703e-05, -3.628910547449307e-05, -1.795701721838883e-09, -1.813933639984228e-09, -4.389049727013348e-09, -6.023344433522902e-09, -4.389049724411263e-09, -6.023344433089221e-09, -1.253185855337531e-01, -1.253492184040160e-01, -1.255220436026542e-01, -1.255535847304307e-01, -1.253267285287832e-01, -1.253579355827906e-01, -1.255069447120691e-01, -1.255377687070035e-01, -1.254221292394475e-01, -1.254533740844292e-01, -1.254221292394475e-01, -1.254533740844292e-01, -6.577533141405485e-02, -6.577806769326765e-02, -6.682898563694226e-02, -6.684401142249119e-02, -6.342672676316970e-02, -6.333733405432115e-02, -6.436432339341562e-02, -6.426955865897670e-02, -6.741155767364906e-02, -6.765708236677187e-02, -6.741155767364906e-02, -6.765708236677187e-02, -8.326375540263888e-02, -8.351644090671384e-02, -8.447091412020788e-02, -8.441570779301215e-02, -8.221567126849420e-02, -7.895548843311330e-02, -8.423603469313197e-02, -8.050323579704968e-02, -8.200641297879274e-02, -8.704377620703398e-02, -8.200641297879271e-02, -8.704377620703395e-02, -1.682730091870620e-03, -1.669567799819094e-03, -1.247726024561128e-02, -1.242434300036971e-02, -1.336490574735288e-03, -1.280061685390783e-03, -1.180043589387847e-01, -1.180733200937294e-01, -4.419159892347628e-03, -4.210771364293801e-03, -4.419159892347628e-03, -4.210771364293801e-03, -7.137609315399341e-10, -6.977776630117927e-10, -1.919796457083921e-09, -1.902570414876674e-09, -3.463821017218482e-09, -3.349191618797237e-09, -3.448396326682059e-04, -3.431384853728080e-04, -3.790571112799023e-09, -3.153331381330459e-09, -3.790571120849224e-09, -3.153331383742809e-09, -7.687263384881474e-02, -7.638895008137681e-02, -8.182432217350571e-02, -8.135916449505318e-02, -8.046217346173722e-02, -7.998885872594429e-02, -7.904362323661326e-02, -7.856786093527962e-02, -7.978859013443433e-02, -7.931407407835989e-02, -7.978859013443433e-02, -7.931407407835989e-02, -7.378793292057989e-02, -7.337250161000236e-02, -7.126946049375309e-02, -7.095556640186300e-02, -7.891403134173690e-02, -7.852740104675278e-02, -8.286760772401131e-02, -8.250590387802081e-02, -8.148126516794009e-02, -8.112868905365071e-02, -8.148126516794009e-02, -8.112868905365071e-02, -8.649794828194693e-02, -8.629915092416041e-02, -2.133520792600360e-02, -2.122847730353097e-02, -3.457705819647006e-02, -3.426822722488594e-02, -6.310424752311344e-02, -6.274894555215405e-02, -4.913090317462483e-02, -4.914735845747616e-02, -4.913090317462485e-02, -4.914735845747618e-02, -6.962237910784068e-02, -6.913486182347493e-02, -2.810056632236963e-05, -2.795323432274150e-05, -1.079715087104236e-04, -1.051893985032818e-04, -6.808272021837414e-02, -6.696939271606279e-02, -1.137167346387585e-03, -1.087557053678372e-03, -1.137167346387606e-03, -1.087557053678407e-03, -9.856920445119908e-08, -9.628770527238294e-08, -1.801060790724096e-11, -1.798800240036486e-11, -3.041480599199923e-10, -2.935811020210203e-10, -8.587031104928524e-04, -8.473954849912970e-04, -3.356605529915529e-09, -2.846513884994270e-09, -3.356605525077277e-09, -2.846513884926507e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_apbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.896505199684871e-10, 3.793010399369742e-10, 1.896505199684871e-10, 1.896541645776890e-10, 3.793083291553778e-10, 1.896541645776890e-10, 1.896594828270153e-10, 3.793189656540306e-10, 1.896594828270153e-10, 1.896054932545921e-10, 3.792109865091843e-10, 1.896054932545921e-10, 1.896353263481266e-10, 3.792706526962533e-10, 1.896353263481266e-10, 1.896353263481266e-10, 3.792706526962533e-10, 1.896353263481266e-10, 1.063182334873437e-06, 2.126364669746874e-06, 1.063182334873437e-06, 1.063414405858881e-06, 2.126828811717762e-06, 1.063414405858881e-06, 1.068669768558004e-06, 2.137339537116007e-06, 1.068669768558004e-06, 1.058566955616533e-06, 2.117133911233067e-06, 1.058566955616533e-06, 1.063334391611612e-06, 2.126668783223223e-06, 1.063334391611612e-06, 1.063334391611612e-06, 2.126668783223223e-06, 1.063334391611612e-06, 1.766233049690934e-03, 3.532466099381867e-03, 1.766233049690934e-03, 1.750704491188141e-03, 3.501408982376282e-03, 1.750704491188141e-03, 1.368690403700144e-03, 2.737380807400288e-03, 1.368690403700144e-03, 1.339561094222562e-03, 2.679122188445124e-03, 1.339561094222562e-03, 1.360501437232463e-03, 2.721002874464926e-03, 1.360501437232463e-03, 1.360501437232463e-03, 2.721002874464926e-03, 1.360501437232463e-03, 1.325646448895338e-01, 2.651292897790677e-01, 1.325646448895338e-01, 1.412188734599328e-01, 2.824377469198657e-01, 1.412188734599328e-01, 9.613008653098364e-04, 1.922601730619672e-03, 9.613008653098364e-04, 8.846560452170296e-02, 1.769312090434056e-01, 8.846560452170296e-02, 7.494903692358412e-02, 1.498980738471683e-01, 7.494903692358412e-02, 7.494903692358400e-02, 1.498980738471682e-01, 7.494903692358400e-02, 3.020149267025598e-03, 6.040298533980295e-03, 3.020149267025598e-03, 3.552625579821790e-03, 7.105251159261777e-03, 3.552625579821790e-03, 1.838990349845149e-02, 3.677980699689255e-02, 1.838990349845149e-02, 1.072432535567274e-03, 2.144865069676530e-03, 1.072432535567274e-03, 1.573642233813362e-03, 3.147284467715282e-03, 1.573642233813362e-03, 1.573642233612614e-03, 3.147284467857376e-03, 1.573642233612614e-03, 2.857527378162173e-07, 5.715054756324345e-07, 2.857527378162173e-07, 2.877260223076448e-07, 5.754520446152895e-07, 2.877260223076448e-07, 2.858315906024655e-07, 5.716631812049310e-07, 2.858315906024655e-07, 2.875734091231418e-07, 5.751468182462837e-07, 2.875734091231418e-07, 2.867563507959330e-07, 5.735127015918660e-07, 2.867563507959330e-07, 2.867563507959330e-07, 5.735127015918660e-07, 2.867563507959330e-07, 5.617041285148844e-06, 1.123408257029768e-05, 5.617041285148844e-06, 5.617535726088032e-06, 1.123507145217606e-05, 5.617535726088032e-06, 5.309401766855672e-06, 1.061880353371134e-05, 5.309401766855672e-06, 5.311401266187898e-06, 1.062280253237580e-05, 5.311401266187898e-06, 5.772265892978630e-06, 1.154453178595726e-05, 5.772265892978630e-06, 5.772265892978630e-06, 1.154453178595726e-05, 5.772265892978630e-06, 6.200719077011172e-03, 1.240143815402234e-02, 6.200719077011172e-03, 8.382572828301954e-03, 1.676514565660391e-02, 8.382572828301954e-03, 8.010762975661816e-03, 1.602152595132363e-02, 8.010762975661816e-03, 1.270902968431925e-02, 2.541805936863850e-02, 1.270902968431925e-02, 6.239587644326457e-03, 1.247917528865291e-02, 6.239587644326457e-03, 6.239587644326456e-03, 1.247917528865291e-02, 6.239587644326456e-03, 4.677888095515269e-02, 9.355776191030574e-02, 4.677888095515269e-02, 4.570019839937689e-02, 9.140039679875368e-02, 4.570019839937689e-02, 4.721299059989771e-02, 9.442598119979510e-02, 4.721299059989771e-02, 6.518180108766422e-05, 1.303636021753284e-04, 6.518180108766422e-05, 9.183871020164296e-02, 1.836774204032860e-01, 9.183871020164296e-02, 9.183871020164296e-02, 1.836774204032860e-01, 9.183871020164296e-02, 1.045619946528691e-03, 2.091239894202053e-03, 1.045619946528691e-03, 1.318549270691590e-03, 2.637098537985854e-03, 1.318549270691590e-03, 1.313611786787004e-02, 2.627223574055052e-02, 1.313611786787004e-02, 4.540328816721984e-02, 9.080657633443846e-02, 4.540328816721984e-02, 5.027396141177120e-03, 1.005479228080451e-02, 5.027396141177120e-03, 5.027396143520650e-03, 1.005479228927092e-02, 5.027396143520650e-03, 1.460244898456555e-02, 2.920489796913111e-02, 1.460244898456555e-02, 1.219337566574954e-02, 2.438675133149908e-02, 1.219337566574954e-02, 1.294609746835580e-02, 2.589219493671160e-02, 1.294609746835580e-02, 1.364192667847696e-02, 2.728385335695393e-02, 1.364192667847696e-02, 1.328516775965737e-02, 2.657033551931473e-02, 1.328516775965737e-02, 1.328516775965737e-02, 2.657033551931473e-02, 1.328516775965737e-02, 1.746540872048220e-02, 3.493081744096441e-02, 1.746540872048220e-02, 7.960925484861985e-03, 1.592185096972397e-02, 7.960925484861985e-03, 9.552261814574390e-03, 1.910452362914878e-02, 9.552261814574390e-03, 1.173881042521530e-02, 2.347762085043059e-02, 1.173881042521530e-02, 1.057432685202081e-02, 2.114865370404163e-02, 1.057432685202081e-02, 1.057432685202081e-02, 2.114865370404163e-02, 1.057432685202081e-02, 6.620737749266675e-03, 1.324147549853335e-02, 6.620737749266675e-03, 3.557483091368653e-02, 7.114966182737305e-02, 3.557483091368653e-02, 3.466762398135492e-02, 6.933524796270982e-02, 3.466762398135492e-02, 3.472869472407365e-02, 6.945738944814731e-02, 3.472869472407365e-02, 3.671672502806052e-02, 7.343345005612106e-02, 3.671672502806052e-02, 3.671672502806055e-02, 7.343345005612113e-02, 3.671672502806055e-02, 1.143555861673508e-02, 2.287111723347015e-02, 1.143555861673508e-02, 1.509978772575727e-02, 3.019957545151981e-02, 1.509978772575727e-02, 2.325590628692890e-02, 4.651181257385397e-02, 2.325590628692890e-02, 5.695197505979902e-02, 1.139039501195980e-01, 5.695197505979902e-02, 8.038836550948462e-02, 1.607767310189688e-01, 8.038836550948462e-02, 8.038836550948546e-02, 1.607767310189699e-01, 8.038836550948546e-02, 3.766503130634403e-03, 7.533006261480646e-03, 3.766503130634403e-03, 1.429780572121755e-03, 2.859561103419824e-03, 1.429780572121755e-03, 1.789548516147994e-03, 3.579097021043737e-03, 1.789548516147994e-03, 7.347310657014026e-02, 1.469462131402798e-01, 7.347310657014026e-02, 6.416961635882845e-03, 1.283392326620360e-02, 6.416961635882845e-03, 6.416961639262504e-03, 1.283392328300462e-02, 6.416961639262504e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
