
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_hcth_a_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.112216520329560e-01, -1.112209412507212e-01, -1.112190293680334e-01, -1.112295778200734e-01, -1.112238735317306e-01, -1.112238735317306e-01, -8.098821229252595e-02, -8.098484228389376e-02, -8.090724149955769e-02, -8.104580228224155e-02, -8.098466560123926e-02, -8.098466560123926e-02, -5.369966888442182e-02, -5.375778145340884e-02, -5.451373675282986e-02, -5.465150407520455e-02, -5.459919976802431e-02, -5.459919976802431e-02, -2.157655086062852e-02, -2.310818571284488e-02, -5.584674857773137e-02, 6.624484416810931e-04, -1.012765663163575e-02, -1.012765663163574e-02, 6.899466403913710e-03, 7.226406811478363e-03, 2.655959245971794e-02, 4.138830151131714e-03, 5.131668980766753e-03, 5.131668980766760e-03, -7.717857604854576e-02, -7.703577845160840e-02, -7.717271769225151e-02, -7.704665369649889e-02, -7.710587920530658e-02, -7.710587920530658e-02, -7.785638269268989e-02, -7.798837477033789e-02, -7.774402273496804e-02, -7.789471963006832e-02, -7.794541091425623e-02, -7.794541091425623e-02, -4.536862757932934e-02, -3.526047593837857e-02, -4.531846359400640e-02, -3.573866220795344e-02, -4.451386731633278e-02, -4.451386731633278e-02, 2.361450977508036e-02, -8.911753919552536e-03, 2.535928240928430e-02, -4.981557003874067e-02, 1.115730294305406e-02, 1.115730294305406e-02, 3.229003889588527e-03, 4.050137155687024e-03, 3.127847037265066e-03, 2.911131669660379e-02, 3.741770711351789e-03, 3.741770711351787e-03, -3.056638151541432e-02, -3.391287393919919e-02, -3.269803493108295e-02, -3.171489170454164e-02, -3.220201267296391e-02, -3.220201267296391e-02, -2.927544893482689e-02, -4.763388531974153e-02, -4.515158883533900e-02, -4.027195953006252e-02, -4.303288828674172e-02, -4.303288828674172e-02, -3.645459780909716e-02, -2.220534721323968e-02, -3.346471219612743e-02, -4.208331732265195e-02, -3.976544092443735e-02, -3.976544092443737e-02, -4.626733458230323e-02, 2.612816418160075e-02, 2.960271018341771e-02, -3.964970581043696e-02, 2.452043139815131e-02, 2.452043139815134e-02, 9.389704132293673e-03, 1.115339653405023e-03, 2.318452408828793e-03, 2.597403442184156e-02, 3.473422634803145e-03, 3.473422634803127e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_hcth_a_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.903706243047824e-02, -4.903634494366046e-02, -4.903434685547014e-02, -4.904499948640209e-02, -4.903924714883038e-02, -4.903924714883038e-02, -4.323250068779574e-02, -4.322609426338594e-02, -4.307852076737223e-02, -4.333722294273837e-02, -4.322504492686489e-02, -4.322504492686489e-02, -4.275297061672154e-02, -4.320503483606506e-02, -5.633184960957958e-02, -5.577097219488183e-02, -5.531849769654310e-02, -5.531849769654310e-02, -8.004957331694156e-02, -7.766729265839706e-02, -4.061099389112154e-02, -8.091272373240049e-02, -8.566538102689839e-02, -8.566538102689832e-02, 8.927109169911950e-03, 9.328716567870741e-03, 2.439275057357531e-02, 5.436890231428202e-03, 6.703599724595885e-03, 6.703599724595903e-03, -3.464972396275331e-02, -3.461087686769447e-02, -3.464808422086332e-02, -3.461375148717434e-02, -3.462963747848197e-02, -3.462963747848197e-02, -8.287421988000536e-02, -8.120798128392120e-02, -8.702104976847110e-02, -8.548827831491534e-02, -7.999796934836544e-02, -7.999796934836544e-02, -2.462254744592218e-02, -2.385233160066245e-02, -2.610225346212057e-02, -2.088837015182762e-02, -2.327069730959904e-02, -2.327069730959904e-02, -3.353777532708836e-02, -9.388500815882403e-02, -2.545539959445497e-02, -3.317341982482369e-02, -6.295649863102078e-02, -6.295649863102078e-02, 4.258887564893127e-03, 5.321360404645297e-03, 4.116511321851403e-03, 6.358571431440863e-03, 4.914359755668530e-03, 4.914359755668519e-03, -2.952782147706767e-02, -2.358793922196184e-02, -2.554739560486989e-02, -2.739945049609802e-02, -2.646085127536007e-02, -2.646085127536007e-02, -3.035446063299257e-02, -3.751765070294291e-02, -2.710433448936655e-02, -2.031826996060260e-02, -2.305418248074217e-02, -2.305418248074217e-02, -2.349531039472077e-02, -9.320620940465367e-02, -7.688997474801507e-02, -3.791818929628270e-02, -5.580420951901434e-02, -5.580420951901438e-02, -3.730295140626994e-02, 2.515105433756061e-02, 2.035948016790149e-02, -2.801553037022628e-02, -1.941366761608006e-02, -1.941366761608005e-02, 1.197230874513045e-02, 1.484629960250593e-03, 3.069442590755671e-03, -1.239177620907810e-02, 4.566866428509416e-03, 4.566866428509359e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_hcth_a_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.745119046042310e-10, -1.745145488370580e-10, -1.745175799971062e-10, -1.744784199944147e-10, -1.745001796429379e-10, -1.745001796429379e-10, -7.135509134276546e-07, -7.137328481467135e-07, -7.178651975635140e-07, -7.100529830427170e-07, -7.136874652453218e-07, -7.136874652453218e-07, -6.217087398282785e-04, -6.038535098613662e-04, -1.442733512849857e-04, -1.608518645305699e-04, -1.753594549373354e-04, -1.753594549373354e-04, 4.073085754782501e-01, 3.741359518950110e-01, -4.037025152960978e-04, 1.109536491713779e+00, 8.020440219491963e-01, 8.020440219491962e-01, 1.252450606331347e+01, 1.315999007360967e+01, 5.165895254169246e+00, 1.192206573589833e+01, 1.489112722486548e+01, 1.489112722486004e+01, -1.962795855192780e-07, -1.972115294652860e-07, -1.963165903374034e-07, -1.971393740432344e-07, -1.967550241290399e-07, -1.967550241290399e-07, -2.778610395653137e-07, -4.800684205439466e-07, 2.101988873727222e-07, 1.951168417192496e-08, -6.248930100011366e-07, -6.248930100011366e-07, -3.590712533169979e-03, -5.232794438427915e-03, -4.385887489075512e-03, -8.636242507844515e-03, -3.761396588427259e-03, -3.761396588427259e-03, 2.084348355635517e+00, 3.792742823925778e-01, 2.440195394036000e+00, -3.047035103835438e-05, 1.980682129302984e+00, 1.980682129302984e+00, 1.595885912538294e+01, 1.405218559660560e+01, 8.964124364380072e+01, 4.640958078905951e+00, 4.127421209663289e+01, 4.127421209663540e+01, -6.965192497676487e-03, -7.736590837506931e-03, -7.639771097330950e-03, -7.352909223503710e-03, -7.518630711557182e-03, -7.518630711557182e-03, -9.000645444627831e-03, -2.810153009441976e-03, -5.008263732107283e-03, -7.656556116794389e-03, -6.272074364365351e-03, -6.272074364365351e-03, -4.158092139271720e-03, 1.424166523857293e-01, 5.059605856023600e-02, -8.472526866919383e-03, 1.062462142542544e-02, 1.062462142542556e-02, -3.828032617439821e-03, 4.793486943401144e+00, 4.227212996089681e+00, -2.446150355471024e-02, 4.292064185963087e+00, 4.292064185963087e+00, 9.694602250948813e+00, 7.270828987797508e+01, 3.440890475248948e+01, 4.563459856414755e+00, 5.237612390390313e+01, 5.237612390392005e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
