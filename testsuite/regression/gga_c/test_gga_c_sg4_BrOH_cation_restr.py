
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sg4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.589498949890138e-02, -4.589582349690484e-02, -4.589819411085505e-02, -4.588581455026536e-02, -4.589249085490849e-02, -4.589249085490849e-02, -3.607162154033733e-02, -3.607677097570867e-02, -3.619609991837787e-02, -3.598926709883054e-02, -3.607783626023828e-02, -3.607783626023828e-02, -1.777626292928833e-02, -1.753217172852415e-02, -1.203800046397974e-02, -1.229827180192426e-02, -1.242380302900704e-02, -1.242380302900704e-02, -1.591536490339788e-03, -1.826506824884892e-03, -2.095959633900148e-02, -3.143875314612745e-04, -6.847425542049197e-04, -6.847425542049265e-04, -7.442198246654957e-11, -1.064387226916982e-10, -3.928852196348800e-07, -3.145056614810385e-12, -1.574528387278152e-11, -1.574528387278152e-11, -5.359733709627350e-02, -5.381225011839199e-02, -5.360619092625542e-02, -5.379591215697933e-02, -5.370666824460229e-02, -5.370666824460229e-02, -1.517144565189522e-02, -1.560541109713555e-02, -1.423959906786494e-02, -1.460696779608331e-02, -1.588598815850908e-02, -1.588598815850908e-02, -3.065111113101087e-02, -5.285905297099854e-02, -2.739139993636990e-02, -4.731894749463118e-02, -3.304887109595280e-02, -3.304887109595280e-02, -3.905336590103266e-05, -5.402491848866155e-04, -2.905112705700906e-05, -6.819894655699525e-02, -1.400494717205964e-04, -1.400494717205964e-04, -1.102415802721132e-12, -3.508844184952069e-12, -1.104723764631339e-11, -5.881075600854833e-06, -1.040961199172655e-11, -1.040961199172655e-11, -5.945521235040713e-02, -5.213149937263152e-02, -5.458663198625369e-02, -5.671795634292618e-02, -5.564108184285802e-02, -5.564108184285802e-02, -6.119488818304175e-02, -1.678717951958722e-02, -2.544384434728588e-02, -3.726117365640825e-02, -3.093508522812012e-02, -3.093508522812012e-02, -5.244866450712226e-02, -1.202642836060130e-03, -2.870923300775350e-03, -1.302938751336267e-02, -6.410077826640745e-03, -6.410077826640745e-03, -1.595069922234957e-02, -2.748832480845802e-07, -1.367406327959928e-06, -1.880984837109544e-02, -2.568207118824729e-05, -2.568207118824382e-05, -3.545990918251748e-10, -2.044062794034549e-14, -4.817016295885786e-13, -1.838258006440525e-05, -9.451810341426061e-12, -9.451812509830406e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sg4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.208344193089451e-01, -1.208355228062378e-01, -1.208386660329758e-01, -1.208222850493463e-01, -1.208311187979033e-01, -1.208311187979033e-01, -1.038325269722915e-01, -1.038395941086103e-01, -1.040031160246793e-01, -1.037197996974666e-01, -1.038411194632593e-01, -1.038411194632593e-01, -7.130336923482979e-02, -7.077557078823021e-02, -5.653947192394395e-02, -5.732974438325001e-02, -5.770436714291796e-02, -5.770436714291796e-02, -1.031009420902799e-02, -1.165767127726668e-02, -7.794674203567704e-02, -2.270070051690905e-03, -4.742304901146749e-03, -4.742304901146751e-03, -6.353140210578547e-10, -9.071457023324242e-10, -3.194445544139530e-06, -2.716782765328899e-11, -1.351889307138802e-10, -1.351889216918474e-10, -1.254580848187299e-01, -1.256632684139314e-01, -1.254665668352780e-01, -1.256477142214763e-01, -1.255625847970195e-01, -1.255625847970195e-01, -6.338717538194427e-02, -6.456264259007545e-02, -6.076243117926058e-02, -6.179981131573761e-02, -6.532289949810252e-02, -6.532289949810252e-02, -8.748282228205241e-02, -8.774110429713890e-02, -8.391102142924571e-02, -8.664112506838331e-02, -8.907687463178134e-02, -8.907687463178134e-02, -3.000567218524054e-04, -3.823335208970839e-03, -2.243780653181243e-04, -1.192226856384709e-01, -1.040104825302009e-03, -1.040104825302009e-03, -9.549686784664628e-12, -3.029037782973138e-11, -9.455369532915268e-11, -4.646785201104481e-05, -8.930498317911817e-11, -8.930498561422408e-11, -7.769945662595822e-02, -8.482520268160411e-02, -8.276929697522468e-02, -8.070949105936681e-02, -8.178181810824381e-02, -8.178181810824381e-02, -7.398049515722341e-02, -6.781916020529609e-02, -8.139450523593689e-02, -8.802443839148633e-02, -8.587733948509162e-02, -8.587733948509162e-02, -8.988226247345529e-02, -8.117270660185305e-03, -1.778870223848126e-02, -5.652682778123203e-02, -3.449933834629851e-02, -3.449933834629850e-02, -6.546143097196679e-02, -2.242432731866772e-06, -1.099579400863007e-05, -6.733019638378754e-02, -1.982374894523433e-04, -1.982374894523299e-04, -3.008088382036797e-09, -1.785136740855248e-13, -4.177254680867983e-12, -1.427273878120982e-04, -8.106794835443970e-11, -8.106794789297697e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sg4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.896260490847525e-10, 1.896297032780390e-10, 1.896350480266432e-10, 1.895809162164995e-10, 1.896108261471670e-10, 1.896108261471670e-10, 1.075454073843261e-06, 1.075691156468258e-06, 1.081060624372487e-06, 1.070744149690254e-06, 1.075610255835167e-06, 1.075610255835167e-06, 1.844222831205054e-03, 1.822151204354311e-03, 1.290613940364637e-03, 1.270376853573119e-03, 1.299211311299825e-03, 1.299211311299825e-03, 6.631586606753402e-02, 7.427701616385259e-02, 1.021826869386895e-03, 2.727273499451672e-02, 4.525793065929754e-02, 4.525793065929749e-02, 8.386701373287610e-05, 1.055712352523505e-04, 1.716942162319271e-03, 1.772159599269785e-05, 5.010479733888072e-05, 5.010479442242335e-05, 2.879189550245100e-07, 2.899096241330320e-07, 2.879985008631566e-07, 2.897556646711943e-07, 2.889314182090511e-07, 2.889314182090511e-07, 5.497060793410887e-06, 5.511490332752127e-06, 5.165996575760235e-06, 5.180480971987347e-06, 5.672056571369353e-06, 5.672056571369353e-06, 7.385787937006031e-03, 9.975699567138174e-03, 9.528862595092787e-03, 1.561576912399940e-02, 7.492299036222722e-03, 7.492299036222722e-03, 9.036351404432801e-03, 1.534548925205747e-02, 8.748060238454938e-03, 6.773031240794704e-05, 2.399463496316955e-02, 2.399463496316955e-02, 1.555230676383128e-05, 2.293619414432604e-05, 3.997675623271254e-04, 6.612532353133372e-03, 1.475902513267414e-04, 1.475902565712748e-04, 1.676806924595409e-02, 1.469935678773911e-02, 1.543411859527828e-02, 1.605075876756752e-02, 1.574304052752434e-02, 1.574304052752434e-02, 1.943043178264397e-02, 8.545827994327675e-03, 1.131010314061446e-02, 1.454638335014975e-02, 1.290118963777756e-02, 1.290118963777756e-02, 7.835173110343013e-03, 1.496540242787494e-02, 1.998313591169421e-02, 3.613969931504474e-02, 2.924270060492333e-02, 2.924270060492336e-02, 1.224287343249135e-02, 1.307575469137804e-03, 2.592810978705277e-03, 6.758411069743812e-02, 1.546551393205904e-02, 1.546551393206068e-02, 1.270764176074472e-04, 1.561591313891472e-05, 2.753142052593928e-05, 1.324771818659040e-02, 1.899461280626507e-04, 1.899461259992400e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
