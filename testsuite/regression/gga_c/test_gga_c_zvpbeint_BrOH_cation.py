
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zvpbeint_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.813844524750493e-02, -5.813930585545961e-02, -5.814175327522385e-02, -5.812897857495036e-02, -5.813586785952615e-02, -5.813586785952615e-02, -4.771139327005637e-02, -4.771658715401253e-02, -4.783690003887225e-02, -4.762828835057875e-02, -4.771765306892668e-02, -4.771765306892668e-02, -3.207321823035653e-02, -3.183875722133130e-02, -2.611672966248785e-02, -2.639194753417760e-02, -2.642168104038127e-02, -2.642168104038127e-02, -8.258732921451767e-03, -8.938454429232738e-03, -3.477255652671827e-02, -2.853127807429291e-03, -1.399686683607911e-02, -1.399686683607912e-02, -5.077666252921789e-06, -8.442138005536684e-06, -1.623806232245797e-05, -1.902485246511182e-08, -2.448489007253907e-03, -2.448489007253907e-03, -6.511881307813142e-02, -6.532554522784820e-02, -6.512733420084554e-02, -6.530983596026337e-02, -6.522399947772987e-02, -6.522399947772987e-02, -2.581248990043403e-02, -2.631870559490906e-02, -2.468248687512033e-02, -2.511860759411007e-02, -2.665745387840227e-02, -2.665745387840227e-02, -4.269266324057781e-02, -5.787298949321960e-02, -4.003769064757652e-02, -5.348125000555196e-02, -4.436017302945765e-02, -4.436017302945761e-02, -6.010896709799790e-04, -4.450299707840923e-03, -4.703305427919691e-04, -7.551877302177991e-02, -1.538688991116130e-03, -1.538688991116130e-03, -6.392340927750904e-07, -1.052988867758162e-08, -1.051644364951981e-06, -1.235386488491995e-04, -1.510541865571354e-03, -1.510541865571355e-03, -6.120193249539548e-02, -5.675747003858342e-02, -5.825541181704667e-02, -5.954714938291261e-02, -5.889522310188668e-02, -5.889522310188668e-02, -6.199179116454931e-02, -3.135269138821963e-02, -3.849782808856354e-02, -4.688334645886509e-02, -4.252707364217251e-02, -4.252707364217251e-02, -5.797465933730961e-02, -7.675052521205268e-03, -1.276322816623430e-02, -2.717370850625575e-02, -1.930010541689720e-02, -1.930010541689720e-02, -3.051128704814129e-02, -1.005335375209304e-05, -3.856383626411192e-05, -3.181661588747021e-02, -3.994428108268361e-04, -3.994428108268500e-04, -5.483938091072407e-07, -6.997760552442112e-12, -3.099893086346743e-06, -3.058465615235241e-04, -1.059278051327750e-03, -1.059278051327749e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zvpbeint_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.354872329209818e-01, -1.354873938085684e-01, -1.354881380228868e-01, -1.354884093249514e-01, -1.354911664535953e-01, -1.354908664974075e-01, -1.354762852217015e-01, -1.354772367879446e-01, -1.354836512579414e-01, -1.354852435971259e-01, -1.354836512579414e-01, -1.354852435971259e-01, -1.160269944755718e-01, -1.160285961440277e-01, -1.160320602826716e-01, -1.160338893761139e-01, -1.161541453769937e-01, -1.161517237134486e-01, -1.159469870452202e-01, -1.159453418370130e-01, -1.160561926901291e-01, -1.160122734728314e-01, -1.160561926901291e-01, -1.160122734728314e-01, -8.329274948508715e-02, -8.294080743167517e-02, -8.311846055641872e-02, -8.268836279216533e-02, -7.628782190035605e-02, -7.682086732396273e-02, -7.706858184633253e-02, -7.690039642194575e-02, -7.475946077302727e-02, -7.937307949467930e-02, -7.475946077302727e-02, -7.937307949467930e-02, -3.451570752308530e-02, -3.333290133269495e-02, -3.655453306835037e-02, -3.512543736822223e-02, -8.910558788381627e-02, -8.601554051824076e-02, -1.457959125912741e-02, -1.440801854686024e-02, -5.616761731603602e-03, 6.777637512713809e-02, -5.616761731603631e-03, 6.777637512713823e-02, 2.837095821338207e-04, -2.175123524105613e-04, 4.228645398275842e-04, -3.127867079057639e-04, 9.673490405288823e-05, -2.260204716500832e-04, -3.167406417996985e-06, 3.399608746722613e-06, -2.735660755881653e-03, -5.360842914953622e-03, -2.735660755881652e-03, -5.360842914953622e-03, -1.345287097938967e-01, -1.345642415224052e-01, -1.346817558958226e-01, -1.347183173259547e-01, -1.345347390035860e-01, -1.345709357692142e-01, -1.346705458019577e-01, -1.347062777232100e-01, -1.346065834534254e-01, -1.346428130132412e-01, -1.346065834534254e-01, -1.346428130132412e-01, -8.355383394849587e-02, -8.355759632153403e-02, -8.447637724409239e-02, -8.449694762847501e-02, -8.152536886849715e-02, -8.140118457752986e-02, -8.236418749299619e-02, -8.223305811480730e-02, -8.491015374282056e-02, -8.524461305171890e-02, -8.491015374282056e-02, -8.524461305171890e-02, -8.484161166657168e-02, -8.512180066931894e-02, -8.214692165647297e-02, -8.209010636029007e-02, -8.465222409539835e-02, -8.100794934107680e-02, -8.210188209923037e-02, -7.822874476174189e-02, -8.267608722265350e-02, -8.819180499985992e-02, -8.267608722265347e-02, -8.819180499985987e-02, -3.500561676206660e-03, -3.473420570671925e-03, -2.133330443138162e-02, -2.124002020639509e-02, -2.705479641075351e-03, -2.781458436790089e-03, -1.172071431296552e-01, -1.172800682559537e-01, -8.467434380956922e-03, -8.234730054639219e-03, -8.467434380956922e-03, -8.234730054639219e-03, 5.399993279592427e-05, -4.565422504161089e-05, 2.028738543043106e-06, -1.908640565768810e-06, 6.185924031886003e-05, -4.815773772966896e-05, -7.588043931942292e-04, -7.551552726104834e-04, 1.009117732390566e-02, -3.351681449299957e-03, 1.009117732390566e-02, -3.351681449299956e-03, -7.543211196682420e-02, -7.494430555456358e-02, -7.953383312152479e-02, -7.905657870285715e-02, -7.829693191822065e-02, -7.781431899587667e-02, -7.711077934117434e-02, -7.662810498268886e-02, -7.772305254488665e-02, -7.724043839872131e-02, -7.772305254488665e-02, -7.724043839872131e-02, -7.300385632151112e-02, -7.258685969218975e-02, -7.788083829207763e-02, -7.750723304109594e-02, -8.156151489954162e-02, -8.112595707831038e-02, -8.199157604257462e-02, -8.160442731796612e-02, -8.223089650876347e-02, -8.184395888684251e-02, -8.223089650876347e-02, -8.184395888684251e-02, -8.420305749510523e-02, -8.399763191193087e-02, -3.300365723195858e-02, -3.283127798059248e-02, -4.725360769160489e-02, -4.680590451220045e-02, -6.925872650299471e-02, -6.883386165380073e-02, -5.954471312555726e-02, -5.956622058402086e-02, -5.954471312555724e-02, -5.956622058402086e-02, -7.602544215413642e-02, -7.544557746161779e-02, -6.382869184203943e-05, -6.374288844500267e-05, -2.139373915324088e-04, -2.612607508158713e-04, -7.069960704204310e-02, -6.943717676625534e-02, -2.312124852041840e-03, -2.375312139459860e-03, -2.312124852041892e-03, -2.375312139459884e-03, 4.645175985001413e-05, -4.016201970068344e-05, 8.856583725584155e-10, -9.596468947550669e-10, 1.711604770204253e-04, -1.307565225065475e-04, -1.836035616519789e-03, -1.814281512957579e-03, 1.133669062619705e-02, -3.515946647433771e-03, 1.133669062619709e-02, -3.515946647433779e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zvpbeint_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.955365005846136e-10, 3.910730011692272e-10, 1.955365005846136e-10, 1.955398085112910e-10, 3.910796170225820e-10, 1.955398085112910e-10, 1.955440257662510e-10, 3.910880515325019e-10, 1.955440257662510e-10, 1.954950367963791e-10, 3.909900735927582e-10, 1.954950367963791e-10, 1.955221935117903e-10, 3.910443870235807e-10, 1.955221935117903e-10, 1.955221935117903e-10, 3.910443870235807e-10, 1.955221935117903e-10, 1.084799072629435e-06, 2.169598145258871e-06, 1.084799072629435e-06, 1.085005226487713e-06, 2.170010452975425e-06, 1.085005226487713e-06, 1.089656985679448e-06, 2.179313971358895e-06, 1.089656985679448e-06, 1.080588195367473e-06, 2.161176390734946e-06, 1.080588195367473e-06, 1.084918641605298e-06, 2.169837283210595e-06, 1.084918641605298e-06, 1.084918641605298e-06, 2.169837283210595e-06, 1.084918641605298e-06, 1.779307942155354e-03, 3.558615884310707e-03, 1.779307942155354e-03, 1.768752735454685e-03, 3.537505470909368e-03, 1.768752735454685e-03, 1.492870378468683e-03, 2.985740756937365e-03, 1.492870378468683e-03, 1.456489188623318e-03, 2.912978377246637e-03, 1.456489188623318e-03, 1.475736027219205e-03, 2.951472054438409e-03, 1.475736027219205e-03, 1.475736027219205e-03, 2.951472054438409e-03, 1.475736027219205e-03, 1.877633428244532e-01, 3.755266856489063e-01, 1.877633428244532e-01, 1.952781975156446e-01, 3.905563950312890e-01, 1.952781975156446e-01, 9.562519434705764e-04, 1.912503886941153e-03, 9.562519434705764e-04, 1.568915502173877e-01, 3.137831004347755e-01, 1.568915502173877e-01, -2.791944079898135e-01, -5.583888159796272e-01, -2.791944079898135e-01, -2.791944079898135e-01, -5.583888159796271e-01, -2.791944079898135e-01, -2.987028028369161e+00, -5.974056056737850e+00, -2.987028028369161e+00, -4.380232812829535e+00, -8.760465625658941e+00, -4.380232812829535e+00, 3.460947833839414e-02, 6.921895667678656e-02, 3.460947833839414e-02, -5.126193323751897e-02, -1.025238664768303e-01, -5.126193323751897e-02, -1.637576875992099e-02, -3.275153751984198e-02, -1.637576875992099e-02, -1.637576875992145e-02, -3.275153751984290e-02, -1.637576875992145e-02, 2.768029470386237e-07, 5.536058940772475e-07, 2.768029470386237e-07, 2.785210904948321e-07, 5.570421809896641e-07, 2.785210904948321e-07, 2.768714298548115e-07, 5.537428597096230e-07, 2.768714298548115e-07, 2.783880527401394e-07, 5.567761054802788e-07, 2.783880527401394e-07, 2.776770158445397e-07, 5.553540316890794e-07, 2.776770158445397e-07, 2.776770158445397e-07, 5.553540316890794e-07, 2.776770158445397e-07, 6.686541188454032e-06, 1.337308237690806e-05, 6.686541188454032e-06, 6.648304246794225e-06, 1.329660849358845e-05, 6.648304246794225e-06, 6.408882017521243e-06, 1.281776403504249e-05, 6.408882017521243e-06, 6.377751539312220e-06, 1.275550307862444e-05, 6.377751539312220e-06, 6.803534502308220e-06, 1.360706900461644e-05, 6.803534502308220e-06, 6.803534502308220e-06, 1.360706900461644e-05, 6.803534502308220e-06, 5.370839250226645e-03, 1.074167850045329e-02, 5.370839250226645e-03, 6.190852613094338e-03, 1.238170522618867e-02, 6.190852613094338e-03, 7.046669158583411e-03, 1.409333831716682e-02, 7.046669158583411e-03, 9.576331004107654e-03, 1.915266200821531e-02, 9.576331004107654e-03, 5.313306967382935e-03, 1.062661393476587e-02, 5.313306967382935e-03, 5.313306967382935e-03, 1.062661393476587e-02, 5.313306967382935e-03, 9.656630303478364e-02, 1.931326060695681e-01, 9.656630303478364e-02, 7.605226886612090e-02, 1.521045377322418e-01, 7.605226886612090e-02, 9.844438888693169e-02, 1.968887777738638e-01, 9.844438888693169e-02, 5.321882407557529e-05, 1.064376481511506e-04, 5.321882407557529e-05, 1.753124593377365e-01, 3.506249186754731e-01, 1.753124593377365e-01, 1.753124593377365e-01, 3.506249186754731e-01, 1.753124593377365e-01, -4.662682837872499e+00, -9.325365675741875e+00, -4.662682837872499e+00, -3.040331563715000e-02, -6.080663127265045e-02, -3.040331563715000e-02, -1.994879508372509e+01, -3.989759016744900e+01, -1.994879508372509e+01, 9.957621195225247e-02, 1.991524239045041e-01, 9.957621195225247e-02, -5.225239391566216e+03, -1.045047878313243e+04, -5.225239391566216e+03, -5.225239391566209e+03, -1.045047878313242e+04, -5.225239391566209e+03, 1.003329164637405e-02, 2.006658329274811e-02, 1.003329164637405e-02, 8.907338798762415e-03, 1.781467759752483e-02, 8.907338798762415e-03, 9.271861709977321e-03, 1.854372341995464e-02, 9.271861709977321e-03, 9.598505637103518e-03, 1.919701127420704e-02, 9.598505637103518e-03, 9.432277539926977e-03, 1.886455507985395e-02, 9.432277539926977e-03, 9.432277539926977e-03, 1.886455507985395e-02, 9.432277539926977e-03, 1.173486192129212e-02, 2.346972384258424e-02, 1.173486192129212e-02, 7.721700875760555e-03, 1.544340175152111e-02, 7.721700875760555e-03, 8.481408610967535e-03, 1.696281722193507e-02, 8.481408610967535e-03, 9.488062643941258e-03, 1.897612528788252e-02, 9.488062643941258e-03, 8.967965579037580e-03, 1.793593115807516e-02, 8.967965579037580e-03, 8.967965579037580e-03, 1.793593115807516e-02, 8.967965579037580e-03, 4.952309153758097e-03, 9.904618307516194e-03, 4.952309153758097e-03, 5.288719899162475e-02, 1.057743979832495e-01, 5.288719899162475e-02, 4.462467503409707e-02, 8.924935006819415e-02, 4.462467503409707e-02, 3.378884663720137e-02, 6.757769327440273e-02, 3.378884663720137e-02, 4.081853978321000e-02, 8.163707956642000e-02, 4.081853978321000e-02, 4.081853978321000e-02, 8.163707956642000e-02, 4.081853978321000e-02, 1.106958675840061e-02, 2.213917351680122e-02, 1.106958675840061e-02, 3.433126499494475e-02, 6.866252998989282e-02, 3.433126499494475e-02, 5.186160373563122e-02, 1.037232074712572e-01, 5.186160373563122e-02, 5.074327428968440e-02, 1.014865485793688e-01, 5.074327428968440e-02, 1.684818271197800e-01, 3.369636542395597e-01, 1.684818271197800e-01, 1.684818271197831e-01, 3.369636542395664e-01, 1.684818271197831e-01, -8.840870162906461e-02, -1.768174032580719e-01, -8.840870162906461e-02, 3.026161012832407e-03, 6.052322047383971e-03, 3.026161012832407e-03, -9.164407304048395e+01, -1.832881460809578e+02, -9.164407304048395e+01, 1.563335452353027e-01, 3.126670904706059e-01, 1.563335452353027e-01, -7.245461493362381e+03, -1.449092298672476e+04, -7.245461493362381e+03, -7.245461493362428e+03, -1.449092298672486e+04, -7.245461493362428e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
