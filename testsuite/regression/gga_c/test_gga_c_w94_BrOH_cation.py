
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_w94_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.449582738397287e-02, -5.449674430144460e-02, -5.449935023367584e-02, -5.448573859556127e-02, -5.449307955070898e-02, -5.449307955070898e-02, -4.364001242985575e-02, -4.364680529254317e-02, -4.380409478717880e-02, -4.353101286936649e-02, -4.364808221882627e-02, -4.364808221882627e-02, -2.639823488921958e-02, -2.605265822230825e-02, -1.843412361139105e-02, -1.875294813812124e-02, -1.874115794548921e-02, -1.874115794548921e-02, -3.752681036477567e-03, -4.156057889327138e-03, -2.975174723299224e-02, -1.145016254393472e-03, -1.269579904960183e-03, -1.269579904960183e-03, -6.809051581545181e-08, -8.357221987232185e-08, -1.284172824530477e-05, -1.105219944226178e-08, -1.885331125079648e-08, -1.885331125079653e-08, -6.315388632466491e-02, -6.335436511395495e-02, -6.316216618129360e-02, -6.333916812513092e-02, -6.325603148896446e-02, -6.325603148896446e-02, -1.732173569000749e-02, -1.783569079508977e-02, -1.620085411610431e-02, -1.662916106149499e-02, -1.818228204508186e-02, -1.818228204508186e-02, -4.664894151931021e-02, -7.305708753801558e-02, -4.226434584273046e-02, -6.868717865955816e-02, -4.968687797368876e-02, -4.968687797368877e-02, -2.708663754252241e-04, -1.807088931984927e-03, -2.184387292733190e-04, -7.666958212328107e-02, -6.293719308147038e-04, -6.293719308147038e-04, -6.001788755167819e-09, -1.170481031056870e-08, -2.123575379871444e-08, -7.353486977497675e-05, -1.821064436562120e-08, -1.821064436562117e-08, -7.783468403829630e-02, -7.311150344183294e-02, -7.500206870729759e-02, -7.639867658304460e-02, -7.572232309371656e-02, -7.572232309371656e-02, -7.856581225814602e-02, -2.697020724546596e-02, -3.986688994776686e-02, -5.699617160142850e-02, -4.803856885920037e-02, -4.803856885920037e-02, -7.232698077382706e-02, -3.358302885951512e-03, -6.517328694405591e-03, -2.242506792942650e-02, -1.227430287790208e-02, -1.227430287790209e-02, -2.612983946167201e-02, -1.038925857399704e-05, -2.889322302630185e-05, -3.158825717248323e-02, -1.921263599147888e-04, -1.921263599147889e-04, -1.731516988135636e-07, -6.188402259195160e-10, -3.657846013963828e-09, -1.545554033149107e-04, -1.754750653939872e-08, -1.754750653939870e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_w94_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.368757586777818e-01, -1.368898456740882e-01, -1.368726170012024e-01, -1.368925746263494e-01, -1.368926802654312e-01, -1.368713405559529e-01, -1.368620347835596e-01, -1.369081019895688e-01, -1.368509531058933e-01, -1.369158888193583e-01, -1.368509531058933e-01, -1.369158888193583e-01, -1.324273911434665e-01, -1.324818111997615e-01, -1.324304603618770e-01, -1.324899229871369e-01, -1.326242922602682e-01, -1.325524322080610e-01, -1.323921078234931e-01, -1.323367937614079e-01, -1.327086835177125e-01, -1.322137654434563e-01, -1.327086835177125e-01, -1.322137654434563e-01, -1.020741661547656e-01, -1.006318195788789e-01, -1.013180872970568e-01, -9.968543382844210e-02, -7.780895177001154e-02, -7.927057956039538e-02, -7.993004475819633e-02, -7.924479514726324e-02, -7.629392084622408e-02, -8.306762120999672e-02, -7.629392084622408e-02, -8.306762120999672e-02, -1.923656583772744e-02, -1.830033154665668e-02, -2.125559660380985e-02, -2.012363974813580e-02, -1.127207906616519e-01, -1.059857969728562e-01, -5.974863299630841e-03, -5.831437452594896e-03, -5.907372026782375e-03, -1.015503343922115e-02, -5.907372026782372e-03, -1.015503343922114e-02, -3.693513148559711e-07, -3.459876071421962e-07, -4.549152893889176e-07, -4.236272367176500e-07, -6.941495770762984e-05, -6.532662957171958e-05, -5.712734439644240e-08, -5.871407141134726e-08, -9.050408117296006e-08, -1.434592057924651e-07, -9.050408117296024e-08, -1.434592057924654e-07, -1.297266813771965e-01, -1.302587022220767e-01, -1.294927341174170e-01, -1.300357897823839e-01, -1.297140016748468e-01, -1.302526736162499e-01, -1.295143500152361e-01, -1.300491004329568e-01, -1.296071235417032e-01, -1.301464961659594e-01, -1.296071235417032e-01, -1.301464961659594e-01, -7.550918463029792e-02, -7.556089158958365e-02, -7.722803540044254e-02, -7.739163009684735e-02, -7.183005400192510e-02, -7.132051174851735e-02, -7.337382507260298e-02, -7.283636222917052e-02, -7.795860949859777e-02, -7.902331613993269e-02, -7.795860949859777e-02, -7.902331613993269e-02, -1.271102580966323e-01, -1.290619024886874e-01, -9.984770146820025e-02, -9.890537874057960e-02, -1.303995964524317e-01, -1.202446139865717e-01, -1.146670716803641e-01, -9.923856309007942e-02, -1.206147981545047e-01, -1.357509022879205e-01, -1.206147981545048e-01, -1.357509022879205e-01, -1.425330251636749e-03, -1.398791441209838e-03, -9.310325502294346e-03, -9.195231338788738e-03, -1.175768244797717e-03, -1.108140586112885e-03, -1.012014807662545e-01, -1.021838388661168e-01, -3.376712709600979e-03, -3.168440457542146e-03, -3.376712709600979e-03, -3.168440457542146e-03, -3.223670252011744e-08, -3.073054656758387e-08, -6.211080940577712e-08, -6.055191094198571e-08, -1.148860039991070e-07, -1.078826015151011e-07, -3.869890532272345e-04, -3.816079546718407e-04, -1.124514554046966e-07, -8.870479015345642e-08, -1.124514554046964e-07, -8.870479015345628e-08, -8.688400928674928e-02, -8.270168014448773e-02, -9.977374897426680e-02, -9.581890380693026e-02, -9.488092199673237e-02, -9.082476139733071e-02, -9.102612900724125e-02, -8.691963201600010e-02, -9.291677109891817e-02, -8.883440872857019e-02, -9.291677109891817e-02, -8.883440872857019e-02, -8.392950989234503e-02, -8.012556259661149e-02, -1.026521758183768e-01, -1.010887577759145e-01, -1.242772752495413e-01, -1.219288962077810e-01, -1.255124289887516e-01, -1.226369866211811e-01, -1.286798737839076e-01, -1.261661436036973e-01, -1.286798737839076e-01, -1.261661436036973e-01, -1.030026428990743e-01, -1.008163956253605e-01, -1.702156707654619e-02, -1.678544556869900e-02, -3.198040219202471e-02, -3.132007690723194e-02, -9.003549628990873e-02, -8.850642163849709e-02, -5.560413403531529e-02, -5.573798358473252e-02, -5.560413403531532e-02, -5.573798358473252e-02, -1.006537979409402e-01, -9.859204545254277e-02, -5.479038167520345e-05, -5.397410301080825e-05, -1.545743137443925e-04, -1.480520803569520e-04, -1.114829916595531e-01, -1.072862220730444e-01, -1.034927617833832e-03, -9.738489986746688e-04, -1.034927617833832e-03, -9.738489986746691e-04, -9.285443161992005e-07, -8.873255048889970e-07, -3.251662780462440e-09, -3.228228423049690e-09, -1.984681224204092e-08, -1.857874449382832e-08, -8.175590511914139e-04, -7.958879834451451e-04, -1.061514363845269e-07, -8.573162019264731e-08, -1.061514363845267e-07, -8.573162019264720e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_w94_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_w94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.085218702688433e-10, 4.170437405376866e-10, 2.085218702688433e-10, 2.085223059574645e-10, 4.170446119149290e-10, 2.085223059574645e-10, 2.085179842205134e-10, 4.170359684410267e-10, 2.085179842205134e-10, 2.085116212232013e-10, 4.170232424464025e-10, 2.085116212232013e-10, 2.085158482552697e-10, 4.170316965105394e-10, 2.085158482552697e-10, 2.085158482552697e-10, 4.170316965105394e-10, 2.085158482552697e-10, 1.419578397253845e-06, 2.839156794507689e-06, 1.419578397253845e-06, 1.419833246733112e-06, 2.839666493466223e-06, 1.419833246733112e-06, 1.425553297722762e-06, 2.851106595445525e-06, 1.425553297722762e-06, 1.414271666372093e-06, 2.828543332744186e-06, 1.414271666372093e-06, 1.419710592249895e-06, 2.839421184499791e-06, 1.419710592249895e-06, 1.419710592249895e-06, 2.839421184499791e-06, 1.419710592249895e-06, 2.664535762439770e-03, 5.329071524879539e-03, 2.664535762439770e-03, 2.628702897423342e-03, 5.257405794846684e-03, 2.628702897423342e-03, 1.798518537743531e-03, 3.597037075487062e-03, 1.798518537743531e-03, 1.770993141660957e-03, 3.541986283321915e-03, 1.770993141660957e-03, 1.794479400227584e-03, 3.588958800455168e-03, 1.794479400227584e-03, 1.794479400227584e-03, 3.588958800455168e-03, 1.794479400227584e-03, 1.108723418046413e-01, 2.217446836092827e-01, 1.108723418046413e-01, 1.212509308408301e-01, 2.425018616816601e-01, 1.212509308408301e-01, 1.470019571274147e-03, 2.940039142548294e-03, 1.470019571274147e-03, 6.442140998222080e-02, 1.288428199644416e-01, 6.442140998222080e-02, 5.641966992159184e-02, 1.128393398431837e-01, 5.641966992159184e-02, 5.641966992159181e-02, 1.128393398431836e-01, 5.641966992159181e-02, 4.259909569228942e-02, 8.519819138457885e-02, 4.259909569228942e-02, 4.609194282543053e-02, 9.218388565086107e-02, 4.609194282543053e-02, 3.256448328047024e-02, 6.512896656094046e-02, 3.256448328047024e-02, 3.420241771475478e-02, 6.840483542950956e-02, 3.420241771475478e-02, 3.314232828544030e-02, 6.628465657088060e-02, 3.314232828544030e-02, 3.314232828544041e-02, 6.628465657088083e-02, 3.314232828544041e-02, 2.697902347063329e-07, 5.395804694126657e-07, 2.697902347063329e-07, 2.699677384587928e-07, 5.399354769175856e-07, 2.699677384587928e-07, 2.697957270271497e-07, 5.395914540542995e-07, 2.697957270271497e-07, 2.699526935352782e-07, 5.399053870705563e-07, 2.699526935352782e-07, 2.698835135890976e-07, 5.397670271781952e-07, 2.698835135890976e-07, 2.698835135890976e-07, 5.397670271781952e-07, 2.698835135890976e-07, 6.740301605072206e-06, 1.348060321014441e-05, 6.740301605072206e-06, 6.798130779136827e-06, 1.359626155827365e-05, 6.798130779136827e-06, 6.246774689609065e-06, 1.249354937921813e-05, 6.246774689609065e-06, 6.296756236197995e-06, 1.259351247239599e-05, 6.296756236197995e-06, 7.024787133874488e-06, 1.404957426774898e-05, 7.024787133874488e-06, 7.024787133874488e-06, 1.404957426774898e-05, 7.024787133874488e-06, 1.097768659020756e-02, 2.195537318041512e-02, 1.097768659020756e-02, 8.285591344458694e-03, 1.657118268891739e-02, 8.285591344458694e-03, 1.442617795546438e-02, 2.885235591092875e-02, 1.442617795546438e-02, 1.625946784274118e-02, 3.251893568548235e-02, 1.625946784274118e-02, 1.083596165062329e-02, 2.167192330124659e-02, 1.083596165062329e-02, 1.083596165062329e-02, 2.167192330124659e-02, 1.083596165062329e-02, 3.838866049290955e-02, 7.677732098581910e-02, 3.838866049290955e-02, 3.374205243227305e-02, 6.748410486454610e-02, 3.374205243227305e-02, 4.009913731289968e-02, 8.019827462579937e-02, 4.009913731289968e-02, 3.493885190493038e-05, 6.987770380986076e-05, 3.493885190493038e-05, 6.826028873810580e-02, 1.365205774762116e-01, 6.826028873810580e-02, 6.826028873810580e-02, 1.365205774762116e-01, 6.826028873810580e-02, 4.640430176319817e-02, 9.280860352639635e-02, 4.640430176319817e-02, 4.205522904036237e-02, 8.411045808072473e-02, 4.205522904036237e-02, 4.268298787673018e-01, 8.536597575346035e-01, 4.268298787673018e-01, 4.935631406213439e-02, 9.871262812426877e-02, 4.935631406213439e-02, 1.429566532576548e-01, 2.859133065153097e-01, 1.429566532576548e-01, 1.429566532576544e-01, 2.859133065153088e-01, 1.429566532576544e-01, 7.538278738770309e-03, 1.507655747754062e-02, 7.538278738770309e-03, 1.228837290720995e-02, 2.457674581441990e-02, 1.228837290720995e-02, 1.103947460905168e-02, 2.207894921810336e-02, 1.103947460905168e-02, 9.696909365995220e-03, 1.939381873199044e-02, 9.696909365995220e-03, 1.040752300966773e-02, 2.081504601933546e-02, 1.040752300966773e-02, 1.040752300966773e-02, 2.081504601933546e-02, 1.040752300966773e-02, 5.830790170551658e-03, 1.166158034110332e-02, 5.830790170551658e-03, 1.285478528223231e-02, 2.570957056446461e-02, 1.285478528223231e-02, 1.734793615414808e-02, 3.469587230829617e-02, 1.734793615414808e-02, 2.013933975104628e-02, 4.027867950209257e-02, 2.013933975104628e-02, 1.933148665428902e-02, 3.866297330857804e-02, 1.933148665428902e-02, 1.933148665428902e-02, 3.866297330857804e-02, 1.933148665428902e-02, 6.761041799997442e-03, 1.352208359999488e-02, 6.761041799997442e-03, 2.850700230540495e-02, 5.701400461080991e-02, 2.850700230540495e-02, 3.302867284554585e-02, 6.605734569109170e-02, 3.302867284554585e-02, 5.581532594349951e-02, 1.116306518869990e-01, 5.581532594349951e-02, 4.481687183499182e-02, 8.963374366998364e-02, 4.481687183499182e-02, 4.481687183499185e-02, 8.963374366998371e-02, 4.481687183499185e-02, 1.855622832749736e-02, 3.711245665499472e-02, 1.855622832749736e-02, 2.857753586449291e-02, 5.715507172898582e-02, 2.857753586449291e-02, 3.212315848812557e-02, 6.424631697625115e-02, 3.212315848812557e-02, 1.092038798529802e-01, 2.184077597059604e-01, 1.092038798529802e-01, 7.069189421361796e-02, 1.413837884272360e-01, 7.069189421361796e-02, 7.069189421361800e-02, 1.413837884272360e-01, 7.069189421361800e-02, 3.463172398164500e-02, 6.926344796329000e-02, 3.463172398164500e-02, 2.575696384423491e-01, 5.151392768846982e-01, 2.575696384423491e-01, 1.145739651917329e-01, 2.291479303834657e-01, 1.145739651917329e-01, 6.766931101459836e-02, 1.353386220291967e-01, 6.766931101459836e-02, 1.953537489629100e-01, 3.907074979258200e-01, 1.953537489629100e-01, 1.953537489629106e-01, 3.907074979258211e-01, 1.953537489629106e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
