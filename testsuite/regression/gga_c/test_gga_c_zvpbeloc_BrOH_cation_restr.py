
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zvpbeloc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.704538192889423e-02, -6.704626685734386e-02, -6.704878826526958e-02, -6.703565236273730e-02, -6.704273580277997e-02, -6.704273580277997e-02, -5.193921479752403e-02, -5.194514491330852e-02, -5.208255302075435e-02, -5.184499152826937e-02, -5.194646543990689e-02, -5.194646543990689e-02, -2.357877554665764e-02, -2.322141414761537e-02, -1.489661661514260e-02, -1.528455652507264e-02, -1.548371514590859e-02, -1.548371514590859e-02, -1.795613856820120e-03, -2.147535539758750e-03, -2.801510966824503e-02, -2.207579745767592e-04, -6.156397621105722e-04, -6.156397621105653e-04, -1.545641418435612e-12, -2.415261420838063e-12, -4.758398146720066e-08, -3.366121577174955e-14, -2.475701464962846e-13, -2.475701464962846e-13, -7.185639691512739e-02, -7.206711049457555e-02, -7.186509011248371e-02, -7.205110935860490e-02, -7.196363158290697e-02, -7.196363158290697e-02, -2.109463020785438e-02, -2.181616559548352e-02, -1.957477832849115e-02, -2.019314171096186e-02, -2.225890200264734e-02, -2.225890200264734e-02, -4.011344075171731e-02, -5.899701889188770e-02, -3.642550498235219e-02, -5.438962500892209e-02, -4.266048576509333e-02, -4.266048576509333e-02, -1.468041997429850e-05, -3.871431936706554e-04, -1.024991834093366e-05, -7.892381995913349e-02, -8.134800816541467e-05, -8.134800816541467e-05, -1.032960939537806e-14, -4.005786136093253e-14, -2.600619496972249e-13, -1.465156710534153e-06, -1.966417629733450e-13, -1.966417629733450e-13, -6.182485113317630e-02, -5.778019025425624e-02, -5.922597444574301e-02, -6.040491331678252e-02, -5.981771414660973e-02, -5.981771414660973e-02, -6.231875266394955e-02, -2.284023881336425e-02, -3.415574801236608e-02, -4.635578235480406e-02, -4.026136156892940e-02, -4.026136156892940e-02, -5.915658589907979e-02, -1.029820911661296e-03, -3.118272758466534e-03, -1.845407505750639e-02, -8.431693276693405e-03, -8.431693276693412e-03, -2.187171615853526e-02, -2.979415764659033e-08, -2.202022163150187e-07, -2.652992894875492e-02, -9.872801585043514e-06, -9.872801585040045e-06, -9.625201949981276e-12, -1.346778771566502e-16, -4.690176113530421e-15, -6.445533207522664e-06, -1.865273161968722e-13, -1.865294846012172e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zvpbeloc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.466551726332925e-01, -1.466560166777482e-01, -1.466584293960886e-01, -1.466458998581797e-01, -1.466526553618807e-01, -1.466526553618807e-01, -1.311627791167003e-01, -1.311658810078506e-01, -1.312376232285261e-01, -1.311140021840683e-01, -1.311666595946109e-01, -1.311666595946109e-01, -1.016548050679477e-01, -1.011663307609198e-01, -8.354165251532918e-02, -8.471802920063140e-02, -8.526887629298308e-02, -8.526887629298308e-02, -1.494390672122800e-02, -1.744636682377655e-02, -1.083560464036080e-01, -2.142778563137074e-03, -5.650740795096627e-03, -5.650740795096591e-03, -1.723793012890108e-11, -2.692135798264750e-11, -5.177688783294113e-07, -3.769560793332489e-13, -2.767346903624927e-12, -2.767345694523348e-12, -1.433445728529702e-01, -1.434354187872582e-01, -1.433483504765130e-01, -1.434285593137262e-01, -1.433908738401966e-01, -1.433908738401966e-01, -9.955399320499628e-02, -1.010563153925155e-01, -9.610839877942419e-02, -9.752847423387183e-02, -1.019693911289533e-01, -1.019693911289533e-01, -1.019554503810871e-01, -8.364838892270807e-02, -1.013197717419640e-01, -8.349961810557918e-02, -1.006130897699858e-01, -1.006130897699858e-01, -1.527002529666263e-04, -3.691176558260251e-03, -1.071176955713089e-04, -1.183616569509670e-01, -8.151526380430795e-04, -8.151526380430795e-04, -1.158034780580059e-13, -4.485860960117068e-13, -2.908926983292984e-12, -1.561141937043193e-05, -2.199708887105041e-12, -2.199703991938178e-12, -7.478269765161290e-02, -8.055128904699158e-02, -7.846145025778098e-02, -7.677209867386386e-02, -7.761060360681572e-02, -7.761060360681572e-02, -7.245829252007269e-02, -9.563621022229357e-02, -1.004780039717572e-01, -9.219745414156294e-02, -9.761080458507741e-02, -9.761080458507741e-02, -8.615398980680625e-02, -9.277675854063533e-03, -2.488184616371954e-02, -8.250682381923372e-02, -5.362737133185299e-02, -5.362737133185300e-02, -9.282726730961618e-02, -3.248541732782776e-07, -2.378487198297608e-06, -8.693779549411031e-02, -1.029550270965596e-04, -1.029550270965282e-04, -1.070556997238265e-10, -1.486803663374387e-15, -5.261937199708782e-14, -6.759699353482439e-05, -2.086946983637264e-12, -2.086949504607684e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zvpbeloc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.004875531052663e-10, 2.004905904625683e-10, 2.004938989182911e-10, 2.004489290468994e-10, 2.004739381598440e-10, 2.004739381598440e-10, 1.236783011329337e-06, 1.236976098828684e-06, 1.241301502083702e-06, 1.232632725040465e-06, 1.236866298071060e-06, 1.236866298071060e-06, 2.708199636398353e-03, 2.685984629005975e-03, 2.011592991794072e-03, 1.978564968338424e-03, 2.022508456032804e-03, 2.022508456032804e-03, 1.029734258528515e-01, 1.189838148378908e-01, 1.442629023127035e-03, 2.763649529319040e-02, 5.788012087959845e-02, 5.788012087959778e-02, 2.424613726273250e-06, 3.339036219582839e-06, 2.975966519141239e-04, 2.616249025831213e-07, 1.092298367626346e-06, 1.092298068266649e-06, 2.816388312584677e-07, 2.831255918500014e-07, 2.816977851720187e-07, 2.830101849073377e-07, 2.823955029309098e-07, 2.823955029309098e-07, 8.791882817161740e-06, 8.767720955991317e-06, 8.351959032036343e-06, 8.342806896518068e-06, 8.989198213818041e-06, 8.989198213818041e-06, 7.981712961454758e-03, 6.183161862116609e-03, 1.092667612210834e-02, 1.053373218922572e-02, 7.657286319924805e-03, 7.657286319924805e-03, 4.930178570823285e-03, 1.591447762004179e-02, 4.476791686734269e-03, 4.868085340308113e-05, 2.018062567248065e-02, 2.018062567248065e-02, 2.006542722104375e-07, 3.614971354215122e-07, 1.312374883128520e-05, 2.379911632975466e-03, 3.875448948251074e-06, 3.875435800266862e-06, 8.252246884239485e-03, 8.834231090273688e-03, 8.659499540903490e-03, 8.490941244199990e-03, 8.578055667570254e-03, 8.578055667570254e-03, 9.033050597173181e-03, 1.234720892713495e-02, 1.343099643890673e-02, 1.275478830054425e-02, 1.334179789694350e-02, 1.334179789694350e-02, 5.047318794170144e-03, 1.838303790018224e-02, 2.997901231141172e-02, 5.419800515459552e-02, 4.823776864044601e-02, 4.823776864044600e-02, 1.779923080780088e-02, 2.024961525928139e-04, 6.001091724961536e-04, 8.487516297774640e-02, 8.613200939527296e-03, 8.613200939527188e-03, 4.820875932022051e-06, 1.381236945108706e-07, 3.690989220168643e-07, 6.726978332731351e-03, 5.214000303074268e-06, 5.214005230530694e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
