
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_spbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.541979160411795e-02, -5.542054096831920e-02, -5.542267217830394e-02, -5.541154889688374e-02, -5.541754751001055e-02, -5.541754751001055e-02, -4.623753064195808e-02, -4.624195715780114e-02, -4.634453157615114e-02, -4.616676533774808e-02, -4.624287732136174e-02, -4.624287732136174e-02, -3.215277863736726e-02, -3.196048132453910e-02, -2.734349059118843e-02, -2.756989442899413e-02, -2.768563571160209e-02, -2.768563571160209e-02, -1.143290612270883e-02, -1.201284941260349e-02, -3.455730231174838e-02, -6.078148272070150e-03, -8.216088102274701e-03, -8.216088102274701e-03, -4.386934059518770e-06, -5.175161097339187e-06, -3.074307210634342e-04, -9.361452127115429e-07, -1.975090648056565e-06, -1.975090648056565e-06, -6.165191583590286e-02, -6.184107264812973e-02, -6.165970900027036e-02, -6.182669248304424e-02, -6.174813838065018e-02, -6.174813838065018e-02, -2.807936989845167e-02, -2.848466511055861e-02, -2.718169219222309e-02, -2.753076249965674e-02, -2.875309006280650e-02, -2.875309006280650e-02, -4.118418758398285e-02, -5.635486567793044e-02, -3.879801060138142e-02, -5.192396736979553e-02, -4.282306360639290e-02, -4.282306360639290e-02, -2.562897402983826e-03, -8.045280676728996e-03, -2.232996239339581e-03, -7.257772835440744e-02, -4.264747463976272e-03, -4.264747463976272e-03, -5.238643263269931e-07, -9.540359185802376e-07, -1.136005155538754e-06, -1.051324713708956e-03, -1.299819101862255e-06, -1.299819101862255e-06, -6.052806428089441e-02, -5.536797627315974e-02, -5.706260819555458e-02, -5.855939738335830e-02, -5.779975574056648e-02, -5.779975574056648e-02, -6.165147154905818e-02, -3.121549991184159e-02, -3.735570701038681e-02, -4.516558265909232e-02, -4.101450671993936e-02, -4.101450671993936e-02, -5.633208147627226e-02, -1.126747094038127e-02, -1.565507017358661e-02, -2.735227485456583e-02, -2.092594911908320e-02, -2.092594911908320e-02, -3.042522224429222e-02, -2.637447634644920e-04, -5.572841857185097e-04, -3.118503648685178e-02, -1.993425004369351e-03, -1.993425004369347e-03, -9.883815057792009e-06, -5.130986695284670e-08, -2.936169002189165e-07, -1.719973894596881e-03, -1.178026136367402e-06, -1.178026136363099e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_spbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.227724057002933e-01, -1.227734440119471e-01, -1.227764051899400e-01, -1.227609921487384e-01, -1.227693032405007e-01, -1.227693032405007e-01, -1.045418287650220e-01, -1.045476548137258e-01, -1.046826320976976e-01, -1.044495358132305e-01, -1.045489960513068e-01, -1.045489960513068e-01, -7.419546883182888e-02, -7.395604324564180e-02, -6.758597504506458e-02, -6.797602590955679e-02, -6.813201310983169e-02, -6.813201310983169e-02, -3.294677022313187e-02, -3.420093634782162e-02, -7.851951382153824e-02, -1.952665818873019e-02, -2.522240264352650e-02, -2.522240264352650e-02, -1.708554883598695e-05, -2.014197120195092e-05, -1.151599976366678e-03, -3.667798975638809e-06, -7.720316427545213e-06, -7.720316427545213e-06, -1.251088848485188e-01, -1.253055542976083e-01, -1.251170152216535e-01, -1.252906429718197e-01, -1.252090230766230e-01, -1.252090230766230e-01, -7.400445856733864e-02, -7.476636904609044e-02, -7.232431452723759e-02, -7.299421092300738e-02, -7.525065118918503e-02, -7.525065118918503e-02, -7.993515719062988e-02, -8.229820831547714e-02, -7.724020900044259e-02, -7.977604734745908e-02, -8.097493482793539e-02, -8.097493482793539e-02, -8.919735211646327e-03, -2.506154429471451e-02, -7.835160087084510e-03, -1.159194204078204e-01, -1.422640504134070e-02, -1.422640504134070e-02, -2.057208726724898e-06, -3.738612665928499e-06, -4.461190842153861e-06, -3.816902963209980e-03, -5.096657059886874e-06, -5.096657059886978e-06, -7.579891440374643e-02, -7.959046747052369e-02, -7.859377261250300e-02, -7.751378186372966e-02, -7.808560585519946e-02, -7.808560585519946e-02, -7.317990307937944e-02, -6.982452387478755e-02, -7.548492381305585e-02, -7.921911113246329e-02, -7.771351132212297e-02, -7.771351132212297e-02, -8.407322321361396e-02, -3.327059680873255e-02, -4.296568956919888e-02, -6.178403246171575e-02, -5.256036568536165e-02, -5.256036568536164e-02, -6.804107875407817e-02, -9.903982519119650e-04, -2.061611778897723e-03, -6.441158845586217e-02, -7.028172816575400e-03, -7.028172816575398e-03, -3.831953430968104e-05, -2.029611385935717e-07, -1.156076908831327e-06, -6.112277123343442e-03, -4.622205147221513e-06, -4.622205147216537e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_spbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.702446086243272e-10, 1.702480033212224e-10, 1.702531335344435e-10, 1.702028432170840e-10, 1.702306066636985e-10, 1.702306066636985e-10, 9.243927859353649e-07, 9.245913536304431e-07, 9.290881334946778e-07, 9.204367804638151e-07, 9.245219392413577e-07, 9.245219392413577e-07, 1.453129514607509e-03, 1.442204794255708e-03, 1.179381339975856e-03, 1.151831335753162e-03, 1.172345207152624e-03, 1.172345207152624e-03, 1.538846413564182e-01, 1.575430685019860e-01, 7.918642728615643e-04, 1.768642493704604e-01, 1.786942350010686e-01, 1.786942350010686e-01, 1.726637024219104e+00, 1.795523622525079e+00, 4.811547636954512e-01, 1.823077497429810e+00, 2.185165600589454e+00, 2.185165600589473e+00, 2.531903247725337e-07, 2.549960199814732e-07, 2.532625423417597e-07, 2.548564179177783e-07, 2.541085792690083e-07, 2.541085792690083e-07, 5.294704603875802e-06, 5.266777771901324e-06, 5.072713254145225e-06, 5.048620518079434e-06, 5.391676779871345e-06, 5.391676779871345e-06, 4.911966969114102e-03, 6.879332849304620e-03, 6.319164090187944e-03, 1.030046324015341e-02, 4.960409818144952e-03, 4.960409818144952e-03, 2.072655284870686e-01, 7.518607043464338e-02, 2.361015152374828e-01, 5.623010880853066e-05, 2.502226751772552e-01, 2.502226751772552e-01, 2.549467710118786e+00, 2.157407161902920e+00, 1.439941842106338e+01, 4.220223491885549e-01, 6.428659786756858e+00, 6.428659786758911e+00, 1.218139075619798e-02, 9.990074616951689e-03, 1.066927577078830e-02, 1.130181358356146e-02, 1.097697454142579e-02, 1.097697454142579e-02, 1.465645555975997e-02, 6.369090697461752e-03, 7.508424520519336e-03, 9.314340525039180e-03, 8.323255285154142e-03, 8.323255285154142e-03, 5.431133185061574e-03, 4.516841792084184e-02, 3.489592270875400e-02, 2.741098901188145e-02, 3.152650973327093e-02, 3.152650973327095e-02, 9.109404583181961e-03, 4.487828229060292e-01, 3.782212749934181e-01, 4.365437972012175e-02, 4.238292429631291e-01, 4.238292429631297e-01, 1.242661913934388e+00, 1.345713242074515e+01, 5.792677070516484e+00, 4.392397525517980e-01, 8.264965524862703e+00, 8.264965524861372e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
