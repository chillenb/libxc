
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sogga11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.573129274525582e-01, -4.573039376858308e-01, -4.572789454113356e-01, -4.574258709644560e-01, -4.573080602088547e-01, -4.573080602088547e-01, -2.016887898025202e-01, -2.016730861905670e-01, -2.012434242539207e-01, -2.020060946725935e-01, -2.016812423839658e-01, -2.016812423839658e-01, -7.396385596891801e-02, -7.495245565693132e-02, -1.018333000935992e-01, -1.011255462494635e-01, -7.431876884763143e-02, -7.431876884763143e-02, -5.940854785669214e-02, -5.655760050283862e-02, -6.007867259118393e-02, -6.839955569965077e-02, -5.852863137537337e-02, -5.852863137537337e-02, -5.968797253654853e-02, -6.168432767019516e-02, -1.196215949948990e-01, -3.362560963140863e-02, -6.116631160831379e-02, -6.116631160831379e-02, -1.726326447048375e-01, -1.712817144853237e-01, -1.724983426117552e-01, -1.714479663369401e-01, -1.719366992155585e-01, -1.719366992155585e-01, -1.941549896556137e-01, -1.939710183193052e-01, -1.950346281269542e-01, -1.948487935969225e-01, -1.930195336497498e-01, -1.930195336497498e-01, -4.646714028089662e-02, -6.774670429753775e-02, -4.477030119935171e-02, -6.519285761632067e-02, -5.024009948079269e-02, -5.024009948079269e-02, -8.371974405027163e-02, -7.797707677785748e-02, -7.882063503199727e-02, -9.041335536973280e-02, -6.860851231446914e-02, -6.860851231446914e-02, -3.261500104971134e-02, -3.646012378887127e-02, -2.844456204492174e-02, -1.054247033404422e-01, -3.365984792022904e-02, -3.365984792022904e-02, -6.339566371093855e-02, -6.586202197671402e-02, -6.494037120781926e-02, -6.414376649434661e-02, -6.453755704224898e-02, -6.453755704224903e-02, -6.257518779832831e-02, -4.348918000691848e-02, -4.336072316691907e-02, -5.750117827519827e-02, -4.958963186017708e-02, -4.958963186017691e-02, -6.913053742248097e-02, -8.090080286512241e-02, -6.990718858544696e-02, -3.713649875573122e-02, -5.053388959220112e-02, -5.053388959220109e-02, -4.210271873522300e-02, -1.238645195798802e-01, -1.183088407363950e-01, -3.609486079496731e-02, -8.131391738075687e-02, -8.131391738075675e-02, -6.726012307953995e-02, -1.168441761784827e-02, -2.079906992399891e-02, -7.697174737541272e-02, -2.929262209560169e-02, -2.929262209560173e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sogga11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.375390383465289e-01, 4.375122035109686e-01, 4.374366092092439e-01, 4.378750286039542e-01, 4.375245178820880e-01, 4.375245178820880e-01, 1.587569502236108e-02, 1.599264235596309e-02, 1.919198711968279e-02, 1.357619521648928e-02, 1.593359500282029e-02, 1.593359500282029e-02, 1.432608992507318e-01, 1.442089973964537e-01, 1.067565539798990e-01, 1.104706968315250e-01, 1.436217589980492e-01, 1.436217589980492e-01, 6.365522936905485e-02, 7.380595498128814e-02, 9.716322014332640e-02, -4.565055999406606e-02, 6.708893434752991e-02, 6.708893434752991e-02, -6.801124068468285e-02, -6.949759433940365e-02, -1.646390251741972e-02, -4.229598383004710e-02, -6.892898557780160e-02, -6.892898557780160e-02, 2.412623257967155e-01, 2.440040067349039e-01, 2.415418573705971e-01, 2.436749581843318e-01, 2.426935604025739e-01, 2.426935604025739e-01, -1.317544399794541e-01, -1.351606680791969e-01, -1.247134737870799e-01, -1.283772506077533e-01, -1.391660356257794e-01, -1.391660356257794e-01, -1.119495718147988e-01, -7.013626390615990e-02, -1.041420912124150e-01, -8.566839588054363e-02, -1.270656739673454e-01, -1.270656739673454e-01, 8.830847487989943e-02, -5.924886120764254e-02, 7.717377811249287e-02, -1.687295178673536e-01, 6.634302214610796e-03, 6.634302214610796e-03, -4.108215517240570e-02, -4.554437406011885e-02, -3.570391830207497e-02, 6.742885128521733e-02, -4.208345681276650e-02, -4.208345681276650e-02, -6.983663943182855e-02, -6.572132207021691e-02, -6.461470934896979e-02, -6.603068672190823e-02, -6.509895419934657e-02, -6.509895419934658e-02, -7.078699789627306e-02, 2.440274493873417e-02, -9.684605836578478e-02, -1.209379381990174e-01, -1.250832168649814e-01, -1.250832168649813e-01, -7.520017148608675e-02, -1.133044868078205e-02, 8.292263002871302e-02, 1.423676735282359e-02, 9.960980372298339e-02, 9.960980372298392e-02, 2.724523385694892e-02, -4.385509576007417e-02, 2.902317596046709e-02, -8.163427283533847e-02, 9.025266870156019e-02, 9.025266870156035e-02, -7.501359333586173e-02, -1.520936621475760e-02, -2.670228103064180e-02, 8.479441205728992e-02, -3.682934538965048e-02, -3.682934538965049e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sogga11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.602278749547263e-09, -2.602211833422743e-09, -2.601962445008102e-09, -2.603056796633803e-09, -2.602243049971334e-09, -2.602243049971334e-09, -4.143641778629251e-06, -4.146042144513250e-06, -4.211195556427073e-06, -4.093511646817136e-06, -4.144758306095449e-06, -4.144758306095449e-06, -8.358621356244735e-03, -8.379966245682189e-03, -6.824655287932766e-03, -6.756129756761253e-03, -8.367215967652572e-03, -8.367215967652572e-03, -1.103862176170951e+00, -1.160389111890451e+00, -3.453431473149738e-03, -5.542629053404134e-01, -1.124647328112624e+00, -1.124647328112624e+00, -3.543134044994526e+02, -3.478057659517546e+02, -5.390825169973068e+01, -3.294345585322076e+02, -3.627852013010007e+02, -3.627852013010007e+02, -1.914488944460628e-06, -1.933528038032994e-06, -1.916398972552415e-06, -1.931207389982011e-06, -1.924375367696181e-06, -1.924375367696181e-06, -1.027815401659391e-05, -9.696951414903421e-06, -1.109780704484505e-05, -1.051077261069246e-05, -9.316907524217608e-06, -9.316907524217608e-06, 9.444118879727476e-03, -2.407575741081942e-03, 1.032295530244660e-02, 5.188088272997224e-03, 1.063798888803485e-02, 1.063798888803485e-02, -6.349438671564084e+00, -1.412954975909379e-01, -6.509020306657684e+00, 1.099472191094555e-04, -2.246199406999726e+00, -2.246199406999726e+00, -3.531233886865526e+02, -3.398295396763107e+02, -1.053534994255492e+03, -3.171279374276377e+01, -5.154736709771792e+02, -5.154736709771790e+02, -2.524532640223155e-03, -5.123624121826529e-03, -6.750736678503600e-03, -6.418894152459022e-03, -6.806450899500346e-03, -6.806450899500381e-03, 1.445348115144788e-03, -1.371086147844569e-02, 1.099862656020693e-02, 1.826389412329443e-02, 1.844968635902733e-02, 1.844968635902738e-02, -6.734463704705448e-04, -1.749678660726857e-01, -2.269704395456568e-01, -5.234335645485869e-02, -1.769582927375316e-01, -1.769582927375324e-01, -2.171289909969351e-02, -5.108801863075779e+01, -3.458019341206554e+01, 7.014507815445356e-02, -1.484974556358063e+01, -1.484974556358065e+01, -2.485772983083580e+02, -7.891417231046338e+02, -5.990305591495858e+02, -1.791075453826532e+01, -7.878775964691911e+02, -7.878775964691941e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
