
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_n12_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.350680474891663e-01, -1.350681922416286e-01, -1.350687604654032e-01, -1.350663939782676e-01, -1.350681244726574e-01, -1.350681244726574e-01, -9.157031753336825e-02, -9.156972930295545e-02, -9.155456718188353e-02, -9.158570985899846e-02, -9.157011492177723e-02, -9.157011492177723e-02, -5.506409398835158e-02, -5.496179753638284e-02, -5.059852668512534e-02, -5.102695535592569e-02, -5.502762700334320e-02, -5.502762700334320e-02, -1.859973613167952e-02, -1.969430196111568e-02, -5.958480512253624e-02, -2.659356766584492e-02, -1.892910869517012e-02, -1.892910869517012e-02, -4.158960436926659e-02, -4.315215610443882e-02, -9.965133488528784e-02, -2.234154423511633e-02, -4.277632116098049e-02, -4.277632116098049e-02, -1.031712597001335e-01, -1.032842798261968e-01, -1.031824575118216e-01, -1.032703167703854e-01, -1.032292145662792e-01, -1.032292145662792e-01, -7.289787903661213e-02, -7.358992492119408e-02, -7.203465314221671e-02, -7.260471815792506e-02, -7.439465890093100e-02, -7.439465890093100e-02, -5.240786241344794e-02, -6.439096033325090e-02, -5.147498015307229e-02, -5.799592125872174e-02, -5.314022004858760e-02, -5.314022004858760e-02, -6.876926193615167e-02, -1.823109762109835e-02, -6.430685232110407e-02, -9.240446585288845e-02, -4.218934748903062e-02, -4.218934748903062e-02, -2.163873585662126e-02, -2.434295121766693e-02, -1.880958199989311e-02, -9.474369134872813e-02, -2.240784490935449e-02, -2.240784490935450e-02, -5.753109300743197e-02, -6.368198010144224e-02, -6.373605987528837e-02, -6.218887560001261e-02, -6.317858715284753e-02, -6.317858715284755e-02, -5.470752292947442e-02, -5.031739061227303e-02, -5.066354525790603e-02, -5.215229713310997e-02, -5.083667192909268e-02, -5.083667192909269e-02, -6.485167164864918e-02, -1.854213133514337e-02, -2.727657635714276e-02, -4.300608191147631e-02, -3.658634693010734e-02, -3.658634693010709e-02, -4.820538814765071e-02, -1.001760766525090e-01, -1.021170879603410e-01, -4.255563967850739e-02, -7.337768083823280e-02, -7.337768083823309e-02, -4.729892069110162e-02, -7.441688586970852e-03, -1.352164669982769e-02, -7.067012604486658e-02, -1.937827568375438e-02, -1.937827568375443e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_n12_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.520634598459976e-01, -1.520666482638375e-01, -1.520764034721543e-01, -1.520242961458935e-01, -1.520651786511494e-01, -1.520651786511494e-01, -8.904890761391242e-02, -8.905074330163053e-02, -8.910488334439827e-02, -8.901942716964784e-02, -8.904993998497965e-02, -8.904993998497965e-02, -7.998044674777346e-02, -8.084602405550056e-02, -1.046123929193256e-01, -1.036783464513278e-01, -8.029130167894706e-02, -8.029130167894706e-02, -5.891096926933062e-02, -6.415096389781900e-02, -6.375017168701751e-02, 8.705189159397542e-02, -6.065911204302056e-02, -6.065911204302056e-02, -5.092857738938539e-02, -5.254549213454673e-02, -5.317798020958181e-02, -2.874877216941190e-02, -5.210546047491282e-02, -5.210546047491282e-02, -1.481696538583148e-01, -1.490091804545733e-01, -1.482535359376645e-01, -1.489063398915334e-01, -1.486027231664281e-01, -1.486027231664281e-01, -1.452152002660535e-01, -1.429774309075171e-01, -1.485213086194658e-01, -1.468492547994215e-01, -1.391245710849722e-01, -1.391245710849722e-01, -5.649312693659125e-02, -8.916675276780639e-02, -5.391552928875398e-02, -9.572541380450220e-02, -6.231998873889666e-02, -6.231998873889666e-02, 1.133860761576156e-01, 2.777640242571399e-02, 1.145399017214193e-01, -1.265390396385011e-01, 1.176901853248316e-01, 1.176901853248316e-01, -2.786875245816517e-02, -3.121124642355004e-02, -2.423020574361211e-02, 1.622512539316539e-02, -2.876810838342973e-02, -2.876810838342941e-02, -4.469387829671173e-02, -8.028987369328570e-02, -6.333844767077555e-02, -4.948908934210034e-02, -5.610575411904326e-02, -5.610575411904301e-02, -5.381076229555993e-02, -5.983972748969763e-02, -5.218279490185012e-02, -7.423015470080846e-02, -5.901207536609183e-02, -5.901207536609011e-02, -9.482099930188663e-02, -4.429798086073671e-02, -8.598674822985181e-02, -6.240878100696101e-02, -8.368683098335430e-02, -8.368683098335901e-02, -6.145905052744698e-02, -6.894595298209065e-02, -2.008183942536779e-02, -4.633281069981191e-02, 8.858435134663922e-02, 8.858435134664043e-02, -5.719531401050508e-02, -9.772344311161195e-03, -1.760945555830075e-02, 8.665517910461541e-02, -2.497001352644345e-02, -2.497001352644311e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_n12_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.206833998608150e-11, 2.207633558139508e-11, 2.209988253791115e-11, 2.196924583173959e-11, 2.207265787519342e-11, 2.207265787519342e-11, -1.655184361954255e-07, -1.655041366688304e-07, -1.650320890629073e-07, -1.656238008776092e-07, -1.655077765505818e-07, -1.655077765505818e-07, 6.216326760544349e-04, 6.506442726298859e-04, 1.360308394454267e-03, 1.290135959948861e-03, 6.320958662252215e-04, 6.320958662252215e-04, 2.904934801715096e-01, 3.213419299102586e-01, -5.252871863887246e-05, -1.777356457063529e+00, 3.013345666685373e-01, 3.013345666685373e-01, -1.045977148081250e+02, -1.040387871211484e+02, -2.755867602478475e+01, -8.163298888504848e+01, -1.082495369716581e+02, -1.082495369716581e+02, 1.492904919272130e-07, 1.532512613495941e-07, 1.496835165458776e-07, 1.527629766988850e-07, 1.513297023217649e-07, 1.513297023217649e-07, 7.536007746938129e-06, 7.102790366226860e-06, 7.886739475875417e-06, 7.553067863376057e-06, 6.746331149400269e-06, 6.746331149400269e-06, -3.475096941138101e-04, 6.398091634761864e-03, -7.064133769301423e-04, 1.180820195356792e-02, 3.711744586223992e-04, 3.711744586223992e-04, -6.237730050268180e+00, -2.066505955751930e-01, -6.880533399717615e+00, 3.631579965530333e-05, -4.046304853042459e+00, -4.046304853042459e+00, -8.690164892524528e+01, -8.590362909904530e+01, -2.525462992447118e+02, -2.033051613759818e+01, -1.280389349551768e+02, -1.280389349552691e+02, -3.371940530035141e-02, 5.000646821930959e-03, -6.155731464895960e-03, -1.998812710776870e-02, -1.259132494326939e-02, -1.259132494326923e-02, -2.300241097601694e-02, 5.319532262478909e-04, -1.031329141948491e-03, 4.660907291229311e-03, 4.398697904001273e-04, 4.398697903997664e-04, 6.044800028464687e-03, 4.557587489572987e-02, 7.075570589846834e-02, 1.152996975651096e-02, 4.370312365226836e-02, 4.370312365227035e-02, 1.860723430321793e-03, -2.473399413052846e+01, -1.994772705615797e+01, -3.526699928972357e-03, -1.325762804212067e+01, -1.325762804212078e+01, -7.653205275995211e+01, -1.622397400959467e+02, -1.346186869568721e+02, -1.646960023301601e+01, -1.898429745923331e+02, -1.898429745922281e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
