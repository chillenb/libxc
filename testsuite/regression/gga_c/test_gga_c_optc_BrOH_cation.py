
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_optc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.416417295119915e-02, -6.416482056553777e-02, -6.416669021371826e-02, -6.415707648781829e-02, -6.416225712450303e-02, -6.416225712450303e-02, -4.759615359828216e-02, -4.760017511394497e-02, -4.769342139051043e-02, -4.753251233756519e-02, -4.760109674220490e-02, -4.760109674220490e-02, -2.976052410248444e-02, -2.955960371314282e-02, -2.462654058891542e-02, -2.488305460579495e-02, -2.464067696038530e-02, -2.464067696038530e-02, -7.125301477992489e-03, -7.733809277672177e-03, -3.233234742192034e-02, -2.342394493705628e-03, -2.252516687297369e-03, -2.252516687297377e-03, -5.647020958543813e-09, -7.540713031770289e-09, -9.168295520233296e-06, -4.015841455931732e-10, -9.437164919184506e-10, -9.437164917839298e-10, -6.250625025753886e-02, -6.266230438620018e-02, -6.251268899452106e-02, -6.265045251981226e-02, -6.258564779387039e-02, -6.258564779387039e-02, -2.758115418847103e-02, -2.804429608286520e-02, -2.657999781684054e-02, -2.698329429246268e-02, -2.833231746980079e-02, -2.833231746980079e-02, -3.849554775336771e-02, -5.158837404379462e-02, -3.613054927054292e-02, -4.770541265549429e-02, -3.989770423986500e-02, -3.989770423986496e-02, -4.627552272103578e-04, -3.795209396436000e-03, -3.565630107361475e-04, -6.757560737533090e-02, -1.217433972191577e-03, -1.217433972191577e-03, -1.560191494950160e-10, -4.251019929315377e-10, -7.507730326196703e-10, -8.951575596625960e-05, -7.107713557820529e-10, -7.107713536281759e-10, -5.445280157479177e-02, -5.058769230514653e-02, -5.189662144719882e-02, -5.302323048026255e-02, -5.245521371395674e-02, -5.245521371395674e-02, -5.510075751211815e-02, -2.860251545133287e-02, -3.477005105606195e-02, -4.198602041960007e-02, -3.823329241500567e-02, -3.823329241500567e-02, -5.169543743050684e-02, -6.759291914161797e-03, -1.145790239326240e-02, -2.453963383628092e-02, -1.743980575525562e-02, -1.743980575525562e-02, -2.776072286718097e-02, -6.923010909900770e-06, -2.705510347360221e-05, -2.857299915086684e-02, -2.973292760826798e-04, -2.973292760826886e-04, -2.224731733295765e-08, -3.896388643390301e-12, -6.546146625809364e-11, -2.269111380645503e-04, -6.500721082846807e-10, -6.500721103016342e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_optc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.228035058911913e-01, -1.228036863412754e-01, -1.228040338960224e-01, -1.228044051213762e-01, -1.228063110469814e-01, -1.228057436281599e-01, -1.227959759219750e-01, -1.227975699610002e-01, -1.228001321327871e-01, -1.228033855643922e-01, -1.228001321327871e-01, -1.228033855643922e-01, -1.017631581613047e-01, -1.017564979137683e-01, -1.017666723818228e-01, -1.017597270262683e-01, -1.018468603598204e-01, -1.018360274386378e-01, -1.017129837359076e-01, -1.017018839811549e-01, -1.017975984423399e-01, -1.017306535982984e-01, -1.017975984423399e-01, -1.017306535982984e-01, -7.393384931272694e-02, -7.319219348661071e-02, -7.386014849725482e-02, -7.295239878454220e-02, -6.814028728270773e-02, -6.930649855322681e-02, -6.925164857300146e-02, -6.887401265901878e-02, -6.360778822972199e-02, -7.496955814420923e-02, -6.360778822972199e-02, -7.496955814420923e-02, -3.076807464916790e-02, -2.921676423434402e-02, -3.271517968358261e-02, -3.083206052984836e-02, -7.961016471244470e-02, -7.482596624619993e-02, -1.227025347206871e-02, -1.209114975316570e-02, -9.714561489769633e-03, -2.107667746206889e-02, -9.714561489769695e-03, -2.107667746206892e-02, -3.806846773599504e-08, -3.592721909297762e-08, -5.105350194254339e-08, -4.778887464138794e-08, -6.017179825827175e-05, -5.684915275143478e-05, -2.611570096695434e-09, -2.659054711495024e-09, -5.618879919505514e-09, -9.181317556065663e-09, -5.618879925847987e-09, -9.181317556954434e-09, -1.160307540379894e-01, -1.160714336508478e-01, -1.161455915383907e-01, -1.161887968791707e-01, -1.160347580565146e-01, -1.160770464577158e-01, -1.161379277325194e-01, -1.161788703769734e-01, -1.160888582547855e-01, -1.161315384445880e-01, -1.160888582547855e-01, -1.161315384445880e-01, -7.871890555542821e-02, -7.872373933461786e-02, -7.933834854498020e-02, -7.936656067386202e-02, -7.750625171080293e-02, -7.720818577177271e-02, -7.808066589497936e-02, -7.777705188069556e-02, -7.935850425252909e-02, -8.008511922776773e-02, -7.935850425252909e-02, -8.008511922776773e-02, -7.461068251115989e-02, -7.490455357467428e-02, -7.285711699386985e-02, -7.280398317234353e-02, -7.512201418777104e-02, -7.080537260337723e-02, -7.325890941849762e-02, -6.889490934272126e-02, -7.209241781108744e-02, -7.826592936080587e-02, -7.209241781108743e-02, -7.826592936080586e-02, -2.743409306656661e-03, -2.711427496209358e-03, -1.857975558485266e-02, -1.847281218093046e-02, -2.189074513534484e-03, -2.068286549026472e-03, -1.026426322457968e-01, -1.027204718694908e-01, -7.052315869613220e-03, -6.497840360035056e-03, -7.052315869613220e-03, -6.497840360035056e-03, -1.039673072399133e-09, -1.012390860258764e-09, -2.801995770897234e-09, -2.777318787430955e-09, -5.101987280954967e-09, -4.792040232629479e-09, -5.554823475197291e-04, -5.529550580543283e-04, -5.752178897096112e-09, -4.244559596890657e-09, -5.752178889884335e-09, -4.244559588641448e-09, -6.689441760530872e-02, -6.636618472885419e-02, -7.063392172620096e-02, -7.010296297514888e-02, -6.954692164253459e-02, -6.901679826781895e-02, -6.846792792820279e-02, -6.793859943677683e-02, -6.902953149027688e-02, -6.850015502614980e-02, -6.902953149027688e-02, -6.850015502614980e-02, -6.476649736745164e-02, -6.429346726492915e-02, -6.907701272321679e-02, -6.859775310965829e-02, -7.199285662772911e-02, -7.144351366629392e-02, -7.247947071618584e-02, -7.203545739734139e-02, -7.256207845084271e-02, -7.211471323126914e-02, -7.256207845084271e-02, -7.211471323126914e-02, -7.464872140491649e-02, -7.442277163560185e-02, -2.953227316990815e-02, -2.931555211321058e-02, -4.278683509238656e-02, -4.215037801003964e-02, -6.183782896104392e-02, -6.132087060111747e-02, -5.360862010821230e-02, -5.357581698293859e-02, -5.360862010821231e-02, -5.357581698293858e-02, -6.758222618049543e-02, -6.681233972325509e-02, -4.432346514457617e-05, -4.400957359570487e-05, -1.737320161124863e-04, -1.676177306621858e-04, -6.310965587438114e-02, -6.155865277413267e-02, -1.849129236510943e-03, -1.724468208922802e-03, -1.849129236510924e-03, -1.724468208922777e-03, -1.476928279937027e-07, -1.424923608327518e-07, -2.637135757936370e-11, -2.511641223471348e-11, -4.460510959018796e-10, -4.184544772259697e-10, -1.384150553638609e-03, -1.361295469823611e-03, -4.974500135214762e-09, -3.967133840880635e-09, -4.974500132413622e-09, -3.967133836486702e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_optc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.086878267363198e-10, 3.578997545633420e-10, 1.086871743610385e-10, 1.086892177726868e-10, 3.579053453003688e-10, 1.086889510041115e-10, 1.086915293589524e-10, 3.579117308391824e-10, 1.086898697636336e-10, 1.086659037862726e-10, 3.578289514604110e-10, 1.086686015814652e-10, 1.086744019739035e-10, 3.578749449245463e-10, 1.086862129346357e-10, 1.086744019739035e-10, 3.578749449245463e-10, 1.086862129346357e-10, 6.398707944065604e-07, 2.073226698441840e-06, 6.392563503835865e-07, 6.399970503792936e-07, 2.073614070153681e-06, 6.393412206137705e-07, 6.423071278439217e-07, 2.082351642411200e-06, 6.417763314858430e-07, 6.376423192847378e-07, 2.065274977014849e-06, 6.370266375222620e-07, 6.398850107164935e-07, 2.073445664460803e-06, 6.393446487782362e-07, 6.398850107164935e-07, 2.073445664460803e-06, 6.393446487782362e-07, 1.198899372298308e-03, 3.649754786594264e-03, 1.163840703332077e-03, 1.198096417386764e-03, 3.626236419699472e-03, 1.155626208789728e-03, 1.029286918032670e-03, 3.034085488797939e-03, 1.072425399813339e-03, 1.029692697781729e-03, 2.960121995829126e-03, 1.015466271253516e-03, 7.894936218697990e-04, 3.001433090782230e-03, 1.230749275668856e-03, 7.894936218697990e-04, 3.001433090782230e-03, 1.230749275668856e-03, 1.509199617321944e-01, 3.638146278474119e-01, 1.489437560100927e-01, 1.567430392115847e-01, 3.809914253592034e-01, 1.546092091262223e-01, 6.439411472982148e-04, 1.953052075205002e-03, 5.992153886909969e-04, 1.226124061488730e-01, 2.805227998238417e-01, 1.229150092990952e-01, 8.913231820228065e-02, 2.319592422794458e-01, 1.027209628728820e-01, 8.913231820228112e-02, 2.319592422794466e-01, 1.027209628728829e-01, 4.182100891421143e-03, 9.487609203804329e-03, 4.138178187819807e-03, 4.932933798695722e-03, 1.116866343458647e-02, 4.868551379441742e-03, 2.751653587714925e-02, 6.083779728138683e-02, 2.726263275772722e-02, 1.447999616994520e-03, 3.347685365833203e-03, 1.462779872268873e-03, 1.990698268128927e-03, 4.925400774725375e-03, 1.667308765771481e-03, 1.990698267534413e-03, 4.925400773233082e-03, 1.667308763641150e-03, 1.543192116132796e-07, 5.231162039880508e-07, 1.542279909020069e-07, 1.552201034600378e-07, 5.264829850231679e-07, 1.551547581338815e-07, 1.543475126980575e-07, 5.232504335361282e-07, 1.542724080925189e-07, 1.551621173366868e-07, 5.262222682333394e-07, 1.550710499173780e-07, 1.547722804265760e-07, 5.248284773206853e-07, 1.547046223077979e-07, 1.547722804265760e-07, 5.248284773206853e-07, 1.547046223077979e-07, 4.780228184864396e-06, 1.356620841870668e-05, 4.779938554338277e-06, 4.722195342216732e-06, 1.345718251692826e-05, 4.721314825359932e-06, 4.671735717854923e-06, 1.307806412984779e-05, 4.631671159510196e-06, 4.621073570310395e-06, 1.298620146888058e-05, 4.582846839537876e-06, 4.767206953510388e-06, 1.374913015497898e-05, 4.854442643633981e-06, 4.767206953510388e-06, 1.374913015497898e-05, 4.854442643633981e-06, 3.252612571284835e-03, 1.174766087694405e-02, 3.212122834116264e-03, 3.122209188854520e-03, 1.539157441160579e-02, 3.062953362618128e-03, 4.180773685606134e-03, 1.533338541468198e-02, 4.445449958471280e-03, 4.375805218770849e-03, 2.337807084924235e-02, 5.483697333457700e-03, 3.392947638400973e-03, 1.173580906763200e-02, 2.845564496288160e-03, 3.392947638400973e-03, 1.173580906763200e-02, 2.845564496288162e-03, 7.137024312973758e-02, 1.585807033686886e-01, 7.096421101252799e-02, 6.106204246384832e-02, 1.415420878837935e-01, 6.105998020349737e-02, 7.217118382171731e-02, 1.601328139238464e-01, 7.170113287577659e-02, 2.932509626282738e-05, 1.179834578180282e-04, 2.922665139881138e-05, 1.374861854641175e-01, 3.008026334919013e-01, 1.288702404872186e-01, 1.374861854641175e-01, 3.008026334919013e-01, 1.288702404872186e-01, 1.390682664499165e-03, 3.257085967659364e-03, 1.424786634345069e-03, 1.775020845754831e-03, 4.115085538725196e-03, 1.800916676710184e-03, 1.803585783757597e-02, 4.090585286831247e-02, 1.734156984939115e-02, 6.870086071778371e-02, 1.527825272408292e-01, 6.907723648036702e-02, 6.963111281912634e-03, 1.567959960834484e-02, 6.425503593466012e-03, 6.963111276863123e-03, 1.567959959219689e-02, 6.425503583134297e-03, 3.870138283527804e-03, 2.647959503425300e-02, 3.965743533655465e-03, 4.323452854291050e-03, 2.240881875305320e-02, 4.378446736871286e-03, 4.270817540106633e-03, 2.378188766316582e-02, 4.331189881019478e-03, 4.151654195210055e-03, 2.499661490786069e-02, 4.235003861821034e-03, 4.221290898661915e-03, 2.438468820489472e-02, 4.292676461177533e-03, 4.221290898661915e-03, 2.438468820489472e-02, 4.292676461177533e-03, 3.917892618833838e-03, 3.178065629696988e-02, 4.063158501323281e-03, 5.130413191011252e-03, 1.621474603582429e-02, 5.139503943553580e-03, 5.258404851889672e-03, 1.840982205272628e-02, 5.264947404398046e-03, 5.378712111226973e-03, 2.181949686239113e-02, 5.430301948008389e-03, 5.326338792966137e-03, 1.995784738818248e-02, 5.372827222487017e-03, 5.326338792966137e-03, 1.995784738818248e-02, 5.372827222487017e-03, 2.559398254238397e-03, 1.215044372633798e-02, 2.505005716772368e-03, 4.280365724570062e-02, 1.024496979416938e-01, 4.276085648436960e-02, 3.536338567354580e-02, 8.937709938671719e-02, 3.512715980945959e-02, 2.316794436113417e-02, 7.196184889858939e-02, 2.330359096127562e-02, 3.058957339241875e-02, 8.418541598269476e-02, 3.039655085000108e-02, 3.058957339241877e-02, 8.418541598269481e-02, 3.039655085000108e-02, 7.410086899502749e-03, 2.334638654025584e-02, 7.406676789284327e-03, 2.247216799497602e-02, 4.987617856674845e-02, 2.244461650907430e-02, 3.529654539695547e-02, 7.788812762021584e-02, 3.498681061424301e-02, 3.257995406204718e-02, 1.121358034148591e-01, 3.310105759860750e-02, 1.235918798785994e-01, 2.695906039987117e-01, 1.184337957634133e-01, 1.235918798786007e-01, 2.695906039987145e-01, 1.184337957634152e-01, 5.280932040206029e-03, 1.190083152213684e-02, 5.223570500483353e-03, 2.000801183929336e-03, 4.431357115695212e-03, 1.707058349475250e-03, 2.432080812765235e-03, 5.562456977982359e-03, 2.356530327212932e-03, 1.109478646927029e-01, 2.467482398629522e-01, 1.110077763714517e-01, 7.622044591832956e-03, 2.000036536368920e-02, 8.696085925696101e-03, 7.622044581501072e-03, 2.000036535580947e-02, 8.696085926969929e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
