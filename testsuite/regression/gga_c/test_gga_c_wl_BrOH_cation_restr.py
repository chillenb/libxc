
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_wl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.017299077311638e-02, -5.017375437092556e-02, -5.017592481289156e-02, -5.016459031934648e-02, -5.017070299662242e-02, -5.017070299662242e-02, -4.167489231604746e-02, -4.167975718601380e-02, -4.179248309410599e-02, -4.159690649526359e-02, -4.168073665525774e-02, -4.168073665525774e-02, -2.883657110899903e-02, -2.858958878947573e-02, -2.277502548720632e-02, -2.303844875033246e-02, -2.318823444482284e-02, -2.318823444482284e-02, -4.666384951854034e-03, -5.521075370033660e-03, -3.138657018129534e-02, 3.643602500944679e-03, 1.010985919178494e-04, 1.010985919178524e-04, 2.273831912052825e-02, 2.263743021282704e-02, 1.873009174629504e-02, 2.324412986503790e-02, 2.290901511767603e-02, 2.290901511767603e-02, -5.815360207146551e-02, -5.836825908637754e-02, -5.816243762962888e-02, -5.835192865472065e-02, -5.826277013257381e-02, -5.826277013257381e-02, -2.225863294175789e-02, -2.270415120324674e-02, -2.126548360857210e-02, -2.165017349862667e-02, -2.300152403371505e-02, -2.300152403371505e-02, -4.277622241075341e-02, -7.445158007691081e-02, -3.964388069929775e-02, -6.595211578097165e-02, -4.535859324603499e-02, -4.535859324603499e-02, 1.072023774052795e-02, 8.120629092143305e-04, 1.150804897380999e-02, -8.085483664861216e-02, 6.835254427992893e-03, 6.835254427992893e-03, 2.318104389839933e-02, 2.313804026918827e-02, 2.171095761430102e-02, 1.494042433091244e-02, 2.231113700849117e-02, 2.231113700849117e-02, -9.933268305799886e-02, -7.507054932849223e-02, -8.133010336037089e-02, -8.796013959863580e-02, -8.443715918158907e-02, -8.443715918158907e-02, -1.146035663349773e-01, -2.894141176549175e-02, -3.779971101812971e-02, -5.115774772588624e-02, -4.367717680820678e-02, -4.367717680820678e-02, -7.243750451412299e-02, -3.768932857178160e-03, -9.694550046116340e-03, -2.526949088656747e-02, -1.665936413717146e-02, -1.665936413717146e-02, -2.825870667880820e-02, 1.911889475866185e-02, 1.726544051426461e-02, -3.156962832916010e-02, 1.184227495411662e-02, 1.184227495411662e-02, 2.251023151487519e-02, 2.236848267062370e-02, 2.275185211316889e-02, 1.262496468395237e-02, 2.215055306946563e-02, 2.215055306946562e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_wl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.187854636126846e-01, -1.187865770308118e-01, -1.187897425880447e-01, -1.187732151027529e-01, -1.187821284180486e-01, -1.187821284180486e-01, -1.053496613821957e-01, -1.053571411268922e-01, -1.055303987283471e-01, -1.052298502734674e-01, -1.053586652947793e-01, -1.053586652947793e-01, -8.253997530578196e-02, -8.213751660825032e-02, -7.244667978906011e-02, -7.290971295575915e-02, -7.315883912135669e-02, -7.315883912135669e-02, -3.725391176195739e-02, -3.882480599411986e-02, -8.701955930343043e-02, -2.125604202985032e-02, -2.814178318737249e-02, -2.814178318737248e-02, 1.906676598813434e-02, 1.885926807978388e-02, 1.014050093944065e-02, 2.016035646040256e-02, 1.948360059043583e-02, 1.948360059043583e-02, -1.294757768433872e-01, -1.297661818264656e-01, -1.294877419892529e-01, -1.297441086306120e-01, -1.296235339599191e-01, -1.296235339599191e-01, -7.298892328687286e-02, -7.377348160963411e-02, -7.123955542331545e-02, -7.192159650197880e-02, -7.429188461515907e-02, -7.429188461515907e-02, -1.032705664514163e-01, -1.425177811370982e-01, -9.842280779287897e-02, -1.324409799901162e-01, -1.069763687347046e-01, -1.069763687347046e-01, -6.943894098457390e-03, -2.721297628747791e-02, -5.273252867794114e-03, -1.551784044748490e-01, -1.475406184416533e-02, -1.475406184416533e-02, 2.009482077403871e-02, 1.996874718645730e-02, 1.748137801229170e-02, 2.069616333813964e-03, 1.848591003683215e-02, 1.848591003683215e-02, -1.629619410306042e-01, -1.424128740465522e-01, -1.484490123121898e-01, -1.542852609270872e-01, -1.512554115961846e-01, -1.512554115961846e-01, -1.714562774613273e-01, -8.178243258344479e-02, -9.549917078383177e-02, -1.142480484536604e-01, -1.040327661315280e-01, -1.040327661315280e-01, -1.408010108912384e-01, -3.627614069481086e-02, -4.746429556979410e-02, -7.462151665209323e-02, -5.996725338545434e-02, -5.996725338545435e-02, -8.040710984987487e-02, 1.095619619087609e-02, 6.948469475512230e-03, -8.415791638071032e-02, -4.365009124904062e-03, -4.365009124904061e-03, 1.850442041879364e-02, 1.880327531310547e-02, 1.937826586261151e-02, -2.737221749002881e-03, 1.822126571585153e-02, 1.822126571585153e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_wl_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.736270790924556e-10, 1.736306952087042e-10, 1.736363431454384e-10, 1.735827694535470e-10, 1.736123191423785e-10, 1.736123191423785e-10, 1.016520285379034e-06, 1.016758291891735e-06, 1.022160039782605e-06, 1.011840584527720e-06, 1.016683559463231e-06, 1.016683559463231e-06, 1.899315402590291e-03, 1.881136128394267e-03, 1.480073493648038e-03, 1.445574416987766e-03, 1.473064272750140e-03, 1.473064272750140e-03, 2.405491344848721e-01, 2.441125163946194e-01, 1.024684116986697e-03, 3.393046087668078e-01, 3.067494778483499e-01, 3.067494778483499e-01, 6.559356080232669e+02, 5.929600651074929e+02, 5.485803742820734e+00, 2.814739637526896e+03, 1.753939187575311e+03, 1.753939187575314e+03, 2.877630599794771e-07, 2.901235059949171e-07, 2.878576475719099e-07, 2.899411215731952e-07, 2.889626950181458e-07, 2.889626950181458e-07, 5.865625648634746e-06, 5.829135297834577e-06, 5.630026122101216e-06, 5.597412760164008e-06, 5.966071254649908e-06, 5.966071254649908e-06, 8.100070539736364e-03, 2.194002016796430e-02, 1.016750069934830e-02, 2.878999573652742e-02, 8.514858172251120e-03, 8.514858172251120e-03, 6.054413475593182e-01, 1.273184947499807e-01, 7.463017921606403e-01, 1.047867978496803e-04, 5.658673053480620e-01, 5.658673053480620e-01, 7.123859766072390e+03, 3.362277108523703e+03, 2.540673767044304e+04, 2.120623456127545e+00, 8.898834284926945e+03, 8.898834284926925e+03, 8.607325764876492e-02, 3.453064976735076e-02, 4.382616025312028e-02, 5.624505009383333e-02, 4.927664662758650e-02, 4.927664662758650e-02, 1.804701524505863e-01, 9.005492546185177e-03, 1.193378584934685e-02, 1.884618702682091e-02, 1.459136344963602e-02, 1.459136344963602e-02, 1.589723466362607e-02, 6.834798978909316e-02, 4.944195459724806e-02, 4.084395025505159e-02, 4.442206849430017e-02, 4.442206849430019e-02, 1.306979062590505e-02, 5.671306567282495e+00, 2.846673896736713e+00, 7.305692252305586e-02, 1.450444506187242e+00, 1.450444506187242e+00, 2.233887860517802e+02, 4.578027336498298e+05, 3.196676358859990e+04, 1.639240324774555e+00, 1.301053217332657e+04, 1.301053217332662e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
