
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_cs1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.654968326109273e-02, -5.654975548821991e-02, -5.654996488624511e-02, -5.654889245308100e-02, -5.654947033677878e-02, -5.654947033677878e-02, -5.185328147077991e-02, -5.185405760139117e-02, -5.187205970697886e-02, -5.184149100079710e-02, -5.185431078250908e-02, -5.185431078250908e-02, -3.681118091028777e-02, -3.672382378273426e-02, -3.415174231023717e-02, -3.436362069614884e-02, -3.441811708075182e-02, -3.441811708075182e-02, -8.740597907276958e-03, -9.698353926253175e-03, -3.915504467814986e-02, 1.957317080754924e-03, -2.696664333892073e-03, -2.696664333892068e-03, 1.501053462031135e-03, 1.577896591671536e-03, 7.402995413162363e-03, 8.745005811026500e-04, 1.095480531251660e-03, 1.095480531251661e-03, -5.477138693217644e-02, -5.478217268455071e-02, -5.477183871548753e-02, -5.478136238580019e-02, -5.477689003156747e-02, -5.477689003156747e-02, -4.221859941243440e-02, -4.255343992411156e-02, -4.149052040968899e-02, -4.180159447044828e-02, -4.274237161620473e-02, -4.274237161620473e-02, -3.769545023468163e-02, -3.979699760315110e-02, -3.640916146645308e-02, -3.813946211661007e-02, -3.810590578112626e-02, -3.810590578112626e-02, 9.329328106095993e-03, -1.878162959010908e-03, 9.610517673638129e-03, -5.060696697282731e-02, 5.589332223797084e-03, 5.589332223797084e-03, 6.762995691275181e-04, 8.550275836430945e-04, 6.547045708125148e-04, 9.375030490579443e-03, 7.877038297082485e-04, 7.877038297082482e-04, -3.887890143761766e-02, -3.872729977950748e-02, -3.878856364771903e-02, -3.883270973412937e-02, -3.881136550010093e-02, -3.881136550010093e-02, -3.852718171929756e-02, -3.331272058795187e-02, -3.553837942046636e-02, -3.714514791366379e-02, -3.641173472021377e-02, -3.641173472021377e-02, -4.037134102051324e-02, -8.705367863555611e-03, -1.635421289610316e-02, -2.805435540735673e-02, -2.280990842635802e-02, -2.280990842635802e-02, -3.213621340001797e-02, 7.201409313862414e-03, 8.832108473296119e-03, -2.903408970194418e-02, 8.858952828924108e-03, 8.858952828924115e-03, 2.099631508617911e-03, 2.301900908954490e-04, 4.818038708247346e-04, 9.082074549829650e-03, 7.293382766085001e-04, 7.293382766084993e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_cs1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.310373365093551e-02, -6.310348369897280e-02, -6.310277685438179e-02, -6.310648772291630e-02, -6.310448560312192e-02, -6.310448560312192e-02, -6.324098453287158e-02, -6.323844399719342e-02, -6.317990469523808e-02, -6.328252930205684e-02, -6.323803174869816e-02, -6.323803174869816e-02, -5.665512551691487e-02, -5.683997239207424e-02, -6.202507234534575e-02, -6.188543325126131e-02, -6.168703257049037e-02, -6.168703257049037e-02, -4.482266314143965e-02, -4.505753773928969e-02, -5.704644381265379e-02, -3.129535146437768e-02, -3.890571340766375e-02, -3.890571340766372e-02, 1.979283419127737e-03, 2.078049948454314e-03, 7.710864893265003e-03, 1.160782482110753e-03, 1.450637518354973e-03, 1.450637518354975e-03, -5.918683846068133e-02, -5.914870093910009e-02, -5.918526154294319e-02, -5.915158671082855e-02, -5.916737199355760e-02, -5.916737199355760e-02, -7.836198467697134e-02, -7.776029219737125e-02, -7.985329857022165e-02, -7.931171207839376e-02, -7.731254728709372e-02, -7.731254728709372e-02, -4.730782497401552e-02, -4.454486867894319e-02, -4.721190385632398e-02, -4.343159534047111e-02, -4.681334684519396e-02, -4.681334684519396e-02, -7.602648197623145e-03, -4.250532831429146e-02, -4.769482018845527e-03, -5.349073752129104e-02, -2.028990614384063e-02, -2.028990614384063e-02, 8.988032688005015e-04, 1.134889901152524e-03, 8.684313489101848e-04, 4.448182010567524e-03, 1.044546376644246e-03, 1.044546376644248e-03, -4.329739255233853e-02, -4.353805190665107e-02, -4.342311777837858e-02, -4.335231061311109e-02, -4.338486257807340e-02, -4.338486257807340e-02, -4.293694878644239e-02, -5.118216624433944e-02, -4.712105271236987e-02, -4.425122261222936e-02, -4.549667098153408e-02, -4.549667098153408e-02, -4.515456978856733e-02, -5.176724059821139e-02, -5.429377418119997e-02, -4.692533402673348e-02, -5.130901669220185e-02, -5.130901669220184e-02, -5.011718117962881e-02, 7.757372464589903e-03, 7.557934170999683e-03, -4.232390718538554e-02, -2.961470683456860e-03, -2.961470683456828e-03, 2.748101771034369e-03, 3.066302992654112e-04, 6.408940864496912e-04, -7.740581404207672e-04, 9.674176476434461e-04, 9.674176476434501e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_cs1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.593326558195449e-11, 1.593270144640433e-11, 1.593067493768046e-11, 1.593905865391253e-11, 1.593459699405353e-11, 1.593459699405353e-11, 1.603890620365498e-07, 1.603666607299379e-07, 1.598290244469489e-07, 1.606133374401665e-07, 1.603432295846185e-07, 1.603432295846185e-07, 5.744481454153811e-04, 5.804478011881068e-04, 7.308926894689072e-04, 7.006660423241564e-04, 7.047888776844719e-04, 7.047888776844719e-04, 2.551106395002242e-01, 2.467316727896102e-01, 2.658193283149017e-04, 4.603036565634203e-01, 3.888478582725040e-01, 3.888478582725038e-01, 2.186898802810400e+00, 2.308189908846490e+00, 1.178298008287312e+00, 2.002308304547117e+00, 2.537147943015130e+00, 2.537147943014244e+00, 1.383775898504226e-08, 1.373711764044129e-08, 1.383349540897533e-08, 1.374464368353555e-08, 1.378653950462497e-08, 1.378653950462497e-08, 3.977343863149774e-06, 3.818772441642821e-06, 4.128725654510017e-06, 3.984899239875795e-06, 3.816313992105562e-06, 3.816313992105562e-06, 7.331363090664173e-04, 1.720947032544067e-04, 1.144769687927093e-03, 4.004531093564759e-04, 6.297015965174763e-04, 6.297015965174763e-04, 6.578179332134715e-01, 1.837398430196001e-01, 7.445400179554289e-01, 8.625111955424496e-07, 7.128097812850718e-01, 7.128097812850718e-01, 2.644408966255649e+00, 2.357070554339110e+00, 1.483552050355480e+01, 1.221408417781069e+00, 6.893352635473718e+00, 6.893352635471036e+00, 8.967479263324467e-05, 2.425967820536165e-04, 1.895889293338273e-04, 1.450823694749822e-04, 1.674064163074394e-04, 1.674064163074394e-04, 4.898805901064840e-05, 2.365864185101222e-03, 1.525164451412696e-03, 8.244057478759352e-04, 1.159547117804705e-03, 1.159547117804705e-03, 1.503015410162357e-04, 8.772573210924271e-02, 4.637400367037667e-02, 1.226013969084227e-02, 2.571775030341456e-02, 2.571775030341457e-02, 3.494717526508616e-03, 1.080951209559033e+00, 1.032186099177358e+00, 1.241519249143666e-02, 1.255450138378635e+00, 1.255450138378630e+00, 1.749538105475938e+00, 1.165136180868996e+01, 5.622501974358181e+00, 1.296871986567217e+00, 8.712811724855829e+00, 8.712811724848281e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
