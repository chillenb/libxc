
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sogga11_x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.770050846193078e-01, -5.769962635186769e-01, -5.769732106426683e-01, -5.771040804027825e-01, -5.770332252264092e-01, -5.770332252264092e-01, -1.216734046969521e-01, -1.216575043100383e-01, -1.212956389953058e-01, -1.219463165512407e-01, -1.216565072008268e-01, -1.216565072008268e-01, -6.430357741216118e-02, -6.439268622601112e-02, -6.570990578302266e-02, -6.584926594801213e-02, -6.574662141097264e-02, -6.574662141097264e-02, -4.233466057765276e-02, -4.102056680330181e-02, -6.773189360257935e-02, -7.891788480779657e-02, -5.645114659353655e-02, -5.645114659353655e-02, -1.373070317998481e-02, -1.434980381174385e-02, -5.858076773184945e-02, -8.513261800775983e-03, -1.040716328469338e-02, -1.040716328469338e-02, -1.211334730860927e-01, -1.210438596676026e-01, -1.211297848884750e-01, -1.210506339278764e-01, -1.210874970594358e-01, -1.210874970594358e-01, -1.785563835530328e-01, -1.745885548402704e-01, -1.903452163242488e-01, -1.867201843293398e-01, -1.707944584148440e-01, -1.707944584148440e-01, -5.230594559051571e-02, -5.816120201525827e-02, -5.135685804885540e-02, -5.432085888995546e-02, -5.218391107100354e-02, -5.218391107100354e-02, -1.074200140699719e-01, -7.469210826538759e-02, -1.048968580911209e-01, -7.773965341583677e-02, -9.338156259546616e-02, -9.338156259546616e-02, -6.762855853204939e-03, -8.346174499048805e-03, -6.588189822177047e-03, -8.517851738207459e-02, -7.772421594804584e-03, -7.772421594804584e-03, -6.085267782087547e-02, -5.691513197776957e-02, -5.814638894600686e-02, -5.927871929797138e-02, -5.869822179880085e-02, -5.869822179880085e-02, -6.173372885931989e-02, -5.471716316117331e-02, -5.074681843368646e-02, -5.045266009861797e-02, -4.976967723904698e-02, -4.976967723904698e-02, -5.847526088594183e-02, -5.770489704388700e-02, -4.770901478682030e-02, -4.698641090047274e-02, -4.775756370789693e-02, -4.775756370789615e-02, -5.267777044853742e-02, -5.636359810157419e-02, -7.214229341912777e-02, -4.260606735705232e-02, -9.600512616325511e-02, -9.600512616325510e-02, -1.838543031154124e-02, -2.510651983291350e-03, -4.973977636418034e-03, -9.391000229585877e-02, -7.255305478133483e-03, -7.255305478133490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sogga11_x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.842162990375688e-01, 1.842620362583935e-01, 1.843849581151953e-01, 1.837061846851293e-01, 1.840732626876760e-01, 1.840732626876760e-01, 5.864490700991067e-02, 5.848245571721261e-02, 5.475555051971871e-02, 6.136842503177421e-02, 5.846487382983691e-02, 5.846487382983691e-02, -4.735504398985768e-02, -4.831411659051332e-02, -5.666135380332695e-02, -5.737661129544715e-02, -5.786620956180732e-02, -5.786620956180732e-02, 2.627770516708251e-02, 9.305548171221506e-03, -4.835001447055292e-02, 1.425947152683881e-01, 1.238405027841054e-01, 1.238405027841059e-01, -1.784800098055389e-02, -1.866875245145354e-02, -8.226310924026736e-02, -1.105908929439246e-02, -1.352203695998031e-02, -1.352203695998031e-02, -1.013020177536605e-01, -1.020935909990565e-01, -1.013367705595239e-01, -1.020372925401166e-01, -1.017189153282080e-01, -1.017189153282080e-01, 3.907573396230850e-01, 3.843905444100707e-01, 4.047140233320958e-01, 4.015080617553383e-01, 3.772269728437073e-01, 3.772269728437073e-01, -4.504940975066352e-02, -7.839607056922882e-02, -3.889039478446928e-02, -7.477090885949092e-02, -5.156651219402218e-02, -5.156651219402218e-02, -6.024146944607641e-02, 1.623287335783518e-01, -7.754558958055477e-02, -1.022103723373680e-01, 7.403563972914083e-02, 7.403563972914083e-02, -8.802454334571051e-03, -1.084747613102260e-02, -8.614211047549298e-03, -1.076153825570103e-01, -1.013632897135814e-02, -1.013632897135814e-02, -7.479800879002457e-02, -7.613548231723395e-02, -7.593821748358336e-02, -7.557144373933093e-02, -7.577859579068882e-02, -7.577859579068882e-02, -7.289496083196587e-02, -2.880559075695600e-02, -3.559145869352132e-02, -6.497359337559522e-02, -5.051917444309426e-02, -5.051917444309426e-02, -7.956987750156887e-02, 1.044194640067778e-01, -1.067338647952936e-02, -2.413808827487623e-02, -4.276583065266221e-02, -4.276583065266057e-02, -2.723908361576628e-02, -7.884097105153261e-02, -1.005007015576041e-01, -3.097002835326203e-02, -7.390253728308950e-02, -7.390253728308957e-02, -2.396565663240402e-02, -3.295006267022398e-03, -6.494400134252809e-03, -8.778772458176227e-02, -9.469470999895049e-03, -9.469470999895051e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sogga11_x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.246159484443575e-09, -2.246297353903257e-09, -2.246615348798683e-09, -2.244570592149235e-09, -2.245683792167188e-09, -2.245683792167188e-09, -3.365288397837845e-06, -3.362768194720402e-06, -3.304438050866320e-06, -3.405039540916040e-06, -3.362162683222063e-06, -3.362162683222063e-06, -9.568348956115733e-04, -9.173319834426821e-04, -5.540269510757493e-04, -5.208375083271554e-04, -5.103087653636414e-04, -5.103087653636414e-04, -5.982464089924305e-01, -4.488240258236190e-01, -5.510649093124725e-04, -3.394216313439397e+00, -2.196766552135686e+00, -2.196766552135688e+00, 3.731008412450567e+01, 3.867813657901362e+01, 6.394623049580365e+00, 4.002286061636597e+01, 4.768764662600123e+01, 4.768764662600137e+01, -1.316385537833991e-07, -1.285779747531098e-07, -1.315028215624253e-07, -1.287937201063322e-07, -1.300226580579936e-07, -1.300226580579936e-07, -7.458846275522925e-05, -7.229036797584996e-05, -7.599869712964352e-05, -7.423533121045749e-05, -7.222333006055192e-05, -7.222333006055192e-05, -2.027682515137935e-03, 4.765538843200348e-03, -3.607424736791408e-03, 6.624296135278825e-03, -1.076501506852256e-03, -1.076501506852256e-03, -2.405479198789112e+00, -1.208368644283765e+00, -2.190699906792095e+00, 2.655452881304246e-05, -5.074751268037354e+00, -5.074751268037354e+00, 5.610905523104688e+01, 4.734875982575282e+01, 3.147677281979808e+02, 7.604596610457817e-01, 1.405657819952580e+02, 1.405657819952578e+02, 1.006124251713209e-02, 7.031692148593809e-03, 7.839087622707424e-03, 8.669450757535994e-03, 8.229371187926285e-03, 8.229371187926285e-03, 1.323303204259752e-02, -6.154209425050179e-03, -4.921483762587139e-03, 2.701813961540212e-03, -1.483730337114936e-03, -1.483730337114936e-03, 3.661548436411302e-03, -3.865917298241597e-01, -6.244975430286936e-02, -2.660546003340894e-02, -1.321738942104860e-02, -1.321738942104866e-02, -8.880254612404971e-03, 6.395658784419028e+00, 3.454846913180222e+00, -2.689475789525188e-02, -3.798327356818584e+00, -3.798327356818580e+00, 2.640008105906771e+01, 2.974427847171705e+02, 1.276706065389391e+02, -2.746344107380508e+00, 1.807896961419754e+02, 1.807896961419769e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
