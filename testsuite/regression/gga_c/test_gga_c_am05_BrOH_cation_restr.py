
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_am05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.508909236543627e-01, -1.508912301292855e-01, -1.508922497352431e-01, -1.508876972715005e-01, -1.508901313468040e-01, -1.508901313468040e-01, -9.985796398899581e-02, -9.985909367471418e-02, -9.988588452775148e-02, -9.984424416203889e-02, -9.985993802736605e-02, -9.985993802736605e-02, -5.880279869738133e-02, -5.874350635839243e-02, -5.734921040951927e-02, -5.755721660035307e-02, -5.754194895430637e-02, -5.754194895430637e-02, -3.151805416520415e-02, -3.180373274184938e-02, -6.245961567829525e-02, -2.704000317034031e-02, -2.885870785961446e-02, -2.885870785961446e-02, -3.063742181942169e-03, -3.199037146596033e-03, -1.196587392847454e-02, -1.908252841460630e-03, -2.328706584883018e-03, -2.328706584883018e-03, -1.140051034088310e-01, -1.140532511420290e-01, -1.140071308662550e-01, -1.140496359849523e-01, -1.140295889063402e-01, -1.140295889063402e-01, -8.165363567428956e-02, -8.190823374300649e-02, -8.134205284481649e-02, -8.156499305724309e-02, -8.194889982348472e-02, -8.194889982348472e-02, -5.797175555314409e-02, -6.328243792195104e-02, -5.592023282725790e-02, -5.983706571909470e-02, -5.865842250798845e-02, -5.865842250798845e-02, -2.198207093257870e-02, -3.124393906921847e-02, -2.100730888998465e-02, -9.076821309123762e-02, -2.413085687463924e-02, -2.413085687463924e-02, -1.516978497831166e-03, -1.870621866336212e-03, -1.474727838908646e-03, -1.648917895520159e-02, -1.740010049741370e-03, -1.740010049741370e-03, -6.296974708986480e-02, -6.145590017692739e-02, -6.194999576810004e-02, -6.238889141410078e-02, -6.216583422769995e-02, -6.216583422769995e-02, -6.280805691724171e-02, -5.247472774250857e-02, -5.460678139098205e-02, -5.724044071649400e-02, -5.583544126137098e-02, -5.583544126137098e-02, -6.418093560608255e-02, -3.519882072576346e-02, -3.869949911713971e-02, -4.528251866859121e-02, -4.177432209470914e-02, -4.177432209470914e-02, -5.074325119286656e-02, -1.160800293086755e-02, -1.431832207731579e-02, -4.535816409511278e-02, -1.916704581471430e-02, -1.916704581471429e-02, -4.083190580974141e-03, -5.638716263171535e-04, -1.116166048026457e-03, -1.844291429698925e-02, -1.624415699791730e-03, -1.624415699791732e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_am05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.807332922928797e-01, -1.807335481139091e-01, -1.807344448509056e-01, -1.807306433064413e-01, -1.807326696355827e-01, -1.807326696355827e-01, -1.224535256434351e-01, -1.224548628878870e-01, -1.224864799762727e-01, -1.224371441849184e-01, -1.224558481722624e-01, -1.224558481722624e-01, -7.366610128304768e-02, -7.357037788533315e-02, -7.118269600043747e-02, -7.146447976574150e-02, -7.146925703949830e-02, -7.146925703949830e-02, -3.864832108147272e-02, -3.908396667054558e-02, -7.820864364536628e-02, -3.266072430292209e-02, -3.506350366816693e-02, -3.506350366816692e-02, -3.927444564708356e-03, -4.097297115990697e-03, -1.473664009394435e-02, -2.466860136540150e-03, -3.000532293530557e-03, -3.000532293530557e-03, -1.373862029859284e-01, -1.374064160189142e-01, -1.373870934557248e-01, -1.374049440077554e-01, -1.373965209923882e-01, -1.373965209923882e-01, -9.908922347602726e-02, -9.947673589877887e-02, -9.851253369390917e-02, -9.885353541231551e-02, -9.958663785436948e-02, -9.958663785436948e-02, -7.322854097039756e-02, -7.631742536063542e-02, -7.081446150069330e-02, -7.337290941629859e-02, -7.396302153443574e-02, -7.396302153443574e-02, -2.647088979161967e-02, -3.768754886935256e-02, -2.533108928465022e-02, -1.069123749842439e-01, -2.912245498356382e-02, -2.912245498356382e-02, -1.967708438058387e-03, -2.418968043133102e-03, -1.913685258897993e-03, -2.005787490972702e-02, -2.252577217825129e-03, -2.252577217825129e-03, -7.310418508731135e-02, -7.409013608030136e-02, -7.386680744467360e-02, -7.358844698340450e-02, -7.373929795884394e-02, -7.373929795884394e-02, -7.181757140194915e-02, -6.622588466577051e-02, -6.923201786373344e-02, -7.190055332199816e-02, -7.064933133131690e-02, -7.064933133131690e-02, -7.764386352789772e-02, -4.272104737959777e-02, -4.756707742371672e-02, -5.737589901635921e-02, -5.216514298858519e-02, -5.216514298858519e-02, -6.411872444643432e-02, -1.431196097552386e-02, -1.750444088700209e-02, -5.797160968868727e-02, -2.322081488991746e-02, -2.322081488991746e-02, -5.201766230554797e-03, -7.393600253578581e-04, -1.453539023056589e-03, -2.236514079673654e-02, -2.105055930598200e-03, -2.105055930598201e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_am05_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.202695984344554e-11, 5.202761354063740e-11, 5.202813460646480e-11, 5.201845902103004e-11, 5.202386767568251e-11, 5.202386767568251e-11, 2.245084608417642e-07, 2.245537157336640e-07, 2.255768418239636e-07, 2.236004075138599e-07, 2.245370494171303e-07, 2.245370494171303e-07, 2.778659427026206e-04, 2.748868388671310e-04, 2.067768314044169e-04, 2.029346468000330e-04, 2.069672411419920e-04, 2.069672411419920e-04, 1.466103146167542e-02, 1.546677854995838e-02, 1.574272605906696e-04, 1.225039060980388e-02, 1.417358751063416e-02, 1.417358751063412e-02, 3.805441549345469e-02, 3.989659015867709e-02, 1.603578819024216e-02, 3.723362706580103e-02, 4.596734046399385e-02, 4.596734046399405e-02, 5.798704732005654e-08, 5.827334799184397e-08, 5.799840529841026e-08, 5.825114932907212e-08, 5.813292330029808e-08, 5.813292330029808e-08, 1.109829223914678e-06, 1.109359072831083e-06, 1.053774325265500e-06, 1.053419330468760e-06, 1.138053746372217e-06, 1.138053746372217e-06, 1.099248495778005e-03, 1.779693671831611e-03, 1.379875094273540e-03, 2.709582792575119e-03, 1.133930959071020e-03, 1.133930959071020e-03, 1.070627971082098e-02, 6.069337823969114e-03, 1.168992425221602e-02, 1.052243372980041e-05, 1.495560753774920e-02, 1.495560753774920e-02, 5.053522302317403e-02, 4.394291896207634e-02, 2.846298704523219e-01, 1.719762006101093e-02, 1.297259459934074e-01, 1.297259459934072e-01, 3.388650555661598e-03, 2.674238061625088e-03, 2.896690553753455e-03, 3.103189046854356e-03, 2.997243275620472e-03, 2.997243275620472e-03, 4.187832169577047e-03, 1.207184172212793e-03, 1.611545875718208e-03, 2.272855005668208e-03, 1.905265733950508e-03, 1.905265733950508e-03, 1.375155494153834e-03, 4.381207528263814e-03, 4.126724987532707e-03, 4.867106273013230e-03, 4.553865042396475e-03, 4.553865042396488e-03, 1.707175434697266e-03, 1.471088982594437e-02, 1.389426470090114e-02, 8.860073765864299e-03, 1.982443158469779e-02, 1.982443158469782e-02, 2.901570418820556e-02, 2.430186626618786e-01, 1.109421213218494e-01, 1.980361457706642e-02, 1.653100544722128e-01, 1.653100544722133e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
