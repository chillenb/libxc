
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_spbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.541979160404439e-02, -5.542054096810996e-02, -5.542267217804803e-02, -5.541154889430883e-02, -5.541754750280109e-02, -5.541754750280109e-02, -4.623753063420386e-02, -4.624195714768937e-02, -4.634453155846283e-02, -4.616676532955480e-02, -4.624287149151517e-02, -4.624287149151517e-02, -3.215228232639024e-02, -3.195973614588938e-02, -2.734215812864272e-02, -2.756976296909618e-02, -2.756572116866780e-02, -2.756572116866780e-02, -1.141355649303058e-02, -1.198673872313134e-02, -3.452061795475781e-02, -6.076728274338045e-03, -5.754619550479387e-03, -5.754619550479383e-03, -4.368919210617165e-06, -5.147789586191186e-06, -3.062430912107970e-04, -9.358622911539299e-07, -1.525637712580276e-06, -1.525637712580276e-06, -6.165191282448391e-02, -6.184106946750718e-02, -6.165970587538749e-02, -6.182668944453996e-02, -6.174813525371979e-02, -6.174813525371979e-02, -2.807936982752501e-02, -2.848466302776327e-02, -2.718161154275041e-02, -2.753067402587087e-02, -2.875254404497879e-02, -2.875254404497879e-02, -4.118392155142434e-02, -5.635485616267625e-02, -3.875095270500722e-02, -5.187750337930564e-02, -4.272175113980071e-02, -4.272175113980069e-02, -2.562596256589663e-03, -8.045038360643065e-03, -2.225018855953102e-03, -7.257771641687545e-02, -4.246795458580609e-03, -4.246795458580609e-03, -5.230500467634947e-07, -9.538058584838277e-07, -1.132103774310151e-06, -1.051272511473474e-03, -1.179870094803956e-06, -1.179870094807859e-06, -6.052736190322397e-02, -5.536728891351311e-02, -5.706191094902330e-02, -5.855870443072965e-02, -5.779906074657234e-02, -5.779906074657234e-02, -6.165095656492284e-02, -3.121492479950310e-02, -3.735501834701441e-02, -4.516509046758429e-02, -4.101399144710507e-02, -4.101399144710507e-02, -5.633195832073026e-02, -1.126703096786818e-02, -1.565332548040095e-02, -2.735143909993561e-02, -2.092594634755442e-02, -2.092594634755442e-02, -3.042380480070573e-02, -2.637287740279558e-04, -5.564872556597864e-04, -3.117829075114547e-02, -1.985737583057527e-03, -1.985737583057531e-03, -9.869358604667686e-06, -5.130960153889447e-08, -2.924751405846901e-07, -1.719379684195877e-03, -1.088704483932779e-06, -1.088704483928876e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_spbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.227723294956821e-01, -1.227724819048863e-01, -1.227733155094764e-01, -1.227735725143659e-01, -1.227765472640606e-01, -1.227762631157555e-01, -1.227605414336416e-01, -1.227614428631937e-01, -1.227685490242347e-01, -1.227700574549718e-01, -1.227685490242347e-01, -1.227700574549718e-01, -1.045410710080689e-01, -1.045425865210413e-01, -1.045467894642633e-01, -1.045485201619722e-01, -1.046837776886788e-01, -1.046814865046612e-01, -1.044503142181071e-01, -1.044487574073437e-01, -1.045697740248136e-01, -1.045282173769140e-01, -1.045697740248136e-01, -1.045282173769140e-01, -7.436273798703584e-02, -7.402817940619698e-02, -7.416051692364602e-02, -7.375152954418625e-02, -6.732870773619248e-02, -6.784273865025929e-02, -6.805699982284828e-02, -6.789500392154195e-02, -6.565906424173759e-02, -7.056227129497786e-02, -6.565906424173759e-02, -7.056227129497786e-02, -3.361164145211309e-02, -3.225797610613922e-02, -3.498904768161127e-02, -3.338269071749946e-02, -8.000050104135568e-02, -7.703915420596417e-02, -1.966335585377507e-02, -1.938704291836017e-02, -1.616136088404621e-02, -3.056272799314580e-02, -1.616136088404622e-02, -3.056272799314577e-02, -1.744740863569122e-05, -1.665439014891074e-05, -2.062139583510242e-05, -1.955737780095592e-05, -1.178637498735012e-03, -1.120412368215859e-03, -3.644795291486414e-06, -3.689703627966056e-06, -5.548918351086821e-06, -8.130280313659347e-06, -5.548918351086821e-06, -8.130280313660648e-06, -1.250921249331324e-01, -1.251256455978808e-01, -1.252883076988901e-01, -1.253228017955158e-01, -1.250999415835833e-01, -1.251340897258640e-01, -1.252737877313017e-01, -1.253074990700156e-01, -1.251919335120186e-01, -1.252261135163771e-01, -1.251919335120186e-01, -1.252261135163771e-01, -7.400258709627959e-02, -7.400632998042277e-02, -7.475616511536662e-02, -7.477657132024029e-02, -7.238650560266190e-02, -7.226205325960994e-02, -7.305970245304043e-02, -7.292864410641964e-02, -7.508456064428909e-02, -7.541631628256051e-02, -7.508456064428909e-02, -7.541631628256051e-02, -7.980144426097985e-02, -8.006904973621835e-02, -8.232616767669874e-02, -8.227026263280091e-02, -7.899395130626216e-02, -7.551423636895069e-02, -8.170431595401653e-02, -7.790987616235408e-02, -7.836502129458313e-02, -8.366228034786340e-02, -7.836502129458310e-02, -8.366228034786335e-02, -8.961628480884606e-03, -8.877010232430402e-03, -2.512622747134845e-02, -2.499642275542590e-02, -8.027450059861213e-03, -7.620212576045575e-03, -1.158840072770153e-01, -1.159548476683172e-01, -1.462131611059157e-02, -1.378883156661204e-02, -1.462131611059157e-02, -1.378883156661204e-02, -2.083857639641864e-06, -2.027385579675863e-06, -3.758589308147254e-06, -3.717742096089604e-06, -4.544491873962868e-06, -4.362684627103093e-06, -3.828175126552584e-03, -3.805465102182042e-03, -5.401276631110039e-06, -4.323231123075789e-06, -5.401276631114620e-06, -4.323231123078201e-06, -7.604223620532144e-02, -7.555676990973970e-02, -7.982614990810467e-02, -7.935579432799185e-02, -7.883295480268467e-02, -7.835566583331278e-02, -7.775369708084981e-02, -7.727497765359571e-02, -7.832514069309759e-02, -7.784716419244889e-02, -7.832514069309759e-02, -7.784716419244889e-02, -7.338841012531942e-02, -7.297228850340190e-02, -7.000194523638399e-02, -6.964717493793809e-02, -7.569247173462561e-02, -7.527774663444137e-02, -7.940632019142031e-02, -7.903239613434014e-02, -7.789900266177074e-02, -7.752841407282131e-02, -7.789900266177074e-02, -7.752841407282131e-02, -8.417416175295687e-02, -8.397245626203519e-02, -3.337189765487608e-02, -3.316867446699936e-02, -4.319800383689533e-02, -4.273175908870559e-02, -6.198617411960758e-02, -6.158197882752608e-02, -5.254989154463599e-02, -5.257083868047038e-02, -5.254989154463600e-02, -5.257083868047039e-02, -6.831658231163766e-02, -6.776576364535834e-02, -9.934966877917966e-04, -9.872435502277744e-04, -2.092565187136706e-03, -2.027976256873767e-03, -6.501428337967995e-02, -6.381214338656742e-02, -7.205918931838631e-03, -6.828236286492010e-03, -7.205918931838638e-03, -6.828236286492021e-03, -3.883369154923289e-05, -3.775023557522886e-05, -2.031156284335661e-07, -2.028056033946135e-07, -1.178607027983001e-06, -1.129078632180182e-06, -6.160248081780429e-03, -6.062545925348182e-03, -4.889863367383703e-06, -4.005458310009301e-06, -4.889863367377563e-06, -4.005458310005981e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_spbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.702446086241137e-10, 3.404892172482274e-10, 1.702446086241137e-10, 1.702480033206155e-10, 3.404960066412311e-10, 1.702480033206155e-10, 1.702531335337017e-10, 3.405062670674033e-10, 1.702531335337017e-10, 1.702028432096187e-10, 3.404056864192375e-10, 1.702028432096187e-10, 1.702306066427956e-10, 3.404612132855913e-10, 1.702306066427956e-10, 1.702306066427956e-10, 3.404612132855913e-10, 1.702306066427956e-10, 9.243927858035459e-07, 1.848785571607092e-06, 9.243927858035459e-07, 9.245913534585289e-07, 1.849182706917058e-06, 9.245913534585289e-07, 9.290881331932416e-07, 1.858176266386483e-06, 9.290881331932416e-07, 9.204367803248863e-07, 1.840873560649773e-06, 9.204367803248863e-07, 9.245218401349459e-07, 1.849043680269892e-06, 9.245218401349459e-07, 9.245218401349459e-07, 1.849043680269892e-06, 9.245218401349459e-07, 1.453112092235197e-03, 2.906224184470395e-03, 1.453112092235197e-03, 1.442178633837762e-03, 2.884357267675525e-03, 1.442178633837762e-03, 1.179334921433081e-03, 2.358669842866163e-03, 1.179334921433081e-03, 1.151826904593157e-03, 2.303653809186313e-03, 1.151826904593157e-03, 1.168250180281334e-03, 2.336500360562667e-03, 1.168250180281334e-03, 1.168250180281334e-03, 2.336500360562667e-03, 1.168250180281334e-03, 1.536619080467106e-01, 3.073238160934212e-01, 1.536619080467106e-01, 1.572524726230958e-01, 3.145049452461917e-01, 1.572524726230958e-01, 7.912115487805090e-04, 1.582423097561018e-03, 7.912115487805090e-04, 1.768264845063481e-01, 3.536529690126961e-01, 1.768264845063481e-01, 1.298644688000402e-01, 2.597289376000804e-01, 1.298644688000402e-01, 1.298644688000402e-01, 2.597289376000805e-01, 1.298644688000402e-01, 1.719549814182592e+00, 3.439099628365266e+00, 1.719549814182592e+00, 1.786031894514496e+00, 3.572063789028837e+00, 1.786031894514496e+00, 4.793121219265749e-01, 9.586242438531538e-01, 4.793121219265749e-01, 1.822526611339350e+00, 3.645053222678239e+00, 1.822526611339350e+00, 1.688015579881349e+00, 3.376031159762177e+00, 1.688015579881349e+00, 1.688015579881017e+00, 3.376031159762034e+00, 1.688015579881017e+00, 2.531903143068820e-07, 5.063806286137641e-07, 2.531903143068820e-07, 2.549960088882184e-07, 5.099920177764367e-07, 2.549960088882184e-07, 2.532625314802674e-07, 5.065250629605346e-07, 2.532625314802674e-07, 2.548564073231550e-07, 5.097128146463097e-07, 2.548564073231550e-07, 2.541085683821010e-07, 5.082171367642020e-07, 2.541085683821010e-07, 2.541085683821010e-07, 5.082171367642020e-07, 2.541085683821010e-07, 5.294704592235666e-06, 1.058940918447133e-05, 5.294704592235666e-06, 5.266777437150121e-06, 1.053355487430024e-05, 5.266777437150121e-06, 5.072700109734614e-06, 1.014540021946923e-05, 5.072700109734614e-06, 5.048606364617805e-06, 1.009721272923561e-05, 5.048606364617805e-06, 5.391587880176785e-06, 1.078317576035357e-05, 5.391587880176785e-06, 5.391587880176785e-06, 1.078317576035357e-05, 5.391587880176785e-06, 4.911945313609905e-03, 9.823890627219809e-03, 4.911945313609905e-03, 6.879332249565728e-03, 1.375866449913146e-02, 6.879332249565728e-03, 6.313858531078651e-03, 1.262771706215730e-02, 6.313858531078651e-03, 1.029546447871781e-02, 2.059092895743563e-02, 1.029546447871781e-02, 4.952552031607358e-03, 9.905104063214716e-03, 4.952552031607358e-03, 4.952552031607355e-03, 9.905104063214711e-03, 4.952552031607355e-03, 2.072422131526835e-01, 4.144844263053672e-01, 2.072422131526835e-01, 7.518403348439627e-02, 1.503680669687926e-01, 7.518403348439627e-02, 2.352905254862017e-01, 4.705810509724033e-01, 2.352905254862017e-01, 5.623010277353890e-05, 1.124602055470778e-04, 5.623010277353890e-05, 2.492389142123277e-01, 4.984778284246555e-01, 2.492389142123277e-01, 2.492389142123277e-01, 4.984778284246555e-01, 2.492389142123277e-01, 2.545505313150126e+00, 5.091010626301669e+00, 2.545505313150126e+00, 2.156886998289414e+00, 4.313773996580244e+00, 2.156886998289414e+00, 1.434997823734705e+01, 2.869995647469139e+01, 1.434997823734705e+01, 4.220018628089556e-01, 8.440037256179110e-01, 4.220018628089556e-01, 5.835542125166334e+00, 1.167108425033273e+01, 5.835542125166334e+00, 5.835542125166037e+00, 1.167108425033314e+01, 5.835542125166037e+00, 1.218133308408449e-02, 2.436266616816898e-02, 1.218133308408449e-02, 9.990012457801610e-03, 1.998002491560322e-02, 9.990012457801610e-03, 1.066921412538075e-02, 2.133842825076150e-02, 1.066921412538075e-02, 1.130175392978643e-02, 2.260350785957285e-02, 1.130175392978643e-02, 1.097691384330383e-02, 2.195382768660766e-02, 1.097691384330383e-02, 1.097691384330383e-02, 2.195382768660766e-02, 1.097691384330383e-02, 1.465641031571777e-02, 2.931282063143555e-02, 1.465641031571777e-02, 6.369002899353020e-03, 1.273800579870604e-02, 6.369002899353020e-03, 7.508327997702000e-03, 1.501665599540400e-02, 7.508327997702000e-03, 9.314277557084180e-03, 1.862855511416836e-02, 9.314277557084180e-03, 8.323185928134949e-03, 1.664637185626990e-02, 8.323185928134949e-03, 8.323185928134949e-03, 1.664637185626990e-02, 8.323185928134949e-03, 5.431126851973077e-03, 1.086225370394615e-02, 5.431126851973077e-03, 4.516687894325071e-02, 9.033375788650141e-02, 4.516687894325071e-02, 3.489267264330168e-02, 6.978534528660336e-02, 3.489267264330168e-02, 2.741036978418089e-02, 5.482073956836180e-02, 2.741036978418089e-02, 3.152650642860014e-02, 6.305301285720029e-02, 3.152650642860014e-02, 3.152650642860015e-02, 6.305301285720030e-02, 3.152650642860015e-02, 9.109088578069177e-03, 1.821817715613835e-02, 9.109088578069177e-03, 4.487558239315513e-01, 8.975116478631030e-01, 4.487558239315513e-01, 3.776876446569714e-01, 7.553752893139429e-01, 3.776876446569714e-01, 4.364787406757851e-02, 8.729574813515700e-02, 4.364787406757851e-02, 4.222557590159701e-01, 8.445115180319401e-01, 4.222557590159701e-01, 4.222557590159705e-01, 8.445115180319412e-01, 4.222557590159705e-01, 1.240845746211485e+00, 2.481691492423088e+00, 1.240845746211485e+00, 1.345706281187560e+01, 2.691412562374820e+01, 1.345706281187560e+01, 5.770153458937609e+00, 1.154030691787281e+01, 5.770153458937609e+00, 4.390930607507214e-01, 8.781861215014428e-01, 4.390930607507214e-01, 7.638422120800413e+00, 1.527684424160051e+01, 7.638422120800413e+00, 7.638422120798727e+00, 1.527684424159791e+01, 7.638422120798727e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
