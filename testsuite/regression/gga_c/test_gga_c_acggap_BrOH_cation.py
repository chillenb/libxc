
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_acggap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.684440839388800e-02, -5.684523038420673e-02, -5.684757517601266e-02, -5.683537356024239e-02, -5.684195275993542e-02, -5.684195275993542e-02, -4.483809108158744e-02, -4.484306084167473e-02, -4.495821208474422e-02, -4.475871147097685e-02, -4.484409960639378e-02, -4.484409960639378e-02, -2.955419547174949e-02, -2.932683349729866e-02, -2.384218068662414e-02, -2.409965232382527e-02, -2.412705281931803e-02, -2.412705281931803e-02, -8.268858604760940e-03, -8.906454854914019e-03, -3.208494799422445e-02, -3.152472171685954e-03, -3.230646175350300e-03, -3.230646175350297e-03, -2.631182410665900e-08, -3.475257772181384e-08, -2.638877013763988e-05, -2.037952285659922e-09, -5.122227781251959e-09, -5.122227781251959e-09, -6.191770463994319e-02, -6.211854006822005e-02, -6.192598265957135e-02, -6.210327794369080e-02, -6.201988319644072e-02, -6.201988319644072e-02, -2.375862152381339e-02, -2.423243625155383e-02, -2.270998913581924e-02, -2.311733796589618e-02, -2.454609123104626e-02, -2.454609123104626e-02, -4.035870123823421e-02, -5.649956378567334e-02, -3.776076937060927e-02, -5.198783127132153e-02, -4.206800492778325e-02, -4.206800492778322e-02, -7.907769380924370e-04, -4.570506054039539e-03, -6.373201994041740e-04, -7.280990841406415e-02, -1.838649991006865e-03, -1.838649991006865e-03, -8.093704471825308e-10, -2.149580755148733e-09, -3.647453574416593e-09, -1.988881552815840e-04, -3.633179921844198e-09, -3.633179920109475e-09, -6.064229166713566e-02, -5.552905566847867e-02, -5.722873674922863e-02, -5.871287388304067e-02, -5.796160119170336e-02, -5.796160119170336e-02, -6.171215357960993e-02, -2.915535337529859e-02, -3.626744396339615e-02, -4.493223030471373e-02, -4.038601726401235e-02, -4.038601726401235e-02, -5.645555709411494e-02, -7.462530620281502e-03, -1.205427396821283e-02, -2.552429686053385e-02, -1.807590124836100e-02, -1.807590124836100e-02, -2.843160195310950e-02, -2.040781134503983e-05, -6.877002072528532e-05, -3.023489056560309e-02, -5.660032450048695e-04, -5.660032450048660e-04, -9.801242533205579e-08, -2.145674252423263e-11, -3.436387726023921e-10, -4.485048648216888e-04, -3.263773412339258e-09, -3.263773408002449e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_acggap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.308339781920784e-01, -1.308341334187382e-01, -1.308348494399166e-01, -1.308351111960140e-01, -1.308377736312181e-01, -1.308374842293116e-01, -1.308234456823441e-01, -1.308243637688119e-01, -1.308305353724111e-01, -1.308320716850505e-01, -1.308305353724111e-01, -1.308320716850505e-01, -1.104427285116854e-01, -1.104442336979264e-01, -1.104480685583198e-01, -1.104497874758033e-01, -1.105762276511296e-01, -1.105739516724007e-01, -1.103582370590490e-01, -1.103566910410657e-01, -1.104708610662123e-01, -1.104295872166999e-01, -1.104708610662123e-01, -1.104295872166999e-01, -7.917338619508510e-02, -7.884394608971761e-02, -7.895860244491221e-02, -7.855617644293998e-02, -7.135130178620119e-02, -7.184450197658593e-02, -7.211997900971223e-02, -7.196436305878752e-02, -6.982500512431787e-02, -7.453740339317443e-02, -6.982500512431787e-02, -7.453740339317443e-02, -3.325760096522385e-02, -3.206978309463823e-02, -3.514275315880772e-02, -3.370774586500167e-02, -8.489990449688793e-02, -8.197608392449882e-02, -1.515715081875905e-02, -1.497170729609207e-02, -1.351943257417078e-02, -2.382853941783051e-02, -1.351943257417080e-02, -2.382853941783048e-02, -1.693000343914827e-07, -1.628737308513934e-07, -2.240729132489790e-07, -2.144067076751656e-07, -1.618440074893135e-04, -1.549852735239578e-04, -1.289922385526061e-08, -1.303063200177763e-08, -3.062578082330342e-08, -4.202324571444616e-08, -3.062578082156870e-08, -4.202324571487984e-08, -1.295222160628790e-01, -1.295559923699978e-01, -1.296882698583108e-01, -1.297230290216719e-01, -1.295287922209364e-01, -1.295632008741216e-01, -1.296760464061757e-01, -1.297100166503997e-01, -1.296066988242871e-01, -1.296411405153192e-01, -1.296066988242871e-01, -1.296411405153192e-01, -7.744692873782796e-02, -7.745038675038131e-02, -7.836365918236587e-02, -7.838257587436351e-02, -7.544127849748454e-02, -7.532723545645392e-02, -7.626942702495582e-02, -7.614894797528828e-02, -7.880480188179201e-02, -7.911303750371840e-02, -7.880480188179201e-02, -7.911303750371840e-02, -8.335594900226534e-02, -8.362551380378834e-02, -8.272721529843897e-02, -8.267110870887422e-02, -8.285257754889633e-02, -7.934778404993882e-02, -8.247276251759264e-02, -7.865845255559095e-02, -8.156008454017830e-02, -8.689802405289870e-02, -8.156008454017831e-02, -8.689802405289868e-02, -4.306853971803832e-03, -4.271663616132214e-03, -2.086495324684271e-02, -2.077111013243076e-02, -3.582358213294545e-03, -3.424709726122797e-03, -1.167931786104392e-01, -1.168642726157544e-01, -9.593794520387566e-03, -9.118150443425208e-03, -9.593794520387566e-03, -9.118150443425208e-03, -5.225793143155172e-09, -5.108507017465192e-09, -1.373413154977945e-08, -1.361049486945869e-08, -2.358729068518309e-08, -2.280491030551657e-08, -1.146724253473397e-03, -1.140864707607478e-03, -2.623918901400275e-08, -2.182227816694858e-08, -2.623918900817516e-08, -2.182227816675884e-08, -7.592675312402380e-02, -7.544082646654657e-02, -8.011924614115488e-02, -7.964725057158270e-02, -7.891954761744439e-02, -7.844103806517132e-02, -7.771454879242866e-02, -7.723496703029625e-02, -7.834281665313673e-02, -7.786380032429674e-02, -7.834281665313673e-02, -7.786380032429674e-02, -7.329431766720607e-02, -7.287804231958751e-02, -7.471111072247066e-02, -7.435774648834077e-02, -7.969463792459160e-02, -7.927695075568604e-02, -8.159510350090095e-02, -8.121800984433609e-02, -8.110411901237510e-02, -8.073022496807987e-02, -8.110411901237510e-02, -8.073022496807987e-02, -8.473010108290206e-02, -8.452760021944271e-02, -3.108206295634437e-02, -3.091629184744351e-02, -4.410083768253634e-02, -4.367791246772611e-02, -6.655376692665375e-02, -6.614872834829316e-02, -5.615505913001528e-02, -5.617537899101738e-02, -5.615505913001529e-02, -5.617537899101738e-02, -7.298887007970069e-02, -7.243936456985117e-02, -1.230189136434610e-04, -1.223573709561711e-04, -4.112515061146558e-04, -4.003309142800526e-04, -6.901353661803487e-02, -6.779491596658911e-02, -3.202151883742272e-03, -3.056668930468640e-03, -3.202151883742283e-03, -3.056668930468643e-03, -6.215968025005822e-07, -6.070800278336830e-07, -1.382287532416574e-10, -1.380553378146738e-10, -2.240000796928830e-09, -2.162088384946687e-09, -2.520827498858478e-03, -2.486288570775641e-03, -2.319456844442785e-08, -1.966507964966586e-08, -2.319456844196129e-08, -1.966507964980138e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_acggap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.859068130258572e-10, 3.718136260517143e-10, 1.859068130258572e-10, 1.859099758788055e-10, 3.718199517576109e-10, 1.859099758788055e-10, 1.859140384373097e-10, 3.718280768746194e-10, 1.859140384373097e-10, 1.858671974398577e-10, 3.717343948797153e-10, 1.858671974398577e-10, 1.858931590721593e-10, 3.717863181443187e-10, 1.858931590721593e-10, 1.858931590721593e-10, 3.717863181443187e-10, 1.858931590721593e-10, 1.037633543490644e-06, 2.075267086981288e-06, 1.037633543490644e-06, 1.037839084050170e-06, 2.075678168100340e-06, 1.037839084050170e-06, 1.042482466661958e-06, 2.084964933323916e-06, 1.042482466661958e-06, 1.033468983620271e-06, 2.066937967240541e-06, 1.033468983620271e-06, 1.037757449618455e-06, 2.075514899236909e-06, 1.037757449618455e-06, 1.037757449618455e-06, 2.075514899236909e-06, 1.037757449618455e-06, 1.732446396512745e-03, 3.464892793025491e-03, 1.732446396512745e-03, 1.720507774579170e-03, 3.441015549158339e-03, 1.720507774579170e-03, 1.418378914517867e-03, 2.836757829035734e-03, 1.418378914517867e-03, 1.384938218943310e-03, 2.769876437886620e-03, 1.384938218943310e-03, 1.404782287786777e-03, 2.809564575573553e-03, 1.404782287786777e-03, 1.404782287786777e-03, 2.809564575573553e-03, 1.404782287786777e-03, 1.812690351611517e-01, 3.625380703223033e-01, 1.812690351611517e-01, 1.881359295996890e-01, 3.762718591993780e-01, 1.881359295996890e-01, 9.339692868709253e-04, 1.867938573741851e-03, 9.339692868709253e-04, 1.632804615525220e-01, 3.265609231050440e-01, 1.632804615525220e-01, 1.279472736614799e-01, 2.558945473229599e-01, 1.279472736614799e-01, 1.279472736614801e-01, 2.558945473229602e-01, 1.279472736614801e-01, 1.981090245433852e-02, 3.962180490867704e-02, 1.981090245433852e-02, 2.305308652626841e-02, 4.610617305253682e-02, 2.305308652626841e-02, 7.837034911595021e-02, 1.567406982319004e-01, 7.837034911595021e-02, 7.628985190093821e-03, 1.525797038018764e-02, 7.628985190093821e-03, 1.087332422772396e-02, 2.174664845544792e-02, 1.087332422772396e-02, 1.087332422745096e-02, 2.174664845490193e-02, 1.087332422745096e-02, 2.687036006784301e-07, 5.374072013568602e-07, 2.687036006784301e-07, 2.704493084700749e-07, 5.408986169401498e-07, 2.704493084700749e-07, 2.687732488882319e-07, 5.375464977764637e-07, 2.687732488882319e-07, 2.703141886590743e-07, 5.406283773181485e-07, 2.703141886590743e-07, 2.695915414690991e-07, 5.391830829381981e-07, 2.695915414690991e-07, 2.695915414690991e-07, 5.391830829381981e-07, 2.695915414690991e-07, 6.191402180510550e-06, 1.238280436102110e-05, 6.191402180510550e-06, 6.162451432804607e-06, 1.232490286560921e-05, 6.162451432804607e-06, 5.920279075254500e-06, 1.184055815050900e-05, 5.920279075254500e-06, 5.896849273130723e-06, 1.179369854626145e-05, 5.896849273130723e-06, 6.310896890477608e-06, 1.262179378095522e-05, 6.310896890477608e-06, 6.310896890477608e-06, 1.262179378095522e-05, 6.310896890477608e-06, 5.551694486148767e-03, 1.110338897229753e-02, 5.551694486148767e-03, 6.981143027991820e-03, 1.396228605598364e-02, 6.981143027991820e-03, 7.230233577552816e-03, 1.446046715510563e-02, 7.230233577552816e-03, 1.062811016509009e-02, 2.125622033018019e-02, 1.062811016509009e-02, 5.536375573127384e-03, 1.107275114625477e-02, 5.536375573127384e-03, 5.536375573127383e-03, 1.107275114625477e-02, 5.536375573127383e-03, 1.190733538630545e-01, 2.381467077261090e-01, 1.190733538630545e-01, 7.452593363623462e-02, 1.490518672724692e-01, 7.452593363623462e-02, 1.258734282660904e-01, 2.517468565321808e-01, 1.258734282660904e-01, 5.703147077558641e-05, 1.140629415511728e-04, 5.703147077558641e-05, 1.966105157450575e-01, 3.932210314901149e-01, 1.966105157450575e-01, 1.966105157450575e-01, 3.932210314901149e-01, 1.966105157450575e-01, 7.579964515122047e-03, 1.515992903024409e-02, 7.579964515122047e-03, 9.339215034407383e-03, 1.867843006881477e-02, 9.339215034407383e-03, 8.838775926505045e-02, 1.767755185301009e-01, 8.838775926505045e-02, 1.506370903025258e-01, 3.012741806050517e-01, 1.506370903025258e-01, 3.441071770399064e-02, 6.882143540798127e-02, 3.441071770399064e-02, 3.441071770422630e-02, 6.882143540845259e-02, 3.441071770422630e-02, 1.185893901332400e-02, 2.371787802664800e-02, 1.185893901332400e-02, 1.008645760596321e-02, 2.017291521192642e-02, 1.008645760596321e-02, 1.063559119432064e-02, 2.127118238864128e-02, 1.063559119432064e-02, 1.114552388520905e-02, 2.229104777041810e-02, 1.114552388520905e-02, 1.088365548604612e-02, 2.176731097209224e-02, 1.088365548604612e-02, 1.088365548604612e-02, 2.176731097209224e-02, 1.088365548604612e-02, 1.412281078290245e-02, 2.824562156580490e-02, 1.412281078290245e-02, 7.631295035356347e-03, 1.526259007071269e-02, 7.631295035356347e-03, 8.664923163391890e-03, 1.732984632678378e-02, 8.664923163391890e-03, 1.012410564308110e-02, 2.024821128616220e-02, 1.012410564308110e-02, 9.347798512575726e-03, 1.869559702515145e-02, 9.347798512575726e-03, 9.347798512575726e-03, 1.869559702515145e-02, 9.347798512575726e-03, 5.547654673248581e-03, 1.109530934649716e-02, 5.547654673248581e-03, 4.997752199379838e-02, 9.995504398759676e-02, 4.997752199379838e-02, 4.196067017407030e-02, 8.392134034814060e-02, 4.196067017407030e-02, 3.337176186170737e-02, 6.674352372341474e-02, 3.337176186170737e-02, 3.908248356656178e-02, 7.816496713312356e-02, 3.908248356656178e-02, 3.908248356656178e-02, 7.816496713312356e-02, 3.908248356656178e-02, 1.094975301902081e-02, 2.189950603804161e-02, 1.094975301902081e-02, 6.591425420954405e-02, 1.318285084190881e-01, 6.591425420954405e-02, 8.840085068425516e-02, 1.768017013685103e-01, 8.840085068425516e-02, 5.147102603636430e-02, 1.029420520727286e-01, 5.147102603636430e-02, 2.250372603689299e-01, 4.500745207378598e-01, 2.250372603689299e-01, 2.250372603689340e-01, 4.500745207378679e-01, 2.250372603689340e-01, 2.353425374449530e-02, 4.706850748899061e-02, 2.353425374449530e-02, 1.086403060561756e-02, 2.172806121123512e-02, 1.086403060561756e-02, 1.304264849406852e-02, 2.608529698813703e-02, 1.304264849406852e-02, 2.147548612989151e-01, 4.295097225978301e-01, 2.147548612989151e-01, 4.383533539847851e-02, 8.767067079695702e-02, 4.383533539847851e-02, 4.383533539421520e-02, 8.767067078843040e-02, 4.383533539421520e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
