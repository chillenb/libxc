
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86_ft_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.176769765818589e-01, -1.176762702625868e-01, -1.176745877262297e-01, -1.176850662439416e-01, -1.176793684418054e-01, -1.176793684418054e-01, -5.098106579617048e-02, -5.098401448230320e-02, -5.105288866732297e-02, -5.093645912821396e-02, -5.098495826999341e-02, -5.098495826999341e-02, -2.997950735577276e-02, -2.972532217565535e-02, -2.344415586681280e-02, -2.373618138796587e-02, -2.376437807969908e-02, -2.376437807969908e-02, -6.109414381025635e-03, -7.126044026004502e-03, -3.259430292118466e-02, 2.806799708599034e-03, 2.727541586306868e-03, 2.727541586306857e-03, -3.749669562822223e-03, -3.911427604078084e-03, -9.117707909803111e-03, -2.339648865822698e-03, -2.431126422496053e-03, -2.431126422496053e-03, -6.693423490827970e-02, -6.708208075851524e-02, -6.694032615907003e-02, -6.707082918486044e-02, -6.700933616344051e-02, -6.700933616344051e-02, -3.112301006852554e-02, -3.143275122386216e-02, -3.069106402070410e-02, -3.094527948669843e-02, -3.153273424622237e-02, -3.153273424622237e-02, -4.166407526043574e-02, -5.694140430317578e-02, -3.910385416387809e-02, -5.268188520186770e-02, -4.334199766794471e-02, -4.334199766794469e-02, 5.384158192878998e-03, 1.369476127316167e-03, 4.674087349247898e-03, -7.435735840959758e-02, 4.484177704728763e-03, 4.484177704728763e-03, -1.857383880196108e-03, -2.293453816852122e-03, -1.800052664787197e-03, -1.129340704153765e-03, -2.009043937304567e-03, -2.009043937304566e-03, -6.049736888872916e-02, -5.593062600027822e-02, -5.744954618166651e-02, -5.877264143286921e-02, -5.810296653017966e-02, -5.810296653017966e-02, -6.143044357128438e-02, -3.021490057664544e-02, -3.765024571810018e-02, -4.613759202685189e-02, -4.175823023426290e-02, -4.175823023426290e-02, -5.698627578860018e-02, -3.410298753528456e-03, -1.043086537084512e-02, -2.688812912319687e-02, -1.836213331051236e-02, -1.836213331051238e-02, -2.961143635489523e-02, -9.737817398572334e-03, -6.148314710281308e-03, -3.192116499454976e-02, 3.031108710994823e-03, 3.031108710994819e-03, -5.000954544428632e-03, -6.893540379811745e-04, -1.363612372367615e-03, 2.231060133753229e-03, -1.895983780863904e-03, -1.895983780863902e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86_ft_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.925334166673803e-02, -5.925376693906713e-02, -5.925378107522034e-02, -5.925449819286392e-02, -5.925626996727139e-02, -5.925547714560672e-02, -5.924593097348371e-02, -5.924844670769963e-02, -5.924975575407753e-02, -5.925396498637023e-02, -5.924975575407753e-02, -5.925396498637023e-02, -9.411566580906627e-02, -9.411799719476556e-02, -9.412759643436289e-02, -9.413025870989418e-02, -9.440959029623160e-02, -9.440607006476512e-02, -9.391850273287866e-02, -9.391610567826605e-02, -9.416258783665392e-02, -9.409866279302674e-02, -9.416258783665392e-02, -9.409866279302674e-02, -8.526022709924612e-02, -8.486872393147377e-02, -8.512692440719305e-02, -8.464822704659927e-02, -7.898451553677832e-02, -7.958987409756374e-02, -7.973814245518591e-02, -7.954727817997156e-02, -7.688677283928803e-02, -8.270858930902507e-02, -7.688677283928803e-02, -8.270858930902507e-02, -4.763022998221767e-02, -4.621066656694395e-02, -4.914205760619789e-02, -4.744124870937996e-02, -9.061010068839627e-02, -8.709283793011217e-02, -2.578938044145247e-02, -2.554337321047970e-02, -2.418137928223526e-02, -5.069611172898333e-02, -2.418137928223526e-02, -5.069611172898327e-02, -5.006745770792981e-03, -4.585243639027259e-03, -5.239517643178022e-03, -4.738455086217328e-03, 5.513781744277199e-03, 6.754992788724616e-03, -2.992158136250200e-03, -3.060943461152190e-03, -2.705648947292246e-03, -5.329490126133500e-03, -2.705648947292246e-03, -5.329490126133500e-03, -1.191295370774898e-01, -1.191793242422740e-01, -1.195135269986426e-01, -1.195646893865301e-01, -1.191449414293645e-01, -1.191956576904475e-01, -1.194849265027058e-01, -1.195349331216825e-01, -1.193251299657849e-01, -1.193758607385958e-01, -1.193251299657849e-01, -1.193758607385958e-01, -5.592856598010629e-02, -5.593481506604601e-02, -5.726657244473805e-02, -5.730041831873615e-02, -5.248561364917589e-02, -5.227336965139936e-02, -5.368916024147865e-02, -5.346702437966138e-02, -5.813461833182694e-02, -5.868107913997998e-02, -5.813461833182694e-02, -5.868107913997998e-02, -8.452573322842492e-02, -8.483343462978638e-02, -8.107606528731567e-02, -8.101116988522206e-02, -8.473813499737200e-02, -8.074364001364857e-02, -8.115540011251050e-02, -7.678035129079756e-02, -8.184993385805960e-02, -8.795464547418085e-02, -8.184993385805957e-02, -8.795464547418082e-02, 4.953961758338480e-03, 5.034800719423117e-03, -3.449657394805922e-02, -3.437420216044568e-02, 8.006701736589482e-03, 8.476953012827013e-03, -1.171402183704322e-01, -1.172279641731272e-01, -1.402693471782941e-02, -1.330154777230689e-02, -1.402693471782941e-02, -1.330154777230689e-02, -2.474942338315991e-03, -2.352930186170863e-03, -2.997285787271931e-03, -2.937143503673032e-03, -2.390865649953873e-03, -2.215092660219805e-03, 1.706475627433425e-02, 1.714909331341293e-02, -3.401549332048450e-03, -2.267353559927917e-03, -3.401549332048450e-03, -2.267353559927916e-03, -7.477664224450073e-02, -7.420739473574932e-02, -7.850383464809110e-02, -7.795890749538434e-02, -7.738173033863878e-02, -7.682699741282281e-02, -7.630975883236617e-02, -7.575146720439387e-02, -7.686328336821785e-02, -7.630685991576286e-02, -7.686328336821785e-02, -7.630685991576286e-02, -7.242117818248742e-02, -7.193067346986483e-02, -7.979582074181037e-02, -7.938855240241217e-02, -8.164240962502801e-02, -8.116757560424022e-02, -8.092997614724198e-02, -8.050143406208086e-02, -8.162297400946607e-02, -8.119870014027945e-02, -8.162297400946607e-02, -8.119870014027945e-02, -8.312516676489622e-02, -8.289086174425829e-02, -4.673553547983026e-02, -4.652587154598193e-02, -5.822014278539525e-02, -5.771081491812403e-02, -7.186649798610049e-02, -7.140854253315124e-02, -6.607837432529781e-02, -6.610184980976115e-02, -6.607837432529781e-02, -6.610184980976114e-02, -7.813561503570811e-02, -7.750495055948751e-02, 3.751845020802342e-03, 3.911409782444072e-03, 1.533523157598506e-02, 1.599489489833131e-02, -7.134447448693253e-02, -6.998465034443498e-02, 6.977190470868054e-03, 7.510316339466097e-03, 6.977190470868025e-03, 7.510316339466068e-03, -6.427186244127015e-03, -6.086162756625354e-03, -9.055896720180217e-04, -9.031503648485480e-04, -1.852363767720171e-03, -1.713361659127783e-03, 1.019746852423553e-02, 1.036195807686616e-02, -3.101232612421024e-03, -2.153819540269316e-03, -3.101232612421022e-03, -2.153819540269314e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86_ft_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.992559865666052e-10, -3.985119731332104e-10, -1.992559865666052e-10, -1.992553885006274e-10, -3.985107770012549e-10, -1.992553885006274e-10, -1.992491082548122e-10, -3.984982165096244e-10, -1.992491082548122e-10, -1.992580659842169e-10, -3.985161319684338e-10, -1.992580659842169e-10, -1.992538936637105e-10, -3.985077873274210e-10, -1.992538936637105e-10, -1.992538936637105e-10, -3.985077873274210e-10, -1.992538936637105e-10, 6.093419261982052e-07, 1.218683852396410e-06, 6.093419261982052e-07, 6.096272839078996e-07, 1.219254567815799e-06, 6.096272839078996e-07, 6.161513193930438e-07, 1.232302638786088e-06, 6.161513193930438e-07, 6.041040570127902e-07, 1.208208114025580e-06, 6.041040570127902e-07, 6.095903985312599e-07, 1.219180797062520e-06, 6.095903985312599e-07, 6.095903985312599e-07, 1.219180797062520e-06, 6.095903985312599e-07, 1.948235346452359e-03, 3.896470692904718e-03, 1.948235346452359e-03, 1.938479564747985e-03, 3.876959129495969e-03, 1.938479564747985e-03, 1.671987809381437e-03, 3.343975618762873e-03, 1.671987809381437e-03, 1.627801955329906e-03, 3.255603910659812e-03, 1.627801955329906e-03, 1.651172732820662e-03, 3.302345465641324e-03, 1.651172732820662e-03, 1.651172732820662e-03, 3.302345465641324e-03, 1.651172732820662e-03, 3.166269565962380e-01, 6.332539131924759e-01, 3.166269565962380e-01, 3.160671691520016e-01, 6.321343383040031e-01, 3.160671691520016e-01, 1.029184762348002e-03, 2.058369524696005e-03, 1.029184762348002e-03, 4.298840754260977e-01, 8.597681508521955e-01, 4.298840754260977e-01, 3.641037752748000e-01, 7.282075505496001e-01, 3.641037752748000e-01, 3.641037752747999e-01, 7.282075505495997e-01, 3.641037752747999e-01, -5.417664413057920e+00, -1.083532882611584e+01, -5.417664413057920e+00, -7.241058925525201e+00, -1.448211785105040e+01, -7.241058925525201e+00, -1.023099030572662e+01, -2.046198061145324e+01, -1.023099030572662e+01, -5.159367879972369e-01, -1.031873575994474e+00, -5.159367879972369e-01, -2.928690477591739e+00, -5.857380955183477e+00, -2.928690477591739e+00, -2.928690477591763e+00, -5.857380955183526e+00, -2.928690477591763e+00, 1.948682254071781e-07, 3.897364508143563e-07, 1.948682254071781e-07, 1.973664668917316e-07, 3.947329337834632e-07, 1.973664668917316e-07, 1.949691597001042e-07, 3.899383194002084e-07, 1.949691597001042e-07, 1.971744127849838e-07, 3.943488255699676e-07, 1.971744127849838e-07, 1.961388299761448e-07, 3.922776599522895e-07, 1.961388299761448e-07, 1.961388299761448e-07, 3.922776599522895e-07, 1.961388299761448e-07, 2.073263081542962e-06, 4.146526163085924e-06, 2.073263081542962e-06, 2.181372799552629e-06, 4.362745599105259e-06, 2.181372799552629e-06, 1.618842316061060e-06, 3.237684632122120e-06, 1.618842316061060e-06, 1.718998981857835e-06, 3.437997963715670e-06, 1.718998981857835e-06, 2.359305516851009e-06, 4.718611033702019e-06, 2.359305516851009e-06, 2.359305516851009e-06, 4.718611033702019e-06, 2.359305516851009e-06, 5.563783869208439e-03, 1.112756773841688e-02, 5.563783869208439e-03, 6.264406321421247e-03, 1.252881264284249e-02, 6.264406321421247e-03, 7.337245931335352e-03, 1.467449186267070e-02, 7.337245931335352e-03, 9.617512812036575e-03, 1.923502562407315e-02, 9.617512812036575e-03, 5.468229934181004e-03, 1.093645986836201e-02, 5.468229934181004e-03, 5.468229934181004e-03, 1.093645986836201e-02, 5.468229934181004e-03, 1.306612280274762e-01, 2.613224560549524e-01, 1.306612280274762e-01, 1.739747462232992e-01, 3.479494924465983e-01, 1.739747462232992e-01, -6.541789376316127e-03, -1.308357875263225e-02, -6.541789376316127e-03, 5.469862945220109e-05, 1.093972589044022e-04, 5.469862945220109e-05, 5.655147443716222e-01, 1.131029488743244e+00, 5.655147443716222e-01, 5.655147443716222e-01, 1.131029488743244e+00, 5.655147443716222e-01, -4.678403383565772e-01, -9.356806767131545e-01, -4.678403383565772e-01, -9.166630085919013e-01, -1.833326017183803e+00, -9.166630085919013e-01, -2.310028445348909e+02, -4.620056890697817e+02, -2.310028445348909e+02, -2.580570704719396e+00, -5.161141409438791e+00, -2.580570704719396e+00, -3.250072444891580e+01, -6.500144889783159e+01, -3.250072444891580e+01, -3.250072444891564e+01, -6.500144889783128e+01, -3.250072444891564e+01, 1.062962631177543e-02, 2.125925262355086e-02, 1.062962631177543e-02, 9.015895331740882e-03, 1.803179066348176e-02, 9.015895331740882e-03, 9.465922662828929e-03, 1.893184532565786e-02, 9.465922662828929e-03, 9.916377427239824e-03, 1.983275485447965e-02, 9.916377427239824e-03, 9.680365890490735e-03, 1.936073178098147e-02, 9.680365890490735e-03, 9.680365890490735e-03, 1.936073178098147e-02, 9.680365890490735e-03, 1.295555477482196e-02, 2.591110954964393e-02, 1.295555477482196e-02, 8.445457751850547e-03, 1.689091550370109e-02, 8.445457751850547e-03, 8.862521907510187e-03, 1.772504381502037e-02, 8.862521907510187e-03, 9.582642225497722e-03, 1.916528445099544e-02, 9.582642225497722e-03, 9.192804085131425e-03, 1.838560817026285e-02, 9.192804085131425e-03, 9.192804085131425e-03, 1.838560817026285e-02, 9.192804085131425e-03, 5.006149039530372e-03, 1.001229807906074e-02, 5.006149039530372e-03, 9.514233652231975e-02, 1.902846730446395e-01, 9.514233652231975e-02, 6.426922138249061e-02, 1.285384427649812e-01, 6.426922138249061e-02, 3.699625936343521e-02, 7.399251872687042e-02, 3.699625936343521e-02, 4.987422257369025e-02, 9.974844514738050e-02, 4.987422257369025e-02, 4.987422257369026e-02, 9.974844514738053e-02, 4.987422257369026e-02, 1.210530480645792e-02, 2.421060961291583e-02, 1.210530480645792e-02, -1.017209574250972e+01, -2.034419148501944e+01, -1.017209574250972e+01, -5.774384870748170e+00, -1.154876974149634e+01, -5.774384870748170e+00, 5.238959485518025e-02, 1.047791897103605e-01, 5.238959485518025e-02, -6.149133688685916e-02, -1.229826737737183e-01, -6.149133688685916e-02, -6.149133688686054e-02, -1.229826737737211e-01, -6.149133688686054e-02, -6.737486049411415e+00, -1.347497209882283e+01, -6.737486049411415e+00, -1.029276177196339e+00, -2.058552354392678e+00, -1.029276177196339e+00, -2.376200818916625e+00, -4.752401637833250e+00, -2.376200818916625e+00, -4.955282258243384e-01, -9.910564516486767e-01, -4.955282258243384e-01, -5.654634140218943e+01, -1.130926828043789e+02, -5.654634140218943e+01, -5.654634140218963e+01, -1.130926828043793e+02, -5.654634140218963e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
