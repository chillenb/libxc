
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.335120118816628e-01, -6.335005158495763e-01, -6.334686026942997e-01, -6.336564729331319e-01, -6.335057873197305e-01, -6.335057873197305e-01, -2.000739641987470e-01, -2.000563537924989e-01, -1.995784990887158e-01, -2.004310546259385e-01, -2.000654767178722e-01, -2.000654767178722e-01, -9.532280126761714e-02, -9.558412082467585e-02, -1.044376703914952e-01, -1.042933749501007e-01, -9.541621658306945e-02, -9.541621658306945e-02, -5.942562298654878e-02, -5.882706341403305e-02, -9.598924249446365e-02, -7.157360215584840e-02, -5.922365034120071e-02, -5.922365034120071e-02, -5.185832098979579e-01, -4.935113008427163e-01, -1.745208814435552e-01, -1.301928120179613e+00, -4.890350509519964e-01, -4.890350509519964e-01, -1.874863089766486e-01, -1.868690473972199e-01, -1.874246268779123e-01, -1.869446270247934e-01, -1.871673318927234e-01, -1.871673318927234e-01, -2.287514982435761e-01, -2.264960803571755e-01, -2.332736127401775e-01, -2.314519728528052e-01, -2.215343873845864e-01, -2.215343873845864e-01, -7.989015507866663e-02, -8.150215987901696e-02, -7.869146282110075e-02, -7.879613366007078e-02, -8.041004956987864e-02, -8.041004956987864e-02, -9.627488321716297e-02, -7.671028879859090e-02, -9.038121273094611e-02, -1.087069885913452e-01, -7.752694637737029e-02, -7.752694637737029e-02, -1.310227825655819e+00, -1.144978036810596e+00, -9.001082252900615e-01, -1.204407849786498e-01, -1.032911558169663e+00, -1.032911558169663e+00, -8.195633647191744e-02, -8.040265920666931e-02, -8.085509607893643e-02, -8.127767944592913e-02, -8.105759341439230e-02, -8.105759341439230e-02, -8.153872666962417e-02, -7.949437399057570e-02, -7.760657731545835e-02, -7.737368328241336e-02, -7.727176123298583e-02, -7.727176123298583e-02, -8.246101789900780e-02, -7.541038360597035e-02, -7.198956557034365e-02, -6.933210983105050e-02, -6.970124000592594e-02, -6.970124000592594e-02, -7.669984805148367e-02, -2.094251126856188e-01, -1.486596539928108e-01, -6.595216349637317e-02, -9.047402014853860e-02, -9.047402014853853e-02, -5.109103075092513e-01, -3.187591631083904e+00, -1.809081574138447e+00, -8.487047631262037e-02, -1.004982762621877e+00, -1.004982762621880e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.100589305044219e-01, 5.100447217995546e-01, 5.100049491082049e-01, 5.102371571239820e-01, 5.100512399083414e-01, 5.100512399083414e-01, 4.555312823758906e-02, 4.552347749076296e-02, 4.471540079822015e-02, 4.614157414855103e-02, 4.553854802592187e-02, 4.553854802592187e-02, -4.096091569111962e-02, -4.017740607776266e-02, -1.616903866618973e-02, -1.713502132040296e-02, -4.067970095727651e-02, -4.067970095727651e-02, -2.535596419931358e-02, -2.842898005349740e-02, -5.579099762823692e-02, 3.036307714244155e-02, -2.633903178411994e-02, -2.633903178411994e-02, 7.371805737948572e-01, 7.055435489066684e-01, 2.606863885929907e-01, 1.741717733000786e+00, 7.002679446516159e-01, 7.002679446516159e-01, -4.323529042917090e-03, -5.474070630728177e-03, -4.438413455710480e-03, -5.333073826025034e-03, -4.917536389889838e-03, -4.917536389889838e-03, 1.277210208424315e-01, 1.239144684121443e-01, 1.346046821484094e-01, 1.315703478517520e-01, 1.163525774780882e-01, 1.163525774780882e-01, -7.755330511371449e-02, -9.296336325280745e-02, -7.590477043335904e-02, -8.934965090234227e-02, -8.074576686024502e-02, -8.074576686024502e-02, 9.878047101415058e-02, 1.830902711969131e-02, 8.873117782848935e-02, -1.106815751113032e-01, 5.395061300210219e-02, 5.395061300210219e-02, 1.752938598604296e+00, 1.536963914716721e+00, 1.226364931561079e+00, 1.650469596112926e-01, 1.393808703194172e+00, 1.393808703194172e+00, -9.229396915567539e-02, -9.195032128864532e-02, -9.228531311962664e-02, -9.239941346924907e-02, -9.236019768487908e-02, -9.236019768487908e-02, -9.127780251069403e-02, -6.115872662166674e-02, -7.445029692073660e-02, -8.433017978829530e-02, -7.976794260549779e-02, -7.976794260549779e-02, -9.372118684461921e-02, -2.221405770543899e-03, -2.541647197067548e-02, -5.849403421037333e-02, -4.377303189257222e-02, -4.377303189257221e-02, -5.980717528728538e-02, 3.117344901314278e-01, 2.134928394311308e-01, -6.738427386171467e-02, 1.001879214036951e-01, 1.001879214036950e-01, 7.245539338793774e-01, 4.246948997607189e+00, 2.412563537190479e+00, 9.250631201484556e-02, 1.359788655583668e+00, 1.359788655583671e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.333468932685700e-09, -3.333440218877579e-09, -3.333282183368222e-09, -3.333752998532683e-09, -3.333454040240584e-09, -3.333454040240584e-09, -4.645350953949971e-06, -4.645201333147690e-06, -4.640338140555139e-06, -4.644904618118879e-06, -4.645197755975816e-06, -4.645197755975816e-06, -2.428083430433200e-03, -2.452697852284890e-03, -3.131317319239134e-03, -3.024280887936535e-03, -2.436980759415736e-03, -2.436980759415736e-03, -3.691521831085965e-01, -3.364751886329949e-01, -1.067334450343579e-03, -1.873712471767322e+00, -3.588696697761778e-01, -3.588696697761778e-01, -6.421034134718628e+04, -5.346052925696128e+04, -2.006811183032518e+02, -1.179023115023770e+06, -5.577046046698754e+04, -5.577046046698754e+04, -8.866797947013420e-07, -8.845766255969549e-07, -8.864671692700702e-07, -8.848319942042057e-07, -8.856015152309959e-07, -8.856015152309959e-07, -4.814288060999314e-05, -4.675907462362726e-05, -4.878587637374988e-05, -4.768793841242557e-05, -4.638389032467961e-05, -4.638389032467961e-05, -1.731878135501456e-03, 1.456706421274932e-03, -2.191828701138393e-03, 1.102923114643047e-03, -1.226611111908821e-03, -1.226611111908821e-03, -7.374353996593431e+00, -4.943972626324726e-01, -7.652710301153257e+00, -1.039861123525500e-05, -3.821683313420636e+00, -3.821683313420636e+00, -1.361253529552952e+06, -7.996680988552691e+05, -2.547510144747457e+06, -5.170325237075730e+01, -1.162553633843432e+06, -1.162553633843432e+06, 4.387262363152067e-03, 2.269494055679195e-03, 2.865153622989788e-03, 3.423997413493246e-03, 3.131209574510440e-03, 3.131209574510440e-03, 5.755593395122381e-03, -5.187361240383614e-03, -2.702659154361126e-03, -3.712898664651734e-04, -1.555679539979827e-03, -1.555679539979824e-03, 9.850726466807715e-04, -1.838393720476267e-01, -8.031062363837210e-02, -1.834033839230178e-02, -4.023933894415203e-02, -4.023933894415208e-02, -7.616444055619458e-03, -2.735792569395247e+02, -8.052730850654788e+01, -1.175294215846372e-02, -1.692327496153203e+01, -1.692327496153203e+01, -3.405973877026798e+04, -1.414136065031824e+08, -1.087478033616203e+07, -2.017338245665139e+01, -2.229784725520768e+06, -2.229784725520781e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
