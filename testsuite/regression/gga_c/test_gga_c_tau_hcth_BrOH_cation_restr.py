
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tau_hcth_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.324165576690798e-01, -1.324149592746063e-01, -1.324105470607937e-01, -1.324342708975617e-01, -1.324214576858903e-01, -1.324214576858903e-01, -1.015799379826159e-01, -1.015724551905928e-01, -1.013996779621203e-01, -1.017044648124185e-01, -1.015715929483680e-01, -1.015715929483680e-01, -7.143289547849196e-02, -7.156861856611049e-02, -7.320364978353645e-02, -7.339679682305977e-02, -7.333088609636416e-02, -7.333088609636416e-02, -1.825200668811293e-02, -2.157251177452598e-02, -7.358334512353619e-02, 2.646562502559265e-02, 5.035222211504416e-03, 5.035222211504403e-03, 1.590867736273450e-02, 1.665535918668272e-02, 6.265155495139572e-02, 9.611150109278668e-03, 1.187716577808976e-02, 1.187716577808977e-02, -8.586196261310666e-02, -8.556086330727075e-02, -8.584957411536126e-02, -8.558375280914206e-02, -8.570863892993090e-02, -8.570863892993090e-02, -1.043963559768251e-01, -1.046401971469465e-01, -1.040303301491580e-01, -1.043278294641635e-01, -1.046162517478646e-01, -1.046162517478646e-01, -5.544936725443971e-02, -3.393993229593871e-02, -5.665058853056194e-02, -3.597408393597607e-02, -5.330169828634309e-02, -5.330169828634309e-02, 6.806147189890173e-02, 9.909061276100797e-03, 7.046777220457209e-02, -4.765069587241832e-02, 4.540140193446889e-02, 4.540140193446889e-02, 7.531442792912787e-03, 9.408841816668654e-03, 7.301686738740406e-03, 7.278779786588187e-02, 8.705912779530357e-03, 8.705912779530355e-03, -2.991801996143574e-02, -3.249464766280333e-02, -3.083871266254104e-02, -2.994497133381727e-02, -3.032001819214752e-02, -3.032001819214752e-02, -3.104610771177027e-02, -6.330634288848527e-02, -5.714949580277372e-02, -4.575685219340812e-02, -5.210259083843314e-02, -5.210259083843314e-02, -3.546771824031868e-02, -1.594474712581214e-02, -3.922856566054079e-02, -5.654049044313932e-02, -5.258015045884937e-02, -5.258015045884940e-02, -6.163425629445289e-02, 6.141085180311354e-02, 7.116618347623045e-02, -5.194075416702409e-02, 6.694968340015026e-02, 6.694968340015027e-02, 2.159810586067676e-02, 2.656077029989915e-03, 5.442125424918664e-03, 6.897856178018111e-02, 8.092378790273826e-03, 8.092378790273835e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tau_hcth_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [9.174028292106132e-03, 9.175244535893653e-03, 9.178717045947232e-03, 9.160653958091942e-03, 9.170397269408034e-03, 9.170397269408034e-03, -1.179799238483428e-02, -1.178394328783425e-02, -1.146021556511880e-02, -1.202450261813114e-02, -1.178117583760568e-02, -1.178117583760568e-02, -4.396142018231598e-02, -4.509598456619940e-02, -7.789082821516341e-02, -7.635664775650511e-02, -7.528766494886734e-02, -7.528766494886734e-02, -1.481275521718878e-01, -1.437448942810242e-01, -3.558048812110334e-02, -1.394171371959815e-01, -1.547074276497013e-01, -1.547074276497012e-01, 2.056553615403381e-02, 2.149072255297836e-02, 6.210257642672956e-02, 1.258073733058963e-02, 1.547516105516918e-02, 1.547516105516920e-02, 8.681381244225374e-03, 8.632097164651882e-03, 8.679490021269018e-03, 8.636086016772253e-03, 8.657146174125071e-03, 8.657146174125071e-03, -1.196919431498210e-01, -1.155067531121540e-01, -1.297935381745442e-01, -1.259759445069531e-01, -1.125852494281702e-01, -1.125852494281702e-01, -4.060617666262277e-03, -1.333559205638793e-02, -8.452654910842423e-03, -4.679980992674509e-03, -1.215766842686981e-03, -1.215766842686981e-03, -3.881589662922937e-02, -1.683163276464299e-01, -2.345289138668556e-02, -2.021115261694830e-02, -9.985454129804579e-02, -9.985454129804579e-02, 9.892565661288816e-03, 1.231799599166380e-02, 9.574768156879326e-03, 3.398154393000976e-02, 1.139535284827050e-02, 1.139535284827047e-02, -3.686761906459739e-02, -1.441902508931396e-02, -2.167854040118767e-02, -2.859032464066509e-02, -2.506754031195290e-02, -2.506754031195290e-02, -4.044570367737222e-02, -3.731866633575984e-02, -1.157002740909720e-02, 1.929037238988718e-03, -2.629108095376008e-03, -2.629108095376008e-03, -1.076767821220985e-02, -1.719986635149283e-01, -1.397471508519363e-01, -4.514107167462104e-02, -9.099769076918522e-02, -9.099769076918522e-02, -3.842777237331541e-02, 6.299153672239738e-02, 5.782679141635262e-02, -2.150147144600315e-02, -1.351323936775858e-02, -1.351323936775836e-02, 2.758787507019112e-02, 3.518785301371832e-03, 7.172240691266594e-03, -3.250653846313711e-04, 1.060220700420309e-02, 1.060220700420309e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tau_hcth_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.790216243564997e-10, -3.790263623216540e-10, -3.790300887296509e-10, -3.789599492562169e-10, -3.789991695872136e-10, -3.789991695872136e-10, -1.575580858797787e-06, -1.575980370551298e-06, -1.585047662230696e-06, -1.567889703233406e-06, -1.575879710147429e-06, -1.575879710147429e-06, -1.284954054575183e-03, -1.241524565309270e-03, -1.241992146046109e-04, -1.714308488110146e-04, -2.039786016609006e-04, -2.039786016609006e-04, 9.410747478454646e-01, 8.745275256190340e-01, -8.638455364433234e-04, 2.314795448093736e+00, 1.744669541679704e+00, 1.744669541679702e+00, 2.268884439145747e+01, 2.383513416122429e+01, 9.502387544524591e+00, 2.168371414716586e+01, 2.703054936635473e+01, 2.703054936634479e+01, -4.097921174190594e-07, -4.111945994512656e-07, -4.098472331624604e-07, -4.110856699577948e-07, -4.105098285439080e-07, -4.105098285439080e-07, 6.121369580586529e-07, 9.679992261596542e-08, 1.780527814663345e-06, 1.299031840245102e-06, -2.389485709007843e-07, -2.389485709007843e-07, -7.920173311315226e-03, -8.228554142690086e-03, -9.715721115146667e-03, -1.596893517364254e-02, -8.239573069553162e-03, -8.239573069553162e-03, 4.050141926386417e+00, 8.165186378796140e-01, 4.709830124108080e+00, -4.563806539002186e-05, 3.992244570531566e+00, 3.992244570531566e+00, 2.910426057016933e+01, 2.556378945349494e+01, 1.635540356199022e+02, 8.724405449355681e+00, 7.515331086809744e+01, 7.515331086814170e+01, 4.742135476754915e-03, -1.174016114389289e-02, -8.818820018650341e-03, -4.476534382747290e-03, -6.924088340066222e-03, -6.924088340066222e-03, 1.949401502297708e-02, -5.879794893707283e-03, -1.109611946863967e-02, -1.631795382571919e-02, -1.379948736086277e-02, -1.379948736086277e-02, -6.933009425320937e-03, 3.238373938590542e-01, 1.247708214578447e-01, -1.615189986264940e-02, 3.199859028757562e-02, 3.199859028757576e-02, -7.930032500958329e-03, 8.803190932300408e+00, 7.840286925993111e+00, -5.340557002607172e-02, 8.253499560998723e+00, 8.253499560998705e+00, 1.754628035480867e+01, 1.343980098815456e+02, 6.300508240193682e+01, 8.720411100401137e+00, 9.544622485728965e+01, 9.544622485730872e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
