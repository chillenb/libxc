
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_ft97_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.263554691525623e-02, -5.263564467206956e-02, -5.263592470323814e-02, -5.263447332356457e-02, -5.263525586318599e-02, -5.263525586318599e-02, -4.965258152317988e-02, -4.965363140840613e-02, -4.967778273898841e-02, -4.963591846414347e-02, -4.965388113162748e-02, -4.965388113162748e-02, -3.938047495358879e-02, -3.912639054939131e-02, -2.971819475305421e-02, -3.031868869089994e-02, -3.064700971763153e-02, -3.064700971763153e-02, -8.087778525245721e-10, -1.490666133556958e-08, -4.196092786209542e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.191365863391551e-02, -5.192822332090328e-02, -5.191425018073644e-02, -5.192709763126301e-02, -5.192099191185190e-02, -5.192099191185190e-02, -2.894801316610490e-02, -3.010792193032637e-02, -2.618442011050303e-02, -2.728507229999876e-02, -3.085218008105535e-02, -3.085218008105535e-02, -4.308531866663242e-02, -5.552302593366649e-02, -4.268128521732453e-02, -4.545420748101536e-02, -4.294352278926763e-02, -4.294352278926763e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.090070671659111e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.310575265694120e-02, -5.537424592150979e-02, -5.946215040689275e-02, -6.167667916336150e-02, -6.070502472369577e-02, -6.070502472369577e-02, -6.305681158830639e-02, -3.853478137911386e-02, -4.228492700556703e-02, -4.115323114816959e-02, -4.222276162751099e-02, -4.222276162751099e-02, -5.380321588578738e-02, 0.000000000000000e+00, -9.480645655144421e-05, -3.336890066890560e-02, -1.247327261147167e-02, -1.247327261147168e-02, -3.763109727887975e-02, 0.000000000000000e+00, 0.000000000000000e+00, -3.840009168633795e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_ft97_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.145363819225227e-02, -6.145337356221899e-02, -6.145262898282762e-02, -6.145656032848335e-02, -6.145443755974561e-02, -6.145443755974561e-02, -6.388570796945858e-02, -6.387732173290481e-02, -6.368455015016931e-02, -6.402183892862853e-02, -6.387577534978350e-02, -6.387577534978350e-02, -9.384603243335705e-02, -9.550115137937713e-02, -1.436277675225908e-01, -1.413956378119273e-01, -1.399791905563163e-01, -1.399791905563163e-01, -9.959764648373329e-08, -1.576221162369644e-06, -8.155172104542777e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.720846237850990e-02, -5.742413459098122e-02, -5.721670625899537e-02, -5.740655052223943e-02, -5.731399910341630e-02, -5.731399910341630e-02, -1.637574867706398e-01, -1.600242236929833e-01, -1.714282403069251e-01, -1.686485937643964e-01, -1.574185857775596e-01, -1.574185857775596e-01, -4.098214029975006e-02, -1.227898260393400e-01, -4.518790671747934e-02, -1.194886602968188e-01, -3.788307781645393e-02, -3.788307781645393e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.550979869331316e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.351973848921145e-02, -1.155946210551407e-01, -9.518041133219045e-02, -8.168249325477293e-02, -8.772692031812725e-02, -8.772692031812725e-02, -7.132741869665794e-02, -8.585898294031123e-02, -4.851129129689557e-02, -3.163691035252798e-02, -3.768897430897399e-02, -3.768897430897399e-02, -1.311328982527049e-01, 0.000000000000000e+00, -5.342232335982978e-03, -1.031021346963850e-01, -1.486006426851169e-01, -1.486006426851169e-01, -8.821913412004848e-02, 0.000000000000000e+00, 0.000000000000000e+00, -6.009635825575102e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_ft97_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ft97", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.196770466970230e-11, 2.196712403623923e-11, 2.196490300079702e-11, 2.197354146338152e-11, 2.196896046662520e-11, 2.196896046662520e-11, 2.187362961172709e-07, 2.186260066899404e-07, 2.160571271800898e-07, 2.203328622153277e-07, 2.185792025781781e-07, 2.185792025781781e-07, 1.894532850871704e-03, 1.949788407672084e-03, 3.386800645387542e-03, 3.211708845829714e-03, 3.214345678713599e-03, 3.214345678713599e-03, 7.318825571902247e-07, 1.149310463057526e-05, 7.103690475547272e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.865061063490308e-08, 1.958493333778834e-08, 1.868615455506575e-08, 1.950855852962580e-08, 1.910779532677098e-08, 1.910779532677098e-08, 1.557688571620762e-05, 1.481667372133282e-05, 1.635742000448544e-05, 1.573277777392346e-05, 1.470829139092099e-05, 1.470829139092099e-05, -5.883343755412829e-04, 2.081613014570513e-02, 6.019848619762654e-05, 3.135257499375346e-02, -1.037683270945109e-03, -1.037683270945109e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.152735514218436e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.312068611819418e-03, 2.937249624413555e-02, 2.050196930615884e-02, 1.237463388856744e-02, 1.632477084376154e-02, 1.632477084376154e-02, 3.425554061576035e-03, 7.869813277779253e-03, 8.597275059472923e-04, -3.730673343577287e-03, -1.706477403236517e-03, -1.706477403236517e-03, 1.746368753904758e-02, 0.000000000000000e+00, 6.900695939018704e-03, 5.701941532835765e-02, 1.401866739847190e-01, 1.401866739847191e-01, 1.239691299002797e-02, 0.000000000000000e+00, 0.000000000000000e+00, 2.745357268223355e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
