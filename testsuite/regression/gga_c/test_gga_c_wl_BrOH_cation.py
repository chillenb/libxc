
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_wl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.017299077156286e-02, -5.017375436857800e-02, -5.017592481129023e-02, -5.016459030768203e-02, -5.017070294109856e-02, -5.017070294109856e-02, -4.167489256734890e-02, -4.167975749212343e-02, -4.179248270201322e-02, -4.159690619710133e-02, -4.168071678474523e-02, -4.168071678474523e-02, -2.883392591681505e-02, -2.858573238779961e-02, -2.276947023117122e-02, -2.303786729520841e-02, -2.265510144156957e-02, -2.265510144156957e-02, -4.653924155764344e-03, -5.502346909044423e-03, -3.127576693466536e-02, 3.642647754320441e-03, 5.738533151036916e-05, 5.738533151037079e-05, 2.260994611201726e-02, 2.247141573441716e-02, 1.864004624138132e-02, 2.323100363648635e-02, 1.603270336054631e-02, 1.603270336054631e-02, -5.815359791113893e-02, -5.836825347391156e-02, -5.816243255388917e-02, -5.835192439855585e-02, -5.826276472928262e-02, -5.826276472928262e-02, -2.225863060940523e-02, -2.270414593948187e-02, -2.126517402888171e-02, -2.164984850339913e-02, -2.299961727392228e-02, -2.299961727392228e-02, -4.277498519378437e-02, -7.444994006401141e-02, -3.955975049287296e-02, -6.590100084293504e-02, -4.522811891315736e-02, -4.522811891315736e-02, 1.071810230507644e-02, 8.120322201032555e-04, 1.145822467302017e-02, -8.085483754094565e-02, 6.767707922281491e-03, 6.767707922281491e-03, 2.315427446963940e-02, 2.313126710199133e-02, 2.157302348108902e-02, 1.493993491700184e-02, 1.917544503030913e-02, 1.917544503030912e-02, -9.932917778411109e-02, -7.506809702740204e-02, -8.132732428097311e-02, -8.795726921323206e-02, -8.443434159014541e-02, -8.443434159014541e-02, -1.145990512534192e-01, -2.894038883152954e-02, -3.779809966835222e-02, -5.115665917411426e-02, -4.367616835490985e-02, -4.367616835490985e-02, -7.243078799878257e-02, -3.768718744978145e-03, -9.692460636666681e-03, -2.526818689299528e-02, -1.665893971063751e-02, -1.665893971063752e-02, -2.825438130897104e-02, 1.911742537402553e-02, 1.723170494354508e-02, -3.155081958152530e-02, 1.175161069663037e-02, 1.175161069663037e-02, 2.245953718072413e-02, 2.235933994888460e-02, 2.259829993070962e-02, 1.261998009914490e-02, 2.037916814776814e-02, 2.037916814776814e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_wl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.187853107718556e-01, -1.187856164480262e-01, -1.187861923321606e-01, -1.187869617226756e-01, -1.187904657143545e-01, -1.187890194604778e-01, -1.187713121817800e-01, -1.187751180193206e-01, -1.187778323462421e-01, -1.187864244317900e-01, -1.187778323462421e-01, -1.187864244317900e-01, -1.053606410538508e-01, -1.053386823250185e-01, -1.053686934152663e-01, -1.053455895938119e-01, -1.055451417965542e-01, -1.055156548868195e-01, -1.052453856690005e-01, -1.052143142528298e-01, -1.054311778328360e-01, -1.052861442627210e-01, -1.054311778328360e-01, -1.052861442627210e-01, -8.325019046637287e-02, -8.182459266877185e-02, -8.299937868403334e-02, -8.126829890939206e-02, -7.151016661012752e-02, -7.336987686385005e-02, -7.321189959710117e-02, -7.260610521924099e-02, -6.336373459103803e-02, -8.164299419762626e-02, -6.336373459103803e-02, -8.164299419762626e-02, -3.786885611671557e-02, -3.651965157096593e-02, -3.965566491967518e-02, -3.785158138831240e-02, -9.166047895437431e-02, -8.228164397852135e-02, -2.107129885179524e-02, -2.142235273228413e-02, -1.603546831679151e-02, -1.555775713949794e-02, -1.603546831679151e-02, -1.555775713949793e-02, 2.478116313433077e-02, 1.411360459116431e-02, 2.537945442161216e-02, 1.331372453371160e-02, 1.440528604342502e-02, 6.434987815468824e-03, 1.857313332300085e-02, 2.180749343788812e-02, -2.513717569018791e-03, 1.016583101097048e-01, -2.513717569018788e-03, 1.016583101097047e-01, -1.294332710274032e-01, -1.295182950843431e-01, -1.297191434141079e-01, -1.298132315975811e-01, -1.294424119362950e-01, -1.295330837857595e-01, -1.297012237384839e-01, -1.297870059780681e-01, -1.295772807558947e-01, -1.296697984494717e-01, -1.295772807558947e-01, -1.296697984494717e-01, -7.298510929425353e-02, -7.299272387367899e-02, -7.375130550690280e-02, -7.379564357567983e-02, -7.145223891874326e-02, -7.102603758731300e-02, -7.214118233056804e-02, -7.170118020411481e-02, -7.374163420841259e-02, -7.483786215412357e-02, -7.374163420841259e-02, -7.483786215412357e-02, -1.029790293634832e-01, -1.035592479511773e-01, -1.429579252326669e-01, -1.420740725807063e-01, -1.033016575446513e-01, -9.366998474545482e-02, -1.377397341231129e-01, -1.274090536491850e-01, -1.003344627807856e-01, -1.140501244986912e-01, -1.003344627807856e-01, -1.140501244986911e-01, -6.506624299263025e-03, -7.365824770162550e-03, -2.719702832507266e-02, -2.722664283944791e-02, -2.773013712355978e-03, -7.363583600458943e-03, -1.551089973590880e-01, -1.552478840526066e-01, -1.266365563132739e-02, -1.622934094243226e-02, -1.266365563132739e-02, -1.622934094243226e-02, 2.320830403257055e-02, 1.727458374019241e-02, 2.106229635276675e-02, 1.891213890743383e-02, 2.279863791911218e-02, 1.281686127295489e-02, 2.338196825759590e-03, 1.805754667936591e-03, 5.518005235653040e-02, 8.654853344094322e-04, 5.518005235653040e-02, 8.654853344094284e-04, -1.641624810816863e-01, -1.617667810178240e-01, -1.433714929082903e-01, -1.414576854938105e-01, -1.494922376600839e-01, -1.474097631607718e-01, -1.553367696798849e-01, -1.532379154557077e-01, -1.523023071514716e-01, -1.502125827098564e-01, -1.523023071514716e-01, -1.502125827098564e-01, -1.723243560759532e-01, -1.705890129453798e-01, -8.223947055225825e-02, -8.132584390789678e-02, -9.612666258842138e-02, -9.487252910553999e-02, -1.148229211754906e-01, -1.136747469830500e-01, -1.045562111638781e-01, -1.035106407342048e-01, -1.045562111638781e-01, -1.035106407342048e-01, -1.415949303142942e-01, -1.399931417798494e-01, -3.635649166301242e-02, -3.619311720971291e-02, -4.784357334213803e-02, -4.707658091631834e-02, -7.509483040552219e-02, -7.414864819767499e-02, -5.998345222937238e-02, -5.994824437825288e-02, -5.998345222937240e-02, -5.994824437825287e-02, -8.113802456081287e-02, -7.966879264234170e-02, 1.147176909231376e-02, 1.044950412090093e-02, 9.316000061597017e-03, 4.780820264810485e-03, -8.578593234132249e-02, -8.251205677126185e-02, -1.291579496868885e-03, -6.898232339956681e-03, -1.291579496868893e-03, -6.898232339956680e-03, 2.182687667475796e-02, 1.544318536026191e-02, 2.081083411211117e-02, 1.679674648425426e-02, 2.534421172152460e-02, 1.419322758798331e-02, -1.968816252142642e-03, -3.466626238694653e-03, 4.831037989223306e-02, 3.301368392716705e-03, 4.831037989223302e-02, 3.301368392716693e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_wl_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.873008863593977e-10, 1.199038896106049e-10, 2.873035403554847e-10, 2.873071995557605e-10, 1.199051920766648e-10, 2.873103891411800e-10, 2.873200932696533e-10, 1.199056964548659e-10, 2.873195828307722e-10, 2.872195331385731e-10, 1.198864317856300e-10, 2.872251127278496e-10, 2.872769602457838e-10, 1.198972758360595e-10, 2.872750395915818e-10, 2.872769602457838e-10, 1.198972758360595e-10, 2.872750395915818e-10, 1.637795843438586e-06, 7.895457370257645e-07, 1.638739935239099e-06, 1.638172093256994e-06, 7.896742188188202e-07, 1.639187289079786e-06, 1.647750107515255e-06, 7.925583851420472e-07, 1.648331768620558e-06, 1.629903610844754e-06, 7.868114906414729e-07, 1.630647436640737e-06, 1.639550604894817e-06, 7.896044450698159e-07, 1.637577760768225e-06, 1.639550604894817e-06, 7.896044450698159e-07, 1.637577760768225e-06, 2.893888877651120e-03, 1.817557857758879e-03, 2.884978720119905e-03, 2.863238747047425e-03, 1.808159417036241e-03, 2.851950794811499e-03, 2.153651333351575e-03, 1.590491333810661e-03, 2.174514959908100e-03, 2.121022489187025e-03, 1.545489625167252e-03, 2.115616969929039e-03, 2.025282222857755e-03, 1.534067378141983e-03, 2.176858326178976e-03, 2.025282222857755e-03, 1.534067378141983e-03, 2.176858326178976e-03, 2.857286566998212e-01, 4.078837273278250e-01, 2.675016586378899e-01, 2.985853213498946e-01, 4.025725987663651e-01, 2.742592684361667e-01, 1.662912230863550e-03, 9.341273188199488e-04, 1.492188458780671e-03, 2.794192854220022e-01, 7.867664621198140e-01, 2.903038701989260e-01, 1.744716497159189e-01, 3.495683310985868e-01, 1.523817875983240e-01, 1.744716497159189e-01, 3.495683310985868e-01, 1.523817875983234e-01, -5.312600399883790e+03, 9.272000139252903e+03, -1.851273728203129e+03, -4.892908458079626e+03, 8.146796777415065e+03, -1.458327246415985e+03, -1.347046933051768e+01, 3.737225922320682e+01, -3.345808141255930e+00, -1.533879278720405e+04, 4.627905929815440e+04, -1.984445549766308e+04, 4.797880015153737e+03, 1.828816354330329e+04, -2.746293778818894e+05, 4.797880015153744e+03, 1.828816354330332e+04, -2.746293778818894e+05, 4.851894106373826e-07, 1.799811408368557e-07, 4.858820339525204e-07, 4.894159597490390e-07, 1.809983048493779e-07, 4.900800198138446e-07, 4.853682094043289e-07, 1.800214996877895e-07, 4.860411729804609e-07, 4.890732942806890e-07, 1.809193541797003e-07, 4.897721841076475e-07, 4.873454715985112e-07, 1.804985722584667e-07, 4.880070013919206e-07, 4.873454715985112e-07, 1.804985722584667e-07, 4.880070013919206e-07, 8.544459924315795e-06, 6.371581459510983e-06, 8.546456527402705e-06, 8.515879118015574e-06, 6.274564876304350e-06, 8.526095480521978e-06, 8.150473079602509e-06, 6.242831069755097e-06, 8.126437804349760e-06, 8.129957477738728e-06, 6.157037577667036e-06, 8.102294876860664e-06, 8.698271800215519e-06, 6.382827707510047e-06, 8.781167490765445e-06, 8.698271800215519e-06, 6.382827707510047e-06, 8.781167490765445e-06, 1.299112573818649e-02, 6.191185275209873e-03, 1.321767010045262e-02, 3.794539410742770e-02, 1.150587172846040e-02, 3.830538769953885e-02, 1.783968393120640e-02, 8.122603213654949e-03, 1.486332007513362e-02, 5.557790914121594e-02, 1.647436222332696e-02, 4.417130122910160e-02, 1.204136521083693e-02, 6.256344359866840e-03, 1.624104970850170e-02, 1.204136521083693e-02, 6.256344359866840e-03, 1.624104970850170e-02, 1.682465718940347e-01, 2.035143328025414e+00, 2.170182488972751e-01, 1.231398122884847e-01, 2.626890136949000e-01, 1.234225386108365e-01, -6.547650083865426e-02, 2.629894164484491e+00, 3.561393975024587e-01, 1.833891047943191e-04, 5.167496184061150e-05, 1.840843335206972e-04, 2.983293918927439e-01, 1.510814252831008e+00, 4.229428183668141e-01, 2.983293918927439e-01, 1.510814252831008e+00, 4.229428183668141e-01, -6.042292461663071e+04, 1.148076702829825e+05, -2.940176863436341e+04, -2.309442966171903e+04, 5.353118075300172e+04, -1.723086832391937e+04, -1.390720437698451e+05, 2.812630478578832e+05, -5.164128254158106e+04, -7.765849745317700e-01, 9.741131553652973e+00, -4.876072678673257e-01, -2.605939310940832e+05, 9.753289039080341e+04, 1.533133531323118e+04, -2.605939310940828e+05, 9.753289039080328e+04, 1.533133531323115e+04, 1.551250905650747e-01, 3.621025170875861e-02, 1.529546598752751e-01, 6.060629157052420e-02, 1.799811137299908e-02, 5.952045134273524e-02, 7.753992514540627e-02, 2.151657159153145e-02, 7.624939849813962e-02, 1.003570485324966e-01, 2.601365022763261e-02, 9.861178723417041e-02, 8.754154710375636e-02, 2.351471582884659e-02, 8.605205358272565e-02, 8.754154710375636e-02, 2.351471582884659e-02, 8.605205358272565e-02, 3.302828769039018e-01, 6.770298762688090e-02, 3.238481736153954e-01, 1.384138990703271e-02, 8.602021056117263e-03, 1.357961854479916e-02, 1.913812228897152e-02, 9.827687818590933e-03, 1.877021005011375e-02, 3.156249334618678e-02, 1.284946025151041e-02, 3.097562943180818e-02, 2.391198577840948e-02, 1.100952497142108e-02, 2.344643599628422e-02, 2.391198577840948e-02, 1.100952497142108e-02, 2.344643599628422e-02, 2.744327487092373e-02, 8.506070235845660e-03, 2.762445270412663e-02, 7.720360154990895e-02, 1.196465913864332e-01, 7.653493056672851e-02, 6.352817998832197e-02, 7.235419366981281e-02, 6.187393895816080e-02, 6.156862727083464e-02, 4.178262552321256e-02, 6.003509397333444e-02, 6.145964528306291e-02, 5.451827870122881e-02, 6.170236075575040e-02, 6.145964528306298e-02, 5.451827870122884e-02, 6.170236075575044e-02, 2.010248955135619e-02, 1.263849707397049e-02, 1.953399542003040e-02, -9.804317846308049e+00, 4.087534072440162e+01, -8.409562647374196e+00, -3.773668487793129e+00, 1.635096954413222e+01, -1.386037097033396e+00, 1.167310879436315e-01, 6.658591342850623e-02, 1.089081977563128e-01, -1.391074583981603e-01, 5.210613718045398e+00, 6.201778622723796e-01, -1.391074583981598e-01, 5.210613718045399e+00, 6.201778622723799e-01, -1.383098683962180e+03, 2.985575921206351e+03, -7.603730144901464e+02, -1.744168757939234e+06, 5.917498491755738e+06, -2.380836769899894e+06, -2.562764117382178e+05, 4.530126743532208e+05, -9.203011678245617e+04, -3.867348855993472e-02, 6.267499547623541e+00, 3.117367221683010e-01, -3.921277998412690e+05, 1.469613006579429e+05, 2.012619890063436e+04, -3.921277998412701e+05, 1.469613006579434e+05, 2.012619890063443e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
