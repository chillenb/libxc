
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tau_hcth_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.324192450545175e-01, -1.324178536819249e-01, -1.324137873029952e-01, -1.324365273498418e-01, -1.324184933980987e-01, -1.324184933980987e-01, -1.015858743517819e-01, -1.015798601265857e-01, -1.014153055200871e-01, -1.017039496898141e-01, -1.015828919478639e-01, -1.015828919478639e-01, -7.223985610947865e-02, -7.233905864340996e-02, -7.299429146849248e-02, -7.323785711449783e-02, -7.227603358303979e-02, -7.227603358303979e-02, -3.124506648734759e-02, -3.351682432682337e-02, -7.133266598475049e-02, 1.831626968751586e-02, -3.197404138057731e-02, -3.197404138057731e-02, 2.507000476352719e-02, 2.606029096033842e-02, 6.684240042229321e-02, 1.313837493883886e-02, 2.582573074953067e-02, 2.582573074953067e-02, -8.588150263451712e-02, -8.558971964384920e-02, -8.585238932108558e-02, -8.562550574605504e-02, -8.573096824620101e-02, -8.573096824620101e-02, -1.043422015649045e-01, -1.045941695670185e-01, -1.041355152460098e-01, -1.043774159171985e-01, -1.046285719593007e-01, -1.046285719593007e-01, -5.492237083168465e-02, -3.319783505362614e-02, -5.529608355971291e-02, -3.699587428679764e-02, -5.261977949409832e-02, -5.261977949409832e-02, 5.788158322476886e-02, -3.815065051990924e-03, 5.462390821509869e-02, -4.759422941782952e-02, 3.679953829124655e-02, 3.679953829124655e-02, 1.271228835876186e-02, 1.435693303641898e-02, 1.100791978430581e-02, 6.902748522436075e-02, 1.318292057999225e-02, 1.318292057999226e-02, -3.046853523031205e-02, -3.159585172941637e-02, -3.035998589108502e-02, -2.991666156606830e-02, -3.006674825988244e-02, -3.006674825988244e-02, -3.094790559763497e-02, -6.235532595086884e-02, -5.554824912633434e-02, -4.502546606208169e-02, -5.076478600145138e-02, -5.076478600145137e-02, -3.456603638663149e-02, -2.729584965478449e-02, -4.573110960177697e-02, -5.620666909100307e-02, -5.431981494918556e-02, -5.431981494918556e-02, -6.094032798796196e-02, 6.594617933245814e-02, 7.135896546455306e-02, -5.066965811083145e-02, 5.944222370991722e-02, 5.944222370991717e-02, 2.866669252062993e-02, 4.244442408722284e-03, 7.832519058244320e-03, 5.730878456776883e-02, 1.134937078155086e-02, 1.134937078155089e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tau_hcth_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([9.171545462435364e-03, 9.172604432573714e-03, 9.175813876816456e-03, 9.158495756435068e-03, 9.172116596985462e-03, 9.172116596985462e-03, -1.181124770309414e-02, -1.179993314301677e-02, -1.149005716359424e-02, -1.202547577511175e-02, -1.180543284598626e-02, -1.180543284598626e-02, -5.151156968701741e-02, -5.268110913496476e-02, -8.890918707905097e-02, -8.696596936352285e-02, -5.193134171524737e-02, -5.193134171524737e-02, -1.242037356861782e-01, -1.183151748639856e-01, -2.453461632888252e-02, -1.444664527817733e-01, -1.223772203132779e-01, -1.223772203132779e-01, 3.133762371157793e-02, 3.243961582750918e-02, 4.979749862167279e-02, 1.706295331837212e-02, 3.215726236842845e-02, 3.215726236842845e-02, 8.684131017464838e-03, 8.637098661588922e-03, 8.679729029105991e-03, 8.643215379470168e-03, 8.660673868930080e-03, 8.660673868930080e-03, -1.213676023678150e-01, -1.172554883464174e-01, -1.274741949326737e-01, -1.241800364119479e-01, -1.108616052314847e-01, -1.108616052314847e-01, -3.665989085663320e-03, -1.533155134143300e-02, -5.697351501766020e-03, -3.433582599322717e-03, -3.927280898802446e-04, -3.927280898802446e-04, -6.802027198866928e-02, -1.685675947307194e-01, -7.298350388905511e-02, -2.034995007233303e-02, -1.158386781893802e-01, -1.158386781893802e-01, 1.652190260785998e-02, 1.859113513437740e-02, 1.431584724315904e-02, 1.443537820510758e-02, 1.709269448372087e-02, 1.709269448372087e-02, -3.921476022426102e-02, -1.877530790379256e-02, -2.620004308787416e-02, -3.232098445636380e-02, -2.926439684526948e-02, -2.926439684526947e-02, -4.044289931790157e-02, -2.975187208561555e-02, -7.688993690536357e-03, 2.089892104698254e-03, -9.171585970890944e-04, -9.171585970891220e-04, -1.291448057950465e-02, -1.578691695490801e-01, -1.187367550501513e-01, -3.991931299388034e-02, -7.641335654442279e-02, -7.641335654442261e-02, -3.405074062790644e-02, 5.653944574145866e-02, 3.525426031701558e-02, -1.780786197765866e-02, -4.185263946990448e-02, -4.185263946990463e-02, 3.548690563171514e-02, 5.606464265844847e-03, 1.027520841409763e-02, -4.153489010860960e-02, 1.476155463150056e-02, 1.476155463150051e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tau_hcth_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.790489321847474e-10, -3.790530579883626e-10, -3.790558281076596e-10, -3.789885733138416e-10, -3.790512386991490e-10, -3.790512386991490e-10, -1.575532236104309e-06, -1.575851237437505e-06, -1.584319736899786e-06, -1.568162219391183e-06, -1.575664473143292e-06, -1.575664473143292e-06, -9.997121261592101e-04, -9.575452593151818e-04, 2.018013726155033e-04, 1.360356085157081e-04, -9.845529767312144e-04, -9.845529767312144e-04, 6.843998203515259e-01, 6.179379834196115e-01, -1.062797831871225e-03, 2.496849895654298e+00, 6.640514077706685e-01, 6.640514077706685e-01, 4.458180973675353e+01, 4.438492713598690e+01, 1.302735214016644e+01, 3.451816356939832e+01, 4.617994560193852e+01, 4.617994560193852e+01, -4.104789693643641e-07, -4.118428081079914e-07, -4.106138775425416e-07, -4.116745259474024e-07, -4.111870470104861e-07, -4.111870470104861e-07, 8.101674197952981e-07, 3.013862526892891e-07, 1.513953034644258e-06, 1.100600040176544e-06, -4.437473556578347e-07, -4.437473556578347e-07, -8.457696361528766e-03, -8.259815169288046e-03, -1.000526564160967e-02, -1.473903836343228e-02, -8.137544638157941e-03, -8.137544638157941e-03, 4.383183202250869e+00, 6.931225721260335e-01, 4.979607188783832e+00, -4.577417795797215e-05, 3.853687450490159e+00, 3.853687450490159e+00, 3.674201458455587e+01, 3.634345692376274e+01, 1.068022312404210e+02, 1.080179951641611e+01, 5.416556031762735e+01, 5.416556031763913e+01, 8.505755670664555e-03, -9.520364238491442e-03, -5.866807299131165e-03, -1.223977725809682e-03, -3.789304171552401e-03, -3.789304171552405e-03, 1.704254643329535e-02, -6.986343831667566e-03, -1.160190362403083e-02, -1.580286242000477e-02, -1.381920696621546e-02, -1.381920696621545e-02, -7.031528288351126e-03, 2.516393408760461e-01, 8.580257111740795e-02, -2.065702405164347e-02, 1.498915352337007e-02, 1.498915352337011e-02, -9.338432323760535e-03, 1.140635895999990e+01, 9.957019578572845e+00, -6.426139733184982e-02, 8.520647514337865e+00, 8.520647514337872e+00, 3.268075660800093e+01, 6.842095594717331e+01, 5.683385379184455e+01, 1.063201603032934e+01, 8.027553305171512e+01, 8.027553305173502e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
