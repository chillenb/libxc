
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_regtpss_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.101172579733056e-02, -5.101246387859060e-02, -5.101468993127452e-02, -5.100262587343102e-02, -5.101212395174914e-02, -5.101212395174914e-02, -4.164842774210412e-02, -4.165258963101516e-02, -4.176716348453945e-02, -4.157008647072879e-02, -4.165057104801103e-02, -4.165057104801103e-02, -2.686491989007642e-02, -2.664506029306496e-02, -2.097174866666453e-02, -2.125849902289794e-02, -2.678564619992341e-02, -2.678564619992341e-02, -1.047629097735380e-02, -1.120364592590718e-02, -3.372660901438757e-02, -3.184414970476611e-03, -1.070096504066074e-02, -1.070096504066074e-02, -3.348388281238761e-07, -4.112212248413518e-07, -6.166214306318998e-05, -8.911787679813316e-09, -4.081058246888657e-07, -4.081058246888657e-07, -5.880941752429229e-02, -5.901416156079557e-02, -5.882983481506155e-02, -5.898903307578721e-02, -5.891494833532217e-02, -5.891494833532217e-02, -2.083682091768361e-02, -2.128575898495274e-02, -2.021183099288170e-02, -2.055698011091826e-02, -2.198156609750561e-02, -2.198156609750561e-02, -3.991043213947421e-02, -5.678123173188619e-02, -3.851919517541584e-02, -5.161087865602520e-02, -4.232632553074022e-02, -4.232632553074022e-02, -9.254682744237705e-04, -5.247849800349341e-03, -1.019343481717656e-03, -7.214105440600252e-02, -1.914074856256774e-03, -1.914074856256774e-03, -8.026838943740980e-09, -1.475108359993060e-08, -1.134583158288134e-08, -2.354145437036954e-04, -1.428524988374375e-08, -1.428524988374375e-08, -6.164860736393938e-02, -5.676637591103259e-02, -5.843486063898554e-02, -5.978558518810811e-02, -5.910340220009586e-02, -5.910340220009586e-02, -6.179617838753197e-02, -3.011491779690613e-02, -3.730159406365591e-02, -4.534842992079735e-02, -4.115883725543813e-02, -4.115883725543813e-02, -5.681367948701654e-02, -8.529444322297344e-03, -1.349306762078119e-02, -2.582655238172375e-02, -1.919591490061464e-02, -1.919591490061463e-02, -2.854703032310763e-02, -3.798121996400162e-05, -1.302731449909718e-04, -3.062153431234137e-02, -6.834796913776825e-04, -6.834796913776825e-04, -5.021696492499773e-07, -6.179050310623309e-11, -1.085089323722854e-09, -6.999795691613420e-04, -9.929519766703525e-09, -9.929519770606652e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_regtpss_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.271988688392439e-01, -1.271997720005922e-01, -1.272025050373733e-01, -1.271877418053498e-01, -1.271993559699498e-01, -1.271993559699498e-01, -1.093557839590755e-01, -1.093607181983808e-01, -1.094965792493443e-01, -1.092639125118520e-01, -1.093583513129710e-01, -1.093583513129710e-01, -7.741249536783962e-02, -7.713154734632917e-02, -6.853509161927762e-02, -6.908395698535186e-02, -7.731156486097400e-02, -7.731156486097400e-02, -3.940384049989155e-02, -4.111081503700081e-02, -8.671292291833196e-02, -1.571064026851453e-02, -3.994056655590819e-02, -3.994056655590819e-02, -2.155132069840192e-06, -2.644254452276461e-06, -3.777564443738840e-04, -5.802761706179363e-08, -2.624609473812205e-06, -2.624609473812205e-06, -1.294602030179654e-01, -1.296367551884561e-01, -1.294778540661682e-01, -1.296151389989215e-01, -1.295512930562430e-01, -1.295512930562430e-01, -7.359525129714525e-02, -7.458287322173168e-02, -7.221405091237146e-02, -7.299240957822124e-02, -7.605258705745571e-02, -7.605258705745571e-02, -8.412873436878923e-02, -8.234218010609479e-02, -8.260805252461098e-02, -8.183742420467625e-02, -8.539607076390804e-02, -8.539607076390804e-02, -5.158234153821764e-03, -2.410211164655364e-02, -5.640077176913920e-03, -1.177372577866355e-01, -1.003563108282494e-02, -1.003563108282494e-02, -5.228665229202449e-08, -9.593151099064593e-08, -7.400965449794435e-08, -1.396210847118282e-03, -9.299443411221856e-08, -9.299443410990724e-08, -7.544528994461433e-02, -7.988787532283706e-02, -7.854424880061404e-02, -7.732506025790831e-02, -7.795565647841922e-02, -7.795565647841922e-02, -7.356504758825344e-02, -7.686841218426083e-02, -8.123050227787519e-02, -8.242399163613789e-02, -8.224967296306840e-02, -8.224967296306840e-02, -8.431206347299992e-02, -3.531884184485190e-02, -4.845300218627323e-02, -6.787551379240991e-02, -5.927292030347716e-02, -5.927292030347716e-02, -7.404388811645435e-02, -2.344531858646152e-04, -7.855902654423905e-04, -6.920816781905526e-02, -3.871259137869690e-03, -3.871259137869693e-03, -3.223164729242341e-06, -4.065966007088444e-10, -7.105513572392650e-09, -3.955747810351766e-03, -6.475427151063745e-08, -6.475427151536799e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_regtpss_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_regtpss", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.928180019281279e-10, 1.928210471159259e-10, 1.928251462558023e-10, 1.927754793256911e-10, 1.928196871409140e-10, 1.928196871409140e-10, 1.080140866239245e-06, 1.080317302049453e-06, 1.084961595824018e-06, 1.075856971334699e-06, 1.080209051938205e-06, 1.080209051938205e-06, 1.705503820370049e-03, 1.692941956295745e-03, 1.351450470930858e-03, 1.327386958193403e-03, 1.701015340325194e-03, 1.701015340325194e-03, 2.247241333257849e-01, 2.319082193240779e-01, 1.007825814764636e-03, 1.900024941875603e-01, 2.271893347579839e-01, 2.271893347579839e-01, 7.941273224764785e-02, 8.499552860534242e-02, 1.262261224046798e-01, 1.608825600883128e-02, 8.871757460206837e-02, 8.871757460206837e-02, 2.836106554936334e-07, 2.854238767974427e-07, 2.837896200145432e-07, 2.851994063926222e-07, 2.845458930843817e-07, 2.845458930843817e-07, 6.115261806490887e-06, 6.100536465735589e-06, 5.924240938430225e-06, 5.914789032126690e-06, 6.359917853645483e-06, 6.359917853645483e-06, 6.135270465816043e-03, 7.643934712206962e-03, 7.448680471476140e-03, 9.963914361900382e-03, 5.638886002624334e-03, 5.638886002624334e-03, 1.367722003389829e-01, 8.030241375045789e-02, 1.681785060532277e-01, 6.026305149633485e-05, 1.981402706457400e-01, 1.981402706457400e-01, 1.662456686305396e-02, 2.049095270992036e-02, 6.332528137736125e-02, 1.812998160591261e-01, 3.188173523908732e-02, 3.188173523861385e-02, 1.144953238127618e-02, 9.996795032704182e-03, 1.047191697911186e-02, 1.087259851063085e-02, 1.066845012937469e-02, 1.066845012937469e-02, 1.341835887690146e-02, 7.875689476368334e-03, 8.878213096246316e-03, 1.013030636351172e-02, 9.477124446857004e-03, 9.477124446857001e-03, 6.110529237174989e-03, 5.363283682192561e-02, 4.521196459395376e-02, 3.520756915314138e-02, 4.141675708315724e-02, 4.141675708315726e-02, 1.192664277876898e-02, 8.942805510865150e-02, 1.261489796474759e-01, 5.903365307154990e-02, 2.415181150174451e-01, 2.415181150174455e-01, 6.415442819939721e-02, 5.483812905301753e-03, 1.303613714396284e-02, 3.151737592350508e-01, 4.362568456247019e-02, 4.362568456921369e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
