
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_spbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.541829541444993e-02, -5.541894771100436e-02, -5.542091631582356e-02, -5.541025447444028e-02, -5.541864728195436e-02, -5.541864728195436e-02, -4.623326808210215e-02, -4.623683216711998e-02, -4.633500401747753e-02, -4.616637990358466e-02, -4.623510809281318e-02, -4.623510809281318e-02, -3.092890994842302e-02, -3.074858752441908e-02, -2.608701974066164e-02, -2.633960005142455e-02, -3.086387787662081e-02, -3.086387787662081e-02, -1.410004555217736e-02, -1.472123538367919e-02, -3.698234861672958e-02, -6.746686843077081e-03, -1.429223941131436e-02, -1.429223941131436e-02, -2.565131331390863e-05, -2.900331832830478e-05, -6.345384459890402e-04, -3.030663924080086e-06, -2.876233987024720e-05, -2.876233987024720e-05, -6.163324538407983e-02, -6.181648384168045e-02, -6.165151480639998e-02, -6.179399060698594e-02, -6.172767876861057e-02, -6.172767876861057e-02, -2.792604587183609e-02, -2.832017677812899e-02, -2.738378868035453e-02, -2.768810767660356e-02, -2.891790258159987e-02, -2.891790258159987e-02, -4.128376870068734e-02, -5.670123828914773e-02, -3.996324510340751e-02, -5.167281644303204e-02, -4.345052235656310e-02, -4.345052235656310e-02, -3.271326826093218e-03, -9.544002212015477e-03, -3.421722420524644e-03, -7.261393099917901e-02, -4.948506719789220e-03, -4.948506719789220e-03, -2.830564379730123e-06, -4.071851920295496e-06, -3.140178036519418e-06, -1.402840677822940e-03, -3.844697526706555e-06, -3.844697526706555e-06, -6.153420070704292e-02, -5.664242353285217e-02, -5.828741372117453e-02, -5.963908058802630e-02, -5.895413589625154e-02, -5.895413589625154e-02, -6.170963628629628e-02, -3.276301166792746e-02, -3.880690764980405e-02, -4.586063207262116e-02, -4.214163566215225e-02, -4.214163566215225e-02, -5.677924326206844e-02, -1.310573381656249e-02, -1.771264874067416e-02, -2.821587502925093e-02, -2.260056169760203e-02, -2.260056169760202e-02, -3.118978735742160e-02, -4.835615894767966e-04, -1.004095686992822e-03, -3.190921026278610e-02, -2.625748112687399e-03, -2.625748112687405e-03, -3.364519912671897e-05, -1.464685428584447e-07, -8.236582546547250e-07, -2.616157258933802e-03, -2.980918865274684e-06, -2.980918865272547e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_spbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.227703014706016e-01, -1.227712053013837e-01, -1.227739411713325e-01, -1.227591672834521e-01, -1.227707889553326e-01, -1.227707889553326e-01, -1.045359797429623e-01, -1.045406730832712e-01, -1.046700270383524e-01, -1.044488096082020e-01, -1.045384257947423e-01, -1.045384257947423e-01, -7.264397717486085e-02, -7.240736106045247e-02, -6.564832333804299e-02, -6.608810359832293e-02, -7.255881443651713e-02, -7.255881443651713e-02, -3.836616484359370e-02, -3.953396829250901e-02, -8.136777068812656e-02, -2.132066342446049e-02, -3.873075746952691e-02, -3.873075746952691e-02, -9.906114233967785e-05, -1.119082630889677e-04, -2.340310567253430e-03, -1.183119827317391e-05, -1.109937562621768e-04, -1.109937562621768e-04, -1.250862627304510e-01, -1.252768430109289e-01, -1.251053054971529e-01, -1.252534965678205e-01, -1.251845634366440e-01, -1.251845634366440e-01, -7.371933452906188e-02, -7.446273533825459e-02, -7.270602539541478e-02, -7.328750322647137e-02, -7.555003298676297e-02, -7.555003298676297e-02, -7.977077261170436e-02, -8.168913435430887e-02, -7.812504761966313e-02, -8.045570071754503e-02, -8.143694733181724e-02, -8.143694733181724e-02, -1.117709613789570e-02, -2.886158009243849e-02, -1.163744891391029e-02, -1.158867535523253e-01, -1.624025305585478e-02, -1.624025305585478e-02, -1.105432096771651e-05, -1.587736088710399e-05, -1.227998116605605e-05, -5.032315565109762e-03, -1.500580881733292e-05, -1.500580881733003e-05, -7.552828537665679e-02, -7.945638118817222e-02, -7.836440341789870e-02, -7.729572220866088e-02, -7.785685534770670e-02, -7.785685534770670e-02, -7.365830973194155e-02, -7.157993907998193e-02, -7.664544076306840e-02, -7.962715425840503e-02, -7.844538151965456e-02, -7.844538151965458e-02, -8.346719116835678e-02, -3.741136232020038e-02, -4.685658168763744e-02, -6.273211751679625e-02, -5.509849574564339e-02, -5.509849574564338e-02, -6.878885501331439e-02, -1.795408881667885e-03, -3.651104783471238e-03, -6.465181245662635e-02, -9.092097900672063e-03, -9.092097900672063e-03, -1.295976301642334e-04, -5.777351932883557e-07, -3.233074070952127e-06, -9.050604614837155e-03, -1.165425879886544e-05, -1.165425879886369e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_spbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_spbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.702548986650195e-10, 1.702578541440512e-10, 1.702622803222072e-10, 1.702140681277867e-10, 1.702565304891196e-10, 1.702565304891196e-10, 9.244041413602575e-07, 9.245623739983132e-07, 9.287384348110472e-07, 9.206048333250516e-07, 9.244662724698933e-07, 9.244662724698933e-07, 1.378091450001829e-03, 1.367764982375679e-03, 1.101118718648772e-03, 1.080745400674211e-03, 1.374396175409825e-03, 1.374396175409825e-03, 1.810682092631420e-01, 1.848040817650857e-01, 8.281492723697079e-04, 2.120402788286527e-01, 1.823857242913637e-01, 1.823857242913637e-01, 3.040602441856294e+00, 2.996057746051183e+00, 6.485891020426465e-01, 2.735332161097428e+00, 3.124949486091651e+00, 3.124949486091651e+00, 2.535393645575495e-07, 2.552911545392543e-07, 2.537123236793672e-07, 2.550743368406278e-07, 2.544426555726576e-07, 2.544426555726576e-07, 5.262378616013504e-06, 5.236341619064220e-06, 5.119115728651605e-06, 5.099763775174483e-06, 5.437658774960382e-06, 5.437658774960382e-06, 5.217027464143666e-03, 7.382753146908781e-03, 6.293862208422313e-03, 9.324317781028614e-03, 4.862665383495738e-03, 4.862665383495738e-03, 2.446012594555037e-01, 7.925983268794255e-02, 2.861953188524408e-01, 5.663790469885033e-05, 2.639080813448039e-01, 2.639080813448039e-01, 2.930950173867188e+00, 2.827801467710823e+00, 8.762213590098648e+00, 5.406562741194582e-01, 4.289767120765819e+00, 4.289767120765664e+00, 1.176664336649219e-02, 9.769053036693521e-03, 1.040546258899629e-02, 1.095484094740199e-02, 1.067345819947042e-02, 1.067345819947042e-02, 1.394867639995029e-02, 6.373116866447633e-03, 7.459993957501475e-03, 9.024425317933458e-03, 8.175768868866007e-03, 8.175768868866009e-03, 5.851074287893269e-03, 4.699232399181145e-02, 3.644758302410920e-02, 2.801415084540847e-02, 3.250645905666059e-02, 3.250645905666060e-02, 9.592048182027602e-03, 5.684434407222858e-01, 4.858039808011835e-01, 4.854513040682164e-02, 4.679545880419264e-01, 4.679545880419268e-01, 2.148182166595659e+00, 6.499336046030773e+00, 4.947449746201914e+00, 5.945471993016097e-01, 6.547671024987095e+00, 6.547671024987874e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
