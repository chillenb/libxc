
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_sol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.169595064830760e-02, -6.169681455593945e-02, -6.169927198487024e-02, -6.168644826568535e-02, -6.169336390757035e-02, -6.169336390757035e-02, -5.082214353277732e-02, -5.082731600538518e-02, -5.094713323183037e-02, -5.073944804278533e-02, -5.082838728348794e-02, -5.082838728348794e-02, -3.435003722549475e-02, -3.411833574389230e-02, -2.841150496636504e-02, -2.869246992780639e-02, -2.870901693599544e-02, -2.870901693599544e-02, -9.467152355018490e-03, -1.019839499288911e-02, -3.712021125164207e-02, -3.426108976958178e-03, -3.614920577417705e-03, -3.614920577417701e-03, -1.130913646020179e-08, -1.508844592931075e-08, -1.688952061924300e-05, -8.123561424239201e-10, -2.097499313125084e-09, -2.097499313125084e-09, -6.824054035036750e-02, -6.844406311174990e-02, -6.824893082702503e-02, -6.842859996378403e-02, -6.834409817937734e-02, -6.834409817937734e-02, -2.850927316134329e-02, -2.903279824619702e-02, -2.734030774850627e-02, -2.779289263889741e-02, -2.938139334708285e-02, -2.938139334708285e-02, -4.445931963239005e-02, -5.868760620081127e-02, -4.183567607409466e-02, -5.442364507835078e-02, -4.604818028741148e-02, -4.604818028741145e-02, -7.471947360635015e-04, -5.271285548032807e-03, -5.843577226513526e-04, -7.717717621370776e-02, -1.876608654543654e-03, -1.876608654543654e-03, -3.169878992539260e-10, -8.601203985159067e-10, -1.528354170434940e-09, -1.558332989379206e-04, -1.499126887731517e-09, -1.499126891634645e-09, -6.150403091928505e-02, -5.749042507580269e-02, -5.884966051854761e-02, -6.001649762575707e-02, -5.942822100312488e-02, -5.942822100312488e-02, -6.213703101485012e-02, -3.338504718118086e-02, -4.030992956137804e-02, -4.826095657708955e-02, -4.415221539724708e-02, -4.415221539724708e-02, -5.888225209326935e-02, -8.881629744247437e-03, -1.435769710936891e-02, -2.899946742100026e-02, -2.111760716932135e-02, -2.111760716932135e-02, -3.249019947380105e-02, -1.279545386876149e-05, -4.854597687168130e-05, -3.342353917014605e-02, -4.968141392251539e-04, -4.968141392251574e-04, -4.410923694787156e-08, -8.044959880562641e-12, -1.338379665340866e-10, -3.829527179331944e-04, -1.348916396333791e-09, -1.348916392430663e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_sol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.393510576114114e-01, -1.393512275446133e-01, -1.393519260470738e-01, -1.393522126024011e-01, -1.393548773729048e-01, -1.393545605530933e-01, -1.393404591445618e-01, -1.393414642189726e-01, -1.393475381566019e-01, -1.393492200259266e-01, -1.393475381566019e-01, -1.393492200259266e-01, -1.189841135386795e-01, -1.189857962838006e-01, -1.189887107004349e-01, -1.189906323713237e-01, -1.191002226844330e-01, -1.190976788026648e-01, -1.189118431367712e-01, -1.189101144786508e-01, -1.190139402022180e-01, -1.189677980135788e-01, -1.190139402022180e-01, -1.189677980135788e-01, -8.502768867369601e-02, -8.465928275397092e-02, -8.489135888657061e-02, -8.444091435000067e-02, -7.896451345907765e-02, -7.953020647226297e-02, -7.973592548430024e-02, -7.955759532554017e-02, -7.705402846260642e-02, -8.245153771564186e-02, -7.705402846260642e-02, -8.245153771564186e-02, -3.780249486330139e-02, -3.646165795403655e-02, -3.980153012753564e-02, -3.818466888382947e-02, -9.085102615447660e-02, -8.759078315215386e-02, -1.701459448451863e-02, -1.681121666250484e-02, -1.550442148110201e-02, -2.707881279634280e-02, -1.550442148110203e-02, -2.707881279634279e-02, -7.534740147226432e-08, -7.250514381430049e-08, -1.007909964991750e-07, -9.647145306790022e-08, -1.091540378943520e-04, -1.046364155331314e-04, -5.298534222892065e-09, -5.352332428365863e-09, -1.294796536877247e-08, -1.776951581846731e-08, -1.294796537050719e-08, -1.776951581890099e-08, -1.367312544603928e-01, -1.367681370287887e-01, -1.368701350422800e-01, -1.369080801255964e-01, -1.367366904880697e-01, -1.367742631194238e-01, -1.368600181400512e-01, -1.368971027916626e-01, -1.368019163612233e-01, -1.368395200952188e-01, -1.368019163612233e-01, -1.368395200952188e-01, -8.815371172386026e-02, -8.815777996746375e-02, -8.902178058240365e-02, -8.904399895481462e-02, -8.626197066912446e-02, -8.612730164995107e-02, -8.705559167224666e-02, -8.691353016477286e-02, -8.940008627829296e-02, -8.976172856153496e-02, -8.940008627829296e-02, -8.976172856153496e-02, -8.479194438302003e-02, -8.507870488694280e-02, -8.148408873818963e-02, -8.142691763997345e-02, -8.479075892831510e-02, -8.104615026392067e-02, -8.144060578353947e-02, -7.753576505323197e-02, -8.242657618198004e-02, -8.807598007851063e-02, -8.242657618198003e-02, -8.807598007851060e-02, -4.297407773627156e-03, -4.263348264215765e-03, -2.441664096929656e-02, -2.430856634121287e-02, -3.471525520772063e-03, -3.323284362479381e-03, -1.167168888691944e-01, -1.167907505090705e-01, -1.024487869168753e-02, -9.750662310175705e-03, -1.024487869168753e-02, -9.750662310175705e-03, -2.106301618685397e-09, -2.059134108336508e-09, -5.664622018709896e-09, -5.613792545700817e-09, -1.021863188064814e-08, -9.880446722168548e-09, -9.517978092935776e-04, -9.470749567250458e-04, -1.118299223899387e-08, -9.302920079407289e-09, -1.118299224357462e-08, -9.302920080952277e-09, -7.508643443387082e-02, -7.459772618578747e-02, -7.890035510718078e-02, -7.842043642636422e-02, -7.772855563953647e-02, -7.724390440491684e-02, -7.662374684202632e-02, -7.613956084059370e-02, -7.719192909972368e-02, -7.670754221398475e-02, -7.719192909972368e-02, -7.670754221398475e-02, -7.282338421957384e-02, -7.240604351771310e-02, -7.898352403717557e-02, -7.859484320676284e-02, -8.173335707450247e-02, -8.128600917238409e-02, -8.147435325417975e-02, -8.108136273357978e-02, -8.201006358784690e-02, -8.161504194124318e-02, -8.201006358784690e-02, -8.161504194124318e-02, -8.352066116691438e-02, -8.331376231335605e-02, -3.659399641032796e-02, -3.639973819961532e-02, -5.056171529799679e-02, -5.007239768326351e-02, -7.023515623328225e-02, -6.979297258113315e-02, -6.177565479005256e-02, -6.179851928757503e-02, -6.177565479005255e-02, -6.179851928757503e-02, -7.707098284183055e-02, -7.646788716964903e-02, -8.126564925351680e-05, -8.083882951094655e-05, -3.068778403235377e-04, -2.989451821577706e-04, -7.085035437557148e-02, -6.955242244560246e-02, -2.973925733334852e-03, -2.842790224141427e-03, -2.973925733334855e-03, -2.842790224141417e-03, -2.904208824988100e-07, -2.836976847407430e-07, -5.315878426883863e-11, -5.309206246714387e-11, -8.975919468334507e-10, -8.664065674677838e-10, -2.279736365364822e-03, -2.249432203745442e-03, -9.902819840553845e-09, -8.397860226593240e-09, -9.902819837883997e-09, -8.397860225441275e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_sol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.962116184362814e-10, 3.924232368725627e-10, 1.962116184362814e-10, 1.962148408057530e-10, 3.924296816115061e-10, 1.962148408057530e-10, 1.962188014188858e-10, 3.924376028377716e-10, 1.962188014188858e-10, 1.961710826906725e-10, 3.923421653813450e-10, 1.961710826906725e-10, 1.961975562739611e-10, 3.923951125479222e-10, 1.961975562739611e-10, 1.961975562739611e-10, 3.923951125479222e-10, 1.961975562739611e-10, 1.080141894031415e-06, 2.160283788062830e-06, 1.080141894031415e-06, 1.080339685660140e-06, 2.160679371320279e-06, 1.080339685660140e-06, 1.084798189895017e-06, 2.169596379790034e-06, 1.084798189895017e-06, 1.076071516622929e-06, 2.152143033245858e-06, 1.076071516622929e-06, 1.080252377583731e-06, 2.160504755167462e-06, 1.080252377583731e-06, 1.080252377583731e-06, 2.160504755167462e-06, 1.080252377583731e-06, 1.751232254519327e-03, 3.502464509038655e-03, 1.751232254519327e-03, 1.742106496668950e-03, 3.484212993337901e-03, 1.742106496668950e-03, 1.499167897968193e-03, 2.998335795936386e-03, 1.499167897968193e-03, 1.461508100397486e-03, 2.923016200794973e-03, 1.461508100397486e-03, 1.480924259010037e-03, 2.961848518020074e-03, 1.480924259010037e-03, 1.480924259010037e-03, 2.961848518020074e-03, 1.480924259010037e-03, 2.018261796925656e-01, 4.036523593851310e-01, 2.018261796925656e-01, 2.083866403599356e-01, 4.167732807198712e-01, 2.083866403599356e-01, 9.389637014355744e-04, 1.877927402871148e-03, 9.389637014355744e-04, 1.815557538130578e-01, 3.631115076261158e-01, 1.815557538130578e-01, 1.447510906198776e-01, 2.895021812397551e-01, 1.447510906198776e-01, 1.447510906198778e-01, 2.895021812397556e-01, 1.447510906198778e-01, 8.904619316961414e-03, 1.780923863322236e-02, 8.904619316961414e-03, 1.047301572896181e-02, 2.094603145755870e-02, 1.047301572896181e-02, 5.294376191530527e-02, 1.058875238306064e-01, 5.294376191530527e-02, 3.164324108736641e-03, 6.328648217783347e-03, 3.164324108736641e-03, 4.642176460447066e-03, 9.284352922054217e-03, 4.642176460447066e-03, 4.642176460675215e-03, 9.284352921806719e-03, 4.642176460675215e-03, 2.723931258277741e-07, 5.447862516555482e-07, 2.723931258277741e-07, 2.740312684553548e-07, 5.480625369107096e-07, 2.740312684553548e-07, 2.724583699956303e-07, 5.449167399912604e-07, 2.724583699956303e-07, 2.739043816819110e-07, 5.478087633638220e-07, 2.739043816819110e-07, 2.732265707906830e-07, 5.464531415813659e-07, 2.732265707906830e-07, 2.732265707906830e-07, 5.464531415813659e-07, 2.732265707906830e-07, 6.898142747625654e-06, 1.379628549525131e-05, 6.898142747625654e-06, 6.848793679429743e-06, 1.369758735885949e-05, 6.848793679429743e-06, 6.634947761573778e-06, 1.326989552314756e-05, 6.634947761573778e-06, 6.594051363892801e-06, 1.318810272778560e-05, 6.594051363892801e-06, 7.001487415326775e-06, 1.400297483065355e-05, 7.001487415326775e-06, 7.001487415326775e-06, 1.400297483065355e-05, 7.001487415326775e-06, 5.083096478940036e-03, 1.016619295788007e-02, 5.083096478940036e-03, 5.627304405092634e-03, 1.125460881018527e-02, 5.627304405092634e-03, 6.693404030468149e-03, 1.338680806093630e-02, 6.693404030468149e-03, 8.747211627636847e-03, 1.749442325527369e-02, 8.747211627636847e-03, 5.007189614859978e-03, 1.001437922971996e-02, 5.007189614859978e-03, 5.007189614859979e-03, 1.001437922971996e-02, 5.007189614859979e-03, 1.181711895693224e-01, 2.363423791386441e-01, 1.181711895693224e-01, 8.611479887624701e-02, 1.722295977524940e-01, 8.611479887624701e-02, 1.214482664360633e-01, 2.428965328721264e-01, 1.214482664360633e-01, 4.971015166385211e-05, 9.942030332770422e-05, 4.971015166385211e-05, 2.086245833484957e-01, 4.172491666969919e-01, 2.086245833484957e-01, 2.086245833484957e-01, 4.172491666969919e-01, 2.086245833484957e-01, 3.085560648214715e-03, 6.171121297633935e-03, 3.085560648214715e-03, 3.890460371815105e-03, 7.780920747421459e-03, 3.890460371815105e-03, 3.875139528097932e-02, 7.750279055850653e-02, 3.875139528097932e-02, 1.247258801487732e-01, 2.494517602975471e-01, 1.247258801487732e-01, 1.483127080600772e-02, 2.966254161607970e-02, 1.483127080600772e-02, 1.483127080603558e-02, 2.966254161369759e-02, 1.483127080603558e-02, 8.963295006424333e-03, 1.792659001284867e-02, 8.963295006424333e-03, 8.074431909809133e-03, 1.614886381961827e-02, 8.074431909809133e-03, 8.364646383821431e-03, 1.672929276764286e-02, 8.364646383821431e-03, 8.622745081425486e-03, 1.724549016285097e-02, 8.622745081425486e-03, 8.491639299971722e-03, 1.698327859994344e-02, 8.491639299971722e-03, 8.491639299971722e-03, 1.698327859994344e-02, 8.491639299971722e-03, 1.042971637725455e-02, 2.085943275450910e-02, 1.042971637725455e-02, 7.514569388465980e-03, 1.502913877693196e-02, 7.514569388465980e-03, 8.073436587718204e-03, 1.614687317543641e-02, 8.073436587718204e-03, 8.820221261136149e-03, 1.764044252227230e-02, 8.820221261136149e-03, 8.438605267495583e-03, 1.687721053499117e-02, 8.438605267495583e-03, 8.438605267495583e-03, 1.687721053499117e-02, 8.438605267495583e-03, 4.515897562955788e-03, 9.031795125911575e-03, 4.515897562955788e-03, 5.774078072165894e-02, 1.154815614433179e-01, 5.774078072165894e-02, 4.668277165511053e-02, 9.336554331022104e-02, 4.668277165511053e-02, 3.284809061161224e-02, 6.569618122322450e-02, 3.284809061161224e-02, 4.103861373294816e-02, 8.207722746589632e-02, 4.103861373294816e-02, 4.103861373294816e-02, 8.207722746589632e-02, 4.103861373294816e-02, 1.076243868680764e-02, 2.152487737361528e-02, 1.076243868680764e-02, 4.360736062057004e-02, 8.721472124114714e-02, 4.360736062057004e-02, 6.592434915172000e-02, 1.318486983034387e-01, 6.592434915172000e-02, 4.825147598943576e-02, 9.650295197887153e-02, 4.825147598943576e-02, 2.082994593517647e-01, 4.165989187035299e-01, 2.082994593517647e-01, 2.082994593517651e-01, 4.165989187035304e-01, 2.082994593517651e-01, 1.109608797421714e-02, 2.219217594856401e-02, 1.109608797421714e-02, 4.220014816856898e-03, 8.440029620734958e-03, 4.220014816856898e-03, 5.281187564266342e-03, 1.056237513262514e-02, 5.281187564266342e-03, 1.935437265286261e-01, 3.870874530572532e-01, 1.935437265286261e-01, 1.893087294605147e-02, 3.786174589046336e-02, 1.893087294605147e-02, 1.893087294935393e-02, 3.786174589577986e-02, 1.893087294935393e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
