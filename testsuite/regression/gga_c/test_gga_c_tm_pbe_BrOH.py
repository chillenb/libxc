
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tm_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.790782438493089e-02, -3.790856313954270e-02, -3.791078567304151e-02, -3.789871087148904e-02, -3.790822294882901e-02, -3.790822294882901e-02, -3.209743989564025e-02, -3.210205560001174e-02, -3.222903058163930e-02, -3.200987975634603e-02, -3.209980023084084e-02, -3.209980023084084e-02, -2.382943438080825e-02, -2.353220405153143e-02, -1.634749782272242e-02, -1.665250704016568e-02, -2.372214268799314e-02, -2.372214268799314e-02, -9.275244272804921e-03, -1.024514400593042e-02, -3.206400054799986e-02, -1.889620372910475e-03, -9.571608019357823e-03, -9.571608019357823e-03, -1.535185158452205e-07, -1.881132377784734e-07, -2.681184458320807e-05, -4.229527267228678e-09, -1.868325629789013e-07, -1.868325629789013e-07, -4.999100058984456e-02, -5.023320881457532e-02, -5.001513294089305e-02, -5.020345832878624e-02, -5.011580586214047e-02, -5.011580586214047e-02, -1.253877321572071e-02, -1.292622732061967e-02, -1.199272699688240e-02, -1.228584719758379e-02, -1.355359389358881e-02, -1.355359389358881e-02, -4.714100145448429e-02, -6.989920168579818e-02, -4.546015366505336e-02, -6.619223221119394e-02, -5.100174382096078e-02, -5.100174382096078e-02, -4.459782266831214e-04, -3.310708021839764e-03, -5.016459850879316e-04, -8.261653648959218e-02, -1.033181060288043e-03, -1.033181060288043e-03, -3.815859963851481e-09, -6.970769883294116e-09, -5.436561712527799e-09, -1.059875482071111e-04, -6.783298953840660e-09, -6.783298953840660e-09, -6.639737767208787e-02, -6.855218173100903e-02, -6.816139112920253e-02, -6.754951493301463e-02, -6.788691971087997e-02, -6.788691971087997e-02, -6.492668789587355e-02, -3.175653003138561e-02, -4.399941586040584e-02, -5.822127641843555e-02, -5.095224036066052e-02, -5.095224036066053e-02, -7.075517155729295e-02, -6.096360056013177e-03, -1.142713266499042e-02, -2.892953808247677e-02, -1.894826716250601e-02, -1.894826716250600e-02, -3.040457842087189e-02, -1.634376184316497e-05, -5.701354061207809e-05, -3.888999333155920e-02, -3.305796524470405e-04, -3.305796524470475e-04, -2.279602988076227e-07, -3.049689367257511e-11, -5.263522831579424e-10, -3.439577988511352e-04, -4.749692515601887e-09, -4.749692517773067e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tm_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.140774475880634e-01, -1.140785471944717e-01, -1.140818534080831e-01, -1.140638793590168e-01, -1.140780408517634e-01, -1.140780408517634e-01, -1.060161046833892e-01, -1.060242317668307e-01, -1.062474011100406e-01, -1.058615439898084e-01, -1.060202556057122e-01, -1.060202556057122e-01, -9.152820851319243e-02, -9.084958168906092e-02, -7.195028384432470e-02, -7.285671603106911e-02, -9.128407598476027e-02, -9.128407598476027e-02, -4.801841898096084e-02, -5.188248713585486e-02, -1.078339586602329e-01, -1.156801869240184e-02, -4.921970296398768e-02, -4.921970296398768e-02, -9.894425021968998e-07, -1.211704511188028e-06, -1.699311463720985e-04, -2.750125721880602e-08, -1.203658762644135e-06, -1.203658762644135e-06, -1.320301900089727e-01, -1.323446362050217e-01, -1.320615509764222e-01, -1.323060503987021e-01, -1.321923122111491e-01, -1.321923122111491e-01, -5.880777203126352e-02, -6.013259476560578e-02, -5.689934869855229e-02, -5.792784235777199e-02, -6.223577704327291e-02, -6.223577704327291e-02, -1.241231400681417e-01, -8.051503113727329e-02, -1.223396854021608e-01, -9.311064174107453e-02, -1.260304366042829e-01, -1.260304366042829e-01, -2.804597102664688e-03, -1.955188896031619e-02, -3.155163743635160e-03, -1.583406373728971e-01, -6.440218300887164e-03, -6.440218300887164e-03, -2.482188788499300e-08, -4.527517236313004e-08, -3.543219175096647e-08, -6.711023221632271e-04, -4.410905520202126e-08, -4.410905519901442e-08, -6.999225525093561e-02, -7.460079034011652e-02, -7.115483476519852e-02, -6.992370270869956e-02, -7.038745653588696e-02, -7.038745653588696e-02, -6.974276397657322e-02, -1.067178261890441e-01, -1.207106378101462e-01, -1.161886720209031e-01, -1.224664952687084e-01, -1.224664952687085e-01, -8.644612333798757e-02, -3.374277883701832e-02, -5.618542880843293e-02, -1.006239016929974e-01, -7.972482664992103e-02, -7.972482664992103e-02, -1.041912129707156e-01, -1.035488155366919e-04, -3.607694571975018e-04, -1.090070571758920e-01, -2.089179175792912e-03, -2.089179175792876e-03, -1.465842601049994e-06, -2.004832312245167e-10, -3.442309216899034e-09, -2.176544275353269e-03, -3.094285484977700e-08, -3.094285485541141e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tm_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.936595732011713e-10, 1.936631471995143e-10, 1.936687799517837e-10, 1.936104710355763e-10, 1.936615441900727e-10, 1.936615441900727e-10, 1.200027476331901e-06, 1.200269801502690e-06, 1.206701010093515e-06, 1.194364193758530e-06, 1.200126240964214e-06, 1.200126240964214e-06, 2.375698150624459e-03, 2.346961820858263e-03, 1.629881014107426e-03, 1.609653712764496e-03, 2.365382488105747e-03, 2.365382488105747e-03, 3.125458833702684e-01, 3.358157171550947e-01, 1.508419642990983e-03, 1.502165706748009e-01, 3.200624517884967e-01, 3.200624517884967e-01, 3.664038353753867e-02, 3.914934370440146e-02, 5.773142104247524e-02, 7.646256129685550e-03, 4.089553263855700e-02, 4.089553263855700e-02, 3.366109992271176e-07, 3.392491124783440e-07, 3.368714396915144e-07, 3.389225255410378e-07, 3.379705709019012e-07, 3.379705709019012e-07, 5.437625754846359e-06, 5.479273341816037e-06, 5.185610671225359e-06, 5.219202082178379e-06, 5.808422392453245e-06, 5.808422392453245e-06, 1.150793054163756e-02, 1.118244628835363e-03, 1.397727234176430e-02, 8.373158633823839e-03, 1.062737923618829e-02, 1.062737923618829e-02, 7.749677562300962e-02, 7.096055232974352e-02, 9.824529216151454e-02, 1.096135971084453e-04, 1.345755475108091e-01, 1.345755475108091e-01, 7.913875121487711e-03, 9.700060123825422e-03, 3.039612598705539e-02, 8.939104372783083e-02, 1.516595481467820e-02, 1.516595481221269e-02, -8.382593832444340e-03, -1.236548942494089e-03, -4.210996714665283e-03, -6.231375470941423e-03, -5.258765954971547e-03, -5.258765954971547e-03, -1.052444550611979e-02, 1.334997157537361e-02, 1.666684127456269e-02, 1.712115576676163e-02, 1.786974057682847e-02, 1.786974057682847e-02, 2.368672081645840e-03, 5.701645941594027e-02, 6.005172090675721e-02, 6.366844195499820e-02, 6.578483611374725e-02, 6.578483611374734e-02, 2.045482176835503e-02, 4.006948481764480e-02, 5.914864173785647e-02, 1.154208117532084e-01, 1.353518931083285e-01, 1.353518931083306e-01, 2.933477315859031e-02, 2.707100389155737e-03, 6.327531017552649e-03, 1.802388631542849e-01, 2.090132173261999e-02, 2.090132173302519e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
