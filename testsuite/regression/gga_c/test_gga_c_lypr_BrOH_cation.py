
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lypr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.344911074363446e-02, -6.344920396762983e-02, -6.344947668546140e-02, -6.344809254275825e-02, -6.344883794798477e-02, -6.344883794798477e-02, -5.521722634853251e-02, -5.521822513429950e-02, -5.524148451791486e-02, -5.520248603968609e-02, -5.521858928779332e-02, -5.521858928779332e-02, -3.051229615686227e-02, -3.039355027965749e-02, -2.712773502082901e-02, -2.740731661914979e-02, -2.662065452952920e-02, -2.662065452952920e-02, -1.104953136032609e-02, -1.125072999424380e-02, -3.378894088223627e-02, -9.260318640674989e-03, -4.609041452301469e-03, -4.609041452301467e-03, -4.887412974014329e-24, -4.031098915070064e-22, -5.738616936361241e-04, -5.745997610387304e-63, -6.896600573264687e-42, -6.896600573264688e-42, -6.004515903855834e-02, -6.006547146877686e-02, -6.004600649216052e-02, -6.006394136195228e-02, -6.005550760276496e-02, -6.005550760276496e-02, -4.229745406196470e-02, -4.267442080251928e-02, -4.155237788619323e-02, -4.189885602889619e-02, -4.284986600970907e-02, -4.284986600970907e-02, -3.211777363925417e-02, -3.651195051587593e-02, -3.018031083964933e-02, -3.379836721579026e-02, -3.270657103876436e-02, -3.270657103876436e-02, -6.434197355103470e-03, -9.154826153389259e-03, -5.695094823023690e-03, -5.351751764951499e-02, -7.823032450640683e-03, -7.823032450640683e-03, -2.006852626251241e-102, -1.157218971734448e-65, -8.580318556922708e-109, -2.651907249496062e-03, -1.315674613933856e-76, -1.315674613933856e-76, -3.574705516503304e-02, -3.499522812417698e-02, -3.526070580179441e-02, -3.547947733364094e-02, -3.537018401515343e-02, -3.537018401515343e-02, -3.540727268229269e-02, -2.594381871035772e-02, -2.902356237931493e-02, -3.181132580282761e-02, -3.044787101609446e-02, -3.044787101609446e-02, -3.727767532529006e-02, -9.490780681742960e-03, -1.221075825772029e-02, -2.035694071450009e-02, -1.606318120445337e-02, -1.606318120445338e-02, -2.456032561225567e-02, -4.778691775939481e-04, -1.483229361294878e-03, -2.143052121939553e-02, -4.364822658666143e-03, -4.364822658666144e-03, -3.694760707463688e-14, 0.000000000000000e+00, -1.344040571612207e-197, -3.894261540112256e-03, -1.311936900641040e-88, -1.311936900640651e-88]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lypr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.194610702461693e-02, -7.194630491029613e-02, -7.194576823503000e-02, -7.194634797807101e-02, -7.194625056126520e-02, -7.194503257207081e-02, -7.194628290786034e-02, -7.194939032628901e-02, -7.194297552514475e-02, -7.195032901778942e-02, -7.194297552514475e-02, -7.195032901778942e-02, -7.062226418914584e-02, -7.059236092860671e-02, -7.062144077234954e-02, -7.058985006624839e-02, -7.058501373104488e-02, -7.054946808928407e-02, -7.065420884826348e-02, -7.061546260304737e-02, -7.067813447456464e-02, -7.053279582778382e-02, -7.067813447456464e-02, -7.053279582778382e-02, -5.806660926224529e-02, -5.655337530230667e-02, -5.837165472129568e-02, -5.650945188211059e-02, -5.973675521373488e-02, -6.256008744119117e-02, -6.158477584509556e-02, -6.066845825646329e-02, -4.888881060423383e-02, -7.671644431049483e-02, -4.888881060423383e-02, -7.671644431049483e-02, -2.068004743330237e-02, -1.783479025786432e-02, -2.128462083631039e-02, -1.799554541856022e-02, -6.414788617764845e-02, -5.496220932472655e-02, -1.391375423512903e-02, -1.312218184681289e-02, -3.053940882627669e-03, -3.465819384582516e-02, -3.053940882627667e-03, -3.465819384582516e-02, -1.534732429623598e-22, -1.516823238510687e-22, -1.151025135873756e-20, -1.134259380972290e-20, -1.479152549904047e-03, -1.290655441916837e-03, -5.183097078046433e-61, -5.188892644443544e-61, -3.927566496756523e-40, -4.289100721193769e-40, -3.927566496756524e-40, -4.289100721193770e-40, -6.822877951850263e-02, -6.827746960225969e-02, -6.819394185759707e-02, -6.824759976646845e-02, -6.822582101278658e-02, -6.827776511705448e-02, -6.819876791058921e-02, -6.824768205025558e-02, -6.821018665223097e-02, -6.826307615898575e-02, -6.821018665223097e-02, -6.826307615898575e-02, -7.986432972888662e-02, -7.987920167791755e-02, -7.938622302853791e-02, -7.947670794288569e-02, -8.168453852346061e-02, -8.029639393703054e-02, -8.126683387213074e-02, -7.989466343391928e-02, -7.761366061089227e-02, -8.062798054970713e-02, -7.761366061089227e-02, -8.062798054970713e-02, -4.812482409153631e-02, -4.848937608828043e-02, -4.568541175429774e-02, -4.555349240706699e-02, -5.025825729674191e-02, -4.445062306344613e-02, -4.621403807303503e-02, -4.154045029921469e-02, -4.423179029180738e-02, -5.203820484763258e-02, -4.423179029180739e-02, -5.203820484763258e-02, -9.768558944744245e-03, -9.401221872547818e-03, -1.966981636360407e-02, -1.933462388132321e-02, -9.688968264125072e-03, -7.891938955465954e-03, -6.025408961712640e-02, -6.032070954612603e-02, -1.265543824633020e-02, -9.902329314439951e-03, -1.265543824633020e-02, -9.902329314439951e-03, -3.022338333354406e-100, -3.017693175190220e-100, -1.092503291462535e-63, -1.091459938290770e-63, -1.376271122585568e-106, -1.373303608294114e-106, -4.781862313143892e-03, -4.684321708440730e-03, -1.480116223841471e-74, -1.451118654702169e-74, -1.480116223841471e-74, -1.451118654702168e-74, -4.337667956926706e-02, -4.279074879813875e-02, -4.424353524888978e-02, -4.363640062544566e-02, -4.393989496262773e-02, -4.333573745064127e-02, -4.368292234175192e-02, -4.309375580070073e-02, -4.381115757498059e-02, -4.321473082677682e-02, -4.381115757498059e-02, -4.321473082677682e-02, -4.252961434274204e-02, -4.204498246940504e-02, -4.900176573018321e-02, -4.827514814562603e-02, -4.689160787936427e-02, -4.613713845496091e-02, -4.486168942554367e-02, -4.432157737682198e-02, -4.579435437321509e-02, -4.522337624066280e-02, -4.579435437321509e-02, -4.522337624066280e-02, -4.683972902732284e-02, -4.649009184484429e-02, -2.850920195633799e-02, -2.802609469017509e-02, -3.493594623754149e-02, -3.383632603541728e-02, -3.911091911903251e-02, -3.840474260603229e-02, -3.705084240252955e-02, -3.702785706077114e-02, -3.705084240252956e-02, -3.702785706077114e-02, -4.696888667400957e-02, -4.583266006960209e-02, -1.197940730943911e-03, -1.178387968328577e-03, -3.120062949392238e-03, -2.826558354226956e-03, -3.672085156210417e-02, -3.479727297962725e-02, -7.836476386111523e-03, -6.405684720607209e-03, -7.836476386111523e-03, -6.405684720607212e-03, -6.130202636785486e-13, -6.051104162893520e-13, 0.000000000000000e+00, 0.000000000000000e+00, -3.982729342301742e-195, -3.977730061347215e-195, -6.643937147346119e-03, -6.264765511724514e-03, -1.713437407844961e-86, -1.688239233730135e-86, -1.713437407844377e-86, -1.688239233729559e-86]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lypr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lypr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.278358317737615e-11, 1.553305487658505e-11, 3.278471793796886e-11, 3.278273561401082e-11, 1.553283135028069e-11, 3.278464908975795e-11, 3.278257163632314e-11, 1.553176865310277e-11, 3.278045628413093e-11, 3.278497769257168e-11, 1.553509596308293e-11, 3.279169105299592e-11, 3.277916474629586e-11, 1.553336239584837e-11, 3.279039638631582e-11, 3.277916474629586e-11, 1.553336239584837e-11, 3.279039638631582e-11, 2.968169358845787e-07, 2.274454170570171e-07, 2.969046200837762e-07, 2.968075009089904e-07, 2.274427734693724e-07, 2.969076260403908e-07, 2.968129186615830e-07, 2.273516645659458e-07, 2.966806641935961e-07, 2.967017272286561e-07, 2.272775325843600e-07, 2.966115949143756e-07, 2.980233653839920e-07, 2.274140292156520e-07, 2.956195316955382e-07, 2.980233653839920e-07, 2.274140292156520e-07, 2.956195316955382e-07, 9.246118890633530e-04, 1.253012597268392e-03, 8.866287001772769e-04, 9.336006749826304e-04, 1.259783047820955e-03, 8.867522214064335e-04, 9.907729169169311e-04, 1.433882889658570e-03, 1.064633090512531e-03, 1.001216672231362e-03, 1.377643147256728e-03, 9.788094883061555e-04, 6.750990702944329e-04, 1.445590650356177e-03, 1.353731518122488e-03, 6.750990702944329e-04, 1.445590650356177e-03, 1.353731518122488e-03, 6.685521658470438e-02, 1.166878787822668e-01, 6.051579249345509e-02, 6.701686095610145e-02, 1.159042930603910e-01, 5.968208077575635e-02, 5.368791457230122e-04, 5.988979894638686e-04, 3.633942554574242e-04, 4.808402477987449e-02, 8.956224868039743e-02, 4.700567873713112e-02, 1.917971626634013e-02, 1.037629132647009e-01, 7.524264021234515e-02, 1.917971626634014e-02, 1.037629132647009e-01, 7.524264021234514e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.457335099417643e-18, 4.913552626449904e-18, 2.485595242825420e-18, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.900729166965008e-08, 2.599960370436855e-08, 3.922718246260545e-08, 3.896843501134812e-08, 2.597405752361372e-08, 3.919392577500010e-08, 3.900345463514885e-08, 2.599833336852092e-08, 3.922742774674397e-08, 3.897339441222748e-08, 2.597577597352108e-08, 3.919382474884745e-08, 3.898711841094169e-08, 2.598670329591689e-08, 3.921093854722589e-08, 3.898711841094169e-08, 2.598670329591689e-08, 3.921093854722589e-08, 5.254138871791044e-06, 5.010704833877338e-06, 5.259000184532493e-06, 5.058390552775117e-06, 4.820517799606957e-06, 5.083715404579094e-06, 5.482460749273550e-06, 5.155586056564349e-06, 5.312093638239374e-06, 5.313824047829451e-06, 4.981347571827675e-06, 5.141531398137753e-06, 4.884196375342862e-06, 4.840633670189029e-06, 5.293842042942842e-06, 4.884196375342862e-06, 4.840633670189029e-06, 5.293842042942842e-06, 1.623623152478456e-03, 2.364129080353365e-03, 1.665639995906553e-03, 1.141743726075829e-03, 1.599485950508044e-03, 1.136453373161107e-03, 2.691969269054727e-03, 3.417321850137400e-03, 1.936900106688951e-03, 2.253898413397575e-03, 2.855936827683047e-03, 1.658259210346966e-03, 1.165996697201825e-03, 2.242001351925763e-03, 1.927684945143379e-03, 1.165996697201827e-03, 2.242001351925763e-03, 1.927684945143380e-03, 5.667502342014402e-03, 1.091886218764244e-02, 5.626686903327763e-03, 6.412094949951229e-02, 1.165733205074768e-01, 6.329122011691216e-02, 2.432758419278582e-03, 4.650256990371399e-03, 2.354856356318498e-03, 5.762314429401414e-06, 5.556220701467168e-06, 5.809569043692839e-06, 2.042800600609383e-02, 3.793891664869414e-02, 1.916435766069844e-02, 2.042800600609383e-02, 3.793891664869414e-02, 1.916435766069844e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.238300077454187e-07, 1.425823999017654e-06, 7.233841420370574e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.640078468351397e-03, 2.311382328890834e-03, 1.580001753341270e-03, 1.682240997445907e-03, 2.374344291788817e-03, 1.620270969070003e-03, 1.667359361210656e-03, 2.351966707598879e-03, 1.605868177715059e-03, 1.654946127260975e-03, 2.333713395574444e-03, 1.594386337582179e-03, 1.661142835779060e-03, 2.342829315239698e-03, 1.600124480906917e-03, 1.661142835779060e-03, 2.342829315239698e-03, 1.600124480906917e-03, 1.844451880485840e-03, 2.626955237551396e-03, 1.787659942648523e-03, 3.551678492808777e-03, 5.254026572081650e-03, 3.424883136028135e-03, 2.928847506037413e-03, 4.276723213588743e-03, 2.817815460530572e-03, 2.422276596531465e-03, 3.508359695100062e-03, 2.346682191514718e-03, 2.663989566744513e-03, 3.878797619226277e-03, 2.577723662219704e-03, 2.663989566744513e-03, 3.878797619226277e-03, 2.577723662219704e-03, 9.290694728860592e-04, 1.275802318701210e-03, 9.132087305335694e-04, 4.951904964772581e-02, 8.689665236243441e-02, 4.849186425683934e-02, 3.300911843295493e-02, 5.557856912976124e-02, 3.154346941221147e-02, 1.371147035213995e-02, 2.201561330726190e-02, 1.325477780069213e-02, 2.150357372971754e-02, 3.613648850159216e-02, 2.154394922482379e-02, 2.150357372971758e-02, 3.613648850159217e-02, 2.154394922482379e-02, 5.035261779917811e-03, 7.539788238843107e-03, 4.771247379342140e-03, 4.693778648160616e-20, 9.342423185197651e-20, 4.701103141005399e-20, 1.234517325617090e-10, 2.447499672239381e-10, 1.237421261748238e-10, 1.600335826967707e-02, 2.522348256585123e-02, 1.464600801427475e-02, 2.406124860145864e-04, 4.657673547256565e-04, 2.356711555739925e-04, 2.406124860145875e-04, 4.657673547256587e-04, 2.356711555739935e-04, 9.733093223072557e-322, 1.109078561784430e-319, 9.634280093904308e-322, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.120174206326117e-05, 1.391912952466879e-04, 7.086044570437703e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
