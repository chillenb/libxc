
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zvpbesol_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbesol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.169422397567997e-02, -6.169497598383701e-02, -6.169724596781555e-02, -6.168495414794766e-02, -6.169462962686616e-02, -6.169462962686616e-02, -5.081715788541569e-02, -5.082132276257616e-02, -5.093600616744037e-02, -5.073899331425568e-02, -5.081930852265251e-02, -5.081930852265251e-02, -3.286839776658677e-02, -3.264832340008435e-02, -2.681247138377560e-02, -2.712889390495647e-02, -3.278908345835364e-02, -3.278908345835364e-02, -1.294825487679810e-02, -1.375786044784627e-02, -3.999419512398350e-02, -4.131343666004922e-03, -1.319897987544516e-02, -1.319897987544516e-02, -2.606127279321778e-07, -3.221125857619806e-07, -6.474778138431880e-05, -6.429664597081293e-09, -3.192118250171439e-07, -3.192118250171439e-07, -6.822014320089634e-02, -6.841731875195285e-02, -6.823981237231422e-02, -6.839312674581818e-02, -6.832178451660646e-02, -6.832178451660646e-02, -2.831007319406499e-02, -2.881954980602294e-02, -2.760385693815678e-02, -2.799819427525098e-02, -2.959551137593278e-02, -2.959551137593278e-02, -4.454986912804402e-02, -5.891735356472819e-02, -4.312392903232955e-02, -5.432526721897458e-02, -4.680393838378878e-02, -4.680393838378878e-02, -1.174628756758349e-03, -6.980486966438717e-03, -1.286848529218639e-03, -7.720475311974907e-02, -2.458351482030577e-03, -2.458351482030577e-03, -5.775863009398793e-09, -1.072431618392992e-08, -8.079566571561075e-09, -2.690674171949945e-04, -1.031069366740213e-08, -1.031069366740213e-08, -6.234020427638413e-02, -5.859073403838237e-02, -5.988838537069009e-02, -6.092654226392665e-02, -6.040360259459602e-02, -6.040360259459602e-02, -6.224981096559286e-02, -3.518521517336732e-02, -4.186820190208455e-02, -4.894883142194612e-02, -4.530985374808368e-02, -4.530985374808368e-02, -5.920292627080348e-02, -1.118978744220149e-02, -1.703816000155452e-02, -3.002207894893489e-02, -2.323955802161726e-02, -2.323955802161725e-02, -3.338939438113455e-02, -3.909912720079277e-05, -1.451007077671471e-04, -3.422188804565285e-02, -8.284433759155693e-04, -8.284433759155735e-04, -3.997793241438592e-07, -4.219163856015341e-11, -7.574677606316174e-10, -8.380848073683100e-04, -7.085610610616549e-09, -7.085610614519676e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zvpbesol_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbesol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.393492393429843e-01, -1.393500460635462e-01, -1.393524945741771e-01, -1.393393077052500e-01, -1.393496743960354e-01, -1.393496743960354e-01, -1.189800143899041e-01, -1.189838159770778e-01, -1.190886848734033e-01, -1.189102027099570e-01, -1.189820154895825e-01, -1.189820154895825e-01, -8.366524362122170e-02, -8.347744780188966e-02, -7.734737828734781e-02, -7.781046080757914e-02, -8.359783799873910e-02, -8.359783799873910e-02, -4.493117088373923e-02, -4.646160691620904e-02, -9.118256375075204e-02, -1.971907406766534e-02, -4.541511455780561e-02, -4.541511455780561e-02, -1.689643910851846e-06, -2.086944661108199e-06, -4.020255047337708e-04, -4.202995748258703e-08, -2.068349310136054e-06, -2.068349310136054e-06, -1.367307559344299e-01, -1.368658719617021e-01, -1.367442783518256e-01, -1.368493444884629e-01, -1.368004799557055e-01, -1.368004799557055e-01, -8.782623680797905e-02, -8.868554690118387e-02, -8.664455482035911e-02, -8.732698448837795e-02, -8.991915151989013e-02, -8.991915151989013e-02, -8.461261663642018e-02, -8.075223007001091e-02, -8.323884769422343e-02, -8.030278739375736e-02, -8.541008021810759e-02, -8.541008021810759e-02, -6.520024741462590e-03, -3.027224754798132e-02, -7.084697832984752e-03, -1.167008764580816e-01, -1.266362734199430e-02, -1.266362734199430e-02, -3.776692767271546e-08, -7.004257541687112e-08, -5.288075850476299e-08, -1.612118315996342e-03, -6.738700824814742e-08, -6.738700824719239e-08, -7.468315643813400e-02, -7.839925708632214e-02, -7.721911641679111e-02, -7.619479140906565e-02, -7.671971676715740e-02, -7.671971676715740e-02, -7.303999694471740e-02, -7.994426138069763e-02, -8.199213321212111e-02, -8.145793687922193e-02, -8.205613812069844e-02, -8.205613812069844e-02, -8.267130790975893e-02, -4.272150991872760e-02, -5.531326544318551e-02, -7.060487864226951e-02, -6.426788108229109e-02, -6.426788108229106e-02, -7.714537359944840e-02, -2.446704864981054e-04, -8.856331606072801e-04, -6.988501327585729e-02, -4.701910339147823e-03, -4.701910339147859e-03, -2.586931278007296e-06, -2.779869670397168e-10, -4.971886087396483e-09, -4.748307670555516e-03, -4.636725533865001e-08, -4.636725534476830e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zvpbesol_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbesol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.962248159229878e-10, 1.962276214419288e-10, 1.962309201833816e-10, 1.961851722087631e-10, 1.962263724959692e-10, 1.962263724959692e-10, 1.080186252658701e-06, 1.080343603115411e-06, 1.084463108840985e-06, 1.076269250809548e-06, 1.080244814090466e-06, 1.080244814090466e-06, 1.685331957355114e-03, 1.676221189788563e-03, 1.416239855472862e-03, 1.387326606605604e-03, 1.682088841007329e-03, 1.682088841007329e-03, 2.434453010096158e-01, 2.483694418972970e-01, 9.553720732317640e-04, 2.322429245592487e-01, 2.452326432269115e-01, 2.452326432269115e-01, 6.183830851469888e-02, 6.661154926767091e-02, 1.324091154040400e-01, 1.160884602345306e-02, 6.942859163319146e-02, 6.942859163319146e-02, 2.727924744585846e-07, 2.743818629641394e-07, 2.729492816139572e-07, 2.741850468817644e-07, 2.736125168144958e-07, 2.736125168144958e-07, 6.860884246539440e-06, 6.814646603302916e-06, 6.690069220019522e-06, 6.656269558508325e-06, 7.055315829806938e-06, 7.055315829806938e-06, 5.377740887989100e-03, 5.979248875578273e-03, 6.560503481447798e-03, 8.004313469011856e-03, 4.875859257584086e-03, 4.875859257584086e-03, 1.696538636448576e-01, 9.752711266686226e-02, 2.072527738502024e-01, 5.004036593191674e-05, 2.445433043291609e-01, 2.445433043291609e-01, 1.196403230625499e-02, 1.489966125055241e-02, 4.510249461011436e-02, 2.060298619789869e-01, 2.301513526532211e-02, 2.301513526421128e-02, 8.551065147769961e-03, 7.759058175200817e-03, 8.023967073142421e-03, 8.242926353569302e-03, 8.131881296138080e-03, 8.131881296138080e-03, 9.960801784089738e-03, 7.360919634778593e-03, 7.853568075380561e-03, 8.471111136830802e-03, 8.157129906885286e-03, 8.157129906885286e-03, 4.810439288408674e-03, 6.205598542910056e-02, 4.858500150076125e-02, 3.310015211574928e-02, 4.149508728515577e-02, 4.149508728515578e-02, 1.119431739359543e-02, 9.201773202887360e-02, 1.400454763023791e-01, 5.271736063803639e-02, 2.881722261686530e-01, 2.881722261686542e-01, 5.109953358324687e-02, 3.744521429580885e-03, 9.100698920984579e-03, 3.716807116827706e-01, 3.113558754342617e-02, 3.113558754371228e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
