
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_revtca_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.214786914887391e-02, -6.214839536956513e-02, -6.214989540467968e-02, -6.214208362131851e-02, -6.214629619743051e-02, -6.214629619743051e-02, -5.209078244820874e-02, -5.209473620701393e-02, -5.218630801696353e-02, -5.202799771147821e-02, -5.209561981179501e-02, -5.209561981179501e-02, -3.071718065498803e-02, -3.050455888380274e-02, -2.534395252916901e-02, -2.563519032578604e-02, -2.566825301839452e-02, -2.566825301839452e-02, -5.447889292414405e-03, -5.864475870910096e-03, -3.410373706272097e-02, -2.083584700196673e-03, -1.877163426134718e-03, -1.877163426134717e-03, -1.275679959089565e-07, -1.556513737577236e-07, -2.973490187364494e-05, -1.991521683659654e-08, -3.122219155256770e-08, -3.122219155256774e-08, -6.438891534210636e-02, -6.449949616422131e-02, -6.439348706665243e-02, -6.449111541932399e-02, -6.444524542389778e-02, -6.444524542389778e-02, -3.100511056823426e-02, -3.151079373311502e-02, -2.991663417068676e-02, -3.035537712687775e-02, -3.182569968762079e-02, -3.182569968762079e-02, -3.913048343576279e-02, -5.175633070694884e-02, -3.632111039586378e-02, -4.790124252643130e-02, -4.068052841639479e-02, -4.068052841639481e-02, -5.872893864637090e-04, -3.395337542965522e-03, -4.763339983772222e-04, -6.658652718988643e-02, -1.198368425408144e-03, -1.198368425408144e-03, -9.931630680818483e-09, -2.030073523800882e-08, -2.409555020140764e-08, -1.584604549936300e-04, -2.575987396184260e-08, -2.575987396184259e-08, -5.351184727369277e-02, -5.054262818673575e-02, -5.160169716915874e-02, -5.247094056431542e-02, -5.203777435064599e-02, -5.203777435064599e-02, -5.378137709626057e-02, -2.799805925651121e-02, -3.461802214391151e-02, -4.224400877238955e-02, -3.832437799662296e-02, -3.832437799662296e-02, -5.206891474105799e-02, -5.840222670734970e-03, -9.713553172010421e-03, -2.210653117218093e-02, -1.499668185369663e-02, -1.499668185369664e-02, -2.670832039860503e-02, -2.445512788690090e-05, -6.732957004199098e-05, -2.591586139525810e-02, -3.848512436483420e-04, -3.848512436483420e-04, -3.496107092194504e-07, -6.564134724940842e-10, -4.966593321600105e-09, -3.124959123010371e-04, -2.341885642019277e-08, -2.341885642019273e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_revtca_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.094993500783124e-01, -1.094995101352783e-01, -1.094990119255840e-01, -1.094992818256476e-01, -1.094984980104465e-01, -1.094981996084113e-01, -1.095020786109256e-01, -1.095030253165681e-01, -1.094994925179263e-01, -1.095010766604506e-01, -1.094994925179263e-01, -1.095010766604506e-01, -1.050211421556990e-01, -1.050225636255931e-01, -1.050208133589278e-01, -1.050224366517623e-01, -1.050172582681967e-01, -1.050151095404306e-01, -1.050273213074518e-01, -1.050258609543206e-01, -1.050412433882467e-01, -1.050022655757764e-01, -1.050412433882467e-01, -1.050022655757764e-01, -7.776630642455175e-02, -7.752321841078252e-02, -7.758791066372206e-02, -7.729138151141209e-02, -7.092067323201125e-02, -7.127130013059675e-02, -7.164343635798141e-02, -7.153247939182696e-02, -6.989522867573397e-02, -7.345416027183146e-02, -6.989522867573397e-02, -7.345416027183146e-02, -2.050703917902484e-02, -2.008276589233700e-02, -2.188759614602424e-02, -2.136498918354799e-02, -8.361160303244956e-02, -8.132195459624342e-02, -8.456661762886048e-03, -8.399398484111869e-03, -5.743025749451548e-03, -1.673146847852643e-02, -5.743025749451547e-03, -1.673146847852642e-02, -5.693499814503191e-07, -5.530702563474399e-07, -6.963807173149671e-07, -6.735616964035471e-07, -1.313451962781878e-04, -1.279741836834424e-04, -8.722590149173256e-08, -8.789778294111335e-08, -1.128541941580004e-07, -2.579939564736795e-07, -1.128541941580005e-07, -2.579939564736799e-07, -1.021449364465802e-01, -1.021757874121589e-01, -1.020446175239440e-01, -1.020763367657929e-01, -1.021405495221872e-01, -1.021719768698018e-01, -1.020525915466973e-01, -1.020835930569396e-01, -1.020938692417799e-01, -1.021253131193975e-01, -1.020938692417799e-01, -1.021253131193975e-01, -8.672153161913272e-02, -8.672466515891092e-02, -8.748551452388044e-02, -8.750266763491156e-02, -8.509020095562757e-02, -8.498679888623102e-02, -8.580161173524194e-02, -8.569231548782313e-02, -8.780127282128740e-02, -8.808071368124872e-02, -8.780127282128740e-02, -8.808071368124872e-02, -7.785447781543517e-02, -7.806196821133572e-02, -7.037136413580086e-02, -7.032438199075600e-02, -7.755550824190729e-02, -7.488631869809331e-02, -7.185924948932081e-02, -6.868397361400150e-02, -7.580469322686542e-02, -8.011209562645896e-02, -7.580469322686546e-02, -8.011209562645899e-02, -2.489971494416836e-03, -2.478810012158920e-03, -1.337431008545037e-02, -1.334049371090285e-02, -2.051109242780880e-03, -1.999405868021838e-03, -8.527556046131382e-02, -8.533540437730831e-02, -5.043762150235515e-03, -4.899318891811945e-03, -5.043762150235515e-03, -4.899318891811945e-03, -4.408351911323902e-08, -4.330320226356904e-08, -8.956260621505742e-08, -8.895079798838705e-08, -1.075173336793208e-07, -1.046361529627746e-07, -6.841747443645509e-04, -6.822310612547682e-04, -1.393395388737199e-07, -1.034853362552722e-07, -1.393395388737199e-07, -1.034853362552721e-07, -6.399643226391202e-02, -6.358347228906210e-02, -6.856971551359431e-02, -6.817571355890766e-02, -6.704380555325554e-02, -6.664169755212571e-02, -6.570196967715725e-02, -6.529683084386891e-02, -6.638034882296337e-02, -6.597673908929504e-02, -6.638034882296337e-02, -6.597673908929504e-02, -6.203684735951342e-02, -6.168184964853553e-02, -7.081334562044989e-02, -7.057121533653411e-02, -7.500478694781036e-02, -7.469811681456877e-02, -7.413775111117603e-02, -7.384113468221729e-02, -7.530653655020994e-02, -7.502228180510942e-02, -7.530653655020994e-02, -7.502228180510942e-02, -7.202252931488803e-02, -7.185296668617212e-02, -2.190904078547855e-02, -2.184157441779152e-02, -3.382498118882218e-02, -3.363084745997116e-02, -5.963573447208351e-02, -5.939183993165342e-02, -4.682790658686470e-02, -4.683848911497395e-02, -4.682790658686472e-02, -4.683848911497397e-02, -6.843097508097577e-02, -6.806416905395285e-02, -1.067630385393591e-04, -1.064293119462003e-04, -2.944707660218842e-04, -2.899718846673750e-04, -6.257373384608729e-02, -6.179552862322299e-02, -1.664080134148800e-03, -1.620512213198303e-03, -1.664080134148801e-03, -1.620512213198303e-03, -1.548406630253348e-06, -1.523074575006953e-06, -2.889090375890060e-09, -2.886093034236844e-09, -2.219515649434674e-08, -2.155023056479977e-08, -1.341726293731404e-03, -1.331551294988057e-03, -1.215783257584126e-07, -9.534757936161574e-08, -1.215783257584124e-07, -9.534757936161555e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_revtca_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.191333175379224e-10, 2.382666350758448e-10, 1.191333175379224e-10, 1.191331385762791e-10, 2.382662771525581e-10, 1.191331385762791e-10, 1.191294614483767e-10, 2.382589228967534e-10, 1.191294614483767e-10, 1.191321820913266e-10, 2.382643641826533e-10, 1.191321820913266e-10, 1.191311668536440e-10, 2.382623337072880e-10, 1.191311668536440e-10, 1.191311668536440e-10, 2.382623337072880e-10, 1.191311668536440e-10, 8.244521057581538e-07, 1.648904211516308e-06, 8.244521057581538e-07, 8.245429645353742e-07, 1.649085929070748e-06, 8.245429645353742e-07, 8.265450509522757e-07, 1.653090101904551e-06, 8.265450509522757e-07, 8.222973347002710e-07, 1.644594669400542e-06, 8.222973347002710e-07, 8.244631994049769e-07, 1.648926398809954e-06, 8.244631994049769e-07, 8.244631994049769e-07, 1.648926398809954e-06, 8.244631994049769e-07, 1.558163235065853e-03, 3.116326470131705e-03, 1.558163235065853e-03, 1.548572298301919e-03, 3.097144596603838e-03, 1.548572298301919e-03, 1.290503935024925e-03, 2.581007870049849e-03, 1.290503935024925e-03, 1.260861838835289e-03, 2.521723677670578e-03, 1.260861838835289e-03, 1.278590538882991e-03, 2.557181077765981e-03, 1.278590538882991e-03, 1.278590538882991e-03, 2.557181077765981e-03, 1.278590538882991e-03, 1.013382818640981e-01, 2.026765637281961e-01, 1.013382818640981e-01, 1.068054991616137e-01, 2.136109983232274e-01, 1.068054991616137e-01, 8.369246468141355e-04, 1.673849293628271e-03, 8.369246468141355e-04, 7.942438614388544e-02, 1.588487722877709e-01, 7.942438614388544e-02, 5.278403901518063e-02, 1.055680780303613e-01, 5.278403901518063e-02, 5.278403901518060e-02, 1.055680780303612e-01, 5.278403901518060e-02, 5.780246806754301e-02, 1.156049361350860e-01, 5.780246806754301e-02, 6.217891722671489e-02, 1.243578344534298e-01, 6.217891722671489e-02, 5.448427553969468e-02, 1.089685510793894e-01, 5.448427553969468e-02, 4.461778999292327e-02, 8.923557998584654e-02, 4.461778999292327e-02, 3.875770494247789e-02, 7.751540988495578e-02, 3.875770494247789e-02, 3.875770494247800e-02, 7.751540988495600e-02, 3.875770494247800e-02, 1.479308612170830e-07, 2.958617224341660e-07, 1.479308612170830e-07, 1.481229901582799e-07, 2.962459803165599e-07, 1.481229901582799e-07, 1.479376837893451e-07, 2.958753675786901e-07, 1.479376837893451e-07, 1.481073473066518e-07, 2.962146946133037e-07, 1.481073473066518e-07, 1.480295544009539e-07, 2.960591088019079e-07, 1.480295544009539e-07, 1.480295544009539e-07, 2.960591088019079e-07, 1.480295544009539e-07, 6.292589459990271e-06, 1.258517891998054e-05, 6.292589459990271e-06, 6.240868015023712e-06, 1.248173603004742e-05, 6.240868015023712e-06, 6.068224265694768e-06, 1.213644853138954e-05, 6.068224265694768e-06, 6.026267857419959e-06, 1.205253571483992e-05, 6.026267857419959e-06, 6.373685011869611e-06, 1.274737002373922e-05, 6.373685011869611e-06, 6.373685011869611e-06, 1.274737002373922e-05, 6.373685011869611e-06, 4.667941502161423e-03, 9.335883004322846e-03, 4.667941502161423e-03, 4.312135897344080e-03, 8.624271794688160e-03, 4.312135897344080e-03, 6.223328614645608e-03, 1.244665722929121e-02, 6.223328614645608e-03, 7.425269687759029e-03, 1.485053937551806e-02, 7.425269687759029e-03, 4.563222081704704e-03, 9.126444163409408e-03, 4.563222081704704e-03, 4.563222081704707e-03, 9.126444163409414e-03, 4.563222081704707e-03, 5.879428248439343e-02, 1.175885649687869e-01, 5.879428248439343e-02, 4.191514776032224e-02, 8.383029552064448e-02, 4.191514776032224e-02, 6.198644991919806e-02, 1.239728998383961e-01, 6.198644991919806e-02, 2.231263428758594e-05, 4.462526857517189e-05, 2.231263428758594e-05, 9.003504194138459e-02, 1.800700838827692e-01, 9.003504194138459e-02, 9.003504194138459e-02, 1.800700838827692e-01, 9.003504194138459e-02, 5.559863691261722e-02, 1.111972738252344e-01, 5.559863691261722e-02, 5.281371384023880e-02, 1.056274276804776e-01, 5.281371384023880e-02, 3.514482924245102e-01, 7.028965848490204e-01, 3.514482924245102e-01, 7.632847619140724e-02, 1.526569523828145e-01, 7.632847619140724e-02, 1.471317635985581e-01, 2.942635271971162e-01, 1.471317635985581e-01, 1.471317635985579e-01, 2.942635271971158e-01, 1.471317635985579e-01, 5.946894160085698e-03, 1.189378832017140e-02, 5.946894160085698e-03, 6.381974625678057e-03, 1.276394925135611e-02, 6.381974625678057e-03, 6.331032428112508e-03, 1.266206485622502e-02, 6.331032428112508e-03, 6.224165188125035e-03, 1.244833037625007e-02, 6.224165188125035e-03, 6.286981882697615e-03, 1.257396376539523e-02, 6.286981882697615e-03, 6.286981882697615e-03, 1.257396376539523e-02, 6.286981882697615e-03, 6.218539638917055e-03, 1.243707927783411e-02, 6.218539638917055e-03, 6.738533053863455e-03, 1.347706610772691e-02, 6.738533053863455e-03, 7.539388491407972e-03, 1.507877698281594e-02, 7.539388491407972e-03, 8.122587961234388e-03, 1.624517592246878e-02, 8.122587961234388e-03, 7.903687456444418e-03, 1.580737491288884e-02, 7.903687456444418e-03, 7.903687456444418e-03, 1.580737491288884e-02, 7.903687456444418e-03, 3.442146214141334e-03, 6.884292428282669e-03, 3.442146214141334e-03, 3.139795450221654e-02, 6.279590900443309e-02, 3.139795450221654e-02, 2.932308841563648e-02, 5.864617683127295e-02, 2.932308841563648e-02, 2.847810758387327e-02, 5.695621516774654e-02, 2.847810758387327e-02, 3.035915662804803e-02, 6.071831325609606e-02, 3.035915662804803e-02, 3.035915662804805e-02, 6.071831325609609e-02, 3.035915662804805e-02, 9.620347500813441e-03, 1.924069500162688e-02, 9.620347500813441e-03, 4.862056530298754e-02, 9.724113060597508e-02, 4.862056530298754e-02, 5.396501017780048e-02, 1.079300203556010e-01, 5.396501017780048e-02, 4.546741710135448e-02, 9.093483420270897e-02, 4.546741710135448e-02, 1.006502697927292e-01, 2.013005395854585e-01, 1.006502697927292e-01, 1.006502697927292e-01, 2.013005395854585e-01, 1.006502697927292e-01, 5.064030402767271e-02, 1.012806080553454e-01, 5.064030402767271e-02, 1.979966292546692e-01, 3.959932585093385e-01, 1.979966292546692e-01, 1.127052776814992e-01, 2.254105553629984e-01, 1.127052776814992e-01, 9.753241545991631e-02, 1.950648309198326e-01, 9.753241545991631e-02, 1.898123521445836e-01, 3.796247042891673e-01, 1.898123521445836e-01, 1.898123521445839e-01, 3.796247042891678e-01, 1.898123521445839e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
