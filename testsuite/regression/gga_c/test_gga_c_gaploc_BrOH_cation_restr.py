
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gaploc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.417643148190460e-02, -3.417732579403293e-02, -3.417986888367600e-02, -3.416659539519228e-02, -3.417375304932137e-02, -3.417375304932137e-02, -2.883799588659934e-02, -2.884506045680749e-02, -2.900921331559033e-02, -2.872393236531982e-02, -2.884632465672472e-02, -2.884632465672472e-02, -1.977030497666054e-02, -1.941799988657342e-02, -1.329550483918405e-02, -1.349288996320760e-02, -1.361071992397963e-02, -1.361071992397963e-02, -5.779656034893070e-03, -5.888323118934407e-03, -2.301735520601066e-02, -4.625052331131328e-03, -5.118320974687156e-03, -5.118320974687155e-03, -4.792461010214542e-05, -5.447805836111176e-05, -1.051109169034491e-03, -1.537630739967448e-05, -2.725657718375450e-05, -2.725657718375453e-05, -5.834584629251363e-02, -5.893960676231422e-02, -5.837016428057384e-02, -5.889424449632669e-02, -5.864726903443763e-02, -5.864726903443763e-02, -1.266858144116962e-02, -1.288806605982227e-02, -1.219874401902813e-02, -1.237601788199932e-02, -1.304010425361153e-02, -1.304010425361153e-02, -5.128438529285225e-02, -6.574703576434218e-02, -4.495851156314441e-02, -6.274800148542566e-02, -5.562052016305875e-02, -5.562052016305875e-02, -3.343565633449373e-03, -5.240286499623199e-03, -3.155825786625883e-03, -9.393637468543667e-02, -4.069412066981653e-03, -4.069412066981653e-03, -1.052143603112771e-05, -1.593505419628017e-05, -2.319646164350545e-05, -2.143149129993574e-03, -2.301258904994089e-05, -2.301258904994087e-05, -6.392462684362252e-02, -6.376129950371059e-02, -6.382829094032082e-02, -6.387374907135954e-02, -6.385172820601155e-02, -6.385172820601155e-02, -6.327446532068166e-02, -2.134864255331703e-02, -4.096504187157762e-02, -5.945834992106674e-02, -5.251150257429142e-02, -5.251150257429142e-02, -6.685887472127391e-02, -6.016869404502532e-03, -7.050169472236952e-03, -1.672449974263683e-02, -9.212071883772233e-03, -9.212071883772235e-03, -2.054691494779719e-02, -9.391876981595812e-04, -1.475338745532830e-03, -2.895009119197238e-02, -3.017217535720656e-03, -3.017217535720651e-03, -8.504942483114265e-05, -2.533528681022520e-06, -7.746716931648507e-06, -2.810899959775098e-03, -2.213854813639438e-05, -2.213854813639438e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gaploc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.145485982610336e-01, -1.145517945665966e-01, -1.145608328488108e-01, -1.145133940004893e-01, -1.145389823700831e-01, -1.145389823700831e-01, -1.192856838551982e-01, -1.193241750351244e-01, -1.202180919457652e-01, -1.186606510438497e-01, -1.193305560841003e-01, -1.193305560841003e-01, -9.691915594364506e-02, -9.450273314831650e-02, -5.056485322028028e-02, -5.190080880518026e-02, -5.279437586610176e-02, -5.279437586610176e-02, -9.493798046330177e-03, -9.841097561922559e-03, -1.156689763858222e-01, -7.826091957299802e-03, -8.236025501091957e-03, -8.236025501091941e-03, -1.735821748922129e-04, -1.970641458555248e-04, -3.302459836004826e-03, -5.607015550718003e-05, -9.910192762990563e-05, -9.910192762990560e-05, -2.491764052633275e-01, -2.513948606351206e-01, -2.492678826570659e-01, -2.512265295219450e-01, -2.503068621019467e-01, -2.503068621019467e-01, -3.745557566364725e-02, -3.857163251882866e-02, -3.505389842576363e-02, -3.594144097694513e-02, -3.937064430916789e-02, -3.937064430916789e-02, -1.655667881726383e-01, -7.421354609523710e-02, -1.754556430803784e-01, -7.233413860615501e-02, -1.458347559343336e-01, -1.458347559343336e-01, -6.952971854439983e-03, -8.634558582906647e-03, -6.790127978802175e-03, -1.064947118470964e-01, -7.370740757926414e-03, -7.370740757926414e-03, -3.840511026468066e-05, -5.809088057071507e-05, -8.419112157908562e-05, -5.513803226759413e-03, -8.363482630810434e-05, -8.363482630810424e-05, -7.183372304033728e-02, -7.198651291698302e-02, -7.182786712816017e-02, -7.180481171180504e-02, -7.180833161919520e-02, -7.180833161919520e-02, -7.114706233705467e-02, -1.126030435498869e-01, -1.758494583146938e-01, -9.394206169257195e-02, -1.427560251765980e-01, -1.427560251765980e-01, -7.570127212978274e-02, -9.968119692710014e-03, -1.397317022769677e-02, -8.668584516152242e-02, -2.902035944139769e-02, -2.902035944139770e-02, -1.086386780714368e-01, -3.008245571828591e-03, -4.058798421297747e-03, -1.451610153617497e-01, -6.635365997080238e-03, -6.635365997080230e-03, -3.062317762668402e-04, -9.265951037059882e-06, -2.828354161870036e-05, -6.431987003216429e-03, -8.044731296853428e-05, -8.044731296853437e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gaploc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.032284017779906e-10, 2.032375128795066e-10, 2.032578517419422e-10, 2.031227548409705e-10, 2.031963930831436e-10, 2.031963930831436e-10, 1.478881975138618e-06, 1.479691227048622e-06, 1.498355138572201e-06, 1.464559948066667e-06, 1.479654840631476e-06, 1.479654840631476e-06, 2.777552613560820e-03, 2.683919576653796e-03, 1.114425776560978e-03, 1.118027257060903e-03, 1.160476700232774e-03, 1.160476700232774e-03, 2.385277436708343e-02, 2.534300494656435e-02, 1.744312690126646e-03, 3.952306949878055e-02, 2.962096825877034e-02, 2.962096825877025e-02, 1.854268362159032e+01, 1.854824896583838e+01, 1.351127095611892e+00, 2.970852185937013e+01, 2.979717877045175e+01, 2.979717877045178e+01, 7.981219914353615e-07, 8.107964087194389e-07, 7.986359049744067e-07, 8.098237487543928e-07, 8.045657169057791e-07, 8.045657169057791e-07, 2.877299097534308e-06, 2.944569884305594e-06, 2.582446531719326e-06, 2.632640825123565e-06, 3.077330524645921e-06, 3.077330524645921e-06, 1.530162596156034e-02, 1.615075781712053e-04, 2.282802728527142e-02, 8.065324710317589e-04, 1.220634728975760e-02, 1.220634728975760e-02, 1.197765342517967e-01, 1.359116168543778e-02, 1.561948519429832e-01, 5.251185495179337e-06, 8.219975442819979e-02, 8.219975442819979e-02, 5.086978653412685e+01, 3.573581438831059e+01, 2.896891442353629e+02, 5.144862487117572e-01, 1.123681622130985e+02, 1.123681622130982e+02, 4.445403297357568e-06, 1.800452447316719e-04, 6.911477108639142e-05, 2.527033212468997e-05, 4.311102831430298e-05, 4.311102831430298e-05, 3.901453136703933e-07, 1.583016227170648e-02, 2.832116642304428e-02, 8.551734647500489e-03, 2.139769162811806e-02, 2.139769162811806e-02, 1.962072912886216e-04, 7.382268313757436e-03, 8.418877894833450e-03, 5.856166605447355e-02, 1.990240062647218e-02, 1.990240062647222e-02, 2.244698195486333e-02, 1.342869026646462e+00, 7.116022795546735e-01, 1.639014961395954e-01, 3.078530856532275e-01, 3.078530856532268e-01, 1.043018782573492e+01, 6.619133780579823e+02, 1.518717480021995e+02, 3.644931313722228e-01, 1.533090181439489e+02, 1.533090181439498e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
