
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86_ft_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.176769765820643e-01, -1.176762702631707e-01, -1.176745877269435e-01, -1.176850662511277e-01, -1.176793684619234e-01, -1.176793684619234e-01, -5.098106580809913e-02, -5.098401449785774e-02, -5.105288869449973e-02, -5.093645914082933e-02, -5.098496723782824e-02, -5.098496723782824e-02, -2.998008813583696e-02, -2.972619435033232e-02, -2.344572499214152e-02, -2.373633627386740e-02, -2.390617472156839e-02, -2.390617472156839e-02, -6.129655841106977e-03, -7.153607746997180e-03, -3.263783846633955e-02, 2.805536350654950e-03, -8.757377964860239e-04, -8.757377964860345e-04, -3.759235835858841e-03, -3.924301821341996e-03, -9.142971779547399e-03, -2.340082181931692e-03, -2.856761073786243e-03, -2.856761073786243e-03, -6.693423938104318e-02, -6.708208547608303e-02, -6.694033080009473e-02, -6.707083369210716e-02, -6.700934080450455e-02, -6.700934080450455e-02, -3.112301018694406e-02, -3.143275467840075e-02, -3.069120156177917e-02, -3.094542944379794e-02, -3.153363361612453e-02, -3.153363361612453e-02, -4.166438115237165e-02, -5.694141534862333e-02, -3.915784300334592e-02, -5.273544988767499e-02, -4.345864270043754e-02, -4.345864270043754e-02, 5.383870678284081e-03, 1.369247704190281e-03, 4.665032540182458e-03, -7.435737319591171e-02, 4.468793963974038e-03, 4.468793963974038e-03, -1.859142561538230e-03, -2.293792532165982e-03, -1.803821529652922e-03, -1.129534544875446e-03, -2.132107015507392e-03, -2.132107015507392e-03, -6.049819248138817e-02, -5.593142233455787e-02, -5.745035656090450e-02, -5.877344956645098e-02, -5.810377558770932e-02, -5.810377558770932e-02, -6.143105061036674e-02, -3.021556078454128e-02, -3.765103418699584e-02, -4.613815610946440e-02, -4.175882014907541e-02, -4.175882014907541e-02, -5.698641884841808e-02, -3.410752638120718e-03, -1.043277101289878e-02, -2.688907601911385e-02, -1.836213641656817e-02, -1.836213641656819e-02, -2.961305921910933e-02, -9.738225397954919e-03, -6.156442555609287e-03, -3.192879477594829e-02, 3.020418422511838e-03, 3.020418422511830e-03, -5.005503288878223e-03, -6.893561262864749e-04, -1.366813814291935e-03, 2.230060948710963e-03, -1.989743263688140e-03, -1.989743263688139e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86_ft_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.925355430264235e-02, -5.925413963330221e-02, -5.925587355553461e-02, -5.924718883148480e-02, -5.925186034472958e-02, -5.925186034472958e-02, -9.411683149559438e-02, -9.412892756388662e-02, -9.440783016614514e-02, -9.391730419887026e-02, -9.413062056305370e-02, -9.413062056305370e-02, -8.506446908032417e-02, -8.488757103305172e-02, -7.928740057545815e-02, -7.964272962196005e-02, -7.981249396207846e-02, -7.981249396207846e-02, -4.694000559801011e-02, -4.831592794704099e-02, -8.884879786291781e-02, -2.566880246805871e-02, -3.645295986785271e-02, -3.645295986785269e-02, -4.789364874500865e-03, -4.979999820867510e-03, 6.185155747075406e-03, -3.026258736327718e-03, -3.676084237670422e-03, -3.676084237670422e-03, -1.191544282470201e-01, -1.195391056539919e-01, -1.191702970565316e-01, -1.195099273863200e-01, -1.193504928517269e-01, -1.193504928517269e-01, -5.593169045181456e-02, -5.728349334374238e-02, -5.237940342615475e-02, -5.357799779288503e-02, -5.840732996621015e-02, -5.840732996621015e-02, -8.467948205761772e-02, -8.104361010276917e-02, -8.272490256771496e-02, -7.893397686908925e-02, -8.485820673939501e-02, -8.485820673939501e-02, 4.994499265742891e-03, -3.443576316064798e-02, 8.252931421132585e-03, -1.171840824869257e-01, -1.369157042832618e-02, -1.369157042832618e-02, -2.412756573952068e-03, -2.966986422863573e-03, -2.300365183028148e-03, 1.710749783757643e-02, -2.745887338236419e-03, -2.745887338236419e-03, -7.449135710034853e-02, -7.823081896912172e-02, -7.710377249102666e-02, -7.602999760423014e-02, -7.658446853405457e-02, -7.658446853405457e-02, -7.217541505547367e-02, -7.959213972102036e-02, -8.140477978620890e-02, -8.071543264836473e-02, -8.141061583706330e-02, -8.141061583706330e-02, -8.300792032825961e-02, -4.663121796366642e-02, -5.796673641723872e-02, -7.163748607829638e-02, -6.609011293232314e-02, -6.609011293232316e-02, -7.782017240788400e-02, 3.832386668414955e-03, 1.568673172069448e-02, -7.066281208438795e-02, 7.258148731226898e-03, 7.258148731226872e-03, -6.253423930192810e-03, -9.043686367407524e-04, -1.780723724814803e-03, 1.028166005890687e-02, -2.560686527232666e-03, -2.560686527232665e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86_ft_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86_ft", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.992559865668116e-10, -1.992553885012146e-10, -1.992491082555300e-10, -1.992580659914428e-10, -1.992538936839399e-10, -1.992538936839399e-10, 6.093419262691037e-07, 6.096272840003890e-07, 6.161513195562572e-07, 6.041040570871558e-07, 6.095904518510985e-07, 6.095904518510985e-07, 1.948254402020512e-03, 1.938508165606005e-03, 1.672037741496696e-03, 1.627806719610879e-03, 1.655560570497071e-03, 1.655560570497071e-03, 3.169144177425228e-01, 3.164382064238941e-01, 1.029886654000805e-03, 4.299345322499074e-01, 4.159534237959005e-01, 4.159534237959004e-01, -5.430075793346300e+00, -7.262324174401164e+00, -1.024988751128136e+01, -5.160277908630367e-01, -3.299066391452922e+00, -3.299066391452949e+00, 1.948682323971529e-07, 1.973664743497860e-07, 1.949691669564291e-07, 1.971744199042586e-07, 1.961388372719504e-07, 1.961388372719504e-07, 2.073263084851823e-06, 2.181372900551394e-06, 1.618845337533563e-06, 1.719002463568205e-06, 2.359333920681281e-06, 2.359333920681281e-06, 5.563808307308524e-03, 6.264407127980385e-03, 7.343210064624591e-03, 9.623923116653528e-03, 5.477121085552331e-03, 5.477121085552331e-03, 1.306685829520725e-01, 1.739774407630614e-01, -6.552935830795958e-03, 5.469863635557069e-05, 5.666824039703138e-01, 5.666824039703138e-01, -4.682724582774090e-01, -9.167922362313278e-01, -2.314751541790472e+02, -2.580631304389660e+00, -3.423885243372552e+01, -3.423885243372536e+01, 1.062972520346984e-02, 9.015980905922103e-03, 9.466012445263189e-03, 9.916469772916360e-03, 9.680456852343510e-03, 9.680456852343510e-03, 1.295564296525738e-02, 8.445556391446141e-03, 8.862630517135098e-03, 9.582716016704530e-03, 9.192883072236611e-03, 9.192883072236611e-03, 5.006157334100563e-03, 9.514431847331754e-02, 6.427322105375481e-02, 3.699696235484647e-02, 4.987422645414924e-02, 4.987422645414926e-02, 1.210566108272243e-02, -1.017239133314703e+01, -5.778290318356223e+00, 5.239692669894651e-02, -6.160444783234392e-02, -6.160444783234530e-02, -6.742814926229830e+00, -1.029279529974542e+00, -2.381806918555751e+00, -4.956096808805970e-01, -5.905043257636718e+01, -5.905043257636739e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
