
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_wi_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.456342933769110e-01, -2.456354125806781e-01, -2.456387343797348e-01, -2.456221161426086e-01, -2.456310593507389e-01, -2.456310593507389e-01, -1.459357261339143e-01, -1.459447706595795e-01, -1.461552737649529e-01, -1.458013846038788e-01, -1.459481297216697e-01, -1.459481297216697e-01, -3.800734235591171e-02, -3.760257761252773e-02, -2.737545827753053e-02, -2.801814546661310e-02, -2.823951795015424e-02, -2.823951795015424e-02, 9.658720471323954e-06, -2.272638777189733e-04, -4.687111225944791e-02, 7.290864718291538e-04, 6.998311665862281e-04, 6.998311665862283e-04, -8.528205300516683e-10, -1.127073466554904e-09, -1.317379110078446e-07, -6.620286947424956e-11, -2.282713149708173e-10, -2.282713149708178e-10, -1.928012752124658e-01, -1.929979198926096e-01, -1.928095041693274e-01, -1.929831229807067e-01, -1.929014724751283e-01, -1.929014724751283e-01, -6.038322210488980e-02, -6.227197859465872e-02, -5.656881039898354e-02, -5.822595956168766e-02, -6.329756879543505e-02, -6.329756879543505e-02, -4.839035505109757e-02, -6.311720990279304e-02, -4.327614471467489e-02, -5.601190074324725e-02, -5.071996914518358e-02, -5.071996914518358e-02, 2.793132745428493e-04, 8.765032984351686e-04, 2.214948265422842e-04, -1.338328595295233e-01, 5.212361519393201e-04, 5.212361519393201e-04, -2.622848861194664e-11, -6.894377510412228e-11, -1.029084506147643e-10, 4.835999448758796e-05, -1.218143237572061e-10, -1.218143237572058e-10, -6.137064873486097e-02, -5.920933344223608e-02, -6.000847077569756e-02, -6.063890484898563e-02, -6.032733293018956e-02, -6.032733293018956e-02, -6.050709337191810e-02, -2.988981823409126e-02, -4.009662883875077e-02, -4.971064448215814e-02, -4.505039868115564e-02, -4.505039868115564e-02, -6.513570461976834e-02, 3.062945355235483e-04, -2.457347258671926e-03, -1.908669647102090e-02, -8.737430041559259e-03, -8.737430041559266e-03, -2.720833514774332e-02, -4.704592753268011e-07, 7.384688339385728e-06, -2.414838054653416e-02, 1.714155856838059e-04, 1.714155856838060e-04, -3.333942179444514e-09, -7.315614212452458e-13, -1.090620989774449e-11, 1.322451215849785e-04, -1.053740090981239e-10, -1.053740090981236e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_wi_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.483858936516123e-01, -3.483858936516123e-01, -3.483841026584973e-01, -3.483841026584973e-01, -3.483791183265672e-01, -3.483791183265672e-01, -3.484057046549820e-01, -3.484057046549820e-01, -3.483913498367623e-01, -3.483913498367623e-01, -3.483913498367623e-01, -3.483913498367623e-01, -2.838043465642237e-01, -2.838043465642237e-01, -2.837893711148186e-01, -2.837893711148186e-01, -2.834452011193138e-01, -2.834452011193138e-01, -2.840601691187020e-01, -2.840601691187020e-01, -2.837885226418256e-01, -2.837885226418256e-01, -2.837885226418256e-01, -2.837885226418256e-01, -1.284970150925272e-01, -1.284970150925272e-01, -1.284220616844501e-01, -1.284220616844501e-01, -1.212416037899468e-01, -1.212416037899468e-01, -1.225057553342986e-01, -1.225057553342986e-01, -1.225935669507612e-01, -1.225935669507612e-01, -1.225935669507612e-01, -1.225935669507612e-01, -8.389388948199166e-03, -8.389388948199166e-03, -1.013175420641125e-02, -1.013175420641125e-02, -1.428588310480553e-01, -1.428588310480553e-01, 1.074847457265218e-03, 1.074847457265218e-03, -1.220377962633684e-03, -1.220377962633684e-03, -1.220377962633682e-03, -1.220377962633682e-03, -5.116918905893320e-09, -5.116918905893320e-09, -6.762433705359475e-09, -6.762433705359475e-09, 9.873816071008821e-06, 9.873816071008821e-06, -3.972171722966320e-10, -3.972171722966320e-10, -1.369627468154360e-09, -1.369627468154360e-09, -1.369627468154363e-09, -1.369627468154363e-09, -2.752897089471330e-01, -2.752897089471330e-01, -2.749427863239996e-01, -2.749427863239996e-01, -2.752754627396971e-01, -2.752754627396971e-01, -2.749691584647605e-01, -2.749691584647605e-01, -2.751127895437090e-01, -2.751127895437090e-01, -2.751127895437090e-01, -2.751127895437090e-01, -2.559738966919687e-01, -2.559738966919687e-01, -2.578746593472097e-01, -2.578746593472097e-01, -2.526942846539575e-01, -2.526942846539575e-01, -2.546965335569470e-01, -2.546965335569470e-01, -2.582677730805531e-01, -2.582677730805531e-01, -2.582677730805531e-01, -2.582677730805531e-01, -1.036516376446530e-01, -1.036516376446530e-01, -8.924477133914346e-02, -8.924477133914346e-02, -1.006821373233460e-01, -1.006821373233460e-01, -8.392976562939002e-02, -8.392976562939002e-02, -1.022074596305127e-01, -1.022074596305127e-01, -1.022074596305127e-01, -1.022074596305127e-01, 1.201255150502150e-03, 1.201255150502150e-03, -7.166395060819086e-04, -7.166395060819086e-04, 1.026370802859398e-03, 1.026370802859398e-03, -1.754791646582817e-01, -1.754791646582817e-01, 1.519275917774416e-03, 1.519275917774416e-03, 1.519275917774416e-03, 1.519275917774416e-03, -1.573709226122899e-10, -1.573709226122899e-10, -4.136626012048581e-10, -4.136626012048581e-10, -6.174505597445534e-10, -6.174505597445534e-10, 3.373199596530551e-04, 3.373199596530551e-04, -7.308857750804463e-10, -7.308857750804463e-10, -7.308857750804444e-10, -7.308857750804444e-10, -8.027897059910304e-02, -8.027897059910304e-02, -8.349149317491612e-02, -8.349149317491612e-02, -8.224782469274633e-02, -8.224782469274633e-02, -8.130525508433495e-02, -8.130525508433495e-02, -8.176563918340188e-02, -8.176563918340188e-02, -8.176563918340188e-02, -8.176563918340188e-02, -7.780846451963713e-02, -7.780846451963713e-02, -1.005985762413792e-01, -1.005985762413792e-01, -9.840195488230294e-02, -9.840195488230294e-02, -8.921215239661819e-02, -8.921215239661819e-02, -9.421263337867286e-02, -9.421263337867286e-02, -9.421263337867286e-02, -9.421263337867286e-02, -9.313546554181923e-02, -9.313546554181923e-02, -8.436936136582059e-03, -8.436936136582059e-03, -2.706209282802317e-02, -2.706209282802317e-02, -7.434895616916901e-02, -7.434895616916901e-02, -5.294968894788045e-02, -5.294968894788045e-02, -5.294968894788047e-02, -5.294968894788047e-02, -9.401774496396696e-02, -9.401774496396696e-02, 3.481067671281546e-06, 3.481067671281546e-06, 8.659613540787349e-05, 8.659613540787349e-05, -7.194174830990907e-02, -7.194174830990907e-02, 8.304134514088653e-04, 8.304134514088653e-04, 8.304134514088652e-04, 8.304134514088652e-04, -2.000360673780402e-08, -2.000360673780402e-08, -4.389368506678789e-12, -4.389368506678789e-12, -6.543725718388073e-11, -6.543725718388073e-11, 6.935189254063739e-04, 6.935189254063739e-04, -6.322439191778034e-10, -6.322439191778034e-10, -6.322439191778013e-10, -6.322439191778013e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_wi_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.377452728812085e-10, 4.754905457624169e-10, 2.377452728812085e-10, 2.377416948880950e-10, 4.754833897761901e-10, 2.377416948880950e-10, 2.377251874194160e-10, 4.754503748388320e-10, 2.377251874194160e-10, 2.377784349393462e-10, 4.755568698786924e-10, 2.377784349393462e-10, 2.377506183108227e-10, 4.755012366216454e-10, 2.377506183108227e-10, 2.377506183108227e-10, 4.755012366216454e-10, 2.377506183108227e-10, 1.861312596375709e-06, 3.722625192751417e-06, 1.861312596375709e-06, 1.861277529635293e-06, 3.722555059270586e-06, 1.861277529635293e-06, 1.860242086899545e-06, 3.720484173799090e-06, 1.860242086899545e-06, 1.860346026196499e-06, 3.720692052392998e-06, 1.860346026196499e-06, 1.861056316224986e-06, 3.722112632449972e-06, 1.861056316224986e-06, 1.861056316224986e-06, 3.722112632449972e-06, 1.861056316224986e-06, 2.850328527232248e-03, 5.700657054464496e-03, 2.850328527232248e-03, 2.846225617354059e-03, 5.692451234708118e-03, 2.846225617354059e-03, 2.578985677254169e-03, 5.157971354508338e-03, 2.578985677254169e-03, 2.522201946781752e-03, 5.044403893563505e-03, 2.522201946781752e-03, 2.559507166184452e-03, 5.119014332368905e-03, 2.559507166184452e-03, 2.559507166184452e-03, 5.119014332368905e-03, 2.559507166184452e-03, 6.230923544674839e-02, 1.246184708934968e-01, 6.230923544674839e-02, 7.244210693810757e-02, 1.448842138762151e-01, 7.244210693810757e-02, 1.549077138672420e-03, 3.098154277344841e-03, 1.549077138672420e-03, -1.402107234688617e-03, -2.804214469377234e-03, -1.402107234688617e-03, 2.337371101306065e-02, 4.674742202612130e-02, 2.337371101306065e-02, 2.337371101306061e-02, 4.674742202612122e-02, 2.337371101306061e-02, 5.880844325825395e-04, 1.176168865165079e-03, 5.880844325825395e-04, 6.852152760954332e-04, 1.370430552190866e-03, 6.852152760954332e-04, -6.025823893494402e-03, -1.205164778698880e-02, -6.025823893494402e-03, 2.257092512503392e-04, 4.514185025006784e-04, 2.257092512503392e-04, 4.422676229550571e-04, 8.845352459101142e-04, 4.422676229550571e-04, 4.422676229550585e-04, 8.845352459101170e-04, 4.422676229550585e-04, 2.496412718405212e-07, 4.992825436810425e-07, 2.496412718405212e-07, 2.491787205552289e-07, 4.983574411104578e-07, 2.491787205552289e-07, 2.496202957051985e-07, 4.992405914103971e-07, 2.496202957051985e-07, 2.492119645904864e-07, 4.984239291809728e-07, 2.492119645904864e-07, 2.494067506712040e-07, 4.988135013424079e-07, 2.494067506712040e-07, 2.494067506712040e-07, 4.988135013424079e-07, 2.494067506712040e-07, 2.105373777195581e-05, 4.210747554391161e-05, 2.105373777195581e-05, 2.074936102252068e-05, 4.149872204504137e-05, 2.074936102252068e-05, 2.064934897901489e-05, 4.129869795802977e-05, 2.064934897901489e-05, 2.041495074106782e-05, 4.082990148213564e-05, 2.041495074106782e-05, 2.105108591559630e-05, 4.210217183119260e-05, 2.105108591559630e-05, 2.105108591559630e-05, 4.210217183119260e-05, 2.105108591559630e-05, 5.719033275931837e-03, 1.143806655186367e-02, 5.719033275931837e-03, 3.175808142930497e-03, 6.351616285860994e-03, 3.175808142930497e-03, 7.969394137272805e-03, 1.593878827454561e-02, 7.969394137272805e-03, 5.715591240674883e-03, 1.143118248134977e-02, 5.715591240674883e-03, 5.301759939394914e-03, 1.060351987878983e-02, 5.301759939394914e-03, 5.301759939394914e-03, 1.060351987878983e-02, 5.301759939394914e-03, -2.792253108519567e-02, -5.584506217039133e-02, -2.792253108519567e-02, 8.551310012525733e-03, 1.710262002505147e-02, 8.551310012525733e-03, -3.187424955897986e-02, -6.374849911795973e-02, -3.187424955897986e-02, 2.418373836142659e-05, 4.836747672285318e-05, 2.418373836142659e-05, -2.139870506636627e-02, -4.279741013273254e-02, -2.139870506636627e-02, -2.139870506636627e-02, -4.279741013273254e-02, -2.139870506636627e-02, 2.234413148782467e-04, 4.468826297564934e-04, 2.234413148782467e-04, 2.729480022810818e-04, 5.458960045621636e-04, 2.729480022810818e-04, 2.284150348642026e-03, 4.568300697284052e-03, 2.284150348642026e-03, -4.338843732265009e-02, -8.677687464530018e-02, -4.338843732265009e-02, 1.054961754200165e-03, 2.109923508400330e-03, 1.054961754200165e-03, 1.054961754200161e-03, 2.109923508400322e-03, 1.054961754200161e-03, 3.677017823691482e-03, 7.354035647382964e-03, 3.677017823691482e-03, 4.495264176436487e-03, 8.990528352872973e-03, 4.495264176436487e-03, 4.233440600358162e-03, 8.466881200716325e-03, 4.233440600358162e-03, 3.997930699176606e-03, 7.995861398353211e-03, 3.997930699176606e-03, 4.118101486123468e-03, 8.236202972246935e-03, 4.118101486123468e-03, 4.118101486123468e-03, 8.236202972246935e-03, 4.118101486123468e-03, 3.806710107416383e-03, 7.613420214832766e-03, 3.806710107416383e-03, 1.069561503667691e-02, 2.139123007335381e-02, 1.069561503667691e-02, 9.875089157641547e-03, 1.975017831528309e-02, 9.875089157641547e-03, 7.897729169963202e-03, 1.579545833992640e-02, 7.897729169963202e-03, 9.022977887859034e-03, 1.804595577571807e-02, 9.022977887859034e-03, 9.022977887859034e-03, 1.804595577571807e-02, 9.022977887859034e-03, 2.644690046408060e-03, 5.289380092816121e-03, 2.644690046408060e-03, 1.864933501793896e-02, 3.729867003587792e-02, 1.864933501793896e-02, 3.137015204114894e-02, 6.274030408229789e-02, 3.137015204114894e-02, 4.151842451271245e-02, 8.303684902542491e-02, 4.151842451271245e-02, 4.295791808380113e-02, 8.591583616760226e-02, 4.295791808380113e-02, 4.295791808380117e-02, 8.591583616760233e-02, 4.295791808380117e-02, 1.492378564878499e-02, 2.984757129756998e-02, 1.492378564878499e-02, -2.671530852153920e-03, -5.343061704307840e-03, -2.671530852153920e-03, -2.018652787804230e-02, -4.037305575608461e-02, -2.018652787804230e-02, 5.742742371187377e-02, 1.148548474237475e-01, 5.742742371187377e-02, -5.261527709479752e-02, -1.052305541895950e-01, -5.261527709479752e-02, -5.261527709479748e-02, -1.052305541895950e-01, -5.261527709479748e-02, 7.349829257155741e-04, 1.469965851431148e-03, 7.349829257155741e-04, 3.357936532844587e-04, 6.715873065689175e-04, 3.357936532844587e-04, 3.766194036224183e-04, 7.532388072448367e-04, 3.766194036224183e-04, -5.375892935295620e-02, -1.075178587059124e-01, -5.375892935295620e-02, 1.294531930013542e-03, 2.589063860027083e-03, 1.294531930013542e-03, 1.294531930013543e-03, 2.589063860027086e-03, 1.294531930013543e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
