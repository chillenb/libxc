
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gam_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.452013061110560e-03, -7.451039981017508e-03, -7.448281058652907e-03, -7.462729412770595e-03, -7.454934457182078e-03, -7.454934457182078e-03, -1.522633004668906e-02, -1.521867276453291e-02, -1.504192296347773e-02, -1.535011824285614e-02, -1.521723700527379e-02, -1.521723700527379e-02, -2.419156734040388e-02, -2.458869075631582e-02, -3.477577728138533e-02, -3.438226754116363e-02, -3.406750415510670e-02, -3.406750415510670e-02, -3.377884840286707e-02, -3.460932350645171e-02, -2.161718411026698e-02, 1.040681626285024e-03, -2.025545292572323e-02, -2.025545292572321e-02, 2.588852251382054e-02, 2.708731963803911e-02, 9.541634153014868e-02, 1.571316357733250e-02, 1.938217257180481e-02, 1.938217257180483e-02, -1.347963317891522e-03, -1.318688465701522e-03, -1.346672391853112e-03, -1.320762572756685e-03, -1.332530408913717e-03, -1.332530408913717e-03, -5.263970000981682e-02, -5.154005552039062e-02, -5.528883882731783e-02, -5.432963676977613e-02, -5.072492690061110e-02, -5.072492690061110e-02, -6.196436844516004e-03, -1.019102984690782e-02, -8.520325791554558e-03, -4.387146836022637e-03, -4.418505133729479e-03, -4.418505133729479e-03, 7.048730924724067e-02, -1.854890128148795e-02, 7.767803009857571e-02, -1.596247354291636e-02, 2.884965083857762e-02, 2.884965083857762e-02, 1.233346985107267e-02, 1.538397316835612e-02, 1.195232174624843e-02, 9.799809135431030e-02, 1.423653125978219e-02, 1.423653125978217e-02, -2.966083212070103e-02, -1.089890122441523e-02, -1.632772709147138e-02, -2.196237159251630e-02, -1.902739642708746e-02, -1.902739642708746e-02, -3.455295973784808e-02, -2.072699713447252e-02, -1.002220655044371e-02, -1.634128021415528e-03, -5.083648667852964e-03, -5.083648667852964e-03, -8.460095410808178e-03, -3.653249194336469e-02, -4.077774376109366e-02, -2.217165867803104e-02, -3.377137275837725e-02, -3.377137275837736e-02, -2.084550223728011e-02, 9.426772130653784e-02, 1.040546720387888e-01, -1.350442307229322e-02, 7.625547959190523e-02, 7.625547959190529e-02, 3.501644676784969e-02, 4.374447564047746e-03, 8.929262679283987e-03, 8.261822357171406e-02, 1.323943751252511e-02, 1.323943751252512e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gam_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([7.988511682972375e-02, 7.987983446016272e-02, 7.986490482984124e-02, 7.994330177019507e-02, 7.990101487389291e-02, 7.990101487389291e-02, 8.367243528073789e-02, 8.365799562889566e-02, 8.332246082033136e-02, 8.390727096467293e-02, 8.365566295844022e-02, 8.365566295844022e-02, 6.081170571768184e-02, 6.081894191617219e-02, 5.708188017450447e-02, 5.759981302097879e-02, 5.774961812235393e-02, 5.774961812235393e-02, -6.825357388891144e-02, -5.622196565790680e-02, 6.351170027364243e-02, -1.874421545554640e-01, -1.409672347962410e-01, -1.409672347962412e-01, 3.326520336537588e-02, 3.471835146403136e-02, 7.919716768383434e-02, 2.050952562818261e-02, 2.515260297314587e-02, 2.515260297314600e-02, 9.086863688546094e-03, 7.682681509748050e-03, 9.029156613918787e-03, 7.789658914992888e-03, 8.373243998927268e-03, 8.373243998927268e-03, 8.067707589982458e-02, 8.188578926996710e-02, 7.783481074617557e-02, 7.910831161064787e-02, 8.250155424704278e-02, 8.250155424704278e-02, 3.998569142831558e-02, -6.608261564574539e-02, 4.484998373530240e-02, -4.159279950808164e-02, 3.368050130702884e-02, 3.368050130702884e-02, -1.383370084844748e-01, -1.661334698372104e-01, -1.153912465589118e-01, -9.850967968570522e-02, -1.891156129849680e-01, -1.891156129849680e-01, 1.616202891687949e-02, 2.008226041363219e-02, 1.561789591308023e-02, -3.564779963385973e-03, 1.856838968991836e-02, 1.856838968991829e-02, -6.487353361303569e-02, -6.655966379046566e-02, -7.470695392229611e-02, -7.543221330369571e-02, -7.595253650978590e-02, -7.595253650978590e-02, -4.734328435332199e-02, 5.376398168237912e-02, 4.682710654453099e-02, 1.315259518349412e-02, 3.538231693192473e-02, 3.538231693192473e-02, -6.151385038790332e-02, -9.329213395820288e-02, -1.419145410923288e-02, 4.632328055567937e-02, 3.066043433683376e-02, 3.066043433683370e-02, 5.207385173138375e-02, 8.346945538739642e-02, 5.642169348793556e-02, 4.412988668473074e-02, -9.440737974622804e-02, -9.440737974622800e-02, 4.429319996589420e-02, 5.787622798015640e-03, 1.174433018569234e-02, -7.186304550057254e-02, 1.728576979035837e-02, 1.728576979035827e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gam_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.220461198368574e-10, -2.220336215222232e-10, -2.219924031066283e-10, -2.221779963210721e-10, -2.220787348039871e-10, -2.220787348039871e-10, -1.602190982483365e-06, -1.602136496586602e-06, -1.600648174342419e-06, -1.601741381886995e-06, -1.601942635526513e-06, -1.601942635526513e-06, -3.133481953441961e-03, -3.128318578976396e-03, -2.879933388759472e-03, -2.803647287271760e-03, -2.845477668558612e-03, -2.845477668558612e-03, 2.146802388634631e-01, 1.177022297710776e-01, -1.626016406412751e-03, 2.560388414825769e+00, 1.273700768121968e+00, 1.273700768121969e+00, 5.932267769018355e+01, 6.230309240154235e+01, 2.362324953469704e+01, 5.676725896756705e+01, 7.073242133715064e+01, 7.073242133712752e+01, -4.218206389340257e-08, -3.663362468528229e-08, -4.195494355074874e-08, -3.705824382033011e-08, -3.937025557511473e-08, -3.937025557511473e-08, -1.602727965309600e-05, -1.582182545822497e-05, -1.562256959846853e-05, -1.546458339513257e-05, -1.609192595161526e-05, -1.609192595161526e-05, -6.376349172308054e-03, 1.824626476081956e-02, -9.553241278792469e-03, 1.641914543288541e-02, -5.419370886753175e-03, -5.419370886753175e-03, 7.499817193863286e+00, 6.562329037255034e-01, 9.094250586802730e+00, 1.157117527919342e-04, 5.798940540179965e+00, 5.798940540179965e+00, 7.620680027839371e+01, 6.692343767795485e+01, 4.280244705082026e+02, 1.957533502748366e+01, 1.966840932258939e+02, 1.966840932260627e+02, 4.562607210035282e-02, 2.895360989871469e-02, 3.847354963830129e-02, 4.531367706248529e-02, 4.220681667727073e-02, 4.220681667727073e-02, 2.989616493705464e-02, -1.329545420890927e-02, -1.219594218506804e-02, -4.552463212866344e-03, -1.010357176612784e-02, -1.010357176612784e-02, 1.249540059637156e-02, 1.077773566617090e-01, -4.297357541146780e-02, -6.006328509882049e-02, -7.176809017692318e-02, -7.176809017692386e-02, -1.918423368305617e-02, 2.203308601089449e+01, 1.883314956205781e+01, -8.427393360349936e-02, 1.630465664000077e+01, 1.630465664000080e+01, 4.580731854127416e+01, 3.519833057015078e+02, 1.649852134260185e+02, 1.786849254870868e+01, 2.497993603910993e+02, 2.497993603910071e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
