
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sogga11_x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.770050846188961e-01, -5.769962635174994e-01, -5.769732106412345e-01, -5.771040803883212e-01, -5.770332251859362e-01, -5.770332251859362e-01, -1.216734046876440e-01, -1.216575042978936e-01, -1.212956389738832e-01, -1.219463165414659e-01, -1.216565001992192e-01, -1.216565001992192e-01, -6.430290201299872e-02, -6.439166166072618e-02, -6.570771606438013e-02, -6.584905038318607e-02, -6.555035273460845e-02, -6.555035273460845e-02, -4.230979404382658e-02, -4.098283726684845e-02, -6.768283698579032e-02, -7.891571148694751e-02, -5.545746741824127e-02, -5.545746741824130e-02, -1.369601566996412e-02, -1.430311075584749e-02, -5.843867596547363e-02, -8.511672237834344e-03, -8.857970546541454e-03, -8.857970546541454e-03, -1.211334685364054e-01, -1.210438548684944e-01, -1.211297801675934e-01, -1.210506293427140e-01, -1.210874923382006e-01, -1.210874923382006e-01, -1.785563835144693e-01, -1.745885537788882e-01, -1.903451614252014e-01, -1.867201286850687e-01, -1.707941928725976e-01, -1.707941928725976e-01, -5.230568841453744e-02, -5.816119246609181e-02, -5.131141430204655e-02, -5.427413065571119e-02, -5.208535989273880e-02, -5.208535989273928e-02, -1.074135842304416e-01, -7.469198262988928e-02, -1.046954096790356e-01, -7.773964144272516e-02, -9.326744108305433e-02, -9.326744108305433e-02, -6.756340183807447e-03, -8.344930611386015e-03, -6.574134304178322e-03, -8.517592365610445e-02, -7.318297850698814e-03, -7.318297850698811e-03, -6.085197593274164e-02, -5.691444288050646e-02, -5.814569122045510e-02, -5.927802658550223e-02, -5.869752673855760e-02, -5.869752673855760e-02, -6.173321403702637e-02, -5.471651439687498e-02, -5.074615211855318e-02, -5.045216940994127e-02, -4.976917516407423e-02, -4.976917516407423e-02, -5.847513713613471e-02, -5.770461309156516e-02, -4.770624982702936e-02, -4.698549855875297e-02, -4.775755941426093e-02, -4.775755941426101e-02, -5.267619729626859e-02, -5.636145922003202e-02, -7.207743372824178e-02, -4.259953842905816e-02, -9.580460974011883e-02, -9.580460974011848e-02, -1.836893743426926e-02, -2.510643851665925e-03, -4.961936480596552e-03, -9.389164011786835e-02, -6.908098204017700e-03, -6.908098204017708e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sogga11_x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.842167267522622e-01, 1.842158713184333e-01, 1.842627574580872e-01, 1.842613150460795e-01, 1.843841608666555e-01, 1.843857553482958e-01, 1.837087161255881e-01, 1.837036530892947e-01, 1.840774965181716e-01, 1.840690284221785e-01, 1.840774965181716e-01, 1.840690284221785e-01, 5.864581673645863e-02, 5.864399736718504e-02, 5.848349500854537e-02, 5.848141653513651e-02, 5.475416305245409e-02, 5.475693817585997e-02, 6.136749645393540e-02, 6.136935369891740e-02, 5.843995069437212e-02, 5.848985995313764e-02, 5.843995069437212e-02, 5.848985995313764e-02, -4.758414820078079e-02, -4.712886609201758e-02, -4.859747839758710e-02, -4.803514769089477e-02, -5.623968994507984e-02, -5.708443268981823e-02, -5.750951905227954e-02, -5.724388188573137e-02, -5.394991727461837e-02, -6.197882018531529e-02, -5.394991727461837e-02, -6.197882018531529e-02, 2.556212502026563e-02, 2.730039393235462e-02, 8.321130388876871e-03, 1.064059354541352e-02, -5.043805879924434e-02, -4.647683526620390e-02, 1.423493624927161e-01, 1.427724244739902e-01, 1.207733524925664e-01, 1.124188984506192e-01, 1.207733524925659e-01, 1.124188984506185e-01, -1.863529344449398e-02, -1.710693602613802e-02, -1.960838174462439e-02, -1.779112781632937e-02, -8.582641253010903e-02, -7.885484674531240e-02, -1.093400071685145e-02, -1.118633052834176e-02, -9.980908684175822e-03, -1.949924775109070e-02, -9.980908684175822e-03, -1.949924775109070e-02, -1.012766983601002e-01, -1.013273417647578e-01, -1.020675704453651e-01, -1.021196171570652e-01, -1.013109785153321e-01, -1.013625674249286e-01, -1.020118596502791e-01, -1.020627307315822e-01, -1.016931143453187e-01, -1.017447214719942e-01, -1.016931143453187e-01, -1.017447214719942e-01, 3.907583568022645e-01, 3.907563217424374e-01, 3.843957359311072e-01, 3.843853370196225e-01, 4.046710021616905e-01, 4.047557187902664e-01, 4.014662177014687e-01, 4.015486453569800e-01, 3.773060903690176e-01, 3.771447452776265e-01, 3.773060903690176e-01, 3.771447452776265e-01, -4.492012247608337e-02, -4.517881903087968e-02, -7.842412980170836e-02, -7.836802551146591e-02, -4.058592666240419e-02, -3.722544028770496e-02, -7.671103414858291e-02, -7.289499041391137e-02, -4.900958431179669e-02, -5.416246791303521e-02, -4.900958431179664e-02, -5.416246791303586e-02, -6.116464991224223e-02, -5.935786331173884e-02, 1.622931144931253e-01, 1.623604192545696e-01, -8.320467519454137e-02, -7.290797065875429e-02, -1.021748526489230e-01, -1.022459041880763e-01, 7.043626676557567e-02, 7.574787073474597e-02, 7.043626676557567e-02, 7.574787073474597e-02, -9.032892168521184e-03, -8.580854860060645e-03, -1.095874989766544e-02, -1.073788528431546e-02, -8.951385971845183e-03, -8.295871577184109e-03, -1.081822922282355e-01, -1.070539065390050e-01, -1.254698604209950e-02, -8.368785372698398e-03, -1.254698604209950e-02, -8.368785372698395e-03, -7.504116049225470e-02, -7.455603254953307e-02, -7.637177526088655e-02, -7.590023060726274e-02, -7.617757315070228e-02, -7.569995625166866e-02, -7.581127953651361e-02, -7.533272600825133e-02, -7.601815981112189e-02, -7.554013773003240e-02, -7.601815981112189e-02, -7.554013773003240e-02, -7.310340175450121e-02, -7.268741090543358e-02, -2.900693683023155e-02, -2.860673104671380e-02, -3.579237452140421e-02, -3.539110758034231e-02, -6.516016609719519e-02, -6.478738377430653e-02, -5.069981874239996e-02, -5.033872217394607e-02, -5.069981874239996e-02, -5.033872217394607e-02, -7.967130597527512e-02, -7.946862718757322e-02, 1.043572477844142e-01, 1.044884011405656e-01, -1.103492795078351e-02, -1.029604677358659e-02, -2.436027572823541e-02, -2.391903790058384e-02, -4.274961219376423e-02, -4.278206337143896e-02, -4.274961219376448e-02, -4.278206337143881e-02, -2.754763019190217e-02, -2.693629683307281e-02, -7.926036426350352e-02, -7.842388194575740e-02, -1.031712790384112e-01, -9.791306675940928e-02, -3.155421889114361e-02, -3.039070586598833e-02, -7.932696004303870e-02, -6.946245213503496e-02, -7.932696004303801e-02, -6.946245213503427e-02, -2.459465710827354e-02, -2.335818156830435e-02, -3.299760956521248e-03, -3.290262569392282e-03, -6.763970085061957e-03, -6.241164234822723e-03, -8.933372092122933e-02, -8.631422871157846e-02, -1.146457069684671e-02, -7.960973383448434e-03, -1.146457069684672e-02, -7.960973383448436e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sogga11_x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sogga11_x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.246159484438418e-09, -4.492318968876835e-09, -2.246159484438418e-09, -2.246297353888580e-09, -4.492594707777160e-09, -2.246297353888580e-09, -2.246615348780743e-09, -4.493230697561486e-09, -2.246615348780743e-09, -2.244570591968679e-09, -4.489141183937359e-09, -2.244570591968679e-09, -2.245683791661570e-09, -4.491367583323141e-09, -2.245683791661570e-09, -2.245683791661570e-09, -4.491367583323141e-09, -2.245683791661570e-09, -3.365288398728350e-06, -6.730576797456701e-06, -3.365288398728350e-06, -3.362768195881471e-06, -6.725536391762943e-06, -3.362768195881471e-06, -3.304438052889342e-06, -6.608876105778685e-06, -3.304438052889342e-06, -3.405039541858670e-06, -6.810079083717339e-06, -3.405039541858670e-06, -3.362163352537793e-06, -6.724326705075587e-06, -3.362163352537793e-06, -3.362163352537793e-06, -6.724326705075587e-06, -3.362163352537793e-06, -9.568015456778235e-04, -1.913603091355647e-03, -9.568015456778235e-04, -9.172826262005381e-04, -1.834565252401076e-03, -9.172826262005381e-04, -5.540675611717699e-04, -1.108135122343540e-03, -5.540675611717699e-04, -5.208407802132119e-04, -1.041681560426424e-03, -5.208407802132119e-04, -5.128009599701195e-04, -1.025601919940239e-03, -5.128009599701195e-04, -5.128009599701195e-04, -1.025601919940239e-03, -5.128009599701195e-04, -5.996282499291513e-01, -1.199256499858303e+00, -5.996282499291513e-01, -4.504548413703698e-01, -9.009096827407397e-01, -4.504548413703698e-01, -5.497828302571325e-04, -1.099565660514265e-03, -5.497828302571325e-04, -3.393754044326068e+00, -6.787508088652135e+00, -3.393754044326068e+00, -2.134731019395976e+00, -4.269462038791952e+00, -2.134731019395976e+00, -2.134731019395971e+00, -4.269462038791943e+00, -2.134731019395971e+00, 3.715828790664684e+01, 7.431657581329368e+01, 3.715828790664684e+01, 3.847571296661322e+01, 7.695142593322643e+01, 3.847571296661322e+01, 6.376242924732101e+00, 1.275248584946420e+01, 6.376242924732101e+00, 4.001080203301665e+01, 8.002160406603329e+01, 4.001080203301665e+01, 3.688306011246101e+01, 7.376612022492202e+01, 3.688306011246101e+01, 3.688306011246106e+01, 7.376612022492212e+01, 3.688306011246106e+01, -1.316385623547939e-07, -2.632771247095878e-07, -1.316385623547939e-07, -1.285779822075451e-07, -2.571559644150903e-07, -1.285779822075451e-07, -1.315028303919497e-07, -2.630056607838994e-07, -1.315028303919497e-07, -1.287937273434278e-07, -2.575874546868557e-07, -1.287937273434278e-07, -1.300226661565900e-07, -2.600453323131800e-07, -1.300226661565900e-07, -1.300226661565900e-07, -2.600453323131800e-07, -1.300226661565900e-07, -7.458846271489487e-05, -1.491769254297897e-04, -7.458846271489487e-05, -7.229036709545618e-05, -1.445807341909124e-04, -7.229036709545618e-05, -7.599862096713973e-05, -1.519972419342795e-04, -7.599862096713973e-05, -7.423525999318336e-05, -1.484705199863667e-04, -7.423525999318336e-05, -7.222316059927337e-05, -1.444463211985467e-04, -7.222316059927337e-05, -7.222316059927337e-05, -1.444463211985467e-04, -7.222316059927337e-05, -2.027707286170093e-03, -4.055414572340185e-03, -2.027707286170093e-03, 4.765538323482803e-03, 9.531076646965606e-03, 4.765538323482803e-03, -3.612197883308754e-03, -7.224395766617507e-03, -3.612197883308754e-03, 6.619701638843493e-03, 1.323940327768699e-02, 6.619701638843493e-03, -1.086920441634582e-03, -2.173840883269164e-03, -1.086920441634582e-03, -1.086920441634652e-03, -2.173840883269303e-03, -1.086920441634652e-03, -2.404960615707585e+00, -4.809921231415170e+00, -2.404960615707585e+00, -1.208359592215847e+00, -2.416719184431695e+00, -1.208359592215847e+00, -2.174701386952908e+00, -4.349402773905816e+00, -2.174701386952908e+00, 2.655452118575626e-05, 5.310904237151252e-05, 2.655452118575626e-05, -5.051392709524730e+00, -1.010278541904946e+01, -5.051392709524730e+00, -5.051392709524730e+00, -1.010278541904946e+01, -5.051392709524730e+00, 5.602202765657260e+01, 1.120440553131452e+02, 5.602202765657260e+01, 4.733737843015079e+01, 9.467475686030157e+01, 4.733737843015079e+01, 3.136919803654338e+02, 6.273839607308676e+02, 3.136919803654338e+02, 7.605745092523888e-01, 1.521149018504778e+00, 7.605745092523888e-01, 1.276510032768350e+02, 2.553020065536701e+02, 1.276510032768350e+02, 1.276510032768345e+02, 2.553020065536690e+02, 1.276510032768345e+02, 1.006118419662849e-02, 2.012236839325697e-02, 1.006118419662849e-02, 7.031638446650446e-03, 1.406327689330089e-02, 7.031638446650446e-03, 7.839032837220082e-03, 1.567806567444016e-02, 7.839032837220082e-03, 8.669394861537501e-03, 1.733878972307500e-02, 8.669394861537501e-03, 8.229315936872724e-03, 1.645863187374545e-02, 8.229315936872724e-03, 8.229315936872724e-03, 1.645863187374545e-02, 8.229315936872724e-03, 1.323298460146356e-02, 2.646596920292711e-02, 1.323298460146356e-02, -6.154084358374210e-03, -1.230816871674842e-02, -6.154084358374210e-03, -4.921553847043019e-03, -9.843107694086039e-03, -4.921553847043019e-03, 2.701729753549438e-03, 5.403459507098875e-03, 2.701729753549438e-03, -1.483823587861998e-03, -2.967647175723996e-03, -1.483823587861998e-03, -1.483823587861998e-03, -2.967647175723996e-03, -1.483823587861998e-03, 3.661542832000005e-03, 7.323085664000010e-03, 3.661542832000005e-03, -3.865998590070177e-01, -7.731997180140354e-01, -3.865998590070177e-01, -6.246431735066981e-02, -1.249286347013396e-01, -6.246431735066981e-02, -2.660476144599487e-02, -5.320952289198975e-02, -2.660476144599487e-02, -1.321738563305055e-02, -2.643477126610111e-02, -1.321738563305055e-02, -1.321738563305101e-02, -2.643477126610201e-02, -1.321738563305101e-02, -8.879844713048904e-03, -1.775968942609781e-02, -8.879844713048904e-03, 6.395354043703379e+00, 1.279070808740676e+01, 6.395354043703379e+00, 3.452550409748281e+00, 6.905100819496562e+00, 3.452550409748281e+00, -2.689974593557815e-02, -5.379949187115629e-02, -2.689974593557815e-02, -3.767796272824954e+00, -7.535592545649908e+00, -3.767796272824954e+00, -3.767796272824967e+00, -7.535592545649934e+00, -3.767796272824967e+00, 2.636208756625937e+01, 5.272417513251874e+01, 2.636208756625937e+01, 2.974412469677670e+02, 5.948824939355339e+02, 2.974412469677670e+02, 1.271749521820266e+02, 2.543499043640532e+02, 1.271749521820266e+02, -2.743974908159453e+00, -5.487949816318906e+00, -2.743974908159453e+00, 1.671407409602121e+02, 3.342814819204241e+02, 1.671407409602121e+02, 1.671407409602134e+02, 3.342814819204269e+02, 1.671407409602134e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
