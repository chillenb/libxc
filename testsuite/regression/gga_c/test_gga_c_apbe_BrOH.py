
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_apbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.616450032033735e-02, -4.616522619201590e-02, -4.616741514046111e-02, -4.615555070756733e-02, -4.616489189064697e-02, -4.616489189064697e-02, -3.712201399135597e-02, -3.712611033109498e-02, -3.723889127343289e-02, -3.704489147491965e-02, -3.712412298624631e-02, -3.712412298624631e-02, -2.274448818038100e-02, -2.253059218938059e-02, -1.713147301041425e-02, -1.740025386415943e-02, -2.266732679319179e-02, -2.266732679319179e-02, -7.281742728659434e-03, -7.891056118863645e-03, -2.952564340962533e-02, -1.810279391927572e-03, -7.468714176138832e-03, -7.468714176138832e-03, -8.855275075501632e-08, -1.094798746088014e-07, -2.263399239903264e-05, -2.179616845883961e-09, -1.084937156261581e-07, -1.084937156261581e-07, -5.415094013910268e-02, -5.435748536094944e-02, -5.417153395888225e-02, -5.433213219006768e-02, -5.425739229558876e-02, -5.425739229558876e-02, -1.726077558664577e-02, -1.767138507959223e-02, -1.669214189793274e-02, -1.700651438367226e-02, -1.830854570373077e-02, -1.830854570373077e-02, -3.616467188132573e-02, -5.493258356476508e-02, -3.473460722806531e-02, -4.922611647791302e-02, -3.872249761268896e-02, -3.872249761268896e-02, -4.523003771974586e-04, -3.303875752511220e-03, -4.992622042366612e-04, -6.904791840647610e-02, -1.010292871999950e-03, -1.010292871999950e-03, -1.957936282733190e-09, -3.636015828703763e-09, -2.739281011558284e-09, -9.699585710292871e-05, -3.495828150493621e-09, -3.495828150493621e-09, -6.100978418019650e-02, -5.513750390409505e-02, -5.712246822370205e-02, -5.874571698934320e-02, -5.792403260054484e-02, -5.792403260054484e-02, -6.136853078388489e-02, -2.601232924176749e-02, -3.348486627973601e-02, -4.223162275051050e-02, -3.762997372481434e-02, -3.762997372481434e-02, -5.479703047763429e-02, -5.850720252770785e-03, -1.003829387580418e-02, -2.176862937730238e-02, -1.526158846066513e-02, -1.526158846066512e-02, -2.445233615373291e-02, -1.357501298600223e-05, -5.144602493310586e-05, -2.681888240255758e-02, -3.132523075754892e-04, -3.132523075754892e-04, -1.359081644546354e-07, -1.429513746746805e-11, -2.566878167713952e-10, -3.175660235385955e-04, -2.402155918357699e-09, -2.402155915788777e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_apbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.210868541518044e-01, -1.210878116384140e-01, -1.210907064702181e-01, -1.210750552404551e-01, -1.210873706052290e-01, -1.210873706052290e-01, -1.037240881924338e-01, -1.037296268560226e-01, -1.038820597960974e-01, -1.036205784605539e-01, -1.037269607979701e-01, -1.037269607979701e-01, -7.196311354437597e-02, -7.161560239173824e-02, -6.139249550114654e-02, -6.200531350607064e-02, -7.183818364130834e-02, -7.183818364130834e-02, -3.119516085777564e-02, -3.307023021176940e-02, -8.278882944761717e-02, -9.727458914696504e-03, -3.177922241046943e-02, -3.177922241046943e-02, -5.748079206182581e-07, -7.102447694241304e-07, -1.424372535319204e-04, -1.425141671715593e-08, -7.039139541873585e-07, -7.039139541873585e-07, -1.253112913313349e-01, -1.255089111790777e-01, -1.253310429201164e-01, -1.254847092601282e-01, -1.254132465091836e-01, -1.254132465091836e-01, -6.537187671974708e-02, -6.640684169263181e-02, -6.392605409190059e-02, -6.473745363880498e-02, -6.796034609111018e-02, -6.796034609111018e-02, -8.325206677454922e-02, -8.371912021874794e-02, -8.158072073548769e-02, -8.312952295742893e-02, -8.497164641752654e-02, -8.497164641752654e-02, -2.661647056531275e-03, -1.665589901062504e-02, -2.924587154404013e-03, -1.180057893274738e-01, -5.689912245022614e-03, -5.689912245022614e-03, -1.280549753628914e-08, -2.375480990182058e-08, -1.793396270586456e-08, -5.973107358931903e-04, -2.285462248740709e-08, -2.285462249068145e-08, -7.620317515117078e-02, -8.124886977904423e-02, -7.979245948462149e-02, -7.841458854109565e-02, -7.913333334835836e-02, -7.913333334835836e-02, -7.410399900382442e-02, -7.350281928986589e-02, -8.006371115937538e-02, -8.304466055171073e-02, -8.204663802200564e-02, -8.204663802200564e-02, -8.566898163231756e-02, -2.691225785088866e-02, -4.051361749993270e-02, -6.434510010166446e-02, -5.321300307172751e-02, -5.321300307172748e-02, -7.052062394676295e-02, -8.583773058801657e-05, -3.202845506225414e-04, -6.798939892599228e-02, -1.868827993517889e-03, -1.868827993517847e-03, -8.806867742637439e-07, -9.418915480214309e-11, -1.685033718845812e-09, -1.893197937586530e-03, -1.572372487930123e-08, -1.572372487753693e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_apbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.896622826325091e-10, 1.896654557303133e-10, 1.896700195439126e-10, 1.896182603142380e-10, 1.896640361861948e-10, 1.896640361861948e-10, 1.063193353274815e-06, 1.063378306541683e-06, 1.068260435938963e-06, 1.058761287235461e-06, 1.063266196694762e-06, 1.063266196694762e-06, 1.660142000620340e-03, 1.645303993684435e-03, 1.254919290612797e-03, 1.235449608872261e-03, 1.654829427822489e-03, 1.654829427822489e-03, 1.844702388717339e-01, 1.939941573927484e-01, 1.014834219984217e-03, 1.185281816162578e-01, 1.876017919767122e-01, 1.876017919767122e-01, 2.104306241889989e-02, 2.267681222587341e-02, 4.705817959667939e-02, 3.936534372215283e-03, 2.363574764888876e-02, 2.363574764888876e-02, 2.861559702027836e-07, 2.880704584999897e-07, 2.863449720736183e-07, 2.878334896041652e-07, 2.871433123102672e-07, 2.871433123102672e-07, 5.570487984256986e-06, 5.572526176739752e-06, 5.374863329611847e-06, 5.378124628208261e-06, 5.834305527402926e-06, 5.834305527402926e-06, 6.590002708339525e-03, 8.985110207220906e-03, 7.979355273564095e-03, 1.152107060237086e-02, 6.118785372615361e-03, 6.118785372615361e-03, 7.026826770471360e-02, 5.625526060387466e-02, 8.689441443776506e-02, 6.565727222696715e-05, 1.125198485599154e-01, 1.125198485599154e-01, 4.056834665381152e-03, 5.053566483028737e-03, 1.529715595218043e-02, 7.683103194319846e-02, 7.806281127482945e-03, 7.806281126059383e-03, 1.406872192980539e-02, 1.187644349935985e-02, 1.257952928272540e-02, 1.318273005983464e-02, 1.287418338208991e-02, 1.287418338208991e-02, 1.663123660911089e-02, 8.019606621212738e-03, 9.487009533139900e-03, 1.135004502321135e-02, 1.036525719508817e-02, 1.036525719508817e-02, 7.123373790278237e-03, 4.181429870095513e-02, 3.919984908665306e-02, 3.573289187156693e-02, 3.914050234160323e-02, 3.914050234160322e-02, 1.210306203393046e-02, 3.235999996018180e-02, 5.087999824309044e-02, 6.353746949497288e-02, 1.159483029950514e-01, 1.159483029950500e-01, 1.740195597979068e-02, 1.268750845195615e-03, 3.084419736901573e-03, 1.500657029958019e-01, 1.055918088659881e-02, 1.055918088689303e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
