
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_am05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.508897534369754e-01, -1.508900202072497e-01, -1.508909722699090e-01, -1.508866087525420e-01, -1.508898961122794e-01, -1.508898961122794e-01, -9.985576056907357e-02, -9.985667929158726e-02, -9.988302038429157e-02, -9.984312112778528e-02, -9.985634256825950e-02, -9.985634256825950e-02, -5.844330461499343e-02, -5.838859494318817e-02, -5.700464865032926e-02, -5.720724720812179e-02, -5.842347791623138e-02, -5.842347791623138e-02, -3.258122397257882e-02, -3.285487232061642e-02, -6.339604349647662e-02, -2.716401619316498e-02, -3.266394174762333e-02, -3.266394174762333e-02, -4.727391233027966e-03, -4.907395670365009e-03, -1.383649166238488e-02, -2.561122915732543e-03, -4.866218577246850e-03, -4.866218577246850e-03, -1.139892490587904e-01, -1.140358984579742e-01, -1.139939315081500e-01, -1.140302040684586e-01, -1.140132677472084e-01, -1.140132677472084e-01, -8.159531724812923e-02, -8.184253697491992e-02, -8.141537547411903e-02, -8.160754833714254e-02, -8.200142133138663e-02, -8.200142133138663e-02, -5.777758913994582e-02, -6.316310861044262e-02, -5.645413132614363e-02, -6.010033258939353e-02, -5.901441310883131e-02, -5.901441310883131e-02, -2.280283609976544e-02, -3.224616178134761e-02, -2.264688990737226e-02, -9.074678905410836e-02, -2.480137670090659e-02, -2.480137670090659e-02, -2.483158364569867e-03, -2.784151095658479e-03, -2.171747857524581e-03, -1.715698654471531e-02, -2.571098509502192e-03, -2.571098509502192e-03, -6.352363626025115e-02, -6.209155155789214e-02, -6.257096159906733e-02, -6.296657335184991e-02, -6.276590203707330e-02, -6.276590203707330e-02, -6.300379712741415e-02, -5.317737766880707e-02, -5.527838311703526e-02, -5.766810481738772e-02, -5.640371709662258e-02, -5.640371709662258e-02, -6.408385900838583e-02, -3.624150673961937e-02, -3.965864706918964e-02, -4.559694880450597e-02, -4.247449741127284e-02, -4.247449741127284e-02, -5.089550566673516e-02, -1.314140938565991e-02, -1.603709127160791e-02, -4.531004626728972e-02, -2.020181722821202e-02, -2.020181722821202e-02, -5.368541009072128e-03, -8.816774670625181e-04, -1.574599687910077e-03, -1.964879623671692e-02, -2.234199519732171e-03, -2.234199519732174e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_am05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.807321430627957e-01, -1.807323657547818e-01, -1.807332058434488e-01, -1.807295618636204e-01, -1.807322617855139e-01, -1.807322617855139e-01, -1.224509430448475e-01, -1.224520305995672e-01, -1.224831138353766e-01, -1.224358382726467e-01, -1.224516295132670e-01, -1.224516295132670e-01, -7.306990896903559e-02, -7.297857463780461e-02, -7.053732886275854e-02, -7.082028804141521e-02, -7.303690184325730e-02, -7.303690184325730e-02, -4.038129758203219e-02, -4.081712128074739e-02, -7.953610716851009e-02, -3.291236831858109e-02, -4.051385852446535e-02, -4.051385852446535e-02, -6.001668169330055e-03, -6.224319005574846e-03, -1.695287945185070e-02, -3.294438656764239e-03, -6.173450774978879e-03, -6.173450774978879e-03, -1.373713170975553e-01, -1.373909457500089e-01, -1.373733252799533e-01, -1.373885910578718e-01, -1.373814479330726e-01, -1.373814479330726e-01, -9.898549627653590e-02, -9.936252356798628e-02, -9.864668244917915e-02, -9.894096700755649e-02, -9.968513668392595e-02, -9.968513668392595e-02, -7.298985543542212e-02, -7.595883677575652e-02, -7.144109224466609e-02, -7.384809040973832e-02, -7.434407156240898e-02, -7.434407156240898e-02, -2.748966631126958e-02, -3.908833021835251e-02, -2.733592909062227e-02, -1.068730225425246e-01, -2.997759272475021e-02, -2.997759272475021e-02, -3.195941459455977e-03, -3.575766436198558e-03, -2.801709355890936e-03, -2.086165122848147e-02, -3.307080615290884e-03, -3.307080615290884e-03, -7.327882161997477e-02, -7.434711355545724e-02, -7.407851042174840e-02, -7.378950043356250e-02, -7.394369848017496e-02, -7.394369848017496e-02, -7.214387020793948e-02, -6.722978857284956e-02, -7.004784957906031e-02, -7.231402194523605e-02, -7.126020813507020e-02, -7.126020813507020e-02, -7.728809001154012e-02, -4.426869945986207e-02, -4.909189781633448e-02, -5.787240159820335e-02, -5.330250814209926e-02, -5.330250814209925e-02, -6.439675885170094e-02, -1.612893171186896e-02, -1.953383522628350e-02, -5.797923752995340e-02, -2.447292823950238e-02, -2.447292823950238e-02, -6.792927553581134e-03, -1.151209686301019e-03, -2.041393728353087e-03, -2.384541565200653e-02, -2.880879304939914e-03, -2.880879304939914e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_am05_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.203070201125471e-11, 5.203127119783584e-11, 5.203166010093571e-11, 5.202238326762391e-11, 5.203102015485385e-11, 5.203102015485385e-11, 2.245125945614481e-07, 2.245486466553219e-07, 2.254978935524052e-07, 2.236401278821595e-07, 2.245266001508837e-07, 2.245266001508837e-07, 2.580685463634562e-04, 2.553297847845661e-04, 1.883781137370663e-04, 1.859305139941447e-04, 2.570850214166820e-04, 2.570850214166820e-04, 1.975356710986951e-02, 2.079400927810765e-02, 1.698714855579504e-04, 1.525993409948078e-02, 2.008914084589886e-02, 2.008914084589886e-02, 7.366218473297650e-02, 7.327284960334349e-02, 2.368052040483623e-02, 5.844240724963205e-02, 7.627282198888548e-02, 7.627282198888548e-02, 5.807621677900855e-08, 5.835416408368439e-08, 5.810365173866192e-08, 5.831977113616225e-08, 5.821985164726008e-08, 5.821985164726008e-08, 1.101347253944305e-06, 1.101135139939023e-06, 1.065640687910876e-06, 1.065658275255983e-06, 1.149481760647200e-06, 1.149481760647200e-06, 1.172046946333562e-03, 1.924850424017228e-03, 1.399027210525213e-03, 2.425198953643738e-03, 1.118825960060468e-03, 1.118825960060468e-03, 1.343387673691231e-02, 6.935297524200995e-03, 1.582283546711610e-02, 1.059425103037228e-05, 1.660601419864836e-02, 1.660601419864836e-02, 6.230660888764961e-02, 6.128908168013238e-02, 1.825459873743295e-01, 2.306719244966619e-02, 9.175325389424012e-02, 9.175325389424012e-02, 3.260372616107446e-03, 2.622185304182284e-03, 2.826921508934311e-03, 3.002704999822219e-03, 2.912796608400484e-03, 2.912796608400484e-03, 3.957339730870148e-03, 1.247790604360174e-03, 1.640561027978822e-03, 2.215493218512192e-03, 1.900741707032275e-03, 1.900741707032278e-03, 1.492623800813840e-03, 4.957689116292323e-03, 4.674807586544847e-03, 5.106290736678345e-03, 4.977682791084627e-03, 4.977682791084630e-03, 1.831706022225126e-03, 2.002583297121237e-02, 1.948771648691556e-02, 1.013180269591724e-02, 2.341421312354214e-02, 2.341421312354220e-02, 5.372728390571684e-02, 1.216662351887958e-01, 9.854228653399477e-02, 2.940866591354880e-02, 1.369665722384324e-01, 1.369665722384325e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
