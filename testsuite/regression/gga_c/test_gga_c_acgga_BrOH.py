
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_acgga_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.684175078800025e-02, -5.684246631068771e-02, -5.684463272396171e-02, -5.683293716373886e-02, -5.684213670316862e-02, -5.684213670316862e-02, -4.480233337133115e-02, -4.480633514369118e-02, -4.491656374247328e-02, -4.472731789317933e-02, -4.480440161600152e-02, -4.480440161600152e-02, -2.763794812745864e-02, -2.742362648409526e-02, -2.187490728670383e-02, -2.216749427169994e-02, -2.756066824747352e-02, -2.756066824747352e-02, -9.746875389597275e-03, -1.044659259963874e-02, -3.457747053764804e-02, -2.803460302700385e-03, -9.962529278930553e-03, -9.962529278930553e-03, -1.883273181339824e-07, -2.317326635614172e-07, -4.282503294311782e-05, -5.044985815933105e-09, -2.294596462867218e-07, -2.294596462867218e-07, -6.188306247206098e-02, -6.207764295571743e-02, -6.190246893673574e-02, -6.205376470401741e-02, -6.198335479232365e-02, -6.198335479232365e-02, -2.350311358424164e-02, -2.396415240676137e-02, -2.287009673774150e-02, -2.322565739218917e-02, -2.466297575560475e-02, -2.466297575560475e-02, -4.000640692628809e-02, -5.664720569393142e-02, -3.857683669370131e-02, -5.145516446363880e-02, -4.240790849757108e-02, -4.240790849757108e-02, -7.688560622840518e-04, -4.920675032243934e-03, -8.413945672010269e-04, -7.278831090781319e-02, -1.630197352240737e-03, -1.630197352240737e-03, -4.534487383285057e-09, -8.321342912524342e-09, -6.137490437289705e-09, -1.746685285740170e-04, -7.928412274714807e-09, -7.928412274714807e-09, -6.155315037042658e-02, -5.661098267258348e-02, -5.828889441870739e-02, -5.965497813973909e-02, -5.896409423855208e-02, -5.896409423855208e-02, -6.172324684086557e-02, -3.028239116136987e-02, -3.732238054206989e-02, -4.523244209175352e-02, -4.110730515889741e-02, -4.110730515889742e-02, -5.670495428897587e-02, -8.239824017659336e-03, -1.320797253823676e-02, -2.552476836051346e-02, -1.889283460872535e-02, -1.889283460872534e-02, -2.858919903392474e-02, -2.619250215326635e-05, -9.515552140620022e-05, -3.013656998596551e-02, -5.364099214403187e-04, -5.364099214403153e-04, -2.884880341040141e-07, -3.555347729882225e-11, -6.110152255034946e-10, -5.409084337039550e-04, -5.435442751939885e-09, -5.435442755843013e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_acgga_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.308316830455388e-01, -1.308324878319705e-01, -1.308349358011140e-01, -1.308217804623425e-01, -1.308321170109743e-01, -1.308321170109743e-01, -1.104244649526276e-01, -1.104288574130175e-01, -1.105499240503737e-01, -1.103431778204305e-01, -1.104267618813316e-01, -1.104267618813316e-01, -7.708113656178489e-02, -7.681649015695746e-02, -6.875677013054196e-02, -6.928892387428093e-02, -7.698603910295888e-02, -7.698603910295888e-02, -3.724530817596550e-02, -3.898698516165053e-02, -8.615193047730471e-02, -1.389508728122285e-02, -3.779123632181115e-02, -3.779123632181115e-02, -1.180017605250133e-06, -1.450941867159342e-06, -2.585998758170437e-04, -3.196323767388226e-08, -1.436836767242748e-06, -1.436836767242748e-06, -1.295165069965531e-01, -1.296779610413921e-01, -1.295326483627839e-01, -1.296581926532273e-01, -1.295997974060558e-01, -1.295997974060558e-01, -7.700183863283602e-02, -7.790905088931678e-02, -7.575429787264014e-02, -7.647060104130755e-02, -7.922705877174992e-02, -7.922705877174992e-02, -8.343157315277670e-02, -8.226299694917481e-02, -8.191223041537073e-02, -8.165247589550638e-02, -8.473579391083043e-02, -8.473579391083043e-02, -4.266720843372039e-03, -2.254853550824183e-02, -4.643329264469744e-03, -1.168319704764498e-01, -8.563734692883672e-03, -8.563734692883672e-03, -2.873817803122641e-08, -5.264336734550850e-08, -3.887463721859113e-08, -1.026934696677598e-03, -5.017092145896647e-08, -5.017092146224083e-08, -7.553804075828237e-02, -7.988382811087893e-02, -7.859426480218039e-02, -7.740534775888386e-02, -7.802245702372797e-02, -7.802245702372797e-02, -7.365004038610234e-02, -7.610183888003673e-02, -8.053461365696436e-02, -8.200213770844147e-02, -8.166633504420633e-02, -8.166633504420633e-02, -8.416579821957862e-02, -3.394344471955325e-02, -4.719502408167094e-02, -6.698538488583496e-02, -5.815694253003685e-02, -5.815694253003686e-02, -7.324706637318711e-02, -1.590747700433802e-04, -5.670125786263716e-04, -6.861297516653538e-02, -3.030754982993761e-03, -3.030754982993753e-03, -1.804138341590562e-06, -2.282606845972256e-10, -3.894199866713925e-09, -3.054222556707573e-03, -3.443589070667875e-08, -3.443589071440499e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_acgga_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.859188287774625e-10, 1.859215824891385e-10, 1.859249942456788e-10, 1.858800875783079e-10, 1.859203551525637e-10, 1.859203551525637e-10, 1.037642839731163e-06, 1.037806546391168e-06, 1.042109120558051e-06, 1.033637936538665e-06, 1.037705400588420e-06, 1.037705400588420e-06, 1.648200485718393e-03, 1.636363699168464e-03, 1.315884361676923e-03, 1.291974938001624e-03, 1.643971361323649e-03, 1.643971361323649e-03, 2.100559527897511e-01, 2.176747494015491e-01, 9.696444552463684e-04, 1.648552931442546e-01, 2.126351562742766e-01, 2.126351562742766e-01, 4.259259823424624e-02, 4.567403001005739e-02, 8.416835393443593e-02, 8.715611912504573e-03, 4.756628097672189e-02, 4.756628097672189e-02, 2.691046039554708e-07, 2.707985980997654e-07, 2.692717711830433e-07, 2.705888562491382e-07, 2.699783448056030e-07, 2.699783448056030e-07, 6.144022624270177e-06, 6.117892492518453e-06, 5.969358865636815e-06, 5.950925817578817e-06, 6.358784784794358e-06, 6.358784784794358e-06, 5.956232056198041e-03, 7.613621830051777e-03, 7.237048299881846e-03, 9.875413645806746e-03, 5.479529598069510e-03, 5.479529598069510e-03, 1.105057896455470e-01, 7.370066414012116e-02, 1.353028999647796e-01, 5.754352231967643e-05, 1.655668717636243e-01, 1.655668717636243e-01, 8.987606957322685e-03, 1.105292244403031e-02, 3.271000660818026e-02, 1.299991632163950e-01, 1.690902514977196e-02, 1.690902515120427e-02, 1.172932408612292e-02, 1.002165652023779e-02, 1.056166402678538e-02, 1.102896255552050e-02, 1.078930936991369e-02, 1.078930936991369e-02, 1.385822411072847e-02, 7.622915553628350e-03, 8.632187583715062e-03, 9.945740654204784e-03, 9.251690209282355e-03, 9.251690209282354e-03, 6.057278809033729e-03, 5.059670338286343e-02, 4.328035090821948e-02, 3.426903468114877e-02, 4.000432383007496e-02, 4.000432383007498e-02, 1.155965267428589e-02, 5.908954517989605e-02, 8.869547564871730e-02, 5.820418834953344e-02, 1.846832760690758e-01, 1.846832760690759e-01, 3.514864511232024e-02, 3.041457918863733e-03, 7.041326337291052e-03, 2.377783503109042e-01, 2.281647802863026e-02, 2.281647803138380e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
