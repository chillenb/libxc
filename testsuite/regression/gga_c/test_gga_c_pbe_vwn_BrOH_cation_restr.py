
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_vwn_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.118981304870850e-02, -5.119066128142711e-02, -5.119307174363954e-02, -5.118048084199467e-02, -5.118727123607489e-02, -5.118727123607489e-02, -4.184770488486234e-02, -4.185288583022548e-02, -4.197290118115361e-02, -4.176468276700847e-02, -4.185393625152264e-02, -4.185393625152264e-02, -2.767762096413719e-02, -2.744198491444942e-02, -2.180065596908291e-02, -2.206080674040973e-02, -2.220662651456504e-02, -2.220662651456504e-02, -6.081810445891945e-03, -6.649290750066931e-03, -3.028883913179898e-02, -1.914279287062951e-03, -3.362836462019673e-03, -3.362836462019673e-03, -5.399541525154859e-09, -7.223728193156207e-09, -8.172220570042593e-06, -3.805508529684118e-10, -1.408450652636431e-09, -1.408450652636431e-09, -5.908947066585714e-02, -5.930111715625462e-02, -5.909819109360330e-02, -5.928502969647126e-02, -5.919714821797668e-02, -5.919714821797668e-02, -2.101601122801589e-02, -2.148118984464455e-02, -1.997941738545267e-02, -2.037727461781326e-02, -2.179564632746037e-02, -2.179564632746037e-02, -3.910647236195647e-02, -5.629113135630483e-02, -3.642549231267839e-02, -5.162495403021686e-02, -4.102770742081824e-02, -4.102770742081824e-02, -3.787670946582946e-04, -3.071480871538665e-03, -2.952047563026152e-04, -7.232149764681124e-02, -1.005242415260713e-03, -1.005242415260713e-03, -1.476432243234488e-10, -4.026422727949410e-10, -7.131602731190101e-10, -7.617381842567181e-05, -7.997551300120730e-10, -7.997551300120730e-10, -6.077729746245978e-02, -5.533365737275120e-02, -5.714786016166576e-02, -5.872877417779331e-02, -5.792896277703388e-02, -5.792896277703388e-02, -6.193355972525104e-02, -2.730712469523902e-02, -3.480532493862198e-02, -4.404158959253820e-02, -3.918661820252288e-02, -3.918661820252288e-02, -5.620032122793801e-02, -5.557486037940702e-03, -9.807734909531953e-03, -2.345268759961185e-02, -1.574680841545717e-02, -1.574680841545718e-02, -2.654803886571541e-02, -6.152727155866616e-06, -2.349013381984567e-05, -2.843424929508721e-02, -2.504243036565371e-04, -2.504243036565440e-04, -2.111467755721009e-08, -3.619014695497033e-12, -6.189791343599975e-11, -1.906815395426970e-04, -7.004775781924754e-10, -7.004775807613977e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_vwn_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.273989172169515e-01, -1.273999528027593e-01, -1.274029047832115e-01, -1.273875319206189e-01, -1.273958216874915e-01, -1.273958216874915e-01, -1.097531460463731e-01, -1.097592753137857e-01, -1.099011536671469e-01, -1.096558268006505e-01, -1.097606619238605e-01, -1.097606619238605e-01, -7.897407428418531e-02, -7.868401358197059e-02, -7.044243639086449e-02, -7.093415922279978e-02, -7.115951953593826e-02, -7.115951953593826e-02, -2.721296496705507e-02, -2.912345313105280e-02, -8.364063091332111e-02, -1.022757118969180e-02, -1.675608009191225e-02, -1.675608009191224e-02, -3.527985574123154e-08, -4.717456438606288e-08, -5.185928073874886e-05, -2.498092628416950e-09, -9.228819719583364e-09, -9.228819721512893e-09, -1.298492341125355e-01, -1.300315298100144e-01, -1.298567753016828e-01, -1.300177165906644e-01, -1.299420799916710e-01, -1.299420799916710e-01, -7.416093688406615e-02, -7.517909964597481e-02, -7.185964710980935e-02, -7.276541271244562e-02, -7.584137303750353e-02, -7.584137303750353e-02, -8.486001943845219e-02, -8.394174713316942e-02, -8.233023142952001e-02, -8.189288672619426e-02, -8.564388185134304e-02, -8.564388185134304e-02, -2.244417357880990e-03, -1.562679643186197e-02, -1.764866355229682e-03, -1.184564856332244e-01, -5.659172028044518e-03, -5.659172028044518e-03, -9.709399718426360e-10, -2.643517368243307e-09, -4.690208943563362e-09, -4.709334756043180e-04, -5.253309667310291e-09, -5.253309669595370e-09, -7.640720639357784e-02, -8.106223179806654e-02, -7.972291746946661e-02, -7.838461868582935e-02, -7.908180312373665e-02, -7.908180312373665e-02, -7.363126044252741e-02, -7.477488461451086e-02, -8.063508443249590e-02, -8.293636148575304e-02, -8.233977591103889e-02, -8.233977591103889e-02, -8.594194423683771e-02, -2.579697208570103e-02, -3.978899574196059e-02, -6.623392005683146e-02, -5.403934406104900e-02, -5.403934406104903e-02, -7.291131868155222e-02, -3.911820201757864e-05, -1.476038981145903e-04, -6.924327705574565e-02, -1.504502513471076e-03, -1.504502513471114e-03, -1.374758493393844e-07, -2.393354169270691e-11, -4.078979721351607e-10, -1.154917694328080e-03, -4.603628367874097e-09, -4.603628369486776e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_vwn_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.929350443878952e-10, 1.929385386303278e-10, 1.929433462296210e-10, 1.928915904100019e-10, 1.929202306832032e-10, 1.929202306832032e-10, 1.082443290207098e-06, 1.082665165695041e-06, 1.087681683564986e-06, 1.077977687535067e-06, 1.082581371636033e-06, 1.082581371636033e-06, 1.800448346694700e-03, 1.786960806384132e-03, 1.446291803771826e-03, 1.413440442748645e-03, 1.439595933073389e-03, 1.439595933073389e-03, 1.552882570463486e-01, 1.639971517110699e-01, 9.746900773463949e-04, 1.122048223601798e-01, 1.445155553191788e-01, 1.445155553191788e-01, 4.252686586127151e-03, 5.015624312738886e-03, 2.577969809376142e-02, 1.482477324281657e-03, 3.117537296802054e-03, 3.117537298239536e-03, 2.836040570815004e-07, 2.854755241394523e-07, 2.836787598143615e-07, 2.853307096600926e-07, 2.845559750389753e-07, 2.845559750389753e-07, 6.166671052389941e-06, 6.150292187750342e-06, 5.867032777497581e-06, 5.854789024593498e-06, 6.307716033286748e-06, 6.307716033286748e-06, 5.910076143537370e-03, 7.450826756940229e-03, 7.695379195408160e-03, 1.140206394291532e-02, 5.911150925837929e-03, 5.911150925837929e-03, 6.248361564590157e-02, 5.677935683661856e-02, 6.366370870208368e-02, 6.040797044745659e-05, 1.201026358083787e-01, 1.201026358083787e-01, 1.437254137819966e-03, 1.821392729737290e-03, 1.808482535167570e-02, 6.212951076737085e-02, 7.913200406956899e-03, 7.913200404741470e-03, 1.257201827798819e-02, 1.078676639398565e-02, 1.135324895468454e-02, 1.186994356781390e-02, 1.160587820731482e-02, 1.160587820731482e-02, 1.488645531564541e-02, 7.983236130406319e-03, 9.208334834328097e-03, 1.085573911079868e-02, 9.988249327292486e-03, 9.988249327292486e-03, 5.917447451527683e-03, 4.248074188145669e-02, 3.917713545663867e-02, 3.488314644530173e-02, 3.906248391464179e-02, 3.906248391464184e-02, 1.145891333740635e-02, 2.108486159504427e-02, 3.223231093746085e-02, 5.503840526322980e-02, 1.087309035786066e-01, 1.087309035786087e-01, 5.314141168784333e-03, 1.898401681049542e-03, 2.442586845539772e-03, 9.935084355851494e-02, 9.831835810456159e-03, 9.831835808629150e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
