
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.176401269912753e-01, -1.176394205585014e-01, -1.176377377243504e-01, -1.176482179276841e-01, -1.176425192123850e-01, -1.176425192123850e-01, -5.095934631942343e-02, -5.096229824554981e-02, -5.103124703063940e-02, -5.091468487538101e-02, -5.096324229472837e-02, -5.096324229472837e-02, -2.997186912096324e-02, -2.971759293386068e-02, -2.343392260536309e-02, -2.372600144214690e-02, -2.375432513430814e-02, -2.375432513430814e-02, -6.101802864797329e-03, -7.118822461093674e-03, -3.258632936862623e-02, 2.818251955610522e-03, 2.735862772234806e-03, 2.735862772234793e-03, -3.749661842220814e-03, -3.911415810012034e-03, -9.112005091322279e-03, -2.339648723890576e-03, -2.431124969803420e-03, -2.431124969803420e-03, -6.691624694166172e-02, -6.706420895827078e-02, -6.692234296011622e-02, -6.705294854095394e-02, -6.699140734867438e-02, -6.699140734867438e-02, -3.109607222324495e-02, -3.140607450156240e-02, -3.066335747255852e-02, -3.091779873532448e-02, -3.150632346713773e-02, -3.150632346713773e-02, -4.166102104951669e-02, -5.694076863537796e-02, -3.910059991192352e-02, -5.268106368464074e-02, -4.333928433553299e-02, -4.333928433553296e-02, 5.398918186705348e-03, 1.381462392515494e-03, 4.688630083839265e-03, -7.435489461882783e-02, 4.496496327051358e-03, 4.496496327051358e-03, -1.857383829078327e-03, -2.293453598907037e-03, -1.800042372265871e-03, -1.117313182906418e-03, -2.009040287530539e-03, -2.009040287530539e-03, -6.049723951570087e-02, -5.593009498983799e-02, -5.744917106334655e-02, -5.877238461626363e-02, -5.810265194814392e-02, -5.810265194814392e-02, -6.143040081489688e-02, -3.020967147300484e-02, -3.764688303531288e-02, -4.613587961935803e-02, -4.175572994870166e-02, -4.175572994870166e-02, -5.698550839661441e-02, -3.399650451657461e-03, -1.042246265758655e-02, -2.688396970827930e-02, -1.835603043025490e-02, -1.835603043025491e-02, -2.960653773191867e-02, -9.732856314155712e-03, -6.138933502142928e-03, -3.191850623409658e-02, 3.043881714855089e-03, 3.043881714855085e-03, -5.000923678827362e-03, -6.893540359314494e-04, -1.363612308210157e-03, 2.243781007779437e-03, -1.895979290551787e-03, -1.895979290551785e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.920667609812778e-02, -5.920710129137086e-02, -5.920711725484223e-02, -5.920783423912573e-02, -5.920961055567768e-02, -5.920881788145382e-02, -5.919924632997106e-02, -5.920176159638123e-02, -5.920308509012175e-02, -5.920729353965888e-02, -5.920308509012175e-02, -5.920729353965888e-02, -9.413138435260465e-02, -9.413371524439726e-02, -9.414331656474534e-02, -9.414597827637111e-02, -9.442534512082143e-02, -9.442182563191860e-02, -9.393419431528879e-02, -9.393179776998688e-02, -9.417830103227608e-02, -9.411438952848394e-02, -9.417830103227608e-02, -9.411438952848394e-02, -8.527141068925172e-02, -8.487995788144254e-02, -8.513819019963610e-02, -8.465955542755342e-02, -7.899795880612673e-02, -7.960319947713758e-02, -7.975147613594154e-02, -7.956064857628557e-02, -7.690050740500530e-02, -8.272123583140033e-02, -7.690050740500530e-02, -8.272123583140033e-02, -4.763978790894537e-02, -4.622070731324145e-02, -4.915134554203172e-02, -4.745105732375247e-02, -9.062145236574209e-02, -8.710462812820308e-02, -2.579905824826828e-02, -2.555331253718289e-02, -2.419109950784424e-02, -5.070037345456998e-02, -2.419109950784424e-02, -5.070037345456996e-02, -5.006644215569282e-03, -4.585142860094765e-03, -5.239369756494538e-03, -4.738308540860106e-03, 5.531466552378273e-03, 6.772162371975286e-03, -2.992155483444885e-03, -3.060940804374044e-03, -2.705626904148615e-03, -5.329467168185357e-03, -2.705626904148615e-03, -5.329467168185357e-03, -1.191461402581606e-01, -1.191959202407351e-01, -1.195301335228371e-01, -1.195812885866440e-01, -1.191615448396081e-01, -1.192122537867565e-01, -1.195015327500158e-01, -1.195515322061654e-01, -1.193417350553717e-01, -1.193924585383906e-01, -1.193417350553717e-01, -1.193924585383906e-01, -5.593967501280985e-02, -5.594592183001589e-02, -5.727802605130471e-02, -5.731185982394050e-02, -5.249561202196011e-02, -5.228344782309298e-02, -5.369948702319368e-02, -5.347743361210378e-02, -5.814648923229460e-02, -5.869275685330807e-02, -5.814648923229460e-02, -5.869275685330807e-02, -8.453125459723619e-02, -8.483894250420310e-02, -8.107741602231520e-02, -8.101252110107979e-02, -8.474383740123807e-02, -8.074953777058347e-02, -8.115708965538504e-02, -7.678208550048204e-02, -8.185502920101177e-02, -8.795951073954547e-02, -8.185502920101174e-02, -8.795951073954543e-02, 4.952522957634319e-03, 5.033128480064614e-03, -3.450800205570444e-02, -3.438572971273322e-02, 8.007720502913063e-03, 8.476709575125620e-03, -1.171448550400583e-01, -1.172325989975049e-01, -1.403384396607945e-02, -1.330963332440288e-02, -1.403384396607945e-02, -1.330963332440288e-02, -2.474941310614205e-03, -2.352929161739566e-03, -2.997281841043867e-03, -2.937139562899203e-03, -2.390737493230361e-03, -2.214965481546758e-03, 1.707549622060302e-02, 1.715971038955234e-02, -3.401497345187529e-03, -2.267303217009041e-03, -3.401497345187529e-03, -2.267303217009040e-03, -7.477693795506286e-02, -7.420769127820380e-02, -7.850497366892628e-02, -7.796004996505403e-02, -7.738255080958116e-02, -7.682782031924673e-02, -7.631033077810823e-02, -7.575204080231582e-02, -7.686397748654042e-02, -7.630755606700451e-02, -7.686397748654042e-02, -7.630755606700451e-02, -7.242127882825053e-02, -7.193077435080118e-02, -7.980425784922016e-02, -7.939702718386012e-02, -8.164835647671174e-02, -8.117354727250153e-02, -8.093330705888661e-02, -8.050477499147912e-02, -8.162760899724614e-02, -8.120335057870638e-02, -8.162760899724614e-02, -8.120335057870638e-02, -8.312677620179502e-02, -8.289247326358483e-02, -4.674754552644105e-02, -4.653798404793839e-02, -5.823122361416924e-02, -5.772203547926755e-02, -7.187346367468701e-02, -7.141554644469610e-02, -6.608760106065142e-02, -6.611107295633327e-02, -6.608760106065144e-02, -6.611107295633327e-02, -7.814360826238227e-02, -7.751299980944082e-02, 3.768799800265456e-03, 3.928308184394098e-03, 1.535374510815798e-02, 1.601289462940270e-02, -7.134927470448635e-02, -6.998951685654020e-02, 6.978667400996471e-03, 7.510641645388276e-03, 6.978667400996422e-03, 7.510641645388225e-03, -6.426839957691954e-03, -6.085818297955117e-03, -9.055896220677560e-04, -9.031503149060812e-04, -1.852362499638901e-03, -1.713360397592268e-03, 1.020061138765575e-02, 1.036475719252416e-02, -3.101170198287174e-03, -2.153758990816631e-03, -3.101170198287173e-03, -2.153758990816629e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.992847368409961e-10, -3.985694736819921e-10, -1.992847368409961e-10, -1.992841339147617e-10, -3.985682678295233e-10, -1.992841339147617e-10, -1.992778401501803e-10, -3.985556803003606e-10, -1.992778401501803e-10, -1.992868700078032e-10, -3.985737400156064e-10, -1.992868700078032e-10, -1.992826587496666e-10, -3.985653174993331e-10, -1.992826587496666e-10, -1.992826587496666e-10, -3.985653174993331e-10, -1.992826587496666e-10, 6.100263047055173e-07, 1.220052609411035e-06, 6.100263047055173e-07, 6.103117640000376e-07, 1.220623528000075e-06, 6.103117640000376e-07, 6.168380690057340e-07, 1.233676138011468e-06, 6.168380690057340e-07, 6.047862425425480e-07, 1.209572485085096e-06, 6.047862425425480e-07, 6.102748198750146e-07, 1.220549639750029e-06, 6.102748198750146e-07, 6.102748198750146e-07, 1.220549639750029e-06, 6.102748198750146e-07, 1.949005891200170e-03, 3.898011782400340e-03, 1.949005891200170e-03, 1.939252197873430e-03, 3.878504395746859e-03, 1.939252197873430e-03, 1.672800513031751e-03, 3.345601026063502e-03, 1.672800513031751e-03, 1.628589633260033e-03, 3.257179266520066e-03, 1.628589633260033e-03, 1.651965817638955e-03, 3.303931635277910e-03, 1.651965817638955e-03, 1.651965817638955e-03, 3.303931635277910e-03, 1.651965817638955e-03, 3.167775120803380e-01, 6.335550241606760e-01, 3.167775120803380e-01, 3.162111472325586e-01, 6.324222944651172e-01, 3.162111472325586e-01, 1.029600725881016e-03, 2.059201451762032e-03, 1.029600725881016e-03, 4.302281916570422e-01, 8.604563833140844e-01, 4.302281916570422e-01, 3.643250572229914e-01, 7.286501144459828e-01, 3.643250572229914e-01, 3.643250572229913e-01, 7.286501144459826e-01, 3.643250572229913e-01, -5.433163092392472e+00, -1.086632618478494e+01, -5.433163092392472e+00, -7.260820960347710e+00, -1.452164192069542e+01, -7.260820960347710e+00, -1.023687570521338e+01, -2.047375141042675e+01, -1.023687570521338e+01, -5.180222485032708e-01, -1.036044497006542e+00, -5.180222485032708e-01, -2.938434134256406e+00, -5.876868268512811e+00, -2.938434134256406e+00, -2.938434134256429e+00, -5.876868268512858e+00, -2.938434134256429e+00, 1.950279916052194e-07, 3.900559832104387e-07, 1.950279916052194e-07, 1.975268505110365e-07, 3.950537010220730e-07, 1.975268505110365e-07, 1.951289502500160e-07, 3.902579005000320e-07, 1.951289502500160e-07, 1.973347484523948e-07, 3.946694969047896e-07, 1.973347484523948e-07, 1.962989113508993e-07, 3.925978227017985e-07, 1.962989113508993e-07, 1.962989113508993e-07, 3.925978227017985e-07, 1.962989113508993e-07, 2.078307492434824e-06, 4.156614984869647e-06, 2.078307492434824e-06, 2.186362695513926e-06, 4.372725391027851e-06, 2.186362695513926e-06, 1.623718563762003e-06, 3.247437127524005e-06, 1.623718563762003e-06, 1.723831440082599e-06, 3.447662880165198e-06, 1.723831440082599e-06, 2.364398886741060e-06, 4.728797773482119e-06, 2.364398886741060e-06, 2.364398886741060e-06, 4.728797773482119e-06, 2.364398886741060e-06, 5.565119041826174e-03, 1.113023808365235e-02, 5.565119041826174e-03, 6.265163802878281e-03, 1.253032760575656e-02, 6.265163802878281e-03, 7.339069630280453e-03, 1.467813926056091e-02, 7.339069630280453e-03, 9.618808480576869e-03, 1.923761696115374e-02, 9.618808480576869e-03, 5.469469618802833e-03, 1.093893923760567e-02, 5.469469618802833e-03, 5.469469618802833e-03, 1.093893923760567e-02, 5.469469618802833e-03, 1.313837259241460e-01, 2.627674518482920e-01, 1.313837259241460e-01, 1.741000094797138e-01, 3.482000189594276e-01, 1.741000094797138e-01, -5.699292662914029e-03, -1.139858532582806e-02, -5.699292662914029e-03, 5.471020728455250e-05, 1.094204145691050e-04, 5.471020728455250e-05, 5.661456166618740e-01, 1.132291233323748e+00, 5.661456166618740e-01, 5.661456166618740e-01, 1.132291233323748e+00, 5.661456166618740e-01, -4.698667609291960e-01, -9.397335218583921e-01, -4.698667609291960e-01, -9.202541500512857e-01, -1.840508300102571e+00, -9.202541500512857e-01, -2.316382209518245e+02, -4.632764419036490e+02, -2.316382209518245e+02, -2.579636811927400e+00, -5.159273623854800e+00, -2.579636811927400e+00, -3.260020428483624e+01, -6.520040856967249e+01, -3.260020428483624e+01, -3.260020428483609e+01, -6.520040856967218e+01, -3.260020428483609e+01, 1.063032895585910e-02, 2.126065791171819e-02, 1.063032895585910e-02, 9.016913280607464e-03, 1.803382656121493e-02, 9.016913280607464e-03, 9.466855940172074e-03, 1.893371188034415e-02, 9.466855940172074e-03, 9.917223467418305e-03, 1.983444693483661e-02, 9.917223467418305e-03, 9.681257966913033e-03, 1.936251593382607e-02, 9.681257966913033e-03, 9.681257966913033e-03, 1.936251593382607e-02, 9.681257966913033e-03, 1.295612976160192e-02, 2.591225952320384e-02, 1.295612976160192e-02, 8.448164307989213e-03, 1.689632861597843e-02, 8.448164307989213e-03, 8.864765850186834e-03, 1.772953170037367e-02, 8.864765850186834e-03, 9.584407846779643e-03, 1.916881569355929e-02, 9.584407846779643e-03, 9.194818743640800e-03, 1.838963748728160e-02, 9.194818743640800e-03, 9.194818743640800e-03, 1.838963748728160e-02, 9.194818743640800e-03, 5.006801053355767e-03, 1.001360210671153e-02, 5.006801053355767e-03, 9.519805576952919e-02, 1.903961115390584e-01, 9.519805576952919e-02, 6.429900458755097e-02, 1.285980091751019e-01, 6.429900458755097e-02, 3.700700555862552e-02, 7.401401111725103e-02, 3.700700555862552e-02, 4.989251333103937e-02, 9.978502666207874e-02, 4.989251333103937e-02, 4.989251333103939e-02, 9.978502666207878e-02, 4.989251333103939e-02, 1.210906614884137e-02, 2.421813229768274e-02, 1.210906614884137e-02, -1.017886297973208e+01, -2.035772595946416e+01, -1.017886297973208e+01, -5.775811589686978e+00, -1.155162317937396e+01, -5.775811589686978e+00, 5.240177623329669e-02, 1.048035524665934e-01, 5.240177623329669e-02, -6.003171174053202e-02, -1.200634234810640e-01, -6.003171174053202e-02, -6.003171174053203e-02, -1.200634234810641e-01, -6.003171174053203e-02, -6.753910454811358e+00, -1.350782090962272e+01, -6.753910454811358e+00, -1.034657843692385e+00, -2.069315687384770e+00, -1.034657843692385e+00, -2.386332735714215e+00, -4.772665471428430e+00, -2.386332735714215e+00, -4.940174432915057e-01, -9.880348865830114e-01, -4.940174432915057e-01, -5.671590251617221e+01, -1.134318050323444e+02, -5.671590251617221e+01, -5.671590251617241e+01, -1.134318050323448e+02, -5.671590251617241e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
