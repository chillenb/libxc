
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tm_lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.853301649505531e-02, -5.853313019502755e-02, -5.853345751737904e-02, -5.853176948248629e-02, -5.853267935217900e-02, -5.853267935217900e-02, -5.308209167258081e-02, -5.308327979136257e-02, -5.311083584793140e-02, -5.306375670204753e-02, -5.308362428288171e-02, -5.308362428288171e-02, -3.469231963405057e-02, -3.454208976367155e-02, -3.029453838100918e-02, -3.059993474731998e-02, -3.069956946715313e-02, -3.069956946715313e-02, -5.051029663852046e-03, -6.191036484978893e-03, -3.775717377898274e-02, 5.096503499222504e-03, 4.268450708183314e-04, 4.268450708183421e-04, -1.889424585515722e-03, -1.983686771438617e-03, -8.261375496760563e-03, -1.113824666587252e-03, -1.389501784048944e-03, -1.389501784048944e-03, -5.724998079778426e-02, -5.727395656566436e-02, -5.725097647704988e-02, -5.727214464238302e-02, -5.726219891667932e-02, -5.726219891667932e-02, -4.090642761279387e-02, -4.131030569737665e-02, -4.005044978866016e-02, -4.042314947106117e-02, -4.153124808925945e-02, -4.153124808925945e-02, -3.836457425969266e-02, -4.354395143394629e-02, -3.656341382265212e-02, -4.135525732577322e-02, -3.916781162889290e-02, -3.916781162889290e-02, 7.649713197480918e-03, 7.642507754902291e-03, 5.267753206353229e-03, -5.447274698274328e-02, 4.486808254546493e-03, 4.486808254546493e-03, -8.649899444361017e-04, -1.089554214285321e-03, -8.385972904138086e-04, -5.473800261429810e-03, -1.005856408600484e-03, -1.005856408600484e-03, -4.349940132575816e-02, -4.250107153870877e-02, -4.285410810574113e-02, -4.314466514722511e-02, -4.299956760453753e-02, -4.299956760453753e-02, -4.339292641811809e-02, -3.119043179935627e-02, -3.537015383406129e-02, -3.898866322647344e-02, -3.724332918974023e-02, -3.724332918974023e-02, -4.400769067596776e-02, 9.762319379841525e-04, -8.989604131766605e-03, -2.550610816128162e-02, -1.793253934702778e-02, -1.793253934702778e-02, -2.989991938858950e-02, -8.118908488468642e-03, -7.550275527983860e-03, -2.814012051018829e-02, -2.128349974531618e-03, -2.128349974531621e-03, -2.614851173324813e-03, -2.972836078283144e-04, -6.188663854283664e-04, -3.166498734298063e-03, -9.325143757932472e-04, -9.325143757932463e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tm_lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.881422954749293e-02, -6.881404359033622e-02, -6.881351670617313e-02, -6.881627732798169e-02, -6.881478811619186e-02, -6.881478811619186e-02, -6.996813381164350e-02, -6.996613426476875e-02, -6.991998535937992e-02, -7.000057772607059e-02, -6.996577719439173e-02, -6.996577719439173e-02, -6.820952142023810e-02, -6.841967620475009e-02, -7.448295583656202e-02, -7.426758177920270e-02, -7.404326638830885e-02, -7.404326638830885e-02, -5.385345303960191e-02, -5.321650826417552e-02, -6.808421395636183e-02, -5.131695413513045e-02, -5.236998823643997e-02, -5.236998823643997e-02, -2.488953516358950e-03, -2.611539841076929e-03, -1.030156575419799e-02, -1.474577033075639e-03, -1.836293174254613e-03, -1.836293174254613e-03, -6.603743138457435e-02, -6.599801425199103e-02, -6.603580420809937e-02, -6.600100272415849e-02, -6.601733875697971e-02, -6.601733875697971e-02, -8.370384475453027e-02, -8.312739017981738e-02, -8.508027414246450e-02, -8.454502609476942e-02, -8.274024292417440e-02, -8.274024292417440e-02, -5.759389807979699e-02, -5.196243556613904e-02, -5.773820452328838e-02, -5.137706461327957e-02, -5.684477878294540e-02, -5.684477878294540e-02, -3.503860719898073e-02, -6.870078056905222e-02, -3.007336646920654e-02, -6.027476576006957e-02, -4.073186812225615e-02, -4.073186812225615e-02, -1.146973805440031e-03, -1.442670009328122e-03, -1.112164958757942e-03, -1.428169289527338e-02, -1.332560477669834e-03, -1.332560477669834e-03, -4.940926686152895e-02, -5.083589111624168e-02, -5.033144627723712e-02, -4.991600074007440e-02, -5.012343414495193e-02, -5.012343414495193e-02, -4.863889724555091e-02, -6.269598046106964e-02, -5.776076063682668e-02, -5.354439457277825e-02, -5.555171230263674e-02, -5.555171230263674e-02, -5.275085163735006e-02, -7.300892434724907e-02, -6.874908807778053e-02, -5.737107482960624e-02, -6.246979149507451e-02, -6.246979149507451e-02, -6.150822770955122e-02, -1.009566392636462e-02, -1.131889228939371e-02, -5.190260882119131e-02, -2.123902803464764e-02, -2.123902803464763e-02, -3.428474620737328e-03, -3.956285462860697e-04, -8.219067021740969e-04, -1.902473678623228e-02, -1.235976902575381e-03, -1.235976902575380e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tm_lyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.535834653516825e-11, 2.535799113208398e-11, 2.535630148748299e-11, 2.536159164515375e-11, 2.535883514017644e-11, 2.535883514017644e-11, 2.463181249349644e-07, 2.463154137239039e-07, 2.462219902351931e-07, 2.461459771029193e-07, 2.462845967865671e-07, 2.462845967865671e-07, 1.049808332492741e-03, 1.055543506916070e-03, 1.205442590921047e-03, 1.157313014743443e-03, 1.167354758342440e-03, 1.167354758342440e-03, 4.023435171434926e-01, 3.816979498115922e-01, 4.894036364808943e-04, 9.671677449005575e-01, 6.832997043002899e-01, 6.832997043002901e-01, 2.688320761684276e-16, 3.097590953006828e-15, 1.041419125730002e+00, 2.708040331665630e-32, 1.758049890525059e-24, 1.758049890525059e-24, 3.157487769868300e-08, 3.154544914822445e-08, 3.157341122117907e-08, 3.154743267140349e-08, 3.156001605604050e-08, 3.156001605604050e-08, 4.646593652780557e-06, 4.477981223584245e-06, 4.774492708958901e-06, 4.620192724951761e-06, 4.493558404960750e-06, 4.493558404960750e-06, 2.025263418567523e-03, 1.349840517069539e-03, 2.953196788278645e-03, 2.447379385700023e-03, 1.873128818933142e-03, 1.873128818933142e-03, 2.242925774477163e+00, 4.002178442629888e-01, 2.529623654682425e+00, 5.128820292470242e-06, 1.633892558362556e+00, 1.633892558362556e+00, 8.874123726634750e-44, 3.540056009352194e-33, 2.087538901014021e-45, 3.062372516787180e+00, 1.461947525119055e-36, 1.461947525119055e-36, 1.977954856878442e-03, 2.034264557633736e-03, 2.014236215142571e-03, 1.997914757180954e-03, 2.006064719242363e-03, 2.006064719242363e-03, 2.261452285650169e-03, 4.723389189664188e-03, 3.787178736587957e-03, 3.067793656197382e-03, 3.412813343661967e-03, 3.412813343661967e-03, 1.069541946273987e-03, 1.680145534900190e-01, 7.999006785949728e-02, 2.383918675324004e-02, 4.425700466270149e-02, 4.425700466270147e-02, 6.996855135326653e-03, 8.587894307402093e-01, 2.337182038145237e+00, 2.809622663976224e-02, 2.983267601786390e+00, 2.983267601786391e+00, 3.365287530467001e-10, 2.034355318745661e-144, 1.741919129032589e-64, 3.091998295325172e+00, 4.853963304916458e-40, 4.853963304916066e-40]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
