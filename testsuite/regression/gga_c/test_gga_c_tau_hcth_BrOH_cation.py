
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tau_hcth_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.324165576738214e-01, -1.324149592805962e-01, -1.324105470625183e-01, -1.324342709054933e-01, -1.324214577591336e-01, -1.324214577591336e-01, -1.015799365474951e-01, -1.015724535295800e-01, -1.013996774698219e-01, -1.017044639182489e-01, -1.015715906799356e-01, -1.015715906799356e-01, -7.142969745273157e-02, -7.156357205113920e-02, -7.318691186685237e-02, -7.339506183698323e-02, -7.158973595468134e-02, -7.158973595468134e-02, -1.808903796130439e-02, -2.137093394193107e-02, -7.350220438200737e-02, 2.645984588383431e-02, 1.402719803112858e-02, 1.402719803112862e-02, 1.577776183924515e-02, 1.648003737391602e-02, 6.228110108223950e-02, 9.604904563600232e-03, 5.859149305884533e-03, 5.859149305884535e-03, -8.586195702054183e-02, -8.556085911827128e-02, -8.584956936033961e-02, -8.558374727403117e-02, -8.570863464491484e-02, -8.570863464491484e-02, -1.043963551851001e-01, -1.046401879754720e-01, -1.040287206583514e-01, -1.043262711606623e-01, -1.046089654146378e-01, -1.046089654146378e-01, -5.545044788530808e-02, -3.394195813451699e-02, -5.658110230838372e-02, -3.590960324828500e-02, -5.312415525715437e-02, -5.312415525715435e-02, 6.806146247959800e-02, 9.909763155448273e-03, 7.019369722282089e-02, -4.765068065340612e-02, 4.618915002512866e-02, 4.618915002512866e-02, 7.505423789714140e-03, 9.403944570499286e-03, 7.245823015173165e-03, 7.278153671006132e-02, 6.913412972123522e-03, 6.913412972123518e-03, -2.991816624507285e-02, -3.249488540514679e-02, -3.083912684664052e-02, -2.994512575726324e-02, -3.032030981213843e-02, -3.032030981213843e-02, -3.104540167262119e-02, -6.330507537595918e-02, -5.714867585859305e-02, -4.575645414991868e-02, -5.210203241554429e-02, -5.210203241554429e-02, -3.547369252039504e-02, -1.594153200862082e-02, -3.921215349056780e-02, -5.653863624025107e-02, -5.257923989895375e-02, -5.257923989895375e-02, -6.163282201315747e-02, 6.140511531955550e-02, 7.102556636855578e-02, -5.193771013686960e-02, 6.698703146541490e-02, 6.698703146541492e-02, 2.153790239768218e-02, 2.656046156658977e-03, 5.393249753211617e-03, 6.894753980677241e-02, 6.715290773237580e-03, 6.715290773237589e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tau_hcth_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [9.174188968507465e-03, 9.173867607898572e-03, 9.175255674776915e-03, 9.175233386920372e-03, 9.179314193554083e-03, 9.178119876622558e-03, 9.159561062301799e-03, 9.161746756207076e-03, 9.166292443070366e-03, 9.174501157136757e-03, 9.166292443070366e-03, 9.174501157136757e-03, -1.178787074524826e-02, -1.180812939551833e-02, -1.177309279730332e-02, -1.179481106707966e-02, -1.145265230861254e-02, -1.146779608926089e-02, -1.201559645058983e-02, -1.203343002371645e-02, -1.178812017999858e-02, -1.177437734348712e-02, -1.178812017999858e-02, -1.177437734348712e-02, -4.474061248135428e-02, -4.323564440320314e-02, -4.608955912133930e-02, -4.418230303081108e-02, -7.547219354353762e-02, -8.051415735832723e-02, -7.716543780069240e-02, -7.556922030554820e-02, -5.742220598670408e-02, -1.141910577047981e-01, -5.742220598670408e-02, -1.141910577047981e-01, -1.636034569943034e-01, -1.341125056898169e-01, -1.607129278024428e-01, -1.286316569982202e-01, -3.984127924974883e-02, -3.261510963476936e-02, -1.431537049752251e-01, -1.357397290709129e-01, -2.415245072036341e-02, -4.450992451915042e-01, -2.415245072036335e-02, -4.450992451915056e-01, 2.352589723620332e-02, 1.779252155921013e-02, 2.500478721505646e-02, 1.822817842912497e-02, 6.988544083431177e-02, 5.492105339539155e-02, 1.209028688724186e-02, 1.308002318077372e-02, 1.956758170399787e-03, 3.897475688508135e-02, 1.956758170399792e-03, 3.897475688508141e-02, 8.686857793084216e-03, 8.675902353315735e-03, 8.630731064092567e-03, 8.633461565866470e-03, 8.680822561198922e-03, 8.678155780814743e-03, 8.641248982578372e-03, 8.630920789022632e-03, 8.656591286084082e-03, 8.657699403360253e-03, 8.656591286084082e-03, 8.657699403360253e-03, -1.196806656211622e-01, -1.197033215514584e-01, -1.154406523057800e-01, -1.155730248276107e-01, -1.308403205208341e-01, -1.287655021672726e-01, -1.269884435477770e-01, -1.249819154601474e-01, -1.106011839489802e-01, -1.146598273217338e-01, -1.106011839489802e-01, -1.146598273217338e-01, -3.928138871470985e-03, -4.197825850217284e-03, -1.277752832543584e-02, -1.389155452898944e-02, -9.850332234412338e-03, -7.224120407624127e-03, -6.490104769873699e-03, -3.039665528710523e-03, 5.034260699486742e-04, -3.040311280326017e-03, 5.034260699486436e-04, -3.040311280326036e-03, -4.066297309055256e-02, -3.695024458078027e-02, -1.702202110506365e-01, -1.664278183241554e-01, -2.693966613119698e-02, -1.971361069710422e-02, -2.014372070250960e-02, -2.027870982730064e-02, -1.267814379105132e-01, -7.300173650805478e-02, -1.267814379105132e-01, -7.300173650805478e-02, 1.081216042062785e-02, 9.009419152375377e-03, 1.275579101933428e-02, 1.188711340871091e-02, 1.091354034359073e-02, 8.314891406653495e-03, 3.494901268522392e-02, 3.302267411925162e-02, 2.096873850585456e-02, 4.491475131976965e-03, 2.096873850585458e-02, 4.491475131976958e-03, -3.680499213039888e-02, -3.692443419599025e-02, -1.419375694549867e-02, -1.464141236574812e-02, -2.143085028689946e-02, -2.192160806103377e-02, -2.844510333077538e-02, -2.873080229905230e-02, -2.486748740518422e-02, -2.526276283649926e-02, -2.486748740518422e-02, -2.526276283649926e-02, -4.056807693325370e-02, -4.032325399678483e-02, -3.772338039497681e-02, -3.692223805441694e-02, -1.173624979737954e-02, -1.140932081995012e-02, 1.897246191052138e-03, 1.960255904993766e-03, -2.728840695591313e-03, -2.530762367808795e-03, -2.728840695591313e-03, -2.530762367808795e-03, -9.994341429528529e-03, -1.152827290245962e-02, -1.744478005622781e-01, -1.695819713548169e-01, -1.437096553856829e-01, -1.359310673227428e-01, -4.569143906137634e-02, -4.460255941371240e-02, -9.121417631326272e-02, -9.079764255471760e-02, -9.121417631326260e-02, -9.079764255471748e-02, -3.913076809063445e-02, -3.777555662404820e-02, 6.394709747240401e-02, 6.204531446584521e-02, 6.191691911950827e-02, 5.400881758825560e-02, -2.242207044057171e-02, -2.070126027950459e-02, -2.037931303851553e-02, -5.402329221910077e-03, -2.037931303851519e-02, -5.402329221910052e-03, 2.986517485847213e-02, 2.539822090770589e-02, 3.538528807994010e-03, 3.499113135133329e-03, 8.266585307438613e-03, 6.146298859406370e-03, -1.810352609827982e-04, -4.297444219400605e-04, 1.854736776135521e-02, 4.674567293865559e-03, 1.854736776135521e-02, 4.674567293865568e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tau_hcth_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.580396898464915e-10, 0.000000000000000e+00, -7.580468074850822e-10, -7.580487703192641e-10, 0.000000000000000e+00, -7.580566788399549e-10, -7.580597488552229e-10, 0.000000000000000e+00, -7.580606059358574e-10, -7.579149591125598e-10, 0.000000000000000e+00, -7.579248373025742e-10, -7.580079907961808e-10, 0.000000000000000e+00, -7.579886824503624e-10, -7.580079907961808e-10, 0.000000000000000e+00, -7.579886824503624e-10, -3.149728565341272e-06, 0.000000000000000e+00, -3.152595528272280e-06, -3.150425592384830e-06, 0.000000000000000e+00, -3.153496656058904e-06, -3.169037287474015e-06, 0.000000000000000e+00, -3.171153439821617e-06, -3.134492866296949e-06, 0.000000000000000e+00, -3.137066209255447e-06, -3.152612034212803e-06, 0.000000000000000e+00, -3.150902374346480e-06, -3.152612034212803e-06, 0.000000000000000e+00, -3.150902374346480e-06, -2.518719980559380e-03, 0.000000000000000e+00, -2.618346848285426e-03, -2.419930333031419e-03, 0.000000000000000e+00, -2.542125341013767e-03, -3.403767744222934e-04, 0.000000000000000e+00, -1.474105435001615e-04, -3.120582960003852e-04, 0.000000000000000e+00, -3.727724288380466e-04, -1.061607676357891e-03, 0.000000000000000e+00, 1.079031159254500e-03, -1.061607676357891e-03, 0.000000000000000e+00, 1.079031159254500e-03, 2.210985018471046e+00, 0.000000000000000e+00, 1.606111758122328e+00, 2.103936002100237e+00, 0.000000000000000e+00, 1.459520523201988e+00, -1.694253305903682e-03, 0.000000000000000e+00, -1.717978366780682e-03, 4.893839714686032e+00, 0.000000000000000e+00, 4.380502533458379e+00, 2.255055305515307e-01, 0.000000000000000e+00, 4.290408914355623e+01, 2.255055305515322e-01, 0.000000000000000e+00, 4.290408914355623e+01, 5.765520625237744e+01, 0.000000000000000e+00, 3.539003757645582e+01, 6.245690711468423e+01, 0.000000000000000e+00, 3.592272731890493e+01, 2.354743872390144e+01, 0.000000000000000e+00, 1.519741923172593e+01, 4.048832835270461e+01, 0.000000000000000e+00, 4.634936072011760e+01, 6.026039389659105e+00, 0.000000000000000e+00, 5.669169551826922e+02, 6.026039389653384e+00, 0.000000000000000e+00, 5.669169551824760e+02, -8.190083615104352e-07, 0.000000000000000e+00, -8.201606800011763e-07, -8.218249944382740e-07, 0.000000000000000e+00, -8.229538853894267e-07, -8.191265071276244e-07, 0.000000000000000e+00, -8.202629440919732e-07, -8.215920889027644e-07, 0.000000000000000e+00, -8.227511645376618e-07, -8.204583482092798e-07, 0.000000000000000e+00, -8.215814518725242e-07, -8.204583482092798e-07, 0.000000000000000e+00, -8.215814518725242e-07, 1.223060790220959e-06, 0.000000000000000e+00, 1.225510176479612e-06, 1.868519943620265e-07, 0.000000000000000e+00, 2.003897530749372e-07, 3.708129809800652e-06, 0.000000000000000e+00, 3.417166088803763e-06, 2.738643993414935e-06, 0.000000000000000e+00, 2.460675354266094e-06, -7.592373514686967e-07, 0.000000000000000e+00, -1.794895492069895e-07, -7.592373514686967e-07, 0.000000000000000e+00, -1.794895492069895e-07, -1.569740392091782e-02, 0.000000000000000e+00, -1.598271794362525e-02, -1.665952269710451e-02, 0.000000000000000e+00, -1.624943985039284e-02, -2.113185390480456e-02, 0.000000000000000e+00, -1.789150079445345e-02, -3.537831640922823e-02, 0.000000000000000e+00, -2.894038337039857e-02, -1.430731972488426e-02, 0.000000000000000e+00, -1.919433286895682e-02, -1.430731972488426e-02, 0.000000000000000e+00, -1.919433286895681e-02, 8.413767265382949e+00, 0.000000000000000e+00, 7.793339383278371e+00, 1.666486865697407e+00, 0.000000000000000e+00, 1.600295933231727e+00, 1.160114205319279e+01, 0.000000000000000e+00, 7.613034842517232e+00, -9.120113199015552e-05, 0.000000000000000e+00, -9.135101814320904e-05, 9.900468752661752e+00, 0.000000000000000e+00, 6.195730183582629e+00, 9.900468752661752e+00, 0.000000000000000e+00, 6.195730183582629e+00, 6.818396904301741e+01, 0.000000000000000e+00, 5.007379922562001e+01, 5.430167596190481e+01, 0.000000000000000e+00, 4.814412048207462e+01, 4.067227855046222e+02, 0.000000000000000e+00, 2.563284154968334e+02, 1.788368104740834e+01, 0.000000000000000e+00, 1.702714207270645e+01, 4.663461175150620e+02, 0.000000000000000e+00, 3.620886972841265e+01, 4.663461175148567e+02, 0.000000000000000e+00, 3.620886972843031e+01, 8.866755698399689e-03, 0.000000000000000e+00, 1.008527122357604e-02, -2.399113499614261e-02, 0.000000000000000e+00, -2.297563514659978e-02, -1.824409081263912e-02, 0.000000000000000e+00, -1.703945345733397e-02, -9.534016493122761e-03, 0.000000000000000e+00, -8.383478069189897e-03, -1.445063520891591e-02, 0.000000000000000e+00, -1.325560171122611e-02, -1.445063520891591e-02, 0.000000000000000e+00, -1.325560171122611e-02, 3.903225816541266e-02, 0.000000000000000e+00, 3.893121776271238e-02, -1.181696394653718e-02, 0.000000000000000e+00, -1.170073283862682e-02, -2.235955835916099e-02, 0.000000000000000e+00, -2.202479988053759e-02, -3.294130414634965e-02, 0.000000000000000e+00, -3.233376970697088e-02, -2.785809108395744e-02, 0.000000000000000e+00, -2.734263595890260e-02, -2.785809108395744e-02, 0.000000000000000e+00, -2.734263595890260e-02, -1.409900907394158e-02, 0.000000000000000e+00, -1.362751500369516e-02, 6.633916474329673e-01, 0.000000000000000e+00, 6.323634955561621e-01, 2.609754540236831e-01, 0.000000000000000e+00, 2.387144177538736e-01, -3.241154745127012e-02, 0.000000000000000e+00, -3.218259746944598e-02, 6.410786885290745e-02, 0.000000000000000e+00, 6.391410049639842e-02, 6.410786885290755e-02, 0.000000000000000e+00, 6.391410049639847e-02, -1.592083047240177e-02, 0.000000000000000e+00, -1.577453921727669e-02, 1.809387968216955e+01, 0.000000000000000e+00, 1.712930300640679e+01, 1.785261000465374e+01, 0.000000000000000e+00, 1.370097390443571e+01, -1.095867334320874e-01, 0.000000000000000e+00, -1.037974796874696e-01, 2.020775646377572e+01, 0.000000000000000e+00, 1.302644860427804e+01, 2.020775646377571e+01, 0.000000000000000e+00, 1.302644860427803e+01, 4.036459681890785e+01, 0.000000000000000e+00, 3.031714322975767e+01, 2.682671083452507e+02, 0.000000000000000e+00, 2.625639098239153e+02, 1.597421708949362e+02, 0.000000000000000e+00, 9.728215942501714e+01, 1.861348471949854e+01, 0.000000000000000e+00, 1.633794773802287e+01, 6.592871685083476e+02, 0.000000000000000e+00, 6.720146710174575e+01, 6.592871685082854e+02, 0.000000000000000e+00, 6.720146710174414e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
