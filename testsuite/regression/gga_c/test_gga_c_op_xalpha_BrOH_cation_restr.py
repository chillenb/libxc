
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_xalpha_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.510648722796858e-02, -5.510648946426004e-02, -5.510650009630285e-02, -5.510646681003712e-02, -5.510648415357621e-02, -5.510648415357621e-02, -5.125466125426904e-02, -5.125467052928191e-02, -5.125499018184651e-02, -5.125525033899174e-02, -5.125477595957171e-02, -5.125477595957171e-02, -3.777689743883591e-02, -3.776312660597819e-02, -3.742537196121860e-02, -3.752944047295184e-02, -3.750740666577553e-02, -3.750740666577553e-02, -1.913070702655631e-02, -1.932575695033217e-02, -3.963779895987376e-02, -1.573904085918812e-02, -1.712156886033063e-02, -1.712156886033063e-02, -9.429759792870902e-04, -9.918372272697631e-04, -5.138018014266797e-03, -5.476196754830332e-04, -6.867934370872796e-04, -6.867934370872796e-04, -5.272015561632933e-02, -5.272071118641904e-02, -5.272018329125169e-02, -5.272067372680248e-02, -5.272043612995728e-02, -5.272043612995728e-02, -4.810969534502719e-02, -4.815853091834370e-02, -4.807365377197493e-02, -4.811724065249057e-02, -4.815395387114177e-02, -4.815395387114177e-02, -3.606707688812381e-02, -3.713440734163702e-02, -3.504168255849680e-02, -3.555635657521923e-02, -3.627540199443026e-02, -3.627540199443026e-02, -1.186320834432613e-02, -1.915035527946863e-02, -1.113426084325610e-02, -4.797795720090134e-02, -1.347098605887852e-02, -1.347098605887852e-02, -4.232539410292802e-04, -5.354372693168872e-04, -4.101323845200806e-04, -7.947143708416586e-03, -4.935124463778687e-04, -4.935124463778687e-04, -3.613027782413349e-02, -3.605520536623626e-02, -3.608168663460756e-02, -3.610344570697614e-02, -3.609256025160843e-02, -3.609256025160843e-02, -3.577047384036640e-02, -3.372146730799266e-02, -3.434838601073644e-02, -3.493644217584584e-02, -3.464013757491184e-02, -3.464013757491184e-02, -3.772979813749722e-02, -2.228183872315499e-02, -2.484536967599032e-02, -2.882434975611346e-02, -2.682248820595595e-02, -2.682248820595594e-02, -3.258089593973874e-02, -4.934024588054291e-03, -6.549020810938484e-03, -2.829933487571419e-02, -9.785208902387314e-03, -9.785208902387316e-03, -1.323656078942145e-03, -1.439003180450511e-04, -3.014010120212118e-04, -9.276274130456128e-03, -4.568851696572034e-04, -4.568851696572028e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_xalpha_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.537377551942626e-02, -5.537377703067017e-02, -5.537378421560492e-02, -5.537376172136779e-02, -5.537377344180935e-02, -5.537377344180935e-02, -5.268705343470998e-02, -5.268706010685827e-02, -5.268729005411377e-02, -5.268747720151463e-02, -5.268713594997555e-02, -5.268713594997555e-02, -4.193716556102760e-02, -4.192508420595110e-02, -4.162805300649890e-02, -4.171972017097757e-02, -4.170032290502330e-02, -4.170032290502330e-02, -2.344563342169799e-02, -2.366153460003917e-02, -4.354883932793024e-02, -1.961464359107486e-02, -2.119376807752274e-02, -2.119376807752275e-02, -1.253177632303108e-03, -1.317882566929811e-03, -6.718612004450497e-03, -7.287813733642749e-04, -9.135498382415199e-04, -9.135498382415199e-04, -5.372906237583272e-02, -5.372945277651974e-02, -5.372908182316243e-02, -5.372942645365028e-02, -5.372925949399671e-02, -5.372925949399671e-02, -5.036803685880275e-02, -5.040491619811546e-02, -5.034080155056502e-02, -5.037373667491123e-02, -5.040146090195501e-02, -5.040146090195501e-02, -4.041964440530554e-02, -4.137106921835294e-02, -3.949262041236165e-02, -3.995951280021141e-02, -4.060642758916731e-02, -4.060642758916731e-02, -1.505971291601598e-02, -2.346740386370598e-02, -1.418212263021652e-02, -5.026841432545076e-02, -1.697200428674115e-02, -1.697200428674115e-02, -5.635177055632664e-04, -7.125991779182440e-04, -5.460726455663700e-04, -1.026861542509959e-02, -6.568987112108785e-04, -6.568987112108785e-04, -4.047636549882853e-02, -4.040898465111262e-02, -4.043276054339196e-02, -4.045229031814618e-02, -4.044252083403792e-02, -4.044252083403792e-02, -4.015280555685254e-02, -3.828024793894241e-02, -3.885860196736639e-02, -3.939675443488691e-02, -3.912612056908553e-02, -3.912612056908553e-02, -4.189583521109756e-02, -2.687487842379752e-02, -2.957245856210299e-02, -3.359664616221567e-02, -3.159671171153665e-02, -3.159671171153664e-02, -3.721572512926619e-02, -6.457265131189838e-03, -8.513274926804378e-03, -3.307695496183627e-02, -1.254070650815627e-02, -1.254070650815627e-02, -1.756681493386903e-03, -1.917728420321440e-04, -4.014529634322916e-04, -1.191569077573317e-02, -6.082229457505412e-04, -6.082229457505404e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_xalpha_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
