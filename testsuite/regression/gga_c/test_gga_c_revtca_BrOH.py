
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_revtca_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.214680520732888e-02, -6.214726328507742e-02, -6.214864918128126e-02, -6.214116114178155e-02, -6.214705227953759e-02, -6.214705227953759e-02, -5.208685170848352e-02, -5.209003650550245e-02, -5.217777031030147e-02, -5.202753986160430e-02, -5.208850781800115e-02, -5.208850781800115e-02, -2.936535548386273e-02, -2.916474395612468e-02, -2.393767698085929e-02, -2.425371283104946e-02, -2.929300548787054e-02, -2.929300548787054e-02, -7.443126795349160e-03, -7.945347120830169e-03, -3.677974593645553e-02, -2.396766564556738e-03, -7.596812545502426e-03, -7.596812545502426e-03, -1.097495582602450e-06, -1.279785470843149e-06, -7.676518359772668e-05, -8.063912654035967e-08, -1.264095269159890e-06, -1.264095269159890e-06, -6.437709603133203e-02, -6.448428819488194e-02, -6.438781255397376e-02, -6.447116442807883e-02, -6.443241078296820e-02, -6.443241078296820e-02, -3.081897027784918e-02, -3.131122303199824e-02, -3.016279763371034e-02, -3.054455564976523e-02, -3.202345607646914e-02, -3.202345607646914e-02, -3.915930242106892e-02, -5.189382974951256e-02, -3.757987579745665e-02, -4.787416237540053e-02, -4.140151889953169e-02, -4.140151889953169e-02, -8.201084791793729e-04, -4.363111828433712e-03, -8.626947792678683e-04, -6.659555188230019e-02, -1.486539539731654e-03, -1.486539539731654e-03, -7.412824569775061e-08, -1.151034597739178e-07, -8.170335808636185e-08, -2.309899681248445e-04, -1.061200367222343e-07, -1.061200367222343e-07, -5.412332673522691e-02, -5.145182820875615e-02, -5.242915649669310e-02, -5.317457988871110e-02, -5.280356763575123e-02, -5.280356763575123e-02, -5.390541760711674e-02, -2.974679012231351e-02, -3.616995168090450e-02, -4.292902282076644e-02, -3.948037370256448e-02, -3.948037370256448e-02, -5.227412361651259e-02, -7.300473667508953e-03, -1.163771995547778e-02, -2.304957063048598e-02, -1.674124710841504e-02, -1.674124710841504e-02, -2.751791811237054e-02, -5.382278920035088e-05, -1.469549046556698e-04, -2.661826788907989e-02, -5.649156128857359e-04, -5.649156128857362e-04, -1.565371185160210e-06, -2.211495409489185e-09, -1.679869202416019e-08, -5.503205204988608e-04, -7.729395248818225e-08, -7.729395248818178e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_revtca_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.094999671669541e-01, -1.094997206487258e-01, -1.094989840772850e-01, -1.095030124613306e-01, -1.094998341267942e-01, -1.094998341267942e-01, -1.050217470911013e-01, -1.050215672845240e-01, -1.050166073262658e-01, -1.050263117631483e-01, -1.050216856503245e-01, -1.050216856503245e-01, -7.627447663317084e-02, -7.605452153627515e-02, -6.891724344242253e-02, -6.947888580424838e-02, -7.619555509346373e-02, -7.619555509346373e-02, -2.634918041458579e-02, -2.777552741325027e-02, -8.425694887850600e-02, -9.603506040658757e-03, -2.678959748463769e-02, -2.678959748463769e-02, -4.816169908577174e-06, -5.615318958849835e-06, -3.329066723522658e-04, -3.543878997614677e-07, -5.546617736522310e-06, -5.546617736522310e-06, -1.021677058811839e-01, -1.020709812846536e-01, -1.021580832949461e-01, -1.020828785335948e-01, -1.021178920295588e-01, -1.021178920295588e-01, -8.644098020799745e-02, -8.719889613539100e-02, -8.542849730711762e-02, -8.603797935236833e-02, -8.822226324870708e-02, -8.822226324870708e-02, -7.765716217574345e-02, -6.965426453245406e-02, -7.651997235216723e-02, -7.107318991229593e-02, -7.801345900584239e-02, -7.801345900584239e-02, -3.440367282142891e-03, -1.678296950319594e-02, -3.612890909553648e-03, -8.526397347182034e-02, -6.105073082622407e-03, -6.105073082622407e-03, -3.257880361336691e-07, -5.057842713093941e-07, -3.591324842139733e-07, -9.919328837011739e-04, -4.663611340374382e-07, -4.663611340374383e-07, -6.347910216872620e-02, -6.773527301299517e-02, -6.626234015965725e-02, -6.507289706268433e-02, -6.567192506834524e-02, -6.567192506834524e-02, -6.217964926238777e-02, -7.237720524918372e-02, -7.539032313105304e-02, -7.397015153763083e-02, -7.526251674998247e-02, -7.526251674998245e-02, -7.117642949280886e-02, -2.651157030277199e-02, -3.881866667796661e-02, -6.068236263391173e-02, -5.034608065470478e-02, -5.034608065470476e-02, -6.894878201708235e-02, -2.338646022843354e-04, -6.340700077054747e-04, -6.230342405639624e-02, -2.390040328421181e-03, -2.390040328421183e-03, -6.866215198599034e-06, -9.727122399923500e-09, -7.386394234221639e-08, -2.329000566480824e-03, -3.397415443413202e-07, -3.397415443413180e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_revtca_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.191456263160008e-10, 1.191454707974870e-10, 1.191418549341425e-10, 1.191444586085805e-10, 1.191455687280255e-10, 1.191455687280255e-10, 8.245449871142999e-07, 8.246166932939218e-07, 8.264203158712986e-07, 8.224546913456944e-07, 8.245645909015655e-07, 8.245645909015655e-07, 1.489642185001069e-03, 1.479985906178357e-03, 1.205381364618548e-03, 1.183982174557604e-03, 1.486200026078219e-03, 1.486200026078219e-03, 1.349720526316874e-01, 1.413600762983291e-01, 8.508237227188649e-04, 9.989495218144558e-02, 1.370586619387816e-01, 1.370586619387816e-01, 1.502065133837342e-01, 1.526957414842413e-01, 9.310024817300623e-02, 8.377328242524087e-02, 1.586303778071004e-01, 1.586303778071004e-01, 1.482196529269744e-07, 1.484065441026904e-07, 1.482376745713342e-07, 1.483830239144202e-07, 1.483173146687765e-07, 1.483173146687765e-07, 6.261458982750033e-06, 6.212974960239992e-06, 6.115276317792388e-06, 6.080192270946243e-06, 6.418983870299030e-06, 6.418983870299030e-06, 4.947045243896893e-03, 4.550688078417043e-03, 6.094873643780494e-03, 6.802535840824880e-03, 4.427249049750069e-03, 4.427249049750069e-03, 7.710177108037779e-02, 4.857261730245686e-02, 9.114992538219654e-02, 2.244187928748018e-05, 1.027644572554562e-01, 1.027644572554562e-01, 8.834714418367019e-02, 9.202866999730899e-02, 2.624661204660610e-01, 1.080553604683004e-01, 1.363194704850628e-01, 1.363194704850627e-01, 5.402622073002187e-03, 5.937963369826199e-03, 5.854143146660412e-03, 5.726881399366135e-03, 5.799297829720576e-03, 5.799297829720575e-03, 6.000665052288369e-03, 6.690999647018264e-03, 7.344909179994187e-03, 7.745261111592162e-03, 7.606578572492241e-03, 7.606578572492240e-03, 3.636368246109561e-03, 3.546147941286414e-02, 3.250712372043337e-02, 2.920027590999277e-02, 3.216665777237960e-02, 3.216665777237961e-02, 1.010359962133663e-02, 7.462485446158534e-02, 8.526253673626968e-02, 5.046568685330938e-02, 1.257881671581641e-01, 1.257881671581642e-01, 1.154678255579118e-01, 1.128663571838157e-01, 1.160865518513010e-01, 1.566230111810929e-01, 1.954426950895880e-01, 1.954426950895873e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
