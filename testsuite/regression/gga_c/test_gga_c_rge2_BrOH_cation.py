
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_rge2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.758697723881147e-02, -5.758783717334003e-02, -5.759028258835862e-02, -5.757751789050376e-02, -5.758440179180467e-02, -5.758440179180467e-02, -4.722714339887225e-02, -4.723233865254446e-02, -4.735268339874321e-02, -4.714400700151350e-02, -4.723340344173960e-02, -4.723340344173960e-02, -3.171655711203041e-02, -3.148181527365778e-02, -2.576146631841009e-02, -2.603563310028133e-02, -2.606129618447069e-02, -2.606129618447069e-02, -8.078853959755428e-03, -8.750019719652818e-03, -3.440407731861662e-02, -2.771487601954569e-03, -2.957104419468351e-03, -2.957104419468351e-03, -8.521105543390917e-09, -1.136906148131028e-08, -1.278930641362454e-05, -6.119905845113072e-10, -1.580229551812612e-09, -1.580229551812612e-09, -6.462947233188812e-02, -6.483665337357029e-02, -6.463801170701897e-02, -6.482090964922027e-02, -6.473488642733483e-02, -6.473488642733483e-02, -2.540142067352871e-02, -2.590464456600949e-02, -2.427819501249175e-02, -2.471149546200675e-02, -2.624163754389386e-02, -2.624163754389386e-02, -4.240954408373661e-02, -5.773934773220550e-02, -3.975011651840633e-02, -5.332708100160503e-02, -4.408881847747399e-02, -4.408881847747395e-02, -5.809353676069218e-04, -4.331838863980787e-03, -4.527067420180553e-04, -7.525094212391852e-02, -1.489340365572894e-03, -1.489340365572894e-03, -2.387979419239683e-10, -6.479759077394898e-10, -1.151440168472434e-09, -1.191435786358948e-04, -1.129412563038307e-09, -1.129412567375115e-09, -6.115187035524189e-02, -5.663703481261474e-02, -5.815749567200759e-02, -5.946962294456062e-02, -5.880729295510827e-02, -5.880729295510827e-02, -6.196765072367570e-02, -3.103225150399651e-02, -3.820840611654958e-02, -4.666026925047977e-02, -4.226576313129782e-02, -4.226576313129782e-02, -5.782603960668437e-02, -7.497217434611167e-03, -1.252228215242501e-02, -2.688569772993503e-02, -1.901899212007861e-02, -1.901899212007862e-02, -3.019910874444661e-02, -9.682871651598562e-06, -3.687849807796836e-05, -3.155983304314578e-02, -3.843256537693733e-04, -3.843256537693802e-04, -3.324075138495114e-08, -6.060296795645792e-12, -1.008234058307717e-10, -2.952738760427821e-04, -1.016244023828439e-09, -1.016244019925311e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_rge2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.348738402244674e-01, -1.348739997058962e-01, -1.348747512807076e-01, -1.348750202116234e-01, -1.348777924397640e-01, -1.348774951050606e-01, -1.348628354542712e-01, -1.348637787025993e-01, -1.348702481445102e-01, -1.348718265661081e-01, -1.348702481445102e-01, -1.348718265661081e-01, -1.155422751319866e-01, -1.155438640369060e-01, -1.155474152342916e-01, -1.155492297536291e-01, -1.156711770161686e-01, -1.156687745945492e-01, -1.154610428862024e-01, -1.154594108143513e-01, -1.155713753005807e-01, -1.155278059330015e-01, -1.155713753005807e-01, -1.155278059330015e-01, -8.298886014210199e-02, -8.263954640444579e-02, -8.280848718766229e-02, -8.238162085341701e-02, -7.583503333650510e-02, -7.636310579343723e-02, -7.661728087170389e-02, -7.645070621534666e-02, -7.413787010476471e-02, -7.918122070220508e-02, -7.413787010476471e-02, -7.918122070220508e-02, -3.400926581952544e-02, -3.282664129998646e-02, -3.605647749720885e-02, -3.462173200513340e-02, -8.882028679941088e-02, -8.572187536868001e-02, -1.422222792839887e-02, -1.405403128717672e-02, -1.318653794533773e-02, -2.289246585926020e-02, -1.318653794533775e-02, -2.289246585926018e-02, -5.677745929801298e-08, -5.463575998662576e-08, -7.595361679502521e-08, -7.269862181140773e-08, -8.283594363203966e-05, -7.940969668118324e-05, -3.991791665415223e-09, -4.032321563863023e-09, -9.755336728581396e-09, -1.338795237567020e-08, -9.755336728147716e-09, -1.338795237089971e-08, -1.341667420524694e-01, -1.342020601463020e-01, -1.343220049483178e-01, -1.343583475265677e-01, -1.341728641291870e-01, -1.342088433019535e-01, -1.343106237802170e-01, -1.343461417418070e-01, -1.342457443444434e-01, -1.342817565654534e-01, -1.342457443444434e-01, -1.342817565654534e-01, -8.281046090215655e-02, -8.281417573701565e-02, -8.374106759461217e-02, -8.376138172064330e-02, -8.076192388338468e-02, -8.063933461225496e-02, -8.160733063453533e-02, -8.147786265326225e-02, -8.418281903788641e-02, -8.451376950289573e-02, -8.418281903788641e-02, -8.451376950289573e-02, -8.483186789973923e-02, -8.511097864091388e-02, -8.225160001049424e-02, -8.219484412902051e-02, -8.461474845959482e-02, -8.097934414002821e-02, -8.220482861214531e-02, -7.833652124749546e-02, -8.269217492159139e-02, -8.820510392634565e-02, -8.269217492159137e-02, -8.820510392634560e-02, -3.389572279871197e-03, -3.362821903558141e-03, -2.087058128628513e-02, -2.077943771909855e-02, -2.723553311231067e-03, -2.607676362568585e-03, -1.172748422620224e-01, -1.173476132471537e-01, -8.327796358537205e-03, -7.928992579415192e-03, -8.327796358537205e-03, -7.928992579415192e-03, -1.586784931854016e-09, -1.551251478504154e-09, -4.267611638502582e-09, -4.229318139488479e-09, -7.698950085190073e-09, -7.444157617466806e-09, -7.324634774528891e-04, -7.288357886784983e-04, -8.425422632306594e-09, -7.008968855120017e-09, -8.425422639489434e-09, -7.008968860568133e-09, -7.548877024332776e-02, -7.500111464228280e-02, -7.963453956355039e-02, -7.915773026137173e-02, -7.838830226639990e-02, -7.790603017992205e-02, -7.718976745118858e-02, -7.670734595148471e-02, -7.780881500901671e-02, -7.732649735903455e-02, -7.780881500901671e-02, -7.732649735903455e-02, -7.303370326449282e-02, -7.261676410420673e-02, -7.767807222458348e-02, -7.730690182092165e-02, -8.151378758840849e-02, -8.108015721662416e-02, -8.206411765552311e-02, -8.167793620693219e-02, -8.225065940678938e-02, -8.186505239848034e-02, -8.225065940678938e-02, -8.186505239848034e-02, -8.430988423573080e-02, -8.410470441410683e-02, -3.244538977109849e-02, -3.227626287365355e-02, -4.671587601682226e-02, -4.627434365955189e-02, -6.907591143484308e-02, -6.865385390872722e-02, -5.916246296564508e-02, -5.918375315565949e-02, -5.916246296564510e-02, -5.918375315565950e-02, -7.583180662739075e-02, -7.525567076832833e-02, -6.161531012318061e-05, -6.129187630064890e-05, -2.339628414986327e-04, -2.279211874384534e-04, -7.065506915967866e-02, -6.939829375659816e-02, -2.328200708337157e-03, -2.225892618740970e-03, -2.328200708337147e-03, -2.225892618740980e-03, -2.188974698445204e-07, -2.138302824265945e-07, -4.004493875586440e-11, -3.999467644419058e-11, -6.761891616221147e-10, -6.526961849608490e-10, -1.776242588640889e-03, -1.752702987620469e-03, -7.460894636192208e-09, -6.327056226095268e-09, -7.460894628535030e-09, -6.327056220172813e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_rge2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_rge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.953941888870470e-10, 3.907883777740940e-10, 1.953941888870470e-10, 1.953975105545748e-10, 3.907950211091495e-10, 1.953975105545748e-10, 1.954017699894159e-10, 3.908035399788317e-10, 1.954017699894159e-10, 1.953525769917989e-10, 3.907051539835978e-10, 1.953525769917989e-10, 1.953798432963706e-10, 3.907596865927411e-10, 1.953798432963706e-10, 1.953798432963706e-10, 3.907596865927411e-10, 1.953798432963706e-10, 1.085111825082170e-06, 2.170223650164339e-06, 1.085111825082170e-06, 1.085319252447983e-06, 2.170638504895966e-06, 1.085319252447983e-06, 1.090000493081672e-06, 2.180000986163344e-06, 1.090000493081672e-06, 1.080879891404136e-06, 2.161759782808272e-06, 1.080879891404136e-06, 1.085232825436348e-06, 2.170465650872697e-06, 1.085232825436348e-06, 1.085232825436348e-06, 2.170465650872697e-06, 1.085232825436348e-06, 1.782490747879238e-03, 3.564981495758477e-03, 1.782490747879238e-03, 1.771709064842593e-03, 3.543418129685186e-03, 1.771709064842593e-03, 1.490689310531346e-03, 2.981378621062692e-03, 1.490689310531346e-03, 1.454544375904173e-03, 2.909088751808345e-03, 1.454544375904173e-03, 1.474688692914775e-03, 2.949377385829550e-03, 1.474688692914775e-03, 1.474688692914775e-03, 2.949377385829550e-03, 1.474688692914775e-03, 1.854442528426273e-01, 3.708885056852547e-01, 1.854442528426273e-01, 1.930868943343060e-01, 3.861737886686120e-01, 1.930868943343060e-01, 9.583788305370635e-04, 1.916757661074126e-03, 9.583788305370635e-04, 1.532238665637597e-01, 3.064477331275196e-01, 1.532238665637597e-01, 1.243799879159290e-01, 2.487599758318580e-01, 1.243799879159290e-01, 1.243799879159292e-01, 2.487599758318586e-01, 1.243799879159292e-01, 6.710165990761933e-03, 1.342033198160453e-02, 6.710165990761933e-03, 7.892418404998908e-03, 1.578483681054687e-02, 7.892418404998908e-03, 4.019943580891429e-02, 8.039887161782588e-02, 4.019943580891429e-02, 2.383946051956732e-03, 4.767892102918360e-03, 2.383946051956732e-03, 3.497576679757947e-03, 6.995153359696552e-03, 3.497576679757947e-03, 3.497576678154170e-03, 6.995153356740140e-03, 3.497576678154170e-03, 2.774202217743412e-07, 5.548404435486823e-07, 2.774202217743412e-07, 2.791505681783684e-07, 5.583011363567368e-07, 2.791505681783684e-07, 2.774891990328708e-07, 5.549783980657416e-07, 2.774891990328708e-07, 2.790165926135841e-07, 5.580331852271682e-07, 2.790165926135841e-07, 2.783004869476110e-07, 5.566009738952218e-07, 2.783004869476110e-07, 2.783004869476110e-07, 5.566009738952218e-07, 2.783004869476110e-07, 6.649265274865169e-06, 1.329853054973033e-05, 6.649265274865169e-06, 6.612798822814848e-06, 1.322559764562969e-05, 6.612798822814848e-06, 6.369524113733798e-06, 1.273904822746760e-05, 6.369524113733798e-06, 6.339939906399995e-06, 1.267987981279999e-05, 6.339939906399995e-06, 6.768331426932669e-06, 1.353666285386534e-05, 6.768331426932669e-06, 6.768331426932669e-06, 1.353666285386534e-05, 6.768331426932669e-06, 5.414309596072728e-03, 1.082861919214546e-02, 5.414309596072728e-03, 6.281772766769879e-03, 1.256354553353976e-02, 6.281772766769879e-03, 7.099513964200707e-03, 1.419902792840141e-02, 7.099513964200707e-03, 9.709240615319220e-03, 1.941848123063844e-02, 9.709240615319220e-03, 5.360143096695706e-03, 1.072028619339141e-02, 5.360143096695706e-03, 5.360143096695705e-03, 1.072028619339141e-02, 5.360143096695705e-03, 9.353932205472057e-02, 1.870786441094416e-01, 9.353932205472057e-02, 7.451706674459856e-02, 1.490341334891971e-01, 7.451706674459856e-02, 9.558375813859731e-02, 1.911675162771951e-01, 9.558375813859731e-02, 5.376688998530265e-05, 1.075337799706053e-04, 5.376688998530265e-05, 1.707185578017449e-01, 3.414371156034899e-01, 1.707185578017449e-01, 1.707185578017449e-01, 3.414371156034899e-01, 1.707185578017449e-01, 2.324523723745285e-03, 4.649047445540362e-03, 2.324523723745285e-03, 2.931017862445142e-03, 5.862035724800446e-03, 2.931017862445142e-03, 2.919654548121745e-02, 5.839309096532733e-02, 2.919654548121745e-02, 9.613099767196807e-02, 1.922619953439365e-01, 9.613099767196807e-02, 1.117423404542149e-02, 2.234846809376470e-02, 1.117423404542149e-02, 1.117423404812922e-02, 2.234846810084319e-02, 1.117423404812922e-02, 1.020957760579973e-02, 2.041915521159947e-02, 1.020957760579973e-02, 9.042160801664284e-03, 1.808432160332857e-02, 9.042160801664284e-03, 9.419582062184568e-03, 1.883916412436914e-02, 9.419582062184568e-03, 9.758202728796156e-03, 1.951640545759231e-02, 9.758202728796156e-03, 9.585828319521228e-03, 1.917165663904246e-02, 9.585828319521228e-03, 9.585828319521228e-03, 1.917165663904246e-02, 9.585828319521228e-03, 1.195119405803176e-02, 2.390238811606352e-02, 1.195119405803176e-02, 7.749044619877837e-03, 1.549808923975567e-02, 7.749044619877837e-03, 8.541941414452124e-03, 1.708388282890425e-02, 8.541941414452124e-03, 9.592404127685793e-03, 1.918480825537159e-02, 9.592404127685793e-03, 9.048825872208932e-03, 1.809765174441786e-02, 9.048825872208932e-03, 9.048825872208932e-03, 1.809765174441786e-02, 9.048825872208932e-03, 5.022440023099799e-03, 1.004488004619960e-02, 5.022440023099799e-03, 5.210854834778711e-02, 1.042170966955742e-01, 5.210854834778711e-02, 4.426186279066686e-02, 8.852372558133377e-02, 4.426186279066686e-02, 3.391158198203500e-02, 6.782316396407000e-02, 3.391158198203500e-02, 4.074412839646377e-02, 8.148825679292755e-02, 4.074412839646377e-02, 4.074412839646379e-02, 8.148825679292759e-02, 4.074412839646379e-02, 1.111027922369008e-02, 2.222055844738016e-02, 1.111027922369008e-02, 3.307759083067647e-02, 6.615518166134454e-02, 3.307759083067647e-02, 5.030305588685206e-02, 1.006061117737074e-01, 5.030305588685206e-02, 5.111022020138127e-02, 1.022204404027626e-01, 5.111022020138127e-02, 1.635633486452608e-01, 3.271266972905202e-01, 1.635633486452608e-01, 1.635633486452593e-01, 3.271266972905193e-01, 1.635633486452593e-01, 8.363733821615387e-03, 1.672746764319961e-02, 8.363733821615387e-03, 3.178975685193210e-03, 6.357951382021831e-03, 3.178975685193210e-03, 3.978530345957023e-03, 7.957060701277264e-03, 3.978530345957023e-03, 1.511821006043447e-01, 3.023642012086900e-01, 1.511821006043447e-01, 1.426291065824647e-02, 2.852582130808240e-02, 1.426291065824647e-02, 1.426291064908652e-02, 2.852582130387856e-02, 1.426291064908652e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
