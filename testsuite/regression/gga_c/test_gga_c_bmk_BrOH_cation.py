
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_bmk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.010101183905579e-01, -1.010123241376723e-01, -1.010186911515188e-01, -1.009859511493408e-01, -1.010035930114195e-01, -1.010035930114195e-01, -5.489244657332905e-02, -5.489938912546877e-02, -5.506097388453370e-02, -5.478365775473016e-02, -5.490112274608512e-02, -5.490112274608512e-02, -2.602127017336816e-02, -2.590214419581971e-02, -2.367661413467006e-02, -2.381011149503390e-02, -2.411688496226017e-02, -2.411688496226017e-02, -1.023068633865521e-02, -1.078630004216391e-02, -2.869522951291088e-02, 1.095421103140809e-03, 4.051450440144330e-03, 4.051450440144363e-03, 5.913580390264975e-03, 6.173261094422984e-03, 2.189377926374258e-02, 3.627542052550116e-03, 2.588285059098227e-03, 2.588285059098235e-03, -9.498750700156811e-02, -9.554826058463749e-02, -9.501058040750786e-02, -9.550555932637977e-02, -9.527241239047710e-02, -9.527241239047710e-02, -3.313289300782967e-02, -3.333817882658238e-02, -3.279794683683851e-02, -3.296431009237928e-02, -3.342787136728409e-02, -3.342787136728409e-02, -3.509222287983001e-02, -8.349812127601630e-02, -3.130105895397000e-02, -6.828456813172082e-02, -3.802244388160501e-02, -3.802244388160506e-02, 1.782936918661586e-02, -4.433643741068295e-03, 1.933560453069933e-02, -1.224087047215928e-01, 8.534810554535369e-03, 8.534810554535369e-03, 2.846624186897144e-03, 3.552632523160375e-03, 2.750381765887250e-03, 2.328060492713241e-02, 2.732341012056641e-03, 2.732341012056655e-03, -8.469500548682306e-02, -8.253570250783844e-02, -8.903072523766856e-02, -9.179958642305840e-02, -9.092017721153617e-02, -9.092017721153617e-02, -5.332619665624868e-02, -2.348781653427637e-02, -2.930957018398940e-02, -4.443304070706081e-02, -3.499316720468099e-02, -3.499316720468099e-02, -8.156335598182213e-02, -1.075881287109261e-02, -1.476354467977318e-02, -1.945983127006670e-02, -1.679605762461078e-02, -1.679605762461079e-02, -2.253608077725788e-02, 2.169175885778281e-02, 2.418028050219049e-02, -2.172867081021186e-02, 1.898653464924118e-02, 1.898653464924115e-02, 8.015273585273295e-03, 1.020439960432751e-03, 2.057052621909627e-03, 2.019869685361654e-02, 2.633207530224680e-03, 2.633207530224685e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_bmk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.007097780543667e-01, -3.007108733884662e-01, -3.007186111130822e-01, -3.007179603592225e-01, -3.007379081730417e-01, -3.007444863141190e-01, -3.006296234667227e-01, -3.006164505077217e-01, -3.007086777954237e-01, -3.006647627403368e-01, -3.007086777954237e-01, -3.006647627403368e-01, -1.496953931719365e-01, -1.498490574437089e-01, -1.497214900466047e-01, -1.498852719752607e-01, -1.504565421780986e-01, -1.505972319275443e-01, -1.491989969973859e-01, -1.493594747608716e-01, -1.496972546458172e-01, -1.499238069812543e-01, -1.496972546458172e-01, -1.499238069812543e-01, -5.282204929178450e-02, -5.383716605522527e-02, -5.204830418886509e-02, -5.322989129436203e-02, -3.894956601432509e-02, -3.890217757463916e-02, -3.944493091095749e-02, -3.949478369646863e-02, -4.584247269638968e-02, -4.150206818507263e-02, -4.584247269638968e-02, -4.150206818507263e-02, -3.635204688462825e-02, -2.893545741048939e-02, -3.447514835653550e-02, -2.665241468149967e-02, -6.215031830012536e-02, -6.544081183278191e-02, -5.157539348470360e-02, -4.839027298416474e-02, -2.007812842449143e-03, -1.906615307115393e-01, -2.007812842449951e-03, -1.906615307115371e-01, 8.566060498294331e-03, 6.782354524813745e-03, 9.070124788469228e-03, 6.963723113729958e-03, 2.104906232861940e-02, 1.752691648039558e-02, 4.576495910718135e-03, 4.885154734429451e-03, 1.575165100616152e-03, 1.311559017854688e-02, 1.575165100616090e-03, 1.311559017854721e-02, -2.866833077456483e-01, -2.866960984940665e-01, -2.881937142591937e-01, -2.881641941506742e-01, -2.867580993172458e-01, -2.867444763491375e-01, -2.880604076813255e-01, -2.880718125989920e-01, -2.874607144045206e-01, -2.874358011305527e-01, -2.874607144045206e-01, -2.874358011305527e-01, -5.158962578828082e-02, -5.159861499977599e-02, -5.265436177548920e-02, -5.269897101618502e-02, -4.958408993219360e-02, -4.946822421181402e-02, -5.040848209212612e-02, -5.029496381878504e-02, -5.328729812705930e-02, -5.344637697136218e-02, -5.328729812705930e-02, -5.344637697136218e-02, -1.010202455138846e-01, -1.016548477702480e-01, -1.848816623346899e-01, -1.828740023642710e-01, -8.648362590284261e-02, -8.686825832963667e-02, -1.838989556478924e-01, -1.792573313211476e-01, -1.111985392547010e-01, -1.153601302992996e-01, -1.111985392547018e-01, -1.153601302993010e-01, -3.031998480435116e-02, -2.790419544153501e-02, -5.081602604662475e-02, -4.950832787484972e-02, -2.736721522769817e-02, -1.949452264316544e-02, -2.552943632240868e-01, -2.551927607114202e-01, -5.768646348591770e-02, -3.377395842421034e-02, -5.768646348591770e-02, -3.377395842421034e-02, 4.021311274464386e-03, 3.458868416108826e-03, 4.768632188158923e-03, 4.497432259616551e-03, 4.028255242514953e-03, 3.220000825857690e-03, 2.381826376658925e-03, 2.004412420481834e-03, 7.269558234858259e-03, 2.137033314854887e-03, 7.269558234858155e-03, 2.137033314854730e-03, -2.130914445495767e-02, -1.560891533067931e-02, -1.762493904823576e-01, -1.742110091927491e-01, -1.506214921548227e-01, -1.468948105650011e-01, -1.079812554819889e-01, -1.036045830375095e-01, -1.322247622506998e-01, -1.281028108779291e-01, -1.322247622506998e-01, -1.281028108779291e-01, 6.425720531189731e-02, 6.546489646391128e-02, -4.940007304735044e-02, -4.916802687097337e-02, -7.826486883894350e-02, -7.867403652056003e-02, -1.354986597962304e-01, -1.357511610089810e-01, -1.025613316520163e-01, -1.026233650777158e-01, -1.025613316520163e-01, -1.026233650777158e-01, -1.925047671103373e-01, -1.905383731802310e-01, -4.005743348777269e-02, -3.876326504582152e-02, -2.761754328446331e-02, -2.600343886014658e-02, -3.695746342477792e-02, -3.647867087318867e-02, -2.438971665196716e-02, -2.443674025485278e-02, -2.438971665196523e-02, -2.443674025485215e-02, -4.659611244518506e-02, -4.631433192796153e-02, 2.024809197116449e-02, 1.977827906882190e-02, 1.546817037547524e-02, 1.434292452701508e-02, -5.166807648135383e-02, -5.121630725782240e-02, -2.412264229896445e-02, -1.283136426578729e-02, -2.412264229896433e-02, -1.283136426578840e-02, 1.087040315360404e-02, 9.488072917731197e-03, 1.354141708574377e-03, 1.341966202553324e-03, 3.061931521483709e-03, 2.401353364152839e-03, -1.386274950555608e-02, -1.256720992268449e-02, 6.467900983522749e-03, 2.146434511623899e-03, 6.467900983522778e-03, 2.146434511623743e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_bmk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.799739893793551e-10, 0.000000000000000e+00, 9.799856762180211e-10, 9.800239207540746e-10, 0.000000000000000e+00, 9.800235068939145e-10, 9.800994191930136e-10, 0.000000000000000e+00, 9.801470738877635e-10, 9.795170826151153e-10, 0.000000000000000e+00, 9.794279161468333e-10, 9.799897184604064e-10, 0.000000000000000e+00, 9.796643169382500e-10, 9.799897184604064e-10, 0.000000000000000e+00, 9.796643169382500e-10, 2.884611812058287e-06, 0.000000000000000e+00, 2.892273700384987e-06, 2.885672126958644e-06, 0.000000000000000e+00, 2.893843442346987e-06, 2.916526219363416e-06, 0.000000000000000e+00, 2.923464867082098e-06, 2.861132050841757e-06, 0.000000000000000e+00, 2.869012810718958e-06, 2.884672035132676e-06, 0.000000000000000e+00, 2.894705927846931e-06, 2.884672035132676e-06, 0.000000000000000e+00, 2.894705927846931e-06, 1.656632042955920e-03, 0.000000000000000e+00, 1.804359641103843e-03, 1.592654652809941e-03, 0.000000000000000e+00, 1.766719827494218e-03, 7.873829080896116e-04, 0.000000000000000e+00, 7.072222457776405e-04, 7.360745544671005e-04, 0.000000000000000e+00, 7.637453857508986e-04, 1.644659428018690e-03, 0.000000000000000e+00, 5.177978917651184e-04, 1.644659428018690e-03, 0.000000000000000e+00, 5.177978917651184e-04, 3.600263486958319e-01, 0.000000000000000e+00, 2.573532181938493e-01, 3.175783321280324e-01, 0.000000000000000e+00, 2.158087972207010e-01, 1.036145507031625e-03, 0.000000000000000e+00, 1.326559712417584e-03, 1.470705642392669e+00, 0.000000000000000e+00, 1.315127266446954e+00, 6.794845928874615e-02, 0.000000000000000e+00, 1.431729442068602e+01, 6.794845928877610e-02, 0.000000000000000e+00, 1.431729442068594e+01, 3.046013470610330e+01, 0.000000000000000e+00, 1.868270349956379e+01, 3.299257619496758e+01, 0.000000000000000e+00, 1.895925142688584e+01, 1.203129648040203e+01, 0.000000000000000e+00, 7.759365304613106e+00, 2.139787377537282e+01, 0.000000000000000e+00, 2.450207947412781e+01, 3.149588483324096e+00, 0.000000000000000e+00, 2.999779957461384e+02, 3.149588483258055e+00, 0.000000000000000e+00, 2.999779957451735e+02, 1.489714661596898e-06, 0.000000000000000e+00, 1.490813412740722e-06, 1.507847075722995e-06, 0.000000000000000e+00, 1.508381158305924e-06, 1.490613887569296e-06, 0.000000000000000e+00, 1.491357980355250e-06, 1.506195190245569e-06, 0.000000000000000e+00, 1.507289804914582e-06, 1.499044087936800e-06, 0.000000000000000e+00, 1.499632476682724e-06, 1.499044087936800e-06, 0.000000000000000e+00, 1.499632476682724e-06, 3.556420413524057e-06, 0.000000000000000e+00, 3.557315509898831e-06, 3.707002071188699e-06, 0.000000000000000e+00, 3.710331294778583e-06, 3.049284016863976e-06, 0.000000000000000e+00, 3.111769598144557e-06, 3.157249034657941e-06, 0.000000000000000e+00, 3.220979963713122e-06, 4.010043714897087e-06, 0.000000000000000e+00, 3.825107174553303e-06, 4.010043714897087e-06, 0.000000000000000e+00, 3.825107174553303e-06, 1.669185786185462e-02, 0.000000000000000e+00, 1.702487082189638e-02, 6.029494614636924e-02, 0.000000000000000e+00, 5.995542152272525e-02, 1.826128682515298e-02, 0.000000000000000e+00, 1.788299724249533e-02, 1.027755211247558e-01, 0.000000000000000e+00, 8.567336473478514e-02, 1.811947928131974e-02, 0.000000000000000e+00, 2.183457874282127e-02, 1.811947928131913e-02, 0.000000000000000e+00, 2.183457874282126e-02, 3.527364560452966e+00, 0.000000000000000e+00, 3.266066996421463e+00, 4.170443340081145e-01, 0.000000000000000e+00, 4.002037147053610e-01, 5.007460227250040e+00, 0.000000000000000e+00, 3.281656819326112e+00, 3.449094370158739e-04, 0.000000000000000e+00, 3.454879714251473e-04, 3.566796549597736e+00, 0.000000000000000e+00, 2.221194811073488e+00, 3.566796549597736e+00, 0.000000000000000e+00, 2.221194811073488e+00, 3.604822928424520e+01, 0.000000000000000e+00, 2.646624495815691e+01, 2.870263890718547e+01, 0.000000000000000e+00, 2.544623946425386e+01, 2.150162812542569e+02, 0.000000000000000e+00, 1.353742853442487e+02, 8.526931245396032e+00, 0.000000000000000e+00, 8.118368927278311e+00, 2.467402559359139e+02, 0.000000000000000e+00, 1.903624130929852e+01, 2.467402559376124e+02, 0.000000000000000e+00, 1.903624130968017e+01, -2.145426347739377e-01, 0.000000000000000e+00, -2.287754007960534e-01, 8.888863645183019e-02, 0.000000000000000e+00, 8.666160647509841e-02, 6.868819965296750e-02, 0.000000000000000e+00, 6.403698095315219e-02, 8.015864340131865e-03, 0.000000000000000e+00, 1.236639380467197e-03, 4.604306130148566e-02, 0.000000000000000e+00, 4.032185941491855e-02, 4.604306130148566e-02, 0.000000000000000e+00, 4.032185941491855e-02, -8.769688156289722e-01, 0.000000000000000e+00, -8.717035720810151e-01, 7.871451153783713e-03, 0.000000000000000e+00, 7.875455556004276e-03, 1.899571724307041e-02, 0.000000000000000e+00, 1.922180477658502e-02, 5.240367737058520e-02, 0.000000000000000e+00, 5.222480387257410e-02, 3.120437803065323e-02, 0.000000000000000e+00, 3.106118908503679e-02, 3.120437803065323e-02, 0.000000000000000e+00, 3.106118908503679e-02, 4.797855175302541e-02, 0.000000000000000e+00, 4.798791584392573e-02, 1.166998231608799e-01, 0.000000000000000e+00, 1.110231022309303e-01, 2.725830744046277e-02, 0.000000000000000e+00, 2.479577792275804e-02, 2.466379774150123e-02, 0.000000000000000e+00, 2.433817309789387e-02, 1.077935913657465e-02, 0.000000000000000e+00, 1.093080385241874e-02, 1.077935913656994e-02, 0.000000000000000e+00, 1.093080385241795e-02, 1.061796679373246e-02, 0.000000000000000e+00, 1.071094682495108e-02, 9.282764206612564e+00, 0.000000000000000e+00, 8.787131008916056e+00, 8.913484569259429e+00, 0.000000000000000e+00, 6.837157732895433e+00, 7.566874830538008e-02, 0.000000000000000e+00, 7.549092292715233e-02, 8.874211812671229e+00, 0.000000000000000e+00, 5.709167346295031e+00, 8.874211812671051e+00, 0.000000000000000e+00, 5.709167346295003e+00, 2.130170351789542e+01, 0.000000000000000e+00, 1.599169743509104e+01, 1.418876364730624e+02, 0.000000000000000e+00, 1.387120535531009e+02, 8.448110821454247e+01, 0.000000000000000e+00, 5.139709414570610e+01, 8.351514915272279e+00, 0.000000000000000e+00, 7.328250316623270e+00, 3.487114844181951e+02, 0.000000000000000e+00, 3.543475645461059e+01, 3.487114844177705e+02, 0.000000000000000e+00, 3.543475645455607e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
