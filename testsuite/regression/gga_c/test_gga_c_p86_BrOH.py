
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.176403069569058e-01, -1.176396919891503e-01, -1.176381600493560e-01, -1.176482061602225e-01, -1.176399725163635e-01, -1.176399725163635e-01, -5.095588307254158e-02, -5.095826449201731e-02, -5.102461872629449e-02, -5.091385523156228e-02, -5.095717243033937e-02, -5.095717243033937e-02, -2.834201484898205e-02, -2.810001919203282e-02, -2.166558298563559e-02, -2.200049292338228e-02, -2.825482049893291e-02, -2.825482049893291e-02, -1.079577133278455e-02, -1.179880194296510e-02, -3.568236549393522e-02, 1.259784829491902e-03, -1.110977128392046e-02, -1.110977128392046e-02, -5.635546016872041e-03, -5.819992479696846e-03, -4.988250056030036e-03, -3.141087793115042e-03, -5.766384588807644e-03, -5.766384588807644e-03, -6.689745350205774e-02, -6.704075255833609e-02, -6.691171764617385e-02, -6.702313209156271e-02, -6.697119765998100e-02, -6.697119765998100e-02, -3.101375829042013e-02, -3.131206898388346e-02, -3.075887834008420e-02, -3.098158276798085e-02, -3.159516909053836e-02, -3.159516909053836e-02, -4.180271024808080e-02, -5.723881620746057e-02, -4.045152525855938e-02, -5.250732201101871e-02, -4.412346898827463e-02, -4.412346898827463e-02, 5.243382609029961e-03, -1.424174739948435e-03, 4.806567584372237e-03, -7.438778919485975e-02, 3.504451295247746e-03, 3.504451295247746e-03, -3.045268842502513e-03, -3.413220443573698e-03, -2.651616214319497e-03, 6.964285914201563e-04, -3.148388724681840e-03, -3.148388724681840e-03, -6.140816002938347e-02, -5.709827193725796e-02, -5.856048110620424e-02, -5.974923197059732e-02, -5.914794724276431e-02, -5.914794724276431e-02, -6.150013015251835e-02, -3.209195285779959e-02, -3.927504103416642e-02, -4.683140523962088e-02, -4.295119768241251e-02, -4.295119768241251e-02, -5.738072247344864e-02, -6.680167627322803e-03, -1.376186879072042e-02, -2.799369094001029e-02, -2.077130855339381e-02, -2.077130855339381e-02, -3.061379526575514e-02, -6.773450249595359e-03, -1.577037216150074e-03, -3.282193187187851e-02, 3.604184795258049e-03, 3.604184795258058e-03, -6.378878189490132e-03, -1.079030808844605e-03, -1.929743550682374e-03, 3.025699828605827e-03, -2.733411929226363e-03, -2.733411929226359e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.920545829895632e-02, -5.920596921401437e-02, -5.920757949935979e-02, -5.919923207407916e-02, -5.920573332485902e-02, -5.920573332485902e-02, -9.412240246346716e-02, -9.413213221146619e-02, -9.439822619890754e-02, -9.393332651237075e-02, -9.412728056457598e-02, -9.412728056457598e-02, -8.388828906343163e-02, -8.369772161383253e-02, -7.724097028215694e-02, -7.766850809031370e-02, -8.381996658012086e-02, -8.381996658012086e-02, -5.215192752455896e-02, -5.308263700714518e-02, -9.095081074286182e-02, -2.982761203378506e-02, -5.244780181669590e-02, -5.244780181669590e-02, -5.907040808307736e-03, -5.922019224352608e-03, 1.397930467837030e-02, -4.015601745853365e-03, -5.843099400952062e-03, -5.843099400952062e-03, -1.191428460596295e-01, -1.195156693263975e-01, -1.191801165205260e-01, -1.194700277017541e-01, -1.193353564948799e-01, -1.193353564948799e-01, -5.535380907489768e-02, -5.667729321868939e-02, -5.319334220594711e-02, -5.423569256405921e-02, -5.905224803729528e-02, -5.905224803729528e-02, -8.433944463977404e-02, -8.035103738303846e-02, -8.298938742170364e-02, -7.978034704733097e-02, -8.505541480258187e-02, -8.505541480258187e-02, -4.153526292325007e-03, -4.106592189348734e-02, -6.508332614312711e-03, -1.171354515479322e-01, -1.924965597345547e-02, -1.924965597345547e-02, -3.895791387251904e-03, -4.333060191530010e-03, -3.290995834985463e-03, 1.237016568686048e-02, -3.971638452529008e-03, -3.971638452529008e-03, -7.431900900492626e-02, -7.800421037694891e-02, -7.686331125049593e-02, -7.585604109700106e-02, -7.637476393160034e-02, -7.637476393160034e-02, -7.261763374092103e-02, -8.046240882073417e-02, -8.177173497964026e-02, -8.089639845218283e-02, -8.161103593281875e-02, -8.161103593281875e-02, -8.227238355184163e-02, -5.203524611446134e-02, -6.154247513263866e-02, -7.196849345163121e-02, -6.767638533099037e-02, -6.767638533099037e-02, -7.803310576055704e-02, 1.215525429092130e-02, 1.635515440954397e-02, -7.019509471632411e-02, -6.600344289985714e-04, -6.600344289985740e-04, -6.531341704575520e-03, -1.409668896685990e-03, -2.499863433452313e-03, -1.812984868716135e-03, -3.441762369709091e-03, -3.441762369709087e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.993032110059301e-10, -1.993026867001828e-10, -1.992965567392035e-10, -1.993052038014234e-10, -1.993029662082164e-10, -1.993029662082164e-10, 6.099274878851014e-07, 6.101559094246095e-07, 6.162909598760024e-07, 6.049221373761544e-07, 6.100284124887595e-07, 6.100284124887595e-07, 1.877783214473678e-03, 1.867916843389392e-03, 1.578376788865713e-03, 1.544180566575760e-03, 1.874275179444482e-03, 1.874275179444482e-03, 3.313319823927607e-01, 3.293515072907422e-01, 1.048548616480348e-03, 5.142039078050983e-01, 3.309963406398496e-01, 3.309963406398496e-01, -6.302511268878063e+01, -6.408330805643145e+01, -7.426273172739708e+00, -1.055660829667320e+01, -6.804398226511296e+01, -6.804398226511296e+01, 1.952652640297647e-07, 1.976897954156577e-07, 1.955054473046886e-07, 1.973905528790973e-07, 1.965152505219781e-07, 1.965152505219781e-07, 2.004848685064814e-06, 2.112200352576245e-06, 1.723747203542573e-06, 1.811039238263583e-06, 2.450715805008885e-06, 2.450715805008885e-06, 5.883917284359566e-03, 6.678672367406476e-03, 7.179477032297614e-03, 8.788762300095209e-03, 5.325654574270472e-03, 5.325654574270472e-03, 4.195113661403655e-01, 1.771413142779985e-01, 5.445784538402629e-01, 5.507788012729626e-05, 6.362100447078752e-01, 6.362100447078752e-01, -1.154033528482600e+01, -1.589057019435441e+01, -1.605079900108341e+02, -1.369303718411142e+00, -3.881619904262246e+01, -3.881619904262241e+01, 1.028968873374068e-02, 8.728693689172283e-03, 9.166915901716656e-03, 9.579075989841418e-03, 9.363092759129110e-03, 9.363092759129110e-03, 1.229721211306534e-02, 8.218059195660729e-03, 8.596878341069392e-03, 9.209389734987271e-03, 8.879808216888510e-03, 8.879808216888514e-03, 5.349672911482849e-03, 9.357030686800820e-02, 6.302109622006870e-02, 3.701757065748817e-02, 4.907353515176015e-02, 4.907353515176018e-02, 1.253532525883797e-02, -8.857084366846893e+00, -3.072880010213635e+00, 5.692452659719757e-02, 6.099020899294945e-01, 6.099020899294981e-01, -4.137511059629295e+01, -7.835000918954841e-01, -8.970444402130468e+00, 8.358483290309927e-01, -8.114754248091408e+01, -8.114754248091366e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
