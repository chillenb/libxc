
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbefe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.365701704968602e-02, -6.365788205695401e-02, -6.366034299456758e-02, -6.364750293152488e-02, -6.365442733862622e-02, -6.365442733862622e-02, -5.252570770147781e-02, -5.253085950922035e-02, -5.265019908467700e-02, -5.244338356183440e-02, -5.253193243779416e-02, -5.253193243779416e-02, -3.558463680152960e-02, -3.535511108790865e-02, -2.967493449875019e-02, -2.995833266307162e-02, -2.997002881875276e-02, -2.997002881875276e-02, -1.016746953074490e-02, -1.092454165580221e-02, -3.839117212635366e-02, -3.777762857003261e-03, -3.963582252173001e-03, -3.963582252173001e-03, -1.294058779837542e-08, -1.726481309999306e-08, -1.927510935376131e-05, -9.296234554714844e-10, -2.400224288420794e-09, -2.400224288420794e-09, -6.993512446453358e-02, -7.013665312336201e-02, -6.994343367251649e-02, -7.012134275132023e-02, -7.003766999787739e-02, -7.003766999787739e-02, -3.002559836636633e-02, -3.055720324107630e-02, -2.883867586244122e-02, -2.929905683417298e-02, -3.091014307373138e-02, -3.091014307373138e-02, -4.538909305376607e-02, -5.910335034093914e-02, -4.278454300401562e-02, -5.490638488344480e-02, -4.693373394856287e-02, -4.693373394856284e-02, -8.409222516088388e-04, -5.766646060045268e-03, -6.588979858389230e-04, -7.804144429785839e-02, -2.089515427441891e-03, -2.089515427441891e-03, -3.627511221092339e-10, -9.842811071400503e-10, -1.748938445456094e-09, -1.769391141604182e-04, -1.715499418734889e-09, -1.715499423071698e-09, -6.165620069515770e-02, -5.786371725714425e-02, -5.915121247083429e-02, -6.025390767158744e-02, -5.969826495288734e-02, -5.969826495288734e-02, -6.220990752465344e-02, -3.447746012341764e-02, -4.126776082321432e-02, -4.897612390201556e-02, -4.500371865554888e-02, -4.500371865554888e-02, -5.934657277223548e-02, -9.589340175080639e-03, -1.526277353611132e-02, -2.997983430483379e-02, -2.211862850634351e-02, -2.211862850634352e-02, -3.355306409102986e-02, -1.460778037542729e-05, -5.530900942954040e-05, -3.427205540858988e-02, -5.606150448319996e-04, -5.606150448320031e-04, -5.046782431804980e-08, -9.206596531148581e-12, -1.531611137830374e-10, -4.328802576920587e-04, -1.543611040637910e-09, -1.543611036734782e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbefe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.414169000692040e-01, -1.414170749701674e-01, -1.414177494309014e-01, -1.414180443631654e-01, -1.414206615285788e-01, -1.414203354474456e-01, -1.414064817961534e-01, -1.414075162568274e-01, -1.414134116759670e-01, -1.414151427143900e-01, -1.414134116759670e-01, -1.414151427143900e-01, -1.204929931803361e-01, -1.204947196684278e-01, -1.204973393845676e-01, -1.204993110031566e-01, -1.206031915282238e-01, -1.206005817141970e-01, -1.204248739947334e-01, -1.204231003095671e-01, -1.205231621752502e-01, -1.204758206905839e-01, -1.205231621752502e-01, -1.204758206905839e-01, -8.582455619776282e-02, -8.544753344453947e-02, -8.570803401574292e-02, -8.524694240937408e-02, -8.026269199356949e-02, -8.084561537761387e-02, -8.102877413044519e-02, -8.084506236948295e-02, -7.825427077465781e-02, -8.381385993826747e-02, -7.825427077465781e-02, -8.381385993826747e-02, -3.954209357982556e-02, -3.812526061472159e-02, -4.149907549970986e-02, -3.979539097954667e-02, -9.164873995147109e-02, -8.831540125978371e-02, -1.844396628544111e-02, -1.822225593819037e-02, -1.666154043998815e-02, -2.919254578869400e-02, -1.666154043998817e-02, -2.919254578869400e-02, -8.621266685802162e-08, -8.296049927244207e-08, -1.153226130542094e-07, -1.103802105929568e-07, -1.244271890903727e-04, -1.192757440252801e-04, -6.063299676981387e-09, -6.124863186913665e-09, -1.481629790736497e-08, -2.033362987583160e-08, -1.481629790953337e-08, -2.033362987756632e-08, -1.378494815813278e-01, -1.378870884297439e-01, -1.379806317994045e-01, -1.380193186207845e-01, -1.378545940918816e-01, -1.378929044154937e-01, -1.379711114327934e-01, -1.380089212561297e-01, -1.379162080868403e-01, -1.379545485435038e-01, -1.379162080868403e-01, -1.379545485435038e-01, -9.054177578121875e-02, -9.054601168590319e-02, -9.137853723044372e-02, -9.140165815732368e-02, -8.872937062203934e-02, -8.858895686911571e-02, -8.949657744406726e-02, -8.934853203382756e-02, -9.172552836026604e-02, -9.210170700635360e-02, -9.172552836026604e-02, -9.210170700635360e-02, -8.468970317812548e-02, -8.497981031656245e-02, -8.112928500855360e-02, -8.107193657311791e-02, -8.477803588251163e-02, -8.098557389584642e-02, -8.107930884961534e-02, -7.715884025588494e-02, -8.223171500210187e-02, -8.794065075610843e-02, -8.223171500210186e-02, -8.794065075610841e-02, -4.799677021993670e-03, -4.761550029903646e-03, -2.617662527865879e-02, -2.605994060453429e-02, -3.888189383448307e-03, -3.721830599991235e-03, -1.164117442452900e-01, -1.164860813890711e-01, -1.126429322182701e-02, -1.071877400461714e-02, -1.126429322182701e-02, -1.071877400461714e-02, -2.410358116546924e-09, -2.356381512761377e-09, -6.482212415136267e-09, -6.424046267890303e-09, -1.169316224737915e-08, -1.130617441432442e-08, -1.076962242133026e-03, -1.071612951947312e-03, -1.279675714628862e-08, -1.064536549508872e-08, -1.279675715390514e-08, -1.064536549663371e-08, -7.490985218750201e-02, -7.442069508769748e-02, -7.856404421052744e-02, -7.808279888894627e-02, -7.743098125631938e-02, -7.694531594242364e-02, -7.637158724617200e-02, -7.588664936164505e-02, -7.691541325852227e-02, -7.643014457891611e-02, -7.691541325852227e-02, -7.643014457891611e-02, -7.273224723791739e-02, -7.231473498781441e-02, -7.944856678234763e-02, -7.905208895479479e-02, -8.173669812908764e-02, -8.128333433935368e-02, -8.115875831525143e-02, -8.076282787673295e-02, -8.182727236027997e-02, -8.142815392574120e-02, -8.182727236027997e-02, -8.142815392574120e-02, -8.315142874733245e-02, -8.294379470692870e-02, -3.854610045995830e-02, -3.833955329793474e-02, -5.225286511496906e-02, -5.174114248628450e-02, -7.063283233315376e-02, -7.018174506799651e-02, -6.283296441423765e-02, -6.285654231049505e-02, -6.283296441423768e-02, -6.285654231049506e-02, -7.750593829563857e-02, -7.689086272783778e-02, -9.268157203093450e-05, -9.219465076280408e-05, -3.489617867799771e-04, -3.399363593489636e-04, -7.084207098090402e-02, -6.952621590209759e-02, -3.334585980382681e-03, -3.187274727917343e-03, -3.334585980382670e-03, -3.187274727917347e-03, -3.322576775679143e-07, -3.245657602903160e-07, -6.083439148896563e-11, -6.075803503308530e-11, -1.027174711274076e-09, -9.914870878447333e-10, -2.562659683118778e-03, -2.528539136889523e-03, -1.133187176227321e-08, -9.609723108989945e-09, -1.133187175526656e-08, -9.609723104368533e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbefe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.964159887626535e-10, 3.928319775253070e-10, 1.964159887626535e-10, 1.964191659091166e-10, 3.928383318182332e-10, 1.964191659091166e-10, 1.964229952082469e-10, 3.928459904164938e-10, 1.964229952082469e-10, 1.963759477939611e-10, 3.927518955879221e-10, 1.963759477939611e-10, 1.964020597321908e-10, 3.928041194643817e-10, 1.964020597321908e-10, 1.964020597321908e-10, 3.928041194643817e-10, 1.964020597321908e-10, 1.075713886097363e-06, 2.151427772194725e-06, 1.075713886097363e-06, 1.075906962690048e-06, 2.151813925380095e-06, 1.075906962690048e-06, 1.080256726312055e-06, 2.160513452624110e-06, 1.080256726312055e-06, 1.071724276143902e-06, 2.143448552287805e-06, 1.071724276143902e-06, 1.075819463638269e-06, 2.151638927276537e-06, 1.075819463638269e-06, 1.075819463638269e-06, 2.151638927276537e-06, 1.075819463638269e-06, 1.730546919836185e-03, 3.461093839672372e-03, 1.730546919836185e-03, 1.722180751078194e-03, 3.444361502156387e-03, 1.722180751078194e-03, 1.497089625072920e-03, 2.994179250145841e-03, 1.497089625072920e-03, 1.458907524290160e-03, 2.917815048580320e-03, 1.458907524290160e-03, 1.477915129952314e-03, 2.955830259904627e-03, 1.477915129952314e-03, 1.477915129952314e-03, 2.955830259904627e-03, 1.477915129952314e-03, 2.087708722146172e-01, 4.175417444292344e-01, 2.087708722146172e-01, 2.147008340773543e-01, 4.294016681547085e-01, 2.147008340773543e-01, 9.268802561611776e-04, 1.853760512322355e-03, 9.268802561611776e-04, 1.957937179754055e-01, 3.915874359508112e-01, 1.957937179754055e-01, 1.546993923287746e-01, 3.093987846575493e-01, 1.546993923287746e-01, 1.546993923287746e-01, 3.093987846575492e-01, 1.546993923287746e-01, 1.018855867809093e-02, 2.037711735599568e-02, 1.018855867809093e-02, 1.198280100240347e-02, 2.396560200503099e-02, 1.198280100240347e-02, 6.033508273942482e-02, 1.206701654788554e-01, 6.033508273942482e-02, 3.621033021959555e-03, 7.242066043921678e-03, 3.621033021959555e-03, 5.311989986036133e-03, 1.062397997119444e-02, 5.311989986036133e-03, 5.311989987007043e-03, 1.062397997401878e-02, 5.311989987007043e-03, 2.696551689438988e-07, 5.393103378877976e-07, 2.696551689438988e-07, 2.712482220518796e-07, 5.424964441037591e-07, 2.712482220518796e-07, 2.697185897003226e-07, 5.394371794006451e-07, 2.697185897003226e-07, 2.711248039471423e-07, 5.422496078942847e-07, 2.711248039471423e-07, 2.704657166574325e-07, 5.409314333148651e-07, 2.704657166574325e-07, 2.704657166574325e-07, 5.409314333148651e-07, 2.704657166574325e-07, 6.993484387960699e-06, 1.398696877592140e-05, 6.993484387960699e-06, 6.938298996188491e-06, 1.387659799237698e-05, 6.938298996188491e-06, 6.738877572502143e-06, 1.347775514500429e-05, 6.738877572502143e-06, 6.692810810904191e-06, 1.338562162180838e-05, 6.692810810904191e-06, 7.089202783983576e-06, 1.417840556796715e-05, 7.089202783983576e-06, 7.089202783983576e-06, 1.417840556796715e-05, 7.089202783983576e-06, 4.920269489160767e-03, 9.840538978321533e-03, 4.920269489160767e-03, 5.333456441738441e-03, 1.066691288347688e-02, 5.333456441738441e-03, 6.490991429768391e-03, 1.298198285953678e-02, 6.490991429768391e-03, 8.311290581934546e-03, 1.662258116386909e-02, 8.311290581934546e-03, 4.835908168355140e-03, 9.671816336710279e-03, 4.835908168355140e-03, 4.835908168355141e-03, 9.671816336710286e-03, 4.835908168355141e-03, 1.317298682354520e-01, 2.634597364709035e-01, 1.317298682354520e-01, 9.171755945596570e-02, 1.834351189119314e-01, 9.171755945596570e-02, 1.357926102319835e-01, 2.715852204639666e-01, 1.357926102319835e-01, 4.780117554113978e-05, 9.560235108227955e-05, 4.780117554113978e-05, 2.285608862267538e-01, 4.571217724535078e-01, 2.285608862267538e-01, 2.285608862267538e-01, 4.571217724535078e-01, 2.285608862267538e-01, 3.530968444637354e-03, 7.061936886118569e-03, 3.530968444637354e-03, 4.451962128438630e-03, 8.903924259280115e-03, 4.451962128438630e-03, 4.434286256662871e-02, 8.868572513239455e-02, 4.434286256662871e-02, 1.410117460795737e-01, 2.820234921591483e-01, 1.410117460795737e-01, 1.697138334720424e-02, 3.394276669283977e-02, 1.697138334720424e-02, 1.697138334453648e-02, 3.394276669079083e-02, 1.697138334453648e-02, 8.420281588872432e-03, 1.684056317774486e-02, 8.420281588872432e-03, 7.641992142391895e-03, 1.528398428478379e-02, 7.641992142391895e-03, 7.897202943865075e-03, 1.579440588773015e-02, 7.897202943865075e-03, 8.123296509607730e-03, 1.624659301921546e-02, 8.123296509607730e-03, 8.008556166090431e-03, 1.601711233218086e-02, 8.008556166090431e-03, 8.008556166090431e-03, 1.601711233218086e-02, 8.008556166090431e-03, 9.772511965282959e-03, 1.954502393056591e-02, 9.772511965282959e-03, 7.379696479582859e-03, 1.475939295916572e-02, 7.379696479582859e-03, 7.837777272484928e-03, 1.567555454496985e-02, 7.837777272484928e-03, 8.457521449146898e-03, 1.691504289829380e-02, 8.457521449146898e-03, 8.143061544375049e-03, 1.628612308875010e-02, 8.143061544375049e-03, 8.143061544375049e-03, 1.628612308875010e-02, 8.143061544375049e-03, 4.287174844906714e-03, 8.574349689813429e-03, 4.287174844906714e-03, 6.025323404526220e-02, 1.205064680905244e-01, 6.025323404526220e-02, 4.759633297600127e-02, 9.519266595200253e-02, 4.759633297600127e-02, 3.222974911559203e-02, 6.445949823118406e-02, 3.222974911559203e-02, 4.097335855690393e-02, 8.194671711380787e-02, 4.097335855690393e-02, 4.097335855690394e-02, 8.194671711380788e-02, 4.097335855690394e-02, 1.056316358680191e-02, 2.112632717360381e-02, 1.056316358680191e-02, 4.972145517000560e-02, 9.944291034000868e-02, 4.972145517000560e-02, 7.493110796518504e-02, 1.498622159303732e-01, 7.493110796518504e-02, 4.680180251268696e-02, 9.360360502537392e-02, 4.680180251268696e-02, 2.331821010388834e-01, 4.663642020777662e-01, 2.331821010388834e-01, 2.331821010388835e-01, 4.663642020777674e-01, 2.331821010388835e-01, 1.269427409107383e-02, 2.538854818214203e-02, 1.269427409107383e-02, 4.829340383543502e-03, 9.658680809151348e-03, 4.829340383543502e-03, 6.043603964661994e-03, 1.208720792184854e-02, 6.043603964661994e-03, 2.172656697458967e-01, 4.345313394917932e-01, 2.172656697458967e-01, 2.166259655570709e-02, 4.332519310904074e-02, 2.166259655570709e-02, 2.166259655985465e-02, 4.332519311812545e-02, 2.166259655985465e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
