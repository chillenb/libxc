
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_acgga_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.684341861147490e-02, -5.684424060611309e-02, -5.684658542017790e-02, -5.683438374449099e-02, -5.684096298101995e-02, -5.684096298101995e-02, -4.480714261986049e-02, -4.481211240767351e-02, -4.492726571876423e-02, -4.472777230758027e-02, -4.481315831282925e-02, -4.481315831282925e-02, -2.909138078325869e-02, -2.886345686785741e-02, -2.337085653369624e-02, -2.363182571262618e-02, -2.377265193432593e-02, -2.377265193432593e-02, -6.871213811146552e-03, -7.467722134163864e-03, -3.174991149636522e-02, -2.307978977858351e-03, -3.931523401965387e-03, -3.931523401965387e-03, -8.915937574182375e-09, -1.183388660790731e-08, -1.162578849977947e-05, -6.690996653864615e-10, -2.393268303387266e-09, -2.393268303387266e-09, -6.190325146329578e-02, -6.210410241642724e-02, -6.191153026808294e-02, -6.208883901715211e-02, -6.200543790948363e-02, -6.200543790948363e-02, -2.368226396843904e-02, -2.415649409658425e-02, -2.263435679739796e-02, -2.304204085147053e-02, -2.447019070755521e-02, -2.447019070755521e-02, -3.987573573221089e-02, -5.628405237009461e-02, -3.725574249849807e-02, -5.173548278113593e-02, -4.171506265377851e-02, -4.171506265377851e-02, -4.894796189689651e-04, -3.647884231496214e-03, -3.841188042934410e-04, -7.275180367401279e-02, -1.243593736292124e-03, -1.243593736292124e-03, -2.639800424826868e-10, -7.051383223951725e-10, -1.191985870134200e-09, -1.023539266198563e-04, -1.352347311816612e-09, -1.352347311816612e-09, -6.054734654086934e-02, -5.530612602638868e-02, -5.704612393254670e-02, -5.856724404252864e-02, -5.779703820264176e-02, -5.779703820264176e-02, -6.166368993432504e-02, -2.846388803878762e-02, -3.566779125822825e-02, -4.448309562519658e-02, -3.985274516426739e-02, -3.985274516426739e-02, -5.623536459127284e-02, -6.395667452497741e-03, -1.087879695625040e-02, -2.448707694273446e-02, -1.689387581227291e-02, -1.689387581227293e-02, -2.766728730731073e-02, -8.830681614568498e-06, -3.271080329110661e-05, -2.923961236620404e-02, -3.239717357231267e-04, -3.239717357231232e-04, -3.393561713056599e-08, -6.854026197991880e-12, -1.115210229765151e-10, -2.487698599459575e-04, -1.183148724598512e-09, -1.183148726766916e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_acgga_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.308336019568550e-01, -1.308345264820078e-01, -1.308371751345155e-01, -1.308234507435749e-01, -1.308308496476807e-01, -1.308308496476807e-01, -1.104300176229112e-01, -1.104354690886784e-01, -1.105617364867870e-01, -1.103439306165875e-01, -1.104367674765824e-01, -1.104367674765824e-01, -7.878452835666022e-02, -7.852557164562246e-02, -7.116314039350387e-02, -7.161969632244534e-02, -7.181556582503293e-02, -7.181556582503293e-02, -2.907328878869107e-02, -3.092707042346461e-02, -8.329490390365488e-02, -1.172657712951149e-02, -1.857391213217558e-02, -1.857391213217558e-02, -5.638586328071147e-08, -7.477438023628072e-08, -7.113085930525153e-05, -4.264738218874938e-09, -1.519634591568028e-08, -1.519634591664478e-08, -1.295368680862122e-01, -1.297034684867149e-01, -1.295437626817989e-01, -1.296908464028579e-01, -1.296217116304566e-01, -1.296217116304566e-01, -7.735082141861951e-02, -7.827823743998752e-02, -7.528160753614251e-02, -7.610916414775155e-02, -7.886552241749653e-02, -7.886552241749653e-02, -8.364723558664289e-02, -8.295901086009902e-02, -8.121519460110010e-02, -8.085723249534595e-02, -8.438165233388696e-02, -8.438165233388696e-02, -2.778621919431915e-03, -1.757071460727556e-02, -2.202082968814985e-03, -1.168715089570022e-01, -6.684309806012486e-03, -6.684309806012486e-03, -1.686827210952428e-09, -4.493497071943651e-09, -7.582132241599256e-09, -6.089274967562897e-04, -8.599927057839467e-09, -8.599927058254766e-09, -7.583625697245470e-02, -8.016376823627568e-02, -7.893029054792719e-02, -7.768869966435193e-02, -7.833665344380303e-02, -7.833665344380303e-02, -7.317027086716540e-02, -7.431721108239929e-02, -7.958997572204504e-02, -8.171734672688752e-02, -8.114467875010492e-02, -8.114467875010492e-02, -8.488004645973107e-02, -2.799621334880658e-02, -4.158270557878423e-02, -6.596234135622438e-02, -5.483627379553841e-02, -5.483627379553843e-02, -7.247437599838825e-02, -5.413933979438299e-05, -1.980122676904951e-04, -6.850311197686446e-02, -1.869005774092836e-03, -1.869005774092842e-03, -2.136688271894974e-07, -4.415048193972452e-11, -7.139443422801546e-10, -1.447817852808452e-03, -7.526401619524882e-09, -7.526401619803691e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_acgga_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acgga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.859065356983862e-10, 1.859096985760091e-10, 1.859137612130499e-10, 1.858669198625938e-10, 1.858928817022182e-10, 1.858928817022182e-10, 1.037613449328128e-06, 1.037819061824663e-06, 1.042464114863518e-06, 1.033447742039622e-06, 1.037737549280904e-06, 1.037737549280904e-06, 1.733329806002397e-03, 1.721125758011273e-03, 1.412744840244996e-03, 1.379706145538604e-03, 1.404554185558972e-03, 1.404554185558972e-03, 1.623192792017792e-01, 1.703034840185270e-01, 9.355475781269463e-04, 1.264288027542723e-01, 1.571620993376283e-01, 1.571620993376281e-01, 6.716823616841072e-03, 7.854939163567691e-03, 3.483452428562197e-02, 2.505250453655740e-03, 5.076636584525557e-03, 5.076636584657289e-03, 2.687176453666117e-07, 2.704636712233070e-07, 2.687873068210005e-07, 2.703285264816556e-07, 2.696057477959981e-07, 2.696057477959981e-07, 6.183623936789732e-06, 6.155093476636100e-06, 5.912127668212397e-06, 5.889073090099078e-06, 6.303656544420493e-06, 6.303656544420493e-06, 5.613377407628037e-03, 7.118095017700463e-03, 7.318325465657201e-03, 1.087120974620594e-02, 5.610935893981173e-03, 5.610935893981173e-03, 7.617756630008433e-02, 6.264773056343576e-02, 7.823427574703885e-02, 5.713722074998045e-05, 1.395787586007968e-01, 1.395787586007968e-01, 2.472580127619626e-03, 3.064233991502104e-03, 2.889370959476084e-02, 7.913755798852788e-02, 1.280763340575581e-02, 1.280763340534482e-02, 1.218581966396937e-02, 1.032172425519324e-02, 1.089817152116961e-02, 1.143435855359249e-02, 1.115890250797530e-02, 1.115890250797530e-02, 1.455432545371323e-02, 7.665105309874254e-03, 8.765464734157855e-03, 1.031036858391972e-02, 9.488181732633497e-03, 9.488181732633497e-03, 5.644109145050679e-03, 4.511921555866869e-02, 3.992520935056244e-02, 3.362212730604091e-02, 3.850324066200251e-02, 3.850324066200251e-02, 1.100810676535428e-02, 2.874865659134814e-02, 4.259488272252238e-02, 5.261587463835366e-02, 1.330423692164191e-01, 1.330423692164186e-01, 8.156217772254042e-03, 3.470479322452332e-03, 4.233118689283951e-03, 1.226824820341030e-01, 1.589079313023166e-02, 1.589079312848548e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
