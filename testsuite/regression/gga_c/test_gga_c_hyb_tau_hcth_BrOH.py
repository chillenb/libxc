
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_hyb_tau_hcth_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.395538450094227e-01, -1.395539142531871e-01, -1.395542592056383e-01, -1.395531248106419e-01, -1.395538812247523e-01, -1.395538812247523e-01, -9.404519921117796e-02, -9.404533214959766e-02, -9.404991489593389e-02, -9.404704949578986e-02, -9.404537024296256e-02, -9.404537024296256e-02, -5.510427682681546e-02, -5.499441763957702e-02, -5.085874220780676e-02, -5.125919689087867e-02, -5.506493416746363e-02, -5.506493416746363e-02, -1.686620378086614e-02, -1.870062101995344e-02, -6.036906347153453e-02, 1.441734436044622e-02, -1.744764414289167e-02, -1.744764414289167e-02, 1.203729382590310e-02, 1.251718791440879e-02, 3.339117490085237e-02, 6.290389674139185e-03, 1.240444831780611e-02, 1.240444831780611e-02, -1.041762947994639e-01, -1.041949694232584e-01, -1.041781645758629e-01, -1.041926812588540e-01, -1.041858393920912e-01, -1.041858393920912e-01, -7.294705362128402e-02, -7.359289131939759e-02, -7.215116384516489e-02, -7.268233921451954e-02, -7.433606471249753e-02, -7.433606471249753e-02, -5.409780190682240e-02, -5.729839659356429e-02, -5.305502289623167e-02, -5.464155965818060e-02, -5.484205342793069e-02, -5.484205342793069e-02, 3.331110282401253e-02, 2.207981245535247e-03, 3.176644824758414e-02, -8.230853919832573e-02, 2.371051098408357e-02, 2.371051098408357e-02, 6.086231099667677e-03, 6.874973564934730e-03, 5.271183821898639e-03, 3.599993589538725e-02, 6.312894968134802e-03, 6.312894968134797e-03, -5.153656213211708e-02, -5.619373940853747e-02, -5.600465145212444e-02, -5.513146621814988e-02, -5.568752638866333e-02, -5.568752638866333e-02, -4.738780351174844e-02, -5.068847784404697e-02, -5.211446371878480e-02, -5.293092770950703e-02, -5.247856932146496e-02, -5.247856932146500e-02, -5.818529510362839e-02, -1.296891762849847e-02, -2.748595537200441e-02, -4.310440235316597e-02, -3.699867013946048e-02, -3.699867013946053e-02, -4.843164216653019e-02, 3.263523334782171e-02, 3.637682213210236e-02, -4.319527352806763e-02, 3.316145280831996e-02, 3.316145280831994e-02, 1.377347452899663e-02, 2.031104852062906e-03, 3.748688291872440e-03, 3.202322383637127e-02, 5.434334780275015e-03, 5.434334780275020e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_hyb_tau_hcth_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.488286404684149e-01, -1.488290026045315e-01, -1.488302332020483e-01, -1.488243151097265e-01, -1.488288346604656e-01, -1.488288346604656e-01, -1.034141167271266e-01, -1.034115188652312e-01, -1.033420206507791e-01, -1.034681177365424e-01, -1.034128869079319e-01, -1.034128869079319e-01, -8.189324898807125e-02, -8.245147668666386e-02, -1.002529884750826e-01, -9.942122477029662e-02, -8.209327473118795e-02, -8.209327473118795e-02, -9.127195833636904e-02, -8.944826791633551e-02, -7.327540710208483e-02, -7.431367768517824e-02, -9.072160837703060e-02, -9.072160837703060e-02, 1.516220579719646e-02, 1.571324248534052e-02, 2.862527314174650e-02, 8.181040034495081e-03, 1.557610660626597e-02, 1.557610660626597e-02, -1.172407870628234e-01, -1.173941516179572e-01, -1.172560818332403e-01, -1.173753260486310e-01, -1.173197361310838e-01, -1.173197361310838e-01, -1.397782041856605e-01, -1.378398387027258e-01, -1.428161067004402e-01, -1.412657940176696e-01, -1.346114708362934e-01, -1.346114708362934e-01, -6.050046992602959e-02, -6.690927682805489e-02, -5.961423931475593e-02, -6.647890463144519e-02, -6.143031895025926e-02, -6.143031895025926e-02, -2.283594144922952e-02, -9.933034633775674e-02, -2.582571477845827e-02, -9.435815505508184e-02, -5.196476121409700e-02, -5.196476121409700e-02, 7.920944366450017e-03, 8.918544439168136e-03, 6.866876117692640e-03, 1.546574005631299e-02, 8.199987720573223e-03, 8.199987720573216e-03, -3.601350790159746e-02, -6.367160239267185e-02, -5.770224468455877e-02, -5.004651364450066e-02, -5.424486704453171e-02, -5.424486704453172e-02, -2.957146567616746e-02, -6.601165717772720e-02, -5.897842653180618e-02, -6.119839127596781e-02, -5.887765227991350e-02, -5.887765227991387e-02, -6.899166463215936e-02, -1.078186203651829e-01, -9.785088431483953e-02, -6.403635841642230e-02, -8.025095472647902e-02, -8.025095472647868e-02, -6.598067265889604e-02, 3.086375735453486e-02, 2.391146855229171e-02, -5.300517096138353e-02, -1.016814799927846e-02, -1.016814799927865e-02, 1.720756666301474e-02, 2.683301732291035e-03, 4.920593439723254e-03, -1.033243884671303e-02, 7.079305702485598e-03, 7.079305702485520e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_hyb_tau_hcth_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.792111123482606e-12, 1.792874186543982e-12, 1.795131943324432e-12, 1.782671727291822e-12, 1.792523107836261e-12, 1.792523107836261e-12, 2.140729951117575e-08, 2.136671896540843e-08, 2.025764139263353e-08, 2.215901790382650e-08, 2.138599957652745e-08, 2.138599957652745e-08, 6.865559465157348e-04, 7.050784350191647e-04, 1.229962075987693e-03, 1.166463613092085e-03, 6.932283873366989e-04, 6.932283873366989e-04, 5.580411889244571e-01, 5.271528413002660e-01, 1.148887643785328e-04, 1.372695620427796e+00, 5.488712926765518e-01, 5.488712926765518e-01, 1.622380565763020e+01, 1.616018457376642e+01, 5.012210694874369e+00, 1.251217091120624e+01, 1.681361324818995e+01, 1.681361324818995e+01, 1.953442438831914e-08, 2.021340686696039e-08, 1.960162795866990e-08, 2.012948967208377e-08, 1.988340052606806e-08, 1.988340052606806e-08, 6.910800382252302e-06, 6.524968963639748e-06, 7.233928515747384e-06, 6.924884068393178e-06, 6.233140992517414e-06, 6.233140992517414e-06, -4.114173127512059e-05, 9.936017322004053e-04, -1.271167420877301e-05, 1.953600373066652e-03, -1.876182926126325e-05, -1.876182926126325e-05, 2.000680958009715e+00, 4.302815556690923e-01, 2.296699606808760e+00, 5.906108476582696e-06, 1.934865230143215e+00, 1.934865230143215e+00, 1.331788000361254e+01, 1.317672473181345e+01, 3.872367864934478e+01, 4.400576225770248e+00, 1.963916918064123e+01, 1.963916918063978e+01, -3.703883476593554e-02, 3.116934849388857e-04, -3.887086232470693e-03, -1.166718353041050e-02, -7.043835903194241e-03, -7.043835903194234e-03, -7.106973099915702e-02, 1.526829065889825e-03, 5.982894312842309e-05, 4.890076442220599e-04, -4.993088896781771e-05, -4.993088896779079e-05, 1.034264860026928e-03, 1.848825484037511e-01, 8.585426033497252e-02, 1.285231076731227e-02, 3.966370011400651e-02, 3.966370011400658e-02, 3.010635541057322e-03, 4.331916144161096e+00, 3.937422136471907e+00, 6.043741601028568e-03, 3.762496915994507e+00, 3.762496915994533e+00, 1.190402733980143e+01, 2.478870487052865e+01, 2.059277242044821e+01, 4.702998278197176e+00, 2.910292106830518e+01, 2.910292106824048e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
