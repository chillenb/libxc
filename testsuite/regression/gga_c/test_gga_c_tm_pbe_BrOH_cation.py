
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_tm_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.790949228468768e-02, -3.791034097354440e-02, -3.791274761903587e-02, -3.790015020945509e-02, -3.790694476828421e-02, -3.790694476828421e-02, -3.210272863272591e-02, -3.210846379624652e-02, -3.224129414289079e-02, -3.201016473238071e-02, -3.210952348525613e-02, -3.210952348525613e-02, -2.588931404296355e-02, -2.556311819509028e-02, -1.819235753000829e-02, -1.846355939568883e-02, -1.855297094903333e-02, -1.855297094903333e-02, -5.609259762430450e-03, -6.290133136498129e-03, -2.800197196339579e-02, -1.462030154223991e-03, -1.622000778934343e-03, -1.622000778934346e-03, -7.235830808225568e-09, -9.585046549867582e-09, -7.256640330199210e-06, -5.537436208354063e-10, -1.391355723776716e-09, -1.391355723776716e-09, -5.001290120083550e-02, -5.026293904175985e-02, -5.002318753484733e-02, -5.024391207328377e-02, -5.014006925932024e-02, -5.014006925932024e-02, -1.269408751601080e-02, -1.309451657484884e-02, -1.179272793794321e-02, -1.212650303134521e-02, -1.338022587945534e-02, -1.338022587945534e-02, -4.666124403200182e-02, -7.002972584861265e-02, -4.314440874098000e-02, -6.624853414838437e-02, -4.974924046008983e-02, -4.974924046008981e-02, -2.706276700299194e-04, -2.258036933944260e-03, -2.127544798115541e-04, -8.251825356345319e-02, -7.516032892243389e-04, -7.516032892243389e-04, -2.209140257877773e-10, -5.875914230006607e-10, -1.068705857750624e-09, -6.029148116612482e-05, -1.031284851352871e-09, -1.031284851352871e-09, -6.646921236341494e-02, -6.819976009039418e-02, -6.807153487144796e-02, -6.755223344860160e-02, -6.785629973382312e-02, -6.785629973382312e-02, -6.453749105002841e-02, -2.893828219883934e-02, -4.118812415775255e-02, -5.713658930375374e-02, -4.884852965634985e-02, -4.884852965634985e-02, -7.067122467733859e-02, -4.315226702667062e-03, -8.618180131769328e-03, -2.715714148196495e-02, -1.602733231762234e-02, -1.602733231762235e-02, -2.879438702353330e-02, -5.551532510644427e-06, -1.937509767593187e-05, -3.689246672251840e-02, -1.919245678285580e-04, -1.919245678285685e-04, -2.673366384514653e-08, -5.923367915952604e-12, -9.544522810989164e-11, -1.478349632751744e-04, -9.343186092424655e-10, -9.343186077245824e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_tm_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.140798679825595e-01, -1.140799783673549e-01, -1.140810932998931e-01, -1.140812794411072e-01, -1.140848693742100e-01, -1.140846635693658e-01, -1.140656887220106e-01, -1.140663415417562e-01, -1.140755834948123e-01, -1.140766759743909e-01, -1.140755834948123e-01, -1.140766759743909e-01, -1.060247452924953e-01, -1.060259827054680e-01, -1.060347546806825e-01, -1.060361678806559e-01, -1.062698415108396e-01, -1.062679679246615e-01, -1.058626330794692e-01, -1.058613632729951e-01, -1.060542687964209e-01, -1.060203354622040e-01, -1.060542687964209e-01, -1.060203354622040e-01, -9.621530678845726e-02, -9.586772754973724e-02, -9.556020787286222e-02, -9.513737299603099e-02, -7.708015267970325e-02, -7.754248610126706e-02, -7.813111474993094e-02, -7.798475176346976e-02, -7.621679848163701e-02, -8.066429562848725e-02, -7.621679848163701e-02, -8.066429562848725e-02, -3.208491147965543e-02, -3.108076063560511e-02, -3.551461124568441e-02, -3.424771289376805e-02, -1.018336622437564e-01, -9.877923963279471e-02, -9.070421422771584e-03, -8.969565894814617e-03, -9.056591485356182e-03, -1.523771437972739e-02, -9.056591485356221e-03, -1.523771437972734e-02, -4.792635923072797e-08, -4.609303599531761e-08, -6.364853570293665e-08, -6.088190584630326e-08, -4.704000954191503e-05, -4.508640335531166e-05, -3.595483572735653e-09, -3.632408588298197e-09, -8.532764111219508e-09, -1.178593390423069e-08, -8.532764113387912e-09, -1.178593390639910e-08, -1.320428367099554e-01, -1.320729773697182e-01, -1.323668999485771e-01, -1.323979652757678e-01, -1.320559170259039e-01, -1.320866239010578e-01, -1.323425835309781e-01, -1.323729402340772e-01, -1.322076790187567e-01, -1.322384374480337e-01, -1.322076790187567e-01, -1.322384374480337e-01, -5.934111606854747e-02, -5.934338380300020e-02, -6.069560938529076e-02, -6.070814207135094e-02, -5.622548525630573e-02, -5.615264500508453e-02, -5.740828388778947e-02, -5.733061495155096e-02, -6.155786038209933e-02, -6.176371944365724e-02, -6.155786038209933e-02, -6.176371944365724e-02, -1.239104744240909e-01, -1.242647485380228e-01, -8.349057115759069e-02, -8.342553919820318e-02, -1.229851384447011e-01, -1.183948832583322e-01, -9.124318916651145e-02, -8.661116212612849e-02, -1.220732945570501e-01, -1.291695495762725e-01, -1.220732945570501e-01, -1.291695495762724e-01, -1.710231287765423e-03, -1.697097148358241e-03, -1.366849432471855e-02, -1.361307372536166e-02, -1.371459083574065e-03, -1.314456701047502e-03, -1.583751682775163e-01, -1.584631412378760e-01, -4.826127934572432e-03, -4.605058677488046e-03, -4.826127934572432e-03, -4.605058677488046e-03, -1.462718515425452e-09, -1.429642273593182e-09, -3.853173641127437e-09, -3.818210857157382e-09, -7.123863221426440e-09, -6.885867495218203e-09, -3.821793526678430e-04, -3.803053231297256e-04, -7.675181342206832e-09, -6.370193472704771e-09, -7.675181345486544e-09, -6.370193472081355e-09, -6.966130711543377e-02, -6.915721373584970e-02, -7.751569718317472e-02, -7.697938283034331e-02, -7.259454274368257e-02, -7.207008181908883e-02, -7.031514417539822e-02, -6.980336602724387e-02, -7.124714323680935e-02, -7.072930677655175e-02, -7.124714323680935e-02, -7.072930677655175e-02, -6.983845810164306e-02, -6.941543490174978e-02, -1.021128441744654e-01, -1.016939638908313e-01, -1.187068189658283e-01, -1.181606173947607e-01, -1.174492496394773e-01, -1.169400309726954e-01, -1.225201110645315e-01, -1.220147902478229e-01, -1.225201110645315e-01, -1.220147902478229e-01, -9.051510879503644e-02, -9.027435946545914e-02, -2.491266931463954e-02, -2.479476711487284e-02, -4.523329109780168e-02, -4.485514138340081e-02, -9.792265257056150e-02, -9.740772268201983e-02, -7.152198223103075e-02, -7.154427989831615e-02, -7.152198223103086e-02, -7.154427989831612e-02, -1.017948475862014e-01, -1.011305040576157e-01, -3.527867480056486e-05, -3.509253237854526e-05, -1.241698958318161e-04, -1.209690599621873e-04, -1.094244057601916e-01, -1.077248026778104e-01, -1.242273181397165e-03, -1.188859066845628e-03, -1.242273181397151e-03, -1.188859066845653e-03, -1.747637236773420e-07, -1.706563093910460e-07, -3.908202042572312e-11, -3.903273747387170e-11, -6.384445249958429e-10, -6.160879997276378e-10, -9.412533246092687e-04, -9.290138916401040e-04, -6.842967691119794e-09, -5.791958387443732e-09, -6.842967690184670e-09, -5.791958386074927e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_tm_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_tm_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.936481946944768e-10, 3.872963893889689e-10, 1.936481946944768e-10, 1.936522998005774e-10, 3.873045996010221e-10, 1.936522998005774e-10, 1.936587857544967e-10, 3.873175715088578e-10, 1.936587857544967e-10, 1.935979639352021e-10, 3.871959278705499e-10, 1.935979639352021e-10, 1.936315017400924e-10, 3.872630034802997e-10, 1.936315017400924e-10, 1.936315017400924e-10, 3.872630034802997e-10, 1.936315017400924e-10, 1.200047155102828e-06, 2.400094310205653e-06, 1.200047155102828e-06, 1.200350871720916e-06, 2.400701743441862e-06, 1.200350871720916e-06, 1.207250439024363e-06, 2.414500878048699e-06, 1.207250439024363e-06, 1.194141203574117e-06, 2.388282407148269e-06, 1.194141203574117e-06, 1.200264794023455e-06, 2.400529588046927e-06, 1.200264794023455e-06, 1.200264794023455e-06, 2.400529588046927e-06, 1.200264794023455e-06, 2.581935414513196e-03, 5.163870829026388e-03, 2.581935414513196e-03, 2.550985396200156e-03, 5.101970792400305e-03, 2.550985396200156e-03, 1.828510536478973e-03, 3.657021072957942e-03, 1.828510536478973e-03, 1.793089393549155e-03, 3.586178787098316e-03, 1.793089393549155e-03, 1.825999750769846e-03, 3.651999501539694e-03, 1.825999750769846e-03, 1.825999750769846e-03, 3.651999501539694e-03, 1.825999750769846e-03, 1.992233714279031e-01, 3.984467428558069e-01, 1.992233714279031e-01, 2.179105776042073e-01, 4.358211552084144e-01, 2.179105776042073e-01, 1.381983056779015e-03, 2.763966113558032e-03, 1.381983056779015e-03, 1.057982541339389e-01, 2.115965082678774e-01, 1.057982541339389e-01, 9.268378229193948e-02, 1.853675645838782e-01, 9.268378229193948e-02, 9.268378229194218e-02, 1.853675645838844e-01, 9.268378229194218e-02, 5.706170663656513e-03, 1.141234132757367e-02, 5.706170663656513e-03, 6.664663231071054e-03, 1.332932646190197e-02, 6.664663231071054e-03, 2.339535179771333e-02, 4.679070359543495e-02, 2.339535179771333e-02, 2.158114716289113e-03, 4.316229435091712e-03, 2.158114716289113e-03, 3.081909449733721e-03, 6.163818900171700e-03, 3.081909449733721e-03, 3.081909451119831e-03, 6.163818901309539e-03, 3.081909451119831e-03, 3.361521801496223e-07, 6.723043602992369e-07, 3.361521801496223e-07, 3.388716227583657e-07, 6.777432455167341e-07, 3.388716227583657e-07, 3.362611045439814e-07, 6.725222090879646e-07, 3.362611045439814e-07, 3.386614666113977e-07, 6.773229332227937e-07, 3.386614666113977e-07, 3.375344165828094e-07, 6.750688331656215e-07, 3.375344165828094e-07, 3.375344165828094e-07, 6.750688331656215e-07, 3.375344165828094e-07, 5.500481391436126e-06, 1.100096278287185e-05, 5.500481391436126e-06, 5.541701592338438e-06, 1.108340318467657e-05, 5.541701592338438e-06, 5.099867265883046e-06, 1.019973453176594e-05, 5.099867265883046e-06, 5.136496373444752e-06, 1.027299274688977e-05, 5.136496373444752e-06, 5.727675402657429e-06, 1.145535080531481e-05, 5.727675402657429e-06, 5.727675402657429e-06, 1.145535080531481e-05, 5.727675402657429e-06, 1.081254254466707e-02, 2.162508508933415e-02, 1.081254254466707e-02, 2.050214529617279e-03, 4.100429059234557e-03, 2.050214529617279e-03, 1.399423054779146e-02, 2.798846109558293e-02, 1.399423054779146e-02, 7.471907756867940e-03, 1.494381551373588e-02, 7.471907756867940e-03, 1.086682961103524e-02, 2.173365922207049e-02, 1.086682961103524e-02, 1.086682961103523e-02, 2.173365922207046e-02, 1.086682961103523e-02, 4.954461503136678e-02, 9.908923006273396e-02, 4.954461503136678e-02, 5.342520005359581e-02, 1.068504001071916e-01, 5.342520005359581e-02, 5.041528258715673e-02, 1.008305651743150e-01, 5.041528258715673e-02, 1.088929334735057e-04, 2.177858669470113e-04, 1.088929334735057e-04, 1.056404332567156e-01, 2.112808665134323e-01, 1.056404332567156e-01, 1.056404332567156e-01, 2.112808665134323e-01, 1.056404332567156e-01, 2.151185265850076e-03, 4.302370532112034e-03, 2.151185265850076e-03, 2.659241153225111e-03, 5.318482304966257e-03, 2.659241153225111e-03, 2.711973103956591e-02, 5.423946207342570e-02, 2.711973103956591e-02, 5.195113379226356e-02, 1.039022675845272e-01, 5.195113379226356e-02, 1.021077111625543e-02, 2.042154223178526e-02, 1.021077111625543e-02, 1.021077112032642e-02, 2.042154223672922e-02, 1.021077112032642e-02, -8.201458369658703e-03, -1.640291673931741e-02, -8.201458369658703e-03, 6.752422977790639e-04, 1.350484595558128e-03, 6.752422977790639e-04, -2.852207749198043e-03, -5.704415498396086e-03, -2.852207749198043e-03, -5.509459368262301e-03, -1.101891873652460e-02, -5.509459368262301e-03, -4.224025572352081e-03, -8.448051144704162e-03, -4.224025572352081e-03, -4.224025572352081e-03, -8.448051144704162e-03, -4.224025572352081e-03, -1.115004089813885e-02, -2.230008179627770e-02, -1.115004089813885e-02, 1.301247652112128e-02, 2.602495304224256e-02, 1.301247652112128e-02, 1.670990928105040e-02, 3.341981856210079e-02, 1.670990928105040e-02, 1.818879410693781e-02, 3.637758821387561e-02, 1.818879410693781e-02, 1.845044613473809e-02, 3.690089226947618e-02, 1.845044613473809e-02, 1.845044613473809e-02, 3.690089226947618e-02, 1.845044613473809e-02, 3.179847843519886e-03, 6.359695687039772e-03, 3.179847843519886e-03, 4.483553047501258e-02, 8.967106095002512e-02, 4.483553047501258e-02, 4.972942822560627e-02, 9.945885645121275e-02, 4.972942822560627e-02, 6.127246406802234e-02, 1.225449281360447e-01, 6.127246406802234e-02, 5.962967687499374e-02, 1.192593537499875e-01, 5.962967687499374e-02, 5.962967687499385e-02, 1.192593537499876e-01, 5.962967687499385e-02, 1.907691467193813e-02, 3.815382934387623e-02, 1.907691467193813e-02, 1.939445987853858e-02, 3.878891975706914e-02, 1.939445987853858e-02, 2.747995355025812e-02, 5.495990710051866e-02, 2.747995355025812e-02, 1.042935903538311e-01, 2.085871807076622e-01, 1.042935903538311e-01, 9.133208372871637e-02, 1.826641674574329e-01, 9.133208372871637e-02, 9.133208372872058e-02, 1.826641674574392e-01, 9.133208372872058e-02, 6.742628558265035e-03, 1.348525711662119e-02, 6.742628558265035e-03, 3.107435522282265e-03, 6.214871052373539e-03, 3.107435522282265e-03, 3.767306420602911e-03, 7.534612848089891e-03, 3.767306420602911e-03, 8.358396363093269e-02, 1.671679272618622e-01, 8.358396363093269e-02, 1.312239529478290e-02, 2.624479058746359e-02, 1.312239529478290e-02, 1.312239529186567e-02, 2.624479058489948e-02, 1.312239529186567e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
