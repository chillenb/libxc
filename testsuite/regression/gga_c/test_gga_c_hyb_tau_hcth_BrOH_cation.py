
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_hyb_tau_hcth_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.395545203453122e-01, -1.395545999093400e-01, -1.395549631232102e-01, -1.395537794061477e-01, -1.395543983225253e-01, -1.395543983225253e-01, -9.404641055065141e-02, -9.404656489107019e-02, -9.405064802671659e-02, -9.404804021141884e-02, -9.404717599645837e-02, -9.404717599645837e-02, -5.575873008143763e-02, -5.566080724826024e-02, -5.222373155914015e-02, -5.257629722645121e-02, -5.136462496196953e-02, -5.136462496196953e-02, -7.253975676045452e-03, -9.521475628386216e-03, -5.939968115221948e-02, 1.879771692240509e-02, 9.942243231971725e-03, 9.942243231971758e-03, 7.555279706393129e-03, 7.892496521512915e-03, 3.047630328867951e-02, 4.596821951728072e-03, 2.807786270285181e-03, 2.807786270285179e-03, -1.041884297025362e-01, -1.042077540071425e-01, -1.041892567395769e-01, -1.042063084043202e-01, -1.041981910563281e-01, -1.041981910563281e-01, -7.316881798927853e-02, -7.382242368306817e-02, -7.183388360804244e-02, -7.245685710810773e-02, -7.412359727507142e-02, -7.412359727507142e-02, -5.431911294168048e-02, -5.744907594590619e-02, -5.271285678813522e-02, -5.434178157832096e-02, -5.450045274347641e-02, -5.450045274347640e-02, 3.758964676371807e-02, 1.029043094013122e-02, 3.810296467656800e-02, -8.233116968965548e-02, 2.813852763706675e-02, 2.813852763706675e-02, 3.591805640112863e-03, 4.500700402676464e-03, 3.468403969452503e-03, 3.717889902336488e-02, 3.310023902255140e-03, 3.310023902255138e-03, -5.303439705794592e-02, -5.576398882750874e-02, -5.588510068682993e-02, -5.545067467405326e-02, -5.576409084594740e-02, -5.576409084594740e-02, -4.629444586283703e-02, -4.986468574672751e-02, -5.172339057792807e-02, -5.263603465798572e-02, -5.216931420027656e-02, -5.216931420027656e-02, -5.829822175430650e-02, -5.183248457116530e-03, -2.179837499342812e-02, -4.253385079991057e-02, -3.441682703880394e-02, -3.441682703880395e-02, -4.815681100427940e-02, 2.996337368293687e-02, 3.526410361435301e-02, -4.326795844168344e-02, 3.599126786809129e-02, 3.599126786809127e-02, 1.032026719151516e-02, 1.270997244585444e-03, 2.580958622562996e-03, 3.655094331134617e-02, 3.215117237180696e-03, 3.215117237180702e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_hyb_tau_hcth_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.488297530261131e-01, -1.488302330986542e-01, -1.488303776922273e-01, -1.488304407796537e-01, -1.488308910174164e-01, -1.488325720847771e-01, -1.488270716375628e-01, -1.488240386896010e-01, -1.488346705218060e-01, -1.488230587543338e-01, -1.488346705218060e-01, -1.488230587543338e-01, -1.033889815529648e-01, -1.034353493947421e-01, -1.033841585491517e-01, -1.034337065439588e-01, -1.033163993768993e-01, -1.033550108330266e-01, -1.034464155806269e-01, -1.034913979519417e-01, -1.033982332145967e-01, -1.034196590102730e-01, -1.033982332145967e-01, -1.034196590102730e-01, -7.887483271401953e-02, -7.785107352285328e-02, -7.956117991954167e-02, -7.824082330019218e-02, -9.282004722402651e-02, -9.690662841181610e-02, -9.480987116620521e-02, -9.352233686422898e-02, -8.027182494005461e-02, -1.245230186994868e-01, -8.027182494005461e-02, -1.245230186994868e-01, -1.060883159199337e-01, -8.739580345758878e-02, -1.068950216453727e-01, -8.610181003836662e-02, -8.093596287164516e-02, -7.538820809250399e-02, -7.006855212402116e-02, -6.650697921578219e-02, -1.352521218014652e-02, -2.035765173816059e-01, -1.352521218014678e-02, -2.035765173816068e-01, 1.128414723037666e-02, 8.536428539840324e-03, 1.199777389498784e-02, 8.748775588736305e-03, 3.627202709353430e-02, 2.846123006422333e-02, 5.789702097765248e-03, 6.263191735928438e-03, 9.451394705875987e-04, 1.865954541122580e-02, 9.451394705875538e-04, 1.865954541122584e-02, -1.172550005328796e-01, -1.172781387496687e-01, -1.174194901399281e-01, -1.174304003083073e-01, -1.172653274697149e-01, -1.172809164049135e-01, -1.174015627292430e-01, -1.174242951918432e-01, -1.173409700913708e-01, -1.173531408120435e-01, -1.173409700913708e-01, -1.173531408120435e-01, -1.389399528046909e-01, -1.389609580709965e-01, -1.369176873948342e-01, -1.370385556178081e-01, -1.448130256745877e-01, -1.431248348666020e-01, -1.429960573725919e-01, -1.413553214481376e-01, -1.338359802020574e-01, -1.371859101688963e-01, -1.338359802020574e-01, -1.371859101688963e-01, -6.057968712460957e-02, -6.094288363285010e-02, -6.802836642582903e-02, -6.787620650922804e-02, -6.116599894694348e-02, -5.866644536480371e-02, -6.785422779880579e-02, -6.469972033261792e-02, -5.903742434659087e-02, -6.332838566496703e-02, -5.903742434659090e-02, -6.332838566496710e-02, -8.139241920888912e-03, -6.943776544957435e-03, -9.288176426295407e-02, -9.083567547805758e-02, -5.965440461378293e-04, 1.416786193139466e-04, -9.442865702766344e-02, -9.446984440916596e-02, -5.280875506658939e-02, -2.915165721707047e-02, -5.280875506658939e-02, -2.915165721707047e-02, 5.175621202297377e-03, 4.313664342354213e-03, 6.108070951234004e-03, 5.692671669976217e-03, 5.227831494350283e-03, 3.984020106063709e-03, 2.414666637662846e-02, 2.310322408007833e-02, 1.003920732104939e-02, 2.155072025062981e-03, 1.003920732104941e-02, 2.155072025062969e-03, -4.176348473880021e-02, -4.066514537573385e-02, -6.571675768041639e-02, -6.524917784017777e-02, -6.167840087613818e-02, -6.092955947350356e-02, -5.505616829403893e-02, -5.417106725663486e-02, -5.881441949621565e-02, -5.798559280571676e-02, -5.881441949621565e-02, -5.798559280571676e-02, -2.879849925853853e-02, -2.837410189998204e-02, -6.947202905500802e-02, -6.872240546884914e-02, -5.967809887559478e-02, -5.944620344436895e-02, -6.053341649598932e-02, -6.043162220955148e-02, -5.854200798431131e-02, -5.833974800833116e-02, -5.854200798431131e-02, -5.833974800833116e-02, -6.988037765383485e-02, -6.976310797753769e-02, -1.101312442007514e-01, -1.071220147712791e-01, -1.082190873232396e-01, -1.026745308415104e-01, -6.698628359585702e-02, -6.594768789057669e-02, -8.712453816590351e-02, -8.682009202362567e-02, -8.712453816590297e-02, -8.682009202362562e-02, -6.867892087508846e-02, -6.744622098509355e-02, 3.279282826339470e-02, 3.181219410753584e-02, 3.446534177262480e-02, 2.994215816806943e-02, -5.555170440028599e-02, -5.393577890319629e-02, 1.937187238716326e-03, 5.871228180138996e-03, 1.937187238716583e-03, 5.871228180138842e-03, 1.435607194869984e-02, 1.220990449548422e-02, 1.693432494050585e-03, 1.674545551494307e-03, 3.956435825610392e-03, 2.942625651990710e-03, 9.822230349781948e-03, 9.009423504929571e-03, 8.880134078483723e-03, 2.243006775841165e-03, 8.880134078483721e-03, 2.243006775841177e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_hyb_tau_hcth_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.587255660707515e-12, 0.000000000000000e+00, 3.587492230104136e-12, 3.590523253891246e-12, 0.000000000000000e+00, 3.587732268902121e-12, 3.588741070807604e-12, 0.000000000000000e+00, 3.599309050998545e-12, 3.579864180842384e-12, 0.000000000000000e+00, 3.556170819731237e-12, 3.615839427071604e-12, 0.000000000000000e+00, 3.548257474050853e-12, 3.615839427071604e-12, 0.000000000000000e+00, 3.548257474050853e-12, 4.209664355331352e-08, 0.000000000000000e+00, 4.332557403261928e-08, 4.195719928387124e-08, 0.000000000000000e+00, 4.326397331593517e-08, 3.968418263500863e-08, 0.000000000000000e+00, 4.091828512569433e-08, 4.361939941080400e-08, 0.000000000000000e+00, 4.498668180012735e-08, 4.106226523966078e-08, 0.000000000000000e+00, 4.411192120390321e-08, 4.106226523966078e-08, 0.000000000000000e+00, 4.411192120390321e-08, 1.134599753606699e-03, 0.000000000000000e+00, 1.137908212532131e-03, 1.173677865406061e-03, 0.000000000000000e+00, 1.174686163707522e-03, 2.132538655971505e-03, 0.000000000000000e+00, 2.224756065983448e-03, 2.071176204973174e-03, 0.000000000000000e+00, 2.044881237783819e-03, 2.003606862091325e-03, 0.000000000000000e+00, 2.903585302028360e-03, 2.003606862091325e-03, 0.000000000000000e+00, 2.903585302028360e-03, 1.518126452384566e+00, 0.000000000000000e+00, 1.118603888576128e+00, 1.488325131767114e+00, 0.000000000000000e+00, 1.051635621424004e+00, 4.366923045324198e-04, 0.000000000000000e+00, 4.354036760952500e-04, 2.592301668102575e+00, 0.000000000000000e+00, 2.322894126746333e+00, 1.456928813961602e-01, 0.000000000000000e+00, 2.143233041482060e+01, 1.456928813961648e-01, 0.000000000000000e+00, 2.143233041482061e+01, 2.088637168405109e+01, 0.000000000000000e+00, 1.284350455521204e+01, 2.262723224213526e+01, 0.000000000000000e+00, 1.304105006637877e+01, 8.796586900681273e+00, 0.000000000000000e+00, 5.686200326788075e+00, 1.467387217009910e+01, 0.000000000000000e+00, 1.678737507202128e+01, 2.239334241899192e+00, 0.000000000000000e+00, 2.048088934195070e+02, 2.239334241887003e+00, 0.000000000000000e+00, 2.048088934193376e+02, 3.922304905933199e-08, 0.000000000000000e+00, 3.901854458358021e-08, 4.067253161999891e-08, 0.000000000000000e+00, 4.037088418177986e-08, 3.931029542931094e-08, 0.000000000000000e+00, 3.904532806523246e-08, 4.051849355049752e-08, 0.000000000000000e+00, 4.031002683887656e-08, 3.997597935407242e-08, 0.000000000000000e+00, 3.968659349111282e-08, 3.997597935407242e-08, 0.000000000000000e+00, 3.968659349111282e-08, 1.361720278088199e-05, 0.000000000000000e+00, 1.362253379460762e-05, 1.281983619819741e-05, 0.000000000000000e+00, 1.284643734439125e-05, 1.481809843156508e-05, 0.000000000000000e+00, 1.464188310428316e-05, 1.409496534676728e-05, 0.000000000000000e+00, 1.392129002351396e-05, 1.247266982277428e-05, 0.000000000000000e+00, 1.283976648343023e-05, 1.247266982277428e-05, 0.000000000000000e+00, 1.283976648343023e-05, -6.549202051656963e-05, 0.000000000000000e+00, -7.314217384494431e-05, 2.396483025726771e-03, 0.000000000000000e+00, 2.297932168586035e-03, -2.511614908524232e-04, 0.000000000000000e+00, 5.422327975905670e-04, 4.504289041193106e-03, 0.000000000000000e+00, 4.525449319456594e-03, 2.732592967870735e-04, 0.000000000000000e+00, -5.155921711803290e-04, 2.732592967869798e-04, 0.000000000000000e+00, -5.155921711803241e-04, 3.673117914920016e+00, 0.000000000000000e+00, 3.404281294016018e+00, 9.617687605383965e-01, 0.000000000000000e+00, 9.241867352368071e-01, 4.960145158803019e+00, 0.000000000000000e+00, 3.262271000635972e+00, 1.193691530685781e-05, 0.000000000000000e+00, 1.185931052545987e-05, 4.751534246006273e+00, 0.000000000000000e+00, 2.994118023707765e+00, 4.751534246006273e+00, 0.000000000000000e+00, 2.994118023707765e+00, 2.469455994911582e+01, 0.000000000000000e+00, 1.814716523345325e+01, 1.967255784193033e+01, 0.000000000000000e+00, 1.744442322815407e+01, 1.472579054717374e+02, 0.000000000000000e+00, 9.302199289246411e+01, 7.091415102063714e+00, 0.000000000000000e+00, 6.752005363292059e+00, 1.685367954429902e+02, 0.000000000000000e+00, 1.328001343851328e+01, 1.685367954426407e+02, 0.000000000000000e+00, 1.328001343856132e+01, -5.210119447601802e-02, 0.000000000000000e+00, -5.407198830680326e-02, 3.051267460559117e-03, 0.000000000000000e+00, 2.946669345823572e-03, -1.798499915932808e-03, 0.000000000000000e+00, -2.287606412168233e-03, -1.333213553420646e-02, 0.000000000000000e+00, -1.413077348826523e-02, -6.267184675282450e-03, 0.000000000000000e+00, -6.914102293790370e-03, -6.267184675282450e-03, 0.000000000000000e+00, -6.914102293790370e-03, -1.650318831842767e-01, 0.000000000000000e+00, -1.637026886888623e-01, 4.479049240283803e-03, 0.000000000000000e+00, 4.381479651591733e-03, 4.682522496618733e-04, 0.000000000000000e+00, 6.066847172073661e-04, 6.575156091589061e-04, 0.000000000000000e+00, 8.422962358810722e-04, -2.235568086184362e-04, 0.000000000000000e+00, -8.757233220683951e-05, -2.235568086184362e-04, 0.000000000000000e+00, -8.757233220683951e-05, 2.162463357056874e-03, 0.000000000000000e+00, 2.162858786022665e-03, 4.429194258035219e-01, 0.000000000000000e+00, 4.229162034948252e-01, 2.203845572641603e-01, 0.000000000000000e+00, 2.035230758768073e-01, 3.087221001472347e-02, 0.000000000000000e+00, 2.970747385595607e-02, 9.853968474539486e-02, 0.000000000000000e+00, 9.885438494597594e-02, 9.853968474539465e-02, 0.000000000000000e+00, 9.885438494597538e-02, 7.032826181589530e-03, 0.000000000000000e+00, 6.790575180219676e-03, 6.736670417925629e+00, 0.000000000000000e+00, 6.378776066580187e+00, 6.807672418935660e+00, 0.000000000000000e+00, 5.230135306767065e+00, 1.540161927907181e-02, 0.000000000000000e+00, 1.524014493095823e-02, 8.531018005466214e+00, 0.000000000000000e+00, 5.518421972240163e+00, 8.531018005466153e+00, 0.000000000000000e+00, 5.518421972240134e+00, 1.463928173410263e+01, 0.000000000000000e+00, 1.100750599212928e+01, 9.709743219669760e+01, 0.000000000000000e+00, 9.528728694097855e+01, 5.781788786148334e+01, 0.000000000000000e+00, 3.529296785124480e+01, 7.739038952843998e+00, 0.000000000000000e+00, 6.796612912030366e+00, 2.384274178409032e+02, 0.000000000000000e+00, 2.447796418596383e+01, 2.384274178409212e+02, 0.000000000000000e+00, 2.447796418602297e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
