
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_hcth_a_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hcth_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.112216520350570e-01, -1.112209412531446e-01, -1.112190293673281e-01, -1.112295778145520e-01, -1.112238735083871e-01, -1.112238735083871e-01, -8.098821084548551e-02, -8.098484063135948e-02, -8.090724043218574e-02, -8.104580083489588e-02, -8.098465339805826e-02, -8.098465339805826e-02, -5.369717330629050e-02, -5.375395093403388e-02, -5.450452713590812e-02, -5.465054565713907e-02, -5.365954853204982e-02, -5.365954853204982e-02, -2.148341202781428e-02, -2.299249276909517e-02, -5.576681711813825e-02, 6.626710673922609e-04, -1.555556430659281e-03, -1.555556430659267e-03, 6.838313707958901e-03, 7.144580636588366e-03, 2.639985207699056e-02, 4.135898631167595e-03, 2.314808147968747e-03, 2.314808147968746e-03, -7.717857074488767e-02, -7.703577334160328e-02, -7.717271249539660e-02, -7.704664838960210e-02, -7.710587413895918e-02, -7.710587413895918e-02, -7.785638272228156e-02, -7.798836880866909e-02, -7.774319020594403e-02, -7.789389856694380e-02, -7.794134953442589e-02, -7.794134953442589e-02, -4.536896612029658e-02, -3.526123980017861e-02, -4.525266722061952e-02, -3.568249941936237e-02, -4.436947834669155e-02, -4.436947834669153e-02, 2.361620551123251e-02, -8.911019993107701e-03, 2.526872303336393e-02, -4.981555444871501e-02, 1.160494502640550e-02, 1.160494502640550e-02, 3.216783018317226e-03, 4.047837952992656e-03, 3.101622077624727e-03, 2.910864447607773e-02, 2.900581111587338e-03, 2.900581111587342e-03, -3.056589796292670e-02, -3.391241108174384e-02, -3.269761592089666e-02, -3.171442923377534e-02, -3.220157420979947e-02, -3.220157420979947e-02, -2.927515083790975e-02, -4.763287131849431e-02, -4.515062495169562e-02, -4.027143248666185e-02, -4.303227769443755e-02, -4.303227769443755e-02, -3.645709556722159e-02, -2.220336242614394e-02, -3.345602249520638e-02, -4.208192573088598e-02, -3.976512120070515e-02, -3.976512120070515e-02, -4.626562973800197e-02, 2.612567838849988e-02, 2.954467670176655e-02, -3.964369338220759e-02, 2.459212596819783e-02, 2.459212596819783e-02, 9.361776187481833e-03, 1.115325459944403e-03, 2.295514288410396e-03, 2.596245341880679e-02, 2.826943376123549e-03, 2.826943376123546e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_hcth_a_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hcth_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.903690389953842e-02, -4.903722096620531e-02, -4.903607542921938e-02, -4.903661446495581e-02, -4.903464991778540e-02, -4.903404380312257e-02, -4.904404409260652e-02, -4.904595493351081e-02, -4.903762986334576e-02, -4.904086483947413e-02, -4.903762986334576e-02, -4.904086483947413e-02, -4.323563412156116e-02, -4.322937050444484e-02, -4.322932644795245e-02, -4.322286569778365e-02, -4.308461634715213e-02, -4.307242997989520e-02, -4.334339158972258e-02, -4.333105983019754e-02, -4.326914787113036e-02, -4.318101271097063e-02, -4.326914787113036e-02, -4.318101271097063e-02, -4.336621813197844e-02, -4.215815224465140e-02, -4.396844968511152e-02, -4.246918987063898e-02, -5.495290297828985e-02, -5.778786225924434e-02, -5.622678269981470e-02, -5.532312579461149e-02, -4.398625351062878e-02, -7.456418931446228e-02, -4.398625351062878e-02, -7.456418931446228e-02, -8.766205926644986e-02, -7.317751462542886e-02, -8.598799679518479e-02, -7.027384947601471e-02, -4.436645374063697e-02, -3.738363384272195e-02, -8.300510902343765e-02, -7.885853613977920e-02, -1.799303264713204e-02, -2.587000550666357e-01, -1.799303264713201e-02, -2.587000550666361e-01, 1.030873164633395e-02, 7.633562218362210e-03, 1.096719964585187e-02, 7.808449087466683e-03, 2.756912625523110e-02, 2.147826606399100e-02, 5.206756260540611e-03, 5.671180268768256e-03, 3.924581062784271e-04, 1.765526119724688e-02, 3.924581062784226e-04, 1.765526119724690e-02, -3.462784386580680e-02, -3.467161150552276e-02, -3.458946421230420e-02, -3.463229835600524e-02, -3.462640998545546e-02, -3.466976670246537e-02, -3.459186557345666e-02, -3.463564491716716e-02, -3.460825803456062e-02, -3.465102548808267e-02, -3.460825803456062e-02, -3.465102548808267e-02, -8.286709442532449e-02, -8.288138720929607e-02, -8.116675079835992e-02, -8.124928626436502e-02, -8.757072318789233e-02, -8.647872018657594e-02, -8.602829173067114e-02, -8.495550284666974e-02, -7.887310629128261e-02, -8.115805915104535e-02, -7.887310629128261e-02, -8.115805915104535e-02, -2.447595929014838e-02, -2.477171479223146e-02, -2.372641841636993e-02, -2.397803617224069e-02, -2.837701858450935e-02, -2.396794255408064e-02, -2.288866345238322e-02, -1.899670457097905e-02, -2.043638120055985e-02, -2.628449449826880e-02, -2.043638120055984e-02, -2.628449449826879e-02, -3.473078283396282e-02, -3.234093091199023e-02, -9.488319227894350e-02, -9.289556295494433e-02, -2.864575153764485e-02, -2.226363181059065e-02, -3.312586780410175e-02, -3.322102509247192e-02, -7.785807404145383e-02, -4.847546082821601e-02, -7.785807404145383e-02, -4.847546082821601e-02, 4.690713387602445e-03, 3.844172859495194e-03, 5.526867818174917e-03, 5.119103784487237e-03, 4.744736469139340e-03, 3.525348173056814e-03, 6.729403284354422e-03, 5.991145245665049e-03, 9.401276110896672e-03, 1.678452783841449e-03, 9.401276110896653e-03, 1.678452783841449e-03, -2.969547071720225e-02, -2.935963949808219e-02, -2.371019848157948e-02, -2.346594398885816e-02, -2.566297614781824e-02, -2.543147571367432e-02, -2.754264800964391e-02, -2.725584348128817e-02, -2.658908364827796e-02, -2.633218647903630e-02, -2.658908364827796e-02, -2.633218647903630e-02, -3.053897085862739e-02, -3.017046478043217e-02, -3.786017338544052e-02, -3.717911891474660e-02, -2.739572572304631e-02, -2.681617567180659e-02, -2.050051526478312e-02, -2.013711856403962e-02, -2.326449871977591e-02, -2.284526638667112e-02, -2.326449871977591e-02, -2.284526638667112e-02, -2.337373275586633e-02, -2.361476395160511e-02, -9.442599117282303e-02, -9.200319646212046e-02, -7.880860763335563e-02, -7.504005452506371e-02, -3.831772837885113e-02, -3.752440526628820e-02, -5.589202857052759e-02, -5.572336022539202e-02, -5.589202857052755e-02, -5.572336022539198e-02, -3.787015081496506e-02, -3.675763184289522e-02, 2.554616501298673e-02, 2.476004976792347e-02, 2.182840275679659e-02, 1.900668847532710e-02, -2.894326879714043e-02, -2.714497978561630e-02, -2.436151641726589e-02, -1.398663532075192e-02, -2.436151641726587e-02, -1.398663532075197e-02, 1.302690365676230e-02, 1.095884235586892e-02, 1.493843734160246e-03, 1.475451253485436e-03, 3.582937594501007e-03, 2.588001418501480e-03, -1.270454882931481e-02, -1.206869092270424e-02, 8.292245224507621e-03, 1.786761612225434e-03, 8.292245224507579e-03, 1.786761612225409e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_hcth_a_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hcth_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.490221684444715e-10, 0.000000000000000e+00, -3.490254499237423e-10, -3.490277622993973e-10, 0.000000000000000e+00, -3.490304329789554e-10, -3.490332792215780e-10, 0.000000000000000e+00, -3.490370407380473e-10, -3.489583994909367e-10, 0.000000000000000e+00, -3.489552802795460e-10, -3.490155006973691e-10, 0.000000000000000e+00, -3.489852169993843e-10, -3.490155006973691e-10, 0.000000000000000e+00, -3.489852169993843e-10, -1.426240710023411e-06, 0.000000000000000e+00, -1.427963594162240e-06, -1.426545179819002e-06, 0.000000000000000e+00, -1.428386959658828e-06, -1.435032734638783e-06, 0.000000000000000e+00, -1.436428387560229e-06, -1.419281730400400e-06, 0.000000000000000e+00, -1.420930710305364e-06, -1.427161979649712e-06, 0.000000000000000e+00, -1.427586314858604e-06, -1.427161979649712e-06, 0.000000000000000e+00, -1.427586314858604e-06, -1.211098808414257e-03, 0.000000000000000e+00, -1.275166362451183e-03, -1.168328531044551e-03, 0.000000000000000e+00, -1.246248540346809e-03, -3.370152780777680e-04, 0.000000000000000e+00, -2.372002286377882e-04, -3.056639138008331e-04, 0.000000000000000e+00, -3.374688160595407e-04, -7.682425581609308e-04, 0.000000000000000e+00, 3.245002656899353e-04, -7.682425581609308e-04, 0.000000000000000e+00, 3.245002656899353e-04, 9.591512743074166e-01, 0.000000000000000e+00, 6.941753824310123e-01, 9.028584096499163e-01, 0.000000000000000e+00, 6.231704507241435e-01, -7.689935021756214e-04, 0.000000000000000e+00, -8.305830384704799e-04, 2.345976684276780e+00, 0.000000000000000e+00, 2.099575846079206e+00, 1.100365083039320e-01, 0.000000000000000e+00, 2.149413012655686e+01, 1.100365083039327e-01, 0.000000000000000e+00, 2.149413012655689e+01, 3.182502001732292e+01, 0.000000000000000e+00, 1.953585423354198e+01, 3.448264005366315e+01, 0.000000000000000e+00, 1.983414684406034e+01, 1.280447585827977e+01, 0.000000000000000e+00, 8.263990459196551e+00, 2.226122798836064e+01, 0.000000000000000e+00, 2.548327942144589e+01, 3.306039791151082e+00, 0.000000000000000e+00, 3.108326436283755e+02, 3.306039791148017e+00, 0.000000000000000e+00, 3.108326436282491e+02, -3.923287925939000e-07, 0.000000000000000e+00, -3.927897666569483e-07, -3.942144068166341e-07, 0.000000000000000e+00, -3.946318711986905e-07, -3.924165758271062e-07, 0.000000000000000e+00, -3.928499674507671e-07, -3.940474828422762e-07, 0.000000000000000e+00, -3.945102302345270e-07, -3.933006265903517e-07, 0.000000000000000e+00, -3.937196338482023e-07, -3.933006265903517e-07, 0.000000000000000e+00, -3.937196338482023e-07, -5.561472377045129e-07, 0.000000000000000e+00, -5.552870422332210e-07, -9.627327079218860e-07, 0.000000000000000e+00, -9.575235719908267e-07, 4.912675248043956e-07, 0.000000000000000e+00, 3.506579248370531e-07, 1.069916077695691e-07, 0.000000000000000e+00, -2.780672817264535e-08, -1.391739311928194e-06, 0.000000000000000e+00, -1.101814990121530e-06, -1.391739311928194e-06, 0.000000000000000e+00, -1.101814990121530e-06, -7.119122818936509e-03, 0.000000000000000e+00, -7.243384598849506e-03, -1.047247121389348e-02, 0.000000000000000e+00, -1.045721379009513e-02, -9.353652476246340e-03, 0.000000000000000e+00, -8.239532015811324e-03, -1.901607644979872e-02, 0.000000000000000e+00, -1.576596974515227e-02, -6.659251666595776e-03, 0.000000000000000e+00, -8.595575180491489e-03, -6.659251666595784e-03, 0.000000000000000e+00, -8.595575180491496e-03, 4.330203306322890e+00, 0.000000000000000e+00, 4.010753951866514e+00, 7.741355488511089e-01, 0.000000000000000e+00, 7.432996426356444e-01, 6.013339016130692e+00, 0.000000000000000e+00, 3.945689622275862e+00, -6.086397344663981e-05, 0.000000000000000e+00, -6.101755838202510e-05, 4.922641676941759e+00, 0.000000000000000e+00, 3.078477053286243e+00, 4.922641676941759e+00, 0.000000000000000e+00, 3.078477053286243e+00, 3.738578605094084e+01, 0.000000000000000e+00, 2.745629999738077e+01, 2.984893997947878e+01, 0.000000000000000e+00, 2.646431042402263e+01, 2.228920010678224e+02, 0.000000000000000e+00, 1.404817639834921e+02, 9.513272366110929e+00, 0.000000000000000e+00, 9.057628042199140e+00, 2.554730697921973e+02, 0.000000000000000e+00, 1.984302071560931e+01, 2.554730697923063e+02, 0.000000000000000e+00, 1.984302071562230e+01, -1.409180195802910e-02, 0.000000000000000e+00, -1.377308635257573e-02, -1.564008659575215e-02, 0.000000000000000e+00, -1.530797530397224e-02, -1.546687951816312e-02, 0.000000000000000e+00, -1.509457693970658e-02, -1.489351409188393e-02, 0.000000000000000e+00, -1.452132905226915e-02, -1.522713026641792e-02, 0.000000000000000e+00, -1.485023141644659e-02, -1.522713026641792e-02, 0.000000000000000e+00, -1.485023141644659e-02, -1.814485316613806e-02, 0.000000000000000e+00, -1.785765455671418e-02, -5.634634158036489e-03, 0.000000000000000e+00, -5.605331208633914e-03, -1.005934232902006e-02, 0.000000000000000e+00, -9.973437762366207e-03, -1.542242100678508e-02, 0.000000000000000e+00, -1.520478981938805e-02, -1.263713450556518e-02, 0.000000000000000e+00, -1.245202324170963e-02, -1.263713450556518e-02, 0.000000000000000e+00, -1.245202324170963e-02, -8.336214204395188e-03, 0.000000000000000e+00, -8.293264461506173e-03, 2.918071111787033e-01, 0.000000000000000e+00, 2.780455071611927e-01, 1.060039530064616e-01, 0.000000000000000e+00, 9.664645006755662e-02, -1.698026021167497e-02, 0.000000000000000e+00, -1.690431551370680e-02, 2.132915739307795e-02, 0.000000000000000e+00, 2.118127811629410e-02, 2.132915739307810e-02, 0.000000000000000e+00, 2.118127811629410e-02, -7.655436739906631e-03, 0.000000000000000e+00, -7.646405632992927e-03, 9.852457163842983e+00, 0.000000000000000e+00, 9.327234754080283e+00, 9.626652065499881e+00, 0.000000000000000e+00, 7.387914473075051e+00, -4.978168331739087e-02, 0.000000000000000e+00, -4.795217220373257e-02, 1.051833127691784e+01, 0.000000000000000e+00, 6.779276566714101e+00, 1.051833127691786e+01, 0.000000000000000e+00, 6.779276566714113e+00, 2.230201876702540e+01, 0.000000000000000e+00, 1.675113511887077e+01, 1.451270008849553e+02, 0.000000000000000e+00, 1.420502570289175e+02, 8.722654175958432e+01, 0.000000000000000e+00, 5.312369654777856e+01, 9.741002667183242e+00, 0.000000000000000e+00, 8.549955160322986e+00, 3.609959871426249e+02, 0.000000000000000e+00, 3.680286096183262e+01, 3.609959871425293e+02, 0.000000000000000e+00, 3.680286096182067e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
