
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.847669935543076e-02, -5.847696646770111e-02, -5.847773010494478e-02, -5.847376475998812e-02, -5.847590279713531e-02, -5.847590279713531e-02, -5.143793898999539e-02, -5.143991991206856e-02, -5.148584255284561e-02, -5.140685311367588e-02, -5.144041811784868e-02, -5.144041811784868e-02, -3.406874612115812e-02, -3.395536139997699e-02, -3.107807063638124e-02, -3.128403155871925e-02, -3.133944626485344e-02, -3.133944626485344e-02, -1.117500007429731e-02, -1.160779615040585e-02, -3.668280753437516e-02, -6.510659346218891e-03, -8.382498210775911e-03, -8.382498210775908e-03, -7.238459388266432e-06, -8.444008761425571e-06, -4.164748664020494e-04, -1.672517686292358e-06, -3.369098739030415e-06, -3.369098739030418e-06, -5.832627668533538e-02, -5.838208479999366e-02, -5.832858601261907e-02, -5.837785667801860e-02, -5.835470058349838e-02, -5.835470058349838e-02, -3.865685471322236e-02, -3.898052855343146e-02, -3.797685935851348e-02, -3.826319627639370e-02, -3.916786486263927e-02, -3.916786486263927e-02, -3.707131788241996e-02, -4.334667718438914e-02, -3.526045491526853e-02, -4.063902398118407e-02, -3.790833077332623e-02, -3.790833077332623e-02, -3.036984130138558e-03, -8.965713606545661e-03, -2.655290807743463e-03, -5.685836938152440e-02, -4.640979793522423e-03, -4.640979793522423e-03, -9.531803310648423e-07, -1.692424015086977e-06, -1.847468575044573e-06, -1.283484238235036e-03, -2.169885999770403e-06, -2.169885999770402e-06, -4.372004487970287e-02, -4.214645660992147e-02, -4.268086551115200e-02, -4.313802237560422e-02, -4.290766772592738e-02, -4.290766772592738e-02, -4.373431527371205e-02, -3.071378143582530e-02, -3.409838359919969e-02, -3.775625843687391e-02, -3.588798895613229e-02, -3.588798895613229e-02, -4.383809003662880e-02, -1.239190751512009e-02, -1.644751101126877e-02, -2.538887040248282e-02, -2.068152967272627e-02, -2.068152967272627e-02, -2.951300369980592e-02, -3.640318648857313e-04, -7.318383515851455e-04, -2.687352535740427e-02, -2.264609689023175e-03, -2.264609689023177e-03, -1.584143873153049e-05, -1.009559362323075e-07, -5.364763961585158e-07, -1.980873882510904e-03, -1.957510058769151e-06, -1.957510058769147e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.254690712505038e-02, -8.254676386252628e-02, -8.254636238238512e-02, -8.254848865695746e-02, -8.254734120083645e-02, -8.254734120083645e-02, -7.862580877974970e-02, -7.862522528838299e-02, -7.861178980138855e-02, -7.863616441995401e-02, -7.862525266407100e-02, -7.862525266407100e-02, -5.962241553411380e-02, -5.958584311546763e-02, -5.831804094242640e-02, -5.852188120483158e-02, -5.851973678112043e-02, -5.851973678112043e-02, -2.603401220049303e-02, -2.673142505117859e-02, -6.246572621100057e-02, -1.694435787576055e-02, -2.080661153742128e-02, -2.080661153742128e-02, -2.567891835432679e-05, -2.985691082549261e-05, -1.330457858749860e-03, -6.068728560891454e-06, -1.208222500014558e-05, -1.208222500014559e-05, -7.783088780862613e-02, -7.779063173019879e-02, -7.782923707589706e-02, -7.779370046223187e-02, -7.781041167187067e-02, -7.781041167187067e-02, -7.328855610437944e-02, -7.349006273283955e-02, -7.291193908904056e-02, -7.310349979324736e-02, -7.356869334066761e-02, -7.356869334066761e-02, -5.667197105544250e-02, -5.473437393826452e-02, -5.539901811727523e-02, -5.341764250969690e-02, -5.673352152538529e-02, -5.673352152538529e-02, -8.668463255433518e-03, -2.255316083609741e-02, -7.653994192078401e-03, -6.810134479858022e-02, -1.258077223943887e-02, -1.258077223943887e-02, -3.473134782948473e-06, -6.130977009707761e-06, -6.584132287641610e-06, -3.867960353657772e-03, -7.762320142317874e-06, -7.762320142317869e-06, -5.159521481909587e-02, -5.320836617000049e-02, -5.270483422879745e-02, -5.223864460901384e-02, -5.247769715030867e-02, -5.247769715030867e-02, -5.052112182791486e-02, -5.361933682507208e-02, -5.447853879162023e-02, -5.415550981923815e-02, -5.447682661704741e-02, -5.447682661704741e-02, -5.574395614565062e-02, -2.937828030541904e-02, -3.607043411209856e-02, -4.601332704455133e-02, -4.149025831551850e-02, -4.149025831551850e-02, -5.187815295883103e-02, -1.171077793517473e-03, -2.282875364224714e-03, -4.549199738962163e-02, -6.543760398037965e-03, -6.543760398037970e-03, -5.550558060678759e-05, -3.716697396405460e-07, -1.955236601050459e-06, -5.783183785978185e-03, -6.999496777205256e-06, -6.999496777205243e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.020959304944332e-11, 6.020949913339982e-11, 6.020763266381824e-11, 6.020905989719504e-11, 6.020851804634130e-11, 6.020851804634130e-11, 4.120852030848348e-07, 4.121227406687301e-07, 4.129423243986299e-07, 4.111370316743193e-07, 4.120816376210009e-07, 4.120816376210009e-07, 7.812049434888279e-04, 7.790668467528523e-04, 7.173581071751606e-04, 6.976187238272964e-04, 7.074482815504959e-04, 7.074482815504959e-04, 9.306148106119437e-02, 9.379577677056945e-02, 4.129012779175182e-04, 1.223980956460283e-01, 1.154891485433708e-01, 1.154891485433708e-01, 2.418107373676530e+00, 2.474094999662054e+00, 4.840058982020917e-01, 2.856914792359464e+00, 3.210820392428670e+00, 3.210820392428678e+00, 7.423372962527439e-08, 7.436773256914655e-08, 7.423868445729222e-08, 7.435699194456796e-08, 7.430225325507360e-08, 7.430225325507360e-08, 3.816119200851069e-06, 3.752526057705075e-06, 3.755635837147155e-06, 3.700598742289729e-06, 3.810208614167987e-06, 3.810208614167987e-06, 2.053844678096809e-03, 2.080557374749542e-03, 2.750447651554762e-03, 3.384658610789102e-03, 2.002708829996132e-03, 2.002708829996132e-03, 1.663531271409367e-01, 5.359649492290790e-02, 1.911257798045647e-01, 1.196180147147245e-05, 1.787998875989819e-01, 1.787998875989819e-01, 4.087954841631134e+00, 3.346342498882420e+00, 1.984055317035789e+01, 3.606637396236699e-01, 9.169145752269014e+00, 9.169145752268996e+00, 3.405168778617317e-03, 3.070723215713468e-03, 3.173713617125372e-03, 3.269600741815028e-03, 3.220304272164126e-03, 3.220304272164126e-03, 4.041648611945637e-03, 3.249800084465234e-03, 3.342438100048804e-03, 3.508708739576289e-03, 3.423046867190277e-03, 3.423046867190277e-03, 1.647475576315905e-03, 3.098575576939459e-02, 2.205486611602161e-02, 1.388183246527397e-02, 1.794880720275511e-02, 1.794880720275512e-02, 4.634603950456916e-03, 4.641204540832587e-01, 3.599392645400472e-01, 2.001913502902502e-02, 3.262423546449861e-01, 3.262423546449864e-01, 1.663110297083004e+00, 2.355905785570387e+01, 9.301037085704534e+00, 3.451084048043323e-01, 1.171560194512788e+01, 1.171560194512790e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
