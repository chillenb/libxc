
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.855585343307380e-02, -5.855608073775093e-02, -5.855677069541639e-02, -5.855305494421564e-02, -5.855597601498130e-02, -5.855597601498130e-02, -5.153995031567688e-02, -5.154154536780554e-02, -5.158556055728501e-02, -5.151063841412012e-02, -5.154078913310637e-02, -5.154078913310637e-02, -3.336473123243964e-02, -3.325394208595273e-02, -3.023338032379251e-02, -3.045644337092412e-02, -3.332479064516306e-02, -3.332479064516306e-02, -1.314261891346757e-02, -1.354930554042435e-02, -3.815842801354713e-02, -7.758962687704629e-03, -1.326755583397482e-02, -1.326755583397482e-02, -5.585477697004101e-04, -5.843158208196201e-04, -2.236119546982818e-03, -2.720655076054699e-04, -5.784561754299612e-04, -5.784561754299612e-04, -5.831115936220979e-02, -5.836270852868478e-02, -5.831631505572980e-02, -5.835639936452516e-02, -5.833775906116702e-02, -5.833775906116702e-02, -3.852009944799337e-02, -3.883811421817339e-02, -3.810902343842253e-02, -3.835818556660542e-02, -3.927243937993481e-02, -3.927243937993481e-02, -3.706075173661105e-02, -4.311018218381813e-02, -3.596922320060953e-02, -4.064131051191038e-02, -3.831894989241696e-02, -3.831894989241696e-02, -5.098486082804392e-03, -1.080409655622096e-02, -5.111158314714739e-03, -5.654584600212998e-02, -6.289142277042047e-03, -6.289142277042047e-03, -2.626124442425714e-04, -2.994744646843883e-04, -2.255506541227008e-04, -3.129699272582919e-03, -2.733476362353324e-04, -2.733476362353324e-04, -4.372005643184707e-02, -4.245841500487527e-02, -4.290378459174798e-02, -4.325340664923519e-02, -4.307802661861358e-02, -4.307802661861358e-02, -4.338105662300153e-02, -3.173492808131367e-02, -3.498643219929275e-02, -3.816765195231146e-02, -3.656275949929509e-02, -3.656275949929510e-02, -4.365302747795441e-02, -1.417374100204281e-02, -1.805923271574189e-02, -2.592336575511527e-02, -2.182584829522442e-02, -2.182584829522441e-02, -2.993409079775713e-02, -2.065693993524754e-03, -2.780713178108805e-03, -2.713113495870571e-02, -4.210250744367356e-03, -4.210250744367356e-03, -6.510646981982658e-04, -8.307276806951312e-05, -1.570952706680099e-04, -4.069519430978510e-03, -2.328969109872416e-04, -2.328969109872411e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.208849711329462e-02, -8.208832967603549e-02, -8.208783034985005e-02, -8.209056692430967e-02, -8.208840674281123e-02, -8.208840674281123e-02, -7.871068140376855e-02, -7.870996814359286e-02, -7.869051351537502e-02, -7.872518087054863e-02, -7.871033998093428e-02, -7.871033998093428e-02, -5.977658972873969e-02, -5.973263722047908e-02, -5.797116701831320e-02, -5.821110257365843e-02, -5.976084632391152e-02, -5.976084632391152e-02, -2.778326136456983e-02, -2.850837550329119e-02, -6.313349341523866e-02, -1.589687856070784e-02, -2.800865291221196e-02, -2.800865291221196e-02, -7.454579607498431e-04, -7.802998435638269e-04, -3.235789037816972e-03, -3.618573182852721e-04, -7.725358005862344e-04, -7.725358005862344e-04, -7.695623769050812e-02, -7.690782375296638e-02, -7.695141336809747e-02, -7.691376898930567e-02, -7.693127600714890e-02, -7.693127600714890e-02, -7.342233652338986e-02, -7.366480505170578e-02, -7.313299608532060e-02, -7.333384168408069e-02, -7.392673378386140e-02, -7.392673378386140e-02, -5.633206605963677e-02, -5.347185568182188e-02, -5.551346892987257e-02, -5.310259014485114e-02, -5.659802838645658e-02, -5.659802838645658e-02, -9.186093736062363e-03, -2.292378337978471e-02, -9.305970613343982e-03, -6.680754460955032e-02, -1.226607016587015e-02, -1.226607016587015e-02, -3.493109362485607e-04, -3.983296771988056e-04, -3.003382409341547e-04, -4.932602396674045e-03, -3.637464420564289e-04, -3.637464420564289e-04, -5.075579523661881e-02, -5.225202044653260e-02, -5.174712753541305e-02, -5.133282682049183e-02, -5.154257903247149e-02, -5.154257903247149e-02, -4.996114559094986e-02, -5.443627738416534e-02, -5.473366390559348e-02, -5.382187372668493e-02, -5.441580078352422e-02, -5.441580078352422e-02, -5.445629261713296e-02, -3.027292653775693e-02, -3.739267438335033e-02, -4.659643862479099e-02, -4.259168855777581e-02, -4.259168855777581e-02, -5.226556205906880e-02, -2.925438948765891e-03, -4.193210443043324e-03, -4.542948685450069e-02, -7.338471814569417e-03, -7.338471814569420e-03, -8.692650673419771e-04, -1.106427157324598e-04, -2.090982310559653e-04, -7.111342799586844e-03, -3.100286311169989e-04, -3.100286311169981e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.885130856284693e-11, 5.885111331795172e-11, 5.884897194153756e-11, 5.885219429988984e-11, 5.885121621660020e-11, 5.885121621660020e-11, 4.117651432999885e-07, 4.117906731344210e-07, 4.124094170731265e-07, 4.109172530139149e-07, 4.117696974625668e-07, 4.117696974625668e-07, 7.767721156952864e-04, 7.744088331044270e-04, 6.969405612039171e-04, 6.811399348617886e-04, 7.759405835874336e-04, 7.759405835874336e-04, 9.279929935452912e-02, 9.462663571636509e-02, 4.116784774312857e-04, 9.640616407837549e-02, 9.344932750385036e-02, 9.344932750385036e-02, 3.429156929608591e-01, 3.437909717526569e-01, 1.462736528661373e-01, 2.437640491029477e-01, 3.572093680552756e-01, 3.572093680552756e-01, 7.085797423677997e-08, 7.093602684906417e-08, 7.086543372988252e-08, 7.092613264511214e-08, 7.089875181366702e-08, 7.089875181366702e-08, 3.835411501111240e-06, 3.778671616438041e-06, 3.784784134633962e-06, 3.741905548653321e-06, 3.861085003994341e-06, 3.861085003994341e-06, 2.146844396787663e-03, 1.966967331494120e-03, 2.655206478076043e-03, 2.832439859842913e-03, 1.897354676495269e-03, 1.897354676495269e-03, 9.168691085712852e-02, 4.209030979324635e-02, 1.068275351946196e-01, 1.068498166150805e-05, 1.091715720458268e-01, 1.091715720458268e-01, 2.586625148419491e-01, 2.589896664334509e-01, 7.430373785836142e-01, 1.501248855232397e-01, 3.828811494674516e-01, 3.828811494674513e-01, 2.679825926290256e-03, 2.577609726308960e-03, 2.613559521520907e-03, 2.641930432192517e-03, 2.627698641695247e-03, 2.627698641695247e-03, 3.139114961826185e-03, 3.193625723053545e-03, 3.212996644011725e-03, 3.213310572868110e-03, 3.222801846633519e-03, 3.222801846633521e-03, 1.569772129211402e-03, 2.685740578757006e-02, 2.095094121843592e-02, 1.416646537100148e-02, 1.785857619026473e-02, 1.785857619026474e-02, 4.867081068892555e-03, 1.222019602233849e-01, 1.255705954686521e-01, 2.207340589216598e-02, 1.550258300848904e-01, 1.550258300848906e-01, 2.571626478183914e-01, 4.479039931428931e-01, 3.848950211622479e-01, 1.921095875741557e-01, 5.597861852091228e-01, 5.597861852091216e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
