
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_q2d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_q2d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.177187962420090e-02, -5.177265901430883e-02, -5.177488755020504e-02, -5.176331860872745e-02, -5.176955573529222e-02, -5.176955573529222e-02, -4.138858787862715e-02, -4.139374905516428e-02, -4.151331159140496e-02, -4.130590395816661e-02, -4.139479282406741e-02, -4.139479282406741e-02, -2.737748049512739e-02, -2.714281508613148e-02, -2.153445480900791e-02, -2.179242833866800e-02, -2.182941748705966e-02, -2.182941748705966e-02, -6.091483263114860e-03, -6.654055200968025e-03, -2.990927823943024e-02, -1.928884416647065e-03, -2.091484927788381e-03, -2.091484927788374e-03, -3.431878000263956e-05, -3.015373698095655e-05, -1.321571496342108e-05, -5.846861480092869e-05, -4.158095582627568e-05, -4.158095582630959e-05, -5.864320584845176e-02, -5.885458228250477e-02, -5.865191518552995e-02, -5.883851553849561e-02, -5.875074524192437e-02, -5.875074524192437e-02, -2.065955232717642e-02, -2.111940416866351e-02, -1.963622402293298e-02, -2.002914368795610e-02, -2.142955593746202e-02, -2.142955593746202e-02, -3.881412269442066e-02, -5.596330309179044e-02, -3.611397941415592e-02, -5.128981109981307e-02, -4.062799472037158e-02, -4.062799472037155e-02, -3.836579030649235e-04, -3.084938344499362e-03, -2.978549105962882e-04, -7.179569097830324e-02, -1.009220068881307e-03, -1.009220068881307e-03, -4.999699640973427e-05, -5.184178054358947e-05, -9.202236610305028e-06, -7.843031730242132e-05, -1.899270414238234e-05, -1.899270414236138e-05, -6.047292307110153e-02, -5.503148869698664e-02, -5.684484769850155e-02, -5.842513341874542e-02, -5.762563077670230e-02, -5.762563077670230e-02, -6.163822629965787e-02, -2.708894628535132e-02, -3.455761121254760e-02, -4.377057688787089e-02, -3.892666377448358e-02, -3.892666377448358e-02, -5.585812242354316e-02, -5.559956663394697e-03, -9.783291953576318e-03, -2.334136534928143e-02, -1.568621086187958e-02, -1.568621086187958e-02, -2.635447035520315e-02, -1.236767139162209e-05, -2.716528678409417e-05, -2.832071654094089e-02, -2.521747939034494e-04, -2.521747939034598e-04, -2.898346328447881e-05, -1.832951123472945e-05, -3.120129137202695e-05, -1.932154335443443e-04, -1.569886330710366e-05, -1.569886330701930e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_q2d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_q2d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.220077652745162e-01, -1.220079081927587e-01, -1.220091861424061e-01, -1.220094271434204e-01, -1.220135444269517e-01, -1.220132779710089e-01, -1.219911681438651e-01, -1.219920134170510e-01, -1.220026631299491e-01, -1.220040776163927e-01, -1.220026631299491e-01, -1.220040776163927e-01, -1.090702937133864e-01, -1.090717253649883e-01, -1.090763967430923e-01, -1.090780317007843e-01, -1.092219133978369e-01, -1.092197480844901e-01, -1.089732063439877e-01, -1.089717361008134e-01, -1.090982426279030e-01, -1.090589847279539e-01, -1.090982426279030e-01, -1.090589847279539e-01, -7.854925377254394e-02, -7.823364788086359e-02, -7.829246300253877e-02, -7.790718223648739e-02, -6.959329674602356e-02, -7.005684348214720e-02, -7.038868013417136e-02, -7.024228792158829e-02, -6.825601050846546e-02, -7.269094659228884e-02, -6.825601050846546e-02, -7.269094659228884e-02, -2.771371884342325e-02, -2.677655581642693e-02, -2.971790261646167e-02, -2.856957100884509e-02, -8.441764645345624e-02, -8.160482981269306e-02, -1.035128965768796e-02, -1.023058879879391e-02, -9.843589397015828e-03, -1.695281750610218e-02, -9.843589397015858e-03, -1.695281750610217e-02, 1.457538220254886e-04, 1.444315118689505e-04, 1.323804442074568e-04, 1.309046354818306e-04, -2.789729630850590e-05, -2.593577549213579e-05, 1.225254510524130e-04, 1.219669071105342e-04, 1.291547252528552e-04, 1.329337937941083e-04, 1.291547252530671e-04, 1.329337937943028e-04, -1.293368325026626e-01, -1.293694952905264e-01, -1.295200248458447e-01, -1.295536466391289e-01, -1.293441250552869e-01, -1.293773996909984e-01, -1.295064898225746e-01, -1.295393478766669e-01, -1.294300574443150e-01, -1.294633679979008e-01, -1.294300574443150e-01, -1.294633679979008e-01, -7.315168448977315e-02, -7.315482894358601e-02, -7.417213657124917e-02, -7.418937141757362e-02, -7.087713678122236e-02, -7.077394728206118e-02, -7.179425550487828e-02, -7.168504851804984e-02, -7.471029177707487e-02, -7.499153871510898e-02, -7.471029177707487e-02, -7.499153871510898e-02, -8.427629850399222e-02, -8.454107952894530e-02, -8.353554346331098e-02, -8.347960467698493e-02, -8.362136177569308e-02, -8.018983111064355e-02, -8.341920955115656e-02, -7.962252961448651e-02, -8.259959923432454e-02, -8.785542529699313e-02, -8.259959923432456e-02, -8.785542529699311e-02, -2.269442263810706e-03, -2.251592709569826e-03, -1.570234141443315e-02, -1.563500174296640e-02, -1.808856877704156e-03, -1.732043503887368e-03, -1.178739948252348e-01, -1.179447083266223e-01, -5.823682158576844e-03, -5.547384752539609e-03, -5.823682158576844e-03, -5.547384752539609e-03, 7.194143335053214e-05, 7.372222713850821e-05, 1.233796272042169e-04, 1.236922243151511e-04, 4.080165010079922e-05, 4.039929382002966e-05, -4.671870351279410e-04, -4.648439373437106e-04, 7.700568773850549e-05, 7.374963021969964e-05, 7.700568773830321e-05, 7.374963021949785e-05, -7.623973297838060e-02, -7.575416110342674e-02, -8.088695813039791e-02, -8.041628277629255e-02, -7.955152792099647e-02, -7.907396196512928e-02, -7.821399810709787e-02, -7.773507125003677e-02, -7.891081472466881e-02, -7.843259329797679e-02, -7.891081472466881e-02, -7.843259329797679e-02, -7.343675641170284e-02, -7.302060947638643e-02, -7.450325944832108e-02, -7.416375642860623e-02, -8.041889369426640e-02, -8.001082787755556e-02, -8.272139819243540e-02, -8.234830611356909e-02, -8.211426252629443e-02, -8.174647249766097e-02, -8.211426252629443e-02, -8.174647249766097e-02, -8.559596612304253e-02, -8.539415858718018e-02, -2.583906143867179e-02, -2.570774952465876e-02, -3.984476148323834e-02, -3.948092320172768e-02, -6.614788141136044e-02, -6.576259493058957e-02, -5.381653493222453e-02, -5.383508793601958e-02, -5.381653493222454e-02, -5.383508793601960e-02, -7.277057357132805e-02, -7.224336290033546e-02, -8.871162490834651e-06, -8.699800855450357e-06, -1.323510353426191e-04, -1.285673397705688e-04, -6.958707471054532e-02, -6.840792658406483e-02, -1.542755887851222e-03, -1.475112942338239e-03, -1.542755887851254e-03, -1.475112942338247e-03, 1.328429892841250e-04, 1.320047549219223e-04, -1.029093971268430e-07, -3.173931353162674e-08, 4.981070159731143e-05, 5.139785061521358e-05, -1.167861418224469e-03, -1.152392137372571e-03, 6.543086893894520e-05, 6.275836979630432e-05, 6.543086893834825e-05, 6.275836979569942e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_q2d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_q2d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.756491254481532e-10, 3.512982508963064e-10, 1.756491254481532e-10, 1.756537946759447e-10, 3.513075893518894e-10, 1.756537946759447e-10, 1.756621286062254e-10, 3.513242572124508e-10, 1.756621286062254e-10, 1.755929229442120e-10, 3.511858458884240e-10, 1.755929229442120e-10, 1.756309495662406e-10, 3.512618991324813e-10, 1.756309495662406e-10, 1.756309495662406e-10, 3.512618991324813e-10, 1.756309495662406e-10, 1.078259294333239e-06, 2.156518588666478e-06, 1.078259294333239e-06, 1.078481969429446e-06, 2.156963938858893e-06, 1.078481969429446e-06, 1.083517387183969e-06, 2.167034774367938e-06, 1.083517387183969e-06, 1.073783840885350e-06, 2.147567681770699e-06, 1.073783840885350e-06, 1.078398641944085e-06, 2.156797283888171e-06, 1.078398641944085e-06, 1.078398641944085e-06, 2.156797283888171e-06, 1.078398641944085e-06, 1.793274508094357e-03, 3.586549016188715e-03, 1.793274508094357e-03, 1.779719481836434e-03, 3.559438963672869e-03, 1.779719481836434e-03, 1.437898226905499e-03, 2.875796453810998e-03, 1.437898226905499e-03, 1.405364562135282e-03, 2.810729124270564e-03, 1.405364562135282e-03, 1.426227805724673e-03, 2.852455611449346e-03, 1.426227805724673e-03, 1.426227805724673e-03, 2.852455611449346e-03, 1.426227805724673e-03, 1.554381269407114e-01, 3.108762538814228e-01, 1.554381269407114e-01, 1.640352360800009e-01, 3.280704721600018e-01, 1.640352360800009e-01, 9.701653460762011e-04, 1.940330692152402e-03, 9.701653460762011e-04, 1.129102198246654e-01, 2.258204396493308e-01, 1.129102198246654e-01, 9.409458736828361e-02, 1.881891747365672e-01, 9.409458736828361e-02, 9.409458736828391e-02, 1.881891747365678e-01, 9.409458736828391e-02, -3.267733653504717e+01, -6.535467307009434e+01, -3.267733653504717e+01, -2.592802565729024e+01, -5.185605131458048e+01, -2.592802565729024e+01, 3.818849194978913e-03, 7.637698389957826e-03, 3.818849194978913e-03, -1.711033978034507e+02, -3.422067956069013e+02, -1.711033978034507e+02, -8.942846579119262e+01, -1.788569315823852e+02, -8.942846579119262e+01, -8.942846579129726e+01, -1.788569315825945e+02, -8.942846579129726e+01, 2.832016929909951e-07, 5.664033859819902e-07, 2.832016929909951e-07, 2.850773523334662e-07, 5.701547046669324e-07, 2.850773523334662e-07, 2.832765714356615e-07, 5.665531428713231e-07, 2.832765714356615e-07, 2.849322237231053e-07, 5.698644474462105e-07, 2.849322237231053e-07, 2.841557481664119e-07, 5.683114963328237e-07, 2.841557481664119e-07, 2.841557481664119e-07, 5.683114963328237e-07, 2.841557481664119e-07, 6.088546391377631e-06, 1.217709278275526e-05, 6.088546391377631e-06, 6.074938196724901e-06, 1.214987639344980e-05, 6.074938196724901e-06, 5.786012067493443e-06, 1.157202413498689e-05, 5.786012067493443e-06, 5.776289523176708e-06, 1.155257904635342e-05, 5.776289523176708e-06, 6.232375812742496e-06, 1.246475162548499e-05, 6.232375812742496e-06, 6.232375812742496e-06, 1.246475162548499e-05, 6.232375812742496e-06, 5.902234587031905e-03, 1.180446917406381e-02, 5.902234587031905e-03, 7.449687873735442e-03, 1.489937574747088e-02, 7.449687873735442e-03, 7.677850588062043e-03, 1.535570117612409e-02, 7.677850588062043e-03, 1.139429126437637e-02, 2.278858252875274e-02, 1.139429126437637e-02, 5.895790124842326e-03, 1.179158024968465e-02, 5.895790124842326e-03, 5.895790124842326e-03, 1.179158024968465e-02, 5.895790124842326e-03, 6.279909348455913e-02, 1.255981869691183e-01, 6.279909348455913e-02, 5.696913820637724e-02, 1.139382764127545e-01, 5.696913820637724e-02, 6.357706057072142e-02, 1.271541211414428e-01, 6.357706057072142e-02, 6.039410235853468e-05, 1.207882047170694e-04, 6.039410235853468e-05, 1.203821888855196e-01, 2.407643777710391e-01, 1.203821888855196e-01, 1.203821888855196e-01, 2.407643777710391e-01, 1.203821888855196e-01, -2.995986214470700e+02, -5.991972428941400e+02, -2.995986214470700e+02, -1.908603727006746e+02, -3.817207454013492e+02, -1.908603727006746e+02, -2.913410062383812e+02, -5.826820124767623e+02, -2.913410062383812e+02, 6.058534584170307e-02, 1.211706916834061e-01, 6.058534584170307e-02, -2.152986634740321e+02, -4.305973269480641e+02, -2.152986634740321e+02, -2.152986634736510e+02, -4.305973269473021e+02, -2.152986634736510e+02, 1.257172904198407e-02, 2.514345808396814e-02, 1.257172904198407e-02, 1.078532589744540e-02, 2.157065179489079e-02, 1.078532589744540e-02, 1.135228564466423e-02, 2.270457128932846e-02, 1.135228564466423e-02, 1.186932324624324e-02, 2.373864649248648e-02, 1.186932324624324e-02, 1.160509336342370e-02, 2.321018672684741e-02, 1.160509336342370e-02, 1.160509336342370e-02, 2.321018672684741e-02, 1.160509336342370e-02, 1.488634850382308e-02, 2.977269700764617e-02, 1.488634850382308e-02, 7.961276352264013e-03, 1.592255270452803e-02, 7.961276352264013e-03, 9.193700015575391e-03, 1.838740003115078e-02, 9.193700015575391e-03, 1.084863225521364e-02, 2.169726451042727e-02, 1.084863225521364e-02, 9.977457809386647e-03, 1.995491561877329e-02, 9.977457809386647e-03, 9.977457809386647e-03, 1.995491561877329e-02, 9.977457809386647e-03, 5.916320004870809e-03, 1.183264000974162e-02, 5.916320004870809e-03, 4.248749086513082e-02, 8.497498173026165e-02, 4.248749086513082e-02, 3.910784204429685e-02, 7.821568408859370e-02, 3.910784204429685e-02, 3.482015269763284e-02, 6.964030539526568e-02, 3.482015269763284e-02, 3.898100383322651e-02, 7.796200766645302e-02, 3.898100383322651e-02, 3.898100383322657e-02, 7.796200766645314e-02, 3.898100383322657e-02, 1.142961894298656e-02, 2.285923788597312e-02, 1.142961894298656e-02, -7.897617710779129e-03, -1.579523542155826e-02, -7.897617710779129e-03, 2.548793984727354e-02, 5.097587969454707e-02, 2.548793984727354e-02, 5.497469932548575e-02, 1.099493986509715e-01, 5.497469932548575e-02, 1.085750966582591e-01, 2.171501933165181e-01, 1.085750966582591e-01, 1.085750966582570e-01, 2.171501933165140e-01, 1.085750966582570e-01, -9.355642588164779e+00, -1.871128517632956e+01, -9.355642588164779e+00, -2.748474931740610e+03, -5.496949863481221e+03, -2.748474931740610e+03, -8.028116220207658e+02, -1.605623244041532e+03, -8.028116220207658e+02, 9.941596885368964e-02, 1.988319377073793e-01, 9.941596885368964e-02, -2.580072673135154e+02, -5.160145346270308e+02, -2.580072673135154e+02, -2.580072673116657e+02, -5.160145346233313e+02, -2.580072673116657e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
