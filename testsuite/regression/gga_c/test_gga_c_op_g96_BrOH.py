
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_g96_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.824487562749003e-02, -5.824508435201664e-02, -5.824571825870022e-02, -5.824230626850636e-02, -5.824498818647177e-02, -5.824498818647177e-02, -5.152465256611019e-02, -5.152608651946418e-02, -5.156567736585164e-02, -5.149838199695442e-02, -5.152540851801588e-02, -5.152540851801588e-02, -3.380409956772189e-02, -3.370156585462344e-02, -3.085234624890698e-02, -3.107108847300580e-02, -3.376714347716379e-02, -3.376714347716379e-02, -1.326804329302999e-02, -1.372490861605983e-02, -3.834789135249816e-02, -6.613420181109319e-03, -1.340939942810062e-02, -1.340939942810062e-02, -2.391103900058318e-06, -2.890828934528976e-06, -3.112066377913169e-04, -8.438243898887556e-08, -2.862461852778676e-06, -2.862461852778676e-06, -5.786190543373705e-02, -5.791105977717744e-02, -5.786681935984516e-02, -5.790504099545110e-02, -5.788726261305097e-02, -5.788726261305097e-02, -3.935432369144058e-02, -3.966089885456829e-02, -3.895835855219654e-02, -3.919993978418575e-02, -4.007448975117659e-02, -4.007448975117659e-02, -3.695726411462487e-02, -4.287885596402825e-02, -3.590378382985812e-02, -4.035049584371565e-02, -3.814718563387055e-02, -3.814718563387055e-02, -2.939887146785594e-03, -1.015370388458582e-02, -3.060553772032942e-03, -5.621601077803393e-02, -4.679031232883616e-03, -4.679031232883616e-03, -7.662164946629257e-08, -1.344132713943281e-07, -1.044874015942798e-07, -9.501341532041482e-04, -1.299968241001788e-07, -1.299968241001786e-07, -4.386185351931349e-02, -4.226472016867647e-02, -4.278771176413098e-02, -4.322396012105403e-02, -4.300173025806600e-02, -4.300173025806600e-02, -4.363339327536182e-02, -3.197794444659376e-02, -3.495532052500036e-02, -3.791695879267410e-02, -3.640823301924451e-02, -3.640823301924452e-02, -4.339653852086323e-02, -1.411491970530121e-02, -1.841489057718068e-02, -2.623313910364932e-02, -2.226927343112133e-02, -2.226927343112132e-02, -3.021357654004714e-02, -2.096648751600242e-04, -6.049111242120846e-04, -2.724249499425449e-02, -2.142495204384138e-03, -2.142495204384140e-03, -3.556489955761603e-06, -9.214624789016068e-10, -1.231421425489672e-08, -2.093659060651383e-03, -9.287255370995039e-08, -9.287255370994957e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_g96_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.985928363433617e-02, -7.985918167852456e-02, -7.985887957538143e-02, -7.986054594087168e-02, -7.985922858966853e-02, -7.985922858966853e-02, -7.608144585012303e-02, -7.608093795291472e-02, -7.606717364746521e-02, -7.609204486001653e-02, -7.608120879406968e-02, -7.608120879406968e-02, -5.833117757350997e-02, -5.831555740664759e-02, -5.766237914787782e-02, -5.782645949560702e-02, -5.832553755892235e-02, -5.832553755892235e-02, -3.006447040300066e-02, -3.055064784975112e-02, -6.113650521800454e-02, -1.950140762997726e-02, -3.021542710171877e-02, -3.021542710171877e-02, -1.374461368700932e-05, -1.655017125183519e-05, -1.487304256292537e-03, -5.144506848762708e-07, -1.637830328865766e-05, -1.637830328865766e-05, -7.566590855716579e-02, -7.563788091638107e-02, -7.566311696726773e-02, -7.564132395264563e-02, -7.565145517025880e-02, -7.565145517025880e-02, -7.290790147334583e-02, -7.300867958252663e-02, -7.282467429263127e-02, -7.290903482414290e-02, -7.306616115928290e-02, -7.306616115928290e-02, -5.483265052735042e-02, -5.383481497372685e-02, -5.397621432824010e-02, -5.295619511680708e-02, -5.525806931590557e-02, -5.525806931590557e-02, -1.063908507053780e-02, -2.712649005860485e-02, -1.091158647016825e-02, -6.733469113588995e-02, -1.510607725522403e-02, -1.510607725522403e-02, -4.671394378114810e-07, -8.137790231741988e-07, -6.215337745816407e-07, -4.046271365669559e-03, -7.813253696476856e-07, -7.813253696476844e-07, -5.170901591134194e-02, -5.271755153918452e-02, -5.240746850347753e-02, -5.213390490149501e-02, -5.227494444583006e-02, -5.227494444583006e-02, -5.094270592184283e-02, -5.286392853206589e-02, -5.317565739396720e-02, -5.294740465134350e-02, -5.312089418415584e-02, -5.312089418415587e-02, -5.473786551165111e-02, -3.378080729499392e-02, -3.914403602775813e-02, -4.552184700923907e-02, -4.266156717265979e-02, -4.266156717265979e-02, -5.084469667401466e-02, -1.037774317083358e-03, -2.729957449216208e-03, -4.413090708317120e-02, -8.055523713831135e-03, -8.055523713831144e-03, -2.039131557065303e-05, -5.811554590103415e-09, -7.602029156468670e-08, -7.834389222242872e-03, -5.563757520195696e-07, -5.563757520195646e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_g96_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.399948401856177e-11, 5.399943545357157e-11, 5.399786436417303e-11, 5.399868709732674e-11, 5.399946972848395e-11, 5.399946972848395e-11, 3.699388806858351e-07, 3.699639342119894e-07, 3.705789755352242e-07, 3.691376702590680e-07, 3.699440607023300e-07, 3.699440607023300e-07, 7.106396332644411e-04, 7.093453048630426e-04, 6.681813735439422e-04, 6.510789932943483e-04, 7.101892101799553e-04, 7.101892101799553e-04, 1.093447316726827e-01, 1.088221633810880e-01, 3.689969286043414e-04, 1.722019557699992e-01, 1.092666718282151e-01, 1.092666718282151e-01, 4.846472973708724e-01, 5.080174171941532e-01, 4.405158366366606e-01, 1.409123357447919e-01, 5.285917587525175e-01, 5.285917587525175e-01, 6.749837949672210e-08, 6.764636008574151e-08, 6.751279144812222e-08, 6.762785490897382e-08, 6.757507653760157e-08, 6.757507653760157e-08, 3.674114615977242e-06, 3.604603778333058e-06, 3.647867804720548e-06, 3.594148038772370e-06, 3.660757972581776e-06, 3.660757972581776e-06, 1.945711170725062e-03, 2.204527978945018e-03, 2.396403963040855e-03, 2.906008695694972e-03, 1.738889819613634e-03, 1.738889819613634e-03, 2.254181984809843e-01, 6.322620877292813e-02, 2.582254459245785e-01, 1.195003074959587e-05, 2.268439602493005e-01, 2.268439602493005e-01, 1.467792518249595e-01, 1.710507073612899e-01, 5.202318832069640e-01, 4.464156519917927e-01, 2.629152690648952e-01, 2.629152690648948e-01, 4.016543954108849e-03, 2.971132816251845e-03, 3.206266997443329e-03, 3.461857844495492e-03, 3.323154595112526e-03, 3.323154595112525e-03, 5.206371908817026e-03, 2.874042393217232e-03, 2.891190836289754e-03, 3.038480570310827e-03, 2.948624037172265e-03, 2.948624037172265e-03, 1.726718072012195e-03, 3.398439054899965e-02, 2.266051569655040e-02, 1.292587894652468e-02, 1.737414043265774e-02, 1.737414043265774e-02, 4.398401548002997e-03, 3.554451074789379e-01, 3.806456003713590e-01, 1.976946136619126e-02, 4.069408704382051e-01, 4.069408704382058e-01, 3.875354113327260e-01, 7.930090887923176e-02, 1.391633062378899e-01, 5.040906536888733e-01, 3.678036439104046e-01, 3.678036439104026e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
