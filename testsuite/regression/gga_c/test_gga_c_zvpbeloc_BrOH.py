
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zvpbeloc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.704359742733523e-02, -6.704436773546041e-02, -6.704669711587977e-02, -6.703410602550129e-02, -6.704401291528023e-02, -6.704401291528023e-02, -5.193334318336338e-02, -5.193811954432394e-02, -5.206974377723816e-02, -5.184432673258087e-02, -5.193582460183836e-02, -5.193582460183836e-02, -2.130990341351304e-02, -2.097744555190721e-02, -1.280665792733955e-02, -1.321923404381903e-02, -2.118993816572847e-02, -2.118993816572847e-02, -3.880040312564026e-03, -4.499805387454393e-03, -3.239515476826167e-02, -3.413308001412978e-04, -4.067045848254237e-03, -4.067045848254237e-03, -2.095977198531285e-10, -2.848461433759100e-10, -4.364380445271397e-07, -8.541267522024599e-13, -2.870348373140843e-10, -2.870348373140843e-10, -7.183444754585813e-02, -7.203860911230539e-02, -7.185482214296976e-02, -7.201356978426053e-02, -7.193970570150110e-02, -7.193970570150110e-02, -2.083279591893020e-02, -2.153374435039112e-02, -1.991676223398306e-02, -2.045609318695173e-02, -2.253873614373202e-02, -2.253873614373202e-02, -4.031246049587817e-02, -5.925850161176198e-02, -3.834379346627537e-02, -5.416012772391952e-02, -4.359074238875377e-02, -4.359074238875377e-02, -3.441099330446026e-05, -7.216740706669381e-04, -4.297486124869251e-05, -7.894841783887149e-02, -1.354683654686845e-04, -1.354683654686845e-04, -7.574737331141034e-13, -1.837678535328552e-12, -2.212994584802488e-12, -3.930209770947779e-06, -2.161715460211528e-12, -2.161715460211528e-12, -6.262013732678703e-02, -5.894934223912864e-02, -6.028546705088941e-02, -6.130421695891119e-02, -6.079661852462795e-02, -6.079661852462795e-02, -6.244900570969350e-02, -2.570860392661478e-02, -3.660439928668986e-02, -4.726670945323150e-02, -4.196861389622977e-02, -4.196861389622977e-02, -5.952467502157226e-02, -1.811644498669055e-03, -4.929519975396863e-03, -2.006195076269376e-02, -1.088987146774071e-02, -1.088987146774071e-02, -2.336448152138668e-02, -1.870469910228741e-07, -1.386382268565414e-06, -2.806385914892614e-02, -2.417612338230374e-05, -2.417612338230374e-05, -3.326374475904614e-10, -9.371590080196158e-16, -5.224969173511637e-14, -2.709757358732249e-05, -1.565121567624208e-12, -1.565125470752029e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zvpbeloc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.466534410314504e-01, -1.466541757584670e-01, -1.466564052925840e-01, -1.466443952988977e-01, -1.466538372632548e-01, -1.466538372632548e-01, -1.311595463746374e-01, -1.311620466571509e-01, -1.312308979786720e-01, -1.311135075318463e-01, -1.311608609006570e-01, -1.311608609006570e-01, -9.822901119117723e-02, -9.765664054902665e-02, -7.683283086336491e-02, -7.828098848420240e-02, -9.802454921396604e-02, -9.802454921396604e-02, -2.838737892230290e-02, -3.184831729680582e-02, -1.113241244333770e-01, -3.239763580913021e-03, -2.945422561041643e-02, -2.945422561041643e-02, -2.318169228696799e-09, -3.148141441803852e-09, -4.688915273931620e-06, -9.535068007601581e-12, -3.172231717942191e-09, -3.172231717942191e-09, -1.433304188352698e-01, -1.434184602655228e-01, -1.433392422969755e-01, -1.434077048310750e-01, -1.433758671675093e-01, -1.433758671675093e-01, -9.898443462642394e-02, -1.004690680564212e-01, -9.691167737280390e-02, -9.812738835656407e-02, -1.025280519774907e-01, -1.025280519774907e-01, -1.014041841924131e-01, -8.260914399260931e-02, -1.007650240055133e-01, -8.484938292262491e-02, -1.002341013563656e-01, -1.002341013563656e-01, -3.521879610980124e-04, -6.620705299145378e-03, -4.372854944123575e-04, -1.182938020093880e-01, -1.335086568611961e-03, -1.335086568611961e-03, -8.457578888870570e-12, -2.049523393381764e-11, -2.468215204984029e-11, -4.142991718095587e-05, -2.410746956589653e-11, -2.410747937848921e-11, -7.454838339876317e-02, -7.971489230526030e-02, -7.780147507423281e-02, -7.636171620296819e-02, -7.707610873026111e-02, -7.707610873026111e-02, -7.288004830258930e-02, -9.860061563046982e-02, -1.000475263463566e-01, -9.172944816322101e-02, -9.674634395343011e-02, -9.674634395343011e-02, -8.498568154663937e-02, -1.543646021251140e-02, -3.603995971869638e-02, -8.481169851416201e-02, -6.301691314503641e-02, -6.301691314503642e-02, -9.436948907721944e-02, -2.020871911611035e-06, -1.477302833381905e-05, -8.631963475469388e-02, -2.482139393221629e-04, -2.482139393221647e-04, -3.675257080161733e-09, -1.057073423488843e-14, -5.852089147038351e-13, -2.771521426174879e-04, -1.746402105636525e-11, -1.746402103122501e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zvpbeloc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zvpbeloc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.005015953883992e-10, 2.005042398495453e-10, 2.005069273929849e-10, 2.004638144117484e-10, 2.005030661282448e-10, 2.005030661282448e-10, 1.236871473892345e-06, 1.237024718722108e-06, 1.240992290908428e-06, 1.232867192744820e-06, 1.236924094857538e-06, 1.236924094857538e-06, 2.547835389194573e-03, 2.523927039263495e-03, 1.779910214044233e-03, 1.766489533190432e-03, 2.539316855587726e-03, 2.539316855587726e-03, 2.006582107453522e-01, 2.235997471519039e-01, 1.469417797815426e-03, 4.614281600514577e-02, 2.079256726951232e-01, 2.079256726951232e-01, 9.865967901839134e-05, 1.168254188151248e-04, 1.789810398896603e-03, 3.072024831723187e-06, 1.238035369633684e-04, 1.238035369633684e-04, 2.820755241857893e-07, 2.835180876217569e-07, 2.822177030475045e-07, 2.833393198208178e-07, 2.828201506779213e-07, 2.828201506779213e-07, 8.727751554978434e-06, 8.708399217192236e-06, 8.447157234871882e-06, 8.439935388306130e-06, 9.072668530694078e-06, 9.072668530694078e-06, 8.437858688296258e-03, 6.473554003303366e-03, 1.053263753035526e-02, 9.769911671324025e-03, 7.360135538135593e-03, 7.360135538135593e-03, 1.076943641352151e-02, 2.639634586476798e-02, 1.505210909346237e-02, 4.898596998309779e-05, 3.069833513880062e-02, 3.069833513880062e-02, 3.125574849360521e-06, 5.083646698032501e-06, 2.456206492323368e-05, 6.154621593081932e-03, 9.602445747306103e-06, 9.602448089275114e-06, 7.683589829017509e-03, 8.204007251846205e-03, 8.041007721378357e-03, 7.897283689507581e-03, 7.971145431192478e-03, 7.971145431192478e-03, 8.679985537650547e-03, 1.229983525475760e-02, 1.284526915359542e-02, 1.205783374139613e-02, 1.262685745075467e-02, 1.262685745075467e-02, 5.289970854642395e-03, 2.858175763882604e-02, 4.189956314418338e-02, 5.584931690630056e-02, 5.580777233419078e-02, 5.580777233419085e-02, 1.877802442799653e-02, 8.805660686066970e-04, 2.710460958661231e-03, 9.245012058184569e-02, 1.780980894827036e-02, 1.780980894826893e-02, 8.437821504862799e-05, 1.667299519537460e-07, 1.251620542655440e-06, 2.540142155561182e-02, 1.368273879759045e-05, 1.368273055132981e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
