
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_acggap_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.684440839396289e-02, -5.684523038441983e-02, -5.684757517627329e-02, -5.683537356286489e-02, -5.684195276727815e-02, -5.684195276727815e-02, -4.483809108928882e-02, -4.484306085171769e-02, -4.495821210231513e-02, -4.475871147911328e-02, -4.484410539656750e-02, -4.484410539656750e-02, -2.955468418986507e-02, -2.932756672173861e-02, -2.384345915564716e-02, -2.409977860641847e-02, -2.424232783521970e-02, -2.424232783521970e-02, -8.285840358267380e-03, -8.929784961631432e-03, -3.212116888673452e-02, -3.153425216468438e-03, -5.070810477072254e-03, -5.070810477072251e-03, -2.645792685259070e-08, -3.500149595985705e-08, -2.652877746983048e-05, -2.038780195252121e-09, -7.224278087831962e-09, -7.224278087831962e-09, -6.191770767432846e-02, -6.211854327328380e-02, -6.192598580829348e-02, -6.210328100553100e-02, -6.201988634731129e-02, -6.201988634731129e-02, -2.375862158934178e-02, -2.423243818231941e-02, -2.271006303972105e-02, -2.311741929792234e-02, -2.454659853946464e-02, -2.454659853946464e-02, -4.035896921862345e-02, -5.649957333523139e-02, -3.780816721673270e-02, -5.203453860718835e-02, -4.217009774560958e-02, -4.217009774560958e-02, -7.909021791643482e-04, -4.570681238671165e-03, -6.404104589971875e-04, -7.280992039433343e-02, -1.848914151613696e-03, -1.848914151613696e-03, -8.110621338170147e-10, -2.150277135736679e-09, -3.664253856714058e-09, -1.989016244161660e-04, -4.134510305770038e-09, -4.134510305770038e-09, -6.064299471086051e-02, -5.552974542474349e-02, -5.722943577884412e-02, -5.871356808390814e-02, -5.796229769764085e-02, -5.796229769764085e-02, -6.171266875399267e-02, -2.915592620860743e-02, -3.626813754556832e-02, -4.493272666835053e-02, -4.038653713287055e-02, -4.038653713287055e-02, -5.645568073528860e-02, -7.462889511702910e-03, -1.205585657393282e-02, -2.552513435955333e-02, -1.807590393689467e-02, -1.807590393689467e-02, -2.843301601943135e-02, -2.040950294753786e-05, -6.890480290324116e-05, -3.024172880234981e-02, -5.689665769691687e-04, -5.689665769691756e-04, -9.820617688087324e-08, -2.145689496082949e-11, -3.454362323094481e-10, -4.487149393923143e-04, -3.626016224272207e-09, -3.626016219534880e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_acggap_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.308340558054224e-01, -1.308349803180055e-01, -1.308376289303140e-01, -1.308239047260730e-01, -1.308313035301159e-01, -1.308313035301159e-01, -1.104434811060220e-01, -1.104489280186461e-01, -1.105750896644857e-01, -1.103574640513589e-01, -1.104502250548828e-01, -1.104502250548828e-01, -7.900875370264042e-02, -7.875752848775192e-02, -7.159850714726701e-02, -7.204222931437400e-02, -7.223351168277811e-02, -7.223351168277811e-02, -3.268727809771052e-02, -3.445536162884093e-02, -8.344262296985651e-02, -1.506671521246167e-02, -2.238857115047714e-02, -2.238857115047716e-02, -1.667186395107304e-07, -2.203147803642006e-07, -1.589729356115673e-04, -1.296854929159251e-08, -4.575202540707045e-08, -4.575202540500366e-08, -1.295391038607553e-01, -1.297056490531682e-01, -1.295459961779929e-01, -1.296930311595584e-01, -1.296239192948923e-01, -1.296239192948923e-01, -7.744865779703772e-02, -7.837311904264481e-02, -7.538432082761459e-02, -7.620925604513010e-02, -7.895930919960442e-02, -7.895930919960442e-02, -8.349064482476304e-02, -8.269915503387006e-02, -8.108733688752051e-02, -8.053372326226742e-02, -8.419066088266207e-02, -8.419066088266207e-02, -4.289664745606835e-03, -2.081840297171073e-02, -3.513815294589781e-03, -1.168287184335082e-01, -9.384561165365951e-03, -9.384561165365951e-03, -5.174577546085853e-09, -1.367535838254357e-08, -2.326943552596195e-08, -1.143843961498975e-03, -2.624168292703534e-08, -2.624168292703534e-08, -7.568319819037349e-02, -7.988273431711822e-02, -7.867974772422227e-02, -7.747419701604158e-02, -7.810275548550591e-02, -7.810275548550591e-02, -7.308573293550019e-02, -7.453445905450477e-02, -7.948562883138741e-02, -8.140630192708587e-02, -8.091697520856603e-02, -8.091697520856603e-02, -8.462876309416778e-02, -3.099976472072283e-02, -4.389105372337739e-02, -6.635130150940786e-02, -5.616522045610552e-02, -5.616522045610552e-02, -7.271418461683164e-02, -1.226949247585970e-04, -4.063121307770855e-04, -6.840277021801293e-02, -3.139388954915767e-03, -3.139388954915791e-03, -6.151694417651596e-07, -1.381427077814053e-10, -2.208958668041617e-09, -2.504282615693808e-03, -2.302477593433929e-08, -2.302477592615063e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_acggap_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.859068130260859e-10, 1.859099758794558e-10, 1.859140384381043e-10, 1.858671974478569e-10, 1.858931590945574e-10, 1.858931590945574e-10, 1.037633543633525e-06, 1.037839084236508e-06, 1.042482466988538e-06, 1.033468983770906e-06, 1.037757557040090e-06, 1.037757557040090e-06, 1.732466489671162e-03, 1.720538000981543e-03, 1.418434891372300e-03, 1.384943552592879e-03, 1.409707064131934e-03, 1.409707064131934e-03, 1.815695333532279e-01, 1.885285701480685e-01, 9.347105526639153e-04, 1.633248142325179e-01, 1.895845984209424e-01, 1.895845984209422e-01, 1.992061424804695e-02, 2.321777746285306e-02, 7.878317083531550e-02, 7.632074684432903e-03, 1.531895129538209e-02, 1.531895129645068e-02, 2.687036114567843e-07, 2.704493198886068e-07, 2.687732600740048e-07, 2.703141995648013e-07, 2.695915526782071e-07, 2.695915526782071e-07, 6.191402194330305e-06, 6.162451829500930e-06, 5.920294738822192e-06, 5.896866114445969e-06, 6.311002116134760e-06, 6.311002116134760e-06, 5.551716981177841e-03, 6.981143595629874e-03, 7.235821859516877e-03, 1.063284821641054e-02, 5.544430019677882e-03, 5.544430019677882e-03, 1.190914088527739e-01, 7.452844003255571e-02, 1.264606628284853e-01, 5.703147669517491e-05, 1.976274996153295e-01, 1.976274996153295e-01, 7.595755886904105e-03, 9.342231137522524e-03, 8.879386325209374e-02, 1.506470890702555e-01, 3.914470773450462e-02, 3.914470772988164e-02, 1.185899339214545e-02, 1.008651603898944e-02, 1.063564898638574e-02, 1.114557982880423e-02, 1.088371237903908e-02, 1.088371237903908e-02, 1.412285385408022e-02, 7.631395060831284e-03, 8.665025712396506e-03, 1.012416776229041e-02, 9.347869491370578e-03, 9.347869491370578e-03, 5.547660700508013e-03, 4.997953040884433e-02, 4.196495707708363e-02, 3.337247533341513e-02, 3.908248772046820e-02, 3.908248772046821e-02, 1.095011349411336e-02, 6.591968305085984e-02, 8.857215770341109e-02, 5.147798274797633e-02, 2.261724016934437e-01, 2.261724016934478e-01, 2.358065951738227e-02, 1.086410557726906e-02, 1.311064513249962e-02, 2.148522554653568e-01, 4.868647232879961e-02, 4.868647231648534e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
