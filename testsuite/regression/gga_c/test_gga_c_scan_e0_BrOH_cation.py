
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_scan_e0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.135070888173666e-02, -6.135133816243354e-02, -6.135312933393397e-02, -6.134378859331402e-02, -6.134882564774165e-02, -6.134882564774165e-02, -5.262924481645039e-02, -5.263278792685672e-02, -5.271493808544245e-02, -5.257282054774440e-02, -5.263354773561453e-02, -5.263354773561453e-02, -3.842668527642094e-02, -3.828326889480671e-02, -3.487087712306899e-02, -3.505885637293358e-02, -3.500217796121453e-02, -3.500217796121453e-02, -1.925220505336118e-02, -1.970227286748050e-02, -4.060379446884182e-02, -1.430967588162924e-02, -1.241956412411898e-02, -1.241956412411898e-02, -5.414696793827611e-04, -5.813030531953141e-04, -3.907905444045982e-03, -2.632207005671679e-04, -3.039371367490164e-04, -3.039371367490164e-04, -6.581359996282091e-02, -6.597508116745669e-02, -6.582025210330453e-02, -6.596280264778853e-02, -6.589572909858223e-02, -6.589572909858223e-02, -3.779141479407009e-02, -3.810851033008866e-02, -3.710486376519465e-02, -3.737823266674090e-02, -3.830974872065206e-02, -3.830974872065206e-02, -4.470536281475641e-02, -5.726129242016655e-02, -4.258951008342035e-02, -5.311121673800340e-02, -4.591326411356114e-02, -4.591326411356113e-02, -9.843637945238265e-03, -1.678826498572321e-02, -9.214044262928388e-03, -7.391767735614030e-02, -1.204146098127929e-02, -1.204146098127929e-02, -1.926893716098896e-04, -2.607343614262846e-04, -2.289438337608422e-04, -6.559508692727057e-03, -2.495820727651183e-04, -2.495820727651168e-04, -6.077817553969810e-02, -5.619238009959217e-02, -5.767324830606203e-02, -5.900136834357414e-02, -5.832491913057616e-02, -5.832491913057616e-02, -6.175894199455313e-02, -3.674761269437281e-02, -4.138259657359739e-02, -4.751182565527674e-02, -4.421330656081221e-02, -4.421330656081221e-02, -5.736367141478391e-02, -1.998408562362674e-02, -2.371506351775957e-02, -3.275838987028442e-02, -2.782520690185157e-02, -2.782520690185157e-02, -3.589366575726488e-02, -3.695547832315302e-03, -5.087571653512157e-03, -3.529839025616231e-02, -8.513653867811296e-03, -8.513653867811298e-03, -8.122823430758213e-04, -5.217745310477076e-05, -1.330997849628914e-04, -8.012728895624942e-03, -2.347229131397829e-04, -2.347229131397786e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_scan_e0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.179329559642976e-01, -1.179331216736876e-01, -1.179339231178208e-01, -1.179342025498069e-01, -1.179371384458328e-01, -1.179368295041818e-01, -1.179212933613148e-01, -1.179222734849700e-01, -1.179291596700805e-01, -1.179307997496051e-01, -1.179291596700805e-01, -1.179307997496051e-01, -9.967039429071171e-02, -9.967202493198941e-02, -9.967573974542326e-02, -9.967760188299750e-02, -9.980451823160594e-02, -9.980205411803111e-02, -9.958571190955659e-02, -9.958403631546561e-02, -9.970030557599982e-02, -9.965559300051413e-02, -9.970030557599982e-02, -9.965559300051413e-02, -7.019647863537995e-02, -6.983421846629466e-02, -7.003596576078630e-02, -6.959251196075351e-02, -6.443959360094170e-02, -6.501935733624874e-02, -6.514413342169749e-02, -6.496175197103984e-02, -6.243476326609611e-02, -6.795088205066824e-02, -6.243476326609611e-02, -6.795088205066824e-02, -3.646424871944689e-02, -3.462011510039210e-02, -3.740113108814377e-02, -3.525617709265177e-02, -7.565265428736907e-02, -7.247078774017364e-02, -2.685007474899183e-02, -2.635383806344014e-02, -1.985194566744874e-02, -4.390630921455319e-02, -1.985194566744876e-02, -4.390630921455316e-02, -1.081658872551855e-03, -1.011667831978512e-03, -1.166522284873699e-03, -1.080989593523560e-03, -7.595581018069013e-03, -7.071921321613616e-03, -5.069366723395020e-04, -5.159687381501779e-04, -5.284571944867522e-04, -9.042597760056570e-04, -5.284571944867524e-04, -9.042597760056572e-04, -1.202198849907666e-01, -1.202546585776660e-01, -1.204259221506603e-01, -1.204616915415800e-01, -1.202280924312348e-01, -1.202635163761688e-01, -1.204106587159521e-01, -1.204456174467281e-01, -1.203246776651764e-01, -1.203601281553312e-01, -1.203246776651764e-01, -1.203601281553312e-01, -7.299582983347026e-02, -7.300030915534327e-02, -7.357753260482044e-02, -7.360185036215310e-02, -7.180459507910213e-02, -7.165409537575025e-02, -7.232255740943068e-02, -7.216468437438583e-02, -7.375800598222557e-02, -7.415215561826208e-02, -7.375800598222557e-02, -7.415215561826208e-02, -7.525347686966108e-02, -7.552834877536099e-02, -8.054965049717154e-02, -8.049356242837954e-02, -7.445358897645991e-02, -7.086007032374672e-02, -7.941278256465738e-02, -7.559895017970612e-02, -7.392396316361684e-02, -7.934174836211151e-02, -7.392396316361685e-02, -7.934174836211150e-02, -1.843020556513900e-02, -1.819340017797768e-02, -3.133695764096232e-02, -3.112652232429872e-02, -1.780026754163068e-02, -1.657705679436092e-02, -1.132628066889547e-01, -1.133340211096654e-01, -2.335398315530679e-02, -2.159164603548272e-02, -2.335398315530679e-02, -2.159164603548272e-02, -3.834577087237309e-04, -3.685532637126599e-04, -5.107631656938274e-04, -5.027771989680658e-04, -4.608424861466338e-04, -4.344906768990758e-04, -1.227585097327586e-02, -1.217480723046490e-02, -6.038012343688370e-04, -4.394721746850013e-04, -6.038012343688351e-04, -4.394721746849998e-04, -7.555738942432720e-02, -7.507146538111921e-02, -7.821313363646795e-02, -7.774135921637441e-02, -7.762242213180812e-02, -7.714410231576498e-02, -7.687728569288806e-02, -7.639781692620444e-02, -7.728231290158791e-02, -7.680345178758866e-02, -7.728231290158791e-02, -7.680345178758866e-02, -7.319222773740999e-02, -7.277591151094896e-02, -6.573836759273072e-02, -6.535877177293921e-02, -7.109357589405939e-02, -7.066378572901713e-02, -7.570911346432209e-02, -7.533006551274188e-02, -7.357157407142029e-02, -7.319225534391000e-02, -7.357157407142029e-02, -7.319225534391000e-02, -8.216884995250734e-02, -8.196637802329920e-02, -3.728012704454080e-02, -3.699152676719797e-02, -4.408350358024742e-02, -4.349646915493054e-02, -5.815771138056158e-02, -5.772203986262777e-02, -5.058713023441680e-02, -5.061120931229585e-02, -5.058713023441680e-02, -5.061120931229585e-02, -6.413407279486906e-02, -6.354437265229010e-02, -6.948859539279854e-03, -6.887158297888391e-03, -9.709732041357456e-03, -9.292301589170590e-03, -6.082592792542358e-02, -5.956916751091537e-02, -1.648878552989901e-02, -1.531613743218452e-02, -1.648878552989902e-02, -1.531613743218452e-02, -1.589760855749230e-03, -1.526464358364252e-03, -1.028980582710857e-04, -1.026708967900634e-04, -2.692867659479335e-04, -2.531024255985613e-04, -1.509360260639372e-02, -1.476527955867482e-02, -5.531621805289318e-04, -4.158771371566102e-04, -5.531621805289263e-04, -4.158771371566069e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_scan_e0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.427881415418004e-10, 2.855762830836008e-10, 1.427881415418004e-10, 1.427913729399081e-10, 2.855827458798162e-10, 1.427913729399081e-10, 1.427967707674087e-10, 2.855935415348174e-10, 1.427967707674087e-10, 1.427488894356720e-10, 2.854977788713440e-10, 1.427488894356720e-10, 1.427752493250312e-10, 2.855504986500623e-10, 1.427752493250312e-10, 1.427752493250312e-10, 2.855504986500623e-10, 1.427752493250312e-10, 7.393521282570328e-07, 1.478704256514066e-06, 7.393521282570328e-07, 7.395233569419306e-07, 1.479046713883861e-06, 7.395233569419306e-07, 7.434096206947492e-07, 1.486819241389498e-06, 7.434096206947492e-07, 7.359925027078861e-07, 1.471985005415772e-06, 7.359925027078861e-07, 7.394705887653737e-07, 1.478941177530747e-06, 7.394705887653737e-07, 7.394705887653737e-07, 1.478941177530747e-06, 7.394705887653737e-07, 1.056796487257165e-03, 2.113592974514330e-03, 1.056796487257165e-03, 1.048073488489128e-03, 2.096146976978257e-03, 1.048073488489128e-03, 8.465353602909046e-04, 1.693070720581809e-03, 8.465353602909046e-04, 8.273805736170860e-04, 1.654761147234172e-03, 8.273805736170860e-04, 8.391830443599767e-04, 1.678366088719953e-03, 8.391830443599767e-04, 8.391830443599767e-04, 1.678366088719953e-03, 8.391830443599767e-04, 1.074401712479351e-01, 2.148803424958703e-01, 1.074401712479351e-01, 1.088121374231986e-01, 2.176242748463972e-01, 1.088121374231986e-01, 5.839762800548842e-04, 1.167952560109768e-03, 5.839762800548842e-04, 1.476625385276839e-01, 2.953250770553678e-01, 1.476625385276839e-01, 1.029276050467878e-01, 2.058552100935757e-01, 1.029276050467878e-01, 1.029276050467879e-01, 2.058552100935759e-01, 1.029276050467879e-01, 5.378115167709255e+01, 1.075623033541851e+02, 5.378115167709255e+01, 5.093368607333947e+01, 1.018673721466789e+02, 5.093368607333947e+01, 1.648819011659020e+00, 3.297638023318039e+00, 1.648819011659020e+00, 1.287233577415838e+02, 2.574467154831676e+02, 1.287233577415838e+02, 8.459936553291656e+01, 1.691987310658331e+02, 8.459936553291656e+01, 8.459936553291675e+01, 1.691987310658335e+02, 8.459936553291675e+01, 2.158250485449407e-07, 4.316500970898814e-07, 2.158250485449407e-07, 2.175186375405593e-07, 4.350372750811186e-07, 2.175186375405593e-07, 2.158929291419493e-07, 4.317858582838986e-07, 2.158929291419493e-07, 2.173878301141625e-07, 4.347756602283250e-07, 2.173878301141625e-07, 2.166860591557407e-07, 4.333721183114813e-07, 2.166860591557407e-07, 2.166860591557407e-07, 4.333721183114813e-07, 2.166860591557407e-07, 4.001869217799145e-06, 8.003738435598291e-06, 4.001869217799145e-06, 3.981218825717378e-06, 7.962437651434755e-06, 3.981218825717378e-06, 3.835790292303418e-06, 7.671580584606836e-06, 3.835790292303418e-06, 3.817287045559467e-06, 7.634574091118934e-06, 3.817287045559467e-06, 4.075295748940601e-06, 8.150591497881203e-06, 4.075295748940601e-06, 4.075295748940601e-06, 8.150591497881203e-06, 4.075295748940601e-06, 3.749519778377080e-03, 7.499039556754159e-03, 3.749519778377080e-03, 5.940944701543854e-03, 1.188188940308771e-02, 5.940944701543854e-03, 4.739929526336588e-03, 9.479859052673177e-03, 4.739929526336588e-03, 8.633018588792772e-03, 1.726603717758554e-02, 8.633018588792772e-03, 3.825501017593772e-03, 7.651002035187543e-03, 3.825501017593772e-03, 3.825501017593773e-03, 7.651002035187547e-03, 3.825501017593773e-03, 2.476335192278845e-01, 4.952670384557691e-01, 2.476335192278845e-01, 5.908304497744297e-02, 1.181660899548859e-01, 5.908304497744297e-02, 2.984068268973183e-01, 5.968136537946366e-01, 2.984068268973183e-01, 5.033970447197975e-05, 1.006794089439595e-04, 5.033970447197975e-05, 2.352559616010002e-01, 4.705119232020003e-01, 2.352559616010002e-01, 2.352559616010002e-01, 4.705119232020003e-01, 2.352559616010002e-01, 2.352034071024003e+02, 4.704068142048005e+02, 2.352034071024003e+02, 1.480564655260359e+02, 2.961129310520718e+02, 1.480564655260359e+02, 7.284293948228982e+02, 1.456858789645796e+03, 7.284293948228982e+02, 7.550755077326707e-01, 1.510151015465341e+00, 7.550755077326707e-01, 3.100351656257246e+02, 6.200703312514493e+02, 3.100351656257246e+02, 3.100351656257245e+02, 6.200703312514490e+02, 3.100351656257245e+02, 1.107874060989828e-02, 2.215748121979656e-02, 1.107874060989828e-02, 8.628230247629541e-03, 1.725646049525908e-02, 8.628230247629541e-03, 9.369166242471302e-03, 1.873833248494260e-02, 9.369166242471302e-03, 1.007425109349326e-02, 2.014850218698653e-02, 1.007425109349326e-02, 9.710336967146791e-03, 1.942067393429358e-02, 9.710336967146791e-03, 9.710336967146791e-03, 1.942067393429358e-02, 9.710336967146791e-03, 1.355871649080005e-02, 2.711743298160010e-02, 1.355871649080005e-02, 4.561333815488552e-03, 9.122667630977105e-03, 4.561333815488552e-03, 5.580405057379756e-03, 1.116081011475951e-02, 5.580405057379756e-03, 7.360768225541163e-03, 1.472153645108233e-02, 7.360768225541163e-03, 6.356770616131257e-03, 1.271354123226251e-02, 6.356770616131257e-03, 6.356770616131257e-03, 1.271354123226251e-02, 6.356770616131257e-03, 4.666695305360158e-03, 9.333390610720317e-03, 4.666695305360158e-03, 3.291671968917868e-02, 6.583343937835735e-02, 3.291671968917868e-02, 2.414057337731959e-02, 4.828114675463918e-02, 2.414057337731959e-02, 1.903544133788386e-02, 3.807088267576771e-02, 1.903544133788386e-02, 2.146284997628621e-02, 4.292569995257243e-02, 2.146284997628621e-02, 2.146284997628623e-02, 4.292569995257246e-02, 2.146284997628623e-02, 6.481056411730199e-03, 1.296211282346040e-02, 6.481056411730199e-03, 1.686721015754719e+00, 3.373442031509439e+00, 1.686721015754719e+00, 9.549598612012696e-01, 1.909919722402539e+00, 9.549598612012696e-01, 3.097975750859213e-02, 6.195951501718426e-02, 3.097975750859213e-02, 5.471591355926676e-01, 1.094318271185335e+00, 5.471591355926676e-01, 5.471591355926677e-01, 1.094318271185335e+00, 5.471591355926677e-01, 2.589622866467774e+01, 5.179245732935547e+01, 2.589622866467774e+01, 3.424181148052385e+03, 6.848362296104769e+03, 3.424181148052385e+03, 6.579599501884569e+02, 1.315919900376914e+03, 6.579599501884569e+02, 6.099029108199432e-01, 1.219805821639886e+00, 6.099029108199432e-01, 4.134876598661604e+02, 8.269753197323207e+02, 4.134876598661604e+02, 4.134876598661637e+02, 8.269753197323273e+02, 4.134876598661637e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
