
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_mol_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.451095139349589e-02, -4.451167195333924e-02, -4.451384471909482e-02, -4.450206713221245e-02, -4.451134009969777e-02, -4.451134009969777e-02, -3.565592956537602e-02, -3.565999374511817e-02, -3.577189070569129e-02, -3.557939519020008e-02, -3.565802152575513e-02, -3.565802152575513e-02, -2.166972826609662e-02, -2.145873566177801e-02, -1.616600117138131e-02, -1.642713251944915e-02, -2.159360431760055e-02, -2.159360431760055e-02, -6.768637193335180e-03, -7.350396901358075e-03, -2.836295544388205e-02, -1.642797264255848e-03, -6.946966715133195e-03, -6.946966715133195e-03, -7.870302008721629e-08, -9.730456341456118e-08, -2.016173742786647e-05, -1.936816903388545e-09, -9.642805817210931e-08, -9.642805817210931e-08, -5.258478720454148e-02, -5.279161133167932e-02, -5.260540769847062e-02, -5.276622260025911e-02, -5.269138064237737e-02, -5.269138064237737e-02, -1.621007778864817e-02, -1.660670551597053e-02, -1.566109193229889e-02, -1.596434274205810e-02, -1.722331153728091e-02, -1.722331153728091e-02, -3.515541280198296e-02, -5.439467352561898e-02, -3.372938852356656e-02, -4.855422387053818e-02, -3.773643739785460e-02, -3.773643739785460e-02, -4.060173677671851e-04, -3.019284087913488e-03, -4.484470454010608e-04, -6.802501481247256e-02, -9.117912140284289e-04, -9.117912140284289e-04, -1.739827350964176e-09, -3.231017505908317e-09, -2.434162252076724e-09, -8.661162936656207e-05, -3.106448102343376e-09, -3.106448102343376e-09, -6.082078819740565e-02, -5.466652451752101e-02, -5.674011947663442e-02, -5.844084543197543e-02, -5.757937106139843e-02, -5.757937106139843e-02, -6.124228633293588e-02, -2.498121741356799e-02, -3.248449682761687e-02, -4.138146263711721e-02, -3.668668515585847e-02, -3.668668515585848e-02, -5.420711371954908e-02, -5.398642462271158e-03, -9.380010002957902e-03, -2.084766409847497e-02, -1.443929959680964e-02, -1.443929959680963e-02, -2.345277600022275e-02, -1.208572818626650e-05, -4.587801720458039e-05, -2.593859129455530e-02, -2.807829424706650e-04, -2.807829424706650e-04, -1.207959361357484e-07, -1.270218168532086e-11, -2.280875747030230e-10, -2.846968141304405e-04, -2.134578663798755e-09, -2.134578661229832e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_mol_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.188824273422835e-01, -1.188834050429650e-01, -1.188863601130260e-01, -1.188703784672992e-01, -1.188829547062000e-01, -1.188829547062000e-01, -1.017016189689769e-01, -1.017073583295696e-01, -1.018652938505552e-01, -1.015942381650021e-01, -1.017045927600841e-01, -1.017045927600841e-01, -7.021324038849143e-02, -6.984937539732100e-02, -5.926215367145688e-02, -5.988512883338489e-02, -7.008240485080393e-02, -7.008240485080393e-02, -2.957735823927402e-02, -3.144390676660271e-02, -8.141421805645081e-02, -8.913667142923382e-03, -3.015777635872094e-02, -3.015777635872094e-02, -5.109208037098249e-07, -6.313241225794748e-07, -1.270128732560638e-04, -1.266411985387353e-08, -6.256966082178491e-07, -6.256966082178491e-07, -1.237922547253011e-01, -1.239971555468718e-01, -1.238127323717293e-01, -1.239720601341565e-01, -1.238979651404196e-01, -1.238979651404196e-01, -6.268463717940695e-02, -6.372632873317845e-02, -6.122917898571007e-02, -6.204434142786928e-02, -6.529564477460645e-02, -6.529564477460645e-02, -8.278319960462353e-02, -8.404350482488815e-02, -8.106585959595120e-02, -8.338187946030150e-02, -8.464265502053020e-02, -8.464265502053020e-02, -2.400260794080511e-03, -1.541825014099169e-02, -2.639749787898148e-03, -1.179807530456964e-01, -5.171869824732430e-03, -5.171869824732430e-03, -1.137921463728139e-08, -2.110939296676624e-08, -1.593674339120914e-08, -5.345048176020907e-04, -2.030948492986955e-08, -2.030948492755824e-08, -7.640898883419006e-02, -8.157795176959851e-02, -8.010834760430274e-02, -7.869920544350423e-02, -7.943622875838915e-02, -7.943622875838915e-02, -7.425183808486484e-02, -7.234245606441637e-02, -7.950750195366485e-02, -8.304373476341241e-02, -8.178007311634197e-02, -8.178007311634199e-02, -8.598040531870972e-02, -2.525548590046584e-02, -3.866947863321383e-02, -6.320409946672310e-02, -5.157901220909136e-02, -5.157901220909133e-02, -6.933565437520062e-02, -7.648326174772716e-05, -2.860623640590112e-04, -6.742561362338055e-02, -1.681656337402811e-03, -1.681656337402820e-03, -7.828470470168734e-07, -8.369357119370857e-11, -1.497299459548248e-09, -1.704003843588612e-03, -1.397256045460536e-08, -1.397256045233880e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_mol_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.882941812315475e-10, 1.882974010765766e-10, 1.883021405631429e-10, 1.882496165477113e-10, 1.882959597128640e-10, 1.882959597128640e-10, 1.054905066647192e-06, 1.055092600861734e-06, 1.060047468969184e-06, 1.050430917380455e-06, 1.054979386878410e-06, 1.054979386878410e-06, 1.639415968750678e-03, 1.624028899976711e-03, 1.222946040947080e-03, 1.204730989945070e-03, 1.633904047614329e-03, 1.633904047614329e-03, 1.761184936635868e-01, 1.858233155773307e-01, 1.012406283590082e-03, 1.088895419580500e-01, 1.792928231931278e-01, 1.792928231931278e-01, 1.870465210810775e-02, 2.015752047186098e-02, 4.197239637224864e-02, 3.498106989933259e-03, 2.100991676472276e-02, 2.100991676472276e-02, 2.865685278204375e-07, 2.885159967078735e-07, 2.867608009596493e-07, 2.882749596227127e-07, 2.875728367845394e-07, 2.875728367845394e-07, 5.382735863730770e-06, 5.389542884701517e-06, 5.186912063982770e-06, 5.193741506198639e-06, 5.650653611277585e-06, 5.650653611277585e-06, 6.687777357728018e-03, 9.358435425251931e-03, 8.088914511279658e-03, 1.193251252473987e-02, 6.228825511231785e-03, 6.228825511231785e-03, 6.343656708633230e-02, 5.226282541620877e-02, 7.852281472144847e-02, 6.730879242373567e-05, 1.024572244386634e-01, 1.024572244386634e-01, 3.604998851916296e-03, 4.490810539967845e-03, 1.359366393642420e-02, 6.878627748569091e-02, 6.936999455342673e-03, 6.936999454858625e-03, 1.483303086062735e-02, 1.239957357006400e-02, 1.317558146538572e-02, 1.384462976622061e-02, 1.350201359462035e-02, 1.350201359462035e-02, 1.757111308420929e-02, 8.014108696632981e-03, 9.607649093736886e-03, 1.164782469819283e-02, 1.056544918947734e-02, 1.056544918947734e-02, 7.405408513862643e-03, 3.944726689865068e-02, 3.771086893619672e-02, 3.562608856156520e-02, 3.835920241151284e-02, 3.835920241151287e-02, 1.207896843126028e-02, 2.883883988664253e-02, 4.545957171243704e-02, 6.424286670558362e-02, 1.044316391023749e-01, 1.044316391023781e-01, 1.546909842667162e-02, 1.127373556901449e-03, 2.740781709857524e-03, 1.351965655810934e-01, 9.383246264397157e-03, 9.383246264121637e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
