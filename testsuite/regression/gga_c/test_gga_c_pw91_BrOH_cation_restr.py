
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pw91_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.798864990310385e-02, -6.798938122263129e-02, -6.799149208482375e-02, -6.798063580184840e-02, -6.798648610551247e-02, -6.798648610551247e-02, -4.963127627153341e-02, -4.963579155106478e-02, -4.974048762329825e-02, -4.955977926235718e-02, -4.963682901333016e-02, -4.963682901333016e-02, -3.040952000985984e-02, -3.018955648669610e-02, -2.484022529572338e-02, -2.510953256107843e-02, -2.524344579089202e-02, -2.524344579089202e-02, -6.954484112314497e-03, -7.567583172241456e-03, -3.323872243095302e-02, -2.249993147697582e-03, -3.913079815646141e-03, -3.913079815646141e-03, -5.499370128651348e-09, -7.355564127140600e-09, -8.810306309282047e-06, -3.902448458889107e-10, -1.439001382305804e-09, -1.439001382305804e-09, -6.639640273815070e-02, -6.657457129586328e-02, -6.640375275864065e-02, -6.656103791514222e-02, -6.648704788776347e-02, -6.648704788776347e-02, -2.778088190968507e-02, -2.827372819889889e-02, -2.671746161400990e-02, -2.714496052419971e-02, -2.858266469500887e-02, -2.858266469500887e-02, -4.042850921401313e-02, -5.629646819010617e-02, -3.782938841120809e-02, -5.178057594741903e-02, -4.219845435319072e-02, -4.219845435319072e-02, -4.416602952310391e-04, -3.656459412787563e-03, -3.421203290662380e-04, -7.328067684077022e-02, -1.174906814450327e-03, -1.174906814450327e-03, -1.522040497476018e-10, -4.130722114724099e-10, -7.357047154320397e-10, -8.536896160887823e-05, -8.217750953617144e-10, -8.217750953617144e-10, -6.049097212164507e-02, -5.530103888101838e-02, -5.702101304210611e-02, -5.852992604334427e-02, -5.776556512223284e-02, -5.776556512223284e-02, -6.158387404449024e-02, -2.929477517029121e-02, -3.624608579287463e-02, -4.472336688393946e-02, -4.026564418164309e-02, -4.026564418164309e-02, -5.627286152775268e-02, -6.560517503317109e-03, -1.125711805968493e-02, -2.500737538804517e-02, -1.741301723153991e-02, -1.741301723153992e-02, -2.841120117381889e-02, -6.612305213031566e-06, -2.586657185703778e-05, -2.957410040287507e-02, -2.857608424882965e-04, -2.857608424882903e-04, -2.150826932942139e-08, -3.834666637545845e-12, -6.432892363241080e-11, -2.165966992213797e-04, -7.209139663940150e-10, -7.209139629796142e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pw91_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.342004119339586e-01, -1.342011414097028e-01, -1.342032551161089e-01, -1.341924258845181e-01, -1.341982605124770e-01, -1.341982605124770e-01, -1.103570516841236e-01, -1.103613193249518e-01, -1.104603074594021e-01, -1.102904039698695e-01, -1.103624376402599e-01, -1.103624376402599e-01, -7.852480481157974e-02, -7.830401688834004e-02, -7.203720733870791e-02, -7.245204910696997e-02, -7.261027798942013e-02, -7.261027798942013e-02, -2.970174282018301e-02, -3.157082402717386e-02, -8.279730822545744e-02, -1.177298435449633e-02, -1.888740510335965e-02, -1.888740510335968e-02, -3.592210252105898e-08, -4.802597834411812e-08, -5.609489294496326e-05, -2.559338483339763e-09, -9.422342206671299e-09, -9.422342209571214e-09, -1.274138423939010e-01, -1.275568634856765e-01, -1.274197618099580e-01, -1.275460252561553e-01, -1.274866498619698e-01, -1.274866498619698e-01, -8.221094401894792e-02, -8.297629268189820e-02, -8.055311356068778e-02, -8.124119979415556e-02, -8.343135923545922e-02, -8.343135923545922e-02, -8.247661520218395e-02, -8.262990173948077e-02, -8.013078290679700e-02, -8.041228683168522e-02, -8.321481123122827e-02, -8.321481123122827e-02, -2.608176221961503e-03, -1.800882625200471e-02, -2.041230259296451e-03, -1.152135287406404e-01, -6.539660749056232e-03, -6.539660749056232e-03, -9.998117856997601e-10, -2.709411937151074e-09, -4.832955507095909e-09, -5.288906936038666e-04, -5.392451450772184e-09, -5.392451449962488e-09, -7.564893738643583e-02, -7.991497774815537e-02, -7.877077127695789e-02, -7.755457444289576e-02, -7.819744838888718e-02, -7.819744838888718e-02, -7.302381915918610e-02, -7.381516976303706e-02, -7.857360093372899e-02, -8.082805736671805e-02, -8.009915027806923e-02, -8.009915027806923e-02, -8.445321264356299e-02, -2.897024281674928e-02, -4.269929572784457e-02, -6.566949775732493e-02, -5.538921507542037e-02, -5.538921507542038e-02, -7.200735064750667e-02, -4.218032402150812e-05, -1.630679612867469e-04, -6.788335160813651e-02, -1.714909339830301e-03, -1.714909339830290e-03, -1.400846691710889e-07, -2.532629778196572e-11, -4.233798062359973e-10, -1.311767004111001e-03, -4.732851141107443e-09, -4.732851137081368e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pw91_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.624601700244128e-10, 1.624627078082698e-10, 1.624656063734495e-10, 1.624280306290432e-10, 1.624489082921402e-10, 1.624489082921402e-10, 9.410924642401681e-07, 9.412683025500969e-07, 9.452345179525532e-07, 9.374829674576724e-07, 9.411919538841997e-07, 9.411919538841997e-07, 1.656739059809266e-03, 1.646072913649035e-03, 1.377304031138116e-03, 1.343682693846486e-03, 1.367031559323178e-03, 1.367031559323178e-03, 1.654344973667089e-01, 1.733232773012804e-01, 8.872302182754909e-04, 1.273736569082738e-01, 1.600353604995654e-01, 1.600353604995653e-01, 4.331267174056694e-03, 5.107100570781450e-03, 2.776673759001390e-02, 1.520236609483804e-03, 3.185142387252879e-03, 3.185142388279107e-03, 2.374562982535225e-07, 2.389845698335433e-07, 2.375172289591463e-07, 2.388662231278889e-07, 2.382335448158166e-07, 2.382335448158166e-07, 6.158061028962859e-06, 6.108571639460597e-06, 5.936493939544503e-06, 5.894796106544735e-06, 6.241190797532068e-06, 6.241190797532068e-06, 5.332596193094011e-03, 6.986643541816735e-03, 6.965693908325750e-03, 1.061687452450689e-02, 5.335134294131435e-03, 5.335134294131435e-03, 7.199553303789642e-02, 6.425197380611966e-02, 7.304706656002451e-02, 5.355581964266067e-05, 1.372971372015383e-01, 1.372971372015383e-01, 1.481648885804349e-03, 1.868567588425680e-03, 1.865643001552038e-02, 6.935685632060215e-02, 8.131039009945299e-03, 8.131039004844123e-03, 1.201984808585222e-02, 1.017201757408143e-02, 1.079528994038353e-02, 1.134668575510798e-02, 1.106891654270306e-02, 1.106891654270306e-02, 1.442612261175522e-02, 7.360398137950509e-03, 8.356805686352987e-03, 9.904510103871869e-03, 9.059465662708516e-03, 9.059465662708516e-03, 5.515414230334883e-03, 4.650656083563234e-02, 4.057483546042637e-02, 3.266609144032906e-02, 3.821399227051360e-02, 3.821399227051362e-02, 1.059789026402979e-02, 2.264204930336133e-02, 3.542680322003390e-02, 5.090846104417713e-02, 1.230276982139265e-01, 1.230276982139284e-01, 5.413083848619322e-03, 2.011524576999364e-03, 2.538513751201288e-03, 1.120591858745653e-01, 1.011863207449019e-02, 1.011863206393468e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
