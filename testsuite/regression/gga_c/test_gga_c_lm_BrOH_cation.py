
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.334962034432637e-01, -6.334829974633664e-01, -6.334482403056183e-01, -6.336442306645917e-01, -6.335381284411699e-01, -6.335381284411699e-01, -2.000591153226671e-01, -2.000371862126958e-01, -1.995339982963183e-01, -2.004349198482826e-01, -2.000360709874479e-01, -2.000360709874479e-01, -9.364606573998775e-02, -9.389163310029625e-02, -1.015391961245571e-01, -1.015240783790941e-01, -1.027711766145832e-01, -1.027711766145832e-01, -6.390790867835346e-02, -6.283404841827529e-02, -9.837783365748594e-02, -7.779644800072874e-02, -6.294999037511556e-02, -6.294999037511556e-02, -1.287031168963267e+00, -1.189212376325594e+00, -2.776023520455310e-01, -2.338777384227093e+00, -1.511771414407488e+00, -1.511771414407486e+00, -1.874717178011793e-01, -1.868348959571596e-01, -1.874455436198161e-01, -1.868832743639529e-01, -1.871469231812529e-01, -1.871469231812529e-01, -2.275655866932965e-01, -2.252799502345502e-01, -2.349586634769806e-01, -2.328559045910345e-01, -2.228247115577188e-01, -2.228247115577188e-01, -8.027119179017318e-02, -8.165636377576596e-02, -7.861668713415706e-02, -7.840048979553682e-02, -8.011606595779459e-02, -8.011606595779457e-02, -1.141063525969812e-01, -8.309101070478830e-02, -1.184859455775843e-01, -1.087485257142489e-01, -8.445072061579467e-02, -8.445072061579467e-02, -2.638314883420485e+00, -2.205953962397151e+00, -1.148789833321060e+00, -1.510715707766540e-01, -1.369424393052569e+00, -1.369424393052570e+00, -8.134863009623020e-02, -7.981739034890165e-02, -8.024608956066474e-02, -8.068328785614129e-02, -8.045437117127080e-02, -8.045437117127080e-02, -8.136477839877403e-02, -8.000473925983896e-02, -7.758982117355315e-02, -7.706673802660334e-02, -7.705067607391088e-02, -7.705067607391088e-02, -8.261687744176459e-02, -8.014599661252285e-02, -7.491805476851768e-02, -6.961487661588352e-02, -7.087127620487396e-02, -7.087127620487396e-02, -7.732742564222794e-02, -3.062070144068152e-01, -2.187857004193662e-01, -6.647417477973239e-02, -1.074648726457178e-01, -1.074648726457178e-01, -1.016859275117947e+00, -3.741562303174933e+00, -2.547943232779796e+00, -1.146900124959950e-01, -1.305971415263967e+00, -1.305971415263967e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([5.100396486800139e-01, 5.100366343774185e-01, 5.100207721416651e-01, 5.100228666036910e-01, 5.099881032539751e-01, 5.099689552738851e-01, 5.102014443036004e-01, 5.102401042757913e-01, 5.100259162543773e-01, 5.101534434402939e-01, 5.100259162543773e-01, 5.101534434402939e-01, 4.562040794135558e-02, 4.542988502572034e-02, 4.558975524121346e-02, 4.538674784306321e-02, 4.472512843848989e-02, 4.455334138055542e-02, 4.624517011956162e-02, 4.604546258574187e-02, 4.562038572074382e-02, 4.534928470378289e-02, 4.562038572074382e-02, 4.534928470378289e-02, -4.512533497659651e-02, -4.700122209057326e-02, -4.412959130037030e-02, -4.644360050789504e-02, -2.535251372172647e-02, -2.159272175398683e-02, -2.357073439971961e-02, -2.483075470457023e-02, -4.034294570541216e-02, -4.017382938833258e-04, -4.034294570541216e-02, -4.017382938833258e-04, -7.107133664259687e-03, -9.119574388279601e-03, -1.122818516938130e-02, -1.315310846573925e-02, -4.446127079287467e-02, -4.944392781109992e-02, 4.423486867723810e-02, 4.405062488573694e-02, 1.512829678608299e-02, 5.493290303203622e-02, 1.512829678608302e-02, 5.493290303203609e-02, 1.772026932875659e+00, 1.675850718499030e+00, 1.650244322548921e+00, 1.544346210757801e+00, 4.185816657702865e-01, 3.946126314306211e-01, 3.065957011593269e+00, 3.161277176163082e+00, 1.980500361091577e+00, 2.187816875485298e+00, 1.980500361091574e+00, 2.187816875485296e+00, -4.358774684483949e-03, -4.404173965164612e-03, -5.560293220654066e-03, -5.577075847583830e-03, -4.416508987818445e-03, -4.444105244312966e-03, -5.456225966607295e-03, -5.500730516357342e-03, -4.976592652102449e-03, -4.996290047650929e-03, -4.976592652102449e-03, -4.996290047650929e-03, 1.258849516088039e-01, 1.258787676147515e-01, 1.220032426111935e-01, 1.220117879397460e-01, 1.387101036668828e-01, 1.356387172859671e-01, 1.351511796574399e-01, 1.322044321029647e-01, 1.153269827871417e-01, 1.214179326883962e-01, 1.153269827871417e-01, 1.214179326883962e-01, -7.699498335603802e-02, -7.743351170308789e-02, -9.295303302701935e-02, -9.306396915493038e-02, -7.540753813926342e-02, -7.239520804840088e-02, -9.177016607260094e-02, -8.689990892450664e-02, -7.669053769132377e-02, -8.318381208507857e-02, -7.669053769132374e-02, -8.318381208507854e-02, 1.350404681998678e-01, 1.315611031109752e-01, 3.641938759299179e-02, 3.619777192750567e-02, 1.495207098780967e-01, 1.406973954306733e-01, -1.105612737560425e-01, -1.106861992068154e-01, 8.267215168266971e-02, 6.040103551529456e-02, 8.267215168266971e-02, 6.040103551529456e-02, 3.450019309776171e+00, 3.568251541025454e+00, 2.898997896046368e+00, 2.972043480245858e+00, 1.641429520687459e+00, 1.470702680167086e+00, 2.137893167937832e-01, 2.163146505419038e-01, 2.265572492861839e+00, 1.664901335791124e+00, 2.265572492861841e+00, 1.664901335791128e+00, -9.226307381246335e-02, -9.174267741967257e-02, -9.153797982825858e-02, -9.107383733855842e-02, -9.200837245635007e-02, -9.153087583943238e-02, -9.224462956969992e-02, -9.173941152864969e-02, -9.214725385355761e-02, -9.165549413959108e-02, -9.214725385355761e-02, -9.165549413959108e-02, -9.120933485115636e-02, -9.072404856886340e-02, -5.718546551104944e-02, -5.704302444825732e-02, -7.198255000462228e-02, -7.179719741489007e-02, -8.376055730124714e-02, -8.339210536047172e-02, -7.838174100227743e-02, -7.801860684660138e-02, -7.838174100227743e-02, -7.801860684660138e-02, -9.364183329454678e-02, -9.368397257781677e-02, 1.312748819560393e-02, 1.282332606896042e-02, -1.365933144736070e-02, -1.439497612049660e-02, -5.646238547288188e-02, -5.614519027395664e-02, -3.737306693734346e-02, -3.774035173406447e-02, -3.737306693734347e-02, -3.774035173406451e-02, -5.755547438124740e-02, -5.745731224761969e-02, 4.451169063383966e-01, 4.417755420307808e-01, 3.267799514769750e-01, 3.120638182197562e-01, -6.640129760796359e-02, -6.555232611175076e-02, 1.476825810136276e-01, 1.232972325530993e-01, 1.476825810136275e-01, 1.232972325530993e-01, 1.398268818905959e+00, 1.335603870006338e+00, 5.703108100970751e+00, 4.275017585027002e+00, 3.567523298402103e+00, 3.250672333643996e+00, 1.507498816358390e-01, 1.490979515478382e-01, 1.669656878290138e+00, 1.783998690270071e+00, 1.669656878290137e+00, 1.783998690270071e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lm_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.546175013573846e-09, -2.401445042776269e-10, -6.546208113507053e-09, -6.546094825508718e-09, -2.401502145091399e-10, -6.546150640004082e-09, -6.545817493636534e-09, -2.401596517267837e-10, -6.545755789783956e-09, -6.546713457855517e-09, -2.400750285509818e-10, -6.546909275655912e-09, -6.546114878107202e-09, -2.401216358838272e-10, -6.546442493607803e-09, -6.546114878107202e-09, -2.401216358838272e-10, -6.546442493607803e-09, -9.217226343294195e-06, -1.426200643134740e-07, -9.217725510279847e-06, -9.216973621698393e-06, -1.423433698887634e-07, -9.217543613156539e-06, -9.211707685611472e-06, -1.359306984314305e-07, -9.210954744668532e-06, -9.214998812313211e-06, -1.471810290340708e-07, -9.214485653626293e-06, -9.223189965935021e-06, -1.423074424267900e-07, -9.209505173251281e-06, -9.223189965935021e-06, -1.423074424267900e-07, -9.209505173251281e-06, -5.625922818338107e-03, 2.069917101371605e-03, -5.521350630547358e-03, -5.678552059155764e-03, 2.047913068460810e-03, -5.549545529974237e-03, -6.546638251205126e-03, 1.488858088031971e-03, -6.751056960306152e-03, -6.455315718183753e-03, 1.454742706271872e-03, -6.393410350698779e-03, -5.615469999528545e-03, 1.487012418756689e-03, -7.518412697791882e-03, -5.615469999528545e-03, 1.487012418756689e-03, -7.518412697791882e-03, -1.399496604971604e+00, 4.169599261554427e-01, -1.171862823095291e+00, -1.319389258996377e+00, 4.234296750144714e-01, -1.075332577333783e+00, -3.294220486744983e-03, 1.061836198455871e-03, -2.820346433699231e-03, -4.364095991221955e+00, 4.733848185080892e-01, -4.118649717661864e+00, -1.126625491270365e+00, 4.520229367085136e-01, -1.610304632463066e+01, -1.126625491270366e+00, 4.520229367085126e-01, -1.610304632463065e+01, -1.151782319971748e+06, -4.774783607049694e+03, -9.038760367588014e+05, -9.557213248638252e+05, -4.874567220412471e+03, -7.262986804134586e+05, -1.024027323852105e+03, -5.363498559543040e+01, -8.286927137495992e+02, -8.804946046536816e+06, -5.064988233122585e+03, -9.416921445901684e+06, -1.818231265563178e+06, -6.905028315807170e+03, -1.730888244772300e+07, -1.818231265563178e+06, -6.905028315807189e+03, -1.730888244772298e+07, -1.794272384943540e-06, 4.999139258654314e-08, -1.796016568133273e-06, -1.791414125244363e-06, 5.299124445534825e-08, -1.793203008547935e-06, -1.794128581345964e-06, 5.011349398708580e-08, -1.795905159570715e-06, -1.791639224519978e-06, 5.276128958222597e-08, -1.793387943462313e-06, -1.792820439029770e-06, 5.151468609205282e-08, -1.794595930712352e-06, -1.792820439029770e-06, 5.151468609205282e-08, -1.794595930712352e-06, -9.348400928165753e-05, -4.623474588482163e-06, -9.350243984364305e-05, -9.072819416290228e-05, -4.386316294458941e-06, -9.082463582733983e-05, -9.597118604126678e-05, -5.019250186318475e-06, -9.532737111381187e-05, -9.350942384379699e-05, -4.811062804517577e-06, -9.285576077096004e-05, -9.019350201307904e-05, -4.286173474908950e-06, -9.175295678485494e-05, -9.019350201307904e-05, -4.286173474908950e-06, -9.175295678485494e-05, -7.312857281817839e-03, 7.828966471811229e-03, -7.432545880500492e-03, -2.816029051169068e-03, 1.059040308408326e-02, -2.801316405212114e-03, -1.146034907734189e-02, 1.024422654907594e-02, -9.230462119916211e-03, -6.092254074775987e-03, 1.601499417954251e-02, -4.364195887511936e-03, -5.669743614413421e-03, 7.852467380836666e-03, -7.846968056035132e-03, -5.669743614413423e-03, 7.852467380836666e-03, -7.846968056035132e-03, -1.978243630381451e+01, -3.015009200417945e-01, -1.905111286730294e+01, -1.411358051875871e+00, 1.621108142807716e-01, -1.381934110873144e+00, -2.962030661493419e+01, -6.100945956220271e-01, -2.408305974324791e+01, -5.962809197078543e-05, 7.757194383225882e-05, -5.980514768185180e-05, -1.115052003823840e+01, 6.040796011737749e-01, -8.792229058322304e+00, -1.115052003823840e+01, 6.040796011737749e-01, -8.792229058322304e+00, -2.779603694797407e+07, -8.337218511201188e+03, -2.383013454680887e+07, -1.027385494750855e+07, -7.098342797554857e+03, -9.674921432161944e+06, -3.294196301123788e+07, -1.886963352320774e+05, -2.620766824086515e+07, -1.334584779406259e+02, -6.751062088214491e+00, -1.303076967233279e+02, -3.021026460684279e+07, -4.805502502177078e+04, -8.510390549669176e+06, -3.021026460684278e+07, -4.805502502177060e+04, -8.510390549669180e+06, -1.351365594721419e-03, 1.960993311271741e-02, -1.180513217953867e-03, -3.670385584567726e-03, 1.549306609667930e-02, -3.493797650822779e-03, -3.012300419473202e-03, 1.662468751817688e-02, -2.837200827538975e-03, -2.363460257336928e-03, 1.777020144905486e-02, -2.191112440181444e-03, -2.702358634424527e-03, 1.716839250625525e-02, -2.528655679527905e-03, -2.702358634424527e-03, 1.716839250625525e-02, -2.528655679527905e-03, -7.707451430407704e-05, 2.472314512978848e-02, 8.604899161699175e-05, -1.766426437354856e-02, 1.057870238475548e-02, -1.727076623278762e-02, -1.292544469453376e-02, 1.233661695516672e-02, -1.259022187410411e-02, -8.590316787040760e-03, 1.482340134416278e-02, -8.367209519137249e-03, -1.074417193939753e-02, 1.348474826317330e-02, -1.048673747866496e-02, -1.074417193939753e-02, 1.348474826317330e-02, -1.048673747866496e-02, -2.568808206163265e-03, 8.323541933202477e-03, -2.525115896020008e-03, -5.393513735790020e-01, 9.457141389618874e-02, -5.259590327591894e-01, -2.483040486767825e-01, 7.224384582909722e-02, -2.371739754927184e-01, -6.711646788048729e-02, 5.096962803890226e-02, -6.509640962314414e-02, -1.286067746537896e-01, 6.280307233714771e-02, -1.288327559778004e-01, -1.286067746537898e-01, 6.280307233714776e-02, -1.288327559778005e-01, -2.433520937208185e-02, 1.556063112997371e-02, -2.346562605025269e-02, -1.105848350593514e+03, -6.080425183763196e+01, -1.076911127340315e+03, -3.383137740659713e+02, -1.964207365272331e+01, -2.977770103900158e+02, -6.974632710680394e-02, 7.910648228927844e-02, -6.339489754319196e-02, -5.503770869702801e+01, -5.988769016919097e-01, -4.433536522960722e+01, -5.503770869702801e+01, -5.988769016919120e-01, -4.433536522960723e+01, -2.756788202989838e+05, -2.300511706625834e+03, -2.392297428969658e+05, -1.960423481419825e+09, -1.107230217603906e+05, -1.942603199216475e+09, -1.143799805368095e+08, -3.816678393457348e+04, -8.938989938220379e+07, -6.570199243895738e+01, -1.484694802110565e+00, -6.162092438222746e+01, -3.753627394667469e+07, -7.457721771718870e+04, -1.206137321175195e+07, -3.753627394667481e+07, -7.457721771718895e+04, -1.206137321175200e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
