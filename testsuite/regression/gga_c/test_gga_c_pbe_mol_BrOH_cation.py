
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_mol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.451259711816456e-02, -4.451342490295808e-02, -4.451577727517664e-02, -4.450348996875575e-02, -4.451011659022937e-02, -4.451011659022937e-02, -3.566072633543561e-02, -3.566577464676446e-02, -3.578273343427972e-02, -3.557977556851509e-02, -3.566678393284572e-02, -3.566678393284572e-02, -2.311338604565695e-02, -2.288562701316585e-02, -1.755978345386959e-02, -1.779549125501534e-02, -1.783912171300621e-02, -1.783912171300621e-02, -4.474665384406606e-03, -4.926603994057019e-03, -2.545983449044419e-02, -1.320800868882574e-03, -1.451885260907920e-03, -1.451885260907920e-03, -3.407163769869603e-09, -4.546262829738246e-09, -5.175448547398501e-06, -2.446115528013937e-10, -6.316855155272250e-10, -6.316855155272250e-10, -5.260521729302610e-02, -5.281871567008163e-02, -5.261401131080225e-02, -5.280248360307746e-02, -5.271382650860171e-02, -5.271382650860171e-02, -1.636587597128135e-02, -1.677473926330263e-02, -1.545804908954382e-02, -1.580470464800207e-02, -1.705274808076070e-02, -1.705274808076070e-02, -3.497155754779677e-02, -5.388845027883613e-02, -3.226161914682925e-02, -4.893647196905562e-02, -3.689401361989070e-02, -3.689401361989066e-02, -2.505160443831457e-04, -2.154123624497642e-03, -1.935260907738497e-04, -6.797682645452371e-02, -6.757292716726288e-04, -6.757292716726288e-04, -9.544160644095467e-11, -2.589967480932931e-10, -4.602774945038079e-10, -4.933861601019718e-05, -4.514642531344704e-10, -4.514642574712791e-10, -5.964681880910299e-02, -5.314430045859729e-02, -5.528466397865762e-02, -5.717120426279478e-02, -5.621423142278911e-02, -5.621423142278911e-02, -6.123227942677838e-02, -2.313325506543956e-02, -3.071005126514514e-02, -4.056103622549138e-02, -3.531627776710023e-02, -3.531627776710023e-02, -5.357543158409220e-02, -4.023972768926298e-03, -7.435188959981021e-03, -1.979390549652856e-02, -1.258908986563550e-02, -1.258908986563551e-02, -2.249392947581664e-02, -3.912285738627216e-06, -1.503859836744087e-05, -2.491564027174879e-02, -1.637080185465274e-04, -1.637080185465309e-04, -1.329684216552773e-08, -2.421912171680918e-12, -4.029529314386604e-11, -1.247826454935271e-04, -4.062241498042907e-10, -4.062241459011628e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_mol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.188846240334719e-01, -1.188847498386132e-01, -1.188857040225776e-01, -1.188859161664269e-01, -1.188891260865673e-01, -1.188888915344515e-01, -1.188719639452371e-01, -1.188727079888536e-01, -1.188807046262317e-01, -1.188819497339280e-01, -1.188807046262317e-01, -1.188819497339280e-01, -1.017079568422085e-01, -1.017092283722250e-01, -1.017149925603584e-01, -1.017164446789562e-01, -1.018815879211859e-01, -1.018796641133878e-01, -1.015956137371235e-01, -1.015943082401575e-01, -1.017346919047828e-01, -1.016998241740551e-01, -1.017346919047828e-01, -1.016998241740551e-01, -7.272944279360788e-02, -7.244997856700205e-02, -7.239677923903469e-02, -7.205602257587190e-02, -6.213674345209717e-02, -6.253389114359133e-02, -6.293241415677468e-02, -6.280682177125621e-02, -6.115253555507714e-02, -6.495990231532288e-02, -6.115253555507714e-02, -6.495990231532288e-02, -2.175457122863608e-02, -2.103549271146633e-02, -2.358295326323232e-02, -2.269337438324499e-02, -7.864309880527025e-02, -7.613697350593038e-02, -7.350228202041086e-03, -7.265479367406691e-03, -7.139446417936096e-03, -1.221896300619963e-02, -7.139446417936126e-03, -1.221896300619963e-02, -2.270766426943066e-08, -2.185116988056355e-08, -3.038022300624570e-08, -2.907838053995237e-08, -3.369672096470530e-05, -3.230502795343030e-05, -1.595635007775242e-09, -1.611835592052113e-09, -3.900112066255405e-09, -5.352340504019646e-09, -3.900112063653319e-09, -5.352340504887008e-09, -1.238003900259360e-01, -1.238303017168728e-01, -1.240113699842659e-01, -1.240421717567052e-01, -1.238088486053489e-01, -1.238393210929388e-01, -1.239956913157326e-01, -1.240257925276104e-01, -1.239077645439185e-01, -1.239382754199004e-01, -1.239077645439185e-01, -1.239382754199004e-01, -6.309121871300216e-02, -6.309381635288794e-02, -6.415257499433002e-02, -6.416684923587802e-02, -6.072466448099663e-02, -6.063993913401272e-02, -6.166590813704347e-02, -6.157603638028035e-02, -6.474843739003922e-02, -6.498179460210038e-02, -6.474843739003922e-02, -6.498179460210038e-02, -8.277058585980604e-02, -8.301873280776997e-02, -8.478773960983677e-02, -8.473281881428792e-02, -8.157130417176307e-02, -7.837522997320369e-02, -8.449494305092051e-02, -8.078695938745609e-02, -8.167534148705456e-02, -8.663039328837854e-02, -8.167534148705455e-02, -8.663039328837853e-02, -1.512417132084502e-03, -1.500598968636511e-03, -1.147082316459452e-02, -1.142233902706360e-02, -1.199600172637870e-03, -1.148995031758972e-03, -1.179766396695210e-01, -1.180449392937310e-01, -4.003182727146256e-03, -3.814739714847723e-03, -4.003182727146256e-03, -3.814739714847723e-03, -6.342324192920279e-10, -6.200300573492834e-10, -1.705905642735643e-09, -1.690598850443641e-09, -3.077949758444706e-09, -2.976090524940300e-09, -3.080380336353032e-04, -3.065191216782145e-04, -3.368289789174982e-09, -2.802042435915125e-09, -3.368289796791503e-09, -2.802042441363240e-09, -7.711009417156160e-02, -7.662715281769562e-02, -8.214818576058548e-02, -8.168518422070621e-02, -8.078713998143140e-02, -8.031549169425280e-02, -7.934671591235103e-02, -7.887219660314773e-02, -8.010561594593137e-02, -7.963255396636863e-02, -8.010561594593137e-02, -7.963255396636863e-02, -7.392261787768852e-02, -7.350746754308288e-02, -6.995571340888843e-02, -6.965116653644639e-02, -7.823055373600288e-02, -7.785193019280406e-02, -8.283304994185567e-02, -8.247569969974215e-02, -8.113386998513726e-02, -8.078704207316285e-02, -8.113386998513726e-02, -8.078704207316285e-02, -8.679458916558208e-02, -8.659696187135629e-02, -1.986356474838456e-02, -1.976468211917828e-02, -3.274285125216626e-02, -3.245246029174799e-02, -6.186059222663347e-02, -6.151627047244298e-02, -4.737480762302548e-02, -4.739052489323260e-02, -4.737480762302550e-02, -4.739052489323264e-02, -6.833881054649471e-02, -6.786580434926760e-02, -2.500963910925879e-05, -2.487853090485979e-05, -9.622675970921775e-05, -9.374789735515439e-05, -6.739516358090751e-02, -6.630655106082461e-02, -1.020134013848492e-03, -9.756659644555177e-04, -1.020134013848472e-03, -9.756659644555386e-04, -8.759741379983675e-08, -8.556989518850065e-08, -1.600360689654418e-11, -1.598351988289454e-11, -2.702580426084287e-10, -2.608685317382229e-10, -7.694120440486325e-04, -7.592875625736578e-04, -2.982666463788894e-09, -2.529402540649389e-09, -2.982666454830673e-09, -2.529402536461658e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_mol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_mol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.882826572094369e-10, 3.765653144188737e-10, 1.882826572094369e-10, 1.882863555187431e-10, 3.765727110374861e-10, 1.882863555187431e-10, 1.882918613183579e-10, 3.765837226367158e-10, 1.882918613183579e-10, 1.882370739148459e-10, 3.764741478296917e-10, 1.882370739148459e-10, 1.882673323151641e-10, 3.765346646303282e-10, 1.882673323151641e-10, 1.882673323151641e-10, 3.765346646303282e-10, 1.882673323151641e-10, 1.054898616142178e-06, 2.109797232284356e-06, 1.054898616142178e-06, 1.055133877734538e-06, 2.110267755469075e-06, 1.055133877734538e-06, 1.060464294451279e-06, 2.120928588902559e-06, 1.060464294451279e-06, 1.050238246768515e-06, 2.100476493537030e-06, 1.050238246768515e-06, 1.055055343061797e-06, 2.110110686123594e-06, 1.055055343061797e-06, 1.055055343061797e-06, 2.110110686123594e-06, 1.055055343061797e-06, 1.749429498459165e-03, 3.498858996918330e-03, 1.749429498459165e-03, 1.733250378146750e-03, 3.466500756293501e-03, 1.733250378146750e-03, 1.338742253015159e-03, 2.677484506030317e-03, 1.338742253015159e-03, 1.310916223907258e-03, 2.621832447814515e-03, 1.310916223907258e-03, 1.331783606723324e-03, 2.663567213446650e-03, 1.331783606723324e-03, 1.331783606723324e-03, 2.663567213446650e-03, 1.331783606723324e-03, 1.246994734818727e-01, 2.493989469637455e-01, 1.246994734818727e-01, 1.332593624199666e-01, 2.665187248399331e-01, 1.332593624199666e-01, 9.544424632085700e-04, 1.908884926417140e-03, 9.544424632085700e-04, 8.094763280534102e-02, 1.618952656106820e-01, 8.094763280534102e-02, 6.894385827916090e-02, 1.378877165583219e-01, 6.894385827916090e-02, 6.894385827916108e-02, 1.378877165583220e-01, 6.894385827916108e-02, 2.683826746558843e-03, 5.367653492975471e-03, 2.683826746558843e-03, 3.157044218925073e-03, 6.314088437880206e-03, 3.157044218925073e-03, 1.637291418540146e-02, 3.274582837080147e-02, 1.637291418540146e-02, 9.529501472813189e-04, 1.905900294953562e-03, 9.529501472813189e-04, 1.398343334665790e-03, 2.796686669330543e-03, 1.398343334665790e-03, 1.398343333618472e-03, 2.796686666451386e-03, 1.398343333618472e-03, 2.861668970785222e-07, 5.723337941570443e-07, 2.861668970785222e-07, 2.881741798612002e-07, 5.763483597224003e-07, 2.881741798612002e-07, 2.862471380387900e-07, 5.724942760775800e-07, 2.862471380387900e-07, 2.880189646042378e-07, 5.760379292084757e-07, 2.880189646042378e-07, 2.871877700926897e-07, 5.743755401853794e-07, 2.871877700926897e-07, 2.871877700926897e-07, 5.743755401853794e-07, 2.871877700926897e-07, 5.429690616925812e-06, 1.085938123385162e-05, 5.429690616925812e-06, 5.435152674089100e-06, 1.087030534817820e-05, 5.435152674089100e-06, 5.121216667848167e-06, 1.024243333569634e-05, 5.121216667848167e-06, 5.127340016575536e-06, 1.025468003315107e-05, 5.127340016575536e-06, 5.588434254799198e-06, 1.117686850959839e-05, 5.588434254799198e-06, 5.588434254799198e-06, 1.117686850959839e-05, 5.588434254799198e-06, 6.289285521236765e-03, 1.257857104247353e-02, 6.289285521236765e-03, 8.720990025833862e-03, 1.744198005166773e-02, 8.720990025833862e-03, 8.103784584227409e-03, 1.620756916845482e-02, 8.103784584227409e-03, 1.317860787141592e-02, 2.635721574283183e-02, 1.317860787141592e-02, 6.346014084450491e-03, 1.269202816890098e-02, 6.346014084450491e-03, 6.346014084450491e-03, 1.269202816890098e-02, 6.346014084450491e-03, 4.207887343660672e-02, 8.415774687321310e-02, 4.207887343660672e-02, 4.213402808081413e-02, 8.426805616162830e-02, 4.213402808081413e-02, 4.240841282924311e-02, 8.481682565848619e-02, 4.240841282924311e-02, 6.681652451064734e-05, 1.336330490212947e-04, 6.681652451064734e-05, 8.332050015297120e-02, 1.666410003059426e-01, 8.332050015297120e-02, 8.332050015297120e-02, 1.666410003059426e-01, 8.332050015297120e-02, 9.291164022742404e-04, 1.858232804931570e-03, 9.291164022742404e-04, 1.171647770095186e-03, 2.343295540059957e-03, 1.171647770095186e-03, 1.167278474704693e-02, 2.334556949087866e-02, 1.167278474704693e-02, 4.057258869527288e-02, 8.114517739054626e-02, 4.057258869527288e-02, 4.467343575601893e-03, 8.934687149812862e-03, 4.467343575601893e-03, 4.467343580049862e-03, 8.934687156868786e-03, 4.467343580049862e-03, 1.537466263427103e-02, 3.074932526854206e-02, 1.537466263427103e-02, 1.270778472443602e-02, 2.541556944887205e-02, 1.270778472443602e-02, 1.353617535011052e-02, 2.707235070022103e-02, 1.353617535011052e-02, 1.430583414914331e-02, 2.861166829828662e-02, 1.430583414914331e-02, 1.391074419685788e-02, 2.782148839371575e-02, 1.391074419685788e-02, 1.391074419685788e-02, 2.782148839371575e-02, 1.391074419685788e-02, 1.846011661176556e-02, 3.692023322353113e-02, 1.846011661176556e-02, 7.926624332441526e-03, 1.585324866488305e-02, 7.926624332441526e-03, 9.647617708587939e-03, 1.929523541717588e-02, 9.647617708587939e-03, 1.203625076631152e-02, 2.407250153262304e-02, 1.203625076631152e-02, 1.075902807212208e-02, 2.151805614424417e-02, 1.075902807212208e-02, 1.075902807212208e-02, 2.151805614424417e-02, 1.075902807212208e-02, 6.874086803146253e-03, 1.374817360629250e-02, 6.874086803146253e-03, 3.326223947306706e-02, 6.652447894613407e-02, 3.326223947306706e-02, 3.304549506898807e-02, 6.609099013797613e-02, 3.304549506898807e-02, 3.453235185400938e-02, 6.906470370801876e-02, 3.453235185400938e-02, 3.575395720702793e-02, 7.150791441405585e-02, 3.575395720702793e-02, 3.575395720702795e-02, 7.150791441405591e-02, 3.575395720702795e-02, 1.138755900906894e-02, 2.277511801813789e-02, 1.138755900906894e-02, 1.344035083435996e-02, 2.688070166871296e-02, 1.344035083435996e-02, 2.073046419424396e-02, 4.146092838848897e-02, 2.073046419424396e-02, 5.742963857483691e-02, 1.148592771496738e-01, 5.742963857483691e-02, 7.216552725998571e-02, 1.443310545199706e-01, 7.216552725998571e-02, 7.216552725998540e-02, 1.443310545199714e-01, 7.216552725998540e-02, 3.347285483189353e-03, 6.694570966249526e-03, 3.347285483189353e-03, 1.270453768885769e-03, 2.540907520542279e-03, 1.270453768885769e-03, 1.590147864545479e-03, 3.180295727972646e-03, 1.590147864545479e-03, 6.587217192126518e-02, 1.317443438425304e-01, 6.587217192126518e-02, 5.702105076533955e-03, 1.140421015846105e-02, 5.702105076533955e-03, 5.702105067482151e-03, 1.140421013350708e-02, 5.702105067482151e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
