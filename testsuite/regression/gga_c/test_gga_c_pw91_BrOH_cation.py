
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pw91_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.798864990301859e-02, -6.798938122238873e-02, -6.799149208452709e-02, -6.798063579886331e-02, -6.798648609715469e-02, -6.798648609715469e-02, -4.963127626340837e-02, -4.963579154046951e-02, -4.974048760476702e-02, -4.955977925377115e-02, -4.963682290473848e-02, -4.963682290473848e-02, -3.040902751436055e-02, -3.018881734268769e-02, -2.483892337467573e-02, -2.510940397580927e-02, -2.512612183170155e-02, -2.512612183170155e-02, -6.939641865734047e-03, -7.547016247249998e-03, -3.320212328890839e-02, -2.249278507582154e-03, -2.439787990289169e-03, -2.439787990289176e-03, -5.468142654820041e-09, -7.301761651042071e-09, -8.762231439722254e-06, -3.900821805326304e-10, -1.010054877844530e-09, -1.010054877844530e-09, -6.639639959941589e-02, -6.657456798180302e-02, -6.640374950168651e-02, -6.656103474908752e-02, -6.648704462915017e-02, -6.648704462915017e-02, -2.778088183734270e-02, -2.827372607169118e-02, -2.671737956966305e-02, -2.714487039902094e-02, -2.858210675413268e-02, -2.858210675413268e-02, -4.042824297652319e-02, -5.629645867081860e-02, -3.778234038266032e-02, -5.173407870817225e-02, -4.209703033889053e-02, -4.209703033889049e-02, -4.415870236100863e-04, -3.656313348399540e-03, -3.403923093426020e-04, -7.328066488004983e-02, -1.168044448341579e-03, -1.168044448341579e-03, -1.518782554148917e-10, -4.129348503759123e-10, -7.322270511277151e-10, -8.536294185323978e-05, -7.193205983115070e-10, -7.193205961431026e-10, -6.049026915729618e-02, -5.530035122731355e-02, -5.702031553555582e-02, -5.852923275960058e-02, -5.776486984887844e-02, -5.776486984887844e-02, -6.158335871676444e-02, -2.929420568861855e-02, -3.624539783464907e-02, -4.472287410130180e-02, -4.026512854175681e-02, -4.026512854175681e-02, -5.627273831387426e-02, -6.560192345558560e-03, -1.125561430000278e-02, -2.500655408873505e-02, -1.741301462244872e-02, -1.741301462244872e-02, -2.840979953276948e-02, -6.611738860684557e-06, -2.581411208484041e-05, -2.956738965501668e-02, -2.842023514065782e-04, -2.842023514065817e-04, -2.146462237638536e-08, -3.834640396015165e-12, -6.398509912013128e-11, -2.164906458994899e-04, -6.468166377938261e-10, -6.468166395285496e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pw91_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.342003235922819e-01, -1.342005002756475e-01, -1.342009924410711e-01, -1.342012903783692e-01, -1.342034198170264e-01, -1.342030904152337e-01, -1.341919033716026e-01, -1.341929483978601e-01, -1.341973861678734e-01, -1.341991348582761e-01, -1.341973861678734e-01, -1.341991348582761e-01, -1.103562576914673e-01, -1.103578456769458e-01, -1.103604126008065e-01, -1.103622260493154e-01, -1.104615076448671e-01, -1.104591072744003e-01, -1.102912196923011e-01, -1.102895882475869e-01, -1.103842095107304e-01, -1.103406658958784e-01, -1.103842095107304e-01, -1.103406658958784e-01, -7.869074385988006e-02, -7.835875744300047e-02, -7.850676620595459e-02, -7.810109125655106e-02, -7.178559601351168e-02, -7.228784347847568e-02, -7.253122922557596e-02, -7.237277572225077e-02, -7.017038567393305e-02, -7.496663157958119e-02, -7.017038567393305e-02, -7.496663157958119e-02, -3.019573152029902e-02, -2.915762022565010e-02, -3.217090038353005e-02, -3.090593628239104e-02, -8.427260170187813e-02, -8.131823556821267e-02, -1.184046237904733e-02, -1.170140900154702e-02, -1.118762515885405e-02, -1.934240485461314e-02, -1.118762515885410e-02, -1.934240485461318e-02, -3.646626752894171e-08, -3.509282286278469e-08, -4.882502703445106e-08, -4.673590213793753e-08, -5.706202904279211e-05, -5.470714226409521e-05, -2.545683792903720e-09, -2.571501704514407e-09, -6.240338997712952e-09, -8.558476850828445e-09, -6.240339001182399e-09, -8.558476854297892e-09, -1.273963741956881e-01, -1.274313120370956e-01, -1.275388936376410e-01, -1.275748348766380e-01, -1.274019668636265e-01, -1.274375582563937e-01, -1.275284627553947e-01, -1.275635892296844e-01, -1.274688409111921e-01, -1.275044603215433e-01, -1.274688409111921e-01, -1.275044603215433e-01, -8.220903518330232e-02, -8.221285277717286e-02, -8.296587091886058e-02, -8.298671225424903e-02, -8.061636816224536e-02, -8.048976338108925e-02, -8.130790123855622e-02, -8.117439667661511e-02, -8.326157971952838e-02, -8.360057924405996e-02, -8.326157971952838e-02, -8.360057924405996e-02, -8.234279634890321e-02, -8.261060794353965e-02, -8.265787296795393e-02, -8.260194422676738e-02, -8.188316279564292e-02, -7.840424408308030e-02, -8.234205371081341e-02, -7.854490817464532e-02, -8.060147671646496e-02, -8.590442601949909e-02, -8.060147671646496e-02, -8.590442601949906e-02, -2.618195234513455e-03, -2.597607399290576e-03, -1.804758639206368e-02, -1.796934252633876e-02, -2.078672549715360e-03, -1.990530288883584e-03, -1.151780469486476e-01, -1.152490249457324e-01, -6.675954602614086e-03, -6.358008161488551e-03, -6.675954602614086e-03, -6.358008161488551e-03, -1.009608985556068e-09, -9.870216806997152e-10, -2.720976339477048e-09, -2.696587836541119e-09, -4.897952014292761e-09, -4.736007445426671e-09, -5.301751578506882e-04, -5.275563572496242e-04, -5.367952715169171e-09, -4.466520341978768e-09, -5.367952708040542e-09, -4.466520335283820e-09, -7.589246133118388e-02, -7.540658953458135e-02, -8.015076197493305e-02, -7.968020518173886e-02, -7.901004257754007e-02, -7.853257562088672e-02, -7.779460311827879e-02, -7.731565494402934e-02, -7.843707886258781e-02, -7.795891023673873e-02, -7.843707886258781e-02, -7.795891023673873e-02, -7.323246626119728e-02, -7.281606700772685e-02, -7.399080143533612e-02, -7.363950473662934e-02, -7.878091734031246e-02, -7.836661702560919e-02, -8.101549115143183e-02, -8.064111803553896e-02, -8.028476872179333e-02, -7.991391620137143e-02, -8.028476872179333e-02, -7.991391620137143e-02, -8.455419926087433e-02, -8.435239822693665e-02, -2.904473215734116e-02, -2.889454269714301e-02, -4.289846312828609e-02, -4.249660892402100e-02, -6.586802960124445e-02, -6.547082573990508e-02, -5.537935388389634e-02, -5.539907332096539e-02, -5.537935388389635e-02, -5.539907332096538e-02, -7.227964207409156e-02, -7.173496507760460e-02, -4.228858147703879e-05, -4.206709580685427e-05, -1.649681250027732e-04, -1.607177927456860e-04, -6.848251238492126e-02, -6.728661275265907e-02, -1.747106338909978e-03, -1.670604480568053e-03, -1.747106338909943e-03, -1.670604480568032e-03, -1.415212759002423e-07, -1.382511216113901e-07, -2.534206943779734e-11, -2.531027445014769e-11, -4.292481525165768e-10, -4.143456993301746e-10, -1.320065595693000e-03, -1.302629304255123e-03, -4.750297595559829e-09, -4.029143924925917e-09, -4.750297594407864e-09, -4.029143923557112e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pw91_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.624601700242133e-10, 3.249203400484267e-10, 1.624601700242133e-10, 1.624627078077025e-10, 3.249254156154051e-10, 1.624627078077025e-10, 1.624656063727564e-10, 3.249312127455129e-10, 1.624656063727564e-10, 1.624280306220658e-10, 3.248560612441316e-10, 1.624280306220658e-10, 1.624489082726039e-10, 3.248978165452077e-10, 1.624489082726039e-10, 1.624489082726039e-10, 3.248978165452077e-10, 1.624489082726039e-10, 9.410924641134089e-07, 1.882184928226818e-06, 9.410924641134089e-07, 9.412683023847849e-07, 1.882536604769570e-06, 9.412683023847849e-07, 9.452345176628236e-07, 1.890469035325647e-06, 9.452345176628236e-07, 9.374829673240349e-07, 1.874965934648070e-06, 9.374829673240349e-07, 9.411918585841140e-07, 1.882383717168228e-06, 9.411918585841140e-07, 9.411918585841140e-07, 1.882383717168228e-06, 9.411918585841140e-07, 1.656720284427719e-03, 3.313440568855438e-03, 1.656720284427719e-03, 1.646044675306161e-03, 3.292089350612322e-03, 1.646044675306161e-03, 1.377251697139329e-03, 2.754503394278657e-03, 1.377251697139329e-03, 1.343677710317352e-03, 2.687355420634704e-03, 1.343677710317352e-03, 1.362429909569782e-03, 2.724859819139565e-03, 1.362429909569782e-03, 1.362429909569782e-03, 2.724859819139565e-03, 1.362429909569782e-03, 1.651450875385438e-01, 3.302901750770876e-01, 1.651450875385438e-01, 1.729420904944182e-01, 3.458841809888365e-01, 1.729420904944182e-01, 8.865420223354523e-04, 1.773084044670905e-03, 8.865420223354523e-04, 1.273367225709676e-01, 2.546734451419353e-01, 1.273367225709676e-01, 1.052924386198120e-01, 2.105848772396240e-01, 1.052924386198120e-01, 1.052924386198124e-01, 2.105848772396247e-01, 1.052924386198124e-01, 4.306676896869872e-03, 8.613353793739745e-03, 4.306676896869872e-03, 5.069751899494540e-03, 1.013950379898908e-02, 5.069751899494540e-03, 2.761588619218649e-02, 5.523177238437298e-02, 2.761588619218649e-02, 1.519602980405449e-03, 3.039205960810898e-03, 1.519602980405449e-03, 2.235769757024682e-03, 4.471539514049365e-03, 2.235769757024682e-03, 2.235769756347291e-03, 4.471539512694581e-03, 2.235769756347291e-03, 2.374562886918070e-07, 4.749125773836140e-07, 2.374562886918070e-07, 2.389845597018465e-07, 4.779691194036931e-07, 2.389845597018465e-07, 2.375172190359184e-07, 4.750344380718369e-07, 2.375172190359184e-07, 2.388662134513570e-07, 4.777324269027139e-07, 2.388662134513570e-07, 2.382335348709421e-07, 4.764670697418842e-07, 2.382335348709421e-07, 2.382335348709421e-07, 4.764670697418842e-07, 2.382335348709421e-07, 6.158061016208205e-06, 1.231612203241641e-05, 6.158061016208205e-06, 6.108571274139024e-06, 1.221714254827805e-05, 6.108571274139024e-06, 5.936479405287240e-06, 1.187295881057448e-05, 5.936479405287240e-06, 5.894780512428772e-06, 1.178956102485754e-05, 5.894780512428772e-06, 6.241094033127091e-06, 1.248218806625418e-05, 6.241094033127091e-06, 6.241094033127091e-06, 1.248218806625418e-05, 6.241094033127091e-06, 5.332574161118499e-03, 1.066514832223700e-02, 5.332574161118499e-03, 6.986642946711664e-03, 1.397328589342333e-02, 6.986642946711664e-03, 6.960229421099402e-03, 1.392045884219881e-02, 6.960229421099402e-03, 1.061192503370057e-02, 2.122385006740113e-02, 1.061192503370057e-02, 5.327194311226508e-03, 1.065438862245302e-02, 5.327194311226508e-03, 5.327194311226508e-03, 1.065438862245302e-02, 5.327194311226508e-03, 7.198397792496078e-02, 1.439679558499215e-01, 7.198397792496078e-02, 6.424969944793169e-02, 1.284993988958634e-01, 6.424969944793169e-02, 7.268852198086537e-02, 1.453770439617308e-01, 7.268852198086537e-02, 5.355581380754803e-05, 1.071116276150960e-04, 5.355581380754803e-05, 1.365422757566500e-01, 2.730845515133000e-01, 1.365422757566500e-01, 1.365422757566500e-01, 2.730845515133000e-01, 1.365422757566500e-01, 1.478477515959766e-03, 2.956955031919532e-03, 1.478477515959766e-03, 1.867946227292418e-03, 3.735892454584835e-03, 1.867946227292418e-03, 1.856824914585224e-02, 3.713649829170447e-02, 1.856824914585224e-02, 6.935203233809605e-02, 1.387040646761921e-01, 6.935203233809605e-02, 7.117385205785221e-03, 1.423477041157044e-02, 7.117385205785221e-03, 7.117385198455240e-03, 1.423477039691048e-02, 7.117385198455240e-03, 1.201978893974263e-02, 2.403957787948525e-02, 1.201978893974263e-02, 1.017195585703731e-02, 2.034391171407463e-02, 1.017195585703731e-02, 1.079522817211340e-02, 2.159045634422680e-02, 1.079522817211340e-02, 1.134662501491634e-02, 2.269325002983267e-02, 1.134662501491634e-02, 1.106885529046515e-02, 2.213771058093030e-02, 1.106885529046515e-02, 1.106885529046515e-02, 2.213771058093030e-02, 1.106885529046515e-02, 1.442608093371307e-02, 2.885216186742613e-02, 1.442608093371307e-02, 7.360302331286561e-03, 1.472060466257312e-02, 7.360302331286561e-03, 8.356705425658776e-03, 1.671341085131755e-02, 8.356705425658776e-03, 9.904447055102650e-03, 1.980889411020530e-02, 9.904447055102650e-03, 9.059395092229902e-03, 1.811879018445980e-02, 9.059395092229902e-03, 9.059395092229902e-03, 1.811879018445980e-02, 9.059395092229902e-03, 5.515407955668624e-03, 1.103081591133725e-02, 5.515407955668624e-03, 4.650462911561229e-02, 9.300925823122458e-02, 4.650462911561229e-02, 4.057063067939954e-02, 8.114126135879908e-02, 4.057063067939954e-02, 3.266538760716723e-02, 6.533077521433446e-02, 3.266538760716723e-02, 3.821398819005663e-02, 7.642797638011327e-02, 3.821398819005663e-02, 3.821398819005666e-02, 7.642797638011331e-02, 3.821398819005666e-02, 1.059754268736081e-02, 2.119508537472161e-02, 1.059754268736081e-02, 2.264011737029667e-02, 4.528023474059335e-02, 2.264011737029667e-02, 3.535548235143706e-02, 7.071096470287412e-02, 3.535548235143706e-02, 5.090140872213308e-02, 1.018028174442661e-01, 5.090140872213308e-02, 1.223743095772636e-01, 2.447486191545272e-01, 1.223743095772636e-01, 1.223743095772649e-01, 2.447486191545298e-01, 1.223743095772649e-01, 5.402102370466112e-03, 1.080420474093222e-02, 5.402102370466112e-03, 2.011510265862557e-03, 4.023020531725113e-03, 2.011510265862557e-03, 2.524946426682869e-03, 5.049892853365737e-03, 2.524946426682869e-03, 1.120055559977087e-01, 2.240111119954173e-01, 1.120055559977087e-01, 9.078695126504405e-03, 1.815739025300881e-02, 9.078695126504405e-03, 9.078695122927586e-03, 1.815739024585517e-02, 9.078695122927586e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
