
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_scan_e0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.134944690293442e-02, -6.134999466778850e-02, -6.135164927002892e-02, -6.134269607530374e-02, -6.134974237065594e-02, -6.134974237065594e-02, -5.262577894580561e-02, -5.262863213379509e-02, -5.270728805519963e-02, -5.257246250892481e-02, -5.262725715952178e-02, -5.262725715952178e-02, -3.752025102247050e-02, -3.738663374333338e-02, -3.395301616674538e-02, -3.415664929224052e-02, -3.747204117072377e-02, -3.747204117072377e-02, -2.129659599925863e-02, -2.176423962010937e-02, -4.250433792145853e-02, -1.487565231673168e-02, -2.144106278400642e-02, -2.144106278400642e-02, -1.144394394218455e-03, -1.210857663103432e-03, -5.180721930816628e-03, -4.362077587983269e-04, -1.201472571811988e-03, -1.201472571811988e-03, -6.579725464756740e-02, -6.595367061489808e-02, -6.581284598651230e-02, -6.593446517619321e-02, -6.587785016238666e-02, -6.587785016238666e-02, -3.767386594257899e-02, -3.798220347292346e-02, -3.725973527920600e-02, -3.749791292380867e-02, -3.843610424182520e-02, -3.843610424182520e-02, -4.474525615452785e-02, -5.753290371513389e-02, -4.356488109362944e-02, -5.299862699222425e-02, -4.653779534755734e-02, -4.653779534755734e-02, -1.080698103032492e-02, -1.812244343090993e-02, -1.092759992578260e-02, -7.394806957772165e-02, -1.284749459319600e-02, -1.284749459319600e-02, -4.194969744329087e-04, -4.983897282977993e-04, -3.914923799069321e-04, -7.276508953201228e-03, -4.644282480860155e-04, -4.644282480860155e-04, -6.172680734939209e-02, -5.734002641733429e-02, -5.879209308060284e-02, -6.000249437682354e-02, -5.938715125670798e-02, -5.938715125670798e-02, -6.183081751824305e-02, -3.793328094536580e-02, -4.253116256424008e-02, -4.810727787756914e-02, -4.513287625061866e-02, -4.513287625061866e-02, -5.772076514864419e-02, -2.148094702458496e-02, -2.527942436394397e-02, -3.339411002166518e-02, -2.906198451113488e-02, -2.906198451113488e-02, -3.644159463033574e-02, -4.671828855863610e-03, -6.380714043868872e-03, -3.577678874520435e-02, -9.526171584252093e-03, -9.526171584252093e-03, -1.335309717135241e-03, -9.433991922759661e-05, -2.220020054942967e-04, -9.386843065878463e-03, -3.942845032168893e-04, -3.942845032168932e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_scan_e0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.179309608915232e-01, -1.179318522690116e-01, -1.179345511710503e-01, -1.179199810921983e-01, -1.179314416531816e-01, -1.179314416531816e-01, -9.966569035825498e-02, -9.967008987680515e-02, -9.979144403175585e-02, -9.958415989798969e-02, -9.966798680441430e-02, -9.966798680441430e-02, -6.872822552969712e-02, -6.853455341090131e-02, -6.327389287492967e-02, -6.362668458166650e-02, -6.865842193583953e-02, -6.865842193583953e-02, -3.889124880309388e-02, -3.964733106528926e-02, -7.660528521034891e-02, -2.761726069318951e-02, -3.912548735576085e-02, -3.912548735576085e-02, -2.187699210473059e-03, -2.312973996100747e-03, -9.680974547571934e-03, -8.434894130068924e-04, -2.295517995510119e-03, -2.295517995510119e-03, -1.202137291472600e-01, -1.204138465756970e-01, -1.202337139833558e-01, -1.203893188902680e-01, -1.203169208524334e-01, -1.203169208524334e-01, -7.278119370530241e-02, -7.335720839035632e-02, -7.201658913972335e-02, -7.246381977797782e-02, -7.418425272381336e-02, -7.418425272381336e-02, -7.525789070889359e-02, -8.004999858509071e-02, -7.358549383511770e-02, -7.800590578453741e-02, -7.710360821429844e-02, -7.710360821429844e-02, -2.010647639796649e-02, -3.365414349929115e-02, -2.033149225407168e-02, -1.132746129077639e-01, -2.388430402396145e-02, -2.388430402396145e-02, -8.116185816254839e-04, -9.623544382660501e-04, -7.593345859604389e-04, -1.356463766642961e-02, -8.981450664601046e-04, -8.981450664601045e-04, -7.516138142576020e-02, -7.807734730373722e-02, -7.736131941683762e-02, -7.657844575789158e-02, -7.699787129529104e-02, -7.699787129529104e-02, -7.343595731683657e-02, -6.711631826692513e-02, -7.209482531419047e-02, -7.602170862929693e-02, -7.422904292166838e-02, -7.422904292166838e-02, -8.162117885328914e-02, -3.978563657068746e-02, -4.639465785591426e-02, -5.874222242657671e-02, -5.246693118631197e-02, -5.246693118631197e-02, -6.447924642322321e-02, -8.733237498989290e-03, -1.189790842649361e-02, -6.045609112943112e-02, -1.773663367606294e-02, -1.773663367606294e-02, -2.545251479719858e-03, -1.850813562864587e-04, -4.325471089941315e-04, -1.748163390639098e-02, -7.643459065956522e-04, -7.643459065956553e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_scan_e0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.427959962096322e-10, 1.427988094655951e-10, 1.428035334466817e-10, 1.427576315337583e-10, 1.427975452371380e-10, 1.427975452371380e-10, 7.393487993740355e-07, 7.394853497242031e-07, 7.431027382309292e-07, 7.361253792344176e-07, 7.394036964096006e-07, 7.394036964096006e-07, 9.978579347179183e-04, 9.897934001917650e-04, 7.894852307862058e-04, 7.752906105696309e-04, 9.949674714740545e-04, 9.949674714740545e-04, 1.216642819079086e-01, 1.234865346539565e-01, 6.182271263566823e-04, 1.694152699570271e-01, 1.223227106690447e-01, 1.223227106690447e-01, 3.462881556645691e+01, 3.197193996539312e+01, 1.471404574407898e+00, 9.917119971419481e+01, 3.336108214553298e+01, 3.336108214553298e+01, 2.161069622263713e-07, 2.177498574742559e-07, 2.162692290615131e-07, 2.175465654136864e-07, 2.169538172142041e-07, 2.169538172142041e-07, 3.977580208671816e-06, 3.958208903223393e-06, 3.870358026260337e-06, 3.855585325260940e-06, 4.110195991260217e-06, 4.110195991260217e-06, 3.985880811674013e-03, 6.404098460327515e-03, 4.764871020015489e-03, 7.787320261814112e-03, 3.773719036887731e-03, 3.773719036887731e-03, 2.589254742614903e-01, 5.913882473115767e-02, 2.945680543413036e-01, 5.071479254901602e-05, 2.338440949286619e-01, 2.338440949286619e-01, 1.093852393720978e+02, 8.728416521128300e+01, 2.750051790985327e+02, 8.209176766625208e-01, 1.306075303689092e+02, 1.306075303689090e+02, 1.078613169890580e-02, 8.527243249856681e-03, 9.230557258811342e-03, 9.850020961961631e-03, 9.531312439028652e-03, 9.531312439028652e-03, 1.288657761603810e-02, 4.602376374092572e-03, 5.602158603882962e-03, 7.170658803395006e-03, 6.298664652246361e-03, 6.298664652246361e-03, 5.053144131522504e-03, 3.315148861246908e-02, 2.489077630485533e-02, 1.953995480476154e-02, 2.215468332872820e-02, 2.215468332872820e-02, 6.850252987806185e-03, 1.506796255020066e+00, 8.821160205122893e-01, 3.464805721919933e-02, 5.285411813268961e-01, 5.285411813268965e-01, 2.183980163480324e+01, 1.048217840619973e+03, 3.346450168748547e+02, 6.635220707159498e-01, 2.180229548807791e+02, 2.180229548807797e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
