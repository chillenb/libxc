
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_apbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.616615881130768e-02, -4.616699269780298e-02, -4.616936257568627e-02, -4.615698467669183e-02, -4.616366014590164e-02, -4.616366014590164e-02, -3.712685363519682e-02, -3.713194182164949e-02, -3.724982043058258e-02, -3.704527943126718e-02, -3.713296670868312e-02, -3.713296670868312e-02, -2.420581673161077e-02, -2.397580160364438e-02, -1.856085467331103e-02, -1.880191794387922e-02, -1.894133174151109e-02, -1.894133174151109e-02, -4.869949754179930e-03, -5.354634122350190e-03, -2.663499817676516e-02, -1.459527769664925e-03, -2.616157135559355e-03, -2.616157135559348e-03, -3.856159850429425e-09, -5.153816612319363e-09, -5.848830183983106e-06, -2.753989544767507e-10, -1.013185692465411e-09, -1.013185692465411e-09, -5.417141592878145e-02, -5.438462458916301e-02, -5.418019882139033e-02, -5.436841549794925e-02, -5.427988051817085e-02, -5.427988051817085e-02, -1.742203121929960e-02, -1.784515638746128e-02, -1.648168870770333e-02, -1.684122161969178e-02, -1.813276355996777e-02, -1.813276355996777e-02, -3.598878882829266e-02, -5.445679975590670e-02, -3.332168155926930e-02, -4.962398277628913e-02, -3.798228594907781e-02, -3.798228594907781e-02, -2.797548109996272e-04, -2.368462568949054e-03, -2.173806346765772e-04, -6.900172081726072e-02, -7.549313515891119e-04, -7.549313515891119e-04, -1.076404888196073e-10, -2.915698827602765e-10, -5.204488333165536e-10, -5.532498655670815e-05, -5.804923944976131e-10, -5.804923944976131e-10, -5.987740495430542e-02, -5.366312597767193e-02, -5.571556965524160e-02, -5.751900565597028e-02, -5.660485084716282e-02, -5.660485084716282e-02, -6.134632636070796e-02, -2.415452961593434e-02, -3.172320927038238e-02, -4.142364031709214e-02, -3.627648039560881e-02, -3.627648039560881e-02, -5.419912418234757e-02, -4.385740865824795e-03, -8.005629455741285e-03, -2.070864293856310e-02, -1.336387939001036e-02, -1.336387939001037e-02, -2.349163079801013e-02, -4.398274504777655e-06, -1.692338272954757e-05, -2.581637445704293e-02, -1.840307894544010e-04, -1.840307894544045e-04, -1.499337778046494e-08, -2.725666740347647e-12, -4.559225642439583e-11, -1.396868696525620e-04, -5.095665054965886e-10, -5.095665076649930e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_apbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.210890702848548e-01, -1.210901702224910e-01, -1.210933036705940e-01, -1.210769755263336e-01, -1.210857807265874e-01, -1.210857807265874e-01, -1.037308467098945e-01, -1.037377232183959e-01, -1.038968651377268e-01, -1.036213025981636e-01, -1.037392267883108e-01, -1.037392267883108e-01, -7.422539019869244e-02, -7.388029297123404e-02, -6.438163465212403e-02, -6.490534661485906e-02, -6.516838209271898e-02, -6.516838209271898e-02, -2.288307130243939e-02, -2.468527103839390e-02, -7.899288973649600e-02, -8.005574559107437e-03, -1.351280314148947e-02, -1.351280314148944e-02, -2.517144564022993e-08, -3.362663604117347e-08, -3.721049524302036e-05, -1.805343975745020e-09, -6.630662523762828e-09, -6.630662524727329e-09, -1.253339021119470e-01, -1.255378143048457e-01, -1.253423322037217e-01, -1.255223568425886e-01, -1.254377518040822e-01, -1.254377518040822e-01, -6.577669961978244e-02, -6.683650043942083e-02, -6.338210841099984e-02, -6.431702545201880e-02, -6.753481466588675e-02, -6.753481466588675e-02, -8.339006006205468e-02, -8.444330452558127e-02, -8.058215202311055e-02, -8.234121997301586e-02, -8.450372450639390e-02, -8.450372450639390e-02, -1.676330653488083e-03, -1.245108938317952e-02, -1.312638154000939e-03, -1.180388333863362e-01, -4.330901049372372e-03, -4.330901049372372e-03, -7.068277163158731e-10, -1.911628046561325e-09, -3.417809694369416e-09, -3.440054058541496e-04, -3.807688049441320e-09, -3.807688047883948e-09, -7.663021201019868e-02, -8.159126482603543e-02, -8.022499823433051e-02, -7.880520112880519e-02, -7.955080266861447e-02, -7.955080266861447e-02, -7.357977389139715e-02, -7.111269769456019e-02, -7.872069621798808e-02, -8.268656633163390e-02, -8.130486991958490e-02, -8.130486991958490e-02, -8.639846989335404e-02, -2.128239767719071e-02, -3.442465162520197e-02, -6.292690720868256e-02, -4.913913310056034e-02, -4.913913310056035e-02, -6.937907713585280e-02, -2.802855236989323e-05, -1.067280684445927e-04, -6.752634953286032e-02, -1.116385513852777e-03, -1.116385513852784e-03, -9.756675341290046e-08, -1.799940022186004e-11, -2.999865682199948e-10, -8.533268378799720e-04, -3.344134522450305e-09, -3.344134523555470e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_apbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.896505199687248e-10, 1.896541645783648e-10, 1.896594828278416e-10, 1.896054932629081e-10, 1.896353263714116e-10, 1.896353263714116e-10, 1.063182335027211e-06, 1.063414406059428e-06, 1.068669768909581e-06, 1.058566955778621e-06, 1.063334507224206e-06, 1.063334507224206e-06, 1.766255733215774e-03, 1.750738567768949e-03, 1.368751000300788e-03, 1.339566877529907e-03, 1.365847723394089e-03, 1.365847723394089e-03, 1.328256947441140e-01, 1.415703416492751e-01, 9.621379244023390e-04, 8.849281753658408e-02, 1.178467481532167e-01, 1.178467481532166e-01, 3.037408202496297e-03, 3.578820055290134e-03, 1.849047020399779e-02, 1.072880006398778e-03, 2.242760794012216e-03, 2.242760795336965e-03, 2.857527495947781e-07, 2.877260347895782e-07, 2.858316028264044e-07, 2.875734210442375e-07, 2.867563630471128e-07, 2.867563630471128e-07, 5.617041299000411e-06, 5.617536125176626e-06, 5.309417320156889e-06, 5.311418047100031e-06, 5.772372039314458e-06, 5.772372039314458e-06, 6.200746285530120e-03, 8.382573538805517e-03, 8.017518118709210e-03, 1.271498788843197e-02, 6.249376304970224e-03, 6.249376304970224e-03, 4.678653124142430e-02, 4.570195246288020e-02, 4.744952181944451e-02, 6.518180812471954e-05, 9.236601025492487e-02, 9.236601025492487e-02, 1.047864147880041e-03, 1.318988166643854e-03, 1.319853913240537e-02, 4.540646454499020e-02, 5.743968351926321e-03, 5.743968354984607e-03, 1.460251684632937e-02, 1.219344917770718e-02, 1.294617014827675e-02, 1.364199689464805e-02, 1.328523925502550e-02, 1.328523925502550e-02, 1.746546204748377e-02, 7.961042178471907e-03, 9.552385769049784e-03, 1.173888762600146e-02, 1.057441392515802e-02, 1.057441392515802e-02, 6.620745266401143e-03, 3.557648829873269e-02, 3.467177826999789e-02, 3.472954541740859e-02, 3.671672959355269e-02, 3.671672959355272e-02, 1.143598165249955e-02, 1.510107735089444e-02, 2.330292193283868e-02, 5.696068323008614e-02, 8.082367692813189e-02, 8.082367692813189e-02, 3.774166460065488e-03, 1.429790618488965e-03, 1.799168968076693e-03, 7.350869497637427e-02, 7.152549788712092e-03, 7.152549786721136e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
