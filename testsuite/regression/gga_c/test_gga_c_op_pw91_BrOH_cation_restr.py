
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_pw91_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.825577169973591e-02, -5.825603536577750e-02, -5.825678918756742e-02, -5.825287500607688e-02, -5.825498544980869e-02, -5.825498544980869e-02, -5.127928055297708e-02, -5.128122942890074e-02, -5.132641181952642e-02, -5.124870722891815e-02, -5.128172083652331e-02, -5.128172083652331e-02, -3.403851159606297e-02, -3.392765005230306e-02, -3.112481164458736e-02, -3.132689456624503e-02, -3.137992406631511e-02, -3.137992406631511e-02, -1.151681942768085e-02, -1.191946777950769e-02, -3.662767483471978e-02, -7.280445853550490e-03, -8.921531389159281e-03, -8.921531389159279e-03, -1.408460146545798e+00, -1.132598409224314e+00, -1.070455502295758e-02, -8.603651482893280e+00, -3.311545335836668e+00, -3.311545335836628e+00, -5.808976841106937e-02, -5.814499333815963e-02, -5.809205357891321e-02, -5.814080932969787e-02, -5.811789492259222e-02, -5.811789492259222e-02, -3.874599864385795e-02, -3.905994563132207e-02, -3.808911250336945e-02, -3.836640478087743e-02, -3.924084865915638e-02, -3.924084865915638e-02, -3.695704094874515e-02, -4.317629400686773e-02, -3.516139088439551e-02, -4.048336649254375e-02, -3.778479513298711e-02, -3.778479513298711e-02, -4.690263981505210e-03, -9.625960436193629e-03, -4.458600941583916e-03, -5.661721416009220e-02, -5.659771545840033e-03, -5.659771545840033e-03, -1.445308701450915e+01, -7.811393857169136e+00, -2.728383587221215e+00, -4.267716853645698e-03, -3.355252855495159e+00, -3.355252855495185e+00, -4.357052267960257e-02, -4.198187386622486e-02, -4.251425368523373e-02, -4.297292472458879e-02, -4.274117731261450e-02, -4.274117731261450e-02, -4.361834834292896e-02, -3.068225741645462e-02, -3.400923048965503e-02, -3.762353149601970e-02, -3.577532041222620e-02, -3.577532041222620e-02, -4.366557404130859e-02, -1.284475139013119e-02, -1.670108694917363e-02, -2.538724263448941e-02, -2.078589632746397e-02, -2.078589632746397e-02, -2.948724034954985e-02, -1.300672756863009e-02, -6.406333119038905e-03, -2.682580161939982e-02, -4.002274857314736e-03, -4.002274857314737e-03, -5.942335625213274e-01, -8.864948563471744e+01, -1.918385231838489e+01, -3.925703894025482e-03, -3.359964476681741e+00, -3.359964476681720e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_pw91_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.201599325958420e-02, -8.201585800817882e-02, -8.201547923966818e-02, -8.201748658165882e-02, -8.201640328309899e-02, -8.201640328309899e-02, -7.804325113143622e-02, -7.804274171200670e-02, -7.803101503431342e-02, -7.805240462127937e-02, -7.804278233495454e-02, -7.804278233495454e-02, -5.904843630752585e-02, -5.900655928028251e-02, -5.758572679350669e-02, -5.779553889580307e-02, -5.779884262953474e-02, -5.779884262953474e-02, -2.511217850643289e-02, -2.585516790315543e-02, -6.190824250212509e-02, -1.544722985788815e-02, -1.962017691968275e-02, -1.962017691968275e-02, 5.889898035303635e+00, 4.744109032646117e+00, 3.370089080278961e-02, 3.546842313755506e+01, 1.374659401705465e+01, 1.374659401705421e+01, -7.739489406532048e-02, -7.735598085420996e-02, -7.739329886104430e-02, -7.735894791798463e-02, -7.737510283835611e-02, -7.737510283835611e-02, -7.224156923977071e-02, -7.246158356323280e-02, -7.181965960481979e-02, -7.202822011003299e-02, -7.255333572301143e-02, -7.255333572301143e-02, -5.632703153467137e-02, -5.450186693089662e-02, -5.503957383861204e-02, -5.318063152058602e-02, -5.640614115552212e-02, -5.640614115552212e-02, -5.749087680676376e-03, -2.114201969460781e-02, -4.414062984127679e-03, -6.779615452542319e-02, -1.075392931353866e-02, -1.075392931353866e-02, 5.934100097846374e+01, 3.221543261186839e+01, 1.130308276390092e+01, 2.734926945532493e-03, 1.389849554989719e+01, 1.389849554989808e+01, -5.154504572253385e-02, -5.298661265552763e-02, -5.250685921395835e-02, -5.208730116366685e-02, -5.229864369124506e-02, -5.229864369124506e-02, -5.045329689200138e-02, -5.313116854977828e-02, -5.411010672454836e-02, -5.387806308808327e-02, -5.415797028768672e-02, -5.415797028768672e-02, -5.550175853638344e-02, -2.821476136749850e-02, -3.518649840398552e-02, -4.555443299227585e-02, -4.084748806232443e-02, -4.084748806232444e-02, -5.139985173181644e-02, 4.358116992881742e-02, 1.387012616960533e-02, -4.514719653469607e-02, -3.380648483579945e-03, -3.380648483579949e-03, 2.501950880246454e+00, 3.598454846696185e+02, 7.853262467688378e+01, -2.126527147467050e-03, 1.391140752576614e+01, 1.391140752576612e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_pw91_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.942843650638014e-11, 5.942835935852922e-11, 5.942656127867303e-11, 5.942773915183058e-11, 5.942732884366063e-11, 5.942732884366063e-11, 4.053946250634205e-07, 4.054325869980296e-07, 4.062627911150384e-07, 4.044452546161167e-07, 4.053923557995449e-07, 4.053923557995449e-07, 7.619568815947062e-04, 7.596597234969193e-04, 6.938008146794738e-04, 6.750053726831672e-04, 6.846910114293901e-04, 6.846910114293901e-04, 8.307464072952069e-02, 8.448372964711573e-02, 4.037000029188795e-04, 8.899379912524941e-02, 9.528825131733874e-02, 9.528825131733870e-02, -1.147803064236788e+06, -8.147652280793804e+05, -2.865008916517023e+01, -3.429311481923950e+07, -7.540271332644673e+06, -7.540271332644600e+06, 7.345178171121335e-08, 7.358810889485253e-08, 7.345683851634726e-08, 7.357719790301642e-08, 7.352148614643773e-08, 7.352148614643773e-08, 3.683884190432399e-06, 3.625277577989753e-06, 3.618932677965114e-06, 3.568453737266639e-06, 3.682849253012238e-06, 3.682849253012238e-06, 2.024827946509260e-03, 2.068307262700611e-03, 2.707457964867540e-03, 3.359413502203279e-03, 1.976683503282294e-03, 1.976683503282294e-03, -2.660818377797098e-03, 4.348615861415110e-02, -5.021152387314940e-02, 1.189298118694082e-05, 9.797578787047720e-02, 9.797578787047720e-02, -1.435060721252039e+08, -3.616581212697218e+07, -7.106286820396382e+07, -1.303099275707453e+00, -3.409493681961494e+07, -3.409493681961699e+07, 3.582667535261666e-03, 3.054032064056213e-03, 3.170173588278759e-03, 3.305020667816413e-03, 3.230813982135227e-03, 3.230813982135227e-03, 4.275592805327403e-03, 3.171952080020083e-03, 3.286824049573054e-03, 3.471069560609456e-03, 3.376784801138009e-03, 3.376784801138009e-03, 1.636742566900474e-03, 2.736553876757612e-02, 2.048538775899912e-02, 1.349820426292321e-02, 1.715245773206514e-02, 1.715245773206516e-02, 4.520894186012953e-03, -3.948677355465774e+01, -5.837849398407097e+00, 1.961196692955662e-02, -1.449240371071323e-01, -1.449240371071320e-01, -1.556141368330584e+05, -4.702008830410285e+10, -7.704042199897804e+08, -2.945837429675198e-01, -4.841551054298993e+07, -4.841551054298934e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
