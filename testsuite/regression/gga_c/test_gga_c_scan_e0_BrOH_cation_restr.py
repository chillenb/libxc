
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_scan_e0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.135070888181667e-02, -6.135133816266105e-02, -6.135312933421219e-02, -6.134378859611376e-02, -6.134882565558033e-02, -6.134882565558033e-02, -5.262924482479367e-02, -5.263278793773643e-02, -5.271493810446580e-02, -5.257282055656281e-02, -5.263355400819584e-02, -5.263355400819584e-02, -3.842722268170801e-02, -3.828407687056481e-02, -3.487237997214943e-02, -3.505900437568506e-02, -3.513704361861332e-02, -3.513704361861332e-02, -1.927856136007957e-02, -1.973713134192998e-02, -4.064320841964385e-02, -1.431222601436294e-02, -1.638634639775765e-02, -1.638634639775765e-02, -5.430585440000861e-04, -5.835013775701926e-04, -3.918579878018915e-03, -2.632775994572000e-04, -3.661189023437551e-04, -3.661189023437551e-04, -6.581360308679944e-02, -6.597508446567123e-02, -6.582025534493559e-02, -6.596280579872400e-02, -6.589573234174201e-02, -6.589573234174201e-02, -3.779141487895205e-02, -3.810851281212348e-02, -3.710496129423631e-02, -3.737833924232779e-02, -3.831039742794151e-02, -3.831039742794151e-02, -4.470563607099139e-02, -5.726130196657228e-02, -4.263810538241772e-02, -5.315791794126009e-02, -4.601687643354654e-02, -4.601687643354654e-02, -9.844480693286957e-03, -1.678865781954786e-02, -9.237993076802915e-03, -7.391768935670111e-02, -1.207944334895312e-02, -1.207944334895312e-02, -1.929042239966437e-04, -2.607793382244641e-04, -2.295089815012110e-04, -6.559740954403713e-03, -2.675485254736960e-04, -2.675485254736960e-04, -6.077887857963597e-02, -5.619306953264617e-02, -5.767394705848239e-02, -5.900206238086805e-02, -5.832561541081106e-02, -5.832561541081106e-02, -6.175945721952603e-02, -3.674822805044660e-02, -4.138331025257048e-02, -4.751232459122402e-02, -4.421383397203943e-02, -4.421383397203943e-02, -5.736379503828962e-02, -1.998471043262984e-02, -2.371726018648843e-02, -3.275929070707177e-02, -2.782521008776955e-02, -2.782521008776955e-02, -3.589518325294686e-02, -3.695705602435254e-03, -5.092720928133442e-03, -3.530544244385334e-02, -8.537508520595188e-03, -8.537508520595189e-03, -8.131266939763821e-04, -5.217764757911660e-05, -1.334726266011812e-04, -8.014725605315662e-03, -2.483932921554124e-04, -2.483932921554146e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_scan_e0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.179330388189830e-01, -1.179340628337865e-01, -1.179369839749740e-01, -1.179217834228057e-01, -1.179299797088996e-01, -1.179299797088996e-01, -9.967120960985217e-02, -9.967667081225609e-02, -9.980328617138595e-02, -9.958487411093239e-02, -9.967794816146114e-02, -9.967794816146114e-02, -7.001520409545622e-02, -6.981402363061280e-02, -6.472915552874878e-02, -6.505291098848440e-02, -6.516356897107715e-02, -6.516356897107715e-02, -3.553708012248361e-02, -3.632168380685419e-02, -7.405098276251249e-02, -2.660156825252233e-02, -3.037786152586952e-02, -3.037786152586952e-02, -1.046588291449482e-03, -1.123648920930454e-03, -7.332620758752003e-03, -5.114506980890040e-04, -7.090339340205108e-04, -7.090339340205109e-04, -1.202372709564793e-01, -1.204438059667047e-01, -1.202458035445690e-01, -1.204281372415956e-01, -1.203424020481826e-01, -1.203424020481826e-01, -7.299806948546247e-02, -7.358969121791423e-02, -7.172933535331685e-02, -7.224360996364369e-02, -7.395501043368624e-02, -7.395501043368624e-02, -7.539078954015709e-02, -8.052159948362084e-02, -7.263596902136581e-02, -7.747370343164292e-02, -7.658326603758875e-02, -7.658326603758875e-02, -1.831168926198270e-02, -3.123167864788057e-02, -1.718546107179562e-02, -1.132984065227924e-01, -2.246734272761856e-02, -2.246734272761856e-02, -3.759987697154723e-04, -5.067686173896973e-04, -4.476491948191839e-04, -1.222530091763973e-02, -5.205961194422326e-04, -5.205961194422325e-04, -7.531383642327127e-02, -7.797673276816927e-02, -7.738271841789997e-02, -7.663699170265231e-02, -7.704233071892158e-02, -7.704233071892158e-02, -7.298362255796119e-02, -6.554837331978179e-02, -7.087838350311047e-02, -7.551930955402353e-02, -7.338166045144358e-02, -7.338166045144358e-02, -8.206752602331306e-02, -3.713572086366979e-02, -4.378954661200515e-02, -5.793957546166097e-02, -5.059916896697355e-02, -5.059916896697355e-02, -6.383872966689966e-02, -6.917992548497012e-03, -9.500423034976039e-03, -6.019458895254476e-02, -1.589936066965442e-02, -1.589936066965442e-02, -1.558065881615429e-03, -1.027844740668034e-04, -2.611845500849283e-04, -1.492918736368653e-02, -4.838106073558800e-04, -4.838106073558819e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_scan_e0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_scan_e0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.427881415419814e-10, 1.427913729404230e-10, 1.427967707680383e-10, 1.427488894420058e-10, 1.427752493427661e-10, 1.427752493427661e-10, 7.393521283657278e-07, 7.395233570836898e-07, 7.434096209434338e-07, 7.359925028224036e-07, 7.394706704880391e-07, 7.394706704880391e-07, 1.056809614104740e-03, 1.048093166549815e-03, 8.465689969207115e-04, 8.273837904744729e-04, 8.421576902192876e-04, 8.421576902192876e-04, 1.075808855889917e-01, 1.089954265007243e-01, 5.844775612826088e-04, 1.476885919807652e-01, 1.350562083894951e-01, 1.350562083894950e-01, 5.393900117419513e+01, 5.112635438737599e+01, 1.653350950989850e+00, 1.287511829023264e+02, 1.019022436551372e+02, 1.019022436551374e+02, 2.158250577405406e-07, 2.175186472943162e-07, 2.158929386856240e-07, 2.173878394290097e-07, 2.166860687248307e-07, 2.166860687248307e-07, 4.001869226523055e-06, 3.981219077064196e-06, 3.835800108278938e-06, 3.817297630833749e-06, 4.075362572185766e-06, 4.075362572185766e-06, 3.749537646008749e-03, 5.940945263420154e-03, 4.744222481968583e-03, 8.637606834231920e-03, 3.832082660489232e-03, 3.832082660489232e-03, 2.476548482632082e-01, 5.908440821878628e-02, 2.991875633607921e-01, 5.033971012554013e-05, 2.359960513153634e-01, 2.359960513153634e-01, 2.354656493959272e+02, 1.480820048611439e+02, 7.302272691183047e+02, 7.551024421716954e-01, 3.323496536951547e+02, 3.323496536951541e+02, 1.107879585226026e-02, 8.628288568102207e-03, 9.369224658379256e-03, 1.007430799596771e-02, 9.710394689718497e-03, 9.710394689718497e-03, 1.355875964668705e-02, 4.561399662832742e-03, 5.580482219742065e-03, 7.360822745536621e-03, 6.356828216283654e-03, 6.356828216283654e-03, 4.666701210170225e-03, 3.291772024491949e-02, 2.414269138659093e-02, 1.903589011099225e-02, 2.146285221236124e-02, 2.146285221236126e-02, 6.481291917959949e-03, 1.686793465312707e+00, 9.559339011619870e-01, 3.098472143358382e-02, 5.486995358959654e-01, 5.486995358959657e-01, 2.592316441893998e+01, 3.424193909825775e+03, 6.598028858490754e+02, 6.100557413281238e-01, 4.375653700554938e+02, 4.375653700554957e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
