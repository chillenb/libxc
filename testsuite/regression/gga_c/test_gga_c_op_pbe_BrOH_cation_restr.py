
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.855638995683369e-02, -5.855665107405088e-02, -5.855739768137218e-02, -5.855352129675256e-02, -5.855561136818019e-02, -5.855561136818019e-02, -5.154201515118317e-02, -5.154399427783935e-02, -5.158986911632884e-02, -5.151095689165019e-02, -5.154449240111006e-02, -5.154449240111006e-02, -3.409886835851186e-02, -3.398378052777538e-02, -3.106821481528785e-02, -3.127546622050940e-02, -3.133170243851764e-02, -3.133170243851764e-02, -1.145078785546731e-02, -1.183898258457903e-02, -3.673064012153670e-02, -7.431603282206600e-03, -8.974283903192565e-03, -8.974283903192564e-03, -3.344118015941068e-04, -3.516355024015864e-04, -1.804043268715701e-03, -1.947710506650202e-04, -2.440245766790659e-04, -2.440245766790659e-04, -5.831756841499561e-02, -5.837074693276595e-02, -5.831976987903569e-02, -5.836671951748595e-02, -5.834465727831087e-02, -5.834465727831087e-02, -3.863675041631428e-02, -3.896263982945967e-02, -3.795313344114292e-02, -3.824060827302900e-02, -3.915166550709659e-02, -3.915166550709659e-02, -3.713247292797437e-02, -4.313998253325103e-02, -3.532414042934030e-02, -4.052037050388402e-02, -3.796097931343233e-02, -3.796097931343233e-02, -4.636634445014085e-03, -9.709728627517315e-03, -4.282791048001348e-03, -5.654637349316618e-02, -5.830462260744224e-03, -5.830462260744224e-03, -1.506952629374821e-04, -1.904627493334384e-04, -1.460892712922981e-04, -2.890276409829183e-03, -1.756509140185053e-04, -1.756509140185053e-04, -4.330801623563046e-02, -4.193561352812140e-02, -4.241020650643439e-02, -4.280952985506475e-02, -4.260912119862436e-02, -4.260912119862436e-02, -4.324617419066504e-02, -3.074354801485618e-02, -3.416047351361031e-02, -3.777098097249541e-02, -3.594245850408399e-02, -3.594245850408399e-02, -4.365136994179410e-02, -1.278925378550324e-02, -1.655516178928128e-02, -2.539784220864862e-02, -2.067364777601230e-02, -2.067364777601230e-02, -2.953850361875151e-02, -1.728622006747585e-03, -2.316338072021557e-03, -2.691263319413710e-02, -3.762082613957555e-03, -3.762082613957554e-03, -4.681520583593984e-04, -5.135702850169381e-05, -1.074252941297522e-04, -3.511309974605105e-03, -1.626668092066845e-04, -1.626668092066844e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.208813584595155e-02, -8.208794349007754e-02, -8.208740245852492e-02, -8.209025750665903e-02, -8.208871700141583e-02, -8.208871700141583e-02, -7.871010309831020e-02, -7.870921414908745e-02, -7.868869529474240e-02, -7.872535865180934e-02, -7.870918092530788e-02, -7.870918092530788e-02, -6.002147529287625e-02, -5.998530281309916e-02, -5.855541441555841e-02, -5.877531890551227e-02, -5.878163500089013e-02, -5.878163500089013e-02, -2.445785497557905e-02, -2.527222918244892e-02, -6.286004104022401e-02, -1.496825304757953e-02, -1.882752589708688e-02, -1.882752589708688e-02, -4.445319360717434e-04, -4.674523250360470e-04, -2.489075045218636e-03, -2.590761308322863e-04, -3.245243205454958e-04, -3.245243205454958e-04, -7.695318576097029e-02, -7.690321373909838e-02, -7.695113312976375e-02, -7.690701815953399e-02, -7.692775633238784e-02, -7.692775633238784e-02, -7.350312978016936e-02, -7.374800102644218e-02, -7.301702159617342e-02, -7.325311750221643e-02, -7.385357275218306e-02, -7.385357275218306e-02, -5.658253353784778e-02, -5.382375068092456e-02, -5.543793255570279e-02, -5.262950801098247e-02, -5.653197637485816e-02, -5.653197637485816e-02, -7.961094588407939e-03, -2.026475952097679e-02, -7.185182269121686e-03, -6.682917612899855e-02, -1.105663252638916e-02, -1.105663252638916e-02, -2.005445177687716e-04, -2.533708797403680e-04, -1.945574333319906e-04, -4.373509742287435e-03, -2.338101737051537e-04, -2.338101737051537e-04, -5.073499983148467e-02, -5.232404040079044e-02, -5.180209948577573e-02, -5.134006640995164e-02, -5.157448748845242e-02, -5.157448748845242e-02, -4.974225101105851e-02, -5.396385544629326e-02, -5.458652525703266e-02, -5.372879189659347e-02, -5.434020681603181e-02, -5.434020681603181e-02, -5.483187975974634e-02, -2.734805809799391e-02, -3.492128172150032e-02, -4.628791294523497e-02, -4.127880202450392e-02, -4.127880202450391e-02, -5.221136780737612e-02, -2.368844340405544e-03, -3.297467879710087e-03, -4.571898315560072e-02, -6.238873776195556e-03, -6.238873776195554e-03, -6.221138022849187e-04, -6.842849678547024e-05, -1.430421990728091e-04, -5.688115015367140e-03, -2.165636400630662e-04, -2.165636400630660e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.884496471580503e-11, 5.884474030620092e-11, 5.884253928665439e-11, 5.884590266755295e-11, 5.884431149250475e-11, 5.884431149250475e-11, 4.117071982818487e-07, 4.117398024094120e-07, 4.124446181237190e-07, 4.108381936112447e-07, 4.116977634306663e-07, 4.116977634306663e-07, 7.942185416216395e-04, 7.920749912350398e-04, 7.248136990060131e-04, 7.052974635548395e-04, 7.154814472896439e-04, 7.154814472896439e-04, 7.883115465279811e-02, 8.092491351426424e-02, 4.192251838734476e-04, 7.992041360454817e-02, 8.596349850176380e-02, 8.596349850176381e-02, 1.633727428997522e-01, 1.725416911425902e-01, 9.539266156919890e-02, 1.489699433515358e-01, 1.890389792589680e-01, 1.890389792589685e-01, 7.071947105119728e-08, 7.079977108184652e-08, 7.072224481639051e-08, 7.079314707402361e-08, 7.076068186104326e-08, 7.076068186104326e-08, 3.843444717396478e-06, 3.784194068455061e-06, 3.770330253533698e-06, 3.719956162242689e-06, 3.845414609796936e-06, 3.845414609796936e-06, 2.032088909661472e-03, 1.856180171568802e-03, 2.744317845205721e-03, 3.094012154801540e-03, 1.965859989812248e-03, 1.965859989812248e-03, 7.415800234910752e-02, 3.903328341079807e-02, 8.040921191035129e-02, 1.062111381065605e-05, 1.002202411410523e-01, 1.002202411410523e-01, 1.965355477672587e-01, 1.753544003359769e-01, 1.103150274859509e+00, 1.118923708703464e-01, 5.128590380749833e-01, 5.128590380749822e-01, 2.851607802092006e-03, 2.729835429958146e-03, 2.771761331778725e-03, 2.807295181576552e-03, 2.789460013642327e-03, 2.789460013642327e-03, 3.297236322809103e-03, 3.303230490515286e-03, 3.349950954554696e-03, 3.373126575897877e-03, 3.373808600709019e-03, 3.373808600709019e-03, 1.480065692411885e-03, 2.568098079470872e-02, 2.036891980277224e-02, 1.410334934138250e-02, 1.773951722057419e-02, 1.773951722057419e-02, 4.711575184245294e-03, 8.677098759166282e-02, 8.734917902764466e-02, 2.027407224663223e-02, 1.319587821933550e-01, 1.319587821933550e-01, 1.312492206629900e-01, 8.640087120506027e-01, 4.174783949509454e-01, 1.311747423963929e-01, 6.480416791117954e-01, 6.480416791117970e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
