
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gam_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.453925427304497e-03, -7.453078263708748e-03, -7.450529980627290e-03, -7.464381050670074e-03, -7.453468368372229e-03, -7.453468368372229e-03, -1.523342024197666e-02, -1.522725562411763e-02, -1.505820171430850e-02, -1.535052460123093e-02, -1.523026505005728e-02, -1.523026505005728e-02, -2.677224458363640e-02, -2.715852990808015e-02, -3.775729108548405e-02, -3.728267920440836e-02, -2.691125552075416e-02, -2.691125552075416e-02, -3.492495843590439e-02, -3.453887400633419e-02, -1.716196122033439e-02, -7.519549628240650e-03, -3.482300828789197e-02, -3.482300828789197e-02, 4.039298094943507e-02, 4.193946188074228e-02, 9.611173424433052e-02, 2.141566860882781e-02, 4.156522330269807e-02, 4.156522330269807e-02, -1.350912765629626e-03, -1.322100149187583e-03, -1.347858253760641e-03, -1.325418734124416e-03, -1.335556367910324e-03, -1.335556367910324e-03, -5.308535155353247e-02, -5.201269633080955e-02, -5.469115589899132e-02, -5.385563379425836e-02, -5.024648724927817e-02, -5.024648724927817e-02, -5.933177105619840e-03, -1.160250098804349e-02, -7.023475675893989e-03, -3.667302795210020e-03, -3.870062735386138e-03, -3.870062735386138e-03, 5.069121544141530e-02, -2.869432128586784e-02, 4.563583859765331e-02, -1.606046675675167e-02, 1.606625797407328e-02, 1.606625797407328e-02, 2.072694189484251e-02, 2.337833959757958e-02, 1.795658304829362e-02, 8.719670349075509e-02, 2.147771567036971e-02, 2.147771567036971e-02, -3.223864312818962e-02, -1.410720819364076e-02, -1.995415003940561e-02, -2.523684547949531e-02, -2.253459982486447e-02, -2.253459982486446e-02, -3.431520606503850e-02, -1.794754300977849e-02, -8.034783617878618e-03, -1.406087429029684e-03, -3.984673389743983e-03, -3.984673389743990e-03, -9.924363945905377e-03, -3.964369417141492e-02, -3.839811206211221e-02, -2.048215566115389e-02, -3.049770330575733e-02, -3.049770330575724e-02, -1.926201357579792e-02, 9.736919059504621e-02, 9.668388018398136e-02, -1.191135526119354e-02, 5.927936203062708e-02, 5.927936203062705e-02, 4.606607286571945e-02, 6.974122793944939e-03, 1.282039889828379e-02, 5.680421631620398e-02, 1.851297677965604e-02, 1.851297677965607e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gam_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [7.989530649381553e-02, 7.989070869045141e-02, 7.987692577030370e-02, 7.995206525595722e-02, 7.989282553836141e-02, 7.989282553836141e-02, 8.368510894050095e-02, 8.367349753763020e-02, 8.335334355607152e-02, 8.390739405454961e-02, 8.367923317895438e-02, 8.367923317895438e-02, 6.068088552240231e-02, 6.061884053526325e-02, 5.436885654419121e-02, 5.509407764520619e-02, 6.065965628909192e-02, 6.065965628909192e-02, -1.990884054210501e-02, -1.161090687007032e-02, 6.146155141873157e-02, -1.705910493682967e-01, -1.723032327850815e-02, -1.723032327850815e-02, 4.942957024373706e-02, 5.100180997309436e-02, 4.109372641651340e-02, 2.767125842465811e-02, 5.056425678630338e-02, 5.056425678630338e-02, 9.215989338614608e-03, 7.856385982345178e-03, 9.080690422525553e-03, 8.023584705543024e-03, 8.515930451329770e-03, 8.515930451329770e-03, 8.022842375191107e-02, 8.144497629530939e-02, 7.853069273280361e-02, 7.959751776849218e-02, 8.288467095992534e-02, 8.288467095992534e-02, 3.907276082504522e-02, -6.929360512545048e-02, 4.164865601118432e-02, -3.704554917744692e-02, 3.117989609217509e-02, 3.117989609217509e-02, -1.692247376230355e-01, -1.256887724432719e-01, -1.714204686911686e-01, -9.870296452373002e-02, -1.893799399632613e-01, -1.893799399632613e-01, 2.680554104546941e-02, 3.009069340425340e-02, 2.321828348063666e-02, -4.239430774730892e-02, 2.767893029075266e-02, 2.767893029075282e-02, -5.878820726590062e-02, -7.264671221122375e-02, -7.641020426384240e-02, -7.316577602919179e-02, -7.558882752697586e-02, -7.558882752697585e-02, -4.919703382700245e-02, 5.340217508574931e-02, 4.347479314655971e-02, 9.218750076680429e-03, 3.098082589012928e-02, 3.098082589012913e-02, -6.588375332470893e-02, -5.264217714231437e-02, 9.175146155482480e-03, 4.673410797374749e-02, 3.729971012846311e-02, 3.729971012846207e-02, 5.182943248798687e-02, 5.966390945669390e-02, 8.633047692584748e-04, 4.282879304082851e-02, -1.336505839644024e-01, -1.336505839644025e-01, 5.559992233798573e-02, 9.196711690590813e-03, 1.677050130295576e-02, -1.307664588410977e-01, 2.394790700036964e-02, 2.394790700036975e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gam_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.220924667204042e-10, -2.220815878952737e-10, -2.220431216907762e-10, -2.222210074403286e-10, -2.220866455120118e-10, -2.220866455120118e-10, -1.602577448574313e-06, -1.602530957247949e-06, -1.600902213727256e-06, -1.602052781717229e-06, -1.602521199320727e-06, -1.602521199320727e-06, -3.082176404348741e-03, -3.074781426006853e-03, -2.748085019042975e-03, -2.690161794584426e-03, -3.079611835498659e-03, -3.079611835498659e-03, -1.608345026590784e-01, -2.217296423071616e-01, -1.555684760097463e-03, 2.432570749389094e+00, -1.808385161262018e-01, -1.808385161262018e-01, 1.158482247350767e+02, 1.152435047388052e+02, 3.084688140818396e+01, 9.028487418365459e+01, 1.199060927284163e+02, 1.199060927284163e+02, -4.277862837482971e-08, -3.740166319547670e-08, -4.224596400164307e-08, -3.806587905883739e-08, -4.001763225009484e-08, -4.001763225009484e-08, -1.597889218997431e-05, -1.578561098892452e-05, -1.570888549258859e-05, -1.557240311651994e-05, -1.616699031710157e-05, -1.616699031710157e-05, -6.654436693486276e-03, 2.128840217884602e-02, -8.761146648641411e-03, 1.276558046909046e-02, -4.915733391244042e-03, -4.915733391244042e-03, 7.344752290362032e+00, 3.900362111212584e-01, 8.139800229990387e+00, 1.169084104160257e-04, 5.037020599600537e+00, 5.037020599600537e+00, 9.610740915172597e+01, 9.502208343780302e+01, 2.792579970043425e+02, 2.304290679315884e+01, 1.416148013447583e+02, 1.416148013447338e+02, 3.831052087433522e-02, 3.247020708278380e-02, 4.033282593584582e-02, 4.405936133973261e-02, 4.266471743959930e-02, 4.266471743959930e-02, 3.199150522721259e-02, -1.267774775165467e-02, -1.109175933524335e-02, -3.209250318340022e-03, -8.697839709743627e-03, -8.697839709743622e-03, 1.496308214166402e-02, 1.383377429495222e-02, -6.884739909840706e-02, -6.010884460385334e-02, -7.531069339831239e-02, -7.531069339831267e-02, -1.971705505957378e-02, 2.761879227721515e+01, 2.245404452590981e+01, -9.065483353928744e-02, 1.540029166730227e+01, 1.540029166730227e+01, 8.479101063847456e+01, 1.791839203913988e+02, 1.487815560438101e+02, 1.914270347984906e+01, 2.099280339857189e+02, 2.099280339856566e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
