
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_lm_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.334962033999185e-01, -6.334829974096199e-01, -6.334482402734805e-01, -6.336442305275618e-01, -6.335381270027014e-01, -6.335381270027014e-01, -2.000591040182076e-01, -2.000371734362361e-01, -1.995339877917012e-01, -2.004349061812079e-01, -2.000360362379136e-01, -2.000360362379136e-01, -9.364040002839842e-02, -9.388339362364523e-02, -1.015237086349585e-01, -1.015223311433189e-01, -1.011199196236638e-01, -1.011199196236638e-01, -6.392683635982677e-02, -6.286293730176375e-02, -9.832955935958904e-02, -7.779848254437033e-02, -6.891859100860026e-02, -6.891859100860027e-02, -1.288290528342444e+00, -1.190645120343671e+00, -2.777577128750613e-01, -2.338693354317258e+00, -1.651712069403938e+00, -1.651712069403936e+00, -1.874717246276431e-01, -1.868349017904786e-01, -1.874455498924679e-01, -1.868832811411787e-01, -1.871469290309463e-01, -1.871469290309463e-01, -2.275655485150924e-01, -2.252799134597570e-01, -2.349558792649196e-01, -2.328533000383750e-01, -2.228128021676724e-01, -2.228128021676724e-01, -8.027032003743712e-02, -8.165578129003388e-02, -7.867541859634938e-02, -7.845527843208602e-02, -8.025351164974713e-02, -8.025351164974713e-02, -1.141034972359186e-01, -8.309160075495753e-02, -1.185504479715840e-01, -1.087485399513947e-01, -8.407567656680529e-02, -8.407567656680529e-02, -2.639861642169015e+00, -2.205173584920685e+00, -1.148641073882343e+00, -1.510648225943378e-01, -1.399531383644467e+00, -1.399531383644468e+00, -8.134937972133741e-02, -7.981811289906417e-02, -8.024681987431354e-02, -8.068402762283559e-02, -8.045510638012940e-02, -8.045510638012940e-02, -8.136526656785308e-02, -8.000539231299697e-02, -7.759045951963488e-02, -7.706726955633740e-02, -7.705122195241895e-02, -7.705122195241895e-02, -8.261493015501235e-02, -8.014673015207743e-02, -7.491850341302023e-02, -6.961565910586080e-02, -7.086909097833970e-02, -7.086909097833970e-02, -7.732514125856345e-02, -3.062091701481331e-01, -2.187873262618197e-01, -6.647313166524578e-02, -1.071642418882477e-01, -1.071642418882476e-01, -1.016868324865696e+00, -3.720936482069251e+00, -2.548951206568976e+00, -1.146895102601457e-01, -1.345436557023857e+00, -1.345436557023857e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_lm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.100381414733501e-01, 5.100218192962279e-01, 5.099785291849197e-01, 5.102207738691816e-01, 5.100896766629124e-01, 5.100896766629124e-01, 4.552513332588862e-02, 4.548823683380866e-02, 4.463921817191544e-02, 4.614529599114089e-02, 4.548468674359707e-02, 4.548468674359707e-02, -4.607834422923362e-02, -4.530894223239229e-02, -2.351831732944976e-02, -2.420566654641807e-02, -2.502734881863630e-02, -2.502734881863630e-02, -8.224273137273889e-03, -1.231994205398459e-02, -4.728427092555499e-02, 4.413806869802982e-02, 1.643630833271477e-02, 1.643630833271481e-02, 1.721301082618180e+00, 1.593834600217714e+00, 4.059459498163202e-01, 3.112305380914077e+00, 2.201091071424202e+00, 2.201091071424199e+00, -4.381469387790136e-03, -5.568686655147356e-03, -4.430306487369217e-03, -5.478473597188128e-03, -4.986442730643074e-03, -4.986442730643074e-03, 1.258818085636650e-01, 1.220074534774124e-01, 1.371662781214982e-01, 1.336698760518134e-01, 1.183336590426002e-01, 1.183336590426002e-01, -7.721545360329991e-02, -9.300934491371314e-02, -7.390495597227904e-02, -8.928741125380034e-02, -7.984983356345668e-02, -7.984983356345668e-02, 1.332722417031773e-01, 3.630749305058552e-02, 1.448616335437393e-01, -1.106237150853482e-01, 7.002303678288399e-02, 7.002303678288399e-02, 3.514612796648929e+00, 2.935304183291587e+00, 1.548598626952655e+00, 2.150555202007181e-01, 1.873388008961028e+00, 1.873388008961030e+00, -9.200246191420523e-02, -9.130569501277445e-02, -9.176937056396658e-02, -9.199165633494570e-02, -9.190106329447610e-02, -9.190106329447610e-02, -9.096635791449215e-02, -5.711505141039611e-02, -7.189080856414340e-02, -8.357625562148363e-02, -7.820017323660305e-02, -7.820017323660305e-02, -9.366593468879587e-02, 1.297314505355161e-02, -1.403933111062832e-02, -5.630445625789656e-02, -3.755953654963951e-02, -3.755953654963955e-02, -5.751416399745277e-02, 4.434338843267232e-01, 3.190981155514642e-01, -6.599157996942391e-02, 1.341219973033581e-01, 1.341219973033580e-01, 1.365301744927486e+00, 4.959116559884467e+00, 3.395848857844991e+00, 1.499065450436088e-01, 1.803372340478628e+00, 1.803372340478628e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_lm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_lm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.333131907821110e-09, -3.333098919952815e-09, -3.332933233722444e-09, -3.333424439867381e-09, -3.333169750085096e-09, -3.333169750085096e-09, -4.644392976500487e-06, -4.644215147311466e-06, -4.639648275414235e-06, -4.644166370601654e-06, -4.643748411866278e-06, -4.643748411866278e-06, -2.269147978486263e-03, -2.294756797021385e-03, -2.951568847629123e-03, -2.848435102802056e-03, -2.855477025488429e-03, -2.855477025488429e-03, -5.346154312336616e-01, -4.879478080508099e-01, -1.255972899690827e-03, -2.000840904507416e+00, -1.149080906713915e+00, -1.149080906713916e+00, -5.085495978832113e+05, -4.148535495164895e+05, -4.719938212884560e+02, -4.552235873933948e+06, -1.828739464955691e+06, -1.828739464955691e+06, -8.850742064170241e-07, -8.829062788926694e-07, -8.849798711302140e-07, -8.830662847606600e-07, -8.839752304534083e-07, -8.839752304534083e-07, -4.790248052467179e-05, -4.648477518864976e-05, -4.907896976934928e-05, -4.779355191301608e-05, -4.655518949243475e-05, -4.655518949243475e-05, -1.728953162960217e-03, 1.243268010204228e-03, -2.572304311244388e-03, 1.419659818323271e-03, -1.361104677795165e-03, -1.361104677795165e-03, -9.780734604105369e+00, -6.577299995722491e-01, -1.345242876705947e+01, -1.046528425111775e-05, -4.774759941893624e+00, -4.774759941893624e+00, -1.284193914504232e+07, -4.985033858467712e+06, -1.466631332674798e+07, -6.762093893624318e+01, -6.943800849146964e+06, -6.943800849146964e+06, 4.269893184019214e-03, 2.082595309934859e-03, 2.694173834835848e-03, 3.304280984806975e-03, 2.984719874636407e-03, 2.984719874636407e-03, 6.183349573815924e-03, -6.088276070415280e-03, -3.294037390160752e-03, -5.331315480495398e-04, -1.936064758523427e-03, -1.936064758523427e-03, 8.074424767644101e-04, -2.426499369187787e-01, -1.032577070829262e-01, -2.030545510723512e-02, -4.865907724739753e-02, -4.865907724739753e-02, -8.057211411765901e-03, -5.608054915849783e+02, -1.633565118813618e+02, -1.346157017365601e-02, -2.473959241428109e+01, -2.473959241428109e+01, -1.287359712149655e+05, -9.757665523709815e+08, -5.028056698432881e+07, -3.217306977131585e+01, -9.476439164062239e+06, -9.476439164062275e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
