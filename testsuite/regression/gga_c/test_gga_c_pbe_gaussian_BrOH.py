
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_gaussian_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.095978233464808e-02, -5.096052043081265e-02, -5.096274679214452e-02, -5.095068248576318e-02, -5.096018049490227e-02, -5.096018049490227e-02, -4.137369782893498e-02, -4.137785760780521e-02, -4.149238429621247e-02, -4.129544085113824e-02, -4.137584107936480e-02, -4.137584107936480e-02, -2.588336252849717e-02, -2.566364339502212e-02, -2.002260480373155e-02, -2.031082005327870e-02, -2.580412790880246e-02, -2.580412790880246e-02, -8.879176602724432e-03, -9.563354040457444e-03, -3.285808021626651e-02, -2.374142330242872e-03, -9.089750975243435e-03, -9.089750975243435e-03, -1.241277449471292e-07, -1.534512023715761e-07, -3.149764482844915e-05, -3.057083071027872e-09, -1.520690526575819e-07, -1.520690526575819e-07, -5.861742554938993e-02, -5.882230284382239e-02, -5.863785619221127e-02, -5.879715804515982e-02, -5.872302454554101e-02, -5.872302454554101e-02, -2.046090605841873e-02, -2.090857091015279e-02, -1.984027664761179e-02, -2.018431122190501e-02, -2.159943617274655e-02, -2.159943617274655e-02, -3.896547011353050e-02, -5.635525592094274e-02, -3.752968255076971e-02, -5.102159071646497e-02, -4.144332838343794e-02, -4.144332838343794e-02, -6.139850043483363e-04, -4.240052036140425e-03, -6.764095907911434e-04, -7.183567185061149e-02, -1.348162832031835e-03, -1.348162832031835e-03, -2.746175249206540e-09, -5.099602673060323e-09, -3.841927114539275e-09, -1.339252358040397e-04, -4.902968469608043e-09, -4.902968469608043e-09, -6.149867047150747e-02, -5.637768397375956e-02, -5.812342095937181e-02, -5.953994135899949e-02, -5.882415853957209e-02, -5.882415853957209e-02, -6.169388078871438e-02, -2.895648072281113e-02, -3.627147630176958e-02, -4.454236611324798e-02, -4.022616710533040e-02, -4.022616710533041e-02, -5.636267471649350e-02, -7.292269172990419e-03, -1.205783011972296e-02, -2.440845051266844e-02, -1.769583964573852e-02, -1.769583964573850e-02, -2.731299433139320e-02, -1.892399077009782e-05, -7.133470725755857e-05, -2.927692543485278e-02, -4.272469321450553e-04, -4.272469321450553e-04, -1.904830197602378e-07, -2.005277317538853e-11, -3.600568178579945e-10, -4.328978382087539e-04, -3.369147654954119e-09, -3.369147652385197e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_gaussian_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.271525848437335e-01, -1.271534886925435e-01, -1.271562240185027e-01, -1.271414495441308e-01, -1.271530723434848e-01, -1.271530723434848e-01, -1.091191756989328e-01, -1.091241470677402e-01, -1.092610347854222e-01, -1.090266298703578e-01, -1.091217627555735e-01, -1.091217627555735e-01, -7.647245523626731e-02, -7.617458692204562e-02, -6.713352127304320e-02, -6.770806703744622e-02, -7.636543005186471e-02, -7.636543005186471e-02, -3.580325422253688e-02, -3.764946552803200e-02, -8.620828886279240e-02, -1.236697455908420e-02, -3.638114869398027e-02, -3.638114869398027e-02, -8.054823285203509e-07, -9.951713905977308e-07, -1.975428484423890e-04, -1.998745942074326e-08, -9.863016919567344e-07, -9.863016919567344e-07, -1.293582731846869e-01, -1.295356656637511e-01, -1.293760081532916e-01, -1.295139464832681e-01, -1.294497965674400e-01, -1.294497965674400e-01, -7.289383066332403e-02, -7.389278612541304e-02, -7.150091162470013e-02, -7.228789491979623e-02, -7.537517301600255e-02, -7.537517301600255e-02, -8.420123782590946e-02, -8.277495657856594e-02, -8.264651055526473e-02, -8.231897823710800e-02, -8.556332593870225e-02, -8.556332593870225e-02, -3.559877770797602e-03, -2.052450021004143e-02, -3.900271467603582e-03, -1.178687338763847e-01, -7.420381092586577e-03, -7.420381092586577e-03, -1.795972489253416e-08, -3.331408763974101e-08, -2.515100921425220e-08, -8.190309690561715e-04, -3.205149232693364e-08, -3.205149232481494e-08, -7.565917775068912e-02, -8.031466292659709e-02, -7.892011733979826e-02, -7.764377384718280e-02, -7.830510728680488e-02, -7.830510728680488e-02, -7.371772586798939e-02, -7.630314361740993e-02, -8.123487778856335e-02, -8.281696088604242e-02, -8.247505889942067e-02, -8.247505889942068e-02, -8.474080130395846e-02, -3.183504035993055e-02, -4.564645965285032e-02, -6.709444396515526e-02, -5.746880674275569e-02, -5.746880674275566e-02, -7.338936592918313e-02, -1.193442990344375e-04, -4.418849319236031e-04, -6.916707463969968e-02, -2.516919665500598e-03, -2.516919665500600e-03, -1.233887547944856e-06, -1.321244780158847e-10, -2.363537431710711e-09, -2.547710961810622e-03, -2.205176998841580e-08, -2.205176998147610e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_gaussian_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.927903230318556e-10, 1.927933695844636e-10, 1.927974736631275e-10, 1.927477844079654e-10, 1.927920089740064e-10, 1.927920089740064e-10, 1.079460990723680e-06, 1.079637964702488e-06, 1.084297225704840e-06, 1.075167490760368e-06, 1.079529465049636e-06, 1.079529465049636e-06, 1.699378341097341e-03, 1.686254089589467e-03, 1.331914366609608e-03, 1.308995537660217e-03, 1.694686591531319e-03, 1.694686591531319e-03, 2.070262767716900e-01, 2.156393686896038e-01, 1.011223910759854e-03, 1.494313833061088e-01, 2.099107801546966e-01, 2.099107801546966e-01, 2.948563716229819e-02, 3.177146110714393e-02, 6.521293756532089e-02, 5.520862797723272e-03, 3.311501136307381e-02, 3.311501136307381e-02, 2.837533310921467e-07, 2.855708060119572e-07, 2.839327169340612e-07, 2.853458103405825e-07, 2.846907578020110e-07, 2.846907578020110e-07, 6.064398321169906e-06, 6.051720213575479e-06, 5.872542250397303e-06, 5.864669109163183e-06, 6.311684875859881e-06, 6.311684875859881e-06, 6.263420036781262e-03, 7.961044416000922e-03, 7.605134722053299e-03, 1.036284459716969e-02, 5.767637674504163e-03, 5.767637674504163e-03, 9.364675973261206e-02, 6.850898799750740e-02, 1.154411327790795e-01, 6.082311769543480e-05, 1.458850446042581e-01, 1.458850446042581e-01, 5.689631414716761e-03, 7.087059873320467e-03, 2.145268983518897e-02, 1.051813844462635e-01, 1.094737460771254e-02, 1.094737460631760e-02, 1.206925764203450e-02, 1.045534180218892e-02, 1.098078619459272e-02, 1.142568831511256e-02, 1.119880077805807e-02, 1.119880077805807e-02, 1.419101197220183e-02, 7.942231741433384e-03, 9.065245823338059e-03, 1.046499650138078e-02, 9.732975056620536e-03, 9.732975056620538e-03, 6.343654203799364e-03, 4.862369297776574e-02, 4.306585485530270e-02, 3.556906165523922e-02, 4.082211943553241e-02, 4.082211943553241e-02, 1.202469674506073e-02, 4.496444434916497e-02, 7.011658240328585e-02, 6.088947124938369e-02, 1.556872117823304e-01, 1.556872117823319e-01, 2.437895986190524e-02, 1.779745155110597e-03, 4.326377982023176e-03, 2.013219785271392e-01, 1.480848996034429e-02, 1.480848995972812e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
