
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_wi0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.173977440039165e-02, -5.173991059896155e-02, -5.174029901511346e-02, -5.173827702703231e-02, -5.173936742763590e-02, -5.173936742763590e-02, -4.830492813693327e-02, -4.830651098608020e-02, -4.834311381482517e-02, -4.827980451947384e-02, -4.830687266512980e-02, -4.830687266512980e-02, -3.304246266300952e-02, -3.278703420638956e-02, -2.593945612766239e-02, -2.634437672333699e-02, -2.651624126609931e-02, -2.651624126609931e-02, -9.307297370018902e-04, -1.245584977428844e-03, -3.656043901434512e-02, 4.064154528100355e-04, 1.571269198815939e-04, 1.571269198815943e-04, -7.883884693249221e-10, -1.041921365687482e-09, 1.095931427608655e-05, -6.120108026403510e-11, -2.110249023621230e-10, -2.110249023621235e-10, -5.230011594242134e-02, -5.232913748990445e-02, -5.230131734814096e-02, -5.232694075825715e-02, -5.231490994921104e-02, -5.231490994921104e-02, -3.374196657442013e-02, -3.428292955048686e-02, -3.255419279147705e-02, -3.304869904661834e-02, -3.460431680205658e-02, -3.460431680205658e-02, -4.209472580927757e-02, -4.957384787158071e-02, -3.991888332656598e-02, -4.812481826243038e-02, -4.334974594753173e-02, -4.334974594753173e-02, 2.634005420537681e-04, 2.804154874855605e-04, 2.245255156448351e-04, -5.316166477191690e-02, 3.759008526297437e-04, 3.759008526297437e-04, -2.424686049569473e-11, -6.373490426366959e-11, -9.513347740981153e-11, 8.415036942009739e-05, -1.126109672539400e-10, -1.126109672539398e-10, -5.042990075097904e-02, -4.925149408353545e-02, -4.969678140758146e-02, -5.004082708935657e-02, -4.987170537296286e-02, -4.987170537296286e-02, -5.057750818173786e-02, -3.056706501141574e-02, -3.840735635312329e-02, -4.485575666100182e-02, -4.186383484356039e-02, -4.186383484356039e-02, -4.959828673367916e-02, -7.851635316113958e-04, -4.334458820382785e-03, -2.340269048319714e-02, -1.180331405165226e-02, -1.180331405165227e-02, -2.913218648505905e-02, 7.903289262107362e-06, 3.325296243803017e-05, -2.993104649540827e-02, 1.821172663984349e-04, 1.821172663984348e-04, -3.082034723527104e-09, -6.762900811748979e-13, -1.008221811367918e-11, 1.538733283305105e-04, -9.741275515309510e-11, -9.741275515309486e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_wi0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.399838303306808e-02, -6.399814813313635e-02, -6.399747917041165e-02, -6.400096645374614e-02, -6.399908572533587e-02, -6.399908572533587e-02, -6.957013380604772e-02, -6.956697219013259e-02, -6.949387741647998e-02, -6.962050497540703e-02, -6.956627718659306e-02, -6.956627718659306e-02, -8.901897474458095e-02, -8.924732636443898e-02, -9.170847895377411e-02, -9.182128135581501e-02, -9.182061794189141e-02, -9.182061794189141e-02, -1.198392330444432e-02, -1.408561187735355e-02, -8.605797972722336e-02, -4.679613372620278e-04, -3.395289317320531e-03, -3.395289317320526e-03, -4.730330220156236e-09, -6.251527159612072e-09, 7.171969358607381e-05, -3.672064756196353e-10, -1.266149356932920e-09, -1.266149356932924e-09, -6.221134407659465e-02, -6.215641923568738e-02, -6.220907185112355e-02, -6.216057781391698e-02, -6.218334183266495e-02, -6.218334183266495e-02, -9.316677094306069e-02, -9.258781646742524e-02, -9.434488285514683e-02, -9.388190737390560e-02, -9.222000589333687e-02, -9.222000589333687e-02, -7.344462779828417e-02, -5.669425552730029e-02, -7.690107387492309e-02, -5.846262732483315e-02, -7.088499858435689e-02, -7.088499858435689e-02, 7.613600796159028e-04, -3.152158522022165e-03, 6.969627969528238e-04, -5.793175741481113e-02, 5.718849133769693e-04, 5.718849133769693e-04, -1.454811617762103e-10, -3.824094189732898e-10, -5.708008454496768e-10, 3.435900143724298e-04, -6.756657812229491e-10, -6.756657812229479e-10, -5.359344862184622e-02, -5.625180719980340e-02, -5.520943513194743e-02, -5.443060786821576e-02, -5.480986079762985e-02, -5.480986079762985e-02, -5.290482849287935e-02, -8.812965128787840e-02, -7.904283164654662e-02, -6.590680417267485e-02, -7.249570123807914e-02, -7.249570123807914e-02, -5.728483283672448e-02, -1.238741088006015e-02, -3.392781283021203e-02, -8.492912549007081e-02, -6.414844629655181e-02, -6.414844629655179e-02, -8.802186838653346e-02, 5.592958979304493e-05, 1.703663967696507e-04, -8.376838450079896e-02, 5.872685932149684e-04, 5.872685932149672e-04, -1.849098715069711e-08, -4.057740484376825e-12, -6.049330839437958e-11, 5.273398127649180e-04, -5.844765129521296e-10, -5.844765129521277e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_wi0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.081323671170292e-11, 3.081278698309280e-11, 3.081068106650544e-11, 3.081737459434022e-11, 3.081388227099929e-11, 3.081388227099929e-11, 3.299763722806101e-07, 3.299659422795904e-07, 3.296824588005250e-07, 3.298491277024653e-07, 3.299225237390083e-07, 3.299225237390083e-07, 1.884566733968753e-03, 1.888408851116299e-03, 1.871654553813032e-03, 1.812451229339026e-03, 1.838225527173466e-03, 1.838225527173466e-03, 7.981286192172848e-02, 9.178620814828772e-02, 8.675640292380142e-04, 1.367597125117752e-02, 3.913213859156906e-02, 3.913213859156901e-02, 5.436541365375942e-04, 6.334469484271547e-04, -3.424250896280967e-02, 2.086563893084529e-04, 4.088534448686440e-04, 4.088534448686455e-04, 3.889357129967705e-08, 3.883397906672243e-08, 3.889079949152164e-08, 3.883819149091156e-08, 3.886337590461200e-08, 3.886337590461200e-08, 6.638687808069139e-06, 6.430148974000397e-06, 6.726951991454349e-06, 6.545419736783930e-06, 6.474938727160896e-06, 6.474938727160896e-06, 3.926632623298392e-03, 1.830588564649492e-03, 6.010792347947674e-03, 3.784022212725504e-03, 3.541306412340074e-03, 3.541306412340074e-03, -1.382279520141881e-02, 1.599452088443125e-02, -1.733961693274785e-02, 5.927403421523305e-06, -1.852974349441467e-03, -1.852974349441467e-03, 2.065597760798491e-04, 2.523261462661434e-04, 2.111578010782824e-03, -3.679790400178720e-02, 9.752571771642800e-04, 9.752571771642767e-04, 2.182526060790179e-03, 2.804088992063780e-03, 2.601603300579839e-03, 2.422542849690981e-03, 2.513573107460886e-03, 2.513573107460886e-03, 2.262323505798914e-03, 9.323364777364748e-03, 7.915183589222115e-03, 5.741399871252941e-03, 6.902640441436325e-03, 6.902640441436325e-03, 1.462756355930713e-03, 2.395184594293683e-02, 3.739189823584754e-02, 4.852299559062488e-02, 5.144418529733179e-02, 5.144418529733180e-02, 1.403168131017711e-02, -2.951696751303586e-02, -3.314802462416405e-02, 7.092077644236845e-02, -3.011678126784243e-02, -3.011678126784234e-02, 6.793931018063117e-04, 3.104235839038287e-04, 3.481648666140952e-04, -3.349177875869998e-02, 1.196727283788266e-03, 1.196727283788267e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
