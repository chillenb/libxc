
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gaploc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.417464773203408e-02, -3.417542616398543e-02, -3.417777507002647e-02, -3.416505281668175e-02, -3.417506764245395e-02, -3.417506764245395e-02, -2.883156925024960e-02, -2.883725254054069e-02, -2.899404099859246e-02, -2.872366085968752e-02, -2.883446702141653e-02, -2.883446702141653e-02, -1.767430074399175e-02, -1.739564091311842e-02, -1.222378130567075e-02, -1.241414452815482e-02, -1.757301011994292e-02, -1.757301011994292e-02, -6.308611221714176e-03, -6.461136576256414e-03, -2.882674154174564e-02, -4.768562605462760e-03, -6.354094662582734e-03, -6.354094662582734e-03, -1.917702074061572e-04, -2.099457147555232e-04, -1.662346931540642e-03, -3.846185513832819e-05, -2.095062921152724e-04, -2.095062921152724e-04, -5.829904533705748e-02, -5.887382861461423e-02, -5.835610889393433e-02, -5.880298517180686e-02, -5.859470058022278e-02, -5.859470058022278e-02, -1.258628241805812e-02, -1.279739869088446e-02, -1.230185390447942e-02, -1.245836121016288e-02, -1.313427341173440e-02, -1.313427341173440e-02, -5.179444713794581e-02, -6.549277277129117e-02, -4.866147375758623e-02, -6.311371840008796e-02, -5.698974871867345e-02, -5.698974871867345e-02, -3.692489983952247e-03, -5.551485325126999e-03, -3.758717547062139e-03, -9.390982892733098e-02, -4.282149585432665e-03, -4.282149585432665e-03, -3.687645027337886e-05, -4.807062457128728e-05, -4.555570005372590e-05, -2.527414329858218e-03, -4.843776277582552e-05, -4.843776277582550e-05, -6.429423999408664e-02, -6.415326894993549e-02, -6.420889948052301e-02, -6.424688291019047e-02, -6.422822256391376e-02, -6.422822256391376e-02, -6.352071345087093e-02, -2.524026409763779e-02, -4.579989122668212e-02, -6.019006171751364e-02, -5.500092924284807e-02, -5.500092924284809e-02, -6.661450351498775e-02, -6.385364997071935e-03, -7.677582115743802e-03, -1.860493643031870e-02, -1.045160946383437e-02, -1.045160946383436e-02, -2.253706384907389e-02, -1.423952632333390e-03, -2.085347656661496e-03, -3.200297000100101e-02, -3.405417020221960e-03, -3.405417020221975e-03, -2.272461335523183e-04, -4.789498604663843e-06, -1.596085177701071e-05, -3.405615704995237e-03, -4.229838276790009e-05, -4.229838276789992e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gaploc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.145424146894307e-01, -1.145451968503944e-01, -1.145535415193753e-01, -1.145080725081927e-01, -1.145439158953190e-01, -1.145439158953190e-01, -1.192515957604888e-01, -1.192825535827121e-01, -1.201357809748586e-01, -1.186600187963390e-01, -1.192672908170603e-01, -1.192672908170603e-01, -8.228727120462559e-02, -8.030429112990270e-02, -4.280461548686072e-02, -4.409053754021965e-02, -8.156749676380197e-02, -8.156749676380197e-02, -1.178234960127221e-02, -1.266680327798526e-02, -1.498717055861796e-01, -7.855263128245952e-03, -1.203775892082122e-02, -1.203775892082122e-02, -6.769589381154682e-04, -7.390569743502672e-04, -4.420079003275198e-03, -1.394665489891257e-04, -7.374291238180300e-04, -7.374291238180300e-04, -2.490121079316666e-01, -2.511625579906966e-01, -2.492269864720261e-01, -2.508991990178673e-01, -2.501222484631922e-01, -2.501222484631922e-01, -3.703284440412381e-02, -3.810377612000589e-02, -3.557715330757911e-02, -3.636339067011989e-02, -3.986282243273912e-02, -3.986282243273912e-02, -1.617971300953331e-01, -7.380900661958564e-02, -1.671725701306090e-01, -7.332139673967528e-02, -1.389978878941183e-01, -1.389978878941183e-01, -7.164438714698820e-03, -9.009059574584123e-03, -7.172428218148103e-03, -1.063930593590768e-01, -7.467390786048372e-03, -7.467390786048372e-03, -1.337475465982921e-04, -1.739598126751421e-04, -1.645715216579104e-04, -6.077862489136111e-03, -1.751374039511873e-04, -1.751374039511872e-04, -7.222032898262393e-02, -7.223685231690405e-02, -7.217548165927247e-02, -7.218218828742194e-02, -7.217505490609719e-02, -7.217505490609719e-02, -7.140614548300918e-02, -1.349103639067069e-01, -1.702755456820990e-01, -9.024417664778282e-02, -1.296279897455599e-01, -1.296279897455598e-01, -7.519773442732501e-02, -1.110569783729507e-02, -1.789730661217548e-02, -9.937214469661670e-02, -3.907557225282721e-02, -3.907557225282723e-02, -1.207708055566205e-01, -4.089489682070005e-03, -5.384523141506455e-03, -1.488099170650365e-01, -6.916917331480195e-03, -6.916917331480237e-03, -7.989507360194339e-04, -1.750481561921873e-05, -5.813559950860484e-05, -6.898149675853516e-03, -1.530119858115388e-04, -1.530119858115380e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gaploc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gaploc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.032312401402549e-10, 2.032391715656013e-10, 2.032575732484646e-10, 2.031280723914040e-10, 2.032355648164807e-10, 2.032355648164807e-10, 1.478477302624148e-06, 1.479125625864203e-06, 1.496739714764049e-06, 1.464830592611588e-06, 1.478775837384371e-06, 1.478775837384371e-06, 2.212523939271813e-03, 2.139315284076484e-03, 8.632921899156797e-04, 8.744325292737128e-04, 2.185938684847863e-03, 2.185938684847863e-03, 3.813352659636423e-02, 4.367087306225050e-02, 2.377612174215954e-03, 4.177072187547862e-02, 3.974818216139171e-02, 3.974818216139171e-02, 2.158682766199320e+01, 2.051952818796868e+01, 1.168826272521366e+00, 3.417320528307141e+01, 2.153252780361503e+01, 2.153252780361503e+01, 7.987670790165483e-07, 8.110649949875753e-07, 7.999861483751690e-07, 8.095479072278183e-07, 8.051041544907784e-07, 8.051041544907784e-07, 2.827917254330085e-06, 2.892523670695283e-06, 2.644225270959761e-06, 2.690217087527483e-06, 3.142232559386726e-06, 3.142232559386726e-06, 1.572523014091854e-02, 1.290965030105623e-04, 2.071770475039504e-02, 9.404902098398820e-04, 1.083863946541059e-02, 1.083863946541059e-02, 1.085058150460713e-01, 1.274855452838745e-02, 1.201001503905531e-01, 5.185814761069137e-06, 7.274886886040459e-02, 7.274886886040459e-02, 3.760029933010455e+01, 3.277420782836629e+01, 1.244471486070037e+02, 5.270388748955016e-01, 5.298822186528461e+01, 5.298822186528454e+01, 1.848501415276449e-06, 9.758551833291711e-05, 3.522841946691522e-05, 1.279493677660999e-05, 2.192330535282995e-05, 2.192330535283001e-05, 5.284407045221396e-07, 1.903527515808316e-02, 2.609704776219186e-02, 6.988367301887677e-03, 1.729222956780082e-02, 1.729222956780079e-02, 1.531682817906665e-04, 8.417031282516030e-03, 1.247525563901437e-02, 6.923275847584159e-02, 2.928544600672076e-02, 2.928544600672078e-02, 2.645918581167092e-02, 1.250769770355461e+00, 6.073724457814548e-01, 1.863011514465104e-01, 2.574790306428393e-01, 2.574790306428406e-01, 1.370875642140011e+01, 2.115054117187188e+02, 9.495154995715991e+01, 3.254898542113309e-01, 9.113851762916352e+01, 9.113851762916332e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
