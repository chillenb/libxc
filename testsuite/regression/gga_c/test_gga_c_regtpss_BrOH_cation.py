
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_regtpss_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.101341328179634e-02, -5.101426119285069e-02, -5.101667121450859e-02, -5.100408507496884e-02, -5.101087282730027e-02, -5.101087282730027e-02, -4.165335053901310e-02, -4.165852001794289e-02, -4.177826623434046e-02, -4.157048594995358e-02, -4.165955890442366e-02, -4.165955890442366e-02, -2.835771899720371e-02, -2.812342990333824e-02, -2.249780857378394e-02, -2.275284900947249e-02, -2.278918414555982e-02, -2.278918414555982e-02, -7.428280354712921e-03, -8.050872941584387e-03, -3.079385257469574e-02, -2.615553442879757e-03, -2.739561272116501e-03, -2.739561272116491e-03, -1.540731611347421e-08, -2.045986730210558e-08, -1.699611491585810e-05, -1.151057750850559e-09, -2.930413091437739e-09, -2.930413091437739e-09, -5.882986957387526e-02, -5.904121357521208e-02, -5.883857739068263e-02, -5.902514918984525e-02, -5.893739320694499e-02, -5.893739320694499e-02, -2.101355515331715e-02, -2.147566044015226e-02, -1.997986391940508e-02, -2.037508498004928e-02, -2.178949001078548e-02, -2.178949001078548e-02, -3.975855778528478e-02, -5.641058668774813e-02, -3.713392406179382e-02, -5.185868446820298e-02, -4.152724858957622e-02, -4.152724858957620e-02, -5.926556852198089e-04, -3.909943422957723e-03, -4.711782711541018e-04, -7.210095063726471e-02, -1.462908151729600e-03, -1.462908151729600e-03, -4.549615881515451e-10, -1.220248161196147e-09, -2.196370807233325e-09, -1.382936599830485e-04, -2.135861946073875e-09, -2.135861944339151e-09, -6.065860081224462e-02, -5.546771373172485e-02, -5.720219999038448e-02, -5.871002086633016e-02, -5.794761874015479e-02, -5.794761874015479e-02, -6.173088243909445e-02, -2.827217752345098e-02, -3.562722936355901e-02, -4.459996630164885e-02, -3.989491863319169e-02, -3.989491863319169e-02, -5.633216310051736e-02, -6.636470984390935e-03, -1.111945433329361e-02, -2.477355092307014e-02, -1.716781535094793e-02, -1.716781535094794e-02, -2.759484772867124e-02, -1.302015714247165e-05, -4.557938491833724e-05, -2.968839203686995e-02, -4.164181714081394e-04, -4.164181714081429e-04, -5.799454339417559e-08, -1.189641375860806e-11, -1.945748531913261e-10, -3.255732956122803e-04, -1.929138180364193e-09, -1.929138176244224e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_regtpss_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.272008972134116e-01, -1.272010398480441e-01, -1.272018858011950e-01, -1.272021263240026e-01, -1.272050971638580e-01, -1.272048312365165e-01, -1.271891406347795e-01, -1.271899842289669e-01, -1.271971618593198e-01, -1.271985735380449e-01, -1.271971618593198e-01, -1.271985735380449e-01, -1.093611697526686e-01, -1.093626088495268e-01, -1.093671927401579e-01, -1.093688361993603e-01, -1.095108852427151e-01, -1.095087087019428e-01, -1.092653745827573e-01, -1.092638966798149e-01, -1.093891298344325e-01, -1.093496678089158e-01, -1.093891298344325e-01, -1.093496678089158e-01, -7.938065203726327e-02, -7.905717295080023e-02, -7.914239567316635e-02, -7.874739705249174e-02, -7.087060567130800e-02, -7.134938383333451e-02, -7.165307371833392e-02, -7.150195029787136e-02, -6.944186562615098e-02, -7.401969719168124e-02, -6.944186562615098e-02, -7.401969719168124e-02, -3.172481620428947e-02, -3.061997622525995e-02, -3.371255834515346e-02, -3.237021324367063e-02, -8.512249911643151e-02, -8.225163250973795e-02, -1.335917075115804e-02, -1.319956654794864e-02, -1.221439537149062e-02, -2.128318230071965e-02, -1.221439537149063e-02, -2.128318230071966e-02, -1.021820591214424e-07, -9.831015325997417e-08, -1.360206470163199e-07, -1.301639095176967e-07, -1.083956530658253e-04, -1.038496923198288e-04, -7.486075595329245e-09, -7.562301881896749e-09, -1.802204590992335e-08, -2.475791904653227e-08, -1.802204590992335e-08, -2.475791904956804e-08, -1.294650672471211e-01, -1.294978150201967e-01, -1.296467601269009e-01, -1.296804690149229e-01, -1.294722970263861e-01, -1.295056582234149e-01, -1.296333394650320e-01, -1.296662826639571e-01, -1.295575269306720e-01, -1.295909239603649e-01, -1.295575269306720e-01, -1.295909239603649e-01, -7.397928977819185e-02, -7.398248053614279e-02, -7.498210093624127e-02, -7.499958432039472e-02, -7.174467890104255e-02, -7.163991138460547e-02, -7.264610182798306e-02, -7.253525517084938e-02, -7.550747405137467e-02, -7.579273921057708e-02, -7.550747405137467e-02, -7.579273921057708e-02, -8.422139389927980e-02, -8.449005263129478e-02, -8.309879792815077e-02, -8.304264858419466e-02, -8.369079708603432e-02, -8.020032179354046e-02, -8.294103839884030e-02, -7.912387165042287e-02, -8.242733421614505e-02, -8.775194654107828e-02, -8.242733421614504e-02, -8.775194654107825e-02, -3.405080745864012e-03, -3.377810999744970e-03, -1.896735608386965e-02, -1.888408695503953e-02, -2.789420996514221e-03, -2.668973741492375e-03, -1.177433223610289e-01, -1.178142226281737e-01, -8.084679812156482e-03, -7.692491232896069e-03, -8.084679812156482e-03, -7.692491232896069e-03, -3.016356031373094e-09, -2.948659699976609e-09, -8.013889852363169e-09, -7.941780716426504e-09, -1.465278078547172e-08, -1.416680559677831e-08, -8.348195152215641e-04, -8.306191947255184e-04, -1.589587215301098e-08, -1.321738695895342e-08, -1.589587214891812e-08, -1.321738695659528e-08, -7.598354102118249e-02, -7.549739223329408e-02, -8.043576021847050e-02, -7.996338197969444e-02, -7.914190955739990e-02, -7.866303747111517e-02, -7.785895290971888e-02, -7.737905679902518e-02, -7.852592152257669e-02, -7.804656354132923e-02, -7.852592152257669e-02, -7.804656354132923e-02, -7.329736231707762e-02, -7.288099105461311e-02, -7.524620207103835e-02, -7.489687889346312e-02, -8.052383528374932e-02, -8.010804683288598e-02, -8.234500541249869e-02, -8.196805168500443e-02, -8.194656171160369e-02, -8.157345223913250e-02, -8.194656171160369e-02, -8.157345223913250e-02, -8.516703911548255e-02, -8.496439937978101e-02, -2.934104393580037e-02, -2.918831591841592e-02, -4.300970910354731e-02, -4.260696104002788e-02, -6.708797334246680e-02, -6.668735376399616e-02, -5.597581968078651e-02, -5.599562729221071e-02, -5.597581968078653e-02, -5.599562729221072e-02, -7.354035852445491e-02, -7.299683788010194e-02, -8.159008004954532e-05, -8.115580488104221e-05, -2.843038356166145e-04, -2.768512728607329e-04, -6.978032276883046e-02, -6.856742698997156e-02, -2.477782499774777e-03, -2.367208447231805e-03, -2.477782499774759e-03, -2.367208447231794e-03, -3.795101171184953e-07, -3.706716277562253e-07, -7.854522147037279e-11, -7.844655863899575e-11, -1.302824898411814e-09, -1.257488113087626e-09, -1.922725787630946e-03, -1.896839181214627e-03, -1.413126627599650e-08, -1.197906276401834e-08, -1.413126626638775e-08, -1.197906275939692e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_regtpss_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_regtpss", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.928056470792582e-10, 3.856112941585163e-10, 1.928056470792582e-10, 1.928091447558009e-10, 3.856182895116018e-10, 1.928091447558009e-10, 1.928139659480712e-10, 3.856279318961423e-10, 1.928139659480712e-10, 1.927621590539765e-10, 3.855243181079531e-10, 1.927621590539765e-10, 1.927908263100619e-10, 3.855816526201237e-10, 1.927908263100619e-10, 1.927908263100619e-10, 3.855816526201237e-10, 1.927908263100619e-10, 1.080116988442409e-06, 2.160233976884817e-06, 1.080116988442409e-06, 1.080338507822255e-06, 2.160677015644511e-06, 1.080338507822255e-06, 1.085347046529085e-06, 2.170694093058170e-06, 1.085347046529085e-06, 1.075659208563407e-06, 2.151318417126814e-06, 1.075659208563407e-06, 1.080254828948938e-06, 2.160509657897877e-06, 1.080254828948938e-06, 1.080254828948938e-06, 2.160509657897877e-06, 1.080254828948938e-06, 1.795541776010546e-03, 3.591083552021092e-03, 1.795541776010546e-03, 1.782614728185554e-03, 3.565229456371108e-03, 1.782614728185554e-03, 1.454548063476472e-03, 2.909096126952945e-03, 1.454548063476472e-03, 1.420951520831888e-03, 2.841903041663776e-03, 1.420951520831888e-03, 1.441728914422292e-03, 2.883457828844585e-03, 1.441728914422292e-03, 1.441728914422292e-03, 2.883457828844585e-03, 1.441728914422292e-03, 1.765085492311767e-01, 3.530170984623534e-01, 1.765085492311767e-01, 1.843440907505154e-01, 3.686881815010307e-01, 1.843440907505154e-01, 9.699780488960157e-04, 1.939956097792031e-03, 9.699780488960157e-04, 1.461076940238133e-01, 2.922153880476267e-01, 1.461076940238133e-01, 1.171593844686995e-01, 2.343187689373990e-01, 1.171593844686995e-01, 1.171593844687000e-01, 2.343187689373998e-01, 1.171593844687000e-01, 1.212963460794151e-02, 2.425926921596538e-02, 1.212963460794151e-02, 1.419898814728595e-02, 2.839797629439142e-02, 1.419898814728595e-02, 5.327438145825654e-02, 1.065487629165165e-01, 5.327438145825654e-02, 4.483393092101973e-03, 8.966786182941500e-03, 4.483393092101973e-03, 6.485016484050168e-03, 1.297003296830742e-02, 6.485016484050168e-03, 6.485016484627632e-03, 1.297003296941601e-02, 6.485016484627632e-03, 2.832052803930971e-07, 5.664105607861941e-07, 2.832052803930971e-07, 2.850741741242061e-07, 5.701483482484122e-07, 2.850741741242061e-07, 2.832798814160793e-07, 5.665597628321588e-07, 2.832798814160793e-07, 2.849295611786245e-07, 5.698591223572488e-07, 2.849295611786245e-07, 2.841558929808487e-07, 5.683117859616974e-07, 2.841558929808487e-07, 2.841558929808487e-07, 5.683117859616974e-07, 2.841558929808487e-07, 6.159509130130475e-06, 1.231901826026095e-05, 6.159509130130475e-06, 6.142621637767612e-06, 1.228524327553522e-05, 6.142621637767612e-06, 5.860969847913167e-06, 1.172193969582633e-05, 5.860969847913167e-06, 5.848262800676115e-06, 1.169652560135223e-05, 5.848262800676115e-06, 6.299596056441059e-06, 1.259919211288212e-05, 6.299596056441059e-06, 6.299596056441059e-06, 1.259919211288212e-05, 6.299596056441059e-06, 5.785671808449439e-03, 1.157134361689888e-02, 5.785671808449439e-03, 7.162576066319567e-03, 1.432515213263913e-02, 7.162576066319567e-03, 7.532544209623561e-03, 1.506508841924712e-02, 7.532544209623561e-03, 1.093701420500194e-02, 2.187402841000388e-02, 1.093701420500194e-02, 5.767453034890403e-03, 1.153490606978080e-02, 5.767453034890403e-03, 5.767453034890403e-03, 1.153490606978081e-02, 5.767453034890403e-03, 9.530116168764131e-02, 1.906023233752834e-01, 9.530116168764131e-02, 6.887171863956368e-02, 1.377434372791274e-01, 6.887171863956368e-02, 9.925533827214642e-02, 1.985106765442936e-01, 9.925533827214642e-02, 5.984101712920435e-05, 1.196820342584087e-04, 5.984101712920435e-05, 1.680506220688753e-01, 3.361012441377502e-01, 1.680506220688753e-01, 1.680506220688753e-01, 3.361012441377502e-01, 1.680506220688753e-01, 4.428413341325065e-03, 8.856826682658378e-03, 4.428413341325065e-03, 5.519046559853603e-03, 1.103809312109128e-02, 5.519046559853603e-03, 5.568377813936525e-02, 1.113675562724691e-01, 5.568377813936525e-02, 1.111025988133991e-01, 2.222051976267969e-01, 1.111025988133991e-01, 2.112886677341308e-02, 4.225773354604795e-02, 2.112886677341308e-02, 2.112886677004566e-02, 4.225773354044583e-02, 2.112886677004566e-02, 1.193101289366522e-02, 2.386202578733044e-02, 1.193101289366522e-02, 1.032161449750645e-02, 2.064322899501290e-02, 1.032161449750645e-02, 1.083485478272512e-02, 2.166970956545025e-02, 1.083485478272512e-02, 1.130093465594768e-02, 2.260186931189536e-02, 1.130093465594768e-02, 1.106298630402089e-02, 2.212597260804177e-02, 1.106298630402089e-02, 1.106298630402089e-02, 2.212597260804177e-02, 1.106298630402089e-02, 1.406397362724531e-02, 2.812794725449062e-02, 1.406397362724531e-02, 7.922382295956014e-03, 1.584476459191203e-02, 7.922382295956014e-03, 9.024494515625344e-03, 1.804898903125069e-02, 9.024494515625344e-03, 1.050618336797053e-02, 2.101236673594106e-02, 1.050618336797053e-02, 9.728275916267761e-03, 1.945655183253552e-02, 9.728275916267761e-03, 9.728275916267761e-03, 1.945655183253552e-02, 9.728275916267761e-03, 5.706853512966286e-03, 1.141370702593257e-02, 5.706853512966286e-03, 4.809901299123855e-02, 9.619802598247709e-02, 4.809901299123855e-02, 4.186562541196490e-02, 8.373125082392979e-02, 4.186562541196490e-02, 3.459010647028339e-02, 6.918021294056678e-02, 3.459010647028339e-02, 3.997106165046763e-02, 7.994212330093525e-02, 3.997106165046763e-02, 3.997106165046764e-02, 7.994212330093528e-02, 3.997106165046764e-02, 1.136428254449109e-02, 2.272856508898219e-02, 1.136428254449109e-02, 4.436607334080394e-02, 8.873214668160269e-02, 4.436607334080394e-02, 6.196271584428194e-02, 1.239254316885646e-01, 6.196271584428194e-02, 5.351831311202279e-02, 1.070366262240456e-01, 5.351831311202279e-02, 1.764433634475442e-01, 3.528867268950891e-01, 1.764433634475442e-01, 1.764433634475427e-01, 3.528867268950863e-01, 1.764433634475427e-01, 1.458573664121489e-02, 2.917147328227121e-02, 1.458573664121489e-02, 6.240239643538131e-03, 1.248047931823216e-02, 6.240239643538131e-03, 7.677589191280335e-03, 1.535517838624227e-02, 7.677589191280335e-03, 1.659263184972786e-01, 3.318526369945554e-01, 1.659263184972786e-01, 2.707151119504398e-02, 5.414302239316610e-02, 2.707151119504398e-02, 2.707151118299876e-02, 5.414302235910130e-02, 2.707151118299876e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
