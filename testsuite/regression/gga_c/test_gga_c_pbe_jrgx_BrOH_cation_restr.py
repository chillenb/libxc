
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_jrgx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.761961321825605e-02, -6.762047904124098e-02, -6.762294315553391e-02, -6.761009094730749e-02, -6.761702179923178e-02, -6.761702179923178e-02, -5.593864493892502e-02, -5.594373711607829e-02, -5.606169925197622e-02, -5.585736572686011e-02, -5.594481781110504e-02, -5.594481781110504e-02, -3.802694146565827e-02, -3.780336495813676e-02, -3.221386798792714e-02, -3.249926909858304e-02, -3.264375055486201e-02, -3.264375055486201e-02, -1.167013280598536e-02, -1.248071082847048e-02, -4.094425052546879e-02, -4.571600714246684e-03, -7.305895465715728e-03, -7.305895465715721e-03, -1.708327081449380e-08, -2.282854800410783e-08, -2.528899121855417e-05, -1.220988514767413e-09, -4.490696573960863e-09, -4.490696573960863e-09, -7.330073736752714e-02, -7.349776957970414e-02, -7.330886328331560e-02, -7.348280328630309e-02, -7.340099959700595e-02, -7.340099959700595e-02, -3.314198871686694e-02, -3.368683023397658e-02, -3.192641113723776e-02, -3.239982009294191e-02, -3.404691262780626e-02, -3.404691262780626e-02, -4.717328638652082e-02, -5.987699395138574e-02, -4.466240895264342e-02, -5.585628907807834e-02, -4.873852120240368e-02, -4.873852120240368e-02, -1.063806737003234e-03, -6.861789751488045e-03, -8.409902742443779e-04, -7.968415761611587e-02, -2.595733252289075e-03, -2.595733252289075e-03, -4.772824309019334e-10, -1.292663359491579e-09, -2.306927485761614e-09, -2.282743799647866e-04, -2.573113930512326e-09, -2.573113930512326e-09, -6.193650368875335e-02, -5.855764834886526e-02, -5.970995032124409e-02, -6.069258581138393e-02, -6.019793083165018e-02, -6.019793083165018e-02, -6.234383498124642e-02, -3.661846610989135e-02, -4.311401267896486e-02, -5.033003167741319e-02, -4.663057652552110e-02, -4.663057652552110e-02, -6.021279320672133e-02, -1.110588879591979e-02, -1.713744576003059e-02, -3.189854931758572e-02, -2.412688430933417e-02, -2.412688430933418e-02, -3.563524925107087e-02, -1.907794614664275e-05, -7.204255917306958e-05, -3.591195483712113e-02, -7.170415811940416e-04, -7.170415811940450e-04, -6.636686501300115e-08, -1.208812500991385e-11, -2.021712839189067e-10, -5.531394137675528e-04, -2.258766566034020e-09, -2.258766568202425e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_jrgx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.454662351101334e-01, -1.454671113275962e-01, -1.454696215602134e-01, -1.454566142893420e-01, -1.454636265905934e-01, -1.454636265905934e-01, -1.232928734724526e-01, -1.232968554210407e-01, -1.233891883618417e-01, -1.232310874457620e-01, -1.232979619937856e-01, -1.232979619937856e-01, -8.691783822472766e-02, -8.679463432918047e-02, -8.282298143202402e-02, -8.317335845579513e-02, -8.326045921319625e-02, -8.326045921319625e-02, -4.209556368498085e-02, -4.378541390469404e-02, -9.120456666739189e-02, -2.136761872758011e-02, -3.062206691030462e-02, -3.062206691030460e-02, -1.114607272863750e-07, -1.488687085439020e-07, -1.591734418076654e-04, -8.002797941831707e-09, -2.938081635623289e-08, -2.938081635361496e-08, -1.399261113314394e-01, -1.400423153118427e-01, -1.399309402849299e-01, -1.400335364137225e-01, -1.399853245647145e-01, -1.399853245647145e-01, -9.504458561096732e-02, -9.582706220488445e-02, -9.331903347228056e-02, -9.402708051056161e-02, -9.630029799290479e-02, -9.630029799290479e-02, -8.449523099906350e-02, -8.041013846439315e-02, -8.262527149655263e-02, -7.835178128262760e-02, -8.457536901142690e-02, -8.457536901142690e-02, -5.944348049344377e-03, -2.974783833229586e-02, -4.774272287147273e-03, -1.157721506093519e-01, -1.324023921435319e-02, -1.324023921435319e-02, -3.133764426999762e-09, -8.473759926398205e-09, -1.514603102757549e-08, -1.375117667889877e-03, -1.687413411285413e-08, -1.687413411202353e-08, -7.433548547673322e-02, -7.767236061217779e-02, -7.661958229407101e-02, -7.565235053323935e-02, -7.614723371267289e-02, -7.614723371267289e-02, -7.235503256520823e-02, -7.990401029863117e-02, -8.134223820176539e-02, -8.027205089167859e-02, -8.114678222197227e-02, -8.114678222197227e-02, -8.232124658918133e-02, -4.225370080671139e-02, -5.507230540824500e-02, -7.093053889813410e-02, -6.461907886112583e-02, -6.461907886112585e-02, -7.779089610120475e-02, -1.204459003042117e-04, -4.464303364837828e-04, -6.998178503293531e-02, -4.102844280702401e-03, -4.102844280702406e-03, -4.315222306906380e-07, -7.982379532248616e-11, -1.330131834153804e-09, -3.211614062260055e-03, -1.482023586951281e-08, -1.482023587127902e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_jrgx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.964991410274028e-10, 1.965022298138066e-10, 1.965058115616656e-10, 1.964600756171763e-10, 1.964854797932662e-10, 1.964854797932662e-10, 1.063010838663316e-06, 1.063194163638352e-06, 1.067319470080761e-06, 1.059191305313159e-06, 1.063106796981205e-06, 1.063106796981205e-06, 1.678745987954008e-03, 1.671847961046802e-03, 1.481700297936104e-03, 1.442808367870018e-03, 1.465192247869966e-03, 1.465192247869966e-03, 2.210284305048635e-01, 2.255937088935606e-01, 8.981906247504786e-04, 2.255783766345943e-01, 2.497287716679527e-01, 2.497287716679525e-01, 1.344832609848144e-02, 1.584180904331816e-02, 7.890085800366779e-02, 4.755724177624210e-03, 9.937139545282673e-03, 9.937139546848248e-03, 2.634842347818415e-07, 2.649839583979995e-07, 2.635438853376863e-07, 2.648677230631336e-07, 2.642473852312349e-07, 2.642473852312349e-07, 7.140698274946969e-06, 7.074510080051756e-06, 6.904347735500228e-06, 6.848459097774581e-06, 7.221189546853174e-06, 7.221189546853174e-06, 4.585890342115968e-03, 4.775288445158613e-03, 6.074668026917240e-03, 7.479455695251253e-03, 4.493345986290430e-03, 4.493345986290430e-03, 1.630928632952854e-01, 1.029278109114482e-01, 1.700203404399278e-01, 4.401515655014043e-05, 2.736894597133403e-01, 2.736894597133403e-01, 4.645647797392904e-03, 5.846509156430819e-03, 5.848590258754115e-02, 1.801668476096196e-01, 2.545348470771495e-02, 2.545348470607833e-02, 7.415485152492777e-03, 6.824044335259704e-03, 7.019542056316538e-03, 7.191497238155407e-03, 7.104385099307405e-03, 7.104385099307405e-03, 8.565396927997132e-03, 7.069215013450885e-03, 7.345133950901551e-03, 7.741043035455724e-03, 7.543902779871239e-03, 7.543902779871239e-03, 3.850534417544925e-03, 6.485602906416815e-02, 4.893950581493913e-02, 3.079981534062609e-02, 4.046315041568985e-02, 4.046315041568989e-02, 1.010604721724269e-02, 6.475396909035840e-02, 9.708016644868427e-02, 4.376306160361034e-02, 2.928526559818058e-01, 2.928526559818061e-01, 1.668932588375012e-02, 6.340796952589522e-03, 7.977303616121111e-03, 2.733052320423739e-01, 3.169626581016789e-02, 3.169626581089849e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
