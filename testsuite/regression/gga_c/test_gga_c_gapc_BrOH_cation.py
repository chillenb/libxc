
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gapc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.989005771087337e-02, -3.989048208655287e-02, -3.989169049418041e-02, -3.988539157010316e-02, -3.988878809887583e-02, -3.988878809887583e-02, -3.944672624826001e-02, -3.945069267674466e-02, -3.954254030529900e-02, -3.938240184112985e-02, -3.945137683853662e-02, -3.945137683853662e-02, -3.254803353379704e-02, -3.236588748032184e-02, -2.804632614485921e-02, -2.824795505464186e-02, -2.822112095452609e-02, -2.822112095452609e-02, -1.278033223366014e-02, -1.337550987048991e-02, -3.451879692891018e-02, -6.921399766020101e-03, -6.551037066587737e-03, -6.551037066587742e-03, -7.090494411180759e-08, -9.193189877679939e-08, -9.930797053377066e-05, -6.288236989190022e-09, -1.643943352296601e-08, -1.643943352296604e-08, -5.148814391020252e-02, -5.168058529647378e-02, -5.149605028762414e-02, -5.166592654784980e-02, -5.158598565329111e-02, -5.158598565329111e-02, -2.644482668061323e-02, -2.674861275676876e-02, -2.575088583017443e-02, -2.601004340593490e-02, -2.696315918223847e-02, -2.696315918223847e-02, -4.157095318094581e-02, -5.661039668116649e-02, -3.926400980937701e-02, -5.221494193945695e-02, -4.305610369020824e-02, -4.305610369020822e-02, -2.696943392203669e-03, -9.277245999458991e-03, -2.266157956581243e-03, -7.109944715944849e-02, -4.763340490103208e-03, -4.763340490103208e-03, -2.463801231044285e-09, -6.323233457685088e-09, -6.653955881779959e-09, -7.685563836576991e-04, -8.364646266624097e-09, -8.364646266624080e-09, -6.068492458907102e-02, -5.565530279904640e-02, -5.731801709089088e-02, -5.877836515232920e-02, -5.803827850812891e-02, -5.803827850812891e-02, -6.173707266741622e-02, -3.205456065064844e-02, -3.796275237396275e-02, -4.561082958456776e-02, -4.153191962797187e-02, -4.153191962797187e-02, -5.656366336616014e-02, -1.281981294109904e-02, -1.727870284703523e-02, -2.855142903914314e-02, -2.240633829004721e-02, -2.240633829004721e-02, -3.136575343591276e-02, -7.651362744207661e-05, -2.764936022587722e-04, -3.223731005883246e-02, -1.943086257237084e-03, -1.943086257237084e-03, -2.722672712379430e-07, -5.883902987351590e-11, -9.068165754199644e-10, -1.593527217131647e-03, -7.058395619885446e-09, -7.058395556489437e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gapc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.805481057612998e-02, -7.805504574910857e-02, -7.805585725150538e-02, -7.805625381628116e-02, -7.805940541591816e-02, -7.805896697779217e-02, -7.804175865734791e-02, -7.804314971970862e-02, -7.805032417203327e-02, -7.805265179330151e-02, -7.805032417203327e-02, -7.805265179330151e-02, -8.999911182163292e-02, -9.000091331915915e-02, -9.000724527806453e-02, -9.000930257062113e-02, -9.020074844181314e-02, -9.019802476722058e-02, -8.986681667041214e-02, -8.986496611387999e-02, -9.003440519811227e-02, -8.998500641034390e-02, -9.003440519811227e-02, -8.998500641034390e-02, -7.236468169613715e-02, -7.198060499842013e-02, -7.214699540110488e-02, -7.167754604107687e-02, -6.488108966824885e-02, -6.547048274953524e-02, -6.563339405366314e-02, -6.544765785976545e-02, -6.287854262636049e-02, -6.850652861367844e-02, -6.287854262636049e-02, -6.850652861367844e-02, -3.580969982092653e-02, -3.431126630329134e-02, -3.710914087746270e-02, -3.533141273116776e-02, -7.781210209832862e-02, -7.440290760583063e-02, -2.227022173219408e-02, -2.196696965151777e-02, -1.772089977738365e-02, -3.400399070911787e-02, -1.772089977738366e-02, -3.400399070911785e-02, -3.734285627975677e-07, -3.647015920190918e-07, -4.888816715334786e-07, -4.758554137579125e-07, -5.675996490450075e-04, -5.520942805890825e-04, -3.088517161300384e-08, -3.107620262616998e-08, -7.941051630077746e-08, -9.865909229505732e-08, -7.941051630077756e-08, -9.865909229505743e-08, -1.137291717017708e-01, -1.137704563114765e-01, -1.140729499587481e-01, -1.141154417429888e-01, -1.137429668612374e-01, -1.137850246193586e-01, -1.140472550579383e-01, -1.140887819771104e-01, -1.139040357403937e-01, -1.139461365495019e-01, -1.139040357403937e-01, -1.139461365495019e-01, -6.197312463937994e-02, -6.197744858656813e-02, -6.266484254764139e-02, -6.268840193208225e-02, -6.039509268678038e-02, -6.025098643312838e-02, -6.100287990299120e-02, -6.085123005338843e-02, -6.299809057691719e-02, -6.338085498187974e-02, -6.299809057691719e-02, -6.338085498187974e-02, -7.930336250862964e-02, -7.961430388232406e-02, -8.227174521529404e-02, -8.220487584447334e-02, -7.870026497903104e-02, -7.467668390845739e-02, -8.193156456128192e-02, -7.743665626438459e-02, -7.756295501039606e-02, -8.373988738837175e-02, -7.756295501039605e-02, -8.373988738837171e-02, -1.071900706172616e-02, -1.063754842584629e-02, -2.771763076630738e-02, -2.757222279355606e-02, -9.554892372407127e-03, -9.178677499586034e-03, -1.180260666973353e-01, -1.181144765073922e-01, -1.701398415493249e-02, -1.612904195026906e-02, -1.701398415493249e-02, -1.612904195026906e-02, -1.211685558340567e-08, -1.194896120475652e-08, -3.140923399480332e-08, -3.123615150049054e-08, -3.563806605897527e-08, -3.486999994397845e-08, -3.843617608477672e-03, -3.829084095433716e-03, -4.698475817190251e-08, -4.162362941934965e-08, -4.698475817190247e-08, -4.162362941934961e-08, -7.591759433208851e-02, -7.533426805236149e-02, -7.972979520076580e-02, -7.916901638067265e-02, -7.870982348719442e-02, -7.813924083571287e-02, -7.761659067074375e-02, -7.704299699846905e-02, -7.819335921275791e-02, -7.762130779252599e-02, -7.819335921275791e-02, -7.762130779252599e-02, -7.331277668814315e-02, -7.281235019721784e-02, -6.906328680585092e-02, -6.865766365183400e-02, -7.512991620941126e-02, -7.465191114434652e-02, -7.924023735735229e-02, -7.880304318099314e-02, -7.755678068094192e-02, -7.712689410976094e-02, -7.755678068094192e-02, -7.712689410976094e-02, -8.420208104024332e-02, -8.396061224377187e-02, -3.538643561179765e-02, -3.515608293794211e-02, -4.427875259648748e-02, -4.375139738235919e-02, -6.172388848732268e-02, -6.126686162867257e-02, -5.276920113303626e-02, -5.279281049128152e-02, -5.276920113303626e-02, -5.279281049128151e-02, -6.756571312971643e-02, -6.693731688055923e-02, -4.320994698886794e-04, -4.306271048895954e-04, -1.502712302181074e-03, -1.475635039896635e-03, -6.483506358883073e-02, -6.347331353557882e-02, -8.565058729846045e-03, -8.231782594844481e-03, -8.565058729846033e-03, -8.231782594844467e-03, -1.457237222887263e-06, -1.436409713925065e-06, -2.808281345169822e-10, -2.805981485986005e-10, -4.500877712626817e-09, -4.401448127670071e-09, -7.202820176538515e-03, -7.121739312193044e-03, -3.942412472675021e-08, -3.537173763874863e-08, -3.942412511029654e-08, -3.537173754261660e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gapc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.623979591112532e-11, 1.924795918222506e-10, 9.623979591112532e-11, 9.624322814980749e-11, 1.924864562996150e-10, 9.624322814980749e-11, 9.625019493370952e-11, 1.925003898674190e-10, 9.625019493370952e-11, 9.619931430827962e-11, 1.923986286165592e-10, 9.619931430827962e-11, 9.622714845863265e-11, 1.924542969172653e-10, 9.622714845863265e-11, 9.622714845863265e-11, 1.924542969172653e-10, 9.622714845863265e-11, 8.307841134921017e-07, 1.661568226984203e-06, 8.307841134921017e-07, 8.310153076671332e-07, 1.662030615334266e-06, 8.310153076671332e-07, 8.362802554884481e-07, 1.672560510976896e-06, 8.362802554884481e-07, 8.263583574895552e-07, 1.652716714979110e-06, 8.263583574895552e-07, 8.309593985441973e-07, 1.661918797088395e-06, 8.309593985441973e-07, 8.309593985441973e-07, 1.661918797088395e-06, 8.309593985441973e-07, 1.388771098126672e-03, 2.777542196253344e-03, 1.388771098126672e-03, 1.377044854598631e-03, 2.754089709197263e-03, 1.377044854598631e-03, 1.101153448160340e-03, 2.202306896320680e-03, 1.101153448160340e-03, 1.076089232907028e-03, 2.152178465814056e-03, 1.076089232907028e-03, 1.091434596985886e-03, 2.182869193971772e-03, 1.091434596985886e-03, 1.091434596985886e-03, 2.182869193971772e-03, 1.091434596985886e-03, 1.574472271906877e-01, 3.148944543813754e-01, 1.574472271906877e-01, 1.602602305662551e-01, 3.205204611325101e-01, 1.602602305662551e-01, 7.604211387037934e-04, 1.520842277407587e-03, 7.604211387037934e-04, 1.975951652166106e-01, 3.951903304332213e-01, 1.975951652166106e-01, 1.387845899628129e-01, 2.775691799256258e-01, 1.387845899628129e-01, 1.387845899628130e-01, 2.775691799256260e-01, 1.387845899628130e-01, 3.849009222922146e-02, 7.698018445844293e-02, 3.849009222922146e-02, 4.458166022240036e-02, 8.916332044480073e-02, 4.458166022240036e-02, 2.581896531161878e-01, 5.163793062323756e-01, 2.581896531161878e-01, 1.533405140772981e-02, 3.066810281545961e-02, 1.533405140772981e-02, 2.353256331419096e-02, 4.706512662838191e-02, 2.353256331419096e-02, 2.353256331419102e-02, 4.706512662838203e-02, 2.353256331419102e-02, 2.592875261563388e-07, 5.185750523126776e-07, 2.592875261563388e-07, 2.617637934051141e-07, 5.235275868102282e-07, 2.617637934051141e-07, 2.593870969244095e-07, 5.187741938488190e-07, 2.593870969244095e-07, 2.615728187700237e-07, 5.231456375400474e-07, 2.615728187700237e-07, 2.605460030377488e-07, 5.210920060754976e-07, 2.605460030377488e-07, 2.605460030377488e-07, 5.210920060754976e-07, 2.605460030377488e-07, 4.186992082459245e-06, 8.373984164918490e-06, 4.186992082459245e-06, 4.180960777476105e-06, 8.361921554952210e-06, 4.180960777476105e-06, 3.966664782752428e-06, 7.933329565504856e-06, 3.966664782752428e-06, 3.960723842507756e-06, 7.921447685015513e-06, 3.960723842507756e-06, 4.296733042100196e-06, 8.593466084200393e-06, 4.296733042100196e-06, 4.296733042100196e-06, 8.593466084200393e-06, 4.296733042100196e-06, 4.860181809392908e-03, 9.720363618785815e-03, 4.860181809392908e-03, 6.829933332562069e-03, 1.365986666512414e-02, 6.829933332562069e-03, 6.199621597980138e-03, 1.239924319596028e-02, 6.199621597980138e-03, 1.016817223824012e-02, 2.033634447648024e-02, 1.016817223824012e-02, 4.916496432316305e-03, 9.832992864632611e-03, 4.916496432316305e-03, 4.916496432316304e-03, 9.832992864632607e-03, 4.916496432316304e-03, 2.589477838573525e-01, 5.178955677147050e-01, 2.589477838573525e-01, 7.974296510389259e-02, 1.594859302077852e-01, 7.974296510389259e-02, 2.968673328286071e-01, 5.937346656572141e-01, 2.968673328286071e-01, 6.297950668588216e-05, 1.259590133717643e-04, 6.297950668588216e-05, 2.948891130700946e-01, 5.897782261401893e-01, 2.948891130700946e-01, 2.948891130700946e-01, 5.897782261401893e-01, 2.948891130700946e-01, 1.474705489480701e-02, 2.949410978961403e-02, 1.474705489480701e-02, 1.806599110195417e-02, 3.613198220390834e-02, 1.806599110195417e-02, 1.186249108595298e-01, 2.372498217190596e-01, 1.186249108595298e-01, 4.611272421656684e-01, 9.222544843313367e-01, 4.611272421656684e-01, 5.581811910792931e-02, 1.116362382158586e-01, 5.581811910792931e-02, 5.581811910792910e-02, 1.116362382158582e-01, 5.581811910792910e-02, 1.173332262769922e-02, 2.346664525539844e-02, 1.173332262769922e-02, 9.829023839436459e-03, 1.965804767887292e-02, 9.829023839436459e-03, 1.043732918048454e-02, 2.087465836096908e-02, 1.043732918048454e-02, 1.098926174623948e-02, 2.197852349247896e-02, 1.098926174623948e-02, 1.070758119135731e-02, 2.141516238271463e-02, 1.070758119135731e-02, 1.070758119135731e-02, 2.141516238271463e-02, 1.070758119135731e-02, 1.395134875388843e-02, 2.790269750777686e-02, 1.395134875388843e-02, 6.124306814191859e-03, 1.224861362838372e-02, 6.124306814191859e-03, 7.342364497727689e-03, 1.468472899545538e-02, 7.342364497727689e-03, 9.217112705196160e-03, 1.843422541039232e-02, 9.217112705196160e-03, 8.199226154169261e-03, 1.639845230833852e-02, 8.199226154169261e-03, 8.199226154169261e-03, 1.639845230833852e-02, 8.199226154169261e-03, 5.428087605288981e-03, 1.085617521057796e-02, 5.428087605288981e-03, 4.550339070969837e-02, 9.100678141939673e-02, 4.550339070969837e-02, 3.394374070137645e-02, 6.788748140275290e-02, 3.394374070137645e-02, 2.629341937965989e-02, 5.258683875931978e-02, 2.629341937965989e-02, 3.023469066690290e-02, 6.046938133380580e-02, 3.023469066690290e-02, 3.023469066690289e-02, 6.046938133380578e-02, 3.023469066690289e-02, 8.752305530906118e-03, 1.750461106181224e-02, 8.752305530906118e-03, 2.154813780225890e-01, 4.309627560451779e-01, 2.154813780225890e-01, 3.020879712352048e-01, 6.041759424704095e-01, 3.020879712352048e-01, 4.200143425647508e-02, 8.400286851295016e-02, 4.200143425647508e-02, 5.385167175227745e-01, 1.077033435045549e+00, 5.385167175227745e-01, 5.385167175227737e-01, 1.077033435045547e+00, 5.385167175227737e-01, 4.915448088298536e-02, 9.830896176597072e-02, 4.915448088298536e-02, 1.812965039503414e-02, 3.625930079006828e-02, 1.812965039503414e-02, 2.211128726733174e-02, 4.422257453466349e-02, 2.211128726733174e-02, 5.514312108047968e-01, 1.102862421609594e+00, 5.514312108047968e-01, 6.736557534712623e-02, 1.347311506942525e-01, 6.736557534712623e-02, 6.736557477291358e-02, 1.347311495458272e-01, 6.736557477291358e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
