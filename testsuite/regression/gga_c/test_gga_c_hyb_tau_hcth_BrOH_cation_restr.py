
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_hyb_tau_hcth_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.395545203455426e-01, -1.395545999096994e-01, -1.395549631202608e-01, -1.395537793948897e-01, -1.395543981929230e-01, -1.395543981929230e-01, -9.404640831369711e-02, -9.404656236667473e-02, -9.405064579549786e-02, -9.404803738742257e-02, -9.404717379418222e-02, -9.404717379418222e-02, -5.576042635355979e-02, -5.566349129495828e-02, -5.223662786030907e-02, -5.257761371166465e-02, -5.265107951067079e-02, -5.265107951067079e-02, -7.354129794845636e-03, -9.647974905510370e-03, -5.946903521849439e-02, 1.880225200518904e-02, 7.096865997533533e-03, 7.096865997533513e-03, 7.617926135098695e-03, 7.976408995809718e-03, 3.065982638113908e-02, 4.599808552164232e-03, 5.685426952219202e-03, 5.685426952219208e-03, -1.041884339453245e-01, -1.042077575884815e-01, -1.041892606307341e-01, -1.042063126420911e-01, -1.041981946913647e-01, -1.041981946913647e-01, -7.316882392983065e-02, -7.382243703429389e-02, -7.183516866351979e-02, -7.245811192108312e-02, -7.412953048444396e-02, -7.412953048444396e-02, -5.431949463934137e-02, -5.744943672740522e-02, -5.276793426338747e-02, -5.439132720986984e-02, -5.462873671151289e-02, -5.462873671151289e-02, 3.759110445603068e-02, 1.029019454034206e-02, 3.826485455098686e-02, -8.233118592785432e-02, 2.780216675109435e-02, 2.780216675109435e-02, 3.604242213846377e-03, 4.503041668623758e-03, 3.495125154665445e-03, 3.718202246884558e-02, 4.167202171731756e-03, 4.167202171731756e-03, -5.303592200275711e-02, -5.576463151437779e-02, -5.588605982188873e-02, -5.545171436426217e-02, -5.576511058656242e-02, -5.576511058656242e-02, -4.629337732145598e-02, -4.986575873096181e-02, -5.172404660183553e-02, -5.263645362411831e-02, -5.216987024742844e-02, -5.216987024742844e-02, -5.829887323413824e-02, -5.185134495994106e-03, -2.180997143353839e-02, -4.253550232578641e-02, -3.441811871330790e-02, -3.441811871330786e-02, -4.816039332132494e-02, 2.996620463516249e-02, 3.533622483121557e-02, -4.327882281165773e-02, 3.602274041391891e-02, 3.602274041391891e-02, 1.034911768795611e-02, 1.271012389996012e-03, 2.604323276738267e-03, 3.656806633099605e-02, 3.873491603062750e-03, 3.873491603062757e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_hyb_tau_hcth_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.488299930631395e-01, -1.488304092370002e-01, -1.488317315472872e-01, -1.488255551482440e-01, -1.488288644665952e-01, -1.488288644665952e-01, -1.034121555055485e-01, -1.034089212811297e-01, -1.033356954211821e-01, -1.034688943257594e-01, -1.034088814321330e-01, -1.034088814321330e-01, -7.833569444275072e-02, -7.886015311703752e-02, -9.477648481278914e-02, -9.415691696227299e-02, -9.357858934624039e-02, -9.357858934624039e-02, -9.637208328414230e-02, -9.601101540202055e-02, -7.755424848608662e-02, -6.827695436861508e-02, -8.644956478541066e-02, -8.644956478541008e-02, 9.865479030155933e-03, 1.031311443009408e-02, 3.221886610167481e-02, 6.024336250676872e-03, 7.415124389229407e-03, 7.415124389229417e-03, -1.172665677330342e-01, -1.174249456947657e-01, -1.172731214482864e-01, -1.174129271583515e-01, -1.173470556383601e-01, -1.173470556383601e-01, -1.389504295383822e-01, -1.369780685182622e-01, -1.439615476085450e-01, -1.421683657834375e-01, -1.354739101557339e-01, -1.354739101557339e-01, -6.076078131008507e-02, -6.795690072571371e-02, -5.982982256458844e-02, -6.623608391019314e-02, -6.109000313355936e-02, -6.109000313355936e-02, -7.549119821781515e-03, -9.185540194277769e-02, -3.418663488647158e-04, -9.444927405345999e-02, -4.130685729248747e-02, -4.130685729248747e-02, 4.735927285638297e-03, 5.898719689819354e-03, 4.587081699390088e-03, 2.362276622283511e-02, 5.459118792165776e-03, 5.459118792165756e-03, -4.121123422962666e-02, -6.548464862625535e-02, -6.130544860824316e-02, -5.461315684395845e-02, -5.840053475494532e-02, -5.840053475494532e-02, -2.858429400357766e-02, -6.909343783125707e-02, -5.955957472729234e-02, -6.048247126764832e-02, -5.844035094543267e-02, -5.844035094543267e-02, -6.983050532331578e-02, -1.086184910240162e-01, -1.054043671259311e-01, -6.646214482801949e-02, -8.696824962021629e-02, -8.696824962021622e-02, -6.804492507261264e-02, 3.230023173833154e-02, 3.213625040701078e-02, -5.470367682163492e-02, 3.534256774313612e-03, 3.534256774314204e-03, 1.326204490945754e-02, 1.683973447036330e-03, 3.433185735658018e-03, 9.403089274705189e-03, 5.078941183437443e-03, 5.078941183437490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_hyb_tau_hcth_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_hyb_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.793686974968294e-12, 1.794563886625637e-12, 1.797012501664984e-12, 1.784008662749029e-12, 1.791022856347649e-12, 1.791022856347649e-12, 2.135522753482665e-08, 2.130492276390791e-08, 2.015032338182712e-08, 2.215114099998661e-08, 2.129252384578842e-08, 2.129252384578842e-08, 5.672082886209648e-04, 5.857336689727556e-04, 1.087250327240120e-03, 1.028800790640974e-03, 1.026672914392455e-03, 1.026672914392455e-03, 6.512685474951195e-01, 6.249200115717356e-01, 2.079430936807199e-04, 1.226858355857042e+00, 1.029353514034631e+00, 1.029353514034626e+00, 8.225731453962023e+00, 8.642666363149827e+00, 3.552688571430461e+00, 7.856046230446653e+00, 9.795521247742208e+00, 9.795521247752371e+00, 1.956043278118560e-08, 2.026090210976685e-08, 1.958894922429324e-08, 2.020716537019924e-08, 1.991568947578472e-08, 1.991568947578472e-08, 6.809932080908933e-06, 6.416561101491918e-06, 7.364354705078399e-06, 7.003421860658761e-06, 6.324572959918693e-06, 6.324572959918693e-06, -3.466752396068918e-05, 1.175480214962825e-03, 7.855110419530737e-05, 2.262541302946384e-03, -3.529853777249845e-05, -3.529853777249845e-05, 1.768722333059866e+00, 4.713925807117120e-01, 2.016751355200724e+00, 5.949145035939441e-06, 1.929415281300753e+00, 1.929415281300753e+00, 1.054406846737700e+01, 9.262008615687481e+00, 5.927372012536487e+01, 3.459541865328062e+00, 2.723457780200207e+01, 2.723457780200578e+01, -2.654599381348582e-02, 1.500593432051021e-03, -1.020249917605496e-03, -6.865936258790430e-03, -3.294664496024946e-03, -3.294664496024946e-03, -8.219618345600448e-02, 2.214499752435772e-03, 2.685015149252843e-04, 3.753321108154299e-04, -7.756139618854818e-05, -7.756139618854818e-05, 1.083657759410062e-03, 2.163982228286328e-01, 1.058786433147203e-01, 1.513940866281100e-02, 4.934615031749322e-02, 4.934615031749401e-02, 3.451798702252683e-03, 3.277901436315782e+00, 2.991483715702970e+00, 7.618098785254651e-03, 3.495434220757990e+00, 3.495434220757938e+00, 6.366863652992969e+00, 4.869534235203803e+01, 2.282660422091026e+01, 3.626809003823272e+00, 3.458854298860042e+01, 3.458854298867183e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
