
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zpbeint_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.813672752976055e-02, -5.813747666498249e-02, -5.813973735777279e-02, -5.812749253398092e-02, -5.813713163636751e-02, -5.813713163636751e-02, -4.770640556937766e-02, -4.771058750768355e-02, -4.782573242398365e-02, -4.762784877502612e-02, -4.770856322260701e-02, -4.770856322260701e-02, -3.057601579044338e-02, -3.035428556626972e-02, -2.453243224747301e-02, -2.484182356924557e-02, -3.049609046401528e-02, -3.049609046401528e-02, -1.153704542161208e-02, -1.231286594032960e-02, -3.768960829728268e-02, -3.465987765948727e-03, -1.177684233316491e-02, -1.177684233316491e-02, -2.041072403720509e-07, -2.522921353500647e-07, -5.111029533101822e-05, -5.032348560688223e-09, -2.500199808652391e-07, -2.500199808652391e-07, -6.509833502821835e-02, -6.529861717724217e-02, -6.511831186888882e-02, -6.527404146050253e-02, -6.520157391979557e-02, -6.520157391979557e-02, -2.561970209417719e-02, -2.611206159862859e-02, -2.493687871997033e-02, -2.531714507626845e-02, -2.686537728408259e-02, -2.686537728408259e-02, -4.280420504743664e-02, -5.815283795138647e-02, -4.137240256381679e-02, -5.332973275331038e-02, -4.513710811305863e-02, -4.513710811305863e-02, -9.522664153096760e-04, -5.970626175234100e-03, -1.045389344166339e-03, -7.555056466743326e-02, -2.028179486220137e-03, -2.028179486220137e-03, -4.520604071989271e-09, -8.394015560459219e-09, -6.323916348408298e-09, -2.142163571418713e-04, -8.070300602224562e-09, -8.070300602224562e-09, -6.209421560180419e-02, -5.793315488159208e-02, -5.936680109509015e-02, -6.051862056944889e-02, -5.993788092423502e-02, -5.993788092423502e-02, -6.208784451104098e-02, -3.318704709340180e-02, -4.011336647977014e-02, -4.759911656211016e-02, -4.373389441819255e-02, -4.373389441819255e-02, -5.835254376081292e-02, -9.802072827697716e-03, -1.533373687352742e-02, -2.821907686209640e-02, -2.140593323581355e-02, -2.140593323581355e-02, -3.143726950902441e-02, -3.080542006690138e-05, -1.149899701395366e-04, -3.267203278042945e-02, -6.683022685833711e-04, -6.683022685833711e-04, -3.131436563677497e-07, -3.301758264061866e-11, -5.927955327327965e-10, -6.764747613710923e-04, -5.545855330520303e-09, -5.545855334423430e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zpbeint_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.354853517332401e-01, -1.354861876705695e-01, -1.354887220838094e-01, -1.354750576636262e-01, -1.354858025656943e-01, -1.354858025656943e-01, -1.160224732132744e-01, -1.160266470200451e-01, -1.161416991625677e-01, -1.159454068682756e-01, -1.160246602807993e-01, -1.160246602807993e-01, -8.170325968884644e-02, -8.148023509710786e-02, -7.438268041409560e-02, -7.488453864492803e-02, -8.162318347888085e-02, -8.162318347888085e-02, -4.215898784235732e-02, -4.382593527466825e-02, -8.990494104751653e-02, -1.707975281954936e-02, -4.268442385391885e-02, -4.268442385391885e-02, -1.323738338829150e-06, -1.635177169089587e-06, -3.185422235326692e-04, -3.289811165651286e-08, -1.620605747562030e-06, -1.620605747562030e-06, -1.345267975314398e-01, -1.346756236384754e-01, -1.345416857494709e-01, -1.346574121615581e-01, -1.346035905032385e-01, -1.346035905032385e-01, -8.320387758499451e-02, -8.411542477365605e-02, -8.194237137810204e-02, -8.266466911884005e-02, -8.544049116489645e-02, -8.544049116489645e-02, -8.469121907279240e-02, -8.139990999560076e-02, -8.326844944239738e-02, -8.098279099370795e-02, -8.564261766227214e-02, -8.564261766227214e-02, -5.372426303471870e-03, -2.693353932662996e-02, -5.855493977457728e-03, -1.171939308658736e-01, -1.070669835880988e-02, -1.070669835880988e-02, -2.956104138442165e-08, -5.482758143669224e-08, -4.139345307400092e-08, -1.293379817394698e-03, -5.274915236993770e-08, -5.274915237456032e-08, -7.497368077235120e-02, -7.900211755455966e-02, -7.774371091742739e-02, -7.663484924562318e-02, -7.720490277808492e-02, -7.720490277808492e-02, -7.323976532807787e-02, -7.909457269936244e-02, -8.197690584514616e-02, -8.200292664689519e-02, -8.236133190578267e-02, -8.236133190578267e-02, -8.334400966096697e-02, -3.921976793759845e-02, -5.244638630963532e-02, -6.980257002815524e-02, -6.243098545033200e-02, -6.243098545033197e-02, -7.626452175982215e-02, -1.933318683070950e-04, -7.057508771746830e-04, -6.988685292102069e-02, -3.846239851840954e-03, -3.846239851840943e-03, -2.027110238623158e-06, -2.175441226803686e-10, -3.891120959411599e-09, -3.887584121331268e-03, -3.629408302487068e-08, -3.629408303190020e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zpbeint_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.955494769543708e-10, 1.955523569557114e-10, 1.955558937116415e-10, 1.955089280635556e-10, 1.955510735946717e-10, 1.955510735946717e-10, 1.084837230156059e-06, 1.085001298514288e-06, 1.089304552927015e-06, 1.080786872773694e-06, 1.084899080985287e-06, 1.084899080985287e-06, 1.704237634160914e-03, 1.693810849518729e-03, 1.401710036385105e-03, 1.374460986206191e-03, 1.700520162932034e-03, 1.700520162932034e-03, 2.339925984071445e-01, 2.403273634078852e-01, 9.801946845508452e-04, 2.031207294548436e-01, 2.362080120838755e-01, 2.362080120838755e-01, 4.845056307099113e-02, 5.219644150626611e-02, 1.050050987506401e-01, 9.086742628687137e-03, 5.440380912725666e-02, 5.440380912725666e-02, 2.772057920149790e-07, 2.788727824094201e-07, 2.773702774753016e-07, 2.786663751371380e-07, 2.780657760968513e-07, 2.780657760968513e-07, 6.646546901107586e-06, 6.611127192714474e-06, 6.467321187265999e-06, 6.441949935875434e-06, 6.859998466218199e-06, 6.859998466218199e-06, 5.687615760931452e-03, 6.589460562956836e-03, 6.929098258110305e-03, 8.746520433147191e-03, 5.181344365670990e-03, 5.181344365670990e-03, 1.403745231707949e-01, 8.793608500871443e-02, 1.720589279631681e-01, 5.357998726209582e-05, 2.081681603653201e-01, 2.081681603653201e-01, 9.364671269852189e-03, 1.166332172389679e-02, 3.530557260550463e-02, 1.655983025974436e-01, 1.801614621581466e-02, 1.801614621546785e-02, 9.589551861222420e-03, 8.582036435130396e-03, 8.916334514462275e-03, 9.194652523615857e-03, 9.053267848042919e-03, 9.053267848042921e-03, 1.120117455183274e-02, 7.605991357837805e-03, 8.284603286194596e-03, 9.124659668798817e-03, 8.693000567321519e-03, 8.693000567321522e-03, 5.285864420281212e-03, 5.804379144642709e-02, 4.729016932676802e-02, 3.418984617363970e-02, 4.172374383388582e-02, 4.172374383388584e-02, 1.155416757968213e-02, 7.275874649959779e-02, 1.117457689071675e-01, 5.567173117398975e-02, 2.365575469121958e-01, 2.365575469121983e-01, 4.004510551720607e-02, 2.930354937165322e-03, 7.122483114775801e-03, 3.054032900223863e-01, 2.437190904804600e-02, 2.437190905187986e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
