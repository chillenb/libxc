
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_jrgx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.761961321816680e-02, -6.762047904098714e-02, -6.762294315522348e-02, -6.761009094418365e-02, -6.761702179048543e-02, -6.761702179048543e-02, -5.593864492964996e-02, -5.594373710398343e-02, -5.606169923082439e-02, -5.585736571705812e-02, -5.594481083794031e-02, -5.594481083794031e-02, -3.802635777433170e-02, -3.780248782067977e-02, -3.221227061085888e-02, -3.249911157802533e-02, -3.250012968931081e-02, -3.250012968931081e-02, -1.164769532042203e-02, -1.245019916967837e-02, -4.090122958421571e-02, -4.570255957482339e-03, -4.738310010914824e-03, -4.738310010914824e-03, -1.698621854197974e-08, -2.266149209517038e-08, -2.515202081843949e-05, -1.220479297486810e-09, -3.151022051790797e-09, -3.151022051790797e-09, -7.330073386154454e-02, -7.349776587852019e-02, -7.330885964530720e-02, -7.348279975036714e-02, -7.340099595743688e-02, -7.340099595743688e-02, -3.314198863023793e-02, -3.368682768984597e-02, -3.192631267626612e-02, -3.239971205429820e-02, -3.404624567550511e-02, -3.404624567550511e-02, -4.717299181529366e-02, -5.987698413561129e-02, -4.460992142173782e-02, -5.580793432568427e-02, -4.862723552969476e-02, -4.862723552969473e-02, -1.063637153277428e-03, -6.861537759796182e-03, -8.368922200897508e-04, -7.968414494118810e-02, -2.581467308957162e-03, -2.581467308957162e-03, -4.762602812125039e-10, -1.292233250092811e-09, -2.296018069680023e-09, -2.282586052412272e-04, -2.252138386373004e-09, -2.252138390276132e-09, -6.193579479175705e-02, -5.855694155507171e-02, -5.970923814983053e-02, -6.069188188246046e-02, -6.019722290803323e-02, -6.019722290803323e-02, -6.234331788980557e-02, -3.661779958198014e-02, -4.311324129281485e-02, -5.032950342534817e-02, -4.663001107190586e-02, -4.663001107190586e-02, -6.021266561483608e-02, -1.110538720390830e-02, -1.713536592836652e-02, -3.189758216060649e-02, -2.412688100949132e-02, -2.412688100949132e-02, -3.563360851137269e-02, -1.907632282779383e-05, -7.189819863032826e-05, -3.590438539250990e-02, -7.132623525484619e-04, -7.132623525484688e-04, -6.623215038567554e-08, -1.208803640951467e-11, -2.010902677013204e-10, -5.528766891394823e-04, -2.026487144974123e-09, -2.026487141070996e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_jrgx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.454661426606901e-01, -1.454663275595697e-01, -1.454669554319152e-01, -1.454672672232575e-01, -1.454697939202367e-01, -1.454694492001660e-01, -1.454560674879653e-01, -1.454571610904756e-01, -1.454627115931188e-01, -1.454645415873892e-01, -1.454627115931188e-01, -1.454645415873892e-01, -1.232919670979910e-01, -1.232937798483581e-01, -1.232958203638622e-01, -1.232978904801046e-01, -1.233905582725238e-01, -1.233878184545615e-01, -1.232320186902088e-01, -1.232301562028070e-01, -1.233228157946008e-01, -1.232731092803479e-01, -1.233228157946008e-01, -1.232731092803479e-01, -8.711466515728224e-02, -8.672120421128741e-02, -8.703547854613466e-02, -8.655406610741320e-02, -8.251476754673458e-02, -8.313099600690313e-02, -8.327040507568824e-02, -8.307629504193137e-02, -8.031743943407507e-02, -8.619010628874654e-02, -8.031743943407507e-02, -8.619010628874654e-02, -4.285900720535043e-02, -4.128943797007330e-02, -4.469800627449556e-02, -4.282105126336564e-02, -9.294953458408808e-02, -8.947660678109232e-02, -2.149552974150291e-02, -2.123386492341351e-02, -1.906657773504939e-02, -3.364476441660022e-02, -1.906657773504942e-02, -3.364476441660022e-02, -1.131527460242018e-07, -1.088841813848613e-07, -1.513512356031181e-07, -1.448644962760117e-07, -1.619413438223453e-04, -1.552317684875458e-04, -7.960053938014722e-09, -8.040877047504535e-09, -1.944969795598462e-08, -2.669258534869360e-08, -1.944969795251517e-08, -2.669258534869360e-08, -1.399065994782936e-01, -1.399456252232536e-01, -1.400222465866930e-01, -1.400623862117263e-01, -1.399110636014273e-01, -1.399508190847846e-01, -1.400139223510690e-01, -1.400531525523757e-01, -1.399654338383095e-01, -1.400052174187618e-01, -1.399654338383095e-01, -1.400052174187618e-01, -9.504229981635318e-02, -9.504687133268096e-02, -9.581459811326709e-02, -9.583952425424773e-02, -9.339495621255374e-02, -9.324301848442265e-02, -9.410705192082527e-02, -9.394701169274597e-02, -9.609742258751215e-02, -9.650265679418379e-02, -9.609742258751215e-02, -9.650265679418379e-02, -8.434723201662914e-02, -8.464354494071633e-02, -8.043898165374561e-02, -8.038131096084621e-02, -8.459212957946953e-02, -8.071080704806759e-02, -8.036343043984730e-02, -7.641452978268498e-02, -8.172942912110090e-02, -8.754847363858841e-02, -8.172942912110090e-02, -8.754847363858838e-02, -5.967606004136671e-03, -5.919956188645594e-03, -2.981488657794319e-02, -2.967989918640548e-02, -4.864609138792194e-03, -4.655548130852659e-03, -1.157345515785972e-01, -1.158097678667754e-01, -1.353212905081880e-02, -1.287099083733396e-02, -1.353212905081880e-02, -1.287099083733396e-02, -3.164505261886619e-09, -3.093640003346871e-09, -8.509970826405748e-09, -8.433608269936631e-09, -1.534996825772214e-08, -1.484194833645289e-08, -1.378487050128486e-03, -1.371624495487077e-03, -1.679892289700334e-08, -1.397464241781289e-08, -1.679892290158409e-08, -1.397464242065892e-08, -7.458108300579717e-02, -7.409111068649221e-02, -7.791475815421384e-02, -7.743110384861038e-02, -7.686392419575225e-02, -7.637641858175455e-02, -7.589609536860650e-02, -7.540979303634132e-02, -7.639125946498931e-02, -7.590439067283039e-02, -7.639125946498931e-02, -7.590439067283039e-02, -7.256439824416155e-02, -7.214657385334690e-02, -8.010977016433453e-02, -7.969860807984734e-02, -8.157487709679488e-02, -8.111033469566030e-02, -8.047306052570691e-02, -8.007174071812882e-02, -8.135044560667111e-02, -8.094376645533778e-02, -8.135044560667111e-02, -8.094376645533778e-02, -8.242583264839493e-02, -8.221686125966002e-02, -4.236895552894013e-02, -4.213727084515479e-02, -5.534901952867231e-02, -5.479321514588742e-02, -7.116466326080503e-02, -7.069691769648924e-02, -6.460660849581583e-02, -6.463154861447858e-02, -6.460660849581581e-02, -6.463154861447858e-02, -7.811014059485000e-02, -7.747254848131417e-02, -1.207563264883489e-04, -1.201214883763409e-04, -4.516788158767702e-04, -4.399823684913027e-04, -7.065970343182267e-02, -6.931076566123669e-02, -4.182295935837658e-03, -3.996758309570378e-03, -4.182295935837644e-03, -3.996758309570367e-03, -4.359579256483507e-07, -4.258647001950114e-07, -7.987352243785473e-11, -7.977326951557151e-11, -1.348584984453396e-09, -1.301730158011052e-09, -3.232257039464506e-03, -3.189061834232373e-03, -1.487596343496985e-08, -1.261517024559410e-08, -1.487596342948107e-08, -1.261517024162321e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_jrgx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_jrgx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.964991410271639e-10, 3.929982820543278e-10, 1.964991410271639e-10, 1.965022298131277e-10, 3.930044596262554e-10, 1.965022298131277e-10, 1.965058115608358e-10, 3.930116231216716e-10, 1.965058115608358e-10, 1.964600756088231e-10, 3.929201512176462e-10, 1.964600756088231e-10, 1.964854797698776e-10, 3.929709595397554e-10, 1.964854797698776e-10, 1.964854797698776e-10, 3.929709595397554e-10, 1.964854797698776e-10, 1.063010838527296e-06, 2.126021677054592e-06, 1.063010838527296e-06, 1.063194163460967e-06, 2.126388326921935e-06, 1.063194163460967e-06, 1.067319469770072e-06, 2.134638939540145e-06, 1.067319469770072e-06, 1.059191305169691e-06, 2.118382610339381e-06, 1.059191305169691e-06, 1.063106694721925e-06, 2.126213389443850e-06, 1.063106694721925e-06, 1.063106694721925e-06, 2.126213389443850e-06, 1.063106694721925e-06, 1.678729623522141e-03, 3.357459247044282e-03, 1.678729623522141e-03, 1.671823275670441e-03, 3.343646551340884e-03, 1.671823275670441e-03, 1.481651157219243e-03, 2.963302314438487e-03, 1.481651157219243e-03, 1.442803696468701e-03, 2.885607392937401e-03, 1.442803696468701e-03, 1.460887802295544e-03, 2.921775604591088e-03, 1.460887802295544e-03, 1.460887802295544e-03, 2.921775604591088e-03, 1.460887802295544e-03, 2.207139939013207e-01, 4.414279878026414e-01, 2.207139939013207e-01, 2.251925027633706e-01, 4.503850055267411e-01, 2.251925027633706e-01, 8.975863150322023e-04, 1.795172630064404e-03, 8.975863150322023e-04, 2.255212727981118e-01, 4.510425455962239e-01, 2.255212727981118e-01, 1.748286813220816e-01, 3.496573626441634e-01, 1.748286813220816e-01, 1.748286813220819e-01, 3.496573626441636e-01, 1.748286813220819e-01, 1.337194773038412e-02, 2.674389546108876e-02, 1.337194773038412e-02, 1.572592115060507e-02, 3.145184230070919e-02, 1.572592115060507e-02, 7.847672926600777e-02, 1.569534585320168e-01, 7.847672926600777e-02, 4.753740992094363e-03, 9.507481984390276e-03, 4.753740992094363e-03, 6.973080158155918e-03, 1.394616031612061e-02, 6.973080158155918e-03, 6.973080158501475e-03, 1.394616031614297e-02, 6.973080158501475e-03, 2.634842248970230e-07, 5.269684497940461e-07, 2.634842248970230e-07, 2.649839479371935e-07, 5.299678958743869e-07, 2.649839479371935e-07, 2.635438750796706e-07, 5.270877501593412e-07, 2.635438750796706e-07, 2.648677130713105e-07, 5.297354261426211e-07, 2.648677130713105e-07, 2.642473749569228e-07, 5.284947499138454e-07, 2.642473749569228e-07, 2.642473749569228e-07, 5.284947499138454e-07, 2.642473749569228e-07, 7.140698260623667e-06, 1.428139652124733e-05, 7.140698260623667e-06, 7.074509670595358e-06, 1.414901934119072e-05, 7.074509670595358e-06, 6.904331327032227e-06, 1.380866265406445e-05, 6.904331327032227e-06, 6.848441521730419e-06, 1.369688304346084e-05, 6.848441521730419e-06, 7.221081290544910e-06, 1.444216258108982e-05, 7.221081290544910e-06, 7.221081290544910e-06, 1.444216258108982e-05, 7.221081290544910e-06, 4.585874844648560e-03, 9.171749689297121e-03, 4.585874844648560e-03, 4.775288111927198e-03, 9.550576223854395e-03, 4.775288111927198e-03, 6.070767830492226e-03, 1.214153566098445e-02, 6.070767830492226e-03, 7.476619844413183e-03, 1.495323968882637e-02, 7.476619844413183e-03, 4.487895696668129e-03, 8.975791393336260e-03, 4.487895696668129e-03, 4.487895696668131e-03, 8.975791393336261e-03, 4.487895696668131e-03, 1.630682990601774e-01, 3.261365981203550e-01, 1.630682990601774e-01, 1.029246836979717e-01, 2.058493673959434e-01, 1.029246836979717e-01, 1.692316828476915e-01, 3.384633656953828e-01, 1.692316828476915e-01, 4.401515265524126e-05, 8.803030531048253e-05, 4.401515265524126e-05, 2.723324082470180e-01, 5.446648164940355e-01, 2.723324082470180e-01, 2.723324082470180e-01, 5.446648164940355e-01, 2.723324082470180e-01, 4.635699348679049e-03, 9.271398695849467e-03, 4.635699348679049e-03, 5.844564038875541e-03, 1.168912807874027e-02, 5.844564038875541e-03, 5.820936718209842e-02, 1.164187343563645e-01, 5.820936718209842e-02, 1.801546906695146e-01, 3.603093813390298e-01, 1.801546906695146e-01, 2.227880960698534e-02, 4.455761921504774e-02, 2.227880960698534e-02, 2.227880961203546e-02, 4.455761922587705e-02, 2.227880961203546e-02, 7.415454107201984e-03, 1.483090821440397e-02, 7.415454107201984e-03, 6.824010195583045e-03, 1.364802039116609e-02, 6.824010195583045e-03, 7.019508673742235e-03, 1.403901734748447e-02, 7.019508673742235e-03, 7.191465158623439e-03, 1.438293031724688e-02, 7.191465158623439e-03, 7.104352366117302e-03, 1.420870473223460e-02, 7.104352366117302e-03, 7.104352366117302e-03, 1.420870473223460e-02, 7.104352366117302e-03, 8.565372224317636e-03, 1.713074444863527e-02, 8.565372224317636e-03, 7.069138456172255e-03, 1.413827691234451e-02, 7.069138456172255e-03, 7.345061858355820e-03, 1.469012371671164e-02, 7.345061858355820e-03, 7.741003321851262e-03, 1.548200664370253e-02, 7.741003321851262e-03, 7.543855133308474e-03, 1.508771026661695e-02, 7.543855133308474e-03, 7.543855133308474e-03, 1.508771026661695e-02, 7.543855133308474e-03, 3.850530847878894e-03, 7.701061695757787e-03, 3.850530847878894e-03, 6.485377308449715e-02, 1.297075461689943e-01, 6.485377308449715e-02, 4.893533954351933e-02, 9.787067908703866e-02, 4.893533954351933e-02, 3.079927847946725e-02, 6.159855695893449e-02, 3.079927847946725e-02, 4.046314690303634e-02, 8.092629380607268e-02, 4.046314690303634e-02, 4.046314690303635e-02, 8.092629380607270e-02, 4.046314690303635e-02, 1.010577336777512e-02, 2.021154673555023e-02, 1.010577336777512e-02, 6.474849532526053e-02, 1.294969906505197e-01, 6.474849532526053e-02, 9.688809044234875e-02, 1.937761808846974e-01, 9.688809044234875e-02, 4.375822190906829e-02, 8.751644381813657e-02, 4.375822190906829e-02, 2.913790993406792e-01, 5.827581986813570e-01, 2.913790993406792e-01, 2.913790993406765e-01, 5.827581986813524e-01, 2.913790993406765e-01, 1.665546717200334e-02, 3.331093434445972e-02, 1.665546717200334e-02, 6.340751882155487e-03, 1.268150372242278e-02, 6.340751882155487e-03, 7.934651204207039e-03, 1.586930240595321e-02, 7.934651204207039e-03, 2.731804933654536e-01, 5.463609867309080e-01, 2.731804933654536e-01, 2.843724177679105e-02, 5.687448355077884e-02, 2.843724177679105e-02, 2.843724176551362e-02, 5.687448353309878e-02, 2.843724176551362e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
