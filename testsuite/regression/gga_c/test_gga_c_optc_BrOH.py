
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_optc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.416277490124955e-02, -6.416333863183526e-02, -6.416506757614279e-02, -6.415585260879565e-02, -6.416307876296885e-02, -6.416307876296885e-02, -4.759210916426168e-02, -4.759534876370240e-02, -4.768470608494076e-02, -4.753200440815260e-02, -4.759379830021820e-02, -4.759379830021820e-02, -2.848163549484463e-02, -2.829144441783685e-02, -2.324887265074065e-02, -2.353328119540901e-02, -2.841308341700771e-02, -2.841308341700771e-02, -1.007481354897523e-02, -1.077719776036967e-02, -3.483113202581865e-02, -2.859589573743980e-03, -1.029170189155381e-02, -1.029170189155381e-02, -1.323611012058337e-07, -1.638688276842662e-07, -3.604662583522368e-05, -3.199860224081056e-09, -1.623377525046563e-07, -1.623377525046563e-07, -6.248904365187009e-02, -6.264023088063086e-02, -6.250412769405277e-02, -6.262168339516953e-02, -6.256696981706511e-02, -6.256696981706511e-02, -2.741025864664067e-02, -2.786136133301407e-02, -2.680684149852099e-02, -2.715749495070381e-02, -2.851429835558061e-02, -2.851429835558061e-02, -3.857656375436877e-02, -5.182838993516585e-02, -3.729751224153808e-02, -4.759432221958454e-02, -4.060047472623649e-02, -4.060047472623649e-02, -7.425252055466277e-04, -5.147562219800397e-03, -8.152323374831737e-04, -6.760021485186911e-02, -1.627009821380955e-03, -1.627009821380955e-03, -2.872345132934069e-09, -5.348680128385519e-09, -4.006473917697286e-09, -1.567423574314173e-04, -5.132369391242490e-09, -5.132369391242490e-09, -5.522422578121952e-02, -5.161933973302342e-02, -5.287113002614066e-02, -5.387230961272791e-02, -5.336838380687860e-02, -5.336838380687860e-02, -5.519095155661412e-02, -3.020407164183096e-02, -3.616979361287087e-02, -4.261179613438022e-02, -3.928092990963509e-02, -3.928092990963510e-02, -5.201897300771399e-02, -8.693966567700349e-03, -1.380011015821659e-02, -2.546432480337958e-02, -1.933658997101865e-02, -1.933658997101865e-02, -2.855895214135124e-02, -2.155556788414559e-05, -8.296798381062206e-05, -2.931457763083414e-02, -5.077017847152473e-04, -5.077017847152521e-04, -2.041815345883594e-07, -2.061613767029618e-11, -3.732134986433800e-10, -5.117618650317735e-04, -3.515585270381642e-09, -3.515585269204670e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_optc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.228022197381306e-01, -1.228027623852822e-01, -1.228044347211158e-01, -1.227955641526093e-01, -1.228025121682260e-01, -1.228025121682260e-01, -1.017561793554943e-01, -1.017588977313455e-01, -1.018340493585599e-01, -1.017067711764918e-01, -1.017576215653600e-01, -1.017576215653600e-01, -7.252287632835804e-02, -7.235885587623725e-02, -6.710757400879801e-02, -6.750363977296107e-02, -7.246397192816065e-02, -7.246397192816065e-02, -3.765527542559717e-02, -3.920896937613452e-02, -7.891957802547415e-02, -1.444957597522061e-02, -3.814512025151139e-02, -3.814512025151139e-02, -8.602112843240223e-07, -1.064380954720623e-06, -2.264869269378896e-04, -2.094238720173484e-08, -1.054525493442934e-06, -1.054525493442934e-06, -1.160352118081369e-01, -1.161477095064917e-01, -1.160464567210883e-01, -1.161339320283550e-01, -1.160932243026491e-01, -1.160932243026491e-01, -7.849150293316791e-02, -7.911015535793937e-02, -7.767137948054210e-02, -7.816431111364280e-02, -7.995424792906679e-02, -7.995424792906679e-02, -7.452214509488653e-02, -7.221190395492139e-02, -7.332880928055301e-02, -7.176167699630839e-02, -7.536265380350735e-02, -7.536265380350735e-02, -4.266651128942493e-03, -2.369628157185921e-02, -4.654629511020789e-03, -1.026454611174221e-01, -8.788252286326438e-03, -8.788252286326438e-03, -1.880372813210163e-08, -3.497899010080426e-08, -2.625218428268866e-08, -9.580510297471342e-04, -3.358543416357504e-08, -3.358543415610830e-08, -6.641824196359467e-02, -7.011704210600414e-02, -6.899036219195659e-02, -6.796284070874892e-02, -6.849458527631232e-02, -6.849458527631232e-02, -6.490921782172653e-02, -6.993739730102601e-02, -7.224982379563784e-02, -7.244971685605475e-02, -7.263302860978986e-02, -7.263302860978986e-02, -7.389480038927856e-02, -3.522912597428919e-02, -4.732325613887273e-02, -6.219100726941621e-02, -5.604617699833453e-02, -5.604617699833452e-02, -6.760133907006165e-02, -1.362430327377185e-04, -5.144230013312335e-04, -6.216165598035183e-02, -2.973325807689215e-03, -2.973325807689226e-03, -1.324818702747074e-06, -1.359101064268585e-10, -2.451757008870510e-09, -2.993969776787665e-03, -2.303170445316605e-08, -2.303170445106525e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_optc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_optc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.438287405710001e-10, 1.438306469264738e-10, 1.438326031228644e-10, 1.438015236557136e-10, 1.438298006495502e-10, 1.438298006495502e-10, 8.381281814694438e-07, 8.382471692135407e-07, 8.413575142079659e-07, 8.351412221547569e-07, 8.381718700503393e-07, 8.381718700503393e-07, 1.445041173573189e-03, 1.437054033603307e-03, 1.213193274973509e-03, 1.188015872201808e-03, 1.442196206456609e-03, 1.442196206456609e-03, 2.091984141216448e-01, 2.152666860782619e-01, 8.141936183914178e-04, 1.715497678309699e-01, 2.113092819866369e-01, 2.113092819866369e-01, 3.143721126807315e-02, 3.392334877720894e-02, 7.441970151753255e-02, 5.778577696977649e-03, 3.534592591244880e-02, 3.534592591244880e-02, 2.082212287101213e-07, 2.094810868320272e-07, 2.083454888068063e-07, 2.093250276844480e-07, 2.088710387810058e-07, 2.088710387810058e-07, 5.756245663333871e-06, 5.702710955328059e-06, 5.633852174583860e-06, 5.593785578198654e-06, 5.881578377471921e-06, 5.881578377471921e-06, 4.826344035116409e-03, 5.746951111525058e-03, 5.893888659411959e-03, 7.597031112108283e-03, 4.398496685298768e-03, 4.398496685298768e-03, 1.110955088405997e-01, 7.708261327004620e-02, 1.363434058732784e-01, 4.444498416474071e-05, 1.704705540239091e-01, 1.704705540239091e-01, 5.950907319133033e-03, 7.432997557285804e-03, 2.237090473305405e-02, 1.222569503565029e-01, 1.145925601422916e-02, 1.145925601301974e-02, 8.136585767184672e-03, 7.495472953767876e-03, 7.769522056216109e-03, 7.955171385516945e-03, 7.867240097431795e-03, 7.867240097431795e-03, 9.471184079582811e-03, 6.502873706549161e-03, 7.063428189161928e-03, 7.848285462972227e-03, 7.433211102940988e-03, 7.433211102940989e-03, 4.600334861038948e-03, 5.183246857576078e-02, 4.228691506546300e-02, 2.991951697675146e-02, 3.697345702719550e-02, 3.697345702719553e-02, 9.948357934669123e-03, 5.110870748346151e-02, 8.116796790512602e-02, 4.879617779451696e-02, 1.823426418576763e-01, 1.823426418576773e-01, 2.612783124804861e-02, 1.829740711556638e-03, 4.484426656521214e-03, 2.345999493819544e-01, 1.545175344002884e-02, 1.545175343651622e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
