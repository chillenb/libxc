
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_revtca_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.214786914895124e-02, -6.214839536978493e-02, -6.214989540494828e-02, -6.214208362402276e-02, -6.214629620500191e-02, -6.214629620500191e-02, -5.209078245548177e-02, -5.209473621649810e-02, -5.218630803355204e-02, -5.202799771916388e-02, -5.209562527985977e-02, -5.209562527985977e-02, -3.071754123179106e-02, -3.050509907352308e-02, -2.534486111835145e-02, -2.563528036460194e-02, -2.575289120619621e-02, -2.575289120619621e-02, -5.453893676138719e-03, -5.872861929021219e-03, -3.413189030488203e-02, -2.083878601418663e-03, -3.265885675592311e-03, -3.265885675592310e-03, -1.279288802723648e-07, -1.562204110848014e-07, -2.980232572813437e-05, -1.991944145067295e-08, -4.845382372268236e-08, -4.845382372268243e-08, -6.438891811368451e-02, -6.449949908897952e-02, -6.439348994255537e-02, -6.449111821358224e-02, -6.444524830051460e-02, -6.444524830051460e-02, -3.100511062761403e-02, -3.151079548387663e-02, -2.991670117743098e-02, -3.035545090799555e-02, -3.182615954092486e-02, -3.182615954092486e-02, -3.913068969690562e-02, -5.175633870348097e-02, -3.635689906059645e-02, -4.793986396108430e-02, -4.076152552662624e-02, -4.076152552662624e-02, -5.873290844402693e-04, -3.395400659905396e-03, -4.773286394205952e-04, -6.658653727435447e-02, -1.201415266936333e-03, -1.201415266936333e-03, -9.942768247040467e-09, -2.030417567242658e-08, -2.415611758038691e-08, -1.584649216675316e-04, -2.871873284887971e-08, -2.871873284887969e-08, -5.351244472168584e-02, -5.054320391609766e-02, -5.160228454289959e-02, -5.247152697083926e-02, -5.203836117163779e-02, -5.203836117163779e-02, -5.378181642708862e-02, -2.799845172092333e-02, -3.461853131182183e-02, -4.224439917152598e-02, -3.832477319220771e-02, -3.832477319220771e-02, -5.206901826929044e-02, -5.840368700664084e-03, -9.714279136745768e-03, -2.210703536769545e-02, -1.499668325387643e-02, -1.499668325387644e-02, -2.670926401907700e-02, -2.445598096319557e-05, -6.738467443904239e-05, -2.592022149176934e-02, -3.857205807224364e-04, -3.857205807224367e-04, -3.499458190359126e-07, -6.564160384490841e-10, -4.981083633277758e-09, -3.125576820981218e-04, -2.544187991285767e-08, -2.544187991285762e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_revtca_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.094994301067770e-01, -1.094991468755635e-01, -1.094983488093649e-01, -1.095025519631036e-01, -1.095002845873863e-01, -1.095002845873863e-01, -1.050218528907634e-01, -1.050216250054965e-01, -1.050161839045182e-01, -1.050265911310296e-01, -1.050217545691723e-01, -1.050217545691723e-01, -7.764495262000248e-02, -7.743993685571347e-02, -7.109671766414608e-02, -7.158802923024091e-02, -7.173648220554654e-02, -7.173648220554654e-02, -2.030513675231806e-02, -2.164021740257819e-02, -8.247809853344441e-02, -8.428630373261857e-03, -1.280795528469185e-02, -1.280795528469185e-02, -5.620579084450280e-07, -6.863008497993427e-07, -1.298160195281186e-04, -8.757195088939426e-08, -2.129702880660179e-07, -2.129702880660182e-07, -1.021603607836357e-01, -1.020604759233268e-01, -1.021562620066272e-01, -1.020680911356855e-01, -1.021095899851776e-01, -1.021095899851776e-01, -8.672309843635098e-02, -8.749409243910330e-02, -8.503855637201135e-02, -8.574702446024941e-02, -8.794134407828894e-02, -8.794134407828894e-02, -7.795822139708085e-02, -7.034786793917339e-02, -7.622378909943418e-02, -7.025027125904620e-02, -7.794871921612487e-02, -7.794871921612487e-02, -2.484479238782760e-03, -1.335752394576009e-02, -2.027458991256685e-03, -8.530547516978121e-02, -4.977949182610112e-03, -4.977949182610112e-03, -4.371985376824968e-08, -8.926493702412650e-08, -1.062186399473722e-07, -6.832132251961015e-04, -1.262654526274831e-07, -1.262654526274830e-07, -6.378946947015769e-02, -6.837234174757829e-02, -6.684233750911971e-02, -6.549895931868462e-02, -6.617811644953019e-02, -6.617811644953019e-02, -6.185897512402577e-02, -7.069248636691541e-02, -7.485153433361656e-02, -7.398934579815371e-02, -7.516439379424282e-02, -7.516439379424282e-02, -7.193768397238032e-02, -2.187556244129999e-02, -3.372898205990984e-02, -5.951413595737210e-02, -4.683319942318440e-02, -4.683319942318440e-02, -6.824809539167925e-02, -1.065981869376812e-04, -2.923494165744847e-04, -6.218635693669246e-02, -1.644232097039836e-03, -1.644232097039837e-03, -1.536536529958177e-06, -2.887597860658405e-09, -2.190665765483797e-08, -1.336779236349005e-03, -1.118646410620988e-07, -1.118646410620986e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_revtca_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_revtca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.191333175380706e-10, 1.191331385767004e-10, 1.191294614488915e-10, 1.191321820965109e-10, 1.191311668681579e-10, 1.191311668681579e-10, 8.244521058732651e-07, 8.245429646854870e-07, 8.265450512150103e-07, 8.222973348217418e-07, 8.244632859423539e-07, 8.244632859423539e-07, 1.558181525874011e-03, 1.548599721540810e-03, 1.290550200708907e-03, 1.260866267383119e-03, 1.282812706211559e-03, 1.282812706211559e-03, 1.014500648469517e-01, 1.069583715801469e-01, 8.376160717836131e-04, 7.943559071038707e-02, 9.558655820200408e-02, 9.558655820200404e-02, 5.796633748648799e-02, 6.240685258818683e-02, 5.460792031584082e-02, 4.462725629119348e-02, 6.168841838732044e-02, 6.168841838732059e-02, 1.479308675846689e-07, 1.481229968749826e-07, 1.479376903964484e-07, 1.481073537238177e-07, 1.480295610084904e-07, 1.480295610084904e-07, 6.292589472041591e-06, 6.240868361770685e-06, 6.068237857192890e-06, 6.026282504734076e-06, 6.373777106375897e-06, 6.373777106375897e-06, 4.667966107657100e-03, 4.312136563580897e-03, 6.229472212257951e-03, 7.431163320203941e-03, 4.572356065671923e-03, 4.572356065671923e-03, 5.879825679992107e-02, 4.191592693500443e-02, 6.211600231133340e-02, 2.231263766681681e-05, 9.026441920135808e-02, 9.026441920135808e-02, 5.566103871601783e-02, 5.282266556253978e-02, 3.523266906984860e-01, 7.633062777614903e-02, 1.634363160771073e-01, 1.634363160771071e-01, 5.946960477592001e-03, 6.382047290734294e-03, 6.331104447946189e-03, 6.224234691036596e-03, 6.287052728866630e-03, 6.287052728866630e-03, 6.218590378524977e-03, 6.738627510410474e-03, 7.539499385259472e-03, 8.122663026211837e-03, 7.903768960442894e-03, 7.903768960442894e-03, 3.442153057864925e-03, 3.139873957852499e-02, 2.932527997556865e-02, 2.847875712201395e-02, 3.035915946256050e-02, 3.035915946256052e-02, 9.620687395492081e-03, 4.862226136262717e-02, 5.400918717407516e-02, 4.547506495252258e-02, 1.008780299736826e-01, 1.008780299736827e-01, 5.068887520796498e-02, 1.979974032281548e-01, 1.130337752626809e-01, 9.755169738178346e-02, 2.053875130388501e-01, 2.053875130388506e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
