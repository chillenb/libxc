
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gapc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.989005771098694e-02, -3.989048208687578e-02, -3.989169049457513e-02, -3.988539157407670e-02, -3.988878811000062e-02, -3.988878811000062e-02, -3.944672625747748e-02, -3.945069268876455e-02, -3.954254032632620e-02, -3.938240185086907e-02, -3.945138376853124e-02, -3.945138376853124e-02, -3.254860330280510e-02, -3.236674281871547e-02, -2.804785394932659e-02, -2.824810577971743e-02, -2.835868262854153e-02, -2.835868262854153e-02, -1.280174559824025e-02, -1.340439662028683e-02, -3.456102359520653e-02, -6.922958139944001e-03, -9.327753820005551e-03, -9.327753820005549e-03, -7.110300900830245e-08, -9.226659474589369e-08, -9.962397387111502e-05, -6.289440397268312e-09, -1.956197375247561e-08, -1.956197375247563e-08, -5.148814761911626e-02, -5.168058921454495e-02, -5.149605413631281e-02, -5.166593029079583e-02, -5.158598950484995e-02, -5.158598950484995e-02, -2.644482676255089e-02, -2.674861516139887e-02, -2.575097921601125e-02, -2.601014578039440e-02, -2.696378915008172e-02, -2.696378915008172e-02, -4.157126229452217e-02, -5.661040806259138e-02, -3.931841720543804e-02, -5.226998168929466e-02, -4.317422079277053e-02, -4.317422079277053e-02, -2.697233287032487e-03, -9.277517441843755e-03, -2.273522319784150e-03, -7.109946205765708e-02, -4.782408535553912e-03, -4.782408535553912e-03, -2.466221258137410e-09, -6.324208240952051e-09, -6.670424600203352e-09, -7.685897906658446e-04, -8.946365940849585e-09, -8.946365940849572e-09, -6.068576855148571e-02, -5.565612229948218e-02, -5.731885062507636e-02, -5.877919543651030e-02, -5.803911029005174e-02, -5.803911029005174e-02, -6.173769198561688e-02, -3.205521819837493e-02, -3.796354611430710e-02, -4.561140505735980e-02, -4.153251734919238e-02, -4.153251734919238e-02, -5.656381080001624e-02, -1.282031164493595e-02, -1.728067618321065e-02, -2.855237403052193e-02, -2.240634141381626e-02, -2.240634141381626e-02, -3.136737050474314e-02, -7.651739226858666e-05, -2.768275929174450e-04, -3.224495129489585e-02, -1.949864540153371e-03, -1.949864540153370e-03, -2.725450798633650e-07, -5.883922676582137e-11, -9.091065986311950e-10, -1.594020304338959e-03, -7.459453419361267e-09, -7.459453403438202e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gapc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.805492816255329e-02, -7.805605553370557e-02, -7.805918619662580e-02, -7.804245418621829e-02, -7.805148797620109e-02, -7.805148797620109e-02, -9.000001257138425e-02, -9.000827392563107e-02, -9.019938660675295e-02, -8.986589139319548e-02, -9.000970654687088e-02, -9.000970654687088e-02, -7.217267508882381e-02, -7.191232244103767e-02, -6.517605001389626e-02, -6.554055144212051e-02, -6.571508283375933e-02, -6.571508283375933e-02, -3.507302948560593e-02, -3.623604765779263e-02, -7.610942368375069e-02, -2.212025852707960e-02, -2.776708638162121e-02, -2.776708638162120e-02, -3.697747535287561e-07, -4.835815744127329e-07, -5.610721495554706e-04, -3.098461668428364e-08, -9.944407999174498e-08, -9.944407999174504e-08, -1.137498137790607e-01, -1.140941956047809e-01, -1.137639955039296e-01, -1.140680182828515e-01, -1.139250859057964e-01, -1.139250859057964e-01, -6.197528663802634e-02, -6.267662296856868e-02, -6.032306857092352e-02, -6.092708656681563e-02, -6.318966268415838e-02, -6.318966268415838e-02, -7.945875170121895e-02, -8.223830290155426e-02, -7.667610521044421e-02, -7.965031520619424e-02, -8.061510041594486e-02, -8.061510041594486e-02, -1.067885397217356e-02, -2.764516243197749e-02, -9.382679090974070e-03, -1.180702639613410e-01, -1.659857276116698e-02, -1.659857276116698e-02, -1.204065960417548e-08, -3.132590825042400e-08, -3.531458656010226e-08, -3.836454684779786e-03, -4.635232443786683e-08, -4.635232443786680e-08, -7.562524817226532e-02, -7.944884157053027e-02, -7.842392273836522e-02, -7.732915739518083e-02, -7.790671062060074e-02, -7.790671062060074e-02, -7.306204123341518e-02, -6.886045636995650e-02, -7.489075063289967e-02, -7.902139067201908e-02, -7.734165049472265e-02, -7.734165049472265e-02, -8.408125162927252e-02, -3.527156852920876e-02, -4.401584549197193e-02, -6.149534700104126e-02, -5.278100637690805e-02, -5.278100637690804e-02, -6.725145826161773e-02, -4.313779502035175e-04, -1.490367766356418e-03, -6.415270107696895e-02, -8.414267591783214e-03, -8.414267591783200e-03, -1.447849197697813e-06, -2.807137380407591e-10, -4.458545359592816e-09, -7.163531902106123e-03, -3.882288862148537e-08, -3.882288853132578e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gapc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gapc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.623979591123663e-11, 9.624322815012399e-11, 9.625019493409654e-11, 9.619931431217286e-11, 9.622714846953686e-11, 9.622714846953686e-11, 8.307841136521435e-07, 8.310153078758674e-07, 8.362802558549525e-07, 8.263583576580574e-07, 8.309595188774581e-07, 8.309595188774581e-07, 1.388791770222392e-03, 1.377075833343364e-03, 1.101205834906240e-03, 1.076094244994012e-03, 1.096071645914857e-03, 1.096071645914857e-03, 1.576851065137036e-01, 1.605706202784790e-01, 7.612144316960081e-04, 1.976370211406213e-01, 1.915027011627491e-01, 1.915027011627490e-01, 3.860987047311743e-02, 4.476226575980162e-02, 2.590584030751669e-01, 1.533731841047432e-02, 2.863835331584744e-02, 2.863835331584749e-02, 2.592875399588974e-07, 2.617638080687585e-07, 2.593871112503627e-07, 2.615728327721265e-07, 2.605460174125633e-07, 2.605460174125633e-07, 4.186992094755831e-06, 4.180961132969587e-06, 3.966678483271495e-06, 3.960738662386177e-06, 4.296827856274983e-06, 4.296827856274983e-06, 4.860209727222169e-03, 6.829934177025879e-03, 6.206324675734834e-03, 1.017507159887976e-02, 4.926751342655345e-03, 4.926751342655345e-03, 2.589756238212756e-01, 7.974515342951333e-02, 2.978371901005675e-01, 6.297951568622595e-05, 2.960245925755091e-01, 2.960245925755091e-01, 1.476314664670463e-02, 1.806909542913196e-02, 1.189527585237829e-01, 4.611479042019376e-01, 6.019503353747301e-02, 6.019503353747285e-02, 1.173340601756342e-02, 9.829111102516632e-03, 1.043741646080259e-02, 1.098934690220502e-02, 1.070766746827867e-02, 1.070766746827867e-02, 1.395141508870491e-02, 6.124410264481410e-03, 7.342484961738350e-03, 9.217196250001409e-03, 8.199315413463568e-03, 8.199315413463568e-03, 5.428096518843076e-03, 4.550500626323428e-02, 3.394716304757425e-02, 2.629412835054651e-02, 3.023469425446354e-02, 3.023469425446355e-02, 8.752675470519212e-03, 2.154926157903008e-01, 3.024699891040329e-01, 4.200917420779273e-02, 5.404035981503172e-01, 5.404035981503167e-01, 4.920997847484038e-02, 1.812971694733368e-02, 2.217338869276537e-02, 5.516037345770013e-01, 7.167449927659134e-02, 7.167449912359487e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
