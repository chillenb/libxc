
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_erf_gws_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.048048568411077e-02, -5.048122299529875e-02, -5.048344876390176e-02, -5.047139725525050e-02, -5.048088340607539e-02, -5.048088340607539e-02, -4.013312133590526e-02, -4.013720397358542e-02, -4.024962801170926e-02, -4.005640989433076e-02, -4.013522705797518e-02, -4.013522705797518e-02, -2.497406758280162e-02, -2.478875586751917e-02, -1.993799410017988e-02, -2.018609623598993e-02, -2.490726701182895e-02, -2.490726701182895e-02, -1.038141571234290e-02, -1.073204294224234e-02, -3.106493027605399e-02, -5.675966588940120e-03, -1.048929582606307e-02, -1.048929582606307e-02, -6.581832541756032e-06, -7.563722801339777e-06, -4.784856547223153e-04, -7.268267995663545e-07, -7.329971794322392e-06, -7.329971794322392e-06, -5.738345169521356e-02, -5.758597168446841e-02, -5.740364835591607e-02, -5.756111735202520e-02, -5.748783554177209e-02, -5.748783554177209e-02, -1.964856756024621e-02, -2.007993379157209e-02, -1.904944156951976e-02, -1.938080547271528e-02, -2.074740625598404e-02, -2.074740625598404e-02, -3.443408458657456e-02, -4.624513871687386e-02, -3.308925574355800e-02, -4.183253903462519e-02, -3.639586499295461e-02, -3.639586499295461e-02, -3.171525166271009e-03, -7.835217789874747e-03, -3.175516569252316e-03, -6.810635900474928e-02, -4.321681712552053e-03, -4.321681712552053e-03, -6.525261320982076e-07, -9.739506791505009e-07, -4.101356039703845e-07, -1.163053539939547e-03, -7.368005143876783e-07, -7.368005143876783e-07, -4.815909940753687e-02, -4.536870956749599e-02, -4.634217858268371e-02, -4.711513060134753e-02, -4.672642877405626e-02, -4.672642877405626e-02, -4.762014312339995e-02, -2.674197719071992e-02, -3.191583738390402e-02, -3.741846198223274e-02, -3.458873977154307e-02, -3.458873977154307e-02, -4.694037574463261e-02, -1.028768161863927e-02, -1.374314181437616e-02, -2.196596196171952e-02, -1.754170160146713e-02, -1.754170160146713e-02, -2.517032471462653e-02, -3.839164547369196e-04, -8.775963956306239e-04, -2.384525062222952e-02, -2.201685806547612e-03, -2.201685806547616e-03, -1.059093053005402e-05, -1.999003127627346e-08, -1.370305069526557e-07, -2.013435798659720e-03, -4.522986612939749e-07, -4.522986612970106e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_erf_gws_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.266199946092530e-01, -1.266209026562379e-01, -1.266236529115018e-01, -1.266088097584585e-01, -1.266204843547477e-01, -1.266204843547477e-01, -1.067780512155849e-01, -1.067829484779899e-01, -1.069178718164603e-01, -1.066872662417498e-01, -1.067806087834287e-01, -1.067806087834287e-01, -6.767729647905403e-02, -6.747805045184754e-02, -6.118916554215623e-02, -6.166792616612547e-02, -6.760570467959602e-02, -6.760570467959602e-02, -2.300378829546900e-02, -2.349659874177712e-02, -7.672146261895535e-02, -1.327865219996735e-02, -2.315351109694148e-02, -2.315351109694148e-02, -1.317895767690476e-05, -1.514672922162256e-05, -9.734821388699288e-04, -1.454102101147067e-06, -1.467798766682452e-05, -1.467798766682452e-05, -1.275198895712396e-01, -1.276940417830555e-01, -1.275373050156059e-01, -1.276727241996718e-01, -1.276097449151326e-01, -1.276097449151326e-01, -7.025205520115066e-02, -7.122964220081424e-02, -6.889696209611379e-02, -6.966668739437740e-02, -7.267000156899928e-02, -7.267000156899928e-02, -6.746793400415782e-02, -6.653339841613805e-02, -6.541001533823557e-02, -6.431505364582012e-02, -6.882163959976292e-02, -6.882163959976292e-02, -7.177553069517767e-03, -2.137177771524488e-02, -7.042460657890291e-03, -1.108695836960145e-01, -9.781101921910439e-03, -9.781101921910439e-03, -1.305419538276430e-06, -1.948611006239598e-06, -8.203891836275491e-07, -2.389066779883650e-03, -1.473989035542704e-06, -1.473989035542704e-06, -6.170071696779803e-02, -6.386003438869667e-02, -6.316298613058066e-02, -6.256636222584623e-02, -6.287109290420659e-02, -6.287109290420659e-02, -6.011205226458709e-02, -6.123477779533804e-02, -6.354222294916718e-02, -6.398297534752563e-02, -6.397877128713261e-02, -6.397877128713260e-02, -6.876686384521261e-02, -2.879012774220586e-02, -3.614149054473186e-02, -4.745084322755466e-02, -4.200828571915719e-02, -4.200828571915718e-02, -5.727586286918904e-02, -7.822886503597171e-04, -1.804011224439109e-03, -4.507802247420235e-02, -4.604497281533593e-03, -4.604497281533613e-03, -2.121963320900114e-05, -3.998110094374175e-08, -2.740857181241171e-07, -4.141227810967330e-03, -9.047496022697172e-07, -9.047496022748057e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_erf_gws_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.923727669593599e-10, 1.923758195194557e-10, 1.923799548277143e-10, 1.923301670925330e-10, 1.923744560326465e-10, 1.923744560326465e-10, 1.059159429011203e-06, 1.059332821894619e-06, 1.063898348010124e-06, 1.054956127673534e-06, 1.059226598910207e-06, 1.059226598910207e-06, 1.426968904231049e-03, 1.418330288397419e-03, 1.173299290371357e-03, 1.152057669770167e-03, 1.423888723587643e-03, 1.423888723587643e-03, 7.949735798149896e-02, 7.933969170265048e-02, 8.543744689564375e-04, 9.300684400510319e-02, 7.948099352240950e-02, 7.948099352240950e-02, 1.011460791436516e-03, 1.115178421883216e-03, 2.664543117205282e-02, 2.288099486433927e-04, 1.090802248816417e-03, 1.090802248816417e-03, 2.803043975828343e-07, 2.820893870160214e-07, 2.804805871756622e-07, 2.818684256020789e-07, 2.812251062289475e-07, 2.812251062289475e-07, 5.859884102942880e-06, 5.848625080089935e-06, 5.673925854272589e-06, 5.667081959503621e-06, 6.100178294769123e-06, 6.100178294769123e-06, 4.237349755786533e-03, 4.599198637768026e-03, 5.035814211621420e-03, 5.899426043595120e-03, 3.891532581209265e-03, 3.891532581209265e-03, 8.864629154124143e-02, 5.615400423519074e-02, 9.016209992167150e-02, 5.448797966327913e-05, 9.611517834593927e-02, 9.611517834593927e-02, 2.133126303999404e-04, 2.770887482945664e-04, 1.580931226561709e-04, 5.229116537886186e-02, 2.308398719270753e-04, 2.308398719270753e-04, 6.120743746549292e-03, 5.706072824029171e-03, 5.848363335584333e-03, 5.963214188604345e-03, 5.905276708071836e-03, 5.905276708071836e-03, 6.909903846812225e-03, 5.553497932092120e-03, 5.879611434183208e-03, 6.232565022578088e-03, 6.060895176558238e-03, 6.060895176558238e-03, 3.828248537577743e-03, 3.654370471930980e-02, 2.797032908979018e-02, 1.935808218379835e-02, 2.370387224122442e-02, 2.370387224122442e-02, 7.978709199487233e-03, 2.240434155685854e-02, 4.271053580940990e-02, 2.672649069365580e-02, 7.835221717352171e-02, 7.835221717352250e-02, 1.415767819508552e-03, 2.448575761558657e-05, 7.911198119547244e-05, 7.461796013940690e-02, 1.683399171145149e-04, 1.683399171176557e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
