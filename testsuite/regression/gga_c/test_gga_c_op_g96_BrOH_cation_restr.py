
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_g96_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.824536960244654e-02, -5.824560937701599e-02, -5.824629530963107e-02, -5.824273579752941e-02, -5.824465495004520e-02, -5.824465495004520e-02, -5.152652788576021e-02, -5.152830694037835e-02, -5.156955845921163e-02, -5.149868592842610e-02, -5.152876521695052e-02, -5.152876521695052e-02, -3.448024041865147e-02, -3.437439156974652e-02, -3.165109852540501e-02, -3.185321567988115e-02, -3.190473336109630e-02, -3.190473336109630e-02, -1.125095781079599e-02, -1.172520353867017e-02, -3.703996038686989e-02, -6.039965172893203e-03, -8.169086026404976e-03, -8.169086026404969e-03, -1.411436865818367e-07, -1.840960673541999e-07, -1.060609057566270e-04, -1.258640243223991e-08, -4.176352686817657e-08, -4.176352686817665e-08, -5.786806704367158e-02, -5.791878115892588e-02, -5.787016556993688e-02, -5.791493859705007e-02, -5.789389340797312e-02, -5.789389340797312e-02, -3.946638000368654e-02, -3.978009000034570e-02, -3.880749905290035e-02, -3.908676394909236e-02, -3.995958467983841e-02, -3.995958467983841e-02, -3.703576166180103e-02, -4.289164534081855e-02, -3.530389901381716e-02, -4.023670364263480e-02, -3.780789952053489e-02, -3.780789952053489e-02, -2.212483863131793e-03, -8.666005593341276e-03, -1.842105106700720e-03, -5.621534854902228e-02, -3.987684324733152e-03, -3.987684324733152e-03, -5.423029633523900e-09, -1.336557049836737e-08, -2.384218750409407e-08, -6.493587910198618e-04, -2.590624773753466e-08, -2.590624773753460e-08, -4.337744590773328e-02, -4.170731645341014e-02, -4.224650617201529e-02, -4.272650010106813e-02, -4.248202234174300e-02, -4.248202234174300e-02, -4.352329610741688e-02, -3.105509759274937e-02, -3.418808261231048e-02, -3.753319680399708e-02, -3.582367345304421e-02, -3.582367345304421e-02, -4.337837900583487e-02, -1.242025899402901e-02, -1.677213847898549e-02, -2.574100307451833e-02, -2.112062658596038e-02, -2.112062658596038e-02, -2.985481911712690e-02, -8.376247979659611e-05, -2.612352828484708e-04, -2.706342718962696e-02, -1.529118355034474e-03, -1.529118355034474e-03, -4.889826517633377e-07, -2.195827195302706e-10, -2.604181801566692e-09, -1.260351229097981e-03, -2.317144776025264e-08, -2.317144776025260e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_g96_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.985907103078556e-02, -7.985895390348978e-02, -7.985862642492725e-02, -7.986036490340299e-02, -7.985942656561032e-02, -7.985942656561032e-02, -7.608109635515310e-02, -7.608046283854517e-02, -7.606590802097328e-02, -7.609222905185455e-02, -7.608047345840706e-02, -7.608047345840706e-02, -5.840950958774371e-02, -5.839663390649853e-02, -5.787200931429153e-02, -5.803382101820428e-02, -5.800840703725565e-02, -5.800840703725565e-02, -2.775675485458648e-02, -2.837295187025272e-02, -6.097486694565501e-02, -1.848341964190108e-02, -2.263745463244879e-02, -2.263745463244878e-02, -8.617049864267209e-07, -1.118900421572035e-06, -5.513630408079226e-04, -7.905219934067257e-08, -2.579479780539616e-07, -2.579479780539623e-07, -7.566477420706928e-02, -7.563584499260959e-02, -7.566358818685995e-02, -7.563804957263405e-02, -7.565005106197691e-02, -7.565005106197691e-02, -7.293262774512618e-02, -7.303431074079260e-02, -7.278855008952399e-02, -7.288852159079330e-02, -7.304792261441478e-02, -7.304792261441478e-02, -5.505914614914725e-02, -5.411971634274779e-02, -5.383851630512124e-02, -5.255621500725313e-02, -5.514175445249057e-02, -5.514175445249057e-02, -8.521911390895432e-03, -2.460901729814966e-02, -7.295392700636800e-03, -6.735191210519723e-02, -1.344668210015883e-02, -1.344668210015883e-02, -3.416338768004061e-08, -8.365225332855518e-08, -1.431956887872926e-07, -2.919108915184597e-03, -1.578009771787545e-07, -1.578009771787542e-07, -5.163353894895401e-02, -5.265489263394978e-02, -5.234679454703511e-02, -5.205515454265293e-02, -5.220570929129487e-02, -5.220570929129487e-02, -5.072413695960300e-02, -5.251992672739882e-02, -5.297221682445082e-02, -5.278693736176761e-02, -5.295602132064550e-02, -5.295602132064550e-02, -5.503301942079689e-02, -3.152809879590120e-02, -3.756030074706761e-02, -4.533599952492176e-02, -4.188377742401016e-02, -4.188377742401014e-02, -5.086495322660493e-02, -4.419720531211201e-04, -1.284008185109861e-03, -4.442529002467742e-02, -6.120783233609226e-03, -6.120783233609225e-03, -2.947213803650140e-06, -1.385563440403692e-09, -1.629462311711802e-08, -5.192280024982986e-03, -1.406719115586764e-07, -1.406719115586761e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_g96_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.399396128990520e-11, 5.399390539456158e-11, 5.399231211886321e-11, 5.399317192456685e-11, 5.399291241085476e-11, 5.399291241085476e-11, 3.698893105717041e-07, 3.699212355776889e-07, 3.706164149964075e-07, 3.690668349471388e-07, 3.698839903424567e-07, 3.698839903424567e-07, 7.212750231210440e-04, 7.200790379959108e-04, 6.844622718133212e-04, 6.645283931089262e-04, 6.732304318176750e-04, 6.732304318176750e-04, 1.051370761200168e-01, 1.048183947490644e-01, 3.777736830581676e-04, 1.512648981769351e-01, 1.382652268005627e-01, 1.382652268005626e-01, 1.030684376582934e-01, 1.177712960594444e-01, 2.535505585154472e-01, 4.729899506100477e-02, 8.707722479262725e-02, 8.707722479262757e-02, 6.737345545403299e-08, 6.752588084976916e-08, 6.737920856551936e-08, 6.751376798279420e-08, 6.745123972738467e-08, 6.745123972738467e-08, 3.675678503389675e-06, 3.603689445456946e-06, 3.642541341329779e-06, 3.579455970159435e-06, 3.651903403750311e-06, 3.651903403750311e-06, 1.839985731413751e-03, 2.049918967895617e-03, 2.467398473012927e-03, 3.208213974431475e-03, 1.795225873070736e-03, 1.795225873070736e-03, 1.963462068588819e-01, 6.460818126229062e-02, 2.201621619028806e-01, 1.187001490793312e-05, 2.226079496797886e-01, 2.226079496797886e-01, 5.113060240164198e-02, 5.802710528695690e-02, 5.461349232105934e-01, 3.377914929769980e-01, 2.364626359307480e-01, 2.364626359307471e-01, 4.033182227588157e-03, 3.046499062171447e-03, 3.272227713700534e-03, 3.530619953887561e-03, 3.390642029884649e-03, 3.390642029884649e-03, 5.611207279204508e-03, 2.991679922539352e-03, 3.004079924943899e-03, 3.169812720330842e-03, 3.066961121934465e-03, 3.066961121934465e-03, 1.603151594796157e-03, 3.544605139861252e-02, 2.349963104453150e-02, 1.295944452553573e-02, 1.780841465783047e-02, 1.780841465783046e-02, 4.275815576746002e-03, 2.216071519550815e-01, 2.542144464358756e-01, 1.818439556539116e-02, 3.708277759312528e-01, 3.708277759312529e-01, 1.121833220277692e-01, 1.117429036797726e-01, 9.852261246379812e-02, 3.787524389213490e-01, 2.985159443790495e-01, 2.985159443790501e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
