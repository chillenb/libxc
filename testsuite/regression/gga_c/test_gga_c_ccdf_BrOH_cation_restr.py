
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_ccdf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ccdf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.755666033249971e-02, -2.755752190378942e-02, -2.755997066196410e-02, -2.754718573710669e-02, -2.755407897095921e-02, -2.755407897095921e-02, -2.213349716037630e-02, -2.213478983174140e-02, -2.216519185669194e-02, -2.211299004247645e-02, -2.213505002879461e-02, -2.213505002879461e-02, -2.078633959995807e-02, -2.078436634232194e-02, -2.075873489177560e-02, -2.076348456193316e-02, -2.076255388727258e-02, -2.076255388727258e-02, -1.930095257268547e-02, -1.932851550659754e-02, -2.088855094841343e-02, -1.873296349725876e-02, -1.898694284809328e-02, -1.898694284809328e-02, -5.287614832722862e-03, -5.493912752828915e-03, -1.401401264606200e-02, -3.410787644168507e-03, -4.117085283678629e-03, -4.117085283678629e-03, -3.816425478874034e-02, -3.840067069577991e-02, -3.817407583493147e-02, -3.838284635312958e-02, -3.828506447695445e-02, -3.828506447695445e-02, -2.114331046117807e-02, -2.114479965486043e-02, -2.114214922620683e-02, -2.114344829449445e-02, -2.114473176003828e-02, -2.114473176003828e-02, -2.305948564037846e-02, -4.513539209729319e-02, -2.164153670562166e-02, -4.418944625035313e-02, -2.517764066243231e-02, -2.517764066243231e-02, -1.777644222215394e-02, -1.930375040498177e-02, -1.753935084078418e-02, -4.605904421850646e-02, -1.822659905300302e-02, -1.822659905300302e-02, -2.731370103276977e-03, -3.346332963991133e-03, -2.656814754110550e-03, -1.613978341379745e-02, -3.121103601257695e-03, -3.121103601257695e-03, -4.537100165867192e-02, -4.508093318817002e-02, -4.525229471403908e-02, -4.532630812670647e-02, -4.529494742590356e-02, -4.529494742590356e-02, -4.534719901589569e-02, -2.059223775193943e-02, -2.117576438197998e-02, -3.350524300429999e-02, -2.388742811810633e-02, -2.388742811810633e-02, -4.505397855254434e-02, -1.969575230944109e-02, -1.995311042797861e-02, -2.027686698218502e-02, -2.012248052246407e-02, -2.012248052246407e-02, -2.052518107670206e-02, -1.380176047020954e-02, -1.523622923284267e-02, -2.031599156940276e-02, -1.703070920843025e-02, -1.703070920843025e-02, -6.772286836113364e-03, -1.010604185507689e-03, -2.016359864383487e-03, -1.681031934390702e-02, -2.919891216580519e-03, -2.919891216580517e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_ccdf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ccdf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.049617467527832e-01, -1.049686829516853e-01, -1.049883906181805e-01, -1.048853992639098e-01, -1.049409582690293e-01, -1.049409582690293e-01, -3.903927570966328e-02, -3.906205518087513e-02, -3.959634584690519e-02, -3.867691527325815e-02, -3.906659456203677e-02, -3.906659456203677e-02, -2.128232246928505e-02, -2.124807242211673e-02, -2.096266400439374e-02, -2.096827582975078e-02, -2.096919128614582e-02, -2.096919128614582e-02, -1.991590919033291e-02, -1.993602900840104e-02, -2.189331813699429e-02, -1.949601683503852e-02, -1.968501963396582e-02, -1.968501963396582e-02, -6.613448603449065e-03, -6.853771426353730e-03, -1.561779024004620e-02, -4.366007451658677e-03, -5.224689846907213e-03, -5.224689846907213e-03, -1.173482210772483e-01, -1.161399984125003e-01, -1.172991702084154e-01, -1.162330808048619e-01, -1.167379483148319e-01, -1.167379483148319e-01, -2.121650290309064e-02, -2.121977910091750e-02, -2.121221822846755e-02, -2.121422761625200e-02, -2.122158212563120e-02, -2.122158212563120e-02, -6.164392623959622e-02, -4.884413911732439e-02, -4.020859882416442e-02, -5.651785537990514e-02, -8.753827780862547e-02, -8.753827780862547e-02, -1.876612083615413e-02, -1.991795257398520e-02, -1.858078244139413e-02, -4.887654817920561e-02, -1.911318393628444e-02, -1.911318393628444e-02, -3.525299110295427e-03, -4.286870622873779e-03, -3.432166625750210e-03, -1.745093827885838e-02, -4.009317102218865e-03, -4.009317102218865e-03, -4.593387902053449e-02, -4.824720975318228e-02, -4.676828414884902e-02, -4.621010313054141e-02, -4.643658898207444e-02, -4.643658898207444e-02, -4.583531564502823e-02, -2.124141054994733e-02, -3.245606677773860e-02, -1.249455887822362e-01, -7.354287826201635e-02, -7.354287826201635e-02, -5.022109092300471e-02, -2.020183224199362e-02, -2.038559624376019e-02, -2.070908176051779e-02, -2.050587703870528e-02, -2.050587703870528e-02, -2.110730984239655e-02, -1.542700441241741e-02, -1.668901200225649e-02, -2.247410390673229e-02, -1.817724390461717e-02, -1.817724390461717e-02, -8.313343558784393e-03, -1.331519692928792e-03, -2.624975372254772e-03, -1.799988466183194e-02, -3.760019824038807e-03, -3.760019824038804e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_ccdf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_ccdf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.959574826856989e-10, 1.959759461734748e-10, 1.960231797902647e-10, 1.957491711231164e-10, 1.958977174737187e-10, 1.958977174737187e-10, 2.699435354748410e-07, 2.703396582704451e-07, 2.796203074651259e-07, 2.634269916214413e-07, 2.703859790612155e-07, 2.703859790612155e-07, 1.112560137978411e-05, 9.900425902442027e-06, 4.509162202821877e-07, 5.067094713782506e-07, 5.608979499000754e-07, 5.608979499000754e-07, 1.238594838597052e-11, 4.387236332962305e-11, 1.569896892977577e-05, 4.125478849801372e-19, 2.964003324805548e-15, 2.964003324805527e-15, 0.000000000000000e+00, 0.000000000000000e+00, 1.472443369036276e-93, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.201279411615454e-07, 3.165290224285584e-07, 3.199810278504849e-07, 3.168068428822669e-07, 3.183221589801343e-07, 3.183221589801343e-07, 9.137056431920458e-10, 1.159210228078249e-09, 4.991229268273115e-10, 6.185790064231449e-10, 1.394405309708440e-09, 1.394405309708440e-09, 5.217967907260665e-03, 1.096216986993557e-03, 3.221163023422556e-03, 5.301330363953059e-03, 8.730117310980166e-03, 8.730117310980166e-03, 8.141406567214532e-33, 2.606536390889504e-16, 2.563180583230274e-35, 3.812730573757575e-06, 7.630369065138997e-24, 7.630369065138997e-24, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.003191542566956e-51, 0.000000000000000e+00, 0.000000000000000e+00, 1.552139313453343e-04, 1.443174677794949e-03, 7.227684739153574e-04, 3.815994198946769e-04, 5.296997809267899e-04, 5.296997809267899e-04, 7.242373704221590e-05, 6.951741116805255e-05, 2.318862070793971e-03, 2.782144028681101e-02, 1.216185846160570e-02, 1.216185846160570e-02, 1.142599422806491e-03, 7.658026100425826e-13, 1.156861971998826e-09, 7.903094179707118e-05, 4.868460467790579e-07, 4.868460467790607e-07, 8.033692117735312e-05, 9.948082112044091e-101, 2.380941823728420e-71, 2.560484595965503e-03, 1.082701399856814e-36, 1.082701399856830e-36, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.346012361180157e-40, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
