
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_sg4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.589498950187623e-02, -4.589582350535908e-02, -4.589819412118443e-02, -4.588581465435619e-02, -4.589249114621190e-02, -4.589249114621190e-02, -3.607162155665057e-02, -3.607677099696775e-02, -3.619609995501301e-02, -3.598926711625565e-02, -3.607784851631837e-02, -3.607784851631837e-02, -1.777613749343824e-02, -1.753199557002501e-02, -1.203839405658221e-02, -1.229830794874207e-02, -1.245447455149964e-02, -1.245447455149964e-02, -1.605106795245829e-03, -1.841490149854054e-03, -2.094902639273728e-02, -3.186909286355677e-04, -5.001561820335940e-03, -5.001561820335943e-03, -8.413096001559394e-04, -9.846541076380670e-04, -2.991696842602840e-04, -1.089233442116613e-04, -2.448489658576700e-03, -2.448489658576700e-03, -5.359733891012829e-02, -5.381225194938077e-02, -5.360619280500861e-02, -5.379591391227885e-02, -5.370667008544644e-02, -5.370667008544644e-02, -1.517144614527101e-02, -1.560542496072560e-02, -1.424023208622564e-02, -1.460763637805237e-02, -1.588947747994514e-02, -1.588947747994514e-02, -3.065089788314261e-02, -5.285904367542681e-02, -2.735548188132760e-02, -4.727410638502218e-02, -3.296426785415901e-02, -3.296426785415896e-02, -4.304830262981049e-05, -5.408773412483581e-04, -1.544364063671422e-04, -6.819893535291571e-02, -2.297758858276731e-04, -2.297758858276731e-04, -4.823477630563249e-04, -7.862610516091171e-05, -3.148918909730999e-04, -7.993930446092978e-06, -2.022520863181883e-03, -2.022520863181883e-03, -5.945451325025834e-02, -5.213082574838382e-02, -5.458594414537191e-02, -5.671726964614437e-02, -5.564039460180165e-02, -5.564039460180165e-02, -6.119437416322993e-02, -1.678691006842114e-02, -2.544333594151588e-02, -3.726072853737329e-02, -3.093465570093462e-02, -3.093465570093462e-02, -5.244854477430778e-02, -1.203318310011574e-03, -2.871993140763730e-03, -1.302898667547696e-02, -6.410077734457724e-03, -6.410077734457724e-03, -1.595001919564857e-02, -5.566428410402890e-06, -9.313053840516103e-05, -1.880505496592600e-02, -1.360012434196839e-04, -1.360012434197221e-04, -2.967777719286484e-04, -1.222081965440236e-06, -7.093541981818177e-04, -2.906526160373346e-05, -1.904833361327415e-03, -1.904833361327418e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_sg4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.208374977773515e-01, -1.208313408098341e-01, -1.208407136398626e-01, -1.208303318853353e-01, -1.208329278016124e-01, -1.208444041576888e-01, -1.208405046219141e-01, -1.208040644021909e-01, -1.208615915769915e-01, -1.208006430114708e-01, -1.208615915769915e-01, -1.208006430114708e-01, -1.038341210171487e-01, -1.038309326792376e-01, -1.038414132883013e-01, -1.038377746054047e-01, -1.040007430506236e-01, -1.040054884384697e-01, -1.037181440994812e-01, -1.037214550312801e-01, -1.037973439587371e-01, -1.038847084554332e-01, -1.037973439587371e-01, -1.038847084554332e-01, -7.134394264403478e-02, -7.125938972302871e-02, -7.082129712791518e-02, -7.072461761031014e-02, -5.660758815111760e-02, -5.645573437797751e-02, -5.730671206957659e-02, -5.735125568277619e-02, -5.765430943350756e-02, -5.638742472858772e-02, -5.765430943350756e-02, -5.638742472858772e-02, -9.734079699533963e-03, -1.068456612555484e-02, -1.107077398489545e-02, -1.199418810744612e-02, -7.824989116263793e-02, -7.739797282535155e-02, -1.831311341597586e-03, -2.668751632015587e-03, 3.430611322261916e-03, 3.045326400803456e-02, 3.430611322261969e-03, 3.045326400803466e-02, 1.931697457844322e-02, -1.333001405003921e-02, 1.998980067507860e-02, -1.315370812470719e-02, 8.522369839789226e-03, -6.007825999021718e-03, -7.999450002562348e-03, 8.887955903825948e-03, -2.735674303877887e-03, -5.360986007400919e-03, -2.735674303877887e-03, -5.360986007400919e-03, -1.254681552404146e-01, -1.254479648826772e-01, -1.256731713224918e-01, -1.256533141065554e-01, -1.254768064967201e-01, -1.254562758303228e-01, -1.256574269113918e-01, -1.256379523645182e-01, -1.255726203109292e-01, -1.255524983202908e-01, -1.255726203109292e-01, -1.255524983202908e-01, -6.340019061393211e-02, -6.337415460077324e-02, -6.463047834724413e-02, -6.449464970885516e-02, -6.027052532639503e-02, -6.124735091511011e-02, -6.130090700138830e-02, -6.229129160820543e-02, -6.636302408004303e-02, -6.424296210838840e-02, -6.636302408004303e-02, -6.424296210838840e-02, -8.737540456875445e-02, -8.758991302738177e-02, -8.776841728715123e-02, -8.771380294536810e-02, -8.519969233734036e-02, -8.254438000953770e-02, -8.849526952465378e-02, -8.483345109640292e-02, -8.682379297400789e-02, -9.124593664325788e-02, -8.682379297400787e-02, -9.124593664325784e-02, 2.785334492052009e-04, -8.439810052836846e-04, -3.652053135696833e-03, -3.988549220277591e-03, 3.515884348778980e-03, -2.881717058038384e-03, -1.191894453708037e-01, -1.192559332654822e-01, 1.441218575367374e-03, -2.722892678922668e-03, 1.441218575367374e-03, -2.722892678922668e-03, 1.602496145127416e-02, -1.272020222973180e-02, 7.184484825371781e-03, -6.537778121647868e-03, 7.843310026299729e-03, -5.513019069585863e-03, 4.221813046932606e-04, -4.969709325227218e-04, -3.373510952812717e-03, -2.290669658308964e-03, -3.373510952812713e-03, -2.290669658308963e-03, -7.794163273183469e-02, -7.745843179633435e-02, -8.505612179535432e-02, -8.459516534451121e-02, -8.300521767450815e-02, -8.253436725023418e-02, -8.094721845218854e-02, -8.047282085080081e-02, -8.201865277463938e-02, -8.154600834081534e-02, -8.201865277463938e-02, -8.154600834081534e-02, -7.418860912452276e-02, -7.377326670678364e-02, -6.790096717181739e-02, -6.773475243604825e-02, -8.154692838766500e-02, -8.124075885850880e-02, -8.819353608083079e-02, -8.785537385608337e-02, -8.603158248432755e-02, -8.572266342774169e-02, -8.603158248432755e-02, -8.572266342774169e-02, -8.998038213010803e-02, -8.978428242906158e-02, -7.957515585198586e-03, -8.269522224823873e-03, -1.763633225618238e-02, -1.792225928575365e-02, -5.662204563138127e-02, -5.642819199913938e-02, -3.449898037752009e-02, -3.449967709306140e-02, -3.449898037752010e-02, -3.449967709306143e-02, -6.559047916800675e-02, -6.532622810295878e-02, 1.054895001284612e-03, -1.014208632984278e-03, 4.092601730777076e-03, -3.331086045946975e-03, -6.775018155805300e-02, -6.689600490195258e-02, 2.986915538953730e-03, -2.431682181394357e-03, 2.986915538953800e-03, -2.431682181394336e-03, 1.200338235149619e-02, -9.591929581999420e-03, 7.182333672277033e-04, -7.080070755246276e-04, 1.222968824415579e-02, -8.761538353387924e-03, 7.815380642464129e-04, -9.748635098675322e-04, -2.790826732026452e-03, -2.172883381566593e-03, -2.790826732026452e-03, -2.172883381566594e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_sg4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_sg4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.896260490489024e-10, 3.792520980978048e-10, 1.896260490489024e-10, 1.896297031761531e-10, 3.792594063523063e-10, 1.896297031761531e-10, 1.896350479021529e-10, 3.792700958043058e-10, 1.896350479021529e-10, 1.895809149623612e-10, 3.791618299247224e-10, 1.895809149623612e-10, 1.896108226368624e-10, 3.792216452737247e-10, 1.896108226368624e-10, 1.896108226368624e-10, 3.792216452737247e-10, 1.896108226368624e-10, 1.075454071889987e-06, 2.150908143779974e-06, 1.075454071889987e-06, 1.075691153921682e-06, 2.151382307843365e-06, 1.075691153921682e-06, 1.081060619940186e-06, 2.162121239880372e-06, 1.081060619940186e-06, 1.070744147620434e-06, 2.141488295240868e-06, 1.070744147620434e-06, 1.075608787798539e-06, 2.151217575597077e-06, 1.075608787798539e-06, 1.075608787798539e-06, 2.151217575597077e-06, 1.075608787798539e-06, 1.844153148110272e-03, 3.688306296220544e-03, 1.844153148110272e-03, 1.822045521656047e-03, 3.644091043312093e-03, 1.822045521656047e-03, 1.290370734628695e-03, 2.580741469257390e-03, 1.290370734628695e-03, 1.270353761610678e-03, 2.540707523221355e-03, 1.270353761610678e-03, 1.278079861657895e-03, 2.556159723315791e-03, 1.278079861657895e-03, 1.278079861657895e-03, 2.556159723315791e-03, 1.278079861657895e-03, 6.557454143809971e-02, 1.311490828761994e-01, 6.557454143809971e-02, 7.335153797270107e-02, 1.467030759454021e-01, 7.335153797270107e-02, 1.019174562298479e-03, 2.038349124596959e-03, 1.019174562298479e-03, 2.701826508532391e-02, 5.403653017064783e-02, 2.701826508532391e-02, -1.618066265785876e-01, -3.236132531571753e-01, -1.618066265785876e-01, -1.618066265785882e-01, -3.236132531571763e-01, -1.618066265785882e-01, -4.371876729682313e+02, -8.743753459364625e+02, -4.371876729682313e+02, -4.428168922250945e+02, -8.856337844501890e+02, -4.428168922250945e+02, -7.076230167086448e-01, -1.415246033417290e+00, -7.076230167086448e-01, -3.108332335585455e+02, -6.216664671170910e+02, -3.108332335585455e+02, -7.604757268713200e-09, -1.520951453742640e-08, -7.604757268713200e-09, -7.604757268713605e-09, -1.520951453742721e-08, -7.604757268713605e-09, 2.879188505531779e-07, 5.758377011063557e-07, 2.879188505531779e-07, 2.899095146957438e-07, 5.798190293914875e-07, 2.899095146957438e-07, 2.879983924928902e-07, 5.759967849857805e-07, 2.879983924928902e-07, 2.897555600590336e-07, 5.795111201180672e-07, 2.897555600590336e-07, 2.889313101834260e-07, 5.778626203668520e-07, 2.889313101834260e-07, 2.889313101834260e-07, 5.778626203668520e-07, 2.889313101834260e-07, 5.497060491223271e-06, 1.099412098244654e-05, 5.497060491223271e-06, 5.511481875800527e-06, 1.102296375160105e-05, 5.511481875800527e-06, 5.165627012434467e-06, 1.033125402486893e-05, 5.165627012434467e-06, 5.180092448958544e-06, 1.036018489791709e-05, 5.180092448958544e-06, 5.669870485958341e-06, 1.133974097191668e-05, 5.669870485958341e-06, 5.669870485958341e-06, 1.133974097191668e-05, 5.669870485958341e-06, 7.385736741467141e-03, 1.477147348293428e-02, 7.385736741467141e-03, 9.975698674363140e-03, 1.995139734872628e-02, 9.975698674363140e-03, 9.515620950951686e-03, 1.903124190190337e-02, 9.515620950951686e-03, 1.560775318185149e-02, 3.121550636370297e-02, 1.560775318185149e-02, 7.474712163907354e-03, 1.494942432781471e-02, 7.474712163907354e-03, 7.474712163907359e-03, 1.494942432781472e-02, 7.474712163907359e-03, 8.493903751181800e-03, 1.698780750236360e-02, 8.493903751181800e-03, 1.533255555046534e-02, 3.066511110093068e-02, 1.533255555046534e-02, -1.319095418323754e-02, -2.638190836647509e-02, -1.319095418323754e-02, 6.773030210665213e-05, 1.354606042133043e-04, 6.773030210665213e-05, 1.434921846772401e-02, 2.869843693544802e-02, 1.434921846772401e-02, 1.434921846772401e-02, 2.869843693544802e-02, 1.434921846772401e-02, -3.023261753504547e+03, -6.046523507009095e+03, -3.023261753504547e+03, -2.622177193835374e+02, -5.244354387670747e+02, -2.622177193835374e+02, -5.438904349231814e+03, -1.087780869846363e+04, -5.438904349231814e+03, 5.267064389421134e-03, 1.053412877884227e-02, 5.267064389421134e-03, -4.976263151734091e+01, -9.952526303468181e+01, -4.976263151734091e+01, -4.976263151734390e+01, -9.952526303468780e+01, -4.976263151734390e+01, 1.676799574747859e-02, 3.353599149495719e-02, 1.676799574747859e-02, 1.469926534547477e-02, 2.939853069094954e-02, 1.469926534547477e-02, 1.543403219877236e-02, 3.086806439754472e-02, 1.543403219877236e-02, 1.605067860160943e-02, 3.210135720321886e-02, 1.605067860160943e-02, 1.574295720998843e-02, 3.148591441997686e-02, 1.574295720998843e-02, 1.574295720998843e-02, 3.148591441997686e-02, 1.574295720998843e-02, 1.943037652534900e-02, 3.886075305069801e-02, 1.943037652534900e-02, 8.545545151153956e-03, 1.709109030230791e-02, 8.545545151153956e-03, 1.130985486568722e-02, 2.261970973137444e-02, 1.130985486568722e-02, 1.454625978542941e-02, 2.909251957085882e-02, 1.454625978542941e-02, 1.290103303339827e-02, 2.580206606679654e-02, 1.290103303339827e-02, 1.290103303339827e-02, 2.580206606679654e-02, 1.290103303339827e-02, 7.835163475047495e-03, 1.567032695009499e-02, 7.835163475047495e-03, 1.495783458621617e-02, 2.991566917243235e-02, 1.495783458621617e-02, 1.997069838205084e-02, 3.994139676410168e-02, 1.997069838205084e-02, 3.613785007840142e-02, 7.227570015680285e-02, 3.613785007840142e-02, 2.924268967383011e-02, 5.848537934766022e-02, 2.924268967383011e-02, 2.924268967383017e-02, 5.848537934766034e-02, 2.924268967383017e-02, 1.224187913564912e-02, 2.448375827129824e-02, 1.224187913564912e-02, -1.245428771908834e-02, -2.490857543817669e-02, -1.245428771908834e-02, -9.371984838049195e-02, -1.874396967609839e-01, -9.371984838049195e-02, 6.756704767980723e-02, 1.351340953596145e-01, 6.756704767980723e-02, -2.324997504363987e-02, -4.649995008727974e-02, -2.324997504363987e-02, -2.324997504365058e-02, -4.649995008730116e-02, -2.324997504365058e-02, -5.439405914464950e+01, -1.087881182892990e+02, -5.439405914464950e+01, -4.803897265303106e+02, -9.607794530606212e+02, -4.803897265303106e+02, -1.429322288167982e+04, -2.858644576335963e+04, -1.429322288167982e+04, 8.788863460123517e-03, 1.757772692024703e-02, 8.788863460123517e-03, -3.280427028486276e+02, -6.560854056972553e+02, -3.280427028486276e+02, -3.280427028486300e+02, -6.560854056972601e+02, -3.280427028486300e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
