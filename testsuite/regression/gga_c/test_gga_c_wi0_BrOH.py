
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_wi0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.173949833831582e-02, -5.173961690313786e-02, -5.173997578779204e-02, -5.173803754281465e-02, -5.173956228698252e-02, -5.173956228698252e-02, -4.830334367615340e-02, -4.830461896964459e-02, -4.833970272721492e-02, -4.827961093248306e-02, -4.830400787582773e-02, -4.830400787582773e-02, -3.137847600240075e-02, -3.112448323190335e-02, -2.387071567013153e-02, -2.433155311901869e-02, -3.128710133322031e-02, -3.128710133322031e-02, -2.712717948347979e-03, -3.255566366278058e-03, -3.911211310107664e-02, 3.443541853665570e-04, -2.875246634261342e-03, -2.875246634261342e-03, -1.467171922671131e-08, -1.669893098284132e-08, 3.892751967170050e-05, -4.335422107319608e-10, -1.650542694440007e-08, -1.650542694440007e-08, -5.229703272782869e-02, -5.232517552609707e-02, -5.229984973985787e-02, -5.232173405326111e-02, -5.231156513553868e-02, -5.231156513553868e-02, -3.354258233631816e-02, -3.407386455360245e-02, -3.282821564420349e-02, -3.325404660475482e-02, -3.480521740289140e-02, -3.480521740289140e-02, -4.216231691023221e-02, -4.965729009744144e-02, -4.100154506668228e-02, -4.803712726297452e-02, -4.379711273037446e-02, -4.379711273037446e-02, 3.182215284506853e-04, -1.019506867495381e-04, 3.205493379424141e-04, -5.316477126387621e-02, 3.894791206925528e-04, 3.894791206925528e-04, -3.883136424303508e-10, -7.098064463847418e-10, -4.866157479235748e-10, 1.176789021593736e-04, -6.569546563059371e-10, -6.569546563059367e-10, -5.062382381401177e-02, -4.960263247800744e-02, -4.999496647786783e-02, -5.027890960798398e-02, -5.013915887091014e-02, -5.013915887091014e-02, -5.060338997399427e-02, -3.281421102722056e-02, -3.988928930426558e-02, -4.527564502071767e-02, -4.277071626093946e-02, -4.277071626093947e-02, -4.970941331808229e-02, -1.950825612411896e-03, -6.847785908673825e-03, -2.493454270603473e-02, -1.468682009007460e-02, -1.468682009007460e-02, -3.029439787303000e-02, 2.535433377279094e-05, 7.777729123247455e-05, -3.110040210007629e-02, 2.365055045952258e-04, 2.365055045952261e-04, -1.912492597573929e-08, -3.346708680210989e-12, -5.272486577179536e-11, 2.269197904268513e-04, -4.399467428641545e-10, -4.399467428641510e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_wi0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.399885563542337e-02, -6.399865114776343e-02, -6.399803310968884e-02, -6.400137596984244e-02, -6.399874533599174e-02, -6.399874533599174e-02, -6.957324843233660e-02, -6.957070156893647e-02, -6.950067314369182e-02, -6.962084571396610e-02, -6.957192681764961e-02, -6.957192681764961e-02, -9.034383000196763e-02, -9.050962787067587e-02, -9.097736020673143e-02, -9.125344364219037e-02, -9.040454545723613e-02, -9.040454545723613e-02, -2.294559744029212e-02, -2.597294703260718e-02, -8.225758728512719e-02, -1.193646539736137e-03, -2.386459828912862e-02, -2.386459828912862e-02, -6.268776353959552e-08, -4.942640854060029e-08, 1.870813502545561e-04, -2.601253046293376e-09, -4.941671106304912e-08, -4.941671106304912e-08, -6.221666170652590e-02, -6.216339517208261e-02, -6.221133017904493e-02, -6.216990902870655e-02, -6.218915157220747e-02, -6.218915157220747e-02, -9.337494737042426e-02, -9.281808118526649e-02, -9.408722939575481e-02, -9.367694744295244e-02, -9.198670409046794e-02, -9.198670409046794e-02, -7.315918700160914e-02, -5.633634059812163e-02, -7.492340725268463e-02, -5.895917483860635e-02, -7.000605627453957e-02, -7.000605627453957e-02, 7.561931025908699e-04, -6.527291879898887e-03, 7.186772751176078e-04, -5.792024099279570e-02, 2.773044251585453e-04, 2.773044251585453e-04, -2.329881673700249e-09, -4.258838142978138e-09, -2.919694159301261e-09, 4.328992895223177e-04, -3.941727438034427e-09, -3.941727438034425e-09, -5.339883886848574e-02, -5.564258599848218e-02, -5.474468085973012e-02, -5.411867770924125e-02, -5.442373917067021e-02, -5.442373917067021e-02, -5.299542868719296e-02, -8.652093367420999e-02, -7.652552682790534e-02, -6.508837219407092e-02, -7.071627140206030e-02, -7.071627140206029e-02, -5.686816771101397e-02, -2.005376901182282e-02, -4.575756220839992e-02, -8.558752852281326e-02, -7.187339876564790e-02, -7.187339876564790e-02, -8.741388286935434e-02, 1.355486240105826e-04, 3.214592784283349e-04, -8.265531566285991e-02, 6.550890415241328e-04, 6.550890415241335e-04, -2.078265182239973e-08, -2.008025204050476e-11, -3.163491891884458e-10, 6.242469769809485e-04, -2.639680197042071e-09, -2.639680197042052e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_wi0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wi0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.081725469329306e-11, 3.081686321248039e-11, 3.081486046555434e-11, 3.082127646924353e-11, 3.081705038176027e-11, 3.081705038176027e-11, 3.300619337493046e-07, 3.300529158565874e-07, 3.297342180401446e-07, 3.299193774251315e-07, 3.300499871588422e-07, 3.300499871588422e-07, 1.895737686570659e-03, 1.897246287769806e-03, 1.812595839341866e-03, 1.765823208135294e-03, 1.896358853214811e-03, 1.896358853214811e-03, 1.512213691913077e-01, 1.693529825829626e-01, 7.844854806527013e-04, 2.481939924467697e-02, 1.568622157487864e-01, 1.568622157487864e-01, 1.925455648161821e-03, 1.057237587741120e-03, -5.386470340508102e-02, 6.854225993862594e-04, 1.122125017294901e-03, 1.122125017294901e-03, 3.898250460998391e-08, 3.892462502110078e-08, 3.897652167284703e-08, 3.893151787585627e-08, 3.895290723433903e-08, 3.895290723433903e-08, 6.662291178404653e-06, 6.460314114240979e-06, 6.703672629959500e-06, 6.547739066734173e-06, 6.462501902722848e-06, 6.462501902722848e-06, 4.154518443027476e-03, 1.906333106966608e-03, 5.536842370278993e-03, 3.503319537808154e-03, 3.319042635330331e-03, 3.319042635330331e-03, -1.062276172370625e-02, 2.699454385454464e-02, -1.050800608979176e-02, 5.960724260737675e-06, 5.821947719608001e-03, 5.821947719608001e-03, 7.042996411368897e-04, 8.636744168512043e-04, 2.378991313934946e-03, -4.283081322296877e-02, 1.284315151362206e-03, 1.284315151362205e-03, 1.942698221781893e-03, 2.483445019035972e-03, 2.304226220936146e-03, 2.156144668242527e-03, 2.231397593685415e-03, 2.231397593685415e-03, 2.172017334320041e-03, 8.670072866551526e-03, 7.154038641862928e-03, 5.278089502091992e-03, 6.256899325977417e-03, 6.256899325977416e-03, 1.520546606032254e-03, 3.487732483440847e-02, 4.803692759236249e-02, 4.883465699639744e-02, 5.647699038506184e-02, 5.647699038506189e-02, 1.435482906725612e-02, -4.626056385435481e-02, -4.169219526980238e-02, 7.687871223703124e-02, -2.553222741851979e-02, -2.553222741851983e-02, -1.135236109127897e-04, 2.599195964685617e-04, 5.544621767230235e-04, -3.091162215481132e-02, 1.692951846010572e-03, 1.692951846010566e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
