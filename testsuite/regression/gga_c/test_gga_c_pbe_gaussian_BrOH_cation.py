
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_gaussian_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.096147085479932e-02, -5.096231878301069e-02, -5.096472911896895e-02, -5.095214271964113e-02, -5.095893057408427e-02, -5.095893057408427e-02, -4.137862871014879e-02, -4.138379546349161e-02, -4.150348552618069e-02, -4.129584992916054e-02, -4.138483966542611e-02, -4.138483966542611e-02, -2.737671831344825e-02, -2.714204536252883e-02, -2.153341367023740e-02, -2.179139131072812e-02, -2.182839745197668e-02, -2.182839745197668e-02, -6.091141348916668e-03, -6.653716725851473e-03, -2.990844837173082e-02, -1.928410563052364e-03, -2.091170187827382e-03, -2.091170187827378e-03, -5.377642776829145e-09, -7.175282448063092e-09, -8.125641672391756e-06, -3.861433434289296e-10, -9.971284800451563e-10, -9.971284800451563e-10, -5.863795923063109e-02, -5.884944092971595e-02, -5.864667293025885e-02, -5.883336624701747e-02, -5.874555249168389e-02, -5.874555249168389e-02, -2.063656125891708e-02, -2.109741629695816e-02, -1.960990272394986e-02, -2.000382884372200e-02, -2.140857149976647e-02, -2.140857149976647e-02, -3.881366065620480e-02, -5.596307880891596e-02, -3.611351117783916e-02, -5.128955462792779e-02, -4.062755326297278e-02, -4.062755326297275e-02, -3.824770940458223e-04, -3.084329005249555e-03, -2.966057314629754e-04, -7.179524289683076e-02, -1.008669998179158e-03, -1.008669998179158e-03, -1.506677751311747e-10, -4.088504439517249e-10, -7.265591732853044e-10, -7.668306192162855e-05, -7.126527605885724e-10, -7.126527644917002e-10, -6.047283626797890e-02, -5.503128570199153e-02, -5.684468119574460e-02, -5.842500050241890e-02, -5.762548065621699e-02, -5.762548065621699e-02, -6.163818398751722e-02, -2.708839597164956e-02, -3.455714082477337e-02, -4.377021408688199e-02, -3.892624136615215e-02, -3.892624136615215e-02, -5.585787421932235e-02, -5.559380540901590e-03, -9.782782795369517e-03, -2.334090785210155e-02, -1.568573480691422e-02, -1.568573480691423e-02, -2.635394716188874e-02, -6.146624280311749e-06, -2.353168123648761e-05, -2.832031359428500e-02, -2.513027292918510e-04, -2.513027292918649e-04, -2.098301414652642e-08, -3.823485365123114e-12, -6.361260758598608e-11, -1.922186934871471e-04, -6.412415765478380e-10, -6.412415726447102e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_gaussian_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.271546156767066e-01, -1.271547581775686e-01, -1.271556051001007e-01, -1.271558453973367e-01, -1.271588186871475e-01, -1.271585530091900e-01, -1.271428509502745e-01, -1.271436937531517e-01, -1.271508787358856e-01, -1.271522890906011e-01, -1.271508787358856e-01, -1.271522890906011e-01, -1.091246151352038e-01, -1.091260467045771e-01, -1.091306847072338e-01, -1.091323195710537e-01, -1.092754361271042e-01, -1.092732709370626e-01, -1.090280971989641e-01, -1.090266270407483e-01, -1.091525268589397e-01, -1.091132712129566e-01, -1.091525268589397e-01, -1.091132712129566e-01, -7.855001246624467e-02, -7.823441145287346e-02, -7.829325507542019e-02, -7.790798033670784e-02, -6.959547899409077e-02, -7.005901598519722e-02, -7.039082846684470e-02, -7.024443930538564e-02, -6.825812443242568e-02, -7.269296830454539e-02, -6.825812443242568e-02, -7.269296830454539e-02, -2.771365675890970e-02, -2.677652131513330e-02, -2.971774703358767e-02, -2.856944796032513e-02, -8.441866961176009e-02, -8.160589577008191e-02, -1.035278507323963e-02, -1.023208813597173e-02, -9.844379041157200e-03, -1.695332059061477e-02, -9.844379041157229e-03, -1.695332059061476e-02, -3.583666511772493e-08, -3.448492539713447e-08, -4.794306770910766e-08, -4.588855682477149e-08, -5.278402828309228e-05, -5.060260189394219e-05, -2.518780897800893e-09, -2.544354515243352e-09, -6.156068665301526e-09, -8.448360071472514e-09, -6.156068664867845e-09, -8.448360069304110e-09, -1.293632765979439e-01, -1.293959381290305e-01, -1.295458372035450e-01, -1.295794577222008e-01, -1.293705429744128e-01, -1.294038163305834e-01, -1.295323497991998e-01, -1.295652066062089e-01, -1.294561782170921e-01, -1.294894874986178e-01, -1.294561782170921e-01, -1.294894874986178e-01, -7.328144307521553e-02, -7.328458728150357e-02, -7.429606365698918e-02, -7.431329716442318e-02, -7.102633582586802e-02, -7.092315478509151e-02, -7.193761340680611e-02, -7.182841529184808e-02, -7.482834801817544e-02, -7.510957347619622e-02, -7.482834801817544e-02, -7.510957347619622e-02, -8.427632406135997e-02, -8.454110316937384e-02, -8.353569905762742e-02, -8.347976037906457e-02, -8.362134490552323e-02, -8.018984145148640e-02, -8.341935472281153e-02, -7.962268423234176e-02, -8.259965528989972e-02, -8.785544702253230e-02, -8.259965528989971e-02, -8.785544702253227e-02, -2.274928332648055e-03, -2.257075204585166e-03, -1.570418078055720e-02, -1.563684341449685e-02, -1.814718888091331e-03, -1.737881159132674e-03, -1.178741638325596e-01, -1.179448770487732e-01, -5.825853838704559e-03, -5.549560662711928e-03, -5.825853838704559e-03, -5.549560662711928e-03, -1.001199998012207e-09, -9.787799690711952e-10, -2.692835909846945e-09, -2.668673294795802e-09, -4.858363561594275e-09, -4.697582079282336e-09, -4.755419708960577e-04, -4.731926007304282e-04, -5.316714492438739e-09, -4.422902385211713e-09, -5.316714498320536e-09, -4.422902386756701e-09, -7.623982733171966e-02, -7.575425572917248e-02, -8.088711005683580e-02, -8.041643551056789e-02, -7.955167047853977e-02, -7.907410514150025e-02, -7.821412493481107e-02, -7.773519853637612e-02, -7.891095045328957e-02, -7.843272956475228e-02, -7.891095045328957e-02, -7.843272956475228e-02, -7.343680775749180e-02, -7.302066092516643e-02, -7.450326267802351e-02, -7.416376391383499e-02, -8.041887109384838e-02, -8.001080868102046e-02, -8.272148670270206e-02, -8.234839635438619e-02, -8.211428863445001e-02, -8.174650096852018e-02, -8.211428863445001e-02, -8.174650096852018e-02, -8.559612202038680e-02, -8.539431492987250e-02, -2.584020188552169e-02, -2.570889422014188e-02, -3.984501671025185e-02, -3.948118784992929e-02, -6.614768019842014e-02, -6.576239848176393e-02, -5.381635278306412e-02, -5.383490544104716e-02, -5.381635278306415e-02, -5.383490544104718e-02, -7.277050854796462e-02, -7.224330438155958e-02, -3.921382085904619e-05, -3.900813073360190e-05, -1.500081170681546e-04, -1.461397171024476e-04, -6.958696640387070e-02, -6.840782837240149e-02, -1.546789181900264e-03, -1.479127927150893e-03, -1.546789181900323e-03, -1.479127927150934e-03, -1.382084180675539e-07, -1.350092927157740e-07, -2.526485057821276e-11, -2.523313939939104e-11, -4.266382779753467e-10, -4.118156047216046e-10, -1.172516518434154e-03, -1.157040067415216e-03, -4.708042026046566e-09, -3.992569647871705e-09, -4.708042018606228e-09, -3.992569643683974e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_gaussian_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.927779744284410e-10, 3.855559488568820e-10, 1.927779744284410e-10, 1.927814736727155e-10, 3.855629473454309e-10, 1.927814736727155e-10, 1.927863001489847e-10, 3.855726002979694e-10, 1.927863001489847e-10, 1.927344699662509e-10, 3.854689399325019e-10, 1.927344699662509e-10, 1.927631496645511e-10, 3.855262993291023e-10, 1.927631496645511e-10, 1.927631496645511e-10, 3.855262993291023e-10, 1.927631496645511e-10, 1.079437867279011e-06, 2.158875734558022e-06, 1.079437867279011e-06, 1.079660053903971e-06, 2.159320107807942e-06, 1.079660053903971e-06, 1.084684162562871e-06, 2.169368325125742e-06, 1.084684162562871e-06, 1.074969891327137e-06, 2.149939782654275e-06, 1.074969891327137e-06, 1.079576574564234e-06, 2.159153149128468e-06, 1.079576574564234e-06, 1.079576574564234e-06, 2.159153149128468e-06, 1.079576574564234e-06, 1.793340094256364e-03, 3.586680188512727e-03, 1.793340094256364e-03, 1.779786383517151e-03, 3.559572767034302e-03, 1.779786383517151e-03, 1.438013818277104e-03, 2.876027636554208e-03, 1.438013818277104e-03, 1.405475878908440e-03, 2.810951757816879e-03, 1.405475878908440e-03, 1.426337708242667e-03, 2.852675416485333e-03, 1.426337708242667e-03, 1.426337708242667e-03, 2.852675416485333e-03, 1.426337708242667e-03, 1.554415465495456e-01, 3.108830930990912e-01, 1.554415465495456e-01, 1.640378103116093e-01, 3.280756206232184e-01, 1.640378103116093e-01, 9.702069055082461e-04, 1.940413811016492e-03, 9.702069055082461e-04, 1.129432990901659e-01, 2.258865981803319e-01, 1.129432990901659e-01, 9.410909730207175e-02, 1.882181946041435e-01, 9.410909730207175e-02, 9.410909730207176e-02, 1.882181946041434e-01, 9.410909730207176e-02, 4.235441785085908e-03, 8.470883570275693e-03, 4.235441785085908e-03, 4.981993567078825e-03, 9.963987134332344e-03, 4.981993567078825e-03, 2.563337251165138e-02, 5.126674502330454e-02, 2.563337251165138e-02, 1.504261912439216e-03, 3.008523823964462e-03, 1.504261912439216e-03, 2.207166052790182e-03, 4.414332106624026e-03, 2.207166052790182e-03, 2.207166051439198e-03, 4.414332103119814e-03, 2.207166051439198e-03, 2.833479127526749e-07, 5.666958255053496e-07, 2.833479127526749e-07, 2.852211894879126e-07, 5.704423789758252e-07, 2.852211894879126e-07, 2.834226918085593e-07, 5.668453836171186e-07, 2.834226918085593e-07, 2.850762401674325e-07, 5.701524803348650e-07, 2.850762401674325e-07, 2.843007509920753e-07, 5.686015019841505e-07, 2.843007509920753e-07, 2.843007509920753e-07, 5.686015019841505e-07, 2.843007509920753e-07, 6.108987401633434e-06, 1.221797480326687e-05, 6.108987401633434e-06, 6.094211717523790e-06, 1.218842343504758e-05, 6.094211717523790e-06, 5.808902009740107e-06, 1.161780401948021e-05, 5.808902009740107e-06, 5.798027134355274e-06, 1.159605426871055e-05, 5.798027134355274e-06, 6.251090236274522e-06, 1.250218047254904e-05, 6.251090236274522e-06, 6.251090236274522e-06, 1.250218047254904e-05, 6.251090236274522e-06, 5.902313370749734e-03, 1.180462674149947e-02, 5.902313370749734e-03, 7.449833028706843e-03, 1.489966605741368e-02, 7.449833028706843e-03, 7.677948972687336e-03, 1.535589794537467e-02, 7.677948972687336e-03, 1.139449994867365e-02, 2.278899989734730e-02, 1.139449994867365e-02, 5.895870092175681e-03, 1.179174018435136e-02, 5.895870092175681e-03, 5.895870092175681e-03, 1.179174018435136e-02, 5.895870092175681e-03, 6.307151062417690e-02, 1.261430212483537e-01, 6.307151062417690e-02, 5.698286839515512e-02, 1.139657367903102e-01, 5.698286839515512e-02, 6.395261225042585e-02, 1.279052245008520e-01, 6.395261225042585e-02, 6.039511221351899e-05, 1.207902244270380e-04, 6.039511221351899e-05, 1.204686244769510e-01, 2.409372489539018e-01, 1.204686244769510e-01, 1.204686244769510e-01, 2.409372489539018e-01, 1.204686244769510e-01, 1.466695584029839e-03, 2.933391170014839e-03, 1.466695584029839e-03, 1.849473925931922e-03, 3.698947850914121e-03, 1.849473925931922e-03, 1.842456483900401e-02, 3.684912967311487e-02, 1.842456483900401e-02, 6.253799891629011e-02, 1.250759978325813e-01, 6.253799891629011e-02, 7.051429163893874e-03, 1.410285832859701e-02, 7.051429163893874e-03, 7.051429163814316e-03, 1.410285832932981e-02, 7.051429163814316e-03, 1.257202836323792e-02, 2.514405672647584e-02, 1.257202836323792e-02, 1.078554259934933e-02, 2.157108519869866e-02, 1.078554259934933e-02, 1.135252706144357e-02, 2.270505412288714e-02, 1.135252706144357e-02, 1.186958842489374e-02, 2.373917684978748e-02, 1.186958842489374e-02, 1.160534625236052e-02, 2.321069250472104e-02, 1.160534625236052e-02, 1.160534625236052e-02, 2.321069250472104e-02, 1.160534625236052e-02, 1.488672383061077e-02, 2.977344766122154e-02, 1.488672383061077e-02, 7.961396965125451e-03, 1.592279393025090e-02, 7.961396965125451e-03, 9.193814389825456e-03, 1.838762877965091e-02, 9.193814389825456e-03, 1.084879300096632e-02, 2.169758600193265e-02, 1.084879300096632e-02, 9.977588908774551e-03, 1.995517781754910e-02, 9.977588908774551e-03, 9.977588908774551e-03, 1.995517781754910e-02, 9.977588908774551e-03, 5.916431172382389e-03, 1.183286234476478e-02, 5.916431172382389e-03, 4.249205210670001e-02, 8.498410421340002e-02, 4.249205210670001e-02, 3.910919958979990e-02, 7.821839917959977e-02, 3.910919958979990e-02, 3.482045085140143e-02, 6.964090170280286e-02, 3.482045085140143e-02, 3.898145873560026e-02, 7.796291747120052e-02, 3.898145873560026e-02, 3.898145873560027e-02, 7.796291747120053e-02, 3.898145873560027e-02, 1.142976849090634e-02, 2.285953698181268e-02, 1.142976849090634e-02, 2.106404440462896e-02, 4.212808880925548e-02, 2.106404440462896e-02, 3.228867436405346e-02, 6.457734872810941e-02, 3.228867436405346e-02, 5.497523104102570e-02, 1.099504620820514e-01, 5.497523104102570e-02, 1.090953383162926e-01, 2.181906766325832e-01, 1.090953383162926e-01, 1.090953383162950e-01, 2.181906766325882e-01, 1.090953383162950e-01, 5.281015756060750e-03, 1.056203151225176e-02, 5.281015756060750e-03, 2.005659334729874e-03, 4.011318648451006e-03, 2.005659334729874e-03, 2.510248755389006e-03, 5.020497507999790e-03, 2.510248755389006e-03, 1.001295876617769e-01, 2.002591753235525e-01, 1.001295876617769e-01, 9.000466250576621e-03, 1.800093250405043e-02, 9.000466250576621e-03, 9.000466243711753e-03, 1.800093247939614e-02, 9.000466243711753e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
