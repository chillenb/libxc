
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_zpbeint_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.813844524758258e-02, -5.813930585568048e-02, -5.814175327549402e-02, -5.812897857766851e-02, -5.813586786713665e-02, -5.813586786713665e-02, -4.771139327825141e-02, -4.771658716469919e-02, -4.783690005756788e-02, -4.762828835923723e-02, -4.771765923021744e-02, -4.771765923021744e-02, -3.207374034235023e-02, -3.183954089671876e-02, -2.611811169159965e-02, -2.639208401837534e-02, -2.654102557212355e-02, -2.654102557212355e-02, -8.275809009787055e-03, -8.961959562870369e-03, -3.481104765701351e-02, -2.854012679047975e-03, -4.824516392174553e-03, -4.824516392174546e-03, -8.902311238227023e-09, -1.189721717805858e-08, -1.334978503351808e-05, -6.360139219242543e-10, -2.339563439557018e-09, -2.339563439557018e-09, -6.511881627022043e-02, -6.532554859909571e-02, -6.512733751319791e-02, -6.530983918088956e-02, -6.522400279216299e-02, -6.522400279216299e-02, -2.581248997173000e-02, -2.631870769446387e-02, -2.468256736077515e-02, -2.511869612748070e-02, -2.665800491726885e-02, -2.665800491726885e-02, -4.269294178305670e-02, -5.787299916340225e-02, -4.008702292415260e-02, -5.352868008118471e-02, -4.446583798153786e-02, -4.446583798153786e-02, -6.011872577898992e-04, -4.450473890048243e-03, -4.709733259713368e-04, -7.551878531061713e-02, -1.545844674160431e-03, -1.545844674160431e-03, -2.486014891236632e-10, -6.733547640546201e-10, -1.201817420657770e-09, -1.235471776815350e-04, -1.340479202347771e-09, -1.340479202347771e-09, -6.120263825876041e-02, -5.675816747997222e-02, -5.825611684107358e-02, -5.954784806035126e-02, -5.889592483917587e-02, -5.889592483917587e-02, -6.199230723157322e-02, -3.135329704173338e-02, -3.849855134934133e-02, -4.688385605822962e-02, -4.252761164803526e-02, -4.252761164803526e-02, -5.797478476423434e-02, -7.675425791203947e-03, -1.276490409071868e-02, -2.717458701288228e-02, -1.930010826256274e-02, -1.930010826256274e-02, -3.051277929226779e-02, -1.005392821624191e-05, -3.834722118832035e-05, -3.182370045387799e-02, -4.000680792445196e-04, -4.000680792445162e-04, -3.460000668758402e-08, -6.295661612233802e-12, -1.053010229264670e-10, -3.059876792321724e-04, -1.176706561071430e-09, -1.176706563239835e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_zpbeint_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.354873133647907e-01, -1.354882736739634e-01, -1.354910164755558e-01, -1.354767610053696e-01, -1.354844474290627e-01, -1.354844474290627e-01, -1.160277953107055e-01, -1.160329748305725e-01, -1.161529345472292e-01, -1.159461644420918e-01, -1.160342337615512e-01, -1.160342337615512e-01, -8.311682127802926e-02, -8.290348406394323e-02, -7.655486285406848e-02, -7.698453850863374e-02, -7.715142539105689e-02, -7.715142539105689e-02, -3.395106929975192e-02, -3.587447689965560e-02, -8.756319832023265e-02, -1.449620239755736e-02, -2.247813085109307e-02, -2.247813085109308e-02, -5.809796134693286e-08, -7.760543651311222e-08, -8.450862434171987e-05, -4.169007030357338e-09, -1.530902001213211e-08, -1.530902001626568e-08, -1.345464751600681e-01, -1.347000360729234e-01, -1.345528368690693e-01, -1.346884112495193e-01, -1.346246977101890e-01, -1.346246977101890e-01, -8.355571518864359e-02, -8.448666396482409e-02, -8.146334204536393e-02, -8.229869272471868e-02, -8.507777883395477e-02, -8.507777883395477e-02, -8.498159571086986e-02, -8.211850666352401e-02, -8.281326582008050e-02, -8.013126389368357e-02, -8.538798341121191e-02, -8.538798341121191e-02, -3.487353117556770e-03, -2.128706524052946e-02, -2.763667912570131e-03, -1.172435977347532e-01, -8.390621560792106e-03, -8.390621560792106e-03, -1.632373532251168e-09, -4.414400888118644e-09, -7.891490357243900e-09, -7.570156725381764e-04, -8.791780197260134e-09, -8.791780199751928e-09, -7.518760817972248e-02, -7.929466770224375e-02, -7.805506107665534e-02, -7.686886666575056e-02, -7.748117552483347e-02, -7.748117552483347e-02, -7.279490800638030e-02, -7.769401292953780e-02, -8.134350719401115e-02, -8.179771178108967e-02, -8.203718754848202e-02, -8.203718754848202e-02, -8.410025168737262e-02, -3.291810988417814e-02, -4.703152048740813e-02, -6.904628322703701e-02, -5.955546815690032e-02, -5.955546815690028e-02, -7.573544926898736e-02, -6.379140022350077e-05, -2.398735908014116e-04, -7.006642236314209e-02, -2.362102826221017e-03, -2.362102826221023e-03, -2.250681271727224e-07, -4.157393503915868e-11, -6.928299116746613e-10, -1.825775686164230e-03, -7.721549877048226e-09, -7.721549883772516e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_zpbeint_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_zpbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.955365005848543e-10, 1.955398085119754e-10, 1.955440257670874e-10, 1.954950368047989e-10, 1.955221935353657e-10, 1.955221935353657e-10, 1.084799072775508e-06, 1.085005226678209e-06, 1.089656986013230e-06, 1.080588195521501e-06, 1.084918751424336e-06, 1.084918751424336e-06, 1.779327442094614e-03, 1.768782106676943e-03, 1.492926452600662e-03, 1.456494523039180e-03, 1.481468257795420e-03, 1.481468257795420e-03, 1.880813786325254e-01, 1.956950442502572e-01, 9.569870044370294e-04, 1.569356858634516e-01, 1.901129225729430e-01, 1.901129225729431e-01, 7.010242677205229e-03, 8.258909724247535e-03, 4.194561449560926e-02, 2.477514014653287e-03, 5.177975995566155e-03, 5.177975996114968e-03, 2.768029578829259e-07, 2.785211019783633e-07, 2.768714411088306e-07, 2.783880637083008e-07, 2.776770271198034e-07, 2.776770271198034e-07, 6.686541203068686e-06, 6.648304665722562e-06, 6.408898644093748e-06, 6.377769394423161e-06, 6.803645761959919e-06, 6.803645761959919e-06, 5.370859529715915e-03, 6.190853080399831e-03, 7.051788899049991e-03, 9.580297028276875e-03, 5.320617904574540e-03, 5.320617904574540e-03, 9.658161946607285e-02, 7.605487427837690e-02, 9.922711895915889e-02, 5.321882922361414e-05, 1.764436655612411e-01, 1.764436655612411e-01, 2.419945375574301e-03, 3.045799251259391e-03, 3.047368508054607e-02, 9.958313588314328e-02, 1.326220660014481e-02, 1.326220660331446e-02, 1.003333532217406e-02, 8.907386805931282e-03, 9.271908767531709e-03, 9.598550877363395e-03, 9.432323702105446e-03, 9.432323702105446e-03, 1.173489647075933e-02, 7.721795973458927e-03, 8.481502285579801e-03, 9.488116658739627e-03, 8.968028925809285e-03, 8.968028925809285e-03, 4.952314141221620e-03, 5.288932399613144e-02, 4.462913476611360e-02, 3.378952747855793e-02, 4.081854393797926e-02, 4.081854393797928e-02, 1.106992916608875e-02, 3.433492281436434e-02, 5.227627432482734e-02, 5.074970317966462e-02, 1.699151082161711e-01, 1.699151082161733e-01, 8.705504972796450e-03, 3.302434124699813e-03, 4.155207123799477e-03, 1.564102255970290e-01, 1.651468440300244e-02, 1.651468441584478e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
