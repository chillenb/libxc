
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbefe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.365528673835290e-02, -6.365603970403247e-02, -6.365831295657513e-02, -6.364600546573126e-02, -6.365569290290020e-02, -6.365569290290020e-02, -5.252073074673384e-02, -5.252487909038133e-02, -5.263911300045305e-02, -5.244292035985511e-02, -5.252287393012222e-02, -5.252287393012222e-02, -3.411591740313806e-02, -3.389742160772410e-02, -2.807359957031385e-02, -2.839296427663157e-02, -3.403717899321689e-02, -3.403717899321689e-02, -1.374580399658353e-02, -1.457034428461518e-02, -4.123477907018135e-02, -4.535848611002451e-03, -1.400141157765449e-02, -1.400141157765449e-02, -2.980988700509957e-07, -3.684277119385461e-07, -7.370814611018997e-05, -7.357371270538891e-09, -3.651100020080626e-07, -3.651100020080626e-07, -6.991478502168488e-02, -7.011003005536218e-02, -6.993426283932425e-02, -7.008607630781778e-02, -7.001543319007915e-02, -7.001543319007915e-02, -2.982345651666619e-02, -3.034094170752794e-02, -2.910647900607103e-02, -2.950745883906298e-02, -3.112703940489124e-02, -3.112703940489124e-02, -4.546791892807767e-02, -5.930701504464553e-02, -4.404599709382308e-02, -5.483595801418190e-02, -4.767737533444341e-02, -4.767737533444341e-02, -1.315867361049502e-03, -7.580044913386491e-03, -1.439809461043283e-03, -7.806672974457569e-02, -2.725503243499479e-03, -2.725503243499479e-03, -6.609261504343545e-09, -1.227137475332471e-08, -9.245128407653608e-09, -3.047221545580708e-04, -1.179805686142445e-08, -1.179805686142445e-08, -6.246393876101636e-02, -5.892496921099413e-02, -6.015256748901950e-02, -6.113255991509893e-02, -6.063915522034397e-02, -6.063915522034397e-02, -6.233111356750790e-02, -3.625474373175849e-02, -4.279285937435547e-02, -4.964880947762534e-02, -4.613384355451197e-02, -4.613384355451198e-02, -5.963731831051450e-02, -1.199070413558854e-02, -1.799241494344464e-02, -3.098719139764000e-02, -2.424118194261266e-02, -2.424118194261265e-02, -3.443509198673989e-02, -4.456124674148943e-05, -1.647877660504928e-04, -3.503768363080824e-02, -9.308030614113186e-04, -9.308030614113186e-04, -4.572444251789859e-07, -4.828353862847388e-11, -8.668095313409968e-10, -9.413037837298219e-04, -8.107860687539302e-09, -8.107860684970381e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbefe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.414151138754791e-01, -1.414159054756816e-01, -1.414183096956023e-01, -1.414053699652461e-01, -1.414155407609359e-01, -1.414155407609359e-01, -1.204891181168591e-01, -1.204927204181156e-01, -1.205921390762822e-01, -1.204231992068130e-01, -1.204910198525002e-01, -1.204910198525002e-01, -8.458105753689014e-02, -8.441181519044497e-02, -7.880319491025350e-02, -7.924490306083203e-02, -8.452032178686979e-02, -8.452032178686979e-02, -4.632715825777882e-02, -4.777287695358164e-02, -9.174688590700492e-02, -2.124410156660381e-02, -4.678506505096892e-02, -4.678506505096892e-02, -1.932291354210377e-06, -2.386491785658421e-06, -4.566168386662336e-04, -4.809228219380737e-08, -2.365228665589209e-06, -2.365228665589209e-06, -1.378497344513404e-01, -1.379773686562015e-01, -1.378625116210817e-01, -1.379617602759846e-01, -1.379156009500116e-01, -1.379156009500116e-01, -9.022729227819387e-02, -9.105648745094706e-02, -8.909201556387276e-02, -8.975123162103918e-02, -9.223765290758100e-02, -9.223765290758100e-02, -8.449668388161058e-02, -8.040744547347224e-02, -8.314589635417576e-02, -7.992937250072830e-02, -8.522195579286965e-02, -8.522195579286965e-02, -7.232383621706391e-03, -3.212554913814213e-02, -7.844479299090984e-03, -1.163944728986156e-01, -1.383505115803823e-02, -1.383505115803823e-02, -4.321459825226205e-08, -8.014260285910893e-08, -6.050633224363712e-08, -1.817213500829599e-03, -7.710385716060175e-08, -7.710385715732738e-08, -7.453537780818900e-02, -7.808174965401599e-02, -7.694630837430205e-02, -7.596813105945419e-02, -7.646861415723082e-02, -7.646861415723082e-02, -7.293899750366603e-02, -8.028161360353381e-02, -8.192026108466166e-02, -8.113036359127783e-02, -8.183434695010566e-02, -8.183434695010566e-02, -8.230985110405592e-02, -4.456944946606730e-02, -5.673396022930412e-02, -7.091498096326965e-02, -6.511182024523021e-02, -6.511182024523020e-02, -7.749705333616870e-02, -2.783583911398850e-04, -1.002403878874702e-03, -6.980402134558936e-02, -5.238335324419574e-03, -5.238335324419583e-03, -2.958084215267708e-06, -3.181227665715797e-10, -5.689485059058479e-09, -5.287235628487505e-03, -5.305426627472284e-08, -5.305426627235927e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbefe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.964292867522603e-10, 1.964320529018905e-10, 1.964352301453430e-10, 1.963901257044801e-10, 1.964308221107609e-10, 1.964308221107609e-10, 1.075761344567147e-06, 1.075914910369679e-06, 1.079931273835413e-06, 1.071921114428754e-06, 1.075818091236762e-06, 1.075818091236762e-06, 1.669559560805886e-03, 1.661154804258896e-03, 1.418794581724572e-03, 1.389116163352413e-03, 1.666570693913774e-03, 1.666570693913774e-03, 2.474054096086971e-01, 2.515081478259412e-01, 9.394431769699708e-04, 2.487168899179785e-01, 2.489403849434799e-01, 2.489403849434799e-01, 7.071544371232198e-02, 7.616857705797794e-02, 1.503087927171652e-01, 1.328315247819139e-02, 7.938983702880432e-02, 7.938983702880432e-02, 2.700520250026753e-07, 2.715976763573860e-07, 2.702045058041820e-07, 2.714062671427935e-07, 2.708495540265343e-07, 2.708495540265343e-07, 6.957807616056526e-06, 6.905876819118134e-06, 6.792036879590803e-06, 6.753776513951591e-06, 7.141469413843862e-06, 7.141469413843862e-06, 5.202818397166785e-03, 5.661951963023474e-03, 6.351429579805712e-03, 7.612861793530130e-03, 4.705618221645408e-03, 4.705618221645408e-03, 1.877084008119113e-01, 1.026598299901565e-01, 2.288493247691104e-01, 4.811500648108854e-05, 2.660441628247735e-01, 2.660441628247735e-01, 1.368964653515726e-02, 1.704795775858320e-02, 5.160579147380848e-02, 2.319794778819984e-01, 2.633346341453725e-02, 2.633346341546603e-02, 8.025525422454461e-03, 7.333574072322437e-03, 7.565961247376279e-03, 7.757332754658237e-03, 7.660361788765081e-03, 7.660361788765081e-03, 9.335699834718094e-03, 7.207988204340262e-03, 7.607952255625736e-03, 8.117160927173078e-03, 7.860052517332334e-03, 7.860052517332334e-03, 4.562074401467382e-03, 6.401474161664771e-02, 4.906101887821405e-02, 3.240732127115657e-02, 4.119470119269000e-02, 4.119470119269001e-02, 1.096700814732415e-02, 1.046444336779312e-01, 1.583841988178111e-01, 5.102281632635558e-02, 3.203552256241717e-01, 3.203552256241747e-01, 5.842763767294422e-02, 4.285150143054482e-03, 1.041416972592994e-02, 4.129482254121058e-01, 3.562551271151195e-02, 3.562551271400710e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
