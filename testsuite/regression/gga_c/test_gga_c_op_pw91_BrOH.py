
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_op_pw91_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.825523023097271e-02, -5.825545975325339e-02, -5.825615636885154e-02, -5.825240440590922e-02, -5.825535400937609e-02, -5.825535400937609e-02, -5.127724566633930e-02, -5.127881632812578e-02, -5.132216712309597e-02, -5.124839214843974e-02, -5.127807181318182e-02, -5.127807181318182e-02, -3.333215184655404e-02, -3.322560334206260e-02, -3.032234310799468e-02, -3.053958952901229e-02, -3.329373609498020e-02, -3.329373609498020e-02, -1.325384433134697e-02, -1.366411056470686e-02, -3.801372773585827e-02, -7.642662514762501e-03, -1.338012886736574e-02, -1.338012886736574e-02, -1.231466638629292e-01, -1.059474021586266e-01, -5.060578660253134e-03, -1.804040424715420e+00, -1.052641629417556e-01, -1.052641629417556e-01, -5.808317800005855e-02, -5.813670675140276e-02, -5.808852987510546e-02, -5.813015317299856e-02, -5.811079478089175e-02, -5.811079478089175e-02, -3.863392182140291e-02, -3.894033201494629e-02, -3.823901660982391e-02, -3.847927304471515e-02, -3.935668323943026e-02, -3.935668323943026e-02, -3.688596643779844e-02, -4.316279386250069e-02, -3.580056215710123e-02, -4.059136236970132e-02, -3.814342143829221e-02, -3.814342143829221e-02, -4.994346370110253e-03, -1.079533389419581e-02, -4.989662714876308e-03, -5.661780217575441e-02, -6.119057385803515e-03, -6.119057385803515e-03, -1.899503877783808e+00, -1.246998325872873e+00, -1.038557412656618e+00, -3.810785195031980e-03, -1.115397153668584e+00, -1.115397153668583e+00, -4.402770686749325e-02, -4.253911924172929e-02, -4.304543833022668e-02, -4.345434028479779e-02, -4.324758422056012e-02, -4.324758422056012e-02, -4.374350808617410e-02, -3.164494822751443e-02, -3.482484075497295e-02, -3.802540691391101e-02, -3.639591608726953e-02, -3.639591608726953e-02, -4.368532368460883e-02, -1.428233660257384e-02, -1.820384028610753e-02, -2.589502250296986e-02, -2.190781961303925e-02, -2.190781961303925e-02, -2.986731747207355e-02, -6.491761357119968e-03, -4.216079164222869e-03, -2.703345297730762e-02, -4.210378072815756e-03, -4.210378072815757e-03, -1.001877309847778e-01, -3.947675124943226e+01, -6.390262149636955e+00, -4.063482853659293e-03, -1.256110176619814e+00, -1.256110176619823e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_op_pw91_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.201624102467885e-02, -8.201612329708612e-02, -8.201577385120164e-02, -8.201769785153153e-02, -8.201617747026640e-02, -8.201617747026640e-02, -7.804347321528071e-02, -7.804306545639748e-02, -7.803201951648164e-02, -7.805220229258306e-02, -7.804328861897208e-02, -7.804328861897208e-02, -5.877418632436208e-02, -5.872749662002635e-02, -5.706166719255645e-02, -5.728564747437292e-02, -5.875741016062681e-02, -5.875741016062681e-02, -2.806856596726215e-02, -2.870605490708039e-02, -6.231878468986529e-02, -1.652321137134714e-02, -2.826662138143583e-02, -2.826662138143583e-02, 5.187633538080685e-01, 4.456430313920916e-01, 8.946250151410082e-03, 7.522377192686413e+00, 4.427757460835011e-01, 4.427757460835011e-01, -7.739689681079599e-02, -7.735920652843130e-02, -7.739314579403973e-02, -7.736384036988365e-02, -7.737747360062674e-02, -7.737747360062674e-02, -7.217068181520161e-02, -7.238782883167251e-02, -7.191979274991944e-02, -7.209770644714940e-02, -7.261844129312288e-02, -7.261844129312288e-02, -5.609402224803775e-02, -5.416053498049427e-02, -5.520332069949908e-02, -5.363511667353713e-02, -5.651778334990060e-02, -5.651778334990060e-02, -8.035189449429212e-03, -2.382615744524092e-02, -8.364946041388651e-03, -6.777514783765035e-02, -1.234763353221542e-02, -1.234763353221542e-02, 7.916056066129740e+00, 5.214848876870810e+00, 4.340117788823698e+00, -4.368255737167101e-04, 4.664938139618064e+00, 4.664938139618060e+00, -5.156972860613543e-02, -5.294500358721751e-02, -5.248237366323422e-02, -5.211270751516966e-02, -5.229863433708311e-02, -5.229863433708311e-02, -5.069961441956777e-02, -5.366062503252973e-02, -5.436320106396327e-02, -5.401522461127776e-02, -5.431800650903389e-02, -5.431800650903389e-02, -5.514107914286809e-02, -3.089568358886364e-02, -3.734126947705779e-02, -4.587133107551306e-02, -4.202146932701293e-02, -4.202146932701294e-02, -5.148235502292987e-02, 1.538437837069100e-02, 3.060206714437721e-03, -4.491225991538701e-02, -5.681061196326578e-03, -5.681061196326585e-03, 4.207804016629436e-01, 1.609498442732761e+02, 2.635512538094961e+01, -5.560478352743160e-03, 5.244183288777855e+00, 5.244183288777683e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_op_pw91_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_op_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.943454613743002e-11, 5.943447909295012e-11, 5.943270886140215e-11, 5.943383614793580e-11, 5.943452307779664e-11, 5.943452307779664e-11, 4.054461399474382e-07, 4.054759934296591e-07, 4.062154812796825e-07, 4.045226658187946e-07, 4.054530489181717e-07, 4.054530489181717e-07, 7.439361418557143e-04, 7.415303143465112e-04, 6.682098736468464e-04, 6.528099726627176e-04, 7.430869126587116e-04, 7.430869126587116e-04, 9.394421893745945e-02, 9.505490601461064e-02, 3.990775528319641e-04, 1.080198036138018e-01, 9.436906454760406e-02, 9.436906454760406e-02, -3.048797322200519e+04, -2.284109199205567e+04, -6.182859560595330e+00, -3.363303194264797e+06, -2.386873008450416e+04, -2.386873008450416e+04, 7.359071814823975e-08, 7.372314568346760e-08, 7.360357843779603e-08, 7.370655495118699e-08, 7.365952036998949e-08, 7.365952036998949e-08, 3.676965407309530e-06, 3.620693538509584e-06, 3.631513527969697e-06, 3.588608865218604e-06, 3.697260555863502e-06, 3.697260555863502e-06, 2.141530290528506e-03, 2.204234867018899e-03, 2.634866780613979e-03, 3.060698975102429e-03, 1.914236487250816e-03, 1.914236487250816e-03, 5.912132126076931e-02, 4.594640957263088e-02, 7.849228181134181e-02, 1.196783345879583e-05, 1.163399113196283e-01, 1.163399113196283e-01, -4.060936486177652e+06, -1.793192313747669e+06, -5.997348021759309e+06, -6.844214546253675e-01, -2.577199133979134e+06, -2.577199133979131e+06, 3.455926193587908e-03, 2.919986151487616e-03, 3.039949954739959e-03, 3.179606966304835e-03, 3.102406321499129e-03, 3.102406321499129e-03, 4.093998409962083e-03, 3.078032752614585e-03, 3.174365376133562e-03, 3.320734948507487e-03, 3.246398856493457e-03, 3.246398856493456e-03, 1.746483687674759e-03, 2.783342663688650e-02, 2.065787277480293e-02, 1.357310954100893e-02, 1.716014596116999e-02, 1.716014596116999e-02, 4.678144751953702e-03, -1.084794128578546e+01, -1.620658367981053e+00, 2.143078945137922e-02, 3.051171830054795e-02, 3.051171830054886e-02, -1.333828696656960e+04, -3.554560565860548e+09, -7.859021309857446e+07, 4.389155172957613e-02, -5.705260563905540e+06, -5.705260563905573e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
