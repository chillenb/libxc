
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.096222852631746e-02, -5.096307645648500e-02, -5.096548679778183e-02, -5.095290037345875e-02, -5.095968824687427e-02, -5.095968824687427e-02, -4.137929987776266e-02, -4.138446664165903e-02, -4.150415690334034e-02, -4.129652097349313e-02, -4.138551634432818e-02, -4.138551634432818e-02, -2.737768682668404e-02, -2.714324726997198e-02, -2.153509233113833e-02, -2.179198940769575e-02, -2.193737250680264e-02, -2.193737250680264e-02, -6.104749241348775e-03, -6.672609490301400e-03, -2.994381455831024e-02, -1.929113731165557e-03, -3.383552183019970e-03, -3.383552183019970e-03, -5.408663515530027e-09, -7.228576616199869e-09, -8.170602453148152e-06, -3.863249599334455e-10, -1.421211643777611e-09, -1.421211643777611e-09, -5.863865918985602e-02, -5.885014068459790e-02, -5.864737298515304e-02, -5.883406589191648e-02, -5.874625237670056e-02, -5.874625237670056e-02, -2.063708596347599e-02, -2.109794821086650e-02, -1.961048164126191e-02, -2.000441967638305e-02, -2.140956796557376e-02, -2.140956796557376e-02, -3.881435556423939e-02, -5.596331073071943e-02, -3.616035355321159e-02, -5.133629996292260e-02, -4.072849469769060e-02, -4.072849469769060e-02, -3.825592668607350e-04, -3.084579624656768e-03, -2.981267768556525e-04, -7.179567606183893e-02, -1.014679829289312e-03, -1.014679829289312e-03, -1.509991701542680e-10, -4.090082411280409e-10, -7.300505882446868e-10, -7.669237597647576e-05, -8.142777099984582e-10, -8.142777099984582e-10, -6.047362542513070e-02, -5.503217515617334e-02, -5.684554454251371e-02, -5.842582620833308e-02, -5.762632550457789e-02, -5.762632550457789e-02, -6.163874127588575e-02, -2.708940576741841e-02, -3.455825392345624e-02, -4.377105856938113e-02, -3.892715593377145e-02, -3.892715593377145e-02, -5.585824304331647e-02, -5.559865349913384e-03, -9.784439664702252e-03, -2.334211722319740e-02, -1.568611158287055e-02, -1.568611158287056e-02, -2.635575206275221e-02, -6.147472613752066e-06, -2.358065078996741e-05, -2.832731649953581e-02, -2.526935876325964e-04, -2.526935876325998e-04, -2.102682770694487e-08, -3.823717035763631e-12, -6.395798173035613e-11, -1.923224169255767e-04, -7.147895832390729e-10, -7.147895854074772e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.271556104655076e-01, -1.271566487780441e-01, -1.271596093520569e-01, -1.271441959912767e-01, -1.271525074814979e-01, -1.271525074814979e-01, -1.091261309291654e-01, -1.091323020401508e-01, -1.092751509205587e-01, -1.090281639190707e-01, -1.091337004708635e-01, -1.091337004708635e-01, -7.839295203655246e-02, -7.810144872499579e-02, -6.982884478611630e-02, -7.031850640070224e-02, -7.054566978768675e-02, -7.054566978768675e-02, -2.727160341223361e-02, -2.917818220196026e-02, -8.302157295469613e-02, -1.029470052355480e-02, -1.683473194264353e-02, -1.683473194264350e-02, -3.530281989635478e-08, -4.715948497147539e-08, -5.189012964250149e-05, -2.532440258580943e-09, -9.300515336684613e-09, -9.300515334342254e-09, -1.293802068744142e-01, -1.295632437478907e-01, -1.293877790269752e-01, -1.295493747385218e-01, -1.294734307258761e-01, -1.294734307258761e-01, -7.328416427689935e-02, -7.430582351520865e-02, -7.097598704911552e-02, -7.188425605781847e-02, -7.497056018495221e-02, -7.497056018495221e-02, -8.440876115754321e-02, -8.350757440930649e-02, -8.189654980823351e-02, -8.148993187246098e-02, -8.519525479992247e-02, -8.519525479992247e-02, -2.266348465317623e-03, -1.567139402566200e-02, -1.782203465343955e-03, -1.179094707360353e-01, -5.708199849578304e-03, -5.708199849578304e-03, -9.915272039079206e-10, -2.681520491319627e-09, -4.794080302968559e-09, -4.744134242478323e-04, -5.340972180363619e-09, -5.340972183063063e-09, -7.599635823366215e-02, -8.065112002235070e-02, -7.931220882929492e-02, -7.797397957069484e-02, -7.867115831876052e-02, -7.867115831876052e-02, -7.322823666585884e-02, -7.433405911268473e-02, -8.021491698654397e-02, -8.253465911169315e-02, -8.193029006948432e-02, -8.193029006948432e-02, -8.549498682203235e-02, -2.577588833505485e-02, -3.966589915439492e-02, -6.595563703091524e-02, -5.382631996809496e-02, -5.382631996809499e-02, -7.250758652397882e-02, -3.911531642387848e-05, -1.482856609403580e-04, -6.899691784907000e-02, -1.518413307243282e-03, -1.518413307243264e-03, -1.368099797868476e-07, -2.525046135576282e-11, -4.208230858937827e-10, -1.165208345768140e-03, -4.690774621105478e-09, -4.690774621797467e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.927783789730320e-10, 1.927818781959714e-10, 1.927867046005011e-10, 1.927348747487826e-10, 1.927635542891564e-10, 1.927635542891564e-10, 1.079439578979687e-06, 1.079661764027606e-06, 1.084685834987852e-06, 1.074971628060589e-06, 1.079578397917006e-06, 1.079578397917006e-06, 1.793363514630489e-03, 1.779820995466094e-03, 1.438082225688863e-03, 1.405489936992902e-03, 1.431587684452328e-03, 1.431587684452328e-03, 1.557329509305285e-01, 1.644241339882576e-01, 9.710017761256892e-04, 1.129811019445339e-01, 1.452652709704396e-01, 1.452652709704393e-01, 4.259869540793457e-03, 5.018989884868796e-03, 2.577462094834443e-02, 1.504969396875861e-03, 3.145779625748470e-03, 3.145779624351521e-03, 2.833474118993115e-07, 2.852206733160280e-07, 2.834221907371545e-07, 2.850757246781002e-07, 2.843002424733148e-07, 2.843002424733148e-07, 6.109058719756943e-06, 6.094280956434912e-06, 5.808991236955620e-06, 5.798115492406654e-06, 6.251268584651197e-06, 6.251268584651197e-06, 5.902286334045851e-03, 7.449692033456962e-03, 7.683958833227067e-03, 1.139936678563621e-02, 5.904517896289702e-03, 5.904517896289702e-03, 6.308461033646937e-02, 5.698685463234518e-02, 6.427233644127971e-02, 6.039435913679820e-05, 1.211494751301893e-01, 1.211494751301893e-01, 1.469921467061315e-03, 1.850187688716205e-03, 1.851309457845877e-02, 6.254547248162923e-02, 8.056878965244950e-03, 8.056878974167092e-03, 1.257178713759930e-02, 1.078539197291206e-02, 1.135234968694681e-02, 1.186938426438439e-02, 1.160515591432899e-02, 1.160515591432899e-02, 1.488639392251210e-02, 7.961494723013619e-03, 9.193860835916591e-03, 1.084871740427834e-02, 9.977565701548409e-03, 9.977565701548409e-03, 5.916329986107249e-03, 4.249503411535482e-02, 3.911423316526083e-02, 3.482119973550069e-02, 3.898175659018458e-02, 3.898175659018460e-02, 1.143014440249310e-02, 2.106693835286043e-02, 3.235540430709102e-02, 5.498263241800455e-02, 1.096848685140461e-01, 1.096848685140437e-01, 5.292039407050194e-03, 2.005779865925479e-03, 2.523877354250999e-03, 1.001824527108384e-01, 1.003269687435131e-02, 1.003269687251532e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
