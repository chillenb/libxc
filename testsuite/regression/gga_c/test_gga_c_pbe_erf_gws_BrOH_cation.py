
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_pbe_erf_gws_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.048217915057826e-02, -5.048302617728405e-02, -5.048543573806778e-02, -5.047286268627406e-02, -5.047964308643110e-02, -5.047964308643110e-02, -4.013798352073381e-02, -4.014305422978928e-02, -4.026053179185281e-02, -4.005683238505200e-02, -4.014409155362825e-02, -4.014409155362825e-02, -2.622626135251662e-02, -2.603010683041114e-02, -2.125623120878276e-02, -2.147728401389258e-02, -2.150174001158253e-02, -2.150174001158253e-02, -8.866140980029903e-03, -9.208698050168829e-03, -2.852398840651781e-02, -5.344796254105233e-03, -4.663736665684759e-03, -4.663736665684764e-03, -1.354258864678377e-06, -1.575413872653753e-06, -2.564478655399313e-04, -2.629221437121430e-07, -2.745267634788231e-07, -2.745267634788231e-07, -5.740407012530018e-02, -5.761311947888134e-02, -5.741268495713756e-02, -5.759723114467549e-02, -5.751042625982106e-02, -5.751042625982106e-02, -1.981809879988945e-02, -2.026222412076731e-02, -1.882713176538317e-02, -1.920648329727728e-02, -2.056305269010886e-02, -2.056305269010886e-02, -3.440954666324741e-02, -4.618116402118377e-02, -3.203839846825578e-02, -4.172060503626535e-02, -3.574213757487085e-02, -3.574213757487082e-02, -2.707054716002744e-03, -6.792295003180583e-03, -2.343601251913934e-03, -6.807547623957695e-02, -3.868902349567595e-03, -3.868902349567595e-03, -1.204492089127720e-07, -2.456746826885705e-07, -1.090947719237038e-07, -9.765424478653628e-04, -1.544660515535389e-07, -1.544660515531053e-07, -4.734396123936964e-02, -4.437597064563759e-02, -4.538991295568957e-02, -4.625316719119843e-02, -4.581876917720470e-02, -4.581876917720470e-02, -4.738453542412058e-02, -2.534646189891975e-02, -3.066807654478634e-02, -3.680729647821037e-02, -3.363282263720062e-02, -3.363282263720062e-02, -4.678488512149924e-02, -8.914875427506552e-03, -1.214917971978640e-02, -2.132180373945478e-02, -1.625332156876380e-02, -1.625332156876380e-02, -2.452640039313237e-02, -2.269399691963138e-04, -5.421758597932028e-04, -2.353434436011309e-02, -1.771869965226169e-03, -1.771869965226148e-03, -3.825829078145034e-06, -4.695117538684292e-09, -4.305309566141065e-08, -1.534464207598934e-03, -1.275859657631551e-07, -1.275859657629382e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_pbe_erf_gws_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.266220438827192e-01, -1.266221859351121e-01, -1.266230382825605e-01, -1.266232778235601e-01, -1.266262670638252e-01, -1.266260022219416e-01, -1.266102294253703e-01, -1.266110695754244e-01, -1.266182964238433e-01, -1.266197023398089e-01, -1.266182964238433e-01, -1.266197023398089e-01, -1.067835026936615e-01, -1.067849127813613e-01, -1.067894808104546e-01, -1.067910911424844e-01, -1.069320906673599e-01, -1.069299579523785e-01, -1.066887976794359e-01, -1.066873495852050e-01, -1.068110464589570e-01, -1.067723798449084e-01, -1.068110464589570e-01, -1.067723798449084e-01, -6.908187314122434e-02, -6.879014213539247e-02, -6.892270499658568e-02, -6.856628189646635e-02, -6.287682947003027e-02, -6.331528620320029e-02, -6.359304595818935e-02, -6.345466017988050e-02, -6.151582937435075e-02, -6.570601204153713e-02, -6.151582937435075e-02, -6.570601204153713e-02, -2.148154354827451e-02, -2.042197834806628e-02, -2.214144027391165e-02, -2.088640814149951e-02, -7.565515591077401e-02, -7.303218782744961e-02, -1.305706387135492e-02, -1.281951567869039e-02, -8.868458133398226e-03, -2.136418802115268e-02, -8.868458133398236e-03, -2.136418802115268e-02, -2.980178661480677e-06, -2.484798049782606e-06, -3.513301762569483e-06, -2.859325769718077e-06, -5.652679207898669e-04, -4.866616296504660e-04, -5.130298171227438e-07, -5.395327619302654e-07, -3.255778111775067e-07, -1.762899047658031e-06, -3.255778111775067e-07, -1.762899047658031e-06, -1.275255342762035e-01, -1.275578707149045e-01, -1.277047541414080e-01, -1.277380400342025e-01, -1.275326696384878e-01, -1.275656118137048e-01, -1.276915216122163e-01, -1.277240513945118e-01, -1.276167405052243e-01, -1.276497182535766e-01, -1.276167405052243e-01, -1.276497182535766e-01, -7.062948767813619e-02, -7.063255377226059e-02, -7.162262705094209e-02, -7.163943466420029e-02, -6.843512024175108e-02, -6.833452229211115e-02, -6.932635437576715e-02, -6.921987739590638e-02, -7.213775224319484e-02, -7.241203610083884e-02, -7.213775224319484e-02, -7.241203610083884e-02, -6.780333316133026e-02, -6.803174255661476e-02, -6.724898295430769e-02, -6.720207939064750e-02, -6.635408243488070e-02, -6.341562820750919e-02, -6.497016534800215e-02, -6.185429974828595e-02, -6.622189633045260e-02, -7.074108164440164e-02, -6.622189633045257e-02, -7.074108164440160e-02, -6.252191436950342e-03, -6.154868133737762e-03, -1.915721882784876e-02, -1.906111894642642e-02, -5.495684563109149e-03, -5.000346160430050e-03, -1.108875649069662e-01, -1.109554858807606e-01, -9.242124160833675e-03, -8.423502189266187e-03, -9.242124160833675e-03, -8.423502189266187e-03, -2.556630892218676e-07, -2.277930225123328e-07, -5.027539924455526e-07, -4.806163066807238e-07, -2.386807689970760e-07, -2.009597843196932e-07, -2.035787161695629e-03, -2.005678807234363e-03, -5.544703224833196e-07, -2.141796637725288e-07, -5.544703224818288e-07, -2.141796637719054e-07, -6.168596653680630e-02, -6.128967154018441e-02, -6.388751561196893e-02, -6.350055053656987e-02, -6.319929121488031e-02, -6.280779497125352e-02, -6.255937515842834e-02, -6.216761315847293e-02, -6.288724843857746e-02, -6.249565122806061e-02, -6.288724843857746e-02, -6.249565122806061e-02, -5.983585563352835e-02, -5.949901584373839e-02, -6.017264054831139e-02, -5.987406073363743e-02, -6.299978735315098e-02, -6.265212559471872e-02, -6.372082367556473e-02, -6.341149360806578e-02, -6.362392291782888e-02, -6.331505063639173e-02, -6.362392291782888e-02, -6.331505063639173e-02, -6.958463653591122e-02, -6.941342437333398e-02, -2.614884626437684e-02, -2.599874910576410e-02, -3.385457972176364e-02, -3.349567185258739e-02, -4.718668281252704e-02, -4.686501203673811e-02, -4.054941037453232e-02, -4.056593802966489e-02, -4.054941037453232e-02, -4.056593802966489e-02, -5.727583645517759e-02, -5.681823634617775e-02, -4.670662757380685e-04, -4.583626386533445e-04, -1.166215285249359e-03, -1.071364888175696e-03, -4.608671867443163e-02, -4.515225273916463e-02, -3.953057117007675e-03, -3.505883511369771e-03, -3.953057117007626e-03, -3.505883511369722e-03, -8.090433448543546e-06, -7.274339931112063e-06, -9.422580649830521e-09, -9.358269710552583e-09, -9.485373680650245e-08, -7.884227308955586e-08, -3.257626672102261e-03, -3.139429838970113e-03, -4.269630334752706e-07, -1.820009511244798e-07, -4.269630334736714e-07, -1.820009511224469e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_pbe_erf_gws_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_pbe_erf_gws", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.923604819027752e-10, 3.847209638055504e-10, 1.923604819027752e-10, 1.923639880479864e-10, 3.847279760959727e-10, 1.923639880479864e-10, 1.923688473389138e-10, 3.847376946778276e-10, 1.923688473389138e-10, 1.923169144222372e-10, 3.846338288444744e-10, 1.923169144222372e-10, 1.923456476567263e-10, 3.846912953134526e-10, 1.923456476567263e-10, 1.923456476567263e-10, 3.846912953134526e-10, 1.923456476567263e-10, 1.059137605099525e-06, 2.118275210199050e-06, 1.059137605099525e-06, 1.059355286629055e-06, 2.118710573258111e-06, 1.059355286629055e-06, 1.064277718647881e-06, 2.128555437295763e-06, 1.064277718647881e-06, 1.054763290428253e-06, 2.109526580856507e-06, 1.054763290428253e-06, 1.059273952589671e-06, 2.118547905179342e-06, 1.059273952589671e-06, 1.059273952589671e-06, 2.118547905179342e-06, 1.059273952589671e-06, 1.488647452113581e-03, 2.977294904227161e-03, 1.488647452113581e-03, 1.479972387351212e-03, 2.959944774702425e-03, 1.479972387351212e-03, 1.249930011360929e-03, 2.499860022721858e-03, 1.249930011360929e-03, 1.221389031393715e-03, 2.442778062787429e-03, 1.221389031393715e-03, 1.237476099842861e-03, 2.474952199685723e-03, 1.237476099842861e-03, 1.237476099842861e-03, 2.474952199685723e-03, 1.237476099842861e-03, 7.730863837351319e-02, 1.546172767470264e-01, 7.730863837351319e-02, 7.729236630581104e-02, 1.545847326116221e-01, 7.729236630581104e-02, 8.305002945804384e-04, 1.661000589160877e-03, 8.305002945804384e-04, 8.825979945492152e-02, 1.765195989098430e-01, 8.825979945492152e-02, 4.739436556506348e-02, 9.478873113012698e-02, 4.739436556506348e-02, 4.739436556506346e-02, 9.478873113012692e-02, 4.739436556506346e-02, 3.405845827344978e-04, 6.811691654689956e-04, 3.405845827344978e-04, 3.754456094659308e-04, 7.508912189318615e-04, 3.754456094659308e-04, 1.611412203787525e-02, 3.222824407575051e-02, 1.611412203787525e-02, 1.190043908275789e-04, 2.380087816551579e-04, 1.190043908275789e-04, 4.538441228307543e-05, 9.076882456615086e-05, 4.538441228307543e-05, 4.538441228307543e-05, 9.076882456615086e-05, 4.538441228307543e-05, 2.799052877458667e-07, 5.598105754917334e-07, 2.799052877458667e-07, 2.817450787238111e-07, 5.634901574476221e-07, 2.817450787238111e-07, 2.799787323020740e-07, 5.599574646041478e-07, 2.799787323020740e-07, 2.816027273451582e-07, 5.632054546903163e-07, 2.816027273451582e-07, 2.808411319800785e-07, 5.616822639601567e-07, 2.808411319800785e-07, 2.808411319800785e-07, 5.616822639601567e-07, 2.808411319800785e-07, 5.903160650153495e-06, 1.180632130030699e-05, 5.903160650153495e-06, 5.889906937663280e-06, 1.177981387532656e-05, 5.889906937663280e-06, 5.612178138274181e-06, 1.122435627654836e-05, 5.612178138274181e-06, 5.602553776499787e-06, 1.120510755299957e-05, 5.602553776499787e-06, 6.041491613025555e-06, 1.208298322605111e-05, 6.041491613025555e-06, 6.041491613025555e-06, 1.208298322605111e-05, 6.041491613025555e-06, 4.033186240816750e-03, 8.066372481633501e-03, 4.033186240816750e-03, 4.372753890278977e-03, 8.745507780557953e-03, 4.372753890278977e-03, 5.122994238670326e-03, 1.024598847734065e-02, 5.122994238670326e-03, 6.342492619093296e-03, 1.268498523818659e-02, 6.342492619093296e-03, 3.981356960477078e-03, 7.962713920954155e-03, 3.981356960477078e-03, 3.981356960477076e-03, 7.962713920954151e-03, 3.981356960477076e-03, 8.260246282806508e-02, 1.652049256561301e-01, 8.260246282806508e-02, 5.610977770886057e-02, 1.122195554177211e-01, 5.610977770886057e-02, 7.840126539991640e-02, 1.568025307998328e-01, 7.840126539991640e-02, 5.412496885381862e-05, 1.082499377076372e-04, 5.412496885381862e-05, 9.275077231429452e-02, 1.855015446285891e-01, 9.275077231429452e-02, 9.275077231429452e-02, 1.855015446285891e-01, 9.275077231429452e-02, 7.266122501979555e-05, 1.453224500395911e-04, 7.266122501979555e-05, 1.140239905020475e-04, 2.280479810040951e-04, 1.140239905020475e-04, 6.792404989798441e-05, 1.358480997959688e-04, 6.792404989798441e-05, 4.629267807454477e-02, 9.258535614908953e-02, 4.629267807454477e-02, 6.150364367710008e-05, 1.230072873542002e-04, 6.150364367710008e-05, 6.150364367662015e-05, 1.230072873532403e-04, 6.150364367662015e-05, 6.368528024571401e-03, 1.273705604914280e-02, 6.368528024571401e-03, 5.907417685695952e-03, 1.181483537139190e-02, 5.907417685695952e-03, 6.062282017235204e-03, 1.212456403447041e-02, 6.062282017235204e-03, 6.196459878513686e-03, 1.239291975702737e-02, 6.196459878513686e-03, 6.128715891101861e-03, 1.225743178220372e-02, 6.128715891101861e-03, 6.128715891101861e-03, 1.225743178220372e-02, 6.128715891101861e-03, 7.166425359018860e-03, 1.433285071803772e-02, 7.166425359018860e-03, 5.648764273345818e-03, 1.129752854669164e-02, 5.648764273345818e-03, 6.022603090885001e-03, 1.204520618177000e-02, 6.022603090885001e-03, 6.451293239564623e-03, 1.290258647912924e-02, 6.451293239564623e-03, 6.242533597219181e-03, 1.248506719443836e-02, 6.242533597219181e-03, 6.242533597219181e-03, 1.248506719443836e-02, 6.242533597219181e-03, 3.628607576871119e-03, 7.257215153742238e-03, 3.628607576871119e-03, 3.666347499949708e-02, 7.332694999899415e-02, 3.666347499949708e-02, 2.796197715557774e-02, 5.592395431115550e-02, 2.796197715557774e-02, 1.931794342433938e-02, 3.863588684867876e-02, 1.931794342433938e-02, 2.380360862440926e-02, 4.760721724881853e-02, 2.380360862440926e-02, 2.380360862440927e-02, 4.760721724881855e-02, 2.380360862440927e-02, 7.717116003211783e-03, 1.543423200642357e-02, 7.717116003211783e-03, 1.471570988597595e-02, 2.943141977195191e-02, 1.471570988597595e-02, 2.957598733235152e-02, 5.915197466470305e-02, 2.957598733235152e-02, 2.520260822576597e-02, 5.040521645153193e-02, 2.520260822576597e-02, 6.863534417278211e-02, 1.372706883455642e-01, 6.863534417278211e-02, 6.863534417277971e-02, 1.372706883455594e-01, 6.863534417277971e-02, 6.919487018864336e-04, 1.383897403772867e-03, 6.919487018864336e-04, 1.043216111839238e-05, 2.086432223678475e-05, 1.043216111839238e-05, 3.835267126023624e-05, 7.670534252047248e-05, 3.835267126023624e-05, 6.313801895581828e-02, 1.262760379116366e-01, 6.313801895581828e-02, 5.811914799594818e-05, 1.162382959918964e-04, 5.811914799594818e-05, 5.811914799567370e-05, 1.162382959913474e-04, 5.811914799567370e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
