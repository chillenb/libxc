
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_cs1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.654968326073398e-02, -5.654975548752340e-02, -5.654996488528975e-02, -5.654889244586967e-02, -5.654947030345275e-02, -5.654947030345275e-02, -5.185328057780979e-02, -5.185405659019433e-02, -5.187205882020580e-02, -5.184148988701541e-02, -5.185429468942995e-02, -5.185429468942995e-02, -3.680800057762369e-02, -3.671908523118053e-02, -3.414280205651350e-02, -3.436267119510004e-02, -3.354558714319356e-02, -3.354558714319356e-02, -8.701860170848686e-03, -9.647259573788860e-03, -3.905004379654781e-02, 1.961770665855865e-03, 1.983859792067828e-03, 1.983859792067831e-03, 1.511768733741859e-03, 1.592327957421131e-03, 7.442487102934674e-03, 8.749836011986133e-04, 1.556200428746652e-03, 1.556200428746653e-03, -5.477138210047258e-02, -5.478216752272348e-02, -5.477183366028482e-02, -5.478135751905781e-02, -5.477688495809739e-02, -5.477688495809739e-02, -4.221859589797929e-02, -4.255343052604737e-02, -4.148984270547002e-02, -4.180091372371310e-02, -4.273877133127379e-02, -4.273877133127379e-02, -3.769488708837936e-02, -3.979694062515754e-02, -3.633300711983214e-02, -3.807735993719359e-02, -3.795372759032754e-02, -3.795372759032754e-02, 9.330297867992457e-03, -1.877577525387088e-03, 9.658776903526992e-03, -5.060695130774578e-02, 5.602904678187359e-03, 5.602904678187359e-03, 6.782616799675406e-04, 8.554058641617794e-04, 6.589075178230494e-04, 9.375850242530615e-03, 9.232931054321942e-04, 9.232931054321946e-04, -3.887801466130447e-02, -3.872638897659543e-02, -3.878765461139404e-02, -3.883182117183605e-02, -3.881046714067014e-02, -3.881046714067014e-02, -3.852654084443380e-02, -3.331161211518457e-02, -3.553715900218735e-02, -3.714442805500341e-02, -3.641093472638136e-02, -3.641093472638136e-02, -4.037103628656832e-02, -8.704388796160969e-03, -1.634986256494484e-02, -2.805283293394501e-02, -2.280920166953498e-02, -2.280920166953498e-02, -3.213258689307157e-02, 7.202015953837610e-03, 8.848671209707356e-03, -2.902115636581335e-02, 8.887616352705578e-03, 8.887616352705569e-03, 2.104768229240965e-03, 2.301917791765369e-04, 4.853822116535463e-04, 9.087041461325272e-03, 8.329382753879919e-04, 8.329382753879910e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_cs1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.310359377702578e-02, -6.310387352661469e-02, -6.310320016163548e-02, -6.310376723931792e-02, -6.310320212510979e-02, -6.310235158845286e-02, -6.310528502979597e-02, -6.310769044617072e-02, -6.310205597020956e-02, -6.310691541742704e-02, -6.310205597020956e-02, -6.310691541742704e-02, -6.324755535230855e-02, -6.323441787987967e-02, -6.324531496867120e-02, -6.323157770654607e-02, -6.318991443027994e-02, -6.316989990737966e-02, -6.329295997083563e-02, -6.327210466565511e-02, -6.329646256842990e-02, -6.317966663039125e-02, -6.329646256842990e-02, -6.317966663039125e-02, -5.741789742655847e-02, -5.590561577901595e-02, -5.778017815331035e-02, -5.591930299782196e-02, -6.067330911557487e-02, -6.340433090564540e-02, -6.232904084075053e-02, -6.144476121396642e-02, -4.969798026389652e-02, -7.623273001982836e-02, -4.969798026389652e-02, -7.623273001982836e-02, -4.629954415122307e-02, -4.333779628214831e-02, -4.686285973074796e-02, -4.325688973954352e-02, -6.172129846387227e-02, -5.277938050439253e-02, -3.157188938427716e-02, -3.102142277877404e-02, -2.920397290577265e-02, -4.255609433684822e-02, -2.920397290577265e-02, -4.255609433684824e-02, 1.736998896879645e-03, 2.207008145352500e-03, 1.788872447061132e-03, 2.347588265691334e-03, 6.824101909962147e-03, 8.537051460295892e-03, 1.198729337652334e-03, 1.122185082641230e-03, 2.485360826479954e-03, -2.522723895447795e-04, 2.485360826479953e-03, -2.522723895447699e-04, -5.915903508682496e-02, -5.921465171138922e-02, -5.911954009655952e-02, -5.917787314683439e-02, -5.915654359767558e-02, -5.921399031993370e-02, -5.912367719360034e-02, -5.917950620350265e-02, -5.913849904236057e-02, -5.919625603618799e-02, -5.913849904236057e-02, -5.919625603618799e-02, -7.835596494999912e-02, -7.836801974452169e-02, -7.772477601958501e-02, -7.779584046460890e-02, -8.029457964202265e-02, -7.941400085408407e-02, -7.975462828335221e-02, -7.887089833429572e-02, -7.630791751984040e-02, -7.832959363989465e-02, -7.630791751984040e-02, -7.832959363989465e-02, -4.711114758666758e-02, -4.750612944745061e-02, -4.459310899903152e-02, -4.449700796555662e-02, -5.038820335371585e-02, -4.420561328625949e-02, -4.600578132539661e-02, -4.096363383655229e-02, -4.280279642964400e-02, -5.109416105811867e-02, -4.280279642964401e-02, -5.109416105811866e-02, -7.565049576757851e-03, -7.640172033064380e-03, -4.263082487446484e-02, -4.237987297791143e-02, -5.371097618609855e-03, -4.228292139543643e-03, -5.344509970890125e-02, -5.353640435760782e-02, -1.895639872832230e-02, -2.126899848830231e-02, -1.895639872832230e-02, -2.126899848830231e-02, 8.294413208684420e-04, 9.655260932056776e-04, 1.101073241335035e-03, 1.168199470454262e-03, 7.678737103794064e-04, 9.633256987944478e-04, 4.263244646450874e-03, 4.631750564486861e-03, 3.350738215005098e-04, 1.567151718410905e-03, 3.350738215005136e-04, 1.567151718410906e-03, -4.360467291965670e-02, -4.299172628504097e-02, -4.385289390575133e-02, -4.322496869816942e-02, -4.373633143183534e-02, -4.311163165202684e-02, -4.366069553342204e-02, -4.304556488938949e-02, -4.369553322382070e-02, -4.307587204613936e-02, -4.369553322382070e-02, -4.307587204613936e-02, -4.319613304223408e-02, -4.267890598816423e-02, -5.158773442670626e-02, -5.077959119956717e-02, -4.753023171909045e-02, -4.671528858762526e-02, -4.453547278079006e-02, -4.396844561064712e-02, -4.580048998265196e-02, -4.519455277422370e-02, -4.580048998265196e-02, -4.519455277422370e-02, -4.530845701193320e-02, -4.500215325857844e-02, -5.201146643867708e-02, -5.152307909138266e-02, -5.498463922647313e-02, -5.360678447313382e-02, -4.734064199749714e-02, -4.651359451023351e-02, -5.135843463186063e-02, -5.126167549298734e-02, -5.135843463186065e-02, -5.126167549298732e-02, -5.077431148158590e-02, -4.947249434033120e-02, 7.650568798390166e-03, 7.863261780809422e-03, 7.020912329805216e-03, 8.069399327689948e-03, -4.345753093922475e-02, -4.122799155354841e-02, -2.709166575158667e-03, -3.209478166917156e-03, -2.709166575158705e-03, -3.209478166917206e-03, 2.553735575046765e-03, 2.935450907686054e-03, 3.052707153255614e-04, 3.079814912603695e-04, 5.609059984063383e-04, 7.160803397059977e-04, -1.023256742122710e-03, -5.301466833617810e-04, 3.785890209696885e-04, 1.414102316374403e-03, 3.785890209696915e-04, 1.414102316374403e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_cs1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_cs1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.177681883975851e-11, 1.792842434389471e-13, 3.177695924891326e-11, 3.177551606632270e-11, 1.792773861771157e-13, 3.177601234107040e-11, 3.177230192777425e-11, 1.792531329089427e-13, 3.177114469917747e-11, 3.178700303285899e-11, 1.793550339053714e-13, 3.178987661799208e-11, 3.177600392496879e-11, 1.793007491136384e-13, 3.178308360632184e-11, 3.177600392496879e-11, 1.793007491136384e-13, 3.178308360632184e-11, 3.199485935292371e-07, 1.899414543589440e-09, 3.197081922999202e-07, 3.199107736481971e-07, 1.899100866166196e-09, 3.196567130931924e-07, 3.188548798594782e-07, 1.891618961353145e-09, 3.185695933609070e-07, 3.204298795442637e-07, 1.902844071983485e-09, 3.201206052847216e-07, 3.203134735716419e-07, 1.898812371682081e-09, 3.191617993681841e-07, 3.203134735716419e-07, 1.898812371682081e-09, 3.191617993681841e-07, 1.168879960594281e-03, 7.772413409522132e-06, 1.121327722640615e-03, 1.186253968964477e-03, 7.871668206804500e-06, 1.127932130530355e-03, 1.417590167873293e-03, 1.055234986700368e-05, 1.495504374777898e-03, 1.408412106959439e-03, 1.008183720048612e-05, 1.384169948068367e-03, 1.042588750953183e-03, 1.002697140830128e-05, 1.759247442758875e-03, 1.042588750953183e-03, 1.002697140830128e-05, 1.759247442758875e-03, 5.369897871813237e-01, 5.455229835196347e-03, 4.798874919521430e-01, 5.254769439735295e-01, 5.146647123133468e-03, 4.591181966610038e-01, 6.039307912197704e-04, 3.489923340709345e-06, 4.657686781741639e-04, 9.322396336251307e-01, 1.296927266083449e-02, 8.966376881770541e-01, 4.518454175231610e-01, 4.490357911515987e-03, 1.555069090276690e+00, 4.518454175231610e-01, 4.490357911515985e-03, 1.555069090276691e+00, 4.344844359737559e+00, 1.076818171166425e-01, 4.297303268020871e+00, 4.574136754709637e+00, 1.133343113619174e-01, 4.545295637525908e+00, 2.328836465739463e+00, 5.458213685534257e-02, 2.327168042485274e+00, 4.006929243997050e+00, 9.964840309658513e-02, 3.900166292777848e+00, 4.324876184094659e+00, 6.633268743236878e-02, 1.099311578568648e+01, 4.324876184093819e+00, 6.633268743235440e-02, 1.099311578566670e+01, 2.757908668037323e-08, 1.530974972704307e-10, 2.761887245004189e-08, 2.737511235231626e-08, 1.518955824019263e-10, 2.742149076207785e-08, 2.756841088100626e-08, 1.530466414241576e-10, 2.761254960348422e-08, 2.739336473822887e-08, 1.519855035701435e-10, 2.743324544956006e-08, 2.747407795944051e-08, 1.524855799319463e-10, 2.751962160587313e-08, 2.747407795944051e-08, 1.524855799319463e-10, 2.751962160587313e-08, 7.925754816043068e-06, 5.581436801932599e-08, 7.927807436051255e-06, 7.605372067051409e-06, 5.329276693523261e-08, 7.616431997773018e-06, 8.277562365504618e-06, 5.866727717910140e-08, 8.178694413488492e-06, 7.991404520355125e-06, 5.634055984239522e-08, 7.891923645522446e-06, 7.486746555059922e-06, 5.306930715827652e-08, 7.726347885865040e-06, 7.486746555059922e-06, 5.306930715827652e-08, 7.726347885865040e-06, 1.454312613473215e-03, 9.064863837093889e-06, 1.469368093297052e-03, 3.481931831785854e-04, 1.943924137348960e-06, 3.383277330219985e-04, 2.559465555297016e-03, 1.439117086219713e-05, 2.046752401674541e-03, 8.507346743964823e-04, 4.598196822351579e-06, 7.501696833922876e-04, 1.102512049397751e-03, 7.642930539632408e-06, 1.441813101221692e-03, 1.102512049397751e-03, 7.642930539632408e-06, 1.441813101221692e-03, 1.296097111160829e+00, 2.406106180826308e-02, 1.310738847165407e+00, 3.676227885606205e-01, 4.643788325039375e-03, 3.627203491749812e-01, 1.511125574600636e+00, 2.788235952583743e-02, 1.440380960956863e+00, 1.719760463103358e-06, 9.311053274909754e-09, 1.720971211083386e-06, 1.315525620458138e+00, 2.252638690574724e-02, 1.482021458916511e+00, 1.315525620458138e+00, 2.252638690574724e-02, 1.482021458916511e+00, 5.634732803593869e+00, 1.313468450772562e-01, 4.884475089667592e+00, 4.843792814973763e+00, 1.173227909583964e-01, 4.476027632709109e+00, 2.768829016083680e+01, 7.335865350522819e-01, 3.074651101149455e+01, 2.462689385859679e+00, 5.182215236232531e-02, 2.372446273310788e+00, 1.372288228067751e+01, 2.759262502545189e-01, 1.344422161366252e+01, 1.372288228065731e+01, 2.759262502545319e-01, 1.344422161366538e+01, 1.830761479699129e-04, 9.939968235991231e-07, 1.747507244971018e-04, 4.926271676206334e-04, 2.747485327342397e-06, 4.752255737473498e-04, 3.856935553208695e-04, 2.131048739434226e-06, 3.707253298505137e-04, 2.949259085818115e-04, 1.620606421025255e-06, 2.839268988818589e-04, 3.404356361412744e-04, 1.875836084882493e-06, 3.274827665139584e-04, 3.404356361412744e-04, 1.875836084882493e-06, 3.274827665139584e-04, 9.890390986097084e-05, 5.403393930438325e-07, 9.656269053814293e-05, 4.776719865985803e-03, 3.235392932770621e-05, 4.655481997590637e-03, 3.089020938949921e-03, 1.947644291506371e-05, 2.993181460328863e-03, 1.662927611857930e-03, 9.877305459777073e-06, 1.625147314356588e-03, 2.338276679518087e-03, 1.433289215351766e-05, 2.286034854767101e-03, 2.338276679518087e-03, 1.433289215351766e-05, 2.286034854767101e-03, 3.066013592947530e-04, 1.699375476423360e-06, 2.931791036144573e-04, 1.760384524876001e-01, 1.909554022857716e-03, 1.729736920071288e-01, 9.401062572324916e-02, 8.631818713987394e-04, 9.065438110573279e-02, 2.478885562962485e-02, 1.761335231597998e-04, 2.408345024949781e-02, 5.120633532285071e-02, 4.168323245188587e-04, 5.124785837305676e-02, 5.120633532285081e-02, 4.168323245188589e-04, 5.124785837305679e-02, 7.114719792803075e-03, 4.824141582633109e-05, 6.821027553605381e-03, 2.136049624907940e+00, 5.073809742974433e-02, 2.136958333627289e+00, 2.023557226960119e+00, 4.637945760597657e-02, 2.055494311123761e+00, 2.589206349332545e-02, 1.681728150925844e-04, 2.368692132204238e-02, 2.310239641452976e+00, 4.796994287941250e-02, 2.629090279689562e+00, 2.310239641452982e+00, 4.796994287941245e-02, 2.629090279689565e+00, 3.418935252027748e+00, 8.634691947928115e-02, 3.486270979383393e+00, 1.751099621557491e+01, 5.815526209447911e-01, 3.079343422311375e+01, 1.073825138220012e+01, 2.780000353914777e-01, 1.141874693038301e+01, 2.600914713963214e+00, 5.121033871299183e-02, 2.536051820722075e+00, 2.819984235604227e+01, 3.636803558659603e-01, 1.400741127708666e+01, 2.819984235601661e+01, 3.636803558658180e-01, 1.400741127708306e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
