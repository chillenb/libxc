
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86vwn_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.168744261718961e-01, -1.168737185205951e-01, -1.168720298925974e-01, -1.168825282372013e-01, -1.168768200750390e-01, -1.168768200750390e-01, -5.134153102188693e-02, -5.134448131949827e-02, -5.141337393745642e-02, -5.129676605787030e-02, -5.134541002542792e-02, -5.134541002542792e-02, -3.080967109708507e-02, -3.055448158879698e-02, -2.424575820001267e-02, -2.454538166999456e-02, -2.461504751720683e-02, -2.461504751720683e-02, -5.772904679411973e-03, -6.790880455701372e-03, -3.354438808624741e-02, 3.103504381046236e-03, 2.192086297238521e-03, 2.192086297238504e-03, -3.769092734506653e-03, -3.932617426084320e-03, -9.141603259441595e-03, -2.344299838735749e-03, -2.436337549296905e-03, -2.436337549296904e-03, -6.699501036015590e-02, -6.714283711946130e-02, -6.700109969492066e-02, -6.713158575615077e-02, -6.707010249182521e-02, -6.707010249182521e-02, -3.188339141778852e-02, -3.218897055430020e-02, -3.145396236872146e-02, -3.170449457352141e-02, -3.228997482553519e-02, -3.228997482553519e-02, -4.235283939019610e-02, -5.772893356139033e-02, -3.969449756606708e-02, -5.333031395188724e-02, -4.407650518054575e-02, -4.407650518054572e-02, 5.580236556919523e-03, 1.717966882145004e-03, 4.839322612431002e-03, -7.515390518816580e-02, 4.714339498870533e-03, 4.714339498870533e-03, -1.857584946953237e-03, -2.297659197234386e-03, -1.799728395059578e-03, -1.064359638061479e-03, -2.008141894629478e-03, -2.008141894629477e-03, -6.119534790761576e-02, -5.662081732300503e-02, -5.814251009591894e-02, -5.946786267349747e-02, -5.879706083514622e-02, -5.879706083514622e-02, -6.209222577078535e-02, -3.059141349080404e-02, -3.814437660098632e-02, -4.670547101073126e-02, -4.228972399809137e-02, -4.228972399809137e-02, -5.781976441553578e-02, -3.065876398458067e-03, -1.013696652967786e-02, -2.678031212857544e-02, -1.814168110565360e-02, -1.814168110565361e-02, -2.984230333339825e-02, -9.763915760147620e-03, -6.130599791216367e-03, -3.178329829730109e-02, 3.150716020256138e-03, 3.150716020256135e-03, -5.032919238528227e-03, -6.836981342354063e-04, -1.360076471783482e-03, 2.340089217287275e-03, -1.894271644705367e-03, -1.894271644705363e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86vwn_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.829538934732908e-02, -5.829567222486528e-02, -5.829587832952381e-02, -5.829635533224435e-02, -5.829811419105092e-02, -5.829758683541655e-02, -5.828831853753499e-02, -5.828999196155712e-02, -5.829243285274383e-02, -5.829523271725646e-02, -5.829243285274383e-02, -5.829523271725646e-02, -9.426228400267730e-02, -9.426378589512768e-02, -9.427427336554724e-02, -9.427598844596029e-02, -9.455514580921119e-02, -9.455287720159243e-02, -9.406414739255885e-02, -9.406260359979300e-02, -9.429739790863303e-02, -9.425621630937969e-02, -9.429739790863303e-02, -9.425621630937969e-02, -8.635505252916575e-02, -8.607132888285868e-02, -8.620950117644294e-02, -8.586311179157721e-02, -8.022738353026608e-02, -8.064680072620024e-02, -8.085950701790735e-02, -8.072707281064317e-02, -7.888194695012407e-02, -8.294115952078321e-02, -7.888194695012407e-02, -8.294115952078321e-02, -4.699954285184101e-02, -4.611149178216296e-02, -4.847211036357355e-02, -4.738238544023248e-02, -9.124710385884981e-02, -8.869991709119522e-02, -2.535240489238788e-02, -2.526065038973653e-02, -2.509859860122065e-02, -5.003359701694740e-02, -2.509859860122066e-02, -5.003359701694737e-02, -5.037348230095303e-03, -4.615895943108562e-03, -5.271583703883187e-03, -4.771773918537428e-03, 5.613838626301363e-03, 6.709609553771317e-03, -3.002624639034075e-03, -3.073174919192929e-03, -2.721247466882093e-03, -5.354727044355376e-03, -2.721247466882092e-03, -5.354727044355376e-03, -1.189876783061771e-01, -1.190203876683782e-01, -1.193717692385542e-01, -1.194054021335515e-01, -1.190032353351167e-01, -1.190365559109285e-01, -1.193429799927829e-01, -1.193758516183947e-01, -1.191833651423177e-01, -1.192167045387872e-01, -1.191833651423177e-01, -1.192167045387872e-01, -5.652473065251541e-02, -5.652860773092625e-02, -5.786265688671158e-02, -5.788368219453732e-02, -5.304316405117070e-02, -5.291183150484448e-02, -5.424020756308347e-02, -5.410262008552927e-02, -5.882819855278359e-02, -5.916799353337709e-02, -5.882819855278359e-02, -5.916799353337709e-02, -8.568714265993410e-02, -8.592680751768116e-02, -8.220673098975569e-02, -8.215391031677453e-02, -8.538186859527626e-02, -8.228502504068792e-02, -8.184694905546969e-02, -7.829702960138954e-02, -8.361853476515733e-02, -8.840369613986812e-02, -8.361853476515732e-02, -8.840369613986809e-02, 5.272831077413906e-03, 5.276660951030332e-03, -3.410448355501421e-02, -3.405159590266969e-02, 8.465684818158119e-03, 8.542940500407312e-03, -1.177542004083849e-01, -1.178210672456999e-01, -1.342731804162528e-02, -1.324438346649082e-02, -1.342731804162528e-02, -1.324438346649082e-02, -2.482266419755717e-03, -2.355620080382368e-03, -3.008801260419517e-03, -2.947051173385633e-03, -2.398651887121145e-03, -2.215926951306087e-03, 1.721860469786890e-02, 1.727286105218934e-02, -3.428730886042688e-03, -2.264562256134982e-03, -3.428730886042689e-03, -2.264562256134981e-03, -7.585028436087289e-02, -7.538023860836497e-02, -7.957658637406927e-02, -7.913161907107803e-02, -7.845462303636226e-02, -7.799989894740771e-02, -7.738321928477285e-02, -7.692409237896407e-02, -7.793646338048338e-02, -7.747961677260949e-02, -7.793646338048338e-02, -7.747961677260949e-02, -7.349526653904077e-02, -7.308865183571717e-02, -8.076578165746101e-02, -8.046303566702520e-02, -8.266813283904026e-02, -8.230135532005874e-02, -8.198384243758548e-02, -8.164234085464996e-02, -8.266638692881782e-02, -8.233330145102367e-02, -8.266638692881782e-02, -8.233330145102367e-02, -8.424224177527527e-02, -8.405219996813966e-02, -4.641176703942843e-02, -4.629655943540596e-02, -5.798603686276117e-02, -5.765893628308991e-02, -7.202576475714079e-02, -7.168394972463182e-02, -6.609211662990820e-02, -6.610864925859124e-02, -6.609211662990820e-02, -6.610864925859126e-02, -7.884555718567250e-02, -7.837613597053127e-02, 3.777940865949572e-03, 3.920355791770940e-03, 1.548330356632988e-02, 1.601856819252153e-02, -7.134290418860276e-02, -7.029289439899411e-02, 7.362549455701368e-03, 7.547539629693751e-03, 7.362549455701310e-03, 7.547539629693703e-03, -6.468726756874054e-03, -6.133197459994227e-03, -9.000008397647734e-04, -8.973446639564444e-04, -1.855466652565918e-03, -1.708926761412285e-03, 1.043442992167061e-02, 1.050174130569487e-02, -3.125766711598782e-03, -2.148894641058064e-03, -3.125766711598774e-03, -2.148894641058058e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86vwn_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.992847368409961e-10, -3.985694736819921e-10, -1.992847368409961e-10, -1.992841339147617e-10, -3.985682678295233e-10, -1.992841339147617e-10, -1.992778401501803e-10, -3.985556803003606e-10, -1.992778401501803e-10, -1.992868700078032e-10, -3.985737400156064e-10, -1.992868700078032e-10, -1.992826587496666e-10, -3.985653174993331e-10, -1.992826587496666e-10, -1.992826587496666e-10, -3.985653174993331e-10, -1.992826587496666e-10, 6.100263047055173e-07, 1.220052609411035e-06, 6.100263047055173e-07, 6.103117640000376e-07, 1.220623528000075e-06, 6.103117640000376e-07, 6.168380690057340e-07, 1.233676138011468e-06, 6.168380690057340e-07, 6.047862425425480e-07, 1.209572485085096e-06, 6.047862425425480e-07, 6.102748198750146e-07, 1.220549639750029e-06, 6.102748198750146e-07, 6.102748198750146e-07, 1.220549639750029e-06, 6.102748198750146e-07, 1.949005891200170e-03, 3.898011782400340e-03, 1.949005891200170e-03, 1.939252197873430e-03, 3.878504395746859e-03, 1.939252197873430e-03, 1.672800513031751e-03, 3.345601026063502e-03, 1.672800513031751e-03, 1.628589633260033e-03, 3.257179266520066e-03, 1.628589633260033e-03, 1.651965817638955e-03, 3.303931635277910e-03, 1.651965817638955e-03, 1.651965817638955e-03, 3.303931635277910e-03, 1.651965817638955e-03, 3.167775120803380e-01, 6.335550241606760e-01, 3.167775120803380e-01, 3.162111472325586e-01, 6.324222944651172e-01, 3.162111472325586e-01, 1.029600725881016e-03, 2.059201451762032e-03, 1.029600725881016e-03, 4.302281916570422e-01, 8.604563833140844e-01, 4.302281916570422e-01, 3.643250572229914e-01, 7.286501144459828e-01, 3.643250572229914e-01, 3.643250572229913e-01, 7.286501144459826e-01, 3.643250572229913e-01, -5.433163092392472e+00, -1.086632618478494e+01, -5.433163092392472e+00, -7.260820960347710e+00, -1.452164192069542e+01, -7.260820960347710e+00, -1.023687570521338e+01, -2.047375141042675e+01, -1.023687570521338e+01, -5.180222485032708e-01, -1.036044497006542e+00, -5.180222485032708e-01, -2.938434134256406e+00, -5.876868268512811e+00, -2.938434134256406e+00, -2.938434134256429e+00, -5.876868268512858e+00, -2.938434134256429e+00, 1.950279916052194e-07, 3.900559832104387e-07, 1.950279916052194e-07, 1.975268505110365e-07, 3.950537010220730e-07, 1.975268505110365e-07, 1.951289502500160e-07, 3.902579005000320e-07, 1.951289502500160e-07, 1.973347484523948e-07, 3.946694969047896e-07, 1.973347484523948e-07, 1.962989113508993e-07, 3.925978227017985e-07, 1.962989113508993e-07, 1.962989113508993e-07, 3.925978227017985e-07, 1.962989113508993e-07, 2.078307492434824e-06, 4.156614984869647e-06, 2.078307492434824e-06, 2.186362695513926e-06, 4.372725391027851e-06, 2.186362695513926e-06, 1.623718563762003e-06, 3.247437127524005e-06, 1.623718563762003e-06, 1.723831440082599e-06, 3.447662880165198e-06, 1.723831440082599e-06, 2.364398886741060e-06, 4.728797773482119e-06, 2.364398886741060e-06, 2.364398886741060e-06, 4.728797773482119e-06, 2.364398886741060e-06, 5.565119041826174e-03, 1.113023808365235e-02, 5.565119041826174e-03, 6.265163802878281e-03, 1.253032760575656e-02, 6.265163802878281e-03, 7.339069630280453e-03, 1.467813926056091e-02, 7.339069630280453e-03, 9.618808480576869e-03, 1.923761696115374e-02, 9.618808480576869e-03, 5.469469618802833e-03, 1.093893923760567e-02, 5.469469618802833e-03, 5.469469618802833e-03, 1.093893923760567e-02, 5.469469618802833e-03, 1.313837259241460e-01, 2.627674518482920e-01, 1.313837259241460e-01, 1.741000094797138e-01, 3.482000189594276e-01, 1.741000094797138e-01, -5.699292662914029e-03, -1.139858532582806e-02, -5.699292662914029e-03, 5.471020728455250e-05, 1.094204145691050e-04, 5.471020728455250e-05, 5.661456166618740e-01, 1.132291233323748e+00, 5.661456166618740e-01, 5.661456166618740e-01, 1.132291233323748e+00, 5.661456166618740e-01, -4.698667609291960e-01, -9.397335218583921e-01, -4.698667609291960e-01, -9.202541500512857e-01, -1.840508300102571e+00, -9.202541500512857e-01, -2.316382209518245e+02, -4.632764419036490e+02, -2.316382209518245e+02, -2.579636811927400e+00, -5.159273623854800e+00, -2.579636811927400e+00, -3.260020428483624e+01, -6.520040856967249e+01, -3.260020428483624e+01, -3.260020428483609e+01, -6.520040856967218e+01, -3.260020428483609e+01, 1.063032895585910e-02, 2.126065791171819e-02, 1.063032895585910e-02, 9.016913280607464e-03, 1.803382656121493e-02, 9.016913280607464e-03, 9.466855940172074e-03, 1.893371188034415e-02, 9.466855940172074e-03, 9.917223467418305e-03, 1.983444693483661e-02, 9.917223467418305e-03, 9.681257966913033e-03, 1.936251593382607e-02, 9.681257966913033e-03, 9.681257966913033e-03, 1.936251593382607e-02, 9.681257966913033e-03, 1.295612976160192e-02, 2.591225952320384e-02, 1.295612976160192e-02, 8.448164307989213e-03, 1.689632861597843e-02, 8.448164307989213e-03, 8.864765850186834e-03, 1.772953170037367e-02, 8.864765850186834e-03, 9.584407846779643e-03, 1.916881569355929e-02, 9.584407846779643e-03, 9.194818743640800e-03, 1.838963748728160e-02, 9.194818743640800e-03, 9.194818743640800e-03, 1.838963748728160e-02, 9.194818743640800e-03, 5.006801053355767e-03, 1.001360210671153e-02, 5.006801053355767e-03, 9.519805576952919e-02, 1.903961115390584e-01, 9.519805576952919e-02, 6.429900458755097e-02, 1.285980091751019e-01, 6.429900458755097e-02, 3.700700555862552e-02, 7.401401111725103e-02, 3.700700555862552e-02, 4.989251333103937e-02, 9.978502666207874e-02, 4.989251333103937e-02, 4.989251333103939e-02, 9.978502666207878e-02, 4.989251333103939e-02, 1.210906614884137e-02, 2.421813229768274e-02, 1.210906614884137e-02, -1.017886297973208e+01, -2.035772595946416e+01, -1.017886297973208e+01, -5.775811589686978e+00, -1.155162317937396e+01, -5.775811589686978e+00, 5.240177623329669e-02, 1.048035524665934e-01, 5.240177623329669e-02, -6.003171174053202e-02, -1.200634234810640e-01, -6.003171174053202e-02, -6.003171174053203e-02, -1.200634234810641e-01, -6.003171174053203e-02, -6.753910454811358e+00, -1.350782090962272e+01, -6.753910454811358e+00, -1.034657843692385e+00, -2.069315687384770e+00, -1.034657843692385e+00, -2.386332735714215e+00, -4.772665471428430e+00, -2.386332735714215e+00, -4.940174432915057e-01, -9.880348865830114e-01, -4.940174432915057e-01, -5.671590251617221e+01, -1.134318050323444e+02, -5.671590251617221e+01, -5.671590251617241e+01, -1.134318050323448e+02, -5.671590251617241e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
