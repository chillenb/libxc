
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_wl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.017147088829371e-02, -5.017213557397199e-02, -5.017414032821783e-02, -5.016327604885274e-02, -5.017182944917823e-02, -5.017182944917823e-02, -4.167026593771463e-02, -4.167418243243040e-02, -4.178203031392931e-02, -4.159653619270483e-02, -4.167228225695313e-02, -4.167228225695313e-02, -2.726951777678230e-02, -2.704046013362742e-02, -2.121856231487839e-02, -2.151579352114182e-02, -2.718688301930345e-02, -2.718688301930345e-02, -8.597580875537438e-03, -9.493181834959319e-03, -3.447787255839848e-02, 2.400295452849990e-03, -8.875520461360449e-03, -8.875520461360449e-03, 2.123408285939355e-02, 2.113346267816213e-02, 1.653739473440044e-02, 2.260653848805275e-02, 2.111142695621297e-02, 2.111142695621297e-02, -5.813342891839195e-02, -5.834135649141964e-02, -5.815414804035998e-02, -5.831581878902593e-02, -5.824056289378814e-02, -5.824056289378814e-02, -2.208923962546562e-02, -2.252268082629794e-02, -2.148920706757250e-02, -2.182442765099826e-02, -2.318350945162066e-02, -2.318350945162066e-02, -4.305490276087107e-02, -7.609236516718658e-02, -4.140553289825703e-02, -6.468832020659279e-02, -4.631546815572050e-02, -4.631546815572050e-02, 8.951883339972903e-03, -1.516229037230128e-03, 8.531500394214103e-03, -8.094504773079518e-02, 5.475929611416472e-03, 5.475929611416472e-03, 2.258847045068001e-02, 2.245917568904861e-02, 2.175093173697854e-02, 1.351787935827876e-02, 2.219949616346322e-02, 2.219949616346322e-02, -1.047414876147836e-01, -7.883466375422737e-02, -8.553788107435097e-02, -9.222048981523515e-02, -8.866955045905280e-02, -8.866955045905280e-02, -1.127490722432954e-01, -3.103632566561926e-02, -3.997205157998785e-02, -5.233601531868808e-02, -4.548149675644587e-02, -4.548149675644587e-02, -7.422166603524333e-02, -6.374218639901321e-03, -1.247575596553960e-02, -2.651205561696742e-02, -1.892870346163750e-02, -1.892870346163751e-02, -2.936137707255762e-02, 1.745067875511512e-02, 1.504531780881667e-02, -3.290632673073917e-02, 1.010906645228259e-02, 1.010906645228259e-02, 2.122127992503125e-02, 2.278794990690678e-02, 2.263193444735784e-02, 9.987927870599956e-03, 2.199884180916478e-02, 2.199884180916478e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_wl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.187832443002049e-01, -1.187842135042632e-01, -1.187871375043862e-01, -1.187712954753053e-01, -1.187837671255550e-01, -1.187837671255550e-01, -1.053425146401188e-01, -1.053485367591813e-01, -1.055143279219285e-01, -1.052292499486359e-01, -1.053456182422156e-01, -1.053456182422156e-01, -7.997575699408277e-02, -7.959815757404097e-02, -6.978480882192116e-02, -7.030899006032769e-02, -7.983959807933692e-02, -7.983959807933692e-02, -4.434782216962180e-02, -4.594334847102904e-02, -9.195042433828696e-02, -2.359840829765401e-02, -4.484352244976496e-02, -4.484352244976496e-02, 1.600015209385852e-02, 1.578225239594414e-02, 5.568112605669098e-03, 1.889082149014638e-02, 1.574782434308981e-02, 1.574782434308981e-02, -1.294481382134637e-01, -1.297294941402502e-01, -1.294761973444268e-01, -1.296949656261165e-01, -1.295931672601484e-01, -1.295931672601484e-01, -7.269120585820070e-02, -7.345535102776163e-02, -7.163472955890331e-02, -7.222823580586903e-02, -7.460947748734138e-02, -7.460947748734138e-02, -1.036172663919683e-01, -1.440841152232855e-01, -1.010291453578692e-01, -1.311566446345961e-01, -1.083526148273623e-01, -1.083526148273623e-01, -1.049435733235217e-02, -3.168792038581087e-02, -1.128044335238047e-02, -1.552697074517017e-01, -1.743910097000277e-02, -1.743910097000277e-02, 1.886895139043963e-02, 1.858544275594961e-02, 1.740711484277139e-02, -8.104295449167676e-04, 1.814194100606952e-02, 1.814194100606952e-02, -1.667160568545408e-01, -1.462465836110582e-01, -1.523804720704462e-01, -1.579134297208419e-01, -1.550457253873937e-01, -1.550457253873937e-01, -1.707182595515898e-01, -8.514899268053400e-02, -9.875065434508361e-02, -1.158548161484344e-01, -1.066161114783045e-01, -1.066161114783045e-01, -1.425785269207415e-01, -4.115951058664660e-02, -5.247345695321565e-02, -7.662377095024767e-02, -6.386459498842516e-02, -6.386459498842516e-02, -8.214671159588095e-02, 7.459497040164985e-03, 2.336326102520638e-03, -8.607867787801063e-02, -7.868926236664004e-03, -7.868926236664010e-03, 1.587493539939587e-02, 1.948052110192001e-02, 1.908917507221265e-02, -8.008212783060192e-03, 1.783770086374695e-02, 1.783770086374696e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_wl_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_wl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.736373497496851e-10, 1.736404979725628e-10, 1.736453946119297e-10, 1.735940351575666e-10, 1.736390864741734e-10, 1.736390864741734e-10, 1.016518403660590e-06, 1.016708182455641e-06, 1.021734313727074e-06, 1.012027771407024e-06, 1.016594431982769e-06, 1.016594431982769e-06, 1.778414028961490e-03, 1.762041602020189e-03, 1.372431727303653e-03, 1.347137964311320e-03, 1.772535949646293e-03, 1.772535949646293e-03, 2.759988863446777e-01, 2.810812297188497e-01, 1.100442066839479e-03, 3.920144611725938e-01, 2.777878967389152e-01, 2.777878967389152e-01, 2.713366286660249e+02, 2.409783792716662e+02, 4.587644424643207e+00, 1.541483662462599e+03, 2.542120046577568e+02, 2.542120046577568e+02, 2.881458128472708e-07, 2.904355105141132e-07, 2.883718595216867e-07, 2.901520516160433e-07, 2.893256800263259e-07, 2.893256800263259e-07, 5.831478235840235e-06, 5.797023754550622e-06, 5.678835739198270e-06, 5.652446208694365e-06, 6.015840854445466e-06, 6.015840854445466e-06, 8.683736397404614e-03, 2.479107413022378e-02, 1.038688924522372e-02, 2.494603157221923e-02, 8.458194926082683e-03, 8.458194926082683e-03, 6.304504078905244e-01, 1.272285968592886e-01, 7.234790294879349e-01, 1.057568782353894e-04, 5.578641442924455e-01, 5.578641442924455e-01, 1.773943967139042e+03, 1.229036335764567e+03, 5.622991729320472e+03, 2.293153007728668e+00, 2.078853406412164e+03, 2.078853406412164e+03, 9.756821671900595e-02, 3.697216955382572e-02, 4.759070675447919e-02, 6.108075588175920e-02, 5.350390198663268e-02, 5.350390198663266e-02, 1.584892363224748e-01, 9.206540783977830e-03, 1.222660131887223e-02, 1.860455923618591e-02, 1.474258176988792e-02, 1.474258176988793e-02, 1.805937843118005e-02, 6.892675884330604e-02, 5.134687606559012e-02, 4.237559867102949e-02, 4.638430796893862e-02, 4.638430796893867e-02, 1.396523854376696e-02, 4.793356222050877e+00, 2.525035454028957e+00, 8.374170935087963e-02, 1.376149809344785e+00, 1.376149809344786e+00, 1.476972267639776e+02, 7.106510091304011e+04, 1.006655628802451e+04, 1.762541490868540e+00, 4.234482418532346e+03, 4.234482418532356e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
