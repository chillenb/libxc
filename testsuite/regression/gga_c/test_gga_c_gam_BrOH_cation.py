
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_gam_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.452013063962122e-03, -7.451039984535640e-03, -7.448281065384777e-03, -7.462729440855363e-03, -7.454934752301219e-03, -7.454934752301219e-03, -1.522633180868232e-02, -1.521867474226421e-02, -1.504192503141609e-02, -1.535012068107841e-02, -1.521724151479269e-02, -1.521724151479269e-02, -2.418978031862555e-02, -2.458574996882948e-02, -3.477164414102846e-02, -3.438180812496382e-02, -3.367979538860705e-02, -3.367979538860705e-02, -3.365567810558136e-02, -3.446623802665251e-02, -2.157622862003400e-02, 1.046046327024986e-03, 4.745501018027800e-03, 4.745501018027828e-03, 2.568964491435250e-02, 2.682111183771890e-02, 9.490880543502359e-02, 1.570366569319922e-02, 1.022620399968662e-02, 1.022620399968662e-02, -1.347959652223796e-03, -1.318686310109815e-03, -1.346669503486609e-03, -1.320758949891023e-03, -1.332528049371012e-03, -1.332528049371012e-03, -5.263971331500621e-02, -5.154006577785419e-02, -5.528860901181284e-02, -5.432940815689560e-02, -5.072361353318518e-02, -5.072361353318518e-02, -6.197423488303940e-03, -1.019167797716356e-02, -8.463316988967334e-03, -4.357960144022068e-03, -4.284778691750997e-03, -4.284778691750970e-03, 7.049910405519599e-02, -1.854697901076412e-02, 7.751995952734297e-02, -1.596248181870888e-02, 3.031997316574976e-02, 3.031997316574976e-02, 1.229386511462796e-02, 1.537652059361500e-02, 1.186747447315029e-02, 9.798970135863513e-02, 1.151124402968435e-02, 1.151124402968434e-02, -2.965895193969739e-02, -1.089901008487629e-02, -1.632742852742827e-02, -2.196134793359691e-02, -1.902670211826569e-02, -1.902670211826569e-02, -3.455186850927634e-02, -2.072617985175349e-02, -1.002155416931229e-02, -1.633832386462628e-03, -5.083194705700728e-03, -5.083194705700728e-03, -8.459446341686494e-03, -3.652947710959643e-02, -4.077172994071111e-02, -2.217075123559549e-02, -3.377308927660296e-02, -3.377308927660293e-02, -2.084795539313071e-02, 9.425976491417602e-02, 1.038838252988525e-01, -1.350912619499863e-02, 7.672138885589361e-02, 7.672138885589357e-02, 3.492531824173246e-02, 4.374404207838919e-03, 8.854931956768109e-03, 8.259061976028435e-02, 1.114454729700525e-02, 1.114454729700525e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_gam_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [7.988547806483938e-02, 7.988475562484691e-02, 7.987967022316297e-02, 7.987999873650839e-02, 7.986690068571381e-02, 7.986290890059033e-02, 7.993935593437161e-02, 7.994724731174803e-02, 7.988763692020312e-02, 7.991438958321009e-02, 7.988763692020312e-02, 7.991438958321009e-02, 8.369718683994909e-02, 8.364760014297616e-02, 8.368443623700056e-02, 8.363146017986503e-02, 8.334400223965686e-02, 8.330084686024358e-02, 8.393159948906803e-02, 8.388284816559248e-02, 8.367461417681703e-02, 8.363645091752941e-02, 8.367461417681703e-02, 8.363645091752941e-02, 6.043543760627166e-02, 6.117463734302260e-02, 6.035463532984094e-02, 6.126531420872153e-02, 5.759606743703969e-02, 5.658365103824450e-02, 5.743191213418013e-02, 5.776937596540898e-02, 6.159921776807353e-02, 5.453855386726492e-02, 6.159921776807353e-02, 5.453855386726492e-02, -7.714802932471219e-02, -6.093624135998465e-02, -6.499920098102932e-02, -4.923254346618799e-02, 6.137758060152362e-02, 6.533938840636930e-02, -1.929339691591542e-01, -1.820854729452905e-01, -1.978126474321753e-02, -7.191755889499690e-01, -1.978126474321784e-02, -7.191755889499682e-01, 3.774303834349826e-02, 2.907202550760002e-02, 4.002819525387928e-02, 2.979065738895065e-02, 8.806460985105306e-02, 7.117119094627750e-02, 1.976462355008700e-02, 2.126788869139155e-02, 4.635847096819638e-03, 6.082323660673879e-02, 4.635847096819691e-03, 6.082323660673875e-02, 9.088661928607446e-03, 9.085056447339101e-03, 7.664094095068423e-03, 7.701268309262798e-03, 9.018494140532487e-03, 9.039816062842749e-03, 7.790568756232756e-03, 7.788740730956658e-03, 8.357090114836084e-03, 8.389396820632677e-03, 8.357090114836084e-03, 8.389396820632677e-03, 8.067844138972566e-02, 8.067568629667865e-02, 8.189482901624541e-02, 8.187672731388780e-02, 7.769928732890853e-02, 7.797115414278052e-02, 7.896996495324993e-02, 7.924758434320441e-02, 8.285236180229807e-02, 8.215688054801687e-02, 8.285236180229807e-02, 8.215688054801687e-02, 4.020062118399633e-02, 3.977686670452247e-02, -6.536873979983508e-02, -6.676744347462127e-02, 4.367023683182399e-02, 4.586925648073648e-02, -4.478273103760545e-02, -3.872609216964846e-02, 3.573723648435129e-02, 3.128227076759240e-02, 3.573723648435148e-02, 3.128227076759266e-02, -1.434834524586739e-01, -1.332201622709958e-01, -1.681509867469302e-01, -1.641423482409252e-01, -1.323083264403265e-01, -9.905158364163988e-02, -9.842468000359850e-02, -9.859471841171553e-02, -2.393602467139070e-01, -1.445963372195075e-01, -2.393602467139070e-01, -1.445963372195075e-01, 1.756039874628101e-02, 1.481900945210862e-02, 2.074801052778126e-02, 1.942703525319218e-02, 1.764769330508130e-02, 1.370830549311131e-02, -2.630522669737252e-03, -4.488034227366530e-03, 3.310207271971994e-02, 8.094900866314330e-03, 3.310207271971984e-02, 8.094900866314382e-03, -6.552222085098366e-02, -6.422786175916267e-02, -6.635636879355809e-02, -6.675009931432556e-02, -7.476410008535694e-02, -7.463555321453251e-02, -7.577111559566375e-02, -7.508728374016477e-02, -7.616036111060842e-02, -7.573429127520433e-02, -7.616036111060842e-02, -7.573429127520433e-02, -4.760864156839568e-02, -4.708500280998131e-02, 5.356662839155649e-02, 5.396114328382427e-02, 4.671733728794887e-02, 4.693182157135557e-02, 1.322832332001609e-02, 1.307697664834231e-02, 3.530972611043934e-02, 3.545418731156625e-02, 3.530972611043934e-02, 3.545418731156625e-02, -6.031150174225180e-02, -6.263713803708572e-02, -9.482551300673631e-02, -9.179594404681540e-02, -1.526809379080404e-02, -1.320316453573330e-02, 4.613988410210477e-02, 4.650675517260117e-02, 3.063823552537562e-02, 3.067507072561689e-02, 3.063823552537527e-02, 3.067507072561526e-02, 5.175610451958809e-02, 5.239221480162332e-02, 8.460331927905898e-02, 8.234894520548670e-02, 5.932231921703720e-02, 5.388795321178751e-02, 4.352627080073772e-02, 4.473718153239115e-02, -1.188135118501977e-01, -6.952173976433140e-02, -1.188135118501978e-01, -6.952173976433169e-02, 4.771505707271390e-02, 4.100495980944858e-02, 5.817428869138871e-03, 5.757952219801440e-03, 1.340759056670585e-02, 1.018511758147899e-02, -7.459346133113062e-02, -6.913259556656021e-02, 2.934562963082797e-02, 8.286004641531451e-03, 2.934562963082799e-02, 8.286004641531484e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_gam_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_gam", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.440915279284327e-10, 0.000000000000000e+00, -4.440929515281043e-10, -4.440635676179475e-10, 0.000000000000000e+00, -4.440709186345411e-10, -4.439946781939039e-10, 0.000000000000000e+00, -4.439749337034267e-10, -4.443323258690144e-10, 0.000000000000000e+00, -4.443796574824780e-10, -4.440961705111436e-10, 0.000000000000000e+00, -4.442187447085656e-10, -4.440961705111436e-10, 0.000000000000000e+00, -4.442187447085656e-10, -3.203739413555356e-06, 0.000000000000000e+00, -3.205022103922924e-06, -3.203581894571360e-06, 0.000000000000000e+00, -3.204961362008521e-06, -3.200963393574897e-06, 0.000000000000000e+00, -3.201626957269382e-06, -3.202992057710198e-06, 0.000000000000000e+00, -3.203970551395311e-06, -3.205697111698940e-06, 0.000000000000000e+00, -3.202065035741171e-06, -3.205697111698940e-06, 0.000000000000000e+00, -3.202065035741171e-06, -6.201614340474786e-03, 0.000000000000000e+00, -6.332396240744685e-03, -6.177304234245787e-03, 0.000000000000000e+00, -6.336277305763425e-03, -5.835588965549969e-03, 0.000000000000000e+00, -5.686589114138893e-03, -5.581130545132852e-03, 0.000000000000000e+00, -5.633739956670881e-03, -6.547234623745692e-03, 0.000000000000000e+00, -5.024521762487356e-03, -6.547234623745692e-03, 0.000000000000000e+00, -5.024521762487356e-03, 5.546805135902705e-01, 0.000000000000000e+00, 3.372718096880811e-01, 3.453038623257426e-01, 0.000000000000000e+00, 1.609710643613013e-01, -3.274374579268354e-03, 0.000000000000000e+00, -3.221195939194215e-03, 5.419803492417776e+00, 0.000000000000000e+00, 4.840207991504528e+00, 1.679547767855943e-01, 0.000000000000000e+00, 5.631800386796175e+01, 1.679547767855959e-01, 0.000000000000000e+00, 5.631800386796173e+01, 1.507913613304333e+02, 0.000000000000000e+00, 9.249677876109422e+01, 1.633124266687069e+02, 0.000000000000000e+00, 9.385824566902582e+01, 5.857039564862085e+01, 0.000000000000000e+00, 3.777451238946786e+01, 1.059839725727848e+02, 0.000000000000000e+00, 1.213548749595780e+02, 1.561978153104034e+01, 0.000000000000000e+00, 1.485326966648007e+03, 1.561978153108341e+01, 0.000000000000000e+00, 1.485326966648584e+03, -8.414885663700978e-08, 0.000000000000000e+00, -8.457958855277118e-08, -7.288547568759477e-08, 0.000000000000000e+00, -7.364937184333959e-08, -8.359112003438678e-08, 0.000000000000000e+00, -8.422895717371237e-08, -7.389711713314858e-08, 0.000000000000000e+00, -7.433605659709028e-08, -7.837906760126343e-08, 0.000000000000000e+00, -7.910228908754556e-08, -7.837906760126343e-08, 0.000000000000000e+00, -7.910228908754556e-08, -3.205054918567640e-05, 0.000000000000000e+00, -3.205855482427865e-05, -3.162534034755444e-05, 0.000000000000000e+00, -3.166196332558602e-05, -3.117177574923753e-05, 0.000000000000000e+00, -3.131895570709961e-05, -3.086611828636501e-05, 0.000000000000000e+00, -3.099263662911174e-05, -3.230729882393991e-05, 0.000000000000000e+00, -3.206277376572468e-05, -3.230729882393991e-05, 0.000000000000000e+00, -3.206277376572468e-05, -1.267747793380334e-02, 0.000000000000000e+00, -1.282951781485300e-02, 3.571144886648266e-02, 0.000000000000000e+00, 3.726541867717023e-02, -2.065159215003374e-02, 0.000000000000000e+00, -1.769982172525148e-02, 3.733542489625290e-02, 0.000000000000000e+00, 2.922299176514974e-02, -9.555318928902372e-03, 0.000000000000000e+00, -1.236642828721160e-02, -9.555318928902316e-03, 0.000000000000000e+00, -1.236642828721160e-02, 1.558584871959383e+01, 0.000000000000000e+00, 1.442863882483682e+01, 1.340806660244956e+00, 0.000000000000000e+00, 1.284826932660322e+00, 2.244404557851806e+01, 0.000000000000000e+00, 1.470054528534653e+01, 2.309071405541303e-04, 0.000000000000000e+00, 2.319415107506805e-04, 1.460060168628768e+01, 0.000000000000000e+00, 9.050448135533662e+00, 1.460060168628768e+01, 0.000000000000000e+00, 9.050448135533662e+00, 1.785536861969538e+02, 0.000000000000000e+00, 1.310969984024487e+02, 1.421603095091459e+02, 0.000000000000000e+00, 1.260328604338196e+02, 1.064794563326205e+03, 0.000000000000000e+00, 6.704807587795457e+02, 4.012672076374820e+01, 0.000000000000000e+00, 3.820402674280970e+01, 1.221822822862185e+03, 0.000000000000000e+00, 9.434211712033436e+01, 1.221822822862303e+03, 0.000000000000000e+00, 9.434211712027601e+01, 9.252491038163377e-02, 0.000000000000000e+00, 8.997921107723776e-02, 5.765787694899836e-02, 0.000000000000000e+00, 5.814102623509063e-02, 7.691658487698039e-02, 0.000000000000000e+00, 7.695717256409068e-02, 9.111576192893688e-02, 0.000000000000000e+00, 9.012724999338871e-02, 8.462917209818240e-02, 0.000000000000000e+00, 8.418092483982233e-02, 8.462917209818240e-02, 0.000000000000000e+00, 8.418092483982233e-02, 6.063752950471658e-02, 0.000000000000000e+00, 5.898630401601897e-02, -2.676687548323071e-02, 0.000000000000000e+00, -2.641730390546885e-02, -2.457369621232840e-02, 0.000000000000000e+00, -2.421016022442051e-02, -9.329533352107032e-03, 0.000000000000000e+00, -8.883260723276701e-03, -2.040820713135903e-02, 0.000000000000000e+00, -2.000845335439570e-02, -2.040820713135903e-02, 0.000000000000000e+00, -2.000845335439570e-02, 2.414872548024704e-02, 0.000000000000000e+00, 2.580494980336683e-02, 2.223944762936147e-01, 0.000000000000000e+00, 2.089783055876399e-01, -8.586856992121786e-02, 0.000000000000000e+00, -8.581505857543553e-02, -1.214543362814219e-01, 0.000000000000000e+00, -1.188235289212483e-01, -1.428559124489540e-01, 0.000000000000000e+00, -1.441937379339629e-01, -1.428559124489526e-01, 0.000000000000000e+00, -1.441937379339630e-01, -3.870760749978976e-02, 0.000000000000000e+00, -3.802974346146863e-02, 4.528833888434247e+01, 0.000000000000000e+00, 4.287039918679065e+01, 4.290188651726213e+01, 0.000000000000000e+00, 3.290746462562586e+01, -1.727579075000040e-01, 0.000000000000000e+00, -1.644437343934429e-01, 4.011147561148517e+01, 0.000000000000000e+00, 2.578491760143742e+01, 4.011147561148505e+01, 0.000000000000000e+00, 2.578491760143746e+01, 1.053990424614830e+02, 0.000000000000000e+00, 7.913022187193923e+01, 7.028559670821478e+02, 0.000000000000000e+00, 6.872280089409811e+02, 4.184539796365549e+02, 0.000000000000000e+00, 2.546144746498705e+02, 3.814985765107493e+01, 0.000000000000000e+00, 3.347228919273437e+01, 1.726783841698724e+03, 0.000000000000000e+00, 1.755390125438160e+02, 1.726783841699232e+03, 0.000000000000000e+00, 1.755390125438111e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
