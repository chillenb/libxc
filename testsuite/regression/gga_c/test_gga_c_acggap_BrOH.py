
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_acggap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.684274061776769e-02, -5.684345613681611e-02, -5.684562252885887e-02, -5.683392702832159e-02, -5.684312653105874e-02, -5.684312653105874e-02, -4.483328434505244e-02, -4.483728607695729e-02, -4.494751116108051e-02, -4.475825934441074e-02, -4.483535232942751e-02, -4.483535232942751e-02, -2.810529981368664e-02, -2.789152326535265e-02, -2.234475358516819e-02, -2.263348055567369e-02, -2.802822286247216e-02, -2.802822286247216e-02, -1.135958518615002e-02, -1.208693217650491e-02, -3.493358692727100e-02, -3.782901257467771e-03, -1.158459233242288e-02, -1.158459233242288e-02, -5.351094343891030e-07, -6.551980392269856e-07, -9.114317477988909e-05, -1.514634994282541e-08, -6.494537402365579e-07, -6.494537402365579e-07, -6.189753111181538e-02, -6.209209672063624e-02, -6.191693607287555e-02, -6.206822027579795e-02, -6.199781581701360e-02, -6.199781581701360e-02, -2.357939841584419e-02, -2.404004632578611e-02, -2.294594153125454e-02, -2.330122030982325e-02, -2.473950208590894e-02, -2.473950208590894e-02, -4.049338168544723e-02, -5.685416216223973e-02, -3.910632104807928e-02, -5.176071236351919e-02, -4.285026949109382e-02, -4.285026949109382e-02, -1.199976241050875e-03, -6.000757733850883e-03, -1.313191767837205e-03, -7.284642736273564e-02, -2.361008439837213e-03, -2.361008439837213e-03, -1.363789204003101e-08, -2.485198432975510e-08, -1.858174577747363e-08, -3.292252590928351e-04, -2.379212812765565e-08, -2.379212812765565e-08, -6.162963549410541e-02, -5.680808450781986e-02, -5.844698315260417e-02, -5.977985248818507e-02, -5.910593164663987e-02, -5.910593164663987e-02, -6.177685361688201e-02, -3.094814079974163e-02, -3.789228983603200e-02, -4.566511430901226e-02, -4.161532343441567e-02, -4.161532343441568e-02, -5.691629891137960e-02, -9.415284605364694e-03, -1.442864910082875e-02, -2.654500533958496e-02, -2.006458119482317e-02, -2.006458119482316e-02, -2.934907472833395e-02, -5.726259625563033e-05, -1.875555167529146e-04, -3.112610143228216e-02, -9.022143529636159e-04, -9.022143529636159e-04, -8.058040526558072e-07, -1.106371375861998e-10, -1.874816228766570e-09, -9.217661602763099e-04, -1.643523419668787e-08, -1.643523419411894e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_acggap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.308321369360067e-01, -1.308329417114960e-01, -1.308353896431949e-01, -1.308222344833943e-01, -1.308325708955765e-01, -1.308325708955765e-01, -1.104379335634532e-01, -1.104423223508846e-01, -1.105632872842573e-01, -1.103567123405419e-01, -1.104402285242124e-01, -1.104402285242124e-01, -7.735565119559039e-02, -7.709862975252760e-02, -6.925123437683657e-02, -6.976865436263910e-02, -7.726329763233716e-02, -7.726329763233716e-02, -4.033664921958627e-02, -4.190995112199196e-02, -8.623604862653736e-02, -1.755240688086754e-02, -4.083176129630528e-02, -4.083176129630528e-02, -3.330080370849626e-06, -4.073001456470589e-06, -5.352211882083945e-04, -9.567688936883201e-08, -4.037849771021753e-06, -4.037849771021753e-06, -1.295187481539800e-01, -1.296801486443645e-01, -1.295348841720716e-01, -1.296603868199925e-01, -1.296020109389975e-01, -1.296020109389975e-01, -7.710054278287828e-02, -7.800487210202153e-02, -7.585589006163031e-02, -7.656993031805000e-02, -7.931999123174185e-02, -7.931999123174185e-02, -8.326486695508642e-02, -8.200569674384066e-02, -8.175189494579099e-02, -8.133399449606224e-02, -8.453654163937693e-02, -8.453654163937693e-02, -6.326110806783563e-03, -2.593272346525468e-02, -6.869716882023119e-03, -1.167890239774913e-01, -1.166508328285206e-02, -1.166508328285206e-02, -8.618478448944581e-08, -1.567008381188004e-07, -1.173878819377295e-07, -1.861577175214829e-03, -1.500927238453685e-07, -1.500927238478725e-07, -7.541200505794411e-02, -7.962389267593085e-02, -7.836876006482668e-02, -7.721592265017833e-02, -7.781383979482981e-02, -7.781383979482981e-02, -7.355819717687406e-02, -7.622759666019679e-02, -8.038264138953716e-02, -8.168942735327307e-02, -8.141769378687655e-02, -8.141769378687656e-02, -8.391568035021300e-02, -3.677463408866227e-02, -4.913685791044122e-02, -6.727349837318106e-02, -5.919923216083101e-02, -5.919923216083098e-02, -7.342742352513802e-02, -3.392282049048411e-04, -1.080754384450481e-03, -6.842550301375737e-02, -4.844488906311219e-03, -4.844488906311250e-03, -4.999898515942798e-06, -7.097047648903733e-10, -1.192872208822244e-08, -4.939142541326432e-03, -1.038481003648301e-07, -1.038481003625298e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_acggap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_acggap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.859191061891410e-10, 1.859218598797026e-10, 1.859252715631652e-10, 1.858803652411120e-10, 1.859206325529307e-10, 1.859206325529307e-10, 1.037663002762266e-06, 1.037826651535646e-06, 1.042127627846989e-06, 1.033659184391177e-06, 1.037725533784313e-06, 1.037725533784313e-06, 1.649084141316637e-03, 1.637499396846256e-03, 1.323057093817578e-03, 1.298632129857678e-03, 1.644945989614454e-03, 1.644945989614454e-03, 2.249076453147743e-01, 2.310182763946608e-01, 9.676508885850248e-04, 2.089377119477264e-01, 2.270358037892146e-01, 2.270358037892146e-01, 1.207689593142342e-01, 1.288451892009587e-01, 1.763559521885158e-01, 2.615403081442577e-02, 1.343242591328045e-01, 1.343242591328045e-01, 2.690905521056700e-07, 2.707842380733196e-07, 2.692576888458443e-07, 2.705745343162384e-07, 2.699641343105451e-07, 2.699641343105451e-07, 6.151880136550036e-06, 6.125340763551724e-06, 5.977433294425171e-06, 5.958679107054541e-06, 6.366064620052619e-06, 6.366064620052619e-06, 5.888131136739591e-03, 7.461157389811791e-03, 7.150312325559328e-03, 9.670213357485444e-03, 5.413760221638263e-03, 5.413760221638263e-03, 1.656108153597859e-01, 8.487266776277444e-02, 2.021891920771373e-01, 5.743653757363914e-05, 2.270430489141963e-01, 2.270430489141963e-01, 2.701862931500047e-02, 3.299059376777880e-02, 9.897515967827922e-02, 2.385919887077929e-01, 5.071144848567366e-02, 5.071144848651030e-02, 1.141608161308252e-02, 9.791650817925612e-03, 1.030618257476673e-02, 1.075076529410673e-02, 1.052283652106970e-02, 1.052283652106970e-02, 1.345649109502467e-02, 7.575697435578906e-03, 8.524477798800801e-03, 9.765815489862609e-03, 9.110133334221601e-03, 9.110133334221601e-03, 5.949105603987738e-03, 5.469414719453022e-02, 4.476369805484463e-02, 3.393392920258197e-02, 4.028848529581381e-02, 4.028848529581381e-02, 1.148246851272050e-02, 1.275664744783756e-01, 1.712721377917007e-01, 5.677172389074352e-02, 2.983000723098861e-01, 2.983000723098868e-01, 9.794165927913084e-02, 9.463905551440572e-03, 2.160070705997740e-02, 3.882876244716719e-01, 6.895374356380603e-02, 6.895374356032671e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
