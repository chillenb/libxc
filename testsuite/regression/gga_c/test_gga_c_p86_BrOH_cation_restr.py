
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_c_p86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.176401269914806e-01, -1.176394205590853e-01, -1.176377377250641e-01, -1.176482179348689e-01, -1.176425192324992e-01, -1.176425192324992e-01, -5.095934633134955e-02, -5.096229826110105e-02, -5.103124705781042e-02, -5.091468488799371e-02, -5.096325126066374e-02, -5.096325126066374e-02, -2.997244982631835e-02, -2.971846499449831e-02, -2.343549142508648e-02, -2.372615629825358e-02, -2.389609506141184e-02, -2.389609506141184e-02, -6.122037414490491e-03, -7.146377704553713e-03, -3.262985947591401e-02, 2.816989941852096e-03, -8.662316446364477e-04, -8.662316446364520e-04, -3.759228097570231e-03, -3.924289992639609e-03, -9.137258427645083e-03, -2.340082039974535e-03, -2.856759437379296e-03, -2.856759437379296e-03, -6.691625141377995e-02, -6.706421367516323e-02, -6.692234760047164e-02, -6.705295304755504e-02, -6.699141198907152e-02, -6.699141198907152e-02, -3.109607234162047e-02, -3.140607795486586e-02, -3.066349496192097e-02, -3.091794863676368e-02, -3.150722251907882e-02, -3.150722251907882e-02, -4.166132692803744e-02, -5.694077968074367e-02, -3.915458610614917e-02, -5.273462782288695e-02, -4.345592495624184e-02, -4.345592495624184e-02, 5.398631502950944e-03, 1.381234155034187e-03, 4.679600053916014e-03, -7.435490940483101e-02, 4.481138021455916e-03, 4.481138021455916e-03, -1.859142510373234e-03, -2.293792314190172e-03, -1.803811216087452e-03, -1.117506741185219e-03, -2.132103170544658e-03, -2.132103170544658e-03, -6.049806310715627e-02, -5.593089131907756e-02, -5.744998143902662e-02, -5.877319274745380e-02, -5.810346100271760e-02, -5.810346100271760e-02, -6.143100785368819e-02, -3.021033161982682e-02, -3.764767146299909e-02, -4.613644368878415e-02, -4.175631984203104e-02, -4.175631984203104e-02, -5.698565145516084e-02, -3.400104114430362e-03, -1.042436777671352e-02, -2.688491652516038e-02, -1.835603353583587e-02, -1.835603353583589e-02, -2.960816045195936e-02, -9.733264169374286e-03, -6.147055002584362e-03, -3.192613564340566e-02, 3.033214921820674e-03, 3.033214921820666e-03, -5.005472398864437e-03, -6.893561242367431e-04, -1.366813749983112e-03, 2.242783913797688e-03, -1.989738574527597e-03, -1.989738574527596e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_c_p86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.920688869448912e-02, -5.920747574624411e-02, -5.920921421766143e-02, -5.920050395407025e-02, -5.920518928939875e-02, -5.920518928939875e-02, -9.413254979218631e-02, -9.414464741232532e-02, -9.442358536203241e-02, -9.393299603594306e-02, -9.414634053376725e-02, -9.414634053376725e-02, -8.507567810936129e-02, -8.489886851450809e-02, -7.930078591083170e-02, -7.965608175916351e-02, -7.982577293650606e-02, -7.982577293650606e-02, -4.694982764738578e-02, -4.832550437883010e-02, -8.886038756489507e-02, -2.567861487433567e-02, -3.646323022379441e-02, -3.646323022379439e-02, -4.789263511002942e-03, -4.979852241707609e-03, 6.202594079119944e-03, -3.026256081117791e-03, -3.676059246496482e-03, -3.676059246496482e-03, -1.191710278384719e-01, -1.195557085181242e-01, -1.191868968117643e-01, -1.195265300541071e-01, -1.193670942983689e-01, -1.193670942983689e-01, -5.594279835025499e-02, -5.729494090262822e-02, -5.238944182055467e-02, -5.358836593228402e-02, -5.841910505077899e-02, -5.841910505077899e-02, -8.468499673028416e-02, -8.104496107853544e-02, -8.273071265166268e-02, -7.893569098123052e-02, -8.486320395967857e-02, -8.486320395967857e-02, 4.992941996504563e-03, -3.444724153967130e-02, 8.253270218553828e-03, -1.171887182351346e-01, -1.369913414088916e-02, -1.369913414088916e-02, -2.412755547032200e-03, -2.966982478868135e-03, -2.300237296356674e-03, 1.711817603466361e-02, -2.745833820595417e-03, -2.745833820595417e-03, -7.449165323201903e-02, -7.823195973528163e-02, -7.710459419461919e-02, -7.603057038617921e-02, -7.658516368128049e-02, -7.658516368128049e-02, -7.217551582009142e-02, -7.960059588635847e-02, -8.141073920163032e-02, -8.071876862094718e-02, -8.141525863302444e-02, -8.141525863302444e-02, -8.300953081158359e-02, -4.664327993283900e-02, -5.797788885196902e-02, -7.164447116915580e-02, -6.609933787495342e-02, -6.609933787495344e-02, -7.782819417061783e-02, 3.849313462665891e-03, 1.570498801337705e-02, -7.066764686978025e-02, 7.259004547507406e-03, 7.259004547507378e-03, -6.253078333285697e-03, -9.043685867942367e-04, -1.780722457324855e-03, 1.028462735494895e-02, -2.560622714588728e-03, -2.560622714588726e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_c_p86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_c_p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.992847368412026e-10, -1.992841339153488e-10, -1.992778401508982e-10, -1.992868700150302e-10, -1.992826587698989e-10, -1.992826587698989e-10, 6.100263047764953e-07, 6.103117640926306e-07, 6.168380691691294e-07, 6.047862426169977e-07, 6.102748732547185e-07, 6.102748732547185e-07, 1.949024954304973e-03, 1.939280810131091e-03, 1.672850469417530e-03, 1.628594399846397e-03, 1.656355762864367e-03, 1.656355762864367e-03, 3.170651099138225e-01, 3.165823535230631e-01, 1.030302901215955e-03, 4.302786888708385e-01, 4.162062170659100e-01, 4.162062170659098e-01, -5.445609978756631e+00, -7.282144245567958e+00, -1.025578378142682e+01, -5.181136192104167e-01, -3.310042276572299e+00, -3.310042276572326e+00, 1.950279986009250e-07, 1.975268579751515e-07, 1.951289575122880e-07, 1.973347555774588e-07, 1.962989186526594e-07, 1.962989186526594e-07, 2.078307495751734e-06, 2.186362796743723e-06, 1.623721594335734e-06, 1.723834931580772e-06, 2.364427351890736e-06, 2.364427351890736e-06, 5.565143485790808e-03, 6.265164609534949e-03, 7.345035245976538e-03, 9.625219648788205e-03, 5.478362785858169e-03, 5.478362785858169e-03, 1.313911215181706e-01, 1.741027059595669e-01, -5.709003600179875e-03, 5.471021418938331e-05, 5.673145788686633e-01, 5.673145788686633e-01, -4.703007525517386e-01, -9.203838839560782e-01, -2.321118296899811e+02, -2.579697389667011e+00, -3.434365241834017e+01, -3.434365241834001e+01, 1.063042785409049e-02, 9.016998864450522e-03, 9.466945731458287e-03, 9.917315820973539e-03, 9.681348937148230e-03, 9.681348937148230e-03, 1.295621795595136e-02, 8.448262979196311e-03, 8.864874487311115e-03, 9.584481651582630e-03, 9.194897748056489e-03, 9.194897748056489e-03, 5.006809349006265e-03, 9.520003888123862e-02, 6.430300611231561e-02, 3.700770875423263e-02, 4.989251721292147e-02, 4.989251721292150e-02, 1.210942253580752e-02, -1.017915876701834e+01, -5.779718002242157e+00, 5.240910978182820e-02, -6.014213776178705e-02, -6.014213776178842e-02, -6.759252322177368e+00, -1.034661214000902e+00, -2.391962739282104e+00, -4.940986500049445e-01, -5.922750251370579e+01, -5.922750251370602e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
