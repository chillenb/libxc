
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_ksdt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_ksdt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.001253530589380e+01, -2.001259076531898e+01, -2.001285444115238e+01, -2.001202896161785e+01, -2.001245906389948e+01, -2.001245906389948e+01, -3.336176210256057e+00, -3.336183244325596e+00, -3.336425679706056e+00, -3.336623015596184e+00, -3.336263415519619e+00, -3.336263415519619e+00, -6.882266037510113e-01, -6.875174758588775e-01, -6.704028803098229e-01, -6.756020682157164e-01, -6.755679246710632e-01, -6.755679246710632e-01, -1.988166279238430e-01, -2.015481245364235e-01, -7.954231756431422e-01, -1.551858631368568e-01, -1.821287171155185e-01, -1.821287171155185e-01, -9.380257298893349e-03, -9.843882098031173e-03, -4.745806062024546e-02, -5.572334382294867e-03, -6.904756821556449e-03, -6.904756821556449e-03, -4.954417258807351e+00, -4.955310946445323e+00, -4.954461773880631e+00, -4.955250673583222e+00, -4.954868454449030e+00, -4.954868454449030e+00, -1.908309322431343e+00, -1.921680046845819e+00, -1.898549962343786e+00, -1.910366997256234e+00, -1.920435912451695e+00, -1.920435912451695e+00, -6.072599003658288e-01, -6.561220912646856e-01, -5.651391305950946e-01, -5.858595947138896e-01, -6.169805612128010e-01, -6.169805612128010e-01, -1.119665387155646e-01, -1.990166912836120e-01, -1.044943236868507e-01, -1.873055106771078e+00, -1.292668837031432e-01, -1.292668837031432e-01, -4.347652137991863e-03, -5.453063797939191e-03, -4.217301506482326e-03, -7.326689646225139e-02, -5.031746519026459e-03, -5.031746519026459e-03, -6.100127941429017e-01, -6.067468322579020e-01, -6.078961678345398e-01, -6.088427161381160e-01, -6.083689324810601e-01, -6.083689324810601e-01, -5.945726673835207e-01, -5.158768195441688e-01, -5.384268224217854e-01, -5.607536195465460e-01, -5.493548855418894e-01, -5.493548855418894e-01, -6.857951874510733e-01, -2.457861497789402e-01, -2.902148993415007e-01, -3.741921264238959e-01, -3.292845447485064e-01, -3.292845447485064e-01, -4.778391819234683e-01, -4.560653875719162e-02, -6.028300258097861e-02, -3.618518569775077e-01, -9.097978388372886e-02, -9.097978388372886e-02, -1.296172565246517e-02, -1.524657027014334e-03, -3.130607214337806e-03, -8.596986468967781e-02, -4.672505718093081e-03, -4.672505718093077e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_ksdt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_ksdt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.664120784017283e+01, -2.664117434046721e+01, -2.664129324823043e+01, -2.664123675883268e+01, -2.664158518909909e+01, -2.664164764321664e+01, -2.664061534020499e+01, -2.664041718265154e+01, -2.664125525904647e+01, -2.664092369306068e+01, -2.664125525904647e+01, -2.664092369306068e+01, -4.422499224088411e+00, -4.422443746830681e+00, -4.422512522730199e+00, -4.422449173374196e+00, -4.422761686440274e+00, -4.422845400350224e+00, -4.423037674039147e+00, -4.423094745757743e+00, -4.421826574223633e+00, -4.423347701801559e+00, -4.421826574223633e+00, -4.423347701801559e+00, -9.018666702822361e-01, -9.045946842615431e-01, -9.006151200771473e-01, -9.039614970901818e-01, -8.819404811532684e-01, -8.773224780325861e-01, -8.858017670794508e-01, -8.872610481291892e-01, -9.063806303900865e-01, -8.624112165639370e-01, -9.063806303900865e-01, -8.624112165639370e-01, -2.557955943148673e-01, -2.608955669660509e-01, -2.589140062704116e-01, -2.648297717598180e-01, -1.030962132350765e+00, -1.058051246438651e+00, -2.008976038278084e-01, -2.021635730347668e-01, -2.456807939029016e-01, -1.895497223859383e-01, -2.456807939029015e-01, -1.895497223859383e-01, -1.233234051970887e-02, -1.232446264369569e-02, -1.293712347003249e-02, -1.293076953730449e-02, -6.137911825101878e-02, -6.201818530334014e-02, -7.342618187539534e-03, -7.347612281309028e-03, -9.084196410005789e-03, -9.206595623684682e-03, -9.084196410005789e-03, -9.206595623684683e-03, -6.577785758901041e+00, -6.576306364804852e+00, -6.578995538899650e+00, -6.577476828976388e+00, -6.577858803489426e+00, -6.576351863031928e+00, -6.578898189673277e+00, -6.577413670554857e+00, -6.578400241458127e+00, -6.576893589621406e+00, -6.578400241458127e+00, -6.576893589621406e+00, -2.522837496433359e+00, -2.522725198278280e+00, -2.540862970650364e+00, -2.540253451569257e+00, -2.507891800772602e+00, -2.511710529870059e+00, -2.523509115437984e+00, -2.527514404536953e+00, -2.543783045212566e+00, -2.533961458908296e+00, -2.543783045212566e+00, -2.533961458908296e+00, -7.969255963338482e-01, -7.953555970261241e-01, -8.606143022294280e-01, -8.609097102279831e-01, -7.301857349751431e-01, -7.497345923394987e-01, -7.581621180851882e-01, -7.766684305120986e-01, -8.232517241549311e-01, -7.924516650978678e-01, -8.232517241549311e-01, -7.924516650978678e-01, -1.450494113416872e-01, -1.455724222642303e-01, -2.584073496453982e-01, -2.590744815037585e-01, -1.342375329850674e-01, -1.368053099440187e-01, -2.476399754501766e+00, -2.475421407924143e+00, -1.656461187892308e-01, -1.696385536537520e-01, -1.656461187892308e-01, -1.696385536537520e-01, -5.743873186049821e-03, -5.732579133038276e-03, -7.190935730278257e-03, -7.186456578983966e-03, -5.575771449225216e-03, -5.559088442899328e-03, -9.504332763626490e-02, -9.520683332471749e-02, -6.702615565118136e-03, -6.614356880116560e-03, -6.702615565118135e-03, -6.614356880116560e-03, -7.986279484264690e-01, -8.009255698342812e-01, -7.943060189970507e-01, -7.966115337720123e-01, -7.958232427054182e-01, -7.981332982328760e-01, -7.970831305877093e-01, -7.993764676249183e-01, -7.964526247787235e-01, -7.987540966131353e-01, -7.964526247787235e-01, -7.987540966131353e-01, -7.784147439261594e-01, -7.803192434169917e-01, -6.743530043571977e-01, -6.764449181446655e-01, -7.040465254132360e-01, -7.063068935255874e-01, -7.337309712155859e-01, -7.356154370661635e-01, -7.186433687124181e-01, -7.205839203131555e-01, -7.186433687124181e-01, -7.205839203131555e-01, -8.994607895904895e-01, -9.005788000281997e-01, -3.194148771000581e-01, -3.204617785497212e-01, -3.770517984225509e-01, -3.793297607977756e-01, -4.877086745439123e-01, -4.894772619673777e-01, -4.295759707967884e-01, -4.294804290572602e-01, -4.295759707967883e-01, -4.294804290572602e-01, -6.236780110540900e-01, -6.266936128208060e-01, -5.928759363707085e-02, -5.936161178784648e-02, -7.799653905983839e-02, -7.861036251101894e-02, -4.700139476488543e-01, -4.746066218999282e-01, -1.169455280063767e-01, -1.190586522259826e-01, -1.169455280063767e-01, -1.190586522259826e-01, -1.699482386908769e-02, -1.700362978777507e-02, -2.020513666096596e-03, -2.020143651864744e-03, -4.146476723217665e-03, -4.130527454831024e-03, -1.112911518789969e-01, -1.118643092023502e-01, -6.222535244878397e-03, -6.142788879151594e-03, -6.222535244878388e-03, -6.142788879151588e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
