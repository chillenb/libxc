
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_lp_b_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.529215359407787e+01, -1.529218041460880e+01, -1.529230792968969e+01, -1.529190871690547e+01, -1.529211671641874e+01, -1.529211671641874e+01, -3.611879528336270e+00, -3.611886640421064e+00, -3.612131780188111e+00, -3.612331318726794e+00, -3.611966356063320e+00, -3.611966356063320e+00, -7.496740560287998e-01, -7.488491322434324e-01, -7.292723323757505e-01, -7.352890008020279e-01, -7.270033327193564e-01, -7.270033327193564e-01, -1.955877906097664e-01, -1.983447296143145e-01, -8.694151298704575e-01, -1.490815287488981e-01, -7.758374076334702e-02, -7.758374076334702e-02, -6.805854652662688e-03, -7.146555186150657e-03, -3.955356851014293e-02, -3.961069614686307e-03, -2.617567493650157e-03, -2.617567493650158e-03, -5.181910859965626e+00, -5.182742501188076e+00, -5.181952257690427e+00, -5.182686448409111e+00, -5.182330727042328e+00, -5.182330727042328e+00, -2.113673349577779e+00, -2.128212690803215e+00, -2.103037829058103e+00, -2.115893202097125e+00, -2.126750855690291e+00, -2.126750855690291e+00, -6.572784662552431e-01, -7.130646675601141e-01, -6.071339319923355e-01, -6.310874777278670e-01, -6.638033282942942e-01, -6.638033282942942e-01, -1.036424398291061e-01, -1.965149786815231e-01, -9.533105517317411e-02, -2.075289589216314e+00, -1.206948768875353e-01, -1.206948768875353e-01, -3.048065525261357e-03, -3.872798299610855e-03, -2.941072096588102e-03, -6.455766008156898e-02, -2.869124128054919e-03, -2.869124128054918e-03, -6.604070414711283e-01, -6.566787133657460e-01, -6.579905915910559e-01, -6.590714712594554e-01, -6.585304550833344e-01, -6.585304550833344e-01, -6.427906919651437e-01, -5.530011257609587e-01, -5.787130411423810e-01, -6.041942967313007e-01, -5.911873748761024e-01, -5.911873748761024e-01, -7.469252616666069e-01, -2.479681937139089e-01, -2.973928590606429e-01, -3.919679020104205e-01, -3.413176257931901e-01, -3.413176257931901e-01, -5.096255171837585e-01, -3.810896767829174e-02, -5.181692186667373e-02, -3.778277444039456e-01, -8.162965581081830e-02, -8.162965581081831e-02, -9.656847106017224e-03, -1.035808700191876e-03, -2.155691701583809e-03, -7.712878264682474e-02, -2.767920279329524e-03, -2.767920279329521e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_lp_b_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.849777224180354e+01, -1.849789039303247e+01, -1.849776082561732e+01, -1.849796005974595e+01, -1.849810904939530e+01, -1.849788877923489e+01, -1.849721595480779e+01, -1.849791485008511e+01, -1.849720657501070e+01, -1.849837598785474e+01, -1.849720657501070e+01, -1.849837598785474e+01, -4.710159806029198e+00, -4.710455492391947e+00, -4.710147895545061e+00, -4.710485539044863e+00, -4.710852337514910e+00, -4.710406157964882e+00, -4.711035723771348e+00, -4.710731544507997e+00, -4.714474273213739e+00, -4.706366894980547e+00, -4.714474273213739e+00, -4.706366894980547e+00, -1.003969045552655e+00, -9.861743715485731e-01, -1.004924368091958e+00, -9.830926088534593e-01, -9.530922867631336e-01, -9.833421544708317e-01, -9.808008037768682e-01, -9.712536917147286e-01, -8.354188032916878e-01, -1.122739319077583e+00, -8.354188032916878e-01, -1.122739319077583e+00, -2.841969128677780e-01, -2.393158542264664e-01, -2.917276009724430e-01, -2.399210808366623e-01, -1.243752296937676e+00, -1.070990023375361e+00, -2.048532708541613e-01, -1.925898324462142e-01, -3.773560427385138e-02, -5.282209606015928e-01, -3.773560427385136e-02, -5.282209606015928e-01, -1.043433547101153e-02, -7.940432207479517e-03, -1.116737770507472e-02, -8.195051915874415e-03, -5.975135391947217e-02, -4.675914106153663e-02, -5.086571061336751e-03, -5.486095104193847e-03, -1.354785449044564e-03, -1.507662164465566e-02, -1.354785449044565e-03, -1.507662164465566e-02, -6.688273248052914e+00, -6.695721743023752e+00, -6.689213580628171e+00, -6.696859804865017e+00, -6.688255683393900e+00, -6.695842858721068e+00, -6.689229544901447e+00, -6.696703643701056e+00, -6.688729353385373e+00, -6.696314976618658e+00, -6.688729353385373e+00, -6.696314976618658e+00, -2.781770385653645e+00, -2.782411242517282e+00, -2.799240615357329e+00, -2.802716132479230e+00, -2.779203712107968e+00, -2.757398091951047e+00, -2.796432355321809e+00, -2.773578113215362e+00, -2.771258036902218e+00, -2.827265255093531e+00, -2.771258036902218e+00, -2.827265255093531e+00, -8.676698673582548e-01, -8.781246848781096e-01, -9.476113323350233e-01, -9.456694696335901e-01, -8.759747553970338e-01, -7.441974353388219e-01, -9.032404402438530e-01, -7.792736421357295e-01, -7.871058141118862e-01, -9.915085495678788e-01, -7.871058141118863e-01, -9.915085495678786e-01, -1.410964157148176e-01, -1.351936286907590e-01, -2.646644277101161e-01, -2.587945163678994e-01, -1.432410965457971e-01, -1.131820603916439e-01, -2.729417284372669e+00, -2.735012701878176e+00, -1.835924241081179e-01, -1.416413508706409e-01, -1.835924241081179e-01, -1.416413508706409e-01, -4.437116940403395e-03, -3.731596949825374e-03, -5.342129383024519e-03, -4.992956366663738e-03, -4.473595703550372e-03, -3.456422107847543e-03, -8.724133675038939e-02, -8.486682207472115e-02, -8.387593115541906e-03, -2.064021588707311e-03, -8.387593115541908e-03, -2.064021588707310e-03, -8.847028992610211e-01, -8.694146014506463e-01, -8.798054531958747e-01, -8.644505627740382e-01, -8.815533625906488e-01, -8.661732072371537e-01, -8.829245941437297e-01, -8.676598047848735e-01, -8.822374584500468e-01, -8.669164868199144e-01, -8.822374584500468e-01, -8.669164868199144e-01, -8.601075137000098e-01, -8.473790865334430e-01, -7.420794170436852e-01, -7.277354099023291e-01, -7.766472416426904e-01, -7.612710018467967e-01, -8.090353056449175e-01, -7.963102354841896e-01, -7.920352473124148e-01, -7.788828594667557e-01, -7.920352473124148e-01, -7.788828594667557e-01, -9.950446067627892e-01, -9.877477441744738e-01, -3.344590902846154e-01, -3.258689353027140e-01, -4.048463031172556e-01, -3.870366822466862e-01, -5.279188076363220e-01, -5.149503278199039e-01, -4.537866818236256e-01, -4.545092412408495e-01, -4.537866818236257e-01, -4.545092412408493e-01, -6.880001853624285e-01, -6.670148290065889e-01, -5.158782566034154e-02, -5.002853781867573e-02, -7.444728665385179e-02, -6.419364344003084e-02, -5.199661591012150e-01, -4.860255853085544e-01, -1.232528621271426e-01, -9.649581142099485e-02, -1.232528621271426e-01, -9.649581142099488e-02, -1.396388791326358e-02, -1.189652298987085e-02, -1.388188067776957e-03, -1.373999694680266e-03, -3.312096277607488e-03, -2.510267173994023e-03, -1.066364212878793e-01, -9.912671894182346e-02, -7.418314578683548e-03, -2.102011858604372e-03, -7.418314578683541e-03, -2.102011858604370e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
