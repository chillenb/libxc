
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_1d_ehwlrg_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.535172376059555e+10, -9.535382837262015e+10, -9.536383508295311e+10, -9.533251050914813e+10, -9.534883048267049e+10, -9.534883048267049e+10, -5.389069998044429e+04, -5.389162780224070e+04, -5.392361487069536e+04, -5.394966378967342e+04, -5.390217571258402e+04, -5.390217571258402e+04, -3.464023341054186e-01, -3.460390461099030e-01, -3.375447253404809e-01, -3.400871362285027e-01, -3.395440193036899e-01, -3.395440193036899e-01, -4.290643725612992e-02, -4.413738664696429e-02, -4.334532156869689e-01, -2.547248631742881e-02, -3.174005190007844e-02, -3.174005190007843e-02, -7.013544313749707e-05, -7.735766090606394e-05, -2.032829217637991e-03, -2.452410679960472e-05, -3.797001843379869e-05, -3.797001843379869e-05, -1.333743495666422e+06, -1.335687110362336e+06, -1.333840239594541e+06, -1.335555962146285e+06, -1.334724455517573e+06, -1.334724455517573e+06, -5.179716277209438e+02, -5.498097765840972e+02, -4.957468035236272e+02, -5.227585229202504e+02, -5.467383060149421e+02, -5.467383060149421e+02, -3.068165893335105e-01, -3.306865669098671e-01, -2.837689285280529e-01, -2.954158344053359e-01, -3.114355906628786e-01, -3.114355906628786e-01, -1.270878919657963e-02, -4.302917450557672e-02, -1.095347216704980e-02, -4.415562712615479e+02, -1.724670521411970e-02, -1.724670521411970e-02, -1.492883398209693e-05, -2.348291042556207e-05, -1.405068294689427e-05, -5.131267936344337e-03, -2.006747487342252e-05, -2.006747487342252e-05, -3.082190009811395e-01, -3.065530158683292e-01, -3.071408898499378e-01, -3.076237566333187e-01, -3.073822109678068e-01, -3.073822109678068e-01, -3.002127901098048e-01, -2.533850522724763e-01, -2.678619367402573e-01, -2.813680555577945e-01, -2.745791316037293e-01, -2.745791316037293e-01, -3.451661786949569e-01, -6.660063566692721e-02, -9.309711281041318e-02, -1.511987766569474e-01, -1.191083262310488e-01, -1.191083262310488e-01, -2.273141415854122e-01, -1.869309699084741e-03, -3.382691074054226e-03, -1.421925604550277e-01, -8.145208254512619e-03, -8.145208254512619e-03, -1.356165769795024e-04, -1.879524040075694e-06, -7.769574013479558e-06, -7.222361528800040e-03, -1.729693119913490e-05, -1.729693119913487e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_1d_ehwlrg_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.468981757416335e+11, -3.468981757416335e+11, -3.469058324381102e+11, -3.469058324381102e+11, -3.469422374110103e+11, -3.469422374110103e+11, -3.468282768562148e+11, -3.468282768562148e+11, -3.468876498344169e+11, -3.468876498344169e+11, -3.468876498344169e+11, -3.468876498344169e+11, -1.971780558435170e+05, -1.971780558435170e+05, -1.971814433524527e+05, -1.971814433524527e+05, -1.972982291792693e+05, -1.972982291792693e+05, -1.973933345603335e+05, -1.973933345603335e+05, -1.972199541263456e+05, -1.972199541263456e+05, -1.972199541263456e+05, -1.972199541263456e+05, -4.563921618196111e-01, -4.563921618196111e-01, -4.555991475121669e-01, -4.555991475121669e-01, -4.391005215810401e-01, -4.391005215810401e-01, -4.436352545927358e-01, -4.436352545927358e-01, -4.426383636632544e-01, -4.426383636632544e-01, -4.426383636632544e-01, -4.426383636632544e-01, -6.982976811788115e-02, -6.982976811788115e-02, -7.181175882542838e-02, -7.181175882542838e-02, -7.763216293583326e-01, -7.763216293583326e-01, -4.160669146338576e-02, -4.160669146338576e-02, -5.178340322793350e-02, -5.178340322793350e-02, -5.178340322793348e-02, -5.178340322793348e-02, -1.148818247194697e-04, -1.148818247194697e-04, -1.267118085145046e-04, -1.267118085145046e-04, -3.329597522567957e-03, -3.329597522567957e-03, -4.017048484027515e-05, -4.017048484027515e-05, -6.219488375121208e-05, -6.219488375121208e-05, -6.219488375121208e-05, -6.219488375121208e-05, -4.860462274304762e+06, -4.860462274304762e+06, -4.867540670407138e+06, -4.867540670407138e+06, -4.860814603413992e+06, -4.860814603413992e+06, -4.867063045510791e+06, -4.867063045510791e+06, -4.864034805120440e+06, -4.864034805120440e+06, -4.864034805120440e+06, -4.864034805120440e+06, -1.943641612000604e+03, -1.943641612000604e+03, -2.061811032597768e+03, -2.061811032597768e+03, -1.861120948829160e+03, -1.861120948829160e+03, -1.961411834234802e+03, -1.961411834234802e+03, -2.050413297175704e+03, -2.050413297175704e+03, -2.050413297175704e+03, -2.050413297175704e+03, -4.034438627427983e-01, -4.034438627427983e-01, -4.284410101594813e-01, -4.284410101594813e-01, -3.851811363367263e-01, -3.851811363367263e-01, -3.943498454892865e-01, -3.943498454892865e-01, -4.073830480359831e-01, -4.073830480359831e-01, -4.073830480359831e-01, -4.073830480359831e-01, -2.079741304243191e-02, -2.079741304243191e-02, -7.002746107174575e-02, -7.002746107174575e-02, -1.792842264851956e-02, -1.792842264851956e-02, -1.659791013662962e+03, -1.659791013662962e+03, -2.820715637042515e-02, -2.820715637042515e-02, -2.820715637042515e-02, -2.820715637042515e-02, -2.445342947619890e-05, -2.445342947619890e-05, -3.846500540067586e-05, -3.846500540067586e-05, -2.301501816506967e-05, -2.301501816506967e-05, -8.403111791509082e-03, -8.403111791509082e-03, -3.287052258930650e-05, -3.287052258930650e-05, -3.287052258930650e-05, -3.287052258930650e-05, -4.046158229272406e-01, -4.046158229272406e-01, -4.032255815573751e-01, -4.032255815573751e-01, -4.037132627481785e-01, -4.037132627481785e-01, -4.041161424888129e-01, -4.041161424888129e-01, -4.039143408938143e-01, -4.039143408938143e-01, -4.039143408938143e-01, -4.039143408938143e-01, -3.981144871951088e-01, -3.981144871951088e-01, -3.586033034614224e-01, -3.586033034614224e-01, -3.718838361324367e-01, -3.718838361324367e-01, -3.832474453464997e-01, -3.832474453464997e-01, -3.776480466327510e-01, -3.776480466327510e-01, -3.776480466327510e-01, -3.776480466327510e-01, -4.537235435771687e-01, -4.537235435771687e-01, -1.076758265367018e-01, -1.076758265367018e-01, -1.490734237329450e-01, -1.490734237329450e-01, -2.349973104901468e-01, -2.349973104901468e-01, -1.884926159003012e-01, -1.884926159003012e-01, -1.884926159003012e-01, -1.884926159003012e-01, -3.316669763791826e-01, -3.316669763791826e-01, -3.061786787249538e-03, -3.061786787249538e-03, -5.540194546465324e-03, -5.540194546465324e-03, -2.222162390922933e-01, -2.222162390922933e-01, -1.333560828423700e-02, -1.333560828423700e-02, -1.333560828423700e-02, -1.333560828423700e-02, -2.221397838322181e-04, -2.221397838322181e-04, -3.078660374775530e-06, -3.078660374775530e-06, -1.272656212441594e-05, -1.272656212441594e-05, -1.182564442090809e-02, -1.182564442090809e-02, -2.833237244829340e-05, -2.833237244829340e-05, -2.833237244829335e-05, -2.833237244829335e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
