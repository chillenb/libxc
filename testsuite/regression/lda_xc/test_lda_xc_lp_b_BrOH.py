
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_lp_b_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.529190675420720e+01, -1.529193009771982e+01, -1.529205142919650e+01, -1.529166882529731e+01, -1.529191892108464e+01, -1.529191892108464e+01, -3.611727412879175e+00, -3.611734328421035e+00, -3.612060054519784e+00, -3.612197245430376e+00, -3.611745006748325e+00, -3.611745006748325e+00, -7.451133768920123e-01, -7.443623355323780e-01, -7.248874196295509e-01, -7.304932676854048e-01, -7.448394553270056e-01, -7.448394553270056e-01, -2.065526365209306e-01, -2.092889307288634e-01, -8.898222389121745e-01, -1.499572474992185e-01, -2.073734568785412e-01, -2.073734568785412e-01, -1.159095257101619e-02, -1.214082144833572e-02, -4.930267244364740e-02, -5.561372317021834e-03, -1.201433875045907e-02, -1.201433875045907e-02, -5.179935752050521e+00, -5.180741182872467e+00, -5.180020733290861e+00, -5.180646963875503e+00, -5.180345129998455e+00, -5.180345129998455e+00, -2.111431094330162e+00, -2.125540369049254e+00, -2.105724542604180e+00, -2.116740487234174e+00, -2.128365114766175e+00, -2.128365114766175e+00, -6.502276736240283e-01, -7.053497498944772e-01, -6.174991673876780e-01, -6.436533199013674e-01, -6.748015911675700e-01, -6.748015911675700e-01, -1.102814091714926e-01, -2.080250083294756e-01, -1.088716412662040e-01, -2.072985755178546e+00, -1.274693433597608e-01, -1.274693433597608e-01, -5.365009124068441e-03, -6.131214950898600e-03, -4.595548089055487e-03, -6.869632650730585e-02, -5.586561311327577e-03, -5.586561311327577e-03, -6.706157657753262e-01, -6.670935570830822e-01, -6.683562678982666e-01, -6.693303856294343e-01, -6.688428448197160e-01, -6.688428448197160e-01, -6.494323073202108e-01, -5.645586512173032e-01, -5.893472134691746e-01, -6.123083450594358e-01, -6.006117826154925e-01, -6.006117826154925e-01, -7.389450367349528e-01, -2.613024648836334e-01, -3.099705789362036e-01, -3.954509868807565e-01, -3.501482727775582e-01, -3.501482727775581e-01, -5.098815664592715e-01, -4.566701763120370e-02, -6.179827932055344e-02, -3.738356342929699e-01, -8.955598315965427e-02, -8.955598315965427e-02, -1.358384779290396e-02, -1.678802090391482e-03, -3.188995570427840e-03, -8.544685365319350e-02, -4.747934444063902e-03, -4.747934444063896e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_lp_b_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.849756326735068e+01, -1.849758861673216e+01, -1.849772037387704e+01, -1.849730489310593e+01, -1.849757647970857e+01, -1.849757647970857e+01, -4.710113714436774e+00, -4.710122531059938e+00, -4.710537798332421e+00, -4.710712702118549e+00, -4.710136144856099e+00, -4.710136144856099e+00, -9.889933144225956e-01, -9.880009752184549e-01, -9.622658869667032e-01, -9.696743524821005e-01, -9.886313871994087e-01, -9.886313871994087e-01, -2.750583890976311e-01, -2.786975767262590e-01, -1.180024594346490e+00, -1.997610888141099e-01, -2.761500677935985e-01, -2.761500677935985e-01, -1.545351661512949e-02, -1.618656955664572e-02, -6.571723324442676e-02, -7.414912893302894e-03, -1.601795067430338e-02, -1.601795067430338e-02, -6.689528263899949e+00, -6.690534667135185e+00, -6.689634450293354e+00, -6.690416939002386e+00, -6.690039791813202e+00, -6.690039791813202e+00, -2.779177753434390e+00, -2.797506530349009e+00, -2.771763692677861e+00, -2.786075344747572e+00, -2.801175654065063e+00, -2.801175654065063e+00, -8.635500636334855e-01, -9.364417069250238e-01, -8.202476912078326e-01, -8.548530706293103e-01, -8.960518866486314e-01, -8.960518866486314e-01, -1.469434956514916e-01, -2.770166136362334e-01, -1.450663043724007e-01, -2.729218654367357e+00, -1.698276843371907e-01, -1.698276843371907e-01, -7.153112658831272e-03, -8.174649172634604e-03, -6.127226611447991e-03, -9.155692661362098e-02, -7.448495947496887e-03, -7.448495947496887e-03, -8.905163430774871e-01, -8.858581795963325e-01, -8.875281529603287e-01, -8.888164355884569e-01, -8.881716588163912e-01, -8.881716588163912e-01, -8.624979372918395e-01, -7.501665611114831e-01, -7.829865908269161e-01, -8.133782351977816e-01, -7.978975829477759e-01, -7.978975829477759e-01, -9.808429127165229e-01, -3.478509502743229e-01, -4.125168610787146e-01, -5.260029495175098e-01, -4.658725719319347e-01, -4.658725719319347e-01, -6.777390117432761e-01, -6.087248657972461e-02, -8.236681210590410e-02, -4.973169932580953e-01, -1.193430983088732e-01, -1.193430983088732e-01, -1.811030439293487e-02, -2.238379988202919e-03, -4.251911827150860e-03, -1.138700761327199e-01, -6.330396900276810e-03, -6.330396900276800e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
