
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_ksdt_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_ksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.001253530587763e+01, -2.001259076527299e+01, -2.001285444109616e+01, -2.001202896105181e+01, -2.001245906231477e+01, -2.001245906231477e+01, -3.336176209972204e+00, -3.336183243955473e+00, -3.336425679059772e+00, -3.336623015295824e+00, -3.336263202125599e+00, -3.336263202125599e+00, -6.882225568022329e-01, -6.875113787427770e-01, -6.703909096592559e-01, -6.756008840077237e-01, -6.744930311948730e-01, -6.744930311948730e-01, -1.987437362272454e-01, -2.014519799569643e-01, -7.950876348859248e-01, -1.551793573410652e-01, -1.721834064483068e-01, -1.721834064483068e-01, -9.380436233801168e-03, -9.844045520426311e-03, -4.744502929334394e-02, -5.572365844730525e-03, -6.925875381917378e-03, -6.925875381917378e-03, -4.954417125902014e+00, -4.955310806408521e+00, -4.954461635981110e+00, -4.955250539779052e+00, -4.954868316614191e+00, -4.954868316614191e+00, -1.908309320303322e+00, -1.921679984634179e+00, -1.898547487675142e+00, -1.910364293400434e+00, -1.920419747716581e+00, -1.920419747716581e+00, -6.072583395949448e-01, -6.561220409851042e-01, -5.648747730988810e-01, -5.856329761878898e-01, -6.163915304176150e-01, -6.163915304176150e-01, -1.119646774025327e-01, -1.990154459027405e-01, -1.044440404306626e-01, -1.873054941906891e+00, -1.291808215299531e-01, -1.291808215299531e-01, -4.347814982868636e-03, -5.453089025306143e-03, -4.217659476617626e-03, -7.326652062271390e-02, -5.041527630616868e-03, -5.041527630616868e-03, -6.100094699187524e-01, -6.067434630658278e-01, -6.078927931937921e-01, -6.088393965013552e-01, -6.083655860618499e-01, -6.083655860618499e-01, -5.945703104104926e-01, -5.158734283807860e-01, -5.384230690159747e-01, -5.607511390482255e-01, -5.493521873659687e-01, -5.493521873659687e-01, -6.857945048262014e-01, -2.457838832748906e-01, -2.902063752582733e-01, -3.741884695205410e-01, -3.292845321073187e-01, -3.292845321073187e-01, -4.778314217762948e-01, -4.560634949172079e-02, -6.027542983880885e-02, -3.618260855709641e-01, -9.093678756513092e-02, -9.093678756513095e-02, -1.296160816297883e-02, -1.524657343786071e-03, -3.130974857029613e-03, -8.596637893706482e-02, -4.680534279960131e-03, -4.680534279960127e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_ksdt_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_ksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.664119109033075e+01, -2.664126500356206e+01, -2.664161641619515e+01, -2.664051626180360e+01, -2.664108947710442e+01, -2.664108947710442e+01, -4.422471485644908e+00, -4.422480848293896e+00, -4.422803543817286e+00, -4.423066210094587e+00, -4.422587277363568e+00, -4.422587277363568e+00, -9.032331982399435e-01, -9.022921064809388e-01, -8.796389266091710e-01, -8.865321445840848e-01, -8.850663337505642e-01, -8.850663337505642e-01, -2.583865361109333e-01, -2.619260110359161e-01, -1.044717284309153e+00, -2.015341178667916e-01, -2.237053661292648e-01, -2.237053661292648e-01, -1.232791081724093e-02, -1.293332254625310e-02, -6.170388074199315e-02, -7.345082048456878e-03, -9.118405010506472e-03, -9.118405010506472e-03, -6.577046149111062e+00, -6.578236275878440e+00, -6.577105423797699e+00, -6.578156017962474e+00, -6.577647006034407e+00, -6.577647006034407e+00, -2.522781348730380e+00, -2.540558251301090e+00, -2.509802763600037e+00, -2.525513506547331e+00, -2.538882695100829e+00, -2.538882695100829e+00, -7.961415624965913e-01, -8.607620374721807e-01, -7.401231843685426e-01, -7.675552983025594e-01, -8.082169878416504e-01, -8.082169878416504e-01, -1.453118714762874e-01, -2.587416150810201e-01, -1.355468753499470e-01, -2.475910687656584e+00, -1.676876890725813e-01, -1.676876890725813e-01, -5.738075052427023e-03, -7.188669917237918e-03, -5.567101691662689e-03, -9.512525547799781e-02, -6.648785631716905e-03, -6.648785631716905e-03, -7.997788167089271e-01, -7.954608611762046e-01, -7.969803588517974e-01, -7.982318536269577e-01, -7.976054317029626e-01, -7.976054317029626e-01, -7.793684504641203e-01, -6.754010396245285e-01, -7.051790159396493e-01, -7.346747321139371e-01, -7.196153045490969e-01, -7.196153045490969e-01, -9.000202199581622e-01, -3.199396330774498e-01, -3.781957733343915e-01, -4.885951590171464e-01, -4.295282074192007e-01, -4.295282074192007e-01, -6.251905445674365e-01, -5.932467727799159e-02, -7.830677825074929e-02, -4.723256832447705e-01, -1.180232195113955e-01, -1.180232195113955e-01, -1.699908949841449e-02, -2.020328420826821e-03, -4.138193634802244e-03, -1.115794205042668e-01, -6.174985275183249e-03, -6.174985275183243e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
