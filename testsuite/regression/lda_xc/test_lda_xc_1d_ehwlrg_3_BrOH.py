
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_1d_ehwlrg_3_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.385337606764697e+10, -7.385477978037843e+10, -7.386207620754979e+10, -7.383907018775121e+10, -7.385410769385454e+10, -7.385410769385454e+10, -4.866537377793369e+04, -4.866617951353340e+04, -4.870414362713299e+04, -4.872014144848582e+04, -4.866742367781841e+04, -4.866742367781841e+04, -3.409093220636137e-01, -3.405650339316347e-01, -3.319604294621318e-01, -3.343822004180213e-01, -3.407836246045722e-01, -3.407836246045722e-01, -5.129705577950218e-02, -5.252770584174087e-02, -4.652549949989423e-01, -2.869606889340214e-02, -5.166495564549438e-02, -5.166495564549438e-02, -2.645494029567940e-04, -2.879739618647871e-04, -3.747818012806162e-03, -6.898208205161152e-05, -2.825059569441850e-04, -2.825059569441850e-04, -1.159742212227139e+06, -1.161361863437087e+06, -1.159913005713587e+06, -1.161172291721056e+06, -1.160565180330695e+06, -1.160565180330695e+06, -4.894006759911693e+02, -5.182202218438931e+02, -4.781494815895529e+02, -5.000763971966276e+02, -5.241653619976299e+02, -5.241653619976299e+02, -3.006429660489791e-01, -3.237367733884277e-01, -2.859281999124296e-01, -2.977729158649668e-01, -3.110794669305410e-01, -3.110794669305410e-01, -1.636987198277750e-02, -5.195776013077712e-02, -1.598908344211792e-02, -4.178721224523795e+02, -2.133284627130499e-02, -2.133284627130499e-02, -6.458972943674694e-05, -8.246590343415421e-05, -4.865326531141784e-05, -6.881218149030008e-03, -6.955499734492180e-05, -6.955499734492180e-05, -3.093280907395703e-01, -3.078473516923285e-01, -3.083789930368193e-01, -3.087885102640809e-01, -3.085836149615843e-01, -3.085836149615843e-01, -3.002977779208353e-01, -2.595011766938547e-01, -2.723030237700758e-01, -2.834874471216812e-01, -2.778702679354213e-01, -2.778702679354214e-01, -3.381127393778378e-01, -7.807391238762582e-02, -1.051695413954102e-01, -1.575938917971686e-01, -1.292692971067229e-01, -1.292692971067229e-01, -2.287575095666325e-01, -3.257189360780731e-03, -5.668702779365039e-03, -1.439768205427692e-01, -1.118343726603047e-02, -1.118343726603047e-02, -3.537027173549318e-04, -7.704200706834637e-06, -2.492839284181251e-05, -1.026180143161105e-02, -5.164654409476986e-05, -5.164654409476972e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_1d_ehwlrg_3_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.666169751165834e+11, -2.666220425932637e+11, -2.666483830785349e+11, -2.665653301388177e+11, -2.666196163256161e+11, -2.666196163256161e+11, -1.766383401232775e+05, -1.766412586670514e+05, -1.767787725992554e+05, -1.768367200012912e+05, -1.766457652915949e+05, -1.766457652915949e+05, -4.528870316588533e-01, -4.520741614661321e-01, -4.337546433076081e-01, -4.385234343171986e-01, -4.525895495503122e-01, -4.525895495503122e-01, -8.195665989401173e-02, -8.389674266982838e-02, -9.334716115426033e-01, -4.606582361038201e-02, -8.253681582684522e-02, -8.253681582684522e-02, -4.259239699306717e-04, -4.636373670072122e-04, -6.033365146997151e-03, -1.110611357270195e-04, -4.548339141942479e-04, -4.548339141942479e-04, -4.193487201628401e+06, -4.199340026690170e+06, -4.194104386755572e+06, -4.198654984243471e+06, -4.196461106718563e+06, -4.196461106718563e+06, -1.819398373143466e+03, -1.925425383509134e+03, -1.777993430196213e+03, -1.858679298609062e+03, -1.947292329185952e+03, -1.947292329185952e+03, -3.931520632747082e-01, -4.197061998898705e-01, -3.806493644992144e-01, -3.906027313906900e-01, -4.034357678629477e-01, -4.034357678629477e-01, -2.632496964258616e-02, -8.299844578848539e-02, -2.571374152890707e-02, -1.556045085170246e+03, -3.428439021577882e-02, -3.428439021577882e-02, -1.039894506275272e-04, -1.327700782952809e-04, -7.833175063478349e-05, -1.107566839408453e-02, -1.119835289878294e-04, -1.119835289878294e-04, -4.015636204209356e-01, -4.000343555981697e-01, -4.005780829336114e-01, -4.010009391005562e-01, -4.007889246162592e-01, -4.007889246162592e-01, -3.928408354937413e-01, -3.581664421068586e-01, -3.693489147969042e-01, -3.786433543876574e-01, -3.740102868873695e-01, -3.740102868873696e-01, -4.464617777169679e-01, -1.237503011464209e-01, -1.649433180841042e-01, -2.401997226211714e-01, -2.003807478147356e-01, -2.003807478147355e-01, -3.278159756692369e-01, -5.243645495716402e-03, -9.124757542693535e-03, -2.213317877689902e-01, -1.799418167406158e-02, -1.799418167406159e-02, -5.694601506413376e-04, -1.240376308770806e-05, -4.013471135971781e-05, -1.651261446465224e-02, -8.315092836376064e-05, -8.315092836376042e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
