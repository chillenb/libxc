
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_1d_ehwlrg_3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.386822057047234e+10, -7.386983368837074e+10, -7.387750350707001e+10, -7.385349420940732e+10, -7.386600296473317e+10, -7.386600296473317e+10, -4.868309980412401e+04, -4.868392876228392e+04, -4.871250736836962e+04, -4.873578044362029e+04, -4.869335273388145e+04, -4.869335273388145e+04, -3.430370742953999e-01, -3.426573895791951e-01, -3.338855704262196e-01, -3.364893820139326e-01, -3.359315797691051e-01, -3.359315797691051e-01, -4.676383647286091e-02, -4.804465643483174e-02, -4.384314790211492e-01, -2.841324727901452e-02, -3.506099601765716e-02, -3.506099601765716e-02, -1.013540025382368e-04, -1.113111310121310e-04, -2.534149599647595e-03, -3.711284232492065e-05, -5.636895114021949e-05, -5.636895114021949e-05, -1.163718971246892e+06, -1.165396617580672e+06, -1.163802477147697e+06, -1.165283416785791e+06, -1.164565697730512e+06, -1.164565697730512e+06, -4.938846484696204e+02, -5.238437920596947e+02, -4.729585101358826e+02, -4.983904053967385e+02, -5.209545131964230e+02, -5.209545131964230e+02, -3.036846727862071e-01, -3.269538880600247e-01, -2.818753616432041e-01, -2.928577048976985e-01, -3.081087363897224e-01, -3.081087363897224e-01, -1.461741453823238e-02, -4.689162148981875e-02, -1.268113058450871e-02, -4.218863135639953e+02, -1.957190155845500e-02, -1.957190155845500e-02, -2.308966019058065e-05, -3.560490483228756e-05, -2.178936469808302e-05, -6.141889273505285e-03, -3.063700710578343e-05, -3.063700710578343e-05, -3.050250592956895e-01, -3.034330106602608e-01, -3.039944258829340e-01, -3.044558578426661e-01, -3.042250005110963e-01, -3.042250005110963e-01, -2.974003479197470e-01, -2.532905916361791e-01, -2.669167446832748e-01, -2.796163524488069e-01, -2.732322851883330e-01, -2.732322851883330e-01, -3.417466035206701e-01, -7.116443040427455e-02, -9.795397707890162e-02, -1.554081416604312e-01, -1.238679386168009e-01, -1.238679386168009e-01, -2.286382566665668e-01, -2.338897524771239e-03, -4.123683322234454e-03, -1.466003312778385e-01, -9.553532517641367e-03, -9.553532517641369e-03, -1.903916633126394e-04, -3.183735690426996e-06, -1.236620709834976e-05, -8.516001186408032e-03, -2.657996639142718e-05, -2.657996639142713e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_1d_ehwlrg_3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.666705645513542e+11, -2.666763879916781e+11, -2.667040764399424e+11, -2.666174016145428e+11, -2.666625588781803e+11, -2.666625588781803e+11, -1.767025475032492e+05, -1.767055501626122e+05, -1.768090677947134e+05, -1.768933676372566e+05, -1.767396857488104e+05, -1.767396857488104e+05, -4.580455799217483e-01, -4.571081371064238e-01, -4.375210228236615e-01, -4.429185003559530e-01, -4.417326451390005e-01, -4.417326451390005e-01, -7.479627661722725e-02, -7.682154557676792e-02, -8.173361702852000e-01, -4.561397478144141e-02, -5.621878463119143e-02, -5.621878463119143e-02, -1.631798988742682e-04, -1.792108630304327e-04, -4.079759499137105e-03, -5.975167295403529e-05, -9.075400172518807e-05, -9.075400172518807e-05, -4.207857743650530e+06, -4.213920133774810e+06, -4.208159503009061e+06, -4.213511068294157e+06, -4.210917498780374e+06, -4.210917498780374e+06, -1.835897716034739e+03, -1.946109600158908e+03, -1.758888065813556e+03, -1.852476150499888e+03, -1.935482653263977e+03, -1.935482653263977e+03, -3.959595759790603e-01, -4.248236114643054e-01, -3.773177217340575e-01, -3.863956551774731e-01, -4.003009547497695e-01, -4.003009547497695e-01, -2.351140888145279e-02, -7.499840890757792e-02, -2.040107590721339e-02, -1.570832802814734e+03, -3.146180309884749e-02, -3.146180309884749e-02, -3.717435199549605e-05, -5.732389392160150e-05, -3.508087638185430e-05, -9.886150755492337e-03, -4.932557951780687e-05, -4.932557951780687e-05, -3.972390150478671e-01, -3.957224533612681e-01, -3.962527419849812e-01, -3.966922137550765e-01, -3.964719263121025e-01, -3.964719263121025e-01, -3.902776261088250e-01, -3.524507047434135e-01, -3.647339914440275e-01, -3.754555561570853e-01, -3.701337487039929e-01, -3.701337487039929e-01, -4.548893171072528e-01, -1.130566783286518e-01, -1.540998565670387e-01, -2.372080240025650e-01, -1.925509465234841e-01, -1.925509465234841e-01, -3.276882702046059e-01, -3.765445879931084e-03, -6.638329841607197e-03, -2.250085029266503e-01, -1.537383102823368e-02, -1.537383102823368e-02, -3.065303391917814e-04, -5.125814456705714e-06, -1.990959325297940e-05, -1.370533191522817e-02, -4.279374456877690e-05, -4.279374456877682e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
