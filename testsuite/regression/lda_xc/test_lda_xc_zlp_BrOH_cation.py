
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_zlp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.486716849173316e+01, -1.486719578476035e+01, -1.486732554591927e+01, -1.486691930393197e+01, -1.486713097019301e+01, -1.486713097019301e+01, -3.529622524992807e+00, -3.529629319001306e+00, -3.529863481401475e+00, -3.530054081461304e+00, -3.529706549087702e+00, -3.529706549087702e+00, -7.553399668785945e-01, -7.545337593208448e-01, -7.351183641111390e-01, -7.410281698702952e-01, -7.397716098336045e-01, -7.397716098336045e-01, -2.002869185720809e-01, -2.032869394714970e-01, -8.761868020895561e-01, -1.524606951772590e-01, -1.710213468173782e-01, -1.710213468173782e-01, -7.057442142074000e-03, -7.428011422236911e-03, -4.087747762757284e-02, -4.076980690101398e-03, -5.122549233524271e-03, -5.122549233524271e-03, -5.024907914679679e+00, -5.025698589482306e+00, -5.024947295383853e+00, -5.025645270334940e+00, -5.025307105654564e+00, -5.025307105654564e+00, -2.090427122700283e+00, -2.104496799260344e+00, -2.080147421148509e+00, -2.092590303358093e+00, -2.103171185863230e+00, -2.103171185863230e+00, -6.634120475813134e-01, -7.189264859876260e-01, -6.151889377097683e-01, -6.388144217731414e-01, -6.737955313284415e-01, -6.737955313284415e-01, -1.061393547586349e-01, -2.005877802247102e-01, -9.823946039116831e-02, -2.053272481187004e+00, -1.244221292236661e-01, -1.244221292236661e-01, -3.145936504613546e-03, -3.985643034573365e-03, -3.047882960116300e-03, -6.620744062902070e-02, -3.671537683883569e-03, -3.671537683883569e-03, -6.665401210374926e-01, -6.628265950876119e-01, -6.641334547270845e-01, -6.652097651892052e-01, -6.646710355558569e-01, -6.646710355558569e-01, -6.489820760879407e-01, -5.593756344810719e-01, -5.850664655638333e-01, -6.104942262224087e-01, -5.975143208377056e-01, -5.975143208377056e-01, -7.525873719627203e-01, -2.527228648130149e-01, -3.027215144606392e-01, -3.979587925176922e-01, -3.469528413545855e-01, -3.469528413545855e-01, -5.160191471494927e-01, -3.912970887303082e-02, -5.329537056872773e-02, -3.839021267883350e-01, -8.420643846833514e-02, -8.420643846833516e-02, -9.957758251643583e-03, -1.065692718734882e-03, -2.236669394459534e-03, -7.909887521107377e-02, -3.397408311565827e-03, -3.397408311565824e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_zlp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.812930719034820e+01, -1.812930719034820e+01, -1.812933789391588e+01, -1.812933789391588e+01, -1.812948386992346e+01, -1.812948386992346e+01, -1.812902686358565e+01, -1.812902686358565e+01, -1.812926498009637e+01, -1.812926498009637e+01, -1.812926498009637e+01, -1.812926498009637e+01, -4.578857437562387e+00, -4.578857437562387e+00, -4.578866058553128e+00, -4.578866058553128e+00, -4.579163189345485e+00, -4.579163189345485e+00, -4.579405042907345e+00, -4.579405042907345e+00, -4.578964056596996e+00, -4.578964056596996e+00, -4.578964056596996e+00, -4.578964056596996e+00, -9.990772178732119e-01, -9.990772178732119e-01, -9.980177339690988e-01, -9.980177339690988e-01, -9.724988863972430e-01, -9.724988863972430e-01, -9.802673127636011e-01, -9.802673127636011e-01, -9.786156265091553e-01, -9.786156265091553e-01, -9.786156265091553e-01, -9.786156265091553e-01, -2.663258562890610e-01, -2.663258562890610e-01, -2.703059581919598e-01, -2.703059581919598e-01, -1.157742915542613e+00, -1.157742915542613e+00, -2.028419498983893e-01, -2.028419498983893e-01, -2.274866426921430e-01, -2.274866426921430e-01, -2.274866426921430e-01, -2.274866426921430e-01, -9.408479627406900e-03, -9.408479627406900e-03, -9.902425941525565e-03, -9.902425941525565e-03, -5.446465427639490e-02, -5.446465427639490e-02, -5.435461941607657e-03, -5.435461941607657e-03, -6.829277032612224e-03, -6.829277032612224e-03, -6.829277032612224e-03, -6.829277032612224e-03, -6.460545597061929e+00, -6.460545597061929e+00, -6.461532461867194e+00, -6.461532461867194e+00, -6.460594749493081e+00, -6.460594749493081e+00, -6.461465912914249e+00, -6.461465912914249e+00, -6.461043840279145e+00, -6.461043840279145e+00, -6.461043840279145e+00, -6.461043840279145e+00, -2.737297138434961e+00, -2.737297138434961e+00, -2.755454252395662e+00, -2.755454252395662e+00, -2.724029037514258e+00, -2.724029037514258e+00, -2.740088959240204e+00, -2.740088959240204e+00, -2.753743664860389e+00, -2.753743664860389e+00, -2.753743664860389e+00, -2.753743664860389e+00, -8.781843999570522e-01, -8.781843999570522e-01, -9.512110749926659e-01, -9.512110749926659e-01, -8.146973677210803e-01, -8.146973677210803e-01, -8.458070268172833e-01, -8.458070268172833e-01, -8.918482091096366e-01, -8.918482091096366e-01, -8.918482091096366e-01, -8.918482091096366e-01, -1.412934430761661e-01, -1.412934430761661e-01, -2.667250177722876e-01, -2.667250177722876e-01, -1.307902084052304e-01, -1.307902084052304e-01, -2.689333313847777e+00, -2.689333313847777e+00, -1.655938633146574e-01, -1.655938633146574e-01, -1.655938633146574e-01, -1.655938633146574e-01, -4.194268319858156e-03, -4.194268319858156e-03, -5.313699886353350e-03, -5.313699886353350e-03, -4.063548518145940e-03, -4.063548518145940e-03, -8.818210367706666e-02, -8.818210367706666e-02, -4.894963338920567e-03, -4.894963338920567e-03, -4.894963338920567e-03, -4.894963338920567e-03, -8.823009215521883e-01, -8.823009215521883e-01, -8.774139262888468e-01, -8.774139262888468e-01, -8.791337844089407e-01, -8.791337844089407e-01, -8.805502078184964e-01, -8.805502078184964e-01, -8.798412431983785e-01, -8.798412431983785e-01, -8.798412431983785e-01, -8.798412431983785e-01, -8.591920371010615e-01, -8.591920371010615e-01, -7.411564131857364e-01, -7.411564131857364e-01, -7.750155115934392e-01, -7.750155115934392e-01, -8.085140496316767e-01, -8.085140496316767e-01, -7.914160320949234e-01, -7.914160320949234e-01, -7.914160320949234e-01, -7.914160320949234e-01, -9.954598200686124e-01, -9.954598200686124e-01, -3.358579094964104e-01, -3.358579094964104e-01, -4.020922769307204e-01, -4.020922769307204e-01, -5.280863849310128e-01, -5.280863849310128e-01, -4.606350591061591e-01, -4.606350591061591e-01, -4.606350591061591e-01, -4.606350591061591e-01, -6.839826588077677e-01, -6.839826588077677e-01, -5.213731040007950e-02, -5.213731040007950e-02, -7.099726385200435e-02, -7.099726385200435e-02, -5.095036656286481e-01, -5.095036656286481e-01, -1.121279270066293e-01, -1.121279270066293e-01, -1.121279270066293e-01, -1.121279270066293e-01, -1.327425231337862e-02, -1.327425231337862e-02, -1.420883477283062e-03, -1.420883477283062e-03, -2.982061540289978e-03, -2.982061540289978e-03, -1.053339099736978e-01, -1.053339099736978e-01, -4.529514901049328e-03, -4.529514901049328e-03, -4.529514901049324e-03, -4.529514901049324e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
