
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_gdsmfb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_gdsmfb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.997920576599786e+01, -1.997925397658965e+01, -1.997950455990986e+01, -1.997871438416151e+01, -1.997923089384038e+01, -1.997923089384038e+01, -3.329528530584797e+00, -3.329535354191843e+00, -3.329856752847367e+00, -3.329992122710717e+00, -3.329545890566820e+00, -3.329545890566820e+00, -6.838631657521489e-01, -6.832061826982766e-01, -6.661711670568419e-01, -6.710745285372585e-01, -6.836235490061328e-01, -6.836235490061328e-01, -2.082440165502839e-01, -2.107424524077382e-01, -8.105482686744939e-01, -1.559589743891903e-01, -2.089937231945631e-01, -2.089937231945631e-01, -1.530858373487279e-02, -1.598204787358129e-02, -5.745366675700039e-02, -7.688296769815729e-03, -1.582740061393826e-02, -1.582740061393826e-02, -4.942315501503947e+00, -4.943179112902848e+00, -4.942406619602576e+00, -4.943078086003099e+00, -4.942754446267245e+00, -4.942754446267245e+00, -1.903124499729325e+00, -1.916066392043950e+00, -1.897892459926528e+00, -1.907993625025765e+00, -1.918658421649307e+00, -1.918658421649307e+00, -6.008695291987711e-01, -6.490825194464388e-01, -5.722364802617511e-01, -5.951185004956193e-01, -6.223641331595312e-01, -6.223641331595312e-01, -1.183303415196666e-01, -2.095886802660375e-01, -1.169724206967632e-01, -1.867902146129889e+00, -1.347604377772220e-01, -1.347604377772220e-01, -7.431164501735733e-03, -8.430630499449421e-03, -6.416538160068218e-03, -7.740359501153733e-02, -7.721230580463422e-03, -7.721230580463422e-03, -6.187029812528869e-01, -6.156222254068558e-01, -6.167266800367593e-01, -6.175787075765868e-01, -6.171522726412458e-01, -6.171522726412458e-01, -6.001737826566821e-01, -5.258940146034425e-01, -5.475984372992386e-01, -5.676943104329315e-01, -5.574582082702619e-01, -5.574582082702619e-01, -6.784674166311534e-01, -2.578618445701557e-01, -3.014582623626516e-01, -3.772941493297072e-01, -3.371967048964535e-01, -3.371967048964535e-01, -4.779712682762465e-01, -5.362322858838672e-02, -7.039039558018637e-02, -3.581850788417560e-01, -9.818054719168268e-02, -9.818054719168268e-02, -1.773568034674694e-02, -2.442630622200242e-03, -4.529057829304701e-03, -9.413228253832344e-02, -6.618403049596304e-03, -6.618403049596294e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_gdsmfb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_gdsmfb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.659973718107369e+01, -2.659980144196164e+01, -2.660013544961625e+01, -2.659908220813406e+01, -2.659977067449105e+01, -2.659977067449105e+01, -4.413312756021982e+00, -4.413321839709634e+00, -4.413749690436326e+00, -4.413929896855688e+00, -4.413335865889486e+00, -4.413335865889486e+00, -8.972007531678375e-01, -8.963317208999279e-01, -8.738006496263061e-01, -8.802855573987934e-01, -8.968837965037217e-01, -8.968837965037217e-01, -2.708231865108439e-01, -2.740890222387711e-01, -1.064880068958961e+00, -2.025872019437594e-01, -2.718031209143779e-01, -2.718031209143779e-01, -2.004997057450595e-02, -2.092618179655055e-02, -7.467341542199323e-02, -1.011216104668734e-02, -2.072500092600035e-02, -2.072500092600035e-02, -6.560918382215044e+00, -6.562068636717171e+00, -6.561039743506305e+00, -6.561934077752468e+00, -6.561503018045344e+00, -6.561503018045344e+00, -2.515426040824264e+00, -2.532633056312534e+00, -2.508469831085844e+00, -2.521899791970906e+00, -2.536079355153901e+00, -2.536079355153901e+00, -7.874727719118274e-01, -8.512030299432144e-01, -7.496435733630357e-01, -7.798734560775834e-01, -8.158805538106000e-01, -8.158805538106000e-01, -1.536222473924175e-01, -2.725808118798336e-01, -1.518576658836885e-01, -2.468597600263447e+00, -1.749863473933650e-01, -1.749863473933650e-01, -9.775845679220607e-03, -1.108264572245330e-02, -8.447924051890829e-03, -1.005133996584713e-01, -1.015523079293572e-02, -1.015523079293572e-02, -8.110413247524667e-01, -8.069694270884827e-01, -8.084291885626955e-01, -8.095553305621660e-01, -8.089917013474149e-01, -8.089917013474149e-01, -7.865533921127603e-01, -6.884514427426479e-01, -7.171051370879062e-01, -7.436440100911914e-01, -7.301250603712072e-01, -7.301250603712073e-01, -8.900636456974219e-01, -3.357583879879856e-01, -3.929319127429798e-01, -4.925961786122395e-01, -4.398696942019478e-01, -4.398696942019477e-01, -6.252229334973226e-01, -6.971418898429577e-02, -9.142686818805143e-02, -4.674607256942558e-01, -1.274558490527964e-01, -1.274558490527964e-01, -2.320658279342657e-02, -3.230227279638951e-03, -5.973514668903709e-03, -1.222033277270264e-01, -8.712232665229821e-03, -8.712232665229807e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
