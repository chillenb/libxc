
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_teter93_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_teter93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.996547863116525e+01, -1.996552676649897e+01, -1.996577695865244e+01, -1.996498801639246e+01, -1.996550371978250e+01, -1.996550371978250e+01, -3.339300948598269e+00, -3.339307776276707e+00, -3.339629366633980e+00, -3.339764817202187e+00, -3.339318318938231e+00, -3.339318318938231e+00, -6.851705163268632e-01, -6.845098712462946e-01, -6.673804702315499e-01, -6.723108838375458e-01, -6.849295637758785e-01, -6.849295637758785e-01, -2.080150245771779e-01, -2.105123404396777e-01, -8.125821831536899e-01, -1.557655191689346e-01, -2.087643867928748e-01, -2.087643867928748e-01, -1.529443442642104e-02, -1.596459461987447e-02, -5.729526774046694e-02, -7.693143215786735e-03, -1.581071837741845e-02, -1.581071837741845e-02, -4.951840766260935e+00, -4.952703761494734e+00, -4.951931819367040e+00, -4.952602806694801e+00, -4.952279397895693e+00, -4.952279397895693e+00, -1.910377998977674e+00, -1.923362152016497e+00, -1.905128747665488e+00, -1.915263076317448e+00, -1.925962592196237e+00, -1.925962592196237e+00, -6.017294533941154e-01, -6.501983391343710e-01, -5.729511306321031e-01, -5.959488012998906e-01, -6.233365684762694e-01, -6.233365684762694e-01, -1.181604386816508e-01, -2.093590755966237e-01, -1.168030618820794e-01, -1.875038359665309e+00, -1.345819477156724e-01, -1.345819477156724e-01, -7.435734238880691e-03, -8.435844727943337e-03, -6.419241144889423e-03, -7.723940736191945e-02, -7.726106829898364e-03, -7.726106829898364e-03, -6.196560621803191e-01, -6.165590789231207e-01, -6.176693448511812e-01, -6.185258602788304e-01, -6.180971786621089e-01, -6.180971786621089e-01, -6.010301118284035e-01, -5.263869275283017e-01, -5.481929382941573e-01, -5.683864520871214e-01, -5.581002084156437e-01, -5.581002084156437e-01, -6.797447379395415e-01, -2.576284749597983e-01, -3.012579180332584e-01, -3.772387153076235e-01, -3.370511667583826e-01, -3.370511667583826e-01, -4.782564204431915e-01, -5.346837489572157e-02, -7.022672412626026e-02, -3.580830693817632e-01, -9.801582562138184e-02, -9.801582562138185e-02, -1.770907414045431e-02, -2.428876123178223e-03, -4.525103023307437e-03, -9.396789921162296e-02, -6.621576741810378e-03, -6.621576741810369e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_teter93_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_teter93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.657567520897077e+01, -2.657573937635024e+01, -2.657607289797883e+01, -2.657502118911228e+01, -2.657570865365057e+01, -2.657570865365057e+01, -4.423731832069246e+00, -4.423740912090540e+00, -4.424168590060387e+00, -4.424348723676581e+00, -4.423754932609027e+00, -4.423754932609027e+00, -8.996975006934762e-01, -8.988231198232660e-01, -8.761533896709851e-01, -8.826781994621403e-01, -8.993785932732814e-01, -8.993785932732814e-01, -2.705651495237907e-01, -2.738315304585114e-01, -1.068398040343983e+00, -2.023582111664657e-01, -2.715452260321275e-01, -2.715452260321275e-01, -2.001307433448256e-02, -2.088396827393522e-02, -7.450172280620297e-02, -1.011924784594171e-02, -2.068401203569382e-02, -2.068401203569382e-02, -6.569289170998963e+00, -6.570437891538771e+00, -6.569410370459353e+00, -6.570303512036038e+00, -6.569873027206647e+00, -6.569873027206647e+00, -2.524689513232931e+00, -2.541931560826638e+00, -2.517718963915391e+00, -2.531176517529101e+00, -2.545384801359242e+00, -2.545384801359242e+00, -7.892973128550049e-01, -8.534168471660759e-01, -7.512403895190610e-01, -7.816519912794657e-01, -8.178779745586893e-01, -8.178779745586893e-01, -1.534378478469690e-01, -2.723230428625572e-01, -1.516746862777561e-01, -2.477762547494309e+00, -1.747828264155294e-01, -1.747828264155294e-01, -9.783296295927689e-03, -1.108805797877409e-02, -8.455611881215045e-03, -1.003487271168278e-01, -1.016226265109887e-02, -1.016226265109887e-02, -8.130092077377767e-01, -8.089124814924001e-01, -8.103811411496626e-01, -8.115141498444134e-01, -8.109470836477990e-01, -8.109470836477990e-01, -7.883723611326547e-01, -6.896890609197103e-01, -7.185092502370513e-01, -7.452050448005777e-01, -7.316058671688330e-01, -7.316058671688330e-01, -8.925164659455191e-01, -3.355513379406887e-01, -3.928399203191888e-01, -4.928410818053427e-01, -4.399169691714035e-01, -4.399169691714035e-01, -6.261074698406425e-01, -6.954178059701266e-02, -9.126013276371227e-02, -4.676064508348339e-01, -1.272879444763845e-01, -1.272879444763845e-01, -2.315046410045307e-02, -3.219608745129460e-03, -5.976023730305061e-03, -1.220372640139527e-01, -8.720032713814250e-03, -8.720032713814239e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
