
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_lp_a_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.315140993755329e+01, -2.315147450368733e+01, -2.315178147724209e+01, -2.315082044373860e+01, -2.315132116578310e+01, -2.315132116578310e+01, -3.769249383410967e+00, -3.769257518483797e+00, -3.769537919104096e+00, -3.769766161619532e+00, -3.769348813796639e+00, -3.769348813796639e+00, -7.269892799882701e-01, -7.261747511601626e-01, -7.068493556028842e-01, -7.127857366793535e-01, -7.047316322042751e-01, -7.047316322042751e-01, -1.871096155192584e-01, -1.897607340500989e-01, -8.456541597902549e-01, -1.424557100883700e-01, -7.416857191472825e-02, -7.416857191472825e-02, -6.480914018836975e-03, -6.805407599161196e-03, -3.769526491627728e-02, -3.771685808121266e-03, -2.492479755123624e-03, -2.492479755123624e-03, -5.643368349236651e+00, -5.644404359477659e+00, -5.643419922641012e+00, -5.644334526146443e+00, -5.643891390277800e+00, -5.643891390277800e+00, -2.121231031151467e+00, -2.136617032118466e+00, -2.109984200951667e+00, -2.123580245144284e+00, -2.135074571890737e+00, -2.135074571890737e+00, -6.359369145165766e-01, -6.908620621001071e-01, -5.867206271746024e-01, -6.102248776037534e-01, -6.424150840022340e-01, -6.424150840022340e-01, -9.892654165519231e-02, -1.879979721991238e-01, -9.097619861795088e-02, -2.080667129444357e+00, -1.152533586691929e-01, -1.152533586691929e-01, -2.902269839964469e-03, -3.687626907960384e-03, -2.800387662672156e-03, -6.156161957962659e-02, -2.731921490428848e-03, -2.731921490428847e-03, -6.390133945147604e-01, -6.353474267521522e-01, -6.366372877429356e-01, -6.377000835101244e-01, -6.371681117681722e-01, -6.371681117681722e-01, -6.216975069440078e-01, -5.336731658908125e-01, -5.588399044215447e-01, -5.838121648642597e-01, -5.710611047103715e-01, -5.710611047103715e-01, -7.242740595496616e-01, -2.375192429849275e-01, -2.852057337432388e-01, -3.767757868047203e-01, -3.276817761371630e-01, -3.276817761371630e-01, -4.912897606666601e-01, -3.631702959174135e-02, -4.939701119912032e-02, -3.630593544877529e-01, -7.787466028680194e-02, -7.787466028680196e-02, -9.196417793890875e-03, -9.862152819394385e-04, -2.052536181366163e-03, -7.357188437123471e-02, -2.635540198633813e-03, -2.635540198633811e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_lp_a_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.086845714661462e+01, -3.086863602053965e+01, -3.086848185761476e+01, -3.086878348653388e+01, -3.086920870920279e+01, -3.086887523131031e+01, -3.086723155977903e+01, -3.086828963561337e+01, -3.086754302852167e+01, -3.086931344741330e+01, -3.086754302852167e+01, -3.086931344741330e+01, -5.025511562985990e+00, -5.025820132425179e+00, -5.025500518069832e+00, -5.025852872788264e+00, -5.026283377369781e+00, -5.025817754619862e+00, -5.026513603596067e+00, -5.026196167405177e+00, -5.030031110771766e+00, -5.021570473680010e+00, -5.030031110771766e+00, -5.021570473680010e+00, -9.779983464226061e-01, -9.607421306874886e-01, -9.788955061831499e-01, -9.577247901473176e-01, -9.279579257238435e-01, -9.572776990746333e-01, -9.550234660231565e-01, -9.457685400050198e-01, -8.140104169307520e-01, -1.092528887125623e+00, -8.140104169307520e-01, -1.092528887125623e+00, -2.721747978409050e-01, -2.292392055920616e-01, -2.794079283298868e-01, -2.298434992237378e-01, -1.215722924577131e+00, -1.047682215054900e+00, -1.959205896886665e-01, -1.842021907616498e-01, -3.617495409253378e-02, -5.050695712634241e-01, -3.617495409253377e-02, -5.050695712634241e-01, -9.936515409469831e-03, -7.561681762982173e-03, -1.063468998170231e-02, -7.804250981915912e-03, -5.695626102442407e-02, -4.457444760086517e-02, -4.843496522262441e-03, -5.223918809429609e-03, -1.290143679307631e-03, -1.435624379082372e-02, -1.290143679307632e-03, -1.435624379082372e-02, -7.520436692096617e+00, -7.528548487514138e+00, -7.521710352470152e+00, -7.530037677512079e+00, -7.520429991620409e+00, -7.528692826603956e+00, -7.521710908255714e+00, -7.529850762813076e+00, -7.521059416183006e+00, -7.529320647646452e+00, -7.521059416183006e+00, -7.529320647646452e+00, -2.827986491749832e+00, -2.828629640070714e+00, -2.847078800769056e+00, -2.850568042756083e+00, -2.824279445150792e+00, -2.802401800637063e+00, -2.842939931267431e+00, -2.820002659666534e+00, -2.818837965519058e+00, -2.875064385780118e+00, -2.818837965519058e+00, -2.875064385780118e+00, -8.428783208132388e-01, -8.529936748629308e-01, -9.220907561588584e-01, -9.202093569937339e-01, -8.494124256580737e-01, -7.220657764299123e-01, -8.765037269672165e-01, -7.566350449347089e-01, -7.652146173510237e-01, -9.630313423826156e-01, -7.652146173510238e-01, -9.630313423826153e-01, -1.347592586039217e-01, -1.291250579098807e-01, -2.534926826836850e-01, -2.478771747120826e-01, -1.367682335011535e-01, -1.080823363561282e-01, -2.771419771704855e+00, -2.777029688190594e+00, -1.754285462606750e-01, -1.353688335779087e-01, -1.754285462606750e-01, -1.353688335779087e-01, -4.224951667700411e-03, -3.553178251684024e-03, -5.086819963131991e-03, -4.754342072198429e-03, -4.259671034578888e-03, -3.291153332647487e-03, -8.322472732737925e-02, -8.096041091682424e-02, -7.986574013821648e-03, -1.965398149905622e-03, -7.986574013821648e-03, -1.965398149905621e-03, -8.594571843947455e-01, -8.446641454556122e-01, -8.546013769311428e-01, -8.397452685801149e-01, -8.563337119863055e-01, -8.414526779495762e-01, -8.576944398671416e-01, -8.429246343552975e-01, -8.570125757149063e-01, -8.421886074554735e-01, -8.570125757149063e-01, -8.421886074554735e-01, -8.351158522377371e-01, -8.228051085762496e-01, -7.185304361675942e-01, -7.046877668743731e-01, -7.525932926149937e-01, -7.377450763713479e-01, -7.845964882659879e-01, -7.723006907075279e-01, -7.678024510597510e-01, -7.550978205958555e-01, -7.678024510597510e-01, -7.550978205958555e-01, -9.692451755851036e-01, -9.621695971302753e-01, -3.208420419121068e-01, -3.126138612012435e-01, -3.889420299898060e-01, -3.718622453435854e-01, -5.086521871790208e-01, -4.961863470899970e-01, -4.365623720539606e-01, -4.372560647768323e-01, -4.365623720539608e-01, -4.372560647768321e-01, -6.652722970667471e-01, -6.450419703779688e-01, -4.917328936419996e-02, -4.768732146378692e-02, -7.099126776195247e-02, -6.121648164153928e-02, -5.007521302974540e-01, -4.681382129909128e-01, -1.176349495392278e-01, -9.210873344385334e-02, -1.176349495392278e-01, -9.210873344385337e-02, -1.329882343896790e-02, -1.133002851457606e-02, -1.321731364077149e-03, -1.308222315184990e-03, -3.153639855099497e-03, -2.390180383956262e-03, -1.017646688756686e-01, -9.460128662450117e-02, -7.063592592016123e-03, -2.001550295671904e-03, -7.063592592016117e-03, -2.001550295671903e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
