
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_corrksdt_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_corrksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.997586405604611e+01, -1.997591226164083e+01, -1.997616281898787e+01, -1.997537272514240e+01, -1.997588918128410e+01, -1.997588918128410e+01, -3.328585158215622e+00, -3.328591980218342e+00, -3.328913303310026e+00, -3.329048641347536e+00, -3.328602514116071e+00, -3.328602514116071e+00, -6.836871166765900e-01, -6.830303704902604e-01, -6.660015002819180e-01, -6.709030921767088e-01, -6.834475863202832e-01, -6.834475863202832e-01, -2.082281053363108e-01, -2.107259362591907e-01, -8.103268367362096e-01, -1.559539316252164e-01, -2.089776311599272e-01, -2.089776311599272e-01, -1.530589275389235e-02, -1.597938199584325e-02, -5.745475572271439e-02, -7.685811481890250e-03, -1.582472854093248e-02, -1.582472854093248e-02, -4.941024438674890e+00, -4.941887878237500e+00, -4.941115538642760e+00, -4.941786871438809e+00, -4.941463296097911e+00, -4.941463296097911e+00, -1.902551672878489e+00, -1.915489820683912e+00, -1.897321149288140e+00, -1.907419388382774e+00, -1.918081101349979e+00, -1.918081101349979e+00, -6.007234599321186e-01, -6.489190234600060e-01, -5.721007573098558e-01, -5.949745100783014e-01, -6.222102932162029e-01, -6.222102932162029e-01, -1.183303657598006e-01, -2.095724443046253e-01, -1.169725729783764e-01, -1.867339553500547e+00, -1.347585934374182e-01, -1.347585934374182e-01, -7.428708816283043e-03, -8.428070802930274e-03, -6.414220584430728e-03, -7.740545346363860e-02, -7.718741648367855e-03, -7.718741648367855e-03, -6.185504648638316e-01, -6.154708227796266e-01, -6.165748781225210e-01, -6.174265976352690e-01, -6.170003168655505e-01, -6.170003168655505e-01, -6.000279648963961e-01, -5.257749933085575e-01, -5.474716035782398e-01, -5.675602275040647e-01, -5.573278193524364e-01, -5.573278193524364e-01, -6.782933132558648e-01, -2.578328222253006e-01, -3.014162256991920e-01, -3.772273737671225e-01, -3.371432728685990e-01, -3.371432728685989e-01, -4.778693946481667e-01, -5.362404478867169e-02, -7.039211178818679e-02, -3.581247247123402e-01, -9.818201870626175e-02, -9.818201870626175e-02, -1.773310101183697e-02, -2.441307615484876e-03, -4.527105163308214e-03, -9.413392153028860e-02, -6.616055132864393e-03, -6.616055132864383e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_corrksdt_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_corrksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.659570924502565e+01, -2.659577350005670e+01, -2.659610747726908e+01, -2.659505433178239e+01, -2.659574273539034e+01, -2.659574273539034e+01, -4.412114570612144e+00, -4.412123652375928e+00, -4.412551412488513e+00, -4.412731580743259e+00, -4.412137675585128e+00, -4.412137675585128e+00, -8.969477895493738e-01, -8.960790669576375e-01, -8.735560401749978e-01, -8.800386295152977e-01, -8.966309458262551e-01, -8.966309458262551e-01, -2.707922072257116e-01, -2.740570839154360e-01, -1.064568244807192e+00, -2.025742436175265e-01, -2.717718546235760e-01, -2.717718546235760e-01, -2.004743881447430e-02, -2.092371797764673e-02, -7.467564500590355e-02, -1.010940633950473e-02, -2.072252107283436e-02, -2.072252107283436e-02, -6.559305247055288e+00, -6.560455297287372e+00, -6.559426586793616e+00, -6.560320762217725e+00, -6.559889779059928e+00, -6.559889779059928e+00, -2.514675854284787e+00, -2.531878294228684e+00, -2.507721497634149e+00, -2.521147882603365e+00, -2.535323678073055e+00, -2.535323678073055e+00, -7.872592468093148e-01, -8.509665183051970e-01, -7.494437858521574e-01, -7.796626855108575e-01, -8.156567564652163e-01, -8.156567564652163e-01, -1.536188893044515e-01, -2.725493173514360e-01, -1.518545828814873e-01, -2.467859926064860e+00, -1.749792385721360e-01, -1.749792385721360e-01, -9.773110624928374e-03, -1.107984811709293e-02, -8.445293597999804e-03, -1.005154957651400e-01, -1.015247375398501e-02, -1.015247375398501e-02, -8.108192744191036e-01, -8.067488476766635e-01, -8.082080817340471e-01, -8.093338169281107e-01, -8.087703913096873e-01, -8.087703913096873e-01, -7.863402001152650e-01, -6.882739935691944e-01, -7.169172123660814e-01, -7.434464068935376e-01, -7.299323842269294e-01, -7.299323842269294e-01, -8.898132266950012e-01, -3.357071905217401e-01, -3.928614469546353e-01, -4.924903519330679e-01, -4.397827748322840e-01, -4.397827748322837e-01, -6.250686608714556e-01, -6.971622943102561e-02, -9.142922160894422e-02, -4.673639557530294e-01, -1.274559538837747e-01, -1.274559538837747e-01, -2.320431663227010e-02, -3.228606363972663e-03, -5.971219081618316e-03, -1.222039557293755e-01, -8.709577737426167e-03, -8.709577737426153e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
