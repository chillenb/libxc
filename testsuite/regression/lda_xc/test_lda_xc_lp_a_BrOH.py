
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_lp_a_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.315081571717470e+01, -2.315087191178395e+01, -2.315116399348993e+01, -2.315024295901514e+01, -2.315084500636693e+01, -2.315084500636693e+01, -3.769075389542397e+00, -3.769083299693068e+00, -3.769455875749866e+00, -3.769612801087108e+00, -3.769095513807165e+00, -3.769095513807165e+00, -7.224846872961046e-01, -7.217430576025990e-01, -7.025217998416279e-01, -7.080527366500501e-01, -7.222141951864237e-01, -7.222141951864237e-01, -1.976489199344131e-01, -2.002806292985751e-01, -8.658956934377980e-01, -1.432953445988586e-01, -1.984383305511204e-01, -1.984383305511204e-01, -1.103881780739889e-02, -1.156264803243808e-02, -4.699716447627567e-02, -5.295681352562403e-03, -1.144215359496944e-02, -1.144215359496944e-02, -5.640907974999001e+00, -5.641911217637525e+00, -5.641013825304822e+00, -5.641793856371194e+00, -5.641417889551962e+00, -5.641417889551962e+00, -2.118859224928723e+00, -2.133788220170304e+00, -2.112824194070714e+00, -2.124475818194209e+00, -2.136778373134952e+00, -2.136778373134952e+00, -6.290055230290309e-01, -6.832571802278606e-01, -5.968635439116801e-01, -6.225448251257232e-01, -6.531731712216008e-01, -6.531731712216008e-01, -1.052803785013491e-01, -1.990649720562316e-01, -1.039309753294002e-01, -2.078234919303422e+00, -1.217397923372198e-01, -1.217397923372198e-01, -5.108674936031412e-03, -5.838380873499515e-03, -4.375896172519187e-03, -6.551479746938350e-02, -5.319670211271465e-03, -5.319670211271465e-03, -6.490544776377090e-01, -6.455894167083881e-01, -6.468315708277181e-01, -6.477898829813378e-01, -6.473102470231040e-01, -6.473102470231040e-01, -6.282237954497456e-01, -5.449813682059039e-01, -5.692575414700570e-01, -5.917705081691695e-01, -5.802990626204508e-01, -5.802990626204508e-01, -7.163944610230080e-01, -2.503730283402477e-01, -2.973589611400550e-01, -3.801560650744024e-01, -3.362322903072476e-01, -3.362322903072475e-01, -4.915390379279227e-01, -4.352767627932592e-02, -5.892633821256926e-02, -3.591864902326897e-01, -8.545171220136380e-02, -8.545171220136380e-02, -1.293740739132931e-02, -1.598447775707246e-03, -3.036468526966184e-03, -8.152275318517310e-02, -4.521015687740104e-03, -4.521015687740097e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_lp_a_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.086775428956626e+01, -3.086782921571194e+01, -3.086821865798658e+01, -3.086699061202019e+01, -3.086779334182257e+01, -3.086779334182257e+01, -5.025433852723195e+00, -5.025444399590758e+00, -5.025941167666488e+00, -5.026150401449478e+00, -5.025460685076220e+00, -5.025460685076220e+00, -9.633129163948061e-01, -9.623240768034654e-01, -9.366957331221705e-01, -9.440703155334002e-01, -9.629522602485650e-01, -9.629522602485650e-01, -2.635318932458841e-01, -2.670408390647668e-01, -1.154527591250397e+00, -1.910604594651448e-01, -2.645844407348272e-01, -2.645844407348272e-01, -1.471842374319852e-02, -1.541686404325078e-02, -6.266288596836755e-02, -7.060908470083204e-03, -1.525620479329259e-02, -1.525620479329259e-02, -7.521210633332001e+00, -7.522548290183367e+00, -7.521351767073096e+00, -7.522391808494926e+00, -7.521890519402617e+00, -7.521890519402617e+00, -2.825145633238298e+00, -2.845050960227072e+00, -2.817098925427619e+00, -2.832634424258945e+00, -2.849037830846603e+00, -2.849037830846603e+00, -8.386740307053745e-01, -9.110095736371475e-01, -7.958180585489067e-01, -8.300597668342976e-01, -8.708975616288011e-01, -8.708975616288011e-01, -1.403738380017988e-01, -2.654199627416421e-01, -1.385746337725336e-01, -2.770979892404562e+00, -1.623197231162931e-01, -1.623197231162931e-01, -6.811566581375216e-03, -7.784507831332686e-03, -5.834528230025583e-03, -8.735306329251133e-02, -7.092893615028619e-03, -7.092893615028619e-03, -8.654059701836120e-01, -8.607858889445175e-01, -8.624420944369575e-01, -8.637198439751170e-01, -8.630803293641387e-01, -8.630803293641387e-01, -8.376317272663274e-01, -7.266418242745386e-01, -7.590100552934094e-01, -7.890273442255594e-01, -7.737320834939345e-01, -7.737320834939345e-01, -9.551926146973440e-01, -3.338307044536636e-01, -3.964786148534067e-01, -5.068747534325365e-01, -4.483097204096634e-01, -4.483097204096634e-01, -6.553853839038969e-01, -5.803690170576790e-02, -7.856845095009235e-02, -4.789153203102530e-01, -1.139356162684851e-01, -1.139356162684851e-01, -1.724987652177241e-02, -2.131263700942994e-03, -4.048624702621579e-03, -1.086970042468975e-01, -6.028020916986806e-03, -6.028020916986797e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
