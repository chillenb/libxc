
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_gdsmfb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_gdsmfb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.997971556081872e+01, -1.997977095369025e+01, -1.998003431310348e+01, -1.997920982417555e+01, -1.997963941030734e+01, -1.997963941030734e+01, -3.329678626160650e+00, -3.329685644291784e+00, -3.329927530362894e+00, -3.330124419139875e+00, -3.329765632450341e+00, -3.329765632450341e+00, -6.878798637158843e-01, -6.871719745070228e-01, -6.700870813116072e-01, -6.752773447354276e-01, -6.752397455724224e-01, -6.752397455724224e-01, -1.988696519439818e-01, -2.016027915049070e-01, -7.948757575685881e-01, -1.552044092008118e-01, -1.821274713430294e-01, -1.821274713430294e-01, -9.376458160701259e-03, -9.839514127807951e-03, -4.740040551557727e-02, -5.574196566122961e-03, -6.970101129364904e-03, -6.970101129364904e-03, -4.944434198878496e+00, -4.945326056341850e+00, -4.944478622754826e+00, -4.945265906949371e+00, -4.944884470499252e+00, -4.944884470499252e+00, -1.905180691543266e+00, -1.918518933841401e+00, -1.895445030269840e+00, -1.907233352910104e+00, -1.917277735874347e+00, -1.917277735874347e+00, -6.070477050683221e-01, -6.558306201918825e-01, -5.649891330096048e-01, -5.856793660492080e-01, -6.167512011370576e-01, -6.167512011370576e-01, -1.119426124201044e-01, -1.990701616525155e-01, -1.044632018933798e-01, -1.870012141758336e+00, -1.292599829687525e-01, -1.292599829687525e-01, -4.351344097293432e-03, -5.455079625521845e-03, -4.221563348816229e-03, -7.321162300027460e-02, -5.057853667684175e-03, -5.057853667684175e-03, -6.097962939911654e-01, -6.065354300797873e-01, -6.076829749181536e-01, -6.086280458745117e-01, -6.081550019992938e-01, -6.081550019992938e-01, -5.943800076839033e-01, -5.157941600808449e-01, -5.383147571561143e-01, -5.606107104524659e-01, -5.492279328793933e-01, -5.492279328793933e-01, -6.854527241825746e-01, -2.458615488686899e-01, -2.902955189787861e-01, -3.742447958237766e-01, -3.293579474835535e-01, -3.293579474835535e-01, -4.778017502093198e-01, -4.554889395653023e-02, -6.022349318731408e-02, -3.619113771769137e-01, -9.093678944016950e-02, -9.093678944016953e-02, -1.294954499162172e-02, -1.528608545647077e-03, -3.135642281881076e-03, -8.592277850726147e-02, -4.694228260077243e-03, -4.694228260077241e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_gdsmfb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_gdsmfb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.660043331427344e+01, -2.660040007978754e+01, -2.660051855235160e+01, -2.660046251018445e+01, -2.660081058858880e+01, -2.660087254825403e+01, -2.659984088353976e+01, -2.659964429482328e+01, -2.660047966181936e+01, -2.660015072086894e+01, -2.660047966181936e+01, -2.660015072086894e+01, -4.413540060575162e+00, -4.413485069312315e+00, -4.413553304615418e+00, -4.413490510216048e+00, -4.413802418994237e+00, -4.413885399541214e+00, -4.414077725420294e+00, -4.414134297166556e+00, -4.412874068751799e+00, -4.414381870815725e+00, -4.412874068751799e+00, -4.414381870815725e+00, -9.011490644287198e-01, -9.038633075160870e-01, -8.999010598713070e-01, -9.032305526014744e-01, -8.812539013091182e-01, -8.766589295321088e-01, -8.851159669417533e-01, -8.865679442234438e-01, -9.055868651691402e-01, -8.618373543730989e-01, -9.055868651691402e-01, -8.618373543730989e-01, -2.558973792113455e-01, -2.609781241303191e-01, -2.590184780461556e-01, -2.649118462828616e-01, -1.030002672848620e+00, -1.056945431100283e+00, -2.009610852322661e-01, -2.022230890246088e-01, -2.456722650889077e-01, -1.897375841109226e-01, -2.456722650889076e-01, -1.897375841109224e-01, -1.229206575651968e-02, -1.234028157079132e-02, -1.289099934296526e-02, -1.294904982432704e-02, -6.129540142163200e-02, -6.197236257361659e-02, -7.348136287593007e-03, -7.340399124562404e-03, -9.213376888481076e-03, -8.954802507818466e-03, -9.213376888481074e-03, -8.954802507818466e-03, -6.564473018339965e+00, -6.563007060548743e+00, -6.565680359928955e+00, -6.564175443492868e+00, -6.564545825306280e+00, -6.563052571343282e+00, -6.565583318328916e+00, -6.564112282157244e+00, -6.565086236169631e+00, -6.563593268253015e+00, -6.565086236169631e+00, -6.563593268253015e+00, -2.518215557397431e+00, -2.518104128329178e+00, -2.536196169244871e+00, -2.535591377243814e+00, -2.503316430088767e+00, -2.507105651626562e+00, -2.518896525073234e+00, -2.522870806734649e+00, -2.539084643160520e+00, -2.529339212408341e+00, -2.539084643160520e+00, -2.529339212408341e+00, -7.964154107598876e-01, -7.948529026173944e-01, -8.599789481540583e-01, -8.602728972537789e-01, -7.298318904376081e-01, -7.492902835011842e-01, -7.577548589732579e-01, -7.761742328692592e-01, -8.226489537277339e-01, -7.919968168608487e-01, -8.226489537277339e-01, -7.919968168608487e-01, -1.450582252976362e-01, -1.455811595849573e-01, -2.585007638546515e-01, -2.591653794080403e-01, -1.342340113500606e-01, -1.368045494983434e-01, -2.471887870256500e+00, -2.470917052190055e+00, -1.656816659950276e-01, -1.696664907370281e-01, -1.656816659950276e-01, -1.696664907370281e-01, -5.732561863950539e-03, -5.747018003118354e-03, -7.184749775024119e-03, -7.191537768044984e-03, -5.558368689534204e-03, -5.579388187716857e-03, -9.499818680981613e-02, -9.516391012878737e-02, -6.576730968559778e-03, -6.701408863407860e-03, -6.576730968559776e-03, -6.701408863407859e-03, -7.981198811831813e-01, -8.004065180238473e-01, -7.938064121829680e-01, -7.961009303750693e-01, -7.953206797140639e-01, -7.976197079330332e-01, -7.965780809401332e-01, -7.988604630608884e-01, -7.959488195728244e-01, -7.982393013571898e-01, -7.959488195728244e-01, -7.982393013571898e-01, -7.779453686879078e-01, -7.798408633810018e-01, -6.740735490981086e-01, -6.761561207466192e-01, -7.037155094214351e-01, -7.059656167857199e-01, -7.333457183197473e-01, -7.352214897201317e-01, -7.182857273332355e-01, -7.202173996594453e-01, -7.182857273332355e-01, -7.202173996594453e-01, -8.987458765254098e-01, -8.998582525129090e-01, -3.195136672977472e-01, -3.205564734669528e-01, -3.771327755671885e-01, -3.794017287545667e-01, -4.876965841141883e-01, -4.894579607019451e-01, -4.296171996806077e-01, -4.295220400896687e-01, -4.296171996806077e-01, -4.295220400896686e-01, -6.234832216442321e-01, -6.264857158482602e-01, -5.922109637707594e-02, -5.930004191335429e-02, -7.793054477968554e-02, -7.856153975172279e-02, -4.700249679793878e-01, -4.745990279877117e-01, -1.169193672604754e-01, -1.190419683320635e-01, -1.169193672604755e-01, -1.190419683320636e-01, -1.695526133559972e-02, -1.699958064046706e-02, -2.024554873697413e-03, -2.024970694237306e-03, -4.132560911298240e-03, -4.150785454393123e-03, -1.112614980080336e-01, -1.118382852364709e-01, -6.114846870329852e-03, -6.221537905880597e-03, -6.114846870329852e-03, -6.221537905880594e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
