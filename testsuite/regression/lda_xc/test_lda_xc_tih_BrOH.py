
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_tih_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_tih", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -4.930092170614897e+00, -4.930097652017534e+00, -4.930355824373853e+00, -4.930464559775797e+00, -4.930106115873773e+00, -4.930106115873773e+00, -1.071367796524623e+00, -1.070873170589210e+00, -1.057814868157374e+00, -1.061625073923220e+00, -1.071187460151660e+00, -1.071187460151660e+00, -4.299531337521767e-01, -4.315666503918837e-01, -1.166449990673702e+00, -4.049286361353949e-01, -4.304329474976593e-01, -4.304329474976593e-01, -3.892012108680966e-01, -3.892022926580467e-01, -3.897532553250653e-01, -3.891947617452625e-01, -3.892020349017987e-01, -3.892020349017987e-01, -6.127188248554111e+00, -6.127900062319251e+00, -6.127263343275384e+00, -6.127816784813842e+00, -6.127550019861096e+00, -6.127550019861096e+00, -3.064293872164397e+00, -3.088179022358468e+00, -3.054602375756796e+00, -3.073294489711911e+00, -3.092948474686423e+00, -3.092948474686423e+00, -1.000069365067767e+00, -1.044112375518810e+00, -9.684562125007286e-01, -9.941000466007235e-01, -1.020900161065456e+00, -1.020900161065456e+00, -3.954637341678367e-01, -4.308163743809242e-01, -3.952264333516879e-01, -2.998614297325191e+00, -3.988717144730630e-01, -3.988717144730630e-01, -3.891946799104488e-01, -3.891950338993369e-01, -3.891944129321300e-01, -3.907083630462219e-01, -3.891947726718228e-01, -3.891947726718228e-01, -1.017504700680952e+00, -1.014601491520210e+00, -1.015647235511707e+00, -1.016450182503968e+00, -1.016048722241607e+00, -1.016048722241607e+00, -9.993567031256905e-01, -9.061396297882175e-01, -9.371254090692160e-01, -9.629810225499855e-01, -9.501482190994637e-01, -9.501482190994637e-01, -1.067287941649258e+00, -4.702152516949246e-01, -5.207780646133008e-01, -6.405081378147696e-01, -5.727273858188159e-01, -5.727273858188157e-01, -8.272525369244560e-01, -3.896383325802496e-01, -3.902961060326607e-01, -6.071349098124071e-01, -3.925512885984105e-01, -3.925512885984105e-01, -3.892056316615407e-01, -3.891939833530139e-01, -3.891941122283496e-01, -3.921097887687942e-01, -3.891944593673406e-01, -3.891944593673406e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
