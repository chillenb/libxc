
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_1d_ehwlrg_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.533235637161949e+10, -9.533418777171828e+10, -9.534370730202328e+10, -9.531369175501451e+10, -9.533331091182803e+10, -9.533331091182803e+10, -5.387085994520698e+04, -5.387176177125980e+04, -5.391425359634514e+04, -5.393215947352238e+04, -5.387315431246763e+04, -5.387315431246763e+04, -3.443619684052163e-01, -3.440307752633086e-01, -3.356531682433969e-01, -3.380310548647963e-01, -3.442410860852629e-01, -3.442410860852629e-01, -4.727019371562474e-02, -4.845814157622296e-02, -4.577719345235230e-01, -2.573783344656581e-02, -4.762518416854090e-02, -4.762518416854090e-02, -1.913062292452032e-04, -2.090580359769650e-04, -3.060903770016594e-03, -4.689888954706873e-05, -2.049080845555708e-04, -2.049080845555708e-04, -1.329136395684819e+06, -1.331012751098777e+06, -1.329334257496501e+06, -1.330793132035497e+06, -1.330089795357823e+06, -1.330089795357823e+06, -5.132084008680118e+02, -5.438317855285031e+02, -5.012588380077271e+02, -5.245498476329593e+02, -5.501516366979239e+02, -5.501516366979239e+02, -3.036256941427911e-01, -3.274594806334095e-01, -2.880729104042931e-01, -3.006054491434971e-01, -3.145199151968651e-01, -3.145199151968651e-01, -1.430681755303890e-02, -4.790780215298097e-02, -1.395888019323236e-02, -4.373002483666947e+02, -1.887329440360408e-02, -1.887329440360408e-02, -4.378024487473457e-05, -5.652750425174172e-05, -3.255205778547054e-05, -5.779038305319891e-03, -4.730635433619581e-05, -4.730635433619581e-05, -3.127033948793329e-01, -3.111635042999508e-01, -3.117167965980025e-01, -3.121426780657660e-01, -3.119296296212811e-01, -3.119296296212811e-01, -3.032628952772832e-01, -2.599793405633620e-01, -2.735907178600594e-01, -2.854815101779595e-01, -2.795116785168388e-01, -2.795116785168389e-01, -3.416630708808197e-01, -7.339158845784473e-02, -1.003050006811335e-01, -1.534389571120464e-01, -1.245717458126207e-01, -1.245717458126207e-01, -2.274397814100572e-01, -2.643117084680857e-03, -4.718534887074727e-03, -1.395165137455328e-01, -9.604144615436966e-03, -9.604144615436967e-03, -2.592091922418925e-04, -4.736473199510150e-06, -1.617447093843805e-05, -8.777879319414176e-03, -3.464957544692371e-05, -3.464957544692361e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_1d_ehwlrg_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.468277160952479e+11, -3.468343788314370e+11, -3.468690114161393e+11, -3.467598131740504e+11, -3.468311887660181e+11, -3.468311887660181e+11, -1.971056191812524e+05, -1.971089117804793e+05, -1.972640508719502e+05, -1.973294257861713e+05, -1.971139959981713e+05, -1.971139959981713e+05, -4.520326047509535e-01, -4.513465630671866e-01, -4.359391626349066e-01, -4.399422372416632e-01, -4.517815089113088e-01, -4.517815089113088e-01, -7.684882719933901e-02, -7.875610147228873e-02, -8.831203312111646e-01, -4.203815569475529e-02, -7.741893324280530e-02, -7.741893324280530e-02, -3.133591940859187e-04, -3.424365487580606e-04, -5.013254869897791e-03, -7.682036999661192e-05, -3.356389541283654e-04, -3.356389541283654e-04, -4.843683788888904e+06, -4.850517244877254e+06, -4.844404377491584e+06, -4.849717419420247e+06, -4.847155953899561e+06, -4.847155953899561e+06, -1.925958041994776e+03, -2.039627235471730e+03, -1.881589644759507e+03, -1.968061395204465e+03, -2.063079592033549e+03, -2.063079592033549e+03, -4.008368517678979e-01, -4.241315963742842e-01, -3.885998604364760e-01, -3.984251668355220e-01, -4.101675800501029e-01, -4.101675800501029e-01, -2.340801159411129e-02, -7.787271256410495e-02, -2.283971936033235e-02, -1.643971101422777e+03, -3.086029855497687e-02, -3.086029855497687e-02, -7.171203181786904e-05, -9.259203406624964e-05, -5.332026631300362e-05, -9.463479391106724e-03, -7.748779707233310e-05, -7.748779707233310e-05, -4.085100717957381e-01, -4.071440853179343e-01, -4.076310708821638e-01, -4.080087881900609e-01, -4.078195147556461e-01, -4.078195147556461e-01, -4.005447379026701e-01, -3.648024001509179e-01, -3.768146360995708e-01, -3.865480679634047e-01, -3.817367419725793e-01, -3.817367419725793e-01, -4.466163071563417e-01, -1.183891833108700e-01, -1.601303186374165e-01, -2.381405350330102e-01, -1.965905672387812e-01, -1.965905672387811e-01, -3.318056828632673e-01, -4.329078987328179e-03, -7.727424155987742e-03, -2.183756345139708e-01, -1.572205569992353e-02, -1.572205569992353e-02, -4.245837638707031e-04, -7.758343070021045e-06, -2.649378267670732e-05, -1.437060061058763e-02, -5.675599948786215e-05, -5.675599948786198e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
