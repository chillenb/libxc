
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_corrksdt_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_corrksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.997637379801041e+01, -1.997642918511089e+01, -1.997669251721692e+01, -1.997586811324168e+01, -1.997629765383607e+01, -1.997629765383607e+01, -3.328735218220900e+00, -3.328742234616506e+00, -3.328984063545020e+00, -3.329180906376276e+00, -3.328821992861061e+00, -3.328821992861061e+00, -6.876983416462590e-01, -6.869886684858834e-01, -6.699040946202256e-01, -6.751032141786771e-01, -6.739976746297422e-01, -6.739976746297422e-01, -1.987833489818601e-01, -2.014926968759961e-01, -7.943262929879614e-01, -1.551930097273115e-01, -1.722089423506208e-01, -1.722089423506208e-01, -9.372730237211064e-03, -9.835360504718041e-03, -4.738689702918256e-02, -5.571973855820387e-03, -6.923095856155226e-03, -6.923095856155226e-03, -4.943142582834902e+00, -4.944034255809916e+00, -4.943186992925528e+00, -4.943974124557708e+00, -4.943592759994668e+00, -4.943592759994668e+00, -1.904607267090953e+00, -1.917941592125620e+00, -1.894871974525314e+00, -1.906656654167787e+00, -1.916684779706237e+00, -1.916684779706237e+00, -6.068978495809253e-01, -6.556646368087675e-01, -5.645929874188560e-01, -5.853133145578661e-01, -6.160134004027903e-01, -6.160134004027903e-01, -1.119413409163421e-01, -1.990551722711370e-01, -1.044139951876837e-01, -1.869448770706576e+00, -1.291729399679393e-01, -1.291729399679393e-01, -4.349226074407533e-03, -5.452890096839818e-03, -4.219235314942473e-03, -7.321303236170845e-02, -5.041968267629472e-03, -5.041968267629472e-03, -6.096436904546300e-01, -6.063839606415353e-01, -6.075310852129163e-01, -6.084758692379445e-01, -6.080029697283166e-01, -6.080029697283166e-01, -5.942339392133594e-01, -5.156753913036145e-01, -5.381875326048329e-01, -5.604767160016992e-01, -5.490978269701088e-01, -5.490978269701088e-01, -6.852754231173114e-01, -2.458336325146137e-01, -2.902484318511969e-01, -3.741754110423539e-01, -3.293070479378074e-01, -3.293070479378074e-01, -4.776922132344764e-01, -4.554881791243459e-02, -6.021697033367027e-02, -3.618241207767183e-01, -9.089534186815250e-02, -9.089534186815253e-02, -1.294621809928682e-02, -1.527671863861290e-03, -3.133656954562216e-03, -8.592111429233801e-02, -4.681498302398162e-03, -4.681498302398157e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_corrksdt_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_corrksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.659638869906056e+01, -2.659646252658834e+01, -2.659681353175452e+01, -2.659571465301260e+01, -2.659628720365653e+01, -2.659628720365653e+01, -4.412314337399860e+00, -4.412323677949082e+00, -4.412645611784417e+00, -4.412907658078149e+00, -4.412429855802606e+00, -4.412429855802606e+00, -9.022538430694096e-01, -9.013150696677219e-01, -8.787173782846300e-01, -8.855937770584501e-01, -8.841315476408872e-01, -8.841315476408872e-01, -2.584511574594222e-01, -2.619906807943334e-01, -1.043379294857044e+00, -2.015828831235317e-01, -2.237637097913034e-01, -2.237637097913034e-01, -1.231401266458041e-02, -1.291808290296851e-02, -6.164169128276360e-02, -7.341796552427451e-03, -9.111510801583603e-03, -9.111510801583603e-03, -6.562126489691268e+00, -6.563314145690500e+00, -6.562185641316685e+00, -6.563234054389389e+00, -6.562726099183118e+00, -6.562726099183118e+00, -2.517408929951611e+00, -2.535138185339473e+00, -2.504465163570813e+00, -2.520133761458514e+00, -2.533467117909662e+00, -2.533467117909662e+00, -7.954186382308835e-01, -8.598862412088955e-01, -7.395273340413936e-01, -7.668979160494432e-01, -8.074659719149131e-01, -8.074659719149131e-01, -1.453185417758924e-01, -2.588062461694422e-01, -1.355442374079020e-01, -2.470664140804417e+00, -1.677138362783839e-01, -1.677138362783839e-01, -5.737694741825575e-03, -7.185685812673583e-03, -5.567000648859515e-03, -9.508350877429321e-02, -6.646814084398218e-03, -6.646814084398218e-03, -7.990474554005953e-01, -7.947395135016517e-01, -7.962554907931617e-01, -7.975040832896579e-01, -7.968791143853637e-01, -7.968791143853637e-01, -7.786841518699559e-01, -6.749443389691880e-01, -7.046594164893376e-01, -7.340909333590130e-01, -7.190645084361726e-01, -7.190645084361726e-01, -8.990487756459763e-01, -3.199902642675864e-01, -3.782067971879866e-01, -4.884750801545874e-01, -4.294863552829554e-01, -4.294863552829553e-01, -6.248349974036211e-01, -5.926207677624380e-02, -7.825199968836669e-02, -4.722288213834858e-01, -1.180032801919246e-01, -1.180032801919247e-01, -1.697500901710712e-02, -2.023591932627388e-03, -4.140109349376674e-03, -1.115531226564008e-01, -6.173861954001712e-03, -6.173861954001703e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
