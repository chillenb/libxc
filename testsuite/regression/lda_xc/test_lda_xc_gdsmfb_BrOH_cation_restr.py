
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_gdsmfb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_gdsmfb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.997971556080267e+01, -1.997977095364461e+01, -1.998003431304771e+01, -1.997920982361400e+01, -1.997963940873517e+01, -1.997963940873517e+01, -3.329678625879284e+00, -3.329685643924903e+00, -3.329927529722271e+00, -3.330124418842146e+00, -3.329765420925713e+00, -3.329765420925713e+00, -6.878758371959214e-01, -6.871659081541726e-01, -6.700751703622053e-01, -6.752761664544494e-01, -6.741702279316574e-01, -6.741702279316574e-01, -1.987970350610192e-01, -2.015070109314999e-01, -7.945420296557462e-01, -1.551979237832234e-01, -1.722169571774602e-01, -1.722169571774602e-01, -9.375363006084998e-03, -9.838021076321717e-03, -4.738660148352914e-02, -5.574147822545997e-03, -6.925487128166017e-03, -6.925487128166017e-03, -4.944434067180243e+00, -4.945325917576914e+00, -4.944478486107750e+00, -4.945265774360458e+00, -4.944884333916275e+00, -4.944884333916275e+00, -1.905180689431715e+00, -1.918518872112239e+00, -1.895442574723115e+00, -1.907230669986536e+00, -1.917261696478896e+00, -1.917261696478896e+00, -6.070461517445706e-01, -6.558305701606112e-01, -5.647259988542549e-01, -5.854538121265324e-01, -6.161649992561001e-01, -6.161649992561001e-01, -1.119407513798050e-01, -1.990689209690034e-01, -1.044128645664556e-01, -1.870011978162802e+00, -1.291740848417409e-01, -1.291740848417409e-01, -4.351135659436890e-03, -5.455041394352691e-03, -4.221112329829519e-03, -7.321124206321887e-02, -5.044036462019434e-03, -5.044036462019434e-03, -6.097929856596096e-01, -6.065320769577034e-01, -6.076796163866311e-01, -6.086247420951425e-01, -6.081516715599945e-01, -6.081516715599945e-01, -5.943776618550448e-01, -5.157907840618335e-01, -5.383110207885687e-01, -5.606082413985392e-01, -5.492252470493668e-01, -5.492252470493668e-01, -6.854520449979352e-01, -2.458592912307754e-01, -2.902870286077340e-01, -3.742411538302470e-01, -3.293579348929281e-01, -3.293579348929281e-01, -4.777940237922684e-01, -4.554869209166415e-02, -6.021570860002851e-02, -3.618857102226327e-01, -9.089360029346270e-02, -9.089360029346272e-02, -1.294895367882990e-02, -1.528608189660243e-03, -3.135222192387443e-03, -8.591927067877053e-02, -4.683487010971131e-03, -4.683487010971128e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_gdsmfb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_gdsmfb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.660041669704112e+01, -2.660049053129826e+01, -2.660084156845837e+01, -2.659974258955357e+01, -2.660031519238579e+01, -2.660031519238579e+01, -4.413512565127593e+00, -4.413521907655464e+00, -4.413843909686330e+00, -4.414106011487972e+00, -4.413628108000977e+00, -4.413628108000977e+00, -9.025086971678850e-01, -9.015695894165840e-01, -8.789638338352240e-01, -8.858426897242809e-01, -8.843799380473621e-01, -8.843799380473621e-01, -2.584785794501238e-01, -2.620191117146915e-01, -1.043683779546097e+00, -2.015956141453571e-01, -2.237817939042315e-01, -2.237817939042315e-01, -1.231683815913732e-02, -1.292091235384625e-02, -6.164010618265072e-02, -7.344302858521927e-03, -9.114199365169967e-03, -9.114199365169967e-03, -6.563740125926492e+00, -6.564927992833693e+00, -6.563799288056667e+00, -6.564847887310242e+00, -6.564339841901194e+00, -6.564339841901194e+00, -2.518159844228833e+00, -2.535893813170655e+00, -2.505212628659779e+00, -2.520885400981475e+00, -2.534222301998855e+00, -2.534222301998855e+00, -7.956351189037357e-01, -8.601259538282563e-01, -7.397235091040429e-01, -7.671040521151310e-01, -8.076868105332622e-01, -8.076868105332622e-01, -1.453206556344876e-01, -2.588337689520763e-01, -1.355450558984603e-01, -2.471402566973668e+00, -1.677195858805084e-01, -1.677195858805084e-01, -5.739947253220559e-03, -7.188171478364221e-03, -5.569220219730996e-03, -9.508123213117411e-02, -6.649222098437105e-03, -6.649222098437105e-03, -7.992652495005702e-01, -7.949557482981952e-01, -7.964722744166000e-01, -7.977213188548347e-01, -7.970961237457305e-01, -7.970961237457305e-01, -7.788945674222866e-01, -6.751169057575902e-01, -7.048428611691545e-01, -7.342851263908077e-01, -7.192532174664260e-01, -7.192532174664260e-01, -8.993024880219997e-01, -3.200363707454431e-01, -3.782722268396881e-01, -4.885794550895166e-01, -4.295696273491230e-01, -4.295696273491230e-01, -6.249891842746498e-01, -5.926065968670043e-02, -7.824967708535566e-02, -4.723273393628554e-01, -1.180022789163280e-01, -1.180022789163280e-01, -1.697773359871370e-02, -2.024763060403245e-03, -4.141999838620190e-03, -1.115516293472896e-01, -6.176193120545093e-03, -6.176193120545088e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
