
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_lp_a_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.315140993763966e+01, -2.315147450393293e+01, -2.315178147754230e+01, -2.315082044676096e+01, -2.315132117424477e+01, -2.315132117424477e+01, -3.769249384989781e+00, -3.769257520542456e+00, -3.769537922698775e+00, -3.769766163290155e+00, -3.769350000711824e+00, -3.769350000711824e+00, -7.270148792736137e-01, -7.262133244693377e-01, -7.069253580672472e-01, -7.127932470668286e-01, -7.115453700821855e-01, -7.115453700821855e-01, -1.877233726979945e-01, -1.905664349051058e-01, -8.477360048380925e-01, -1.425159318087024e-01, -1.600339886438989e-01, -1.600339886438989e-01, -6.534853966058660e-03, -6.878204440624953e-03, -3.794776546174807e-02, -3.774082435630101e-03, -4.742423452574048e-03, -4.742423452574048e-03, -5.643369077981572e+00, -5.644405127321444e+00, -5.643420678769762e+00, -5.644335259816012e+00, -5.643892146049965e+00, -5.643892146049965e+00, -2.121231043338959e+00, -2.136617388254106e+00, -2.109998378430853e+00, -2.123595729448253e+00, -2.135167111788373e+00, -2.135167111788373e+00, -6.359469704245679e-01, -6.908623823215171e-01, -5.884430929135307e-01, -6.116929855100658e-01, -6.461998512674877e-01, -6.461998512674877e-01, -9.894659301351473e-02, -1.880084550819831e-01, -9.153804200363738e-02, -2.080668074788648e+00, -1.161171311827102e-01, -1.161171311827102e-01, -2.911955759834265e-03, -3.689499478152733e-03, -2.821168646030645e-03, -6.156682442092640e-02, -3.398633537741433e-03, -3.398633537741433e-03, -6.390347973008430e-01, -6.353691369618653e-01, -6.366590267316156e-01, -6.377214630589845e-01, -6.371896663819857e-01, -6.371896663819857e-01, -6.217127425181659e-01, -5.336956060574293e-01, -5.588645603871003e-01, -5.838283496981322e-01, -5.710787694840254e-01, -5.710787694840254e-01, -7.242783796953985e-01, -2.375370567733134e-01, -2.852696467477608e-01, -3.768015625021612e-01, -3.276818679200859e-01, -3.276818679200859e-01, -4.913418204167324e-01, -3.632082923757717e-02, -4.951760775057971e-02, -3.632423706513426e-01, -7.839414084137093e-02, -7.839414084137093e-02, -9.222685586349616e-03, -9.862268471286810e-04, -2.070133786885994e-03, -7.361545033212066e-02, -3.144799121466611e-03, -3.144799121466609e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_lp_a_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.086854658351955e+01, -3.086863267191058e+01, -3.086904197005641e+01, -3.086776059568129e+01, -3.086842823232637e+01, -3.086842823232637e+01, -5.025665846653042e+00, -5.025676694056608e+00, -5.026050563598368e+00, -5.026354884386874e+00, -5.025800000949099e+00, -5.025800000949099e+00, -9.693531723648183e-01, -9.682844326257837e-01, -9.425671440896630e-01, -9.503909960891047e-01, -9.487271601095807e-01, -9.487271601095807e-01, -2.502978302639926e-01, -2.540885798734744e-01, -1.130314673117457e+00, -1.900212424116032e-01, -2.133786515251985e-01, -2.133786515251985e-01, -8.713138621411548e-03, -9.170939254166604e-03, -5.059702061566410e-02, -5.032109914173469e-03, -6.323231270098730e-03, -6.323231270098730e-03, -7.524492103975430e+00, -7.525873503095259e+00, -7.524560905026349e+00, -7.525780346421350e+00, -7.525189528066620e+00, -7.525189528066620e+00, -2.828308057785279e+00, -2.848823184338809e+00, -2.813331171241137e+00, -2.831460972597670e+00, -2.846889482384497e+00, -2.846889482384497e+00, -8.479292938994238e-01, -9.211498430953561e-01, -7.845907905513743e-01, -8.155906473467543e-01, -8.615998016899836e-01, -8.615998016899836e-01, -1.319287906846863e-01, -2.506779401093109e-01, -1.220507226715165e-01, -2.774224099718197e+00, -1.548228415769470e-01, -1.548228415769470e-01, -3.882607679779020e-03, -4.919332637536977e-03, -3.761558194707527e-03, -8.208909922790186e-02, -4.531511383655245e-03, -4.531511383655245e-03, -8.520463964011240e-01, -8.471588492824870e-01, -8.488787023088208e-01, -8.502952840786460e-01, -8.495862218426476e-01, -8.495862218426476e-01, -8.289503233575546e-01, -7.115941414099057e-01, -7.451527471828004e-01, -7.784377995975097e-01, -7.614383593120339e-01, -7.614383593120339e-01, -9.657045062605314e-01, -3.167160756977512e-01, -3.803595289970144e-01, -5.024020833362149e-01, -4.369091572267812e-01, -4.369091572267812e-01, -6.551224272223100e-01, -4.842777231676956e-02, -6.602347700077295e-02, -4.843231608684568e-01, -1.045255211218279e-01, -1.045255211218279e-01, -1.229691411513282e-02, -1.314969129504908e-03, -2.760178382514658e-03, -9.815393377616088e-02, -4.193065495288815e-03, -4.193065495288812e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
