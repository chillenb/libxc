
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_lp_b_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.529215359413492e+01, -1.529218041477104e+01, -1.529230792988799e+01, -1.529190871890185e+01, -1.529211672200792e+01, -1.529211672200792e+01, -3.611879529849167e+00, -3.611886642393771e+00, -3.612131783632686e+00, -3.612331320327648e+00, -3.611967493420971e+00, -3.611967493420971e+00, -7.497004541072904e-01, -7.488889099815835e-01, -7.293507458227076e-01, -7.352967482989515e-01, -7.340324058007263e-01, -7.340324058007263e-01, -1.962293579083081e-01, -1.991868770640296e-01, -8.715554700576151e-01, -1.491445514675064e-01, -1.674029196968685e-01, -1.674029196968685e-01, -6.862499045675167e-03, -7.223001253093412e-03, -3.981851684374158e-02, -3.963586581604000e-03, -4.980427000485817e-03, -4.980427000485817e-03, -5.181911529121171e+00, -5.182743206229097e+00, -5.181952951989829e+00, -5.182687122072111e+00, -5.182331421007013e+00, -5.182331421007013e+00, -2.113673361721847e+00, -2.128213045538003e+00, -2.103051959862984e+00, -2.115908630350228e+00, -2.126843034815589e+00, -2.126843034815589e+00, -6.572888596317407e-01, -7.130649980726516e-01, -6.089163261137652e-01, -6.326057778654577e-01, -6.677141036949010e-01, -6.677141036949010e-01, -1.036634470498545e-01, -1.965259364779159e-01, -9.591979292670993e-02, -2.075290532117337e+00, -1.215994311528652e-01, -1.215994311528652e-01, -3.058238017849410e-03, -3.874764899496863e-03, -2.962897064291679e-03, -6.456311822866949e-02, -3.569319806485325e-03, -3.569319806485325e-03, -6.604291608050223e-01, -6.567011524785541e-01, -6.580130597221212e-01, -6.590935673059927e-01, -6.585527323589569e-01, -6.585527323589569e-01, -6.428064444575475e-01, -5.530243786396765e-01, -5.787385739089140e-01, -6.042110466123545e-01, -5.912056622206231e-01, -5.912056622206231e-01, -7.469297169221036e-01, -2.479867911667878e-01, -2.974595031315614e-01, -3.919947170192470e-01, -3.413177213954836e-01, -3.413177213954836e-01, -5.096795198908758e-01, -3.811295480449601e-02, -5.194342632377889e-02, -3.780182052292180e-01, -8.217418491327225e-02, -8.217418491327226e-02, -9.684430025940150e-03, -1.035820846955221e-03, -2.174173720332729e-03, -7.717445484289108e-02, -3.302758678178116e-03, -3.302758678178114e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_lp_b_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_lp_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.849783131737291e+01, -1.849786044255341e+01, -1.849799891415836e+01, -1.849756540086858e+01, -1.849779127701520e+01, -1.849779127701520e+01, -4.710307648157770e+00, -4.710316715922184e+00, -4.710629245342862e+00, -4.710883633025657e+00, -4.710419792626637e+00, -4.710419792626637e+00, -9.950539497370461e-01, -9.939817290044876e-01, -9.681644823453353e-01, -9.760220366648664e-01, -9.743512746384970e-01, -9.743512746384970e-01, -2.613276536045945e-01, -2.652615523166004e-01, -1.155929176520405e+00, -1.986794604681359e-01, -2.229771975954866e-01, -2.229771975954866e-01, -9.149617766040499e-03, -9.630246299119570e-03, -5.307852992610935e-02, -5.284655024118528e-03, -6.640368679121683e-03, -6.640368679121683e-03, -6.691997021384589e+00, -6.693036193160187e+00, -6.692048779086940e+00, -6.692966116949365e+00, -6.692521673266524e+00, -6.692521673266524e+00, -2.782090805781773e+00, -2.800978131321316e+00, -2.768291241093493e+00, -2.784994684689753e+00, -2.799198607315734e+00, -2.799198607315734e+00, -8.728902919381535e-01, -9.466401787361290e-01, -8.088890529565528e-01, -8.402370713433327e-01, -8.866788745415486e-01, -8.866788745415486e-01, -1.381309997728154e-01, -2.617221494209522e-01, -1.278186298114170e-01, -2.732214348695447e+00, -1.620129615323832e-01, -1.620129615323832e-01, -4.077575031728438e-03, -5.166231746611291e-03, -3.950458404127524e-03, -8.605043779715610e-02, -4.758990015952173e-03, -4.758990015952173e-03, -8.770438859611770e-01, -8.721129293726495e-01, -8.738481865634908e-01, -8.752773509576904e-01, -8.745620024401888e-01, -8.745620024401888e-01, -8.537327165434078e-01, -7.348918075289094e-01, -7.689419803649088e-01, -8.026615221086693e-01, -7.854467743673199e-01, -7.854467743673199e-01, -9.913931783786831e-01, -3.301515771840399e-01, -3.958969029377243e-01, -5.214166060250719e-01, -4.541478975334118e-01, -4.541478975334118e-01, -6.774712827264116e-01, -5.080552242609724e-02, -6.923607558612477e-02, -5.028683159032183e-01, -1.095109554020603e-01, -1.095109554020603e-01, -1.291181467740438e-02, -1.381085783284602e-03, -2.898860054910656e-03, -1.028510934712012e-01, -4.403589996613977e-03, -4.403589996613973e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
