
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_zlp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.486691730463953e+01, -1.486694105922885e+01, -1.486706452744830e+01, -1.486667518621272e+01, -1.486692968577350e+01, -1.486692968577350e+01, -3.529477220535270e+00, -3.529483826369296e+00, -3.529794964764384e+00, -3.529926011389336e+00, -3.529494026474477e+00, -3.529494026474477e+00, -7.507828057658744e-01, -7.500366051565025e-01, -7.306815345199101e-01, -7.362540103105699e-01, -7.505106516045147e-01, -7.505106516045147e-01, -2.107565366695026e-01, -2.135306791839633e-01, -8.942682621081846e-01, -1.532872573866871e-01, -2.115887516814076e-01, -2.115887516814076e-01, -1.191671243195531e-02, -1.248162707477157e-02, -5.059183955265233e-02, -5.719846903606780e-03, -1.235168648432882e-02, -1.235168648432882e-02, -5.023029542521911e+00, -5.023795266374838e+00, -5.023110334294744e+00, -5.023705692313110e+00, -5.023418738598386e+00, -5.023418738598386e+00, -2.088257107138851e+00, -2.101910713707919e+00, -2.082734155750759e+00, -2.093395316946776e+00, -2.104643939033902e+00, -2.104643939033902e+00, -6.563772445246954e-01, -7.112529899017347e-01, -6.237506691801724e-01, -6.498260643258468e-01, -6.808527299444365e-01, -6.808527299444365e-01, -1.128876956153813e-01, -2.122493228928103e-01, -1.114503944212767e-01, -2.051040867321112e+00, -1.304010887698392e-01, -1.304010887698392e-01, -5.517961374825573e-03, -6.305687470578523e-03, -4.726812676101827e-03, -7.043374759660180e-02, -5.745743932630078e-03, -5.745743932630078e-03, -6.766849780398112e-01, -6.731775637046833e-01, -6.744350143100557e-01, -6.754050407729184e-01, -6.749195512431603e-01, -6.749195512431603e-01, -6.555847532128600e-01, -5.709021657132014e-01, -5.956590628852605e-01, -6.185728961351862e-01, -6.069025633512281e-01, -6.069025633512281e-01, -7.446537430642640e-01, -2.661914798943778e-01, -3.153476894076346e-01, -4.014336689928029e-01, -3.558484168140884e-01, -3.558484168140884e-01, -5.162213998078553e-01, -4.686882480740407e-02, -6.337960250528131e-02, -3.796940247161543e-01, -9.174421311195681e-02, -9.174421311195681e-02, -1.396397915571082e-02, -1.727125596177015e-03, -3.280412225765300e-03, -8.754872935381357e-02, -4.883500255310918e-03, -4.883500255310911e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_zlp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.812902461445494e+01, -1.812905133749413e+01, -1.812919023458881e+01, -1.812875223973954e+01, -1.812903854277608e+01, -1.812903854277608e+01, -4.578673059008450e+00, -4.578681441236378e+00, -4.579076248045127e+00, -4.579242534080592e+00, -4.578694384280066e+00, -4.578694384280066e+00, -9.930882173631094e-01, -9.921075240731179e-01, -9.666662195690939e-01, -9.739917455767210e-01, -9.927305403695216e-01, -9.927305403695216e-01, -2.802147606754888e-01, -2.838944234595837e-01, -1.181458300934739e+00, -2.039396599142587e-01, -2.813186442101399e-01, -2.813186442101399e-01, -1.588508440223998e-02, -1.663795287481080e-02, -6.739837281857806e-02, -7.625491433452627e-03, -1.646478075309485e-02, -1.646478075309485e-02, -6.458201110915306e+00, -6.459156853235347e+00, -6.458301951971828e+00, -6.459045051300088e+00, -6.458686889067370e+00, -6.458686889067370e+00, -2.734496421199534e+00, -2.752117110321266e+00, -2.727367917874416e+00, -2.741127898047968e+00, -2.755644121604726e+00, -2.755644121604726e+00, -8.689259104189290e-01, -9.411207038859937e-01, -8.259726717641689e-01, -8.603029921450375e-01, -9.011336306278180e-01, -9.011336306278180e-01, -1.502641262095909e-01, -2.821948393670711e-01, -1.483536134915897e-01, -2.686451764405166e+00, -1.735385889706280e-01, -1.735385889706280e-01, -7.356374390928853e-03, -8.406416109341276e-03, -6.301739384454413e-03, -9.380572753304615e-02, -7.660012493523349e-03, -7.660012493523349e-03, -8.956500868861975e-01, -8.910350769729145e-01, -8.926896432172642e-01, -8.939659915731887e-01, -8.933271931142719e-01, -8.933271931142719e-01, -8.678828499285526e-01, -7.563494939182954e-01, -7.889718682534828e-01, -8.191540290873939e-01, -8.037832225954579e-01, -8.037832225954579e-01, -9.850327713959781e-01, -3.537062944531831e-01, -4.188086232584908e-01, -5.326794152007782e-01, -4.724031809566295e-01, -4.724031809566294e-01, -6.842494623656428e-01, -6.244194284599732e-02, -8.441898212789994e-02, -5.039397145093032e-01, -1.221530587453441e-01, -1.221530587453441e-01, -1.861343441384710e-02, -2.302733545646455e-03, -4.373543409190717e-03, -1.165733482990540e-01, -6.510613112107206e-03, -6.510613112107197e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
