
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_teter93_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_teter93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.996598763018500e+01, -1.996604293658783e+01, -1.996630588489364e+01, -1.996548268301778e+01, -1.996591159857303e+01, -1.996591159857303e+01, -3.339451133723763e+00, -3.339458156043012e+00, -3.339700186363135e+00, -3.339897192488945e+00, -3.339538196738853e+00, -3.339538196738853e+00, -6.892097548948229e-01, -6.884979697884570e-01, -6.713183344254730e-01, -6.765369980236573e-01, -6.765304065345009e-01, -6.765304065345009e-01, -1.986485633612972e-01, -2.013811440500998e-01, -7.968274945888318e-01, -1.550117902176646e-01, -1.820964125619062e-01, -1.820964125619062e-01, -9.380999231923818e-03, -9.843460482951363e-03, -4.725487351783220e-02, -5.574385602196225e-03, -6.955686943670203e-03, -6.955686943670203e-03, -4.953957954299963e+00, -4.954849174635229e+00, -4.954002346554232e+00, -4.954789068096251e+00, -4.954407904334659e+00, -4.954407904334659e+00, -1.912440934965082e+00, -1.925822653646344e+00, -1.902673297938655e+00, -1.914500378979317e+00, -1.924577795547666e+00, -1.924577795547666e+00, -6.079397336929617e-01, -6.569832037150173e-01, -5.656763545512398e-01, -5.864686140903737e-01, -6.177119278831660e-01, -6.177119278831660e-01, -1.117750933484900e-01, -1.988459800989488e-01, -1.042993390975200e-01, -1.877155479121715e+00, -1.290880301560789e-01, -1.290880301560789e-01, -4.346452916246052e-03, -5.454855366487184e-03, -4.215912882479902e-03, -7.304764950974305e-02, -5.048401960853754e-03, -5.048401960853754e-03, -6.107027134542471e-01, -6.074248476475630e-01, -6.085783690148268e-01, -6.095283661586213e-01, -6.090528558412103e-01, -6.090528558412103e-01, -5.952065935545318e-01, -5.162414086666324e-01, -5.388654113663754e-01, -5.612681446396847e-01, -5.498303153328137e-01, -5.498303153328137e-01, -6.867689613130188e-01, -2.456255432023630e-01, -2.900835269197728e-01, -3.741816378509999e-01, -3.291982735839560e-01, -3.291982735839560e-01, -4.780864797035266e-01, -4.540633972365012e-02, -6.006350208700716e-02, -3.618189287671646e-01, -9.077405557741448e-02, -9.077405557741448e-02, -1.294550566177130e-02, -1.512527227720788e-03, -3.124690988654146e-03, -8.575871353495161e-02, -4.684640548522085e-03, -4.684640548522082e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_teter93_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_teter93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.657637061659255e+01, -2.657633685569112e+01, -2.657645592786236e+01, -2.657639899801959e+01, -2.657674651875961e+01, -2.657680945982638e+01, -2.657578046049896e+01, -2.657558075790453e+01, -2.657641945373666e+01, -2.657608530254099e+01, -2.657641945373666e+01, -2.657608530254099e+01, -4.423959701339246e+00, -4.423903419311877e+00, -4.423973033183909e+00, -4.423908764863977e+00, -4.424220306691867e+00, -4.424305234947297e+00, -4.424495817147961e+00, -4.424553716725077e+00, -4.423275318347892e+00, -4.424818511626422e+00, -4.423275318347892e+00, -4.424818511626422e+00, -9.036309947946620e-01, -9.064400042102557e-01, -9.023664030803344e-01, -9.058121752760016e-01, -8.837189538127179e-01, -8.789622932957516e-01, -8.875172870026560e-01, -8.890202480463333e-01, -9.087310469525522e-01, -8.634769737230421e-01, -9.087310469525522e-01, -8.634769737230421e-01, -2.555334044899432e-01, -2.608224342591718e-01, -2.586372222535571e-01, -2.647720071050543e-01, -1.032938120638133e+00, -1.060775721350898e+00, -2.007078303759773e-01, -2.020198241276424e-01, -2.457176236175028e-01, -1.896843735449726e-01, -2.457176236175028e-01, -1.896843735449726e-01, -1.230028254958938e-02, -1.233688737147924e-02, -1.289775972108761e-02, -1.294317344219314e-02, -6.111164250428928e-02, -6.181305375010998e-02, -7.352518070662685e-03, -7.348690357288490e-03, -9.187602782370307e-03, -9.036376069893451e-03, -9.187602782370307e-03, -9.036376069893451e-03, -6.572856104317899e+00, -6.571358020828379e+00, -6.574062287229585e+00, -6.572524392392772e+00, -6.572929131341656e+00, -6.571403153551405e+00, -6.573964981430638e+00, -6.572461709232916e+00, -6.573468817630284e+00, -6.571943132631531e+00, -6.573468817630284e+00, -6.571943132631531e+00, -2.527486094731313e+00, -2.527371750663624e+00, -2.545509139605834e+00, -2.544888550787639e+00, -2.512509147454783e+00, -2.516397608095833e+00, -2.528119158739122e+00, -2.532197381666416e+00, -2.548513331259843e+00, -2.538513339767940e+00, -2.548513331259843e+00, -2.538513339767940e+00, -7.983177643341645e-01, -7.966986249126811e-01, -8.622423834052854e-01, -8.625467457654958e-01, -7.310051760669282e-01, -7.511788847785730e-01, -7.591150590906148e-01, -7.782054815796134e-01, -8.251276400737152e-01, -7.933836046100322e-01, -8.251276400737152e-01, -7.933836046100322e-01, -1.448705430936642e-01, -1.454126938315133e-01, -2.582286904935530e-01, -2.589207702392352e-01, -1.340157472003398e-01, -1.366776469219214e-01, -2.481071600303517e+00, -2.480075278866056e+00, -1.654093110929927e-01, -1.695425645954050e-01, -1.654093110929927e-01, -1.695425645954050e-01, -5.738765809600932e-03, -5.744331741268912e-03, -7.192515192571986e-03, -7.195803413321331e-03, -5.566188219336579e-03, -5.574025401720114e-03, -9.482953978290733e-02, -9.500101318357704e-02, -6.624049249528099e-03, -6.678874383973947e-03, -6.624049249528099e-03, -6.678874383973948e-03, -7.999745607546894e-01, -8.023439619889206e-01, -7.956346865482786e-01, -7.980123839886267e-01, -7.971581101480902e-01, -7.995404353135963e-01, -7.984234256697955e-01, -8.007884643416309e-01, -7.977902068229118e-01, -8.001636572121231e-01, -7.977902068229118e-01, -8.001636572121231e-01, -7.796833662309441e-01, -7.816479799258353e-01, -6.751953457153173e-01, -6.773568736783331e-01, -7.050056903526765e-01, -7.073401442764978e-01, -7.348163170871693e-01, -7.367616285256274e-01, -7.196663732115586e-01, -7.216700636190874e-01, -7.196663732115586e-01, -7.216700636190874e-01, -9.012361010437520e-01, -9.023873593745381e-01, -3.192644719203589e-01, -3.203510014170484e-01, -3.769576598530117e-01, -3.793214170117153e-01, -4.878891926254267e-01, -4.897221287880245e-01, -4.296327086395492e-01, -4.295336135159758e-01, -4.296327086395492e-01, -4.295336135159759e-01, -6.243082792735739e-01, -6.274268001438157e-01, -5.904947083014231e-02, -5.913135226261500e-02, -7.774858488892944e-02, -7.840162713909032e-02, -4.700952294358411e-01, -4.748559208643941e-01, -1.167170137472734e-01, -1.189129922458660e-01, -1.167170137472734e-01, -1.189129922458660e-01, -1.693858804641987e-02, -1.697842733741603e-02, -2.008889709963203e-03, -2.008945730038930e-03, -4.133677952292164e-03, -4.138642224884445e-03, -1.110872206491872e-01, -1.116841789784348e-01, -6.155810281974350e-03, -6.199444152186455e-03, -6.155810281974346e-03, -6.199444152186451e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
