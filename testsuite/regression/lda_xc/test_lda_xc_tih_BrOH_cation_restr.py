
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_tih_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_tih", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -7.069099000000000e+00, -4.930212740689077e+00, -4.930218378141468e+00, -4.930412675977340e+00, -4.930570823818233e+00, -4.930282460904630e+00, -4.930282460904630e+00, -1.074377191598038e+00, -1.073846158798847e+00, -1.060852270229329e+00, -1.064854649175319e+00, -1.064007532338251e+00, -1.064007532338251e+00, -4.242216112474230e-01, -4.258068005107419e-01, -1.153776831132146e+00, -4.046752513594624e-01, -4.110440263273799e-01, -4.110440263273799e-01, -3.891954653522997e-01, -3.891957150946287e-01, -3.894884305042367e-01, -3.891942510614345e-01, -3.891945361785374e-01, -3.891945361785374e-01, -6.128934714234079e+00, -6.129670206097420e+00, -6.128971341696398e+00, -6.129620601869401e+00, -6.129306019573857e+00, -6.129306019573857e+00, -3.068096912707751e+00, -3.092691814682720e+00, -3.050057036936148e+00, -3.071885324333951e+00, -3.090379011649362e+00, -3.090379011649362e+00, -1.006285410452127e+00, -1.049610405987343e+00, -9.593307622172531e-01, -9.836507606548507e-01, -1.015116109021373e+00, -1.015116109021373e+00, -3.944015811590710e-01, -4.243785386884827e-01, -3.933194232900896e-01, -3.002579025197427e+00, -3.975970781399698e-01, -3.975970781399698e-01, -3.891940944174505e-01, -3.891942320155716e-01, -3.891940823546570e-01, -3.904509105035253e-01, -3.891941729132007e-01, -3.891941729132007e-01, -1.008987660642755e+00, -1.005775506166766e+00, -1.006911914041773e+00, -1.007842939226267e+00, -1.007377480565703e+00, -1.007377480565703e+00, -9.933179037659554e-01, -8.906458541853595e-01, -9.242562019035022e-01, -9.541711706358967e-01, -9.393193523398159e-01, -9.393193523398159e-01, -1.072561747912305e+00, -4.588343325054349e-01, -5.064416714011145e-01, -6.350638464503976e-01, -5.605761639558022e-01, -5.605761639558022e-01, -8.269380710458151e-01, -3.894521612796493e-01, -3.898481214706306e-01, -6.134594896117350e-01, -3.917872131619249e-01, -3.917872131619249e-01, -3.891981891452868e-01, -3.891939665118651e-01, -3.891940091542581e-01, -3.913417691334724e-01, -3.891941289606376e-01, -3.891941289606376e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
