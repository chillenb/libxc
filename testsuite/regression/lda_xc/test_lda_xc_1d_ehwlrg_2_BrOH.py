
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_1d_ehwlrg_2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.510510855582653e+10, -5.510615352019730e+10, -5.511158519095563e+10, -5.509445884231951e+10, -5.510565319954920e+10, -5.510565319954920e+10, -3.745357755762980e+04, -3.745419664752492e+04, -3.748336649119062e+04, -3.749565845369522e+04, -3.745515260566609e+04, -3.745515260566609e+04, -3.420777224136308e-01, -3.417480985366738e-01, -3.333549925176034e-01, -3.357467966147568e-01, -3.419574350050921e-01, -3.419574350050921e-01, -5.068865805928505e-02, -5.189505669084599e-02, -4.440283533283724e-01, -2.849763866933458e-02, -5.104932135580068e-02, -5.104932135580068e-02, -2.749918620284432e-04, -2.990913593135444e-04, -3.795546254652375e-03, -7.265931188550166e-05, -2.934675883547140e-04, -2.934675883547140e-04, -8.871592512350389e+05, -8.883956219961272e+05, -8.872896276754853e+05, -8.882509114489326e+05, -8.877874694920010e+05, -8.877874694920010e+05, -3.777674402793322e+02, -4.000326540508866e+02, -3.690750626176848e+02, -3.860152219270188e+02, -4.046257051507658e+02, -4.046257051507658e+02, -3.010122527650965e-01, -3.250773323802471e-01, -2.855035640649410e-01, -2.979861473968769e-01, -3.119810523884890e-01, -3.119810523884890e-01, -1.634229758468092e-02, -5.133635817156354e-02, -1.596573939204197e-02, -3.225065248151744e+02, -2.124355804416619e-02, -2.124355804416619e-02, -6.807685605751078e-05, -8.670951092949766e-05, -5.142311222392702e-05, -6.927509829189209e-03, -7.325680764526224e-05, -7.325680764526224e-05, -3.101468978526579e-01, -3.085935240917912e-01, -3.091514982705426e-01, -3.095811089245057e-01, -3.093661814700181e-01, -3.093661814700181e-01, -3.006483866283250e-01, -2.579042529227646e-01, -2.712184077023930e-01, -2.829370588618151e-01, -2.770422562634340e-01, -2.770422562634340e-01, -3.393862528495042e-01, -7.692223874481920e-02, -1.034796245978016e-01, -1.551055914808396e-01, -1.271568702564336e-01, -1.271568702564336e-01, -2.263677133428428e-01, -3.303214433003955e-03, -5.717662316910122e-03, -1.416493367166983e-01, -1.120559941732210e-02, -1.120559941732210e-02, -3.666155379530611e-04, -8.291757289186323e-06, -2.652144659290002e-05, -1.029071135801712e-02, -5.455475244187110e-05, -5.455475244187095e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_1d_ehwlrg_2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.986039120311276e+11, -1.986076781423031e+11, -1.986272541934199e+11, -1.985655298563828e+11, -1.986058749581594e+11, -1.986058749581594e+11, -1.357820758601916e+05, -1.357843152679456e+05, -1.358898300538109e+05, -1.359342931918971e+05, -1.357877732148895e+05, -1.357877732148895e+05, -4.492070781668160e-01, -4.485862694871756e-01, -4.343572190082219e-01, -4.381142399651003e-01, -4.489799639450676e-01, -4.489799639450676e-01, -8.074567522386322e-02, -8.264433498938611e-02, -8.026093745030841e-01, -4.559027582421031e-02, -8.131344827566730e-02, -8.131344827566730e-02, -4.410864171079970e-04, -4.797418783901120e-04, -6.087492133996850e-03, -1.165455208151577e-04, -4.707213823132012e-04, -4.707213823132012e-04, -3.202990753328878e+06, -3.207451510417393e+06, -3.203461144413102e+06, -3.206929402928969e+06, -3.205257330259905e+06, -3.205257330259905e+06, -1.405288811074804e+03, -1.487200829581755e+03, -1.373300288619123e+03, -1.435635949623445e+03, -1.504093947341372e+03, -1.504093947341372e+03, -3.985225447192293e-01, -4.229427650663660e-01, -3.851581751802322e-01, -3.958835606710781e-01, -4.086032696120854e-01, -4.086032696120854e-01, -2.618575263742184e-02, -8.176522249297481e-02, -2.558339400040883e-02, -1.201820373069803e+03, -3.401982315826053e-02, -3.401982315826053e-02, -1.091952641213422e-04, -1.390820308254618e-04, -8.248266583827220e-05, -1.110893703698344e-02, -1.175039036741350e-04, -1.175039036741350e-04, -4.068357078455017e-01, -4.053700618853415e-01, -4.058934558313719e-01, -4.062987497630923e-01, -4.060957313024809e-01, -4.060957313024809e-01, -3.982032212506463e-01, -3.600893497317343e-01, -3.725647276569241e-01, -3.829397359107317e-01, -3.777797114357287e-01, -3.777797114357286e-01, -4.442795630637028e-01, -1.216639275898813e-01, -1.621223730813650e-01, -2.368632539853136e-01, -1.971387295174463e-01, -1.971387295174463e-01, -3.270729802034142e-01, -5.297965944839196e-03, -9.169455536273803e-03, -2.179786712577001e-01, -1.796377312574810e-02, -1.796377312574810e-02, -5.880501862936737e-04, -1.329997864337172e-05, -4.254039927196482e-05, -1.649832001170026e-02, -8.750581569921706e-05, -8.750581569921683e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
