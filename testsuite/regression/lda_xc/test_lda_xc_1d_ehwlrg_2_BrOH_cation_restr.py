
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_1d_ehwlrg_2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.511615923091462e+10, -5.511736008199209e+10, -5.512306971346342e+10, -5.510519650397285e+10, -5.511450838170978e+10, -5.511450838170978e+10, -3.746719741022978e+04, -3.746783434282683e+04, -3.748979279178395e+04, -3.750767470390865e+04, -3.747507527946770e+04, -3.747507527946770e+04, -3.441040829276626e-01, -3.437438486465186e-01, -3.352581460937162e-01, -3.378093539657226e-01, -3.372650753268245e-01, -3.372650753268245e-01, -4.624356123342194e-02, -4.749969269253654e-02, -4.233696672821739e-01, -2.821931835538095e-02, -3.475607914915822e-02, -3.475607914915821e-02, -1.063536117195410e-04, -1.166942971021371e-04, -2.576299923410901e-03, -3.933029286012866e-05, -5.949185633112076e-05, -5.949185633112076e-05, -8.901949281125990e+05, -8.914755602138190e+05, -8.902586724753251e+05, -8.913891484611358e+05, -8.908412776651460e+05, -8.908412776651460e+05, -3.812316398314137e+02, -4.043772691721396e+02, -3.650646551019192e+02, -3.847126691370095e+02, -4.021450923931286e+02, -4.021450923931286e+02, -3.042167051394649e-01, -3.283423539587581e-01, -2.812435272905263e-01, -2.928027398387638e-01, -3.088678895410545e-01, -3.088678895410545e-01, -1.460861620200729e-02, -4.636889115057328e-02, -1.269083703994241e-02, -3.256077546881820e+02, -1.950580368677600e-02, -1.950580368677600e-02, -2.458373026086518e-05, -3.774765555599113e-05, -2.321252643843905e-05, -6.190079262038651e-03, -3.252882879834210e-05, -3.252882879834210e-05, -3.056273774038847e-01, -3.039517330065412e-01, -3.045427939354129e-01, -3.050284599716204e-01, -3.047854936905597e-01, -3.047854936905597e-01, -2.975932354043813e-01, -2.514851075247009e-01, -2.656030718086618e-01, -2.788727409124348e-01, -2.721891292439180e-01, -2.721891292439180e-01, -3.428773167303559e-01, -7.015439468287778e-02, -9.640287495097177e-02, -1.529428529882262e-01, -1.218435476805119e-01, -1.218435476805118e-01, -2.262464817823072e-01, -2.379673784192241e-03, -4.172285247512291e-03, -1.442387577637449e-01, -9.587101904971852e-03, -9.587101904971852e-03, -1.985482741086964e-04, -3.456455643879785e-06, -1.324750552553185e-05, -8.555486959587546e-03, -2.826072649953239e-05, -2.826072649953234e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_1d_ehwlrg_2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_1d_ehwlrg_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.986437392942263e+11, -1.986480672299761e+11, -1.986686450673257e+11, -1.986042290012617e+11, -1.986377895395680e+11, -1.986377895395680e+11, -1.358313423663129e+05, -1.358336463145457e+05, -1.359130756113740e+05, -1.359777589891475e+05, -1.358598386319098e+05, -1.358598386319098e+05, -4.531317349581325e-01, -4.524203390709178e-01, -4.373282536243751e-01, -4.415396960082518e-01, -4.406185859142243e-01, -4.406185859142243e-01, -7.373762109024469e-02, -7.571992473351569e-02, -7.171492755424267e-01, -4.514694705295373e-02, -5.554506906545238e-02, -5.554506906545236e-02, -1.705911507059946e-04, -1.871775981862936e-04, -4.132183520782548e-03, -6.308578672066219e-05, -9.542492847048596e-05, -9.542492847048596e-05, -3.213943302378362e+06, -3.218563745269497e+06, -3.214173288235796e+06, -3.218251976998189e+06, -3.216275292680300e+06, -3.216275292680300e+06, -1.418035704815340e+03, -1.503180243573303e+03, -1.358539764509171e+03, -1.430843630327339e+03, -1.494970500987240e+03, -1.494970500987240e+03, -4.013657566487995e-01, -4.271737332953933e-01, -3.814675680977039e-01, -3.914214163358173e-01, -4.056270084519243e-01, -4.056270084519243e-01, -2.341196551735122e-02, -7.393547061350672e-02, -2.034216974889660e-02, -1.213245936581010e+03, -3.124360833307999e-02, -3.124360833307999e-02, -3.943230246936541e-05, -6.054723679761402e-05, -3.723289166105083e-05, -9.926819120374955e-03, -5.217623956431310e-05, -5.217623956431310e-05, -4.026387348858736e-01, -4.011282560838116e-01, -4.016587099696257e-01, -4.020964521452161e-01, -4.018772433947284e-01, -4.018772433947284e-01, -3.955433037680172e-01, -3.537692656114211e-01, -3.674032327816329e-01, -3.793933080582926e-01, -3.734432170703079e-01, -3.734432170703079e-01, -4.507334108693403e-01, -1.111874870500761e-01, -1.514521461186216e-01, -2.338604494241255e-01, -1.893795639993951e-01, -1.893795639993950e-01, -3.269367391498433e-01, -3.816833509659087e-03, -6.691620290826354e-03, -2.216491301611385e-01, -1.537109962021603e-02, -1.537109962021603e-02, -3.184712086794944e-04, -5.544154848036272e-06, -2.124899869469414e-05, -1.371811515903090e-02, -4.533020404687265e-05, -4.533020404687256e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
