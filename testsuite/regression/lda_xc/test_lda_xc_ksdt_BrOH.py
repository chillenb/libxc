
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_ksdt_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_ksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.001202489856047e+01, -2.001207316707700e+01, -2.001232405147061e+01, -2.001153292632821e+01, -2.001205005659395e+01, -2.001205005659395e+01, -3.336025773816667e+00, -3.336032612919952e+00, -3.336354741456056e+00, -3.336490418733270e+00, -3.336043173222755e+00, -3.336043173222755e+00, -6.842028401325001e-01, -6.835447069522284e-01, -6.664802078420605e-01, -6.713919881879328e-01, -6.839628037988107e-01, -6.839628037988107e-01, -2.081849170635266e-01, -2.106819311979166e-01, -8.111254177678626e-01, -1.559397051547269e-01, -2.089341921120831e-01, -2.089341921120831e-01, -1.532631136998924e-02, -1.600120391382609e-02, -5.751365571986385e-02, -7.690062851330705e-03, -1.584622977278547e-02, -1.584622977278547e-02, -4.952294212458624e+00, -4.953159596246520e+00, -4.952385517563187e+00, -4.953058362014086e+00, -4.952734058079385e+00, -4.952734058079385e+00, -1.906248122814527e+00, -1.919221532609446e+00, -1.901003340004885e+00, -1.911129106516107e+00, -1.921819873978036e+00, -1.921819873978036e+00, -6.010721333353120e-01, -6.493626624902752e-01, -5.723961119755910e-01, -5.953122790103065e-01, -6.226005445495136e-01, -6.226005445495136e-01, -1.183479445347726e-01, -2.095288097105701e-01, -1.169913761168216e-01, -1.870939969687252e+00, -1.347615930879741e-01, -1.347615930879741e-01, -7.432456110914853e-03, -8.433814919113741e-03, -6.416062873874976e-03, -7.745652154889208e-02, -7.723058107868951e-03, -7.723058107868951e-03, -6.189335449590371e-01, -6.158478964340633e-01, -6.169541021372945e-01, -6.178074827979334e-01, -6.173803703874916e-01, -6.173803703874916e-01, -6.003753140419693e-01, -5.259896242487802e-01, -5.477231322037257e-01, -5.678473544953431e-01, -5.575966474071163e-01, -5.575966474071163e-01, -6.787976734581230e-01, -2.577835420789220e-01, -3.013785919909256e-01, -3.772433181246413e-01, -3.371260056288725e-01, -3.371260056288723e-01, -4.780088637610005e-01, -5.368311956665018e-02, -7.044703094507564e-02, -3.581235532872483e-01, -9.821746309350510e-02, -9.821746309350510e-02, -1.775848639979422e-02, -2.438241448823054e-03, -4.525928930704471e-03, -9.417275104515267e-02, -6.618264305960047e-03, -6.618264305960036e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_ksdt_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_ksdt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.664051084753866e+01, -2.664057517716177e+01, -2.664090954207871e+01, -2.663985517401811e+01, -2.664054437678149e+01, -2.664054437678149e+01, -4.422271246205146e+00, -4.422280349456694e+00, -4.422709121649687e+00, -4.422889716173971e+00, -4.422294405845258e+00, -4.422294405845258e+00, -8.979140546851321e-01, -8.970431921163666e-01, -8.744650031293836e-01, -8.809634049648378e-01, -8.975964303579829e-01, -8.975964303579829e-01, -2.707278832274922e-01, -2.739930557462531e-01, -1.065961539724172e+00, -2.025249586397698e-01, -2.717076099240899e-01, -2.717076099240899e-01, -2.007779702374253e-02, -2.095577698678638e-02, -7.473258910309866e-02, -1.011844394454659e-02, -2.075419337263112e-02, -2.075419337263112e-02, -6.574219036602608e+00, -6.575371479734915e+00, -6.574340628818546e+00, -6.575236664746898e+00, -6.574804784856801e+00, -6.574804784856801e+00, -2.520040923366228e+00, -2.537289603143699e+00, -2.513067859781659e+00, -2.526530354069771e+00, -2.540744242271245e+00, -2.540744242271245e+00, -7.879632793241419e-01, -8.518208063841345e-01, -7.500617670831937e-01, -7.803492296732328e-01, -8.164270022980409e-01, -8.164270022980409e-01, -1.536046556805789e-01, -2.724851413667111e-01, -1.518419263383931e-01, -2.473098910638297e+00, -1.749474807468883e-01, -1.749474807468883e-01, -9.781419837708234e-03, -1.109101222023430e-02, -8.450793822211899e-03, -1.005523373437895e-01, -1.016160501354800e-02, -1.016160501354800e-02, -8.115781504614963e-01, -8.074981849577801e-01, -8.089608356439129e-01, -8.100892089003673e-01, -8.095244626950603e-01, -8.095244626950603e-01, -7.870421116654772e-01, -6.887586591728104e-01, -7.174633302431337e-01, -7.440509809624521e-01, -7.305070037417899e-01, -7.305070037417899e-01, -8.907619435273587e-01, -3.356649004624210e-01, -3.928639439380949e-01, -4.926163514948951e-01, -4.398370298497288e-01, -4.398370298497286e-01, -6.254246641289964e-01, -6.977570480239408e-02, -9.147411442027047e-02, -4.674541024166990e-01, -1.274665207079323e-01, -1.274665207079323e-01, -2.324059377481367e-02, -3.225797708818924e-03, -5.971992169443450e-03, -1.222197273557197e-01, -8.715626669448704e-03, -8.715626669448690e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
