
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_xc_corrksdt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_corrksdt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.997637379802670e+01, -1.997642918515722e+01, -1.997669251727354e+01, -1.997586811381175e+01, -1.997629765543209e+01, -1.997629765543209e+01, -3.328735218507437e+00, -3.328742234990130e+00, -3.328984064197416e+00, -3.329180906679477e+00, -3.328822208272920e+00, -3.328822208272920e+00, -6.877024048922485e-01, -6.869947901160947e-01, -6.699161115157422e-01, -6.751044030188640e-01, -6.750767616711522e-01, -6.750767616711522e-01, -1.988561204832929e-01, -2.015886817891222e-01, -7.946634784604351e-01, -1.551995101056348e-01, -1.821410882416792e-01, -1.821410882416792e-01, -9.372615114254917e-03, -9.835289275880062e-03, -4.740030847881405e-02, -5.571942643597940e-03, -6.903299599597775e-03, -6.903299599597775e-03, -4.943142716991104e+00, -4.944034397164685e+00, -4.943187132122914e+00, -4.943974259621187e+00, -4.943592899126756e+00, -4.943592899126756e+00, -1.904607269237387e+00, -1.917941654876649e+00, -1.894874470574937e+00, -1.906659381426909e+00, -1.916701084567192e+00, -1.916701084567192e+00, -6.068994154032484e-01, -6.556646872757932e-01, -5.648580776885433e-01, -5.855406138585325e-01, -6.166043937689981e-01, -6.166043937689981e-01, -1.119432067379185e-01, -1.990564155967823e-01, -1.044644548207003e-01, -1.869448936989484e+00, -1.292590576902133e-01, -1.292590576902133e-01, -4.349058508724602e-03, -5.452864970966986e-03, -4.218865669359943e-03, -7.321341258615967e-02, -5.032100316145443e-03, -5.032100316145443e-03, -6.096470255337054e-01, -6.063873407197310e-01, -6.075344707982333e-01, -6.084791996739117e-01, -6.080063270172038e-01, -6.080063270172038e-01, -5.942363034959931e-01, -5.156787898852627e-01, -5.381912952548561e-01, -5.604792032586622e-01, -5.491005321407249e-01, -5.491005321407249e-01, -6.852761084761306e-01, -2.458358955916483e-01, -2.902569473451000e-01, -3.741790687511669e-01, -3.293070605732781e-01, -3.293070605732781e-01, -4.776999865573549e-01, -4.554901309787446e-02, -6.022468204210681e-02, -3.618498930771287e-01, -9.093860237892973e-02, -9.093860237892976e-02, -1.294637948187457e-02, -1.527671511486459e-03, -3.133266367325476e-03, -8.592462586706390e-02, -4.673312859824078e-03, -4.673312859824074e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_xc_corrksdt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_xc_corrksdt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.659640556848336e+01, -2.659637182961614e+01, -2.659649097290126e+01, -2.659643408021390e+01, -2.659678208172253e+01, -2.659684498171132e+01, -2.659581443876087e+01, -2.659561486650748e+01, -2.659645416915167e+01, -2.659612023604245e+01, -2.659645416915167e+01, -2.659612023604245e+01, -4.412342338135766e+00, -4.412286336289808e+00, -4.412355651896244e+00, -4.412291703514062e+00, -4.412603358606278e+00, -4.412687864110694e+00, -4.412878852186497e+00, -4.412936463573895e+00, -4.411661959541203e+00, -4.413197470790150e+00, -4.411661959541203e+00, -4.413197470790150e+00, -9.008818199143545e-01, -9.036208197059941e-01, -8.996313526061459e-01, -9.029911840878222e-01, -8.810278475873635e-01, -8.763920042231399e-01, -8.848605448920371e-01, -8.863255341220677e-01, -9.055310980602056e-01, -8.613901429523954e-01, -9.055310980602056e-01, -8.613901429523954e-01, -2.558644665659273e-01, -2.609560295891061e-01, -2.589836562649536e-01, -2.648895975022925e-01, -1.029557339040187e+00, -1.056779235445150e+00, -2.009468877415966e-01, -2.022118027580987e-01, -2.456992380704086e-01, -1.896424682033882e-01, -2.456992380704086e-01, -1.896424682033882e-01, -1.231702502879311e-02, -1.231195656906183e-02, -1.292006880711219e-02, -1.291729939937930e-02, -6.130725146780683e-02, -6.196496005328844e-02, -7.339354146467801e-03, -7.344308523406217e-03, -9.081773631308264e-03, -9.196509020227128e-03, -9.081773631308264e-03, -9.196509020227124e-03, -6.562873060425245e+00, -6.561379742744184e+00, -6.564080554538578e+00, -6.562547551173629e+00, -6.562946111545076e+00, -6.561424988253607e+00, -6.563983211077948e+00, -6.562484720295639e+00, -6.563486423747068e+00, -6.561965591870059e+00, -6.563486423747068e+00, -6.561965591870059e+00, -2.517465563493481e+00, -2.517352293640267e+00, -2.535445546728164e+00, -2.534830742970568e+00, -2.502537692161530e+00, -2.506389414831375e+00, -2.518112023447203e+00, -2.522151980471464e+00, -2.538409960173809e+00, -2.528503234334703e+00, -2.538409960173809e+00, -2.528503234334703e+00, -7.962052127005863e-01, -7.946301320857034e-01, -8.597379553019768e-01, -8.600344645934768e-01, -7.295628671717321e-01, -7.491659120825873e-01, -7.574769703938018e-01, -7.760388768133885e-01, -8.225519715593227e-01, -7.916492908670795e-01, -8.225519715593227e-01, -7.916492908670795e-01, -1.450554378475049e-01, -1.455797156273304e-01, -2.584725320072929e-01, -2.591385629118479e-01, -1.342300520092861e-01, -1.368068358701544e-01, -2.471157416402752e+00, -2.470170650760895e+00, -1.656706813557999e-01, -1.696656931492005e-01, -1.656706813557999e-01, -1.696656931492005e-01, -5.743667297441687e-03, -5.732045834467617e-03, -7.187943934935608e-03, -7.183482804051850e-03, -5.575966576834419e-03, -5.558739442546988e-03, -9.500062172948374e-02, -9.516603503611644e-02, -6.701597950024992e-03, -6.612555675679228e-03, -6.701597950024993e-03, -6.612555675679229e-03, -7.978928356805376e-01, -8.001979597444520e-01, -7.935809466403840e-01, -7.958939107127778e-01, -7.950946286223334e-01, -7.974121760770162e-01, -7.963516299078304e-01, -7.986524274661688e-01, -7.957225696248716e-01, -7.980315169888056e-01, -7.957225696248716e-01, -7.980315169888056e-01, -7.777274923302430e-01, -7.796378981849108e-01, -6.738940178342389e-01, -6.759905077419756e-01, -7.035241442570154e-01, -7.057900793994926e-01, -7.331446059405204e-01, -7.350342064169592e-01, -7.180900583623713e-01, -7.200356406088134e-01, -7.180900583623713e-01, -7.200356406088134e-01, -8.984871060582849e-01, -8.996095941849155e-01, -3.194663031765573e-01, -3.205116216830842e-01, -3.770639850191994e-01, -3.793396519971231e-01, -4.875884066951974e-01, -4.893573836622295e-01, -4.295340970780792e-01, -4.294385985477501e-01, -4.295340970780792e-01, -4.294385985477501e-01, -6.233199109980031e-01, -6.263406328582894e-01, -5.922383009899644e-02, -5.930016343784369e-02, -7.793597939218895e-02, -7.856106702634943e-02, -4.699170484078367e-01, -4.745098819532539e-01, -1.169186920746706e-01, -1.190448004499196e-01, -1.169186920746707e-01, -1.190448004499196e-01, -1.696907927720965e-02, -1.698117501436566e-02, -2.023798004170831e-03, -2.023386402732219e-03, -4.148919643812567e-03, -4.131974983124384e-03, -1.112626941408271e-01, -1.118400973573242e-01, -6.222687498408039e-03, -6.141382862788591e-03, -6.222687498408029e-03, -6.141382862788585e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
