
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ob_pz_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.643661331560420e-01, -1.643662184836235e-01, -1.643666241613681e-01, -1.643653541035408e-01, -1.643660158503988e-01, -1.643660158503988e-01, -1.098950999324956e-01, -1.098951628046439e-01, -1.098973296940507e-01, -1.098990933763468e-01, -1.098958774890917e-01, -1.098958774890917e-01, -6.435280378258600e-02, -6.432412943821834e-02, -6.362517373277021e-02, -6.383965832168458e-02, -6.379418246125775e-02, -6.379418246125775e-02, -3.798365407750382e-02, -3.824633324753281e-02, -6.837045208400097e-02, -3.325999861684477e-02, -3.522429321540752e-02, -3.522429321540752e-02, -3.640115235665205e-03, -3.806687084843208e-03, -1.487610691112160e-02, -2.231200993914012e-03, -2.740696424180200e-03, -2.740696424180200e-03, -1.217548603413683e-01, -1.217602977549384e-01, -1.217551311763562e-01, -1.217599311052336e-01, -1.217576056372472e-01, -1.217576056372472e-01, -9.340028877973351e-02, -9.360423666256357e-02, -9.325052265965106e-02, -9.343172280671427e-02, -9.358507182572628e-02, -9.358507182572628e-02, -6.089144072500727e-02, -6.302951004146184e-02, -5.889875151871629e-02, -5.989204664480053e-02, -6.130329776468986e-02, -6.130329776468986e-02, -2.737279526115228e-02, -3.801015328608918e-02, -2.618618217206893e-02, -9.285591535025380e-02, -2.989316964399915e-02, -2.989316964399915e-02, -1.761084902917551e-03, -2.185805346975762e-03, -1.710570134162236e-03, -2.058752340465621e-02, -2.028524496666420e-03, -2.028524496666420e-03, -6.101612332053877e-02, -6.086804608745370e-02, -6.092024247419741e-02, -6.096316105839370e-02, -6.094168670495825e-02, -6.094168670495825e-02, -6.030930593613703e-02, -5.642697268959201e-02, -5.758065718353958e-02, -5.869724810478225e-02, -5.813269218866074e-02, -5.813269218866074e-02, -6.425478936696014e-02, -4.213622623576634e-02, -4.540253164703034e-02, -5.035971606165742e-02, -4.787715232039846e-02, -4.787715232039846e-02, -5.500687965369127e-02, -1.442183008877998e-02, -1.785953888163659e-02, -4.971005362495819e-02, -2.390569695251051e-02, -2.390569695251051e-02, -4.901685078007671e-03, -6.382162170260967e-04, -1.284401743927624e-03, -2.301344537023893e-02, -1.889727519567834e-03, -1.889727519567833e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ob_pz_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.745647287230477e-01, -1.745648144209596e-01, -1.745652218593763e-01, -1.745639462893420e-01, -1.745646109082847e-01, -1.745646109082847e-01, -1.196047885826404e-01, -1.196048524383608e-01, -1.196070532257965e-01, -1.196088444973575e-01, -1.196055783032424e-01, -1.196055783032424e-01, -7.301765959080075e-02, -7.298824547549368e-02, -7.227137775312684e-02, -7.249133353572156e-02, -7.244469571573982e-02, -7.244469571573982e-02, -4.380406083552937e-02, -4.407610071425710e-02, -7.714178993743771e-02, -3.885171783600140e-02, -4.092516884172957e-02, -4.092516884172957e-02, -4.702343490498058e-03, -4.913291695856331e-03, -1.837136215485946e-02, -2.905264424950680e-03, -3.557880492621825e-03, -3.557880492621825e-03, -1.316282788421742e-01, -1.316337819358776e-01, -1.316285529488484e-01, -1.316334108575547e-01, -1.316310573003012e-01, -1.316310573003012e-01, -1.028044394782042e-01, -1.030127690146103e-01, -1.026514459694353e-01, -1.028365498414960e-01, -1.029931930913146e-01, -1.029931930913146e-01, -6.947030751312797e-02, -7.166064661047540e-02, -6.743213831990047e-02, -6.844765500331890e-02, -6.989198515205181e-02, -6.989198515205181e-02, -3.251210488105975e-02, -4.383152009230288e-02, -3.121066527964011e-02, -1.022482954084077e-01, -3.524967431860215e-02, -3.524967431860215e-02, -2.300079388450484e-03, -2.846955903314157e-03, -2.234869090692068e-03, -2.495686880297172e-02, -2.644725048981691e-03, -2.644725048981691e-03, -6.959794936021622e-02, -6.944635898010761e-02, -6.949979177008198e-02, -6.954372859304341e-02, -6.952174458261208e-02, -6.952174458261208e-02, -6.887452192993829e-02, -6.211986263941510e-02, -6.608614366397615e-02, -6.722624658892570e-02, -6.664962705117364e-02, -6.664962705117364e-02, -7.291711804338960e-02, -4.806465496761086e-02, -5.135764588374153e-02, -5.626195893960593e-02, -5.381962482705159e-02, -5.381962482705159e-02, -6.076248116781124e-02, -1.783800840847223e-02, -2.183853981806063e-02, -5.562544375303734e-02, -2.868628438828522e-02, -2.868628438828522e-02, -6.292670274524942e-03, -8.410550151861906e-04, -1.683218853396992e-03, -2.769012152722241e-02, -2.465983076601590e-03, -2.465983076601588e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
