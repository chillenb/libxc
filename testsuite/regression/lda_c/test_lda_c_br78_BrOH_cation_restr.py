
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_br78_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_br78", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.426205492667748e-02, -9.426207471901610e-02, -9.426216881819935e-02, -9.426187421771458e-02, -9.426202771672257e-02, -9.426202771672257e-02, -6.795371527156033e-02, -6.795376416792427e-02, -6.795544935721773e-02, -6.795682093726789e-02, -6.795431998308954e-02, -6.795431998308954e-02, -2.837289330983825e-02, -2.835031140206042e-02, -2.780270685789259e-02, -2.797016269391364e-02, -2.793461456561840e-02, -2.793461456561840e-02, -9.232392753533216e-03, -9.359378906824402e-03, -3.162268210407734e-02, -7.165335812323359e-03, -7.977173759608483e-03, -7.977173759608483e-03, -3.521757171765166e-04, -3.706122532868636e-04, -2.011668784969860e-03, -2.036897833552655e-04, -2.558206466203581e-04, -2.558206466203581e-04, -7.641353166651149e-02, -7.641704369291968e-02, -7.641370660704902e-02, -7.641680688466422e-02, -7.641530489676730e-02, -7.641530489676730e-02, -5.397420094464019e-02, -5.415770288030564e-02, -5.383934436099716e-02, -5.400249447804745e-02, -5.414046642888157e-02, -5.414046642888157e-02, -2.571540358767668e-02, -2.734040422066197e-02, -2.425151072808374e-02, -2.497494620437863e-02, -2.602414970781860e-02, -2.602414970781860e-02, -5.084033652626388e-03, -9.245141748814382e-03, -4.721000151047515e-03, -5.348361019926716e-02, -5.915088952060960e-03, -5.915088952060960e-03, -1.572319925008535e-04, -1.991337016281573e-04, -1.523372387518500e-04, -3.224149049921515e-03, -1.834630214327448e-04, -1.834630214327448e-04, -2.580865161532308e-02, -2.569792845053614e-02, -2.573692694571005e-02, -2.576901866677749e-02, -2.575295871137694e-02, -2.575295871137694e-02, -2.528257949079115e-02, -2.249307243533091e-02, -2.331126018053998e-02, -2.410629933385092e-02, -2.370227389564030e-02, -2.370227389564030e-02, -2.829574174579700e-02, -1.140809713515754e-02, -1.339919950988039e-02, -1.698223860465418e-02, -1.509629258964204e-02, -1.509629258964204e-02, -2.107712084507463e-02, -1.927052855114107e-03, -2.609304026633354e-03, -1.646986923313622e-02, -4.070181082819171e-03, -4.070181082819172e-03, -4.963228030678185e-04, -5.330601204741073e-05, -1.118274077169287e-04, -3.831399432089903e-03, -1.697835046979763e-04, -1.697835046979762e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_br78_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_br78", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.662769445550677e-02, -9.662770864383133e-02, -9.662777609968311e-02, -9.662756491246426e-02, -9.662767494978983e-02, -9.662767494978983e-02, -7.550505043460266e-02, -7.550509389935682e-02, -7.550659188131732e-02, -7.550781107911121e-02, -7.550558797118204e-02, -7.550558797118204e-02, -3.519810549861498e-02, -3.517218489068551e-02, -3.454259684731674e-02, -3.473533115487604e-02, -3.469443215481788e-02, -3.469443215481788e-02, -1.203113176633649e-02, -1.219272650235053e-02, -3.889359568207019e-02, -9.385892621115813e-03, -1.042814424458345e-02, -1.042814424458345e-02, -4.691620522060581e-04, -4.937005252928751e-04, -2.668991973674100e-03, -2.714507070509731e-04, -3.408801929492250e-04, -3.408801929492250e-04, -8.279108791156291e-02, -8.279401545723608e-02, -8.279123373994192e-02, -8.279381806177379e-02, -8.279256604622622e-02, -8.279256604622622e-02, -6.243939027742771e-02, -6.261917483231649e-02, -6.230712522733349e-02, -6.246712500051538e-02, -6.260229692804459e-02, -6.260229692804459e-02, -3.212481270348480e-02, -3.400955480557210e-02, -3.041214366106142e-02, -3.126027251553389e-02, -3.248423795368256e-02, -3.248423795368256e-02, -6.694190544783191e-03, -1.204736011281080e-02, -6.221785623329710e-03, -6.195765651466235e-02, -7.772373602608319e-03, -7.772373602608319e-03, -2.095618160565516e-04, -2.653819328351005e-04, -2.030404326416045e-04, -4.264873301591074e-03, -2.445072980259638e-04, -2.445072980259638e-04, -3.223343263797979e-02, -3.210445046857303e-02, -3.214988922812923e-02, -3.218727315933398e-02, -3.216856561642099e-02, -3.216856561642099e-02, -3.161989312765581e-02, -2.833634498131787e-02, -2.930471367728018e-02, -3.024149075217012e-02, -2.976595309466942e-02, -2.976595309466942e-02, -3.510953342797304e-02, -1.478522307580829e-02, -1.727850829616395e-02, -2.169992848656250e-02, -1.938316349617942e-02, -1.938316349617942e-02, -2.665014656783738e-02, -2.557260554868870e-03, -3.456808346775005e-03, -2.107281658652152e-02, -5.372736067292071e-03, -5.372736067292072e-03, -6.609582176415146e-04, -7.106539092377127e-05, -1.490623177322266e-04, -5.060530213460995e-03, -2.262837438101796e-04, -2.262837438101794e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
