
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ow_lyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow_lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.854870107370430e-02, -4.854870281137672e-02, -4.854871107429852e-02, -4.854868519909024e-02, -4.854869866677756e-02, -4.854869866677756e-02, -4.554254750163550e-02, -4.554255476622335e-02, -4.554280531297883e-02, -4.554300926486181e-02, -4.554262309377961e-02, -4.554262309377961e-02, -3.477739968738563e-02, -3.476554044301224e-02, -3.448788772348015e-02, -3.457624492696033e-02, -3.422768036255408e-02, -3.422768036255408e-02, -1.882692543263623e-02, -1.898325929412720e-02, -3.620288333147209e-02, -1.579474974538143e-02, -7.910990242946996e-03, -7.910990242946996e-03, -1.036247531632869e-03, -1.086918206541293e-03, -5.468671289330539e-03, -6.085250506665801e-04, -4.008640738039186e-04, -4.008640738039187e-04, -4.668933552073350e-02, -4.668976921831928e-02, -4.668935691432362e-02, -4.668974023691731e-02, -4.668955443933617e-02, -4.668955443933617e-02, -4.306777463957763e-02, -4.310634757736533e-02, -4.303900984838934e-02, -4.307342189362175e-02, -4.310087101833493e-02, -4.310087101833493e-02, -3.337840486891489e-02, -3.425371623471914e-02, -3.243983007612877e-02, -3.287995136073842e-02, -3.335346055526133e-02, -3.335346055526133e-02, -1.216320095696531e-02, -1.890528490084838e-02, -1.139677881379354e-02, -4.296365813181524e-02, -1.358734924870293e-02, -1.358734924870293e-02, -4.695813042919789e-04, -5.951280978577182e-04, -4.532323493143084e-04, -8.349370341885888e-03, -4.413126928869480e-04, -4.413126928869479e-04, -3.342971373404153e-02, -3.336804212049422e-02, -3.338979121677586e-02, -3.340768035790444e-02, -3.339873136497986e-02, -3.339873136497986e-02, -3.313437802814981e-02, -3.144206792755621e-02, -3.196111667882770e-02, -3.244736029642480e-02, -3.220266300032234e-02, -3.220266300032234e-02, -3.473998113968637e-02, -2.168869937313337e-02, -2.392292372069950e-02, -2.733622712448582e-02, -2.563168373525441e-02, -2.563168373525441e-02, -3.049212408124293e-02, -5.294130746567946e-03, -6.929798916214622e-03, -2.687872046592021e-02, -1.009345414424731e-02, -1.009345414424731e-02, -1.457697174540153e-03, -1.605849920490159e-04, -3.330184438309623e-04, -9.657390024577843e-03, -4.260985894548012e-04, -4.260985894548010e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ow_lyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow_lyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-4.875624527710309e-02, -4.875662037722615e-02, -4.875611774272364e-02, -4.875675025935887e-02, -4.875678922798916e-02, -4.875608993312634e-02, -4.875531269368379e-02, -4.875753154336658e-02, -4.875457493262815e-02, -4.875828752996410e-02, -4.875457493262815e-02, -4.875828752996410e-02, -4.666348974378093e-02, -4.666721808247978e-02, -4.666323043784647e-02, -4.666748781054724e-02, -4.666835132086396e-02, -4.666272575966682e-02, -4.666760201719538e-02, -4.666376703147933e-02, -4.671654448224541e-02, -4.661432003307988e-02, -4.671654448224541e-02, -4.661432003307988e-02, -3.858721771865940e-02, -3.776172231146217e-02, -3.867211813623212e-02, -3.765857231496061e-02, -3.721348918171329e-02, -3.864403027704678e-02, -3.822377432473935e-02, -3.777483073297393e-02, -3.151795149118829e-02, -4.504514501743874e-02, -3.151795149118829e-02, -4.504514501743874e-02, -2.497586311032525e-02, -2.065569393338709e-02, -2.549851870794038e-02, -2.054019888378222e-02, -4.314050034349814e-02, -3.594659237137869e-02, -2.003105187281595e-02, -1.873177662190492e-02, -2.943244225699262e-03, -5.295662112709099e-02, -2.943244225699261e-03, -5.295662112709099e-02, -1.581432541924539e-03, -1.201715190782587e-03, -1.690414926794042e-03, -1.238354468027171e-03, -8.058918170612699e-03, -6.262616493740145e-03, -7.789399088034638e-04, -8.403173679424606e-04, -2.054207572295406e-04, -2.306834062057924e-03, -2.054207572295408e-04, -2.306834062057925e-03, -4.744396585359530e-02, -4.751107725134333e-02, -4.744338460055227e-02, -4.751226713618432e-02, -4.744335671774237e-02, -4.751171711922929e-02, -4.744413879545267e-02, -4.751147139118898e-02, -4.744350440721243e-02, -4.751184612208190e-02, -4.744350440721243e-02, -4.751184612208190e-02, -4.484543981802531e-02, -4.485849778603387e-02, -4.484568401526472e-02, -4.491607963395226e-02, -4.505402472563393e-02, -4.460776917677190e-02, -4.508936025674188e-02, -4.462411446298714e-02, -4.431243493786310e-02, -4.544748086056759e-02, -4.431243493786310e-02, -4.544748086056759e-02, -3.668871989489244e-02, -3.721964422898256e-02, -3.776575523477319e-02, -3.767247335310420e-02, -3.981054929174037e-02, -3.276954294154679e-02, -3.988243389509541e-02, -3.342370600713816e-02, -3.214463920645686e-02, -4.241505859699725e-02, -3.214463920645687e-02, -4.241505859699724e-02, -1.556596186096647e-02, -1.487322648250399e-02, -2.306891032612478e-02, -2.250420860714197e-02, -1.624745792519708e-02, -1.265391555033930e-02, -4.471597113486520e-02, -4.483181019947600e-02, -1.942079753780883e-02, -1.469811254790118e-02, -1.942079753780883e-02, -1.469811254790118e-02, -6.820889671405261e-04, -5.733974069906554e-04, -8.185352608927738e-04, -7.648782777571136e-04, -6.880093174747089e-04, -5.312583221571531e-04, -1.081492052222098e-02, -1.050781982519529e-02, -1.288503423968000e-03, -3.158468728335257e-04, -1.288503423968001e-03, -3.158468728335256e-04, -3.738735575409803e-02, -3.661346421874567e-02, -3.733625613821850e-02, -3.655602279134276e-02, -3.735553079012581e-02, -3.657506343588445e-02, -3.736789285200084e-02, -3.659413579245630e-02, -3.736166927422348e-02, -3.658463457252466e-02, -3.736166927422348e-02, -3.658463457252466e-02, -3.706738912079419e-02, -3.641126804948335e-02, -3.563231893183495e-02, -3.481675956697604e-02, -3.611830174191247e-02, -3.526910402342304e-02, -3.647053540110738e-02, -3.578715434548307e-02, -3.626819138075065e-02, -3.555176553770544e-02, -3.626819138075065e-02, -3.555176553770544e-02, -3.831010536323828e-02, -3.797072352451007e-02, -2.610866597853590e-02, -2.535732248491819e-02, -2.874441589021365e-02, -2.731177153242048e-02, -3.183905470818219e-02, -3.093462016672453e-02, -2.969554476859272e-02, -2.974980629235427e-02, -2.969554476859273e-02, -2.974980629235426e-02, -3.498794818327424e-02, -3.373234368876729e-02, -6.978270113487707e-03, -6.761652498048733e-03, -9.632930038739928e-03, -8.261646622615443e-03, -3.217344899505875e-02, -2.975891165909615e-02, -1.455173020199407e-02, -1.124323818821285e-02, -1.455173020199407e-02, -1.124323818821285e-02, -2.093514240216269e-03, -1.781446339120970e-03, -2.150421397991768e-04, -2.128424674267604e-04, -5.109114229111716e-04, -3.870421886846140e-04, -1.272559770964269e-02, -1.178529861460266e-02, -1.140531610784529e-03, -3.221304786936947e-04, -1.140531610784528e-03, -3.221304786936945e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
