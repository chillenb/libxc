
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rpw92_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpw92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.645995504600728e-01, -1.645996352774702e-01, -1.646000385296314e-01, -1.645987760656716e-01, -1.645994338558163e-01, -1.645994338558163e-01, -1.107858338429825e-01, -1.107858953893559e-01, -1.107880165870673e-01, -1.107897430814732e-01, -1.107865950035000e-01, -1.107865950035000e-01, -6.701411225019485e-02, -6.698743865823151e-02, -6.633788542729087e-02, -6.653707962660949e-02, -6.649483594456225e-02, -6.649483594456225e-02, -3.788462491832124e-02, -3.816448150655340e-02, -7.077000961998538e-02, -3.294739425006599e-02, -3.497993480493993e-02, -3.497993480493993e-02, -3.783212638790422e-03, -3.950262148245966e-03, -1.476390352278684e-02, -2.356425943296053e-03, -2.875605164365591e-03, -2.875605164365591e-03, -1.224262515798652e-01, -1.224316013235271e-01, -1.224265180478010e-01, -1.224312405851439e-01, -1.224289526107322e-01, -1.224289526107322e-01, -9.471366600561090e-02, -9.491133591069725e-02, -9.456852948214131e-02, -9.474413043394066e-02, -9.489275971457946e-02, -9.489275971457946e-02, -6.380984132713652e-02, -6.578530696998787e-02, -6.198096642968796e-02, -6.289103478448343e-02, -6.418936514394004e-02, -6.418936514394004e-02, -2.699430518029856e-02, -3.791282911279729e-02, -2.581454244194446e-02, -9.418619982596554e-02, -2.952055260796775e-02, -2.952055260796775e-02, -1.873262677774475e-03, -2.309956089562038e-03, -1.821073593879012e-03, -2.031142249656109e-02, -2.148658723728447e-03, -2.148658723728447e-03, -6.392468271156901e-02, -6.378829839072296e-02, -6.383636564200691e-02, -6.387589511933793e-02, -6.385611582342506e-02, -6.385611582342506e-02, -6.327427402069155e-02, -5.971249478403084e-02, -6.077845548439291e-02, -6.179674412753493e-02, -6.128134397443008e-02, -6.128134397443008e-02, -6.692294514921258e-02, -4.238697070491521e-02, -4.606336752325606e-02, -5.192846777352228e-02, -4.894364023608572e-02, -4.894364023608572e-02, -5.782021926348150e-02, -1.432389825823212e-02, -1.765669780593137e-02, -5.113742505898904e-02, -2.356177787973961e-02, -2.356177787973960e-02, -5.041936522020963e-03, -6.963085944531268e-04, -1.378316159192511e-03, -2.268491426043807e-02, -2.005917695883235e-03, -2.005917695883237e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rpw92_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpw92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747371672956858e-01, -1.747372526063871e-01, -1.747376582038778e-01, -1.747363883973037e-01, -1.747370500132488e-01, -1.747370500132488e-01, -1.202907756973956e-01, -1.202908384983423e-01, -1.202930029339308e-01, -1.202947646192207e-01, -1.202915523734385e-01, -1.202915523734385e-01, -7.507468276142483e-02, -7.504671083119945e-02, -7.436535042362932e-02, -7.457433763699300e-02, -7.453002000518649e-02, -7.453002000518649e-02, -4.407883909029354e-02, -4.438233039524282e-02, -7.900736698061860e-02, -3.869582608968664e-02, -4.091886916693980e-02, -4.091886916693980e-02, -4.849423593406230e-03, -5.059080974329369e-03, -1.814957241592365e-02, -3.046165059145504e-03, -3.705072949501221e-03, -3.705072949501221e-03, -1.321404666298604e-01, -1.321459006030108e-01, -1.321407372934634e-01, -1.321455341852712e-01, -1.321432101886045e-01, -1.321432101886045e-01, -1.038276322678099e-01, -1.040309546218596e-01, -1.036783308870873e-01, -1.038589693339978e-01, -1.040118482080472e-01, -1.040118482080472e-01, -7.170998474808107e-02, -7.378542427346359e-02, -6.978541633456725e-02, -7.074348540376992e-02, -7.210898567657270e-02, -7.210898567657270e-02, -3.211636191061110e-02, -4.410943247452888e-02, -3.079828628005500e-02, -1.032849703534696e-01, -3.492210023901039e-02, -3.492210023901039e-02, -2.429818831173949e-03, -2.987022878196811e-03, -2.363048029266213e-03, -2.457414087463874e-02, -2.781518125836640e-03, -2.781518125836640e-03, -7.183073346116534e-02, -7.168733233876978e-02, -7.173787450420190e-02, -7.177943773582970e-02, -7.175864098997956e-02, -7.175864098997956e-02, -7.114671086119044e-02, -6.739392548094914e-02, -6.851829936286137e-02, -6.959138420930608e-02, -6.904837093538646e-02, -6.904837093538646e-02, -7.497907555920834e-02, -4.894336676652947e-02, -5.289030830420809e-02, -5.914859868946303e-02, -5.596910016369779e-02, -5.596910016369779e-02, -6.539524416530183e-02, -1.763257882150190e-02, -2.152053010629283e-02, -5.830699949972622e-02, -2.826624935272212e-02, -2.826624935272212e-02, -6.422398805763802e-03, -9.130110394558609e-04, -1.794908259946954e-03, -2.727493372977133e-02, -2.599361099800860e-03, -2.599361099800860e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
