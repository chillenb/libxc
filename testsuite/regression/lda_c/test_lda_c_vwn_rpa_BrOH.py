
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_rpa_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.883665501471007e-01, -1.883666246671478e-01, -1.883670119957686e-01, -1.883657905984700e-01, -1.883665889877167e-01, -1.883665889877167e-01, -1.335340308641341e-01, -1.335340926965032e-01, -1.335370049221652e-01, -1.335382314399848e-01, -1.335341881720139e-01, -1.335341881720139e-01, -8.709015185031982e-02, -8.706310432032312e-02, -8.635326622649961e-02, -8.655928724804689e-02, -8.708028977941606e-02, -8.708028977941606e-02, -5.566470107271502e-02, -5.595385296643313e-02, -9.190265388969865e-02, -4.886586184169005e-02, -5.575176056710339e-02, -5.575176056710339e-02, -1.239707340051419e-02, -1.277950949352895e-02, -2.903865748876184e-02, -7.458578984100646e-03, -1.269230486106389e-02, -1.269230486106389e-02, -1.455014839215862e-01, -1.455067977003845e-01, -1.455020446119573e-01, -1.455061761315711e-01, -1.455041848514538e-01, -1.455041848514538e-01, -1.167834893200683e-01, -1.169847536946446e-01, -1.167017485666756e-01, -1.168593655742907e-01, -1.170249055524311e-01, -1.170249055524311e-01, -8.346770424036451e-02, -8.562417201220694e-02, -8.211071363671411e-02, -8.319996435193530e-02, -8.444803371908979e-02, -8.444803371908979e-02, -4.278397026831425e-02, -5.582067012358023e-02, -4.253913305713689e-02, -1.162289683694719e-01, -4.559495055751531e-02, -4.559495055751531e-02, -7.266265620254036e-03, -8.001904904931686e-03, -6.484804076759398e-03, -3.430994415533698e-02, -7.483053100261979e-03, -7.483053100261979e-03, -8.428327111430362e-02, -8.414393354187642e-02, -8.419395962167134e-02, -8.423249594550580e-02, -8.421321483475848e-02, -8.421321483475848e-02, -8.343543868281782e-02, -7.977739061169294e-02, -8.089253127019631e-02, -8.188977350195149e-02, -8.138590340460977e-02, -8.138590340460977e-02, -8.686729806186393e-02, -6.094219262253286e-02, -6.492008850930338e-02, -7.079264702817940e-02, -6.783008791660153e-02, -6.783008791660154e-02, -7.715981705813353e-02, -2.790053288384662e-02, -3.256799535683167e-02, -6.941692122374427e-02, -3.892111685909452e-02, -3.892111685909452e-02, -1.374415333189223e-02, -2.950876939263293e-03, -4.918096890807199e-03, -3.807888596678634e-02, -6.643301425760539e-03, -6.643301425760529e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_rpa_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.986000462620934e-01, -1.986001210496900e-01, -1.986005097689302e-01, -1.985992839864227e-01, -1.986000852421590e-01, -1.986000852421590e-01, -1.433547917742604e-01, -1.433548544261823e-01, -1.433578052504820e-01, -1.433590480238307e-01, -1.433549511671645e-01, -1.433549511671645e-01, -9.586921225284500e-02, -9.584122913341461e-02, -9.510665839168227e-02, -9.531989335965865e-02, -9.585900910502597e-02, -9.585900910502597e-02, -6.294226587901529e-02, -6.324987406082476e-02, -1.008404792974990e-01, -5.567733820999073e-02, -6.303489343429329e-02, -6.303489343429329e-02, -1.511427762972187e-02, -1.556171777416517e-02, -3.404988764635299e-02, -9.261128466241973e-03, -1.545975618487857e-02, -1.545975618487857e-02, -1.554615608209855e-01, -1.554669285181112e-01, -1.554621272009273e-01, -1.554663006426439e-01, -1.554642891577043e-01, -1.554642891577043e-01, -1.263368468703613e-01, -1.265419210014345e-01, -1.262535542527135e-01, -1.264141612784431e-01, -1.265828309812723e-01, -1.265828309812723e-01, -9.211692579138347e-02, -9.435179842173173e-02, -9.070886977345390e-02, -9.183921777869286e-02, -9.313330991846989e-02, -9.313330991846989e-02, -4.912066032991713e-02, -6.310820342691939e-02, -4.885544144107577e-02, -1.257717460388714e-01, -5.215842192251345e-02, -5.215842192251345e-02, -9.029965481257122e-03, -9.912745521705461e-03, -8.087710465473444e-03, -3.987650712725826e-02, -9.290526866224804e-03, -9.290526866224804e-03, -9.296253605493167e-02, -9.281809964332532e-02, -9.286995795368395e-02, -9.290990446362504e-02, -9.288991791932354e-02, -9.288991791932354e-02, -9.208346173907385e-02, -8.828450391268870e-02, -8.944367461903603e-02, -9.047948604327591e-02, -8.995622247292974e-02, -8.995622247292973e-02, -9.563863494433730e-02, -6.854055811349859e-02, -7.273917395218911e-02, -7.890773403354757e-02, -7.580009323164300e-02, -7.580009323164301e-02, -8.555972782736858e-02, -3.278298956229962e-02, -3.795816484553944e-02, -7.746567920922533e-02, -4.492380583371023e-02, -4.492380583371023e-02, -1.668708497695370e-02, -3.756764026047463e-03, -6.183170858654725e-03, -4.400508571061647e-02, -8.279210376405598e-03, -8.279210376405591e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
