
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ml2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.387852018555977e-02, -4.387852150288474e-02, -4.387852834969936e-02, -4.387850675878882e-02, -4.387852087220325e-02, -4.387852087220325e-02, -4.147068168795216e-02, -4.147068732141052e-02, -4.147095263803063e-02, -4.147106437214571e-02, -4.147069602002653e-02, -4.147069602002653e-02, -3.267604765485140e-02, -3.266734658434507e-02, -3.243720819822753e-02, -3.250435746171429e-02, -3.267287564892022e-02, -3.267287564892022e-02, -1.955665853278849e-02, -1.969698140430650e-02, -3.414522003537467e-02, -1.624083084477761e-02, -1.959892125544961e-02, -1.959892125544961e-02, -2.044727090154992e-03, -2.134898919888317e-03, -7.302411339091697e-03, -1.019068507175099e-03, -2.114203482856760e-03, -2.114203482856760e-03, -4.238249318702782e-02, -4.238282749556945e-02, -4.238252846464899e-02, -4.238278839334658e-02, -4.238266311896251e-02, -4.238266311896251e-02, -3.948623255800807e-02, -3.951636478501123e-02, -3.947394472823492e-02, -3.949761290012066e-02, -3.952235519209343e-02, -3.952235519209343e-02, -3.146618536004414e-02, -3.219723997530588e-02, -3.098986788675016e-02, -3.137320062966097e-02, -3.180246730863452e-02, -3.180246730863452e-02, -1.331461174758534e-02, -1.963236498482081e-02, -1.319893653712060e-02, -3.940230265396735e-02, -1.465630637223211e-02, -1.465630637223211e-02, -9.844254743335069e-04, -1.119122670557267e-03, -8.478362951446416e-04, -9.471042076344444e-03, -1.023506247666388e-03, -1.023506247666388e-03, -3.174640842108756e-02, -3.169885519802796e-02, -3.171594341639850e-02, -3.172909521863702e-02, -3.172251616827756e-02, -3.172251616827756e-02, -3.145500564055224e-02, -3.014162808382879e-02, -3.055160687361459e-02, -3.091112845525021e-02, -3.073031749796823e-02, -3.073031749796824e-02, -3.260420759258411e-02, -2.208961332652238e-02, -2.394154900368948e-02, -2.654465333588102e-02, -2.525334577178727e-02, -2.525334577178725e-02, -2.914672241318481e-02, -6.862064703170030e-03, -8.732206861301568e-03, -2.595089825048458e-02, -1.151772105221273e-02, -1.151772105221274e-02, -2.369095642998917e-03, -3.168779757094666e-04, -5.945355329268561e-04, -1.113501918608616e-02, -8.749945129635128e-04, -8.749945129635118e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ml2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.405941941715425e-02, -4.405942042811394e-02, -4.405942568251483e-02, -4.405940911328288e-02, -4.405941994417469e-02, -4.405941994417469e-02, -4.236543793988286e-02, -4.236544195513483e-02, -4.236563105925051e-02, -4.236571069729194e-02, -4.236544815508109e-02, -4.236544815508109e-02, -3.549942189619266e-02, -3.549204093378602e-02, -3.529640166695418e-02, -3.535356786375930e-02, -3.549673127341948e-02, -3.549673127341948e-02, -2.309000224350370e-02, -2.323603008711701e-02, -3.672918266273648e-02, -1.955766275895830e-02, -2.313401288240885e-02, -2.313401288240885e-02, -2.679980801276384e-03, -2.796436112882562e-03, -9.264398231301169e-03, -1.345672683926204e-03, -2.769720075410966e-03, -2.769720075410966e-03, -4.300916863272576e-02, -4.300940248096895e-02, -4.300919330943320e-02, -4.300937512910737e-02, -4.300928750000409e-02, -4.300928750000409e-02, -4.092066676342904e-02, -4.094306125721767e-02, -4.091153030536501e-02, -4.092912637677457e-02, -4.094751168982430e-02, -4.094751168982430e-02, -3.446210791816480e-02, -3.509155087981033e-02, -3.404765210261432e-02, -3.438146843743570e-02, -3.475265272848450e-02, -3.475265272848450e-02, -1.631117313479827e-02, -2.316882165721923e-02, -1.618036538217523e-02, -4.085821501768477e-02, -1.781466975531764e-02, -1.781466975531764e-02, -1.300279089805795e-03, -1.476651183464163e-03, -1.121082528364039e-03, -1.186455126995878e-02, -1.351485945194095e-03, -1.351485945194095e-03, -3.470433701614400e-02, -3.466331487432068e-02, -3.467806008764301e-02, -3.468940561017482e-02, -3.468373045901045e-02, -3.468373045901045e-02, -3.445241939338878e-02, -3.330111736055383e-02, -3.366329027107886e-02, -3.397880948749624e-02, -3.382037140701322e-02, -3.382037140701322e-02, -3.543844683774003e-02, -2.568237756757474e-02, -2.751902858740002e-02, -3.001589981588225e-02, -2.878972874618041e-02, -2.878972874618037e-02, -3.241174142709383e-02, -8.728339503634414e-03, -1.098611543882130e-02, -2.945514547170602e-02, -1.425806637133037e-02, -1.425806637133037e-02, -3.098280127571767e-03, -4.209499567842103e-04, -7.878061569917225e-04, -1.381496176958751e-02, -1.156740727910949e-03, -1.156740727910948e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
