
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ob_pw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.642453044603752e-01, -1.642453899535588e-01, -1.642457964201414e-01, -1.642445238864799e-01, -1.642451869086223e-01, -1.642451869086223e-01, -1.097389435740873e-01, -1.097390062139783e-01, -1.097411652381092e-01, -1.097429225492210e-01, -1.097397073599035e-01, -1.097397073599035e-01, -6.526798488783382e-02, -6.524078027572072e-02, -6.458708565435752e-02, -6.478927393484940e-02, -6.453465896226071e-02, -6.453465896226071e-02, -3.679134411364982e-02, -3.704023928418915e-02, -6.899350811917233e-02, -3.224703818827741e-02, -2.688405778932450e-02, -2.688405778932451e-02, -3.433281688357709e-03, -3.620373282008477e-03, -1.543836972061451e-02, -1.898218017955394e-03, -2.081645800619921e-03, -2.081645800619921e-03, -1.215760377844885e-01, -1.215814720950455e-01, -1.215763082931751e-01, -1.215811058671509e-01, -1.215787814638327e-01, -1.215787814638327e-01, -9.336819739092679e-02, -9.356957974249173e-02, -9.322012958891372e-02, -9.339901370588863e-02, -9.354934336802738e-02, -9.354934336802738e-02, -6.205472785515521e-02, -6.403477403766282e-02, -6.016621108151252e-02, -6.108549469341891e-02, -6.230912221351824e-02, -6.230912221351821e-02, -2.680761434189601e-02, -3.686058051361475e-02, -2.568042286553685e-02, -9.283080892916598e-02, -2.903260072167164e-02, -2.903260072167164e-02, -1.422803645763967e-03, -1.851378629034369e-03, -1.371507238503561e-03, -2.071304235614772e-02, -1.569678019681577e-03, -1.569678019681576e-03, -6.216929177076267e-02, -6.203277596188773e-02, -6.208088195825619e-02, -6.212045859906769e-02, -6.210065559191730e-02, -6.210065559191730e-02, -6.151875452626628e-02, -5.796640589132132e-02, -5.902722956154921e-02, -6.004275862027124e-02, -5.952864872358203e-02, -5.952864872358203e-02, -6.517702333181798e-02, -4.108077486149572e-02, -4.459404471703969e-02, -5.028649072961521e-02, -4.738019718494841e-02, -4.738019718494841e-02, -5.608690393785676e-02, -1.504007517756431e-02, -1.822876768887048e-02, -4.950608104387395e-02, -2.363236298621235e-02, -2.363236298621236e-02, -4.897694948106737e-03, -4.322941125627803e-04, -9.722085146839559e-04, -2.288400224419995e-02, -1.457897217946197e-03, -1.457897217946198e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ob_pw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.744635421591472e-01, -1.744639260610201e-01, -1.744634962887128e-01, -1.744641436476732e-01, -1.744645860196407e-01, -1.744638703139993e-01, -1.744618147695441e-01, -1.744640856757392e-01, -1.744617162367853e-01, -1.744655159482164e-01, -1.744617162367853e-01, -1.744655159482164e-01, -1.194120224262990e-01, -1.194148738796405e-01, -1.194118839646820e-01, -1.194151400271415e-01, -1.194178634704741e-01, -1.194135609602076e-01, -1.194189695380750e-01, -1.194160364582224e-01, -1.194533388487062e-01, -1.193751567163289e-01, -1.194533388487062e-01, -1.193751567163289e-01, -7.363486992478541e-02, -7.310518058472461e-02, -7.366718581024530e-02, -7.301684883088859e-02, -7.219368100053038e-02, -7.311096955478420e-02, -7.300620709545995e-02, -7.271828480877522e-02, -6.866169138989571e-02, -7.735263387232003e-02, -6.866169138989571e-02, -7.735263387232003e-02, -4.419428538406968e-02, -4.114467502242045e-02, -4.471672828360899e-02, -4.122430260403386e-02, -7.973588574607450e-02, -7.509124253310577e-02, -3.803014856025450e-02, -3.706960996198583e-02, -2.523187952489180e-02, -6.993864063300850e-02, -2.523187952489182e-02, -6.993864063300849e-02, -4.869496944622125e-03, -4.450265777304522e-03, -5.159067095352052e-03, -4.661341258022054e-03, -1.964964505988223e-02, -1.797041556366804e-02, -2.562703048885350e-03, -2.632441982432797e-03, -2.625383429985027e-03, -4.022730879787936e-03, -2.625383429985027e-03, -4.022730879787936e-03, -1.314169400026213e-01, -1.314716677204153e-01, -1.314217274680224e-01, -1.314779011751224e-01, -1.314167053281887e-01, -1.314724516608126e-01, -1.314219877382541e-01, -1.314768973592967e-01, -1.314192201603140e-01, -1.314749520080951e-01, -1.314192201603140e-01, -1.314749520080951e-01, -1.026489171720505e-01, -1.026581066845248e-01, -1.028359616752677e-01, -1.028855495534709e-01, -1.026584338023307e-01, -1.023446009005347e-01, -1.028493870199478e-01, -1.025219230702783e-01, -1.024427402187028e-01, -1.032422208437001e-01, -1.024427402187028e-01, -1.032422208437001e-01, -6.979191719945821e-02, -7.013177453902852e-02, -7.209244021411991e-02, -7.203265724914809e-02, -7.032504419131987e-02, -6.581652902033486e-02, -7.109707741706364e-02, -6.696178315076440e-02, -6.718610308337511e-02, -7.376871573683633e-02, -6.718610308337508e-02, -7.376871573683629e-02, -3.174358254528691e-02, -3.119552006148029e-02, -4.286149516465036e-02, -4.246320633992319e-02, -3.175709011634653e-02, -2.886861649367132e-02, -1.020597286223109e-01, -1.021410444576877e-01, -3.592117240870880e-02, -3.229099919622338e-02, -3.592117240870880e-02, -3.229099919622338e-02, -2.015509863496540e-03, -1.890433427121395e-03, -2.564370966085268e-03, -2.503337713738194e-03, -1.977433140133631e-03, -1.796682259646554e-03, -2.477484944866975e-02, -2.450961478781789e-02, -2.907920007870583e-03, -1.864704049592199e-03, -2.907920007870583e-03, -1.864704049592198e-03, -7.033202617290317e-02, -6.983661673640087e-02, -7.018900499882157e-02, -6.968956116901308e-02, -7.024020551536830e-02, -6.974060320425716e-02, -7.028009108306220e-02, -6.978477700489695e-02, -7.026010785363536e-02, -6.976269928490804e-02, -7.026010785363536e-02, -6.976269928490804e-02, -6.960238731362701e-02, -6.918245397468079e-02, -6.586697502133412e-02, -6.534453978149729e-02, -6.701069359526091e-02, -6.646704840037310e-02, -6.803991537337044e-02, -6.760255728900227e-02, -6.750256516244962e-02, -6.704400443232597e-02, -6.750256516244962e-02, -6.704400443232597e-02, -7.338136795971212e-02, -7.316362263308751e-02, -4.757108916069289e-02, -4.705895480537774e-02, -5.164518124425844e-02, -5.069007775974886e-02, -5.764348899221397e-02, -5.705537727165124e-02, -5.417805956133136e-02, -5.421373689712136e-02, -5.417805956133137e-02, -5.421373689712136e-02, -6.399934801157973e-02, -6.319348118002516e-02, -1.840359973683622e-02, -1.820007769858522e-02, -2.250643891008689e-02, -2.127694864011303e-02, -5.730682295906257e-02, -5.573249106470080e-02, -2.938584448289739e-02, -2.664766480328017e-02, -2.938584448289741e-02, -2.664766480328018e-02, -6.695679871104889e-03, -6.359066582039191e-03, -5.900072496108994e-04, -5.873736613453779e-04, -1.410455442967463e-03, -1.265726395478036e-03, -2.747403668003847e-02, -2.668760417397928e-02, -2.634609562164966e-03, -1.732143182686435e-03, -2.634609562164966e-03, -1.732143182686434e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
