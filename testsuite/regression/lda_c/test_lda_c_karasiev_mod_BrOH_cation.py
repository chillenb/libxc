
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_karasiev_mod_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.644269255099727e-01, -1.644270111758661e-01, -1.644274184636790e-01, -1.644261433585207e-01, -1.644268077194450e-01, -1.644268077194450e-01, -1.098118260955690e-01, -1.098118887449974e-01, -1.098140480993669e-01, -1.098158056801323e-01, -1.098125899136604e-01, -1.098125899136604e-01, -6.566011059370011e-02, -6.563336875400079e-02, -6.499028145123577e-02, -6.518905575482803e-02, -6.495305672661397e-02, -6.495305672661397e-02, -3.744146196293686e-02, -3.769636726646683e-02, -6.933137578227927e-02, -3.278245382623856e-02, -2.858023157677386e-02, -2.858023157677386e-02, -3.690109417020979e-03, -3.861500980167389e-03, -1.509012953040241e-02, -2.230878435484616e-03, -2.412678959208561e-03, -2.412678959208561e-03, -1.216611524887804e-01, -1.216665961569141e-01, -1.216614234591085e-01, -1.216662293033963e-01, -1.216639008910899e-01, -1.216639008910899e-01, -9.347095153195613e-02, -9.367147566606498e-02, -9.332352766376942e-02, -9.350163923665838e-02, -9.365134642654228e-02, -9.365134642654228e-02, -6.249933703515820e-02, -6.444677172657735e-02, -6.064711306172243e-02, -6.155012207809272e-02, -6.275880634662113e-02, -6.275880634662118e-02, -2.710672407348206e-02, -3.750425609439645e-02, -2.592988281745460e-02, -9.293592622020387e-02, -2.945942401304768e-02, -2.945942401304768e-02, -1.745141233744126e-03, -2.183999613605858e-03, -1.691701879246343e-03, -2.063744108124069e-02, -1.923623876186017e-03, -1.923623876186018e-03, -6.261202901206341e-02, -6.247777895118779e-02, -6.252508665537895e-02, -6.256400575951292e-02, -6.254453173146325e-02, -6.254453173146325e-02, -6.197228474074632e-02, -5.847907979426731e-02, -5.952232536794674e-02, -6.052090388219049e-02, -6.001537301414991e-02, -6.001537301414991e-02, -6.557056242807166e-02, -4.176234834679702e-02, -4.527277686826381e-02, -5.091424240097087e-02, -4.803928085984253e-02, -4.803928085984253e-02, -5.663032484595850e-02, -1.467165613714986e-02, -1.800530149626400e-02, -5.014409618152081e-02, -2.375821487515305e-02, -2.375821487515305e-02, -5.011793022580002e-03, -6.117206973181421e-04, -1.257137586246735e-03, -2.294955003225789e-02, -1.804075121422911e-03, -1.804075121422908e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_karasiev_mod_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.746657950114507e-01, -1.746662067758225e-01, -1.746657397285904e-01, -1.746664340710583e-01, -1.746668796272799e-01, -1.746661119774701e-01, -1.746639977944989e-01, -1.746664335150447e-01, -1.746638449319694e-01, -1.746679204151956e-01, -1.746638449319694e-01, -1.746679204151956e-01, -1.194863719787733e-01, -1.194892458579367e-01, -1.194862320472295e-01, -1.194895137179670e-01, -1.194922454658318e-01, -1.194879091022778e-01, -1.194933495544776e-01, -1.194903933881067e-01, -1.195280085137078e-01, -1.194492114024478e-01, -1.195280085137078e-01, -1.194492114024478e-01, -7.387499112257900e-02, -7.338961719690068e-02, -7.390260073802433e-02, -7.330671563216057e-02, -7.250523190040949e-02, -7.334421114275212e-02, -7.326353769919913e-02, -7.300005264831544e-02, -6.927693199788983e-02, -7.723742962152835e-02, -6.927693199788983e-02, -7.723742962152835e-02, -4.467707687535719e-02, -4.211467499933685e-02, -4.516289773216033e-02, -4.222569216993848e-02, -7.976935974432714e-02, -7.546856535126412e-02, -3.865305345055643e-02, -3.785743404580057e-02, -2.800626753715360e-02, -6.635454769266799e-02, -2.800626753715359e-02, -6.635454769266795e-02, -4.977655232854259e-03, -4.646661074482656e-03, -5.231422597330886e-03, -4.837793632568236e-03, -1.923824378686833e-02, -1.788641744196515e-02, -2.901784320941326e-03, -2.955911605341341e-03, -2.801242914493122e-03, -5.051368463511843e-03, -2.801242914493122e-03, -5.051368463511843e-03, -1.315183560481219e-01, -1.315744848728800e-01, -1.315231389672520e-01, -1.315807512270072e-01, -1.315181090319769e-01, -1.315752825706474e-01, -1.315234144794503e-01, -1.315797302530297e-01, -1.315206304034732e-01, -1.315777892789292e-01, -1.315206304034732e-01, -1.315777892789292e-01, -1.027118538131834e-01, -1.027208500768975e-01, -1.028991091997995e-01, -1.029476735495175e-01, -1.027180788258244e-01, -1.024109350756999e-01, -1.029087534162495e-01, -1.025881559079298e-01, -1.025136100304784e-01, -1.032965634071063e-01, -1.025136100304784e-01, -1.032965634071063e-01, -7.012087865983174e-02, -7.042951935642515e-02, -7.237106647201853e-02, -7.231647194053833e-02, -7.044656412327473e-02, -6.637222829511175e-02, -7.122656386452461e-02, -6.747994430677590e-02, -6.777767914689216e-02, -7.376589645521170e-02, -6.777767914689220e-02, -7.376589645521174e-02, -3.224273771789255e-02, -3.179532896082940e-02, -4.356242607973735e-02, -4.322785913258038e-02, -3.198028761325139e-02, -2.962647236494923e-02, -1.021240669121066e-01, -1.022035880906718e-01, -3.622049980070999e-02, -3.323757504452848e-02, -3.622049980070999e-02, -3.323757504452848e-02, -2.349098022682805e-03, -2.252773881728153e-03, -2.891744333063182e-03, -2.844407960194730e-03, -2.304106427786130e-03, -2.164964887740217e-03, -2.492540260288642e-02, -2.471126125903795e-02, -3.189444146437336e-03, -2.271928256266461e-03, -3.189444146437338e-03, -2.271928256266462e-03, -7.062073265480116e-02, -7.017068011114187e-02, -7.047972994177713e-02, -7.002618794725020e-02, -7.053014509996391e-02, -7.007639726410628e-02, -7.056958959805125e-02, -7.011968596583454e-02, -7.054982938020024e-02, -7.009804862832732e-02, -7.054982938020024e-02, -7.009804862832732e-02, -6.990523832090620e-02, -6.952445721883901e-02, -6.622666899908085e-02, -6.575779638711439e-02, -6.735026523252535e-02, -6.686083650499183e-02, -6.836696613252831e-02, -6.797206228885995e-02, -6.783754415115467e-02, -6.742411220585877e-02, -6.783754415115467e-02, -6.742411220585877e-02, -7.363594379352280e-02, -7.343646659349910e-02, -4.823365275623921e-02, -4.779762114516421e-02, -5.222684408610632e-02, -5.140441012644269e-02, -5.814693939715481e-02, -5.763130439749288e-02, -5.477799186865068e-02, -5.480898685409134e-02, -5.477799186865068e-02, -5.480898685409134e-02, -6.437855117336101e-02, -6.365932564121475e-02, -1.810963362314951e-02, -1.794592669793634e-02, -2.236277575095219e-02, -2.137220183417470e-02, -5.776249449001288e-02, -5.638544923768955e-02, -2.950345887272007e-02, -2.728113578868449e-02, -2.950345887272006e-02, -2.728113578868447e-02, -6.603454440940502e-03, -6.335660309032735e-03, -8.129993436562343e-04, -8.110351970259896e-04, -1.721370433326116e-03, -1.611001259694486e-03, -2.773132769654002e-02, -2.709436285304525e-02, -2.908086077443128e-03, -2.144908422055251e-03, -2.908086077443122e-03, -2.144908422055248e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
