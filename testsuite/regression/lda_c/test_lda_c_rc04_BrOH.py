
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rc04_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.252163276220344e-02, -8.252163563923416e-02, -8.252165059289811e-02, -8.252160343758631e-02, -8.252163426174354e-02, -8.252163426174354e-02, -7.688453465388621e-02, -7.688454781326502e-02, -7.688516757569862e-02, -7.688542857978276e-02, -7.688456813264445e-02, -7.688456813264445e-02, -5.716929752081534e-02, -5.715062706403051e-02, -5.665741113401252e-02, -5.680119966739269e-02, -5.716249094632884e-02, -5.716249094632884e-02, -3.095782871425766e-02, -3.121712760872995e-02, -6.034572024035220e-02, -2.496871618076730e-02, -3.103587546650780e-02, -3.103587546650780e-02, -2.645005631764353e-03, -2.766424361852558e-03, -1.022094652839265e-02, -1.289828434931426e-03, -2.738526745575978e-03, -2.738526745575978e-03, -7.902265467113948e-02, -7.902344141973934e-02, -7.902273769202002e-02, -7.902334939800890e-02, -7.902305458205443e-02, -7.902305458205443e-02, -7.229023501203419e-02, -7.235937058225730e-02, -7.226204731605616e-02, -7.231634385685877e-02, -7.237311732490896e-02, -7.237311732490896e-02, -5.458928924292716e-02, -5.614437539360029e-02, -5.358245536062085e-02, -5.439234338564852e-02, -5.530315107252597e-02, -5.530315107252597e-02, -1.990882737298290e-02, -3.109766633603735e-02, -1.971327427786762e-02, -7.209776817039200e-02, -2.220203062077772e-02, -2.220203062077772e-02, -1.244949317396326e-03, -1.419796722738452e-03, -1.068626076994309e-03, -1.360031422898987e-02, -1.295581961390982e-03, -1.295581961390982e-03, -5.518397466503919e-02, -5.508293518758797e-02, -5.511923788394114e-02, -5.514718235511678e-02, -5.513320294876692e-02, -5.513320294876692e-02, -5.456559994102273e-02, -5.180195869336845e-02, -5.266052211661962e-02, -5.341650270487353e-02, -5.303594441648166e-02, -5.303594441648166e-02, -5.701519567996455e-02, -3.571014957021185e-02, -3.927981707002428e-02, -4.443100547064392e-02, -4.185629366498697e-02, -4.185629366498697e-02, -4.973407895617008e-02, -9.551600475590177e-03, -1.243381501671344e-02, -4.324240666437908e-02, -1.691046687615321e-02, -1.691046687615321e-02, -3.083378454659644e-03, -3.934991813957252e-04, -7.443986381452207e-04, -1.628288141415730e-02, -1.103604204565626e-03, -1.103604204565625e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rc04_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.291672243913729e-02, -8.291672440320196e-02, -8.291673461162637e-02, -8.291670242009402e-02, -8.291672346283020e-02, -8.291672346283020e-02, -7.897462475751531e-02, -7.897463423983114e-02, -7.897508082341315e-02, -7.897526889479986e-02, -7.897464888145884e-02, -7.897464888145884e-02, -6.322786775565765e-02, -6.321148734445134e-02, -6.277775773722485e-02, -6.290440499919848e-02, -6.322189637201880e-02, -6.322189637201880e-02, -3.748108879937721e-02, -3.776275999880292e-02, -6.597411675301863e-02, -3.082548341389211e-02, -3.756592606599077e-02, -3.756592606599077e-02, -3.499165668741334e-03, -3.658472655138819e-03, -1.321623627368116e-02, -1.713232519430111e-03, -3.621879969098965e-03, -3.621879969098965e-03, -8.049744633673035e-02, -8.049800014469190e-02, -8.049750477700141e-02, -8.049793536901483e-02, -8.049772784255964e-02, -8.049772784255964e-02, -7.558094734753067e-02, -7.563325184971813e-02, -7.555961108816826e-02, -7.560070443744756e-02, -7.564364743355065e-02, -7.564364743355065e-02, -6.093788051991833e-02, -6.232453406946133e-02, -6.002977482288246e-02, -6.076088523723837e-02, -6.157682623593948e-02, -6.157682623593948e-02, -2.497908934494661e-02, -3.763305849771435e-02, -2.474903904485167e-02, -7.543513719966276e-02, -2.765407102948205e-02, -2.765407102948205e-02, -1.653840891566564e-03, -1.885139117720069e-03, -1.420346793991923e-03, -1.740413637055837e-02, -1.720845411456794e-03, -1.720845411456794e-03, -6.147044038481912e-02, -6.138015589122822e-02, -6.141260380982599e-02, -6.143757383165679e-02, -6.142508319443674e-02, -6.142508319443674e-02, -6.091660736611806e-02, -5.840400077980813e-02, -5.919112585224732e-02, -5.987931606019034e-02, -5.953345528735841e-02, -5.953345528735841e-02, -6.309258399104978e-02, -4.255791379082842e-02, -4.625228195800472e-02, -5.140330817421664e-02, -4.885527642014026e-02, -4.885527642014026e-02, -5.648394298888043e-02, -1.237599918215059e-02, -1.596878872250275e-02, -5.023363210084359e-02, -2.141830695934858e-02, -2.141830695934858e-02, -4.073783763779138e-03, -5.240571694068120e-04, -9.903539813879169e-04, -2.066393960356843e-02, -1.466685636452449e-03, -1.466685636452448e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
