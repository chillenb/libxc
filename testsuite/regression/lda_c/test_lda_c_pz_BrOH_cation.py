
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pz_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.656062519790148e-01, -1.656063376077927e-01, -1.656067447196008e-01, -1.656054701635702e-01, -1.656061342339208e-01, -1.656061342339208e-01, -1.109130085823631e-01, -1.109130715647810e-01, -1.109152424349853e-01, -1.109170093964235e-01, -1.109137733830205e-01, -1.109137733830205e-01, -6.651941625540096e-02, -6.649292835183888e-02, -6.585907381341305e-02, -6.605536943185075e-02, -6.576114696294832e-02, -6.576114696294832e-02, -3.812085797881110e-02, -3.838943883306543e-02, -7.014270110956972e-02, -3.314869874771516e-02, -2.733702693610676e-02, -2.733702693610677e-02, -3.752126803511055e-03, -3.915342630177624e-03, -1.470257672498181e-02, -2.339681791868890e-03, -2.431529719776537e-03, -2.431529719776537e-03, -1.228106946018525e-01, -1.228161541947431e-01, -1.228109663154323e-01, -1.228157863296398e-01, -1.228134510307016e-01, -1.228134510307016e-01, -9.445430402100971e-02, -9.465661065249036e-02, -9.430550931828290e-02, -9.448520487301314e-02, -9.463594499588504e-02, -9.463594499588504e-02, -6.341982529965894e-02, -6.532543451115785e-02, -6.160372426016331e-02, -6.248132298489614e-02, -6.363499882737186e-02, -6.363499882737184e-02, -2.709428221633022e-02, -3.819790154381998e-02, -2.583660283870931e-02, -9.391448555363270e-02, -2.958037893418721e-02, -2.958037893418721e-02, -1.857394997593759e-03, -2.293505868087830e-03, -1.803445615913953e-03, -2.032244063089406e-02, -2.010136950952931e-03, -2.010136950952931e-03, -6.352955900239153e-02, -6.339869854119638e-02, -6.344480154746047e-02, -6.348274070616086e-02, -6.346375625011022e-02, -6.346375625011022e-02, -6.290675648329651e-02, -5.957402179916579e-02, -6.053969601083672e-02, -6.150077646806445e-02, -6.101357297854985e-02, -6.101357297854985e-02, -6.643130495035598e-02, -4.271363563296185e-02, -4.638609210697461e-02, -5.215715005397854e-02, -4.923953603834933e-02, -4.923953603834933e-02, -5.779839570299717e-02, -1.429610382303140e-02, -1.763014340984296e-02, -5.137824549268445e-02, -2.355227253342397e-02, -2.355227253342397e-02, -5.012274254038607e-03, -6.893544113049650e-04, -1.363626532313715e-03, -2.271838678548942e-02, -1.897353693850022e-03, -1.897353693850021e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pz_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.758406395402687e-01, -1.758411676776745e-01, -1.758405442749326e-01, -1.758414348527830e-01, -1.758418905237438e-01, -1.758409059204049e-01, -1.758385567886524e-01, -1.758416808936923e-01, -1.758381718156033e-01, -1.758433991137636e-01, -1.758381718156033e-01, -1.758433991137636e-01, -1.206387667665488e-01, -1.206424610205603e-01, -1.206385688353215e-01, -1.206427872886878e-01, -1.206456765730596e-01, -1.206401023561433e-01, -1.206465893566938e-01, -1.206427893269529e-01, -1.206920655423944e-01, -1.205907750910088e-01, -1.206920655423944e-01, -1.205907750910088e-01, -7.469833492850418e-02, -7.406591896975052e-02, -7.474252494793812e-02, -7.396609725523333e-02, -7.312129019028568e-02, -7.421527939341560e-02, -7.404848110128312e-02, -7.370498609043834e-02, -6.887164506593461e-02, -7.923882640065402e-02, -6.887164506593461e-02, -7.923882640065402e-02, -4.621299553808773e-02, -4.276285753525566e-02, -4.678279412590959e-02, -4.282787840822577e-02, -8.121710698067305e-02, -7.563479838114638e-02, -3.954208937418206e-02, -3.847501376270857e-02, -2.575021480120265e-02, -7.198658901534942e-02, -2.575021480120267e-02, -7.198658901534939e-02, -5.041978628788053e-03, -4.620229426329916e-03, -5.293251790785663e-03, -4.791743982178698e-03, -1.903557405434599e-02, -1.728979439886595e-02, -2.992812236199824e-03, -3.061598482736676e-03, -2.712243568227784e-03, -5.336338715570940e-03, -2.712243568227784e-03, -5.336338715570940e-03, -1.326889772475885e-01, -1.327610746855863e-01, -1.326935562077323e-01, -1.327675590950242e-01, -1.326885820189271e-01, -1.327620213901263e-01, -1.326940156115208e-01, -1.327663531651712e-01, -1.326911086562592e-01, -1.327645291826755e-01, -1.326911086562592e-01, -1.327645291826755e-01, -1.037763028734787e-01, -1.037878857876452e-01, -1.039594241074237e-01, -1.040219502225992e-01, -1.038268841436212e-01, -1.034314212428361e-01, -1.040208808456357e-01, -1.036081056161409e-01, -1.034685489660057e-01, -1.044765913406819e-01, -1.034685489660057e-01, -1.044765913406819e-01, -7.079586875190344e-02, -7.119969340158974e-02, -7.311723808927161e-02, -7.304600049149254e-02, -7.181127272066271e-02, -6.646610829506200e-02, -7.253750228235900e-02, -6.762964707408439e-02, -6.761631927659077e-02, -7.544178015695260e-02, -6.761631927659076e-02, -7.544178015695256e-02, -3.260197778336392e-02, -3.200747170876551e-02, -4.470394086073508e-02, -4.425329636645346e-02, -3.256670003731198e-02, -2.944834185119080e-02, -1.031741689811805e-01, -1.032765620325842e-01, -3.722120593267625e-02, -3.324299834408923e-02, -3.722120593267625e-02, -3.324299834408923e-02, -2.475178889196626e-03, -2.353166025766071e-03, -2.998289401484275e-03, -2.938145815265352e-03, -2.437088749115404e-03, -2.260993343005136e-03, -2.476902054689023e-02, -2.448861163049516e-02, -3.418400656137689e-03, -2.283712565567003e-03, -3.418400656137689e-03, -2.283712565567003e-03, -7.141350847841142e-02, -7.082476342982379e-02, -7.127221886014742e-02, -7.067878767729145e-02, -7.132295432931764e-02, -7.072929679485404e-02, -7.136204296426590e-02, -7.077344982478774e-02, -7.134245328221706e-02, -7.075138687311829e-02, -7.134245328221706e-02, -7.075138687311829e-02, -7.068355393057113e-02, -7.018492904437119e-02, -6.704715147136871e-02, -6.642835994775226e-02, -6.813852154290133e-02, -6.749476352451328e-02, -6.914170153008663e-02, -6.862328329264417e-02, -6.861418172518739e-02, -6.807091844713779e-02, -6.861418172518739e-02, -6.807091844713779e-02, -7.441490812590523e-02, -7.415497266982343e-02, -4.959708263510194e-02, -4.900925164561816e-02, -5.373487172960657e-02, -5.262762877532914e-02, -5.952029558151099e-02, -5.883013036994117e-02, -5.613170286402278e-02, -5.617333571796020e-02, -5.613170286402279e-02, -5.617333571796020e-02, -6.542078775297520e-02, -6.446776209509460e-02, -1.772200323293790e-02, -1.751063833427479e-02, -2.219261076669906e-02, -2.090409707172972e-02, -5.931090737664170e-02, -5.746593293731139e-02, -2.989169941970383e-02, -2.696179471507981e-02, -2.989169941970384e-02, -2.696179471507981e-02, -6.567736820739442e-03, -6.226043015272219e-03, -9.055992065478812e-04, -9.031598979579486e-04, -1.852660225045123e-03, -1.713656671764488e-03, -2.779493265563503e-02, -2.695625070638009e-02, -3.121880602997673e-03, -2.173898650359486e-03, -3.121880602997671e-03, -2.173898650359485e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
