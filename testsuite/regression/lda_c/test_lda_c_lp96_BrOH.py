
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_lp96_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_lp96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.964868534569349e-02, -5.964868692485752e-02, -5.964869513272660e-02, -5.964866924977885e-02, -5.964868616877053e-02, -5.964868616877053e-02, -5.632266668808211e-02, -5.632267497702535e-02, -5.632306535546235e-02, -5.632322975605188e-02, -5.632268777596763e-02, -5.632268777596763e-02, -4.016163681327309e-02, -4.014172068508880e-02, -3.961146279854625e-02, -3.976687778633037e-02, -4.015437742453117e-02, -4.015437742453117e-02, 5.980332648200647e-03, 5.240308075505146e-03, -4.339258011065933e-02, 2.583964138620653e-02, 5.756661102686376e-03, 5.756661102686376e-03, -1.929114056262386e+00, -1.704475696338998e+00, 8.235367822825720e-02, -1.127189902592160e+01, -1.753179923545517e+00, -1.753179923545517e+00, -5.763631730447585e-02, -5.763678875615186e-02, -5.763636705436073e-02, -5.763673361344144e-02, -5.763655694839201e-02, -5.763655694839201e-02, -5.326348715231647e-02, -5.331210766820618e-02, -5.324363981096646e-02, -5.328185835480499e-02, -5.332176530894746e-02, -5.332176530894746e-02, -3.729775475630379e-02, -3.905130865554614e-02, -3.611561699922108e-02, -3.706949162319957e-02, -3.811333080425153e-02, -3.811333080425153e-02, 4.750428799607000e-02, 5.580146412382258e-03, 4.843603131667874e-02, -5.312769149828545e-02, 3.708900777585020e-02, 3.708900777585020e-02, -1.221590341799071e+01, -9.044113134320074e+00, -1.720555746457728e+01, 7.823465578926843e-02, -1.115821402733168e+01, -1.115821402733168e+01, -3.797844412320794e-02, -3.786368942104150e-02, -3.790496181754371e-02, -3.793669973194441e-02, -3.792082611267125e-02, -3.792082611267125e-02, -3.727037385515739e-02, -3.392868425968944e-02, -3.499908806323545e-02, -3.591708488168437e-02, -3.545778104820366e-02, -3.545778104820366e-02, -3.999691349209181e-02, -6.298962662506705e-03, -1.399473472356452e-02, -2.332010338368333e-02, -1.889227206704275e-02, -1.889227206704274e-02, -3.122153633238811e-02, 7.835838107125445e-02, 8.230256719244940e-02, -2.132979914969427e-02, 6.234792899002035e-02, 6.234792899002035e-02, -1.249625249482260e+00, -1.449633373904438e+02, -3.786066854040033e+01, 6.553058995807239e-02, -1.601535900967988e+01, -1.601535900967993e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_lp96_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_lp96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.986554496244150e-02, -5.986554601640821e-02, -5.986555149450960e-02, -5.986553421969528e-02, -5.986554551178012e-02, -5.986554551178012e-02, -5.763919100464852e-02, -5.763919656945097e-02, -5.763945865088194e-02, -5.763956902152810e-02, -5.763920516205221e-02, -5.763920516205221e-02, -4.662258946065480e-02, -4.660879422786036e-02, -4.624129112314366e-02, -4.634904604725551e-02, -4.661756119239229e-02, -4.661756119239229e-02, -1.274811495358062e-02, -1.332931650683697e-02, -4.885306233969595e-02, 3.528334579119628e-03, -1.292394875582002e-02, -1.292394875582002e-02, -2.274072023454466e-01, -1.731785513858054e-01, 9.431796913190178e-02, -2.847322918373250e+00, -1.848305226726812e-01, -1.848305226726812e-01, -5.852008034323857e-02, -5.852039611343985e-02, -5.852011366486586e-02, -5.852035917981709e-02, -5.852024085263333e-02, -5.852024085263333e-02, -5.557971155333156e-02, -5.561253350922127e-02, -5.556631248454563e-02, -5.559211363466543e-02, -5.561905268420866e-02, -5.561905268420866e-02, -4.463292013188005e-02, -4.585262362474419e-02, -4.380808050606846e-02, -4.447381282863301e-02, -4.520076936151764e-02, -4.520076936151764e-02, 2.342936033835854e-02, -1.306260942470479e-02, 2.436048966482827e-02, -5.548802523211448e-02, 1.349569453046700e-02, 1.349569453046700e-02, -3.127209201987107e+00, -2.193050134206147e+00, -4.625488032603469e+00, 6.268275020906831e-02, -2.813712706257812e+00, -2.813712706257812e+00, -4.510692206436270e-02, -4.502706031924758e-02, -4.505578545202466e-02, -4.507787296935783e-02, -4.506682615318672e-02, -4.506682615318672e-02, -4.461383881634232e-02, -4.227652405955830e-02, -4.302707121285477e-02, -4.366934692157658e-02, -4.334815667638970e-02, -4.334815667638970e-02, -4.650847390248762e-02, -2.220230840571344e-02, -2.794316381873971e-02, -3.473713721555265e-02, -3.153207572479036e-02, -3.153207572479036e-02, -4.037028415654924e-02, 1.015202404456665e-01, 7.262611203044093e-02, -3.330096147061182e-02, 3.946775136613483e-02, 3.946775136613483e-02, -6.780498830086552e-02, -4.521336267756665e+01, -1.100328947339388e+01, 4.336658443076159e-02, -4.265665639130888e+00, -4.265665639130904e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
