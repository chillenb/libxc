
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_lp96_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_lp96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.964870204391097e-02, -5.964870385823987e-02, -5.964871248413637e-02, -5.964868547860320e-02, -5.964869954962099e-02, -5.964869954962099e-02, -5.632284900765429e-02, -5.632285753201132e-02, -5.632315131247262e-02, -5.632339041064318e-02, -5.632295442931113e-02, -5.632295442931113e-02, -4.028244506209737e-02, -4.026117520745418e-02, -3.973538878673192e-02, -3.989823889548571e-02, -3.986382281776522e-02, -3.986382281776522e-02, 8.922813678078539e-03, 8.054541620640260e-03, -4.304190801193290e-02, 2.620512535181464e-02, 1.862862441338549e-02, 1.862862441338549e-02, -6.985006446025424e+00, -6.201362619768616e+00, 6.364074488790339e-02, -2.374727201547481e+01, -1.441175232585368e+01, -1.441175232585368e+01, -5.763747354798281e-02, -5.763795999108946e-02, -5.763749777965298e-02, -5.763792719267481e-02, -5.763771915971673e-02, -5.763771915971673e-02, -5.327125680288467e-02, -5.332124603742906e-02, -5.323430805025305e-02, -5.327898602978455e-02, -5.331656455160769e-02, -5.331656455160769e-02, -3.753806648261735e-02, -3.927602323083199e-02, -3.578561287107365e-02, -3.667573915632055e-02, -3.788399096253189e-02, -3.788399096253189e-02, 5.198176355862325e-02, 8.834792292358912e-03, 5.754528624480316e-02, -5.313597222163821e-02, 4.045394598385362e-02, 4.045394598385362e-02, -4.138406659133463e+01, -2.493958243497249e+01, -4.425870704797508e+01, 8.084864623723675e-02, -2.976043726362858e+01, -2.976043726362858e+01, -3.764336355400857e-02, -3.751825336400150e-02, -3.756243466405362e-02, -3.759869698881001e-02, -3.758056052166701e-02, -3.758056052166701e-02, -3.703976424872360e-02, -3.339969673084298e-02, -3.455162933817615e-02, -3.560091761787951e-02, -3.507590659332897e-02, -3.507590659332897e-02, -4.020964354934049e-02, -3.739189123419233e-03, -1.222940192489155e-02, -2.301539680179613e-02, -1.790519061046358e-02, -1.790519061046358e-02, -3.121052006958028e-02, 5.637603649095257e-02, 8.371804420047846e-02, -2.173118194474550e-02, 6.808969432318522e-02, 6.808969432318522e-02, -3.059910903498975e+00, -3.902075603125413e+02, -8.479159032896408e+01, 7.198810896396039e-02, -3.513591098997308e+01, -3.513591098997315e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_lp96_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_lp96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.986555610717677e-02, -5.986555731809733e-02, -5.986556307519869e-02, -5.986554505114818e-02, -5.986555444243613e-02, -5.986555444243613e-02, -5.763931340532299e-02, -5.763931912816920e-02, -5.763951635828712e-02, -5.763967687725986e-02, -5.763938418038252e-02, -5.763938418038252e-02, -4.670625699611763e-02, -4.669152777286307e-02, -4.632721640161508e-02, -4.644009618004993e-02, -4.641624383475119e-02, -4.641624383475119e-02, -1.042121710867126e-02, -1.111053785744680e-02, -4.861168910154227e-02, 3.842205477661303e-03, -2.548179448207187e-03, -2.548179448207184e-03, -1.598536127857925e+00, -1.375758824356690e+00, 1.136125178803828e-01, -6.622697289418711e+00, -3.783091706132086e+00, -3.783091706132086e+00, -5.852085477472763e-02, -5.852118058525898e-02, -5.852087100465558e-02, -5.852115861750064e-02, -5.852101928092684e-02, -5.852101928092684e-02, -5.558495676137373e-02, -5.561870216450008e-02, -5.556001238307882e-02, -5.559017460535486e-02, -5.561554204336233e-02, -5.561554204336233e-02, -4.480034146628979e-02, -4.600859868546398e-02, -4.357744169966660e-02, -4.419916982002478e-02, -4.504119028450126e-02, -4.504119028450126e-02, 2.798128779227897e-02, -1.049120198778693e-02, 3.395162186004582e-02, -5.549361685654996e-02, 1.661876553173793e-02, 1.661876553173793e-02, -1.210689786791922e+01, -6.989568682179631e+00, -1.300950343530297e+01, 6.847917148755173e-02, -8.479799741724650e+00, -8.479799741724650e+00, -4.487367308546303e-02, -4.478654124645600e-02, -4.481731357215377e-02, -4.484256814681586e-02, -4.482993741016055e-02, -4.482993741016055e-02, -4.445308606949801e-02, -4.190494901208278e-02, -4.271353753034479e-02, -4.344828635193170e-02, -4.308086678498793e-02, -4.308086678498793e-02, -4.665583975779462e-02, -2.026303491632671e-02, -2.663760039518832e-02, -3.451773187561279e-02, -3.081254771904898e-02, -3.081254771904898e-02, -4.036250312727799e-02, 1.171305157980185e-01, 8.932306696829960e-02, -3.359117667686439e-02, 4.668290930638189e-02, 4.668290930638187e-02, -5.145772321820712e-01, -1.250072813597208e+02, -2.587338318202649e+01, 5.214898818987359e-02, -1.015212112526259e+01, -1.015212112526262e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
