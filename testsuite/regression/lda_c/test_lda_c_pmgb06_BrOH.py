
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pmgb06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pmgb06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.229967331543838e-04, -4.229958008999606e-04, -4.229909554058991e-04, -4.230062353090870e-04, -4.229962472535351e-04, -4.229962472535351e-04, -2.037606309611872e-03, -2.037602813622283e-03, -2.037438163491672e-03, -2.037368822987463e-03, -2.037597415467579e-03, -2.037597415467579e-03, -7.218040238934598e-03, -7.223259655245105e-03, -7.361471901633842e-03, -7.321112609192243e-03, -7.219942943659650e-03, -7.219942943659650e-03, -1.516948910239333e-02, -1.508420178130959e-02, -6.343266039541770e-03, -1.715417626042213e-02, -1.514379337921552e-02, -1.514379337921552e-02, -5.818623205290596e-03, -6.038055627805800e-03, -1.567260456124467e-02, -3.160560683388739e-03, -5.987869654422874e-03, -5.987869654422874e-03, -1.458436909686606e-03, -1.458218812482046e-03, -1.458413895400083e-03, -1.458244322361602e-03, -1.458326049600488e-03, -1.458326049600488e-03, -3.230313355176753e-03, -3.212610416460517e-03, -3.237530218486124e-03, -3.223628271119501e-03, -3.209090019320060e-03, -3.209090019320060e-03, -7.947907975726951e-03, -7.505914484543758e-03, -8.237336611444698e-03, -8.004324760404028e-03, -7.744239403989907e-03, -7.744239403989907e-03, -1.842586418660444e-02, -1.512346485118503e-02, -1.845349361726558e-02, -3.279580571717591e-03, -1.795680183469667e-02, -1.795680183469667e-02, -3.064496683269881e-03, -3.435255775863510e-03, -2.680611943595447e-03, -1.776277959788189e-02, -3.172830133094030e-03, -3.172830133094030e-03, -7.778150671564601e-03, -7.806929635300060e-03, -7.796586572177953e-03, -7.788627160844004e-03, -7.792608659231298e-03, -7.792608659231298e-03, -7.954688816791936e-03, -8.755095462110930e-03, -8.504514822152615e-03, -8.285280663880335e-03, -8.395473918596720e-03, -8.395473918596720e-03, -7.261147552547109e-03, -1.364371230351530e-02, -1.253577865625752e-02, -1.096059915658601e-02, -1.174550548731704e-02, -1.174550548731705e-02, -9.365035464811660e-03, -1.509229746443576e-02, -1.719667724099899e-02, -1.132235140534797e-02, -1.855650980077508e-02, -1.855650980077507e-02, -6.598877358126230e-03, -1.088700612793212e-03, -1.944029361431437e-03, -1.849094037271897e-02, -2.757618347061996e-03, -2.757618347061998e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pmgb06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pmgb06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.949743727279524e-04, -2.949737095273327e-04, -2.949702624703986e-04, -2.949811325104206e-04, -2.949740270607833e-04, -2.949740270607833e-04, -1.482342024363824e-03, -1.482339395911864e-03, -1.482215604281126e-03, -1.482163470981559e-03, -1.482335337321654e-03, -1.482335337321654e-03, -5.524486205995198e-03, -5.528768335782328e-03, -5.642428510414648e-03, -5.609184747502003e-03, -5.526047145019645e-03, -5.526047145019645e-03, -1.302091311883594e-02, -1.293425779887122e-02, -4.816070239983100e-03, -1.529614767596810e-02, -1.299476604053949e-02, -1.299476604053949e-02, -7.371576604444917e-03, -7.640605497245626e-03, -1.814441242272012e-02, -4.063855142937797e-03, -7.579133991952578e-03, -7.579133991952578e-03, -1.049609140045332e-03, -1.049447320186461e-03, -1.049592064272366e-03, -1.049466247501211e-03, -1.049526885945145e-03, -1.049526885945145e-03, -2.387765735288659e-03, -2.374219272576197e-03, -2.393288950669059e-03, -2.382649914935752e-03, -2.371525763574450e-03, -2.371525763574450e-03, -6.130872489678836e-03, -5.761780459508661e-03, -6.375986389800633e-03, -6.178429802728907e-03, -5.960044522236936e-03, -5.960044522236936e-03, -1.768026845193742e-02, -1.297410486313106e-02, -1.777137174790050e-02, -2.425480126967049e-03, -1.657729048114099e-02, -1.657729048114099e-02, -3.942659354971415e-03, -4.409769600226560e-03, -3.457155636376447e-03, -1.935089496161205e-02, -4.079326000128987e-03, -4.079326000128987e-03, -5.988396374927153e-03, -6.012485601598704e-03, -6.003825010625693e-03, -5.997162627434498e-03, -6.000495070221659e-03, -6.000495070221659e-03, -6.136582950507102e-03, -6.821902864995504e-03, -6.604856653976442e-03, -6.416868034883371e-03, -6.511138973537156e-03, -6.511138973537154e-03, -5.559874256823218e-03, -1.149530155595735e-02, -1.038934813520907e-02, -8.841844417798450e-03, -9.605523035539619e-03, -9.605523035539635e-03, -7.360494345020634e-03, -1.765900640984600e-02, -1.915538190072128e-02, -9.191436839228847e-03, -1.889783671538803e-02, -1.889783671538801e-02, -8.325153974761041e-03, -1.421473025200333e-03, -2.520019848780461e-03, -1.907731306935516e-02, -3.554700912760542e-03, -3.554700912760539e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
