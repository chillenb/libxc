
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_3_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.648405511598220e-01, -1.648406355704161e-01, -1.648410368884953e-01, -1.648397804796067e-01, -1.648404351148261e-01, -1.648404351148261e-01, -1.112951932994869e-01, -1.112952546578454e-01, -1.112973693751792e-01, -1.112990905944239e-01, -1.112959521347226e-01, -1.112959521347226e-01, -6.735799659240124e-02, -6.733099070921157e-02, -6.667326352400453e-02, -6.687498101993096e-02, -6.683220343690405e-02, -6.683220343690405e-02, -3.783367516076459e-02, -3.811583971253089e-02, -7.115789271790306e-02, -3.286813854678461e-02, -3.490937094979982e-02, -3.490937094979982e-02, -3.781128483268440e-03, -3.949397795948751e-03, -1.476480045764679e-02, -2.344777347077936e-03, -2.867107145193080e-03, -2.867107145193080e-03, -1.228894629638285e-01, -1.228947875638927e-01, -1.228897281794414e-01, -1.228944285210549e-01, -1.228921513003013e-01, -1.228921513003013e-01, -9.524162339014051e-02, -9.543951177974781e-02, -9.509631810637739e-02, -9.527212234338979e-02, -9.542091560745652e-02, -9.542091560745652e-02, -6.411197746800631e-02, -6.611360950700056e-02, -6.225776417643027e-02, -6.318056627683066e-02, -6.449662997199711e-02, -6.449662997199711e-02, -2.691480634408860e-02, -3.786210877630756e-02, -2.573928314062936e-02, -9.471350985947057e-02, -2.943659088766670e-02, -2.943659088766670e-02, -1.859421606035464e-03, -2.298059244091198e-03, -1.807056543775558e-03, -2.027006277769076e-02, -2.135956031157031e-03, -2.135956031157031e-03, -6.422837567174108e-02, -6.409014201928574e-02, -6.413886172900897e-02, -6.417892721968334e-02, -6.415887978235470e-02, -6.415887978235470e-02, -6.356909470738309e-02, -5.995659754969316e-02, -6.103807916458120e-02, -6.207093568931280e-02, -6.154819562163426e-02, -6.154819562163426e-02, -6.726569265377597e-02, -4.238092993692999e-02, -4.610405786307186e-02, -5.205467946052694e-02, -4.902519130407835e-02, -4.902519130407835e-02, -5.803619896339517e-02, -1.432766001967130e-02, -1.763617506049360e-02, -5.125165222487840e-02, -2.349796996110540e-02, -2.349796996110540e-02, -5.048754249728516e-03, -6.837007835779698e-04, -1.363465809679047e-03, -2.262659006580695e-02, -1.992583614421383e-03, -1.992583614421379e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_3_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_3", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.749295457001435e-01, -1.749296306472575e-01, -1.749300345161308e-01, -1.749287701213851e-01, -1.749294289175557e-01, -1.749294289175557e-01, -1.207710990304258e-01, -1.207711615295577e-01, -1.207733155628291e-01, -1.207750687810459e-01, -1.207718719738143e-01, -1.207718719738143e-01, -7.551894264662884e-02, -7.549070325309198e-02, -7.480271058912930e-02, -7.501375597589903e-02, -7.496900365723393e-02, -7.496900365723393e-02, -4.407819625996778e-02, -4.438574242391204e-02, -7.948545181803979e-02, -3.863501770537622e-02, -4.087994463505813e-02, -4.087994463505813e-02, -4.855124292771217e-03, -5.066307798840092e-03, -1.812788380025448e-02, -3.038250701668385e-03, -3.702049612028713e-03, -3.702049612028713e-03, -1.325580241125445e-01, -1.325634274451385e-01, -1.325582932499804e-01, -1.325630630935517e-01, -1.325607522013059e-01, -1.325607522013059e-01, -1.043659649414998e-01, -1.045689091350832e-01, -1.042169344489968e-01, -1.043972444179738e-01, -1.045498387098990e-01, -1.045498387098990e-01, -7.211936268772556e-02, -7.421696246084346e-02, -7.017242527035245e-02, -7.114184556206689e-02, -7.252278359927325e-02, -7.252278359927325e-02, -3.202131451016274e-02, -4.410919569212703e-02, -3.070240650055123e-02, -1.038242597810963e-01, -3.483565494732278e-02, -3.483565494732278e-02, -2.417928260811004e-03, -2.978693577130348e-03, -2.350785339988656e-03, -2.450023448755835e-02, -2.771794376464288e-03, -2.771794376464288e-03, -7.224145697397530e-02, -7.209645708085508e-02, -7.214756384852564e-02, -7.218959047380809e-02, -7.216856196464956e-02, -7.216856196464956e-02, -7.154972097786393e-02, -6.775078980791728e-02, -6.888965234692336e-02, -6.997604285293486e-02, -6.942636121590681e-02, -6.942636121590681e-02, -7.542241969405972e-02, -4.901365917682240e-02, -5.302414458408132e-02, -5.938453696243039e-02, -5.615356127411612e-02, -5.615356127411612e-02, -6.572503377162907e-02, -1.761534909728904e-02, -2.146960606271460e-02, -5.852947216373369e-02, -2.817441480696623e-02, -2.817441480696624e-02, -6.438345912161947e-03, -8.986807995064498e-04, -1.780188659495115e-03, -2.718660752615484e-02, -2.588475242316035e-03, -2.588475242316028e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
