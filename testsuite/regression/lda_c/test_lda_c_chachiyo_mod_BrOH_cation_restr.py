
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_chachiyo_mod_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_chachiyo_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.644049156576365e-01, -1.644050013838465e-01, -1.644054089568074e-01, -1.644041329655821e-01, -1.644047978039707e-01, -1.644047978039707e-01, -1.096911927670602e-01, -1.096912556476610e-01, -1.096934228294346e-01, -1.096951867512091e-01, -1.096919704283106e-01, -1.096919704283106e-01, -6.525891795777809e-02, -6.523230002513113e-02, -6.458440003282902e-02, -6.478302615566393e-02, -6.474089841237798e-02, -6.474089841237798e-02, -3.683719565125736e-02, -3.710456546273809e-02, -6.901621267004619e-02, -3.212823221408966e-02, -3.406542869079610e-02, -3.406542869079610e-02, -3.504421043196702e-03, -3.670472980949136e-03, -1.457343034111360e-02, -2.108883199591302e-03, -2.611127392644243e-03, -2.611127392644243e-03, -1.215769784001677e-01, -1.215824364014994e-01, -1.215772502604830e-01, -1.215820683633584e-01, -1.215797340898669e-01, -1.215797340898669e-01, -9.327625773452033e-02, -9.347789477487610e-02, -9.312821574944814e-02, -9.330733281987708e-02, -9.345894527729376e-02, -9.345894527729376e-02, -6.206839077339092e-02, -6.403368336769168e-02, -6.025400274562941e-02, -6.115624026179584e-02, -6.244552613854545e-02, -6.244552613854545e-02, -2.644974058367989e-02, -3.686413841734192e-02, -2.532071001644538e-02, -9.273826283272155e-02, -2.886196324019047e-02, -2.886196324019047e-02, -1.649227786003122e-03, -2.064319176472435e-03, -1.600109465068808e-03, -2.001736569448928e-02, -1.910196150862550e-03, -1.910196150862550e-03, -6.218248733297729e-02, -6.204698969974035e-02, -6.209474135267466e-02, -6.213401381362641e-02, -6.211436283584040e-02, -6.211436283584040e-02, -6.153655190671106e-02, -5.801055567678156e-02, -5.906376641046907e-02, -6.007151759796880e-02, -5.956125210293745e-02, -5.956125210293745e-02, -6.516794505912168e-02, -4.114823930696358e-02, -4.468709130782000e-02, -5.037508587826019e-02, -4.747354734739911e-02, -4.747354734739911e-02, -5.614533287282786e-02, -1.413616376680305e-02, -1.742733411933856e-02, -4.960470364560331e-02, -2.315828903021604e-02, -2.315828903021604e-02, -4.764399647713902e-03, -5.763429271387478e-04, -1.188364773911461e-03, -2.231370555821476e-02, -1.774572191906935e-03, -1.774572191906932e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_chachiyo_mod_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_chachiyo_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.746511564690755e-01, -1.746512425158204e-01, -1.746516516127068e-01, -1.746503708504530e-01, -1.746510381747470e-01, -1.746510381747470e-01, -1.194021866310791e-01, -1.194022507620917e-01, -1.194044610379660e-01, -1.194062600330936e-01, -1.194029797563490e-01, -1.194029797563490e-01, -7.330281350576678e-02, -7.327461015627879e-02, -7.258787651404873e-02, -7.279845753886381e-02, -7.275379788420921e-02, -7.275379788420921e-02, -4.275430166860649e-02, -4.304572768658873e-02, -7.727598407529493e-02, -3.760585531851199e-02, -3.972767075640594e-02, -3.972767075640594e-02, -4.562871608911103e-03, -4.774079937831671e-03, -1.793471230363164e-02, -2.770851205104414e-03, -3.419370098734426e-03, -3.419370098734426e-03, -1.314877754344214e-01, -1.314933100459175e-01, -1.314880511109457e-01, -1.314929368422733e-01, -1.314905698053764e-01, -1.314905698053764e-01, -1.025728716454643e-01, -1.027808031245965e-01, -1.024201869419568e-01, -1.026049189741022e-01, -1.027612635106079e-01, -1.027612635106079e-01, -6.991663501102509e-02, -7.200378356284107e-02, -6.798594954633404e-02, -6.894647241197142e-02, -7.031748674560999e-02, -7.031748674560999e-02, -3.134739598964196e-02, -4.278367259625979e-02, -3.009448776423152e-02, -1.020179178879327e-01, -3.401397753974100e-02, -3.401397753974100e-02, -2.173636356138280e-03, -2.713106957922064e-03, -2.109605121188334e-03, -2.415658244812200e-02, -2.513143466306377e-03, -2.513143466306377e-03, -7.003792322879364e-02, -6.989388339284840e-02, -6.994464778331427e-02, -6.998639612119023e-02, -6.996550648882134e-02, -6.996550648882134e-02, -6.935108343909670e-02, -6.559370185145312e-02, -6.671745397866438e-02, -6.779156672191679e-02, -6.724783879002560e-02, -6.724783879002560e-02, -7.320641881926544e-02, -4.744296690969660e-02, -5.127658435781784e-02, -5.741132791136027e-02, -5.428602685117141e-02, -5.428602685117141e-02, -6.360059937648595e-02, -1.742749468893788e-02, -2.121604623999682e-02, -5.658237635237109e-02, -2.768478006708063e-02, -2.768478006708063e-02, -6.155408284979396e-03, -7.652864778189048e-04, -1.571193786119765e-03, -2.673960529621676e-02, -2.336848592185075e-03, -2.336848592185071e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
