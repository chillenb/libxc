
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.648405511596355e-01, -1.648406355698859e-01, -1.648410368878472e-01, -1.648397804730821e-01, -1.648404350965597e-01, -1.648404350965597e-01, -1.112951932846949e-01, -1.112952546385578e-01, -1.112973693415025e-01, -1.112990905787735e-01, -1.112959410147153e-01, -1.112959410147153e-01, -6.735720458244471e-02, -6.732979642161310e-02, -6.667086795295743e-02, -6.687474559048250e-02, -6.661816940342591e-02, -6.661816940342591e-02, -3.779126363670942e-02, -3.806058789373866e-02, -7.109978505728429e-02, -3.286337050293200e-02, -2.780272873732018e-02, -2.780272873732020e-02, -3.768527205071852e-03, -3.932667439687479e-03, -1.473093074212483e-02, -2.344107867409254e-03, -2.295742506178821e-03, -2.295742506178821e-03, -1.228894579874508e-01, -1.228947823212831e-01, -1.228897230161053e-01, -1.228944235117277e-01, -1.228921461397417e-01, -1.228921461397417e-01, -9.524162321337523e-02, -9.543950664214135e-02, -9.509611166433889e-02, -9.527189794774453e-02, -9.541957994785857e-02, -9.541957994785857e-02, -6.411163768077646e-02, -6.611359925926356e-02, -6.219653983515631e-02, -6.312967706300650e-02, -6.437000285802072e-02, -6.437000285802069e-02, -2.691293324530107e-02, -3.786138517394116e-02, -2.568500244719634e-02, -9.471349595001721e-02, -2.936133847832369e-02, -2.936133847832369e-02, -1.856477059354139e-03, -2.297532270979682e-03, -1.800671933851919e-03, -2.026947448430091e-02, -1.942349348572669e-03, -1.942349348572668e-03, -6.422765475693877e-02, -6.408940799901432e-02, -6.413812770755625e-02, -6.417820611987217e-02, -6.415815238193065e-02, -6.415815238193065e-02, -6.356857225353188e-02, -5.995574870873614e-02, -6.103717350440104e-02, -6.207035763592163e-02, -6.154755568975950e-02, -6.154755568975950e-02, -6.726555865876044e-02, -4.237984309732135e-02, -4.610053460087276e-02, -5.205347093067843e-02, -4.902518663120524e-02, -4.902518663120524e-02, -5.803412424191901e-02, -1.432714319919642e-02, -1.762141575449374e-02, -5.124288150148387e-02, -2.344447790766701e-02, -2.344447790766701e-02, -5.043262576134514e-03, -6.836959177980250e-04, -1.357500800126790e-03, -2.262199281972525e-02, -1.840806897502707e-03, -1.840806897502703e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.749293526313246e-01, -1.749297387693149e-01, -1.749293050829425e-01, -1.749299562125750e-01, -1.749303944539324e-01, -1.749296745795544e-01, -1.749276280606648e-01, -1.749299121944415e-01, -1.749275180129720e-01, -1.749313398566758e-01, -1.749275180129720e-01, -1.749313398566758e-01, -1.207696535468594e-01, -1.207725445413545e-01, -1.207695109402422e-01, -1.207728121545515e-01, -1.207754966800011e-01, -1.207711345079522e-01, -1.207765556712478e-01, -1.207735819197942e-01, -1.208115153975943e-01, -1.207322491198349e-01, -1.208115153975943e-01, -1.207322491198349e-01, -7.578658995069631e-02, -7.525270241990045e-02, -7.581950429535453e-02, -7.516402389874882e-02, -7.434275745424021e-02, -7.526691564215593e-02, -7.515902300938342e-02, -7.486890691869957e-02, -7.078088025249758e-02, -7.953789172485735e-02, -7.078088025249758e-02, -7.953789172485735e-02, -4.559765660207259e-02, -4.262983451659635e-02, -4.613224391903798e-02, -4.273195651904294e-02, -8.188304261184541e-02, -7.719167381519466e-02, -3.910287404342986e-02, -3.817503556480826e-02, -2.654834120949705e-02, -7.132356977350982e-02, -2.654834120949708e-02, -7.132356977350979e-02, -5.142510134090221e-03, -4.587301219763274e-03, -5.404849168529977e-03, -4.753742518259554e-03, -1.898521486020864e-02, -1.732331861466854e-02, -2.985632942123510e-03, -3.091907235100346e-03, -2.521818140681333e-03, -5.549056325049072e-03, -2.521818140681333e-03, -5.549056325049072e-03, -1.325303322504555e-01, -1.325857252376083e-01, -1.325350040715050e-01, -1.325918605773336e-01, -1.325300860645324e-01, -1.325865100464070e-01, -1.325352792268125e-01, -1.325908562846205e-01, -1.325325523545879e-01, -1.325889616538460e-01, -1.325325523545879e-01, -1.325889616538460e-01, -1.043613010466199e-01, -1.043706291597931e-01, -1.045437459637814e-01, -1.045940817077177e-01, -1.043764064770898e-01, -1.040578400886586e-01, -1.045636511459494e-01, -1.042312482593030e-01, -1.041452916820869e-01, -1.049568298538362e-01, -1.041452916820869e-01, -1.049568298538362e-01, -7.194876490322494e-02, -7.229056130463099e-02, -7.424707585071566e-02, -7.418686724485260e-02, -7.249030050893356e-02, -6.796257071172256e-02, -7.326477673601793e-02, -6.910881836712331e-02, -6.932391335223174e-02, -7.594597439821626e-02, -6.932391335223172e-02, -7.594597439821624e-02, -3.228599636302964e-02, -3.175966730011326e-02, -4.430361377146166e-02, -4.391598988079110e-02, -3.213276334550136e-02, -2.935976307825823e-02, -1.037830013594265e-01, -1.038655436411444e-01, -3.664347237887993e-02, -3.315098141318070e-02, -3.664347237887993e-02, -3.315098141318070e-02, -2.522351005538956e-03, -2.318068839460610e-03, -3.025887014031696e-03, -2.932317697937349e-03, -2.504610955417029e-03, -2.206859645975931e-03, -2.462866694125230e-02, -2.437273352665477e-02, -3.784282204132598e-03, -2.051523474600690e-03, -3.784282204132597e-03, -2.051523474600689e-03, -7.249123385268681e-02, -7.199295508751831e-02, -7.234824868151370e-02, -7.184596338188097e-02, -7.239944423954732e-02, -7.189698145608429e-02, -7.243931044778201e-02, -7.194114572493744e-02, -7.241933706536514e-02, -7.191907319278532e-02, -7.241933706536514e-02, -7.191907319278532e-02, -7.176126120667038e-02, -7.133910382904705e-02, -6.801334876272196e-02, -6.748972206214106e-02, -6.916315188811062e-02, -6.861774663464851e-02, -7.019612967642434e-02, -6.975697498515580e-02, -6.965704719656712e-02, -6.919680233642055e-02, -6.965704719656712e-02, -6.919680233642055e-02, -7.553226796267636e-02, -7.531280944757231e-02, -4.926558746552504e-02, -4.876357326023190e-02, -5.349793646730443e-02, -5.255637833498437e-02, -5.967782455837792e-02, -5.909334239947767e-02, -5.613590657399113e-02, -5.617122401697236e-02, -5.613590657399115e-02, -5.617122401697236e-02, -6.612997081001257e-02, -6.532372980464529e-02, -1.771681077098284e-02, -1.751469033415469e-02, -2.207947675419146e-02, -2.088291050431727e-02, -5.931857412384320e-02, -5.775553719168014e-02, -2.953237439798098e-02, -2.690224066139214e-02, -2.953237439798099e-02, -2.690224066139214e-02, -6.648447286737354e-03, -6.236733753942738e-03, -9.015262911295523e-04, -8.958426720242728e-04, -1.914280887106700e-03, -1.655306155725021e-03, -2.756825190023707e-02, -2.681230303962204e-02, -3.455606512148955e-03, -1.953414289566669e-03, -3.455606512148947e-03, -1.953414289566665e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
