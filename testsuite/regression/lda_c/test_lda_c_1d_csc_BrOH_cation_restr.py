
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_1d_csc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_csc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.746251869650191e-11, -2.746205916883598e-11, -2.745987451611483e-11, -2.746671460291900e-11, -2.746315045295865e-11, -2.746315045295865e-11, -1.468088489791793e-06, -1.468069519855840e-06, -1.467415871559691e-06, -1.466884068114247e-06, -1.467853900889053e-06, -1.467853900889053e-06, -1.543374508369951e-02, -1.550659745444054e-02, -1.737410135945261e-02, -1.678189251334814e-02, -1.690600729275090e-02, -1.690600729275090e-02, -2.124449517218868e-02, -2.195590765228189e-02, -7.683622368387589e-03, -1.131883719795983e-02, -1.483118989669032e-02, -1.483118989669033e-02, -3.306446691473613e-06, -3.812093751344847e-06, -3.974157431731416e-04, -7.137778274862472e-07, -1.352779845701875e-06, -1.352779845701875e-06, -1.307395004971920e-07, -1.305956758498358e-07, -1.307323328915724e-07, -1.306053690705336e-07, -1.306668649678410e-07, -1.306668649678410e-07, -4.527598751260714e-05, -4.337772767601680e-05, -4.672289121964367e-05, -4.497806241839167e-05, -4.355264917666244e-05, -4.355264917666244e-05, -2.665628631081176e-02, -1.911279534676937e-02, -3.583926493016404e-02, -3.098993448753307e-02, -2.502831682478178e-02, -2.502831682478178e-02, -4.671508754743572e-03, -2.131542457002324e-02, -3.848708999509027e-03, -5.076158772346990e-05, -6.923405304739480e-03, -6.923405304739480e-03, -3.445316067893072e-07, -6.698192962276196e-07, -3.151531490722420e-07, -1.406029034639672e-03, -5.319571472194283e-07, -5.319571472194283e-07, -2.615396131005228e-02, -2.675146874733663e-02, -2.653950910545595e-02, -2.636632081491827e-02, -2.645285235120931e-02, -2.645285235120931e-02, -2.911342808079800e-02, -4.966253946146927e-02, -4.297813833719749e-02, -3.688481298406032e-02, -3.990983597326007e-02, -3.990983597326007e-02, -1.568396176803835e-02, -3.474850485841854e-02, -4.854034600034592e-02, -6.854678908849229e-02, -5.965303063909271e-02, -5.965303063909270e-02, -6.066447097724097e-02, -3.539010266595600e-04, -7.994924654899634e-04, -6.668290437852366e-02, -2.606050941667320e-03, -2.606050941667320e-03, -8.590748888937085e-06, -1.608922219970244e-08, -1.316685311467703e-07, -2.221630830564175e-03, -4.277333710868632e-07, -4.277333710868620e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_1d_csc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_csc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.746199122130625e-11, 2.746153170693012e-11, 2.745934711715659e-11, 2.746618700683602e-11, 2.746262295962393e-11, 2.746262295962393e-11, 1.461561193913587e-06, 1.461542350543679e-06, 1.460893062840575e-06, 1.460364806423974e-06, 1.461328170113204e-06, 1.461328170113204e-06, 6.537441721256637e-03, 6.549657503433550e-03, 6.850615049962129e-03, 6.757228284084454e-03, 6.776922436571603e-03, 6.776922436571603e-03, -3.680318167025409e-02, -3.795051877387887e-02, 4.638309574267745e-03, -2.021944145742862e-02, -2.620797205089650e-02, -2.620797205089651e-02, -6.370657833859976e-06, -7.341730510975855e-06, -7.476454056804982e-04, -1.380891814480217e-06, -2.612974115077267e-06, -2.612974115077267e-06, 1.305661807723250e-07, 1.304226420791634e-07, 1.305590274211636e-07, 1.304323160325991e-07, 1.304936896776358e-07, 1.304936896776358e-07, 4.415045813884709e-05, 4.232244857747996e-05, 4.554280002064736e-05, 4.386365920308076e-05, 4.249096058665865e-05, 4.249096058665865e-05, 8.193303667481836e-03, 7.119176073094580e-03, 8.024704210134084e-03, 8.478616606951473e-03, 7.991991954477529e-03, 7.991991954477529e-03, -8.533372114679265e-03, -3.691783166871015e-02, -7.054178991025384e-03, 4.942467017352324e-05, -1.254408034555778e-02, -1.254408034555778e-02, -6.676292265414290e-07, -1.296042359205592e-06, -6.108152149195043e-07, -2.612838390302536e-03, -1.029837362504075e-06, -1.029837362504075e-06, 8.134855808826110e-03, 8.203948812074775e-03, 8.180050214605342e-03, 8.160015013565204e-03, 8.170081055087729e-03, 8.170081055087729e-03, 8.412781170864657e-03, -1.517351304894332e-03, 4.933908883229088e-03, 7.775548635343368e-03, 6.682482482695692e-03, 6.682482482695692e-03, 6.579210182446001e-03, -5.749831651455048e-02, -7.541413917023648e-02, -8.338163483548502e-02, -8.518051871766022e-02, -8.518051871766021e-02, -2.215127702851308e-02, -6.664055894310039e-04, -1.494653084081429e-03, -8.558440520140589e-02, -4.805044789691877e-03, -4.805044789691874e-03, -1.650061890113096e-05, -3.134575856232268e-08, -2.556360959473779e-07, -4.105202771208740e-03, -8.284690368802499e-07, -8.284690368802478e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
