
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc18_1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.694098769027512e-05, -2.694076227701174e-05, -2.693969060790213e-05, -2.694304583183449e-05, -2.694129758434746e-05, -2.694129758434746e-05, -6.302107966349110e-03, -6.302066792005501e-03, -6.300647885952406e-03, -6.299493246252800e-03, -6.301598771630812e-03, -6.301598771630812e-03, -8.638746244628617e-02, -8.611913066871210e-02, -7.975894523774930e-02, -8.167326544710028e-02, -8.126458459734644e-02, -8.126458459734644e-02, -1.434754883124072e-03, -1.501089958740575e-03, -1.280761520380287e-01, -6.269927189372053e-04, -8.881530722002719e-04, -8.881530722002718e-04, -6.038747138854661e-08, -7.041487807971477e-08, -1.182513156574969e-05, -1.163250629783315e-08, -2.308023078876301e-08, -2.308023078876301e-08, -1.865457341871037e-03, -1.864427332392779e-03, -1.865406023925225e-03, -1.864496768711253e-03, -1.864937228201836e-03, -1.864937228201836e-03, -3.644821515845252e-02, -3.564855933137158e-02, -3.704694624374972e-02, -3.632379452256683e-02, -3.572294141205019e-02, -3.572294141205019e-02, -5.835223274796545e-02, -7.462037650651934e-02, -4.610473247799941e-02, -5.187858845095367e-02, -6.122439936652308e-02, -6.122439936652308e-02, -2.096945288081544e-04, -1.441316123779240e-03, -1.660195298098514e-04, -3.867240248707768e-02, -3.389712173567325e-04, -3.389712173567325e-04, -5.343101985057221e-09, -1.086779679565262e-08, -4.858769438170108e-09, -5.050268623708419e-05, -8.494780553820871e-09, -8.494780553820871e-09, -5.920887898475016e-02, -5.819273151608731e-02, -5.854913363233154e-02, -5.884363991396522e-02, -5.869611919628601e-02, -5.869611919628601e-02, -5.449769579018838e-02, -3.418198354672672e-02, -3.937401239753517e-02, -4.500937324485832e-02, -4.207024945194027e-02, -4.207024945194027e-02, -8.547262205344254e-02, -2.913416019204089e-03, -5.062416967530506e-03, -1.177274769514390e-02, -7.701356657133702e-03, -7.701356657133700e-03, -2.651535212415402e-02, -1.036844461310993e-05, -2.627461499174404e-05, -1.053027187742287e-02, -1.042707122360420e-04, -1.042707122360420e-04, -1.697506593015257e-07, -2.075723989295708e-10, -1.919704505785514e-09, -8.633879977667533e-05, -6.730043561338379e-09, -6.730043561338360e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc18_1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.160766296543383e-09, 1.160746877045886e-09, 1.160654554328035e-09, 1.160943614174844e-09, 1.160792994357229e-09, 1.160792994357229e-09, 5.669165437385301e-05, 5.669095798081630e-05, 5.666696188256033e-05, 5.664743820431610e-05, 5.668304248201702e-05, 5.668304248201702e-05, -1.675586774584574e-01, -1.671107015775384e-01, -1.562506065097408e-01, -1.595665186527747e-01, -1.588619094860294e-01, -1.588619094860294e-01, -2.872721927838376e-03, -3.005691856793679e-03, -2.226089049979037e-01, -1.254607621688328e-03, -1.777548907192598e-03, -1.777548907192598e-03, -1.207749486117219e-07, -1.408297640926280e-07, -2.365048681976130e-05, -2.326501281217057e-08, -4.616046242984097e-08, -4.616046242984097e-08, 5.388933803816739e-06, 5.383082880287345e-06, 5.388642221849158e-06, 5.383477213778287e-06, 5.385978937460371e-06, 5.385978937460371e-06, 8.391456563301333e-04, 8.291229591410347e-04, 8.456027253957125e-04, 8.376896994081837e-04, 8.301208628463607e-04, 8.301208628463607e-04, -1.169130508063736e-01, -1.471650684340273e-01, -9.301926124434041e-02, -1.043780397431774e-01, -1.223949290193918e-01, -1.223949290193918e-01, -4.194591576419265e-04, -2.885873480078238e-03, -3.320830331133187e-04, 8.583244493774083e-04, -6.781252008308787e-04, -6.781252008308787e-04, -1.068620401579242e-08, -2.173559378027962e-08, -9.717538914112437e-09, -1.010094497472750e-04, -1.698956122309980e-08, -1.698956122309980e-08, -1.185535539334403e-01, -1.166071005467413e-01, -1.172905245182505e-01, -1.178546680804504e-01, -1.175721509341690e-01, -1.175721509341690e-01, -1.094773840851600e-01, -6.917079920559814e-02, -7.960954372767456e-02, -9.084816841192189e-02, -8.500019315629342e-02, -8.500019315629342e-02, -1.660278316912326e-01, -5.839732211317257e-03, -1.016227936957600e-02, -2.372289101227687e-02, -1.548512557215218e-02, -1.548512557215218e-02, -5.365666587692174e-02, -2.073706120283228e-05, -5.255033405063574e-05, -2.120616642590200e-02, -2.085587889438613e-04, -2.085587889438613e-04, -3.395013647073744e-07, -4.151447979280797e-10, -3.839409017467453e-09, -1.726895087828275e-04, -1.346008719514633e-08, -1.346008719514629e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
