
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc17_2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.837938818482772e-06, -7.837881740882116e-06, -7.837585078594073e-06, -7.838520608060515e-06, -7.837909068997440e-06, -7.837909068997440e-06, -1.831863526945056e-03, -1.831851896757238e-03, -1.831304215143482e-03, -1.831073602678771e-03, -1.831833938704179e-03, -1.831833938704179e-03, -6.633009617391833e-02, -6.616578995324167e-02, -6.185670986853746e-02, -6.310477973802843e-02, -6.627019049512989e-02, -6.627019049512989e-02, -1.287534121226935e-03, -1.339976696978971e-03, -8.953341801554540e-02, -4.888227763826655e-04, -1.303116728266369e-03, -1.303116728266369e-03, -2.229522944971033e-07, -2.562218937667677e-07, -1.720658216558827e-05, -2.461554024966545e-08, -2.482947989031882e-07, -2.482947989031882e-07, -5.432007519325986e-04, -5.429102837261493e-04, -5.431700953719364e-04, -5.429442525479726e-04, -5.430530907751784e-04, -5.430530907751784e-04, -1.067772205584031e-02, -1.044692561407597e-02, -1.077296823524286e-02, -1.059009453090736e-02, -1.040150747334834e-02, -1.040150747334834e-02, -4.544956124951440e-02, -5.748831993468661e-02, -3.881815581985656e-02, -4.407808687314246e-02, -5.071980481136346e-02, -5.071980481136346e-02, -1.935924731795946e-04, -1.315576527660204e-03, -1.862369795522332e-04, -1.134150895579196e-02, -2.994765972565027e-04, -2.994765972565027e-04, -2.209879735726848e-08, -3.298535204479205e-08, -1.388816413729527e-08, -4.661858696554289e-05, -2.495157503861953e-08, -2.495157503861953e-08, -4.980802918332458e-02, -4.904485558464863e-02, -4.931800953379633e-02, -4.952907548350844e-02, -4.942340130614360e-02, -4.942340130614360e-02, -4.528268256109475e-02, -2.929213099144912e-02, -3.355359005384587e-02, -3.781492551431884e-02, -3.560750122667067e-02, -3.560750122667068e-02, -6.497574162409471e-02, -2.633169749489669e-03, -4.445756225906678e-03, -9.471297192556127e-03, -6.480328068934743e-03, -6.480328068934739e-03, -2.117595724540037e-02, -1.367000661442134e-05, -3.391898270838936e-05, -7.944572813701299e-03, -1.034716677480706e-04, -1.034716677480706e-04, -3.589106085813596e-07, -6.769227985537001e-10, -4.640343675511432e-09, -8.983949926620054e-05, -1.531622927864006e-08, -1.531622927863999e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc17_2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.948200240776897e-10, 2.948157306321390e-10, 2.947934158803641e-10, 2.948637886967230e-10, 2.948177862836343e-10, 2.948177862836343e-10, 1.535122061515713e-05, 1.535103045260343e-05, 1.534207670017277e-05, 1.533830728210126e-05, 1.535073682675961e-05, 1.535073682675961e-05, -1.196552275891995e-01, -1.194954202720644e-01, -1.147960239525508e-01, -1.162527193316490e-01, -1.195971394080287e-01, -1.195971394080287e-01, -2.582762177520371e-03, -2.688275315617511e-03, -1.105130013867894e-01, -9.787780425437177e-04, -2.614111509122918e-03, -2.614111509122918e-03, -4.459048275899144e-07, -5.124441026498107e-07, -3.441458481818411e-05, -4.923108340776819e-08, -4.965898937259515e-07, -4.965898937259515e-07, 1.396485608588403e-06, 1.395003078349858e-06, 1.396329102930073e-06, 1.395176412867210e-06, 1.395731858970362e-06, 1.395731858970362e-06, 4.026430725450127e-04, 3.883105786077744e-04, 4.085932211352391e-04, 3.971868617019441e-04, 3.855048897603428e-04, 3.855048897603428e-04, -9.024203085969203e-02, -1.091602860560248e-01, -7.827986898497895e-02, -8.784141218858783e-02, -9.904460747541956e-02, -9.904460747541956e-02, -3.873639415536956e-04, -2.639179837474361e-03, -3.726396425461954e-04, 4.445036592951108e-04, -5.993803605376318e-04, -5.993803605376318e-04, -4.419759705864847e-08, -6.597070931214021e-08, -2.777632920041951e-08, -9.324759316735121e-05, -4.990315306562640e-08, -4.990315306562640e-08, -9.757365470279222e-02, -9.632489632995243e-02, -9.677365154342049e-02, -9.711903431094936e-02, -9.694626196622477e-02, -9.694626196622477e-02, -8.995217005085536e-02, -5.984657553350910e-02, -6.824002817171392e-02, -7.639928531179603e-02, -7.220542523753465e-02, -7.220542523753466e-02, -1.182932738535381e-01, -5.297382667004473e-03, -8.975695650095171e-03, -1.927182445535422e-02, -1.312940145495687e-02, -1.312940145495686e-02, -4.340910510872566e-02, -2.734090988348895e-05, -6.784348296296803e-05, -1.613195203985443e-02, -2.069945887604442e-04, -2.069945887604442e-04, -7.178218354777424e-07, -1.353845599306878e-09, -9.280687454380242e-09, -1.797176500509043e-04, -3.063245968329670e-08, -3.063245968329656e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
