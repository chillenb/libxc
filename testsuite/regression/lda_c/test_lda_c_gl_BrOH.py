
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.954916501842059e-01, -1.954917307692626e-01, -1.954921496216157e-01, -1.954908288176293e-01, -1.954916921859676e-01, -1.954916921859676e-01, -1.355590380830351e-01, -1.355591066947959e-01, -1.355623382176264e-01, -1.355636992091085e-01, -1.355592126383755e-01, -1.355592126383755e-01, -8.299936391412800e-02, -8.296814389034701e-02, -8.214859819768613e-02, -8.238650059671099e-02, -8.298798053534732e-02, -8.298798053534732e-02, -4.668102813588865e-02, -4.701043161670854e-02, -8.854450735770113e-02, -3.901868043823269e-02, -4.678018189759373e-02, -4.678018189759373e-02, -5.383664355624745e-03, -5.617629872688449e-03, -1.843069645219050e-02, -2.697921624035956e-03, -5.563964818132168e-03, -5.563964818132168e-03, -1.487837670711424e-01, -1.487896162618467e-01, -1.487843842570997e-01, -1.487889320652575e-01, -1.487867401468098e-01, -1.487867401468098e-01, -1.168487616244713e-01, -1.170751339430515e-01, -1.167568121576865e-01, -1.169341082361452e-01, -1.171202899866540e-01, -1.171202899866540e-01, -7.881324512769512e-02, -8.130641970122275e-02, -7.724280806701933e-02, -7.850348200197817e-02, -7.994704045874693e-02, -7.994704045874693e-02, -3.235224180429525e-02, -4.685867961451091e-02, -3.208879397081262e-02, -1.162248555687485e-01, -3.540602007818876e-02, -3.540602007818876e-02, -2.606499758059999e-03, -2.961735793421005e-03, -2.245680397211894e-03, -2.352930756738260e-02, -2.709629842088120e-03, -2.709629842088120e-03, -7.975653030728413e-02, -7.959540389865354e-02, -7.965325429724192e-02, -7.969781672855437e-02, -7.967552066539432e-02, -7.967552066539432e-02, -7.877591775479532e-02, -7.454003893109863e-02, -7.583209752778187e-02, -7.698701071456182e-02, -7.640354289600368e-02, -7.640354289600368e-02, -8.274211436356466e-02, -5.272521596361648e-02, -5.731453109652845e-02, -6.411770351688989e-02, -6.068291483740410e-02, -6.068291483740409e-02, -7.150512701158415e-02, -1.737918689027701e-02, -2.180566216599013e-02, -6.252219586894031e-02, -2.824984832713152e-02, -2.824984832713151e-02, -6.223555955816262e-03, -8.391062313840970e-04, -1.575233593124709e-03, -2.737207724641712e-02, -2.317466983715234e-03, -2.317466983711478e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.065580263521363e-01, -2.065581070184843e-01, -2.065585262933571e-01, -2.065572041569841e-01, -2.065580683962679e-01, -2.065580683962679e-01, -1.464565618717477e-01, -1.464566308986586e-01, -1.464598819735514e-01, -1.464612511990375e-01, -1.464567374832709e-01, -1.464567374832709e-01, -9.313263447918749e-02, -9.310052193637766e-02, -9.225725298463093e-02, -9.250210061123595e-02, -9.312092576647939e-02, -9.312092576647939e-02, -5.496868461750736e-02, -5.532506976917263e-02, -9.882403253882846e-02, -4.659982409391389e-02, -5.507598734822017e-02, -5.507598734822017e-02, -7.033230934131087e-03, -7.332741379813492e-03, -2.310212353271546e-02, -3.559634718891174e-03, -7.264084442896302e-03, -7.264084442896302e-03, -1.597474307304946e-01, -1.597533037838718e-01, -1.597480504345535e-01, -1.597526167962125e-01, -1.597504159358017e-01, -1.597504159358017e-01, -1.275948636065052e-01, -1.278236151955394e-01, -1.275019431463994e-01, -1.276811091216749e-01, -1.278692439431223e-01, -1.278692439431223e-01, -8.881926493494026e-02, -9.139009613295454e-02, -8.719692646968807e-02, -8.849945210942503e-02, -8.998907785285851e-02, -8.998907785285851e-02, -3.917616105544133e-02, -5.516091976549060e-02, -3.887964671873830e-02, -1.269643168617942e-01, -4.259517069358466e-02, -4.259517069358466e-02, -3.440204767429617e-03, -3.903819199808669e-03, -2.968050519808240e-03, -2.909364272135422e-02, -3.574924035252943e-03, -3.574924035252943e-03, -8.979259884485156e-02, -8.962639818638572e-02, -8.968607318097788e-02, -8.973203900465736e-02, -8.970904100625396e-02, -8.970904100625396e-02, -8.878073135875646e-02, -8.439906575290836e-02, -8.573751942525241e-02, -8.693244746434924e-02, -8.632893261695081e-02, -8.632893261695081e-02, -9.286800628749088e-02, -6.146906885051178e-02, -6.635500698443346e-02, -7.353111349341560e-02, -6.991725524441869e-02, -6.991725524441868e-02, -8.124804467682409e-02, -2.184892676088874e-02, -2.708318574554775e-02, -7.185464767148876e-02, -3.452866559176811e-02, -3.452866559176811e-02, -8.106210487241493e-03, -1.115088251385164e-03, -2.087319390773929e-03, -3.352546730053112e-02, -3.062089087970934e-03, -3.062089087970845e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
