
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ob_pz_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pz", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.643661331557873e-01, -1.643662184828993e-01, -1.643666241604829e-01, -1.643653540946284e-01, -1.643660158254476e-01, -1.643660158254476e-01, -1.098950999136544e-01, -1.098951627800764e-01, -1.098973296511550e-01, -1.098990933564120e-01, -1.098958633249917e-01, -1.098958633249917e-01, -6.435186935216682e-02, -6.432272042072444e-02, -6.362234875169021e-02, -6.383938065369427e-02, -6.354176090013507e-02, -6.354176090013507e-02, -3.793130159930747e-02, -3.817813081177129e-02, -6.830163254282066e-02, -3.325413426829039e-02, -2.681295648612104e-02, -2.681295648612105e-02, -3.631974827957944e-03, -3.795643610968959e-03, -1.483924682714119e-02, -2.230863578897382e-03, -2.396447829739255e-03, -2.396447829739255e-03, -1.217548538809645e-01, -1.217602909488527e-01, -1.217551244732376e-01, -1.217599246020045e-01, -1.217575989377081e-01, -1.217575989377081e-01, -9.340028856118307e-02, -9.360423030804717e-02, -9.325026748930797e-02, -9.343144535022976e-02, -9.358341985717876e-02, -9.358341985717876e-02, -6.089104047129253e-02, -6.302949796090486e-02, -5.882663034048857e-02, -5.983210657214654e-02, -6.115412493361196e-02, -6.115412493361193e-02, -2.737052725783372e-02, -3.800926007420843e-02, -2.612078544504762e-02, -9.285589817042954e-02, -2.980128191157644e-02, -2.980128191157644e-02, -1.759775260994902e-03, -2.185542603056006e-03, -1.707774011130830e-03, -2.058683906322402e-02, -1.934348502830795e-03, -1.934348502830795e-03, -6.101527409632945e-02, -6.086718144887208e-02, -6.091937782628226e-02, -6.096231162493030e-02, -6.094082985299564e-02, -6.094082985299564e-02, -6.030869055345321e-02, -5.642597126796993e-02, -5.757958983091914e-02, -5.869656713505402e-02, -5.813193818938861e-02, -5.813193818938861e-02, -6.425463128770909e-02, -4.213488768859130e-02, -4.539821439307152e-02, -5.035825438990389e-02, -4.787714662708963e-02, -4.787714662708963e-02, -5.500441547792425e-02, -1.442127181751213e-02, -1.784281940682009e-02, -4.969942370432279e-02, -2.384200386950586e-02, -2.384200386950586e-02, -4.897610414628283e-03, -6.382149423498983e-04, -1.282158751369305e-03, -2.300800127598842e-02, -1.818919057875453e-03, -1.818919057875452e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ob_pz_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pz", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.745644649987596e-01, -1.745649924478126e-01, -1.745643697130832e-01, -1.745652591301919e-01, -1.745657135202324e-01, -1.745647302001773e-01, -1.745623862811002e-01, -1.745655063142677e-01, -1.745620006890881e-01, -1.745672211741899e-01, -1.745620006890881e-01, -1.745672211741899e-01, -1.196029474012601e-01, -1.196066297982521e-01, -1.196027500037281e-01, -1.196069549176288e-01, -1.196098314281348e-01, -1.196042751013931e-01, -1.196107384325337e-01, -1.196069505983998e-01, -1.196560738481324e-01, -1.195551084922685e-01, -1.196560738481324e-01, -1.195551084922685e-01, -7.333342987071792e-02, -7.270353785382572e-02, -7.337615544874801e-02, -7.260282133244000e-02, -7.172896228810145e-02, -7.281877733895545e-02, -7.266266147081220e-02, -7.232049547425393e-02, -6.750421918049987e-02, -7.783140528857098e-02, -6.750421918049987e-02, -7.783140528857098e-02, -4.567965256510162e-02, -4.201620641364735e-02, -4.623197073580502e-02, -4.203470414986176e-02, -7.998065442736434e-02, -7.442446869578159e-02, -3.942709691155295e-02, -3.828592284950553e-02, -2.444986064491918e-02, -7.377522328834429e-02, -2.444986064491920e-02, -7.377522328834428e-02, -4.886849740829266e-03, -4.528173865177620e-03, -5.135231705640307e-03, -4.705423310239007e-03, -1.930232610696375e-02, -1.749370855173294e-02, -2.878691859296161e-03, -2.932253683956572e-03, -2.753767524826997e-03, -4.875852348074011e-03, -2.753767524826997e-03, -4.875852348074011e-03, -1.315923287797039e-01, -1.316642407374127e-01, -1.315968819068156e-01, -1.316706944308964e-01, -1.315919338677339e-01, -1.316651843072859e-01, -1.315973410766555e-01, -1.316694925496993e-01, -1.315944476097575e-01, -1.316676792616312e-01, -1.315944476097575e-01, -1.316676792616312e-01, -1.027986730915252e-01, -1.028102062569974e-01, -1.029816455012658e-01, -1.030439039307956e-01, -1.028485550385928e-01, -1.024547946629624e-01, -1.030423003665316e-01, -1.026312971304390e-01, -1.024928125409864e-01, -1.034965379928239e-01, -1.024928125409864e-01, -1.034965379928239e-01, -6.926935057384080e-02, -6.967197100013529e-02, -7.169614576117493e-02, -7.162516877432165e-02, -7.016267396368041e-02, -6.482910852013248e-02, -7.094815765555504e-02, -6.605305673879056e-02, -6.612329764187830e-02, -7.392428894805675e-02, -6.612329764187827e-02, -7.392428894805671e-02, -3.283254382885673e-02, -3.219524906491351e-02, -4.407150881699336e-02, -4.359302742975506e-02, -3.293244261981553e-02, -2.959159417693554e-02, -1.021973360606307e-01, -1.022992855663044e-01, -3.745571936376329e-02, -3.319123757815488e-02, -3.745571936376329e-02, -3.319123757815488e-02, -2.346310760096483e-03, -2.255451646377991e-03, -2.870444394437226e-03, -2.823791590128630e-03, -2.301783972040833e-03, -2.171378721397023e-03, -2.510624486872394e-02, -2.480852634547393e-02, -3.140452723951846e-03, -2.272526726735701e-03, -3.140452723951846e-03, -2.272526726735701e-03, -6.989218042998734e-02, -6.930521732588457e-02, -6.974295542056827e-02, -6.915128886075131e-02, -6.979649545688603e-02, -6.920461439354844e-02, -6.983788969159151e-02, -6.925106692570594e-02, -6.981714742196619e-02, -6.922785428072252e-02, -6.981714742196619e-02, -6.922785428072252e-02, -6.912368844304100e-02, -6.862644196019481e-02, -6.242964517853423e-02, -6.181189565179254e-02, -6.640847713486771e-02, -6.576569771410118e-02, -6.748551903717967e-02, -6.696817746416948e-02, -6.692143506609075e-02, -6.637915189018294e-02, -6.692143506609075e-02, -6.637915189018294e-02, -7.304670945710180e-02, -7.278780551529766e-02, -4.837493769181126e-02, -4.775665907025980e-02, -5.193826112621652e-02, -5.078451630855391e-02, -5.661670766501899e-02, -5.590979830596201e-02, -5.379811488193416e-02, -5.384114474934430e-02, -5.379811488193417e-02, -5.384114474934430e-02, -6.124349491464015e-02, -6.028591118031320e-02, -1.794757544107207e-02, -1.772924424504311e-02, -2.252865716642402e-02, -2.117317732557022e-02, -5.658201327865058e-02, -5.468764764575725e-02, -3.030141514827288e-02, -2.716973935481767e-02, -3.030141514827289e-02, -2.716973935481766e-02, -6.448045679071817e-03, -6.142565286145775e-03, -8.418002403149059e-04, -8.403113168376651e-04, -1.733274861700556e-03, -1.635887281504415e-03, -2.814190382634810e-02, -2.724670342190841e-02, -2.869476274168318e-03, -2.154010083862352e-03, -2.869476274168315e-03, -2.154010083862351e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
