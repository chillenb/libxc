
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc17_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.616515009584653e-05, -1.616501483855928e-05, -1.616437179274115e-05, -1.616638506596663e-05, -1.616533604511594e-05, -1.616533604511594e-05, -3.812468051019612e-03, -3.812442934075440e-03, -3.811577382462915e-03, -3.810873039262524e-03, -3.812157445485093e-03, -3.812157445485093e-03, -7.801992743734178e-02, -7.774117415140414e-02, -7.122072622910994e-02, -7.317779716385889e-02, -7.203412099800943e-02, -7.203412099800943e-02, -1.098623425175842e-03, -1.148466744203292e-03, -1.225631713526804e-01, -4.806716922176768e-04, -3.155371549667396e-04, -3.155371549667398e-04, -4.587244773509142e-08, -5.336397830108443e-08, -8.997499222661079e-06, -8.904346984727268e-09, -9.291292032974322e-09, -9.291292032974323e-09, -1.121965077434441e-03, -1.121344091291599e-03, -1.121934138146397e-03, -1.121385953936101e-03, -1.121651504017705e-03, -1.121651504017705e-03, -2.303149572430994e-02, -2.249805583010187e-02, -2.343184024421672e-02, -2.294840979922134e-02, -2.254765442339037e-02, -2.254765442339037e-02, -5.014855590305905e-02, -6.604558498837224e-02, -3.860102104064266e-02, -4.393794620237613e-02, -5.257046519581948e-02, -5.257046519581948e-02, -1.606544546949357e-04, -1.107230300866184e-03, -1.264267231315140e-04, -2.452275279675986e-02, -2.578863564807214e-04, -2.578863564807214e-04, -4.078975788311762e-09, -8.320045170105096e-09, -3.694196950058797e-09, -3.868369458543297e-05, -5.230228815234185e-09, -5.230228815234184e-09, -5.096457085445689e-02, -4.999572489547498e-02, -5.033516039514364e-02, -5.061597613808044e-02, -5.047527989178428e-02, -5.047527989178428e-02, -4.650039633328340e-02, -2.805133703899311e-02, -3.264063470573738e-02, -3.772028776464128e-02, -3.505849762689607e-02, -3.505849762689607e-02, -7.707760184262638e-02, -2.244893514984073e-03, -3.917521824214864e-03, -9.237819965914364e-03, -5.993416399311078e-03, -5.993416399311075e-03, -2.143168765374710e-02, -7.941127507626559e-06, -2.007731649412057e-05, -8.238311876030789e-03, -7.935476688433312e-05, -7.935476688433315e-05, -1.296515028159541e-07, -1.589897603329937e-10, -1.457912423017529e-09, -6.610455335590677e-05, -4.320154299787991e-09, -4.320154299787980e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc17_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.254041445231075e-09, 1.254046289768775e-09, 1.254018799505528e-09, 1.254026968516329e-09, 1.253927641194002e-09, 1.253918610444624e-09, 1.254221135444908e-09, 1.254249796970045e-09, 1.254048740960142e-09, 1.254096691443143e-09, 1.254048740960142e-09, 1.254096691443143e-09, 6.649104857157874e-05, 6.649377027070039e-05, 6.649000059785846e-05, 6.649310845303021e-05, 6.646414926929838e-05, 6.646004448710239e-05, 6.643952880751353e-05, 6.643673156942749e-05, 6.651917462470576e-05, 6.644456242861467e-05, 6.651917462470576e-05, 6.644456242861467e-05, -1.629017003998327e-01, -1.609798108381901e-01, -1.625972832845176e-01, -1.602443969812978e-01, -1.473935764990752e-01, -1.504821804016507e-01, -1.532195029751971e-01, -1.522280183392870e-01, -1.370447992178642e-01, -1.667757317239431e-01, -1.370447992178642e-01, -1.667757317239431e-01, -2.336573950411341e-03, -2.083818820781071e-03, -2.463360879866983e-03, -2.162571181734565e-03, -2.378519481673962e-01, -2.153911548928306e-01, -9.826455200175395e-04, -9.430601436726902e-04, -3.646609373581063e-04, -2.361696854165997e-03, -3.646609373581068e-04, -2.361696854165997e-03, -1.009131243823732e-07, -8.410385271872045e-08, -1.189669450610092e-07, -9.677231489166968e-08, -1.959367206220402e-05, -1.663818759064556e-05, -1.737095235990063e-08, -1.826906855790940e-08, -1.100350257084899e-08, -5.971039992990892e-08, -1.100350257084900e-08, -5.971039992990892e-08, 5.955613103971908e-06, 5.959894950609597e-06, 5.949012397767974e-06, 5.953402376621649e-06, 5.955247163846157e-06, 5.959608458681815e-06, 5.949502795875312e-06, 5.953794315724950e-06, 5.952268849717487e-06, 5.956626752938159e-06, 5.952268849717487e-06, 5.956626752938159e-06, 1.875412195491726e-03, 1.875696525584265e-03, 1.802668929511228e-03, 1.804141471385038e-03, 1.935200381181153e-03, 1.925193699393962e-03, 1.869320345249173e-03, 1.859252129539384e-03, 1.798269466511281e-03, 1.822103739748395e-03, 1.798269466511281e-03, 1.822103739748395e-03, -1.054995256322689e-01, -1.063419115698355e-01, -1.387812159762874e-01, -1.385923757465801e-01, -8.598968790975219e-02, -7.716262356393269e-02, -9.752560234880028e-02, -8.841621219239662e-02, -1.031178585528712e-01, -1.202092578678189e-01, -1.031178585528712e-01, -1.202092578678189e-01, -3.260743783955102e-04, -3.169210433958222e-04, -2.236967781530029e-03, -2.203808086298481e-03, -2.744303038570388e-04, -2.345543133456405e-04, 2.079558468601504e-03, 2.082363821934062e-03, -5.648057414362203e-04, -4.751142076600315e-04, -5.648057414362203e-04, -4.751142076600315e-04, -8.657247417857440e-09, -7.713107941817063e-09, -1.702360975842488e-08, -1.627347120186224e-08, -8.082042814609280e-09, -6.804400001050304e-09, -7.809259493542117e-05, -7.666962631310309e-05, -1.877701345864904e-08, -7.249548977590793e-09, -1.877701345864904e-08, -7.249548977590791e-09, -1.082646862704250e-01, -1.070187851127048e-01, -1.062176266597172e-01, -1.049830607540479e-01, -1.069373088403215e-01, -1.056948125812095e-01, -1.075267156670324e-01, -1.062887095667723e-01, -1.072313914717353e-01, -1.059912561059848e-01, -1.072313914717353e-01, -1.059912561059848e-01, -9.868718514447242e-02, -9.771492902170069e-02, -5.907007327503114e-02, -5.830894701625520e-02, -6.899932166336738e-02, -6.808876404115997e-02, -7.986742065968902e-02, -7.903079620151743e-02, -7.414655625301096e-02, -7.332635902621301e-02, -7.414655625301096e-02, -7.332635902621301e-02, -1.605566457494267e-01, -1.597743060976973e-01, -4.552730414912341e-03, -4.474555100335109e-03, -8.025288195107224e-03, -7.788584480912222e-03, -1.899687009753941e-02, -1.868520819840870e-02, -1.214022616117844e-02, -1.215308321368700e-02, -1.214022616117843e-02, -1.215308321368700e-02, -4.498802515310475e-02, -4.407130119846225e-02, -1.604668430261633e-05, -1.572175449450284e-05, -4.224117387206994e-05, -3.826803996222534e-05, -1.715511592922992e-02, -1.640188250950645e-02, -1.728069104181354e-04, -1.467905707990937e-04, -1.728069104181354e-04, -1.467905707990938e-04, -2.739218187241441e-07, -2.461656525793902e-07, -3.190721602305768e-10, -3.168943391342673e-10, -3.211965828988310e-09, -2.669682062462692e-09, -1.355270415836201e-04, -1.290897010889597e-04, -1.445868184466296e-08, -6.161026566523075e-09, -1.445868184466292e-08, -6.161026566523058e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
