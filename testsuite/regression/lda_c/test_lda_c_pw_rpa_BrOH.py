
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_rpa_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.883709863274194e-01, -1.883710609339797e-01, -1.883714487122623e-01, -1.883702258969840e-01, -1.883710252131270e-01, -1.883710252131270e-01, -1.333751871699548e-01, -1.333752493377968e-01, -1.333781773633396e-01, -1.333794105351911e-01, -1.333753453313112e-01, -1.333753453313112e-01, -8.658252999951084e-02, -8.655525459239025e-02, -8.583945114173328e-02, -8.604720044595583e-02, -8.657258483536494e-02, -8.657258483536494e-02, -5.498952166838612e-02, -5.527849197770901e-02, -9.143604597576507e-02, -4.821178223124938e-02, -5.507652098730263e-02, -5.507652098730263e-02, -1.291082250132844e-02, -1.326945769477645e-02, -2.872877848104463e-02, -8.257368985374179e-03, -1.318768019271127e-02, -1.318768019271127e-02, -1.454000512283943e-01, -1.454053872544571e-01, -1.454006142663459e-01, -1.454047630834572e-01, -1.454027634666260e-01, -1.454027634666260e-01, -1.165187599531076e-01, -1.167214699991770e-01, -1.164364309241459e-01, -1.165951816901255e-01, -1.167619097887822e-01, -1.167619097887822e-01, -8.293000263280643e-02, -8.510426255110642e-02, -8.156203175072665e-02, -8.266008176670063e-02, -8.391837325417302e-02, -8.391837325417302e-02, -4.218231243427625e-02, -5.514538628229017e-02, -4.194038754205224e-02, -1.159602353824292e-01, -4.496451426682295e-02, -4.496451426682295e-02, -8.074017907627618e-03, -8.773927934786856e-03, -7.325632217374260e-03, -3.385367941306267e-02, -8.280682059653438e-03, -8.280682059653438e-03, -8.375225336200491e-02, -8.361176973303291e-02, -8.366220708898839e-02, -8.370106037456188e-02, -8.368162066065327e-02, -8.368162066065327e-02, -8.289747388478053e-02, -7.921031570624468e-02, -8.033416274864891e-02, -8.133932209914116e-02, -8.083143711566644e-02, -8.083143711566644e-02, -8.635779987442169e-02, -6.027128413834586e-02, -6.426155748568889e-02, -7.016338554377337e-02, -6.718462920402959e-02, -6.718462920402959e-02, -7.657301405377669e-02, -2.762903006754804e-02, -3.215470480078308e-02, -6.877980763523073e-02, -3.837375558718616e-02, -3.837375558718616e-02, -1.417421120046717e-02, -3.813039653849841e-03, -5.802690530132762e-03, -3.754588665786052e-02, -7.477900841076038e-03, -7.477900841076046e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_rpa_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.986163629424065e-01, -1.986164377841564e-01, -1.986168267848635e-01, -1.986156001147658e-01, -1.986164019506975e-01, -1.986164019506975e-01, -1.432492308697435e-01, -1.432492937964600e-01, -1.432522575627605e-01, -1.432535057865092e-01, -1.432493909617522e-01, -1.432493909617522e-01, -9.543556108665849e-02, -9.540732908942103e-02, -9.466621864591043e-02, -9.488135321935670e-02, -9.542526719579407e-02, -9.542526719579407e-02, -6.226185714569497e-02, -6.257058898330979e-02, -1.004505995154234e-01, -5.498409269016098e-02, -6.235481871502540e-02, -6.235481871502540e-02, -1.545895435496253e-02, -1.587852751297905e-02, -3.357664329326449e-02, -9.974572475286037e-03, -1.578289242228035e-02, -1.578289242228035e-02, -1.554018307089993e-01, -1.554072156749119e-01, -1.554023989112008e-01, -1.554065857795946e-01, -1.554045678235551e-01, -1.554045678235551e-01, -1.261408332369226e-01, -1.263471913300897e-01, -1.260570177596387e-01, -1.262186322702527e-01, -1.263883568729007e-01, -1.263883568729007e-01, -9.164978901779101e-02, -9.390462720155839e-02, -9.022915532773219e-02, -9.136959919569194e-02, -9.267525677825741e-02, -9.267525677825741e-02, -4.844450403491855e-02, -6.242839572287037e-02, -4.818068770553097e-02, -1.255721695576057e-01, -5.147035814298928e-02, -5.147035814298928e-02, -9.756871044397267e-03, -1.058721450039270e-02, -8.866905217145303e-03, -3.929088206332401e-02, -1.000224388205986e-02, -1.000224388205986e-02, -9.250295683827643e-02, -9.235722961443313e-02, -9.240955138501025e-02, -9.244985489279663e-02, -9.242968973150131e-02, -9.242968973150131e-02, -9.161602589105149e-02, -8.778321454977971e-02, -8.895268237893041e-02, -8.999772467190133e-02, -8.946979510850793e-02, -8.946979510850793e-02, -9.520293248358587e-02, -6.788644449665129e-02, -7.211153881086560e-02, -7.832637866050578e-02, -7.519451467580680e-02, -7.519451467580680e-02, -8.503445387737622e-02, -3.234133067937780e-02, -3.740400708948100e-02, -7.687288293054002e-02, -4.427748292420767e-02, -4.427748292420767e-02, -1.693511595714808e-02, -4.656954855256564e-03, -7.048676166731189e-03, -4.336763651214288e-02, -9.048161454692798e-03, -9.048161454692796e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
