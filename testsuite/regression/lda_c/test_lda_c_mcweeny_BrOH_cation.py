
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_mcweeny_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_mcweeny", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.024404887314943e-01, -1.024404919432314e-01, -1.024405072159613e-01, -1.024404593880604e-01, -1.024404842780581e-01, -1.024404842780581e-01, -9.684106580702928e-02, -9.684107944171881e-02, -9.684154973040991e-02, -9.684193256732747e-02, -9.684120412805768e-02, -9.684120412805768e-02, -7.605789395352990e-02, -7.603422025020681e-02, -7.548210119712842e-02, -7.565844064005837e-02, -7.489929582230576e-02, -7.489929582230576e-02, -4.298282039187157e-02, -4.331876248602233e-02, -7.885940553978882e-02, -3.637058690573480e-02, -1.815246555096138e-02, -1.815246555096138e-02, -2.488549293112064e-03, -2.609827674556627e-03, -1.296487566509441e-02, -1.463228186103059e-03, -9.634658080532047e-04, -9.634658080532048e-04, -9.898732829343206e-02, -9.898813750527201e-02, -9.898736815705474e-02, -9.898808349690325e-02, -9.898773674618887e-02, -9.898773674618887e-02, -9.216595891664435e-02, -9.223928551928715e-02, -9.211119771842083e-02, -9.217662047404189e-02, -9.222843065985253e-02, -9.222843065985253e-02, -7.326985708754175e-02, -7.501686463226444e-02, -7.136963127788504e-02, -7.225632024107417e-02, -7.318183650848938e-02, -7.318183650848938e-02, -2.829502518113050e-02, -4.315961245059179e-02, -2.656437323783677e-02, -9.196795266109162e-02, -3.147294387103138e-02, -3.147294387103138e-02, -1.129584205848900e-03, -1.431070726143458e-03, -1.090302784273254e-03, -1.963398312883672e-02, -1.061342989780956e-03, -1.061342989780956e-03, -7.337236575499292e-02, -7.324900768986738e-02, -7.329251433070096e-02, -7.332829970373321e-02, -7.331039864507180e-02, -7.331039864507180e-02, -7.278133489190790e-02, -6.937623180627990e-02, -7.042383360328469e-02, -7.140270824540614e-02, -7.091044646233882e-02, -7.091044646233882e-02, -7.598379303716568e-02, -4.913587433594838e-02, -5.386685659423421e-02, -6.098562369761770e-02, -5.744766646586523e-02, -5.744766646586523e-02, -6.745103118472343e-02, -1.255867530051392e-02, -1.636115777794803e-02, -6.003724955249472e-02, -2.361355291587583e-02, -2.361355291587583e-02, -3.496421778445920e-03, -3.866390927514565e-04, -8.013961250880710e-04, -2.262527878223422e-02, -1.024874655516533e-03, -1.024874655516532e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_mcweeny_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_mcweeny", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.028240536958249e-01, -1.028248451781731e-01, -1.028237842805824e-01, -1.028251189262376e-01, -1.028251996758399e-01, -1.028237241244019e-01, -1.028220887275584e-01, -1.028267706253253e-01, -1.028205296019848e-01, -1.028283633911382e-01, -1.028205296019848e-01, -1.028283633911382e-01, -9.894468738596313e-02, -9.895261527566393e-02, -9.894413462470442e-02, -9.895318744508406e-02, -9.895497615185898e-02, -9.894301404147315e-02, -9.895334422617501e-02, -9.894518957337305e-02, -9.905748531154351e-02, -9.884011665607251e-02, -9.905748531154351e-02, -9.884011665607251e-02, -8.370626196579020e-02, -8.190091013661056e-02, -8.389433524952189e-02, -8.167765271773275e-02, -8.076067215558125e-02, -8.389163362792154e-02, -8.295384362411204e-02, -8.197148211666465e-02, -6.829006994706915e-02, -9.789117813892470e-02, -6.829006994706915e-02, -9.789117813892470e-02, -5.656039917514603e-02, -4.669723503508225e-02, -5.772050122776980e-02, -4.640588578347186e-02, -9.331203369616052e-02, -7.764180928350682e-02, -4.576303699276513e-02, -4.277119450146211e-02, -6.566185229879069e-03, -1.213262940669699e-01, -6.566185229879064e-03, -1.213262940669699e-01, -3.795344960984290e-03, -2.883453432251101e-03, -4.056183192807174e-03, -2.970729026373793e-03, -1.904506779359006e-02, -1.478647797066724e-02, -1.872145107430816e-03, -2.019730203730782e-03, -4.930214063550147e-04, -5.543710655151554e-03, -4.930214063550149e-04, -5.543710655151555e-03, -1.003869713028075e-01, -1.005292559998807e-01, -1.003856585337548e-01, -1.005316981056570e-01, -1.003856758512758e-01, -1.005306085870547e-01, -1.003872629436427e-01, -1.005300164602609e-01, -1.003859523633251e-01, -1.005308454076370e-01, -1.003859523633251e-01, -1.005308454076370e-01, -9.554413010410777e-02, -9.557207443494641e-02, -9.553707565115147e-02, -9.568770872345649e-02, -9.599614117141522e-02, -9.504107428583929e-02, -9.606494869032214e-02, -9.506932811798899e-02, -9.439674259264773e-02, -9.682554511344521e-02, -9.439674259264773e-02, -9.682554511344521e-02, -7.984029975560512e-02, -8.100574640399512e-02, -8.201905286963206e-02, -8.181476220984338e-02, -8.688788200321197e-02, -7.139723282720585e-02, -8.694818893989928e-02, -7.275461835027065e-02, -6.983855592638559e-02, -9.237319371807295e-02, -6.983855592638560e-02, -9.237319371807293e-02, -3.596757272624527e-02, -3.435607546933023e-02, -5.220212418723616e-02, -5.091294460230499e-02, -3.765092315958637e-02, -2.927485458342265e-02, -9.528748465521880e-02, -9.553544961150225e-02, -4.469455082079549e-02, -3.375519856839682e-02, -4.469455082079549e-02, -3.375519856839682e-02, -1.640262554698552e-03, -1.378803530388613e-03, -1.967468314331225e-03, -1.838442415377661e-03, -1.654607075624437e-03, -1.277524444848197e-03, -2.530268058552487e-02, -2.458051715794185e-02, -3.098250507560680e-03, -7.590424388828345e-04, -3.098250507560680e-03, -7.590424388828343e-04, -8.136290700201766e-02, -7.966435064469099e-02, -8.126380233798459e-02, -7.955104621585987e-02, -8.130150548511823e-02, -7.958833470264748e-02, -8.132485487734903e-02, -7.962649423236229e-02, -8.131308789200209e-02, -7.960749245725078e-02, -8.131308789200209e-02, -7.960749245725078e-02, -8.072292149617839e-02, -7.928171842364323e-02, -7.792135919304032e-02, -7.612184537993497e-02, -7.888310830594242e-02, -7.701196721208929e-02, -7.955594841934727e-02, -7.805212013595508e-02, -7.916224579837325e-02, -7.758467203104275e-02, -7.916224579837325e-02, -7.758467203104275e-02, -8.310827774664326e-02, -8.236597684294365e-02, -5.860465565297522e-02, -5.690248260652394e-02, -6.412191945939311e-02, -6.089605755920198e-02, -7.036450736571219e-02, -6.834676349954939e-02, -6.591815622910416e-02, -6.603977125647341e-02, -6.591815622910417e-02, -6.603977125647338e-02, -7.669848758460733e-02, -7.392098944479211e-02, -1.649696522919682e-02, -1.598310744462411e-02, -2.265021238638177e-02, -1.941263152714499e-02, -7.120416079502255e-02, -6.581096580358681e-02, -3.386391937943485e-02, -2.612372953731799e-02, -3.386391937943486e-02, -2.612372953731800e-02, -5.016687172931967e-03, -4.268163388430761e-03, -5.176949603746495e-04, -5.123988282793044e-04, -1.229229132836329e-03, -9.311425668646926e-04, -2.964735880967048e-02, -2.744443140280173e-02, -2.742765807112091e-03, -7.743045188474743e-04, -2.742765807112089e-03, -7.743045188474737e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
