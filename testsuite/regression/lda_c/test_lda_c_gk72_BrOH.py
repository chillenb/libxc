
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gk72_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gk72", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.661780307175920e-01, -1.661781042489679e-01, -1.661784864388549e-01, -1.661772812461234e-01, -1.661780690429022e-01, -1.661780690429022e-01, -1.126245512941325e-01, -1.126246110307288e-01, -1.126274245493024e-01, -1.126286094961430e-01, -1.126247032701538e-01, -1.126247032701538e-01, -6.725809577508275e-02, -6.723860282063741e-02, -6.672628010055100e-02, -6.687512401614557e-02, -6.725098849430061e-02, -6.725098849430061e-02, -4.265614574327718e-02, -4.290719808201523e-02, -7.182468251423837e-02, -3.655247235115783e-02, -4.273180095977293e-02, -4.273180095977293e-02, -5.759650003593771e-03, -5.969467220854687e-03, -1.623429718434125e-02, -3.178015224171609e-03, -5.921514951432901e-03, -5.921514951432901e-03, -1.242099777977870e-01, -1.242151340212877e-01, -1.242105218629521e-01, -1.242145308815918e-01, -1.242125986427316e-01, -1.242125986427316e-01, -9.645173726282243e-02, -9.664638535701447e-02, -9.637267704439668e-02, -9.652512187535407e-02, -9.668521457022673e-02, -9.668521457022673e-02, -6.462829931932711e-02, -6.619853932448448e-02, -6.363276947527345e-02, -6.443234214409162e-02, -6.534388802625689e-02, -6.534388802625689e-02, -3.070130306229128e-02, -4.279164280532044e-02, -3.045645949230278e-02, -9.591532328932116e-02, -3.345831612102335e-02, -3.345831612102335e-02, -3.083106609881397e-03, -3.448747252058336e-03, -2.702643376471788e-03, -2.169812051158365e-02, -3.190128486063419e-03, -3.190128486063419e-03, -6.522382750541719e-02, -6.512222889012972e-02, -6.515871250138570e-02, -6.518681147648653e-02, -6.517275311807458e-02, -6.517275311807458e-02, -6.460469632001925e-02, -6.190678691770934e-02, -6.273396085788627e-02, -6.347011822057694e-02, -6.309857886054845e-02, -6.309857886054845e-02, -6.709742462339095e-02, -4.714414883619533e-02, -5.040848322557468e-02, -5.507076522728080e-02, -5.274040833057411e-02, -5.274040833057411e-02, -5.994785647201210e-02, -1.537012192018166e-02, -1.968647066900919e-02, -5.399383735183118e-02, -2.674063987189210e-02, -2.674063987189210e-02, -6.504082722654992e-03, -1.105349298763423e-03, -1.967334439637289e-03, -2.584726483583220e-02, -2.779116640104217e-03, -2.779116640104214e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gk72_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gk72", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.762757570577698e-01, -1.762758310736331e-01, -1.762762157817009e-01, -1.762750026480979e-01, -1.762757956355999e-01, -1.762757956355999e-01, -1.221124430624023e-01, -1.221125037493930e-01, -1.221153620301019e-01, -1.221165658289067e-01, -1.221125974563237e-01, -1.221125974563237e-01, -7.358476244174941e-02, -7.356526948730407e-02, -7.305294676721766e-02, -7.320179068281223e-02, -7.357765516096727e-02, -7.357765516096727e-02, -4.898281240994384e-02, -4.923386474868190e-02, -8.109306749412473e-02, -4.287913901782450e-02, -4.905846762643960e-02, -4.905846762643960e-02, -7.245975150259629e-03, -7.500371608581828e-03, -2.013471087825757e-02, -4.069882752914953e-03, -7.442272751138158e-03, -7.442272751138158e-03, -1.338747241780882e-01, -1.338799546157056e-01, -1.338752760742707e-01, -1.338793427951972e-01, -1.338773827457509e-01, -1.338773827457509e-01, -1.056915860151115e-01, -1.058888356055779e-01, -1.056114743859018e-01, -1.057659492805435e-01, -1.059281859443618e-01, -1.059281859443618e-01, -7.095496598599377e-02, -7.252520599115114e-02, -6.995943614194011e-02, -7.075900881075828e-02, -7.167055469292355e-02, -7.167055469292355e-02, -3.702796972895795e-02, -4.911830947198711e-02, -3.678312615896945e-02, -1.051480994475294e-01, -3.978498278769001e-02, -3.978498278769001e-02, -3.951254745450895e-03, -4.407474801451873e-03, -3.474197537227843e-03, -2.802478717825032e-02, -4.085012740176786e-03, -4.085012740176786e-03, -7.155049417208385e-02, -7.144889555679639e-02, -7.148537916805237e-02, -7.151347814315319e-02, -7.149941978474124e-02, -7.149941978474124e-02, -7.093136298668591e-02, -6.823345358437601e-02, -6.906062752455293e-02, -6.979678488724360e-02, -6.942524552721512e-02, -6.942524552721512e-02, -7.342409129005761e-02, -5.347081550286200e-02, -5.673514989224135e-02, -6.139743189394747e-02, -5.906707499724078e-02, -5.906707499724078e-02, -6.627452313867878e-02, -1.898985404536279e-02, -2.601313733567586e-02, -6.032050401849785e-02, -3.306730653855877e-02, -3.306730653855877e-02, -8.146536468932819e-03, -1.442215713038585e-03, -2.544980505168370e-03, -3.217393150249886e-02, -3.570283512814683e-03, -3.570283512814679e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
