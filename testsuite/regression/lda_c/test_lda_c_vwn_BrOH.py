
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.648397742962296e-01, -1.648398477639847e-01, -1.648402296231917e-01, -1.648390254732110e-01, -1.648398125883800e-01, -1.648398125883800e-01, -1.112938809954533e-01, -1.112939406564314e-01, -1.112967506146218e-01, -1.112979340626334e-01, -1.112940327790961e-01, -1.112940327790961e-01, -6.720502684105156e-02, -6.717990565857969e-02, -6.652093551167747e-02, -6.671213047817583e-02, -6.719586705428914e-02, -6.719586705428914e-02, -3.880559273905145e-02, -3.905726380054692e-02, -7.168811162314026e-02, -3.296257617619813e-02, -3.888134205227042e-02, -3.888134205227042e-02, -5.848669524768146e-03, -6.072062183551971e-03, -1.704274728541773e-02, -3.156035439815248e-03, -6.020950240570814e-03, -6.020950240570814e-03, -1.228768107958430e-01, -1.228819689552738e-01, -1.228773550652286e-01, -1.228813655890697e-01, -1.228794326246606e-01, -1.228794326246606e-01, -9.521100090010992e-02, -9.540322394683980e-02, -9.513293983771502e-02, -9.528346543630969e-02, -9.544157528979454e-02, -9.544157528979454e-02, -6.384854384527609e-02, -6.584472374751944e-02, -6.259549195441405e-02, -6.360111959648822e-02, -6.475527717287943e-02, -6.475527717287943e-02, -2.787593828343391e-02, -3.894131478470761e-02, -2.767436600227082e-02, -9.468152998374234e-02, -3.020858079434025e-02, -3.020858079434025e-02, -3.059098095192933e-03, -3.433372273717138e-03, -2.672007439940060e-03, -2.106947680528778e-02, -3.168418365059607e-03, -3.168418365059607e-03, -6.460279783159177e-02, -6.447387500174490e-02, -6.452015905067619e-02, -6.455581497174299e-02, -6.453797479367017e-02, -6.453797479367017e-02, -6.381872159822391e-02, -6.044672299670622e-02, -6.147272113392422e-02, -6.239170667541375e-02, -6.192720675430110e-02, -6.192720675430110e-02, -6.699807086275515e-02, -4.343478018768523e-02, -4.696965965812865e-02, -5.224974312721618e-02, -4.957751356365236e-02, -4.957751356365236e-02, -5.804545597982705e-02, -1.619810287853661e-02, -1.971906610347912e-02, -5.100676398008249e-02, -2.472796316664235e-02, -2.472796316664235e-02, -6.644140664043442e-03, -1.074194024336196e-03, -1.930830710727083e-03, -2.405123222936439e-02, -2.749618486950411e-03, -2.749618486950411e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.749287638987053e-01, -1.749288378334345e-01, -1.749292221197944e-01, -1.749280103159949e-01, -1.749288024342475e-01, -1.749288024342475e-01, -1.207697623277295e-01, -1.207698230979522e-01, -1.207726852987052e-01, -1.207738907484373e-01, -1.207699169334016e-01, -1.207699169334016e-01, -7.535897639297363e-02, -7.533270401053230e-02, -7.464331152941020e-02, -7.484337801121226e-02, -7.534939692342406e-02, -7.534939692342406e-02, -4.513679381775604e-02, -4.541057022188533e-02, -8.003786072234838e-02, -3.873911787503703e-02, -4.521921105956951e-02, -4.521921105956951e-02, -7.428856776328159e-03, -7.704377660282157e-03, -2.078236415425413e-02, -4.067668192111591e-03, -7.641380010771630e-03, -7.641380010771630e-03, -1.325451848292942e-01, -1.325504192793463e-01, -1.325457371489428e-01, -1.325498069895883e-01, -1.325478454366643e-01, -1.325478454366643e-01, -1.043345582846768e-01, -1.045316956991963e-01, -1.042544960829378e-01, -1.044088776789311e-01, -1.045710252593061e-01, -1.045710252593061e-01, -7.184298398744941e-02, -7.393542671428854e-02, -7.052732419870725e-02, -7.158333322845380e-02, -7.279396269954898e-02, -7.279396269954898e-02, -3.309630579536520e-02, -4.528445407318631e-02, -3.287110020904996e-02, -1.037914522157258e-01, -3.569331812207038e-02, -3.569331812207038e-02, -3.945120444294697e-03, -4.417626113285606e-03, -3.454545411524983e-03, -2.541407631896428e-02, -4.083314048518009e-03, -4.083314048518009e-03, -7.263410402953691e-02, -7.249892272365045e-02, -7.254745562807989e-02, -7.258484245553089e-02, -7.256613639950366e-02, -7.256613639950366e-02, -7.181169157576633e-02, -6.826709073961931e-02, -6.934697110390690e-02, -7.031319310034997e-02, -6.982493718062452e-02, -6.982493718062452e-02, -7.514251781538732e-02, -5.015147659679276e-02, -5.395296997025061e-02, -5.959209629964882e-02, -5.674368353166427e-02, -5.674368353166427e-02, -6.573480956889469e-02, -1.980121018299916e-02, -2.386879289315977e-02, -5.826852164763380e-02, -2.956395132908168e-02, -2.956395132908167e-02, -8.407858536873161e-03, -1.406208572215778e-03, -2.509419726706045e-03, -2.880012357251766e-02, -3.553064095092355e-03, -3.553064095092353e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
