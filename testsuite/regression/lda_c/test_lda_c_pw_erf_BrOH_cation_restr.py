
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_erf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.635547393134492e-01, -1.635548266451560e-01, -1.635552418511631e-01, -1.635539419627940e-01, -1.635546192525907e-01, -1.635546192525907e-01, -1.062637838258046e-01, -1.062638526394093e-01, -1.062662242957198e-01, -1.062681546347829e-01, -1.062646348613434e-01, -1.062646348613434e-01, -5.320738751896247e-02, -5.317168712661974e-02, -5.230097188868179e-02, -5.256826070391431e-02, -5.251159599038311e-02, -5.251159599038311e-02, -1.376411080175405e-02, -1.410324406251011e-02, -5.818887291926563e-02, -8.367628382071000e-03, -1.044018604145887e-02, -1.044018604145887e-02, -1.366389559064143e-06, -1.593337980255733e-06, -2.682816314806126e-04, -2.631502746268887e-07, -5.221541595260932e-07, -5.221541595260932e-07, -1.190981521918456e-01, -1.191039749628063e-01, -1.190984422225220e-01, -1.191035823297256e-01, -1.191010920572702e-01, -1.191010920572702e-01, -8.786269003165295e-02, -8.809497366315415e-02, -8.769203081492342e-02, -8.789850009003103e-02, -8.807315181591596e-02, -8.807315181591596e-02, -4.888884227326478e-02, -5.155825520511979e-02, -4.639955596842084e-02, -4.764024761742127e-02, -4.940333639885319e-02, -4.940333639885319e-02, -3.751885975713967e-03, -1.379815619527426e-02, -3.103010164875427e-03, -8.724202677942791e-02, -5.434866976841628e-03, -5.434866976841628e-03, -1.208660818337815e-07, -2.458498210842181e-07, -1.099095699947983e-07, -1.087961835227269e-03, -1.921646740537877e-07, -1.921646740537877e-07, -4.904460414089997e-02, -4.885961552523545e-02, -4.892482384115011e-02, -4.897844081706364e-02, -4.895161359490942e-02, -4.895161359490942e-02, -4.816155223050177e-02, -4.329206491184167e-02, -4.475470673687184e-02, -4.614795598338299e-02, -4.544329266755746e-02, -4.544329266755746e-02, -5.308534980508626e-02, -1.950368347801337e-02, -2.446556476081588e-02, -3.254241350082880e-02, -2.842041031365165e-02, -2.842041031365164e-02, -4.068707622478446e-02, -2.354722904752295e-04, -5.861283855417461e-04, -3.144876198011397e-02, -2.090489618472568e-03, -2.090489618472541e-03, -3.842241894518040e-06, -4.695212367777424e-09, -4.342413570116451e-08, -1.770747355171965e-03, -1.522417027880518e-07, -1.522417027878662e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_erf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.739928739231670e-01, -1.739929610769886e-01, -1.739933754372706e-01, -1.739920781966435e-01, -1.739927541068599e-01, -1.739927541068599e-01, -1.168910446430805e-01, -1.168911131530142e-01, -1.168934743434159e-01, -1.168953961641878e-01, -1.168918919230538e-01, -1.168918919230538e-01, -6.399513035219696e-02, -6.395901750813768e-02, -6.307743853293181e-02, -6.334822915180632e-02, -6.329083460604462e-02, -6.329083460604462e-02, -2.123786087312830e-02, -2.167026844046957e-02, -6.901231118130514e-02, -1.389566686198128e-02, -1.682600290848087e-02, -1.682600290848087e-02, -2.733086160207756e-06, -3.187072956802991e-06, -5.341229317849216e-04, -5.263200993327089e-07, -1.044369780348295e-06, -1.044369780348295e-06, -1.296713609907906e-01, -1.296771604970575e-01, -1.296716498626296e-01, -1.296767694326909e-01, -1.296742891099236e-01, -1.296742891099236e-01, -9.857649789035017e-02, -9.880761489256609e-02, -9.840669711821398e-02, -9.861212795995869e-02, -9.878590255590472e-02, -9.878590255590472e-02, -5.960632511680596e-02, -6.232418553302173e-02, -5.705530281496123e-02, -5.832888112089750e-02, -6.013151800719395e-02, -6.013151800719395e-02, -6.754620153262866e-03, -2.128140746047706e-02, -5.666013299609320e-03, -9.795896202689157e-02, -9.470255244884712e-03, -9.470255244884712e-03, -2.417374921150963e-07, -4.917170920445906e-07, -2.198236864254654e-07, -2.097007820239154e-03, -3.843409093116549e-07, -3.843409093116549e-07, -5.976539766948337e-02, -5.957647016603348e-02, -5.964307703510291e-02, -5.969783571317488e-02, -5.967043816988486e-02, -5.967043816988486e-02, -5.886273683730716e-02, -5.384589610841833e-02, -5.536006495414807e-02, -5.679650373484692e-02, -5.607070571721694e-02, -5.607070571721694e-02, -6.387167218625604e-02, -2.820257257561026e-02, -3.379279449242495e-02, -4.252708910957038e-02, -3.810282839387675e-02, -3.810282839387674e-02, -5.113318787100279e-02, -4.694364528939054e-04, -1.150993065684598e-03, -4.135813689419098e-02, -3.912380604743942e-03, -3.912380604743895e-03, -7.686212081387002e-06, -9.390448307248980e-09, -8.684923581780267e-08, -3.342829207183903e-03, -3.044912403746037e-07, -3.044912403726020e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
