
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_mcweeny_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_mcweeny", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.024404591661050e-01, -1.024404619621634e-01, -1.024404764949698e-01, -1.024404306667821e-01, -1.024404606234403e-01, -1.024404606234403e-01, -9.684077396499909e-02, -9.684078723506118e-02, -9.684141220936839e-02, -9.684167540778228e-02, -9.684080772534642e-02, -9.684080772534642e-02, -7.593398704308450e-02, -7.591315310934650e-02, -7.536202675530718e-02, -7.552284911017378e-02, -7.592639198504621e-02, -7.592639198504621e-02, -4.442620007832762e-02, -4.476216737456048e-02, -7.944839170579850e-02, -3.651482195410507e-02, -4.452737932756726e-02, -4.452737932756726e-02, -4.169105836361936e-03, -4.358621429260915e-03, -1.569273270490121e-02, -2.042824088424419e-03, -4.315091965069144e-03, -4.315091965069144e-03, -9.898541605534066e-02, -9.898620096339382e-02, -9.898549888214846e-02, -9.898610915710490e-02, -9.898581503108465e-02, -9.898581503108465e-02, -9.215456951821444e-02, -9.222588586192024e-02, -9.212548560156884e-02, -9.218150482608101e-02, -9.224006328295663e-02, -9.224006328295663e-02, -7.303503290531170e-02, -7.478719803752462e-02, -7.189267764117319e-02, -7.281207074891956e-02, -7.384119755520852e-02, -7.384119755520852e-02, -2.959487219741098e-02, -4.460745036903442e-02, -2.932290598112624e-02, -9.195590153310972e-02, -3.275875528876551e-02, -3.275875528876551e-02, -1.972058935432665e-03, -2.247630346818313e-03, -1.693815027705096e-03, -2.064388999767080e-02, -2.051894588780362e-03, -2.051894588780362e-03, -7.370682869034667e-02, -7.359284077465458e-02, -7.363380293633616e-02, -7.366532859606351e-02, -7.364955827392260e-02, -7.364955827392260e-02, -7.300822691724994e-02, -6.985704895259627e-02, -7.084112270378717e-02, -7.170378402361026e-02, -7.126996977966700e-02, -7.126996977966700e-02, -7.576196575433827e-02, -5.050062826573585e-02, -5.495119590672406e-02, -6.121196774956318e-02, -5.810599397013871e-02, -5.810599397013871e-02, -6.746762309911654e-02, -1.469859858688158e-02, -1.894751809428559e-02, -5.978383038388786e-02, -2.538672734118202e-02, -2.538672734118202e-02, -4.852574491219765e-03, -6.252123442644248e-04, -1.181262762473818e-03, -2.449545126192535e-02, -1.749039370929927e-03, -1.749039370929924e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_mcweeny_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_mcweeny", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.028244295044681e-01, -1.028244313894675e-01, -1.028244411869488e-01, -1.028244102912728e-01, -1.028244304869498e-01, -1.028244304869498e-01, -9.894844399778022e-02, -9.894845342211449e-02, -9.894889727457826e-02, -9.894908419553337e-02, -9.894846797421429e-02, -9.894846797421429e-02, -8.269426732828633e-02, -8.267666701965874e-02, -8.221006655374423e-02, -8.234642564008007e-02, -8.268785141915654e-02, -8.268785141915654e-02, -5.288492364783252e-02, -5.323647466137599e-02, -8.562322990451604e-02, -4.439665506879822e-02, -5.299087248862074e-02, -5.299087248862074e-02, -5.502885884343033e-03, -5.750373689171091e-03, -2.013133711644074e-02, -2.710339100154793e-03, -5.693549146700884e-03, -5.693549146700884e-03, -1.004567604955892e-01, -1.004573070997890e-01, -1.004568181757565e-01, -1.004572431667688e-01, -1.004570383398606e-01, -1.004570383398606e-01, -9.554966965056599e-02, -9.560245229917705e-02, -9.552813466896526e-02, -9.556960885528412e-02, -9.561294139163151e-02, -9.561294139163151e-02, -8.021841456180073e-02, -8.172131658122833e-02, -7.922793248358856e-02, -8.002575416976301e-02, -8.091234782392784e-02, -8.091234782392784e-02, -3.664190741134855e-02, -5.307467138752373e-02, -3.633083919746907e-02, -9.540245894282803e-02, -4.022570400636597e-02, -4.022570400636597e-02, -2.616899651668419e-03, -2.980587002197031e-03, -2.249189477530907e-03, -2.615405509197266e-02, -2.722313605178397e-03, -2.722313605178397e-03, -8.079697574025675e-02, -8.069901210933481e-02, -8.073422548333552e-02, -8.076131935810923e-02, -8.074776678108789e-02, -8.074776678108789e-02, -8.019526856991940e-02, -7.744212182102732e-02, -7.830875661985437e-02, -7.906334274042186e-02, -7.868447579495830e-02, -7.868447579495830e-02, -8.254886170868815e-02, -5.912896253100815e-02, -6.355309230643137e-02, -6.956091465968210e-02, -6.661195506741553e-02, -6.661195506741553e-02, -7.531191500933800e-02, -1.890303044196304e-02, -2.410830763186744e-02, -6.821268226682843e-02, -3.177544373856871e-02, -3.177544373856871e-02, -6.394339231903266e-03, -8.323588340629799e-04, -1.570527608530558e-03, -3.073011438818888e-02, -2.322210225594669e-03, -2.322210225594666e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
