
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_hl_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_hl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.458032215492442e-01, -1.458032760740714e-01, -1.458035594746529e-01, -1.458026658026416e-01, -1.458032499681458e-01, -1.458032499681458e-01, -1.051507760617375e-01, -1.051508228097797e-01, -1.051530245795856e-01, -1.051539518786914e-01, -1.051508949935389e-01, -1.051508949935389e-01, -6.890862778664787e-02, -6.888666681181112e-02, -6.830987878210198e-02, -6.847737168805554e-02, -6.890062051840083e-02, -6.890062051840083e-02, -4.250150736122094e-02, -4.275250909550862e-02, -7.279684009657840e-02, -3.656720623597100e-02, -4.257709373873983e-02, -4.257709373873983e-02, -6.283114458772645e-03, -6.539955619678363e-03, -1.925422017037674e-02, -3.245214712873210e-03, -6.481146127282485e-03, -6.481146127282485e-03, -1.141482341825568e-01, -1.141522086090764e-01, -1.141486535501994e-01, -1.141517437092255e-01, -1.141502543378629e-01, -1.141502543378629e-01, -9.236637682179809e-02, -9.252157548597620e-02, -9.230333277979041e-02, -9.242489142824500e-02, -9.255253220298906e-02, -9.255253220298906e-02, -6.595629280437280e-02, -6.771655249091003e-02, -6.484445652299492e-02, -6.573717976164180e-02, -6.675750567507394e-02, -6.675750567507394e-02, -3.122353209396412e-02, -4.263691392349439e-02, -3.100818752375214e-02, -9.193855306978513e-02, -3.369544851583231e-02, -3.369544851583231e-02, -3.138667535471797e-03, -3.551440996247070e-03, -2.715959339379920e-03, -2.379638256324894e-02, -3.258843980821629e-03, -3.258843980821629e-03, -6.662296397070336e-02, -6.650914700163227e-02, -6.655001435745546e-02, -6.658149252179509e-02, -6.656574318528516e-02, -6.656574318528516e-02, -6.592989397203293e-02, -6.292500704749542e-02, -6.384356806130456e-02, -6.466312313485001e-02, -6.424925398906084e-02, -6.424925398906084e-02, -6.872764705365088e-02, -4.706151899436969e-02, -5.046679084077919e-02, -5.544054652042642e-02, -5.293949543587215e-02, -5.293949543587215e-02, -6.075998358560805e-02, -1.828863612270873e-02, -2.228489647844568e-02, -5.428118813773059e-02, -2.782845833895803e-02, -2.782845833895803e-02, -7.199816375151233e-03, -1.032887476989837e-03, -1.920923650233649e-03, -2.708962259250189e-02, -2.800340804667928e-03, -2.800340804667818e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_hl_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_hl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.532908659558851e-01, -1.532909205106380e-01, -1.532912040667617e-01, -1.532903099042588e-01, -1.532908943903843e-01, -1.532908943903843e-01, -1.125757116719598e-01, -1.125757585755123e-01, -1.125779676692823e-01, -1.125788980527414e-01, -1.125758309993948e-01, -1.125758309993948e-01, -7.603649908808896e-02, -7.601417863631031e-02, -7.542782488237382e-02, -7.559812040497188e-02, -7.602836078957727e-02, -7.602836078957727e-02, -4.882047872027648e-02, -4.908430178269194e-02, -7.998322123632479e-02, -4.253895454313375e-02, -4.889994068946779e-02, -4.889994068946779e-02, -8.098075322856313e-03, -8.418510900051858e-03, -2.352006232511947e-02, -4.248448660395168e-03, -8.345205562033799e-03, -8.345205562033799e-03, -1.215978625594253e-01, -1.216018458649988e-01, -1.215982828640285e-01, -1.216013799266207e-01, -1.215998872280477e-01, -1.215998872280477e-01, -9.973416372687527e-02, -9.989026694464487e-02, -9.967075047145015e-02, -9.979302010401696e-02, -9.992140334984002e-02, -9.992140334984002e-02, -7.303261433132184e-02, -7.482440430239420e-02, -7.189958013723606e-02, -7.280940454219773e-02, -7.384847892569384e-02, -7.384847892569384e-02, -3.679697218274733e-02, -4.896281914644527e-02, -3.656357629512125e-02, -9.930381420347173e-02, -3.946454477158446e-02, -3.946454477158446e-02, -4.111319113080202e-03, -4.641736091828268e-03, -3.565780029168185e-03, -2.863940192056669e-02, -4.265979073900622e-03, -4.265979073900622e-03, -7.371151245551431e-02, -7.359563310333289e-02, -7.363724215970859e-02, -7.366929072078811e-02, -7.365325609787490e-02, -7.365325609787490e-02, -7.300572398996943e-02, -6.994103228046199e-02, -7.087871152613384e-02, -7.171469114628223e-02, -7.129260093629725e-02, -7.129260093629725e-02, -7.585254560045068e-02, -5.359311339598566e-02, -5.713201568367226e-02, -6.226880406645688e-02, -5.969015198763643e-02, -5.969015198763643e-02, -6.772780948868766e-02, -2.241637755248483e-02, -2.694833711742160e-02, -6.107451651548274e-02, -3.309685989530724e-02, -3.309685989530724e-02, -9.238392824421912e-03, -1.368911436755987e-03, -2.533074767414042e-03, -3.228551663139541e-02, -3.674874101249996e-03, -3.674874101249854e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
