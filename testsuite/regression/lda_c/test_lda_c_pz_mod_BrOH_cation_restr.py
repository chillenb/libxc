
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pz_mod_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.656086608426163e-01, -1.656087464663809e-01, -1.656091535522801e-01, -1.656078790859057e-01, -1.656085431297894e-01, -1.656085431297894e-01, -1.109228688542875e-01, -1.109229318270365e-01, -1.109251021844073e-01, -1.109268686904571e-01, -1.109236476551256e-01, -1.109236476551256e-01, -6.654827682178639e-02, -6.652228064910951e-02, -6.589021926939966e-02, -6.608384363350046e-02, -6.604276577041079e-02, -6.604276577041079e-02, -3.817016217685315e-02, -3.845370324888330e-02, -7.023764751490379e-02, -3.315418231374394e-02, -3.522160581833272e-02, -3.522160581833272e-02, -3.761698705864353e-03, -3.928228344931782e-03, -1.473815615664560e-02, -2.340115113785503e-03, -2.857215373929596e-03, -2.857215373929596e-03, -1.228180197732522e-01, -1.228234787026500e-01, -1.228182916798588e-01, -1.228231106020147e-01, -1.228207759318647e-01, -1.228207759318647e-01, -9.446904762035992e-02, -9.467128890970312e-02, -9.432056167037381e-02, -9.450021586528014e-02, -9.465228265127444e-02, -9.465228265127444e-02, -6.344999090267422e-02, -6.535407354913661e-02, -6.170681712560080e-02, -6.257171206593304e-02, -6.381418512723298e-02, -6.381418512723298e-02, -2.709639794334757e-02, -3.819874279078804e-02, -2.589764434434451e-02, -9.392943851188970e-02, -2.966609825315716e-02, -2.966609825315716e-02, -1.859153689204445e-03, -2.293844590739674e-03, -1.807221418025592e-03, -2.032308518413633e-02, -2.133258483163850e-03, -2.133258483163850e-03, -6.356010881698552e-02, -6.342934231690495e-02, -6.347541766736739e-02, -6.351331881335091e-02, -6.349435318292304e-02, -6.349435318292304e-02, -6.293744602508135e-02, -5.957502490994854e-02, -6.057226499406559e-02, -6.153237906276591e-02, -6.104554261396627e-02, -6.104554261396627e-02, -6.645943818767712e-02, -4.271490826229585e-02, -4.639023535334464e-02, -5.215857710397031e-02, -4.923954154681844e-02, -4.923954154681844e-02, -5.780084814934448e-02, -1.429664428152795e-02, -1.764603687548106e-02, -5.138859826277480e-02, -2.361186192768290e-02, -2.361186192768290e-02, -5.016831951581042e-03, -6.893564996114814e-04, -1.366828007645173e-03, -2.272348716698534e-02, -1.991173841731146e-03, -1.991173841731145e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pz_mod_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.758426570749207e-01, -1.758427430252995e-01, -1.758431516640286e-01, -1.758418723361398e-01, -1.758425389130735e-01, -1.758425389130735e-01, -1.206480937018926e-01, -1.206481578528887e-01, -1.206503688172064e-01, -1.206521683722620e-01, -1.206488870742705e-01, -1.206488870742705e-01, -7.440461505698211e-02, -7.437639521118397e-02, -7.368949494538922e-02, -7.390007791051319e-02, -7.385541412289834e-02, -7.385541412289834e-02, -4.444716924731380e-02, -4.475214853535436e-02, -7.838620078027909e-02, -3.900410316985860e-02, -4.125868767722183e-02, -4.125868767722183e-02, -4.824543380221439e-03, -5.033645522763351e-03, -1.813617658078338e-02, -3.026913400934168e-03, -3.683557362017754e-03, -3.683557362017754e-03, -1.327305045018582e-01, -1.327360350845886e-01, -1.327307799777550e-01, -1.327356621526654e-01, -1.327332968389585e-01, -1.327332968389585e-01, -1.037935335141624e-01, -1.040020615486228e-01, -1.036404057449598e-01, -1.038256732995943e-01, -1.039824662104119e-01, -1.039824662104119e-01, -7.102264252809476e-02, -7.310563800693180e-02, -6.910143009701097e-02, -7.005647429223572e-02, -7.142225373384573e-02, -7.142225373384573e-02, -3.230304993765480e-02, -4.447792362991123e-02, -3.095938460949234e-02, -1.032369490165586e-01, -3.516339897484987e-02, -3.516339897484987e-02, -2.412992966821126e-03, -2.967989512484564e-03, -2.346507388257108e-03, -2.462832171018984e-02, -2.763265684347803e-03, -2.763265684347803e-03, -7.114353125181157e-02, -7.099996822339047e-02, -7.105056114341342e-02, -7.109217126698153e-02, -7.107135047780228e-02, -7.107135047780228e-02, -7.045924181925983e-02, -6.673687292098052e-02, -6.784281484816175e-02, -6.890835700490823e-02, -6.836867712491515e-02, -6.836867712491515e-02, -7.430816704405556e-02, -4.930209978538493e-02, -5.317773497416423e-02, -5.917398168805141e-02, -5.615251457776529e-02, -5.615251457776529e-02, -6.494212642881125e-02, -1.761591985671799e-02, -2.153632696509402e-02, -5.837950610032302e-02, -2.838023376711451e-02, -2.838023376711451e-02, -6.393732347339066e-03, -9.043781705890059e-04, -1.781020090757598e-03, -2.737163281261245e-02, -2.581832322974000e-03, -2.581832322973999e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
