
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_xalpha_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.911127268460262e+00, -9.911154909314604e+00, -9.911286324831787e+00, -9.910874907194227e+00, -9.911089268817655e+00, -9.911089268817655e+00, -1.613617073941717e+00, -1.613620556774865e+00, -1.613740597043044e+00, -1.613838306925729e+00, -1.613660147570021e+00, -1.613660147570021e+00, -3.112353422082629e-01, -3.108921962962333e-01, -3.026350106528609e-01, -3.051470561321082e-01, -3.046128395274395e-01, -3.046128395274395e-01, -8.036444618647312e-02, -8.158156218254979e-02, -3.629161012930940e-01, -6.101112380386024e-02, -6.851061049851180e-02, -6.851061049851180e-02, -2.797573431288518e-03, -2.944561898093737e-03, -1.624545261209307e-02, -1.615686104731641e-03, -2.030233256894424e-03, -2.030233256894424e-03, -2.415928416689382e+00, -2.416371949799959e+00, -2.415950507006139e+00, -2.416342039494706e+00, -2.416152342325439e+00, -2.416152342325439e+00, -9.080998044166889e-01, -9.146867044396775e-01, -9.032910963609775e-01, -9.091121274260565e-01, -9.140658405413209e-01, -9.140658405413209e-01, -2.722491363095023e-01, -2.957584447177862e-01, -2.519127085487127e-01, -2.618659962803446e-01, -2.766383984398111e-01, -2.766383984398111e-01, -4.235907354148243e-02, -8.048649006187071e-02, -3.918747007838638e-02, -8.907347823825419e-01, -4.970978736501389e-02, -4.970978736501389e-02, -1.246609351809772e-03, -1.579476108944817e-03, -1.207743354375165e-03, -2.635678060188847e-02, -1.454956290875772e-03, -1.454956290875772e-03, -2.735710361521542e-01, -2.720017655876220e-01, -2.725539678813361e-01, -2.730087972711466e-01, -2.727811349144748e-01, -2.727811349144748e-01, -2.661554580096224e-01, -2.284752889133323e-01, -2.392501276919361e-01, -2.499371352491911e-01, -2.444790351826369e-01, -2.444790351826369e-01, -3.100638457135426e-01, -1.016897030028488e-01, -1.221240426549163e-01, -1.613088900837090e-01, -1.402807304294085e-01, -1.402807304294085e-01, -2.103436174118242e-01, -1.554896060496006e-02, -2.119850643082369e-02, -1.555041949721406e-01, -3.356056106618446e-02, -3.356056106618447e-02, -3.948235154987034e-03, -4.222040827661662e-04, -8.862250497845261e-04, -3.151480186873875e-02, -1.346289682164183e-03, -1.346289682164182e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_xalpha_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.321483635794702e+01, -1.321487321241947e+01, -1.321504843310905e+01, -1.321449987625897e+01, -1.321478569175687e+01, -1.321478569175687e+01, -2.151489431922289e+00, -2.151494075699820e+00, -2.151654129390725e+00, -2.151784409234305e+00, -2.151546863426694e+00, -2.151546863426694e+00, -4.149804562776838e-01, -4.145229283949777e-01, -4.035133475371479e-01, -4.068627415094776e-01, -4.061504527032527e-01, -4.061504527032527e-01, -1.071525949152975e-01, -1.087754162433997e-01, -4.838881350574587e-01, -8.134816507181365e-02, -9.134748066468240e-02, -9.134748066468240e-02, -3.730097908384690e-03, -3.926082530791648e-03, -2.166060348279077e-02, -2.154248139642187e-03, -2.706977675859232e-03, -2.706977675859232e-03, -3.221237888919176e+00, -3.221829266399945e+00, -3.221267342674852e+00, -3.221789385992941e+00, -3.221536456433920e+00, -3.221536456433920e+00, -1.210799739222252e+00, -1.219582272586236e+00, -1.204388128481303e+00, -1.212149503234742e+00, -1.218754454055095e+00, -1.218754454055095e+00, -3.629988484126697e-01, -3.943445929570482e-01, -3.358836113982836e-01, -3.491546617071262e-01, -3.688511979197482e-01, -3.688511979197482e-01, -5.647876472197657e-02, -1.073153200824943e-01, -5.224996010451517e-02, -1.187646376510056e+00, -6.627971648668519e-02, -6.627971648668519e-02, -1.662145802413030e-03, -2.105968145259756e-03, -1.610324472500220e-03, -3.514237413585129e-02, -1.939941721167696e-03, -1.939941721167696e-03, -3.647613815362056e-01, -3.626690207834961e-01, -3.634052905084482e-01, -3.640117296948621e-01, -3.637081798859664e-01, -3.637081798859664e-01, -3.548739440128300e-01, -3.046337185511098e-01, -3.190001702559148e-01, -3.332495136655882e-01, -3.259720469101826e-01, -3.259720469101826e-01, -4.134184609513902e-01, -1.355862706704651e-01, -1.628320568732217e-01, -2.150785201116120e-01, -1.870409739058780e-01, -1.870409739058780e-01, -2.804581565490990e-01, -2.073194747328008e-02, -2.826467524109825e-02, -2.073389266295209e-01, -4.474741475491262e-02, -4.474741475491262e-02, -5.264313539982713e-03, -5.629387770215551e-04, -1.181633399712702e-03, -4.201973582498501e-02, -1.795052909552244e-03, -1.795052909552242e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
