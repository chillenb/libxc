
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_mcweeny_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_mcweeny", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.024404887318765e-01, -1.024404919443181e-01, -1.024405072172896e-01, -1.024404594014341e-01, -1.024404843154995e-01, -1.024404843154995e-01, -9.684106584759279e-02, -9.684107949461059e-02, -9.684154982275926e-02, -9.684193261024429e-02, -9.684123462199742e-02, -9.684123462199742e-02, -7.606057216046298e-02, -7.603825907348029e-02, -7.549021724853429e-02, -7.565923782801504e-02, -7.562346392495922e-02, -7.562346392495922e-02, -4.312381268937922e-02, -4.350268865045007e-02, -7.905354289605648e-02, -3.638596220597095e-02, -3.916768775299079e-02, -3.916768775299079e-02, -2.509261220031457e-03, -2.637744769705468e-03, -1.305172047662891e-02, -1.464157959446047e-03, -1.833179521106320e-03, -1.833179521106320e-03, -9.898734107595984e-02, -9.898815097125023e-02, -9.898738141979187e-02, -9.898809636370696e-02, -9.898775000161335e-02, -9.898775000161335e-02, -9.216595944618207e-02, -9.223930089391749e-02, -9.211181663518229e-02, -9.217729258935915e-02, -9.223242808909680e-02, -9.223242808909680e-02, -7.327101568507648e-02, -7.501689940332437e-02, -7.157915475291282e-02, -7.243015791783936e-02, -7.361298488299969e-02, -7.361298488299969e-02, -2.830076028193515e-02, -4.316201905719655e-02, -2.672842732698664e-02, -9.196799444642950e-02, -3.170881954657936e-02, -3.170881954657936e-02, -1.133354035226369e-03, -1.431797421238109e-03, -1.098393651233465e-03, -1.963564312035362e-02, -1.320358543520988e-03, -1.320358543520988e-03, -7.337482325128658e-02, -7.325151065320877e-02, -7.329501701970462e-02, -7.333075811013283e-02, -7.331287864572174e-02, -7.331287864572174e-02, -7.278311850115948e-02, -6.937914897412810e-02, -7.042694069639290e-02, -7.140468771935435e-02, -7.091263995262581e-02, -7.091263995262581e-02, -7.598424626485656e-02, -4.913955949449206e-02, -5.387892785452728e-02, -6.098979579954072e-02, -5.744768255682640e-02, -5.744768255682640e-02, -6.745817866490056e-02, -1.255998924383048e-02, -1.640110147409495e-02, -6.006751398983744e-02, -2.377107246740782e-02, -2.377107246740782e-02, -3.506408632423504e-03, -3.866436268064019e-04, -8.082669676108247e-04, -2.263867645471311e-02, -1.222908653775234e-03, -1.222908653775232e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_mcweeny_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_mcweeny", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.028244494366182e-01, -1.028244516023273e-01, -1.028244618987975e-01, -1.028244296631183e-01, -1.028244464592604e-01, -1.028244464592604e-01, -9.894865129113280e-02, -9.894866098315355e-02, -9.894899500632638e-02, -9.894926685779111e-02, -9.894877115350180e-02, -9.894877115350180e-02, -8.280114518996307e-02, -8.278231337533408e-02, -8.231877098703616e-02, -8.246193735947065e-02, -8.243165094225072e-02, -8.243165094225072e-02, -5.151526044989752e-02, -5.191483326923899e-02, -8.529811938009907e-02, -4.425506562560935e-02, -4.728784762488267e-02, -4.728784762488267e-02, -3.325424035264391e-03, -3.494607794280128e-03, -1.685422957676344e-02, -1.945313426816870e-03, -2.433427361089915e-03, -2.433427361089915e-03, -1.004581010587399e-01, -1.004586650537709e-01, -1.004581291534849e-01, -1.004586270262926e-01, -1.004583858269891e-01, -1.004583858269891e-01, -9.555810175947886e-02, -9.561237737490474e-02, -9.551801169873626e-02, -9.556649100134722e-02, -9.560729269320810e-02, -9.560729269320810e-02, -8.042197755681087e-02, -8.191687596688380e-02, -7.895462309924869e-02, -7.969500212579168e-02, -8.071633046508309e-02, -8.071633046508309e-02, -3.515747849923580e-02, -5.155559579308429e-02, -3.333941176871089e-02, -9.541142691253421e-02, -3.904356071681039e-02, -3.904356071681039e-02, -1.507006076736768e-03, -1.902467553886499e-03, -1.460643256626837e-03, -2.494038734173885e-02, -1.754869130631768e-03, -1.754869130631768e-03, -8.051141034823391e-02, -8.040516574999318e-02, -8.044266146418744e-02, -8.047345560668186e-02, -8.045805187822530e-02, -8.045805187822530e-02, -8.000071322366201e-02, -7.701900634982535e-02, -7.794476233687869e-02, -7.880225987849339e-02, -7.837149614391783e-02, -7.837149614391783e-02, -8.273671434394504e-02, -5.775052973992861e-02, -6.249884849206858e-02, -6.935203536272239e-02, -6.597895004141560e-02, -6.597895004141560e-02, -7.530342227136107e-02, -1.623910727868091e-02, -2.100268508461078e-02, -6.848153818686818e-02, -2.987676441317967e-02, -2.987676441317967e-02, -4.635654713479939e-03, -5.150438659834905e-04, -1.075587420788278e-03, -2.853598748945494e-02, -1.625733331762139e-03, -1.625733331762138e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
