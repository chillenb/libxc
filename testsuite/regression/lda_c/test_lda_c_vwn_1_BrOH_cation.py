
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.648405511595656e-01, -1.648406355696870e-01, -1.648410368876041e-01, -1.648397804706343e-01, -1.648404350897067e-01, -1.648404350897067e-01, -1.112951932801915e-01, -1.112952546326857e-01, -1.112973693312495e-01, -1.112990905740086e-01, -1.112959376292224e-01, -1.112959376292224e-01, -6.735702923867377e-02, -6.732953208620629e-02, -6.667034110832569e-02, -6.687469371196431e-02, -6.657103041301901e-02, -6.657103041301901e-02, -3.778479546328845e-02, -3.805212024762714e-02, -7.108645305233276e-02, -3.286270918264996e-02, -2.710042213815228e-02, -2.710042213815229e-02, -3.771548611219105e-03, -3.936495672011127e-03, -1.472922453452860e-02, -2.344346215585418e-03, -2.442435078640152e-03, -2.442435078640152e-03, -1.228894563824314e-01, -1.228947806303550e-01, -1.228897213507845e-01, -1.228944218960441e-01, -1.228921444752978e-01, -1.228921444752978e-01, -9.524162316446001e-02, -9.543950521858838e-02, -9.509605459158688e-02, -9.527183583957123e-02, -9.541920990205412e-02, -9.541920990205412e-02, -6.411156483211733e-02, -6.611359701785607e-02, -6.218366154803925e-02, -6.311886996284501e-02, -6.434275006334109e-02, -6.434275006334106e-02, -2.691270950934967e-02, -3.786127476154524e-02, -2.567875652779352e-02, -9.471349211435807e-02, -2.935169931332754e-02, -2.935169931332754e-02, -1.857677608086896e-03, -2.297722328111818e-03, -1.803313861632998e-03, -2.026942142454393e-02, -2.013617655360980e-03, -2.013617655360980e-03, -6.422750001420645e-02, -6.408925066361325e-02, -6.413797029420924e-02, -6.417805141486077e-02, -6.415799635685605e-02, -6.415799635685605e-02, -6.356846085910779e-02, -5.995557446401563e-02, -6.103698542981398e-02, -6.207023628041660e-02, -6.154742207867078e-02, -6.154742207867078e-02, -6.726552901993656e-02, -4.237966463941759e-02, -4.609992390132443e-02, -5.205324447517082e-02, -4.902518578867707e-02, -4.902518578867707e-02, -5.803370723561773e-02, -1.432711939574648e-02, -1.762032510743175e-02, -5.124125437652350e-02, -2.343881161581912e-02, -2.343881161581912e-02, -5.044181352489096e-03, -6.836987430352721e-04, -1.360305746218562e-03, -2.262152375479461e-02, -1.899453370179167e-03, -1.899453370179163e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.749292801970956e-01, -1.749298112036723e-01, -1.749291829399354e-01, -1.749300783559471e-01, -1.749305294930878e-01, -1.749295395408451e-01, -1.749271995910514e-01, -1.749303406685462e-01, -1.749268010930161e-01, -1.749320567892057e-01, -1.749268010930161e-01, -1.749320567892057e-01, -1.207692134700694e-01, -1.207729846260181e-01, -1.207690084189016e-01, -1.207733146861586e-01, -1.207761607269645e-01, -1.207704704789148e-01, -1.207770083632342e-01, -1.207731292361386e-01, -1.208235846903202e-01, -1.207201857462002e-01, -1.208235846903202e-01, -1.207201857462002e-01, -7.584583080045394e-02, -7.519374544670142e-02, -7.589225801994830e-02, -7.509169809951227e-02, -7.424156074165060e-02, -7.536896389991284e-02, -7.519102950525761e-02, -7.483698431403098e-02, -6.985494723789391e-02, -8.054017718446571e-02, -6.985494723789391e-02, -8.054017718446571e-02, -4.582868062535839e-02, -4.240824771038560e-02, -4.639897842776606e-02, -4.247759969798097e-02, -8.243211359788058e-02, -7.666439059794337e-02, -3.916768418944463e-02, -3.811115600623419e-02, -2.550977065977767e-02, -7.130263859447183e-02, -2.550977065977769e-02, -7.130263859447182e-02, -5.072712428519878e-03, -4.650612071941822e-03, -5.326208619884056e-03, -4.824062171217286e-03, -1.902730362592799e-02, -1.728169612461821e-02, -3.004320146951112e-03, -3.072758681899900e-03, -2.731473880516890e-03, -5.349320872027299e-03, -2.731473880516890e-03, -5.349320872027299e-03, -1.325214007873569e-01, -1.325946595449368e-01, -1.325258364464443e-01, -1.326010311988790e-01, -1.325209883815620e-01, -1.325956106804672e-01, -1.325263178837024e-01, -1.325998204908738e-01, -1.325234569368242e-01, -1.325980600211532e-01, -1.325234569368242e-01, -1.325980600211532e-01, -1.043600104313987e-01, -1.043719198586267e-01, -1.045367735444847e-01, -1.046010565610945e-01, -1.044204905109220e-01, -1.040138535889454e-01, -1.046097054262418e-01, -1.041853001477412e-01, -1.040331893160374e-01, -1.050695649348737e-01, -1.040331893160374e-01, -1.050695649348737e-01, -7.191218369216835e-02, -7.232725950885811e-02, -7.425366213868993e-02, -7.418028457463495e-02, -7.297678314834000e-02, -6.749668385192552e-02, -7.371472281651466e-02, -6.867619567131848e-02, -6.863330088169722e-02, -7.668044875002630e-02, -6.863330088169720e-02, -7.668044875002626e-02, -3.231757719255238e-02, -3.172837973016637e-02, -4.433326747611747e-02, -4.388649717553207e-02, -3.229630376737543e-02, -2.920424932588105e-02, -1.037716237398876e-01, -1.038769278116393e-01, -3.687368140858456e-02, -3.293388919719826e-02, -3.687368140858456e-02, -3.293388919719826e-02, -2.479586935980482e-03, -2.358593475712193e-03, -3.008830458987333e-03, -2.949007665489206e-03, -2.440555546905283e-03, -2.266004785941323e-03, -2.464023693163699e-02, -2.436122019704156e-02, -3.422242618932947e-03, -2.294772098197924e-03, -3.422242618932947e-03, -2.294772098197923e-03, -7.254483535165364e-02, -7.193960217645934e-02, -7.240220680928686e-02, -7.179225791789520e-02, -7.245344805891409e-02, -7.184323045714421e-02, -7.249287291452457e-02, -7.188783175416294e-02, -7.247311487077993e-02, -7.186554599089320e-02, -7.247311487077993e-02, -7.186554599089320e-02, -7.180635544134381e-02, -7.129418824223752e-02, -6.806723053645369e-02, -6.743611704821344e-02, -6.921993268561337e-02, -6.856126544979248e-02, -7.024232428596301e-02, -6.971097423685432e-02, -6.970520092612784e-02, -6.914886174856888e-02, -6.970520092612784e-02, -6.914886174856888e-02, -7.555656334578593e-02, -7.528856203786607e-02, -4.930693580825459e-02, -4.872249140732940e-02, -5.358000166423771e-02, -5.247523993652418e-02, -5.973276057224169e-02, -5.903875757470985e-02, -5.613272331838547e-02, -5.617440856546794e-02, -5.613272331838548e-02, -5.617440856546794e-02, -6.621132494528779e-02, -6.524303444345422e-02, -1.772146658449323e-02, -1.751003698941053e-02, -2.212414751792793e-02, -2.083916147084171e-02, -5.946481799567705e-02, -5.761181012711732e-02, -2.967511663498432e-02, -2.676640584294500e-02, -2.967511663498433e-02, -2.676640584294500e-02, -6.612922212479266e-03, -6.270088874987955e-03, -8.998738989434064e-04, -8.974903823039684e-04, -1.850887580689868e-03, -1.713682072565658e-03, -2.760709512234131e-02, -2.677401555785074e-02, -3.124148553712062e-03, -2.183137557883426e-03, -3.124148553712057e-03, -2.183137557883420e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
