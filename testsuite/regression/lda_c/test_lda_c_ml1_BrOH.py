
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ml1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.893548632865184e-02, -9.893549001196020e-02, -9.893550915620807e-02, -9.893544878628728e-02, -9.893548824848425e-02, -9.893548824848425e-02, -9.199625796466872e-02, -9.199627400626030e-02, -9.199702951174610e-02, -9.199734768239813e-02, -9.199629877605814e-02, -9.199629877605814e-02, -6.842445762420062e-02, -6.840249509854607e-02, -6.782250316498881e-02, -6.799155207735486e-02, -6.841645081891028e-02, -6.841645081891028e-02, -3.787443011167523e-02, -3.817658080818812e-02, -7.216904623335553e-02, -3.087180348289584e-02, -3.796538169822519e-02, -3.796538169822519e-02, -3.584067618127848e-03, -3.744377703095892e-03, -1.320908721808722e-02, -1.773319205661831e-03, -3.707569269609211e-03, -3.707569269609211e-03, -9.460929127198231e-02, -9.461025530475103e-02, -9.460939300051066e-02, -9.461014254694744e-02, -9.460978129768192e-02, -9.460978129768192e-02, -8.642413763052342e-02, -8.650758175343930e-02, -8.639011953073718e-02, -8.645564865474709e-02, -8.652417499675542e-02, -8.652417499675542e-02, -6.539434933223208e-02, -6.721958727334368e-02, -6.421434671417713e-02, -6.516342589148372e-02, -6.623180672724185e-02, -6.623180672724185e-02, -2.490162765525792e-02, -3.803738535004882e-02, -2.466950155178763e-02, -8.619189993149450e-02, -2.761535941432580e-02, -2.761535941432580e-02, -1.712582664631747e-03, -1.948897079046691e-03, -1.473398342770653e-03, -1.734069318037915e-02, -1.781101593927697e-03, -1.781101593927697e-03, -6.609194806865597e-02, -6.597338922687139e-02, -6.601598487849622e-02, -6.604877466709924e-02, -6.603237122444199e-02, -6.603237122444199e-02, -6.536657036316830e-02, -6.213070022693344e-02, -6.313497096134052e-02, -6.401997613032558e-02, -6.357438000405218e-02, -6.357438000405218e-02, -6.824319959065941e-02, -4.340408005021459e-02, -4.755139157200509e-02, -5.353782631404448e-02, -5.054470261254593e-02, -5.054470261254588e-02, -5.971519921605552e-02, -1.238170789092773e-02, -1.592240312052686e-02, -5.215573550631359e-02, -2.132818611855457e-02, -2.132818611855457e-02, -4.161553463401688e-03, -5.481950137909292e-04, -1.031078487384343e-03, -2.057595742261236e-02, -1.520919114724043e-03, -1.520919114724041e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ml1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.944129448065465e-02, -9.944129713523070e-02, -9.944131093239426e-02, -9.944126742423448e-02, -9.944129586432873e-02, -9.944129586432873e-02, -9.454412675918629e-02, -9.454413839561403e-02, -9.454468643049700e-02, -9.454491722661540e-02, -9.454415636339593e-02, -9.454415636339593e-02, -7.555139138606191e-02, -7.553195080435213e-02, -7.501740115100683e-02, -7.516760607703321e-02, -7.554430436824994e-02, -7.554430436824994e-02, -4.547654297998668e-02, -4.580313648773422e-02, -7.881908396482318e-02, -3.774792760224113e-02, -4.557491230441937e-02, -4.557491230441937e-02, -4.712822105849642e-03, -4.921119891971476e-03, -1.690415753271828e-02, -2.346061804993464e-03, -4.873310257713502e-03, -4.873310257713502e-03, -9.641640733827779e-02, -9.641708963217460e-02, -9.641647933690600e-02, -9.641700982818743e-02, -9.641675415458116e-02, -9.641675415458116e-02, -9.039562376675542e-02, -9.045932043932600e-02, -9.036964252223639e-02, -9.041968316357443e-02, -9.047198112469901e-02, -9.047198112469901e-02, -7.283904737121089e-02, -7.448015073250566e-02, -7.176638573715265e-02, -7.262985243726471e-02, -7.359475300155049e-02, -7.359475300155049e-02, -3.091859861955660e-02, -4.565275164344539e-02, -3.064861907739277e-02, -9.021809506442366e-02, -3.405017617920296e-02, -3.405017617920296e-02, -2.266208270807397e-03, -2.576724666948434e-03, -1.951425614802822e-03, -2.195337034732728e-02, -2.356291411825885e-03, -2.356291411825885e-03, -7.346886931137697e-02, -7.336205592956173e-02, -7.340044237404472e-02, -7.342998378657198e-02, -7.341520626642860e-02, -7.341520626642860e-02, -7.281390084452202e-02, -6.984991931655410e-02, -7.077717233851771e-02, -7.158881684441382e-02, -7.118080092916459e-02, -7.118080092916459e-02, -7.539085132342643e-02, -5.136278866736563e-02, -5.565088017605224e-02, -6.164716112774390e-02, -5.867780347867783e-02, -5.867780347867774e-02, -6.759262065506519e-02, -1.588009156300826e-02, -2.023214700685836e-02, -6.028319583068727e-02, -2.672554896936431e-02, -2.672554896936430e-02, -5.462271933107983e-03, -7.287782510884426e-04, -1.367937792068787e-03, -2.583283322455201e-02, -2.014006472586114e-03, -2.014006472586111e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
