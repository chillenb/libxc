
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_2d_amgb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_amgb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.905653495590057e-01, -1.905653553475487e-01, -1.905653854340608e-01, -1.905652905580912e-01, -1.905653525760560e-01, -1.905653525760560e-01, -1.768056758705619e-01, -1.768057104947149e-01, -1.768073411693375e-01, -1.768080279008068e-01, -1.768057639578166e-01, -1.768057639578166e-01, -1.217285397847222e-01, -1.216744235667291e-01, -1.202440659663198e-01, -1.206612127115326e-01, -1.217088112198385e-01, -1.217088112198385e-01, -4.852398283108011e-02, -4.916202028321329e-02, -1.308984920645570e-01, -3.466500550349241e-02, -4.871571767105026e-02, -4.871571767105026e-02, -1.157807374144809e-03, -1.238799379602806e-03, -8.865243602794559e-03, -3.927153131048633e-04, -1.220027466601187e-03, -1.220027466601187e-03, -1.823390521712470e-01, -1.823410466614556e-01, -1.823392626396646e-01, -1.823408133786638e-01, -1.823400659920648e-01, -1.823400659920648e-01, -1.644536579709542e-01, -1.646425828002054e-01, -1.643766085639749e-01, -1.645250137718048e-01, -1.646801390995727e-01, -1.646801390995727e-01, -1.142326316645488e-01, -1.187547395391345e-01, -1.113002246693957e-01, -1.136592496524643e-01, -1.163097901051564e-01, -1.163097901051564e-01, -2.440389297124546e-02, -4.886770626374873e-02, -2.403581017689332e-02, -1.639273133703653e-01, -2.888046785007989e-02, -2.888046785007989e-02, -3.723417849103017e-04, -4.537418625474854e-04, -2.959300868206616e-04, -1.364467713425757e-02, -3.953542059125792e-04, -3.953542059125792e-04, -1.159631546793875e-01, -1.156692265635415e-01, -1.157748373710241e-01, -1.158561290614437e-01, -1.158154627494286e-01, -1.158154627494286e-01, -1.141636700219507e-01, -1.061106097163599e-01, -1.086133156677117e-01, -1.108166578144990e-01, -1.097075860379716e-01, -1.097075860379716e-01, -1.212818111879929e-01, -6.065297978206083e-02, -7.028835357577647e-02, -8.476530087076957e-02, -7.746011023687409e-02, -7.746011023687405e-02, -1.000870563815267e-01, -8.005577504421935e-03, -1.191416992095773e-02, -8.137817924214909e-02, -1.900050851261290e-02, -1.900050851261292e-02, -1.458724273696005e-03, -6.608805192651057e-05, -1.718560458431329e-04, -1.793533137715994e-02, -3.106143681645968e-04, -3.106143681633200e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_2d_amgb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_amgb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.913602647494819e-01, -1.913602682635402e-01, -1.913602865281918e-01, -1.913602289316945e-01, -1.913602665810466e-01, -1.913602665810466e-01, -1.823049940217529e-01, -1.823050180566068e-01, -1.823061500072168e-01, -1.823066267060656e-01, -1.823050551687783e-01, -1.823050551687783e-01, -1.392889162870527e-01, -1.392421506347041e-01, -1.380024480825549e-01, -1.383647178173199e-01, -1.392718685918769e-01, -1.392718685918769e-01, -6.453829821983519e-02, -6.530535146807755e-02, -1.470741612778377e-01, -4.734240871162197e-02, -6.476903305223519e-02, -6.476903305223519e-02, -1.721059227262347e-03, -1.840589176325228e-03, -1.277879506512459e-02, -5.866510942521693e-04, -1.812893971074716e-03, -1.812893971074716e-03, -1.860778390124560e-01, -1.860791723603200e-01, -1.860779797148637e-01, -1.860790164082041e-01, -1.860785167701128e-01, -1.860785167701128e-01, -1.734478948535824e-01, -1.735872314888793e-01, -1.733910372959621e-01, -1.735005344935244e-01, -1.736149169680822e-01, -1.736149169680822e-01, -1.327136894172427e-01, -1.367041228538411e-01, -1.300859589084828e-01, -1.322024079772295e-01, -1.345557791175289e-01, -1.345557791175289e-01, -3.397553917288394e-02, -6.495179672287413e-02, -3.348655842463915e-02, -1.730591209484447e-01, -3.987071735078088e-02, -3.987071735078088e-02, -5.562997072161882e-04, -6.775119790002553e-04, -4.423940329563115e-04, -1.942314502799369e-02, -5.905804661464340e-04, -5.905804661464340e-04, -1.342494632831779e-01, -1.339893832153783e-01, -1.340828682064583e-01, -1.341547987411362e-01, -1.341188183594973e-01, -1.341188183594973e-01, -1.326522610271801e-01, -1.253547065844391e-01, -1.276495136269571e-01, -1.296495182250098e-01, -1.286451459648485e-01, -1.286451459648485e-01, -1.389025678473365e-01, -7.874559575029447e-02, -8.947419674322743e-02, -1.047002608718441e-01, -9.714776397219070e-02, -9.714776397219067e-02, -1.197273116072702e-01, -1.156973385027697e-02, -1.703150880498310e-02, -1.012309196765880e-01, -2.673409270294231e-02, -2.673409270294231e-02, -2.164665032823454e-03, -9.876679866964744e-05, -2.571742064958137e-04, -2.529069488090081e-02, -4.642954326105782e-04, -4.642954326111701e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
