
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ow_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.192480025389128e-02, -5.192480211275938e-02, -5.192481095041105e-02, -5.192478328193432e-02, -5.192479769837022e-02, -5.192479769837022e-02, -4.870959738896785e-02, -4.870960516493943e-02, -4.870987315467903e-02, -4.871009126460667e-02, -4.870969355541776e-02, -4.870969355541776e-02, -3.719714595190826e-02, -3.718512735588125e-02, -3.689015753326187e-02, -3.698108268216217e-02, -3.696183458162083e-02, -3.696183458162083e-02, -2.020220920618690e-02, -2.038956954485103e-02, -3.881577124694644e-02, -1.690026536361831e-02, -1.825662021932159e-02, -1.825662021932159e-02, -1.117532998677538e-03, -1.174938194029378e-03, -5.888144335536790e-03, -6.512557268861935e-04, -8.157612009089085e-04, -8.157612009089085e-04, -4.993614000656683e-02, -4.993660420847157e-02, -4.993616313012868e-02, -4.993657290942312e-02, -4.993637438743655e-02, -4.993637438743655e-02, -4.606272791901978e-02, -4.610399065683624e-02, -4.603227184582711e-02, -4.606910353623735e-02, -4.610012358789547e-02, -4.610012358789547e-02, -3.570011912576929e-02, -3.663575252283658e-02, -3.479756887099257e-02, -3.525104350439047e-02, -3.588304123468138e-02, -3.588304123468138e-02, -1.301167238362759e-02, -2.022109465524040e-02, -1.226459388004183e-02, -4.595139171424110e-02, -1.464113231988909e-02, -1.464113231988909e-02, -5.039123490191392e-04, -6.368368021173849e-04, -4.883475492131995e-04, -8.930744428772168e-03, -5.871915032292182e-04, -5.871915032292182e-04, -3.575562906577148e-02, -3.568969073594556e-02, -3.571295221128711e-02, -3.573206385179708e-02, -3.572250303533303e-02, -3.572250303533303e-02, -3.543942650926943e-02, -3.362997793920951e-02, -3.418521573200164e-02, -3.470472685526527e-02, -3.444311651905998e-02, -3.444311651905998e-02, -3.715603716049717e-02, -2.319868133798580e-02, -2.559226872587860e-02, -2.923920118495496e-02, -2.741413058376550e-02, -2.741413058376550e-02, -3.261601633137812e-02, -5.662879466196530e-03, -7.429795073938568e-03, -2.876237079117817e-02, -1.086737050221919e-02, -1.086737050221919e-02, -1.563519283289012e-03, -1.717541609538229e-04, -3.592304141229927e-04, -1.033508575519844e-02, -5.437892038878075e-04, -5.437892038878071e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ow_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.214697776940568e-02, -5.214697902455864e-02, -5.214698499195537e-02, -5.214696630952557e-02, -5.214697604385565e-02, -5.214697604385565e-02, -4.991048423855191e-02, -4.991048980595033e-02, -4.991068167933807e-02, -4.991083783946092e-02, -4.991055309123694e-02, -4.991055309123694e-02, -4.082795843671694e-02, -4.081759885427318e-02, -4.056277200360849e-02, -4.064144055755391e-02, -4.062479581960660e-02, -4.062479581960660e-02, -2.434990849284652e-02, -2.455152652732788e-02, -4.220642695096487e-02, -2.072368100852075e-02, -2.222996649120863e-02, -2.222996649120863e-02, -1.482129676290372e-03, -1.557835971254703e-03, -7.631149077825264e-03, -8.656531743666226e-04, -1.083464450787871e-03, -1.083464450787871e-03, -5.077912407240948e-02, -5.077944921158985e-02, -5.077914026882289e-02, -5.077942728900186e-02, -5.077928823925489e-02, -5.077928823925489e-02, -4.797099525234549e-02, -4.800191178525159e-02, -4.794816188259757e-02, -4.797577365901002e-02, -4.799901526029132e-02, -4.799901526029132e-02, -3.952348896367390e-02, -4.034210372554049e-02, -3.872330602741043e-02, -3.912663805561042e-02, -3.968440575112242e-02, -3.968440575112242e-02, -1.627599652279079e-02, -2.437025124465392e-02, -1.539955823395717e-02, -4.788746778327441e-02, -1.816306390681980e-02, -1.816306390681980e-02, -6.702739580363303e-04, -8.465456403863542e-04, -6.496187644210054e-04, -1.140222073359708e-02, -7.807369988464064e-04, -7.807369988464064e-04, -3.957236594137692e-02, -3.951430231948991e-02, -3.953479207610349e-02, -3.955162133909507e-02, -3.954320288672175e-02, -3.954320288672175e-02, -3.929342450091495e-02, -3.767282599631155e-02, -3.817452734708272e-02, -3.864040851868975e-02, -3.840623219305879e-02, -3.840623219305879e-02, -4.079251661024309e-02, -2.752106297649431e-02, -2.997242789218804e-02, -3.356778861457701e-02, -3.178959771331124e-02, -3.178959771331124e-02, -3.674654825597740e-02, -7.347285398219770e-03, -9.556571791609333e-03, -3.310728036080271e-02, -1.374141325750579e-02, -1.374141325750579e-02, -2.069200663211607e-03, -2.288186056582977e-04, -4.781561003868612e-04, -1.310321955213211e-02, -7.231783384013293e-04, -7.231783384013288e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
