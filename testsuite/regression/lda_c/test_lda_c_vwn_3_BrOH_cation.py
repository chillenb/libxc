
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_3_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.648405511596359e-01, -1.648406355698870e-01, -1.648410368878485e-01, -1.648397804730950e-01, -1.648404350965957e-01, -1.648404350965957e-01, -1.112951932847701e-01, -1.112952546386558e-01, -1.112973693416737e-01, -1.112990905788531e-01, -1.112959410712493e-01, -1.112959410712493e-01, -6.735721074747544e-02, -6.732980571919477e-02, -6.667088666069175e-02, -6.687474742728963e-02, -6.661983943312115e-02, -6.661983943312115e-02, -3.779160444328666e-02, -3.806103218460927e-02, -7.110022836852865e-02, -3.286340824950416e-02, -2.784145422006357e-02, -2.784145422006358e-02, -3.766470472206684e-03, -3.930234738865048e-03, -1.473111552166141e-02, -2.343724233273705e-03, -2.136311134736138e-03, -2.136311134736138e-03, -1.228894580087333e-01, -1.228947823437024e-01, -1.228897230381873e-01, -1.228944235331494e-01, -1.228921461618109e-01, -1.228921461618109e-01, -9.524162321447441e-02, -9.543950667401865e-02, -9.509611295011572e-02, -9.527189934263347e-02, -9.541958823693389e-02, -9.541958823693389e-02, -6.411164036384157e-02, -6.611359933949651e-02, -6.219702666497146e-02, -6.313008035364588e-02, -6.437100114626600e-02, -6.437100114626597e-02, -2.691294768351639e-02, -3.786139098907899e-02, -2.568541779367578e-02, -9.471349603701382e-02, -2.936192602604494e-02, -2.936192602604494e-02, -1.853075175118449e-03, -2.297212890852390e-03, -1.792528931351063e-03, -2.026947871907132e-02, -1.801161378079533e-03, -1.801161378079531e-03, -6.422766044684371e-02, -6.408941379557173e-02, -6.413813350299252e-02, -6.417821181237046e-02, -6.415815812462962e-02, -6.415815812462962e-02, -6.356857638780884e-02, -5.995575550886612e-02, -6.103718073559751e-02, -6.207036223541525e-02, -6.154756079071169e-02, -6.154756079071169e-02, -6.726555970224481e-02, -4.237985191021432e-02, -4.610056328126059e-02, -5.205348076011392e-02, -4.902518666927027e-02, -4.902518666927027e-02, -5.803414094880299e-02, -1.432714586228580e-02, -1.762151441269492e-02, -5.124295288259401e-02, -2.344488001702862e-02, -2.344488001702862e-02, -5.042860076381850e-03, -6.837062312572669e-04, -1.325068749619687e-03, -2.262202707172738e-02, -1.703043712870361e-03, -1.703043712870363e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_3_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_3", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.749293530114436e-01, -1.749297383891951e-01, -1.749293057239208e-01, -1.749299555715943e-01, -1.749303937452842e-01, -1.749296752881997e-01, -1.749276303092173e-01, -1.749299099458593e-01, -1.749275217752130e-01, -1.749313360943518e-01, -1.749275217752130e-01, -1.749313360943518e-01, -1.207696608957408e-01, -1.207725371923141e-01, -1.207695193318785e-01, -1.207728037627078e-01, -1.207754855914361e-01, -1.207711455961552e-01, -1.207765481122447e-01, -1.207735894786290e-01, -1.208113138436280e-01, -1.207324505542541e-01, -1.208113138436280e-01, -1.207324505542541e-01, -7.578450633312633e-02, -7.525477459986935e-02, -7.581694419969376e-02, -7.516656674687178e-02, -7.434634865956995e-02, -7.526328981863638e-02, -7.515788957403520e-02, -7.487003695255275e-02, -7.081348806525600e-02, -7.950218704125059e-02, -7.081348806525600e-02, -7.950218704125059e-02, -4.558545225408505e-02, -4.264147812962963e-02, -4.611820729626268e-02, -4.274526115705427e-02, -8.186473010696636e-02, -7.720915187017326e-02, -3.909917100021226e-02, -3.817867782061142e-02, -2.660184578432639e-02, -7.132096128328322e-02, -2.660184578432641e-02, -7.132096128328319e-02, -5.190952921631540e-03, -4.545134293808748e-03, -5.455901434272354e-03, -4.710136055295151e-03, -1.898061157054482e-02, -1.732778111927395e-02, -2.955795492365831e-03, -3.122968461210766e-03, -2.378213987786035e-03, -5.850394940820577e-03, -2.378213987786034e-03, -5.850394940820577e-03, -1.325304506772298e-01, -1.325856067647083e-01, -1.325351256163277e-01, -1.325917389839212e-01, -1.325302066945661e-01, -1.325863893685149e-01, -1.325353980377083e-01, -1.325907374272969e-01, -1.325326729486149e-01, -1.325888410119879e-01, -1.325326729486149e-01, -1.325888410119879e-01, -1.043613300479962e-01, -1.043706001561843e-01, -1.045439020904952e-01, -1.045939255162215e-01, -1.043754131130134e-01, -1.040588308421928e-01, -1.045626165872707e-01, -1.042322799845333e-01, -1.041478014541355e-01, -1.049543032371193e-01, -1.041478014541355e-01, -1.049543032371193e-01, -7.195011191011522e-02, -7.228920938139145e-02, -7.424684008002340e-02, -7.418710286739423e-02, -7.247185654517392e-02, -6.798012857514930e-02, -7.324794092234647e-02, -6.912491754255960e-02, -6.934909737540396e-02, -7.591895653017058e-02, -6.934909737540394e-02, -7.591895653017056e-02, -3.228395656978233e-02, -3.176168455483792e-02, -4.430205144535684e-02, -4.391754264446263e-02, -3.212183322751700e-02, -2.937004969707066e-02, -1.037832594013706e-01, -1.038652854227562e-01, -3.662937377948385e-02, -3.316414770941820e-02, -3.662937377948385e-02, -3.316414770941820e-02, -2.646458811130598e-03, -2.206169119847065e-03, -3.054754187164760e-03, -2.904475772277888e-03, -2.709450637966272e-03, -2.031968140738344e-03, -2.462774277505002e-02, -2.437365167120110e-02, -4.600052992442525e-03, -1.668171993634611e-03, -4.600052992442525e-03, -1.668171993634609e-03, -7.248926227542775e-02, -7.199491623406466e-02, -7.234626009797844e-02, -7.184794134487869e-02, -7.239745534216106e-02, -7.189895973298126e-02, -7.243733892778567e-02, -7.194310681146589e-02, -7.241735705520354e-02, -7.192104267828599e-02, -7.241735705520354e-02, -7.192104267828599e-02, -7.175958712097849e-02, -7.134077035519609e-02, -6.801124522701882e-02, -6.749181334006582e-02, -6.916096796260594e-02, -6.861991746892281e-02, -7.019437834834663e-02, -6.975871795228455e-02, -6.965520824413970e-02, -6.919863203548292e-02, -6.965520824413970e-02, -6.919863203548292e-02, -7.553141247995081e-02, -7.531366299506966e-02, -4.926354473263361e-02, -4.876560122680072e-02, -5.349407978157051e-02, -5.256018620774559e-02, -5.967543907360522e-02, -5.909571073160327e-02, -5.613605038840439e-02, -5.617108013697505e-02, -5.613605038840441e-02, -5.617108013697505e-02, -6.612670970380026e-02, -6.532696102751571e-02, -1.771628921951271e-02, -1.751521027543368e-02, -2.207541552143124e-02, -2.088684758599456e-02, -5.931215161053653e-02, -5.776183554975668e-02, -2.952218519958299e-02, -2.691182073096220e-02, -2.952218519958300e-02, -2.691182073096220e-02, -6.664172869949513e-03, -6.222284135720126e-03, -8.954986303795333e-04, -9.018619543433705e-04, -2.730251456048310e-03, -1.063326101129764e-03, -2.756541018616757e-02, -2.681509355439959e-02, -4.340077660022416e-03, -1.519645662305292e-03, -4.340077660022378e-03, -1.519645662305304e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
