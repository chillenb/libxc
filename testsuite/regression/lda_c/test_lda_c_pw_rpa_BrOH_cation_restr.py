
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_rpa_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.883717752328911e-01, -1.883718609518913e-01, -1.883722684905685e-01, -1.883709926066436e-01, -1.883716573891364e-01, -1.883716573891364e-01, -1.333765546144375e-01, -1.333766185509246e-01, -1.333788221219094e-01, -1.333806156589576e-01, -1.333773453338939e-01, -1.333773453338939e-01, -8.674859793089634e-02, -8.671928207344813e-02, -8.600497254627844e-02, -8.622410942029596e-02, -8.617764267809264e-02, -8.617764267809264e-02, -5.387143204995514e-02, -5.419638594468235e-02, -9.086342769647404e-02, -4.810104449137263e-02, -5.048561654858700e-02, -5.048561654858700e-02, -9.406478109593282e-03, -9.707096246708125e-03, -2.573929603094661e-02, -6.669800875585698e-03, -7.706224041565162e-03, -7.706224041565162e-03, -1.454131396472429e-01, -1.454186478124783e-01, -1.454134140065466e-01, -1.454182763922025e-01, -1.454159206660355e-01, -1.454159206660355e-01, -1.165510552612206e-01, -1.167597339416821e-01, -1.163978050689094e-01, -1.165832194680420e-01, -1.167401252299586e-01, -1.167401252299586e-01, -8.321728433360187e-02, -8.539667987390705e-02, -8.119290485223900e-02, -8.220107129090405e-02, -8.363656703247292e-02, -8.363656703247292e-02, -4.102648368296801e-02, -5.390419080301410e-02, -3.960465294045241e-02, -1.159939770919176e-01, -4.404717505769293e-02, -4.404717505769293e-02, -5.648106485067299e-03, -6.574189723064728e-03, -5.533694065886259e-03, -3.285012923112659e-02, -6.238186479537754e-03, -6.238186479537754e-03, -8.334418576803665e-02, -8.319347623590868e-02, -8.324659635381562e-02, -8.329027786116655e-02, -8.326842139784746e-02, -8.326842139784746e-02, -8.262513811326082e-02, -7.867282346406877e-02, -7.985828294657223e-02, -8.098862780751621e-02, -8.041676636726809e-02, -8.041676636726809e-02, -8.664839438216065e-02, -5.907481978553402e-02, -6.328756118055313e-02, -6.994647925300371e-02, -6.656692054514257e-02, -6.656692054514257e-02, -7.656282746533997e-02, -2.515651872784746e-02, -2.949580420968239e-02, -6.905266385671130e-02, -3.686643321186911e-02, -3.686643321186911e-02, -1.159853190378027e-02, -2.758523034991452e-03, -4.522912408788537e-03, -3.579128392284799e-02, -5.935091001207484e-03, -5.935091001207488e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_rpa_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.986171543347998e-01, -1.986172403240151e-01, -1.986176491473823e-01, -1.986163692414253e-01, -1.986170361195613e-01, -1.986170361195613e-01, -1.432506150061811e-01, -1.432506797231071e-01, -1.432529101912041e-01, -1.432547256194007e-01, -1.432514153774505e-01, -1.432514153774505e-01, -9.560744111316086e-02, -9.557710076725610e-02, -9.483762684492326e-02, -9.506452504196169e-02, -9.501641562372012e-02, -9.501641562372012e-02, -6.106615727159775e-02, -6.141385696336313e-02, -9.985979928099495e-02, -5.486457068980444e-02, -5.743377693308619e-02, -5.743377693308619e-02, -1.133605919701867e-02, -1.169143078446682e-02, -3.021069850749810e-02, -8.085131460769668e-03, -9.319776023975674e-03, -9.319776023975674e-03, -1.554150391583008e-01, -1.554205978261935e-01, -1.554153160332779e-01, -1.554202230006906e-01, -1.554178456762265e-01, -1.554178456762265e-01, -1.261737108740804e-01, -1.263861419939789e-01, -1.260176935531298e-01, -1.262064546197602e-01, -1.263661814404299e-01, -1.263661814404299e-01, -9.194793488496515e-02, -9.420759632750859e-02, -8.984555118627800e-02, -9.089298862236456e-02, -9.238295363349973e-02, -9.238295363349973e-02, -4.718303438546908e-02, -6.110121614106159e-02, -4.562752890213478e-02, -1.256065274637244e-01, -5.047430184477921e-02, -5.047430184477921e-02, -6.863548562100857e-03, -7.971008669953174e-03, -6.726458744264025e-03, -3.817720995632870e-02, -7.569637613552608e-03, -7.569637613552608e-03, -9.207961403184174e-02, -9.192322898228295e-02, -9.197835163215153e-02, -9.202367813939839e-02, -9.200099877773953e-02, -9.200099877773953e-02, -9.133332177370662e-02, -8.722351293788848e-02, -8.845761885293975e-02, -8.963321294861046e-02, -8.903859605814111e-02, -8.903859605814111e-02, -9.550373310870190e-02, -6.661563372148706e-02, -7.108203337194897e-02, -7.809864600140938e-02, -7.454383175340432e-02, -7.454383175340432e-02, -8.502382450559913e-02, -2.955155493360613e-02, -3.443625405337392e-02, -7.715969009379900e-02, -4.261976955593837e-02, -4.261976955593837e-02, -1.391999869831677e-02, -3.380549082932398e-03, -5.512592798901744e-03, -4.143423227294915e-02, -7.207150219279299e-03, -7.207150219279302e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
