
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_karasiev_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.644269255099167e-01, -1.644270111757064e-01, -1.644274184634837e-01, -1.644261433565556e-01, -1.644268077139435e-01, -1.644268077139435e-01, -1.098118260914158e-01, -1.098118887395819e-01, -1.098140480899116e-01, -1.098158056757382e-01, -1.098125867915077e-01, -1.098125867915077e-01, -6.565990722698263e-02, -6.563306211179866e-02, -6.498966722711859e-02, -6.518899536402278e-02, -6.489826410805191e-02, -6.489826410805191e-02, -3.743112997811691e-02, -3.768290469977024e-02, -6.931634152240851e-02, -3.278129919308520e-02, -2.719547293737668e-02, -2.719547293737669e-02, -3.687993099015864e-03, -3.858653777584044e-03, -1.508236413516159e-02, -2.230782148490303e-03, -2.331101715083260e-03, -2.331101715083260e-03, -1.216611510645777e-01, -1.216665946565056e-01, -1.216614219813994e-01, -1.216662278697530e-01, -1.216638994141697e-01, -1.216638994141697e-01, -9.347095148380660e-02, -9.367147426606125e-02, -9.332347144695248e-02, -9.350157810923555e-02, -9.365098247444605e-02, -9.365098247444605e-02, -6.249925037531004e-02, -6.444676910208232e-02, -6.063156640255466e-02, -6.153717412731938e-02, -6.272652302832910e-02, -6.272652302832907e-02, -2.710627438889601e-02, -3.750407969694660e-02, -2.591689385727526e-02, -9.293592243539776e-02, -2.944131225765560e-02, -2.944131225765560e-02, -1.744749491262565e-03, -2.183924328458908e-03, -1.690861152595243e-03, -2.063730205925733e-02, -1.897444049127734e-03, -1.897444049127733e-03, -6.261184510534838e-02, -6.247759175465345e-02, -6.252489943973527e-02, -6.256382182437192e-02, -6.254434619687224e-02, -6.254434619687224e-02, -6.197215164231337e-02, -5.847886511946713e-02, -5.952209582878243e-02, -6.052075706890359e-02, -6.001521065679331e-02, -6.001521065679331e-02, -6.557052802826879e-02, -4.176208173173428e-02, -4.527190771534588e-02, -5.091394127608655e-02, -4.803927970156290e-02, -4.803927970156290e-02, -5.662980212112480e-02, -1.467153791201207e-02, -1.800185309702417e-02, -5.014191408313532e-02, -2.374547516778786e-02, -2.374547516778787e-02, -5.010785035120888e-03, -6.117202223908608e-04, -1.256421516605888e-03, -2.294845615407905e-02, -1.783927378301711e-03, -1.783927378301709e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_karasiev_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.746657368619946e-01, -1.746662649253840e-01, -1.746656416734534e-01, -1.746665321264944e-01, -1.746669880352375e-01, -1.746660035698776e-01, -1.746636538230295e-01, -1.746667774901927e-01, -1.746632693959500e-01, -1.746684959615139e-01, -1.746632693959500e-01, -1.746684959615139e-01, -1.194859661323234e-01, -1.194896517119310e-01, -1.194857686134570e-01, -1.194899771615767e-01, -1.194928578572000e-01, -1.194872967280863e-01, -1.194937670293193e-01, -1.194899759212476e-01, -1.195391391034319e-01, -1.194380864843962e-01, -1.195391391034319e-01, -1.194380864843962e-01, -7.394371173131400e-02, -7.332125088939230e-02, -7.398701668927306e-02, -7.322283388685059e-02, -7.238729197655216e-02, -7.346322024991253e-02, -7.330079952799078e-02, -7.296289597032958e-02, -6.820580914453012e-02, -7.840372774784715e-02, -6.820580914453012e-02, -7.840372774784715e-02, -4.504690222706722e-02, -4.176197072658652e-02, -4.558796255690729e-02, -4.182294623684985e-02, -8.038911256937141e-02, -7.487510679329618e-02, -3.876633152977702e-02, -3.774604474541166e-02, -2.560500906234319e-02, -6.971922377216094e-02, -2.560500906234321e-02, -6.971922377216093e-02, -5.025648359436067e-03, -4.601559917924834e-03, -5.288658409207048e-03, -4.784451397461332e-03, -1.943432820957063e-02, -1.770197978339733e-02, -2.894208060227345e-03, -2.963618192430383e-03, -2.632420240540236e-03, -5.275324286259468e-03, -2.632420240540236e-03, -5.275324286259468e-03, -1.315104308205195e-01, -1.315824127088344e-01, -1.315150043182701e-01, -1.315888886239182e-01, -1.315100363185371e-01, -1.315833579904351e-01, -1.315154628595249e-01, -1.315876844986069e-01, -1.315125597600567e-01, -1.315858626272525e-01, -1.315125597600567e-01, -1.315858626272525e-01, -1.027105834008383e-01, -1.027221205755714e-01, -1.028922521811659e-01, -1.029545330786901e-01, -1.027615040164137e-01, -1.023676106643860e-01, -1.029540829419075e-01, -1.025429359818227e-01, -1.024033698157457e-01, -1.034074562571023e-01, -1.024033698157457e-01, -1.034074562571023e-01, -7.007736784745139e-02, -7.047318054319993e-02, -7.237877861181063e-02, -7.230876436621489e-02, -7.103453846961991e-02, -6.581114784571343e-02, -7.176623490468434e-02, -6.696270132791377e-02, -6.696251499332950e-02, -7.463702700524640e-02, -6.696251499332947e-02, -7.463702700524635e-02, -3.230627481599894e-02, -3.173251253765666e-02, -4.360981869502974e-02, -4.318075908319421e-02, -3.232200236032279e-02, -2.930544286766232e-02, -1.021128402973259e-01, -1.022148214881310e-01, -3.665478091057416e-02, -3.283253790684817e-02, -3.665478091057416e-02, -3.283253790684817e-02, -2.362941980908000e-03, -2.239457760887614e-03, -2.898478413247861e-03, -2.837775746899676e-03, -2.324248039921175e-03, -2.145954192738518e-03, -2.495575047217414e-02, -2.468112947693673e-02, -3.319783176695871e-03, -2.173554310412731e-03, -3.319783176695871e-03, -2.173554310412730e-03, -7.068444774132460e-02, -7.010728418982587e-02, -7.054394060588304e-02, -6.996230210098228e-02, -7.059438485991125e-02, -7.001248237515893e-02, -7.063328366926612e-02, -7.005631108923739e-02, -7.061378990840998e-02, -7.003441006219085e-02, -7.061378990840998e-02, -7.003441006219085e-02, -6.995912709481637e-02, -6.947079924118039e-02, -6.629306719278348e-02, -6.569176868108381e-02, -6.741957934847752e-02, -6.679191910514894e-02, -6.842286085484278e-02, -6.791642165287079e-02, -6.789606864174329e-02, -6.736586851046709e-02, -6.789606864174329e-02, -6.736586851046709e-02, -7.366414391099980e-02, -7.340832640038773e-02, -4.829545036553184e-02, -4.773627034049906e-02, -5.234370905724333e-02, -5.128901253464761e-02, -5.822001187939738e-02, -5.755874559559013e-02, -5.477361572954822e-02, -5.481336495915540e-02, -5.477361572954823e-02, -5.481336495915540e-02, -6.448056488580341e-02, -6.355821165010062e-02, -1.813283970147979e-02, -1.792289771815453e-02, -2.250513087377666e-02, -2.123512301053846e-02, -5.795877042457095e-02, -5.619289045048740e-02, -2.982628495103852e-02, -2.697839715989715e-02, -2.982628495103853e-02, -2.697839715989715e-02, -6.641915663439227e-03, -6.298594505137568e-03, -8.132770372695604e-04, -8.107581389710238e-04, -1.737369423658434e-03, -1.595962124671483e-03, -2.782211348028204e-02, -2.700529758016528e-02, -3.018343060376697e-03, -2.059857388421024e-03, -3.018343060376691e-03, -2.059857388421021e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
