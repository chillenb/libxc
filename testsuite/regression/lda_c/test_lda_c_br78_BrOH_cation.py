
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_br78_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_br78", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.426205492632581e-02, -9.426207471801609e-02, -9.426216881697702e-02, -9.426187420540856e-02, -9.426202768227035e-02, -9.426202768227035e-02, -6.795371524309675e-02, -6.795376413080992e-02, -6.795544929241452e-02, -6.795682090715191e-02, -6.795429858523203e-02, -6.795429858523203e-02, -2.837189425766948e-02, -2.834880555620208e-02, -2.779971775273029e-02, -2.796986798466880e-02, -2.766711350472527e-02, -2.766711350472527e-02, -9.202207661245812e-03, -9.319808141955360e-03, -3.154502405515408e-02, -7.162308018560928e-03, -3.697062047127581e-03, -3.697062047127581e-03, -3.492687907637880e-04, -3.666898049676918e-04, -1.998283346872761e-03, -2.035604357465728e-04, -1.344518871037954e-04, -1.344518871037954e-04, -7.641352179900640e-02, -7.641703329743058e-02, -7.641369636882583e-02, -7.641679695175217e-02, -7.641529466401323e-02, -7.641529466401323e-02, -5.397420063453247e-02, -5.415769385319188e-02, -5.383898260423381e-02, -5.400210071617086e-02, -5.413811993656552e-02, -5.413811993656552e-02, -2.571499696299811e-02, -2.734039154811964e-02, -2.418052273136931e-02, -2.491500450674448e-02, -2.587172728041163e-02, -2.587172728041163e-02, -5.083003381877419e-03, -9.244626262753242e-03, -4.692023534870980e-03, -5.348358589917519e-02, -5.871087768086126e-03, -5.871087768086126e-03, -1.567089981266470e-04, -1.990326332214075e-04, -1.512151088756958e-04, -3.223876481305387e-03, -1.474729668218956e-04, -1.474729668218955e-04, -2.580778722256711e-02, -2.569705036662650e-02, -2.573604814757786e-02, -2.576815476298002e-02, -2.575208754991769e-02, -2.575208754991769e-02, -2.528195992070935e-02, -2.249212667469986e-02, -2.331023173524427e-02, -2.410563106131807e-02, -2.370154073004945e-02, -2.370154073004945e-02, -2.829557296852641e-02, -1.140724159947393e-02, -1.339619749719300e-02, -1.698107690818659e-02, -1.509628836120588e-02, -1.509628836120588e-02, -2.107488763471508e-02, -1.926851259541813e-03, -2.602949255439517e-03, -1.646157104843803e-02, -4.043209935442512e-03, -4.043209935442513e-03, -4.949091904859452e-04, -5.330538694364389e-05, -1.108767954329429e-04, -3.829131992346699e-03, -1.422892955680318e-04, -1.422892955680317e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_br78_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_br78", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.662733030904838e-02, -9.662805860265089e-02, -9.662709459822130e-02, -9.662832269139121e-02, -9.662845497626557e-02, -9.662709722548388e-02, -9.662541087097033e-02, -9.662971897795247e-02, -9.662407079868800e-02, -9.663127916806688e-02, -9.662407079868800e-02, -9.663127916806688e-02, -7.550226894591057e-02, -7.550783197389584e-02, -7.550191773261666e-02, -7.550827013207713e-02, -7.551078895243304e-02, -7.550239492540625e-02, -7.551067228525500e-02, -7.550494992650676e-02, -7.558187171064434e-02, -7.542934227185903e-02, -7.558187171064434e-02, -7.542934227185903e-02, -3.553558963576865e-02, -3.486213881386355e-02, -3.558656536135755e-02, -3.476009141493276e-02, -3.396830183698146e-02, -3.512142083930521e-02, -3.491713724167621e-02, -3.455397192338421e-02, -2.943001234627953e-02, -4.036439044981599e-02, -2.943001234627953e-02, -4.036439044981599e-02, -1.310797064706301e-02, -1.099636224662905e-02, -1.343745863620125e-02, -1.100317752821976e-02, -4.208756828927565e-02, -3.581922778298799e-02, -9.682567626563145e-03, -9.093396560358761e-03, -1.706764600301608e-03, -2.507963599976661e-02, -1.706764600301607e-03, -2.507963599976661e-02, -5.350955032688263e-04, -4.071111983446961e-04, -5.725752747217266e-04, -4.200652142027141e-04, -3.006193034892282e-03, -2.349814266276723e-03, -2.612712007897171e-04, -2.818028490984690e-04, -6.948177373002649e-05, -7.743066829270591e-04, -6.948177373002654e-05, -7.743066829270591e-04, -8.273617843721148e-02, -8.284601547381919e-02, -8.273765504479631e-02, -8.285039492565528e-02, -8.273530241997029e-02, -8.284718382738521e-02, -8.273872575302368e-02, -8.284892857853754e-02, -8.273664907978169e-02, -8.284850177022404e-02, -8.273664907978169e-02, -8.284850177022404e-02, -6.243120816366502e-02, -6.244757291413267e-02, -6.257496083692907e-02, -6.266340406118144e-02, -6.258654832017328e-02, -6.202831185476991e-02, -6.275910150763199e-02, -6.217581257660237e-02, -6.189142272779727e-02, -6.331713062754586e-02, -6.189142272779727e-02, -6.331713062754586e-02, -3.192060374794996e-02, -3.232963221088361e-02, -3.404679192670323e-02, -3.397233684709379e-02, -3.308926784032652e-02, -2.784092918679406e-02, -3.375220124042516e-02, -2.885805670016154e-02, -2.861552673506172e-02, -3.658212105852833e-02, -2.861552673506173e-02, -3.658212105852832e-02, -6.839641625780029e-03, -6.550147414188094e-03, -1.218578805741732e-02, -1.190965065090322e-02, -6.981276619349608e-03, -5.501824778450319e-03, -6.188557546263400e-02, -6.202977846656779e-02, -8.822893887898716e-03, -6.782223734416233e-03, -8.822893887898716e-03, -6.782223734416233e-03, -2.280470592390629e-04, -1.917744364999823e-04, -2.744218077921143e-04, -2.564769473786167e-04, -2.299380488826470e-04, -1.776401075305389e-04, -4.324347072017127e-03, -4.205768703350589e-03, -4.310380325836723e-04, -1.060064855501969e-04, -4.310380325836724e-04, -1.060064855501969e-04, -3.253280454041733e-02, -3.193535915884406e-02, -3.240554224983759e-02, -3.180467704054581e-02, -3.245133178738149e-02, -3.184976631858406e-02, -3.248633069248179e-02, -3.188951309108928e-02, -3.246878600684026e-02, -3.186965349941653e-02, -3.246878600684026e-02, -3.186965349941653e-02, -3.187067183773583e-02, -3.137004295573537e-02, -2.862875080978601e-02, -2.804533929285243e-02, -2.961515079492672e-02, -2.899580461231532e-02, -3.049583596805289e-02, -2.998814192296939e-02, -3.003014764250435e-02, -2.950284975105897e-02, -3.003014764250435e-02, -2.950284975105897e-02, -3.524787412444268e-02, -3.497144900079872e-02, -1.498341111879603e-02, -1.458823957768892e-02, -1.768176243539887e-02, -1.687951990917995e-02, -2.198168173087435e-02, -2.141985319334526e-02, -1.936718732371433e-02, -1.939914572403183e-02, -1.936718732371434e-02, -1.939914572403183e-02, -2.708570008801812e-02, -2.621787849694519e-02, -2.596816284322242e-03, -2.517976160205905e-03, -3.718637662641950e-03, -3.203560502373129e-03, -2.181817378326070e-02, -2.033941745795681e-02, -6.053729420891130e-03, -4.728422188076631e-03, -6.053729420891130e-03, -4.728422188076633e-03, -7.148786943395501e-04, -6.089271462366707e-04, -7.143089290344893e-05, -7.070072263370722e-05, -1.703172223212304e-04, -1.290755914200161e-04, -5.248483416440963e-03, -4.875657079508398e-03, -3.812749327485807e-04, -1.079820295116009e-04, -3.812749327485804e-04, -1.079820295116009e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
