
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_rpa_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_rpa", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.883673381375188e-01, -1.883674237566525e-01, -1.883678308226069e-01, -1.883665564101180e-01, -1.883672204056784e-01, -1.883672204056784e-01, -1.335353909106672e-01, -1.335354544963786e-01, -1.335376461584750e-01, -1.335394300411380e-01, -1.335361631150776e-01, -1.335361631150776e-01, -8.725389698543029e-02, -8.722435174491645e-02, -8.651458865213271e-02, -8.673444501236584e-02, -8.643640618334300e-02, -8.643640618334300e-02, -5.449897276705849e-02, -5.481025121988867e-02, -9.126576665624214e-02, -4.874934209875148e-02, -4.374980044943477e-02, -4.374980044943477e-02, -8.664105899694036e-03, -8.980149922677424e-03, -2.590638205870075e-02, -5.805435920052810e-03, -6.677965021269014e-03, -6.677965021269014e-03, -1.455145112811081e-01, -1.455199961408907e-01, -1.455147842527941e-01, -1.455196265730842e-01, -1.455172804678845e-01, -1.455172804678845e-01, -1.168155538216387e-01, -1.170227387759210e-01, -1.166631412246351e-01, -1.168472084884843e-01, -1.170016077458638e-01, -1.170016077458638e-01, -8.375225942006767e-02, -8.591415746637239e-02, -8.167311324612980e-02, -8.268517004098420e-02, -8.402008630102969e-02, -8.402008630102967e-02, -4.161162824958596e-02, -5.457741932548996e-02, -4.011485707792319e-02, -1.162624500147295e-01, -4.458903517552366e-02, -4.458903517552366e-02, -4.760943388268597e-03, -5.706977605075846e-03, -4.644841130298690e-03, -3.328104257287732e-02, -5.321107826112063e-03, -5.321107826112064e-03, -8.387768331224339e-02, -8.372818287175611e-02, -8.378087163856678e-02, -8.382421339174406e-02, -8.380252714131403e-02, -8.380252714131403e-02, -8.316469138320154e-02, -7.924301839838972e-02, -8.041930453634193e-02, -8.154118072025428e-02, -8.097374361624357e-02, -8.097374361624357e-02, -8.715530772430505e-02, -5.974680902663347e-02, -6.394578980497129e-02, -7.057563198898986e-02, -6.721538630206256e-02, -6.721538630206256e-02, -7.714730878970211e-02, -2.533122538642547e-02, -2.981637042500762e-02, -6.967831145208286e-02, -3.733166516752395e-02, -3.733166516752395e-02, -1.099506616215656e-02, -1.971517949237831e-03, -3.638402062443521e-03, -3.628578435812391e-02, -5.024897723501704e-03, -5.024897723501705e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_rpa_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_rpa", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.986005729648470e-01, -1.986011011993644e-01, -1.986004776387423e-01, -1.986013683803459e-01, -1.986018239294471e-01, -1.986008391450788e-01, -1.985984902251318e-01, -1.986016149046945e-01, -1.985981048458884e-01, -1.986033331052402e-01, -1.985981048458884e-01, -1.986033331052402e-01, -1.433543152760238e-01, -1.433580244913403e-01, -1.433541165544596e-01, -1.433583520920493e-01, -1.433612534637606e-01, -1.433556566732576e-01, -1.433621702576074e-01, -1.433583548398332e-01, -1.434078300554481e-01, -1.433061293979230e-01, -1.434078300554481e-01, -1.433061293979230e-01, -9.635535900180722e-02, -9.572542202991116e-02, -9.639740946191519e-02, -9.562405120046377e-02, -9.473463442154705e-02, -9.582337738866273e-02, -9.567265906845013e-02, -9.533072052891169e-02, -9.051367517075291e-02, -1.008333036101890e-01, -9.051367517075291e-02, -1.008333036101890e-01, -6.341317215827814e-02, -6.016394051496635e-02, -6.400972560412489e-02, -6.028384116176264e-02, -1.031063366296233e-01, -9.752422798683863e-02, -5.606165373860018e-02, -5.506217348587541e-02, -4.352137321450776e-02, -8.692115863595752e-02, -4.352137321450778e-02, -8.692115863595749e-02, -1.083933348208848e-02, -1.058819096531150e-02, -1.124771536260723e-02, -1.094067913954917e-02, -3.140162009258172e-02, -2.982658622424557e-02, -7.251653274181350e-03, -7.277879421898367e-03, -8.045481598909734e-03, -9.299936590562488e-03, -8.045481598909734e-03, -9.299936590562488e-03, -1.554385828445663e-01, -1.555108829051308e-01, -1.554431686292655e-01, -1.555173794550690e-01, -1.554381862044116e-01, -1.555118319676111e-01, -1.554436297311825e-01, -1.555161705465521e-01, -1.554407171922467e-01, -1.555143440400358e-01, -1.554407171922467e-01, -1.555143440400358e-01, -1.263636959767284e-01, -1.263753436674488e-01, -1.265491980788196e-01, -1.266120731478352e-01, -1.264135459564549e-01, -1.260158682105750e-01, -1.266098526040282e-01, -1.261947696827387e-01, -1.260554573674753e-01, -1.270691266591464e-01, -1.260554573674753e-01, -1.270691266591464e-01, -9.221260947377392e-02, -9.261294081792051e-02, -9.468751987943963e-02, -9.461667815087271e-02, -9.303057878087281e-02, -8.775009432815721e-02, -9.384690737698846e-02, -8.898963982122937e-02, -8.909095616317858e-02, -9.685374774165027e-02, -8.909095616317857e-02, -9.685374774165022e-02, -4.813020611807411e-02, -4.757672604662436e-02, -6.199832983040862e-02, -6.157391250240877e-02, -4.777943519404136e-02, -4.488017803000006e-02, -1.257544189163178e-01, -1.258573875555820e-01, -5.307968129606689e-02, -4.936623903700232e-02, -5.307968129606689e-02, -4.936623903700232e-02, -6.007229656135845e-03, -5.975668404425532e-03, -7.156233419834875e-03, -7.133915168945001e-03, -5.871143004302738e-03, -5.828384220282446e-03, -3.887453178709187e-02, -3.861613782166197e-02, -6.924375768025137e-03, -6.546166585436128e-03, -6.924375768025137e-03, -6.546166585436129e-03, -9.283555861399406e-02, -9.225179064250455e-02, -9.268282562316421e-02, -9.209455000654811e-02, -9.273759689009378e-02, -9.214904771296259e-02, -9.278001843414281e-02, -9.219645014935353e-02, -9.275876236858034e-02, -9.217276196989309e-02, -9.275876236858034e-02, -9.217276196989309e-02, -9.205070982209079e-02, -9.155687089152002e-02, -8.803426529025926e-02, -8.742685672235237e-02, -8.927102256789121e-02, -8.863674248592401e-02, -9.037475146297957e-02, -8.986280470221426e-02, -8.979741306424094e-02, -8.926153252554411e-02, -8.979741306424094e-02, -8.926153252554411e-02, -9.606636427177059e-02, -9.580747750551934e-02, -6.755615449435205e-02, -6.699921382624789e-02, -7.224746554991755e-02, -7.119225963873603e-02, -7.901554677106126e-02, -7.835041424495505e-02, -7.513429115027233e-02, -7.517417448686416e-02, -7.513429115027234e-02, -7.517417448686416e-02, -8.601673973856258e-02, -8.508574834966497e-02, -3.000619660659280e-02, -2.981604126664154e-02, -3.552982228230365e-02, -3.435143158620046e-02, -7.864625141556278e-02, -7.687111772186410e-02, -4.464994893965545e-02, -4.193397751986821e-02, -4.464994893965545e-02, -4.193397751986820e-02, -1.359212306864932e-02, -1.335372689821828e-02, -2.529865287710360e-03, -2.530764566603843e-03, -4.615177590203629e-03, -4.604255715727107e-03, -4.244150157686431e-02, -4.166511520340325e-02, -6.492645382132876e-03, -6.211666450591106e-03, -6.492645382132881e-03, -6.211666450591107e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
