
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ob_pw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.642445176302599e-01, -1.642445920405691e-01, -1.642449787988177e-01, -1.642437592001573e-01, -1.642445564136794e-01, -1.642445564136794e-01, -1.097376037810336e-01, -1.097376646924001e-01, -1.097405335425428e-01, -1.097417417937365e-01, -1.097377587457930e-01, -1.097377587457930e-01, -6.511695072967920e-02, -6.509202178085469e-02, -6.443844089144465e-02, -6.462800305234934e-02, -6.510786092434884e-02, -6.510786092434884e-02, -3.773840429044139e-02, -3.797272369536969e-02, -6.958038046043097e-02, -3.233867253547632e-02, -3.780891487959673e-02, -3.780891487959673e-02, -5.838408876937918e-03, -6.099987271689671e-03, -1.767927850484892e-02, -2.750144581469438e-03, -6.040159216805338e-03, -6.040159216805338e-03, -1.215631292066248e-01, -1.215683939079606e-01, -1.215636847180223e-01, -1.215677780793390e-01, -1.215658051896828e-01, -1.215658051896828e-01, -9.333703501454285e-02, -9.353265422281729e-02, -9.325759893856304e-02, -9.341077813790268e-02, -9.357168487911212e-02, -9.357168487911212e-02, -6.179501049097195e-02, -6.376846430593307e-02, -6.055966151895274e-02, -6.155086684333207e-02, -6.269060566346794e-02, -6.269060566346794e-02, -2.768636301968556e-02, -3.786474981965646e-02, -2.750246739318492e-02, -9.279828555237664e-02, -2.981615371729722e-02, -2.981615371729722e-02, -2.645204178905640e-03, -3.054300860135245e-03, -2.234311809650591e-03, -2.145428018294171e-02, -2.763603612104966e-03, -2.763603612104966e-03, -6.253990319132878e-02, -6.241251285672433e-02, -6.245824354599546e-02, -6.249347560847272e-02, -6.247584724031949e-02, -6.247584724031949e-02, -6.176557812085796e-02, -5.844776898913354e-02, -5.945510779188695e-02, -6.035901495179035e-02, -5.990194605622527e-02, -5.990194605622527e-02, -6.491160721382032e-02, -4.207349157780087e-02, -4.541997523655369e-02, -5.047565017035684e-02, -4.790866416040371e-02, -4.790866416040371e-02, -5.609801419894571e-02, -1.686891219358053e-02, -2.020110560388199e-02, -4.927954529989020e-02, -2.481336936407894e-02, -2.481336936407894e-02, -6.768094975816812e-03, -7.330884269414637e-04, -1.492369352461549e-03, -2.419457847425558e-02, -2.315572909659688e-03, -2.315572909659634e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ob_pw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.744629439271263e-01, -1.744630186544819e-01, -1.744634070606139e-01, -1.744621822654767e-01, -1.744629828757937e-01, -1.744629828757937e-01, -1.194120827835190e-01, -1.194121448564030e-01, -1.194150684104741e-01, -1.194162996996584e-01, -1.194122407032941e-01, -1.194122407032941e-01, -7.320866050076766e-02, -7.318227652858515e-02, -7.249024213682324e-02, -7.269101810973287e-02, -7.319904025138126e-02, -7.319904025138126e-02, -4.363116828289706e-02, -4.388993405190997e-02, -7.791923877218504e-02, -3.764229704929541e-02, -4.370904546886972e-02, -4.370904546886972e-02, -7.689374513609269e-03, -8.010416261841987e-03, -2.124916173246073e-02, -3.740560013795807e-03, -7.937153054270164e-03, -7.937153054270164e-03, -1.314312060157436e-01, -1.314365440203165e-01, -1.314317692623110e-01, -1.314359196177208e-01, -1.314339192592327e-01, -1.314339192592327e-01, -1.026214410029581e-01, -1.028227495079320e-01, -1.025396865442437e-01, -1.026973321649790e-01, -1.028629119258347e-01, -1.028629119258347e-01, -6.968513933652309e-02, -7.178023000473434e-02, -6.837075890605261e-02, -6.942555539698973e-02, -7.063663003953857e-02, -7.063663003953857e-02, -3.244908045762292e-02, -4.377070749149135e-02, -3.224335140829403e-02, -1.020668755830457e-01, -3.482954595699019e-02, -3.482954595699019e-02, -3.600893098376209e-03, -4.143316405820476e-03, -3.050625727509968e-03, -2.547071168511437e-02, -3.758446781027696e-03, -3.758446781027696e-03, -7.047660333289610e-02, -7.034130555524010e-02, -7.038987756465764e-02, -7.042729658828045e-02, -7.040857419807750e-02, -7.040857419807750e-02, -6.965385021972202e-02, -6.611843536885806e-02, -6.719360711260583e-02, -6.815706152750840e-02, -6.767003681003816e-02, -6.767003681003816e-02, -7.299130624758886e-02, -4.840240498452003e-02, -5.206189295615909e-02, -5.755163079238861e-02, -5.477000849675734e-02, -5.477000849675735e-02, -6.360426900970124e-02, -2.034397793679596e-02, -2.406827517291734e-02, -5.625697378851140e-02, -2.923275883594258e-02, -2.923275883594258e-02, -8.822175637597029e-03, -1.002277142783488e-03, -2.044347655919767e-03, -2.853964753962399e-02, -3.159872706712127e-03, -3.159872706712083e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
