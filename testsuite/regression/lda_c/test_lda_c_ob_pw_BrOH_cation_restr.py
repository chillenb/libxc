
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ob_pw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.642453044605605e-01, -1.642453899540859e-01, -1.642457964207858e-01, -1.642445238929668e-01, -1.642451869267829e-01, -1.642451869267829e-01, -1.097389435886770e-01, -1.097390062330021e-01, -1.097411652713252e-01, -1.097429225646574e-01, -1.097397183278195e-01, -1.097397183278195e-01, -6.526877066987037e-02, -6.524196519199504e-02, -6.458946341817870e-02, -6.478950758402409e-02, -6.474707959957228e-02, -6.474707959957228e-02, -3.683492447406930e-02, -3.709698837081243e-02, -6.905103705592329e-02, -3.225197427395460e-02, -3.412965972429376e-02, -3.412965972429376e-02, -3.442797172610837e-03, -3.633163356447398e-03, -1.547259253719330e-02, -1.898657341654151e-03, -2.439693051401026e-03, -2.439693051401026e-03, -1.215760427011000e-01, -1.215814772746958e-01, -1.215763133944998e-01, -1.215811108163200e-01, -1.215787865624162e-01, -1.215787865624162e-01, -9.336819756506562e-02, -9.356958480376597e-02, -9.322033296348917e-02, -9.339923476739934e-02, -9.355065918286812e-02, -9.355065918286812e-02, -6.205506571472156e-02, -6.403478421295410e-02, -6.022717564332907e-02, -6.113613090095626e-02, -6.243499532833867e-02, -6.243499532833867e-02, -2.680956478554065e-02, -3.686132402489748e-02, -2.573696398820621e-02, -9.283082263194710e-02, -2.911082003037084e-02, -2.911082003037084e-02, -1.424606531490513e-03, -1.851722362342780e-03, -1.375383243381236e-03, -2.071365202955809e-02, -1.690936570936673e-03, -1.690936570936673e-03, -6.217000853419106e-02, -6.203350582974533e-02, -6.208161180099537e-02, -6.212117557253426e-02, -6.210137884063399e-02, -6.210137884063399e-02, -6.151927422769003e-02, -5.796725280082486e-02, -5.902813229910463e-02, -6.004333430881303e-02, -5.952928631381531e-02, -5.952928631381531e-02, -6.517715628081022e-02, -4.108188361080352e-02, -4.459761866526954e-02, -5.028770676428463e-02, -4.738020190543916e-02, -4.738020190543916e-02, -5.608897769646353e-02, -1.504059558192316e-02, -1.824393309733199e-02, -4.951491514730005e-02, -2.368805251888890e-02, -2.368805251888891e-02, -4.902184905789290e-03, -4.322963671932771e-04, -9.755423247048146e-04, -2.288878487427623e-02, -1.551547932686848e-03, -1.551547932686849e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ob_pw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.744637341099086e-01, -1.744638199676953e-01, -1.744642281662117e-01, -1.744629502165172e-01, -1.744636160753545e-01, -1.744636160753545e-01, -1.194134481394934e-01, -1.194135119783395e-01, -1.194157121846592e-01, -1.194175029838901e-01, -1.194142376514592e-01, -1.194142376514592e-01, -7.336932326726228e-02, -7.334095878936422e-02, -7.265020265320339e-02, -7.286203733135459e-02, -7.281711329189271e-02, -7.281711329189271e-02, -4.263251989294436e-02, -4.292233622188533e-02, -7.736193781021851e-02, -3.754576472148496e-02, -3.963393462123847e-02, -3.963393462123847e-02, -4.653265245997656e-03, -4.901296962298596e-03, -1.878424634802278e-02, -2.597270539884086e-03, -3.326341616058799e-03, -3.326341616058799e-03, -1.314442992932006e-01, -1.314498095088374e-01, -1.314445737545541e-01, -1.314494379501954e-01, -1.314470813467996e-01, -1.314470813467996e-01, -1.026535117689886e-01, -1.028607509837948e-01, -1.025013313260533e-01, -1.026854528176960e-01, -1.028412766928354e-01, -1.028412766928354e-01, -6.996154515664510e-02, -7.206253965408704e-02, -6.801661395430482e-02, -6.898438927082930e-02, -7.036518527651844e-02, -7.036518527651844e-02, -3.146796694760284e-02, -4.266172057673508e-02, -3.026713523530401e-02, -1.021003740094088e-01, -3.404168680022692e-02, -3.404168680022692e-02, -1.951735892544220e-03, -2.533618154914955e-03, -1.884399712066183e-03, -2.464175537738796e-02, -2.315110113258915e-03, -2.315110113258915e-03, -7.008368340745873e-02, -6.993863347791075e-02, -6.998975473857189e-02, -7.003179584721425e-02, -7.001075980201185e-02, -7.001075980201185e-02, -6.939195838225987e-02, -6.560500752252542e-02, -6.673807055689240e-02, -6.782072521078952e-02, -6.727271909060147e-02, -6.727271909060147e-02, -7.327237653765409e-02, -4.731407068834071e-02, -5.116453697264176e-02, -5.734836906015186e-02, -5.419589412097193e-02, -5.419589412097193e-02, -6.359458320147567e-02, -1.830144856607443e-02, -2.188003848461722e-02, -5.651193679931143e-02, -2.797226904423470e-02, -2.797226904423471e-02, -6.524228702115491e-03, -5.886889273341529e-04, -1.335812267891177e-03, -2.707702483934508e-02, -2.125141930110934e-03, -2.125141930110933e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
