
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646005790296149e-01, -1.646006638474363e-01, -1.646010671031211e-01, -1.645998046219206e-01, -1.646004624063303e-01, -1.646004624063303e-01, -1.107863943026392e-01, -1.107864558450873e-01, -1.107885770461410e-01, -1.107903035725987e-01, -1.107871445161223e-01, -1.107871445161223e-01, -6.701355235151245e-02, -6.698647944450020e-02, -6.633572897528792e-02, -6.653706863318944e-02, -6.628263708761103e-02, -6.628263708761103e-02, -3.784110578630409e-02, -3.810779480205932e-02, -7.071273239982279e-02, -3.294250063226869e-02, -2.771146245400059e-02, -2.771146245400060e-02, -3.773696845860374e-03, -3.937471365676720e-03, -1.472968492621788e-02, -2.355986633214406e-03, -2.448489685664388e-03, -2.448489685664388e-03, -1.224269046925077e-01, -1.224322542185396e-01, -1.224271709779921e-01, -1.224318937075755e-01, -1.224296055643291e-01, -1.224296055643291e-01, -9.471409642685037e-02, -9.491176300225009e-02, -9.456875556010881e-02, -9.474434020776697e-02, -9.489187590615636e-02, -9.489187590615636e-02, -6.380970792448881e-02, -6.578551439024366e-02, -6.192019435873255e-02, -6.284059699488720e-02, -6.406369885793474e-02, -6.406369885793471e-02, -2.699237928835695e-02, -3.791214695510609e-02, -2.575802300064306e-02, -9.418661256803817e-02, -2.944236483006831e-02, -2.944236483006831e-02, -1.871459781431553e-03, -2.309612369117072e-03, -1.817197410544941e-03, -2.031082361049520e-02, -2.023384896426185e-03, -2.023384896426185e-03, -6.392417116241211e-02, -6.378777283780364e-02, -6.383584043103611e-02, -6.387538303830065e-02, -6.385559733669920e-02, -6.385559733669920e-02, -6.327395525502096e-02, -5.971182586470490e-02, -6.077773751535289e-02, -6.179635975459723e-02, -6.128089437739841e-02, -6.128089437739841e-02, -6.692303746574900e-02, -4.238594314007448e-02, -4.605989285275842e-02, -5.192738282613539e-02, -4.894374999141701e-02, -4.894374999141701e-02, -5.781831165999067e-02, -1.432338162119310e-02, -1.764153950717001e-02, -5.112871755937207e-02, -2.350610507745358e-02, -2.350610507745357e-02, -5.037446697275326e-03, -6.963063401435530e-04, -1.374982128146842e-03, -2.268014654853516e-02, -1.910123267559271e-03, -1.910123267559273e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747380954425075e-01, -1.747384793443804e-01, -1.747380490257660e-01, -1.747386963847264e-01, -1.747391361593681e-01, -1.747384204537267e-01, -1.747363730408087e-01, -1.747386439470037e-01, -1.747362702711928e-01, -1.747400699826240e-01, -1.747362702711928e-01, -1.747400699826240e-01, -1.202899890300794e-01, -1.202928404834208e-01, -1.202898495310942e-01, -1.202931055935537e-01, -1.202957932844694e-01, -1.202914907742028e-01, -1.202968702530357e-01, -1.202939371731831e-01, -1.203312926231353e-01, -1.202531104907580e-01, -1.203312926231353e-01, -1.202531104907580e-01, -7.534050994815972e-02, -7.481082060803958e-02, -7.537321817970243e-02, -7.472288120017991e-02, -7.390910419694087e-02, -7.482639275216019e-02, -7.471878432862761e-02, -7.443086204193998e-02, -7.037484145747976e-02, -7.906585633568763e-02, -7.037484145747976e-02, -7.906585633568763e-02, -4.564069237883684e-02, -4.259108026658379e-02, -4.617681264350187e-02, -4.268438350845832e-02, -8.138162538073054e-02, -7.673697975875793e-02, -3.918027223971211e-02, -3.821973363853019e-02, -2.640799183939289e-02, -7.149948610593343e-02, -2.640799183939291e-02, -7.149948610593342e-02, -5.065681597743987e-03, -4.646401727089875e-03, -5.316900449556679e-03, -4.819083980390052e-03, -1.901497126906127e-02, -1.733575472586476e-02, -3.011597561302383e-03, -3.081336562406501e-03, -2.735674330941882e-03, -5.360986143176829e-03, -2.735674330941882e-03, -5.360986143176829e-03, -1.321138478228502e-01, -1.321685755406442e-01, -1.321185590927882e-01, -1.321747327998881e-01, -1.321136093530094e-01, -1.321693556856333e-01, -1.321188245007514e-01, -1.321737341217940e-01, -1.321160895094296e-01, -1.321718213572107e-01, -1.321160895094296e-01, -1.321718213572107e-01, -1.038235400501867e-01, -1.038327295626609e-01, -1.040066693453175e-01, -1.040562572235207e-01, -1.038359345297253e-01, -1.035221016279285e-01, -1.040234061702199e-01, -1.036959422205495e-01, -1.036138156105147e-01, -1.044132962355938e-01, -1.036138156105147e-01, -1.044132962355938e-01, -7.154061331954154e-02, -7.188047065911980e-02, -7.381559610489626e-02, -7.375581313992444e-02, -7.209409153004563e-02, -6.758557269273006e-02, -7.285642445118136e-02, -6.872112794039659e-02, -6.893015298458822e-02, -7.551278666189576e-02, -6.893015298458821e-02, -7.551278666189572e-02, -3.239201517700676e-02, -3.184395269428899e-02, -4.430929409990619e-02, -4.391100527511231e-02, -3.228827092182206e-02, -2.939980425977918e-02, -1.032448229394969e-01, -1.033261387748736e-01, -3.680163125743124e-02, -3.317146161080753e-02, -3.680163125743124e-02, -3.317146161080753e-02, -2.493594705791493e-03, -2.368514653818338e-03, -3.017775733456062e-03, -2.956742443002779e-03, -2.456095260968833e-03, -2.275318557245627e-03, -2.470725242631990e-02, -2.444201776573584e-02, -3.448524468309038e-03, -2.295778329618808e-03, -3.448524468309038e-03, -2.295778329618807e-03, -7.207933360742974e-02, -7.158392417087556e-02, -7.193796022857617e-02, -7.143851639871315e-02, -7.198858200643685e-02, -7.148897969527127e-02, -7.202798999040975e-02, -7.153267591219251e-02, -7.200824591357118e-02, -7.151083734479068e-02, -7.200824591357118e-02, -7.151083734479068e-02, -7.135739235546321e-02, -7.093745901649329e-02, -6.765611953196009e-02, -6.713368429203431e-02, -6.879115666914092e-02, -6.824751147415183e-02, -6.981081606621527e-02, -6.937345798181516e-02, -6.927845493603252e-02, -6.881989420586700e-02, -6.927845493603252e-02, -6.881989420586700e-02, -7.508834682137992e-02, -7.487060149475462e-02, -4.920049730103942e-02, -4.868836294550678e-02, -5.337108685188278e-02, -5.241598336321346e-02, -5.944389088892980e-02, -5.885577916810367e-02, -5.595141817705941e-02, -5.598709551284940e-02, -5.595141817705941e-02, -5.598709551284940e-02, -6.580022198590756e-02, -6.499435515347540e-02, -1.773473641944772e-02, -1.753121438157516e-02, -2.214694166027818e-02, -2.091745263491412e-02, -5.910205265907139e-02, -5.752772072673307e-02, -2.967984488781282e-02, -2.694167668695552e-02, -2.967984488781282e-02, -2.694167668695552e-02, -6.593851890049683e-03, -6.257235459966661e-03, -9.143293623607918e-04, -9.116957740942257e-04, -1.869567054922984e-03, -1.724808891658679e-03, -2.767196925454410e-02, -2.688553677825677e-02, -3.151293237207474e-03, -2.184548897147386e-03, -3.151293237207476e-03, -2.184548897147386e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
