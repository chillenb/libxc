
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_1d_csc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_csc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.746251869641226e-11, -2.746205916858107e-11, -2.745987451580327e-11, -2.746671459978152e-11, -2.746315044417603e-11, -2.746315044417603e-11, -1.468088489254073e-06, -1.468069519154704e-06, -1.467415870336054e-06, -1.466884067545804e-06, -1.467853496719665e-06, -1.467853496719665e-06, -1.543330276864143e-02, -1.550592717549903e-02, -1.737258597301263e-02, -1.678174893198094e-02, -1.677457641087008e-02, -1.677457641087008e-02, -2.118318380863401e-02, -2.187401010266317e-02, -7.667933317213728e-03, -1.131457569463527e-02, -7.771386352131178e-03, -7.771386352131181e-03, -3.281854979234145e-06, -3.775724515304376e-06, -3.949878486719887e-04, -7.133710241928197e-07, -7.758784773668396e-07, -7.758784773668397e-07, -1.307394857279288e-07, -1.305956603081381e-07, -1.307323175683093e-07, -1.306053542192602e-07, -1.306668496607523e-07, -1.306668496607523e-07, -4.527598728578091e-05, -4.337772137099681e-05, -4.672261749010494e-05, -4.497777644569790e-05, -4.355100313912690e-05, -4.355100313912690e-05, -2.665594598455880e-02, -1.911278817553185e-02, -3.575393486081346e-02, -3.092973017210589e-02, -2.490999351622364e-02, -2.490999351622364e-02, -4.670649685931392e-03, -2.131437553179075e-02, -3.827198289344731e-03, -5.076156761715470e-05, -6.877051529063265e-03, -6.877051529063265e-03, -3.435047194675792e-07, -6.695142278986832e-07, -3.130733760475104e-07, -1.405919767164747e-03, -4.383618341020978e-07, -4.383618341020977e-07, -2.615325414583516e-02, -2.675073068369643e-02, -2.653877745148154e-02, -2.636560717887701e-02, -2.645212989111508e-02, -2.645212989111508e-02, -2.911285137094595e-02, -4.966080945247860e-02, -4.297658188508630e-02, -3.688398025375987e-02, -3.990882676240291e-02, -3.990882676240291e-02, -1.568388566143078e-02, -3.474622723673394e-02, -4.853091846260760e-02, -6.854275968671272e-02, -5.965301622151632e-02, -5.965301622151632e-02, -6.065906511415390e-02, -3.538670491622793e-04, -7.977016484308115e-04, -6.665399914749059e-02, -2.590242167752134e-03, -2.590242167752134e-03, -8.568636253721689e-06, -1.608905403236524e-08, -1.306674831660568e-07, -2.220425388061577e-03, -3.656385154182099e-07, -3.656385154182089e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_1d_csc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_csc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.746208404783805e-11, 2.746189839423657e-11, 2.746168823373628e-11, 2.746137517859449e-11, 2.745917407697861e-11, 2.745952015546528e-11, 2.746673618480402e-11, 2.746563781004329e-11, 2.746354171857348e-11, 2.746170414797901e-11, 2.746354171857348e-11, 2.746170414797901e-11, 1.461613739266013e-06, 1.461508645340289e-06, 1.461602350792786e-06, 1.461482346094852e-06, 1.460813809645852e-06, 1.460972308705856e-06, 1.460310799559174e-06, 1.460418809883865e-06, 1.459886447912546e-06, 1.462767471388285e-06, 1.459886447912546e-06, 1.462767471388285e-06, 6.387308061930276e-03, 6.685468106738478e-03, 6.364122335349359e-03, 6.732000680218013e-03, 7.139338556165438e-03, 6.554741894313834e-03, 6.668422204742290e-03, 6.845355144013903e-03, 9.152417141433829e-03, 3.780046085528959e-03, 9.152417141433829e-03, 3.780046085528959e-03, -3.896481148607858e-02, -3.467575418947019e-02, -4.049275877256795e-02, -3.545465403826205e-02, 3.964977176125857e-03, 5.231353505970565e-03, -2.063502936566765e-02, -1.980579373921371e-02, -8.653109123752684e-03, -4.720534594301639e-02, -8.653109123752681e-03, -4.720534594301641e-02, -6.913747730518035e-06, -5.831039484419614e-06, -8.051368224590254e-06, -6.637283464709104e-06, -8.074540767955575e-04, -6.883979509194337e-04, -1.348631113153819e-06, -1.413203950919526e-06, -9.759787771549920e-07, -4.326218626124497e-06, -9.759787771549920e-07, -4.326218626124497e-06, 1.306483361958789e-07, 1.304839367777680e-07, 1.305068709322149e-07, 1.303383200228070e-07, 1.306427063656962e-07, 1.304752565832988e-07, 1.305146568223108e-07, 1.303498861800469e-07, 1.305773035178577e-07, 1.304099840410676e-07, 1.305773035178577e-07, 1.304099840410676e-07, 4.415644240896308e-05, 4.414447252060892e-05, 4.235331658064886e-05, 4.229154309334058e-05, 4.533078704154283e-05, 4.575318635970749e-05, 4.365100023713580e-05, 4.407461846115125e-05, 4.298612703929062e-05, 4.198600924574973e-05, 4.298612703929062e-05, 4.198600924574973e-05, 8.363683856395127e-03, 8.021345745893927e-03, 7.098092650256125e-03, 7.140225873923849e-03, 4.676261944192093e-03, 1.098494963801180e-02, 5.882006134786701e-03, 1.079759300132191e-02, 1.080952028435708e-02, 4.625169238849901e-03, 1.080952028435707e-02, 4.625169238849907e-03, -8.654228765151463e-03, -8.412840325526394e-03, -3.719910097379668e-02, -3.663714844259999e-02, -7.607202699442867e-03, -6.508935753511831e-03, 4.948426848354386e-05, 4.936495243096864e-05, -1.362851670786305e-02, -1.147873895238772e-02, -1.362851670786305e-02, -1.147873895238772e-02, -7.033013261977163e-07, -6.320808728743027e-07, -1.323144252193498e-06, -1.268978872967754e-06, -6.594047239963529e-07, -5.624749033182999e-07, -2.636622060265484e-03, -2.589086290707643e-03, -1.458275545747876e-06, -6.130023238384584e-07, -1.458275545747876e-06, -6.130023238384583e-07, 7.888829338106439e-03, 8.377602517444866e-03, 7.949712865620654e-03, 8.454763418047620e-03, 7.927933803310210e-03, 8.428774383185685e-03, 7.911856959239801e-03, 8.404863879298216e-03, 7.919973802386444e-03, 8.416838445768262e-03, 7.919973802386444e-03, 8.416838445768262e-03, 8.178449332966823e-03, 8.644446024783550e-03, -2.054469441485110e-03, -9.872785092103406e-04, 4.461855524797035e-03, 5.399175844608596e-03, 7.457345570450020e-03, 8.089980003137820e-03, 6.317317835620072e-03, 7.043149439897489e-03, 6.317317835620072e-03, 7.043149439897489e-03, 6.516705061704050e-03, 6.641353234613310e-03, -5.802515541250747e-02, -5.697312299773725e-02, -7.667815308849853e-02, -7.415878609083201e-02, -8.435920357021991e-02, -8.241047343969102e-02, -8.512604328821878e-02, -8.523501092082124e-02, -8.512604328821881e-02, -8.523501092082122e-02, -2.321075101983448e-02, -2.111004219709697e-02, -6.730534199418321e-04, -6.597654787818080e-04, -1.567461324053949e-03, -1.422309132534682e-03, -8.818090064510135e-02, -8.302991946317718e-02, -5.196062796194584e-03, -4.419251853777717e-03, -5.196062796194583e-03, -4.419251853777718e-03, -1.733098437351420e-05, -1.567362226189465e-05, -3.144398336162454e-08, -3.124755071079176e-08, -2.774077805511823e-07, -2.339780331867868e-07, -4.204498033088545e-03, -4.006291790133796e-03, -1.140875181272526e-06, -5.236512668997704e-07, -1.140875181272523e-06, -5.236512668997692e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
