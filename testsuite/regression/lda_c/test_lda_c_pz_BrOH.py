
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pz_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.656054638998450e-01, -1.656055384282846e-01, -1.656059258005295e-01, -1.656047042656778e-01, -1.656055027448352e-01, -1.656055027448352e-01, -1.109116614397433e-01, -1.109117226854392e-01, -1.109146072819009e-01, -1.109158221647430e-01, -1.109118172550705e-01, -1.109118172550705e-01, -6.637306301920973e-02, -6.634888493091570e-02, -6.571573915422711e-02, -6.589922373335326e-02, -6.636424676032199e-02, -6.636424676032199e-02, -3.914603347680244e-02, -3.939835842611853e-02, -7.073146663426101e-02, -3.324997348359932e-02, -3.922199599501686e-02, -3.922199599501686e-02, -5.809928058817949e-03, -6.031605995449025e-03, -1.704404617644706e-02, -3.143142398738189e-03, -5.980878562588749e-03, -5.980878562588749e-03, -1.227977273006338e-01, -1.228030165807850e-01, -1.227982854056064e-01, -1.228023978772242e-01, -1.228004157770969e-01, -1.228004157770969e-01, -9.442299924109294e-02, -9.461951608378093e-02, -9.434320099841388e-02, -9.449707979227709e-02, -9.465872680638739e-02, -9.465872680638739e-02, -6.317114790690218e-02, -6.506826644448337e-02, -6.199209969408828e-02, -6.293757850452350e-02, -6.403014877281299e-02, -6.403014877281299e-02, -2.807619943240532e-02, -3.928212753973512e-02, -2.787074498595967e-02, -9.388182089814742e-02, -3.045188411139680e-02, -3.045188411139680e-02, -3.047216617967974e-03, -3.417574135670425e-03, -2.664108485889055e-03, -2.113695116820281e-02, -3.155395875889005e-03, -3.155395875889005e-03, -6.388536923907692e-02, -6.376305844686105e-02, -6.380695795134429e-02, -6.384078513291684e-02, -6.382385905539381e-02, -6.382385905539381e-02, -6.314297635333435e-02, -5.999409318091063e-02, -6.094414833025559e-02, -6.180127788523323e-02, -6.136733799150899e-02, -6.136733799150899e-02, -6.617396621779233e-02, -4.375981671746033e-02, -4.723789622564845e-02, -5.234518898424508e-02, -4.977456241654061e-02, -4.977456241654060e-02, -5.780944571492223e-02, -1.618808453725021e-02, -1.976244949552497e-02, -5.115323618877370e-02, -2.486620422474501e-02, -2.486620422474501e-02, -6.599710850730351e-03, -1.079032640359456e-03, -1.929957489060205e-03, -2.417604076223457e-02, -2.740931156749584e-03, -2.740931156749580e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pz_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.758401125363463e-01, -1.758401873478324e-01, -1.758405761912417e-01, -1.758393500171828e-01, -1.758401515288634e-01, -1.758401515288634e-01, -1.206392415825630e-01, -1.206393039708646e-01, -1.206422423802427e-01, -1.206434799256440e-01, -1.206394003047919e-01, -1.206394003047919e-01, -7.422138466238946e-02, -7.419512647759618e-02, -7.350672794835124e-02, -7.370638121298713e-02, -7.421181017144783e-02, -7.421181017144783e-02, -4.549564111179960e-02, -4.576619703775794e-02, -7.892228171248668e-02, -3.910891898384820e-02, -4.557711535103444e-02, -4.557711535103444e-02, -7.377675987967546e-03, -7.651716743133608e-03, -2.083608267392352e-02, -4.045246803696739e-03, -7.589043739568369e-03, -7.589043739568369e-03, -1.327118764825553e-01, -1.327172349845156e-01, -1.327124418920625e-01, -1.327166081844217e-01, -1.327146001449668e-01, -1.327146001449668e-01, -1.037498145918315e-01, -1.039524328930880e-01, -1.036675277399534e-01, -1.038261997266651e-01, -1.039928564245395e-01, -1.039928564245395e-01, -7.072379034474917e-02, -7.280115093422368e-02, -6.942455284904314e-02, -7.046693361850484e-02, -7.166631934737698e-02, -7.166631934737698e-02, -3.339684832015506e-02, -4.564159571933456e-02, -3.316781748675815e-02, -1.031916328362883e-01, -3.603275771971673e-02, -3.603275771971673e-02, -3.924010046098579e-03, -4.391512367487663e-03, -3.438730353555265e-03, -2.556145864930736e-02, -4.060725850441434e-03, -4.060725850441434e-03, -7.150768974044679e-02, -7.137360721422860e-02, -7.142173933095057e-02, -7.145882223559082e-02, -7.144026772020533e-02, -7.144026772020533e-02, -7.069282334656177e-02, -6.720673646370083e-02, -6.826398436598018e-02, -6.921364402059337e-02, -6.873333709438950e-02, -6.873333709438950e-02, -7.400509431653068e-02, -5.040845447039608e-02, -5.406540047556197e-02, -5.936626128066293e-02, -5.670826481710610e-02, -5.670826481710609e-02, -6.495084522560304e-02, -1.983717426220833e-02, -2.398369123708226e-02, -5.813629763059501e-02, -2.979837295782526e-02, -2.979837295782526e-02, -8.352139230313187e-03, -1.409711968839048e-03, -2.503574671063414e-03, -2.901893991876313e-02, -3.536183103116768e-03, -3.536183103116763e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
