
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_2d_amgb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_amgb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.905654107669977e-01, -1.905654174167229e-01, -1.905654490351180e-01, -1.905653500309936e-01, -1.905654015819026e-01, -1.905654015819026e-01, -1.768064374019056e-01, -1.768064729955898e-01, -1.768077001228967e-01, -1.768086989379152e-01, -1.768068433310601e-01, -1.768068433310601e-01, -1.220546827905197e-01, -1.219953167067633e-01, -1.205683129023186e-01, -1.210143290649305e-01, -1.201853822025497e-01, -1.201853822025497e-01, -4.599415943452650e-02, -4.666708901174801e-02, -1.296622520788299e-01, -3.444916116019852e-02, -2.547809830694598e-02, -2.547809830694597e-02, -5.338266105003588e-04, -5.750845182869778e-04, -6.632911143564630e-03, -2.374497980981878e-04, -2.537571826259450e-04, -2.537571826259450e-04, -1.823439291773050e-01, -1.823459863097013e-01, -1.823440311447133e-01, -1.823458482356485e-01, -1.823449677064617e-01, -1.823449677064617e-01, -1.644838312399282e-01, -1.646781023802227e-01, -1.643397061765835e-01, -1.645131056686789e-01, -1.646554557631453e-01, -1.646554557631453e-01, -1.148388706980477e-01, -1.193495177305881e-01, -1.102916829267130e-01, -1.125059803700994e-01, -1.152894960433573e-01, -1.152894960433572e-01, -2.267318747124995e-02, -4.615709790217799e-02, -2.058191807500864e-02, -1.639593074101555e-01, -2.723320806296370e-02, -2.723320806296370e-02, -1.612060707677717e-04, -2.295931234735114e-04, -1.534628481072564e-04, -1.260387068496100e-02, -1.836550459730848e-04, -1.836550459730848e-04, -1.151049316876694e-01, -1.147873055026052e-01, -1.148993360678425e-01, -1.149914282394382e-01, -1.149453582053086e-01, -1.149453582053086e-01, -1.135830581346931e-01, -1.048967893965783e-01, -1.075554959915749e-01, -1.100498310902809e-01, -1.087935099699563e-01, -1.087935099699563e-01, -1.218586395970453e-01, -5.782590204591256e-02, -6.790344506002366e-02, -8.423168321480543e-02, -7.594188401069762e-02, -7.594188401069778e-02, -1.000566462576689e-01, -6.271665803192874e-03, -9.485737102958176e-03, -8.202092194774852e-02, -1.702482551717674e-02, -1.702482551717680e-02, -8.888025662270784e-04, -3.695374440601529e-05, -9.665672772312906e-05, -1.579854756047247e-02, -1.667079297040726e-04, -1.667079297033481e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_2d_amgb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_amgb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.913598520462148e-01, -1.913607517693311e-01, -1.913595473620037e-01, -1.913610645298160e-01, -1.913611638126442e-01, -1.913594864692319e-01, -1.913576039702038e-01, -1.913629261505870e-01, -1.913558438418990e-01, -1.913647489567781e-01, -1.913558438418990e-01, -1.913647489567781e-01, -1.823010405685337e-01, -1.823100048815118e-01, -1.823004293022092e-01, -1.823106656098361e-01, -1.823131623253170e-01, -1.822996363774639e-01, -1.823117029594982e-01, -1.823024822197081e-01, -1.824287547552541e-01, -1.821829690921523e-01, -1.824287547552541e-01, -1.821829690921523e-01, -1.404958811927457e-01, -1.386546341705151e-01, -1.406566053773678e-01, -1.383962180771111e-01, -1.367085507117854e-01, -1.398880733689581e-01, -1.391717415878310e-01, -1.381728802599629e-01, -1.241481179765945e-01, -1.543021595971070e-01, -1.241481179765945e-01, -1.543021595971070e-01, -6.493674225082523e-02, -5.836352732322244e-02, -6.632160348557897e-02, -5.872429916364529e-02, -1.545546007229817e-01, -1.382208863607582e-01, -4.794782968145456e-02, -4.621890901312219e-02, -2.355633269275027e-02, -1.022865427181328e-01, -2.355633269275023e-02, -1.022865427181327e-01, -8.486463674731619e-04, -7.532575832558041e-04, -9.222550425418794e-04, -8.056129812467042e-04, -1.025163905031959e-02, -9.097248687925235e-03, -3.494803065156095e-04, -3.611023713117302e-04, -3.039417266319147e-04, -7.855107802370773e-04, -3.039417266319146e-04, -7.855107802370774e-04, -1.860003456290255e-01, -1.861619009693443e-01, -1.859995902705227e-01, -1.861654092353935e-01, -1.859989113482597e-01, -1.861634733804181e-01, -1.860013624103131e-01, -1.861634502477302e-01, -1.859995599073996e-01, -1.861640769624804e-01, -1.859995599073996e-01, -1.861640769624804e-01, -1.734545800872871e-01, -1.734857334990967e-01, -1.735294564357744e-01, -1.736974327887945e-01, -1.738972324367795e-01, -1.728326958698054e-01, -1.740480182299141e-01, -1.729380140925986e-01, -1.722500424088736e-01, -1.749584527042031e-01, -1.722500424088736e-01, -1.749584527042031e-01, -1.326735379585903e-01, -1.338363667673173e-01, -1.373269604263695e-01, -1.371202609273257e-01, -1.371556642094210e-01, -1.219103797054524e-01, -1.385042046180973e-01, -1.244343889337311e-01, -1.231128035634400e-01, -1.456890696742326e-01, -1.231128035634399e-01, -1.456890696742325e-01, -3.205578262848807e-02, -3.129619764322460e-02, -6.210637991701790e-02, -6.124703875049931e-02, -3.089768341799008e-02, -2.711920596438950e-02, -1.729447356930642e-01, -1.732209757132022e-01, -4.077006973086809e-02, -3.511728563953419e-02, -4.077006973086809e-02, -3.511728563953419e-02, -2.507962672917364e-04, -2.327546295712653e-04, -3.485525915859956e-04, -3.385093882413468e-04, -2.436101989256135e-04, -2.179937297665791e-04, -1.811692089696183e-02, -1.785839713436588e-02, -4.040527074832542e-04, -2.247661043204592e-04, -4.040527074832543e-04, -2.247661043204592e-04, -1.343415383048528e-01, -1.326453418363196e-01, -1.340657796063339e-01, -1.323571387291689e-01, -1.341658205155647e-01, -1.324561527601850e-01, -1.342403836242821e-01, -1.325449970494133e-01, -1.342029992737380e-01, -1.325006410472511e-01, -1.342029992737380e-01, -1.325006410472511e-01, -1.328535222707712e-01, -1.314213756407549e-01, -1.251051014123737e-01, -1.233701266965428e-01, -1.275986398643413e-01, -1.257770797053011e-01, -1.296973685657760e-01, -1.282205624733198e-01, -1.285887634800743e-01, -1.270462700552963e-01, -1.285887634800743e-01, -1.270462700552963e-01, -1.397804114629704e-01, -1.390237895255119e-01, -7.614174585701607e-02, -7.487746955036308e-02, -8.817275341701294e-02, -8.559024708839427e-02, -1.050528067318803e-01, -1.032750035787011e-01, -9.549387382534344e-02, -9.559627296474811e-02, -9.549387382534361e-02, -9.559627296474815e-02, -1.210246575104624e-01, -1.183960836635358e-01, -9.184307934954799e-03, -9.048559512571375e-03, -1.418381249504919e-02, -1.316197573223364e-02, -1.042898568836086e-01, -9.959129972762217e-02, -2.577288248326683e-02, -2.258090372843648e-02, -2.577288248326680e-02, -2.258090372843645e-02, -1.372642183343194e-03, -1.278960783158175e-03, -5.557865369823636e-05, -5.557865369823636e-05, -1.542194883011552e-04, -1.369128000407335e-04, -2.282714887373528e-02, -2.195203557199088e-02, -3.505753807005283e-04, -2.062993004667562e-04, -3.505753807004065e-04, -2.062993004674600e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
