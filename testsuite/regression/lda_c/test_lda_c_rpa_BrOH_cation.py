
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rpa_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpa", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.663637177121069e-01, -1.663638016801123e-01, -1.663642008939890e-01, -1.663629510728624e-01, -1.663636022755705e-01, -1.663636022755705e-01, -1.137616125229156e-01, -1.137616715076278e-01, -1.137637044199467e-01, -1.137653590600869e-01, -1.137623420029505e-01, -1.137623420029505e-01, -7.281003876740771e-02, -7.278527958660257e-02, -7.218185521912091e-02, -7.236700677077161e-02, -7.232774903899185e-02, -7.232774903899185e-02, -3.985844299693060e-02, -4.034123527124250e-02, -7.628464593094071e-02, -2.973077607759890e-02, -3.432090919929603e-02, -3.432090919929603e-02, 1.861676011000816e+00, 1.735739283641293e+00, 1.163184225990159e-01, 3.876030470005234e+00, 2.867216909137925e+00, 2.867216909137925e+00, -1.249811995010482e-01, -1.249863828611015e-01, -1.249814576809639e-01, -1.249860333414089e-01, -1.249838165236831e-01, -1.249838165236831e-01, -9.850087691964346e-02, -9.868671981403300e-02, -9.836445475441079e-02, -9.852951547095007e-02, -9.866925303008918e-02, -9.866925303008918e-02, -6.982231249405640e-02, -7.166771509024410e-02, -6.810072207567230e-02, -6.895923482765387e-02, -7.017785680880004e-02, -7.017785680880004e-02, -1.069714269866432e-02, -3.990745529921841e-02, -5.411638594765175e-03, -9.800520492005123e-02, -2.006432517198560e-02, -2.006432517198560e-02, 5.429149216482634e+00, 3.992750063618306e+00, 5.655245058629517e+00, 3.194961409480893e-02, 4.444241586221422e+00, 4.444241586221422e+00, -6.992995382022529e-02, -6.980211467700420e-02, -6.984717824635434e-02, -6.988423103543819e-02, -6.986569172911140e-02, -6.986569172911140e-02, -6.931964887703157e-02, -6.594132930908261e-02, -6.695985079703680e-02, -6.792644752259350e-02, -6.743793214261798e-02, -6.743793214261798e-02, -7.272540857418570e-02, -4.682527068201352e-02, -5.158164886250359e-02, -5.817078525821220e-02, -5.493385526488323e-02, -5.493385526488323e-02, -6.411300461821962e-02, 1.271654307787431e-01, 6.299591427708583e-02, -5.733197899247845e-02, 6.864981715514360e-03, 6.864981715514361e-03, 1.154435644816308e+00, 2.112812434729055e+01, 8.394919203693986e+00, 1.261951008730800e-02, 4.915424686374484e+00, 4.915424686374490e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rpa_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpa", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.763998126892592e-01, -1.763998126892592e-01, -1.763998973858013e-01, -1.763998973858013e-01, -1.764003000633809e-01, -1.764003000633809e-01, -1.763990393983040e-01, -1.763990393983040e-01, -1.763996962511512e-01, -1.763996962511512e-01, -1.763996962511512e-01, -1.763996962511512e-01, -1.228709427754636e-01, -1.228709427754636e-01, -1.228710035547351e-01, -1.228710035547351e-01, -1.228730983152965e-01, -1.228730983152965e-01, -1.228748032933611e-01, -1.228748032933611e-01, -1.228716944491451e-01, -1.228716944491451e-01, -1.228716944491451e-01, -1.228716944491451e-01, -8.029185818966249e-02, -8.029185818966249e-02, -8.026635342911963e-02, -8.026635342911963e-02, -7.964532687080046e-02, -7.964532687080046e-02, -7.983576095154996e-02, -7.983576095154996e-02, -7.979537423457718e-02, -7.979537423457718e-02, -7.979537423457718e-02, -7.979537423457718e-02, -5.063140648491925e-02, -5.063140648491925e-02, -5.098151166955780e-02, -5.098151166955780e-02, -8.388636762991311e-02, -8.388636762991311e-02, -4.373611346802587e-02, -4.373611346802587e-02, -4.676499231261622e-02, -4.676499231261622e-02, -4.676499231261622e-02, -4.676499231261622e-02, 1.014760677789762e+00, 1.014760677789762e+00, 9.425349448174073e-01, 9.425349448174073e-01, 3.630792619065569e-02, 3.630792619065569e-02, 2.183653649899089e+00, 2.183653649899089e+00, 1.595596548918691e+00, 1.595596548918691e+00, 1.595596548918691e+00, 1.595596548918691e+00, -1.343932698133317e-01, -1.343932698133317e-01, -1.343985761829514e-01, -1.343985761829514e-01, -1.343935341206224e-01, -1.343935341206224e-01, -1.343982183690471e-01, -1.343982183690471e-01, -1.343959489439964e-01, -1.343959489439964e-01, -1.343959489439964e-01, -1.343959489439964e-01, -1.070684297689918e-01, -1.070684297689918e-01, -1.072617983260359e-01, -1.072617983260359e-01, -1.069264694956198e-01, -1.069264694956198e-01, -1.070982294391067e-01, -1.070982294391067e-01, -1.072436251496230e-01, -1.072436251496230e-01, -1.072436251496230e-01, -1.072436251496230e-01, -7.722885658266410e-02, -7.722885658266410e-02, -7.911709414612615e-02, -7.911709414612615e-02, -7.548009859871502e-02, -7.548009859871502e-02, -7.635045829296123e-02, -7.635045829296123e-02, -7.759163472902690e-02, -7.759163472902690e-02, -7.759163472902690e-02, -7.759163472902690e-02, -3.222453479858303e-02, -3.222453479858303e-02, -5.066684545532694e-02, -5.066684545532694e-02, -2.920717596679247e-02, -2.920717596679247e-02, -1.065525805355081e-01, -1.065525805355081e-01, -3.772905420792345e-02, -3.772905420792345e-02, -3.772905420792345e-02, -3.772905420792345e-02, 3.095820626483930e+00, 3.095820626483930e+00, 2.251950178202598e+00, 2.251950178202598e+00, 3.229138533497194e+00, 3.229138533497194e+00, -8.725292858449068e-03, -8.725292858449068e-03, 2.516557589606329e+00, 2.516557589606329e+00, 2.516557589606329e+00, 2.516557589606329e+00, -7.733863316036647e-02, -7.733863316036647e-02, -7.720826348398729e-02, -7.720826348398729e-02, -7.725421131107342e-02, -7.725421131107342e-02, -7.729199750767932e-02, -7.729199750767932e-02, -7.727309052841493e-02, -7.727309052841493e-02, -7.727309052841493e-02, -7.727309052841493e-02, -7.671687214422379e-02, -7.671687214422379e-02, -7.330800656627266e-02, -7.330800656627266e-02, -7.432926570493711e-02, -7.432926570493711e-02, -7.530386048666272e-02, -7.530386048666272e-02, -7.481067680349412e-02, -7.481067680349412e-02, -7.481067680349412e-02, -7.481067680349412e-02, -8.020468693332611e-02, -8.020468693332611e-02, -5.592243951189656e-02, -5.592243951189656e-02, -5.986078499382406e-02, -5.986078499382406e-02, -6.577140688477297e-02, -6.577140688477297e-02, -6.280412789673392e-02, -6.280412789673392e-02, -6.280412789673392e-02, -6.280412789673392e-02, -7.149123763770865e-02, -7.149123763770865e-02, 4.209858028399632e-02, 4.209858028399632e-02, 7.885213424325740e-03, 7.885213424325740e-03, -6.499131596484786e-02, -6.499131596484786e-02, -2.235627583202399e-02, -2.235627583202399e-02, -2.235627583202398e-02, -2.235627583202398e-02, 6.112896116816940e-01, 6.112896116816940e-01, 1.249655929840538e+01, 1.249655929840538e+01, 4.852353693071091e+00, 4.852353693071091e+00, -1.919722326908957e-02, -1.919722326908957e-02, 2.793358365565654e+00, 2.793358365565654e+00, 2.793358365565658e+00, 2.793358365565658e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
