
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_karasiev_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.644261370901179e-01, -1.644262116507703e-01, -1.644265991904469e-01, -1.644253771276263e-01, -1.644261759518978e-01, -1.644261759518978e-01, -1.098104860980754e-01, -1.098105470187344e-01, -1.098134163073134e-01, -1.098146247436134e-01, -1.098106410864770e-01, -1.098106410864770e-01, -6.551144450296063e-02, -6.548691572998917e-02, -6.484387870406733e-02, -6.503037270779709e-02, -6.550250059557870e-02, -6.550250059557870e-02, -3.839421630344134e-02, -3.863139407829836e-02, -6.990618582603220e-02, -3.287603540400103e-02, -3.846560511798000e-02, -3.846560511798000e-02, -5.852673254454211e-03, -6.086950800181619e-03, -1.742200965907323e-02, -3.054753251467044e-03, -6.033336141878276e-03, -6.033336141878276e-03, -1.216482217957999e-01, -1.216534955628044e-01, -1.216487782636583e-01, -1.216528786736180e-01, -1.216509023865235e-01, -1.216509023865235e-01, -9.343992328503530e-02, -9.363470633922406e-02, -9.336083072841053e-02, -9.351334956725743e-02, -9.367357182513557e-02, -9.367357182513557e-02, -6.224390699134402e-02, -6.418480650583812e-02, -6.102913625674292e-02, -6.200382294078918e-02, -6.312466144528332e-02, -6.312466144528332e-02, -2.803096741391394e-02, -3.852212441915429e-02, -2.783769039653956e-02, -9.290354902231444e-02, -3.025981573050868e-02, -3.025981573050868e-02, -2.955631071076866e-03, -3.339236647293098e-03, -2.561651301747090e-03, -2.142631908325954e-02, -3.067427470788863e-03, -3.067427470788863e-03, -6.297644961732431e-02, -6.285116692791459e-02, -6.289614078023051e-02, -6.293078993327583e-02, -6.291345320456707e-02, -6.291345320456707e-02, -6.221496375623558e-02, -5.895241028935159e-02, -5.994300542428732e-02, -6.083183733639291e-02, -6.038239401735775e-02, -6.038239401735775e-02, -6.530940177041412e-02, -4.275678198256339e-02, -4.609387660839214e-02, -5.110089906119955e-02, -4.856278944687287e-02, -4.856278944687287e-02, -5.664106712610764e-02, -1.657101651198267e-02, -2.009271648504352e-02, -4.991916323768301e-02, -2.499797280688147e-02, -2.499797280688147e-02, -6.687399912257299e-03, -9.807179594215217e-04, -1.817380674496045e-03, -2.434145626182687e-02, -2.640392102421797e-03, -2.640392102421794e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_karasiev_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.746652093480228e-01, -1.746652842042443e-01, -1.746656732801721e-01, -1.746644463728922e-01, -1.746652483638564e-01, -1.746652483638564e-01, -1.194864409539989e-01, -1.194865031448561e-01, -1.194894322557312e-01, -1.194906658854705e-01, -1.194865991739108e-01, -1.194865991739108e-01, -7.347328547127349e-02, -7.344727579944529e-02, -7.276518996535093e-02, -7.296305374201290e-02, -7.346380165840194e-02, -7.346380165840194e-02, -4.436103002313791e-02, -4.461862126708067e-02, -7.812305756060683e-02, -3.834971342499937e-02, -4.443856927033540e-02, -4.443856927033540e-02, -7.509332329610812e-03, -7.799299945117130e-03, -2.118088430629936e-02, -3.987731010321105e-03, -7.733002776007799e-03, -7.733002776007799e-03, -1.315332888886525e-01, -1.315386406224699e-01, -1.315338535838471e-01, -1.315380146138876e-01, -1.315360091104663e-01, -1.315360091104663e-01, -1.026843136347074e-01, -1.028854220180684e-01, -1.026026435531822e-01, -1.027601280792871e-01, -1.029255458046914e-01, -1.029255458046914e-01, -7.000292041505017e-02, -7.206564423031765e-02, -6.870992030401339e-02, -6.974749558340342e-02, -7.093944255050737e-02, -7.093944255050737e-02, -3.303500280931069e-02, -4.449995418901225e-02, -3.282206669748870e-02, -1.021303561788105e-01, -3.548506958593779e-02, -3.548506958593779e-02, -3.860834973283361e-03, -4.351065777711747e-03, -3.354902969135703e-03, -2.570267650428960e-02, -4.003945280855349e-03, -4.003945280855349e-03, -7.078190251004461e-02, -7.064871694289510e-02, -7.069652963618370e-02, -7.073336448293628e-02, -7.071493429653862e-02, -7.071493429653862e-02, -6.997213092985681e-02, -6.649597707599020e-02, -6.755256808939068e-02, -6.849977295844122e-02, -6.802091317364381e-02, -6.802091317364382e-02, -7.325902571375585e-02, -4.909024674295627e-02, -5.269599394570559e-02, -5.808766156483976e-02, -5.535734673694815e-02, -5.535734673694814e-02, -6.402685407210087e-02, -2.020978568182510e-02, -2.420463575761888e-02, -5.681715193689343e-02, -2.968332925932397e-02, -2.968332925932398e-02, -8.539312292609147e-03, -1.298413565286332e-03, -2.392140153349839e-03, -2.895466361083400e-02, -3.456219782361393e-03, -3.456219782361389e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
