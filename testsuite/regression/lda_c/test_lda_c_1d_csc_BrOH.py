
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_1d_csc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_csc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.746674827038174e-11, -2.746634825291483e-11, -2.746426919860405e-11, -2.747082579796746e-11, -2.746653977642296e-11, -2.746653977642296e-11, -1.468494269129548e-06, -1.468475818823033e-06, -1.467607096906273e-06, -1.467241379201700e-06, -1.468447330117907e-06, -1.468447330117907e-06, -1.585029269703356e-02, -1.591960870418761e-02, -1.783317328018564e-02, -1.725861519914971e-02, -1.587553704474096e-02, -1.587553704474096e-02, -2.376587711878538e-02, -2.445146245992889e-02, -6.933563715898694e-03, -1.146533488781617e-02, -2.397080954913480e-02, -2.397080954913480e-02, -1.410123601571544e-05, -1.601886086192067e-05, -6.975064967567520e-04, -1.840937925437486e-06, -1.556412189611416e-05, -1.556412189611416e-05, -1.310818928310885e-07, -1.309421940828345e-07, -1.310671452695730e-07, -1.309585273403038e-07, -1.310108669338287e-07, -1.310108669338287e-07, -4.557711798260212e-05, -4.371972164876254e-05, -4.635389404315260e-05, -4.486776300872477e-05, -4.335836129025539e-05, -4.335836129025539e-05, -2.782487394317392e-02, -2.000079421500044e-02, -3.400198325191923e-02, -2.896317749440895e-02, -2.398426619059889e-02, -2.398426619059889e-02, -5.445930075608369e-03, -2.413392643396516e-02, -5.275434600198452e-03, -5.111448282419452e-05, -7.765699213772433e-03, -7.765699213772433e-03, -1.665199277619067e-06, -2.416335153259983e-06, -1.080292106022883e-06, -1.649521407379225e-03, -1.864297344105413e-06, -1.864297344105413e-06, -2.459493195953657e-02, -2.512208975647544e-02, -2.493168361921791e-02, -2.478588285017988e-02, -2.485873741372361e-02, -2.485873741372361e-02, -2.795996930894404e-02, -4.662381107103444e-02, -4.035744646562792e-02, -3.510228248207987e-02, -3.770251005774766e-02, -3.770251005774764e-02, -1.642911505055626e-02, -3.846116598149085e-02, -5.190451685926377e-02, -6.892623378828837e-02, -6.158609315274471e-02, -6.158609315274470e-02, -6.061805976331634e-02, -5.704894623094995e-04, -1.255758902593905e-03, -6.602829610563994e-02, -3.239108925629163e-03, -3.239108925629164e-03, -2.180554427699226e-05, -6.336546491630988e-08, -3.875912693796008e-07, -2.876990994356253e-03, -1.183523218384592e-06, -1.183523218384587e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_1d_csc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_csc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.746622067336602e-11, 2.746582066738845e-11, 2.746374167300546e-11, 2.747029808357498e-11, 2.746601218540284e-11, 2.746601218540284e-11, 1.461964265725212e-06, 1.461945938534818e-06, 1.461083012592714e-06, 1.460719734384734e-06, 1.461917639929057e-06, 1.461917639929057e-06, 6.606696076132318e-03, 6.618088810117925e-03, 6.922155833902439e-03, 6.832512123030460e-03, 6.610849304518589e-03, 6.610849304518589e-03, -4.084328712338105e-02, -4.192897188475087e-02, 4.347492412290669e-03, -2.047179650870398e-02, -4.116840163667568e-02, -4.116840163667568e-02, -2.703504001228991e-05, -3.069611843381251e-05, -1.305708751447356e-03, -3.552960438191410e-06, -2.982813920273105e-05, -2.982813920273105e-05, 1.309078917237038e-07, 1.307684710925040e-07, 1.308931735291336e-07, 1.307847718408200e-07, 1.308370072457714e-07, 1.308370072457714e-07, 4.444030497103034e-05, 4.265189898058785e-05, 4.518780004230787e-05, 4.375746952665904e-05, 4.230379101287790e-05, 4.230379101287790e-05, 8.313144852372126e-03, 7.254783432619399e-03, 8.321769849743851e-03, 8.403195599083518e-03, 7.848277541611607e-03, 7.848277541611607e-03, -9.918758795276922e-03, -4.142682162248816e-02, -9.614311758874849e-03, 4.976355126707671e-05, -1.403048160917438e-02, -1.403048160917438e-02, -3.214663423864888e-06, -4.659922316140563e-06, -2.087848939503160e-06, -3.059556552304382e-03, -3.597919452978990e-06, -3.597919452978990e-06, 7.933422185373309e-03, 8.004432691344182e-03, 7.979081973140952e-03, 7.959437313255567e-03, 7.969277942106865e-03, 7.969277942106865e-03, 8.325331838866148e-03, 1.898818190593100e-03, 6.469712741425680e-03, 8.164476480630990e-03, 7.536633190898652e-03, 7.536633190898687e-03, 6.700831607259112e-03, -6.271734633154641e-02, -7.899828023993241e-02, -8.262192047918451e-02, -8.603219916706231e-02, -8.603219916706237e-02, -2.203081070283901e-02, -1.069920261311408e-03, -2.336578444585959e-03, -8.597752501523523e-02, -5.953224314473593e-03, -5.953224314473591e-03, -4.173195033666731e-05, -1.231856887695505e-07, -7.508798274676034e-07, -5.297081745779647e-03, -2.286832202484286e-06, -2.286832202484276e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
