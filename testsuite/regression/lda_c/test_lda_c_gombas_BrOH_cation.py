
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gombas_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gombas", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.655183629560812e-01, -1.655184485660698e-01, -1.655188555864784e-01, -1.655175813251623e-01, -1.655182452621934e-01, -1.655182452621934e-01, -1.110503164020494e-01, -1.110503786283769e-01, -1.110525232615239e-01, -1.110542688317487e-01, -1.110510859718324e-01, -1.110510859718324e-01, -6.778339521179308e-02, -6.775816422694411e-02, -6.714439170508027e-02, -6.733248004591891e-02, -6.729258174000174e-02, -6.729258174000174e-02, -4.139733901563097e-02, -4.164522677638914e-02, -7.135658842965184e-02, -3.698869600881367e-02, -3.881376640262411e-02, -3.881376640262411e-02, -4.798775869207873e-03, -5.022950010929333e-03, -1.878428506542527e-02, -2.902065369833193e-03, -3.587173620339686e-03, -3.587173620339686e-03, -1.228358189869147e-01, -1.228412402126404e-01, -1.228360890152824e-01, -1.228408746540830e-01, -1.228385561080681e-01, -1.228385561080681e-01, -9.487009456585693e-02, -9.506789864454890e-02, -9.472488505707531e-02, -9.490057706728398e-02, -9.504930814229121e-02, -9.504930814229121e-02, -6.476771345541764e-02, -6.662324288821346e-02, -6.306063010412649e-02, -6.390878742319359e-02, -6.512326706044956e-02, -6.512326706044956e-02, -3.149556159673063e-02, -4.142232751268325e-02, -3.036930136141925e-02, -9.434246798652209e-02, -3.386026627193518e-02, -3.386026627193518e-02, -2.272809038350027e-03, -2.841149470929020e-03, -2.205447503752524e-03, -2.487137616054748e-02, -2.630321079417115e-03, -2.630321079417115e-03, -6.487525465648643e-02, -6.474754449623694e-02, -6.479254806127026e-02, -6.482956338665673e-02, -6.481104148827482e-02, -6.481104148827482e-02, -6.426673083032036e-02, -6.095784952367637e-02, -6.194392382667507e-02, -6.288925693704811e-02, -6.241037334010175e-02, -6.241037334010175e-02, -6.769716744296041e-02, -4.537623572644444e-02, -4.862820296208273e-02, -5.386419919845022e-02, -5.118991003324083e-02, -5.118991003324083e-02, -5.921624845775954e-02, -1.827297877841843e-02, -2.203779064329581e-02, -5.315324843166637e-02, -2.817192444386331e-02, -2.817192444386331e-02, -6.490878955716308e-03, -7.966572862002034e-04, -1.639914926207631e-03, -2.729787331253616e-02, -2.444605257647871e-03, -2.444605257647869e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gombas_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gombas", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.757507126351681e-01, -1.757507126351681e-01, -1.757507986132253e-01, -1.757507986132253e-01, -1.757512073835493e-01, -1.757512073835493e-01, -1.757499276436865e-01, -1.757499276436865e-01, -1.757505944352698e-01, -1.757505944352698e-01, -1.757505944352698e-01, -1.757505944352698e-01, -1.206602671550267e-01, -1.206602671550267e-01, -1.206603308519586e-01, -1.206603308519586e-01, -1.206625261678667e-01, -1.206625261678667e-01, -1.206643129876298e-01, -1.206643129876298e-01, -1.206610549119778e-01, -1.206610549119778e-01, -1.206610549119778e-01, -1.206610549119778e-01, -7.540833715591010e-02, -7.540833715591010e-02, -7.538124388635548e-02, -7.538124388635548e-02, -7.472191026996702e-02, -7.472191026996702e-02, -7.492401327711073e-02, -7.492401327711073e-02, -7.488114597523202e-02, -7.488114597523202e-02, -7.488114597523202e-02, -7.488114597523202e-02, -4.688547663845646e-02, -4.688547663845646e-02, -4.715132605008104e-02, -4.715132605008104e-02, -7.923651134619847e-02, -7.923651134619847e-02, -4.217716244285374e-02, -4.217716244285374e-02, -4.412179387268558e-02, -4.412179387268558e-02, -4.412179387268558e-02, -4.412179387268558e-02, -6.228794164808076e-03, -6.228794164808076e-03, -6.511708385259785e-03, -6.511708385259785e-03, -2.270138942165319e-02, -2.270138942165319e-02, -3.806780270650899e-03, -3.806780270650899e-03, -4.687527997707070e-03, -4.687527997707070e-03, -4.687527997707070e-03, -4.687527997707070e-03, -1.326798311690379e-01, -1.326798311690379e-01, -1.326853417696129e-01, -1.326853417696129e-01, -1.326801056494732e-01, -1.326801056494732e-01, -1.326849701848922e-01, -1.326849701848922e-01, -1.326826134165039e-01, -1.326826134165039e-01, -1.326826134165039e-01, -1.326826134165039e-01, -1.039893251844047e-01, -1.039893251844047e-01, -1.041946267791811e-01, -1.041946267791811e-01, -1.038385848727450e-01, -1.038385848727450e-01, -1.040209658294219e-01, -1.040209658294219e-01, -1.041753334166539e-01, -1.041753334166539e-01, -1.041753334166539e-01, -1.041753334166539e-01, -7.216426063139979e-02, -7.216426063139979e-02, -7.416168974444386e-02, -7.416168974444386e-02, -7.032299869748455e-02, -7.032299869748455e-02, -7.123823811545964e-02, -7.123823811545964e-02, -7.254733334271922e-02, -7.254733334271922e-02, -7.254733334271922e-02, -7.254733334271922e-02, -3.635244178310151e-02, -3.635244178310151e-02, -4.691227044010546e-02, -4.691227044010546e-02, -3.516023857493722e-02, -3.516023857493722e-02, -1.034414929011564e-01, -1.034414929011564e-01, -3.885625024391124e-02, -3.885625024391124e-02, -3.885625024391124e-02, -3.885625024391124e-02, -2.991869915727531e-03, -2.991869915727531e-03, -3.728142623462673e-03, -3.728142623462673e-03, -2.904293202821802e-03, -2.904293202821802e-03, -2.931496895771318e-02, -2.931496895771318e-02, -3.455565669161976e-03, -3.455565669161976e-03, -3.455565669161976e-03, -3.455565669161976e-03, -7.228014132656395e-02, -7.228014132656395e-02, -7.214252609140198e-02, -7.214252609140198e-02, -7.219102231387824e-02, -7.219102231387824e-02, -7.223090852814047e-02, -7.223090852814047e-02, -7.221095028602822e-02, -7.221095028602822e-02, -7.221095028602822e-02, -7.221095028602822e-02, -7.162424753796288e-02, -7.162424753796288e-02, -6.805063625580848e-02, -6.805063625580848e-02, -6.911678685176667e-02, -6.911678685176667e-02, -7.013797514828503e-02, -7.013797514828503e-02, -6.962078105476879e-02, -6.962078105476879e-02, -6.962078105476879e-02, -6.962078105476879e-02, -7.531574147533927e-02, -7.531574147533927e-02, -5.116604606605778e-02, -5.116604606605778e-02, -5.468215823799195e-02, -5.468215823799195e-02, -6.036098126835922e-02, -6.036098126835922e-02, -5.745902535512681e-02, -5.745902535512681e-02, -5.745902535512680e-02, -5.745902535512680e-02, -6.616548427744066e-02, -6.616548427744066e-02, -2.213468299486150e-02, -2.213468299486150e-02, -2.626315002784415e-02, -2.626315002784415e-02, -5.958938825551383e-02, -5.958938825551383e-02, -3.283140955361156e-02, -3.283140955361156e-02, -3.283140955361156e-02, -3.283140955361156e-02, -8.347215711062181e-03, -8.347215711062181e-03, -1.057440554935293e-03, -1.057440554935293e-03, -2.166425343390089e-03, -2.166425343390089e-03, -3.190300021833180e-02, -3.190300021833180e-02, -3.214922788643590e-03, -3.214922788643590e-03, -3.214922788643585e-03, -3.214922788643585e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
