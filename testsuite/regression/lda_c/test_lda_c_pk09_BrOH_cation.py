
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pk09_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pk09", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.574537144268974e-01, -1.574537702474935e-01, -1.574540355930390e-01, -1.574532047994227e-01, -1.574536376675132e-01, -1.574536376675132e-01, -1.109920713546948e-01, -1.109921325582163e-01, -1.109942420827890e-01, -1.109959590995207e-01, -1.109928172135485e-01, -1.109928172135485e-01, -6.702532962746972e-02, -6.699831977786187e-02, -6.634906172990036e-02, -6.654990821548688e-02, -6.629803121182530e-02, -6.629803121182530e-02, -3.788672715176423e-02, -3.815452766361400e-02, -7.071934391585338e-02, -3.297840287491137e-02, -2.760955683294314e-02, -2.760955683294304e-02, -3.467730927110081e-03, -3.634489893199002e-03, -1.474192578453879e-02, -2.063411870795286e-03, -2.206163053226217e-03, -2.206163053225649e-03, -1.223950732414071e-01, -1.224002143806704e-01, -1.223953291462934e-01, -1.223998679294440e-01, -1.223976689130487e-01, -1.223976689130487e-01, -9.484750112183161e-02, -9.504702638631068e-02, -9.470079255874821e-02, -9.487803026160198e-02, -9.502695691980752e-02, -9.502695691980752e-02, -6.382971500449730e-02, -6.580016123216782e-02, -6.194665963673957e-02, -6.286408979378960e-02, -6.408436227376538e-02, -6.408436227376238e-02, -2.702691799842065e-02, -3.795576683564720e-02, -2.579783110023345e-02, -9.431504561339453e-02, -2.948134296676440e-02, -2.948134296676440e-02, -1.605390479943652e-03, -2.018942450764548e-03, -1.555470843232478e-03, -2.034910837861520e-02, -1.773075267241463e-03, -1.773075267241463e-03, -6.394385314021642e-02, -6.380784806684857e-02, -6.385577681210608e-02, -6.389520530074652e-02, -6.387547666849176e-02, -6.387547666849176e-02, -6.329553227028067e-02, -5.974437201793879e-02, -6.080696938699583e-02, -6.182242120608113e-02, -6.130855519572540e-02, -6.130855519572540e-02, -6.693500584372000e-02, -4.243740827038175e-02, -4.611505491587686e-02, -5.197931338116493e-02, -4.899872155756248e-02, -4.899872155756210e-02, -5.785660074066226e-02, -1.432669061988931e-02, -1.767465188925261e-02, -5.118196055777140e-02, -2.354826983106639e-02, -2.354826983106698e-02, -4.760489447668159e-03, -5.622179113828283e-04, -1.151966888382621e-03, -2.271871523467362e-02, -1.661743621652455e-03, -1.661743621652450e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pk09_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pk09", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.641247077313817e-01, -1.641250899263729e-01, -1.641246242648184e-01, -1.641252687632719e-01, -1.641255293997853e-01, -1.641248168682849e-01, -1.641233330813436e-01, -1.641255939832297e-01, -1.641229418226761e-01, -1.641267247709904e-01, -1.641229418226761e-01, -1.641267247709904e-01, -1.204433448457695e-01, -1.204462394925715e-01, -1.204432007898461e-01, -1.204465061746384e-01, -1.204491503589721e-01, -1.204447826710615e-01, -1.204501750810247e-01, -1.204471975661658e-01, -1.204852438403774e-01, -1.204058773950753e-01, -1.204852438403774e-01, -1.204058773950753e-01, -7.533144396474346e-02, -7.480837655512217e-02, -7.536338358910113e-02, -7.472118655039466e-02, -7.390935712547717e-02, -7.481472946003574e-02, -7.471120999795408e-02, -7.442699238288979e-02, -7.041084655392997e-02, -7.901258174264549e-02, -7.041084655392997e-02, -7.901258174264549e-02, -4.562113139962091e-02, -4.271624005428578e-02, -4.614843437067290e-02, -4.281822119856448e-02, -8.135934692447827e-02, -7.675712511435767e-02, -3.919248749117202e-02, -3.829092472044365e-02, -2.600874641992671e-02, -7.280954614578321e-02, -2.600874641992742e-02, -7.280954614578641e-02, -4.724574845513410e-03, -4.394089739709907e-03, -4.975838814675987e-03, -4.579931742457590e-03, -1.897779156050383e-02, -1.746553218110125e-02, -2.700932573933755e-03, -2.750745785483610e-03, -2.502554883827170e-03, -4.990479084009113e-03, -2.502554883826418e-03, -4.990479084009313e-03, -1.317031995346212e-01, -1.317589874992914e-01, -1.317074860483850e-01, -1.317647480824959e-01, -1.317029307445629e-01, -1.317597570607628e-01, -1.317077914002364e-01, -1.317637648527871e-01, -1.317052241311688e-01, -1.317620357122187e-01, -1.317052241311688e-01, -1.317620357122187e-01, -1.040426860384806e-01, -1.040519293480113e-01, -1.042274643307624e-01, -1.042773487443612e-01, -1.040546910855993e-01, -1.037390494163685e-01, -1.042438159487204e-01, -1.039144280039243e-01, -1.038322033318672e-01, -1.046364642505209e-01, -1.038322033318672e-01, -1.046364642505209e-01, -7.154033813643174e-02, -7.187509905679430e-02, -7.380981802782173e-02, -7.375083871012648e-02, -7.205895168819421e-02, -6.762116492517699e-02, -7.282338457487079e-02, -6.875042976614620e-02, -6.896750814313991e-02, -7.546416878673985e-02, -6.896750814313392e-02, -7.546416878673656e-02, -3.240161387926513e-02, -3.189585767513504e-02, -4.435488536632214e-02, -4.397587437972762e-02, -3.220204420369153e-02, -2.953935207058376e-02, -1.034588912172456e-01, -1.035406557589911e-01, -3.670607748117660e-02, -3.332383768810863e-02, -3.670607748117660e-02, -3.332383768810863e-02, -2.168358890089360e-03, -2.083221476175744e-03, -2.689141860563939e-03, -2.645734207580554e-03, -2.123976707500739e-03, -2.001433751239160e-03, -2.473674741067610e-02, -2.449596254557723e-02, -2.985598258443928e-03, -2.088668269686233e-03, -2.985598258443936e-03, -2.088668269686233e-03, -7.207260193742561e-02, -7.158457313390988e-02, -7.193142156475382e-02, -7.143947339245930e-02, -7.198196231740678e-02, -7.148983862705199e-02, -7.202133781986438e-02, -7.153342244407632e-02, -7.200161029254161e-02, -7.151163961409263e-02, -7.200161029254161e-02, -7.151163961409263e-02, -7.135240105894512e-02, -7.093894710558196e-02, -6.766004005508930e-02, -6.714726901247381e-02, -6.879145898415734e-02, -6.825735203155178e-02, -6.980912945757677e-02, -6.937906045594100e-02, -6.927801587596730e-02, -6.882730075927680e-02, -6.927801587596730e-02, -6.882730075927680e-02, -7.508122630003779e-02, -7.486621975241858e-02, -4.925156745365586e-02, -4.875901222793711e-02, -5.341357947843056e-02, -5.248952455320618e-02, -5.947702585376145e-02, -5.890433271384363e-02, -5.600326727161522e-02, -5.603789706553247e-02, -5.600326727161389e-02, -5.603789706553021e-02, -6.580812212068951e-02, -6.501856824949447e-02, -1.777162541551481e-02, -1.758896480838002e-02, -2.213588496809051e-02, -2.102453073594071e-02, -5.912450353185889e-02, -5.759254341146785e-02, -2.959494614898393e-02, -2.708478091881258e-02, -2.959494614898470e-02, -2.708478091881308e-02, -6.331389706794512e-03, -6.053588964776924e-03, -7.446436723499581e-04, -7.432570997031054e-04, -1.574796218037008e-03, -1.482563696964221e-03, -2.767243986760370e-02, -2.695458744754275e-02, -2.703528522462162e-03, -1.976077744709859e-03, -2.703528522462204e-03, -1.976077744709536e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
