
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_upw92_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_upw92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.646283568940229e-01, -1.646284416541479e-01, -1.646288446355254e-01, -1.646275830131084e-01, -1.646282403500577e-01, -1.646282403500577e-01, -1.108762648196995e-01, -1.108763262586838e-01, -1.108784438938960e-01, -1.108801675180879e-01, -1.108770137536596e-01, -1.108770137536596e-01, -6.717551629252332e-02, -6.714846383073139e-02, -6.649818786295533e-02, -6.669938682202908e-02, -6.644498601608020e-02, -6.644498601608020e-02, -3.795330730265929e-02, -3.822134124291843e-02, -7.087112962675327e-02, -3.302858445743752e-02, -2.780111825871784e-02, -2.780111825871786e-02, -3.763708489298502e-03, -3.927057144119016e-03, -1.472060715954453e-02, -2.349940611922900e-03, -2.444254254306034e-03, -2.444254254306034e-03, -1.224985136993256e-01, -1.225038554625774e-01, -1.224987795981365e-01, -1.225034954750457e-01, -1.225012106517245e-01, -1.225012106517245e-01, -9.483282129399022e-02, -9.503011869909882e-02, -9.468775153969528e-02, -9.486300817420104e-02, -9.501026629627368e-02, -9.501026629627368e-02, -6.397355741134694e-02, -6.594834070016405e-02, -6.208455128861148e-02, -6.300475721382190e-02, -6.422738879678037e-02, -6.422738879678035e-02, -2.704322179034168e-02, -3.802448468769532e-02, -2.580182304199626e-02, -9.430632290589452e-02, -2.950838055444259e-02, -2.950838055444259e-02, -1.866818392857773e-03, -2.303700968519889e-03, -1.812707754766562e-03, -2.032408526097744e-02, -2.018157809526090e-03, -2.018157809526089e-03, -6.408797418894321e-02, -6.395163085528356e-02, -6.399967933600689e-02, -6.403920600633621e-02, -6.401942830376750e-02, -6.401942830376750e-02, -6.343799916272137e-02, -5.987615616437326e-02, -6.094217546362809e-02, -6.196074242669005e-02, -6.144532383273080e-02, -6.144532383273080e-02, -6.708507097219597e-02, -4.251769378018250e-02, -4.620410983936533e-02, -5.208495556221449e-02, -4.909550198661772e-02, -4.909550198661772e-02, -5.798200617212692e-02, -1.431307242416994e-02, -1.764267433309279e-02, -5.128493783588887e-02, -2.353679180932511e-02, -2.353679180932514e-02, -5.024503367542173e-03, -6.949339789431789e-04, -1.371767339779056e-03, -2.270591819598733e-02, -1.905214605700557e-03, -1.905214605700558e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_upw92_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_upw92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747589772749651e-01, -1.747593611753129e-01, -1.747589308127136e-01, -1.747595781691022e-01, -1.747600177247505e-01, -1.747593020219524e-01, -1.747572552973091e-01, -1.747595261944825e-01, -1.747571521737208e-01, -1.747609518700568e-01, -1.747571521737208e-01, -1.747609518700568e-01, -1.203638810679768e-01, -1.203667325117668e-01, -1.203637414745943e-01, -1.203669975261470e-01, -1.203696819386018e-01, -1.203653794427475e-01, -1.203707562425488e-01, -1.203678231725212e-01, -1.204051833494691e-01, -1.203270014789792e-01, -1.204051833494691e-01, -1.203270014789792e-01, -7.549628385590060e-02, -7.496659582113580e-02, -7.552903592877785e-02, -7.487870055146092e-02, -7.406598131451886e-02, -7.498326762623277e-02, -7.487533856031631e-02, -7.458741697940274e-02, -7.053147594337239e-02, -7.922246673452479e-02, -7.053147594337239e-02, -7.922246673452479e-02, -4.578283875822330e-02, -4.273323070088830e-02, -4.632005686643282e-02, -4.282763220003486e-02, -8.153081590338029e-02, -7.688618230522938e-02, -3.929901379150268e-02, -3.833847633810981e-02, -2.651408370411417e-02, -7.173463473471048e-02, -2.651408370411420e-02, -7.173463473471046e-02, -5.052944452544588e-03, -4.633666705300233e-03, -5.303688314088712e-03, -4.805875761122187e-03, -1.901571725106846e-02, -1.733650014800540e-02, -3.003554824038970e-03, -3.073293823834588e-03, -2.738264320704657e-03, -5.304976531963154e-03, -2.738264320704656e-03, -5.304976531963154e-03, -1.321713605092875e-01, -1.322260880347610e-01, -1.321760649772853e-01, -1.322322384869794e-01, -1.321711217022929e-01, -1.322268678390166e-01, -1.321763308418405e-01, -1.322312402699197e-01, -1.321735987620374e-01, -1.322293304139673e-01, -1.321735987620374e-01, -1.322293304139673e-01, -1.039252415906651e-01, -1.039344310748066e-01, -1.041079953319886e-01, -1.041575830571251e-01, -1.039379118241601e-01, -1.036240798891288e-01, -1.041250492546495e-01, -1.037975863147872e-01, -1.037151780188345e-01, -1.045146561763606e-01, -1.037151780188345e-01, -1.045146561763606e-01, -7.170132444063505e-02, -7.204118097329040e-02, -7.397334985525217e-02, -7.391356703557662e-02, -7.225724545657917e-02, -6.774873718274105e-02, -7.301839808020753e-02, -6.888311134434912e-02, -6.909032707160771e-02, -7.567294435083764e-02, -6.909032707160770e-02, -7.567294435083760e-02, -3.247357519517929e-02, -3.192551320561650e-02, -4.445155404123912e-02, -4.405326578585816e-02, -3.236164348804830e-02, -2.947317735828953e-02, -1.033475304150537e-01, -1.034288460005071e-01, -3.689996218560750e-02, -3.326979320371165e-02, -3.689996218560750e-02, -3.326979320371165e-02, -2.487334475605407e-03, -2.362254626070046e-03, -3.009901570255388e-03, -2.948868279859903e-03, -2.450029969396902e-03, -2.269254754961187e-03, -2.474173421817159e-02, -2.447649970614756e-02, -3.437224237255777e-03, -2.290366071078443e-03, -3.437224237255776e-03, -2.290366071078442e-03, -7.223988019891740e-02, -7.174447194025550e-02, -7.209870090827797e-02, -7.159925826393461e-02, -7.214925445600993e-02, -7.164965333143344e-02, -7.218860619036908e-02, -7.169329328912082e-02, -7.216889027531323e-02, -7.167148288819494e-02, -7.216889027531323e-02, -7.167148288819494e-02, -7.151885054767422e-02, -7.109891819922998e-02, -6.782185612782947e-02, -6.729942206432696e-02, -6.895575058930406e-02, -6.841210663627550e-02, -6.997420425604385e-02, -6.953684718420866e-02, -6.944246681625363e-02, -6.898390714065068e-02, -6.944246681625363e-02, -6.898390714065068e-02, -7.524427128823781e-02, -7.502652649767479e-02, -4.935734106340747e-02, -4.884520753988306e-02, -5.353546789241338e-02, -5.258036609809535e-02, -5.961319770994332e-02, -5.902508716160106e-02, -5.611920809155311e-02, -5.615488536009781e-02, -5.611920809155312e-02, -5.615488536009781e-02, -6.596765232268606e-02, -6.516178725693048e-02, -1.773334405201957e-02, -1.752982207110990e-02, -2.216397716904503e-02, -2.093448854526010e-02, -5.927113942944490e-02, -5.769681059078643e-02, -2.973724263058732e-02, -2.699907421676825e-02, -2.973724263058735e-02, -2.699907421676827e-02, -6.578015223316476e-03, -6.241398923443576e-03, -9.124155478324689e-04, -9.097819594660398e-04, -1.865168513211546e-03, -1.720412263673047e-03, -2.772311436469670e-02, -2.693668241818478e-02, -3.142168623372825e-03, -2.178986845043830e-03, -3.142168623372826e-03, -2.178986845043830e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
