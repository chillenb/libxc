
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ow_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.192480025369754e-02, -5.192480211220851e-02, -5.192481094973773e-02, -5.192478327515547e-02, -5.192479767939200e-02, -5.192479767939200e-02, -4.870959736856501e-02, -4.870960513833566e-02, -4.870987310822868e-02, -4.871009124302014e-02, -4.870967821742186e-02, -4.870967821742186e-02, -3.719583618455639e-02, -3.718315224283129e-02, -3.688619142446230e-02, -3.698069302883516e-02, -3.660788912302449e-02, -3.660788912302449e-02, -2.013615855544257e-02, -2.030336394613848e-02, -3.872044862211126e-02, -1.689312396517005e-02, -8.461124172001056e-03, -8.461124172001056e-03, -1.108308665390177e-03, -1.162503002522814e-03, -5.848965226083496e-03, -6.508421648040283e-04, -4.287403473380666e-04, -4.287403473380666e-04, -4.993613355816554e-02, -4.993659741528250e-02, -4.993615643947584e-02, -4.993656641850040e-02, -4.993636770046934e-02, -4.993636770046934e-02, -4.606272765436728e-02, -4.610398297213127e-02, -4.603196254626431e-02, -4.606876762107572e-02, -4.609812557064694e-02, -4.609812557064694e-02, -3.569955461783089e-02, -3.663573554181022e-02, -3.469571089882824e-02, -3.516643842161123e-02, -3.567287566504160e-02, -3.567287566504160e-02, -1.300903559041024e-02, -2.021996717740188e-02, -1.218931609608662e-02, -4.595137083638637e-02, -1.453221981459484e-02, -1.453221981459484e-02, -5.022362058917870e-04, -6.365135816859694e-04, -4.847503370055432e-04, -8.929989426254526e-03, -4.720017821442346e-04, -4.720017821442345e-04, -3.575443152522537e-02, -3.568847123908084e-02, -3.571173277760085e-02, -3.573086593789698e-02, -3.572129462785564e-02, -3.572129462785564e-02, -3.543855803742741e-02, -3.362856390787834e-02, -3.418370754994585e-02, -3.470376477413469e-02, -3.444205111461884e-02, -3.444205111461884e-02, -3.715581553370278e-02, -2.319694158248912e-02, -2.558653492697832e-02, -2.923720103188194e-02, -2.741412290513180e-02, -2.741412290513180e-02, -3.261256052609551e-02, -5.662287053059656e-03, -7.411700345524381e-03, -2.874787914817818e-02, -1.079535762479480e-02, -1.079535762479480e-02, -1.559066111850591e-03, -1.717521468438030e-04, -3.561767008033471e-04, -1.032896940408285e-02, -4.557296829061110e-04, -4.557296829061107e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ow_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.214677717721883e-02, -5.214717836197833e-02, -5.214664077403950e-02, -5.214731727617478e-02, -5.214735895470170e-02, -5.214661103054993e-02, -5.214577974151620e-02, -5.214815289103460e-02, -5.214499067621472e-02, -5.214896144929058e-02, -5.214499067621472e-02, -5.214896144929058e-02, -4.990849045390151e-02, -4.991247806300196e-02, -4.990821311571216e-02, -4.991276654808427e-02, -4.991369010730875e-02, -4.990767334197794e-02, -4.991288869671566e-02, -4.990878702431500e-02, -4.996523464347516e-02, -4.985590145872309e-02, -4.996523464347516e-02, -4.985590145872309e-02, -4.127059072796836e-02, -4.038768998745241e-02, -4.136139515993918e-02, -4.027736689237348e-02, -3.980133247169823e-02, -4.133135405800449e-02, -4.088187331194163e-02, -4.040170997467320e-02, -3.370972444970523e-02, -4.817760528501988e-02, -3.370972444970523e-02, -4.817760528501988e-02, -2.671269620990459e-02, -2.209210046555838e-02, -2.727169752008263e-02, -2.196857383666011e-02, -4.614051073745429e-02, -3.844633506983568e-02, -2.142402050650912e-02, -2.003439305230172e-02, -3.147918793651510e-03, -5.663924911112211e-02, -3.147918793651508e-03, -5.663924911112211e-02, -1.691406094046986e-03, -1.285283022268484e-03, -1.807967164484884e-03, -1.324470211838739e-03, -8.619339076336476e-03, -6.698121748083196e-03, -8.331077511806057e-04, -8.987534272829081e-04, -2.197058119209808e-04, -2.467252372188833e-03, -2.197058119209809e-04, -2.467252372188833e-03, -5.074324123422352e-02, -5.081501958968399e-02, -5.074261956057439e-02, -5.081629221966846e-02, -5.074258973878097e-02, -5.081570395427938e-02, -5.074342620253781e-02, -5.081544113819723e-02, -5.074274769864526e-02, -5.081584192805018e-02, -5.074274769864526e-02, -5.081584192805018e-02, -4.796401249345528e-02, -4.797797851861287e-02, -4.796427367228394e-02, -4.803956463493063e-02, -4.818710249223962e-02, -4.770981412562427e-02, -4.822489527256247e-02, -4.772729607062064e-02, -4.739394220682388e-02, -4.860791974920404e-02, -4.739394220682388e-02, -4.860791974920404e-02, -3.924007048538718e-02, -3.980791554380810e-02, -4.039200336212016e-02, -4.029223461515415e-02, -4.257899334578168e-02, -3.504835214976334e-02, -4.265587683777995e-02, -3.574800601820793e-02, -3.437999231922795e-02, -4.536462143558469e-02, -3.437999231922795e-02, -4.536462143558468e-02, -1.664842606520611e-02, -1.590751754737108e-02, -2.467313304502163e-02, -2.406916170670328e-02, -1.737731368168699e-02, -1.353387470410425e-02, -4.782554049804614e-02, -4.794943506491334e-02, -2.077132880212981e-02, -1.572022610857263e-02, -2.077132880212981e-02, -1.572022610857263e-02, -7.295217501340314e-04, -6.132717285015956e-04, -8.754565824107338e-04, -8.180682677922767e-04, -7.358538043751460e-04, -5.682022721729615e-04, -1.156699510916680e-02, -1.123853848729711e-02, -1.378106549424905e-03, -3.378110107979554e-04, -1.378106549424905e-03, -3.378110107979553e-04, -3.998728980613167e-02, -3.915958149463240e-02, -3.993263669927394e-02, -3.909814556373787e-02, -3.995325171941068e-02, -3.911851030352829e-02, -3.996647344479959e-02, -3.913890896061815e-02, -3.995981707653831e-02, -3.912874702144767e-02, -3.995981707653831e-02, -3.912874702144767e-02, -3.964507254481037e-02, -3.894332451002082e-02, -3.811020690960794e-02, -3.723793316842090e-02, -3.862998518960138e-02, -3.772173386807751e-02, -3.900671334075332e-02, -3.827580964970333e-02, -3.879029822341366e-02, -3.802405179510586e-02, -3.879029822341366e-02, -3.802405179510586e-02, -4.097420785088111e-02, -4.061122524174927e-02, -2.792427471474152e-02, -2.712068244625247e-02, -3.074331589721915e-02, -2.921104478660669e-02, -3.405315733327333e-02, -3.308582799450406e-02, -3.176058671874699e-02, -3.181862161402672e-02, -3.176058671874699e-02, -3.181862161402671e-02, -3.742102632046003e-02, -3.607810650730294e-02, -7.463542252327232e-03, -7.231860947486036e-03, -1.030280845949004e-02, -8.836165358877029e-03, -3.441080555388552e-02, -3.182836017219311e-02, -1.556366426646783e-02, -1.202509818422114e-02, -1.556366426646783e-02, -1.202509818422114e-02, -2.239098191040581e-03, -1.905328943427471e-03, -2.299962698950121e-04, -2.276436312860430e-04, -5.464404401205291e-04, -4.139572819196969e-04, -1.361054167399767e-02, -1.260485374396299e-02, -1.219844707752465e-03, -3.445315815227397e-04, -1.219844707752463e-03, -3.445315815227395e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
