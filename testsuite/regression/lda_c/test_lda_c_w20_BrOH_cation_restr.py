
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_w20_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_w20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.653590797407296e-01, -1.653591636154094e-01, -1.653595623855701e-01, -1.653583139535160e-01, -1.653589644324927e-01, -1.653589644324927e-01, -1.119099886252970e-01, -1.119100508280898e-01, -1.119121946466518e-01, -1.119139395488962e-01, -1.119107579036227e-01, -1.119107579036227e-01, -6.694584986755930e-02, -6.691850995945170e-02, -6.625300101791891e-02, -6.645703251628711e-02, -6.641375881619686e-02, -6.641375881619686e-02, -3.778120234372752e-02, -3.805478831206147e-02, -7.080353245541439e-02, -3.296503074896995e-02, -3.494586281075570e-02, -3.494586281075570e-02, -3.521689726004645e-03, -3.689141277993367e-03, -1.498902234632327e-02, -2.166152222940335e-03, -2.641517503124888e-03, -2.641517503124888e-03, -1.236015214118220e-01, -1.236068641126445e-01, -1.236017875295417e-01, -1.236065038499427e-01, -1.236042188899160e-01, -1.236042188899160e-01, -9.551970455574524e-02, -9.572292397702394e-02, -9.537047184935850e-02, -9.555102647346608e-02, -9.570382770830325e-02, -9.570382770830325e-02, -6.366810422986470e-02, -6.568726758566015e-02, -6.180374785957669e-02, -6.273084901433049e-02, -6.405560451509124e-02, -6.405560451509124e-02, -2.716027486745731e-02, -3.780877079406455e-02, -2.600598067672381e-02, -9.497726566120436e-02, -2.962608192550006e-02, -2.962608192550006e-02, -1.740888410295369e-03, -2.124648628051440e-03, -1.695498170330889e-03, -2.057913817726491e-02, -1.981741933467146e-03, -1.981741933467146e-03, -6.378533761008627e-02, -6.364611468567240e-02, -6.369517933567673e-02, -6.373553153207852e-02, -6.371534029417955e-02, -6.371534029417955e-02, -6.312163302422219e-02, -5.949847728884508e-02, -6.058069938195512e-02, -6.161623193490028e-02, -6.109189868095763e-02, -6.109189868095763e-02, -6.685240895642831e-02, -4.219453765966969e-02, -4.582086648666762e-02, -5.165598306682712e-02, -4.867844370832446e-02, -4.867844370832446e-02, -5.758202730343633e-02, -1.453853161300911e-02, -1.792318391279541e-02, -5.086524239142892e-02, -2.379444521278552e-02, -2.379444521278552e-02, -4.809866521950241e-03, -6.841052897757166e-04, -1.308420759466731e-03, -2.293029609913300e-02, -1.856531414028421e-03, -1.856531414028420e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_w20_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_w20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.753840202373451e-01, -1.753841047254815e-01, -1.753845064122253e-01, -1.753832488491617e-01, -1.753839040857467e-01, -1.753839040857467e-01, -1.215163052372843e-01, -1.215163680348708e-01, -1.215185323521096e-01, -1.215202939374269e-01, -1.215170818714786e-01, -1.215170818714786e-01, -7.520790698155075e-02, -7.517897508405869e-02, -7.447440183180315e-02, -7.469047328322641e-02, -7.464465068478479e-02, -7.464465068478479e-02, -4.383570212592498e-02, -4.413425469921159e-02, -7.927996008117646e-02, -3.856530561876466e-02, -4.073649472612540e-02, -4.073649472612540e-02, -4.585972204094436e-03, -4.805136358340371e-03, -1.845088898475979e-02, -2.783359747759604e-03, -3.418614911068946e-03, -3.418614911068946e-03, -1.333029702831973e-01, -1.333083522893672e-01, -1.333032383587289e-01, -1.333079893763116e-01, -1.333056876063336e-01, -1.333056876063336e-01, -1.048903238243149e-01, -1.050977881271805e-01, -1.047379471800077e-01, -1.049223027310819e-01, -1.050782947530114e-01, -1.050782947530114e-01, -7.173214799968503e-02, -7.387499111562863e-02, -6.974884271783463e-02, -7.073565796578711e-02, -7.214380238928200e-02, -7.214380238928200e-02, -3.216714811305016e-02, -4.386579017982271e-02, -3.088700300915610e-02, -1.043363478148522e-01, -3.489234141240252e-02, -3.489234141240252e-02, -2.225145509696986e-03, -2.728212301872210e-03, -2.166713894131115e-03, -2.481978089917040e-02, -2.539230191821350e-03, -2.539230191821350e-03, -7.185670973007191e-02, -7.170878186272586e-02, -7.176091719383834e-02, -7.180379243999209e-02, -7.178233899780259e-02, -7.178233899780259e-02, -7.115127891350159e-02, -6.729034699429885e-02, -6.844533567769405e-02, -6.954911462826135e-02, -6.899039545622296e-02, -6.899039545622296e-02, -7.510902086491796e-02, -4.864198898133262e-02, -5.257625062806499e-02, -5.887872768006389e-02, -5.566712235517898e-02, -5.566712235517898e-02, -6.524149274189041e-02, -1.793046858241182e-02, -2.181246078014241e-02, -5.802674541060420e-02, -2.842511493968283e-02, -2.842511493968283e-02, -6.248349844148563e-03, -8.894640054499776e-04, -1.677204425561390e-03, -2.745943702244463e-02, -2.375145359595595e-03, -2.375145359595595e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
