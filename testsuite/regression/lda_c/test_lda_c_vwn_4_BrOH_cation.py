
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.648405511596369e-01, -1.648406355698897e-01, -1.648410368878519e-01, -1.648397804731290e-01, -1.648404350966909e-01, -1.648404350966909e-01, -1.112951932850118e-01, -1.112952546389710e-01, -1.112973693422240e-01, -1.112990905791088e-01, -1.112959412529624e-01, -1.112959412529624e-01, -6.735723743906324e-02, -6.732984598313180e-02, -6.667096816657367e-02, -6.687475541504040e-02, -6.662710477456062e-02, -6.662710477456062e-02, -3.779371016237502e-02, -3.806376447258376e-02, -7.110208408371643e-02, -3.286366366494826e-02, -2.809333524940149e-02, -2.809333524940151e-02, -3.772406952204529e-03, -3.937680029820064e-03, -1.473440692206643e-02, -2.344373786049751e-03, -2.467132467837917e-03, -2.467132467837917e-03, -1.228894580735779e-01, -1.228947824120088e-01, -1.228897231054677e-01, -1.228944235984169e-01, -1.228921462290519e-01, -1.228921462290519e-01, -9.524162321833507e-02, -9.543950678584601e-02, -9.509611747019488e-02, -9.527190424100022e-02, -9.541961731877327e-02, -9.541961731877327e-02, -6.411165233857702e-02, -6.611359969087255e-02, -6.219923903037932e-02, -6.313189655767275e-02, -6.437544021540433e-02, -6.437544021540430e-02, -2.691306035627457e-02, -3.786142690166799e-02, -2.568877628972464e-02, -9.471349634356811e-02, -2.936621542093504e-02, -2.936621542093504e-02, -1.857766119624566e-03, -2.297743492751690e-03, -1.803497637459424e-03, -2.026952188818808e-02, -2.020520740544077e-03, -2.020520740544077e-03, -6.422768581301451e-02, -6.408943967149813e-02, -6.413815936181810e-02, -6.417823720213432e-02, -6.415818374322460e-02, -6.415818374322460e-02, -6.356859493624450e-02, -5.995578713631674e-02, -6.103721399992980e-02, -6.207038317620811e-02, -6.154758413578083e-02, -6.154758413578083e-02, -6.726556422383570e-02, -4.237990264174416e-02, -4.610072003618834e-02, -5.205353062595881e-02, -4.902518686961715e-02, -4.902518686961715e-02, -5.803422022472020e-02, -1.432719759731025e-02, -1.762273057132960e-02, -5.124331847947471e-02, -2.344839773417157e-02, -2.344839773417157e-02, -5.044655604485449e-03, -6.836987282187035e-04, -1.360409105081856e-03, -2.262233759500205e-02, -1.904416157795317e-03, -1.904416157795313e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.749293540173528e-01, -1.749297373832837e-01, -1.749293074201421e-01, -1.749299538753665e-01, -1.749303918699897e-01, -1.749296771634862e-01, -1.749276362595759e-01, -1.749299039954205e-01, -1.749275317312370e-01, -1.749313261381032e-01, -1.749275317312370e-01, -1.749313261381032e-01, -1.207696845168290e-01, -1.207725135706919e-01, -1.207695463046241e-01, -1.207727767892661e-01, -1.207754499504390e-01, -1.207711812359368e-01, -1.207765238162206e-01, -1.207736137740883e-01, -1.208106659938509e-01, -1.207330980026864e-01, -1.208106659938509e-01, -1.207330980026864e-01, -7.577548329316325e-02, -7.526374414414150e-02, -7.580585449628251e-02, -7.517757575843113e-02, -7.436198871597786e-02, -7.524748671408761e-02, -7.515295998893173e-02, -7.487495054993204e-02, -7.095480200060909e-02, -7.934631248223560e-02, -7.095480200060909e-02, -7.934631248223560e-02, -4.550982684685347e-02, -4.271320054399155e-02, -4.603160230738160e-02, -4.282679871395773e-02, -8.178794018988113e-02, -7.728218239267859e-02, -3.907408420073166e-02, -3.820329362203742e-02, -2.692195894772281e-02, -7.127609987220500e-02, -2.692195894772283e-02, -7.127609987220497e-02, -5.053358068791811e-03, -4.669072069191340e-03, -5.302539928467504e-03, -4.846477981229813e-03, -1.889657299505261e-02, -1.740522773570895e-02, -3.006497124425328e-03, -3.070559081235289e-03, -2.780149349485166e-03, -5.329070604303625e-03, -2.780149349485166e-03, -5.329070604303626e-03, -1.325308115029463e-01, -1.325852457930836e-01, -1.325354959336762e-01, -1.325913685128736e-01, -1.325305742327614e-01, -1.325860216789303e-01, -1.325357600260691e-01, -1.325903752920753e-01, -1.325330403732918e-01, -1.325884734360099e-01, -1.325330403732918e-01, -1.325884734360099e-01, -1.043614319096206e-01, -1.043704982862861e-01, -1.045444497853107e-01, -1.045933775816528e-01, -1.043719207417440e-01, -1.040623135294083e-01, -1.045589833014662e-01, -1.042359027720294e-01, -1.041566052490877e-01, -1.049454370937997e-01, -1.041566052490877e-01, -1.049454370937997e-01, -7.195612278982876e-02, -7.228317471870271e-02, -7.424580750799571e-02, -7.418813473762070e-02, -7.238786607054051e-02, -6.805974598690577e-02, -7.317198061342642e-02, -6.919727870207684e-02, -6.946074273463550e-02, -7.579847674382045e-02, -6.946074273463547e-02, -7.579847674382041e-02, -3.226802185722050e-02, -3.177741018084010e-02, -4.429239924010520e-02, -4.392712832181172e-02, -3.203292402058954e-02, -2.945269924946871e-02, -1.037841686593185e-01, -1.038643755085490e-01, -3.652588383261501e-02, -3.325970526078726e-02, -3.652588383261501e-02, -3.325970526078726e-02, -2.476487871907863e-03, -2.361634946563853e-03, -3.006942911233481e-03, -2.950878108765089e-03, -2.436213103253889e-03, -2.270232327728098e-03, -2.461831126626845e-02, -2.438300062039428e-02, -3.391128780523901e-03, -2.322286789831836e-03, -3.391128780523900e-03, -2.322286789831835e-03, -7.248047083730672e-02, -7.200365727577075e-02, -7.233738103935759e-02, -7.185676901442452e-02, -7.238857903592318e-02, -7.190778467702304e-02, -7.242854357518168e-02, -7.195185172783707e-02, -7.240852211851348e-02, -7.192982672705908e-02, -7.240852211851348e-02, -7.192982672705908e-02, -7.175207490146888e-02, -7.134824579234807e-02, -6.800145913799083e-02, -6.750153735761757e-02, -6.915091902139774e-02, -6.862990092164692e-02, -7.018640317715477e-02, -6.976665177418490e-02, -6.964679023668384e-02, -6.920700401534068e-02, -6.964679023668384e-02, -6.920700401534068e-02, -7.552770519428682e-02, -7.531736122085038e-02, -4.925178080775490e-02, -4.877727033481874e-02, -5.347298630482980e-02, -5.258098398157935e-02, -5.966333292728017e-02, -5.910772123940027e-02, -5.613680730597408e-02, -5.617032283846466e-02, -5.613680730597409e-02, -5.617032283846466e-02, -6.611122895210975e-02, -6.534228705842225e-02, -1.770612087114642e-02, -1.752527468875124e-02, -2.202493144099314e-02, -2.093495864563792e-02, -5.927922517717670e-02, -5.779406236057025e-02, -2.943240585857704e-02, -2.699498611463624e-02, -2.943240585857705e-02, -2.699498611463623e-02, -6.594876013988731e-03, -6.287597107093158e-03, -8.998825983681642e-04, -8.974817747944511e-04, -1.848632031499594e-03, -1.715913571642366e-03, -2.753958687298515e-02, -2.684033114383439e-02, -3.099018108696900e-03, -2.205495446189051e-03, -3.099018108696894e-03, -2.205495446189046e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
