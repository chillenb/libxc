
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_upw92_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_upw92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.646275768105884e-01, -1.646276505828616e-01, -1.646280340248414e-01, -1.646268248837452e-01, -1.646276152614568e-01, -1.646276152614568e-01, -1.108749507112199e-01, -1.108750104548887e-01, -1.108778243085426e-01, -1.108790093976663e-01, -1.108751027052376e-01, -1.108751027052376e-01, -6.702533180127901e-02, -6.700053955804350e-02, -6.635025497036022e-02, -6.653891875116608e-02, -6.701629193485195e-02, -6.701629193485195e-02, -3.896513366890050e-02, -3.921569146480817e-02, -7.145259806362894e-02, -3.312818591809556e-02, -3.904055484011502e-02, -3.904055484011502e-02, -5.822494194002015e-03, -6.044295272809089e-03, -1.705734319280871e-02, -3.154249834864996e-03, -5.993539192875421e-03, -5.993539192875421e-03, -1.224858250539154e-01, -1.224910000869356e-01, -1.224863711035867e-01, -1.224903947468088e-01, -1.224884554589697e-01, -1.224884554589697e-01, -9.480229084807723e-02, -9.499394242102846e-02, -9.472446540120726e-02, -9.487453849380964e-02, -9.503218122787574e-02, -9.503218122787574e-02, -6.371409761477853e-02, -6.568306559459161e-02, -6.247849930937865e-02, -6.347009952606809e-02, -6.460837055830930e-02, -6.460837055830930e-02, -2.801456497280888e-02, -3.910026353114048e-02, -2.781133623326963e-02, -9.427445838727563e-02, -3.036323401144089e-02, -3.036323401144089e-02, -3.058245465967880e-03, -3.428883514541574e-03, -2.674770074443408e-03, -2.113424598258119e-02, -3.166513024555850e-03, -3.166513024555850e-03, -6.445797559197373e-02, -6.433081869408333e-02, -6.437646839047623e-02, -6.441163590835725e-02, -6.439404006823887e-02, -6.439404006823887e-02, -6.368468776156491e-02, -6.036013612565291e-02, -6.137155548416874e-02, -6.227757484715217e-02, -6.181961608509926e-02, -6.181961608509926e-02, -6.682109054168268e-02, -4.356404709623223e-02, -4.706392476070043e-02, -5.227862281009143e-02, -4.964102990922618e-02, -4.964102990922618e-02, -5.799320447482306e-02, -1.620304751575658e-02, -1.976669518547984e-02, -5.105208100082460e-02, -2.483640328727328e-02, -2.483640328727328e-02, -6.612741298681817e-03, -1.086350479751462e-03, -1.939561682839602e-03, -2.415212990239693e-02, -2.751674165802710e-03, -2.751674165802714e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_upw92_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_upw92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.747583844937722e-01, -1.747584587055687e-01, -1.747588444320209e-01, -1.747576280870257e-01, -1.747584231737248e-01, -1.747584231737248e-01, -1.203639656408043e-01, -1.203640266125535e-01, -1.203668983055128e-01, -1.203681077533290e-01, -1.203641207591814e-01, -1.203641207591814e-01, -7.507253910112027e-02, -7.504655802125633e-02, -7.436491101968749e-02, -7.456270960515750e-02, -7.506306581360422e-02, -7.506306581360422e-02, -4.526915877633905e-02, -4.554006407503855e-02, -7.970419319496241e-02, -3.891833503745185e-02, -4.535071808126342e-02, -4.535071808126342e-02, -7.391094681572573e-03, -7.665325492435344e-03, -2.084082772046276e-02, -4.057071911553255e-03, -7.602608046124017e-03, -7.602608046124017e-03, -1.321858236766440e-01, -1.321910812594636e-01, -1.321863784371022e-01, -1.321904662637137e-01, -1.321884960419234e-01, -1.321884960419234e-01, -1.038984298806445e-01, -1.040955695111210e-01, -1.038183698401892e-01, -1.039727488534405e-01, -1.041349007915766e-01, -1.041349007915766e-01, -7.159800846984030e-02, -7.366518135136298e-02, -7.029909284727942e-02, -7.134161132324761e-02, -7.253729035617058e-02, -7.253729035617058e-02, -3.327729705571968e-02, -4.541527802742578e-02, -3.305130550012107e-02, -1.033553734500511e-01, -3.587857517239995e-02, -3.587857517239995e-02, -3.935778689539208e-03, -4.403485785110045e-03, -3.450235032540634e-03, -2.553371515312485e-02, -4.072557965674046e-03, -4.072557965674046e-03, -7.237937351072603e-02, -7.224584201800847e-02, -7.229378179024808e-02, -7.233071232653117e-02, -7.231223450265478e-02, -7.231223450265478e-02, -7.156710682657443e-02, -6.806905587838726e-02, -6.913429239422181e-02, -7.008774677191715e-02, -6.960590201960687e-02, -6.960590201960687e-02, -7.485848907690305e-02, -5.022297479434988e-02, -5.396986116133760e-02, -5.952242666517239e-02, -5.671808503536174e-02, -5.671808503536174e-02, -6.557252270736870e-02, -1.984613122453694e-02, -2.396911453279349e-02, -5.821934657254111e-02, -2.972514658142456e-02, -2.972514658142455e-02, -8.366281462612708e-03, -1.418266169113327e-03, -2.514255265392932e-03, -2.895502753652784e-02, -3.547746794539165e-03, -3.547746794539165e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
