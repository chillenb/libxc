
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc18_2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.347240233214848e-05, -1.347230421625939e-05, -1.347179425642009e-05, -1.347340242327622e-05, -1.347235119304714e-05, -1.347235119304714e-05, -3.199752476801292e-03, -3.199731839362397e-03, -3.198759998452909e-03, -3.198350787800652e-03, -3.199699973313833e-03, -3.199699973313833e-03, -4.806211004911130e-02, -4.788951180311905e-02, -4.356770946691584e-02, -4.478143417254694e-02, -4.799910854658240e-02, -4.799910854658240e-02, -7.758938434550465e-04, -8.075021007619177e-04, -8.844287362592354e-02, -2.945528401976196e-04, -7.852857513254823e-04, -7.852857513254823e-04, -1.343430498629255e-07, -1.543901162867043e-07, -1.036807252393679e-05, -1.483244092715998e-08, -1.496135334348212e-07, -1.496135334348212e-07, -9.381555426559267e-04, -9.376514630789370e-04, -9.381023410278474e-04, -9.377104125621393e-04, -9.378992906265235e-04, -9.378992906265235e-04, -2.001390670452487e-02, -1.954850911780424e-02, -2.020635434684961e-02, -1.983705121285238e-02, -1.945708031080033e-02, -1.945708031080033e-02, -2.965373367369627e-02, -3.952726725704789e-02, -2.477576490323470e-02, -2.861818047372111e-02, -3.378596585300528e-02, -3.378596585300528e-02, -1.166525140870432e-04, -7.927955258632379e-04, -1.122203038366280e-04, -2.135974281878662e-02, -1.804556067573425e-04, -1.804556067573425e-04, -1.331594200336494e-08, -1.987578906608038e-08, -8.368509162036411e-09, -2.809071633937169e-05, -1.503492342840230e-08, -1.503492342840230e-08, -3.305226126999437e-02, -3.244450108010015e-02, -3.266137676622020e-02, -3.282945305190660e-02, -3.274524806198928e-02, -3.274524806198928e-02, -2.952691732888944e-02, -1.823881915574932e-02, -2.110506650667252e-02, -2.406388002062015e-02, -2.251860212353904e-02, -2.251860212353904e-02, -4.665760931141782e-02, -1.587177328876393e-03, -2.681190557002160e-03, -5.728080717385608e-03, -3.911767748837175e-03, -3.911767748837174e-03, -1.298355851107430e-02, -8.237057639432841e-06, -2.043837654329237e-05, -4.799696619474631e-03, -6.234847183301281e-05, -6.234847183301283e-05, -2.162666503538985e-07, -4.078893786213549e-10, -2.796104522689709e-09, -5.413417460796629e-05, -9.229009952849429e-09, -9.229009952849389e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc18_2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.451752059856620e-09, 1.451730916619492e-09, 1.451621026612433e-09, 1.451967580689187e-09, 1.451741039742249e-09, 1.451741039742249e-09, 7.807809908795901e-05, 7.807711603957017e-05, 7.803082981143090e-05, 7.801134408567491e-05, 7.807559813662422e-05, 7.807559813662422e-05, -1.041801899706041e-01, -1.038090740758126e-01, -9.444574154976128e-02, -9.708811776261472e-02, -1.040447533688813e-01, -1.040447533688813e-01, -1.556548158264046e-03, -1.620157997506123e-03, -1.786976326271241e-01, -5.897967167922577e-04, -1.575447233622100e-03, -1.575447233622100e-03, -2.686862441100008e-07, -3.087804232634318e-07, -2.073700488977723e-05, -2.966488361432999e-08, -2.992272459429164e-07, -2.992272459429164e-07, 6.942892429188201e-06, 6.935485791022211e-06, 6.942110532950160e-06, 6.936351757603694e-06, 6.939126731047684e-06, 6.939126731047684e-06, 2.361232686848761e-03, 2.269461917469366e-03, 2.399474451554573e-03, 2.326239151839845e-03, 2.251554299304195e-03, 2.251554299304195e-03, -6.372370410874388e-02, -8.559057781137595e-02, -5.290048569423890e-02, -6.142392036712106e-02, -7.289767285905205e-02, -7.289767285905205e-02, -2.334137006421517e-04, -1.590559924415177e-03, -2.245411856809101e-04, 2.632041797591684e-03, -3.611710242969253e-04, -3.611710242969253e-04, -2.663188542524408e-08, -3.975158129253575e-08, -1.673701888432832e-08, -5.618774273042465e-05, -3.006984866519558e-08, -3.006984866519558e-08, -7.126993987695163e-02, -6.992106828195863e-02, -7.040245523661715e-02, -7.077548777664518e-02, -7.058860540619842e-02, -7.058860540619842e-02, -6.344204698820403e-02, -3.849459953767195e-02, -4.479034445992146e-02, -5.132442286877344e-02, -4.790821333302532e-02, -4.790821333302533e-02, -1.011535685566125e-01, -3.194034619884972e-03, -5.417629695616469e-03, -1.169707936283324e-02, -7.938991105363611e-03, -7.938991105363608e-03, -2.707615034365719e-02, -1.647465800486059e-05, -4.088009388175698e-05, -9.770916131188358e-03, -1.247280132982448e-04, -1.247280132982448e-04, -4.325336748766976e-07, -8.157787585736998e-10, -5.592209107925020e-09, -1.082917742886184e-04, -1.845802058709576e-08, -1.845802058709568e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
