
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rc04_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rc04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.252166318407723e-02, -8.252166648936003e-02, -8.252168220456425e-02, -8.252163300075646e-02, -8.252165862985382e-02, -8.252165862985382e-02, -7.688482409138084e-02, -7.688483762132774e-02, -7.688530401730112e-02, -7.688568362687288e-02, -7.688498339909501e-02, -7.688498339909501e-02, -5.728210546927764e-02, -5.726175582455350e-02, -5.676998049640098e-02, -5.692302983067062e-02, -5.670935925399235e-02, -5.670935925399235e-02, -2.992385492133158e-02, -3.020452082002639e-02, -5.993703393466864e-02, -2.486948931811755e-02, -2.159763665394840e-02, -2.159763665394840e-02, -1.581630741462034e-03, -1.661799001005021e-03, -8.430672067553185e-03, -9.230630394663047e-04, -9.568869455266906e-04, -9.568869455266906e-04, -7.902458080984823e-02, -7.902539243044537e-02, -7.902462112081550e-02, -7.902533785365187e-02, -7.902499057219646e-02, -7.902499057219646e-02, -7.230127490501373e-02, -7.237237405042606e-02, -7.224863911483999e-02, -7.231208488384704e-02, -7.236466848377858e-02, -7.236466848377858e-02, -5.479767767230284e-02, -5.634920537038366e-02, -5.325505664053013e-02, -5.401222293350810e-02, -5.499311900908248e-02, -5.499311900908252e-02, -1.897923757344844e-02, -2.998524758269664e-02, -1.782353233233078e-02, -7.210946739775705e-02, -2.138407006017688e-02, -2.138407006017688e-02, -7.133387855203428e-04, -9.026343396706344e-04, -6.903468026409097e-04, -1.290554019677235e-02, -7.761363788546952e-04, -7.761363788546956e-04, -5.488922472959796e-02, -5.478008547245545e-02, -5.481857997236775e-02, -5.485022075450383e-02, -5.483439192691759e-02, -5.483439192691759e-02, -5.436634080500533e-02, -5.138575131802414e-02, -5.229790203199811e-02, -5.315354803005009e-02, -5.272253258623197e-02, -5.272253258623197e-02, -5.721423158077907e-02, -3.463256213155931e-02, -3.841000702796779e-02, -4.424455654381147e-02, -4.131545801737853e-02, -4.131545801737853e-02, -4.972419613128298e-02, -8.121660148720773e-03, -1.069105903297233e-02, -4.347056189716061e-02, -1.573983731711555e-02, -1.573983731711553e-02, -2.219134674242710e-03, -2.432163259093889e-04, -5.074763849032680e-04, -1.498075711245258e-02, -7.280280010434088e-04, -7.280280010434080e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rc04_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rc04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.291663694338798e-02, -8.291684947146342e-02, -8.291656627527927e-02, -8.291692465304426e-02, -8.291695429940753e-02, -8.291655808574118e-02, -8.291609401873329e-02, -8.291735119729848e-02, -8.291568835435413e-02, -8.291779187582404e-02, -8.291568835435413e-02, -8.291779187582404e-02, -7.897378430790716e-02, -7.897588236551628e-02, -7.897364521038805e-02, -7.897604097269875e-02, -7.897676202458845e-02, -7.897359633625206e-02, -7.897653172928121e-02, -7.897437365567719e-02, -7.900372429871570e-02, -7.894619925494677e-02, -7.900372429871570e-02, -7.894619925494677e-02, -6.355458071259588e-02, -6.310136014671977e-02, -6.358896687686635e-02, -6.303251288219096e-02, -6.248807907057919e-02, -6.327297836443596e-02, -6.313511899101762e-02, -6.288875399107401e-02, -5.942443622628549e-02, -6.686857407365158e-02, -5.942443622628549e-02, -6.686857407365158e-02, -3.755705156845543e-02, -3.527097540282937e-02, -3.805277190261095e-02, -3.542714726360348e-02, -6.769501598415920e-02, -6.372858310566465e-02, -3.106036660392812e-02, -3.037855240237649e-02, -2.201852103899147e-02, -5.547297251829123e-02, -2.201852103899147e-02, -5.547297251829120e-02, -2.204027673839543e-03, -2.011432058996355e-03, -2.331382026421722e-03, -2.101902744292237e-03, -1.145826755135474e-02, -1.053747081158102e-02, -1.212279061323413e-03, -1.243305960106137e-03, -1.069758433071711e-03, -2.366238532620043e-03, -1.069758433071711e-03, -2.366238532620043e-03, -8.047987621211666e-02, -8.051773960398695e-02, -8.047994817667065e-02, -8.051881085991509e-02, -8.047955246575104e-02, -8.051812053148105e-02, -8.048034672109045e-02, -8.051833494465210e-02, -8.047981778443944e-02, -8.051837532455910e-02, -8.047981778443944e-02, -8.051837532455910e-02, -7.558564877943609e-02, -7.559295592683793e-02, -7.562339409862101e-02, -7.566279044447245e-02, -7.567458960450286e-02, -7.542488376801790e-02, -7.572795889791210e-02, -7.546760652750659e-02, -7.532143608741618e-02, -7.595665838854460e-02, -7.532143608741618e-02, -7.595665838854460e-02, -6.098006571297019e-02, -6.127060536234282e-02, -6.253132759661308e-02, -6.248017636804638e-02, -6.175015621154324e-02, -5.790136732473333e-02, -6.226232762035638e-02, -5.872886905468006e-02, -5.867549762866991e-02, -6.430783834123893e-02, -5.867549762866996e-02, -6.430783834123896e-02, -2.406540177845584e-02, -2.370511826169277e-02, -3.657011832538336e-02, -3.627157092169465e-02, -2.351538286917810e-02, -2.164632731053556e-02, -7.541162372974491e-02, -7.547643115234753e-02, -2.804212865638186e-02, -2.557142084643489e-02, -2.804212865638186e-02, -2.557142084643489e-02, -9.781865790648577e-04, -9.232168626544099e-04, -1.214176677364010e-03, -1.187054488882224e-03, -9.616749342836597e-04, -8.823069580721931e-04, -1.663035598966919e-02, -1.647213342803475e-02, -1.411010274636911e-03, -8.860988789171027e-04, -1.411010274636912e-03, -8.860988789171033e-04, -6.141970375964332e-02, -6.099615063157621e-02, -6.132364546072724e-02, -6.089668295607759e-02, -6.135822021305847e-02, -6.093110791874918e-02, -6.138472183802027e-02, -6.096126413714421e-02, -6.137144303411871e-02, -6.094620041963427e-02, -6.137144303411871e-02, -6.094620041963427e-02, -6.091770893839263e-02, -6.055886131914737e-02, -5.824373337442432e-02, -5.779945091222769e-02, -5.909236204339476e-02, -5.862918951784583e-02, -5.982791595483820e-02, -5.945476022944779e-02, -5.944420833439894e-02, -5.905323288286839e-02, -5.944420833439894e-02, -5.905323288286839e-02, -6.336063643674200e-02, -6.317432441639639e-02, -4.162417417994843e-02, -4.122426964885856e-02, -4.575013594158443e-02, -4.498346107238916e-02, -5.146638598515647e-02, -5.097844628576513e-02, -4.829871855262929e-02, -4.832787308779388e-02, -4.829871855262930e-02, -4.832787308779388e-02, -5.681909135940482e-02, -5.613660393171461e-02, -1.062503261764586e-02, -1.051426677959432e-02, -1.417354488452200e-02, -1.346899175980364e-02, -5.112308218964846e-02, -4.982165982330217e-02, -2.093407885443518e-02, -1.921854585964951e-02, -2.093407885443517e-02, -1.921854585964950e-02, -3.022784366360620e-03, -2.864592091798136e-03, -3.246131719987705e-04, -3.235026616034600e-04, -7.098724638912674e-04, -6.471511269165431e-04, -1.933755585438906e-02, -1.885145819598678e-02, -1.274255922616936e-03, -8.382121880402645e-04, -1.274255922616934e-03, -8.382121880402637e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
