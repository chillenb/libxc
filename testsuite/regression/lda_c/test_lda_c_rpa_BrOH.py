
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rpa_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.663629449219076e-01, -1.663630180044373e-01, -1.663633978613995e-01, -1.663622000253854e-01, -1.663629830132744e-01, -1.663629830132744e-01, -1.137603509864061e-01, -1.137604083393071e-01, -1.137631095947593e-01, -1.137642472641292e-01, -1.137604968980724e-01, -1.137604968980724e-01, -7.266977800366965e-02, -7.264673992811405e-02, -7.204198213613966e-02, -7.221753659957536e-02, -7.266137790028253e-02, -7.266137790028253e-02, -4.148910999546246e-02, -4.189707865242027e-02, -7.676859746847772e-02, -2.995927072276912e-02, -4.161249418303512e-02, -4.161249418303512e-02, 8.933732934848226e-01, 8.354414840527855e-01, 7.195686664804701e-02, 2.474228608584384e+00, 8.482239297389234e-01, 8.482239297389234e-01, -1.249688830461214e-01, -1.249739043213618e-01, -1.249694128708760e-01, -1.249733169656959e-01, -1.249714352953978e-01, -1.249714352953978e-01, -9.847212380725771e-02, -9.865263631816043e-02, -9.839883458254503e-02, -9.854016701304706e-02, -9.868865803512752e-02, -9.868865803512752e-02, -6.957852620835182e-02, -7.142044448657711e-02, -6.841534912657077e-02, -6.934933075945929e-02, -7.041666558729792e-02, -7.041666558729792e-02, -1.455122000669242e-02, -4.170981764048454e-02, -1.377447253788480e-02, -9.797520334803630e-02, -2.250120364396354e-02, -2.250120364396354e-02, 2.596312124467022e+00, 2.169608883895269e+00, 3.190115104804911e+00, 2.468243758141256e-02, 2.459269697699871e+00, 2.459269697699871e+00, -7.027590658870844e-02, -7.015683716551679e-02, -7.019958980143556e-02, -7.023252061216913e-02, -7.021604442254045e-02, -7.021604442254045e-02, -6.955091281793581e-02, -6.640380205260617e-02, -6.736728489565422e-02, -6.822556450984320e-02, -6.779226334910995e-02, -6.779226334910995e-02, -7.247994864309089e-02, -4.823964661342917e-02, -5.260370480095827e-02, -5.837270811600621e-02, -5.553971758065063e-02, -5.553971758065063e-02, -6.412188731694227e-02, 8.635897367528521e-02, 3.746460194361760e-02, -5.707364052626050e-02, -2.720378831118000e-04, -2.720378831118000e-04, 7.089234356653679e-01, 1.162249066207549e+01, 5.143492324752119e+00, 3.523018906122131e-03, 3.055204418011742e+00, 3.055204418011749e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rpa_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.763990331939801e-01, -1.763991069106127e-01, -1.763994900633972e-01, -1.763982818342725e-01, -1.763990716158480e-01, -1.763990716158480e-01, -1.228696428572514e-01, -1.228697019551118e-01, -1.228724853937398e-01, -1.228736576742308e-01, -1.228697932082694e-01, -1.228697932082694e-01, -8.014739752378272e-02, -8.012367516860337e-02, -7.950153482303912e-02, -7.968201791771554e-02, -8.013874773659956e-02, -8.013874773659956e-02, -5.182319128021268e-02, -5.212556587771695e-02, -8.438901079695096e-02, -4.388371469641637e-02, -5.191445842091850e-02, -5.191445842091850e-02, 4.640221336486517e-01, 4.315086866391371e-01, 1.266209204663803e-02, 1.367825425139436e+00, 4.386768396816545e-01, 4.386768396816545e-01, -1.343806610103112e-01, -1.343858014824218e-01, -1.343812034128867e-01, -1.343852001845999e-01, -1.343832738475284e-01, -1.343832738475284e-01, -1.070385103780683e-01, -1.072263362463419e-01, -1.069622460780007e-01, -1.071093127056722e-01, -1.072638149209623e-01, -1.072638149209623e-01, -7.698041427007955e-02, -7.886335962539194e-02, -7.579865476338736e-02, -7.674707401073926e-02, -7.783558846228056e-02, -7.783558846228056e-02, -3.446106403433739e-02, -5.198655933896041e-02, -3.400747961860676e-02, -1.065213528200062e-01, -3.920531367667927e-02, -3.920531367667927e-02, 1.438490423947676e+00, 1.191912401889216e+00, 1.783342367340942e+00, -1.264310705972008e-02, 1.359172971471869e+00, 1.359172971471869e+00, -7.769176956301846e-02, -7.757017310715467e-02, -7.761382656493665e-02, -7.764745623889990e-02, -7.763062984691003e-02, -7.763062984691003e-02, -7.695228945464870e-02, -7.377096341508918e-02, -7.473945893183971e-02, -7.560644150904364e-02, -7.516827003420039e-02, -7.516827003420039e-02, -7.995197730307337e-02, -5.706445702628025e-02, -6.074363805849941e-02, -6.596030947635566e-02, -6.335048709746159e-02, -6.335048709746159e-02, -7.150000872623800e-02, 2.033584253581803e-02, -5.762622164422061e-03, -6.475259156454281e-02, -2.631662637881350e-02, -2.631662637881351e-02, 3.607520253782740e-01, 6.777912812605888e+00, 2.927554875215070e+00, -2.420404785171252e-02, 1.704839499250847e+00, 1.704839499250851e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
