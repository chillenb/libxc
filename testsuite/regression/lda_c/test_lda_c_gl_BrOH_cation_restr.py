
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.954925023074922e-01, -1.954925948954538e-01, -1.954930350915986e-01, -1.954916569666074e-01, -1.954923750205052e-01, -1.954923750205052e-01, -1.355605472674058e-01, -1.355606178310778e-01, -1.355630498062678e-01, -1.355650292442794e-01, -1.355614199468144e-01, -1.355614199468144e-01, -8.318943539851480e-02, -8.315588389577025e-02, -8.233814654832831e-02, -8.258905833083895e-02, -8.253585722207685e-02, -8.253585722207685e-02, -4.540823130907218e-02, -4.577785329917046e-02, -8.789138585632714e-02, -3.889474106684299e-02, -4.157360591071219e-02, -4.157360591071219e-02, -3.297091552171815e-03, -3.461110938890415e-03, -1.561272333882928e-02, -1.946215407729699e-03, -2.426676053877869e-03, -2.426676053877869e-03, -1.487981141725054e-01, -1.488041520164828e-01, -1.487984149152764e-01, -1.488037448800503e-01, -1.488011626230337e-01, -1.488011626230337e-01, -1.168848291435161e-01, -1.171178604194571e-01, -1.167136707018946e-01, -1.169207493469881e-01, -1.170959649995723e-01, -1.170959649995723e-01, -7.914287228081454e-02, -8.164144426756854e-02, -7.681882182071262e-02, -7.797659595624991e-02, -7.962384602988987e-02, -7.962384602988987e-02, -3.109688216638623e-02, -4.544548172942189e-02, -2.956466254263650e-02, -1.162625548485939e-01, -3.439447872844009e-02, -3.439447872844009e-02, -1.512174768708569e-03, -1.903896599147056e-03, -1.466116009047050e-03, -2.250747657936597e-02, -1.757932371460547e-03, -1.757932371460547e-03, -7.928845935594395e-02, -7.911555720358464e-02, -7.917650143458764e-02, -7.922661524396470e-02, -7.920154049576378e-02, -7.920154049576378e-02, -7.846337649496178e-02, -7.392182479973461e-02, -7.528508733931034e-02, -7.658414518914672e-02, -7.592703315381197e-02, -7.592703315381197e-02, -8.307475114486905e-02, -5.135229154345664e-02, -5.619312148055829e-02, -6.386757066326926e-02, -5.997083045108873e-02, -5.997083045108873e-02, -7.149339764841268e-02, -1.507889486736432e-02, -1.917367512595492e-02, -6.283684052799030e-02, -2.665582247834095e-02, -2.665582247834097e-02, -4.558822312066346e-03, -5.203764868029725e-04, -1.082476079262122e-03, -2.553050047908256e-02, -1.629994034880409e-03, -1.629994034887980e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.065588793350034e-01, -2.065589720163619e-01, -2.065594126565454e-01, -2.065580331413797e-01, -2.065587519196168e-01, -2.065587519196168e-01, -1.464580801875665e-01, -1.464581511781800e-01, -1.464605978673486e-01, -1.464625892806043e-01, -1.464589581470088e-01, -1.464589581470088e-01, -9.332812217118222e-02, -9.329361678577952e-02, -9.245233884609783e-02, -9.271053374624853e-02, -9.265579285389028e-02, -9.265579285389028e-02, -5.358916824145050e-02, -5.399018996194371e-02, -9.815489377051015e-02, -4.646311037955357e-02, -4.940805396466082e-02, -4.940805396466082e-02, -4.340379084522333e-03, -4.553508268456982e-03, -1.972895727620816e-02, -2.575211325759840e-03, -3.205053310509275e-03, -3.205053310509275e-03, -1.597618363556449e-01, -1.597678988213247e-01, -1.597621383249188e-01, -1.597674900247714e-01, -1.597648972379931e-01, -1.597648972379931e-01, -1.276313112798325e-01, -1.278667889587401e-01, -1.274583452014207e-01, -1.276676096814837e-01, -1.278446643949678e-01, -1.278446643949678e-01, -8.915948679425839e-02, -9.173513103945237e-02, -8.675851486590537e-02, -8.795526186047285e-02, -8.965573776530532e-02, -8.965573776530532e-02, -3.776091733646289e-02, -5.362959844316964e-02, -3.602539320669786e-02, -1.270024208949328e-01, -4.146624773967349e-02, -4.146624773967349e-02, -2.004251076939284e-03, -2.519625738378213e-03, -1.943551834378999e-03, -2.790355669742668e-02, -2.327765388619264e-03, -2.327765388619264e-03, -8.930972085554045e-02, -8.913129764330217e-02, -8.919419111218561e-02, -8.924590516025727e-02, -8.922003001592467e-02, -8.922003001592467e-02, -8.845803878821348e-02, -8.375802640518119e-02, -8.517108063240011e-02, -8.651577665965403e-02, -8.583579547412992e-02, -8.583579547412992e-02, -9.321017352310891e-02, -5.999944104452702e-02, -6.516472736393789e-02, -7.326853565433690e-02, -6.916575496844504e-02, -6.916575496844504e-02, -8.123584634155133e-02, -1.908454200414610e-02, -2.398382624201790e-02, -7.218555667959306e-02, -3.270443133637546e-02, -3.270443133637546e-02, -5.973450564846443e-03, -6.923989607115089e-04, -1.437129093351945e-03, -3.140994285390795e-02, -2.159423629146810e-03, -2.159423629146397e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
