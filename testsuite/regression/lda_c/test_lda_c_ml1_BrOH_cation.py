
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ml1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.893552527591898e-02, -9.893552950765822e-02, -9.893554962698278e-02, -9.893548663577245e-02, -9.893551945027289e-02, -9.893551945027289e-02, -9.199661079972657e-02, -9.199662729422911e-02, -9.199719584629801e-02, -9.199765859558218e-02, -9.199680789324442e-02, -9.199680789324442e-02, -6.855723683703926e-02, -6.853333041955949e-02, -6.795504200262870e-02, -6.813482885928719e-02, -6.790106395632353e-02, -6.790106395632353e-02, -3.666162467402569e-02, -3.698688089646360e-02, -7.169300924228290e-02, -3.075431010674965e-02, -2.482939811931298e-02, -2.482939811931298e-02, -2.164343980167726e-03, -2.271203051306687e-03, -1.097917854711487e-02, -1.275120092490938e-03, -1.184014641293597e-03, -1.184014641293597e-03, -9.461165276919764e-02, -9.461264735436729e-02, -9.461170221366973e-02, -9.461258041692207e-02, -9.461215491772278e-02, -9.461215491772278e-02, -8.643746162037426e-02, -8.652327899866823e-02, -8.637398651798506e-02, -8.645056048906695e-02, -8.651428755939915e-02, -8.651428755939915e-02, -6.563876670008438e-02, -6.746025654237438e-02, -6.383368949123683e-02, -6.472057603868198e-02, -6.587605831585948e-02, -6.587605831585949e-02, -2.379663788217444e-02, -3.674038974828393e-02, -2.240642337441000e-02, -8.620601723592962e-02, -2.663188196441118e-02, -2.663188196441118e-02, -9.880478372136440e-04, -1.247281486210174e-03, -9.559776363815808e-04, -1.649671642110553e-02, -1.039124308411915e-03, -1.039124308411915e-03, -6.574617502718905e-02, -6.561815645217413e-02, -6.566330832255482e-02, -6.570042187137985e-02, -6.568185502278714e-02, -6.568185502278714e-02, -6.513297078742700e-02, -6.164418227000835e-02, -6.271073779669602e-02, -6.371208864547812e-02, -6.320756413650093e-02, -6.320756413650093e-02, -6.847732845375637e-02, -4.215128748071494e-02, -4.654062931253920e-02, -5.332092495355637e-02, -4.991626815832106e-02, -4.991626815832106e-02, -5.970368370732649e-02, -1.060211440790513e-02, -1.378430099975618e-02, -5.242051278374689e-02, -1.991008331338042e-02, -1.991008331338041e-02, -3.018259712057370e-03, -3.398147868125370e-04, -7.046985597626953e-04, -1.900862708029794e-02, -9.819747934882502e-04, -9.819747934882493e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ml1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.944123773345123e-02, -9.944140736624932e-02, -9.944118257739078e-02, -9.944146862248222e-02, -9.944149822218032e-02, -9.944118197778165e-02, -9.944079298784501e-02, -9.944179642597183e-02, -9.944047888484638e-02, -9.944215784520745e-02, -9.944047888484638e-02, -9.944215784520745e-02, -9.454348055707013e-02, -9.454528487909045e-02, -9.454336451452396e-02, -9.454542486116284e-02, -9.454616835530054e-02, -9.454344589144915e-02, -9.454607073200046e-02, -9.454421481690949e-02, -9.456927325824661e-02, -9.451980202846649e-02, -9.456927325824661e-02, -9.451980202846649e-02, -7.591350116412317e-02, -7.542686646606124e-02, -7.594852062545344e-02, -7.535091683462239e-02, -7.471564963842244e-02, -7.556280557143931e-02, -7.542790610420637e-02, -7.516241419253965e-02, -7.142567210827834e-02, -7.947454915643090e-02, -7.142567210827834e-02, -7.947454915643090e-02, -4.583639620412547e-02, -4.265902243394568e-02, -4.644854776270755e-02, -4.280802174296958e-02, -8.057540232270639e-02, -7.643004491659257e-02, -3.812191166410690e-02, -3.712925154518439e-02, -2.276686599086758e-02, -8.065658258644974e-02, -2.276686599086755e-02, -8.065658258644978e-02, -3.062161199373096e-03, -2.690355774518959e-03, -3.243376232275997e-03, -2.800970719648178e-03, -1.499634969702208e-02, -1.340091695385201e-02, -1.660475191724583e-03, -1.721233399162918e-03, -1.132646734740758e-03, -3.936167545951920e-03, -1.132646734740759e-03, -3.936167545951921e-03, -9.640225033138096e-02, -9.643391674278547e-02, -9.640253679749013e-02, -9.643503859997897e-02, -9.640199084523045e-02, -9.643424658154122e-02, -9.640285485035140e-02, -9.643462534402726e-02, -9.640231571752879e-02, -9.643456249310603e-02, -9.640231571752879e-02, -9.643456249310603e-02, -9.040247196770897e-02, -9.040912401909434e-02, -9.045338706794814e-02, -9.048922083331686e-02, -9.047130890461129e-02, -9.024384574441678e-02, -9.053457018527017e-02, -9.029758952492455e-02, -9.017719147487388e-02, -9.075502513511312e-02, -9.017719147487388e-02, -9.075502513511312e-02, -7.290075208193796e-02, -7.322059168088731e-02, -7.472263532403459e-02, -7.466719283683747e-02, -7.367837386215990e-02, -6.937468082004404e-02, -7.427746538018586e-02, -7.035603395277977e-02, -7.039703789586368e-02, -7.659003633244627e-02, -7.039703789586373e-02, -7.659003633244631e-02, -2.991189888573950e-02, -2.935671830381172e-02, -4.445440425080592e-02, -4.403992743498779e-02, -2.956950162536788e-02, -2.665279873809183e-02, -9.019934813073462e-02, -9.025848143624383e-02, -3.493905504213289e-02, -3.121579943913908e-02, -3.493905504213289e-02, -3.121579943913908e-02, -1.368339104272128e-03, -1.260050005460059e-03, -1.680536108155305e-03, -1.627397548222576e-03, -1.353672598116106e-03, -1.197118561076674e-03, -2.106170371189795e-02, -2.080193370854818e-02, -2.148881728335882e-03, -1.080783942041185e-03, -2.148881728335883e-03, -1.080783942041185e-03, -7.339126135555359e-02, -7.292541743017851e-02, -7.327778335006750e-02, -7.280767980450278e-02, -7.331857084057943e-02, -7.284848225295809e-02, -7.334998622841273e-02, -7.288406657856585e-02, -7.333424683247891e-02, -7.286628963280883e-02, -7.333424683247891e-02, -7.286628963280883e-02, -7.280151182655405e-02, -7.240478101898601e-02, -6.965273216547246e-02, -6.914699582955526e-02, -7.064918876002162e-02, -7.012660339804035e-02, -7.151681183506799e-02, -7.109930023954032e-02, -7.106472810208973e-02, -7.062542726470346e-02, -7.106472810208973e-02, -7.062542726470346e-02, -7.569849548137922e-02, -7.549831032368641e-02, -5.031432133086350e-02, -4.978222898941912e-02, -5.511567699931899e-02, -5.413014424850238e-02, -6.173342182553410e-02, -6.113906153405102e-02, -5.802882440635754e-02, -5.806531372109284e-02, -5.802882440635754e-02, -5.806531372109283e-02, -6.798028818080253e-02, -6.719085149966596e-02, -1.375983947711115e-02, -1.356737135473632e-02, -1.823587261141442e-02, -1.704912365750523e-02, -6.136083525516130e-02, -5.976400776443568e-02, -2.651676120078211e-02, -2.378153375339883e-02, -2.651676120078209e-02, -2.378153375339881e-02, -4.134643598503476e-03, -3.833528934387276e-03, -4.533084344978738e-04, -4.510901682511265e-04, -1.004117335151815e-03, -8.797254169995902e-04, -2.436108428646808e-02, -2.358065983918771e-02, -1.921751835367170e-03, -1.039129060457058e-03, -1.921751835367167e-03, -1.039129060457057e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
