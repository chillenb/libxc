
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc18_2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.347136487035768e-05, -1.347125214911921e-05, -1.347071624525799e-05, -1.347239407365939e-05, -1.347151983580842e-05, -1.347151983580842e-05, -3.199298566848240e-03, -3.199277345268756e-03, -3.198546036684750e-03, -3.197950936374268e-03, -3.199035798683418e-03, -3.199035798683418e-03, -4.912401376973109e-02, -4.893370455268282e-02, -4.452702760157040e-02, -4.584039251850152e-02, -4.509970362913902e-02, -4.509970362913902e-02, -6.620145238010563e-04, -6.920514511254775e-04, -8.257455166589898e-02, -2.896389667443471e-04, -1.901986083825836e-04, -1.901986083825837e-04, -2.764109033652694e-08, -3.215521774441346e-08, -5.421571314982874e-06, -5.365439850776283e-09, -5.598599090162347e-09, -5.598599090162349e-09, -9.369195664446004e-04, -9.363999245117575e-04, -9.368936749755959e-04, -9.364349569296993e-04, -9.366571672902378e-04, -9.366571672902378e-04, -1.993896032790789e-02, -1.946198678810081e-02, -2.029729698969198e-02, -1.986457902037310e-02, -1.950602512735562e-02, -1.950602512735562e-02, -3.079784458362496e-02, -4.108777616184734e-02, -2.353531597737030e-02, -2.687431093501505e-02, -3.235046215631891e-02, -3.235046215631891e-02, -9.680494969641969e-05, -6.671991975434722e-04, -7.618046113681383e-05, -2.127569969758236e-02, -1.553942138348177e-04, -1.553942138348177e-04, -2.457844385497676e-09, -5.013360552090031e-09, -2.225990470125641e-09, -2.330942456056969e-05, -3.151548136027634e-09, -3.151548136027633e-09, -3.131723819404176e-02, -3.070069161148942e-02, -3.091656156001632e-02, -3.109526238271658e-02, -3.100571573926646e-02, -3.100571573926646e-02, -2.848613947179160e-02, -1.701268928307036e-02, -1.983741715001806e-02, -2.298489634024483e-02, -2.133265948260409e-02, -2.133265948260409e-02, -4.848104318749989e-02, -1.352810919893853e-03, -2.361045841459583e-03, -5.571238420295771e-03, -3.612913646283107e-03, -3.612913646283105e-03, -1.296519106500736e-02, -4.785039155187083e-06, -1.209787570099192e-05, -4.967674175332974e-03, -4.781643486273952e-05, -4.781643486273954e-05, -7.812334167171957e-08, -9.580152225224468e-11, -8.784856908278377e-10, -3.983228759891294e-05, -2.603169900659035e-09, -2.603169900659028e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc18_2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.468873821998158e-09, 1.434183115964981e-09, 1.480752661720284e-09, 1.422255575376741e-09, 1.419053446391175e-09, 1.483723805362888e-09, 1.554360867563758e-09, 1.349137348263852e-09, 1.623238255518686e-09, 1.279878969092040e-09, 1.623238255518686e-09, 1.279878969092040e-09, 7.809906467152402e-05, 7.801389122160135e-05, 7.810409620905119e-05, 7.800683768616287e-05, 7.795639667326063e-05, 7.808488170665916e-05, 7.794851892235653e-05, 7.803609179743216e-05, 7.687576737076090e-05, 7.921088173728064e-05, 7.687576737076090e-05, 7.921088173728064e-05, -1.070772584065242e-01, -1.058462645835529e-01, -1.068090905961874e-01, -1.053029673222304e-01, -9.556995721386549e-02, -9.752035131235921e-02, -9.970105247255147e-02, -9.907250586167880e-02, -8.929037261102073e-02, -1.081115537963718e-01, -8.929037261102073e-02, -1.081115537963718e-01, -1.407947201925131e-03, -1.255770345760250e-03, -1.484338388485154e-03, -1.303247603451248e-03, -1.788212276752411e-01, -1.620888920234802e-01, -5.921134208358351e-04, -5.682694086455715e-04, -2.199332483338344e-04, -1.423278741471779e-03, -2.199332483338346e-04, -1.423278741471779e-03, -6.080662613938686e-08, -5.067796280187740e-08, -7.168521033381239e-08, -5.831152347206548e-08, -1.180644057044658e-05, -1.002558405073682e-05, -1.046711232425552e-08, -1.100828490138509e-08, -6.630315794260039e-09, -3.597934363459135e-08, -6.630315794260040e-09, -3.597934363459135e-08, 7.147455467049989e-06, 6.701862953123568e-06, 7.145577671330036e-06, 6.688481562969053e-06, 7.151212556537137e-06, 6.697339821604382e-06, 7.140961167044436e-06, 6.694133400961210e-06, 7.147621769626765e-06, 6.693988724731548e-06, 7.147621769626765e-06, 6.693988724731548e-06, 2.347274661353268e-03, 2.345496663157893e-03, 2.257196575920562e-03, 2.247828492931877e-03, 2.386633268982326e-03, 2.448429362323876e-03, 2.300036039341083e-03, 2.363161793561602e-03, 2.336373193632848e-03, 2.184991945366842e-03, 2.336373193632848e-03, 2.184991945366842e-03, -6.600850396977487e-02, -6.652313723788122e-02, -8.907939378688742e-02, -8.896128761232516e-02, -5.296883783165329e-02, -4.763721044750444e-02, -6.045574935774601e-02, -5.492750699770797e-02, -6.488323489486710e-02, -7.535957881788509e-02, -6.488323489486711e-02, -7.535957881788509e-02, -1.964814183669114e-04, -1.909666281567171e-04, -1.347981093654778e-03, -1.328016716616538e-03, -1.653613731347257e-04, -1.413358614555713e-04, 2.623289502261861e-03, 2.606518360341252e-03, -3.403294395484390e-04, -2.862951697229059e-04, -3.403294395484390e-04, -2.862951697229059e-04, -5.216546520768999e-09, -4.647641966482888e-09, -1.025781613762021e-08, -9.805809574391176e-09, -4.869948874937078e-09, -4.100087181775394e-09, -4.705583831388214e-05, -4.619843409627748e-05, -1.131435425787070e-08, -4.368317991548617e-09, -1.131435425787070e-08, -4.368317991548616e-09, -6.780144848399129e-02, -6.703954572849775e-02, -6.642830247355139e-02, -6.567421408146816e-02, -6.691031896855822e-02, -6.615107836670248e-02, -6.730591076837612e-02, -6.654915746483329e-02, -6.710764476373213e-02, -6.634971889520655e-02, -6.710764476373213e-02, -6.634971889520655e-02, -6.142798069589341e-02, -6.083645485961075e-02, -3.604429245942689e-02, -3.558754082792394e-02, -4.227685032823723e-02, -4.172917241238836e-02, -4.919211791556635e-02, -4.868718770300916e-02, -4.554028323665367e-02, -4.504620890493787e-02, -4.554028323665367e-02, -4.504620890493787e-02, -1.053306082128596e-01, -1.048305521323277e-01, -2.743688474872285e-03, -2.696658496131612e-03, -4.837336981203427e-03, -4.695084349902649e-03, -1.146512457049167e-02, -1.127827753799738e-02, -7.320899917475168e-03, -7.328618160274260e-03, -7.320899917475166e-03, -7.328618160274256e-03, -2.731401219421407e-02, -2.676494719319001e-02, -9.669157677525726e-06, -9.473367840228662e-06, -2.545301213961860e-05, -2.305898133191100e-05, -1.034962195942836e-02, -9.897882476920047e-03, -1.041270300778262e-04, -8.845147264032346e-05, -1.041270300778262e-04, -8.845147264032348e-05, -1.650554546853115e-07, -1.483305870143145e-07, -1.922614298833839e-10, -1.909491530691022e-10, -1.935415307116569e-09, -1.608654576371225e-09, -8.166380065267421e-05, -7.778508796681875e-05, -8.712282645950976e-09, -3.712413454502490e-09, -8.712282645950951e-09, -3.712413454502479e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
