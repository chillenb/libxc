
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ob_pz_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.643653478529900e-01, -1.643654221188675e-01, -1.643658081264125e-01, -1.643645908950152e-01, -1.643653865611301e-01, -1.643653865611301e-01, -1.098937552519401e-01, -1.098938163848566e-01, -1.098966956682338e-01, -1.098979083126364e-01, -1.098939107803426e-01, -1.098939107803426e-01, -6.419035833455561e-02, -6.416367519148919e-02, -6.346313098765531e-02, -6.366650924421913e-02, -6.418062921083810e-02, -6.418062921083810e-02, -3.888572931390894e-02, -3.911805538120577e-02, -6.892866211258236e-02, -3.335153656707795e-02, -3.895571097206489e-02, -3.895571097206489e-02, -5.705022529164530e-03, -5.930259161330626e-03, -1.724337377967618e-02, -3.023980845287279e-03, -5.878692790147500e-03, -5.878692790147500e-03, -1.217419400765193e-01, -1.217472075418251e-01, -1.217424958798046e-01, -1.217465913901603e-01, -1.217446174651157e-01, -1.217446174651157e-01, -9.336872699736289e-02, -9.356683901331549e-02, -9.328826958858855e-02, -9.344341356065816e-02, -9.360636326428640e-02, -9.360636326428640e-02, -6.060908762556286e-02, -6.274300709059556e-02, -5.926265676779657e-02, -6.034367486655395e-02, -6.157996406770520e-02, -6.157996406770520e-02, -2.833762198741971e-02, -3.901108378838899e-02, -2.813569219817182e-02, -9.282294667715160e-02, -3.065724267432525e-02, -3.065724267432525e-02, -2.928826589225675e-03, -3.296811977724743e-03, -2.549981853573643e-03, -2.141237733772042e-02, -3.036143886304685e-03, -3.036143886304685e-03, -6.141688825376938e-02, -6.127894710418483e-02, -6.132847503295494e-02, -6.136662516650336e-02, -6.134753754668397e-02, -6.134753754668397e-02, -6.057710853597866e-02, -5.693926448114418e-02, -5.805108610003426e-02, -5.904312943967108e-02, -5.854213385347225e-02, -5.854213385347225e-02, -6.397048491214248e-02, -4.307330046026180e-02, -4.614400822858581e-02, -5.051660828234143e-02, -4.833616746684081e-02, -4.833616746684080e-02, -5.501380873695428e-02, -1.636582539125005e-02, -2.001802179646518e-02, -4.951072723996078e-02, -2.515994600655945e-02, -2.515994600655945e-02, -6.508688044612275e-03, -1.008311135948524e-03, -1.830037616278849e-03, -2.447065943240049e-02, -2.625791635855811e-03, -2.625791635855807e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ob_pz_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ob_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.745639400116626e-01, -1.745640145998681e-01, -1.745644022827491e-01, -1.745631797683130e-01, -1.745639788878035e-01, -1.745639788878035e-01, -1.196034228655884e-01, -1.196034849548954e-01, -1.196064092816702e-01, -1.196076408958197e-01, -1.196035808271439e-01, -1.196035808271439e-01, -7.285102817130484e-02, -7.282365860939713e-02, -7.210521719720119e-02, -7.231376585798333e-02, -7.284104872922337e-02, -7.284104872922337e-02, -4.473683688128282e-02, -4.497641178175472e-02, -7.771510041887146e-02, -3.894879560421131e-02, -4.480903030337595e-02, -4.480903030337595e-02, -7.296937590065412e-03, -7.577391965683154e-03, -2.112743410405828e-02, -3.919360270353313e-03, -7.513226295280079e-03, -7.513226295280079e-03, -1.316152024773904e-01, -1.316205335885854e-01, -1.316157649967082e-01, -1.316199099924540e-01, -1.316179122173609e-01, -1.316179122173609e-01, -1.027721982434547e-01, -1.029745690583848e-01, -1.026900071076172e-01, -1.028484920412299e-01, -1.030149412236502e-01, -1.030149412236502e-01, -6.918129861785161e-02, -7.136696730066819e-02, -6.780407361025535e-02, -6.890968897331570e-02, -7.017531976495020e-02, -7.017531976495020e-02, -3.356432385179894e-02, -4.486613590067779e-02, -3.334454300302837e-02, -1.022146103629621e-01, -3.607256070020252e-02, -3.607256070020252e-02, -3.798047341032363e-03, -4.266607987806805e-03, -3.313974613487314e-03, -2.589034287366605e-02, -3.934859325611386e-03, -3.934859325611386e-03, -7.000830668171246e-02, -6.986705027536777e-02, -6.991776693188238e-02, -6.995683395261433e-02, -6.993728745309835e-02, -6.993728745309835e-02, -6.914856977332715e-02, -6.543191233664301e-02, -6.656630635689915e-02, -6.757968619305277e-02, -6.706778335326535e-02, -6.706778335326535e-02, -7.262550858499436e-02, -4.901452981487086e-02, -5.209825990319587e-02, -5.641540071566307e-02, -5.427325640654092e-02, -5.427325640654091e-02, -6.076912420410431e-02, -2.011024994853518e-02, -2.430985441288830e-02, -5.542978132818724e-02, -3.007849289876071e-02, -3.007849289876071e-02, -8.295447567881250e-03, -1.324304200655377e-03, -2.389033001681761e-03, -2.931455394345713e-02, -3.410981852721488e-03, -3.410981852721483e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
