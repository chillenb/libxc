
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc17_2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.837335289027201e-06, -7.837269714977948e-06, -7.836957960106283e-06, -7.837934014558712e-06, -7.837425439042632e-06, -7.837425439042632e-06, -1.831607726609876e-03, -1.831595767254560e-03, -1.831183636725696e-03, -1.830848264040110e-03, -1.831459830096886e-03, -1.831459830096886e-03, -6.732745384100186e-02, -6.715008008514246e-02, -6.284455936611093e-02, -6.416938052451197e-02, -6.332856955143484e-02, -6.332856955143484e-02, -1.098581130413344e-03, -1.148418392881943e-03, -8.782479152124183e-02, -4.806681495150650e-04, -3.155349933172234e-04, -3.155349933172236e-04, -4.587244773508831e-08, -5.336397830107952e-08, -8.997499199226735e-06, -8.904346984727246e-09, -9.291292032974272e-09, -9.291292032974274e-09, -5.424885599098527e-04, -5.421891215766973e-04, -5.424736410621125e-04, -5.422093076963526e-04, -5.423373555179143e-04, -5.423373555179143e-04, -1.064059951621118e-02, -1.040394597042255e-02, -1.081796019160330e-02, -1.060376265767948e-02, -1.042595661381734e-02, -1.042595661381734e-02, -4.694134704070422e-02, -5.921439617406830e-02, -3.705706894244637e-02, -4.171570887959917e-02, -4.889621930371558e-02, -4.889621930371558e-02, -1.606543222491094e-04, -1.107187144815469e-03, -1.264266581884235e-04, -1.130021393637255e-02, -2.578858049175604e-04, -2.578858049175604e-04, -4.078975788311760e-09, -8.320045170105078e-09, -3.694196950058794e-09, -3.868369273553964e-05, -5.230228815234179e-09, -5.230228815234178e-09, -4.761033435224858e-02, -4.681554385766649e-02, -4.709464392519848e-02, -4.732502010060912e-02, -4.720965505297157e-02, -4.720965505297157e-02, -4.390168689232903e-02, -2.743169950288311e-02, -3.168437895350544e-02, -3.627776838676929e-02, -3.388641682978201e-02, -3.388641682978201e-02, -6.672635397006356e-02, -2.244535775442650e-03, -3.915635436656417e-03, -9.213699140695492e-03, -5.986728775698298e-03, -5.986728775698296e-03, -2.114691056427740e-02, -7.941127491620582e-06, -2.007731623485739e-05, -8.221116602185233e-03, -7.935475081316950e-05, -7.935475081316953e-05, -1.296515028158843e-07, -1.589897603329937e-10, -1.457912423017529e-09, -6.610454412126262e-05, -4.320154299787988e-09, -4.320154299787977e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc17_2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17_2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.947740581446291e-10, 2.947751968990054e-10, 2.947687352605245e-10, 2.947706554628261e-10, 2.947473085869906e-10, 2.947451858271263e-10, 2.948162941916253e-10, 2.948230313503378e-10, 2.947757728020854e-10, 2.947870440059271e-10, 2.947757728020854e-10, 2.947870440059271e-10, 1.534672425334921e-05, 1.534735244566722e-05, 1.534648417265259e-05, 1.534720149329997e-05, 1.534057949480565e-05, 1.533963207069241e-05, 1.533494731645664e-05, 1.533430168426331e-05, 1.535323823425873e-05, 1.533601705212334e-05, 1.535323823425873e-05, 1.533601705212334e-05, -1.213106459141786e-01, -1.198794413071897e-01, -1.213121119849006e-01, -1.195566484191011e-01, -1.147627991744847e-01, -1.171676314461477e-01, -1.178178460564397e-01, -1.170554458271432e-01, -1.059218100681270e-01, -1.289008227999483e-01, -1.059218100681270e-01, -1.289008227999483e-01, -2.336394047205655e-03, -2.083658378315357e-03, -2.463153465508910e-03, -2.162389093792391e-03, -1.221296150408375e-01, -1.105966927449732e-01, -9.826310352534990e-04, -9.430462424200219e-04, -3.646559410118674e-04, -2.361664495736602e-03, -3.646559410118678e-04, -2.361664495736602e-03, -1.009131243823595e-07, -8.410385271870905e-08, -1.189669450609873e-07, -9.677231489165187e-08, -1.959367196013902e-05, -1.663818750397592e-05, -1.737095235990055e-08, -1.826906855790930e-08, -1.100350257084888e-08, -5.971039992990829e-08, -1.100350257084888e-08, -5.971039992990829e-08, 1.392351755599160e-06, 1.393352800592761e-06, 1.390812788821439e-06, 1.391839116945070e-06, 1.392266412596304e-06, 1.393286031791021e-06, 1.390927155287325e-06, 1.391930464588944e-06, 1.391572030624904e-06, 1.392590858300131e-06, 1.391572030624904e-06, 1.392590858300131e-06, 4.002991291506557e-04, 4.003598182560652e-04, 3.854980356172555e-04, 3.858129364792055e-04, 4.124809571329510e-04, 4.103480691274362e-04, 3.991154466832531e-04, 3.969657988604337e-04, 3.844889447480266e-04, 3.895849633016578e-04, 3.844889447480266e-04, 3.895849633016578e-04, -9.243676543431500e-02, -9.317484867070244e-02, -1.115572284314031e-01, -1.114054320049609e-01, -7.924847594208380e-02, -7.111341447770129e-02, -8.791002261602081e-02, -7.969877679563081e-02, -8.920738444408267e-02, -1.039931747113828e-01, -8.920738444408267e-02, -1.039931747113828e-01, -3.260738407549853e-04, -3.169205208475713e-04, -2.236793406219712e-03, -2.203636295840836e-03, -2.744300219174769e-04, -2.345540723731989e-04, 4.415765746549935e-04, 4.421722676032707e-04, -5.648033254440659e-04, -4.751121753290654e-04, -5.648033254440659e-04, -4.751121753290654e-04, -8.657247417857432e-09, -7.713107941817056e-09, -1.702360975842480e-08, -1.627347120186217e-08, -8.082042814609270e-09, -6.804400001050296e-09, -7.809258746648786e-05, -7.666961898026537e-05, -1.877701345864899e-08, -7.249548977590777e-09, -1.877701345864899e-08, -7.249548977590776e-09, -9.448275348748161e-02, -9.339545368539645e-02, -9.313458846032666e-02, -9.205208651439244e-02, -9.361153616800318e-02, -9.252387102325794e-02, -9.399889786478827e-02, -9.291664395000586e-02, -9.380502947791329e-02, -9.272017052994845e-02, -9.380502947791329e-02, -9.272017052994845e-02, -8.796499226398694e-02, -8.709837009624523e-02, -5.648924970123780e-02, -5.576137771966811e-02, -6.501566795820998e-02, -6.415768108826538e-02, -7.387556101445807e-02, -7.310170227837597e-02, -6.927167355024676e-02, -6.850540148836312e-02, -6.927167355024676e-02, -6.850540148836312e-02, -1.203279974439877e-01, -1.197416787452242e-01, -4.551279511421143e-03, -4.473129110429058e-03, -8.017561290384511e-03, -7.781085479163538e-03, -1.889779435092177e-02, -1.858775788456974e-02, -1.211314846088359e-02, -1.212597683687412e-02, -1.211314846088359e-02, -1.212597683687411e-02, -4.380039670148816e-02, -4.290787313010557e-02, -1.604668423792958e-05, -1.572175443112594e-05, -4.224117278112921e-05, -3.826803897389667e-05, -1.708357722869938e-02, -1.633348487431557e-02, -1.728068404234026e-04, -1.467905113421730e-04, -1.728068404234026e-04, -1.467905113421730e-04, -2.739218187238489e-07, -2.461656525791249e-07, -3.190721602305768e-10, -3.168943391342673e-10, -3.211965828988309e-09, -2.669682062462691e-09, -1.355270037180314e-04, -1.290896650219322e-04, -1.445868184466294e-08, -6.161026566523067e-09, -1.445868184466289e-08, -6.161026566523050e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
