
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gombas_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gombas", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.655175750539241e-01, -1.655176495655984e-01, -1.655180368507066e-01, -1.655168155906554e-01, -1.655176138901761e-01, -1.655176138901761e-01, -1.110489855347855e-01, -1.110490460396794e-01, -1.110518957474310e-01, -1.110530959377278e-01, -1.110491394654402e-01, -1.110491394654402e-01, -6.764051008725455e-02, -6.761705224745920e-02, -6.700244327485905e-02, -6.718062233425519e-02, -6.763195655934526e-02, -6.763195655934526e-02, -4.225042102848003e-02, -4.247099504626036e-02, -7.185873265591264e-02, -3.707363491062496e-02, -4.231682334772600e-02, -4.231682334772600e-02, -7.558348475096178e-03, -7.855814182657864e-03, -2.137999901959425e-02, -3.968766720168788e-03, -7.787787679203365e-03, -7.787787679203365e-03, -1.228229372400613e-01, -1.228281889929841e-01, -1.228234913848514e-01, -1.228275746786072e-01, -1.228256066407004e-01, -1.228256066407004e-01, -9.483948986646717e-02, -9.503162230862594e-02, -9.476147993394135e-02, -9.491191436371628e-02, -9.506996155414131e-02, -9.506996155414131e-02, -6.452449025630511e-02, -6.637321981437604e-02, -6.337071245257309e-02, -6.429625698250478e-02, -6.536262185113810e-02, -6.536262185113810e-02, -3.240456087767787e-02, -4.236938793539298e-02, -3.221475590245178e-02, -9.431052997976827e-02, -3.457200953008067e-02, -3.457200953008067e-02, -3.840565519306672e-03, -4.336386589903052e-03, -3.330475933069931e-03, -2.570532208253949e-02, -3.985155053641600e-03, -3.985155053641600e-03, -6.522148923566803e-02, -6.510221992289156e-02, -6.514503200154846e-02, -6.517801802862432e-02, -6.516151318878376e-02, -6.516151318878376e-02, -6.449697039128732e-02, -6.140426110983739e-02, -6.234130551464572e-02, -6.318356330567260e-02, -6.275749646892519e-02, -6.275749646892519e-02, -6.744731798501118e-02, -4.629612432442051e-02, -4.938593466503575e-02, -5.403714163272023e-02, -5.167596041859635e-02, -5.167596041859636e-02, -5.922461516616494e-02, -2.043079621355124e-02, -2.428975676432155e-02, -5.293675348534262e-02, -2.938640237785549e-02, -2.938640237785549e-02, -8.615619156290433e-03, -1.276978498623785e-03, -2.364849302763347e-03, -2.872090684016828e-02, -3.432487245735129e-03, -3.432487245735124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gombas_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gombas", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.757499213454853e-01, -1.757499961775205e-01, -1.757503851277384e-01, -1.757491586168811e-01, -1.757499603487128e-01, -1.757499603487128e-01, -1.206589048345091e-01, -1.206589667693820e-01, -1.206618838244688e-01, -1.206631123772110e-01, -1.206590624031719e-01, -1.206590624031719e-01, -7.525489461517818e-02, -7.522970095166712e-02, -7.456935452934532e-02, -7.476084408006908e-02, -7.524570823108884e-02, -7.524570823108884e-02, -4.780086179858855e-02, -4.803776739022104e-02, -7.977306317699996e-02, -4.226753287500538e-02, -4.787217113427360e-02, -4.787217113427360e-02, -9.663775132505712e-03, -1.002798262942649e-02, -2.554865154460546e-02, -5.175183001543127e-03, -9.944794691914779e-03, -9.944794691914779e-03, -1.326667369924510e-01, -1.326720753609464e-01, -1.326673002772463e-01, -1.326714509155936e-01, -1.326694504204625e-01, -1.326694504204625e-01, -1.039575566916608e-01, -1.041569785817964e-01, -1.038765757362151e-01, -1.040327336166673e-01, -1.041967676593624e-01, -1.041967676593624e-01, -7.190212540884543e-02, -7.389279773680274e-02, -7.065769873460752e-02, -7.165608218589561e-02, -7.280512749168327e-02, -7.280512749168327e-02, -3.731461295206135e-02, -4.792862596206329e-02, -3.711368984725817e-02, -1.034083221086182e-01, -3.961065958972236e-02, -3.961065958972236e-02, -5.011579494656622e-03, -5.643032079848309e-03, -4.358315817414929e-03, -3.020653965258237e-02, -5.196080137409855e-03, -5.196080137409855e-03, -7.265313078256162e-02, -7.252466144648544e-02, -7.257077788909864e-02, -7.260630835865979e-02, -7.258853055057042e-02, -7.258853055057042e-02, -7.187246130363351e-02, -6.853341518395246e-02, -6.954616799193042e-02, -7.045570427196347e-02, -6.999569810753345e-02, -6.999569810753345e-02, -7.504738511187405e-02, -5.215931877614446e-02, -5.550304959921668e-02, -6.054867593415218e-02, -5.798631903750529e-02, -5.798631903750530e-02, -6.617454644839171e-02, -2.451286876211890e-02, -2.869158588928826e-02, -5.935443383734312e-02, -3.411922214132931e-02, -3.411922214132931e-02, -1.095307584043092e-02, -1.690412123076421e-03, -3.111424499752905e-03, -3.341380670899927e-02, -4.489257015561962e-03, -4.489257015561956e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
