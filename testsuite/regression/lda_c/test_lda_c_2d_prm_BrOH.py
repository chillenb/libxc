
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_2d_prm_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_prm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.150038413827566e-01, -1.150038418745684e-01, -1.150038444308591e-01, -1.150038363698163e-01, -1.150038416390848e-01, -1.150038416390848e-01, -1.131098683348970e-01, -1.131098746255246e-01, -1.131101708837704e-01, -1.131102956432967e-01, -1.131098843388618e-01, -1.131098843388618e-01, -9.453012774064892e-02, -9.450363203452758e-02, -9.379759168763284e-02, -9.400463927437676e-02, -9.452047031824803e-02, -9.452047031824803e-02, -4.464580150595233e-02, -4.519781207438948e-02, -9.879055794474208e-02, -3.220910913568011e-02, -4.481188515353283e-02, -4.481188515353283e-02, -9.350152924474696e-04, -1.001794488871584e-03, -7.745885671575833e-03, -3.122979552271941e-04, -9.863034066013086e-04, -9.863034066013086e-04, -1.140230735557608e-01, -1.140233687261105e-01, -1.140231047047788e-01, -1.140233342032227e-01, -1.140232235971738e-01, -1.140232235971738e-01, -1.104241529775948e-01, -1.104717940453395e-01, -1.104046654447615e-01, -1.104421704857309e-01, -1.104812405084199e-01, -1.104812405084199e-01, -9.071003866554611e-02, -9.305073221199189e-02, -8.913374372753671e-02, -9.040542987820699e-02, -9.179880759147296e-02, -9.179880759147296e-02, -2.254172431720938e-02, -4.494341768376679e-02, -2.219003041237037e-02, -1.102903591492098e-01, -2.679617948203191e-02, -2.679617948203191e-02, -2.959427766856047e-04, -3.613666286285132e-04, -2.347288543894240e-04, -1.223925404369956e-02, -3.144168387906548e-04, -3.144168387906548e-04, -9.161871965750092e-02, -9.146551060587596e-02, -9.152061313600908e-02, -9.156298646877911e-02, -9.154179355737496e-02, -9.154179355737496e-02, -9.067349576048742e-02, -8.623199638746591e-02, -8.764921663311104e-02, -8.886940393337008e-02, -8.825843635640357e-02, -8.825843635640357e-02, -9.431093282113535e-02, -5.480425099928193e-02, -6.235407573765957e-02, -7.280647441203089e-02, -6.766691102120202e-02, -6.766691102120198e-02, -8.268529693705534e-02, -6.952816062320698e-03, -1.059904826963544e-02, -7.045775115021471e-02, -1.736350326474899e-02, -1.736350326474899e-02, -1.183865913823865e-03, -5.190054046290031e-05, -1.357924032810418e-04, -1.634141216511136e-02, -2.464777104622906e-04, -2.464777104622900e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_2d_prm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_prm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.150713802383746e-01, -1.150713804847678e-01, -1.150713817655132e-01, -1.150713777268549e-01, -1.150713803667765e-01, -1.150713803667765e-01, -1.141090028988964e-01, -1.141090061405586e-01, -1.141091588069349e-01, -1.141092230972127e-01, -1.141090111460016e-01, -1.141090111460016e-01, -1.031252550794360e-01, -1.031074886225258e-01, -1.026317843025912e-01, -1.027717402078720e-01, -1.031187800967404e-01, -1.031187800967404e-01, -5.852482807594990e-02, -5.914036704197873e-02, -1.059021627678553e-01, -4.394645726157017e-02, -5.871030894155824e-02, -5.871030894155824e-02, -1.398901959317132e-03, -1.498534914804785e-03, -1.136943960398109e-02, -4.680431150166199e-04, -1.475425886623325e-03, -1.475425886623325e-03, -1.145764110273541e-01, -1.145765610810745e-01, -1.145764268623985e-01, -1.145765435309483e-01, -1.145764873029572e-01, -1.145764873029572e-01, -1.126970362464602e-01, -1.127225755707232e-01, -1.126865842244081e-01, -1.127066971503122e-01, -1.127276374736851e-01, -1.127276374736851e-01, -1.004997809717099e-01, -1.021237965056619e-01, -9.937870886574676e-02, -1.002848642699758e-01, -1.012612266700244e-01, -1.012612266700244e-01, -3.168417281872733e-02, -5.885703033262508e-02, -3.122290448790439e-02, -1.126252160535248e-01, -3.717999204717597e-02, -3.717999204717597e-02, -4.435515389967709e-04, -5.415092453521303e-04, -3.518651620134079e-04, -1.773476716997135e-02, -4.712159416613475e-04, -4.712159416613475e-04, -1.011360054617259e-01, -1.010292477048838e-01, -1.010676677228275e-01, -1.010971940460444e-01, -1.010824285228822e-01, -1.010824285228822e-01, -1.004740416564632e-01, -9.725699946965553e-02, -9.830265062613802e-02, -9.918854172100143e-02, -9.874662357008968e-02, -9.874662357008968e-02, -1.029780901811480e-01, -6.941919285246947e-02, -7.691889206722476e-02, -8.645507697838162e-02, -8.188921336400243e-02, -8.188921336400237e-02, -9.456123478769812e-02, -1.022837195544807e-02, -1.543092782559248e-02, -8.439812864163815e-02, -2.478578326002136e-02, -2.478578326002136e-02, -1.769993229871444e-03, -7.783965923184645e-05, -2.036122638822018e-04, -2.339715182609160e-02, -3.694650369867444e-04, -3.694650369867436e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
