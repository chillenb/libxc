
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vbh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vbh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.722760042781372e-01, -1.722760744764895e-01, -1.722764082244521e-01, -1.722753633574634e-01, -1.722759077716731e-01, -1.722759077716731e-01, -1.266824212184007e-01, -1.266824752275212e-01, -1.266843366497155e-01, -1.266858517009771e-01, -1.266830891632451e-01, -1.266830891632451e-01, -8.593930136087879e-02, -8.591248028529777e-02, -8.525831565439318e-02, -8.545913301282143e-02, -8.541656060501313e-02, -8.541656060501313e-02, -5.422288467727671e-02, -5.455586238498137e-02, -8.968401304738015e-02, -4.823234820124413e-02, -5.072592570324574e-02, -5.072592570324574e-02, -6.077250073828034e-03, -6.357596833107588e-03, -2.367243174099386e-02, -3.695583769259886e-03, -4.558146418465246e-03, -4.558146418465246e-03, -1.367943301283677e-01, -1.367989343027539e-01, -1.367945594607382e-01, -1.367986238399573e-01, -1.367966547334245e-01, -1.367966547334245e-01, -1.123326734854549e-01, -1.125125497528944e-01, -1.122005407835003e-01, -1.123604018281337e-01, -1.124956497921320e-01, -1.124956497921320e-01, -8.269323716068074e-02, -8.470025819090855e-02, -8.081795025400228e-02, -8.175322307278239e-02, -8.308029720184916e-02, -8.308029720184916e-02, -4.068170218609907e-02, -5.425647304488598e-02, -3.913674236887926e-02, -1.118522184225577e-01, -4.393368452652778e-02, -4.393368452652778e-02, -2.900536939176256e-03, -3.618742402326987e-03, -2.815251435871219e-03, -3.168063788262488e-02, -3.352596502359552e-03, -3.352596502359552e-03, -8.281043389984508e-02, -8.267124512195996e-02, -8.272031126957892e-02, -8.276065365500646e-02, -8.274046857124889e-02, -8.274046857124889e-02, -8.214582115542356e-02, -7.846793361554798e-02, -7.957558952863630e-02, -8.062811012684233e-02, -8.009605996601364e-02, -8.009605996601364e-02, -8.584761658404413e-02, -5.950092174104830e-02, -6.369338574254589e-02, -7.018479799484610e-02, -6.691011757198165e-02, -6.691011757198165e-02, -7.648646243987334e-02, -2.301276684891199e-02, -2.791689263966641e-02, -6.932256783317244e-02, -3.613647839447762e-02, -3.613647839447762e-02, -8.189399589395427e-03, -1.022567088309587e-03, -2.097770256431047e-03, -3.494981191505702e-02, -3.117886388880289e-03, -3.117886388880110e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vbh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vbh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.806663114077408e-01, -1.806663816330838e-01, -1.806667155093693e-01, -1.806656702406337e-01, -1.806662148641705e-01, -1.806662148641705e-01, -1.350233445186077e-01, -1.350233986540772e-01, -1.350252644307170e-01, -1.350267830259181e-01, -1.350240140260231e-01, -1.350240140260231e-01, -9.404394357934072e-02, -9.401681059632941e-02, -9.335493641038480e-02, -9.355814147569350e-02, -9.351506444871625e-02, -9.351506444871625e-02, -6.160032718884859e-02, -6.194647457075803e-02, -9.782914271900604e-02, -5.534159553242840e-02, -5.795436192642756e-02, -5.795436192642756e-02, -7.866225802080639e-03, -8.218763616692010e-03, -2.873355285302233e-02, -4.836633304146861e-03, -5.941211784225839e-03, -5.941211784225839e-03, -1.451547521477112e-01, -1.451593635421024e-01, -1.451549818397388e-01, -1.451590525924971e-01, -1.451570803982462e-01, -1.451570803982462e-01, -1.206284319358827e-01, -1.208090470516864e-01, -1.204957531464058e-01, -1.206562745155982e-01, -1.207920778965032e-01, -1.207920778965032e-01, -9.075765251939609e-02, -9.279014442484461e-02, -8.885669353556168e-02, -8.980500477997454e-02, -9.114978132739796e-02, -9.114978132739796e-02, -4.735182757677290e-02, -6.163525169256976e-02, -4.570022518980602e-02, -1.201459775068599e-01, -5.080862972559231e-02, -5.080862972559231e-02, -3.810739778744819e-03, -4.737810936702489e-03, -3.700235946149640e-03, -3.763028563505016e-02, -4.394989627058640e-03, -4.394989627058640e-03, -9.087639210916974e-02, -9.073537017631192e-02, -9.078508367600790e-02, -9.082595738870278e-02, -9.080550656297502e-02, -9.080550656297502e-02, -9.020293575354774e-02, -8.647173792337372e-02, -8.759626109699487e-02, -8.866414830484004e-02, -8.812440914633296e-02, -8.812440914633296e-02, -9.395119122933707e-02, -6.706846126219716e-02, -7.138661392351398e-02, -7.803652829127919e-02, -7.468686843589145e-02, -7.468686843589145e-02, -8.445821594824034e-02, -2.798767854890904e-02, -3.348299834028658e-02, -7.715547011632680e-02, -4.247388094141465e-02, -4.247388094141465e-02, -1.050253575548500e-02, -1.356168290118379e-03, -2.767019359662645e-03, -4.119034999995395e-02, -4.091955539193461e-03, -4.091955539193415e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
