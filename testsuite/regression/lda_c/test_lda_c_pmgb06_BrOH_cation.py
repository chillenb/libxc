
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pmgb06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pmgb06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.229868753998093e-04, -4.229858043125115e-04, -4.229807120192254e-04, -4.229966546843225e-04, -4.229883478801659e-04, -4.229883478801659e-04, -2.037529412982449e-03, -2.037525817623825e-03, -2.037401908531447e-03, -2.037301061650722e-03, -2.037484851466116e-03, -2.037484851466116e-03, -7.186298096528936e-03, -7.191866270988409e-03, -7.329183853791860e-03, -7.286891765529729e-03, -7.285470262951682e-03, -7.285470262951682e-03, -1.551769547828873e-02, -1.542564173062581e-02, -6.438468788770836e-03, -1.718686867059969e-02, -1.666418082853114e-02, -1.666418082853115e-02, -3.769961251223006e-03, -3.933135398933444e-03, -1.398988945101124e-02, -2.355256428032055e-03, -2.448087628539023e-03, -2.448087628539023e-03, -1.457901979863871e-03, -1.457676924639906e-03, -1.457890768212950e-03, -1.457692100459945e-03, -1.457788347264980e-03, -1.457788347264980e-03, -3.227486643648337e-03, -3.209279251629973e-03, -3.240917987312510e-03, -3.224670007870299e-03, -3.210963555507594e-03, -3.210963555507594e-03, -7.888220294464100e-03, -7.448160170099705e-03, -8.313871407825416e-03, -8.098495965108555e-03, -7.795506301757840e-03, -7.795506301757842e-03, -1.853636828465733e-02, -1.549149841046319e-02, -1.859972502388614e-02, -3.276583428046315e-03, -1.817143724156928e-02, -1.817143724156928e-02, -1.871126224994038e-03, -2.308930002396664e-03, -1.816896546093460e-03, -1.744481819945719e-02, -2.023039816583415e-03, -2.023039816583415e-03, -7.861965970067939e-03, -7.893131054337258e-03, -7.882134016154455e-03, -7.873101531971792e-03, -7.877619912929816e-03, -7.877619912929816e-03, -8.011627211289184e-03, -8.876904012045139e-03, -8.609878050980322e-03, -8.361213189921717e-03, -8.486291732613909e-03, -8.486291732613909e-03, -7.205444254340309e-03, -1.398327155865593e-02, -1.280347117861089e-02, -1.101696461753790e-02, -1.191096964224543e-02, -1.191096964224543e-02, -9.367360724798567e-03, -1.366510427827485e-02, -1.604534437051514e-02, -1.125068831889607e-02, -1.840975935374558e-02, -1.840975935374560e-02, -5.026820971216594e-03, -6.962932976970780e-04, -1.374863537399769e-03, -1.823298476172977e-02, -1.909826136315688e-03, -1.909826136315690e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pmgb06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pmgb06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.949671449681245e-04, -2.949675749889508e-04, -2.949662354516185e-04, -2.949669605768904e-04, -2.949633762235556e-04, -2.949625745533361e-04, -2.949730450251376e-04, -2.949755888140241e-04, -2.949662794345297e-04, -2.949705356320400e-04, -2.949662794345297e-04, -2.949705356320400e-04, -1.482271495365527e-03, -1.482296924861543e-03, -1.482266988155596e-03, -1.482296025917490e-03, -1.482207530170097e-03, -1.482169163384016e-03, -1.482125601997568e-03, -1.482099448645970e-03, -1.482599514321107e-03, -1.481902300806246e-03, -1.482599514321107e-03, -1.481902300806246e-03, -5.511294994532747e-03, -5.485766402106010e-03, -5.518810635850961e-03, -5.487450080619145e-03, -5.593658318852369e-03, -5.638430933057850e-03, -5.588054537215894e-03, -5.574052275020239e-03, -5.385217565197071e-03, -5.813586876038495e-03, -5.385217565197071e-03, -5.813586876038495e-03, -1.275656358884453e-02, -1.392131324259272e-02, -1.258385166110093e-02, -1.388036252107966e-02, -4.999194141192077e-03, -4.795359798297558e-03, -1.510415948214662e-02, -1.556815639718321e-02, -1.247987652170479e-02, -2.865245736997716e-02, -1.247987652170480e-02, -2.865245736997715e-02, -5.056717781960676e-03, -4.640169999634924e-03, -5.306240945753405e-03, -4.812022973457272e-03, -1.730559926303039e-02, -1.608013730968586e-02, -3.010208743910765e-03, -3.079800545717876e-03, -2.735522116031692e-03, -5.356638269526976e-03, -2.735522116031692e-03, -5.356638269526976e-03, -1.049058460182915e-03, -1.049366141437520e-03, -1.048887451616784e-03, -1.049203195985500e-03, -1.049047282083139e-03, -1.049360686751318e-03, -1.048902259086707e-03, -1.049210902577081e-03, -1.048971346263974e-03, -1.049284639566343e-03, -1.048971346263974e-03, -1.049284639566343e-03, -2.385523705577987e-03, -2.385681347637644e-03, -2.371248849339543e-03, -2.372092595350378e-03, -2.398597074579990e-03, -2.393181039162395e-03, -2.386260103341409e-03, -2.380649647198029e-03, -2.366198319660267e-03, -2.379812273552946e-03, -2.366198319660267e-03, -2.379812273552946e-03, -6.072171335365032e-03, -6.089231320359063e-03, -5.715459857794399e-03, -5.712516287467989e-03, -6.559691579812245e-03, -6.333090435059831e-03, -6.366792791482089e-03, -6.158092606166757e-03, -5.847786662712960e-03, -6.180784888439617e-03, -5.847786662712965e-03, -6.180784888439621e-03, -1.802755612846466e-02, -1.817855814866716e-02, -1.327461078681720e-02, -1.342815530933139e-02, -1.832220494510153e-02, -1.883831202388840e-02, -2.422472848003117e-03, -2.423898502654997e-03, -1.620836603531687e-02, -1.767018421579242e-02, -1.620836603531687e-02, -1.767018421579242e-02, -2.492845928185821e-03, -2.367920221507613e-03, -3.016347997614327e-03, -2.955437670721006e-03, -2.455380559407485e-03, -2.274811876595938e-03, -1.930220224003287e-02, -1.921982550696536e-02, -3.446737817396098e-03, -2.295511336587153e-03, -3.446737817396097e-03, -2.295511336587151e-03, -6.071118252845427e-03, -6.046261757900271e-03, -6.097398745477059e-03, -6.072324974860076e-03, -6.088162012498144e-03, -6.063085169081265e-03, -6.080466116164899e-03, -6.055608801695676e-03, -6.084314284740949e-03, -6.059349673021298e-03, -6.084314284740949e-03, -6.059349673021298e-03, -6.195191042195678e-03, -6.174086066735465e-03, -6.940714233231483e-03, -6.915960177641916e-03, -6.709208544124110e-03, -6.682591802360918e-03, -6.492729221701949e-03, -6.470929614769189e-03, -6.600556176139357e-03, -6.577873607357320e-03, -6.600556176139357e-03, -6.577873607357320e-03, -5.519423557592718e-03, -5.508910753961206e-03, -1.177519482173724e-02, -1.189016769877136e-02, -1.060262758335869e-02, -1.070769470930584e-02, -8.896065826887328e-03, -8.895764178025289e-03, -9.769504686556591e-03, -9.767899064846083e-03, -9.769504686556595e-03, -9.767899064846089e-03, -7.379819265139230e-03, -7.345541244461877e-03, -1.640291482997680e-02, -1.624997852775119e-02, -1.877949813308561e-02, -1.811996480489250e-02, -9.113412035689605e-03, -9.128229611415729e-03, -1.924157427861674e-02, -1.919827326984131e-02, -1.924157427861677e-02, -1.919827326984133e-02, -6.570200075379677e-03, -6.238114723011950e-03, -9.143030980967537e-04, -9.116698670131308e-04, -1.869281701761499e-03, -1.724611735411670e-03, -1.935936239558451e-02, -1.928869590515690e-02, -3.149899151522376e-03, -2.184295335559411e-03, -3.149899151522377e-03, -2.184295335559411e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
