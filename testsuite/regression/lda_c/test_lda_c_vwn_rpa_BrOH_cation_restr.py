
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_rpa_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.883673381377739e-01, -1.883674237573777e-01, -1.883678308234935e-01, -1.883665564190436e-01, -1.883672204306667e-01, -1.883672204306667e-01, -1.335353909296456e-01, -1.335354545211250e-01, -1.335376462016832e-01, -1.335394300612180e-01, -1.335361773823308e-01, -1.335361773823308e-01, -8.725483148253919e-02, -8.722576080640290e-02, -8.651741085419414e-02, -8.673472249577459e-02, -8.668864301665159e-02, -8.668864301665159e-02, -5.454540591271668e-02, -5.487079404916381e-02, -9.133490728151523e-02, -4.875447830081752e-02, -5.115066259407938e-02, -5.115066259407938e-02, -8.669805760258893e-03, -8.988038894935921e-03, -2.593848164796491e-02, -5.805601132797600e-03, -6.881465071283565e-03, -6.881465071283565e-03, -1.455145177763781e-01, -1.455200029837028e-01, -1.455147909920886e-01, -1.455196331114059e-01, -1.455172872035778e-01, -1.455172872035778e-01, -1.168155540423593e-01, -1.170227451933758e-01, -1.166633989335696e-01, -1.168474886990472e-01, -1.170032760803514e-01, -1.170032760803514e-01, -8.375265739815610e-02, -8.591416952390789e-02, -8.174451665617022e-02, -8.274464684751846e-02, -8.416852866577265e-02, -8.416852866577265e-02, -4.161359797334618e-02, -5.457821161252531e-02, -4.017160970605436e-02, -1.162624673662911e-01, -4.466904953736702e-02, -4.466904953736702e-02, -4.761398311684416e-03, -5.707103299228808e-03, -4.645757955504759e-03, -3.328163652213664e-02, -5.362146147077588e-03, -5.362146147077588e-03, -8.387852791370223e-02, -8.372904255494475e-02, -8.378173141910461e-02, -8.382505811430442e-02, -8.380337920551870e-02, -8.380337920551870e-02, -8.316530254876420e-02, -7.924400305648659e-02, -8.042035777558032e-02, -8.154185458886398e-02, -8.097448871318567e-02, -8.097448871318567e-02, -8.715546579306921e-02, -5.974801477972272e-02, -6.394973833139382e-02, -7.057700727906532e-02, -6.721539157905192e-02, -6.721539157905192e-02, -7.714970453467729e-02, -2.533171161223586e-02, -2.983090555343497e-02, -6.968827232233599e-02, -3.738690351417539e-02, -3.738690351417539e-02, -1.099824601974459e-02, -1.971517179359850e-03, -3.638653610773652e-03, -3.629050589373871e-02, -5.052705726423454e-03, -5.052705726423455e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_rpa_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn_rpa", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.986008370818669e-01, -1.986009230088649e-01, -1.986013315364327e-01, -1.986000525565544e-01, -1.986007189521629e-01, -1.986007189521629e-01, -1.433561698664107e-01, -1.433562343007338e-01, -1.433584550291873e-01, -1.433602625304463e-01, -1.433569667426855e-01, -1.433569667426855e-01, -9.603957750555657e-02, -9.600950449424672e-02, -9.527655300662356e-02, -9.550144855954526e-02, -9.545376367151115e-02, -9.545376367151115e-02, -6.175052042109826e-02, -6.209713673132545e-02, -1.002547790199120e-01, -5.555777711276600e-02, -5.812589802394309e-02, -5.812589802394309e-02, -1.071091618311932e-02, -1.109015932561335e-02, -3.059085422018036e-02, -7.264719621590871e-03, -8.566586806334511e-03, -8.566586806334511e-03, -1.554747269172632e-01, -1.554802677657886e-01, -1.554750029046010e-01, -1.554798941417753e-01, -1.554775244380245e-01, -1.554775244380245e-01, -1.263695196238289e-01, -1.265806298478888e-01, -1.262144756298761e-01, -1.264020594402442e-01, -1.265607931942724e-01, -1.265607931942724e-01, -9.241243058272181e-02, -9.465208854431310e-02, -9.032865802138185e-02, -9.136682787470700e-02, -9.284359580095380e-02, -9.284359580095380e-02, -4.785191794371940e-02, -6.178547257787950e-02, -4.628538884155659e-02, -1.258058876576344e-01, -5.115926348517380e-02, -5.115926348517380e-02, -5.991435668266491e-03, -7.145040655534314e-03, -5.849782120751138e-03, -3.874488501821984e-02, -6.725217992513935e-03, -6.725217992513935e-03, -9.254294325173208e-02, -9.238794353692666e-02, -9.244257788336756e-02, -9.248750286606301e-02, -9.246502440933883e-02, -9.246502440933883e-02, -9.180326166382900e-02, -8.772971418651716e-02, -8.895297509598570e-02, -9.011819652924345e-02, -8.952883031393269e-02, -8.952883031393269e-02, -9.593678338843444e-02, -6.727668452092367e-02, -7.171655863601285e-02, -7.868181479255174e-02, -7.515422837402001e-02, -7.515422837402001e-02, -8.554919042344013e-02, -2.991076901957722e-02, -3.492982712712117e-02, -7.775025456048641e-02, -4.324922918798744e-02, -4.324922918798744e-02, -1.347111936784693e-02, -2.530315881035471e-03, -4.610142228605086e-03, -4.204967903830692e-02, -6.347685347607350e-03, -6.347685347607352e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
