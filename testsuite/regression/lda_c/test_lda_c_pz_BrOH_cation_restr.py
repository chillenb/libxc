
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pz_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.656062519792699e-01, -1.656063376085179e-01, -1.656067447204873e-01, -1.656054701724942e-01, -1.656061342589045e-01, -1.656061342589045e-01, -1.109130086012650e-01, -1.109130715894277e-01, -1.109152424780191e-01, -1.109170094164226e-01, -1.109137875927271e-01, -1.109137875927271e-01, -6.652035443003025e-02, -6.649434300583992e-02, -6.586190961458697e-02, -6.605564817833726e-02, -6.601454610474422e-02, -6.601454610474422e-02, -3.817016217685315e-02, -3.845370324888330e-02, -7.021184421152950e-02, -3.315418231374394e-02, -3.522160581833272e-02, -3.522160581833272e-02, -3.761698705864353e-03, -3.928228344931782e-03, -1.473815615664560e-02, -2.340115113785503e-03, -2.857215373929596e-03, -2.857215373929596e-03, -1.228107010789193e-01, -1.228161610183817e-01, -1.228109730358398e-01, -1.228157928496409e-01, -1.228134577475197e-01, -1.228134577475197e-01, -9.445430424050287e-02, -9.465661703432855e-02, -9.430576559192116e-02, -9.448548352571952e-02, -9.463760406938417e-02, -9.463760406938417e-02, -6.342022675051831e-02, -6.532544663607182e-02, -6.167600228136235e-02, -6.254141923270826e-02, -6.378463957278437e-02, -6.378463957278437e-02, -2.709639794334757e-02, -3.819874279078804e-02, -2.589764434434451e-02, -9.391450280820021e-02, -2.966609825315716e-02, -2.966609825315716e-02, -1.859153689204445e-03, -2.293844590739674e-03, -1.807221418025592e-03, -2.032308518413633e-02, -2.133258483163850e-03, -2.133258483163850e-03, -6.353041080473631e-02, -6.339956575852973e-02, -6.344566879052886e-02, -6.348359270226270e-02, -6.346461568046367e-02, -6.346461568046367e-02, -6.290737357186581e-02, -5.957502490994854e-02, -6.054076498844499e-02, -6.150145885499154e-02, -6.101432834057181e-02, -6.101432834057181e-02, -6.643146365941979e-02, -4.271490826229585e-02, -4.639023535334464e-02, -5.215857710397031e-02, -4.923954154681844e-02, -4.923954154681844e-02, -5.780084814934448e-02, -1.429664428152795e-02, -1.764603687548106e-02, -5.138859826277480e-02, -2.361186192768290e-02, -2.361186192768290e-02, -5.016831951581042e-03, -6.893564996114814e-04, -1.366828007645173e-03, -2.272348716698534e-02, -1.991173841731146e-03, -1.991173841731145e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pz_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.758409036087329e-01, -1.758409895631789e-01, -1.758413982212446e-01, -1.758401188328180e-01, -1.758407854412943e-01, -1.758407854412943e-01, -1.206406138763727e-01, -1.206406780396008e-01, -1.206428894254836e-01, -1.206446893236441e-01, -1.206414074000259e-01, -1.206414074000259e-01, -7.438130124414118e-02, -7.435306604429347e-02, -7.366578942348966e-02, -7.387648830337028e-02, -7.383179997030376e-02, -7.383179997030376e-02, -4.444716924731380e-02, -4.475214853535436e-02, -7.836496883375299e-02, -3.900410316985860e-02, -4.125868767722183e-02, -4.125868767722183e-02, -4.824543380221439e-03, -5.033645522763351e-03, -1.813617658078338e-02, -3.026913400934168e-03, -3.683557362017754e-03, -3.683557362017754e-03, -1.327250200318997e-01, -1.327305513991187e-01, -1.327252955468740e-01, -1.327301784143000e-01, -1.327278127650940e-01, -1.327278127650940e-01, -1.037820941335187e-01, -1.039906814349864e-01, -1.036289226585637e-01, -1.038142430724435e-01, -1.039710805397639e-01, -1.039710805397639e-01, -7.099742799241833e-02, -7.308160862282100e-02, -6.907508144749644e-02, -7.003069430878489e-02, -7.139727016071622e-02, -7.139727016071622e-02, -3.230304993765480e-02, -4.447792362991123e-02, -3.095938460949234e-02, -1.032253500238280e-01, -3.516339897484987e-02, -3.516339897484987e-02, -2.412992966821126e-03, -2.967989512484564e-03, -2.346507388257108e-03, -2.462832171018984e-02, -2.763265684347803e-03, -2.763265684347803e-03, -7.111838676587744e-02, -7.097474053157252e-02, -7.102536279920896e-02, -7.106699703923530e-02, -7.104616418502165e-02, -7.104616418502165e-02, -7.043369876193432e-02, -6.673687292098052e-02, -6.781570216603841e-02, -6.888189222536639e-02, -6.834188566865480e-02, -6.834188566865480e-02, -7.428480072001870e-02, -4.930209978538493e-02, -5.317773497416423e-02, -5.917398168805141e-02, -5.615251457776529e-02, -5.615251457776529e-02, -6.494212642881125e-02, -1.761591985671799e-02, -2.153632696509402e-02, -5.837950610032302e-02, -2.838023376711451e-02, -2.838023376711451e-02, -6.393732347339066e-03, -9.043781705890059e-04, -1.781020090757598e-03, -2.737163281261245e-02, -2.581832322974000e-03, -2.581832322973999e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
