
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ow_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.192478314576195e-02, -5.192478476369124e-02, -5.192479317304825e-02, -5.192476665473068e-02, -5.192478398904384e-02, -5.192478398904384e-02, -4.870943107645646e-02, -4.870943863763536e-02, -4.870979474348098e-02, -4.870994471221864e-02, -4.870945031284220e-02, -4.870945031284220e-02, -3.712897233360603e-02, -3.711775422590748e-02, -3.682122436350287e-02, -3.690770875468475e-02, -3.712488267468391e-02, -3.712488267468391e-02, -2.084702207130268e-02, -2.101370856092884e-02, -3.903027810949201e-02, -1.696288555966966e-02, -2.089720596316547e-02, -2.089720596316547e-02, -1.860517329949890e-03, -1.945539787777818e-03, -7.102684839143944e-03, -9.092839241379930e-04, -1.926007676645360e-03, -1.926007676645360e-03, -4.993503666038510e-02, -4.993548653813530e-02, -4.993508413333663e-02, -4.993543391841006e-02, -4.993526533712511e-02, -4.993526533712511e-02, -4.605632055515100e-02, -4.609644258987289e-02, -4.603996040265921e-02, -4.607147323875582e-02, -4.610441962895623e-02, -4.610441962895623e-02, -3.557398691202681e-02, -3.651240520659340e-02, -3.496451694082752e-02, -3.545488681128248e-02, -3.600520659733023e-02, -3.600520659733023e-02, -1.362877017563439e-02, -2.093692960865296e-02, -1.349891657271800e-02, -4.594459256409890e-02, -1.514594858358493e-02, -1.514594858358493e-02, -8.777101734512313e-04, -1.000694242242076e-03, -7.536168378737420e-04, -9.401074007849380e-03, -9.133313607102690e-04, -9.133313607102690e-04, -3.593326813396931e-02, -3.587226137785215e-02, -3.589418235096798e-02, -3.591105498906554e-02, -3.590261448335828e-02, -3.590261448335828e-02, -3.555966417818839e-02, -3.388303216735757e-02, -3.440512084275600e-02, -3.486391619712046e-02, -3.463306655033421e-02, -3.463306655033421e-02, -3.703636550979112e-02, -2.388308559829210e-02, -2.613789286291720e-02, -2.935423856179231e-02, -2.775205100547684e-02, -2.775205100547684e-02, -3.262098890135182e-02, -6.644577422763279e-03, -8.610420875066260e-03, -2.861593393756392e-02, -1.162941885219646e-02, -1.162941885219646e-02, -2.167326611875789e-03, -2.778110244040491e-04, -5.252440561616227e-04, -1.120865488809987e-02, -7.782395462564511e-04, -7.782395462564500e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ow_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.214696621757865e-02, -5.214696731004420e-02, -5.214697298824787e-02, -5.214695508242778e-02, -5.214696678698327e-02, -5.214696678698327e-02, -4.991036516282875e-02, -4.991037057645700e-02, -4.991062553914037e-02, -4.991073291244236e-02, -4.991037893563216e-02, -4.991037893563216e-02, -4.076917105475936e-02, -4.075949182735146e-02, -4.050306110553603e-02, -4.057796550358072e-02, -4.076564259280386e-02, -4.076564259280386e-02, -2.504192087807796e-02, -2.521995141784394e-02, -4.238661536712818e-02, -2.079373659850473e-02, -2.509555714564674e-02, -2.509555714564674e-02, -2.458753621586901e-03, -2.570066199509673e-03, -9.150549798679852e-03, -1.207139039188453e-03, -2.544502595663415e-03, -2.544502595663415e-03, -5.077835124886579e-02, -5.077866636136486e-02, -5.077838450095450e-02, -5.077862950452205e-02, -5.077851142358703e-02, -5.077851142358703e-02, -4.796619253311119e-02, -4.799625793072122e-02, -4.795392721699030e-02, -4.797754957569601e-02, -4.800223308371043e-02, -4.800223308371043e-02, -3.941228327929902e-02, -4.023481826043589e-02, -3.887209708139858e-02, -3.930709243531674e-02, -3.979163856756558e-02, -3.979163856756558e-02, -1.699461260109768e-02, -2.513799092663431e-02, -1.684379783436418e-02, -4.788236178457133e-02, -1.874086073187371e-02, -1.874086073187371e-02, -1.165398259477562e-03, -1.327913051972601e-03, -1.001223348227557e-03, -1.197468807826647e-02, -1.212488872743877e-03, -1.212488872743877e-03, -3.972851620151716e-02, -3.967493445842300e-02, -3.969419290240254e-02, -3.970901203594233e-02, -3.970159924307943e-02, -3.970159924307943e-02, -3.939964275427948e-02, -3.790196514041727e-02, -3.837214882833472e-02, -3.878247981796139e-02, -3.857634919841849e-02, -3.857634919841849e-02, -4.068922010827127e-02, -2.822940071093352e-02, -3.052105966441344e-02, -3.367845672914124e-02, -3.212202279177275e-02, -3.212202279177275e-02, -3.675112261053425e-02, -8.579649433601384e-03, -1.101073006633818e-02, -3.296527772715099e-02, -1.464883614488158e-02, -1.464883614488158e-02, -2.860001359291007e-03, -3.699256056358143e-04, -6.985771108863897e-04, -1.414871384065708e-02, -1.033814599119137e-03, -1.033814599119136e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
