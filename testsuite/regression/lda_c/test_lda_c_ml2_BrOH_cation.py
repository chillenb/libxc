
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ml2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.387853411482243e-02, -4.387853562839623e-02, -4.387854282396044e-02, -4.387852029661775e-02, -4.387853203479042e-02, -4.387853203479042e-02, -4.147080559943718e-02, -4.147081139302525e-02, -4.147101105900836e-02, -4.147117356121995e-02, -4.147087749854067e-02, -4.147087749854067e-02, -3.272886135108351e-02, -3.271951372803015e-02, -3.249055822861684e-02, -3.256129217714094e-02, -3.253083324054173e-02, -3.253083324054173e-02, -1.900299992026409e-02, -1.915862645236142e-02, -3.397679244156480e-02, -1.618542672764935e-02, -1.504733396927549e-02, -1.504733396927549e-02, -1.243512034804965e-03, -1.304865173095791e-03, -6.118203637737898e-03, -7.344870660334195e-04, -7.537318386041294e-04, -7.537318386041295e-04, -4.238331323781094e-02, -4.238365819804894e-02, -4.238333042654287e-02, -4.238363493271188e-02, -4.238348741365823e-02, -4.238348741365823e-02, -3.949104484317401e-02, -3.952203308375365e-02, -3.946817073850191e-02, -3.949583430740401e-02, -3.951913605839476e-02, -3.951913605839476e-02, -3.156458183278203e-02, -3.229312226336140e-02, -3.085355462828783e-02, -3.120948516842003e-02, -3.169685390419999e-02, -3.169685390419992e-02, -1.276314813088762e-02, -1.902819305678708e-02, -1.207731777450563e-02, -3.940741108965023e-02, -1.419208501838090e-02, -1.419208501838090e-02, -5.701727581662406e-04, -7.185285280625665e-04, -5.521418828208485e-04, -9.032223366714548e-03, -6.214785879049010e-04, -6.214785879049010e-04, -3.160785023341186e-02, -3.155641324783037e-02, -3.157456021119132e-02, -3.158946953358136e-02, -3.158201113616610e-02, -3.158201113616610e-02, -3.136108215707970e-02, -2.994249290729458e-02, -3.037894689894341e-02, -3.078641026863215e-02, -3.058134701741123e-02, -3.058134701741123e-02, -3.269702887270506e-02, -2.152251204906258e-02, -2.349493665352145e-02, -2.645210911324762e-02, -2.497964494909571e-02, -2.497964494909570e-02, -2.914255961101990e-02, -5.907977093287035e-03, -7.610706523916730e-03, -2.606754929691361e-02, -1.080815615053134e-02, -1.080815615053133e-02, -1.726535328984374e-03, -1.966592810728780e-04, -4.076074761415830e-04, -1.033370213776271e-02, -5.834950227543655e-04, -5.834950227543649e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ml2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.405943644161506e-02, -4.405942377176827e-02, -4.405944195063510e-02, -4.405942058597827e-02, -4.405942498018470e-02, -4.405944860044315e-02, -4.405945697515626e-02, -4.405938202880280e-02, -4.405949121000836e-02, -4.405936580891887e-02, -4.405949121000836e-02, -4.405936580891887e-02, -4.236555883753851e-02, -4.236549367716257e-02, -4.236556758984220e-02, -4.236549318333875e-02, -4.236562353441638e-02, -4.236572186074598e-02, -4.236575500364685e-02, -4.236582203778073e-02, -4.236468385424224e-02, -4.236647048681089e-02, -4.236468385424224e-02, -4.236647048681089e-02, -3.556294141270654e-02, -3.552569880226285e-02, -3.555935919474054e-02, -3.551356148544291e-02, -3.530868252070212e-02, -3.537573310363925e-02, -3.541242428826062e-02, -3.539161909613846e-02, -3.508961516591338e-02, -3.573152803611370e-02, -3.508961516591338e-02, -3.573152803611370e-02, -2.285895133142816e-02, -2.220150879199485e-02, -2.307351669740100e-02, -2.232460614553398e-02, -3.672740023568521e-02, -3.646697420675087e-02, -1.961386223184054e-02, -1.938552780825135e-02, -1.564326612225182e-02, -3.534997153970244e-02, -1.564326612225181e-02, -3.534997153970248e-02, -1.711329799647339e-03, -1.579152359908671e-03, -1.805970395349267e-03, -1.648847242645633e-03, -8.085836933958607e-03, -7.588015777396291e-03, -9.614386714104215e-04, -9.833184938679968e-04, -8.047219031493525e-04, -2.043769317672976e-03, -8.047219031493525e-04, -2.043769317672976e-03, -4.301054227019391e-02, -4.300894180681967e-02, -4.301080475547892e-02, -4.300916188901879e-02, -4.301056918254553e-02, -4.300893892494144e-02, -4.301077000315748e-02, -4.300916411405208e-02, -4.301067880779771e-02, -4.300904892121926e-02, -4.301067880779771e-02, -4.300904892121926e-02, -4.092426736294803e-02, -4.092422111220229e-02, -4.094740480962116e-02, -4.094714004557420e-02, -4.090648345826253e-02, -4.090799173885539e-02, -4.092697391725252e-02, -4.092863739567551e-02, -4.094724885502039e-02, -4.094300540965808e-02, -4.094724885502039e-02, -4.094300540965808e-02, -3.453310928729902e-02, -3.456161054374231e-02, -3.517576122143814e-02, -3.517125461867126e-02, -3.414911259090824e-02, -3.373196716443740e-02, -3.443143683587882e-02, -3.406621390102358e-02, -3.441072913294899e-02, -3.495788513662802e-02, -3.441072913294890e-02, -3.495788513662790e-02, -1.575846910686169e-02, -1.561535567247543e-02, -2.258060273492857e-02, -2.249509213007063e-02, -1.531777129254844e-02, -1.454769324272169e-02, -4.086219029000582e-02, -4.086184852489421e-02, -1.779754756227834e-02, -1.687735754802199e-02, -1.779754756227834e-02, -1.687735754802199e-02, -7.764363719333477e-04, -7.371938291486238e-04, -9.608956717237699e-04, -9.417508230839693e-04, -7.627642524598067e-04, -7.059180557727628e-04, -1.138144783978264e-02, -1.130672604133634e-02, -1.122918712336084e-03, -7.076939399881518e-04, -1.122918712336085e-03, -7.076939399881518e-04, -3.460549226772566e-02, -3.456419396532059e-02, -3.456133125303022e-02, -3.451939802395763e-02, -3.457698262286854e-02, -3.453514144868747e-02, -3.458965085870171e-02, -3.454825468701923e-02, -3.458331174163492e-02, -3.454169738456233e-02, -3.458331174163492e-02, -3.454169738456233e-02, -3.438915105460708e-02, -3.435294134461030e-02, -3.315128220741404e-02, -3.309767173950622e-02, -3.353778840207641e-02, -3.348473117460321e-02, -3.389000358407357e-02, -3.384937845920855e-02, -3.371143527367626e-02, -3.366775368238570e-02, -3.371143527367626e-02, -3.366775368238570e-02, -3.552493073784917e-02, -3.550954104509876e-02, -2.515963965839463e-02, -2.506124646435426e-02, -2.716447534434471e-02, -2.699940497907759e-02, -2.997088016319726e-02, -2.988752076296874e-02, -2.852387620117981e-02, -2.852949467112624e-02, -2.852387620117980e-02, -2.852949467112623e-02, -3.245351537936352e-02, -3.236344405409117e-02, -7.587849946379423e-03, -7.527619513190619e-03, -9.824518489861468e-03, -9.469245699284697e-03, -2.968331656984266e-02, -2.945349387863736e-02, -1.384072063599355e-02, -1.309058457938076e-02, -1.384072063599354e-02, -1.309058457938074e-02, -2.323469991402399e-03, -2.218096904261267e-03, -2.619735253229198e-04, -2.611596491417557e-04, -5.658122567521866e-04, -5.204016942393362e-04, -1.299139442939882e-02, -1.277498835945118e-02, -1.010886655063663e-03, -6.720276132549817e-04, -1.010886655063662e-03, -6.720276132549810e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
