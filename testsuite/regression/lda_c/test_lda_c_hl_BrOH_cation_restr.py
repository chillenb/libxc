
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_hl_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_hl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.458037981061901e-01, -1.458038607523262e-01, -1.458041585943651e-01, -1.458032261382994e-01, -1.458037119822729e-01, -1.458037119822729e-01, -1.051518043315426e-01, -1.051518524094848e-01, -1.051535094140413e-01, -1.051548580856930e-01, -1.051523989239832e-01, -1.051523989239832e-01, -6.904231119976145e-02, -6.901871556253057e-02, -6.844333245618206e-02, -6.861994194969934e-02, -6.858249977047777e-02, -6.858249977047777e-02, -4.152871370193924e-02, -4.181170240036976e-02, -7.234009197068615e-02, -3.646954861842917e-02, -3.856774170858786e-02, -3.856774170858786e-02, -3.938112653633990e-03, -4.126193094940877e-03, -1.664108899034664e-02, -2.362415104570947e-03, -2.928440653619584e-03, -2.928440653619584e-03, -1.141579827891997e-01, -1.141620853924679e-01, -1.141581871384467e-01, -1.141618087509260e-01, -1.141600541554511e-01, -1.141600541554511e-01, -9.239110538857596e-02, -9.255086662909982e-02, -9.227375248602838e-02, -9.241573256597062e-02, -9.253585628813329e-02, -9.253585628813329e-02, -6.618935486756680e-02, -6.795265692418864e-02, -6.454385839793632e-02, -6.536426750707519e-02, -6.652923981931878e-02, -6.652923981931878e-02, -3.019422351207265e-02, -4.155725161479509e-02, -2.892664793374065e-02, -9.196440750540605e-02, -3.288143790469295e-02, -3.288143790469295e-02, -1.845484655070137e-03, -2.312251593619740e-03, -1.790309744408432e-03, -2.290309421548499e-02, -2.138839580614563e-03, -2.138839580614563e-03, -6.629225866397770e-02, -6.617004577783869e-02, -6.621312641117527e-02, -6.624854850756073e-02, -6.623082514699036e-02, -6.623082514699036e-02, -6.570880402469748e-02, -6.248485120540365e-02, -6.345490408375462e-02, -6.437739765930055e-02, -6.391098955269903e-02, -6.391098955269903e-02, -6.896165371551863e-02, -4.603375788726305e-02, -4.963876893735094e-02, -5.525905744553918e-02, -5.241848844491866e-02, -5.241848844491866e-02, -6.075159503275972e-02, -1.613652932836923e-02, -1.993009421993232e-02, -5.451014502185054e-02, -2.648321780197791e-02, -2.648321780197792e-02, -5.368127584519335e-03, -6.432214362787429e-04, -1.328290302597042e-03, -2.552382580879638e-02, -1.986341083429935e-03, -1.986341083431323e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_hl_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_hl", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.532914428292685e-01, -1.532915055097867e-01, -1.532918035152896e-01, -1.532908705474589e-01, -1.532913566580835e-01, -1.532913566580835e-01, -1.125767433622960e-01, -1.125767916001652e-01, -1.125784541163950e-01, -1.125798072738180e-01, -1.125773399325725e-01, -1.125773399325725e-01, -7.617236333841927e-02, -7.614838369869935e-02, -7.556351325938350e-02, -7.574306018294559e-02, -7.570499714093658e-02, -7.570499714093658e-02, -4.779666418974456e-02, -4.809471603112232e-02, -7.952010372081043e-02, -4.243480879171914e-02, -4.466657494968866e-02, -4.466657494968866e-02, -5.136593720600826e-03, -5.376603026515219e-03, -2.051931349681491e-02, -3.107633089834088e-03, -3.840305592834515e-03, -3.840305592834515e-03, -1.216076329421258e-01, -1.216117447068197e-01, -1.216078377477397e-01, -1.216114674475685e-01, -1.216097089341038e-01, -1.216097089341038e-01, -9.975903683516484e-02, -9.991972811436836e-02, -9.964099658882351e-02, -9.978380780502369e-02, -9.990463067013133e-02, -9.990463067013133e-02, -7.326999125072856e-02, -7.506455689945093e-02, -7.159307251081062e-02, -7.242942945815019e-02, -7.361609075005336e-02, -7.361609075005336e-02, -3.567984915463997e-02, -4.782672947350224e-02, -3.429864238098056e-02, -9.932982263275716e-02, -3.858838815550819e-02, -3.858838815550819e-02, -2.434622532850774e-03, -3.042487773418412e-03, -2.362564623940682e-03, -2.764140691166853e-02, -2.817013862258504e-03, -2.817013862258504e-03, -7.337478628874548e-02, -7.325032633881630e-02, -7.329420043849619e-02, -7.333027383049337e-02, -7.331222472134626e-02, -7.331222472134626e-02, -7.278049540067745e-02, -6.949144118532682e-02, -7.048205130740215e-02, -7.142330588486187e-02, -7.094750641685348e-02, -7.094750641685348e-02, -7.609039157470167e-02, -5.252100990817089e-02, -5.627328437503378e-02, -6.208196215696145e-02, -5.915189557895636e-02, -5.915189557895636e-02, -6.771922522741543e-02, -1.993466797077280e-02, -2.428920049767510e-02, -6.131051101919024e-02, -3.161784887334353e-02, -3.161784887334354e-02, -6.950389408343321e-03, -8.543979001166669e-04, -1.757446648341368e-03, -3.055819578871568e-02, -2.618382704191990e-03, -2.618382704191707e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
