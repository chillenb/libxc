
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc17_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.616515009584653e-05, -1.616501483855927e-05, -1.616437179274114e-05, -1.616638506596655e-05, -1.616533604511571e-05, -1.616533604511571e-05, -3.812468051005686e-03, -3.812442934057282e-03, -3.811577382431226e-03, -3.810873039247802e-03, -3.812157435017994e-03, -3.812157435017994e-03, -7.802277852516688e-02, -7.774546113810396e-02, -7.122873248556293e-02, -7.317860175526118e-02, -7.276148296669821e-02, -7.276148296669821e-02, -1.102236540937540e-03, -1.153356311432230e-03, -1.228413286133236e-01, -4.808751244735452e-04, -6.815423992352830e-04, -6.815423992352829e-04, -4.625423920429104e-08, -5.393480811779204e-08, -9.057770000195637e-06, -8.910005039102389e-09, -1.767847549401150e-08, -1.767847549401150e-08, -1.121965077049770e-03, -1.121344090886809e-03, -1.121934137747296e-03, -1.121385953549293e-03, -1.121651503619026e-03, -1.121651503619026e-03, -2.303149571892196e-02, -2.249805567980430e-02, -2.343183375956726e-02, -2.294840300248817e-02, -2.254761519709811e-02, -2.254761519709811e-02, -5.014939333881576e-02, -6.604561712970941e-02, -3.872042522506858e-02, -4.404952285188837e-02, -5.289751937970048e-02, -5.289751937970048e-02, -1.606870301782422e-04, -1.107292202521470e-03, -1.272077373313086e-04, -2.452275232402128e-02, -2.598203032183780e-04, -2.598203032183780e-04, -4.092588799921081e-09, -8.324270073894091e-09, -3.721610671041933e-09, -3.868696547366345e-05, -6.506640538981822e-09, -6.506640538981822e-09, -5.096637344419039e-02, -4.999752904965913e-02, -5.033697550001869e-02, -5.061776817495520e-02, -5.047708309745485e-02, -5.047708309745485e-02, -4.650159958236105e-02, -2.805257089217770e-02, -3.264214671957021e-02, -3.772138900591272e-02, -3.505963804672641e-02, -3.505963804672641e-02, -7.707807951681535e-02, -2.245062762472301e-03, -3.918407577068928e-03, -9.238464391849699e-03, -5.993418100435830e-03, -5.993418100435828e-03, -2.143404671369335e-02, -7.941958358813742e-06, -2.012633508996571e-05, -8.242538746092045e-03, -7.988422238108349e-05, -7.988422238108350e-05, -1.300218274257925e-07, -1.589916247805440e-10, -1.470411967739991e-09, -6.614370370892579e-05, -5.154927055195895e-09, -5.154927055195880e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc17_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.254043867488710e-09, 1.254022884005710e-09, 1.253923125794104e-09, 1.254235465960980e-09, 1.254072715517111e-09, 1.254072715517111e-09, 6.649240937956391e-05, 6.649155447123337e-05, 6.646209678358730e-05, 6.643813014451747e-05, 6.648183727580441e-05, 6.648183727580441e-05, -1.619406720245630e-01, -1.614207235999330e-01, -1.489380263131559e-01, -1.527237652392525e-01, -1.519173894111042e-01, -1.519173894111042e-01, -2.210224582479050e-03, -2.313005935865915e-03, -2.264456156944373e-01, -9.628535308849928e-04, -1.365295415269326e-03, -1.365295415269326e-03, -9.250848867795841e-08, -1.078696301985996e-07, -1.811593376303402e-05, -1.782001045926805e-08, -3.535695248815944e-08, -3.535695248815944e-08, 5.957752874648821e-06, 5.951206174267639e-06, 5.957426615386452e-06, 5.951647396755939e-06, 5.954446606711282e-06, 5.954446606711282e-06, 1.875554345422984e-03, 1.803404777646287e-03, 1.930178887362696e-03, 1.864267162009948e-03, 1.810076281530752e-03, 1.810076281530752e-03, -1.059208109218646e-01, -1.386867974285282e-01, -8.159124511299869e-02, -9.298450146570823e-02, -1.116973985868713e-01, -1.116973985868713e-01, -3.214977484893782e-04, -2.220388418778267e-03, -2.544930235821960e-04, 2.080959829829654e-03, -5.199635841994742e-04, -5.199635841994742e-04, -8.185177680238715e-09, -1.664854048039682e-08, -7.443221408565715e-09, -7.738111153481397e-05, -1.301328128117821e-08, -1.301328128117821e-08, -1.076419307473940e-01, -1.056005432625097e-01, -1.063162599861018e-01, -1.069079081133704e-01, -1.066115211352699e-01, -1.066115211352699e-01, -9.820119890739003e-02, -5.868965808839172e-02, -6.854423204330057e-02, -7.944924769366803e-02, -7.373660171944181e-02, -7.373660171944181e-02, -1.601654653582928e-01, -4.513645396658432e-03, -7.906959795782787e-03, -1.884107593834615e-02, -1.214665475400864e-02, -1.214665475400863e-02, -4.452991216369937e-02, -1.588421944606463e-05, -4.025461402246862e-05, -1.677871826184892e-02, -1.597990452526643e-04, -1.597990452526643e-04, -2.600437359986957e-07, -3.179832496824241e-10, -2.940823945858115e-09, -1.323083899641871e-04, -1.030985423794349e-08, -1.030985423794346e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
