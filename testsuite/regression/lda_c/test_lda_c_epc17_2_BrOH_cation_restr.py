
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc17_2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.837335289027199e-06, -7.837269714977946e-06, -7.836957960106281e-06, -7.837934014558692e-06, -7.837425439042578e-06, -7.837425439042578e-06, -1.831607726606662e-03, -1.831595767250369e-03, -1.831183636718381e-03, -1.830848264036712e-03, -1.831459827680984e-03, -1.831459827680984e-03, -6.732957699608634e-02, -6.715327853651321e-02, -6.285079307232649e-02, -6.416999921270654e-02, -6.389006181045344e-02, -6.389006181045344e-02, -1.102193967527788e-03, -1.153307547534220e-03, -8.796752485373333e-02, -4.808715787715896e-04, -6.815323144518648e-04, -6.815323144518647e-04, -4.625423920428788e-08, -5.393480811778703e-08, -9.057769976446285e-06, -8.910005039102368e-09, -1.767847549401132e-08, -1.767847549401132e-08, -5.424885598199213e-04, -5.421891214820620e-04, -5.424736409688075e-04, -5.422093076059213e-04, -5.423373554247077e-04, -5.423373554247077e-04, -1.064059951506113e-02, -1.040394593828164e-02, -1.081795880942354e-02, -1.060376120652017e-02, -1.042594822681522e-02, -1.042594822681522e-02, -4.694208078589857e-02, -5.921442201040566e-02, -3.716709875248603e-02, -4.181627166438597e-02, -4.917903130384516e-02, -4.917903130384516e-02, -1.606868976786992e-04, -1.107249041645285e-03, -1.272076715833546e-04, -1.130021383599052e-02, -2.598197433516190e-04, -2.598197433516190e-04, -4.092588799921079e-09, -8.324270073894073e-09, -3.721610671041931e-09, -3.868696362345727e-05, -6.506640538981814e-09, -6.506640538981814e-09, -4.761190747134063e-02, -4.681712578692861e-02, -4.709623284082617e-02, -4.732658667969000e-02, -4.721123247696847e-02, -4.721123247696847e-02, -4.390275940891355e-02, -2.743287944678792e-02, -3.168580366977111e-02, -3.627878700894636e-02, -3.388748226974683e-02, -3.388748226974683e-02, -6.672671195917378e-02, -2.244704968991592e-03, -3.916520336593934e-03, -9.214340205593002e-03, -5.986730473028843e-03, -5.986730473028841e-03, -2.114920734458745e-02, -7.941958342804418e-06, -2.012633482943501e-05, -8.225325841230592e-03, -7.988420609475068e-05, -7.988420609475069e-05, -1.300218274257223e-07, -1.589916247805440e-10, -1.470411967739990e-09, -6.614369446333999e-05, -5.154927055195890e-09, -5.154927055195875e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc17_2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc17_2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.947746275235113e-10, 2.947696953523747e-10, 2.947462471997565e-10, 2.948196627203510e-10, 2.947814082453245e-10, 2.947814082453245e-10, 1.534703833997021e-05, 1.534684282053991e-05, 1.534010576104309e-05, 1.533462449027678e-05, 1.534462047398752e-05, 1.534462047398752e-05, -1.205937734515867e-01, -1.204324837269294e-01, -1.159622641601169e-01, -1.174363315596841e-01, -1.171307762591735e-01, -1.171307762591735e-01, -2.210053847838934e-03, -2.312810352246129e-03, -1.161233754508572e-01, -9.628393318595608e-04, -1.365255011013589e-03, -1.365255011013589e-03, -9.250848867794578e-08, -1.078696301985795e-07, -1.811593366803455e-05, -1.782001045926796e-08, -3.535695248815873e-08, -3.535695248815873e-08, 1.392852009114943e-06, 1.391325669833043e-06, 1.392775943123609e-06, 1.391428539462015e-06, 1.392081165685743e-06, 1.392081165685743e-06, 4.003294705778974e-04, 3.856553984026021e-04, 4.114107664823341e-04, 3.980366768499638e-04, 3.870140900320641e-04, 3.870140900320641e-04, -9.280568971354396e-02, -1.114813202549764e-01, -7.517624820407003e-02, -8.379512769606233e-02, -9.654557778912314e-02, -9.654557778912314e-02, -3.214972182874427e-04, -2.220215326180551e-03, -2.544927605102848e-04, 4.418741509930021e-04, -5.199613433429327e-04, -5.199613433429327e-04, -8.185177680238709e-09, -1.664854048039674e-08, -7.443221408565708e-09, -7.738110413330260e-05, -1.301328128117818e-08, -1.301328128117818e-08, -9.393883646157218e-02, -9.259308738513854e-02, -9.306744592169515e-02, -9.345751154121450e-02, -9.326234152796620e-02, -9.326234152796620e-02, -8.753155443556007e-02, -5.612534612497792e-02, -6.458667748979520e-02, -7.348859636321381e-02, -6.888852229153793e-02, -6.888852229153793e-02, -1.200346303722421e-01, -4.512206840696959e-03, -7.899345099908830e-03, -1.874280588828459e-02, -1.211956270762956e-02, -1.211956270762956e-02, -4.335425050912398e-02, -1.588421938202611e-05, -4.025461298029548e-05, -1.670871339360003e-02, -1.597989800948624e-04, -1.597989800948624e-04, -2.600437359984147e-07, -3.179832496824241e-10, -2.940823945858115e-09, -1.323083529759806e-04, -1.030985423794347e-08, -1.030985423794344e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
