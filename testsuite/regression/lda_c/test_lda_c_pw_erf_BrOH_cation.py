
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_erf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_erf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.635547393132644e-01, -1.635548266446305e-01, -1.635552418505207e-01, -1.635539419563266e-01, -1.635546192344843e-01, -1.635546192344843e-01, -1.062637838115414e-01, -1.062638526208111e-01, -1.062662242632469e-01, -1.062681546196918e-01, -1.062646241388257e-01, -1.062646241388257e-01, -5.320672930379177e-02, -5.317069481265373e-02, -5.229899236464922e-02, -5.256806583138890e-02, -5.233451375626324e-02, -5.233451375626324e-02, -1.373642167728338e-02, -1.406691174198844e-02, -5.813914946967721e-02, -8.365075642683465e-03, -6.555419785439734e-03, -6.555419785439734e-03, -1.355123197269853e-06, -1.576494584964658e-06, -2.665545799234743e-04, -2.629832278567765e-07, -2.745677565836949e-07, -2.745677565836949e-07, -1.190981473453445e-01, -1.191039698570021e-01, -1.190984371939408e-01, -1.191035774511175e-01, -1.191010870313844e-01, -1.191010870313844e-01, -8.786268986508318e-02, -8.809496881998431e-02, -8.769183633632234e-02, -8.789828862434543e-02, -8.807189274938193e-02, -8.807189274938193e-02, -4.888856770361102e-02, -5.155824677739136e-02, -4.635090696612688e-02, -4.759947057172273e-02, -4.930066798842066e-02, -4.930066798842062e-02, -3.751250702430611e-03, -1.379768332887810e-02, -3.086737718374741e-03, -8.724201368613703e-02, -5.402893489864783e-03, -5.402893489864783e-03, -1.204641351579792e-07, -2.457250848787035e-07, -1.091001272707139e-07, -1.087876839162245e-03, -1.544784795303421e-07, -1.544784795299084e-07, -4.904402098905814e-02, -4.885902250636606e-02, -4.892423056254062e-02, -4.897785777345523e-02, -4.895102556244724e-02, -4.895102556244724e-02, -4.816113210978359e-02, -4.329140425115394e-02, -4.475399499142602e-02, -4.614749742504999e-02, -4.544278742637851e-02, -4.544278742637851e-02, -5.308523853096601e-02, -1.950291652107912e-02, -2.446302265600077e-02, -3.254152399481905e-02, -2.842040691211518e-02, -2.842040691211517e-02, -4.068548792370071e-02, -2.354483973757062e-04, -5.847753392068458e-04, -3.144232870643953e-02, -2.078209460788634e-03, -2.078209460788606e-03, -3.831321871840959e-06, -4.695157309708535e-09, -4.305503925063590e-08, -1.769806723368704e-03, -1.275942447620613e-07, -1.275942447618444e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_erf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_erf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.739926825456819e-01, -1.739930653010006e-01, -1.739926383646962e-01, -1.739932837902724e-01, -1.739937322219596e-01, -1.739930186537932e-01, -1.739909461408641e-01, -1.739932102646209e-01, -1.739908599423172e-01, -1.739946483055526e-01, -1.739908599423172e-01, -1.739946483055526e-01, -1.168896508299192e-01, -1.168924384823463e-01, -1.168895215657117e-01, -1.168927047743553e-01, -1.168955774983494e-01, -1.168913712479148e-01, -1.168968299093427e-01, -1.168939624466530e-01, -1.169301181699529e-01, -1.168536853006295e-01, -1.169301181699529e-01, -1.168536853006295e-01, -6.421751933374029e-02, -6.377382194843367e-02, -6.423214576403269e-02, -6.368751815284732e-02, -6.269723152780962e-02, -6.346088716201227e-02, -6.346845802004010e-02, -6.322831962810321e-02, -5.981396051240329e-02, -6.705844203388490e-02, -5.981396051240329e-02, -6.705844203388490e-02, -2.222509653327743e-02, -2.028790525110820e-02, -2.281270924072747e-02, -2.057735676596059e-02, -7.106097330494715e-02, -6.704660370959195e-02, -1.414532983368301e-02, -1.364859490928078e-02, -8.300158197974208e-03, -3.023379203526914e-02, -8.300158197974212e-03, -3.023379203526913e-02, -2.981105822950536e-06, -2.485077562925137e-06, -3.514529089093346e-06, -2.859635142452569e-06, -5.765182137774240e-04, -4.918287788584978e-04, -5.130622645571867e-07, -5.395779889212011e-07, -3.255280576807199e-07, -1.763342389798049e-06, -3.255280576807199e-07, -1.763342389798049e-06, -1.296443918142790e-01, -1.296983391218192e-01, -1.296494787937477e-01, -1.297048516340145e-01, -1.296441788055408e-01, -1.296991302106528e-01, -1.296497105568752e-01, -1.297038373223768e-01, -1.296468251526899e-01, -1.297017623531275e-01, -1.296468251526899e-01, -1.297017623531275e-01, -9.857210299736718e-02, -9.858089308206566e-02, -9.878389373773118e-02, -9.883134473623151e-02, -9.855692410184262e-02, -9.825681883379656e-02, -9.876894229590799e-02, -9.845569289461630e-02, -9.840453166650044e-02, -9.916953220645687e-02, -9.840453166650044e-02, -9.916953220645687e-02, -5.946845161036459e-02, -5.974464475511543e-02, -6.234895016784862e-02, -6.229943467217990e-02, -5.889352947163128e-02, -5.529590348155758e-02, -6.002698082540062e-02, -5.669693833599256e-02, -5.753071254745933e-02, -6.289950620395508e-02, -5.753071254745929e-02, -6.289950620395503e-02, -6.844063738557144e-03, -6.665559002946899e-03, -2.140837971438916e-02, -2.115507254335179e-02, -6.085729170713895e-03, -5.254880122459052e-03, -9.792012427573014e-02, -9.799782323873764e-02, -1.022409257299619e-02, -8.741119668736714e-03, -1.022409257299619e-02, -8.741119668736714e-03, -2.556761710370842e-07, -2.277988916814874e-07, -5.027906699302857e-07, -4.806435532749266e-07, -2.386861890063372e-07, -2.009613322008588e-07, -2.115506304397132e-03, -2.078529572487494e-03, -5.545209097869528e-07, -2.141710120397427e-07, -5.545209097854620e-07, -2.141710120391192e-07, -5.996740167740740e-02, -5.956434146296428e-02, -5.977985132656122e-02, -5.937405251949876e-02, -5.984661873221388e-02, -5.944049938719345e-02, -5.989970437093874e-02, -5.949691456557710e-02, -5.987312321259876e-02, -5.946870869805813e-02, -5.987312321259876e-02, -5.946870869805813e-02, -5.903281235763250e-02, -5.869334311520887e-02, -5.405020238494707e-02, -5.364265914271955e-02, -5.557495377175032e-02, -5.514632776975054e-02, -5.697106126443633e-02, -5.662268863589608e-02, -5.625280152336742e-02, -5.588942757499608e-02, -5.625280152336742e-02, -5.588942757499608e-02, -6.396288647771306e-02, -6.378064050667620e-02, -2.838030338011909e-02, -2.802604515649165e-02, -3.413457956617987e-02, -3.345523195628325e-02, -4.274292563583852e-02, -4.231273383931689e-02, -3.808997689077876e-02, -3.811568560717918e-02, -3.808997689077877e-02, -3.811568560717917e-02, -5.144308540512148e-02, -5.082586925248406e-02, -4.741091171196692e-04, -4.647649880176800e-04, -1.205920296793145e-03, -1.096250652719167e-03, -4.193674378900094e-02, -4.079027884927212e-02, -4.216534090722701e-03, -3.613095673344356e-03, -4.216534090722653e-03, -3.613095673344307e-03, -8.095455540239524e-06, -7.276989846429101e-06, -9.422604356122754e-09, -9.358292260001098e-09, -9.485574625602240e-08, -7.884276176837026e-08, -3.420326211117356e-03, -3.265661445939530e-03, -4.269922044038556e-07, -1.819959250053105e-07, -4.269922044022564e-07, -1.819959250030608e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
