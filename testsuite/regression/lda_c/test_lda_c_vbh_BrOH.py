
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vbh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vbh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.722753582151812e-01, -1.722754193131724e-01, -1.722757368787123e-01, -1.722747354713222e-01, -1.722753900600836e-01, -1.722753900600836e-01, -1.266812660950890e-01, -1.266813186102523e-01, -1.266837920033278e-01, -1.266848336992872e-01, -1.266813996990360e-01, -1.266813996990360e-01, -8.578733844900391e-02, -8.576237332100746e-02, -8.510655376638741e-02, -8.529702248288866e-02, -8.577823586752635e-02, -8.577823586752635e-02, -5.536666975130314e-02, -5.566140783784715e-02, -9.020208980419998e-02, -4.834871845114276e-02, -5.545544311109839e-02, -5.545544311109839e-02, -9.518732585279091e-03, -9.888987324026625e-03, -2.705207947609910e-02, -5.037375879913385e-03, -9.804318123045207e-03, -9.804318123045207e-03, -1.367833896815776e-01, -1.367878500126445e-01, -1.367838603202503e-01, -1.367873282752534e-01, -1.367856568167765e-01, -1.367856568167765e-01, -1.123048308256022e-01, -1.124795711556471e-01, -1.122338468561591e-01, -1.123707139750386e-01, -1.125144249987018e-01, -1.125144249987018e-01, -8.242777070124251e-02, -8.443166434562745e-02, -8.116070397507302e-02, -8.217815063765530e-02, -8.334019195464373e-02, -8.334019195464373e-02, -4.193093356149571e-02, -5.552568971453447e-02, -4.166995915525737e-02, -1.118231051796298e-01, -4.491301137784803e-02, -4.491301137784803e-02, -4.876460862268597e-03, -5.498340406779198e-03, -4.235302287071814e-03, -3.279971219899682e-02, -5.057939897595928e-03, -5.057939897595928e-03, -8.318701312227327e-02, -8.305741823069897e-02, -8.310395207221914e-02, -8.313979391686177e-02, -8.312186142105542e-02, -8.312186142105542e-02, -8.239769853829088e-02, -7.897063928575650e-02, -8.001913296060180e-02, -8.095395028460513e-02, -8.048195150380813e-02, -8.048195150380813e-02, -8.558158969664002e-02, -6.069874284143949e-02, -6.465294057311445e-02, -7.039363126067169e-02, -6.751164456297475e-02, -6.751164456297473e-02, -7.649605985119010e-02, -2.581013918685258e-02, -3.090312948040604e-02, -6.905880984843497e-02, -3.779204049707660e-02, -3.779204049707660e-02, -1.083467134598292e-02, -1.635841458366623e-03, -3.017010614910646e-03, -3.688394439923016e-02, -4.363647132561601e-03, -4.363647132561667e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vbh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vbh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.806656650963743e-01, -1.806657262178579e-01, -1.806660439055019e-01, -1.806650421130650e-01, -1.806656969535212e-01, -1.806656969535212e-01, -1.350221866929364e-01, -1.350222393309594e-01, -1.350247185102651e-01, -1.350257626429880e-01, -1.350223206094503e-01, -1.350223206094503e-01, -9.389020913071291e-02, -9.386495195907039e-02, -9.320135760772115e-02, -9.339410492012165e-02, -9.388100009967720e-02, -9.388100009967720e-02, -6.278865241901897e-02, -6.309455326446788e-02, -9.835236803926153e-02, -5.546378603124969e-02, -6.288080129238179e-02, -6.288080129238179e-02, -1.213950637307033e-02, -1.259255506465740e-02, -3.252190717875714e-02, -6.551233652291493e-03, -1.248906116027016e-02, -1.248906116027016e-02, -1.451437945394557e-01, -1.451482618680093e-01, -1.451442659165371e-01, -1.451477393121664e-01, -1.451460652315512e-01, -1.451460652315512e-01, -1.206004744423073e-01, -1.207759333855815e-01, -1.205291971370410e-01, -1.206666291153137e-01, -1.208109299725728e-01, -1.208109299725728e-01, -9.048866507796366e-02, -9.251825651487013e-02, -8.920428083175759e-02, -9.023570075514881e-02, -9.141303680826979e-02, -9.141303680826979e-02, -4.868277927789719e-02, -6.295371077456209e-02, -4.840505532695864e-02, -1.201167418909834e-01, -5.184478952408968e-02, -5.184478952408968e-02, -6.346688247319266e-03, -7.135601203719359e-03, -5.528791346054387e-03, -3.885307920884211e-02, -6.577352640798355e-03, -6.577352640798355e-03, -9.125788133197879e-02, -9.112660486896491e-02, -9.117374349446865e-02, -9.121005041431113e-02, -9.119188531209819e-02, -9.119188531209819e-02, -9.045819175066196e-02, -8.698218905266719e-02, -8.804635715828447e-02, -8.899461920199078e-02, -8.851589332105586e-02, -8.851589332105586e-02, -9.368204498975397e-02, -6.830429382514563e-02, -7.237218120945277e-02, -7.824982772511280e-02, -7.530289168482313e-02, -7.530289168482313e-02, -8.446797463702134e-02, -3.113595245502803e-02, -3.677803897580708e-02, -7.688582564443298e-02, -4.425741046062929e-02, -4.425741046062929e-02, -1.374420750442148e-02, -2.162739249522717e-03, -3.961509916078315e-03, -4.328013156116482e-02, -5.692889447254025e-03, -5.692889447253880e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
