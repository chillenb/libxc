
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ow_lyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.854868507810976e-02, -4.854868659084289e-02, -4.854869445343181e-02, -4.854866965930903e-02, -4.854868586656230e-02, -4.854868586656230e-02, -4.554239202167545e-02, -4.554239909123398e-02, -4.554273204342956e-02, -4.554287226134816e-02, -4.554241000733041e-02, -4.554241000733041e-02, -3.471488325792291e-02, -3.470439454049676e-02, -3.442714475659831e-02, -3.450800601816343e-02, -3.471105950458089e-02, -3.471105950458089e-02, -1.949156930544992e-02, -1.964741800430571e-02, -3.649256801187866e-02, -1.585997550997251e-02, -1.953849029027524e-02, -1.953849029027524e-02, -1.739548332451247e-03, -1.819042714123824e-03, -6.640875292568426e-03, -8.501631823024050e-04, -1.800780561547886e-03, -1.800780561547886e-03, -4.668830994216236e-02, -4.668873056930598e-02, -4.668835432846950e-02, -4.668868137086326e-02, -4.668852375056678e-02, -4.668852375056678e-02, -4.306178412361838e-02, -4.309929746330702e-02, -4.304648769206807e-02, -4.307595159471505e-02, -4.310675584319520e-02, -4.310675584319520e-02, -3.326100145120683e-02, -3.413840471597460e-02, -3.269115861501707e-02, -3.314964512127134e-02, -3.366418365887264e-02, -3.366418365887264e-02, -1.274264101212356e-02, -1.957563114360367e-02, -1.262123036209641e-02, -4.295732057609095e-02, -1.416117397986135e-02, -1.416117397986135e-02, -8.206423256717027e-04, -9.356300918909757e-04, -7.046174160956395e-04, -8.789825469696436e-03, -8.539474585500198e-04, -8.539474585500198e-04, -3.359692256328158e-02, -3.353988240613629e-02, -3.356037809925105e-02, -3.357615369509969e-02, -3.356826198272928e-02, -3.356826198272928e-02, -3.324760996736321e-02, -3.167999091236969e-02, -3.216813389822700e-02, -3.259709883221263e-02, -3.238125880124404e-02, -3.238125880124404e-02, -3.462829763824197e-02, -2.233023098334612e-02, -2.443843290871232e-02, -2.744565498990392e-02, -2.594764008458843e-02, -2.594764008458843e-02, -3.050000445187229e-02, -6.212553567518975e-03, -8.050579821972598e-03, -2.675535420245996e-02, -1.087328553519054e-02, -1.087328553519054e-02, -2.026409178175880e-03, -2.597480262393752e-04, -4.910932068826731e-04, -1.047987922807513e-02, -7.276391803211458e-04, -7.276391803211448e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ow_lyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.875642202624559e-02, -4.875642304768012e-02, -4.875642835669260e-02, -4.875641161509123e-02, -4.875642255862810e-02, -4.875642255862810e-02, -4.666524256098704e-02, -4.666524762262654e-02, -4.666548600788829e-02, -4.666558639988434e-02, -4.666525543829639e-02, -4.666525543829639e-02, -3.811839985690239e-02, -3.810934996329173e-02, -3.786959211350309e-02, -3.793962630163689e-02, -3.811510081205502e-02, -3.811510081205502e-02, -2.341371993885693e-02, -2.358017510892709e-02, -3.963067953907538e-02, -1.944174840141565e-02, -2.346386882933283e-02, -2.346386882933283e-02, -2.298887891818324e-03, -2.402963035967410e-03, -8.555590096940593e-03, -1.128652052229813e-03, -2.379061552371232e-03, -2.379061552371232e-03, -4.747679304979506e-02, -4.747708767399095e-02, -4.747682413986583e-02, -4.747705321354363e-02, -4.747694281011427e-02, -4.747694281011427e-02, -4.484747811365796e-02, -4.487558868883783e-02, -4.483601027626585e-02, -4.485809673256141e-02, -4.488117534328668e-02, -4.488117534328668e-02, -3.684973558319252e-02, -3.761879015300831e-02, -3.634467175785518e-02, -3.675138414389501e-02, -3.720442556564402e-02, -3.720442556564402e-02, -1.588963969053201e-02, -2.350354360783033e-02, -1.574863075083708e-02, -4.476909795751366e-02, -1.752234849417394e-02, -1.752234849417394e-02, -1.089625216751074e-03, -1.241573458099097e-03, -9.361247959283511e-04, -1.119610569751226e-02, -1.133654044896271e-03, -1.133654044896271e-03, -3.714540735343373e-02, -3.709530944230501e-02, -3.711331572129577e-02, -3.712717132942290e-02, -3.712024050902370e-02, -3.712024050902370e-02, -3.683791693261341e-02, -3.543761683661068e-02, -3.587722964596011e-02, -3.626088132029166e-02, -3.606815310985213e-02, -3.606815310985213e-02, -3.804364724191599e-02, -2.639395298410097e-02, -2.853661053794397e-02, -3.148871676690430e-02, -3.003348062546357e-02, -3.003348062546357e-02, -3.436160095030560e-02, -8.021809109211332e-03, -1.029482328255725e-02, -3.082190795857958e-02, -1.369638330048054e-02, -1.369638330048054e-02, -2.674046898287676e-03, -3.458734084632957e-04, -6.531563177451074e-04, -1.322877845405923e-02, -9.665969959064483e-04, -9.665969959064470e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
