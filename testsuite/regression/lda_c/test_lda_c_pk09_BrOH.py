
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pk09_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pk09", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.574532007238823e-01, -1.574532493092417e-01, -1.574535018189614e-01, -1.574527055791356e-01, -1.574532260423798e-01, -1.574532260423798e-01, -1.109907622748448e-01, -1.109908217900226e-01, -1.109936248720775e-01, -1.109948054200051e-01, -1.109909136873714e-01, -1.109909136873714e-01, -6.687535203816147e-02, -6.685059625201670e-02, -6.620135289136705e-02, -6.638969799608305e-02, -6.686632543671929e-02, -6.686632543671929e-02, -3.889372034404043e-02, -3.914359788019178e-02, -7.130052193725052e-02, -3.307727326623215e-02, -3.896893557927788e-02, -3.896893557927788e-02, -5.587892595530062e-03, -5.818730016287707e-03, -1.708717617505546e-02, -2.852248070598001e-03, -5.765891569677772e-03, -5.765891569677772e-03, -1.223828609557247e-01, -1.223878418951425e-01, -1.223833865305446e-01, -1.223872592654203e-01, -1.223853927185830e-01, -1.223853927185830e-01, -9.481662566323072e-02, -9.501044182940506e-02, -9.473792045369885e-02, -9.488968963891949e-02, -9.504911216046937e-02, -9.504911216046937e-02, -6.357090673633611e-02, -6.553539440903224e-02, -6.233866308959468e-02, -6.332754157502085e-02, -6.446299903596102e-02, -6.446299903596102e-02, -2.799178050545919e-02, -3.902848195802042e-02, -2.778985967436218e-02, -9.428282009775536e-02, -3.032629233616634e-02, -3.032629233616634e-02, -2.756696538177721e-03, -3.127280180311804e-03, -2.378546516694861e-03, -2.115550399272566e-02, -2.864476603997428e-03, -2.864476603997428e-03, -6.431295476045726e-02, -6.418609957518423e-02, -6.423164041263868e-02, -6.426672448205317e-02, -6.424917034964868e-02, -6.424917034964868e-02, -6.354157234938293e-02, -6.022676726726289e-02, -6.123500379529117e-02, -6.213831700360805e-02, -6.168170695026583e-02, -6.168170695026584e-02, -6.667141832037292e-02, -4.348124905218548e-02, -4.697258730647497e-02, -5.217234130513455e-02, -4.954270655862618e-02, -4.954270655862211e-02, -5.786772588666077e-02, -1.623031718822346e-02, -1.979376648686562e-02, -5.094960097862081e-02, -2.483488142031089e-02, -2.483488142031090e-02, -6.410858047798664e-03, -8.979994155900184e-04, -1.673050154177270e-03, -2.415521429084833e-02, -2.453898371901243e-03, -2.453898371901243e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pk09_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pk09", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.641244600583880e-01, -1.641245015529604e-01, -1.641247172392439e-01, -1.641240371423011e-01, -1.641244816743803e-01, -1.641244816743803e-01, -1.204434808966897e-01, -1.204435405104818e-01, -1.204463482220953e-01, -1.204475307155466e-01, -1.204436325597020e-01, -1.204436325597020e-01, -7.491076536272281e-02, -7.488474357979734e-02, -7.420218946509380e-02, -7.440021959453361e-02, -7.490127718132121e-02, -7.490127718132121e-02, -4.518048945759136e-02, -4.545093805136495e-02, -7.955727789242417e-02, -3.884137221672098e-02, -4.526191179765691e-02, -4.526191179765691e-02, -7.219762949421526e-03, -7.506387723060347e-03, -2.087771673124242e-02, -3.752328808788783e-03, -7.440851339926175e-03, -7.440851339926175e-03, -1.317191519772221e-01, -1.317240186396502e-01, -1.317196654967105e-01, -1.317234493811890e-01, -1.317216256613734e-01, -1.317216256613734e-01, -1.040155661780539e-01, -1.042147958583235e-01, -1.039346484602056e-01, -1.040906767577715e-01, -1.042545403357711e-01, -1.042545403357711e-01, -7.143461792749817e-02, -7.350184442010851e-02, -7.013691005999022e-02, -7.117838731176589e-02, -7.237360840928783e-02, -7.237360840928783e-02, -3.322078900200202e-02, -4.532636301066786e-02, -3.299596420645057e-02, -1.034665951872470e-01, -3.581072305896765e-02, -3.581072305896765e-02, -3.628589599227479e-03, -4.107446997374869e-03, -3.137050596374271e-03, -2.553297221036521e-02, -3.768151192276284e-03, -3.768151192276284e-03, -7.221570473205344e-02, -7.208219582997362e-02, -7.213012629012075e-02, -7.216705056981620e-02, -7.214857577644912e-02, -7.214857577644912e-02, -7.140373442153422e-02, -6.791087740942715e-02, -6.897391948092113e-02, -6.992584353701239e-02, -6.944471825730963e-02, -6.944471825730883e-02, -7.469639350655877e-02, -5.012444953543555e-02, -5.386077496387279e-02, -5.939320798835878e-02, -5.659951490229318e-02, -5.659951490228776e-02, -6.542116995207323e-02, -1.988867864328292e-02, -2.398190811167703e-02, -5.809515134034354e-02, -2.969049415583237e-02, -2.969049415583240e-02, -8.238014995986188e-03, -1.188378211268823e-03, -2.212536790233646e-03, -2.892606443152323e-02, -3.235228912733097e-03, -3.235228912733096e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
