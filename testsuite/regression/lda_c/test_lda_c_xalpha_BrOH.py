
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_xalpha_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.910872882456575e+00, -9.910896939389851e+00, -9.911021979677615e+00, -9.910627684473873e+00, -9.910885421170743e+00, -9.910885421170743e+00, -1.613542586425500e+00, -1.613545972763967e+00, -1.613705472713475e+00, -1.613772652509143e+00, -1.613551201630788e+00, -1.613551201630788e+00, -3.092959653253607e-01, -3.089784733757041e-01, -3.007498457265887e-01, -3.031176418465547e-01, -3.091801675518608e-01, -3.091801675518608e-01, -8.461357667719642e-02, -8.574021244201877e-02, -3.706902707865326e-01, -6.134479071134930e-02, -8.495152365797791e-02, -8.495152365797791e-02, -4.725722039269896e-03, -4.949973954873052e-03, -2.011950372075769e-02, -2.267083171169006e-03, -4.898390241046984e-03, -4.898390241046984e-03, -2.414874817580440e+00, -2.415304306129878e+00, -2.414920132136021e+00, -2.415254063727790e+00, -2.415093112191613e+00, -2.415093112191613e+00, -9.070844280666163e-01, -9.134755365229951e-01, -9.045008290951527e-01, -9.094888937479442e-01, -9.147556221274838e-01, -9.147556221274838e-01, -2.692775000787154e-01, -2.925026548520450e-01, -2.555175067759173e-01, -2.665116728856747e-01, -2.796236793248661e-01, -2.796236793248661e-01, -4.507056948190863e-02, -8.521978912110029e-02, -4.449288947841539e-02, -8.896931476076844e-01, -5.211685071190626e-02, -5.211685071190626e-02, -2.187025654186249e-03, -2.499413039415834e-03, -1.873322790975878e-03, -2.804690934312308e-02, -2.277352810570280e-03, -2.277352810570280e-03, -2.778604650584479e-01, -2.763770711763486e-01, -2.769088378202326e-01, -2.773190916122487e-01, -2.771137592788233e-01, -2.771137592788233e-01, -2.689428422091329e-01, -2.333067279175395e-01, -2.436993667874962e-01, -2.533371762663369e-01, -2.484262461289151e-01, -2.484262461289151e-01, -3.066887371760182e-01, -1.071847872399168e-01, -1.272994826757702e-01, -1.627449538917195e-01, -1.439411694569458e-01, -1.439411694569457e-01, -2.104280463022564e-01, -1.863421452372767e-02, -2.522638746677775e-02, -1.537678710452954e-01, -3.658191000966315e-02, -3.658191000966315e-02, -5.538508951496542e-03, -6.842960916719401e-04, -1.299913314070242e-03, -3.489992118276579e-02, -1.935448509813994e-03, -1.935448509813991e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_xalpha_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_xalpha", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.321449717660876e+01, -1.321452925251980e+01, -1.321469597290348e+01, -1.321417024596516e+01, -1.321451389489432e+01, -1.321451389489432e+01, -2.151390115234000e+00, -2.151394630351956e+00, -2.151607296951300e+00, -2.151696870012191e+00, -2.151401602174384e+00, -2.151401602174384e+00, -4.123946204338143e-01, -4.119712978342720e-01, -4.009997943021183e-01, -4.041568557954062e-01, -4.122402234024811e-01, -4.122402234024811e-01, -1.128181022362619e-01, -1.143202832560250e-01, -4.942536943820435e-01, -8.179305428179906e-02, -1.132686982106372e-01, -1.132686982106372e-01, -6.300962719026529e-03, -6.599965273164069e-03, -2.682600496101025e-02, -3.022777561558674e-03, -6.531186988062645e-03, -6.531186988062645e-03, -3.219833090107253e+00, -3.220405741506504e+00, -3.219893509514694e+00, -3.220338751637053e+00, -3.220124149588817e+00, -3.220124149588817e+00, -1.209445904088822e+00, -1.217967382030660e+00, -1.206001105460204e+00, -1.212651858330592e+00, -1.219674162836645e+00, -1.219674162836645e+00, -3.590366667716206e-01, -3.900035398027267e-01, -3.406900090345564e-01, -3.553488971808997e-01, -3.728315724331548e-01, -3.728315724331548e-01, -6.009409264254484e-02, -1.136263854948004e-01, -5.932385263788718e-02, -1.186257530143579e+00, -6.948913428254168e-02, -6.948913428254168e-02, -2.916034205581666e-03, -3.332550719221112e-03, -2.497763721301171e-03, -3.739587912416411e-02, -3.036470414093707e-03, -3.036470414093707e-03, -3.704806200779306e-01, -3.685027615684647e-01, -3.692117837603102e-01, -3.697587888163317e-01, -3.694850123717643e-01, -3.694850123717643e-01, -3.585904562788439e-01, -3.110756372233860e-01, -3.249324890499949e-01, -3.377829016884493e-01, -3.312349948385534e-01, -3.312349948385534e-01, -4.089183162346910e-01, -1.429130496532225e-01, -1.697326435676937e-01, -2.169932718556260e-01, -1.919215592759277e-01, -1.919215592759276e-01, -2.805707284030086e-01, -2.484561936497023e-02, -3.363518328903702e-02, -2.050238280603939e-01, -4.877588001288421e-02, -4.877588001288422e-02, -7.384678601995390e-03, -9.123947888959200e-04, -1.733217752093656e-03, -4.653322824368772e-02, -2.580598013085325e-03, -2.580598013085321e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
