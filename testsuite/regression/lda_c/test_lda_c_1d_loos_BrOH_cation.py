
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_1d_loos_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_loos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [7.138806967539519e-03, 7.138806977413674e-03, 7.138807026091737e-03, 7.138806877586331e-03, 7.138806954856710e-03, 7.138806954856710e-03, 6.859632034388935e-03, 6.859633874902214e-03, 6.859697300327983e-03, 6.859748912883854e-03, 6.859654795531914e-03, 6.859654795531914e-03, -4.277169424500933e-02, -4.290178926019188e-02, -4.610554249860822e-02, -4.511629176456026e-02, -4.532562433416583e-02, -4.532562433416583e-02, -2.649367724717520e-02, -2.745633745106036e-02, -2.618361752430305e-02, -1.315295969156111e-02, -1.782755040868203e-02, -1.782755040868203e-02, -1.450961022254532e-06, -1.691863290944795e-06, -2.825887194582942e-04, -2.795352132775594e-07, -5.546084239339131e-07, -5.546084239339131e-07, 7.057282131058792e-03, 7.057327865461774e-03, 7.057284409674610e-03, 7.057324782358649e-03, 7.057305225126797e-03, 7.057305225126797e-03, 5.473729100050543e-03, 5.511686164055133e-03, 5.445257623462542e-03, 5.479640102065108e-03, 5.508158787759557e-03, 5.508158787759557e-03, -5.887494714909226e-02, -4.887479552790222e-02, -6.775648606320181e-02, -6.342672506343955e-02, -5.696247082267127e-02, -5.696247082267127e-02, -4.768069300932072e-03, -2.658968365113848e-02, -3.811743223210605e-03, 5.367734683900397e-03, -7.503306747533205e-03, -7.503306747533205e-03, -1.284013922544449e-07, -2.611596646302286e-07, -1.167626165552671e-07, -1.192864531579084e-03, -2.041368037005840e-07, -2.041368037005840e-07, -5.829765904181543e-02, -5.898308174989168e-02, -5.874173790852671e-02, -5.854307420538326e-02, -5.864249990969962e-02, -5.864249990969962e-02, -6.154511043222544e-02, -7.720459382583561e-02, -7.305555062484556e-02, -6.860344423013134e-02, -7.090891232119867e-02, -7.090891232119867e-02, -4.321686124567543e-02, -4.444789128960921e-02, -6.146913968679393e-02, -8.316513488387611e-02, -7.387580647418503e-02, -7.387580647418501e-02, -8.289932330114222e-02, -2.479068711149933e-04, -6.249489658154973e-04, -8.120178138710452e-02, -2.428981615256992e-03, -2.428981615256992e-03, -4.078020305267212e-06, -4.988469199944949e-09, -4.613403443050214e-08, -2.020231627313852e-03, -1.617300850948651e-07, -1.617300850948646e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_1d_loos_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_1d_loos", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [7.140000074223445e-03, 7.140000074223445e-03, 7.140000073637287e-03, 7.140000073637287e-03, 7.140000075997444e-03, 7.140000075997444e-03, 7.140000075821203e-03, 7.140000075821203e-03, 7.140000076137128e-03, 7.140000076137128e-03, 7.140000076137128e-03, 7.140000076137128e-03, 7.143872171118279e-03, 7.143872171118279e-03, 7.143872121774998e-03, 7.143872121774998e-03, 7.143870420820642e-03, 7.143870420820642e-03, 7.143869036925236e-03, 7.143869036925236e-03, 7.143871560673198e-03, 7.143871560673198e-03, 7.143871560673198e-03, 7.143871560673198e-03, -3.477065818420856e-03, -3.477065818420856e-03, -3.575233722243872e-03, -3.575233722243872e-03, -6.131140483607986e-03, -6.131140483607986e-03, -5.313242909620053e-03, -5.313242909620053e-03, -5.484153708742165e-03, -5.484153708742165e-03, -5.484153708742165e-03, -5.484153708742165e-03, -4.755368522394746e-02, -4.755368522394746e-02, -4.909211315088847e-02, -4.909211315088847e-02, 5.692598059082120e-03, 5.692598059082120e-03, -2.486639263166743e-02, -2.486639263166743e-02, -3.310176548640265e-02, -3.310176548640265e-02, -3.310176548640265e-02, -3.310176548640265e-02, -2.901754301683907e-06, -2.901754301683907e-06, -3.383513190619625e-06, -3.383513190619625e-06, -5.640032631591180e-04, -5.640032631591180e-04, -5.590572765815102e-07, -5.590572765815102e-07, -1.109179172565128e-06, -1.109179172565128e-06, -1.109179172565128e-06, -1.109179172565128e-06, 7.140351358503716e-03, 7.140351358503716e-03, 7.140350973529714e-03, 7.140350973529714e-03, 7.140351339319703e-03, 7.140351339319703e-03, 7.140350999481144e-03, 7.140350999481144e-03, 7.140351164111999e-03, 7.140351164111999e-03, 7.140351164111999e-03, 7.140351164111999e-03, 7.245471340300309e-03, 7.245471340300309e-03, 7.241380098490430e-03, 7.241380098490430e-03, 7.248575862602840e-03, 7.248575862602840e-03, 7.244830616833531e-03, 7.244830616833531e-03, 7.241757978992028e-03, 7.241757978992028e-03, 7.241757978992028e-03, 7.241757978992028e-03, -1.921072552864436e-02, -1.921072552864436e-02, -8.561060867961363e-03, -8.561060867961363e-03, -3.163976949115841e-02, -3.163976949115841e-02, -2.517414142160737e-02, -2.517414142160737e-02, -1.692875897449781e-02, -1.692875897449781e-02, -1.692875897449781e-02, -1.692875897449781e-02, -9.320071298011172e-03, -9.320071298011172e-03, -4.770772685960508e-02, -4.770772685960508e-02, -7.481099531134318e-03, -7.481099531134318e-03, 7.257179553643904e-03, 7.257179553643904e-03, -1.450324461930175e-02, -1.450324461930175e-02, -1.450324461930175e-02, -1.450324461930175e-02, -2.567987722245363e-07, -2.567987722245363e-07, -5.223074788846878e-07, -5.223074788846878e-07, -2.335217607048532e-07, -2.335217607048532e-07, -2.369276745193206e-03, -2.369276745193206e-03, -4.082654747146549e-07, -4.082654747146549e-07, -4.082654747146549e-07, -4.082654747146549e-07, -1.850869324355836e-02, -1.850869324355836e-02, -1.934352193360847e-02, -1.934352193360847e-02, -1.904770016300496e-02, -1.904770016300496e-02, -1.880572202263341e-02, -1.880572202263341e-02, -1.892665335656462e-02, -1.892665335656462e-02, -1.892665335656462e-02, -1.892665335656462e-02, -2.261351966710889e-02, -2.261351966710889e-02, -4.950086060030940e-02, -4.950086060030940e-02, -4.087442413968988e-02, -4.087442413968988e-02, -3.300853053540733e-02, -3.300853053540733e-02, -3.693129820992778e-02, -3.693129820992778e-02, -3.693129820992778e-02, -3.693129820992778e-02, -3.814777068166990e-03, -3.814777068166990e-03, -7.383291889659897e-02, -7.383291889659897e-02, -9.293531406177911e-02, -9.293531406177911e-02, -9.919529387432785e-02, -9.919529387432785e-02, -1.010329921905236e-01, -1.010329921905236e-01, -1.010329921905235e-01, -1.010329921905235e-01, -6.500547273406987e-02, -6.500547273406987e-02, -4.948869903516493e-04, -4.948869903516493e-04, -1.244903681953567e-03, -1.244903681953567e-03, -1.008128005104076e-01, -1.008128005104076e-01, -4.796405087009816e-03, -4.796405087009816e-03, -4.796405087009817e-03, -4.796405087009817e-03, -8.155181182172273e-06, -8.155181182172273e-06, -9.976908731121401e-09, -9.976908731121401e-09, -9.226721955832585e-08, -9.226721955832585e-08, -3.996755445727316e-03, -3.996755445727316e-03, -3.234544687079620e-07, -3.234544687079620e-07, -3.234544687079610e-07, -3.234544687079610e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
