
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ow_lyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.854870107388543e-02, -4.854870281189176e-02, -4.854871107492806e-02, -4.854868520542833e-02, -4.854869868452182e-02, -4.854869868452182e-02, -4.554254752071177e-02, -4.554255479109737e-02, -4.554280535640904e-02, -4.554300928504481e-02, -4.554263743451418e-02, -4.554263743451418e-02, -3.477862429495910e-02, -3.476738713616427e-02, -3.449159595980644e-02, -3.457660924541323e-02, -3.455861263734055e-02, -3.455861263734055e-02, -1.888868153536639e-02, -1.906385989003372e-02, -3.629200817347578e-02, -1.580142681716252e-02, -1.706959282103111e-02, -1.706959282103111e-02, -1.044872107888999e-03, -1.098544874189445e-03, -5.505303011819379e-03, -6.089117233510076e-04, -7.627212140817515e-04, -7.627212140817515e-04, -4.668934154986611e-02, -4.668977556982190e-02, -4.668936316995683e-02, -4.668974630580664e-02, -4.668956069152339e-02, -4.668956069152339e-02, -4.306777488702269e-02, -4.310635476241837e-02, -4.303929903760034e-02, -4.307373596791166e-02, -4.310273912647718e-02, -4.310273912647718e-02, -3.337893267310521e-02, -3.425373211165595e-02, -3.253506534363907e-02, -3.295905550467535e-02, -3.354996136733138e-02, -3.354996136733138e-02, -1.216566630849439e-02, -1.890633907119246e-02, -1.146716211065508e-02, -4.296367765221250e-02, -1.368918037057311e-02, -1.368918037057311e-02, -4.711484662502143e-04, -5.954303028162166e-04, -4.565956743404022e-04, -8.350076254886221e-03, -5.490128921827559e-04, -5.490128921827559e-04, -3.343083341168521e-02, -3.336918232687839e-02, -3.339093136408935e-02, -3.340880038462701e-02, -3.339986120299770e-02, -3.339986120299770e-02, -3.313519003281123e-02, -3.144339001996814e-02, -3.196252680037721e-02, -3.244825982399138e-02, -3.220365913321996e-02, -3.220365913321996e-02, -3.474018835652569e-02, -2.169032601144756e-02, -2.392828471366368e-02, -2.733809722958337e-02, -2.563169091463094e-02, -2.563169091463094e-02, -3.049535519348244e-02, -5.294684641588315e-03, -6.946717143275644e-03, -2.689226987661868e-02, -1.016078481557300e-02, -1.016078481557300e-02, -1.461860805174023e-03, -1.605868752035934e-04, -3.358736077294446e-04, -9.663108696590487e-03, -5.084325674373076e-04, -5.084325674373072e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ow_lyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ow_lyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.875643282698426e-02, -4.875643400052840e-02, -4.875643957993090e-02, -4.875642211221422e-02, -4.875643121362778e-02, -4.875643121362778e-02, -4.666535389452441e-02, -4.666535909993608e-02, -4.666553849790583e-02, -4.666568450465187e-02, -4.666541827047592e-02, -4.666541827047592e-02, -3.817336494140189e-02, -3.816367892876722e-02, -3.792542066801265e-02, -3.799897427035174e-02, -3.798341175681089e-02, -3.798341175681089e-02, -2.276670151479453e-02, -2.295521054399211e-02, -3.946220679559796e-02, -1.937624775663595e-02, -2.078459604634297e-02, -2.078459604634297e-02, -1.385763069961227e-03, -1.456547016469702e-03, -7.134979308886816e-03, -8.093692607481084e-04, -1.013018663303184e-03, -1.013018663303184e-03, -4.747751562511595e-02, -4.747781962406823e-02, -4.747753076845457e-02, -4.747779912686524e-02, -4.747766911799536e-02, -4.747766911799536e-02, -4.485196856483558e-02, -4.488087493533600e-02, -4.483061979821576e-02, -4.485643628422269e-02, -4.487816673956516e-02, -4.487816673956516e-02, -3.695371078390651e-02, -3.771910002323349e-02, -3.620555495110352e-02, -3.658266272956123e-02, -3.710416492091637e-02, -3.710416492091637e-02, -1.521774731921771e-02, -2.278572160099011e-02, -1.439829418148315e-02, -4.477387196922882e-02, -1.698211944747904e-02, -1.698211944747904e-02, -6.266934079130557e-04, -7.915040797376598e-04, -6.073811945670161e-04, -1.066085961365597e-02, -7.299742510126668e-04, -7.299742510126668e-04, -3.699940982883873e-02, -3.694512144624552e-02, -3.696427897914011e-02, -3.698001402008928e-02, -3.697214292716684e-02, -3.697214292716684e-02, -3.673860488507600e-02, -3.522337609312932e-02, -3.569245731805187e-02, -3.612804735644795e-02, -3.590909694400440e-02, -3.590909694400440e-02, -3.814022750744782e-02, -2.573167066889715e-02, -2.802365026117506e-02, -3.138524418374330e-02, -2.972266949697048e-02, -2.972266949697048e-02, -3.435732401575986e-02, -6.869572165103580e-03, -8.935212941280364e-03, -3.095467772137410e-02, -1.284796015216986e-02, -1.284796015216986e-02, -1.934663281687202e-03, -2.139410461269027e-04, -4.470668634415559e-04, -1.225126117060565e-02, -6.761579977676309e-04, -6.761579977676304e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
