
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_erf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.635539355654306e-01, -1.635540115756600e-01, -1.635544066496675e-01, -1.635531608278765e-01, -1.635539751827453e-01, -1.635539751827453e-01, -1.062623120699801e-01, -1.062623789801803e-01, -1.062655303567746e-01, -1.062668575908592e-01, -1.062624822963676e-01, -1.062624822963676e-01, -5.300511619420777e-02, -5.297188623104268e-02, -5.209898232329398e-02, -5.235249020365954e-02, -5.299300015285681e-02, -5.299300015285681e-02, -1.494369966723010e-02, -1.525415567604491e-02, -5.887715546301237e-02, -8.458412536091474e-03, -1.503693739188350e-02, -1.503693739188350e-02, -6.590327909206449e-06, -7.574466487400541e-06, -5.036877498801039e-04, -7.270800708667959e-07, -7.339963473312422e-06, -7.339963473312422e-06, -1.190843160422903e-01, -1.190899569399591e-01, -1.190849112510487e-01, -1.190892971092579e-01, -1.190871832480652e-01, -1.190871832480652e-01, -8.782673123528180e-02, -8.805239011651626e-02, -8.773505043467010e-02, -8.791181754087327e-02, -8.809739502413869e-02, -8.809739502413869e-02, -4.853609095626513e-02, -5.120083147748947e-02, -4.685402535875938e-02, -4.820449199482130e-02, -4.974889847785714e-02, -4.974889847785714e-02, -4.345894698456894e-03, -1.511088216928679e-02, -4.216511954435107e-03, -8.720440694943299e-02, -6.030795612338431e-03, -6.030795612338431e-03, -6.527319484358364e-07, -9.743491961924477e-07, -4.101921945691599e-07, -1.291844878295291e-03, -7.370071535625018e-07, -7.370071535625018e-07, -4.954521920754552e-02, -4.937291967567332e-02, -4.943478529811414e-02, -4.948243789110041e-02, -4.945859602157315e-02, -4.945859602157315e-02, -4.849613757907114e-02, -4.395537700725292e-02, -4.534146968794971e-02, -4.657985186450705e-02, -4.595430742899888e-02, -4.595430742899888e-02, -5.273125448362379e-02, -2.089362583651197e-02, -2.563414466219339e-02, -3.280813855157419e-02, -2.917093338426828e-02, -2.917093338426827e-02, -4.069965279864297e-02, -4.024731412486258e-04, -9.625080568619093e-04, -3.111535437225396e-02, -2.610849177809050e-03, -2.610849177809062e-03, -1.061299175283023e-05, -1.999058301261237e-08, -1.370436720415627e-07, -2.314249260533027e-03, -4.523752175427243e-07, -4.523752175456310e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_erf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.739920718123111e-01, -1.739921476677133e-01, -1.739925419369882e-01, -1.739912986528539e-01, -1.739921113489282e-01, -1.739921113489282e-01, -1.168895793820712e-01, -1.168896459969972e-01, -1.168927834667444e-01, -1.168941048439084e-01, -1.168897488572513e-01, -1.168897488572513e-01, -6.379048840969097e-02, -6.375686111443440e-02, -6.287270208369028e-02, -6.312964352569650e-02, -6.377822775517254e-02, -6.377822775517254e-02, -2.272912005689395e-02, -2.311581920910749e-02, -6.970264447559746e-02, -1.402721899561646e-02, -2.284550058557908e-02, -2.284550058557908e-02, -1.318490511017100e-05, -1.515428931398349e-05, -9.925437284025835e-04, -1.454267050940879e-06, -1.468501040207003e-05, -1.468501040207003e-05, -1.296575801280689e-01, -1.296631984848570e-01, -1.296581729583340e-01, -1.296625412907625e-01, -1.296604358764194e-01, -1.296604358764194e-01, -9.854071987986567e-02, -9.876524506383237e-02, -9.844950023672412e-02, -9.862537848709377e-02, -9.881002410334078e-02, -9.881002410334078e-02, -5.924584291088130e-02, -6.196125590250211e-02, -5.752231927258489e-02, -5.890667777619614e-02, -6.048388921566996e-02, -6.048388921566996e-02, -7.729888305638068e-03, -2.293764924793805e-02, -7.519103800944604e-03, -9.792153222847774e-02, -1.039879426878697e-02, -1.039879426878697e-02, -1.305553161649683e-06, -1.948872817752456e-06, -8.204254451904867e-07, -2.473556324986575e-03, -1.474123668324400e-06, -1.474123668324400e-06, -6.027623277485501e-02, -6.010048755846933e-02, -6.016359899905063e-02, -6.021220460724738e-02, -6.018788663428097e-02, -6.018788663428097e-02, -5.920499334324523e-02, -5.453336991235468e-02, -5.596570928550741e-02, -5.724064641143125e-02, -5.659719045400845e-02, -5.659719045400845e-02, -6.351328501449759e-02, -2.979796854919682e-02, -3.507561655441609e-02, -4.281063223527574e-02, -3.891242810777829e-02, -3.891242810777829e-02, -5.114633345604768e-02, -7.965995822819835e-04, -1.863205713937519e-03, -4.100112510720248e-02, -4.822566934037888e-03, -4.822566934037919e-03, -2.123535616848479e-05, -3.998143025900575e-08, -2.740939165405248e-07, -4.306210521981552e-03, -9.047987905103854e-07, -9.047987905153438e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
