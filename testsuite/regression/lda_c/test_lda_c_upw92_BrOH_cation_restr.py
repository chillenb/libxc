
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_upw92_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_upw92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.646283568942083e-01, -1.646284416546751e-01, -1.646288446361697e-01, -1.646275830195952e-01, -1.646282403682182e-01, -1.646282403682182e-01, -1.108762648342891e-01, -1.108763262777075e-01, -1.108784439271119e-01, -1.108801675335243e-01, -1.108770247215389e-01, -1.108770247215389e-01, -6.717630207262344e-02, -6.714964874408659e-02, -6.650056562096188e-02, -6.669962047063104e-02, -6.665740670036101e-02, -6.665740670036101e-02, -3.799688761060397e-02, -3.827809026954211e-02, -7.092865842546850e-02, -3.303352053721379e-02, -3.507732292232962e-02, -3.507732292232962e-02, -3.773224326238088e-03, -3.939847961876635e-03, -1.475482988507916e-02, -2.350379935769935e-03, -2.868073764941801e-03, -2.868073764941801e-03, -1.224985186159198e-01, -1.225038606422095e-01, -1.224987846994433e-01, -1.225035004241975e-01, -1.225012157502901e-01, -1.225012157502901e-01, -9.483282146812852e-02, -9.503012376035742e-02, -9.468795491364422e-02, -9.486322923503006e-02, -9.501158210705328e-02, -9.501158210705328e-02, -6.397389527011112e-02, -6.594835087543059e-02, -6.214551572502366e-02, -6.305539331137620e-02, -6.435326174097740e-02, -6.435326174097740e-02, -2.704517223222909e-02, -3.802522819791512e-02, -2.585836408408969e-02, -9.430633660863352e-02, -2.958659977913301e-02, -2.958659977913301e-02, -1.868621295027724e-03, -2.304044701906967e-03, -1.816583933733535e-03, -2.032469493404607e-02, -2.143215801635001e-03, -2.143215801635001e-03, -6.408869095066744e-02, -6.395236072140872e-02, -6.400040917701268e-02, -6.403992297809913e-02, -6.402015155076604e-02, -6.402015155076604e-02, -6.343851886291929e-02, -5.987700307196978e-02, -6.094307819912126e-02, -6.196131811389903e-02, -6.144596142149781e-02, -6.144596142149781e-02, -6.708520392086091e-02, -4.251880252768916e-02, -4.620768378125974e-02, -5.208617159445975e-02, -4.909550670709958e-02, -4.909550670709958e-02, -5.798407992618822e-02, -1.431359282838275e-02, -1.765783973043151e-02, -5.129377192202462e-02, -2.359248123868724e-02, -2.359248123868727e-02, -5.028993338618439e-03, -6.949362335737616e-04, -1.375101358826065e-03, -2.271070082276081e-02, -2.000890230185896e-03, -2.000890230185898e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_upw92_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_upw92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747591692249640e-01, -1.747592544904102e-01, -1.747596598727432e-01, -1.747583907397713e-01, -1.747590520047425e-01, -1.747590520047425e-01, -1.203653067763954e-01, -1.203653694827984e-01, -1.203675306599931e-01, -1.203692896932764e-01, -1.203660822831982e-01, -1.203660822831982e-01, -7.523073785258191e-02, -7.520280971126250e-02, -7.452250185058100e-02, -7.473116914955609e-02, -7.468691957800719e-02, -7.468691957800719e-02, -4.422107441751800e-02, -4.452566526999437e-02, -7.915687284742665e-02, -3.881463052869589e-02, -4.104823157880121e-02, -4.104823157880121e-02, -4.836687704039652e-03, -5.045871096254279e-03, -1.815032511172237e-02, -3.038122347502690e-03, -3.695204024874334e-03, -3.695204024874334e-03, -1.321987197037220e-01, -1.322041469194136e-01, -1.321989900307242e-01, -1.322037809573156e-01, -1.322014598506134e-01, -1.322014598506134e-01, -1.039298361734373e-01, -1.041327845639957e-01, -1.037808098318041e-01, -1.039611155578881e-01, -1.041137132627280e-01, -1.041137132627280e-01, -7.187095199500139e-02, -7.394344936788723e-02, -6.994881869980983e-02, -7.090571374903462e-02, -7.226941117023658e-02, -7.226941117023658e-02, -3.219795984554050e-02, -4.425177973868967e-02, -3.087169258271108e-02, -1.033881756772262e-01, -3.502047883762932e-02, -3.502047883762932e-02, -2.423558720004783e-03, -2.979148739725820e-03, -2.356983546560398e-03, -2.460864022144206e-02, -2.774234408425511e-03, -2.774234408425511e-03, -7.199153802374679e-02, -7.184832998147504e-02, -7.189880427385720e-02, -7.194031154433257e-02, -7.191954281585859e-02, -7.191954281585859e-02, -7.130842211252922e-02, -6.755988921867490e-02, -6.868312817348116e-02, -6.975501460077867e-02, -6.921262127281747e-02, -6.921262127281747e-02, -7.513528013447358e-02, -4.910032300819021e-02, -5.305482447039240e-02, -5.931807836580026e-02, -5.613704261757753e-02, -5.613704261757753e-02, -6.556288839899016e-02, -1.763119290996600e-02, -2.153757759180570e-02, -5.847625481009036e-02, -2.832367319952865e-02, -2.832367319952867e-02, -6.406562479547128e-03, -9.110972255052087e-04, -1.790510751807839e-03, -2.732610280551570e-02, -2.592605854377396e-03, -2.592605854377395e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
