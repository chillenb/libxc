
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pz_mod_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.656078728136582e-01, -1.656079473373252e-01, -1.656083346847635e-01, -1.656071132281372e-01, -1.656079116561609e-01, -1.656079116561609e-01, -1.109215220224329e-01, -1.109215832531409e-01, -1.109244671437200e-01, -1.109256817292851e-01, -1.109216777996296e-01, -1.109216777996296e-01, -6.640107182587224e-02, -6.637690793474821e-02, -6.574413510392618e-02, -6.592751137734641e-02, -6.639226074342659e-02, -6.639226074342659e-02, -3.914603347680244e-02, -3.939835842611853e-02, -7.075697964679066e-02, -3.324997348359932e-02, -3.922199599501686e-02, -3.922199599501686e-02, -5.809928058817949e-03, -6.031605995449025e-03, -1.704404617644706e-02, -3.143142398738189e-03, -5.980878562588749e-03, -5.980878562588749e-03, -1.228050483955856e-01, -1.228103366969387e-01, -1.228056063972733e-01, -1.228097181078646e-01, -1.228077363745221e-01, -1.228077363745221e-01, -9.443775371326182e-02, -9.463420104848133e-02, -9.435798377954774e-02, -9.451180802760845e-02, -9.467339793774436e-02, -9.467339793774436e-02, -6.320106170446659e-02, -6.509704596457871e-02, -6.202272377194754e-02, -6.296763278127251e-02, -6.405954730815905e-02, -6.405954730815905e-02, -2.807619943240532e-02, -3.928212753973512e-02, -2.787074498595967e-02, -9.389676831812389e-02, -3.045188411139680e-02, -3.045188411139680e-02, -3.047216617967974e-03, -3.417574135670425e-03, -2.664108485889055e-03, -2.113695116820281e-02, -3.155395875889005e-03, -3.155395875889005e-03, -6.391485444734041e-02, -6.379261693491320e-02, -6.383649013202937e-02, -6.387029704673694e-02, -6.385338110963171e-02, -6.385338110963171e-02, -6.317290708709083e-02, -6.002592258230462e-02, -6.097540496171681e-02, -6.183201711589651e-02, -6.139833916691883e-02, -6.139833916691883e-02, -6.620209203214446e-02, -4.375981671746033e-02, -4.723789622564845e-02, -5.234518898424508e-02, -4.977456241654061e-02, -4.977456241654060e-02, -5.780944571492223e-02, -1.618808453725021e-02, -1.976244949552497e-02, -5.115323618877370e-02, -2.486620422474501e-02, -2.486620422474501e-02, -6.599710850730351e-03, -1.079032640359456e-03, -1.929957489060205e-03, -2.417604076223457e-02, -2.740931156749584e-03, -2.740931156749580e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pz_mod_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.758418660399660e-01, -1.758419408479122e-01, -1.758423296729221e-01, -1.758411035568840e-01, -1.758419050306380e-01, -1.758419050306380e-01, -1.206467216697004e-01, -1.206467840461079e-01, -1.206497218953119e-01, -1.206509592048013e-01, -1.206468803616697e-01, -1.206468803616697e-01, -7.424478554856218e-02, -7.421854168718042e-02, -7.353052129081812e-02, -7.373006436671384e-02, -7.423521627949831e-02, -7.423521627949831e-02, -4.549564111179960e-02, -4.576619703775794e-02, -7.894323561940843e-02, -3.910891898384820e-02, -4.557711535103444e-02, -4.557711535103444e-02, -7.377675987967546e-03, -7.651716743133608e-03, -2.083608267392352e-02, -4.045246803696739e-03, -7.589043739568369e-03, -7.589043739568369e-03, -1.327173628170337e-01, -1.327227205587737e-01, -1.327179281463205e-01, -1.327220938475998e-01, -1.327200860930217e-01, -1.327200860930217e-01, -1.037612631700747e-01, -1.039638238528584e-01, -1.036789997960786e-01, -1.038376265512539e-01, -1.040042359217059e-01, -1.040042359217059e-01, -7.074916392465863e-02, -7.282533709568313e-02, -6.945069241907736e-02, -7.049245721399160e-02, -7.169114846835478e-02, -7.169114846835478e-02, -3.339684832015506e-02, -4.564159571933456e-02, -3.316781748675815e-02, -1.032032415621299e-01, -3.603275771971673e-02, -3.603275771971673e-02, -3.924010046098579e-03, -4.391512367487663e-03, -3.438730353555265e-03, -2.556145864930736e-02, -4.060725850441434e-03, -4.060725850441434e-03, -7.153260983190672e-02, -7.139860440842478e-02, -7.144670882521095e-02, -7.148377040557337e-02, -7.146522655800439e-02, -7.146522655800439e-02, -7.071821497536743e-02, -6.723422446115314e-02, -6.829082319899928e-02, -6.923990961826319e-02, -6.875989143908251e-02, -6.875989143908251e-02, -7.402861340455552e-02, -5.040845447039608e-02, -5.406540047556197e-02, -5.936626128066293e-02, -5.670826481710610e-02, -5.670826481710609e-02, -6.495084522560304e-02, -1.983717426220833e-02, -2.398369123708226e-02, -5.813629763059501e-02, -2.979837295782526e-02, -2.979837295782526e-02, -8.352139230313187e-03, -1.409711968839048e-03, -2.503574671063414e-03, -2.901893991876313e-02, -3.536183103116768e-03, -3.536183103116763e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
