
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_xalpha_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_xalpha", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.911127268468483e+00, -9.911154909337970e+00, -9.911286324860349e+00, -9.910874907481752e+00, -9.911089269622639e+00, -9.911089269622639e+00, -1.613617074091914e+00, -1.613620556970712e+00, -1.613740597385018e+00, -1.613838307084661e+00, -1.613660260485321e+00, -1.613660260485321e+00, -3.112377775636800e-01, -3.108958659249723e-01, -3.026422410989444e-01, -3.051477706216257e-01, -3.052616302416713e-01, -3.052616302416713e-01, -8.042285269871668e-02, -8.165824130524077e-02, -3.631141993959179e-01, -6.101685312605644e-02, -7.718252831347931e-02, -7.718252831347930e-02, -2.802708855232444e-03, -2.951494120578496e-03, -1.626948868339691e-02, -1.615914117503628e-03, -2.255587800582932e-03, -2.255587800582932e-03, -2.415928486017378e+00, -2.416372022847562e+00, -2.415950578939251e+00, -2.416342109291199e+00, -2.416152414224628e+00, -2.416152414224628e+00, -9.080998055761267e-01, -9.146867383200783e-01, -9.032924451138504e-01, -9.091136005017908e-01, -9.140746442132841e-01, -9.140746442132841e-01, -2.722500929637872e-01, -2.957584751815443e-01, -2.520766170544372e-01, -2.620056934635686e-01, -2.769986519179434e-01, -2.769986519179434e-01, -4.236098113150218e-02, -8.048748733948163e-02, -3.924095059673857e-02, -8.907348723163779e-01, -4.979201773249021e-02, -4.979201773249021e-02, -1.247531090564014e-03, -1.579654261318197e-03, -1.209721671951280e-03, -2.635727576010020e-02, -1.519616316813508e-03, -1.519616316813509e-03, -2.735730722786331e-01, -2.720038309605814e-01, -2.725560359921412e-01, -2.730108311869885e-01, -2.727831854849530e-01, -2.727831854849530e-01, -2.661569074251346e-01, -2.284774237313629e-01, -2.392524733077607e-01, -2.499386749716866e-01, -2.444807156977211e-01, -2.444807156977211e-01, -3.100642567039937e-01, -1.016913977011684e-01, -1.221301230435444e-01, -1.613113422294036e-01, -1.402807391610318e-01, -1.402807391610317e-01, -2.103485700823053e-01, -1.554932208175177e-02, -2.120998178198658e-02, -1.555216067374619e-01, -3.361001141434182e-02, -3.361001141434183e-02, -3.950734759463341e-03, -4.222051830033271e-04, -8.879004914917114e-04, -3.151894667459814e-02, -1.395505226625164e-03, -1.395505226625163e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_xalpha_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_xalpha", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.321484486638536e+01, -1.321482784949773e+01, -1.321488755989870e+01, -1.321485886490908e+01, -1.321503257064438e+01, -1.321506429553565e+01, -1.321455020525185e+01, -1.321444954688271e+01, -1.321486990421920e+01, -1.321470147822122e+01, -1.321486990421920e+01, -1.321470147822122e+01, -2.151504109454661e+00, -2.151474754189652e+00, -2.151510835923365e+00, -2.151477315215145e+00, -2.151631981021216e+00, -2.151676277304268e+00, -2.151769309733653e+00, -2.151799508523046e+00, -2.151144343469805e+00, -2.151949232829836e+00, -2.151144343469805e+00, -2.151949232829836e+00, -4.141580059589673e-01, -4.157996594240831e-01, -4.135134507600562e-01, -4.155275131193874e-01, -4.049031999702460e-01, -4.021138542213455e-01, -4.064220379565452e-01, -4.073024924069317e-01, -4.189885797367450e-01, -3.924449579428689e-01, -4.189885797367450e-01, -3.924449579428689e-01, -1.050700785092557e-01, -1.091571651166186e-01, -1.063647701887859e-01, -1.110837031112957e-01, -4.757591965989859e-01, -4.917527622852292e-01, -8.078689578460402e-02, -8.190179436588677e-02, -1.097118840715700e-01, -5.885843416176770e-02, -1.097118840715700e-01, -5.885843416176770e-02, -3.613530016349806e-03, -3.839802796064141e-03, -3.786547464151097e-03, -4.056347298575180e-03, -2.105485950816417e-02, -2.223423990626668e-02, -2.172193668893448e-03, -2.135998539715425e-03, -3.223614230701021e-03, -1.834439475208505e-03, -3.223614230701021e-03, -1.834439475208504e-03, -3.221623694116126e+00, -3.220851991284896e+00, -3.222225321152681e+00, -3.221433114250400e+00, -3.221660330590561e+00, -3.220874258848323e+00, -3.222176525558571e+00, -3.221402153365315e+00, -3.221929368098063e+00, -3.221143448904186e+00, -3.221929368098063e+00, -3.221143448904186e+00, -1.210830330897897e+00, -1.210769146000690e+00, -1.219748221760198e+00, -1.219416278238404e+00, -1.203346580481362e+00, -1.205427878140724e+00, -1.211057469201663e+00, -1.213239573162863e+00, -1.221423112067167e+00, -1.216074057672416e+00, -1.221423112067167e+00, -1.216074057672416e+00, -3.634793661446907e-01, -3.625170551359997e-01, -3.942550806749148e-01, -3.944340646208324e-01, -3.297135008970263e-01, -3.418349992352263e-01, -3.433571722762594e-01, -3.547657638810163e-01, -3.780303624415332e-01, -3.591909113791400e-01, -3.780303624415332e-01, -3.591909113791401e-01, -5.620948248443216e-02, -5.674550336297106e-02, -1.070475412327100e-01, -1.075817692082020e-01, -5.084819612747529e-02, -5.358029472934032e-02, -1.187913161837656e+00, -1.187379471270659e+00, -6.431663928699002e-02, -6.813292569520681e-02, -6.431663928699002e-02, -6.813292569520681e-02, -1.629556976026335e-03, -1.693504506142812e-03, -2.090032994615439e-03, -2.121665725908009e-03, -1.562870615395101e-03, -1.655135153281567e-03, -3.503433625816973e-02, -3.524975178707926e-02, -1.596234675915482e-03, -2.192141501066534e-03, -1.596234675915482e-03, -2.192141501066534e-03, -3.640563635735328e-01, -3.654636846383150e-01, -3.619609832111970e-01, -3.633743044990437e-01, -3.626960654737369e-01, -3.641117580359314e-01, -3.633078183462288e-01, -3.647129291304512e-01, -3.630016810348828e-01, -3.644119446173874e-01, -3.630016810348828e-01, -3.644119446173874e-01, -3.542873935191150e-01, -3.554585619393733e-01, -3.039738399830618e-01, -3.052907506618709e-01, -3.182923199516455e-01, -3.197048930340896e-01, -3.326636135576978e-01, -3.338333607943418e-01, -3.253666056441678e-01, -3.265752474701654e-01, -3.253666056441678e-01, -3.265752474701654e-01, -4.130816246091480e-01, -4.137547493054559e-01, -1.351937479406808e-01, -1.359765337554170e-01, -1.620155401833561e-01, -1.636404658736399e-01, -2.144839188257774e-01, -2.156698518077244e-01, -1.870739647659033e-01, -1.870079714036874e-01, -1.870739647659033e-01, -1.870079714036874e-01, -2.794925457410211e-01, -2.814171636021696e-01, -2.066102251069799e-02, -2.080239045280006e-02, -2.779185547755825e-02, -2.872218417141514e-02, -2.057758356887723e-01, -2.088787986330919e-01, -4.349869404234009e-02, -4.593007985374770e-02, -4.349869404234009e-02, -4.593007985374771e-02, -5.168947259534104e-03, -5.356344373475912e-03, -5.622954611442609e-04, -5.635806259111895e-04, -1.144141127980787e-03, -1.216886448966058e-03, -4.167619629921079e-02, -4.235774803415881e-02, -1.511973246241195e-03, -2.009259266269512e-03, -1.511973246241195e-03, -2.009259266269511e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
