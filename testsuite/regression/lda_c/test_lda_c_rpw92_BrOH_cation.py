
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rpw92_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpw92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645995504598874e-01, -1.645996352769430e-01, -1.646000385289871e-01, -1.645987760591848e-01, -1.645994338376557e-01, -1.645994338376557e-01, -1.107858338283929e-01, -1.107858953703322e-01, -1.107880165538513e-01, -1.107897430660369e-01, -1.107865840356207e-01, -1.107865840356207e-01, -6.701332647009473e-02, -6.698625374487634e-02, -6.633550766928450e-02, -6.653684597800753e-02, -6.628241537891276e-02, -6.628241537891276e-02, -3.784104461336985e-02, -3.810773248649182e-02, -7.071248082323355e-02, -3.294245817029449e-02, -2.771566811087052e-02, -2.771566811087054e-02, -3.773696799838665e-03, -3.937471325807075e-03, -1.472968079430609e-02, -2.355986619448867e-03, -2.451603953245787e-03, -2.451603953245787e-03, -1.224262466632711e-01, -1.224315961438950e-01, -1.224265129464943e-01, -1.224312356359921e-01, -1.224289475121666e-01, -1.224289475121666e-01, -9.471366583147260e-02, -9.491133084943865e-02, -9.456832610819237e-02, -9.474390937311164e-02, -9.489144390379986e-02, -9.489144390379986e-02, -6.380950346837234e-02, -6.578529679472132e-02, -6.192000199667772e-02, -6.284039868880513e-02, -6.406349222699796e-02, -6.406349222699793e-02, -2.699235473841143e-02, -3.791208560257751e-02, -2.575800140647082e-02, -9.418618612322655e-02, -2.944233340245785e-02, -2.944233340245785e-02, -1.871459775613418e-03, -2.309612356174894e-03, -1.817197415040641e-03, -2.031081282349247e-02, -2.023599083749288e-03, -2.023599083749287e-03, -6.392396594984479e-02, -6.378756852459781e-02, -6.383563580100114e-02, -6.387517814757501e-02, -6.385539257642651e-02, -6.385539257642651e-02, -6.327375432049365e-02, -5.971164787643433e-02, -6.077755274889975e-02, -6.179616844032596e-02, -6.128070638566307e-02, -6.128070638566307e-02, -6.692281220054765e-02, -4.238586195740859e-02, -4.605979358136294e-02, -5.192725174127705e-02, -4.894363551560387e-02, -4.894363551560387e-02, -5.781814550942035e-02, -1.432337785401929e-02, -1.764153240854288e-02, -5.112859097286938e-02, -2.350608845571453e-02, -2.350608845571452e-02, -5.037446550798515e-03, -6.963063398225441e-04, -1.374982140695968e-03, -2.268013163366760e-02, -1.910242195571930e-03, -1.910242195571932e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rpw92_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rpw92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747369753456869e-01, -1.747373592460347e-01, -1.747369289286906e-01, -1.747375762850792e-01, -1.747380160558852e-01, -1.747373003530871e-01, -1.747352529548414e-01, -1.747375238520149e-01, -1.747351501822271e-01, -1.747389498785631e-01, -1.747351501822271e-01, -1.747389498785631e-01, -1.202893499889770e-01, -1.202922014327670e-01, -1.202892104901381e-01, -1.202924665416908e-01, -1.202951542125395e-01, -1.202908517166852e-01, -1.202962311684931e-01, -1.202932980984655e-01, -1.203306534397094e-01, -1.202524715692195e-01, -1.203306534397094e-01, -1.202524715692195e-01, -7.534022876473752e-02, -7.481054072998462e-02, -7.537293704869809e-02, -7.472260167141441e-02, -7.390882988766347e-02, -7.482611619918315e-02, -7.471850704775293e-02, -7.443058546683995e-02, -7.037458305043910e-02, -7.906555928974229e-02, -7.037458305043910e-02, -7.906555928974229e-02, -4.564060310281567e-02, -4.259099567373445e-02, -4.617672135522330e-02, -4.268429790002959e-02, -8.138130978892398e-02, -7.673667666625149e-02, -3.918020935107847e-02, -3.821967190047195e-02, -2.642793719968789e-02, -7.144810021789348e-02, -2.642793719968792e-02, -7.144810021789347e-02, -5.065680483568978e-03, -4.646402470484806e-03, -5.316898485777870e-03, -4.819085386589421e-03, -1.901496478843637e-02, -1.733574725187808e-02, -3.011597535646241e-03, -3.081336535513796e-03, -2.747255878542894e-03, -5.317198542402739e-03, -2.747255878542894e-03, -5.317198542402739e-03, -1.321131074354259e-01, -1.321678349608994e-01, -1.321178186608825e-01, -1.321739921705766e-01, -1.321128689650321e-01, -1.321686151017558e-01, -1.321180840697961e-01, -1.321729934978753e-01, -1.321153491000285e-01, -1.321710807519585e-01, -1.321153491000285e-01, -1.321710807519585e-01, -1.038230376850377e-01, -1.038322271691791e-01, -1.040061653898525e-01, -1.040557531149889e-01, -1.038354328794432e-01, -1.035216009444121e-01, -1.040229030307591e-01, -1.036954400908971e-01, -1.036133129641612e-01, -1.044127911216722e-01, -1.036133129641612e-01, -1.044127911216722e-01, -7.154035719371554e-02, -7.188021372636928e-02, -7.381532476082853e-02, -7.375554194115298e-02, -7.209384269704160e-02, -6.758533517781751e-02, -7.285616949578849e-02, -6.872088321947946e-02, -6.892990357859100e-02, -7.551251658347834e-02, -6.892990357859098e-02, -7.551251658347830e-02, -3.239197726012858e-02, -3.184391527080598e-02, -4.430920677706631e-02, -4.391091852170925e-02, -3.228823665064390e-02, -2.939977153503313e-02, -1.032443250912971e-01, -1.033256406767505e-01, -3.680158216736138e-02, -3.317141585472128e-02, -3.680158216736138e-02, -3.317141585472128e-02, -2.493594585772926e-03, -2.368514738088266e-03, -3.017775708744087e-03, -2.956742418313518e-03, -2.456094442139655e-03, -2.275319245688918e-03, -2.470723487136623e-02, -2.444200035934628e-02, -3.444530223021763e-03, -2.297627105747909e-03, -3.444530223021762e-03, -2.297627105747908e-03, -7.207907563633063e-02, -7.158366737767929e-02, -7.193770326556713e-02, -7.143826062123489e-02, -7.198832468634907e-02, -7.148872356178367e-02, -7.202773238186089e-02, -7.153241948062321e-02, -7.200798844942874e-02, -7.151058106232129e-02, -7.200798844942874e-02, -7.151058106232129e-02, -7.135713929633303e-02, -7.093720694789361e-02, -6.765589239009438e-02, -6.713345832661044e-02, -6.879092177867371e-02, -6.824727782566617e-02, -6.981057386456796e-02, -6.937321679273936e-02, -6.927821647881828e-02, -6.881965680322398e-02, -6.927821647881828e-02, -6.881965680322398e-02, -7.508806671297250e-02, -7.487032192240961e-02, -4.920038482171647e-02, -4.868825129825220e-02, -5.337095172570754e-02, -5.241584993242013e-02, -5.944371803357636e-02, -5.885560748529316e-02, -5.595126563767337e-02, -5.598694290621807e-02, -5.595126563767337e-02, -5.598694290621806e-02, -6.580000808890406e-02, -6.499414302333423e-02, -1.773472996356272e-02, -1.753120798263868e-02, -2.214692968998985e-02, -2.091744105410098e-02, -5.910188411470053e-02, -5.752755528464489e-02, -2.967981836964498e-02, -2.694165074274275e-02, -2.967981836964498e-02, -2.694165074274274e-02, -6.593851566632789e-03, -6.257235233887539e-03, -9.143293617831176e-04, -9.116957734166956e-04, -1.869565982496611e-03, -1.724809804621764e-03, -2.767194528819730e-02, -2.688551334317330e-02, -3.148917149788573e-03, -2.185739094728685e-03, -3.148917149788575e-03, -2.185739094728685e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
