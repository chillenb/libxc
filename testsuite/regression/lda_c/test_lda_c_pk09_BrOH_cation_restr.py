
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pk09_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pk09", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.574537144309812e-01, -1.574537702293432e-01, -1.574540356125695e-01, -1.574532048162978e-01, -1.574536376833579e-01, -1.574536376833579e-01, -1.109920713693937e-01, -1.109921325775532e-01, -1.109942421166668e-01, -1.109959591149153e-01, -1.109928283474724e-01, -1.109928283474724e-01, -6.702610558216571e-02, -6.699948985437494e-02, -6.635140856923365e-02, -6.655013885796929e-02, -6.650799265777500e-02, -6.650799265777500e-02, -3.792821684977404e-02, -3.820860299586847e-02, -7.077632813019809e-02, -3.298303555523280e-02, -3.501836253306241e-02, -3.501836253306240e-02, -3.475217041075780e-03, -3.644637273673670e-03, -1.477270616645580e-02, -2.063725621439071e-03, -2.568426144401538e-03, -2.568426144401538e-03, -1.223950782536229e-01, -1.224002196602499e-01, -1.223953343469447e-01, -1.223998729731963e-01, -1.223976741109988e-01, -1.223976741109988e-01, -9.484750129695432e-02, -9.504703147778157e-02, -9.470099710518468e-02, -9.487825262178161e-02, -9.502828059496259e-02, -9.502828059496259e-02, -6.383004779685307e-02, -6.580017127066133e-02, -6.200664255767478e-02, -6.291394552320892e-02, -6.420848902740088e-02, -6.420848902740088e-02, -2.702871781761159e-02, -3.795647435318034e-02, -2.584989547689889e-02, -9.431505939179742e-02, -2.955412552556995e-02, -2.955412552556995e-02, -1.606616598759477e-03, -2.019186887212397e-03, -1.558093386576806e-03, -2.034966184256088e-02, -1.865501472931259e-03, -1.865501472931259e-03, -6.394455922188001e-02, -6.380856697732661e-02, -6.385649572620852e-02, -6.389591156109896e-02, -6.387618909882552e-02, -6.387618909882552e-02, -6.329604395115064e-02, -5.974520325589730e-02, -6.080785628036055e-02, -6.182298729783995e-02, -6.130918187447335e-02, -6.130918187447335e-02, -6.693513712038608e-02, -4.243847461873197e-02, -4.611851255931407e-02, -5.198049752256945e-02, -4.899872613945466e-02, -4.899872613945464e-02, -5.785863248890314e-02, -1.432715767220901e-02, -1.768835380900241e-02, -5.119055623481477e-02, -2.359926071520874e-02, -2.359926071520882e-02, -4.764192539197741e-03, -5.622190984317019e-04, -1.154086352419393e-03, -2.272308032741304e-02, -1.730739519724992e-03, -1.730739519724997e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pk09_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pk09", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.641248988377078e-01, -1.641249464827946e-01, -1.641251731635956e-01, -1.641244635520458e-01, -1.641248332691052e-01, -1.641248332691052e-01, -1.204447921554875e-01, -1.204448534647940e-01, -1.204469664842538e-01, -1.204486863087121e-01, -1.204455503834925e-01, -1.204455503834925e-01, -7.506922177897607e-02, -7.504124692085792e-02, -7.435996269053148e-02, -7.456889667249872e-02, -7.452458814139938e-02, -7.452458814139938e-02, -4.413413680086969e-02, -4.443822828936560e-02, -7.900738982242245e-02, -3.873792026061963e-02, -4.096673162384763e-02, -4.096673162384774e-02, -4.554484618877036e-03, -4.771277204543890e-03, -1.819859557846692e-02, -2.725642939855228e-03, -3.384230570000329e-03, -3.384230570000329e-03, -1.317310888712054e-01, -1.317361121695001e-01, -1.317313390832639e-01, -1.317357734478495e-01, -1.317336251046042e-01, -1.317336251046042e-01, -1.040473075340071e-01, -1.042524019085192e-01, -1.038966843334124e-01, -1.040789198430322e-01, -1.042331303784796e-01, -1.042331303784796e-01, -7.170742455114912e-02, -7.378031947603614e-02, -6.978711131620305e-02, -7.074285524998580e-02, -7.210576023615803e-02, -7.210576023615803e-02, -3.214729884861212e-02, -4.416479185432103e-02, -3.082917237358140e-02, -1.034997609680230e-01, -3.495596083403292e-02, -3.495596083403292e-02, -2.125027529653617e-03, -2.667285294434467e-03, -2.061068034617624e-03, -2.461592710666251e-02, -2.465635306224539e-03, -2.465635306224539e-03, -7.182796355901744e-02, -7.168481228301637e-02, -7.173526523168716e-02, -7.177675603892322e-02, -7.175599542504030e-02, -7.175599542504030e-02, -7.114522230783439e-02, -6.740292442432518e-02, -6.852362525521256e-02, -6.959359618936052e-02, -6.905210658378974e-02, -6.905210658378974e-02, -7.497360656339994e-02, -4.900438878328603e-02, -5.294858990060187e-02, -5.918965227144159e-02, -5.602057821590795e-02, -5.602057821590761e-02, -6.541156583694974e-02, -1.767994810704146e-02, -2.156976251449467e-02, -5.835107649561123e-02, -2.829959510506426e-02, -2.829959510506382e-02, -6.190045141624244e-03, -7.439497114248763e-04, -1.527368853509230e-03, -2.731009575054718e-02, -2.288470896161510e-03, -2.288470896161521e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
