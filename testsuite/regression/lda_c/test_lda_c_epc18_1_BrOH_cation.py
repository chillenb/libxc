
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc18_1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.694098769024162e-05, -2.694076227691652e-05, -2.693969060778567e-05, -2.694304583066206e-05, -2.694129758106527e-05, -2.694129758106527e-05, -6.302107965477108e-03, -6.302066790868484e-03, -6.300647883967621e-03, -6.299493245330605e-03, -6.301598116152062e-03, -6.301598116152062e-03, -8.638448183527515e-02, -8.611464717161887e-02, -7.975048732204286e-02, -8.167241816790768e-02, -8.049794945667757e-02, -8.049794945667757e-02, -1.430060493320440e-03, -1.494738526951760e-03, -1.277890205963420e-01, -6.267276884564088e-04, -4.114953961685267e-04, -4.114953961685268e-04, -5.988902151641001e-08, -6.966962821814113e-08, -1.174644785753862e-05, -1.162511939380059e-08, -1.213029755099803e-08, -1.213029755099804e-08, -1.865457261805654e-03, -1.864427248093627e-03, -1.865405940854289e-03, -1.864496688159993e-03, -1.864937145197816e-03, -1.864937145197816e-03, -3.644821509025541e-02, -3.564855739678043e-02, -3.704686516225079e-02, -3.632370827269046e-02, -3.572243730678498e-02, -3.572243730678498e-02, -5.835130895412641e-02, -7.462034223995136e-02, -4.596898701675067e-02, -5.175357904887373e-02, -6.086590366744595e-02, -6.086590366744595e-02, -2.096520298350154e-04, -1.441235699346004e-03, -1.650004434210667e-04, -3.867239676017817e-02, -3.364492264135601e-04, -3.364492264135601e-04, -5.325329442443636e-09, -1.086228094924189e-08, -4.822979303028903e-09, -5.049841663989511e-05, -6.828354181747723e-09, -6.828354181747723e-09, -5.920689442307318e-02, -5.819074057816288e-02, -5.854713225915981e-02, -5.884166531592051e-02, -5.869413161695058e-02, -5.869413161695058e-02, -5.449635634274985e-02, -3.418053499738127e-02, -3.937226262710065e-02, -4.500811783497310e-02, -4.206893925881388e-02, -4.206893925881388e-02, -8.547212200686455e-02, -2.913197208828749e-03, -5.061279966442928e-03, -1.177193831719840e-02, -7.701354492307269e-03, -7.701354492307266e-03, -2.651252060380143e-02, -1.036735992875594e-05, -2.621062417302304e-05, -1.052494185341989e-02, -1.035797218265489e-04, -1.035797218265490e-04, -1.692671802270899e-07, -2.075699647897151e-10, -1.903385655836863e-09, -8.628770173099450e-05, -5.640201376490202e-09, -5.640201376490185e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc18_1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.195456935848192e-09, 1.126075523174140e-09, 1.219243773407538e-09, 1.102249599664968e-09, 1.095983961874759e-09, 1.225324680985660e-09, 1.366164790467297e-09, 9.557177482055834e-10, 1.504145719527946e-09, 8.174271405337735e-10, 1.504145719527946e-09, 8.174271405337735e-10, 5.677686608548156e-05, 5.660643917260166e-05, 5.678825991097804e-05, 5.659365150046038e-05, 5.653841255488789e-05, 5.679550326738585e-05, 5.655982238387465e-05, 5.673505033424316e-05, 5.434551990587870e-05, 5.901794191818778e-05, 5.434551990587870e-05, 5.901794191818778e-05, -1.685637169093027e-01, -1.665545157484830e-01, -1.683417259336032e-01, -1.658809836270491e-01, -1.546201217608315e-01, -1.578829724474374e-01, -1.600886654602371e-01, -1.590445771180406e-01, -1.432812631776085e-01, -1.746245298581908e-01, -1.432812631776085e-01, -1.746245298581908e-01, -3.036906511926567e-03, -2.708509467076657e-03, -3.201032702023593e-03, -2.810311601200845e-03, -2.343441231454763e-01, -2.111625008854324e-01, -1.280393089405268e-03, -1.228821454390517e-03, -4.753737497467523e-04, -3.077696121774161e-03, -4.753737497467527e-04, -3.077696121774161e-03, -1.317476653201828e-07, -1.098022317746367e-07, -1.553179219124897e-07, -1.263416060484248e-07, -2.557968257455230e-05, -2.172128709116392e-05, -2.267874253911787e-08, -2.385128308485661e-08, -1.436568329463722e-08, -7.795524035839897e-08, -1.436568329463722e-08, -7.795524035839897e-08, 5.834385028120281e-06, 4.943162305242613e-06, 5.840029696499237e-06, 4.925798854067067e-06, 5.842368004990962e-06, 4.934584141739574e-06, 5.830162751349505e-06, 4.936469458363486e-06, 5.839465144680851e-06, 4.932160700959478e-06, 5.839465144680851e-06, 4.932160700959478e-06, 8.409449375465524e-04, 8.373460975459258e-04, 8.385961126677014e-04, 8.196419377237914e-04, 7.828779100302023e-04, 9.079973376984791e-04, 7.736319612236152e-04, 9.013964346929464e-04, 9.822438925612255e-04, 6.759474723602294e-04, 9.822438925612255e-04, 6.759474723602294e-04, -1.164484465375036e-01, -1.173777014953625e-01, -1.472657347042034e-01, -1.470644080881428e-01, -9.803659399899942e-02, -8.800059400174327e-02, -1.094824046788705e-01, -9.927556175066715e-02, -1.130381346444111e-01, -1.317760910354182e-01, -1.130381346444111e-01, -1.317760910354182e-01, -4.254299995434455e-04, -4.134882778853443e-04, -2.907414262921909e-03, -2.864332217829674e-03, -3.580982819524699e-04, -3.060670641376011e-04, 8.753052209783410e-04, 8.413203168981746e-04, -7.366052975106964e-04, -6.196414779769524e-04, -7.366052975106964e-04, -6.196414779769524e-04, -1.130251727355763e-08, -1.006989075762179e-08, -2.222526754213986e-08, -2.124592001816359e-08, -1.055155573672548e-08, -8.883522090756427e-09, -1.019381729902265e-04, -1.000807255852953e-04, -2.451443364888019e-08, -9.464688734474703e-09, -2.451443364888019e-08, -9.464688734474702e-09, -1.192394473077257e-01, -1.178677706231881e-01, -1.172883404933814e-01, -1.159259587396802e-01, -1.179755781057728e-01, -1.166055738703657e-01, -1.185367844419374e-01, -1.171726568102902e-01, -1.182556718537524e-01, -1.168887340135804e-01, -1.182556718537524e-01, -1.168887340135804e-01, -1.100185575114986e-01, -1.089362487804324e-01, -6.961755169088613e-02, -6.872398497171778e-02, -8.013638608046569e-02, -7.908264652519090e-02, -9.132503413531756e-02, -9.037128538274548e-02, -8.547132772855555e-02, -8.452902761416146e-02, -8.547132772855555e-02, -8.452902761416146e-02, -1.664373934289759e-01, -1.656184119549551e-01, -5.890265137614962e-03, -5.789196733479878e-03, -1.031419152623734e-02, -1.001034528900613e-02, -2.391859445307285e-02, -2.352715699014328e-02, -1.547694469404687e-02, -1.549330639070357e-02, -1.547694469404687e-02, -1.549330639070356e-02, -5.420675563775400e-02, -5.310643240343675e-02, -2.094916070088771e-05, -2.052496165680151e-05, -5.514367390261834e-05, -4.995698702574250e-05, -2.168098397404425e-02, -2.073116252827144e-02, -2.255355612267876e-04, -1.915817095526111e-04, -2.255355612267877e-04, -1.915817095526112e-04, -3.576199626045726e-07, -3.213827664598232e-07, -4.165664311427273e-10, -4.137231647134300e-10, -4.193399807151495e-09, -3.485418227649538e-09, -1.768904261967659e-04, -1.684885725780518e-04, -1.887661204106815e-08, -8.043562316904649e-09, -1.887661204106810e-08, -8.043562316904626e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
