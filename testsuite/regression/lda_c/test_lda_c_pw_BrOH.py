
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.645997984151741e-01, -1.645998722376647e-01, -1.646002559406559e-01, -1.645990459764830e-01, -1.645998368922163e-01, -1.645998368922163e-01, -1.107850779813080e-01, -1.107851378255798e-01, -1.107879564174404e-01, -1.107891435020754e-01, -1.107852302312699e-01, -1.107852302312699e-01, -6.686325305100881e-02, -6.683844218398580e-02, -6.618769272053485e-02, -6.637648664173382e-02, -6.685420638633184e-02, -6.685420638633184e-02, -3.884837033745518e-02, -3.909777973532533e-02, -7.129479792198967e-02, -3.304156788860859e-02, -3.892344441654502e-02, -3.892344441654502e-02, -5.836962683808246e-03, -6.059137487280788e-03, -1.705860190727350e-02, -3.162581188295788e-03, -6.008297979517785e-03, -6.008297979517785e-03, -1.224141975990379e-01, -1.224193801535531e-01, -1.224147444423749e-01, -1.224187739336419e-01, -1.224168318272446e-01, -1.224168318272446e-01, -9.468350884767802e-02, -9.487551903244792e-02, -9.460553775405933e-02, -9.475589169031329e-02, -9.491382938026718e-02, -9.491382938026718e-02, -6.355014917329052e-02, -6.552007498022497e-02, -6.231420133945859e-02, -6.330606605881062e-02, -6.444479849692643e-02, -6.444479849692643e-02, -2.795793269891251e-02, -3.898287918460707e-02, -2.775591893236855e-02, -9.415468836655146e-02, -3.029261467963325e-02, -3.029261467963325e-02, -3.066310529287210e-03, -3.437963660306260e-03, -2.681751694391031e-03, -2.111688835133230e-02, -3.174878232166117e-03, -3.174878232166117e-03, -6.429433324589588e-02, -6.416711910179418e-02, -6.421278911905946e-02, -6.424797246805529e-02, -6.423036868777780e-02, -6.423036868777780e-02, -6.352072866330406e-02, -6.019573550959644e-02, -6.120712243727121e-02, -6.211323954294490e-02, -6.165521676530553e-02, -6.165521676530553e-02, -6.665886031904043e-02, -4.342843891221906e-02, -4.691727201472348e-02, -5.212074169948084e-02, -4.948806896823234e-02, -4.948806896823234e-02, -5.782950547549861e-02, -1.620746840488489e-02, -1.975615410603628e-02, -5.089630005930875e-02, -2.479858776778672e-02, -2.479858776778672e-02, -6.628431135172516e-03, -1.088756145419471e-03, -1.944410094864592e-03, -2.411826085391135e-02, -2.758875329691699e-03, -2.758875329691703e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747375022384104e-01, -1.747375764902732e-01, -1.747379624249751e-01, -1.747367454232825e-01, -1.747375409392460e-01, -1.747375409392460e-01, -1.202900715742410e-01, -1.202901326384370e-01, -1.202930086854292e-01, -1.202942199669432e-01, -1.202902269278121e-01, -1.202902269278121e-01, -7.491651594909550e-02, -7.489049418174454e-02, -7.420779404062448e-02, -7.440589533207512e-02, -7.490702782145091e-02, -7.490702782145091e-02, -4.512333343894460e-02, -4.539333489307169e-02, -7.955596680641969e-02, -3.879907728695543e-02, -4.520461861868123e-02, -4.520461861868123e-02, -7.408289672288964e-03, -7.682812223649188e-03, -2.082743917550992e-02, -4.067896992471561e-03, -7.620031457673412e-03, -7.620031457673412e-03, -1.321282949151480e-01, -1.321335590912405e-01, -1.321288503713318e-01, -1.321329433242859e-01, -1.321309706317822e-01, -1.321309706317822e-01, -1.037966701665785e-01, -1.039941747748390e-01, -1.037164617218208e-01, -1.038711268068387e-01, -1.040335787945163e-01, -1.040335787945163e-01, -7.143693172920582e-02, -7.350701329943157e-02, -7.013635655822872e-02, -7.118019607076904e-02, -7.237749697184798e-02, -7.237749697184798e-02, -3.318919960782708e-02, -4.526896280446310e-02, -3.296456561895865e-02, -1.032526050348499e-01, -3.577538399758732e-02, -3.577538399758732e-02, -3.946287747265609e-03, -4.415186743800788e-03, -3.459435458338579e-03, -2.549364889155059e-02, -4.083423057386236e-03, -4.083423057386236e-03, -7.221935974196110e-02, -7.208564332768093e-02, -7.213364933755588e-02, -7.217063101639243e-02, -7.215212759123316e-02, -7.215212759123316e-02, -7.140598901218036e-02, -6.790382068838616e-02, -6.897019217881802e-02, -6.992475394251257e-02, -6.944233915338220e-02, -6.944233915338220e-02, -7.470213189287776e-02, -5.006360750936621e-02, -5.380425383317106e-02, -5.935308484285391e-02, -5.654987411912206e-02, -5.654987411912206e-02, -6.540509854452932e-02, -1.983770052401256e-02, -2.393841941263745e-02, -5.805035041433707e-02, -2.965894237843184e-02, -2.965894237843184e-02, -8.384336692428079e-03, -1.421584092424698e-03, -2.520781366285218e-03, -2.889366156293847e-02, -3.557215255769209e-03, -3.557215255769209e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
